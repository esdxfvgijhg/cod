<?xml version="1.0"?><st-source><!-- Name: Roassal2Notice: Copyright (c) 2011-2017 ObjectProfile.com.Copyright (c) 2010 - 2011 Vanessa Pena, Alexandre BergelThis version of Roassal is distributed under the MIT License.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.BundleName: Roassal2BundleStructure: a Store.BundleForParcelComment: Roassal2 was developed from Roassal, which was in turn developed from Mondrian. This contains the functional code for Roassal2 in VisualWorks.This is an interactive visualisation engine. A short Smalltalk script lets you define what you view, assigning metrics of your data to define the shape, size and colour of your views.Information, tutorials, screencasts and more, can be found athttp://objectprofile.comDevelopmentPrerequisites: #(#(#any 'CairoGraphics' '') #(#any 'ImageReaders' '') #(#any 'Browser-BrowserUI' '') #(#any 'UIPainter' '') #(#any 'Tools-Trippy' '') #(#any 'URISupport' '') #(#any 'Protocols-Common' '') #(#any 'Roassal2-Xtentions' ''))DisregardedPrerequisites: #()Parcel: nilParcelName: Roassal2PrerequisiteDescriptions: #(#(#name 'CairoGraphics' #componentType #package) #(#name 'ImageReaders' #componentType #package) #(#name 'Browser-BrowserUI' #componentType #package) #(#name 'UIPainter' #componentType #package) #(#name 'Tools-Trippy' #componentType #package) #(#name 'URISupport' #componentType #package) #(#name 'Protocols-Common' #componentType #package) #(#name 'Roassal2-Xtentions' #componentType #package))PrerequisiteParcels: #(#('CairoGraphics' '') #('ImageReaders' '') #('Browser-BrowserUI' '') #('UIPainter' '') #('Tools-Trippy' '') #('URISupport' '') #('Protocols-Common' '') #('Roassal2-Xtentions' ''))Version: 2.91.1Post-Load Block: 	[:package |UIPalette activeSpecsList add: #{Roassal2.Roassal2Spec}.UIPalette activeSpecsList removeDuplicates]Pre-Unload Block: 	[:package | UIPalette activeSpecsList remove: #{Roassal2.Roassal2Spec}]Date: 8:15:18 AM June 23, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.3) of June 16, 2017 on June 23, 2017 at 8:15:18 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Roassal2</name><environment>Smalltalk</environment><private>false</private><imports>			private Squeak.*			private Smalltalk.*			</imports><category>Roassal2</category><attributes><package>Roassal2</package></attributes></name-space><class><name>RTObject</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTObject</class-id><body>Root of most of the Roassal classes.</body></comment><class><name>LinearGradient</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>start stop ramp </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.LinearGradient</class-id><body>I am a simple class that uses CairoGraphics.LinearGradientin pharo way.</body></comment><class><name>Color</name><environment>Roassal2</environment><super>Graphics.SimplePaint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>red green blue alpha </inst-vars><class-inst-vars>colorNames </class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.Color</class-id><body>The class color</body></comment><class><name>RTSVGInteraction</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type target contained external </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGInteraction</class-id><body>A RTSVGInteraction represents ay interaction present on a SVG export. It translates itself as javascript functions applied to SVG elements using its "id" or "class" attributes as anchor.The type field represents both the interaction type and how it will be translated to javascript, it is used to set the actual interactions to exactly the right elements.The target refers to the Roassal elements (as members of a class) affected by this interaction.Both contained and external are booleans used to determine where to insert the code in javascript. This position WIDELY varies, depending on the intended interaction.</body></comment><class><name>RTSVGPopup</name><environment>Roassal2</environment><super>Roassal2.RTSVGInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>click color position bounds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGPopup</class-id><body>A RTSVGPopup is any kind of popup born from a certain element.The click refers to the posibility of activating the popup only when the element is clicked. This is disabled by default.</body></comment><class><name>RTSVGGroupPopup</name><environment>Roassal2</environment><super>Roassal2.RTSVGPopup</super><private>false</private><indexed-type>none</indexed-type><inst-vars>group </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGGroupPopup</class-id><body>A RTSVGGroupPopup is a RTGroup popup. </body></comment><class><name>RTLayout</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>affectedNodes translator eventHandler currentIteraction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTLayout</class-id><body>A ROLayout is the superclass of all.Instance Variables	affectedNodes:		&lt;Object&gt;	currentIteraction:		&lt;Object&gt;	eventHandler:		&lt;Object&gt;	maxInterations:		&lt;Object&gt;	translator:		&lt;Object&gt;affectedNodes	- xxxxxcurrentIteraction	- xxxxxeventHandler	- xxxxxmaxInterations	- xxxxxtranslator	- xxxxx</body></comment><class><name>RTAbstractSunburstLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder angularSpacing radialSpacing hasCenter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Sunburst</category><attributes><package>Roassal2-Builder-Sunburst</package></attributes></class><comment><class-id>Roassal2.RTAbstractSunburstLayout</class-id><body>I am the abstract class for sunburst visualizations in Roassal2, check my subclasses * RTSunburstConstanWidthLayout* RtSunburstExtentLayoutYou can use this layout in with RTLayoutBuilder or with RTSunburstBuilderand their examples to get more info</body></comment><class><name>RTBuilder</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view interactionBuilder shapeBuilder layoutBuilder title metricNormalizer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common</package></attributes></class><comment><class-id>Roassal2.RTBuilder</class-id><body>The class RTBuilder translates a user-defined domain into low level instruction using the Roassal API. A builder essentially wraps a Roassal view and offers dedicated builders, described in the following sections.</body></comment><class><name>RTBundleBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label nodes edges rootNodes elements childrenBlock connectBezierBlock bezier sliderShape center edgeBuilderDo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-BundleEdge</category><attributes><package>Roassal2-Builder-BundleEdge</package></attributes></class><comment><class-id>Roassal2.RTBundleBuilder</class-id><body>You can use this builder to represent a hierarchy of an object(like Collection and all subclasses). This builder uses cluster layout.This builder uses all the leaf of the tree structure, and put a string representation for each object.Also this builder can create bezier relations between each leaf node. that you can activate with mouseEnter in one nodeThis builders adds some interactions, like* an interaction with beziers	 - #useBezierlineWith: . Send nil to disable* a slider to change the tension for each bezier shape	- #sliderShape: .Send nil to disable* RTRotableView	- view: anotherView. Send another view to disable</body></comment><class><name>TREvent</name><environment>Roassal2</environment><super>Core.Announcement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas position morph </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TREvent</class-id><body>TREvent is the root of all the events handled by Trachel (and therefore Roassal).Here is an example on how to use it:-=-=-=c := TRCanvas new.shape := TRBoxShape new size: 40.c addShape: shape.shape when: TREvent do: [ :evt | shape color: Color random. c signalUpdate ].c -=-=-=</body></comment><class><name>TRShapeEvent</name><environment>Roassal2</environment><super>Roassal2.TREvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>TRMorphDropEvent</name><environment>Roassal2</environment><super>Roassal2.TRShapeEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>droppedMorph dropMorphEvent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>TRMorphDrop</name><environment>Roassal2</environment><super>Roassal2.TRMorphDropEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>RTNullLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>RTAbstractBuilder</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common</package></attributes></class><class><name>RTShapeBuilder</name><environment>Roassal2</environment><super>Roassal2.RTAbstractBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shape createdElements shapeInitializer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common</package></attributes></class><class><name>RTBoundedShapeBuilder</name><environment>Roassal2</environment><super>Roassal2.RTShapeBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common</package></attributes></class><comment><class-id>Roassal2.RTBoundedShapeBuilder</class-id><body>A RTBoundedShapeBuilder is a shape builder for which all the nodes cannot have a size of less than 5 pixels.</body></comment><class><name>TRObject</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>TRFocusing</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>TRFocusCenter</name><environment>Roassal2</environment><super>Roassal2.TRFocusing</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>Margin</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>right bottom left top </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Core.Margin</class-id><body> (for now of rectangle-based operations).It can be expressed as different objects:- A number. When specified using a number, it sets all the four values to be the same.- A point. When specified as a point, pairs top/bottom and left/right take their values from a point y and x. - Four numbers. They represent all the four directions.- A rectangle. (do not use this version because it is proposed just for migration and it may force you to crea)In the future we may add an API (#margin) for singular margin.</body></comment><class><name>RTEdgeDrivenLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>edges userDefinedEdges fromPositions toPositions shouldSetDefaultAttachPoint </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTEdgeDrivenLayout</class-id><body>A ROEdgeDrivenLayout is xxxxxxxxx.Instance Variables	edges:		&lt;Object&gt;	fromPositions:		&lt;Object&gt;	toPositions:		&lt;Object&gt;	userDefinedEdges:		&lt;Object&gt;edges	- xxxxxfromPositions	- xxxxxtoPositions	- xxxxxuserDefinedEdges	- xxxxx</body></comment><class><name>RTAbstractGraphLayout</name><environment>Roassal2</environment><super>Roassal2.RTEdgeDrivenLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>verticalGap horizontalGap cachedChildren cachedParents cachedParentsWithHighestNestings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTAbstractGraphLayout</class-id><body>A ROAbstractGraphLayout is xxxxxxxxx.Instance Variables	cachedChildren:		&lt;Object&gt;	cachedParents:		&lt;Object&gt;	cachedParentsWithHighestNestings:		&lt;Object&gt;	horizontalGap:		&lt;Object&gt;	verticalGap:		&lt;Object&gt;cachedChildren	- xxxxxcachedParents	- xxxxxcachedParentsWithHighestNestings	- xxxxxhorizontalGap	- xxxxxverticalGap	- xxxxx</body></comment><class><name>RTAbstractRegularTreeLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGraphLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>alreadyLayoutedNodes topGap leftGap nodesByLayer isLayered shouldBeHorizontallyReversed shouldBeVerticallyReversed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTAbstractRegularTreeLayout</class-id><body>A ROAbstractRegularTreeLayout is xxxxxxxxx.Instance Variables	alreadyLayoutedNodes:		&lt;Object&gt;	isLayered:		&lt;Object&gt;	leftGap:		&lt;Object&gt;	nodesByLayer:		&lt;Object&gt;	topGap:		&lt;Object&gt;alreadyLayoutedNodes	- xxxxxisLayered	- xxxxxleftGap	- xxxxxnodesByLayer	- xxxxxtopGap	- xxxxx</body></comment><class><name>RTInteraction</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTInteraction</class-id><body>A ROInteraction is xxxxxxxxx.</body></comment><class><name>RTLinkView</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>showView viewBlock nameBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-HTML5</category><attributes><package>Roassal2-Exporter-HTML5</package></attributes></class><comment><class-id>Roassal2.RTLinkView</class-id><body>I am an interaction to export views with the RTHTML5Exporter and linked it, check my example in RTHTML5Example to get more info.</body></comment><class><name>TRPlatform</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><comment><class-id>Roassal2.TRPlatform</class-id><body>I have the methods of the default platform(pharo or visualworks)</body></comment><class><name>TRVWPlatform</name><environment>Roassal2</environment><super>Roassal2.TRPlatform</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Visualworks</package></attributes></class><comment><class-id>Roassal2.TRVWPlatform</class-id><body>I am the class to acces to the font of VW</body></comment><class><name>RTAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inverted </inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTAttachPoint</class-id><body>I am the superclass of the class hierarchy describing attach points. An attach point indicates where lines start and end. </body></comment><class><name>RTAbstractShorterDistanceAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTAbstractShorterDistanceAttachPoint</class-id><body>I am an abstract class. My subclasses have to override #attachPointsFor:on:</body></comment><class><name>RTShorterDistanceAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTAbstractShorterDistanceAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTShorterDistanceAttachPoint</class-id><body>-=-=-=v := RTView new.e1 := (RTBox new size: 50) elementOn: 1.e2 := (RTEllipse new size: 50) elementOn: 2.v add: e1; add: e2.e2 translateBy: 30 @ 60.e1 @ RTDraggable.e2 @ RTDraggable.s := RTArrowedLine new color: Color black.s attachPoint: RTShorterDistanceAttachPoint new.l := s edgeFrom: e1 to: e2.v add: l.v-=-=-=</body></comment><class><name>RTLineDecorationShape</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><comment><class-id>Roassal2.RTLineDecorationShape</class-id><body>A DCRTLineDecorationShape contains information about trachel shape used as line heads or tails with DCRTAbstractLineDecorationUsage: 	DCRTLineHead shape: DCRTEmptyArrow	or	DCRTEmptyArrow asHead</body></comment><class><name>RTSimpleArrow</name><environment>Roassal2</environment><super>Roassal2.RTLineDecorationShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>TRUserInputEvent</name><environment>Roassal2</environment><super>Roassal2.TRShapeEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>commandKeyPressed controlKeyPressed shiftKeyPressed optionKeyPressed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>TRAbstractMouseEvent</name><environment>Roassal2</environment><super>Roassal2.TRUserInputEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>TRMouseAbstractDrop</name><environment>Roassal2</environment><super>Roassal2.TRAbstractMouseEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>draggedShape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseAbstractDrop</class-id><body>I am a base class for (drag and) drop events attached to the drop target elements.</body></comment><class><name>RTShape</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color scale rotation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTShape</class-id><body>A RTShape is an element factory. A shape is shared amoung all the elements created by the shape. We therefore have the following relationsAn ''element'' is a graphical representation of an arbitrary object. An element is combined with ''shapes'' to define its visual representation. A shape describes a visual primitive representation such as a box, a circle, a line or a textual label. Shapes can be combined to form elaborated shapes. An end user sees elements and interacts with these elements by using the mouse and keyboard. A Roassal element is a compound object that contains (i) a two dimensional spatial location; (ii) a set of interactions; (iii) a combination of shapes; (iv) a model, which is any arbitrary object that belongs to the domain model provided by the user.shape := RTBox new size: 10.e1 := shape elementOn: 'hello'.e2 := shape elementOn: 'world'.self assert: e1 shape == e2 shape.self assert: e1 shape ~~ e1 trachelShape.self assert: (e1 shape isKindOf: RTBox).self assert: (e1 trachelShape isKindOf: TRBoxShape).self assert: e1 trachelShape ~~ e2 trachelShape.</body></comment><class><name>RTAbstractElementShape</name><environment>Roassal2</environment><super>Roassal2.RTShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>height width borderColor borderWidth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><class><name>RTBitmap</name><environment>Roassal2</environment><super>Roassal2.RTAbstractElementShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>form </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTBitmap</class-id><body>A RTBitmap represents a bitmap shape Here is an example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=	| v  s trachelShape |	v := RTView new.	s := RTBitmap element.	v add: s.	trachelShape := s trachelShape.	trachelShape extent: 180 @ 100.	trachelShape fillColor: Color blue.	1 to: 80 do: [ :i |		trachelShape at: i @ i put: Color green ].	v open-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTScrollBar</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTScrollBar</class-id><body>add a simple scroll bar to the view</body></comment><class><name>RTLegendItem</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>textSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Legend</category><attributes><package>Roassal2-Builder-Legend</package></attributes></class><class><name>RTSortBlock</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>RTAbstractArrow</name><environment>Roassal2</environment><super>Roassal2.RTLineDecorationShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>RTEmptyArrow</name><environment>Roassal2</environment><super>Roassal2.RTAbstractArrow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>TRCallableObject</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>callbacks </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>TRShape</name><environment>Roassal2</environment><super>Roassal2.TRCallableObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas color path strokePaint announcer element matrix rotationAngleDegrees session </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>TRAbstractBoxShape</name><environment>Roassal2</environment><super>Roassal2.TRShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rectangle strokeWidth dashes </inst-vars><class-inst-vars>nullRectangle </class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>TRBoxShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractBoxShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>TRRoundedBoxShape</name><environment>Roassal2</environment><super>Roassal2.TRBoxShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>borderRadius </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><comment><class-id>Roassal2.TRRoundedBoxShape</class-id><body>Box shape with (optionally) rounded corners.</body></comment><class><name>RTAbstractData</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder maxX maxY minX minY x y elements barBuilder elementActions xScale yScale label </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><class><name>RTAbstractMultipleData</name><environment>Roassal2</environment><super>Roassal2.RTAbstractData</super><private>false</private><indexed-type>none</indexed-type><inst-vars>groupedElements interaction metrics points colors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><class><name>RTVerticalMultipleData</name><environment>Roassal2</environment><super>Roassal2.RTAbstractMultipleData</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTVerticalMultipleData</class-id><body>RTVerticalMultipleData represents a group of data points that are vertically located. Each group has the same X value.Negative data are not allowed.Here is an example:[[[| b d |			b := RTGrapher new.d := RTVerticalMultipleData new.d points: #( #('hello' 1 2 1) #('world' 2 4 2 ) #('bonjour' 3 5 4) #('bonjour' 3 5 4 ) #('bonjour' 3 5 4)).d addMetric: #second.d addMetric: #third.d addMetric: #fourth.d barChartWithBarTitle: #first rotation: -30.b add: d.b			]]] Here another example:[[[| b d classes |classes := (Collection withAllSubclasses reverseSortedAs: #numberOfMethods) first:	10.			b := RTGrapher new.d := RTVerticalMultipleData new.d points: classes.d addMetric: #numberOfLinesOfCode.d addMetric: #numberOfMethods.d barChartWithBarTitle: #name rotation: -30.b add: d.b]]]			</body></comment><class><name>RTDoubleBarBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements topExtremity bottomExtremity verticalGap width </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTDoubleBarBuilder</class-id><body>A RTDoubleBarBuilder render a double bar chart</body></comment><class><name>Timespan</name><environment>Roassal2</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>start duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.Timespan</class-id><body>I represent a duration starting on a specific Timestamp.</body></comment><class><name>Month</name><environment>Roassal2</environment><super>Roassal2.Timespan</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>DaysInMonth MonthNames </class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.Month</class-id><body>I represent a month.</body></comment><class><name>AthensCairoSurface</name><environment>Roassal2</environment><super>Graphics.Pixmap</super><private>false</private><indexed-type>none</indexed-type><inst-vars>localCC cachedSurface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.AthensCairoSurface</class-id><body>I am a util class from pharo</body></comment><class><name>RTNAbstractNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>command </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizerOBSOLETE</category><attributes><package>Roassal2-ColorNormalizerOBSOLETE</package></attributes></class><comment><class-id>Roassal2.RTNAbstractNormalizer</class-id><body>A RONAbstractNormalizer is xxxxxxxxx.Instance Variables	command:		&lt;Object&gt;command	- xxxxx</body></comment><class><name>RTSVGTextPopup</name><environment>Roassal2</environment><super>Roassal2.RTSVGPopup</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text font fontSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGTextPopup</class-id><body>A RTSVGTextPopup is a simple text popup.</body></comment><class><name>RTColorFadingLegendItem</name><environment>Roassal2</environment><super>Roassal2.RTLegendItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>colors description </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Legend</category><attributes><package>Roassal2-Builder-Legend</package></attributes></class><class><name>RTHorizontalAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTHorizontalAttachPoint</class-id><body>Horizontal attach points between elements when drawing lines.  Useful for horizontal tree layout.-=-=-=v := RTView new.e1 := (RTBox new size: 50) elementOn: 1.e2 := (RTEllipse new size: 50) elementOn: 2.v add: e1; add: e2.e2 translateBy: 30 @ 60.e1 @ RTDraggable.e2 @ RTDraggable.s := RTArrowedLine new color: Color black.s attachPoint: RTHorizontalAttachPoint new.l := s edgeFrom: e1 to: e2.v add: l.v-=-=-=</body></comment><class><name>RTSVGExporter</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view stream fileName backgroundColor code canvasWidth canvasHeight finalWidth finalHeight </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGExporter</class-id><body>A RTSVGExporter is an exporter to get SVG files from RTBuilders or RTViews.For exporting from a RTView, use the "exportViewAsSVG:" method.For exporting a RTBuilder (or any subclasses) use the "exportBuilderAsSVG:" method.</body></comment><class><name>RTAnimation</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cycleLength element </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><comment><class-id>Roassal2.RTAnimation</class-id><body>I am called on every Morphic repaint cycle so you can update your visualization accordingly.==#start== method is called when the animation has been added to the view (so you can prepare your animation)==#refresh== is called on every repaint cycle (depending on the configured FPS many times every second)==#hasCompleted== should return ==true== once your animation has completed it's purpose, then it is automatically removed/detached from the view.</body></comment><class><name>RTAbstractZoomMove</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>animatedValue trachelCanvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><comment><class-id>Roassal2.RTAbstractZoomMove</class-id><body>I shange zoom ratio of camera by the value returned form #step method</body></comment><class><name>RTZoomOutMove</name><environment>Roassal2</environment><super>Roassal2.RTAbstractZoomMove</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><comment><class-id>Roassal2.RTZoomOutMove</class-id><body>I decrease camera's zoom by 20%</body></comment><class><name>RTAbstractInteractionView</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTAbstractInteractionView</class-id><body>Subclasses of myself are interaction for the view</body></comment><class><name>RTDraggableView</name><environment>Roassal2</environment><super>Roassal2.RTAbstractInteractionView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><class><name>TREventOverseer</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>TRAnnouncingOverseer</name><environment>Roassal2</environment><super>Roassal2.TREventOverseer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>announcer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><comment><class-id>Roassal2.TRAnnouncingOverseer</class-id><body>I am modified EventOverseer that uses its announcer for firing events and thus is more easily observable.</body></comment><class><name>RTAnnounceableObject</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>announcer attributes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTAnnounceableObject</class-id><body>A RTAnnounceableObject is the root of the class hierarchy to have an announcer, useful to define event callbacks.Instance Variables	announcer:		&lt;Object&gt;announcer	- xxxxx</body></comment><class><name>RTAbstractCircleLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>initialAngle initialIncrementalAngle initialRadius factor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTAbstractCircleLayout</class-id><body>A ROAbstractCircleLayout is xxxxxxxxx.Instance Variables	factor:		&lt;Object&gt;	initialAngle:		&lt;Object&gt;	initialIncrementalAngle:		&lt;Object&gt;	initialRadius:		&lt;Object&gt;factor	- xxxxxinitialAngle	- xxxxxinitialIncrementalAngle	- xxxxxinitialRadius	- xxxxx</body></comment><class><name>RTCircleLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractCircleLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTCircleLayout</class-id><body>A ROCircleLayout is xxxxxxxxx.</body></comment><class><name>RTAbstractWeightedCircleLayout</name><environment>Roassal2</environment><super>Roassal2.RTCircleLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTAbstractWeightedCircleLayout</class-id><body>I am the abstract root class of weighted circle layout. Look at the class comments of my subclasses for more details.</body></comment><class><name>RTAbstractScrollBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fixedPosition size movable orientation width shapes barShape barSpecific encompassingRectangleFromSpaceToPixel encompassingRectangle fillColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ScrollBar</category><attributes><package>Roassal2-Builder-ScrollBar</package></attributes></class><comment><class-id>Roassal2.RTAbstractScrollBuilder</class-id><body>Abstract class for the pad or bar builders</body></comment><class><name>RTScrollBarBuilder</name><environment>Roassal2</environment><super>Roassal2.RTAbstractScrollBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ScrollBar</category><attributes><package>Roassal2-Builder-ScrollBar</package></attributes></class><comment><class-id>Roassal2.RTScrollBarBuilder</class-id><body>A RTScrollBarBuilder is a scroll bar that you can add to navigate in your view. More than a Draggable view, it allows to keep a mark about your position in the view and it scale for large views. It can be static, movable, using #isStatic or #isMovableaving an orientation #vertical or #horizontal.the default configuration is #isBasic and #isStatic,the bar shape is defined by #barShape: &lt;#aBox or default value #anEllipse&gt;the bar can have a specificity like #scalable, so it give an idea of the size of the view.Size or fixedPosition can be defined as blocks.width: to set a static size of width.</body></comment><class><name>RTAbstractTreeBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>weight elements rootNodes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common</package></attributes></class><comment><class-id>Roassal2.RTAbstractTreeBuilder</class-id><body>I am a base class for some builders of roassal like:RTTreeMapBuilderRTCircularTreeMapBuilderRTBundleBuilderRTSunburstBuilder</body></comment><class><name>RTSunburstBuilder</name><environment>Roassal2</environment><super>Roassal2.RTAbstractTreeBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maxLevel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Sunburst</category><attributes><package>Roassal2-Builder-Sunburst</package></attributes></class><comment><class-id>Roassal2.RTSunburstBuilder</class-id><body>I am a class to create visualizations about rings, center is the root of the tree and arcs are the sub trees.You can customize the angle of the arc, and play with the with radius and width of each arc.</body></comment><class><name>DemoRoassal</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view1 view </inst-vars><class-inst-vars></class-inst-vars><imports>			Roassal2.*			</imports><category></category><attributes><package>Roassal2-Visualworks</package></attributes></class><class><name>RTLineDecoration</name><environment>Roassal2</environment><super>Roassal2.RTShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>width size attachPoint line baseSize percentage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><comment><class-id>Roassal2.RTLineDecoration</class-id><body>A RTLineDecoration is a shape decoration, intended to be combined with a line.</body></comment><class><name>RTDiamond</name><environment>Roassal2</environment><super>Roassal2.RTLineDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><comment><class-id>Roassal2.RTDiamond</class-id><body>A RTDiamond is a line decoration. -=-=-=-=-=-=-=-=-=-=-=-=| v e1 e2 l |v := RTView new.e1 := (RTEllipse new size: 20) element.e2 := (RTEllipse new size: 20) element.e1 @ RTDraggable.e2 @ RTDraggable.e2 translateBy: 50 @ 50.l := (RTLine new + RTDiamond new) edgeFrom: e1 to: e2. v add: e1; add: e2; add: l.v open-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>TRMouseDragEnd</name><environment>Roassal2</environment><super>Roassal2.TRAbstractMouseEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseDragEnd</class-id><body>When: at the end of DragDrop eventTarget: dragged element</body></comment><class><name>RTEllipse</name><environment>Roassal2</environment><super>Roassal2.RTAbstractElementShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTEllipse</class-id><body>A RTEllipse is an ellipse. e.g., RTEllipse new width: 10; height: 20| v |v := RTView new.v add: (RTEllipse new width: 10; height: 20) element.v open</body></comment><class><name>RTEventForwarder</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>toObject eventClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTEventForwarder</class-id><body>A RTEventForwarder is used to forward event from one element to other elements</body></comment><class><name>RTAbstractHorizontalTreeLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractRegularTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTAbstractHorizontalTreeLayout</class-id><body>A ROAbstractHorizontalTreeLayout is xxxxxxxxx.</body></comment><class><name>RTHorizontalTreeLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractHorizontalTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTHorizontalTreeLayout</class-id><body>A ROHorizontalTreeLayout is xxxxxxxxx.</body></comment><class><name>RTReversedHorizontalTreeLayout</name><environment>Roassal2</environment><super>Roassal2.RTHorizontalTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTReversedHorizontalTreeLayout</class-id><body>This class represent a reversed horizontal tree Layout.Here is an example:-=-=-=v := RTView new.es := RTBox new size: 10; elementsOn: (1 to: 100).v addAll: es.eb := RTEdgeBuilder new.eb view: v.eb objects: (1 to: 100).eb connectFrom: [ :value | value // 2 ].RTReversedHorizontalTreeLayout  on: es.v-=-=-=Using Mondrian and the layout builder:-=-=-=b := RTMondrian new.b shape box size: 20; color: Color red trans.b nodes: (1 to: 128).b edges connectFrom: [ :v | v // 2 ].b layout horizontalReversedTree.b -=-=-=</body></comment><class><name>RTTextTokenizer</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>wordSeparators </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TextBuilder</category><attributes><package>Roassal2-Builder-TextBuilder</package></attributes></class><comment><class-id>Roassal2.RTTextTokenizer</class-id><body>A RTTextTokenizer is responsible for splitting a text into lines and lines into words.Instance Variables	wordSeparators:		&lt;Collection&gt;wordSeparators	- collection of characters which are considered as word separators</body></comment><class><name>RTAutomaticFlowLayout</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>RTFilledArrow</name><environment>Roassal2</environment><super>Roassal2.RTAbstractArrow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>RTSVGEntity</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id element type fillColor strokeColor strokeWidth label position </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGEntity</class-id><body>A RTSVGEntity represents the SVG entity, in the SVG format.The id is used to differentiate elements for the interactions.The type represents the SVG element type, such as "text", "p", "circle", etc..The label represents the name used in the final SVG to differentiate group of elements. It also refers to the corresponding Roassal entity.</body></comment><class><name>RTSVGPolygon</name><environment>Roassal2</environment><super>Roassal2.RTSVGEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>box points </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGPolygon</class-id><body>A RTSVGPolygon is represents the SVG Polygon of a regular polygon, as defined in Roassal.</body></comment><class><name>TRAbstractLineShape</name><environment>Roassal2</environment><super>Roassal2.TRShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>width </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>TRLineShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractLineShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>from to </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><comment><class-id>Roassal2.TRLineShape</class-id><body>TRLineShape describes a line. Consider the following example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=c := TRCanvas new.l := TRLineShape new.l from: 0 @ 0 to: 50 @ 50.l color: Color red.c addShape: l.c-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=Another example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=c := TRCanvas new.radius := 80.0 to: 360 by: 10 do: [ :angle |	l := TRLineShape new.	l from: 0 @ 0 to: (radius * (angle degreesToRadians cos)) @ (radius * (angle degreesToRadians sin)).	l color: Color random.	c addShape: l.].c-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>TRStyledLineShape</name><environment>Roassal2</environment><super>Roassal2.TRLineShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dashes capStyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><comment><class-id>Roassal2.TRStyledLineShape</class-id><body>A DCTRStyledLineShape is line with possibility of being dashed, dotted, etc.solid - dashes: nildotted - dashes: #("fill" 1 "gap" 2)dashed - dashes: #("fill" 6 "gap" 4)dashdot - dashes: #("fill" 6 "gap" 3 "fill" 1 "gap" 3)</body></comment><class><name>RTInteractionBuilder</name><environment>Roassal2</environment><super>Roassal2.RTAbstractBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interactions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common</package></attributes></class><comment><class-id>Roassal2.RTInteractionBuilder</class-id><body>-=-=-=-=b := RTMondrian new.b interaction snapToGrid.b shape rectangle size: 20. b nodes: (1 to: 9).b layout grid.b-=-=-=-=</body></comment><class><name>RTDataInteractionBuilder</name><environment>Roassal2</environment><super>Roassal2.RTInteractionBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder dataSet </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTDataInteractionBuilder</class-id><body>I am interaction builder that provides some extra interactions specific for RTGrapher/RTData, such as dynamic decorators.</body></comment><class><name>RTAbstractDataSet</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>points x y builder dotBuilder histogramBuilder lineBuilder minX maxX minY maxY shouldConnect interaction elementActions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><class><name>RTAbstractStackedDataSet</name><environment>Roassal2</environment><super>Roassal2.RTAbstractDataSet</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTAbstractStackedDataSet</class-id><body>A data set is a set of points intended to be charted. A data set has to be added to a RTGrapher.  Look at the class comment of my subclasses for detail.</body></comment><class><name>RTComparison</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lhs rhs similarity </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-SimilarityMatrix</category><attributes><package>Roassal2-Builder-SimilarityMatrix</package></attributes></class><comment><class-id>Roassal2.RTComparison</class-id><body>A Comparison bundles two entities to be compared in a SimilarityMatrix.</body></comment><class><name>RTExploraBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nodes layout lineShape nodeListeners popUp popupText nextId dragChildren icons lastAddedNodes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Explora</category><attributes><package>Roassal2-Builder-Explora</package></attributes></class><comment><class-id>Roassal2.RTExploraBuilder</class-id><body>A ROExploraBuilder is xxxxxxxxx.Instance Variables	layout:		&lt;Object&gt;	lineShape:		&lt;Object&gt;	nextId:		&lt;Object&gt;	nodeListeners:		&lt;Object&gt;	nodeProperties:		&lt;Object&gt;	nodes:		&lt;Object&gt;	popUp:		&lt;Object&gt;	view:		&lt;Object&gt;layout	- xxxxxlineShape	- xxxxxnextId	- xxxxxnodeListeners	- xxxxxnodeProperties	- xxxxxnodes	- xxxxxpopUp	- xxxxxview	- xxxxx</body></comment><class><name>RTSVGAbstractLine</name><environment>Roassal2</environment><super>Roassal2.RTSVGEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGAbstractLine</class-id><body>A RTSVGAbstractLine refers to the common interface for both regular SVG lines and bezier lines (as paths).The decoration refers to the Maker of the Line.</body></comment><class><name>RTSVGBezierLine</name><environment>Roassal2</environment><super>Roassal2.RTSVGAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>points </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGBezierLine</class-id><body>A RTSVGBezierLine is represents the SVG path of a bezier line, as defined in Roassal.</body></comment><class><name>RTPolymorphicBoxLegendItem</name><environment>Roassal2</environment><super>Roassal2.RTLegendItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>widthDescription heightDescription boxDescription </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Legend</category><attributes><package>Roassal2-Builder-Legend</package></attributes></class><class><name>RTZoomInMove</name><environment>Roassal2</environment><super>Roassal2.RTAbstractZoomMove</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><comment><class-id>Roassal2.RTZoomInMove</class-id><body>I increase camera's zoom by 25%</body></comment><class><name>RTLinePathBuilder</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tension </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTLinePathBuilder</class-id><body>An interpolator a way to create lines in SVG</body></comment><class><name>RTLinearClosedPathBuilder</name><environment>Roassal2</environment><super>Roassal2.RTLinePathBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTLinearClosedPathBuilder</class-id><body>a Builder for points that return points with Z command</body></comment><class><name>RTAnchorConstraint</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element edge minDistance balance anchorElement guideEdge anchorShape guideLine </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTAnchorConstraint</class-id><body>I attach a RTElement to a RTEdge (works for both line and connection shapes). When the edge or it's extremities are moved, so is the anchor.Furthermore I will try to move the Element in such a way that it doesn't overlap neither the edge, nor it's extremities, nor their other lines. I will not however prevent overlapping of another elements (e.g. another element or edge nearby).!! ExampleSee RTConstraintExample&gt;&gt;exampleAnchorConstraint.!! API==#balance: aNumber==Specify where the anchor should be positioned. x \in [0, 1] for relative positions (so 0.5 will be exactly middle, 1 at the end, etc.).x &gt; 1 or x &lt; 0 for absolute positioning. E.g.: 10 - position the anchor 10 pixels from the beginning; -20 - 20 pixels from the end==#minDistance: aNumber==A minimum distance (in pixels) that should be maintained between the edge and the element</body></comment><class><name>RTAbstractGrapherDecorator</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder shapeBuilder placedInFront datasets </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><class><name>RTAbstractLineDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapherDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>values </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>RTAbstractValuesDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLineDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>labelConversion labelRotation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTAbstractValuesDecorator</class-id><body>The class RTAbstractValuesDecorator is the root of a class hierarchy made to labels some data points on the X and/or Y axis. Consider the following example:b := RTGrapher new.ds := RTDataSet new.ds points: #(0 1 2 3 4 5 6).b add: ds.deco :=  RTHorizontalAllValuesDecorator new.deco labelConversion: [ :value | '#', value asString ].b addDecorator: deco.deco :=  RTVerticalValuesDecorator new.deco addAll: #(2 3 4).deco labelConversion: [ :value | '#', value asString ].b addDecorator: deco.b axisX noTick; noLabel.b axisY noTick; noLabel.b </body></comment><class><name>RTAbstractHorizontalValuesDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractValuesDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>RTHorizontalAllValuesDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractHorizontalValuesDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>RTScrollPadBuilder</name><environment>Roassal2</environment><super>Roassal2.RTAbstractScrollBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ScrollBar</category><attributes><package>Roassal2-Builder-ScrollBar</package></attributes></class><comment><class-id>Roassal2.RTScrollPadBuilder</class-id><body>A RTScrollPadBuilder is a scroll pad that you can add to navigate in two dimension in your view. More than a Draggable view, it allows to keep a mark about your position in the view and it scale for large views. It can be static, movable, using #isStatic or #isMovableaving an orientation #vertical or #horizontal.the default configuration is #isBasic and #isStatic,the bar shape is defined by #barShape: &lt;#aBox or default value #anEllipse&gt;the bar can have a specificity like #scalable, so it give an idea of the size of the view.Size or fixedPosition can be defined as blocks.width: to set a static size of width.</body></comment><class><name>RTAbstractTickLineDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapherDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>RTVerticalTickLineDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractTickLineDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>Roassal2Spec</name><environment>Roassal2</environment><super>UI.WidgetSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bordered focusOnCenter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Visualworks</package></attributes></class><comment><class-id>Roassal2.Roassal2Spec</class-id><body>Roassal2Spec describes a component that is an instance of the RTView or RTBuilder subclasses or TRCanvas. The expected model a block that return the instance of (RTView or RTBuilder or TRCanvas).Check Roassal2ExampleBrowser to see more examples and learn to build your roassal visualizationInstance Variables:	model	&lt;Boolean&gt;  It sais if the Roassal2 uses border or not</body></comment><class><name>RTSBFadeInteraction</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>action stillInSunburst </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Sunburst</category><attributes><package>Roassal2-Builder-Sunburst</package></attributes></class><comment><class-id>Roassal2.RTSBFadeInteraction</class-id><body>A RTFadeInteraction is a roassal2 interaction that allows to an element of sunburst  and its path to stand out, this works with the RTMouseEnter/RTMouseLeave events.Instance Variables	action:		a block closureaction	- When one element of sunburst is pointed, the fade action works over the other elements, when this happen, the action block is called with the element's model as an argument.</body></comment><class><name>RTAbstractLine</name><environment>Roassal2</environment><super>Roassal2.RTShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>width attachPoint allowSelfLoop </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTAbstractLine</class-id><body>All  my subclasses describes a line shape</body></comment><class><name>RTBezierLine</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controllingElements follow tension </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTBezierLine</class-id><body>A RTBezierLine defines a bezier line shape.Here is an example=-=-=-=-=-=-=-=-=	| v shape  edge els |	v := RTView new.	shape := RTEllipse new size: 10; color: (Color purple alpha: 0.3).	els := (shape elementsOn: (1 to: 6)) @ RTDraggable.	v addAll: els .	RTHorizontalLineLayout on: v elements.	edge := (RTBezierLine new controllingElements: v elements) edgeFrom: els first to: els last.	v add: edge.	v open=-=-=-=-=-=-=-=-=</body></comment><class><name>RTSVGPathBezierLine</name><environment>Roassal2</environment><super>Roassal2.RTBezierLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTSVGPathBezierLine</class-id><body>This is a RTBezierLine using a TRSVGPath instead of a TRBezierLine as Trachel shape.An edge with an array of control points will generate a sequence of quadratic Bezier curves.</body></comment><class><name>RTLabel</name><environment>Roassal2</environment><super>Roassal2.RTShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text height fontName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTLabel</class-id><body>A RTLabel is a shape to describe textual shape.| v shape es |v := RTView new.shape := RTLabel new text: [ :c | 'Class ', c name ].es := shape elementsOn: Collection withAllSubclasses.RTGridLayout on: es.v addAll: es.v open</body></comment><class><name>RTExtensibleLabel</name><environment>Roassal2</environment><super>Roassal2.RTLabel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><class><name>RTLazyInteraction</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTLazyInteraction</class-id><body>I am an abstract interaction that postpones the element initialization until it is already connected to the view.</body></comment><class><name>RTAbstractVerticalTreeLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractRegularTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTAbstractVerticalTreeLayout</class-id><body>A ROAbstractVerticalTreeLayout is xxxxxxxxx.</body></comment><class><name>RTTreeLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractVerticalTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTTreeLayout</class-id><body>A ROTreeLayout is xxxxxxxxx.</body></comment><class><name>RTReversedTreeLayout</name><environment>Roassal2</environment><super>Roassal2.RTTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTReversedTreeLayout</class-id><body>This class represent a reversed vertical tree Layout.Here is an example:-=-=-=v := RTView new.es := RTBox new size: 10; elementsOn: (1 to: 100).v addAll: es.eb := RTEdgeBuilder new.eb view: v.eb objects: (1 to: 100).eb connectFrom: [ :value | value // 2 ].RTReversedTreeLayout  on: es.v-=-=-=Using Mondrian and the layout builder:-=-=-=b := RTMondrian new.b shape box size: 20; color: Color red trans.b nodes: (1 to: 128).b edges connectFrom: [ :v | v // 2 ].b layout treeReversed.b -=-=-=</body></comment><class><name>RTAbstractLineLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gapSize horizontalGap verticalGap horizontalOutGap verticalOutGap alignment horizontallyStretchable verticallyStretchable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTAbstractLineLayout</class-id><body>A ROAbstractLineLayout is the abstract superclass of the line layout.Instance Variables	alignment:		&lt;Object&gt;	gapSize:		&lt;Object&gt;	horizontalGap:		&lt;Object&gt;	horizontalOutGap:		&lt;Object&gt;	horizontallyStretchable:		&lt;Object&gt;	verticalGap:		&lt;Object&gt;	verticalOutGap:		&lt;Object&gt;	verticallyStretchable:		&lt;Object&gt;alignment	- xxxxxgapSize	- xxxxxhorizontalGap	- xxxxxhorizontalOutGap	- xxxxxhorizontallyStretchable	- xxxxxverticalGap	- xxxxxverticalOutGap	- xxxxxverticallyStretchable	- xxxxx</body></comment><class><name>RTHorizontalLineLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLineLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTHorizontalLineLayout</class-id><body>A RTHorizontalLineLayout locates all the elements horizontally</body></comment><class><name>RTTextWord</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interval text </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TextBuilder</category><attributes><package>Roassal2-Builder-TextBuilder</package></attributes></class><comment><class-id>Roassal2.RTTextWord</class-id><body>A RTTextWord represents one word of an original text.Instance Variables	interval:		&lt;Interval&gt;	text:		&lt;String | Text&gt;interval	- interval of the word in the original texttext	- word, a part of the orignal text</body></comment><class><name>RTDummyNode</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>edge </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTDummyNode</class-id><body>A RODummyNode is used by the sugiyama layout</body></comment><class><name>RTSVGArc</name><environment>Roassal2</environment><super>Roassal2.RTSVGEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>center innerRadius outterRadius alphaAngle betaAngle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGArc</class-id><body>A RTSVGArc is represents the SVG path for a radial arc, as in Roassal.</body></comment><class><name>TRMouseDragEnter</name><environment>Roassal2</environment><super>Roassal2.TRMouseAbstractDrop</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseDragEnter</class-id><body>When: when the dragged element entered a valid drop target elementTarget: drop target element (element underneath the dragged one)</body></comment><class><name>RTAbstractGrapher</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>axisConfigurationX axisConfigurationY maxX maxY minX minY extent decorators withOrigin yOffset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><class><name>RTDynamicEqualizerGrapher</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>metrics lastObject barElements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><class><name>RTData</name><environment>Roassal2</environment><super>Roassal2.RTAbstractData</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dotBuilder lineBuilder shouldConnect interaction shouldHaveBars </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTData</class-id><body>A data set for which each element has to be plotted using two functions, one against the X-axis and another against the Y-axis), is modelled using the class RTData. -=-=-="Since no x: and y: have been specified, it simply lines up all the values"b := RTGrapher new.ds := RTData new. ds dotShape color: Color red. ds points: #(5 1 20 8).b add: ds.b.-=-=-=-=-=-=b := RTGrapher new.ds := RTData new. ds dotShape color: Color red. ds points: #(5 1 20 8).ds y: [ :x | x * x ].b add: ds.b.-=-=-=-=-=-=b := RTGrapher new.ds := RTData new. ds dotShape color: Color red. ds points: (1 to: 100).ds y: [ :x | x * x ].b add: ds.b.-=-=-=-=-=-="Use objects instead of numerical values"b := RTGrapher new.ds := RTData new. ds dotShape color: (Color red alpha: 0.3). ds points: Collection withAllSubclasses.ds y: #numberOfLinesOfCode.ds x: #numberOfMethods.b add: ds.b.-=-=-=</body></comment><class><name>RTSelectionEvent</name><environment>Roassal2</environment><super>Core.Announcement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>group shape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Selection</category><attributes><package>Roassal2-Selection</package></attributes></class><comment><class-id>Roassal2.RTSelectionEvent</class-id><body>I am an event for RTSelectableView</body></comment><class><name>RTSelectionEnd</name><environment>Roassal2</environment><super>Roassal2.RTSelectionEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Selection</category><attributes><package>Roassal2-Selection</package></attributes></class><comment><class-id>Roassal2.RTSelectionEnd</class-id><body>I am called when the selection with the elastic box ends</body></comment><class><name>RTExploraNode</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element builder id parentNode directions expanded expansion expandedNodes iconOpen iconClose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Explora</category><attributes><package>Roassal2-Builder-Explora</package></attributes></class><comment><class-id>Roassal2.RTExploraNode</class-id><body>A ROExploraNode is xxxxxxxxx.Instance Variables	builder:		&lt;Object&gt;	directions:		&lt;Object&gt;	expanded:		&lt;Object&gt;	expandedNodes:		&lt;Object&gt;	expansion:		&lt;Object&gt;	id:		&lt;Object&gt;	parentNode:		&lt;Object&gt;builder	- xxxxxdirections	- xxxxxexpanded	- xxxxxexpandedNodes	- xxxxxexpansion	- xxxxxid	- xxxxxparentNode	- xxxxx</body></comment><class><name>RTVector</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y z </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-CircularMap</category><attributes><package>Roassal2-Builder-CircularMap</package></attributes></class><comment><class-id>Roassal2.RTVector</class-id><body>I am a class to represent a simple vector and their functions</body></comment><class><name>RTSVGAbstractMarker</name><environment>Roassal2</environment><super>Roassal2.RTSVGEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>xExtent yExtent size </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGAbstractMarker</class-id><body>A RTSVGAbstractMarker represents the SVG marker, set on a Line.</body></comment><class><name>RTSVGArrowMarker</name><environment>Roassal2</environment><super>Roassal2.RTSVGAbstractMarker</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGArrowMarker</class-id><body>A RTSVGArrowMarker is an arrow (open figure)  marker.</body></comment><class><name>RTLabelLegendItem</name><environment>Roassal2</environment><super>Roassal2.RTLegendItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text model color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Legend</category><attributes><package>Roassal2-Builder-Legend</package></attributes></class><class><name>RTContinuousAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>offset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTContinuousAttachPoint</class-id><body>Attach point which does not select best point from predefined points, but calculates it continuously from simple geometric shapes</body></comment><class><name>RTForceLayoutStepping</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view layout afterBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><class><name>RTSpringLayoutStepping</name><environment>Roassal2</environment><super>Roassal2.RTForceLayoutStepping</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><class><name>RTXPSVGAnimation</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>curves0 curves1 animatedValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTXPSVGAnimation</class-id><body>I am a simple animation for the example stacks examples in RTExperimentalExample</body></comment><class><name>RTNestingBehavior</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTNestingBehavior</class-id><body>A RTNestingBehavior is the root of classes to describes behavior when nesting.Consider the following example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=| v  es |v := RTView new.es := RTBox elementsOn: (1 to: 50).back := (RTBox new color: Color red; size: 100) element.v add: back.v addAll: es.RTFlowLayout new on: es.RTNest new	behavior: (RTTopLeftBehavior new);	on: back nest: es."behavior: (RTTopLeftBehavior new);"es @ RTPopup @ RTDraggable.v-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTTopLeftBehavior</name><environment>Roassal2</environment><super>Roassal2.RTNestingBehavior</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><class><name>RTAbstractElementHandling</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements fixedElement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><class><name>RTAbstractVerticalValuesDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractValuesDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>labelColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>RTVerticalAllValuesDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractVerticalValuesDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTVerticalAllValuesDecorator</class-id><body>=-=-=-=-| b ds deco labels |b := RTGrapher new.ds := RTData new.ds points: #(2 3 4 5 6).b add: ds.deco := RTVerticalAllValuesDecorator new.b addDecorator: deco.b axisX noTick; noLabel.b axisY noTick; noLabel.b =-=-=-=-</body></comment><class><name>RTNLinearNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTNAbstractNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maximumValue context minimumValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizerOBSOLETE</category><attributes><package>Roassal2-ColorNormalizerOBSOLETE</package></attributes></class><comment><class-id>Roassal2.RTNLinearNormalizer</class-id><body>A RONLinearNormalizer is xxxxxxxxx.Instance Variables	context:		&lt;Object&gt;	maximumValue:		&lt;Object&gt;	minimumValue:		&lt;Object&gt;context	- xxxxxmaximumValue	- xxxxxminimumValue	- xxxxx</body></comment><class><name>RTHorizontalLineDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLineDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTHorizontalLineDecorator</class-id><body>Add horizontal lines for some values-=-=-=-=-=	| b ds p |	b := RTGrapher new.	ds := RTDataSet new.	ds points: #( 0 1 2 10).	b add: ds.	b minY: -3.33.	p := RTHorizontalLineDecorator new.	p add: 5; add: 7; add: 3.34.	p shape line color: (Color red alpha: 0.3).	b addDecorator: p.	p := RTVerticalLineDecorator new.	p add: 5.	p shape line color: (Color blue alpha: 0.3).	b addDecorator: p.	b build.	^ b view -=-=-=-=-=</body></comment><class><name>Roassal2Inspector</name><environment>Roassal2</environment><super>Tools.Trippy.Inspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view roassalView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Visualworks</package></attributes></class><comment><class-id>Roassal2.Roassal2Inspector</class-id><body>I am a basic inspector for Roassal2 View or builders or canvas. In order to show buttons like zoom in zoom out center scaled, etc.</body></comment><class><name>RTMatrixRing</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>matrix elements innerRadius externalRadius rowGap columnGap lineShape rowBlock columnBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Sunburst</category><attributes><package>Roassal2-Builder-Sunburst</package></attributes></class><comment><class-id>Roassal2.RTMatrixRing</class-id><body>I'm a class that models matrix data as concentric rings, with columns and row separations.Look at exampleRTMatrixRing for details on how to use it.</body></comment><class><name>RTMultiColoredLine</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>colorArray path </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTMultiColoredLine</class-id><body>A RTMultiColoredLine is a colored shape for lines from a color array  (Can be a Color Palete Sequential.Instance Variables	colorArray:		&lt;Object&gt;	path :colorArray	- xxxxx</body></comment><class><name>RTGradientColoredLine</name><environment>Roassal2</environment><super>Roassal2.RTMultiColoredLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>precision </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTGradientColoredLine</class-id><body>A RTGradientColoredLine is an alpha and color gradiant shape between the two first values of colorArray. Precision define the number of gradient colors for the edges.Instance Variables	precision :		&lt;Object&gt;</body></comment><class><name>RTClickStateInteraction</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><class><name>RTExpandable</name><environment>Roassal2</environment><super>Roassal2.RTClickStateInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>afterBlock groupBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTExpandable</class-id><body>Make an element clickable and expandable. When expanded, elements may be added inside.Consider the following example:[[[v := RTView new.s := RTShapeBuilder new		rectangle;		width: [ :c | c numberOfVariables * 5 ]; height: #numberOfMethods.		es := s elementsOn: RTShape withAllSubclasses.v add: es.es @ RTPopup @ (RTLabelled new setAsHighlightable).expand := (RTExpandable new				group: [ :group :element | 					methods := (RTBox new color: Color red) 										elementsOn: element model rtmethods.					RTGridLayout on: methods.					methods @ RTPopup.					group addAll: methods];				afterBlock: [ RTGridLayout on: es] ).es @ expand. RTGridLayout on: es.^ v]]]</body></comment><class><name>RTDragAndDroppable</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hosts doBlock elementBeingDragged </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><class><name>RTLayoutBuilder</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>layout actionOnEdges partitions dynamicForceBasedLayout </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common</package></attributes></class><comment><class-id>Roassal2.RTLayoutBuilder</class-id><body>RTLayoutBuilder is a higher abstract to manage layout. Most builder use it as it significantly shorten the use of layouts.Consider the following example:-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.es := (RTBox new size: 8) elementsOn: (1 to: 100).v addAll: es.lb := RTLayoutBuilder new.lb horizontalFlow.lb setUpElements: es.v-=-=-=-=-=-=-=-=-=-=-=-=Another example using conditional layout:-=-=-=-=-=-=-=-=-=-=-=-=b := RTMondrian new.b nodes: self.b edges connectToAll: [ :c | c queryAllOutgoingInvocations atTypeScope ].b layout 	forceWithCharge: -300;	ifElement: #isNotConnected then: RTNullLayout new.b-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTForceBasedLayout</name><environment>Roassal2</environment><super>Roassal2.RTEdgeDrivenLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>oldPositions nodes weights strengths lengths gravity friction theta charge alpha charges strength length fixedNodes center initialLayout nbIterations shouldUseProgressBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTForceBasedLayout</class-id><body>A ROForceBasedLayout is inspired from the Code of D3. The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.Instance Variables	alpha:		&lt;Object&gt;	center:		&lt;Object&gt;	charge:		&lt;Object&gt;	charges:		&lt;Object&gt;	fixedNodes:		&lt;Object&gt;	friction:		&lt;Object&gt;	gravity:		&lt;Object&gt;	layoutInitial:		&lt;Object&gt;	length:		&lt;Object&gt;	lengths:		&lt;Object&gt;	nodes:		&lt;Object&gt;	oldPositions:		&lt;Object&gt;	strength:		&lt;Object&gt;	strengths:		&lt;Object&gt;	theta:		&lt;Object&gt;	weights:		&lt;Object&gt;alpha	- xxxxxcenter	- xxxxxcharge	- xxxxxcharges	- xxxxxfixedNodes	- xxxxxfriction	- xxxxxgravity	- xxxxxlayoutInitial	- xxxxxlength	- xxxxxlengths	- xxxxxnodes	- xxxxxoldPositions	- xxxxxstrength	- xxxxxstrengths	- xxxxxtheta	- xxxxxweights	- xxxxx</body></comment><class><name>RTTextLine</name><environment>Roassal2</environment><super>Core.OrderedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TextBuilder</category><attributes><package>Roassal2-Builder-TextBuilder</package></attributes></class><comment><class-id>Roassal2.RTTextLine</class-id><body>A RTTextLine contains RTTextWord instances and represents one line of a text.</body></comment><class><name>RTMockEdge</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>from to </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>TRMouseMove</name><environment>Roassal2</environment><super>Roassal2.TRAbstractMouseEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>RTSVGLink</name><environment>Roassal2</environment><super>Roassal2.RTSVGInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>link </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGLink</class-id><body>A RTSVGLink is a link (to an external browser) when clicking a certain element. </body></comment><class><name>RTGrapherInteraction</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTGrapherInteraction</class-id><body>I am a base class for interactions specific to RTGrapher.</body></comment><class><name>RTDataToggleInteraction</name><environment>Roassal2</environment><super>Roassal2.RTGrapherInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dataset legendElements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTDataToggleInteraction</class-id><body>I hide the dataset when the associated legend entry has been clicked on.</body></comment><class><name>RTSelectionChange</name><environment>Roassal2</environment><super>Roassal2.RTSelectionEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Selection</category><attributes><package>Roassal2-Selection</package></attributes></class><comment><class-id>Roassal2.RTSelectionChange</class-id><body>I am the event that is called when the elastic box changes over some elements</body></comment><class><name>RTExploraTestTree</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left right parent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Explora</category><attributes><package>Roassal2-Builder-Explora</package></attributes></class><class><name>RTFocusElement</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y z animation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-CircularMap</category><attributes><package>Roassal2-Builder-CircularMap</package></attributes></class><comment><class-id>Roassal2.RTFocusElement</class-id><body>I am a new interaction to focus and zoom one element</body></comment><class><name>RTSVGLine</name><environment>Roassal2</environment><super>Roassal2.RTSVGAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>extent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGLine</class-id><body>A RTSVGLine is represents the SVG line of a regular line, as defined in Roassal.</body></comment><class><name>RTLineLegendItem</name><environment>Roassal2</environment><super>Roassal2.RTLegendItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color text </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Legend</category><attributes><package>Roassal2-Builder-Legend</package></attributes></class><class><name>RTCenteredAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTCenteredAttachPoint</class-id><body>Make the line start and ends from the center of the element.This is the default attach point for lines.  Consider the following example:[[[v := RTView new.es := (RTEllipse new size: 40) elementsOn: #(1 2).es second translateBy: 100 @ 100.es @ RTDraggable.v addAll: es.lineShape := RTLine new color: Color blue.lineShape attachPoint: (RTCenteredAttachPoint instance).v add: (lineShape edgeFrom: es first to: es second).v]]]</body></comment><class><name>RTLinearMove</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>animatedValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><comment><class-id>Roassal2.RTLinearMove</class-id><body>A RTLinearMove linearly and at a regular speed move the element on which the animation is invoked on</body></comment><class><name>RTAccelerationMove</name><environment>Roassal2</environment><super>Roassal2.RTLinearMove</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><class><name>RTLinearPathBuilder</name><environment>Roassal2</environment><super>Roassal2.RTLinePathBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTLinearPathBuilder</class-id><body>A simple clase for create Lines in SVG</body></comment><class><name>RTResize</name><environment>Roassal2</environment><super>Roassal2.RTAbstractElementHandling</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTResize</class-id><body>Adjust the size of the Elements.[ [ [ 	values := #(35 26 5 18 17 60 36 13 16 28 29 3 8 0 3 2 14 12 13 17 1 9 3 3 4 1 1 1 2 1 1 61).	v := RTView new.	n := RTMultiLinearColorForIdentity new objects: values.	shape := RTBox new color: n; size: #yourself.	es := shape elementsOn: values.	v addAll: es.	RTResize new elements: es; sameSize.	RTHorizontalLineLayout new gapSize: 0; on: es.		v ] ] ]</body></comment><class><name>RTConstraint</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>verticalPadding horizontalPadding directionY directionX orientation fixedElement fixedElementX fixedElementY movableElementY movableElement movableElementX </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTConstraint</class-id><body>I am iteratively buildable constraint for moving and positioning an element on top of another one.!! UsageThe order of configuration message sends is irrelevant, only the last of a group will be used.Note: ==move== and ==stick== will execute the movement on the configured object (so if you ==stick== shapes and then change configuration, it will honor the new configuration.[ [ [(RTConstraint on: aChildShape background:  parentShape)	top | middle | bottom; "vertical position"	left | center | right; "horizontal position"	inner | border | outer; "inside the parent, on border, outside"	move; "execute movement"	padding: aNumber; "shortcut for vertical + horizontal padding"	verticalPadding: aNumber;	horizontalPadding: aNumber;	stick "add callbacks that will continuously execute the movement"]]]See ==self default== for default configuration.[ [ [v := RTView new.es := (RTBox new size: 50) element.es @ RTDraggable.v add: es.l := RTLabel elementOn: 'This is a label!'.v add: l.RTConstraint new	moveable: l;	fix: es;	inner;	bottom;	move.v  ] ] ]</body></comment><class><name>RTLazyMetricNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>messages realNormalizer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><class><name>RTHorizontalValuesDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractHorizontalValuesDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>RTNIdentityNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTNAbstractNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dictionary colorIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizerOBSOLETE</category><attributes><package>Roassal2-ColorNormalizerOBSOLETE</package></attributes></class><comment><class-id>Roassal2.RTNIdentityNormalizer</class-id><body>A RONIdentityNormalizer is xxxxxxxxx.Instance Variables	colorIndex:		&lt;Object&gt;	dictionary:		&lt;Object&gt;colorIndex	- xxxxxdictionary	- xxxxx</body></comment><class><name>RTHorizontalTickLineDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractTickLineDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTHorizontalTickLineDecorator</class-id><body>Add some horizontal lines, one line per tick.	b := RTGrapher new.	b extent: 300 @ 200.	ds := RTData new.	ds points: (-50 to: 100 by: 0.1).	ds y: [ :x | (0.1 * x) sin  ].	ds noDot.	ds interaction popupText: 'sinus'.	ds connectColor: Color blue.	b add: ds.	ds := RTData new.	ds points: (-50 to: 100 by: 0.1).	ds y: [ :x | (0.1 * x) cos  ].	ds noDot.	ds interaction popupText: 'cosinus'.	ds connectColor: Color red.	b add: ds.	b addDecorator: RTHorizontalTickLineDecorator new.	b addDecorator: RTVerticalTickLineDecorator new.	^ b	</body></comment><class><name>TRExampleApplication</name><environment>Roassal2</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>roassalView view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Visualworks</package></attributes></class><comment><class-id>Roassal2.TRExampleApplication</class-id><body>I am a example class, you can find a simple way to put your roassal visual part</body></comment><class><name>RTAbstractLabeled</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas color highlightable lowColor offsetOnEdge position text fontSize labelTrachel shouldBeInTheBack </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTAbstractLabeled</class-id><body>Abstract class for labeled interaction. Maybe this abstract class is not necessary, since it has only one subclass</body></comment><class><name>RTLabeled</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLabeled</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTLabeled</class-id><body>A RTLabeled  adds a label above an element. The label may be particularized using #text: in the default string representation is not sufficient. Consider:E.g., v := RTView new.e := (RTEllipse new size: 30) elementOn: 42.v add: e.e @ (RTLabeled new text: [ :value | 'My value is ', value asString ]).vInstance Variables	canvas:		&lt;Object&gt;	color:		&lt;Object&gt;	highlightable:		&lt;Object&gt;	lowColor:		&lt;Object&gt;	offsetOnEdge:		&lt;Object&gt;	position:		&lt;Object&gt;	text:		&lt;Object&gt;canvas	- xxxxxcolor	- xxxxxhighlightable	- xxxxxlowColor	- xxxxxoffsetOnEdge	- xxxxxposition	- xxxxxtext	- xxxxx</body></comment><class><name>RTShowEdge</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>connectToElements shape reciber </inst-vars><class-inst-vars>lastHighlightedElements lastColor </class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTShowEdge</class-id><body>RTShowEdge is an interaction that add edges on one particular element when the mouse is above the element. Edges are removed when the mouse leaves the element.=-=-=-=	| v es |	v := RTView new.	es := ((RTEllipse new size: 30) + RTLabel) elementsOn: (1 to: 20).	v addAll: es.	RTCircleLayout new initialRadius: 150; on: es.	es @ (RTShowEdge new connectTo: [ :value | value - 5 to: value + 5]; shape: (RTLine new color: (Color blue alpha: 0.4))).	^ v=-=-=-=</body></comment><class><name>RTMenuItem</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name callback selected after rawmenu color background </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Menu</category><attributes><package>Roassal2-Builder-Menu</package></attributes></class><class><name>RTAbstractFlowLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maxWidth gapSize alignment </inst-vars><class-inst-vars>aBlock maxWithBlock </class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTAbstractFlowLayout</class-id><body>A RTAbstractFlowLayout is a layout based on the size in pixels of elements.Instance Variables	alignment:		&lt;Object&gt;	gapSize:		&lt;Object&gt;	maxWidth:		&lt;Object&gt;alignment	- xxxxxgapSize	- xxxxxmaxWidth	- xxxxx</body></comment><class><name>RTHorizontalFlowLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractFlowLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTHorizontalFlowLayout</class-id><body>A RTHorizontalFlowLayout is a FlowLayout horizontaly arranged,  right queued at default.</body></comment><class><name>RTScale</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>range domain interpolate uninterpolate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><comment><class-id>Roassal2.RTScale</class-id><body>A class to have nice scales checks subclasses</body></comment><class><name>RTScaleLinear</name><environment>Roassal2</environment><super>Roassal2.RTScale</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clamp output input </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><class><name>RTMockElement</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>realElement position </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>RTTextBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hook wordHook wordInteractionBuilder wordShapeBuilder padding textTokenizer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TextBuilder</category><attributes><package>Roassal2-Builder-TextBuilder</package></attributes></class><comment><class-id>Roassal2.RTTextBuilder</class-id><body>A RTTextBuilder parses a text and displays it on a RTView.It uses textTokenizer for splitting text into lines and lines into words. For each word an RTElement is created. It allows to have different shape or/and interaction on each word. User can define how to split text by implementing a textTokenizer; by default RTTextTokenizer. All the RTElements representing words are nested to a main RTElement object with padding.On each word, wordShapeBuilder and wordInteractionBuilder are applied. Before applying shape and interaction builders on any RTElement object, hook for main element and wordHook for wor elements are called. It allows to make extra customization for each element.Instance Variables	hook:						&lt;BlockClosure&gt;	padding:					&lt;Integer&gt;	textTokenizer:				&lt;RTTextTokenizer&gt;	wordHook:					&lt;BlockClosure&gt;	wordInteractionBuilder:		&lt;RTInteractionBuilder&gt;	wordShapeBuilder:			&lt;RTShapeBuilder&gt;hook	- is one-orgument-block which receives a main RTElement object; the RTElement object nests all the other objects for a displayed text. It is called before any element initialization. padding	- number of pixes between main RTElement object and nested text.textTokenizer	- is responsible for splitting a text into lines and lines into words.wordHook	- is two-argument-block which receives a word element and interval of a word in the original textwordInteractionBuilder	- interaction builder applied on each word elementwordShapeBuilder	- shape builder applied on each word element</body></comment><class><name>TRMouseEnter</name><environment>Roassal2</environment><super>Roassal2.TRAbstractMouseEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseEnter</class-id><body>When: when a mouse cursor entered an elementTarget: entered element</body></comment><class><name>RTDynamicGrapher</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y allAddedElements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTDynamicGrapher</class-id><body>Version of Grapher that allow for dynamic data points addition. Here is a small example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=	| b |	b := RTDynamicGrapher new.	b maxX: 100.	b maxY: 100.	b x: #x; y: #y.	 	b shape circle color: (Color red alpha: 0.3).	b view addMenu: '+ 10' callback: [ 			b addAll: ((1 to: 10) collect: [ :i | (100 atRandom @ 100 atRandom) ]) ].	b open-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTSelectionStart</name><environment>Roassal2</environment><super>Roassal2.RTSelectionEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Selection</category><attributes><package>Roassal2-Selection</package></attributes></class><comment><class-id>Roassal2.RTSelectionStart</class-id><body>I am called when the event with the elastic box start over the elements in one view</body></comment><class><name>TRAbstractLineDecoratorShape</name><environment>Roassal2</environment><super>Roassal2.TRShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>size to from width open type baseSize percentage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><comment><class-id>Roassal2.TRAbstractLineDecoratorShape</class-id><body>A TRAbstractLineDecoratorShape represents the shape of a RTLineDecoration.The "open" field refers to the shape itself. If it is a closed, paintable shape, or an open shape.</body></comment><class><name>TRAbstractArrowHeadShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractLineDecoratorShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><class><name>TREmptyArrowHeadShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractArrowHeadShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><class><name>RTMakeEdgeNotUpdatable</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions-MorphingView</category><attributes><package>Roassal2-Interactions-MorphingView</package></attributes></class><comment><class-id>Roassal2.RTMakeEdgeNotUpdatable</class-id><body>This class is a bit of a hack. The problem is drag-and-droping an element updates the edges connected to that element. However, the edge update also refresh the color and the width. And this is problematic when you try to change the color and the width of the edge. Dragging an element makes the edge use the width and color set in the RTLine shape.In the future, maybe in Roassal3, which mechanism will be removed.-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.e1 := RTBox element.e2 := RTBox element.e1 @ RTDraggable.e2 @ RTDraggable.v add: e1; add: e2.e1 translateBy: 10 @ 8.v add: (RTLine edgeFrom: e1 to: e2).v addMenu: 'do' callback: [ 	v edges first @ RTMakeEdgeNotUpdatable.	v edges first trachelShape color: Color red; width: 3. 		v signalUpdate ].v-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTFocusAnimation</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas anime1 anime2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-CircularMap</category><attributes><package>Roassal2-Builder-CircularMap</package></attributes></class><comment><class-id>Roassal2.RTFocusAnimation</class-id><body>I am an animation that change the position and the zoom of the camera by the value returned from #step selector</body></comment><class><name>RTColoredTextLegendItem</name><environment>Roassal2</environment><super>Roassal2.RTLegendItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Legend</category><attributes><package>Roassal2-Builder-Legend</package></attributes></class><class><name>RTBorderAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>offset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTBorderAttachPoint</class-id><body>I am an attach point that will end the line on the border of the end shapes.Unline ContinuousAttachPoint &amp; co. you don't need to care about what the end shape is, as long as it is one of the basic shapes.Supported shapes:	- Box	-RoundedBox	- Ellipse/CircleTodo:	- PolygonSupported lines:	- Line (straight line)Todo:	- MultiLine	- BezierLine</body></comment><class><name>RTAbstractElasticBoxInteraction</name><environment>Roassal2</environment><super>Roassal2.RTAbstractInteractionView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view draggingView events shapeBuilder announcer key group allowNegatedBox </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Selection</category><attributes><package>Roassal2-Selection</package></attributes></class><comment><class-id>Roassal2.RTAbstractElasticBoxInteraction</class-id><body>I am a class to describe elastic boxes in view, this means that there is a shape in a view that allow you* select elements () then you can do something.* zoom in an zoom out in the view</body></comment><class><name>RTInterpolator</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>start stop </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTInterpolator</class-id><body>I am a base Interpolator, my sbuclasses are	RTColorInterpolator, and RTNumberInterpolator	</body></comment><class><name>RTColorInterpolator</name><environment>Roassal2</environment><super>Roassal2.RTInterpolator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><class><name>RTAction</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><class><name>RTBlink</name><environment>Roassal2</environment><super>Roassal2.RTAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTBlink</class-id><body>RTBlink is an interaction to make element blink. You simply need to invoke  "RTBlink on: aRoassalElement"Here is an example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.v @ RTDraggableView.shape := RTBox new width: [ :cls | cls numberOfVariables * 5  max: 5 ]; height: [ :cls | cls numberOfMethods sqrt * 2 ].es := shape elementsOn: Collection withAllSubclasses.v addAll: es.RTFlowLayout on: es.RTMetricNormalizer new	elements: es;	normalizeColor: #numberOfLinesOfCode.	es when: TRMouseClick do: [ :event | RTBlink new color: Color blue; on: event element ].v-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=And a larger example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="Set here the classes you wish to visualize"classes := Collection withAllSubclasses.v := RTView new.v @ RTDraggableView.shape := RTBox new width: [ :cls | cls numberOfVariables * 5  max: 5 ]; height: [ :cls | cls numberOfMethods sqrt * 2 ].es := shape elementsOn: classes.v addAll: es.RTFlowLayout on: es.RTMetricNormalizer new	elements: es;	normalizeColor: #numberOfLinesOfCode."Set here the classes you wish to visualize"labels := (RTLabel new height: 8) elementsOn: classes.RTFlowLayout new gapSize: 0; on: labels.v addAll: labels.TRConstraint move: labels onTheRightOf: es.labels translateBy: 20 @ 0.labels @ RTHighlightable.labels when: TRMouseClick do: [ :event | RTBlink new color: Color blue; on: (es elementFromModel: event element model) ].es @ RTHighlightable.es when: TRMouseClick do: [ :event | RTBlink new color: Color blue; on: (labels elementFromModel: event element model) ].v-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>GTriangle</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>v1 v2 v3 edgesByOpositeVertex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.GTriangle</class-id><body>I am a triangle</body></comment><class><name>RTMapBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color scale countries popup cities cityBuilder countryNames cityNames routeBuilder periodLabel cityElements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map</category><attributes><package>Roassal2-Builder-Map</package></attributes></class><comment><class-id>Roassal2.RTMapBuilder</class-id><body>A RTMapBuilder is xxxxxxxxx. Instance Variables	cities:		&lt;Object&gt;	cityBuilder:		&lt;Object&gt;	cityElements:		&lt;Object&gt;	cityNames:		&lt;Object&gt;	color:		&lt;Object&gt;	countries:		&lt;Object&gt;	countryNames:		&lt;Object&gt;	mapPing:		&lt;Object&gt;	periodLabel:		&lt;Object&gt;	popup:		&lt;Object&gt;	routeBuilder:		&lt;Object&gt;	scale:		&lt;Object&gt;cities	- xxxxxcityBuilder	- xxxxxcityElements	- xxxxxcityNames	- xxxxxcolor	- xxxxxcountries	- xxxxxcountryNames	- xxxxxmapPing	- xxxxxperiodLabel	- xxxxxpopup	- xxxxxrouteBuilder	- xxxxxscale	- xxxxx</body></comment><class><name>RTVerticalMaxValueDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractVerticalValuesDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTVerticalMaxValueDecorator</class-id><body>=-=-=-=| b ds |b := RTGrapher new.ds := RTData new.ds points: RTShape withAllSubclasses.ds y: #numberOfMethods.b add: ds.b addDecorator: RTVerticalMinValueDecorator new red.b addDecorator: RTVerticalMaxValueDecorator new blue.b axisY noLabel.b =-=-=-=</body></comment><class><name>RTMultipleColorLinearNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTNAbstractNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>normalizers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizerOBSOLETE</category><attributes><package>Roassal2-ColorNormalizerOBSOLETE</package></attributes></class><comment><class-id>Roassal2.RTMultipleColorLinearNormalizer</class-id><body>A ROMultipleColorLinearNormalizer is xxxxxxxxx.Instance Variables	normalizers:		&lt;Object&gt;normalizers	- xxxxx</body></comment><class><name>RTAbstractAverageDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapherDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shouldHaveLabel color shapes labelBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>RTAverageDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractAverageDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTAverageDecorator</class-id><body>RTAverageDecorator is a decorator that indicates the average of a set of values.Consider the following example:-=-=-=-=b := RTGrapher new.ds := RTDataSet new. ds dotShape color: Color red. ds points: #(5 1 20 8).b add: ds.b addDecorator: (RTAverageDecorator new withLabel; labelConvertion: [ :aValue | 'average = ', aValue asFloat asString ]).b.-=-=-=-=</body></comment><class><name>TRLabelShape</name><environment>Roassal2</environment><super>Roassal2.TRShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text font fontSize fontName cachedWidth cachedHeight </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>TRStyledLabelShape</name><environment>Roassal2</environment><super>Roassal2.TRLabelShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>emphasis </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>RTAbstractDraggable</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>groupToDrag </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><class><name>RTDraggableSnapToGrid</name><environment>Roassal2</environment><super>Roassal2.RTAbstractDraggable</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gridSize strategy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTDraggableSnapToGrid</class-id><body>I am an interaction which allows the element to be dragged in a steps of fixed size equivalent to the size of the grid.If the view has RTGridView interaction, then I will use it's spacing instead.Here is an example:[[[v := RTView new.s := RTBox new size: 25; color: (Color blue alpha: 0.3).es := s elementsOn: (1 to: 10).v addAll: es.RTGridLayout on: es.es @ RTDraggableSnapToGrid.v]]]When embedded within the RTInteractionBuilder (and thus by Mondrian):[[[b := RTMondrian new.b interaction snapToGrid gridSize: 10.b shape rectangle size: 25. b shape color: Color transparent.b shape borderColor: Color black.b nodes: (1 to: 9).b layout grid.b]]]</body></comment><class><name>RTAbstractHighlightable</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>highlightElements </inst-vars><class-inst-vars>lastHighlightedElements lastColor </class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTAbstractHighlightable</class-id><body>A RTAbstractHighlightable is an highlight mechanism of an element or group of elements. It trigger highlight on mouse enter and reset the highlight on mouse leave. By default it highlight the element itself, but by methods #highlight: and #highlightElements: any other element can be highlighted.Instance Variables	highlightElements:		&lt;BlockClosure&gt;highlightElements	- it is one argument block (o any object which understand #rtValue:) which returns collection of elements. Those element are then highlighted.</body></comment><class><name>RTKiviatBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kiviatMetrics kiviatNodes objects axisSize highlight polygons shapes axisTitle axisTitles axisBuilt </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Kiviat</category><attributes><package>Roassal2-Builder-Kiviat</package></attributes></class><comment><class-id>Roassal2.RTKiviatBuilder</class-id><body>A RTKiviatBuilder is a builder for Kiviat Chart, comparing objects considering metrics.Instance Variables	axisSize:		&lt;Object&gt;	highlight:		&lt;Object&gt;	kiviatMetrics:		&lt;Object&gt;	kiviatNodes:		&lt;Object&gt;	metrics:		&lt;Object&gt;	objects:		&lt;Object&gt;	shapes:		&lt;Object&gt;axisSize	- xxxxxhighlight	- xxxxxkiviatMetrics	- xxxxxkiviatNodes	- xxxxxmetrics	- xxxxxobjects	- xxxxxshapes	- xxxxx</body></comment><class><name>RTUninterpolate</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>a b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><class><name>RTUninterpolateClamp</name><environment>Roassal2</environment><super>Roassal2.RTUninterpolate</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><class><name>TRMouseDragging</name><environment>Roassal2</environment><super>Roassal2.TRAbstractMouseEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseDragging</class-id><body>When: during dragging of the elementTarget: dragged element</body></comment><class><name>RTBox</name><environment>Roassal2</environment><super>Roassal2.RTAbstractElementShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>borderStyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTBox</class-id><body>A RTBox is a rectangular box. E.g.,| v |v := RTView new.v add: (RTBox new width: 10; height: 20) element.v open</body></comment><class><name>TRCircleHeadShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractLineDecoratorShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><class><name>TRFilledCircleHeadShape</name><environment>Roassal2</environment><super>Roassal2.TRCircleHeadShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><class><name>RTBounds</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>circles indeces maxCircles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-CircularMap</category><attributes><package>Roassal2-Builder-CircularMap</package></attributes></class><comment><class-id>Roassal2.RTBounds</class-id><body>I am a class to help layout method of RTCircularTreeMapBuilder</body></comment><class><name>RTAbstractMorphingView</name><environment>Roassal2</environment><super>Roassal2.RTAbstractInteractionView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>referenceView translator referenceModels afterAllTranslationsBlocks </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions-MorphingView</category><attributes><package>Roassal2-Interactions-MorphingView</package></attributes></class><comment><class-id>Roassal2.RTAbstractMorphingView</class-id><body>view1 := RTView new.view1 addAll: ((RTEllipse new size: 20) elementsOn: (1 to: 25)).RTEdgeBuilder new	view: view1;	connectFrom: [ :vv | vv // 2 ].RTTreeLayout on: view1 elements.view2 := RTView new.view2 addAll: ((RTEllipse new size: 20) elementsOn: (1 to: 25)).RTGridLayout on: view2 elements.view2 addMenu: 'Morphing' callback: [ view2 @ (RTMorphingView new referenceView: view1; smoothTransition) ]</body></comment><class><name>TRClipBoxShape</name><environment>Roassal2</environment><super>Roassal2.TRBoxShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>edges useColor condition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><class><name>RTVerticalAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTVerticalAttachPoint</class-id><body>Vertical attach points between elements when drawing lines. Useful for (vertical) tree layout-=-=-=v := RTView new.e1 := (RTBox new size: 50) elementOn: 1.e2 := (RTEllipse new size: 50) elementOn: 2.v add: e1; add: e2.e2 translateBy: 30 @ 60.e1 @ RTDraggable.e2 @ RTDraggable.s := RTArrowedLine new color: Color black.s attachPoint: RTVerticalttachPoint new.l := s edgeFrom: e1 to: e2.v add: l.v-=-=-=</body></comment><class><name>RTSelectiveShape</name><environment>Roassal2</environment><super>Roassal2.RTAbstractElementShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shape labelShape backgroundColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTSelectiveShape</class-id><body>I am a shape to create a composite node, with:* A shape of background (box, circle, triangle, etc)* A shape with text</body></comment><class><name>RTFisheye</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>radius distortion k1 k0 focus position view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTFisheye</class-id><body>I am a simple to expand boxes from a simple view using the mouse in that interaction.</body></comment><class><name>RTNoBehavior</name><environment>Roassal2</environment><super>Roassal2.RTNestingBehavior</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><class><name>AthensAffineTransform</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y shx shy sx sy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.AthensAffineTransform</class-id><body>I support the same protocol than AthensTransform,but in addition I store a plain 2x3 matrix with state accessible at any moment.This is different to AthensTransform because it does not expose its internal storage, because it can be backend specific.Instance Variables	shx	&lt;ArithmeticValue&gt;	description of shx	shy	&lt;ArithmeticValue&gt;	description of shy	sx	&lt;ArithmeticValue&gt;	description of sx	sy	&lt;ArithmeticValue&gt;	description of sy	x	&lt;Float&gt;	description of x	y	&lt;Float&gt;	description of y</body></comment><class><name>RTNExplicitIdentityNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTNIdentityNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>colors defaultColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizerOBSOLETE</category><attributes><package>Roassal2-ColorNormalizerOBSOLETE</package></attributes></class><comment><class-id>Roassal2.RTNExplicitIdentityNormalizer</class-id><body>A RONExplicitIdentityNormalizer is xxxxxxxxx.Instance Variables	colors:		&lt;Object&gt;	defaultColor:		&lt;Object&gt;colors	- xxxxxdefaultColor	- xxxxx</body></comment><class><name>RTCityBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name cities popup mapBuilder evolutionPeriod step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map</category><attributes><package>Roassal2-Builder-Map</package></attributes></class><class><name>RTExploraNodeLazy</name><environment>Roassal2</environment><super>Roassal2.RTExploraNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Explora</category><attributes><package>Roassal2-Builder-Explora</package></attributes></class><class><name>RTHorizontalAverageDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractAverageDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTHorizontalAverageDecorator</class-id><body>RTHorizontalAverageDecorator is a decorator that indicates the average of a set of values.Consider the following example:-=-=-=-=b := RTGrapher new.ds := RTDataSet new. ds dotShape color: Color red. ds points: #(5 1 20 8).b add: ds.b addDecorator: (RTHorizontalAverageDecorator new withLabel; labelConvertion: [ :aValue | 'average = ', aValue asFloat asString ]).b.-=-=-=-=</body></comment><class><name>TRRotatedLabelShape</name><environment>Roassal2</environment><super>Roassal2.TRLabelShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>angle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>RTShowLabel</name><environment>Roassal2</environment><super>Roassal2.RTAbstractHighlightable</super><private>false</private><indexed-type>none</indexed-type><inst-vars>labelledInteraction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTShowLabel</class-id><body>A RTShowLabel is an interaction that add a label on a set of elements when the mouse enters a particular element.  RTLabelled is used for the labelling. When the mouse leaves the element, all the labels are removed.Instance Variables	labelledInteraction:		&lt;RTLabelled&gt;labelledInteraction	- an object which is responsible for creating and removing of a label</body></comment><class><name>RTMenuActivable</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTMenuActivable</class-id><body>A RTMenuActivable adds a menu to an element. The menu is activable by right-clicking on the node.For example:classes := RTObject withAllSubclasses.v := RTView new.v @ RTDraggableView.n := RTMultiLinearColorForIdentity new objects: classes.shape := RTEllipse new size: #numberOfMethods; color: n.es := shape elementsOn: classes.es @ (RTMenuActivable new action: #inspect; item: 'browse class' action: [ :e | e model browse ]).v addAll: es.RTFlowLayout on: es.v</body></comment><class><name>RTDecorationItem</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shape tooltip action </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><class><name>RTKiviatMetric</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maxSize modelBlock minValue maxValue named block angle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Kiviat</category><attributes><package>Roassal2-Builder-Kiviat</package></attributes></class><comment><class-id>Roassal2.RTKiviatMetric</class-id><body>A RTKiviatMetric represent an axis in the view and is used to know where to place an element in the view according to a value.Instance Variables	maxSize:		&lt;Object&gt;	maxValue:		&lt;Object&gt;	minValue:		&lt;Object&gt;	modelBlock:		&lt;Object&gt;maxSize	- xxxxxmaxValue	- xxxxxminValue	- xxxxxmodelBlock	- xxxxx</body></comment><class><name>RTAbstractGridLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gapSize lineItemsCountBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTAbstractGridLayout</class-id><body>A ROAbstractGridLayout is xxxxxxxxx.Instance Variables	gapSize:		&lt;Object&gt;	lineItemsCountBlock:		&lt;Object&gt;gapSize	- xxxxxlineItemsCountBlock	- xxxxx</body></comment><class><name>RTCellLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGridLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inCellPosition translateElement align </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTCellLayout</class-id><body>A ROCellLayout is like ROGridLayout. Elements of each column are centered along the same vertical line. And elements of each row are centered along the same horizontal line.Instance Variables	inCellPosition:		&lt;Object | Block&gt;inCellPosition	- Object which computes position of each element inside a cell. The cell is the space allocated for an element. Its height is maximum of heights of elements on the row. Its width is maximum of widths of elements on the column. By default elements are in the middle of their cell.</body></comment><class><name>RTScalePolylinear</name><environment>Roassal2</environment><super>Roassal2.RTScale</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><class><name>RTZoomableBoxView</name><environment>Roassal2</environment><super>Roassal2.RTAbstractElasticBoxInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Selection</category><attributes><package>Roassal2-Selection</package></attributes></class><comment><class-id>Roassal2.RTZoomableBoxView</class-id><body>I am a class that allows you to use a elastic box in a View, this box is a tool that allows you to zoom in or zoom out in a view.</body></comment><class><name>RTArcLine</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>distance head </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTArcLine</class-id><body>I am a circle arc-like line, good for visualizing two lines going in opposite directions.[[[|v els e1 e2 arcShape|v := RTView new.els := RTEllipse new color: Color gray; borderColor: Color black; size: 20; elementsOn: #(A B).els @ RTDraggable.v addAll: els.els second translateBy: 100 @ 0.e1 := RTArcLine new distance: 10; withContinuousCircleAttachPoint; filledNarrowArrowHead; color: Color black; edgeFrom: els first to: els last.e2 := RTArcLine new distance: 10; withContinuousCircleAttachPoint; filledNarrowArrowHead; color: Color black; edgeFrom: els second to: els first.v add: e1; add: e2.v]]]</body></comment><class><name>RTNoShape</name><environment>Roassal2</environment><super>Roassal2.RTShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTNoShape</class-id><body>This implements the Null pattern for a Roassal shape. It is typically used for defaults.</body></comment><class><name>RTXPPoint</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y y0 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTXPPoint</class-id><body>I am an point with an offset</body></comment><class><name>RTGroup</name><environment>Roassal2</environment><super>Core.OrderedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>attributes elementFromModelCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTGroup</class-id><body>A RTGroup represents collections of Roassal elements. A RTGroup is not designed to contain other things than Roassal elements. A RTGroup is polymorphic to RTElement. When an RTElement is expected, one can provide an RTGroup.</body></comment><class><name>TRSimpleArrowShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractArrowHeadShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><class><name>RTSVGText</name><environment>Roassal2</environment><super>Roassal2.RTSVGEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y angle content fontSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGText</class-id><body>A RTSVGLine is represents the SVG text of a regular or rotated text, as defined in Roassal.</body></comment><class><name>RTCircularTreeMapBuilder</name><environment>Roassal2</environment><super>Roassal2.RTAbstractTreeBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>baseradius </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-CircularMap</category><attributes><package>Roassal2-Builder-CircularMap</package></attributes></class><comment><class-id>Roassal2.RTCircularTreeMapBuilder</class-id><body>I am a variation of RTTreeMapBuilder in to explore in a better way any tree representation</body></comment><class><name>RTTabTable</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attributes values firstRow </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Table</category><attributes><package>Roassal2-Table</package></attributes></class><comment><class-id>Roassal2.RTTabTable</class-id><body>RTTabTable is made to work with CSV file contents.</body></comment><class><name>TRAbstractMouseClick</name><environment>Roassal2</environment><super>Roassal2.TRAbstractMouseEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>TRMouseDoubleClick</name><environment>Roassal2</environment><super>Roassal2.TRAbstractMouseClick</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>TRMouseDoubleLeftClick</name><environment>Roassal2</environment><super>Roassal2.TRMouseDoubleClick</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>TRSVGPath</name><environment>Roassal2</environment><super>Roassal2.TRShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>borderWidth fillColor pathString curves polygons rectangle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><comment><class-id>Roassal2.TRSVGPath</class-id><body>In Roassal-Trachel I am the common class to define and draw SVG shapes, and draw it in an instance of TRCanvas.Description--------------------I can use an string with a common SVG commands and convert it into an array of curves or commands that (Athens|Canvas ) can handle it. To do that I use the class  ASPathConverter.I use my curves to calculate my emcompassing rectangle, this rectangle chanages, when you use the method path to update the #path:Publick AI and Key Messages--------------------- #new	creates an empy TRSVGPath, but you need at least 2 curves.- path:aString 	allow set the curves of this SVG and recalculate the new encompassing rectangle. - #curves: anArrayOfCurves	allow set the curves directly, usefull when you want to modifly the curves directly and update it in an animation#includesPoint: aPoint 	SVG uses Private methods----------------#computeRectangle	internal method to recalculate the encomcompassing rectangle#computePolygons	we create polygons from curves#correctCurvesAndPolygonsToZero	in roassal each shape the position is in the center and TRSVGPath is not the exception, for that reason after calculate the curves from the pathString, TRSVG moves the coordinates of the  curves.#separateSubPaths	an SVG can be a set of sub paths, in this part we create the polygons as a collection of polygons</body></comment><class><name>RTSankeyBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>extent nodePadding nodes links iterations elements linkFrom linkTo linkValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTSankeyBuilder</class-id><body>I am a experimental class to have a sankey visualizationmore info in this linkhttp://en.wikipedia.org/wiki/Sankey_diagram</body></comment><class><name>RTStretchBehavior</name><environment>Roassal2</environment><super>Roassal2.RTNestingBehavior</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><class><name>OrderedDictionary</name><environment>Roassal2</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dictionary orderedKeys </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.OrderedDictionary</class-id><body>I am a collection that act as a Dictionary except that I use key insertion order when enumerating, printing, or returing collections of keys/values/associations, but not when testing for equality (but it does not matters in this case).I will assume that you know the Dictionary class in this comment.Description--------------------I work mainly as a Dictionary except that I also store the keys in an Array that keeps the order of elements. I should be used ONLY if you need to keep the keys ordered. Else you should use a Dictionary that is faster and keep less values into memory. (I duplicate the keys).Insertion, update, and inclusion testing have O(1) complexity while removing has O(n) worst-case.Public API and Key Messages--------------------- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue 		allow to add an element.  - #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock 		allow to access my values.- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: 		allow to iterate on me effectively.		- #keyAtIndex: anIndex / KeyAtIndex: anIndex ifAbsent: aBlock 		allow to acess my keys from an index.Examples------------------	"For basic examples see Dictionary comment."		ordDic := (Dictionary with: 1 -&gt; $a with: 2 -&gt; $b) asOrderedDictionary.	ordDic.   		"returns:  an OrderedDictionary(1-&gt;$a 2-&gt;$b)"	ordDic keyAtIndex: 2.		"returns:  2"	Internal Representation and Key Implementation Points.-------------------    Instance Variables	dictionary:			&lt;Dictionary&gt;		A dictionary where I store my keys and values.	orderedKeys:		&lt;Array&gt;			An ordered collection where I store my keys to maintain the order.I base my implementation on a Dictionary and when I need to execute an action where the order of the values is important I use the keys in my ordered collection.</body></comment><class><name>RTNumberLinearNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTNLinearNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizerOBSOLETE</category><attributes><package>Roassal2-ColorNormalizerOBSOLETE</package></attributes></class><comment><class-id>Roassal2.RTNumberLinearNormalizer</class-id><body>A RONumberLinearNormalizer is xxxxxxxxx.Instance Variables	scale:		&lt;Object&gt;scale	- xxxxx</body></comment><class><name>RTMapLocationBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>addedElements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map</category><attributes><package>Roassal2-Builder-Map</package></attributes></class><class><name>RTExploraBuilderLazy</name><environment>Roassal2</environment><super>Roassal2.RTExploraBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Explora</category><attributes><package>Roassal2-Builder-Explora</package></attributes></class><comment><class-id>Roassal2.RTExploraBuilderLazy</class-id><body>An Explora builder that do not try to guess what is coming to step before </body></comment><class><name>RTStandardDeviationDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractAverageDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTStandardDeviationDecorator</class-id><body>Display the standard deviation of the data-=-=-=-=b := RTGrapher new.ds := RTDataSet new. ds dotShape color: Color red. ds points: #(5 1 20 8).b add: ds.b addDecorator: (RTAverageDecorator new withLabel; labelConvertion: [ :aValue | 'average = ', aValue asFloat asString ]).b addDecorator: (RTStandardDeviationDecorator new lineColor: Color blue) .b-=-=-=-=</body></comment><class><name>RTHighlightable</name><environment>Roassal2</environment><super>Roassal2.RTAbstractHighlightable</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTHighlightable</class-id><body>A RTHighlightable changes color of elements which should be highlighted.</body></comment><class><name>RTDoubleScrollBar</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTDoubleScrollBar</class-id><body>add an horizontal and vertical scrollbar to the view, on the border of the view</body></comment><class><name>RTStackBarRow</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>values title </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-StackBarPlot</category><attributes><package>Roassal2-Builder-StackBarPlot</package></attributes></class><class><name>RTCircleGeometry</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>center radius </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTCircleGeometry</class-id><body>I represent a circle described by its 'center ' and a 'radius'.I am NOT a Roassal shape, for that use RTEllipse. Instead I am using in some circle-related gemetric computations.</body></comment><class><name>RTVerticalLineLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLineLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTVerticalLineLayout</class-id><body>A RTVerticalLineLayout locates all the elements vertically</body></comment><class><name>RTScaleTransformation</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><class><name>RTSqrtTransformation</name><environment>Roassal2</environment><super>Roassal2.RTScaleTransformation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><class><name>RTSelectableView</name><environment>Roassal2</environment><super>Roassal2.RTAbstractElasticBoxInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Selection</category><attributes><package>Roassal2-Selection</package></attributes></class><comment><class-id>Roassal2.RTSelectableView</class-id><body>I am an iteraction for a RTView to select elementsthe default RTSelectableView provides a box shape to select the shapes in a view.</body></comment><class><name>RTSVGPathLine</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>path </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTSVGPathLine</class-id><body>I am a line that can be styled with arrow ends and whose path is specified by SVG path.I am used as a line, if you need a regular shape, use RTSVGPath.</body></comment><class><name>RTCompositeShape</name><environment>Roassal2</environment><super>Roassal2.RTShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shapes shapeFraming layout automaticallyUpdateLayout </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTCompositeShape</class-id><body>A RTCompositeShape describes a composite shape. The bounds of the element depends therefore on the composition. Consider the following example:-=-=-=-=-=-=-=-=-=-=-=-=| v shape es methodElements |	v := RTView new.	v @ RTDraggableView.	shape := RTCompositeShape new.	shape add: RTLabel new.	shape add: (RTBox new color: (Color blue alpha: 0.3)).	shape vertical.		es := shape elementsOn: RTShape withAllSubclasses.	v addAll: es.	es do: [ :e | 		methodElements := RTBox new elementsOn: e model rtmethods.		RTGridLayout on: methodElements.		v addAll: methodElements.		RTNest new			on: e 			inShape: #second 			nest: methodElements.	].	RTFlowLayout on: es.	es @ RTDraggable.^ v-=-=-=-=-=-=-=-=-=-=-=-=Doing a layout does not produce overlap of names.Shapes composed in a RTCompositeShape may be relayouted after one of them has changed its size. Consider the following example:-=-=-=-=-=-=-=-=-=-=-=-=	s := RTCompositeShape new.	b1 := RTBox new color: Color green.	b2 := RTBox new color: Color blue; size: 20.	b3 := RTLabel new.	s add: b1.	s add: b2.	s add: b3.	s horizontal.	s setAutomaticRelayout.		e := s elementOn: 'click to expand'.	view := RTView new.	view add: e.		e @ RTDraggable.	e @ RTPopup.		e when: TRMouseClick do: [ :ev |		e trachelShape shapes second extent: 45 @ 45.		e trachelShape shapes third text: 'hello'.		view signalUpdate.	].		view open-=-=-=-=-=-=-=-=-=-=-=-= </body></comment><class><name>TRCallback</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Callbacks</category><attributes><package>Roassal2-Trachel-Callbacks</package></attributes></class><comment><class-id>Roassal2.TRCallback</class-id><body>I am abstract class for callbacks executed when Trachel shapes have changed in some way --- added to canvas, removed, changed size, etc.</body></comment><class><name>TRDiamondShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractLineDecoratorShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left right end </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><class><name>TRFilledDiamondShape</name><environment>Roassal2</environment><super>Roassal2.TRDiamondShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><class><name>RTColorPalette</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>palette </class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><comment><class-id>Roassal2.RTColorPalette</class-id><body>Each ColorPalette is a set of beautiful color schemes in a context for a specific purpose.Each palette contains several color schemes. Each scheme can be selected in different numbers of colors: 3 or 5 or 11 (depends on each scheme).We have three palettes:- Qualitative: helps to distinguish different classes of data. - Sequential: useful for showing graduable data with a very light "low color" increasing darkness to "high color".- Diverging: it contains color scales with diverging colors on the extremes and transition colors from one extreme to the other. More detailed information is on it class comments.---Copyright:All colors, palettes and schemes are from www.ColorBrewer.org by Cynthia A. Brewer, Geography, Pennsylvania State University.</body></comment><class><name>RTCPQualitative</name><environment>Roassal2</environment><super>Roassal2.RTColorPalette</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><comment><class-id>Roassal2.RTCPQualitative</class-id><body>Qualitative schemes do not imply magnitude differences between legend classes, and hues are used to create the primary visual differences between classes. Qualitative schemes are best suited to representing nominal or categorical data.Check it out by executing:ColorPalette qualitative showMore info: http://colorbrewer2.org/learnmore/schemes_full.html#qualitative---Copyright:All colors, palettes and schemes are from www.ColorBrewer.org by Cynthia A. Brewer, Geography, Pennsylvania State University.FalutUI1 color scheme come from: http://flatuicolors.com/</body></comment><class><name>RTCircleTree</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y r </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-CircularMap</category><attributes><package>Roassal2-Builder-CircularMap</package></attributes></class><comment><class-id>Roassal2.RTCircleTree</class-id><body>I am a class helper to do the layout in RTCircularTreeMapBuilder</body></comment><class><name>RTAxisAdaptedBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects minX maxX minY maxY margin xAxisConfiguration yAxisConfiguration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-AxisAdapted</category><attributes><package>Roassal2-Builder-AxisAdapted</package></attributes></class><comment><class-id>Roassal2.RTAxisAdaptedBuilder</class-id><body>A RTRelativeAxisBuilder add  X,Y axis to the view, given a collection of RTElements.Instance Variables	margin:		&lt;Object&gt;	maxX:		&lt;Object&gt;	maxY:		&lt;Object&gt;	minX:		&lt;Object&gt;	minY:		&lt;Object&gt;	objects:		&lt;Object&gt;	xAxisConfiguration:		&lt;Object&gt;	yAxisConfiguration:		&lt;Object&gt;margin	- xxxxxmaxX	- xxxxxmaxY	- xxxxxminX	- xxxxxminY	- xxxxxobjects	- xxxxxxAxisConfiguration	- xxxxxyAxisConfiguration	- xxxxx</body></comment><class><name>TRMouseClick</name><environment>Roassal2</environment><super>Roassal2.TRAbstractMouseClick</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseClick</class-id><body>A ROMouseClick is xxxxxxxxx.Instance Variables	commandKeyPressed:		&lt;Object&gt;	controlKeyPressed:		&lt;Object&gt;	shiftKeyPressed:		&lt;Object&gt;commandKeyPressed	- xxxxxcontrolKeyPressed	- xxxxxshiftKeyPressed	- xxxxx</body></comment><class><name>TRMouseRightClick</name><environment>Roassal2</environment><super>Roassal2.TRMouseClick</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>TRPolygonShape</name><environment>Roassal2</environment><super>Roassal2.TRShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vertices strokeWidth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><comment><class-id>Roassal2.TRPolygonShape</class-id><body>I am shape which builds closed path following ordered collection of vertices.</body></comment><class><name>RTNumberInterpolator</name><environment>Roassal2</environment><super>Roassal2.RTInterpolator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><class><name>RTAlignment</name><environment>Roassal2</environment><super>Roassal2.RTAbstractElementHandling</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTAlignment</class-id><body>Define alignment of elements. For example, inspect the following:-=-=-=	objects := TRShape withAllSubclasses.	v := RTView new.	n := RTMultiLinearColorForIdentity new objects: objects.	shape := RTBox new color: n; size: #numberOfMethods.	es := shape elementsOn: objects.	v addAll: es.	RTHorizontalLineLayout new gapSize: 0; on: es.	RTAlignment new elements: es; top.	v-=-=-=</body></comment><class><name>AthensPolygonTester</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>polygon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.AthensPolygonTester</class-id><body>This is simple tester of polygon</body></comment><class><name>RTNColorLinearNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTNLinearNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>minBrightness maxBrightness lowColor highColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizerOBSOLETE</category><attributes><package>Roassal2-ColorNormalizerOBSOLETE</package></attributes></class><comment><class-id>Roassal2.RTNColorLinearNormalizer</class-id><body>A RONColorLinearNormalizer is xxxxxxxxx.Instance Variables	highColor:		&lt;Object&gt;	lowColor:		&lt;Object&gt;	maxBrightness:		&lt;Object&gt;	minBrightness:		&lt;Object&gt;highColor	- xxxxxlowColor	- xxxxxmaxBrightness	- xxxxxminBrightness	- xxxxx</body></comment><class><name>TRExtentCallback</name><environment>Roassal2</environment><super>Roassal2.TRCallback</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Callbacks</category><attributes><package>Roassal2-Trachel-Callbacks</package></attributes></class><comment><class-id>Roassal2.TRExtentCallback</class-id><body>I am triggered when the extent (size) of aShape has been changed.==aShape addCallback: (TRExtentCallback block: [ :shape :ratio | "do sth" ])==</body></comment><class><name>RTDataEvolver</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>data stepGiver </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map</category><attributes><package>Roassal2-Builder-Map</package></attributes></class><class><name>RTAbstractCircle</name><environment>Roassal2</environment><super>Roassal2.RTLineDecorationShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>TRBezier3Shape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractLineShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listOfPoints </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><comment><class-id>Roassal2.TRBezier3Shape</class-id><body>Describe a cubic Bezier spline</body></comment><class><name>RTAbstractPopup</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>lastPopup </class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTAbstractPopup</class-id><body>A RTAbstractPopup is an sbtract class that describes popup.</body></comment><class><name>RTPopup</name><environment>Roassal2</environment><super>Roassal2.RTAbstractPopup</super><private>false</private><indexed-type>none</indexed-type><inst-vars>groupBlock text textColor alphaPopupBackground backgroundColor borderColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTPopup</class-id><body>A RTPopup is an interaction that dynamically add a text or a group of elements above the element pointed by the mouse.Example of use: -=-=-=	v := RTView new.	es := (RTEllipse new color: Color blue) elementsOn: Collection withAllSubclasses.	v addAll: es.	aPopup := RTPopup new 		text: [ :aClass | 				'Classname = ', aClass name, String cr,					'NbMethod=', aClass numberOfMethods asString, String cr,				'NbVariables=', aClass numberOfVariables asString ].	aPopup borderColor: Color black.	aPopup textColor: Color white.	aPopup backgroundColor: Color black.	es @ aPopup.	RTMetricNormalizer new		elements: es;		normalizeSize: #numberOfMethods min: 20 max: 50;		normalizeColor: #numberOfVariables.	RTGridLayout new on: es.	v-=-=-= Another example of use:-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.es := RTLabel elementsOn: (1 to: 10).v addAll: es.es @ (RTPopup new 	background: Color blue	group: [ :group :el |   		group addAll: (RTEllipse elementsOn: (1 to: el model)).		RTWeightedCircleLayout new			initialRadius: 50;			on: group.		]).RTHorizontalLineLayout on: es.v open-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTMorphDropInteraction</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>condition behavior </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><class><name>TRConstraint</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><comment><class-id>Roassal2.TRConstraint</class-id><body>A ROConstraint is a utility class that contains methods to position elements against others.</body></comment><class><name>RTStackBarPlot</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>values normalizer widthBlock heightBlock numberOfValuesPerRow colorPalette labelBlock labelConditionalBlock labelColor legend </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-StackBarPlot</category><attributes><package>Roassal2-Builder-StackBarPlot</package></attributes></class><class><name>RTGridLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGridLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTGridLayout</class-id><body>A ROGridLayout places elements as a grid.Instance Variables	gapSize:		&lt;SmallInteger&gt;	lineItemsCountBlock:		&lt;BlockContext&gt;gapSize	- number of pixels between each elements, horizontally and verticallylineItemsCountBlock	- tells the amount of item per line should be used</body></comment><class><name>RTLogTransformation</name><environment>Roassal2</environment><super>Roassal2.RTScaleTransformation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><class><name>RTBrushInteraction</name><environment>Roassal2</environment><super>Roassal2.RTAbstractElasticBoxInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dragging groups condition domainElements highlightColor unhighlightColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTBrushInteraction</class-id><body>I am a interaction that adds a new elastic box to the viewthis box allows you to select a group of elements and highlight them with a color. And define what kind of elements you want to unhighlight.</body></comment><class><name>RTDynamicStackedGrapher</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numberOfBars y allAddedElements centerElement layoutTranslator textBelow </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTDynamicStackedGrapher</class-id><body>RTDynamicStackedGrapher is a dynamic grapher on which bar may be added.Consider the following example:	| b |	b := RTDynamicStackedGrapher new.	b numberOfBars: 10.	b minY: -200; maxY: 200.	b y: #yourself.	 	b barShape color: (Color red alpha: 0.3).	b view addMenu: '+ 1' callback: [ b add: 400 atRandom - 200 ].	b open</body></comment><class><name>RTArc</name><environment>Roassal2</environment><super>Roassal2.RTShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>alphaAngle betaAngle innerRadius externalRadius </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTArc</class-id><body>A RTArc is an arc portion. e.g., 	RTArc new externalRadius: 100; innerRadius: 20; outerAngle: 45 innerAngle: 90Instance Variables	alphaAngle:		&lt;Object&gt;	betaAngle:		&lt;Object&gt;	externalRadius:		&lt;Object&gt;	innerRadius:		&lt;Object&gt;alphaAngle	- xxxxxbetaAngle	- xxxxxexternalRadius	- xxxxxinnerRadius	- xxxxx</body></comment><class><name>RTMenuGroup</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>items </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Menu</category><attributes><package>Roassal2-Builder-Menu</package></attributes></class><comment><class-id>Roassal2.RTMenuGroup</class-id><body>I am a component to manage the selected/unselected state for the menu items. instance guarantees that only one menu item can be selected at a time.Initially all butons managed by Button group instance are unselected</body></comment><class><name>RTMarkerOnX</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapherDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value markerColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTMarkerOnX</class-id><body>=-=-=-=-| b ds |b := RTGrapher new.ds := RTData new.ds connectColor: Color blue.ds points: #(3 4 5 6 7).ds x: #yourself.ds y: #yourself.b add: ds.b addDecorator: (RTMarkerOnX new value: 5).b addDecorator: (RTMarkerOnX new value: 6).b=-=-=-=-</body></comment><class><name>RTNameCloud</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maxHeight minHeight maxWords layout tableFrequency tableObjects dictionary </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-NameCloud</category><attributes><package>Roassal2-Builder-NameCloud</package></attributes></class><comment><class-id>Roassal2.RTNameCloud</class-id><body>Create a simple namecloud </body></comment><class><name>RTScaleLog</name><environment>Roassal2</environment><super>Roassal2.RTScaleLinear</super><private>false</private><indexed-type>none</indexed-type><inst-vars>linear base positive </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><class><name>RTAbstractNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>command </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><comment><class-id>Roassal2.RTAbstractNormalizer</class-id><body>A RONAbstractNormalizer is xxxxxxxxx.Instance Variables	command:		&lt;Object&gt;command	- xxxxx</body></comment><class><name>RTMultiLinearColor</name><environment>Roassal2</environment><super>Roassal2.RTAbstractNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>colors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><comment><class-id>Roassal2.RTMultiLinearColor</class-id><body>A RTGrayLinearColor is xxxxxxxxx.Instance Variables	max:		&lt;Object&gt;	min:		&lt;Object&gt;	scope:		&lt;Object&gt;max	- xxxxxmin	- xxxxxscope	- xxxxx</body></comment><class><name>RTSimon</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>models </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Simon</category><attributes><package>Roassal2-Builder-Simon</package></attributes></class><comment><class-id>Roassal2.RTSimon</class-id><body>Simon is an electronic game that intensively use arcs:http://en.wikipedia.org/wiki/Simon_(game)A RTSimon is xxxxxxxxx.</body></comment><class><name>TRMouseLeftClick</name><environment>Roassal2</environment><super>Roassal2.TRMouseClick</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>TRArcShape</name><environment>Roassal2</environment><super>Roassal2.TRShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>alphaAngle betaAngle innerRadius externalRadius origin height width topLeft bottomRight </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><comment><class-id>Roassal2.TRArcShape</class-id><body>A TRArc is an class that makes all the drawing of arcs</body></comment><class><name>RTPathAnimation</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>curves animatedValue index during </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><comment><class-id>Roassal2.RTPathAnimation</class-id><body>I am a class to move elements position in a SVG path</body></comment><class><name>TRCanvas</name><environment>Roassal2</environment><super>Roassal2.TRCallableObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas shapes fixedShapes extent animations morph camera announcer color session eventOverseer theme </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>GSegment</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>v1 v2 epsilon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.GSegment</class-id><body>I am a segment between two vertices</body></comment><class><name>RTLayoutTranslator</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars>defaultTranslator </class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>RTSmoothLayoutTranslator</name><environment>Roassal2</environment><super>Roassal2.RTLayoutTranslator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>move nbCycles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTSmoothLayoutTranslator</class-id><body>A ROSmoothLayoutTranslator is xxxxxxxxx.Instance Variables	move:		&lt;Object&gt;	nbCycles:		&lt;Object&gt;move	- xxxxxnbCycles	- xxxxx</body></comment><class><name>RTSmoothResizeLayoutTranslator</name><environment>Roassal2</environment><super>Roassal2.RTSmoothLayoutTranslator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>resize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions-MorphingView</category><attributes><package>Roassal2-Interactions-MorphingView</package></attributes></class><comment><class-id>Roassal2.RTSmoothResizeLayoutTranslator</class-id><body>I am a RTSmoothLayoutTranslator that also resizes the elements</body></comment><class><name>TRAddedCallback</name><environment>Roassal2</environment><super>Roassal2.TRCallback</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Callbacks</category><attributes><package>Roassal2-Trachel-Callbacks</package></attributes></class><comment><class-id>Roassal2.TRAddedCallback</class-id><body>I am triggered when aShape is added to the canvas.The opposite of me is TRRemoveCallback.==aShape addCallback: (TRAddedCallback block: [ :shape | "do sth" ])==</body></comment><class><name>RTMetricMap</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>countryData countryName pointShapeBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map</category><attributes><package>Roassal2-Builder-Map</package></attributes></class><comment><class-id>Roassal2.RTMetricMap</class-id><body>A RTMapBuilder2 is specialized to display metrics</body></comment><class><name>RTLabelled</name><environment>Roassal2</environment><super>Roassal2.RTLabeled</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTLabelled</class-id><body>THIS CLASS IS OBSOLETE. PLEASE REFER TO RTLabeled</body></comment><class><name>RTRotableView</name><environment>Roassal2</environment><super>Roassal2.RTAbstractInteractionView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view draggingView elements center startPoint </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTRotableView</class-id><body>I am an interaction that makes a view rotable using the left button and draggable using the right mouse button.Here is an example[[[ 	| b v |	v := RTView new.	v @ RTRotableView.	b := RTMondrian new.	b view: v.	b nodes: (1 to: 300).	b edges connectFrom: [ :value | value // 2 ].	b layout cluster.	b.			]]]</body></comment><class><name>RTWeightedCircleLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractWeightedCircleLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTWeightedCircleLayout</class-id><body>RTWeightedCircleLayout is a circle layout that gives more space to big elements and fewer space to small elements.Here is an example:-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.elements := (RTEllipse new size: 5; color: Color red; size: [:vv | vv * 4 ]) elementsOn: (1 to: 15).v addAll: elements.RTWeightedCircleLayout on: elements.v-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTNiceStep</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stepSize offset i j </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Labeling</category><attributes><package>Roassal2-Builder-Grapher-Labeling</package></attributes></class><comment><class-id>Roassal2.RTNiceStep</class-id><body>I am an utility class for RTNiceStepSizeGenerator&gt;&gt;next</body></comment><class><name>RTUninterpolateNumber</name><environment>Roassal2</environment><super>Roassal2.RTUninterpolate</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><class><name>TRTextPath</name><environment>Roassal2</environment><super>Roassal2.TRLabelShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>outlineColor outlineWidth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.TRTextPath</class-id><body>I am a simple label shape to draw text with the command textPath:</body></comment><class><name>RTGrapher</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datasets generator shouldUseNiceLabelsForX shouldUseNiceLabelsForY legendBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTGrapher</class-id><body>RTGrapher describes a chart. Data set may be added and axis may be configured. Consider the following example:b := RTGrapher new.ds := RTDataSet new. ds dotShape color: Color red. ds points: #(5 1 20 8).b add: ds.b build.</body></comment><class><name>RTSVGPath</name><environment>Roassal2</environment><super>Roassal2.RTShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>path borderWidth borderColor curves keepInOriginalPosition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTSVGPath</class-id><body>A RTSVGPath models an SVG Path.E.g., RTSVGPath new path: 'M150 0 L75 200 L225 200 Z'Instance Variables	borderColor:		&lt;Object&gt;	borderWidth:		&lt;Object&gt;	curves:		&lt;Object&gt;	keepInOriginalPosition:		&lt;Object&gt;	path:		&lt;Object&gt;	rotation:		&lt;Object&gt;	scale:		&lt;Object&gt;borderColor	- xxxxxborderWidth	- xxxxxcurves	- xxxxxkeepInOriginalPosition	- xxxxxpath	- xxxxxrotation	- xxxxxscale	- xxxxx</body></comment><class><name>RTAxisConfiguration</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numberOfTicks numberOfLabels labelConvertion positionLabel minValue maxValue thousandsSeparator title builder color titlePosition labelRotation lineThickness fromPoint toPoint maxValueManuallySet minValueManuallySet ticksCentered labelFontHeight scaleTransformation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTAxisConfiguration</class-id><body>A RTAxisConfiguration describes an axis configuration</body></comment><class><name>RTNameCloudDictionary</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-NameCloud</category><attributes><package>Roassal2-Builder-NameCloud</package></attributes></class><class><name>RTMeanDevVarDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapherDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTMeanDevVarDecorator</class-id><body>=-=-=-=-| b ds |b := RTGrapher new.ds := RTData new.ds interaction popup.ds points: #(600 470 170 430 300).ds barShape width: 20; color: Color lightGreen.b add: ds.b axisX noLabel; noTick.b axisY noDecimal.b addDecorator: RTMeanDevVarDecorator new.b =-=-=-=-</body></comment><class><name>RTSVGDiamondMarker</name><environment>Roassal2</environment><super>Roassal2.RTSVGAbstractMarker</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGDiamondMarker</class-id><body>A RTSVGDiamondMarker is a diamond shape marker.</body></comment><class><name>RTBucketColor</name><environment>Roassal2</environment><super>Roassal2.RTAbstractNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>colorScheme numberOfBuckets scope buckets </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><comment><class-id>Roassal2.RTBucketColor</class-id><body>A scale of elements is discretized into buckets where elements of each bucket is associated to an element. The buckets are formed by creating partitions uniformly.</body></comment><class><name>RTScatterplotMap</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ScatterplotMap</category><attributes><package>Roassal2-Builder-ScatterplotMap</package></attributes></class><class><name>TRMouseDoubleRightClick</name><environment>Roassal2</environment><super>Roassal2.TRMouseDoubleClick</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>TRCompositeShape</name><environment>Roassal2</environment><super>Roassal2.TRShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shapeAndOffsets </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>GEllipse</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>a b center </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.GEllipse</class-id><body>I am an Ellipse geometry.I am described by center and two radii.- `center `is the center point of the ellipse- `a` is the major radius along the x axis- `b` is the minor radius along the y axis</body></comment><class><name>RTCanvasExporter</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas fileName imageExporter format bounds oversize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-PNG</category><attributes><package>Roassal2-Exporter-PNG</package></attributes></class><comment><class-id>Roassal2.RTCanvasExporter</class-id><body>A DCTRCanvasExporter is exporter of canvas into image		supported formats: png, jpg, jpeg, bmp, gif		usage example:	(DCTRCanvasExporter canvas: roassalView canvas)		withoutFixedShapes;		whole;		defaultScale;		oversizedBy: 20 @ 20;		format: #png;		fileName: ((UIManager default request: 'Please enter file name' initialAnswer: 'export.png') ifNil: [ ^ nil ]);		export</body></comment><class><name>RTAbstractCompactTree</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGraphLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sonsDictionary root initialLayout margin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTAbstractCompactTree</class-id><body>A ROAbstractCompactTree is xxxxxxxxx.Instance Variables	initialLayout:		&lt;Object&gt;	margin:		&lt;Object&gt;	root:		&lt;Object&gt;	sonsDictionary:		&lt;Object&gt;initialLayout	- xxxxxmargin	- xxxxxroot	- xxxxxsonsDictionary	- xxxxx</body></comment><class><name>TRTranslationCallback</name><environment>Roassal2</environment><super>Roassal2.TRCallback</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Callbacks</category><attributes><package>Roassal2-Trachel-Callbacks</package></attributes></class><comment><class-id>Roassal2.TRTranslationCallback</class-id><body>TRTranslationCallback is triggered when the shape gets translated. Consider the following example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=c := TRCanvas new.b := TRBoxShape new size: 40.c addShape: b.callback := TRTranslationCallback new.callback block: [ :aShape :step | step inspect ].b addCallback: callback.b translateBy: 5 @ 10.c.-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=It opens an inspector because the block is triggered.</body></comment><class><name>RTConditionalLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>condition thenLayout elseLayout overallLayout </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>RTRouteBuilder</name><environment>Roassal2</environment><super>Roassal2.RTShapeBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>routes mapBuilder popup </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map</category><attributes><package>Roassal2-Builder-Map</package></attributes></class><class><name>RTFixedPopup</name><environment>Roassal2</environment><super>Roassal2.RTPopup</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTFixedPopup</class-id><body>A RTFixedPopup creates a popup, located at a fixed position, in the window.</body></comment><class><name>TRUtil</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>RTEquidistantCircleLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractWeightedCircleLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTEquidistantCircleLayout</class-id><body>RTEquidistantCircleLayout is a circle layout in which elements are equidistant from each other: the layout maintains the same distance between elements.Here is an example:-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.elements := (RTEllipse new size: 5; color: Color red; size: [:vv | vv * 4 ]) elementsOn: (1 to: 15).v addAll: elements.RTEquidistantCircleLayout on: elements.v-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTRectangleAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTContinuousAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTRectangleAttachPoint</class-id><body>Continuous attach point which presumes both shapes are not rotated rectangles-=-=-=v := RTView new.e1 := (RTBox new size: 50) elementOn: 1.e2 := (RTEllipse new size: 50) elementOn: 2.v add: e1; add: e2.e2 translateBy: 30 @ 60.e1 @ RTDraggable.e2 @ RTDraggable.s := RTArrowedLine new color: Color black.s attachPoint: RTRectangleAttachPoint new.l := s edgeFrom: e1 to: e2.v add: l.v-=-=-=</body></comment><class><name>RTGrapherLabel</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>min max step score </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Labeling</category><attributes><package>Roassal2-Builder-Grapher-Labeling</package></attributes></class><comment><class-id>Roassal2.RTGrapherLabel</class-id><body>I am an utility class for RTLabelGenerator</body></comment><class><name>RTCell</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements columns element number rowHeights columnWidths </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>RTScaleBilinear</name><environment>Roassal2</environment><super>Roassal2.RTScale</super><private>false</private><indexed-type>none</indexed-type><inst-vars>u i </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><class><name>RTDoubleGrapher</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rightDataSets datasets axisConfigurationYRight </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><class><name>RTSVGElementPopup</name><environment>Roassal2</environment><super>Roassal2.RTSVGPopup</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGElementPopup</class-id><body>A RTSVGElementPopup is a single element popup. The element may be any translatable Roassal Shape.</body></comment><class><name>RTCPDiverging</name><environment>Roassal2</environment><super>Roassal2.RTColorPalette</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><comment><class-id>Roassal2.RTCPDiverging</class-id><body>Diverging schemes put equal emphasis on mid-range critical values and extremes at both ends of the data range. The critical class or break in the middle of the legend is emphasized with light colors and low and high extremes are emphasized with dark colors that have contrasting hues.Check it out by executing:ColorPalette diverging showMore info:http://colorbrewer2.org/learnmore/schemes_full.html#diverging ---Copyright:All colors, palettes and schemes are from www.ColorBrewer.org by Cynthia A. Brewer, Geography, Pennsylvania State University.</body></comment><class><name>RTAnimatedScatterPlot</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tables x y color size frame maxX maxY sizeMax labelShape colors properties columns </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-AnimatedScatterPlot</category><attributes><package>Roassal2-Builder-AnimatedScatterPlot</package></attributes></class><class><name>RTColorTransitionAnimation</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>animatedValue colorNormalizer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><class><name>TRVIAnimatedPoint</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Viva</category><attributes><package>Roassal2-Trachel-Viva</package></attributes></class><class><name>GRectangle</name><environment>Roassal2</environment><super>Graphics.Rectangle</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.GRectangle</class-id><body>I am a rectangle. See my parent for API</body></comment><class><name>RTVisitor</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>names </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTVisitor</class-id><body>A RTVisitor is a simple visitor.</body></comment><class><name>RTSVGVisitor</name><environment>Roassal2</environment><super>Roassal2.RTVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view stream afterStream canvas interactions markers center count </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGVisitor</class-id><body>A RTSVGVisitor is a RTVisitor for SVG exporting.</body></comment><class><name>RTPNGExporter</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view fileName saveWithScale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-PNG</category><attributes><package>Roassal2-Exporter-PNG</package></attributes></class><comment><class-id>Roassal2.RTPNGExporter</class-id><body>A RTPNGExporter export the view or builder provided as argument as a PNG file</body></comment><class><name>RTOptimizedForceBasedLayout</name><environment>Roassal2</environment><super>Roassal2.RTForceBasedLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mockElements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>TRCameraScaleCallback</name><environment>Roassal2</environment><super>Roassal2.TRCallback</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Callbacks</category><attributes><package>Roassal2-Trachel-Callbacks</package></attributes></class><comment><class-id>Roassal2.TRCameraScaleCallback</class-id><body>I am triggered when the Camera scale (zoom) has changed.I should be atteched to TRCamera (`aView canvas camera addCallback:`)</body></comment><class><name>RTNoLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTNoLayout</class-id><body>Here is an example:v := RTView new.es := (RTEllipse new color: Color blue trans; size: 20) elementsOn: (1 to: 30).v addAll: es.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: [ :vv | vv // 2 ].v addMenu: 'Remember!' callback: [ 	positions := es collect: #position.	 ].v addMenu: 'Recall!' callback: [ 	positions with: es do: [ :p :e | e translateTo: p ].	v signalUpdate.	 ].v addMenu: 'Start layout!' callback: [ 	force := RTForceBasedLayout new.	force initialLayout: RTNoLayout new.	animation := RTSpringLayoutStepping new.	animation layoutWithoutPreparing: force.	animation inView: v.].v addMenu: 'Stop layout!' callback: [ 	animation stopAndRemove].v </body></comment><class><name>RTAbstractArrowedLine</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>line </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><class><name>RTDoubleArrowedLine</name><environment>Roassal2</environment><super>Roassal2.RTAbstractArrowedLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>headStart headEnd </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTDoubleArrowedLine</class-id><body>A RTDoubleArrowedLine is a double arrowed line between its extremities.-=-=-=| v l e1 e2 eShape |v := RTView new.eShape := RTEllipse new size: 8; color: (Color blue alpha: 0.3).e1 := eShape element.e2 := eShape element.e2 translateBy: 50 @ 30.v add: e1; add: e2.e1 @ RTDraggable.e2 @ RTDraggable.l := (RTDoubleArrowedLine new color: Color red) edgeFrom: e1 to: e2.v add: l.v-=-=-=</body></comment><class><name>RTDraggable</name><environment>Roassal2</environment><super>Roassal2.RTAbstractDraggable</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTDraggable</class-id><body>A RTDraggable is an interaction that make an element draggable using the mouse.</body></comment><class><name>RTShorterVerticalDistanceAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTAbstractShorterDistanceAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTShorterVerticalDistanceAttachPoint</class-id><body>-=-=-=v := RTView new.e1 := (RTBox new size: 50) elementOn: 1.e2 := (RTEllipse new size: 50) elementOn: 2.v add: e1; add: e2.e2 translateBy: 30 @ 60.e1 @ RTDraggable.e2 @ RTDraggable.s := RTArrowedLine new color: Color black.s attachPoint:  RTShorterVerticalDistanceAttachPoint new.l := s edgeFrom: e1 to: e2.v add: l.v-=-=-=-</body></comment><class><name>RTEmptyArrowHead</name><environment>Roassal2</environment><super>Roassal2.RTLineDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><comment><class-id>Roassal2.RTEmptyArrowHead</class-id><body>A RTEmptyArrowHead is a line decorartion.-=-=-=-=-=-=-=-=-=-=-=-=| v e1 e2 l |v := RTView new.e1 := (RTEllipse new size: 20) element.e2 := (RTEllipse new size: 20) element.e1 @ RTDraggable.e2 @ RTDraggable.e2 translateBy: 50 @ 50.l := (RTLine new + RTEmptyArrowHead new) edgeFrom: e1 to: e2. v add: e1; add: e2; add: l.v open-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTCellMatrix</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nrows ncols contents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTCellMatrix</class-id><body>A ROCellMatrix is xxxxxxxxx.Instance Variables	contents:		&lt;Object&gt;	ncols:		&lt;Object&gt;	nrows:		&lt;Object&gt;contents	- xxxxxncols	- xxxxxnrows	- xxxxx</body></comment><class><name>RTLabelGenerator</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nice loose n w epsilon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Labeling</category><attributes><package>Roassal2-Builder-Grapher-Labeling</package></attributes></class><comment><class-id>Roassal2.RTLabelGenerator</class-id><body>Reference: 	[1] An Extension of Wilkinson's Algorithm for positioning Tick Labels on Axes  (Justin Talbot, Sharon Lin, Pat Hanrahan)</body></comment><class><name>RTHorizontalMultipleData</name><environment>Roassal2</environment><super>Roassal2.RTAbstractMultipleData</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTHorizontalMultipleData</class-id><body>RTHorizontalMultipleData handles multiple metrics per data points. It is rendered using bar chart.[[[ | b d |			b := RTGrapher new.d := RTHorizontalMultipleData new.d barShape color: Color blue.d points: #( #('hello' 1 2 1) #('world' 2 4 2) #('bonjour' 3 5 4) #('Gutten Morgen' -1 4 -5)).d addMetric: #second.d addMetric: #third.d addMetric: #fourth."d barChartWithBarCenteredTitle: #first."d barChartWithBarTitle: #first rotation: -30.b add: d.b ]]]</body></comment><class><name>RTBarLabelFactory</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color label rotation fontSize labelShape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTBarLabelFactory</class-id><body>Useful to provide an object with a configuration when creating label for bars.For example:b := RTGrapher new.d := RTData new.d points: (Collection withAllSubclasses copyFrom: 1 to: 20).d y: #numberOfMethods.d barChartUsing: (RTBarLabelFactory new label: #name; fontSize: 7).b add: d.b axisX noLabel; noTick.b</body></comment><class><name>RTAbstractNarrowArrow</name><environment>Roassal2</environment><super>Roassal2.RTLineDecorationShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>RTEmptyNarrowArrow</name><environment>Roassal2</environment><super>Roassal2.RTAbstractNarrowArrow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>RTScrollShapesBuilder</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>margeRectangle bar surroundingRectangle collection scrollBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ScrollBar</category><attributes><package>Roassal2-Builder-ScrollBar</package></attributes></class><comment><class-id>Roassal2.RTScrollShapesBuilder</class-id><body>Define the shapes added to the view by the pad and bar builders</body></comment><class><name>RTGrayLinearColor</name><environment>Roassal2</environment><super>Roassal2.RTAbstractNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>max scope min </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><class><name>RTMicroprint</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nbOfHorizontal rules </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Microprint</category><attributes><package>Roassal2-Builder-Microprint</package></attributes></class><class><name>TRMorphWantsDrop</name><environment>Roassal2</environment><super>Roassal2.TRMorphDropEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>whenHandledBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>RTLayoutAnimation</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>layout elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><class><name>TRVIBasicTimer</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Viva</category><attributes><package>Roassal2-Trachel-Viva</package></attributes></class><comment><class-id>Roassal2.TRVIBasicTimer</class-id><body>I represent an abstract behavior of timer.We defining a cycle length (cycleLength) for timer, expressed in seconds.The value of timer (#value) then can be observed over timeas a number which goes from 0 to 1 and then stops.The moment when value reaches 1 is at time equal to timer's cycle length passed from the moment we started it. Timers can be one-shot or repeating.One-shot timer stops after elapsing its cycle length, reaching value = 1.The repeating timer keeps running repeating the cycle over and over again, and its value goes from 0 to 1 , then drops to 0 and goes again to 1 and again...Additionally to #value, there is #elapsedCycles , which can be used to tell, how many cycles are passed since timer's first start.Timer can be stopped (paused), resumed or fully reset. The timer value &amp; elapsed cycles is changing only when timer active.</body></comment><class><name>GRay</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>origin direction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.GRay</class-id><body>I am a vector builded on line ax+by+c=0 and have my start in point v1.</body></comment><class><name>RTSVGStringConverter</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>convertions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGStringConverter</class-id><body>A RTSVGStringConverter is a class used to fix Strings before using them inside SVG elements. Since many characters need to be translated to its HTML standart encoding</body></comment><class><name>RTSugiyamaLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGraphLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sortBlock labels layers layerNrs connections </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>RTNoDictionary</name><environment>Roassal2</environment><super>Roassal2.RTNameCloudDictionary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-NameCloud</category><attributes><package>Roassal2-Builder-NameCloud</package></attributes></class><class><name>RTRectanglePackLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>freeSpace gap padding bounds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTRectanglePackLayout</class-id><body>A layout that packs rectangles in as amall space as possible (at least it tries to)Instance Variables	padding:	&lt;Number&gt;	freeSpace:	&lt;Set of Rectamgles&gt;	bounds:	&lt;Point&gt;gap	- gap between elements defined as "percentage" of average size. 0.2 means 20%freeSpace	- collection of spaces that can be used for next element insertion	bounds	- bounding box of all currently processed elements</body></comment><class><name>RTMultiLine</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>blockProducingPath </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTMultiLine</class-id><body>A RTMultiLine represents Instance Variables	blockProducingPath:		&lt;Block&gt;   a two arg block that produces the path. The block has to return the collection of pointsblockProducingPath	- xxxxx</body></comment><class><name>RTStyledMultiLine</name><environment>Roassal2</environment><super>Roassal2.RTMultiLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>head tail dashes capStyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTStyledMultiLine</class-id><body>A RTMultiLineHeaded is a multi-purpose modification of RTMultiLine with head and/or tail (like arrow) and possibility of being styled (dashed, dotted...).-=-=-=v := RTView new.es := (RTEllipse new size: 20; color: (Color blue alpha: 0.3)) elementsOn: (1 to: 10).RTCircleLayout new on: es allButFirst.v addAll: es.es @ RTDraggable.TRConstraint move: es first onTheCenterOf: es allButFirst.shape := RTStyledMultiLine new.shape filledArrowHead; arrowTail; dashdotLine; orthoVertical.shape attachPoint: (RTRectangleAttachPoint new).lines := shape edgesFrom: es first toAll: es allButFirst.v addAll: lines.v-=-=-=</body></comment><class><name>RTGhostDraggable</name><environment>Roassal2</environment><super>Roassal2.RTAbstractDraggable</super><private>false</private><indexed-type>none</indexed-type><inst-vars>ghost ghostBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTGhostDraggable</class-id><body>I am a lightweight alternative to RTDraggable.During dragging, instead of moving the original element I create a "ghost double" that is dragged instead, and only when the dragging is complete the original shape is moved.I am useful if the original elements has many children or related elements that would have to be updated during each dragging step. With me only single update at the end occurs.!! ExampleRTInteractionExample new exampleGhostDraggable open</body></comment><class><name>TRCameraInitializer</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>RTShorterDistanceWithOffsetAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTAbstractShorterDistanceAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>offset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTShorterDistanceWithOffsetAttachPoint</class-id><body>A RTShorterDistanceWithOffsetAttachPoint contains the logic to have edges with a slight offset (normal to the edge direction).-=-=-=-=v := RTView new.e1 := (RTBox new size: 50) elementOn: 1.e2 := (RTEllipse new size: 50) elementOn: 2.v add: e1; add: e2.e2 translateBy: 30 @ 60.e1 @ RTDraggable.e2 @ RTDraggable.s := RTArrowedLine new color: Color black.s attachPoint: (RTShorterDistanceWithOffsetAttachPoint new offset: 20).l := s edgeFrom: e1 to: e2.v add: l.l := s edgeFrom: e1 to: e2.v add: l.l := s edgeFrom: e1 to: e2.v add: l.v-=-=-=-=</body></comment><class><name>RTSimpleArrowHead</name><environment>Roassal2</environment><super>Roassal2.RTLineDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><comment><class-id>Roassal2.RTSimpleArrowHead</class-id><body>A RTSimpleArrowHead is a line decorartion.-=-=-=-=-=-=-=-=-=-=-=-=| v e1 e2 l |v := RTView new.e1 := (RTEllipse new size: 20) element.e2 := (RTEllipse new size: 20) element.e1 @ RTDraggable.e2 @ RTDraggable.e2 translateBy: 50 @ 50.l := ((RTLine new color: Color red) + (RTSimpleArrowHead new color: Color red)) edgeFrom: e1 to: e2. v add: e1; add: e2; add: l.v open-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTQuadTree</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>charge x y leaf nodes origin corner node cx cy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTQuadTree</class-id><body>A ROQuadTree is xxxxxxxxx.Instance Variables	charge:		&lt;Object&gt;	corner:		&lt;Object&gt;	cx:		&lt;Object&gt;	cy:		&lt;Object&gt;	leaf:		&lt;Object&gt;	node:		&lt;Object&gt;	nodes:		&lt;Object&gt;	origin:		&lt;Object&gt;	x:		&lt;Object&gt;	y:		&lt;Object&gt;charge	- xxxxxcorner	- xxxxxcx	- xxxxxcy	- xxxxxleaf	- xxxxxnode	- xxxxxnodes	- xxxxxorigin	- xxxxxx	- xxxxxy	- xxxxx</body></comment><class><name>TRKeyboardEvent</name><environment>Roassal2</environment><super>Roassal2.TRUserInputEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>keyValue keyCombination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRKeyboardEvent</class-id><body>A base class for keyboard events.</body></comment><class><name>TRKeyUp</name><environment>Roassal2</environment><super>Roassal2.TRKeyboardEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRKeyUp</class-id><body>Event representing a key release.[[[c := TRCanvas new.c when: TRKeyDown do: [ :event |	self log: '[DOWN]'; logCr: event keyCombination.].c when: TRKeyUp do: [ :event |	self log: '[UP]'; logCr: event keyCombination.].c open]]]</body></comment><class><name>RTLine</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTLine</class-id><body>RTLine describes a line between two elements.-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.s := RTEllipse new color: (Color red alpha: 0.4); size: 30.e1 := s elementOn: 'Begin'.e2 := s elementOn: 'End'.edge := RTLine edgeFrom: e1 to: e2.v add: e1; add: e2; add: edge.e1 @ RTDraggable.e2 @ RTDraggable.e2 translateBy: 80 @ 50.v -=-=-=-=-=-=-=-=-=-=-=-=Using an attach point:-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.s := RTEllipse new color: (Color red alpha: 0.4); size: 30.e1 := s elementOn: 'Begin'.e2 := s elementOn: 'End'.lineShape := RTLine new.lineShape attachPoint: (RTShorterDistanceAttachPoint instance).edge := lineShape edgeFrom: e1 to: e2.v add: e1; add: e2; add: edge.e1 @ RTDraggable.e2 @ RTDraggable.e2 translateBy: 80 @ 50.v -=-=-=-=-=-=-=-=-=-=-=-=Slightly more sophisticated example:-=-=--=-=-=--=-=-=--=	| view elements |	view := RTView new.		elements := RTBox elementsOn: (1 to: 100).	elements @ RTDraggable.	view addAll: elements.	RTEdge 		buildEdgesFromObjects: (1 to: 100)		from: [ :v | v // 2 ] to: #yourself 		using: (RTLine new color: Color purple) inView: view.	RTTreeLayout on: view elements edges: view edges.		view edges do: [ :e | e trachelShape pushBack ].		view @ RTDraggableView.	^ view-=-=--=-=-=--=-=-=--=</body></comment><class><name>RTAxisRenderer</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>config builder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTAxisRenderer</class-id><body>A RTAxisRenderer is a renderer for axis. It simply render in a view an axis configuration</body></comment><class><name>RTEmptyCircle</name><environment>Roassal2</environment><super>Roassal2.RTAbstractCircle</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>RTSpectrograph</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects lineBlock pointSize highlightBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Spectrograph</category><attributes><package>Roassal2-Builder-Spectrograph</package></attributes></class><comment><class-id>Roassal2.RTSpectrograph</class-id><body>A RTSpectrograph is a builder to create spectographs</body></comment><class><name>RTDecoratedLine</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>line head tail </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><comment><class-id>Roassal2.RTDecoratedLine</class-id><body>A DCRTDecoratedLine is an arrowed line on both ends between its extremities</body></comment><class><name>TRTheme</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Theme</category><attributes><package>Roassal2-Trachel-Theme</package></attributes></class><class><name>TRPlainColorTheme</name><environment>Roassal2</environment><super>Roassal2.TRTheme</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Theme</category><attributes><package>Roassal2-Trachel-Theme</package></attributes></class><class><name>RTSelectionBox</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>aView edges lastClick </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTSelectionBox</class-id><body>I am a simple selection Box interaction to  create elastic boxs that allow to explore the edges from a view</body></comment><class><name>TRVIAnimatedValue</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>evaluator timer finishCallback </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Viva</category><attributes><package>Roassal2-Trachel-Viva</package></attributes></class><comment><class-id>Roassal2.TRVIAnimatedValue</class-id><body>A VIAnimatedValue is A representation of some property value animated in certain kind of time.The main idea is you can change some property in some time.in evaluator, recibe a block to handle as f(t).</body></comment><class><name>GCircle</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>center radius </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.GCircle</class-id><body>I am a circle. I have a center in (cx, cy) and radius. My equation is: (x-cx)^2  + (y-cy)^2 = radius^2 or a * (x^2) + a * (y^2) + d * x + e * y + f = 0 </body></comment><class><name>RTCubeHelix</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hueShift rotations saturation gamma </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><class><name>RTSourceCodeDictionary</name><environment>Roassal2</environment><super>Roassal2.RTNameCloudDictionary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-NameCloud</category><attributes><package>Roassal2-Builder-NameCloud</package></attributes></class><class><name>RTArrowedLine</name><environment>Roassal2</environment><super>Roassal2.RTAbstractArrowedLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>head </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTArrowedLine</class-id><body>A RTArrowedLine is an arrowed line between its extremitiesInstance Variables	head:		&lt;Object&gt;	line:		&lt;Object&gt;head	- xxxxxline	- xxxxx</body></comment><class><name>RTSelectable</name><environment>Roassal2</environment><super>Roassal2.RTClickStateInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectionCallback </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTSelectable</class-id><body>A RTSelectable is an interaction that allows for element contained in a view to be selected and having a callback whenever the selection is changed</body></comment><class><name>RTResizableRectangle</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>cornerDirections oppositeCorners </class-inst-vars><imports></imports><category>Roassal2-Interactions-Resize</category><attributes><package>Roassal2-Interactions-Resize</package></attributes></class><comment><class-id>Roassal2.RTResizableRectangle</class-id><body>I provide some primitives for manipulating with rectangles and its sides.!! CollaboratorsDCRTResizable</body></comment><class><name>RTHorizontalDominanceTreeLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractHorizontalTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>RTShorterHorizontalDistanceAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTAbstractShorterDistanceAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTShorterHorizontalDistanceAttachPoint</class-id><body>-=-=-=v := RTView new.e1 := (RTBox new size: 50) elementOn: 1.e2 := (RTEllipse new size: 50) elementOn: 2.v add: e1; add: e2.e2 translateBy: 30 @ 60.e1 @ RTDraggable.e2 @ RTDraggable.s := RTArrowedLine new color: Color black.s attachPoint:  RTShorterHorizontalDistanceAttachPoint new.l := s edgeFrom: e1 to: e2.v add: l.v-=-=-=-</body></comment><class><name>RTIdentityMatrix</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rows </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>TRMouseWheelEvent</name><environment>Roassal2</environment><super>Roassal2.TRAbstractMouseEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>direction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseWheelEvent</class-id><body>I'm a mouse wheel scrolling event.</body></comment><class><name>RTFilledNarrowArrow</name><environment>Roassal2</environment><super>Roassal2.RTAbstractNarrowArrow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>RTSVGOval</name><environment>Roassal2</environment><super>Roassal2.RTSVGEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>box rx ry </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGOval</class-id><body>A RTSVGOval is the SVG Ellipse that translates from Roassal's Ellipse.</body></comment><class><name>RTMultipleData</name><environment>Roassal2</environment><super>Roassal2.RTHorizontalMultipleData</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Obsolete</category><attributes><package>Roassal2-Builder-Grapher-Obsolete</package></attributes></class><comment><class-id>Roassal2.RTMultipleData</class-id><body>This is an obsolete class</body></comment><class><name>TRSolarizedTheme</name><environment>Roassal2</environment><super>Roassal2.TRTheme</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Theme</category><attributes><package>Roassal2-Trachel-Theme</package></attributes></class><class><name>RTRadar</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetView extent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTRadar</class-id><body>An instance of RTRadar is an element to explore an see  in a small portion of the view the same visualization, with small elements.Check examples(in RTExperimentalExample) to learn how to use a RTRadar</body></comment><class><name>RTEvolutionLine</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>xvalue timeline yvalue afterBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-DSM</category><attributes><package>Roassal2-Builder-DSM</package></attributes></class><comment><class-id>Roassal2.RTEvolutionLine</class-id><body>I am a simple object that has values in a timeline</body></comment><class><name>Matrix</name><environment>Roassal2</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contents numberOfColumns numberOfRows </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.Matrix</class-id><body>I represent a mathematical matrix or a two-dimensional array. I provide methods for creating matrices, operating on them arithmetically and algebraically. Structure: - numberOfRows : a non-negative integer saying how many rows there are. - numberOfColumns : a non-negative integer saying how many columns there are. - contents : an Array holding the elements in row-major order.  That is, for a 2x3 array the contents are (11 12 13 21 22 23).  Element-wise matrix arithmetic works; you can freely mix matrices and numbers butdon't try to mix matrices and arrays (yet).Matrix multiplication, using the symbol +* (derived from APL's +.x), works between(Matrix or Array) +* (Matrix or Array).  Don't try to use a number as an argument of +*.Matrix * Number and Number * Matrix work fine, so you don't need +* with numbers.</body></comment><class><name>RTMultiLinearColorCached</name><environment>Roassal2</environment><super>Roassal2.RTMultiLinearColor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cache sizeBeforeReset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><class><name>RTPalette</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><comment><class-id>Roassal2.RTPalette</class-id><body>Define a set of colors.Examples showing all the palletes:-=-=-=| v allLines lbl es lb| v := RTView new.allLines := OrderedCollection new.(RTPalette class selectors sorted) do: [ :selector |	lbl := RTLabel elementOn: selector.		v add: lbl.		es := (RTBox new size: 20) elementsOn: (1 to: 5).	v addAll: es.	es @ (RTMouseHoverZoom new desiredExtent: [ :anElement | anElement extent * 1.7 ]).	TRConstraint stick: lbl onTheLeftOf: es first.		RTHorizontalLineLayout new gapSize: 3; on: es.	RTMetricNormalizer new		elements: es;		normalizeColor: #yourself using: (RTPalette perform: selector).	allLines add: es.].RTVerticalLineLayout on: allLines.lb := RTLegendBuilder new.lb view: v.lb onDemand.lb addText: 'Many color palettes are offered by Roassal'.lb addText: 'To obtain the a palette, simply evaluate: RTPalette c5'.lb build.v-=-=-=Using a palette:-=-=-=p := RTPalette c10.b := RTMondrian new.b shape box	color: p fifth;	if: [ :c | '*Line*' match: c name ] color: p first;	if: [ :c | '*Arrow*' match: c name ] color: p second;	if: [ :c | '*Arc*' match: c name ] color: p third;	if: [ :c | '*Abstract*' match: c name ] color: p fourth.b nodes: (RTShape withAllSubclasses).b layout flow.b normalizer normalizeSize: #numberOfMethods.b-=-=-=</body></comment><class><name>RTEnglishDictionary</name><environment>Roassal2</environment><super>Roassal2.RTNameCloudDictionary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-NameCloud</category><attributes><package>Roassal2-Builder-NameCloud</package></attributes></class><class><name>RTIdentityLineDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLineDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>RTDirectedLine</name><environment>Roassal2</environment><super>Roassal2.RTLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>offset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><class><name>RTAbstractDraggableView</name><environment>Roassal2</environment><super>Roassal2.RTAbstractInteractionView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><class><name>RTEdgeBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>allowRepetition fromElements toElements shouldMoveBehind shouldNotBeUsedInLayout createdEdges viewHasBeenManuallySet actions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common</package></attributes></class><comment><class-id>Roassal2.RTEdgeBuilder</class-id><body>RTEdgeBuilder offers an API to easily build edges.Here is an example:[ [ [ 	| v es |	v := RTView new.	es := (RTEllipse new size: 20) elementsOn: (1 to: 20).	v addAll: es.	RTEdgeBuilder new		view: v;		objects: (1 to: 20);		connectFrom: [ :value | value // 2 ].	es @ RTPopup @ RTDraggable.	RTTreeLayout on: es.	v ] ] ]</body></comment><class><name>RTResizable</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element handles enabled view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions-Resize</category><attributes><package>Roassal2-Interactions-Resize</package></attributes></class><comment><class-id>Roassal2.RTResizable</class-id><body>I provide element resizing in all eight directions. Resizing handles are displayed after clicking on an associated element, and are automatically removed when clicked on a view or another element.!! AssumptionsYou must provide this class with aView instance or the initialized element must be already added to the view.!! CollaboratorsDCRTRectangleDCRTResizeCanceled!! Examplesee my class side</body></comment><class><name>TRVisual</name><environment>Roassal2</environment><super>UI.SimpleView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>trachelCanvas shouldRefresh surface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Visualworks</package></attributes></class><comment><class-id>Roassal2.TRVisual</class-id><body>I am a equivalent class for TRMorph</body></comment><class><name>RTDominanceTreeLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractVerticalTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>RTCircleAttachPoint</name><environment>Roassal2</environment><super>Roassal2.RTContinuousAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTCircleAttachPoint</class-id><body>Continuous attach point which presumes both shapes are circles whose radius = half of width of encompassingRectangle-=-=-=v := RTView new.e1 := (RTBox new size: 50) elementOn: 1.e2 := (RTEllipse new size: 50) elementOn: 2.v add: e1; add: e2.e2 translateBy: 30 @ 60.e1 @ RTDraggable.e2 @ RTDraggable.s := RTArrowedLine new color: Color black.s attachPoint: RTCircleAttachPoint new.l := s edgeFrom: e1 to: e2.v add: l.v-=-=-=</body></comment><class><name>TRKeyDown</name><environment>Roassal2</environment><super>Roassal2.TRKeyboardEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRKeyDown</class-id><body>Event representing a key pressing (but not releasing)-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.e := RTBox new color: Color blue; size: 50; element.v add: e.e when: TRKeyDown do: [ :event |	event keyCombination = $r asKeyCombination ifTrue: [		e color: Color random.		v signalUpdate.	]].v open-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTBezier3Line</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controlElement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTBezier3Line</class-id><body>Describe a cubic Bezier splineHere is an example:-=-=-=-=-=v := RTView new.s := RTEllipse new color: (Color red alpha: 0.4); size: 30.e1 := s elementOn: 'Begin'.e2 := s elementOn: 'End'.e3 := s elementOn: 'Middle'.lineShape := RTBezier3Line new.lineShape controlElement: e3.lineShape attachPoint: (RTShorterDistanceAttachPoint instance).edge := lineShape edgeFrom: e1 to: e2.v add: e1; add: e2; add: e3; add: edge.e1 @ RTDraggable.e2 @ RTDraggable.e3 @ RTDraggable.e2 translateBy: 80 @ 50.e3 translateBy: 40 @ 25.v -=-=-=-=-=</body></comment><class><name>RTVisible</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visibleBlock invisibleBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTVisible</class-id><body>A RTVisible is an interaction for element. It allows one to define behavior when an element become visible or visible. The interaction has to be used after having added the element to a view.Instance Variables	invisibleBlock:		&lt;Object&gt;	visibleBlock:		&lt;Object&gt;invisibleBlock	- xxxxxvisibleBlock	- xxxxx</body></comment><class><name>TRResizeCanvasEvent</name><environment>Roassal2</environment><super>Roassal2.TREvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>newExtent oldExtent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>RTTextLines</name><environment>Roassal2</environment><super>Core.OrderedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TextBuilder</category><attributes><package>Roassal2-Builder-TextBuilder</package></attributes></class><comment><class-id>Roassal2.RTTextLines</class-id><body>A RTTextLines contains RTTextLine objects and represents whole text splitted into lines.</body></comment><class><name>RTFilledCircle</name><environment>Roassal2</environment><super>Roassal2.RTAbstractCircle</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>RTSVGRectangle</name><environment>Roassal2</environment><super>Roassal2.RTSVGEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>box width height </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGRectangle</class-id><body>A RTSVGLine is represents the SVG Rectangle of a regular rectangle, as defined in Roassal.</body></comment><class><name>RTSimilarityMatrix</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements pairs action </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-SimilarityMatrix</category><attributes><package>Roassal2-Builder-SimilarityMatrix</package></attributes></class><comment><class-id>Roassal2.RTSimilarityMatrix</class-id><body>A TSOverview is a visualization of similarity between test methods as measured by TestSurgeon.	TSOverview demo</body></comment><class><name>RTTreeMapBuilder</name><environment>Roassal2</environment><super>Roassal2.RTAbstractTreeBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>extent rectangle inset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TreeMap</category><attributes><package>Roassal2-Builder-TreeMap</package></attributes></class><comment><class-id>Roassal2.RTTreeMapBuilder</class-id><body>I am a class to produces treemap visualizationssee examples to  know how to use me.check this to get more info:http://www.humane-assessment.com/blog/system-nesting-map</body></comment><class><name>TRMouseDragStart</name><environment>Roassal2</environment><super>Roassal2.TRAbstractMouseEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseDragStart</class-id><body>When: when a valid draggable element is grabbedTarget: dragged element</body></comment><class><name>TRMouseRightDragStart</name><environment>Roassal2</environment><super>Roassal2.TRMouseDragStart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>TRNoShape</name><environment>Roassal2</environment><super>Roassal2.TRShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><comment><class-id>Roassal2.TRNoShape</class-id><body>This implements the Null Pattern for a Trachel shape.</body></comment><class><name>RTAreaBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shape dataBlock data x0 x1 y0 y1 defined interpolate interpolateReverse lvar tension </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTAreaBuilder</class-id><body>A builder for SVG shapes. in area with data.</body></comment><class><name>RTShapedObject</name><environment>Roassal2</environment><super>Roassal2.RTAnnounceableObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isFixed model shape trachelShape view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTShapedObject</class-id><body>A RTShapedObject is the super class of RTElement and RTEdge. A RTShapeObject has the ability to keep attributes, and receive a shape. This is an abstract class, it is not meant to be instantiated.Instance Variables	attributes:		&lt;Object&gt;	isFixed:		&lt;Object&gt;	model:		&lt;Object&gt;	shape:		&lt;Object&gt;	trachelShape:		&lt;Object&gt;	view:		&lt;Object&gt;attributes	- xxxxxisFixed	- xxxxxmodel	- xxxxxshape	- xxxxxtrachelShape	- xxxxxview	- xxxxx</body></comment><class><name>ASConverter</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.ASConverter</class-id><body>A converter is a kind of parser.</body></comment><class><name>RTMultiLinearColorForIdentity</name><environment>Roassal2</environment><super>Roassal2.RTMultiLinearColor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects defaultColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><comment><class-id>Roassal2.RTMultiLinearColorForIdentity</class-id><body>RTMultiLinearColorForIdentity associates to each objects a distinct color. Consider the following example:[[[classes := Collection withAllSubclasses.packages := (classes collect: #package) asSet asArray.v := RTView new.v @ RTDraggableView.normalizer := RTMultiLinearColorForIdentity new 					objects: packages;					command: #package.s := RTBox new size: 15; color: normalizer.v addAll: (s elementsOn: classes).e := RTEdgeBuilder new		view: v;		moveBehind;		objects: classes.e connectFrom: #superclass.RTClusterLayout on: v elements.v]]]Using the Mondrian api, the normalizer es:</body></comment><class><name>RTColorLegendItem</name><environment>Roassal2</environment><super>Roassal2.RTLegendItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color text model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Legend</category><attributes><package>Roassal2-Builder-Legend</package></attributes></class><class><name>RTVerticalLineDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLineDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTVerticalLineDecorator</class-id><body>Add vertical lines for some values-=-=-=-=-=	| b ds p |	b := RTGrapher new.	ds := RTDataSet new.	ds points: #( 0 1 2 10).	b add: ds.	b minY: -3.33.	p := RTHorizontalLineDecorator new.	p add: 5; add: 7; add: 3.34.	p shape line color: (Color red alpha: 0.3).	b addDecorator: p.	p := RTVerticalLineDecorator new.	p add: 5.	p shape line color: (Color blue alpha: 0.3).	b addDecorator: p.	b build.	^ b view -=-=-=-=-=</body></comment><class><name>RTRoundedBox</name><environment>Roassal2</environment><super>Roassal2.RTBox</super><private>false</private><indexed-type>none</indexed-type><inst-vars>borderRadius </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTRoundedBox</class-id><body>Rounded rectangle.-=-=-=v := RTView new.e1 :=((RTRoundedBox new borderRadius: 10; size: 50) + RTLabel )  elementOn: 1.e2 := (RTEllipse new size: 50) elementOn: 2.v add: e1; add: e2.e2 translateBy: 80 @ 60.e1 @ RTDraggable.e2 @ RTDraggable.s := RTArrowedLine new color: Color black.s attachPoint: RTRectangleAttachPoint new.l := s edgeFrom: e1 to: e2.v add: l.v-=-=-=</body></comment><class><name>RTGridView</name><environment>Roassal2</environment><super>Roassal2.RTAbstractInteractionView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gridShape gridSize dashes color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTGridView</class-id><body>I add a grid background to a view.Additionally any element having RTDraggableSnapToGrid will use my gridSize settings.!! Examplesee class-side</body></comment><class><name>RTMenuBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parentMenus closingSubmenuFlag </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Menu</category><attributes><package>Roassal2-Builder-Menu</package></attributes></class><comment><class-id>Roassal2.RTMenuBuilder</class-id><body>A RTMenuBuilder create menus, submenus, buttons in a view.Titles, callback, colors and callback can be defined.Instance Variables	parentMenus:		&lt;Object&gt;parentMenus	- xxxxx</body></comment><class><name>RTNest</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>layout padding behavior view labelShape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTNest</class-id><body>A RTNest is about nesting a group of objects in an element, typically located below.Here is an example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=| v  es |v := RTView new.es := RTBox elementsOn: RTShape withAllSubclasses.v addAll: es.RTNest new	for: es	add: [ :group :model | 		group addAll: ((RTBox new color: Color blue) elementsOn: model rtmethods).		RTGridLayout on: group.	].RTFlowLayout new on: es.es @ RTPopup @ RTDraggable.v-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTVerticalMinValueDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractVerticalValuesDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTVerticalMinValueDecorator</class-id><body>=-=-=-=| b ds |b := RTGrapher new.ds := RTData new.ds points: RTShape withAllSubclasses.ds y: #numberOfMethods.b add: ds.b addDecorator: RTVerticalMinValueDecorator new red.b addDecorator: RTVerticalMaxValueDecorator new blue.b axisY noLabel.b =-=-=-=</body></comment><class><name>RTSimpleResizable</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions-Resize</category><attributes><package>Roassal2-Interactions-Resize</package></attributes></class><comment><class-id>Roassal2.RTSimpleResizable</class-id><body>A RTResizeable is an interaction to enable resizing element.Here is an example:-=-=-=-=v := RTView new.s := RTBox new color: Color blue; width: [ :c | c numberOfVariables * 5 ]; height: #numberOfMethods.e := s elementOn: RTView.e @ RTResizeable.v add: e.-=-=-=-=</body></comment><class><name>TRController</name><environment>Roassal2</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>eventBeginingDragging elementBeingPointed block state shapeBeingPointed currentElement firstClickEvent isFirstDragging </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Visualworks</package></attributes></class><comment><class-id>Roassal2.TRController</class-id><body>I am a class that handles key, mouse, events.</body></comment><class><name>TRNoDecoratorShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractLineDecoratorShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><class><name>TRMouseLeave</name><environment>Roassal2</environment><super>Roassal2.TRAbstractMouseEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseLeave</class-id><body>When: when a mouse cursor left an elementTarget: entered element</body></comment><class><name>RTRotatedLabel</name><environment>Roassal2</environment><super>Roassal2.RTLabel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>angle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTRotatedLabel</class-id><body>A RTRotatedLabel describes rotated labels.| v shape es |v := RTView new.shape := RTRotatedLabel new text: [ :c | 'Class ', c name ]; angleInDegree: [ :c | c numberOfMethods \\ 360 ].es := shape elementsOn: Collection withAllSubclasses.RTGridLayout on: es.v addAll: es.v open</body></comment><class><name>RTMouseHoverZoom</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>desiredExtent resizeStrategy zoomInElements ratio </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><class><name>RTResetAllShape</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>trCanvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTResetAllShape</class-id><body>RTResetAllShape is an animation (in the Roassal sense) that reset all the trachel shapes in the canvas. </body></comment><class><name>RTTimeline</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sets timelineLabel elements timelineLabelBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Timeline</category><attributes><package>Roassal2-Builder-Timeline</package></attributes></class><comment><class-id>Roassal2.RTTimeline</class-id><body>Define a time line, a bit like a Gantt diagram.Here is an example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=	| b data |	data := #(#(WP1 0 5) #(WP2 5 8) #(WP3 7 10)).	b := RTTimeline new.		s := RTTimelineSet new.	s objects: data.	s lineIdentifier: #first.	s start: #second.	s end: #third.	b add: s.		b axisX 		numberOfLabels: 5;		labelRotation: -45;		labelConversion: [ :v | Date year: 2015 day: v ]. 	d := RTVerticalTickLineDecorator new.	d shape line color: Color white.	b addDecorator: d.	b  open-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTExtremityLineDecoration</name><environment>Roassal2</environment><super>Roassal2.RTLineDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><comment><class-id>Roassal2.RTExtremityLineDecoration</class-id><body>A DCRTLineDecoration is an abstract handler of head or tail of a line.Usage: 	DCRTLineHead shape: DCRTEmptyArrow	or	DCRTEmptyArrow asHead</body></comment><class><name>RTLineHead</name><environment>Roassal2</environment><super>Roassal2.RTExtremityLineDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><comment><class-id>Roassal2.RTLineHead</class-id><body>A DCRTLineHead is a handler of head of a line</body></comment><class><name>RTSVGBitmap</name><environment>Roassal2</environment><super>Roassal2.RTSVGEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>form box </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGBitmap</class-id><body>NOT WORKING, REFRAIN FROM USAGE</body></comment><class><name>RTRectangleTreeMap</name><environment>Roassal2</environment><super>Graphics.Rectangle</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentSubrectangle subrectangles inset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TreeMap</category><attributes><package>Roassal2-Builder-TreeMap</package></attributes></class><comment><class-id>Roassal2.RTRectangleTreeMap</class-id><body>I am a utility class to hepl th layout process in RTTreeMapBuilder</body></comment><class><name>TRMouseDragDrop</name><environment>Roassal2</environment><super>Roassal2.TRMouseAbstractDrop</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseDragDrop</class-id><body>When: at the end of DragDrop eventTarget: drop target element (element underneath the dragged one)</body></comment><class><name>TRResizeCanceled</name><environment>Roassal2</environment><super>Roassal2.TRShapeEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRResizeCanceled</class-id><body>I am fired when Resize operation is canceled globally for the whole View.!! CollaboratorsDCRTResizable</body></comment><class><name>RTView</name><environment>Roassal2</environment><super>Roassal2.RTAnnounceableObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements edges trCanvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTView</class-id><body>A RTView is xxxxxxxxx.Roassal structures a visualization in terms of views, elements, shapes, interactions, and animations.A ''view'' is a container of graphical elements and represents a layer that may be combined with other views. Instance Variables	edges:		&lt;Object&gt;	elements:		&lt;Object&gt;	trCanvas:		&lt;Object&gt;edges	- xxxxxelements	- xxxxxtrCanvas	- xxxxx</body></comment><class><name>GLineSegment</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>from to </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.GLineSegment</class-id><body>I am a copy of RTLineSegment from Roassal.</body></comment><class><name>RTSunburstConstantWidthLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractSunburstLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arcWidth centerWidth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Sunburst</category><attributes><package>Roassal2-Builder-Sunburst</package></attributes></class><comment><class-id>Roassal2.RTSunburstConstantWidthLayout</class-id><body>I am a layout for sunburst visualization,I put the arcs in a constant delta separation, you can define the center width.</body></comment><class><name>RTHorizontalTimelineDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractLineDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>identifiers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Timeline</category><attributes><package>Roassal2-Builder-Timeline</package></attributes></class><comment><class-id>Roassal2.RTHorizontalTimelineDecorator</class-id><body>RTHorizontalTimelineDecorator defines a separation between lined up group of events. Such a decoration simply needs to have a particular identifier. [[[ 	data := #(#(c1 0 5) #(c1 6 8) #(c2 0 5) #(c2 8 10) #(c3 0 10) #(c4 5 10) #(c5 5 8)).	b := RTTimeline new.		s := RTTimelineSet new.	s objects: data.	s lineIdentifier: #first.	s start: #second.	s end: #third.	b add: s.		b axisX 		numberOfLabels: 5;		labelRotation: -45;		labelConversion: [ :v | Date year: 2015 day: v ]. 	p := RTHorizontalTimelineDecorator new.	p addLineAboveIdentifier: 'c3'.	p addLineAboveIdentifier: 'c2'.	p shape line width: 3; color: (Color red).	b addDecorator: p.	b]]]</body></comment><class><name>RTTextPath</name><environment>Roassal2</environment><super>Roassal2.RTLabel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>outlineWidth outlineColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTTextPath</class-id><body>I am a simple class to generate text in roassal with Athens cairo that uses the textPathCommand from roassal</body></comment><class><name>RTConstrainedDraggable</name><environment>Roassal2</environment><super>Roassal2.RTAbstractDraggable</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rectangle after </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTConstrainedDraggable</class-id><body>A RTConstrainedDraggable is like Draggable, but restraint the element to move within a provided rectangle</body></comment><class><name>RTIdentityGroup</name><environment>Roassal2</environment><super>Roassal2.RTGroup</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTIdentityGroup</class-id><body>This class is useful to contains objects for which their class have overriden #= (e.g., AST Nodes)</body></comment><class><name>RTVerticalValuesDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractVerticalValuesDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTVerticalValuesDecorator</class-id><body>=-=-=-=-| b ds deco |b := RTGrapher new.ds := RTData new.ds points: #(0 1 2 3 4 5 6).b add: ds.deco :=  RTHorizontalAllValuesDecorator new.deco labelConversion: [ :value | '#', value asString ].b addDecorator: deco.deco :=  RTVerticalValuesDecorator new.deco addAll: #(2 3 4).deco labelConversion: [ :value | '#', value asString ].b addDecorator: deco.b axisX noTick; noLabel.b axisY noTick; noLabel.b=-=-=-=-</body></comment><class><name>RTResizeCanceled</name><environment>Roassal2</environment><super>Core.Announcement</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions-Resize</category><attributes><package>Roassal2-Interactions-Resize</package></attributes></class><comment><class-id>Roassal2.RTResizeCanceled</class-id><body>I am fired when Resize operation is canceled globally for the whole View.!! CollaboratorsDCRTResizable</body></comment><class><name>RTDepMatrix</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>horizontal vertical function </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-StructureMatrix</category><attributes><package>Roassal2-Builder-StructureMatrix</package></attributes></class><class><name>RTDraggableChildren</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTDraggableChildren</class-id><body>A RTDraggableChildren makes an element draggable. When dragged, children of the elements are also being dragged.</body></comment><class><name>RTBenchmarks</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Utility</category><attributes><package>Roassal2-Utility</package></attributes></class><comment><class-id>Roassal2.RTBenchmarks</class-id><body>This class contains a set of benchmarks.It is useful for example, to monitor the evolution or see the impact of the Virtual machine</body></comment><class><name>RTTimelineSet</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shapeBuilder interactionBuilder start end lineIdentifier objects globalMin globalMax elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Timeline</category><attributes><package>Roassal2-Builder-Timeline</package></attributes></class><comment><class-id>Roassal2.RTTimelineSet</class-id><body>RTTimelineSet new a set of events for the timeline. It takes a list of objects, lineIdentifier, start and end.Consider the following example:[ [ [ 	data := #(#(c1 0 5) #(c1 6 8) #(c2 0 5) #(c2 8 10) #(c3 0 10) #(c4 5 10) #(c5 5 8)).	b := RTTimeline new.		s := RTTimelineSet new.	s objects: data.	s lineIdentifier: #first.	s start: #second.	s end: #third.	b add: s.		b axisX 		numberOfLabels: 5;		labelRotation: -45;		labelConversion: [ :v | Date year: 2015 day: v ]. 	b]]]</body></comment><class><name>RTCursorFollower</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapherDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lineH canvas lineV labelH labelV labelXTextConvertion labelYTextConvertion color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTCursorFollower</class-id><body>A decorator that add lines that follow the mouse cursor-=-=-=-=| b ds |b := RTGrapher new.ds := RTDataSet new.ds points: #(5 10 6 2 -2.5).b add: ds.b addDecorator: RTCursorFollower new.b build.^ b view-=-=-=-=</body></comment><class><name>RTAbstractDiamond</name><environment>Roassal2</environment><super>Roassal2.RTLineDecorationShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>RTFilledDiamond</name><environment>Roassal2</environment><super>Roassal2.RTAbstractDiamond</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>RTSVGPathEntity</name><environment>Roassal2</environment><super>Roassal2.RTSVGEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>path center scale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGPathEntity</class-id><body>A RTSVGPathEntity is SVG path that translates from a generic SVG path, as represented in Roassal.</body></comment><class><name>RTApplicationMatrix</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>items </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ApplicationMatrix</category><attributes><package>Roassal2-Builder-ApplicationMatrix</package></attributes></class><class><name>TRMouseDragOver</name><environment>Roassal2</environment><super>Roassal2.TRMouseAbstractDrop</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseDragOver</class-id><body>When: when the dragged element is over a valid drop target elementTarget: drop target element (element underneath the dragged one)</body></comment><class><name>TRCanvasGridShape</name><environment>Roassal2</environment><super>Roassal2.TRShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>offset spacing dashes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><comment><class-id>Roassal2.TRCanvasGridShape</class-id><body>I am a shape for RTGridView</body></comment><class><name>RTResizeMove</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>originalExtent animatedValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><class><name>GRoundedRectangle</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rectangle borderRadius </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.GRoundedRectangle</class-id><body>I represent a rectangle whose corners are rounded.</body></comment><class><name>RTRDatasets</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>packages rDataSets </class-inst-vars><imports></imports><category>Roassal2-Table</category><attributes><package>Roassal2-Table</package></attributes></class><comment><class-id>Roassal2.RTRDatasets</class-id><body>This class contains many data sets. </body></comment><class><name>RTSunburstExtentLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractSunburstLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>wside roots </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Sunburst</category><attributes><package>Roassal2-Builder-Sunburst</package></attributes></class><comment><class-id>Roassal2.RTSunburstExtentLayout</class-id><body>I am a layout for Sunburst Visualization, I use a radius to calculate the better distance of all arcs in the visualization.You can use radius to set the total radius of sunburstor use the selector extent:, that uses radius size</body></comment><class><name>RTSubTimelineSet</name><environment>Roassal2</environment><super>Roassal2.RTTimelineSet</super><private>false</private><indexed-type>none</indexed-type><inst-vars>level </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Timeline</category><attributes><package>Roassal2-Builder-Timeline</package></attributes></class><comment><class-id>Roassal2.RTSubTimelineSet</class-id><body>RTSubTimelineSet new a set of events for the timeline. It takes a list of objects, lineIdentifier, start, end, and level.Consider the following example:[ [ [ 	data := #(#(c1 0 5 1) #(c1 3 8 2) #(c2 0 9 1) #(c2 3 5 2) #(c2 6 8 2)).	b := RTTimeline new.		s := RTSubTimelineSet new.	s objects: data.	s lineIdentifier: #first.	s start: #second.	s end: #third.	s level: #fourth.	b add: s.		b axisX 		numberOfLabels: 5;		labelRotation: -45;		labelConversion: [ :v | Date year: 2015 day: v ]. 	b]]]</body></comment><class><name>RTMetricNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements view translator edges </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><comment><class-id>Roassal2.RTMetricNormalizer</class-id><body>A Metric normalizer is made to assign a color, or a particular shape computed from a group of elements. Consider the following example:-=-=-=-=-=-=-=-=-=-=-=-="Set here the classes you wish to visualize"classes := Collection withAllSubclasses.v := RTView new.v @ RTDraggableView.shape := RTBox new.es := shape elementsOn: classes.v addAll: es.RTMetricNormalizer new	elements: es;	normalizeWidth: #numberOfVariables;	normalizeHeight: #numberOfMethods;	normalizeColor: #numberOfLinesOfCode.RTFlowLayout on: es.v-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTScatterplotMatrix</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>metrics objects xScales yScales padding boxSize shouldUseAxisForX shouldUseAxisForY generator lineShape boxShape allowEvent boxes allDotElements labelShape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTScatterplotMatrix</class-id><body>I am a basic builder to build a matrix of scatterplot with roassal</body></comment><class><name>RTDecoration</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>items </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><class><name>TREmptyNarrowArrowHeadShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractArrowHeadShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><class><name>TRFilledNarrowArrowHeadShape</name><environment>Roassal2</environment><super>Roassal2.TREmptyNarrowArrowHeadShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><class><name>RTMorphingView</name><environment>Roassal2</environment><super>Roassal2.RTAbstractMorphingView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions-MorphingView</category><attributes><package>Roassal2-Interactions-MorphingView</package></attributes></class><comment><class-id>Roassal2.RTMorphingView</class-id><body>I am the advanced brother of RTMorphingView. In addition to its functionalities I also...- Add new nodes from one view to the next- Remove nodes no longer present- Adapt the #extent of nodes</body></comment><class><name>RTKiviatNode</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>named arrayValues nodeKiviatElements edgeKiviatElements shapeNode shapeEdge polygonElement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Kiviat</category><attributes><package>Roassal2-Builder-Kiviat</package></attributes></class><comment><class-id>Roassal2.RTKiviatNode</class-id><body>A RTKiviatNode represent a polygon in the view, it represent one objects that is studied. It is composed by as many kiviatElement as the umber of metrics, connected by edges. Instance Variables	arrayValues:		&lt;Object&gt;	edgeElements:		&lt;Object&gt;	named:		&lt;Object&gt;	nodeElements:		&lt;Object&gt;	shapeEdge:		&lt;Object&gt;	shapeNode:		&lt;Object&gt;arrayValues	- xxxxxedgeElements	- xxxxxnamed	- xxxxxnodeElements	- xxxxxshapeEdge	- xxxxxshapeNode	- xxxxx</body></comment><class><name>RTLinearTransformation</name><environment>Roassal2</environment><super>Roassal2.RTScaleTransformation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling</category><attributes><package>Roassal2-Builder-Grapher-Scaling</package></attributes></class><class><name>RTStyledLabel</name><environment>Roassal2</environment><super>Roassal2.RTLabel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>emphasis </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTStyledLabel</class-id><body>I am a label that can be emphasized.!! Usage==label emphasis: TextEmphasis bold.==or==label emphasis: { TextEmphasis bold . TextEmphasis underlined }==!! Example[[[|v|v := RTView new.l := RTStyledLabel new	color: Color black;	emphasis: TextEmphasis underlined;	elementOn: 'Underlined Text'.v add: l.v open.]]]</body></comment><class><name>RTIcon</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Utility</category><attributes><package>Roassal2-Utility</package></attributes></class><class><name>RTComposer</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stack view gap mapping groups backgrounds names </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Composer</category><attributes><package>Roassal2-Builder-Composer</package></attributes></class><comment><class-id>Roassal2.RTComposer</class-id><body>I am responsible to compose several visualizations.For example:====compo := RTComposer new.b := RTMondrian new.b view: compo view.b nodes: (1 to: 3).b build.compo group: #g1.b := RTMondrian new.b view: compo view.b nodes: (1 to: 4).b build.compo group: #g2.compo layout: RTVerticalLineLayout new alignCenter. compo view====</body></comment><class><name>RTVarianceRangeDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapherDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color x avg sd </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>RTInteractiveSVGExporter</name><environment>Roassal2</environment><super>Roassal2.RTSVGExporter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interactions marginX marginY paddingX paddingY functions globals buttons buttonStart </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTInteractiveSVGExporter</class-id><body>RTInteractiveSVGExporter exists for the sole porpouse of adding interactions, coming from the RTHTMLExporter, smoothly</body></comment><class><name>RTAMItem</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>itemName row column tags model color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ApplicationMatrix</category><attributes><package>Roassal2-Builder-ApplicationMatrix</package></attributes></class><class><name>TRMouseDragLeave</name><environment>Roassal2</environment><super>Roassal2.TRMouseAbstractDrop</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><comment><class-id>Roassal2.TRMouseDragLeave</class-id><body>When: when the dragged element left a valid drop target elementTarget: drop target element (element underneath the dragged one)</body></comment><class><name>RTNopAnimation</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>animatedValue trachelCanvas blockToExecute </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><comment><class-id>Roassal2.RTNopAnimation</class-id><body>A RTNopAnimation simply wait. This is useful to temporize</body></comment><class><name>RTExperimentalStack</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>values xblock yblock order offset stackOffsets out </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTExperimentalStack</class-id><body>I am an experimental class.This is an stack data based in	http://leebyron.com/streamgraph/stackedgraphs_byron_wattenberg.pdf</body></comment><class><name>ASNoFill</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>soleInstance </class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.ASNoFill</class-id><body>A simple default class for ASConverter</body></comment><class><name>RTGapTree</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>circles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-CircularMap</category><attributes><package>Roassal2-Builder-CircularMap</package></attributes></class><comment><class-id>Roassal2.RTGapTree</class-id><body>I am a utility class to help to the layout process in the RTCircularTreeMapBuilder</body></comment><class><name>RTSlider</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>callback position sliderElements min max useIntegerLabel value orientation size hasLabel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-UI-Slider</category><attributes><package>Roassal2-Builder-UI-Slider</package></attributes></class><comment><class-id>Roassal2.RTSlider</class-id><body>Create a slider on a view.A `#callback:`can be set to view the `#progress` (as float between 0 and 1).</body></comment><class><name>RTValueLinearNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTNLinearNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>minScale maxScale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizerOBSOLETE</category><attributes><package>Roassal2-ColorNormalizerOBSOLETE</package></attributes></class><comment><class-id>Roassal2.RTValueLinearNormalizer</class-id><body>A ROValueLinearNormalizer is xxxxxxxxx.Instance Variables	maxScale:		&lt;Object&gt;	minScale:		&lt;Object&gt;maxScale	- xxxxxminScale	- xxxxx</body></comment><class><name>RTUnoptimizedComposer</name><environment>Roassal2</environment><super>Roassal2.RTComposer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Composer</category><attributes><package>Roassal2-Builder-Composer</package></attributes></class><class><name>RTAbstractDSM</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements objectsX objectsY wantsLabel text rotation transparencyWhenNonHighlighted transparencyWhenHighlighted creationBlock selectElement xinteraction yinteraction labelShapeX labelShapeY </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-DSM</category><attributes><package>Roassal2-Builder-DSM</package></attributes></class><comment><class-id>Roassal2.RTAbstractDSM</class-id><body>I am an abstract class for dependency structural matrices</body></comment><class><name>RTDSM</name><environment>Roassal2</environment><super>Roassal2.RTAbstractDSM</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependency </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-DSM</category><attributes><package>Roassal2-Builder-DSM</package></attributes></class><comment><class-id>Roassal2.RTDSM</class-id><body>RTDSM build a Dependency Structural Matrix for a collection of objects and an arbitrary dependency function.For example, inspect the following:[[[ 	dsm := RTDSM new.	dsm objects: RTShape withAllSubclasses.	dsm dependency: #dependentClasses.	^ dsm]]]</body></comment><class><name>TRVITimer</name><environment>Roassal2</environment><super>Roassal2.TRVIBasicTimer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>active cycleLength repeat startTime elapsedCycles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Viva</category><attributes><package>Roassal2-Trachel-Viva</package></attributes></class><comment><class-id>Roassal2.TRVITimer</class-id><body>I am using system time to implement a timer.[ [ [ 		 	| v timer t e |	v := RTView new.	timer := VITimer new cycleLength: 2.	t := VIAnimatedValue new.	t evaluator: [ :time | 0 interpolateTo: 100 at: time ].	t timer: timer.	timer start.	timer repeat.	e := (RTEllipse new size: 30) element.	v add: e.	e translateTo: t @ t.	v addMenu: 'refresh' callback: [ v signalUpdate ].	v] ] ]</body></comment><class><name>RTTheme</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTTheme</class-id><body>I hold various default configurations for Roassal such as default colors etc, so each shape doesn't have to set it by itself.</body></comment><class><name>TRFilledArrowHeadShape</name><environment>Roassal2</environment><super>Roassal2.TREmptyArrowHeadShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-ShapesForArrow</category><attributes><package>Roassal2-Trachel-ShapesForArrow</package></attributes></class><class><name>TRDarkTheme</name><environment>Roassal2</environment><super>Roassal2.TRPlainColorTheme</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Theme</category><attributes><package>Roassal2-Trachel-Theme</package></attributes></class><class><name>RTNoDecorationShape</name><environment>Roassal2</environment><super>Roassal2.RTLineDecorationShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>RTKiviatElement</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kiviatNode metric value position </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Kiviat</category><attributes><package>Roassal2-Builder-Kiviat</package></attributes></class><comment><class-id>Roassal2.RTKiviatElement</class-id><body>A RTKiviatElement is one element in the view. It has a reference on its kiviatNode, the name of the metric, its value and it position.Instance Variables	kiviatNode:		&lt;Object&gt;	metric:		&lt;Object&gt;	position:		&lt;Object&gt;	value:		&lt;Object&gt;kiviatNode	- xxxxxmetric	- xxxxxposition	- xxxxxvalue	- xxxxx</body></comment><class><name>TRBezierShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractLineShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listOfPoints </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>RTPolygon</name><environment>Roassal2</environment><super>Roassal2.RTAbstractElementShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vertices </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTPolygon</class-id><body>I am a shape which builds the polygon sequentialy conecting my vertices.For example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=| v  shape element |v := RTView new.shape := 	RTPolygon new 		vertices:{		25 @ 00 .		10 @ 50 .		50 @ 20 .		00 @ 20 .		40 @ 50 }.element := shape element.v add: element.v open-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>RTDistribution</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects numberMax nbOfIntervals numberMin interval strategyBlock metric numbers sorted </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Utility</category><attributes><package>Roassal2-Utility</package></attributes></class><comment><class-id>Roassal2.RTDistribution</class-id><body>frequency distrubution of a collection.number of classes defined by default in #defaultNumberOfIntervals, a common calcul to have an optimized number of classes.</body></comment><class><name>RTFlowLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractFlowLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTFlowLayout</class-id><body>A RTFlowLayout arrange elements in a rectangle including space (gapSize) between them, ideally it give you a square if all elements have an equal height and width .</body></comment><class><name>RTCalendarBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dates dateShape dateSelector monthShape yearShape dateLayout monthLayout yearLayout dayLabelShape dateInteraction monthInteraction yearInteraction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Calendar</category><attributes><package>Roassal2-Builder-Calendar</package></attributes></class><comment><class-id>Roassal2.RTCalendarBuilder</class-id><body>I am a builder to create calendars with Roassal</body></comment><class><name>RTSVGHightlight</name><environment>Roassal2</environment><super>Roassal2.RTSVGInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGHightlight</class-id><body>A RTSVGHightlight is hightlight of SVG elements.Highlighting of edges is NOT supported.</body></comment><class><name>RTCache</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas trachelShapes shapeBeingPointed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Cachetor</category><attributes><package>Roassal2-Cachetor</package></attributes></class><comment><class-id>Roassal2.RTCache</class-id><body>I am class to handle a lot of elements and drawI am still growing, if you find a best answer to cache elements, please let me to to akevalion@gmail.co</body></comment><class><name>TRMouseLeftDragStart</name><environment>Roassal2</environment><super>Roassal2.TRMouseDragStart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Events</category><attributes><package>Roassal2-Trachel-Events</package></attributes></class><class><name>Year</name><environment>Roassal2</environment><super>Roassal2.Timespan</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.Year</class-id><body>I represent a year.</body></comment><class><name>RTMenu</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view items isOpen color labelBackground label savedLabelBackgroundColor menuBackgroundColor menuBackground highlightColor isLocked </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Menu</category><attributes><package>Roassal2-Builder-Menu</package></attributes></class><class><name>RTDoubleSlider</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>callback labelled position sliderElements min max useIntegerLabel extremity1 extremity2 line cursorMin cursorMax lineCursor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-UI-Slider</category><attributes><package>Roassal2-Builder-UI-Slider</package></attributes></class><comment><class-id>Roassal2.RTDoubleSlider</class-id><body>Class implementing a slider with two cursors, useful for selection of intervals</body></comment><class><name>RTNFontLinearNormalizer</name><environment>Roassal2</environment><super>Roassal2.RTNLinearNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizerOBSOLETE</category><attributes><package>Roassal2-ColorNormalizerOBSOLETE</package></attributes></class><comment><class-id>Roassal2.RTNFontLinearNormalizer</class-id><body>A RONFontLinearNormalizer is xxxxxxxxx.</body></comment><class><name>RTDateLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gapSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Calendar</category><attributes><package>Roassal2-Builder-Calendar</package></attributes></class><comment><class-id>Roassal2.RTDateLayout</class-id><body>I am a layout for elements with model date.</body></comment><class><name>RTGradualDSM</name><environment>Roassal2</environment><super>Roassal2.RTAbstractDSM</super><private>false</private><indexed-type>none</indexed-type><inst-vars>score </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-DSM</category><attributes><package>Roassal2-Builder-DSM</package></attributes></class><comment><class-id>Roassal2.RTGradualDSM</class-id><body>RTGradualDSM build a Dependency Structural Matrix for a collection of objects and an arbitrary score function. The score is used to give a color to the cell.For example, inspect the following:[[[ 	dsm := RTGradualDSM new.	values := { 1-&gt;#(2 3 1 5 6) . 2 -&gt; #(1 2 1 1 1 1 4) . 3 -&gt; #(1 2 5 3 2) . 4 -&gt; #(2 5 1) . 5 -&gt; #() . 6 -&gt; #(4) } asDictionary.	dsm objects: (1 to: 6).	dsm score: [ :assoc | (values at: assoc key) occurrencesOf: assoc value ].	dsm.]]]</body></comment><class><name>TRVIManualTimer</name><environment>Roassal2</environment><super>Roassal2.TRVIBasicTimer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Viva</category><attributes><package>Roassal2-Trachel-Viva</package></attributes></class><comment><class-id>Roassal2.TRVIManualTimer</class-id><body>[ [ [ 	| v timer t e |	v := RTView new.	timer := VIManualTimer new.	t := VIAnimatedValue new.	t evaluator: [ :time | 0 interpolateTo: 100 at: time ].	t timer: timer.		e := (RTEllipse new size: 30) element.	v add: e.	e translateTo: t @ t.	v addMenu: 'refresh' callback: [ timer incrementBy: 0.1. v signalUpdate ].	v ] ] ]</body></comment><class><name>TRCamera</name><environment>Roassal2</environment><super>Roassal2.TRCallableObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position canvas scale initializer </inst-vars><class-inst-vars>nullCamera </class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><comment><class-id>Roassal2.TRCamera</class-id><body>I am main tool which helps to move across Trachel's canvas.My two main properties are position and scale.- position   is a point representing coordinates of the canvas on which the "viewing window" will be centered.  position can be changes with:  * #translateBy:  * #translateTo:  both methods accept canvas based coordinates- scale  defines a magnitude of zooming applied to the canvas and it's elements.I provide two methods that allow conversion between coanvas (space) coordinate system and real window(pixel)'s coordinates.* #fromPixelToSpace:* #fromSpaceToPixel:Also I provide handy methods for centering camera on current elements and zoomeing to fit everuthing in the square with desired size (default 500pnt).* #focusOnCenter* #focusOnCenterScaled* #focusOnCenterScaled:</body></comment><class><name>RTSVGBoxedTextPopup</name><environment>Roassal2</environment><super>Roassal2.RTSVGTextPopup</super><private>false</private><indexed-type>none</indexed-type><inst-vars>backgroundColor borderColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGBoxedTextPopup</class-id><body>A RTSVGBoxedTextPopup is a text popup, contained in a square box.This boxing, in SVG, supports many features, not included in this class.</body></comment><class><name>TRWhiteTheme</name><environment>Roassal2</environment><super>Roassal2.TRPlainColorTheme</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category>Trachel-Theme</category><attributes><package>Roassal2-Trachel-Theme</package></attributes></class><class><name>RTPolyLineSegment</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>segments </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTPolyLineSegment</class-id><body>I am an ordered collection of LineSegments. I provide some extra functions such as searching for specific segment given some position etc.</body></comment><class><name>TRExtensibleLabelShape</name><environment>Roassal2</environment><super>Roassal2.TRLabelShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>RTHighlightElementsInView</name><environment>Roassal2</environment><super>Roassal2.RTAbstractInteractionView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view colorIndex transparency </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTHighlightElementsInView</class-id><body>Add a menu entry to easily allow for selection[[[| v |v := RTView new.v addAll: (RTBox elementsOn: (Collection withAllSubclasses)).RTGridLayout on: v elements.v elements @ RTPopup.v @  RTHighlightElementsInView.]]][[[| b | b := RTMondrian new.b node: 4 forIt: [	b node: 4 ].b view @ RTHighlightElementsInView new transparent.b]]]			</body></comment><class><name>CairoContext</name><environment>CairoGraphics</environment><super>CairoGraphics.ManagedHandle</super><private>false</private><indexed-type>none</indexed-type><inst-vars>draw cache prev </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Roassal2-Extentions</package></attributes></class><comment><class-id>CairoGraphics.CairoContext</class-id><body>CairoContext maps directly to a cairo_t type in the cairo verbage. It is typically stored in a variable called "cr". It is like a classical VW GraphicsContext. It is usually created by sending #context to some kind of Surface object.See &lt;http://www.cairographics.org/manual/cairo-cairo-t.html&gt;</body></comment><class><name>RTBoxPlotDataSet</name><environment>Roassal2</environment><super>Roassal2.RTAbstractDataSet</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model boxShape boxLineShape boxWidth outlierShape showMean meanShape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-BoxPlot</category><attributes><package>Roassal2-Builder-BoxPlot</package></attributes></class><comment><class-id>Roassal2.RTBoxPlotDataSet</class-id><body>Boxplots are used to better understant how values are spaced out in different sets of data through their quartiles.To get more info chec RTBoxPlotExample</body></comment><class><name>RTRangeSelector</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapherDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visualRange rectangle pointWhenStartingDragging callback </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><comment><class-id>Roassal2.RTRangeSelector</class-id><body>A range along the X-Axis is selectable.-=-=-=-=-=g := RTGrapher new.g view: RTView new.ds := RTData new.ds points: RTShape withAllSubclasses.ds y: [ :cls | cls numberOfMethods - 50 ].ds x: [ :cls | cls numberOfLinesOfCode - 150 ].g add: ds.g addDecorator: (RTRangeSelector new callback: [:es | es inspect ])."RTGrapherSelectRangeViewContext onGrapher: g."g -=-=-=--=-=</body></comment><class><name>RTClipBox</name><environment>Roassal2</environment><super>Roassal2.RTBox</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental</package></attributes></class><comment><class-id>Roassal2.RTClipBox</class-id><body>I am a simple class to clip a part of the canvas</body></comment><class><name>RTUMLClassBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classes classesGroup classname instanceVariables methodsNames superclass methodselector methodShape layout attributeselector attributeShape lineShape boxShape classNameShape edgeActions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-UML</category><attributes><package>Roassal2-Builder-UML</package></attributes></class><comment><class-id>Roassal2.RTUMLClassBuilder</class-id><body>I am a builder to create UML diagrams in Roassal2, see examples</body></comment><class><name>TRBitmapShape</name><environment>Roassal2</environment><super>Roassal2.TRShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>form rectangle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>RTActiveAnimation</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>blockToExecute view intervalInMilliseconds lastRefresh </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><class><name>Week</name><environment>Roassal2</environment><super>Roassal2.Timespan</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>DayNames StartDay </class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.Week</class-id><body>I represent a week.</body></comment><class><name>RTOrderedCollection</name><environment>Roassal2</environment><super>Core.OrderedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>addCallback viewToUpdate shapeBuilder interactionBuilder layoutBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Utility</category><attributes><package>Roassal2-Utility</package></attributes></class><class><name>RTPieBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects values sum elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-PieChart</category><attributes><package>Roassal2-Builder-PieChart</package></attributes></class><class><name>RTMonthLayout</name><environment>Roassal2</environment><super>Roassal2.RTLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gapSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Calendar</category><attributes><package>Roassal2-Builder-Calendar</package></attributes></class><comment><class-id>Roassal2.RTMonthLayout</class-id><body>This is a specific layout for month in RTCalendarBuilder</body></comment><class><name>RTElement</name><environment>Roassal2</environment><super>Roassal2.RTShapedObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>connectedEdges shouldUpdateEdges </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTElement</class-id><body>An element is a wrapper to an external provided object (e.g., a number, a file, your object).To an element, you can add a shape (composed or not), and interaction. Elements are added in a view. To be visible, elements must have at least one shape. One key aspect of Roassal is that shapes may accept metrics or numerical values to define their visual dimensions (''e.g.,'' height, width, color, border width). Instead of giving absolute numerical values to define the visual aspect of the graphical element (as with most visualization frameworks), functions used as metrics may be provided.Instance Variables	connectedEdges:		&lt;Object&gt;connectedEdges	- xxxxx</body></comment><class><name>RTAbstractMultiElement</name><environment>Roassal2</environment><super>Roassal2.RTElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>ownedElements layoutBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><class><name>TRFocusTopLeft</name><environment>Roassal2</environment><super>Roassal2.TRFocusing</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>RTRoute</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>edge mapBuilder length </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map</category><attributes><package>Roassal2-Builder-Map</package></attributes></class><class><name>RTRadialTreeLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractCompactTree</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTRadialTreeLayout</class-id><body>A RORadialTreeLayout is xxxxxxxxx.</body></comment><class><name>TRWhiteSolarizedTheme</name><environment>Roassal2</environment><super>Roassal2.TRSolarizedTheme</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Theme</category><attributes><package>Roassal2-Trachel-Theme</package></attributes></class><class><name>RTLineSegment</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>from to </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTLineSegment</class-id><body>A DCLineSegment is line from 'from' point to 'to' point</body></comment><class><name>TRArcLineShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractLineShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>distance line normal alpha center radius </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>RTZoomableView</name><environment>Roassal2</environment><super>Roassal2.RTAbstractInteractionView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>minZoom maxZoom </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTZoomableView</class-id><body>I am interaction which allows view to be zoomed with a mouce wheel. While zomming mouce cursor stays on the same spot in the canvas</body></comment><class><name>RTBorderStyle</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>style </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Shapes</category><attributes><package>Roassal2-Shapes</package></attributes></class><comment><class-id>Roassal2.RTBorderStyle</class-id><body>Define the style of a border.It is used now in RTBox.Here is an example:-=-=-=v := RTView new.box := RTBox new.box width: 50; height: 30.box borderStyle dot.box borderWidth: 3.box borderColor: Color blue.v add: box element.v-=-=-=</body></comment><class><name>RTDevVarDecorator</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapherDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color points deviation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>RTBoxPlotItem</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model values mean median q1 q3 interQuartileRange minRegularValue maxRegularValue outliers minOutlier maxOutlier </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-BoxPlot</category><attributes><package>Roassal2-Builder-BoxPlot</package></attributes></class><comment><class-id>Roassal2.RTBoxPlotItem</class-id><body>I am an utility class to build a Box Plot visualization with RTBoxPlotBuilder</body></comment><class><name>RTEvolutionDSM</name><environment>Roassal2</environment><super>Roassal2.RTGradualDSM</super><private>false</private><indexed-type>none</indexed-type><inst-vars>timelineBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-DSM</category><attributes><package>Roassal2-Builder-DSM</package></attributes></class><comment><class-id>Roassal2.RTEvolutionDSM</class-id><body>I am a simple draw of evolution group</body></comment><class><name>RTSparkline</name><environment>Roassal2</environment><super>Roassal2.RTAbstractElementShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>valueBlock maxValue minValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Sparkline</category><attributes><package>Roassal2-Sparkline</package></attributes></class><class><name>ASPathConverter</name><environment>Roassal2</environment><super>Roassal2.ASConverter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>segments path absolute min max </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.ASPathConverter</class-id><body>The syntax of path data is concise in order to allow for minimal file size and efficient downloads, since many SVG files will be dominated by their path data. Some of the ways that SVG attempts to minimize the size of path data are as follows:â All instructions are expressed as one character (e.g., a moveto is expressed as an M).â Superfluous white space and separators such as commas can be eliminated (e.g., "M 100 100 L 200 200"contains unnecessary spaces and could be expressed more compactly as "M100 100L200 200").â The command letter can be eliminated on subsequent commands if the same command is used multiple timesin a row (e.g., you can drop the second "L" in "M 100 200 L 200 100 L -100 -200" and use "M 100 200 L 200100 -100 -200" instead).â Relative versions of all commands are available (uppercase means absolute coordinates, lowercase meansrelative coordinates).â Alternate forms of lineto are available to optimize the special cases of horizontal and vertical lines (absolute andrelative).â Alternate forms of curve are available to optimize the special cases where some of the control points on thecurrent segment can be determined automatically from the control points on the previous segment.</body></comment><class><name>RTSVGArrowHeadMarker</name><environment>Roassal2</environment><super>Roassal2.RTSVGAbstractMarker</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGArrowHeadMarker</class-id><body>A RTSVGArrowHeadMarker is an arrow-head marker.</body></comment><class><name>RTMondrianFrame</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parentFrame depth parent elements childrenFrame </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Mondrian</category><attributes><package>Roassal2-Builder-Mondrian</package></attributes></class><comment><class-id>Roassal2.RTMondrianFrame</class-id><body>A RTMondrianFrame is an elementary unit in Mondrian.Instance Variables	childrenFrame:		&lt;RTMondrianFrame&gt;	depth:		&lt;SmallInteger&gt;	elements:		&lt;RTGroup&gt;	parent:		&lt;RTMondrianFrame&gt;	parentFrame:		&lt;RTMondrianFrame&gt;childrenFrame	- xxxxxdepth	- xxxxxelements	- xxxxxparent	- xxxxxparentFrame	- xxxxx</body></comment><class><name>TRRemoveCallback</name><environment>Roassal2</environment><super>Roassal2.TRCallback</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Callbacks</category><attributes><package>Roassal2-Trachel-Callbacks</package></attributes></class><comment><class-id>Roassal2.TRRemoveCallback</class-id><body>I am triggered when aShape has been removed from a canvas.The opposite of me is TRAddedCallback.==aShape addCallback: (TRRemoveCallback block: [ :shape | "do sth" ])==</body></comment><class><name>RTDirectLayoutTranslator</name><environment>Roassal2</environment><super>Roassal2.RTLayoutTranslator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><class><name>RTCompoundElement</name><environment>Roassal2</environment><super>Roassal2.RTElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>children layoutBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><class><name>RTEdge</name><environment>Roassal2</environment><super>Roassal2.RTShapedObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>from to shouldBeUsedInLayout </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><comment><class-id>Roassal2.RTEdge</class-id><body>RTEdge describes an edge between two RTElement. Here is an example:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.ballShape := RTEllipse new size: 30; color: #yourself. redBall :=  ballShape elementOn: Color red.blueBall :=  ballShape elementOn: Color blue.v add: redBall; add: blueBall.blueBall translateBy: 80 @ 50.blueBall @ RTDraggable.redBall @ RTDraggable.edge := RTLine edgeFrom: redBall to: blueBall." The line above is equivalent to the following two lines:edge := RTEdge from: redBall to: blueBall.edge + RTLine."v add: edge.v-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>TRFocusRightMost</name><environment>Roassal2</environment><super>Roassal2.TRFocusing</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>GLine</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>a b c </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.GLine</class-id><body>A GLine has 3 instance variables, which are koeficients  of line:ax+by+c=0</body></comment><class><name>RTHTML5Exporter</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream directory fileName title exportFixedShapes roassalJSfile marginScale jsrefenrece shouldCreateJS maxSizeForString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-HTML5</category><attributes><package>Roassal2-Exporter-HTML5</package></attributes></class><comment><class-id>Roassal2.RTHTML5Exporter</class-id><body>I am a class to export instances of RTView with all its shapes and interactions, just check the examples to see how to use me.Instance Variables	directory:		a string	fileName:		a string	stream:		a WriteStream	title:		a stringdirectory	- the directory where the file is going to be saved, default the working directoryfileName	- the name of the html file. Default name: thePage.htmlstream	- the write stream is created when export method is called.title	- the title for the HTML page. Default title is Roassal Page</body></comment><class><name>TRPNGWriter</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Visualworks</package></attributes></class><comment><class-id>Roassal2.TRPNGWriter</class-id><body>I am a simple class to write VisualComponents into a stream</body></comment><class><name>TRDarkSolarizedTheme</name><environment>Roassal2</environment><super>Roassal2.TRSolarizedTheme</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Theme</category><attributes><package>Roassal2-Trachel-Theme</package></attributes></class><class><name>TRSVGPathLineShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractLineShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pathCommands from to </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>RTScrollpad</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTScrollpad</class-id><body>add a scroll pad to the view</body></comment><class><name>RTNiceStepSizeGenerator</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>qvar i io j q ss ovar ssOffMap resetRequired base niceStep o </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Labeling</category><attributes><package>Roassal2-Builder-Grapher-Labeling</package></attributes></class><comment><class-id>Roassal2.RTNiceStepSizeGenerator</class-id><body>Nice numbers are just step sizes and used for tick spacing. We will use only niceStep tick spaces and place tick marks at multiples of tick spacing.    References:  	[1] An Extension of Wilkinson's Algorithm for positioning Tick Labels on Axes  		 				(Justin Talbot, Sharon Lin, Pat Hanrahan)   [2] Nice Numbers for Graph Labels (Paul S. Heckbert, Graphic Gems I)</body></comment><class><name>RTEmptyDiamond</name><environment>Roassal2</environment><super>Roassal2.RTAbstractDiamond</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><class><name>RTSVGButton</name><environment>Roassal2</environment><super>Roassal2.RTSVGInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name id val </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGButton</class-id><body>A RTSVGButton represents buttons that changes the elements attributes. Since is defined just like any other interaction, is treated as it.</body></comment><class><name>RTRangeBelowXAxis</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGrapherDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label startValue endValue markerColor distanceInPixelsFromAxis </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators</category><attributes><package>Roassal2-Builder-Grapher-Decorators</package></attributes></class><class><name>RTConstrainedDraggableView</name><environment>Roassal2</environment><super>Roassal2.RTAbstractDraggableView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>constraint </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTConstrainedDraggableView</class-id><body>I am a view interaction allowing horizontal translation.In addition, I hold a block allowing constraints on the translations</body></comment><class><name>RTHorizontalDraggableView</name><environment>Roassal2</environment><super>Roassal2.RTConstrainedDraggableView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTHorizontalDraggableView</class-id><body>I am an interaction to translate the view as my parent.The difference is that I only allow horizontal translations</body></comment><class><name>RTDataHighlightInteraction</name><environment>Roassal2</environment><super>Roassal2.RTGrapherInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dataset color legendElements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTDataHighlightInteraction</class-id><body>I highlight the whole dataset when I any of my elements are hovered over.</body></comment><class><name>RTRotationMove</name><environment>Roassal2</environment><super>Roassal2.RTAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>animatedValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Animation</category><attributes><package>Roassal2-Animation</package></attributes></class><class><name>FormCanvas</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>form origin clipRect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.FormCanvas</class-id><body>Note that when shadowDrawing is true, shadowStipple may be either a color, for a solid shadow of the given color, or it may be a stipple used to simulate gray shading when the display cannot support alpha blending.</body></comment><class><name>RTSVGViewPopup</name><environment>Roassal2</environment><super>Roassal2.RTSVGPopup</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGViewPopup</class-id><body>A RTSVGViewPopup is a RTView popup. As in a complete view generated from each element.</body></comment><class><name>RTCPSequential</name><environment>Roassal2</environment><super>Roassal2.RTColorPalette</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer</category><attributes><package>Roassal2-ColorNormalizer</package></attributes></class><comment><class-id>Roassal2.RTCPSequential</class-id><body>Sequential schemes are suited to ordered data that progress from low to high. Lightness steps dominate the look of these schemes, with light colors for low data values to dark colors for high data values.Check it out by executing:ColorPalette sequential showMore info: http://colorbrewer2.org/learnmore/schemes_full.html---Copyright:All colors, palettes and schemes are from www.ColorBrewer.org by Cynthia A. Brewer, Geography, Pennsylvania State University.</body></comment><class><name>RTMondrian</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentFrame edgeBuilder rootFrame recurrentBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Mondrian</category><attributes><package>Roassal2-Builder-Mondrian</package></attributes></class><comment><class-id>Roassal2.RTMondrian</class-id><body>A RTMondrian describes Mondrian, a domain-specific language that is adapted to represent polymetric views. More info about polymetric views in "Michele Lanza and StÃ©phane Ducasse. Polymetric ViewsâA Lightweight Visual Approach to Reverse Engineering. In Transactions on Software Engineering (TSE) 29(9) p. 782â795, September 2003."RTMondrian maintains a stack of frame, instances of RTMondrianFrameInstance Variables	currentFrame:		&lt;RTMondrianFrame&gt;	edgeBuilder:		&lt;RTEdgeBuilder&gt;	metricNormalizer:		&lt;RTMetricNormalizer&gt;	rootFrame:		&lt;RTMondrianFrame&gt;currentFrame	- xxxxxedgeBuilder	- xxxxxmetricNormalizer	- xxxxxrootFrame	- xxxxx</body></comment><class><name>TRFocusTopRight</name><environment>Roassal2</environment><super>Roassal2.TRFocusing</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>GCircleArc</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>circle startAngle endAngle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Pharo</package></attributes></class><comment><class-id>Roassal2.GCircleArc</class-id><body>I represent a circle arc described by the underlying GCircle and the start and end angle (in radians).</body></comment><class><name>RTClusterLayout</name><environment>Roassal2</environment><super>Roassal2.RTAbstractGraphLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>externalLayer maxLayer maxAbcissa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts</category><attributes><package>Roassal2-Layouts</package></attributes></class><comment><class-id>Roassal2.RTClusterLayout</class-id><body>A ROClusterLayout is xxxxxxxxx.Instance Variables	externalLayer:		&lt;Object&gt;	maxAbcissa:		&lt;Object&gt;	maxLayer:		&lt;Object&gt;externalLayer	- xxxxxmaxAbcissa	- xxxxxmaxLayer	- xxxxx</body></comment><class><name>RTJavascriptVisitor</name><environment>Roassal2</environment><super>Roassal2.RTVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view stream validInteractions exportFixedShapes maxSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-HTML5</category><attributes><package>Roassal2-Exporter-HTML5</package></attributes></class><comment><class-id>Roassal2.RTJavascriptVisitor</class-id><body>I am a class to visit all the nodes of one RTView</body></comment><class><name>TRApplicationModel</name><environment>Roassal2</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>drawing </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Visualworks</package></attributes></class><comment><class-id>Roassal2.TRApplicationModel</class-id><body>Im the application model that allows to Trachel show the TRVisual in a custom window.</body></comment><class><name>RTShorterDistanceAttachPointAndCompositeShape</name><environment>Roassal2</environment><super>Roassal2.RTAbstractShorterDistanceAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>composedShapeSelection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint</category><attributes><package>Roassal2-AttachPoint</package></attributes></class><comment><class-id>Roassal2.RTShorterDistanceAttachPointAndCompositeShape</class-id><body>A RTShorterDistanceAttachPointAndCompositeShape assumes that the elements to be connected to or from have a composite shape</body></comment><class><name>TREllipseShape</name><environment>Roassal2</environment><super>Roassal2.TRAbstractBoxShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Shapes</category><attributes><package>Roassal2-Trachel-Shapes</package></attributes></class><class><name>RTSetEdgeAlpha</name><environment>Roassal2</environment><super>Roassal2.RTInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>highAlpha lowAlpha evaluationBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTSetEdgeAlpha</class-id><body>A RTSetEdgeAlpha is an interaction raises the transparency of the incoming and outgoing edges for a given element when the mouse enter the element.-=-=-=-=	| v es |	v := RTView new.	es := RTEllipse new elementsOn: RTShape withAllSubclasses.	v addAll: es.	RTWeightedCircleLayout new		initialRadius: 200;		on: es.	RTMetricNormalizer new		elements: es;		normalizeSize: #numberOfMethods			min: 10			max: 35			using: #sqrt;		normalizeColor: #numberOfLinesOfCode.	RTEdgeBuilder new		view: v;		objects: RTShape withAllSubclasses;		shape: (RTLine new color: Color blue);		connectFrom: #yourself toAll: #dependentClasses.	es @ RTPopup @ RTSetEdgeAlpha.	^ v-=-=-=-=</body></comment><class><name>TRMorphWidgetFactory</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>RTLegendBuilder</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>items group legendElement offset position isOnDemand textSize gapSize isFixed onDemandText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Legend</category><attributes><package>Roassal2-Builder-Legend</package></attributes></class><comment><class-id>Roassal2.RTLegendBuilder</class-id><body>I am an handy class to build legend in a visualization-=-=-=-=-=-=-=-=b := RTMondrian new.b shape rectangle	width: [ :c | c numberOfVariables * 5 ];	height: #numberOfMethods.b nodes: RTShape withAllSubclasses.b edges connectFrom: #superclass.b layout tree.b build.lb := RTLegendBuilder new.lb view: b view.lb addRectanglePolymetricWidth: 'number of methods' height: 'Line of code'.lb build.b-=-=-=-=-=-=-=-=</body></comment><class><name>RTLineTail</name><environment>Roassal2</environment><super>Roassal2.RTExtremityLineDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations</package></attributes></class><comment><class-id>Roassal2.RTLineTail</class-id><body>A DCRTLineTail is a handler of tail of a line</body></comment><class><name>RTSVGDragAndDrop</name><environment>Roassal2</environment><super>Roassal2.RTSVGInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG</package></attributes></class><comment><class-id>Roassal2.RTSVGDragAndDrop</class-id><body>A RTSVGDragAndDrop is the Drag&amp;Drop of SVG elements.Drag&amp;Drop of edges is NOT supported, but edges connected to dragged elements will move accordingly</body></comment><class><name>RTVerticalDraggableView</name><environment>Roassal2</environment><super>Roassal2.RTConstrainedDraggableView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions</package></attributes></class><comment><class-id>Roassal2.RTVerticalDraggableView</class-id><body>I am an interaction to translate the view as my parent.The difference is that I only allow horizontal translations</body></comment><class><name>RTHistogramSet</name><environment>Roassal2</environment><super>Roassal2.RTAbstractStackedDataSet</super><private>false</private><indexed-type>none</indexed-type><inst-vars>metric nbOfIntervals distribution </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTHistogramSet</class-id><body>The histogram gives you a distribution frequency over the points given. Frequency on y and a collection of values per bars on x.  </body></comment><class><name>RTMultiGrapher</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>graphers legendBuilder yOffset extent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Core</category><attributes><package>Roassal2-Builder-Grapher-Core</package></attributes></class><comment><class-id>Roassal2.RTMultiGrapher</class-id><body>RTMultiGrapher allows for supporting several graphs in the same physical location.Here is an example:-=-=-=|g g1 g2 ds1 ds2|g := RTMultiGrapher new.g1 := RTGrapher new.ds1 := RTData new.ds1 label: 'Red'.ds1 dotShape color: Color red.ds1 connectColor: Color red.ds1 points: ((1 to: 10) collect: [ :each | 20 atRandom ]).ds1 interaction highlightDataset: Color black.g1 add: ds1.g2 := RTGrapher new.ds2 := RTData new.ds2 label: 'Blue'.ds2 dotShape color: Color blue.ds2 connectColor: Color blue.ds2 points: ((1 to: 10) collect: [ :each | 1000 atRandom ]).ds2 interaction highlightDataset: Color purple.g2 add: ds2.g1 axisY	title: 'y 1';	color: Color red.	g2 axisY	title: 'y 2';	color: Color blue.g add: g1.g add: g2.g legend.^ g-=-=-=</body></comment><shared-variable><name>Current</name><environment>Roassal2.TRTheme</environment><private>false</private><constant>false</constant><category>class variables</category><initializer>nil</initializer><attributes><package>Roassal2-Trachel-Theme</package></attributes></shared-variable><shared-variable><name>MonthNames</name><environment>Roassal2.Month</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Roassal2-Pharo</package></attributes></shared-variable><shared-variable><name>LastCamera</name><environment>Roassal2.TRCameraInitializer</environment><private>false</private><constant>false</constant><category>class variables</category><initializer>nil</initializer><attributes><package>Roassal2-Trachel-Core</package></attributes></shared-variable><shared-variable><name>Instance</name><environment>Roassal2.RTNoBehavior</environment><private>false</private><constant>false</constant><category>class variables</category><initializer>nil</initializer><attributes><package>Roassal2-Core</package></attributes></shared-variable><shared-variable><name>Coefficients</name><environment>Roassal2.RTCubeHelix</environment><private>false</private><constant>false</constant><category>class variables</category><initializer>nil</initializer><attributes><package>Roassal2-ColorNormalizer</package></attributes></shared-variable><methods><class-id>Roassal2.RTObject</class-id> <category>converting</category><body package="Roassal2-Core">asGroup	^ RTGroup with: self</body></methods><methods><class-id>Roassal2.RTObject</class-id> <category>deprecation</category><body package="Roassal2-Extentions">deprecated: aString	super deprecated: (Array with: #use with: aString)</body></methods><methods><class-id>Roassal2.RTObject class</class-id> <category>as yet unclassified</category><body package="Roassal2-Core">basicNew	^ super basicNew</body></methods><methods><class-id>Roassal2.RTObject class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">new	| instance |	instance := super new.	instance initialize.	^ instance</body></methods><methods><class-id>Roassal2.RTObject class</class-id> <category>deprecation</category><body package="Roassal2-Extentions">deprecated: aString		super deprecated: (Array with: #use with: aString)</body></methods><methods><class-id>Roassal2.LinearGradient</class-id> <category>accessing</category><body package="Roassal2-Pharo">colorRamp: aSequence	ramp := aSequence</body><body package="Roassal2-Pharo">installPaintOn: aCC	| pat |	pat := CairoGraphics.LinearGradient from: start to: stop."	pat colorRamp: ramp."	aCC sourcePattern: pat.	aCC drawCommand: #fill.</body><body package="Roassal2-Pharo">start: aPoint	start := aPoint</body><body package="Roassal2-Pharo">stop: aPoint	stop := aPoint</body></methods><methods><class-id>Roassal2.LinearGradient</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Roassal2.Color</class-id> <category>converting</category><body package="Roassal2-Pharo">adjustBrightness: brightness	"Adjust the relative brightness of this color. (lowest value is 0.005 so that hue information is not lost)"	^ self class		h: self hue		s: self saturation		v: (self brightness + (brightness min: 1.0) max: 0.005)		alpha: self alpha</body><body package="Roassal2-Pharo">alpha: alfa	^(self class scaledRed: red scaledGreen: green		scaledBlue: blue alpha: alfa)</body><body package="Roassal2-Pharo">asColorValue	^ (CairoGraphics.ColorBlend scaledRed: red scaledGreen: green		scaledBlue: blue) alpha: alpha</body><body package="Roassal2-Pharo">asHTMLColor	^'#' , ((self red * 255 / 16) truncated printStringRadix: 16) , ((self red * 255 rem: 16) truncated printStringRadix: 16) , ((self green * 255 / 16) truncated printStringRadix: 16) , ((self green * 255 rem: 16) truncated printStringRadix: 16) , ((self blue * 255 / 16) truncated printStringRadix: 16) , ((self blue * 255 rem: 16) truncated printStringRadix: 16)</body><body package="Roassal2-Pharo">asHiliteColor	"Answer a new ColorValue for this color as it appears when lit by 	some canonical lightsource with the hilit surface at 45 degrees 	to the light source and the observer."	| newBrightness s h |	self = ColorValue white ifTrue: [^ColorValue gray].	newBrightness := (self brightness * 1.2) min: 1.	self isGray ifTrue: [^ColorValue brightness: newBrightness].	s := self saturation.	h := self hue.	s &lt;= 0.2		ifTrue: [^ColorValue hue: h saturation: 0 brightness: newBrightness].	s &lt;= 0.4		ifTrue: [^ColorValue hue: h saturation: s - 0.2 brightness: newBrightness].	s &lt;= 0.6		ifTrue: [^ColorValue hue: h saturation: s - 0.3 brightness: newBrightness].	s &lt;= 0.9		ifTrue: [^ColorValue hue: h saturation: s - 0.4 brightness: newBrightness].	^Color hue: h saturation: s - 0.5 brightness: newBrightness</body><body package="Roassal2-Pharo">asShadowColor	"Answer a new ColorValue for this color as it appears when hidden 	from some canonical lightsource with the shadowed surface at 	45 degrees to the light source and the observer."	self isGray ifTrue: [^ColorValue brightness: self brightness / 2].	^Color hue: self hue saturation: self saturation brightness: self brightness / 2</body><body package="Roassal2-Pharo">blendWith: aColorValue	"Answer a new ColorValue which is a 50% blend of the receiver and the	supplied ColorValue."	"Simply interpolates in RGB space."	| rv gv bv |	rv := (red + aColorValue scaledRed + 1) // 2.	gv := (green + aColorValue scaledGreen + 1) // 2.	bv := (blue + aColorValue scaledBlue + 1) // 2.	^self class scaledRed: rv scaledGreen: gv scaledBlue: bv</body><body package="Roassal2-Pharo">blendWith: aColorValue weight: wt	"Answer a new ColorValue which is a weighted blend of the receiver and the	supplied ColorValue."	"Simply interpolates in RGB space."	| rv gv bv invWt |	invWt := 1-wt.	rv := ((red * invWt) + ((aColorValue scaledRed)*wt)) rounded.	gv := ((green  * invWt) + ((aColorValue scaledGreen)*wt)) rounded.	bv := ((blue *invWt)+ ((aColorValue scaledBlue)*wt)) rounded.	^self class scaledRed: rv scaledGreen: gv scaledBlue: bv</body><body package="Roassal2-Pharo">darker	"Answer a darker shade of this color."	^ self adjustBrightness: -0.08</body><body package="Roassal2-Pharo">initializeRed: r green: g blue: b alpha: anAlpha 	"Initialize this color's r, g, and b components to the given values in the range [0.0..1.0].  Encoded in a single variable as 3 integers in [0..1023]."	self setRed: r setGreen: g setBlue: b.	^ self alpha: anAlpha</body><body package="Roassal2-Pharo">intializeHue: hue saturation: saturation brightness: brightness alpha: anAlpha 	"Initialize this color to the given hue, saturation, and brightness. See the comment in the instance creation method for details."	| s v hf i f p q t |		red == nil ifFalse: [ self error: 'attempt to modify colors' ].		s := (saturation asFloat max: 0.0) min: 1.0.	v := (brightness asFloat max: 0.0) min: 1.0.	"zero saturation yields gray with the given brightness"	s = 0.0 ifTrue: 		[ ^ self 			initializeRed: v			green: v			blue: v			alpha: anAlpha ].			hf := hue asFloat.	(hf &lt; 0.0 or: [ hf &gt;= 360.0 ]) ifTrue: [ hf := hf - ((hf quo: 360.0) asFloat * 360.0) ].	hf := hf / 60.0.	i := hf asInteger.	"integer part of hue"	f := hf fractionPart.	"fractional part of hue"	p := (1.0 - s) * v.	q := (1.0 - (s * f)) * v.	t := (1.0 - (s * (1.0 - f))) * v.	0 = i ifTrue: 		[ ^ self 			initializeRed: v			green: t			blue: p			alpha: anAlpha ].		1 = i ifTrue: 		[ ^ self 			initializeRed: q			green: v			blue: p			alpha: anAlpha ].	2 = i ifTrue: 		[ ^ self 			initializeRed: p			green: v			blue: t			alpha: anAlpha ]		.	3 = i ifTrue: 		[ ^ self 			initializeRed: p			green: q			blue: v 			alpha: anAlpha ].	4 = i ifTrue: 		[ ^ self 			initializeRed: t			green: p			blue: v			alpha: anAlpha ].	5 = i ifTrue: 		[ ^ self 			initializeRed: v			green: p			blue: q			alpha: anAlpha ].	self error: 'implementation error'</body></methods><methods><class-id>Roassal2.Color</class-id> <category>testing</category><body package="Roassal2-Pharo">canPaintMedium: aGraphicsMedium	^aGraphicsMedium paintBasis = ColorValue</body><body package="Roassal2-Pharo">closeTo: aColor	^ (self red closeTo: aColor red range: 0.01) and: [ 		(self green closeTo: aColor green range: 0.01) and: [		(self blue closeTo: aColor blue range: 0.01)] ]</body><body package="Roassal2-Pharo">isColor	^ true</body><body package="Roassal2-Pharo">isGray	" Answer whether this color is a gray tone. "	^red = green and: [green = blue]</body><body package="Roassal2-Pharo">isTranslucent	^ self alpha &lt; 255</body><body package="Roassal2-Pharo">isTransparent	^ self alpha = 0</body></methods><methods><class-id>Roassal2.Color</class-id> <category>accessing</category><body package="Roassal2-Pharo">alpha	^ alpha</body><body package="Roassal2-Pharo">blue	^ ColorValue.ScaleValue * blue</body><body package="Roassal2-Pharo">brightness	"Answer the value component of the color in HSV space, a number between 0 and 1."	^ ColorValue.ScaleValue * ((red max: green) max: blue)</body><body package="Roassal2-Pharo">cyan	"Answer the cyan component of the color in CMY space."	^ColorValue.ScaleValue * (ColorValue.MaxValue - red)</body><body package="Roassal2-Pharo">distanceFrom: aColorValue	" Answer a number representing the perceptual color distance from aColorValue.	Note that we do not define the maximum value of the result. "	^(self distanceSquaredFrom: aColorValue) sqrt</body><body package="Roassal2-Pharo">distanceSquaredFrom: aColorValue	"Answer the square of the perceptual color distance from aColorValue."	"For now, perform the calculation in RGB space.  For more	accuracy, the calculation should use CIE Lab or CIE LUV*	space."	| rdiff gdiff bdiff |	rdiff := (red - aColorValue scaledRed).	gdiff := (green - aColorValue scaledGreen).	bdiff := (blue - aColorValue scaledBlue).		^(rdiff * rdiff) + (gdiff * gdiff) + (bdiff * bdiff)</body><body package="Roassal2-Pharo">distanceSquaredFrom: aColorValue ifLessThan: dist	"If the square of the perceptual color distance from aColorValue	is less than dist, answer the square of the distance,	otherwise answer nil."	"For now, perform the calculation in RGB space.  For more	accuracy, the calculation should use CIE Lab or CIE LUV*	space."	| rdiff gdiff bdiff diff |	rdiff := (red - aColorValue scaledRed).	diff := (rdiff * rdiff).	diff &gt;= dist ifTrue: [^nil].	gdiff := (green - aColorValue scaledGreen).	diff := diff + (gdiff * gdiff).	diff &gt;= dist ifTrue: [^nil].	bdiff := (blue - aColorValue scaledBlue).	diff := diff + (bdiff * bdiff).	diff &gt;= dist ifTrue: [^nil].	^diff</body><body package="Roassal2-Pharo">green	"Answer the green component of the color in RGB space."	^ ColorValue.ScaleValue * green</body><body package="Roassal2-Pharo">hue	"Answer the hue component of the color in HSV space, a number between 0 and 1."	| bright diff hue |	bright := (red max: green) max: blue.	diff := bright - ((red min: green) min: blue).	^diff = 0		ifTrue: [0]		ifFalse:			[diff := diff asFloat.			hue := bright = red				ifTrue: [(green - blue) / diff]				ifFalse:					[bright = green						ifTrue: [(blue - red) / diff + 2]						ifFalse: [(red - green) / diff + 4]].			hue &lt; 0 ifTrue: [hue := hue + 6].			hue / 6]</body><body package="Roassal2-Pharo">luminance	"Answer the Y component of the YIQ representation of the color.	The transformation assumes NTSC RGB primaries.  It is adapted from	Hall, Illumination and Color in Computer Generated Imagery (corrects	an error in the blue scaling factor)."	^ColorValue.LuminanceScaleValue * self scaledLuminance</body><body package="Roassal2-Pharo">luminanceScalingValue	"Answer the scaling value for luminance."	^ColorValue.MaxLuminanceValue</body><body package="Roassal2-Pharo">magenta	"Answer the magenta component of the color in CMY space."	^ColorValue.ScaleValue * (ColorValue.MaxValue - green)</body><body package="Roassal2-Pharo">red	"Answer the red component of the color in RGB space."	^ColorValue.ScaleValue * red</body><body package="Roassal2-Pharo">saturation	"Answer the saturation component of the color in HSV space, a number between 0 and 1."	| bright diff |	bright := (red max: green) max: blue.	diff := bright - ((red min: green) min: blue).	^diff = 0		ifTrue: [0]		ifFalse: [diff asFloat / bright]</body><body package="Roassal2-Pharo">scaledBlue	"Answer the scaled (integer) blue intensity."	^blue</body><body package="Roassal2-Pharo">scaledGreen	"Answer the scaled (integer) green value."	^green</body><body package="Roassal2-Pharo">scaledLuminance	" Answer the Y component of the YIQ representation of the color.	The transformation assumes NTSC RGB primaries.  It is adapted from	Hall, Illumination and Color in Computer Generated Imagery (corrects	an error in the blue scaling factor).  The result is scaled (multiplied)	by the value of MaxLuminance. "	^(299 * red) + (587 * green) + (114 * blue)</body><body package="Roassal2-Pharo">scaledRed	"Answer the scaled (integer) red intensity."	^red</body><body package="Roassal2-Pharo">scalingValue	"Answer the scaling value used to internally represent RGB components."	^ColorValue.MaxValue</body><body package="Roassal2-Pharo">yellow	"Answer the yellow component of the color in CMY space."	^ColorValue.ScaleValue * (ColorValue.MaxValue - blue)</body></methods><methods><class-id>Roassal2.Color</class-id> <category>installing</category><body package="Roassal2-Pharo">crSource: cr	cr		sourceRed: self red		green: self green		blue: self blue		alpha: self alpha</body><body package="Roassal2-Pharo">installOn: aGraphicsContext	"Install a device paint representing the receiver on aGraphicsContext."	aGraphicsContext setPaintToColor: self</body><body package="Roassal2-Pharo">installPaintOn:  aCC	aCC sourceColorValue: self alpha: self alpha.	aCC drawCommand: #fill.</body></methods><methods><class-id>Roassal2.Color</class-id> <category>private</category><body package="Roassal2-Pharo">literalArrayEncoding	"Return a literal suitable for reconstituting the receiver."	| class instanceSize encodedArray constantName |	class := self class.	(constantName := self class constantNameFor: self) == nil ifFalse:		[^Array with: class fullyQualifiedReference with: constantName].	instanceSize := class instSize.	encodedArray := Array new: instanceSize + 1.	encodedArray at: 1 put: class fullyQualifiedReference.	1 to: instanceSize do: 		[:index | 		encodedArray 			at: index + 1 			put: (self instVarAt: index) literalArrayEncoding].	^encodedArray</body><body package="Roassal2-Pharo">setRed: r setGreen: g setBlue: b	self setRed:r setGreen: g setBlue: b setAlpha: 1.</body><body package="Roassal2-Pharo">setRed: r setGreen: g setBlue: b setAlpha: a	red := r.  green := g.  blue := b. alpha :=  a</body></methods><methods><class-id>Roassal2.Color</class-id> <category>comparing</category><body package="Roassal2-Pharo">= aColor		^ aColor isColor and: [ aColor scaledRed = red 		and: [ aColor scaledGreen = green 			and: [aColor scaledBlue = blue and: [ aColor alpha = alpha ] ] ] ]</body><body package="Roassal2-Pharo">diff: theOther	"Returns a number between 0.0 and 1.0"	^ ((self red - theOther red) abs		+ (self green - theOther green) abs		+ (self blue - theOther blue) abs)		/ 3.0 / 1023</body><body package="Roassal2-Pharo">hash	"Answer a SmallInteger that is equal to the hash value of 	any object that is equal to (=) the receiver. 	When two objects are not =, their hash values may or may not be the same.	The hash value may change based on the receiver's contents."	^red hash + green hash + blue hash</body></methods><methods><class-id>Roassal2.Color</class-id> <category>printing</category><body package="Roassal2-Pharo">printHtmlString	"answer a string whose characters are the html representation  	of the receiver"	^ ((self red * 255) asInteger printStringBase: 16 length: 2 padded: true)	, ((self green * 255) asInteger printStringBase: 16 length: 2 padded: true)	, ((self blue * 255) asInteger printStringBase: 16 length: 2 padded: true)</body><body package="Roassal2-Pharo">printOn: aStream	| const |	(const := self class constantNameFor: self) isNil ifFalse:			[aStream				print: self class; space;				nextPutAll: const asString.			^self].	aStream nextPut: $(; print: self class.	(red = green and: [red = blue])		ifTrue:	[aStream nextPutAll: ' brightness: '; store: self blue]		ifFalse:	[aStream					nextPutAll: ' red: '; store: self red;					nextPutAll: ' green: '; store: self green;					nextPutAll: ' blue: '; store: self blue].	aStream nextPut: $)</body><body package="Roassal2-Pharo">storeInLiteralArrayFormatOn: aStream 	"ColorValue someInstance storeInLiteralArrayFormatOn: Transcript. Transcript flush"	aStream store: (Array 		with: self class fullyQualifiedReference		with: #scaledRed:scaledGreen:scaledBlue:		with: (Array 			with: self scaledRed			with: self scaledGreen			with: self scaledBlue)).	aStream space</body><body package="Roassal2-Pharo">storeOn: aStream	self class constantNames do:		[:const |		(self class perform: const) = self ifTrue:			[aStream				store: self class; space;				nextPutAll: const asString.			^self]].	aStream nextPut: $(;		store: self class;		nextPutAll: ' scaledRed: ';		store: self scaledRed;		nextPutAll: ' scaledGreen: ';		store: self scaledGreen;		nextPutAll: ' scaledBlue: ';		store: self scaledBlue;		nextPut: $)</body></methods><methods><class-id>Roassal2.Color</class-id> <category>roassal2</category><body package="Roassal2-Pharo">asHexString	^ self asHTMLColor</body><body package="Roassal2-Pharo">trans	"Make the color transparent"	^ self alpha: 0.4</body></methods><methods><class-id>Roassal2.Color</class-id> <category>vw8.2 release support</category><body package="Roassal2-Visualworks">muchDarker	^self blendWith: ColorValue black weight: 0.5</body></methods><methods><class-id>Roassal2.Color class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">brightness: b	"Answer a ColorValue specified by a gray intensity (between 0 and 1)."	| sb cv |	sb := (b * ColorValue.MaxValue) rounded.	cv := self new setRed: sb setGreen: sb setBlue: sb.	^(sb &gt;= 0 and: [sb &lt;= ColorValue.MaxValue])		ifTrue: [cv]		ifFalse: [ self errorSignal raiseRequestWith: cv ].</body><body package="Roassal2-Pharo">colorFrom: parm	"Return an instantiated color from parm.  If parm is already a color, return it, else return the result of my performing it if it's a symbol or, if it is a list, it can either be an array of three numbers, which will be interpreted as RGB values, or a list of symbols, the first of which is sent to me and then the others of which are in turn sent to the prior result, thus allowing entries of the form #(blue darker).  Else just return the thing"	| aColor firstParm |	(parm isKindOf: Color) ifTrue: [^ parm].	(parm isSymbol) ifTrue: [^ self perform: parm].	(parm isString) ifTrue: [^ self fromString: parm].	((parm isKindOf: SequenceableCollection) and: [parm size &gt; 0])		ifTrue:			[firstParm := parm first.			(firstParm isKindOf: Number) ifTrue:				[^ self fromRgbTriplet: parm].			aColor := self colorFrom: firstParm.			parm doWithIndex:				[:sym :ind | ind &gt; 1 ifTrue:					[aColor := aColor perform: sym]].			^ aColor].	^ parm"Color colorFrom: #(blue darker)Color colorFrom: Color blue darkerColor colorFrom: #blueColor colorFrom: #(0.0 0.0 1.0)"</body><body package="Roassal2-Pharo">cyan: cyan magenta: magenta yellow: yellow	"Answer a ColorValue with the supplied CMY intensity (between 0 and 1)."	^self red: 1 - cyan green: 1 - magenta blue: 1 - yellow</body><body package="Roassal2-Pharo">fromHexString: aColorHex	| green red blue |	red := (Integer readFrom: (aColorHex first: 2) readStream radix: 16) / 255.	green := (Integer readFrom: (aColorHex copyFrom: 3 to: 4) readStream radix: 16) / 255.	blue := (Integer readFrom: (aColorHex last: 2)  readStream radix: 16) / 255.	^self r: red g: green b: blue</body><body package="Roassal2-Pharo">fromRgb256Triplet: triplet	^ self red: triplet first green: triplet second blue: triplet third range: 256</body><body package="Roassal2-Pharo">fromRgbTriplet: list		^ self		r: list first		g: list second		b: list last</body><body package="Roassal2-Pharo">fromString: aString	"for HTML color spec: #FFCCAA or white/black"	"Color fromString: '#FFCCAA'.	 Color fromString: 'orange'"	| aColorHex |	aString isEmptyOrNil		ifTrue: [ ^ self white ].	aColorHex := aString first = $#		ifTrue: [ aString allButFirst ]		ifFalse: [ aString ].	"Try to match aColorHex with known named colors, case insensitive."	^ self registeredColorNames		detect: [ :each | each sameAs: aColorHex ]		ifFound: [ :namedColor | self constantLabelForName: namedColor ]		ifNone: [ 			(aColorHex size = 6 and: [ aColorHex allSatisfy: [ :character | '0123456789ABCDEFabcdef' includes: character ] ])				ifTrue: [ self fromHexString: aColorHex ]				ifFalse: [ self white ] ]</body><body package="Roassal2-Pharo">gray: brightness	"Return a gray shade with the given brightness in the range [0.0..1.0]."	^ self r: brightness g: brightness b: brightness</body><body package="Roassal2-Pharo">grayScale256: intensity	"between 0 and 256"	| i |	i := intensity asFloat / 256.	^ self red:  i green: i blue: i</body><body package="Roassal2-Pharo">h: hue s: saturation v: brightness alpha: alpha	^ self basicNew		intializeHue: hue saturation: saturation brightness: brightness alpha: alpha</body><body package="Roassal2-Pharo">hex: anInteger	"AnInteger doesn't really have to be in hex, but it commonly is. Example use:	Color(Value|Blend) hex: 16rFFFF00 --&gt; ColorValue orange."	^self		red: ((anInteger bitShift: -16) bitAnd: 16rFF) asFloat / 255.0		green: ((anInteger bitShift: -8) bitAnd: 16rFF) asFloat / 255.0		blue: (anInteger bitAnd: 16rFF) asFloat / 255.0</body><body package="Roassal2-Pharo">hex: anInteger alpha: alpha	^(self hex: anInteger) alpha: alpha</body><body package="Roassal2-Pharo">hue: h saturation: s brightness: b	"Answer a new ColorValue with the supplied hue, saturation &amp; brightness	(a.k.a. value, hence the HSV color space); which are numbers between 0 and 1."	"Note that hue is an angular measure, but is not specified in radians or degrees.	Pure red is 0, with each primary a third of the way around the unit wheel;	e.g. blue is 1/3, green 2/3.  Complementary hues are 0.5 of the way around, so	red's complement, cyan, is at 1/2."	"Conversion algorithm taken from Rodgers 'Procedural Elements for Computer	Graphics'."	| i f m n k |	s = 0 ifTrue: [^self brightness: b].	i := (h * 6) truncated.	f := h * 6 - i.	m := b * (1.0 - s).	n := b * (1.0 - (s * f)).	k := b * (1.0 - (s * (1.0 - f))).	i = 1 ifTrue: [^self red: n green: b blue: m].	i = 2 ifTrue: [^self red: m green: b blue: k].	i = 3 ifTrue: [^self red: m green: n blue: b].	i = 4 ifTrue: [^self red: k green: m blue: b].	i = 5 ifTrue: [^self red: b green: m blue: n].	^self red: b green: k blue: m</body><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body><body package="Roassal2-Pharo">r: r g: g b: b	^ self red: r green: g blue: b</body><body package="Roassal2-Pharo">r: r g: g b: b alpha: alpha	^ (self red: r green: g blue: b) alpha: alpha</body><body package="Roassal2-Pharo"> r: r g: g b: b range: aDivisor	^ self red: r green: g blue: b range: aDivisor</body><body package="Roassal2-Pharo">random	| r |	r := Random new.		^ self r: (r next) g: (r next) b: (r next)</body><body package="Roassal2-Pharo">random: aRandomObject	"	self random: Random new	"	| r |	r := aRandomObject.	^ self r: (r next) g: (r next) b: (r next)</body><body package="Roassal2-Pharo">red: r green: g blue: b 	"Answer a ColorValue with the supplied RGB intensity (between 0 and 1)."	| cv sr sg sb |	cv := self		scaledRed: (sr := (r * ColorValue.MaxValue) rounded)		scaledGreen: (sg := (g * ColorValue.MaxValue) rounded)		scaledBlue: (sb := (b * ColorValue.MaxValue) rounded).	^(sr &gt;= 0 		and: [sr &lt;= ColorValue.MaxValue 			and: [sg &gt;= 0 				and: [sg &lt;= ColorValue.MaxValue 					and: [sb &gt;= 0 and: [sb &lt;= ColorValue.MaxValue]]]]])		ifTrue: [cv]		ifFalse: [ self errorSignal raiseRequestWith: cv ].</body><body package="Roassal2-Pharo">red: r green: g blue: b range: aDivisor	"Answer a ColorValue with the supplied RGB intensity as a number (between 0 and 1) created by taking the color and dividing by the range."	| cv sr sg sb |	cv := self		scaledRed: (sr := ((r / aDivisor) * ColorValue.MaxValue) rounded)		scaledGreen: (sg := ((g / aDivisor) * ColorValue.MaxValue) rounded)		scaledBlue: (sb := ((b / aDivisor) * ColorValue.MaxValue) rounded).	^(sr &gt;= 0 		and: [sr &lt;= ColorValue.MaxValue 			and: [sg &gt;= 0 				and: [sg &lt;= ColorValue.MaxValue 					and: [sb &gt;= 0 and: [sb &lt;= ColorValue.MaxValue]]]]])		ifTrue: [cv]		ifFalse: [ self errorSignal raiseRequestWith: cv ].</body><body package="Roassal2-Pharo">scaledRed: r scaledGreen: g scaledBlue: b	"Answer a ColorValue with the supplied RGB intensity (between 0 and ColorValue scalingValue)."	^self new setRed: r setGreen: g setBlue: b</body><body package="Roassal2-Pharo">scaledRed: r scaledGreen: g scaledBlue: b alpha: a	^self new setRed: r setGreen: g setBlue: b setAlpha: a</body></methods><methods><class-id>Roassal2.Color class</class-id> <category>roassal2</category><body package="Roassal2-Pharo">distinctTenStrongColors	"This is a list of 10 light colors that can be distinguished b	the typical human eye even when seen together in the same picture.	They complement the distinctTenLightColors.	They are described in the Show Me the Numbers book by Stephen Few"	^ (OrderedCollection new)			add: Color red;			add: Color blue;			add: Color orange;			add: Color cyan;			add: Color green;			add: Color pink;			add: Color brown;			add: Color purple;			add: Color yellow;			add: Color gray;			yourself</body></methods><methods><class-id>Roassal2.Color class</class-id> <category>constants</category><body package="Roassal2-Pharo">black	^ self colorsNamesAt: #black</body><body package="Roassal2-Pharo">blue	^ self colorsNamesAt: #blue</body><body package="Roassal2-Pharo">brown	^ self colorsNamesAt: #brown</body><body package="Roassal2-Pharo">chartreuse	^ self colorsNamesAt: #chartreuse</body><body package="Roassal2-Pharo">colorsNamesAt: const	colorNames ifNil: [ self initializeColors ].		^ colorNames at: const ifAbsent: [ const ]</body><body package="Roassal2-Pharo">constantNameFor:  instance	" If instance is a constant that can be	obtained by sending a known constant	message to this class, answer the message	selector, otherwise answer nil. "	colorNames keys do: [:k | (colorNames at: k) = instance		ifTrue: [ ^ k] ].	^ nil.</body><body package="Roassal2-Pharo">cyan	^ self colorsNamesAt: #cyan</body><body package="Roassal2-Pharo">darkCyan	^ self colorsNamesAt: #darkCyan</body><body package="Roassal2-Pharo">darkGray	^ self colorsNamesAt: #darkGray</body><body package="Roassal2-Pharo">darkGreen	^ self colorsNamesAt: #darkGreen</body><body package="Roassal2-Pharo">darkMagenta	^ self colorsNamesAt: #darkMagenta</body><body package="Roassal2-Pharo">darkRed	^ self colorsNamesAt: #darkRed</body><body package="Roassal2-Pharo">gray	^ self colorsNamesAt: #gray</body><body package="Roassal2-Pharo">green	^ self colorsNamesAt: #green</body><body package="Roassal2-Pharo">lightBlue	^ self colorsNamesAt: #lightBlue</body><body package="Roassal2-Pharo">lightCyan	^ self colorsNamesAt: #lightCyan</body><body package="Roassal2-Pharo">lightGray	^ self colorsNamesAt: #lightGray</body><body package="Roassal2-Pharo">lightGreen	^ self colorsNamesAt: #lightGreen</body><body package="Roassal2-Pharo">lightRed	^ self colorsNamesAt: #lightRed</body><body package="Roassal2-Pharo">lightYellow	^ self colorsNamesAt: #lightYellow</body><body package="Roassal2-Pharo">magenta	^ self colorsNamesAt: #magenta</body><body package="Roassal2-Pharo">navy	^ self colorsNamesAt: #navy</body><body package="Roassal2-Pharo">olive	^ self colorsNamesAt: #olive</body><body package="Roassal2-Pharo">orange	^ self colorsNamesAt: #orange</body><body package="Roassal2-Pharo">orchid	^ self colorsNamesAt: #orchid</body><body package="Roassal2-Pharo">paleGreen	^ self colorsNamesAt: #paleGreen</body><body package="Roassal2-Pharo">pink	^ self colorsNamesAt: #pink</body><body package="Roassal2-Pharo">purple	^ self colorsNamesAt: #purple</body><body package="Roassal2-Pharo">red	^ self colorsNamesAt: #red</body><body package="Roassal2-Pharo">royalBlue	^ self colorsNamesAt: #royalBlue</body><body package="Roassal2-Pharo">salmon	^ self colorsNamesAt: #salmon</body><body package="Roassal2-Pharo">springGreen	^ self colorsNamesAt: #springGreen</body><body package="Roassal2-Pharo">transparent	^ self colorsNamesAt: #transparent</body><body package="Roassal2-Pharo">veryDarkGray	^ self colorsNamesAt: #veryDarkGray</body><body package="Roassal2-Pharo">veryLightGray	^ self colorsNamesAt: #veryLightGray</body><body package="Roassal2-Pharo">veryVeryLightGray	^ self colorsNamesAt: #veryVeryLightGray</body><body package="Roassal2-Pharo">white	^ self colorsNamesAt: #white</body><body package="Roassal2-Pharo">yellow	^ self colorsNamesAt: #yellow</body></methods><methods><class-id>Roassal2.Color class</class-id> <category>class initialization</category><body package="Roassal2-Pharo">initialize	super initialize.	self initializeColors</body><body package="Roassal2-Pharo">initializeColors	colorNames := Dictionary new.	colorNames 		at: #black put: (self brightness: 0);		at: #veryDarkGray put: (self brightness: 1/4);		at: #darkGray put: (self brightness: 3/8);		at: #gray put: (self brightness: 1/2);		at: #lightGray put: (self brightness: 2/3);		at: #veryLightGray put: (self brightness: 5/6);		at: #white put: (self brightness: 1);				at: #red put: (self red: 1 green: 0 blue: 0);		at: #green put: (self red: 0 green: 1 blue: 0);		at: #blue put: (self red: 0 green: 0 blue: 1);				at: #yellow put: (self red: 1 green: 1 blue: 0);		at: #cyan put: (self red: 0 green: 1 blue: 1);		at: #magenta put: (self red: 1 green: 0 blue: 1);				at: #navy put: (self red: 0 green: 0 blue: 1/2);		at: #darkRed put: (self red: 1/2 green: 0 blue: 0);		at: #darkGreen put: (self red: 0 green: 1/2 blue: 0);				at: #springGreen put: (self red: 0 green: 1 blue: 1/2);		at: #orange put: (self red: 1 green: 1/2 blue: 0);		at: #chartreuse put: (self red: 1/2 green: 1 blue: 0);				at: #salmon put: (self red: 1 green: 1/2 blue: 1/2);		at: #royalBlue put: (self red: 1/2 green: 1/2 blue: 1);		at: #paleGreen put: (self red: 1/2 green: 1 blue: 1/2);				at: #orchid put: (self red: 1 green: 1/2 blue: 1);		at: #lightYellow put: (self red: 1 green: 1 blue: 1/2);		at: #lightCyan put: (self red: 1/2 green: 1 blue: 1);		at: #darkCyan put: (self red: 0 green: 1/2 blue: 1/2);		at: #darkMagenta put: (self red: 1/2 green: 0 blue: 1/2);		at: #olive put: (self red: 1/2 green: 1/2 blue: 0);	"These values may alias on displays with few hue levels, but they're handy."		at: #brown put: (self red: 1/2 green: 1/4 blue: 1/4);		at: #pink put: (self red: 1 green: 3/4 blue: 3/4);		at: #purple put: (self red: 5/8 green: 1/8 blue: 7/8);				at: #lightBlue put: (self red: 0.7996089931573802 green: 1  blue: 1);		at: #lightGreen put: (self red: 0.7996089931573802 green: 1  blue: 0.6001955034213099);		at: #lightRed put: (self red: 1 green: 0.7996089931573802  blue: 0.7996089931573802);		at: #transparent put: ((self red: 0 green: 0 blue: 0) alpha: 0);		at: #veryVeryLightGray put: (self red: 0.8748778103616813 green:  0.8748778103616813  blue: 0.8748778103616813)</body></methods><methods><class-id>Roassal2.Color class</class-id> <category>accessing</category><body package="Roassal2-Pharo">registeredColorNames	^ colorNames keys collect: #asString</body></methods><methods><class-id>Roassal2.RTSVGInteraction</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">contained	^contained</body><body package="Roassal2-Exporter-SVG">external	^external</body><body package="Roassal2-Exporter-SVG">target	^ target</body><body package="Roassal2-Exporter-SVG">target: anObject	target := anObject</body><body package="Roassal2-Exporter-SVG">type	^ type</body><body package="Roassal2-Exporter-SVG">type: anObject	type := anObject</body></methods><methods><class-id>Roassal2.RTSVGInteraction</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addEventHandlers: aStream id: aString element: aRTElement center: aPoint	self subclassResponsibility</body><body package="Roassal2-Exporter-SVG">addFunctions: aStream	self subclassResponsibility</body><body package="Roassal2-Exporter-SVG">addGlobalHandlers: aStream	self subclassResponsibility</body><body package="Roassal2-Exporter-SVG">targetColorAttribute	self target trachelShape class = TRArcShape ifTrue: [ ^'fill' ].	self target trachelShape class = TRBezierShape ifTrue: [ ^'stroke' ].	self target trachelShape class = TRBoxShape ifTrue: [ ^'fill' ].	self target trachelShape class = TREllipseShape ifTrue: [ ^'fill' ].	self target trachelShape class = TRLabelShape ifTrue: [ ^'fill' ].	self target trachelShape class = TRLineShape ifTrue: [ ^'stroke' ].	self target trachelShape class = TRRotatedLabelShape ifTrue: [ ^'fill' ].	self target trachelShape class = TRSVGPath ifTrue: [ ^'fill' ].	self error: 'Should not be here'</body><body package="Roassal2-Exporter-SVG">targetNameAttribute	self target trachelShape class = TRArcShape ifTrue: [ ^'arc' ].	self target trachelShape class = TRBezierShape ifTrue: [ ^'bezier' ].	self target trachelShape class = TRBoxShape ifTrue: [ ^'rect' ].	self target trachelShape class = TREllipseShape ifTrue: [ ^'ellipse' ].	self target trachelShape class = TRLabelShape ifTrue: [ ^'text' ].	self target trachelShape class = TRLineShape ifTrue: [ ^'line' ].	self target trachelShape class = TRRotatedLabelShape ifTrue: [ ^'text' ].	self target trachelShape class = TRSVGPath ifTrue: [ ^'p' ].</body></methods><methods><class-id>Roassal2.RTSVGInteraction</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	self type: 'interaction'</body></methods><methods><class-id>Roassal2.RTSVGInteraction class</class-id> <category>as yet unclassified</category><body package="Roassal2-Exporter-SVG">on: anExporter targets: aRTShape	| generator |	generator := [ :e |  self new target: e;  yourself ].	self on: anExporter targets: aRTShape generator: generator</body><body package="Roassal2-Exporter-SVG">on: anExporter targets: aRTShape generator: generator	| interaction |	anExporter view elements		do: [ :e | 			e trachelShape class = aRTShape				ifTrue: [ 					interaction := generator value: e.					anExporter interactions at: e ifAbsent: [ anExporter interactions at: e put: OrderedCollection new ].					(anExporter interactions at: e) add: interaction ] ]</body></methods><methods><class-id>Roassal2.RTSVGPopup</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">bounds	^ bounds</body><body package="Roassal2-Exporter-SVG">bounds: anObject	bounds := anObject</body><body package="Roassal2-Exporter-SVG">click	^ click</body><body package="Roassal2-Exporter-SVG">click: anObject	click := anObject</body><body package="Roassal2-Exporter-SVG">color	^ color</body><body package="Roassal2-Exporter-SVG">color: anObject	color := anObject</body><body package="Roassal2-Exporter-SVG">position	^ position</body><body package="Roassal2-Exporter-SVG">position: anObject	position := anObject</body><body package="Roassal2-Exporter-SVG">xBound	^1</body><body package="Roassal2-Exporter-SVG">yBound	^1</body></methods><methods><class-id>Roassal2.RTSVGPopup</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addEventHandlers: aStream id: aString element: aRTElement  center: aNumber	self subclassResponsibility</body><body package="Roassal2-Exporter-SVG">addFunctions: aStream	"do nothing"</body><body package="Roassal2-Exporter-SVG">addGlobalHandlers: aStream	"do nothing"</body><body package="Roassal2-Exporter-SVG">mouseAction: aString	^click 		ifTrue: ["Still does not work"	'    &lt;set id="',aString,'s" attributeName="visibility" from="visible" to="hidden" begin="',aString,'.click"/&gt;  '			  ]		ifFalse: [  	'    &lt;set attributeName="visibility" from="hidden" to="visible" begin="',aString,'.mouseover" end="',aString,'.mouseout"/&gt;  ']</body></methods><methods><class-id>Roassal2.RTSVGPopup</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	click := false.	color := Color black.	contained := false.	external := true.	self type: 'popup'.	position := [ :element | element trachelShape position ].</body></methods><methods><class-id>Roassal2.RTSVGPopup class</class-id> <category>as yet unclassified</category><body package="Roassal2-Exporter-SVG">on: anExporter color: aColor targets: aRTShape	| generator |	generator := [ :e |  self new target: e; color: aColor; yourself ].	self on: anExporter targets: aRTShape generator: generator</body><body package="Roassal2-Exporter-SVG">onClick: anExporter color: aColor targets: aRTShape	| generator |	generator := [ :e |  self new target: e; color: aColor; click: true; yourself ].	self on: anExporter targets: aRTShape generator: generator</body><body package="Roassal2-Exporter-SVG">onClick: anExporter targets: aRTShape	| generator |	generator := [ :e |  self new target: e; click: true; yourself ].	self on: anExporter targets: aRTShape generator: generator</body></methods><methods><class-id>Roassal2.RTSVGGroupPopup</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">group	^ group</body><body package="Roassal2-Exporter-SVG">group: anObject	group := anObject</body></methods><methods><class-id>Roassal2.RTSVGGroupPopup</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addEventHandlers: aStream id: aString element: aRTElement center: aNumber	| visitor myGroup |	myGroup := self group.	aStream nextPutAll: '&lt;g visibility="hidden" id="';		nextPutAll: aString;		nextPutAll: '"&gt;';		nextPutAll: String cr.	visitor := RTSVGVisitor new stream: aStream; center: aNumber; yourself.	visitor canvas: myGroup encompassingRectangle.	visitor visitGroup: myGroup.	aStream 		nextPutAll:  '&lt;/g&gt;'</body></methods><methods><class-id>Roassal2.RTSVGGroupPopup</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	group := [ :m | RTGroup new add: ((RTElement on: m) + (RTBox new color: Color blue; yourself)); yourself]</body></methods><methods><class-id>Roassal2.RTSVGGroupPopup class</class-id> <category>as yet unclassified</category><body package="Roassal2-Exporter-SVG">on: anExporter targets: aRTShape group: aGroupBlock	| generator |	generator := [ :e |  self new target: e; group: aGroupBlock;  yourself ].	self on: anExporter targets: aRTShape generator: generator</body></methods><methods><class-id>Roassal2.RTLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">applyOn: elements	"Return quickly if there is nothing to do"	elements isEmpty ifTrue: [ ^ self ].	self executeOnElements: elements</body><body package="Roassal2-Layouts">doExecute: elements	"Performs the layout"	self subclassResponsibility</body><body package="Roassal2-Layouts">doInitialize: elements	"Method executed before beginning the layout. Useful when the graph to be ordered need to be prepared"	"self announce: (ROLayoutBegin new elements: elements)."</body><body package="Roassal2-Layouts">doPost: elements	"Method executed after performing the layout"</body><body package="Roassal2-Layouts">on: elements	self applyOn: elements</body><body package="Roassal2-Layouts">on: elements edges: edges	self applyOn: elements</body><body package="Roassal2-Layouts">userDefinedEdges: edges	"Do nothing"</body></methods><methods><class-id>Roassal2.RTLayout</class-id> <category>utils</category><body package="Roassal2-Layouts">fatherOf: aNode	^ aNode attributes at: #father ifAbsent: [ nil ]</body><body package="Roassal2-Layouts">fatherOf: aNode put: aValue	aNode attributes at: #father put: aValue</body><body package="Roassal2-Layouts">layerOf: aNode	^ aNode attributes at: #layout</body><body package="Roassal2-Layouts">layerOf: aNode put: aValue	aNode attributes at: #layout put: aValue</body><body package="Roassal2-Layouts">leftContourOf: aNode	^ aNode attributes at: #leftContour ifAbsent: [ ^ nil ]</body><body package="Roassal2-Layouts">leftContourOf: aNode put: aValue	aNode attributes at: #leftContour put: aValue</body><body package="Roassal2-Layouts">modOf: aNode	^ aNode attributes at: #mod ifAbsent: [ ^ 0 ]</body><body package="Roassal2-Layouts">modOf: aNode put: aFloat	aNode attributes at: #mod put: aFloat</body><body package="Roassal2-Layouts">pointerOf: aNode	^ aNode attributes at: #pointer ifAbsent: [ ^ nil ]</body><body package="Roassal2-Layouts">pointerOf: aNode put: aValue	^ aNode attributes at: #pointer put: aValue</body><body package="Roassal2-Layouts">rOf: aNode 	^ aNode attributes at: #r ifAbsent: [ 0 ]</body><body package="Roassal2-Layouts">rOf: aNode put: aValue	^ aNode attributes at: #r put: aValue</body><body package="Roassal2-Layouts">rightContourOf: aNode	^ aNode attributes at: #rightContour ifAbsent: [ ^ nil ]</body><body package="Roassal2-Layouts">rightContourOf: aNode put: aValue	aNode attributes at: #rightContour put: aValue</body><body package="Roassal2-Layouts">thetaOf: aNode	^ aNode attributes at: #theta ifAbsent: [ ^ 0 ]</body><body package="Roassal2-Layouts">thetaOf: aNode put: aValue	^ aNode attributes at: #theta put: aValue</body><body package="Roassal2-Layouts">xOf: aNode 	^ aNode attributes at: #x ifAbsent: [ 0 ]</body><body package="Roassal2-Layouts">xOf: aNode put: aValue	aNode attributes at: #x put: aValue</body></methods><methods><class-id>Roassal2.RTLayout</class-id> <category>testing</category><body package="Roassal2-Layouts">isEdgeDrivenLayout	^ false</body></methods><methods><class-id>Roassal2.RTLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize	super initialize.	translator := RTLayoutTranslator default.</body></methods><methods><class-id>Roassal2.RTLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">executeOnElements: elements 	"Execute the layout, myself, on the elements"			self doInitialize: elements.	self doExecute: elements asOrderedCollection.	self doPost: elements.</body><body package="Roassal2-Layouts">translator	^ translator</body><body package="Roassal2-Layouts">translator: t	translator := t</body></methods><methods><class-id>Roassal2.RTLayout</class-id> <category>events</category><body package="Roassal2-Layouts">step"	currentIteraction := currentIteraction + 1.	(currentIteraction \\ self iterationsToSendEvent) = 0 		ifTrue: [ self announce: (ROLayoutStep new 											currentIteration: currentIteraction;											maxInterations: maxInterations) ].	"</body></methods><methods><class-id>Roassal2.RTLayout class</class-id> <category>public</category><body package="Roassal2-Layouts">isAbstract	^ self name = #RTLayout</body><body package="Roassal2-Layouts">isNotAbstract	^ self isAbstract not</body><body package="Roassal2-Layouts">on: aCollection	"main entry point of the class"		"If aCollection is empty, then there is not much to do"	aCollection isEmpty ifTrue: [ ^ aCollection ].	self new applyOn: aCollection.	^ aCollection</body><body package="Roassal2-Layouts">on: elements edges: edges	"To make all the layout polymorphic"		^ self on: elements</body><body package="Roassal2-Layouts">onElement: aRoassalViewOrRoassalElement	^ self on: aRoassalViewOrRoassalElement elements</body><body package="Roassal2-Layouts">onView: aRoassalView	^ self on: aRoassalView elements</body></methods><methods><class-id>Roassal2.RTAbstractSunburstLayout</class-id> <category>public</category><body package="Roassal2-Builder-Sunburst">doExecute: elements	| virtual |		elements isEmpty ifTrue: [ ^  self ].	elements size = 1 ifTrue: [ 		^ self layoutSunburst: elements first ].	virtual := RTArc element.	virtual attributes at: builder childrenKey put: elements.	elements do: [ :e | e attributes at: #parent put: virtual ].	virtual attributes at: #parent put: nil.	virtual attributes at: #depth put: 0.	self layoutSunburst: virtual.	elements do: [ :e | e attributes at: #parent put: nil ].</body><body package="Roassal2-Builder-Sunburst">layoutSunburst: el	self subclassResponsibility</body><body package="Roassal2-Builder-Sunburst">withoutCenter	self hasCenter: false</body></methods><methods><class-id>Roassal2.RTAbstractSunburstLayout</class-id> <category>accessing</category><body package="Roassal2-Builder-Sunburst">angularSpacing	^ angularSpacing</body><body package="Roassal2-Builder-Sunburst">angularSpacing: anInteger	angularSpacing := anInteger</body><body package="Roassal2-Builder-Sunburst">builder	^ builder</body><body package="Roassal2-Builder-Sunburst">builder: aBuilder	builder := aBuilder</body><body package="Roassal2-Builder-Sunburst">hasCenter	^ hasCenter</body><body package="Roassal2-Builder-Sunburst">hasCenter: aBool	hasCenter := aBool</body><body package="Roassal2-Builder-Sunburst">radialSpacing	^ radialSpacing</body><body package="Roassal2-Builder-Sunburst">radialSpacing: aNumber	radialSpacing := aNumber</body></methods><methods><class-id>Roassal2.RTAbstractSunburstLayout</class-id> <category>initialization</category><body package="Roassal2-Builder-Sunburst">initialize	super initialize.	self hasCenter: true.	self angularSpacing: 0.	self radialSpacing: 5.</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Common">defaultWindowName	^ 'Roassal'</body><body package="Roassal2-Builder-Common">initialize	super initialize.	title := self defaultWindowName.	view := self createView.	self resetShape.	self resetInteraction.</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Common">createdElements	^ shapeBuilder createdElements</body><body package="Roassal2-Builder-Common">interaction	"	::Void -&gt; RTInteractionBuilder	"	^ interactionBuilder</body><body package="Roassal2-Builder-Common">interactionBuilder: anRTInteractionBuilder	interactionBuilder := anRTInteractionBuilder</body><body package="Roassal2-Builder-Common">nestedElementsAttribute	^ self class nestedElementsAttribute</body><body package="Roassal2-Builder-Common">normalizer	"	:: Void-&gt;RTMetricNormalizer		This metric normalizer assumes that elements have been already created. Which may not be the case...	"	metricNormalizer		ifNil: [ metricNormalizer := self metricNormalizerClass new.			metricNormalizer view: self view.			metricNormalizer elements: self view elements ].	^ metricNormalizer</body><body package="Roassal2-Builder-Common">shape	^ shapeBuilder</body><body package="Roassal2-Builder-Common">shape: aShape	shapeBuilder shape: aShape</body><body package="Roassal2-Builder-Common">shapeBuilder: anRTShapeBuilder	shapeBuilder := anRTShapeBuilder</body><body package="Roassal2-Builder-Common">title	"Return the name of the builder"	^ title</body><body package="Roassal2-Builder-Common">title: aString	"Set the name of the builder. The name is used when opening the builder, in the window"	title := aString</body><body package="Roassal2-Builder-Common">view	^ view</body><body package="Roassal2-Builder-Common">view: aRTView	view := aRTView</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>copying</category><body package="Roassal2-Builder-Common">postCopy	super postCopy.	shapeBuilder := shapeBuilder copy.	interactionBuilder := interactionBuilder copy.</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>public-ui</category><body package="Roassal2-Builder-Common">open	^ self openIn: view</body><body package="Roassal2-Builder-Common">openIn: aView	self build.	^ aView openTitled: title</body><body package="Roassal2-Builder-Common">render	self renderIn: self view</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>public</category><body package="Roassal2-Builder-Common">addElementOn: anObject	| element |	element := self elementOn: anObject.	view add: element.	^ element</body><body package="Roassal2-Builder-Common">build	"Simply render the view"	self renderIn: view.	^ view</body><body package="Roassal2-Builder-Common">cleanView	view edges copy do: #remove.	view elements copy do: #remove.</body><body package="Roassal2-Builder-Common">edgeFrom: source to: target 	"source and target are elements"	| newEdge |	newEdge := shapeBuilder edgeFrom: source to: target.	view add: newEdge.	^ newEdge</body><body package="Roassal2-Builder-Common">restoreCamera	"Reuse a previous camera. This is useful when scripting in a playground"	self view restoreCamera</body><body package="Roassal2-Builder-Common">setCurrentShape: aShape	shapeBuilder shape: aShape</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>protected</category><body package="Roassal2-Builder-Common">elementOn: anObject	| element |	element := shapeBuilder elementOn: anObject.	interactionBuilder setUpElements: element.	^ element</body><body package="Roassal2-Builder-Common">elementsOn: collectionOfObjects	| elements |	elements := shapeBuilder elementsOn: collectionOfObjects.	interactionBuilder setUpElements: elements.	^ elements</body><body package="Roassal2-Builder-Common">elementsWithInteractionOn: collectionOfObjects	| els |	els := shapeBuilder elementsOn: collectionOfObjects.	self setUpInteractionFor: els.	^ els</body><body package="Roassal2-Builder-Common">resetCreatedElements	shapeBuilder resetCreatedElements</body><body package="Roassal2-Builder-Common">setUpInteractionFor: oneOrMoreElements	"This method may be used in subclasses to set up the interaction on the elements provided as argument"	interactionBuilder setUpElements: oneOrMoreElements asGroup</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>resetting</category><body package="Roassal2-Builder-Common">resetInteraction	interactionBuilder := self createInteractionBuilder</body><body package="Roassal2-Builder-Common">resetShape	shapeBuilder := self createShapeBuilder</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>conversion</category><body package="Roassal2-Builder-Common">asElement	"Return a compound element for all the elements of my view"	^ self view asElement</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-Common">createInteractionBuilder	^ RTInteractionBuilder new</body><body package="Roassal2-Builder-Common">createShapeBuilder	^ RTShapeBuilder new</body><body package="Roassal2-Builder-Common">createView	^ RTView new</body><body package="Roassal2-Builder-Common">metricNormalizerClass	"Return the class used for the metric normalization"	^ RTLazyMetricNormalizer</body><body package="Roassal2-Builder-Common">renderIn: aView	"You may want to override this method to fill the view"</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>*Roassal2GT-Glamour</category><body package="Roassal2-Builder-Common">openWithToolbarEntitled: aTitle	^ self openWithToolbar title: aTitle</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>user interface</category><body package="Roassal2-Extentions">inspectorClasses	^Array		with: Roassal2Inspector		with: Tools.Trippy.BasicInspector</body></methods><methods><class-id>Roassal2.RTBuilder class</class-id> <category>accessing</category><body package="Roassal2-Builder-Common">nestedElementsAttribute	^ #nestedElements</body></methods><methods><class-id>Roassal2.RTBundleBuilder</class-id> <category>building</category><body package="Roassal2-Builder-BundleEdge">explore: atree using: ablock	^ (self from: (Array with: atree) using: ablock) first</body><body package="Roassal2-Builder-BundleEdge">from: aCollection using: ablock	childrenBlock := ablock.	^ rootNodes := aCollection collect: [ :obj | self createElements: obj using: ablock depth: 1 ].</body></methods><methods><class-id>Roassal2.RTBundleBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-BundleEdge">initialize	super initialize.	self shape circle.	self defaultInteractions.	self defaultSliderShape.	elements := RTGroup new.	label := RTRotatedLabel new.	edges := RTEdgeBuilder new.	layoutBuilder := RTLayoutBuilder new.	layoutBuilder cluster.	bezier := RTBezierLine new.	connectBezierBlock := nil.	bezier		follow:  [ :m | self parentOf: m view: view ];		tension: 0.5.	self edgeBuilderDo: [:ebuilder| 		ebuilder connectToAll: connectBezierBlock. ].</body></methods><methods><class-id>Roassal2.RTBundleBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-BundleEdge">bezier	^ bezier</body><body package="Roassal2-Builder-BundleEdge">edgeBuilderDo: aBlock	"aBlock recibes one argument, the EdgeBulder	this is used in createBezierIfnecessary:"	edgeBuilderDo := aBlock</body><body package="Roassal2-Builder-BundleEdge">edges	^ edges</body><body package="Roassal2-Builder-BundleEdge">elements	^ elements.</body><body package="Roassal2-Builder-BundleEdge">labelShape	^ label</body><body package="Roassal2-Builder-BundleEdge">sliderShape	^ sliderShape</body></methods><methods><class-id>Roassal2.RTBundleBuilder</class-id> <category>public - configuration</category><body package="Roassal2-Builder-BundleEdge">sliderShape: aShape	sliderShape := aShape</body><body package="Roassal2-Builder-BundleEdge">withoutSlider	self sliderShape: nil</body></methods><methods><class-id>Roassal2.RTBundleBuilder</class-id> <category>rendering-utility</category><body package="Roassal2-Builder-BundleEdge">createBezierIfNecessary: aView	| ebuilder   |	connectBezierBlock ifNil: [ ^ self ].	edgeBuilderDo ifNil: [^ self ].	ebuilder := RTEdgeBuilder new		view: aView;		elements: elements;		shape: bezier.	edgeBuilderDo value: ebuilder.</body><body package="Roassal2-Builder-BundleEdge">createLabelFor: e view: aView	| lbl |	lbl := label elementOn: e model.	self interaction setUpElement: lbl.	aView add: lbl.	e addCallback: (TRTranslationCallback new block: [		| angle |		angle := (e position - center ) theta.		lbl translateTo: e position+((lbl trachelShape notRotatedWidth/2) * (angle cos @ angle sin)).		angle := angle radiansToDegrees.		angle := angle + ((angle between: 90 and: 270)  ifTrue: [ 180 ] ifFalse: [ 0 ]).		lbl trachelShape angleInDegree: angle ] ).	e translateTo: e position.</body><body package="Roassal2-Builder-BundleEdge">createSliderIfNecessary: aView	| bedges slider |	sliderShape ifNil: [ ^ self ].	bedges := aView edges select: [ :e | e shape = bezier ].	slider := RTSlider new.	slider shape shape: sliderShape. 	slider move: #below; view: aView; callback: [:v| 		bezier tension: v.		bedges do: [ :e | e trachelShape points: (bezier getListOfPointsForTrachel: e); resetPath.].	].	slider build.</body><body package="Roassal2-Builder-BundleEdge">parentOf: model view: aView	| element |	element := view elementFromModel: model.	element ifNil: [ ^ nil ].	^ (element attributes at: #parent ifAbsent: [ nil ]) ifNotNil: [:parent | parent model ].</body><body package="Roassal2-Builder-BundleEdge">useBezierlineWith: ablock	connectBezierBlock := ablock</body></methods><methods><class-id>Roassal2.RTBundleBuilder</class-id> <category>private</category><body package="Roassal2-Builder-BundleEdge">createElements: obj using: ablock depth: depth	| children e |	e := self shape elementOn: obj.	self interaction setUpElement: e.	self elements add: e.	children := ablock rtValue: obj.	e attributes at: #depth put: depth.	children := children collect: [ :child | | e2 |		e2 := self createElements: child using: ablock depth: depth + 1.		e2 attributes at: #parent put: e.		e2 ].	e attributes at: #children put: children.	^ e</body></methods><methods><class-id>Roassal2.RTBundleBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-BundleEdge">createView	^ super createView @ (RTRotableView new 		elements: [ elements ];		center: [ center ];		yourself ).</body><body package="Roassal2-Builder-BundleEdge">renderIn: aView	view := aView.	aView addAll: elements.	edges		view: aView;		elements: elements;		connectToAll: childrenBlock.	layoutBuilder setUpElements: elements.	self createBezierIfNecessary: aView.		center := elements encompassingRectangle center.	(elements select: [ :e | (childrenBlock rtValue: e model) isEmpty ]) 		do: [ :e | self createLabelFor: e view: aView ].		self createSliderIfNecessary: aView.</body></methods><methods><class-id>Roassal2.RTBundleBuilder</class-id> <category>default</category><body package="Roassal2-Builder-BundleEdge">defaultInteractions	self interaction popup;		addInteraction: (RTHighlightable new 			highlightedColor: (Color r: 0 g: 120 b: 0 range: 255);			highlightElements: [ :el |				edges := el view edges select: [:e | e model key = el model ].				edges, (edges flatCollect: [:ed |					el view elements select: [ :elem | elem model = ed to model ] ] ).			 ]);		addInteraction: (RTHighlightable new			highlightedColor: Color red;			highlightElements: [:el | 				edges := el view edges select: [:e | e model value = el model].				edges, (edges flatCollect: [:ed |					el view elements select: [ :elem | elem model = ed from model ] ] ).				]);		addInteraction: RTHighlightable allSibblings.</body><body package="Roassal2-Builder-BundleEdge">defaultSliderShape	| lin c |	"lin := TRPlatform current linearGradientClass.	c := lin new				start: 0@ -8.75; stop: 0@8.75;				colorRamp: (Array with: (0.0 -&gt; (Color white alpha: 0.6)) with: (1.0 -&gt; Color transparent).	c2 := lin new				start: 0@ 7.0; stop: 0@12.0;				colorRamp: (Array with: (0.0-&gt; Color transparent) with: (1.0 -&gt; (Color white alpha: 0.6))."	c := Color blue.	sliderShape := RTCompositeShape new 		add: (RTEllipse new size: 30; color: Color blue; borderWidth: 0.01; borderColor: Color black);		add: (RTEllipse new width: 24; height: 19.5;			color: c) translateBy: 0@ -3.9;		add: (RTArc new innerRadius: 12.9; externalRadius: 13.8; alphaAngle: 200; betaAngle: 340;			color: c). "Could be c2"</body></methods><methods><class-id>Roassal2.TREvent</class-id> <category>*Roassal2Spec</category><body package="Roassal2-Trachel-Events">isMouse	^ false</body></methods><methods><class-id>Roassal2.TREvent</class-id> <category>initialization</category><body package="Roassal2-Trachel-Events">initialize	super initialize.	position := 0 @ 0.</body></methods><methods><class-id>Roassal2.TREvent</class-id> <category>accessing</category><body package="Roassal2-Trachel-Events">canvas		^ canvas</body><body package="Roassal2-Trachel-Events">canvas: aTrachelCanvas	"Set the Trachel canvas"	canvas := aTrachelCanvas</body><body package="Roassal2-Trachel-Events">morph	^ morph</body><body package="Roassal2-Trachel-Events">morph: aMorph	morph := aMorph</body><body package="Roassal2-Trachel-Events">position		^ position</body><body package="Roassal2-Trachel-Events">position: aPoint		position := aPoint</body><body package="Roassal2-Trachel-Events">positionFromCamera	"Return the position from the camera. I.e., 0 @ 0 is at the center of the window if the camera has not been translated"	^ canvas 		ifNotNil: [ canvas camera fromPixelToSpace: self position ]		ifNil: [ -250 @ -250 ]</body><body package="Roassal2-Trachel-Events">signalUpdate	morph notNil ifTrue: [ morph changed ]</body></methods><methods><class-id>Roassal2.TREvent class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">new	^ super new initialize</body></methods><methods><class-id>Roassal2.TRShapeEvent</class-id> <category>accessing</category><body package="Roassal2-Trachel-Events">element	"Could be any object"	^ self shape class = TRCanvas		ifTrue: [ nil ]		ifFalse: [ self shape element ]</body><body package="Roassal2-Trachel-Events">shape		^ shape</body><body package="Roassal2-Trachel-Events">shape: aTrachelShape		shape := aTrachelShape</body></methods><methods><class-id>Roassal2.TRShapeEvent class</class-id> <category>instance creation</category><body package="Roassal2-Trachel-Events">shape: aTrachelShape	^ self new shape: aTrachelShape; yourself</body></methods><methods><class-id>Roassal2.TRMorphDropEvent</class-id> <category>accessing</category><body package="Roassal2-Trachel-Events">dropMorphEvent	^ dropMorphEvent</body><body package="Roassal2-Trachel-Events">dropMorphEvent: anObject	dropMorphEvent := anObject</body><body package="Roassal2-Trachel-Events">droppedMorph	^ droppedMorph</body><body package="Roassal2-Trachel-Events">droppedMorph: anObject	droppedMorph := anObject</body></methods><methods><class-id>Roassal2.RTNullLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements	elements do: [ :e | e translateTo: 0 @ 0 ]</body></methods><methods><class-id>Roassal2.RTShapeBuilder</class-id> <category>shape - attach point on edges</category><body package="Roassal2-Builder-Common">attachPoint: aBlockOrSymbol	aBlockOrSymbol rtValue: shape</body><body package="Roassal2-Builder-Common">centeredAttachPoint	"Set the vertical attach point for the edges to be built"	self attachPoint: #withCenteredAttachPoint</body><body package="Roassal2-Builder-Common">horizontalAttachPoint	"Set the vertical attach point for the edges to be built"	self attachPoint: #withHorizontalAttachPoint</body><body package="Roassal2-Builder-Common">shortestDistanceAttachPoint	"Set the vertical attach point for the edges to be built"	self attachPoint: #withShorterDistanceAttachPoint</body><body package="Roassal2-Builder-Common">shortestDistanceAttachPointWithJump	"Set the vertical attach point for the edges to be built"	self attachPoint: #withShorterDistanceAttachPointWithJump</body><body package="Roassal2-Builder-Common">verticalAttachPoint	"Set the vertical attach point for the edges to be built"	self attachPoint: #withVerticallAttachPoint</body></methods><methods><class-id>Roassal2.RTShapeBuilder</class-id> <category>shape - edges</category><body package="Roassal2-Builder-Common">arrowedBezier	self shape: (RTArrowedLine new line: RTBezier3Line new).</body><body package="Roassal2-Builder-Common">arrowedLine	self shape: RTArrowedLine new</body><body package="Roassal2-Builder-Common">bezierLineFollowing: aFollowBlock	"aFollowBlock return an element"	self shape: (RTBezierLine new follow: aFollowBlock)</body><body package="Roassal2-Builder-Common">bezierLineUsingObjects: aFollowBlock	"aFollowBlock return an element"	| elements |	self error: 'Method is not finished!!!'.	elements := #().	self shape: (RTBezierLine new controllingElements: elements)</body><body package="Roassal2-Builder-Common">bezierLineUsingObjects: someObjects inView: view	"some Objects are objects represented in a view"	| elements |	elements := view elementsFromModels: someObjects.	self shape: (RTBezierLine new controllingElements: elements)</body><body package="Roassal2-Builder-Common">directedLine	self shape: RTDirectedLine new</body><body package="Roassal2-Builder-Common">doubleArrowedLine	self shape: RTDoubleArrowedLine new</body><body package="Roassal2-Builder-Common">gradientLineFrom: fromColor to: toColor	self shape: (RTGradientColoredLine new colors: (Array with: fromColor with: toColor); 							precision: 100; 							gradientColorShape)</body><body package="Roassal2-Builder-Common">horizontalBezierLine	self shape: RTBezierLine horizontal</body><body package="Roassal2-Builder-Common">line	self shape: RTLine new</body><body package="Roassal2-Builder-Common">verticalBezierLine	self shape: RTBezierLine vertical</body></methods><methods><class-id>Roassal2.RTShapeBuilder</class-id> <category>public - building</category><body package="Roassal2-Builder-Common">edgeFrom: element1 to: element2	"Return a new edge that goes from element1 to element2"	self hasSetLineShape ifFalse: [ self line ].	^ shape edgeFrom: element1 to: element2</body><body package="Roassal2-Builder-Common">elementOn: object	^ (self elementsOn: (RTGroup with: object)) first</body><body package="Roassal2-Builder-Common">elementsOn: objects	| answer |	self hasSetShape ifFalse: [ self rectangle ].	answer := shape elementsOn: objects.	createdElements addAll: answer.	^ answer</body><body package="Roassal2-Builder-Common">ensure: aClassShape	"Make sure the current shape is instance of aClassShapeName. If no, then set it"	(shape isKindOf: aClassShape)		ifFalse: [ self shape: aClassShape new ]</body><body package="Roassal2-Builder-Common">setUpElement: anElement	self hasSetShape ifFalse: [ self rectangle ].	^ anElement + shape</body><body package="Roassal2-Builder-Common">setUpElements: elements	self hasSetShape ifFalse: [ self rectangle ].	^ elements + shape</body></methods><methods><class-id>Roassal2.RTShapeBuilder</class-id> <category>shapes - texting</category><body package="Roassal2-Builder-Common">text	self shape: RTLabel new</body><body package="Roassal2-Builder-Common">withText	^ self withText: #yourself</body><body package="Roassal2-Builder-Common">withText: aSymbolOrABlock	shape := shape + (RTLabel new text: aSymbolOrABlock).	^ shape</body><body package="Roassal2-Builder-Common">withTextAbove	^ self withTextAbove: #yourself</body><body package="Roassal2-Builder-Common">withTextAbove: aSymbolOrABlock	| newShape |	newShape := RTCompositeShape new.	newShape add: (RTLabel new text: aSymbolOrABlock).	newShape add: shape.	newShape vertical.	newShape setAutomaticRelayout.	shape := newShape.</body><body package="Roassal2-Builder-Common">withTextColor: aColorOrABlock	"Set the color of the text. Should be used only with a composite Shape"	self assert: [ shape class == RTCompositeShape ] description: 'This method should be used only if a text has been added to a box or an ellipse'.	(shape shapesInstancesOf: RTLabel) do: [ :l | l color: aColorOrABlock ]</body><body package="Roassal2-Builder-Common">withTextOnTheLeft	^ self withTextOnTheLeft: #yourself</body><body package="Roassal2-Builder-Common">withTextOnTheLeft: aSymbolOrABlock	| newShape |	newShape := RTCompositeShape new.	newShape add: (RTLabel new text: aSymbolOrABlock).	newShape add: shape.	newShape horizontal.	newShape setAutomaticRelayout.	shape := newShape.</body><body package="Roassal2-Builder-Common">withTextOnTheRight	^ self withTextOnTheRight: #yourself</body><body package="Roassal2-Builder-Common">withTextOnTheRight: aSymbolOrABlock	| newShape |	newShape := RTCompositeShape new.	newShape add: shape.	newShape add: (RTLabel new text: aSymbolOrABlock).	newShape horizontal.	newShape setAutomaticRelayout.	shape := newShape.</body></methods><methods><class-id>Roassal2.RTShapeBuilder</class-id> <category>reflective operations</category><body package="Roassal2-Builder-Common">doesNotUnderstand: aMessage	"we simply forward the messages we do not understand	to the actual shape implementation"	self shape 		perform: aMessage selector 		withArguments: aMessage arguments</body></methods><methods><class-id>Roassal2.RTShapeBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Common">borderColor	^ self current borderColor</body><body package="Roassal2-Builder-Common">color	^ self current color</body><body package="Roassal2-Builder-Common">createdElements	^ createdElements</body><body package="Roassal2-Builder-Common">current	"Return the shape currently built"	^ shape</body><body package="Roassal2-Builder-Common">fillColor	^ self color</body><body package="Roassal2-Builder-Common">reset	self resetShape.	self resetCreatedElements</body><body package="Roassal2-Builder-Common">resetCreatedElements	createdElements := OrderedCollection new</body><body package="Roassal2-Builder-Common">resetShape	shape := RTNoShape instance</body><body package="Roassal2-Builder-Common">shape	"Return the shape currently built"	^ shape</body><body package="Roassal2-Builder-Common">shape: aRoassalShape	"Useful to set a shape in the builder. For example, this method may be used when overriding the method createShapeBuilder in a Builder"	shape := aRoassalShape.	shapeInitializer rtValue: shape.	^ aRoassalShape</body><body package="Roassal2-Builder-Common">shapeInitializer: aBlock	"Invoked after a shape has been designed"	shapeInitializer := aBlock</body></methods><methods><class-id>Roassal2.RTShapeBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Common">initialize	super initialize.	self reset. 	shapeInitializer := #yourself</body></methods><methods><class-id>Roassal2.RTShapeBuilder</class-id> <category>shapes</category><body package="Roassal2-Builder-Common">arc	self shape: RTArc new</body><body package="Roassal2-Builder-Common">box	self shape: RTBox new</body><body package="Roassal2-Builder-Common">circle	self shape: RTEllipse new</body><body package="Roassal2-Builder-Common">composite: aBlock	| newShape |	newShape := RTCompositeShape new.	aBlock value: newShape.	shape := newShape.</body><body package="Roassal2-Builder-Common">cross	| s |	s := RTCompositeShape new.	s add: (RTBox new height: 10; width: 3). 	s add: (RTBox new height: 3; width: 10).	^ self shape: s</body><body package="Roassal2-Builder-Common">ellipse	self shape: RTEllipse new</body><body package="Roassal2-Builder-Common">extensibleLabel	^ self shape: RTExtensibleLabel new</body><body package="Roassal2-Builder-Common">if: conditionBlock borderColor: colorBlock	"If conditionBlock is evaluated at true, then colorBlock is used to set the color of the node. Both conditionBlock and colorBlock are evaluated with the model value of the node."	| oldBlockOrValue |	oldBlockOrValue := self borderColor.	^self borderColor: [ :aModel | (conditionBlock rtValue: aModel)									ifTrue: [ colorBlock rtValue: aModel ] 									ifFalse: [ 										"Having to create a new element is rather ugly. 										Ideally, the oldBlockOrValue has to be 'unwrapped' for the translation"										oldBlockOrValue rtValue: (RTElement on: aModel) ]].</body><body package="Roassal2-Builder-Common">if: conditionBlock color: colorBlock	| oldBlockOrValue |	oldBlockOrValue := self color.	^self color: [ :aModel | (conditionBlock rtValue: aModel)									ifTrue: [ colorBlock rtValue: aModel ] 									ifFalse: [ 										oldBlockOrValue rtValue: (RTElement on: aModel) ]].</body><body package="Roassal2-Builder-Common">if: conditionBlock fillColor: colorBlock	"If conditionBlock is evaluated at true, then colorBlock is used to set the color of the node. Both conditionBlock and colorBlock are evaluated with the model value of the node."	| oldBlockOrValue |	oldBlockOrValue := self fillColor.	self fillColor: [ :aModel | (conditionBlock rtValue: aModel)									ifTrue: [ colorBlock rtValue: aModel ] 									ifFalse: [ 										"Having to create a new element is rather ugly. 										Ideally, the oldBlockOrValue has to be 'unwrapped' for the translation"										oldBlockOrValue rtValue: (RTElement on: aModel) ]].</body><body package="Roassal2-Builder-Common">ifElement: conditionBlock borderColor: colorBlock	"If conditionBlock is evaluated at true, then colorBlock is used to set the color of the node. Both conditionBlock and colorBlock are evaluated with the model value of the node."	| oldBlockOrValue |	oldBlockOrValue := self borderColor.	^self borderColorElement: [ :anElement | (conditionBlock rtValue: anElement)									ifTrue: [ colorBlock rtValue: anElement ] 									ifFalse: [ 										"Having to create a new element is rather ugly. 										Ideally, the oldBlockOrValue has to be 'unwrapped' for the translation"										oldBlockOrValue rtValue: anElement ]].</body><body package="Roassal2-Builder-Common">ifElement: conditionBlock fillColor: colorBlock	"If conditionBlock is evaluated at true, then colorBlock is used to set the color of the node. Both conditionBlock and colorBlock are evaluated with the model value of the node."	| oldBlockOrValue |	oldBlockOrValue := self fillColor.	^self fillColorElement: [ :anElement | (conditionBlock rtValue: anElement)									ifTrue: [ colorBlock rtValue: anElement ] 									ifFalse: [ 										"Having to create a new element is rather ugly. 										Ideally, the oldBlockOrValue has to be 'unwrapped' for the translation"										oldBlockOrValue rtValue: anElement ]].</body><body package="Roassal2-Builder-Common">label	shape := RTLabel new</body><body package="Roassal2-Builder-Common">labelledAs: aBlock	| label oldShape |	label := RTLabel new text: aBlock.	oldShape := shape.	shape := RTCompositeShape new.	shape add: oldShape.	shape add: label.		shape vertical.	shapeInitializer rtValue: shape.		^ label</body><body package="Roassal2-Builder-Common">linearFillColor: block within: groupOfObjects	"Set the linear fill color for the nodes. The gradient goes from white to black. anObject could be a symbol, a block or a value. anObject is evaluated against the model of the node to be paint. aGroup is a collection of the model values. This is where the maximum is looked into."		| max |	"If the collection is empty, then we return an arbitrary color. 	 If the script is properly done, the color should not be used"	groupOfObjects isEmpty ifTrue: [ ^ Color red ].		max := groupOfObjects maxValue: block.	self current color: [ :v | Color grayScale256: 256 - ((block rtValue: v) max: max in: (1 to: 256)) ]</body><body package="Roassal2-Builder-Common">noBorder	self borderColor: Color transparent</body><body package="Roassal2-Builder-Common">orthoHorizontalLine	^ self shape: RTMultiLine new orthoHorizontal</body><body package="Roassal2-Builder-Common">orthoVerticalLine	^ self shape: (RTMultiLine new withVerticallAttachPoint; orthoVertical)</body><body package="Roassal2-Builder-Common">rectangle	self box</body><body package="Roassal2-Builder-Common">styledLabel	shape := RTStyledLabel new</body><body package="Roassal2-Builder-Common">withBorder	self borderColor: Color black</body></methods><methods><class-id>Roassal2.RTShapeBuilder</class-id> <category>text shape</category><body package="Roassal2-Builder-Common">fontSize: aValueOrASymbolOrABlock	"Make sure we have something that this message is meaningful"	self assert: [ #(RTLabel #RTCompositeShape) includes: shape class name ].		shape class == RTLabel ifTrue: [ shape height: aValueOrASymbolOrABlock. ^ self ].	shape class == RTCompositeShape ifTrue: [ (shape allShapes select: [ :s | s class == RTLabel ]) do: [ :s | s height: aValueOrASymbolOrABlock ] ]</body><body package="Roassal2-Builder-Common">withTextBelow	^ self withTextBelow: #yourself</body><body package="Roassal2-Builder-Common">withTextBelow: aSymbolOrABlock	| newShape |	newShape := RTCompositeShape new.	newShape add: shape.	newShape add: (RTLabel new text: aSymbolOrABlock).	newShape vertical.	newShape setAutomaticRelayout.	shape := newShape.</body></methods><methods><class-id>Roassal2.RTShapeBuilder</class-id> <category>testing</category><body package="Roassal2-Builder-Common">hasSetLineShape	"A bit hackish..."	^ (shape isKindOf: RTAbstractLine) or: [ (shape isKindOf: RTCompositeShape) and: [ shape allShapes anyOne isKindOf: RTAbstractLine ] ]</body><body package="Roassal2-Builder-Common">hasSetShape	^ shape class ~~ RTNoShape</body></methods><methods><class-id>Roassal2.RTBoundedShapeBuilder</class-id> <category>configuration</category><body package="Roassal2-Builder-Common">minimumSize	^ 5</body></methods><methods><class-id>Roassal2.RTBoundedShapeBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Common">height: aBlock	^ super height: [ :v | (aBlock rtValue: v) max: self minimumSize ]</body><body package="Roassal2-Builder-Common">size: aBlock	^ super size: [ :v | (aBlock rtValue: v) max: self minimumSize ]</body><body package="Roassal2-Builder-Common">width: aBlock	"width can also be applied to an edge. We have to take this situation into account"	^ (shape isKindOf: RTAbstractLine)		ifTrue: [ super width: aBlock ]		ifFalse: [ super width: [ :v | (aBlock rtValue: v) max: self minimumSize ] ]</body></methods><methods><class-id>Roassal2.TRObject</class-id> <category>deprecation</category><body package="Roassal2-Extentions">deprecated: aString			super deprecated: (Array with: #use with: aString)</body></methods><methods><class-id>Roassal2.TRObject class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">new	| instance |	instance := super new.	instance initialize.	^ instance.</body></methods><methods><class-id>Roassal2.TRObject class</class-id> <category>deprecation</category><body package="Roassal2-Extentions">deprecated: aString			super deprecated: (Array with: #use with: aString)</body></methods><methods><class-id>Roassal2.TRFocusing</class-id> <category>utility</category><body package="Roassal2-Trachel-Core">encompassingRectangleOf: shapes	^ shapes asGroup encompassingRectangle</body></methods><methods><class-id>Roassal2.TRFocusing</class-id> <category>hooks</category><body package="Roassal2-Trachel-Core">on: canvas	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRFocusing class</class-id> <category>public</category><body package="Roassal2-Trachel-Core">on: canvas	^ self new on: canvas</body></methods><methods><class-id>Roassal2.TRFocusCenter</class-id> <category>hooks</category><body package="Roassal2-Trachel-Core">on: canvas	| encompassingRectangle  |	encompassingRectangle := self encompassingRectangleOf: canvas shapes.	canvas camera translateTo: encompassingRectangle center.</body></methods><methods><class-id>Core.Margin</class-id> <category>operations</category><body package="Roassal2-Pharo">expandRectangle: aRectangle	"Answer a rectangle whose size has been expanded by the receiver which represents each rectangle corner."		|  l r t b |	l := aRectangle left - self left.	r :=aRectangle right + self right.	t := aRectangle top - self top.	b := aRectangle bottom + self bottom.	^ Rectangle origin:  l @t extent: ((r - l ) @ (b - t ))</body><body package="Roassal2-Pharo">extendRectangle: aRectangle	"Answer a rectangle whose size has been expanded (without changing its origin) by the receiver which represents each rectangle corner."		^ Rectangle origin: aRectangle origin corner: aRectangle corner + self rightBottom</body></methods><methods><class-id>Core.Margin</class-id> <category>accessing</category><body package="Roassal2-Pharo">bottom	^ bottom</body><body package="Roassal2-Pharo">height	^ self bottom - self top.</body><body package="Roassal2-Pharo">left	^ left</body><body package="Roassal2-Pharo">right	^ right</body><body package="Roassal2-Pharo">rightBottom	^ right @ bottom</body><body package="Roassal2-Pharo">top	^ top</body><body package="Roassal2-Pharo">width 	^ self right - self left.</body></methods><methods><class-id>Core.Margin</class-id> <category>private</category><body package="Roassal2-Pharo">setTop: topNumber left: leftNumber bottom: bottomNumber right: rightNumber 	top := topNumber.	left := leftNumber.	bottom := bottomNumber. 	right := rightNumber.</body></methods><methods><class-id>Core.Margin</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">fromNumber: anInteger	self setTop: anInteger left: anInteger bottom: anInteger right: anInteger</body><body package="Roassal2-Pharo">fromPoint: aPoint	self setTop: aPoint y left: aPoint x bottom: aPoint y  right: aPoint x</body></methods><methods><class-id>Core.Margin class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">fromNumber: aNumber	"Create a margin whose four values are the same and based on anInteger"		^ self new fromNumber: aNumber; yourself</body><body package="Roassal2-Pharo">fromPoint: aPoint	"Create a margin whose values are based on the point value: top and bottom are y and left right are x."		^ self new fromPoint: aPoint; yourself</body></methods><methods><class-id>Roassal2.RTEdgeDrivenLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">affectedNodes		^affectedNodes</body><body package="Roassal2-Layouts">affectedNodes: anObject		affectedNodes := anObject</body><body package="Roassal2-Layouts">affectedNodesOf:  aNode 	^ affectedNodes ifNil: [ aNode nodes ]</body><body package="Roassal2-Layouts">edges: aCollection	"Set the list of edges that should be considered for the layout.	If none is specified (i.e., if this method is not called), then the 	edges are infered."	edges := aCollection.	self shouldSetDefaultAttachPoint		ifTrue: [ self addDefaultAttachPointToEdges ]</body><body package="Roassal2-Layouts">fromPositions: anArray		fromPositions := anArray</body><body package="Roassal2-Layouts">setEdgesFromElements: elements 	| view |	elements isEmpty ifTrue: [ ^ self ].		^ self		edges:			((elements flatCollect: #incomingEdges)				select: [ :anEdge | anEdge isUsedInLayout and: (elements includes: anEdge from) ])"	view := elements anyOne view.	view ifNil: [ ^ self ].	self edges: (view edges select: [ :el | 		(el isUsedInLayout and: [ elements includes: el from ]) and: [ elements includes: el to ] ]).	"</body><body package="Roassal2-Layouts">toPositions: anArray		toPositions := anArray</body></methods><methods><class-id>Roassal2.RTEdgeDrivenLayout</class-id> <category>testing</category><body package="Roassal2-Layouts">isEdgeDrivenLayout	^ true</body></methods><methods><class-id>Roassal2.RTEdgeDrivenLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements		self subclassResponsibility</body><body package="Roassal2-Layouts">doIncrementallyExecute: anElementNode	"called by refreshLayoutEvery: ms. It is used to convey a feeling of incremental execution."		self doExecute: anElementNode</body><body package="Roassal2-Layouts">executeOnElements: elements 	"Execute the layout, myself, on the elements"	self userDefinedEdges isNil 		ifTrue: [ self setEdgesFromElements: elements ]		ifFalse: 			[ | flat |			flat := OrderedCollection new.			self userDefinedEdges do: 				[ :each | 				each isCollection 					ifTrue: [ flat addAll: each ]					ifFalse: [ flat add: each ] ].			flat := flat select: #isUsedInLayout. 			self edges: flat ].			super executeOnElements: elements</body></methods><methods><class-id>Roassal2.RTEdgeDrivenLayout</class-id> <category>iterator</category><body package="Roassal2-Layouts">edgesDo: aBlock	"Iterates over all the edges of the receiver."		edges ifNil: [ ^ self ].	edges do: aBlock</body></methods><methods><class-id>Roassal2.RTEdgeDrivenLayout</class-id> <category>private</category><body package="Roassal2-Layouts">edges		^ edges</body><body package="Roassal2-Layouts">userDefinedEdges		^userDefinedEdges</body></methods><methods><class-id>Roassal2.RTEdgeDrivenLayout</class-id> <category>default attach points</category><body package="Roassal2-Layouts">addDefaultAttachPointToEdges	| a |	a := self defaultAttachPoint.	edges do: [ :e | e shape attachPoint: a ]</body><body package="Roassal2-Layouts">defaultAttachPoint	^ RTCenteredAttachPoint new</body><body package="Roassal2-Layouts">doAttachPoint	"Change the attach point of edges when added"	shouldSetDefaultAttachPoint := true</body><body package="Roassal2-Layouts">doNotAttachPoint	"Do not add an attach point to edges when doing the layout"	shouldSetDefaultAttachPoint := false</body><body package="Roassal2-Layouts">shouldSetDefaultAttachPoint	"Return true if an attach point has to be added to edges. False else"	^ shouldSetDefaultAttachPoint</body></methods><methods><class-id>Roassal2.RTEdgeDrivenLayout</class-id> <category>default values</category><body package="Roassal2-Layouts">defaultFromPositions	^ #()</body><body package="Roassal2-Layouts">defaultToPositions	^ #()</body></methods><methods><class-id>Roassal2.RTEdgeDrivenLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize	"Initialization"	super initialize.	edges := nil.	shouldSetDefaultAttachPoint := false</body><body package="Roassal2-Layouts">userDefinedEdges: aCollectionOfEdges	"useful to tell to the layout which edges have to be used for the layout"	userDefinedEdges := aCollectionOfEdges.</body></methods><methods><class-id>Roassal2.RTEdgeDrivenLayout class</class-id> <category>public</category><body package="Roassal2-Layouts">on: elements edges: edges	^ self new on: elements edges: edges</body></methods><methods><class-id>Roassal2.RTEdgeDrivenLayout class</class-id> <category>as yet unclassified</category><body package="Roassal2-Layouts">isAbstract	^ self = RTEdgeDrivenLayout</body></methods><methods><class-id>Roassal2.RTEdgeDrivenLayout class</class-id> <category>instance creation</category><body package="Roassal2-Layouts">withEdges: aCollection		^self new initialize userDefinedEdges: aCollection</body></methods><methods><class-id>Roassal2.RTAbstractGraphLayout</class-id> <category>private</category><body package="Roassal2-Layouts">cachedChildren		cachedChildren ifNil: [cachedChildren := IdentityDictionary new: 1000].	^cachedChildren</body><body package="Roassal2-Layouts">cachedParents		cachedParents ifNil: [cachedParents := IdentityDictionary new: 1000].	^cachedParents</body><body package="Roassal2-Layouts">cachedParentsWithHighestNestings		cachedParentsWithHighestNestings		ifNil: [cachedParentsWithHighestNestings := IdentityDictionary new: 1000].	^cachedParentsWithHighestNestings</body><body package="Roassal2-Layouts">childrenFor: aNode		^self cachedChildren		at: aNode		ifAbsentPut:			[| nodes |			nodes := OrderedCollection new.			self edgesDo:					[:edge | 					(edge from == aNode and: [edge to ~= aNode])						ifTrue:							[(nodes includes: edge from) ifFalse: [nodes add: edge to]]].			nodes]</body><body package="Roassal2-Layouts">childrenFor: aNode except: aNodeCollection		^(self childrenFor: aNode) 		reject: [:each | aNodeCollection includes: each]		"we are explicitly not using the default Collection&gt;&gt;difference: behavior here because we want to preserve the order of the collection"</body><body package="Roassal2-Layouts">childrenWithHighestNestingLevelFor: aNode		^(self childrenFor: aNode)		select: [:eachChild | (self highestNestingParentFor: eachChild) == aNode]</body><body package="Roassal2-Layouts">clear		cachedParents := nil.	cachedChildren := nil.	cachedParentsWithHighestNestings := nil</body><body package="Roassal2-Layouts">highestNestingParentFor: aNodeFigure		| parents |	^self cachedParentsWithHighestNestings		at: aNodeFigure		ifAbsentPut:			[parents := self parentsFor: aNodeFigure.			parents isEmpty				ifTrue: [0]				ifFalse:					[parents detectMax: [:eachParent | self nestingLevelFor: eachParent]]]</body><body package="Roassal2-Layouts">maximumDiameter: aCollection		^aCollection		inject: 0		into: [:max :node | max max: (node radius * 2) ]</body><body package="Roassal2-Layouts">maximumRadius: aCollection		^aCollection		inject: 0		into: [:max :node | max max: node radius]</body><body package="Roassal2-Layouts">nestingLevelFor: aNodeFigure		| parents parentsNesting |	parents := self parentsFor: aNodeFigure.	parentsNesting := parents		collect: [:eachParent | self nestingLevelFor: eachParent].	^parentsNesting isEmpty		ifTrue: [0]		ifFalse: [parentsNesting max + 1]</body><body package="Roassal2-Layouts">parentsFor: aNode	^ self cachedParents		at: aNode		ifAbsentPut:			[ | nodes |			nodes := OrderedCollection new.			self edgesDo:					[:edge | edge to == aNode ifTrue: [ nodes add: edge from ] ].			nodes ]</body><body package="Roassal2-Layouts">rootNodesFor: aCollection	^ aCollection select: [:node | 		(self parentsFor: node) isEmpty ].</body><body package="Roassal2-Layouts">shiftTree: aNode by: aPoint		aNode translateBy: aPoint.	(self childrenFor: aNode) do: [:child | self shiftTree: child by: aPoint]</body></methods><methods><class-id>Roassal2.RTAbstractGraphLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">horizontalGap	"Return the horizontal space, in pixel, between two neighbors"	^ horizontalGap ifNil: [ self class horizontalGap ]</body><body package="Roassal2-Layouts">horizontalGap: anInteger	"Set the horizontal space, in pixel, between two neighbors"	horizontalGap := anInteger</body><body package="Roassal2-Layouts">verticalGap	"Return the vertical space, in pixel, between a layer and a children layer"	^ verticalGap ifNil: [ self class verticalGap ]</body><body package="Roassal2-Layouts">verticalGap: anInteger	"Set the vertical space, in pixel, between a layer and a children layer"	verticalGap := anInteger</body></methods><methods><class-id>Roassal2.RTAbstractGraphLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doInitialize: elements 	super doInitialize: elements.	self clear.	self greedyCycleRemoval: elements</body></methods><methods><class-id>Roassal2.RTAbstractGraphLayout</class-id> <category>actions</category><body package="Roassal2-Layouts">on: el edges: edgs	"Do the layout of the elements tacking into account the provided edges"	self userDefinedEdges ifNil: [ self userDefinedEdges: edgs ].	^ self applyOn: el.</body></methods><methods><class-id>Roassal2.RTAbstractGraphLayout</class-id> <category>battista</category><body package="Roassal2-Layouts">greedyCycleRemoval: aCollection	"Di Battista Greedy-Cycle-Removal algorithm. Chapter 9.4, page 297. The last part is not like in the book. The original algorithm only takes	 local optimas into account. This will break ordinary trees sometimes. This version also takes global optimas into account."		| g sl sr s indeg outdeg degrees vertex | 	g := aCollection copy asOrderedCollection.	sl := OrderedCollection new.	sr := OrderedCollection new.	"While g contains a sink (aka leaf)"	g copy		do:			[:node | 			(self childrenFor: node) isEmpty				ifTrue:					[sr addFirst: node.					g remove: node]	"self edges detect: [:edge | edge fromFigure == node] ifNone: [sr addFirst: node. g remove: node]"].	"While g contains a source (aka root)"	g copy		do:			[:node | 			(self parentsFor: node) isEmpty				ifTrue:					[sl addLast: node.					g remove: node]	"self edges detect: [:edge | edge toFigure == node] ifNone: [sl addLast: node. g remove: node]"].	"Calculate deg for all remaining vertices"	degrees := IdentityDictionary new.	g		do:			[:node | 			indeg := (self parentsFor: node) size.			outdeg := (self childrenFor: node) size.	"indeg := self edges inject: 0 into: [:sum :edge | (edge toFigure == node) ifTrue: [sum + 1] ifFalse: [sum]].		outdeg := self edges inject: 0 into: [:sum :edge | (edge fromFigure == node) ifTrue: [sum + 1] ifFalse: [sum]]."			degrees				at: node				put: outdeg - indeg].	"While g not empty"	g := g asSortedCollection: [:a :b | (degrees at: a) &gt;= (degrees at: b)].	[g isEmpty]		whileFalse:			[vertex := g				detect: [:v | (self parentsFor: v) anySatisfy: [:w | sl includes: w]]				ifNone: [g first].	"Corner case: Closed cycle with not root at all. Eg 1 -&gt; 2 -&gt; 3 -&gt; 1"			sl addLast: vertex.			g remove: vertex].	"Remove all leftward edges"	s := sl , sr.	self edges notNil		ifTrue: 			[ self edges copy				do:					[:edge | 					(s indexOf: edge from) &gt; (s indexOf: edge to)						ifTrue: [self edges remove: edge ] ] ].		"Reset the cache"	self clear</body></methods><methods><class-id>Roassal2.RTAbstractGraphLayout class</class-id> <category>constants</category><body package="Roassal2-Layouts">horizontalGap		^3.0</body><body package="Roassal2-Layouts">verticalGap		^20.0</body></methods><methods><class-id>Roassal2.RTAbstractGraphLayout class</class-id> <category>public</category><body package="Roassal2-Layouts">on: elements edges: edges	"Do the layout of the elements tacking into account the provided edges"	^ self new 		userDefinedEdges: edges;		applyOn: elements.</body></methods><methods><class-id>Roassal2.RTAbstractGraphLayout class</class-id> <category>testing</category><body package="Roassal2-Layouts">isAbstract	^ self name = #RTAbstractGraphLayout</body></methods><methods><class-id>Roassal2.RTAbstractRegularTreeLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">horizontallyReverse	shouldBeHorizontallyReversed := true</body><body package="Roassal2-Layouts">isLayered	"Is the layout layered"		^ isLayered</body><body package="Roassal2-Layouts">isLayered: boolean	"Is the layout layered"		isLayered := boolean</body><body package="Roassal2-Layouts">layered	self isLayered: true</body><body package="Roassal2-Layouts">leftGap	^ leftGap</body><body package="Roassal2-Layouts">leftGap: anInteger	leftGap := anInteger</body><body package="Roassal2-Layouts">shouldBeHorizontallyReversed	"Return if the layout is horizontally reversed"	^ shouldBeHorizontallyReversed</body><body package="Roassal2-Layouts">shouldBeVerticallyReversed	"Return if the layout is vertically reversed"	^ shouldBeVerticallyReversed</body><body package="Roassal2-Layouts">topGap	^ topGap</body><body package="Roassal2-Layouts">topGap: anInteger	topGap := anInteger</body><body package="Roassal2-Layouts">verticallyReverse	"Reverse the edge extremities"	shouldBeVerticallyReversed := true</body></methods><methods><class-id>Roassal2.RTAbstractRegularTreeLayout</class-id> <category>private</category><body package="Roassal2-Layouts">atLayer: aNumber add: aNodeCollection	| collection |	collection := nodesByLayer at: aNumber ifAbsentPut: [OrderedCollection new].	collection addAll: aNodeCollection</body><body package="Roassal2-Layouts">rearrangeByLayers: aGraph	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractRegularTreeLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements	| rootNodes |	alreadyLayoutedNodes := OrderedCollection new.	rootNodes := self rootNodesFor: elements.	nodesByLayer := OrderedCollection new.	self		layout: rootNodes		atPoint: self leftGap @ self topGap		atLayer: 1.	self isLayered ifTrue: [		self rearrangeByLayers: elements ]</body><body package="Roassal2-Layouts">doPost: elements	shouldBeHorizontallyReversed ifTrue: [ self horizontallyReverse: elements ].	shouldBeVerticallyReversed ifTrue: [ self verticallyReverse: elements ].</body></methods><methods><class-id>Roassal2.RTAbstractRegularTreeLayout</class-id> <category>reversing</category><body package="Roassal2-Layouts">horizontallyReverse: elements	"Horizontally reverse the elements, as well as the attachpoints"	| g largeur |	g := elements asGroup.	largeur := g extent x.	elements		do: [ :el | el translateTo: (largeur - el position x) @ el position y ]</body><body package="Roassal2-Layouts">inverseAttachPoint	"Invert the attach point of all the considered edges. It is likely that all the attachpoint are the same, but we do not have a garanty"	self shouldSetDefaultAttachPoint ifFalse: [ ^ self ].	edges		do: [ :edge | 			edge shape attachPoint inverted: true.			edge updateFromTo ]</body><body package="Roassal2-Layouts">verticallyReverse: elements	"Vertically reverse the elements, as well as the attachpoints"	| g hauteur |	g := elements asGroup.	hauteur := g extent y.	elements		do: [ :el | el translateTo: el position x @ (hauteur - el position y) ]</body></methods><methods><class-id>Roassal2.RTAbstractRegularTreeLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize	super initialize.	topGap := 5.	leftGap := 5.	isLayered := false.	shouldBeHorizontallyReversed := false.	shouldBeVerticallyReversed := false.	self doAttachPoint.</body></methods><methods><class-id>Roassal2.RTAbstractRegularTreeLayout</class-id> <category>hook-private</category><body package="Roassal2-Layouts">layout: aNodeCollection atPoint: aPoint atLayer: anObject	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractRegularTreeLayout class</class-id> <category>testing</category><body package="Roassal2-Layouts">isAbstract	^ self = RTAbstractRegularTreeLayout</body></methods><methods><class-id>Roassal2.RTInteraction</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTInteraction</class-id> <category>visitor</category><body package="Roassal2-Interactions">accept: aVisitor with: args	aVisitor visitInteraction: self with: args</body></methods><methods><class-id>Roassal2.RTInteraction class</class-id> <category>public</category><body package="Roassal2-Extentions">accept: visitor with: anObject	self new accept: visitor with: anObject.</body><body package="Roassal2-Interactions">initializeElement: element	^ self new initializeElement: element; yourself</body></methods><methods><class-id>Roassal2.RTLinkView</class-id> <category>initialization</category><body package="Roassal2-Exporter-HTML5">initialize	super initialize.	showView := false.</body></methods><methods><class-id>Roassal2.RTLinkView</class-id> <category>accessing</category><body package="Roassal2-Exporter-HTML5">errorView	| v |	v := RTView new.	v add: (RTLabel elementOn: 'Error exporting this view').	^ v</body><body package="Roassal2-Exporter-HTML5">name: aBlock	self nameElement: [ :e | aBlock rtValue: e model ].</body><body package="Roassal2-Exporter-HTML5">nameBlock	^ nameBlock</body><body package="Roassal2-Exporter-HTML5">nameElement: block	nameBlock := block</body><body package="Roassal2-Exporter-HTML5">nameFor: e	^ nameBlock rtValue: e</body><body package="Roassal2-Exporter-HTML5">showView	showView := true.</body><body package="Roassal2-Exporter-HTML5">view: aBlock	self viewElement: [ :e | aBlock rtValue: e model ].</body><body package="Roassal2-Exporter-HTML5">viewBlock	^ viewBlock</body><body package="Roassal2-Exporter-HTML5">viewElement: aBlock	^ viewBlock := aBlock</body><body package="Roassal2-Exporter-HTML5">viewFor: element	^ viewBlock rtValue: element</body></methods><methods><class-id>Roassal2.RTLinkView</class-id> <category>visitor</category><body package="Roassal2-Exporter-HTML5">accept: aVisitor with: args	aVisitor visitLinkView: self with: args</body></methods><methods><class-id>Roassal2.RTLinkView</class-id> <category>hooks</category><body package="Roassal2-Exporter-HTML5">initializeElement: element	element when: TRMouseLeftClick do: [ 		showView ifTrue: [ (self viewFor: element) inspect ]. ].</body></methods><methods><class-id>Roassal2.TRPlatform</class-id> <category>fonts</category><body package="Roassal2-Trachel-Core">defaultFamilyFontName	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">fontFamilyName: name size: number	"return the an instance of the default class font with that name and that size"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">fontListStrings	"return the font name of the fonts in the smalltalk system"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">getFontForSize: aNumber	"return the a font with that size"	self subclassResponsibility.</body><body package="Roassal2-Trachel-Core">widthOfString: string font: font	"retuns the width of string with an instance of the default Font class"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">widthOfString: string fontFamilyName: fontFamilyName fontSize: fontSize	"returns the width of string with the name of the font and the size"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRPlatform</class-id> <category>public</category><body package="Roassal2-Trachel-Core">dateAndTime	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">formFromStream: aStream	"return a form or visual component from a image stream"	^ self formClass fromBinaryStream: (self mimeDecodeToBytes: aStream)</body><body package="Roassal2-Trachel-Core">materializeFromByteArray: array	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">newColorFormWithExtent: extent depth: depth	"returns an instance of color form"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">newFormWithExtent: extent depth: depth	"returns an instance of Form"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">packageNamed: packageName	"return an instance of the default package system in smalltalk"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">roassalIcon	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">session	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">workingDirectory	"retuns the working directory"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRPlatform</class-id> <category>accessing-classes</category><body package="Roassal2-Trachel-Core">affineTransformClass	self subclassResponsibility.</body><body package="Roassal2-Trachel-Core">colorFormClass	"return the default colorform, can be different in other smalltalk systems"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">dateAndTimeClass	"return the default class for date and time"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">formCanvasClass	self subclassResponsibility.</body><body package="Roassal2-Trachel-Core">formClass	"return the default font class"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">httpClientRequestClass	"return the default http client request class"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">imageExporterForType: imageType	"return the class exporter for that image type"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">jsonReaderClass	"return de default json reader class"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">matrixClass	self subclassResponsibility.</body><body package="Roassal2-Trachel-Core">menuMorphClass	"return de default menu class"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">messageTallyClass	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">morphClass	"returns the default Morph or equivalent class in smalltalk systems"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">pngReadWriterClass	"returns the default PNG Reader Writer class"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">polygonTesterClass	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">surfaceClass	self subclassResponsibility.</body><body package="Roassal2-Trachel-Core">trMorphClass	"return the default TRMorph class, or visual component for other smalltalk systems"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRPlatform</class-id> <category>http requests</category><body package="Roassal2-Trachel-Core">download: aString	"returns the http web content from a direction like url"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">downloadContent: aString	"returns the http web content from a direction like url"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">downloadPng: aUrl	"return the content of a url, the content is an image"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">mimeDecodeToBytes: bytes	"return a stream from bytes"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">mimeEncode: aStream	"convert a stream to bytes"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">mimeEncode: aStream multiLine: aBool	"conver a stream to bytes using the skip character"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRPlatform</class-id> <category>drawing - helpers</category><body package="Roassal2-Trachel-Core">computeArcPathFor: aShape	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">computeEllipsePathFor: aShape	self subclassResponsibility.</body><body package="Roassal2-Trachel-Core">computeRoundBoxPathFor: aShape	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRPlatform</class-id> <category>windows</category><body package="Roassal2-Trachel-Core">browseClass: aClass	"Open the default system browser for a class"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">createPopupFor: aMorph in: aPoint background: aColor string: aString	"create a platform popup"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">deletePopup: apopup	"delete the platform popup for a class"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">dialogChooseFrom: options values: values	"open a dialog window to select one of the options with the same values"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">dialogInform: aMessage	"open a dialog with the message string"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">dialogRequest: request initialAnswer: answer	"open a dialog window to ask one text input for the user with the initiali answer"	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">dialogRequestSaveFilename: filename extensions: exts path: path	"open a dialog window from the file system to save a fil"	self subclassResponsibility.</body><body package="Roassal2-Trachel-Core">showTemporaryCursor: cursorOrNil	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRPlatform</class-id> <category>utilities</category><body package="Roassal2-Trachel-Core">validInteractionsOf: shape oklist: list	self subclassResponsibility</body><body package="Roassal2-Trachel-Core">visitInteractionsFor: aVisitor and: anObject	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRPlatform</class-id> <category>date and time</category><body package="Roassal2-Trachel-Core">dateAndTimeFromString: aString	"create a date and time from a string"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRPlatform class</class-id> <category>default</category><body package="Roassal2-Trachel-Core">current	current isClass ifTrue: [ current := nil ].	^ current ifNil: [ 		current := self subclasses detect: [ :any | any isActivePlatform ].		current := current new. ].</body></methods><methods><class-id>Roassal2.TRPlatform class</class-id> <category>testing</category><body package="Roassal2-Trachel-Core">isActivePlatform	self subclassResponsibility.</body></methods><methods><class-id>Roassal2.TRVWPlatform</class-id> <category>public</category><body package="Roassal2-Visualworks">browseClass: aClass	"TRPlatform current browseClass: TRPlatform"		^ self browserClass newOnClass: aClass</body><body package="Roassal2-Visualworks">browserClass		^ Refactory.Browser.RefactoringBrowser</body><body package="Roassal2-Visualworks">bundleNamed: aName	"TRPlatform current bundleNamed: 'Roassal2-full'"		^ self bundles		detect: [:e | e name = aName]		ifNone: []</body><body package="Roassal2-Visualworks">bundles	"TRPlatform current bundles"		^ #{Store.Registry}		ifDefinedDo: [:reg | reg allBundles]		elseDo: [OrderedCollection new]</body><body package="Roassal2-Visualworks">dateAndTime	"TRPlatform current dateAndTimeNow"	^ Timestamp</body><body package="Roassal2-Visualworks">dateAndTimeFromString: aString	('####-##-##T##:##:##' match: aString)		ifTrue: 			[| date time |			date := Date readFrom: (aString copyFrom: 1 to: 10) readStream.			time := Time readFrom: (aString copyFrom: 12 to: 16) readStream.			^Timestamp fromDate: date andTime: time].	^Timestamp readFromDateAndTime: aString readStream</body><body package="Roassal2-Visualworks">dialogChooseFrom: aList		^ self dialogChooseFrom: aList values: aList</body><body package="Roassal2-Visualworks">dialogChooseFrom: aLabelList values: aValuesList	"TRPlatform current dialogChooseFrom: #('One' 'Two' 'Three') values: #(1 2 3)"		^ Dialog		choose: String new		fromList: aLabelList		values: aValuesList		lines: (aLabelList size min: 10)		cancel: []</body><body package="Roassal2-Visualworks">dialogInform: aMessage	"TRPlatform current dialogInform: 'Insert your message here...'"	^ Dialog warn: aMessage</body><body package="Roassal2-Visualworks">dialogRequest: aMessage		^ self dialogRequest: aMessage initialAnswer: String new</body><body package="Roassal2-Visualworks">dialogRequest: aMessage initialAnswer: aString	"TRPlatform current dialogRequest: 'Please enter a new name:' initialAnswer: 'old name'"		^ Dialog request: aMessage initialAnswer: aString</body><body package="Roassal2-Visualworks">dialogRequestSaveFilename: aMessage extensions: aCollection path: aPath	"TRPlatform current dialogRequestSaveFilename: 'Please enter a new name:' extensions: #() path: nil"	"path and extensions are currently ignored"	"Returns a Filename instance, not a String"		| pattern result |	pattern := aCollection isEmptyOrNil		ifTrue: ['*']		ifFalse: ['*.' , aCollection first].	result := Dialog		requestFileName: aMessage		default: pattern		version: #new		for: nil.	^ result isEmptyOrNil		ifTrue: [nil]		ifFalse: [			(result includes: $.) ifFalse: [ result := result,'.',aCollection first ].						result asFilename]</body><body package="Roassal2-Visualworks">formClass	^ Pixmap</body><body package="Roassal2-Visualworks">getFontForSize: aNumber	^ Screen default defaultFontPolicy findFont: (FontDescription default copy pixelSize: aNumber)</body><body package="Roassal2-Visualworks">inform: aMessage	^ self dialogInform: aMessage</body><body package="Roassal2-Visualworks">menuMorphClass		^ Menu</body><body package="Roassal2-Visualworks">monticelloRepositoryClass		^ nil</body><body package="Roassal2-Visualworks">newColorFormWithExtent: extent depth: depth	^ Pixmap extent: extent</body><body package="Roassal2-Visualworks">newFormWithExtent: extent depth: depth	^ Pixmap extent: extent</body><body package="Roassal2-Visualworks">notFoundError		^ self subclassResponsibility</body><body package="Roassal2-Visualworks">openFile: aFilename	"	TRPlatform current openFile: 'test.png'.	"	| binding |	binding := #{MinimalShellInterface} bindingOrNil.	binding == nil 		ifTrue: [ 			binding := #{ExternalWebBrowser} bindingOrNil.			binding value open: aFilename ]		ifFalse: [			binding value openFile: aFilename from: Window currentWindow ].</body><body package="Roassal2-Visualworks">packageNamed: aName	"TRPlatform current packageNamed: 'Trachel-Core'"	^ self packages		detect: [:e | e name = aName]		ifNone: []</body><body package="Roassal2-Visualworks">packages	"TRPlatform current packages"		^ #{Store.Registry}		ifDefinedDo: [:reg | reg allPackages]		elseDo: [OrderedCollection new]</body><body package="Roassal2-Visualworks">packagesMatching: aPattern	"TRPlatform current packagesMatching: 'Builder-*'"		^ #{Store.Registry}		ifDefinedDo: [:reg | reg allPackages select: [:e | aPattern match: e name]]		elseDo: [OrderedCollection new]</body><body package="Roassal2-Visualworks">roassalIcon	| f i |	i := self class roassalIcon.	f := Pixmap extent: i extent.	i displayOn: f graphicsContext.	^ f.</body><body package="Roassal2-Visualworks">session	"TODO"	^ self</body><body package="Roassal2-Visualworks">visitInteractionsFor: aVisitor and: anObject		| first list temp classes |	first := true.	list := OrderedCollection new.	temp := OrderedCollection new.	classes := aVisitor validInteractions collect: [:string | Smalltalk at: ('Roassal2.',string) asSymbol].	anObject announcer subscriptions trSubscriptions do: [:arr |		arr do: [:sub | | cls |			cls := sub subscriber method outerMethod mclass.			((classes anySatisfy: [:c | c == cls or: [c inheritsFrom: cls ] ])			and: [(temp includes: cls) not]) ifTrue: [				temp add: cls.				list add: sub]]].	aVisitor stream nextPutAll: '['.	list do: [:sub | | obj cls |		obj := sub subscriber copiedValues.		obj := obj isCollection ifTrue: [obj first] ifFalse: [ obj ].		cls := sub subscriber method outerMethod mclass.		cls = RTDraggableView ifTrue: [obj := cls new].		cls = RTZoomableView ifTrue: [obj := cls new].		first  ifTrue: [			first := false.			obj accept: aVisitor with: anObject]		ifFalse: [			aVisitor stream nextPutAll: ', '.			obj accept: aVisitor with: anObject]].	aVisitor stream nextPutAll: ']'.	self flag: 'review'</body><body package="Roassal2-Visualworks">widthOfString: string fontFamilyName: fontFamilyName fontSize: fontSize	^ (Screen default defaultFontPolicy findFont: 		(FontDescription default copy pixelSize: fontSize; family: fontFamilyName)) 		widthOfString: string</body><body package="Roassal2-Visualworks">workingDirectory	^ Filename currentDirectory</body></methods><methods><class-id>Roassal2.TRVWPlatform</class-id> <category>accessing-classes</category><body package="Roassal2-Visualworks">affineTransformClass	^ AthensAffineTransform</body><body package="Roassal2-Visualworks">colorFormClass	^ Pixmap</body><body package="Roassal2-Visualworks">fontMetricsClass	^ CairoGraphics.FontExtents</body><body package="Roassal2-Visualworks">formCanvasClass	^ FormCanvas</body><body package="Roassal2-Visualworks">linearGradientClass	^ LinearGradient</body><body package="Roassal2-Visualworks">matrixClass	^ Matrix</body><body package="Roassal2-Visualworks">morphClass	^ VisualComponent</body><body package="Roassal2-Visualworks">pngReadWriterClass	^ TRPNGWriter</body><body package="Roassal2-Visualworks">polygonTesterClass	^ AthensPolygonTester</body><body package="Roassal2-Visualworks">surfaceClass	^ AthensCairoSurface</body><body package="Roassal2-Visualworks">trMorphClass	^ TRVisual</body></methods><methods><class-id>Roassal2.TRVWPlatform</class-id> <category>utilities</category><body package="Roassal2-Visualworks">dateTimeStringExample	^ 'Ebola2.1,POINT (-9.696645 9.945587),01-01-2014T00:00:00,01-01-2015T00:00:00,Guinea,9.945587,-9.696645,ZEBOV,528,337,64%,"Outbreak is currently ongoing in southeastern Guinea, including the capital?Conakry?and the neighbour countries?Sierra Leone?andLiberia"Ebola2.2,POINT (32.290275 1.373333),01-01-2012T00:00:00,12-29-0002T00:00:00,Uganda,1.373333,32.290275,SEBOV,24,17,71%,Outbreak occurred in the?Kibaale District.[34]Ebola2.6,POINT (21.758664 -4.038333),01-01-2008T00:00:00,01-01-2009T00:00:00,Democratic Republic of Congo,-4.038333,21.758664,ZEBOV,32,14,45%,Outbreak occurred in the Mweka and Luebo health zones of the Province of?Kasai-Occidental.[33]'</body></methods><methods><class-id>Roassal2.TRVWPlatform</class-id> <category>fonts</category><body package="Roassal2-Visualworks">defaultFamilyFontName	"Default Family font"	| fontList |	fontList := TRPlatform current fontListStrings.	fontList ifEmpty: [ ^ TRPlatform current defaultFont familyName ].	(fontList includes: 'Source Sans Pro') ifTrue: [ ^ 'Source Sans Pro' ].	(fontList includes: 'DejaVu Sans') ifTrue: [ ^ 'DejaVu Sans' ].		^ TRPlatform current defaultFont familyName</body><body package="Roassal2-Visualworks">defaultFont	^ Screen default defaultFontPolicy defaultFont fontDescription</body><body package="Roassal2-Visualworks">fontFamilyName: name pointSize: number	"		TRPlatform current fontFamilyName: 'tahoma' pointSize: 17.78	"	^ Screen default defaultFontPolicy findFont: (FontDescription new pixelSize: number asFloat; family: name; yourself)</body><body package="Roassal2-Visualworks">fontListStrings	^ Screen default defaultFontPolicy availableFonts collect: #family</body></methods><methods><class-id>Roassal2.TRVWPlatform</class-id> <category>drawing - helpers</category><body package="Roassal2-Visualworks">computeArcPathFor: aShape	| i e aAngle bAngle aSin aCos bSin bCos delta zaAngle zbAngle |	aShape canvas ifNil: [ ^ nil ].	aAngle:= aShape alphaAngle value degreesToRadians.	bAngle:= aShape betaAngle value degreesToRadians.	i := aShape innerRadius value.	e := aShape externalRadius value.	aCos := aAngle cos.	aSin := aAngle sin negated.	bCos := bAngle cos.	bSin := bAngle sin negated.	delta := bAngle - aAngle.	^ aShape athensCanvas	createPath: [ :builder | 		zaAngle := aAngle negated.		zbAngle := bAngle negated.		builder			absolute;			arcRadianStart: zaAngle sweep: delta negated center: 0@0 radius: i;			lineTo: ((i * (bCos)) @ (i * (bSin)));			arcRadianStart: zbAngle sweep: delta center: 0@0 radius: e;			lineTo: ((e * (aCos)) @ (e * (aSin)));			yourself.]</body><body package="Roassal2-Visualworks">computeCircleHeadPathFor: shape	| vector r unit radius center |	vector := shape to - shape from.	r := vector r.	r = 0		ifTrue: [ ^ false ].	unit := vector / r.	radius := unit / 2 * shape mySize.	center := shape to - radius.	^  shape athensCanvas		createPath: [ :builder | 			builder				absolute;				moveTo: center + radius;				arcDegreeStart: 0 sweep: 180 center: center radius: radius x;				arcDegreeStart: 180 sweep: 360 center: center radius: radius x ]</body><body package="Roassal2-Visualworks">computeEllipsePathFor: aShape	| halfWidth halfHeight rectangle |	aShape canvas ifNil: [ ^ nil ].	rectangle := aShape basicEncompassingRectangle.	halfWidth := rectangle width / 2 asFloat.	halfHeight := rectangle height / 2 asFloat.	^ aShape athensCanvas		createPath: [ :builder | 					builder				moveTo: halfWidth negated @ 0;				curveControl: halfWidth negated @ (halfHeight negated * 0.55)					control: (0.55 * (halfWidth negated)) @ halfHeight negated					end: 0 @ halfHeight negated;				curveControl: (halfWidth * 0.55) @ halfHeight negated 					control: halfWidth @ (0.55 * (halfHeight negated)) 					end: halfWidth @ 0;				curveControl:  halfWidth @ (halfHeight * 0.55) 					control: (0.55 * halfWidth ) @ halfHeight 					end: 0 @ halfHeight;				curveControl: (halfWidth negated * 0.55) @ halfHeight					control: halfWidth negated @ (halfHeight * 0.55)					end: halfWidth negated @ 0 ]</body><body package="Roassal2-Visualworks">computeRoundBoxPathFor: aShape	| r vr hr rectangle pi2 |	aShape canvas ifNil: [ ^ nil ].	r := aShape borderRadius.	vr := 0 @ r.	hr := r @ 0.	pi2 := Float halfPi.	rectangle := aShape basicEncompassingRectangle.	^ aShape athensCanvas		createPath: [ :builder | 			builder				moveTo: rectangle topLeft + hr;				lineTo: rectangle topRight - hr;				arcRadianStart: pi2 * 3					sweep: pi2					center: rectangle topRight - hr + vr 					radius: r;				lineTo: rectangle bottomRight - vr;				arcRadianStart: 0					sweep: pi2					center: rectangle bottomRight - r 					radius: r;				lineTo: rectangle bottomLeft + hr;				arcRadianStart: pi2					sweep: pi2					center: rectangle bottomLeft + hr - vr					radius: r;				lineTo: rectangle topLeft + vr;				arcRadianStart: pi2*2					sweep: pi2					center: rectangle topLeft + r					radius: r;				closePath ]</body><body package="Roassal2-Visualworks">computeSVGPathFor: shape	^ shape athensCanvas createPath: [ :builder |		| absolute p point key args a b c lastControlPoint twoThirds cp1 cp2 |		absolute := true.		lastControlPoint := nil.		p := 0@0.		point := [:da | absolute ifTrue: [da] ifFalse: [p+da] ].				shape curves do: [ :curve | 			key := curve first.			args := curve second.			key = #absolute ifTrue: [absolute := true].			key = #relative ifTrue: [absolute := false].			key = #close ifTrue: [				builder closePath.				lastControlPoint := nil				].			key = #moveTo: ifTrue: [ 				c := point value: args first.				lastControlPoint := nil.				builder moveTo: c ].			key = #lineTo: ifTrue: [ 				c := point value: args first.				lastControlPoint := nil.				builder lineTo: c ].			key = #curveVia:and:to: ifTrue: [				a := point value: args first.				b := lastControlPoint := point value: args second.				c := point value: args third.				builder curveVia: a and: b to: c. ].			key = #curveVia:to: ifTrue: [				a := p.				b := point value: args first.				c := point value: args second.				lastControlPoint := nil.				twoThirds := (2/3) asFloat.				cp1 := b - a * twoThirds + a.				cp2 := b - c * twoThirds + c.				builder curveVia: cp1 and: cp2 to: c].			key = #reflectedCurveVia:to: ifTrue: [				a := lastControlPoint ifNil: [ p ] ifNotNil: [ p * 2 - lastControlPoint ].				b := lastControlPoint := point value: args first.				c := point value: args second.				builder curveVia: a and: b to: c. ].			key = #ellipticalArc:xrot:large:sweep:to: ifTrue: [				self flag: 'todo'].			key = #hLineTo: ifTrue: [				c := absolute ifTrue: [args first@p y] ifFalse: [p+(args first @ 0)].				builder lineTo: c].			key = #vLineTo: ifTrue: [				c := absolute ifTrue: [ p x @ args first] ifFalse: [p+(0@ args first)].				builder lineTo: c].			p := c.		] ]</body><body package="Roassal2-Visualworks">drawTextPathFor: shape canvas: canvas	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRVWPlatform</class-id> <category>http requests</category><body package="Roassal2-Visualworks">download: aString	"returns the http web content from a direction like url"	^aString asUrl retrieveContents readStream</body><body package="Roassal2-Visualworks">downloadContent: aString	^ aString asURI get contents</body><body package="Roassal2-Visualworks">mimeDecodeToBytes: aStream	"return a binary stream"		^ (aStream contents withEncoding: 'Base64') readStream</body><body package="Roassal2-Visualworks">mimeEncode: aStream	^ (aStream contents asByteString asCStringEncoding: #base64) asString readStream</body></methods><methods><class-id>Roassal2.TRVWPlatform</class-id> <category>windows</category><body package="Roassal2-Visualworks">dialogConfirm: question		^ Dialog confirm: question.</body><body package="Roassal2-Visualworks">showTemporaryCursor: cursorOrNil	cursorOrNil ifNil: [ ^ Cursor normal show ].	cursorOrNil show</body></methods><methods><class-id>Roassal2.TRVWPlatform class</class-id> <category>testing</category><body package="Roassal2-Visualworks">isActivePlatform	^ true</body></methods><methods><class-id>Roassal2.RTAttachPoint</class-id> <category>testing</category><body package="Roassal2-AttachPoint">isInverted	"Return wether the attach point is inverted"	^ inverted</body></methods><methods><class-id>Roassal2.RTAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">basicEndingPointOf: anEdge	self subclassResponsibility</body><body package="Roassal2-AttachPoint">basicStartingPointOf: anEdge	self subclassResponsibility</body><body package="Roassal2-AttachPoint">endingPointOf: anEdge	(anEdge from = anEdge to) 		ifTrue: [ ^ anEdge from encompassingRectangle topCenter ].    ^ inverted        ifTrue: [ self basicStartingPointOf: anEdge ]        ifFalse: [ self basicEndingPointOf: anEdge ]</body><body package="Roassal2-AttachPoint">inverted	"Swap the starting and ending points"	inverted := inverted not</body><body package="Roassal2-AttachPoint">inverted: aBool	"Set if the attachpoint should be inverted"	inverted := aBool</body><body package="Roassal2-AttachPoint">startingPointOf: anEdge	(anEdge from = anEdge to) 		ifTrue: [ ^ anEdge from encompassingRectangle rightCenter ].    ^ inverted        ifTrue: [ self basicEndingPointOf: anEdge ]        ifFalse: [ self basicStartingPointOf: anEdge ]</body></methods><methods><class-id>Roassal2.RTAttachPoint</class-id> <category>initialization</category><body package="Roassal2-AttachPoint">initialize	super initialize.	inverted := false.</body></methods><methods><class-id>Roassal2.RTAttachPoint class</class-id> <category>public</category><body package="Roassal2-AttachPoint">instance	instance ifNil: [ instance := self new ].	^ instance</body><body package="Roassal2-AttachPoint">resetInstance	instance := nil</body></methods><methods><class-id>Roassal2.RTAbstractShorterDistanceAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">attachPointsFor: anEdge on: anElement	self subclassResponsibility</body><body package="Roassal2-AttachPoint">basicEndingPointOf: anEdge	^ self attachPointFor: anEdge on: anEdge from with: (self destinationAttachPointsFor: anEdge)</body><body package="Roassal2-AttachPoint">basicStartingPointOf: anEdge	^ self attachPointFor: anEdge on: anEdge to with: (self startingAttachPointsFor: anEdge)</body></methods><methods><class-id>Roassal2.RTAbstractShorterDistanceAttachPoint</class-id> <category>util</category><body package="Roassal2-AttachPoint">attachPointFor: anEdge on: referenceElement with: elementsPossibleAttachPoints	"Returns the attach point having the shortest route for given edge on given element."	| p dp t |	"We take an arbitrary point. The center of the reference point"	p := referenceElement encompassingRectangle center.		"We get the list of dot products"	dp := elementsPossibleAttachPoints collect: [ :pp | 		t := p - pp.		Array with: (t dotProduct: t) with:  pp ].		"We look for the shortest path and return the point"	^ (dp inject: dp first into: [ :shorter :el | (shorter first &lt; el first) ifTrue: [ shorter ] ifFalse: [ el ]]) second</body><body package="Roassal2-AttachPoint">destinationAttachPointsFor: anEdge	"Return the four possible attach points for each of the four sides for this edges destination node."	^ self attachPointsFor: anEdge on: (anEdge to).</body><body package="Roassal2-AttachPoint">startingAttachPointsFor: anEdge	"Return the four possible attach points for each of the four sides for this edges starting node."	^ self attachPointsFor: anEdge on: (anEdge from).</body></methods><methods><class-id>Roassal2.RTShorterDistanceAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">attachPointsFor: anEdge on: anElement	"Return the four possible attach points for each of the four sides for given edge on given element."	| rec center |	rec := anElement encompassingRectangle.	center := rec center.	^ Array 		"upper side"		with: ((center x) @ rec top)		 "right side"		with: (rec right @ (center y))		"lower side"		with: ((center x) @ rec bottom)		"left side"		with: (rec left @ (center y))</body></methods><methods><class-id>Roassal2.RTLineDecorationShape class</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRAbstractLineDecoratorShape</body></methods><methods><class-id>Roassal2.RTLineDecorationShape class</class-id> <category>converting</category><body package="Roassal2-LineDecorations">asHead	^ RTLineHead shape: self</body><body package="Roassal2-LineDecorations">asTail	^ RTLineTail shape: self</body></methods><methods><class-id>Roassal2.RTSimpleArrow class</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRSimpleArrowShape</body></methods><methods><class-id>Roassal2.TRUserInputEvent</class-id> <category>private - accessing</category><body package="Roassal2-Trachel-Events">commandKeyPressed: aBoolean	commandKeyPressed := aBoolean</body><body package="Roassal2-Trachel-Events">controlKeyPressed: aBoolean	controlKeyPressed := aBoolean</body><body package="Roassal2-Trachel-Events">modifiers: modifiers	commandKeyPressed := modifiers anyMask: 2r01000000.	controlKeyPressed := modifiers anyMask: 2r00010000.	optionKeyPressed := modifiers anyMask: 2r00100000.	shiftKeyPressed := modifiers anyMask: 2r00001000</body><body package="Roassal2-Trachel-Events">optionKeyPressed: aBoolean	optionKeyPressed := aBoolean</body><body package="Roassal2-Trachel-Events">shiftKeyPressed: aBoolean	shiftKeyPressed := aBoolean</body></methods><methods><class-id>Roassal2.TRUserInputEvent</class-id> <category>accessing</category><body package="Roassal2-Trachel-Events">altKeyPressed	"Answer true if the alt/option key on the keyboard was being held down when this event occurred."	^ self optionKeyPressed</body><body package="Roassal2-Trachel-Events">anyModifierKeyPressed	"Answer true if command, option/alt or control key on the keyboard was being held down when this event occurred. Ignores shift key."	^ self commandKeyPressed or: [ self optionKeyPressed or: [ self controlKeyPressed ] ]</body><body package="Roassal2-Trachel-Events">commandKeyPressed	"Answer true if the command key on the keyboard was being held down when this event occurred."	^ commandKeyPressed</body><body package="Roassal2-Trachel-Events">controlKeyPressed	"Answer true if the control key on the keyboard was being held down when this event occurred."	^ controlKeyPressed</body><body package="Roassal2-Trachel-Events">optionKeyPressed	"Answer true if the alt/option key on the keyboard was being held down when this event occurred."	^ optionKeyPressed</body><body package="Roassal2-Trachel-Events">shiftKeyPressed	"Answer true if the shift key on the keyboard was being held down when this event occurred"	^ shiftKeyPressed</body><body package="Roassal2-Trachel-Events">shiftPressed	"Answer true if the shift key on the keyboard was being held down when this event occurred.	This method is here for Morphic compatibility"	^ self shiftKeyPressed</body></methods><methods><class-id>Roassal2.TRUserInputEvent</class-id> <category>initialization</category><body package="Roassal2-Trachel-Events">initialize	super initialize.	commandKeyPressed := false.	controlKeyPressed := false.	optionKeyPressed := false.	shiftKeyPressed := false</body></methods><methods><class-id>Roassal2.TRUserInputEvent class</class-id> <category>instance creation</category><body package="Roassal2-Trachel-Events">fromEvent: aUserInputEvent	^ self new		commandKeyPressed: aUserInputEvent commandKeyPressed;		controlKeyPressed: aUserInputEvent controlKeyPressed;		shiftKeyPressed: aUserInputEvent shiftPressed;		optionKeyPressed: aUserInputEvent optionKeyPressed;		yourself</body></methods><methods><class-id>Roassal2.TRAbstractMouseEvent</class-id> <category>testing</category><body package="Roassal2-Trachel-Events">isPositionAboveShape	^ shape encompassingRectangle containsPoint: self positionFromCamera</body></methods><methods><class-id>Roassal2.TRMouseAbstractDrop</class-id> <category>accessing</category><body package="Roassal2-Trachel-Events">draggedElement	^ draggedShape element</body><body package="Roassal2-Trachel-Events">draggedShape	^ draggedShape</body><body package="Roassal2-Trachel-Events">draggedShape: aShape	draggedShape := aShape</body></methods><methods><class-id>Roassal2.RTShape</class-id> <category>public</category><body package="Roassal2-Shapes">+ anotherShape	"Return a composed shape"	^ RTCompositeShape with: self with: anotherShape instance</body><body package="Roassal2-Shapes">compoundElement	^ RTCompoundElement new addShape: self; yourself</body><body package="Roassal2-Shapes">compoundElementOn: aModel	^ RTCompoundElement new model: aModel; addShape: self; yourself</body><body package="Roassal2-Shapes">compoundElementsOn: models	| group |	group := RTGroup new.	models do: [ :m | group add: (self compoundElementOn: m) ].	^ group</body><body package="Roassal2-Shapes">element	^ RTElement new addShape: self; yourself</body><body package="Roassal2-Shapes">elementOn: aModel	^ RTElement new model: aModel; addShape: self; yourself</body><body package="Roassal2-Shapes">elementsOn: models	| group |	group := RTGroup new.	models do: [ :m | group add: (self elementOn: m) ].	^ group</body><body package="Roassal2-Shapes">trachelShapeFor: anElement	| trachelShape |	trachelShape := self trachelShapeClass new.	self updateFor: anElement trachelShape: trachelShape.	^ trachelShape</body></methods><methods><class-id>Roassal2.RTShape</class-id> <category>hooks</category><body package="Roassal2-Shapes">borderColor: aBlockOrAColorOrSymbol	"This method is empty, and may be overideen in subclasses. Having this method is empty enables RTLine and other to receive that message, and doing anything."</body><body package="Roassal2-Shapes">borderWidth: aBlockOrAColorOrSymbol	"This method is empty, and may be overideen in subclasses. Having this method is empty enables RTLine and other to receive that message, and doing anything."</body><body package="Roassal2-Shapes">trachelShapeClass	self subclassResponsibility</body><body package="Roassal2-Shapes">updateFor: edgeOrElement	self updateFor: edgeOrElement trachelShape: edgeOrElement trachelShape</body><body package="Roassal2-Shapes">updateFor: edgeOrElement trachelShape: trachelShape	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTShape</class-id> <category>configuration</category><body package="Roassal2-Shapes">defaultColor	"Return the color used by myself."	^ self class defaultColor</body></methods><methods><class-id>Roassal2.RTShape</class-id> <category>accessing</category><body package="Roassal2-Shapes">color	^ color</body><body package="Roassal2-Shapes">color: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self colorElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">colorElement: aBlock	color := aBlock</body><body package="Roassal2-Shapes">fillColor	^ self color</body><body package="Roassal2-Shapes">fillColor: arg	^ self color: arg</body><body package="Roassal2-Shapes">fillColorElement: arg	^ self colorElement: arg</body><body package="Roassal2-Shapes">geometryFor: anElement	"Return a geometric representation of the shape. A geometric representation is used for computing intersections, overlapping, etc."	^ GRectangle		origin: anElement encompassingRectangle origin		corner: anElement encompassingRectangle corner</body><body package="Roassal2-Shapes">instance	^ self</body><body package="Roassal2-Shapes">rotation	^ rotation</body><body package="Roassal2-Shapes">rotation: aValueOrAOneArgBlock	self rotationElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">rotationElement: aBlock	rotation := aBlock</body><body package="Roassal2-Shapes">scale	^ scale</body><body package="Roassal2-Shapes">scale: aValueOrAOneArgBlock	self scaleElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">scaleElement: aBlock	scale := aBlock</body></methods><methods><class-id>Roassal2.RTShape</class-id> <category>rendering</category><body package="Roassal2-Shapes">colorFor: anElement	^ color rtValue: anElement</body><body package="Roassal2-Shapes">rotationFor: anElement	^ rotation rtValue: anElement</body><body package="Roassal2-Shapes">scaleFor: anElement	^ scale rtValue: anElement</body></methods><methods><class-id>Roassal2.RTShape</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	color := self defaultColor.	rotation := 0. 	scale := 1.</body></methods><methods><class-id>Roassal2.RTShape class</class-id> <category>public</category><body package="Roassal2-Shapes">+ anotherShape	^ self new + anotherShape</body><body package="Roassal2-Shapes">color: aColor	^ self new color: aColor</body><body package="Roassal2-Shapes">compoundElementOn: aModel	^ self instance compoundElementOn: aModel</body><body package="Roassal2-Shapes">compoundElementsOn: models	"Return a group of elements, which is a kind of ordered collection"	| group aShape |	group := RTGroup new.	aShape := self instance.	models do: [ :m | 		group add: (aShape compoundElementOn: m) ].	^ group</body><body package="Roassal2-Shapes">elementOn: aModel	"Create an element with aModel as model and an instance of myself (which could be a subclass) as shape"	^ self instance elementOn: aModel</body><body package="Roassal2-Shapes">elementsOn: models	"Return a group of elements, which is a kind of ordered collection"	| group aShape |	group := RTGroup new.	aShape := self instance.	models do: [ :m | 		group add: (aShape elementOn: m) ].	^ group</body></methods><methods><class-id>Roassal2.RTShape class</class-id> <category>accessing</category><body package="Roassal2-Shapes">compoundElement	^ self instance compoundElement</body><body package="Roassal2-Shapes">element	^ self instance element</body><body package="Roassal2-Shapes">instance	^ self new</body></methods><methods><class-id>Roassal2.RTShape class</class-id> <category>initialization</category><body package="Roassal2-Shapes">defaultColor	^ Color veryVeryLightGray</body></methods><methods><class-id>Roassal2.RTAbstractElementShape</class-id> <category>configuration</category><body package="Roassal2-Shapes">defaultHeight	^ 5</body><body package="Roassal2-Shapes">defaultWidth	^ 5</body><body package="Roassal2-Shapes">noBorder	self borderWidth: 0</body></methods><methods><class-id>Roassal2.RTAbstractElementShape</class-id> <category>accessing</category><body package="Roassal2-Shapes">borderColor	^ borderColor</body><body package="Roassal2-Shapes">borderColor: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self borderColorElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">borderColorElement: aValueOrAOneArgBlock	borderColor := aValueOrAOneArgBlock</body><body package="Roassal2-Shapes">borderColorFor: anElement	^ borderColor rtValue: anElement</body><body package="Roassal2-Shapes">borderWidth	^ borderWidth</body><body package="Roassal2-Shapes">borderWidth: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self borderWidthElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">borderWidthElement: aValueOrAOneArgBlock	borderWidth := aValueOrAOneArgBlock</body><body package="Roassal2-Shapes">borderWidthFor: anElement	^ borderWidth rtValue: anElement</body><body package="Roassal2-Shapes">extent: extentAsPoint	self widthElement: extentAsPoint x.	self heightElement: extentAsPoint y.</body><body package="Roassal2-Shapes">height	^ height</body><body package="Roassal2-Shapes">height: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self heightElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">heightElement: aValueOrASymbolOrAOneArgBlock	height := aValueOrASymbolOrAOneArgBlock</body><body package="Roassal2-Shapes">size: aValueOrASymbolOrAOneArgBlock	self height: aValueOrASymbolOrAOneArgBlock.	self width: aValueOrASymbolOrAOneArgBlock</body><body package="Roassal2-Shapes">sizeElement: aValueOrASymbolOrAOneArgBlock	"Argument evaluated against the element"	self heightElement: aValueOrASymbolOrAOneArgBlock.	self widthElement: aValueOrASymbolOrAOneArgBlock</body><body package="Roassal2-Shapes">width	^ width</body><body package="Roassal2-Shapes">width: aValueOrASymbolOrAOneArgBlock	"aValueOrASymbolOrAOneArgBlock is applied on the object model"	self widthElement: [ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">widthElement: aValueOrASymbolOrAOneArgBlock	width := aValueOrASymbolOrAOneArgBlock</body></methods><methods><class-id>Roassal2.RTAbstractElementShape</class-id> <category>rendering</category><body package="Roassal2-Shapes">heightFor: anElement	^ height rtValue: anElement</body><body package="Roassal2-Shapes">widthFor: anElement	^ width rtValue: anElement</body></methods><methods><class-id>Roassal2.RTAbstractElementShape</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	width := self defaultWidth.	height := self defaultHeight.	borderWidth := 1</body></methods><methods><class-id>Roassal2.RTBitmap</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeClass	^ TRBitmapShape</body><body package="Roassal2-Shapes">updateFor: anElement trachelShape: trachelShape	| ex |	trachelShape isNil ifTrue: [ ^ self ].		form isNil ifTrue: [ 		ex := (self widthFor: anElement) @ (self heightFor: anElement).		trachelShape extent: ex	] ifFalse: [ 		trachelShape form: (self form rtValue: anElement). ].	trachelShape 		rotateByDegrees:  (self rotationFor: anElement);		scaleBy: (self scaleFor: anElement)</body></methods><methods><class-id>Roassal2.RTBitmap</class-id> <category>accessing</category><body package="Roassal2-Shapes">form	^ form</body><body package="Roassal2-Shapes">form: aValueOrOneArgBlock	"aValueOrOneArgBlock takes a model as input"	self formElement: [ :anElement | aValueOrOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">formElement: aValueOrOneArgBlock	"aValueOrOneArgBlock takes a roassal element as input"	form := aValueOrOneArgBlock</body></methods><methods><class-id>Roassal2.RTScrollBar</class-id> <category>as yet unclassified</category><body package="Roassal2-Interactions">addScrollToview: aView		"add a scroll bar to the view"	| b|	b := RTScrollBarBuilder new.	b view: aView.	b build.</body><body package="Roassal2-Interactions">initializeElement: aView	self addScrollToview: aView</body></methods><methods><class-id>Roassal2.RTLegendItem</class-id> <category>hooks</category><body package="Roassal2-Builder-Legend">execute	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTLegendItem</class-id> <category>utility</category><body package="Roassal2-Builder-Legend">newLabelShape: widthDescription	"Return a new label with the argument as the content of the label"	^ RTLabel new color: self textColor; text: widthDescription; height: textSize; yourself</body><body package="Roassal2-Builder-Legend">textColor	^ Color lightGray</body></methods><methods><class-id>Roassal2.RTLegendItem</class-id> <category>accessing</category><body package="Roassal2-Builder-Legend">textSize	^ textSize</body><body package="Roassal2-Builder-Legend">textSize: anObject	textSize := anObject</body></methods><methods><class-id>Roassal2.RTLegendItem</class-id> <category>initialization</category><body package="Roassal2-Builder-Legend">initialize	super initialize.	self textSize: TRLabelShape defaultFontSize.</body></methods><methods><class-id>Roassal2.RTSortBlock</class-id> <category>accessing</category><body package="Roassal2-Layouts">fixTemps</body><body package="Roassal2-Layouts">value: assocA value: assocB	"Return false if assocA is bigger than assocB.	Return true if assocA is smaller than assocB.	-&gt; Inverted list with biggest elements first"		| a b offset |	offset := 0.	a := assocA value.	b := assocB value.	[(a size &gt; offset)		and: [(b size &gt; offset) and: [(a at: a size - offset) = (b at: b size - offset)]]]		whileTrue: [offset := offset + 1].	"Corner cases"	(a size = b size and: [b size = offset]) ifTrue: [ ^ true ].	"[3, 3], [3, 3]"	(a size &gt; offset and: [b size = offset]) ifTrue: [ ^ true ].	"[3, 3, 6], [3, 3]"	(b size &gt; offset and: [a size = offset]) ifTrue: [ ^ false ].	"[3, 3], [3, 3, 6]"	"Normal case"	^(a at: a size - offset) &gt;= (b at: b size - offset)</body></methods><methods><class-id>Roassal2.RTEmptyArrow class</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TREmptyArrowHeadShape</body></methods><methods><class-id>Roassal2.TRCallableObject</class-id> <category>callbacks</category><body package="Roassal2-Trachel-Core">addCallback: aCallback	callbacks ifNil: [ callbacks := OrderedCollection new ].	callbacks add: aCallback</body><body package="Roassal2-Trachel-Core">callbacks	callbacks ifNil: [ callbacks := OrderedCollection new ].	^ callbacks</body><body package="Roassal2-Trachel-Core">doWithoutCallbacks: aBlock	"Simply evaluate aBlock"	| oldCallbacks |	oldCallbacks := callbacks.	callbacks := #().	aBlock value.	callbacks := oldCallbacks</body><body package="Roassal2-Trachel-Core">hasCallback	^ callbacks notNil</body><body package="Roassal2-Trachel-Core">numberOfCallbacks	"Return the number of callbacks registered"	self hasCallback ifNil: [ ^ 0 ].	^ self callbacks size</body><body package="Roassal2-Trachel-Core">removeCallback: aCallback ifAbsent: anErrorBlock	self hasCallback ifFalse: [ ^ self ].	self callbacks remove: aCallback ifAbsent: anErrorBlock</body><body package="Roassal2-Trachel-Core">triggerCallbacksForAddition	"aStep is a point that represents a translation step"	self hasCallback ifFalse: [ ^ self ].	self callbacks do: [ :c | 		c isAddedCallback ifTrue: [ 			c addShape: self ] ]</body><body package="Roassal2-Trachel-Core">triggerCallbacksForNewExtent: newExtent oldExtent: oldExtent 	self hasCallback ifFalse: [ ^ self ].	self callbacks do: [ :c | 		c isExtentCallback ifTrue: [ 			c shape: self newExtent: newExtent oldExtent: oldExtent ] ]</body><body package="Roassal2-Trachel-Core">triggerCallbacksForStep: aStep	"aStep is a point that represents a translation step"	self hasCallback ifFalse: [ ^ self ].	self callbacks do: [ :c | 		c isTranslationCallback ifTrue: [ 			c shape: self step: aStep ] ]</body><body package="Roassal2-Trachel-Core">triggerRemoveCallbacks	"aStep is a point that represents a translation step"	self hasCallback ifFalse: [ ^ self ].	self callbacks do: [ :c | 		c isRemoveCallback ifTrue: [ 			c removeShape: self ] ]</body></methods><methods><class-id>Roassal2.TRShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	color := self theme transformColor: Color gray.	strokePaint := self theme transformColor: Color black.	matrix := TRPlatform current affineTransformClass new.	rotationAngleDegrees := 0.	self position: 0 @ 0.	session := TRPlatform current session.</body></methods><methods><class-id>Roassal2.TRShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">allColor: aColor	self color: aColor</body><body package="Roassal2-Trachel-Shapes">angleInDegrees	^ rotationAngleDegrees</body><body package="Roassal2-Trachel-Shapes">athensCanvas	^ self canvas athensCanvas</body><body package="Roassal2-Trachel-Shapes">canvas	"Return a Trachel Canvas"	^ canvas</body><body package="Roassal2-Trachel-Shapes">canvas: aTRCanvas	"aCanvas is a TRCanvas"	canvas := aTRCanvas</body><body package="Roassal2-Trachel-Shapes">center	self subclassResponsibility</body><body package="Roassal2-Trachel-Shapes">color		^ color</body><body package="Roassal2-Trachel-Shapes">color: aColor	"Set the color of the shape"	color := aColor</body><body package="Roassal2-Trachel-Shapes">element	"A shape has a reference to an object, typically the object odel that the trachel shape represents"	^ element</body><body package="Roassal2-Trachel-Shapes">element: anObject	"anObject could be any kind of object. A shape has a reference to an object, typically the object odel that the trachel shape represents"	element := anObject</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	self subclassResponsibility</body><body package="Roassal2-Trachel-Shapes">height	^ self encompassingRectangle height</body><body package="Roassal2-Trachel-Shapes">indexInCanvas	"Return the index of myself in the list shapes, in the canvas"	^ canvas privateIndexInCanvasOf: self</body><body package="Roassal2-Trachel-Shapes">matrix	"Return the matrix behind the shape"	^ matrix</body><body package="Roassal2-Trachel-Shapes">position	^ matrix x @ matrix y</body><body package="Roassal2-Trachel-Shapes">scale	"Return the scale of the shape"	^ matrix scale</body><body package="Roassal2-Trachel-Shapes">strokePaint	"Return the color of the border line"	^ strokePaint</body><body package="Roassal2-Trachel-Shapes">strokePaint: aColor	"set the color of the border line"	[ aColor isNil or: [ aColor isColor ] ] assert.	strokePaint := aColor</body><body package="Roassal2-Trachel-Shapes">theme	"Return the theme used by the Canvas"	canvas ifNil: [ ^ TRWhiteTheme default ].	^ canvas theme</body><body package="Roassal2-Trachel-Shapes">themedColor	"Return the color that has been themed"	^ self theme transformColor: color</body><body package="Roassal2-Trachel-Shapes">themedStrokeColor	"Return the stroke color that has been themed"	^ self theme transformColor: strokePaint</body><body package="Roassal2-Trachel-Shapes">trachelShape	"To be compatible with RTElement"	^ self</body><body package="Roassal2-Trachel-Shapes">width	"Return the width of the shape"	^ self encompassingRectangle width</body></methods><methods><class-id>Roassal2.TRShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">hasCallback	"Return true if at least one callback has been added to the shape"	^ callbacks notNil</body><body package="Roassal2-Trachel-Shapes">hasEventCallback	"Return true if at least one event callback has been added to the shape"	^ announcer notNil and: [ announcer numberOfSubscriptions &gt; 0 ]</body><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint	^ false</body><body package="Roassal2-Trachel-Shapes">isFixed	"Return true if the shape is fixed, not subject to the camera therefore"	^ self canvas fixedShapes includes: self</body><body package="Roassal2-Trachel-Shapes">isInACanvas	^ canvas notNil</body><body package="Roassal2-Trachel-Shapes">isLineShape	^ false</body><body package="Roassal2-Trachel-Shapes">isMovable	"Return if the shape is not fixed, therefore movable."	^ self canvas isMovableShape: self</body><body package="Roassal2-Trachel-Shapes">isNotFixed	^ self isMovable</body><body package="Roassal2-Trachel-Shapes">isVisible	"Return true if the element is being seen by the camera"	^ self canvas camera isVisible: self</body><body package="Roassal2-Trachel-Shapes">shouldBeDrawn	^ true</body></methods><methods><class-id>Roassal2.TRShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawEncompassingRectangleOn: athensCanvas	"debugging purpose"	self drawEncompassingRectangleOn: athensCanvas color: (Color blue alpha: 0.2)</body><body package="Roassal2-Trachel-Shapes">drawEncompassingRectangleOn: athensCanvas color: aColor	"debugging purpose" 	| r tpath |	r := self encompassingRectangle.	tpath := athensCanvas				createPath: [ :builder | 					builder absolute; moveTo: r topLeft; lineTo: r topRight; 							lineTo: r bottomRight; lineTo: r bottomLeft; lineTo: r topLeft ].	athensCanvas pathTransform		restoreAfter: [ 			athensCanvas				setPaint: aColor;				drawShape: tpath ].</body><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	| pt |	"Maybe here, we need to insert the stroke"	pt := athensCanvas pathTransform.	pt restoreAfter: [		pt scaleBy: matrix sx @ matrix sy.				athensCanvas			setPaint: self themedColor;			drawShape: self path.					athensCanvas			setStrokePaint: self themedStrokeColor;			drawShape: self path  ]</body></methods><methods><class-id>Roassal2.TRShape</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">basicEncompassingRectangle	^ self subclassResponsibility</body><body package="Roassal2-Trachel-Shapes">computePath	self subclassResponsibility</body><body package="Roassal2-Trachel-Shapes">path	session == TRPlatform current session		ifFalse: [ path := nil ].	path ifNil: [ 		self computePath.		session := TRPlatform current session ].	^ path</body><body package="Roassal2-Trachel-Shapes">position: aPosition	matrix translation: aPosition</body><body package="Roassal2-Trachel-Shapes">resetPath	path := nil</body><body package="Roassal2-Trachel-Shapes">transformedEncompassingRectangle	"Not all shapes are alredy using matrix. 	For that reason we have this method.	For straight-forward version where the matrix is just a movement we move it directly for performance reasons.	"	| basicRectangle rotatedRectangle topLeft topRight bottomRight bottomLeft p1 p2 p3 p4 |	basicRectangle := self basicEncompassingRectangle.	(matrix sx = 1) &amp; (matrix sy = 1) &amp; (matrix shx = 0) &amp; (matrix shy = 0) ifTrue: [		 ^ basicRectangle translateBy: (matrix x value@ matrix y value)	].	topLeft := matrix transform: basicRectangle topLeft.	topRight := matrix transform: basicRectangle topRight.	bottomRight := matrix transform: basicRectangle bottomRight.	bottomLeft := matrix transform: basicRectangle bottomLeft.		p1 := OrderedCollection new add: topLeft x; add: topRight x; add: bottomRight x; add: bottomLeft x; yourself.	p2 := OrderedCollection new add: topLeft y; add: topRight y; add: bottomRight y; add: bottomLeft y; yourself.	p3 := OrderedCollection new add: topLeft x; add: topRight x; add: bottomRight x; add: bottomLeft x; yourself.	p4 := OrderedCollection new add: topLeft y; add: topRight y; add: bottomRight y; add: bottomLeft y; yourself.		rotatedRectangle := 		(p1 min @ p2 min) corner:		(p3 max @ p4 max).	^ rotatedRectangle</body></methods><methods><class-id>Roassal2.TRShape</class-id> <category>actions</category><body package="Roassal2-Trachel-Shapes">addedIn: aCanvas	aCanvas privateAdd: self.	self canvas: aCanvas</body><body package="Roassal2-Trachel-Shapes">addedIn: aCanvas atIndex: index	aCanvas privateAdd: self atIndex: index.	self canvas: aCanvas</body><body package="Roassal2-Trachel-Shapes">noBorder	"Remove the border from the shape"	self strokePaint: nil</body><body package="Roassal2-Trachel-Shapes">pushBack	canvas ifNil: [ self error: 'Cannot push back since the it has not been added into a view or a canvas' ]. 	canvas pushBack: self</body><body package="Roassal2-Trachel-Shapes">pushBehind: aShape	canvas push: self behind: aShape</body><body package="Roassal2-Trachel-Shapes">pushBehindAll: manyShapes	self canvas push: self behindAll: manyShapes</body><body package="Roassal2-Trachel-Shapes">pushFront	canvas pushFront: self</body><body package="Roassal2-Trachel-Shapes">remove	"Do nothing if the line is not already in a canvas"	self isInACanvas ifFalse: [ ^ self ]. 	canvas removeShape: self</body><body package="Roassal2-Trachel-Shapes">setAsFixed	self canvas 		ifNil: [ self error: 'You should first insert the shape in the canvas before setting it as fixed'. ].	self canvas setAsFixed: self.</body><body package="Roassal2-Trachel-Shapes">setAsNotFixed	canvas removeFixedShape: self.	canvas addShape: self.</body><body package="Roassal2-Trachel-Shapes">signalUpdate	"Refresh the canvas"	canvas ifNil: [ ^ self ].	canvas signalUpdate</body><body package="Roassal2-Trachel-Shapes">translateBy: aPoint	self position: self position + aPoint.	self triggerCallbacksForStep: aPoint</body><body package="Roassal2-Trachel-Shapes">translateTo: aPoint	| oldPosition |	oldPosition := self position.	self position: aPoint.	self triggerCallbacksForStep: (self position - oldPosition)</body></methods><methods><class-id>Roassal2.TRShape</class-id> <category>transformations</category><body package="Roassal2-Trachel-Shapes">rotateByDegrees: angle 	rotationAngleDegrees := rotationAngleDegrees + angle.	matrix rotateByDegrees: angle</body><body package="Roassal2-Trachel-Shapes">rotateToDegrees: anAngle	^ self rotateByDegrees: anAngle - rotationAngleDegrees.</body><body package="Roassal2-Trachel-Shapes">scaleBy: anInteger 	matrix scaleBy: anInteger.</body></methods><methods><class-id>Roassal2.TRShape</class-id> <category>events</category><body package="Roassal2-Trachel-Shapes">announce: anEvent	self announcer announce: anEvent</body><body package="Roassal2-Trachel-Shapes">announcer	announcer isNil ifTrue: [ announcer := Announcer new ].	^ announcer</body><body package="Roassal2-Trachel-Shapes">announcer: anAnnouncer	announcer := anAnnouncer</body><body package="Roassal2-Trachel-Shapes">when: event do: aBlock	self announcer when: event do: aBlock</body></methods><methods><class-id>Roassal2.TRShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitShape: self</body></methods><methods><class-id>Roassal2.TRShape</class-id> <category>geometry</category><body package="Roassal2-Trachel-Shapes">extent: anExtent	"do nothing here. This method may be overriden for particular behavior"</body></methods><methods><class-id>Roassal2.TRShape</class-id> <category>actions - replacing</category><body package="Roassal2-Trachel-Shapes">replaceShapeBy: anotherTrachelShape	"Replace a shape by another one. The new shape get the position and the extent of the previous shape"		"	Here is an example:| v s |v := RTView new.s := RTVisualID new.v add: (s elementOn: 'ignacio').v add: (s elementOn: 'ignacia').es := v elements.RTGridLayout on: es.es @ RTPopup.es when: TRMouseClick do: [ :evt | evt element trachelShape replaceShapeBy: (TREllipseShape new color: Color red). v signalUpdate ].^ v	"		self canvas addShape: anotherTrachelShape.	anotherTrachelShape extent: self extent.	self remove.	anotherTrachelShape translateTo: self position</body></methods><methods><class-id>Roassal2.TRAbstractBoxShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">center	^ self position</body><body package="Roassal2-Trachel-Shapes">dashes	^ dashes</body><body package="Roassal2-Trachel-Shapes">dashes: aDashSpecification	dashes := aDashSpecification</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	^ self transformedEncompassingRectangle</body><body package="Roassal2-Trachel-Shapes">extent	^ self encompassingRectangle extent</body><body package="Roassal2-Trachel-Shapes">height	^ self encompassingRectangle height</body><body package="Roassal2-Trachel-Shapes">height: newHeight	self extent: rectangle width @ newHeight</body><body package="Roassal2-Trachel-Shapes">size: v	^ self extent: v @ v</body><body package="Roassal2-Trachel-Shapes">strokeWidth: aWidth	"Set the width of the border shape"	strokeWidth := aWidth</body><body package="Roassal2-Trachel-Shapes">width	^ self encompassingRectangle width</body><body package="Roassal2-Trachel-Shapes">width: newWidth	self extent: newWidth @ rectangle height.</body></methods><methods><class-id>Roassal2.TRAbstractBoxShape</class-id> <category>public</category><body package="Roassal2-Trachel-Shapes">bottomPosition	"Return the shape center top position"	^ self position + (0 @ (self height / 2))</body><body package="Roassal2-Trachel-Shapes">bottomPosition: aPosition	"Move the shape by locating its center top position at aPosition"	self position: (aPosition + (0 @ (self height / -2)))</body><body package="Roassal2-Trachel-Shapes">from: aPoint extent: anotherPoint 		self fromRectangle: (aPoint corner: (aPoint + anotherPoint))</body><body package="Roassal2-Trachel-Shapes">from: aPoint to: anotherPoint 		self fromRectangle: (aPoint corner: anotherPoint)</body><body package="Roassal2-Trachel-Shapes">from: aPoint to: anotherPoint color: aColor	self from: aPoint to: anotherPoint.	self color: aColor.</body><body package="Roassal2-Trachel-Shapes">fromRectangle: newRectangle	| step |	step := newRectangle center - self position.	rectangle := newRectangle translateBy: newRectangle center negated.	self position: newRectangle center.	self resetPath.	self triggerCallbacksForStep: step.</body><body package="Roassal2-Trachel-Shapes">fromRectangle: r color: aColor	self fromRectangle: r.	self color: aColor</body><body package="Roassal2-Trachel-Shapes">leftPosition	"Return the shape center left position"	^ self position - ((self width / 2) @ 0)</body><body package="Roassal2-Trachel-Shapes">leftPosition: aPosition	"Move the shape by locating its center left position at aPosition"	self position: (aPosition - ((self width / -2) @ 0))</body><body package="Roassal2-Trachel-Shapes">rightPosition	"Return the shape center right position"	^ self position + ((self width / 2) @ 0)</body><body package="Roassal2-Trachel-Shapes">rightPosition: aPosition	"Move the shape by locating its center right position at aPosition"	self position: (aPosition - ((self width / 2) @ 0))</body><body package="Roassal2-Trachel-Shapes">topPosition	"Return the shape center top position"	^ self position - (0 @ (self height / 2))</body><body package="Roassal2-Trachel-Shapes">topPosition: aPosition	"Move the shape by locating its center top position at aPosition"	self position: (aPosition - (0 @ (self height / -2)))</body></methods><methods><class-id>Roassal2.TRAbstractBoxShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint	self subclassResponsibility</body><body package="Roassal2-Trachel-Shapes">shouldBeDrawn	^ rectangle width &gt; 0 and: [ rectangle height &gt; 0 ]</body></methods><methods><class-id>Roassal2.TRAbstractBoxShape</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">basicEncompassingRectangle	^ rectangle</body></methods><methods><class-id>Roassal2.TRAbstractBoxShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitAbstractBoxShape: self</body></methods><methods><class-id>Roassal2.TRAbstractBoxShape</class-id> <category>geometry</category><body package="Roassal2-Trachel-Shapes">extent: newExtent	"Set the extent of the shape"	| oldExtent |	newExtent = rectangle extent ifTrue: [ ^ self ].	oldExtent := rectangle extent.	rectangle := (0@0 - (newExtent / 2)) extent: newExtent.	self resetPath.	(oldExtent = (0 @ 0)) ifFalse: [ 		self triggerCallbacksForNewExtent: newExtent oldExtent: oldExtent ].</body><body package="Roassal2-Trachel-Shapes">rectangle	^ rectangle</body><body package="Roassal2-Trachel-Shapes">rectangle: aRectangle	rectangle := aRectangle.	self resetPath.		"(oldExtent = (0 @ 0)) ifFalse: [ 		self triggerCallbacksForNewExtent: newExtent oldExtent: oldExtent ]."</body></methods><methods><class-id>Roassal2.TRAbstractBoxShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-Shapes">strokeWidth	"Return the width of the border shape"	^ strokeWidth</body></methods><methods><class-id>Roassal2.TRAbstractBoxShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	self shouldBeDrawn		ifFalse: [ ^ self ].	athensCanvas pathTransform		restoreAfter: [ 			athensCanvas pathTransform				multiplyBy: matrix asFloatTransform.			athensCanvas 				setPaint: self themedColor;				drawShape: self path.			self drawStrokeIfNecessaryOn: athensCanvas ]</body><body package="Roassal2-Trachel-Shapes">drawStrokeIfNecessaryOn: athensCanvas	| ratio |	self canvas ifNil: [ ^ self ].	ratio := self scaledStrokeWidth.	^ strokePaint		ifNotNil:			[ (athensCanvas setStrokePaint: strokePaint)				width: ratio asFloat;				dashes: dashes offset: 0.			athensCanvas drawShape: path ]</body><body package="Roassal2-Trachel-Shapes">scaledStrokeWidth	| scale |	scale := self canvas camera scale.	^ scale &lt; 1		ifTrue: [ self strokeWidth ]		ifFalse: [ self strokeWidth / scale ]</body></methods><methods><class-id>Roassal2.TRAbstractBoxShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	rectangle := self class nullRectangle.	strokeWidth := 1</body></methods><methods><class-id>Roassal2.TRAbstractBoxShape class</class-id> <category>public</category><body package="Roassal2-Trachel-Shapes">nullRectangle	nullRectangle ifNotNil: [ ^ nullRectangle ].	nullRectangle := (0 @ 0) extent: (0 @ 0).	^ nullRectangle</body></methods><methods><class-id>Roassal2.TRBoxShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint	| invertedPoint |	(matrix sx = 0 or: [ matrix sy = 0  ]) ifTrue: [ ^ false ].	invertedPoint := matrix inverseTransform: aPoint.	^ rectangle containsPoint: invertedPoint.</body></methods><methods><class-id>Roassal2.TRBoxShape</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">computePath	canvas ifNil: [ ^ self ].	path := self athensCanvas		createPath: [ :builder | 			builder				absolute;				moveTo: rectangle topLeft;				lineTo: rectangle topRight;				lineTo: rectangle bottomRight;				lineTo: rectangle bottomLeft;				lineTo: rectangle topLeft;				closePath ]</body></methods><methods><class-id>Roassal2.TRBoxShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitBoxShape: self</body></methods><methods><class-id>Roassal2.TRRoundedBoxShape</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">computePath	path := TRPlatform current computeRoundBoxPathFor: self.</body></methods><methods><class-id>Roassal2.TRRoundedBoxShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">borderRadius	^ borderRadius</body><body package="Roassal2-Trachel-Shapes">borderRadius: aNumber	borderRadius := aNumber</body></methods><methods><class-id>Roassal2.RTAbstractData</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">barShape	^ barBuilder</body><body package="Roassal2-Builder-Grapher-Core">builder	^ builder</body><body package="Roassal2-Builder-Grapher-Core">builder: aBuilder	builder := aBuilder</body><body package="Roassal2-Builder-Grapher-Core">elements	"Private method - not meant to be used by a end user.	Return the elements added by the data"	^ elements</body><body package="Roassal2-Builder-Grapher-Core">label	^ label ifNil: [ '' ]</body><body package="Roassal2-Builder-Grapher-Core">label: aString	label := aString</body><body package="Roassal2-Builder-Grapher-Core">maxX	^ maxX</body><body package="Roassal2-Builder-Grapher-Core">maxX: anObject	maxX := anObject</body><body package="Roassal2-Builder-Grapher-Core">maxY	^ maxY</body><body package="Roassal2-Builder-Grapher-Core">maxY: anObject	maxY := anObject</body><body package="Roassal2-Builder-Grapher-Core">minX	^ minX</body><body package="Roassal2-Builder-Grapher-Core">minX: anObject	minX := anObject</body><body package="Roassal2-Builder-Grapher-Core">minY	^ minY</body><body package="Roassal2-Builder-Grapher-Core">minY: anObject	minY := anObject</body><body package="Roassal2-Builder-Grapher-Core">xScale	^ xScale</body><body package="Roassal2-Builder-Grapher-Core">xScale: oneArgBlockOrSymbol	xScale := oneArgBlockOrSymbol</body><body package="Roassal2-Builder-Grapher-Core">yScale	^ yScale</body><body package="Roassal2-Builder-Grapher-Core">yScale: oneArgBlockOrSymbol	yScale := oneArgBlockOrSymbol</body></methods><methods><class-id>Roassal2.RTAbstractData</class-id> <category>scale</category><body package="Roassal2-Builder-Grapher-Core">linear	self xLinear.	self yLinear</body><body package="Roassal2-Builder-Grapher-Core">log	self xLog.	self yLog</body><body package="Roassal2-Builder-Grapher-Core">sqrt	self xSqrt.	self ySqrt</body><body package="Roassal2-Builder-Grapher-Core">xLinear	xScale := RTLinearTransformation instance</body><body package="Roassal2-Builder-Grapher-Core">xLog	xScale := RTLogTransformation instance</body><body package="Roassal2-Builder-Grapher-Core">xSqrt	xScale := RTSqrtTransformation instance</body><body package="Roassal2-Builder-Grapher-Core">yLinear	yScale := RTLinearTransformation instance</body><body package="Roassal2-Builder-Grapher-Core">yLog	yScale := RTLogTransformation instance</body><body package="Roassal2-Builder-Grapher-Core">ySqrt	yScale := RTSqrtTransformation instance</body></methods><methods><class-id>Roassal2.RTAbstractData</class-id> <category>utility</category><body package="Roassal2-Builder-Grapher-Core">resetMinAndMax	minY := self defaultMaxValue.	maxY := self defaultMinValue.	minX := self defaultMaxValue.	maxX := self defaultMinValue.</body></methods><methods><class-id>Roassal2.RTAbstractData</class-id> <category>public - bar shape</category><body package="Roassal2-Builder-Grapher-Core">barChartUsing: barLabelFactory	"Draw an histogram with title"	| v |	v := self barShape.	elementActions add: [ :someElements | 		| lbl |		self selectElementsForAddingBarTitle doWithIndex: [ :e :index |			| modelToBeUsed |			modelToBeUsed := self getModelForElement: e atIndex: index.			lbl := barLabelFactory createLabelForModel: modelToBeUsed.			TRConstraint move: lbl below: e.			lbl translateBy: (lbl width / -2 @ 0) + (5 @ 0).			elements anyOne view add: lbl.		] ].	 ^ v</body><body package="Roassal2-Builder-Grapher-Core">barChartWithBarCenteredTitle: aBlockOrSymbol	"Add bar charts with centered title, the default color is used. This is a public method"	^ self barChartWithBarCenteredTitle: aBlockOrSymbol color: self defaultLabelColor</body><body package="Roassal2-Builder-Grapher-Core">barChartWithBarCenteredTitle: aBlockOrSymbol color: aColor	"Draw a bar chart with title"	self barShape.	elementActions add: [ :someElements | 		| lbl |		self selectElementsForAddingBarTitle doWithIndex: [ :e :index |			| modelToBeUsed |			modelToBeUsed := self getModelForElement:e atIndex: index.			lbl := (RTLabel new text: aBlockOrSymbol; color: aColor) 						elementOn: modelToBeUsed.			TRConstraint move: lbl below: e.			elements anyOne view add: lbl.		] ].</body><body package="Roassal2-Builder-Grapher-Core">barChartWithBarTitle: aBlockOrSymbol	"Draw a barChart with title"	^ self barChartWithBarTitle: aBlockOrSymbol rotation: -45</body><body package="Roassal2-Builder-Grapher-Core">barChartWithBarTitle: aBlockOrSymbol rotation: rotationInDegree	"Draw an histogram with title"	^ self barChartWithBarTitle: aBlockOrSymbol rotation: rotationInDegree color: self defaultLabelColor</body><body package="Roassal2-Builder-Grapher-Core">barChartWithBarTitle: aBlockOrSymbol rotation: rotationInDegree color: aColor	"Draw an histogram with title"	| barLabelFactory |	barLabelFactory := RTBarLabelFactory new.	barLabelFactory label: aBlockOrSymbol.	barLabelFactory rotation: rotationInDegree.	barLabelFactory color: aColor.		^ self barChartUsing: barLabelFactory</body></methods><methods><class-id>Roassal2.RTAbstractData</class-id> <category>min and max</category><body package="Roassal2-Builder-Grapher-Core">computeMinAndMax	self computeMinAndMaxForX.	self computeMinAndMaxForY.</body><body package="Roassal2-Builder-Grapher-Core">computeMinAndMaxForX	| computed |	computed := elements collect: x.	self assert: [ computed allSatisfy: [ :obj | obj isKindOf: Number ] ] description: 'You have provided objects that are not number. Please adjust what you provide to #points: #x: and #y:'.	minX := computed min.	maxX := computed max.	(minX &lt; 0 and: [ maxX &lt; 0 ]) ifTrue: [ maxX := 0 ].	"Only set the minX if we want to include the origin."	self builder hasOrigin ifTrue: [		(minX &gt; 0 and: [ maxX &gt; 0 ]) ifTrue: [ minX := 0 ]	].		"We do this to make sure that the bar on the right hand side is not on the right axisX extremity"	"(self dataSets anySatisfy: #shouldHaveBars) ifTrue: [ maxX := maxX + 1 ]"</body><body package="Roassal2-Builder-Grapher-Core">computeMinAndMaxForY	| computed |	computed := elements collect: y.	self assert: [ computed allSatisfy: [ :obj | obj isKindOf: Number ] ] description: 'You have provided objects that are not number. Please adjust what you provide to #points: #x: and #y:'.	minY := computed min.	maxY := computed max.		(minY &lt; 0 and: [ maxY &lt; 0 ]) ifTrue: [ maxY := 0 ].	(minY &gt; 0 and: [ maxY &gt; 0 ]) ifTrue: [ minY := 0 ].</body></methods><methods><class-id>Roassal2.RTAbstractData</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">defaultLabelColor	"Label should be gray per default"	^ Color gray</body><body package="Roassal2-Builder-Grapher-Core">defaultMaxValue	^ 1000000</body><body package="Roassal2-Builder-Grapher-Core">defaultMinValue	^ -1000000</body><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	elementActions := OrderedCollection new.	self linear</body></methods><methods><class-id>Roassal2.RTAbstractData</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">centralDot	^ (RTEllipse new		size: 0;		color: Color red) element translateTo: (builder getPixelPositionOf: 0 @ 0)</body><body package="Roassal2-Builder-Grapher-Core">getModelForElement: element atIndex: index	"Return the model that is used to insert a label for the element. index is index-th label to be provided."	"The default behavior is simply to return the model of the element"	^ element model</body><body package="Roassal2-Builder-Grapher-Core">getPixelPositionOf: aPoint	"Return the position in the Roassal view of a point"	| anX anY |	anX := RTMetricNormalizer new		getValue: aPoint x min: 0 max: builder extent x minValue: minX maxValue: maxX.	anY := RTMetricNormalizer new		getValue: aPoint y min: 0 max: builder extent y negated minValue: minY maxValue: maxY.				^ anX @ anY</body><body package="Roassal2-Builder-Grapher-Core">getPositionFromPixelPosition: aPoint	"Return the position in the graph from a position in the Roassal view of a point"	| anX anY |	anX := RTMetricNormalizer new		getValue: aPoint x min: minX max: maxX minValue: 0 maxValue: builder extent x.	anY := RTMetricNormalizer new		getValue: aPoint y min: minY max: maxY minValue: 0 maxValue: builder extent y.				^ anX @ anY negated</body><body package="Roassal2-Builder-Grapher-Core">resetShapeBuilderForBar	barBuilder := RTShapeBuilder new.	barBuilder rectangle.		"Default width that compute an appropriate width"	barBuilder width: [ :object | 		(builder extent x / (self numberOfPoints * self numberOfMetrics * 2)) asFloat ]</body><body package="Roassal2-Builder-Grapher-Core">selectElementsForAddingBarTitle	"Return the collection of principal element for each element group.  	This principal element is used to position the title label"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractData</class-id> <category>adding</category><body package="Roassal2-Builder-Grapher-Core">addedInBuilder: aBuilder	self builder: aBuilder.</body></methods><methods><class-id>Roassal2.RTAbstractMultipleData</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">colorPalette	^ RTPalette c3	"^ RTColorPalette qualitative colors: 8 scheme: 'Set2'"</body><body package="Roassal2-Builder-Grapher-Core">colors: aCollectionOfColors	colors := aCollectionOfColors</body><body package="Roassal2-Builder-Grapher-Core">colorsToUse	"Return a collection of colors to use"	^ colors isEmpty 		ifTrue: [ self colorPalette ]		ifFalse: [ colors ]</body><body package="Roassal2-Builder-Grapher-Core">points	^ points</body><body package="Roassal2-Builder-Grapher-Core">points: objects	points := objects</body><body package="Roassal2-Builder-Grapher-Core">view	^ builder view</body></methods><methods><class-id>Roassal2.RTAbstractMultipleData</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">getModelForElement:e atIndex: index	"Return the model that is used to insert a label for the element. index is index-th label to be provided."	^ self points at: index</body><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	"We need to do the layout here"	| centralDot positiveElements negativeElements  |	centralDot := self centralDot.	RTMetricNormalizer new		elements: elements;		normalizeElementX: [ :anElement | x rtValue: anElement ]			min: 0			max: builder extent x			minValue: minX			maxValue: maxX + 1.	"We have 'maxX + 1' because we do not want the last bar on the extremity of the X-Axis"	"We treat the element with a positive value"	positiveElements := elements select: [ :el | (y rtValue: el) &gt;= 0 ].	positiveElements		ifNotEmpty: [			RTMetricNormalizer new				elements: positiveElements;				normalizeElementHeight: [ :anElement | y rtValue: anElement ]					min: 0					max: builder extent y + centralDot position y					minValue: 0					maxValue: maxY ].	RTAlignment new elements: positiveElements; fixedElement: centralDot; bottom.	"TRConstraint use: centralDot alignFromBottom: positiveElements.	"			"We treat the element with a negative value"	negativeElements := elements copyWithoutAll: positiveElements.	negativeElements		ifNotEmpty: [ 			RTMetricNormalizer new				elements: negativeElements;				normalizeElementHeight: [ :anElement | y rtValue: anElement ]					min: centralDot position y negated 					max: 0					minValue: minY					maxValue: 0.			RTAlignment new elements: negativeElements; fixedElement: centralDot; top.			"TRConstraint use: centralDot alignFromTop: negativeElements "].	"We set the actions, if any"	elementActions do: [ :act | act rtValue: elements ]</body><body package="Roassal2-Builder-Grapher-Core">resetShapeBuilderForBar	super resetShapeBuilderForBar.		"Default width that compute an appropriate width"	barBuilder width: [ :object | 		(builder extent x / (self numberOfPoints * self numberOfMetrics * 2)) asFloat ]</body><body package="Roassal2-Builder-Grapher-Core">selectElementsForAddingBarTitle	"Return the collection of principal element for each element group.  	This principal element is used to position the title label"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractMultipleData</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	points := #().	metrics := OrderedCollection new.	groupedElements := OrderedCollection new.	x := [ :anElement | elements indexOf: anElement ].	y := [ :anElement | anElement model ].	self resetMinAndMax.	self resetShapeBuilderForBar.	colors := OrderedCollection new</body></methods><methods><class-id>Roassal2.RTAbstractMultipleData</class-id> <category>adding</category><body package="Roassal2-Builder-Grapher-Core">addAll: someElements	self view addAll: someElements</body><body package="Roassal2-Builder-Grapher-Core">addedInBuilder: aBuilder	super addedInBuilder: aBuilder.	aBuilder axisX noLabel; noTick.		elements := RTGroup new.	points do: [ :p | 		| values es |		values := metrics collect: [ :m | m rtValue: p ].		es := barBuilder elementsOn: values.		es doWithIndex: [ :e :index | e trachelShape color: (self colorsToUse at: index) ].		groupedElements add: es.		elements addAll: es		 ] separatedBy: [ elements add: ((RTBox new size: 0) elementOn: 0) ].	self addAll: elements</body></methods><methods><class-id>Roassal2.RTAbstractMultipleData</class-id> <category>public - query</category><body package="Roassal2-Builder-Grapher-Core">numberOfMetrics	"Return the number of metrics added to the data set"	^ metrics size</body><body package="Roassal2-Builder-Grapher-Core">numberOfPoints	"Return the number of points added in the data set"	^ points size</body></methods><methods><class-id>Roassal2.RTAbstractMultipleData</class-id> <category>public - metrics</category><body package="Roassal2-Builder-Grapher-Core">addMetric: aBlockOrSymbolOrValue	metrics add: aBlockOrSymbolOrValue</body><body package="Roassal2-Builder-Grapher-Core">addMetric: aBlockOrSymbolOrValue color: aColor	self addMetric: aBlockOrSymbolOrValue.	colors add: aColor</body></methods><methods><class-id>Roassal2.RTVerticalMultipleData</class-id> <category>rendering</category><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	"We need to do the layout here"	| centralDot |	centralDot := self centralDot.		"We compute the height"	RTMetricNormalizer new		elements: elements;		normalizeElementHeight: [ :anElement | y rtValue: anElement ]			min: 0			max: builder extent y + centralDot position y			minValue: 0			maxValue: maxY.	"We stack the elements"	groupedElements do: [ :groupOfEl | RTVerticalLineLayout new gapSize: 0; on: groupOfEl ].	RTAlignment new elements: groupedElements; fixedElement: centralDot; bottom.	"We horizontally position the elements"	RTMetricNormalizer new		elements: groupedElements;		normalizeElementX: [ :aGroupOfElement | x rtValue: aGroupOfElement first ]			min: 0			max: builder extent x			minValue: minX			maxValue: maxX + 1.	"We have 'maxX + 1' because we do not want the last bar on the extremity of the X-Axis"	elementActions do: [ :act | act rtValue: (groupedElements collect: #first) ]</body></methods><methods><class-id>Roassal2.RTVerticalMultipleData</class-id> <category>min and max</category><body package="Roassal2-Builder-Grapher-Core">computeMinAndMaxForY	| computed |	computed := groupedElements collect: [ :g | (g collect: y) sum ].	self assert: [ computed allSatisfy: [ :obj | obj isKindOf: Number ] ] description: 'You have provided objects that are not number. Please adjust what you provide to #points: #x: and #y:'.	minY := computed min.	maxY := computed max.		(minY &lt; 0 and: [ maxY &lt; 0 ]) ifTrue: [ maxY := 0 ].	(minY &gt; 0 and: [ maxY &gt; 0 ]) ifTrue: [ minY := 0 ].</body></methods><methods><class-id>Roassal2.RTVerticalMultipleData</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">selectElementsForAddingBarTitle	"Return the collection of principal element for each element group.  	This principal element is used to position the title label"	^ groupedElements collect: #last</body></methods><methods><class-id>Roassal2.RTDoubleBarBuilder</class-id> <category>public-accessing</category><body package="Roassal2-Builder-Grapher-Core">points	^ elements collect: #model</body><body package="Roassal2-Builder-Grapher-Core">points: someObjects	elements := self createPointNameFrom: someObjects.	view addAll: elements.	RTVerticalLineLayout new		verticalGap: verticalGap;		alignRight;		on: elements.	topExtremity := (RTBox new size: 0) element.	bottomExtremity := (RTBox new size: 0) element.	RTConstraint move: topExtremity onTheRightOf: elements first.	RTConstraint move: bottomExtremity onTheRightOf: elements last.	topExtremity translateBy: 0 @ -15.	bottomExtremity translateBy: 0 @ 15.	view add: topExtremity.	view add: bottomExtremity.	view add: ((RTLine new color: Color red) edgeFrom: topExtremity to: bottomExtremity)</body></methods><methods><class-id>Roassal2.RTDoubleBarBuilder</class-id> <category>configuration</category><body package="Roassal2-Builder-Grapher-Core">bottomValue: aBlock	"The gray bar"	self bottomValue: aBlock titled: aBlock asString</body><body package="Roassal2-Builder-Grapher-Core">bottomValue: aBlock titled: aTitle	"The gray bar"	 | configuration |	self metric: aBlock color: Color lightGray height: 20.		configuration := RTAxisConfiguration new.	configuration builder: self.	configuration title: aTitle.	configuration titlePosition: (0 @ -30).	configuration color: Color lightGray.	configuration minValue: 0.	configuration positionLabel: [ :aLabel :aTick | aLabel translateTo: aTick position + (0 @ 15) ].	configuration maxValue: (self points collect: aBlock) max.	configuration numberOfTicks: 4.	configuration lineThickness: 3.	configuration axisFrom: bottomExtremity position to: bottomExtremity position + (width @ 0).</body><body package="Roassal2-Builder-Grapher-Core">defaultVerticalGap	^ 5</body><body package="Roassal2-Builder-Grapher-Core">defaultWidth	^ 250</body><body package="Roassal2-Builder-Grapher-Core">metric: aBlock color: aColor height: anHeight	| boxes |	boxes := elements collect: [ :el | 		| b |		b := (RTBox new height: anHeight; color: aColor) elementOn: el model.		b @ (RTPopup text: [ :model | aBlock rtValue: model ]).		b ].	RTMetricNormalizer new 		elements: boxes;		normalizeWidth: aBlock min: 2 max: width minValue: 0. 			elements with: boxes do: [ :e :b | 		 		RTConstraint move: b onTheRightOf: e.		b translateBy: 2 @ 0. ].	view addAll: boxes.</body><body package="Roassal2-Builder-Grapher-Core">pointName: aOneArgBlock	"Utility method"	self shape label text: aOneArgBlock</body><body package="Roassal2-Builder-Grapher-Core">topValue: aBlock	"The red bar"	self topValue: aBlock titled: aBlock asString</body><body package="Roassal2-Builder-Grapher-Core">topValue: aBlock titled: aTitle	"The red bar"	 | configuration |	self metric: aBlock color: Color red height: 10.		configuration := RTAxisConfiguration new.	configuration builder: self.	configuration title: aTitle.	configuration titlePosition: (0 @ 30).	configuration color: Color red.	configuration minValue: 0.	configuration positionLabel: [ :aLabel :aTick | aLabel translateTo: aTick position - (0 @ 15) ].	configuration maxValue: (self points collect: aBlock) max.	configuration numberOfTicks: 4.	configuration lineThickness: 3.	configuration axisFrom: topExtremity position to: topExtremity position + (width @ 0).</body></methods><methods><class-id>Roassal2.RTDoubleBarBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	verticalGap := self defaultVerticalGap.	width := self defaultWidth.</body></methods><methods><class-id>Roassal2.RTDoubleBarBuilder</class-id> <category>examples</category><body package="Roassal2-Builder-Grapher-Core">example01	"	self new example01	"	| b |	b := RTDoubleBarBuilder new.	b points: RTShape withAllSubclasses.	b bottomValue: #numberOfMethods.	b topValue: #numberOfVariables.	^ b</body></methods><methods><class-id>Roassal2.RTDoubleBarBuilder</class-id> <category>util</category><body package="Roassal2-Builder-Grapher-Core">createPointNameFrom: someObjects	"Create the labels for the objects"	| es |	shapeBuilder ensure: RTLabel.	es := shapeBuilder elementsOn: someObjects.	"es @ RTHighlightable."	self setUpInteractionFor: es.	^ es</body></methods><methods><class-id>Roassal2.RTDoubleBarBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">createView	^ super createView @ RTDraggableView</body></methods><methods><class-id>Roassal2.Timespan</class-id> <category>accessing</category><body package="Roassal2-Pharo">asDate 	^ start asDate</body><body package="Roassal2-Pharo">asTimestamp	^ start</body><body package="Roassal2-Pharo">day	"Answer the day of the year represented by the receiver."	^ self dayOfYear</body><body package="Roassal2-Pharo">dayOfMonth	"Answer the day of the month represented by the receiver."	^ start dayOfMonth</body><body package="Roassal2-Pharo">dayOfWeek	"Answer the day of the week represented by the receiver."	^ start dayOfWeek</body><body package="Roassal2-Pharo">dayOfWeekName	"Answer the day of the week represented by the receiver."	^ start dayOfWeekName</body><body package="Roassal2-Pharo">dayOfYear	"Answer the day of the year represented by the receiver."	^ start dayOfYear</body><body package="Roassal2-Pharo">daysInMonth 	^ start daysInMonth</body><body package="Roassal2-Pharo">daysInYear 	"Answer the number of days in the month represented by the receiver."	^ start daysInYear</body><body package="Roassal2-Pharo">daysLeftInYear	^ start daysLeftInYear</body><body package="Roassal2-Pharo">duration 	"Answer the Duration of this timespan"	^ duration</body><body package="Roassal2-Pharo">end 	^ self duration asNanoSeconds = 0		ifTrue: [ self start ]		ifFalse: [ self next start - Timestamp clockPrecision ]</body><body package="Roassal2-Pharo">firstDayOfMonth	^ start firstDayOfMonth</body><body package="Roassal2-Pharo">hash	^ start hash + duration hash</body><body package="Roassal2-Pharo">isLeapYear	^ start isLeapYear</body><body package="Roassal2-Pharo">julianDayNumber 	^ start julianDayNumber</body><body package="Roassal2-Pharo">julianDayNumberUTC	^ start julianDayNumberUTC</body><body package="Roassal2-Pharo">month	^ start month</body><body package="Roassal2-Pharo">monthAbbreviation 	^ start monthAbbreviation</body><body package="Roassal2-Pharo">monthIndex	^ self month</body><body package="Roassal2-Pharo">monthName 	^ start monthName</body><body package="Roassal2-Pharo">next	^ self class starting: (start + duration) duration: duration</body><body package="Roassal2-Pharo">offset	^ start offset</body><body package="Roassal2-Pharo">offset: anOffset	"Answer a &lt;Timespan&gt; equivalent to the receiver but with its local time 	being offset from UTC by offset.	Unlike #translateTo: this will NOT change the absolute in UTC "	^ self class 		starting: (self start offset: anOffset) 		duration: self duration</body><body package="Roassal2-Pharo">previous 	^ self class starting: (start - duration) duration: duration</body><body package="Roassal2-Pharo">start 	"Answer the start DateAndTime of this timespan"	^ start</body><body package="Roassal2-Pharo">start: aDateAndTime	"Store the start DateAndTime of this timespan"	start := aDateAndTime asDateAndTime</body><body package="Roassal2-Pharo">year 	^ start year</body></methods><methods><class-id>Roassal2.Timespan</class-id> <category>enumerating</category><body package="Roassal2-Pharo">dates	| dates |	dates := OrderedCollection new.	self datesDo: [ :m | dates add: m ].	^ dates asArray.</body><body package="Roassal2-Pharo">datesDo: aBlock 	self do: aBlock with: start asDate.</body><body package="Roassal2-Pharo">every: aDuration do: aBlock	| element end |	element := self start.	end := self end.	[ element &lt;= end ] whileTrue:		[ aBlock value: element.		element := element + aDuration. ]</body><body package="Roassal2-Pharo">intersection: aTimespan	 "Return the Timespan both have in common, or nil"	 | aBegin anEnd |	 aBegin := self start max: aTimespan start.	 anEnd := self end min: aTimespan end.	 anEnd &lt; aBegin ifTrue: [^nil].	 ^ self class starting: aBegin ending: anEnd.</body><body package="Roassal2-Pharo">months	| months |	months := OrderedCollection new: 12.	self monthsDo: [ :m | months add: m ].	^ months asArray.</body><body package="Roassal2-Pharo">monthsDo: aBlock 	self do: aBlock with: start asMonth.</body><body package="Roassal2-Pharo">union: aTimespan	 "Return the Timespan spanned by both"	| aBegin anEnd |	aBegin := self start min: aTimespan start.	anEnd := self end max: aTimespan end.	^ Timespan starting: aBegin ending: (anEnd + Timespan clockPrecision).</body><body package="Roassal2-Pharo">weeks	| weeks |	weeks := OrderedCollection new.	self weeksDo: [ :m | weeks add: m ].	^ weeks asArray.</body><body package="Roassal2-Pharo">weeksDo: aBlock	self do: aBlock with: self asWeek.</body><body package="Roassal2-Pharo">workDatesDo: aBlock 	"Exclude Saturday and Sunday"	self do: aBlock with: start asDate when: [ :d | d dayOfWeek &lt; 6 ].</body><body package="Roassal2-Pharo">years	| years |	years := OrderedCollection new.	self yearsDo: [ :m | years add: m ].	^ years asArray.</body><body package="Roassal2-Pharo">yearsDo: aBlock	self do: aBlock with: start asYear.</body></methods><methods><class-id>Roassal2.Timespan</class-id> <category>printing</category><body package="Roassal2-Pharo">printOn: aStream 	super printOn: aStream.	aStream 		nextPut: $(;		print: start;		nextPut: $D;		print: duration;		nextPut: $).</body></methods><methods><class-id>Roassal2.Timespan</class-id> <category>conversion</category><body package="Roassal2-Pharo">asDosTimestamp 	^ start asDosTimestamp</body><body package="Roassal2-Pharo">asDuration	^ self duration</body><body package="Roassal2-Pharo">asMonth 	^ start asMonth</body><body package="Roassal2-Pharo">asSeconds 	"Answer the seconds since the Squeak epoch: 1 January 1901"  	^ start asSeconds</body><body package="Roassal2-Pharo">asTime	^ start asTime</body><body package="Roassal2-Pharo">asWeek	^ start asWeek</body><body package="Roassal2-Pharo">asYear 	^ start asYear</body><body package="Roassal2-Pharo">to: anEnd	"Answer an Timespan. anEnd must be aDateAndTime or a Timespan" 	| end |	end := (anEnd isKindOf: Timespan)		ifTrue: [ anEnd end ]		ifFalse: [ anEnd asDateAndTime ].	^ Timespan starting: (self start) ending: end.</body><body package="Roassal2-Pharo">translateTo: aTimeZone	"Keep myself's representation and move it to another timezone offset.	Note that unlike #offset: this WILL change the absolute time in UTC"		^ self class		starting: (start translateTo: aTimeZone)</body><body package="Roassal2-Pharo">translateToUTC 	" Move this represenation to UTC"	^ self translateTo: 0</body></methods><methods><class-id>Roassal2.Timespan</class-id> <category>testing</category><body package="Roassal2-Pharo">includes: aDateAndTime 	^ (aDateAndTime isKindOf: Timespan)			ifTrue: [ 				(self includes: aDateAndTime start)					and: [ self includes: aDateAndTime end ] ]			ifFalse: [ aDateAndTime asDateAndTime between: start and: self end ]</body><body package="Roassal2-Pharo">includesAll: aCollection	"Answer whether all the elements of aCollection are in the receiver."	^ aCollection allSatisfy: [ :elem | self includes: elem ]</body><body package="Roassal2-Pharo">includesAllOf: aCollection 	self flag: 'use includesAll: instead'.		^ self includesAll: aCollection</body><body package="Roassal2-Pharo">includesAny: aCollection	"Answer whether any element of aCollection is included in the receiver"	^ aCollection anySatisfy: [ :elem | self includes: elem ]</body><body package="Roassal2-Pharo">includesAnyOf: aCollection 		self flag: 'use includesAny: instead'.		^ self includesAny: aCollection</body></methods><methods><class-id>Roassal2.Timespan</class-id> <category>arithmetic</category><body package="Roassal2-Pharo">+ operand	"operand conforms to protocol Duration" 		^ self class starting: (self start + operand) duration: self duration</body><body package="Roassal2-Pharo">- operand	"operand conforms to protocol DateAndTime or protocol Duration"	^ (operand respondsTo: #asDateAndTime) 	 	ifTrue: [ self start - operand ]	 	ifFalse: [ self + (operand negated) ].</body><body package="Roassal2-Pharo">&lt; comparand	^ self start &lt; comparand</body><body package="Roassal2-Pharo">= comparand	^ self species = comparand species 		and: [ self start = comparand start 				and: [ self duration = comparand duration ]]</body></methods><methods><class-id>Roassal2.Timespan</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Roassal2.Timespan</class-id> <category>private</category><body package="Roassal2-Pharo">do: aBlock with: aFirstElement 	self do: aBlock with: aFirstElement when: [ :t | true ].</body><body package="Roassal2-Pharo">do: aBlock with: aFirstElement when: aConditionBlock	| element end |	element := aFirstElement.	end := self end.	[ element start &lt;= end ] whileTrue:		[(aConditionBlock value: element)			ifTrue: [ aBlock value: element ].		element := element next. ]</body><body package="Roassal2-Pharo">duration: aDuration	"Set the Duration of this timespan"	duration := aDuration</body></methods><methods><class-id>Roassal2.Timespan class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">current	^ self starting: Timestamp now.</body><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^ self starting: Timestamp new.</body><body package="Roassal2-Pharo">starting: aTimestamp	^ self starting: aTimestamp duration: Duration zero.</body><body package="Roassal2-Pharo">starting: aTimestamp duration: aDuration	^ self basicNew  		start: aTimestamp asDateAndTime; 		duration: aDuration;		yourself.</body><body package="Roassal2-Pharo">starting: startTimestamp ending: endTimestamp	^ self 		starting: startTimestamp 		duration: (endTimestamp asDateAndTime - startTimestamp).</body></methods><methods><class-id>Roassal2.Month</class-id> <category>accessing</category><body package="Roassal2-Pharo">daysInMonth	^ self duration days.</body><body package="Roassal2-Pharo">index	^ self monthIndex</body><body package="Roassal2-Pharo">previous 	^ self class starting: (self start - 1)</body></methods><methods><class-id>Roassal2.Month</class-id> <category>printing</category><body package="Roassal2-Pharo">printOn: aStream 	aStream nextPutAll: self monthName, ' ', self year printString.</body></methods><methods><class-id>Roassal2.Month</class-id> <category>testing</category><body package="Roassal2-Pharo">name 	^ self monthName</body></methods><methods><class-id>Roassal2.Month</class-id> <category>conversion</category><body package="Roassal2-Pharo">asMonth	^ self</body></methods><methods><class-id>Roassal2.Month class</class-id> <category>accessing</category><body package="Roassal2-Pharo">daysInMonth	^ DaysInMonth ifNil: [		DaysInMonth := #(31 28 31 30 31 30 31 31 30 31 30 31) ]</body><body package="Roassal2-Pharo">daysInMonth: indexOrName forYear: yearInteger 	| index |	index := indexOrName isInteger 				ifTrue: [indexOrName]				ifFalse: [self indexOfMonth: indexOrName].	^ (self daysInMonth at: index)			+ ((index = 2					and: [Year isLeapYear: yearInteger])						ifTrue: [1] ifFalse: [0])</body><body package="Roassal2-Pharo">indexOfMonth: aMonthName 	1 to: 12 do: [ :i |  (aMonthName, '*' match: (self monthNames at: i)) ifTrue: [^i] ]. 	self error: aMonthName , ' is not a recognized month name'.</body><body package="Roassal2-Pharo">monthNames	^ MonthNames ifNil: [ MonthNames := #(January February March April May June July 			August September October November December).]</body><body package="Roassal2-Pharo">nameOfMonth: anIndex	^ self monthNames at: anIndex.</body></methods><methods><class-id>Roassal2.Month class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">current	^ self starting: Timestamp now</body><body package="Roassal2-Pharo">month: month	"Create a Month in the current year for the given &lt;month&gt;.	&lt;month&gt; may be a number or a String with the name of the month."	^ self 		year: Timestamp now year		month: month</body><body package="Roassal2-Pharo">month: month year: year	^ self year: year month: month</body><body package="Roassal2-Pharo">readFrom: aStream	| m y c |	m := (ReadWriteStream with: '') reset.	[(c := aStream next) isSeparator] whileFalse: [m nextPut: c].	[(c := aStream next) isSeparator] whileTrue.	y := (ReadWriteStream with: '') reset.	y nextPut: c.	[aStream atEnd] whileFalse: [y nextPut: aStream next].	^ self 		year: y contents asNumber		month: (Month indexOfMonth: m contents)"Month readFrom: 'July 1998' readStream"</body><body package="Roassal2-Pharo">starting: aDateAndTime duration: aDuration 	"Override - a each month has a defined duration"	| start adjusted days |	start := aDateAndTime asDateAndTime.	adjusted := Timestamp				year: start year				month: start month				day: 1.	days := self 		daysInMonth: adjusted month 		forYear: adjusted year.	^ super		starting: adjusted		duration: (Duration days: days)</body><body package="Roassal2-Pharo">year: year month: month	"Create a Month for the given &lt;year&gt; and &lt;month&gt;.	&lt;month&gt; may be a number or a String with the	name of the month. &lt;year&gt; should be with 4 digits."	^ self starting: (Timestamp year: year month: month day: 1)</body></methods><methods><class-id>Roassal2.AthensCairoSurface</class-id> <category>drawing</category><body package="Roassal2-Pharo">createPath: block	| p |	p := nil.	self graphicsContext newCairoContextWhile: [:cairoContext |		block value: cairoContext.		p := cairoContext copyPath. ].	^ p.</body><body package="Roassal2-Pharo">drawDuring: aBlock		self clear.	aBlock value: self cachedContext.</body><body package="Roassal2-Pharo">fillRectangle: rect withSolidColor: color	localCC ifNil: [ ^ self ].	localCC 		setShape: rect;		setPaint: color;		fill</body></methods><methods><class-id>Roassal2.AthensCairoSurface</class-id> <category>converting</category><body package="Roassal2-Pharo">asForm	^ self</body><body package="Roassal2-Pharo">writeToPng: aFilename	self cairoSurface writeToPng: aFilename.</body></methods><methods><class-id>Roassal2.AthensCairoSurface</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	super initialize.	"error with cairo to get transparent images"	"self background: Color transparent."	"self  background: Color white."	^ self</body></methods><methods><class-id>Roassal2.AthensCairoSurface</class-id> <category>accessing</category><body package="Roassal2-Pharo">cachedContext	^ localCC ifNil: [localCC:= self cachedSurface context.].</body><body package="Roassal2-Pharo">cachedSurface	^ cachedSurface ifNil: [cachedSurface := self cairoSurface.]</body></methods><methods><class-id>Roassal2.AthensCairoSurface class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">extent: aPoint	^self extent: aPoint x asInteger @ aPoint y asInteger on: Screen default</body></methods><methods><class-id>Roassal2.RTNAbstractNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizerOBSOLETE">command		^command</body><body package="Roassal2-ColorNormalizerOBSOLETE">command: aBlock		command := aBlock</body><body package="Roassal2-ColorNormalizerOBSOLETE">rtValue: anEntity		self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTSVGTextPopup</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	text := #asString.	fontSize := 12.	font := self defaultFont.</body></methods><methods><class-id>Roassal2.RTSVGTextPopup</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addEventHandlers: aStream id: aString element: aRTElement center: aPoint	|rText xOverflow yOverflow x y converter|	rText := (self text value: aRTElement model) asString.	x := aPoint x.	y := aPoint y.	xOverflow := aPoint x - bounds width + ((TRPlatform current familyName: self font size: self fontSize)  widthOfString: rText).	yOverflow := aPoint y - bounds height + self fontSize.	xOverflow &gt;= 0 ifTrue: [ x:= x - xOverflow ].	yOverflow &gt;= 0 ifTrue: [ y:= y - yOverflow ].	converter := RTSVGStringConverter new.	aStream		nextPutAll: String cr,'&lt;text id="',aString,'pop" x="',x asString,'" y="',y asString,'" font-size="',self fontSize asString,'" style="fill:',self color asHTMLColor,'" visibility="hidden"&gt;&lt;tspan font-family = "',self font,'"&gt;',(converter convertString: rText),(self mouseAction: aString),'&lt;/tspan&gt;&lt;/text&gt;'</body></methods><methods><class-id>Roassal2.RTSVGTextPopup</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">font	^ font</body><body package="Roassal2-Exporter-SVG">font: anObject	font := anObject</body><body package="Roassal2-Exporter-SVG">fontSize	^ fontSize</body><body package="Roassal2-Exporter-SVG">fontSize: anObject	fontSize := anObject</body><body package="Roassal2-Exporter-SVG">text	^text</body><body package="Roassal2-Exporter-SVG">text: aSymbolOrBlock	text := aSymbolOrBlock</body><body package="Roassal2-Exporter-SVG">yBound	^fontSize</body></methods><methods><class-id>Roassal2.RTSVGTextPopup</class-id> <category>configuration</category><body package="Roassal2-Exporter-SVG">defaultFont	^'Arial, Helvetica, sans-serif'</body></methods><methods><class-id>Roassal2.RTSVGTextPopup class</class-id> <category>as yet unclassified</category><body package="Roassal2-Exporter-SVG">on: anExporter text: aString color: aColor font: aFont size: aNumber targets: aRTShape	| generator |	generator := [ :e |  self new target: e; text: aString; color: aColor; font: aFont; fontSize: aNumber; yourself ].	self on: anExporter targets: aRTShape generator: generator</body><body package="Roassal2-Exporter-SVG">on: anExporter text: aString color: aColor size: aNumber targets: aRTShape	| generator |	generator := [ :e |  self new target: e; text: aString; color: aColor; fontSize: aNumber; yourself ].	self on: anExporter targets: aRTShape generator: generator</body><body package="Roassal2-Exporter-SVG">on: anExporter text: aString font: aFont size: aNumber targets: aRTShape	| generator |	generator := [ :e |  self new target: e; text: aString; font: aFont; fontSize: aNumber; yourself ].	self on: anExporter targets: aRTShape generator: generator</body><body package="Roassal2-Exporter-SVG">on: anExporter text: aString targets: aRTShape	| generator |	generator := [ :e |  self new target: e; text: aString; yourself ].	self on: anExporter targets: aRTShape generator: generator</body><body package="Roassal2-Exporter-SVG">onClick: anExporter text: aString color: aColor size: aNumber targets: aRTShape	| generator |	generator := [ :e |  self new target: e; text: aString; color: aColor; fontSize: aNumber; click: true; yourself ].	self on: anExporter targets: aRTShape generator: generator</body><body package="Roassal2-Exporter-SVG">onClick: anExporter text: aString targets: aRTShape	| generator |	generator := [ :e |  self new target: e; text: aString; click: true; yourself ].	self on: anExporter targets: aRTShape generator: generator</body></methods><methods><class-id>Roassal2.RTColorFadingLegendItem</class-id> <category>accessing</category><body package="Roassal2-Builder-Legend">colors: aCollectionOfColors	colors := aCollectionOfColors</body><body package="Roassal2-Builder-Legend">description	^ description</body><body package="Roassal2-Builder-Legend">description: anObject	description := anObject</body></methods><methods><class-id>Roassal2.RTColorFadingLegendItem</class-id> <category>hooks</category><body package="Roassal2-Builder-Legend">execute	| g shape es n label |	g := RTGroup new.		shape := RTBox new width: 3; height: 20.	es := shape elementsOn: (1 to: 50).	g addAll: es.	RTHorizontalLineLayout new gapSize: -1; on: es.		n := RTMetricNormalizer new.	n elements: es.	n normalizeColor: #yourself using: colors.		label := (self newLabelShape: description) element.	g add: label.	RTConstraint move: label onTheRightOf: es.	label translateBy: 20 @ 0.		^ g</body></methods><methods><class-id>Roassal2.RTHorizontalAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">basicEndingPointOf: aRTEdge	^ aRTEdge to encompassingRectangle leftCenter</body><body package="Roassal2-AttachPoint">basicStartingPointOf: aRTEdge	^ aRTEdge from encompassingRectangle rightCenter</body></methods><methods><class-id>Roassal2.RTSVGExporter</class-id> <category>configuration</category><body package="Roassal2-Exporter-SVG">defaultBackgroundColor	^ Color white</body></methods><methods><class-id>Roassal2.RTSVGExporter</class-id> <category>exporting</category><body package="Roassal2-Exporter-SVG">exportOnStream: fileStream	| bounds |	bounds := self fixedEncompassingRectangle.	self stream: fileStream.	self addStart: bounds.	RTSVGVisitor visit: view on: stream canvas: bounds.	self addEnd.</body><body package="Roassal2-Exporter-SVG">exportToFile	| file |	file := self fileName asFileReference.	file exists ifTrue: [ file delete ].	self fileName asFileReference writeStreamDo: [: fileStream |		self exportOnStream: fileStream ]</body><body package="Roassal2-Exporter-SVG">interactiveExportToFile	| fileStream fileRef |		fileRef := TRPlatform current 		dialogRequestSaveFilename: 'Export as SVG'		extensions: #('svg')		path: nil.			fileRef ifNil: [ TRPlatform current inform: 'Saving cancelled'. ^ self ].		fileStream := fileRef writeStream.	[ self exportOnStream: fileStream ] 		ensure: [ fileStream notNil ifTrue: [ fileStream close ] ]</body></methods><methods><class-id>Roassal2.RTSVGExporter</class-id> <category>svg</category><body package="Roassal2-Exporter-SVG">addCanvasColor	stream		nextPutAll:			('style="background-color: rgba(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;,&lt;4p&gt;);float:left" '				expandMacrosWith: (backgroundColor red * 256) rounded				with: (backgroundColor green * 256) rounded				with: (backgroundColor blue * 256) rounded				with: backgroundColor alpha)</body><body package="Roassal2-Exporter-SVG">addCanvasSize: bounds	|pair|	pair := self getFinalBounds: bounds.	stream 		nextPutAll: ('width="&lt;1p&gt;px" height="&lt;2p&gt;px" ' expandMacrosWith: pair first with: pair second).</body><body package="Roassal2-Exporter-SVG">addCode	| lines hightStart step|	code ifNil: [ ^self ].	lines := code lines allButFirst.	step := (TRLabelShape new					text: lines first;						encompassingRectangle) height.	hightStart := (step / 2) rounded. 	stream		nextPutAll:				'&lt;rect  x="',canvasWidth asString,'" y="',0 asString,'" width="',((3*(finalWidth - canvasWidth)/4) rounded) asString,'" height="',finalHeight asString,'" fill="rgb(192,192,192)" /&gt;' , String cr.	lines do: [ :l |  		stream			nextPutAll: String cr,'&lt;text x="',(canvasWidth + 5) asString,'" y="',hightStart asString,'" font-size="12"&gt;&lt;tspan font-family = "Arial, Helvetica, sans-serif" xml:space="preserve"&gt;',l,'&lt;/tspan&gt;&lt;/text&gt;'.		hightStart := hightStart + step]</body><body package="Roassal2-Exporter-SVG">addEnd		stream		nextPutAll: '&lt;/svg&gt;'.</body><body package="Roassal2-Exporter-SVG">addStart: bounds	self 		addVersion;		addCanvasSize: bounds;		addCanvasColor;		addXLinkVersion;		addCode.</body><body package="Roassal2-Exporter-SVG">addVersion	stream nextPutAll: '&lt;svg  xmlns="http://www.w3.org/2000/svg" '</body><body package="Roassal2-Exporter-SVG">addXLinkVersion	stream		nextPutAll: String cr;		nextPut: Character tab;		nextPutAll: 'xmlns:xlink="http://www.w3.org/1999/xlink"&gt;';		nextPutAll: String cr</body><body package="Roassal2-Exporter-SVG">getFinalBounds: bounds	canvasWidth := (bounds width + 2) rounded.	canvasHeight := (bounds height + 2) rounded.	finalWidth := canvasWidth.	finalHeight  := canvasHeight.	code = nil		ifFalse: [ | maxW line w h|			maxW := 0.			line := ''.			code lines do: [ :l | 				maxW := maxW max: l size.				maxW = l size					ifTrue: [ line := l ].					].			w := (TRLabelShape new					text: line;						width).			h := (TRLabelShape new					text: line;						height).			finalWidth := canvasWidth  + w.			finalHeight := canvasHeight max: (h * code lines size) 						  ].	^ Array with: finalWidth with: finalHeight</body></methods><methods><class-id>Roassal2.RTSVGExporter</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">backgroundColor	^ backgroundColor</body><body package="Roassal2-Exporter-SVG">backgroundColor: aColor	backgroundColor := aColor</body><body package="Roassal2-Exporter-SVG">builder: builder filename: aName	self view: builder view filename: aName</body><body package="Roassal2-Exporter-SVG">code: aString	code := aString</body><body package="Roassal2-Exporter-SVG">fileName	fileName = nil		ifTrue: [ fileName := (Time current asString  copyReplaceAll: ':' with: '') squeezeOutNumber asString.			 fileName := 'output',fileName.].	^ fileName</body><body package="Roassal2-Exporter-SVG">fileName: anObject	fileName := anObject</body><body package="Roassal2-Exporter-SVG">stream		^stream</body><body package="Roassal2-Exporter-SVG">stream: aStream		stream := aStream</body><body package="Roassal2-Exporter-SVG">view		^view</body><body package="Roassal2-Exporter-SVG">view: aView	self backgroundColor: aView canvas color.	view := aView.</body><body package="Roassal2-Exporter-SVG">view: aView filename: aName	self view: aView.	self fileName: aName.</body></methods><methods><class-id>Roassal2.RTSVGExporter</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	backgroundColor := self defaultBackgroundColor</body></methods><methods><class-id>Roassal2.RTSVGExporter</class-id> <category>util</category><body package="Roassal2-Exporter-SVG">fixedEncompassingRectangle 	| shapes canvas |	shapes := self view canvas shapes.	canvas := shapes first encompassingRectangle.	shapes do: [ :s| |rect|				rect := s encompassingRectangle.				rect height &lt; 0 					ifTrue: [ rect := Rectangle origin: rect bottomLeft corner: rect topRight].				canvas := canvas merge: rect.				 ].	^canvas</body></methods><methods><class-id>Roassal2.RTSVGExporter class</class-id> <category>as yet unclassified</category><body package="Roassal2-Exporter-SVG">exportBuilderAsSVG: aRTBuilder	^self exportViewAsSVG: (aRTBuilder view)</body><body package="Roassal2-Exporter-SVG">exportBuilderAsSVG: aRTBuilder filename: aString	^self exportViewAsSVG: (aRTBuilder view) filename: aString</body><body package="Roassal2-Exporter-SVG">exportViewAsSVG: aRTView 	^ self new view: aRTView; exportToFile</body><body package="Roassal2-Exporter-SVG">exportViewAsSVG: aRTView filename: aString	^ self new view: aRTView; fileName: aString; exportToFile</body><body package="Roassal2-Exporter-SVG">interactiveExportBuilderAsSVG: aRTBuilder	^self interactiveExportViewAsSVG: (aRTBuilder view)</body><body package="Roassal2-Exporter-SVG">interactiveExportViewAsSVG: aRTView 	^ self new view: aRTView; interactiveExportToFile</body></methods><methods><class-id>Roassal2.RTAnimation</class-id> <category>refreshing</category><body package="Roassal2-Animation">refresh	"called on every Morphic repaint cycle"</body></methods><methods><class-id>Roassal2.RTAnimation</class-id> <category>actions</category><body package="Roassal2-Animation">addedIn: trachelCanvas	"do nothing"</body><body package="Roassal2-Animation">start	"Initialize and start your animation, called when the animation has been attached to the view."	"To be overriden"</body></methods><methods><class-id>Roassal2.RTAnimation</class-id> <category>testing</category><body package="Roassal2-Animation">hasCompleted	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAnimation</class-id> <category>accessing</category><body package="Roassal2-Animation">after: aBlock</body><body package="Roassal2-Animation">element	^ element</body></methods><methods><class-id>Roassal2.RTAnimation</class-id> <category>public</category><body package="Roassal2-Animation">inView: aView	aView addAnimation: self</body></methods><methods><class-id>Roassal2.RTAnimation class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">new	^ super new initialize.</body></methods><methods><class-id>Roassal2.RTAbstractZoomMove</class-id> <category>actions</category><body package="Roassal2-Animation">start	animatedValue start.	trachelCanvas signalUpdate</body></methods><methods><class-id>Roassal2.RTAbstractZoomMove</class-id> <category>instance creation</category><body package="Roassal2-Animation">on: view	^ self on: view during: 0.5</body></methods><methods><class-id>Roassal2.RTAbstractZoomMove</class-id> <category>public</category><body package="Roassal2-Animation">on: view during: seconds	| initialScale |	initialScale := view canvas camera scale.	trachelCanvas := view canvas.	animatedValue := TRVIAnimatedValue new							evaluator: [ :t | initialScale interpolateTo: (initialScale * self step ) at: t ];							timer: (TRVITimer new cycleLength: seconds);							yourself.</body></methods><methods><class-id>Roassal2.RTAbstractZoomMove</class-id> <category>testing</category><body package="Roassal2-Animation">hasCompleted	^ animatedValue hasCompleted</body></methods><methods><class-id>Roassal2.RTAbstractZoomMove</class-id> <category>refreshing</category><body package="Roassal2-Animation">refresh	trachelCanvas camera scale: animatedValue value.	trachelCanvas signalUpdate</body></methods><methods><class-id>Roassal2.RTAbstractZoomMove</class-id> <category>stepping and presenter</category><body package="Roassal2-Animation">step	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractZoomMove class</class-id> <category>instance creation</category><body package="Roassal2-Animation">on: aView	aView addAnimation: (self new on: aView)</body></methods><methods><class-id>Roassal2.RTZoomOutMove</class-id> <category>stepping and presenter</category><body package="Roassal2-Animation">step	^ 0.8</body></methods><methods><class-id>Roassal2.RTDraggableView</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: aView	aView canvas when: TRMouseDragging do: [ :e |		aView canvas camera translateBy: e step negated / aView canvas camera scale.		e signalUpdate ]</body></methods><methods><class-id>Roassal2.TREventOverseer</class-id> <category>accessing</category><body package="Roassal2-Trachel-Core">block	^ block</body><body package="Roassal2-Trachel-Core">block: aOneArgBlock	"The block is evaluated at each event fired by TRMorph"	block := aOneArgBlock</body></methods><methods><class-id>Roassal2.TREventOverseer</class-id> <category>public</category><body package="Roassal2-Trachel-Core">firedEvent: anEvent	block rtValue: anEvent</body></methods><methods><class-id>Roassal2.TREventOverseer</class-id> <category>initialization</category><body package="Roassal2-Trachel-Core">initialize	super initialize.	"Do nothing for now"	block := nil</body></methods><methods><class-id>Roassal2.TRAnnouncingOverseer</class-id> <category>public</category><body package="Roassal2-Trachel-Core">announce: anEvent	self announcer announce: anEvent</body><body package="Roassal2-Trachel-Core">announcer	^ announcer ifNil: [ announcer := Announcer new ]</body><body package="Roassal2-Trachel-Core">firedEvent: anEvent	self announce: anEvent</body><body package="Roassal2-Trachel-Core">when: anEvent do: aOneArgBlock	self announcer when: anEvent do: aOneArgBlock</body></methods><methods><class-id>Roassal2.TRAnnouncingOverseer class</class-id> <category>example</category><body package="Roassal2-Trachel-Core">example	| c s eo |	c := TRCanvas new.	s := TRBoxShape new size: 50.	s when: TRMouseLeftClick do: [ :evt |  ].	c addShape: s.	eo := TRAnnouncingOverseer new.	c eventOverseer: eo.	eo		when: TRMouseLeftClick		do: [ :event | 			Transcript				log: event;				tab;				logCr: event shape ].	c open</body></methods><methods><class-id>Roassal2.RTAnnounceableObject</class-id> <category>attributes</category><body package="Roassal2-Core">attributeAt: aKey	^ self attributes at: aKey</body><body package="Roassal2-Core">attributeAt: aKey ifAbsent: aBlockClosure 		^ self attributes at: aKey ifAbsent: aBlockClosure</body><body package="Roassal2-Core">attributeAt: aKey ifAbsentPut: aBlockClosure 		^ self attributes at: aKey ifAbsentPut: aBlockClosure</body><body package="Roassal2-Core">attributeAt: aKey put: value	^ self attributes at: aKey put: value</body><body package="Roassal2-Core">attributes	"Return the list of attributes associated to the element. Attributes are useful for caching values"	^ attributes ifNil: [ attributes := Dictionary new ]</body><body package="Roassal2-Core">hasAttribute: aKey 	"Return true if attributes includes aKey"		^ attributes notNil and: [ attributes includesKey: aKey ]</body><body package="Roassal2-Core">hasAttributes 	"Return true if at least one attributes is present"		^ attributes notNil and: [ attributes notEmpty ]</body><body package="Roassal2-Core">hasNotAttribute: aKey 	"Return false if attributes includes aKey"		^ (self hasAttribute: aKey) not</body><body package="Roassal2-Core">removeAttributeAt: aKey	^ self attributes removeKey: aKey</body><body package="Roassal2-Core">removeAttributeAt: aKey ifAbsent: anErrorBlock	^ self attributes removeKey: aKey ifAbsent: anErrorBlock</body></methods><methods><class-id>Roassal2.RTAnnounceableObject</class-id> <category>removing</category><body package="Roassal2-Core">removeInteractionIfPresent: anInteractionClass	"Remove all the callbacks associated to the interaction."	(self hasInteraction: anInteractionClass) ifFalse: [ ^ self ].	(self getInteractionsForClass: anInteractionClass) do: [ :int | self announcer unsubscribe: int ]</body></methods><methods><class-id>Roassal2.RTAnnounceableObject</class-id> <category>testing</category><body package="Roassal2-Core">getInteractionForClass: anInteractionClass	"Return the Announcement subscription for the interaction"	^ self announcer subscriptions getInteractionForClass: anInteractionClass</body><body package="Roassal2-Core">getInteractionsForClass: anInteractionClass	"Return the Announcement subscriptions for the interaction"	^ self announcer subscriptions getInteractionsForClass: anInteractionClass</body><body package="Roassal2-Core">hasInteraction: anInteractionClass	"Return true or false if the receiver has an interaction. Note that the argument has to be an interaction class. And not an event"	self announcer subscriptions ifNil: [ ^ false ].		^ self announcer subscriptions handleSubscriberClass: anInteractionClass</body><body package="Roassal2-Core">isEdge	^ false</body><body package="Roassal2-Core">isElement	^ false</body><body package="Roassal2-Core">isView	^ false</body></methods><methods><class-id>Roassal2.RTAnnounceableObject</class-id> <category>accessing</category><body package="Roassal2-Core">announcer	announcer ifNil: [ self announcer: Announcer new ].	^ announcer</body><body package="Roassal2-Core">announcer: anAnnouncer	announcer := anAnnouncer</body></methods><methods><class-id>Roassal2.RTAnnounceableObject</class-id> <category>interaction</category><body package="Roassal2-Core">when: evt do: aOneArgBlock	"Define a callback for the event evt (which could be a class event or an instance of a class event. aOneArgBlock is evaluated whenever the event is received."	self announcer when: evt do: aOneArgBlock</body></methods><methods><class-id>Roassal2.RTAnnounceableObject</class-id> <category>adding</category><body package="Roassal2-Core">@ anInteractionClassOrInstance	"Add an interaction to the node"		self addInteraction: anInteractionClassOrInstance</body><body package="Roassal2-Core">addInteraction: anInteractionClassOrInstance 	anInteractionClassOrInstance initializeElement: self</body></methods><methods><class-id>Roassal2.RTAnnounceableObject</class-id> <category>announce</category><body package="Roassal2-Core">announce: evt	"Announce the event. If a callback for the event evt is defined, then it is executed, with myself as argument."	| t |	t := evt asAnnouncement.	t shape: self trachelShape.	self announcer announce: evt</body></methods><methods><class-id>Roassal2.RTAbstractCircleLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">initialAngle	"Return the initial angle, in radian"	^ initialAngle</body><body package="Roassal2-Layouts">initialAngle: aFloat	"aFloat is an angle in Radian."	initialAngle := aFloat</body><body package="Roassal2-Layouts">initialAngleInDegree 	"Return the initial angle in degree"	^ self initialAngle * 180 / Float pi</body><body package="Roassal2-Layouts">initialAngleInDegree: aNumber	"Set the initial angle in radian"	self initialAngle: aNumber * Float pi / 180</body><body package="Roassal2-Layouts">initialIncrementalAngle	"Return the initial incremental angle"	^ initialIncrementalAngle</body><body package="Roassal2-Layouts">initialIncrementalAngle: aNumberInRadian	initialIncrementalAngle := aNumberInRadian</body><body package="Roassal2-Layouts">initialIncrementalAngleInDegree: aNumberInDegree	self initialIncrementalAngle: aNumberInDegree * Float pi / 180</body><body package="Roassal2-Layouts">initialRadius	"Return the radius in pixels of the circle"	^ initialRadius</body><body package="Roassal2-Layouts">initialRadius: aNumber	"Set the radius of the circle"	initialRadius := aNumber</body><body package="Roassal2-Layouts">radius: aNumber	^ self initialRadius: aNumber</body><body package="Roassal2-Layouts">scaleBy: aNumber		factor := aNumber</body><body package="Roassal2-Layouts">scaleFactor	^ factor</body></methods><methods><class-id>Roassal2.RTAbstractCircleLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">computeIncrementalAngleFor: elements	"Return the value _in radian_ of the incremental angle"		^ initialIncrementalAngle = 0		ifTrue: [ 2 * Float pi / elements size ]		ifFalse: [ initialIncrementalAngle ]</body><body package="Roassal2-Layouts">computeRadiusFor: elements	"Return the radius of the circle. If none has been set (i.e., initialRadius = 0), then it is computed as the scale factor times the number of elements"	^ initialRadius = 0 		ifTrue: [ elements size * self scaleFactor ]		ifFalse: [ initialRadius ]</body></methods><methods><class-id>Roassal2.RTAbstractCircleLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize	"Initialize a newly created instance. This method must answer the receiver."		super initialize.	self scaleBy: 11.		"Represent the initial angle to place the elements"	initialAngle := 0.		"Distance of the circle. If it is 0 when entering doExecute, then it is computed"	initialRadius := 0.		"0 means that it is computed, and not set by the user"	initialIncrementalAngle := 0.</body></methods><methods><class-id>Roassal2.RTAbstractCircleLayout class</class-id> <category>public</category><body package="Roassal2-Layouts">isAbstract	^ self name = #RTAbstractCircleLayout</body></methods><methods><class-id>Roassal2.RTCircleLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements	| angleIncrement angle rad center |	rad := self computeRadiusFor: elements.	center := Point x: rad y: rad.	angleIncrement := self computeIncrementalAngleFor: elements.	angle := self initialAngle.	elements		do: [ :each | 			| point |			point := center + (Point r: rad theta: angle).			angle := angle + angleIncrement.			translator translateTopLeftOf: each to: point.			self step ]</body></methods><methods><class-id>Roassal2.RTCircleLayout class</class-id> <category>instance creation</category><body package="Roassal2-Layouts">scaleBy: aNumber		^self new scaleBy: aNumber</body></methods><methods><class-id>Roassal2.RTAbstractWeightedCircleLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements	"This method is used polymorphically"</body><body package="Roassal2-Layouts">weightSum: elements	"Computes the sum of all elements 'weight' or size"	| sum |	sum := 0.	elements		do: [ :each |			sum := sum + (each height)		].	^sum</body></methods><methods><class-id>Roassal2.RTAbstractScrollBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-ScrollBar">barHeight	"To get the height of the bar for the vertical scroll bar."	(self barSpecific = #scalable) ifTrue: [		| max min s |				max := self size -50.		min := 30.					s := (self size * (self view canvas extent y) / (self encompassingRectangleFromSpaceToPixel height) / self view canvas camera scale).				(s &gt; max) ifTrue: [ ^max ].		(s &lt; min) ifTrue: [ ^min ].		^ s.				] ifFalse: [ ^ self width]</body><body package="Roassal2-Builder-ScrollBar">defaultEncompassingRectangle	self encompassingRectangle: (Rectangle origin: 0@0 corner: 10@10)</body><body package="Roassal2-Builder-ScrollBar">defaultScrollBar	"all default values of scroll bar"	self movable: #isMovable.	self barShape: #anEllipse.	self fixedPosition:  [ :v | (v view canvas extent x /2)@(v view canvas extent y  * 3 / 4)].	self size: 200.	self width: 10.	self orientation: #horizontal.	self fillColor: (Color lightGray alpha: 0).</body><body package="Roassal2-Builder-ScrollBar">encompassingRectangleFromSpaceToPixelUpdate	self encompassingRectangleFromSpaceToPixel: (self view canvas camera fromSpaceToPixelForRectangle: (self encompassingRectangle))</body><body package="Roassal2-Builder-ScrollBar">encompassingRectangleUpdate	self encompassingRectangle: (self view canvas camera encompassingRectangleOf: self view elements )</body><body package="Roassal2-Builder-ScrollBar">fixedPositionBlock	"get the block of the initial fixed Position"	^ fixedPosition</body><body package="Roassal2-Builder-ScrollBar">notify	"Update the scroll bar"	self encompassingRectangleUpdate.	self encompassingRectangleFromSpaceToPixelUpdate.</body><body package="Roassal2-Builder-ScrollBar">notifyWith: anElement	"Update the scroll bar and add the callback"	self notify.	anElement addCallback: (TRTranslationCallback new block: [ self encompassingRectangleUpdate. self encompassingRectangleFromSpaceToPixelUpdate. self signalUpdate.]).</body><body package="Roassal2-Builder-ScrollBar">sizeBlock	"SizeBlock allows to get the block and not the result of the evaluation of the size block on size, obtained by self size"	^ size.</body></methods><methods><class-id>Roassal2.RTAbstractScrollBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-ScrollBar">barShape	^ barShape</body><body package="Roassal2-Builder-ScrollBar">barShape: aSymbol	barShape := aSymbol</body><body package="Roassal2-Builder-ScrollBar">barSpecific	^ barSpecific</body><body package="Roassal2-Builder-ScrollBar">barSpecific: aSymbol	barSpecific := aSymbol</body><body package="Roassal2-Builder-ScrollBar">encompassingRectangle	^ encompassingRectangle</body><body package="Roassal2-Builder-ScrollBar">encompassingRectangle: aRectangle	encompassingRectangle := aRectangle</body><body package="Roassal2-Builder-ScrollBar">encompassingRectangleFromSpaceToPixel	^ encompassingRectangleFromSpaceToPixel</body><body package="Roassal2-Builder-ScrollBar">encompassingRectangleFromSpaceToPixel: aRectangle	encompassingRectangleFromSpaceToPixel := aRectangle</body><body package="Roassal2-Builder-ScrollBar">fillColor	^ fillColor</body><body package="Roassal2-Builder-ScrollBar">fillColor: aColor	fillColor := aColor</body><body package="Roassal2-Builder-ScrollBar">fixedPosition	"get the value of the initial fixed Position, in case of a block, evaluation of self"	^ (fixedPosition rtValue: self).</body><body package="Roassal2-Builder-ScrollBar">fixedPosition: aPositionOrABlock	"set the initial position of the scroll bar, if a block, the block will be evaluated with 'cull self'. For example a block [:v | v view canvas extent] will set the position to canvas extent, just as [&lt;myBuilder&gt; view canvas extent]. If you want the scrollBar to be fully free and movable without reset position, set a point for fixedPosition."	fixedPosition:= aPositionOrABlock</body><body package="Roassal2-Builder-ScrollBar">movable	^ movable</body><body package="Roassal2-Builder-ScrollBar">movable: aSymbol	movable := aSymbol</body><body package="Roassal2-Builder-ScrollBar">orientation	^ orientation</body><body package="Roassal2-Builder-ScrollBar">orientation: aSymbol	"set orientation of scroll bar, #horizontal or #vertical"	orientation := aSymbol.</body><body package="Roassal2-Builder-ScrollBar">shapes	"the shapes used to build the scroll bar"	^ shapes</body><body package="Roassal2-Builder-ScrollBar">shapes: aRTScrollBarShapes	"the shapes used to build the scroll bar"	shapes := aRTScrollBarShapes</body><body package="Roassal2-Builder-ScrollBar">size	"get the value of the size, in case of block, evaluation of self"	^ size rtValue: self</body><body package="Roassal2-Builder-ScrollBar">size: aSizeOraBlock	"set the size of scroll bar, it's length. If a block, the block will be evaluated with 'cull self'. For example a block [ :v | v view canvas extent x] will set the size to canvas width, just as [&lt;myBuilder&gt; view canvas extent x]"	size:= aSizeOraBlock.</body><body package="Roassal2-Builder-ScrollBar">width	^ width</body><body package="Roassal2-Builder-ScrollBar">width: aSize	"set width of the scroll bar"	width := aSize</body></methods><methods><class-id>Roassal2.RTAbstractScrollBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-ScrollBar">renderIn: aView	self shouldNotImplement</body></methods><methods><class-id>Roassal2.RTAbstractScrollBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-ScrollBar">initialize	super initialize.	self configureView: view.	self defaultScrollBar.</body></methods><methods><class-id>Roassal2.RTAbstractScrollBuilder</class-id> <category>signalling</category><body package="Roassal2-Builder-ScrollBar">signalUpdate		"this method is used to increase the size of the shapes composing the scroll bar when the size is defined by a Block, for example to follow the size of the windows	Or if the position is fixed on the border on the widows, the scroll bar should follow the windows border at signal updates"	self assert: (self shapes isNotNil).	(self shapes collection) ifNotEmpty: [ 					(self sizeBlock isBlock) 			ifTrue: [ self signalUpdateSize] 			ifFalse: [ 				(self orientation = #horizontal) 					ifTrue: [ self positionOnBorderHorizontal] 					ifFalse: [ self positionOnBorderVertical]				].			self signalUpdatePosition.		].	self view signalUpdate.</body></methods><methods><class-id>Roassal2.RTAbstractScrollBuilder</class-id> <category>adding</category><body package="Roassal2-Builder-ScrollBar">addShapesToView	self shapes collection reverse do: [ :s | self view canvas addFixedShape: s ].</body></methods><methods><class-id>Roassal2.RTAbstractScrollBuilder</class-id> <category>view</category><body package="Roassal2-Builder-ScrollBar">configureView: aView	aView.</body></methods><methods><class-id>Roassal2.RTAbstractScrollBuilder</class-id> <category>private - bar management</category><body package="Roassal2-Builder-ScrollBar">barWidth	 "To get the width of the bar for the horizontal scroll bar. To change the width of the bar in general see #width:"	(self barSpecific = #scalable) ifTrue: [		| max min s |				max := self size -50.		min := 30.				s := (self size * (self view canvas extent x) / (self encompassingRectangleFromSpaceToPixel width) / self view canvas camera scale).				(s &gt; max) ifTrue: [ ^max ].		(s &lt; min) ifTrue: [ ^min ].		^ s.		] ifFalse: [ ^ self width]</body></methods><methods><class-id>Roassal2.RTScrollBarBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-ScrollBar">defineShapes	"define shapes if scrollBar is horizontal or vertical."	"set bar shape, the draggable shape."		(self barShape = #aBox) 		ifTrue: [ self shapes bar: TRBoxShape new ] 		ifFalse: [ self shapes bar: TREllipseShape new ].	"Start and stop are made to show the border of scroll Bar"	(self orientation = #horizontal) ifTrue: [		self shapes defineHorizontalShapes. 	].	(self orientation = #vertical) ifTrue: [ 			self shapes defineVerticalShapes. 		].</body><body package="Roassal2-Builder-ScrollBar">positionOnBorderHorizontal	((self shapes bar position x - (self barWidth / 2)) &lt; (self shapes surroundingRectangle encompassingRectangle origin x)) ifTrue: [ self shapes bar translateTo: ((self shapes surroundingRectangle encompassingRectangle origin x) + (self barWidth / 2))@(self shapes surroundingRectangle position y)].	((self shapes bar position x + (self barWidth / 2)) &gt; (self shapes surroundingRectangle encompassingRectangle corner x)) ifTrue: [ self shapes bar translateTo: ((self shapes surroundingRectangle encompassingRectangle corner x) - (self barWidth / 2))@(self shapes surroundingRectangle position  y)].</body><body package="Roassal2-Builder-ScrollBar">positionOnBorderVertical	((self shapes bar position y - (self barHeight / 2)) &lt; (self shapes surroundingRectangle encompassingRectangle origin y)) ifTrue: [ self shapes bar translateTo: (self shapes surroundingRectangle position  x)@(self shapes surroundingRectangle encompassingRectangle origin y + (self barHeight / 2))].	((self shapes bar position y + (self barHeight / 2)) &gt; (self shapes surroundingRectangle encompassingRectangle corner y)) ifTrue: [ self shapes bar translateTo: (self shapes surroundingRectangle position  x)@(self shapes surroundingRectangle encompassingRectangle corner y - (self barHeight / 2))].</body><body package="Roassal2-Builder-ScrollBar">reverseTranslationHorizontal: evt	| t |	t := ((evt step x)  / (self encompassingRectangleFromSpaceToPixel width )) * (self size - self shapes bar width).			^ (t negated)@0</body><body package="Roassal2-Builder-ScrollBar">reverseTranslationVertical: evt	| t |	t := ((evt step y)  / (self encompassingRectangleFromSpaceToPixel height)) * (self size - self shapes bar height).			^ 0@(t negated)</body><body package="Roassal2-Builder-ScrollBar">translationHorizontal: evt	| t |	t := ((evt step x) / (self size  - self shapes bar width)) * ((self encompassingRectangleFromSpaceToPixel width) / self view canvas camera scale).		^ t@0</body><body package="Roassal2-Builder-ScrollBar">translationVertical: evt	| t |	t := ((evt step y) / (self size  - self shapes bar height)) * ((self encompassingRectangleFromSpaceToPixel height) / self view canvas camera scale).		^ 0@t</body></methods><methods><class-id>Roassal2.RTScrollBarBuilder</class-id> <category>adding</category><body package="Roassal2-Builder-ScrollBar">addAnimations	"add animations on the bar, to make the scroll bar movable or not etc.. Callbacks on resize, drag and drop... A lot of precise case to reduce costly full update at maximum"	| bar surroundingRectangle margeRectangle |	bar := self shapes bar.	surroundingRectangle := self shapes surroundingRectangle.	margeRectangle := self shapes margeRectangle.	"bar and view drag animations"	(self orientation = #horizontal) ifTrue: [ 		self barDragHorizontal.		self viewDragHorizontal.		].	(self orientation = #vertical) ifTrue: [ 		self barDragVertical.		self viewDragVertical.		].		"Move the scroll bar when movable animation"	(self movable = #isMovable) ifTrue: [		surroundingRectangle when: TRMouseDragging do: [ :evt |			self shapes collection do: [ :s | s translateBy: (evt step) ].			self view signalUpdate.			]		].		"Callbacks when translate, resize or rescale canvas"	self view elements do: [:e | e addCallback: (TRTranslationCallback new block: [			self encompassingRectangleUpdate. self encompassingRectangleFromSpaceToPixelUpdate. self signalUpdate.])		].		self view when: TRResizeCanvasEvent do: [ :evt | self signalUpdate].		self view canvas camera addCallback: (TRCameraScaleCallback new block: [ self encompassingRectangleFromSpaceToPixelUpdate. self signalUpdate. ]).</body><body package="Roassal2-Builder-ScrollBar">barDragHorizontal	"Animation for a horizontal drag of the bar"	self shapes bar when: TRMouseDragging do: [ :evt |					(self encompassingRectangle containsPoint: (self view canvas camera position)) 			ifFalse: [ (self view canvas camera) translateTo:  ((self encompassingRectangle) pointNearestTo: (self view canvas camera position))  ].					(self shapes margeRectangle includesPoint: (self shapes bar position + ((evt step x)@0))) &amp; (self shapes surroundingRectangle includesPoint: (evt position x)@(self shapes bar position y)) 			ifTrue: [  				self shapes bar translateBy: (evt step x)@0.				self view canvas camera translateBy: (self translationHorizontal: evt).				].					self view signalUpdate.		]</body><body package="Roassal2-Builder-ScrollBar">barDragVertical	"Animation for a horizontal drag of the bar"	self shapes bar when: TRMouseDragging do: [ :evt |				(self encompassingRectangle containsPoint: (self view canvas camera position)) 			ifFalse: [ (self view canvas camera) translateTo:  ((self encompassingRectangle) pointNearestTo: (self view canvas camera position))  ].					(self shapes margeRectangle includesPoint: (self shapes bar position + (0@(evt step y)))) &amp; (self shapes surroundingRectangle includesPoint: (self shapes bar position x)@(evt position y)) 			ifTrue: [  				self shapes bar translateBy: 0@(evt step y).				self view canvas camera translateBy: (self translationVertical: evt).				].				self view signalUpdate.		]</body><body package="Roassal2-Builder-ScrollBar">viewDragHorizontal	"Animation for a horizontal drag of the view"	self view when: TRMouseDragging do: [ :evt | 		| translation |		translation := (self reverseTranslationHorizontal: evt).		((self shapes margeRectangle includesPoint: (self shapes bar position + translation))) ifTrue: [ 			shapes bar translateBy: translation.			self view signalUpdate			]. 		].</body><body package="Roassal2-Builder-ScrollBar">viewDragVertical	"Animation for a vertical drag of the view"	self view when: TRMouseDragging do: [ :evt | 		| translation |		translation := (self reverseTranslationVertical: evt).		((self shapes margeRectangle includesPoint: (self shapes bar position + translation))) ifTrue: [ 			shapes bar translateBy: translation.			self view signalUpdate			]. 		].</body></methods><methods><class-id>Roassal2.RTScrollBarBuilder</class-id> <category>signalling</category><body package="Roassal2-Builder-ScrollBar">signalUpdatePosition	| pr pos sizeNow |		pos := self fixedPosition.	sizeNow := self size.					(self orientation = #horizontal) ifTrue: [					pr := (((self view canvas camera position x) - (self encompassingRectangle origin x)) / (self encompassingRectangle width)) * sizeNow.				self shapes surroundingRectangle position: pos.				self shapes bar position: (pr + (self shapes surroundingRectangle encompassingRectangle origin x ))@(pos y).				self positionOnBorderHorizontal.					].						(self orientation = #vertical) ifTrue: [						pr := (((0@(self view canvas camera position y)) dist: (0@(self encompassingRectangle origin y))) / (self encompassingRectangle height)) * (self shapes surroundingRectangle height).				self shapes surroundingRectangle position: pos.				self shapes bar position: (pos x)@(pr + (self shapes surroundingRectangle encompassingRectangle origin y)).				self positionOnBorderVertical.			].				self shapes margeRectangle position: pos.</body><body package="Roassal2-Builder-ScrollBar">signalUpdateSize	| sizeNow |	sizeNow := self size.	(self orientation = #horizontal) ifTrue: [				self shapes surroundingRectangle width: sizeNow.				self shapes margeRectangle width: (sizeNow - self barWidth).						self shapes bar width: self barWidth.				].				(self orientation = #vertical) ifTrue: [					self shapes surroundingRectangle height: sizeNow.				self shapes margeRectangle height: (sizeNow - (self barHeight)).				self shapes bar height: self barHeight.				].</body></methods><methods><class-id>Roassal2.RTScrollBarBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-ScrollBar">renderIn: aView	(self view elements isEmpty) ifTrue: [self defaultEncompassingRectangle] ifFalse: [ self encompassingRectangleUpdate ].	self encompassingRectangleFromSpaceToPixelUpdate.	self defineShapes.	self addShapesToView.	self addAnimations.</body></methods><methods><class-id>Roassal2.RTScrollBarBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-ScrollBar">initialize	super initialize.	self shapes: (RTScrollShapesBuilder for: self).</body></methods><methods><class-id>Roassal2.RTAbstractTreeBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-Common">renderIn: aView	aView addAll: self elements.	self elements do: #updateShape.</body></methods><methods><class-id>Roassal2.RTAbstractTreeBuilder</class-id> <category>color</category><body package="Roassal2-Builder-Common">borderColor: aBlockOrObject	self shape borderColor: aBlockOrObject</body><body package="Roassal2-Builder-Common">color: aBlockOrObject	self shape color: aBlockOrObject</body><body package="Roassal2-Builder-Common">leafColor: aBlockOrColor	self shape 		ifElement: [ :e | 			(e attributes includesKey: self childrenKey) and: 			[ (e attributes at: self childrenKey) isEmpty ]  ]		fillColor: [:e | aBlockOrColor rtValue: e model ] .</body></methods><methods><class-id>Roassal2.RTAbstractTreeBuilder</class-id> <category>building</category><body package="Roassal2-Builder-Common">explore: atree nesting: block1 leaves: block2	^ (self from: (Array with: atree) nesting: block1 leaves: block2) first</body><body package="Roassal2-Builder-Common">explore: atree using: ablock	^ (self from: (Array with: atree) using: ablock) first.</body><body package="Roassal2-Builder-Common">from: objects nesting: block1 leaves: block2	rootNodes := objects collect: [:obj | self createElements: obj nesting: block1 leaves: block2 depth: 1 ].		^ rootNodes</body><body package="Roassal2-Builder-Common">from: objects using: ablock	rootNodes := objects collect: [:obj | self createElements: obj using: ablock depth: 1 ].		^ rootNodes</body></methods><methods><class-id>Roassal2.RTAbstractTreeBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Common">elements	^ elements</body><body package="Roassal2-Builder-Common">elements: anArray	elements := anArray</body><body package="Roassal2-Builder-Common">rootNodes	^ rootNodes</body><body package="Roassal2-Builder-Common">rootNodes: anArray	rootNodes := anArray</body></methods><methods><class-id>Roassal2.RTAbstractTreeBuilder</class-id> <category>weight</category><body package="Roassal2-Builder-Common">leafWeight: block	self weightElement: [ :e | 		(e attributes includesKey: #weight) 			ifTrue: [ e attributes at: #weight ]			ifFalse: [ | w children |				children := e attributes at: self childrenKey.				children 					ifEmpty: [ w := block rtValue: e model ]					ifNotEmpty: [ 						w := children							inject: 0 							into: [ :s :el | s + (weight rtValue: el) ] ].				w := w max: self minWeightValue.				e attributes at: #weight put: w.				w ] ].</body><body package="Roassal2-Builder-Common">weight	^ weight</body><body package="Roassal2-Builder-Common">weight: anObject	self weightElement: [ :e| anObject rtValue: e model ].</body><body package="Roassal2-Builder-Common">weightElement: block	"	This builder uses weight variable do calculate the size of each rectangle	weight block recives an element of the square and return a number	self weightElement: [:element | 1 ]"	weight := block</body><body package="Roassal2-Builder-Common">weightOf: e	^ self weight rtValue: e</body></methods><methods><class-id>Roassal2.RTAbstractTreeBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Common">initialize	super initialize.	elements := OrderedCollection new.	rootNodes := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTAbstractTreeBuilder</class-id> <category>private</category><body package="Roassal2-Builder-Common">createElements: atree nesting: block1 leaves: block2 depth: depth	| children e leaves nodes|		e := shapeBuilder elementOn: atree.	self interaction setUpElement: e.	self elements add: e.		children := block1 rtValue: atree.	e attributes at: #depth put: depth.	children := children collect: [ :child | | e2 |		e2 := self createElements: child nesting: block1 			leaves: block2 depth: depth + 1.		e2 attributes at: #parent put: e.		e2 ] as: Array.	leaves := (block2 rtValue: atree) collect: [:child | | e2 |		e2 := self createElements: child nesting: #() 			leaves: #() depth: depth +1.		e2 attributes at: #parent put: e.		e2 ] as: Array.	nodes := OrderedCollection new: (leaves size + children size).	nodes addAll: children; addAll: leaves.			e attributes at: self childrenKey put: nodes.	^ e.</body><body package="Roassal2-Builder-Common">createElements: atree using: ablock depth: depth	| children e |		e := shapeBuilder elementOn: atree.	self interaction setUpElement: e.	self elements add: e.		children := ablock rtValue: atree.	e attributes at: #depth put: depth.	children := children collect: [ :child | | e2 |		e2 := self createElements: child using: ablock depth: depth + 1.		e2 attributes at: #parent put: e.		e2 ] as: Array.	e attributes at: self childrenKey put: children.	^ e.</body></methods><methods><class-id>Roassal2.RTAbstractTreeBuilder</class-id> <category>default-values</category><body package="Roassal2-Builder-Common">childrenKey	^ #elements</body><body package="Roassal2-Builder-Common">minWeightValue	^ 1</body></methods><methods><class-id>Roassal2.RTSunburstBuilder</class-id> <category>configuration</category><body package="Roassal2-Builder-Sunburst">angularSpacing: anInteger	self strategy angularSpacing: anInteger</body><body package="Roassal2-Builder-Sunburst">hasCenter: aBool	^ self strategy hasCenter: aBool</body><body package="Roassal2-Builder-Sunburst">radialSpacing: anInteger	self strategy radialSpacing: anInteger</body></methods><methods><class-id>Roassal2.RTSunburstBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Sunburst">initialize	super initialize.	layoutBuilder := RTLayoutBuilder new.	layoutBuilder sunburstWithArcWidth: 25.	self leafWeight: 1.	self shape arc color: [ Color random ].	self interaction popup.	maxLevel := 0.</body></methods><methods><class-id>Roassal2.RTSunburstBuilder</class-id> <category>accesing</category><body package="Roassal2-Builder-Sunburst">layout	^ layoutBuilder.</body><body package="Roassal2-Builder-Sunburst">maxLevel	^ maxLevel</body><body package="Roassal2-Builder-Sunburst">strategy	^ self layout layout</body></methods><methods><class-id>Roassal2.RTSunburstBuilder</class-id> <category>building</category><body package="Roassal2-Builder-Sunburst">from: objects nesting: block1 leaves: block2	| r |	r := super from: objects nesting: block1 leaves: block2.	r do: [ :e | e attributes at: #parent put: nil].	^ r</body><body package="Roassal2-Builder-Sunburst">from: objects using: ablock	| r |	r := super from: objects using: ablock.	r do: [ :e | e attributes at: #parent put: nil].	^ r</body></methods><methods><class-id>Roassal2.RTSunburstBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-Sunburst">createView	^ super createView @ RTDraggableView.</body><body package="Roassal2-Builder-Sunburst">renderIn: aView	| layout |	super renderIn: aView.	layout := self layout layout.	layout builder: self.	self layout setUpElements: self rootNodes.</body></methods><methods><class-id>Roassal2.RTSunburstBuilder</class-id> <category>private</category><body package="Roassal2-Builder-Sunburst">createElements: atree nesting: block1 leaves: block2 depth: depth	| e |	e := super createElements: atree nesting: block1 leaves: block2 depth: depth.	maxLevel := maxLevel max: depth.	^ e</body><body package="Roassal2-Builder-Sunburst">createElements: atree using: ablock depth: depth	| e |	e := super createElements: atree using: ablock depth: depth.	maxLevel := maxLevel max: depth.	^ e</body></methods><methods><class-id>DemoRoassal</class-id> <category>interface opening</category><body package="Roassal2-Visualworks">postOpenWith: aBuilder	| canvas model |	aBuilder bindings do: [:b | 		canvas := nil.		model := b value.		model class == Roassal2.RTView ifTrue: [ canvas := model canvas ].		model class == Roassal2.TRCanvas ifTrue: [ canvas := model ].		(model value isKindOf: Roassal2.RTBuilder) ifTrue: [ canvas := model view canvas ].				canvas isNotNil ifTrue: [ canvas focusOnCenterScaled; signalUpdate  ]		]</body></methods><methods><class-id>DemoRoassal</class-id> <category>actions</category><body package="Roassal2-Visualworks">focusOnCenter	view canvas focusOnCenterScaled; signalUpdate</body></methods><methods><class-id>DemoRoassal</class-id> <category>aspects</category><body package="Roassal2-Visualworks">view1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^view1 isNil		ifTrue:			[view1 := self roassalView asValue]		ifFalse:			[view1]</body></methods><methods><class-id>DemoRoassal</class-id> <category>roassal2</category><body package="Roassal2-Visualworks">roassalView	| b ds  |	view := RTView new.	b := RTGrapher new.	b view: view.	ds := RTData new.	ds points: (1 to: 100).	ds y: #atRandom.	b add: ds.	view @ RTDraggableView@RTZoomableView.	^ b</body></methods><methods><class-id>Roassal2.RTLineDecoration</class-id> <category>accessing</category><body package="Roassal2-LineDecorations">attachPoint	^ attachPoint</body><body package="Roassal2-LineDecorations">attachPoint: anObject	attachPoint := anObject</body><body package="Roassal2-LineDecorations">baseSize: aNumberOrBlockOrIdentifier	baseSize := [ :e | aNumberOrBlockOrIdentifier rtValue: e].</body><body package="Roassal2-LineDecorations">line: aRTLine	line := aRTLine</body><body package="Roassal2-LineDecorations">mid	self percentage: 0.5.</body><body package="Roassal2-LineDecorations">mySize	^size</body><body package="Roassal2-LineDecorations">percentage: aNumberOrBlockOrIdentifier	percentage := [ :e | aNumberOrBlockOrIdentifier rtValue: e ].</body><body package="Roassal2-LineDecorations">size: aNumberOrBlockOrIdentifier	size := [ :e | aNumberOrBlockOrIdentifier rtValue: e ].</body><body package="Roassal2-LineDecorations">width: aBlockOrValue	width := aBlockOrValue</body></methods><methods><class-id>Roassal2.RTLineDecoration</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">percentageFor: anElement	^ percentage rtValue: anElement</body><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRAbstractLineDecoratorShape</body><body package="Roassal2-LineDecorations">updateFor: edge trachelShape: trachelShape	| f |	f := attachPoint startingPointOf: edge.	(edge shape class = RTArcLine and: [ attachPoint class = RTBorderAttachPoint ])		ifTrue:			[ f := attachPoint				attachPointFor: edge				from: (edge to encompassingRectangle expandBy: 1)				to: edge to encompassingRectangle ].	line ~= nil ifTrue: [ | tShape |		tShape := edge trachelShape shapes first.		(tShape class = TRBezierShape or: [ tShape class = TRBezier3Shape ])			ifTrue: [ f := tShape points at: tShape points size - 1 ] ].	trachelShape from: f.	trachelShape to: (attachPoint endingPointOf: edge).	trachelShape color: (self colorFor: edge).	trachelShape width: (self widthFor: edge).	trachelShape percentage: (self percentageFor: edge).	trachelShape resetPath.</body><body package="Roassal2-LineDecorations">widthFor: anElement	^ width rtValue: anElement</body></methods><methods><class-id>Roassal2.RTLineDecoration</class-id> <category>configuration</category><body package="Roassal2-LineDecorations">defaultBaseSize	"Set the size of the base size of the line head decoration"	^ 10</body></methods><methods><class-id>Roassal2.RTLineDecoration</class-id> <category>public</category><body package="Roassal2-LineDecorations">trachelShapeFor: anEdge	| f shape |	f := attachPoint startingPointOf: anEdge.	anEdge shape class = RTArcLine &amp; (attachPoint class = RTBorderAttachPoint)		ifTrue:			[ f := attachPoint				attachPointFor: anEdge				from: (anEdge to encompassingRectangle expandBy: 1)				to: anEdge to encompassingRectangle ].	line ~= nil		ifTrue:			[ | tShape |			tShape := line trachelShapeFor: anEdge.			(tShape class = TRBezierShape or: [ tShape class = TRBezier3Shape ])				ifTrue: [ f := tShape points allButLast last ] ].	shape := self trachelShapeClass		from: f		to: (attachPoint endingPointOf: anEdge)		width: (self widthFor: anEdge)		size: (self mySize rtValue: anEdge)		color: (self colorFor: anEdge)		stroke: (self colorFor: anEdge).	shape 		baseSize: (baseSize rtValue: anEdge);		percentage: (self percentageFor: anEdge).	^ shape</body></methods><methods><class-id>Roassal2.RTLineDecoration</class-id> <category>initialization</category><body package="Roassal2-LineDecorations">initialize	super initialize.	attachPoint := RTCenteredAttachPoint new.	baseSize := self defaultBaseSize.	self percentage: 1.</body></methods><methods><class-id>Roassal2.RTDiamond</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRDiamondShape</body></methods><methods><class-id>Roassal2.RTEllipse</class-id> <category>accessing</category><body package="Roassal2-Shapes">geometryFor: anElement	^ GEllipse center: anElement position a: anElement width / 2 b: anElement height / 2</body></methods><methods><class-id>Roassal2.RTEllipse</class-id> <category>visitor</category><body package="Roassal2-Shapes">accept: aVisitor	aVisitor visitEllipse: self</body></methods><methods><class-id>Roassal2.RTEllipse</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeClass	^ TREllipseShape</body></methods><methods><class-id>Roassal2.RTEllipse</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	color := self defaultColor.	self borderWidth: self trachelShapeClass defaultStrokeWidth</body></methods><methods><class-id>Roassal2.RTEllipse</class-id> <category>rendering</category><body package="Roassal2-Shapes">updateFor: anElement trachelShape: trachelShape	| ex rec |	trachelShape isNil ifTrue: [ ^ self ].	ex := (self widthFor: anElement) @ (self heightFor: anElement).	rec := (anElement position - (ex / 2)) extent: ex.		trachelShape 		fromRectangle: rec color: (self colorFor: anElement);		strokeWidth: (self borderWidthFor: anElement);		strokePaint: (self borderColorFor: anElement);		rotateByDegrees: (self rotationFor: anElement);		scaleBy: (self scaleFor: anElement).	^ trachelShape</body></methods><methods><class-id>Roassal2.RTEventForwarder</class-id> <category>accessing</category><body package="Roassal2-Interactions">eventClass	^ eventClass</body><body package="Roassal2-Interactions">eventClass: trEventClass	"Useful to set the event that has to be forwarded"	eventClass := trEventClass</body><body package="Roassal2-Interactions">toObject	^ toObject</body><body package="Roassal2-Interactions">toObject: anObject	toObject := anObject</body></methods><methods><class-id>Roassal2.RTEventForwarder</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	eventClass := TREvent. 	toObject := [ :element | element view ]</body></methods><methods><class-id>Roassal2.RTEventForwarder</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	element		when: eventClass		do: [ :e | 			(toObject rtValue: element) announce: e ]</body></methods><methods><class-id>Roassal2.RTAbstractHorizontalTreeLayout</class-id> <category>private</category><body package="Roassal2-Layouts">rearrangeByLayers: aGraph	| cursor layerDepthSize |	cursor := self leftGap.	nodesByLayer do: [ :eachSetOfNodes |		layerDepthSize := eachSetOfNodes inject: 0 into: [ :max :eachNode | 			translator translateTopLeftOf: eachNode to: (cursor @ eachNode encompassingRectangle top).			max max: eachNode width ].		cursor := cursor + layerDepthSize + self horizontalGap ]</body></methods><methods><class-id>Roassal2.RTAbstractHorizontalTreeLayout</class-id> <category>reversing</category><body package="Roassal2-Layouts">horizontallyReverse: elements	"Horizontally reverse the elements, as well as the attachpoints"	super horizontallyReverse: elements.	self inverseAttachPointIfNecessary</body><body package="Roassal2-Layouts">inverseAttachPoint	"Invert the attach point of all the considered edges. It is likely that all the attachpoint are the same, but we do not have a garanty"	| a |	a := RTShorterHorizontalDistanceAttachPoint new.	edges		do: [ :edge | 			edge shape attachPoint: a.			edge updateFromTo ]</body><body package="Roassal2-Layouts">inverseAttachPointIfNecessary	"Inverse the attach point if the user has not used #doNotAttachPoint"	self shouldSetDefaultAttachPoint		ifTrue: [ self inverseAttachPoint ]</body></methods><methods><class-id>Roassal2.RTAbstractHorizontalTreeLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize	super initialize.	verticalGap := 3.	horizontalGap := 20</body></methods><methods><class-id>Roassal2.RTAbstractHorizontalTreeLayout</class-id> <category>hook-private</category><body package="Roassal2-Layouts">computeChildrenFor: aNode	self subclassResponsibility</body><body package="Roassal2-Layouts">layout: aNodeCollection atPoint: aPoint atLayer: aNumber	| treeSize childrenPosition x y middleOfTree |	aNodeCollection isEmpty ifTrue: [ ^ 0 ].	x := aPoint x.	y := aPoint y.	alreadyLayoutedNodes addAll: aNodeCollection.	self atLayer: aNumber add: aNodeCollection.	aNodeCollection do: [ :each | 		childrenPosition := x + each width + self horizontalGap.		treeSize := each height			max: (self layout: (self computeChildrenFor: each) atPoint: childrenPosition @ y atLayer: aNumber + 1).		middleOfTree := y + (treeSize / 2.0) - (each height / 2.0).		translator translateTopLeftOf: each to: (x @ middleOfTree).		y := y + treeSize + self verticalGap.		self step ].	^ y - aPoint y - self verticalGap</body></methods><methods><class-id>Roassal2.RTAbstractHorizontalTreeLayout</class-id> <category>default attach points</category><body package="Roassal2-Layouts">defaultAttachPoint	^ RTHorizontalAttachPoint new</body></methods><methods><class-id>Roassal2.RTAbstractHorizontalTreeLayout class</class-id> <category>testing</category><body package="Roassal2-Layouts">isAbstract	^ self = RTAbstractHorizontalTreeLayout</body></methods><methods><class-id>Roassal2.RTHorizontalTreeLayout</class-id> <category>hook-private</category><body package="Roassal2-Layouts">computeChildrenFor: aNode	^ self childrenFor: aNode except: alreadyLayoutedNodes</body></methods><methods><class-id>Roassal2.RTReversedHorizontalTreeLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doPost: elements	| g largeur |	g := elements asGroup.	edges do: [ :edge | edge shape attachPoint: (RTShorterHorizontalDistanceAttachPoint new ) ].	largeur := g extent x.	elements do: [ :el | el translateTo: (largeur - el position x) @ el position y ].</body></methods><methods><class-id>Roassal2.RTTextTokenizer</class-id> <category>parsing</category><body package="Roassal2-Builder-TextBuilder">tokenize: aString	| lines |	lines := RTTextLines new.	aString		lineIndicesDo: [ :startLine :endLine :endLineWithEOL | 			| line lineString wordStrings startWord endWord |			lineString := aString copyFrom: startLine to: endLine.			line := RTTextLine new.			wordStrings := self tokenizeLine: lineString.			startWord := 0.			wordStrings				do: [ :wordString | 					| normalizedString interval |					endWord := startWord + wordString size.					normalizedString := self normalizeString: wordString.					interval := startLine + startWord to: startLine + endWord - 1.					line						add:							(RTTextWord new								text: normalizedString;								interval: interval;								yourself).					startWord := endWord ].			lines add: line ].	^ lines</body><body package="Roassal2-Builder-TextBuilder">tokenizeLine: lineString	^ lineString findTokens: self wordSeparators keep: self wordSeparators</body><body package="Roassal2-Builder-TextBuilder">wordSeparators	^ wordSeparators</body></methods><methods><class-id>Roassal2.RTTextTokenizer</class-id> <category>private</category><body package="Roassal2-Builder-TextBuilder">normalizeString: aString	"It replaces tab characters by spaces, because tabs are not well handled by Athens."	^ String streamContents: [ :aStream |		aString do: [ :eachChar |			eachChar = Character tab				ifTrue: [ aStream nextPutAll: '       ' ]				ifFalse: [ aStream nextPut: eachChar ]			 ]			]</body></methods><methods><class-id>Roassal2.RTTextTokenizer</class-id> <category>initialization</category><body package="Roassal2-Builder-TextBuilder">defaultWordSeparators	^ String		streamContents: [ :stream | 			stream				nextPutAll: Character separators;				nextPutAll: '()[]{}.;' ]</body><body package="Roassal2-Builder-TextBuilder">initialize	super initialize.	wordSeparators := self defaultWordSeparators.</body></methods><methods><class-id>Roassal2.RTAutomaticFlowLayout</class-id> <category>as yet unclassified</category><body package="Roassal2-Layouts">initialize	super initialize.	elements := #yourself</body><body package="Roassal2-Layouts">initializeElement: view	view canvas when: TRResizeCanvasEvent do: [ :evt |		RTFlowLayout new maxWidth: evt newExtent x; on: (view elements rtValue: elements)	].</body></methods><methods><class-id>Roassal2.RTFilledArrow class</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRFilledArrowHeadShape</body></methods><methods><class-id>Roassal2.RTSVGEntity</class-id> <category>transform</category><body package="Roassal2-Exporter-SVG">addRotation: angle point: point into: stream	angle isNotNil 		ifTrue: [  		stream 			nextPutAll: ('rotate(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;) ' expandMacrosWith: angle with: point x rounded with: point y rounded)]</body><body package="Roassal2-Exporter-SVG">addScale: anInteger into: stream	stream nextPutAll: ('scale(&lt;1p&gt;) ' expandMacrosWith: anInteger)</body><body package="Roassal2-Exporter-SVG">addTranslation: point into: stream	stream nextPutAll: ('translate(&lt;1p&gt;,&lt;2p&gt;) ' expandMacrosWith: point x rounded with: point y rounded)</body><body package="Roassal2-Exporter-SVG">startTransform: stream	stream nextPutAll: 'transform="'</body></methods><methods><class-id>Roassal2.RTSVGEntity</class-id> <category>interactions</category><body package="Roassal2-Exporter-SVG">addContainedInteractions: aSVGVisitor	aSVGVisitor addContainedInteractions: (self label , self id) element: self element</body><body package="Roassal2-Exporter-SVG">addEmbeddingInteractions: aSVGVisitor	^ aSVGVisitor addEmbeddingInteractions: (self label , self id) element: self element</body><body package="Roassal2-Exporter-SVG">addExternalInteractions: aSVGVisitor	| ide |	ide := 'pop' , self id.	aSVGVisitor addExternalInteractions: ide element: self element.</body></methods><methods><class-id>Roassal2.RTSVGEntity</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">element	^ element</body><body package="Roassal2-Exporter-SVG">element: anObject	element := anObject</body><body package="Roassal2-Exporter-SVG">fillColor	^ fillColor</body><body package="Roassal2-Exporter-SVG">fillColor: anObject	fillColor := anObject</body><body package="Roassal2-Exporter-SVG">id	id ifNil: [ id :=  element identityHash asString].	^ id</body><body package="Roassal2-Exporter-SVG">id: anObject	id := anObject</body><body package="Roassal2-Exporter-SVG">label	^ label</body><body package="Roassal2-Exporter-SVG">label: anObject	label := anObject</body><body package="Roassal2-Exporter-SVG">position	^ position</body><body package="Roassal2-Exporter-SVG">position: anObject	position := anObject</body><body package="Roassal2-Exporter-SVG">strokeColor	^ strokeColor</body><body package="Roassal2-Exporter-SVG">strokeColor: anObject	strokeColor := anObject</body><body package="Roassal2-Exporter-SVG">strokeWidth	^ strokeWidth</body><body package="Roassal2-Exporter-SVG">strokeWidth: anObject	strokeWidth := anObject</body><body package="Roassal2-Exporter-SVG">type	^ type</body><body package="Roassal2-Exporter-SVG">type: anObject	type := anObject</body></methods><methods><class-id>Roassal2.RTSVGEntity</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addOn: aStream using: aSVGVisitor	self subclassResponsibility</body><body package="Roassal2-Exporter-SVG">addPoints: anArrayOfPoints into: stream	| s |	s := ((anArrayOfPoints asString copyReplaceAll: '@' with: ',') copyReplaceAll: '.' with: ' ') replaceAllRegex: '[(){}]' with: '' .		stream		nextPutAll:				('points="', s,'" ').</body><body package="Roassal2-Exporter-SVG">addPosition: stream	self subclassResponsibility</body><body package="Roassal2-Exporter-SVG">addStringWithFont: aByteString fontSize: aSyze into: stream	| converter |	converter := RTSVGStringConverter new.	stream		nextPutAll: '&lt;tspan font-family = "Arial, Helvetica, sans-serif" font-size="', aSyze asString, 'px"&gt;';		nextPutAll: (converter convertString: aByteString);		nextPutAll: '&lt;/tspan&gt;'</body><body package="Roassal2-Exporter-SVG">addStringWithFont: aByteString into: stream	| converter |	converter := RTSVGStringConverter new.	stream		nextPutAll: '&lt;tspan font-family = "Arial, Helvetica, sans-serif"&gt;';		nextPutAll: (converter convertString: aByteString);		nextPutAll: '&lt;/tspan&gt;'</body><body package="Roassal2-Exporter-SVG">addWidth: x height: y into: stream	stream		nextPutAll:				('width="&lt;1p&gt;" height="&lt;2p&gt;" ' expandMacrosWith: x with: y).</body><body package="Roassal2-Exporter-SVG">closeDef: stream	stream nextPutAll: '/&gt;' , String cr</body><body package="Roassal2-Exporter-SVG">closeDefWithContent: stream	stream nextPutAll: '&gt;' , String cr</body><body package="Roassal2-Exporter-SVG">closeFullDef: stream 	stream 		nextPutAll: '&lt;/',self type,'&gt;';		nextPutAll: String cr</body><body package="Roassal2-Exporter-SVG">closeTag: stream	stream nextPutAll: '" '</body><body package="Roassal2-Exporter-SVG">openDef: stream	stream nextPutAll: '&lt;',self type,' id="',self label , self id , '" '</body><body package="Roassal2-Exporter-SVG">startClass: stream	stream nextPutAll: 'class="'</body></methods><methods><class-id>Roassal2.RTSVGEntity</class-id> <category>style</category><body package="Roassal2-Exporter-SVG">addFillColor: stream	self fillColor = nil		ifTrue: [			stream				nextPutAll: 'fill:none; '			  ]		ifFalse: [  			stream				nextPutAll:					('fill:rgb(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;); '						expandMacrosWith: (self fillColor red * 256) rounded						with: (self fillColor green * 256) rounded						with: (self fillColor blue * 256) rounded)]</body><body package="Roassal2-Exporter-SVG">addFillOpacity: stream	stream nextPutAll: ('fill-opacity:&lt;1p&gt;; ' expandMacrosWith: self fillColor alpha)</body><body package="Roassal2-Exporter-SVG">addStrokeColor: stream	stream		nextPutAll:			('stroke:rgb(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;); '				expandMacrosWith: (self strokeColor red * 256) rounded				with: (self strokeColor green * 256) rounded				with: (self strokeColor blue * 256) rounded)</body><body package="Roassal2-Exporter-SVG">addStrokeOpacity: stream	stream nextPutAll: ('stroke-opacity:&lt;1p&gt;; ' expandMacrosWith: self strokeColor alpha)</body><body package="Roassal2-Exporter-SVG">addStrokeWidth: stream	stream nextPutAll: ('stroke-width:&lt;1p&gt;; ' expandMacrosWith: self strokeWidth)</body><body package="Roassal2-Exporter-SVG">startStyle: stream	stream nextPutAll: 'style="'</body></methods><methods><class-id>Roassal2.RTSVGPolygon</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addOn: stream using: aSVGVisitor	aSVGVisitor names at: self element put: self id.	self openDef: stream.	self addPosition: stream.	self addPoints: (self points) into: stream.	self startStyle: stream.	self addFillColor: stream.	self addFillOpacity: stream.	((self strokeWidth) &gt; 0 and: (self strokeColor) ~= nil)		ifTrue: [ 			self addStrokeColor: stream.			self addStrokeWidth: stream ].		self closeTag: stream.	self startClass: stream.	self closeTag: stream.	self addExternalInteractions: aSVGVisitor.	self closeDef: stream.</body><body package="Roassal2-Exporter-SVG">addPosition: stream	stream		nextPutAll:				('x="&lt;1p&gt;" y="&lt;2p&gt;" ' expandMacrosWith: self box topLeft x rounded with: self box topLeft y rounded).</body></methods><methods><class-id>Roassal2.RTSVGPolygon</class-id> <category>as yet unclassified</category><body package="Roassal2-Exporter-SVG">element: anElement box: aRectangle color: aColor borderWidth: anInteger borderColor: anotherColor	self element: anElement.	self box: aRectangle.	self fillColor: aColor.	self strokeWidth:  anInteger.	self strokeColor: anotherColor.	self points: (self setPoints: anElement in: aRectangle).</body><body package="Roassal2-Exporter-SVG">setPoints: anElement in: aRectangle	|  roundedPoints |	roundedPoints := ((anElement copy translateTo: (aRectangle center)) vertices).	roundedPoints := roundedPoints collect: [ :p | (p x rounded) @ (p y rounded)].	^ roundedPoints</body></methods><methods><class-id>Roassal2.RTSVGPolygon</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">box	^ box</body><body package="Roassal2-Exporter-SVG">box: anObject	box := anObject</body><body package="Roassal2-Exporter-SVG">points	^ points</body><body package="Roassal2-Exporter-SVG">points: anArrayOfPoints	points := anArrayOfPoints</body></methods><methods><class-id>Roassal2.RTSVGPolygon</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	self type: 'polygon'.	self label: 'polygon'</body></methods><methods><class-id>Roassal2.TRAbstractLineShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">isLineShape	^ true</body></methods><methods><class-id>Roassal2.TRAbstractLineShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">strokePaint	"return the color of the border line"	^ self color</body><body package="Roassal2-Trachel-Shapes">strokePaint: aColor	"set the color of the border line"	strokePaint := aColor</body><body package="Roassal2-Trachel-Shapes">width	^ width</body><body package="Roassal2-Trachel-Shapes">width: aNumber	width := aNumber</body></methods><methods><class-id>Roassal2.TRLineShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">center	^ (from + to) / 2</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	^ Rectangle encompassing: (Array with: from with: to)</body><body package="Roassal2-Trachel-Shapes">from	"Return a point"	^ from</body><body package="Roassal2-Trachel-Shapes">from: aPoint	from := aPoint.	self resetPath</body><body package="Roassal2-Trachel-Shapes">position	^ ((from + to) / 2)</body><body package="Roassal2-Trachel-Shapes">to	"Return a point"	^ to</body><body package="Roassal2-Trachel-Shapes">to: aPoint	to := aPoint</body></methods><methods><class-id>Roassal2.TRLineShape</class-id> <category>actions</category><body package="Roassal2-Trachel-Shapes">translateBy: aPoint	from := from + aPoint.	to := to + aPoint.	self resetPath.</body></methods><methods><class-id>Roassal2.TRLineShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint 	^ self includesPoint: aPoint delta: 5</body><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint delta: nbOfPixelsAroundTheLine	^ aPoint onLineFrom: from to: to within: nbOfPixelsAroundTheLine</body></methods><methods><class-id>Roassal2.TRLineShape</class-id> <category>public</category><body package="Roassal2-Trachel-Shapes">from: aPoint to: anotherPoint	from := aPoint.	to := anotherPoint.	self resetPath</body><body package="Roassal2-Trachel-Shapes">from: aPoint to: anotherPoint color: aColor	self from: aPoint to: anotherPoint.	self strokePaint: aColor.	self color: aColor</body></methods><methods><class-id>Roassal2.TRLineShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitLineShape: self</body><body package="Roassal2-Trachel-Shapes">accept: aVisitor with: decoration	aVisitor visitLineShape: self with: decoration</body></methods><methods><class-id>Roassal2.TRLineShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	from := 0 @ 0.	to := 0 @ 0.	width := 1.</body></methods><methods><class-id>Roassal2.TRLineShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	athensCanvas pathTransform restoreAfter: [		athensCanvas setShape: self path.		(athensCanvas setStrokePaint: self themedColor) width: width.		athensCanvas draw ]</body></methods><methods><class-id>Roassal2.TRLineShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-Shapes">computePath	path := self athensCanvas		createPath: [ :builder | 			builder				absolute;				moveTo: from;				lineTo: to ]</body></methods><methods><class-id>Roassal2.TRStyledLineShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">capStyle	^ capStyle ifNil: [ #capButt ]</body><body package="Roassal2-Trachel-Shapes">capStyle: aStyle	self assert: [ aStyle isNil or: [ #(capRound capButt capSquare) includes: aStyle ] ].	capStyle := aStyle</body><body package="Roassal2-Trachel-Shapes">dashes: anArrayOfNumeric	dashes := anArrayOfNumeric</body><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	athensCanvas pathTransform		restoreAfter: [ athensCanvas setShape: self path.			(athensCanvas setStrokePaint: self themedColor)				width: width;				perform: self capStyle;				dashes: dashes offset: 0.			athensCanvas draw ]</body></methods><methods><class-id>Roassal2.RTInteractionBuilder</class-id> <category>private-adding</category><body package="Roassal2-Builder-Common">addExclusiveInteraction: anInteraction	"We only keep all the interaction that have a different class"	interactions := interactions select: [ :i | i class ~~ anInteraction class ].	self addInteraction: anInteraction</body><body package="Roassal2-Builder-Common">addInteraction: anInteraction	interactions add: anInteraction</body></methods><methods><class-id>Roassal2.RTInteractionBuilder</class-id> <category>public - events-registering</category><body package="Roassal2-Builder-Common">fixedPopupText: aBlock	self removeInteractionOfType: RTAbstractPopup.	self addExclusiveInteraction: (RTFixedPopup new text: aBlock)</body><body package="Roassal2-Builder-Common">highlightElements: elementsOrABlock	"Highlight the elements, elementsOrABlock may either be a block (which takes as argument the selected element and return a list of elements"	interactions add: [ :element | element @ (RTHighlightable highlightElements: (elementsOrABlock rtValue: element model)) ]</body><body package="Roassal2-Builder-Common">highlightNeighbors: aBlock	"Highlight the elements for which the model is given by 'aBlock rtValue: element model', where 'element' is the current element		aBlock takes as input an object and return a collection of objects.	"		"	Example:b := RTMondrian new.b interaction highlightNeighbour: [ :v | Array with: v - 1 with: v with: v + 1 ].b nodes: (1 to: 11).b layout grid.b 		"	interactions add: [ :element | element @ (RTHighlightable highlight: aBlock) ]</body><body package="Roassal2-Builder-Common">highlightNeighbors: aBlock color: aColorOrABlock	"Highlight the elements for which the model is given by 'aBlock rtValue: element', where 'element' is the current element"	interactions add: [ :element | element @ (RTHighlightable new 																highlightedColor: aColorOrABlock; 																highlight: aBlock) ]</body><body package="Roassal2-Builder-Common">highlightNeighbour: aBlock	self deprecated: 'Use #highlightNeighbors: instead'.		"Highlight the elements for which the model is given by 'aBlock rtValue: element model', where 'element' is the current element		aBlock takes as input an object and return a collection of objects.	"		"	Example:| b |b := RTMondrian new.b interaction highlightNeighbors: [ :v | Array with: v - 1 with: v with: v + 1 ].b nodes: (1 to: 11).b layout grid.b 		"	interactions add: [ :element | element @ (RTHighlightable highlight: aBlock) ]</body><body package="Roassal2-Builder-Common">highlightNeighbour: aBlock color: aColorOrABlock	self deprecated: 'Use #highlightNeighbors:color: instead'.	"Highlight the elements for which the model is given by 'aBlock rtValue: element', where 'element' is the current element"	interactions add: [ :element | element @ (RTHighlightable new 																highlightedColor: aColorOrABlock; 																highlight: aBlock) ]</body><body package="Roassal2-Builder-Common">popupText	self popupText: #yourself</body><body package="Roassal2-Builder-Common">popupText: aBlock	^ self popup text: aBlock</body><body package="Roassal2-Builder-Common">popupText: aBlock color: aColorBlock	self addExclusiveInteraction: (RTPopup new text: aBlock; textColor: aColorBlock)</body><body package="Roassal2-Builder-Common">popupTextColor: aColorBlock	self popupText: #yourself color: aColorBlock</body><body package="Roassal2-Builder-Common">popupView: aTwoArgBlock	"aTwoArgBlock has to follow the pattern [ :group :element |  ... ]	group is an empty group. You need to add what you want to be displayed in the popup. el is the element on which the mouse is above."	self addExclusiveInteraction: (RTPopup new background: (Color blue alpha: 0.6) group: aTwoArgBlock)</body><body package="Roassal2-Builder-Common">when: event do: block	self addInteraction: [ :element | element when: event do: block ]</body></methods><methods><class-id>Roassal2.RTInteractionBuilder</class-id> <category>building</category><body package="Roassal2-Builder-Common">setUpElement: elementOrGroup	"elements is an RTGroup, that contains RTElement or RTEdges"		interactions do: [ :int | elementOrGroup @ int ]</body><body package="Roassal2-Builder-Common">setUpElements: elements	"elements is an RTGroup, that contains RTElement or RTEdges"	interactions do: [ :int | elements @ int ]</body></methods><methods><class-id>Roassal2.RTInteractionBuilder</class-id> <category>public</category><body package="Roassal2-Builder-Common">action: aBlockOrSymbol	"Add a new action, the argument is taken from the argument"	^ self item: aBlockOrSymbol action: aBlockOrSymbol</body><body package="Roassal2-Builder-Common">constrainedDraggable	"Make sure that the inner elements cannot escape the encompassing element"	| i |	self removeInteractionOfType: RTAbstractDraggable.	i := RTConstrainedDraggable new.	i withinParent.	interactions add: i. 	^ i</body><body package="Roassal2-Builder-Common">decoration	| i |	i := RTDecoration new.	interactions add: i. 	^ i</body><body package="Roassal2-Builder-Common">draggable	| i |	self removeInteractionOfType: RTAbstractDraggable.	i := RTDraggable new.	self addInteraction: i.	^ i</body><body package="Roassal2-Builder-Common">hasInteractionOfType: cls	^ interactions		anySatisfy: [ :anInt | anInt class == cls or: [ anInt class inheritsFrom: cls ] ]</body><body package="Roassal2-Builder-Common">highlight	self highlightColored: Color blue</body><body package="Roassal2-Builder-Common">highlightColored: aColorOrAOneArgBlockOrSymbol		self when: TRMouseEnter do: [ :event | 		RTBlink 			highlight: event element			color: (aColorOrAOneArgBlockOrSymbol rtValue: event element model) ].	self when: TRMouseLeave do: [ :event | 		RTBlink			unhighlight: event element ].</body><body package="Roassal2-Builder-Common">item: aTitle action: aBlockOrSymbol	interactions add: [ :element | element @ (RTMenuActivable new item: aTitle asString action: [ aBlockOrSymbol rtValue: element model ]) ]</body><body package="Roassal2-Builder-Common">menu	| i |	i := RTMenuActivable new.	interactions add: i. 	^ i</body><body package="Roassal2-Builder-Common">noInteractions	self initializeInteractions.</body><body package="Roassal2-Builder-Common">popup	"Return a new popup, which is set in the builder"	| i |	i := RTPopup new.	self addExclusiveInteraction: i. 	^ i</body><body package="Roassal2-Builder-Common">removeInteractionOfType: cls	"Remove the interaction of type cls if present"	interactions 		detect: [ :anInt | anInt class == cls or: [ anInt class inheritsFrom: cls ] ] 		ifFound: [ :int | interactions := interactions copyWithout: int ]"	| int |	(interactions anySatisfy: [ :anInt | anInt class == cls or: [ anInt class inheritsFrom: cls ] ])		ifTrue: [ 			int := interactions detect: [ :anInt | anInt class == cls ].			interactions := interactions copyWithout: int ]"</body><body package="Roassal2-Builder-Common">showEdge	| i |	i := RTShowEdge new.	interactions add: i. 	^ i</body><body package="Roassal2-Builder-Common">snapToGrid	"Make the elements draggable and positioned on a grid"	| i cls |	cls := RTDraggable.	self removeInteractionOfType: cls.	i := RTDraggableSnapToGrid new.	interactions add: i.	^ i</body></methods><methods><class-id>Roassal2.RTInteractionBuilder</class-id> <category>accessing - computed</category><body package="Roassal2-Builder-Common">interactionOfType: cls	^ interactions		detect: [ :anInt | anInt class == cls or: [ anInt class inheritsFrom: cls ] ]		ifNone: [ nil ]</body><body package="Roassal2-Builder-Common">numberOfInteractions	^ interactions size</body></methods><methods><class-id>Roassal2.RTInteractionBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Common">initialize	super initialize.	self initializeInteractions.</body><body package="Roassal2-Builder-Common">initializeInteractions	interactions := OrderedCollection new</body></methods><methods><class-id>Roassal2.RTInteractionBuilder</class-id> <category>morphic specific</category><body package="Roassal2-Builder-Common">menu: aSymbolOrBlockOrMenu	"the argument has to return a menu morph, when evaluated against the object"	interactions add: [ :element | element when: TRMouseRightClick do: [ :evt | (aSymbolOrBlockOrMenu rtValue: evt element model) popUpInWorld ] ]</body></methods><methods><class-id>Roassal2.RTDataInteractionBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">builder	^ builder ifNil: [ dataSet builder ]</body><body package="Roassal2-Builder-Grapher-Core">builder: aBuilder	builder := aBuilder</body><body package="Roassal2-Builder-Grapher-Core">dataSet: aData	dataSet := aData</body></methods><methods><class-id>Roassal2.RTDataInteractionBuilder</class-id> <category>public - events-registering</category><body package="Roassal2-Builder-Grapher-Core">highlightDataset: aColor	self		addInteraction:			(RTDataHighlightInteraction new				color: aColor;				dataset: dataSet)</body><body package="Roassal2-Builder-Grapher-Core">popupDecorator: aOneArgBlock	| deco |	self		when: TRMouseEnter		do: [ :event | 			deco := aOneArgBlock value: event element model.			deco hasDatasets				ifFalse: [ deco dataset: dataSet ].			self builder decorators add: deco.			deco				builder: self builder;				render ].	self		when: TRMouseLeave		do: [ :event | 			deco remove.			self builder decorators remove: deco ]</body><body package="Roassal2-Builder-Grapher-Core">toggleDataset	self addInteraction: (RTDataToggleInteraction new dataset: dataSet)</body></methods><methods><class-id>Roassal2.RTAbstractDataSet</class-id> <category>min and max</category><body package="Roassal2-Builder-Grapher-Core">computeMinAndMax	self computeMinAndMaxForX.	self computeMinAndMaxForY.</body><body package="Roassal2-Builder-Grapher-Core">computeMinAndMaxForX	| computed |	computed := points collect: x.	minX := computed min.	maxX := computed max.	(minX &lt; 0 and: [ maxX &lt; 0 ]) ifTrue: [ maxX := 0 ].	(minX &gt; 0 and: [ maxX &gt; 0 ]) ifTrue: [ minX := 0 ].</body><body package="Roassal2-Builder-Grapher-Core">computeMinAndMaxForY	| computed |	computed := points collect: y.	self assert: [ computed allSatisfy: [ :obj | obj isKindOf: Number ] ] description: 'You have provided objects that are not number. Please adjust what you provide to #points: #x: and #y:'.	minY := computed min.	maxY := computed max.		(minY &lt; 0 and: [ maxY &lt; 0 ]) ifTrue: [ maxY := 0 ].	(minY &gt; 0 and: [ maxY &gt; 0 ]) ifTrue: [ minY := 0 ].</body></methods><methods><class-id>Roassal2.RTAbstractDataSet</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">addedInBuilder: aBuilder	self builder: aBuilder</body><body package="Roassal2-Builder-Grapher-Core">getPixelPositionOf: aPoint	"Return the position in the Roassal view of a point"	| anX anY |	anX := RTMetricNormalizer new		getValue: aPoint x min: 0 max: builder extent x minValue: minX maxValue: maxX.	anY := RTMetricNormalizer new		getValue: aPoint y min: 0 max: builder extent y negated minValue: minY maxValue: maxY.				^ anX @ anY</body><body package="Roassal2-Builder-Grapher-Core">getPositionFromPixelPosition: aPoint	"Return the position in the graph from a position in the Roassal view of a point"	| anX anY |	anX := RTMetricNormalizer new		getValue: aPoint x min: minX max: maxX minValue: 0 maxValue: builder extent x.	anY := RTMetricNormalizer new		getValue: aPoint y min: minY max: maxY minValue: 0 maxValue: builder extent y.				^ anX @ anY negated</body><body package="Roassal2-Builder-Grapher-Core">renderDotAndLinesIn: aView	| elements |	elements := dotBuilder elementsOn: points.	builder view addAll: elements.	interaction setUpElements: elements.		RTMetricNormalizer new		elements: elements;		normalizeX: [ :model | x rtValue: model ]			min: 0			max: builder extent x			minValue: minX			maxValue: maxX.				RTMetricNormalizer new		elements: elements;		normalizeY: [ :model | y rtValue: model ]			min: 0			max: builder extent y negated			minValue: minY			maxValue: maxY.				elementActions do: [ :act | act rtValue: elements ].				self renderLinesFor: elements in: aView</body><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	"This is a bit ugly. Maybe having a class hierarchy would be better"	self renderDotAndLinesIn: aView.</body></methods><methods><class-id>Roassal2.RTAbstractDataSet</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">builder: aBuilder	builder := aBuilder</body><body package="Roassal2-Builder-Grapher-Core">getValuesX	^ points collect: x</body><body package="Roassal2-Builder-Grapher-Core">getValuesY	^ points collect: y</body><body package="Roassal2-Builder-Grapher-Core">interaction	^ interaction</body><body package="Roassal2-Builder-Grapher-Core">lineShape	^ lineBuilder</body><body package="Roassal2-Builder-Grapher-Core">maxX	^ maxX</body><body package="Roassal2-Builder-Grapher-Core">maxX: anObject	maxX := anObject</body><body package="Roassal2-Builder-Grapher-Core">maxY	^ maxY</body><body package="Roassal2-Builder-Grapher-Core">maxY: anObject	maxY := anObject</body><body package="Roassal2-Builder-Grapher-Core">minX	^ minX</body><body package="Roassal2-Builder-Grapher-Core">minX: anObject	minX := anObject</body><body package="Roassal2-Builder-Grapher-Core">minY	^ minY</body><body package="Roassal2-Builder-Grapher-Core">minY: anObject	minY := anObject</body><body package="Roassal2-Builder-Grapher-Core">numberOfPoints	"Return the number of points the dataset is representing"	^ points size</body><body package="Roassal2-Builder-Grapher-Core">points	^ points</body><body package="Roassal2-Builder-Grapher-Core">points: objects	points := objects</body><body package="Roassal2-Builder-Grapher-Core">shouldConnect	^ shouldConnect</body><body package="Roassal2-Builder-Grapher-Core">x: blockOrSymbol	x := blockOrSymbol</body><body package="Roassal2-Builder-Grapher-Core">y: blockOrSymbol	y := blockOrSymbol</body></methods><methods><class-id>Roassal2.RTAbstractDataSet</class-id> <category>public - lines</category><body package="Roassal2-Builder-Grapher-Core">connect	shouldConnect := true</body><body package="Roassal2-Builder-Grapher-Core">connectColor: aColor	"Draw a line between each point, of a given color"	^ self connectUsing: (RTLine new color: aColor)</body><body package="Roassal2-Builder-Grapher-Core">connectUsing: aShape	"Connect all the point, using a particular shape"	lineBuilder shape: aShape.	self connect</body></methods><methods><class-id>Roassal2.RTAbstractDataSet</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">defaultMaxValue	^ 1000000</body><body package="Roassal2-Builder-Grapher-Core">defaultMinValue	^ -1000000</body><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	points := #().	x := #yourself.	y := #yourself.	self resetMinAndMax. 	dotBuilder := RTShapeBuilder new.	dotBuilder circle size: 5.		"Maybe this can be lazily done"	histogramBuilder := RTShapeBuilder new.	histogramBuilder rectangle.		"Maybe this can be lazily done"	lineBuilder := RTShapeBuilder new.		interaction := RTInteractionBuilder new.	interaction popup.	shouldConnect := false.		elementActions := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTAbstractDataSet</class-id> <category>public - dots</category><body package="Roassal2-Builder-Grapher-Core">dotShape	^ dotBuilder</body><body package="Roassal2-Builder-Grapher-Core">noDot	"No dot are shown"	self dotShape rectangle size: 0</body></methods><methods><class-id>Roassal2.RTAbstractDataSet</class-id> <category>public - effects</category><body package="Roassal2-Builder-Grapher-Core">dotSize: metricAsBlockOrSymbol min: minValue max: maxValue using: transformation	"Set the size of the dots for each element"	elementActions add: [ :elements |		RTMetricNormalizer new			elements: elements;			normalizeSize: metricAsBlockOrSymbol min: minValue max: maxValue using: transformation ]</body><body package="Roassal2-Builder-Grapher-Core">highlightIf: aOneArgBlock using: secondOneArgBlock	"	aOneArgBlock is the a one-arg condition	If true, secondOneArgBlock is then used for the label	"	elementActions add: [ :elements |		elements do: [ :element |		(aOneArgBlock rtValue: element model) ifTrue: [ 			element @ (RTLabeled new text: [ :model | secondOneArgBlock rtValue: model ]; setAsHighlightable).		] ] ]</body></methods><methods><class-id>Roassal2.RTAbstractDataSet</class-id> <category>utility</category><body package="Roassal2-Builder-Grapher-Core">adjustMinAndMaxValues	"Values are adjusted to always have 0 @ 0 in the chart"	minY &gt; 0		ifTrue: [ minY := 0 ].	maxY &lt; 0		ifTrue: [ maxY := 0 ].			minX &gt; 0		ifTrue: [ minX := 0 ].	maxX &lt; 0		ifTrue: [ maxX := 0 ].</body><body package="Roassal2-Builder-Grapher-Core">renderLinesFor: elements in: aView	"Render the lines between elements if necessary"	| t l |	shouldConnect ifFalse: [ ^ self ].	t := elements first.	elements allButFirst		do: [ :tt | 			l := lineBuilder edgeFrom: t to: tt.			interaction setUpElement: l.			aView add: l.			t := tt ]</body><body package="Roassal2-Builder-Grapher-Core">resetMinAndMax	minY := self defaultMaxValue.	maxY := self defaultMinValue.	minX := self defaultMaxValue.	maxX := self defaultMinValue.</body></methods><methods><class-id>Roassal2.RTAbstractStackedDataSet</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">centralDot	^ (RTEllipse new		size: 0;		color: Color red) element translateTo: (builder getPixelPositionOf: 0 @ 0)</body><body package="Roassal2-Builder-Grapher-Core">renderBarChartIn: aView	| centralDot elements positiveElements negativeElements |	centralDot := self centralDot.		elements := histogramBuilder elementsOn: points.	builder view addAll: elements.	interaction setUpElements: elements.	RTMetricNormalizer new		elements: elements;		normalizeElementX: [ :element | (elements indexOf: element) + 0.513 ]			min: 0			max: builder extent x			minValue: 1			maxValue: maxX + 1.	"We treat the element with a positive value"	positiveElements := elements select: [ :el | (y rtValue: el model) &gt;= 0 ].	positiveElements		ifNotEmpty: [			RTMetricNormalizer new				elements: positiveElements;				normalizeHeight: [ :model | y rtValue: model ]					min: 0					max: builder extent y + centralDot position y					minValue: 0					maxValue: maxY ].	RTAlignment new elements:  positiveElements; alignFromBottomUsing: centralDot. 			"We treat the element with a negative value"	negativeElements := elements copyWithoutAll: positiveElements.	negativeElements		ifNotEmpty: [ 			RTMetricNormalizer new				elements: negativeElements;				normalizeHeight: [ :model | y rtValue: model ]					min: "builder extent y -"  centralDot position y negated 					max: 0					minValue: minY					maxValue: 0.				RTAlignment new elements:  negativeElements; alignFromBottomUsing: centralDot. ].	"We set the actions, if any"	elementActions do: [ :act | act rtValue: elements ]</body></methods><methods><class-id>Roassal2.RTAbstractStackedDataSet</class-id> <category>public</category><body package="Roassal2-Builder-Grapher-Core">barChartWithBarCenteredTitle: aBlockOrSymbol	"Add bar charts with centered title, the default color is used. This is a public method"	^ self barChartWithBarCenteredTitle: aBlockOrSymbol color: self defaultLabelColor</body><body package="Roassal2-Builder-Grapher-Core">barChartWithBarCenteredTitle: aBlockOrSymbol color: aColor	"Draw a bar chart with title"	self barShape.	elementActions add: [ :elements | 		| lbl |		elements do: [ :e |			lbl := (RTLabel new text: aBlockOrSymbol; color: aColor) elementOn: e model.			TRConstraint move: lbl below: e.			"lbl translateBy: (lbl width / -2 @ 0) + (5 @ 0)."			elements anyOne view add: lbl.		] ].</body><body package="Roassal2-Builder-Grapher-Core">barChartWithBarTitle: aBlockOrSymbol	"Draw a barChart with title"	self barChartWithBarTitle: aBlockOrSymbol rotation: -45</body><body package="Roassal2-Builder-Grapher-Core">barChartWithBarTitle: aBlockOrSymbol rotation: rotationInDegree	"Draw an histogram with title"	self barChartWithBarTitle: aBlockOrSymbol rotation: rotationInDegree color: self defaultLabelColor</body><body package="Roassal2-Builder-Grapher-Core">barChartWithBarTitle: aBlockOrSymbol rotation: rotationInDegree color: aColor	"Draw an histogram with title"	self barShape.	elementActions add: [ :elements | 		| lbl |		elements do: [ :e |			lbl := (RTLabel new text: aBlockOrSymbol; color: aColor) elementOn: e model.			lbl rotateByDegrees: rotationInDegree.			TRConstraint move: lbl below: e.			lbl translateBy: (lbl width / -2 @ 0) + (5 @ 0).			elements anyOne view add: lbl.		] ].</body><body package="Roassal2-Builder-Grapher-Core">defaultLabelColor	^ Color lightGray</body></methods><methods><class-id>Roassal2.RTAbstractStackedDataSet</class-id> <category>obsolete</category><body package="Roassal2-Builder-Grapher-Core">histogramWithBarTitle: aBlockOrSymbol	"Draw an histogram with title"	"THIS IS AN OBSOLETE METHOD. Rewrite your code to use RTData and barShape.For example:	b := RTGrapher new.ds := RTData new.ds points: #(1 4 2 3 5 6).ds barShape.b add: ds.b	"	self histogramWithBarTitle: aBlockOrSymbol rotation: -45</body><body package="Roassal2-Builder-Grapher-Core">histogramWithBarTitle: aBlockOrSymbol rotation: rotationInDegree	"Draw an histogram with title"	self histogramWithBarTitle: aBlockOrSymbol rotation: rotationInDegree color: Color lightGray</body><body package="Roassal2-Builder-Grapher-Core">histogramWithBarTitle: aBlockOrSymbol rotation: rotationInDegree color: aColor	"Draw an histogram with title"	self barShape.	elementActions add: [ :elements | 		| lbl |		elements do: [ :e |			lbl := (RTLabel new text: aBlockOrSymbol; color: aColor) elementOn: e model.			lbl rotateByDegrees: rotationInDegree.			TRConstraint move: lbl below: e.			lbl translateBy: (lbl width / -2 @ 0) + (5 @ 0).			elements anyOne view add: lbl.		] ].</body></methods><methods><class-id>Roassal2.RTAbstractStackedDataSet</class-id> <category>min and max</category><body package="Roassal2-Builder-Grapher-Core">computeMinAndMaxForX	minX := 1.	maxX := builder getMaxNumberOfPoints.	(minX &lt; 0 and: [maxX &lt; 0]) ifTrue: [ maxX := 0 ].	(minX &gt; 0 and: [maxX &gt; 0]) ifTrue: [ minX := 0 ].</body></methods><methods><class-id>Roassal2.RTComparison</class-id> <category>accessing</category><body package="Roassal2-Builder-SimilarityMatrix">lhs	^ lhs</body><body package="Roassal2-Builder-SimilarityMatrix">rhs	^ rhs</body><body package="Roassal2-Builder-SimilarityMatrix">similarity	^ similarity</body></methods><methods><class-id>Roassal2.RTComparison</class-id> <category>initialize-release</category><body package="Roassal2-Builder-SimilarityMatrix">of: anObject with: anotherObject by: similarityBlock	"similarityBlock should take two arguments and return a float in the range [0,1]"	lhs := anObject.	rhs := anotherObject.	similarity := similarityBlock value: lhs value: rhs.	self		assert: ((0 &lt;= similarity) &amp; (similarity &lt;= 1))		descriptionBlock: ['Expected similarity in range [0,1], got ', similarity printString]</body></methods><methods><class-id>Roassal2.RTComparison class</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-SimilarityMatrix">of: anObject with: anotherObject by: similarityBlock	^ self new of: anObject with: anotherObject by: similarityBlock</body></methods><methods><class-id>Roassal2.RTExploraBuilder</class-id> <category>layout</category><body package="Roassal2-Builder-Explora">circleLayout	" Not working properly! needs fix somewhere. "	^ self layout: [ :elem | RTCircleLayout "(RTCenteredCircleLayout new;		center: elem position)" ]</body><body package="Roassal2-Builder-Explora">clusterLayout	^ self layout: [ RTClusterLayout new ]</body><body package="Roassal2-Builder-Explora">defaultLayout	^ self treeLayout</body><body package="Roassal2-Builder-Explora">horizontalTreeLayout	^ self layout: RTHorizontalTreeLayout new</body><body package="Roassal2-Builder-Explora">icons	^ icons.</body><body package="Roassal2-Builder-Explora">lastAddedNodes	^ lastAddedNodes</body><body package="Roassal2-Builder-Explora">lastAddedNodes: aCollectionOfNodes	lastAddedNodes := aCollectionOfNodes</body><body package="Roassal2-Builder-Explora">linearLayout	^ self layout: RTHorizontalLineLayout new</body><body package="Roassal2-Builder-Explora">radialTreeLayout	^ self layout: RTRadialTreeLayout new</body><body package="Roassal2-Builder-Explora">treeLayout	^ self layout: RTTreeLayout new</body><body package="Roassal2-Builder-Explora">withIcons	self withIconsColor: Color black.</body><body package="Roassal2-Builder-Explora">withIconsColor: aColor		|iconOpen iconClose p1 p2|				p1 := 'M401.625,267.75H344.25v-57.375c0-21.114-17.136-38.25-38.25-38.25s-38.25,17.117-38.25,38.25v57.375h-57.375				c-21.114,0-38.25,17.117-38.25,38.25c0,21.114,17.136,38.25,38.25,38.25h57.375v57.375c0,21.114,17.136,38.25,38.25,38.25				s38.25-17.117,38.25-38.25V344.25h57.375c21.114,0,38.25-17.136,38.25-38.25S422.739,267.75,401.625,267.75z M306,0				C136.992,0,0,136.992,0,306s136.992,306,306,306s306-136.992,306-306S475.008,0,306,0z M306,554.625				C168.912,554.625,57.375,443.088,57.375,306S168.912,57.375,306,57.375S554.625,168.912,554.625,306S443.088,554.625,306,554.625z'.		p2 := 'M401.625,267.75h-191.25c-21.114,0-38.25,17.117-38.25,38.25c0,21.114,17.136,38.25,38.25,38.25h191.25				c21.114,0,38.25-17.136,38.25-38.25S422.758,267.75,401.625,267.75z M306,0C136.992,0,0,136.992,0,306s136.992,306,306,306				s306-136.992,306-306S475.008,0,306,0z M306,554.625C168.912,554.625,57.375,443.088,57.375,306S168.912,57.375,306,57.375				S554.625,168.912,554.625,306S443.088,554.625,306,554.625z'.		iconOpen := (RTSVGPath new path: p1; color: aColor; scale: 0.025).		iconClose := (RTSVGPath new path: p2; color: aColor; scale: 0.025).			self withIconsSVG: (Array with: iconOpen with: iconClose )</body><body package="Roassal2-Builder-Explora">withIconsSVG: anRTSVGPathArray 	icons := anRTSVGPathArray</body></methods><methods><class-id>Roassal2.RTExploraBuilder</class-id> <category>action</category><body package="Roassal2-Builder-Explora">addListenerBlock: listenerBlock	"The block is executed at each node created"	nodes do: listenerBlock.	nodeListeners add: listenerBlock</body><body package="Roassal2-Builder-Explora">onClickExplore: aBlock	self addListenerBlock: [ :el |		el addListenerFor: TRMouseClick onDirection: #default -&gt; #From withBlock: aBlock ].</body><body package="Roassal2-Builder-Explora">onLeftClickExplore: aBlock	self onLeftClickExplore: aBlock edges: #From</body><body package="Roassal2-Builder-Explora">onLeftClickExplore: aBlock edges: edgeDirection	self onLeftClickExplore: aBlock edges: edgeDirection direction: #LeftClick</body><body package="Roassal2-Builder-Explora">onLeftClickExplore: aBlock edges: edgeDirection direction: directionName	self addListenerBlock: [ :el |		el addListenerFor: TRMouseLeftClick onDirection: directionName -&gt; edgeDirection withBlock: aBlock ]</body><body package="Roassal2-Builder-Explora">onRightClickExplore: aBlock 	self onRightClickExplore: aBlock edges: #To</body><body package="Roassal2-Builder-Explora">onRightClickExplore: aBlock edges: edgeDirection	self onRightClickExplore: aBlock edges: edgeDirection direction: #RightClick</body><body package="Roassal2-Builder-Explora">onRightClickExplore: aBlock edges: edgeDirection direction: directionName	self addListenerBlock: [ :el |		el addListenerFor: TRMouseRightClick onDirection: directionName -&gt; edgeDirection withBlock: aBlock ]</body></methods><methods><class-id>Roassal2.RTExploraBuilder</class-id> <category>adding</category><body package="Roassal2-Builder-Explora">buildNode: object parent: parent	| node element elementIconOpen elementIconClose |		node := RTExploraNode new.	node builder: self.	node id: self newNodeId.	node parentNode: parent.	element := RTElement new model: object.		node element: element.		element addShape: self shape shape.		dragChildren ifTrue: [ element @ RTDraggableChildren ] ifFalse: [ element @ RTDraggable ].	popUp ifTrue: [ element @ (RTPopup new group: self explorePopUp) ].		(icons) ifNotNil: [ 		elementIconOpen := (icons first) elementOn: #iconOpen.		elementIconClose := (icons second) elementOn: #iconClose.				RTConstraint move: ((Array with: elementIconOpen with: elementIconClose) asGroup) onTheRightOf: element.		element addCallback: (TRTranslationCallback new block: [			TRConstraint move: ((Array with: elementIconOpen with: elementIconClose) asGroup) onTheRightOf:element. 					self view signalUpdate			]).			node iconOpen: elementIconOpen.		node iconClose: elementIconClose.		]. 	nodeListeners do: [ :block | block value: node ].		^ node</body><body package="Roassal2-Builder-Explora">explorePopUp	^ [ :group :elem |			| background node |			node := elem attributes at: #node.			background := (RTBox new color: (Color lightGreen alpha: 0.95)) element.			group add: (RTElement new model: elem model)				+ (RTLabel new text: [ :e | popupText rtValue: e]).			group addAll: (node expansionDirections collect: [				:direction |				(RTElement new model:					((node expansionDirections size &gt; 1						ifFalse: ['']						ifTrue: [(direction key) asString , ': ']),(					(node explorationStatus: direction)					))) + (RTLabel new height: 8)]).			(RTVerticalLineLayout withGap: 0) on: group.						RTNest new centerOn: background elements: group.			group addFirst: background ]</body><body package="Roassal2-Builder-Explora">newNodeId	nextId := nextId + 1.	^ nextId</body><body package="Roassal2-Builder-Explora">node: anObject 	^ self node: anObject parent: nil.</body><body package="Roassal2-Builder-Explora">node: anObject parent: element	| node |	node := self buildNode: anObject parent: element.	nodes add: node.	^ node.</body></methods><methods><class-id>Roassal2.RTExploraBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Explora">layout	^ layout</body><body package="Roassal2-Builder-Explora">layout: aLayout	layout := aLayout.	^ aLayout</body><body package="Roassal2-Builder-Explora">lineShape	^ lineShape</body><body package="Roassal2-Builder-Explora">lineShape: aShape	lineShape := aShape</body><body package="Roassal2-Builder-Explora">nodes	^ nodes</body></methods><methods><class-id>Roassal2.RTExploraBuilder</class-id> <category>default values</category><body package="Roassal2-Builder-Explora">defaultLineShape	^ RTLine new</body><body package="Roassal2-Builder-Explora">defaultNodeShape	self shape circle size: 20; color: (Color blue alpha: 0.5); yourself</body><body package="Roassal2-Builder-Explora">defaultTextColor	^ Color black</body></methods><methods><class-id>Roassal2.RTExploraBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Explora">initialize	super initialize.	nextId := 0.	popUp := false.	dragChildren := false.	nodes := OrderedCollection new.	lastAddedNodes := OrderedCollection new.	nodeListeners := OrderedCollection new.	lineShape := self defaultLineShape.	self configureView: view.	self initializeNodes.	self defaultLayout.</body><body package="Roassal2-Builder-Explora">initializeNodes	self defaultNodeShape.</body></methods><methods><class-id>Roassal2.RTExploraBuilder</class-id> <category>view</category><body package="Roassal2-Builder-Explora">configureView: aView	aView @ RTDraggableView.</body><body package="Roassal2-Builder-Explora">dragChildren	dragChildren := true</body><body package="Roassal2-Builder-Explora">renderIn: rView	nodes do: [ :n | rView add: n element. lastAddedNodes add: n ].	icons ifNotNil:[		nodes do: [ :n | n iconOpen ifNotNil: [rView add: n iconOpen] ]		]</body><body package="Roassal2-Builder-Explora">withPopup	self withPopup: [ :obj | obj printString ]</body><body package="Roassal2-Builder-Explora">withPopup: aStringOrBlock	popUp := true.	popupText := aStringOrBlock</body></methods><methods><class-id>Roassal2.RTSVGAbstractLine</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">decoration	^ decoration</body><body package="Roassal2-Exporter-SVG">decoration: anObject	decoration := anObject</body><body package="Roassal2-Exporter-SVG">id	^ id</body></methods><methods><class-id>Roassal2.RTSVGAbstractLine</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addMarker: stream	stream 		nextPutAll: 'marker-end = "url(#marker' , (self getDecorationId: self decoration) , ')" '</body></methods><methods><class-id>Roassal2.RTSVGAbstractLine</class-id> <category>utils</category><body package="Roassal2-Exporter-SVG">getDecorationId: aLineDecorationShape	|t w c s lw|	t := aLineDecorationShape class name.	w := aLineDecorationShape mySize.	c := aLineDecorationShape color.	s := aLineDecorationShape strokePaint.	lw := aLineDecorationShape width.	^(t asString, w asString, ((c red * 256) + (s red * 256)) rounded asString, ((c green * 256) + (s green * 256)) rounded asString, ((c blue * 256) + (s blue * 256)) rounded asString, lw asString)</body></methods><methods><class-id>Roassal2.RTSVGBezierLine</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	self type: 'path'.	self label: 'bezier'</body></methods><methods><class-id>Roassal2.RTSVGBezierLine</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">element: anElement points: somePoints width: anInteger color: aColor	self element: anElement.	self points: somePoints.	self strokeWidth: anInteger.	self strokeColor: aColor.</body><body package="Roassal2-Exporter-SVG">element: anElement points: somePoints width: anInteger color: aColor decoration: aLineDecoration	self element: anElement points: somePoints width: anInteger color: aColor.	self decoration: aLineDecoration</body><body package="Roassal2-Exporter-SVG">points	^ points</body><body package="Roassal2-Exporter-SVG">points: anObject	points := anObject</body></methods><methods><class-id>Roassal2.RTSVGBezierLine</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addCurves: stream with: visitor	| p1 p2 |	p1 := points first.	stream		nextPutAll: 'd="M';		nextPutAll: (visitor number: p1 x);		nextPutAll: ',';		nextPutAll: (visitor number: p1 y).	2 to: points size - 2 do: [ :i | 		p1 := points at: i.		p2 := (p1 + (points at: i + 1)) / 2.		stream			nextPutAll: 'Q';			nextPutAll: (visitor number: p1 x);			nextPutAll: ',';			nextPutAll: (visitor number: p1 y);			nextPutAll: ' ';			nextPutAll: (visitor number: p2 x);			nextPutAll: ',';			nextPutAll: (visitor number: p2 y) ].	p1 := points at: points size - 1.	p2 := points last.	stream		nextPutAll: 'Q';		nextPutAll: (visitor number: p1 x);		nextPutAll: ',';		nextPutAll: (visitor number: p1 y);		nextPutAll: ' ';		nextPutAll: (visitor number: p2 x);		nextPutAll: ',';		nextPutAll: (visitor number: p2 y);		nextPutAll: '" '</body><body package="Roassal2-Exporter-SVG">addOn: stream using: aSVGVisitor	| from to shape el |	shape := self element.	el := shape element.	from := aSVGVisitor names at: el from trachelShape.	to := aSVGVisitor names at: el to trachelShape.	self id: from , '_' , to.	self openDef: stream.	self addPath: stream with: aSVGVisitor.	self startStyle: stream.	self addFillColor: stream.	self addStrokeColor: stream.	self addStrokeOpacity: stream.	self addStrokeWidth: stream.	self closeTag: stream.	self decoration ifNotNil: [ self addMarker: stream ].	self startClass: stream.	self closeTag: stream.	self addExternalInteractions: aSVGVisitor.	self closeDef: stream.</body><body package="Roassal2-Exporter-SVG">addPath: stream with: visitor	stream nextPutAll: 'name="bezier[]" '.	self addCurves: stream with: visitor</body></methods><methods><class-id>Roassal2.RTPolymorphicBoxLegendItem</class-id> <category>accessing</category><body package="Roassal2-Builder-Legend">boxDescription	^ boxDescription</body><body package="Roassal2-Builder-Legend">boxDescription: aString	boxDescription := aString</body><body package="Roassal2-Builder-Legend">heightDescription	^ heightDescription</body><body package="Roassal2-Builder-Legend">heightDescription: aString	heightDescription := aString</body><body package="Roassal2-Builder-Legend">widthDescription	^ widthDescription</body><body package="Roassal2-Builder-Legend">widthDescription: aString	widthDescription := aString</body></methods><methods><class-id>Roassal2.RTPolymorphicBoxLegendItem</class-id> <category>hooks</category><body package="Roassal2-Builder-Legend">execute	| g ext1 ext2 box e lineExtremityShape lineShape topLine leftLine widthDescriptionElement heightDescriptionElement boxDescriptionLabel |	g := RTGroup new.		"Defining extremities and line shape"	lineExtremityShape := RTBox new size: 1.	lineShape := RTDoubleArrowedLine new color: Color red.		"Label for the descriptions"	widthDescriptionElement := (self newLabelShape: widthDescription) element.	heightDescriptionElement := (self newLabelShape: heightDescription) element.	g add: widthDescriptionElement.	g add: heightDescriptionElement.		"The box"	box := (RTBox new extent: 30 @ 50) element.	g add: box.	e := box encompassingRectangle.		"The top line"	ext1 := lineExtremityShape element.	ext2 := lineExtremityShape element.	topLine := lineShape edgeFrom: ext1 to: ext2.	ext1 translateBy: e topLeft - (0 @ 10).	ext2 translateBy: e topRight - (0 @ 10).	g		add: ext1;		add: ext2.	g add: topLine.		"The width label"	boxDescriptionLabel := (self newLabelShape: boxDescription) element.	g add: boxDescriptionLabel.	RTConstraint move: boxDescriptionLabel onTheRightOf: box.			TRConstraint move: widthDescriptionElement between: ext1 and: ext2.	widthDescriptionElement translateBy: 0 @ (widthDescriptionElement extent y / -2 - 3).	ext1 := lineExtremityShape element.	ext2 := lineExtremityShape element.	leftLine := lineShape edgeFrom: ext1 to: ext2.	ext1 translateBy: e topLeft - (10 @ 0).	ext2 translateBy: e bottomLeft - (10 @ 0).	g		add: ext1;		add: ext2.	g add: leftLine.	TRConstraint move: heightDescriptionElement between: ext1 and: ext2.	heightDescriptionElement translateBy: (heightDescriptionElement extent x / -2) @ 0.	^ g</body></methods><methods><class-id>Roassal2.RTZoomInMove</class-id> <category>stepping and presenter</category><body package="Roassal2-Animation">step	^ 1.25</body></methods><methods><class-id>Roassal2.RTLinePathBuilder</class-id> <category>public</category><body package="Roassal2-Experimental">interpolate: points</body><body package="Roassal2-Experimental">tension: aNumber	tension := aNumber</body></methods><methods><class-id>Roassal2.RTLinePathBuilder</class-id> <category>converting</category><body package="Roassal2-Experimental">reverse	^ self.</body></methods><methods><class-id>Roassal2.RTLinePathBuilder</class-id> <category>testing</category><body package="Roassal2-Experimental">closed	^ false.</body></methods><methods><class-id>Roassal2.RTLinePathBuilder</class-id> <category>*Roassal2</category><body package="Roassal2-Experimental">rtValue: anArgument	| value |	value := anArgument.	(anArgument isKindOf: Association)		ifTrue: [ 			self tension: anArgument value.			value := anArgument key. ].		^ self interpolate: value.</body></methods><methods><class-id>Roassal2.RTLinearClosedPathBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Experimental">closed	^ true</body><body package="Roassal2-Experimental">interpolate: points	^ (RTLinearPathBuilder new interpolate: points),'Z'.</body></methods><methods><class-id>Roassal2.RTAnchorConstraint</class-id> <category>building</category><body package="Roassal2-Core">addAnchor	anchorElement := self anchorShape element.	element view add: anchorElement.	guideEdge := self guideLine edgeFrom: element to: anchorElement.	element view add: guideEdge.	edge trachelShape		addCallback:			(TRRemoveCallback				block: [ element remove.					anchorElement remove ])</body><body package="Roassal2-Core">anchorSegment	^ self segments segmentWithPointFor: self balance</body><body package="Roassal2-Core">build	self addAnchor.	edge from addCallback: (TRTranslationCallback block: [ self update ]).	edge to addCallback: (TRTranslationCallback block: [ self update ]).	"Do a symbol-based check, because DCRTConnection is not (yet?) in Roassal"	edge shape className asSymbol = #DCRTConnection		| (edge shape className asSymbol = #DCRTStyledConnection)		ifTrue: [ edge when: #DCRTHandleMoved asClass do: [ self update ] ].	element		when: TRMouseDragStart		do: [ 			guideLine color: Color gray.			guideEdge update.			guideEdge view signalUpdate ].	element		when: TRMouseDragEnd		do:			[ 			guideLine color: Color transparent.			guideEdge update.			guideEdge view signalUpdate ]</body></methods><methods><class-id>Roassal2.RTAnchorConstraint</class-id> <category>updating</category><body package="Roassal2-Core">update	self moveAnchor.	self moveElement</body></methods><methods><class-id>Roassal2.RTAnchorConstraint</class-id> <category>as yet unclassified</category><body package="Roassal2-Core">computeExtraDistance	"Compute the extra distance required to move the element to not overlap the segment."	| segment sideOfElement normals |	segment := self anchorSegment first.	sideOfElement := segment sideOfPoint: element position.	normals := element encompassingRectangle corners		select: [ :each | (segment sideOfPoint: each) ~= sideOfElement ]		thenCollect: [ :each | each dist: (each nearestPointAlongLineFrom: segment from to: segment to) ].	^ minDistance sign &gt; 0		ifTrue: [ normals max ]		ifFalse: [ normals max negated ]</body><body package="Roassal2-Core">connectionSegmentsFor: anEdge	^ (anEdge shape pathFor: anEdge)		overlappingPairsCollect: [ :from :to | RTLineSegment from: from to: to ]</body><body package="Roassal2-Core">lineSegmentFor: anEdge	^ anEdge lineSegments first</body><body package="Roassal2-Core">moveAnchor	anchorElement translateTo: self anchorSegment last</body><body package="Roassal2-Core">moveAwayFrom: aRectangle via: aVector	"There should be minDistance between the start and the element. Move it in the direction fo the current segment"	| vector corners segment |	"source and target of the edge on top of each other... ignore"	aVector r = 0		ifTrue: [ ^ self ].	vector := aVector normalized * (aRectangle origin dist: aRectangle corner).	corners := element encompassingRectangle corners		select: [ :each | aRectangle containsPoint: each ].	segment := (corners		collect:			[ :each | 			| sg |			sg := RTLineSegment from: each to: each + vector.			RTLineSegment from: each to: (sg intersectRectangle: aRectangle) anyOne ])		detectMax: #length.	segment ifNotNil: [ element translateBy: segment vector ]	"	segment		ifNotNil:			[ element view				add:					(RTSVGPath new						path:							'M' , segment from x asString , ',' , segment from y asString , 'L' , segment to x asString								, ',' , segment to y asString;						element) ]"</body><body package="Roassal2-Core">moveAwayFromSegment: aSegment	(aSegment intersectRectangle: element encompassingRectangle)		ifNotEmpty:			[ :crossings | 			element				translateBy:					aSegment vector normal						* (minDistance + self computeExtraDistance) negated ]</body><body package="Roassal2-Core">moveElement	| segment from to |	segment := self anchorSegment first.	element		translateTo: anchorElement position + (segment vector normal * minDistance negated).	self moveAwayFromSegment: segment.	from := edge from encompassingRectangle expandBy: minDistance abs.	to := edge to encompassingRectangle expandBy: minDistance abs.	balance &gt; 0 &amp; (element encompassingRectangle intersects: from)		ifTrue: [ self moveAwayFrom: from via: segment vector ].	balance &lt; 0 &amp; (element encompassingRectangle intersects: to)		ifTrue: [ self moveAwayFrom: to via: segment vector negated ]</body></methods><methods><class-id>Roassal2.RTAnchorConstraint</class-id> <category>accessing</category><body package="Roassal2-Core">anchorShape	^ anchorShape</body><body package="Roassal2-Core">balance	^ balance</body><body package="Roassal2-Core">balance: aNumber	balance := aNumber</body><body package="Roassal2-Core">edge	^ edge</body><body package="Roassal2-Core">edge: anEdge	edge := anEdge</body><body package="Roassal2-Core">element	^ element</body><body package="Roassal2-Core">element: anElement	element := anElement</body><body package="Roassal2-Core">guideLine	^ guideLine</body><body package="Roassal2-Core">minDistance	^ minDistance</body><body package="Roassal2-Core">minDistance: anInteger	minDistance := anInteger</body><body package="Roassal2-Core">segments	(edge shape className = #DCRTConnection)		ifTrue: [ ^ RTPolyLineSegment withAll: (self connectionSegmentsFor: edge) ].	(edge shape isKindOf: RTBezierLine)		ifTrue: [ ^ self notYetImplemented ].	^ RTPolyLineSegment with: (self lineSegmentFor: edge)</body></methods><methods><class-id>Roassal2.RTAnchorConstraint</class-id> <category>initialization</category><body package="Roassal2-Core">initialize	(anchorShape := RTEllipse new)		size: 0;		color: Color red.	(guideLine := RTLine new) color: Color transparent</body></methods><methods><class-id>Roassal2.RTAbstractGrapherDecorator</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">builder: aGraphBuilder	builder := aGraphBuilder</body><body package="Roassal2-Builder-Grapher-Core">dataset: aDataset	self datasets: (Array with: aDataset)</body><body package="Roassal2-Builder-Grapher-Core">datasetValues	"Return the list of Y values for all the datasets"	^ self datasets flatCollect: #getValuesY</body><body package="Roassal2-Builder-Grapher-Core">datasetValuesX	"Return the list of X values for all the datasets"	^ self datasets flatCollect: #getValuesX</body><body package="Roassal2-Builder-Grapher-Core">datasets	^ datasets ifNil: [ builder datasets ]</body><body package="Roassal2-Builder-Grapher-Core">datasets: aCollection	datasets := aCollection</body><body package="Roassal2-Builder-Grapher-Core">shape	^ shapeBuilder</body><body package="Roassal2-Builder-Grapher-Core">view	^ builder view</body></methods><methods><class-id>Roassal2.RTAbstractGrapherDecorator</class-id> <category>configuration</category><body package="Roassal2-Builder-Grapher-Core">isBehind	^ placedInFront = false</body><body package="Roassal2-Builder-Grapher-Core">isInFront	^ placedInFront = true</body><body package="Roassal2-Builder-Grapher-Core">moveBehind	placedInFront := false</body><body package="Roassal2-Builder-Grapher-Core">moveInFront	placedInFront := true</body></methods><methods><class-id>Roassal2.RTAbstractGrapherDecorator</class-id> <category>utility</category><body package="Roassal2-Builder-Grapher-Core">boxFrom: fromPoint to: toPoint	| l ext |	ext := fromPoint corner: toPoint.	l := (RTBox new width: ext width abs; height: ext height abs; color: (Color blue alpha: 0.3)) element.	l translateTo: ext center.	builder view add: l.	^ l</body><body package="Roassal2-Builder-Grapher-Core">label: aString above: position	"Add a label in the view"	| e |	e := self label: aString on: position.	e translateTo: position - (e extent / 2).	^ e</body><body package="Roassal2-Builder-Grapher-Core">label: aString on: position	"Add a label in the view"	^ self label: aString on: position color: RTLabel defaultColor</body><body package="Roassal2-Builder-Grapher-Core">label: aString on: position color: aColor	"Add a label in the view"	| e |	e := (RTLabel new color: aColor) elementOn: aString.	e translateTo: position.	builder view add: e.	^ e</body><body package="Roassal2-Builder-Grapher-Core">lineFrom: fromPoint to: toPoint	| e1 e2 l |	e1 := (RTEllipse new size: 0) element.	e2 := (RTEllipse new size: 0) element.	e1 translateTo: fromPoint.	e2 translateTo: toPoint.	l := shapeBuilder edgeFrom: e1 to: e2.	builder view add: e1; add: e2; add: l.	^ l</body></methods><methods><class-id>Roassal2.RTAbstractGrapherDecorator</class-id> <category>testing</category><body package="Roassal2-Builder-Grapher-Core">convertPointForGraph: p	^ p x @ p y negated</body><body package="Roassal2-Builder-Grapher-Core">hasDatasets	^ datasets isNotNil and: [ datasets isNotEmpty ]</body><body package="Roassal2-Builder-Grapher-Core">isPointOverTheBuilder: aPoint	"Return true of false on whether the provided point is above the builder.	Note that the point is translated from the camera"	| pp |	pp := self convertPointForGraph: aPoint.		"Humm... I am not sure this is the best way to do this. What happens if the view is embedded?"	^ pp &gt;= (0 @ 0) and: [ pp &lt;= builder extent ]</body></methods><methods><class-id>Roassal2.RTAbstractGrapherDecorator</class-id> <category>accessing - computed</category><body package="Roassal2-Builder-Grapher-Core">elementsWithModel	^ self view elements select: [ :e | e model notNil ]</body></methods><methods><class-id>Roassal2.RTAbstractGrapherDecorator</class-id> <category>signalling</category><body package="Roassal2-Builder-Grapher-Core">signalUpdate	^ self view signalUpdate</body></methods><methods><class-id>Roassal2.RTAbstractGrapherDecorator</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	shapeBuilder := RTShapeBuilder new. 	shapeBuilder line.	placedInFront := true.</body></methods><methods><class-id>Roassal2.RTAbstractGrapherDecorator</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">render	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractLineDecorator</class-id> <category>adding</category><body package="Roassal2-Builder-Grapher-Decorators">add: aValue	values add: aValue</body><body package="Roassal2-Builder-Grapher-Decorators">addAll: someValues	values addAll: someValues</body><body package="Roassal2-Builder-Grapher-Decorators">forAllPoints	self addAll: self datasetValues</body></methods><methods><class-id>Roassal2.RTAbstractLineDecorator</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Decorators">initialize	super initialize.	values := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTAbstractValuesDecorator</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Decorators">labelConversion	^ labelConversion</body><body package="Roassal2-Builder-Grapher-Decorators">labelConversion: aBlockOrASymbol	"Before creating the label, the value to be displayed may be converted using the provided block. Consider the following example:-=-=-=-=-=-=-=-=	b := RTGrapher new.ds := RTDataSet new.ds points: #(0 1 2 3 4 5 6).b add: ds.deco :=  RTHorizontalAllValuesDecorator new.deco labelConversion: [ :value | '#', value asString ].b addDecorator: deco.deco :=  RTVerticalValuesDecorator new.deco addAll: #(2 3 4).deco labelConversion: [ :value | '#', value asString ].b addDecorator: deco.b axisX noTick; noLabel.b axisY noTick; noLabel.b -=-=-=-=-=-=-=-=		"	labelConversion := aBlockOrASymbol</body><body package="Roassal2-Builder-Grapher-Decorators">labelRotation	^ labelRotation</body><body package="Roassal2-Builder-Grapher-Decorators">labelRotation: aNumber	labelRotation := aNumber</body></methods><methods><class-id>Roassal2.RTAbstractValuesDecorator</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Decorators">initialize	super initialize.	labelConversion := #yourself.	labelRotation := 0.</body></methods><methods><class-id>Roassal2.RTAbstractHorizontalValuesDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">render		| position offset tickSize lb e |	offset := 0 @ 30.	tickSize := 5.	values do: [ :aValue |		position := builder getPixelPositionOf: aValue @ 0.		lb := self label: (labelConversion rtValue: aValue) asString on: position + offset.		lb rotateByDegrees: labelRotation.				self shape line color: Color gray.		e := self lineFrom: position to: position + (0 @ tickSize).		TRConstraint move: lb below: e.		labelRotation = 0 ifFalse: [ "translate only if rotated"			lb translateBy: (lb width / -2 @ 0) + (5 @ 0) ].		 ]</body></methods><methods><class-id>Roassal2.RTHorizontalAllValuesDecorator</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Grapher-Decorators">render		self addAll: self datasetValuesX asSet. 	super render.</body></methods><methods><class-id>Roassal2.RTScrollPadBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-ScrollBar">defineShapes	|  bar surroundingRectangle margeRectangle |		"set bar shape"		(self barShape = #aBox) ifTrue: [ bar := TRBoxShape new ] ifFalse: [ bar := TREllipseShape new ].		"bar is the shape to drag and drop"	bar height: self barHeight; width: self barWidth; color: (Color lightGray);  position: self fixedPosition; strokePaint: nil.			"This shape is the the fill of the scroll pad"	surroundingRectangle := TRBoxShape new fromRectangle: (Rectangle origin: (self fixedPosition x - (self size / 2)) @ (self fixedPosition y - (self size / 2)) corner:(self fixedPosition x + (self size / 2)) @ (self fixedPosition y + (self size / 2))); color: (Color gray alpha: 0.1); strokePaint: nil.		"the margeRectangle handle the width/2 of the bar"	margeRectangle := TRBoxShape new fromRectangle: (Rectangle origin: (surroundingRectangle encompassingRectangle origin + ((bar width /2)@(bar height /2)))corner: (surroundingRectangle encompassingRectangle corner - ((bar width /2)@(bar height /2)))); color: (Color gray alpha:0); strokePaint: nil .	self shapes bar: bar; surroundingRectangle: surroundingRectangle; margeRectangle: margeRectangle.</body><body package="Roassal2-Builder-ScrollBar">positionOnBorderHorizontal	((self shapes bar position x - (self barWidth / 2)) &lt; (self shapes surroundingRectangle position x - (self size / 2))) ifTrue: [ self shapes bar translateTo: (self shapes surroundingRectangle position x - (self size / 2) + (self barWidth / 2))@(self shapes surroundingRectangle position y)].				((self shapes bar position x + (self barWidth / 2)) &gt; (self shapes surroundingRectangle position x + (self size / 2))) ifTrue: [ self shapes bar translateTo: (self shapes surroundingRectangle position x + (self size / 2) - (self barWidth / 2))@(self shapes surroundingRectangle position y)].							((self shapes bar position y - (self barHeight / 2)) &lt; (self shapes surroundingRectangle position y - (self size / 2))) ifTrue: [ self shapes bar translateTo: (self shapes surroundingRectangle position x)@(self shapes surroundingRectangle position y - (self size / 2) + (self barHeight / 2))].				((self shapes bar position y + (self barHeight / 2)) &gt; (self shapes surroundingRectangle position y + (self size / 2))) ifTrue: [ self shapes bar translateTo: (self shapes surroundingRectangle position x)@(self shapes surroundingRectangle position y + (self size / 2) - (self barHeight / 2))].</body><body package="Roassal2-Builder-ScrollBar">reverseTranslation: evt	| tx ty |	tx:= ((evt step x)  / (self encompassingRectangleFromSpaceToPixel width )) * (self size - self shapes bar width).		ty := ((evt step y)  / (self encompassingRectangleFromSpaceToPixel height)) * (self size - self shapes bar height).		^ (tx negated)@(ty negated)</body></methods><methods><class-id>Roassal2.RTScrollPadBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-ScrollBar">renderIn: aView		(self view elements isEmpty) ifTrue: [self defaultEncompassingRectangle] ifFalse: [ self encompassingRectangleUpdate ].	self encompassingRectangleFromSpaceToPixelUpdate.		self defineShapes.	self addShapesToView.	self addAnimations.</body></methods><methods><class-id>Roassal2.RTScrollPadBuilder</class-id> <category>adding</category><body package="Roassal2-Builder-ScrollBar">addAnimations	| bar surroundingRectangle margeRectangle |	bar := self shapes bar.	surroundingRectangle := self shapes surroundingRectangle.	margeRectangle := self shapes margeRectangle.	bar when: TRMouseDragging do: [ :evt |				(self encompassingRectangle containsPoint: (self view canvas camera position)) ifFalse: [ (self view canvas camera) translateTo:  ((self encompassingRectangle) pointNearestTo: (self view canvas camera position))  ].				(margeRectangle includesPoint: (bar position + evt step)) &amp; (surroundingRectangle includesPoint: evt position) ifTrue: [  			bar translateBy: evt step.			self view canvas camera translateBy: (self translation: evt).		].		self view signalUpdate.		].		(self movable = #isMovable) ifTrue: [		surroundingRectangle when: TRMouseDragging do: [ :evt |			self shapes collection do: [ :s | s translateBy: (evt step) ].			self view signalUpdate.			]		].				self view when: TRMouseDragging do: [ :evt | 		| translation |		translation := (self reverseTranslation: evt).		((margeRectangle includesPoint: (bar position + translation)) &amp; ((self encompassingRectangle ) containsPoint: (self view canvas camera position))) ifTrue: [ 			shapes bar translateBy: translation.			self view signalUpdate			]. 		].		self view elements do: [:e | e addCallback: (TRTranslationCallback new block: [			self encompassingRectangleUpdate. self encompassingRectangleFromSpaceToPixelUpdate. self signalUpdate.])		].		self view when: TRResizeCanvasEvent do: [ :evt | self signalUpdate].	self view canvas camera addCallback: (TRCameraScaleCallback new block: [ self encompassingRectangleFromSpaceToPixelUpdate. self signalUpdate. ]).</body></methods><methods><class-id>Roassal2.RTScrollPadBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-ScrollBar">translation: evt	| tx ty |			tx := ((evt step x) / (self size  - self shapes bar width)) * ((self encompassingRectangleFromSpaceToPixel width) / self view canvas camera scale).	ty := ((evt step y) / (self size  - self shapes bar height)) * ((self encompassingRectangleFromSpaceToPixel height) / self view canvas camera scale).		^ tx@ty</body></methods><methods><class-id>Roassal2.RTScrollPadBuilder</class-id> <category>signalling</category><body package="Roassal2-Builder-ScrollBar">signalUpdatePosition	| prx pry  org|	(self movable = #isMovable) ifFalse: [ 				prx :=  ((self shapes bar position x)-(self shapes surroundingRectangle position x - (self shapes surroundingRectangle width/2))) / (self shapes surroundingRectangle width) * self size.		pry := ((self shapes bar position y)-(self shapes surroundingRectangle position y - (self shapes surroundingRectangle height/2))) / (self shapes surroundingRectangle height) * self size.						self shapes surroundingRectangle position: self fixedPosition.		self shapes surroundingRectangle position: self fixedPosition.			org := (self fixedPosition x - (self size / 2) )@(self fixedPosition y - (self size / 2) ).						self shapes bar position: (prx + org x)@((pry + org y)).				self positionOnBorderHorizontal.		].</body><body package="Roassal2-Builder-ScrollBar">signalUpdateSize							self shapes surroundingRectangle width: self size.			self shapes surroundingRectangle height: self size.			self shapes margeRectangle width: (self size - (self barWidth)).			self shapes margeRectangle height: (self size - (self barHeight)).			self shapes bar width: self barWidth.			self shapes bar height: self barHeight.</body></methods><methods><class-id>Roassal2.RTScrollPadBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-ScrollBar">initialize	super initialize.	self shapes: RTScrollShapesBuilder new.</body></methods><methods><class-id>Roassal2.RTAbstractTickLineDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">fromPoint	^ self axis fromPoint</body><body package="Roassal2-Builder-Grapher-Decorators">maxValue	^ self axis maxValue</body><body package="Roassal2-Builder-Grapher-Decorators">minValue	^ self axis minValue</body><body package="Roassal2-Builder-Grapher-Decorators">step	^ step rtValue: self axis</body><body package="Roassal2-Builder-Grapher-Decorators">toPoint	^ self axis toPoint</body></methods><methods><class-id>Roassal2.RTAbstractTickLineDecorator</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Decorators">numberOfTicks: nbOfTicks	self step: [ :axis | (axis maxValue - axis minValue) / nbOfTicks ]</body><body package="Roassal2-Builder-Grapher-Decorators">step: aValueOrASymbolOrABlock	"The argument is evaluated against the axis"	step := aValueOrASymbolOrABlock</body></methods><methods><class-id>Roassal2.RTAbstractTickLineDecorator</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Decorators">axis	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractTickLineDecorator</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Decorators">initialize	super initialize.	self step: [ :axis | axis step ]</body></methods><methods><class-id>Roassal2.RTVerticalTickLineDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">render	| xLine mm |	mm := RTMetricNormalizer new.	(self minValue to: self maxValue by: self step)		do: [ :x | 			xLine := mm				getValue: x				min: self fromPoint x				max: self toPoint x				minValue: self minValue				maxValue: self maxValue.			self lineFrom: xLine @ builder getAxisY fromPoint y to: xLine @ builder getAxisY toPoint y ]</body></methods><methods><class-id>Roassal2.RTVerticalTickLineDecorator</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Decorators">axis	^ builder getAxisX</body></methods><methods><class-id>Roassal2.Roassal2Spec</class-id> <category>private</category><body package="Roassal2-Visualworks">defaultModel	| v |	v := RTView new.	v canvas color: Color veryLightGray.	^ v asValue.</body><body package="Roassal2-Visualworks">dispatchTo: policy with: builder	policy roassalView: self into: builder</body></methods><methods><class-id>Roassal2.Roassal2Spec</class-id> <category>accessing</category><body package="Roassal2-Visualworks">bordered	^ bordered isNil	ifTrue: [ true ]	ifFalse: [ bordered ]</body><body package="Roassal2-Visualworks">bordered: aBool	bordered := aBool</body></methods><methods><class-id>Roassal2.Roassal2Spec</class-id> <category>initialize-release</category><body package="Roassal2-Visualworks">initialize	super initialize.	self hasBorder: true.	^self</body></methods><methods><class-id>Roassal2.Roassal2Spec class</class-id> <category>private-interface building</category><body package="Roassal2-Visualworks">addBindingsTo: env for: inst channel: aChannel	super addBindingsTo: env for: inst channel: aChannel.	env at: #bordered put: (self adapt: inst forAspect: #bordered channel: aChannel).</body><body package="Roassal2-Visualworks">componentName	^ 'Roassal2 View'</body><body package="Roassal2-Visualworks">specGenerationBlock	^ [ :ctrlr :point | 	| spec |	spec := self		model: nil		layout: ((ctrlr gridPoint: point)			extent: (ctrlr currentMode value class 				placementExtentFor: self				inBuilder: ctrlr builder )).	spec assignNameFrom: ctrlr.	spec.	]</body></methods><methods><class-id>Roassal2.Roassal2Spec class</class-id> <category>property slices</category><body package="Roassal2-Visualworks">dropTargetSlice	"Empty array means no page!"	^#(1 #())</body></methods><methods><class-id>Roassal2.Roassal2Spec class</class-id> <category>resources</category><body package="Roassal2-Visualworks">iconBase64	^ 'iVBORw0KGgoAAAANSUhEUgAAABoAAAAaCAYAAACpSkzOAAAC+0lEQVR42s2W60uTcRTH5/UfEPFK2IuCnFkZmYVF2UXohRb6QkoyzAzBJEp6o5mJllYIoZlpYheEgkCSSrxENUXRXby1LHVSto0o11Zm0+n27Tw/3Nj0ediWKb04D8/O78fz+Z1zvuf8JvLw8ABnIpFoZc3LywsymWxFjYG4aFYFxD3+G9BgazNUd29Dc+UStBdzoc07B01RHlQ1tzAgebNMkFSK4WdN0GemwhS9HnNkpoS9+HksEdPJ8ZiPWgvzljBMJ8ahv7Pz70D9dEptwQWYdkXiV8IeqMuKoXzZ7rBnoEOC7xkpsGwMgSHnlM0vpQNy5hSk6O6GLus4ZmMj8PlqIcYpPbrTqfhUcYNFab/3w8N6zO3YgBk6jL1fLpc7wHhB7582slSN1ddA1tODiWtFsIQHUl3OLwGN3qvF3PZ10Gen2wB8qVvoU0fQ4OtXmKgst/3WZZ+AJTIUH+18nPV1dGAyKw3G/dugbHnBIuBAi6MRBFmFwE7Y24uZuCjM7wzHCKVJ0dWFofY2jNK7Pi0ZP9KSMPy4wanqhEEL9ralmanLeCAaqrpqmAhojggm+FaM36lkqXWlj5yCxu7Xwbx5DaaO7IOmOB9TSfFUryB8yc91q2EZyNfXV3CDpqwIoPpMZh6FgmoyQPXjajK7exP6JBL3QP7+/oIN+/VsJiziQDYRrH5tSQH5gqE7c9JlkKenJ0Q+Pj68i33UtPrUw0zaIw0PbH5lUyOMB2NgiQjFGNVNRoKx9p9CoGZ+fn7C03uo+Tl+H4ql4odg0G6ecUpUUyNbxEEwxsdARXVUtrVCfb2EtQbftwICAoTF8O7JI5hJZbN0+sVrHMyQnsL6y0wRm6PCMFF2GXKB1HFZEwSpaqsoPcEw0DjiW5dTmtSlhfiWk4Hx6gpbCvmMu1wFQeryUhaNuuqmrev5BKNYNAXcBjl+kH9YLolSYAQx1bl8w0pdk7I1cnuY08nAd8cITWghiFug5drqgry9vZnOrX8k/6VxIhCLxeDm6R/wQ7Sti+H+wAAAAABJRU5ErkJggg=='</body></methods><methods><class-id>Roassal2.RTSBFadeInteraction</class-id> <category>hooks</category><body package="Roassal2-Builder-Sunburst">initializeElement: element		element when: TRMouseEnter do: [ :event | 		stillInSunburst := true.		self focus: element. 		self updateCanvas: element.		action ifNotNil: [ action value: element model ].		 ].		element when: TRMouseLeave do: [ :event | | anim |		stillInSunburst := false.		anim := RTNopAnimation new			waitFor: 1 after: [				stillInSunburst ifFalse: [self restore: element. self updateCanvas: element.].				 ].				element view addAnimation: anim.		anim start.		action ifNotNil: [ action value: nil ] ].</body></methods><methods><class-id>Roassal2.RTSBFadeInteraction</class-id> <category>computing</category><body package="Roassal2-Builder-Sunburst">action: ablock	action := ablock</body><body package="Roassal2-Builder-Sunburst">children: element	(element attributes includesKey: #children) ifTrue: [ 		^ element attributes at: #children ]	ifFalse: [ ^ #() ].</body><body package="Roassal2-Builder-Sunburst">fade: element	| color |	(element attributes includesKey: #scolor) 		ifTrue: [ color := element attributes at: #scolor ]		ifFalse: [			color := element color.			element attributes at: #scolor put: color ].	element trachelShape color: (color alpha:0.2).</body><body package="Roassal2-Builder-Sunburst">fade: element element: target	"recursive fade the elements"		| res v |	res := true.	(element = target) ifTrue: [ res := false. ].		(self children: element) do: [ :node | 		v := self fade: node element element: target.		v ifTrue: [ self fade: node element ]		ifFalse: [ res := false. ].	].	^ res.</body><body package="Roassal2-Builder-Sunburst">fadeElements: elements	elements do: [ :e | self fade: e ].</body><body package="Roassal2-Builder-Sunburst">focus: element	| oldPath |	oldPath := self sbpath: element.	oldPath ifNil: [ self fadeElements: element view elements ]	ifNotNil: [		self fadeElements: oldPath ].	oldPath := self path: element.	self sbpath: element put: oldPath.	self restoreElements: oldPath.</body><body package="Roassal2-Builder-Sunburst">parentOf: element		| e |	e := element view elements first.	^ e</body><body package="Roassal2-Builder-Sunburst">restore: element	self sbpath: element put: nil.	self restoreElements: element view elements.</body><body package="Roassal2-Builder-Sunburst">restoreElement: el	| color |	(el attributes includesKey: #scolor) ifTrue: [ 		color := el attributes at: #scolor.		el trachelShape color: color. ]</body><body package="Roassal2-Builder-Sunburst">restoreElements: elements	elements do: [ :e | self restoreElement: e ].</body><body package="Roassal2-Builder-Sunburst">sbpath: element	| att |	att := element view elements first attributes.	^ (att includesKey: #sbpath) ifTrue: [ att at: #sbpath ] ifFalse: [ nil ]</body><body package="Roassal2-Builder-Sunburst">sbpath: element put: path	element view elements first attributes at: #sbpath put: path.</body><body package="Roassal2-Builder-Sunburst">updateCanvas: element	element trachelShape canvas signalUpdate.</body></methods><methods><class-id>Roassal2.RTSBFadeInteraction</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Sunburst">path: element	| e path |	e := element.	path := OrderedCollection new.	path add: e.	[ e attributes includesKey: #parent ] whileTrue: [ 		e := e attributes at: #parent.		(e isNil) ifTrue: [ ^ path ].		path add: e. ].	^ path.</body></methods><methods><class-id>Roassal2.RTSBFadeInteraction class</class-id> <category>initialize-release</category><body package="Roassal2-Builder-Sunburst">action: ablock	| inst |	inst := self new.	inst action: ablock.	^ inst.</body></methods><methods><class-id>Roassal2.RTAbstractLine</class-id> <category>rendering</category><body package="Roassal2-Shapes">updateFor: edge trachelShape: trachelShape	self updateFromToFor: edge trachelShape: trachelShape.	trachelShape color: (self colorFor: edge).	trachelShape width: (self widthFor: edge).	trachelShape resetPath</body><body package="Roassal2-Shapes">updateFromToFor: edge trachelShape: trachelShape	trachelShape		from: (attachPoint startingPointOf: edge)		to: (attachPoint endingPointOf: edge)</body></methods><methods><class-id>Roassal2.RTAbstractLine</class-id> <category>testing</category><body package="Roassal2-Shapes">allowSelfLoop	^ allowSelfLoop</body><body package="Roassal2-Shapes">isSelfLoopAllowedFor: anEdge	^ anEdge from = anEdge to 		ifTrue: [ allowSelfLoop ]		ifFalse: [ true].</body></methods><methods><class-id>Roassal2.RTAbstractLine</class-id> <category>updating</category><body package="Roassal2-Shapes">updateFromToFor: edge	self updateFromToFor: edge trachelShape: edge trachelShape</body></methods><methods><class-id>Roassal2.RTAbstractLine</class-id> <category>public</category><body package="Roassal2-Shapes">+ anotherShape	"Compose this shape with another shape"	anotherShape line: self.	^ RTCompositeShape with: self with: anotherShape instance</body><body package="Roassal2-Shapes">copyWithSimpleArrow	"Return a new line, the one with arrow"	| arrow |	arrow := RTSimpleArrowHead new 				color: Color red; 				attachPoint: RTVerticalAttachPoint instance.	arrow size: 15; baseSize: 10. 	^ self + arrow</body><body package="Roassal2-Shapes">edgeFrom: el1 to: el2	"Return a new edge, starting from el1 and ending with el2."	^ (RTEdge from: el1 to: el2) addShape: self</body><body package="Roassal2-Shapes">edgesFrom: element toAll: someElements	"Return a set of edges, with myself as shape. The parameter 'element' is an instance of RTElement, and someElements is simply an ordered collection of RTElement"	^ (RTEdge from: element toAll: someElements) addShape: self</body><body package="Roassal2-Shapes">width: aBlockOrValue	"Set the width of the shape"	self widthElement: [ :e | aBlockOrValue rtValue: e model ].</body><body package="Roassal2-Shapes">widthElement: aBlockOrValue	"Set the width of the shape"	width := aBlockOrValue</body><body package="Roassal2-Shapes">widthFor: anElement	"Return the width for the provided element"	^ width rtValue: anElement</body><body package="Roassal2-Shapes">withOffsetIfMultiple	"Make the edge to shift in case several edges are starting from tne same element and ending to the same element. (I.e., multile edges)"	self attachPoint: RTShorterDistanceWithOffsetAttachPoint new</body></methods><methods><class-id>Roassal2.RTAbstractLine</class-id> <category>error handling</category><body package="Roassal2-Shapes">element	self error: 'You cannot send #element to a line. Create an edge using #edgeFrom:to:'</body><body package="Roassal2-Shapes">elementOn: v	self error: 'You cannot send #elementOn: to a line. Create an edge using #edgeFrom:to:'</body><body package="Roassal2-Shapes">elementsOn: v	self error: 'You cannot send #elementsOn: to a line. Create an edge using #edgeFrom:to:'</body></methods><methods><class-id>Roassal2.RTAbstractLine</class-id> <category>attach point</category><body package="Roassal2-Shapes">attachPoint	"Return the attach point of the line"	^ attachPoint</body><body package="Roassal2-Shapes">attachPoint: aRTAttachPoint	attachPoint := aRTAttachPoint.</body><body package="Roassal2-Shapes">endingPointOf: anEdge	^ attachPoint endingPointOf: anEdge</body><body package="Roassal2-Shapes">startingPointOf: anEdge	^ attachPoint startingPointOf: anEdge</body><body package="Roassal2-Shapes">withBorderAttachPoint	| ap |	ap := RTBorderAttachPoint new.	self attachPoint: ap.	^ ap</body><body package="Roassal2-Shapes">withCenteredAttachPoint	| ap |	ap := RTCenteredAttachPoint new.	self attachPoint: ap.	^ ap</body><body package="Roassal2-Shapes">withContinuousCircleAttachPoint	self deprecated: 'Use #withBorderAttachPoint instead.'.	^ self withBorderAttachPoint</body><body package="Roassal2-Shapes">withContinuousRectangleAttachPoint	self deprecated: 'Use #withBorderAttachPoint instead.'.	^ self withBorderAttachPoint</body><body package="Roassal2-Shapes">withHorizontalAttachPoint	| ap |	ap := RTHorizontalAttachPoint new.	self attachPoint: ap.	^ ap</body><body package="Roassal2-Shapes">withShorterDistanceAttachPoint	| ap |	ap := RTBorderAttachPoint new.	self attachPoint: ap.	^ ap.</body><body package="Roassal2-Shapes">withShorterDistanceAttachPointWithJump	| ap |	ap := RTShorterDistanceAttachPoint new.	self attachPoint: ap.	^ ap.</body><body package="Roassal2-Shapes">withShorterHorizontalAttachPoint	| ap |	ap := RTShorterHorizontalDistanceAttachPoint new.	self attachPoint: ap.	^ ap</body><body package="Roassal2-Shapes">withShorterVerticalAttachPoint	| ap |	ap := RTShorterVerticalDistanceAttachPoint new.	self attachPoint: ap.	^ ap</body><body package="Roassal2-Shapes">withVerticallAttachPoint	| ap |	ap := RTVerticalAttachPoint new.	self attachPoint: ap.	^ ap</body></methods><methods><class-id>Roassal2.RTAbstractLine</class-id> <category>configuration</category><body package="Roassal2-Shapes">noSelfLoop	allowSelfLoop := false.</body><body package="Roassal2-Shapes">withSelfLoop	allowSelfLoop := true.</body></methods><methods><class-id>Roassal2.RTAbstractLine</class-id> <category>visitor</category><body package="Roassal2-Shapes">accept: aVisitor	aVisitor visitLine: self</body></methods><methods><class-id>Roassal2.RTAbstractLine</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	attachPoint := RTCenteredAttachPoint new.	self withSelfLoop.	width := 1.</body></methods><methods><class-id>Roassal2.RTAbstractLine class</class-id> <category>public</category><body package="Roassal2-Shapes">edgeFrom: el1 to: el2	^ (RTEdge from: el1 to: el2) addShape: self</body><body package="Roassal2-Shapes">edgesFrom: element toAll: someElements	^ (RTEdge from: element toAll: someElements) addShape: self</body><body package="Roassal2-Shapes">element	self error: 'You cannot send #element to a line. Create an edge using #edgeFrom:to:'</body><body package="Roassal2-Shapes">elementOn: v	self error: 'You cannot send #elementOn: to a line. Create an edge using #edgeFrom:to:'</body><body package="Roassal2-Shapes">elementsOn: v	self error: 'You cannot send #elementsOn: to a line. Create an edge using #edgeFrom:to:'</body></methods><methods><class-id>Roassal2.RTBezierLine</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	tension := 0.7.	controllingElements := #()</body></methods><methods><class-id>Roassal2.RTBezierLine</class-id> <category>accessing</category><body package="Roassal2-Shapes">controllingElements	"Return a list of elements or a one arg block, evaluated against the edge"	^ controllingElements</body><body package="Roassal2-Shapes">controllingElements: listOfElementsOrOneArgBlock	"Argument can be a OneArgBlock (taking an edge as argument) or directly a list of elements"	"NOTE: controlling elements are retreived when the edge is created, which may not be already added to the view. This means that the argument should not try to access the view from the edge directly"	controllingElements := listOfElementsOrOneArgBlock</body><body package="Roassal2-Shapes">follow	^ follow</body><body package="Roassal2-Shapes">follow: aBlockOrASymbol	"Make the bezier follow the path specified as the argument"		follow := aBlockOrASymbol</body><body package="Roassal2-Shapes">tension	^ tension</body><body package="Roassal2-Shapes">tension: aNumber	self assert: (aNumber between: 0 and: 1 ).	tension := aNumber</body></methods><methods><class-id>Roassal2.RTBezierLine</class-id> <category>control points</category><body package="Roassal2-Shapes">centerOfElements: aOneArgBlockOrValues	"Argument can be a OneArgBlock (taking an edge as argument) or direct values"	| b |	b := [ :edge |		| center intermediaryElement elements |		elements := aOneArgBlockOrValues rtValue: edge.		(elements isNil or: [ elements isEmpty ]) 			ifTrue: [ #() ]			ifFalse: [ 				center := (RTGroup withAll: elements) center.				intermediaryElement := RTBox element.				intermediaryElement translateTo: center.				Array with: intermediaryElement ] ].	self controllingElements:  b</body><body package="Roassal2-Shapes">centerOfObjects: aOneArgBlockOrValues inView: view	"Set one control point, at the center of the elements provided as argument"	^ self centerOfElements: [ :edge |		aOneArgBlockOrValues isClosure			ifTrue:  [ view elementsFromModels: (aOneArgBlockOrValues 															value: edge from model value: edge to model) ]			ifFalse: [ view elementsFromModels: aOneArgBlockOrValues ] ]</body><body package="Roassal2-Shapes">getControllingElementsFromFollowFor: anEdge	^ self getControllingElementsFromFollowFor: anEdge using: follow</body><body package="Roassal2-Shapes">getControllingElementsFromFollowFor: anEdge using: followBlock	| start end lca elements block k clean |	start := anEdge from.	end := anEdge to.	lca := self leastCommonAncestor: anEdge using: followBlock.	elements := OrderedCollection new.	clean := [ elements ifNotEmpty: [ elements removeFirst ].		elements ifNotEmpty: [ elements removeLast ]. ].	lca ifNil: [ 		elements := (self getFollowersOf: start using: followBlock), 			(self getFollowersOf: end using: followBlock) reverse allButFirst.		clean value.		^ elements.		 ].		elements add: start.	block := [ :m | start view elementFromModel: (followBlock rtValue: m)  ].		[ start == lca ] whileFalse: [ 		start := block value: start model.		elements add: start.	 ].	k := elements size.	[ end == lca ] whileFalse: [ 		elements add: end afterIndex: k.		end := block value: end model.	 ].	clean value.	^ elements.</body><body package="Roassal2-Shapes">getFollowersOf: aNode using: followBlock	| answer view t model |	answer := OrderedCollection new.	view := aNode view.	t := aNode.	[ t notNil ]		whileTrue: [ 			answer add: t.			model := followBlock rtValue: t model.			model ifNil: [ ^ answer ].			t := view elementFromModel: model ].	^ answer</body><body package="Roassal2-Shapes">getListOfPointsForTrachel: anEdge	| listOfPoints realControllingElements |	listOfPoints := OrderedCollection new.		"We add the first point of the edge"	listOfPoints add: (attachPoint startingPointOf: anEdge).		"Set the controlling elements from a follow block, if any"	follow ifNotNil: 		[ self setControllingElementsFromFollowFor: anEdge ].		realControllingElements := controllingElements rtValue: anEdge.	realControllingElements ~= #() ifTrue: [ | cElements |		cElements := realControllingElements collect: #position.		cElements isNotEmpty ifTrue: [ 						(cElements first = anEdge from position and: [ cElements size  &gt; 1 ])				ifTrue: [ cElements := cElements allButFirst ].			(cElements last = anEdge to position and: [ cElements size  &gt; 1 ])				ifTrue: [ cElements := cElements allButLast ] ].		listOfPoints addAll: cElements	].	"We add the last point of the edge"	listOfPoints add: (attachPoint endingPointOf: anEdge).	^ self applyTension: listOfPoints</body><body package="Roassal2-Shapes">horizontal	| b center intermediaryElement1 intermediaryElement2 |	b := [ :edge |		center := (RTGroup with: edge from with: edge to) center.		intermediaryElement1 := RTBox element.		intermediaryElement1 translateTo: (center x @ edge from position y).				intermediaryElement2 := RTBox element.		intermediaryElement2 translateTo: (center x @ edge to position y).		Array with: intermediaryElement1 with: intermediaryElement2	].	self controllingElements:  b</body><body package="Roassal2-Shapes">leastCommonAncestor: anEdge using: followBlock	| a b aNodes bNodes sharedNode |	a := anEdge from.	b := anEdge to.	a = b ifTrue: [ ^ a ].	aNodes := self getFollowersOf: a using: followBlock.	bNodes := self getFollowersOf: b using: followBlock.	sharedNode := nil.	a := aNodes removeLast.	b := bNodes removeLast.		[ a == b ] whileTrue: [ 		sharedNode := a.		sharedNode ifNil: [ ^ nil ].		a := aNodes ifEmpty: [ nil ] ifNotEmpty: [aNodes removeLast].		b := bNodes ifEmpty: [ nil ] ifNotEmpty: [bNodes removeLast]. ].	^ sharedNode.</body><body package="Roassal2-Shapes">midPointInCenterOfElements: aOneArgBlockOrValues	"Argument can be a OneArgBlock (taking an edge as argument) or direct values"	| b |	b := [ :edge |		| center intermediaryElement elements |		elements := aOneArgBlockOrValues rtValue: edge.		(elements isNil or: [ elements isEmpty ]) 			ifTrue: [ #() ]			ifFalse: [ 				center := (RTGroup withAll: elements) center.				intermediaryElement := RTBox element.				intermediaryElement translateTo: (edge from position + center) / 2.				Array with: intermediaryElement ] ].	self controllingElements:  b</body><body package="Roassal2-Shapes">midPointInCenterOfObjects: aOneArgBlockOrValues inView: view	"Set one control point, between the starting point and the center of all the objects provided as argument"	^ self midPointInCenterOfElements: [ :edge |		aOneArgBlockOrValues isClosure			ifTrue:  [ view elementsFromModels: (aOneArgBlockOrValues 															value: edge from model value: edge to model) ]			ifFalse: [ view elementsFromModels: aOneArgBlockOrValues ] ]</body><body package="Roassal2-Shapes">setControllingElementsFromFollowFor: anEdge	controllingElements := self getControllingElementsFromFollowFor: anEdge</body><body package="Roassal2-Shapes">vertical	| b center intermediaryElement1 intermediaryElement2 |	b := [ :edge |		center := (RTGroup with: edge from with: edge to) center.		intermediaryElement1 := RTBox element.		intermediaryElement1 translateTo: (edge from position x @ center y).				intermediaryElement2 := RTBox element.		intermediaryElement2 translateTo: (edge to position x @ center y).		Array with: intermediaryElement1 with: intermediaryElement2	].	self controllingElements:  b</body></methods><methods><class-id>Roassal2.RTBezierLine</class-id> <category>public</category><body package="Roassal2-Shapes">trachelShapeFor: anEdge	| trachelShape realControllingElements |	trachelShape := TRBezierShape new.	self updateFor: anEdge trachelShape: trachelShape."	shape width: (self widthFor: anEdge).	shape points: (self getListOfPointsForTrachel: anEdge).	shape strokePaint: (self colorFor: anEdge)."	realControllingElements := controllingElements rtValue: anEdge. 	realControllingElements do: [ :e | e addConnectedEdge: anEdge ].	^ trachelShape</body></methods><methods><class-id>Roassal2.RTBezierLine</class-id> <category>rendering</category><body package="Roassal2-Shapes">updateFor: edge trachelShape: trachelShape	trachelShape resetPath. 	trachelShape strokePaint: (self colorFor: edge).	trachelShape width: (self widthFor: edge).	trachelShape points: (self getListOfPointsForTrachel: edge).	trachelShape strokePaint: (self colorFor: edge).</body></methods><methods><class-id>Roassal2.RTBezierLine</class-id> <category>private</category><body package="Roassal2-Shapes">applyTension: points	| n p1 dp p t |	n := points size - 1.	p1 := points first.	dp := points last - p1.	2 to: n do: [ :i| 		p := points at: i.		t := (i-1) / n.		points at: i put: ((tension * p) + ((1-tension) *(p1+(t * dp) )) ) ].		^ points</body></methods><methods><class-id>Roassal2.RTBezierLine class</class-id> <category>public</category><body package="Roassal2-Shapes">horizontal	"Create an horizontal bezier line between the two extremities of the edge"	"	e.g.	v := RTView new.	shape := RTEllipse new size: 15; color: Color blue trans.	e1 := shape element.	e2 := shape element.	v add: e1; add: e2.	e1 @ RTDraggable.	e2 @ RTDraggable.	e := RTBezierLine horizontal edgeFrom: e1 to: e2.	v add: e.	"	^ self new horizontal</body><body package="Roassal2-Shapes">vertical	"Create a vertical bezier line between the two extremities of the edge"	"	e.g.	v := RTView new.	shape := RTEllipse new size: 15; color: Color blue trans.	e1 := shape element.	e2 := shape element.	v add: e1; add: e2.	e1 @ RTDraggable.	e2 @ RTDraggable.	e := RTBezierLine vertical edgeFrom: e1 to: e2.	v add: e.	"	^ self new vertical</body></methods><methods><class-id>Roassal2.RTSVGPathBezierLine</class-id> <category>public</category><body package="Roassal2-Shapes">trachelShapeFor: anEdge	| trachelShape realControllingElements |	trachelShape := TRSVGPath new.	self updateFor: anEdge trachelShape: trachelShape.		realControllingElements := controllingElements rtValue: anEdge. 	realControllingElements do: [ :e | e addConnectedEdge: anEdge ].	^ trachelShape</body></methods><methods><class-id>Roassal2.RTSVGPathBezierLine</class-id> <category>rendering</category><body package="Roassal2-Shapes">updateFor: edge trachelShape: trachelShape	trachelShape resetPath. 	trachelShape strokePaint: (self colorFor: edge).	trachelShape borderWidth: (self widthFor: edge).	trachelShape path: (self getSVGPath: edge).	trachelShape strokePaint: (self colorFor: edge).	trachelShape fillColor:(Color white alpha: 0).</body></methods><methods><class-id>Roassal2.RTSVGPathBezierLine</class-id> <category>as yet unclassified</category><body package="Roassal2-Shapes">getSVGPath: anEdge	| from to mid   p realControllingElements |		from := anEdge from position.	to := anEdge to position.		realControllingElements := controllingElements rtValue: anEdge.		mid := from.	p := 'M ', from x asString,' ', from y asString.			realControllingElements allButLastDo: [ :c | 		mid := (c position x +  ((realControllingElements after:c) position x - c position x /2))@(c position y +  ((realControllingElements after:c) position y - c position y /2)).		p := p, ' Q ', c position x asString, ' ', c position y asString, ' ', mid x asString, ' ', mid y asString.	 			 ].		p := p, ' Q ', realControllingElements last position x asString, ' ', realControllingElements last position y asString, ' ', to x asString, ' ', to y asString.			^ p</body></methods><methods><class-id>Roassal2.RTLabel</class-id> <category>accessing</category><body package="Roassal2-Shapes">fontName: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	"Set the font name used by the label. You can check the expression		FontChooser new fontListStrings.	to know the different font installed on the system"	self fontNameElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">fontNameElement: aValueOrABlock	fontName := aValueOrABlock</body><body package="Roassal2-Shapes">height: aValueOrAOneArgBlock	"Set the height of the label"	"aValueOrAOneArgBlock is applied on the object model"	self heightElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">heightElement: aValueOrABlock	height := aValueOrABlock</body><body package="Roassal2-Shapes">text: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self textElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">textElement: aStringOrABlock	text := aStringOrABlock</body></methods><methods><class-id>Roassal2.RTLabel</class-id> <category>trachel shape production</category><body package="Roassal2-Shapes">trachelShapeForMultiLine: anElement	| lines s lbl txt aColor fontSize |	aColor := self colorFor: anElement.	fontSize := self heightFor: anElement.		txt := self textFor: anElement.	txt := txt copyReplaceAll: String tab with: '    '.	lines := txt lines.	 	s := TRCompositeShape new.	lines doWithIndex: [ :l :index | 		lbl := TRLabelShape new text: l.		lbl color: aColor.		lbl fontSize: fontSize.		s addShape: lbl " translateBy: 0 @ (index * fontSize)."	].	s verticalAndLeft."	s := TRCompositeShape new.	lines reverse do: [ :l | 		lbl := TRLabelShape new text: l.		lbl color: aColor.		lbl fontSize: fontSize.				s shape1: lbl offset: lbl width / 2 @ 0. 				n := TRCompositeShape new.		n shape2: s offset: 0 @ 20.		s := n ]."	"s offset2: s encompassingRectangle extent negated / 2."	^ s</body><body package="Roassal2-Shapes">trachelShapeForOneLine: anElement	|  shape |		shape := TRLabelShape new.	shape text: (self textFor: anElement);			color: (self colorFor: anElement);			position: anElement position;			fontSize: (self heightFor: anElement);			fontName: (self fontNameFor: anElement).	^ shape</body></methods><methods><class-id>Roassal2.RTLabel</class-id> <category>rendering</category><body package="Roassal2-Shapes">fontNameFor: element	^ (fontName rtValue: element) asString</body><body package="Roassal2-Shapes">heightFor: element	^ height rtValue: element</body><body package="Roassal2-Shapes">textFor: element	^ (text rtValue: element) asString</body><body package="Roassal2-Shapes">updateFor: anElement trachelShape: trachelShape		| c s txt   |	trachelShape isNil ifTrue: [ ^ self ].	s := nil.	c := self colorFor: anElement.	trachelShape 		color: c;		position: anElement position.	txt := self textFor: anElement.	trachelShape 		text: txt on: anElement position;		rotateByDegrees: (self rotationFor: anElement);		scaleBy: (self scaleFor: anElement)</body><body package="Roassal2-Shapes">widthFor: anElement	^ TRLabelShape widthOfText: (self textFor: anElement) fontName: fontName fontSize: (self heightFor: anElement)</body></methods><methods><class-id>Roassal2.RTLabel</class-id> <category>configuration</category><body package="Roassal2-Shapes">defaultColor	^ self class defaultColor</body></methods><methods><class-id>Roassal2.RTLabel</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeFor: anElement	| c txt lines    |	c := self colorFor: anElement.	txt := self textFor: anElement.	lines := txt lines.	^ lines size &lt;= 1		ifTrue: [ self trachelShapeForOneLine: anElement ]		ifFalse: [ self trachelShapeForMultiLine: anElement ]</body></methods><methods><class-id>Roassal2.RTLabel</class-id> <category>instance creation</category><body package="Roassal2-Shapes">defaultText	^ [ :e | e model asString ]</body></methods><methods><class-id>Roassal2.RTLabel</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	text := self defaultText.	height := TRLabelShape defaultFontSize.	fontName := TRLabelShape defaultFamilyFontName</body></methods><methods><class-id>Roassal2.RTLabel class</class-id> <category>configuration</category><body package="Roassal2-Shapes">defaultColor	^ Color gray</body></methods><methods><class-id>Roassal2.RTLabel class</class-id> <category>public</category><body package="Roassal2-Shapes">text: aBlockOrValueOrSymbol	^ self new text: aBlockOrValueOrSymbol</body></methods><methods><class-id>Roassal2.RTExtensibleLabel</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeFor: anElement	|  shape |		shape := TRExtensibleLabelShape new.	shape text: (self textFor: anElement);			color: (self colorFor: anElement);			position: anElement position;			fontSize: (self heightFor: anElement).	^ shape</body></methods><methods><class-id>Roassal2.RTLazyInteraction</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: anElement	"postpone initialization if the element is not yet added to the view"	anElement view		ifNil: [ anElement				addCallback: (TRAddedCallback block: [ :evt | self lazyInitializeElement: anElement ]) ]		ifNotNil: [ self lazyInitializeElement: anElement ]</body></methods><methods><class-id>Roassal2.RTLazyInteraction</class-id> <category>initialization</category><body package="Roassal2-Interactions">lazyInitializeElement: anElement	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractVerticalTreeLayout</class-id> <category>private</category><body package="Roassal2-Layouts">rearrangeByLayers: aGraph	| cursor layerDepthSize |	cursor := self topGap.	nodesByLayer do: [:eachSetOfNodes |		layerDepthSize := eachSetOfNodes inject: 0 into: [:max :eachNode | 			eachNode translateTo: (eachNode position x @ cursor ).			max max: eachNode height ].		cursor := cursor + layerDepthSize + self verticalGap ]</body></methods><methods><class-id>Roassal2.RTAbstractVerticalTreeLayout</class-id> <category>reversing</category><body package="Roassal2-Layouts">inverseAttachPoint	"Invert the attach point of all the considered edges. It is likely that all the attachpoint are the same, but we do not have a garanty"	| a |	a := RTShorterVerticalDistanceAttachPoint new.	edges		do: [ :edge | 			edge shape attachPoint: a.			edge updateFromTo ]</body><body package="Roassal2-Layouts">inverseAttachPointIfNecessary	"Inverse the attach point if the user has not used #doNotAttachPoint"	self shouldSetDefaultAttachPoint		ifTrue: [ self inverseAttachPoint ]</body><body package="Roassal2-Layouts">verticallyReverse: elements	"Vertically reverse the elements, as well as the attachpoints"	super verticallyReverse: elements.	self inverseAttachPointIfNecessary</body></methods><methods><class-id>Roassal2.RTAbstractVerticalTreeLayout</class-id> <category>hook-private</category><body package="Roassal2-Layouts">computeChildrenFor: aNode	self subclassResponsibility</body><body package="Roassal2-Layouts">layout: aNodeCollection atPoint: aPoint atLayer: aNumber	| treeSize childrenPosition x y middleOfTree |	aNodeCollection isEmpty ifTrue: [ ^ 0 ].	x := aPoint x.	y := aPoint y.	alreadyLayoutedNodes addAll: aNodeCollection.	self atLayer: aNumber add: aNodeCollection.	aNodeCollection do: [ :each | 		childrenPosition := y + each height + self verticalGap.		treeSize := each width			max: (self layout: (self computeChildrenFor: each) atPoint: x @ childrenPosition atLayer: aNumber + 1).		middleOfTree := x + (treeSize / 2.0) - (each width / 2.0).		translator translateTopLeftOf: each to: middleOfTree @ y.		x := x + treeSize + self horizontalGap.		self step ].	^ x - aPoint x - self horizontalGap</body></methods><methods><class-id>Roassal2.RTAbstractVerticalTreeLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize	super initialize.	verticalGap := 20.	horizontalGap := 3</body></methods><methods><class-id>Roassal2.RTAbstractVerticalTreeLayout</class-id> <category>default attach points</category><body package="Roassal2-Layouts">defaultAttachPoint	^ RTVerticalAttachPoint new</body></methods><methods><class-id>Roassal2.RTAbstractVerticalTreeLayout class</class-id> <category>testing</category><body package="Roassal2-Layouts">isAbstract	^ self = RTAbstractVerticalTreeLayout</body></methods><methods><class-id>Roassal2.RTTreeLayout</class-id> <category>hook-private</category><body package="Roassal2-Layouts">computeChildrenFor: aNode	^ self childrenFor: aNode except: alreadyLayoutedNodes</body></methods><methods><class-id>Roassal2.RTReversedTreeLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doPost: elements	| g hauteur |	g := elements asGroup.	edges do: [ :edge | edge shape attachPoint: (RTShorterVerticalDistanceAttachPoint new ) ].	hauteur := g extent y.	elements do: [ :el | el translateTo: el position x @ (hauteur - el position y) ].</body></methods><methods><class-id>Roassal2.RTAbstractLineLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">alignBottom		alignment := #bottom</body><body package="Roassal2-Layouts">alignCenter	"Make the element centered"	alignment := #center</body><body package="Roassal2-Layouts">alignLeft		alignment := #left</body><body package="Roassal2-Layouts">alignRight		alignment := #right</body><body package="Roassal2-Layouts">alignTop		alignment := #top</body><body package="Roassal2-Layouts">alignment		^alignment</body><body package="Roassal2-Layouts">alignment: anObject		alignment := anObject</body><body package="Roassal2-Layouts">gapSize		^gapSize</body><body package="Roassal2-Layouts">gapSize: aNumber	gapSize := aNumber. " This value is never used actually "		verticalGap := 2 * aNumber.	horizontalGap := 2 * aNumber</body><body package="Roassal2-Layouts">horizontalGap		^horizontalGap</body><body package="Roassal2-Layouts">horizontalGap: anInteger		horizontalGap := anInteger</body><body package="Roassal2-Layouts">verticalGap		^verticalGap</body><body package="Roassal2-Layouts">verticalGap: anInteger		verticalGap := anInteger</body></methods><methods><class-id>Roassal2.RTAbstractLineLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize		super initialize.	verticalGap := 10.	horizontalGap := 10.	horizontallyStretchable := false.	verticallyStretchable := false</body></methods><methods><class-id>Roassal2.RTAbstractLineLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">deltaFor: aNodeFigure		^self subclassResponsibility</body><body package="Roassal2-Layouts">doCenter: aGraph	self subclassResponsibility</body><body package="Roassal2-Layouts">doExecute: elements 	| pointer delta |	horizontallyStretchable ifTrue: 		[ self doStretchHorizontal: elements ].	verticallyStretchable ifTrue: 		[ self doStretchVertical: elements ].	pointer := self positionOriginalPointer: elements.	elements do: 		[ :element |		delta := self deltaFor: element.		translator translateTopLeftOf: element to: pointer - delta.		pointer := self 					movePointer: pointer					accordingToFigure: element.		self step ].</body><body package="Roassal2-Layouts">doStretchHorizontal: aCollectionOfElements 	self subclassResponsibility</body><body package="Roassal2-Layouts">doStretchVertical: aCollectionOfElements 	self subclassResponsibility</body><body package="Roassal2-Layouts">movePointer: pointer accordingToFigure: aNodeFigure		self subclassResponsibility</body><body package="Roassal2-Layouts">positionOriginalPointer: aGraph		^self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractLineLayout</class-id> <category>testing</category><body package="Roassal2-Layouts">horizontallyStretchable	^ horizontallyStretchable</body><body package="Roassal2-Layouts">verticallyStretchable	^ verticallyStretchable</body></methods><methods><class-id>Roassal2.RTAbstractLineLayout</class-id> <category>configuration</category><body package="Roassal2-Layouts">center	self alignment: #center</body><body package="Roassal2-Layouts">stretch	horizontallyStretchable := verticallyStretchable := true</body><body package="Roassal2-Layouts">stretchHorizontally	horizontallyStretchable := true</body><body package="Roassal2-Layouts">stretchVertically	verticallyStretchable := true</body></methods><methods><class-id>Roassal2.RTAbstractLineLayout class</class-id> <category>instance creation</category><body package="Roassal2-Layouts">withGap: anInteger		^(self new)		gapSize: anInteger;		yourself</body></methods><methods><class-id>Roassal2.RTAbstractLineLayout class</class-id> <category>testing</category><body package="Roassal2-Layouts">isAbstract	^ self name = #RTAbstractLineLayout</body></methods><methods><class-id>Roassal2.RTHorizontalLineLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">deltaFor: aNodeFigure		| delta |	delta := 0.	self alignment == #bottom ifTrue: [delta := aNodeFigure height].	self alignment == #center ifTrue: [delta := aNodeFigure height / 2.0].	^0 @ delta</body><body package="Roassal2-Layouts">doCenter: elements  	| midTallest step |	midTallest := 0.	midTallest := elements nodes 		inject: 0		into: [ :m :el | m max: (el bounds height )].	midTallest := midTallest / 2.	elements nodes do: [ :node | 		step := 0 @ (midTallest - (node bounds height / 2)) asInteger.		node bounds origin: (node bounds origin + step).		node bounds corner: (node bounds corner + step).	]</body><body package="Roassal2-Layouts">doStretchHorizontal: aCollectionOfElements  	| parent parentBounds addedWidth parentBoundsWidth runningIndex newWidth |	aCollectionOfElements isEmpty ifTrue: [ ^ self "nothing to do" ].	parent := aCollectionOfElements anyOne parent.	parent isView ifTrue: [ ^ self "ROView does not have bounds" ].	parentBounds := parent bounds.	addedWidth := aCollectionOfElements		inject: 0		into: [ :m :el | m + el width ].	parentBoundsWidth := parentBounds width."	parentBoundsWidth := parentBoundsWidth - ((aCollectionOfElements size - 1) * horizontalGap) - (2 * horizontalOutGap)."			runningIndex := 0.	parentBounds width &gt; addedWidth		ifTrue: [ aCollectionOfElements do: [ :element | 						newWidth := (element width * parentBoundsWidth / addedWidth) asInteger.						element width: newWidth.						runningIndex := runningIndex + newWidth + horizontalGap ] ]</body><body package="Roassal2-Layouts">doStretchVertical: aCollectionOfElements  	| parent parentBounds |	aCollectionOfElements isEmpty ifTrue: [ ^ self "nothing to do" ].	parent := aCollectionOfElements anyOne parent.	parent isView ifTrue: [ ^ self "ROView does not have bounds" ].	parentBounds := parent bounds.	aCollectionOfElements do: [ :element | 		element height: (parentBounds height) ]</body><body package="Roassal2-Layouts">movePointer: pointer accordingToFigure: element		^ (pointer x + element width + self horizontalGap) @ pointer y</body><body package="Roassal2-Layouts">positionOriginalPointer: elements 	| maxHeight delta |	delta := 0.	self alignment == #bottom ifTrue: 		[ maxHeight := elements maxValue: #height.		delta := maxHeight ].	self alignment == #center ifTrue: 		[ maxHeight := elements maxValue: #height.		delta := maxHeight / 2.0 ].	^ (0) @ ((0) + delta)</body></methods><methods><class-id>Roassal2.RTHorizontalLineLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize		super initialize.	self alignTop</body></methods><methods><class-id>Roassal2.RTTextWord</class-id> <category>accessing</category><body package="Roassal2-Builder-TextBuilder">interval	^ interval</body><body package="Roassal2-Builder-TextBuilder">interval: aCollection 	interval := aCollection</body><body package="Roassal2-Builder-TextBuilder">text	^ text</body><body package="Roassal2-Builder-TextBuilder">text: aString 	text := aString</body></methods><methods><class-id>Roassal2.RTDummyNode</class-id> <category>accessing</category><body package="Roassal2-Layouts">edge		^edge</body><body package="Roassal2-Layouts">edge: anEdge		edge := anEdge</body><body package="Roassal2-Layouts">extent	^ self height @ self width</body><body package="Roassal2-Layouts">height		^0</body><body package="Roassal2-Layouts">position	^ 0 @ 0</body><body package="Roassal2-Layouts">signalUpdate	"do nothing"</body><body package="Roassal2-Layouts">slot: anIndex</body><body package="Roassal2-Layouts">translateBy: apoint	"do nothing"</body><body package="Roassal2-Layouts">translateTo: aPoint		"edge index: index point: aPoint"</body><body package="Roassal2-Layouts">view	^ RTView new</body><body package="Roassal2-Layouts">width		^0</body></methods><methods><class-id>Roassal2.RTDummyNode class</class-id> <category>instance creation</category><body package="Roassal2-Layouts">on: anEdge slot: anIndex		^(self new)		edge: anEdge;		slot: anIndex;		yourself</body></methods><methods><class-id>Roassal2.RTSVGArc</class-id> <category>utils</category><body package="Roassal2-Exporter-SVG">getPointFrom: aCenter angle: anAngle radius: aNumber	|x y|	x := (aCenter x + (anAngle cos * aNumber)) rounded.	y := (aCenter y + (anAngle sin * aNumber)) rounded.	^  x@y</body><body package="Roassal2-Exporter-SVG">makePositive: anAngle	| result |	anAngle &lt; 0		ifTrue: [ result := anAngle + 360 ]		ifFalse: [ result := anAngle ].	^ result</body><body package="Roassal2-Exporter-SVG">toRadian: anAngle	| result |	result := Float pi * anAngle / 180.	^ result</body></methods><methods><class-id>Roassal2.RTSVGArc</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addOn: stream using: aSVGVisitor	aSVGVisitor names at: self element put: self id.	self openDef: stream.	self addPath: stream.	self startStyle: stream.	self addFillColor: stream.	self closeTag: stream.	self startClass: stream.	self closeTag: stream.	self addExternalInteractions: aSVGVisitor.	self closeDef: stream.</body><body package="Roassal2-Exporter-SVG">addPath: stream	| aAngle bAngle xAngle i e xcos xsin acos asin bcos bsin c b|	aAngle := self alphaAngle degreesToRadians.	bAngle := self betaAngle degreesToRadians.	i := self innerRadius.	e := self outterRadius.	xAngle := (aAngle + bAngle) /2.	xcos := xAngle cos.	xsin := xAngle sin negated.	acos := aAngle cos.	asin := aAngle sin negated.	bcos := bAngle cos.	bsin := bAngle sin negated.		c := self center.	b := [ :a | a asFloat asString ].	stream		nextPutAll: 'd="M ',(b value: i*acos+c x),' ',(b value: i*asin + c y);		nextPutAll: ' L ',(b value: e*acos+c x),' ',(b value: e*asin+c y);		nextPutAll: ' A ',(b value: e),' ',(b value: e), ' 0 0 0 ', (b value: e*xcos+c x),' ',(b value: e*xsin+c y);		nextPutAll: ' A ',(b value: e),' ',(b value: e), ' 0 0 0 ', (b value: e*bcos+c x),' ',(b value: e*bsin+c y);		nextPutAll: ' L ',(b value: i * bcos+c x),' ',(b value: i*bsin + c y);		nextPutAll: ' A ',(b value: i),' ',(b value: i), ' 0 0 1 ', (b value: i*xcos+c x),' ',(b value: i*xsin+c y);		nextPutAll: ' A ',(b value: i+c x),' ',(b value: i+c y), ' 0 0 1 ', (b value: i*acos+c x),' ',(b value: i*asin+c y);		nextPutAll: ' Z" '.</body></methods><methods><class-id>Roassal2.RTSVGArc</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">alphaAngle	^ alphaAngle</body><body package="Roassal2-Exporter-SVG">alphaAngle: anObject	alphaAngle := anObject</body><body package="Roassal2-Exporter-SVG">betaAngle	^ betaAngle</body><body package="Roassal2-Exporter-SVG">betaAngle: anObject	betaAngle := anObject</body><body package="Roassal2-Exporter-SVG">center	^ center</body><body package="Roassal2-Exporter-SVG">center: anObject	center := anObject</body><body package="Roassal2-Exporter-SVG">element: anElement center: aPoint r1: iRadius r2: oRadius aAngle: aAngle bAngle: bAngle color: aColor	self element: anElement.	self center: aPoint.	self innerRadius: iRadius.	self outterRadius: oRadius.	self alphaAngle: aAngle.	self betaAngle: bAngle.	self fillColor: aColor.</body><body package="Roassal2-Exporter-SVG">innerRadius	^ innerRadius</body><body package="Roassal2-Exporter-SVG">innerRadius: anObject	innerRadius := anObject</body><body package="Roassal2-Exporter-SVG">outterRadius	^ outterRadius</body><body package="Roassal2-Exporter-SVG">outterRadius: anObject	outterRadius := anObject</body></methods><methods><class-id>Roassal2.RTSVGArc</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	self type: 'path'.	self label: 'arc'</body></methods><methods><class-id>Roassal2.RTAbstractGrapher</class-id> <category>public - accessing</category><body package="Roassal2-Builder-Grapher-Core">extent	^ extent</body><body package="Roassal2-Builder-Grapher-Core">extent: aPoint	"Set the size of the graph"	extent := aPoint</body><body package="Roassal2-Builder-Grapher-Core">maxX	^ maxX</body><body package="Roassal2-Builder-Grapher-Core">maxX: aNumber	"	Set the maximum value for the X-axis.	Here is an example:	| b ds |	b := RTGrapher new.	ds := RTData new.	ds points: #(2 3 4).	b add: ds.	b maxX: 10.	b		Note that the provided argument should be greater than 0. This is because the 0 @ 0 point is always in the graph. 	If you want to excluse the 0 @ 0 from the produced graph, we suggest you to read Section 6 (Translating the Y axis), in 	https://dl.dropboxusercontent.com/u/31543901/AgileVisualization/Grapher/0203-Grapher.html	"	maxX := aNumber</body><body package="Roassal2-Builder-Grapher-Core">maxY	^ maxY</body><body package="Roassal2-Builder-Grapher-Core">maxY: aNumber	"	Set the maximum value for the Y-axis.	Here is an example:	| b ds |	b := RTGrapher new.	ds := RTData new.	ds points: #(2 3 4).	b add: ds.	b maxY: 10.	b		Note that the provided argument should be greater than 0. This is because the 0 @ 0 point is always in the graph. 	If you want to excluse the 0 @ 0 from the produced graph, we suggest you to read Section 6 (Translating the Y axis), in 	https://dl.dropboxusercontent.com/u/31543901/AgileVisualization/Grapher/0203-Grapher.html	"	maxY := aNumber</body><body package="Roassal2-Builder-Grapher-Core">minX	^ minX</body><body package="Roassal2-Builder-Grapher-Core">minX: aNumber	"	Set the minimym value for the X-axis.	Here is an example:	| b ds |	b := RTGrapher new.	ds := RTData new.	ds points: #(2 3 4).	b add: ds.	b minX: -10.	b		Note that the provided argument should be lesser than 0. This is because the 0 @ 0 point is always in the graph. 	If you want to excluse the 0 @ 0 from the produced graph, we suggest you to read Section 6 (Translating the Y axis), in 	https://dl.dropboxusercontent.com/u/31543901/AgileVisualization/Grapher/0203-Grapher.html	"	minX := aNumber</body><body package="Roassal2-Builder-Grapher-Core">minY	^ minY</body><body package="Roassal2-Builder-Grapher-Core">minY: aNumber	"	Set the minimym value for the Y-axis.	Here is an example:	| b ds |	b := RTGrapher new.	ds := RTData new.	ds points: #(2 3 4).	b add: ds.	b minY: -10.	b		Note that the provided argument should be lesser than 0. This is because the 0 @ 0 point is always in the graph. 	If you want to excluse the 0 @ 0 from the produced graph, we suggest you to read Section 6 (Translating the Y axis), in 	https://dl.dropboxusercontent.com/u/31543901/AgileVisualization/Grapher/0203-Grapher.html	"	minY := aNumber</body></methods><methods><class-id>Roassal2.RTAbstractGrapher</class-id> <category>testing</category><body package="Roassal2-Builder-Grapher-Core">hasOrigin	^ withOrigin</body><body package="Roassal2-Builder-Grapher-Core">isXAxisDefined	"Return true is X axis has been defined"	^ axisConfigurationX notNil</body><body package="Roassal2-Builder-Grapher-Core">isYAxisDefined	"Return true is X axis has been defined"	^ axisConfigurationY notNil</body></methods><methods><class-id>Roassal2.RTAbstractGrapher</class-id> <category>private-axis</category><body package="Roassal2-Builder-Grapher-Core">axisXFrom: aPoint to: anotherPoint	"Draw the axis from aPoint to anotherPoint"	axisConfigurationX fromPoint: aPoint.	axisConfigurationX toPoint: anotherPoint.	axisConfigurationX hasMaxValueBeenManuallySet		ifFalse: [ axisConfigurationX maxValue: self maxX ].	axisConfigurationX hasMinValueBeenManuallySet 		ifFalse: [ axisConfigurationX minValue: self minX ].	axisConfigurationX axisFrom: aPoint to: anotherPoint</body><body package="Roassal2-Builder-Grapher-Core">axisYFrom: aPoint to: anotherPoint	"Draw the axis from aPoint to anotherPoint"	axisConfigurationY fromPoint: aPoint.	axisConfigurationY toPoint: anotherPoint.	axisConfigurationY maxValue: self maxY.	axisConfigurationY minValue: self minY.	axisConfigurationY axisFrom: aPoint to: anotherPoint</body></methods><methods><class-id>Roassal2.RTAbstractGrapher</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">yOffset: aNumber	yOffset := aNumber</body></methods><methods><class-id>Roassal2.RTAbstractGrapher</class-id> <category>public-axis</category><body package="Roassal2-Builder-Grapher-Core">axisX	axisConfigurationX ifNil: [		axisConfigurationX := self createAxisConfiguration ].	axisConfigurationX		tickLabelOffset: 0 @ 15.	^ axisConfigurationX</body><body package="Roassal2-Builder-Grapher-Core">axisY	axisConfigurationY ifNil: [		axisConfigurationY := self createAxisConfiguration ].	axisConfigurationY		tickLabelOffset: -30 @ 0.	^ axisConfigurationY</body></methods><methods><class-id>Roassal2.RTAbstractGrapher</class-id> <category>private - accessing</category><body package="Roassal2-Builder-Grapher-Core">decorators	^ decorators</body><body package="Roassal2-Builder-Grapher-Core">getAxisX	^ axisConfigurationX</body><body package="Roassal2-Builder-Grapher-Core">getAxisY	^ axisConfigurationY</body><body package="Roassal2-Builder-Grapher-Core">getPixelPositionOf: aPoint	"Return the position in the Roassal view of a point"	| anX anY |	anX := RTMetricNormalizer new		getValue: aPoint x min: 0 max: self extent x minValue: minX maxValue: maxX.	anY := RTMetricNormalizer new		getValue: aPoint y min: 0 max: self extent y negated minValue: minY maxValue: maxY.				^ anX @ anY</body><body package="Roassal2-Builder-Grapher-Core">getPositionFromPixelPosition: aPoint	"Return the position in the graph from a position in the Roassal view of a point"	| anX anY |	anX := RTMetricNormalizer new		getValue: aPoint x min: minX max: maxX minValue: 0 maxValue: self extent x.	anY := RTMetricNormalizer new		getValue: aPoint y min: minY max: maxY negated minValue: 0 maxValue: self extent y.				^ anX @ anY negated</body></methods><methods><class-id>Roassal2.RTAbstractGrapher</class-id> <category>utility</category><body package="Roassal2-Builder-Grapher-Core">adjustXAxisIfNecessary	"Move the title below the X axis."	self getAxisX numberOfLabels = 0		ifTrue: [ self getAxisX titlePosition: (0 @ -20) ]		ifFalse: [ self getAxisX titlePosition: (0 @ -30) ].</body><body package="Roassal2-Builder-Grapher-Core">centralPoint	"Return the position in the view to have the 0 @ 0"	^ self getPixelPositionOf: 0 @ 0</body><body package="Roassal2-Builder-Grapher-Core">createAxisConfiguration	| newAxis |	newAxis := RTAxisConfiguration new.	newAxis builder: self.	^ newAxis</body><body package="Roassal2-Builder-Grapher-Core">defineAxesIfNecessary		self isXAxisDefined ifFalse: [ self axisX ].	self isYAxisDefined ifFalse: [ self axisY ].</body><body package="Roassal2-Builder-Grapher-Core">renderAllDecoratorsBehind	(decorators select: #isBehind) do: [ :aPlugin | aPlugin builder: self; render ]</body><body package="Roassal2-Builder-Grapher-Core">renderAllDecoratorsInFront	(decorators select: #isInFront) do: [ :aPlugin | aPlugin builder: self; render ]</body><body package="Roassal2-Builder-Grapher-Core">renderAxis	| center yPlus yStart xStart |	center := self centralPoint.	self adjustXAxisIfNecessary.	yStart := center x @ 0.	xStart := 0 @ center y.	withOrigin		ifFalse: [ (0 between: minX and: maxX)				ifFalse: [ yStart := 0 @ 0 ].			(0 between: minY and: maxY)				ifFalse: [ xStart := 0 @ 0 ] ].	yPlus := (yOffset ifNil: [ 0 ]) negated @ 0.	self axisYFrom: yStart + yPlus to: yStart + (0 @ extent y negated) + yPlus.	self axisXFrom: xStart to: xStart + (extent x @ 0)</body></methods><methods><class-id>Roassal2.RTAbstractGrapher</class-id> <category>public</category><body package="Roassal2-Builder-Grapher-Core">withOrigin	"The axes will always meet at 0@0"	withOrigin := true</body><body package="Roassal2-Builder-Grapher-Core">withoutOrigin	"If you have points far away from 0@0 it may be better to let the axes meet at a more closer place than 0@0."	withOrigin := false</body></methods><methods><class-id>Roassal2.RTAbstractGrapher</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	extent := 300 @ 200.	minX := 0.	minY := 0.	maxX := 0.	maxY := 0.	self withOrigin.		"Collection of decorators"	decorators := OrderedCollection new</body></methods><methods><class-id>Roassal2.RTAbstractGrapher</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">createLegendBuilder	^ RTLegendBuilder new</body><body package="Roassal2-Builder-Grapher-Core">createView	^ RTView new @ RTDraggableView</body></methods><methods><class-id>Roassal2.RTAbstractGrapher</class-id> <category>adding</category><body package="Roassal2-Builder-Grapher-Core">addDecorator: aDecorator	"Add a decorator"	decorators add: aDecorator</body></methods><methods><class-id>Roassal2.RTDynamicEqualizerGrapher</class-id> <category>accessing - computed</category><body package="Roassal2-Builder-Grapher-Core">numberOfMetrics	^ metrics size</body></methods><methods><class-id>Roassal2.RTDynamicEqualizerGrapher</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	self defineAxesIfNecessary.	self renderAxis.</body></methods><methods><class-id>Roassal2.RTDynamicEqualizerGrapher</class-id> <category>examples</category><body package="Roassal2-Builder-Grapher-Core">example01	"	self new example01	"	| b |	b := RTDynamicEqualizerGrapher new. 	b maxY: 20.	b minY: -20.	b addName: 'X1' metric: [ :anArray | anArray first ].	b addName: 'Y1' metric: [ :anArray | anArray second ].	b addName: 'Z1' metric: [ :anArray | anArray third ].	b addName: 'X2' metric: [ :anArray | anArray fourth ].	b addName: 'Y2' metric: [ :anArray | anArray fifth ].	b addName: 'Z2' metric: [ :anArray | anArray sixth ].	b view addMenu: 'Generate' callback: [ b object: ((1 to: 6) collect: [ :ii | 40 atRandom - 20]) ].	^ b</body></methods><methods><class-id>Roassal2.RTDynamicEqualizerGrapher</class-id> <category>public - generation</category><body package="Roassal2-Builder-Grapher-Core">object: anObject	| values |	values := metrics collect: [ :tupple | tupple second rtValue: anObject ].	barElements ifNil: [ 		barElements := self elementsOn: values.		RTHorizontalLineLayout on: barElements.		view addAll: barElements.		].		RTMetricNormalizer new		elements: barElements;		normalizeHeight: #yourself min: self minY max: self maxX.			view signalUpdate</body></methods><methods><class-id>Roassal2.RTDynamicEqualizerGrapher</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	metrics := OrderedCollection new.		self axisX noLabel; noTick</body></methods><methods><class-id>Roassal2.RTDynamicEqualizerGrapher</class-id> <category>public - metrics</category><body package="Roassal2-Builder-Grapher-Core">addName: aString metric: aBlockClosureOrSymbol 	metrics add: (Array with: aString with: aBlockClosureOrSymbol)</body></methods><methods><class-id>Roassal2.RTData</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">getValuesX	^ elements collect: x</body><body package="Roassal2-Builder-Grapher-Core">getValuesY	^ elements collect: y</body><body package="Roassal2-Builder-Grapher-Core">interaction	^ interaction</body><body package="Roassal2-Builder-Grapher-Core">lineShape	^ lineBuilder</body><body package="Roassal2-Builder-Grapher-Core">numberOfPoints	"Return the number of points the dataset is representing"	^ elements size</body><body package="Roassal2-Builder-Grapher-Core">points	^ elements collect: #model</body><body package="Roassal2-Builder-Grapher-Core">points: objects	"This is an essential method.	Return the elements that have been added."	elements := dotBuilder elementsOn: objects.	^ elements</body><body package="Roassal2-Builder-Grapher-Core">shouldConnect	^ shouldConnect</body><body package="Roassal2-Builder-Grapher-Core">shouldHaveBars	"Return true if bar are used"	^ shouldHaveBars</body><body package="Roassal2-Builder-Grapher-Core">x: blockOrSymbol	blockOrSymbol isSymbol		ifTrue: [ self				xElement: [ :anElement | 					anElement model isDictionary						ifTrue: [ anElement model at: blockOrSymbol ]						ifFalse: [ blockOrSymbol rtValue: anElement model ] ] ]		ifFalse: [ self xElement: [ :anElement | blockOrSymbol rtValue: anElement model ] ]</body><body package="Roassal2-Builder-Grapher-Core">xElement: blockOrSymbol	x := blockOrSymbol</body><body package="Roassal2-Builder-Grapher-Core">y	^ y</body><body package="Roassal2-Builder-Grapher-Core">y: blockOrSymbol	blockOrSymbol isSymbol		ifTrue: [ self				yElement: [ :anElement | 					anElement model isDictionary						ifTrue: [ anElement model at: blockOrSymbol ]						ifFalse: [ blockOrSymbol rtValue: anElement model ] ] ]		ifFalse: [ self yElement: [ :anElement | blockOrSymbol rtValue: anElement model ] ]</body><body package="Roassal2-Builder-Grapher-Core">yElement: blockOrSymbol	y := blockOrSymbol</body></methods><methods><class-id>Roassal2.RTData</class-id> <category>testing</category><body package="Roassal2-Builder-Grapher-Core">isStacked	"Return true if the data is stacked"	^ self getValuesX = (1 to: self numberOfPoints)</body></methods><methods><class-id>Roassal2.RTData</class-id> <category>public - lines</category><body package="Roassal2-Builder-Grapher-Core">connect	"Connect the dot to form a connected line"	shouldConnect := true</body><body package="Roassal2-Builder-Grapher-Core">connectColor: aColor	"Draw a line between each point, of a given color"	^ self connectUsing: (RTLine new color: aColor)</body><body package="Roassal2-Builder-Grapher-Core">connectUsing: aShape	"Connect all the point, using a particular shape"	lineBuilder shape: aShape.	self connect</body></methods><methods><class-id>Roassal2.RTData</class-id> <category>public - bar shape</category><body package="Roassal2-Builder-Grapher-Core">barShape	shouldHaveBars := true.	^ super barShape</body></methods><methods><class-id>Roassal2.RTData</class-id> <category>utility</category><body package="Roassal2-Builder-Grapher-Core">adjustMinAndMaxValues	"Values are adjusted to always have 0 @ 0 in the chart"	minY &gt; 0		ifTrue: [ minY := 0 ].	maxY &lt; 0		ifTrue: [ maxY := 0 ].			minX &gt; 0		ifTrue: [ minX := 0 ].	maxX &lt; 0		ifTrue: [ maxX := 0 ].</body><body package="Roassal2-Builder-Grapher-Core">executeUserDeclaredActions	"Execute the actions on all the elements (i.e., dots)"	elementActions do: [ :act | act rtValue: elements ]</body><body package="Roassal2-Builder-Grapher-Core">renderLinesFor: elems in: aView	"Render the lines between elements if necessary"	| t l |	shouldConnect ifFalse: [ ^ self ].	t := elems first.	elems allButFirst		do: [ :tt | 			l := lineBuilder edgeFrom: t to: tt.			interaction setUpElement: l.			aView add: l.			t := tt ]</body></methods><methods><class-id>Roassal2.RTData</class-id> <category>public - dots</category><body package="Roassal2-Builder-Grapher-Core">dotShape	"Return the shape builder that is used to render a dot, i.e., a data point"	^ dotBuilder</body><body package="Roassal2-Builder-Grapher-Core">moveDotInFront	"	Make the dots placed in front of the lines (if connected). Per default, dots are behind. Here is an example.		b := RTGrapher new.	ds := RTData new.	ds dotShape color: Color red; size: 10.	ds points: (Collection withAllSubclasses copyFrom: 1 to: 10).	ds y: #numberOfMethods.	ds connectColor: Color blue. 	ds moveDotInFront.	b add: ds.	b	"	elementActions add: [ :elems |		elems pushFront ]</body><body package="Roassal2-Builder-Grapher-Core">noDot	"No dot are shown"	self dotShape rectangle size: 0</body></methods><methods><class-id>Roassal2.RTData</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">addedInBuilder: aBuilder	super addedInBuilder: aBuilder.	aBuilder shouldUseNiceLabelsForX: false</body><body package="Roassal2-Builder-Grapher-Core">renderBarChartIn: aView	| centralDot positiveElements negativeElements |	centralDot := self centralDot.		elements := barBuilder elementsOn: self points.	builder view addAll: elements.	interaction setUpElements: elements.	RTMetricNormalizer new		elements: elements;		normalizeElementX: [ :anElement | x rtValue: anElement ]			min: 0			max: builder extent x			minValue: (xScale rtValue: minX)			maxValue: (xScale rtValue: maxX)			using: xScale.	"We treat the element with a positive value"	positiveElements := elements select: [ :el | (y rtValue: el) &gt;= 0 ].	positiveElements		ifNotEmpty: [			RTMetricNormalizer new				elements: positiveElements;				normalizeElementHeight: [ :anElement | y rtValue: anElement ]					min: 0					max: builder extent y + centralDot position y					minValue: 0					maxValue: (yScale rtValue: maxY)					using: yScale ].	RTAlignment new elements: positiveElements; fixedElement: centralDot; bottom.	"TRConstraint use: centralDot alignFromBottom: positiveElements.	"			"We treat the element with a negative value"	negativeElements := elements copyWithoutAll: positiveElements.	negativeElements		ifNotEmpty: [ 			RTMetricNormalizer new				elements: negativeElements;				normalizeElementHeight: [ :anElement | y rtValue: anElement ]					min: centralDot position y negated 					max: 0					minValue: (yScale rtValue: minY)					maxValue: 0					using: yScale.			RTAlignment new elements: negativeElements; fixedElement: centralDot; top.			"TRConstraint use: centralDot alignFromTop: negativeElements "].			"We set the actions, if any"	elementActions do: [ :act | act rtValue: elements ]</body><body package="Roassal2-Builder-Grapher-Core">renderDotAndLinesIn: aView	builder view addAll: elements.	interaction setUpElements: elements.	RTMetricNormalizer new		elements: elements;		normalizeElementX: [ :anElement | x rtValue: anElement ]			min: 0			max: builder extent x			minValue: (xScale rtValue: minX)			maxValue: (xScale rtValue: maxX)			using: xScale.	RTMetricNormalizer new		elements: elements;		normalizeElementY: [ :anElement | y rtValue: anElement ]			min: 0			max: builder extent y negated			minValue: (yScale rtValue: minY)			maxValue: (yScale rtValue: maxY)			using: yScale.	self renderLinesFor: elements in: aView.	self executeUserDeclaredActions</body><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	"This is a bit ugly. Maybe having a class hierarchy would be better"	shouldHaveBars 		ifTrue: [ self renderBarChartIn: aView ]		ifFalse: [ self renderDotAndLinesIn: aView ]</body><body package="Roassal2-Builder-Grapher-Core">resetShapeBuilderForBar	super resetShapeBuilderForBar.		"Default width that compute an appropriate width"	barBuilder width: [ :object | 		(builder extent x / (self numberOfPoints * 2)) asFloat ]</body><body package="Roassal2-Builder-Grapher-Core">selectElementsForAddingBarTitle	"Return the collection of principal element for each element group.  	This principal element is used to position the title label"	^ elements</body></methods><methods><class-id>Roassal2.RTData</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	"Maybe this can be lazily done"	super initialize.	elements := #().	self stack.	self y: #yourself.	self resetMinAndMax.	self resetShapeBuilderForDot.	self resetShapeBuilderForBar.	self resetShapeBuilderForLine.	self resetInteractionBuilder.	shouldConnect := false.	shouldHaveBars := false.</body><body package="Roassal2-Builder-Grapher-Core">resetInteractionBuilder	interaction := RTDataInteractionBuilder new.	interaction dataSet: self.	interaction popup</body><body package="Roassal2-Builder-Grapher-Core">resetShapeBuilderForDot	dotBuilder := RTShapeBuilder new.	dotBuilder circle size: 5</body><body package="Roassal2-Builder-Grapher-Core">resetShapeBuilderForLine	lineBuilder := RTShapeBuilder new</body></methods><methods><class-id>Roassal2.RTData</class-id> <category>public - configuration</category><body package="Roassal2-Builder-Grapher-Core">stack	"Make all the elements from left to right"	self xElement: [ :anElement | elements indexOf: anElement ]</body></methods><methods><class-id>Roassal2.RTData</class-id> <category>obsolete</category><body package="Roassal2-Builder-Grapher-Core">histogramWithBarTitle: aBlockOrSymbol rotation: rotationInDegree color: aColor	"Obsolete: use #barChartWithBarTitle: instead"	"Draw an histogram with title"	self barShape.	elementActions add: [ :elems | 		| lbl |		elems do: [ :e |			lbl := (RTLabel new text: aBlockOrSymbol; color: aColor) elementOn: e model.			lbl rotateByDegrees: rotationInDegree.			TRConstraint move: lbl below: e.			lbl translateBy: (lbl width / -2 @ 0) + (5 @ 0).			elems anyOne view add: lbl.		] ].</body><body package="Roassal2-Builder-Grapher-Core">noAlignmentOffset	"This offset is used when a stacked bar chart is used. This alignmentOffset may be removed in case the barchart has to be aligned with other data sets, such as line charts."	"You should use this method in case you wish you combine the chart with line or dots. For example:	b := RTGrapher new.d := RTData new.d points: #(3 4 3.5).d barShape.d noAlignmentOffset.b add: d.d := RTData new.d points: #(3 4 3.5).d connectColor: Color red.b add: d.b	"	"alignmentOffset := 0"</body></methods><methods><class-id>Roassal2.RTData</class-id> <category>public - effects</category><body package="Roassal2-Builder-Grapher-Core">dotSize: metricAsBlockOrSymbol min: minValue max: maxValue using: transformation	"Set the size of the dots for each element"	elementActions add: [ :elems |		RTMetricNormalizer new			elements: elems;			normalizeSize: metricAsBlockOrSymbol min: minValue max: maxValue using: transformation ]</body><body package="Roassal2-Builder-Grapher-Core">highlightIf: aOneArgBlock using: secondOneArgBlock	"	aOneArgBlock is the a one-arg condition	If true, secondOneArgBlock is then used for the label	"	elementActions add: [ :elems |		elems do: [ :element |		(aOneArgBlock rtValue: element model) ifTrue: [ 			element @ (RTLabeled new text: [ :model | secondOneArgBlock rtValue: model ]; setAsHighlightable).		] ] ]</body></methods><methods><class-id>Roassal2.RTSelectionEvent</class-id> <category>accessing</category><body package="Roassal2-Selection">group	^ group</body><body package="Roassal2-Selection">group: g	group := g</body><body package="Roassal2-Selection">shape	^ shape</body><body package="Roassal2-Selection">shape: anObject	"Not sure whether the argument is a roassal element or not"	shape := anObject</body></methods><methods><class-id>Roassal2.RTExploraNode</class-id> <category>initialization</category><body package="Roassal2-Builder-Explora">initialize	super initialize.	directions := Dictionary new.	expansion := Dictionary new.	expanded := Dictionary new.	expandedNodes := Dictionary new.</body></methods><methods><class-id>Roassal2.RTExploraNode</class-id> <category>accessing</category><body package="Roassal2-Builder-Explora">builder: myBuilder	builder := myBuilder.</body><body package="Roassal2-Builder-Explora">element	^ element</body><body package="Roassal2-Builder-Explora">element: anElement	element := anElement.	element attributes at: #node put: self.</body><body package="Roassal2-Builder-Explora">expandedNodes	^ expandedNodes inject: #() into: [ :acc :next | (acc, (next value asArray)) ]</body><body package="Roassal2-Builder-Explora">expandedNodesOnDirection: direction	^ expandedNodes at: direction key</body><body package="Roassal2-Builder-Explora">expansion	^ expansion inject: #() into: [ :acc :next | (acc, next value) ]</body><body package="Roassal2-Builder-Explora">expansionDirections	^ directions associations</body><body package="Roassal2-Builder-Explora">expansionOnDirection: direction	^ expansion at: direction key</body><body package="Roassal2-Builder-Explora">explorationStatus: aDirection	(self isExpandableOnDirection: aDirection) ifFalse: [ ^ 'not expandable' ].	(self isExpandedOnDirection: aDirection)		ifTrue: [ ^ 'expanded' ]		ifFalse: [ ^ 'not expanded' ].</body><body package="Roassal2-Builder-Explora">iconClose	^ iconClose</body><body package="Roassal2-Builder-Explora">iconClose: anElementIcon	iconClose := anElementIcon</body><body package="Roassal2-Builder-Explora">iconOpen	^ iconOpen</body><body package="Roassal2-Builder-Explora">iconOpen: anElementIcon	iconOpen := anElementIcon</body><body package="Roassal2-Builder-Explora">id	^ id</body><body package="Roassal2-Builder-Explora">id: aNumber	id := aNumber</body><body package="Roassal2-Builder-Explora">parentNode: aNode	parentNode := aNode.</body></methods><methods><class-id>Roassal2.RTExploraNode</class-id> <category>testing</category><body package="Roassal2-Builder-Explora">checkExpansionOnDirection: aDirection	(((expandedNodes at: aDirection) collect: [ :x | x element model ]) includesAllOf: (expansion at: aDirection))		ifTrue: [ ^ self setExpandedOnDirection: aDirection ]		ifFalse: [ ^ false ]</body><body package="Roassal2-Builder-Explora">checkExpansions	directions do: [ :dir | self checkExpansionOnDirection: dir key ]</body><body package="Roassal2-Builder-Explora">isConnectedWith: aNode	^ ((element incomingEdges collect: [ :e | e from attributes at: #node ]) includes: aNode) |		((element outgoingEdges collect: [ :e | e to attributes at: #node ]) includes: aNode)</body><body package="Roassal2-Builder-Explora">isExpandable	^ (self expansion reject: [ :elem | | test |			test := (parentNode = nil) ifTrue: [nil] ifFalse: [parentNode element model].			elem = test ]) isNotEmpty</body><body package="Roassal2-Builder-Explora">isExpandableOnDirection: aDirection	^ (self expansionOnDirection: aDirection) isNotEmpty</body><body package="Roassal2-Builder-Explora">isExpanded	" Tests if the node is expanded in all its possible directions "	^ (expanded isEmpty) ifTrue: [ false ] ifFalse: [ expanded reduce: [ :x :y | x &amp; y ] ]</body><body package="Roassal2-Builder-Explora">isExpandedOnDirection: direction	^ expanded at: (direction key)</body><body package="Roassal2-Builder-Explora">setCollapsedOnDirection: aDirection	^ expanded at: aDirection key put: false</body><body package="Roassal2-Builder-Explora">setExpandedOnDirection: aDirection	^ expanded at: aDirection put: true</body><body package="Roassal2-Builder-Explora">setExpandedOnDirection: aDirection with: nodes	self setExpandedOnDirection: aDirection.	^ expandedNodes at: aDirection key put: nodes</body></methods><methods><class-id>Roassal2.RTExploraNode</class-id> <category>adding</category><body package="Roassal2-Builder-Explora">addExpansionDirection: aDirection	expanded at: aDirection key put: false.	expandedNodes at: aDirection key put: (Set new).	^ directions at: aDirection key put: aDirection value.</body><body package="Roassal2-Builder-Explora">addListenerFor: anEvent onDirection: aDirection withBlock: aBlock	| listener |		listener := element.	iconOpen ifNotNil: [ listener := (Array with: iconOpen with: iconClose) asGroup ].			self addExpansionDirection: aDirection.	self expandWithBlock: aBlock onDirection: aDirection.		listener when: anEvent do: [ :event |		RTPopup removeLastPopup.		(self isExpandedOnDirection: aDirection)			ifTrue: [ self collapseOnDirection: aDirection ]			ifFalse: [ self exploreOnDirection: aDirection ].			((builder layout rtValue: self)				translator: (RTSmoothLayoutTranslator new nbCycles: 0.25))				on: ((builder nodes collect: [ :n | n element ]) asGroup).			element view canvas signalUpdate].</body><body package="Roassal2-Builder-Explora">addToExpansion: aNode	(((expansion associations inject: #() into: [ :acc :next |		acc, (next value collect: [ :x | next key -&gt; x ]) ])			select: [ :x | x value = (aNode element model) ])				collect: [ :x| x key ])					do: [ :x | (expandedNodes at: x) add: aNode.							self checkExpansionOnDirection: x ]</body><body package="Roassal2-Builder-Explora">connectTo: aNode with: lineShape	| edge |	self assert: (aNode isKindOf: RTExploraNode).	(self isConnectedWith: aNode)		ifFalse: [			edge := RTEdge from: self element to: aNode element.			builder view add: edge + lineShape.			edge trachelShape pushBack.			self addToExpansion: aNode.			aNode addToExpansion: self.		]</body><body package="Roassal2-Builder-Explora">expandWithBlock: aBlock onDirection: aDirection	^ expansion at: aDirection key put: (aBlock value: self element model)</body></methods><methods><class-id>Roassal2.RTExploraNode</class-id> <category>action</category><body package="Roassal2-Builder-Explora">collapseOnDirection: aDirection	(self isExpandedOnDirection: aDirection)		ifTrue: [ ((self expandedNodesOnDirection: aDirection)				reject: [ :x | x = parentNode | (x id &lt; (self id))])					do: [ :elem | elem collapse ].			self setCollapsedOnDirection: aDirection ].		self removeEdgesOnDirection: aDirection.		(builder icons) ifNotNil: [			iconClose remove.			builder view add: iconOpen.		].</body><body package="Roassal2-Builder-Explora">exploreOnDirection: aDirection	| objs objectsToAdd newNodes nodesAlreadyIn objsAlreadyIn |	objs := ((builder nodes collect: [ :n | n element ]) asGroup) collect: [ :el | el model ].	objectsToAdd := self expansionOnDirection: aDirection.	objsAlreadyIn := objectsToAdd select: [ :obj | objs includes: obj ].	objectsToAdd := objectsToAdd reject: [ :obj | objs includes: obj ].		nodesAlreadyIn := (builder view elements select: [ :el | objsAlreadyIn includes: el model ])		collect: [ :elem | elem attributes at: #node ].	newNodes := objectsToAdd collect: [ :obj | builder node: obj parent: self ].		builder lastAddedNodes: newNodes.		newNodes do: [ :node |		builder view add: node element.		node element translateTo: self element position ].	(builder icons) ifNotNil: [		(newNodes select: [ :n | n isExpandable]) do: [ :node |			builder view add: node iconOpen].		iconOpen remove.		builder view add: iconClose.		].		(newNodes, nodesAlreadyIn) do: [ :el |		(aDirection value = #From)			ifTrue: [ self connectTo: el with: builder lineShape ]			ifFalse: [ el connectTo: self with: builder lineShape ] ].</body></methods><methods><class-id>Roassal2.RTExploraNode</class-id> <category>removing</category><body package="Roassal2-Builder-Explora">collapse	(self expandedNodes reject: [ :elem | elem id &lt; (self id)]) do: [ :elem |		elem collapse.	].	self remove.</body><body package="Roassal2-Builder-Explora">remove	element incomingEdges do: [ :edge |		(edge from attributes at: #node) removeExpandedNode: self. edge remove ].	element outgoingEdges do: [ :edge |		(edge to attributes at: #node) removeExpandedNode: self. edge remove ].	element remove.	(iconOpen isNotNil &amp; self isExpandable) ifTrue: [ (self isExpanded) ifTrue: [iconClose remove] ifFalse: [iconOpen remove]].	builder nodes remove: self.</body><body package="Roassal2-Builder-Explora">removeEdgesOnDirection: aDirection	| elem |	(aDirection value = #From)		ifTrue: [ element outgoingEdges do: [ :edge |				elem := edge to.				elem = (parentNode element) ifFalse: [ edge remove] ]		]		ifFalse: [ element incomingEdges do: [ :edge |				elem := edge from.				elem = (parentNode element) ifFalse: [ edge remove] ]		].</body><body package="Roassal2-Builder-Explora">removeExpandedNode: aNode	self assert: (aNode isKindOf: RTExploraNode).	directions keys do: [ :direction | 		(expandedNodes at: direction) remove: aNode ifAbsent: [] ]</body></methods><methods><class-id>Roassal2.RTVector</class-id> <category>accessing</category><body package="Roassal2-Builder-CircularMap">x	^ x</body><body package="Roassal2-Builder-CircularMap">x: cx	x := cx.</body><body package="Roassal2-Builder-CircularMap">x: cx y: cy	x := cx.	y := cy</body><body package="Roassal2-Builder-CircularMap">x: cx y: cy z: cz	x := cx.	y := cy.	z := cz</body><body package="Roassal2-Builder-CircularMap">y	^ y</body><body package="Roassal2-Builder-CircularMap">y: cy	y := cy</body><body package="Roassal2-Builder-CircularMap">z	^ z</body><body package="Roassal2-Builder-CircularMap">z: cz	z := cz</body></methods><methods><class-id>Roassal2.RTVector</class-id> <category>computing</category><body package="Roassal2-Builder-CircularMap">add: rhs	x := x + rhs x.	y := y + rhs y.	z := z + rhs z.</body><body package="Roassal2-Builder-CircularMap">cross: w	|inst |	inst := RTVector new.	inst		x: (y * w z) - (z * w y);		y: (z * w x) - (x * w z);		z: (x * w y) - (y * w x).	^ inst</body><body package="Roassal2-Builder-CircularMap">dot: w	^ (x * w x) + (y * w y) + (z * w z)</body><body package="Roassal2-Builder-CircularMap">isZero	^ ((x = 0) and: [ y = 0 ]) and: [ z = 0 ].</body><body package="Roassal2-Builder-CircularMap">lengthenBy: val	| mag |	mag := self magnitude.	self scaleBy: ((mag + val)/ mag)</body><body package="Roassal2-Builder-CircularMap">magnitude	^ ( (x * x) + (y * y) + (z * z) ) sqrt</body><body package="Roassal2-Builder-CircularMap">normalize	| mag |	mag := self magnitude.	mag = 0 ifTrue: [ ^ mag ].	x := x / mag.	y := y / mag.	z := z / mag.	^ mag.</body><body package="Roassal2-Builder-CircularMap">normalize: length	self normalize.	self scaleBy: length</body><body package="Roassal2-Builder-CircularMap">rotate: axis angle: angle	| n |	n := RTVector new x: axis x y: axis y z: axis z.	n normalize.	n scaleBy: (n dot: self).	n add: ((self - n) scaleBy: angle cos ).	n add: ((n cross: self) scaleBy: angle sin).	^ n.</body><body package="Roassal2-Builder-CircularMap">scaleBy: factor	x := x * factor.	y := y * factor.	z := z * factor.</body><body package="Roassal2-Builder-CircularMap">shortenBy: val	self lengthenBy: val negated</body></methods><methods><class-id>Roassal2.RTVector</class-id> <category>initialization</category><body package="Roassal2-Builder-CircularMap">initialize	super initialize.	x := 0.	y := 0.	z := 0.</body></methods><methods><class-id>Roassal2.RTVector</class-id> <category>arithmetic</category><body package="Roassal2-Builder-CircularMap">- w	| inst |	inst := RTVector new.	inst x: x - w x y: y - w y z: z - w z.	^ inst</body></methods><methods><class-id>Roassal2.RTSVGAbstractMarker</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addMarkerOptions: stream	self addViewBox: stream.	self addRefPosition: stream.	self addSize: stream.	self addOrientation: stream</body><body package="Roassal2-Exporter-SVG">addOn: stream using: aSVGVisitor	self openDef: stream.	self addMarkerOptions: stream.	self closeDefWithContent: stream.	self openInnerDef: stream.	self addPath: stream.	self startStyle: stream.	self addFillColor: stream.	self addStrokeColor: stream.	self addStrokeWidth: stream.	self closeTag: stream.	self closeDef: stream.	self closeFullDef: stream.</body><body package="Roassal2-Exporter-SVG">addOrientation: stream	stream nextPutAll: 'orient = "auto"' , String cr</body><body package="Roassal2-Exporter-SVG">addPath: stream	self subclassResponsibility</body><body package="Roassal2-Exporter-SVG">addRefPosition: stream	stream nextPutAll: ('refX = "&lt;1p&gt;" refY = "&lt;2p&gt;" ' expandMacrosWith: self xExtent with: (self yExtent / 2) rounded)</body><body package="Roassal2-Exporter-SVG">addSize: stream	stream nextPutAll: ('markerWidth = "&lt;1p&gt;" markerHeight = "&lt;1p&gt;" ' expandMacrosWith: size)</body><body package="Roassal2-Exporter-SVG">addViewBox: stream	stream nextPutAll: ('viewBox = "0 0 &lt;1p&gt; &lt;2p&gt;" ' expandMacrosWith: self xExtent with: self yExtent)</body><body package="Roassal2-Exporter-SVG">openInnerDef: stream	stream nextPutAll: '&lt;path '</body></methods><methods><class-id>Roassal2.RTSVGAbstractMarker</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">id	^ id</body><body package="Roassal2-Exporter-SVG">id: aid fillColor: aColor borderColor: anotherColor width: aNumber size: anotherNumber	self id: aid.	self fillColor: aColor.	self strokeColor: anotherColor.	self strokeWidth: aNumber.	self size: anotherNumber</body><body package="Roassal2-Exporter-SVG">size: anObject	size := anObject</body><body package="Roassal2-Exporter-SVG">xExtent	^ xExtent</body><body package="Roassal2-Exporter-SVG">xExtent: anObject	xExtent := anObject</body><body package="Roassal2-Exporter-SVG">yExtent	^ yExtent</body><body package="Roassal2-Exporter-SVG">yExtent: anObject	yExtent := anObject</body></methods><methods><class-id>Roassal2.RTSVGAbstractMarker</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	self type: 'marker'.	self label: 'marker'.	xExtent := 10.	yExtent := 10.</body></methods><methods><class-id>Roassal2.RTSVGArrowMarker</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addPath: stream		stream		nextPutAll: (' d="M 0 0 L &lt;1p&gt; &lt;2p&gt; L 0 &lt;1p&gt;" ' expandMacrosWith: xExtent with: ((yExtent/2) rounded)).</body></methods><methods><class-id>Roassal2.RTLabelLegendItem</class-id> <category>hooks</category><body package="Roassal2-Builder-Legend">execute	^ RTGroup new add: 			((self newLabelShape: text) elementOn: model); yourself</body></methods><methods><class-id>Roassal2.RTLabelLegendItem</class-id> <category>accessing</category><body package="Roassal2-Builder-Legend">color	^ color</body><body package="Roassal2-Builder-Legend">color: anObject	color := anObject</body><body package="Roassal2-Builder-Legend">model	^ model</body><body package="Roassal2-Builder-Legend">model: anObject	model := anObject</body><body package="Roassal2-Builder-Legend">text	^ text</body><body package="Roassal2-Builder-Legend">text: aTextOrSymbolOrBlock	text := aTextOrSymbolOrBlock</body></methods><methods><class-id>Roassal2.RTContinuousAttachPoint</class-id> <category>public</category><body package="Roassal2-AttachPoint">offsetNormalFor: anEdge	"Return the offset in case of multiple edges with the same starting and ending points"	^ (RTShorterDistanceWithOffsetAttachPoint new offset: offset) offsetNormalFor: anEdge</body></methods><methods><class-id>Roassal2.RTContinuousAttachPoint</class-id> <category>accessing</category><body package="Roassal2-AttachPoint">offset	^ offset</body><body package="Roassal2-AttachPoint">offset: anInteger	"In case fromElement and toElement have more than one edge between the same two extremities, offset is the distance between lines"	offset := anInteger</body></methods><methods><class-id>Roassal2.RTContinuousAttachPoint</class-id> <category>initialization</category><body package="Roassal2-AttachPoint">initialize	super initialize.	self deprecated: 'Use class RTBorderAttachPoint instead.'.	offset := 5</body></methods><methods><class-id>Roassal2.RTForceLayoutStepping</class-id> <category>public-configuration</category><body package="Roassal2-Animation">addStartStopButton	view canvas addMenu: 'Toggle Animation' callback: [		(view canvas hasAnimation: self)			ifTrue: [ view canvas removeAnimation: self ]			ifFalse: [ view canvas addAnimation: self ] ]</body></methods><methods><class-id>Roassal2.RTForceLayoutStepping</class-id> <category>initialization</category><body package="Roassal2-Animation">initialize	super initialize.	layout := RTForceBasedLayout new.	afterBlock := [ ]</body></methods><methods><class-id>Roassal2.RTForceLayoutStepping</class-id> <category>accessing</category><body package="Roassal2-Animation">afterBlock: aBlock	"Set a block to be evaluated at each refresh"	"Block could be [ view canvas camera focusOnCenter ]"	afterBlock := aBlock</body><body package="Roassal2-Animation">inView: aView	self view: aView.	super inView: aView</body><body package="Roassal2-Animation">layout	^ layout</body><body package="Roassal2-Animation">layout: aForceBasedLayout	"Set an instance of the class RTForceBasedLayout. 	This is useful in case the layout is initialized from outside"	self layoutWithoutPreparing: aForceBasedLayout.	view ifNotNil: 		[ self prepareLayoutFor: view ]</body><body package="Roassal2-Animation">layoutWithoutPreparing: aForceBasedLayout	"Set an instance of the class RTForceBasedLayout. 	This is useful in case the layout is initialized from outside"	layout := aForceBasedLayout.</body><body package="Roassal2-Animation">nodes	^ layout nodes</body><body package="Roassal2-Animation">nodes: elements	"Designate the collection of elements that have to be layouted"	layout 		prepareNodes: elements;		nodes: elements</body><body package="Roassal2-Animation">prepareLayoutFor: aView	layout		nodes: aView elements;		edges: aView edges;		start: aView elements</body><body package="Roassal2-Animation">view: aView	view := aView.	self prepareLayoutFor: aView</body></methods><methods><class-id>Roassal2.RTForceLayoutStepping</class-id> <category>testing</category><body package="Roassal2-Animation">hasCompleted	^ false</body></methods><methods><class-id>Roassal2.RTForceLayoutStepping</class-id> <category>actions</category><body package="Roassal2-Animation">start	view canvas signalUpdate</body><body package="Roassal2-Animation">stopAndRemove	view removeAnimation: self</body></methods><methods><class-id>Roassal2.RTForceLayoutStepping</class-id> <category>updating</category><body package="Roassal2-Animation">addEdge: anEdge	layout addEdge: anEdge</body><body package="Roassal2-Animation">addEdges: someEdges	layout addEdges: someEdges</body><body package="Roassal2-Animation">addNode: anElement	"Designate the collection of elements that have to be layouted"	layout 		addNodes: (Array with: anElement)</body><body package="Roassal2-Animation">addNodes: someElements	"Designate the collection of elements that have to be layouted"	layout 		addNodes: someElements</body><body package="Roassal2-Animation">removeAllEdges	layout removeAllEdges</body></methods><methods><class-id>Roassal2.RTForceLayoutStepping</class-id> <category>refreshing</category><body package="Roassal2-Animation">refresh	layout step.	view ifNotNil: [ view canvas signalUpdate ].	afterBlock value</body></methods><methods><class-id>Roassal2.RTSpringLayoutStepping</class-id> <category>readme</category><body package="Roassal2-Animation">README"OBSOLETE CLASS!!!Use RTForceLayoutStepping instead"</body></methods><methods><class-id>Roassal2.RTXPSVGAnimation</class-id> <category>public</category><body package="Roassal2-Experimental">curvesFor: index	| t res acurves bcurves c2 |	t := animatedValue value.	acurves := curves0 at: index.	bcurves := curves1 at: index .	res := Array new: acurves size.		acurves doWithIndex: [ :c1 :i | 		c2 := bcurves at: i.		res at: i put: (Array with: c1 first with: 			(c1 second collect: [:point | point interpolateTo: c2 second first at: t]) )		].		^ res</body><body package="Roassal2-Experimental">on: elements during: seconds path: aBlock		| time |	element := (elements isKindOf: RTGroup)		ifTrue: [ elements] 		ifFalse: [ RTGroup new add: elements ].	curves0 := element collect: [ :e | e trachelShape curves ].	curves1 := element collect: [ :e | e trachelShape path:( aBlock rtValue: e); curves.].	time := curves0 size = curves1 size ifTrue: [ 0 max: seconds ] ifFalse: [ 0 ].	animatedValue := TRVIAnimatedValue new		evaluator: [ :t | t ];		timer: (TRVITimer new cycleLength: time);		yourself.</body></methods><methods><class-id>Roassal2.RTXPSVGAnimation</class-id> <category>actions</category><body package="Roassal2-Experimental">start	animatedValue start</body></methods><methods><class-id>Roassal2.RTXPSVGAnimation</class-id> <category>refreshing</category><body package="Roassal2-Experimental">refresh	element doWithIndex: [ :e :i |		e trachelShape			curves: (self curvesFor: i);			computePath.		].	element signalUpdate.</body></methods><methods><class-id>Roassal2.RTXPSVGAnimation</class-id> <category>testing</category><body package="Roassal2-Experimental">hasCompleted	^ animatedValue hasCompleted</body></methods><methods><class-id>Roassal2.RTNestingBehavior</class-id> <category>utility</category><body package="Roassal2-Core">centerOn: backElement elements: elements	"Public method. This method does the following actions:		- resize the backElement to encompasse all the elements		- translate all the elements on top of backElement		- perform a layout if one is set"	self centerOnTrachelShape: backElement trachelShape elements: elements</body><body package="Roassal2-Core">centerOnTrachelShape: trachelShape elements: elements	"Public method. This method does the following actions:		- resize the backElement to encompasse all the elements		- translate all the elements on top of backElement		- perform a layout if one is set"	| encompassingRectangle off padding |	padding := 5.	encompassingRectangle := elements encompassingRectangle.	trachelShape extent: (encompassingRectangle width + (padding * 2)) @ (encompassingRectangle height + (padding * 2)).	off := trachelShape encompassingRectangle center - encompassingRectangle center. 	off := off asIntegerPoint.	elements do: [ :e | e translateBy: off ].</body><body package="Roassal2-Core">makeElements: elements draggableBy: backElement	^ (backElement isKindOf: TRShape)		ifTrue: [ self makeElements: elements draggableByTrachelShape: backElement ]		ifFalse: [ self makeElements: elements draggableByTrachelShape: backElement trachelShape ]</body><body package="Roassal2-Core">makeElements: elements draggableByTrachelShape: trachelShape	| callback |	callback := TRTranslationCallback block: [ :shape :step | elements do: [ :e | e translateBy: step ] ].	trachelShape addCallback: callback</body><body package="Roassal2-Core">resize: backElement bounds: encompassingRectangle	"it translates backElement, but does not trigger events."	| newRec padding |	padding := 5.	newRec := (encompassingRectangle topLeft - (padding @ padding)) extent: 					((encompassingRectangle width + (padding * 2)) @ 					 (encompassingRectangle height + (padding * 2))).	backElement		extent: (encompassingRectangle width + (padding * 2)) @ (encompassingRectangle height + (padding * 2)).		backElement translateTo: encompassingRectangle center</body><body package="Roassal2-Core">resize: backElement for: elements	self resize: backElement bounds: elements encompassingRectangle.</body></methods><methods><class-id>Roassal2.RTNestingBehavior</class-id> <category>hooks</category><body package="Roassal2-Core">on: backElement setNested: elements	"Override this method to express a particular behavior"	self centerOn: backElement elements: elements.	self makeElements: elements draggableBy: backElement.	self resize: backElement for: elements</body></methods><methods><class-id>Roassal2.RTTopLeftBehavior</class-id> <category>hooks</category><body package="Roassal2-Core">on: backElement setNested: elements	"Override this method to express a particular behavior"	self makeElements: elements draggableBy: backElement.	self resize: backElement for: elements</body></methods><methods><class-id>Roassal2.RTTopLeftBehavior</class-id> <category>utility</category><body package="Roassal2-Core">makeElements: elements draggableByTrachelShape: trachelShape	| callback |	callback := TRTranslationCallback block: [ :shape :step | 		| topLeft |		topLeft := trachelShape encompassingRectangle topLeft.		elements translateTo: topLeft + (elements extent / 2) ].	trachelShape addCallback: callback</body></methods><methods><class-id>Roassal2.RTAbstractElementHandling</class-id> <category>private - configuration</category><body package="Roassal2-Core">ifNoFixedElementThen: aBlock	fixedElement ifNil: [ aBlock value  ]</body></methods><methods><class-id>Roassal2.RTAbstractElementHandling</class-id> <category>accessing</category><body package="Roassal2-Core">elements	^ elements</body><body package="Roassal2-Core">elements: someElements	elements := someElements asGroup</body><body package="Roassal2-Core">fixedElement	^ fixedElement</body><body package="Roassal2-Core">fixedElement: anElement	"Designate a particular element for which all the other will be aligned against"	fixedElement := anElement</body></methods><methods><class-id>Roassal2.RTAbstractVerticalValuesDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">labelColor	^ labelColor</body><body package="Roassal2-Builder-Grapher-Decorators">labelColor: aColor	labelColor := aColor</body><body package="Roassal2-Builder-Grapher-Decorators">render	| position offset tickSize |	offset := -30 @ 0.	tickSize := 5.	values		do: [ :aValue | 			position := builder getPixelPositionOf: 0 @ aValue.			self label: (labelConversion rtValue: aValue) asString on: position + offset color: self labelColor.			self shape line color: self labelColor.			self lineFrom: position to: position - (tickSize @ 0) ]</body></methods><methods><class-id>Roassal2.RTAbstractVerticalValuesDecorator</class-id> <category>configuration</category><body package="Roassal2-Builder-Grapher-Decorators">blue	self labelColor: Color blue</body><body package="Roassal2-Builder-Grapher-Decorators">defaultLabelColor	^ Color gray</body><body package="Roassal2-Builder-Grapher-Decorators">green	self labelColor: Color green</body><body package="Roassal2-Builder-Grapher-Decorators">red	self labelColor: Color red</body></methods><methods><class-id>Roassal2.RTAbstractVerticalValuesDecorator</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Decorators">initialize	super initialize.	labelColor := self defaultLabelColor</body></methods><methods><class-id>Roassal2.RTVerticalAllValuesDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">render		self addAll: self datasetValues asSet. 	super render.</body></methods><methods><class-id>Roassal2.RTNLinearNormalizer</class-id> <category>private</category><body package="Roassal2-ColorNormalizerOBSOLETE">maximumValue: anEntity	"Returns the largest value that the color metric provides"		maximumValue isNil		ifTrue:			[maximumValue := (self context rtValue: anEntity)				inject: 1				into:					[:maximum :entity | maximum max: (self command rtValue: entity)]].	^maximumValue</body><body package="Roassal2-ColorNormalizerOBSOLETE">minimumValue: anEntity	"Returns the smallest value that the color metric provides"		minimumValue isNil		ifTrue:			[minimumValue := (self context rtValue: anEntity)				inject: 100000000000 				into:					[:minimum :entity | minimum min: (self command rtValue: entity)]].	^minimumValue</body></methods><methods><class-id>Roassal2.RTNLinearNormalizer</class-id> <category>initialize-release</category><body package="Roassal2-ColorNormalizerOBSOLETE">initialize	"Initialize a newly created instance. This method must answer the receiver."		super initialize.	maximumValue := nil</body></methods><methods><class-id>Roassal2.RTNLinearNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizerOBSOLETE">command: aBlock		super command: aBlock.	self flushCache</body><body package="Roassal2-ColorNormalizerOBSOLETE">context		^context</body><body package="Roassal2-ColorNormalizerOBSOLETE">context: aContext		context := aContext.	self flushCache</body><body package="Roassal2-ColorNormalizerOBSOLETE">flushCache		maximumValue := nil</body></methods><methods><class-id>Roassal2.RTNLinearNormalizer class</class-id> <category>instance creation</category><body package="Roassal2-ColorNormalizerOBSOLETE">inContext: aCollection		^self inContext: aCollection withCommand: #yourself</body><body package="Roassal2-ColorNormalizerOBSOLETE">inContext: aCollection withCommand: aBlock		^(self new)		context: aCollection;		command: aBlock;		yourself</body></methods><methods><class-id>Roassal2.RTHorizontalLineDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">render		| from to |	values do: [ :aValue |		from := builder getPixelPositionOf: builder minX @ aValue.		to := builder getPixelPositionOf: builder maxX @ aValue.		self lineFrom: from to: to ]</body></methods><methods><class-id>Roassal2.Roassal2Inspector</class-id> <category>actions</category><body package="Roassal2-Visualworks">buildDiveMenu	^UI.Menu new</body><body package="Roassal2-Visualworks">centerScaled	self roassalView canvas focusOnCenterScaled.	self roassalView signalUpdate.</body><body package="Roassal2-Visualworks">copyStateTo: anInspector</body><body package="Roassal2-Visualworks">moreOptions	| point |	point := (self builder componentAt: #more) component absOrigin + self builder window globalOrigin+ (0@18).	self class moreOptionsWith: roassalView atPoint: point</body><body package="Roassal2-Visualworks">view	view ifNil:[ 		view := self roassalView canvas buildMorph. ].	^view</body><body package="Roassal2-Visualworks">zoomIn	RTZoomInMove on: self roassalView.</body><body package="Roassal2-Visualworks">zoomOut	RTZoomOutMove on: self roassalView</body></methods><methods><class-id>Roassal2.Roassal2Inspector</class-id> <category>initialize-release</category><body package="Roassal2-Visualworks">initialize	super initialize.	^self</body><body package="Roassal2-Visualworks">installedWith: aBuilder	super installedWith: aBuilder.	TRApplicationModel postOpenWith: aBuilder and: self selector: #view.	self centerScaled.	[	(Delay forMilliseconds: 20) wait.	aBuilder window becomeActive.	 ]fork</body></methods><methods><class-id>Roassal2.Roassal2Inspector</class-id> <category>private</category><body package="Roassal2-Visualworks">defaultFocusWidget	^self viewWidget</body><body package="Roassal2-Visualworks">refresh</body><body package="Roassal2-Visualworks">viewWidget	self centerScaled.	^self widgetAt: #view</body></methods><methods><class-id>Roassal2.Roassal2Inspector</class-id> <category>accessing</category><body package="Roassal2-Visualworks">roassalView	^ roassalView ifNil: [ 		(self object isKindOf: TRCanvas)	ifTrue: [ 			roassalView := RTView new.			roassalView setCanvas: self object. ].		(self object isKindOf: RTBuilder) ifTrue: [ 			self object build.			roassalView := self object view ].		(self object isKindOf: RTView) 			ifTrue: [ roassalView := self object ].		(self object class class methodDict includesKey: #roassalSelector) ifTrue: [ 			roassalView := self object perform: self object class roassalSelector.			(roassalView isKindOf: RTBuilder) ifTrue: [ 				roassalView build.				roassalView := roassalView view ] ].		roassalView. ].</body></methods><methods><class-id>Roassal2.Roassal2Inspector class</class-id> <category>accessing</category><body package="Roassal2-Visualworks">tabLabel		^(#Canvas &lt;&lt; #labels &gt;&gt; 'Canvas')</body></methods><methods><class-id>Roassal2.Roassal2Inspector class</class-id> <category>util</category><body package="Roassal2-Visualworks">addBoxZoom: view	| int |	int := RTZoomableBoxView new.	view @ int.</body><body package="Roassal2-Visualworks">addInspectorTo: definition	| class sel |	class := definition implementingClass.	sel := definition selector.	(class methodDict keys includes: #inspectorClasses) 		ifTrue: [ Dialog warn: 'The class: ', class name, ' has already the method #inspectorClasses' ]		ifFalse: [ class compile: 'inspectorClasses	| ar ar2 |	ar := super inspectorClasses.	ar2 := Array new: ar size + 1.	ar2 at: 1 put: Roassal2.Roassal2Inspector.	ar doWithIndex: [:e :i | ar2 at: i + 1 put: e].	^ ar2' classified: 'user interface' ].	class class compile: 'roassalSelector	^ #', sel classified: 'roassal2'.		(class methodDict keys includes: sel)		ifFalse: [ class compile: sel,'	^ Roassal2.RTView new' classified: 'roassal2' ].		Dialog warn: 'Done!, review the source of class ', class name.</body><body package="Roassal2-Visualworks">export: ablock exts: aCollection msg: aMessage	| fileName |	fileName := TRPlatform current 		dialogRequestSaveFilename: aMessage		extensions: aCollection		path: nil.	fileName ifNil: [^ self].	fileName := fileName  asAbsoluteFilename asString.	fileName size = 0  ifTrue: [ ^ self ].		(('*.', aCollection first) match: fileName) ifFalse: [ fileName := fileName, '.', aCollection first ].	ablock value: fileName.	self openFile: fileName.</body><body package="Roassal2-Visualworks">exportHTML2: view	self 		export: [ :fileName | | f |			f := fileName asFilename.			RTHTML5Exporter new 				directory: f head asFilename;				fileName: f tail;				export: view.] 		exts: #(html) msg: 'Enter the HTML file name'.</body><body package="Roassal2-Visualworks">exportHTML: view	| fileName |	fileName := (RTHTML5Exporter new export: view).	self openFile: fileName asAbsoluteFilename asString.</body><body package="Roassal2-Visualworks">exportPNG: view	self 		export: [ :fileName |			RTPNGExporter new 				builder: view;			fileName: fileName;			exportToFile.] 		exts: #(png) msg: 'Enter the PNG file name'.</body><body package="Roassal2-Visualworks">exportSVG: view	self 		export: [ :fileName |			RTSVGExporter 				exportBuilderAsSVG: view				filename: fileName.] 		exts: #(svg) msg: 'Enter the SVG file name'.</body><body package="Roassal2-Visualworks">inspectView: view	view inspect.</body><body package="Roassal2-Visualworks">moreOptionsWith: view atPoint: point	| s menuItem menuView activeController evt cursorPoint monitorRectangle wrappedMenu menuWindowBounds originAdjustment activation menuWindow |	activeController := Window activeController.	(activeController notNil and: [activeController view isOpen]) ifFalse: [		self error: (#errNoCustomizeWindow &lt;&lt; #dialogs &gt;&gt; 'There''s no window to customize the menu')].	evt := RedButtonPressedEvent withArray: #(1 2 30 40 50 60 1 8 123).	menuView := MenuView model: self menuOptions.	menuView prepareMenuItemViewsToMinWidth: 0.	wrappedMenu := menuView wrappedWithInsets.	menuWindowBounds := wrappedMenu preferredBounds expandedBy: menuView manualBorderWidth.	cursorPoint := point.	monitorRectangle := (Screen default boundsAround: cursorPoint) insetBy: NativeGUIPolicy current screenInsetsForMenus.	menuWindowBounds height: (menuWindowBounds height min: monitorRectangle height).	menuWindowBounds moveTo: cursorPoint + (3 @ -3). 	originAdjustment := menuWindowBounds amountToTranslateWithin: monitorRectangle.	originAdjustment x &lt; 0 ifTrue: [		menuWindowBounds moveTo: cursorPoint - (1 @ 3)  - (menuWindowBounds width @ 0).		originAdjustment := menuWindowBounds amountToTranslateWithin: monitorRectangle.	].	menuWindowBounds moveBy: originAdjustment.	menuWindow := menuView menuWindowFor: wrappedMenu in: menuWindowBounds masterWindow: activeController view topComponent.	menuWindow roundCornerTopLeft: true topRight: true bottomLeft: true bottomRight: true.	activation := NativeGUIPolicy current menuActivationClass new.	activation initiatingEvent: evt.	activation originalWindow: activeController view topComponent.	activation pushMenuView: menuView.	menuItem := activation runEventLoop.	s := menuItem isNil 		ifTrue: [ 0 ] 		ifFalse: [ menuItem value ].	s = 0 ifTrue: [^ self ].		self perform: s with: view.</body><body package="Roassal2-Visualworks">openFile: aPathString	#{ExternalWebBrowser} ifDefinedDo: [ :b |		b open: aPathString ].</body></methods><methods><class-id>Roassal2.RTMatrixRing</class-id> <category>accessing</category><body package="Roassal2-Builder-Sunburst">columnBlock	^ columnBlock</body><body package="Roassal2-Builder-Sunburst">columnBlock: anObject	columnBlock := anObject</body><body package="Roassal2-Builder-Sunburst">columnGap	^ columnGap</body><body package="Roassal2-Builder-Sunburst">columnGap: aNumber	columnGap := aNumber.	self lineShape width: aNumber.</body><body package="Roassal2-Builder-Sunburst">elements	^ elements</body><body package="Roassal2-Builder-Sunburst">elements: anObject	elements := anObject</body><body package="Roassal2-Builder-Sunburst">externalRadius	^ externalRadius</body><body package="Roassal2-Builder-Sunburst">externalRadius: anObject	self assert: anObject &gt; self innerRadius.	externalRadius := anObject</body><body package="Roassal2-Builder-Sunburst">innerRadius	^ innerRadius</body><body package="Roassal2-Builder-Sunburst">innerRadius: anObject	self assert: anObject &gt;= 0.	innerRadius := anObject</body><body package="Roassal2-Builder-Sunburst">lineShape	^ lineShape</body><body package="Roassal2-Builder-Sunburst">lineShape: anObject	lineShape := anObject.	self columnGap: 0.</body><body package="Roassal2-Builder-Sunburst">matrix	^ matrix</body><body package="Roassal2-Builder-Sunburst">matrix: anObject	matrix := anObject</body><body package="Roassal2-Builder-Sunburst">rowBlock	^ rowBlock</body><body package="Roassal2-Builder-Sunburst">rowBlock: anObject	rowBlock := anObject</body><body package="Roassal2-Builder-Sunburst">rowGap	^ rowGap</body><body package="Roassal2-Builder-Sunburst">rowGap: anObject	rowGap := anObject</body></methods><methods><class-id>Roassal2.RTMatrixRing</class-id> <category>hooks</category><body package="Roassal2-Builder-Sunburst">renderColumnGapsIn: aView	| partitions v1 v2 ang boxShape |	self columnGap isZero ifTrue: [ ^ self ].	self matrix ifNil: [ ^self ].	boxShape := RTBox new size: 0.	partitions := (columnBlock rtValue: (rowBlock rtValue: self matrix) first) size.	self lineShape color: aView canvas color.	1 to: partitions do: [ :i |		ang := (360 * i / partitions) degreesToRadians.		v1 := boxShape element.		v2 := boxShape element.		v1 translateTo: (self innerRadius - 4 * ang cos)@(self innerRadius - 4 * ang sin).		v2 translateTo: (self externalRadius * ang cos)@(self externalRadius * ang sin).		aView 			add: v1;			add: v2;			add: (self lineShape edgeFrom: v1 to: v2).		self elements add: v1; add: v2.	]</body><body package="Roassal2-Builder-Sunburst">renderIn: aView	self renderMatrixIn: aView.	self renderColumnGapsIn: aView.</body><body package="Roassal2-Builder-Sunburst">renderMatrixIn: aView	|  el rowSize columnSize betaAngle exRadius alphaAngle inRadius theMatrix theRow |	self matrix ifNil: [^ self ].	self elements: RTGroup new.	theMatrix := rowBlock rtValue: self matrix.	rowSize := theMatrix size.	theMatrix doWithIndex: [:row :rowIndex |		theRow := columnBlock rtValue: row. 		columnSize := theRow size.		betaAngle := 360 / columnSize.		exRadius := (self externalRadius - self innerRadius)/rowSize.		theRow doWithIndex: [:obj :column |  			el := self shape elementOn: obj.			el attributes 				at: #row put:	rowIndex;				at: #column put: column.			alphaAngle := betaAngle * (column - 1).			inRadius := self innerRadius + (exRadius*(rowIndex - 1)).			el trachelShape 				alphaAngle: alphaAngle 				betaAngle:  alphaAngle + betaAngle				innerRadius: inRadius 				externalRadius: inRadius + exRadius - self rowGap.			self elements add: el. ]	].	self interaction setUpElements: self elements.	aView addAll: self elements.</body></methods><methods><class-id>Roassal2.RTMatrixRing</class-id> <category>initialization</category><body package="Roassal2-Builder-Sunburst">initialize	super initialize.	self matrix: nil.	self shape arc.	self lineShape: RTLine new.	self innerRadius: 0.	self columnGap: 2.	self rowGap: 2.	self externalRadius: 240.	self columnGap: 0.	self columnBlock: #yourself.	self rowBlock: #yourself.</body></methods><methods><class-id>Roassal2.RTMultiColoredLine</class-id> <category>public</category><body package="Roassal2-Shapes">trachelShapeFor: anEdge	| shape multiShape fromPoint toPoint p |	fromPoint := attachPoint startingPointOf: anEdge.	toPoint := attachPoint endingPointOf: anEdge.	p := path value: fromPoint value: toPoint.		multiShape := TRCompositeShape new.	2 to: p size do: [ :i |		shape := TRLineShape new.		shape width: width.		shape from: (p at: i - 1) to: (p at: i).		shape color: (colorArray atWrap: (i - 1)).		multiShape addShape: shape.	].	^ multiShape</body><body package="Roassal2-Shapes">updateFor: anEdge trachelShape: trachelShape	| shape fromPoint toPoint p|	fromPoint := attachPoint startingPointOf: anEdge.	toPoint := attachPoint endingPointOf: anEdge.	p := path value: fromPoint value: toPoint.		2 to: (p size) do: [ :i |		shape := trachelShape shapes at: i - 1.		shape width: width.		shape from: (p at: i - 1) to: (p at: i).		shape color: (colorArray atWrap: (i - 1)).	].	^ trachelShape</body></methods><methods><class-id>Roassal2.RTMultiColoredLine</class-id> <category>rendering</category><body package="Roassal2-Shapes">colorShape	self block: [ :fromPoint :toPoint | 		| tab |				tab := Array with: fromPoint.				(fromPoint = toPoint) ifFalse: [				1 to: (colorArray size - 1) do: [ :i |				tab := tab copyWith: ( (i * (toPoint x - fromPoint x)/(colorArray size)) + (fromPoint x)) @ ( ((i* (fromPoint dist: toPoint)/(colorArray size)) / (fromPoint dist: toPoint) * (toPoint y - fromPoint y)) + (fromPoint y)).			]		].		tab := tab copyWith: toPoint.	 ]</body><body package="Roassal2-Shapes">path	^ path</body></methods><methods><class-id>Roassal2.RTMultiColoredLine</class-id> <category>configuration</category><body package="Roassal2-Shapes">defaultColors	^ Array with: Color blue with: Color red</body><body package="Roassal2-Shapes">straight	"A single color line"	self block: [ :fromPoint :toPoint | Array with: fromPoint with: toPoint ]</body></methods><methods><class-id>Roassal2.RTMultiColoredLine</class-id> <category>accessing</category><body package="Roassal2-Shapes">block: aTwoArgBlock	"The argument is a two arg block. The two arguments are the two points one has to draw the line. The block has to return a collection of point.		The arg follows [ :fromPoint :toPoint | Array with: ... with: ... with: ... ]"	path := aTwoArgBlock</body><body package="Roassal2-Shapes">colors	"Return the colors used by the line"	^ colorArray</body><body package="Roassal2-Shapes">colors: someColors	colorArray := someColors</body></methods><methods><class-id>Roassal2.RTMultiColoredLine</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	self straight.	self colors: self defaultColors</body></methods><methods><class-id>Roassal2.RTGradientColoredLine</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	precision := 1.</body></methods><methods><class-id>Roassal2.RTGradientColoredLine</class-id> <category>accessing</category><body package="Roassal2-Shapes">getColorAtStep: anInteger	^ Color fromRgbTriplet: (Array with:	((colorArray first red * (1 - ((1 / precision) * anInteger))) + (colorArray second red * (1 / precision) * anInteger)) with:	 ((colorArray first green * (1 - ((1 / precision) * anInteger))) + (colorArray second green * (1 / precision) * anInteger)) with:	((colorArray first blue * (1 - ((1 / precision) * anInteger))) + (colorArray second blue * (1 / precision) * anInteger))	)</body><body package="Roassal2-Shapes">precision	^ precision</body><body package="Roassal2-Shapes">precision: anInteger	^ precision := anInteger</body></methods><methods><class-id>Roassal2.RTGradientColoredLine</class-id> <category>as yet unclassified</category><body package="Roassal2-Shapes">gradientColorShape	| diff  gradientColorArray |	diff := (colorArray second alpha - colorArray first alpha).	gradientColorArray := Array with: (colorArray first).	(2 to: (precision - 1)) do: [ :i | gradientColorArray := gradientColorArray copyWith: ((self getColorAtStep: i) alpha: ( (colorArray first) alpha + ((i - 1) * diff / (precision - 1)) )) ]. 	gradientColorArray := gradientColorArray copyWith: (colorArray last).	colorArray := gradientColorArray.		self colorShape.</body></methods><methods><class-id>Roassal2.RTClickStateInteraction</class-id> <category>actions</category><body package="Roassal2-Interactions">clickOn: element	(self isSelected: element)		ifTrue: [ 			self markAsUnselected: element.			self unselect: element ]		ifFalse: [ 			self markASelected: element.			self select: element ]</body><body package="Roassal2-Interactions">markASelected: element	element attributeAt: #isSelected put: true</body><body package="Roassal2-Interactions">markAsUnselected: element	element attributeAt: #isSelected put: false</body><body package="Roassal2-Interactions">select: element	"Override to make it a meaningful"</body><body package="Roassal2-Interactions">unselect: element	"Override to make it a meaningful"</body></methods><methods><class-id>Roassal2.RTClickStateInteraction</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	element when: TRMouseClick do: [ :event | self clickOn: event element ]</body></methods><methods><class-id>Roassal2.RTClickStateInteraction</class-id> <category>testing</category><body package="Roassal2-Interactions">isSelected: element	^ element attributeAt: #isSelected ifAbsent: [ false ]</body></methods><methods><class-id>Roassal2.RTExpandable</class-id> <category>as yet unclassified</category><body package="Roassal2-Interactions">createAndRememberElementsFor: element	| t |	t := self createElementsFor: element.	element attributes at: #expandedElements put: t.	element attributes at: #oldExtent put: element extent.	^ t</body><body package="Roassal2-Interactions">createElementsFor: element	| g |	g := RTGroup new.	groupBlock value: g value: element.	^ g</body><body package="Roassal2-Interactions">createOrRetreiveElementsFor: element	^ (self hasElementBeenExpended: element)		ifTrue: [ self retreiveElementsFor: element ]		ifFalse: [ self createAndRememberElementsFor: element ]</body><body package="Roassal2-Interactions">evaluateAfterBlock	afterBlock value</body><body package="Roassal2-Interactions">group	"Return aTwoArgBlock has to follow the pattern [ :group :element |  ... ]	group is an empty group. You need to add what you want to be displayed in the popup. el is the element on which the mouse is above."	^ groupBlock</body><body package="Roassal2-Interactions">group: aTwoArgBlock	"aTwoArgBlock has to follow the pattern [ :group :element |  ... ]	group is an empty group. You need to add what you want to be displayed in the popup. el is the element on which the mouse is above."	groupBlock := aTwoArgBlock</body><body package="Roassal2-Interactions">hasElementBeenExpended: element	^ element attributes includesKey: #expandedElements</body><body package="Roassal2-Interactions">retreiveElementsFor: element	^ element attributes at: #expandedElements</body><body package="Roassal2-Interactions">select: element	| es |	"es := self createOrRetreiveElementsFor: element."	es := self createAndRememberElementsFor: element.		element view addAll: es.	RTNest new 		on: element nest: es.			self evaluateAfterBlock.</body><body package="Roassal2-Interactions">unselect: element	(self retreiveElementsFor: element) do: #remove.	element extent: (element attributes at: #oldExtent).	self evaluateAfterBlock</body></methods><methods><class-id>Roassal2.RTExpandable</class-id> <category>accessing</category><body package="Roassal2-Interactions">afterBlock	^ afterBlock</body><body package="Roassal2-Interactions">afterBlock: aZeroArgBlock	"The block is executed after an expension or a retraction"	afterBlock := aZeroArgBlock</body></methods><methods><class-id>Roassal2.RTDragAndDroppable</class-id> <category>initialization</category><body package="Roassal2-Interactions">blinkElement: element	element when: TRMouseDragging do: [ :evt | 		RTBlink on: element. 		elementBeingDragged := element ]</body><body package="Roassal2-Interactions">initialize	super initialize.	hosts := OrderedCollection new.	elementBeingDragged := nil.	doBlock := [:fromElement :toElement | "do nothing" ]</body><body package="Roassal2-Interactions">prepareElementForDND: anElement	anElement when: TRMouseDragEnd do: [ :evt | 		| receivingElement underShape |		underShape := anElement view canvas shapeForPositionInPixels: evt position.		underShape class == TRCanvas ifFalse: [ 			receivingElement := underShape element.			(hosts includes: receivingElement)				ifTrue: [doBlock value: elementBeingDragged value: receivingElement ] ] ]</body></methods><methods><class-id>Roassal2.RTDragAndDroppable</class-id> <category>enumerating</category><body package="Roassal2-Interactions">do: aTwoArgBlock	"aTwoArgBlock has to follow the pattern [:fromElement :toElement | ... ]"	doBlock := aTwoArgBlock</body></methods><methods><class-id>Roassal2.RTDragAndDroppable</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	self blinkElement: element.	self prepareElementForDND: element</body></methods><methods><class-id>Roassal2.RTDragAndDroppable</class-id> <category>accessing</category><body package="Roassal2-Interactions">host: anElement	hosts add: anElement</body><body package="Roassal2-Interactions">numberOfHosts	"Return the number of possible hosts (i.e., Roassal element thay may receive the element on which the interaction is added to)"	^ hosts size</body></methods><methods><class-id>Roassal2.RTLayoutBuilder</class-id> <category>public - layout</category><body package="Roassal2-Builder-Common">cell	layout := RTCellLayout new.	^ layout</body><body package="Roassal2-Builder-Common">circle	layout := RTCircleLayout new.	^ layout</body><body package="Roassal2-Builder-Common">circleWithRadius: aRadiusInPixels	layout := RTCircleLayout new.	layout radius: aRadiusInPixels.	^ layout</body><body package="Roassal2-Builder-Common">cluster	layout := RTClusterLayout new.	^ layout</body><body package="Roassal2-Builder-Common">date	"Used by RTCalendarBuilder"	layout := RTDateLayout new.	^ layout</body><body package="Roassal2-Builder-Common">dominanceTree	actionOnEdges add: [ :edge | edge shape withVerticallAttachPoint ].	layout := RTDominanceTreeLayout new.	^ layout</body><body package="Roassal2-Builder-Common">dynamicForce	"This flag is used in setUpElements to add an animation to the view. This is a bit hackish, yes. We will see in the future"	dynamicForceBasedLayout := true</body><body package="Roassal2-Builder-Common">flow	layout := RTFlowLayout new.	^ layout</body><body package="Roassal2-Builder-Common">force	layout := RTOptimizedForceBasedLayout new.	^ layout</body><body package="Roassal2-Builder-Common">forceWithCharge: aBlockOrANumber	"E.g -300"	layout := RTOptimizedForceBasedLayout new.	layout charge: aBlockOrANumber.	^ layout</body><body package="Roassal2-Builder-Common">grid	layout := RTGridLayout new.	^ layout</body><body package="Roassal2-Builder-Common">gridWithPerRow: aNumber	layout := RTGridLayout new.	layout lineItemsCount: aNumber.	^ layout</body><body package="Roassal2-Builder-Common">horizontalDominanceTree	actionOnEdges add: [ :edge | edge shape withHorizontalAttachPoint ].	layout := RTHorizontalDominanceTreeLayout new.	^ layout</body><body package="Roassal2-Builder-Common">horizontalFlow	layout := RTHorizontalFlowLayout new.	^ layout</body><body package="Roassal2-Builder-Common">horizontalLine	layout := RTHorizontalLineLayout new.	^ layout</body><body package="Roassal2-Builder-Common">horizontalReversedTree	actionOnEdges add: [ :edge | edge shape withShorterHorizontalAttachPoint ].	layout :=  RTReversedHorizontalTreeLayout new.	^ layout</body><body package="Roassal2-Builder-Common">horizontalTree	"The layout to use is the horizontal tree"	layout := RTHorizontalTreeLayout new.	^ layout</body><body package="Roassal2-Builder-Common">month	"Used by RTCalendarBuilder"	layout := RTMonthLayout new.	^ layout</body><body package="Roassal2-Builder-Common">radial	layout := RTRadialTreeLayout new.	^ layout</body><body package="Roassal2-Builder-Common">radialTree	layout := RTRadialTreeLayout new.	^ layout</body><body package="Roassal2-Builder-Common">sugiyama	actionOnEdges add: [ :edge | edge shape withVerticallAttachPoint ].	layout := RTSugiyamaLayout new.	^ layout</body><body package="Roassal2-Builder-Common">sunburstWithArcWidth: aNumber	layout := RTSunburstConstantWidthLayout new.	layout arcWidth: aNumber.	^ layout</body><body package="Roassal2-Builder-Common">sunburstWithRadius	^ self sunburstWithRadius: 200.</body><body package="Roassal2-Builder-Common">sunburstWithRadius: radius	layout := RTSunburstExtentLayout new.	layout extent: radius asPoint * 2.	^ layout</body><body package="Roassal2-Builder-Common">tree	"The layout to use is the vertical tree"	layout := RTTreeLayout new.	^ layout</body><body package="Roassal2-Builder-Common">treeReversed	actionOnEdges add: [ :edge | edge shape withShorterVerticalAttachPoint ].	layout := RTReversedTreeLayout new.	^ layout</body><body package="Roassal2-Builder-Common">verticalLine	layout := RTVerticalLineLayout new.	^ layout</body><body package="Roassal2-Builder-Common">weightedCircle	layout := RTWeightedCircleLayout new.	^ layout</body></methods><methods><class-id>Roassal2.RTLayoutBuilder</class-id> <category>public - condition</category><body package="Roassal2-Builder-Common">else: elseLayout 	self assert: [ layout class == RTConditionalLayout ].	layout elseLayout: elseLayout</body><body package="Roassal2-Builder-Common">if: blockCondition then: thenLayout	^ self ifElement: [ :anElement | blockCondition rtValue: anElement model ] then: thenLayout</body><body package="Roassal2-Builder-Common">ifConnectedThen: thenLayout"b := RTMondrian new.b nodes: (1 to: 100).b layout 	force;	ifConnectedThen: RTGridLayout new.b edges connectTo: [ :v | v \\ 4 ].b"	^ self ifElement: #isConnected then: thenLayout</body><body package="Roassal2-Builder-Common">ifElement: blockCondition then: thenLayout"Here is an example:b := RTMondrian new.b nodes: (1 to: 100).b layout 	force;	ifElement: #isNotConnected then: RTGridLayout new.b edges connectTo: [ :v | v \\ 4 ].b."		| oldLayout |	oldLayout := layout.	layout := RTConditionalLayout new.	layout condition: blockCondition.	layout thenLayout: thenLayout.	layout elseLayout: oldLayout.	^ layout</body><body package="Roassal2-Builder-Common">ifNotConnectedThen: thenLayout	^ self ifElement: #isNotConnected then: thenLayout</body><body package="Roassal2-Builder-Common">overall: overallLayout 	self assert: [ layout class == RTConditionalLayout ].	layout overallLayout: overallLayout</body></methods><methods><class-id>Roassal2.RTLayoutBuilder</class-id> <category>public - partition</category><body package="Roassal2-Builder-Common">for: aBlockCondition use: aLayout	partitions add: (Array with: aBlockCondition with: aLayout)</body><body package="Roassal2-Builder-Common">hasPartition	^ partitions notEmpty</body><body package="Roassal2-Builder-Common">processPartitions: elements	| groupOfElements els |	groupOfElements := OrderedCollection new.	partitions do: [ :tupple |		"tupple = { conditionblock . layout }"		els := elements select: [ :el | tupple first rtValue: el model ].		tupple second on: els.		groupOfElements add: els asGroup.		 ].		layout on: groupOfElements</body></methods><methods><class-id>Roassal2.RTLayoutBuilder</class-id> <category>building</category><body package="Roassal2-Builder-Common">doActionsOnEdgesFor: elements	| allEdges asSet |	actionOnEdges ifEmpty: [ ^ self ].	allEdges := OrderedCollection new.	elements do: [ :e | allEdges addAll: e connectedEdges ].	asSet := allEdges asSet.	actionOnEdges		do: [ :act | 			asSet				do: [ :e | 					e isUsedInLayout						ifTrue: [ act rtValue: e ] ] ]</body><body package="Roassal2-Builder-Common">doDynamicForceBasedLayoutOn: elements	| v |	v := elements anyOne view.	v addAnimation: (RTForceLayoutStepping new view: v)</body><body package="Roassal2-Builder-Common">setUpElements: elements	"Perform the layout on the provided elements"	self doActionsOnEdgesFor: elements.	dynamicForceBasedLayout ifTrue: [ ^ self doDynamicForceBasedLayoutOn: elements ].		elements do: #updateEdgesOFF.	self hasPartition		ifTrue: [ self processPartitions: elements ]		ifFalse: [ layout on: elements ].	elements do: #updateEdgesON.	elements do: #updateConnectedEdges.</body></methods><methods><class-id>Roassal2.RTLayoutBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Common">initialize	super initialize.	layout := RTFlowLayout new.	actionOnEdges := OrderedCollection new.	partitions := OrderedCollection new.	dynamicForceBasedLayout := false</body></methods><methods><class-id>Roassal2.RTLayoutBuilder</class-id> <category>configuring</category><body package="Roassal2-Builder-Common">gapSize: aValue	layout gapSize: aValue</body></methods><methods><class-id>Roassal2.RTLayoutBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Common">layout	^ layout</body></methods><methods><class-id>Roassal2.RTForceBasedLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">defaultInitialLayout	^ RTGridLayout new</body><body package="Roassal2-Layouts">initialize	super initialize.	nbIterations := 0.	edges := #().	nodes := #().	initialLayout := self defaultInitialLayout.	fixedNodes := Dictionary new.	strengths := Dictionary new.	lengths := Dictionary new.	charges := Dictionary new.	strength := 1.	length := 20.	charge := -30.	gravity := 0.1.	friction := 0.9.	theta := 0.8.	center := 200 @ 200.	alpha := 0.1.	self useProgressBar</body></methods><methods><class-id>Roassal2.RTForceBasedLayout</class-id> <category>algorithm</category><body package="Roassal2-Layouts">accumulate: aQuad 	| cx cy k random |		cx := 0.	cy := 0.		aQuad charge: 0; cx: 0; cy: 0.		random := Random new.		aQuad leaf ifFalse: [ aQuad nodes do: [ :e | e isNil ifFalse: [ self accumulate: e.																aQuad charge: aQuad charge + e charge.																cx := cx + (e charge * e cx).																cy := cy + (e charge * e cy) ] ] ].													aQuad node isNil ifFalse: [ aQuad leaf ifFalse: [ aQuad node translateTo: aQuad node position + (random next - 0.5 @ ( random next - 0.5)) ].								k := alpha * (self chargeOf: aQuad node).								aQuad charge: aQuad charge + k.								cx := cx + (k * aQuad node position x). 								cy := cy + (k * aQuad node position y).].								aQuad charge = 0 ifTrue: [ ^ self ].					aQuad cx: cx / aQuad charge.	aQuad cy: cy / aQuad charge.</body><body package="Roassal2-Layouts">chargeOf: aNode 	^ charges at: aNode ifAbsent: [ ^ charge ]</body><body package="Roassal2-Layouts">fix: aNode at: aPoint	fixedNodes at: aNode put: aPoint</body><body package="Roassal2-Layouts">gravityAt: aPoint	center := aPoint</body><body package="Roassal2-Layouts">lengthOf: anEdge	^ lengths at: anEdge ifAbsent: [ ^ length ]</body><body package="Roassal2-Layouts">repulse: aNode from: aQuad	| dx dy dn k p |		dx := aQuad cx - aNode position x.	dy := aQuad cy - aNode position y.		((dx closeTo: 0) and: [ dy closeTo: 0 ] ) ifFalse: [ 		dn := 1 / ((dx * dx) + (dy * dy)) sqrt.		p := oldPositions at: aNode.	aQuad node ~= aNode ifTrue: [ aQuad corner x - aQuad origin x * dn &lt; theta ifTrue: [ k := aQuad charge * dn * dn.																							oldPositions at: aNode put: p x - (dx * k) @ (p y - (dy * k) ).																							^ self].																					(aQuad node isNil not and: [ dn &lt; 1e9 ]) ifTrue: [ k := (self chargeOf: aQuad node) * dn * dn * alpha.																					  oldPositions at: aNode put: p x - (dx * k) @ (p y - (dy * k) ) ] ]. ].																				(aQuad charge closeTo: 0) not ifTrue: [ aQuad nodes do: [ :e | e isNil ifFalse: [ self repulse: aNode from: e ] ] ]</body><body package="Roassal2-Layouts">set: aNode charge: aFloat 	charges at: aNode put: aFloat</body><body package="Roassal2-Layouts">set: anEdge length: aFloat 	lengths at: anEdge put: aFloat</body><body package="Roassal2-Layouts">set: anEdge length: aFloat strength: another	lengths at: anEdge put: aFloat.	strengths at: anEdge put: another</body><body package="Roassal2-Layouts">set: anEdge strength: aFloat 	strengths at: anEdge put: aFloat</body><body package="Roassal2-Layouts">strengthOf: anEdge	^ strengths at: anEdge ifAbsent: [ ^ strength ]</body></methods><methods><class-id>Roassal2.RTForceBasedLayout</class-id> <category>configuration</category><body package="Roassal2-Layouts">doNotUseProgressBar	shouldUseProgressBar := false</body><body package="Roassal2-Layouts">useProgressBar	shouldUseProgressBar := true</body></methods><methods><class-id>Roassal2.RTForceBasedLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: nodeElements	self start: nodeElements.	self shouldRunLayoutWithProgressBar		ifTrue: [ self runLayoutInJob ]		ifFalse: [ self runLayoutSimply ].	alpha := 0.	nodes do: [ :e | translator translateTopLeftOf: e to: e position ]</body><body package="Roassal2-Layouts">initialPositionOfNodes: nodeElements	initialLayout executeOnElements: nodeElements</body><body package="Roassal2-Layouts">on: elements edges: edgesCol	self nodes: elements.	self userDefinedEdges: edgesCol.	self applyOn: elements.</body><body package="Roassal2-Layouts">runLayoutInJob	[ :job | 	job		title: 'Laying out elements';		min: 1 - alpha;		max: 1.	nbIterations = 0		ifTrue: [ 			[ 			alpha := alpha * 0.99.			alpha &gt; 0.005 ]				whileTrue: [ 					self step.					job currentValue: 1 - alpha ] ]		ifFalse: [ 			nbIterations				timesRepeat: [ 					alpha := alpha * 0.99.					self step.					job currentValue: 1 - alpha ] ] ] asJob run</body><body package="Roassal2-Layouts">runLayoutSimply	nbIterations = 0		ifTrue: [ 			[ 			alpha := alpha * 0.99.			alpha &gt; 0.005 ] whileTrue: [ self step ] ]		ifFalse: [ 			nbIterations				timesRepeat: [ 					alpha := alpha * 0.99.					self step ] ]</body></methods><methods><class-id>Roassal2.RTForceBasedLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">charge: aFloat	"Typically a negative value. E.g., -300"	charge := aFloat</body><body package="Roassal2-Layouts">initialLayout: aLayout	"Set the initial layout to be used before stepping"	initialLayout := aLayout</body><body package="Roassal2-Layouts">length: aFloat	"Specifiy the length of the edges. E.g., 50"	length := aFloat</body><body package="Roassal2-Layouts">nbIterations	^ nbIterations</body><body package="Roassal2-Layouts">nbIterations: anObject	nbIterations := anObject</body><body package="Roassal2-Layouts">nodes	^ nodes</body><body package="Roassal2-Layouts">nodes: elements	nodes := elements</body><body package="Roassal2-Layouts">prepareNodes: nodeElements	"Initialize the meta data associated to the nodes. At that stage, position of nodes is not modified"	weights := Dictionary new.	oldPositions := Dictionary new.	nodes := nodeElements.	nodes		do: [ :e | 			weights add: (Association key: e value: 0).			oldPositions add: (Association key: e value: e position) ].	edges		do: [ :e | 			| from to |			from := e from.			to := e to.			weights at: from put: (weights at: from) + 1.			weights at: to put: (weights at: to) + 1 ].	alpha := 0.1</body><body package="Roassal2-Layouts">shouldUseProgressBar	^ shouldUseProgressBar</body><body package="Roassal2-Layouts">start: nodeElements	self initialPositionOfNodes: nodeElements.	self prepareNodes: nodeElements</body><body package="Roassal2-Layouts">strength: aFloat	"Set the force of attraction for the edges. A high value results in having nodes together.	The default value is 1.0"	strength := aFloat</body></methods><methods><class-id>Roassal2.RTForceBasedLayout</class-id> <category>testing</category><body package="Roassal2-Layouts">isFixed: aNode	^ fixedNodes includesKey: aNode</body><body package="Roassal2-Layouts">isJobInstalled	"Return true if the class Job exist. This is mainly useful to make a distinction between Pharo and VisualWorks"	^ Smalltalk includesKey: #Job</body></methods><methods><class-id>Roassal2.RTForceBasedLayout</class-id> <category>updating</category><body package="Roassal2-Layouts">addEdge: anEdge	self addEdges: (Array with: anEdge)</body><body package="Roassal2-Layouts">addEdges: someEdges	someEdges		do: [ :e | 			| from to |			from := e from.			to := e to.			weights at: from put: (weights at: from) + 1.			weights at: to put: (weights at: to) + 1 ].	edges := edges, someEdges</body><body package="Roassal2-Layouts">addNodes: nodeElements	"Initialize the meta data associated to the nodes. At that stage, position of nodes is not modified"	nodes := nodes, nodeElements.	nodeElements		do: [ :e | 			weights add: (Association key: e value: 0).			oldPositions add: (Association key: e value: e position) ].</body><body package="Roassal2-Layouts">removeAllEdges	edges := OrderedCollection new</body><body package="Roassal2-Layouts">shouldRunLayoutWithProgressBar	^ self isJobInstalled and: [ self shouldUseProgressBar ]</body></methods><methods><class-id>Roassal2.RTForceBasedLayout</class-id> <category>public</category><body package="Roassal2-Layouts">userDefinedEdges: aCollectionOfEdges	"useful to tell to the layout which edges have to be used for the layout"	userDefinedEdges := aCollectionOfEdges select: [ :e |		(nodes includes: e from) and: [ nodes includes: e to ] ]</body></methods><methods><class-id>Roassal2.RTForceBasedLayout</class-id> <category>events</category><body package="Roassal2-Layouts">step 	"run a step of the force layout algorithm"	| from to fp tp x y len k quad old |				"If there is no nodes, then there is not much to do"	nodes ifEmpty: [ ^ self ].	super step.	edges do: [ :e | 					from := e from. 					fp := from position.					to := e to. 					tp := to position.					x := tp x - fp x.					y := tp y - fp y.					len := ((x * x) + (y * y)) sqrt.					((len closeTo: 0) not) ifTrue: [ 						len :=  alpha * (self strengthOf: e) * ( len - (self lengthOf: e) ) / len.						x := x * len.						y := y * len.						k := (weights at: from) / (( weights at: from) +( weights at: to )).						to translateTo: ( tp x - (x * k) )@( tp y - (y * k) ).						k := 1 -  k.						from translateTo: ( fp x + (x * k) )@( fp y + (y * k) ) ] ].					k := alpha * gravity.		((k closeTo: 0) not) ifTrue: [ 			x := center x.			y := center y.			nodes do: [ :ea | | pos |					pos := ea position.					ea translateTo: (pos x + ((x - pos x)* k)) @ (pos y + (( y - pos y )* k )) ] ].						quad := RTQuadTree withAll: nodes.		self accumulate: quad.		nodes do: [ :e | 			(self isFixed: e) 				ifFalse: [ self repulse: e from: quad ]				ifTrue: [ translator translateTopLeftOf: e to: (fixedNodes at: e) ] ].		nodes do: [ :e | 			old := e position.			e translateTo: 				(old x - (( (oldPositions at: e) x - old x ) * friction)) @ 				(old y - (( (oldPositions at: e) y - old y ) * friction)).			oldPositions at: e put: old.].</body></methods><methods><class-id>Roassal2.RTTextLine</class-id> <category>enumerating</category><body package="Roassal2-Builder-TextBuilder">wordsDo: aBlockClosure 	^ self do: aBlockClosure</body></methods><methods><class-id>Roassal2.RTMockEdge</class-id> <category>accessing</category><body package="Roassal2-Layouts">from	^ from</body><body package="Roassal2-Layouts">from: aMockElement	from := aMockElement</body><body package="Roassal2-Layouts">to	^ to</body><body package="Roassal2-Layouts">to: aMockElement	to := aMockElement</body></methods><methods><class-id>Roassal2.RTSVGLink</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addEventHandlers: aStream id: aString element: aRTElement center: aNumber	aStream		nextPutAll: '&lt;a xlink:href="',(self link value: aRTElement model),'" target="_blank"&gt;'.	"return the missing closing"	^'&lt;/a&gt;'</body><body package="Roassal2-Exporter-SVG">addFunctions: aStream	"do nothing"</body><body package="Roassal2-Exporter-SVG">addGlobalHandlers: aStream	"do nothing"</body></methods><methods><class-id>Roassal2.RTSVGLink</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">initialize	link := [:a |'http://objectprofile.com/'].	self type: 'link'.	contained := false.	external := false.</body><body package="Roassal2-Exporter-SVG">link	^ link</body><body package="Roassal2-Exporter-SVG">link: anObject	link := anObject</body></methods><methods><class-id>Roassal2.RTSVGLink class</class-id> <category>as yet unclassified</category><body package="Roassal2-Exporter-SVG">on: anExporter link: anHref targets: aRTShape	| generator |	generator := [ :e |  self new target: e; link: anHref; yourself ].	self on: anExporter targets: aRTShape generator: generator</body></methods><methods><class-id>Roassal2.RTGrapherInteraction class</class-id> <category>testing</category><body package="Roassal2-Builder-Grapher-Core">isAbstract	^ self = RTGrapherInteraction</body></methods><methods><class-id>Roassal2.RTDataToggleInteraction</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Grapher-Core">dataset: aDataset	dataset := aDataset</body><body package="Roassal2-Builder-Grapher-Core">initializeElement: element	"Do nothing. Initialization happens only after #legendElements have been assigned."</body><body package="Roassal2-Builder-Grapher-Core">initializeLegendElement	legendElements		when: TRMouseLeftClick		do: [ :event | 			dataset elements anyOne view				ifNil: [ dataset builder view addAll: dataset elements.					dataset renderLinesFor: dataset elements in: dataset builder view.					RTBlink unhighlightElements: legendElements.					dataset builder view signalUpdate ]				ifNotNil: [ dataset elements do: #remove.					RTBlink highlight: legendElements first color: Color veryLightGray.					RTBlink highlight: legendElements second color: Color veryLightGray.					dataset builder view signalUpdate ] ]</body><body package="Roassal2-Builder-Grapher-Core">legendElements: aCollection	legendElements := aCollection.	self initializeLegendElement</body></methods><methods><class-id>Roassal2.RTExploraTestTree</class-id> <category>accessing</category><body package="Roassal2-Builder-Explora">left	^ left</body><body package="Roassal2-Builder-Explora">left: aNode	left := aNode</body><body package="Roassal2-Builder-Explora">parent	^ parent</body><body package="Roassal2-Builder-Explora">parent: aNode	parent := aNode</body><body package="Roassal2-Builder-Explora">right	^ right</body><body package="Roassal2-Builder-Explora">right: aNode	right := aNode</body></methods><methods><class-id>Roassal2.RTFocusElement</class-id> <category>initialization</category><body package="Roassal2-Builder-CircularMap">initialize	super initialize.	animation := false.</body></methods><methods><class-id>Roassal2.RTFocusElement</class-id> <category>public</category><body package="Roassal2-Builder-CircularMap">animated	animation := true.</body></methods><methods><class-id>Roassal2.RTFocusElement</class-id> <category>hooks</category><body package="Roassal2-Builder-CircularMap">initializeElement: element	element when: TRMouseDoubleClick do: [ :evt |		| canvas |		canvas := element view canvas.		animation 			ifTrue: [ RTFocusAnimation on: element ]			ifFalse: [ 				canvas camera focusOnCenterScaled: canvas extent "rec: element encompassingRectangle".				evt signalUpdate ] ].</body></methods><methods><class-id>Roassal2.RTFocusElement class</class-id> <category>public</category><body package="Roassal2-Builder-CircularMap">animated	^ self new animated</body></methods><methods><class-id>Roassal2.RTSVGLine</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	self type: 'line'.	self label: 'line'</body></methods><methods><class-id>Roassal2.RTSVGLine</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">element: anElement from: aPoint to: anotherPoint width: anInteger color: aColor	self element: anElement.	self position: aPoint.	self extent: anotherPoint.	self strokeWidth: anInteger.	self strokeColor: aColor.</body><body package="Roassal2-Exporter-SVG">element: anElement from: aPoint to: anotherPoint width: anInteger color: aColor decoration: aLineDecoration	self element: anElement from: aPoint to: anotherPoint  width: anInteger color: aColor.	self decoration: aLineDecoration</body><body package="Roassal2-Exporter-SVG">extent	^ extent</body><body package="Roassal2-Exporter-SVG">extent: anObject	extent := anObject</body></methods><methods><class-id>Roassal2.RTSVGLine</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addOn: stream using: aSVGVisitor		self id: (aSVGVisitor nameFor: self element).	self openDef: stream.	self addPosition: stream.	self startStyle: stream.	self addStrokeColor: stream.	self addStrokeOpacity: stream.	self addStrokeWidth: stream.	self closeTag: stream.	self decoration ifNotNil: [ self addMarker: stream ].	self startClass: stream.	self closeTag: stream.	self addExternalInteractions: aSVGVisitor.	self closeDef: stream.</body><body package="Roassal2-Exporter-SVG">addPosition: stream	stream		nextPutAll:				('x1="&lt;1p&gt;" y1="&lt;2p&gt;" ' expandMacrosWith: self position x rounded with: self position y rounded);		nextPutAll:				('x2="&lt;1p&gt;" y2="&lt;2p&gt;" ' expandMacrosWith: self extent x rounded with: self extent y rounded).</body></methods><methods><class-id>Roassal2.RTLineLegendItem</class-id> <category>accessing</category><body package="Roassal2-Builder-Legend">color	^ color</body><body package="Roassal2-Builder-Legend">color: anObject	color := anObject</body><body package="Roassal2-Builder-Legend">text	^ text</body><body package="Roassal2-Builder-Legend">text: anObject	text := anObject</body></methods><methods><class-id>Roassal2.RTLineLegendItem</class-id> <category>hooks</category><body package="Roassal2-Builder-Legend">execute	"Associate a color with a text"	| g |	g := RTGroup new.	g add: (RTBox new height: textSize * 0.3; width: textSize; color: color) element.	g add: ((self newLabelShape: text) elementOn: text).	RTHorizontalLineLayout new alignCenter; on: g.	^ g</body></methods><methods><class-id>Roassal2.RTCenteredAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">basicEndingPointOf: anEdge	^ anEdge to position</body><body package="Roassal2-AttachPoint">basicStartingPointOf: anEdge	^ anEdge from position</body></methods><methods><class-id>Roassal2.RTLinearMove</class-id> <category>public</category><body package="Roassal2-Animation">by: aDeltaPoint during: seconds on: anElement	^ self to: anElement position + aDeltaPoint during: seconds on: anElement</body><body package="Roassal2-Animation">by: aDeltaPoint during: seconds on: anElement in: aView	^ self to: anElement position + aDeltaPoint during: seconds on: anElement in: aView</body><body package="Roassal2-Animation">to: anEndPoint during: seconds on: anElement	| position |	element := anElement.		position := anElement position.	animatedValue := TRVIAnimatedValue new							evaluator: [ :t | position interpolateTo: anEndPoint at: t ];							timer: (TRVITimer new cycleLength: seconds);							yourself.</body><body package="Roassal2-Animation">to: anEndPoint during: seconds on: anElement in: aView	| anim |	anim := self to: anEndPoint during: seconds on: anElement.	aView addAnimation: anim</body></methods><methods><class-id>Roassal2.RTLinearMove</class-id> <category>testing</category><body package="Roassal2-Animation">hasCompleted	^ animatedValue hasCompleted</body></methods><methods><class-id>Roassal2.RTLinearMove</class-id> <category>accessing</category><body package="Roassal2-Animation">after: aBlock	animatedValue finishCallback: aBlock</body><body package="Roassal2-Animation">start	animatedValue start</body></methods><methods><class-id>Roassal2.RTLinearMove</class-id> <category>refreshing</category><body package="Roassal2-Animation">refresh	element translateTo: animatedValue value.	element signalUpdate</body></methods><methods><class-id>Roassal2.RTLinearMove class</class-id> <category>as yet unclassified</category><body package="Roassal2-Animation">to: endPoint during: seconds on: shape	^ self new to: endPoint during: seconds on: shape</body></methods><methods><class-id>Roassal2.RTAccelerationMove</class-id> <category>public</category><body package="Roassal2-Animation">to: anEndPoint during: seconds on: anElement	| position |	element := anElement.		position := anElement position.	animatedValue := TRVIAnimatedValue new							evaluator: [ :t | position interpolateTo: anEndPoint at: (t sqrt) ];							timer: (TRVITimer new cycleLength: seconds);							yourself.</body></methods><methods><class-id>Roassal2.RTLinearPathBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Experimental">interpolate: points	| first str point |	first := true.	str := nil.	point := [ :p | p x asFloat asString, ' ', p y asFloat asString ].	points do: [ :p |		first ifTrue: [ str := point value: p. first := false ]		ifFalse: [ str := str, 'L', (point value: p) ]		 ].	^ str.</body></methods><methods><class-id>Roassal2.RTResize</class-id> <category>public - configuration</category><body package="Roassal2-Core">useBiggestElement	self fixedElement: self biggestElement</body><body package="Roassal2-Core">useHighestElement	self fixedElement: self highestElement</body><body package="Roassal2-Core">useWidestElement	self fixedElement: self widestElement</body></methods><methods><class-id>Roassal2.RTResize</class-id> <category>accessing - computed</category><body package="Roassal2-Core">biggestElement	^ elements inject: elements anyOne into: [ :biggestElement :e | 			biggestElement extent &lt; e extent				ifTrue: [ e ] ifFalse: [ biggestElement ] ]</body><body package="Roassal2-Core">biggestExtent	fixedElement ifNotNil: [ ^ fixedElement extent ].	^ elements inject: 0 @ 0 into: [ :maxExtent :e | 			maxExtent max: e extent ]</body><body package="Roassal2-Core">highestElement	^ elements inject: elements anyOne into: [ :highestElement :e | 			highestElement extent y &lt; e extent y				ifTrue: [ e ] ifFalse: [ highestElement ] ]</body><body package="Roassal2-Core">widestElement	^ elements inject: elements anyOne into: [ :widestElement :e | 			widestElement extent x &lt; e extent x				ifTrue: [ e ] ifFalse: [ widestElement ] ]</body></methods><methods><class-id>Roassal2.RTResize</class-id> <category>public</category><body package="Roassal2-Core">sameHeight	self ifNoFixedElementThen: [ self useHighestElement ].	elements do: [ :e | e height: self fixedElement height ]</body><body package="Roassal2-Core">sameSize	self ifNoFixedElementThen: [ self useBiggestElement ].	elements do: [ :e | e extent: self fixedElement extent ]</body><body package="Roassal2-Core">sameWidth	self ifNoFixedElementThen: [ self useWidestElement ].	elements do: [ :e | e width: self fixedElement width ]</body></methods><methods><class-id>Roassal2.RTConstraint</class-id> <category>public - executing</category><body package="Roassal2-Core">move	fixedElement translateTo: self computeX @ self computeY</body><body package="Roassal2-Core">stick	| block |	self move.	block := [ :shape :step | self move ].	movableElement addCallback: (TRTranslationCallback block: block).	movableElement addCallback: (TRExtentCallback block: block)</body></methods><methods><class-id>Roassal2.RTConstraint</class-id> <category>public - modifiers</category><body package="Roassal2-Core">border	orientation := 0</body><body package="Roassal2-Core">horizontalPadding: aNumber	horizontalPadding := aNumber</body><body package="Roassal2-Core">inner	orientation := 1</body><body package="Roassal2-Core">outer	orientation := -1</body><body package="Roassal2-Core">padding: aNumber	self verticalPadding: aNumber.	self horizontalPadding: aNumber</body><body package="Roassal2-Core">verticalPadding: aNumber	verticalPadding := aNumber</body></methods><methods><class-id>Roassal2.RTConstraint</class-id> <category>public - positioning</category><body package="Roassal2-Core">bottom	movableElementY := [ :shape | shape encompassingRectangle bottom ].	directionY := -1</body><body package="Roassal2-Core">center	movableElementX := [ :shape | shape position x ].	directionX := 0</body><body package="Roassal2-Core">left	movableElementX := [ :shape | shape encompassingRectangle left ].	directionX := 1</body><body package="Roassal2-Core">middle	movableElementY := [ :shape | shape position y ].	directionY := 0</body><body package="Roassal2-Core">right	movableElementX := [ :shape | shape encompassingRectangle right ].	directionX := -1</body><body package="Roassal2-Core">top	movableElementY := [ :shape | shape encompassingRectangle top ].	directionY := 1</body></methods><methods><class-id>Roassal2.RTConstraint</class-id> <category>public - positioning shortcuts</category><body package="Roassal2-Core">above	self top.	self outer</body><body package="Roassal2-Core">below	self bottom.	self outer</body><body package="Roassal2-Core">bottomLeft	self		bottom;		left</body><body package="Roassal2-Core">bottomRight	self		bottom;		right</body><body package="Roassal2-Core">leftOf	self left.	self outer</body><body package="Roassal2-Core">rightOf	self right.	self outer</body><body package="Roassal2-Core">topLeft	self		top;		left</body><body package="Roassal2-Core">topRight	self		top;		right</body></methods><methods><class-id>Roassal2.RTConstraint</class-id> <category>private</category><body package="Roassal2-Core">computeX	^ fixedElement width / 2 + horizontalPadding * orientation * directionX + self parentX</body><body package="Roassal2-Core">computeY	^ fixedElement height / 2 + verticalPadding * orientation * directionY + self parentY</body><body package="Roassal2-Core">parentX	^ movableElementX value: movableElement</body><body package="Roassal2-Core">parentY	^ movableElementY value: movableElement</body></methods><methods><class-id>Roassal2.RTConstraint</class-id> <category>initialization</category><body package="Roassal2-Core">default	self padding: 0.	self inner.	self middle.	self center</body><body package="Roassal2-Core">fix: aFixedElement	movableElement := aFixedElement</body><body package="Roassal2-Core">initialize	super initialize.	self default.	fixedElementX := [ :shape | shape width / 2 ].	fixedElementY := [ :shape | shape height / 2 ]</body><body package="Roassal2-Core">movable: aMovableElement	fixedElement := aMovableElement</body><body package="Roassal2-Core">movable: aMovableElement fix: aFixedElement	fixedElement := aFixedElement.	movableElement := aMovableElement</body></methods><methods><class-id>Roassal2.RTConstraint</class-id> <category>obsolete</category><body package="Roassal2-Core">setChild: aChildShape parent: aParentShape	fixedElement := aChildShape.	movableElement := aParentShape</body></methods><methods><class-id>Roassal2.RTConstraint class</class-id> <category>obsolete</category><body package="Roassal2-Core">on: aChildShape background: aParentShape	^ self new		setChild: aChildShape parent: aParentShape;		yourself</body></methods><methods><class-id>Roassal2.RTConstraint class</class-id> <category>instance creation</category><body package="Roassal2-Core">movable: moveableElement fix: fixedElement	^ self new		movable: moveableElement fix: fixedElement;		yourself</body></methods><methods><class-id>Roassal2.RTConstraint class</class-id> <category>convenient</category><body package="Roassal2-Core">move: es1 onTheRightOf: es2	"Both es1 and es2 could be one element, a group of elements, or a group of Trachel shapesl "	(RTConstraint on: es1 background: es2) rightOf; move</body></methods><methods><class-id>Roassal2.RTLazyMetricNormalizer</class-id> <category>reflective operations</category><body package="Roassal2-ColorNormalizer">doesNotUnderstand: message	messages add: message</body></methods><methods><class-id>Roassal2.RTLazyMetricNormalizer</class-id> <category>building</category><body package="Roassal2-ColorNormalizer">build	messages do: [ :m | m sendTo: realNormalizer ].</body></methods><methods><class-id>Roassal2.RTLazyMetricNormalizer</class-id> <category>actions</category><body package="Roassal2-ColorNormalizer">resetMessages	messages := OrderedCollection new</body></methods><methods><class-id>Roassal2.RTLazyMetricNormalizer</class-id> <category>metrics</category><body package="Roassal2-ColorNormalizer">numberOfReceivedMessages	^ messages size</body></methods><methods><class-id>Roassal2.RTLazyMetricNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizer">elements: someElements	realNormalizer elements: someElements</body></methods><methods><class-id>Roassal2.RTLazyMetricNormalizer</class-id> <category>initialization</category><body package="Roassal2-ColorNormalizer">initialize	super initialize.	realNormalizer := RTMetricNormalizer new.	self resetMessages</body></methods><methods><class-id>Roassal2.RTNIdentityNormalizer</class-id> <category>initialize-release</category><body package="Roassal2-ColorNormalizerOBSOLETE">colors	^ Color distinctTenStrongColors</body><body package="Roassal2-ColorNormalizerOBSOLETE">initialize		super initialize.	colorIndex := 0.	dictionary := Dictionary new.	command := #yourself</body></methods><methods><class-id>Roassal2.RTNIdentityNormalizer</class-id> <category>private</category><body package="Roassal2-ColorNormalizerOBSOLETE">nextColor		colorIndex := colorIndex \\ self colors size + 1.	^self colors at: colorIndex</body><body package="Roassal2-ColorNormalizerOBSOLETE">setIndexTo: aColor	"colorAsSymbol has to be one of Color colorNames. 	The method set the current index to the color given in parameter"		colorIndex := (self colors indexOf: aColor) - 1</body></methods><methods><class-id>Roassal2.RTNIdentityNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizerOBSOLETE">rtValue: anEntity		^dictionary		at: (command rtValue: anEntity)		ifAbsentPut: [ self nextColor ]</body></methods><methods><class-id>Roassal2.RTNIdentityNormalizer class</class-id> <category>instance creation</category><body package="Roassal2-ColorNormalizerOBSOLETE">beginingAtBlue	^ self new			setIndexTo: Color blue;			yourself</body><body package="Roassal2-ColorNormalizerOBSOLETE">beginingAtRed	^ self new			setIndexTo: Color red;			yourself</body><body package="Roassal2-ColorNormalizerOBSOLETE">withCommand: aBlock		^(self new)		command: aBlock;		yourself</body></methods><methods><class-id>Roassal2.RTHorizontalTickLineDecorator</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Decorators">axis	^ builder getAxisY</body></methods><methods><class-id>Roassal2.RTHorizontalTickLineDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">render		| axis yLine mm |	axis := builder getAxisY.	mm := RTMetricNormalizer new.	(self minValue to: self maxValue by: self step) do: [ :y |		yLine := mm						getValue: y						min: self fromPoint y 						max: self toPoint y						minValue: self minValue 						maxValue: self maxValue.		self lineFrom: 	builder getAxisX fromPoint x @ yLine to: builder getAxisX toPoint x @ yLine.		]</body></methods><methods><class-id>Roassal2.TRExampleApplication</class-id> <category>aspect</category><body package="Roassal2-Visualworks">roassalView	^ roassalView ifNil: [			| elements s |			view := RTView new.			view @ RTDraggableView.			elements := (RTEllipse new size: 20; color: (Color blue alpha: 0.3)) elementsOn: (1 to: 100).			view addAll: elements.			elements @ RTDraggable.			s := RTSpringLayoutStepping new view: view.			view addAnimation: s.			roassalView := view canvas buildMorph.			view canvas focusOnCenterScaled.			roassalView. ].</body></methods><methods><class-id>Roassal2.TRExampleApplication</class-id> <category>actions</category><body package="Roassal2-Visualworks">down	view canvas camera translateBy: 0 @ 10.	view signalUpdate</body><body package="Roassal2-Visualworks">left	view canvas camera translateBy: -10 @ 0. 	view signalUpdate</body><body package="Roassal2-Visualworks">right	view canvas camera translateBy: 10 @ 0. 	view signalUpdate</body><body package="Roassal2-Visualworks">up	view canvas camera translateBy: 0 @ -10. 	view signalUpdate</body></methods><methods><class-id>Roassal2.TRExampleApplication</class-id> <category>example</category><body package="Roassal2-Visualworks">runExample	"	self new runExample	"	TRExampleApplication open</body></methods><methods><class-id>Roassal2.TRExampleApplication</class-id> <category>interface opening</category><body package="Roassal2-Visualworks">postOpenWith: aBuilder 	super postOpenWith: aBuilder.	TRApplicationModel postOpenWith: aBuilder and: self selector: #roassalView.</body></methods><methods><class-id>Roassal2.RTAbstractLabeled</class-id> <category>accessing</category><body package="Roassal2-Interactions">color	^ color</body><body package="Roassal2-Interactions">color: aBlockOrColor	color := aBlockOrColor</body><body package="Roassal2-Interactions">fontSize	^ fontSize</body><body package="Roassal2-Interactions">fontSize: aPixelSizeAsInteger	fontSize := aPixelSizeAsInteger</body><body package="Roassal2-Interactions">lbl	^ labelTrachel</body><body package="Roassal2-Interactions">left	position := #left</body><body package="Roassal2-Interactions">lowColor	^ lowColor</body><body package="Roassal2-Interactions">lowColor: aBlockOrColor	"Set the color used when the label is not highlighted"	lowColor := aBlockOrColor</body><body package="Roassal2-Interactions">offsetOnEdge	^ offsetOnEdge</body><body package="Roassal2-Interactions">offsetOnEdge: aFloat	"aFloat is between 0.0 and 1.0. With a value of 1.0, the label is close to the starting extremity, if RTLabelled is used on an edge"	offsetOnEdge := aFloat</body><body package="Roassal2-Interactions">text: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self textElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Interactions">textElement	"Return the string value, symbol, or block that is evaluated, using rtValue: against an element"	^ text</body><body package="Roassal2-Interactions">textElement: aTextOrBlock	text := aTextOrBlock</body><body package="Roassal2-Interactions">view: aBlockOrValue	"aBlock is evaluated against the element to get the canvas"	canvas := [ :el | (aBlockOrValue rtValue: el) canvas ]</body></methods><methods><class-id>Roassal2.RTAbstractLabeled</class-id> <category>public configuration</category><body package="Roassal2-Interactions">setAsHighlightable	"Make the label highlightable by moving the mouse over the element		Consider the example:	=-=-=-=-=-	| v es |	v := RTView new.	es := RTBox new size: 20; color: Color blue; elementsOn: #('Hello' 'World').	v addAll: es.	RTHorizontalLineLayout on: es.	es do: [ :e |		e @ (RTLabeled new color: Color red; setAsHighlightable) ]. 	es @ RTDraggable.	v	=-=-=-=-=-	"	highlightable := true</body><body package="Roassal2-Interactions">setAsShouldBeInTheFront	"This method let the label trachel shape to be always in the front. 		Consider the example:	=-=-=-=-=-	v := RTView new.	es := RTBox new size: 20; color: Color blue; elementsOn: #('Hello' 'World').	v addAll: es.	RTHorizontalLineLayout on: es.	es do: [ :e |		e @ (RTLabeled new color: Color red; setAsHighlightable; setAsShouldBeInTheFront) ]. 	es @ RTDraggable.	v	=-=-=-=-=-	Try to remove the call to #setAsShouldBeInTheFront to see the effect by drag and dropping elements	"	shouldBeInTheBack := false</body></methods><methods><class-id>Roassal2.RTAbstractLabeled</class-id> <category>public - layout</category><body package="Roassal2-Interactions">below	position := #below</body><body package="Roassal2-Interactions">bottomLeft	position := #bottomLeft</body><body package="Roassal2-Interactions">center	position := #center</body><body package="Roassal2-Interactions">right	position := #right</body><body package="Roassal2-Interactions">top	position := #top</body></methods><methods><class-id>Roassal2.RTAbstractLabeled</class-id> <category>testing</category><body package="Roassal2-Interactions">isBelow	^ position = #below</body><body package="Roassal2-Interactions">isBottomLeft	^ position = #bottomLeft</body><body package="Roassal2-Interactions">isCenter	^ position = #center</body><body package="Roassal2-Interactions">isLeft	^ position = #left</body><body package="Roassal2-Interactions">isRight	^ position = #right</body><body package="Roassal2-Interactions">isTop	^ position = #top</body></methods><methods><class-id>Roassal2.RTAbstractLabeled</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.		"Labels should be in the back per default"	shouldBeInTheBack := true.</body></methods><methods><class-id>Roassal2.RTAbstractLabeled</class-id> <category>visitor</category><body package="Roassal2-Interactions">accept: aVisitor with: args	aVisitor visitLabelledInteraction: self with: args</body></methods><methods><class-id>Roassal2.RTAbstractLabeled</class-id> <category>public</category><body package="Roassal2-Interactions">removeLabelFrom: aRTElement 	| callback label |	callback := aRTElement attributeAt: #RTLabelledCallback ifAbsent: [ ^ self ].	aRTElement trachelShape removeCallback: callback ifAbsent: [ ].	label := aRTElement attributeAt: #RTLabelledLabel ifAbsent: [ ^ self ].	label remove.	aRTElement		removeAttributeAt: #RTLabelledCallback;		removeAttributeAt: #RTLabelledLabel.</body></methods><methods><class-id>Roassal2.RTAbstractLabeled</class-id> <category>utility</category><body package="Roassal2-Interactions">makeLabelHighlightableIfNecessaryBy: element	"Do nothing if there is no need to"	highlightable ifFalse: [ ^ self ].		labelTrachel color: lowColor.	element when: TRMouseEnter do: [ :evt | labelTrachel color: color. labelTrachel pushFront. evt signalUpdate ].	element when: TRMouseLeave do: [ :evt | labelTrachel color: lowColor. self pushBackLabelIfNecessary. evt signalUpdate ].</body><body package="Roassal2-Interactions">pushBackLabelIfNecessary	"move the label in the back, if configured properly"	shouldBeInTheBack ifTrue: [		labelTrachel pushBack ]</body></methods><methods><class-id>Roassal2.RTLabeled</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	| s t |	"We first get a reference to the canvas, and then we add the shape in it"	"We are using the variable canvas to let the user specificy the canvas (or the view) before 	adding the element into it"	"Make sure that if we remove the element, the trachel shape is also removed"	"Not really nice. Maybe a different solution could be to have a double dispatch"	t := text rtValue: element.	t isNil		ifTrue: [ ^ self ].	s := element trachelShape.	labelTrachel := TRLabelShape new text: t asString.	labelTrachel color: (color rtValue: element).	labelTrachel fontSize: (fontSize rtValue: element model).	canvas := canvas rtValue: element.	canvas addShape: labelTrachel.	self pushBackLabelIfNecessary.	self makeLabelHighlightableIfNecessaryBy: element.	self registerRemoveCallbackForElement: element.	(element isKindOf: RTEdge)		ifTrue: [ TRConstraint				stick: labelTrachel				between: element from trachelShape				and: element to trachelShape				offset: offsetOnEdge.			^ labelTrachel ].	self positionLabelAgainst: s.	^ labelTrachel</body><body package="Roassal2-Interactions">positionLabelAgainst: s	"Argument is a trachel shape"	self isTop		ifTrue: [ TRConstraint stick: labelTrachel above: s ].	self isBelow		ifTrue: [ TRConstraint stick: labelTrachel below: s ].	self isLeft		ifTrue: [ TRConstraint stick: labelTrachel onTheLeftOf: s ].	self isRight		ifTrue: [ TRConstraint stick: labelTrachel onTheRightOf: s ].	self isCenter		ifTrue: [ TRConstraint stick: labelTrachel onTheCenterOf: s ].	self isBottomLeft		ifTrue: [ TRConstraint stick: labelTrachel onTheBottomLeftOf: s ]</body><body package="Roassal2-Interactions">registerRemoveCallbackForElement: element	| callback |	callback := TRRemoveCallback new		block: [ :shape | labelTrachel remove ].	"Make sure that if we remove the element, the trachel shape is also removed"	element trachelShape addCallback: callback.	element		attributeAt: #RTLabelledCallback put: callback;		attributeAt: #RTLabelledLabel put: labelTrachel</body></methods><methods><class-id>Roassal2.RTLabeled</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	text := #model.	self top.	color := Color gray.	lowColor := Color veryVeryLightGray.		highlightable := false. 	offsetOnEdge := 0.5.	fontSize := TRLabelShape defaultFontSize.	canvas := [ :el | 		el view ifNil: [ self error: 'You are trying to use RTLabelled on an element before adding the element to the view. Two solutions: (i) specify the view to the RTLabelled (using #view:) or (ii) use RTLabelled after having added the element' ].		el view canvas ]</body></methods><methods><class-id>Roassal2.RTLabeled class</class-id> <category>public</category><body package="Roassal2-Interactions">above	"Default behavior"	^ self new</body><body package="Roassal2-Interactions">below	^ self new below</body><body package="Roassal2-Interactions">center	^ self new center</body></methods><methods><class-id>Roassal2.RTShowEdge</class-id> <category>actions</category><body package="Roassal2-Interactions">doHideEdges: element	(element attributes includesKey: #showEdges)		ifFalse: [ ^ self ].	(element attributes at: #showEdges) do: #remove.	element attributes removeKey: #showEdges</body><body package="Roassal2-Interactions">doShowEdges: element	| t edges |	self removeAllAddedEdges.	t := (connectToElements rtValue: element).	t := t copyWithout: nil.	edges := (shape rtValue: element) edgesFrom: (reciber rtValue: element) toAll: t.	element view addAll: edges.	element attributes at: #showEdges put: edges.	self class lastHighlightedElements: edges</body><body package="Roassal2-Interactions">recordElement: anElement	anElement attributes at: #originalColor put: (anElement trachelShape color)</body><body package="Roassal2-Interactions">removeAllAddedEdges	self class lastHighlightedElements ifNil: [ ^ self ].	(self class lastHighlightedElements select: [ :edge | edge view notNil ]) 		do: #remove.	self class lastHighlightedElements: nil</body></methods><methods><class-id>Roassal2.RTShowEdge</class-id> <category>public</category><body package="Roassal2-Interactions">connectTo: aBlock	"Establish some connections"	"aBlock accepts an object and returns a list of objects"	"aBlock return an object or a list of objects to highlight"		"	Here is an example on how to use it, using the Mondrian builder:	| b |	b := RTMondrian new.	b interaction showEdge connectTo: [ :v | Array with: v + 1 ].	b nodes: #(1 2 2 3).	b layout circle initialRadius: 10. 	b	"		connectToElements := [ :el | 		| objects |		objects := aBlock rtValue: el model.		(objects flatCollect: [ :o | el view elementsFromModel: o ]) copyWithout: nil		]</body><body package="Roassal2-Interactions">connectToElements: aBlock	"aBlock accepts a element and returns a list of elements"	"aBlock return an element or a list of elements to highlight"	connectToElements := aBlock</body></methods><methods><class-id>Roassal2.RTShowEdge</class-id> <category>accessing</category><body package="Roassal2-Interactions">connectToElements	^ connectToElements</body><body package="Roassal2-Interactions">reciber	^ reciber</body><body package="Roassal2-Interactions">reciber: anElementOrBlock	reciber := anElementOrBlock</body><body package="Roassal2-Interactions">shape	"Return the line shape"	^ shape</body><body package="Roassal2-Interactions">shape: aLineShapeOrABlock	"Set the line shape used to draw the edges"	"The argument is rtValued against the element to display"	shape := aLineShapeOrABlock</body></methods><methods><class-id>Roassal2.RTShowEdge</class-id> <category>configuration</category><body package="Roassal2-Interactions">highlightedColor	^ self class highlightedColor</body></methods><methods><class-id>Roassal2.RTShowEdge</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	element		when: TRMouseEnter		do: [ :e | 			self doShowEdges: element.			e signalUpdate ].	element		when: TRMouseLeave		do: [ :e | 			self doHideEdges: element.			e signalUpdate ]</body></methods><methods><class-id>Roassal2.RTShowEdge</class-id> <category>visitor</category><body package="Roassal2-Interactions">accept: aVisitor with: args	aVisitor visitShowEdgeInteraction: self with: args</body></methods><methods><class-id>Roassal2.RTShowEdge</class-id> <category>initialize</category><body package="Roassal2-Interactions">initialize	super initialize.	connectToElements := [ :el | Array with: el ].	reciber := #yourself.	self shape: RTLine</body></methods><methods><class-id>Roassal2.RTShowEdge class</class-id> <category>reset shape</category><body package="Roassal2-Interactions">lastHighlightedElements	^ lastHighlightedElements</body><body package="Roassal2-Interactions">lastHighlightedElements: elements	lastHighlightedElements := elements</body></methods><methods><class-id>Roassal2.RTMenuItem</class-id> <category>initialize-release</category><body package="Roassal2-Builder-Menu">initialize	super initialize.	selected := false.	name := ''.	callback := [  ].	after := nil.</body></methods><methods><class-id>Roassal2.RTMenuItem</class-id> <category>accesing</category><body package="Roassal2-Builder-Menu">after	^ after</body><body package="Roassal2-Builder-Menu">after: ablock	after := ablock</body><body package="Roassal2-Builder-Menu">callback	^ callback</body><body package="Roassal2-Builder-Menu">callback: ablock	callback := ablock</body><body package="Roassal2-Builder-Menu">color	^ color</body><body package="Roassal2-Builder-Menu">color: aColor	color := aColor</body><body package="Roassal2-Builder-Menu">label	^ (self selected ifTrue:['* '] ifFalse:['']), self name.</body><body package="Roassal2-Builder-Menu">menu: menu	rawmenu := menu.</body><body package="Roassal2-Builder-Menu">menuBackground	^ background</body><body package="Roassal2-Builder-Menu">menuBackground: aShape	background := aShape</body><body package="Roassal2-Builder-Menu">name	^ name</body><body package="Roassal2-Builder-Menu">name: aString	name := aString.</body><body package="Roassal2-Builder-Menu">rawmenu	^ rawmenu</body><body package="Roassal2-Builder-Menu">selected	^ selected</body><body package="Roassal2-Builder-Menu">selected: abool	selected := abool</body></methods><methods><class-id>Roassal2.RTMenuItem</class-id> <category>public</category><body package="Roassal2-Builder-Menu">execute: m	self callback value.	self after ifNotNil: [self after value: m.]</body><body package="Roassal2-Builder-Menu">update	| width pos ext|	width := self menuBackground width.	ext := self rawmenu encompassingRectangle extent.	pos := self menuBackground position + (( (ext x - width)/2 )@0).		self menuBackground extent: ext.	self menuBackground translateTo: pos.	self rawmenu translateTo: pos.</body></methods><methods><class-id>Roassal2.RTMenuItem class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">new	^ super new initialize.</body></methods><methods><class-id>Roassal2.RTAbstractFlowLayout</class-id> <category>configuration</category><body package="Roassal2-Layouts">defaultGapSize ^ 5</body><body package="Roassal2-Layouts">defaultMaxWidth		^ [ :elements | 		(elements size &lt; 4) ifTrue: [ (((elements collect: [ :each | each width * each height]) * 2) sum ) + (elements size * (gapSize squared)) ]			ifFalse: [			((((elements collect: [ :each | each width * each height]) * 2) sum) + (elements size * (gapSize squared))) sqrt ceiling truncated.			]		]</body></methods><methods><class-id>Roassal2.RTAbstractFlowLayout</class-id> <category>testing</category><body package="Roassal2-Layouts">isAlignBottom	^ alignment = #bottom</body><body package="Roassal2-Layouts">isAlignCenter	^ alignment = #center</body><body package="Roassal2-Layouts">isAlignTop	^ alignment = #top</body></methods><methods><class-id>Roassal2.RTAbstractFlowLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">gapSize		^gapSize</body><body package="Roassal2-Layouts">gapSize: aSizeInPixels		gapSize := aSizeInPixels</body><body package="Roassal2-Layouts">maxWidth: aSizeInPixels		maxWidth := aSizeInPixels</body></methods><methods><class-id>Roassal2.RTAbstractFlowLayout</class-id> <category>private</category><body package="Roassal2-Layouts">maxWidth		^maxWidth</body></methods><methods><class-id>Roassal2.RTAbstractFlowLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize		super initialize.	maxWidth := self defaultMaxWidth.	gapSize := self defaultGapSize.</body></methods><methods><class-id>Roassal2.RTAbstractFlowLayout</class-id> <category>alignment</category><body package="Roassal2-Layouts">alignBottom	alignment := #bottom</body><body package="Roassal2-Layouts">alignCenter	alignment := #center</body><body package="Roassal2-Layouts">alignTop	alignment := #top</body></methods><methods><class-id>Roassal2.RTAbstractFlowLayout class</class-id> <category>instance creation</category><body package="Roassal2-Layouts">withMaxWidth: anInteger		^(self new)		maxWidth: anInteger;		yourself</body><body package="Roassal2-Layouts">withMaxWidth: anInteger withGap: anotherInteger		^(self new)		maxWidth: anInteger;		gapSize: anotherInteger;		yourself</body></methods><methods><class-id>Roassal2.RTAbstractFlowLayout class</class-id> <category>public</category><body package="Roassal2-Layouts">isAbstract	^ self name = #RTAbstractFlowLayout</body></methods><methods><class-id>Roassal2.RTHorizontalFlowLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements 	| x y maxLastLineWidth nextElement maxNextLineWidth|	x := self gapSize.	y := self gapSize.	maxLastLineWidth := 0.	maxNextLineWidth := 0.		elements do:		[ :anElement | 				(anElement = elements last) ifFalse:  [nextElement := (elements after: anElement)] ifTrue: [nextElement := anElement].				self isAlignBottom ifTrue: [ 			translator translate: anElement to: ((x @ y) + ((anElement width / -2) @ (anElement height / 2))).				y := y + anElement height + (self gapSize).			((y &gt; (self maxWidth rtValue: elements)) | ((y + nextElement height) &gt; (self maxWidth rtValue: elements) ))ifTrue: 				[ y := self gapSize.				maxNextLineWidth := self maxNextLineWidthFrom: nextElement for: elements.				x := x + (1 * self gapSize) + maxNextLineWidth.				maxNextLineWidth := 0.				maxLastLineWidth := 0.				]		].		self isAlignCenter ifTrue: [ 		translator translate: anElement to: ((x @ y) + (0 @ (anElement width / 2))).			y := y + anElement height + (self gapSize).			maxLastLineWidth := maxLastLineWidth max: (anElement width).			((y &gt; (self maxWidth rtValue: elements)) | ((y + nextElement height) &gt; (self maxWidth rtValue: elements) ))ifTrue: 				[ y := self gapSize.				maxNextLineWidth := self maxNextLineWidthFrom: nextElement for: elements.				x := x + (self gapSize) + (maxNextLineWidth /2) + (maxLastLineWidth /2).				maxNextLineWidth := 0.				maxLastLineWidth := 0.				]			].						self isAlignTop ifTrue: [ 			translator translateTopLeftOf: anElement to: x @ y.			y := y + anElement height + (self gapSize).			maxLastLineWidth := maxLastLineWidth max: (anElement width ).			((y &gt; (self maxWidth rtValue: elements)) | ((y + nextElement height) &gt; (self maxWidth rtValue: elements) ))ifTrue: 				[ y := self gapSize.				x := x + (self gapSize) + maxLastLineWidth.				maxLastLineWidth := 0 ] 			].		].</body></methods><methods><class-id>Roassal2.RTHorizontalFlowLayout</class-id> <category>utility</category><body package="Roassal2-Layouts">maxNextLineWidthFrom: ele for: elements	| nextLineY maxNextLineWidth anElement |	anElement := ele.	maxNextLineWidth := 0.	nextLineY := self gapSize.	[ nextLineY &lt; (self maxWidth rtValue: elements) ] whileTrue: [		nextLineY := nextLineY + (self gapSize) + (anElement height).		maxNextLineWidth := maxNextLineWidth max: (anElement width).			(anElement = elements last) ifFalse:  [anElement := (elements after: anElement)]		].	^ maxNextLineWidth</body></methods><methods><class-id>Roassal2.RTHorizontalFlowLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize	super initialize.	self alignTop.</body></methods><methods><class-id>Roassal2.RTScale</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Scaling">domain	^ domain</body><body package="Roassal2-Builder-Grapher-Scaling">domain: anObject	domain := anObject</body><body package="Roassal2-Builder-Grapher-Scaling">interpolate	^ interpolate</body><body package="Roassal2-Builder-Grapher-Scaling">interpolate: anObject	interpolate := anObject</body><body package="Roassal2-Builder-Grapher-Scaling">range	^ range</body><body package="Roassal2-Builder-Grapher-Scaling">range: anObject	range := anObject</body><body package="Roassal2-Builder-Grapher-Scaling">scale: anObject	self subclassResponsibility</body><body package="Roassal2-Builder-Grapher-Scaling">uninterpolate	^ uninterpolate</body><body package="Roassal2-Builder-Grapher-Scaling">uninterpolate: anObject	uninterpolate := anObject</body></methods><methods><class-id>Roassal2.RTScale</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Scaling">rescale	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTScale</class-id> <category>transformations</category><body package="Roassal2-Builder-Grapher-Scaling">invert: anObject	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTScale class</class-id> <category>todo</category><body package="Roassal2-Builder-Grapher-Scaling">ordinal	"TODO"</body><body package="Roassal2-Builder-Grapher-Scaling">pow	"TODO"</body><body package="Roassal2-Builder-Grapher-Scaling">quantile	"TODO"</body><body package="Roassal2-Builder-Grapher-Scaling">quantize	"TODO"</body><body package="Roassal2-Builder-Grapher-Scaling">sqrt	"TODO"</body><body package="Roassal2-Builder-Grapher-Scaling">threshold	"TODO"</body></methods><methods><class-id>Roassal2.RTScale class</class-id> <category>instance creation</category><body package="Roassal2-Builder-Grapher-Scaling">linear	^ RTScaleLinear new.</body><body package="Roassal2-Builder-Grapher-Scaling">log	^ RTScaleLog new</body></methods><methods><class-id>Roassal2.RTScaleLinear</class-id> <category>transformations</category><body package="Roassal2-Builder-Grapher-Scaling">invert: y	^ input scale: y</body></methods><methods><class-id>Roassal2.RTScaleLinear</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Scaling">clamp: x	clamp := x.	self rescale.</body><body package="Roassal2-Builder-Grapher-Scaling">domain: x	super domain: x.	self rescale.</body><body package="Roassal2-Builder-Grapher-Scaling">range: r	super range: r.	self rescale.</body><body package="Roassal2-Builder-Grapher-Scaling">scale: x	^ output scale: x.</body></methods><methods><class-id>Roassal2.RTScaleLinear</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Scaling">initialize	super initialize.	domain := #(0 1).	range := #(0 1).	clamp := false.	interpolate := RTInterpolator.	self rescale.</body></methods><methods><class-id>Roassal2.RTScaleLinear</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Scaling">rescale	| linear |	linear := (domain size min: range size ) &gt; 2		ifTrue: [ RTScalePolylinear ]		ifFalse: [ RTScaleBilinear ].	uninterpolate := clamp		ifTrue: [ RTUninterpolateClamp ]		ifFalse: [ RTUninterpolateNumber ].	output := linear new domain: domain; range: range; 		uninterpolate: uninterpolate; interpolate: interpolate.	output rescale.	input := linear new domain: range; range: domain;		uninterpolate: uninterpolate; interpolate: RTInterpolator.	input rescale.</body></methods><methods><class-id>Roassal2.RTMockElement</class-id> <category>accessing</category><body package="Roassal2-Layouts">position	^ position</body><body package="Roassal2-Layouts">realElement	^ realElement</body><body package="Roassal2-Layouts">realElement: rtElement	realElement := rtElement.	position := rtElement position</body></methods><methods><class-id>Roassal2.RTMockElement</class-id> <category>as yet unclassified</category><body package="Roassal2-Layouts">extent	^ realElement extent</body><body package="Roassal2-Layouts">height	^ realElement height</body><body package="Roassal2-Layouts">view	^ realElement view</body><body package="Roassal2-Layouts">width	^ realElement width</body></methods><methods><class-id>Roassal2.RTMockElement</class-id> <category>actions</category><body package="Roassal2-Layouts">translateTo: aPosition	position := aPosition</body></methods><methods><class-id>Roassal2.RTMockElement</class-id> <category>action</category><body package="Roassal2-Layouts">applyToRealElement	realElement translateTo: position</body></methods><methods><class-id>Roassal2.RTTextBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-TextBuilder">defaultTokenizer	^ RTTextTokenizer new</body><body package="Roassal2-Builder-TextBuilder">initialize	super initialize.	textTokenizer := self defaultTokenizer.	wordShapeBuilder := RTShapeBuilder new.	wordShapeBuilder text.	wordInteractionBuilder := RTInteractionBuilder new.	wordHook := [ :anElement :anInterval | nil ].	hook := [ :anElement | nil ].	padding := 5</body></methods><methods><class-id>Roassal2.RTTextBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-TextBuilder">hook: aOneArgBlock	hook := aOneArgBlock</body><body package="Roassal2-Builder-TextBuilder">padding	^ padding</body><body package="Roassal2-Builder-TextBuilder">padding: aNumber	padding := aNumber</body><body package="Roassal2-Builder-TextBuilder">wordHook: aTwoArgBlock	wordHook := aTwoArgBlock</body><body package="Roassal2-Builder-TextBuilder">wordInteraction	^ wordInteractionBuilder</body><body package="Roassal2-Builder-TextBuilder">wordShape	^ wordShapeBuilder</body></methods><methods><class-id>Roassal2.RTTextBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-TextBuilder">renderIn: aView</body></methods><methods><class-id>Roassal2.RTTextBuilder</class-id> <category>protocol</category><body package="Roassal2-Builder-TextBuilder">addText: aText	^ self buildText: aText.</body><body package="Roassal2-Builder-TextBuilder">addText: aText model: anObject	^ self buildText: aText model: anObject.</body><body package="Roassal2-Builder-TextBuilder">buildText: aText	^ self buildText: aText model: aText.</body><body package="Roassal2-Builder-TextBuilder">buildText: aString in: element	| tokenizedString elements lines |	tokenizedString := textTokenizer tokenize: aString.	lines := RTGroup new.	elements := RTGroup new.	tokenizedString linesDo: [ :eachLine | 		| line |		line := RTGroup new.		eachLine wordsDo: [ :eachWord | | wordElement |			wordElement := RTElement on: eachWord text.			wordHook cull: wordElement cull: eachWord interval.			wordShapeBuilder setUpElements: wordElement.			wordInteractionBuilder setUpElements: wordElement.			line add: wordElement.			elements add: wordElement.			view add: wordElement ].		RTHorizontalLineLayout new gapSize: 0; on: line.		lines add: line ].	RTVerticalLineLayout new gapSize: 0; on: lines.	RTNest new padding: padding; on: element nest: elements.	element attributeAt: self nestedElementsAttribute put: elements.	^ elements</body><body package="Roassal2-Builder-TextBuilder">buildText: aText model: anObject	| el |	el := RTElement on: anObject.	hook value: el.	shapeBuilder setUpElements: el.	interactionBuilder setUpElements: el.	view add: el.	self buildText: aText in: el.	^ el</body></methods><methods><class-id>Roassal2.RTDynamicGrapher</class-id> <category>public - adding</category><body package="Roassal2-Builder-Grapher-Core">add: anObject	| positionInView el |	positionInView := self getPixelPositionOf: (x rtValue: anObject) @ (y rtValue: anObject).	el := shapeBuilder elementOn: anObject.	el translateTo: positionInView.	view add: el.	view signalUpdate.	allAddedElements add: el.	^ el</body><body package="Roassal2-Builder-Grapher-Core">addAll: someObjects	^ someObjects collect: [ :o | self add: o ]</body></methods><methods><class-id>Roassal2.RTDynamicGrapher</class-id> <category>examples</category><body package="Roassal2-Builder-Grapher-Core">example01	"	self new example01	"	| b |	b := RTDynamicGrapher new.	b minX: -200; maxX: 200.	b minY: 0; maxY: 200.	b x: #x; y: #y.	 	b shape circle color: (Color red alpha: 0.3).	b view addMenu: '+ 1' callback: [ b add: 400 atRandom - 200 @ 200 atRandom ].	^ b</body><body package="Roassal2-Builder-Grapher-Core">example02	"	self new example02	"	| b |	b := RTDynamicGrapher new.	b maxX: 100.	b maxY: 100.	b x: #x; y: #y.	 	b shape circle color: (Color red alpha: 0.3).	b view addMenu: '+ 10' callback: [ 			b addAll: ((1 to: 10) collect: [ :i | (100 atRandom @ 100 atRandom) ]) ].	b view addMenu: 'Clean' callback: [ 			b clean ].	^ b</body></methods><methods><class-id>Roassal2.RTDynamicGrapher</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">x	^ x</body><body package="Roassal2-Builder-Grapher-Core">x: anObject	x := anObject</body><body package="Roassal2-Builder-Grapher-Core">y	^ y</body><body package="Roassal2-Builder-Grapher-Core">y: anObject	y := anObject</body></methods><methods><class-id>Roassal2.RTDynamicGrapher</class-id> <category>public - cleaning</category><body package="Roassal2-Builder-Grapher-Core">clean	allAddedElements do: #remove.	self resetAddedElements.	self updateView</body><body package="Roassal2-Builder-Grapher-Core">resetAddedElements	allAddedElements := OrderedCollection new</body><body package="Roassal2-Builder-Grapher-Core">updateView	self view signalUpdate</body></methods><methods><class-id>Roassal2.RTDynamicGrapher</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">createView	^ RTView new</body><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	self defineAxesIfNecessary.	self renderAxis.</body></methods><methods><class-id>Roassal2.RTDynamicGrapher</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	x := #yourself.	y := #yourself.	self resetAddedElements</body></methods><methods><class-id>Roassal2.TRAbstractLineDecoratorShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-ShapesForArrow">baseSize	^ baseSize</body><body package="Roassal2-Trachel-ShapesForArrow">baseSize: aNumber	"Set the base size of the head. Initially, the baseSize is equals to the size of the arrow head."	baseSize := aNumber</body><body package="Roassal2-Trachel-ShapesForArrow">center	"Not sure whether this is right"	^ self to</body><body package="Roassal2-Trachel-ShapesForArrow">color: aColor	self strokePaint: aColor</body><body package="Roassal2-Trachel-ShapesForArrow">encompassingRectangle	^ Rectangle encompassing: (Array with: from with: to)</body><body package="Roassal2-Trachel-ShapesForArrow">from	^ from</body><body package="Roassal2-Trachel-ShapesForArrow">from: anObject	from := anObject</body><body package="Roassal2-Trachel-ShapesForArrow">mySize	^ size</body><body package="Roassal2-Trachel-ShapesForArrow">percentage	^ percentage</body><body package="Roassal2-Trachel-ShapesForArrow">percentage: aNumber	self assert: (aNumber between: 0 and: 1).	percentage := aNumber.</body><body package="Roassal2-Trachel-ShapesForArrow">size: anObject	anObject  = nil 		ifTrue: [ size := self defaultSize. ]		ifFalse: [ size := anObject ]</body><body package="Roassal2-Trachel-ShapesForArrow">to	^ to</body><body package="Roassal2-Trachel-ShapesForArrow">to: anObject	to := anObject</body><body package="Roassal2-Trachel-ShapesForArrow">width	^ width</body><body package="Roassal2-Trachel-ShapesForArrow">width: anObject	anObject  = nil 		ifTrue: [ width := self defaultWidth. ]		ifFalse: [ width := anObject ]</body></methods><methods><class-id>Roassal2.TRAbstractLineDecoratorShape</class-id> <category>defaults</category><body package="Roassal2-Trachel-ShapesForArrow">defaultColor	^ Color white</body><body package="Roassal2-Trachel-ShapesForArrow">defaultSize	^ 10</body><body package="Roassal2-Trachel-ShapesForArrow">defaultWidth	^ 1</body></methods><methods><class-id>Roassal2.TRAbstractLineDecoratorShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-ShapesForArrow">accept: aVisitor	aVisitor visitAbstractLineDecorationShape: self</body></methods><methods><class-id>Roassal2.TRAbstractLineDecoratorShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-ShapesForArrow">initialize	super initialize.	size := self defaultSize.	baseSize := size.		color := self defaultColor.	strokePaint := self defaultColor.	width := 1.	open := false.	percentage := 1.</body></methods><methods><class-id>Roassal2.TRAbstractLineDecoratorShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-ShapesForArrow">drawOn: athensCanvas	from ~= to 		ifTrue: [  			athensCanvas pathTransform restoreAfter: [ 				athensCanvas setShape: self path.				open 					ifFalse: [						athensCanvas setPaint: self themedColor.						athensCanvas draw ].				(athensCanvas setStrokePaint: self themedStrokeColor) width: self width.				athensCanvas draw ] ]</body></methods><methods><class-id>Roassal2.TRAbstractLineDecoratorShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-ShapesForArrow">computePath	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRAbstractLineDecoratorShape</class-id> <category>testing</category><body package="Roassal2-Trachel-ShapesForArrow">isOpen	^ open</body></methods><methods><class-id>Roassal2.TRAbstractLineDecoratorShape class</class-id> <category>as yet unclassified</category><body package="Roassal2-Trachel-ShapesForArrow">from: aPoint to: anotherPoint width: aNumber size: anotherNumber color: aColor stroke: anotherColor	^self new from: aPoint; to: anotherPoint; width: aNumber; size: anotherNumber; color: aColor; strokePaint: anotherColor.</body><body package="Roassal2-Trachel-ShapesForArrow">fromEdge: anEdge size: aNumber	^self fromLine: anEdge trachelShape size: aNumber</body><body package="Roassal2-Trachel-ShapesForArrow">fromEdge: anEdge size: aNumber color: aColor	^self fromLine: anEdge trachelShape size: aNumber color: aColor</body><body package="Roassal2-Trachel-ShapesForArrow">fromLine: aTRLine size: aNumber	^self from: aTRLine from to: aTRLine to width: aTRLine width size: aNumber color: aTRLine color stroke: aTRLine strokePaint.</body><body package="Roassal2-Trachel-ShapesForArrow">fromLine: aTRLine size: aNumber color: aColor	^self from: aTRLine from to: aTRLine to width: aTRLine width size: aNumber color: aColor stroke: aTRLine strokePaint.</body></methods><methods><class-id>Roassal2.TREmptyArrowHeadShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-ShapesForArrow">initialize	super initialize.</body></methods><methods><class-id>Roassal2.TREmptyArrowHeadShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-ShapesForArrow">accept: aVisitor	aVisitor visitArrowHeadShape: self</body></methods><methods><class-id>Roassal2.TREmptyArrowHeadShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-ShapesForArrow">computePath	| vector r u unit middle endPoint |	vector := self to - self from. 	r := vector r.	r = 0 ifTrue: [ ^ false ].	u := vector normal.	unit := vector / r.	endPoint := self to - (vector * (1-percentage)).	middle := endPoint - (unit * size). 	left :=  middle - (u * size).	right := middle + (u * size).	path := self athensCanvas		createPath: [ :builder | 			builder				absolute;				moveTo: endPoint;				lineTo: left;				lineTo: right;				lineTo: endPoint. ]</body></methods><methods><class-id>Roassal2.RTMakeEdgeNotUpdatable</class-id> <category>hooks</category><body package="Roassal2-Interactions-MorphingView">initializeElement: edge	edge shape 		colorElement: [ :l | l trachelShape color ];		width: [ :l | l trachelShape width ]</body></methods><methods><class-id>Roassal2.RTFocusAnimation</class-id> <category>public</category><body package="Roassal2-Builder-CircularMap">on: el during: seconds	| initialScale initialPosition finalScale finalPosition rec sc |	canvas := el view canvas.	initialScale := canvas camera scale.	initialPosition := canvas camera position.		rec := el encompassingRectangle.	finalPosition := rec center.	sc :=canvas extent / (rec extent * 1.1).	finalScale := (sc x &lt; sc y ) ifTrue: [sc x] ifFalse: [sc y].		anime1 := TRVIAnimatedValue new 		evaluator: [ :t | initialScale interpolateTo: finalScale at: t ];		timer: (TRVITimer new cycleLength: seconds);		yourself.	anime2 := TRVIAnimatedValue new		evaluator: [ :t | initialPosition interpolateTo: finalPosition at: t ];		timer: (TRVITimer new cycleLength: seconds);		yourself.</body></methods><methods><class-id>Roassal2.RTFocusAnimation</class-id> <category>instance creation</category><body package="Roassal2-Builder-CircularMap">on: ele	^ self on: ele during: 1</body></methods><methods><class-id>Roassal2.RTFocusAnimation</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-CircularMap">hasCompleted	^ anime1 hasCompleted</body><body package="Roassal2-Builder-CircularMap">refresh	canvas camera scale: anime1 value.	canvas camera translateTo: anime2 value.	canvas signalUpdate</body><body package="Roassal2-Builder-CircularMap">start	anime1 start.	anime2 start.	canvas signalUpdate.</body></methods><methods><class-id>Roassal2.RTFocusAnimation class</class-id> <category>instance creation</category><body package="Roassal2-Builder-CircularMap">on: element	element view addAnimation: (self new on: element)</body></methods><methods><class-id>Roassal2.RTColoredTextLegendItem</class-id> <category>accessing</category><body package="Roassal2-Builder-Legend">model	^ model</body><body package="Roassal2-Builder-Legend">model: anObject	model := anObject</body><body package="Roassal2-Builder-Legend">text	^ text</body><body package="Roassal2-Builder-Legend">text: aStringOrABlockOrASymbol	text := aStringOrABlockOrASymbol</body></methods><methods><class-id>Roassal2.RTColoredTextLegendItem</class-id> <category>hooks</category><body package="Roassal2-Builder-Legend">execute	^ RTGroup new add: 			((self newLabelShape: text) elementOn: model); yourself</body></methods><methods><class-id>Roassal2.RTBorderAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">basicEndingPointOf: anEdge	^ self basicPointFrom: anEdge to to: anEdge from of: anEdge</body><body package="Roassal2-AttachPoint">basicPointFrom: fromElement to: toElement of: anEdge	| source target line shift |	source := self geometryFor: fromElement.	target := self geometryFor: toElement.	shift := self offsetNormalFor: anEdge.	line := GLineSegment from: source center to: target center.	shift := (line vector = (0@0) 		ifTrue: [ -1 @ 0]		ifFalse: [ line vector normal ]) * shift.	anEdge from = toElement		ifTrue: [ shift := shift * -1 ].	line := GLineSegment from: source center + shift to: target center + shift.	^ self borderPointFrom: source to: target via: line</body><body package="Roassal2-AttachPoint">basicStartingPointOf: anEdge	^ self basicPointFrom: anEdge from to: anEdge to of: anEdge</body><body package="Roassal2-AttachPoint">borderPointFrom: aSource to: aTarget via: aLine	^ ((aLine intersect: aSource) detectMin: [ :p | p dist: aLine to ])		ifNil: [ aSource center ]</body><body package="Roassal2-AttachPoint">offsetNormalFor: anEdge	"Return the offset in case of multiple edges with the same starting and ending points"	| indexOfEdge multipleEdges |	multipleEdges := OrderedCollection new.	multipleEdges		addAll:			(anEdge to connectedEdges				select: [ :e | e from == anEdge from and: [ e to == anEdge to ] ]).	multipleEdges		addAll:			(anEdge to connectedEdges				select: [ :e | e to == anEdge from and: [ e from == anEdge to ] ]).	multipleEdges size &lt;= 1		ifTrue: [ ^ 0 @ 0 ].	indexOfEdge := multipleEdges indexOf: anEdge.	^ (indexOfEdge - 1 - (multipleEdges size / 2)) * offset</body></methods><methods><class-id>Roassal2.RTBorderAttachPoint</class-id> <category>accessing</category><body package="Roassal2-AttachPoint">geometryFor: anElement	"using double dispatch to retrieve the geometry"	^ anElement geometry	"anElement isMultiElement		ifTrue: [ ^ anElement geometryFor: anElement ].	(anElement shape isKindOf: RTEllipse)		ifTrue: [ ^ GEllipse center: anElement position a: anElement width / 2 b: anElement height / 2 ].	(anElement shape isKindOf: RTRoundedBox)		ifTrue: [ | rect r |			r := anElement shape borderRadiusFor: anElement.			rect := GRectangle				origin: anElement encompassingRectangle origin				corner: anElement encompassingRectangle corner.			^ GRoundedRectangle rectangle: rect borderRadius: r ].	^ GRectangle		origin: anElement encompassingRectangle origin		corner: anElement encompassingRectangle corner"</body><body package="Roassal2-AttachPoint">offset: aNumber	offset := aNumber</body></methods><methods><class-id>Roassal2.RTBorderAttachPoint</class-id> <category>initialization</category><body package="Roassal2-AttachPoint">initialize	super initialize.	offset := 5</body></methods><methods><class-id>Roassal2.RTAbstractElasticBoxInteraction</class-id> <category>hooks</category><body package="Roassal2-Selection">initializeElement: anElement	view := anElement.	view removeInteractionIfPresent: RTDraggableView.	view removeInteractionIfPresent: self class.	draggingView := false.	view canvas when: events first do: [ :e | draggingView := true ].	view canvas		when: events second		do: [ :e | 			draggingView := false.			self selectionStartFromEvent: e ].	view canvas		when: TRMouseDragging		do:			[ :e | 			draggingView				ifTrue: [ self dragViewWithEvent: e ]				ifFalse: [ self updateSelectableShapeWithEvent: e ] ].	view canvas		when: TRMouseDragEnd		do:			[ :e | 			draggingView				ifTrue: [ draggingView := false ]				ifFalse: [ self selectionEndFromEvent: e ] ]</body></methods><methods><class-id>Roassal2.RTAbstractElasticBoxInteraction</class-id> <category>util</category><body package="Roassal2-Selection">createShapeForView	| s |	s := shapeBuilder elementOn: self.	view add: s.	view attributes at: self key put: s.	^ s</body><body package="Roassal2-Selection">getOrCreateShapeForView	^ (view attributes includesKey: self key) 		ifTrue: [ view attributes at: self key ]		ifFalse: [ self createShapeForView ].</body><body package="Roassal2-Selection">getSelectedElementsWith: s	"override this"	^ #()</body><body package="Roassal2-Selection">removeSelection: aGroup	"nothing but subclasses can override"</body><body package="Roassal2-Selection">removeShape	| s |	s := (self getOrCreateShapeForView).	s remove.	view attributes removeKey: self key.	view signalUpdate.	^ s</body><body package="Roassal2-Selection">updateSelectableShapeWithEvent: event	| s newgroup |	s := self getOrCreateShapeForView.		self updateShape: s with: event.		newgroup := self getSelectedElementsWith: s.		group = newgroup ifFalse: [ | evt |		self removeSelection: group.		group := newgroup.		evt := RTSelectionChange newFrom: event.		evt shape: s.		evt group: group.		self announcer announce: evt. ].	view signalUpdate.</body><body package="Roassal2-Selection">updateShape: s with: e	"Update for box shape"	| p k o extent | 	p := e positionFromCamera.	k := #rtorigin.	(s attributes includesKey: k) ifTrue: [		o := s attributes at: k.		extent :=  p - o.		(allowNegatedBox and: [ extent x &lt; 0 ])			ifTrue: [ 				extent := (extent x negated)@extent y. 				o := (o x - extent x)@ o y ].		(allowNegatedBox and: [ extent y &lt; 0 ])			ifTrue: [ 				extent := extent x @ (extent y negated). 				o := o x @ (o y - extent y) ].		s trachelShape extent: extent.		s translateTo: o + (extent /2).		] ifFalse: [		s translateTo: p.		s attributes at: k put: p].</body></methods><methods><class-id>Roassal2.RTAbstractElasticBoxInteraction</class-id> <category>accessing</category><body package="Roassal2-Selection">allowNegatedBox	^ allowNegatedBox</body><body package="Roassal2-Selection">allowNegatedBox: aBool	allowNegatedBox := aBool</body><body package="Roassal2-Selection">announcer	^ announcer</body><body package="Roassal2-Selection">announcer: anAnnouncer	announcer := anAnnouncer.</body><body package="Roassal2-Selection">group	^ group</body><body package="Roassal2-Selection">key	^ key</body><body package="Roassal2-Selection">key: anObject	key := anObject</body><body package="Roassal2-Selection">shapeBuilder	^ shapeBuilder</body></methods><methods><class-id>Roassal2.RTAbstractElasticBoxInteraction</class-id> <category>selection events</category><body package="Roassal2-Selection">dragViewWithEvent: e	view canvas camera translateBy: e step negated / view canvas camera scale.	e signalUpdate</body><body package="Roassal2-Selection">selectionEndFromEvent: aTrachelEvent	| evt |	evt := RTSelectionEnd newFrom: aTrachelEvent.	evt group: group.	evt shape: self removeShape.	self announcer announce: evt</body><body package="Roassal2-Selection">selectionStartFromEvent: aTrachelEvent	| evt |	evt := RTSelectionStart newFrom: aTrachelEvent.	group := RTGroup new.	evt group: group.	evt shape: self getOrCreateShapeForView.	self announcer announce: evt.</body></methods><methods><class-id>Roassal2.RTAbstractElasticBoxInteraction</class-id> <category>public - configuration</category><body package="Roassal2-Selection">leftRight	events := Array with: TRMouseLeftDragStart with: TRMouseRightDragStart</body><body package="Roassal2-Selection">rightLeft	events := Array with: TRMouseRightDragStart with: TRMouseLeftDragStart</body></methods><methods><class-id>Roassal2.RTAbstractElasticBoxInteraction</class-id> <category>announce</category><body package="Roassal2-Selection">when: anEvent do: aBlock	self announcer when: anEvent do: aBlock</body></methods><methods><class-id>Roassal2.RTAbstractElasticBoxInteraction</class-id> <category>initialization</category><body package="Roassal2-Selection">initialize	| base |	super initialize.	self rightLeft.	shapeBuilder := RTShapeBuilder new.	base := Color r: 51 g: 153 b: 255 range: 255.	shapeBuilder rectangle borderColor: base ; color: (base alpha: 0.2).	self key: #rtSelectorShape.	self allowNegatedBox: true.	announcer := Announcer new.	view := nil.	group := #().</body></methods><methods><class-id>Roassal2.RTInterpolator</class-id> <category>accessing</category><body package="Roassal2-Experimental">interpolate: anObject	self subclassResponsibility</body><body package="Roassal2-Experimental">start: anObject	start := anObject</body><body package="Roassal2-Experimental">stop: anObject	stop := anObject</body></methods><methods><class-id>Roassal2.RTInterpolator class</class-id> <category>as yet unclassified</category><body package="Roassal2-Experimental">interpolate: a and: b	| clazz |	clazz := self interpolatorFor: b.		^ clazz new start: a; stop: b .</body><body package="Roassal2-Experimental">interpolatorFor: b	b isString		ifTrue: [ 			('#*' match: b) ifTrue: [ ^ RTColorInterpolator ].			^ nil. "RTStringInterpolator" ]. "TODO"	b isColor		ifTrue: [ ^ RTColorInterpolator ].	"b isArray		ifTrue: [ ^ RTArrayInterpolator ].	b isNumber		ifFalse: [^ RTObjectInterpolator]" "TODO"	^ RTNumberInterpolator</body></methods><methods><class-id>Roassal2.RTColorInterpolator</class-id> <category>as yet unclassified</category><body package="Roassal2-Experimental">start: anObject	start := Color colorFrom: anObject</body><body package="Roassal2-Experimental">stop: anObject	stop := Color colorFrom: anObject</body></methods><methods><class-id>Roassal2.RTColorInterpolator</class-id> <category>accessing</category><body package="Roassal2-Experimental">interpolate: t	^ Color		r: start red + ((stop red - start red) * t)		g: start green + ((stop green - start green)  * t)		b: start blue + ((stop blue - start blue) * t)		alpha: start alpha + ((stop alpha - start alpha) * t)</body></methods><methods><class-id>Roassal2.RTAction class</class-id> <category>public</category><body package="Roassal2-Core">on: element	"override this method to particularize the animation. 	This method should return the animation"	self subclassResponsibility</body><body package="Roassal2-Core">on: element in: view	| anim |	anim := self on: element.	view addAnimation: anim.	anim start</body></methods><methods><class-id>Roassal2.RTBlink</class-id> <category>util</category><body package="Roassal2-Core">highlight: element	^ self class highlight: element</body><body package="Roassal2-Core">highlight: element color: aColor	^ self class highlight: element color: aColor</body><body package="Roassal2-Core">set: element color: aColor	^ self class set: element color: aColor</body><body package="Roassal2-Core">unhighlight: element	^ self class unhighlight: element</body></methods><methods><class-id>Roassal2.RTBlink</class-id> <category>initialization</category><body package="Roassal2-Core">initialize	super initialize.	color := self defaultColor.</body></methods><methods><class-id>Roassal2.RTBlink</class-id> <category>testing</category><body package="Roassal2-Core">isHighlighted: element	^ self class isHighlighted: element</body></methods><methods><class-id>Roassal2.RTBlink</class-id> <category>configuration</category><body package="Roassal2-Core">defaultColor	^ self class defaultColor</body><body package="Roassal2-Core">nbOfSecondsLightOn	^ 1</body></methods><methods><class-id>Roassal2.RTBlink</class-id> <category>accessing</category><body package="Roassal2-Core">color	"Return a color, a symbol or a block"	^ color</body><body package="Roassal2-Core">color: aColorOrABlockOrASymbol	color := aColorOrABlockOrASymbol</body></methods><methods><class-id>Roassal2.RTBlink</class-id> <category>public</category><body package="Roassal2-Core">on: element	| anim |	self highlight: element color: (color rtValue: element).	anim := RTNopAnimation new		waitFor: self nbOfSecondsLightOn after: [ self unhighlight: element ].	element view addAnimation: anim.	anim start.	^ anim</body></methods><methods><class-id>Roassal2.RTBlink class</class-id> <category>public</category><body package="Roassal2-Core">highlightElements: elements	^ elements do: [ :el | self highlight: el ]</body><body package="Roassal2-Core">highlightElements: elements color: aColor	^ elements do: [ :el | self highlight: el color: aColor ]</body><body package="Roassal2-Core">highlightIncomingEdgesOf: element	"Blink all the edges that leave the node element"	element view elementsAsEdge 		do: [ :edg | (edg to == element) ifTrue: [ self highlight: edg ] ].</body><body package="Roassal2-Core">highlightOutgoingEdgesOf: element	"Blink all the edges that leave the node element"	element view elementsAsEdge 		do: [ :edg | (edg from == element) ifTrue: [ self highlight: edg ] ].</body><body package="Roassal2-Core">incomingEdgesOf: element	"Blink all the edges that leave the node element"	element view edges 		do: [ :edg | (edg from == element) ifTrue: [ RTBlink on: edg ] ].</body><body package="Roassal2-Core">on: element	^ self new on: element</body><body package="Roassal2-Core">outgoingEdgesOf: element	"Blink all the edges that leave the node element"	element view edges 		do: [ :edg | (edg to == element) ifTrue: [ RTBlink on: edg ] ].</body><body package="Roassal2-Core">unhighlightElements: elements	^ elements do: [ :el | self unhighlight: el ]</body><body package="Roassal2-Core">unhighlightOutgoingEdgesOf: element	"Blink all the edges that leave the node element"	element view elementsAsEdge 		do: [ :edg | (edg from == element) ifTrue: [ self unhighlight: edg ] ].</body></methods><methods><class-id>Roassal2.RTBlink class</class-id> <category>testing</category><body package="Roassal2-Core">isBlinking: element	^ element attributes includesKey: #oldColor</body><body package="Roassal2-Core">isHighlighted: element	^ element attributes includesKey: #oldColor</body></methods><methods><class-id>Roassal2.RTBlink class</class-id> <category>util</category><body package="Roassal2-Core">highlight: element	self highlight: element color: self defaultColor</body><body package="Roassal2-Core">highlight: element color: aColor	self set: element color: aColor</body><body package="Roassal2-Core">set: element color: aColor	| shape |	shape := element shape.	(element attributes includesKey: #oldColor)		ifFalse: 			[ element attributes at: #oldColor put: element trachelShape color.				element trachelShape					 color: aColor;					 signalUpdate ]</body><body package="Roassal2-Core">unhighlight: element	| shape |	(self isHighlighted: element) ifFalse: [ ^ self ].	shape := element trachelShape.	shape color: (element attributes at: #oldColor).	element attributes removeKey: #oldColor. 	element trachelShape signalUpdate</body></methods><methods><class-id>Roassal2.RTBlink class</class-id> <category>configuration</category><body package="Roassal2-Core">defaultColor	^ Color red</body></methods><methods><class-id>Roassal2.GTriangle</class-id> <category>properties</category><body package="Roassal2-Pharo">area	| semiperimeter|	semiperimeter := self semiperimeter.	^ (self edges 		inject: semiperimeter		into: [ :subProduct :edge |			(semiperimeter - edge length) * subProduct ]) sqrt</body><body package="Roassal2-Pharo">hasTwoIntersectionWithSegm: segm	|i|	i := 0.	self edges do:[:e | (e intersect: segm) isNotNil ifTrue:[ i := i + 1 ] ].	^ (i = 2 or:[ i = 3])</body><body package="Roassal2-Pharo">perimeter	^ self edges		inject: 0		into: [ :subSum :edge |			subSum + edge length ]</body><body package="Roassal2-Pharo">semiperimeter	^ self perimeter / 2</body></methods><methods><class-id>Roassal2.GTriangle</class-id> <category>figures</category><body package="Roassal2-Pharo">circumscribedCircle	| center radius |	center := self edges first perpendicularBisector intersect: self edges last perpendicularBisector.	center isNil ifTrue: [ ^nil ] ifFalse: [ radius := (v1 dist: v2) * (v2 dist: v3) * (v3 dist: v1) / (4 * self area).		^GCircle center: center radius: radius ] 		"^ GCircle		center:			(self edges first perpendicularBisector intersect:			 self edges last perpendicularBisector)		radius: (v1 dist: v2) * (v2 dist: v3) * (v3 dist: v1) / (4 * self area)"</body><body package="Roassal2-Pharo">isDegenerate(v1 = v2 or:[ v1 = v3 or:[ v2 = v3 ]])	ifTrue:[^ true]	ifFalse:[	^  (self edges first length + self edges second length ="closeTo:" (self edges third length)) or: [ 		(self edges second length + self edges third length ="closeTo:" (self edges first length)) or: [ 		 self edges third length + self edges first length ="closeTo:" (self edges second length) ] ]]</body></methods><methods><class-id>Roassal2.GTriangle</class-id> <category>accessing</category><body package="Roassal2-Pharo">edges	^ self edgesByOpositeVertex values</body><body package="Roassal2-Pharo">edgesByOpositeVertex	^ edgesByOpositeVertex ifNil: [		edgesByOpositeVertex := (Array with:			v1 -&gt; (GSegment with: v2 with: v3) with:			v2 -&gt; (GSegment with: v3 with: v1) with:	   		v3 -&gt; (GSegment with: v1 with: v2) ) asDictionary ]</body><body package="Roassal2-Pharo">vertices	^ Array with: v1 with: v2 with: v3</body></methods><methods><class-id>Roassal2.GTriangle</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body><body package="Roassal2-Pharo">initializeWith: aPoint1 with: aPoint2 with: aPoint3	super initialize.	v1 := aPoint1.	v2 := aPoint2.	v3 := aPoint3</body></methods><methods><class-id>Roassal2.GTriangle class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body><body package="Roassal2-Pharo">with: aPoint1 with: aPoint2 with: aPoint3	^ self new initializeWith: aPoint1 with: aPoint2 with: aPoint3</body></methods><methods><class-id>Roassal2.RTMapBuilder</class-id> <category>adding</category><body package="Roassal2-Builder-Map">cities	^ cityBuilder</body><body package="Roassal2-Builder-Map">cities: strings	^ self cities: strings named: #yourself</body><body package="Roassal2-Builder-Map">cities: objects named: aBlockOrSymbol	"Not sure why we need to copy each object"	cities addAll: (objects collect: [ :o | o copy ]).	cityBuilder name: aBlockOrSymbol.	^ cityBuilder</body><body package="Roassal2-Builder-Map">cityObjects	^ cities</body><body package="Roassal2-Builder-Map">countries: strings	^ self countries: strings named: #yourself</body><body package="Roassal2-Builder-Map">countries: objects named: aBlockOrSymbol	countries := OrderedCollection new.	objects do: [ :o | countries add: o ].	countryNames := aBlockOrSymbol.</body></methods><methods><class-id>Roassal2.RTMapBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Map">cityBuilder	^ cityBuilder</body><body package="Roassal2-Builder-Map">color: aColorOrBlock	color := aColorOrBlock.</body><body package="Roassal2-Builder-Map">routes	^ routeBuilder</body><body package="Roassal2-Builder-Map">scale	^ scale</body><body package="Roassal2-Builder-Map">scale: aNumber	scale := aNumber.</body><body package="Roassal2-Builder-Map">withPopup	self withPopup: [ :e | e asString ]</body><body package="Roassal2-Builder-Map">withPopup: aBlockOrSymbol	popup := aBlockOrSymbol</body></methods><methods><class-id>Roassal2.RTMapBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Map">initialize	super initialize.	countries := #().	cities := OrderedCollection new.	cityBuilder := RTCityBuilder new.	cityBuilder mapBuilder: self.	routeBuilder := RTRouteBuilder new.	routeBuilder mapBuilder: self.	scale := 1.</body></methods><methods><class-id>Roassal2.RTMapBuilder</class-id> <category>utility</category><body package="Roassal2-Builder-Map">geoDistanceBetween: aPoint and: anotherPoint	"http://www.movable-type.co.uk/scripts/latlong.html"	| r lat1 lat2 lon1 lon2 dLat dLon a c |	r := 6371.	lat1 := aPoint x degreesToRadians.	lat2 := anotherPoint x degreesToRadians.	lon1 := aPoint y degreesToRadians.	lon2 := anotherPoint y degreesToRadians.		dLat := (lat2 - lat1).	dLon := (lon2 - lon1).		a := ((dLat / 2) sin squared) + (((dLon / 2) sin squared) * (lat1 cos) * (lat2 cos)).	c := 2 * (a sqrt arcTan: (1 - a) sqrt).		^ r * c</body><body package="Roassal2-Builder-Map">refreshView	cityElements do: [ :c |		|w h|		w := cityBuilder shape width rtValue: c.		h := cityBuilder shape height rtValue: c.		self view addAnimation: (RTColorTransitionAnimation new										toColor: (cityBuilder shape color rtValue: c)										during: 0.4 on: c).		self view addAnimation: (RTResizeMove new toExtent: w @ h during: 0.4 on: c).	].	periodLabel text: (cityBuilder evolutionPeriod at: cityBuilder step) asString.	self view canvas signalUpdate.</body><body package="Roassal2-Builder-Map">translateGeoPositionToPixels: point	"From https://github.com/thebyrd/world-news"		| longitud latitud xFactor xoffset yFactor yoffset |	latitud := point x.	longitud := point y.		xFactor := 2.6938.	xoffset := 465.4.		yFactor := -2.6938.	yoffset := 227.066.	^ ((longitud * xFactor) + xoffset) @ ((latitud * yFactor) + yoffset)</body><body package="Roassal2-Builder-Map">translatePixelsToGeoPosition: point	"From https://github.com/thebyrd/world-news"		| xFactor xoffset yFactor yoffset |		xFactor := 2.6938.	xoffset := 465.4.		yFactor := -2.6938.	yoffset := 227.066.		^ (point y - yoffset / yFactor) @ (point x - xoffset / xFactor)</body></methods><methods><class-id>Roassal2.RTMapBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-Map">renderCities: aView	|elems|	elems := cityBuilder buildCities: cities.	aView addAll: elems.	^ elems</body><body package="Roassal2-Builder-Map">renderCountries: aView	| el name countryElems |	countryElems := OrderedCollection new.	countries do: [ :o |		name := countryNames rtValue: o.		el := (RTSVGPath new			path: (RTSVGPath perform: name asSymbol);			fillColor: (color isNil ifTrue: [nil]				ifFalse: [ color rtValue: o ]);			borderWidth: 0.5;			scale: scale)			element model: o.			popup isNotNil ifTrue: [ el @ (RTPopup text: popup) ].		countryElems add: el.		aView add: el.	].	^ countryElems</body><body package="Roassal2-Builder-Map">renderIn: aView	|countryElems routeElems|	countryElems := self renderCountries: aView.	cityElements := self renderCities: aView.	routeElems := self renderRoutes: aView.	routeElems do: [ :e | e trachelShape pushBack ].	countryElems do: [ :e | e trachelShape pushBack ].	aView @ RTDraggableView.</body><body package="Roassal2-Builder-Map">renderRoutes: aView	|routes|	routes := routeBuilder buildRoutesUsingNames: cityBuilder names.	aView addAll: routes.	^ routes</body></methods><methods><class-id>Roassal2.RTMapBuilder</class-id> <category>public-ui</category><body package="Roassal2-Builder-Map">open	super open.	cityBuilder evolutionPeriod isEmpty ifFalse: [				self view addMenu: '&lt;-' callback: [			cityBuilder stepBack.			self refreshView.		].				self view addMenu: '-&gt;' callback: [			cityBuilder stepForward.			self refreshView.		].		periodLabel := TRLabelShape new			translateLeftTo: 30@20;			text: (cityBuilder evolutionPeriod at: cityBuilder step) asString;			color: Color black.		self view canvas addFixedShape: periodLabel.	]</body></methods><methods><class-id>Roassal2.RTMapBuilder class</class-id> <category>population</category><body package="Roassal2-Builder-Map">africanPopulation	^ RTMapBuilder countriesPopulation select: [ :c | RTSVGPath africa includes: (c at: 1) ].</body><body package="Roassal2-Builder-Map">countriesPopulation	^ #(#(#Aruba 102384) #(#Andorra 78360) #(#Afghanistan 29824536) #(#Angola 20820525) #(#Albania 3162083) #(#ArabWorld 362466629) #(#UnitedArabEmirates 9205651) #(#Argentina 41086927) #(#Armenia 2969081) #(#AmericanSamoa 55128) #(#AntiguaandBarbuda 89069) #(#Australia 22683600) #(#Austria 8462446) #(#Azerbaijan 9297507) #(#Burundi 9849569) #(#Belgium 11142157) #(#Benin 10050702) #(#BurkinaFaso 16460141) #(#Bangladesh 154695368) #(#Bulgaria 7304632) #(#Bahrain 1317827) #(#'Bahamas,The' 371960) #(#BosniaandHerzegovina 3833916) #(#Belarus 9464000) #(#Belize 324060) #(#Bermuda 64806) #(#Bolivia 10496285) #(#Brazil 198656019) #(#Barbados 283221) #(#BruneiDarussalam 412238) #(#Bhutan 741822) #(#Botswana 2003910) #(#CentralAfricanRepublic 4525209) #(#Canada 34880491) #(#Switzerland 7997152) #(#ChannelIslands 161235) #(#Chile 17464814) #(#China 1350695000) #(#IvoryCoast 19839750) #(#Cameroon 21699631) #(#Congo 4337051) #(#Colombia 47704427) #(#Comoros 717503) #(#CapeVerde 494401) #(#CostaRica 4805295) #(#Caribbeansmallstates 6968753) #(#Cuba 11270957) #(#Curacao 151892) #(#CaymanIslands 57570) #(#Cyprus 1128994) #(#CzechRepublic 10514810) #(#Germany 81889839) #(#Djibouti 859652) #(#Dominica 71684) #(#Denmark 5590478) #(#DominicanRepublic 10276621) #(#Algeria 38481705) #(#'EastAsia&amp;Pacific(developingonly)' 1991619000) #(#'EastAsia&amp;Pacific(allincomelevels)' 2233747260) #(#'Europe&amp;CentralAsia(developingonly)' 272058887) #(#'Europe&amp;CentralAsia(allincomelevels)' 899507888) #(#Ecuador 15492264) #(#Egypt 80721874) #(#Euroarea 333791352) #(#Eritrea 6130922) #(#Spain 46217961) #(#Estonia 1339396) #(#Ethiopia 91728849) #(#EuropeanUnion 509036794) #(#Finland 5414293) #(#Fiji 874742) #(#France 65696689) #(#FaeroeIslands 49506) #(#'Micronesia,Fed.Sts.' 103395) #(#Gabon 1632572) #(#GreatBritian 63227526) #(#Georgia 4511800) #(#Ghana 25366462) #(#Guinea 11451273) #(#GM 1791225) #(#GuineaBissau 1663558) #(#EquatorialGuinea 736296) #(#Greece 11280167) #(#Grenada 105483) #(#Greenland 56840) #(#Guatemala 15082831) #(#Guam 162810) #(#Guyana 795369) #(#Highincome 1302107523) #(#'HongKongSAR,China' 7154600) #(#Honduras 7935846) #(#'Heavilyindebtedpoorcountries(HIPC)' 655971763) #(#Croatia 4267000) #(#Haiti 10173775) #(#Hungary 9943755) #(#Indonesia 246864191) #(#IsleofMan 85284) #(#India 1236686732) #(#Ireland 4588798) #(#Iran 76424443) #(#Iraq 32578209) #(#Iceland 320137) #(#Israel 7907900) #(#Italy 60917978) #(#Jamaica 2712100) #(#Jordan 6318000) #(#Japan 127561489) #(#Kazakhstan 16797459) #(#Kenya 43178141) #(#Kyrgyzstan 5582100) #(#Cambodia 14864646) #(#Kiribati 100786) #(#'St.KittsandNevis' 53584) #(#SouthKorea 50004000) #(#Kosovo 1806366) #(#Kuwait 3250496) #(#'LatinAmerica&amp;Caribbean(developingonly)' 581383555) #(#Laos 6645827) #(#Lebanon 4424888) #(#Liberia 4190435) #(#Libya 6154623) #(#'St.Lucia' 180870) #(#'LatinAmerica&amp;Caribbean(allincomelevels)' 608565574) #(#'Leastdevelopedcountries:UNclassification' 878193577) #(#Lowincome 846454901) #(#Liechtenstein 36656) #(#SriLanka 20328000) #(#Lowermiddleincome 2507011903) #(#'Low&amp;middleincome' 5744261290) #(#Lesotho 2051545) #(#Lithuania 2985509) #(#Luxembourg 531441) #(#Latvia 2025473) #(#'MacaoSAR,China' 556783) #(#'St.Martin(Frenchpart)' 30959) #(#Morocco 32521143) #(#Monaco 37579) #(#Moldova 3559541) #(#Madagascar 22293914) #(#Maldives 338442) #(#'MiddleEast&amp;NorthAfrica(allincomelevels)' 395313211) #(#Mexico 120847477) #(#MarshallIslands 52555) #(#Middleincome 4897806389) #(#RepublicofMacedonia 2105575) #(#Mali 14853572) #(#Malta 418366) #(#MyanmarBurma 52797319) #(#'MiddleEast&amp;NorthAfrica(developingonly)' 339560601) #(#Montenegro 621081) #(#Mongolia 2796484) #(#NorthernMarianaIslands 53305) #(#Mozambique 25203395) #(#Mauritania 3796141) #(#Mauritius 1291456) #(#Malawi 15906483) #(#Malaysia 29239927) #(#NorthAmerica 348859337) #(#Namibia 2259393) #(#NewCaledonia 258121) #(#Niger 17157042) #(#Nigeria 168833776) #(#Nicaragua 5991733) #(#Netherlands 16767705) #(#'Highincome:nonOECD' 250285771) #(#Norway 5018869) #(#Nepal 27474377) #(#NewZealand 4433100) #(#'Highincome:OECD' 1051821752) #(#OECDmembers 1256610112) #(#Oman 3314001) #(#Othersmallstates 1.991995691e7) #(#Pakistan 179160111) #(#Panama 3802281) #(#Peru 29987800) #(#Philippines 96706764) #(#Palau 20754) #(#PapuaNewGuinea 7167010) #(#Poland 38542737) #(#PuertoRico 3667084) #(#NorthKorea 24763188) #(#Portugal 10526703) #(#Paraguay 6687361) #(#Pacificislandsmallstates 2252782) #(#FrenchPolynesia 273814) #(#Qatar 2050514) #(#Romania 21326905) #(#Russia 143533000) #(#Rwanda 11457801) #(#SouthAsia 1649249388) #(#SaudiArabia 28287855) #(#Sudan 37195349) #(#Senegal 13726021) #(#Singapore 5312400) #(#SolomonIslands 549598) #(#SierraLeone 5978727) #(#ElSalvador 6297394) #(#SanMarino 31247) #(#Somalia 10195134) #(#Serbia 7223887) #(#'Sub-SaharanAfrica(developingonly)' 9.103898585e8) #(#SouthSudan 10837527) #(#'Sub-SaharanAfrica(allincomelevels)' 9.111261545e8) #(#Smallstates 2.914149191e7) #(#SaoTomeandPrincipe 188098) #(#Suriname 534541) #(#Slovakia 5410267) #(#Slovenia 2058152) #(#Sweden 9516617) #(#Swaziland 1230985) #(#'SintMaarten(Dutchpart)' 39088) #(#Seychelles 87784.90752) #(#Syria 22399254) #(#TurksandCaicosIslands 32427) #(#Chad 12448175) #(#Togo 6642928) #(#Thailand 66785001) #(#Tajikistan 8008990) #(#Turkmenistan 5172931) #(#TimorLeste 1210233) #(#Tonga 104941) #(#TrinidadandTobago 1337439) #(#Tunisia 10777500) #(#RepublicofTurkey 73997128) #(#Tuvalu 9860) #(#Tanzania 47783107) #(#Uganda 36345860) #(#Ukraine 45593300) #(#Uppermiddleincome 2390794486) #(#Uruguay 3395253) #(#UnitedStates 313914040) #(#Uzbekistan 29776850) #(#'St.VincentandtheGrenadines' 109373) #(#Venezuela 29954782) #(#'VirginIslands(U.S.)' 105275) #(#Vietnam 88775500) #(#Vanuatu 247262) #(#Palestine 4046901) #(WesternSahara 513000) #(#World 7046368813) #(#Samoa 188889) #(#Yemen 23852409) #(#SouthAfrica 5.118930661e7) #(#DemocraticRepublicCongo 65705093) #(#Zambia 14075099) #(#Zimbabwe 13724317) #(#SvalbardJanMayen 2642) #(#FrenchGuyana 239450) #(#Taiwan 23340136) #(#FalklandIslandsMalvinas 2932))</body><body package="Roassal2-Builder-Map">publicationPerPopulation^  #(#('Switzerland' 0.04948049) #('Sweden' 0.03949838) #('Denmark' 0.03724673) #('Finland' 0.03512776) #('Iceland' 0.03384176) #('Netherlands' 0.03266005) #('Norway' 0.0323559) #('Monaco' 0.03153357) #('United Kingdom' 0.03034517) #('Australia' 0.03013565) #('New Zealand' 0.0292847) #('Canada' 0.02848185) #('Israel' 0.02841134) #('Singapore' 0.0281434) #('Belgium' 0.02684193) #('Austria' 0.02538793) #('Slovenia' 0.02456816) #('Liechtenstein' 0.02302488) #('Ireland' 0.02280205) #('United States' 0.02250084) #('Germany' 0.02177218) #('France' 0.01953477) #('Spain' 0.01643973) #('Greece' 0.0160182) #('Italy' 0.01575377) #('Czech Republic' 0.01557232) #('Estonia' 0.01429077) #('Japan' 0.01392641) #('Croatia' 0.01346473) #('Portugal' 0.01319425) #('Luxembourg' 0.01267497) #('Korea' 0.01157157) #('Hungary' 0.01128115) #('Greenland' 0.01071429) #('Cyprus' 0.00913291) #('Poland' 0.0089929) #('Lithuania' 0.00829172) #('Bermuda' 0.00745301) #('Faeroe Islands' 0.00668606) #('Bulgaria' 0.00620812) #('New Caledonia' 0.00605143) #('Malta' 0.00601626) #('Grenada' 0.00528995) #('Palau' 0.00510745) #('Latvia' 0.0049776) #('Romania' 0.00432618) #('Kuwait' 0.00423781) #('Barbados' 0.00421932) #('Turkey' 0.00414781) #('Russian Federation' 0.00408719) #('Serbia' 0.00399812) #('Chile' 0.00394931) #('San Marino' 0.00374436) #('Seychelles' 0.0037364) #('Guam' 0.00360543) #('Tunisia' 0.00355685) #('French Polynesia' 0.00341107) #('Malaysia' 0.00339218) #('Brunei Darussalam' 0.00326268) #('Armenia' 0.00315417) #('Jordan' 0.00314134) #('Lebanon' 0.00309093) #('Puerto Rico' 0.00305665) #('Cayman Islands' 0.0029703) #('Argentina' 0.00288041) #('Qatar' 0.00282271) #('Uruguay' 0.00281334) #('Trinidad and Tobago' 0.00279863) #('Macedonia' 0.00273227) #('Iran' 0.00265369) #('Belarus' 0.00262056) #('Oman' 0.00247495) #('Bahrain' 0.00247073) #('South Africa' 0.00244784) #('Ukraine' 0.00241902) #('Brazil' 0.00232119) #('Cuba' 0.00218313) #('Dominica' 0.00216227) #('Saudi Arabia' 0.00208004) #('United Arab Emirates' 0.00206949) #('American Samoa' 0.00204978) #('China' 0.00198446) #('Montenegro' 0.00175661) #('Fiji' 0.00174223) #('Botswana' 0.00172363) #('Georgia' 0.00166009) #('Virgin Islands (U.S.)' 0.00164332) #('Tuvalu' 0.0015213) #('Mexico' 0.00137863) #('Costa Rica' 0.0013508) #('Andorra' 0.00132721) #('Jamaica' 0.00128646) #('Moldova' 0.0012791) #('Thailand' 0.00123095) #('Marshall Islands' 0.00119874) #('Bosnia and Herzegovina' 0.00116017) #('Egypt' 0.00110861) #('Mauritius' 0.00110573) #('Samoa' 0.00093706) #('Panama' 0.00093654) #('Northern Mariana Islands' 0.00091924) #('Gabon' 0.00091696) #('Venezuela' 0.00090597) #('Turks and Caicos Islands' 0.00089432) #('Vanuatu' 0.00086952) #('Antigua and Barbuda' 0.00084204) #('Gambia' 0.00084188) #('Morocco' 0.00083801) #('Azerbaijan' 0.00080366) #('Tonga' 0.00077186) #('Mongolia' 0.00076525) #('Colombia' 0.00075234) #('Belize' 0.00069432) #('Bahamas' 0.00069362) #('Algeria' 0.00066821) #('Namibia' 0.00064132) #('India' 0.00060709) #('Swaziland' 0.00056459) #('Guyana' 0.00053183) #('Albania' 0.00048797) #('Congo' 0.0004729) #('Sri Lanka' 0.0004053) #('Solomon Islands' 0.00040393) #('Maldives' 0.00039889) #('Bhutan' 0.00039767) #('Aruba' 0.00039069) #('Kenya' 0.0003874) #('Zimbabwe' 0.00038282) #('Senegal' 0.00036806) #('Suriname' 0.00035732) #('Cameroon' 0.00034761) #('Kazakhstan' 0.0003366) #('Pakistan' 0.00032448) #('Peru' 0.00029889) #('Ecuador' 0.00029486) #('Ghana' 0.00026906) #('Uzbekistan' 0.00025359) #('Benin' 0.00025232) #('Bolivia' 0.00024428) #('Nigeria' 0.00024256) #('Papua New Guinea' 0.00023985) #('Nepal' 0.00022093) #('Malawi' 0.00021098) #('Burkina Faso' 0.00020486) #('Uganda' 0.0002033) #('Sao Tome and Principe' 0.00020202) #('Guinea-Bissau' 0.00019536) #('Vietnam' 0.00018557) #('Zambia' 0.00018529) #('Iraq' 0.00017914) #('Syrian Arab Republic' 0.00017648) #('Tanzania' 0.00016707) #('Nicaragua' 0.00016106) #('Lesotho' 0.00015549) #('Djibouti' 0.00015471) #('Togo' 0.00015159) #('Equatorial Guinea' 0.00014804) #('Paraguay' 0.00014026) #('Philippines' 0.00013611) #('El Salvador' 0.00012751) #('Bangladesh' 0.00012593) #('Mali' 0.0001191) #('Kiribati' 0.00011906) #('Tajikistan' 0.00010988) #('Sudan' 0.000107) #('Cambodia' 0.00010468) #('Guatemala' 0.00010131) #('Madagascar' 0.00010097) #('Mauritania' 9.194e-5) #('Central African Republic' 8.817e-5) #('Ethiopia' 8.738e-5) #('Honduras' 8.72e-5) #('Comoros' 8.223e-5) #('Indonesia' 8.169e-5) #('Rwanda' 7.864e-5) #('Yemen' 7.203e-5) #('Niger' 6.895e-5) #('Dominican Republic' 6.86e-5) #('Eritrea' 6.035e-5) #('Mozambique' 5.971e-5) #('Sierra Leone' 5.72e-5) #('Haiti' 4.305e-5) #('Turkmenistan' 4.156e-5) #('Timor-Leste' 4.131e-5) #('Guinea' 3.336e-5) #('Burundi' 2.853e-5) #('Liberia' 2.792e-5) #('Chad' 2.249e-5) #('Angola' 2.123e-5) #('Myanmar' 2.04e-5) #('Afghanistan' 1.626e-5) #('Somalia' 5.89e-6))</body></methods><methods><class-id>Roassal2.RTMapBuilder class</class-id> <category>list of countries</category><body package="Roassal2-Builder-Map">countries	^ #(#Afghanistan #Albania #Algeria #Angola #Argentina #Armenia #Australia #Austria #Azerbaijan #Bangladesh #Belarus #Belgium #Belize #Benin #Bhutan #Bolivia #BosniaandHerzegovina #Botswana #Brazil #BruneiDarussalam #Bulgaria #BurkinaFaso #Burundi #Cambodia #Cameroon #Canada #CentralAfricanRepublic #Chad #Chile #China #Colombia #Congo #CostaRica #Croatia #Cuba #Cyprus #CzechRepublic #DemocraticRepublicCongo #Denmark #Djibouti #DominicanRepublic #Ecuador #Egypt #ElSalvador #EquatorialGuinea #Eritrea #Estonia #Ethiopia #FalklandIslandsMalvinas #Fiji #Finland #France #FrenchGuyana #GM #Gabon #Georgia #Germany #Ghana #GreatBritian #Greece #Greenland #Guatemala #Guinea #GuineaBissau #Guyana #Haiti #Honduras #Hungary #Iceland #India #Indonesia #Iran #Iraq #Ireland #Israel #Italy #IvoryCoast #Jamaica #Japan #Jordan #Kazakhstan #Kenya #Kuwait #Kyrgyzstan #Laos #Latvia #Lebanon #Liberia #Libya #Lithuania #Luxembourg #Madagascar #Malawi #Malaysia #Mali #Mauritania #Mexico #Moldova #Mongolia #Morocco #Mozambique #MyanmarBurma #Namibia #Nepal #Netherlands #NewZealand #Nicaragua #Niger #Nigeria #NorthKorea #Norway #NewCaledonia #Oman #Pakistan #Palestine #Panama #PapuaNewGuinea #Paraguay #Peru #Philippines #Poland #Portugal #PuertoRico #Qatar #RepublicofMacedonia #RepublicofTurkey #Romania #Russia #Rwanda #SaudiArabia #Senegal #Serbia #SierraLeone #Slovakia #SolomonIslands #Somalia #SouthAfrica #Lesotho #SouthKorea #Spain #SriLanka #Sudan #Suriname #SvalbardJanMayen #Swaziland #Sweden #Switzerland #Syria #Taiwan #Tajikistan #Tanzania #Thailand #TimorLeste #Togo #Tunisia #Turkmenistan #Uganda #Ukraine #UnitedArabEmirates #UnitedStates #Uruguay #Uzbekistan #Vanuatu #Venezuela #Vietnam #WesternSahara #Yemen #Zambia #Zimbabwe)</body><body package="Roassal2-Builder-Map">southAmerica	^ #(#Argentina #Brazil #Bolivia #Chile #Colombia #Ecuador #Guyana #FrenchGuyana #Paraguay #Peru #Suriname #Uruguay #Venezuela)</body></methods><methods><class-id>Roassal2.RTVerticalMaxValueDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">render		self add: self datasetValues max. 	super render.</body></methods><methods><class-id>Roassal2.RTMultipleColorLinearNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizerOBSOLETE">rtValue: anEntity	| value |	value := self command rtValue: anEntity.	"detect range for the value, retrieve and call corresponding normalizers"	^ (self detectNormalizerFor: value) rtValue: value</body></methods><methods><class-id>Roassal2.RTMultipleColorLinearNormalizer</class-id> <category>initialize-release</category><body package="Roassal2-ColorNormalizerOBSOLETE">initialize	command := #yourself</body><body package="Roassal2-ColorNormalizerOBSOLETE">valueRange: anArrayOfNumbers colorRange: anArrayOfColors	" {1. 2. 3} {Color red. Color yellow. Color green}"		| size start end |	normalizers := Dictionary new.	self assert: anArrayOfNumbers size = anArrayOfColors size.	size := anArrayOfNumbers size.	1 to: size - 1 do: [ :i |		start := anArrayOfNumbers at: i.		end :=  anArrayOfNumbers at: i + 1.		normalizers			at: (start to: end)			put: (RTNColorLinearNormalizer						inContext: (Array with: start with: end)						lowColor: (anArrayOfColors at: i)						highColor: (anArrayOfColors at: i + 1))	].</body></methods><methods><class-id>Roassal2.RTMultipleColorLinearNormalizer</class-id> <category>private-accessing</category><body package="Roassal2-ColorNormalizerOBSOLETE">detectNormalizerFor: aValue	normalizers keysAndValuesDo: [:range :norm |		(range rangeIncludes: aValue)			ifTrue: [^ norm] ].	self error: aValue asString, ' not in declared ranges'</body></methods><methods><class-id>Roassal2.RTMultipleColorLinearNormalizer class</class-id> <category>instance creation</category><body package="Roassal2-ColorNormalizerOBSOLETE">valueRange: anArrayOfNumbers colorRange: anArrayOfColors	^ self new valueRange: anArrayOfNumbers colorRange: anArrayOfColors</body></methods><methods><class-id>Roassal2.RTAbstractAverageDecorator</class-id> <category>utility</category><body package="Roassal2-Builder-Grapher-Decorators">label: aString on: position	"Add a label in the view"	^ self label: aString on: position color: color</body><body package="Roassal2-Builder-Grapher-Decorators">label: aString on: position color: aColor	| e |	e := super label: aString on: position color: aColor.	shapes add: e.	^ e</body><body package="Roassal2-Builder-Grapher-Decorators">lineFrom: fromPoint to: toPoint	| l |	l := super lineFrom: fromPoint to: toPoint.	shapes		add: l from;		add: l to;		add: l.	^ l</body></methods><methods><class-id>Roassal2.RTAbstractAverageDecorator</class-id> <category>drawing-hooks</category><body package="Roassal2-Builder-Grapher-Decorators">render	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractAverageDecorator</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Decorators">color: aColor	"Set the color of the line and the label."	color := aColor.	self lineColor: aColor</body><body package="Roassal2-Builder-Grapher-Decorators">labelConvertion: aBlockOrSymbol	self		deprecated: 'use #withLabel: instead (also #withLabel is implied when using #withLabel:)'.	self withLabel: aBlockOrSymbol</body><body package="Roassal2-Builder-Grapher-Decorators">remove	[ shapes isNotEmpty ]		whileTrue: [ shapes first view ifNotNil: [ shapes first remove ].			shapes removeFirst ].	builder view signalUpdate</body><body package="Roassal2-Builder-Grapher-Decorators">withLabel: aBlockOrSymbol	"This method is used to set how to convert the decorator's value.	Take as argument the decorator's value, as a number and the block has to return a value or a string"	self withLabel.	labelBlock := aBlockOrSymbol</body></methods><methods><class-id>Roassal2.RTAbstractAverageDecorator</class-id> <category>configuration</category><body package="Roassal2-Builder-Grapher-Decorators">lineColor: aColor	"Set the color of the line"	shapeBuilder line color: aColor</body><body package="Roassal2-Builder-Grapher-Decorators">noLabel	shouldHaveLabel := false</body><body package="Roassal2-Builder-Grapher-Decorators">withLabel	shouldHaveLabel := true</body></methods><methods><class-id>Roassal2.RTAbstractAverageDecorator</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Decorators">initialize	super initialize.	self noLabel.	labelBlock := #yourself.	shapes := OrderedCollection new.	color := RTLabel defaultColor</body></methods><methods><class-id>Roassal2.RTAverageDecorator</class-id> <category>drawing-hooks</category><body package="Roassal2-Builder-Grapher-Decorators">render	| values average from to |	values := self datasetValues.	average := values average.	from := builder getPixelPositionOf: builder minX @ average.	to := builder getPixelPositionOf: builder maxX @ average.	self lineFrom: from to: to.		shouldHaveLabel ifTrue: [ 		self label: ((labelBlock rtValue: average) asString) above: to.	]</body></methods><methods><class-id>Roassal2.TRLabelShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">ascent	^ font ascent</body><body package="Roassal2-Trachel-Shapes">center	^ self position</body><body package="Roassal2-Trachel-Shapes">descent	^ font descent</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	^ self transformedEncompassingRectangle</body><body package="Roassal2-Trachel-Shapes">extent	^ self encompassingRectangle extent</body><body package="Roassal2-Trachel-Shapes">extent: newExtent	"Labels cannot have their extent changed."</body><body package="Roassal2-Trachel-Shapes">font	^ font</body><body package="Roassal2-Trachel-Shapes">fontName	"Return the font name used when drawing"	^ fontName</body><body package="Roassal2-Trachel-Shapes">fontName: aFontName	"Set the font name used by the label. You can check the expression		FontChooser new fontListStrings.	to know the different font installed on the system"	fontName := aFontName.	font := self getFontNamed: fontName ForSize: fontSize.	self resetCache</body><body package="Roassal2-Trachel-Shapes">fontSize	^ fontSize</body><body package="Roassal2-Trachel-Shapes">fontSize: aNumber	font := self getFontNamed: fontName ForSize: aNumber.	fontSize := aNumber.	self resetCache</body><body package="Roassal2-Trachel-Shapes">height	^ self encompassingRectangle height</body><body package="Roassal2-Trachel-Shapes">text	^ text</body><body package="Roassal2-Trachel-Shapes">text: aText	| oldExtent newExtent |	oldExtent := self extent.	text := aText.	self resetCache.	newExtent := self extent.	(newExtent ~= oldExtent) ifTrue: [ 		self triggerCallbacksForNewExtent: newExtent oldExtent: oldExtent ].</body><body package="Roassal2-Trachel-Shapes">width	^ self encompassingRectangle width</body></methods><methods><class-id>Roassal2.TRLabelShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint	^ self encompassingRectangle containsPoint: aPoint</body></methods><methods><class-id>Roassal2.TRLabelShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">defaultFontSize	^ self class defaultFontSize</body><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	text := 'Trachel label'.	fontName := self class familyFontName.	self fontSize: self defaultFontSize</body><body package="Roassal2-Trachel-Shapes">resetCache	cachedWidth := nil.	cachedHeight := nil</body></methods><methods><class-id>Roassal2.TRLabelShape</class-id> <category>public</category><body package="Roassal2-Trachel-Shapes">text: aText on: aPosition	self text: aText.	self position: aPosition</body><body package="Roassal2-Trachel-Shapes">translateLeftTo: aPosition	self translateTo: (aPosition - ((self width / -2) @ 0) ) asIntegerPoint</body><body package="Roassal2-Trachel-Shapes">translateRightTo: aPosition	self translateTo: (aPosition + ((self width / -2) @ 0) ) asIntegerPoint</body></methods><methods><class-id>Roassal2.TRLabelShape</class-id> <category>managing font</category><body package="Roassal2-Trachel-Shapes">getFontForSize: aNumber	^ self getFontNamed: fontName ForSize: aNumber</body><body package="Roassal2-Trachel-Shapes">getFontNamed: aFontName ForSize: aNumber	^ self class getFontNamed: aFontName ForSize: aNumber</body><body package="Roassal2-Trachel-Shapes">widthOfText: aString fontSize: aNumber	^ (self getFontForSize: aNumber) widthOfString: aString</body></methods><methods><class-id>Roassal2.TRLabelShape</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">basicEncompassingRectangle	| w h |	w := self textWidth.	h := self textHeight.	^ ((w / -2) @ (h / -2)) extent: (w @ h)</body><body package="Roassal2-Trachel-Shapes">textHeight	"without any transformation"	^ cachedHeight ifNil: [ cachedHeight := font height ]</body><body package="Roassal2-Trachel-Shapes">textWidth	"without any transformation"	"font widthOfString: is a really expensive operation, so we cache it"	^ cachedWidth ifNil: [ cachedWidth := font widthOfString: text ]</body></methods><methods><class-id>Roassal2.TRLabelShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitLabelShape: self</body></methods><methods><class-id>Roassal2.TRLabelShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	"self drawEncompassingRectangleOn: athensCanvas."	athensCanvas pathTransform restoreAfter: [		"Draw the label centered on the position"		athensCanvas pathTransform			multiplyBy: matrix asFloatTransform;			translateBy: ((self textWidth / -2) @ (self textHeight / 2)) asFloatPoint;			translateBy: (0 @ self descent negated) asFloatPoint.		athensCanvas setFont: font.		athensCanvas setPaint: self themedColor.		athensCanvas drawString: text	]</body></methods><methods><class-id>Roassal2.TRLabelShape class</class-id> <category>utility</category><body package="Roassal2-Trachel-Shapes">getFontForSize: aNumber	^ self getFontNamed: self familyFontName ForSize: aNumber</body><body package="Roassal2-Trachel-Shapes">getFontNamed: aFontName ForSize: aNumber	"	self getFontNamed: 'Arial'ForSize: 70	"	^ TRPlatform current fontFamilyName: aFontName pointSize: aNumber</body><body package="Roassal2-Trachel-Shapes">widthOfText: aString fontName: aFontName fontSize: aNumber	^ (self getFontNamed: aFontName ForSize: aNumber) widthOfString: aString</body><body package="Roassal2-Trachel-Shapes">widthOfText: aString fontSize: aNumber	^ (self getFontForSize: aNumber) widthOfString: aString</body></methods><methods><class-id>Roassal2.TRLabelShape class</class-id> <category>configuration</category><body package="Roassal2-Trachel-Shapes">defaultFamilyFontName	^ TRPlatform current defaultFamilyFontName.</body><body package="Roassal2-Trachel-Shapes">defaultFontSize	^ 12</body><body package="Roassal2-Trachel-Shapes">familyFontName	"Default Family font"	^ self defaultFamilyFontName</body></methods><methods><class-id>Roassal2.TRStyledLabelShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">emphasis: anEmphasis	emphasis := anEmphasis isCollection		ifTrue: [ anEmphasis ]		ifFalse: [ Array with: anEmphasis ].	self updateFont</body><body package="Roassal2-Trachel-Shapes">fontName: aFontName	fontName := aFontName.	self updateFont</body><body package="Roassal2-Trachel-Shapes">fontSize: aNumber	fontSize := aNumber.	self updateFont</body></methods><methods><class-id>Roassal2.TRStyledLabelShape</class-id> <category>managing font</category><body package="Roassal2-Trachel-Shapes">getFontNamed: aFontName ForSize: aNumber	^ self getFontNamed: aFontName forSize: aNumber emphasis: emphasis</body><body package="Roassal2-Trachel-Shapes">getFontNamed: aFontName forSize: aNumber emphasis: anEmphasis	^ self class getFontNamed: aFontName forSize: aNumber emphasis: anEmphasis</body><body package="Roassal2-Trachel-Shapes">updateFont	font := self getFontNamed: fontName forSize: fontSize emphasis: emphasis</body></methods><methods><class-id>Roassal2.TRStyledLabelShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	emphasis := #().	super initialize</body></methods><methods><class-id>Roassal2.TRStyledLabelShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	"self drawEncompassingRectangleOn: athensCanvas."	athensCanvas pathTransform		restoreAfter:			[ | advance cls |			cls := TRPlatform current textEmphasisClass.			athensCanvas pathTransform				multiplyBy: matrix asFloatTransform;				translateBy: ((self textWidth / -2) @ (self textHeight / 2)) asFloatPoint;				translateBy: (0 @ self descent negated) asFloatPoint.			athensCanvas setFont: font.			athensCanvas setPaint: color.			advance := athensCanvas drawString: text.			(emphasis includes: cls underlined)				ifTrue: [ athensCanvas drawShape: (0 @ 1 extent: advance x @ 1) ].			(emphasis includes: cls struckOut)				ifTrue:					[ athensCanvas pathTransform						translateBy: (0 @ (self textHeight / 4) negated) asFloatPoint.					athensCanvas drawShape: (0 @ 1 extent: advance x @ 1) ] ]</body></methods><methods><class-id>Roassal2.TRStyledLabelShape class</class-id> <category>utility</category><body package="Roassal2-Trachel-Shapes">getFontNamed: aFontName forSize: aNumber emphasis: anEmphasis	^ (self getFontNamed: aFontName ForSize: aNumber)		emphasized: (anEmphasis inject: 0 into: [ :sum :next | sum + next emphasisCode ])</body><body package="Roassal2-Trachel-Shapes">widthOfText: aString fontName: aFontName fontSize: aNumber emphasis: anEmphasis	^ (self getFontNamed: aFontName forSize: aNumber emphasis: anEmphasis)		widthOfString: aString</body></methods><methods><class-id>Roassal2.RTAbstractDraggable</class-id> <category>accessing</category><body package="Roassal2-Interactions">groupToDrag	"Return the elements to drag and drop"	^ groupToDrag</body><body package="Roassal2-Interactions">groupToDrag: elements	"Set the elements to drag and drop. The variable groupToDrag is initialized with an empty array."	groupToDrag := elements</body></methods><methods><class-id>Roassal2.RTAbstractDraggable</class-id> <category>hooks</category><body package="Roassal2-Interactions">constraintIfNecessary: anElement	"Do nothing"</body><body package="Roassal2-Interactions">initializeElement: element	self assert: [ element class ~~ RTView ] description: 'Please use RTDraggableView instead'.	element when: TRMouseDragging do: [ :e | 		| d t |		t := RTGroup withAll: groupToDrag.		(t includes: element) ifFalse: [ t add: element ].		d := element view canvas camera distanceFromPixelToSpace: e step.		t translateBy: (self transformDistance: d forElement: element). 		self constraintIfNecessary: element.		e signalUpdate ]</body><body package="Roassal2-Interactions">transformDistance: distanceAsPoint forElement: anElement	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractDraggable</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	groupToDrag := #()</body></methods><methods><class-id>Roassal2.RTDraggableSnapToGrid</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	strategy = #topLeft		ifTrue: [ ^ self initializeElementForTopLeft: element ].	strategy = #center		ifTrue: [ ^ self initializeElementForCenter: element ]</body><body package="Roassal2-Interactions">initializeElementForCenter: element	| totalD spacing|	totalD := 0 @ 0.	element when: TRMouseDragStart do: [ :event | totalD := 0 @ 0 ].	spacing := self gridSizeFor: element.	element		when: TRMouseDragging		do:			[ :event | 			| d t |			t := RTGroup withAll: groupToDrag.			(t includes: element)				ifFalse: [ t add: element ].			d := element encompassingRectangle center.			d := d + (element view canvas camera distanceFromPixelToSpace: event step).			totalD := totalD + d.			d := spacing * ((totalD x / spacing) rounded @ (totalD y / spacing) rounded).			totalD := totalD - d.			d := d - element encompassingRectangle center.			t translateBy: d.			event signalUpdate ]</body><body package="Roassal2-Interactions">initializeElementForTopLeft: element	| totalD spacing|	totalD := 0 @ 0.	element when: TRMouseDragStart do: [ :event | totalD := 0 @ 0 ].	spacing := self gridSizeFor: element.	element		when: TRMouseDragging		do:			[ :event | 			| d t |			t := RTGroup withAll: groupToDrag.			(t includes: element)				ifFalse: [ t add: element ].			d := element encompassingRectangle topLeft.			d := d + (element view canvas camera distanceFromPixelToSpace: event step).			totalD := totalD + d.			d := spacing * ((totalD x / spacing) rounded @ (totalD y / spacing) rounded).			totalD := totalD - d.			d := d - element encompassingRectangle topLeft.			t translateBy: d.			event signalUpdate ]</body></methods><methods><class-id>Roassal2.RTDraggableSnapToGrid</class-id> <category>accessing</category><body package="Roassal2-Interactions">center	strategy := #center</body><body package="Roassal2-Interactions">gridSize	^ gridSize</body><body package="Roassal2-Interactions">gridSize: anInteger	"Default value is given by defaultGridSize. Could be 10 for example"	gridSize := anInteger</body><body package="Roassal2-Interactions">gridSizeFor: anElement	anElement view		ifNotNil:			[ :v | 			(v hasAttribute: #RTGridView)				ifTrue: [ ^ (v attributeAt: #RTGridView) gridSize ] ].	^ gridSize</body><body package="Roassal2-Interactions">topLeft	strategy := #topLeft</body></methods><methods><class-id>Roassal2.RTDraggableSnapToGrid</class-id> <category>initialization</category><body package="Roassal2-Interactions">defaultGridSize	^ 10</body><body package="Roassal2-Interactions">initialize	super initialize.	gridSize := self defaultGridSize.	strategy := #topLeft</body></methods><methods><class-id>Roassal2.RTDraggableSnapToGrid class</class-id> <category>instance creation</category><body package="Roassal2-Interactions">center	^ self new		center;		yourself</body></methods><methods><class-id>Roassal2.RTAbstractHighlightable</class-id> <category>initialize</category><body package="Roassal2-Interactions">initialize	super initialize.	self highlightElements: [ :el | Array with: el ]</body></methods><methods><class-id>Roassal2.RTAbstractHighlightable</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	element		when: TRMouseEnter		do: [ :e | 			self doHighlight: element.			e signalUpdate ].	element		when: TRMouseLeave		do: [ :e | 			self doUnhighlight: element.			e signalUpdate ]</body></methods><methods><class-id>Roassal2.RTAbstractHighlightable</class-id> <category>public</category><body package="Roassal2-Interactions">highlight: aBlock	"aBlock return an object or a list of objects to highlight"	highlightElements := [ :el | 		| objects |		objects := aBlock rtValue: el model.		(objects flatCollect: [ :o | el view elementsFromModel: o ]) copyWithout: nil		]</body><body package="Roassal2-Interactions">highlightElements	^ highlightElements</body><body package="Roassal2-Interactions">highlightElements: aBlock	"aBlock return an element or a list of elements to highlight"	highlightElements := aBlock</body><body package="Roassal2-Interactions">highlightObject: aBlock	"aBlock returns an object to highlight"	self highlight: [ :oo | Array with: (aBlock rtValue: oo) ]</body></methods><methods><class-id>Roassal2.RTAbstractHighlightable</class-id> <category>actions</category><body package="Roassal2-Interactions">doHighlight: element	| elements |	self unhighlightRecordedElements.	elements := highlightElements rtValue: element.	elements := elements copyWithout: nil.	elements do: [ :eachElement | self doHighlightElement: eachElement ].	element attributes at: self attributeIdentificator put: elements.	self class lastHighlightedElements: elements</body><body package="Roassal2-Interactions">doHighlightElement: anElement	self subclassResponsibility</body><body package="Roassal2-Interactions">doUnhighlight: element	self unhighlightRecordedElements.	(element hasAttribute: self attributeIdentificator)		ifFalse: [ ^ self ].	(element attributeAt: self attributeIdentificator) 		do: [ :el | self doUnhighlightElement: el ].	element removeAttributeAt: self attributeIdentificator.</body><body package="Roassal2-Interactions">doUnhighlightElement: anElement	self subclassResponsibility</body><body package="Roassal2-Interactions">unhighlightRecordedElements	self class lastHighlightedElements ifNil: [ ^ self ].	self class lastHighlightedElements do: [ :el | self doUnhighlightElement: el ].	self class resetHighlightedElements.</body></methods><methods><class-id>Roassal2.RTAbstractHighlightable</class-id> <category>private</category><body package="Roassal2-Interactions">attributeIdentificator	^ self className asSymbol</body></methods><methods><class-id>Roassal2.RTAbstractHighlightable class</class-id> <category>reset shape</category><body package="Roassal2-Interactions">lastHighlightedElements	^ lastHighlightedElements</body><body package="Roassal2-Interactions">lastHighlightedElements: elements	lastHighlightedElements 		ifNil: [ lastHighlightedElements := elements ]		ifNotNil: [ lastHighlightedElements := lastHighlightedElements, elements ].</body><body package="Roassal2-Interactions">resetHighlightedElements	lastHighlightedElements := nil.</body></methods><methods><class-id>Roassal2.RTAbstractHighlightable class</class-id> <category>public</category><body package="Roassal2-Interactions">allSibblings	"Define the interaction to highlight all the elements having the same (using #=) model"	^ self highlightElements: [ :el | 		el model 			ifNotNil: [ el view elementsFromModel: el model ] 			ifNil: [ #() ] ]		"^ self highlightElements: [ :el | el view elements select: [ :e | e model notNil and: [ e model = el model ] ] ]"</body><body package="Roassal2-Interactions">highlight: aBlock	"aBlock return an element or a list of elements to highlight"	^ self new highlight: aBlock</body><body package="Roassal2-Interactions">highlightElements: aBlock	"aBlock return an element or a list of elements to highlight"	^ self new highlightElements: aBlock</body></methods><methods><class-id>Roassal2.RTKiviatBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Kiviat">activateAxisTitle"activate the axis titles in the view to identify metrics axis"	axisTitle := #activated.</body><body package="Roassal2-Builder-Kiviat">activateHighlight"activate the Highlight of a chart node when mouse is over and reduce alpha of ther chart nodes."	highlight := #activated.</body><body package="Roassal2-Builder-Kiviat">activatePolygons"activate the polygons in the view to identify chart nodes"	polygons := #activated.</body><body package="Roassal2-Builder-Kiviat">axis: aRTKiviatMetric"creation of a metric axis"	| config centralPoint allValues |			allValues := (objects collect: [ :p | (aRTKiviatMetric block)  rtValue: p ]).		aRTKiviatMetric maxValue ifNil: [ aRTKiviatMetric maxValue: ( (allValues isEmpty) ifTrue: [ 0 ] ifFalse: [ allValues max ])].	aRTKiviatMetric minValue: ( (allValues isEmpty) ifTrue: [ 0 ] ifFalse: [ allValues min ]).			config := RTAxisConfiguration new					builder: self;					numberOfTicks: 4;					numberOfLabels: 4;					minValue: 0;					maxValue: aRTKiviatMetric maxValue;					ticksCentered: true;										labelConversion: [ :number | number asFloat round: 2 ];					positionLabel: [ :aLabel :aTick | aLabel translateTo: aTick position + (0 @ 15) ].					(axisTitle = #activated) ifTrue: [ config title: (aRTKiviatMetric named)].											centralPoint := (0@0).		config axisFrom: 0@0 to: (aRTKiviatMetric modelBlock value: (self getNormalizedValue:(aRTKiviatMetric maxValue)  min:0  max:(aRTKiviatMetric maxSize)  minValue:(aRTKiviatMetric minValue) maxValue: (aRTKiviatMetric maxValue))).</body><body package="Roassal2-Builder-Kiviat">buildAxis"define the blocks of the metrics, divise 360Â° by the number of total metrics, and call the axis creation according to metrics"	| angle |	angle := 0.	kiviatMetrics doWithIndex: [ :m :i | 		self axis: (m modelBlock: [ :v | (v*(((i-1) * ((2 * Float pi) / (kiviatMetrics size)))cos))@(v*(((i-1) * ((2 * Float pi) / (kiviatMetrics size)))sin))]; maxSize: axisSize) ].		axisBuilt := true.</body><body package="Roassal2-Builder-Kiviat">defaultAxisSize	axisSize := 200</body><body package="Roassal2-Builder-Kiviat">desactivateAxisTitle"desactivate the axis titles in the view to identify metrics axis"	axisTitle := #desactivated.</body><body package="Roassal2-Builder-Kiviat">desactivateHighlight	highlight := #desactivated.</body><body package="Roassal2-Builder-Kiviat">desactivatePolygons	polygons := #desactivated.</body><body package="Roassal2-Builder-Kiviat">executeHighlightLowColor: lowColor highColor: highColor| titles |"define the alpha values of the highlighted and others chart nodes to the view"		( axisTitle = #activated ) ifTrue: [ 		"for now this way to recover the axis Titles elements in the view is not really clean, but because of using RTAxisRenderer to create the axis and titles in the same time I did not found a way to get only the title element from it."		titles := OrderedCollection new.		self kiviatMetrics do: [ :m | titles add: (view elements detect: [ :e |  (e shape isKindOf: RTLabel) and: [ (e trachelShape text) = (m named) ] ])].		 ].	((kiviatNodes flatCollect: [ :kn | kn nodeKiviatElements]) asGroup) do: [  :e | 		e @ (RTShowLabel new labelledInteraction: (RTLabeled new text: [ :el | el kiviatNode named])).		].		((kiviatNodes flatCollect: [ :kn | kn nodeKiviatElements]) asGroup)  when: TRMouseEnter do: [  :evt | 		(kiviatNodes select: [ :kn | kn named = evt element model kiviatNode named ]) do: [ :kn |						kn nodeKiviatElements do: [ :e | self recordElement: e. e trachelShape color: (e trachelShape color alpha: highColor)].			kn edgeKiviatElements do: [ :e | self recordElement: e. e trachelShape color: (e trachelShape color alpha: highColor)].			].		(kiviatNodes select: [ :kn | kn named ~= evt element model kiviatNode named ]) do: [ :kn |			kn nodeKiviatElements do: [ :e | self recordElement: e. e trachelShape color: (e trachelShape color alpha: lowColor)].			kn edgeKiviatElements do: [ :e | self recordElement: e. e trachelShape color: (e trachelShape color alpha: lowColor)]			].		( axisTitle = #activated ) ifTrue: [ titles do: [ :t | t trachelShape color: (t trachelShape color alpha: 0)]].		view signalUpdate.		].		((kiviatNodes flatCollect: [ :kn | kn nodeKiviatElements]) asGroup) when: TRMouseLeave do: [  :evt | 		kiviatNodes do: [ :kn |			kn nodeKiviatElements do: [ :e | e trachelShape color: (e attributes at: #originalColor)].			kn edgeKiviatElements do: [ :e | e trachelShape color: (e attributes at: #originalColor)].			view signalUpdate].		( axisTitle = #activated ) ifTrue: [ titles do: [ :t | t trachelShape color: (t trachelShape color alpha: 1)]].		view signalUpdate.		].</body><body package="Roassal2-Builder-Kiviat">executePolygonNode: aKiviatNode	self executePolygonsColor: 0.2 node: aKiviatNode</body><body package="Roassal2-Builder-Kiviat">executePolygons	self executePolygonsColor: 0.2.</body><body package="Roassal2-Builder-Kiviat">executePolygonsColor: alpha"define the alpha value and create polygons"	kiviatNodes do: [  :kn |		kn polygonElement: ((RTPolygon new borderColor: ((kn nodeKiviatElements first color) alpha: alpha);  color: ((kn nodeKiviatElements first color)alpha: alpha); vertices: ((kn nodeKiviatElements collect: [ :ne | ne position ]) asArray)) elementOn: kn).		]</body><body package="Roassal2-Builder-Kiviat">executePolygonsColor: alpha node: aKiviatNode"define the alpha value and create polygon"		aKiviatNode polygonElement: ((RTPolygon new borderColor: ((aKiviatNode nodeKiviatElements first color) alpha: alpha);  color: ((aKiviatNode nodeKiviatElements first color)alpha: alpha); vertices: ((aKiviatNode nodeKiviatElements collect: [ :ne | ne position ]) asArray)) elementOn: aKiviatNode).</body><body package="Roassal2-Builder-Kiviat">getNormalizedValue: val min: min max: max minValue: minValue maxValue: maxValue "obtain a normalized value from the original value given by a metric calculation according to the size of the axis"	(val = min) ifTrue: [ ^ min].	(maxValue = minValue) ifTrue: [ ^ max].	 	^ (min + ((max - min) * ( (val - minValue) / (maxValue - minValue)))).</body></methods><methods><class-id>Roassal2.RTKiviatBuilder</class-id> <category>adding</category><body package="Roassal2-Builder-Kiviat">addDynamicObject: anObject	(objects includes: anObject) ifFalse: [ 		objects add: anObject.		self build.		self view signalUpdate.		]</body><body package="Roassal2-Builder-Kiviat">addDynamicObjects: anObjectCollection	anObjectCollection do: [ :o | 		self addDynamicObject: o	].</body><body package="Roassal2-Builder-Kiviat">addMetric: blockOrSymbol	self addMetric: blockOrSymbol title: (blockOrSymbol asString).</body><body package="Roassal2-Builder-Kiviat">addMetric: blockOrSymbol max: kiviatMetricMaxValue	self addMetric: blockOrSymbol max: kiviatMetricMaxValue title: (blockOrSymbol asString).</body><body package="Roassal2-Builder-Kiviat">addMetric: blockOrSymbol max: kiviatMetricMaxValue title: aString	kiviatMetrics add: (RTKiviatMetric new block: blockOrSymbol; named: aString; maxValue:kiviatMetricMaxValue ).</body><body package="Roassal2-Builder-Kiviat">addMetric: blockOrSymbol title: aString	self addMetric: blockOrSymbol max: nil  title: aString .</body><body package="Roassal2-Builder-Kiviat">addNodesAndEdgesToView"add to the view the chart nodes created"	kiviatNodes do: [ :kn |		view addAll: kn nodeKiviatElements.		view addAll: kn edgeKiviatElements. 		( polygons = #activated ) ifTrue: [ view add: kn polygonElement ].		]</body><body package="Roassal2-Builder-Kiviat">addNodesAndEdgesToView: aKiviatNode"add to the view the chart nodes created"	( polygons = #activated ) ifTrue: [ view add: aKiviatNode polygonElement ].	view addAll: aKiviatNode edgeKiviatElements. 	view addAll: aKiviatNode nodeKiviatElements.</body><body package="Roassal2-Builder-Kiviat">addObject: anObject	objects add: anObject.</body><body package="Roassal2-Builder-Kiviat">removeDynamicObject: anObject	(objects includes: anObject) ifTrue: [ 		| kn |		objects remove: anObject.		kn := (kiviatNodes detect: [ :k| k named = anObject ]). 			view removeElements: kn edgeKiviatElements. 		view removeElements: kn nodeKiviatElements.		(kn polygonElement) ifNotNil:  [view removeElement: kn polygonElement].		kiviatNodes remove: kn.				self view signalUpdate.	]</body><body package="Roassal2-Builder-Kiviat">removeDynamicObjects: anObjectCollection	anObjectCollection do: [ :o | 		self removeDynamicObject: o ]</body></methods><methods><class-id>Roassal2.RTKiviatBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Kiviat">axisSize	^ axisSize</body><body package="Roassal2-Builder-Kiviat">axisSize: aSizeInPixels"define the size in pixel of all the axis"	axisSize := aSizeInPixels</body><body package="Roassal2-Builder-Kiviat">axisTitles	^ axisTitles.</body><body package="Roassal2-Builder-Kiviat">executeHighlight	self executeHighlightLowColor: 0.2 highColor: 1.0</body><body package="Roassal2-Builder-Kiviat">kiviatMetrics	^ kiviatMetrics</body><body package="Roassal2-Builder-Kiviat">kiviatNodes	^ kiviatNodes</body><body package="Roassal2-Builder-Kiviat">node: anRTKiviatNode"a chart node is represented by a set of elements according to the metrics values and connected by edges. Finish the creation of a chart node, creating elements in the view and edges."| nodeElems edgeElems shapeNode shapeEdge |	kiviatNodes add: anRTKiviatNode.	nodeElems := OrderedCollection new.	edgeElems := OrderedCollection new.		shapeNode := (shapes isNil) ifFalse: [ RTEllipse new color:(shapes at: (kiviatNodes indexOf: anRTKiviatNode)); size: 10 ] ifTrue: [ anRTKiviatNode shapeNode ] .	shapeEdge := anRTKiviatNode shapeEdge. 		kiviatMetrics do: [ :m |		nodeElems add: ((shapeNode) elementOn: ( RTKiviatElement new metric:(m block); position: (m modelBlock value: (self getNormalizedValue: (anRTKiviatNode arrayValues at: (kiviatMetrics indexOf: m)) min: 0  max: (m maxSize)  minValue: 0  maxValue:(m maxValue))); kiviatNode: anRTKiviatNode; value: (anRTKiviatNode arrayValues at: (kiviatMetrics indexOf: m))) ).		].		anRTKiviatNode addNodeElements: nodeElems.				nodeElems allButLast do: [ :e | edgeElems add: ((RTEdge from: e to: (nodeElems after:e)) + (shapeEdge color: (e trachelShape color)))]. 	edgeElems add: ((RTEdge from: (nodeElems last) to: (nodeElems first)) + (shapeEdge color: (nodeElems first trachelShape color))).		anRTKiviatNode addEdgeElements: edgeElems.			nodeElems do: [  :e | e translateBy: (e model position) ].</body><body package="Roassal2-Builder-Kiviat">objects	^ objects</body><body package="Roassal2-Builder-Kiviat">objects: anObjectsCollection"Define the number of objects to be evaluated by the metrics"	objects := anObjectsCollection</body><body package="Roassal2-Builder-Kiviat">shapes: aColorArray"shapes: takes in argument a collection of colors, at least of the size of the numbers of objects"	shapes := aColorArray.</body></methods><methods><class-id>Roassal2.RTKiviatBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Kiviat">createView	^ super createView @ RTDraggableView</body><body package="Roassal2-Builder-Kiviat">initialize	super initialize.	self configureView: view.		self defaultAxisSize.		highlight := #activated.	polygons := #desactivated.	axisTitle := #desactivated.		axisBuilt := false.		axisTitles := OrderedCollection new.	objects := OrderedCollection new.		kiviatNodes := OrderedCollection new.	kiviatMetrics := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTKiviatBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-Kiviat">createShapeBuilder"redefinition for default shape"	| sb |	sb := super createShapeBuilder.	sb shape: (RTEllipse new color: (Color blue alpha: 0.3); size: 10).	^ sb</body><body package="Roassal2-Builder-Kiviat">renderIn: aView		((kiviatMetrics size = 0) | (axisBuilt = true)) ifFalse: [ self buildAxis ].	self resetCreatedElements.		"a chart node is represented by a set of elements according to the metrics values and connected by edges."	objects do: [ :p | kiviatNodes detect: [:k | k named = p] ifNone: [ 			| kn |			kn := (RTKiviatNode new values:(kiviatMetrics collect: [ :m | m block rtValue: p ]); named: p; shapeNode: self shape).			self node: kn.			( polygons = #activated ) ifTrue: [ self executePolygonNode: kn].			self addNodesAndEdgesToView: kn.			] 		].		( highlight = #activated ) ifTrue: [ self executeHighlight ].			"globalBuilder executeOn: self createdElements."</body></methods><methods><class-id>Roassal2.RTKiviatBuilder</class-id> <category>actions</category><body package="Roassal2-Builder-Kiviat">clean	self removeDynamicObjects: objects copy</body><body package="Roassal2-Builder-Kiviat">recordElement: anElement	anElement attributes at: #originalColor put: (anElement trachelShape color)</body></methods><methods><class-id>Roassal2.RTKiviatBuilder</class-id> <category>view</category><body package="Roassal2-Builder-Kiviat">configureView: aView	aView @ RTDraggableView.</body></methods><methods><class-id>Roassal2.RTUninterpolate</class-id> <category>interpolating</category><body package="Roassal2-Builder-Grapher-Scaling">uninterpolate: x	self subclassResponsibility.</body><body package="Roassal2-Builder-Grapher-Scaling">uninterpolate: aNum1 and: aNum2	a := aNum1.	b := aNum2.	a isNumber 		ifFalse: [ 			^ a := b := Float nan. ].	b  := b - a.	b isZero 		ifTrue: [ b := 1 / aNum2 ].</body></methods><methods><class-id>Roassal2.RTUninterpolate class</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Grapher-Scaling">uninterpolate: aNum1 and: aNum2	^ self new uninterpolate: aNum1 and: aNum2.</body></methods><methods><class-id>Roassal2.RTUninterpolateClamp</class-id> <category>interpolating</category><body package="Roassal2-Builder-Grapher-Scaling">uninterpolate: x	^ 0 max: (1 min: ((x - a ) / b))</body></methods><methods><class-id>Roassal2.TRMouseDragging</class-id> <category>accessing</category><body package="Roassal2-Trachel-Events">step	^ step</body><body package="Roassal2-Trachel-Events">step: aPoint	step := aPoint</body></methods><methods><class-id>Roassal2.TRMouseDragging</class-id> <category>initialization</category><body package="Roassal2-Trachel-Events">initialize	super initialize.	step := 0 @ 0.</body></methods><methods><class-id>Roassal2.TRMouseDragging class</class-id> <category>public</category><body package="Roassal2-Trachel-Events">shape: aShape step: aStepAsPoint	^ (self shape: aShape)		step: aStepAsPoint;		yourself</body><body package="Roassal2-Trachel-Events">step: aStepAsPoint	^ self new step: aStepAsPoint</body></methods><methods><class-id>Roassal2.RTBox</class-id> <category>visitor</category><body package="Roassal2-Shapes">accept: aVisitor	aVisitor visitBox: self</body></methods><methods><class-id>Roassal2.RTBox</class-id> <category>accessing</category><body package="Roassal2-Shapes">borderStyle	^ borderStyle ifNil: [ borderStyle := RTBorderStyle new ]</body><body package="Roassal2-Shapes">borderStyle: aStyleSelector	self borderStyle style: aStyleSelector</body></methods><methods><class-id>Roassal2.RTBox</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeClass	^ TRBoxShape</body></methods><methods><class-id>Roassal2.RTBox</class-id> <category>rendering</category><body package="Roassal2-Shapes">updateFor: anElement trachelShape: trachelShape	| ex |	trachelShape isNil		ifTrue: [ ^ self ].	ex := (self widthFor: anElement) @ (self heightFor: anElement).	trachelShape 		extent: ex;		color: (self colorFor: anElement);		strokePaint: (self borderColorFor: anElement);		strokeWidth: (self borderWidthFor: anElement);		dashes: self borderStyle style;		rotateByDegrees: (self rotationFor: anElement);		scaleBy: (self scaleFor: anElement)</body></methods><methods><class-id>Roassal2.TRCircleHeadShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-ShapesForArrow">initialize	super initialize.	open := false.</body></methods><methods><class-id>Roassal2.TRCircleHeadShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-ShapesForArrow">computePath	path := TRPlatform current computeCircleHeadPathFor: self.</body></methods><methods><class-id>Roassal2.TRFilledCircleHeadShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-ShapesForArrow">color: aColor	super color: aColor.	color := aColor</body></methods><methods><class-id>Roassal2.RTBounds</class-id> <category>public</category><body package="Roassal2-Builder-CircularMap">findStart: circle	| high low probe |		high := circles size +1.	low := 1.	[ (high - low) &gt; 1 ] whileTrue: [ 		probe := ((high + low )/2) floor.		(RTCircleTree doIntersect: circle with: (circles at: probe)) 			ifTrue: [ high := probe ]			ifFalse: [ low := probe ]	 ].	^ indeces at: low.</body><body package="Roassal2-Builder-CircularMap">push: circle index: index	| new |	new := circles size &gt; 0 		ifTrue: [ RTCircleTree combine: (circles at: circles size) with: circle ] 		ifFalse: [ circle ].	circles add: new.	indeces add: index.		^ new.</body></methods><methods><class-id>Roassal2.RTBounds</class-id> <category>comparing</category><body package="Roassal2-Builder-CircularMap">max: max	maxCircles := max.	circles := OrderedCollection new: max.	indeces := OrderedCollection new: max.</body></methods><methods><class-id>Roassal2.RTAbstractMorphingView</class-id> <category>configuration</category><body package="Roassal2-Interactions-MorphingView">directTransition	translator := RTDirectLayoutTranslator new</body><body package="Roassal2-Interactions-MorphingView">focusOnCenterScaledAfterAllTranslations	afterAllTranslationsBlocks add: [ :view | view canvas camera focusOnCenterScaled ]</body><body package="Roassal2-Interactions-MorphingView">moveApartSingleElements	| rms singleElements notSingleElements |	afterAllTranslationsBlocks add: [ :view | 		rms := referenceModels elements collect: #model.		singleElements := (view elements reject: [ :e | rms includes: e model ]).		notSingleElements := (view elements select: [ :e | rms includes: e model ]).		RTGridLayout on: singleElements.		TRConstraint move: singleElements onTheRightOf: notSingleElements ]</body><body package="Roassal2-Interactions-MorphingView">pushAllElementsToFront	afterAllTranslationsBlocks add: [ :view | 		view elements do: #pushFront	]</body><body package="Roassal2-Interactions-MorphingView">smoothTransition	translator := RTSmoothLayoutTranslator new</body><body package="Roassal2-Interactions-MorphingView">smoothTransition: aDuration	translator := RTSmoothLayoutTranslator new nbCycles: aDuration</body></methods><methods><class-id>Roassal2.RTAbstractMorphingView</class-id> <category>utility</category><body package="Roassal2-Interactions-MorphingView">afterTranslationDoActionOn: aView	afterAllTranslationsBlocks do: [ :action | action rtValue: aView ].	aView signalUpdate.</body><body package="Roassal2-Interactions-MorphingView">translate: e1 toPositionOf: e2	translator translate: e1 to: e2 position</body></methods><methods><class-id>Roassal2.RTAbstractMorphingView</class-id> <category>hooks</category><body package="Roassal2-Interactions-MorphingView">initializeElement: aView	| allModels referenceElements |	allModels := (aView elements collect: #model) asArray.	referenceElements := referenceView elementsFromModels: allModels.	referenceModels := referenceElements collect: #model.	(aView elementsFromModels: referenceModels) with: referenceElements do: [ :e1 :e2 | self translate: e1 toPositionOf: e2 ].	self afterTranslationDoActionOn: aView</body></methods><methods><class-id>Roassal2.RTAbstractMorphingView</class-id> <category>accessing</category><body package="Roassal2-Interactions-MorphingView">referenceView	^ referenceView</body><body package="Roassal2-Interactions-MorphingView">referenceView: anObject	referenceView := anObject</body></methods><methods><class-id>Roassal2.RTAbstractMorphingView</class-id> <category>initialization</category><body package="Roassal2-Interactions-MorphingView">initialize	super initialize.	self directTransition.	afterAllTranslationsBlocks := OrderedCollection new</body></methods><methods><class-id>Roassal2.TRClipBoxShape</class-id> <category>accessing</category><body package="Roassal2-Experimental">condition: aBlockWith2Args	condition := aBlockWith2Args</body><body package="Roassal2-Experimental">edges: ed	edges := ed.</body><body package="Roassal2-Experimental">useColor: aBool	useColor := aBool</body></methods><methods><class-id>Roassal2.TRClipBoxShape</class-id> <category>drawing</category><body package="Roassal2-Experimental">drawOn: athensCanvas	|rec c |	self shouldBeDrawn		ifFalse: [ ^ self ].	rec := self encompassingRectangle.	edges do: [ :ed |		(condition value: rec value: ed) ifTrue: [ 			c := ed color.			(useColor and: [strokePaint isNil not]) ifTrue: [ ed color: strokePaint ].			ed trachelShape				canvas: self canvas;				drawOn: athensCanvas;				canvas: nil;				color: c ] ].	super drawOn: athensCanvas.</body></methods><methods><class-id>Roassal2.TRClipBoxShape</class-id> <category>initialization</category><body package="Roassal2-Experimental">initialize	super initialize.	self condition: [ :rec :ed | true ].	self useColor: true.</body></methods><methods><class-id>Roassal2.RTVerticalAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">basicEndingPointOf: aRTEdge	^ aRTEdge to encompassingRectangle topCenter</body><body package="Roassal2-AttachPoint">basicStartingPointOf: aRTEdge	^ aRTEdge from encompassingRectangle bottomCenter</body></methods><methods><class-id>Roassal2.RTSelectiveShape</class-id> <category>public</category><body package="Roassal2-Experimental">trachelShapeFor: anElement	| label bshape |	bshape := (self shapeFor: anElement) trachelShapeFor: anElement.	bshape		extent: (self widthFor: anElement) @ (self heightFor: anElement);		color: (self backgroundColorFor: anElement).	label := self labelShape trachelShapeFor: anElement.	^ TRCompositeShape new		addShape: bshape;		addShape: label;		yourself</body></methods><methods><class-id>Roassal2.RTSelectiveShape</class-id> <category>accessing</category><body package="Roassal2-Experimental">backgroundColor: aValueOrAOneArgBlock	self backgroundColorElement: [ :e | aValueOrAOneArgBlock rtValue: e model ].</body><body package="Roassal2-Experimental">backgroundColorElement: aValueOrAOneArgBlock	backgroundColor := aValueOrAOneArgBlock</body><body package="Roassal2-Experimental">backgroundColorFor: element	color := backgroundColor rtValue: element.	color isColor ifFalse: [ 		color := Color colorFrom: color ].	^ color</body><body package="Roassal2-Experimental">color: aValue	labelShape color: aValue</body><body package="Roassal2-Experimental">labelShape	^ labelShape</body><body package="Roassal2-Experimental">labelShape: aLabelShape	labelShape := aLabelShape</body><body package="Roassal2-Experimental">labelShapeDo: aBlock	aBlock value: labelShape</body><body package="Roassal2-Experimental">shape: aShapeOrSymbol	self shapeElement: [ :e| aShapeOrSymbol rtValue: e model ]</body><body package="Roassal2-Experimental">shapeElement: aShapeOrSymbol	shape := aShapeOrSymbol.</body><body package="Roassal2-Experimental">shapeFor: anElement	| res |	res := shape rtValue: anElement.	res isSymbol ifTrue: [ 		res := self getShapeBySymbol: res ].	^ res</body><body package="Roassal2-Experimental">text: aBlockOrSymbol	self labelShape text: aBlockOrSymbol</body></methods><methods><class-id>Roassal2.RTSelectiveShape</class-id> <category>configuration</category><body package="Roassal2-Experimental">defaultHeight	^ 30</body><body package="Roassal2-Experimental">defaultWidth	^ 30</body></methods><methods><class-id>Roassal2.RTSelectiveShape</class-id> <category>private</category><body package="Roassal2-Experimental">getShapeBySymbol: symbol	symbol = #ellipse ifTrue: [ ^ RTEllipse new].	^ RTPolygon perform: symbol.</body></methods><methods><class-id>Roassal2.RTSelectiveShape</class-id> <category>hooks</category><body package="Roassal2-Experimental">updateFor: anElement trachelShape: trachelShape	(self shapeFor: anElement) updateFor: anElement trachelShape: trachelShape shapes first.	trachelShape shapes first		extent: (self widthFor: anElement) @ (self heightFor: anElement);		color: (self backgroundColorFor: anElement).	labelShape updateFor: anElement trachelShape: trachelShape shapes second</body></methods><methods><class-id>Roassal2.RTSelectiveShape</class-id> <category>initialization</category><body package="Roassal2-Experimental">initialize	super initialize.	self labelShape: RTTextPath new.</body></methods><methods><class-id>Roassal2.RTFisheye</class-id> <category>accessing</category><body package="Roassal2-Experimental">distortion	^ distortion</body><body package="Roassal2-Experimental">distortion: anObject	distortion := anObject.	self rescale.</body><body package="Roassal2-Experimental">focus	^ focus.</body><body package="Roassal2-Experimental">focus: anObject	focus := anObject.</body><body package="Roassal2-Experimental">position	^ position</body><body package="Roassal2-Experimental">position: anObject	position := anObject.</body><body package="Roassal2-Experimental">radius	^ radius</body><body package="Roassal2-Experimental">radius: anObject	radius := anObject.	self rescale.</body><body package="Roassal2-Experimental">scale: anObject	| d dx dy dd k |	d := position rtValue: anObject.	dx := d x - focus x.	dy := d y - focus y.	dd := ((dx * dx) + (dy * dy)) sqrt.	dd &gt;= radius ifTrue: [ ^ RTXPPoint x: d x y: d y y0: 1 ].		k := (k0 * (1 - ( dd negated * k1) exp ) / dd * 0.75) + 0.25.	^ RTXPPoint 		x: focus x + (dx*k) 		y: focus y + (dy*k)		y0: (k min: 10)</body></methods><methods><class-id>Roassal2.RTFisheye</class-id> <category>hooks</category><body package="Roassal2-Experimental">initializeElement: aView	view := aView.	self position: [ :e | e attributes at: #position ].	view when: TRMouseMove do: [ :evt |		self focus: evt positionFromCamera.		view elements do: [ :e | | fisheye |			(e attributes includesKey: #position) 				ifFalse: [ e attributes at: #position put: e position ].			fisheye := self scale: e.			e attributes at: #fisheye put: fisheye.			e translateTo:  fisheye x@ fisheye y.			e trachelShape class = TREllipseShape				ifTrue: [ e trachelShape extent: (fisheye y0 * 9) asPoint ].			]. 		view signalUpdate ].</body><body package="Roassal2-Experimental">rescale	k0 := distortion exp.	k0 := k0 / (k0 - 1) * radius.	k1 := distortion / radius.</body></methods><methods><class-id>Roassal2.RTFisheye</class-id> <category>initialization</category><body package="Roassal2-Experimental">initialize	super initialize.	radius := 200.	distortion := 2.	k0 := k1 := nil.	focus := 0@0.	position := #position.	self rescale.</body></methods><methods><class-id>Roassal2.RTFisheye class</class-id> <category>as yet unclassified</category><body package="Roassal2-Experimental">radius: anObject	^ self new radius: anObject.</body></methods><methods><class-id>Roassal2.RTNoBehavior</class-id> <category>hooks</category><body package="Roassal2-Core">on: backElement setNested: elements	"Do nothing"	super on: backElement setNested: elements.</body></methods><methods><class-id>Roassal2.RTNoBehavior class</class-id> <category>accessing</category><body package="Roassal2-Core">instance	Instance ifNil: [ Instance := self new ].	^ Instance</body></methods><methods><class-id>Roassal2.AthensAffineTransform</class-id> <category>transformations</category><body package="Roassal2-Pharo">asFloatTransform	^ self</body><body package="Roassal2-Pharo">loadIdentity	"initialize with identity transform"	sx := sy := 1.0.	shx := shy := x := y := 0.0.</body><body package="Roassal2-Pharo">multiplyBy: m	"multiply receiver by given affine matrix""| sx   shx   x   |        | sx'   shx'   x'   | | shy sy     y    |   *    | shy' sy'     y'   ||  0     0     1   |        | 0  	0   		1	|       "			| nsx nshx nx nshy nsy ny |		nsx := sx * m sx + (shx  * m shy).	nshx := sx * m shx + (shx * m sy).	nx := sx * m x + (shx * m y) + x.		nshy := shy * m sx + (sy * m shy).	nsy := shy * m shx  + (sy * m sy).	ny := shy* m x + (sy * m y) + y.		sx := nsx.	sy := nsy.	shx := nshx.	shy := nshy.	x := nx.	y := ny.</body><body package="Roassal2-Pharo">rotateByDegrees: angle	^ self rotateByRadians: angle degreesToRadians</body><body package="Roassal2-Pharo">rotateByRadians: angle	"multiply receiver by rotation matrix| sx   shx   x   |        | cos -sin 0  |             | (sx*cos)+(shx*sin)   (-sx*sin+shx*cos)  x || shy sy     y   |   *   | sin   cos 0 |   ===&gt; | (shy*cos)+(sy*sin)   (-shy*sin)+sy*cos) y ||  0     0     1   |       | 0     0   1   |             |        0                                 0                1  |"	| cos sin newSx newSy |		cos := angle cos.	sin := angle sin.			newSx := sx*cos + (shx*sin).	newSy := sy*cos - (shy*sin).		shx := shx*cos - (sx*sin).	shy := shy*cos + (sy*sin).	sx := newSx.	sy := newSy.</body><body package="Roassal2-Pharo">scaleBy: factor	"multiply receiver by uniform scale matrix| sx   shx   x   |       | (f x) 0 0  |             | sx*(f x)    shx*(f y)  x || shy sy     y   |   *   | 0 (f y) 0  |    ===&gt; | shy*(f x)     sy*(f y)    y ||  0     0     1  |        | 0 0     1  |                |  0      0              1  |"		factor isPoint ifTrue: [		sx := sx*factor x.		shx := shx*factor y.		sy := sy*factor y.		shy := shy*factor x. 			] ifFalse: [		sx := sx*factor.		shx := shx*factor.		sy := sy*factor.		shy := shy*factor. ]</body><body package="Roassal2-Pharo">translateBy: aPoint	^ self translateX: aPoint x Y: aPoint y</body><body package="Roassal2-Pharo">translateX: px Y: py" multiply receiver by translation matrix :| sx   shx   x   |        | 1  0  px |             |	sx  shx  (sx*px + shx*py + x) || shy sy     y   |   *   | 0  1  py |   ===&gt; | shy  sy  (shy*px + sy*py + y)  ||  0     0     1   |       | 0  0   1  |             |  0     0    1  |"	x := (sx*px) + (shx*py) + x.	y := (shy*px) + (sy*py) + y.</body><body package="Roassal2-Pharo">translateX: px y: py" multiply receiver by translation matrix :| sx   shx   x   |        | 1  0  px |             |	sx  shx  (sx*px + shx*py + x) || shy sy     y   |   *   | 0  1  py |   ===&gt; | shy  sy  (shy*px + sy*py + y)  ||  0     0     1   |       | 0  0   1  |             |  0     0    1  |"	x := (sx*px) + (shx*py) + x.	y := (shy*px) + (sy*py) + y.</body></methods><methods><class-id>Roassal2.AthensAffineTransform</class-id> <category>accessing</category><body package="Roassal2-Pharo">asMatrix	| m |	m := CairoGraphics.Matrix new.	m xx: sx.	m xy: shx.	m x0: x.	m yx: shy.	m yy: sy.	m y0: y.	^ m.</body><body package="Roassal2-Pharo">scale	^ sx@sy</body><body package="Roassal2-Pharo">shx	^ shx</body><body package="Roassal2-Pharo">shx: aNumber	shx := aNumber</body><body package="Roassal2-Pharo">shy	^ shy</body><body package="Roassal2-Pharo">shy: aNumber	shy := aNumber</body><body package="Roassal2-Pharo">sx	^ sx</body><body package="Roassal2-Pharo">sx: aNumber	sx := aNumber</body><body package="Roassal2-Pharo">sy	^ sy</body><body package="Roassal2-Pharo">sy: aNumber	sy := aNumber</body><body package="Roassal2-Pharo">translation: aPoint	x := aPoint x.	y := aPoint y.</body><body package="Roassal2-Pharo">x	^ x</body><body package="Roassal2-Pharo">x: number	x := number</body><body package="Roassal2-Pharo">y	^ y</body><body package="Roassal2-Pharo">y: number	y := number</body></methods><methods><class-id>Roassal2.AthensAffineTransform</class-id> <category>vector-transformations</category><body package="Roassal2-Pharo">inverseTransform: aPoint 	| px py y0 x0 |		px := aPoint x.	py := aPoint y."  (we assume matrix is never degenerate)	Given straight transformation formulae:			px := x0*sx + y0*shx + x.	py := x0*shy + y0*sy + y.		we doing inverse one, trying to find x0,y0 for rest of given variables (px,py,x,y,sx,sy,shx,shy).		x0 := px - x - (shx*y0) / sx.	y0 := py - y - (shy*x0) / sy.		y0 := py - y - (shy*(px - x - (shx*y0) / sx)) / sy.	sy * y0  == py - y - (shy*(px - x - (shx*y0) / sx)).	sx * sy * y0  == (sx*(py - y)) - (shy*(px - x - (shx*y0))).	sx * sy * y0  == sx*py - (sx*y) - (shy*px) + (shy*x) + (shy*shx*y0).	(sx * sy * y0) - (shy*shx*y0)  == sx*py - (sx*y) - (shy*px) + (shy*x) .		y0* ((sx * sy) - (shy*shx))  == sx*py - (sx*y) - (shy*px) + (shy*x) ."	y0  := sx*py - (sx*y) - (shy*px) + (shy*x) / ((sx * sy) - (shy*shx)).	x0 := px - x - (shx*y0) / sx.	^ x0@y0</body><body package="Roassal2-Pharo">transform: aPoint 	| px py |		px := aPoint x.	py := aPoint y.	^ Point 		x: (sx*px +(shx*py) + x)		y: (shy*px + (sy*py) + y)</body></methods><methods><class-id>Roassal2.AthensAffineTransform</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	super initialize.	self loadIdentity.		^self</body></methods><methods><class-id>Roassal2.AthensAffineTransform class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Roassal2.RTNExplicitIdentityNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizerOBSOLETE">colors		^colors</body><body package="Roassal2-ColorNormalizerOBSOLETE">colors: anObject		colors := anObject</body><body package="Roassal2-ColorNormalizerOBSOLETE">defaultColor		^defaultColor</body><body package="Roassal2-ColorNormalizerOBSOLETE">defaultColor: anObject		defaultColor := anObject</body></methods><methods><class-id>Roassal2.RTNExplicitIdentityNormalizer</class-id> <category>private</category><body package="Roassal2-ColorNormalizerOBSOLETE">nextColor		colorIndex := colorIndex + 1.	^colorIndex &gt; self colors size		ifTrue: [ self defaultColor ]		ifFalse: [ self colors at: colorIndex ]</body></methods><methods><class-id>Roassal2.RTNExplicitIdentityNormalizer class</class-id> <category>instance creation</category><body package="Roassal2-ColorNormalizerOBSOLETE">withCommand: aBlock withColors: aCollection withDefaultColor: aColor		^(self withCommand: aBlock)		colors: aCollection;		defaultColor: aColor;		yourself</body></methods><methods><class-id>Roassal2.RTCityBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Map">evolutionPeriod	^ evolutionPeriod</body><body package="Roassal2-Builder-Map">getCityName: aCity	^ name rtValue: aCity</body><body package="Roassal2-Builder-Map">mapBuilder: builder	mapBuilder := builder</body><body package="Roassal2-Builder-Map">names	^ name</body><body package="Roassal2-Builder-Map">step	^ step</body><body package="Roassal2-Builder-Map">stepBack	1 &lt; step		ifTrue: [ step := step - 1 ]</body><body package="Roassal2-Builder-Map">stepForward	evolutionPeriod size &gt; step		ifTrue: [ step := step + 1 ]</body><body package="Roassal2-Builder-Map">withPopup	self withPopup: name</body><body package="Roassal2-Builder-Map">withPopup: aBlockOrSymbol	popup := aBlockOrSymbol</body></methods><methods><class-id>Roassal2.RTCityBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Map">addCityNamed: aName location: aPoint	"aName is a string and aPoint is a geographical location, longititud @ latitud"	cities at: aName put: aPoint</body><body package="Roassal2-Builder-Map">initialize	super initialize.	step := 1.	evolutionPeriod := OrderedCollection new.	self initializeCities.	self shape		circle;		color: (Color red alpha: 0.5);		size: 15.	name := #yourself.</body><body package="Roassal2-Builder-Map">initializeCities	cities := Dictionary new.	cities at: 'Santiago' put: -33.4500 @ -70.66.	cities at: 'Vina del Mar' put: -33 @ -71.52.		cities at: 'New York City' put: 40.67 @ -73.94 .	cities at: 'Washington, D.C.' put: 38.89 @ -77.03.	cities at: 'Paris' put: 48.85 @ 2.35.	cities at: 'Nice' put: 43.70 @ 7.26.	cities at: 'Bordeaux' put: 44.84 @ -0.58.	cities at: 'Bogota' put: 4.5981 @ -74.07.	cities at: 'Buenos Aires' put: -34.60 @ -58.38.	cities at: 'Brasilia' put: -15.79 @ -47.86.	cities at: 'Sao Paulo' put: -23.55 @ -46.63.	cities at: 'Montevideo' put: -34.88 @ -56.18.	cities at: 'Lima' put: -12.04 @ -77.03.	cities at: 'La Paz' put: -16.5 @ -68.15.	cities at: 'Quito' put: -0.25 @ -78.58.	cities at: 'Caracas' put: 10.5 @ -66.92.		cities at: 'Shanghai' put: 31.2 @ 121.5.</body></methods><methods><class-id>Roassal2.RTCityBuilder</class-id> <category>action</category><body package="Roassal2-Builder-Map">buildCities: someCities	|elements|	elements := self elementsOn: someCities.	elements do: [ :e |		|geoPosition w h|		w := e trachelShape encompassingRectangle width.		h := e trachelShape encompassingRectangle height.		geoPosition := (cities at: (name rtValue: e model)).		e translateTo: (mapBuilder translateGeoPositionToPixels: geoPosition) * (mapBuilder scale).		popup isNotNil ifTrue: [ e @ (RTPopup text: popup) ]].	^ elements</body><body package="Roassal2-Builder-Map">evolveAt: index through: timePeriod	evolutionPeriod := timePeriod.	mapBuilder cityObjects do: [ :c |		|evolver|		evolver := RTDataEvolver new.		evolver dataSequence: (c at: index).		evolver stepGiver: self.		c at: index put: evolver.	].</body></methods><methods><class-id>Roassal2.RTCityBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Map">currentStep	^ step</body><body package="Roassal2-Builder-Map">name: aBlockOrString	name := aBlockOrString</body></methods><methods><class-id>Roassal2.RTExploraNodeLazy</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Explora">addListenerFor: anEvent onDirection: aDirection withBlock: aBlock	| listener |		listener := element.	iconOpen ifNotNil: [ listener := (Array with: iconOpen with: iconClose) asGroup ].			self addExpansionDirection: aDirection.		block := aBlock.		listener when: anEvent do: [ :event |		RTPopup removeLastPopup.		(self isExpandedOnDirection: aDirection)			ifTrue: [ self collapseOnDirection: aDirection ]			ifFalse: [ self exploreOnDirection: aDirection ].			((builder layout rtValue: self)				translator: (RTSmoothLayoutTranslator new nbCycles: 0.25))				on: ((builder nodes collect: [ :n | n element ]) asGroup).			element view canvas signalUpdate].</body><body package="Roassal2-Builder-Explora">exploreOnDirection: aDirection	| objs objectsToAdd newNodes nodesAlreadyIn objsAlreadyIn |		self expandWithBlock: block onDirection: aDirection.		objs := ((builder nodes collect: [ :n | n element ]) asGroup) collect: [ :el | el model ].	objectsToAdd := self expansionOnDirection: aDirection.	objsAlreadyIn := objectsToAdd select: [ :obj | objs includes: obj ].	objectsToAdd := objectsToAdd reject: [ :obj | objs includes: obj ].		nodesAlreadyIn := (builder view elements select: [ :el | objsAlreadyIn includes: el model ])		collect: [ :elem | elem attributes at: #node ].	newNodes := objectsToAdd collect: [ :obj | builder node: obj parent: self ].		builder lastAddedNodes: newNodes.		newNodes do: [ :node |		builder view add: node element.		node element translateTo: self element position ].	(builder icons) ifNotNil: [		newNodes do: [ :node |			builder view add: node iconOpen].		iconOpen remove.		builder view add: iconClose.		].		(newNodes, nodesAlreadyIn) do: [ :el |		(aDirection value = #From)			ifTrue: [ self connectTo: el with: builder lineShape ]			ifFalse: [ el connectTo: self with: builder lineShape ] ].</body></methods><methods><class-id>Roassal2.RTHorizontalAverageDecorator</class-id> <category>drawing-hooks</category><body package="Roassal2-Builder-Grapher-Decorators">render	| values average from to |	values := self datasetValuesX.	average := values average.	from := builder getPixelPositionOf: average @ builder minY.	to := builder getPixelPositionOf: average @ builder maxY.	self lineFrom: from to: to.		shouldHaveLabel ifTrue: [ 		self label: ((labelBlock rtValue: average) asString) above: to.	]</body></methods><methods><class-id>Roassal2.TRRotatedLabelShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">angle	^angle</body><body package="Roassal2-Trachel-Shapes">angleInDegree: anAngle	angle := anAngle</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	| w h transformation translation notRotatedRectangle rotatedRectangle topLeft topRight bottomRight bottomLeft p1 p2 p3 p4 |	w := self notRotatedWidth.	h := self notRotatedHeight.	transformation := TRPlatform current affineTransformClass new 						rotateByDegrees: angle value;						translateBy: ((w / -2) @ (h / 2)) asIntegerPoint.	notRotatedRectangle  := 0 @ h negated corner: (w @ 0).	topLeft := transformation transform: notRotatedRectangle topLeft.	topRight := transformation transform: notRotatedRectangle topRight.	bottomRight := transformation transform: notRotatedRectangle bottomRight.	bottomLeft := transformation transform: notRotatedRectangle bottomLeft.		p1 := OrderedCollection new add: topLeft x; add: topRight x; add: bottomRight x; add: bottomLeft x; yourself.	p2 := OrderedCollection new add: topLeft y; add: topRight y; add: bottomRight y; add: bottomLeft y; yourself.	p3 := OrderedCollection new add: topLeft x; add: topRight x; add: bottomRight x; add: bottomLeft x; yourself.	p4 := OrderedCollection new add: topLeft y; add: topRight y; add: bottomRight y; add: bottomLeft y; yourself.		rotatedRectangle := 		(p1 min @ p2 min) corner:		(p3 max @ p4 max).	translation := TRPlatform current affineTransformClass new					translateBy: self position asIntegerPoint.	^ (translation transform: rotatedRectangle topLeft)	 	corner: (translation transform: rotatedRectangle bottomRight)</body><body package="Roassal2-Trachel-Shapes">notRotatedHeight	^ font height</body><body package="Roassal2-Trachel-Shapes">notRotatedWidth	^ (font widthOfString: text)</body></methods><methods><class-id>Roassal2.TRRotatedLabelShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint	| w h p rec wh |	w := self notRotatedWidth.	h := self notRotatedHeight.	wh := (w/2)@(h/2).	p := TRPlatform current affineTransformClass new 		rotateByDegrees: angle value negated; 		transform: aPoint - self position.	rec:= wh negated corner: wh.		^ rec containsPoint: p.</body></methods><methods><class-id>Roassal2.TRRotatedLabelShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitRotatedLabelShape: self</body></methods><methods><class-id>Roassal2.TRRotatedLabelShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	angle := 0.</body></methods><methods><class-id>Roassal2.TRRotatedLabelShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	"self drawEncompassingRectangleOn: athensCanvas color: (Color green alpha: 0.1)."	athensCanvas pathTransform restoreAfter: [		"Draw the label centered on the position"		athensCanvas pathTransform 			translateBy: self position asIntegerPoint;			rotateByDegrees: angle value;			translateBy: ((self notRotatedWidth value / -2) @ (self notRotatedHeight value / 2)) asIntegerPoint;			translateBy: (0 @ font descent negated) asIntegerPoint.		athensCanvas setFont: font.		athensCanvas setPaint: self themedColor.		athensCanvas drawString: text	].</body></methods><methods><class-id>Roassal2.RTShowLabel</class-id> <category>actions</category><body package="Roassal2-Interactions">doHighlightElement: anElement 	anElement @ labelledInteraction.</body><body package="Roassal2-Interactions">doUnhighlightElement: anElement 	labelledInteraction removeLabelFrom: anElement.</body></methods><methods><class-id>Roassal2.RTShowLabel</class-id> <category>reflective operations</category><body package="Roassal2-Interactions">doesNotUnderstand: aMessage 	labelledInteraction 		perform: aMessage selector 		withArguments: aMessage arguments</body></methods><methods><class-id>Roassal2.RTShowLabel</class-id> <category>initialize</category><body package="Roassal2-Interactions">initialize	super initialize.	labelledInteraction := RTLabeled new.</body></methods><methods><class-id>Roassal2.RTShowLabel</class-id> <category>visitor</category><body package="Roassal2-Interactions">accept: aVisitor with: args	aVisitor visitShowLabelInteraction: self with: args</body></methods><methods><class-id>Roassal2.RTShowLabel</class-id> <category>accessing</category><body package="Roassal2-Interactions">labelledInteraction	"Return the interaction which is used when an element has to be labelled"	^ labelledInteraction</body><body package="Roassal2-Interactions">labelledInteraction: aRTLabelled	labelledInteraction := aRTLabelled</body></methods><methods><class-id>Roassal2.RTMenuActivable</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	| menuActivable |	(element hasInteraction: self class) ifFalse: [ ^ self initializeFirstTimeElement: element ].		menuActivable := element getInteractionForClass: self class.	actions do: [ :assoc |		menuActivable item: assoc key action: assoc value ]</body><body package="Roassal2-Interactions">initializeFirstTimeElement: element	element when: TRMouseRightClick do: [ :event |		TRUtil instance widgetFactory menuForAssociations: actions on: element	]</body></methods><methods><class-id>Roassal2.RTMenuActivable</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize 	super initialize.	actions := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTMenuActivable</class-id> <category>public</category><body package="Roassal2-Interactions">action: aSymbol	^ self item: aSymbol asString action: aSymbol</body><body package="Roassal2-Interactions">item: titleAsString action: aBlockOrSymbol	actions add: (titleAsString -&gt; aBlockOrSymbol)</body></methods><methods><class-id>Roassal2.RTMenuActivable class</class-id> <category>public</category><body package="Roassal2-Interactions">action: anAction	^ self item: anAction asString action: anAction</body><body package="Roassal2-Interactions">item: title action: action	^ self new item: title action: action</body></methods><methods><class-id>Roassal2.RTDecorationItem</class-id> <category>accessing</category><body package="Roassal2-Core">action	^ action</body><body package="Roassal2-Core">action: aOneArgBlock	action := aOneArgBlock</body><body package="Roassal2-Core">element	^ shape element</body><body package="Roassal2-Core">shape: aRTShape	shape := aRTShape</body><body package="Roassal2-Core">tooltip	^ tooltip</body><body package="Roassal2-Core">tooltip: aString 	tooltip := aString</body></methods><methods><class-id>Roassal2.RTKiviatMetric</class-id> <category>accessing</category><body package="Roassal2-Builder-Kiviat">block"This block is about values of metric"	^ block</body><body package="Roassal2-Builder-Kiviat">block: aOneArgBlock"This block is about values of metric"	block := aOneArgBlock</body><body package="Roassal2-Builder-Kiviat">maxSize	^ maxSize</body><body package="Roassal2-Builder-Kiviat">maxSize: aNumber	maxSize := aNumber.</body><body package="Roassal2-Builder-Kiviat">maxValue	^ maxValue.</body><body package="Roassal2-Builder-Kiviat">maxValue: aNumber	maxValue := aNumber.</body><body package="Roassal2-Builder-Kiviat">minValue	^ minValue.</body><body package="Roassal2-Builder-Kiviat">minValue: aNumber	minValue := aNumber.</body><body package="Roassal2-Builder-Kiviat">modelBlock"this block is about axis rotation, size..."	^ modelBlock</body><body package="Roassal2-Builder-Kiviat">modelBlock: aBlockOrSymbol"this block is about axis rotation, size..."	modelBlock :=  aBlockOrSymbol</body><body package="Roassal2-Builder-Kiviat">named 	 ^ named</body><body package="Roassal2-Builder-Kiviat">named: aString	named := aString</body></methods><methods><class-id>Roassal2.RTKiviatMetric</class-id> <category>private</category><body package="Roassal2-Builder-Kiviat">defaultMaxSize	maxSize := 200</body></methods><methods><class-id>Roassal2.RTKiviatMetric</class-id> <category>default</category><body package="Roassal2-Builder-Kiviat">defaultModelBlock	self block: [ :v | (v@0) ].</body></methods><methods><class-id>Roassal2.RTKiviatMetric</class-id> <category>initialization</category><body package="Roassal2-Builder-Kiviat">initialize	super initialize.	self defaultModelBlock.	self defaultMaxSize.	maxValue := 0.	minValue := 0.</body></methods><methods><class-id>Roassal2.RTAbstractGridLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">defaultLineItemsCount		^ [ :elements | 			| height width |			(elements size &lt; 3 				ifTrue: [ (elements size max: 1) @ 1 ]				ifFalse: 					[ height := (elements size * 0.618034) sqrt ceiling truncated.					width := (elements size / height) ceiling truncated.					width @ height ]) x ]</body><body package="Roassal2-Layouts">gapSize		^ gapSize</body><body package="Roassal2-Layouts">gapSize: anInteger	gapSize := anInteger</body><body package="Roassal2-Layouts">lineItemsCount: aNumberOrASymbolOrABlock	"The argument will be evaluated (using rtValue:) against the set of elements to perform the layout on. The result of this evaluation has to be a number, which indicates the number of elements per line"	lineItemsCountBlock := aNumberOrASymbolOrABlock</body><body package="Roassal2-Layouts">lineItemsCountBlock		^ lineItemsCountBlock</body></methods><methods><class-id>Roassal2.RTAbstractGridLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">defaultGapSize	^ 5</body><body package="Roassal2-Layouts">initialize	super initialize.	gapSize := self defaultGapSize.	lineItemsCountBlock := self defaultLineItemsCount.</body></methods><methods><class-id>Roassal2.RTAbstractGridLayout class</class-id> <category>instance creation</category><body package="Roassal2-Layouts">withGap: anInteger 	^ self new 			gapSize: anInteger; 			yourself</body><body package="Roassal2-Layouts">withGap: anInteger withLineItemsCount: aBlock		^self new		gapSize: anInteger;		lineItemsCount: aBlock;		yourself</body><body package="Roassal2-Layouts">withLineItemsCount: aBlock		^self new		lineItemsCount: aBlock;		yourself</body></methods><methods><class-id>Roassal2.RTAbstractGridLayout class</class-id> <category>public</category><body package="Roassal2-Layouts">isAbstract	^ self name = #RTAbstractGridLayout</body><body package="Roassal2-Layouts">on: aCollectionOfElements withGap: anInteger withLineItemsCount: aBlock	"place the elements in a grid with (aBlock roValue: aCollectionOfElements) as the amount of elements horizontally"		| myLayout |	myLayout := self new gapSize: anInteger;  lineItemsCount: aBlock; yourself.	myLayout applyOn: aCollectionOfElements.	^ aCollectionOfElements</body><body package="Roassal2-Layouts">on: aCollectionOfElements withLineItemsCount: aBlock	"place the elements in a grid with (aBlock roValue: aCollectionOfElements) as the amount of elements horizontally	For example:	self on: (ROElement forCollection: (1 to: 20)) withLineItemsCount: 5	=&gt; place the 20 elements on a grid 5 x 4		self on: (ROElement forCollection: (1 to: 20)) withLineItemsCount: [ :elements | elements size // 3 ]	=&gt; place the 20 elements on a grid 3 x 7	"			| myLayout |	myLayout := self new lineItemsCount: aBlock; yourself.	myLayout applyOn: aCollectionOfElements.	^ aCollectionOfElements</body></methods><methods><class-id>Roassal2.RTCellLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">centered	align := #center.	translateElement := [ :aTranslator :anElement :newPos | translator translateCenterLeftOf: anElement to: newPos ].		self inCellPosition: [ :cell | cell extent x @ 0 ]</body><body package="Roassal2-Layouts">inCellPosition: anObjectOrOneArgBlock	inCellPosition := anObjectOrOneArgBlock</body><body package="Roassal2-Layouts">leftCentered	align := #left.	translateElement := [ :aTranslator :anElement :newPos | translator translateTopLeftOf: anElement to: newPos ].		"self inCellPosition: [ :cell | 0 @ ((cell extent y - cell element height) / 2) ]"	self inCellPosition: [ :cell | cell extent x @ 0 ]</body></methods><methods><class-id>Roassal2.RTCellLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements 		| lineItemSize pointer columnCount rowCount maxHeight columnsWidths rowHeights |	lineItemSize := self lineItemsCountBlock rtValue: elements.	"We compute the size of the grid"	columnCount := 1.	rowCount := 1.	maxHeight := 0.	columnsWidths := OrderedCollection new.	rowHeights := OrderedCollection new.	elements do: [ :e |		columnsWidths size &lt; columnCount ifTrue: [ columnsWidths add: 0 ].		columnsWidths at: columnCount put: ((columnsWidths at: columnCount) max: e extent x).				maxHeight := maxHeight max: e extent y.		columnCount := columnCount + 1.				columnCount &gt; lineItemSize			ifTrue: [ 				columnCount := 1. 				rowHeights add: maxHeight.				maxHeight := 0 ]	].	rowHeights add: maxHeight.	"We do the translation"	columnCount := 1.	rowCount := 1.	pointer := (((columnsWidths at: 1) / 2) @ ((rowHeights at: 1) / 2)).	elements do: [ :e | 		e translateTo: pointer.		pointer := pointer + (self gapSize * 2 @ 0) + (((columnsWidths at: columnCount) / 2) @ 0).		columnCount := columnCount + 1.		columnCount &gt; lineItemSize			ifTrue: [ 				columnCount := 1.				pointer := (((columnsWidths at: 1) / 2) @ pointer y)  + (0 @ ((rowHeights at: rowCount) / 2)).				rowCount := rowCount + 1.				rowCount &lt;= rowHeights size 					ifTrue: [ pointer := pointer + (0 @ ((rowHeights at: rowCount) / 2)) ].				 				 ]			ifFalse: [ pointer := pointer + (self gapSize * 2 @ 0) + (((columnsWidths at: columnCount ) / 2) @ 0) ].	]</body></methods><methods><class-id>Roassal2.RTCellLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize	super initialize.	self leftCentered</body></methods><methods><class-id>Roassal2.RTZoomableBoxView</class-id> <category>initialization</category><body package="Roassal2-Selection">initialize	super initialize.	self allowNegatedBox: false.	self when: RTSelectionEnd do: [:e| self updateScale: e. ].</body><body package="Roassal2-Selection">updateScale: evt	| s r sc |	s := evt shape.	(s extent x &lt;= 0 or: [ s extent y &lt;= 0 ])		ifTrue: [ view canvas focusOnCenterScaled ]		ifFalse: [ 			r := s encompassingRectangle.			(r extent x isZero or: [ r extent y isZero ]) ifTrue: [ ^ self ].			sc := (view canvas extent * 0.9) / r extent.			sc := (sc x &lt; sc y) ifTrue: [sc x] ifFalse: [ sc y ].			view canvas camera 				translateTo: r center;				scale: sc ].	view signalUpdate.</body></methods><methods><class-id>Roassal2.RTArcLine</class-id> <category>accessing</category><body package="Roassal2-Shapes">attachPoint: anAttachPoint	super attachPoint: anAttachPoint.	head attachPoint: anAttachPoint</body><body package="Roassal2-Shapes">color: aColor	super color: aColor.	head color: aColor</body><body package="Roassal2-Shapes">distance: aDistance	distance := aDistance</body><body package="Roassal2-Shapes">distanceFor: anEdge	^ distance rtValue: anEdge</body><body package="Roassal2-Shapes">head	^ head</body><body package="Roassal2-Shapes">head: aLineDecorationShape	head := aLineDecorationShape.	head attachPoint: attachPoint</body></methods><methods><class-id>Roassal2.RTArcLine</class-id> <category>public</category><body package="Roassal2-Shapes">empty	self head: RTEmptyArrowHead new</body><body package="Roassal2-Shapes">emptyNarrowArrowHead	self head: RTEmptyNarrowArrow asHead</body><body package="Roassal2-Shapes">filledArrowHead	self head: RTFilledArrow asHead</body><body package="Roassal2-Shapes">filledNarrowArrowHead	self head: RTFilledNarrowArrow asHead</body><body package="Roassal2-Shapes">simple	self head: RTSimpleArrowHead new</body></methods><methods><class-id>Roassal2.RTArcLine</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeClass	^ TRArcLineShape</body><body package="Roassal2-Shapes">trachelShapeFor: anEdge	| lineTrachelShape headTrachelShape shape |	(self isSelfLoopAllowedFor: anEdge) ifFalse: [ 		^ TRNoShape instance ].	lineTrachelShape := self trachelShapeClass new.	self updateLineFor: anEdge trachelShape: lineTrachelShape.	headTrachelShape := head trachelShapeFor: anEdge.	shape := TRCompositeShape new		addShape: lineTrachelShape;		addShape: headTrachelShape;		yourself.	^ shape</body></methods><methods><class-id>Roassal2.RTArcLine</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	self simple</body></methods><methods><class-id>Roassal2.RTArcLine</class-id> <category>rendering</category><body package="Roassal2-Shapes">updateFor: edge trachelShape: trachelShape	(self isSelfLoopAllowedFor: edge) ifFalse: [ 		^ trachelShape ].	self updateLineFor: edge trachelShape: trachelShape shapes first.	head updateFor: edge trachelShape: trachelShape shapes second.	^ trachelShape</body><body package="Roassal2-Shapes">updateLineFor: edge trachelShape: trachelShape	trachelShape		line:			(RTLineSegment				from: (attachPoint startingPointOf: edge)				to: (attachPoint endingPointOf: edge)).	trachelShape color: (self colorFor: edge).	trachelShape width: (self widthFor: edge).	trachelShape distance: (self distanceFor: edge).	trachelShape resetPath.	^ trachelShape</body></methods><methods><class-id>Roassal2.RTNoShape</class-id> <category>as yet unclassified</category><body package="Roassal2-Shapes">color: aValueOrAOneArgBlock	"do nothing"</body><body package="Roassal2-Shapes">colorElement: aValueOrAOneArgBlock	"do nothing"</body></methods><methods><class-id>Roassal2.RTNoShape</class-id> <category>rendering</category><body package="Roassal2-Shapes">heightFor: element	^ 0</body><body package="Roassal2-Shapes">updateFor: anElement trachelShape: trachelShape	"Do nothing"</body><body package="Roassal2-Shapes">widthFor: element	^ 0</body></methods><methods><class-id>Roassal2.RTNoShape</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeFor: element	"We return a Trachel null shape because shapedObjects play directly with the low level shape"	^ TRNoShape new</body></methods><methods><class-id>Roassal2.RTNoShape class</class-id> <category>as yet unclassified</category><body package="Roassal2-Shapes">new	instance ifNil: [ instance := super new ].	^ instance</body></methods><methods><class-id>Roassal2.RTXPPoint</class-id> <category>accessing</category><body package="Roassal2-Experimental">x	^ x</body><body package="Roassal2-Experimental">x: aNumber	x := aNumber</body><body package="Roassal2-Experimental">y	^ y</body><body package="Roassal2-Experimental">y0	^ y0</body><body package="Roassal2-Experimental">y0: aNumber	y0 := aNumber</body><body package="Roassal2-Experimental">y: aNumber	y := aNumber</body></methods><methods><class-id>Roassal2.RTXPPoint class</class-id> <category>initialize-release</category><body package="Roassal2-Experimental">x: x y: y y0: y1	^ self new x: x; y: y; y0: y1</body></methods><methods><class-id>Roassal2.RTGroup</class-id> <category>actions</category><body package="Roassal2-Core">pushBack	self do: #pushBack</body><body package="Roassal2-Core">pushFront	self do: #pushFront</body><body package="Roassal2-Core">removeInteractionIfPresent: anInteractionClass	"Remove an interaction, if present, on each element contained in the group		For example:	-=-=-=-=-=	v := RTView new.	elements := RTEllipse new size: 20; elementsOn: (1 to: 20).	v addAll: elements.	RTGridLayout on: elements.	relevantElements := elements select: [ :e | e model &lt; 10 ].	relevantElements do: [ :e | e trachelShape color: Color blue ].	d := RTDraggable new groupToDrag: relevantElements.	v canvas addMenu: 'add group dragging' callback: [		relevantElements @ d.	].	v canvas addMenu: 'remove group dragging' callback: [		relevantElements removeInteractionIfPresent: RTDraggable	].	v	-=-=-=-=-=	"	self do: [ :e | e removeInteractionIfPresent: anInteractionClass ]</body><body package="Roassal2-Core">resetElementFromModelCache	"Reset the cache"	elementFromModelCache := nil</body><body package="Roassal2-Core">setAsFixed	self do: #setAsFixed</body><body package="Roassal2-Core">updateShape	self do: #updateShape</body></methods><methods><class-id>Roassal2.RTGroup</class-id> <category>public</category><body package="Roassal2-Core">+ aShape	self addShape: aShape</body><body package="Roassal2-Core">@ interaction	self do: [ :e | e @ interaction ]</body><body package="Roassal2-Core">addShape: aShape	self do: [ :e | e addShape: aShape ]</body><body package="Roassal2-Core">addedIn: view	self do: [ :e | view add: e ]</body><body package="Roassal2-Core">center	"Return the center of the group"	^ self encompassingRectangle center</body><body package="Roassal2-Core">elementsFromModels: objects	"Return elements that corresponds to the objects provided as parameter. If none is found, then return an empty collection"	| answer t |	self assert: [ objects isCollection ] description: 'Provide a set of elements instead of one single element'. 	answer := RTGroup new.	objects do: [ :o |		t := self elementsFromModel: o.		t notNil ifTrue: [ answer addAll: t ] ].	^ answer</body><body package="Roassal2-Core">encompassingRectangle	^ self 		ifEmpty: [ (0 @ 0) corner: (0 @ 0) ]		ifNotEmpty: [ Rectangle merging: (self collect: #encompassingRectangle) ]</body><body package="Roassal2-Core">extent	^ self encompassingRectangle extent</body><body package="Roassal2-Core">height	"Return the height of the encompassing rectangle of all the elements"	^ self encompassingRectangle height</body><body package="Roassal2-Core">leftMostElement	"Return the element located on the most left"	| t |	t := self first.	self do: [ :e | (t position x &gt; e position x) ifTrue: [ t := e ] ].	^ t</body><body package="Roassal2-Core">remove	"Remove all the elements contained in myself from the view"	self view removeElements: self</body><body package="Roassal2-Core">rightMostElement	"Return the element located on the most left"	| t |	t := self first.	self do: [ :e | (t position x &lt; e position x) ifTrue: [ t := e ] ].	^ t</body><body package="Roassal2-Core">rotateByDegrees: degreeAsABlockOrValue	self do: [ :e | e rotateByDegrees: degreeAsABlockOrValue ]</body><body package="Roassal2-Core">translateBy: aPoint	self do: [ :e | e translateBy: aPoint ]</body><body package="Roassal2-Core">translateTo: aPosition	| center |	center := self encompassingRectangle center.	self translateBy: (aPosition - center)</body><body package="Roassal2-Core">translateTopLeftTo: aPosition	| center |	center := self encompassingRectangle topLeft.	self translateBy: (aPosition - center)</body><body package="Roassal2-Core">when: evt do: callback	self do: [ :e | e when: evt do: callback ]</body><body package="Roassal2-Core">width	^ self encompassingRectangle width</body></methods><methods><class-id>Roassal2.RTGroup</class-id> <category>converting</category><body package="Roassal2-Core">asGroup	^ self</body></methods><methods><class-id>Roassal2.RTGroup</class-id> <category>attributes</category><body package="Roassal2-Core">attributeAt: aKey	^ self attributes at: aKey</body><body package="Roassal2-Core">attributeAt: aKey ifAbsent: aBlockClosure 		^ self attributes at: aKey ifAbsent: aBlockClosure</body><body package="Roassal2-Core">attributeAt: aKey ifAbsentPut: aBlockClosure 		^ self attributes at: aKey ifAbsentPut: aBlockClosure</body><body package="Roassal2-Core">attributeAt: aKey put: value	^ self attributes at: aKey put: value</body><body package="Roassal2-Core">attributes	"Return the list of attributes associated to the element. Attributes are useful for caching values"	^ attributes ifNil: [ attributes := Dictionary new ]</body><body package="Roassal2-Core">hasAttribute: aKey 	"Return true if attributes includes aKey"		^ attributes notNil and: [ attributes includesKey: aKey ]</body><body package="Roassal2-Core">hasAttributes 	"Return true if at least one attributes is present"		^ attributes notNil and: [ attributes notEmpty ]</body><body package="Roassal2-Core">removeAttributeAt: aKey	^ self attributes removeKey: aKey</body><body package="Roassal2-Core">removeAttributeAt: aKey ifAbsent: anErrorBlock	^ self attributes removeKey: aKey ifAbsent: anErrorBlock</body></methods><methods><class-id>Roassal2.RTGroup</class-id> <category>resizing</category><body package="Roassal2-Core">extent: newExtentT	| newExtent oldExtent encompassingRectangle |	newExtent := newExtentT max: 1 @ 1.	encompassingRectangle := self encompassingRectangle.	oldExtent := encompassingRectangle extent.		"Make top left to 0 @ 0"	self translateBy: encompassingRectangle topLeft negated.		"Resizing and moving the position of each element"	self do: [ :element |		element translateTo: (element position * newExtent / oldExtent).		element extent: (element extent * newExtent / oldExtent).	].		"Move back all the element to the original position"	self translateBy: encompassingRectangle topLeft.</body><body package="Roassal2-Core">height: newHeight	self extent: self extent x @ newHeight</body><body package="Roassal2-Core">width: newWidth	self extent: newWidth @ self extent y</body></methods><methods><class-id>Roassal2.RTGroup</class-id> <category>accessing</category><body package="Roassal2-Core">add: element	self resetElementFromModelCache.	^ super add: element</body><body package="Roassal2-Core">addAll: elements	self resetElementFromModelCache.	^ super addAll: elements</body><body package="Roassal2-Extentions">at: index	index isInteger ifTrue: [ ^ super at: index].	index isNumber ifTrue: [ ^ super at: index asInteger ].	self error: 'not number'.</body><body package="Roassal2-Core">canvas	^ self anyOne trachelShape canvas</body><body package="Roassal2-Core">edges	^ self select: [ :o | o class == RTEdge ]</body><body package="Roassal2-Core">elementFromModel: anObject	"Return an element that corresponds to the object provided as parameter. If none is found, then return nil"		| t key|	self elementFromModelCache at: anObject ifPresent: [ :v |		v isCollection ifFalse: [ ^ v ] ].	"We have this line because of a bug of the implementation of CompiledMethod&gt;&gt;#="	t := (anObject class == CompiledMethod) 				ifTrue: [ self detect: [ :el | el model == anObject ] ifNone: [ nil ] ]				ifFalse: [ self detect: [ :el | el model = anObject ] ifNone: [ nil ] ].	"We have this hack for nil objects because in visualWorks a dictionary cannot have nil as a key"	key := anObject isNil ifTrue: [ 'KeyForNilObjects' ] ifFalse: [ anObject ].	self elementFromModelCache at: key put: t.	^ t</body><body package="Roassal2-Core">elementFromModelCache	"Define a cache for the element lookup from models"	elementFromModelCache ifNil: [ elementFromModelCache := Dictionary new ].	^ elementFromModelCache</body><body package="Roassal2-Core">elements	^ self select: [ :o | o class == RTElement ]</body><body package="Roassal2-Core">elementsFromModel: anObject	"Return an element that corresponds to the object provided as parameter. If none is found, then return nil"		| t key |	self elementFromModelCache at: anObject ifPresent: [ :v | v isCollection ifTrue: [ ^ v ] ].	"We have this line because of a bug of the implementation of CompiledMethod&gt;&gt;#="	t := (anObject class == CompiledMethod) 				ifTrue: [ self select: [ :el | el model == anObject ] ]				ifFalse: [ self select: [ :el | el model = anObject ] ].	"We have this hack for nil objects because in visualWorks a dictionary cannot have nil as a key"	key := anObject isNil ifTrue: [ 'KeyForNilObjects' ] ifFalse: [ anObject ].	self elementFromModelCache at: key put: t.	^ t</body><body package="Roassal2-Core">incomingEdges	^ self flatCollect: #incomingEdges</body><body package="Roassal2-Core">model	^ 'group'</body><body package="Roassal2-Core">outgoingEdges	"Return the list of outgoing edges from that group"	^ self flatCollect: #outgoingEdges</body><body package="Roassal2-Core">position	^ self encompassingRectangle center</body><body package="Roassal2-Core">view	"Return the view of the group. This method assumes that all the elements of group belong to the same view"	^ self anyOne view</body></methods><methods><class-id>Roassal2.RTGroup</class-id> <category>signalling</category><body package="Roassal2-Core">signalUpdate	self ifEmpty: [ ^ self ].	self first signalUpdate.</body></methods><methods><class-id>Roassal2.RTGroup</class-id> <category>rendering</category><body package="Roassal2-Core">renderOn: trachelCanvas	"Do nothing"</body></methods><methods><class-id>Roassal2.RTGroup</class-id> <category>visitor</category><body package="Roassal2-Core">accept: aRTVisitor	self  do: [ :e | e trachelShape accept: aRTVisitor]</body></methods><methods><class-id>Roassal2.TRSimpleArrowShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-ShapesForArrow">computePath	| vector u unit middle endPoint |	self shouldBeDrawn ifFalse: [ ^ self ].	vector := self to - self from. 	u := vector normal.	unit := vector / vector r.	endPoint := self to - (vector * (1-percentage)).	middle := endPoint - (unit * size). 	left :=  middle - (u * baseSize / 2).	right := middle + (u * baseSize / 2).	path := self athensCanvas		createPath: [ :builder | 			builder				absolute;				moveTo: left;				lineTo: endPoint;				lineTo: right. ]</body><body package="Roassal2-Trachel-ShapesForArrow">shouldBeDrawn	"Return true if the arrow head should be drawn"	^ self to ~= self from</body></methods><methods><class-id>Roassal2.TRSimpleArrowShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-ShapesForArrow">initialize	super initialize.	open := true.</body></methods><methods><class-id>Roassal2.TRSimpleArrowShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-ShapesForArrow">accept: aVisitor	aVisitor visitArrowShape: self</body></methods><methods><class-id>Roassal2.RTSVGText</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">angle	^ angle</body><body package="Roassal2-Exporter-SVG">angle: anObject	angle := anObject</body><body package="Roassal2-Exporter-SVG">content	^ content</body><body package="Roassal2-Exporter-SVG">content: anObject	content := anObject</body><body package="Roassal2-Exporter-SVG">element: anElement text: aString at: aPoint color: aColor		self element: anElement text: aString at: aPoint color: aColor angle: nil</body><body package="Roassal2-Exporter-SVG">element: anElement text: aString at: aPoint color: aColor angle: anAngle	self element: anElement.	self content: aString.	self x: aPoint x; y: aPoint y.	self fillColor: aColor.	self angle: anAngle.	self fontSize: anElement fontSize.</body><body package="Roassal2-Exporter-SVG">fontSize	^ fontSize</body><body package="Roassal2-Exporter-SVG">fontSize: anObject	fontSize := anObject</body><body package="Roassal2-Exporter-SVG">x	^ x</body><body package="Roassal2-Exporter-SVG">x: anObject	x := anObject</body><body package="Roassal2-Exporter-SVG">y	^ y</body><body package="Roassal2-Exporter-SVG">y: anObject	y := anObject</body></methods><methods><class-id>Roassal2.RTSVGText</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	self type: 'text'.	self label: 'text'</body></methods><methods><class-id>Roassal2.RTSVGText</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addOn: stream using: aSVGVisitor	| box |	aSVGVisitor names at: self element put: self id.	self openDef: stream.	self addPosition: stream.	self startStyle: stream.	self addFillColor: stream.	self closeTag: stream.	self startTransform: stream.	box := element encompassingRectangle.	self addRotation: self angle point: (self x)@(self y) into: stream.		self closeTag: stream.	self startClass: stream.	self closeTag: stream.	self closeDefWithContent: stream.	self addStringWithFont: self content fontSize: self fontSize into: stream.	self addExternalInteractions: aSVGVisitor.	self closeFullDef: stream.</body><body package="Roassal2-Exporter-SVG">addPosition: stream	|box fixX fixY|	box := TRLabelShape new		text: self content;		encompassingRectangle.	fixX := (self x - (box width / 5)) rounded.	fixY := (self y + (box height / 4)) rounded.		stream		nextPutAll:				('x="&lt;1p&gt;" y="&lt;2p&gt;" ' expandMacrosWith: fixX with: fixY).</body></methods><methods><class-id>Roassal2.RTCircularTreeMapBuilder</class-id> <category>layout</category><body package="Roassal2-Builder-CircularMap">expandCircle: e with: parent	e trachelShape position: parent x @ parent y.	e trachelShape extent: (parent r*2) @ (parent r*2).</body><body package="Roassal2-Builder-CircularMap">expandCircles: e parent: parent	"	RTCircularTreeMapExample new example01	"	| cc |	self expandCircle: e with: parent.	(e attributes includesKey: self childrenKey) ifFalse: [ ^ self ].	(e attributes at: self childrenKey) do: [ :child | 		(child attributes includesKey: #circle) ifTrue: [ 			cc := self relToAbsCircle: (child attributes at: #circle) parent: parent.			self expandCircles: child parent: cc ] ].</body><body package="Roassal2-Builder-CircularMap">layout: e		| children |	(e attributes includesKey: self childrenKey) ifFalse: [ ^ self ].		children := e attributes at: self childrenKey.	children isEmpty ifTrue: [ ^ self ].		children do: [ :child | self layout: child ].	self sortChildren: children.	self layoutNodes: children</body><body package="Roassal2-Builder-CircularMap">layoutElements	| virtualRoot |	virtualRoot := (RTEllipse new borderWidth: 0.005) element.	virtualRoot attributes at: self childrenKey put: rootNodes.	self layout: virtualRoot.	self expandCircles: virtualRoot parent: (RTCircleTree new r: self baseradius)</body><body package="Roassal2-Builder-CircularMap">relToAbsCircle: rel parent: parent	"	RTCircularTreeMapExample new example02	"	| res |	res := RTCircleTree new x: rel x y: rel y r: rel r.	res scaleFull: parent r.	res translateBy: (parent x @ parent y).	^ res</body><body package="Roassal2-Builder-CircularMap">sortChildren: children	children sort: [ :a :b | (self weightOf: a) &gt; (self weightOf: b) ].</body><body package="Roassal2-Builder-CircularMap">weight2rad: w	^ (w / Float pi) sqrt</body></methods><methods><class-id>Roassal2.RTCircularTreeMapBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-CircularMap">createView	^ super createView @ RTDraggableView @ RTZoomableView.</body><body package="Roassal2-Builder-CircularMap">renderIn: aView	super renderIn: aView.	self layoutElements.</body></methods><methods><class-id>Roassal2.RTCircularTreeMapBuilder</class-id> <category>private</category><body package="Roassal2-Builder-CircularMap">findBestGapIn: gaps children: children index: i 	cbounding: cbounding bounds: bounds circles: circles	 distance: distance closest: closest gap: gap ncircles: ncircles	| gapCircle cdistance |		gaps do: [ :cgap | 		gapCircle := cgap makeGapCircle: (self weight2rad: (self weightOf: (children at: i) )).		cdistance := RTCircleTree distanceOf: cbounding and: gapCircle.		cdistance &lt; distance ifTrue: [ 			cgap circles third isNotNil ifTrue: [ 				(RTCircleTree doIntersect: cgap circles third with: gapCircle )				ifTrue: [ cdistance := Float fmax. ] ]			ifFalse: [ 				[ :br | 					((bounds findStart: gapCircle) to: ncircles) do: [ :ccircle |						(RTCircleTree doIntersect: (circles at: ccircle) with: gapCircle)						ifTrue: [ cdistance := Float fmax. br value ] ]				] valueWithExit.  ] ].		cdistance &lt; distance ifTrue: [ 			^ Array with: cdistance with: gapCircle with: cgap.  ].	].	^ Array with: distance with: closest with: gap</body><body package="Roassal2-Builder-CircularMap">layoutNodes: children	"	RTCircularTreeMapExample new example01	"	| size circles bounds firstCircle cbounding circle distance   scale |	size := children size.	size &gt; 100 ifTrue: [ size := 100 ].	circles := OrderedCollection new: size.	size = 0 ifTrue: [ ^ self ].		bounds := RTBounds new max: 100.		firstCircle := RTCircleTree new r: (self weight2rad: (self weightOf: children first)).	circles add: firstCircle.	cbounding := bounds push: firstCircle index: 1.	size &gt; 1 ifTrue: [ 		circle  := RTCircleTree new r: (self weight2rad: (self weightOf: children second)) .		circle translateBy: firstCircle center.		circle translateBy: (RTVector new x: firstCircle r + circle r y: 0).		circles add: circle.		cbounding := bounds push: circle index: 2.		size &gt; 2 ifTrue: [ 			| gaps closest gap ncircles |			gaps := OrderedCollection new.			gaps add: (RTGapTree new c1: firstCircle c2: circle).			gaps add: (RTGapTree new c1: circle c2: firstCircle).			ncircles := 2.			closest := nil.			gap := nil.			(3 to: size) do: [ :i | | arr |				distance := Float fmax.				closest := nil.				gap := nil.				arr := self findBestGapIn: gaps children: children index: i 					cbounding: cbounding bounds: bounds circles: circles 					distance: distance closest: closest gap: gap ncircles: ncircles.								distance := arr first.				closest := arr second.				gap := arr third.								gaps remove: gap.				gap addGapsTo: gaps closest: closest.				circles add: closest.				ncircles := ncircles + 1.				(cbounding r &lt; (distance + closest r)) 					ifTrue: [ cbounding := bounds push: closest index: ncircles  ].							] ] ].	scale := 1/ cbounding r.	(1 to: size) do: [ :i | | c |		c := circles at: i.		c translateBy: (cbounding center scaleBy: -1).		c scaleFull: scale.		(children at: i) attributes at: #circle put: c.	 ].		^ circles.</body></methods><methods><class-id>Roassal2.RTCircularTreeMapBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-CircularMap">baseradius	^ baseradius</body><body package="Roassal2-Builder-CircularMap">baseradius: r	baseradius := r.</body><body package="Roassal2-Builder-CircularMap">popup	^ self interaction popup</body></methods><methods><class-id>Roassal2.RTCircularTreeMapBuilder</class-id> <category>default-values</category><body package="Roassal2-Builder-CircularMap">defaultBase	^ 250</body></methods><methods><class-id>Roassal2.RTCircularTreeMapBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-CircularMap">initialize	super initialize.	self shape circle		fillColor: Color white;		borderColor: Color gray.	self interaction popup.	baseradius := self defaultBase.</body></methods><methods><class-id>Roassal2.RTTabTable</class-id> <category>accessing</category><body package="Roassal2-Table">attributes	attributes ifNil: [ attributes := Dictionary new ].	^ attributes</body><body package="Roassal2-Table">cleanedValuesOfColumn: indexAsNumberOfString	"Return the values stored in the column. No nil values may be returned (this happens if a column is has less elements than other columns"	^ (self valuesOfColumn: indexAsNumberOfString) select: [ :ss | ss notNil and: [ ss ~= 'nil' and: [ ss notEmpty ] ] ]</body><body package="Roassal2-Table">dictionaryValues	^ self values		collect: [ :row | 			(row withIndexCollect: [ :each :i | (firstRow at: i) asSymbol -&gt; each ])				asOrderedDictionary ]</body><body package="Roassal2-Table">firstColumn	^ self valuesOfColumn: 1</body><body package="Roassal2-Table">firstRow	^ firstRow ifNil: [ self values first ]</body><body package="Roassal2-Table">maxOfColumn: aBlock	| max |	max := -100000.	self values do: [ :row | max := max max: (aBlock rtValue: row) ].	^ max</body><body package="Roassal2-Table">maximum	| max |	"We initialize the mininum to any value found in the table"	max := self values last detect: #isNumber ifNone: [ 0 ].		self values do: [ :row |		row do: [ :value | 			value isNumber ifTrue: [ max := max max: value ] ] ].	^ max</body><body package="Roassal2-Table">minimum	"Return the minimum of the whole table"	| min |	"We initialize the mininum to any value found in the table"	min := self values last detect: #isNumber ifNone: [ 0 ].		self values do: [ :row |		row do: [ :value | 			value isNumber ifTrue: [ min := min min: value ] ] ].	^ min</body><body package="Roassal2-Table">numberOfColumns	^ (self values collect: #size) max</body><body package="Roassal2-Table">numberOfRows	^ values size</body><body package="Roassal2-Table">removeFirstRow	"Remove the first line of the table, typically the header"	firstRow := values first.	values := values allButFirst.	^ firstRow.</body><body package="Roassal2-Table">values	^ values</body><body package="Roassal2-Table">valuesGroupedBy: aSymbol	^ (self dictionaryValues groupedBy: [ :each | each at: aSymbol ]) asDictionary</body><body package="Roassal2-Table">valuesOfColumn: indexAsNumberOfString	"Return the values stored in the column. Note that these values may not be cleaned, ie. nil values may be contained"	^ values collect: [ :row | row at: (self convertFromNameToIndexIfNecessary: indexAsNumberOfString) ]</body></methods><methods><class-id>Roassal2.RTTabTable</class-id> <category>converting</category><body package="Roassal2-Table">convertColumn: index to: blockForConvertion	"Convert a column of the table"	values do: [ :row | 		| v i |		i := (self convertFromNameToIndexIfNecessary: index).		v := row at: i.		row at: i put: (blockForConvertion rtValue: v)		 ]</body><body package="Roassal2-Table">convertColumnAsDateAndTime: integerOrString	"Replace each element by an instance of DateAndTime"	self convertColumnsAsDateAndTime: (Array with: (self convertFromNameToIndexIfNecessary: integerOrString))</body><body package="Roassal2-Table">convertColumnAsInteger: integerOrString	"Convert a column as integers"	self assert: [ integerOrString isCollection not ] description: 'Provide an integer or a string as argument please'.	^ self convertColumnsAsInteger: (Array with: (self convertFromNameToIndexIfNecessary: integerOrString))</body><body package="Roassal2-Table">convertColumns: collectionOfIntegers to: aBlock	"collectionOfIntegers is a collection of integers corresponding to column to convert"	"block is a one-arg block that takes as input a string and return the wanted value"	collectionOfIntegers do: [ :index | 		self convertColumn: index to: aBlock ]</body><body package="Roassal2-Table">convertColumnsAsDateAndTime: collectionOfIntegers	"collectionOfIntegers is a collection of integers corresponding to column to convert"	"Replace each element by an instance of DateAndTime"	self convertColumns: collectionOfIntegers to: [ :s | (TRPlatform current dateAndTimeFromString: s) ]</body><body package="Roassal2-Table">convertColumnsAsFloat: collectionOfIntegers	^ self convertColumns: collectionOfIntegers to: [ :s | Float readFrom: s ]</body><body package="Roassal2-Table">convertColumnsAsInteger: collectionOfIntegers	^ self convertColumns: collectionOfIntegers to: [ :s | s asNumber asInteger ]</body><body package="Roassal2-Table">gather: columnIndex using: twoArgBlock	| d key | 	d := Dictionary new.	values do: [ :row |		key := row at: columnIndex.		(d includesKey: key)			ifTrue: [ d at: key put: (twoArgBlock value: (d at: key) value: row) ]			ifFalse: [ d at: key put: row ] ].	values := d values</body><body package="Roassal2-Table">indexOfName: aString	"Return the index of the column named aString"	| s |	s := aString asSymbol.	firstRow doWithIndex: [ :e :i | e asSymbol = s ifTrue: [ ^ i ] ].	^ 0</body><body package="Roassal2-Table">replaceEmptyValuesWith: aValue inColumns: columns	"columns is a collection of integers"	self convertColumns: columns to: [ :s | s isEmpty ifTrue: [ aValue ] ifFalse: [ s ] ]</body><body package="Roassal2-Table">replaceZeroWithCumulativeValuesInColumns: columns	columns		do: [ :column | 			| previous |			previous := 0.			values				do: [ :row | 					(row at: column) = 0 ifTrue: [ row at: column put: previous ].					previous := row at: column ] ]</body></methods><methods><class-id>Roassal2.RTTabTable</class-id> <category>updating</category><body package="Roassal2-Table">breakDown: l usingDelimiters: delimitersAsCharacter	^ l subStringsKeepingEmptyFields: delimitersAsCharacter</body><body package="Roassal2-Table">input: txt	"txt is a large string in which we have one entry per line"	^ self input: txt usingDelimiter: (self detectDelimiterIn: txt)</body><body package="Roassal2-Table">input: txt usingDelimiter: delimitersAsCharacter	"txt is a large string in which we have one entry per line"	values := (txt lines 					select: #notEmpty 					thenCollect: [ :l | self breakDown: l trimBoth usingDelimiters: delimitersAsCharacter asString ])		select: #notEmpty</body><body package="Roassal2-Table">input: txt usingDelimiters: delimitersAsString	"txt is a large string in which we have one entry per line"	values := txt lines collect: [ :l | l substrings: delimitersAsString ]</body><body package="Roassal2-Table">rejectInColumn: nbColumn row: aBlock	"Remove rows for which the nbColumn element is evaluated at true"	self rejectRow: [ :row | aBlock rtValue: (row at: nbColumn) ]</body><body package="Roassal2-Table">rejectRow: aBlock	"Remove a row for which the block evaluate to true. The block takes as argument the row"	values := values reject: [ :v | aBlock rtValue: v ]</body><body package="Roassal2-Table">removeColumn: aNumber	values := values collect: [ :v | v copyWithoutIndex: aNumber ].	firstRow ifNotNil: [ firstRow := firstRow copyWithoutIndex: aNumber ]</body></methods><methods><class-id>Roassal2.RTTabTable</class-id> <category>private-utility</category><body package="Roassal2-Table">convertFromNameToIndexIfNecessary: anObject	"anObject could be a number (to indicate a column index) or a string"	"The method return the index"	^ anObject isNumber		ifTrue: [ anObject ]		ifFalse: [ 			"Then we are surely a string" 			self indexOfName: anObject ]</body><body package="Roassal2-Table">detectDelimiterIn: aString	| options first second |	aString lines size = 0		ifTrue: [ ^ Character tab ].	options := Array with: Character tab with: $; with: $,.	first := (options collect: [ :each | each -&gt; (aString lines first occurrencesOf: each) ]) asDictionary.	second := first.	aString lines size &gt; 1		ifTrue: [ second := (options collect: [ :each | each -&gt; (aString lines second occurrencesOf: each) ]) asDictionary ].	^ (options detect: [ :each | (first at: each) &gt; 0 and: [ (first at: each) = (second at: each) ] ] ifNone: [ Character tab ]) value</body></methods><methods><class-id>Roassal2.RTTabTable class</class-id> <category>instance creation</category><body package="Roassal2-Table">openTSVfile	| fileName tab stream |	fileName := TRPlatform current dialogChooseFile:  #('*.csv') label: 'Pick a CSV file'.	fileName ifNil: [ ^ nil ].	stream := fileName asFileReference readStream.	[ tab := self new.	tab input: stream contents usingDelimiter: Character tab. ]	ensure: [ stream close ].	self assert: [tab values first size = 3] description: 'Wrong CSV structure'.	tab convertColumnsAsInteger: #(1).		^ tab</body></methods><methods><class-id>Roassal2.RTTabTable class</class-id> <category>data</category><body package="Roassal2-Table">countries	^ 'Country	Area	Population	Density	Gross Domestic Product	Gross Domestic Product per capita	Literacy Rate	Life ExpectancyAfghanistan	251827	29835392	118	27	917	28	45Albania	11100	2994667	270	24	7967	99	77Algeria	919595	34994937	38	251	7175	70	75American Samoa	77	67242	875	1	8556	97	74Andorra	181	84825	469	3	38904	100	82Angola	481354	13338541	28	107	8044	67	39Anguilla	35	15094	430	0	11621	95	81Antigua and Barbuda	171	87884	514	1	16215	86	75Argentina	1073518	41769726	39	596	14269	97	77Armenia	11484	2967975	258	17	5681	99	73Aruba	69	106113	1527	2	21279	97	76Australia	2988902	21766711	7	882	40539	99	82Austria	32383	8217280	254	332	40403	98	80Azerbaijan	33436	8372373	250	91	10844	99	67The Bahamas	5359	313312	58	9	28473	96	71Bahrain	293	1214705	4140	30	24459	87	78Bangladesh	55598	158570535	2852	259	1631	48	70Barbados	166	286705	1727	6	21719	100	74Belarus	80155	9577552	119	131	13699	100	71Belgium	11787	10431477	885	394	37799	99	80Belize	8867	321115	36	3	8256	77	68Benin	43484	9325032	214	14	1500	35	60Bermuda	21	68679	3294	5	65522	98	81Bhutan	14824	708427	48	4	5470	47	67Bolivia	424164	10118683	24	48	4732	87	68Bosnia and Herzegovina	19767	4622163	234	30	6562	97	79Botswana	224607	2065398	9	28	13794	81	58Brazil	3287612	203429773	62	2172	10677	89	73Brunei	2226	401890	181	20	50710	93	76Bulgaria	42811	7093635	166	97	13643	98	74Burkina Faso	105869	16751455	158	20	1193	22	54Burma (Myanmar)	261228	53999804	207	76	1416	90	68Burundi	10745	10216190	951	3	333	59	59Cambodia	69898	14701717	210	30	2053	74	63Cameroon	183568	19711291	107	44	2249	68	54Canada	3855103	34030589	9	1330	39082	99	81Cape Verde	1557	516100	331	2	3697	77	71Cayman Islands	102	51384	504	2	43788	98	81Central African Republic	240535	4950027	21	3	696	49	50Chad	495755	10758945	22	17	1614	26	48Chile	291933	16888760	58	258	15271	96	78China	3705407	1336718015	361	10090	7548	92	75Colombia	439736	44725543	102	435	9735	90	75Comoros	863	794683	921	1	1007	57	64Congo Democratic Republic of the	905355	71712867	79	23	322	67	55Congo Republic of the	132047	4243929	32	17	4032	84	55Cook Islands	91	11124	122	0	16469	95	75Costa Rica	19730	4576562	232	51	11181	95	78Cote d''Ivoire	124504	21504162	173	37	1722	49	57Croatia	21851	4483804	205	78	17416	98	76Cuba	42803	11087330	259	114	10291	100	78Cyprus	3572	1120489	314	23	20696	98	78Czech Republic	30451	10190213	335	261	25642	99	77Denmark	16639	5529888	332	202	36475	99	79Djibouti	8958	757074	85	2	2780	68	76Dominica	290	72969	252	1	10388	94	76Dominican Republic	18792	9956648	530	87	8763	87	77Ecuador	109484	15007343	137	115	7663	91	76Egypt	386662	82079636	212	498	6065	71	73El Salvador	8124	6071774	747	44	7176	81	73Equatorial Guinea	10831	668225	62	24	35647	87	62Eritrea	45406	5939484	131	4	610	59	63Estonia	17463	1282963	73	25	19245	100	73Ethiopia	426373	90873739	213	86	948	43	56Faroe Islands	538	49267	92	2	32273	99	80Fiji	7056	883125	125	4	4381	94	71Finland	130559	5259250	40	186	35366	100	79France	248573	65312249	263	2145	32842	99	81French Polynesia	1609	294935	183	5	15997	98	77Gabon	103347	1576665	15	22	14258	63	52The Gambia	4361	1797860	412	3	1943	40	64Georgia	26911	4585874	170	22	4893	100	77Germany	137847	81471834	591	2940	36086	99	80Ghana	92098	24791073	269	62	2500	58	61Gibraltar	3	28956	11538	1	44032	85	79Greece	50949	10760136	211	318	29563	96	80Greenland	836330	57670	0	2	34489	100	71Grenada	133	108419	816	1	10127	100	73Guam	210	183286	873	3	13640	99	78Guatemala	42042	13824463	329	70	5074	69	71Guinea	94926	10601009	112	11	1020	30	58Guinea-Bissau	13948	1596677	114	2	1117	42	49Guyana	83000	744768	9	5	7222	92	67Haiti	10714	9719932	907	11	1181	53	62Honduras	43278	8143564	188	34	4130	80	71Hong Kong	426	7122508	16709	326	45742	94	82Hungary	35918	9976062	278	188	18805	99	75Iceland	39769	311058	8	12	37999	99	81India	1269219	1189172906	937	4060	3414	61	67Indonesia	735358	245613043	334	1030	4194	90	71Iran	636372	77891220	122	819	10511	77	70Iraq	169235	30399572	180	113	3730	74	71Ireland	27133	4670976	172	172	36887	99	80Israel	8019	7473052	932	219	29359	97	81Italy	116348	61016804	524	1774	29074	98	82Jamaica	4244	2868380	676	24	8269	88	73Japan	145914	126475664	867	4310	34078	99	82Jordan	34495	6508271	189	35	5306	90	82Kazakhstan	1052090	15522373	15	196	12653	100	69Kenya	224081	41070934	183	66	1608	85	59Korea North	46540	24457492	526	40	1635	99	69Korea South	38502	48754657	1266	1459	29925	98	79Kuwait	6880	2595628	377	137	52588	93	77Kyrgyzstan	77202	5587443	72	12	2151	99	70Laos	91429	6477211	71	16	2422	73	62Latvia	24938	2204708	88	33	14746	100	73Lebanon	4015	4143101	1032	59	14330	87	75Lesotho	11720	1924886	164	3	1716	85	52Liberia	43000	3786764	88	2	447	58	57Libya	679362	6597960	10	91	13727	83	78Liechtenstein	62	35236	570	5	142695	100	80Lithuania	25212	3535547	140	57	16006	100	75Luxembourg	998	503302	504	41	81641	100	80Macau	11	573003	52627	18	32234	91	84Macedonia	9928	2077328	209	20	9628	96	75Madagascar	226658	21926221	97	19	885	69	64Malawi	45747	15879252	347	13	817	63	52Malaysia	127355	28728607	226	414	14425	89	74Maldives	115	394999	3433	3	6922	94	74Mali	478841	14159904	30	17	1184	47	53Malta	122	408333	3347	10	25494	93	80Marshall Islands	70	67182	961	0	1987	94	72Mauritania	397955	3281634	8	7	2028	51	61Mauritius	788	1303717	1655	18	13853	84	74Mexico	758449	113724226	150	1567	13779	86	76Micronesia	271	106836	394	0	2229	89	72Moldova	13070	4314377	330	11	2547	99	71Monaco	1	30539	39548	1	31969	99	90Mongolia	603909	3133318	5	11	3517	98	68Montserrat	39	5140	131	0	5642	97	73Morocco	172414	31968361	185	151	4736	52	76Mozambique	308642	22948858	74	22	950	48	52Namibia	318261	2147585	7	15	6798	85	52Nepal	56827	29391883	517	36	1218	49	66Netherlands	16040	16847007	1050	677	40179	99	80New Caledonia	7172	256275	36	3	12323	96	77New Zealand	103363	4290347	42	118	27457	99	81Nicaragua	50336	5666301	113	18	3125	68	72Niger	489191	16468886	34	11	671	29	53Nigeria	356669	155215573	435	378	2435	68	48Northern Mariana Islands	179	46050	257	1	19544	97	77Norway	125021	4691849	38	255	54414	100	80Oman	119499	3027959	25	76	25047	81	74Pakistan	307374	187342721	609	465	2482	50	66Palau	177	20956	118	0	7826	92	72Panama	29120	3460462	119	44	12819	92	78Papua New Guinea	178704	6187591	35	15	2416	57	66Paraguay	157048	6459058	41	33	5157	94	76Peru	496225	29248943	59	276	9426	93	72Philippines	115831	101833938	879	351	3451	93	72Poland	120728	38441588	318	721	18764	100	76Portugal	35556	10760305	303	247	22955	95	79Qatar	4473	848016	190	151	177591	89	96Romania	92043	21904551	238	254	11605	97	74Russia	6601668	138739892	21	2223	16023	99	68Rwanda	10169	11370425	1118	12	1069	70	58Saint Helena Ascension and Tristan da Cunha	119	7700	65	0	2338	97	79Saint Kitts and Nevis	101	50314	499	1	13595	98	75Saint Lucia	238	161557	679	2	11129	90	77Saint Pierre and Miquelon	93	5888	63	0	8203	99	80Saint Vincent and the Grenadines	150	103869	692	1	10292	96	74Samoa	1093	193161	177	1	5462	100	72San Marino	24	31817	1351	1	35736	96	83Sao Tome and Principe	372	179506	482	0	1733	85	63Saudi Arabia	830000	26131703	31	622	23803	79	74Senegal	75955	12643799	166	24	1889	39	60Serbia	29913	7310555	244	80	10957	96	74Seychelles	176	89188	508	2	23019	92	74Sierra Leone	27699	5363669	194	5	880	35	56Singapore	269	4740737	17616	292	61573	93	82Slovakia	18933	5477038	289	120	21946	100	76Slovenia	7827	2000092	256	57	28289	100	77Somalia	246201	9925640	40	6	594	38	50South Africa	470693	49004031	104	524	10693	86	49Spain	195124	46754784	240	1369	29280	98	81Sri Lanka	25332	21283913	840	107	5004	91	76Sudan	718723	45047502	63	100	2220	61	55Suriname	63251	491989	8	5	9575	90	74Swaziland	6704	1370424	204	6	4427	82	49Sweden	173860	9088728	52	355	39026	99	81Switzerland	15937	7639961	479	325	42474	99	81Syria	71498	22517750	315	107	4770	80	75Taiwan	13892	23071779	1661	822	35619	96	78Tajikistan	55251	7627200	138	15	1933	100	66Tanzania	365755	42746620	117	58	1367	69	53Thailand	198117	66720153	337	587	8796	93	68Timor-Leste	5743	1177834	205	3	2590	59	63Togo	21925	6771993	309	6	882	61	63Tonga	288	105916	367	1	7091	99	75Trinidad and Tobago	1980	1227505	620	26	21263	99	71Tunisia	63170	10629186	168	100	9408	74	75Turkey	302535	78785548	260	961	12191	87	73Turkmenistan	188456	4997503	27	37	7384	99	69Turks and Caicos Islands	366	44819	122	0	4819	98	79Uganda	93065	34612250	372	42	1218	67	53Ukraine	233032	45134707	194	305	6762	99	69United Arab Emirates	32278	5148664	160	247	47935	78	77United Kingdom	94058	62698362	667	2173	34658	99	80United States	3794100	313232044	83	14660	46802	99	78Uruguay	68037	3308535	49	48	14505	98	76Uzbekistan	172742	28128600	163	86	3052	99	73Vanuatu	4706	224564	48	1	5063	74	65Venezuela	352144	27635743	78	345	12491	93	74Vietnam	127881	90549390	708	277	3055	94	72Virgin Islands	737	109666	149	2	14380	93	79Wallis and Futuna	55	15398	281	0	3897	50	79West Bank	2263	2568555	1135	13	4979	92	75Yemen	203850	24133492	118	63	2627	50	64Zambia	290587	13881336	48	20	1444	81	52Zimbabwe	150872	12084304	80	5	452	91	50'</body><body package="Roassal2-Table">euCountries	^  #('Russia' 'Ukraine' 'France' 'Spain' 'Sweden' 'Norway' 'Germany' 'Finland' 'Poland' 'Italy' 'United' 'Romania' 'Belarus' 'Kazakhstan' 'Greece' 'Bulgaria' 'Iceland' 'Hungary' 'Portugal' 'Austria' 'Czech' 'Serbia' 'Republic' 'Lithuania' 'Latvia' 'Croatia' 'Bosnia' 'Slovakia' 'Estonia' 'Denmark' 'Netherlands' 'Switzerland' 'Moldova' 'Belgium' 'Albania' 'Republic' 'Turkey' 'Slovenia' 'Montenegro' 'Cyprus' 'Azerbaijan' 'Luxembourg' 'Georgia' 'Andorra' 'Malta' 'Liechtenstein' 'San Marino' 'Monaco')</body><body package="Roassal2-Table">southAmericanCountries 	^ #('Brazil' 'Colombia' 'Argentina' 'Peru' 'Venezuela' 'Chile' 'Ecuador' 'Bolivia' 'Paraguay' 'Uruguay' 'Guyana' 'Suriname' 'French' 'Falkland' 'Islands')</body></methods><methods><class-id>Roassal2.TRSVGPath</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">basicEncompassingRectangle	^ rectangle</body><body package="Roassal2-Trachel-Shapes">computeCurves	"This method parse the path"	"	A complete description may be found on http://www.w3.org/TR/SVG/paths.html#PathData	So far, we only consider the following SVG tokens:		M = Move to - absolute	m = Move to - relative		Z or z = Close path		L = Line to - absolute	l = Line to - relative		The description of SVG path, says that M and m may accept more than one coordinates. In practices, this is rarely the case. 		"	| pathData |	pathData := ASPathConverter new stream: pathString readStream.	curves := pathData convertPathData.</body><body package="Roassal2-Trachel-Shapes">computePolygons	| separatedPaths |	separatedPaths := self separateSubPaths.	polygons := separatedPaths.</body><body package="Roassal2-Trachel-Shapes">computeRectangle	| allPoints |	allPoints := polygons inject: #() into: [ :acc :next | acc , next ].	rectangle := Rectangle encompassing: allPoints.	^ allPoints</body><body package="Roassal2-Trachel-Shapes">correctCurvesAndPolygonsToZero	"Center of polygons is stored in originalPosition and the center is moved to 0@0."	| originalPosition absolute key args|	self computeRectangle.	originalPosition := rectangle center.	absolute := true.	curves do: [ :curve |		key := curve first.		args := curve second.		key =#absolute ifTrue: [ absolute :=true ].		key =#relative ifTrue: [ absolute :=false ].		absolute ifTrue: [ 			args doWithIndex: [ :eachPoint :index| 				args at: index put: eachPoint - originalPosition] ].		].	polygons		do: [ :eachPolygon | eachPolygon doWithIndex: [ :eachPoint :index | eachPolygon at: index put: eachPoint - originalPosition ] ].	self computeRectangle.</body><body package="Roassal2-Trachel-Shapes">separateSubPaths	| separatedPaths subPath absolute p point key args |	separatedPaths := OrderedCollection new.	subPath := OrderedCollection new.	absolute := true.	p := 0@0.	point := [:da | p := absolute 		ifTrue:[ da ] 		ifFalse: [ p + da ].		subPath add: p ].	curves do: [ :c |		key := c first.		args := c second.		key = #absolute ifTrue: [ absolute := true ].		key = #relative ifTrue: [ absolute := false ].		key = #moveTo: ifTrue: [ 			subPath ifNotEmpty: [ separatedPaths add: subPath ]. 			subPath:= OrderedCollection new.			point value: args first ].		key = #curveVia:and:to: ifTrue: [ 			point value: args third ].		key = #curveVia:to: ifTrue: [ 			point value: args second ].		key = #ellipticalArc:xrot:large:sweep:to: ifTrue: [ 			point value: args fifth ].		key = #lineTo: ifTrue: [ 			point value: args first ].		key = #reflectedCurveVia:to: ifTrue: [ 			point value: args second ].		key = #hLineTo: ifTrue: [			p := absolute				ifTrue: [ args first @ p y ]				ifFalse: [ p + (args first @ 0) ].			subPath add: p ].		key = #vLineTo: ifTrue: [ 			p := absolute				ifTrue: [ p x @ args first ]				ifFalse: [ p + (0 @ args first) ].			subPath add: p ].	].	separatedPaths add: subPath.	^ separatedPaths</body></methods><methods><class-id>Roassal2.TRSVGPath</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">borderWidth: width	borderWidth := width.</body><body package="Roassal2-Trachel-Shapes">center	^ self encompassingRectangle center</body><body package="Roassal2-Trachel-Shapes">centeredPath: aPathString	self path: aPathString.	self correctCurvesAndPolygonsToZero.</body><body package="Roassal2-Trachel-Shapes">color	^ fillColor</body><body package="Roassal2-Trachel-Shapes">color: aColor	^ self fillColor: aColor</body><body package="Roassal2-Trachel-Shapes">curves	curves isNil ifFalse: [ ^ curves ].	self computeCurves.	self computePolygons.	^ curves</body><body package="Roassal2-Trachel-Shapes">curves: anArray	curves := anArray.	self computePolygons.</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	^ self transformedEncompassingRectangle</body><body package="Roassal2-Trachel-Shapes">extent	^ rectangle extent.</body><body package="Roassal2-Trachel-Shapes">fillColor: aColor	fillColor := aColor</body><body package="Roassal2-Trachel-Shapes">height	^ self encompassingRectangle height</body><body package="Roassal2-Trachel-Shapes">path: aPathString	pathString := aPathString.	curves := nil.	self curves.	self computeRectangle.</body><body package="Roassal2-Trachel-Shapes">pathString	^ pathString</body><body package="Roassal2-Trachel-Shapes">setExtent: anExtent	rectangle := rectangle topLeft extent: anExtent</body><body package="Roassal2-Trachel-Shapes">strokeWidth	^ borderWidth</body><body package="Roassal2-Trachel-Shapes">width	^ self encompassingRectangle width</body></methods><methods><class-id>Roassal2.TRSVGPath</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitSVGPath: self</body></methods><methods><class-id>Roassal2.TRSVGPath</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint	|apt invertedPoint |	invertedPoint := matrix inverseTransform: aPoint.	apt := TRPlatform current polygonTesterClass new.	^ polygons anySatisfy: [ :eachPolygon | ((apt polygon: eachPolygon) includesPoint: invertedPoint) ]</body></methods><methods><class-id>Roassal2.TRSVGPath</class-id> <category>actions</category><body package="Roassal2-Trachel-Shapes">reset	super resetPath.	curves := nil</body></methods><methods><class-id>Roassal2.TRSVGPath</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: aCanvas	| pt |	pt := aCanvas pathTransform.	pt restoreAfter: [		pt multiplyBy: matrix asFloatTransform.		aCanvas setShape: self path.		fillColor isNotNil ifTrue: [ aCanvas setPaint: fillColor; draw ].		(aCanvas setStrokePaint: strokePaint) width: borderWidth.		aCanvas draw	]</body></methods><methods><class-id>Roassal2.TRSVGPath</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	polygons := #().	borderWidth := 0.	fillColor := Color black.	rectangle := Rectangle origin: 0@0 corner: 0@0.</body></methods><methods><class-id>Roassal2.TRSVGPath</class-id> <category>hooks</category><body package="Roassal2-Trachel-Shapes">computePath	path := TRPlatform current computeSVGPathFor: self.</body></methods><methods><class-id>Roassal2.RTSankeyBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Experimental">computeEdgeValues	elements do: [ :el | | slinks tlinks sum |		slinks := el connectedEdges select: [:ed | ed from = el].		tlinks := el connectedEdges select: [:ed | ed to = el].		sum := [ :arr | arr inject: 0 into: [ :s :each| 			(each attributes at: #value) + s ] ].				el attributes 			at: #sourceLinks put: slinks;			at: #targetLinks put: tlinks;			at: #value put: ((sum value: slinks) max: (sum value: tlinks)).		 ]</body><body package="Roassal2-Experimental">computeElementBreadths	"Iterative assig the breadth (x-position) for each node"	| remainingElements nextElements x kx |	x := 0.	remainingElements := elements.	[remainingElements size isZero not] whileTrue: [ 		nextElements := OrderedCollection new.		remainingElements do: [ :el| 			el attributes at: #x put: x.			(el attributes at: #sourceLinks) do: [:ed |				nextElements add: ed to. ] ].		remainingElements := nextElements.		x := x+1.	 ].	"move sinks right and scale"	kx := extent x/ (x -1).	elements do:[ :el| | temp |		(el attributes at: #sourceLinks) size isZero ifTrue: [ 			el attributes at: #x put: x -1 ].		temp := el attributes at: #x.		el attributes at: #x put: (temp * kx) asFloat.		 ].</body><body package="Roassal2-Experimental">computeElementDepths: edges	| elementsByBreadth ky value alpha |	elementsByBreadth := elements groupedBy: [ :e | e attributes at: #x ].	elementsByBreadth := elementsByBreadth keysSortedSafely 		collect: [:k | elementsByBreadth at: k ].	value := [ :e | e attributes at: #value ].	ky := elementsByBreadth inject: Float fmax into: [ :min :arr|		min min: ((extent y - ((arr size - 1) * nodePadding ))/ 		(arr inject: 0 into: [ :sum :e| (value value: e)+ sum])) ].	elementsByBreadth do: [ :arr| 		arr doWithIndex: [ :e :i| 			e attributes 				at: #y put: i;				at: #dy put: (value value: e)*ky ].		].	edges do: [ :e | e attributes at: #value put: (value value: e)*ky ].	self resolveCollisions: elementsByBreadth.	alpha := 1.	1 to: iterations do: [ :i |		alpha := alpha *0.99. 		self relaxRightToLeft: alpha.		self resolveCollisions: elementsByBreadth.		self relaxLeftToRight: alpha.		self resolveCollisions: elementsByBreadth.].</body><body package="Roassal2-Experimental">computeElements: edges	self computeEdgeValues.	self computeElementBreadths.	self computeElementDepths: edges.	self computeLinkDepths.</body><body package="Roassal2-Experimental">example	"| data sankey nodeAt |data := ZnClient new 	url: 'http://bost.ocks.org/mike/sankey/energy.json';	contentReader: [ :entity | NeoJSONReader fromString: entity contents ];	get.nodeAt := [ :v | (data at: 'nodes') at: v + 1 ].sankey := RTSankeyBuilder new.sankey shape width: 15.sankey extent: 960@500;	nodePadding: 10;	nodes: (data at: 'nodes');	links: (data at: 'links');	linkFrom: [:link | nodeAt value: (link at: 'source') ];	linkTo: [ :link | nodeAt value: (link at: 'target') ];	linkValue: [ :link | link at: 'value' ];	iterations: 32.sankey build.^ sankey view."</body><body package="Roassal2-Experimental">extent: aPoint	extent := aPoint</body><body package="Roassal2-Experimental">initialize	super initialize.	self shape rectangle width: 10.	self extent: 400@300.	self nodePadding: 0.	self linkFrom: #key.	self linkTo: #value.	self linkValue: #yourself.</body><body package="Roassal2-Experimental">iterations: aNumber	iterations := aNumber</body><body package="Roassal2-Experimental">linkFrom: aBlock	linkFrom := aBlock</body><body package="Roassal2-Experimental">linkTo: aBlock	linkTo := aBlock</body><body package="Roassal2-Experimental">linkValue: aBlock	linkValue := aBlock</body><body package="Roassal2-Experimental">links: aCollection	links := aCollection</body><body package="Roassal2-Experimental">nodePadding: aNumber	nodePadding := aNumber</body><body package="Roassal2-Experimental">nodes: aCollection	nodes := aCollection</body><body package="Roassal2-Experimental">renderIn: aView	| edges |	elements := self shape elementsOn: nodes.	self interaction setUpElements: elements.	aView addAll: elements.	edges := RTEdgeBuilder new		view: aView;		elements: elements;		objects: links;		connectFrom: linkFrom to: linkTo.	edges doWithIndex: [:e :i| 		e attributes at: #value put: (linkValue rtValue: (links at:i) ) ].		self computeElements: edges.</body></methods><methods><class-id>Roassal2.RTStretchBehavior</class-id> <category>hooks</category><body package="Roassal2-Core">on: backElement setNested: elements	"It makes a scaling/zooming effect.	If you change backElement's extent, it changes proportionaly extent and position of nested elements. 	So the overall image --- composition of backElement and elements --- does not change. 	It only zoom in/out the overall image."	| callback |	super on: backElement setNested: elements.	callback := TRExtentCallback block: [ :shape :ratio | 		| mainPosition |		mainPosition := backElement position.		elements do: [ :eachElement | 			| eachPosition |			eachPosition := eachElement position.			eachElement 				extent: eachElement extent * ratio;				translateTo: mainPosition + ((eachPosition - mainPosition) * ratio) ] ].	backElement trachelShape addCallback: callback</body></methods><methods><class-id>Roassal2.OrderedDictionary</class-id> <category>adding</category><body package="Roassal2-Pharo">add: anAssociation	| oldSize |	oldSize := dictionary size.	dictionary add: anAssociation.	dictionary size &gt; oldSize		ifTrue: [			orderedKeys size &gt; oldSize				ifFalse: [self growOrderedKeys].			orderedKeys at: oldSize + 1 put: anAssociation key].	^ anAssociation.</body><body package="Roassal2-Pharo">addAll: anAssociationCollection	"Since Collection implements #associationsDo, this method can accept any collection	of associations including Arrays and OrderedCollections and not just Dictionaries"	anAssociationCollection associationsDo: [:each | self add: each].	^ anAssociationCollection.</body></methods><methods><class-id>Roassal2.OrderedDictionary</class-id> <category>enumerating</category><body package="Roassal2-Pharo">associationsDo: aBlock	self keysDo: [:each | aBlock value: (self associationAt: each)]</body><body package="Roassal2-Pharo">associationsSelect: aBlock	^ self species newFrom: (self associations select: aBlock)</body><body package="Roassal2-Pharo">collect: aBlock	^ self species newFrom:		(self associations collect: [:each |			each key -&gt; (aBlock value: each value)])</body><body package="Roassal2-Pharo">do: aBlock	self valuesDo: aBlock</body><body package="Roassal2-Pharo">keysAndValuesDo: aBlock	self keysDo: [:each | aBlock value: each value: (self at: each)]</body><body package="Roassal2-Pharo">keysDo: aBlock	1 to: self size do: [:i | aBlock value: (orderedKeys at: i)]</body><body package="Roassal2-Pharo">select: aBlock	^ self species newFrom:		(self associations select: [:each | aBlock value: each value])</body><body package="Roassal2-Pharo">valuesDo: aBlock	self keysDo: [:each | aBlock value: (self at: each)]</body></methods><methods><class-id>Roassal2.OrderedDictionary</class-id> <category>testing</category><body package="Roassal2-Pharo">includes: anObject	^ dictionary includes: anObject</body><body package="Roassal2-Pharo">includesAssociation: anAssociation	^ dictionary includesAssociation: anAssociation</body><body package="Roassal2-Pharo">includesIdentity: anObject	^ dictionary includesIdentity: anObject</body><body package="Roassal2-Pharo">includesKey: aKey	^ dictionary includesKey: aKey</body><body package="Roassal2-Pharo">isDictionary	^ true</body></methods><methods><class-id>Roassal2.OrderedDictionary</class-id> <category>private</category><body package="Roassal2-Pharo">dictionary	^ dictionary</body><body package="Roassal2-Pharo">errorInvalidIndex: anIndex	"SubscriptOutOfBounds signalFor: anIndex"	self error: 'Invalid Index: ', anIndex asString</body><body package="Roassal2-Pharo">growOrderedKeys	orderedKeys :=		(Array new: ((orderedKeys size * 1.5) asInteger max: 10))			replaceFrom: 1			to: orderedKeys size			with: orderedKeys			startingAt: 1.</body><body package="Roassal2-Pharo">orderedKeys	^ orderedKeys</body><body package="Roassal2-Pharo">orderedKeysIndexOf: aKey	^ orderedKeys indexOf: aKey</body><body package="Roassal2-Pharo">orderedKeysRemove: aRemovedKey	| index |	index := self orderedKeysIndexOf: aRemovedKey.	"shift every remaining key after to the left by one"	orderedKeys		replaceFrom: index		to: self size		with: orderedKeys		startingAt: index + 1.	"one key was removed and the rest shifted, so nil what was the last	key slot before removing and shifting"	orderedKeys		at: self size + 1		put: nil.</body></methods><methods><class-id>Roassal2.OrderedDictionary</class-id> <category>accessing</category><body package="Roassal2-Pharo">associationAt: aKey	^ dictionary associationAt: aKey</body><body package="Roassal2-Pharo">associationAt: aKey ifAbsent: aBlock	^ dictionary associationAt: aKey ifAbsent: aBlock</body><body package="Roassal2-Pharo">associationAt: aKey ifPresent: aBlock	^ dictionary associationAt: aKey ifPresent: aBlock</body><body package="Roassal2-Pharo">associations	| associations i |	associations := Array new: self size.	i := 1.	self associationsDo: [:each |		associations at: i put: each.		i := i + 1].	^ associations.</body><body package="Roassal2-Pharo">at: aKey	^ dictionary at: aKey</body><body package="Roassal2-Pharo">at: aKey ifAbsent: aBlock	^ dictionary at: aKey ifAbsent: aBlock</body><body package="Roassal2-Pharo">at: aKey ifAbsentPut: aBlock	^ self at: aKey ifAbsent: [self at: aKey put: aBlock value]</body><body package="Roassal2-Pharo">at: aKey ifPresent: aBlock	^ dictionary at: aKey ifPresent: aBlock</body><body package="Roassal2-Pharo">at: aKey ifPresent: aPresentBlock ifAbsent: anAbsentBlock	^ dictionary		at: aKey		ifPresent: aPresentBlock		ifAbsent: anAbsentBlock</body><body package="Roassal2-Pharo">at: aKey put: aValue	| oldSize |	oldSize := dictionary size.	dictionary at: aKey put: aValue.	dictionary size &gt; oldSize		ifTrue: [			orderedKeys size &gt; oldSize				ifFalse: [self growOrderedKeys].			orderedKeys at: oldSize + 1 put: aKey].	^ aValue.</body><body package="Roassal2-Pharo">capacity	^ dictionary capacity</body><body package="Roassal2-Pharo">dictionaryClass	^ Dictionary</body><body package="Roassal2-Pharo">identityIndexOfKey: aKey	^ self identityIndexOfKey: aKey ifAbsent: [0]</body><body package="Roassal2-Pharo">identityIndexOfKey: aKey ifAbsent: aBlock	1 to: self size do: [:i |		(orderedKeys at: i) == aKey			ifTrue: [^ i]].	^ aBlock value.</body><body package="Roassal2-Pharo">indexOfKey: aKey	^ self indexOfKey: aKey ifAbsent: [0]</body><body package="Roassal2-Pharo">indexOfKey: aKey ifAbsent: aBlock	1 to: self size do: [:i |		(orderedKeys at: i) = aKey			ifTrue: [^ i]].	^ aBlock value.</body><body package="Roassal2-Pharo">keyAtIdentityValue: aValue	^ dictionary keyAtIdentityValue: aValue</body><body package="Roassal2-Pharo">keyAtIdentityValue: aValue ifAbsent: aBlock	^ dictionary keyAtIdentityValue: aValue ifAbsent: aBlock</body><body package="Roassal2-Pharo">keyAtIndex: anIndex	^ self keyAtIndex: anIndex ifAbsent: [self errorInvalidIndex: anIndex]</body><body package="Roassal2-Pharo">keyAtIndex: anIndex ifAbsent: aBlock	(anIndex &gt; 0 and: [anIndex &lt;= self size])		ifTrue: [^ orderedKeys at: anIndex]		ifFalse: [^ aBlock value]</body><body package="Roassal2-Pharo">keyAtValue: aValue	^ dictionary keyAtValue: aValue</body><body package="Roassal2-Pharo">keyAtValue: aValue ifAbsent: aBlock	^ dictionary keyAtValue: aValue ifAbsent: aBlock</body><body package="Roassal2-Pharo">keyForIdentity: anObject	^ dictionary keyForIdentity: anObject</body><body package="Roassal2-Pharo">keys	^ orderedKeys copyFrom: 1 to: self size</body><body package="Roassal2-Pharo">keysSortedSafely	^ dictionary keysSortedSafely</body><body package="Roassal2-Pharo">size	^ dictionary size</body><body package="Roassal2-Pharo">values	^ self associations collect: [:each | each value]</body></methods><methods><class-id>Roassal2.OrderedDictionary</class-id> <category>removing</category><body package="Roassal2-Pharo">keysAndValuesRemove: aTwoArgumentBlock	| removedAssociations |	removedAssociations := OrderedCollection new.	self associationsDo: [:each |		(aTwoArgumentBlock value: each key value: each value)			ifTrue: [removedAssociations add: each]].	removedAssociations do: [:each | self removeKey: each key].</body><body package="Roassal2-Pharo">remove: anObject ifAbsent: aBlock	self shouldNotImplement</body><body package="Roassal2-Pharo">removeAll	1 to: self size do: [:i | orderedKeys at: i put: nil].	dictionary removeAll.</body><body package="Roassal2-Pharo">removeKey: aKey	| value |	value := dictionary removeKey: aKey.	self orderedKeysRemove: aKey.	^ value.</body><body package="Roassal2-Pharo">removeKey: aKey ifAbsent: aBlock	| oldSize value |	oldSize := dictionary size.	value := dictionary removeKey: aKey ifAbsent: aBlock.	dictionary size &lt; oldSize		ifTrue: [self orderedKeysRemove: aKey].	^ value.</body></methods><methods><class-id>Roassal2.OrderedDictionary</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize: aCapacity	dictionary := self dictionaryClass new: aCapacity.	orderedKeys := Array new: aCapacity.</body></methods><methods><class-id>Roassal2.OrderedDictionary</class-id> <category>comparing</category><body package="Roassal2-Pharo">= anObject	self == anObject		ifTrue: [^ true].	(self species == anObject species		and: [self size = anObject size])		ifFalse: [^ false].	dictionary associationsDo: [:each |		(anObject at: each key ifAbsent: [^ false]) = each value			ifFalse: [^ false]].	^ true.</body><body package="Roassal2-Pharo">hash	^ dictionary hash</body></methods><methods><class-id>Roassal2.OrderedDictionary</class-id> <category>copying</category><body package="Roassal2-Pharo">postCopy	orderedKeys := orderedKeys copy.	dictionary := dictionary copy.</body></methods><methods><class-id>Roassal2.OrderedDictionary</class-id> <category>printing</category><body package="Roassal2-Pharo">printElementsOn: aStream	aStream nextPut: $(.	self size &gt; 100		ifTrue: [			aStream nextPutAll: 'size '.			self size printOn: aStream]		ifFalse: [			self associations doWithIndex: [:association :i |				aStream					print: association key;					nextPutAll: '-&gt;';					print: association value.				(i &lt; self size)					ifTrue: [aStream space]]].	aStream nextPut: $).</body></methods><methods><class-id>Roassal2.OrderedDictionary class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">new	^ self new: 10</body><body package="Roassal2-Pharo">new: aCapacity	^ self basicNew initialize: aCapacity</body><body package="Roassal2-Pharo">newFrom: anAssociationCollection	| newDictionary |	newDictionary := self new: anAssociationCollection size.	anAssociationCollection associationsDo: [:each |		newDictionary			at: each key			put: each value].	^ newDictionary.</body><body package="Roassal2-Pharo">newFromPairs: aSequenceableCollection	| newDictionary |	newDictionary := self new: (aSequenceableCollection size / 2) floor.	1 to: aSequenceableCollection size - 1 by: 2 do: [:i |		newDictionary			at: (aSequenceableCollection at: i)			put: (aSequenceableCollection at: i + 1)].	^ newDictionary.</body></methods><methods><class-id>Roassal2.RTNumberLinearNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizerOBSOLETE">rtValue: anEntity	"Normalize value based on maximum value."		| value |	value := self command rtValue: anEntity.	^ ((value abs / (self maximumValue: anEntity)) asFloat * self scale) asInteger</body><body package="Roassal2-ColorNormalizerOBSOLETE">scale	^ scale</body><body package="Roassal2-ColorNormalizerOBSOLETE">scale: anObject	scale := anObject</body></methods><methods><class-id>Roassal2.RTNumberLinearNormalizer</class-id> <category>initialization</category><body package="Roassal2-ColorNormalizerOBSOLETE">initialize	super initialize.	scale := 1</body></methods><methods><class-id>Roassal2.RTMapLocationBuilder</class-id> <category>examples</category><body package="Roassal2-Builder-Map">example01	"	self new example01	"	| paris london santiago b |	paris := 48.8567 @ 2.3508.	london := 51.507222 @ -0.1275.	santiago := -33.45 @ -70.666667.		b := RTMapLocationBuilder new.	b shape circle 		size: #yourself;		color: (Color red alpha: 0.4).	b addPoint: paris value: 10. 	b addPoint: london value: 15.	b addPoint: santiago value: 20.	^ b</body><body package="Roassal2-Builder-Map">example02	"	self new example02	"	| b tab |	tab := RTTabTable new input: self seismData usingDelimiter: $,.	tab removeFirstRow.	tab convertColumnsAsFloat: #(2 3 4 5).	b := RTMapLocationBuilder new.	b shape circle		size: [ :v | (2 raisedTo: v) / 2 ];		color: (Color red alpha: 0.3).	tab values do: [ :row | b addPoint: row second @ row third value: row fifth ].	^ b</body><body package="Roassal2-Builder-Map">example03Normalizer	"	self new example03Normalizer	"	| paris london santiago b newYork |	paris := 48.8567 @ 2.3508.	london := 51.507222 @ -0.1275.	santiago := -33.45 @ -70.666667.	newYork := 40.7127 @ -74.0059.	b := RTMapLocationBuilder new.	b shape circle.	b addPoint: paris value: 10. 	b addPoint: london value: 15.	b addPoint: santiago value: 20.	b addPoint: newYork value: 30.	b normalizer normalizeSize: #yourself max: 50; normalizeColor: #yourself; alphaColor: 0.3.	^ b</body><body package="Roassal2-Builder-Map">seismData	^ 'time,latitude,longitude,depth,mag,magType,nst,gap,dmin,rms,net,id,updated,place,type2014-05-25T01:39:20.040Z,-0.7851,-14.2823,10,4.5,mb,,197,7.1,0.59,us,usb000r36t,2014-05-25T02:09:12.227Z,"North of Ascension Island",earthquake2014-05-25T01:33:15.400Z,40.3885002,-124.987999,1.11,3.52,ml,65,253,0.5418,0.17,nc,nc72226741,2014-05-25T02:34:10.843Z,"64km WSW of Ferndale, California",earthquake2014-05-25T01:29:34.680Z,32.5268,141.5741,41.83,4.5,mb,,137,1.594,0.64,us,usb000r36i,2014-05-25T01:58:00.878Z,"177km ESE of Hachijo-jima, Japan",earthquake2014-05-25T00:08:01.860Z,40.0084,24.2593,10,4.5,mb,,40,1.361,1.44,us,usb000r34s,2014-05-25T00:46:22.709Z,"25km ESE of Sarti, Greece",earthquake2014-05-24T22:02:19.000Z,67.6931,-162.4102,7.2,3.1,ml,,,,0.77,ak,ak11272548,2014-05-25T01:04:55.000Z,"27km ENE of Noatak, Alaska",earthquake2014-05-24T20:58:07.070Z,-6.2569,104.1452,60.97,5.2,mb,,60,2.225,0.91,us,usb000r2z6,2014-05-25T01:02:08.954Z,"99km SSW of Kotaagung, Indonesia",earthquake2014-05-24T20:41:18.800Z,38.8083,-122.7987,3.6,2.5,Md,54,21.6,0,0.04,nc,nc72226676,2014-05-25T00:29:21.707Z,"5km NW of The Geysers, California",earthquake2014-05-24T20:10:04.000Z,63.1515,-150.4677,100,2.7,ml,,,,0.85,ak,ak11272450,2014-05-24T20:33:00.118Z,"80km WSW of Cantwell, Alaska",earthquake2014-05-24T19:06:29.000Z,59.3773,-155.7452,100,2.7,ml,,,,3.52,ak,ak11272262,2014-05-24T19:29:44.199Z,"62km SW of Old Iliamna, Alaska",earthquake2014-05-24T18:40:48.700Z,18.516,-64.8404,20,3,Md,7,316.8,0.19493442,0.25,pr,pr14144010,2014-05-24T19:08:10.866Z,"21km NNE of Charlotte Amalie, U.S. Virgin Islands",earthquake2014-05-24T16:50:02.480Z,40.0003,24.3356,10,4.5,mb,,40,1.42,0.86,us,usb000r2sa,2014-05-24T22:02:25.397Z,"29km SSE of Karyes, Greece",earthquake2014-05-24T16:26:20.000Z,19.1648,-64.612,24,3,Md,8,295.2,0.87136583,0.1,pr,pr14144009,2014-05-25T00:30:43.182Z,"82km N of Road Town, British Virgin Islands",earthquake2014-05-24T15:08:44.100Z,18.8752,-67.3619,10,2.7,Md,7,280.8,0.46892058,0.23,pr,pr14144007,2014-05-24T23:11:10.272Z,"50km NNW of San Antonio, Puerto Rico",earthquake2014-05-24T14:49:16.100Z,40.4133,25.9081,10,4.8,mb,,38,2.635,1.01,us,usb000r2nx,2014-05-24T19:52:52.473Z,"23km N of Gokceada, Turkey",earthquake2014-05-24T13:46:52.300Z,18.1404,-67.287,21,2.6,Md,11,194.4,0.1940361,0.1,pr,pr14144006,2014-05-24T21:49:26.175Z,"12km NW of Puerto Real, Puerto Rico",earthquake2014-05-24T12:37:26.000Z,18.805,-68.1386,68,3.3,Md,11,241.2,0.3701059,0.25,pr,pr14144004,2014-05-24T20:39:54.439Z,"37km NE of Punta Cana, Dominican Republic",earthquake2014-05-24T11:49:26.320Z,0.7273,-26.3481,10,5.2,mb,,48,11.55,0.57,us,usb000r2j9,2014-05-24T21:56:34.000Z,"Central Mid-Atlantic Ridge",earthquake2014-05-24T11:33:08.650Z,40.3041,25.6303,10,4.5,mb,,37,0.671,0.78,us,usb000r2iq,2014-05-24T18:41:22.739Z,"24km SE of Kamariotissa, Greece",earthquake2014-05-24T11:09:29.610Z,53.6116,-164.9217,26.87,4.2,mb,,158,0.727,1.16,us,usb000r2ih,2014-05-24T19:12:10.715Z,"80km SE of Akutan, Alaska",earthquake2014-05-24T09:25:03.410Z,40.3046,25.4532,10,6.9,mwc,,25,0.745,0.74,us,usb000r2hc,2014-05-25T01:53:19.385Z,"19km S of Kamariotissa, Greece",earthquake2014-05-24T08:24:47.560Z,16.5405,-98.1544,12,5.6,mwb,,99,2.94,1.25,us,usb000r2gj,2014-05-24T19:32:07.996Z,"8km S of San Juan Cacahuatepec, Mexico",earthquake2014-05-24T07:50:15.790Z,-15.2933,-71.9734,115.26,4.1,mb,,114,3.435,1.44,us,usb000r2fk,2014-05-24T15:52:57.600Z,"39km E of Orcopampa, Peru",earthquake2014-05-24T07:27:29.910Z,30.5448,35.1641,10,4.1,mb,,186,4.666,1.11,us,usb000r2f5,2014-05-24T20:36:28.015Z,"35km ESE of Mizpe Ramon, Israel",earthquake2014-05-24T07:01:29.000Z,67.707,-162.4206,4.3,2.8,ml,,,,0.67,ak,ak11271031,2014-05-24T15:04:39.337Z,"27km ENE of Noatak, Alaska",earthquake2014-05-24T06:58:48.200Z,19.1189,-64.817,45,3,Md,6,291.6,0.7231438,0.18,pr,pr14144002,2014-05-24T15:01:14.731Z,"80km NNW of Road Town, British Virgin Islands",earthquake2014-05-24T06:56:56.800Z,18.5505,-64.8421,9,2.7,Md,7,223.2,0.22457882,0.25,pr,pr14144001,2014-05-24T14:59:37.684Z,"24km NNE of Charlotte Amalie, U.S. Virgin Islands",earthquake2014-05-24T06:47:31.450Z,-15.2899,-73.8308,70.18,5.1,mb,,127,4.398,1.02,us,usb000r2eb,2014-05-24T14:50:04.601Z,"28km S of Coracora, Peru",earthquake2014-05-24T06:33:42.600Z,36.8057,-121.5345,6.8,2.5,Md,56,39.6,0.04491576,0.07,nc,nc72226416,2014-05-24T17:12:56.370Z,"4km S of San Juan Bautista, California",earthquake2014-05-24T06:13:44.830Z,-33.48,179.2782,262.14,4.3,mb,,104,4.149,1.12,us,usb000r2ds,2014-05-24T14:16:24.740Z,"284km SW of LEsperance Rock, New Zealand",earthquake2014-05-24T06:09:48.000Z,52.296,-178.95,62.1,2.8,ml,,,,0.62,ak,ak11271011,2014-05-25T00:48:43.005Z,"71km NW of Tanaga Volcano, Alaska",earthquake2014-05-24T06:04:10.000Z,63.1787,-150.3954,100,2.7,ml,,,,0.79,ak,ak11270988,2014-05-24T14:08:32.593Z,"76km WSW of Cantwell, Alaska",earthquake2014-05-24T06:02:23.100Z,25.9181,125.748,41.8,4.7,mb,,101,2.442,0.84,us,usb000r2di,2014-05-24T14:04:56.416Z,"132km NNE of Hirara, Japan",earthquake2014-05-24T06:02:15.000Z,51.1827,179.4489,62.8,2.9,ml,,,,0.56,ak,ak11270986,2014-05-25T00:48:46.153Z,"86km S of Semisopochnoi Island, Alaska",earthquake2014-05-24T05:33:14.610Z,35.1357,-97.8269,4.87,2.8,mb_lg,,61,0.369,0.63,us,usa000qd4i,2014-05-24T22:51:57.129Z,"13km NE of Chickasha, Oklahoma",earthquake2014-05-24T04:12:22.000Z,62.1386,-148.0244,17.2,2.9,ml,,,,0.6,ak,ak11270936,2014-05-24T12:15:44.795Z,"57km NE of Sutton-Alpine, Alaska",earthquake2014-05-24T03:44:47.700Z,36.809,-121.5383,6.9,3,Ml,66,39.6,0.02694946,0.08,nc,nc72226246,2014-05-24T21:41:30.556Z,"4km S of San Juan Bautista, California",earthquake2014-05-24T02:39:18.500Z,19.6637,-65.9586,84,3.3,Md,3,349.2,1.38789711,0,pr,pr14144000,2014-05-24T10:42:21.090Z,"133km N of San Juan, Puerto Rico",earthquake2014-05-23T23:41:49.670Z,45.0087,-27.8674,10,5.2,mb,,28,6.289,0.8,us,usb000r26g,2014-05-24T15:56:37.000Z,"Northern Mid-Atlantic Ridge",earthquake2014-05-23T23:36:12.230Z,45.0429,-28.0061,10,4.6,mb,,56,6.319,1.21,us,usb000r26c,2014-05-24T07:38:53.605Z,"northern Mid-Atlantic Ridge",earthquake2014-05-23T23:12:43.250Z,50.0625,-178.6596,31.65,4.3,mb,,206,2.029,0.93,us,usb000r254,2014-05-24T07:15:21.632Z,"137km SSE of Amatignak Island, Alaska",earthquake2014-05-23T21:55:26.920Z,25.9394,97.6454,43.52,4.2,mb,,97,4.673,0.81,us,usb000r23p,2014-05-24T06:00:52.554Z,"66km NNE of Myitkyina, Burma",earthquake2014-05-23T21:40:40.020Z,18.9556,145.0559,551.3,4.4,mb,,34,5.338,0.67,us,usb000r226,2014-05-24T05:43:20.921Z,"67km WNW of Agrihan, Northern Mariana Islands",earthquake2014-05-23T21:33:04.210Z,52.3992,-178.4241,87.2,4.2,mb,,161,1.19,1.34,us,usb000r21e,2014-05-24T05:35:59.159Z,"Andreanof Islands, Aleutian Islands, Alaska",earthquake2014-05-23T21:20:06.900Z,18.9815,145.0416,557.77,5.5,mb,,23,5.364,0.8,us,usb000r209,2014-05-24T15:56:35.000Z,"Pagan region, Northern Mariana Islands",earthquake2014-05-23T20:51:46.000Z,59.0724,-154.5241,100,2.6,ml,,,,1.28,ak,ak11270656,2014-05-24T17:12:26.000Z,"88km SSE of Old Iliamna, Alaska",earthquake2014-05-23T20:49:22.090Z,24.926,97.809,10,5.8,mww,,32,4.477,0.93,us,usb000r1y6,2014-05-24T17:01:05.878Z,"23km NNW of Pingyuan, China",earthquake2014-05-23T20:25:57.060Z,-16.3105,-174.6314,219.8,4.6,mb,,55,3.646,0.91,us,usb000r1wm,2014-05-24T16:09:38.265Z,"102km WSW of Hihifo, Tonga",earthquake2014-05-23T19:57:58.510Z,-35.7717,-73.7328,11.32,4.1,mwr,,204,1.212,1.69,us,usb000r24u,2014-05-24T15:58:42.269Z,"117km NW of Tome, Chile",earthquake2014-05-23T19:49:54.000Z,61.6525,-149.8939,25.5,2.6,ml,,,,0.66,ak,ak11270625,2014-05-24T15:10:44.000Z,"8km WNW of Houston, Alaska",earthquake2014-05-23T19:42:28.130Z,56.0764,113.9536,10.79,5.4,mww,,27,7.515,0.69,us,usb000r1sc,2014-05-24T15:04:30.820Z,"33km ESE of Severomuysk, Russia",earthquake2014-05-23T18:00:54.870Z,51.4002,179.2846,73.45,4.2,mb,,204,2.557,0.97,us,usb000r1jx,2014-05-24T13:49:40.812Z,"65km SSW of Semisopochnoi Island, Alaska",earthquake2014-05-23T15:57:13.900Z,-31.334,-69.2079,204.53,4.3,mb,,172,1.363,0.95,us,usb000r1c0,2014-05-24T00:00:37.378Z,"19km E of Calingasta, Argentina",earthquake2014-05-23T14:14:57.580Z,32.3316667,-115.1843333,10.99,3.22,ml,9,273,0.1345,0.26,ci,ci15504753,2014-05-23T15:00:43.475Z,"2km SSE of Delta, Mexico",earthquake2014-05-23T13:20:35.250Z,12.3077,-87.3531,73.54,4.5,mb,,155,0.497,0.79,us,usb000r13u,2014-05-23T21:24:13.415Z,"27km SW of Corinto, Nicaragua",earthquake2014-05-23T11:55:17.820Z,-7.1962,155.091,10,4.9,mb,,45,4.17,0.59,us,usb000r12e,2014-05-24T10:21:07.760Z,"106km SSW of Panguna, Papua New Guinea",earthquake2014-05-23T11:46:42.670Z,1.5862,121.5791,48.36,4.3,mb,,112,2.869,1.27,us,usb000r12a,2014-05-24T07:32:10.129Z,"49km NNE of Kali, Indonesia",earthquake2014-05-23T10:01:24.500Z,18.7231,-64.3312,62,2.7,Md,3,352.8,0.69619435,0.2,pr,pr14143003,2014-05-23T18:03:57.932Z,"45km NE of Road Town, British Virgin Islands",earthquake2014-05-23T09:54:27.800Z,38.7005,-111.7483,9.5,2.8,Ml,,61.2,0.26949459,0.25,uu,uu60069702,2014-05-23T18:00:00.139Z,"29km SSE of Aurora, Utah",earthquake2014-05-23T09:34:00.350Z,-11.5002,161.9882,18.14,5.1,mb,,45,2.867,1.06,us,usb000r0zy,2014-05-23T17:36:33.842Z,"115km S of Kirakira, Solomon Islands",earthquake2014-05-23T09:13:34.400Z,-11.0385,161.5021,37.43,5.3,mb,,59,2.206,1.04,us,usb000r0zd,2014-05-23T17:16:08.633Z,"79km SW of Kirakira, Solomon Islands",earthquake2014-05-23T09:06:57.500Z,-6.9444,102.5705,29.71,5.2,mb,,82,2.595,1.08,us,usb000r0z7,2014-05-23T17:09:37.754Z,"240km SW of Biha, Indonesia",earthquake2014-05-23T08:22:25.660Z,-7.0472,102.5498,32.55,4.8,mb,,82,2.699,0.78,us,usb000r0y9,2014-05-23T16:25:01.827Z,"250km SW of Biha, Indonesia",earthquake2014-05-23T08:22:19.490Z,35.5245,-97.2159,7.03,2.9,mb_lg,,29,0.114,0.66,us,usb000r0y7,2014-05-24T02:58:36.381Z,"5km ENE of Choctaw, Oklahoma",earthquake2014-05-23T07:50:21.520Z,39.5397,143.6015,35,4.5,mb,,124,2.495,1.13,us,usb000r0xs,2014-05-23T15:52:56.489Z,"142km E of Miyako, Japan",earthquake2014-05-23T07:28:33.580Z,-6.9608,102.637,29.97,4.6,mb,,106,2.602,0.84,us,usb000r0xa,2014-05-23T15:32:04.216Z,"237km SW of Biha, Indonesia",earthquake2014-05-23T07:17:40.200Z,19.6439,-65.2289,9,3.3,Md,14,262.8,1.31154031,0.28,pr,pr14143000,2014-05-23T15:20:22.045Z,"147km NNW of Charlotte Amalie, U.S. Virgin Islands",earthquake2014-05-23T07:05:18.000Z,62.3372,-149.0521,8.2,3.5,ml,,,,1.02,ak,ak11270189,2014-05-23T15:07:52.947Z,"45km ENE of Y, Alaska",earthquake2014-05-23T07:00:34.940Z,-45.561,167.3252,80.68,4.3,mb,,57,0.547,1.39,us,usb000r0wn,2014-05-23T15:03:06.044Z,"34km WSW of Te Anau, New Zealand",earthquake2014-05-23T05:58:19.110Z,-4.5434,141.6635,67.39,4.5,mb,,166,7.285,0.92,us,usb000r0u8,2014-05-23T14:00:47.070Z,"135km WSW of Ambunti, Papua New Guinea",earthquake2014-05-23T05:02:44.800Z,4.2808,125.5354,48.61,4.5,mb,,101,3.936,0.88,us,usb000r0sy,2014-05-23T13:05:12.870Z,"124km S of Sarangani, Philippines",earthquake2014-05-23T04:44:15.710Z,-7.8461,123.0925,276.45,4.1,mb,,152,1.153,0.6,us,usb000r0sp,2014-05-23T12:47:15.558Z,"80km NNE of Palue, Indonesia",earthquake2014-05-23T03:21:09.610Z,-17.6555,-178.7237,562.77,4.5,mb,,79,3.074,0.73,us,usb000r0rr,2014-05-23T11:23:50.751Z,"243km SE of Lambasa, Fiji",earthquake2014-05-23T03:20:36.400Z,18.2031,-66.8531,26,2.5,Md,17,72,0.13564561,0.12,pr,pr14143002,2014-05-23T11:23:12.513Z,"7km NW of Adjuntas, Puerto Rico",earthquake2014-05-23T03:01:48.660Z,-17.475,-178.6977,546.47,4.5,mb,,55,3.11,0.59,us,usb000r0ri,2014-05-23T11:04:28.818Z,"235km ESE of Lambasa, Fiji",earthquake2014-05-23T01:35:37.900Z,40.725,-124.2628,24,2.8,Md,17,198,0.3233935,0.06,nc,nc72225856,2014-05-23T09:38:09.776Z,"6km W of Humboldt Hill, California",earthquake2014-05-22T23:41:43.000Z,67.7074,-162.5553,22,3.7,ml,,,,1.14,ak,ak11270060,2014-05-23T07:44:28.103Z,"23km NE of Noatak, Alaska",earthquake2014-05-22T20:47:47.000Z,18.648,-67.3984,84,2.9,Md,12,198,0.27218953,0.07,pr,pr14142008,2014-05-23T04:50:18.664Z,"35km NW of Aguadilla, Puerto Rico",earthquake2014-05-22T20:17:26.940Z,9.193,122.242,42.9,4.7,mb,,122,6.743,0.73,us,usb000r05u,2014-05-23T03:31:25.629Z,"46km SW of Colipapa, Philippines",earthquake2014-05-22T20:00:01.570Z,2.1686,96.5833,61.13,4.8,mb,,128,1.312,1,us,usb000r03k,2014-05-23T04:03:26.578Z,"41km SSE of Sinabang, Indonesia",earthquake2014-05-22T18:45:57.130Z,-4.5927,133.6254,30.6,4.5,mb,,134,2.156,0.62,us,usb000qzyc,2014-05-23T02:49:56.498Z,"145km NNW of Dobo, Indonesia",earthquake2014-05-22T18:01:21.600Z,36.761,-98.362,5,2.5,ml,,,,0.65,us,usb000qzx5,2014-05-22T19:01:15.946Z,"0km NNW of Cherokee, Oklahoma",earthquake2014-05-22T17:57:11.800Z,19.176,-64.222,24,2.9,Md,3,338.4,1.07348676,0.1,pr,pr14142006,2014-05-23T01:59:41.134Z,"93km NNE of Road Town, British Virgin Islands",earthquake2014-05-22T16:22:13.710Z,-11.4625,161.5948,33.02,4.9,mb,,44,2.582,0.51,us,usb000qzny,2014-05-23T20:45:15.138Z,"117km SSW of Kirakira, Solomon Islands",earthquake2014-05-22T13:34:28.000Z,67.7042,-162.3999,5.3,2.7,ml,,,,0.59,ak,ak11269668,2014-05-22T21:37:05.376Z,"28km ENE of Noatak, Alaska",earthquake2014-05-22T11:24:00.060Z,-16.2299,-172.656,13.57,4.8,mb,,64,3.844,1.36,us,usb000qzfb,2014-05-22T19:26:41.501Z,"121km ESE of Hihifo, Tonga",earthquake2014-05-22T10:21:36.900Z,19.4456,-67.0309,79,2.8,Md,3,306,1.43281288,0.25,pr,pr14142005,2014-05-22T18:24:04.862Z,"104km N of Isabela, Puerto Rico",earthquake2014-05-22T08:50:29.180Z,19.0258,121.5326,34.3,4.6,mb,,124,1.787,1.14,us,usb000qzbp,2014-05-22T16:57:28.254Z,"60km NE of Namuac, Philippines",earthquake2014-05-22T08:38:01.060Z,-55.3955,-28.3273,35,5.5,mb,,55,4.847,0.62,us,usb000qzb9,2014-05-22T16:43:51.693Z,"161km NNW of Visokoi Island, ",earthquake2014-05-22T08:31:11.460Z,32.203,-115.2391667,10.54,2.58,ml,9,231,0.223,0.13,ci,ci15504337,2014-05-23T15:01:52.855Z,"7km WSW of Alberto Oviedo Mota, Mexico",earthquake2014-05-22T06:33:42.800Z,35.5797,-120.8742,4.2,2.9,Md,88,43.2,0.05389892,0.07,nc,nc72225491,2014-05-22T22:38:29.592Z,"15km WNW of Templeton, California",earthquake2014-05-22T06:30:19.040Z,37.0807,-97.8918,7.91,2.5,mb_lg,,67,0.031,0.29,us,usb000qz8a,2014-05-22T09:20:13.152Z,"14km ESE of Anthony, Kansas",earthquake2014-05-22T05:31:59.000Z,67.6712,-162.2512,5.5,3,ml,,,,0.65,ak,ak11269452,2014-05-22T13:34:32.564Z,"32km ENE of Noatak, Alaska",earthquake2014-05-22T05:22:54.450Z,-11.1601,161.402,28.86,5.1,mb,,61,2.23,0.67,us,usb000qz7b,2014-05-22T14:56:33.000Z,"96km SW of Kirakira, Solomon Islands",earthquake2014-05-22T05:22:03.660Z,35.7918,0.247,9.98,4.9,mb,,50,2.053,0.91,us,usb000qz78,2014-05-22T06:27:51.801Z,"21km SE of Mostaganem, Algeria",earthquake2014-05-22T05:15:40.500Z,18.916,-68.088,50,2.9,Md,7,255.6,0.48688688,0.31,pr,pr14142004,2014-05-22T13:18:18.380Z,"49km NE of Punta Cana, Dominican Republic",earthquake2014-05-22T04:17:37.900Z,18.2315,-67.97,81,3,Md,8,198,0.48059868,0.18,pr,pr14142003,2014-05-22T12:20:10.763Z,"60km SE of Punta Cana, Dominican Republic",earthquake2014-05-22T04:01:38.800Z,19.0911,-66.7957,11,2.9,Md,9,284.4,0.66026173,0.25,pr,pr14142002,2014-05-22T12:04:08.059Z,"67km N of Hatillo, Puerto Rico",earthquake2014-05-22T03:46:58.800Z,19.059,-66.8135,40,3,Md,10,270,0.63780385,0.28,pr,pr14142001,2014-05-22T11:49:37.402Z,"63km N of Hatillo, Puerto Rico",earthquake2014-05-22T03:04:13.800Z,19.3343,-155.1227,7,2.6,Ml,,140.4,0.03593261,0.1,hv,hv60698741,2014-05-22T18:47:30.102Z,"16km SE of Volcano, Hawaii",earthquake2014-05-22T02:46:10.350Z,35.7869,-97.4833,10.93,3.6,mb_lg,,70,0.025,0.28,us,usb000qz4x,2014-05-24T17:15:50.535Z,"11km SSW of Guthrie, Oklahoma",earthquake2014-05-22T02:25:10.330Z,36.6235,-97.7089,4.92,2.7,mb_lg,,71,0.25,0.37,us,usb000qz4l,2014-05-22T10:29:48.792Z,"20km S of Medford, Oklahoma",earthquake2014-05-22T02:06:46.900Z,45.1526,-113.6125,12.2,2.7,mc,36,100.799991936001,0.6306173,0.28,mb,mb14319042,2014-05-22T23:16:19.389Z,"22km E of Salmon, Idaho",earthquake2014-05-22T01:47:16.000Z,37.5298,-78.0702,9.9,3.2,mblg,14,75.5999939520005,0.08084838,0.31,se,se052214a,2014-05-24T12:57:51.633Z,"12km WSW of Powhatan, Virginia",earthquake2014-05-21T23:37:38.800Z,19.6567,-66.6453,35,3.1,Md,15,273.6,1.17769134,0.15,pr,pr14141009,2014-05-22T07:40:17.925Z,"130km N of Hatillo, Puerto Rico",earthquake2014-05-21T22:29:59.650Z,-8.9032,-74.47,127.7,4.7,mb,,103,3.851,1.01,us,usa000qcbm,2014-05-22T00:08:03.394Z,"58km S of Pucallpa, Peru",earthquake2014-05-21T21:42:26.500Z,18.7994,-64.4229,89,2.7,Md,3,338.4,0.67193983,0.12,pr,pr14141008,2014-05-22T05:45:04.272Z,"47km NNE of Road Town, British Virgin Islands",earthquake2014-05-21T20:17:16.850Z,18.7082,-68.601,98.65,3.2,md,,327,0.287,0.79,us,usb000qyvb,2014-05-22T04:19:56.935Z,"9km NE of Otra Banda, Dominican Republic",earthquake2014-05-21T18:55:46.100Z,36.0493,-120.6083,9.3,2.5,Md,102,39.6,0.01796631,0.07,nc,nc72225176,2014-05-22T04:28:08.343Z,"24km WSW of Coalinga, California",earthquake2014-05-21T18:14:29.070Z,-2.8837,128.0056,33.55,5.3,mb,,25,3.686,0.97,us,usb000qyej,2014-05-22T02:17:00.071Z,"29km NW of Piru, Indonesia",earthquake2014-05-21T17:58:43.760Z,37.1279,-97.6415,8.53,2.7,mb_lg,,39,0.097,0.67,us,usb000qyd1,2014-05-22T02:01:10.722Z,"11km NNW of Caldwell, Kansas",earthquake2014-05-21T17:30:06.600Z,18.8885,-64.5375,9,2.7,Md,5,316.8,0.47520879,0.07,pr,pr14141006,2014-05-22T01:32:34.776Z,"52km N of Road Town, British Virgin Islands",earthquake2014-05-21T16:25:11.500Z,20.1438,-155.8133,25.3,2.5,Ml,,136.8,0.03593261,0.14,hv,hv60698126,2014-05-21T20:55:01.000Z,"10km S of Kapaau, Hawaii",earthquake2014-05-21T16:21:54.050Z,18.2013,88.0192,44.3,5.9,mww,,38,7.948,0.62,us,usb000qy82,2014-05-23T13:40:03.989Z,"274km SE of Konarka, India",earthquake2014-05-21T15:09:06.540Z,13.9307,-92.1238,50.35,4.8,mb,,156,0.719,1.03,us,usb000qy4p,2014-05-21T23:11:45.925Z,"46km SSW of Champerico, Guatemala",earthquake2014-05-21T14:55:30.130Z,40.3008333,-124.5136667,20.62,2.94,md,30,232,0.1767,0.12,nc,nc72225101,2014-05-22T07:59:07.101Z,"37km SW of Ferndale, California",earthquake2014-05-21T14:47:57.880Z,36.674,70.7588,67.59,4.6,mb,,69,0.473,0.67,us,usb000qy3c,2014-05-21T22:50:30.504Z,"22km SSW of Jarm, Afghanistan",earthquake2014-05-21T14:03:17.700Z,18.9377,-64.364,43.47,2.9,md,,330,0.577,0.32,us,usb000qymz,2014-05-21T22:06:39.130Z,"63km NNE of Road Town, British Virgin Islands",earthquake2014-05-21T13:32:32.800Z,-15.4035,-173.7676,62.49,4.7,mb,,79,2.432,0.34,us,usb000qy1b,2014-05-21T21:35:00.184Z,"60km N of Hihifo, Tonga",earthquake2014-05-21T13:25:20.480Z,29.5364,50.8372,10,4.4,mb,,71,6.612,0.38,us,usb000qy04,2014-05-21T21:27:49.597Z,"31km E of Bandar-e Ganaveh, Iran",earthquake2014-05-21T12:49:54.500Z,35.5941,-97.3831,5.832,2.5,ml,,51,,0.43,us,usb000qy1t,2014-05-22T12:16:32.961Z,"7km N of Spencer, Oklahoma",earthquake2014-05-21T10:51:27.870Z,29.6719,50.8345,10,5,mb,,61,6.705,0.8,us,usb000qxxr,2014-05-21T11:34:22.948Z,"32km ENE of Bandar-e Ganaveh, Iran",earthquake2014-05-21T10:29:47.900Z,29.4599,50.8924,10,4.5,mb,,60,6.525,0.71,us,usb000qxxc,2014-05-21T18:32:36.869Z,"38km NW of Borazjan, Iran",earthquake2014-05-21T10:06:14.990Z,17.1865,-94.9135,127.51,5.6,mwp,,79,2.808,1.16,us,usb000qxx2,2014-05-24T19:53:56.366Z,"16km ENE of Palomares, Mexico",earthquake2014-05-21T09:46:28.140Z,29.5,50.8799,10,5.2,mb,,42,6.56,0.81,us,usb000qxww,2014-05-21T12:48:19.000Z,"36km ESE of Bandar-e Ganaveh, Iran",earthquake2014-05-21T09:00:55.130Z,-30.4516,-71.3157,49.83,5.3,mb,,129,0.526,0.85,us,usb000qxwk,2014-05-21T17:38:14.000Z,"19km NW of Ovalle, Chile",earthquake2014-05-21T08:21:56.890Z,-8.8151,125.235,28.06,4.8,mb,,45,1.336,1.22,us,usb000qxw1,2014-05-21T11:11:41.178Z,"35km WNW of Ainaro, East Timor",earthquake2014-05-21T07:38:14.000Z,19.0967,-64.8271,10,2.8,Md,7,273.6,0.7051775,0.11,pr,pr14141002,2014-05-21T15:40:42.035Z,"78km NNW of Road Town, British Virgin Islands",earthquake2014-05-21T05:00:47.500Z,19.6075,-67.6873,36,3.1,Md,8,316.8,1.2576414,0.23,pr,pr14141001,2014-05-21T13:03:21.007Z,"136km NNE of Punta Cana, Dominican Republic",earthquake2014-05-21T04:57:47.700Z,19.3933,-155.2728,2.3,2.5,Ml,,39.6,0,0.26,hv,hv60697896,2014-05-21T13:00:29.756Z,"5km SW of Volcano, Hawaii",earthquake2014-05-21T04:01:17.400Z,19.1493,-156.1947,22.5,2.6,Ml,,270,0.3233935,0.06,hv,hv60697866,2014-05-21T17:47:22.996Z,"46km WNW of Hawaiian Ocean View, Hawaii",earthquake2014-05-21T03:54:46.390Z,40.3536667,-125.2483333,3.45,2.75,md,23,300,0.706,0.3,nc,nc72224881,2014-05-22T09:10:09.946Z,"87km WSW of Ferndale, California",earthquake2014-05-21T01:58:48.130Z,19.4705,-70.6703,26.7,3.3,ml,,112,0.069,1.32,us,usb000qxv9,2014-05-21T06:42:37.264Z,"3km NE of Santiago de los Caballeros, Dominican Republic",earthquake2014-05-21T01:48:46.000Z,58.0839,-152.8139,66.4,3.4,ml,,,,0.56,ak,ak11267570,2014-05-21T09:51:19.349Z,"37km NNW of Kodiak Station, Alaska",earthquake2014-05-21T01:28:25.620Z,-57.8441,-25.9645,105.36,5.1,mb,,48,6.886,0.77,us,usb000qxqm,2014-05-21T09:30:52.695Z,"136km NNE of Bristol Island, South Sandwich Islands",earthquake2014-05-21T00:40:26.220Z,-7.7614,104.6756,51.4,4.5,mb,,113,3.118,0.59,us,usb000qxp9,2014-05-21T08:42:56.403Z,"148km SW of Tugu Hilir, Indonesia",earthquake2014-05-21T00:21:13.290Z,23.7323,121.471,11.69,5.6,mb,,22,0.374,1.26,us,usb000qxnd,2014-05-22T08:22:19.943Z,"30km SSW of Hualian, Taiwan",earthquake2014-05-21T00:09:22.700Z,18.8878,-64.4449,39,3.3,Md,8,302.4,0.49587004,0.31,pr,pr14141000,2014-05-21T01:43:34.371Z,"55km NNE of Road Town, British Virgin Islands",earthquake2014-05-20T23:59:58.700Z,18.9584,-64.5391,38,2.7,Md,5,331.2,0.71955054,0.05,pr,pr14140010,2014-05-21T08:02:28.050Z,"60km N of Road Town, British Virgin Islands",earthquake2014-05-20T23:30:46.550Z,39.5224,24.1875,17.18,4.4,mb,,46,1.429,0.97,us,usb000qxle,2014-05-21T04:45:19.604Z,"49km NNE of Patitirion, Greece",earthquake2014-05-20T23:25:02.660Z,-56.867,-24.8899,41.89,4.6,mb,,79,7.066,0.6,us,usb000qxm0,2014-05-21T07:27:39.160Z,"142km E of Visokoi Island, ",earthquake2014-05-20T21:57:47.000Z,63.3716,-149.0106,97.2,3,ml,,,,0.62,ak,ak11267442,2014-05-21T06:00:23.312Z,"3km SW of Cantwell, Alaska",earthquake2014-05-20T21:43:14.000Z,60.2706,-151.8511,55.7,2.7,ml,,,,0.63,ak,ak11267433,2014-05-21T05:46:16.819Z,"32km WSW of Cohoe, Alaska",earthquake2014-05-20T21:19:07.730Z,17.6225,-94.3974,167.13,4.8,mb,,152,2.541,1.11,us,usb000qxe7,2014-05-21T11:02:11.186Z,"30km SE of Hidalgotitlan, Mexico",earthquake2014-05-20T21:11:16.390Z,-17.8122,-69.3731,152,4.5,mb,,69,0.535,1.13,us,usb000qxe5,2014-05-21T05:13:55.873Z,"47km NNE of Putre, Chile",earthquake2014-05-20T21:10:07.100Z,35.4931,-97.2362,7.42,2.6,ml,,71,,0.55,us,usb000qxgq,2014-05-21T02:34:06.401Z,"3km E of Choctaw, Oklahoma",earthquake2014-05-20T21:07:08.940Z,19.0543,-69.6393,80.99,3.9,ml,,81,0.36,0.72,us,usb000qxcr,2014-05-21T06:21:59.665Z,"16km NE of Gonzalo, Dominican Republic",earthquake2014-05-20T20:16:15.700Z,-19.1832,-177.4709,575.46,4.6,mb,,88,4.482,0.78,us,usb000qx8p,2014-05-21T15:14:06.902Z,"207km NE of Ndoi Island, Fiji",earthquake2014-05-20T20:05:08.930Z,-68.7324,170.6679,15.7,5,mb,,43,9.177,0.82,us,usb000qx7z,2014-05-21T14:40:54.291Z,"Balleny Islands region",earthquake2014-05-20T17:29:41.000Z,60.0743,-152.6402,99.8,2.9,ml,,,,0.67,ak,ak11267355,2014-05-21T13:55:55.000Z,"46km SSE of Redoubt Volcano, Alaska",earthquake2014-05-20T17:16:30.900Z,19.1998,-66.8133,17,2.8,Md,13,234,0.76716125,0.28,pr,pr14140008,2014-05-21T13:27:40.000Z,"78km N of Hatillo, Puerto Rico",earthquake2014-05-20T15:48:33.900Z,-57.143,-25.5071,53.4,5,mb,,115,6.833,0.74,us,usb000qwmp,2014-05-20T23:51:00.880Z,"114km ESE of Visokoi Island, ",earthquake2014-05-20T15:05:25.860Z,-4.2728,122.848,13.49,4.5,mb,,55,3.172,0.85,us,usb000qwkd,2014-05-20T23:08:02.271Z,"53km SE of Kendari, Indonesia",earthquake2014-05-20T13:59:28.200Z,35.4984,-97.2409,6.884,3.1,ml,,70,,0.64,us,usb000qwfv,2014-05-20T22:18:57.642Z,"2km E of Choctaw, Oklahoma",earthquake2014-05-20T13:24:37.800Z,19.1669,-66.7703,40,2.8,Md,12,255.6,0.7231438,0.23,pr,pr14140005,2014-05-20T21:27:08.251Z,"75km N of Hatillo, Puerto Rico",earthquake2014-05-20T13:15:34.400Z,19.0639,-66.7553,15,3.2,Md,21,216,0.62073586,0.43,pr,pr14140004,2014-05-20T21:18:07.128Z,"64km N of Hatillo, Puerto Rico",earthquake2014-05-20T12:54:46.500Z,18.7991,-64.2505,20,2.8,Md,12,320.4,0.51383634,0.2,pr,pr14140003,2014-05-20T20:57:22.105Z,"57km NE of Road Town, British Virgin Islands",earthquake2014-05-20T10:32:19.200Z,19.1576,-66.8356,28,2.9,Md,14,277.2,0.73302527,0.34,pr,pr14140001,2014-05-20T18:34:52.600Z,"74km N of Hatillo, Puerto Rico",earthquake2014-05-20T07:59:47.000Z,63.1923,-150.3887,100,2.9,ml,,,,0.92,ak,ak11267040,2014-05-20T16:02:47.768Z,"75km WSW of Cantwell, Alaska",earthquake2014-05-20T07:39:34.560Z,-20.1896,-177.6313,511.44,4.4,mb,,96,4.753,0.81,us,usb000qw4w,2014-05-20T15:42:01.870Z,"122km ENE of Ndoi Island, Fiji",earthquake2014-05-20T07:30:19.580Z,35.5261,-97.2197,8.15,3.6,mb_lg,,32,0.11,0.43,us,usb000qw49,2014-05-21T05:24:25.111Z,"5km NE of Choctaw, Oklahoma",earthquake2014-05-20T05:42:38.600Z,35.4815,-97.2476,7.552,3.3,ml,,107,,0.7,us,usb000qwiq,2014-05-21T16:26:22.315Z,"2km SE of Choctaw, Oklahoma",earthquake2014-05-20T05:39:49.200Z,35.4842,-97.2451,7.595,2.7,ml,,106,,0.57,us,usb000qw2d,2014-05-21T06:03:20.376Z,"2km SE of Choctaw, Oklahoma",earthquake2014-05-20T04:43:26.740Z,40.9129,19.8857,10,4.5,mb,,62,0.434,0.82,us,usb000qw19,2014-05-20T05:01:15.030Z,"12km NNW of Kucove, Albania",earthquake2014-05-20T03:58:32.310Z,35.4727,-97.2715,7.03,3,mb_lg,,41,0.121,0.49,us,usb000qw05,2014-05-21T06:02:55.117Z,"2km S of Choctaw, Oklahoma",earthquake2014-05-20T02:30:07.000Z,67.7078,-162.391,4,3.1,ml,,,,0.73,ak,ak11266747,2014-05-20T10:32:38.882Z,"28km ENE of Noatak, Alaska",earthquake2014-05-20T02:20:47.000Z,60.7278,-149.4964,18.9,2.5,ml,,,,0.77,ak,ak11266736,2014-05-20T10:23:21.101Z,"44km W of Whittier, Alaska",earthquake2014-05-20T02:00:30.000Z,59.9031,-152.968,100,2.5,ml,,,,1.06,ak,ak11266725,2014-05-20T10:03:01.602Z,"65km WNW of Anchor Point, Alaska",earthquake2014-05-20T01:39:14.490Z,18.1568,-99.9519,62.74,4.9,mb,,126,1.378,1.01,us,usb000qvxw,2014-05-21T01:01:23.262Z,"9km W of Apaxtla de Castrejon, Mexico",earthquake2014-05-19T22:47:21.120Z,-57.085,-25.3856,62.81,5.4,mb,,69,6.876,1.37,us,usb000qvt4,2014-05-20T21:40:26.000Z,"118km ESE of Visokoi Island, ",earthquake2014-05-19T22:41:10.740Z,34.1605,-116.4348333,11.78,2.79,ml,86,20,0.04346,0.12,ci,ci15503417,2014-05-20T18:00:50.776Z,"5km N of Yucca Valley, California",earthquake2014-05-19T21:50:28.900Z,17.5643,-67.9606,68,3.2,Md,8,309.6,0.92167148,0.2,pr,pr14139008,2014-05-20T05:53:05.055Z,"93km WSW of Pole Ojea, Puerto Rico",earthquake2014-05-19T20:33:47.500Z,19.4135,-155.3153,5.1,2.5,Ml,,79.2,0.01796631,0.09,hv,hv60697006,2014-05-21T22:40:11.000Z,"8km WSW of Volcano, Hawaii",earthquake2014-05-19T20:08:51.620Z,34.2533333,-116.8248333,7.53,3.84,ml,112,18,0.04125,0.15,ci,ci15503377,2014-05-21T22:58:40.000Z,"2km ESE of Big Bear City, California",earthquake2014-05-19T20:01:15.000Z,63.3536,-145.0138,2.2,3.2,ml,,,,0.96,ak,ak11266575,2014-05-24T00:17:42.940Z,"58km S of Deltana, Alaska",earthquake2014-05-19T19:33:05.610Z,12.7759,-89.5982,63.54,4.6,mb,,206,0.973,0.36,us,usb000qvc1,2014-05-21T23:24:38.243Z,"84km SSW of La Libertad, El Salvador",earthquake2014-05-19T19:27:22.420Z,15.3598,-91.3355,22.06,4.7,mb,,74,0.167,0.99,us,usb000qvbi,2014-05-22T15:27:13.531Z,"3km NW of Aguacatan, Guatemala",earthquake2014-05-19T18:50:54.680Z,52.803,159.4736,72.5,4.6,mb,,161,0.545,0.79,us,usb000qv82,2014-05-22T15:48:08.144Z,"61km ESE of Petropavlovsk-Kamchatskiy, Russia",earthquake2014-05-19T18:21:04.470Z,-49.4572,126.0391,10,4.8,mb,,127,16.1,1.61,us,usb000qv5e,2014-05-22T15:59:32.395Z,"Western Indian-Antarctic Ridge",earthquake2014-05-19T18:20:53.000Z,60.2515,-150.7875,58.6,2.7,ml,,,,0.71,ak,ak11266564,2014-05-24T00:18:12.121Z,"30km SSE of Soldotna, Alaska",earthquake2014-05-19T18:07:30.500Z,35.774,-97.487,7.6,2.5,ml,,,,0.26,us,usb000qvlt,2014-05-22T18:52:12.227Z,"12km SSW of Guthrie, Oklahoma",earthquake2014-05-19T16:58:31.000Z,19.1837,-66.4172,8,2.8,Md,9,295.2,0.70966907,0.2,pr,pr14139005,2014-05-20T01:01:01.906Z,"79km N of Brenas, Puerto Rico",earthquake2014-05-19T15:50:32.100Z,19.3878,-155.2787,2.8,2.7,Ml,,43.2,0,0.23,hv,hv60696836,2014-05-19T23:54:59.471Z,"6km SW of Volcano, Hawaii",earthquake2014-05-19T15:26:52.000Z,51.334,-172.1642,25.3,2.6,ml,,,,0.43,ak,ak11266416,2014-05-24T00:15:57.166Z,"Andreanof Islands, Aleutian Islands, Alaska",earthquake2014-05-19T15:26:22.000Z,53.9488,-164.7404,46.4,2.7,ml,,,,0.38,ak,ak11266414,2014-05-24T00:15:07.755Z,"Unimak Island region, Alaska",earthquake2014-05-19T14:16:47.520Z,-35.3854,-175.5756,10,4.6,mb,,167,8.338,0.69,us,usb000qupk,2014-05-19T22:19:20.729Z,"East of the North Island of New Zealand",earthquake2014-05-19T13:53:11.000Z,52.1779,-172.8898,74.8,3.6,ml,,,,0.64,ak,ak11266404,2014-05-24T00:17:19.542Z,"89km E of Atka, Alaska",earthquake2014-05-19T13:12:15.190Z,30.042,140.3414,137.13,4.7,mb,,98,3.096,0.62,us,usb000qumd,2014-05-19T21:14:53.159Z,"Izu Islands, Japan region",earthquake2014-05-19T12:02:30.390Z,41.0504,142.0779,74.74,4.5,mb,,137,1.259,0.54,us,usb000qula,2014-05-19T21:18:57.829Z,"72km NE of Misawa, Japan",earthquake2014-05-19T10:05:27.600Z,18.2443,-67.9937,96,3.3,Md,8,198,0.45544585,0.5,pr,pr14139002,2014-05-19T18:07:57.065Z,"57km SE of Punta Cana, Dominican Republic",earthquake2014-05-19T10:05:27.400Z,18.236,-68.0008,98,3.4,Md,8,201.6,0.45364922,0.52,pr,pr14139004,2014-05-19T18:08:00.713Z,"57km SE of Punta Cana, Dominican Republic",earthquake2014-05-19T09:29:47.300Z,-32.0422,57.0823,10,4.7,mb,,61,15.712,0.81,us,usb000quh2,2014-05-19T17:32:14.515Z,"Southwest Indian Ridge",earthquake2014-05-19T09:28:44.000Z,63.4532,-152.7059,16.3,2.6,ml,,,,0.74,ak,ak11266263,2014-05-24T00:18:57.601Z,"155km ENE of McGrath, Alaska",earthquake2014-05-19T08:53:12.480Z,-21.1469,-178.4064,455.48,4.3,mb,,103,4.755,1.26,us,usb000qug1,2014-05-19T16:55:39.208Z,"62km SSE of Ndoi Island, Fiji",earthquake2014-05-19T06:29:08.620Z,36.137,-97.1345,4.26,3,ml,,55,0.427,0.95,us,usb000qud6,2014-05-21T05:12:26.360Z,"7km WNW of Stillwater, Oklahoma",earthquake2014-05-19T05:28:48.880Z,26.4569,142.3864,34.17,4.7,mb,,102,7.001,0.6,us,usb000quch,2014-05-19T13:31:27.214Z,"71km SSE of Chichi-shima, Japan",earthquake2014-05-19T05:06:02.000Z,19.4701,-65.3677,74,3,Md,4,316.8,1.15882672,0.21,pr,pr14139001,2014-05-19T13:08:42.669Z,"125km NNE of Vieques, Puerto Rico",earthquake2014-05-19T04:16:03.840Z,36.1213,-97.4487,3.78,3.1,mb_lg,,67,0.324,0.32,us,usb000quau,2014-05-19T18:58:06.373Z,"22km NE of Crescent, Oklahoma",earthquake2014-05-19T03:56:47.530Z,-57.0825,-25.0162,35,5,mb,,69,7.065,1.07,us,usb000quai,2014-05-19T13:56:36.000Z,"139km ESE of Visokoi Island, ",earthquake2014-05-19T03:51:05.890Z,-19.2711,-177.6298,557.16,4.4,mb,,129,4.368,1.05,us,usb000quad,2014-05-19T11:53:40.238Z,"189km NE of Ndoi Island, Fiji",earthquake2014-05-19T02:43:26.410Z,-5.5361,146.4665,126.73,4.7,mb,,68,3.904,1.02,us,usb000qu9b,2014-05-19T10:46:04.073Z,"81km ESE of Madang, Papua New Guinea",earthquake2014-05-19T02:39:21.700Z,32.9404,-100.8942,5,2.7,mb_lg,,97,1.1,0.64,us,usb000qu93,2014-05-19T10:41:52.959Z,"24km N of Snyder, Texas",earthquake2014-05-19T01:53:56.990Z,-4.6699,-105.4588,10,5.2,ms_20,,149,15.665,0.73,us,usb000qu81,2014-05-19T13:56:34.000Z,"Central East Pacific Rise",earthquake2014-05-19T01:37:23.380Z,36.1014,-97.0333,1.03,3,mb_lg,,45,0.438,0.53,us,usb000qu7c,2014-05-20T02:53:06.533Z,"2km SE of Stillwater, Oklahoma",earthquake2014-05-19T01:08:41.700Z,17.9757,-65.4048,13,2.5,Md,9,158.4,0.18505295,0.2,pr,pr14139000,2014-05-19T09:11:17.082Z,"15km SSE of Esperanza, Puerto Rico",earthquake2014-05-19T00:59:19.980Z,40.9774,19.8788,10,5.1,mb,,33,0.369,1,us,usb000qu5r,2014-05-20T02:52:43.228Z,"10km SW of Cerrik, Albania",earthquake2014-05-18T23:47:04.600Z,-4.385,-105.8958,10,5.3,mb,,106,16.022,0.84,us,usb000qu45,2014-05-20T23:09:41.000Z,"Central East Pacific Rise",earthquake2014-05-18T21:16:45.610Z,-19.1194,169.6317,271.23,4.9,mb,,88,4.188,0.84,us,usb000qty5,2014-05-19T05:19:17.085Z,"61km NE of Isangel, Vanuatu",earthquake2014-05-18T19:09:14.150Z,-17.6915,-174.8876,265.23,4.7,mb,,98,4.806,0.86,us,usb000qtt2,2014-05-19T03:11:53.647Z,"142km NW of Neiafu, Tonga",earthquake2014-05-18T18:53:47.570Z,36.5811,-97.815,3.44,3,mb_lg,,81,0.835,0.79,us,usb000qts5,2014-05-19T18:54:34.572Z,"21km NNE of Enid, Oklahoma",earthquake2014-05-18T16:46:38.000Z,67.71,-162.3479,22.4,2.8,ml,,,,0.98,ak,ak11265635,2014-05-19T03:48:44.573Z,"30km ENE of Noatak, Alaska",earthquake2014-05-18T15:57:03.000Z,60.8224,-151.6884,73.1,3.2,ml,,,,0.87,ak,ak11265561,2014-05-18T23:59:37.589Z,"26km NW of Nikiski, Alaska",earthquake2014-05-18T15:22:12.960Z,-18.2831,-178.2533,634.25,4.9,mb,,39,3.555,0.67,us,usb000qtji,2014-05-18T23:25:28.203Z,"266km N of Ndoi Island, Fiji",earthquake2014-05-18T14:31:20.000Z,51.9618,-171.5207,27.8,2.9,ml,,,,0.5,ak,ak11265539,2014-05-18T22:34:02.104Z,"61km SSW of Amukta Island, Alaska",earthquake2014-05-18T13:59:36.000Z,36.0925,-97.068,4.371,2.5,ml,,71,,0.44,us,usb000qti1,2014-05-20T02:52:20.065Z,"2km SSW of Stillwater, Oklahoma",earthquake2014-05-18T13:09:18.100Z,18.4353,-66.3097,125,3,Md,16,169.2,0.21290072,0.2,pr,pr14138003,2014-05-18T21:11:51.717Z,"1km SSW of San Antonio, Puerto Rico",earthquake2014-05-18T12:08:06.800Z,34.9249,26.0714,10,4.3,mb,,144,1.034,1.1,us,usb000qtfv,2014-05-20T02:51:59.491Z,"16km SE of Makry Gialos, Greece",earthquake2014-05-18T12:00:29.500Z,13.6955,-92.0638,35,4.2,mb,,192,0.895,1.3,us,usb000qtfl,2014-05-18T20:03:09.819Z,"68km SSW of Champerico, Guatemala",earthquake2014-05-18T11:57:53.140Z,-57.0358,-24.9233,48.93,4.7,mb,,115,7.099,0.89,us,usb000qtfn,2014-05-18T20:00:24.907Z,"143km ESE of Visokoi Island, ",earthquake2014-05-18T10:59:21.840Z,3.1118,93.7744,10,5.1,mb,,130,3.799,1.24,us,usb000qteu,2014-05-18T19:01:58.438Z,"285km WSW of Meulaboh, Indonesia",earthquake2014-05-18T08:50:47.900Z,19.0428,-67.1958,12,2.8,Md,7,302.4,0.57761673,0.05,pr,pr14138001,2014-05-18T16:53:18.734Z,"61km N of San Antonio, Puerto Rico",earthquake2014-05-18T08:29:26.020Z,35.8416,-96.9292,3.64,3,mb_lg,,56,0.299,0.45,us,usb000qtc7,2014-05-20T02:51:36.678Z,"16km NNW of Chandler, Oklahoma",earthquake2014-05-18T07:48:16.000Z,55.2714,-163.2957,86.8,3,ml,,,,0.91,ak,ak11265355,2014-05-18T17:40:36.203Z,"37km WNW of Cold Bay, Alaska",earthquake2014-05-18T06:38:48.980Z,-14.7235,-176.1437,78.63,4.9,mb,,78,6.332,0.65,us,usb000qt9y,2014-05-18T17:56:33.000Z,"159km S of Mata-Utu, Wallis and Futuna",earthquake2014-05-18T06:29:51.500Z,18.6895,-66.8884,24,2.9,Md,14,234,0.3054272,0.18,pr,pr14138000,2014-05-18T14:32:49.259Z,"23km NNW of Hatillo, Puerto Rico",earthquake2014-05-18T04:47:09.810Z,32.9253,-100.8292,5,2.5,mb_lg,,94,1.043,0.76,us,usb000qt87,2014-05-18T12:49:41.938Z,"24km NNE of Snyder, Texas",earthquake2014-05-18T04:35:39.000Z,51.8092,-173.4377,15.8,2.5,ml,,,,0.57,ak,ak11265270,2014-05-18T12:38:50.952Z,"67km SE of Atka, Alaska",earthquake2014-05-18T04:19:21.160Z,-21.3071,169.7352,89.33,5.3,mb,,50,3.154,0.8,us,usb000qt7u,2014-05-18T16:56:36.000Z,"193km E of Tadine, New Caledonia",earthquake2014-05-18T04:04:56.270Z,-18.7257,-177.7427,425.25,4.4,mb,,79,4.113,0.75,us,usb000qt7n,2014-05-18T12:07:28.734Z,"235km NNE of Ndoi Island, Fiji",earthquake2014-05-18T03:56:34.490Z,24.4223,141.7353,113.15,4.7,mb,,99,8.823,0.95,us,usb000qt7b,2014-05-18T11:59:06.727Z,"57km SE of Iwo Jima, Japan",earthquake2014-05-18T03:27:39.600Z,51.218,178.7704,66.81,4.3,mb,,90,2.914,1.21,us,usb000qt6z,2014-05-18T11:30:20.341Z,"83km SSE of Little Sitkin Island, Alaska",earthquake2014-05-18T03:24:49.100Z,36.1187,-97.2501,5,2.5,mb_lg,,43,0.361,0.61,us,usb000qt6n,2014-05-20T02:51:14.105Z,"17km W of Stillwater, Oklahoma",earthquake2014-05-18T02:46:10.380Z,-14.9248,-174.847,10,4.7,mb,,173,3.14,1.33,us,usb000qt6i,2014-05-18T10:48:47.161Z,"163km NW of Hihifo, Tonga",earthquake'</body><body package="Roassal2-Builder-Map">seismData2"Cut and pasted from http://earthquake.usgs.gov/earthquakes/feed/v0.1/http://earthquake.usgs.gov/earthquakes/feed/v0.1/summary/2.5_month.csv"^ 'DateTime,Latitude,Longitude,Depth,Magnitude,MagType,NbStations,Gap,Distance,RMS,Source,EventID,Version2014-07-30T23:48:03.510+00:00,35.732,-97.434,6.8,2.9,mb_lg,,72,0.1,0.48,us,usb000ryqu,14067651194142014-07-30T23:33:43.300+00:00,18.611,-64.695,105.0,2.7,Md,7,263,0.2,0.10,pr,pr14211009,14067648601202014-07-30T23:09:25.000+00:00,62.659,-148.758,47.2,3.3,ml,,,,0.58,ak,ak11344402,14067647358372014-07-30T21:36:51.550+00:00,52.287,-170.775,49.8,4.7,mb,,136,1.4,1.04,us,usb000rypl,14067638259082014-07-30T21:09:24.500+00:00,49.381,-120.541,,2.5,Ml,,220,0.6,0.07,uw,uw60830347,14067576871372014-07-30T20:01:53.000+00:00,51.683,178.552,93.8,2.5,ml,,,,0.39,ak,ak11344225,14067647713022014-07-30T19:23:03.630+00:00,33.881,-118.496,11.2,2.9,ml,76,79,0.1,0.20,ci,ci15532889,14067648889052014-07-30T18:11:40.000+00:00,67.614,-162.134,20.0,3.2,ml,,,,1.09,ak,ak11344202,14067647546292014-07-30T17:40:38.500+00:00,18.991,-64.066,26.0,3.4,Md,12,320,0.8,0.30,pr,pr14211008,14067471181162014-07-30T16:46:59.240+00:00,35.742,-97.425,5.0,3.3,mb_lg,,40,0.1,0.42,us,usb000rylj,14067565148032014-07-30T16:21:32.320+00:00,35.731,-97.402,4.9,3.4,mb_lg,,19,0.1,0.56,us,usb000ryl6,14067606030222014-07-30T16:00:58.730+00:00,-7.185,154.842,10.0,5.7,mwb,,31,4.0,0.95,us,usb000rykv,14067650153222014-07-30T15:44:20.000+00:00,51.879,178.367,126.9,2.5,ml,,,,0.62,ak,ak11344013,14067640217442014-07-30T15:20:27.000+00:00,67.619,-161.925,20.0,3.3,ml,,,,1.58,ak,ak11344007,14067625754682014-07-30T15:15:27.000+00:00,67.584,-161.935,18.0,3.4,ml,,,,1.07,ak,ak11344001,14067622807752014-07-30T14:46:43.390+00:00,39.581,-123.454,6.2,2.6,md,22,113,0.1,0.04,nc,nc72268016,14067648632132014-07-30T14:12:45.000+00:00,67.614,-161.871,20.0,2.8,ml,,,,1.05,ak,ak11343956,14067589169752014-07-30T12:57:47.820+00:00,36.296,-118.351,1.5,2.7,ml,30,143,0.1,0.23,ci,ci15532777,14067599194542014-07-30T12:39:58.000+00:00,63.226,-150.497,119.5,3.0,ml,,,,0.39,ak,ak11343886,14067531241582014-07-30T12:25:05.760+00:00,-18.795,169.307,232.5,4.6,mb,,76,4.2,0.71,us,usb000ryjq,14067520562982014-07-30T12:16:40.000+00:00,67.642,-162.007,24.4,3.4,ml,,,,1.21,ak,ak11343879,14067531041382014-07-30T12:01:10.700+00:00,19.086,-64.493,76.0,3.1,Md,4,331,0.8,0.33,pr,pr14211007,14067506245782014-07-30T09:15:18.080+00:00,-17.654,-174.827,177.7,4.3,mb,,96,4.7,0.61,us,usb000ryj6,14067406777742014-07-30T08:54:30.280+00:00,33.698,-116.734,19.7,2.9,ml,112,16,0.0,0.18,ci,ci15532705,14067570554902014-07-30T08:34:27.400+00:00,18.921,-68.046,70.0,2.9,Md,15,241,0.5,0.56,pr,pr14211005,14067382174842014-07-30T08:25:50.800+00:00,18.693,-66.610,31.0,2.6,Md,8,234,0.2,0.33,pr,pr14211004,14067377100692014-07-30T07:21:38.230+00:00,32.598,-109.111,5.0,2.8,ml,,82,1.1,1.24,us,usb000ryif,14067152038792014-07-30T05:40:30.000+00:00,50.187,178.836,32.4,3.1,ml,,,,0.46,ak,ak11343713,14067446737802014-07-30T03:57:21.500+00:00,18.532,-68.980,156.0,3.4,Md,6,342,0.6,0.27,pr,pr14211003,14067215998772014-07-30T03:46:51.000+00:00,53.515,-165.344,25.6,2.7,ml,,,,0.28,ak,ak11343746,14067209635392014-07-30T03:43:34.700+00:00,51.814,178.359,126.1,4.1,mb,,165,0.7,0.77,us,usb000ryhi,14067207623182014-07-30T02:56:27.500+00:00,19.483,-155.884,10.9,2.5,Ml,,104,0.0,0.23,hv,hv60743496,14067179499522014-07-30T02:24:26.960+00:00,-19.088,-12.289,9.1,5.5,mb,,36,26.5,0.66,us,usb000ryhe,14067285680002014-07-30T01:32:09.330+00:00,26.399,53.550,5.2,5.3,mwb,,35,2.8,0.79,us,usb000ryha,14067294199182014-07-29T23:17:53.000+00:00,59.956,-150.207,11.5,2.5,ml,,,,0.81,ak,ak11343221,14067048218892014-07-29T22:38:26.180+00:00,32.127,-115.140,26.5,3.2,ml,13,244,0.2,0.38,ci,ci15532569,14067527366412014-07-29T22:17:37.000+00:00,59.934,-153.325,137.8,3.4,ml,,,,0.66,ak,ak11342984,14067012042412014-07-29T22:08:51.000+00:00,52.324,-173.622,4.8,2.7,ml,,,,0.51,ak,ak11342978,14067006877432014-07-29T22:04:44.580+00:00,35.437,-36.405,10.0,5.1,mb,,81,7.3,0.74,us,usb000ryg1,14067379720002014-07-29T21:09:03.860+00:00,-56.143,-27.582,108.4,4.8,mb,,69,5.4,0.63,us,usb000ryfg,14066970987792014-07-29T20:17:00.000+00:00,51.844,178.528,108.2,2.8,ml,,,,0.48,us,usb000ryh0,14067330039782014-07-29T18:04:54.190+00:00,-10.734,161.696,51.0,5.0,mb,,28,2.1,0.99,us,usb000ryd5,14067325960002014-07-29T17:19:48.000+00:00,18.752,-66.722,58.0,2.8,Md,19,216,0.3,0.33,pr,pr14210007,14067289750002014-07-29T16:50:13.780+00:00,-23.582,-176.529,35.0,5.1,mb,,82,5.8,0.86,us,usb000ryc4,14066815610092014-07-29T13:34:53.000+00:00,61.463,-146.480,35.7,3.3,ml,9,104,,0.46,ak,ak11341457,14066604568862014-07-29T13:27:40.050+00:00,-3.469,146.678,6.9,5.8,mb,,20,5.5,1.20,us,usb000ry9u,14067441980002014-07-29T10:46:35.400+00:00,18.670,-65.101,66.0,3.3,Md,14,212,0.3,0.23,pr,pr14210006,14066597413182014-07-29T10:46:15.210+00:00,17.842,-95.524,95.1,6.3,mwp,,46,2.9,1.12,us,usb000ry8m,14067381716102014-07-29T08:20:15.320+00:00,31.495,105.196,11.7,4.7,mb,,41,3.9,1.02,us,usb000ry8h,14067078034842014-07-29T07:39:52.650+00:00,36.739,-98.034,5.0,2.7,mb_lg,,82,0.2,0.42,us,usb000ry86,14066999405782014-07-29T07:16:41.190+00:00,-10.235,87.703,10.0,5.1,mb,,74,9.2,1.12,us,usb000ry7w,14066472100442014-07-29T07:07:07.330+00:00,14.410,93.073,10.0,5.5,mb,,44,2.8,1.50,us,usb000ry7u,14066478200002014-07-29T03:33:01.430+00:00,14.806,-92.417,82.5,5.4,mb,,124,0.8,1.31,us,usb000ry71,14066705620252014-07-29T02:46:36.100+00:00,36.732,-97.987,7.6,4.3,mwr,,80,0.2,0.73,us,usb000ry6y,14067610941282014-07-29T02:39:51.300+00:00,18.951,-64.400,33.0,3.0,Md,4,335,0.8,0.31,pr,pr14210003,14066305421752014-07-29T01:31:25.100+00:00,19.112,-64.614,62.0,3.0,Md,4,328,0.8,0.27,pr,pr14210002,14066264350372014-07-29T01:22:05.010+00:00,-23.577,-63.735,543.6,4.4,mb,,45,4.9,0.84,us,usb000ry6q,14066258844792014-07-29T01:20:03.700+00:00,19.443,-68.093,47.0,3.6,Md,10,331,1.3,0.18,pr,pr14210000,14066257595282014-07-29T00:47:17.610+00:00,-20.116,-70.487,24.6,4.7,mb,,137,0.5,1.39,us,usb000ry6b,14066481060002014-07-29T00:41:35.460+00:00,-11.412,-77.727,50.6,4.0,mb,,187,10.1,0.67,us,usb000ry6f,14066468994642014-07-28T23:50:57.700+00:00,-6.885,143.940,10.0,4.8,mb,,56,4.1,0.83,us,usb000ry65,14066204062852014-07-28T23:00:48.530+00:00,-6.905,143.846,10.0,5.8,mb,,16,4.1,0.95,us,usb000ry5u,14066580950002014-07-28T22:47:30.910+00:00,-6.823,143.880,10.0,4.9,mb,,100,4.1,0.73,us,usb000ry5n,14066166036042014-07-28T22:26:51.360+00:00,36.732,-98.394,5.0,3.0,mb_lg,,97,0.4,0.61,us,usb000ry5e,14066816635352014-07-28T20:01:14.800+00:00,40.590,-124.090,18.3,3.3,Ml,25,130,0.2,0.09,nc,nc72266491,14067604250422014-07-28T17:46:58.000+00:00,53.894,-163.986,52.4,2.5,ml,,,,0.30,ak,ak11340160,14065986203482014-07-28T15:53:44.800+00:00,18.786,-63.925,15.0,2.8,Md,3,356,1.1,0.23,pr,pr14209006,14065917847142014-07-28T15:05:54.940+00:00,28.011,127.945,57.4,4.8,mb,,114,5.7,1.16,us,usb000rxz1,14065889161972014-07-28T14:14:47.000+00:00,58.347,-136.915,3.4,3.2,ml,,,,0.62,ak,ak11340054,14065858618992014-07-28T12:51:29.000+00:00,45.340,-112.608,9.8,3.9,mc,72,34,0.4,0.26,mb,mb30664,14066962971032014-07-28T11:04:34.700+00:00,47.458,-122.798,26.6,3.5,Ml,,25,0.1,0.39,uw,uw60828527,14067112027572014-07-28T08:05:31.700+00:00,34.741,139.332,20.8,4.5,mb,,114,1.7,0.37,us,usb000rxvv,14065636831032014-07-28T08:03:10.760+00:00,-17.326,66.834,10.0,4.9,mb,,66,18.7,1.45,us,usb000rxvu,14065669620002014-07-28T06:45:40.120+00:00,32.988,-117.745,10.0,3.3,ml,43,146,0.4,0.16,ci,ci15531937,14066600305682014-07-28T05:02:12.000+00:00,51.422,178.833,40.0,3.1,ml,,,,0.55,ak,ak11339842,14065686562552014-07-28T04:59:53.000+00:00,62.391,-149.778,46.5,3.0,ml,,,,0.75,ak,ak11339835,14065525391112014-07-28T03:38:45.950+00:00,-24.087,-66.945,196.7,4.3,mb,,85,2.3,0.74,us,usb000rxub,14065476810872014-07-28T03:36:47.620+00:00,7.596,136.731,10.0,5.4,mb,,74,10.0,0.94,us,usb000rxuc,14065672930002014-07-28T03:33:41.400+00:00,18.892,-64.806,37.0,2.7,Md,3,338,0.7,0.18,pr,pr14209000,14065473780732014-07-28T00:00:46.960+00:00,26.909,54.200,39.6,4.5,mb,,80,2.7,0.47,us,usb000rxtm,14065345956262014-07-27T23:35:06.750+00:00,-10.051,119.898,52.0,4.5,mb,,78,2.7,1.03,us,usb000rxtl,14065330589122014-07-27T22:19:22.100+00:00,36.146,-96.838,4.5,3.2,mb_lg,,19,0.6,0.78,us,usb000rxt7,14066119964072014-07-27T22:01:24.000+00:00,65.182,-151.736,8.6,2.7,ml,,,,1.05,ak,ak11339724,14065274445582014-07-27T22:00:10.000+00:00,51.438,-174.585,3.9,3.2,ml,,,,0.35,ak,ak11339722,14065273712522014-07-27T21:34:21.930+00:00,36.079,-117.857,1.5,2.8,ml,35,52,0.0,0.13,ci,ci15531785,14065636046232014-07-27T20:39:10.450+00:00,36.806,-97.858,2.7,2.9,mb_lg,,85,0.4,0.36,us,usb000rxsh,14065068568102014-07-27T20:34:32.730+00:00,12.875,-70.036,41.7,4.9,mb,,130,0.4,0.41,us,usb000rxsf,14064968998962014-07-27T20:11:54.450+00:00,27.614,66.053,33.0,4.4,mb,,134,7.4,0.72,us,usb000rxsd,14065208698922014-07-27T18:09:11.300+00:00,35.497,140.598,65.6,4.6,mb,,122,2.2,0.66,us,usb000rxrz,14065199087012014-07-27T16:47:17.000+00:00,17.785,-68.222,49.0,2.9,Md,10,266,0.7,0.27,pr,pr14208008,14064905022802014-07-27T13:41:09.000+00:00,58.943,-155.821,100.0,3.4,ml,,,,2.48,ak,ak11339397,14064974239382014-07-27T13:29:06.380+00:00,16.238,-98.710,35.0,4.7,mb,,178,1.3,0.82,us,usb000rxr5,14064966961422014-07-27T13:07:56.000+00:00,58.319,-136.942,10.5,2.5,ml,,,,0.91,ak,ak11339384,14065029430962014-07-27T12:52:08.000+00:00,51.337,-174.458,7.6,2.6,ml,,,,0.38,ak,ak11339379,14065029395912014-07-27T11:20:54.700+00:00,19.148,-64.342,52.0,3.2,Md,6,320,0.8,0.25,pr,pr14208005,14064890026682014-07-27T10:46:39.610+00:00,36.077,-117.858,1.3,2.6,ml,30,52,0.0,0.13,ci,ci15531617,14065570450802014-07-27T10:26:59.800+00:00,19.214,-64.360,48.0,3.2,Md,8,306,0.8,0.07,pr,pr14208004,14064857745612014-07-27T10:15:31.810+00:00,-2.948,136.459,40.4,4.7,mb,,40,4.2,1.01,us,usb000rxqg,14064850859542014-07-27T09:28:06.380+00:00,36.293,-97.475,5.0,2.8,mb_lg,,32,0.2,0.51,us,usb000rxq9,14065068406472014-07-27T09:24:17.230+00:00,39.699,142.150,55.8,4.5,mb,,140,2.4,1.30,us,usb000rxqa,14064820420642014-07-27T08:50:11.100+00:00,19.303,-155.388,2.9,2.5,Ml,,94,0.0,0.27,hv,hv60741681,14064799922382014-07-27T06:56:12.600+00:00,17.870,-66.902,124.0,3.1,Md,5,274,0.2,0.18,pr,pr14208003,14064731285162014-07-27T05:00:17.000+00:00,54.190,-162.555,22.7,2.5,ml,,,,0.68,ak,ak11339180,14065003640702014-07-27T04:46:40.000+00:00,51.725,178.502,96.5,2.5,ml,,,,0.32,ak,ak11339158,14065003674772014-07-27T04:02:11.880+00:00,-24.766,-177.376,166.9,5.1,mb,,97,4.5,0.95,us,usb000rxp3,14064626816472014-07-27T03:40:59.790+00:00,40.192,143.095,47.6,4.2,mb,,170,1.8,0.69,us,usb000rxp1,14064614166012014-07-27T03:38:45.000+00:00,51.840,178.430,113.6,3.5,ml,,,,0.34,ak,ak11339107,14065003611042014-07-27T02:20:41.190+00:00,37.489,72.088,190.9,4.1,mb,,130,1.3,0.49,us,usb000rxnr,14064566013572014-07-27T02:11:55.660+00:00,-4.463,152.033,10.0,4.4,mb,,133,0.3,1.10,us,usb000rxns,14064560670532014-07-27T02:10:21.300+00:00,18.922,-64.635,4.0,2.6,Md,7,295,0.5,0.27,pr,pr14208001,14064559706882014-07-27T01:28:38.050+00:00,23.761,-45.646,10.0,6.0,mwb,,60,16.9,1.18,us,usb000rxni,14065053670002014-07-27T01:27:12.000+00:00,67.630,-161.975,27.9,3.7,ml,,,,1.00,ak,ak11339033,14065002809472014-07-26T22:44:29.000+00:00,63.532,-149.552,100.0,2.6,ml,,,,0.57,ak,ak11338987,14064436159682014-07-26T21:55:56.850+00:00,25.290,127.100,42.0,4.4,mb,,136,1.9,0.94,us,usb000rxn2,14064407436372014-07-26T21:25:13.510+00:00,-22.973,-69.942,56.4,4.5,mwr,,97,0.4,1.19,us,usb000rxmi,14064876670002014-07-26T21:22:07.680+00:00,-52.038,-74.376,12.9,4.7,mb,,152,1.5,1.09,us,usb000rxmj,14064386810412014-07-26T21:08:33.850+00:00,-21.197,-179.091,603.4,4.7,mb,,51,8.1,0.80,us,usb000rxmv,14064378684412014-07-26T21:07:21.090+00:00,-21.248,-179.181,627.6,4.6,mb,,72,4.4,0.78,us,usb000rxmf,14064377953382014-07-26T20:53:09.740+00:00,58.255,-137.083,10.0,4.0,ml,,113,1.2,0.51,us,usb000rxm6,14064862930002014-07-26T20:49:11.480+00:00,-50.107,120.019,13.5,4.8,mb,,135,16.9,0.58,us,usb000rxm7,14064367090932014-07-26T20:38:31.410+00:00,36.993,142.589,24.5,4.6,mb,,129,3.5,0.72,us,usb000rxm5,14064360707292014-07-26T20:37:33.000+00:00,58.309,-153.920,83.2,2.6,ml,,,,0.68,ak,ak11338830,14064360142302014-07-26T17:52:44.100+00:00,51.761,178.510,98.6,3.0,ml,,164,0.6,0.63,us,usb000rxma,14066495668962014-07-26T17:43:54.590+00:00,-6.823,150.417,27.7,4.9,mb,,41,3.1,1.16,us,usb000rxlg,14066488710002014-07-26T17:11:16.540+00:00,-21.178,-15.190,14.7,5.1,mb,,32,29.5,0.50,us,usb000rxlb,14066471310002014-07-26T17:09:10.750+00:00,0.558,98.662,79.7,4.5,mb,,166,1.3,1.02,us,usb000rxl8,14066465933132014-07-26T16:32:03.300+00:00,46.265,-111.387,9.4,3.0,mc,56,144,0.2,0.23,mb,mb14956348,14065572795162014-07-26T15:59:51.150+00:00,-60.083,-18.655,10.0,4.9,mb,,93,13.2,1.39,us,usb000rxkq,14064193510832014-07-26T15:52:58.000+00:00,59.490,-152.796,99.9,2.8,ml,,,,0.74,ak,ak11338611,14064189378252014-07-26T15:33:14.300+00:00,18.315,-68.296,84.0,3.0,Md,7,230,0.2,0.28,pr,pr14207004,14064177634192014-07-26T15:26:58.500+00:00,19.294,-155.383,4.0,2.6,Ml,,101,0.0,0.12,hv,hv60740861,14065955106392014-07-26T14:46:19.600+00:00,38.802,-122.771,1.7,2.5,Md,55,29,0.0,0.04,nc,nc72264991,14065900889532014-07-26T14:12:20.560+00:00,27.879,128.229,64.1,4.8,mb,,122,1.0,1.32,us,usb000rxkc,14064128920702014-07-26T13:49:38.000+00:00,60.064,-153.275,100.0,3.1,ml,,,,1.00,ak,ak11338535,14064115371822014-07-26T12:17:04.500+00:00,17.918,-67.104,6.0,2.5,Md,10,281,0.1,0.31,pr,pr14207003,14064059828342014-07-26T11:13:48.490+00:00,-60.060,-18.761,10.0,5.4,mb,,74,11.2,1.02,us,usb000rxjy,14065953670002014-07-26T10:59:29.800+00:00,-60.121,-18.600,10.0,5.1,mb,,76,11.3,0.67,us,usb000rxjv,14064013304662014-07-26T10:57:10.860+00:00,37.117,-97.804,2.8,3.4,mb_lg,,56,0.1,0.22,us,usb000rxjs,14066120167002014-07-26T10:33:15.900+00:00,19.386,-65.322,86.0,3.1,Md,8,288,1.1,0.07,pr,pr14207002,14063997537702014-07-26T10:31:41.590+00:00,51.722,178.452,105.7,4.5,mb,,110,0.6,1.14,us,usb000rxjn,14064061283222014-07-26T09:56:01.270+00:00,6.762,-72.967,161.1,4.5,mb,,49,0.8,1.22,us,usb000rxjg,14063975170182014-07-26T08:54:59.100+00:00,37.562,-118.847,10.4,2.8,Ml,31,130,0.0,0.03,nc,nc72264796,14065866077192014-07-26T08:40:05.880+00:00,20.297,120.267,18.7,4.6,mb,,126,2.6,0.84,us,usb000rxj9,14063929628762014-07-26T08:38:13.070+00:00,33.058,-115.905,0.9,2.8,ml,51,36,0.1,0.19,ci,ci15531225,14065583812402014-07-26T08:05:51.680+00:00,45.566,150.919,75.6,4.9,mb,,48,5.8,0.91,us,usb000rxj3,14063909040952014-07-26T07:33:00.500+00:00,18.415,-68.239,95.0,3.4,Md,12,194,0.2,0.31,pr,pr14207000,14063889394842014-07-26T07:31:43.730+00:00,-30.293,-72.349,10.0,4.9,mb,,93,1.3,1.42,us,usb000rxiu,14066513190002014-07-26T07:29:03.040+00:00,4.860,123.186,585.5,4.4,mb,,87,3.2,0.94,us,usb000rxix,14063886899412014-07-26T07:22:42.410+00:00,74.554,9.622,10.0,4.2,mb,,132,4.0,1.10,us,usb000rxiv,14063883194002014-07-26T06:24:12.200+00:00,18.279,-67.143,118.0,2.6,Md,8,194,0.1,0.34,pr,pr14207001,14063778972072014-07-26T06:21:25.000+00:00,51.800,178.204,134.8,2.6,ml,,,,0.41,ak,ak11338313,14064061590122014-07-26T05:49:51.250+00:00,9.798,-83.973,6.8,3.9,mb,,185,0.2,1.31,us,usb000rxie,14063928655352014-07-26T05:34:46.710+00:00,-4.366,136.402,65.1,4.0,mb,,182,4.4,1.23,us,usb000rxid,14063818351942014-07-26T04:37:56.000+00:00,60.041,-153.033,100.0,2.6,ml,,,,0.64,ak,ak11338277,14063784296072014-07-25T23:22:10.310+00:00,43.523,147.303,51.7,5.1,mb,,126,3.4,0.81,us,usb000rxg5,14063594816412014-07-25T23:22:09.830+00:00,18.528,145.578,183.6,5.0,mb,,80,0.5,0.81,us,usb000rxg7,14063594758722014-07-25T21:49:42.000+00:00,58.320,-136.885,10.2,2.8,ml,,,,0.87,ak,ak11337849,14063539294662014-07-25T20:03:47.490+00:00,37.280,99.035,15.0,4.5,mb,,45,8.7,1.05,us,usb000rxc9,14063975122782014-07-25T19:40:35.160+00:00,-2.790,138.732,59.6,4.8,mb,,37,6.5,0.91,us,usb000rxbu,14063969580002014-07-25T18:28:53.000+00:00,65.654,-144.825,17.7,3.6,ml,,,,0.58,ak,ak11337197,14063908860002014-07-25T17:35:32.400+00:00,35.548,-121.251,3.5,2.7,Md,62,191,0.2,0.10,nc,nc72264461,14065882306082014-07-25T17:05:46.190+00:00,28.789,143.660,34.2,5.0,mb,,41,2.1,0.72,us,usb000rxa3,14063892490002014-07-25T16:43:24.000+00:00,67.590,-161.871,18.7,3.9,ml,,,,0.89,ak,ak11337003,14063355534722014-07-25T16:01:36.300+00:00,18.279,-67.246,81.0,2.8,Md,15,140,0.2,0.23,pr,pr14206002,14063330511232014-07-25T16:00:40.110+00:00,58.278,-137.039,10.0,3.8,ml,,146,1.2,0.93,us,usb000rx93,14063216591032014-07-25T15:12:53.100+00:00,58.516,-136.730,10.0,3.7,ml,,167,1.0,1.01,us,usb000rx7j,14063150776152014-07-25T13:52:33.200+00:00,36.137,-120.198,10.9,2.7,md,46,138,0.1,0.08,nc,nc72264361,14063260862952014-07-25T13:19:49.000+00:00,58.455,-136.780,14.8,2.5,ml,,,,0.95,ak,ak11336678,14063233432762014-07-25T13:06:30.690+00:00,58.202,-136.913,10.0,3.8,ml,,147,1.1,0.73,us,usb000rx72,14063225501222014-07-25T12:48:44.160+00:00,17.883,145.395,323.6,4.4,mb,,89,4.3,0.91,us,usb000rx6z,14063214830512014-07-25T12:11:49.000+00:00,58.265,-137.064,5.6,3.8,ml,,,,0.72,ak,ak11336580,14063192607192014-07-25T11:59:55.280+00:00,58.334,-137.039,10.0,3.8,mb,,118,1.2,1.35,us,usb000rx6n,14063111288772014-07-25T11:53:19.830+00:00,58.267,-137.025,10.0,3.9,ml,,140,1.2,0.68,us,usb000rx6l,14063181496402014-07-25T11:33:55.670+00:00,58.298,-137.000,10.0,4.0,mb,,118,1.2,0.85,us,usb000rx69,14063169928192014-07-25T11:19:36.760+00:00,58.480,-137.055,10.0,4.4,mb,,83,1.2,1.31,us,usb000rx63,14063091706132014-07-25T11:09:06.090+00:00,-29.609,-177.409,39.2,4.9,mb,,129,0.6,0.65,us,usb000rx6j,14063155015512014-07-25T11:08:39.490+00:00,58.283,-137.121,10.0,4.5,mb,,128,1.2,0.86,us,usb000rx5r,14063089926952014-07-25T10:59:35.000+00:00,57.808,-154.798,77.6,4.3,ml,,,,0.70,ak,ak11336425,14063149297122014-07-25T10:54:49.780+00:00,58.358,-137.130,10.0,5.9,mwp,,56,1.2,1.11,us,usb000rx5i,14064396002312014-07-25T10:54:47.000+00:00,19.333,-155.193,7.8,2.5,Ml,,83,0.0,0.07,hv,hv60738871,14063238038632014-07-25T10:54:06.050+00:00,58.278,-137.076,10.0,4.7,mb,,84,1.2,0.98,us,usb000rx5g,14062926609522014-07-25T10:43:53.850+00:00,-15.205,-72.078,165.1,4.6,mb,,127,3.6,1.10,us,usb000rx5e,14063139930702014-07-25T10:01:05.700+00:00,47.739,-121.996,0.1,2.9,Ml,,50,0.0,0.43,uw,uw60826997,14065462275892014-07-25T09:58:01.580+00:00,36.731,71.289,186.9,4.5,mb,,75,0.7,1.25,us,usb000rx57,14063112345922014-07-25T08:32:37.130+00:00,-25.478,-175.028,10.0,5.1,mb,,52,4.6,1.19,us,usb000rx37,14063061087242014-07-25T07:38:31.600+00:00,19.104,-66.506,23.0,2.6,Md,15,252,0.6,0.37,pr,pr14206001,14063028729342014-07-25T07:10:29.120+00:00,14.429,-89.927,253.9,4.3,mb,,114,0.5,0.87,us,usb000rx2t,14063011780692014-07-25T07:05:21.200+00:00,17.953,-68.366,55.0,3.1,Md,9,270,0.6,0.40,pr,pr14206000,14063008820172014-07-25T04:56:52.300+00:00,36.641,-98.242,5.0,3.3,mb_lg,,54,0.2,0.73,us,usb000rx2d,14063508800572014-07-25T04:52:57.900+00:00,-23.196,-66.150,176.1,4.5,mb,,175,2.6,1.36,us,usb000rx2c,14062929305392014-07-25T04:18:17.240+00:00,41.589,142.045,69.7,5.1,mb,,116,0.9,0.74,us,usb000rx2a,14063013323892014-07-25T03:50:21.000+00:00,63.246,-151.559,12.1,3.2,ml,,,,1.22,ak,ak11336251,14062891783462014-07-25T03:22:36.000+00:00,62.881,-148.279,58.8,3.7,ml,,,,0.86,ak,ak11336230,14063085128672014-07-25T01:41:38.000+00:00,62.692,-149.420,14.8,2.9,ml,,,,0.97,ak,ak11336204,14062814475682014-07-25T00:02:39.650+00:00,-21.408,-179.298,615.9,4.6,mb,,53,4.4,0.63,us,usb000rx1k,14062755207592014-07-24T23:57:28.400+00:00,10.413,125.267,38.0,5.3,mb,,87,3.3,0.97,us,usb000rx1j,14063839550002014-07-24T23:09:04.010+00:00,28.496,-43.739,10.0,4.7,mb,,134,24.0,0.53,us,usb000rx1f,14062722906432014-07-24T21:51:10.400+00:00,-36.625,-73.689,13.0,4.6,mb,,124,0.6,0.62,us,usb000rx12,14062676299182014-07-24T19:20:14.640+00:00,32.904,-116.268,8.8,3.5,ml,58,47,0.0,0.21,ci,ci15530681,14063160811212014-07-24T18:48:27.300+00:00,10.054,-84.240,10.0,4.0,mb,,177,0.1,0.71,us,usb000rx2l,14066913314562014-07-24T18:06:01.000+00:00,62.093,-149.705,26.0,2.8,ml,,,,0.61,ak,ak11335668,14062541236762014-07-24T17:12:43.200+00:00,17.749,-63.596,136.0,3.6,Md,11,158,0.4,0.17,pr,pr14205002,14062509120502014-07-24T17:10:20.440+00:00,-5.609,145.391,75.2,5.4,mb,,32,4.2,1.07,us,usb000rwxu,14062237322952014-07-24T16:51:15.720+00:00,42.302,144.823,53.8,4.4,mb,,115,1.3,0.88,us,usb000rwxf,14063006190002014-07-24T16:04:30.000+00:00,60.116,-153.306,100.0,3.1,ml,,,,0.95,ak,ak11335609,14062966520002014-07-24T15:44:53.100+00:00,35.731,-121.116,6.5,3.0,Ml,72,97,0.0,0.07,nc,nc72263841,14062956950002014-07-24T15:20:51.800+00:00,35.729,-121.118,6.5,2.7,Md,62,50,0.0,0.07,nc,nc72263801,14062442051652014-07-24T14:49:48.630+00:00,-9.326,115.402,65.3,4.0,mb,,71,1.5,0.77,us,usb000rx2g,14062650860002014-07-24T14:39:46.000+00:00,51.429,-174.641,26.5,3.7,ml,,,,0.50,ak,ak11335546,14062417358572014-07-24T14:30:35.000+00:00,60.080,-153.300,100.0,3.0,ml,,,,0.98,ak,ak11335536,14062411842522014-07-24T11:20:38.000+00:00,63.189,-152.864,1.4,2.7,ml,,,,0.80,ak,ak11335497,14062297843692014-07-24T11:15:58.000+00:00,59.871,-152.873,97.3,2.6,ml,,,,0.54,ak,ak11335475,14062295193292014-07-24T11:08:17.700+00:00,18.679,-67.995,90.0,3.2,Md,11,209,0.4,0.28,pr,pr14205001,14062290499602014-07-24T10:58:08.400+00:00,18.966,-67.850,50.0,3.3,Md,9,241,0.7,0.28,pr,pr14205000,14062284464202014-07-24T10:27:28.000+00:00,35.785,-97.507,6.4,2.7,mb_lg,,107,0.0,0.51,us,usb000rx2j,14062657878612014-07-24T10:14:39.200+00:00,19.430,-155.617,44.7,2.5,Ml,,65,0.0,0.23,hv,hv60738091,14062399978052014-07-24T08:41:06.770+00:00,-9.205,111.534,36.4,5.0,mb,,89,1.6,0.99,us,usb000rwt6,14062144412622014-07-24T08:16:51.650+00:00,-9.316,113.020,37.0,4.5,mb,,79,1.4,1.32,us,usb000rwt4,14062187742222014-07-24T05:21:56.620+00:00,-18.351,-71.426,28.5,4.2,mwr,,155,1.0,0.87,us,usb000rwsh,14062082635332014-07-24T04:49:16.460+00:00,-19.559,168.628,41.8,4.7,mb,,82,3.2,1.16,us,usb000rwsb,14062063043222014-07-24T03:08:18.740+00:00,39.230,81.155,10.0,4.6,mb,,95,3.9,0.56,us,usb000rwrz,14062002546332014-07-24T02:40:49.066+00:00,41.933,-119.647,1.4,3.1,ml,7,119,0.5,0.13,nn,nn00453018,14062219570552014-07-24T02:11:25.900+00:00,37.967,-122.042,12.8,2.5,Md,50,76,0.1,0.10,nc,nc72263481,14067089404902014-07-24T02:05:51.000+00:00,51.837,178.382,111.5,2.6,ml,,,,0.31,ak,ak11335358,14062207309952014-07-24T01:49:46.092+00:00,41.878,-119.638,1.0,2.8,ml,5,123,0.5,0.16,nn,nn00453012,14062268046922014-07-23T23:55:59.500+00:00,46.271,-111.379,9.7,3.6,mc,61,80,0.2,0.20,mb,mb30652,14066425962292014-07-23T22:25:05.500+00:00,19.203,-66.625,25.0,2.8,Md,9,284,0.7,0.15,pr,pr14204006,14061832674942014-07-23T22:13:08.000+00:00,62.394,-147.734,18.9,2.7,ml,,,,0.75,ak,ak11335283,14061564139072014-07-23T21:39:08.040+00:00,-20.244,-68.702,115.0,5.5,mb,,34,0.4,1.20,us,usb000rwqe,14062172590002014-07-23T21:00:46.980+00:00,-21.174,-68.754,135.0,4.2,mb,,46,0.7,0.90,us,usb000rwq1,14061782054732014-07-23T17:57:50.200+00:00,18.783,-67.835,21.0,2.8,Md,4,331,0.5,0.07,pr,pr14204005,14061672233812014-07-23T17:23:59.980+00:00,-6.484,152.682,29.3,4.9,mb,,49,2.3,0.96,us,usb000rwmx,14061651904992014-07-23T16:26:42.700+00:00,48.983,-2.333,2.0,4.0,ml,,,,0.28,us,usb000rwp1,14062382004092014-07-23T15:34:33.400+00:00,18.871,-64.428,29.0,2.7,Md,4,324,0.5,0.10,pr,pr14204004,14061586326502014-07-23T14:20:38.910+00:00,14.185,-91.661,69.5,4.3,mb,,236,0.3,0.92,us,usb000rwke,14061542009092014-07-23T14:03:47.500+00:00,35.879,-97.305,5.1,3.2,ml,,60,,0.36,us,usb000rwk6,14061767189192014-07-23T13:57:23.480+00:00,13.655,144.789,110.3,4.6,mb,,66,0.1,0.54,us,usb000rwsa,14064006273722014-07-23T12:29:07.700+00:00,-19.601,-178.286,597.4,4.3,mb,,123,3.9,1.02,us,usb000rwjh,14061475065642014-07-23T09:57:47.530+00:00,-5.605,-80.878,34.2,4.6,mb,,117,7.5,0.70,us,usb000rwgu,14061115229292014-07-23T06:54:39.716+00:00,41.872,-119.636,0.8,2.6,ml,4,221,0.5,0.18,nn,nn00452926,14061520966972014-07-23T05:52:28.760+00:00,0.389,67.105,10.0,5.0,mb,,131,12.7,0.76,us,usb000rwdr,14061318980002014-07-23T03:48:51.000+00:00,51.258,-174.963,25.7,2.5,ml,,,,0.45,ak,ak11334893,14061357705102014-07-23T03:13:33.000+00:00,51.451,-175.675,27.8,2.5,ml,,,,0.82,ak,ak11334873,14061357740692014-07-23T02:47:23.200+00:00,18.877,-64.527,10.0,2.6,Md,7,306,0.5,0.23,pr,pr14204001,14061125998692014-07-23T02:02:26.580+00:00,35.902,-97.308,5.0,3.3,mb_lg,,41,0.2,0.41,us,usb000rwcu,14061359100152014-07-23T00:28:19.720+00:00,16.905,-100.203,36.1,5.0,mb,,151,1.7,0.80,us,usb000rwc3,14060826732922014-07-23T00:27:01.380+00:00,-20.595,-177.616,472.7,5.0,mb,,87,5.0,0.84,us,usb000rwc5,14061041711022014-07-23T00:25:14.700+00:00,35.834,-97.436,5.0,2.5,mb_lg,,68,0.0,0.39,us,usb000rwdj,14066039829342014-07-22T23:48:34.000+00:00,64.122,-150.147,5.2,2.8,ml,,,,0.74,ak,ak11334697,14061018637422014-07-22T23:46:51.970+00:00,25.748,-110.416,10.0,4.1,mb,,146,2.1,1.34,us,usb000rwbv,14061017740482014-07-22T23:35:14.620+00:00,26.132,89.604,14.7,4.0,mb,,170,2.1,0.80,us,usb000rwbx,14061010710382014-07-22T22:58:31.040+00:00,26.216,89.676,15.0,4.2,mb,,188,2.1,0.89,us,usb000rwbn,14060738692052014-07-22T22:37:12.000+00:00,59.921,-153.501,100.0,2.9,ml,,,,0.98,ak,ak11334633,14060975848222014-07-22T21:56:14.410+00:00,16.844,-100.086,14.5,4.5,mb,,254,1.6,0.84,us,usb000rwb2,14060707348982014-07-22T20:50:13.150+00:00,53.126,-168.530,80.8,3.7,mb,,164,0.2,1.48,us,usb000rwa2,14061240160002014-07-22T20:15:12.010+00:00,51.680,-173.477,36.2,4.1,mb,,177,0.7,1.10,us,usb000rw98,14061235390002014-07-22T17:50:29.800+00:00,36.655,-98.214,4.2,2.6,ml,,101,,1.32,us,usb000rw7l,14061229530002014-07-22T17:28:09.700+00:00,35.814,-97.414,4.2,2.6,ml,,52,,1.04,us,usb000rw7t,14061217880002014-07-22T17:05:43.000+00:00,61.746,-152.113,0.4,2.7,ml,,,,0.82,ak,ak11334458,14060776973532014-07-22T16:14:36.560+00:00,32.286,-115.250,9.7,3.0,ml,13,277,0.1,0.22,ci,ci37249624,14060746370382014-07-22T15:34:36.800+00:00,35.815,-119.882,10.3,2.6,Md,33,230,0.2,0.13,nc,nc72262511,14061478880892014-07-22T15:32:28.000+00:00,51.818,178.400,118.6,2.5,ml,,,,0.35,ak,ak11334388,14060721087682014-07-22T15:30:24.200+00:00,35.827,-119.861,4.8,2.9,Md,63,122,0.3,0.21,nc,nc72262506,14061513644632014-07-22T15:22:38.790+00:00,27.536,57.333,10.0,5.1,mb,,76,2.8,0.65,us,usb000rw57,14060715156302014-07-22T14:56:56.000+00:00,52.833,-169.771,116.7,2.6,ml,,,,0.31,ak,ak11334374,14060699725452014-07-22T14:11:15.300+00:00,-20.298,-176.174,208.2,5.0,mb,,31,6.0,0.84,us,usb000rw4q,14060672280892014-07-22T12:32:55.500+00:00,18.157,-64.232,45.0,2.8,Md,5,320,0.4,0.30,pr,pr14203003,14060613274332014-07-22T10:49:56.090+00:00,12.001,142.357,59.9,5.0,mb,,53,2.9,0.84,us,usb000rw44,14060551467352014-07-22T09:45:09.400+00:00,36.686,-121.316,4.7,2.8,Md,64,29,0.0,0.06,nc,nc72262326,14060617869442014-07-22T09:05:31.000+00:00,59.763,-151.901,47.8,2.5,ml,,,,0.55,ak,ak11334230,14060488856932014-07-22T08:35:04.350+00:00,31.616,-114.464,10.0,2.9,ml,3,248,0.7,0.31,ci,ci37249432,14060470665482014-07-22T08:34:51.040+00:00,31.663,-114.498,10.0,2.5,ml,5,128,0.7,0.20,ci,ci37206365,14060540150822014-07-22T08:04:18.280+00:00,34.242,26.146,27.3,4.8,mb,,149,1.5,1.06,us,usb000rw3d,14060452060032014-07-22T07:11:06.100+00:00,36.686,-121.316,4.9,2.9,Md,63,29,0.0,0.06,nc,nc72262166,14060650880242014-07-22T06:50:31.930+00:00,26.071,-110.144,10.0,4.8,mb,,182,4.1,1.37,us,usb000rw32,14060407791232014-07-22T05:08:38.000+00:00,60.360,-140.289,1.7,2.7,ml,,,,0.71,ak,ak11334117,14060346692682014-07-22T03:03:58.650+00:00,30.654,31.760,5.8,4.3,mb,,238,4.5,1.13,us,usb000rw2e,14060480738592014-07-22T02:16:43.300+00:00,17.794,-68.261,91.0,3.6,Md,12,331,1.1,0.33,pr,pr14203000,14060243661002014-07-22T02:15:07.300+00:00,19.346,-65.155,38.0,2.7,Md,3,335,1.0,0.28,pr,pr14203001,14060242590892014-07-22T02:08:33.290+00:00,35.591,-97.412,5.0,2.6,mb_lg,,52,0.0,0.44,us,usb000rw2y,14060945618722014-07-22T01:23:10.000+00:00,60.345,-140.260,2.2,3.7,ml,,,,0.88,ak,ak11334025,14060211483102014-07-22T00:45:35.000+00:00,67.670,-161.995,14.1,2.9,ml,,,,1.02,ak,ak11334011,14060188841432014-07-22T00:33:01.000+00:00,67.051,-147.955,,2.8,ml,,,,0.82,ak,ak11334005,14060181326292014-07-21T22:04:19.000+00:00,51.905,178.292,119.5,2.7,ml,,,,0.42,ak,ak11333795,14060092097552014-07-21T21:52:36.300+00:00,37.985,-122.047,16.3,2.5,Md,49,72,0.0,0.11,nc,nc72261796,14060056105632014-07-21T21:45:56.630+00:00,35.817,-97.413,5.0,2.9,mb_lg,,85,0.0,0.50,us,usb000rw2v,14060285981582014-07-21T21:27:46.600+00:00,18.770,-64.363,24.0,2.9,Md,5,310,0.7,0.07,pr,pr14202003,14060070280492014-07-21T20:39:50.120+00:00,51.400,-175.037,37.8,4.7,mb,,140,0.9,1.19,us,usb000rvap,14060041507012014-07-21T20:35:56.330+00:00,51.306,-174.991,36.5,4.6,mb,,143,1.0,1.01,us,usb000rvak,14060039039982014-07-21T19:47:28.000+00:00,57.468,-154.446,100.0,2.5,ml,,,,0.96,ak,ak11333674,14060010065692014-07-21T19:37:33.000+00:00,51.305,-174.932,25.6,4.2,ml,,,,0.38,ak,ak11333803,14060004129492014-07-21T19:36:43.860+00:00,51.282,-174.934,10.0,4.8,mb,,77,1.0,0.72,us,usb000rv9m,14060003737022014-07-21T18:50:15.900+00:00,43.666,-121.450,,2.6,Ml,,281,0.1,0.15,uw,uw60823807,14059975626752014-07-21T17:48:01.000+00:00,51.039,178.505,1.5,2.7,ml,,,,0.44,ak,ak11333627,14059938397722014-07-21T17:21:25.200+00:00,18.868,-65.220,45.0,3.1,Md,9,234,0.6,0.15,pr,pr14202002,14059922404852014-07-21T16:49:00.420+00:00,-1.471,-77.647,178.6,4.1,mb,,160,3.5,0.64,us,usb000rv8d,14059902984102014-07-21T14:54:41.000+00:00,-19.829,-178.464,616.4,6.9,mww,,15,3.9,0.88,us,usb000ruzk,14059834362592014-07-21T13:21:45.000+00:00,63.835,-149.309,119.6,3.3,ml,,,,0.88,ak,ak11333469,14059778654272014-07-21T13:02:12.400+00:00,19.067,-66.128,46.0,3.0,Md,5,259,0.9,0.23,pr,pr14202001,14059766875982014-07-21T12:21:26.000+00:00,67.595,-160.935,10.0,3.3,ml,,,,0.89,ak,ak11333451,14059742456322014-07-21T11:22:20.000+00:00,58.272,-151.457,0.3,2.8,ml,,,,0.57,ak,ak11333437,14059706891032014-07-21T10:44:58.000+00:00,61.352,-147.019,12.9,3.0,ml,,,,0.61,ak,ak11333419,14059684529772014-07-21T10:04:19.160+00:00,14.078,-89.687,10.0,4.1,mb,,123,0.4,1.22,us,usb000ruy4,14060100443592014-07-21T09:44:38.000+00:00,50.953,178.843,53.2,2.7,ml,,,,0.35,ak,ak11333391,14059648320142014-07-21T06:01:01.650+00:00,-6.343,152.939,26.9,4.9,mb,,82,2.3,0.73,us,usb000ruxk,14059514114432014-07-21T05:49:25.800+00:00,18.851,-64.342,22.0,2.8,Md,6,310,0.5,0.31,pr,pr14202000,14059507214772014-07-21T05:25:55.500+00:00,19.840,-155.823,17.3,2.5,ml,,173,0.2,0.15,hv,hv60735786,14059785300922014-07-21T03:51:24.238+00:00,41.878,-119.610,,2.7,ml,5,131,0.5,0.14,nn,nn00452622,14059532284342014-07-21T03:29:37.000+00:00,57.280,-135.990,1.0,2.7,ml,,,,0.84,ak,ak11333304,14059423317592014-07-21T02:55:13.090+00:00,32.470,-117.715,10.0,3.2,ml,7,321,0.5,0.19,ci,ci37248888,14059495993462014-07-21T02:40:12.000+00:00,60.426,-150.394,51.8,2.6,ml,,,,1.06,ak,ak11333289,14059393625452014-07-21T02:04:21.000+00:00,50.078,-178.465,19.2,2.7,ml,,,,0.65,ak,ak11333278,14059372108232014-07-21T02:04:08.430+00:00,-49.560,-114.536,10.0,4.9,mb,,118,31.9,0.59,us,usb000ruwr,14059372050522014-07-21T00:21:26.740+00:00,-20.131,-70.632,21.8,4.8,mb,,96,0.6,0.85,us,usb000ruwb,14059310404062014-07-20T23:09:10.960+00:00,-20.465,-178.075,540.0,4.4,mb,,115,4.6,0.90,us,usb000ruw4,14059267047252014-07-20T22:27:11.800+00:00,37.835,-121.785,15.9,2.5,Md,50,126,0.0,0.16,nc,nc72261151,14059784490322014-07-20T21:35:01.000+00:00,50.937,179.584,50.2,3.7,ml,,,,0.47,ak,ak11333151,14059210587762014-07-20T19:48:38.640+00:00,35.511,-116.245,0.7,3.0,ml,17,93,0.3,0.13,ci,ci37248784,14059489689702014-07-20T19:43:22.240+00:00,35.514,-116.242,2.6,3.2,ml,19,93,0.3,0.10,ci,ci37248768,14059649465202014-07-20T18:32:48.460+00:00,44.599,148.748,70.0,6.2,mww,,31,4.4,1.14,us,usb000ruu6,14060371520572014-07-20T18:27:18.000+00:00,59.890,-153.628,100.0,2.9,ml,,,,1.23,ak,ak11332893,14059098011012014-07-20T17:23:33.500+00:00,19.401,-154.986,2.5,2.5,Ml,,180,0.0,0.12,hv,hv60735321,14059879287302014-07-20T16:37:21.000+00:00,63.512,-149.735,100.0,2.7,ml,,,,0.96,ak,ak11332802,14059032159752014-07-20T15:39:04.000+00:00,50.506,179.386,11.3,2.9,ml,,,,1.49,ak,ak11332784,14059127829472014-07-20T15:24:13.980+00:00,-4.781,144.892,93.8,4.9,mb,,59,5.1,0.77,us,usb000ruth,14059126641812014-07-20T15:12:35.900+00:00,40.986,-125.421,3.7,2.8,Md,36,295,1.1,0.19,nc,nc72260986,14060080238872014-07-20T15:03:24.420+00:00,-4.925,144.767,94.4,4.8,mb,,224,5.0,0.73,us,usb000rut8,14059126437292014-07-20T14:18:27.000+00:00,59.561,-153.244,100.0,2.5,ml,,,,0.53,ak,ak11332724,14058948539142014-07-20T14:10:53.660+00:00,7.512,136.799,137.6,4.8,mb,,59,10.0,1.24,us,usb000rut0,14059126268322014-07-20T14:07:49.760+00:00,41.933,35.918,10.0,4.1,mb,,125,1.9,0.93,us,usb000rusy,14059481278282014-07-20T13:30:21.180+00:00,32.134,134.374,26.2,4.6,mb,,65,3.1,0.46,us,usb000russ,14059125750592014-07-20T13:09:24.600+00:00,18.655,-65.030,57.0,2.6,Md,6,241,0.3,0.25,pr,pr14201014,14059126342092014-07-20T12:29:43.600+00:00,-20.473,168.761,51.1,4.8,mb,,88,2.7,0.91,us,usb000rusr,14059125359202014-07-20T12:28:15.600+00:00,36.298,-97.544,6.7,2.9,ml,,58,,0.44,us,usb000rv95,14060343420822014-07-20T12:24:58.090+00:00,37.341,-98.102,4.6,3.3,mb_lg,,39,0.1,0.82,us,usb000rusq,14059124906562014-07-20T12:10:12.370+00:00,-20.465,168.836,44.6,4.8,mb,,91,2.7,1.27,us,usb000rusm,14059124797642014-07-20T11:48:32.000+00:00,57.021,-157.844,100.0,3.1,ml,,,,1.15,ak,ak11332617,14058859087592014-07-20T11:48:18.600+00:00,17.889,-65.426,7.0,2.5,Md,12,173,0.2,0.25,pr,pr14201011,14059124577192014-07-20T11:11:25.200+00:00,40.448,-113.978,9.6,2.5,Ml,,263,0.9,0.24,uu,uu60077902,14059696249092014-07-20T10:19:45.000+00:00,60.410,-140.375,0.1,3.1,ml,,,,0.61,ak,ak11332554,14058805569752014-07-20T10:04:42.700+00:00,18.760,-64.319,31.0,2.7,Md,4,335,0.4,0.03,pr,pr14201013,14059124712902014-07-20T09:51:28.600+00:00,18.858,-64.406,8.0,3.1,Md,6,313,0.5,0.25,pr,pr14201012,14059124617882014-07-20T09:40:19.700+00:00,18.178,-66.916,24.0,2.5,Md,13,94,0.2,0.30,pr,pr14201010,14059123748762014-07-20T09:38:36.000+00:00,51.523,-177.930,21.5,3.3,ml,,,,0.52,ak,ak11332498,14059127846262014-07-20T09:23:30.750+00:00,14.838,-92.500,89.0,5.1,mb,,132,0.8,1.50,us,usb000rurw,14059123603302014-07-20T09:22:14.440+00:00,-40.977,174.098,58.7,4.3,mb,,52,0.5,0.89,us,usb000rurv,14059123908992014-07-20T09:18:21.790+00:00,32.894,-116.274,6.6,3.1,ml,76,48,0.0,0.20,ci,ci37248544,14067223750002014-07-20T08:15:04.210+00:00,37.799,23.972,170.3,4.2,mb,,62,1.7,1.10,us,usb000rurh,14059122411122014-07-20T07:32:16.000+00:00,62.136,-152.086,100.0,2.9,ml,,,,0.67,ak,ak11332415,14058704905872014-07-20T06:31:45.510+00:00,-28.092,-70.978,44.8,4.7,mb,,100,0.1,0.71,us,usb000rur0,14059121683372014-07-20T05:24:03.400+00:00,17.785,-68.362,81.0,2.9,Md,9,338,1.2,0.28,pr,pr14201005,14059121295892014-07-20T04:24:41.500+00:00,19.019,-64.924,38.0,3.0,Md,17,256,0.7,0.31,pr,pr14201002,14059120757402014-07-20T04:18:47.850+00:00,-29.910,-177.333,10.0,5.5,mb,,58,0.8,1.17,us,usb000rupz,14059545660002014-07-20T04:14:03.400+00:00,38.252,-122.328,8.0,2.8,Md,59,76,0.0,0.11,nc,nc72260721,14060857971192014-07-20T03:56:38.900+00:00,17.607,-66.590,45.0,2.9,Md,4,328,0.6,0.14,pr,pr14201004,14059121121182014-07-20T03:06:36.000+00:00,60.281,-140.264,5.0,3.1,ml,,,,0.95,ak,ak11332234,14059122113552014-07-20T02:15:44.000+00:00,60.293,-140.281,13.6,4.8,ml,,,,0.92,ak,ak11332039,14059119089262014-07-20T01:25:33.310+00:00,36.537,140.596,53.3,4.6,mb,,119,1.9,0.66,us,usb000runx,14061599415382014-07-20T00:44:26.400+00:00,18.598,-67.249,82.0,2.8,Md,7,292,0.2,0.14,pr,pr14201000,14059119591222014-07-20T00:24:58.450+00:00,37.224,-97.947,5.5,3.0,mb_lg,,28,0.0,0.92,us,usb000rung,14059117520122014-07-20T00:07:05.630+00:00,36.580,70.321,208.2,4.2,mb,,78,0.6,0.83,us,usb000rune,14059117229302014-07-19T22:21:54.720+00:00,9.819,124.146,10.0,4.7,mb,,94,3.1,1.14,us,usb000run2,14058128597062014-07-19T21:08:15.000+00:00,50.165,178.773,16.9,2.7,ml,,,,0.60,ak,ak11331818,14059126762642014-07-19T19:38:40.500+00:00,19.012,-65.361,31.0,2.6,Md,10,263,0.7,0.12,pr,pr14200009,14058276681132014-07-19T19:28:11.000+00:00,59.621,-154.850,100.0,2.8,ml,,,,1.81,ak,ak11331666,14058270526462014-07-19T18:28:16.800+00:00,19.042,-65.558,33.0,2.6,Md,4,317,0.8,0.09,pr,pr14200008,14060417300002014-07-19T17:06:39.000+00:00,67.580,-161.826,19.3,3.2,ml,,,,0.79,ak,ak11331572,14060412410002014-07-19T16:31:14.279+00:00,41.882,-119.657,1.9,2.5,ml,6,122,0.5,0.19,nn,nn00452450,14058164250672014-07-19T16:26:24.880+00:00,12.547,-89.384,53.0,4.7,mb,,183,1.1,0.99,us,usb000rukz,14058161315042014-07-19T15:59:58.000+00:00,67.632,-161.707,14.4,2.9,ml,,,,0.87,ak,ak11331511,14058145568262014-07-19T15:16:41.000+00:00,60.343,-140.297,0.1,2.8,ml,,,,0.74,ak,ak11331460,14058119533572014-07-19T14:14:01.880+00:00,11.752,57.563,10.0,6.0,mwb,,51,3.6,1.39,us,usb000ruks,14059144900002014-07-19T13:40:12.000+00:00,51.638,178.383,62.9,2.7,ml,,,,0.49,ak,ak11331345,14058061589602014-07-19T13:13:38.270+00:00,-20.667,168.856,46.0,4.8,mb,,102,2.6,1.80,us,usb000ruke,14058045791042014-07-19T13:04:21.370+00:00,-20.607,168.712,35.0,4.7,mb,,101,2.6,0.58,us,usb000ruka,14058040097112014-07-19T12:27:09.270+00:00,-15.799,-174.404,219.8,6.0,mwp,,47,3.2,1.04,us,usb000rujq,14058195920002014-07-19T12:14:59.070+00:00,21.478,103.977,13.0,4.5,mb,,74,0.2,0.72,us,usb000rujk,14058480694672014-07-19T12:04:54.920+00:00,31.901,-115.021,15.0,2.7,ml,7,194,0.6,0.05,ci,ci37206349,14059767456602014-07-19T10:53:55.600+00:00,19.008,-65.590,34.0,3.1,Md,11,256,0.8,0.10,pr,pr14200005,14057961877572014-07-19T10:47:29.200+00:00,19.099,-65.504,33.0,2.7,Md,4,317,0.8,0.02,pr,pr14200007,14057958071102014-07-19T10:45:48.200+00:00,18.983,-65.542,47.0,2.8,Md,6,274,0.7,0.07,pr,pr14200006,14057957008082014-07-19T09:48:00.410+00:00,-20.357,168.647,35.0,4.9,mb,,47,2.7,0.84,us,usb000ruj0,14057922286142014-07-19T09:27:46.220+00:00,48.327,154.681,35.0,4.7,mb,,130,5.2,0.68,us,usb000ruiu,14057910142492014-07-19T09:16:21.160+00:00,41.624,42.058,10.0,4.1,mb,,166,1.1,0.54,us,usb000ruiq,14057903311142014-07-19T09:15:40.000+00:00,51.669,178.450,89.4,2.9,ml,,,,0.41,ak,ak11331180,14057930149942014-07-19T08:44:27.600+00:00,17.966,-68.371,44.0,3.4,Md,19,270,0.5,0.33,pr,pr14200004,14057884232822014-07-19T08:42:28.000+00:00,67.529,-162.036,3.5,3.2,ml,,,,0.85,ak,ak11331172,14057883096402014-07-19T08:30:54.230+00:00,51.823,178.409,107.4,4.4,mb,,41,0.7,1.03,us,usb000ruif,14057929784022014-07-19T07:43:44.590+00:00,-1.202,151.896,18.4,4.7,mb,,114,3.0,1.25,us,usb000rui3,14057847862292014-07-19T07:17:56.420+00:00,36.872,71.129,85.8,5.3,mb,,43,0.5,1.25,us,usb000ruhx,14058157690002014-07-19T06:15:24.450+00:00,-31.788,179.423,428.8,5.1,mb,,58,3.4,1.20,us,usb000ruhg,14057794761312014-07-19T06:09:50.000+00:00,19.615,-65.314,13.0,3.0,Md,3,335,1.3,0.14,pr,pr14200003,14057791399962014-07-19T06:01:25.000+00:00,61.494,-146.526,17.7,2.8,ml,,,,1.03,ak,ak11331078,14057786414552014-07-19T05:37:04.000+00:00,17.539,-94.351,168.8,4.3,mb,,126,2.5,1.10,us,usb000ruhb,14057771816982014-07-19T05:32:55.150+00:00,13.985,-91.446,63.9,4.2,mb,,147,0.6,0.99,us,usb000ruha,14057522093912014-07-19T04:56:50.400+00:00,18.504,-64.810,5.0,2.8,Md,9,212,0.2,0.51,pr,pr14200002,14057747631152014-07-19T03:50:42.100+00:00,18.096,-64.590,127.0,3.0,Md,4,270,0.3,0.07,pr,pr14200001,14057708037442014-07-19T02:45:45.780+00:00,-7.766,126.892,203.6,4.5,mb,,93,3.3,0.79,us,usb000rugn,14057669031312014-07-19T02:24:33.190+00:00,38.492,43.306,10.0,4.0,mb,,157,2.9,1.23,us,usb000rugg,14057656262892014-07-19T01:42:53.160+00:00,36.015,140.239,64.9,4.7,mb,,135,1.7,0.51,us,usb000rufw,14061602387812014-07-18T23:09:33.300+00:00,18.195,-67.323,30.0,2.8,Md,15,263,0.2,0.25,pr,pr14199000,14057539297452014-07-18T21:56:32.500+00:00,35.591,-97.391,6.4,2.7,ml,,46,,0.57,us,usb000ruef,14057354858542014-07-18T21:52:38.087+00:00,41.942,-119.657,0.2,2.6,ml,7,81,0.5,0.19,nn,nn00452413,14059879794472014-07-18T21:32:41.000+00:00,60.381,-140.342,3.0,2.8,ml,,,,0.63,ak,ak11330690,14063242823072014-07-18T21:12:05.000+00:00,57.779,-155.934,8.7,2.7,ml,,,,0.62,ak,ak11330624,14063240781832014-07-18T20:44:40.540+00:00,13.025,-89.820,54.2,4.3,mb,,171,0.9,1.15,us,usb000rudf,14057869953632014-07-18T20:01:28.890+00:00,30.203,32.376,10.0,4.2,mb,,194,4.8,1.24,us,usb000rud7,14060006754772014-07-18T19:11:28.000+00:00,51.706,178.245,109.5,2.5,ml,,,,0.56,ak,ak11330520,14063240796822014-07-18T18:44:26.410+00:00,-20.478,168.743,20.4,5.1,mb,,88,2.7,0.95,us,usb000ru9p,14057837096682014-07-18T18:35:20.000+00:00,51.740,178.515,97.4,2.9,ml,,,,0.31,ak,ak11330609,14063241550582014-07-18T18:23:07.470+00:00,-34.627,-179.590,43.5,5.4,mwb,,24,3.4,0.94,us,usb000ru8u,14057861404752014-07-18T17:49:25.350+00:00,-5.292,151.954,70.2,4.7,mb,,48,1.1,0.90,us,usb000ru87,14057774170002014-07-18T17:19:00.000+00:00,51.810,178.370,103.8,2.5,ml,,,,1.35,us,usb000ru82,14063240673692014-07-18T16:02:12.000+00:00,18.657,-65.186,74.0,2.7,Md,4,230,0.4,0.27,pr,pr14199002,14057466559452014-07-18T14:04:45.000+00:00,57.744,-155.935,1.1,3.9,ml,,,,0.80,ak,ak11330251,14063240630742014-07-18T13:41:13.520+00:00,36.654,-98.141,5.0,3.2,mb_lg,,42,0.2,0.69,us,usb000ru53,14057198786492014-07-18T13:12:54.100+00:00,19.029,-65.127,19.0,3.0,Md,7,252,0.7,0.37,pr,pr14199003,14057489751422014-07-18T12:12:01.000+00:00,67.711,-162.128,10.9,2.9,ml,,,,0.71,ak,ak11330154,14063241328422014-07-18T11:41:45.690+00:00,42.108,144.043,44.8,4.5,mb,,134,0.7,0.71,us,usb000ru49,14057126633662014-07-18T11:05:32.000+00:00,61.691,-152.298,8.0,2.7,ml,,,,0.62,ak,ak11330083,14063242316902014-07-18T10:45:43.200+00:00,18.947,-66.476,68.0,2.7,Md,4,281,0.7,0.09,pr,pr14199007,14057540015152014-07-18T09:18:02.000+00:00,54.394,-161.702,9.9,2.5,ml,,,,0.84,ak,ak11330005,14063241244282014-07-18T09:15:06.700+00:00,19.119,-66.471,42.0,2.6,Md,9,284,0.6,0.14,pr,pr14199006,14057533809302014-07-18T09:01:45.880+00:00,-24.355,-67.944,112.6,4.3,mb,,63,1.7,0.94,us,usb000ru3a,14057030538182014-07-18T08:58:35.360+00:00,-16.199,168.470,35.0,5.2,mb,,59,1.4,0.95,us,usb000ru3d,14057028777672014-07-18T08:56:45.270+00:00,51.602,178.413,104.9,4.1,mb,,173,0.6,0.77,us,usb000ru39,14063242115932014-07-18T08:40:44.000+00:00,49.935,-178.354,46.4,2.5,ml,,,,0.59,ak,ak11337585,14063243672252014-07-18T08:33:37.230+00:00,-17.496,-63.481,42.5,4.5,mb,,93,4.6,0.95,us,usb000ru31,14057013739172014-07-18T08:25:14.000+00:00,63.127,-151.391,8.0,2.8,ml,,,,0.79,ak,ak11329961,14063241203222014-07-18T07:21:20.000+00:00,50.005,178.600,41.3,2.7,ml,,,,0.85,ak,ak11337577,14063243485602014-07-18T06:05:21.700+00:00,40.596,-124.097,17.1,2.5,Md,19,158,0.2,0.10,nc,nc72259481,14057296837812014-07-18T05:46:48.440+00:00,-20.195,-70.890,15.0,4.7,mb,,142,0.8,1.20,us,usb000ru22,14057252900002014-07-18T05:33:26.000+00:00,67.592,-161.764,13.4,4.6,ml,,,,0.77,ak,ak11329859,14063240430602014-07-18T05:30:01.000+00:00,67.586,-161.891,17.3,2.8,ml,,,,0.82,ak,ak11329857,14063241114742014-07-18T05:24:10.300+00:00,-20.157,-70.868,14.4,4.8,mb,,113,0.8,1.19,us,usb000ru1u,14057248600002014-07-18T04:56:53.670+00:00,39.691,143.552,27.7,4.6,mb,,236,2.3,0.38,us,usb000ru1k,14056883642132014-07-18T04:38:50.030+00:00,37.009,142.693,10.0,4.7,mb,,129,3.6,1.01,us,usb000ru1d,14056872776272014-07-18T04:31:53.000+00:00,67.593,-161.997,21.7,3.7,ml,,,,0.82,ak,ak11329811,14056868744932014-07-18T04:29:35.000+00:00,67.617,-161.812,8.5,3.6,ml,,,,0.71,ak,ak11329808,14063240596672014-07-18T03:58:58.770+00:00,38.300,26.628,10.5,4.2,mb,,,,0.94,us,usb000ru16,14056848940722014-07-18T03:42:35.000+00:00,67.636,-161.857,16.4,3.5,ml,,,,0.65,ak,ak11329771,14063240760082014-07-18T03:33:48.200+00:00,18.882,-65.352,77.0,2.8,Md,7,252,0.6,0.15,pr,pr14199005,14057585526252014-07-18T03:29:05.000+00:00,19.390,-66.839,32.0,2.8,Md,3,349,1.0,0.09,pr,pr14199004,14057517606512014-07-18T03:17:22.000+00:00,59.825,-153.371,135.3,2.6,ml,,,,0.55,ak,ak11329741,14063241728482014-07-18T02:58:04.400+00:00,40.592,-124.097,18.2,2.8,Md,24,133,0.2,0.08,nc,nc72259386,14058423651542014-07-18T02:45:49.500+00:00,19.062,-65.409,12.0,3.0,Md,12,245,0.8,0.28,pr,pr14199001,14057416446012014-07-18T02:29:24.000+00:00,67.652,-161.672,7.0,3.0,ml,,,,0.65,ak,ak11329722,14063239959342014-07-18T02:16:10.000+00:00,67.610,-161.501,9.7,2.7,ml,,,,0.66,ak,ak11337511,14063243318012014-07-18T02:01:45.000+00:00,67.632,-161.830,21.2,4.2,ml,,,,0.68,ak,ak11329686,14063241566452014-07-18T02:00:44.000+00:00,67.602,-161.750,8.9,4.2,ml,,,,0.65,ak,ak11329682,14063239989002014-07-18T01:59:37.100+00:00,35.870,-97.317,4.6,2.9,ml,,58,,0.75,us,usb000ru0b,14057356905962014-07-18T01:37:28.390+00:00,36.133,-97.308,3.1,2.8,mb_lg,,31,0.3,0.37,us,usb000ru06,14057247879082014-07-18T01:22:39.610+00:00,38.456,144.417,21.3,4.3,mb,,140,3.7,1.03,us,usb000ru01,14057238400002014-07-18T01:04:57.630+00:00,35.369,-118.555,7.2,2.7,ml,52,49,0.1,0.16,ci,ci15527809,14057000749752014-07-18T00:58:43.000+00:00,51.796,178.389,107.3,2.8,ml,,,,0.45,ak,ak11329504,14063240899602014-07-17T23:54:28.000+00:00,62.363,-149.149,36.5,3.0,ml,,,,0.75,ak,ak11329459,14056461244012014-07-17T23:44:01.000+00:00,60.327,-140.295,13.9,2.6,ml,,,,0.72,ak,ak11329449,14062338411342014-07-17T23:31:52.710+00:00,43.789,-111.086,5.0,3.1,ml,,81,0.2,0.87,us,usb000rtz3,14061314324312014-07-17T23:31:25.000+00:00,19.789,-155.389,23.4,2.6,Ml,,76,0.1,0.11,hv,hv60733846,14056688482332014-07-17T22:53:30.897+00:00,41.943,-119.652,,2.6,ml,7,118,0.5,0.13,nn,nn00452320,14056665634062014-07-17T22:32:49.560+00:00,46.217,150.587,123.7,5.0,mb,,125,5.4,1.39,us,usb000rtyk,14056653181932014-07-17T22:32:32.000+00:00,60.350,-140.345,2.9,2.6,ml,,,,0.87,ak,ak11329361,14062338245752014-07-17T20:51:00.000+00:00,51.771,178.415,102.4,2.7,ml,,,,0.28,ak,ak11329251,14062342332952014-07-17T19:44:35.000+00:00,60.366,-140.269,5.0,3.1,ml,,,,0.87,ak,ak11329151,14062338316522014-07-17T18:45:04.000+00:00,60.374,-140.321,19.7,2.5,ml,,,,0.80,ak,ak11328839,14062338187442014-07-17T18:09:49.000+00:00,60.342,-140.314,1.4,2.6,ml,,,,0.76,ak,ak11328785,14062338010872014-07-17T18:08:38.050+00:00,-6.109,154.366,57.8,5.1,mb,,20,6.4,0.97,us,usb000rtu5,14056494674822014-07-17T17:45:33.000+00:00,65.153,-148.938,15.0,2.8,ml,,,,0.67,ak,ak11328768,14062337853642014-07-17T17:07:42.000+00:00,60.328,-140.284,1.4,3.2,ml,,,,0.90,ak,ak11328731,14056462849682014-07-17T16:08:00.000+00:00,60.311,-140.248,17.2,2.5,ml,,,,0.91,ak,ak11328694,14062337656722014-07-17T15:45:53.190+00:00,32.255,-115.322,20.5,3.1,ml,19,168,0.2,0.36,ci,ci15527633,14056912840002014-07-17T15:35:24.900+00:00,36.677,-98.214,5.0,2.5,ml,,102,,1.08,us,usb000rttd,14056906270002014-07-17T14:36:51.000+00:00,60.315,-140.346,10.0,2.6,ml,,,,0.94,ak,ak11328592,14062337311872014-07-17T14:25:01.000+00:00,60.361,-140.314,18.2,2.6,ml,,,,0.72,ak,ak11328564,14062344843012014-07-17T14:24:34.320+00:00,33.428,-116.425,13.9,3.4,ml,104,21,0.1,0.18,ci,ci15527617,14058266402802014-07-17T14:14:02.000+00:00,60.318,-140.308,16.1,2.7,ml,,,,0.79,ak,ak11328537,14062337126582014-07-17T13:55:55.370+00:00,-3.796,140.068,56.4,5.2,mb,,45,7.9,1.19,us,usb000rtr7,14056343165042014-07-17T13:29:18.000+00:00,51.181,-174.931,28.5,2.5,ml,,,,0.41,ak,ak11335874,14062343065802014-07-17T13:09:26.000+00:00,60.329,-140.349,1.2,3.6,ml,,,,0.88,ak,ak11328363,14062338429872014-07-17T12:17:08.000+00:00,60.335,-140.160,10.0,2.5,ml,,,,1.12,ak,ak11328222,14062338607102014-07-17T12:15:51.000+00:00,61.462,-141.648,10.8,3.0,ml,,,,0.89,ak,ak11328219,14056283141522014-07-17T12:14:16.150+00:00,14.590,-91.995,24.2,4.7,mb,,169,0.3,0.78,us,usb000rtpp,14056282514072014-07-17T12:09:09.000+00:00,60.382,-140.207,10.0,2.6,ml,,,,0.87,ak,ak11335813,14062344090512014-07-17T12:08:26.000+00:00,60.308,-140.373,6.0,3.1,ml,,,,0.97,ak,ak11328175,14062338661102014-07-17T12:05:46.000+00:00,60.391,-140.251,5.6,2.5,ml,,,,0.89,ak,ak11328156,14062337823942014-07-17T11:56:50.000+00:00,60.315,-140.290,8.3,2.8,ml,,,,0.60,ak,ak11335802,14062344680032014-07-17T11:54:50.000+00:00,60.360,-140.302,19.6,3.4,ml,,,,0.77,ak,ak11335801,14062344449982014-07-17T11:53:01.000+00:00,60.374,-140.331,11.6,4.9,ml,,,,0.72,ak,ak11335800,14062342885782014-07-17T11:49:33.000+00:00,60.349,-140.333,10.0,6.0,mb,,,,1.15,ak,ak11328120,14062339032422014-07-17T11:08:16.240+00:00,-21.593,-176.030,108.9,4.7,mb,,43,6.3,1.44,us,usb000rtp3,14056242518502014-07-17T10:40:43.260+00:00,37.102,-97.808,5.0,3.6,mb_lg,,35,0.1,0.49,us,usb000rtnr,14062272648232014-07-17T09:12:27.640+00:00,32.528,-109.062,5.0,3.0,ml,,72,1.1,1.29,us,usb000rtn9,14056606339582014-07-17T08:56:14.000+00:00,51.492,-178.412,25.6,2.5,ml,,,,0.45,ak,ak11328059,14062342123612014-07-17T08:45:56.000+00:00,52.657,-164.144,20.0,2.5,ml,,,,1.19,ak,ak11328044,14062337495452014-07-17T07:34:34.730+00:00,36.302,-97.574,5.9,2.5,mb_lg,,62,0.4,0.56,us,usb000rtmm,14056313043942014-07-17T06:40:35.000+00:00,51.902,178.245,127.7,2.7,ml,,,,0.51,ak,ak11327990,14062338123572014-07-17T06:11:51.000+00:00,22.098,121.494,10.0,5.1,mb,,95,0.8,0.96,us,usb000rtmc,14055908609942014-07-17T04:42:58.910+00:00,14.969,-60.510,53.4,4.4,mb,,109,0.7,0.81,us,usb000rtm0,14060103256892014-07-17T03:48:04.000+00:00,59.875,-153.406,137.0,3.1,ml,,,,0.74,ak,ak11327953,14062336599322014-07-17T03:14:49.000+00:00,53.751,-161.273,20.0,2.8,ml,,,,0.97,ak,ak11335731,14062342511132014-07-17T02:47:04.000+00:00,54.053,-163.488,41.5,2.8,ml,,,,0.65,ak,ak11327940,14062341947552014-07-17T01:01:29.600+00:00,19.343,-155.053,8.4,2.8,Ml,,184,0.1,0.09,hv,hv60733436,14056046517422014-07-17T00:42:43.660+00:00,53.451,161.620,35.0,4.4,mb,,112,1.8,1.24,us,usb000rtkp,14055867209882014-07-17T00:41:04.600+00:00,40.983,-123.914,,2.6,Md,21,148,0.2,0.30,nc,nc72258726,14058902197192014-07-17T00:09:58.600+00:00,35.860,-97.322,5.0,2.6,ml,,57,,0.40,us,usb000rtk5,14058061570002014-07-16T23:36:56.310+00:00,51.905,178.619,94.2,3.9,mb,,147,0.7,0.68,us,usb000rtjr,14058073308972014-07-16T23:02:13.500+00:00,35.524,-97.156,6.8,2.8,ml,,52,,0.19,us,usb000rtjj,14055812431182014-07-16T22:10:06.810+00:00,9.705,-83.639,13.0,4.4,mwr,,197,0.6,1.04,us,usb000rtm8,14055757115472014-07-16T21:15:43.820+00:00,32.086,-115.155,27.3,3.0,ml,12,247,0.2,0.24,ci,ci15527401,14055515780512014-07-16T21:10:45.620+00:00,51.356,179.340,75.0,4.1,mb,,122,0.0,0.62,us,usb000rtic,14055740414622014-07-16T20:03:54.000+00:00,60.219,-153.855,100.0,2.8,ml,,,,3.81,ak,ak11327647,14055699868202014-07-16T19:30:15.600+00:00,36.969,-121.456,5.2,2.8,Md,74,43,0.0,0.08,nc,nc72258416,14056255744792014-07-16T18:55:02.000+00:00,59.821,-152.545,61.0,2.5,ml,,,,0.56,ak,ak11327627,14055658540982014-07-16T18:24:18.240+00:00,-10.032,160.847,10.0,5.2,mwb,,59,1.1,0.65,us,usb000rtfq,14055640130642014-07-16T16:56:10.710+00:00,-10.036,160.798,19.9,5.2,mwb,,40,1.0,0.82,us,usb000rtf2,14055587181632014-07-16T16:52:34.000+00:00,51.820,178.360,102.6,2.5,ml,,,,0.51,ak,ak11327576,14055585168202014-07-16T15:47:11.000+00:00,60.379,-140.358,0.4,3.0,ml,42,65,,0.73,ak,ak11327523,14055545775622014-07-16T15:30:13.830+00:00,43.373,-126.893,27.1,4.6,mwr,,88,2.9,0.85,us,usb000rtdy,14055535669952014-07-16T13:29:51.070+00:00,-24.268,-64.906,50.3,4.0,mb,,88,4.0,0.70,us,usb000rtm5,14055740343042014-07-16T13:09:58.000+00:00,60.345,-140.319,5.0,3.1,ml,,,,0.86,ak,ak11327463,14055453963382014-07-16T11:11:16.120+00:00,-4.182,151.378,10.0,4.8,mb,,51,0.8,0.96,us,usb000rtdf,14055381339482014-07-16T10:58:27.460+00:00,-21.934,-175.543,23.8,5.3,mb,,43,7.3,0.78,us,usb000rtdb,14055488790002014-07-16T09:40:15.120+00:00,29.390,51.287,10.0,4.2,mb,,127,6.2,1.03,us,usb000rtd4,14055325664092014-07-16T09:18:06.340+00:00,36.786,-97.657,4.2,2.5,mb_lg,,64,0.3,0.57,us,usb000rtd2,14055595411402014-07-16T08:33:19.000+00:00,63.344,-149.377,95.0,3.0,ml,75,36,,0.68,ak,ak11327316,14055286282252014-07-16T07:34:31.000+00:00,51.709,178.018,120.4,2.9,ml,14,184,0.4,0.44,ak,ak11327283,14055322047822014-07-16T07:23:41.100+00:00,18.062,-66.376,7.0,2.7,Md,6,194,0.2,0.28,pr,pr14197002,14054976867132014-07-16T05:35:29.100+00:00,18.887,-65.828,46.0,2.9,Md,12,241,0.6,0.27,pr,pr14197001,14055178758672014-07-16T04:53:58.600+00:00,19.016,-65.360,19.0,3.1,Md,14,245,0.7,0.25,pr,pr14197000,14054896966542014-07-16T04:24:08.550+00:00,-20.494,168.863,9.3,5.1,mb,,105,2.7,1.36,us,usb000rtca,14055135988472014-07-16T04:06:36.900+00:00,37.217,86.016,14.3,4.0,mb,,122,7.8,0.48,us,usb000rtc6,14055125515392014-07-16T02:54:17.380+00:00,35.730,-97.181,5.9,2.5,mb_lg,,31,0.1,0.46,us,usb000rtc0,14055393721052014-07-16T02:48:13.710+00:00,-19.415,-177.773,520.4,4.3,mb,,121,4.3,1.04,us,usb000rtc1,14055078556312014-07-16T02:24:28.910+00:00,-17.894,-178.588,584.7,4.4,mb,,81,3.2,0.82,us,usb000rtbr,14055064269372014-07-16T02:08:57.470+00:00,12.200,-87.633,51.5,4.3,mb,,188,0.8,0.69,us,usb000rtbm,14055054894732014-07-16T00:28:54.950+00:00,62.554,-127.802,14.0,4.6,mb,,44,3.9,0.96,us,usb000rtbe,14054995138062014-07-16T00:20:08.620+00:00,62.566,-127.708,15.7,4.5,mb,,57,3.9,1.39,us,usb000rtba,14054989564422014-07-15T23:13:52.710+00:00,52.924,-173.218,195.0,4.2,mb,,141,0.9,0.70,us,usb000rtar,14054950136802014-07-15T22:40:20.000+00:00,18.508,-64.163,14.0,2.7,Md,5,353,0.4,0.23,pr,pr14196003,14054929663292014-07-15T22:29:03.400+00:00,44.587,-114.315,5.3,2.9,mc,48,54,0.0,0.22,mb,mb14983852,14055215560242014-07-15T22:13:20.530+00:00,53.033,-167.616,49.6,5.0,mb,,134,1.1,0.92,us,usb000rta6,14054914473212014-07-15T21:10:09.400+00:00,36.976,-121.461,4.3,3.3,Ml,38,58,0.0,0.06,nc,nc72257966,14056341025252014-07-15T21:09:34.900+00:00,36.975,-121.462,5.1,3.2,Ml,72,43,0.0,0.09,nc,nc72257961,14056330852352014-07-15T18:52:30.000+00:00,59.127,-152.346,84.0,2.6,ml,,,,0.36,ak,ak11326888,14055185590002014-07-15T16:39:00.330+00:00,-4.181,151.326,2.0,5.6,mwb,,34,0.8,0.75,us,usb000rt5g,14057224190002014-07-15T15:27:06.000+00:00,63.584,-147.516,0.4,2.6,ml,,,,0.69,ak,ak11326749,14054672228712014-07-15T15:23:43.050+00:00,28.911,142.131,6.6,5.0,mb,,127,1.8,0.62,us,usb000rt4z,14054667723832014-07-15T13:51:15.590+00:00,35.548,-97.242,6.1,2.7,ml,,,,0.24,us,usb000rtdv,14055211573302014-07-15T12:55:05.850+00:00,56.030,163.100,35.0,4.7,mb,,110,4.0,0.76,us,usb000rt43,14054578679092014-07-15T11:12:23.180+00:00,-19.941,-70.160,36.3,4.4,mb,,139,0.3,0.62,us,usb000rt3l,14054451500002014-07-15T10:56:54.000+00:00,51.811,178.390,107.0,2.5,ml,,,,0.37,ak,ak11326647,14054507656742014-07-15T10:47:54.330+00:00,36.731,-97.727,1.9,3.0,mb_lg,,72,0.3,0.42,us,usb000rt3f,14060331447042014-07-15T10:30:29.890+00:00,-4.144,151.371,10.0,5.8,mb,,35,0.8,1.06,us,usb000rt3b,14055379780002014-07-15T10:03:02.490+00:00,-4.310,151.485,10.0,4.7,mb,,58,0.7,0.83,us,usb000rt31,14054475388772014-07-15T09:44:58.850+00:00,-4.119,151.363,10.0,5.5,mb,,35,0.8,0.95,us,usb000rt2u,14057244240002014-07-15T09:42:56.100+00:00,36.269,-120.358,8.0,2.8,Md,48,112,0.0,0.09,nc,nc72257716,14055485510082014-07-15T09:08:41.040+00:00,35.556,-97.123,11.6,3.9,mb,,18,0.1,0.94,us,usb000rt2i,14065377558632014-07-15T07:19:17.640+00:00,35.530,-97.138,9.5,3.8,mb_lg,,27,0.1,0.49,us,usb000rt1u,14060329402732014-07-15T06:34:44.000+00:00,57.781,-156.202,121.7,3.5,ml,,,,0.72,ak,ak11326562,14054353483372014-07-15T06:07:14.190+00:00,33.592,-115.913,10.0,3.0,ml,79,66,0.0,0.19,ci,ci15526857,14054754429922014-07-15T05:48:11.200+00:00,52.051,160.682,10.0,4.9,mb,,149,1.6,0.87,us,usb000rt1l,14054322538842014-07-15T04:34:54.940+00:00,35.827,-119.845,3.7,2.7,md,50,220,0.2,0.13,nc,nc72257606,14055556245412014-07-15T02:38:00.240+00:00,-0.333,119.775,37.1,4.8,mb,,40,3.0,0.93,us,usb000rt0x,14054209845792014-07-15T02:34:34.000+00:00,51.782,178.427,97.1,2.7,ml,,,,0.45,ak,ak11326560,14054206336482014-07-15T00:20:14.000+00:00,51.788,178.264,127.7,2.6,ml,,,,0.35,ak,ak11326464,14054125616192014-07-14T23:14:30.800+00:00,19.586,-64.563,33.0,3.3,Md,9,317,1.2,0.25,pr,pr14195005,14054086307832014-07-14T22:39:35.464+00:00,41.879,-119.641,13.2,2.7,ml,3,129,0.5,0.04,nn,nn00451935,14055340459562014-07-14T22:35:06.600+00:00,44.096,-121.356,,2.5,Ml,,133,0.0,0.30,uw,uw60817807,14055339896112014-07-14T22:05:50.000+00:00,35.844,-119.780,4.4,2.7,Md,38,90,0.2,0.24,nc,nc72257396,14055780688672014-07-14T21:50:25.200+00:00,18.607,-65.690,75.0,2.6,Md,12,212,0.4,0.11,pr,pr14195004,14054035815112014-07-14T21:03:16.860+00:00,13.560,146.379,15.8,4.8,mb,,67,1.5,0.76,us,usb000rsy6,14054132638672014-07-14T20:50:05.460+00:00,35.825,-119.783,8.5,2.5,md,20,196,0.3,0.17,nc,nc72257371,14055745874702014-07-14T18:20:40.100+00:00,39.317,-123.227,6.4,2.5,Md,26,40,0.1,0.04,nc,nc72257306,14054757082852014-07-14T16:50:14.400+00:00,35.872,-97.309,5.1,3.3,ml,,59,,0.48,us,usb000rsug,14054346421712014-07-14T16:01:35.400+00:00,35.816,-97.415,4.3,2.8,ml,,55,,0.44,us,usb000rstu,14054347482092014-07-14T15:31:04.000+00:00,60.168,-153.891,100.0,2.9,ml,,,,2.81,ak,ak11325841,14053808206752014-07-14T14:50:59.740+00:00,-17.649,-178.439,529.7,4.7,mb,,74,3.3,0.80,us,usb000rssy,14054310900692014-07-14T11:24:39.290+00:00,-17.919,-73.421,33.2,5.5,mb,,138,3.0,1.11,us,usb000rss6,14054554640002014-07-14T10:49:10.670+00:00,35.349,-117.779,2.6,2.7,ml,50,34,0.2,0.13,ci,ci15526481,14055252726902014-07-14T10:37:59.000+00:00,51.732,178.432,98.0,2.5,ml,,,,0.41,ak,ak11325659,14053633156662014-07-14T08:40:55.310+00:00,5.697,126.473,42.3,4.9,mb,,62,1.6,0.91,us,usb000rsri,14053562167532014-07-14T08:17:23.000+00:00,19.752,-64.762,34.0,3.3,Md,4,331,1.4,0.28,pr,pr14195003,14053548044172014-07-14T08:15:10.900+00:00,18.770,-64.625,14.0,2.7,Md,4,288,0.4,0.20,pr,pr14195002,14053546695312014-07-14T08:00:00.590+00:00,5.681,126.570,44.9,6.3,mwc,,51,1.7,1.40,us,usb000rsr5,14057849630002014-07-14T07:29:12.790+00:00,41.976,-119.680,2.1,2.8,ml,3,154,0.5,0.04,nn,nn00451832,14054555093992014-07-14T07:15:51.100+00:00,36.713,-97.888,5.0,3.9,mwr,,88,,0.31,us,usb000rsqv,14066032074752014-07-14T06:40:03.500+00:00,19.176,-64.840,38.0,2.7,Md,4,317,0.8,0.23,pr,pr14195001,14053490496532014-07-14T06:25:34.500+00:00,19.670,-64.832,40.0,3.4,Md,16,277,1.3,0.34,pr,pr14195000,14053480905222014-07-14T06:04:10.000+00:00,61.559,-151.295,4.1,3.3,ml,,,,0.96,ak,ak11325471,14053468498272014-07-14T05:44:15.130+00:00,-26.707,-114.315,10.0,5.2,mb,,176,38.2,1.16,us,usb000rsqm,14053569060002014-07-14T05:05:04.110+00:00,-8.909,111.248,59.5,5.7,mb,,25,1.2,1.40,us,usb000rsqi,14061511290002014-07-14T04:39:08.740+00:00,-6.965,154.752,54.2,4.8,mb,,126,3.8,0.91,us,usb000rsqe,14053417257142014-07-14T03:18:18.310+00:00,-17.753,-176.649,305.3,4.4,mb,,54,6.0,0.81,us,usb000rsq6,14053371256462014-07-14T00:14:35.200+00:00,19.489,-155.126,12.6,2.5,Ml,,83,0.1,0.11,hv,hv60731816,14055282888402014-07-13T23:51:13.490+00:00,36.657,71.004,208.8,4.1,mb,,70,0.6,0.72,us,usb000rspq,14053244220982014-07-13T23:01:31.000+00:00,63.118,-151.515,10.2,3.3,ml,,,,1.49,ak,ak11325292,14053214432702014-07-13T21:57:30.200+00:00,19.430,-155.622,3.7,3.2,Ml,,115,0.0,0.10,hv,hv60731696,14053176086632014-07-13T21:47:25.660+00:00,33.497,-116.505,14.4,2.8,ml,96,25,0.1,0.18,ci,ci15526321,14054388483912014-07-13T21:35:44.600+00:00,18.830,-64.296,15.0,3.0,Md,13,317,0.5,0.10,pr,pr14194003,14053162922582014-07-13T20:54:14.510+00:00,-20.255,-70.351,32.5,5.5,mww,,89,0.3,1.23,us,usb000rsnz,14054525400822014-07-13T20:00:40.940+00:00,-4.139,151.191,35.0,5.6,mb,,59,6.6,1.02,us,usb000rsns,14062134060002014-07-13T19:24:21.000+00:00,60.695,-152.544,125.5,3.3,ml,,,,0.73,ak,ak11325015,14053084177302014-07-13T17:23:56.900+00:00,36.978,-121.465,4.9,3.4,Ml,75,40,0.0,0.08,nc,nc72253275,14054612061742014-07-13T17:19:25.600+00:00,17.963,-68.335,84.0,3.2,Md,7,266,0.5,0.28,pr,pr14194002,14053009567192014-07-13T16:23:43.660+00:00,36.469,67.658,26.1,5.0,mb,,68,2.2,0.80,us,usb000rsmy,14053201439352014-07-13T16:20:50.000+00:00,59.953,-152.653,94.5,2.7,ml,,,,0.62,ak,ak11324859,14052974052352014-07-13T15:22:02.750+00:00,-7.456,155.335,43.9,4.7,mb,,76,4.5,0.80,us,usb000rsn7,14052938697792014-07-13T15:18:56.000+00:00,60.876,-150.029,34.9,2.6,ml,,,,0.86,ak,ak11324799,14052683350362014-07-13T15:17:21.000+00:00,60.837,-150.113,43.9,2.5,ml,,,,0.86,ak,ak11324794,14052935875392014-07-13T15:07:00.470+00:00,-2.187,99.998,41.5,4.9,mb,,179,2.7,0.84,us,usb000rsm9,14052930658332014-07-13T14:51:02.200+00:00,35.859,-97.324,4.8,3.0,ml,,52,,0.43,us,usb000rsm4,14055198585162014-07-13T14:39:26.500+00:00,35.867,-97.316,4.8,2.8,ml,,58,,0.36,us,usb000rsm3,14055196503502014-07-13T14:08:19.470+00:00,2.010,128.304,103.6,4.6,mb,,140,1.5,0.89,us,usb000rsm1,14052894476332014-07-13T13:26:47.980+00:00,37.025,143.447,10.0,4.7,mb,,114,4.2,0.56,us,usb000rslu,14052869682022014-07-13T12:07:05.090+00:00,50.310,178.782,34.9,4.1,mb,,91,1.1,1.09,us,usb000rsll,14052821784002014-07-13T11:55:03.800+00:00,35.520,-97.157,6.7,2.5,ml,,90,,0.60,us,usb000rsus,14054976080772014-07-13T11:43:23.940+00:00,-20.782,-178.133,491.5,4.3,mb,,123,4.7,1.04,us,usb000rslb,14052809243982014-07-13T11:34:50.500+00:00,36.285,-96.955,5.0,2.7,ml,,90,,0.63,us,usb000rsv2,14054972340832014-07-13T11:18:09.380+00:00,40.820,21.165,10.0,4.5,mb,,69,0.2,1.48,us,usb000rsl5,14053970140002014-07-13T08:46:41.760+00:00,-24.072,-69.039,94.7,4.9,mb,,46,0.9,1.07,us,usb000rskf,14059162410002014-07-13T07:18:26.200+00:00,-30.748,-70.670,86.2,5.3,mb,,75,0.1,0.72,us,usb000rsk9,14054643550002014-07-13T07:03:53.950+00:00,35.592,-97.258,5.0,2.8,mb_lg,,36,0.0,0.42,us,usb000rsk5,14052811306002014-07-13T06:46:49.900+00:00,40.664,-122.450,26.0,2.6,Md,14,122,0.1,0.06,nc,nc72253090,14055695481042014-07-13T06:43:10.760+00:00,-34.857,-70.896,92.2,4.5,mb,,57,0.1,0.77,us,usb000rsjz,14052922533802014-07-13T06:08:05.279+00:00,41.952,-119.658,,2.7,ml,6,152,0.5,0.22,nn,nn00451779,14053303218732014-07-13T05:24:38.000+00:00,58.470,-156.188,100.0,2.9,ml,,,,1.63,ak,ak11324539,14052580268642014-07-13T05:20:50.020+00:00,35.528,-97.153,5.0,2.8,mb_lg,,52,0.1,0.58,us,usb000rsjp,14054208492572014-07-13T04:46:12.600+00:00,17.846,-66.761,4.0,2.6,Md,12,230,0.2,0.20,pr,pr14194000,14052557244352014-07-13T04:17:01.800+00:00,19.515,-156.517,40.8,3.2,ml,,284,0.5,1.02,us,usb000rsja,14054661309682014-07-13T03:19:46.000+00:00,36.159,-121.627,10.8,2.5,Md,36,155,0.0,0.09,nc,nc72252975,14054689253992014-07-13T03:16:50.930+00:00,-32.951,-71.466,44.0,5.0,mb,,64,0.4,0.89,us,usb000rsj2,14054561760002014-07-13T03:16:15.000+00:00,19.958,-155.242,15.6,2.9,Ml,,122,0.0,0.09,hv,hv60731231,14054655500002014-07-13T02:08:22.840+00:00,35.892,-97.272,5.0,2.7,mb_lg,,34,0.2,1.01,us,usb000rsiq,14052791308642014-07-13T01:57:44.600+00:00,35.871,-97.312,5.0,2.9,ml,,59,,0.61,us,usb000rsim,14054651880052014-07-13T00:57:57.020+00:00,35.907,-97.272,5.5,2.6,mb_lg,,55,0.2,0.75,us,usb000rsik,14052420347072014-07-13T00:43:44.510+00:00,37.445,-118.536,7.5,2.6,md,30,83,0.1,0.07,nc,nc72252900,14055711059872014-07-12T23:45:15.000+00:00,17.895,-63.936,44.0,2.8,Md,3,349,1.3,0.28,pr,pr14193010,14052378802732014-07-12T23:22:30.310+00:00,-18.596,169.323,264.4,4.9,mb,,29,3.7,0.77,us,usb000rsi5,14052366015862014-07-12T23:20:26.900+00:00,41.846,-119.630,0.1,2.6,Ml,,184,0.5,0.57,uw,uw60815772,14053119587522014-07-12T22:37:11.480+00:00,6.897,-73.053,152.3,4.4,mb,,48,1.0,0.79,us,usb000rshr,14052082287682014-07-12T21:51:46.000+00:00,18.849,-67.076,41.0,2.5,Md,11,256,0.4,0.27,pr,pr14193008,14052308671142014-07-12T21:11:27.910+00:00,24.202,-108.709,10.0,4.3,mb,,184,3.9,1.12,us,usb000rsgy,14052284453762014-07-12T19:58:39.000+00:00,12.804,-88.387,41.9,4.2,mb,,,,1.45,us,usb000rt36,14054207469412014-07-12T18:20:39.960+00:00,-55.294,-27.874,26.7,5.2,mb,,79,5.1,0.79,us,usb000rsf0,14062283950002014-07-12T18:06:22.700+00:00,19.046,-65.044,30.0,2.9,Md,15,256,0.7,0.07,pr,pr14193005,14052173621512014-07-12T17:59:57.000+00:00,67.593,-149.971,6.5,3.1,ml,,,,0.61,ak,ak11323934,14052169597492014-07-12T17:49:17.550+00:00,-55.385,-28.008,5.5,5.5,mwb,,47,5.0,0.73,us,usb000rsej,14062398490002014-07-12T17:34:27.400+00:00,35.856,-97.330,5.0,3.0,mb_lg,,29,0.1,1.16,us,usb000rseb,14051984184102014-07-12T17:11:47.000+00:00,35.874,-97.273,6.2,4.3,mb_lg,,29,0.2,0.69,us,usb000rsdy,14066702128212014-07-12T16:51:43.522+00:00,41.931,-119.664,4.7,3.0,ml,3,150,0.5,0.07,nn,nn00451743,14053792259772014-07-12T16:47:16.900+00:00,35.865,-97.322,4.0,2.9,ml,,54,,0.77,us,usb000rsee,14052125916032014-07-12T16:00:22.960+00:00,39.433,-123.538,4.9,2.8,md,24,128,0.0,0.11,nc,nc72252670,14054487092022014-07-12T14:38:56.110+00:00,37.144,-97.543,5.0,2.7,mb_lg,,141,0.1,0.70,us,usb000rsd2,14053424080782014-07-12T11:27:26.550+00:00,35.873,-97.305,5.0,3.2,mb_lg,,53,0.1,0.43,us,usb000rsc9,14051884883502014-07-12T11:15:33.000+00:00,61.173,-140.155,6.8,4.7,ml,,,,2.15,ak,ak11323596,14051926906062014-07-12T10:59:42.590+00:00,-31.781,-179.976,361.5,4.5,mb,,41,3.1,0.67,us,usb000rsbx,14051925321482014-07-12T10:32:23.000+00:00,57.619,-155.702,14.2,2.6,ml,,,,0.68,ak,ak11323587,14051901036702014-07-12T10:19:23.700+00:00,-8.581,109.239,35.0,4.3,mb,,92,1.4,1.05,us,usb000rsci,14051895966842014-07-12T08:22:25.000+00:00,61.159,-140.316,0.5,2.7,ml,,,,0.58,ak,ak11323535,14051822934372014-07-12T07:59:28.330+00:00,38.159,142.304,35.0,4.4,mb,,138,3.6,1.84,us,usb000rsbi,14051809216742014-07-12T07:16:33.420+00:00,34.274,-117.018,7.3,2.7,ml,101,38,0.0,0.14,ci,ci15525633,14053554686902014-07-12T07:12:53.180+00:00,32.581,-109.085,5.0,3.0,ml,,136,1.1,0.95,us,usb000rsb9,14052134975272014-07-12T06:55:28.980+00:00,-19.720,-69.173,111.1,4.5,mb,,49,0.1,1.04,us,usb000rsb8,14051770881052014-07-12T06:30:33.270+00:00,1.274,97.137,32.9,4.5,mb,,154,0.4,0.47,us,usb000rsb4,14051755955322014-07-12T06:10:06.000+00:00,60.832,-151.083,5.6,2.6,ml,,,,0.69,ak,ak11323486,14051485882162014-07-12T05:10:30.140+00:00,13.692,-91.595,43.6,4.3,mb,,150,0.8,1.18,us,usb000rsaz,14051707831582014-07-12T04:42:33.190+00:00,32.510,-109.171,5.0,2.9,ml,,138,1.2,1.45,us,usb000rsjg,14052286355362014-07-12T04:24:24.000+00:00,60.322,-153.200,24.2,2.5,ml,,,,0.71,ak,ak11323461,14051680245102014-07-12T04:04:18.600+00:00,17.976,-68.990,112.0,3.4,Md,12,317,0.8,0.28,pr,pr14193003,14051668142422014-07-12T02:48:58.960+00:00,32.555,-109.102,5.0,4.1,ml,,101,1.1,0.67,us,usb000rsah,14051982490772014-07-12T01:46:39.000+00:00,59.839,-151.845,35.4,2.5,ml,,,,0.45,ak,ak11323109,14051502906432014-07-12T01:30:30.200+00:00,19.011,-64.985,26.0,3.1,Md,8,256,0.7,0.20,pr,pr14193000,14051576684132014-07-12T00:48:54.000+00:00,67.747,-162.488,10.7,2.9,ml,,,,0.57,ak,ak11323098,14051550951082014-07-11T23:05:26.050+00:00,30.896,86.325,46.6,4.2,mb,,150,4.3,0.65,us,usb000rs8i,14051488833182014-07-11T22:12:13.000+00:00,51.884,178.406,110.3,3.0,ml,,,,0.29,ak,ak11323080,14063318189752014-07-11T21:02:27.800+00:00,36.677,-97.723,5.2,2.5,ml,,152,,0.94,us,usb000rs78,14051414943792014-07-11T19:59:14.650+00:00,37.162,142.217,19.9,4.6,mb,,126,3.3,0.73,us,usb000rs5j,14051740796412014-07-11T19:21:59.310+00:00,37.040,142.425,10.5,6.5,mww,,9,3.4,0.73,us,usb000rs50,14061613002252014-07-11T19:15:48.000+00:00,51.420,-177.488,17.8,2.8,ml,,,,0.26,ak,ak11323050,14063318213802014-07-11T18:36:14.040+00:00,15.716,-92.858,128.6,4.3,mb,,127,0.9,0.95,us,usb000rs3v,14051734488772014-07-11T17:42:27.000+00:00,62.850,-149.499,72.7,2.6,ml,,,,0.74,ak,ak11323039,14063317929232014-07-11T17:37:43.000+00:00,51.798,178.362,135.3,2.5,ml,,,,0.53,ak,ak11323036,14051292128052014-07-11T17:33:21.960+00:00,32.659,-109.130,5.0,3.6,mwr,,80,1.1,0.68,us,usb000rs34,14051724433252014-07-11T17:28:00.400+00:00,18.792,-64.728,18.0,2.9,Md,6,277,0.4,0.20,pr,pr14192003,14051721530002014-07-11T17:25:02.300+00:00,36.627,-116.936,4.6,3.4,ml,20,81,0.1,0.24,ci,ci15525449,14051715810002014-07-11T17:16:39.000+00:00,51.821,178.282,125.5,2.8,ml,,,,0.49,ak,ak11323034,14063318254032014-07-11T16:34:37.720+00:00,-15.201,-177.219,364.6,4.9,mb,,43,5.4,0.81,us,usb000rs2l,14051254395862014-07-11T14:11:30.600+00:00,36.296,-97.545,5.0,2.8,ml,,70,,0.63,us,usb000rs1d,14051168717682014-07-11T13:42:16.000+00:00,61.449,-150.949,70.5,3.6,ml,,,,0.70,ak,ak11323006,14063318487422014-07-11T13:11:46.030+00:00,26.299,125.801,117.5,5.3,mb,,33,2.3,1.11,us,usb000rs0m,14051535074472014-07-11T12:53:26.160+00:00,8.904,-77.885,31.7,4.4,mb,,91,1.9,0.90,us,usb000rs0d,14050881273062014-07-11T12:41:22.590+00:00,32.566,-109.154,5.0,3.5,ml,,81,1.2,0.98,us,usb000rs08,14050909249182014-07-11T12:17:05.650+00:00,36.543,-97.816,1.7,3.3,mb_lg,,66,0.1,0.38,us,usb000rs01,14050922739872014-07-11T12:14:34.900+00:00,36.002,-120.566,4.9,2.6,Md,66,43,0.0,0.08,nc,nc72252010,14051148676032014-07-11T11:54:30.060+00:00,49.106,-2.536,10.3,3.9,mb,,127,3.4,0.73,us,usb000rrzr,14062132328272014-07-11T11:28:08.000+00:00,51.932,-174.018,46.7,2.5,ml,,,,0.34,ak,ak11322982,14063318459222014-07-11T11:15:30.000+00:00,51.785,178.629,88.0,2.9,ml,,,,0.21,ak,ak11322980,14063318122762014-07-11T11:13:56.200+00:00,21.066,-155.898,34.5,3.1,Ml,,241,0.4,0.11,hv,hv60730086,14051121483412014-07-11T10:11:34.300+00:00,18.720,-65.409,49.0,2.5,Md,5,263,0.4,0.07,pr,pr14192001,14051025021692014-07-11T09:46:06.580+00:00,38.525,23.703,10.0,4.6,mb,,64,1.2,0.74,us,usb000rrzc,14051031268092014-07-11T09:30:06.770+00:00,-19.899,-174.420,35.0,4.9,mb,,122,6.5,0.63,us,usb000rrzb,14050999598452014-07-11T09:16:38.000+00:00,50.178,178.632,30.7,2.9,ml,,,,0.59,ak,ak11322978,14063318267022014-07-11T08:58:57.000+00:00,51.816,178.451,97.0,3.4,ml,,,,0.38,ak,ak11322973,14063319054632014-07-11T08:40:54.400+00:00,36.507,71.071,126.1,4.3,mb,,100,0.7,0.77,us,usb000rrz1,14054958271172014-07-11T08:38:19.810+00:00,32.489,-109.137,5.0,2.8,ml,,158,1.1,1.12,us,usb000rrz0,14051395550272014-07-11T07:31:13.000+00:00,51.310,-176.317,25.6,3.2,ml,,,,0.52,ak,ak11322968,14063318295672014-07-11T07:16:32.000+00:00,51.747,178.478,90.6,2.8,ml,,,,0.24,ak,ak11322965,14063318336432014-07-11T06:37:36.700+00:00,35.758,-119.774,23.5,3.2,Ml,55,61,0.2,0.15,nc,nc72251875,14053620198612014-07-11T06:15:55.670+00:00,32.641,-109.112,5.0,3.2,ml,,134,1.1,0.85,us,usb000rryq,14051847770402014-07-11T05:53:26.770+00:00,51.785,178.477,94.3,4.7,mb,,42,0.7,0.93,us,usb000rrym,14051096361912014-07-11T05:22:05.810+00:00,10.082,124.193,10.0,4.4,mb,,134,3.3,0.96,us,usb000rtmb,14063712677692014-07-11T04:58:28.000+00:00,67.662,-163.383,19.3,2.7,ml,,,,0.91,ak,ak11337999,14063318294742014-07-11T04:14:09.610+00:00,36.422,71.125,90.4,4.9,mb,,73,0.8,0.89,us,usb000rryf,14050810726262014-07-11T02:31:46.090+00:00,19.009,-69.264,10.0,4.2,mb,,120,0.2,0.91,us,usb000rry9,14050587046502014-07-11T02:18:07.000+00:00,51.889,178.317,131.5,2.6,ml,,,,0.39,ak,ak11322897,14063318376162014-07-11T00:35:43.500+00:00,19.418,-154.913,48.9,2.7,Ml,,220,0.0,0.10,hv,hv60729851,14050679841542014-07-11T00:07:54.000+00:00,54.690,-163.130,77.7,2.5,ml,,,,0.36,ak,ak11337981,14063318622802014-07-10T21:59:30.400+00:00,32.499,-109.132,5.0,3.6,ml,,82,1.1,0.87,us,usb000rrqt,14051070888042014-07-10T21:53:59.250+00:00,17.759,40.112,14.9,4.5,mb,,85,6.7,0.83,us,usb000rrqs,14050582256672014-07-10T20:54:49.920+00:00,34.036,-117.159,7.6,2.9,ml,35,37,0.0,0.19,ci,ci15524921,14050992224042014-07-10T20:54:42.070+00:00,34.035,-117.158,8.9,2.8,ml,97,23,0.0,0.14,ci,ci15524913,14050440387132014-07-10T20:41:43.650+00:00,33.505,-116.507,15.4,3.2,ml,106,26,0.1,0.19,ci,ci15524873,14056081196832014-07-10T20:30:28.000+00:00,19.337,-155.097,8.8,2.8,Ml,,295,0.3,0.13,hv,hv60236383,14050346291822014-07-10T20:19:20.000+00:00,62.272,-150.397,23.9,2.5,ml,,,,0.73,ak,ak11322613,14050525075682014-07-10T19:24:44.400+00:00,-7.358,156.237,59.8,5.0,mb,,42,4.2,0.58,us,usb000rrmk,14050492344432014-07-10T18:22:39.160+00:00,47.259,-66.968,6.6,2.8,mb_lg,,87,0.6,0.39,us,usb000rrzn,14053181941792014-07-10T18:03:19.600+00:00,18.173,-67.376,18.0,3.0,Md,25,166,0.2,0.28,pr,pr14191005,14050443518882014-07-10T18:01:22.900+00:00,44.563,-114.299,7.0,2.7,mc,32,72,0.0,0.19,mb,mb14124003,14050258388272014-07-10T17:48:49.000+00:00,40.462,-124.699,18.2,2.8,Md,40,241,0.4,0.10,nc,nc72251555,14050465267812014-07-10T12:55:00.300+00:00,14.993,-61.440,167.0,4.4,mb,,103,0.4,1.10,us,usb000rrim,14050286124052014-07-10T11:23:19.100+00:00,18.106,-68.246,68.0,3.3,Md,10,245,0.4,0.40,pr,pr14191004,14050203564072014-07-10T10:47:22.100+00:00,19.138,-64.249,24.0,3.1,Md,10,317,0.8,0.27,pr,pr14191001,14050183522292014-07-10T10:37:14.370+00:00,34.273,-117.018,7.4,2.5,ml,103,38,0.0,0.14,ci,ci15524689,14050175845732014-07-10T10:36:01.200+00:00,19.077,-64.341,30.0,2.9,Md,13,310,0.7,0.23,pr,pr14191000,14050175122422014-07-10T08:58:57.140+00:00,36.795,140.440,30.8,4.7,mb,,113,1.8,1.02,us,usb000rrhw,14061616366852014-07-10T08:37:17.000+00:00,61.514,-141.171,,2.5,ml,,,,0.59,ak,ak11322439,14050103879342014-07-10T07:58:06.590+00:00,36.119,30.183,10.0,4.3,mb,,144,0.7,1.08,us,usb000rrhk,14050081114642014-07-10T07:16:19.140+00:00,-19.973,-175.552,235.3,5.2,mb,,39,5.4,1.25,us,usb000rrhg,14050055289772014-07-10T07:09:47.800+00:00,38.818,-122.820,2.9,2.7,Md,57,29,0.0,0.04,nc,nc72251355,14051115112162014-07-10T05:35:47.130+00:00,36.826,-97.962,1.5,2.7,mb_lg,,83,0.3,0.54,us,usb000rrh4,14049933247592014-07-10T02:59:50.050+00:00,10.227,-85.221,42.4,4.3,mb,,176,0.3,0.88,us,usb000rrgd,14055605967662014-07-10T01:06:07.000+00:00,59.964,-151.782,35.2,2.5,ml,,,,0.70,ak,ak11322227,14049833620832014-07-10T00:40:12.560+00:00,-11.638,164.839,10.0,4.6,mb,,56,4.4,0.50,us,usb000ruag,14058156470002014-07-10T00:23:51.110+00:00,-29.255,-176.728,10.0,4.5,mb,,197,1.1,0.64,us,usb000ruaf,14058136900002014-07-10T00:06:25.700+00:00,-29.834,-177.027,10.0,4.6,mb,,191,1.0,0.97,us,usb000ruae,14058126470002014-07-10T00:02:16.000+00:00,58.350,-154.423,100.0,2.5,ml,,,,0.93,ak,ak11322216,14049794898792014-07-09T23:45:03.810+00:00,40.463,26.224,18.0,4.2,mb,,46,0.5,1.02,us,usb000rrfa,14049574083672014-07-09T22:37:58.000+00:00,58.175,-151.468,34.8,3.1,ml,,,,0.68,ak,ak11322149,14049744310162014-07-09T22:29:23.040+00:00,-41.003,44.567,15.6,4.6,mb,,53,7.6,0.35,us,usb000rucm,14058116539222014-07-09T21:48:04.810+00:00,33.251,-115.982,2.9,3.2,ml,72,44,0.0,0.19,ci,ci15524489,14050335193892014-07-09T21:34:08.000+00:00,64.676,-150.149,1.1,2.5,ml,,,,1.02,ak,ak11322096,14049706878012014-07-09T18:36:23.080+00:00,36.888,-3.922,62.2,4.2,mb,,77,0.2,0.51,us,usb000rrbl,14049694923982014-07-09T17:59:37.500+00:00,19.549,-65.286,90.0,3.3,Md,8,292,1.2,0.18,pr,pr14190005,14049577245042014-07-09T17:58:11.880+00:00,-62.107,164.899,10.0,5.5,mb,,102,8.2,0.88,us,usb000rrb8,14063111110002014-07-09T17:41:41.400+00:00,19.469,-65.322,92.0,3.4,Md,5,274,1.2,0.11,pr,pr14190004,14049566527242014-07-09T17:19:39.300+00:00,-16.902,-71.818,49.6,4.9,mb,,132,2.0,1.12,us,usb000rraf,14049284244252014-07-09T16:25:26.500+00:00,35.882,-97.266,5.2,2.5,ml,,64,,0.40,us,usb000rrac,14049520779442014-07-09T15:17:21.950+00:00,-6.541,147.186,86.6,4.7,mb,,67,2.8,0.42,us,usb000rr92,14049479948562014-07-09T13:35:16.650+00:00,55.062,165.301,35.6,4.9,mb,,69,4.4,0.69,us,usb000rr8k,14049443898342014-07-09T11:14:10.560+00:00,-25.949,179.577,512.0,4.7,mb,,65,8.3,0.65,us,usb000rr87,14049334118872014-07-09T10:08:42.820+00:00,14.797,-92.500,86.5,4.3,mb,,145,1.5,0.69,us,usb000rr7w,14049162464482014-07-09T09:07:54.870+00:00,14.861,-92.502,67.8,4.2,mb,,175,1.5,0.99,us,usb000rr7t,14049258282012014-07-09T08:33:55.960+00:00,-19.992,-177.800,567.8,4.8,mb,,101,4.5,0.84,us,usb000rr7k,14049237945912014-07-09T08:15:21.020+00:00,32.577,-109.092,5.0,3.6,mwr,,55,1.1,0.81,us,usb000rr77,14049550896972014-07-09T08:12:34.170+00:00,-55.253,-28.312,10.0,4.8,mb,,117,4.8,0.56,us,usb000rr7d,14049227114222014-07-09T07:04:47.700+00:00,36.434,-116.933,8.7,3.6,ml,17,61,0.1,0.16,ci,ci15524177,14051263963732014-07-09T06:42:39.800+00:00,35.663,-121.063,5.5,2.6,Md,63,104,0.1,0.08,nc,nc72250745,14049584469482014-07-09T06:32:56.000+00:00,59.757,-152.792,4.9,2.6,ml,,,,0.78,ak,ak11321630,14049165243642014-07-09T06:03:08.240+00:00,-9.652,111.561,36.7,4.7,mb,,63,2.0,0.74,us,usb000rr6k,14049147344762014-07-09T05:27:32.600+00:00,20.050,-155.472,50.0,2.5,Ml,,180,0.2,0.11,hv,hv60728816,14049355680902014-07-09T03:23:17.600+00:00,17.949,-68.153,101.0,2.9,Md,6,248,0.6,0.28,pr,pr14190002,14049051554732014-07-09T02:22:48.000+00:00,68.705,-146.747,17.1,2.8,ml,,,,0.57,ak,ak11321576,14049015169292014-07-09T02:10:04.290+00:00,37.098,-97.774,1.2,3.4,mb_lg,,88,0.1,0.54,us,usb000rr5h,14049595504572014-07-09T01:45:32.700+00:00,36.555,-121.152,6.5,2.8,Md,53,32,0.0,0.06,nc,nc72250655,14049356460842014-07-09T01:44:43.100+00:00,36.555,-121.152,6.9,2.9,Md,59,32,0.0,0.08,nc,nc72250650,14049338476842014-07-09T00:14:35.620+00:00,34.089,-97.418,5.0,2.7,mb_lg,,51,0.6,0.80,us,usb000rr53,14048938482372014-07-09T00:01:30.270+00:00,-7.079,104.708,22.6,5.1,mb,,74,3.1,1.10,us,usb000rr51,14049564060002014-07-08T23:41:45.000+00:00,58.069,-156.817,,2.5,ml,,,,0.75,ak,ak11321538,14048918679822014-07-08T22:57:14.080+00:00,29.859,-116.381,10.0,4.2,mb,,199,2.8,1.16,us,usb000rr4r,14048893477862014-07-08T22:56:12.600+00:00,20.080,-155.458,2.2,2.8,Ml,,194,0.2,0.18,hv,hv60728511,14049374791082014-07-08T21:52:49.170+00:00,39.326,78.168,15.5,5.0,mb,,66,3.1,1.03,us,usb000rr42,14048853244702014-07-08T20:10:00.990+00:00,-3.324,143.308,16.7,5.4,mb,,15,7.2,0.93,us,usb000rr27,14049266575512014-07-08T19:56:06.030+00:00,-19.321,-69.468,98.3,4.0,ml,,96,0.2,0.72,us,usb000rr20,14049243013362014-07-08T19:38:50.600+00:00,41.512,-108.831,-3.3,3.0,Ml,,104,1.1,0.28,uu,uu60076732,14050078404412014-07-08T19:29:35.000+00:00,51.914,178.433,126.9,2.6,ml,,,,0.36,us,usb000rr4x,14049227078622014-07-08T19:17:26.600+00:00,35.582,-97.283,4.4,2.9,ml,,52,,0.82,us,usb000rr2b,14049204820192014-07-08T18:55:56.360+00:00,12.147,-87.747,71.0,4.2,mb,,193,0.9,0.71,us,usc000rrt9,14049192136582014-07-08T18:42:04.700+00:00,18.535,-65.016,40.0,2.6,Md,3,270,0.2,0.20,pr,pr14189006,14048738724022014-07-08T18:18:43.370+00:00,36.594,77.308,87.1,4.5,mb,,43,4.4,0.89,us,usc000rrsm,14049168186032014-07-08T17:41:50.900+00:00,34.065,-97.471,5.0,2.9,ml,,136,,1.34,us,usc000rrs3,14049194955972014-07-08T17:31:16.340+00:00,4.862,96.112,8.0,4.7,mb,,82,0.9,1.38,us,usc000rrrt,14049144745332014-07-08T16:20:21.050+00:00,32.885,-115.901,10.0,2.5,ml,50,38,0.1,0.28,ci,ci15523689,14048653756382014-07-08T16:04:20.000+00:00,-20.777,-70.521,37.9,4.9,mb,,,,1.28,us,usc000rrr0,14050291352522014-07-08T15:49:40.000+00:00,-21.262,-68.909,126.9,4.5,mb,,,,0.86,us,usc000rrqs,14050298894582014-07-08T15:46:57.490+00:00,50.974,178.585,164.2,4.2,mb,,215,0.6,0.69,us,usc000rrqq,14050303721292014-07-08T15:35:40.970+00:00,36.258,73.972,66.5,4.8,mb,,50,2.7,0.70,us,usc000rrqp,14048427714382014-07-08T15:08:33.600+00:00,36.758,-98.051,5.0,2.8,ml,,99,,0.55,us,usc000rrqu,14048616958282014-07-08T14:43:31.580+00:00,51.939,178.447,113.3,4.8,mb,,31,0.8,0.74,us,usc000rrq3,14048595691382014-07-08T14:35:40.330+00:00,-33.072,-178.507,10.0,4.9,mb,,68,3.8,0.60,us,usc000rrq2,14048591354112014-07-08T13:43:02.000+00:00,57.702,-142.800,1.9,3.0,ml,,,,0.80,ak,ak11320817,14048559443292014-07-08T13:41:28.900+00:00,-5.547,147.311,191.7,4.3,mb,,62,3.8,0.85,us,usc000rrmx,14048558383432014-07-08T13:33:31.860+00:00,-20.616,-178.290,576.4,4.6,mb,,68,4.5,0.73,us,usc000rrmv,14048554630662014-07-08T13:25:26.360+00:00,-33.917,-72.410,14.3,4.8,mb,,140,1.2,0.53,us,usc000rrmp,14050262290442014-07-08T12:56:26.740+00:00,-17.617,168.359,114.0,6.3,mwp,,56,2.4,0.88,us,usc000rrmg,14063174490002014-07-08T12:39:21.080+00:00,33.875,-119.413,15.4,2.6,ml,31,94,0.2,0.40,ci,ci15523569,14048920535982014-07-08T12:31:46.080+00:00,33.162,-115.647,1.9,3.2,ml,61,39,0.0,0.23,ci,ci15523545,14048364269672014-07-08T11:38:17.200+00:00,18.632,-63.714,12.0,3.1,Md,6,353,0.9,0.17,pr,pr14189004,14048484482652014-07-08T11:10:25.550+00:00,-17.578,-174.688,157.7,4.4,mb,,64,4.6,0.75,us,usc000rrln,14048467793592014-07-08T09:05:23.110+00:00,42.681,141.411,10.0,5.5,mwb,,59,1.5,1.39,us,usc000rrl0,14049057545002014-07-08T09:01:29.700+00:00,36.695,-121.327,4.6,3.1,Ml,64,29,0.0,0.06,nc,nc72249790,14048592672152014-07-08T08:18:13.290+00:00,37.652,-118.851,7.2,2.7,md,16,91,0.0,0.04,nc,nc72249590,14049426691282014-07-08T08:17:47.100+00:00,36.696,-121.329,5.1,3.2,Ml,64,29,0.0,0.05,nc,nc72249575,14067208960002014-07-08T08:16:45.800+00:00,18.901,-65.362,5.0,2.8,Md,5,284,0.6,0.15,pr,pr14189003,14067206180002014-07-08T08:15:02.300+00:00,18.918,-67.508,120.0,2.9,Md,6,227,0.8,0.34,pr,pr14189002,14067204590002014-07-08T07:44:10.280+00:00,-16.666,-177.238,408.1,4.2,mb,,117,4.6,0.83,us,usb000rv5h,14067203230002014-07-08T07:30:59.180+00:00,51.554,179.935,6.6,2.8,ml,,,,0.90,us,usb000ry2l,14067199600002014-07-08T07:28:57.060+00:00,-1.175,-77.201,10.0,4.4,mb,,84,3.4,1.45,us,usb000rv6k,14067198110002014-07-08T07:18:03.400+00:00,18.551,-66.940,18.0,2.9,Md,13,216,0.2,0.20,pr,pr14189001,14067190980002014-07-08T06:25:51.320+00:00,34.277,-117.024,7.4,2.6,ml,97,42,0.0,0.14,ci,ci15523409,14048377672692014-07-08T05:31:15.200+00:00,36.768,-121.478,7.0,3.2,Ml,72,29,0.0,0.13,nc,nc72249120,14048820745112014-07-08T04:33:33.130+00:00,27.742,142.848,29.7,4.8,mb,,126,0.9,0.75,us,usc000rrj2,14048230399412014-07-08T02:13:07.770+00:00,-59.247,148.879,10.0,4.9,mb,,120,16.4,1.06,us,usc000rrim,14048145366242014-07-08T01:23:23.220+00:00,-7.069,129.934,132.3,5.0,mb,,70,1.6,1.26,us,usc000rrid,14048116339032014-07-08T00:16:47.574+00:00,39.199,-119.730,9.7,3.2,ml,35,64,0.0,0.16,nn,nn00451213,14052099413362014-07-07T23:06:05.110+00:00,23.337,122.374,10.0,5.0,mb,,107,1.0,0.84,us,usc000rrhb,14048033166822014-07-07T23:02:36.100+00:00,-49.262,164.724,24.8,4.4,mb,,165,3.4,1.16,us,usc000rrha,14048031418562014-07-07T22:19:38.410+00:00,34.034,-117.157,8.7,2.5,ml,96,35,0.0,0.15,ci,ci15523137,14050081039022014-07-07T22:04:24.000+00:00,60.461,-151.451,43.1,2.7,ml,,,,0.67,ak,ak11320303,14047996136722014-07-07T21:49:01.200+00:00,35.569,75.104,48.7,4.3,mb,,83,2.4,0.61,us,usc000rrfn,14052336307282014-07-07T20:48:48.480+00:00,53.893,-160.912,10.0,4.8,mb,,159,1.5,0.88,us,usc000rre6,14047953998102014-07-07T18:04:35.730+00:00,-5.210,131.683,59.7,5.0,mb,,56,2.3,0.77,us,usc000rrau,14048622755622014-07-07T17:45:12.900+00:00,34.277,-117.025,8.2,2.5,ml,89,39,0.0,0.15,ci,ci15523049,14047727288962014-07-07T15:50:07.890+00:00,47.481,151.044,85.9,4.5,mb,,160,6.8,0.75,us,usc000rr93,14047771534652014-07-07T15:48:39.700+00:00,18.443,-64.109,47.0,2.7,Md,4,349,0.5,0.02,pr,pr14188010,14047771311472014-07-07T15:09:25.710+00:00,-24.087,-67.494,227.7,4.3,mb,,130,2.0,0.48,us,usc000rr8g,14047748951722014-07-07T14:38:21.500+00:00,34.070,-97.475,7.4,3.2,ml,,136,,0.55,us,usc000rr8a,14047719974642014-07-07T14:02:30.700+00:00,19.415,-155.397,10.5,2.5,Ml,,61,0.1,0.08,hv,hv60727266,14050249610002014-07-07T13:59:52.050+00:00,34.087,-97.488,7.4,2.5,ml,,,,0.49,us,usb000rrne,14050245308312014-07-07T13:59:40.800+00:00,36.211,-97.549,5.0,2.5,ml,,47,,0.39,us,usc000rr7z,14050237466872014-07-07T13:48:09.800+00:00,36.091,-97.015,5.0,2.6,ml,,46,,0.55,us,usb000rr6h,14050236638522014-07-07T13:28:25.600+00:00,37.652,-118.852,7.2,2.5,Md,28,90,0.0,0.03,nc,nc72251726,14050160456232014-07-07T13:23:37.480+00:00,-11.352,161.331,40.0,4.7,mb,,52,2.3,0.71,us,usc000rr81,14047683800742014-07-07T12:48:09.600+00:00,19.463,-65.656,54.0,3.1,Md,3,331,1.2,0.15,pr,pr14188009,14047662375602014-07-07T12:46:01.200+00:00,37.653,-118.853,7.3,2.6,Md,28,68,0.0,0.03,nc,nc72251611,14049638471162014-07-07T12:32:08.100+00:00,37.655,-118.852,7.6,2.6,Md,29,94,0.0,0.03,nc,nc72251536,14048715649262014-07-07T12:27:11.620+00:00,37.649,-118.851,7.6,2.9,md,24,112,0.0,0.04,nc,nc72251511,14048501453682014-07-07T11:23:55.430+00:00,14.742,-92.409,60.0,6.9,mww,,30,0.7,1.16,us,usc000rr6a,14060040385472014-07-07T10:29:56.200+00:00,37.652,-118.853,7.8,2.8,Ml,29,94,0.0,0.04,nc,nc72251181,14049373894142014-07-07T10:07:13.500+00:00,19.167,-67.977,64.0,3.9,Md,26,248,0.8,0.36,pr,pr14188004,14047568266562014-07-07T10:01:16.900+00:00,19.167,-67.981,65.0,2.9,Md,7,259,0.8,0.60,pr,pr14188008,14047564090262014-07-07T09:20:48.900+00:00,19.215,-67.965,24.0,3.3,Md,20,252,0.8,0.28,pr,pr14188006,14047538909922014-07-07T09:15:28.710+00:00,-7.318,123.725,551.6,5.2,mb,,30,2.0,0.98,us,usc000rr4d,14047534858302014-07-07T08:51:05.540+00:00,34.276,-117.026,8.6,3.0,ml,126,39,0.0,0.16,ci,ci15522785,14048095480562014-07-07T07:44:15.420+00:00,36.684,-98.094,11.1,3.0,mb_lg,,57,0.2,0.95,us,usc000rr3x,14047480159902014-07-07T07:13:07.000+00:00,19.628,-68.469,93.0,3.7,Md,17,324,1.7,0.36,pr,pr14188005,14047462128632014-07-07T06:25:17.200+00:00,37.651,-118.852,7.5,2.7,Md,30,115,0.0,0.04,nc,nc72250641,14049532258792014-07-07T05:56:16.500+00:00,44.090,-114.552,10.7,2.8,mc,34,108,0.4,0.22,mb,mb14584805,14047530432192014-07-07T05:49:08.600+00:00,18.909,-66.876,5.0,2.6,Md,4,342,0.5,0.15,pr,pr14188003,14047410951572014-07-07T03:56:01.990+00:00,36.023,-97.099,8.1,2.6,mb_lg,,51,0.3,0.50,us,usc000rr3k,14047905295882014-07-07T03:52:09.910+00:00,36.845,-98.081,2.5,2.5,mb_lg,,52,0.3,0.61,us,usc000rr39,14047342167862014-07-07T03:27:10.200+00:00,19.174,-67.667,20.0,2.6,Md,5,274,0.9,0.05,pr,pr14188000,14047568231332014-07-07T02:40:41.760+00:00,42.037,142.672,81.7,4.5,mb,,120,0.4,0.47,us,usc000rr31,14047245331262014-07-07T01:37:10.390+00:00,-15.589,-71.376,157.2,4.6,mb,,120,2.9,1.12,us,usc000rr2r,14047259787862014-07-07T01:13:31.000+00:00,52.846,-162.662,118.2,2.7,ml,,,,0.40,ak,ak11319334,14047245733372014-07-07T00:38:16.000+00:00,36.089,-97.016,4.1,2.5,ml,,73,,0.53,us,usc000rraj,14048840424752014-07-06T22:11:34.590+00:00,-20.983,174.174,44.0,4.8,mb,,119,4.9,0.97,us,usc000rr1y,14047510100002014-07-06T19:28:40.680+00:00,39.080,142.395,66.7,4.4,mb,,189,3.0,0.55,us,usc000rr0x,14047038836252014-07-06T19:21:19.000+00:00,52.501,-162.378,11.2,2.9,ml,,,,0.54,ak,ak11319090,14047069461402014-07-06T18:54:10.000+00:00,53.434,-166.695,67.2,3.0,ml,,,,0.40,ak,ak11319075,14047018091162014-07-06T17:08:38.000+00:00,-10.339,-11.850,10.0,4.9,mb,,132,18.3,0.69,us,usc000rr02,14046954651102014-07-06T17:05:21.000+00:00,60.652,-151.199,72.5,2.5,ml,,,,0.88,ak,ak11318964,14046952745982014-07-06T16:19:27.480+00:00,47.697,147.534,402.5,4.4,mb,,93,3.3,0.70,us,usc000rqzl,14049123160742014-07-06T16:07:54.960+00:00,3.630,122.875,546.6,4.7,mb,,52,4.4,0.60,us,usc000rqzg,14046918209392014-07-06T15:54:12.400+00:00,44.592,-110.721,9.4,2.5,Ml,,65,0.1,0.16,uu,uu60076177,14050229420002014-07-06T15:46:12.400+00:00,44.584,-110.719,-0.1,2.5,Ml,,79,0.1,0.11,uu,uu60076142,14050223570002014-07-06T15:43:56.800+00:00,36.754,-98.042,5.0,2.8,ml,,98,,0.55,us,usb000rrkc,14050183466812014-07-06T15:37:43.030+00:00,-19.896,-177.746,552.7,5.0,mb,,75,4.5,0.61,us,usc000rqyz,14046900196832014-07-06T15:22:05.600+00:00,36.727,-97.893,5.0,3.1,ml,,89,,0.51,us,usc000rqyv,14049126071572014-07-06T14:48:14.140+00:00,30.566,80.265,75.5,4.2,mb,,168,6.7,1.05,us,usc000rqyt,14046870552942014-07-06T13:26:25.700+00:00,11.872,-87.146,38.7,4.3,mb,,186,0.8,0.60,us,usc000rqyr,14046821379712014-07-06T12:43:26.300+00:00,18.196,-67.695,93.0,3.1,Md,13,184,0.3,0.28,pr,pr14187008,14067189330002014-07-06T12:22:34.640+00:00,-18.427,-69.686,132.2,4.1,mb,,74,0.6,1.17,us,usc000rqzx,14060337860002014-07-06T12:13:38.120+00:00,-25.170,-175.109,29.6,4.6,mb,,100,4.8,1.39,us,usb000rv1g,14067188323162014-07-06T11:42:45.170+00:00,10.334,-85.116,68.8,5.0,mwr,,68,0.2,1.42,us,usc000rqyh,14060336585752014-07-06T11:36:58.000+00:00,63.285,-151.132,18.4,2.8,ml,,,,0.65,ak,ak11318763,14067183210002014-07-06T11:32:04.160+00:00,-55.372,-28.056,10.0,4.1,mb,,96,5.0,0.26,us,usb000rv24,14067180160002014-07-06T10:24:00.060+00:00,-13.336,167.281,195.4,4.2,mb,,164,2.1,0.88,us,usb000rv1m,14067126825282014-07-06T10:15:52.000+00:00,19.190,-104.540,54.0,4.0,mb,,,,1.35,us,usc000rqy2,14067209500002014-07-06T10:13:37.230+00:00,-15.575,167.413,57.3,4.7,mb,,75,0.2,1.13,us,usc000rqy3,14060326260002014-07-06T10:07:54.700+00:00,18.628,-64.305,20.0,2.8,Md,7,335,0.4,0.10,pr,pr14187006,14067123160002014-07-06T09:36:14.320+00:00,-29.735,-177.051,7.8,4.4,mb,,199,0.9,1.44,us,usb000rv1e,14067121180002014-07-06T08:44:48.500+00:00,18.859,-64.346,15.0,2.6,Md,4,331,0.5,0.17,pr,pr14187005,14046652497262014-07-06T08:26:20.000+00:00,18.704,-64.950,59.0,2.6,Md,5,245,0.4,0.09,pr,pr14187007,14046641421012014-07-06T08:19:30.300+00:00,19.119,-66.790,23.0,3.2,Md,27,216,0.7,0.25,pr,pr14187004,14046637659512014-07-06T06:33:45.230+00:00,12.728,-88.278,68.4,4.2,mb,,87,1.2,0.73,us,usc000rqxf,14046573804142014-07-06T05:47:43.400+00:00,12.814,-90.392,35.0,4.2,mb,,211,1.4,1.07,us,usc000rqxe,14046546163332014-07-06T05:44:45.400+00:00,18.872,-64.357,5.0,2.8,Md,13,299,0.5,0.28,pr,pr14187003,14046544312242014-07-06T05:21:02.260+00:00,-19.036,-172.540,34.6,4.7,mb,,125,5.2,0.68,us,usc000rqx9,14046530113232014-07-06T04:24:56.520+00:00,32.531,-109.162,5.0,3.5,ml,,101,1.2,0.65,us,usc000rqwx,14049193983782014-07-06T04:20:22.770+00:00,3.381,92.741,28.1,4.2,mb,,209,4.6,0.51,us,usc000rqwy,14046493789272014-07-06T04:15:00.280+00:00,38.120,89.802,10.0,4.0,mb,,84,5.9,1.15,us,usc000rqwu,14046491368862014-07-06T04:10:46.560+00:00,36.735,-97.742,5.0,3.2,mb_lg,,51,0.3,0.77,us,usc000rqwr,14046236652012014-07-06T04:10:27.200+00:00,18.806,-64.229,7.0,3.1,Md,8,324,0.5,0.30,pr,pr14187001,14046488718252014-07-06T03:52:03.300+00:00,18.175,-67.902,126.0,3.2,Md,14,202,0.6,0.49,pr,pr14187000,14046476778392014-07-06T03:08:47.400+00:00,-14.641,-71.220,61.2,5.0,mb,,114,3.4,1.04,us,usc000rqwm,14046452217092014-07-06T02:42:20.800+00:00,18.572,-63.779,31.0,3.1,Md,4,353,0.8,0.23,pr,pr14187002,14046434957622014-07-06T01:44:18.870+00:00,36.219,-97.522,5.0,3.3,mb_lg,,30,0.2,0.43,us,usc000rqwg,14046198647482014-07-06T00:54:56.800+00:00,36.138,-117.966,4.7,3.4,ml,30,63,0.1,0.10,ci,ci15521601,14046621788462014-07-05T23:57:12.430+00:00,3.749,127.668,77.3,4.4,mb,,121,3.0,0.61,us,usc000rqw0,14046336540992014-07-05T23:28:39.000+00:00,51.619,-178.293,13.0,2.9,ml,18,184,,0.58,ak,ak11318424,14057343815452014-07-05T22:42:44.000+00:00,51.807,178.390,115.6,2.5,ml,8,259,,0.16,ak,ak11318379,14057343784032014-07-05T22:22:41.000+00:00,51.756,178.420,98.6,3.2,ml,20,169,,0.70,ak,ak11318362,14057342574802014-07-05T21:41:38.630+00:00,33.693,35.217,14.8,4.1,mb,,176,2.0,0.83,us,usc000rqvn,14046485732092014-07-05T21:04:19.000+00:00,61.903,-147.525,15.1,2.8,ml,65,40,,0.74,ak,ak11318258,14057342535552014-07-05T20:37:26.000+00:00,57.521,-152.121,6.1,2.6,ml,20,202,,0.72,ak,ak11318239,14057342521092014-07-05T20:22:56.410+00:00,42.136,142.987,59.3,4.8,mb,,49,0.2,0.73,us,usc000rqvb,14046277235652014-07-05T19:30:07.430+00:00,32.630,-109.104,5.0,3.2,ml,,134,1.1,0.57,us,usc000rqv2,14046247622982014-07-05T19:05:46.130+00:00,36.133,-117.967,4.6,3.0,ml,30,67,0.1,0.10,ci,ci15521265,14047649464502014-07-05T17:20:16.000+00:00,51.796,178.519,106.6,3.6,ml,28,162,,1.12,ak,ak11318060,14057343318712014-07-05T17:16:07.000+00:00,51.834,178.428,112.0,2.6,ml,11,252,,0.19,ak,ak11330938,14057343224312014-07-05T17:02:30.200+00:00,18.792,-67.359,13.0,3.1,Md,25,212,0.4,0.15,pr,pr14186004,14046093310902014-07-05T17:01:23.010+00:00,34.279,-117.019,10.0,2.6,ml,35,61,0.0,0.13,ci,ci15521001,14046651933632014-07-05T17:00:26.490+00:00,34.274,-117.018,9.5,3.4,ml,60,42,0.1,0.24,ci,ci15520993,14050420071762014-07-05T16:59:34.070+00:00,34.280,-117.028,8.7,4.6,mw,149,37,0.0,0.13,ci,ci15520985,14067539573932014-07-05T16:39:24.000+00:00,51.810,178.500,107.9,2.6,ml,13,230,,0.39,ak,ak11318009,14057342972682014-07-05T15:42:35.000+00:00,59.758,-152.787,83.8,2.6,ml,63,90,,0.61,ak,ak11317953,14057342344862014-07-05T15:31:51.700+00:00,41.488,-108.790,-2.4,2.6,Ml,,101,1.1,0.33,uu,uu60075992,14049313046242014-07-05T15:10:57.000+00:00,51.745,178.410,115.7,2.8,ml,13,169,,0.70,ak,ak11317935,14057342878302014-07-05T14:59:34.630+00:00,37.381,141.760,44.5,4.9,mb,,85,3.0,0.68,us,usc000rqtn,14046152384962014-07-05T14:46:39.570+00:00,41.364,-73.934,5.0,2.5,ml,24,62,0.1,0.45,ld,ld60072806,14050213816642014-07-05T13:30:16.100+00:00,39.055,-123.048,7.8,2.8,Md,51,32,0.0,0.06,nc,nc72249391,14049391275222014-07-05T12:52:24.000+00:00,51.814,178.647,90.7,2.5,ml,13,191,,0.36,ak,ak11317849,14057342882902014-07-05T12:32:57.000+00:00,63.453,-148.527,8.6,2.7,ml,,,,0.67,ak,ak11317827,14057343528802014-07-05T11:48:17.000+00:00,52.282,-168.774,62.0,2.5,ml,,,,0.62,ak,ak11317788,14057343975142014-07-05T11:00:47.150+00:00,-20.709,-70.806,23.8,4.4,mb,,154,0.6,0.91,us,usc000rqsr,14045928343202014-07-05T10:58:38.000+00:00,19.154,-66.896,23.0,2.9,Md,6,313,0.7,0.05,pr,pr14186003,14045928533812014-07-05T10:02:13.230+00:00,1.657,97.027,28.1,4.7,mb,,186,0.7,0.73,us,usc000rqsj,14045928494872014-07-05T09:39:30.050+00:00,1.995,97.015,30.0,6.0,mwb,,38,0.9,0.92,us,usc000rqs7,14045928391792014-07-05T09:33:39.000+00:00,51.771,178.381,112.0,2.8,ml,,,,0.36,ak,ak11317711,14057344029832014-07-05T08:54:44.730+00:00,-33.936,-71.380,37.3,4.4,mb,,88,0.7,0.84,us,usc000rqrw,14060324830002014-07-05T08:18:26.850+00:00,51.841,178.503,100.4,4.2,mb,,120,0.1,0.71,us,usc000rqri,14064611211752014-07-05T08:06:45.880+00:00,-55.424,-28.078,10.0,4.1,mb,,126,5.0,0.79,us,usb000rvf7,14064607050002014-07-05T07:55:23.730+00:00,39.396,142.576,50.0,4.4,mb,,135,2.7,1.18,us,usc000rqrg,14060323370002014-07-05T07:44:44.000+00:00,51.942,-174.276,55.1,2.7,ml,,,,0.40,us,usc000rqs1,14064603630002014-07-05T06:48:06.110+00:00,-17.852,-177.836,571.9,4.2,mb,,123,3.9,0.90,us,usb000rve3,14064534920562014-07-05T06:27:46.000+00:00,61.251,-139.534,17.5,2.6,ml,35,68,,0.98,ak,ak11317630,14057342727682014-07-05T06:22:34.370+00:00,11.849,-87.132,49.3,4.1,mb,,162,0.8,0.72,us,usc000rqr5,14060320890002014-07-05T05:45:28.120+00:00,9.888,126.405,17.6,4.3,mb,,185,9.1,0.89,us,usb000rve1,14064528950002014-07-05T05:31:07.070+00:00,-40.128,77.967,10.0,4.6,mb,,148,2.3,0.53,us,usb000rvdz,14064526092852014-07-05T05:15:23.550+00:00,46.335,153.126,26.4,4.3,mb,,135,7.4,0.69,us,usb000rve0,14064402900002014-07-05T05:06:02.280+00:00,-1.971,152.366,15.9,4.5,mb,,147,10.6,0.31,us,usb000rvdy,14064399350002014-07-05T04:13:03.930+00:00,51.758,178.679,101.7,4.9,mb,,117,0.5,0.84,us,usc000rqqx,14057341638412014-07-05T03:34:46.200+00:00,-5.054,153.711,55.3,4.8,mb,,99,1.8,0.67,us,usc000rqqs,14045602348172014-07-05T03:11:47.970+00:00,28.306,55.036,10.0,4.7,mb,,52,3.5,0.81,us,usc000rqqn,14045588647822014-07-05T02:56:44.000+00:00,56.155,-160.537,178.5,3.0,ml,,,,0.34,ak,ak11317556,14057341872752014-07-05T02:54:34.000+00:00,17.977,-68.253,119.0,3.4,Md,10,335,1.1,0.41,pr,pr14186001,14045578235482014-07-05T01:18:13.270+00:00,-30.694,-178.146,35.0,5.2,mb,,80,12.0,1.44,us,usc000rqq9,14045521381182014-07-05T01:16:57.460+00:00,-6.329,152.769,46.5,4.7,mb,,48,2.2,0.71,us,usc000rqq8,14046063372502014-07-05T01:05:46.200+00:00,19.302,-66.539,54.0,2.7,Md,6,295,0.8,0.23,pr,pr14186000,14045512920362014-07-05T00:34:14.000+00:00,51.842,178.310,124.4,3.0,ml,,,,0.46,ak,ak11317497,14057342544502014-07-04T23:09:00.300+00:00,19.419,-155.335,4.8,2.5,Ml,,256,0.0,0.09,hv,hv60725531,14050228216502014-07-04T22:44:49.810+00:00,-7.146,154.640,129.4,4.9,mb,,47,3.8,2.33,us,usc000rqiy,14045428436082014-07-04T22:42:04.740+00:00,39.675,142.034,44.9,5.7,mb,,49,2.5,0.95,us,usc000rqix,14063264290002014-07-04T21:30:36.900+00:00,37.739,-112.961,-0.3,2.6,Ml,,40,0.2,0.17,uu,uu60075967,14047474360072014-07-04T21:12:37.000+00:00,19.283,-65.083,63.0,3.0,Md,4,313,0.9,0.10,pr,pr14185004,14045373076312014-07-04T21:08:45.430+00:00,35.104,-34.901,10.0,5.2,mb,,28,6.4,0.73,us,usc000rqih,14047515680002014-07-04T19:09:39.000+00:00,63.282,-150.479,126.7,2.7,ml,,,,0.61,ak,ak11317244,14045299256302014-07-04T18:48:52.500+00:00,18.828,-64.358,38.0,2.8,Md,4,328,0.5,0.07,pr,pr14185002,14045286884352014-07-04T15:00:26.430+00:00,-6.205,152.821,10.0,6.6,mwp,,19,2.1,0.92,us,usc000rqgz,14045757950002014-07-04T13:57:39.350+00:00,51.910,178.446,110.3,4.5,mb,,170,2.7,1.06,us,usc000rqgt,14045199569782014-07-04T13:41:47.000+00:00,36.556,-90.017,7.7,2.8,md,36,65,0.1,0.12,nm,nm60052977,14045662320692014-07-04T13:12:18.390+00:00,-7.005,155.848,42.2,5.6,mb,,51,4.7,0.82,us,usc000rqgl,14045721980002014-07-04T11:22:17.810+00:00,36.135,-117.968,4.9,2.7,ml,27,68,0.1,0.13,ci,ci15520113,14047523225042014-07-04T11:20:36.320+00:00,-3.989,139.492,47.4,4.8,mb,,62,7.3,0.67,us,usc000rqfj,14045017863942014-07-04T09:19:35.150+00:00,-25.789,-179.840,453.5,4.6,mb,,90,3.8,0.66,us,usc000rqf1,14044945351402014-07-04T09:15:39.430+00:00,63.292,150.887,15.6,4.5,mb,,74,3.7,0.61,us,usc000rqf0,14044942924522014-07-04T08:49:10.010+00:00,18.388,145.937,192.1,4.4,mb,,89,4.9,0.60,us,usb000ruzz,14062957320002014-07-04T08:33:37.350+00:00,51.729,178.405,101.4,2.7,ml,,,,0.54,us,usb000rxh7,14063705680002014-07-04T07:55:45.170+00:00,51.787,-171.777,51.1,4.2,mb,,73,1.6,1.46,us,usc000rqes,14062953600002014-07-04T06:52:31.170+00:00,-55.189,-27.829,10.0,4.9,mb,,66,5.1,0.67,us,usc000rqem,14060317120002014-07-04T06:16:22.600+00:00,-17.770,-70.032,116.9,4.5,mb,,116,0.7,1.34,us,usb000rv03,14062874470002014-07-04T05:47:08.100+00:00,37.904,-118.534,5.2,2.5,Md,28,151,0.2,0.06,nc,nc72248736,14049671482852014-07-04T05:40:02.840+00:00,-3.943,138.746,53.6,4.9,mb,,25,2.4,0.92,us,usc000rqeg,14060315120002014-07-04T05:34:19.210+00:00,-49.120,-8.296,10.0,5.1,mb,,66,22.8,0.64,us,usc000rqef,14060313650002014-07-04T05:33:25.280+00:00,51.794,178.378,102.5,2.6,ml,,,,0.17,us,usb000rxh6,14063702120002014-07-04T04:55:10.020+00:00,36.856,-97.399,4.6,3.1,mb_lg,,70,0.2,0.46,us,usc000rqec,14045189997812014-07-04T03:41:16.930+00:00,-16.718,-173.410,47.6,4.7,mb,,55,3.2,1.03,us,usc000rqe9,14046053238502014-07-04T01:32:04.300+00:00,19.149,-64.273,38.0,3.0,Md,10,324,0.8,0.07,pr,pr14185000,14044664751882014-07-04T00:55:04.000+00:00,51.840,178.509,117.9,3.1,ml,18,227,0.1,0.42,ak,ak11316764,14045209141312014-07-03T23:50:27.720+00:00,33.164,-115.646,1.8,3.1,ml,50,37,0.0,0.20,ci,ci15519497,14044370210952014-07-03T22:56:31.000+00:00,32.579,-109.075,5.0,3.9,ml,,81,1.1,0.89,us,usc000rqda,14045134382982014-07-03T22:30:33.590+00:00,-4.063,139.216,65.3,5.1,mb,,31,7.0,0.93,us,usc000rqd3,14044555914682014-07-03T20:39:58.480+00:00,35.563,75.100,10.0,4.9,mb,,75,2.4,1.13,us,usc000rqcc,14045526753622014-07-03T20:24:20.000+00:00,36.760,-98.052,4.0,3.0,ml,,99,,1.32,us,usc000rqc5,14044290650002014-07-03T20:14:54.490+00:00,35.939,-97.050,6.3,3.2,mb_lg,,36,0.3,0.42,us,usc000rqbx,14044337670002014-07-03T20:03:39.300+00:00,17.863,-67.068,8.0,2.6,Md,13,256,0.1,0.10,pr,pr14184009,14044467683532014-07-03T19:50:05.040+00:00,-30.533,-176.526,20.0,6.3,mwb,,18,1.8,1.10,us,usc000rqbg,14057857110002014-07-03T19:14:34.000+00:00,61.376,-150.522,0.5,2.7,ml,8,202,0.1,0.68,ak,ak11316368,14045209103242014-07-03T19:06:47.850+00:00,52.071,178.460,104.0,5.7,mwb,,46,0.9,0.99,us,usc000rqae,14045721950002014-07-03T17:19:15.900+00:00,19.091,-65.661,73.0,2.8,Md,4,277,0.9,0.18,pr,pr14184008,14044369122352014-07-03T17:15:45.200+00:00,41.983,-112.359,10.8,2.5,Ml,,86,0.1,0.28,uu,uu60075847,14044273728872014-07-03T16:09:04.410+00:00,36.379,-96.931,2.8,2.9,mb_lg,,56,0.3,0.17,us,usc000rq2e,14044234501382014-07-03T13:56:43.050+00:00,-16.774,-71.224,83.7,4.7,mb,,131,1.8,1.10,us,usc000rpxk,14044076805782014-07-03T12:30:10.600+00:00,19.175,-66.274,36.0,2.9,Md,12,263,0.7,0.33,pr,pr14184006,14044195728672014-07-03T12:16:58.110+00:00,55.204,166.832,10.0,4.6,mb,,122,5.0,1.06,us,usc000rpx7,14044187723302014-07-03T12:05:22.800+00:00,55.206,166.920,10.0,5.9,mwp,,76,4.9,1.30,us,usc000rpw8,14044180689722014-07-03T10:33:57.600+00:00,18.177,-68.011,97.0,3.3,Md,10,209,0.5,0.30,pr,pr14184007,14044125928582014-07-03T09:35:49.180+00:00,-22.063,-179.447,599.2,5.6,mb,,78,4.9,0.96,us,usc000rpvy,14044153440002014-07-03T09:06:55.420+00:00,17.480,-95.148,10.0,4.3,mb,,151,3.1,1.06,us,usc000rpvw,14044075313612014-07-03T08:23:48.000+00:00,61.602,-149.799,30.9,3.3,ml,80,36,0.3,0.74,ak,ak11315769,14045198022972014-07-03T07:50:45.790+00:00,-18.247,-177.373,387.3,4.8,mb,,39,4.4,1.17,us,usc000rpvg,14044027925122014-07-03T07:32:44.400+00:00,18.931,-65.774,16.0,2.8,Md,12,245,0.7,0.25,pr,pr14184004,14044017205012014-07-03T06:49:26.900+00:00,18.837,-65.728,9.0,2.5,Md,5,295,0.6,0.18,pr,pr14184002,14043991339292014-07-03T06:48:09.890+00:00,19.403,121.153,35.0,4.5,mb,,143,3.4,1.07,us,usc000rpv8,14043990472152014-07-03T06:42:25.000+00:00,51.805,179.120,91.0,2.9,ml,9,126,0.3,0.25,ak,ak11315684,14045209176302014-07-03T06:38:14.400+00:00,18.908,-65.771,13.0,2.6,Md,6,277,0.6,0.23,pr,pr14184001,14043984489832014-07-03T05:04:46.920+00:00,40.274,27.996,9.6,4.4,mb,,44,1.6,0.80,us,usc000rpuu,14044097970002014-07-03T04:51:32.000+00:00,18.690,-64.638,58.0,2.7,Md,6,281,0.3,0.23,pr,pr14184000,14043920723782014-07-03T04:43:42.980+00:00,51.938,178.521,122.9,5.2,mb,,72,0.7,1.39,us,usc000rpum,14045194614812014-07-03T04:28:10.350+00:00,-2.909,139.127,47.4,4.7,mb,,133,6.9,0.71,us,usc000rpuj,14043906375242014-07-03T03:12:13.900+00:00,36.187,-92.712,6.8,2.7,md,15,54,0.2,0.21,nm,nm60052892,14058319386262014-07-03T02:56:41.290+00:00,55.298,166.868,22.7,5.8,mwp,,72,5.0,1.07,us,usc000rpu4,14044137940002014-07-03T02:50:20.080+00:00,-34.755,-71.743,41.2,4.8,mb,,68,0.3,1.03,us,usc000rpu3,14044253915072014-07-03T02:10:40.690+00:00,-24.041,-67.060,228.2,4.3,mb,,93,2.2,0.72,us,usc000rppb,14043824793152014-07-03T01:38:25.000+00:00,51.836,178.560,111.5,3.1,ml,11,227,0.1,0.40,ak,ak11314916,14045209070282014-07-03T01:25:33.390+00:00,-32.310,-178.001,10.0,4.8,mb,,73,3.1,1.45,us,usc000rpp6,14043796922252014-07-03T00:30:28.900+00:00,35.846,-119.794,7.6,2.9,Md,111,54,0.2,0.23,nc,nc72248081,14044446090022014-07-03T00:29:13.700+00:00,35.843,-119.817,12.3,2.9,Md,121,29,0.2,0.28,nc,nc72248076,14044463470562014-07-02T19:24:48.230+00:00,26.873,130.027,33.6,4.9,mb,,53,1.6,0.97,us,usc000rpkm,14043580829872014-07-02T18:57:40.000+00:00,60.205,-153.139,136.7,2.6,ml,49,180,0.1,0.80,ak,ak11314822,14043564111872014-07-02T18:32:17.740+00:00,36.135,-117.964,4.8,3.1,ml,31,67,0.1,0.11,ci,ci37238872,14044098756792014-07-02T17:33:48.540+00:00,-55.404,-28.009,36.3,4.7,mb,,126,5.0,0.41,us,usc000rpj9,14043513752462014-07-02T17:08:35.800+00:00,36.689,-121.316,3.2,2.5,Md,70,29,0.0,0.08,nc,nc72247896,14043593455322014-07-02T16:58:03.100+00:00,19.198,-64.814,15.0,3.0,Md,3,335,0.9,0.14,pr,pr14183012,14046611930002014-07-02T16:50:21.500+00:00,18.924,-65.279,37.0,2.6,Md,8,266,0.6,0.27,pr,pr14183011,14046608930002014-07-02T16:10:54.190+00:00,31.109,-116.005,18.2,3.8,ml,21,227,0.5,1.71,ci,ci37238816,14044116860072014-07-02T15:55:39.100+00:00,35.753,-97.505,5.0,2.7,ml,,71,,0.55,us,usc000rplj,14046603629902014-07-02T15:37:52.100+00:00,18.810,-65.321,61.0,2.7,md,,278,0.5,0.61,us,usc000rpis,14043444495742014-07-02T15:36:20.600+00:00,18.624,-67.589,12.0,2.5,Md,5,310,0.3,0.23,pr,pr14183010,14046598930002014-07-02T15:02:19.990+00:00,-6.908,129.608,194.0,4.2,mb,,127,2.0,0.90,us,usc000rphr,14043422897352014-07-02T14:24:37.310+00:00,19.075,-66.530,8.4,2.7,md,,307,0.6,0.81,us,usc000rpir,14043400325982014-07-02T14:01:15.800+00:00,19.317,-68.164,68.0,3.7,Md,19,270,0.8,0.50,pr,pr14183007,14043386212862014-07-02T13:43:40.600+00:00,36.277,-97.262,5.7,2.6,ml,,60,,0.19,us,usc000rpls,14046595016052014-07-02T12:04:41.770+00:00,-8.122,107.892,35.0,4.2,mb,,65,0.6,1.29,us,usc000rqee,14044520731572014-07-02T11:42:31.780+00:00,-22.310,170.320,35.0,4.9,mb,,96,3.6,0.97,us,usc000rpgx,14043303054422014-07-02T11:20:13.000+00:00,52.022,-173.468,38.8,3.0,ml,12,313,,0.64,ak,ak11314638,14043425046852014-07-02T11:01:35.500+00:00,19.124,-66.547,13.0,2.6,Md,5,288,0.6,0.38,pr,pr14183005,14043279014272014-07-02T10:55:20.000+00:00,19.981,-155.612,23.4,2.6,Ml,,137,0.1,0.10,hv,hv60724106,14044225553982014-07-02T10:02:30.630+00:00,-55.377,-28.439,10.0,5.2,mb,,87,4.8,0.74,us,usc000rpgl,14043243003302014-07-02T09:00:37.820+00:00,36.849,-97.873,2.1,2.6,mb_lg,,84,0.3,0.77,us,usc000rpgd,14043075907512014-07-02T08:45:21.000+00:00,51.958,-170.606,25.5,3.0,ml,12,223,,0.95,ak,ak11314598,14043284634452014-07-02T07:24:29.500+00:00,0.031,124.661,80.5,5.0,mb,,52,2.2,1.15,us,usc000rpg5,14043148180072014-07-02T06:35:09.600+00:00,18.903,-64.299,7.0,2.9,Md,3,349,0.8,0.07,pr,pr14183004,14043118554442014-07-02T05:53:30.450+00:00,-62.270,155.088,16.1,5.4,mb,,109,8.1,0.99,us,usc000rpfu,14043408990002014-07-02T03:10:33.000+00:00,67.667,-162.150,17.1,3.5,ml,,,,0.80,ak,ak11314538,14042996793602014-07-02T01:49:46.000+00:00,60.269,-152.936,100.0,2.8,ml,48,126,,0.89,ak,ak11314517,14042947388092014-07-02T01:39:57.930+00:00,36.139,-117.962,3.7,2.8,ml,26,67,0.2,0.11,ci,ci37238496,14043379381672014-07-02T01:05:05.300+00:00,18.343,-64.796,27.0,2.6,Md,3,184,0.2,0.12,pr,pr14183003,14042920593612014-07-02T01:02:00.000+00:00,51.855,178.322,124.8,3.1,ml,13,162,,0.74,ak,ak11314508,14042918797442014-07-02T00:06:07.200+00:00,18.448,-64.266,28.0,2.7,Md,7,349,0.3,0.10,pr,pr14183000,14042885510412014-07-01T23:14:59.000+00:00,36.658,-97.875,5.6,2.7,ml,,86,,0.81,us,usc000rplw,14046005982392014-07-01T23:06:32.300+00:00,19.280,-66.485,41.0,2.6,Md,4,299,0.8,0.17,pr,pr14182004,14042849487532014-07-01T21:11:30.860+00:00,51.811,178.383,97.1,2.8,ml,,,,0.39,us,usb000rupl,14063241400002014-07-01T18:14:53.220+00:00,-30.265,-176.998,26.8,5.1,mb,,75,1.3,0.86,us,usc000rp9n,14042674507432014-07-01T18:11:48.600+00:00,-30.275,-177.131,7.4,5.2,mb,,64,1.2,0.71,us,usc000rp97,14042672606522014-07-01T16:28:14.670+00:00,31.153,130.250,169.2,4.7,mb,,65,2.0,0.63,us,usc000rp7q,14042610462642014-07-01T16:09:56.670+00:00,52.817,-166.829,24.1,4.5,mb,,171,1.0,1.00,us,usc000rp7f,14042599449472014-07-01T14:30:36.300+00:00,36.582,-97.821,6.1,2.5,ml,,80,,0.42,us,usc000rp70,14042539953402014-07-01T14:22:09.580+00:00,-33.898,-72.489,16.2,5.1,mb,,133,1.0,0.68,us,usc000rp6f,14042334315332014-07-01T14:22:07.200+00:00,36.583,-97.819,5.0,3.1,ml,,79,,0.65,us,usc000rp6g,14042303763672014-07-01T14:16:58.400+00:00,36.649,-97.954,5.0,2.8,ml,,89,,0.58,us,usc000rp6w,14042532266612014-07-01T13:37:20.000+00:00,62.096,-152.466,4.7,3.3,ml,,,,0.94,ak,ak11314224,14042511794902014-07-01T12:39:06.700+00:00,8.691,-39.760,10.0,5.0,mb,,41,14.9,0.50,us,usc000rp5y,14042472973382014-07-01T12:14:19.400+00:00,37.325,-122.225,5.8,2.5,Md,110,68,0.0,0.12,nc,nc72247316,14043639919802014-07-01T11:31:26.100+00:00,18.841,-64.853,14.0,2.7,Md,5,270,0.5,0.17,pr,pr14182002,14042432372352014-07-01T09:11:23.790+00:00,13.828,119.224,34.6,5.1,mb,,90,8.3,0.90,us,usc000rp53,14042070389912014-07-01T09:04:43.120+00:00,36.134,-117.965,5.1,3.0,ml,30,67,0.1,0.09,ci,ci37238128,14043195528822014-07-01T09:00:58.990+00:00,26.916,129.287,26.3,4.8,mb,,130,0.9,1.33,us,usc000rp4z,14042342092592014-07-01T08:57:00.700+00:00,-53.723,9.520,10.0,4.6,mb,,90,18.8,0.85,us,usb000rvvm,14062722640002014-07-01T08:24:55.980+00:00,-5.971,153.678,68.4,4.4,mb,,78,2.3,1.04,us,usb000rvub,14062712406402014-07-01T08:20:34.500+00:00,36.651,-97.959,5.0,3.2,ml,,89,,0.75,us,usc000rp3j,14060311206292014-07-01T08:16:33.580+00:00,38.822,-122.840,2.4,2.9,md,83,24,0.0,0.06,nc,nc72247216,14042410885042014-07-01T08:14:46.180+00:00,-55.354,-28.165,21.5,4.4,mb,,126,4.9,0.62,us,usb000rvvk,14062706060002014-07-01T08:09:48.840+00:00,-30.035,-177.718,33.3,4.7,mb,,129,0.8,0.91,us,usb000rvue,14062698050002014-07-01T07:42:52.800+00:00,35.825,-97.075,5.6,3.0,ml,,81,,0.53,us,usc000rp34,14060307900002014-07-01T07:29:43.300+00:00,-55.242,-28.994,20.2,4.8,mb,,44,4.4,0.70,us,usc000rp31,14060304110002014-07-01T07:12:55.000+00:00,67.627,-162.420,24.1,3.2,ml,,,,0.91,ak,ak11314112,14062682080002014-07-01T07:12:22.520+00:00,-55.307,-27.954,10.0,4.1,mb,,95,5.0,0.40,us,usb000rvvj,14062678270002014-07-01T06:14:36.100+00:00,19.406,-155.289,3.5,2.6,Ml,,148,0.0,0.15,hv,hv60723461,14042448665052014-07-01T06:11:46.900+00:00,18.911,-64.992,32.0,2.5,Md,11,310,0.7,0.28,pr,pr14182001,14042243759602014-07-01T04:52:13.000+00:00,54.223,-161.694,13.2,3.4,ml,,,,0.75,ak,ak11314085,14042192881262014-07-01T04:37:49.900+00:00,19.635,-66.087,109.0,3.4,Md,8,284,1.4,0.14,pr,pr14182000,14042009738292014-07-01T03:10:49.000+00:00,40.299,-124.466,11.9,3.0,Md,22,259,0.1,0.13,nc,nc72247101,14046795804112014-07-01T01:55:22.000+00:00,54.121,-166.231,119.1,2.5,ml,,,,0.27,ak,ak11314041,1404208684041'</body></methods><methods><class-id>Roassal2.RTMapLocationBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-Map">createView	| v |	v := super createView.	self renderAllCountriesIn: v.	v @ RTDraggableView.	^ v</body><body package="Roassal2-Builder-Map">metricNormalizerClass	^ RTMetricNormalizer</body><body package="Roassal2-Builder-Map">normalizer	"	:: Void-&gt;RTMetricNormalizer		This metric normalizer assumes that elements have been already created. Which may not be the case...	"	^ super normalizer elements: addedElements; yourself</body></methods><methods><class-id>Roassal2.RTMapLocationBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Map">initialize	super initialize.	addedElements := OrderedCollection new</body></methods><methods><class-id>Roassal2.RTMapLocationBuilder</class-id> <category>utility</category><body package="Roassal2-Builder-Map">renderAllCountriesIn: aView	| el shape |	RTSVGPath countries		do: [ :name | 			shape := RTSVGPath new path: (RTSVGPath perform: name).			shape borderColor: Color lightGray.			el := shape elementOn: name asString.			el @ RTPopup.			aView add: el ]</body><body package="Roassal2-Builder-Map">translateGeoPositionToPixels: point	"From https://github.com/thebyrd/world-news"		| longitud latitud xFactor xoffset yFactor yoffset |	latitud := point x.	longitud := point y.		xFactor := 2.6938.	xoffset := 465.4.		yFactor := -2.6938.	yoffset := 227.066.	^ ((longitud * xFactor) + xoffset) @ ((latitud * yFactor) + yoffset)</body></methods><methods><class-id>Roassal2.RTMapLocationBuilder</class-id> <category>adding</category><body package="Roassal2-Builder-Map">addPoint: geoPoint value: aValue	| el |	el := self elementOn: aValue.	el translateTo: (self translateGeoPositionToPixels: geoPoint).	el @ RTPopup.	view add: el.		"We keep track of the added elements"	addedElements add: el</body></methods><methods><class-id>Roassal2.RTExploraBuilderLazy</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Explora">buildNode: object parent: parent	| node element elementIconOpen elementIconClose |		node := RTExploraNodeLazy new.	node builder: self.	node id: self newNodeId.	node parentNode: parent.	element := RTElement new model: object.		node element: element.		element addShape: self shape shape.		dragChildren ifTrue: [ element @ RTDraggableChildren ] ifFalse: [ element @ RTDraggable ].	popUp ifTrue: [ element @ (RTPopup new text: popupText) ].		(icons) ifNotNil: [ 		elementIconOpen := (icons first) elementOn: #iconOpen.		elementIconClose := (icons second) elementOn: #iconClose.				RTConstraint move: ((Array with: elementIconOpen with: elementIconClose) asGroup) onTheRightOf: element.		element addCallback: (TRTranslationCallback new block: [			TRConstraint move: ((Array with: elementIconOpen with: elementIconClose) asGroup) onTheRightOf:element. 					self view signalUpdate			]).			node iconOpen: elementIconOpen.		node iconClose: elementIconClose.		]. 	nodeListeners do: [ :block | block value: node ].		^ node</body></methods><methods><class-id>Roassal2.RTStandardDeviationDecorator</class-id> <category>drawing-hooks</category><body package="Roassal2-Builder-Grapher-Decorators">render	| values average stdev from to |	values := self datasetValues.	"Standard Deviation requires at least two values."	values size &lt; 2		ifTrue: [ ^ self ].	average := values average.	stdev := values stdev.	from := builder getPixelPositionOf: builder minX @ (average + stdev).	to := builder getPixelPositionOf: builder maxX @ (average + stdev).	self lineFrom: from to: to.	from := builder getPixelPositionOf: builder minX @ (average - stdev).	to := builder getPixelPositionOf: builder maxX @ (average - stdev).	self lineFrom: from to: to.	shouldHaveLabel		ifTrue: [ self label: (labelBlock rtValue: average) asString above: to ]</body></methods><methods><class-id>Roassal2.RTHighlightable</class-id> <category>configuration</category><body package="Roassal2-Interactions">highlightedColor	^ color</body><body package="Roassal2-Interactions">highlightedColor: aColorOrABlock	color := aColorOrABlock</body></methods><methods><class-id>Roassal2.RTHighlightable</class-id> <category>actions</category><body package="Roassal2-Interactions">doHighlightElement: anElement	| v |	self recordElement: anElement.	"not sure if we need to return something"	v := anElement trachelShape color: (self highlightColorFor: anElement).	anElement view ifNotNil: [ anElement view signalUpdate ].	^ v</body><body package="Roassal2-Interactions">doUnhighlightElement: anElement	(anElement attributes includesKey: #originalColor)		ifFalse: [ ^ self ].	anElement trachelShape color: (anElement attributes at: #originalColor).	anElement attributes removeKey: #originalColor.	anElement view ifNotNil: [ anElement view signalUpdate ].</body><body package="Roassal2-Interactions">recordElement: anElement	(anElement attributes includesKey: #originalColor) ifTrue: [ ^ self ].	anElement attributes at: #originalColor put: (anElement trachelShape color)</body></methods><methods><class-id>Roassal2.RTHighlightable</class-id> <category>accessing</category><body package="Roassal2-Interactions">color	"Return the color used for the highlighting"	^ color</body><body package="Roassal2-Interactions">color: aColor	"Set the color used for the highlighting"	color := aColor</body></methods><methods><class-id>Roassal2.RTHighlightable</class-id> <category>visitor</category><body package="Roassal2-Interactions">accept: aVisitor with: args	aVisitor visitHightlightableInteraction: self with: args.</body></methods><methods><class-id>Roassal2.RTHighlightable</class-id> <category>utility</category><body package="Roassal2-Interactions">highlightColorFor: anElement	"Return the highlight color"	^ self highlightedColor rtValue: anElement model</body></methods><methods><class-id>Roassal2.RTHighlightable</class-id> <category>initialize</category><body package="Roassal2-Interactions">initialize	super initialize.	color := self class highlightedColor</body></methods><methods><class-id>Roassal2.RTHighlightable class</class-id> <category>reset shape</category><body package="Roassal2-Interactions">highlightedColor	"Default color for highlighting"	^ Color blue</body></methods><methods><class-id>Roassal2.RTDoubleScrollBar</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: aView	self addScrollsToview: aView</body></methods><methods><class-id>Roassal2.RTDoubleScrollBar</class-id> <category>adding</category><body package="Roassal2-Interactions">addScrollsToview: aView		"add two scroll bars to the view"	| b2 b3 |		b2 := RTScrollBarBuilder new.	b2 view: aView.	b2 orientation: #vertical.	b2 fixedPosition: [ :v | (v view canvas extent x - ((v width /2))@(v view canvas extent y /2)) ].	b2 movable: #isFixed.	b2 size: [ :v | v view canvas extent y ].	b2 barShape: #aBox.	b2 barSpecific: #scalable.	b2 build.	b3 := RTScrollBarBuilder new.	b3 view: aView.	b3 fixedPosition: [ :v | (v view canvas extent x / 2)@(v view canvas extent y - (v width /2))].	b3 movable: #isFixed.	b3 size: [ :v | v view canvas extent x].	b3 barShape: #aBox.	b3 barSpecific: #scalable.	b3 build.</body></methods><methods><class-id>Roassal2.RTStackBarRow</class-id> <category>accessing</category><body package="Roassal2-Builder-StackBarPlot">title	^ title</body><body package="Roassal2-Builder-StackBarPlot">title: aString 	title := aString</body><body package="Roassal2-Builder-StackBarPlot">values	^ values</body><body package="Roassal2-Builder-StackBarPlot">values: aCollection 	values := aCollection</body></methods><methods><class-id>Roassal2.RTStackBarRow</class-id> <category>accessing - computed</category><body package="Roassal2-Builder-StackBarPlot">numberOfValues	^ values size</body><body package="Roassal2-Builder-StackBarPlot">totalSum	^ values sum</body></methods><methods><class-id>Roassal2.RTCircleGeometry</class-id> <category>accessing</category><body package="Roassal2-AttachPoint">center	^ center</body><body package="Roassal2-AttachPoint">radius	^ radius</body></methods><methods><class-id>Roassal2.RTCircleGeometry</class-id> <category>printing</category><body package="Roassal2-AttachPoint">printOn: aStream	super printOn: aStream.	aStream nextPut: $(.	center printOn: aStream.	aStream nextPutAll: ' radius: '.	aStream nextPutAll: radius asString.	aStream nextPut: $)</body></methods><methods><class-id>Roassal2.RTCircleGeometry</class-id> <category>initialization</category><body package="Roassal2-AttachPoint">setCenter: aCenter radius: aRadius	center := aCenter.	radius := aRadius</body></methods><methods><class-id>Roassal2.RTCircleGeometry</class-id> <category>testing</category><body package="Roassal2-AttachPoint">includesPoint: aPoint	^ (center dist: aPoint) &lt;= radius</body></methods><methods><class-id>Roassal2.RTCircleGeometry</class-id> <category>comparing</category><body package="Roassal2-AttachPoint">intersectCircle: aCircle	| radii a h d p2 x1 y1 x2 y2 |	d := self center dist: aCircle center.	radii := self radius + aCircle radius.	"too far apart"	d &gt; radii		ifTrue: [ ^ #() ].	"one within another"	d &lt; (self radius - aCircle radius) abs		ifTrue: [ ^ #() ].	a := (self radius squared - aCircle radius squared + d squared) / (2 * d).	h := (self radius squared - a squared) sqrt.	p2 := (aCircle center - self center) * (a / d) + self center.	x1 := p2 x + (h * (aCircle center y - self center y) / d).	y1 := p2 y - (h * (aCircle center x - self center x) / d).	x2 := p2 x - (h * (aCircle center y - self center y) / d).	y2 := p2 y + (h * (aCircle center x - self center x) / d).	(x1@y1) = (x2 @ y2) 		ifTrue: [ ^ Array with: x1@y1 ]		ifFalse: [ ^ Array with: x1 @ y1 with: x2 @ y2 ].</body></methods><methods><class-id>Roassal2.RTCircleGeometry class</class-id> <category>instance creation</category><body package="Roassal2-AttachPoint">center: aPoint radius: aRadius	^ self basicNew setCenter: aPoint radius: aRadius</body><body package="Roassal2-AttachPoint">new	^ self error: 'Use #center:radius: instead.'</body></methods><methods><class-id>Roassal2.RTVerticalLineLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">deltaFor: aNodeFigure		| delta |	delta := 0.	self alignment == #right ifTrue: [delta := aNodeFigure width].	self alignment == #center ifTrue: [delta := aNodeFigure width / 2.0].	^delta @ 0</body><body package="Roassal2-Layouts">doCenter: aGraph  	| midWidest step |	midWidest := aGraph nodes 		inject: 0		into: [ :m :el | m max: (el bounds width )].	midWidest := midWidest / 2.	aGraph nodes do: [ :node | 		step := (midWidest - (node bounds width /2)) asInteger @ 0.		node bounds origin: (node bounds origin + step).		node bounds corner: (node bounds corner + step).	]</body><body package="Roassal2-Layouts">doStretchHorizontal: aCollectionOfElements 	 	| parent parentBounds |	aCollectionOfElements isNil ifTrue: [ ^ self "nothing to do" ].	parent := aCollectionOfElements anyOne parent.	parent isView ifTrue: [ ^ self "ROView does not have bounds" ].	parentBounds := parent bounds.	aCollectionOfElements do: [ :element | 		element width: parentBounds width ]</body><body package="Roassal2-Layouts">doStretchVertical: aCollectionOfElements  	| parent parentBounds addedHeight parentBoundsHeight runningIndex newHeight |	aCollectionOfElements isEmpty ifTrue: [ ^ self "nothing to do" ].	parent := aCollectionOfElements anyOne parent.	parent isView ifTrue: [ ^ self "ROView does not have bounds" ].	parentBounds := parent bounds.	addedHeight := aCollectionOfElements 		inject: 0		into: [ :m :el | m + el height ].	parentBoundsHeight := parentBounds height.	"parentBoundsHeight := parentBoundsHeight - ((aCollectionOfElements size - 1) * verticalGap) - (2 * verticalOutGap)."		runningIndex := 0.	parentBounds height &gt; addedHeight		ifTrue: [ aCollectionOfElements do: [ :element | 						newHeight := (element height * parentBoundsHeight / addedHeight) asInteger.						element height: newHeight.						runningIndex := runningIndex + newHeight + verticalGap ] ]</body><body package="Roassal2-Layouts">movePointer: pointer accordingToFigure: aNodeFigure		^ pointer x @ (pointer y + aNodeFigure height + self verticalGap)</body><body package="Roassal2-Layouts">positionOriginalPointer: elements 	| maxWidth delta |	delta := 0.	self alignment == #right ifTrue: 		[ maxWidth := elements maxValue: #width.		delta := maxWidth ].	self alignment == #center ifTrue: 		[ maxWidth := elements maxValue: #width.		delta := maxWidth / 2.0 ].	^ ((0) + delta) @ (0)</body></methods><methods><class-id>Roassal2.RTVerticalLineLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize		super initialize.	self alignLeft</body></methods><methods><class-id>Roassal2.RTScaleTransformation</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Scaling">invTrans: value	self subclassResponsibility</body><body package="Roassal2-Builder-Grapher-Scaling">trans: value	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTScaleTransformation</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Grapher-Scaling">rtValue: aValue	^ self trans: aValue</body></methods><methods><class-id>Roassal2.RTScaleTransformation class</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Grapher-Scaling">instance	instance ifNil: [ instance := self new ].	^ instance</body></methods><methods><class-id>Roassal2.RTSqrtTransformation</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Scaling">invTrans: value	^ value * value</body><body package="Roassal2-Builder-Grapher-Scaling">trans: aValue	^ aValue sqrt</body></methods><methods><class-id>Roassal2.RTSelectableView</class-id> <category>util</category><body package="Roassal2-Selection">getSelectedElementsWith: s	| g r |	g := RTGroup new. 	r := s encompassingRectangle.	view elements do: [ :e | 		((e ~= s) and: [ e trachelShape encompassingRectangle intersects: r ])			ifTrue: [ g add: e. ] ].	^ g</body><body package="Roassal2-Selection">highlight: aGroup	aGroup do: [:e | RTBlink highlight: e color: (self color rtValue: e) ].</body><body package="Roassal2-Selection">removeSelection: aGroup	aGroup do: [:e | RTBlink unhighlight: e ].</body></methods><methods><class-id>Roassal2.RTSelectableView</class-id> <category>accessing</category><body package="Roassal2-Selection">color	^ color</body><body package="Roassal2-Selection">color: anObject	color := anObject</body></methods><methods><class-id>Roassal2.RTSelectableView</class-id> <category>initialization</category><body package="Roassal2-Selection">initialize	super initialize.	self color: Color red.	self when: RTSelectionStart do: [ self removeSelection: view elements ].	self		when: RTSelectionChange		do: [ :e | self highlight: (e group select: [ :each | each model isNotNil ]) ]</body></methods><methods><class-id>Roassal2.RTSVGPathLine</class-id> <category>accessing</category><body package="Roassal2-Shapes">linePathFor: anEdge	^ String		streamContents: [ :s | 			s				nextPutAll: 'M';				nextPutAll: anEdge from position x asFloat asString;				nextPutAll: ',';				nextPutAll: anEdge from position y asFloat asString;				nextPutAll: ' ';				nextPutAll: anEdge to position x asFloat asString;				nextPutAll: ',';				nextPutAll: anEdge to position y asFloat asString ]</body><body package="Roassal2-Shapes">path	^ path</body><body package="Roassal2-Shapes">path: aString	path := aString</body><body package="Roassal2-Shapes">pathFor: anEdge	^ path ifNil: [ self linePathFor: anEdge ] ifNotNil: [ path rtValue: anEdge ]</body></methods><methods><class-id>Roassal2.RTSVGPathLine</class-id> <category>rendering</category><body package="Roassal2-Shapes">updateFor: edge trachelShape: trachelShape	trachelShape resetPath.	trachelShape strokePaint: (self colorFor: edge).	trachelShape width: (self widthFor: edge).	trachelShape svgPath: (self pathFor: edge).	trachelShape color: Color transparent</body></methods><methods><class-id>Roassal2.RTSVGPathLine</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeClass	^ TRSVGPathLineShape</body></methods><methods><class-id>Roassal2.RTSVGPathLine</class-id> <category>public</category><body package="Roassal2-Shapes">trachelShapeFor: anEdge	| trachelShape |	trachelShape := self trachelShapeClass new.	trachelShape from: (attachPoint startingPointOf: anEdge) to: (attachPoint endingPointOf: anEdge).	self updateFor: anEdge trachelShape: trachelShape.	^ trachelShape</body></methods><methods><class-id>Roassal2.RTCompositeShape</class-id> <category>adding</category><body package="Roassal2-Shapes">add: aRTShape	self add: aRTShape translateBy: 0 @ 0</body><body package="Roassal2-Shapes">add: aRTShape translateBy: aPoint	shapes add: (Array with: aRTShape with: aPoint)</body></methods><methods><class-id>Roassal2.RTCompositeShape</class-id> <category>attach point</category><body package="Roassal2-Shapes">attachPoint: anAttachPoint	self allShapes do: [ :s | 		((s isKindOf: RTAbstractLine) or: [ s isKindOf: RTLineDecoration ]) 			ifTrue: [ s attachPoint: anAttachPoint ] ]</body></methods><methods><class-id>Roassal2.RTCompositeShape</class-id> <category>accessing</category><body package="Roassal2-Shapes">allShapes	"Return all the shapes contained in me."	^ shapes collect: #first as: Array</body><body package="Roassal2-Shapes">color: aOneArgBlockOrColorOrSymbol	self allShapes do: [ :s | s color: aOneArgBlockOrColorOrSymbol ]</body><body package="Roassal2-Shapes">colorElement: aOneArgBlock	shapes ifEmpty: [ self error: 'You first need to add shape before setting the color' ].	self allShapes do: [ :s | s colorElement: aOneArgBlock ]</body></methods><methods><class-id>Roassal2.RTCompositeShape</class-id> <category>public - forwarding</category><body package="Roassal2-Shapes">containsShapeInstanceOf: class	"Return true if the shape contains at least one of shape, subclass of the argument class"	^ (self shapesInstancesOf: class) notEmpty</body><body package="Roassal2-Shapes">fillColor: aOneArgBlockOrColorOrSymbol	shapes ifEmpty: [ self error: 'You first need to add shape before setting the color' ].	(self shapesInstancesOf: RTAbstractElementShape) do: [ :s | s fillColor: aOneArgBlockOrColorOrSymbol ]</body><body package="Roassal2-Shapes">height: aOneArgBlockOrColorOrSymbol	shapes ifEmpty: [ self error: 'You first need to add shape before setting the color' ].	(self shapesInstancesOf: RTAbstractElementShape) do: [ :s | s height: aOneArgBlockOrColorOrSymbol ]</body><body package="Roassal2-Shapes">shapesInstancesOf: class	"Return the list of shapes instances or subinstances of the argument class"	^ self allShapes select: [ :s | s isKindOf: class ]</body><body package="Roassal2-Shapes">textColor: aOneArgBlockOrColorOrSymbol	(self shapesInstancesOf: RTLabel)		do: [ :s | s color: aOneArgBlockOrColorOrSymbol ]</body><body package="Roassal2-Shapes">textFor: anElement	^ (self shapesInstancesOf: RTLabel)		first textFor: anElement</body></methods><methods><class-id>Roassal2.RTCompositeShape</class-id> <category>hooks</category><body package="Roassal2-Shapes">setAutomaticUpdateLayoutIfNecessaryFor: ss and: trachelShape	automaticallyUpdateLayout		ifTrue: [ 			| b |			b := TRExtentCallback new				block: [ :aShape :ratio | 					trachelShape resetInnerShapes.					trachelShape perform: layout.					trachelShape relayout ].			ss do: [ :tupple | tupple first addCallback: b ] ]</body><body package="Roassal2-Shapes">updateFor: anElement trachelShape: trachelShape	| ss |	ss := shapes		collectWithIndex: [ :tupple :shapeIndex | 			| s |			tupple first updateFor: anElement trachelShape: (anElement trachelShape shapes at: shapeIndex).			s := anElement trachelShape shapes at: shapeIndex.			Array with: s with: tupple second ].	trachelShape setShapes: ss.	 	trachelShape perform: shapeFraming.	trachelShape perform: layout.	self setAutomaticUpdateLayoutIfNecessaryFor: ss and: trachelShape.	^ trachelShape</body></methods><methods><class-id>Roassal2.RTCompositeShape</class-id> <category>public</category><body package="Roassal2-Shapes">borderColor: aBlockOrColor	self allShapes do: [ :s | s borderColor: aBlockOrColor ]</body><body package="Roassal2-Shapes">borderWidth: aBlockOrColor	self allShapes do: [ :s | s borderWidth: aBlockOrColor ]</body><body package="Roassal2-Shapes">edgeFrom: el1 to: el2	^ (RTEdge from: el1 to: el2) addShape: self</body><body package="Roassal2-Shapes">setAutomaticRelayout	"If one of the shape changes its size, should we relayout."	automaticallyUpdateLayout := true</body><body package="Roassal2-Shapes">trachelShapeFor: anElement"	^ self updateFor: anElement trachelShape: TRMultiCompositeShape new"		| ss trachelShape |	trachelShape := TRCompositeShape new.	ss := shapes		collectWithIndex: [ :tupple :shapeIndex | 			| s |			s := tupple first trachelShapeFor: anElement.			Array with: s with: tupple second ].	trachelShape setShapes: ss.	trachelShape perform: shapeFraming.	trachelShape perform: layout.	self setAutomaticUpdateLayoutIfNecessaryFor: ss and: trachelShape.	^ trachelShape</body></methods><methods><class-id>Roassal2.RTCompositeShape</class-id> <category>public - layout</category><body package="Roassal2-Shapes">alignRight	shapeFraming := #alignRight</body><body package="Roassal2-Shapes">allOfSameSize	"Can be called before or after adding the shapes		Example:		box1 := RTBox new color: Color blue trans; size: 20.	box2 := RTBox new color: Color red trans; size: 10.	combo:= RTCompositeShape new allOfSameSize; add: box1; add: box2.	RTView new	    add: combo element. 	"	shapeFraming := #allOfSameSize</body><body package="Roassal2-Shapes">allOfSameSizeWithPadding	shapeFraming := #allOfSameSizeWithPadding</body><body package="Roassal2-Shapes">horizontal	layout := #horizontal</body><body package="Roassal2-Shapes">vertical	layout := #vertical</body></methods><methods><class-id>Roassal2.RTCompositeShape</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	shapes := OrderedCollection new.	shapeFraming := #yourself.	layout := #noLayout.	"If one of the shape changes its size, should we relayout. By default no"	automaticallyUpdateLayout := false</body></methods><methods><class-id>Roassal2.RTCompositeShape class</class-id> <category>instance creation</category><body package="Roassal2-Shapes">with: shape1 with: shape2	^ self new 		add: shape1;		add: shape2;		yourself</body></methods><methods><class-id>Roassal2.TRCallback</class-id> <category>testing</category><body package="Roassal2-Trachel-Callbacks">isAddedCallback	^ false</body><body package="Roassal2-Trachel-Callbacks">isCameraScaleCallback	^ false</body><body package="Roassal2-Trachel-Callbacks">isExtentCallback	^ false</body><body package="Roassal2-Trachel-Callbacks">isRemoveCallback	^ false</body><body package="Roassal2-Trachel-Callbacks">isTranslationCallback	^ false</body></methods><methods><class-id>Roassal2.TRCallback</class-id> <category>accessing</category><body package="Roassal2-Trachel-Callbacks">block	^ block</body><body package="Roassal2-Trachel-Callbacks">block: aOneArgBlock	"aThreeArgBlock follows the pattern [ :shape | ... ]"	block := aOneArgBlock</body></methods><methods><class-id>Roassal2.TRCallback</class-id> <category>initialization</category><body package="Roassal2-Trachel-Callbacks">initialize	super initialize.	block := [ :aShape :aValue | ]</body></methods><methods><class-id>Roassal2.TRCallback class</class-id> <category>public</category><body package="Roassal2-Trachel-Callbacks">block: aBlock	^ self new block: aBlock</body></methods><methods><class-id>Roassal2.TRDiamondShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-ShapesForArrow">accept: aVisitor	aVisitor visitDiamondShape: self</body></methods><methods><class-id>Roassal2.TRDiamondShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-ShapesForArrow">computePath	| vector r u unit middle endPoint |	vector := self to - self from.	r := vector r.	r = 0 ifTrue: [ ^ false ].		u := vector normal.	unit := vector / r.	endPoint := self to - (vector * (1-percentage)).	"toPointWithOffset := self to - (offset * (vector r - size) * unit)." "add offset"	end := endPoint - (2*unit * size). 	middle := endPoint - (unit * size). 	left :=  middle - (u * size * 0.7).	right := middle + (u * size * 0.7).	path := self athensCanvas		createPath: [ :builder | 			builder				absolute;				moveTo: end;				lineTo: left;				lineTo: endPoint;				lineTo: right;				lineTo: end. ]</body></methods><methods><class-id>Roassal2.TRFilledDiamondShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-ShapesForArrow">color: aColor	super color: aColor.	color := aColor</body></methods><methods><class-id>Roassal2.RTColorPalette</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizer">palette	^ self class palette.</body></methods><methods><class-id>Roassal2.RTColorPalette</class-id> <category>public</category><body package="Roassal2-ColorNormalizer">colors: nbOfColors 		|palette scheme|	palette := self palette.	scheme := palette keys atRandom.		^ self colors: nbOfColors scheme: scheme.</body><body package="Roassal2-ColorNormalizer">colors: nbOfColors scheme: aString 	|palette scheme|	palette := self palette.		"ERROR: number of colors is not an integer."	nbOfColors isInteger ifFalse: [ 		^ self error: 'Please, provide a correct number of colors' ].		"ERROR: scheme not found"	scheme := palette at: aString ifAbsent: [ 		^ self error: 'Scheme not found. Try with: ',(', ' join: palette keys)].		"Convert to list of colors and return"	^ self convertSchemeToColors:  (scheme at: nbOfColors ifAbsent: [ 			self error: 'Please, choice a number between: ', (',' join: scheme keys).		 ])</body><body package="Roassal2-ColorNormalizer">colorsPerScheme	"It returns a list of schemes and the numbers of colors it contains"	|table palette|	table := OrderedCollection new.	palette := self palette. 	palette keysAndValuesDo: [ :k :v | table add:  k -&gt; ((palette at: k) keys) ].	table asDictionary inspect.</body><body package="Roassal2-ColorNormalizer">scheme: aString 	|palette scheme nbOfColors |	palette := self palette.		"ERROR: scheme not found"	scheme := palette at: aString ifAbsent: [ 		^ self error: 'Scheme not found. Try with: ',(', ' join: palette keys)].		nbOfColors := scheme keys max.		"Convert to list of colors and return"	^ self convertSchemeToColors:  (scheme at: nbOfColors ifAbsent: [ 			self error: 'Please, choice a number between: ', (',' join: scheme keys).		 ])</body></methods><methods><class-id>Roassal2.RTColorPalette</class-id> <category>private - processing</category><body package="Roassal2-ColorNormalizer">convertSchemeToColors: aCollectionOfRGB256triplets	^  aCollectionOfRGB256triplets collect: [:triplet | Color fromRgb256Triplet: triplet ]</body></methods><methods><class-id>Roassal2.RTColorPalette</class-id> <category>showing palette</category><body package="Roassal2-ColorNormalizer">addTitleTo: groups on: view	|label|	label := (RTLabel new text: (self class paletteName)) element.	label translateBy: 0 @label height negated.	view add: label.		"Adding info"	label @ (RTPopup new group: [:infoGroup :el |			| background elements|			elements := OrderedCollection new.			background := (RTBox new color: (Color white alpha: 0.7)) element.						"add name of subpalette on the left of palette"			(';' split: self class info) do: [ :line | 				elements add: (RTLabel new text: line) element.			 ].			RTVerticalLineLayout on: elements.			RTNest new centerOn: background elements: elements.						infoGroup add: background .			infoGroup addAll: elements.		]).</body><body package="Roassal2-ColorNormalizer">drawSubPallete: rawColors named: subPaletteName on: view	| colors group label |	group := RTGroup new.	colors := rawColors collect: [ :t | Color fromRgb256Triplet: t ].		colors do: [ :c | |el|			el := (RTElement on: c) + (RTBox new size: 20; color: c).			el @ RTPopup.			el @ (RTMouseHoverZoom new desiredExtent: [ :anElement | anElement extent * 1.7 ]).			group add: el.			view add: el.		 ].		label := (RTLabel new text: subPaletteName) element.		label @ RTHighlightable.	label when: TRMouseClick do: [:evt | 		Smalltalk tools workspaceTool 			openContents: 'RTColorPalette ',(self class paletteName asLowercase),' colors: anInteger scheme:','''',subPaletteName,'''' ].		view add: label.	TRConstraint stick: label trachelShape onTheLeftOf: group first trachelShape. 		RTHorizontalLineLayout on: group.	^ group.</body><body package="Roassal2-ColorNormalizer">show	| view |	view := RTView new.	self viewOn: view.	view openInWindowSized: 600@700 titled: 'Color Palette: ',self class paletteName.	^ view</body><body package="Roassal2-ColorNormalizer">viewOn: view		| palette groups nbOfColors |	palette := self class palette.	groups := RTGroup new.	nbOfColors := 10.		"Draw palettes"	palette keysAndValuesDo: [ :subPaletteName :subPalletes |			groups add: (self drawSubPallete: (subPalletes at: (subPalletes keys max)) 									named: subPaletteName 									on: view).		 ].		RTVerticalLineLayout on: groups.	groups do: [ :aGroup | view addAll: aGroup ].		"add title and info"	self addTitleTo: groups on: view.</body></methods><methods><class-id>Roassal2.RTColorPalette class</class-id> <category>palettes</category><body package="Roassal2-ColorNormalizer">diverging	^ RTCPDiverging new</body><body package="Roassal2-ColorNormalizer">qualitative	^ RTCPQualitative new</body><body package="Roassal2-ColorNormalizer">sequential	^ RTCPSequential new</body></methods><methods><class-id>Roassal2.RTColorPalette class</class-id> <category>default</category><body package="Roassal2-ColorNormalizer">initializePalette	palette := self rawPalette asDictionary.	palette keysDo: [ :k |  |v|			v := palette at: k.			palette at: k put: v asDictionary.		 ]</body><body package="Roassal2-ColorNormalizer">rawPalette	"Here you will find all the scales with colors as tripets of rgb numbers [0..255]"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTColorPalette class</class-id> <category>info</category><body package="Roassal2-ColorNormalizer">info	self subclassResponsibility</body><body package="Roassal2-ColorNormalizer">paletteName	|clsName|	clsName := self asString. 	^ clsName copyFrom: 5 to: clsName size.</body></methods><methods><class-id>Roassal2.RTColorPalette class</class-id> <category>public</category><body package="Roassal2-ColorNormalizer">palette	^ palette ifNil: [ 			self initializePalette.			palette.		 ]</body><body package="Roassal2-ColorNormalizer">paletteFor: aColorScheme	"Returns an instance of CPDiverging, CPQualitative or CPSequential depending on which of them has the color scheme"	^ ((self subclasses collect: [:cls | Array with: cls with: cls palette ] ) detect: [ :p | p second keys includes: aColorScheme ]) first new</body><body package="Roassal2-ColorNormalizer">reset	"After executing this you would want to execute #palette to initialize it"	palette := nil.</body><body package="Roassal2-ColorNormalizer">show	"Open a window showing all colors scales of the palette"	^ self new show</body></methods><methods><class-id>Roassal2.RTCPQualitative class</class-id> <category>default</category><body package="Roassal2-ColorNormalizer">info	^ 'Qualitative schemes do not imply magnitude differences;between legend classes, and hues are used to create the;primary visual differences between classes. Qualitative schemes;are best suited to representing nominal or categorical data.'</body><body package="Roassal2-ColorNormalizer">rawPalette	^ ((Array new: 9) at: 1 put: ('Set2'-&gt;((Array new: 6) at: 1 put: (3-&gt;#(#(102 194 165 ) #(252 141 98 ) #(141 160 203 ) )); at: 2 put: (4-&gt;#(#(102 194 165 ) #(252 141 98 ) #(141 160 203 ) #(231 138 195 ) )); at: 3 put: (5-&gt;#(#(102 194 165 ) #(252 141 98 ) #(141 160 203 ) #(231 138 195 ) #(166 216 84 ) )); at: 4 put: (6-&gt;#(#(102 194 165 ) #(252 141 98 ) #(141 160 203 ) #(231 138 195 ) #(166 216 84 ) #(255 217 47 ) )); at: 5 put: (7-&gt;#(#(102 194 165 ) #(252 141 98 ) #(141 160 203 ) #(231 138 195 ) #(166 216 84 ) #(255 217 47 ) #(229 196 148 ) )); at: 6 put: (8-&gt;#(#(102 194 165 ) #(252 141 98 ) #(141 160 203 ) #(231 138 195 ) #(166 216 84 ) #(255 217 47 ) #(229 196 148 ) #(179 179 179 ) )); yourself)); at: 2 put: ('Accent'-&gt;((Array new: 6) at: 1 put: (3-&gt;#(#(127 201 127 ) #(190 174 212 ) #(253 192 134 ) )); at: 2 put: (4-&gt;#(#(127 201 127 ) #(190 174 212 ) #(253 192 134 ) #(255 255 153 ) )); at: 3 put: (5-&gt;#(#(127 201 127 ) #(190 174 212 ) #(253 192 134 ) #(255 255 153 ) #(56 108 176 ) )); at: 4 put: (6-&gt;#(#(127 201 127 ) #(190 174 212 ) #(253 192 134 ) #(255 255 153 ) #(56 108 176 ) #(240 2 127 ) )); at: 5 put: (7-&gt;#(#(127 201 127 ) #(190 174 212 ) #(253 192 134 ) #(255 255 153 ) #(56 108 176 ) #(240 2 127 ) #(191 91 23 ) )); at: 6 put: (8-&gt;#(#(127 201 127 ) #(190 174 212 ) #(253 192 134 ) #(255 255 153 ) #(56 108 176 ) #(240 2 127 ) #(191 91 23 ) #(102 102 102 ) )); yourself)); at: 3 put: ('Set1'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(228 26 28 ) #(55 126 184 ) #(77 175 74 ) )); at: 2 put: (4-&gt;#(#(228 26 28 ) #(55 126 184 ) #(77 175 74 ) #(152 78 163 ) )); at: 3 put: (5-&gt;#(#(228 26 28 ) #(55 126 184 ) #(77 175 74 ) #(152 78 163 ) #(255 127 0 ) )); at: 4 put: (6-&gt;#(#(228 26 28 ) #(55 126 184 ) #(77 175 74 ) #(152 78 163 ) #(255 127 0 ) #(255 255 51 ) )); at: 5 put: (7-&gt;#(#(228 26 28 ) #(55 126 184 ) #(77 175 74 ) #(152 78 163 ) #(255 127 0 ) #(255 255 51 ) #(166 86 40 ) )); at: 6 put: (8-&gt;#(#(228 26 28 ) #(55 126 184 ) #(77 175 74 ) #(152 78 163 ) #(255 127 0 ) #(255 255 51 ) #(166 86 40 ) #(247 129 191 ) )); at: 7 put: (9-&gt;#(#(228 26 28 ) #(55 126 184 ) #(77 175 74 ) #(152 78 163 ) #(255 127 0 ) #(255 255 51 ) #(166 86 40 ) #(247 129 191 ) #(153 153 153 ) )); yourself)); at: 4 put: ('Set3'-&gt;((Array new: 10) at: 1 put: (3-&gt;#(#(141 211 199 ) #(255 255 179 ) #(190 186 218 ) )); at: 2 put: (4-&gt;#(#(141 211 199 ) #(255 255 179 ) #(190 186 218 ) #(251 128 114 ) )); at: 3 put: (5-&gt;#(#(141 211 199 ) #(255 255 179 ) #(190 186 218 ) #(251 128 114 ) #(128 177 211 ) )); at: 4 put: (6-&gt;#(#(141 211 199 ) #(255 255 179 ) #(190 186 218 ) #(251 128 114 ) #(128 177 211 ) #(253 180 98 ) )); at: 5 put: (7-&gt;#(#(141 211 199 ) #(255 255 179 ) #(190 186 218 ) #(251 128 114 ) #(128 177 211 ) #(253 180 98 ) #(179 222 105 ) )); at: 6 put: (8-&gt;#(#(141 211 199 ) #(255 255 179 ) #(190 186 218 ) #(251 128 114 ) #(128 177 211 ) #(253 180 98 ) #(179 222 105 ) #(252 205 229 ) )); at: 7 put: (9-&gt;#(#(141 211 199 ) #(255 255 179 ) #(190 186 218 ) #(251 128 114 ) #(128 177 211 ) #(253 180 98 ) #(179 222 105 ) #(252 205 229 ) #(217 217 217 ) )); at: 8 put: (10-&gt;#(#(141 211 199 ) #(255 255 179 ) #(190 186 218 ) #(251 128 114 ) #(128 177 211 ) #(253 180 98 ) #(179 222 105 ) #(252 205 229 ) #(217 217 217 ) #(188 128 189 ) )); at: 9 put: (11-&gt;#(#(141 211 199 ) #(255 255 179 ) #(190 186 218 ) #(251 128 114 ) #(128 177 211 ) #(253 180 98 ) #(179 222 105 ) #(252 205 229 ) #(217 217 217 ) #(188 128 189 ) #(204 235 197 ) )); at: 10 put: (12-&gt;#(#(141 211 199 ) #(255 255 179 ) #(190 186 218 ) #(251 128 114 ) #(128 177 211 ) #(253 180 98 ) #(179 222 105 ) #(252 205 229 ) #(217 217 217 ) #(188 128 189 ) #(204 235 197 ) #(255 237 111 ) )); yourself)); at: 5 put: ('Dark2'-&gt;((Array new: 6) at: 1 put: (3-&gt;#(#(27 158 119 ) #(217 95 2 ) #(117 112 179 ) )); at: 2 put: (4-&gt;#(#(27 158 119 ) #(217 95 2 ) #(117 112 179 ) #(231 41 138 ) )); at: 3 put: (5-&gt;#(#(27 158 119 ) #(217 95 2 ) #(117 112 179 ) #(231 41 138 ) #(102 166 30 ) )); at: 4 put: (6-&gt;#(#(27 158 119 ) #(217 95 2 ) #(117 112 179 ) #(231 41 138 ) #(102 166 30 ) #(230 171 2 ) )); at: 5 put: (7-&gt;#(#(27 158 119 ) #(217 95 2 ) #(117 112 179 ) #(231 41 138 ) #(102 166 30 ) #(230 171 2 ) #(166 118 29 ) )); at: 6 put: (8-&gt;#(#(27 158 119 ) #(217 95 2 ) #(117 112 179 ) #(231 41 138 ) #(102 166 30 ) #(230 171 2 ) #(166 118 29 ) #(102 102 102 ) )); yourself)); at: 6 put: ('Paired'-&gt;((Array new: 10) at: 1 put: (3-&gt;#(#(166 206 227 ) #(31 120 180 ) #(178 223 138 ) )); at: 2 put: (4-&gt;#(#(166 206 227 ) #(31 120 180 ) #(178 223 138 ) #(51 160 44 ) )); at: 3 put: (5-&gt;#(#(166 206 227 ) #(31 120 180 ) #(178 223 138 ) #(51 160 44 ) #(251 154 153 ) )); at: 4 put: (6-&gt;#(#(166 206 227 ) #(31 120 180 ) #(178 223 138 ) #(51 160 44 ) #(251 154 153 ) #(227 26 28 ) )); at: 5 put: (7-&gt;#(#(166 206 227 ) #(31 120 180 ) #(178 223 138 ) #(51 160 44 ) #(251 154 153 ) #(227 26 28 ) #(253 191 111 ) )); at: 6 put: (8-&gt;#(#(166 206 227 ) #(31 120 180 ) #(178 223 138 ) #(51 160 44 ) #(251 154 153 ) #(227 26 28 ) #(253 191 111 ) #(255 127 0 ) )); at: 7 put: (9-&gt;#(#(166 206 227 ) #(31 120 180 ) #(178 223 138 ) #(51 160 44 ) #(251 154 153 ) #(227 26 28 ) #(253 191 111 ) #(255 127 0 ) #(202 178 214 ) )); at: 8 put: (10-&gt;#(#(166 206 227 ) #(31 120 180 ) #(178 223 138 ) #(51 160 44 ) #(251 154 153 ) #(227 26 28 ) #(253 191 111 ) #(255 127 0 ) #(202 178 214 ) #(106 61 154 ) )); at: 9 put: (11-&gt;#(#(166 206 227 ) #(31 120 180 ) #(178 223 138 ) #(51 160 44 ) #(251 154 153 ) #(227 26 28 ) #(253 191 111 ) #(255 127 0 ) #(202 178 214 ) #(106 61 154 ) #(255 255 153 ) )); at: 10 put: (12-&gt;#(#(166 206 227 ) #(31 120 180 ) #(178 223 138 ) #(51 160 44 ) #(251 154 153 ) #(227 26 28 ) #(253 191 111 ) #(255 127 0 ) #(202 178 214 ) #(106 61 154 ) #(255 255 153 ) #(177 89 40 ) )); yourself)); at: 7 put: ('Pastel2'-&gt;((Array new: 6) at: 1 put: (3-&gt;#(#(179 226 205 ) #(253 205 172 ) #(203 213 232 ) )); at: 2 put: (4-&gt;#(#(179 226 205 ) #(253 205 172 ) #(203 213 232 ) #(244 202 228 ) )); at: 3 put: (5-&gt;#(#(179 226 205 ) #(253 205 172 ) #(203 213 232 ) #(244 202 228 ) #(230 245 201 ) )); at: 4 put: (6-&gt;#(#(179 226 205 ) #(253 205 172 ) #(203 213 232 ) #(244 202 228 ) #(230 245 201 ) #(255 242 174 ) )); at: 5 put: (7-&gt;#(#(179 226 205 ) #(253 205 172 ) #(203 213 232 ) #(244 202 228 ) #(230 245 201 ) #(255 242 174 ) #(241 226 204 ) )); at: 6 put: (8-&gt;#(#(179 226 205 ) #(253 205 172 ) #(203 213 232 ) #(244 202 228 ) #(230 245 201 ) #(255 242 174 ) #(241 226 204 ) #(204 204 204 ) )); yourself)); at: 8 put: ('Pastel1'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(251 180 174 ) #(179 205 227 ) #(204 235 197 ) )); at: 2 put: (4-&gt;#(#(251 180 174 ) #(179 205 227 ) #(204 235 197 ) #(222 203 228 ) )); at: 3 put: (5-&gt;#(#(251 180 174 ) #(179 205 227 ) #(204 235 197 ) #(222 203 228 ) #(254 217 166 ) )); at: 4 put: (6-&gt;#(#(251 180 174 ) #(179 205 227 ) #(204 235 197 ) #(222 203 228 ) #(254 217 166 ) #(255 255 204 ) )); at: 5 put: (7-&gt;#(#(251 180 174 ) #(179 205 227 ) #(204 235 197 ) #(222 203 228 ) #(254 217 166 ) #(255 255 204 ) #(229 216 189 ) )); at: 6 put: (8-&gt;#(#(251 180 174 ) #(179 205 227 ) #(204 235 197 ) #(222 203 228 ) #(254 217 166 ) #(255 255 204 ) #(229 216 189 ) #(253 218 236 ) )); at: 7 put: (9-&gt;#(#(251 180 174 ) #(179 205 227 ) #(204 235 197 ) #(222 203 228 ) #(254 217 166 ) #(255 255 204 ) #(229 216 189 ) #(253 218 236 ) #(242 242 242 ) )); yourself)); at: 9 put: ('FlatUI1'-&gt;((Array new: 18) at: 1 put: (3-&gt;#( #(26 188 156) #(46 204 113) #(52 152 219) )); at: 2 put: (4-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) )); at: 3 put: (5-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) )); at: 4 put: (6-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) )); at: 5 put: (7-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) )); at: 6 put: (8-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) )); at: 7 put: (9-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) )); at: 8 put: (10-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) #(44 62 80) )); at: 9 put: (11-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) #(44 62 80) #(241 196 15) )); at: 10 put: (12-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) #(44 62 80) #(241 196 15) #(230 126 34) )); at: 11 put: (13-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) #(44 62 80) #(241 196 15) #(230 126 34) #(231 76 60) )); at: 12 put: (14-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) #(44 62 80) #(241 196 15) #(230 126 34) #(231 76 60) #(236 240 241) )); at: 13 put: (15-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) #(44 62 80) #(241 196 15) #(230 126 34) #(231 76 60) #(236 240 241) #(149 165 166) )); at: 14 put: (16-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) #(44 62 80) #(241 196 15) #(230 126 34) #(231 76 60) #(236 240 241) #(149 165 166) #(243 156 18) )); at: 15 put: (17-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) #(44 62 80) #(241 196 15) #(230 126 34) #(231 76 60) #(236 240 241) #(149 165 166) #(243 156 18) #(211 84 0) )); at: 16 put: (18-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) #(44 62 80) #(241 196 15) #(230 126 34) #(231 76 60) #(236 240 241) #(149 165 166) #(243 156 18) #(211 84 0) #(192 57 43) )); at: 17 put: (19-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) #(44 62 80) #(241 196 15) #(230 126 34) #(231 76 60) #(236 240 241) #(149 165 166) #(243 156 18) #(211 84 0) #(192 57 43) #(189 195 199) )); at: 18 put: (20-&gt;#(#(26 188 156) #(46 204 113) #(52 152 219) #(155 89 182) #(52 73 94) #(22 160 133) #(39 174 96) #(41 128 185) #(142 68 173) #(44 62 80) #(241 196 15) #(230 126 34) #(231 76 60) #(236 240 241) #(149 165 166) #(243 156 18) #(211 84 0) #(192 57 43) #(189 195 199) #(127 140 141) )); yourself)); yourself)</body></methods><methods><class-id>Roassal2.RTCircleTree</class-id> <category>accessing</category><body package="Roassal2-Builder-CircularMap">center	^ RTVector new x: x; y: y</body><body package="Roassal2-Builder-CircularMap">r	^ r</body><body package="Roassal2-Builder-CircularMap">r: cr	x := 0.	y := 0.	r := cr.</body><body package="Roassal2-Builder-CircularMap">verctor: v r: cr	x := v x.	y := v y.	r := cr.</body><body package="Roassal2-Builder-CircularMap">x	^ x</body><body package="Roassal2-Builder-CircularMap">x: cx y: cy r: cr	x := cx.	y := cy.	r := cr.</body><body package="Roassal2-Builder-CircularMap">y	^ y</body></methods><methods><class-id>Roassal2.RTCircleTree</class-id> <category>public</category><body package="Roassal2-Builder-CircularMap">scaleFull: factor	x := x * factor.	y := y * factor.	r := r * factor.</body><body package="Roassal2-Builder-CircularMap">translateBy: v	x := x + v x.	y := y + v y.</body></methods><methods><class-id>Roassal2.RTCircleTree class</class-id> <category>public</category><body package="Roassal2-Builder-CircularMap">centerMinus: c1 with: c0	| inst |	inst := RTVector new.	inst x: c1 x - c0 x.	inst y: c1 y - c0 y.	^ inst.</body><body package="Roassal2-Builder-CircularMap">combine: c0 with: c1	| vr r inst |	vr := self centerMinus: c1 with: c0.	vr lengthenBy: c0 r + c1 r.	vr scaleBy: 0.5.	r := vr magnitude.	r &gt;= c0 r ifTrue: [ 		vr shortenBy: c0 r.		vr add: c0 center.		inst := self new.		inst verctor: vr r: r.		^ inst ].		^ c0 r &gt;= c1 r ifTrue: [ c0 ] ifFalse: [ c1 ].</body><body package="Roassal2-Builder-CircularMap">distanceOf: c0 and: c1	| a b |	a := c0 x - c1 x.	b := c0 y - c1 y.	^ ((a * a) + (b *b )) sqrt</body><body package="Roassal2-Builder-CircularMap">doIntersect: c0 with: c1	^ (c1 center - c0 center) magnitude &lt; (c0 r + c1 r - self epsilon)</body><body package="Roassal2-Builder-CircularMap">epsilon	^ 1.0e-0006</body></methods><methods><class-id>Roassal2.RTAxisAdaptedBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-AxisAdapted">initialize	super initialize.	self configureView: view.	self defaultMargin.	xAxisConfiguration := self createAxisConfiguration.	xAxisConfiguration numberOfTicks: 4.	xAxisConfiguration tickLabelOffset: 0 @ -20.	yAxisConfiguration := self createAxisConfiguration.	yAxisConfiguration numberOfTicks: 4.	yAxisConfiguration tickLabelOffset: -30 @ 0.	objects := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTAxisAdaptedBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-AxisAdapted">axisOrigin		^ (minX - self margin)@(minY - self margin)</body><body package="Roassal2-Builder-AxisAdapted">createAxis	| origin xAxisPoint yAxisPoint |			origin := self axisOrigin.	xAxisPoint := self xAxisPoint: (origin y).	yAxisPoint := self yAxisPoint: (origin x).	self axisXFrom: origin to: xAxisPoint.	self axisYFrom: origin to: yAxisPoint.</body><body package="Roassal2-Builder-AxisAdapted">defaultMargin	self margin: 50.</body><body package="Roassal2-Builder-AxisAdapted">setObjectsLimits		minX := (objects collect: [:o | (o position x) - (o width /2 )]) min.	maxX := (objects collect: [:o | (o position x) + (o width /2 )]) max.		minY := (objects collect: [:o | (o position y) - (o height /2 )]) min.	maxY := (objects collect: [:o | (o position y) + (o height /2 )]) max.</body><body package="Roassal2-Builder-AxisAdapted">xAxisDefaultConfigurationOrigin: aPoint toPoint: anotherPoint	xAxisConfiguration fromPoint: aPoint.	xAxisConfiguration toPoint: anotherPoint.	xAxisConfiguration maxValue: anotherPoint x.	xAxisConfiguration minValue: aPoint x.</body><body package="Roassal2-Builder-AxisAdapted">xAxisPoint: aFixedY	^ (maxX + self margin)@aFixedY</body><body package="Roassal2-Builder-AxisAdapted">yAxisDefaultConfigurationOrigin: aPoint toPoint: anotherPoint	yAxisConfiguration fromPoint: aPoint.	yAxisConfiguration toPoint: anotherPoint.	yAxisConfiguration maxValue: anotherPoint y.	yAxisConfiguration minValue: aPoint y.</body><body package="Roassal2-Builder-AxisAdapted">yAxisPoint: aFixedX	^ aFixedX@(maxY + self margin)</body></methods><methods><class-id>Roassal2.RTAxisAdaptedBuilder</class-id> <category>private-axis</category><body package="Roassal2-Builder-AxisAdapted">axisXFrom: anOriginPoint to: aPoint	| config |	(self xAxisConfiguration fromPoint) ifNil: [ self xAxisDefaultConfigurationOrigin: anOriginPoint toPoint: aPoint].		config := self xAxisConfiguration.	RTAxisRenderer new builder: self; config: config; axisFrom: anOriginPoint to: aPoint.</body><body package="Roassal2-Builder-AxisAdapted">axisYFrom: anOriginPoint to: aPoint	| config |	(self yAxisConfiguration fromPoint) ifNil: [ self yAxisDefaultConfigurationOrigin: anOriginPoint toPoint: aPoint].		config := self yAxisConfiguration.	RTAxisRenderer new builder: self; config: config; axisFrom: anOriginPoint to: aPoint.</body></methods><methods><class-id>Roassal2.RTAxisAdaptedBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-AxisAdapted">margin	^ margin</body><body package="Roassal2-Builder-AxisAdapted">margin: aSize	margin := aSize</body><body package="Roassal2-Builder-AxisAdapted">objects	^ objects</body><body package="Roassal2-Builder-AxisAdapted">objects: anRTElementsCollection	objects := anRTElementsCollection.	self setObjectsLimits.</body><body package="Roassal2-Builder-AxisAdapted">xAxisConfiguration	^ xAxisConfiguration</body><body package="Roassal2-Builder-AxisAdapted">xAxisConfiguration: anAxisConfiguration	xAxisConfiguration := anAxisConfiguration</body><body package="Roassal2-Builder-AxisAdapted">yAxisConfiguration	^ yAxisConfiguration</body><body package="Roassal2-Builder-AxisAdapted">yAxisConfiguration: anAxisConfiguration	yAxisConfiguration := anAxisConfiguration</body></methods><methods><class-id>Roassal2.RTAxisAdaptedBuilder</class-id> <category>view</category><body package="Roassal2-Builder-AxisAdapted">configureView: aView	aView @ RTDraggableView.</body></methods><methods><class-id>Roassal2.RTAxisAdaptedBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-AxisAdapted">createView	^ super createView @ RTDraggableView</body><body package="Roassal2-Builder-AxisAdapted">renderIn: aView	self assert: (objects isNotNil).		self createAxis.</body></methods><methods><class-id>Roassal2.RTAxisAdaptedBuilder</class-id> <category>utility</category><body package="Roassal2-Builder-AxisAdapted">createAxisConfiguration	| newAxis |	newAxis := RTAxisConfiguration new.	newAxis builder: self.	^ newAxis</body></methods><methods><class-id>Roassal2.TRMouseClick</class-id> <category>*Roassal2Spec</category><body package="Roassal2-Trachel-Events">isMouse	^ true</body></methods><methods><class-id>Roassal2.TRPolygonShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">basicEncompassingRectangle	"Return the bounding box of all the vertices."	self numberOfVertices = 0		ifTrue: [ ^ 0 @ 0 corner: 0 @ 0 ].	^ vertices min corner: vertices max</body><body package="Roassal2-Trachel-Shapes">center	"Return the center of the polygon. The center is determined as the center of encompassing rectangle, which may be different from the exact center of the shape (e.g., the value returned by this method may be actually outside the shape itself)."	^ self encompassingRectangle center</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	^ self transformedEncompassingRectangle</body><body package="Roassal2-Trachel-Shapes">extent	^ self encompassingRectangle extent</body><body package="Roassal2-Trachel-Shapes">extent: newExtent	| oldExtent min max sx sy |	oldExtent := self basicEncompassingRectangle extent.	newExtent = oldExtent		ifTrue: [ ^ self ].	min := vertices min.	max := vertices max.	sx := newExtent x / (max x - min x).	sy := newExtent y / (max y - min y).	vertices := vertices collect: [ :p | (p x * sx) @ (p y * sy) ].	self resetPath.	oldExtent = (0@0)		ifFalse: [ self triggerCallbacksForNewExtent: newExtent oldExtent: oldExtent ]</body><body package="Roassal2-Trachel-Shapes">height	^ self encompassingRectangle height</body><body package="Roassal2-Trachel-Shapes">height: newHeight	self extent: self basicEncompassingRectangle width @ newHeight</body><body package="Roassal2-Trachel-Shapes">numberOfVertices	"Return the number of vertices contained in the polygon"	^ vertices size</body><body package="Roassal2-Trachel-Shapes">strokeWidth	^ strokeWidth</body><body package="Roassal2-Trachel-Shapes">strokeWidth: aWidth	"Set the size of the stroke (i.e., line width)"	strokeWidth := aWidth</body><body package="Roassal2-Trachel-Shapes">vertices	^ vertices</body><body package="Roassal2-Trachel-Shapes">vertices: aCollection 	vertices := aCollection</body><body package="Roassal2-Trachel-Shapes">width	^ self encompassingRectangle width</body><body package="Roassal2-Trachel-Shapes">width: newWidth	self extent: newWidth @ self basicEncompassingRectangle</body></methods><methods><class-id>Roassal2.TRPolygonShape</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">computePath	canvas ifNil: [ ^ self ].	self numberOfVertices = 0 ifTrue: [ 		path := self athensCanvas		createPath: [ :builder | ].		^ self ].	path := self athensCanvas		createPath: [ :builder | 			builder				absolute;				moveTo: vertices last.			vertices do: [ :v |				builder lineTo: v ].			builder closePath ]</body></methods><methods><class-id>Roassal2.TRPolygonShape</class-id> <category>actions</category><body package="Roassal2-Trachel-Shapes">translateBy: aPoint	vertices := vertices collect:[ :each | each + aPoint].	self triggerCallbacksForStep: aPoint.	self computePath</body><body package="Roassal2-Trachel-Shapes">translateTo: aPoint	| dist |	dist := aPoint - self encompassingRectangle center.	self translateBy: dist.</body></methods><methods><class-id>Roassal2.TRPolygonShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitPolygonShape: self</body></methods><methods><class-id>Roassal2.TRPolygonShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: point  ^ (TRPlatform current polygonTesterClass new polygon: vertices ) includesPoint: point.</body></methods><methods><class-id>Roassal2.TRPolygonShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	| pt  scale ratio |	pt := athensCanvas pathTransform.	pt restoreAfter: [		pt scaleBy: matrix sx @ matrix sy.				athensCanvas			setShape: self path.		color isNotNil ifTrue: [ athensCanvas setPaint: self themedColor; draw ].				self canvas ifNil: [ ^ self ].	scale := self canvas camera scale.	scale &lt; 1 		ifTrue: [ ratio := self strokeWidth ] 		ifFalse: [ ratio := self strokeWidth / scale].	^ strokePaint		ifNotNil: [ 			(athensCanvas setStrokePaint: self themedStrokeColor) width: ratio asFloat.			athensCanvas drawShape: path]]</body></methods><methods><class-id>Roassal2.TRPolygonShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	strokeWidth := 1.0.	self vertices: #()</body></methods><methods><class-id>Roassal2.RTNumberInterpolator</class-id> <category>as yet unclassified</category><body package="Roassal2-Experimental">interpolate: t	^ (start * (1 - t)) + (stop * t).</body></methods><methods><class-id>Roassal2.RTAlignment</class-id> <category>public</category><body package="Roassal2-Core">alignFromBottomUsing: anElement	"The argument anElement is a fix point. It does not move"	| topY newY |	topY := anElement encompassingRectangle bottomCenter y.	elements do: [ :s |		newY := topY - (s encompassingRectangle height / 2).		s translateTo: s position x @ newY	]</body><body package="Roassal2-Core">alignFromLeftUsing: anElement	| topX newX |	topX := anElement encompassingRectangle topLeft x.	elements do: [ :s |		newX := topX + (s encompassingRectangle width / 2).		s translateTo: newX @ s position y	]</body><body package="Roassal2-Core">alignFromRightUsing: anElement	| topX newX |	topX := anElement encompassingRectangle topRight x.	elements do: [ :s |		newX := topX - (s encompassingRectangle width / 2).		s translateTo: newX @ s position y	]</body><body package="Roassal2-Core">alignFromTopUsing: anElement	| topY newY |	topY := anElement encompassingRectangle topCenter y.	elements do: [ :s |		newY := topY + (s encompassingRectangle height / 2).		s translateTo: s position x @ newY	]</body><body package="Roassal2-Core">bottom	self hasElement ifFalse: [ ^ self ].	self alignFromBottomUsing: self bottomMostElement</body><body package="Roassal2-Core">left	self hasElement ifFalse: [ ^ self ].	self alignFromLeftUsing: self leftMostElement</body><body package="Roassal2-Core">right	self hasElement ifFalse: [ ^ self ].	self alignFromRightUsing: self rightMostElement</body><body package="Roassal2-Core">top	self hasElement ifFalse: [ ^ self ].	self alignFromTopUsing: self topMostElement</body></methods><methods><class-id>Roassal2.RTAlignment</class-id> <category>testing</category><body package="Roassal2-Core">hasElement	"Return true if some elements have been set"	^ (elements isNil or: [ elements isEmpty ]) not</body></methods><methods><class-id>Roassal2.RTAlignment</class-id> <category>accessing - computed</category><body package="Roassal2-Core">bottomMostElement	fixedElement ifNotNil: [ ^ fixedElement ].	^ elements inject: elements first into: [ :maxS :s | 			maxS encompassingRectangle top &lt;= s encompassingRectangle top					ifTrue: [ s ] ifFalse: [ maxS ] ]</body><body package="Roassal2-Core">leftMostElement	fixedElement ifNotNil: [ ^ fixedElement ].	^ elements inject: elements first into: [ :maxS :s | 			maxS encompassingRectangle left &gt;= s encompassingRectangle left					ifTrue: [ s ] ifFalse: [ maxS ] ]</body><body package="Roassal2-Core">rightMostElement	fixedElement ifNotNil: [ ^ fixedElement ].	^ elements inject: elements first into: [ :maxS :s | 			maxS encompassingRectangle right &lt;= s encompassingRectangle right					ifTrue: [ s ] ifFalse: [ maxS ] ]</body><body package="Roassal2-Core">topMostElement	fixedElement ifNotNil: [ ^ fixedElement ].	^ elements inject: elements first into: [ :maxS :s | 			maxS encompassingRectangle top &gt;= s encompassingRectangle top					ifTrue: [ s ] ifFalse: [ maxS ] ]</body></methods><methods><class-id>Roassal2.AthensPolygonTester</class-id> <category>testing</category><body package="Roassal2-Pharo">includesPoint: aPoint"Thanks to Google and Randolph Franklin i don't have to reinvent this very simple algorithm.See [ 1 ] for details, copyrights etc.[1] http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html"	| inside testX testY i j size |		inside := false.		i := 1.	size := polygon size.	j := size.	testX := aPoint x.	testY := aPoint y.		[ i &lt;= size ] whileTrue: [  | pi pj |		pi := polygon at: i.		pj := polygon at: j. 			(((pi y &gt; testY) ~= (pj y &gt; testY)) and: [ 			testX &lt; 			(				pj x - pi x				* (testY - pi y) 				/ ( pj y - pi y )				+ pi x 			)			 ]) ifTrue: [ inside := inside not ].			j := i.		i := i + 1.	 ].	^ inside</body></methods><methods><class-id>Roassal2.AthensPolygonTester</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Roassal2.AthensPolygonTester</class-id> <category>accessing</category><body package="Roassal2-Pharo">polygon: poly	polygon := poly</body></methods><methods><class-id>Roassal2.AthensPolygonTester class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">new	^ super new initialize.</body></methods><methods><class-id>Roassal2.RTNColorLinearNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizerOBSOLETE">highColor: aBlock		highColor := aBlock</body><body package="Roassal2-ColorNormalizerOBSOLETE">lowColor: aBlock		lowColor := aBlock</body><body package="Roassal2-ColorNormalizerOBSOLETE">maxBrightness: aBlock		maxBrightness := aBlock</body><body package="Roassal2-ColorNormalizerOBSOLETE">minBrightness: aBlock		minBrightness := aBlock</body><body package="Roassal2-ColorNormalizerOBSOLETE">rtValue: anEntity	"Calculates the color of the entity based on the context."		| myValue myHighColor myLowColor myMinBrightness myMaxBrightness weight minValue maxValue |	"Get color specific data"	minValue :=  self minimumValue: anEntity.	maxValue :=  self maximumValue: anEntity.	myMinBrightness := self minBrightnessFor: anEntity.	myMaxBrightness := self maxBrightnessFor: anEntity.	myHighColor := self highColorFor: anEntity.	myLowColor := self lowColorFor: anEntity.	"Get data"	weight := minValue = maxValue 		ifTrue: [(myMinBrightness + myMaxBrightness) / 2]		ifFalse: [				myValue := (self command rtValue: anEntity) - (self minimumValue: anEntity).			myMinBrightness + (myValue abs / (maxValue - minValue) * (myMaxBrightness - myMinBrightness)) ].	^self blend: myLowColor with: myHighColor weight: weight</body></methods><methods><class-id>Roassal2.RTNColorLinearNormalizer</class-id> <category>private</category><body package="Roassal2-ColorNormalizerOBSOLETE">blend: aColor with: aColorValue weight: wt	"Answer a new ColorValue which is a weighted blend of the receiver and the	supplied ColorValue."	"Simply interpolates in RGB space."	| rv gv bv invWt av |		invWt := 1-wt.	rv := ((aColor red * invWt) + ((aColorValue red)*wt)) "rounded".	gv := ((aColor green  * invWt) + ((aColorValue green)*wt)) "rounded".	bv := ((aColor blue * invWt) + ((aColorValue blue)*wt)) "rounded".	av := ((aColor alpha * invWt) + ((aColorValue alpha)*wt)).	^Color r: rv g: gv b: bv alpha: av</body></methods><methods><class-id>Roassal2.RTNColorLinearNormalizer</class-id> <category>translator protocol</category><body package="Roassal2-ColorNormalizerOBSOLETE">highColorFor: anEntity		^highColor rtValue: anEntity</body><body package="Roassal2-ColorNormalizerOBSOLETE">lowColorFor: anEntity		^lowColor rtValue: anEntity</body><body package="Roassal2-ColorNormalizerOBSOLETE">maxBrightnessFor: anEntity		^maxBrightness isNil		ifTrue: [1.0]		ifFalse: [maxBrightness rtValue: anEntity]</body><body package="Roassal2-ColorNormalizerOBSOLETE">minBrightnessFor: anEntity		^minBrightness isNil		ifTrue: [0.0]		ifFalse: [minBrightness rtValue: anEntity]</body></methods><methods><class-id>Roassal2.RTNColorLinearNormalizer</class-id> <category>initialize-release</category><body package="Roassal2-ColorNormalizerOBSOLETE">initialize		super initialize.	lowColor := Color white.	highColor := Color black</body></methods><methods><class-id>Roassal2.RTNColorLinearNormalizer class</class-id> <category>instance creation</category><body package="Roassal2-ColorNormalizerOBSOLETE">inContext: aCollection lowColor: lowColor highColor: highColor		| normalizer |	normalizer := self inContext: aCollection.	normalizer lowColor: lowColor.	normalizer highColor: highColor.	^normalizer</body><body package="Roassal2-ColorNormalizerOBSOLETE">inContext: aCollection lowColor: lowColor lowThreshold: lowThreshold highColor: highColor highThreshold: highThreshold		| normalizer |	normalizer := self inContext: aCollection.	normalizer lowColor: lowColor.	normalizer highColor: highColor.	normalizer minBrightness: lowThreshold.	normalizer maxBrightness: highThreshold.	^normalizer</body><body package="Roassal2-ColorNormalizerOBSOLETE">inContext: aCollection withCommand: aBlock lowColor: lowColor highColor: highColor		| normalizer |	normalizer := self inContext: aCollection withCommand: aBlock.	normalizer lowColor: lowColor.	normalizer highColor: highColor.	^normalizer</body><body package="Roassal2-ColorNormalizerOBSOLETE">inContext: aCollection withCommand: aBlock lowColor: lowColor lowThreshold: lowThreshold highColor: highColor highThreshold: highThreshold		| normalizer |	normalizer := self inContext: aCollection withCommand: aBlock.	normalizer lowColor: lowColor.	normalizer highColor: highColor.	normalizer minBrightness: lowThreshold.	normalizer maxBrightness: highThreshold.	^normalizer</body></methods><methods><class-id>Roassal2.TRExtentCallback</class-id> <category>actions</category><body package="Roassal2-Trachel-Callbacks">shape: aTRShape newExtent: newExtent oldExtent: oldExtent	^ (oldExtent x = 0 or: [ oldExtent y = 0 ]) 		ifTrue: [ self						shape: aTRShape						ratio: 0  ]		ifFalse: [ self						shape: aTRShape						ratio: newExtent / oldExtent ]</body><body package="Roassal2-Trachel-Callbacks">shape: aTRShape ratio: aRatio	^ block cull: aTRShape cull: aRatio</body></methods><methods><class-id>Roassal2.TRExtentCallback</class-id> <category>testing</category><body package="Roassal2-Trachel-Callbacks">isExtentCallback	^ true</body></methods><methods><class-id>Roassal2.RTDataEvolver</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Map">currentValue	^ self valueAt: stepGiver step.</body><body package="Roassal2-Builder-Map">dataSequence: aSequenceOfData	data := aSequenceOfData.</body><body package="Roassal2-Builder-Map">stepGiver: anObject	stepGiver := anObject</body><body package="Roassal2-Builder-Map">valueAt: step	^ data at: step</body></methods><methods><class-id>Roassal2.TRBezier3Shape</class-id> <category>public</category><body package="Roassal2-Trachel-Shapes">points: points	self assert: [ points size = 3 ] description: 'Only 3 points may be provided'.	listOfPoints := points</body><body package="Roassal2-Trachel-Shapes">points: aListOfPoints color: aColor	self assert: [ aListOfPoints size = 3 ] description: 'Only 3 points may be provided'.		self points: aListOfPoints.	self strokePaint: aColor.	self color: aColor</body></methods><methods><class-id>Roassal2.TRBezier3Shape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitBezierShape: self</body><body package="Roassal2-Trachel-Shapes">accept: aVisitor with: decoration	aVisitor visitBezierShape: self with: decoration</body></methods><methods><class-id>Roassal2.TRBezier3Shape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint 	| delta points p1 p2 |	delta := 5.	points := self points.	1 to: points size -1 do: [ :i |		p1 := points at: i.		p2 := points at: i + 1.		(aPoint onLineFrom: p1 to: p2 within: delta) ifTrue: [ ^ true ] ].	^ false.</body></methods><methods><class-id>Roassal2.TRBezier3Shape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	listOfPoints := Array with: 0 @ 0 with: 0 @ 0 with: 0 @ 0</body></methods><methods><class-id>Roassal2.TRBezier3Shape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">encompassingRectangle	^ Rectangle encompassing: listOfPoints</body><body package="Roassal2-Trachel-Shapes">numberOfPoints	^ self points size</body><body package="Roassal2-Trachel-Shapes">points	^ listOfPoints copy</body><body package="Roassal2-Trachel-Shapes">position	^ self encompassingRectangle center</body></methods><methods><class-id>Roassal2.TRBezier3Shape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	athensCanvas pathTransform		restoreAfter: [ athensCanvas setShape: self path.			(athensCanvas setStrokePaint: self themedColor) width: width asFloat.			athensCanvas draw ]</body></methods><methods><class-id>Roassal2.TRBezier3Shape</class-id> <category>actions</category><body package="Roassal2-Trachel-Shapes">translateBy: aPoint	listOfPoints := listOfPoints collect: [ :p | p + aPoint ]</body></methods><methods><class-id>Roassal2.TRBezier3Shape</class-id> <category>hooks</category><body package="Roassal2-Trachel-Shapes">computePath	path := self athensCanvas		createPath: [ :builder | 			builder				absolute;				moveTo: listOfPoints first.			builder 				curveViaX: listOfPoints first x asFloat Y: listOfPoints first y asFloat				viaX: listOfPoints second x asFloat Y: listOfPoints second y asFloat 				toX: listOfPoints third x asFloat Y: listOfPoints third y asFloat.		]</body></methods><methods><class-id>Roassal2.RTAbstractPopup</class-id> <category>initialization</category><body package="Roassal2-Interactions">createAndShowPopupFor: element event: event	| popupPosition popup idealPosition |	self removeLastPopup.		popup := self getNewPopupFor: element.	self lastPopup: popup.		"The following is useful when testing"	event position isNil		ifTrue: [ idealPosition := element position ]		ifFalse: [ idealPosition := event position ].	popupPosition := self closestPositionOf: popup from: idealPosition inView: element view.	popup translateTo: popupPosition.</body><body package="Roassal2-Interactions">getNewPopupFor: element	| popup |	popup := self createPopupFor: element.	element view add: popup.	popup trachelShape setAsFixed.	^ popup trachelShape signalUpdate</body></methods><methods><class-id>Roassal2.RTAbstractPopup</class-id> <category>utility</category><body package="Roassal2-Interactions">closestPositionOf: popup from: position inView: aView	"Return the closest position for el to realPosition to be entierely visible in the view"	"position is the location in the space"	| idealVirtualPosition virtualPositionX virtualPositionY winSize |	idealVirtualPosition := position.	winSize := aView canvas extent.	"Happens if we are in a test"	winSize ifNil: [ winSize := 500 @ 500 ].	"Check if the element is within the width of the view"	virtualPositionX := 		((idealVirtualPosition x + popup width + self popupOffset x) &lt; winSize x) 			ifTrue: [ idealVirtualPosition x + self popupOffset x ]			ifFalse: [ winSize x - popup width - self popupOffset x ].	virtualPositionX &lt; 0		ifTrue: [ virtualPositionX := self popupOffset x ].	virtualPositionY := 		((idealVirtualPosition y + popup height + self popupOffset y) &lt; winSize y) 			ifTrue: [ idealVirtualPosition y + self popupOffset y ]			ifFalse: [ idealVirtualPosition y - popup height - self popupOffset y ].	virtualPositionY  &lt; 0		ifTrue: [ virtualPositionY := self popupOffset y ].		^ virtualPositionX @ virtualPositionY</body><body package="Roassal2-Interactions">lastPopup: anElement 	self class lastPopup: anElement</body><body package="Roassal2-Interactions">removeLastPopup	self class removeLastPopup</body></methods><methods><class-id>Roassal2.RTAbstractPopup</class-id> <category>configuration</category><body package="Roassal2-Interactions">popupOffset	^ 15 @ 15</body></methods><methods><class-id>Roassal2.RTAbstractPopup</class-id> <category>hooks</category><body package="Roassal2-Interactions">createElementFor: element	self subclassResponsibility</body><body package="Roassal2-Interactions">initializeElement: element	element		when: TRMouseClick		do: [ :event | 			self removeLastPopup.			element trachelShape signalUpdate ].			element		when: TRMouseEnter		do: [ :event | 			self createAndShowPopupFor: element event: event ].	element		when: TRMouseLeave		do: [ :event | 			self removeLastPopup.			element trachelShape signalUpdate ].	element		when: TRMouseDragging		do: [ :event | 			self removeLastPopup.			element trachelShape signalUpdate ]</body></methods><methods><class-id>Roassal2.RTAbstractPopup</class-id> <category>creation</category><body package="Roassal2-Interactions">createPopupFor: element	| el |	el := self createElementFor: element.	"el on: TRMouseLeave do: [ :e | el view remove: el ifAbsent: [  ] ]."	"(self receivingViewFor: element) add: el.	"	"self popups add: el."	^ el</body></methods><methods><class-id>Roassal2.RTAbstractPopup class</class-id> <category>lastPopup</category><body package="Roassal2-Interactions">lastPopup	"Return the group of elements that have been recently added as a popup"	lastPopup isNil ifTrue: [ ^ nil ].	^ RTGroup withAll: lastPopup	"	^ lastPopup isNil		ifTrue: [ nil ]		ifFalse: [ lastPopup first ]""	(lastPopup notNil and: [ lastPopup size &gt; 0 ]) ifTrue: [ ^ lastPopup first ]. 	^ nil."	"	^ lastPopup isNil		ifTrue: [ nil ]		ifFalse: [ lastPopup ]"</body><body package="Roassal2-Interactions">lastPopup: anObject	"Typically, the argument is an RTGroup. But it could be an RTElement or any morph (which happens if the platform popup is used)"	anObject class == RTGroup		ifTrue: [ lastPopup := WeakArray withAll: anObject.			^ self ].	lastPopup := WeakArray with: anObject</body><body package="Roassal2-Interactions">removeLastPopup	self lastPopup ifNil: [ ^ self ].	self lastPopup view		ifNil: [ 			self resetLastPopup.			^ self ].	self lastPopup remove.	self resetLastPopup.</body><body package="Roassal2-Interactions">resetLastPopup	lastPopup := nil</body></methods><methods><class-id>Roassal2.RTPopup</class-id> <category>public</category><body package="Roassal2-Interactions">background: aColor group: aTwoArgBlock	"aTwoArgBlock has to follow the pattern [ :group :element |  ... ]	group is an empty group. You need to add what you want to be displayed in the popup. el is the element on which the mouse is above."		self group: [ :group :el |		| backgroundElement |		backgroundElement := self createBackgroundElement: aColor.		group add: backgroundElement.		aTwoArgBlock value: group value: el.		RTNest new centerOn: backgroundElement elements: (group copyWithout: backgroundElement).		]</body><body package="Roassal2-Interactions">group: aTwoArgBlock	"aTwoArgBlock has to follow the pattern [ :group :element |  ... ]	group is an empty group. You need to add what you want to be displayed in the popup. el is the element on which the mouse is above."	groupBlock := aTwoArgBlock</body><body package="Roassal2-Interactions">named: aOneArgBlock background: aColor group: aTwoArgBlock	"aTwoArgBlock has to follow the pattern [ :group :element |  ... ]	group is an empty group. You need to add what you want to be displayed in the popup. el is the element on which the mouse is above."	self		group: [ :group :el | 			| background label |			background := self createBackgroundElement: aColor.			label := (RTLabel new				text: aOneArgBlock;				color: Color black) elementOn: el model.			aTwoArgBlock value: group value: el.			group				addFirst: background;				addFirst: label.			RTNest new centerOn: background elements: (group copyWithoutAll: (Array with: background with: label)).			TRConstraint move: label above: background ]</body><body package="Roassal2-Interactions">namedBackground: aColor group: aTwoArgBlock	"aTwoArgBlock has to follow the pattern [ :group :element |  ... ]	group is an empty group. You need to add what you want to be displayed in the popup. el is the element on which the mouse is above."	^ self named: #yourself background: aColor group: aTwoArgBlock</body><body package="Roassal2-Interactions">simpleText: aOneArgBlock	self group: [ :group :element | 		group add: 			(RTLabel new 				color: Color black;				text: (aOneArgBlock rtValue: element model)) element		]</body><body package="Roassal2-Interactions">text: aOneArgBlock	"	Set the text of the popup	The argument, when evaluated with an object return an object, to which #asString is sent to	The argument receives		- an object, in case that the popup is defined for RTElement		- an association (from -&gt; to) in case the popup is added to edges		Here is an example that define a popup on edges	b := RTMondrian new.	b shape circle size: 10; color: Color red.	b nodes: (1 to: 20).	edges := b edges moveBehind; connectFrom: [ :v | v // 2 ].	edges @ RTHighlightable.	edges @ (RTPopup text: [ :association | 'An edge from ', association key asString, ' to ', association value asString ]).	b layout cluster.	b		"	self textElement: [ :el | aOneArgBlock rtValue: el model ]</body><body package="Roassal2-Interactions">textElement: aOneArgBlock	"	Set the text of the popup	The argument, when evaluated with a RTElement return an object, to which #asString is sent to		See #text: for a longer description	"	self group: [ :group :element | 		| backRectangle lbl |		backRectangle := (RTBox new color: (backgroundColor alpha: self alphaPopupBackground); borderColor: borderColor) element.				lbl := (RTLabel new 				color: textColor;				height: [:x | 9];				text: (aOneArgBlock rtValue: element) asString) element.		RTNest new centerOn: backRectangle elements: (Array with: lbl).		group add: backRectangle; add: lbl		]</body></methods><methods><class-id>Roassal2.RTPopup</class-id> <category>initialization</category><body package="Roassal2-Interactions">createAndShowPopupFor: element event: event	| popupPosition popup idealPosition |	self removeLastPopup.		popup := self getNewPopupFor: element.	self lastPopup: popup.		"The following is useful when testing"	event position isNil		ifTrue: [ idealPosition := element position ]		ifFalse: [ idealPosition := event position ].	popupPosition := self closestPositionOf: popup from: idealPosition inView: element view.	popup translateTopLeftTo: popupPosition.</body><body package="Roassal2-Interactions">getNewPopupFor: element	| popupGroup |	popupGroup := self createPopupFor: element.	popupGroup do: [ :e | element view add: e. e trachelShape setAsFixed ].	element trachelShape signalUpdate.	^ popupGroup</body><body package="Roassal2-Interactions">initialize	super initialize.	self text: #yourself.	textColor := Color black.	alphaPopupBackground := 0.4.	backgroundColor := Color gray alpha: 0.8.	borderColor := Color gray alpha: 0.5</body></methods><methods><class-id>Roassal2.RTPopup</class-id> <category>accessing</category><body package="Roassal2-Interactions">alphaPopupBackground	"Return the alpha value for the background. The alpha value is useful to make the background transparent"	^ alphaPopupBackground</body><body package="Roassal2-Interactions">alphaPopupBackground: aValue	"Set the alpha value for the background. The alpha value is useful to make the background transparent"	alphaPopupBackground := aValue</body><body package="Roassal2-Interactions">backgroundColor	^ backgroundColor</body><body package="Roassal2-Interactions">backgroundColor: aColor	backgroundColor := aColor</body><body package="Roassal2-Interactions">borderColor	^ borderColor</body><body package="Roassal2-Interactions">borderColor: aColor	borderColor := aColor</body><body package="Roassal2-Interactions">textColor	^ textColor</body><body package="Roassal2-Interactions">textColor: aValueOrABlockOrASymbol	textColor := aValueOrABlockOrASymbol</body></methods><methods><class-id>Roassal2.RTPopup</class-id> <category>private</category><body package="Roassal2-Interactions">createBackgroundElement: aColor	^ (RTBox new color: (aColor alpha: self alphaPopupBackground)) element</body></methods><methods><class-id>Roassal2.RTPopup</class-id> <category>hooks</category><body package="Roassal2-Interactions">createElementFor: element	| g |	g := RTGroup new.	groupBlock value: g value: element.	^ g</body></methods><methods><class-id>Roassal2.RTPopup</class-id> <category>visitor</category><body package="Roassal2-Interactions">accept: aVisitor with: args	aVisitor visitPopupInteraction: self with: args.</body></methods><methods><class-id>Roassal2.RTPopup class</class-id> <category>lastPopup</category><body package="Roassal2-Interactions">removeLastPopup	self lastPopup ifNil: [ ^ self ].	self lastPopup do: [ :e | 		(e notNil and: [ e view notNil ]) ifTrue: [ e remove ] ]."	 self lastPopup first ifNil: [ ^ self ].    self lastPopup first view isNotNil ifTrue: [ self lastPopup do: [ :el | el view ifNotNil: [ el remove ] ] ]."	self resetLastPopup</body></methods><methods><class-id>Roassal2.RTPopup class</class-id> <category>public</category><body package="Roassal2-Interactions">text: aBlockOrSymbol	"	Set the text of the popup	The argument, when evaluated with an object return an object, to which #asString is sent to	The argument receives		- an object, in case that the popup is defined for RTElement		- an association (from -&gt; to) in case the popup is added to edges		Here is an example that define a popup on edges	b := RTMondrian new.	b shape circle size: 10; color: Color red.	b nodes: (1 to: 20).	edges := b edges moveBehind; connectFrom: [ :v | v // 2 ].	edges @ RTHighlightable.	edges @ (RTPopup text: [ :association | 'An edge from ', association key asString, ' to ', association value asString ]).	b layout cluster.	b		"	^ self new text: aBlockOrSymbol</body></methods><methods><class-id>Roassal2.RTMorphDropInteraction</class-id> <category>dropping/grabbing</category><body package="Roassal2-Interactions">acceptDroppingMorph: aMorph event: anEvent	behavior value: aMorph value: anEvent</body><body package="Roassal2-Interactions">wantsDroppedMorph: aMorph event: anEvent	^ condition value: aMorph value: anEvent</body></methods><methods><class-id>Roassal2.RTMorphDropInteraction</class-id> <category>accessing</category><body package="Roassal2-Interactions">behavior: aTwoArgBlock	"What should happen with the morph when the condition was met?	[ :aMorph :anEvent | what should happen ] block.	Used in TRMorph&gt;&gt;#acceptDroppingMorph:event:"	behavior := aTwoArgBlock</body><body package="Roassal2-Interactions">condition: aTwoArgBlock	"[ :aMorph :anEvent | boolean ] block condition whether this interaction wants the dropped morph.This is used in TRMorph&gt;&gt;#wantsDroppedMorph:event:"	condition := aTwoArgBlock</body><body package="Roassal2-Interactions">if: aConditionBlock do: aBehaviorBlock	self condition: aConditionBlock.	self behavior: aBehaviorBlock</body></methods><methods><class-id>Roassal2.RTMorphDropInteraction</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	behavior := [ :morph :event |  ].	condition := [ :morph :event |  ]</body></methods><methods><class-id>Roassal2.RTMorphDropInteraction</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: anElement	anElement		when: TRMorphWantsDrop		do: [ :event | 			(self wantsDroppedMorph: event droppedMorph event: event dropMorphEvent)				ifTrue: [ event handledBy: event shape ] ].	anElement		when: TRMorphDrop		do: [ :event | self acceptDroppingMorph: event droppedMorph event: event dropMorphEvent ]</body></methods><methods><class-id>Roassal2.RTMorphDropInteraction class</class-id> <category>instance creation</category><body package="Roassal2-Interactions">if: aCondition do: aBlock	^ self new if: aCondition do: aBlock</body></methods><methods><class-id>Roassal2.TRConstraint class</class-id> <category>public - resizing</category><body package="Roassal2-Trachel-Core">changeExtentOf: conformingShape like: originShape plus: aPoint	^ conformingShape extent: originShape encompassingRectangle extent + aPoint</body><body package="Roassal2-Trachel-Core">keepExtentOf: conformingShape like: originShape plus: aPoint	| b |	self changeExtentOf: conformingShape like: originShape plus: aPoint.	b := [ :shape :step | self changeExtentOf: conformingShape like: originShape plus: aPoint ].	originShape		addCallback: (TRExtentCallback block: b);		addCallback: (TRTranslationCallback block: b)</body><body package="Roassal2-Trachel-Core">setAllToMaxHeight: shapes	| maxHeightShape |	maxHeightShape := shapes inject: shapes anyOne into: [ :maxS :s | 								maxS height &lt;= s height										ifTrue: [ s ] ifFalse: [ maxS ] ].	self useHeightOf: maxHeightShape for: shapes</body><body package="Roassal2-Trachel-Core">setAllToMaxWidth: shapes	| maxWidthShape |	maxWidthShape := shapes inject: shapes anyOne into: [ :maxS :s | 								maxS width &lt;= s width										ifTrue: [ s ] ifFalse: [ maxS ] ].	self useWidthOf: maxWidthShape for: shapes</body><body package="Roassal2-Trachel-Core">useHeightOf: aShape for: shapes	shapes do: [ :s | s height: aShape height ]</body><body package="Roassal2-Trachel-Core">useWidthOf: aShape for: shapes	shapes do: [ :s | s width: aShape width ]</body></methods><methods><class-id>Roassal2.TRConstraint class</class-id> <category>public - sticking</category><body package="Roassal2-Trachel-Core">fix: aShape for: anotherShape	"When anotherShape is moved, then move aShape"	| b |	b := [ :shape :step | aShape translateBy: step ].	anotherShape addCallback: (TRTranslationCallback block: b).</body><body package="Roassal2-Trachel-Core">stick: aShape above: anotherShape	| b |	self move: aShape above: anotherShape. 	b := [ :shape :step | self move: aShape above: anotherShape ].	anotherShape addCallback: (TRTranslationCallback block: b).	anotherShape addCallback: (TRExtentCallback block: b)</body><body package="Roassal2-Trachel-Core">stick: aShape below: anotherShape	| b |	self move: aShape below: anotherShape. 	b := [ :shape :step | self move: aShape below: anotherShape ].	anotherShape addCallback: (TRTranslationCallback block: b).	anotherShape addCallback: (TRExtentCallback block: b)</body><body package="Roassal2-Trachel-Core">stick: aShape between: s1 and: s2	^ self stick: aShape between: s1 and: s2 offset: 0.5</body><body package="Roassal2-Trachel-Core">stick: aShape between: s1 and: s2 offset: aFloat	"locate aShape between s1 and s2. aFloat is used to weight the extremities. 		aFloat = 1.0 the label is on s1.		aFloat = 0.0 the label is on s2"	| callback b |	self move: aShape between: s1 and: s2 offset: aFloat.		b := [ :shape :step | self move: aShape between: s1 and: s2 offset: aFloat ].	callback := TRTranslationCallback block: b.	s1 addCallback: callback.	s2 addCallback: callback.	callback := TRExtentCallback block: b.	s1 addCallback: callback.	s2 addCallback: callback</body><body package="Roassal2-Trachel-Core">stick: aShape onTheBottomCenterOf: anotherShape"v := RTView new.lbl := RTLabel elementOn: 'Hello world'.box := (RTBox new width: 50; height: 80) element.v add: box.v add: lbl.box translateTo: 50 @ 50.box @ RTDraggable.TRConstraint stick: lbl onTheBottomCenterOf: box.v"	| b |	self move: aShape onTheBottomCenterOf: anotherShape.	b := [ :shape :step | self move: aShape onTheBottomCenterOf: anotherShape ].	anotherShape addCallback: (TRTranslationCallback block: b).	anotherShape addCallback: (TRExtentCallback block: b)</body><body package="Roassal2-Trachel-Core">stick: aShape onTheBottomLeftOf: anotherShape	| b |	self move: aShape onTheBottomLeftOf: anotherShape. 		b := [ :shape :step | self move: aShape onTheBottomLeftOf: anotherShape ].	anotherShape addCallback: (TRTranslationCallback block: b).	anotherShape addCallback: (TRExtentCallback block: b)</body><body package="Roassal2-Trachel-Core">stick: aShape onTheCenterOf: anotherShape	| b |	self move: aShape onTheCenterOf: anotherShape. 		b := [ :shape :step | self move: aShape onTheCenterOf: anotherShape ].	anotherShape addCallback: (TRTranslationCallback block: b).	anotherShape addCallback: (TRExtentCallback block: b)</body><body package="Roassal2-Trachel-Core">stick: aShape onTheLeftOf: anotherShape	| b |	self move: aShape onTheLeftOf: anotherShape. 		b := [ :shape :step | self move: aShape onTheLeftOf: anotherShape ].	anotherShape addCallback: (TRTranslationCallback block: b).	anotherShape addCallback: (TRExtentCallback block: b)</body><body package="Roassal2-Trachel-Core">stick: aShape onTheRightOf: anotherShape	| b |	self move: aShape onTheRightOf: anotherShape. 		b := [ :shape :step | self move: aShape onTheRightOf: anotherShape ].	anotherShape addCallback: (TRTranslationCallback block: b).	anotherShape addCallback: (TRExtentCallback block: b)</body><body package="Roassal2-Trachel-Core">stick: aShape onTheTopCenterOf: anotherShape"v := RTView new.lbl := RTLabel elementOn: 'Hello world'.box := (RTBox new width: 50; height: 80) element.v add: box.v add: lbl.box translateTo: 50 @ 50.box @ RTDraggable.TRConstraint stick: lbl onTheTopCenterOf: box.v"	| b |	self move: aShape onTheTopCenterOf: anotherShape.	b := [ :shape :step | self move: aShape onTheTopCenterOf: anotherShape ].	anotherShape addCallback: (TRTranslationCallback block: b).	anotherShape addCallback: (TRExtentCallback block: b)</body><body package="Roassal2-Trachel-Core">stick: aShape onTheTopLeftOf: anotherShape	| b |	self move: aShape onTheTopLeftOf: anotherShape. 		b := [ :shape :step | self move: aShape onTheTopLeftOf: anotherShape ].	anotherShape addCallback: (TRTranslationCallback block: b).	anotherShape addCallback: (TRExtentCallback block: b)</body><body package="Roassal2-Trachel-Core">stick: aShape onTheTopLeftOf: anotherShape withPadding: padding	| b |	self move: aShape onTheTopLeftOf: anotherShape withPadding: padding. 		b := [ :shape :step | self move: aShape onTheTopLeftOf: anotherShape withPadding: padding ].	anotherShape addCallback: (TRTranslationCallback block: b).	anotherShape addCallback: (TRExtentCallback block: b)</body><body package="Roassal2-Trachel-Core">stick: aShape onTheTopLeftOf: anotherShape withWidthPadding: widthPadding withHeightPadding: heightPadding	| b |	self move: aShape onTheTopLeftOf: anotherShape withWidthPadding: widthPadding withHeightPadding: heightPadding. 	b := [ :shape :step | self move: aShape onTheTopLeftOf: anotherShape withWidthPadding: widthPadding withHeightPadding: heightPadding].	anotherShape addCallback: (TRTranslationCallback block: b).	anotherShape addCallback: (TRExtentCallback block: b).</body><body package="Roassal2-Trachel-Core">stickAtTheBottomLeftOfTheWindow: trachelShape	self moveAtTheBottomLeftOfTheWindow: trachelShape.	trachelShape canvas		when: TRResizeCanvasEvent		do: [ :event | self moveAtTheBottomLeftOfTheWindow: trachelShape ]</body><body package="Roassal2-Trachel-Core">stickAtTheBottomOfTheWindow: trachelShape	self moveAtTheBottomOfTheWindow: trachelShape.	trachelShape canvas		when: TRResizeCanvasEvent		do: [ :event | self moveAtTheBottomOfTheWindow: trachelShape ]</body><body package="Roassal2-Trachel-Core">stickAtTheBottomRightOfTheWindow: trachelShape	self moveAtTheBottomRightOfTheWindow: trachelShape.	trachelShape canvas		when: TRResizeCanvasEvent		do: [ :event | self moveAtTheBottomRightOfTheWindow: trachelShape ]</body></methods><methods><class-id>Roassal2.TRConstraint class</class-id> <category>public - aligning</category><body package="Roassal2-Trachel-Core">alignFromBottom: shapes	| bottomMostElement |	self deprecated: 'Please, use RTAlignement instead'.	shapes ifEmpty: [ ^ self ].	bottomMostElement := shapes inject: shapes anyOne into: [ :maxS :s | 								maxS encompassingRectangle bottomLeft y &gt;= s encompassingRectangle bottomLeft y										ifTrue: [ s ] ifFalse: [ maxS ] ].	self use: bottomMostElement alignFromBottom: shapes</body><body package="Roassal2-Trachel-Core">alignFromLeft: shapes	| leftMostElement |	self deprecated: 'Please, use RTAlignement instead'.	shapes ifEmpty: [ ^ self ].	leftMostElement := shapes inject: shapes anyOne into: [ :maxS :s | 								maxS encompassingRectangle topLeft x &lt;= s encompassingRectangle topLeft x										ifTrue: [ s ] ifFalse: [ maxS ] ].	self use: leftMostElement alignFromLeft: shapes</body><body package="Roassal2-Trachel-Core">alignFromRight: shapes	| rightMostElement |	self deprecated: 'Please, use RTAlignement instead'.	shapes ifEmpty: [ ^ self ].	rightMostElement := shapes inject: shapes anyOne into: [ :maxS :s | 								maxS encompassingRectangle topLeft x &gt;= s encompassingRectangle topLeft x										ifTrue: [ s ] ifFalse: [ maxS ] ].	self use: rightMostElement alignFromRight: shapes</body><body package="Roassal2-Trachel-Core">alignFromTop: shapes	| topMostElement |	self deprecated: 'Please, use RTAlignement instead'.	shapes ifEmpty: [ ^ self ].	topMostElement := shapes inject: shapes anyOne into: [ :maxS :s | 								maxS encompassingRectangle topLeft y &lt;= s encompassingRectangle topLeft y										ifTrue: [ s ] ifFalse: [ maxS ] ].	self use: topMostElement alignFromTop: shapes</body><body package="Roassal2-Trachel-Core">use: aShape alignFromBottom: shapes	| topY newY |	self deprecated: 'Please, use RTAlignement instead'.	topY := aShape encompassingRectangle bottomCenter y.	shapes do: [ :s |		newY := topY - (s encompassingRectangle height / 2).		s translateTo: s position x @ newY	]</body><body package="Roassal2-Trachel-Core">use: aShape alignFromLeft: shapes	| topX newX |	self deprecated: 'Please, use RTAlignement instead'.	topX := aShape encompassingRectangle topLeft x.	shapes do: [ :s |		newX := topX + (s encompassingRectangle width / 2).		s translateTo: newX @ s position y	]</body><body package="Roassal2-Trachel-Core">use: aShape alignFromRight: shapes	| topX newX |	self deprecated: 'Please, use RTAlignement instead'.	topX := aShape encompassingRectangle topRight x.	shapes do: [ :s |		newX := topX - (s encompassingRectangle width / 2).		s translateTo: newX @ s position y	]</body><body package="Roassal2-Trachel-Core">use: aShape alignFromTop: shapes	| topY newY |	self deprecated: 'Please, use RTAlignement instead'.	topY := aShape encompassingRectangle topCenter y.	shapes do: [ :s |		newY := topY + (s encompassingRectangle height / 2).		s translateTo: s position x @ newY	]</body></methods><methods><class-id>Roassal2.TRConstraint class</class-id> <category>public - moving</category><body package="Roassal2-Trachel-Core">move: aShape above: anotherShape	^ aShape translateTo: anotherShape center - (0 @ ((anotherShape height + aShape height) / 2))</body><body package="Roassal2-Trachel-Core">move: aShape below: anotherShape	^ aShape translateTo: anotherShape center + (0 @ ((anotherShape height + aShape height) / 2))</body><body package="Roassal2-Trachel-Core">move: aShape below: anotherShape using: translator	^ translator translate: aShape to: anotherShape center + (0 @ ((anotherShape height + aShape height) / 2))</body><body package="Roassal2-Trachel-Core">move: aShape belowAlignFromLeft: anotherShape	^ self move: aShape belowAlignFromLeft: anotherShape gap: 0</body><body package="Roassal2-Trachel-Core">move: aShape belowAlignFromLeft: anotherShape gap: anInteger	^ aShape translateTo: anotherShape center 		+ (0 @ ((anotherShape height + aShape height) / 2))		- (((anotherShape width - aShape width) / 2) @ 0)		+ (0 @ anInteger)</body><body package="Roassal2-Trachel-Core">move: aShape between: s1 and: s2	^ aShape translateTo: (s1 position + s2 position) /2</body><body package="Roassal2-Trachel-Core">move: aShape between: s1 and: s2 offset: aFloat	^ aShape translateTo: ((s1 position * aFloat) + (s2 position * (1.0 - aFloat)))</body><body package="Roassal2-Trachel-Core">move: aShape onTheBottomCenterOf: anotherShape	"	Move aShape at the bottom of botom center of anotherShape	v := RTView new.lbl := RTLabel elementOn: 'Hello world'.box := (RTBox new width: 50; height: 80) element.v add: box.v add: lbl.box translateTo: 50 @ 50.TRConstraint move: lbl onTheBottomCenterOf: box.v	"	self		move: aShape		onTheBottomCenterOf: anotherShape		withWidthPadding: 5		withHeightPadding: 5</body><body package="Roassal2-Trachel-Core">move: aShape onTheBottomCenterOf: anotherShape withWidthPadding: widthPadding withHeightPadding: heightPadding	| rectangle bl |	rectangle := anotherShape encompassingRectangle.	bl := rectangle bottomLeft.	aShape translateTo: (bl x + (rectangle width / 2)) @ (bl y - aShape height)</body><body package="Roassal2-Trachel-Core">move: aShape onTheBottomLeftOf: anotherShape	^ aShape translateTo: anotherShape center - ((((anotherShape width/2) rounded) + (aShape width/2 rounded)) @ ((anotherShape height/ -2) rounded))</body><body package="Roassal2-Trachel-Core">move: aShape onTheCenterOf: anotherShape	^ aShape translateTo: anotherShape center</body><body package="Roassal2-Trachel-Core">move: aShape onTheCenterRightOf: anotherShape	self		move: aShape		onTheCenterRightOf: anotherShape		withWidthPadding: 5		withHeightPadding: 5</body><body package="Roassal2-Trachel-Core">move: aShape onTheCenterRightOf: anotherShape withWidthPadding: widthPadding withHeightPadding: heightPadding	| rectangle rect |	rect := anotherShape encompassingRectangle.	rectangle := anotherShape encompassingRectangle topRight.	^ aShape translateTo: (rectangle x - aShape width) @ (rectangle y + (rect height / 2))</body><body package="Roassal2-Trachel-Core">move: aShape onTheLeftOf: anotherShape	^ aShape translateTo: anotherShape center - ((((anotherShape width/2) rounded) + (aShape width/2 rounded)) @ 0)</body><body package="Roassal2-Trachel-Core">move: aShape onTheRightBelowOf: anotherShape	^ aShape translateTo: anotherShape center + (((anotherShape extent/2) rounded) + (aShape extent/2 rounded))</body><body package="Roassal2-Trachel-Core">move: aShape onTheRightOf: anotherShape	^ aShape translateTo: anotherShape center + ((((anotherShape width/2) rounded) + (aShape width/2 rounded)) @ 0)</body><body package="Roassal2-Trachel-Core">move: aShape onTheRightOf: anotherShape using: translator	^ translator translate: aShape to: anotherShape center + ((((anotherShape width / 2) rounded) + (aShape width/2 rounded)) @ 0)</body><body package="Roassal2-Trachel-Core">move: aShape onTheTopCenterOf: anotherShape	self		move: aShape		onTheTopCenterOf: anotherShape		withWidthPadding: 5		withHeightPadding: 5</body><body package="Roassal2-Trachel-Core">move: aShape onTheTopCenterOf: anotherShape withWidthPadding: widthPadding withHeightPadding: heightPadding	| rectangle tl |	rectangle := anotherShape encompassingRectangle.	tl := rectangle topLeft.	aShape translateTo: (tl x + (rectangle width / 2) + (widthPadding / 2)) @ (tl y + (aShape height / 2))</body><body package="Roassal2-Trachel-Core">move: aShape onTheTopLeftOf: anotherShape	^ aShape translateTo: anotherShape center - ((((anotherShape width/2) rounded) + (aShape width/2 rounded)) @ ((anotherShape height/ 2) rounded))</body><body package="Roassal2-Trachel-Core">move: aShape onTheTopLeftOf: anotherShape withPadding: padding	^ self move: aShape onTheTopLeftOf: anotherShape withWidthPadding: padding withHeightPadding: padding</body><body package="Roassal2-Trachel-Core">move: aShape onTheTopLeftOf: anotherShape withWidthPadding: widthPadding withHeightPadding: heightPadding	| rectangle |	rectangle := anotherShape encompassingRectangle topLeft.	^ aShape translateTo: ((rectangle x + (aShape width/2) + widthPadding)@(rectangle y + (aShape height/2) + heightPadding))</body><body package="Roassal2-Trachel-Core">move: aShape onTheTopRightOf: anotherShape	^ self move: aShape onTheTopRightOf: anotherShape withPadding: 5</body><body package="Roassal2-Trachel-Core">move: aShape onTheTopRightOf: anotherShape withPadding: padding	^ self move: aShape onTheTopRightOf: anotherShape withWidthPadding: padding withHeightPadding: padding</body><body package="Roassal2-Trachel-Core">move: aShape onTheTopRightOf: anotherShape withWidthPadding: widthPadding withHeightPadding: heightPadding	| rectangle |	rectangle := anotherShape encompassingRectangle topRight.	^ aShape translateTo: ((rectangle x - (aShape width/2) - widthPadding)@(rectangle y + (aShape height/2) + heightPadding))</body><body package="Roassal2-Trachel-Core">move: els1 to: aSymbol and: els2	aSymbol ifNil: [ ^ self ].	self perform: ('move:', aSymbol,':') asSymbol withArguments: (Array with: els1 with: els2)</body><body package="Roassal2-Trachel-Core">moveAtTheBottomOfTheWindow: trachelShape	"Worked only for fixed shape"	| windowSize |	trachelShape canvas ifNil: [ ^ self ].	windowSize := trachelShape canvas extent.	trachelShape translateTo: (trachelShape width / 2) @ (windowSize y - (trachelShape height / 2))</body><body package="Roassal2-Trachel-Core">moveAtTheBottomRightOfTheWindow: trachelShape	"Worked only for fixed shape"	| windowSize |	trachelShape canvas ifNil: [ ^ self ].	windowSize := trachelShape canvas extent.	trachelShape		translateTo: (windowSize x - (trachelShape width / 2)) @ (windowSize y - (trachelShape height / 2))</body></methods><methods><class-id>Roassal2.TRConstraint class</class-id> <category>public - camera</category><body package="Roassal2-Trachel-Core">moveCameraToTheRightIn: trachelCanvas	^ trachelCanvas camera translateTo: (trachelCanvas extent x / -2) @ trachelCanvas camera position y</body><body package="Roassal2-Trachel-Core">stickCameraToTheRightIn: trachelCanvas	trachelCanvas		when: TRResizeCanvasEvent		do: [ :event | self moveCameraToTheRightIn: trachelCanvas ]</body></methods><methods><class-id>Roassal2.TRConstraint class</class-id> <category>OBSOLETE CLASS</category><body package="Roassal2-Trachel-Core">OBSOLETE	"	This class is now obsolete. Please have a look at RTConstraint	"</body></methods><methods><class-id>Roassal2.RTStackBarPlot</class-id> <category>initialization</category><body package="Roassal2-Builder-StackBarPlot">initialize	super initialize.	values := OrderedCollection new.	colorPalette := RTMultiLinearColorForIdentity new.	self barWidth: self defaultBarWidth height: self defaultBarHeight.		labelConditionalBlock := true.	labelColor := Color black</body></methods><methods><class-id>Roassal2.RTStackBarPlot</class-id> <category>public - configuration</category><body package="Roassal2-Builder-StackBarPlot">addLabelToBars	^ self addLabelToBars: #yourself</body><body package="Roassal2-Builder-StackBarPlot">addLabelToBars: aBlock	^ self addLabelToBars: aBlock if: true</body><body package="Roassal2-Builder-StackBarPlot">addLabelToBars: aBlock if: aConditionalBlock	self addLabelToBars: aBlock if: aConditionalBlock color: Color black</body><body package="Roassal2-Builder-StackBarPlot">addLabelToBars: aBlock if: aConditionalBlock color: aLabelColor	labelBlock := aBlock.	labelConditionalBlock := aConditionalBlock.	labelColor := aLabelColor</body><body package="Roassal2-Builder-StackBarPlot">barWidth: aWidthBlock height: aHeightBlock	widthBlock := aWidthBlock.	heightBlock := aHeightBlock.</body></methods><methods><class-id>Roassal2.RTStackBarPlot</class-id> <category>accessing</category><body package="Roassal2-Builder-StackBarPlot">colorPalette	^ colorPalette</body><body package="Roassal2-Builder-StackBarPlot">height	"Return the height that will be used for drawing the bars"	^ heightBlock</body><body package="Roassal2-Builder-StackBarPlot">normalizer	normalizer ifNil: [ normalizer := RTMetricNormalizer new ].	^ normalizer</body><body package="Roassal2-Builder-StackBarPlot">numberOfValuesPerRow	^ numberOfValuesPerRow</body><body package="Roassal2-Builder-StackBarPlot">totalSum	^ values first totalSum</body><body package="Roassal2-Builder-StackBarPlot">width	"Return the width that will be used for drawing the bars"	^ widthBlock</body></methods><methods><class-id>Roassal2.RTStackBarPlot</class-id> <category>private - utility</category><body package="Roassal2-Builder-StackBarPlot">addLabelToBarIfNecessary	labelBlock ifNil: [ ^ self ].	view elements do: [ :e | 		(labelConditionalBlock rtValue: e model)			ifTrue: [ e @ (RTLabeled new center; color: labelColor; text: labelBlock) ] ].</body><body package="Roassal2-Builder-StackBarPlot">addLegendIfNecessary	| l c |	legend ifNil: [ ^ self ].		l := RTLegendBuilder new.	l right.	l view: view."	l addText: title."	1 to: self numberOfValuesPerRow do: [ :index |		c := self colorPalette level: (index / self numberOfValuesPerRow).		l addColor: c text: (legend at: index).	].	l build.</body></methods><methods><class-id>Roassal2.RTStackBarPlot</class-id> <category>examples</category><body package="Roassal2-Builder-StackBarPlot">example01	| b |	b := RTStackBarPlot new.	b add: #(1 2 3 4).	b add: #(4 3 2 1).	b add: #(5 3 2 0).	^ b</body><body package="Roassal2-Builder-StackBarPlot">example02	| b |b := RTStackBarPlot new.b interaction popupText; draggable.b colorPalette colors: (Array with: Color blue with: Color gray with: Color red ).b add: #(1 2 3 4 ).b add: #(4 3 2 1).b add: #(5 3 2 0).b barWidth: 150 height: 20.^ b</body><body package="Roassal2-Builder-StackBarPlot">example03			| b |	b := RTStackBarPlot new.	b interaction popupText; draggable.	b colorPalette colors: (Array with: Color blue with: Color lightBlue ).	b add: #(37	33	0	0 0) title: 'DN1'.	b add: #(24	26	17	3 0) title: 'DN2'.	b add: #(25	29	15	1 0) title: 'DN3'.	b add: #(30	33	6	1 0) title: 'DN4'.							b addLegend: #('strongly agree' 'agree' 'neutral' 'disagree' 'strongly disagree').	b barWidth: 150 height: 20.	b addLabelToBars: #key.	^ b</body><body package="Roassal2-Builder-StackBarPlot">example04			| b |	b := RTStackBarPlot new.	b interaction popupText; draggable.	b colorPalette colors: (Array with: Color blue with: Color lightBlue ).	b add: #(37	33	0	0 0) title: 'DN1'.	b add: #(24	26	17	3 0) title: 'DN2'.	b add: #(25	29	15	1 0) title: 'DN3'.	b add: #(30	33	6	1 0) title: 'DN4'.							b addLegend: #('strongly agree' 'agree' 'neutral' 'disagree' 'strongly disagree').	b barWidth: 150 height: 20.	b addLabelToBars: #key if: [ :assoc | assoc key &gt; 10 ].	^ b</body><body package="Roassal2-Builder-StackBarPlot">example05			| b |			b := RTStackBarPlot new.	b interaction popupText.	b colorPalette colors: (Array with: Color blue with: Color lightBlue ).	b add: #(37	33	0	0 0) title: 'DN1'.	b add: #(24	26	17	3 0) title: 'DN2'.	b add: #(25	29	15	1 0) title: 'DN3'.	b add: #(30	33	6	1 0) title: 'DN4'.							b addLegend: #('strongly agree' 'agree' 'neutral' 'disagree' 'strongly disagree').	b barWidth: 260 height: 20.	b addLabelToBars: [ :assoc | (assoc key  / b totalSum * 100) asInteger asString, '%' ] if: [:assoc | assoc key &gt; 5 ] color: Color white.		^ b</body></methods><methods><class-id>Roassal2.RTStackBarPlot</class-id> <category>hooks</category><body package="Roassal2-Builder-StackBarPlot">createShapeBuilder	| sb |	sb := RTShapeBuilder new.	sb			rectangle; 			height: [ :anObject | self height rtValue: anObject ];			color: [ :association | self colorPalette level: (association value / self numberOfValuesPerRow) ];			yourself.	^ sb</body><body package="Roassal2-Builder-StackBarPlot">createView	^ super createView @ RTDraggableView</body><body package="Roassal2-Builder-StackBarPlot">renderIn: aView	| elements lines lbl |	numberOfValuesPerRow := values first numberOfValues.	lines := RTGroup new.	values		do: [ :tupple | 			elements := tupple values asGroup collectWithIndex: [ :aValue :index | self elementOn: aValue -&gt; index ].			aView addAll: elements.			lines add: elements ].	self normalizer		elements: (lines flatCollect: #yourself);		normalizeWidth: #key			min: 0			max: widthBlock			minValue: 0			maxValue: values first totalSum.	lines		do: [ :aLineOfElements | 			RTHorizontalLineLayout new				gapSize: 0;				on: aLineOfElements ].	RTVerticalLineLayout on: lines.	RTConstraint new		fix: lines first;		movable: lines allButFirst;		leftOf.	"TRConstraint use: lines first alignFromLeft: lines allButFirst."	self addLabelToBarIfNecessary.	values		with: lines		do: [ :barRow :line | 			barRow title				ifNotNil: [ 					lbl := (RTLabel new text: barRow title) element.					aView add: lbl.					TRConstraint move: lbl onTheLeftOf: line first.					lbl translateBy: self offsetBetweenBarAndTitle negated @ 0 ] ].				self addLegendIfNecessary</body></methods><methods><class-id>Roassal2.RTStackBarPlot</class-id> <category>public - adding</category><body package="Roassal2-Builder-StackBarPlot">add: someValues	values add: (RTStackBarRow new values: someValues)</body><body package="Roassal2-Builder-StackBarPlot">add: someValues title: aTitle	values add: (RTStackBarRow new values: someValues; title: aTitle)</body><body package="Roassal2-Builder-StackBarPlot">addLegend: strings	"The argument is a collection of string. The size of strings (ie., number of strings provided as parameter) should the of the same size than each represented tupple."	legend := strings"	l := RTLegendBuilder new.	l view: b view.	l addText: 'How people are happy'.	l build."</body></methods><methods><class-id>Roassal2.RTStackBarPlot</class-id> <category>configuration</category><body package="Roassal2-Builder-StackBarPlot">defaultBarHeight	"Default bar height"	^ 20</body><body package="Roassal2-Builder-StackBarPlot">defaultBarWidth	^ 150</body><body package="Roassal2-Builder-StackBarPlot">offsetBetweenBarAndTitle	^ 21</body></methods><methods><class-id>Roassal2.RTGridLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements	| pointer lineItemCount lineItemSize maxLastLineHeight originalGapLeft originalGapTop |	originalGapLeft := 0.	originalGapTop := 0.		pointer := originalGapLeft @ originalGapTop.	lineItemSize := self lineItemsCountBlock rtValue: elements.	lineItemCount := 0.	maxLastLineHeight := 0.	elements		do: [ :element | 			translator translateTopLeftOf: element to: pointer.			pointer := (pointer x + element width + self gapSize) @ pointer y.			lineItemCount := lineItemCount + 1.			maxLastLineHeight := maxLastLineHeight max: element height.			lineItemCount &gt;= lineItemSize				ifTrue: [ 					pointer := originalGapLeft @ (pointer y + (self gapSize) + maxLastLineHeight).										maxLastLineHeight := 0.					lineItemCount := 0 ].			self step ].</body></methods><methods><class-id>Roassal2.RTLogTransformation</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Scaling">invTrans: aValue	^ (10 raisedTo: aValue) - 1</body><body package="Roassal2-Builder-Grapher-Scaling">trans: aValue	^ (aValue + 1) log</body></methods><methods><class-id>Roassal2.RTBrushInteraction</class-id> <category>initialization</category><body package="Roassal2-Experimental">initialize	super initialize.	self highlightColor: [ :e | e trachelShape color ].	self unhighlightColor: Color veryVeryLightGray trans.</body><body package="Roassal2-Experimental">initializeElement: aView	| b |	super initializeElement: aView.	b := [ :evt | 		super removeShape.		self removeSelection: view elements ].		self when: RTSelectionStart do: b. 	aView when: TRMouseClick do: b.</body></methods><methods><class-id>Roassal2.RTBrushInteraction</class-id> <category>util</category><body package="Roassal2-Experimental">brush: aGroup	| others |	aGroup ifEmpty: [ ^ self ].	others := self domainElements.	others ifNil: [ others := aGroup view elements ].	others := others select: [ :e | (aGroup includes: e) not ].	others do: [:e | RTBlink highlight: e 		color: (self unhighlightColor rtValue: e) ].	aGroup do: [:e | RTBlink highlight: e 		color: (self highlightColor rtValue: e) ].</body><body package="Roassal2-Experimental">createShapeForView	| s block g |	s := super createShapeForView.	s @ RTDraggable.	s @ RTResizable.	block := [ g := self getElementsWith: s.		g removeAllFoundIn: groups.		self removeSelection: view elements.		g := condition rtValue: g.		self brush: g ].	s addCallback: (TRTranslationCallback new block: block).	s addCallback: (TRExtentCallback new block: block).	^ s</body><body package="Roassal2-Experimental">getElementsWith: s	| g r |	g := RTGroup new. 	r := s encompassingRectangle.	view elements do: [ :e | 		((e ~= s) and: [ e trachelShape encompassingRectangle intersects: r ])			ifTrue: [ g add: e. ] ].	^ g</body></methods><methods><class-id>Roassal2.RTBrushInteraction</class-id> <category>accessing</category><body package="Roassal2-Experimental">domainElements	^ domainElements</body><body package="Roassal2-Experimental">domainElements: someElements	domainElements := someElements.</body><body package="Roassal2-Experimental">elementsToBrush: aBlock	condition := aBlock</body><body package="Roassal2-Experimental">groups: aCollection	groups := aCollection</body><body package="Roassal2-Experimental">highlightColor	^ highlightColor</body><body package="Roassal2-Experimental">highlightColor: aColor	highlightColor := aColor.</body><body package="Roassal2-Experimental">unhighlightColor	^ unhighlightColor</body><body package="Roassal2-Experimental">unhighlightColor: aColor	unhighlightColor := aColor</body></methods><methods><class-id>Roassal2.RTBrushInteraction</class-id> <category>removing</category><body package="Roassal2-Experimental">removeSelection: aGroup	aGroup do: [:e | RTBlink unhighlight: e ].</body><body package="Roassal2-Experimental">removeShape</body></methods><methods><class-id>Roassal2.RTDynamicStackedGrapher</class-id> <category>private - bar management</category><body package="Roassal2-Builder-Grapher-Core">barWidth	^ (extent x / (numberOfBars + 1)) asFloat - self gapBetweenBar</body><body package="Roassal2-Builder-Grapher-Core">barWidthWithGap	^ self barWidth + self gapBetweenBar</body><body package="Roassal2-Builder-Grapher-Core">barXPosition	^ (allAddedElements size + 1) * self barWidthWithGap</body><body package="Roassal2-Builder-Grapher-Core">createElementFor: anObject height: barHeight	| el |	shapeBuilder width: self barWidth.	shapeBuilder height: barHeight.	el := shapeBuilder elementOn: anObject.	el @ RTPopup.	^ el</body><body package="Roassal2-Builder-Grapher-Core">gapBetweenBar	^ 2</body><body package="Roassal2-Builder-Grapher-Core">removeExceedingBar		allAddedElements size = numberOfBars		ifTrue: [ 			allAddedElements first remove.			allAddedElements do: [ :e | 								"e translateBy: self barWidthWithGap negated @ 0"				layoutTranslator translate: e by: (self barWidthWithGap negated @ 0).				"view addAnimation: (RTLinearMove new by: (self barWidthWithGap negated @ 0) during: 0.1 on: e)."				 ].			allAddedElements removeFirst ]</body><body package="Roassal2-Builder-Grapher-Core">yValueFor: anObject	^ y rtValue: anObject</body></methods><methods><class-id>Roassal2.RTDynamicStackedGrapher</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">centerElement	"Return the center of the element, the position 0 @ 0"	^ centerElement</body><body package="Roassal2-Builder-Grapher-Core">numberOfBars	^ numberOfBars</body><body package="Roassal2-Builder-Grapher-Core">numberOfBars: anInteger	"Set the number of bars defining the grapher"	numberOfBars := anInteger</body><body package="Roassal2-Builder-Grapher-Core">textBelow: valueOrBlockOrSymbol	"Make each bar chart to have a label below"	textBelow := valueOrBlockOrSymbol</body><body package="Roassal2-Builder-Grapher-Core">view: aView	super view: aView.	self defineCenterElement.</body><body package="Roassal2-Builder-Grapher-Core">y	^ y</body><body package="Roassal2-Builder-Grapher-Core">y: anObject	y := anObject</body></methods><methods><class-id>Roassal2.RTDynamicStackedGrapher</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">createShapeBuilder	| s |	s := super createShapeBuilder.	s rectangle color: (Color blue alpha: 0.3).	^ s</body><body package="Roassal2-Builder-Grapher-Core">defineCenterElement	"We keep an element to 0 @ 0 because this is useful when the dynamic stacked grapher has to be composed with other"	centerElement ifNotNil: [ ^ self ].	centerElement := (RTBox new size: 1) elementOn: 'center'.	centerElement translateTo: 0 @ 0.	view add: centerElement</body><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	self defineAxesIfNecessary.	self renderAxis.</body></methods><methods><class-id>Roassal2.RTDynamicStackedGrapher</class-id> <category>userinterface</category><body package="Roassal2-Builder-Grapher-Core">updateView	self view signalUpdate</body></methods><methods><class-id>Roassal2.RTDynamicStackedGrapher</class-id> <category>public - cleaning</category><body package="Roassal2-Builder-Grapher-Core">resetAddedElements	allAddedElements := OrderedCollection new</body></methods><methods><class-id>Roassal2.RTDynamicStackedGrapher</class-id> <category>examples</category><body package="Roassal2-Builder-Grapher-Core">example01	| b |	b := RTDynamicStackedGrapher new.	b numberOfBars: 10.	b minY: -200; maxY: 200.	b y: #yourself.	 	b barShape color: (Color red alpha: 0.3).	b view addMenu: '+ 1' callback: [ b add: 400 atRandom - 200 ].	^ b</body></methods><methods><class-id>Roassal2.RTDynamicStackedGrapher</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">defaultNumberOfBars	^ 3</body><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	y := #yourself.	self resetAddedElements.	self axisX		noTick;		noLabel.	numberOfBars := self defaultNumberOfBars.	self useAnimation.</body></methods><methods><class-id>Roassal2.RTDynamicStackedGrapher</class-id> <category>adding</category><body package="Roassal2-Builder-Grapher-Core">add: anObject	| positionInView el center barHeight yValue graphCenter |	self defineCenterElement.	self removeExceedingBar.	yValue := self yValueFor: anObject.	positionInView := self getPixelPositionOf: 0 @ yValue.	graphCenter := centerElement position.	center := self getPixelPositionOf: 0 @ 0.	barHeight := (positionInView y - center y) abs.	el := self createElementFor: anObject height: barHeight.	yValue &gt; 0		ifTrue: [ el translateTo: self barXPosition @ (positionInView y + (barHeight / 2)) + graphCenter ]		ifFalse: [ el translateTo: self barXPosition @ (positionInView y - (barHeight / 2)) + graphCenter ].	view add: el.		textBelow ifNotNil: [ 		| l |		l := RTLabeled new text: textBelow.		yValue &gt; 0 ifTrue: [ l below ].		el @ l ].		view signalUpdate.	allAddedElements add: el.	^ el</body><body package="Roassal2-Builder-Grapher-Core">addAll: someObjects	^ someObjects collect: [ :o | self add: o ]</body></methods><methods><class-id>Roassal2.RTDynamicStackedGrapher</class-id> <category>public - configuring - animation</category><body package="Roassal2-Builder-Grapher-Core">doNotUseAnimation	"When bar have to be removed, there is no animation to translate the bars"	layoutTranslator := RTDirectLayoutTranslator new</body><body package="Roassal2-Builder-Grapher-Core">useAnimation	"When bar have to be removed, there is an animation to translate the bars"	layoutTranslator := RTSmoothLayoutTranslator new.	layoutTranslator nbCycles: 0.2.	layoutTranslator view: self view</body></methods><methods><class-id>Roassal2.RTDynamicStackedGrapher</class-id> <category>public</category><body package="Roassal2-Builder-Grapher-Core">barShape	^ self shape rectangle</body></methods><methods><class-id>Roassal2.RTArc</class-id> <category>accessing</category><body package="Roassal2-Shapes">alphaAngle	^ alphaAngle</body><body package="Roassal2-Shapes">alphaAngle: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self alphaAngleElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">alphaAngleElement: anObject	alphaAngle := anObject</body><body package="Roassal2-Shapes">betaAngle	^ betaAngle</body><body package="Roassal2-Shapes">betaAngle: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self betaAngleElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">betaAngleElement: angleInRadian	betaAngle := angleInRadian</body><body package="Roassal2-Shapes">encompassingRectangle	^ 0 @ 0 extent: 40 @ 50</body><body package="Roassal2-Shapes">externalRadius	^ externalRadius</body><body package="Roassal2-Shapes">externalRadius: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self externalRadiusElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">externalRadiusElement: aValue 		externalRadius := aValue</body><body package="Roassal2-Shapes">innerRadius	^ innerRadius</body><body package="Roassal2-Shapes">innerRadius: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self innerRadiusElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">innerRadiusElement: anObject	innerRadius := anObject</body><body package="Roassal2-Shapes">outerAngle: o innerAngle: i	self alphaAngle: [ :obj | (o rtValue: obj) ].	self betaAngle: [ :obj | (o rtValue: obj) + (i rtValue: obj) ]</body><body package="Roassal2-Shapes">thickness: aBlockOrAValue	self externalRadius: [ :o | (self innerRadiusFor: (RTElement on: o)) + (aBlockOrAValue rtValue: o) ]</body></methods><methods><class-id>Roassal2.RTArc</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeClass	^ TRArcShape</body><body package="Roassal2-Shapes">updateFor: anElement trachelShape: trachelShape	trachelShape isNil ifTrue: [ ^ self ].	trachelShape 		alphaAngle: (self alphaAngleFor: anElement) 		betaAngle: (self betaAngleFor: anElement)  		innerRadius: (self innerRadiusFor: anElement) 		externalRadius: (self externalRadiusFor: anElement);		color: (self colorFor: anElement);		rotateByDegrees:  (self rotationFor: anElement);		scaleBy: (self scaleFor: anElement).	^ trachelShape</body></methods><methods><class-id>Roassal2.RTArc</class-id> <category>computing</category><body package="Roassal2-Shapes">alphaAngleFor: anElement	^ (alphaAngle rtValue: anElement)</body><body package="Roassal2-Shapes">betaAngleFor: anElement	^ (betaAngle rtValue: anElement)</body><body package="Roassal2-Shapes">externalRadiusFor: anElement	^ (externalRadius rtValue: anElement)</body><body package="Roassal2-Shapes">innerRadiusFor: anElement	^ (innerRadius rtValue: anElement)</body></methods><methods><class-id>Roassal2.RTArc</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	self alphaAngle: 0.	self betaAngle: 35.	self innerRadius: 30.	self externalRadius: 50.</body></methods><methods><class-id>Roassal2.RTMenuGroup</class-id> <category>accessing</category><body package="Roassal2-Builder-Menu">add: menuitem	| after |	items add: menuitem.		after := menuitem after.	menuitem after: [ :m |		items do: [:item | item selected: false.			item rawmenu ifNotNil: [item rawmenu text: item label.				 item rawmenu signalUpdate] ].		menuitem selected: true.		after ifNotNil: [ after value: m ]. ].</body><body package="Roassal2-Builder-Menu">addAll: menuitems	menuitems do: [ :m | self add: m ].</body></methods><methods><class-id>Roassal2.RTMenuGroup</class-id> <category>initialization</category><body package="Roassal2-Builder-Menu">initialize	super initialize.	items := OrderedCollection new: 2.</body></methods><methods><class-id>Roassal2.RTMenuGroup class</class-id> <category>public</category><body package="Roassal2-Builder-Menu">on: menuitems	^ self new addAll: menuitems.</body></methods><methods><class-id>Roassal2.RTMenuGroup class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">new	^ super new initialize</body></methods><methods><class-id>Roassal2.RTMarkerOnX</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Decorators">markerColor	^ markerColor</body><body package="Roassal2-Builder-Grapher-Decorators">markerColor: aColor	markerColor := aColor</body><body package="Roassal2-Builder-Grapher-Decorators">value	^ value</body><body package="Roassal2-Builder-Grapher-Decorators">value: aNumber	value := aNumber</body></methods><methods><class-id>Roassal2.RTMarkerOnX</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Decorators">initialize	super initialize.	self markerColor: Color red</body><body package="Roassal2-Builder-Grapher-Decorators">render		| fromPosition toPosition e1 e2 l lineShape |	fromPosition := builder getPixelPositionOf: value @ 0.	toPosition := fromPosition - (0 @ 30).	e1 := (RTBox new size: 1) element.	e2 := (RTBox new size: 1) element.	e1 translateTo: fromPosition.	e2 translateTo: toPosition.		lineShape := RTArrowedLine new.	lineShape head width: 3.	lineShape width: 3.	lineShape color: markerColor.	l := lineShape edgeFrom: e2 to: e1.	builder view add: e1; add: e2; add: l</body></methods><methods><class-id>Roassal2.RTNameCloud</class-id> <category>accessing</category><body package="Roassal2-Builder-NameCloud">dictionary	^ dictionary</body><body package="Roassal2-Builder-NameCloud">dictionary: anObject	dictionary := anObject</body><body package="Roassal2-Builder-NameCloud">maxFrequency	^ tableFrequency values max</body><body package="Roassal2-Builder-NameCloud">maxHeight	^ maxHeight</body><body package="Roassal2-Builder-NameCloud">maxHeight: anObject	maxHeight := anObject</body><body package="Roassal2-Builder-NameCloud">maxWords	"Return the number of words to be displayed"	^ maxWords</body><body package="Roassal2-Builder-NameCloud">maxWords: anInteger	"Set the number of words to be displayed"	maxWords := anInteger</body><body package="Roassal2-Builder-NameCloud">minFrequency	^ tableFrequency values min</body><body package="Roassal2-Builder-NameCloud">minHeight	^ minHeight</body><body package="Roassal2-Builder-NameCloud">minHeight: anObject	minHeight := anObject</body><body package="Roassal2-Builder-NameCloud">sortedAssociations	^ self tableObjects 		ifEmpty: [ tableFrequency associations reverseSortedAs: #value ]		ifNotEmpty: [ self tableObjects associations reverseSortedAs: [ :assoc | assoc value size ] ].</body><body package="Roassal2-Builder-NameCloud">sortedAssociationsBounded	^ self sortedAssociations copyFrom: 1 to: (self sortedAssociations size min: maxWords)</body><body package="Roassal2-Builder-NameCloud">tableObjects	"Return a dictionary for which keys are words, and values are set of objects related to the word"	^ tableObjects</body></methods><methods><class-id>Roassal2.RTNameCloud</class-id> <category>configuration</category><body package="Roassal2-Builder-NameCloud">defaultLayout	^ RTRectanglePackLayout new</body><body package="Roassal2-Builder-NameCloud">defaultMaxHeight	^ 30</body><body package="Roassal2-Builder-NameCloud">defaultMaxWords	^ 150</body><body package="Roassal2-Builder-NameCloud">defaultMinHeight	^ 8</body></methods><methods><class-id>Roassal2.RTNameCloud</class-id> <category>hooks</category><body package="Roassal2-Builder-NameCloud">createView	^ super createView @ RTDraggableView</body><body package="Roassal2-Builder-NameCloud">inspectObjectsForWord: word	^ (tableObjects includesKey: word)		ifTrue: [ (tableObjects at: word) inspect ]</body><body package="Roassal2-Builder-NameCloud">renderIn: aView	| shape es |	shape := RTLabel new		height: [ :assoc | | temp |			temp := assoc value isNumber 				ifTrue: [ assoc value ] 				ifFalse: [ assoc value size ].			(temp - self minFrequency) * maxHeight / (self maxFrequency - self minFrequency max: 1) + minHeight ];		text: #key.	es := shape elementsOn: self sortedAssociationsBounded.	aView addAll: es.	es @ RTPopup.	es		@			(RTMenuActivable new				action: #inspect;				item: 'inspect objects' action: [ :e | self inspectObjectsForWord: e model key ]).	layout on: es</body></methods><methods><class-id>Roassal2.RTNameCloud</class-id> <category>adding</category><body package="Roassal2-Builder-NameCloud">addObjects: objects description: aBlockOrSymbol	objects do: [ :o |		self addString: (aBlockOrSymbol rtValue: o) object: o ]</body><body package="Roassal2-Builder-NameCloud">addString: string	 string substrings do: [ :w | self addWord: w ].</body><body package="Roassal2-Builder-NameCloud">addString: string object: object	 string substrings do: [ :w | self addWord: w object: object ]</body><body package="Roassal2-Builder-NameCloud">addStrings: collectionOfStrings	collectionOfStrings do: [ :s | self addString: s ]</body><body package="Roassal2-Builder-NameCloud">addWord: aWordAsString	| w |	w := self prepareWord: aWordAsString.	(self isValidWord: w) ifTrue: 		[ tableFrequency at: w ifAbsentPut: [ 0 ].		  tableFrequency at: w put: (tableFrequency at: w) + 1 ].	^ w</body><body package="Roassal2-Builder-NameCloud">addWord: aWordAsString object: object	"object is an object for which its description contains aWordAsString"	| w |	w := self addWord: aWordAsString.		"If the word is not valid, then we do nothing"	(self isValidWord: w) ifFalse: [ ^ self ].		tableObjects at: w ifAbsentPut: [ Set new ].	(tableObjects at: w) add: object</body></methods><methods><class-id>Roassal2.RTNameCloud</class-id> <category>testing</category><body package="Roassal2-Builder-NameCloud">isValidWord: word	^ word notEmpty and: [ (self unnecessaryWords includes: word) not ]</body></methods><methods><class-id>Roassal2.RTNameCloud</class-id> <category>examples</category><body package="Roassal2-Builder-NameCloud">example01	"	self new example01	"	^ RTNameCloud new 		addString: 'open		| v shape |		v := RTView new.		shape := RTLabel new height: [ :assoc | assoc value ]; text: #key.		v addAll: (shape elementsOn: table associations).		RTFlowLayout on: v elements.		v open';		yourself</body><body package="Roassal2-Builder-NameCloud">example02	"	self new example02	"	| b |	b := RTNameCloud new.	b addStrings: (RTNameCloud rtmethods collect: #getSource).	^ b</body><body package="Roassal2-Builder-NameCloud">example04	"	self new example04	"	| b |	b := RTNameCloud new.	b minHeight: 20.	b maxHeight: 30.	b addString: 'I am not that tall but I speak many languages. But I have tall legs and big feet'.	^ b</body></methods><methods><class-id>Roassal2.RTNameCloud</class-id> <category>initialization</category><body package="Roassal2-Builder-NameCloud">initialize	super initialize.	tableFrequency := Dictionary new.	tableObjects := Dictionary new.	dictionary := RTEnglishDictionary new.	maxHeight := self defaultMaxHeight.	minHeight := self defaultMinHeight.	maxWords := self defaultMaxWords.	layout := self defaultLayout.</body></methods><methods><class-id>Roassal2.RTNameCloud</class-id> <category>dictionaries</category><body package="Roassal2-Builder-NameCloud">topWords: index	"Return the top index words"	^ ((self sortedAssociations copyFrom: 1 to: index) collect: #key) asArray</body><body package="Roassal2-Builder-NameCloud">unnecessaryWords	^ dictionary unnecessaryWords</body></methods><methods><class-id>Roassal2.RTNameCloud</class-id> <category>utility</category><body package="Roassal2-Builder-NameCloud">prepareWord: word	^ word select: #isLetter</body></methods><methods><class-id>Roassal2.RTScaleLog</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Scaling">base: number	base := number.	linear domain: (domain collect: [:n | self lg: n ]).</body><body package="Roassal2-Builder-Grapher-Scaling">clamp: x	 linear clamp: x</body><body package="Roassal2-Builder-Grapher-Scaling">domain: arr	positive := arr first &gt;= 0.	domain := arr.	linear domain: (arr collect: [:n | self lg: n]).</body><body package="Roassal2-Builder-Grapher-Scaling">interpolate: x	linear interpolate: x</body><body package="Roassal2-Builder-Grapher-Scaling">range: x	linear range: x</body><body package="Roassal2-Builder-Grapher-Scaling">scale: x	^ linear scale: (self lg: x)</body></methods><methods><class-id>Roassal2.RTScaleLog</class-id> <category>utilities</category><body package="Roassal2-Builder-Grapher-Scaling">nice	"TODO"</body><body package="Roassal2-Builder-Grapher-Scaling">ticks	"TODO"</body></methods><methods><class-id>Roassal2.RTScaleLog</class-id> <category>math functions</category><body package="Roassal2-Builder-Grapher-Scaling">lg: x	"logarithm"	^ (positive 		ifTrue: [ (x &lt; 0 ifTrue: [ 0 ] ifFalse: [ x ]) ln ]		ifFalse: [ (x &gt; 0 ifTrue: [ 0 ] ifFalse: [ 0 - x ] ) ln negated ])		/ (base ln).</body><body package="Roassal2-Builder-Grapher-Scaling">pow: x	^ positive  		ifTrue: [ base raisedTo: x ]		ifFalse: [ (base raisedTo: x negated) negated ].</body></methods><methods><class-id>Roassal2.RTScaleLog</class-id> <category>transformations</category><body package="Roassal2-Builder-Grapher-Scaling">invert: x	^ self pow: (linear invert: x).</body></methods><methods><class-id>Roassal2.RTScaleLog</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Scaling">initialize	super initialize.	linear := RTScaleLinear new domain: #(0 1).	base := 10.	positive := true.	domain := #(1 10).</body></methods><methods><class-id>Roassal2.RTAbstractNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizer">command		^ command</body><body package="Roassal2-ColorNormalizer">command: aValueOrASymbolOrABlock	"The argument will be evaluated for each elements found in the scope, typically all the elements of the view. The argument takes a model as argument"	command := aValueOrASymbolOrABlock</body><body package="Roassal2-ColorNormalizer">rtValue: anEntity		self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTMultiLinearColor</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizer">colors	"Return the set of colors used to do the fading"	^ colors</body><body package="Roassal2-ColorNormalizer">colors: anArrayOfColors	colors := anArrayOfColors</body><body package="Roassal2-ColorNormalizer">indexesFor: f	"f - float is between 0.0 and 1.0. Return an array of length two"	| nbColors v i1 i2      |	nbColors := colors size.		v := f * (nbColors - 1).	i1 := v asInteger + 1.	i2 := i1 + 1.		^ Array with: i1 with: i2</body><body package="Roassal2-ColorNormalizer">level: f	"f - float is between 0.0 and 1.0"	| arr c1 c2 nr ng nb i1 i2 nbColors ff  |	(f isNaN) ifTrue: [ ^ Color white ]. 		arr := self indexesFor: f.	nbColors := colors size.		i1 := arr first.	i2 := arr second.		i1 &gt;= colors size ifTrue: [ ^ colors last ].	c1 := colors at: (i1).	c2 := colors at: (i2).		ff :=( f - (i1 -1 / (nbColors - 1)) / (1 / (nbColors - 1)) ).		nr := (c2 red - c1 red) * ff + c1 red.	ng := (c2 green - c1 green) * ff + c1 green.	nb := (c2 blue - c1 blue) * ff + c1 blue.		^ Color r: nr g: ng  b: nb</body><body package="Roassal2-ColorNormalizer">numberOfColors	^ colors size</body><body package="Roassal2-ColorNormalizer">rtValue: anObject	| v |		v := command rtValue: anObject.	"v ranges from 0.0 to 1.0"	^ self level: v</body></methods><methods><class-id>Roassal2.RTMultiLinearColor</class-id> <category>initialization</category><body package="Roassal2-ColorNormalizer">defaultColors	^ Array with: Color red with: Color blue with: Color green</body><body package="Roassal2-ColorNormalizer">defaultCommand	^ #yourself</body><body package="Roassal2-ColorNormalizer">initialize	super initialize.	colors := self defaultColors.	command := self defaultCommand</body></methods><methods><class-id>Roassal2.RTSimon</class-id> <category>initialization</category><body package="Roassal2-Builder-Simon">initialize	super initialize.	self initializeShapeBuilder.	self initializeInteractionBuilder.	models := OrderedCollection new</body><body package="Roassal2-Builder-Simon">initializeInteractionBuilder	self interaction popup.</body><body package="Roassal2-Builder-Simon">initializeShapeBuilder	self shape arc  		outerAngle: [ :object | ((self models indexOf: object) - 1) * (360.0 / self models size) ] innerAngle: [ :object | 360.0 / self models size ];		innerRadius: 50;		externalRadius: 90;		color: RTNIdentityNormalizer new</body></methods><methods><class-id>Roassal2.RTSimon</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Simon">recordModels: objects	models addAll: objects</body></methods><methods><class-id>Roassal2.RTSimon</class-id> <category>accessing</category><body package="Roassal2-Builder-Simon">models	^ models</body><body package="Roassal2-Builder-Simon">models: objects	| elements |	self recordModels: objects.	elements := shapeBuilder elementsOn: objects.	interactionBuilder setUpElements: elements.	view addAll: elements</body></methods><methods><class-id>Roassal2.RTSimon</class-id> <category>public-ui</category><body package="Roassal2-Builder-Simon">open	^ view canvas open</body></methods><methods><class-id>Roassal2.TRArcShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">alphaAngle	^alphaAngle</body><body package="Roassal2-Trachel-Shapes">betaAngle	^betaAngle</body><body package="Roassal2-Trachel-Shapes">bottomRight	^ bottomRight</body><body package="Roassal2-Trachel-Shapes">center	^ self encompassingRectangle center</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	self computeRectangle.	^ topLeft corner: bottomRight</body><body package="Roassal2-Trachel-Shapes">externalRadius	^externalRadius</body><body package="Roassal2-Trachel-Shapes">height		^ self encompassingRectangle height</body><body package="Roassal2-Trachel-Shapes">innerRadius	^innerRadius</body><body package="Roassal2-Trachel-Shapes">topLeft	^ topLeft</body><body package="Roassal2-Trachel-Shapes">width		^ self encompassingRectangle width</body></methods><methods><class-id>Roassal2.TRArcShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-Shapes">computePath	path := TRPlatform current computeArcPathFor: self</body></methods><methods><class-id>Roassal2.TRArcShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">alphaAngle: stAngle betaAngle: ndAngle innerRadius: iR externalRadius: eR	alphaAngle := stAngle.	betaAngle := ndAngle.	innerRadius := iR.	externalRadius := eR</body><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	height := 0.	width := 0.	externalRadius := 0.	innerRadius := 0.	alphaAngle := 0.	betaAngle := 0</body></methods><methods><class-id>Roassal2.TRArcShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitArcShape: self</body></methods><methods><class-id>Roassal2.TRArcShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	self shouldBeDrawn ifFalse: [ ^ self ].	athensCanvas pathTransform restoreAfter: [		athensCanvas pathTransform				multiplyBy: matrix asFloatTransform.		athensCanvas			setPaint: self themedColor;			drawShape: self path.		self drawStrokeIfNecessaryOn: athensCanvas		]</body><body package="Roassal2-Trachel-Shapes">drawStrokeIfNecessaryOn: athensCanvas</body></methods><methods><class-id>Roassal2.TRArcShape</class-id> <category>computing</category><body package="Roassal2-Trachel-Shapes">computeRectangle	|aA bA iR eR p1 p2 p3 p4 pR pQ1 pB pQ2 pL pQ3 pT pQ4 pCollection|	pCollection:= OrderedCollection new.	aA:= alphaAngle value degreesToRadians.	bA:= betaAngle value degreesToRadians.	iR:= innerRadius value.	eR:= externalRadius value.	p1:= (iR*aA cos)@((iR*aA sin) negated).	p2:= (iR*bA cos)@((iR*bA sin) negated).	p3:= (eR*aA cos)@((eR*aA sin) negated).	p4:=(eR*bA cos)@((eR*bA sin) negated).	pR:=(eR*0 cos) @ ((eR*0 sin) negated).	pQ1:=(eR*(Float pi /4) cos)@((eR*(Float pi /4) sin) negated).	pB:=(eR*(Float pi /2) cos)@((eR*(Float pi /2) sin) negated).	pQ2:=(eR*(Float pi * (3/4)) cos)@((eR*(Float pi * (3/4)) sin) negated).	pL:=(eR*Float pi cos)@((eR*Float pi sin) negated).	pQ3:=(eR*(Float pi * (5/4)) cos)@((eR*(Float pi * (5/4)) sin) negated).	pT:=(eR*(Float pi * (3/2)) cos)@((eR*(Float pi * (3/2)) sin) negated).	pQ4:=(eR*(Float pi * (7/4)) cos)@((eR*(Float pi * (7/4)) sin) negated).	pCollection add:p1; add: p2; add: p3; add: p4.	(self includesPoint: pQ1)ifTrue:[pCollection add: pQ1].	(self includesPoint: pQ2)ifTrue:[pCollection add: pQ2].	(self includesPoint: pQ3)ifTrue:[pCollection add: pQ3].	(self includesPoint: pQ4)ifTrue:[pCollection add: pQ4].	(self includesPoint: pL)ifTrue:[pCollection add: pL].	(self includesPoint: pR)ifTrue:[pCollection add: pR].	(self includesPoint: pB)ifTrue:[pCollection add: pB].	(self includesPoint: pT)ifTrue:[pCollection add: pT].		bottomRight:=(pCollection max x @ pCollection max y) + self position.	topLeft := (pCollection min x @ pCollection min y) + self position.</body></methods><methods><class-id>Roassal2.TRArcShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint	| pDistanceOrigin pointAngle inside aAngle bAngle thePoint |	(alphaAngle value = betaAngle value) ifTrue: [ ^ false ].	inside:=true.	aAngle := (alphaAngle value % 360 = 0 ) 		ifFalse: [ alphaAngle value \\  360 ]		ifTrue: [ alphaAngle value ].	bAngle := (betaAngle value % 360 = 0 )		ifFalse: [ betaAngle value \\  360 ]		ifTrue: [ betaAngle value ].	thePoint := aPoint - self position.	pointAngle:= (thePoint angleWith: 0@0) radiansToDegrees \\  360.	pDistanceOrigin := (thePoint squaredDistanceTo: 0@0) sqrt.	((pDistanceOrigin &lt; innerRadius value) or: (pDistanceOrigin &gt; externalRadius value))		ifTrue: [ ^ false ].	(pointAngle % 360 = 0 )		ifTrue:[			(aAngle % 360 = 0) ifTrue: [^ true ].			(bAngle % 360 = 0) ifTrue: [ ^ true ] ].	(aAngle &lt; bAngle)	ifTrue:[		(pointAngle &gt;= aAngle) ifTrue:[ inside:=inside not ].		(pointAngle &lt;= bAngle) ifTrue:[ inside:=inside not ] ]	ifFalse:[		(bAngle = 0) ifTrue:[bAngle:=360].		(pointAngle &lt;= aAngle) ifTrue:[ inside:=inside not ].		(pointAngle &lt;= bAngle) ifTrue:[ inside:=inside not ] ].	^ inside</body></methods><methods><class-id>Roassal2.RTPathAnimation</class-id> <category>private</category><body package="Roassal2-Animation">seconds: seconds	animatedValue := TRVIAnimatedValue new		evaluator: [ :t | t ];		timer: (TRVITimer new cycleLength: seconds);		yourself.</body></methods><methods><class-id>Roassal2.RTPathAnimation</class-id> <category>accessing</category><body package="Roassal2-Animation">element: el	element := el.	el attributes at: #op put: el position.</body><body package="Roassal2-Animation">path: aString	| answer absolute key args p cp1 cp2 point abso |	curves := TRSVGPath new path: aString; curves.	answer := OrderedCollection new.	absolute := true.	p := 0@0.	abso := [ :da | absolute 		ifTrue: [ da ]		ifFalse: [ p + da ] ].	point := [ :da | p := absolute		ifTrue: [ da ]		ifFalse: [ p + da ].		args at: 1 put: p. ].	curves do: [ :curve |		key := curve first.		args := curve second.		key = #absolute ifTrue: [ absolute := true ].		key = #relative ifTrue: [ absolute := false ].		key = #moveTo: ifTrue: [ point value: args first. answer add: curve. ].		key = #lineTo: ifTrue: [ point value: args first. answer add: curve. ].		key = #curveVia:and:to: ifTrue: [ 			cp1 := abso value: args first.			cp2 := abso value: args second.			p := abso value: args third.			args at: 1 put: p.			args at: 2 put: cp1.			args at: 3 put: cp2.			answer add: curve ] ].	curves := answer.</body><body package="Roassal2-Animation">position: i	| r |	r := (curves at: i) second.	^ r first.</body><body package="Roassal2-Animation">repeat	animatedValue timer repeat.</body></methods><methods><class-id>Roassal2.RTPathAnimation</class-id> <category>as yet unclassified</category><body package="Roassal2-Animation">duringDo: aBlock	during := aBlock.</body><body package="Roassal2-Animation">initialize	super initialize.	during := [  ].</body></methods><methods><class-id>Roassal2.RTPathAnimation</class-id> <category>actions</category><body package="Roassal2-Animation">start	animatedValue start</body></methods><methods><class-id>Roassal2.RTPathAnimation</class-id> <category>refreshing</category><body package="Roassal2-Animation">cubic: prev to: current at: t	| c0 c1 c2 c3 cp cx cy bx by ax ay tSquared tCubed x y|	cp := (curves at: index) second.	c0 := prev.	c1 := cp second.	c2 := cp third.	c3 := current.		cx := 3.0 * (c1 x - c0 x).	bx := (3.0 * (c2 x - c1 x)) - cx.	ax := c3 x - c0 x - cx - bx.		cy := 3.0 * (c1 y - c0 y).	by := (3.0* (c2 y - c1 y)) - cy.	ay := c3 y - c0 y - cy - by.	tSquared := t*t.	tCubed := tSquared * t.	x := (ax * tCubed) + (bx * tSquared) + (cx * t) + c0 x.	y := (ay * tCubed) + (by * tSquared) + (cy * t) + c0 y.	^ x@y</body><body package="Roassal2-Animation">linear: prev to: current at: t	^ prev interpolateTo: current at: t .</body><body package="Roassal2-Animation">refresh	| t prev current key position |		curves ifEmpty: [ ^ self ].	t := animatedValue value.	index := (t * curves size) ceiling.	index &lt; 1 ifTrue: [ index := 1 ].	current := self position: index.	t := (t  - ((index - 1) / curves size)) / (1 / curves size).	prev := index = 1		ifTrue: [ element attributes at: #op  ]		ifFalse: [ (curves at: index-1) second first ].	key := (curves at: index) first.	position := nil.	((key = #moveTo:) or: [ key = #lineTo: ])		ifTrue: [ 			position := self				linear: prev				to: current				at: t ].	key = #curveVia:and:to:		ifTrue: [ position := self 			cubic: prev 			to: current			at: t			 ].	position notNil ifTrue:[		element translateTo: position.		during rtValue: element.		element signalUpdate.		].</body></methods><methods><class-id>Roassal2.RTPathAnimation</class-id> <category>testing</category><body package="Roassal2-Animation">hasCompleted	^ animatedValue hasCompleted</body></methods><methods><class-id>Roassal2.RTPathAnimation class</class-id> <category>as yet unclassified</category><body package="Roassal2-Animation">on: element path: aString seconds: seconds	^ self new		element: element;		path: aString;		seconds: seconds</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>accessing</category><body package="Roassal2-Trachel-Core">allShapesWithAction: eventClass forPositionInPixels: position	"position is in pixel, it corresponds to the physical location in the window.	e.g., 0 @ 0 is top left of the window"	| pos shapesWithAction |	shapesWithAction := OrderedCollection new.	fixedShapes		reverseDo: [ :s | 			((s includesPoint: position) and: [ s announcer handleEventClass: eventClass ])				ifTrue: [ shapesWithAction add: s ] ].	pos := self camera fromPixelToSpace: position.	shapes		reverseDo: [ :s | 			((s includesPoint: pos) and: [ s announcer handleEventClass: eventClass ])				ifTrue: [ shapesWithAction add: s ] ].	(self announcer handleEventClass: eventClass)		ifTrue: [ shapesWithAction add: self ].	^ shapesWithAction</body><body package="Roassal2-Trachel-Core">athensCanvas	^ self canvas</body><body package="Roassal2-Extentions">bounds	^ self topLeft corner: self extent.</body><body package="Roassal2-Trachel-Core">camera	^ camera</body><body package="Roassal2-Trachel-Core">camera: aCamera	camera := aCamera</body><body package="Roassal2-Trachel-Core">color	"Return the color used as background" 	^ color</body><body package="Roassal2-Trachel-Core">color: aColor	"Set the color used as background"	color := aColor.	self signalUpdate</body><body package="Roassal2-Trachel-Core">encompassingRectangle	"Return the encompassing rectangle of all the elements contained in the canvas"			| r e |	r := self camera encompassingRectangleOf: self shapes.	e := r extent max: 1 @ 1.	^ r topLeft extent: e</body><body package="Roassal2-Trachel-Core">eventOverseer	"Return the event overseer, if defined. The overseer is an object that gets notificed by all events of the morph"	^ eventOverseer</body><body package="Roassal2-Trachel-Core">extent	"size of the canvas"	^ extent</body><body package="Roassal2-Trachel-Core">extent: newExtentAsPoint	"Set of the size of the canvas. Useful, for example, when the window is resized"	| evt |	evt := TRResizeCanvasEvent new.	evt oldExtent: extent.	evt newExtent: newExtentAsPoint.	extent := newExtentAsPoint.	self announce: evt</body><body package="Roassal2-Trachel-Core">fixedShapes	^ fixedShapes</body><body package="Roassal2-Trachel-Core">morph	^ morph</body><body package="Roassal2-Extentions">morph: aTRVisual	morph := aTRVisual</body><body package="Roassal2-Trachel-Core">numberOfFixedShapes	"Return the number of displayed shapes"	^ fixedShapes size</body><body package="Roassal2-Trachel-Core">numberOfShapes	"Return the number of displayed nonfixed shapes"	^ shapes size</body><body package="Roassal2-Trachel-Core">shapeForPosition: position	"Return the Trachel shape located at position"	fixedShapes reverseDo: [ :s | 		(s includesPoint: position) ifTrue: [ ^ s ] ].	shapes reverseDo: [ :s | 		(s includesPoint: position) ifTrue: [ ^ s ] ].	^ self</body><body package="Roassal2-Trachel-Core">shapeForPositionInPixels: position	"position is in pixel, it corresponds to the physical location in the window.	e.g., 0 @ 0 is top left of the window"	fixedShapes reverseDo: [ :s | 		(s includesPoint: position) ifTrue: [ ^ s ] ].	shapes reverseDo: [ :s | 		(s includesPoint: (self camera fromPixelToSpace: position)) ifTrue: [ ^ s ] ].	^ self</body><body package="Roassal2-Trachel-Core">shapeWithAction: eventClass forPositionInPixels: position	"position is in pixel, it corresponds to the physical location in the window.	e.g., 0 @ 0 is top left of the window"	| pos |	fixedShapes reverseDo: [ :s | 		((s includesPoint: position) and: [ s announcer handleEventClass: eventClass ]) ifTrue: [ ^ s ] ].	pos := self camera fromPixelToSpace: position.	shapes reverseDo: [ :s | 		((s includesPoint: pos) 			and: [ s announcer handleEventClass: eventClass ]) ifTrue: [ ^ s ] ].	^ self</body><body package="Roassal2-Trachel-Core">shapeWithAction: eventClass forPositionInPixels: position under: aShape	"position is in pixel, it corresponds to the physical location in the window.	e.g., 0 @ 0 is top left of the window"	| pos |	pos := self camera fromPixelToSpace: position.	shapes		reverseDo: [ :s | 			(s ~= aShape				and: [ (s includesPoint: pos) and: [ s announcer handleEventClass: eventClass ] ])				ifTrue: [ ^ s ] ].	^ self</body><body package="Roassal2-Trachel-Core">shapeWithActionForPosition: position	"Return a Trachel Shape for a given position that answer events"	fixedShapes reverseDo: [ :s | 		((s includesPoint: position) and: [ s hasEventCallback ]) ifTrue: [ ^ s ] ].	shapes reverseDo: [ :s | 		((s includesPoint: position) and: [ s hasEventCallback ]) ifTrue: [ ^ s ] ].	^ self</body><body package="Roassal2-Trachel-Core">shapeWithActionForPositionInPixels: position	"position is in pixel, it corresponds to the physical location in the window.	e.g., 0 @ 0 is top left of the window"	| pos |	fixedShapes reverseDo: [ :s | 		((s includesPoint: position) and: [ s hasEventCallback ]) ifTrue: [ ^ s ] ].	pos := self camera fromPixelToSpace: position.	shapes reverseDo: [ :s | 		((s includesPoint: pos) 			and: [ s hasEventCallback ]) ifTrue: [ ^ s ] ].	^ self</body><body package="Roassal2-Trachel-Core">shapes	"Return the list of shapes"	^ shapes asArray</body><body package="Roassal2-Trachel-Core">theme	"Return the theme used by TRCanvas. Note that the theme may be nil. In that case, it means that the theme will be infered by TRMorph (if Pharo is the running platform)"	^ theme</body><body package="Roassal2-Trachel-Core">theme: aTheme	"Set the theme used by the Trachel Canvas."	self assert: [ aTheme isKindOf: TRTheme ].	theme := aTheme.	self color: theme trachelCanvasColor</body><body package="Roassal2-Trachel-Core">topLeft	^ morph		ifNil:[ 0@0 ]		ifNotNil: [ morph topLeft ]</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>updating</category><body package="Roassal2-Trachel-Core">signalUpdate	morph changed</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>private</category><body package="Roassal2-Trachel-Core">privateAdd: shape	shapes add: shape</body><body package="Roassal2-Trachel-Core">privateAdd: shape atIndex: index	shapes add: shape beforeIndex: index</body><body package="Roassal2-Trachel-Core">privateIndexInCanvasOf: aShape	^ shapes indexOf: aShape</body><body package="Roassal2-Trachel-Core">privateShapes	^ shapes</body><body package="Roassal2-Trachel-Core">privateShapes: aCollection	shapes	 := aCollection</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>animations</category><body package="Roassal2-Trachel-Core">addAnimation: anAnimation	animations add: anAnimation.	anAnimation addedIn: self.	anAnimation start.	self signalUpdate</body><body package="Roassal2-Trachel-Core">animations	^ animations</body><body package="Roassal2-Trachel-Core">animationsRemoveAll: someAnimations	animations := animations copyWithoutAll: someAnimations</body><body package="Roassal2-Trachel-Core">hasAnimation	"True if at least one animation is running"	^ animations notEmpty</body><body package="Roassal2-Trachel-Core">hasAnimation: anAnimation	"True if anAnimation is running"	^ animations includes: anAnimation</body><body package="Roassal2-Trachel-Core">numberOfAnimations	"Return the number of animations contained in the canvas"	^ animations size</body><body package="Roassal2-Trachel-Core">playAnimations	| shouldClean |	shouldClean := false.	animations do: [ :animation | 		animation refresh. 		animation hasCompleted ifTrue: [ shouldClean := true ] ].		shouldClean ifTrue: [ 		animations := animations reject: [ :animation | animation hasCompleted ] ].</body><body package="Roassal2-Trachel-Core">removeAnimation: anAnimation	animations := animations copyWithout: anAnimation</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>instance creation</category><body package="Roassal2-Trachel-Core">buildMorph	morph := self morphClass new		canvas: self;		extent: self canvas extent.	^ morph</body><body package="Roassal2-Trachel-Core">morphClass	^ TRPlatform current trMorphClass</body><body package="Roassal2-Trachel-Core">open	^ self openInWindowSized: 500 @ 500</body><body package="Roassal2-Trachel-Core">openInWindowSized: anExtentAsPoint	| window |	self buildMorph.	window := morph openInWindow.	window extent: anExtentAsPoint.	^ window</body><body package="Roassal2-Trachel-Core">openInWindowSized: anExtentAsPoint titled: aTitle	| window |	window := self openInWindowSized: anExtentAsPoint.	window setLabel: aTitle.	^ window</body><body package="Roassal2-Trachel-Core">openTitled: aTitle	^ self openInWindowSized: 500 @ 500 titled: aTitle</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>visitor</category><body package="Roassal2-Trachel-Core">accept: aVisitor	aVisitor visitCanvas: self</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>actions</category><body package="Roassal2-Trachel-Core">clean	self shapes copy do: #remove.	self fixedShapes copy do: #remove</body><body package="Roassal2-Trachel-Core">firstElementOf: aCollection 	"Return the first element of aCollection that will be displayed. This method assume that all elements contained in aCollection belong to shapes. It also assumes that aCollection is not empty"	| lastElement lastIndex |	lastElement := aCollection first.	lastIndex := shapes indexOf: lastElement.	aCollection do: [ :e |		| v |		v := shapes indexOf: e.		(v &lt; lastIndex) ifTrue: [ 			lastElement := e.			lastIndex := v ]		 ].	^ lastElement</body><body package="Roassal2-Trachel-Core">focusOnCenterScaled	^ self camera focusOnCenterScaled: self extent * 0.9</body><body package="Roassal2-Trachel-Core">push: aShape behind: anotherShape	| index |	aShape remove.	index := anotherShape indexInCanvas.	aShape addedIn: self atIndex: index.	aShape canvas: self</body><body package="Roassal2-Trachel-Core">push: aShape behindAll: aCollection 	"Move the first argument, which is supposely be contained in the shapes variable, before all elements contained in aCollection"	| firstElement |	firstElement := self firstElementOf: aCollection.	self push: aShape behind: firstElement</body><body package="Roassal2-Trachel-Core">pushAll: elements1 behindAll: elements2 	"Move all elements in elements1, which are supposely contained in the shapes variable, before all elements contained in elements2"	| firstElement |	firstElement := self firstElementOf: elements2.	elements1 do: [ :e |		self push: e behind: firstElement ]</body><body package="Roassal2-Trachel-Core">pushBack: aShape	(shapes includes: aShape)		ifTrue: [ 					shapes remove: aShape.				shapes addFirst: aShape ].	(fixedShapes includes: aShape)		ifTrue: [ 					fixedShapes remove: aShape.				fixedShapes addFirst: aShape ]</body><body package="Roassal2-Trachel-Core">pushFront: aShape	| tColl |	tColl := aShape isFixed 				ifTrue:  					[ fixedShapes ]					ifFalse: 					[ shapes ].					tColl remove: aShape.	tColl addLast: aShape</body><body package="Roassal2-Trachel-Core">removeFixedShape: aShape	fixedShapes := fixedShapes copyWithout: aShape</body><body package="Roassal2-Trachel-Core">removeFixedShapes: someShapes	fixedShapes := fixedShapes copyWithoutAll: someShapes</body><body package="Roassal2-Trachel-Core">resetLineShapes	"Remove all the shapes, no callback on the shapes is invoked!"	shapes := shapes reject: #isLineShape</body><body package="Roassal2-Trachel-Core">resetShapes	"Remove all the shapes, no callback on the shapes is invoked!"	shapes := OrderedCollection new.</body><body package="Roassal2-Trachel-Core">setAsFixed: aShape	self removeShape: aShape.	self addFixedShape: aShape.</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>menu</category><body package="Roassal2-Trachel-Core">addMenu: aTitle callback: aBlock	| lbl index |	index := fixedShapes inject: 0 into: [ :s :e | s max: (e encompassingRectangle topRight x + 10) ].	lbl := TRLabelShape new text: aTitle; translateLeftTo: index @ 20.	lbl color: Color black.	lbl when: TRMouseClick do: [ :event | aBlock value ].	lbl when: TRMouseEnter do: [ :event | lbl color: Color blue. self signalUpdate ].	lbl when: TRMouseLeave do: [ :event | lbl color: Color black. self signalUpdate ].	self addFixedShape: lbl</body><body package="Roassal2-Trachel-Core">addMenuAsSVG: aTitle callback: aBlock	^ self addMenuAsSVG: aTitle scale: 1.0 callback: aBlock</body><body package="Roassal2-Trachel-Core">addMenuAsSVG: aTitle scale: scaleAsFloat callback: aBlock	| icon index |	index := fixedShapes inject: 0 into: [ :s :e | s max: (e encompassingRectangle topRight x + 10) ].	icon := TRSVGPath new path: aTitle.	icon scaleBy: scaleAsFloat.	icon color: Color black.	icon when: TRMouseClick do: [ :event | aBlock value ].	icon when: TRMouseEnter do: [ :event | icon color: Color blue. self signalUpdate ].	icon when: TRMouseLeave do: [ :event | icon color: Color black. self signalUpdate ].	self addFixedShape: icon</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>events</category><body package="Roassal2-Trachel-Core">announce: anEvent	self announcer announce: anEvent</body><body package="Roassal2-Trachel-Core">announcer	announcer isNil ifTrue: [ announcer := Announcer new ].	^ announcer</body><body package="Roassal2-Trachel-Core">announcer: anAnnouncer	announcer := anAnnouncer</body><body package="Roassal2-Trachel-Core">canvas	session == TRPlatform current session		ifFalse: [ 			canvas := TRPlatform current surfaceClass extent: extent asIntegerPoint.			session := TRPlatform current session ].	^ canvas</body><body package="Roassal2-Trachel-Core">eventOverseer: anEventOverseer	"This method register anEventOverseer as the event overseer in the TRMorph. At each event fired by, the event overseer will get notified"	eventOverseer := anEventOverseer</body><body package="Roassal2-Trachel-Core">notifyEventOverseerWith: anEvent	eventOverseer ifNil: [ ^ self ].	eventOverseer firedEvent: anEvent</body><body package="Roassal2-Trachel-Core">when: event do: aBlock	self announcer when: event do: aBlock</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>adding removing shapes</category><body package="Roassal2-Trachel-Core">addFixedShape: shape	fixedShapes add: shape.	shape canvas: self</body><body package="Roassal2-Trachel-Core">addShape: shape	shape addedIn: self.	shape triggerCallbacksForAddition</body><body package="Roassal2-Trachel-Core">addShape: shape atIndex: index	shape addedIn: self atIndex: index.	shape triggerCallbacksForAddition</body><body package="Roassal2-Trachel-Core">buildArcAlphaAngle: stAngle betaAngle: ndAngle innerRadius: iR externalRadius: eR	| shape |	shape := TRArcShape new.	shape alphaAngle: stAngle betaAngle: ndAngle innerRadius: iR externalRadius: eR.	self addShape: shape.	^ shape</body><body package="Roassal2-Trachel-Core">buildCircleFrom: aPoint to: anotherPoint color: aColor	| shape |	shape := TREllipseShape new.	shape from: aPoint to: anotherPoint color: aColor.	self addShape: shape.	^ shape</body><body package="Roassal2-Trachel-Core">buildLineFrom: aPoint to: anotherPoint color: aColor	|  shape |	shape := TRLineShape new.	shape from: aPoint to: anotherPoint color: aColor.	self addShape: shape.	^ shape</body><body package="Roassal2-Trachel-Core">buildRectangle: aRectangle color: aColor	| shape |	shape := TRBoxShape new.	shape fromRectangle: aRectangle color: aColor.	self addShape: shape.	^ shape</body><body package="Roassal2-Trachel-Core">removeShape: shape	shapes remove: shape ifAbsent: [ self removeFixedShape: shape ].	shape canvas: nil.	shape triggerRemoveCallbacks</body><body package="Roassal2-Trachel-Core">removeShapes: someShapes	shapes := shapes copyWithoutAll: someShapes.	self removeFixedShapes: someShapes.	someShapes do: [ :aShape | aShape canvas: nil; triggerRemoveCallbacks ].</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>testing</category><body package="Roassal2-Trachel-Core">isFixedShape: aShape	^ fixedShapes includes: aShape</body><body package="Roassal2-Trachel-Core">isMovableShape: aShape	^ shapes includes: aShape</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>initialization</category><body package="Roassal2-Trachel-Core">initialize	super initialize.	extent := 500 @ 500.	canvas := TRPlatform current surfaceClass extent: extent.	shapes := OrderedCollection new.	fixedShapes := OrderedCollection new.	animations := OrderedCollection new.	camera := TRCamera forCanvas: self.	color := Color white.	session := TRPlatform current session.	theme := TRWhiteTheme default.	"No event overseer at the creation"	eventOverseer := nil</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>theme</category><body package="Roassal2-Trachel-Core">hasTheme	"Return whether the canvas has a theme set by the user. If no theme is set, then	 a theme will be infered by (TRMorph or TRVisual)"	^ theme notNil</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>user interface</category><body package="Roassal2-Extentions">inspectorClasses	^Array		with: Roassal2Inspector		with: Tools.Trippy.BasicInspector</body></methods><methods><class-id>Roassal2.GSegment</class-id> <category>properties</category><body package="Roassal2-Pharo">alreadyExistIn: aSet  	aSet do:[:eachS | (eachS asLine = (self asLine) )ifTrue:[ ^ true ]].	^ false</body><body package="Roassal2-Pharo">asLine	^ GLine through: v1 and: v2</body><body package="Roassal2-Pharo">belowPoint:p^( (self v2 x - self v1 x)*(p y - self v1 y)-((self v2 y - self v1 y)*(p x - self v1 x))&gt; 0 )</body><body package="Roassal2-Pharo">boundBy: aPoint	^ self v1 = aPoint or: [ self v2 = aPoint ]</body><body package="Roassal2-Pharo">cutWith: frame| coll |coll := OrderedCollection new.frame edges	collect: [ :edge | edge intersectionPointWithSegment: self ]	thenDo: [ :p |		(p notNil and: [ coll noneSatisfy: [ :p2 | p2 =~ p ] ])			ifTrue: [ coll add: p ] ].coll ifEmpty: [ "self halt"	(frame hasPoint: self v1)		ifTrue:  [ ^ self ]		ifFalse: [ ^ nil ] ].coll size = 2 	ifTrue: [ ^ GSegment with: coll first with: coll second ].(frame hasPoint: self v1) 	ifTrue:  [ ^ GSegment with: coll first with: self v1 ] 	ifFalse: [ ^ GSegment with: coll first with: self v2 ]</body><body package="Roassal2-Pharo">dist: p	^ self asLine dist: p</body><body package="Roassal2-Pharo">distTo: point	^ (( 		((self v2 y - self v1 y) * point x) - ((self v2 x - self v1 x) * point y) + ((self v2 x) * (self v1 y )) - ((self v1 x) * (self v2 y ))		)abs)	/		((  (self v1 y - self v2 y) * (self v1 y - self v2 y) 		+			((self v1 x - self v2 x) * (self v1 x - self v2 x))		 )sqrt)</body><body package="Roassal2-Pharo">extendSegmVert: v to: frame	|points ver p|	points := frame intersectionPointsWithLine: self asLine.	ver := self vertices detect:[:vi | (vi = v) not].	( ver x = v x ) 		ifTrue:[ ( ver y &gt; v y )			ifTrue: [ p := points detect:[ :pi | pi y &lt; v y] ]			ifFalse:[ p := points detect:[ :pi | pi y &gt; v y] ]]		ifFalse:	[ ( ver x &gt; v x )			ifTrue: [ p := points detect:[ :pi | pi x &lt; v x] ]			ifFalse:[ p := points detect:[ :pi | pi x &gt; v x] ]			 ].^ GSegment with: ver with: p</body><body package="Roassal2-Pharo">extendWith: point and: frame	|points v|	(self asLine hasPoint: point) 		ifTrue:[ 			(( self v1 dist: point ) &lt; ( self v2 dist: point ))				ifTrue:[ v1 := point]				ifFalse:[ v2 := point].			v := self vertices detect:[:p | (p = point) not ].			points := frame intersectionPointsWithLine: (self asLine).			points size = 2 				ifTrue:[  ( ( GSegment with: point with: points first ) hasPoint: v )  					ifTrue:[ ^ GSegment with: point with: points first ]					ifFalse:[ ^ GSegment with: point with: points second] ]]</body><body package="Roassal2-Pharo">has: p	(self asLine hasPoint: p)	ifFalse:[^false]	ifTrue:[ ^((		((self v1 x &lt;= p x and:[ p x &lt;= self v2 x]) 						or:[ self v2 x &lt;= p x and:[ p x &lt;= self v1 x]]))		and:[ 			((self v1 y &lt;= p y and:[ p y &lt;= self v2 y]) 						or:[ self v2 y &lt;= p y and:[ p y &lt;= self v1 y]])])		]</body><body package="Roassal2-Pharo">hasOnLinePoint: p	| e k edges tr v|	(self v1 =~ p or:[ self v2 =~ p] ) 		ifTrue:[^true]		ifFalse:[			tr := ( GTriangle with: p with: self v1 with: self v2 ).			edges:= tr edges.			k := edges detectMax: [:ed | ed length].			e := (1/2)*(					(( self v1 x - self v2 x ) * ( p y - self v2 y )-					(( self v1 y - self v2 y ) * ( p x - self v2 x )))					abs			/k length).			v := tr vertices detect:[ :vi |  vi~= k v1 and:[ vi ~= k v2 ]].			^ "k asLine hasPoint: v withApproximation: e."			(k dist: v) lesserOrDifferentThan: (2*e)]</body><body package="Roassal2-Pharo">hasOnLinePoint: p withRespectTo: vert	| e k edges tr v|	(self v1 =~ p or:[ self v2 =~ p] ) 		ifTrue:[^ true]		ifFalse:[ "(vert x &lt; self v2 x)			ifTrue:[				(vert x &lt; p x and:[ p x &lt; self v2 x ])				or:[ (vert x &lt; self v2 x and:[ p x &gt; self v2 x ])]]"			((			( p x between: vert x and: self v2 x)and:			[ p y between: vert y and: self v2 y]) 		or:[ (self v2 x between: vert x and: p x) and:			(self v2 y between: vert y and: p y)])				ifFalse:[^ false]				ifTrue:[					tr := ( GTriangle with: p with: self v1 with: self v2 ).					edges:= tr edges.					k := edges detectMax: [:ed | ed length].					e := (1/2)*(							(( self v1 x - self v2 x ) * ( p y - self v2 y )-							(( self v1 y - self v2 y ) * ( p x - self v2 x )))							abs					/k length).					v := tr vertices detect:[ :vi |  vi~= k v1 and:[ vi ~= k v2 ]].					^ "k asLine hasPoint: v withApproximation: e."					(k dist: v) lesserOrDifferentThan: (2*e)]]</body><body package="Roassal2-Pharo">hasOnLinePoint: p withRespectTo: vert withApprox: apro	| e k edges tr v eps |	(self v1 =~ p or:[ self v2 =~ p] ) 		ifTrue:[^ true]		ifFalse:[ 			tr := ( GTriangle with: p with: self v1 with: self v2 ).			edges := tr edges.			k := edges detectMax: [:ed | ed length].			eps := (1/2)*(							(( self v1 x - self v2 x ) * ( p y - self v2 y )-							(( self v1 y - self v2 y ) * ( p x - self v2 x )))							abs					/k length).			e := apro min: eps.			(((			( p x isBetween: vert x and: self v2 x with: e)and:			[ p y isBetween: vert y and: self v2 y with: e]) 		or:[ (self v2 x isBetween: vert x and: p x with: e) and:			(self v2 y isBetween: vert y and: p y with: e)]) "and:[ self asLine hasPoint: p withApproximation: e ]")				ifFalse:[^ false]				ifTrue:[					"tr := ( GTriangle with: p with: self v1 with: self v2 ).					edges:= tr edges.					k := edges detectMax: [:ed | ed length].					e := (1/2)*(							(( self v1 x - self v2 x ) * ( p y - self v2 y )-							(( self v1 y - self v2 y ) * ( p x - self v2 x )))							abs					/k length)."					v := tr vertices detect:[ :vi |  vi~= k v1 and:[ vi ~= k v2 ]].					((k dist: v) lesserOrDifferentThan: (2*e)) 						ifTrue:[ ^ true"(k asLine hasPoint: v withApproximation: e)"]						ifFalse:[ ^ false]					]]</body><body package="Roassal2-Pharo">hasPoint:aPoint  ^( ((self v1 x lesserOrDifferentThan: aPoint x) and: [aPoint x lesserOrDifferentThan: self v2 x])  or:		[(self v2 x lesserOrDifferentThan: aPoint x) and: [aPoint x lesserOrDifferentThan: self v1 x]]  ) and:    [ ((self v1 y lesserOrDifferentThan: aPoint y) and: [aPoint y lesserOrDifferentThan: self v2 y])  or:		[(self v2 y lesserOrDifferentThan: aPoint y) and: [aPoint y lesserOrDifferentThan: self v1 y]]   ]  .</body><body package="Roassal2-Pharo">intersect: aSegment(self v1 to: self v2 intersects: aSegment v1 to: aSegment v2) 	ifTrue:	[^self asLine intersect: (aSegment asLine)]	ifFalse: [^nil]</body><body package="Roassal2-Pharo">intersectionPointWithLine: aLine	^ (self asLine intersect: aLine) ifNotNil: [ :point | 		(self hasPoint: point)			ifTrue:  [ point ]			ifFalse: [ nil ] ]</body><body package="Roassal2-Pharo">intersectionPointWithRay: ray	^ (self asLine intersect: ray asLine) ifNotNil: [ :point | 		((self hasPoint: point) and:				[ray hasPoint: point])			ifTrue:  [ point ]			ifFalse: [ nil ] ]</body><body package="Roassal2-Pharo">intersectionPointWithSegment: segm	^ (self asLine intersect: segm asLine) ifNotNil: [ :point | 		((self hasPoint: point) and:[segm hasPoint: point])			ifTrue:  [ point ]			ifFalse: [ nil ] ]</body><body package="Roassal2-Pharo">isOnLineWith: segm	self = segm 		ifTrue:[^ true]		ifFalse:[^ self asLine = (segm asLine)]</body><body package="Roassal2-Pharo">length	^ v1 dist: v2</body><body package="Roassal2-Pharo">locationOf: aPoint        ^ ((self v2 x - self v1 x) * (aPoint y - self v1 y) -       ((self v2 y - self v1 y) * (aPoint x - self v1 x))) signFuz</body><body package="Roassal2-Pharo">midPoint ^ (v1 + v2) / 2.</body><body package="Roassal2-Pharo">perpendicularBisector^GLinea:  (v2 x - v1 x)b:  (v2 y - v1 y)c: ((v1 x * v1 x) - (v2 x * v2 x) + (v1 y * v1 y) - (v2 y * v2 y))/2</body></methods><methods><class-id>Roassal2.GSegment</class-id> <category>accessing</category><body package="Roassal2-Pharo">v1^v1</body><body package="Roassal2-Pharo">v2^v2</body><body package="Roassal2-Pharo">vertices	^ Array with: v1 with: v2</body></methods><methods><class-id>Roassal2.GSegment</class-id> <category>printing</category><body package="Roassal2-Pharo">printOn: aStream	v1 printOn: aStream.	aStream nextPutAll: '&gt;-&lt;'.	v2 printOn: aStream</body></methods><methods><class-id>Roassal2.GSegment</class-id> <category>comparing</category><body package="Roassal2-Pharo">= segment^((self v1 =~ segment v1) and: [self v2 =~ segment v2]) or: [(self v1 =~ segment v2) and: [self v2 =~ segment v1]]</body><body package="Roassal2-Pharo">hash^( v1 hash  + v2 hash ) hashMultiply</body></methods><methods><class-id>Roassal2.GSegment</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body><body package="Roassal2-Pharo">initializeWith: aPoint1 with: aPoint2	super initialize.	v1 := aPoint1.	v2 := aPoint2</body></methods><methods><class-id>Roassal2.GSegment class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body><body package="Roassal2-Pharo">with: aPoint1 with: aPoint2	^ self new initializeWith: aPoint1 with: aPoint2</body></methods><methods><class-id>Roassal2.RTLayoutTranslator</class-id> <category>hook</category><body package="Roassal2-Layouts">translate: element by: deltaPosition	"Translate of the center of the element by a step"	self translate: element to: element position + deltaPosition</body><body package="Roassal2-Layouts">translate: element to: newPosition	"Translate of the center of the element"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTLayoutTranslator</class-id> <category>public - translating</category><body package="Roassal2-Layouts">translate: element to: newPosition direction: aDirection	"Translate the bottom left corner of the element"	self translate: element to: newPosition + (element extent / 2 * aDirection)</body><body package="Roassal2-Layouts">translateBottomLeftOf: element to: newPosition	"Translate the bottom left corner of the element"	self translate: element to: newPosition direction: 1 @ -1.</body><body package="Roassal2-Layouts">translateBottomOf: element to: newPosition	"Translate the bottom side of the element"	self translate: element to: element position x @ newPosition direction: 0 @ -1</body><body package="Roassal2-Layouts">translateBottomRightOf: element to: newPosition	"Translate the bottom right corner of the element"	self translate: element to: newPosition direction: -1 @ -1</body><body package="Roassal2-Layouts">translateCenterLeftOf: element to: newPosition	"Translate the left center of the element to newPosition"	self translate: element to: newPosition direction: 1 @ 0</body><body package="Roassal2-Layouts">translateLeftOf: element to: newPosition	"Translate the left side of the element"	self translate: element to: newPosition @ element position y direction: 1 @ 0.</body><body package="Roassal2-Layouts">translateRightOf: element to: newPosition	"Translate the right side of the element"	self translate: element to: newPosition @ element position y direction: -1 @ 0.</body><body package="Roassal2-Layouts">translateTopLeftOf: element to: newPosition	"Translate the top right corner of the element"	self translate: element to: newPosition direction: 1 @ 1</body><body package="Roassal2-Layouts">translateTopOf: element to: newPosition	"Translate the top side of the element"	self translate: element to: element position x @ newPosition direction: 0 @ 1.</body><body package="Roassal2-Layouts">translateTopRightOf: element to: newPosition	"Translate the top right corner of the element"	self translate: element to: newPosition direction: -1 @ 1</body></methods><methods><class-id>Roassal2.RTLayoutTranslator</class-id> <category>accessing</category><body package="Roassal2-Layouts">nbCycles: anInteger	"Do nothing"</body><body package="Roassal2-Layouts">view	^ view</body><body package="Roassal2-Layouts">view: aView	view := aView</body></methods><methods><class-id>Roassal2.RTLayoutTranslator class</class-id> <category>accessing</category><body package="Roassal2-Layouts">default	"Return the default translator, the one used in the layouts"	defaultTranslator ifNotNil: [ ^ defaultTranslator ].	^ defaultTranslator := self defaultClass new</body><body package="Roassal2-Layouts">defaultClass	^ self allSubclasses detect: #isDefault</body></methods><methods><class-id>Roassal2.RTLayoutTranslator class</class-id> <category>as yet unclassified</category><body package="Roassal2-Layouts">isDefault	^ false</body></methods><methods><class-id>Roassal2.RTSmoothLayoutTranslator</class-id> <category>accessing</category><body package="Roassal2-Layouts">nbCycles: anInteger	"Set the number of cycle we need to complete the transition"	nbCycles := anInteger</body></methods><methods><class-id>Roassal2.RTSmoothLayoutTranslator</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize 	super initialize.		"The amount of seconds we need to complete the transition"	nbCycles := 2</body></methods><methods><class-id>Roassal2.RTSmoothLayoutTranslator</class-id> <category>hook</category><body package="Roassal2-Layouts">translate: element to: newPosition	move := RTLinearMove new					to: newPosition during: nbCycles on: element.	view ifNil: [ self view: element view ].	view addAnimation: move.</body></methods><methods><class-id>Roassal2.RTSmoothLayoutTranslator</class-id> <category>testing</category><body package="Roassal2-Layouts">hasCompleted	"Return true if all the translation has completed"	^ move hasCompleted</body></methods><methods><class-id>Roassal2.RTSmoothResizeLayoutTranslator</class-id> <category>testing</category><body package="Roassal2-Interactions-MorphingView">hasCompleted	"Return true if all the translation has completed"	^ super hasCompleted and: [ resize hasCompleted  ]</body></methods><methods><class-id>Roassal2.RTSmoothResizeLayoutTranslator</class-id> <category>hook</category><body package="Roassal2-Interactions-MorphingView">resize: element to: newExtent	resize := RTResizeMove new toExtent: newExtent during: nbCycles on: element.	view ifNil: [ self view: element view ].	view addAnimation: resize.</body></methods><methods><class-id>Roassal2.TRAddedCallback</class-id> <category>adding</category><body package="Roassal2-Trachel-Callbacks">addShape: aTRShape 	^ block cull: aTRShape</body></methods><methods><class-id>Roassal2.TRAddedCallback</class-id> <category>testing</category><body package="Roassal2-Trachel-Callbacks">isAddedCallback	^ true</body></methods><methods><class-id>Roassal2.RTMetricMap</class-id> <category>public</category><body package="Roassal2-Builder-Map">africanCountries	^ self countries: RTSVGPath africa color: Color white</body><body package="Roassal2-Builder-Map">allCountriesColor: aColor	^ self countries: RTSVGPath countries color: aColor</body><body package="Roassal2-Builder-Map">countries: countryNames color: aColor	"Display a list of countries"	countryNames do: [ :country |		| elem |		elem := (RTSVGPath new			path: (RTSVGPath perform: country asSymbol);			fillColor: aColor;			scale: 1) elementOn:(country asString).		elem @ RTPopup.		view add: elem.	].</body><body package="Roassal2-Builder-Map">countries: collection named: selectorOrBlockForName metric: selectorOrBlockForMetric	"Display a list of countries"	"E.g., countries: #(#('France' 50) #('Germany' 80)) named: #first metric: #second"		"Example:	RTMapBuilder2 new countries: #(#('France' 20) #('Germany' 80)) named: #first metric: #second; open	"	countryData := collection.	countryName := selectorOrBlockForName.	self fillViewWithCountries: countryData named: countryName metric: selectorOrBlockForMetric</body><body package="Roassal2-Builder-Map">makeSelectable: aBlock as: aTitle	"Public method"	"Add a menu in the visualization. Useful to switch between metrics"	view canvas addMenu: aTitle callback: [ 		self cleanView.		self fillViewWithCountries: countryData named: countryName metric: aBlock ]</body><body package="Roassal2-Builder-Map">routes: objects from: aPointBlock to: anotherPointBlock	| toPixel fromPixel fromElement toElement edge |	shapeBuilder ensure: RTLine.	pointShapeBuilder ensure: RTEllipse.		objects do: [ :object |		toPixel := self translateGeoPositionToPixels: (aPointBlock rtValue: object).		fromPixel := self translateGeoPositionToPixels: (anotherPointBlock rtValue: object).		fromElement := pointShapeBuilder elementOn: 'from'.		toElement := pointShapeBuilder elementOn: 'to'.		fromElement translateTo: fromPixel.		toElement translateTo: toPixel.		view add: fromElement.		view add: toElement.				edge := shapeBuilder edgeFrom: fromElement to: toElement.		view add: edge.	].</body></methods><methods><class-id>Roassal2.RTMetricMap</class-id> <category>utility</category><body package="Roassal2-Builder-Map">convertIntoSVGCountryName: aName	| normalizedName |	aName = 'Mauritius' ifTrue: [ ^ #Mauritania ].	aName = 'Russian Federation' ifTrue: [ ^ #Russia ].	aName = 'Turkey' ifTrue: [ ^ #RepublicofTurkey ].		#(		#('FR' #France) 		#('UK' #GreatBritian)		#('DE' #Germany)		#('US' #UnitedStates)		#('CH' #Switzerland)		#('CA' #Canada)		#('AU' #Austria)		#('IE' #Israel)		#('IT' #Italy)) do: [ :arr | arr first = aName ifTrue: [ ^ arr second ] ].		normalizedName := (aName copyWithoutAll: '. ') asSymbol.	^ (RTSVGPath class methodDict keys includes: normalizedName)			ifTrue: [ normalizedName ]			ifFalse: [ nil ]</body><body package="Roassal2-Builder-Map">translateGeoPositionToPixels: point	"From https://github.com/thebyrd/world-news"		| longitud latitud xFactor xoffset yFactor yoffset |	latitud := point x.	longitud := point y.		xFactor := 2.6938.	xoffset := 465.4.		yFactor := -2.6938.	yoffset := 227.066.	^ ((longitud * xFactor) + xoffset) @ ((latitud * yFactor) + yoffset)</body></methods><methods><class-id>Roassal2.RTMetricMap</class-id> <category>private</category><body package="Roassal2-Builder-Map">fillViewWithCountries: collection named: selectorOrBlockForName metric: selectorOrBlockForMetric	"Display a list of countries"	"E.g., countries: #(#('France' 50) #('Germany' 80)) named: #first metric: #second"		"Example:	RTMapBuilder2 new countries: #(#('France' 20) #('Germany' 80)) named: #first metric: #second; open	"	| cn maxValue tcountryName svgCountryName normalizedCountries |	"Initialize the color normalizer"	cn := RTMultiLinearColor new colors: (Array with:(Color r:0.8 g:0.8 b:1) with: (Color r:0 g:0 b:0.3)).		"Get the maximum, useful since we need value between 0.0 and 1.0"	maxValue := (collection collect: selectorOrBlockForMetric) max.		"We pick only the country we have the geographical position"	normalizedCountries := collection select: [ :country | 										tcountryName := selectorOrBlockForName rtValue: country.										svgCountryName := self convertIntoSVGCountryName: tcountryName. 										svgCountryName notNil ].										normalizedCountries do: [ :country |		| elem |		tcountryName := selectorOrBlockForName rtValue: country.		svgCountryName := self convertIntoSVGCountryName: tcountryName.		elem := (RTSVGPath new			path: (RTSVGPath perform: svgCountryName);			fillColor: [ :cc | cn level: (selectorOrBlockForMetric rtValue: cc) / maxValue ];			scale: 1) elementOn: country.		elem  when: TRMouseClick do: [ :evt | elem inspect ].		elem @ RTPopup.		view add: elem.	].</body></methods><methods><class-id>Roassal2.RTMetricMap</class-id> <category>hooks</category><body package="Roassal2-Builder-Map">createView	^ super createView @ RTDraggableView</body></methods><methods><class-id>Roassal2.RTMetricMap</class-id> <category>initialization</category><body package="Roassal2-Builder-Map">initialize	super initialize.	pointShapeBuilder := RTShapeBuilder new.</body></methods><methods><class-id>Roassal2.RTMetricMap</class-id> <category>examples</category><body package="Roassal2-Builder-Map">example01	"self new example01"		| b |	b := RTMetricMap new.	b countries: #('France' 'Germany').	^ b</body><body package="Roassal2-Builder-Map">example02	"self new example02"		| b |	b := RTMetricMap new.	b countries: #(#('France' 50) #('Germany' 80)) named: #first.	^ b</body><body package="Roassal2-Builder-Map">example03	"self new example03"		| b |	b := RTMetricMap new.	b countries: #(#('France' 50) #('Germany' 80)) named: #first metric: #second.	^ b</body><body package="Roassal2-Builder-Map">example04	"self new example04"	"The data shows the average publication for person in the country"	| b data |	b := RTMetricMap new.	data := RTTabTable new input: 'Switzerland	0.04948049Sweden	0.03949838Denmark	0.03724673Finland	0.03512776Iceland	0.03384176Netherlands	0.03266005Norway	0.03235590Monaco	0.03153357United Kingdom	0.03034517Australia	0.03013565New Zealand	0.02928470Canada	0.02848185Israel	0.02841134Singapore	0.02814340Belgium	0.02684193Austria	0.02538793Slovenia	0.02456816Liechtenstein	0.02302488Ireland	0.02280205United States	0.02250084Germany	0.02177218France	0.01953477Spain	0.01643973Greece	0.01601820Italy	0.01575377Czech Republic	0.01557232Estonia	0.01429077Japan	0.01392641Croatia	0.01346473Portugal	0.01319425Luxembourg	0.01267497Korea	0.01157157Hungary	0.01128115Greenland	0.01071429Cyprus	0.00913291Poland	0.00899290Lithuania	0.00829172Bermuda	0.00745301Faeroe Islands	0.00668606Bulgaria	0.00620812New Caledonia	0.00605143Malta	0.00601626Grenada	0.00528995Palau	0.00510745Latvia	0.00497760Romania	0.00432618Kuwait	0.00423781Barbados	0.00421932Turkey	0.00414781Russian Federation	0.00408719Serbia	0.00399812Chile	0.00394931San Marino	0.00374436Seychelles	0.00373640Guam	0.00360543Tunisia	0.00355685French Polynesia	0.00341107Malaysia	0.00339218Brunei Darussalam	0.00326268Armenia	0.00315417Jordan	0.00314134Lebanon	0.00309093Puerto Rico	0.00305665Cayman Islands	0.00297030Argentina	0.00288041Qatar	0.00282271Uruguay	0.00281334Trinidad and Tobago	0.00279863Macedonia	0.00273227Iran	0.00265369Belarus	0.00262056Oman	0.00247495Bahrain	0.00247073South Africa	0.00244784Ukraine	0.00241902Brazil	0.00232119Cuba	0.00218313Dominica	0.00216227Saudi Arabia	0.00208004United Arab Emirates	0.00206949American Samoa	0.00204978China	0.00198446Montenegro	0.00175661Fiji	0.00174223Botswana	0.00172363Georgia	0.00166009Virgin Islands (U.S.)	0.00164332Tuvalu	0.00152130Mexico	0.00137863Costa Rica	0.00135080Andorra	0.00132721Jamaica	0.00128646Moldova	0.00127910Thailand	0.00123095Marshall Islands	0.00119874Bosnia and Herzegovina	0.00116017Egypt	0.00110861Mauritius	0.00110573Samoa	0.00093706Panama	0.00093654Northern Mariana Islands	0.00091924Gabon	0.00091696Venezuela	0.00090597Turks and Caicos Islands	0.00089432Vanuatu	0.00086952Antigua and Barbuda	0.00084204Gambia	0.00084188Morocco	0.00083801Azerbaijan	0.00080366Tonga	0.00077186Mongolia	0.00076525Colombia	0.00075234Belize	0.00069432Bahamas	0.00069362Algeria	0.00066821Namibia	0.00064132India	0.00060709Swaziland	0.00056459Guyana	0.00053183Albania	0.00048797Congo	0.00047290Sri Lanka	0.00040530Solomon Islands	0.00040393Maldives	0.00039889Bhutan	0.00039767Aruba	0.00039069Kenya	0.00038740Zimbabwe	0.00038282Senegal	0.00036806Suriname	0.00035732Cameroon	0.00034761Kazakhstan	0.00033660Pakistan	0.00032448Peru	0.00029889Ecuador	0.00029486Ghana	0.00026906Uzbekistan	0.00025359Benin	0.00025232Bolivia	0.00024428Nigeria	0.00024256Papua New Guinea	0.00023985Nepal	0.00022093Malawi	0.00021098Burkina Faso	0.00020486Uganda	0.00020330Sao Tome and Principe	0.00020202Guinea-Bissau	0.00019536Vietnam	0.00018557Zambia	0.00018529Iraq	0.00017914Syrian Arab Republic	0.00017648Tanzania	0.00016707Nicaragua	0.00016106Lesotho	0.00015549Djibouti	0.00015471Togo	0.00015159Equatorial Guinea	0.00014804Paraguay	0.00014026Philippines	0.00013611El Salvador	0.00012751Bangladesh	0.00012593Mali	0.00011910Kiribati	0.00011906Tajikistan	0.00010988Sudan	0.00010700Cambodia	0.00010468Guatemala	0.00010131Madagascar	0.00010097Mauritania	0.00009194Central African Republic	0.00008817Ethiopia	0.00008738Honduras	0.00008720Comoros	0.00008223Indonesia	0.00008169Rwanda	0.00007864Yemen	0.00007203Niger	0.00006895Dominican Republic	0.00006860Eritrea	0.00006035Mozambique	0.00005971Sierra Leone	0.00005720Haiti	0.00004305Turkmenistan	0.00004156Timor-Leste	0.00004131Guinea	0.00003336Burundi	0.00002853Liberia	0.00002792Chad	0.00002249Angola	0.00002123Myanmar	0.00002040Afghanistan	0.00001626Somalia	0.00000589'.	data convertColumn: 2 to: [ :t | Float readFrom: t ].	b countries: data values named: #first metric: #second.	^ b</body><body package="Roassal2-Builder-Map">example05	"self new example05"	"The data shows the average publication for person in the country"	"Data have been gathered by Aidan Hogan, from University of Chile"	| b data |	b := RTMetricMap new.	data := RTTabTable new input: '	Country	Population	Documents	Citable documents	Citations	Self-Citations	Citations per Document	H index	Docs/Pop1	Switzerland	7997152	395703	377016	7714443	1077442	22.69	569	0.04948049005445942	Sweden	9516617	375891	361569	6810427	1104677	20.11	511	0.03949838477265613	Denmark	5590478	208227	198923	3876514	573278	21.56	427	0.0372467255930534	Finland	5414293	190192	184924	3091345	506506	18.55	372	0.03512776275683645	Iceland	320137	10834	10359	199408	19732	23.7	160	0.03384176149585966	Netherlands	16767705	547634	519258	1.01E+07	1701502	21.25	576	0.03266004500914117	Norway	5018869	162390	154481	2299463	382990	17.23	327	0.0323558953222338	Monaco	37579	1185	1099	16430	2138	16.72	56	0.03153356928071539	United Kingdom	63227526	1918650	1763766	3.14E+07	7513112	18.29	851	0.030345169602239410	Australia	22683600	683585	643028	9338061	2016394	16.73	514	0.030135648662469811	New Zealand	4433100	129822	122601	1705695	276798	15.73	282	0.029284699194694512	Canada	34880491	993461	946493	1.57E+07	3050504	18.5	658	0.028481852506032713	Israel	7907900	224674	215590	3663004	530340	17.78	414	0.028411335499943114	Singapore	5312400	149509	144653	1616952	230656	12.95	268	0.028143400346359515	Belgium	11142157	299077	285735	4696153	701283	18.16	454	0.026841930157688516	Austria	8462446	214844	204243	3047983	433709	16.67	378	0.025387931574393517	Slovenia	2058152	50565	49471	403209	83402	9.53	153	0.024568156287776618	Liechtenstein	36656	844	820	7665	717	12.16	41	0.023024879965080719	Ireland	4588798	104634	98785	1329296	162271	16.47	271	0.022802049687085820	United States	313914040	7063329	6672307	1.30E+08	6.25E+07	20.45	1380	0.022500838127533321	Germany	81889839	1782920	1704566	2.58E+07	6852785	16.16	740	0.021772176154846322	France	65696689	1283370	1229376	1.79E+07	4151730	15.6	681	0.019534774423715623	Spain	46217961	759811	715452	8688942	2212008	13.89	476	0.016439734327526924	Greece	11280167	180688	171529	1827577	324747	12.28	266	0.016018202567391125	Italy	60917978	959688	909701	1.27E+07	2976533	15.26	588	0.015753773048737826	Czech Republic	10514810	163740	160193	1265709	313836	9.28	239	0.015572321325825227	Estonia	1339396	19141	18774	204306	38547	13.58	130	0.014290769869403828	Japan	127561489	1776473	1734289	2.03E+07	6073934	12.11	635	0.013926405327551529	Croatia	4267000	57454	55909	305003	71781	6.45	143	0.01346472931802230	Portugal	10526703	138892	134447	1342075	270626	13.06	234	0.013194254649342731	Luxembourg	531441	6736	6459	52218	5038	12.97	80	0.012674972386398532	Korea	50004000	578625	566953	4640390	1067252	10.55	333	0.011571574274058133	Hungary	9943755	112177	109150	1189497	202337	11.76	254	0.011281150832859434	Greenland	56840	609	600	6927	951	17.65	36	0.010714285714285735	Cyprus	1128994	10311	9938	79318	10252	12.46	86	0.0091329094751610736	Poland	38542737	346611	339712	2441439	652956	8.25	302	0.0089929005301310137	Lithuania	2985509	24755	24434	151748	37377	8.61	109	0.0082917184305925738	Bermuda	64806	483	463	13161	1010	29.08	55	0.0074530136098509439	Faeroe Islands	49506	331	321	5915	481	26.55	35	0.0066860582555649840	Bulgaria	7304632	45348	44609	319449	56183	7.8	138	0.0062081156175971641	New Caledonia	258121	1562	1519	19506	2872	15.38	59	0.0060514254942449542	Malta	418366	2517	2384	21115	1584	12.5	60	0.00601626327187243	Grenada	105483	558	502	2791	157	11.81	23	0.0052899519353829544	Palau	20754	106	102	1314	77	15.01	22	0.0051074491664257545	Latvia	2025473	10082	9918	67924	10428	8.61	85	0.0049776027624164846	Romania	21326905	92264	91247	396795	100983	6.34	135	0.0043261785992857447	Kuwait	3250496	13775	13425	93290	12879	7.67	83	0.0042378147827285448	Barbados	283221	1195	1083	11744	801	11.28	50	0.0042193198950642849	Turkey	73997128	306926	291814	1935431	519675	8.24	210	0.0041478096285034250	Russian Federation	143533000	586646	579814	3132050	938471	5.52	325	0.004087185525279951	Serbia	7223887	28882	28312	81010	23288	8.75	68	0.0039981245553813352	Chile	17464814	68974	66972	685110	134570	13.24	194	0.0039493120281727653	San Marino	31247	117	114	1381	13	17.61	17	0.0037443594585080254	Seychelles	87785	328	309	4632	360	17.86	33	0.0037364014353249455	Guam	162810	587	575	7779	416	14.67	45	0.0036054296419138956	Tunisia	10777500	38334	36859	169981	39062	6.77	85	0.0035568545581071757	French Polynesia	273814	934	908	11157	1288	14.27	45	0.0034110746711271258	Malaysia	29239927	99187	97018	356918	93479	7.85	125	0.0033921767314945859	Brunei Darussalam	412238	1345	1188	8967	874	9.52	40	0.0032626783557071460	Armenia	2969081	9365	9194	73659	13718	8.78	105	0.0031541746419178261	Jordan	6318000	19847	19507	107550	15257	7.24	82	0.0031413421968977562	Lebanon	4424888	13677	12847	97316	10182	9.7	97	0.0030909256912265363	Puerto Rico	3667084	11209	10953	150252	11819	15.34	129	0.0030566520974158264	Cayman Islands	57570	171	165	825	36	7.5	14	0.0029702970297029765	Argentina	41086927	118347	114659	1167884	259247	11.44	222	0.0028804052442276866	Qatar	2050514	5788	5542	23880	2554	5.74	50	0.0028227068920280567	Uruguay	3395253	9552	9263	107649	15598	14.39	104	0.0028133396833755868	Trinidad and Tobago	1337439	3743	3541	25225	2242	8.38	61	0.0027986323114549569	Macedonia	2105575	5753	5611	30344	3717	6.98	62	0.0027322702824644170	Iran	76424443	202807	197571	832211	337637	8.49	135	0.0026536928767671971	Belarus	9464000	24801	24466	122850	24438	5.08	106	0.0026205621301775172	Oman	3314001	8202	7816	43277	5405	7.06	63	0.0024749539906596373	Bahrain	1317827	3256	3071	13287	1404	5.19	39	0.0024707340189569674	South Africa	51189307	125303	118747	1170454	260828	11.36	231	0.0024478354434452575	Ukraine	45593300	110291	108782	452610	131479	4.29	142	0.0024190177065489976	Brazil	198656019	461118	446892	3362480	1151280	10.09	305	0.0023211881639488677	Cuba	11270957	24606	23847	123183	28193	5.81	93	0.0021831331625167278	Dominica	71684	155	145	865	77	7.42	15	0.0021622677305953979	Saudi Arabia	28287855	58840	56534	293556	45641	7.11	124	0.002080044598644980	United Arab Emirates	9205651	19051	18331	100247	11207	7.56	87	0.0020694897080065381	American Samoa	55128	113	107	1199	69	11.25	18	0.0020497750689304982	China	1350695000	2680395	2655272	1.13E+07	6127507	6.17	385	0.0019844561503522383	Montenegro	621081	1091	1076	2209	548	1.79	17	0.0017566146766685884	Fiji	874742	1524	1479	10758	1100	8.48	40	0.0017422279940828385	Botswana	2003910	3454	3369	27060	3224	9.13	57	0.0017236303027581186	Georgia	4511800	7490	7309	50895	7781	7.74	78	0.0016600913161044487	Virgin Islands (U.S.)	105275	173	168	2024	53	12.63	24	0.0016433151270482188	Tuvalu	9860	15	15	109	2	7.24	7	0.0015212981744421989	Mexico	120847477	166604	162116	1346721	295320	10	232	0.0013786303540288290	Costa Rica	4805295	6491	6319	86713	9950	15.67	103	0.0013508015636917291	Andorra	78360	104	93	921	29	8.18	16	0.0013272077590607592	Jamaica	2712100	3489	3298	28602	3554	9.69	57	0.0012864569890490893	Moldova	3559541	4553	4513	27987	5555	6.5	60	0.0012790975016160894	Thailand	66785001	82209	79537	621817	109600	10.96	167	0.0012309500452055195	Marshall Islands	52555	63	62	499	24	7.1	13	0.0011987441727713896	Bosnia and Herzegovina	3833916	4448	4336	14364	2274	6.92	44	0.0011601714800219997	Egypt	80721874	89489	87658	518096	106783	7.56	132	0.0011086090493885298	Mauritius	1291456	1428	1387	9101	772	7.85	41	0.0011057287278854399	Samoa	188889	177	176	1373	104	8.15	19	0.000937058272318663100	Panama	3802281	3561	3401	74014	7882	29.76	106	0.00093654309084468101	Northern Mariana Islands	53305	49	48	443	26	10.71	12	0.000919238345370978102	Gabon	1632572	1497	1419	20417	2496	16.09	61	0.000916958026966039103	Venezuela	29954782	27138	26445	204691	29729	8.42	130	0.000905965531647001104	Turks and Caicos Islands	32427	29	28	251	4	11.28	9	0.0008943164646745105	Vanuatu	247262	215	206	1620	200	9.64	20	0.000869523016072021106	Antigua and Barbuda	89069	75	71	279	17	5.07	9	0.000842043808732556107	Gambia	1791225	1508	1410	35029	3232	25.59	80	0.000841881952295217108	Morocco	32521143	27253	26175	157219	29432	7.11	99	0.000838008676386313109	Azerbaijan	9297507	7472	7373	18607	4318	3	45	0.000803656291950089110	Tonga	104941	81	80	747	53	9.54	16	0.000771862284521779111	Mongolia	2796484	2140	2096	17104	1869	12.97	55	0.000765246645430476112	Colombia	47704427	35890	34768	228686	36843	10.61	133	0.0007523410772757113	Belize	324060	225	217	2209	121	13.26	26	0.000694315867431957114	Bahamas	371960	258	246	2498	206	13.52	25	0.000693622970211851115	Algeria	38481705	25714	25387	105945	20698	6.49	78	0.000668213635544475116	Namibia	2259393	1449	1412	16317	1594	12.61	55	0.000641322691537063117	India	1236686732	750777	716232	4528302	1585248	7.99	301	0.000607087454383719118	Swaziland	1230985	695	676	4421	287	8.2	28	0.000564588520574987119	Guyana	795369	423	400	3157	128	9.23	27	0.00053182862294105120	Albania	3162083	1543	1500	7407	769	7.88	36	0.000487969480877004121	Congo	4337051	2051	1947	16173	1685	10.17	49	0.000472901978786968122	Sri Lanka	20328000	8239	7853	61175	6285	9.91	86	0.00040530303030303123	Solomon Islands	549598	222	209	2345	184	13.16	24	0.000403931600915578124	Maldives	338442	135	131	895	52	6.57	15	0.000398886663002819125	Bhutan	741822	295	290	1360	173	6.55	18	0.00039766952179903126	Aruba	102384	40	40	233	1	7.57	8	0.000390686044694484127	Kenya	43178141	16727	16044	206886	34874	15.09	131	0.000387395094198243128	Zimbabwe	13724317	5254	5092	55075	6025	10.71	72	0.000382824150739159129	Senegal	13726021	5052	4844	44909	5892	10.73	75	0.000368060051780483130	Suriname	534541	191	187	1632	126	10.62	24	0.000357315902802591131	Cameroon	21699631	7543	7318	59454	12199	10.42	72	0.000347609597600991132	Kazakhstan	16797459	5654	5563	21197	3306	4.48	52	0.000336598529575217133	Pakistan	179160111	58133	55915	243958	72199	6.22	111	0.000324475128283438134	Peru	29987800	8963	8528	97117	10907	15.04	109	0.00029888821454058135	Ecuador	15492264	4568	4406	51303	6817	14.47	83	0.000294856839516807136	Ghana	25366462	6825	6594	52958	6618	10.73	73	0.000269056047311604137	Uzbekistan	29776850	7551	7414	29026	5687	3.99	53	0.000253586259124118138	Benin	10050702	2536	2472	18846	3379	10.06	49	0.000252320683669658139	Bolivia	10496285	2564	2505	31002	3203	14.13	61	0.000244276903685447140	Nigeria	168833776	40952	40124	174002	42457	6.23	89	0.000242558100459709141	Papua New Guinea	7167010	1719	1669	18668	2092	11.43	54	0.000239848974677027142	Nepal	27474377	6070	5582	41907	5494	9.73	71	0.000220933126163334143	Malawi	15906483	3356	3163	42360	6042	16.51	80	0.000210983156993284144	Burkina Faso	16460141	3372	3259	31888	5299	12.14	62	0.000204858512451382145	Uganda	36345860	7389	7014	87647	14831	17.01	99	0.00020329688168061146	Sao Tome and Principe	188098	38	37	436	56	11.85	14	0.000202022350051569147	Guinea-Bissau	1663558	325	299	5919	1068	22.77	40	0.000195364393667068148	Vietnam	88775500	16474	16116	125927	18500	11.79	107	0.000185569216732094149	Zambia	14075099	2608	2467	30437	3583	14.07	68	0.000185291769528584150	Iraq	32578209	5836	5526	14909	1831	4.82	41	0.000179138147219818151	Syrian Arab Republic	22399254	3953	3851	29002	3808	9.93	58	0.000176479091669749152	Tanzania	47783107	7983	7708	91706	14922	14.46	93	0.000167067411501726153	Nicaragua	5991733	965	936	9903	840	13.41	45	0.000161055240612357154	Lesotho	2051545	319	308	1848	112	7.31	22	0.000155492567796466155	Djibouti	859652	133	122	653	42	6.6	13	0.000154713767896777156	Togo	6642928	1007	943	5111	516	6.06	31	0.0001515897808918157	Equatorial Guinea	736296	109	107	896	105	9.07	15	0.00014803828894901158	Paraguay	6687361	938	904	9364	615	13.45	45	0.000140264597649207159	Philippines	96706764	13163	12796	141070	15727	13.38	116	0.000136112506049732160	El Salvador	6297394	803	777	4553	263	7.45	31	0.000127513063340169161	Bangladesh	154695368	19481	19037	115329	22662	8.37	97	0.000125931372424803162	Mali	14853572	1769	1717	19599	2135	13.95	55	0.000119095931941489163	Kiribati	100786	12	11	84	1	7.27	6	0.000119064155735916164	Tajikistan	8008990	880	870	2429	396	3.14	23	0.000109876526253622165	Sudan	37195349	3980	3860	24909	3661	9.29	52	0.000107002625516432166	Cambodia	14864646	1556	1462	15891	1739	12.76	49	0.00010467790487577167	Guatemala	15082831	1528	1453	15652	1011	12.7	53	0.000101307241326247168	Madagascar	22293914	2251	2182	22100	3516	11.9	56	0.000100969260041104169	Mauritania	3796141	349	338	2711	150	8.98	25	0.0000919354681504191170	Central African Republic	4525209	399	383	4080	236	11.73	32	0.0000881727230720172171	Ethiopia	91728849	8015	7825	60457	12411	10.42	73	0.000087377091148282172	Honduras	7935846	692	675	7265	370	12.48	39	0.000087199272768146173	Comoros	717503	59	56	516	36	9.71	10	0.0000822296213395623174	Indonesia	246864191	20166	19740	146670	16149	10.94	112	0.0000816886398886423175	Rwanda	11457801	901	838	6336	506	12.72	36	0.0000786363805759936176	Yemen	23852409	1718	1676	8972	1069	7.93	37	0.0000720262678708888177	Niger	17157042	1183	1158	11457	1055	10.83	47	0.0000689512795970308178	Dominican Republic	10276621	705	678	7234	422	13.02	41	0.0000686023158779525179	Eritrea	6130922	370	361	3233	261	9.35	25	0.0000603498136169405180	Mozambique	25203395	1505	1457	15973	1867	12.98	53	0.0000597141773955453181	Sierra Leone	5978727	342	323	2077	134	7.87	21	0.0000572028125719739182	Haiti	10173775	438	397	6447	441	21.58	36	0.000043051866195193183	Turkmenistan	5172931	215	213	1259	119	7.29	16	0.0000415625106926808184	Timor-Leste	1210233	50	44	216	12	7.23	8	0.000041314358474773185	Guinea	11451273	382	363	4249	179	14.19	34	0.0000333587366225572186	Burundi	9849569	281	273	2195	124	9.51	24	0.0000285291671138097187	Liberia	4190435	117	103	570	39	8.74	14	0.0000279207289935293188	Chad	12448175	280	266	3013	264	12.02	27	0.0000224932570437032189	Angola	20820525	442	427	2806	205	8.9	25	0.0000212290516209366190	Myanmar	52797319	1077	1049	7944	612	11.9	38	0.0000203987630508284191	Afghanistan	29824536	485	441	2088	241	5.38	21	0.0000162617785570914192	Somalia	10195134	60	57	323	12	7.96	11	0.00000588516050892514'.	data removeFirstRow.	data convertColumn: 3 to: [ :t | Integer readFrom: t ].	data convertColumn: 4 to: [ :t | Integer readFrom: t ].	data convertColumn: 5 to: [ :t | Integer readFrom: t ].	data convertColumn: 9 to: [ :t | Integer readFrom: t ].		b countries: data values named: #second metric: #third.		b makeSelectable: #third as: 'Population'.	b makeSelectable: #fourth as: 'Documents'.	b makeSelectable: #fifth as: 'Citable documents'.	b makeSelectable: [ :row | row at: 9 ] as: 'H index'.		^ b</body><body package="Roassal2-Builder-Map">example06DeepIntoPharo	"self new example06DeepIntoPharo"	"The data shows the country that have bought the book DeepIntoPharo from Sep 2013 until Mar 2014"	| b data |	b := RTMetricMap new.	data := RTTabTable new input: 'QuantitÃ©	RÃ©gion1	US1	US1	US1	FR1	US1	FR1	DE2	US1	DE1	US1	IT1	ES1	US-1	US1	US1	CA1	CH1	US1	US2	US1	EU1	US1	FR3	FR1	UK1	ES2	US2	UK1	EU1	EU1	US1	US1	US1	US2	UK1	FR5	US1	UK1	EU1	UK1	DE1	US1	NL1	US2	DE1	US1	US1	DE1	US1	DE1	DE1	DE1	DE1	US1	FR1	AU1	US1	US1	US1	US1	US1	US1	US1	NL1	NL1	US1	US1	US3	CH1	US1	US1	DE1	DE1	IE1	US1	UK1	DE1	US1	US1	US20	FR20	FR1	FR'.	data removeFirstRow.	data convertColumn: 1 to: [ :t | Integer readFrom: t ].	data gather: 2 using: [ :r1 :r2 | Array with: r1 first + r2 first with: r1 second ].		b countries: RTSVGPath countries color: Color white.	b countries: data values named: #second metric: #first.		^ b</body><body package="Roassal2-Builder-Map">example07GrowthAndDevelopmentBridgeIndex	"self new example07GrowthAndDevelopmentBridgeIndex"	"Data from http://www.gdbridge.org/gdb_index"| b table |b := RTMetricMap new.table := RTTabTable new.table input: 'Hong Kong, China	1	0.631447Singapore	2	0.5889286Netherlands	3	0.515425Switzerland	4	0.5018929United States	5	0.4871152Norway	6	0.4851121Denmark	7	0.4665922Sweden	8	0.4567912Finland	9	0.4460537Korea, Rep.	10	0.4382369Ireland	11	0.4324097Luxembourg	12	0.4227912Germany	13	0.4190357Belgium	14	0.4022478Canada	15	0.3983661Australia	16	0.3982408United Kingdom	17	0.3930691Japan	18	0.3904902Spain	19	0.3876414Kuwait	20	0.3800776France	21	0.377015Brunei Darussalam	22	0.3627484Austria	23	0.3621858Israel	24	0.3585244China	25	0.3560882' usingDelimiters: String tab.table convertColumn: 3 to: [ :t | Float readFrom: t ].b allCountriesColor: Color white.b countries: table values named: #first metric: #third.^ b</body></methods><methods><class-id>Roassal2.RTMetricMap</class-id> <category>adding</category><body package="Roassal2-Builder-Map">countries: countryNames	^ self countries: countryNames color: [ :c | Color random ]</body><body package="Roassal2-Builder-Map">countries: collection named: selectorOrBlockForName	"Display a list of countries"	"E.g., countries: #(#('France' 50) #('Germany' 80)) named: #first"	collection do: [ :country |		| elem |		elem := (RTSVGPath new			path: (RTSVGPath perform: (selectorOrBlockForName rtValue: country) asSymbol);			fillColor: Color random;			scale: 1) elementOn: (country asString).		elem @ RTPopup.		view add: elem.	].</body></methods><methods><class-id>Roassal2.RTMetricMap</class-id> <category>accessing</category><body package="Roassal2-Builder-Map">pointShape	^ pointShapeBuilder</body></methods><methods><class-id>Roassal2.RTLabelled</class-id> <category>as yet unclassified</category><body package="Roassal2-Interactions">OBSOLETECLASS	"THIS CLASS IS OBSOLETE. PLEASE REFER TO RTLabeled"</body></methods><methods><class-id>Roassal2.RTLabelled class</class-id> <category>instance creation</category><body package="Roassal2-Interactions">new	self deprecated: 'RTLabelled is deprecated. Please use RTLabeled'.	^ super new</body></methods><methods><class-id>Roassal2.RTRotableView</class-id> <category>accessing</category><body package="Roassal2-Interactions">center	^ center</body><body package="Roassal2-Interactions">center: anObject	center := anObject</body><body package="Roassal2-Interactions">elements	"Return a block or a collection of Roassal elements"	^ elements</body><body package="Roassal2-Interactions">elements: elementsOrBlock	"Useful to specify which elements have to be rotated"	elements := elementsOrBlock</body></methods><methods><class-id>Roassal2.RTRotableView</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	view := element.	draggingView := false.	view canvas when: TRMouseRightDragStart do: [ draggingView := true ].	view canvas when: TRMouseLeftDragStart do: [ :e |		draggingView := false.		startPoint := (e positionFromCamera - center value). ].	view canvas when: TRMouseDragging do: [ :e | 		draggingView			ifTrue: [ self dragViewWithEvent: e]			ifFalse: [ self updateTargetElements: e ]  ].	view canvas when: TRMouseDragEnd do: [ draggingView := false ].</body></methods><methods><class-id>Roassal2.RTRotableView</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	elements := [ view elements ].	center := 0 @ 0.	startPoint := 0 @ 0.</body></methods><methods><class-id>Roassal2.RTRotableView</class-id> <category>selection events</category><body package="Roassal2-Interactions">dragViewWithEvent: e	view canvas camera translateBy: e step negated / view canvas camera scale.	e signalUpdate</body></methods><methods><class-id>Roassal2.RTRotableView</class-id> <category>action</category><body package="Roassal2-Interactions">updateTargetElements: evt	| target c angle eangle p d evtPoint |	target := elements value."A collection of elements"	c := center value."a point"	evtPoint := (evt positionFromCamera - c ).	angle := startPoint theta - evtPoint theta.	startPoint := evtPoint.	target do: [ :e |		d := c dist: e position .		eangle := (e position - c) theta - angle.		p := c + ((d * eangle cos) @ (d * eangle sin)).		e translateTo: p.		 ].	view signalUpdate.</body></methods><methods><class-id>Roassal2.RTWeightedCircleLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements	| angle rad center angleIncrement |	rad := self computeRadiusFor: elements.	center := Point x: rad y: rad.	angleIncrement := self computeIncrementalAngleFor: elements.	angle := self initialAngle.	elements		do: [ :each | 			| point fctr |			"The factor weighs the angleIncrement"			"The angle is increased by half of the total increment,			then the point is set, and then it's increased by the other half"			"This is to consider both last and next elements weights"			fctr := (elements size)*(each height)/(self weightSum: elements).			angle := angle + (angleIncrement*(fctr/2)).			point := center + (Point r: rad theta: angle).			angle := angle + (angleIncrement*(fctr/2)).			translator translate: each to: point. ]</body></methods><methods><class-id>Roassal2.RTNiceStep</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Labeling">i	^ i</body><body package="Roassal2-Builder-Grapher-Labeling">i: aNumber	i := aNumber</body><body package="Roassal2-Builder-Grapher-Labeling">j	^ j</body><body package="Roassal2-Builder-Grapher-Labeling">j: aNumber	j := aNumber</body><body package="Roassal2-Builder-Grapher-Labeling">offset	^ offset</body><body package="Roassal2-Builder-Grapher-Labeling">offset: aNumber	offset := aNumber</body><body package="Roassal2-Builder-Grapher-Labeling">stepSize	^ stepSize</body><body package="Roassal2-Builder-Grapher-Labeling">stepSize: aNumber	stepSize := aNumber</body></methods><methods><class-id>Roassal2.RTUninterpolateNumber</class-id> <category>interpolating</category><body package="Roassal2-Builder-Grapher-Scaling">uninterpolate: x	^ (x - a )/b</body></methods><methods><class-id>Roassal2.TRTextPath</class-id> <category>drawing</category><body package="Roassal2-Experimental">drawOn: athensCanvas	TRPlatform current drawTextPathFor: self canvas: athensCanvas</body></methods><methods><class-id>Roassal2.TRTextPath</class-id> <category>accessing</category><body package="Roassal2-Experimental">outlineColor	^ outlineColor</body><body package="Roassal2-Experimental">outlineColor: aColor	outlineColor:= aColor</body><body package="Roassal2-Experimental">outlineWidth	^ outlineWidth</body><body package="Roassal2-Experimental">outlineWidth: aNumber	outlineWidth := aNumber</body></methods><methods><class-id>Roassal2.RTGrapher</class-id> <category>min and max</category><body package="Roassal2-Builder-Grapher-Core">homogenizeMinAndMax	| tminX tmaxX tminY tmaxY block r |	generator setLooseFlag: true.	block := [ :axis :lmin :lmax | 		| result nticks |		nticks := axis numberOfTicks isZero			ifTrue: [ 2 ]			ifFalse: [ axis numberOfTicks ].		result := generator searchMin: lmin max: lmax desired: nticks.		axis numberOfTicks isZero			ifFalse: [ axis numberOfTicks: result numberOfTicks ].		axis numberOfLabels isZero			ifFalse: [ axis numberOfLabels: result numberOfTicks ].		result ].	shouldUseNiceLabelsForX		ifTrue: [ 			r := block value: self getAxisX value: self minX value: self maxX.			self minX: (tminX := r min).			self maxX: (tmaxX := r max) ]		ifFalse: [ 			tminX := self minX.			tmaxX := self maxX ].	shouldUseNiceLabelsForY		ifTrue: [ 			r := block value: self getAxisY value: self minY value: self maxY.			self minY: (tminY := r min).			self maxY: (tmaxY := r max) ]		ifFalse: [ 			tminY := self minY.			tmaxY := self maxY ].	datasets		do: [ :ds | 			ds minX: tminX.			ds minY: tminY.			ds maxX: tmaxX.			ds maxY: tmaxY ]</body></methods><methods><class-id>Roassal2.RTGrapher</class-id> <category>data sets</category><body package="Roassal2-Builder-Grapher-Core">datasets	^ datasets copy</body><body package="Roassal2-Builder-Grapher-Core">hasDataSet	^ self numberOfDataSets &gt; 0</body><body package="Roassal2-Builder-Grapher-Core">maxXFromDataSets	^ (datasets collect: #maxX) max</body><body package="Roassal2-Builder-Grapher-Core">maxYFromDataSets	^ (datasets collect: #maxY) max</body><body package="Roassal2-Builder-Grapher-Core">minXFromDataSets	^ (datasets collect: #minX) min</body><body package="Roassal2-Builder-Grapher-Core">minYFromDataSets	^ (datasets collect: #minY) min</body></methods><methods><class-id>Roassal2.RTGrapher</class-id> <category>utility</category><body package="Roassal2-Builder-Grapher-Core">checkIfDataSetHaveBeenAdded	datasets ifEmpty: [ self error: 'No dataset has been added?' ]</body><body package="Roassal2-Builder-Grapher-Core">getPixelPositionOf: aPoint	"Return the position in pixel in the View for a given data point"	"This method should be called only if all the dataset have been set the min and max values"	^ datasets first getPixelPositionOf: aPoint</body><body package="Roassal2-Builder-Grapher-Core">getPositionFromPixelPosition: aPoint	"Return the position in pixel in the View for a given data point"	"This method should be called only if all the dataset have been set the min and max values"	^ datasets first getPositionFromPixelPosition: aPoint</body></methods><methods><class-id>Roassal2.RTGrapher</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">getMaxNumberOfPoints	"Return the maximum number of points any of the dataset has."	^ datasets inject: 0 into: [ :max :ds | max max: ds numberOfPoints ]</body><body package="Roassal2-Builder-Grapher-Core">legend	^ legendBuilder		ifNil: [ self resetLegend.			legendBuilder ]</body><body package="Roassal2-Builder-Grapher-Core">legend: aLegendBuilder	legendBuilder := aLegendBuilder</body><body package="Roassal2-Builder-Grapher-Core">maxX	^ self hasDataSet 		ifTrue: [ maxX max: self maxXFromDataSets ]		ifFalse: [ maxX ]</body><body package="Roassal2-Builder-Grapher-Core">maxY	^ self hasDataSet 		ifTrue: [ maxY max: self maxYFromDataSets ]		ifFalse: [ maxY ]</body><body package="Roassal2-Builder-Grapher-Core">minX	^ self hasDataSet 		ifTrue: [ minX min: self minXFromDataSets ]		ifFalse: [ minX ]</body><body package="Roassal2-Builder-Grapher-Core">minY	^ self hasDataSet 		ifTrue: [ minY min: self minYFromDataSets ]		ifFalse: [ minY ]</body><body package="Roassal2-Builder-Grapher-Core">numberOfDataSets	^ datasets size</body><body package="Roassal2-Builder-Grapher-Core">numberOfDecorators	"Return the number of decorators that have been added"	^ decorators size</body><body package="Roassal2-Builder-Grapher-Core">shouldUseNiceLabels: aBool	self shouldUseNiceLabelsForX: aBool.	self shouldUseNiceLabelsForY: aBool.</body><body package="Roassal2-Builder-Grapher-Core">shouldUseNiceLabelsForX: aBool	shouldUseNiceLabelsForX := aBool</body><body package="Roassal2-Builder-Grapher-Core">shouldUseNiceLabelsForY: aBool	shouldUseNiceLabelsForY := aBool</body><body package="Roassal2-Builder-Grapher-Core">xScale	"Return the scale transformation that should be used for the X-axis"	| s |	s := datasets collect: #xScale.	s := s asSet.	self assert: [ s size = 1 ] description: 'You are trying to have more than one data set with different scale. Please, homogeneize'.	^ s anyOne</body><body package="Roassal2-Builder-Grapher-Core">yScale	"Return the scale transformation that should be used for the Y-axis"	| s |	s := datasets collect: #yScale.	s := s asSet.	self assert: [ s size = 1 ] description: 'You are trying to have more than one data set with different scale. Please, homogeneize'.	^ s anyOne</body></methods><methods><class-id>Roassal2.RTGrapher</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">datasetComputeMinAndMax	datasets do: #computeMinAndMax</body><body package="Roassal2-Builder-Grapher-Core">inferLegendInteractions	datasets		select:			[ :each | each interaction hasInteractionOfType: RTDataHighlightInteraction ]		thenDo: [ :each | 			(self legend legendElement attributeAt: #nestedElements)				select: [ :grp | grp size &gt; 1 and: [ grp second model = each ] ]				thenDo: [ :grp | 					| int |					int := each interaction						interactionOfType: RTDataHighlightInteraction.					int legendElements: grp.					grp @ int ] ].	datasets		select:			[ :each | each interaction hasInteractionOfType: RTDataToggleInteraction ]		thenDo: [ :each | 			(self legend legendElement attributeAt: #nestedElements)				select: [ :grp | grp size &gt; 1 and: [ grp second model = each ] ]				thenDo: [ :grp | 					| int |					int := each interaction						interactionOfType: RTDataToggleInteraction.					int legendElements: grp.					grp @ int ] ]</body><body package="Roassal2-Builder-Grapher-Core">renderDataSetsIn: aView	datasets do: [ :aDataset | aDataset renderIn: aView ]</body><body package="Roassal2-Builder-Grapher-Core">renderDataset: aDataset inLegend: aLegend	| color |	color := aDataset shouldConnect		ifTrue: [ aDataset lineShape color rtValue: RTElement new ]		ifFalse: [ aDataset dotShape color rtValue: RTElement new ].	aLegend addColor: color object: aDataset text: #label</body><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	self datasetComputeMinAndMax.	self defineAxesIfNecessary.	self homogenizeMinAndMax.	self renderAxis.	self renderAllDecoratorsInFront.	self renderDataSetsIn: aView.	self renderAllDecoratorsBehind.	legendBuilder ifNotNil: [ self renderLegend ]</body><body package="Roassal2-Builder-Grapher-Core">renderLegend	self legend view: self view.	datasets		do: [ :each | self renderDataset: each inLegend: self legend ].	self legend build.	self inferLegendInteractions</body></methods><methods><class-id>Roassal2.RTGrapher</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.		"Collection of data sets"	datasets := OrderedCollection new.		generator := RTLabelGenerator nice: RTNiceStepSizeGenerator new.	self shouldUseNiceLabels: true</body></methods><methods><class-id>Roassal2.RTGrapher</class-id> <category>resetting</category><body package="Roassal2-Builder-Grapher-Core">resetLegend	legendBuilder := self createLegendBuilder</body></methods><methods><class-id>Roassal2.RTGrapher</class-id> <category>adding</category><body package="Roassal2-Builder-Grapher-Core">add: aDataSet	"Essential method. Add a dataset into the grapher. Only non-empty set are considered"	self assert: [ (aDataSet isKindOf: RTAbstractData) or: [ aDataSet isKindOf: RTAbstractDataSet ]] description: 'Wrong argument'.	aDataSet numberOfPoints = 0 ifTrue: [ ^ self ].		datasets add: aDataSet.	aDataSet addedInBuilder: self</body></methods><methods><class-id>Roassal2.RTGrapher</class-id> <category>public-axis</category><body package="Roassal2-Builder-Grapher-Core">axisX	| s |	self checkIfDataSetHaveBeenAdded.	s := super axisX.	s scaleTransformation: self xScale.	^ s</body><body package="Roassal2-Builder-Grapher-Core">axisXWithNumberOfTicks: aNumber	self axisX numberOfTicks: aNumber</body><body package="Roassal2-Builder-Grapher-Core">axisY	| s |	self checkIfDataSetHaveBeenAdded.	s := super axisY.	s scaleTransformation: self yScale.	^ s</body><body package="Roassal2-Builder-Grapher-Core">axisYWithNumberOfTicks: aNumber	self axisY numberOfTicks: aNumber</body></methods><methods><class-id>Roassal2.RTSVGPath</class-id> <category>public-configuration</category><body package="Roassal2-Shapes">borderWidthConstant	"Make that the width is constant, independent of its scale"	self borderWidth: [ :e | (1 / (self scaleFor: e)) asFloat ]</body></methods><methods><class-id>Roassal2.RTSVGPath</class-id> <category>accessing</category><body package="Roassal2-Shapes">borderColor: aValueOrBlock	borderColor := aValueOrBlock</body><body package="Roassal2-Shapes">borderWidth: aValueOrBlock	borderWidth := aValueOrBlock</body><body package="Roassal2-Shapes">centeredPath: aString 	self path: aString.	keepInOriginalPosition := false.</body><body package="Roassal2-Shapes">path: aPathAsString	"Examples of SVG paths can be found on http://www.w3.org/TR/SVG/paths.html#PathData"	path := aPathAsString.</body></methods><methods><class-id>Roassal2.RTSVGPath</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeFor: anElement	| shape |	shape := TRSVGPath new.	self updateFor: anElement trachelShape: shape.	^ shape</body><body package="Roassal2-Shapes">updateFor: anElement trachelShape: trShape	trShape isNil		ifTrue: [ ^ self ].	trShape		strokePaint: (borderColor rtValue: anElement);		borderWidth: (borderWidth rtValue: anElement);		fillColor: (self fillColor rtValue: anElement);		rotateByDegrees: (self rotationFor: anElement);		scaleBy: (self scaleFor: anElement).			keepInOriginalPosition		ifTrue: [ trShape path: (path rtValue: anElement) ]		ifFalse: [ trShape centeredPath: (path rtValue: anElement) ].	trShape resetPath</body></methods><methods><class-id>Roassal2.RTSVGPath</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	self path: ''.	scale := 1.	borderWidth := 1.	borderColor := Color black.	self fillColor: nil.	keepInOriginalPosition := true.</body></methods><methods><class-id>Roassal2.RTSVGPath class</class-id> <category>countries</category><body package="Roassal2-Shapes">Afghanistan	^ 'M630.069,130.876l2.832,1.030l2.059,-0.257l0.517,-1.288l2.058,-0.386l1.546,-0.772l0.515,-2.188l2.317,-0.516l0.387,-1.030l1.285,0.774l0.902,0.128l1.416,0l2.059,0.515l0.773,0.385l2.059,-0.900l0.901,0.515l0.773,-1.287l1.674,0.128l0.386,-0.387l0.256,-1.157l1.160,-0.903l1.543,0.645l-0.384,0.772l0.901,0.129l-0.259,2.317l1.030,0.900l0.904,-0.643l1.285,-0.257l1.674,-1.159l1.802,0.129l2.832,0l0.387,0.773l-1.545,0.385l-1.416,0.516l-3.090,0.256l-2.833,0.517l-1.545,1.287l0.645,1.029l0.257,1.416l-1.287,1.159l0.129,1.029l-0.773,0.902l-2.575,0l1.030,1.673l-1.673,0.772l-1.158,1.545l0.129,1.674l-1.031,0.772l-1.029,-0.257l-2.061,0.386l-0.257,0.644l-2.058,0l-1.417,1.544l-0.129,2.317l-3.476,1.159l-1.931,-0.257l-0.514,0.643l-1.674,-0.386l-2.704,0.386l-4.504,-1.415l2.445,-2.447l-0.129,-1.673l-2.060,-0.515l-0.256,-1.674l-0.902,-2.188l1.158,-1.416l-1.158,-0.386l0.773,-1.930l-1.029,3.477z'</body><body package="Roassal2-Shapes">Albania	^ 'M520.651,114.27l-0.257,0.900l0.385,1.160l1.029,0.643l0,0.644l-0.901,0.386l-0.128,0.901l-1.288,1.287l-0.386,-0.128l-0.127,-0.644l-1.417,-0.900l-0.259,-1.288l0.259,-1.803l0.256,-0.901l-0.384,-0.386l-0.258,-0.901l1.287,-1.288l0.129,0.516l0.771,-0.258l0.516,0.773l0.643,0.257l-0.130,-1.030z'</body><body package="Roassal2-Shapes">Algeria	^ 'M497.608,163.703l-9.269,5.150l-7.852,5.276l-3.734,1.288l-2.961,0.257l-0.128,-1.801l-1.159,-0.387l-1.672,-0.772l-0.645,-1.288l-9.139,-5.792l-9.140,-5.922l-10.040,-6.566l0,-0.514l0,-3.347l4.377,-1.931l2.703,-0.514l2.188,-0.644l1.030,-1.417l3.090,-1.029l0.128,-2.061l1.545,-0.128l1.287,-1.030l3.476,-0.515l0.515,-1.030l-0.772,-0.514l-0.902,-2.832l-0.128,-1.674l-1.030,-1.674l2.574,-1.545l2.962,-0.515l1.673,-1.029l2.574,-0.902l4.633,-0.385l4.377,-0.258l1.416,0.385l2.575,-1.028l2.833,0l1.029,0.643l1.930,-0.258l-0.642,1.416l0.514,2.575l-0.642,2.189l-1.674,1.545l0.257,2.059l2.187,1.545l0,0.643l1.674,1.159l1.159,4.763l0.903,2.446l0.126,1.158l-0.513,2.318l0.256,1.158l-0.387,1.546l0.259,1.673l-1.030,1.030l1.546,2.059l0.127,1.159l0.902,1.415l1.286,-0.385l2.060,1.158l-1.288,-1.674z'</body><body package="Roassal2-Shapes">Angola	^ 'M497.994,242.615l-0.643,-2.060l1.030,-1.159l0.900,-0.515l0.902,1.031l-0.902,0.516l-0.514,0.642l0,1.159l0.773,-0.386zM496.836,273.64l-0.257,-1.804l0.385,-2.317l0.900,-2.445l0.130,-1.158l0.901,-2.447l0.643,-1.157l1.545,-1.674l0.902,-1.288l0.257,-1.931l-0.129,-1.544l-0.771,-0.902l-0.775,-1.673l-0.642,-1.674l0.129,-0.515l0.772,-1.029l-0.772,-2.704l-0.516,-1.802l-1.414,-1.674l0.257,-0.515l1.157,-0.387l0.774,0.131l0.900,-0.389l7.982,0.131l0.643,1.930l0.771,1.674l0.645,0.773l1.031,1.415l1.801,-0.128l0.900,-0.387l1.418,0.387l0.514,-0.772l0.644,-1.545l1.673,-0.128l0.128,-0.388l1.417,0l-0.258,0.902l3.219,0l0.128,1.672l0.514,1.031l-0.385,1.673l0.129,1.674l0.900,1.030l-0.129,3.091l0.645,-0.131l1.158,0l1.674,-0.385l1.287,0.128l0.257,0.902l-0.257,1.286l0.387,1.287l-0.387,0.903l0.257,1.028l-5.536,-0.127l-0.128,8.625l1.804,2.187l1.673,1.674l-4.892,1.158l-6.566,-0.385l-1.801,-1.287l-10.944,0.128l-0.384,0.128l-1.674,-1.159l-1.672,-0.128l-1.674,0.515l1.288,-0.516z'</body><body package="Roassal2-Shapes">Argentina	^ 'M319.448,295.781l1.288,1.544l0,2.189l-2.319,1.416l-1.801,1.158l-2.961,2.576l-3.605,3.732l-0.772,2.189l-0.644,2.702l0,2.705l-0.643,0.643l-0.129,1.674l-0.257,1.417l3.475,2.317l-0.387,1.802l1.675,1.287l-0.129,1.288l-2.574,3.475l-3.991,1.417l-5.406,0.513l-2.961,-0.257l0.514,1.674l-0.514,1.931l0.514,1.415l-1.673,0.902l-2.703,0.385l-2.575,-1.028l-1.029,0.770l0.386,2.705l1.801,0.772l1.417,-0.901l0.901,1.416l-2.575,0.902l-2.188,1.673l-0.386,2.705l-0.643,1.414l-2.448,0l-2.188,1.416l-0.772,1.932l2.704,2.059l2.574,0.516l-0.901,2.445l-3.218,1.545l-1.803,3.090l-2.445,1.030l-1.031,1.287l0.774,2.832l1.802,1.543l-1.030,-0.127l-2.574,-0.387l-6.436,-0.385l-1.160,-1.545l0,-2.060l-1.801,0.129l-0.902,-0.902l-0.258,-2.831l2.060,-1.288l0.901,-1.674l-0.386,-1.288l1.546,-2.316l0.900,-3.605l-0.257,-1.545l1.158,-0.515l-0.258,-1.030l-1.287,-0.514l0.901,-1.158l-1.157,-1.030l-0.645,-3.089l1.030,-0.516l-0.385,-3.347l0.513,-2.703l0.773,-2.447l1.673,-1.030l-0.900,-2.574l0,-2.446l2.060,-1.802l0,-2.189l1.415,-2.702l0.129,-2.447l-0.772,-0.514l-1.287,-4.636l1.672,-2.831l-0.257,-2.575l1.030,-2.446l1.802,-2.574l1.802,-1.673l-0.772,-1.031l0.515,-0.900l0,-4.378l2.960,-1.415l0.902,-2.704l-0.386,-0.772l2.316,-2.447l3.477,0.644l1.544,2.060l1.030,-2.187l3.089,0.127l0.515,0.515l4.892,4.377l2.188,0.387l3.348,2.059l2.703,1.030l0.386,1.157l-2.574,4.121l2.702,0.772l2.961,0.387l2.189,-0.387l2.446,-2.059l0.386,-2.445l-1.416,0.516zM282.761,371.99l3.475,1.674l3.733,0.642l-1.159,1.417l-2.574,0.130l-1.416,-1.031l-1.546,0l-2.960,0l0.129,-5.923l0.901,1.160l-1.417,-1.931z'</body><body package="Roassal2-Shapes">Armenia	^ 'M582.697,116.33l3.605,-0.515l0.642,0.772l1.032,0.386l-0.516,0.773l1.416,0.900l-0.772,0.902l1.159,0.643l1.158,0.516l0.129,1.801l-1.029,0.129l-1.032,-1.544l0,-0.515l-1.287,0.129l-0.771,-0.772l-0.516,0l-1.029,-0.773l-2.059,-0.643l0.256,-1.288l0.386,0.901z'</body><body package="Roassal2-Shapes">Australia	^ 'M863.067,336.975l1.674,0.129l0.129,3.218l-0.900,0.901l-0.258,2.188l-0.900,-0.772l-1.934,1.931l-0.514,-0.129l-1.672,-0.129l-1.675,-2.316l-0.385,-1.803l-1.545,-2.318l0.127,-1.287l1.674,0.259l2.576,0.901l1.545,-0.258l-2.058,0.515zM805.011,313.803l-2.832,1.288l-2.317,0.643l-0.513,1.416l-1.034,1.159l-2.185,0l-1.803,0.256l-2.318,-0.513l-1.930,0.386l-1.930,0.127l-1.546,1.417l-0.772,-0.128l-1.416,0.772l-1.287,0.772l-1.932,-0.128l-1.800,0l-2.834,-1.674l-1.416,-0.514l0,-1.545l1.289,-0.387l0.515,-0.515l-0.131,-1.029l0.387,-1.932l-0.256,-1.545l-1.547,-2.702l-0.386,-1.546l0.129,-1.545l-1.030,-1.801l-0.127,-0.773l-1.160,-1.030l-0.387,-2.058l-1.545,-2.189l-0.384,-1.160l1.287,1.160l-1.029,-2.447l1.416,0.774l0.771,1.030l0,-1.417l-1.416,-2.061l-0.258,-0.900l-0.644,-0.773l0.386,-1.545l0.516,-0.644l0.387,-1.415l-0.258,-1.546l1.029,-1.930l0.258,2.060l1.158,-1.932l2.188,-0.900l1.287,-1.160l2.060,-0.901l1.159,-0.257l0.773,0.387l2.188,-1.029l1.544,-0.258l0.516,-0.644l0.643,-0.257l1.545,0.128l2.832,-0.901l1.418,-1.160l0.640,-1.414l1.676,-1.416l0.129,-1.030l0,-1.417l1.930,-2.318l1.158,2.318l1.031,-0.514l-0.902,-1.287l0.902,-1.287l1.156,0.516l0.260,-2.061l1.545,-1.289l0.643,-1.028l1.289,-0.516l0.127,-0.773l1.158,0.386l0,-0.643l1.158,-0.387l1.416,-0.385l1.930,1.157l1.547,1.675l1.671,0l1.676,0.258l-0.515,-1.545l1.287,-2.060l1.158,-0.772l-0.385,-0.643l1.158,-1.545l1.672,-1.031l1.289,0.385l2.317,-0.514l-0.129,-1.416l-1.932,-0.900l1.418,-0.388l1.801,0.775l1.416,1.029l2.316,0.772l0.774,-0.387l1.674,0.902l1.544,-0.773l1.030,0.258l0.644,-0.516l1.158,1.289l-0.644,1.416l-1.029,1.157l-0.903,0l0.260,1.160l-0.773,1.286l-0.901,1.289l0.127,0.772l2.190,1.545l2.058,0.900l1.418,0.902l1.930,1.544l0.771,0l1.418,0.773l0.387,0.772l2.574,0.900l1.801,-0.900l0.516,-1.416l0.513,-1.289l0.387,-1.415l0.772,-2.188l-0.385,-1.286l0.127,-0.775l-0.256,-1.542l0.387,-2.062l0.513,-0.514l-0.386,-0.901l0.644,-1.417l0.516,-1.414l0,-0.772l1.029,-1.032l0.772,1.288l0.130,1.674l0.641,0.385l0.131,1.029l1.029,1.417l0.258,1.544l-0.129,1.031l0.902,2.061l1.801,-1.031l0.903,1.158l1.285,1.031l-0.256,1.158l0.515,2.317l0.387,1.416l0.641,0.257l0.773,2.319l-0.256,1.414l0.901,1.805l2.961,1.414l1.800,1.288l1.803,1.159l-0.258,0.642l1.545,1.674l1.030,2.961l1.031,-0.642l1.158,1.286l0.643,-0.516l0.386,2.961l1.932,1.544l1.287,1.030l2.061,2.189l0.771,2.189l0.129,1.545l-0.260,1.674l1.289,2.316l-0.129,2.317l-0.515,1.287l-0.645,2.447l0,1.545l-0.513,1.930l-1.159,2.446l-2.058,1.288l-0.903,2.060l-0.900,1.415l-0.902,2.317l-1.030,1.288l-0.642,2.060l-0.387,1.802l0.129,0.900l-1.545,0.902l-2.961,0.128l-2.445,1.031l-1.287,1.030l-1.674,1.157l-2.188,-1.157l-1.675,-0.515l0.517,-1.287l-1.547,0.516l-2.316,1.929l-2.316,-0.773l-1.547,-0.385l-1.545,-0.258l-2.572,-0.772l-1.803,-1.674l-0.516,-2.060l-0.644,-1.288l-1.287,-1.157l-2.575,-0.258l0.903,-1.287l-0.645,-2.060l-1.287,1.931l-2.445,0.387l1.416,-1.416l0.386,-1.545l1.030,-1.288l-0.258,-2.059l-2.188,2.316l-1.673,0.902l-1.032,2.189l-2.058,-1.159l0.129,-1.416l-1.674,-1.932l-1.545,-1.029l0.516,-0.643l-3.348,-1.675l-1.932,0l-2.574,-1.286l-4.893,0.256l-3.474,0.902l-3.090,0.902l2.574,0.130z'</body><body package="Roassal2-Shapes">Austria	^ 'M510.996,97.278l-0.257,1.158l-1.545,0l0.643,0.643l-0.900,1.674l-0.515,0.515l-2.446,0l-1.289,0.644l-2.315,-0.258l-3.734,-0.644l-0.644,-0.900l-2.703,0.386l-0.258,0.514l-1.672,-0.386l-1.416,0l-1.160,-0.514l0.385,-0.644l-0.128,-0.515l0.903,-0.128l1.285,0.772l0.387,-0.772l2.446,0.128l1.931,-0.515l1.287,0.128l0.773,0.515l0.258,-0.386l-0.387,-1.802l1.030,-0.386l0.901,-1.158l2.058,0.772l1.417,-1.030l1.030,-0.258l2.061,0.901l1.286,-0.129l1.158,0.516l-0.127,0.256l-0.257,-0.903z'</body><body package="Roassal2-Shapes">Azerbaijan	^ 'M590.292,114.27l0.643,0l1.931,1.673l1.158,0.129l0.516,-0.644l1.545,-1.030l1.416,1.417l1.417,1.802l1.286,0.129l0.774,0.773l-2.190,0.257l-0.514,2.059l-0.386,0.901l-1.031,0.644l0,1.416l-0.643,0.129l-1.674,-1.417l0.902,-1.415l-0.773,-0.773l-1.030,0.258l-3.089,1.930l-0.129,-1.801l-1.158,-0.516l-1.159,-0.643l0.772,-0.902l-1.416,-0.900l0.516,-0.773l-1.032,-0.386l-0.642,-0.772l0.129,0l0.644,-0.387l1.930,0.772l1.545,0.130l0.258,-0.258l-1.287,-1.545l-0.771,0.257zM589.521,122.637l-1.804,-0.386l-1.415,-1.288l-0.387,-1.028l0.516,0l0.771,0.772l1.287,-0.129l0,0.515l-1.032,-1.544z'</body><body package="Roassal2-Shapes">Bangladesh	^ 'M714.901,167.564l-0.129,1.932l-0.900,-0.387l0.127,2.189l-0.771,-1.417l-0.129,-1.415l-0.514,-1.287l-1.031,-1.545l-2.575,-0.129l0.258,1.159l-0.771,1.544l-1.158,-0.644l-0.389,0.516l-0.772,-0.258l-1.029,-0.258l-0.515,-2.188l-0.901,-2.059l0.514,-1.674l-1.672,-0.643l0.514,-1.031l1.802,-1.030l-2.060,-1.415l1.031,-1.803l2.061,1.159l1.285,0.128l0.260,1.931l2.574,0.386l2.574,-0.128l1.545,0.515l-1.289,2.317l-1.158,0.129l-0.901,1.545l1.545,1.416l0.387,-1.802l0.771,0l-1.416,-4.247z'</body><body package="Roassal2-Shapes">Belarus	^ 'M528.503,81.701l2.574,0l2.961,-0.901l0.643,-1.545l2.189,-0.901l-0.258,-1.159l1.674,-0.514l2.831,-1.031l2.833,0.644l0.387,0.772l1.416,-0.385l2.703,0.643l0.258,1.287l-0.645,0.644l1.672,1.802l1.160,0.515l-0.129,0.515l1.803,0.387l0.772,0.772l-1.030,0.643l-2.187,-0.128l-0.516,0.257l0.644,0.901l0.643,1.674l-2.318,0.129l-0.900,0.643l-0.128,1.416l-1.031,-0.258l-2.446,0.129l-0.772,-0.643l-1.030,0.386l-0.900,-0.386l-2.189,0l-2.959,-0.644l-2.706,-0.258l-2.187,0.129l-1.417,0.644l-1.286,0.129l-0.129,-1.159l-0.772,-1.287l1.672,-0.516l0,-1.029l-0.771,-1.029l0.129,1.288z'</body><body package="Roassal2-Shapes">Belgium	^ 'M474.179,88.652l1.932,0.258l2.574,-0.643l1.673,1.158l1.416,0.644l-0.258,1.930l-0.644,0l-0.385,1.544l-2.318,-1.286l-1.416,0.257l-1.801,-1.287l-1.288,-1.029l-1.287,0l-0.385,-1.031l-2.187,0.515z'</body><body package="Roassal2-Shapes">Belize	^ 'M225.09,179.022l0,-0.387l0.257,-0.129l0.515,0.258l1.030,-1.544l0.515,-0.130l0,0.387l0.515,0.128l-0.129,0.645l-0.386,1.159l0.258,0.513l-0.258,0.902l0.128,0.258l-0.256,1.416l-0.644,0.643l-0.387,0.129l-0.643,0.901l-0.772,0l0.257,-3.089l0,2.060z'</body><body package="Roassal2-Shapes">Benin	^ 'M472.505,210.174l-2.188,0.258l-0.773,-1.803l0.131,-6.307l-0.516,-0.515l-0.129,-1.287l-0.900,-0.902l-0.775,-0.900l0.259,-1.417l1.030,-0.256l0.515,-1.159l1.287,-0.257l0.645,-0.774l0.901,-0.773l0.901,-0.127l2.059,1.674l-0.129,0.771l0.643,1.673l-0.514,1.031l0.258,0.773l-1.288,1.672l-0.901,0.773l-0.386,1.674l0,1.802l0.130,-4.376z'</body><body package="Roassal2-Shapes">Bhutan	^ 'M712.198,152.117l1.158,0.901l-0.257,1.674l-2.188,0l-2.189,-0.129l-1.672,0.386l-2.447,-1.029l-0.129,-0.516l1.804,-1.931l1.414,-0.773l1.930,0.645l1.416,0.128l-1.160,-0.644z'</body><body package="Roassal2-Shapes">Bolivia	^ 'M295.89,286.383l-3.089,-0.127l-1.030,2.187l-1.544,-2.060l-3.477,-0.644l-2.316,2.447l-1.932,0.386l-1.028,-3.733l-1.417,-2.960l0.773,-2.576l-1.417,-1.157l-0.387,-1.933l-1.286,-1.932l1.673,-2.830l-1.158,-2.318l0.643,-0.901l-0.515,-1.029l1.159,-1.287l0,-2.317l0.128,-1.931l0.644,-0.901l-2.445,-4.248l2.060,0.127l1.415,0l0.515,-0.771l2.446,-1.160l1.416,-1.029l3.476,-0.386l-0.258,1.930l0.387,1.159l-0.258,1.802l2.960,2.317l2.962,0.515l1.030,1.030l1.801,0.515l1.159,0.772l1.673,0l1.545,0.773l0.128,1.544l0.516,0.773l0.128,1.158l-0.772,0l1.031,3.219l5.148,0.131l-0.386,1.542l0.258,1.030l1.416,0.771l0.643,1.676l-0.386,2.061l-0.772,1.158l0.257,1.544l-0.901,0.643l0,-0.902l-2.575,-1.285l-2.446,-0.130l-4.634,0.772l-1.416,2.447l0,1.414l-1.030,3.219l0.515,0.515z'</body><body package="Roassal2-Shapes">BosniaandHerzegovina	^ 'M516.403,106.159l1.030,0l-0.645,1.159l1.289,1.030l-0.389,1.287l-1.158,0.387l-0.900,0.515l-0.387,1.545l-2.445,-1.030l-1.031,-1.159l-0.901,-0.514l-1.286,-1.031l-0.643,-0.901l-1.290,-1.158l0.516,-1.159l1.031,0.643l0.643,-0.643l1.159,0l2.316,0.386l1.931,0l-1.160,-0.643z'</body><body package="Roassal2-Shapes">Botswana	^ 'M534.296,276.857l0.516,0.516l0.900,1.544l3.089,2.962l1.158,0.256l0,1.030l0.772,1.674l2.061,0.385l1.673,1.290l-3.734,1.929l-2.445,2.059l-0.901,1.804l-0.773,1.030l-1.545,0.128l-0.386,1.287l-0.258,0.901l-1.801,0.645l-2.188,-0.129l-1.288,-0.773l-1.159,-0.387l-1.287,0.644l-0.642,1.286l-1.287,0.775l-1.290,1.287l-1.929,0.256l-0.645,-0.901l0.258,-1.673l-1.544,-2.575l-0.772,-0.386l0,-7.852l2.574,-0.130l0.129,-9.654l2.060,0l4.119,-1.030l1.029,1.158l1.674,-1.028l0.901,0l1.416,-0.645l0.515,0.259l-1.030,-2.058z'</body><body package="Roassal2-Shapes">Brazil	^ 'M310.05,308.396l3.605,-3.732l2.961,-2.576l1.801,-1.158l2.319,-1.416l0,-2.189l-1.288,-1.544l-1.416,0.516l0.515,-1.546l0.386,-1.545l0,-1.544l-0.901,-0.516l-1.031,0.516l-1.028,-0.129l-0.259,-1.031l-0.256,-2.443l-0.516,-0.903l-1.801,-0.642l-1.160,0.513l-2.831,-0.513l0.128,-3.736l-0.772,-1.415l0.901,-0.643l-0.257,-1.544l0.772,-1.158l0.386,-2.061l-0.643,-1.676l-1.416,-0.771l-0.258,-1.030l0.386,-1.542l-5.148,-0.131l-1.031,-3.219l0.772,0l-0.128,-1.158l-0.516,-0.773l-0.128,-1.544l-1.545,-0.773l-1.673,0l-1.159,-0.772l-1.801,-0.515l-1.030,-1.030l-2.962,-0.515l-2.960,-2.317l0.258,-1.802l-0.387,-1.159l0.258,-1.930l-3.476,0.386l-1.416,1.029l-2.446,1.160l-0.515,0.771l-1.415,0l-2.060,-0.127l-1.416,0.384l-1.287,-0.257l0.256,-4.119l-2.317,1.545l-2.317,0l-1.030,-1.416l-1.801,-0.129l0.644,-1.158l-1.546,-1.674l-1.158,-2.445l0.772,-0.516l0,-1.158l1.545,-0.773l-0.257,-1.416l0.772,-0.901l0.129,-1.288l3.089,-1.802l2.188,-0.515l0.386,-0.514l2.446,0.129l1.159,-7.338l0.129,-1.159l-0.515,-1.544l-1.159,-1.030l0,-1.931l1.545,-0.387l0.515,0.258l0.129,-1.029l-1.545,-0.258l-0.129,-1.674l5.278,0l0.900,-0.902l0.773,0.902l0.515,1.545l0.516,-0.387l1.544,1.417l2.060,-0.129l0.515,-0.772l1.930,-0.644l1.159,-0.515l0.257,-1.159l1.931,-0.772l-0.128,-0.514l-2.188,-0.259l-0.387,-1.672l0,-1.804l-1.158,-0.643l0.514,-0.257l2.060,0.257l2.059,0.773l0.774,-0.643l1.930,-0.515l3.090,-0.902l0.900,-1.030l-0.257,-0.772l1.287,-0.129l0.644,0.643l-0.257,1.159l0.900,0.386l0.644,1.288l-0.772,0.902l-0.515,2.316l0.773,1.287l0.128,1.287l1.674,1.288l1.287,0.128l0.386,-0.515l0.772,-0.128l1.288,-0.515l0.901,-0.644l1.416,0.259l0.643,-0.130l1.546,0.130l0.257,-0.517l-0.516,-0.514l0.259,-0.773l1.158,0.259l1.159,-0.259l1.545,0.515l1.287,0.516l0.772,-0.644l0.643,0.128l0.387,0.772l1.287,-0.256l1.030,-1.031l0.772,-1.930l1.545,-2.446l1.029,-0.128l0.645,1.415l1.544,4.763l1.416,0.386l0,1.931l-1.931,2.189l0.773,0.772l4.763,0.387l0.128,2.702l2.059,-1.674l3.348,0.902l4.505,1.674l1.288,1.545l-0.387,1.545l3.090,-0.901l5.278,1.415l3.991,0l3.990,2.189l3.476,2.961l2.059,0.772l2.318,0.128l0.900,0.902l0.901,3.475l0.516,1.545l-1.159,4.505l-1.287,1.675l-3.862,3.863l-1.674,2.959l-2.059,2.317l-0.643,0.129l-0.773,1.931l0.257,5.020l-0.773,4.250l-0.256,1.672l-0.902,1.158l-0.515,3.605l-2.703,3.475l-0.387,2.833l-2.187,1.158l-0.644,1.546l-2.960,0l-4.249,1.028l-1.931,1.288l-2.960,0.773l-3.219,2.060l-2.188,2.703l-0.386,2.060l0.386,1.416l-0.515,2.703l-0.644,1.416l-1.803,1.416l-2.960,4.764l-2.446,2.189l-1.802,1.157l-1.287,2.574l-1.673,1.545l-0.772,-1.545l1.158,-1.286l-1.545,-1.804l-2.189,-1.414l-2.702,-1.805l-1.030,0.130l-2.704,-2.059l1.674,-0.257z'</body><body package="Roassal2-Shapes">BruneiDarussalam	^ 'M772.829,214.809l1.160,-1.030l2.315,-1.416l-0.127,1.287l-0.260,1.674l-1.285,0l-0.516,0.902l1.287,1.417z'</body><body package="Roassal2-Shapes">Bulgaria	^ 'M526.314,107.833l0.773,1.030l1.031,-0.129l2.059,0.386l3.990,0.130l1.287,-0.644l3.219,-0.644l1.930,1.030l1.544,0.258l-1.416,1.158l-0.900,1.931l0.772,1.416l-2.317,-0.257l-2.705,0.772l0,1.417l-2.445,0.256l-1.930,-1.029l-2.187,0.773l-1.932,-0.130l-0.258,-1.674l-1.287,-0.900l0.385,-0.387l-0.256,-0.386l0.515,-0.772l1.030,-0.901l-1.415,-1.158l-0.259,-0.902l-0.772,0.644z'</body><body package="Roassal2-Shapes">BurkinaFaso	^ 'M457.573,201.035l-1.802,-0.773l-1.287,0.129l-0.902,0.644l-1.286,-0.515l-0.387,-0.902l-1.287,-0.643l-0.128,-1.545l0.771,-1.159l-0.128,-0.900l2.189,-2.189l0.385,-1.802l0.773,-0.644l1.287,0.257l1.159,-0.514l0.257,-0.645l2.189,-1.285l0.514,-0.774l2.446,-1.158l1.545,-0.387l0.644,0.516l1.673,0l-0.129,1.287l0.258,1.287l1.545,1.673l0.128,1.417l3.091,0.515l0,1.930l-0.645,0.774l-1.287,0.257l-0.515,1.159l-1.030,0.256l-2.317,0l-1.288,-0.256l-0.770,0.514l-1.289,-0.258l-4.634,0.129l-0.129,1.545l-0.386,-2.060z'</body><body package="Roassal2-Shapes">Burundi	^ 'M544.208,239.14l-0.130,-3.347l-0.643,-1.159l1.673,0.258l0.773,-1.545l1.415,0.128l0.131,1.030l0.642,0.643l0,0.903l-0.642,0.513l-1.030,1.416l-1.031,1.032l1.158,-0.128z'</body><body package="Roassal2-Shapes">Cambodia	^ 'M743.995,198.331l-1.031,-1.415l-1.416,-2.834l-0.643,-3.217l1.801,-2.189l3.475,-0.514l2.447,0.387l2.316,1.029l1.160,-1.803l2.446,0.901l0.644,1.803l-0.386,3.218l-4.506,2.059l1.160,1.674l-2.834,0.258l-2.316,1.030l2.317,0.387z'</body><body package="Roassal2-Shapes">Cameroon	^ 'M500.439,220.859l-0.256,-0.129l-1.674,0.387l-1.673,-0.387l-1.288,0.129l-4.378,0l0.387,-2.188l-1.029,-1.802l-1.158,-0.387l-0.516,-1.287l-0.772,-0.386l0,-0.643l0.772,-1.932l1.289,-2.575l0.771,-0.128l1.544,-1.545l1.029,0l1.546,1.030l1.803,-0.901l0.257,-1.029l0.644,-1.159l0.387,-1.288l1.414,-1.159l0.645,-1.931l0.513,-0.514l0.387,-1.417l0.773,-1.673l2.188,-2.189l0.129,-0.901l0.387,-0.386l-1.160,-1.158l0.128,-0.773l0.774,-0.257l1.029,1.801l0.258,1.804l-0.128,1.802l1.415,2.446l-1.415,-0.129l-0.774,0.257l-1.287,-0.257l-0.514,1.287l1.545,1.546l1.158,0.385l0.387,1.160l0.900,1.930l-0.515,0.644l-1.287,2.702l-0.643,0.515l-0.258,2.060l0.258,1.160l-0.258,0.772l1.288,1.416l0.257,1.029l1.031,1.416l1.157,0.773l0.129,1.287l0.387,0.772l-0.259,1.416l-2.187,-0.643l-2.062,-0.644l3.475,0.129z'</body><body package="Roassal2-Shapes">Canada	^ 'M212.989,24.93l-1.416,1.159l-3.862,-0.257l-3.347,-0.644l1.417,-1.288l3.990,-0.772l2.317,1.030l-0.901,-0.772zM212.474,18.107l-1.287,0.130l-5.020,-0.130l-0.772,-0.772l5.535,0l1.802,0.515l0.258,-0.257zM204.622,14.761l3.218,0.901l-0.772,1.030l-3.991,0.515l-2.188,-0.644l-1.159,-0.901l-0.257,-1.159l3.604,0.129l-1.545,-0.129zM227.793,26.604l-4.377,-0.387l-7.208,-0.900l-0.901,-1.417l-0.258,-1.287l-2.703,-1.287l-5.664,-0.257l-3.090,-0.901l1.030,-1.031l5.535,0.130l2.962,0.901l5.406,0l2.317,0.901l-0.643,1.029l3.089,0.515l1.673,0.643l3.605,0.130l3.990,0.257l4.248,-0.643l5.535,-0.129l4.377,0.129l2.832,1.029l0.644,1.159l-1.674,0.644l-3.991,0.644l-3.475,-0.387l-7.724,0.387l5.535,-0.128zM165.489,16.434l3.862,0.386l-0.902,0.901l-5.020,0.772l-3.991,-0.900l2.188,-0.901l-3.863,0.258zM166.261,14.632l3.604,0.644l-3.347,0.515l-4.505,0l0.128,-0.387l2.704,-0.901l-1.416,-0.129zM205.137,40.636l2.703,1.158l-1.673,0.902l-3.605,-1.031l-2.188,0.516l-3.090,-0.387l1.803,-1.673l1.931,-1.159l2.059,0.643l-2.060,-1.031zM315.458,88.781l-1.417,1.673l-1.802,2.317l1.802,-0.900l1.802,0.643l-1.030,0.902l2.447,0.772l1.287,-0.772l2.574,0.901l-0.772,1.930l1.931,-0.386l0.257,1.417l0.901,1.673l-1.158,2.317l-1.288,0.129l-1.673,-0.515l0.515,-2.189l-0.772,-0.386l-3.089,2.317l-1.545,0l1.801,-1.287l-2.574,-0.644l-2.832,0.130l-5.278,-0.130l-0.386,-0.772l1.674,-0.901l-1.159,-0.773l2.317,-1.673l2.702,-4.248l1.675,-1.545l2.317,-0.901l1.288,0.129l0.515,-0.772zM239.25,51.578l2.960,0.901l3.090,0.901l0.258,1.287l1.930,-0.257l1.931,0.900l-2.316,0.903l-4.249,-0.774l-1.544,-1.158l-2.575,1.416l-3.861,1.416l-0.902,-1.544l-3.733,0.257l2.317,-1.416l0.386,-2.060l0.901,-2.445l1.931,0.257l0.515,1.158l1.417,-0.514l-1.544,-0.772zM218.525,6.393l7.080,-0.643l5.278,-0.386l5.921,-0.130l3.604,-1.415l11.199,-0.773l9.656,0.129l7.723,-0.386l18.924,0.514l10.555,1.802l-6.565,1.159l-6.437,0.515l-2.445,0.644l5.792,0l-10.684,2.317l-10.169,2.704l-9.913,0.900l3.734,0.258l-1.931,0.515l2.317,1.287l-6.694,1.674l-1.287,1.159l-3.863,0.772l0.387,0.643l3.604,0.258l0,0.644l-6.049,1.158l-7.081,-0.643l-7.981,0.386l-9.012,-0.515l-0.385,-1.288l5.020,-0.643l-1.158,-0.902l2.187,-0.900l6.437,0.900l-7.981,-2.316l2.188,-1.030l4.763,-0.644l0.773,-0.901l-3.862,-1.030l-1.159,-1.416l7.338,0.129l6.437,-0.644l-15.577,-0.128l-4.762,-1.031l-5.407,-1.802l0.515,0.901zM253.024,32.01l2.574,-1.030l5.922,1.417l3.734,1.287l0.385,1.158l5.020,-0.643l2.833,1.674l6.437,1.158l2.317,1.030l2.574,2.575l-4.891,1.158l6.307,1.803l4.248,0.643l3.862,2.446l4.248,0.128l-0.773,1.932l-4.763,3.089l-3.347,-1.158l-4.248,-2.575l-3.476,0.386l-0.257,1.545l2.832,1.545l3.605,1.287l1.159,0.644l1.673,2.704l-0.902,1.930l-3.347,-0.772l-6.821,-2.061l3.862,2.318l2.702,1.545l0.516,1.030l-7.339,-1.159l-5.793,-1.545l-3.218,-1.286l0.903,-0.774l-3.991,-1.415l-3.992,-1.287l0.129,0.772l-7.853,0.386l-2.188,-0.901l1.675,-1.931l5.149,-0.129l5.535,-0.257l-0.901,-1.031l0.901,-1.287l3.475,-2.702l-0.772,-1.159l-1.030,-0.901l-4.120,-1.288l-5.406,-0.901l1.674,-0.772l-2.832,-1.674l-2.317,-0.129l-2.189,-0.900l-1.416,0.772l-4.891,0.385l-9.784,-0.643l-5.664,-0.772l-4.377,-0.386l-2.317,-0.901l2.832,-1.287l-3.862,0l-0.772,-2.704l2.059,-2.446l2.704,-1.030l6.951,-0.772l-1.931,1.802l2.188,1.674l2.447,-2.189l6.823,-1.159l4.633,2.832l-0.386,1.675l-5.278,0.774zM210.672,27.248l5.536,0.128l5.148,0.645l-3.989,2.445l-3.219,0.514l-2.833,1.932l-3.088,-0.128l-1.675,-2.318l0,-1.287l1.417,-1.158l-2.703,0.773zM206.552,9.869l1.931,-0.901l2.704,-0.128l-1.159,-0.644l6.308,-0.129l3.348,1.416l8.753,1.673l5.664,2.060l-3.733,0.772l-5.021,2.060l-4.763,0.258l-5.535,-0.386l-2.961,-1.031l0.129,-1.030l2.059,-0.772l-4.891,0.129l-2.961,-0.902l-1.673,-1.287l-1.801,1.158zM194.71,31.109l-2.832,-2.574l2.961,-0.514l3.218,0.643l4.119,-0.258l0.515,1.030l-1.544,0.901l3.604,1.803l-0.644,1.416l-3.862,1.415l-2.574,-0.257l-1.803,-1.030l-5.535,-1.544l-1.673,-1.160l-6.050,-0.129zM178.233,30.08l3.089,1.158l1.674,2.574l0.772,1.932l4.634,1.287l4.764,1.287l-0.258,1.159l-4.377,0.257l1.673,1.030l-0.900,1.030l-6.436,0l-1.804,-0.644l-4.376,-0.386l-5.278,1.545l-6.565,0.644l-3.604,0.128l-2.704,-2.059l-6.050,-0.386l-4.505,-1.674l2.960,-0.772l4.119,-0.386l3.863,0.129l3.475,-0.516l-5.149,-0.644l-5.793,0.258l-3.862,-0.129l-1.416,-0.901l6.308,-1.159l-4.249,0.129l-4.634,-0.772l2.189,-2.059l1.932,-1.031l7.208,-1.673l2.703,0.515l-1.287,1.287l5.922,-0.772l3.861,1.287l2.961,-1.287l2.446,0.901l2.189,2.574l1.416,-1.157l-1.932,-2.704l2.446,-0.387l-2.575,-0.387zM174.757,22.613l2.446,-0.385l2.832,0.128l0.385,1.287l-1.543,1.287l-9.141,0.387l-6.822,1.159l-4.120,0.128l-0.257,-0.901l5.535,-1.159l-12.228,0.257l-3.734,-0.514l3.734,-2.575l2.445,-0.772l7.596,0.901l4.891,1.673l4.634,0.129l-3.862,-2.574l2.446,-1.030l1.803,0.643l0.900,1.287l-2.060,-0.644zM134.336,21.969l4.506,-2.059l5.535,-1.803l4.120,0.130l3.732,-0.387l-0.385,2.060l-2.060,0.901l-2.575,0.129l-5.020,1.158l-4.248,0.386l3.605,0.515zM137.812,26.476l3.862,0.514l6.823,0.129l2.703,0.772l2.832,1.158l-3.347,0.644l-6.694,1.674l-3.991,2.060l-0.643,1.287l-5.664,1.287l-1.802,-1.030l-5.922,-1.544l0.129,-0.902l2.188,-2.317l2.060,-1.159l-1.673,-2.188l-9.139,0.385zM107.69,81.443l2.574,-0.256l-0.773,3.088l2.318,2.188l-1.030,0l-1.674,-1.287l-0.900,-1.287l-1.416,-0.772l-0.516,-1.158l0.130,-0.902l-1.287,-0.386zM199.73,20.682l1.288,0.901l0,1.417l-1.416,1.801l-3.218,0.387l-2.961,-0.387l0.129,-1.545l-4.507,0.130l-0.128,-2.060l2.961,0.129l3.990,-0.901l-3.862,-0.128zM181.064,13.344l5.279,0.387l7.337,0.901l2.060,1.288l1.030,1.158l-4.377,-0.258l-4.506,-0.900l-5.922,-0.129l2.576,-0.773l-3.348,-0.644l0.129,1.030zM127.385,92.386l1.288,1.287l2.702,1.158l1.160,1.416l-1.417,0.387l-4.376,-1.159l-0.773,-1.029l-2.446,-0.903l-0.515,-0.772l-2.703,-0.514l-1.030,-1.416l0.129,-0.643l2.832,0.643l1.673,0.386l2.575,0.257l-0.901,-0.902zM315.071,83.502l0.129,2.961l-1.931,1.031l-1.932,0.901l-4.376,1.030l-3.476,2.188l-4.505,0.386l-5.793,-0.515l-3.990,0l-2.832,0.129l-2.318,1.930l-3.346,1.288l-3.863,3.476l-3.089,2.575l2.189,-0.515l4.376,-3.476l5.664,-2.317l3.991,-0.257l2.445,1.286l-2.573,1.932l0.772,2.832l0.901,2.060l3.476,1.287l4.504,-0.387l2.704,-2.960l0.258,1.931l1.673,1.029l-3.347,1.674l-5.921,1.674l-2.703,1.029l-2.961,1.931l-2.060,-0.128l-0.128,-2.317l4.633,-2.189l-4.247,0l-2.961,0.387l-1.803,-1.545l0,-3.605l-1.157,-0.772l-1.804,0.386l-0.900,-0.644l-2.060,1.932l-0.901,2.187l-0.902,1.159l-1.158,0.515l-0.901,0l-0.258,0.772l-4.891,0l-4.120,0l-1.287,0.516l-2.703,1.801l-0.387,0.258l-0.256,0.258l-0.387,0.386l-0.257,0.515l-0.643,0l-0.516,0l-0.901,0l-0.772,-0.128l-0.902,0l-0.643,0l-0.772,0.128l-0.258,0l-0.515,0.257l-0.386,0.129l0.257,0.386l0,0.129l0.387,0.772l0,0.258l0,0.128l-0.258,0.130l-0.386,0.128l-0.772,0.258l-0.902,0.257l-0.643,0.257l-0.643,0.258l-0.644,0.129l-0.128,0l-0.387,0l-0.900,0.128l-0.645,0.129l-0.644,0.258l-0.643,0.385l-0.644,0.258l-0.644,0.257l-0.643,0.258l-0.644,0l-0.514,-0.129l-0.387,-0.257l-0.257,-0.257l0,-0.130l0,-0.257l0.644,-0.900l1.286,-1.546l0,-0.128l0,-0.129l0.259,-0.515l0.385,-0.515l0.129,-0.258l-0.258,-0.772l-0.129,-0.515l0,-0.386l-0.127,-0.515l-0.130,-0.515l-0.129,-0.515l-0.128,-0.386l-0.130,-0.515l0,-0.257l-0.128,-0.387l-0.515,-0.386l-0.514,-0.128l-0.644,-0.258l-0.643,-0.257l-0.516,-0.257l0.386,-0.515l0,-0.129l-0.128,0l-0.258,-0.258l-0.128,0l-0.258,0.128l-0.386,-0.128l-0.258,-0.129l-0.128,0l-0.129,-0.257l-0.129,0l0,-0.258l0,-0.128l0,-0.129l0,-0.129l-0.257,0l-0.258,0.258l-0.772,0l0.128,-0.258l-0.257,0l-0.386,-0.257l-0.128,-0.387l-0.130,-0.386l-0.514,-0.257l-0.515,-0.129l-0.515,-0.258l-0.515,-0.257l-0.515,-0.128l-0.515,-0.258l-0.515,-0.258l-0.514,-0.128l-0.258,-0.128l-0.387,-0.130l-0.643,-0.257l-0.772,-0.386l-0.772,-0.258l-0.773,-0.257l-0.386,-0.257l-0.258,0l-0.386,-0.258l-0.644,-0.129l-0.643,0.129l-0.772,0.258l-0.387,0.128l-0.386,0.129l-0.258,0.129l-0.515,0l-0.385,0l-3.219,-0.773l-2.188,0.387l-2.703,-0.773l-2.704,-0.515l-1.930,-0.129l-0.772,-0.514l-0.516,-1.417l-0.901,0l0,1.030l-5.536,0l-9.139,0l-9.397,0l-32.182,0l-2.704,0l-15.962,0l-5.149,-2.574l-1.931,-1.287l-4.891,-1.030l-1.545,-2.446l0.385,-1.673l-3.474,-1.031l-0.387,-2.188l-3.348,-2.061l0,-1.287l1.417,-1.287l0,-1.802l-4.634,-1.673l-2.703,-3.090l-1.674,-1.930l-2.446,-1.159l-1.802,-1.159l-1.545,-1.417l-2.703,0.902l-2.575,1.545l-2.445,-1.803l-1.802,-1.157l-2.704,-0.774l-2.574,0l0,-15.446l0,-9.913l5.019,0.644l4.249,1.286l2.832,0.258l2.317,-1.158l3.347,-0.901l3.990,0.385l3.992,-1.157l4.376,-0.644l1.931,1.029l1.931,-0.644l0.643,-1.158l1.803,0.257l4.634,2.447l3.604,-1.931l0.387,2.059l3.218,-0.387l1.029,-0.772l3.219,0.129l4.120,1.159l6.307,0.901l3.733,0.515l2.704,-0.129l3.604,1.288l-3.734,1.415l4.763,0.515l7.338,-0.257l2.317,-0.515l2.832,1.544l2.960,-1.287l-2.832,-1.158l1.803,-0.901l3.218,-0.129l2.189,-0.258l2.188,0.644l2.703,1.417l2.961,-0.258l4.763,1.287l4.248,-0.386l3.862,0l-0.258,-1.673l2.446,-0.515l4.120,0.900l0,2.576l1.673,-2.060l2.188,0l1.288,-2.704l-2.962,-1.673l-3.088,-1.030l0.128,-2.961l3.218,-2.060l3.605,0.515l2.703,1.158l3.604,3.091l-2.317,1.287l5.020,0.514l0,2.832l3.605,-2.189l3.218,1.804l-0.900,1.930l2.702,1.802l2.704,-1.931l2.060,-2.317l0.129,-2.960l3.861,0.257l3.862,0.387l3.733,1.287l0.128,1.416l-2.059,1.416l1.931,1.416l-0.386,1.286l-5.277,1.932l-3.734,0.386l-2.704,-0.772l-0.901,1.287l-2.574,2.317l-0.773,1.159l-3.089,1.802l-3.862,0.257l-2.188,1.031l-0.130,1.802l-3.089,0.386l-3.347,2.188l-2.961,2.961l-1.028,2.188l-0.130,3.090l3.991,0.386l1.159,2.576l1.287,2.059l3.733,-0.515l5.020,1.159l2.704,1.029l1.930,1.288l3.347,0.643l2.832,1.158l4.507,0.129l2.959,0.258l-0.514,2.446l0.901,2.702l1.931,2.961l3.991,2.576l2.059,-0.902l1.545,-2.703l-1.416,-4.247l-1.931,-1.545l4.247,-1.159l3.090,-1.931l1.545,-1.931l-0.257,-1.803l-1.802,-2.188l-3.348,-2.060l3.219,-2.832l-1.158,-2.445l-0.902,-4.249l1.931,-0.514l4.506,0.643l2.832,0.257l2.188,-0.644l2.575,0.902l3.347,1.545l0.772,1.029l4.763,0.259l0,2.187l0.901,3.476l2.446,0.386l1.931,1.545l3.862,-1.416l2.574,-2.961l1.802,-1.287l2.060,2.446l3.605,3.347l2.960,3.218l-1.159,1.802l3.604,1.417l2.446,1.545l4.249,0.772l1.802,0.772l1.030,2.317l2.060,0.387l-1.158,-1.028z'</body><body package="Roassal2-Shapes">CentralAfricanRepublic	^ 'M506.361,206.957l2.318,-0.129l0.384,-0.773l0.517,0.129l0.642,0.515l3.349,-1.029l1.157,-1.031l1.416,-0.901l-0.256,-0.900l0.772,-0.259l2.574,0.130l2.574,-1.287l1.932,-2.962l1.417,-1.030l1.672,-0.514l0.258,1.157l1.545,1.674l0,1.159l-0.387,1.159l0.129,0.773l1.029,0.771l2.059,1.159l1.419,1.159l0,0.901l1.800,1.287l1.159,1.287l0.643,1.544l2.059,1.031l0.389,0.901l-0.903,0.257l-1.674,0l-2.058,-0.257l-0.901,0.129l-0.514,0.643l-0.775,0.129l-1.158,-0.514l-2.961,1.287l-1.287,-0.258l-0.258,0.258l-0.900,1.544l-1.930,-0.514l-2.060,-0.258l-1.674,-1.030l-2.190,-0.900l-1.415,0.900l-1.030,1.417l-0.258,1.802l-1.800,-0.130l-1.803,-0.514l-1.545,1.544l-1.415,2.446l-0.387,-0.772l-0.129,-1.287l-1.157,-0.773l-1.031,-1.416l-0.257,-1.029l-1.288,-1.416l0.258,-0.772l-0.258,-1.160l0.258,-2.060l0.643,-0.515l-1.287,2.702z'</body><body package="Roassal2-Shapes">Chad	^ 'M504.302,192.281l0.258,-1.158l-1.674,-0.130l0,-1.673l-1.158,-1.029l1.158,-3.605l3.475,-2.446l0.130,-3.605l1.030,-5.406l0.514,-1.159l-1.030,-0.901l-0.129,-0.901l-1.029,-0.643l-0.643,-4.249l2.702,-1.416l10.815,5.149l11.069,5.407l-0.258,10.427l-2.316,-0.257l-1.158,2.060l-0.774,1.673l0.643,0.643l-0.901,0.772l0.258,1.159l-0.643,1.030l-0.259,1.031l0.902,-0.129l0.517,1.030l0.126,1.544l0.902,0.772l0,0.645l-1.672,0.514l-1.417,1.030l-1.932,2.962l-2.574,1.287l-2.574,-0.130l-0.772,0.259l0.256,0.900l-1.416,0.901l-1.157,1.031l-3.349,1.029l-0.642,-0.515l-0.517,-0.129l-0.384,0.773l-2.318,0.129l0.515,-0.644l-0.900,-1.930l-0.387,-1.160l-1.158,-0.385l-1.545,-1.546l0.514,-1.287l1.287,0.257l0.774,-0.257l1.415,0.129l-1.415,-2.446l0.128,-1.802l-0.258,-1.804l1.029,1.801z'</body><body package="Roassal2-Shapes">Chile	^ 'M266.669,369.286l-3.347,-1.544l-0.772,-1.675l0.644,-1.544l-1.288,-1.802l-0.386,-4.634l1.158,-2.574l2.832,-2.061l-3.990,-0.772l2.445,-2.446l1.030,-4.505l2.962,1.031l1.416,-5.666l-1.802,-0.642l-0.902,3.345l-1.674,-0.386l0.902,-3.862l0.901,-5.020l1.159,-1.801l-0.773,-2.576l-0.129,-3.090l1.030,-0.128l1.673,-4.249l1.932,-4.376l1.158,-3.991l-0.643,-3.990l0.772,-2.317l-0.387,-3.347l1.674,-3.218l0.386,-5.278l0.901,-5.535l0.902,-6.051l-0.259,-4.378l-0.513,-3.862l1.415,-0.644l0.644,-1.417l1.286,1.932l0.387,1.933l1.417,1.157l-0.773,2.576l1.417,2.960l1.028,3.733l1.932,-0.386l0.386,0.772l-0.902,2.704l-2.960,1.415l0,4.378l-0.515,0.900l0.772,1.031l-1.802,1.673l-1.802,2.574l-1.030,2.446l0.257,2.575l-1.672,2.831l1.287,4.636l0.772,0.514l-0.129,2.447l-1.415,2.702l0,2.189l-2.060,1.802l0,2.446l0.900,2.574l-1.673,1.030l-0.773,2.447l-0.513,2.703l0.385,3.347l-1.030,0.516l0.645,3.089l1.157,1.030l-0.901,1.158l1.287,0.514l0.258,1.030l-1.158,0.515l0.257,1.545l-0.900,3.605l-1.546,2.316l0.386,1.288l-0.901,1.674l-2.060,1.288l0.258,2.831l0.902,0.902l1.801,-0.129l0,2.060l1.160,1.545l6.436,0.385l2.574,0.387l-2.446,0l-1.288,0.643l-2.444,1.029l-0.387,2.447l-1.159,0.129l-3.090,-0.902l3.089,1.931zM283.274,374.822l1.546,0l-0.902,1.157l-2.316,0.774l-1.288,0l-1.544,-0.256l-1.932,-0.774l-2.831,-0.386l-3.476,-1.545l-2.704,-1.416l-3.732,-3.090l2.188,0.645l3.862,1.802l3.476,0.901l1.416,-1.159l0.901,-1.932l2.445,-1.029l1.931,0.258l0.129,0.127l-0.129,5.923l-2.960,0z'</body><body package="Roassal2-Shapes">China	^ 'M760.085,177.992l-2.188,-0.902l0,-2.317l1.288,-1.158l2.961,-0.773l1.544,0l0.645,1.031l-1.289,1.287l-0.514,1.545l2.447,-1.287zM712.198,152.117l-1.160,-0.644l-1.416,-0.128l-1.930,-0.645l-1.414,0.773l-1.804,1.931l-0.258,-2.059l-1.543,0.514l-3.221,-0.257l-2.959,-0.644l-2.189,-1.158l-2.188,-0.515l-0.900,-1.288l-1.545,-0.386l-2.703,-1.802l-2.061,-0.772l-1.158,0.643l-3.732,-1.930l-2.704,-1.674l-0.773,-2.960l1.932,0.385l0.129,-1.416l-1.030,-1.416l0.256,-2.189l-2.961,-3.089l-4.375,-1.159l-0.773,-2.059l-2.059,-1.287l-0.387,-0.773l-0.515,-1.416l0.129,-1.158l-1.674,-0.515l-0.772,0.256l-0.773,-2.573l0.773,-0.516l-0.386,-0.643l2.574,-1.288l1.930,-0.514l2.834,0.257l1.029,-1.673l3.476,-0.258l0.901,-1.158l4.248,-1.416l0.387,-0.644l-0.260,-1.545l1.931,-0.643l-2.445,-4.635l5.279,-1.159l1.415,-0.514l1.931,-4.892l5.408,0.901l1.416,-1.288l0.127,-2.704l2.317,-0.128l2.060,-1.801l1.030,-0.258l0.644,1.802l2.317,1.545l3.863,0.901l1.803,2.188l-1.032,3.219l1.032,1.158l3.216,0.387l3.606,0.385l3.217,1.674l1.673,0.386l1.159,2.446l1.672,1.545l2.962,0l5.536,0.644l3.605,-0.386l2.701,0.386l3.862,1.673l3.347,0l1.160,0.773l3.090,-1.416l4.375,-0.902l4.121,-0.128l3.088,-1.030l1.932,-1.416l1.931,-0.902l-0.515,-0.900l-0.774,-1.030l1.416,-1.674l1.416,0.257l2.832,0.516l2.704,-1.417l4.119,-1.029l1.931,-1.803l1.932,-0.772l3.861,-0.386l2.190,0.258l0.258,-0.902l-2.448,-1.931l-2.189,-0.772l-2.059,0.901l-2.701,-0.386l-1.420,0.386l-0.771,-1.158l1.931,-2.704l1.287,-1.931l3.219,0.900l3.862,-1.672l0,-1.159l2.447,-2.832l1.414,-0.901l0,-1.416l-1.545,-0.644l2.316,-1.417l3.350,-0.513l3.475,0l4.119,0.772l2.316,1.030l1.674,2.703l1.031,1.158l0.901,1.674l1.029,2.574l4.635,0.902l3.218,1.930l1.159,2.447l3.990,0l2.447,-1.030l4.375,-0.774l-1.414,2.448l-1.031,1.029l-0.901,2.832l-1.802,2.704l-3.346,-0.516l-2.318,0.901l0.771,2.317l-0.385,3.219l-1.416,0.129l0,1.288l-1.674,-1.546l-1.029,1.546l-4.248,1.157l0.387,1.417l-2.319,-0.130l-1.287,-0.900l-1.802,1.930l-2.961,1.546l-2.190,1.673l-3.732,0.772l-2.059,1.288l-2.832,0.772l1.416,-1.288l-0.513,-1.028l2.058,-1.803l-1.418,-1.417l-2.314,0.902l-3.090,1.931l-1.674,1.673l-2.576,0.129l-1.414,1.287l1.414,1.802l2.189,0.387l0.129,1.287l2.061,0.773l3.088,-1.931l2.447,1.029l1.672,0.129l0.387,1.416l-3.733,0.772l-1.287,1.416l-2.574,1.288l-1.418,1.931l2.834,1.417l1.158,2.702l1.545,2.446l1.930,2.060l-0.129,2.059l-1.674,0.773l0.644,1.416l1.545,0.773l-0.386,2.187l-0.643,2.189l-1.545,0.258l-1.932,2.832l-2.189,3.604l-2.443,3.219l-3.735,2.446l-3.732,2.317l-3.090,0.258l-1.674,1.157l-0.900,-0.772l-1.545,1.287l-3.733,1.416l-2.832,0.386l-0.900,2.833l-1.547,0.129l-0.642,-1.931l0.642,-1.031l-3.605,-0.900l-1.285,0.387l-2.704,-0.645l-1.289,-1.029l0.387,-1.545l-2.445,-0.515l-1.287,-1.030l-2.317,1.416l-2.576,0.257l-2.187,0l-1.416,0.644l-1.416,0.386l0.386,3.089l-1.418,0l-0.256,-0.643l-0.128,-1.158l-1.930,0.773l-1.160,-0.387l-2.059,-1.030l0.772,-2.317l-1.674,-0.515l-0.645,-2.446l-2.832,0.386l0.387,-3.089l2.445,-2.318l0.131,-2.188l0,-2.060l-1.289,-0.644l-0.900,-1.545l-1.545,0.130l-2.832,-0.386l0.900,-1.159l-1.285,-1.674l-1.934,1.158l-2.314,-0.643l-3.092,1.674l-2.445,2.059l2.188,-0.258z'</body><body package="Roassal2-Shapes">Colombia	^ 'M262.164,227.425l-1.159,-0.644l-1.287,-0.901l-0.772,0.386l-2.318,-0.386l-0.643,-1.157l-0.515,0.127l-2.704,-1.544l-0.386,-0.902l1.031,-0.129l-0.130,-1.416l0.644,-1.029l1.417,-0.129l1.029,-1.674l1.030,-1.416l-0.901,-0.644l0.515,-1.545l-0.644,-2.445l0.515,-0.772l-0.386,-2.318l-1.030,-1.416l0.258,-1.287l0.900,0.257l0.515,-0.901l-0.643,-1.544l0.386,-0.387l1.416,0.129l1.931,-1.931l1.158,-0.258l0,-0.901l0.515,-2.317l1.545,-1.158l1.674,-0.128l0.257,-0.516l2.059,0.257l2.189,-1.415l1.029,-0.644l1.288,-1.288l0.901,0.258l0.773,0.644l-0.516,0.901l-1.802,0.514l-0.644,1.289l-1.029,0.771l-0.772,1.030l-0.387,1.931l-0.772,1.545l1.415,0.129l0.387,1.287l0.644,0.645l0.128,1.028l-0.257,1.030l0,0.516l0.772,0.257l0.644,0.901l3.475,-0.258l1.546,0.387l1.802,2.317l1.158,-0.258l1.931,0.129l1.545,-0.386l0.902,0.515l-0.517,1.416l-0.513,0.901l-0.259,1.931l0.516,1.802l0.773,0.772l0.127,0.644l-1.416,1.287l1.031,0.644l0.772,0.901l0.773,2.703l-0.516,0.387l-0.515,-1.545l-0.773,-0.902l-0.900,0.902l-5.278,0l0.129,1.674l1.545,0.258l-0.129,1.029l-0.515,-0.258l-1.545,0.387l0,1.931l1.159,1.030l0.515,1.544l-0.129,1.159l-1.159,7.338l-1.416,-1.417l-0.772,0l1.802,-2.704l-2.060,-1.287l-1.673,0.259l-1.030,-0.516l-1.416,0.644l-2.060,-0.257l-1.544,-2.832l-1.288,-0.644l-0.772,-1.287l-1.802,-1.288l0.772,-0.258z'</body><body package="Roassal2-Shapes">Congo	^ 'M500.183,239.912l-0.902,-1.031l-0.900,0.515l-1.030,1.159l-2.189,-2.832l2.059,-1.544l-1.029,-1.804l0.901,-0.643l1.802,-0.257l0.256,-1.287l1.416,1.287l2.319,0.129l0.900,-1.288l0.258,-1.802l-0.258,-2.059l-1.286,-1.545l1.157,-3.219l-0.642,-0.515l-2.060,0.258l-0.643,-1.415l0.127,-1.160l3.475,0.129l2.062,0.644l2.187,0.643l0.259,-1.416l1.415,-2.446l1.545,-1.544l1.803,0.514l1.800,0.130l-0.257,1.673l-0.770,1.416l-0.517,1.673l-0.386,2.448l0.257,1.414l-0.514,1.030l0,0.901l-0.385,0.901l-1.805,1.287l-1.156,1.417l-1.160,2.575l0,2.190l-0.645,0.898l-1.543,1.288l-1.544,1.804l-1.032,-0.516l-0.128,-0.772l-1.544,0l-0.901,1.030l0.772,0.258z'</body><body package="Roassal2-Shapes">CostaRica	^ 'M241.695,204.768l-1.415,-0.515l-0.515,-0.644l0.257,-0.386l-0.128,-0.644l-0.644,-0.643l-1.159,-0.514l-0.901,-0.387l-0.128,-0.773l-0.773,-0.515l0.257,0.901l-0.643,0.644l-0.515,-0.772l-0.901,-0.258l-0.386,-0.644l0,-0.772l0.386,-0.901l-0.772,-0.257l0.644,-0.643l0.386,-0.259l1.801,0.644l0.644,-0.257l0.773,0.128l0.515,0.644l0.772,0.128l0.644,-0.514l0.644,1.416l1.029,1.030l1.287,1.157l-1.029,0.260l0,1.157l0.514,0.387l-0.385,0.257l0.128,0.515l-0.257,0.515l0.130,-0.515z'</body><body package="Roassal2-Shapes">Croatia	^ 'M516.017,103.327l0.643,1.031l0.773,0.772l-1.030,1.029l-1.160,-0.643l-1.931,0l-2.316,-0.386l-1.159,0l-0.643,0.643l-1.031,-0.643l-0.516,1.159l1.290,1.158l0.643,0.901l1.286,1.031l0.901,0.514l1.031,1.159l2.445,1.030l-0.258,0.514l-2.572,-1.030l-1.547,-1.029l-2.444,-0.773l-2.318,-1.931l0.514,-0.257l-1.157,-1.159l-0.130,-0.901l-1.674,-0.386l-0.898,1.159l-0.774,-0.901l0.128,-0.902l0.129,-0.128l1.802,0.128l0.516,-0.386l0.901,0.386l1.030,0l0,-0.772l0.901,-0.257l0.255,-1.030l2.190,-0.773l0.902,0.386l1.930,1.159l2.316,0.515l-1.032,0.387zM502.372,101.654l2.315,0.258l1.289,-0.644l2.446,0l0.515,-0.515l0.385,0l0.515,0.901l-2.190,0.773l-0.255,1.030l-0.901,0.257l0,0.772l-1.030,0l-0.901,-0.386l-0.516,0.386l-1.802,-0.128l0.517,-0.258l-0.646,-1.029l-0.259,1.417z'</body><body package="Roassal2-Shapes">Cuba	^ 'M243.626,164.475l2.318,0.257l2.059,0l2.576,0.902l1.028,1.030l2.576,-0.387l0.900,0.644l2.318,1.673l1.673,1.287l0.901,-0.128l1.545,0.644l-0.129,0.772l1.931,0l2.060,1.159l-0.257,0.644l-1.803,0.385l-1.802,0.129l-1.931,-0.257l-3.861,0.257l1.801,-1.544l-1.029,-0.644l-1.802,-0.258l-0.902,-0.772l-0.643,-1.415l-1.546,0l-2.445,-0.645l-0.772,-0.644l-3.604,-0.385l-0.902,-0.515l1.030,-0.644l-2.704,-0.128l-1.930,1.416l-1.030,0l-0.386,0.643l-1.417,0.257l-1.158,-0.257l1.417,-0.772l0.643,-1.030l1.159,-0.515l1.415,-0.515l2.059,-0.257l-0.644,0.387z'</body><body package="Roassal2-Shapes">Cyprus	^ 'M556.694,132.549l0.129,0.259l-2.704,1.028l-1.417,-0.385l-0.514,-1.030l1.159,-0.129l0.258,0.129l0.127,0l0.130,0l0.257,0l0.257,-0.129l0.260,-0.128l0.127,0.128l0.258,0l0.128,0l0.128,0l0.130,0.129l0,0.258l0.129,-0.130l0.257,0.130l0.128,0l0.131,-0.130l0.128,0l0.128,0l0.129,-0.128l0.128,0l-0.129,-0.128z'</body><body package="Roassal2-Shapes">CzechRepublic	^ 'M510.866,96.119l-1.158,-0.516l-1.286,0.129l-2.061,-0.901l-1.030,0.258l-1.417,1.030l-2.058,-0.772l-1.544,-1.159l-1.288,-0.645l-0.386,-1.157l-0.387,-0.773l1.932,-0.643l1.029,-0.644l1.932,-0.515l0.642,-0.516l0.645,0.259l1.287,-0.259l1.287,0.903l1.932,0.256l-0.129,0.645l1.414,0.644l0.517,-0.773l1.802,0.386l0.257,0.772l1.930,0.129l1.289,1.416l-0.774,0l-0.385,0.515l-0.644,0l-0.256,0.643l-0.517,0.129l0,0.257l-0.900,0.258l-1.288,0l0.387,-0.644z'</body><body package="Roassal2-Shapes">DemocraticRepublicCongo	^ 'M548.327,217.513l-0.258,3.217l1.159,0.258l-0.901,1.031l-1.031,0.643l-1.029,1.416l-0.514,1.287l-0.131,2.189l-0.643,1.028l0,2.061l-0.901,0.643l0,1.674l-0.386,0.128l-0.257,1.546l0.643,1.159l0.130,3.347l0.514,2.445l-0.257,1.415l0.514,1.546l1.545,1.546l1.545,3.346l-1.030,-0.258l-3.733,0.386l-0.643,0.387l-0.771,1.673l0.642,1.288l-0.514,3.088l-0.387,2.705l0.772,0.514l1.932,1.031l0.642,-0.516l0.258,2.961l-2.058,0l-1.159,-1.545l-0.903,-1.158l-2.058,-0.387l-0.644,-1.416l-1.674,0.901l-2.187,-0.385l-0.903,-1.158l-1.672,-0.258l-1.289,0l-0.128,-0.772l-0.901,-0.130l-1.287,-0.128l-1.674,0.385l-1.158,0l-0.645,0.131l0.129,-3.091l-0.900,-1.030l-0.129,-1.674l0.385,-1.673l-0.514,-1.031l-0.128,-1.672l-3.219,0l0.258,-0.902l-1.417,0l-0.128,0.388l-1.673,0.128l-0.644,1.545l-0.514,0.772l-1.418,-0.387l-0.900,0.387l-1.801,0.128l-1.031,-1.415l-0.645,-0.773l-0.771,-1.674l-0.643,-1.930l-7.982,-0.131l-0.900,0.389l-0.774,-0.131l-1.157,0.387l-0.387,-0.772l0.773,-0.386l0,-1.159l0.514,-0.642l0.902,-0.516l0.772,0.258l0.901,-1.030l1.544,0l0.128,0.772l1.032,0.516l1.544,-1.804l1.543,-1.288l0.645,-0.898l0,-2.190l1.160,-2.575l1.156,-1.417l1.805,-1.287l0.385,-0.901l0,-0.901l0.514,-1.030l-0.257,-1.414l0.386,-2.448l0.517,-1.673l0.770,-1.416l0.257,-1.673l0.258,-1.802l1.030,-1.417l1.415,-0.900l2.190,0.900l1.674,1.030l2.060,0.258l1.930,0.514l0.900,-1.544l0.258,-0.258l1.287,0.258l2.961,-1.287l1.158,0.514l0.775,-0.129l0.514,-0.643l0.901,-0.129l2.058,0.257l1.674,0l0.903,-0.257l1.672,2.188l1.158,0.387l0.773,-0.515l1.287,0.257l1.416,-0.643l0.644,1.159l-2.446,-1.802z'</body><body package="Roassal2-Shapes">Denmark	^ 'M488.21,78.87l-1.159,-1.417l0,-2.832l0.387,-0.644l0.772,-0.901l2.447,-0.130l0.900,-0.772l2.188,-0.771l-0.128,1.415l-0.772,0.902l0.385,0.772l1.417,0.386l-0.644,1.029l-0.773,-0.257l-2.060,1.932l0.775,1.288l-1.675,0.385l2.060,0.385zM498.509,75.779l0.900,1.416l-1.545,2.188l-2.831,-1.544l-0.386,-1.158l-3.862,0.902z'</body><body package="Roassal2-Shapes">Djibouti	^ 'M581.28,192.797l0.645,0.771l-0.129,1.159l-1.545,0.644l1.158,0.772l-0.900,1.416l-0.645,-0.514l-0.642,0.256l-1.545,-0.128l0,-0.773l-0.257,-0.771l0.901,-1.288l1.030,-1.159l1.158,0.257l-0.771,0.642z'</body><body package="Roassal2-Shapes">DominicanRepublic	^ 'M272.075,173.873l0.259,-0.516l2.187,0l1.545,0.772l0.772,-0.128l0.387,1.030l1.545,-0.129l-0.129,0.901l1.288,0l1.286,1.030l-1.030,1.159l-1.287,-0.644l-1.287,0.129l-0.773,-0.129l-0.514,0.515l-1.030,0.129l-0.387,-0.644l-0.900,0.386l-1.159,1.803l-0.643,-0.387l-0.130,-0.772l0,-0.773l-0.643,-0.772l0.643,-0.515l0.259,-1.029l0.259,1.416z'</body><body package="Roassal2-Shapes">Ecuador	^ 'M248.905,236.179l1.415,-2.060l-0.514,-1.159l-1.031,1.288l-1.672,-1.160l0.515,-0.772l-0.387,-2.445l0.901,-0.516l0.515,-1.673l1.030,-1.674l-0.258,-1.158l1.545,-0.514l1.802,-1.030l2.704,1.544l0.515,-0.127l0.643,1.157l2.318,0.386l0.772,-0.386l1.287,0.901l1.159,0.644l0.386,2.059l-0.772,1.674l-2.961,2.832l-3.219,1.030l-1.673,2.446l-0.514,1.802l-1.545,1.030l-1.159,-1.286l-1.030,-0.388l-1.159,0.257l0,-1.029l0.773,-0.643l0.386,1.030z'</body><body package="Roassal2-Shapes">Egypt	^ 'M559.269,147.483l-0.774,1.158l-0.514,1.931l-0.771,1.417l-0.645,0.514l-0.901,-0.901l-1.159,-1.158l-1.930,-3.862l-0.258,0.258l1.159,2.831l1.545,2.703l2.059,4.119l1.030,1.545l0.903,1.545l2.316,2.961l-0.517,0.386l0.130,1.802l3.089,2.447l0.259,0.514l-10.299,0l-10.556,0l-10.813,0l0,-9.912l0,-9.526l-0.901,-2.189l0.772,-1.673l-0.387,-1.159l0.903,-1.287l3.603,0l2.575,0.644l2.705,0.773l1.287,0.514l2.058,-0.901l1.030,-0.772l2.447,-0.258l1.930,0.386l0.642,1.287l0.647,-0.900l2.186,0.644l2.061,0.128l1.415,-0.644l-1.674,-4.635z'</body><body package="Roassal2-Shapes">ElSalvador	^ 'M228.694,190.865l-0.257,0.645l-1.545,0l-1.030,-0.259l-1.029,-0.515l-1.545,-0.129l-0.772,-0.644l0.128,-0.385l0.901,-0.644l0.515,-0.385l-0.129,-0.258l0.644,-0.129l0.772,0.129l0.515,0.643l0.902,0.386l0,0.386l1.287,-0.386l0.515,0.258l0.386,0.256l0.258,-1.031z'</body><body package="Roassal2-Shapes">EquatorialGuinea	^ 'M490.785,224.206l-0.515,-0.387l0.900,-2.960l4.378,0l0.128,3.219l-3.988,0l0.903,-0.128z'</body><body package="Roassal2-Shapes">Eritrea	^ 'M579.351,193.182l-0.901,-0.901l-1.160,-1.545l-1.158,-0.902l-0.773,-0.900l-2.317,-1.030l-1.801,-0.129l-0.644,-0.514l-1.674,0.643l-1.544,-1.287l-0.900,2.059l-3.091,-0.514l-0.258,-1.160l1.160,-3.861l0.258,-1.802l0.770,-0.901l2.061,-0.386l1.288,-1.546l1.543,3.090l0.773,2.446l1.545,1.288l3.604,2.574l1.545,1.545l1.415,1.544l0.903,0.902l1.285,0.902l-0.771,0.642l1.158,0.257z'</body><body package="Roassal2-Shapes">Estonia	^ 'M530.69,71.273l0.387,-1.544l-1.029,0.257l-1.674,-0.900l-0.256,-1.545l3.344,-0.773l3.477,-0.386l2.833,0.515l2.831,-0.129l0.386,0.515l-1.930,1.544l0.900,2.446l-1.158,0.901l-2.318,0l-2.316,-1.028l-1.158,-0.387l2.319,-0.514z'</body><body package="Roassal2-Shapes">Ethiopia	^ 'M579.351,193.182l-1.030,1.159l-0.901,1.288l0.257,0.771l0,0.773l1.545,0.128l0.642,-0.256l0.645,0.514l-0.645,0.901l1.032,1.545l1.029,1.287l1.029,0.901l8.754,3.218l2.316,0l-7.722,8.110l-3.475,0.129l-2.318,1.932l-1.803,0l-1.029,0.644l-1.030,0.256l-1.931,-1.158l-2.445,1.287l-1.030,1.159l-1.031,-0.387l-0.900,0.258l-1.159,-0.385l-0.772,-0.130l-3.089,-2.574l-2.318,0l-0.129,-0.644l-0.772,-1.288l-1.159,-0.515l-1.158,-2.832l-1.286,-0.644l-0.388,-1.158l-1.416,-1.287l-1.673,-0.129l0.901,-1.545l1.416,-0.127l0.386,-0.774l0,-2.447l0.774,-2.831l1.286,-0.772l0.259,-1.030l1.158,-2.060l1.672,-1.415l1.158,-2.575l0.387,-2.317l3.091,0.514l0.900,-2.059l1.544,1.287l1.674,-0.643l0.644,0.514l1.801,0.129l2.317,1.030l0.773,0.900l1.158,0.902l1.160,1.545l-0.901,-0.901z'</body><body package="Roassal2-Shapes">FalklandIslandsMalvinas	^ 'M302.584,365.296l-0.129,1.159l-1.03,1.416l2.188-1.031l1.158-1.286L302.584,365.296zM307.733,365.037l1.159,0.388l-0.902,1.415l-2.188,0.772l-0.257-0.9l1.288-1.416L307.733,365.037z'</body><body package="Roassal2-Shapes">Fiji	^ 'M946.097,274.154l0.773,-0.514l0.901,0.772l-0.516,1.416l-1.672,0.385l-1.418,-0.256l-0.256,-1.289l1.029,-0.900l-1.159,-0.386zM950.089,271.579l-1.160,0.773l-1.545,0.644l-0.385,-1.287l1.031,-1.030l0.899,-0.130l1.160,-0.256l-0.001,0l0.515,-0.129l-0.387,1.287l-0.128,0.128l-0.001,0z'</body><body package="Roassal2-Shapes">Finland	^ 'M542.276,40.893l-0.384,1.932l4.119,1.801l-2.448,2.060l3.089,2.960l-1.801,2.318l2.445,2.060l-1.157,1.802l3.991,1.802l-1.030,1.416l-2.448,1.545l-5.792,3.347l-4.890,0.257l-4.764,1.030l-4.377,0.515l-1.545,-1.416l-2.574,-0.901l0.514,-2.704l-1.286,-2.445l1.286,-1.545l2.447,-1.673l6.180,-2.961l1.800,-0.515l-0.256,-1.159l-3.734,-1.286l-0.901,-1.031l-0.128,-4.120l-4.250,-1.801l-3.475,-1.417l1.545,-0.643l2.961,1.416l3.606,-0.129l2.832,0.644l2.572,-1.159l1.289,-2.060l4.247,-0.900l3.476,1.157l1.159,-1.803z'</body><body package="Roassal2-Shapes">France	^ 'M481.903,93.673l1.287,0.773l3.861,0.514l-1.416,1.802l-0.257,1.931l-0.772,0.515l-1.288,-0.257l0.130,0.644l-1.932,1.545l0,1.158l1.288,-0.386l0.901,1.159l-0.128,0.772l0.772,1.029l-0.901,0.774l0.642,2.058l1.418,0.386l-0.258,1.160l-2.446,1.544l-5.277,-0.772l-3.992,0.901l-0.257,1.673l-3.090,0.258l-3.089,-1.158l-0.901,0.514l-5.021,-1.158l-1.029,-1.030l1.416,-1.674l0.515,-5.277l-2.832,-2.833l-2.060,-1.415l-3.991,-1.031l-0.386,-1.931l3.604,-0.644l4.506,0.773l-0.901,-3.090l2.575,1.159l6.306,-2.060l0.775,-2.317l2.317,-0.515l0.385,1.031l1.287,0l1.288,1.029l1.801,1.287l1.416,-0.257l2.318,1.286l0.643,0.259l-0.773,0.129zM488.854,112.082l1.674,-1.030l0.514,2.317l-0.899,2.188l-1.289,-0.643l-0.644,-1.803l-0.644,1.029z'</body><body package="Roassal2-Shapes">FrenchGuyana	^ 'M319.834,211.463l0.902,0.256l2.058,0.644l2.833,2.317l0.386,1.159l-1.545,2.446l-0.772,1.930l-1.030,1.031l-1.287,0.256l-0.387,-0.772l-0.643,-0.128l-0.772,0.644l-1.287,-0.516l0.772,-1.158l0.257,-1.159l0.386,-1.157l-1.029,-1.674l-0.259,-1.803l-1.417,2.316z'</body><body package="Roassal2-Shapes">GM	^ 'M419.855,191.51l0.387,-1.160l2.961,-0.129l0.515,-0.643l0.901,0l1.030,0.643l0.901,0l0.900,-0.387l0.516,0.773l-1.159,0.644l-1.158,-0.128l-1.159,-0.516l-1.030,0.644l-0.514,0l-0.644,0.386l2.447,0.127z'</body><body package="Roassal2-Shapes">Gabon	^ 'M495.162,237.723l-2.833,-2.703l-1.801,-2.317l-1.544,-2.704l0,-0.900l0.642,-0.902l0.644,-1.931l0.515,-2.060l0.903,-0.128l3.988,0l-0.128,-3.219l1.288,-0.129l1.673,0.387l1.674,-0.387l0.256,0.129l-0.127,1.160l0.643,1.415l2.060,-0.258l0.642,0.515l-1.157,3.219l1.286,1.545l0.258,2.059l-0.258,1.802l-0.900,1.288l-2.319,-0.129l-1.416,-1.287l-0.256,1.287l-1.802,0.257l-0.901,0.643l1.029,1.804l2.059,-1.544z'</body><body package="Roassal2-Shapes">Gambia	^ 'M419.855,191.51l0.387,-1.160l2.961,-0.129l0.515,-0.643l0.901,0l1.030,0.643l0.901,0l0.900,-0.387l0.516,0.773l-1.159,0.644l-1.158,-0.128l-1.159,-0.516l-1.030,0.644l-0.514,0l-0.644,0.386l2.447,0.127z'</body><body package="Roassal2-Shapes">Georgia	^ 'M577.161,115.042l0.387,-1.159l-0.643,-1.801l-1.546,-1.030l-1.544,-0.258l-0.900,-0.772l0.256,-0.387l2.318,0.516l3.990,0.386l3.604,1.287l0.517,0.515l1.671,-0.387l2.446,0.516l0.772,1.158l1.803,0.644l-0.771,0.257l1.287,1.545l-0.258,0.258l-1.545,-0.130l-1.930,-0.772l-0.644,0.387l-3.734,0.515l-2.702,-1.416l2.834,-0.128z'</body><body package="Roassal2-Shapes">Germany	^ 'M491.945,78.87l0.127,1.028l2.703,0.644l-0.128,0.901l2.831,-0.514l1.417,-0.644l3.090,1.029l1.287,0.901l0.642,1.287l-0.770,0.773l1.029,0.901l0.644,1.417l-0.257,1.030l1.158,1.672l-1.287,0.259l-0.645,-0.259l-0.642,0.516l-1.932,0.515l-1.029,0.644l-1.932,0.643l0.387,0.773l0.386,1.157l1.288,0.645l1.544,1.159l-0.901,1.158l-1.030,0.386l0.387,1.802l-0.258,0.386l-0.773,-0.515l-1.287,-0.128l-1.931,0.515l-2.446,-0.128l-0.387,0.772l-1.285,-0.772l-0.903,0.128l-2.832,-0.772l-0.515,0.514l-2.317,0l0.257,-1.931l1.416,-1.802l-3.861,-0.514l-1.287,-0.773l0.129,-1.159l-0.516,-0.515l0.258,-1.930l-0.386,-2.833l1.544,0l0.773,-0.901l0.644,-2.574l-0.515,-0.902l0.515,-0.515l2.317,-0.129l0.385,0.516l1.933,-1.288l-0.645,-1.029l-0.129,-1.544l2.060,0.385l-1.675,0.385z'</body><body package="Roassal2-Shapes">Ghana	^ 'M468.13,210.946l-4.249,1.674l-1.545,0.901l-2.446,0.773l-2.317,-0.773l0.129,-1.030l-1.159,-2.317l0.644,-3.088l1.158,-2.190l-0.772,-3.861l-0.386,-2.060l0.129,-1.545l4.634,-0.129l1.289,0.258l0.770,-0.514l1.288,0.256l-0.258,0.772l1.159,1.417l0,1.932l0.258,2.187l0.643,1.030l-0.514,2.318l0.128,1.416l0.773,1.673l-0.644,-0.900z'</body><body package="Roassal2-Shapes">GreatBritian	^ 'M444.829,78.483l2.317,-0.129l2.832,1.673l-1.416,1.803l-2.060,-0.516l-1.673,0l0.515,-1.416l0.515,1.415zM453.84,69.214l3.347,-0.257l-2.961,2.960l2.832,-0.386l2.832,0l-0.643,2.189l-2.446,2.446l2.832,0.256l2.575,3.348l1.801,0.515l1.674,3.089l0.773,1.030l3.347,0.515l-0.387,1.674l-1.416,0.772l1.159,1.416l-2.446,1.417l-3.605,0l-4.633,0.772l-1.159,-0.516l-1.803,1.159l-2.574,-0.257l-1.802,1.030l-1.415,-0.515l3.860,-2.832l2.446,-0.644l-4.247,-0.386l-0.772,-1.030l2.831,-0.901l-1.416,-1.416l0.515,-1.803l3.991,0.258l0.386,-1.545l-1.803,-1.674l-3.346,-0.515l-0.645,-0.772l1.031,-1.158l-0.901,-0.772l-1.416,1.286l-0.258,-2.573l-1.287,-1.417l0.901,-2.704l2.189,-2.187l-2.059,-0.128z'</body><body package="Roassal2-Shapes">Greece	^ 'M536.099,131.906l-0.387,0.773l-3.861,0.257l0,-0.515l-3.219,-0.515l0.387,-1.159l1.543,0.902l2.060,-0.129l2.059,0.257l-0.127,0.387l-1.545,0.258zM521.808,116.973l1.804,-0.258l1.029,-0.643l1.417,0.128l0.515,-0.513l0.514,-0.130l1.932,0.130l2.187,-0.773l1.930,1.029l2.445,-0.256l0,-1.417l1.289,0.772l-0.771,1.673l-0.645,0.258l-1.674,0l-1.416,-0.258l-3.218,0.644l1.802,1.545l-1.287,0.387l-1.543,0l-1.418,-1.417l-0.514,0.645l0.643,1.672l1.289,1.159l-1.031,0.644l1.545,1.286l1.286,0.774l0.130,1.545l-2.575,-0.773l0.772,1.417l-1.672,0.256l1.028,2.317l-1.800,0.129l-2.189,-1.287l-1.030,-2.059l-0.516,-1.803l-1.030,-1.288l-1.287,-1.545l-0.258,-0.772l1.288,-1.287l0.128,-0.901l0.901,-0.386l0,0.644z'</body><body package="Roassal2-Shapes">Greenland	^ 'M339.272,4.333l9.011,-1.544l9.525,0.128l3.348,-1.029l9.526,-0.258l21.497,0.386l16.864,2.060l-4.892,1.029l-10.298,0.129l-14.546,0.258l1.287,0.515l9.654,-0.257l8.110,0.901l5.149,-0.773l2.317,0.901l-2.961,1.545l6.824,-1.030l13.130,-1.030l7.981,0.515l1.545,1.159l-10.942,1.931l-1.546,0.644l-8.625,0.514l6.180,0.129l-3.089,1.931l-2.189,1.802l0.129,2.961l3.218,1.674l-4.249,0.128l-4.376,0.902l4.893,1.415l0.643,2.318l-2.832,0.257l3.476,2.317l-5.923,0.129l3.091,1.159l-0.902,0.900l-3.733,0.387l-3.862,0l3.476,1.931l0,1.158l-5.407,-1.158l-1.287,0.773l3.604,0.644l3.476,1.673l1.030,2.188l-4.763,0.515l-2.060,-1.031l-3.347,-1.544l0.901,1.803l-3.090,1.416l7.081,0.129l3.733,0.128l-7.208,2.316l-7.338,2.189l-7.852,0.902l-2.962,0l-2.831,1.030l-3.734,2.832l-5.793,1.931l-1.930,0.128l-3.604,0.644l-3.862,0.644l-2.317,1.673l0,1.802l-1.288,1.802l-4.505,2.189l1.158,2.060l-1.287,2.188l-1.287,2.703l-3.863,0.129l-3.989,-2.188l-5.278,0l-2.704,-1.545l-1.802,-2.574l-4.635,-3.347l-1.415,-1.803l-0.258,-2.316l-3.732,-2.576l0.900,-1.930l-1.802,-1.031l2.703,-3.088l3.991,-1.031l1.159,-1.158l0.515,-2.059l-3.476,-0.259l-6.179,-1.416l2.189,0l6.049,0l-4.634,-1.801l-2.446,-0.902l-4.892,-0.258l2.960,-2.445l-1.544,-1.030l-2.188,-1.931l-3.218,-2.832l-3.475,-1.030l0.128,-1.159l-7.338,-1.545l-5.664,-0.257l-7.208,0.129l-6.565,0.257l-3.090,-0.901l-4.763,-1.673l7.081,-0.901l5.405,-0.130l-11.457,-0.643l-6.050,-1.158l0.387,-1.030l10.169,-1.288l9.784,-1.287l1.030,-1.030l-7.210,-0.901l2.318,-1.029l9.397,-1.931l3.862,-0.258l-1.159,-1.287l6.437,-0.644l8.238,-0.387l8.368,-0.128l2.832,0.901l7.209,-1.545l6.436,1.030l3.347,1.159l6.050,0l-6.436,-1.545l-0.386,1.159z'</body><body package="Roassal2-Shapes">Guatemala	^ 'M222.516,189.963l-1.417,-0.514l-1.673,0l-1.159,-0.515l-1.544,-1.159l0.128,-0.773l0.257,-0.643l-0.385,-0.514l1.416,-2.188l3.347,0l0.128,-0.903l-0.385,-0.128l-0.387,-0.644l-1.030,-0.643l-0.901,-0.901l1.158,0l0,-1.416l2.575,0l2.446,0l0,2.060l-0.257,3.089l0.772,0l0.901,0.515l0.258,-0.386l0.771,0.257l-1.158,1.030l-1.287,0.772l-0.257,0.516l0.257,0.514l-0.515,0.773l-0.644,0.129l0.129,0.258l-0.515,0.385l-0.901,0.644l0.128,-0.385z'</body><body package="Roassal2-Shapes">Guinea	^ 'M442.512,206.313l-0.772,-0.129l-0.515,1.158l-0.772,-0.128l-0.515,-0.515l0.128,-1.029l-1.158,-1.674l-0.644,0.257l-0.643,0.130l-0.644,0.127l0,-1.030l-0.387,-0.642l0,-0.773l-0.515,-1.159l-0.772,-1.029l-2.188,0l-0.644,0.514l-0.772,0.129l-0.386,0.515l-0.387,0.772l-1.415,1.159l-1.159,-1.544l-1.030,-1.031l-0.644,-0.386l-0.772,-0.515l-0.257,-1.159l-0.386,-0.643l-0.773,-0.515l1.159,-1.287l0.901,0.128l0.644,-0.515l0.643,0l0.386,-0.386l-0.257,-0.901l0.257,-0.257l0.129,-0.901l1.287,0l1.931,0.643l0.643,0l0.130,-0.258l1.544,0.129l0.387,-0.129l0.128,1.030l0.387,0l0.772,-0.387l0.386,0.130l0.772,0.643l1.159,0.258l0.772,-0.644l0.773,-0.387l0.643,-0.385l0.515,0.129l0.644,0.643l0.386,0.644l1.030,1.158l-0.516,0.645l-0.128,0.900l0.644,-0.257l0.257,0.386l-0.128,0.773l0.772,0.772l-0.515,0.257l-0.129,0.901l0.516,1.031l0.772,2.187l-1.030,0.387l-0.258,0.257l0.129,0.644l-0.129,1.159l0.386,0z'</body><body package="Roassal2-Shapes">GuineaBissau	^ 'M424.49,197.173l-1.416,-1.030l-1.159,-0.257l-0.643,-0.773l0,-0.386l-0.772,-0.515l-0.258,-0.644l1.545,-0.386l0.901,0.129l0.644,-0.386l5.020,0.129l-0.129,0.901l-0.257,0.257l0.257,0.901l-0.386,0.386l-0.643,0l-0.644,0.515l-0.901,-0.128l1.159,-1.287z'</body><body package="Roassal2-Shapes">Guyana	^ 'M304.257,204.383l1.804,1.028l1.672,1.803l0,1.415l1.030,0l1.417,1.289l1.157,1.028l-0.514,2.319l-1.545,0.772l0.129,0.643l-0.514,1.416l1.157,1.931l0.902,0l0.385,1.545l1.545,2.317l-0.643,0.130l-1.416,-0.259l-0.901,0.644l-1.288,0.515l-0.772,0.128l-0.386,0.515l-1.287,-0.128l-1.674,-1.288l-0.128,-1.287l-0.773,-1.287l0.515,-2.316l0.772,-0.902l-0.644,-1.288l-0.900,-0.386l0.257,-1.159l-0.644,-0.643l-1.287,0.129l-1.930,-2.061l0.772,-0.772l0,-1.287l1.673,-0.385l0.644,-0.516l-0.902,-1.029l0.130,-0.902l-2.187,1.672z'</body><body package="Roassal2-Shapes">Haiti	^ 'M268.085,173.357l1.673,0.129l2.317,0.387l0.259,1.416l-0.259,1.029l-0.643,0.515l0.643,0.772l0,0.773l-1.802,-0.515l-1.287,0.257l-1.673,-0.257l-1.159,0.515l-1.545,-0.773l0.258,-0.900l2.446,0.385l2.060,0.258l1.029,-0.643l-1.288,-1.159l0,-1.030l-1.673,-0.387l-0.644,0.772z'</body><body package="Roassal2-Shapes">Honduras	^ 'M229.981,192.023l-0.385,-0.900l-0.902,-0.258l0.258,-1.031l-0.386,-0.256l-0.515,-0.258l-1.287,0.386l0,-0.386l-0.902,-0.386l-0.515,-0.643l-0.772,-0.129l0.515,-0.773l-0.257,-0.514l0.257,-0.516l1.287,-0.772l1.158,-1.030l0.258,0.129l0.644,-0.386l0.772,-0.129l0.257,0.258l0.386,-0.129l1.288,0.257l1.288,-0.128l0.772,-0.258l0.386,-0.258l0.773,0.129l0.643,0.129l0.772,0l0.515,-0.258l1.287,0.387l0.387,0l0.772,0.515l0.773,0.643l1.030,0.387l0.643,0.772l-0.901,-0.128l-0.386,0.386l-0.902,0.386l-0.643,0l-0.643,0.385l-0.516,-0.127l-0.514,-0.517l-0.258,0.130l-0.258,0.643l-0.257,0l-0.129,0.516l-0.900,0.771l-0.515,0.258l-0.258,0.386l-0.773,-0.515l-0.643,0.643l-0.515,0l-0.643,0.129l0,1.288l-0.387,0l-0.257,0.644l0.902,-0.128z'</body><body package="Roassal2-Shapes">Hungary	^ 'M508.937,100.753l0.900,-1.674l-0.643,-0.643l1.545,0l0.257,-1.158l1.288,0.772l1.028,0.257l2.318,-0.257l0.129,-0.644l1.158,0l1.287,-0.515l0.258,0.258l1.287,-0.387l0.645,-0.643l0.900,-0.129l2.832,0.772l0.645,-0.257l1.415,0.773l0.256,0.643l-1.671,0.643l-1.290,1.803l-1.673,1.802l-2.059,0.515l-1.672,-0.129l-2.060,0.772l-1.032,0.387l-2.316,-0.515l-1.930,-1.159l-0.902,-0.386l-0.515,-0.901l0.385,0z'</body><body package="Roassal2-Shapes">Iceland	^ 'M426.163,47.974l-0.643,1.672l3.089,1.932l-3.604,2.059l-7.723,1.802l-2.318,0.515l-3.475,-0.385l-7.595,-0.902l2.703,-1.158l-5.922,-1.287l4.763,-0.516l-0.128,-0.900l-5.664,-0.644l1.930,-1.674l3.991,-0.386l4.248,1.803l4.119,-1.417l3.348,0.645l4.376,-1.417l-4.505,-0.258z'</body><body package="Roassal2-Shapes">India	^ 'M674.866,131.391l2.961,3.089l-0.256,2.189l1.030,1.416l-0.129,1.416l-1.932,-0.385l0.773,2.960l2.704,1.674l3.732,1.930l-1.672,1.160l-1.160,2.573l2.703,1.031l2.447,1.287l3.604,1.545l3.603,0.386l1.674,1.287l2.059,0.257l3.219,0.644l2.189,0l0.385,-1.158l-0.385,-1.674l0.258,-1.159l1.543,-0.514l0.258,2.059l0.129,0.516l2.447,1.029l1.672,-0.386l2.189,0.129l2.188,0l0.257,-1.674l-1.158,-0.901l2.188,-0.258l2.445,-2.059l3.092,-1.674l2.314,0.643l1.934,-1.158l1.285,1.674l-0.900,1.159l2.832,0.386l0.258,1.029l-1.030,0.515l0.256,1.674l-1.930,-0.515l-3.474,1.802l0.127,1.545l-1.545,2.317l-0.127,1.287l-1.160,2.189l-2.188,-0.515l0,2.704l-0.642,0.900l0.255,1.159l-1.287,0.643l-1.416,-4.247l-0.771,0l-0.387,1.802l-1.545,-1.416l0.901,-1.545l1.158,-0.129l1.289,-2.317l-1.545,-0.515l-2.574,0.128l-2.574,-0.386l-0.260,-1.931l-1.285,-0.128l-2.061,-1.159l-1.031,1.803l2.060,1.415l-1.802,1.030l-0.514,1.031l1.672,0.643l-0.514,1.674l0.901,2.059l0.515,2.188l-0.387,1.030l-1.931,-0.128l-3.217,0.643l0.129,1.931l-1.416,1.674l-3.861,1.802l-3.092,3.218l-2.059,1.675l-2.574,1.673l-0.129,1.287l-1.287,0.644l-2.447,1.029l-1.287,0.129l-0.772,2.059l0.645,3.476l0.127,2.189l-1.159,2.574l0,4.635l-1.414,0.128l-1.289,2.060l0.903,0.901l-2.448,0.773l-0.900,1.802l-1.158,0.772l-2.576,-2.574l-1.159,-3.734l-1.027,-2.703l-1.031,-1.287l-1.416,-2.575l-0.645,-3.347l-0.513,-1.674l-2.448,-3.733l-1.029,-5.278l-0.900,-3.346l0,-3.347l-0.516,-2.446l-3.861,1.544l-1.931,-0.257l-3.476,-3.347l1.287,-0.901l-0.772,-1.159l-3.218,-2.188l1.801,-1.802l5.922,0l-0.514,-2.317l-1.545,-1.417l-0.258,-2.059l-1.802,-1.159l2.961,-2.832l3.218,0.129l2.704,-2.833l1.802,-2.702l2.575,-2.704l0,-1.931l2.187,-1.545l-2.059,-1.287l-1.031,-1.802l-0.900,-2.447l1.287,-1.157l4.121,0.643l2.961,-0.386l-2.572,2.189z'</body><body package="Roassal2-Shapes">Indonesia	^ 'M801.921,250.982l0.258,0.515l0,0.773l-1.674,2.060l-2.317,0.515l-0.386,-0.257l0.258,-0.902l1.158,-1.674l-2.703,1.030zM826.767,245.576l-0.258,-2.058l0.515,-0.903l0.516,-1.030l0.643,0.901l0,1.286l1.416,-1.804zM845.175,242.742l0,8.755l-2.447,-2.188l-2.702,-0.514l-0.644,0.771l-3.475,0.129l1.156,-2.189l1.676,-0.772l-0.644,-2.962l-1.287,-2.317l-5.280,-2.187l-2.187,-0.256l-3.992,-2.448l-0.899,1.288l-1.031,0.257l-0.516,-1.030l0,-1.157l-2.058,-1.288l2.832,-1.030l1.931,0l-0.259,-0.644l-3.860,0l-1.160,-1.674l-2.314,-0.515l-1.161,-1.287l3.606,-0.643l1.414,-0.902l4.248,1.160l0.516,1.028l0.771,4.248l2.705,1.676l2.317,-2.833l3.090,-1.674l2.316,0l2.318,0.901l2.059,1.030l2.832,0.515l-0.129,-8.752zM761.116,223.434l1.801,1.416l1.803,-0.514l1.672,0.257l1.545,-1.417l1.289,-0.257l2.574,0.772l2.189,-0.515l1.414,-3.862l1.032,-0.901l0.900,-3.089l3.090,0l2.316,0.515l-1.545,2.446l2.059,2.574l-0.514,1.160l3.090,2.574l-3.217,0.257l-0.902,1.802l0.129,2.447l-2.576,1.930l-0.129,2.575l-1.030,4.119l-0.386,-0.901l-3.088,1.158l-1.031,-1.542l-1.930,-0.259l-1.287,-0.773l-3.219,0.901l-1.029,-1.287l-1.801,0.128l-2.189,-0.256l-0.387,-3.606l-1.416,-0.772l-1.287,-2.317l-0.260,-2.317l0.260,-2.574l1.545,-1.674l-0.515,-1.802zM813.765,234.505l2.961,0.772l0.902,2.059l-2.190,-1.029l-2.318,-0.256l-1.545,0.128l-1.801,0l0.643,-1.545l-3.348,0.129zM807.069,237.209l-1.929,-0.516l-0.516,-1.158l2.705,-0.129l0.643,0.901l0.903,-0.902zM809.903,221.117l0.129,1.416l1.674,0.258l0.256,1.158l-0.256,2.317l-1.289,-0.258l-0.514,1.674l1.159,1.417l-0.774,0.256l-1.029,-1.673l-0.772,-3.476l0.514,-2.060l-0.902,1.029zM796.386,224.593l3.090,-0.130l2.703,-1.930l0.386,0.643l-2.060,2.704l-2.059,0.515l-2.574,-0.644l-4.506,0.257l-2.316,0.387l-0.387,1.931l2.316,2.445l1.545,-1.158l5.022,-1.031l-0.258,1.289l-1.158,-0.387l-1.160,1.545l-2.446,1.030l2.575,3.476l-0.514,0.903l2.445,3.216l0,1.674l-1.416,0.771l-1.029,-0.901l1.287,-2.186l-2.703,1.028l-0.645,-0.772l0.385,-1.031l-1.930,-1.544l0.131,-2.574l-1.804,0.773l0.257,3.088l0.129,3.862l-1.800,0.387l-1.161,-0.774l0.774,-2.443l-0.389,-2.574l-1.156,-0.131l-0.772,-1.802l1.159,-1.802l0.384,-2.060l1.288,-4.120l0.515,-1.029l2.317,-2.060l2.189,0.772l-3.346,-0.387zM789.306,254.588l-3.604,-1.804l2.574,-0.643l1.416,0.902l0.903,0.771l-0.131,0.774l1.158,0zM792.138,249.953l1.802,-0.129l2.317,-1.029l-0.385,1.544l-3.992,0.643l-3.604,-0.257l0,-1.030l2.188,-0.515l-1.674,-0.773zM783.771,249.566l1.673,-0.257l0.645,1.158l-3.090,0.515l-1.803,0.387l-1.545,0l1.030,-1.674l1.416,0l0.773,-0.900l-0.901,-0.771zM757.511,244.287l0.386,0.902l5.149,0.258l0.514,-1.031l5.021,1.288l1.029,1.674l3.991,0.515l3.349,1.673l-3.092,1.032l-2.961,-1.160l-2.445,0.128l-2.832,-0.257l-2.445,-0.514l-3.219,-0.902l-1.932,-0.387l-1.158,0.387l-4.890,-1.159l-0.387,-1.158l-2.574,-0.129l1.929,-2.574l3.219,0.127l2.190,1.031l-1.158,-0.256zM746.438,229.871l0.387,1.932l0.903,1.415l2.058,0.257l1.289,1.802l-0.644,3.347l-0.129,4.118l-2.961,0l-2.317,-2.187l-3.476,-2.188l-1.158,-1.674l-2.059,-2.188l-1.289,-2.060l-2.061,-3.733l-2.314,-2.189l-0.775,-2.317l-1.028,-2.187l-2.447,-1.674l-1.416,-2.318l-2.059,-1.416l-2.705,-3.090l-0.256,-1.287l1.674,0.129l4.248,0.515l2.317,2.575l2.058,1.803l1.547,1.157l2.572,2.962l2.706,0l2.187,1.801l1.674,2.318l2.060,1.158l-1.158,2.189l1.545,1.030l-1.027,0z'</body><body package="Roassal2-Shapes">Iran	^ 'M610.502,126.756l2.317,-0.513l1.932,-1.546l1.803,0.129l1.157,-0.515l1.932,0.257l2.961,1.288l2.188,0.387l3.088,2.317l2.060,0.128l0.129,2.188l-1.029,3.477l-0.773,1.930l1.158,0.386l-1.158,1.416l0.902,2.188l0.256,1.674l2.060,0.515l0.129,1.673l-2.445,2.447l1.414,1.415l1.031,1.674l2.574,1.159l0.128,2.446l1.288,0.386l0.259,1.287l-3.992,1.288l-1.030,3.218l-5.020,-0.902l-2.961,-0.515l-2.961,-0.386l-1.160,-3.346l-1.285,-0.515l-2.058,0.515l-2.706,1.287l-3.345,-0.901l-2.705,-2.060l-2.575,-0.773l-1.800,-2.446l-2.061,-3.604l-1.416,0.387l-1.674,-0.902l-1.029,1.030l-1.545,-1.416l0,-1.416l-0.901,0l0.514,-1.931l-1.415,-2.060l-3.347,-1.416l-1.802,-2.575l0.643,-2.187l1.289,-0.902l-0.130,-1.545l-1.802,-0.772l-1.803,-3.476l-0.128,0l-1.288,-1.931l0.516,-0.901l-0.773,-3.089l1.802,-0.772l0.387,1.028l1.415,1.288l1.804,0.386l1.029,-0.129l3.089,-1.930l1.030,-0.258l0.773,0.773l-0.902,1.415l1.674,1.417l0.643,-0.129l0.901,1.931l2.575,0.516l1.803,1.415l3.862,0.385l4.247,-0.643l-0.257,0.644z'</body><body package="Roassal2-Shapes">Iraq	^ 'M585.658,126.628l0.128,0l1.803,3.476l1.802,0.772l0.130,1.545l-1.289,0.902l-0.643,2.187l1.802,2.575l3.347,1.416l1.415,2.060l-0.514,1.931l0.901,0l0,1.416l1.545,1.416l-1.674,-0.128l-1.803,-0.258l-1.930,2.703l-5.020,-0.258l-7.596,-5.406l-3.990,-1.931l-3.218,-0.773l-1.158,-3.218l6.051,-2.832l1.029,-3.218l-0.258,-1.931l1.417,-0.773l1.416,-1.673l1.158,-0.385l3.091,0.385l0.899,0.643l1.287,-0.385l0.128,0.258z'</body><body package="Roassal2-Shapes">Ireland	^ 'M448.562,81.83l0.387,1.931l-2.060,2.445l-4.764,1.544l-3.732,-0.385l2.188,-2.832l-1.415,-2.703l3.604,-2.060l2.059,-1.287l0.515,1.415l-0.515,1.416l1.673,0l-2.060,-0.516z'</body><body package="Roassal2-Shapes">Israel	^ 'M561.458,138.857l-0.516,0.902l-0.900,-0.387l-0.645,1.803l0.774,0.258l-0.774,0.385l-0.128,0.644l1.287,-0.257l0.130,1.029l-1.417,4.249l-1.674,-4.635l0.773,-0.901l-0.258,-0.129l0.772,-1.287l0.515,-1.931l0.385,-0.773l0.130,0l0.900,0l0.259,-0.515l0.643,0l0,1.160l0.256,-0.385z'</body><body package="Roassal2-Shapes">Italy	^ 'M493.361,100.624l1.672,0.386l0.258,-0.514l2.703,-0.386l0.644,0.900l3.734,0.644l-0.259,1.417l0.646,1.029l-2.063,-0.386l-2.315,1.030l0.257,1.287l-0.387,0.772l0.900,1.417l2.577,1.287l1.287,2.317l2.961,2.189l2.187,-0.130l0.645,0.644l-0.773,0.515l2.445,1.030l1.933,0.772l2.315,1.416l0.257,0.516l-0.513,0.900l-1.417,-1.157l-2.316,-0.516l-1.159,1.803l1.931,0.901l-0.387,1.416l-1.030,0.257l-1.544,2.317l-1.029,0.129l0,-0.772l0.514,-1.417l0.644,-0.643l-1.158,-1.545l-0.772,-1.417l-1.160,-0.256l-0.772,-1.159l-1.673,-0.515l-1.159,-1.030l-2.060,-0.257l-2.061,-1.159l-2.444,-1.802l-1.933,-1.545l-0.772,-2.703l-1.286,-0.258l-2.189,-0.901l-1.288,0.386l-1.545,1.287l-1.157,0.130l0.258,-1.160l-1.418,-0.386l-0.642,-2.058l0.901,-0.774l-0.772,-1.029l0.128,-0.772l1.160,0.643l1.287,-0.128l1.543,-1.031l0.387,0.516l1.288,-0.129l0.643,-1.030l1.932,0.257l1.158,-0.386l-0.258,1.159zM504.944,124.183l2.061,-0.258l-0.901,2.188l0.387,0.773l-0.644,1.415l-2.061,-1.030l-1.286,-0.256l-3.733,-1.416l0.384,-1.288l3.091,0.257l-2.702,0.385zM488.726,116.844l1.287,-0.901l1.675,1.931l-0.387,3.605l-1.288,-0.258l-1.029,0.902l-1.032,-0.644l-0.128,-3.219l-0.642,-1.545l-1.544,-0.129z'</body><body package="Roassal2-Shapes">IvoryCoast	^ 'M457.573,213.521l-1.287,0l-1.802,-0.514l-1.802,0l-3.219,0.514l-1.802,0.773l-2.703,1.030l-0.516,-0.129l0.259,-2.188l0.257,-0.387l-0.129,-1.030l-1.159,-1.158l-0.772,-0.129l-0.901,-0.772l0.644,-1.158l-0.258,-1.287l0.129,-0.773l0.386,0l0.129,-1.159l-0.129,-0.644l0.258,-0.257l1.030,-0.387l-0.772,-2.187l-0.516,-1.031l0.129,-0.901l0.515,-0.257l0.387,-0.258l0.772,0.386l2.059,0l0.514,-0.772l0.516,0.129l0.772,-0.385l0.387,1.157l0.643,-0.257l1.030,-0.515l1.287,0.643l0.387,0.902l1.286,0.515l0.902,-0.644l1.287,-0.129l1.802,0.773l0.772,3.861l-1.158,2.190l-0.644,3.088l1.159,2.317l0.129,-1.030z'</body><body package="Roassal2-Shapes">Jamaica	^ 'M256.242,177.22l1.802,0.128l1.416,0.644l0.515,0.772l-1.931,0.129l-0.772,0.386l-1.544,-0.386l-1.545,-1.030l0.385,-0.643l1.030,-0.130l-0.644,-0.130z'</body><body package="Roassal2-Shapes">Japan	^ 'M847.491,121.479l-2.574,2.704l0.129,2.703l-1.031,2.188l0.386,1.287l-1.287,1.931l-3.476,1.288l-4.762,0.128l-3.861,3.090l-1.801,-1.030l-0.129,-1.932l-4.635,0.517l-3.219,1.287l-3.089,0l2.703,2.059l-1.803,4.506l-1.801,1.159l-1.287,-1.031l0.643,-2.445l-1.672,-0.772l-1.031,-1.804l2.445,-0.900l1.416,-1.674l2.705,-1.415l2.059,-1.803l5.277,-0.773l2.961,0.516l2.832,-4.764l1.803,1.288l3.861,-2.704l1.545,-1.029l1.674,-3.347l-0.387,-2.961l1.158,-1.803l2.832,-0.386l1.416,3.734l0,-2.188zM854.829,108.606l1.930,-1.159l0.515,2.961l-3.990,0.772l-2.316,2.703l-4.250,-1.931l-1.414,2.962l-3.090,0.128l-0.387,-2.703l1.416,-2.060l2.832,-0.128l0.774,-3.734l0.771,-2.188l3.219,2.832l2.060,0.901l-1.930,-0.644zM821.874,136.798l1.416,-1.545l1.545,0.257l1.160,-1.157l1.930,0.643l0.387,0.900l-1.545,1.674l-1.159,-0.901l-1.287,0.643l-0.773,1.545l-1.801,-0.772l-0.127,1.287z'</body><body package="Roassal2-Shapes">Jordan	^ 'M560.942,139.759l0.516,-0.902l2.960,1.031l5.278,-2.833l1.158,3.218l-0.514,0.516l-5.407,1.287l2.703,2.703l-0.901,0.515l-0.515,0.902l-2.060,0.386l-0.643,0.901l-1.160,0.900l-2.960,-0.514l-0.128,-0.386l1.417,-4.249l-0.130,-1.029l0.386,-0.902l0,1.544z'</body><body package="Roassal2-Shapes">Kazakhstan	^ 'M656.46,113.111l-1.547,0.515l-3.603,1.802l-1.160,1.931l-1.030,0.129l-0.771,-1.288l-3.347,-0.128l-0.644,-2.189l-1.287,0l0.258,-2.703l-3.219,-2.060l-4.633,0.259l-3.219,0.385l-2.574,-2.446l-2.189,-1.029l-4.120,-1.931l-0.515,-0.129l-6.951,1.544l0.130,9.914l-1.419,0.128l-1.930,-2.060l-1.800,-0.772l-3.090,0.515l-1.160,0.900l-0.127,-0.643l0.642,-1.159l-0.515,-0.900l-3.089,-0.902l-1.286,-2.446l-1.416,-0.644l-0.130,-0.901l2.702,0.258l0,-1.931l2.320,-0.514l2.316,0.385l0.515,-2.574l-0.387,-1.674l-2.704,0.129l-2.316,-0.644l-3.090,1.159l-2.574,0.643l-1.416,-0.514l0.387,-1.416l-1.803,-1.803l-1.931,0.129l-2.317,-1.802l1.545,-2.060l-0.772,-0.515l2.186,-2.960l2.705,1.544l0.387,-1.931l5.535,-2.962l4.248,-0.127l5.922,1.931l3.088,1.029l2.961,-1.158l4.250,0l3.474,1.416l0.773,-0.772l3.732,0l0.644,-1.159l-4.376,-1.931l2.702,-1.288l-0.515,-0.772l2.575,-0.644l-1.929,-1.931l1.158,-0.901l10.039,-0.901l1.418,-0.644l6.693,-1.028l2.446,-1.160l4.763,0.644l0.901,2.833l2.832,-0.645l3.474,0.901l-0.258,1.416l2.577,-0.128l6.822,-2.575l-1.029,0.901l3.474,2.060l5.922,6.822l1.545,-1.416l3.605,1.546l3.860,-0.644l1.545,0.514l1.289,1.545l1.930,0.515l1.158,1.159l3.478,-0.387l1.414,1.675l-2.060,1.801l-2.317,0.128l-0.127,2.704l-1.416,1.288l-5.408,-0.901l-1.931,4.892l-1.415,0.514l-5.279,1.159l2.445,4.635l-1.931,0.643l0.260,1.545l-1.674,-0.386l-1.287,-0.902l-3.993,-0.386l-4.505,0l-1.030,0.258l-3.732,-1.159l-1.545,0.644l-0.514,1.545l-4.378,-0.902l-1.801,0.386l0.514,-1.159z'</body><body package="Roassal2-Shapes">Kenya	^ 'M561.972,214.552l2.318,0l3.089,2.574l0.772,0.130l1.159,0.385l0.900,-0.258l1.031,0.387l1.030,-1.159l2.445,-1.287l1.931,1.158l1.030,-0.256l-2.188,2.960l-0.130,10.169l1.931,2.189l-1.931,1.030l-0.514,1.416l-1.030,0.258l-0.515,1.545l-0.902,1.158l-0.513,1.673l-1.031,1.157l-4.119,-2.445l-0.256,-2.059l-10.042,-5.793l0,-2.832l0,-0.772l1.931,-1.674l1.029,-1.931l-0.771,-1.930l-1.031,-2.704l-1.287,-1.930l1.416,-1.159l2.188,-2.447l1.159,0.515l0.772,1.288l-0.129,-0.644z'</body><body package="Roassal2-Shapes">Kuwait	^ 'M594.411,146.196l0.645,1.158l-0.257,0.643l0.900,2.060l-1.930,0.129l-0.644,-1.288l-2.447,-0.257l1.930,-2.703l-1.803,-0.258z'</body><body package="Roassal2-Shapes">Kyrgyzstan	^ 'M656.46,113.111l0.514,-1.159l1.801,-0.386l4.378,0.902l0.514,-1.545l1.545,-0.644l3.732,1.159l1.030,-0.258l4.505,0l3.993,0.386l1.287,0.902l1.674,0.386l-0.387,0.644l-4.248,1.416l-0.901,1.158l-3.476,0.258l-1.029,1.673l-2.834,-0.257l-1.930,0.514l-2.574,1.288l0.386,0.643l-0.773,0.516l-5.020,0.514l-3.347,-0.901l-2.961,0.129l0.257,-1.545l2.961,0.515l1.030,-0.900l2.060,0.257l3.346,-1.932l-3.090,-1.416l-1.929,0.772l-2.061,-1.030l2.317,-1.801l0.770,0.258z'</body><body package="Roassal2-Shapes">Laos	^ 'M748.628,188.549l0.902,-1.288l0.127,-2.189l-2.187,-2.446l-0.129,-2.574l-2.059,-2.189l-2.060,-0.258l-0.516,1.030l-1.545,0l-0.900,-0.385l-2.832,1.544l0,-2.446l0.642,-2.832l-1.800,-0.128l-0.129,-1.546l-1.161,-0.900l0.516,-0.902l2.318,-1.802l0.256,0.643l1.418,0l-0.386,-3.089l1.416,-0.386l1.544,2.188l1.159,2.446l3.347,0l1.028,2.317l-1.672,0.772l-0.774,0.902l3.219,1.674l2.188,3.217l1.673,2.318l2.061,1.931l0.645,1.803l-0.387,2.702l-2.446,-0.901l-1.160,1.803l2.316,1.029z'</body><body package="Roassal2-Shapes">Latvia	^ 'M521.938,76.037l0.128,-2.060l1.288,-1.674l2.573,-0.900l2.060,2.059l2.190,-0.128l0.513,-2.061l2.319,-0.514l1.158,0.387l2.316,1.028l2.318,0l1.286,0.644l0.129,1.287l0.901,1.545l-2.831,1.031l-1.674,0.514l-2.574,-1.288l-1.416,-0.257l-0.385,-0.515l-2.705,0.259l-4.506,-0.130l3.088,-0.773z'</body><body package="Roassal2-Shapes">Lebanon	^ 'M561.714,137.312l-0.643,0l-0.259,0.515l-0.900,0l0.900,-2.187l1.289,-1.932l0.128,0l1.159,0.128l0.515,1.031l-1.546,1.029l-0.514,1.416l0.129,0z'</body><body package="Roassal2-Shapes">Lesotho	^ 'M543.306,304.922l0.902,0.900l-0.773,1.287l-0.515,0.902l-1.417,0.385l-0.514,0.901l-1.030,0.258l-1.931,-2.059l1.416,-1.803l1.416,-1.029l1.287,-0.516l-1.159,-0.774z'</body><body package="Roassal2-Shapes">Liberia	^ 'M444.442,215.195l-0.643,0l-2.832,-1.287l-2.446,-2.060l-2.317,-1.416l-1.802,-1.673l0.644,-0.902l0.129,-0.771l1.287,-1.546l1.159,-1.157l0.643,-0.130l0.644,-0.257l1.158,1.674l-0.128,1.029l0.515,0.515l0.772,0.128l0.515,-1.158l0.772,0.129l-0.129,0.773l0.258,1.287l-0.644,1.158l0.901,0.772l0.772,0.129l1.159,1.158l0.129,1.030l-0.257,0.387l0.259,-2.188z'</body><body package="Roassal2-Shapes">Libya	^ 'M505.204,165.376l-1.932,1.030l-1.416,-1.544l-4.248,-1.159l-1.288,-1.674l-2.060,-1.158l-1.286,0.385l-0.902,-1.415l-0.127,-1.159l-1.546,-2.059l1.030,-1.030l-0.259,-1.673l0.387,-1.546l-0.256,-1.158l0.513,-2.318l-0.126,-1.158l-0.903,-2.446l1.287,-0.643l0.257,-1.031l-0.257,-1.158l1.803,-1.029l0.900,-0.902l1.288,-0.772l0.129,-2.060l3.217,0.901l1.030,-0.257l2.320,0.514l3.602,1.159l1.160,2.446l2.446,0.515l3.860,1.158l2.833,1.288l1.286,-0.644l1.288,-1.287l-0.643,-2.059l0.900,-1.288l1.932,-1.288l1.801,-0.385l3.734,0.514l0.901,1.287l1.029,0l0.773,0.516l2.703,0.257l0.645,0.901l-0.903,1.287l0.387,1.159l-0.772,1.673l0.901,2.189l0,9.526l0,9.912l0,5.408l-2.832,0l0,1.415l-11.069,-5.407l-10.815,-5.149l2.702,-1.416z'</body><body package="Roassal2-Shapes">Lithuania	^ 'M526.442,80.67l-0.128,-0.772l0.259,-0.643l-1.289,-0.515l-2.702,-0.386l-0.644,-2.317l3.088,-0.773l4.506,0.130l2.705,-0.259l0.385,0.515l1.416,0.257l2.574,1.288l0.258,1.159l-2.189,0.901l-0.643,1.545l-2.961,0.901l-2.574,0l-0.644,-0.772l1.417,0.259z'</body><body package="Roassal2-Shapes">Luxembourg	^ 'M481.516,91.999l0.516,0.515l-0.129,1.159l-0.773,0.129l-0.643,-0.259l0.385,-1.544l-0.644,0z'</body><body package="Roassal2-Shapes">Madagascar	^ 'M598.66,260.508l0.772,1.160l0.643,1.801l0.385,3.219l0.775,1.287l-0.257,1.287l-0.518,0.773l-0.898,-1.545l-0.516,0.772l0.516,2.060l-0.258,1.158l-0.774,0.516l-0.129,2.316l-1.028,3.219l-1.417,3.604l-1.545,5.149l-1.031,3.734l-1.285,3.089l-2.188,0.644l-2.318,1.157l-1.544,-0.641l-2.189,-1.031l-0.773,-1.417l-0.129,-2.317l-0.900,-2.188l-0.258,-1.931l0.387,-1.930l1.287,-0.515l0,-0.901l1.288,-1.932l0.257,-1.802l-0.645,-1.285l-0.514,-1.676l-0.128,-2.446l0.900,-1.544l0.387,-1.673l1.287,-0.130l1.544,-0.514l0.901,-0.516l1.289,0l1.544,-1.544l2.189,-1.674l0.771,-1.415l-0.387,-1.159l1.159,0.386l1.545,-1.931l0,-1.544l0.901,-1.288l-0.902,-1.158z'</body><body package="Roassal2-Shapes">Malawi	^ 'M558.368,258.062l-0.773,1.932l0.773,3.605l0.901,-0.130l1.030,0.902l1.030,1.930l0.258,3.476l-1.160,0.645l-0.772,1.801l-1.802,-1.674l-0.258,-1.931l0.645,-1.158l-0.130,-1.159l-1.159,-0.644l-0.643,0.259l-1.545,-1.289l-1.416,-0.770l0.772,-2.447l0.773,-0.902l-0.516,-2.317l0.645,-2.189l0.386,-0.644l-0.644,-2.315l-1.287,-1.160l2.704,0.514l1.415,1.933l-0.773,-3.732z'</body><body package="Roassal2-Shapes">Malaysia	^ 'M740.39,210.174l0.642,0.258l1.545,1.673l1.160,1.803l0.129,1.803l-0.258,1.287l0.258,0.900l0.129,1.545l1.029,0.772l1.030,2.318l0,0.901l-1.932,0.257l-2.574,-2.059l-3.217,-2.060l-0.260,-1.416l-1.543,-1.802l-0.386,-2.188l-1.032,-1.546l0.387,-1.931l-0.643,-1.158l0.516,-0.385l2.188,1.157l0.129,1.287l1.802,-0.257l-0.901,1.159zM760.601,221.632l2.058,0.901l2.061,-0.514l0.513,-2.318l1.159,-0.515l3.218,-0.515l1.932,-2.189l1.287,-1.673l1.287,1.417l0.516,-0.902l1.285,0l0.260,-1.674l0.127,-1.287l2.060,-1.931l1.287,-2.059l1.159,0l1.287,1.286l0.129,1.159l1.802,0.772l2.319,0.773l-0.258,1.158l-1.803,0.129l0.514,1.288l-2.059,0.901l-2.316,-0.515l-3.090,0l-0.900,3.089l-1.032,0.901l-1.414,3.862l-2.189,0.515l-2.574,-0.772l-1.289,0.257l-1.545,1.417l-1.672,-0.257l-1.803,0.514l-1.801,-1.416l0.515,1.802z'</body><body package="Roassal2-Shapes">Mali	^ 'M432.471,187.646l0.902,-0.514l0.385,-1.674l0.902,0l1.930,0.772l1.416,-0.514l1.160,0.129l0.385,-0.644l10.814,0l0.514,-1.931l-0.385,-0.257l-1.288,-11.587l-1.416,-11.714l4.119,0l9.140,5.922l9.139,5.792l0.645,1.288l1.672,0.772l1.159,0.387l0.128,1.801l2.961,-0.257l0,6.179l-1.543,1.802l-0.130,1.674l-2.445,0.386l-3.735,0.258l-0.900,0.901l-1.802,0.129l-1.673,0l-0.644,-0.516l-1.545,0.387l-2.446,1.158l-0.514,0.774l-2.189,1.285l-0.257,0.645l-1.159,0.514l-1.287,-0.257l-0.773,0.644l-0.385,1.802l-2.189,2.189l0.128,0.900l-0.771,1.159l0.128,1.545l-1.030,0.515l-0.643,0.257l-0.387,-1.157l-0.772,0.385l-0.516,-0.129l-0.514,0.772l-2.059,0l-0.772,-0.386l-0.387,0.258l-0.772,-0.772l0.128,-0.773l-0.257,-0.386l-0.644,0.257l0.128,-0.900l0.516,-0.645l-1.030,-1.158l-0.386,-0.644l-0.644,-0.643l-0.515,-0.129l-0.643,0.385l-0.773,0.387l-0.772,0.644l-1.159,-0.258l-0.772,-0.643l-0.386,-0.130l-0.772,0.387l-0.387,0l-0.128,-1.030l0.128,-0.772l-0.257,-1.030l-1.030,-0.772l-0.515,-1.545l0.129,1.674z'</body><body package="Roassal2-Shapes">Mauritania	^ 'M432.471,187.646l-1.802,-1.930l-1.674,-1.931l-1.801,-0.772l-1.288,-0.773l-1.416,0l-1.287,0.643l-1.416,-0.257l-0.901,0.901l-0.258,-1.416l0.773,-1.416l0.386,-2.445l-0.386,-2.704l-0.258,-1.417l0.258,-1.287l-0.773,-1.287l-1.416,-1.158l0.643,-0.901l10.557,0l-0.515,-3.862l0.644,-1.417l2.574,-0.257l-0.129,-6.823l8.883,0.129l0,-4.120l10.040,6.566l-4.119,0l1.416,11.714l1.288,11.587l0.385,0.257l-0.514,1.931l-10.814,0l-0.385,0.644l-1.160,-0.129l-1.416,0.514l-1.930,-0.772l-0.902,0l-0.385,1.674l0.902,-0.514z'</body><body package="Roassal2-Shapes">Mexico	^ 'M203.592,157.266l-1.030,2.446l-0.515,1.931l-0.257,3.605l-0.257,1.287l0.514,1.416l0.773,1.287l0.644,2.188l1.802,1.931l0.515,1.545l1.158,1.416l2.832,0.643l1.029,1.159l2.447,-0.772l2.060,-0.258l1.930,-0.513l1.803,-0.388l1.672,-1.158l0.644,-1.545l0.258,-2.317l0.386,-0.772l1.803,-0.644l2.961,-0.644l2.316,0l1.674,-0.129l0.644,0.516l-0.129,1.287l-1.417,1.674l-0.643,1.544l0.515,0.515l-0.386,1.158l-0.772,2.060l-0.644,-0.644l-0.515,0l-0.515,0.130l-1.030,1.544l-0.515,-0.258l-0.257,0.129l0,0.387l-2.446,0l-2.575,0l0,1.416l-1.158,0l0.901,0.901l1.030,0.643l0.387,0.644l0.385,0.128l-0.128,0.903l-3.347,0l-1.416,2.188l0.385,0.514l-0.257,0.643l-0.128,0.773l-2.961,-2.832l-1.416,-0.901l-2.189,-0.772l-1.544,0.257l-2.189,1.030l-1.287,0.258l-1.930,-0.773l-2.060,-0.515l-2.446,-1.158l-2.061,-0.387l-3.088,-1.287l-2.189,-1.286l-0.644,-0.645l-1.545,-0.258l-2.702,-0.772l-1.159,-1.287l-2.961,-1.545l-1.288,-1.673l-0.644,-1.287l0.902,-0.258l-0.258,-0.772l0.644,-0.772l0,-0.902l-0.901,-1.158l-0.257,-1.159l-0.902,-1.287l-2.445,-2.704l-2.703,-2.059l-1.288,-1.674l-2.317,-1.159l-0.515,-0.643l0.386,-1.674l-1.287,-0.643l-1.673,-1.287l-0.644,-1.802l-1.416,-0.258l-1.545,-1.416l-1.287,-1.288l-0.129,-0.901l-1.416,-2.060l-1.029,-2.059l0.128,-1.030l-1.931,-1.030l-0.901,0.129l-1.544,-0.773l-0.515,1.159l0.515,1.288l0.257,1.930l0.901,1.160l1.931,1.801l0.515,0.644l0.386,0.257l0.386,0.902l0.515,0l0.515,1.673l0.773,0.644l0.643,1.030l1.673,1.415l0.902,2.446l0.772,1.159l0.773,1.287l0.128,1.416l1.287,0.129l1.030,1.158l1.029,1.288l-0.128,0.386l-1.029,1.030l-0.516,0l-0.772,-1.673l-1.673,-1.546l-1.931,-1.286l-1.416,-0.644l0.129,-1.931l-0.515,-1.545l-1.288,-0.773l-1.802,-1.287l-0.386,0.386l-0.644,-0.643l-1.673,-0.643l-1.545,-1.675l0.129,-0.128l1.158,0.128l1.030,-1.029l0,-1.159l-2.059,-1.931l-1.545,-0.772l-1.031,-1.674l-0.900,-1.802l-1.287,-2.189l-1.159,-2.317l3.090,-0.256l3.475,-0.259l-0.258,0.515l3.992,1.288l6.178,1.931l5.407,0l2.060,0l0.129,-1.158l4.633,0l0.902,0.900l1.416,0.901l1.545,1.159l0.900,1.416l0.772,1.545l1.288,0.772l2.316,0.772l1.674,-2.058l2.189,-0.130l1.930,1.159l1.288,1.802l1.030,1.545l1.545,1.545l0.515,1.931l0.772,1.287l2.188,0.773l1.931,0.643l-1.030,0.129z'</body><body package="Roassal2-Shapes">Moldova	^ 'M536.998,97.02l0.644,-0.386l1.675,-0.259l2.059,0.903l1.029,0.128l1.287,0.644l-0.257,0.901l1.030,0.515l0.386,1.030l0.902,0.772l-0.131,0.386l0.517,0.258l-0.773,0.257l-1.545,-0.129l-0.258,-0.386l-0.513,0.258l0.129,0.386l-0.774,0.901l-0.385,0.901l-0.773,0.386l-0.387,-1.287l0.257,-1.159l-0.128,-1.158l-1.545,-1.674l-0.902,-1.029l-0.770,-0.901l0.774,0.258z'</body><body package="Roassal2-Shapes">Mongolia	^ 'M701.642,94.188l2.832,-0.515l5.148,-2.317l4.121,-1.287l2.317,0.901l2.832,0l1.802,1.287l2.703,0.129l3.862,0.644l2.574,-1.931l-1.029,-1.545l2.703,-2.832l3.090,1.158l2.445,0.257l3.090,0.773l0.515,1.931l3.862,1.158l2.574,-0.515l3.348,-0.257l2.705,0.257l2.701,1.287l1.674,1.417l2.445,0l3.348,0.386l2.574,-0.644l3.476,-0.387l3.991,-1.930l1.545,0.258l1.414,0.900l3.218,-0.128l-1.287,1.931l-1.931,2.704l0.771,1.158l1.420,-0.386l2.701,0.386l2.059,-0.901l2.189,0.772l2.448,1.931l-0.258,0.902l-2.190,-0.258l-3.861,0.386l-1.932,0.772l-1.931,1.803l-4.119,1.029l-2.704,1.417l-2.832,-0.516l-1.416,-0.257l-1.416,1.674l0.774,1.030l0.515,0.900l-1.931,0.902l-1.932,1.416l-3.088,1.030l-4.121,0.128l-4.375,0.902l-3.090,1.416l-1.160,-0.773l-3.347,0l-3.862,-1.673l-2.701,-0.386l-3.605,0.386l-5.536,-0.644l-2.962,0l-1.672,-1.545l-1.159,-2.446l-1.673,-0.386l-3.217,-1.674l-3.606,-0.385l-3.216,-0.387l-1.032,-1.158l1.032,-3.219l-1.803,-2.188l-3.863,-0.901l-2.317,-1.545l0.644,1.802z'</body><body package="Roassal2-Shapes">Morocco	^ 'M461.436,138.472l0.772,0.514l-0.515,1.030l-3.476,0.515l-1.287,1.030l-1.545,0.128l-0.128,2.061l-3.090,1.029l-1.030,1.417l-2.188,0.644l-2.703,0.514l-4.377,1.931l0,3.218l-0.387,0l0,1.417l-1.544,0.128l-0.901,0.515l-1.288,0l-0.900,-0.257l-2.319,0.257l-0.900,2.060l-0.773,0.257l-1.287,3.347l-3.733,2.961l-0.901,3.733l-1.159,1.159l-0.257,1.029l-6.050,0.129l-0.129,0l0.129,-1.158l1.030,-0.772l0.901,-1.416l-0.129,-0.902l0.901,-1.930l1.545,-1.674l0.901,-0.515l0.644,-1.546l0.128,-1.415l0.901,-1.673l1.802,-1.031l1.803,-2.703l1.287,-1.030l2.574,-0.386l2.060,-1.802l1.416,-0.644l2.189,-2.317l-0.644,-3.347l1.031,-2.317l0.384,-1.416l1.675,-1.803l2.703,-1.287l2.059,-1.029l1.802,-2.833l0.773,-1.673l2.059,0l1.545,1.158l2.575,-0.128l2.832,0.515l1.159,0.128l1.030,1.674l0.128,1.674l-0.902,-2.832z'</body><body package="Roassal2-Shapes">Mozambique	^ 'M558.368,258.062l1.931,-0.256l3.347,0.771l0.644,-0.386l1.930,0l0.902,-0.900l1.672,0.128l2.961,-1.030l2.060,-1.674l0.516,1.287l-0.129,2.705l0.257,2.316l0.128,4.248l0.516,1.289l-0.772,1.930l-1.160,1.803l-1.673,1.673l-2.446,1.030l-3.090,1.416l-2.961,2.830l-1.029,0.517l-1.930,1.930l-1.160,0.643l-0.128,1.803l1.288,2.060l0.514,1.674l-0.129,1.415l0.644,-0.770l-0.129,2.573l-0.386,1.288l0.643,0.514l-0.387,1.030l-1.157,1.030l-2.187,0.901l-3.349,1.417l-1.159,1.030l0.259,1.158l0.643,0.127l-0.130,1.418l-2.058,0l-0.259,-1.158l-0.385,-1.289l-0.258,-0.901l0.514,-3.090l-0.771,-1.801l-1.287,-3.863l2.832,-3.089l0.773,-1.930l0.386,-0.258l0.257,-1.545l-0.385,-0.773l0.128,-2.061l0.513,-1.801l0,-3.475l-1.415,-0.774l-1.287,-0.254l-0.515,-0.645l-1.287,-0.645l-2.317,0.129l-0.129,-1.029l-0.258,-1.932l8.239,-2.189l1.545,1.289l0.643,-0.259l1.159,0.644l0.130,1.159l-0.645,1.158l0.258,1.931l1.802,1.674l0.772,-1.801l1.160,-0.645l-0.258,-3.476l-1.030,-1.930l-1.030,-0.902l-0.901,0.130l-0.773,-3.605l-0.773,1.932z'</body><body package="Roassal2-Shapes">MyanmarBurma	^ 'M733.437,172.585l-1.672,1.159l-1.803,0.129l-1.287,2.960l-1.158,0.515l1.287,2.317l1.802,1.931l1.030,1.802l-0.901,2.318l-1.029,0.514l0.643,1.416l1.802,2.060l0.387,1.545l-0.129,1.287l1.158,2.447l-1.545,2.445l-1.287,2.832l-0.257,-2.059l0.773,-2.060l-0.902,-1.544l0.257,-2.962l-1.158,-1.416l-0.773,-3.219l-0.516,-3.345l-1.158,-2.318l-1.803,1.415l-3.088,1.932l-1.416,-0.257l-1.673,-0.644l0.902,-3.347l-0.647,-2.575l-2.058,-3.090l0.386,-0.900l-1.671,-0.387l-1.934,-2.188l-0.127,-2.189l0.900,0.387l0.129,-1.932l1.287,-0.643l-0.255,-1.159l0.642,-0.900l0,-2.704l2.188,0.515l1.160,-2.189l0.127,-1.287l1.545,-2.317l-0.127,-1.545l3.474,-1.802l1.930,0.515l-0.256,-1.674l1.030,-0.515l-0.258,-1.029l1.545,-0.130l0.900,1.545l1.289,0.644l0,2.060l-0.131,2.188l-2.445,2.318l-0.387,3.089l2.832,-0.386l0.645,2.446l1.674,0.515l-0.772,2.317l2.059,1.030l1.160,0.387l1.930,-0.773l0.128,1.158l-2.318,1.802l-0.516,0.902l1.544,-0.643z'</body><body package="Roassal2-Shapes">Namibia	^ 'M509.322,304.019l-2.059,-2.059l-1.030,-2.060l-0.644,-2.575l-0.645,-1.930l-0.900,-4.120l0,-3.216l-0.387,-1.545l-1.029,-1.032l-1.416,-2.317l-1.414,-3.218l-0.647,-1.674l-2.187,-2.575l-0.128,-2.058l1.288,-0.516l1.674,-0.515l1.672,0.128l1.674,1.159l0.384,-0.128l10.944,-0.128l1.801,1.287l6.566,0.385l4.892,-1.158l2.187,-0.644l1.803,0.258l1.030,0.513l0,0.259l-1.416,0.645l-0.901,0l-1.674,1.028l-1.029,-1.158l-4.119,1.030l-2.060,0l-0.129,9.654l-2.574,0.130l0,7.852l0,9.912l-2.446,1.416l-1.418,0.129l-1.673,-0.514l-1.288,-0.129l-0.383,-1.158l-1.033,-0.773l1.286,-1.415z'</body><body package="Roassal2-Shapes">Nepal	^ 'M702.673,151.859l-0.258,1.159l0.385,1.674l-0.385,1.158l-2.189,0l-3.219,-0.644l-2.059,-0.257l-1.674,-1.287l-3.603,-0.386l-3.604,-1.545l-2.447,-1.287l-2.703,-1.031l1.160,-2.573l1.672,-1.160l1.158,-0.643l2.061,0.772l2.703,1.802l1.545,0.386l0.900,1.288l2.188,0.515l2.189,1.158l2.959,0.644l-3.221,-0.257z'</body><body package="Roassal2-Shapes">Netherlands	^ 'M481.646,82.859l2.188,0l0.515,0.902l-0.644,2.574l-0.773,0.901l-1.544,0l0.386,2.833l-1.416,-0.644l-1.673,-1.158l-2.574,0.643l-1.932,-0.258l1.417,-0.772l2.317,-3.991l-3.733,1.030z'</body><body package="Roassal2-Shapes">NewCaledonia	^ 'M911.856,283.809l2.188,1.673l1.416,1.159l-1.029,0.643l-1.545,-0.643l-1.932,-1.287l-1.672,-1.416l-1.803,-1.932l-0.386,-0.901l1.158,0.129l1.545,0.901l1.158,0.902l-0.902,-0.772z'</body><body package="Roassal2-Shapes">NewZealand	^ 'M941.72,334.914l-1.030,1.417l-1.287,1.931l-2.058,1.030l-0.514,-0.772l-1.160,-0.386l1.545,-2.189l-0.774,-1.416l-2.961,-1.159l0.131,-0.901l1.930,-1.030l0.387,-2.059l-0.129,-1.674l-1.029,-1.803l0,-0.514l-1.290,-1.158l-2.058,-2.317l-1.158,-1.932l1.027,-0.256l1.418,1.544l2.187,0.773l0.774,2.315l1.930,2.834l0,-1.803l1.289,0.773l0.384,1.931l2.190,0.901l1.803,0.257l1.545,-1.030l1.285,0.258l-0.645,2.446l-0.771,1.544l-2.059,0l-0.771,0.773l0.255,1.158l0.386,-0.514zM922.282,344.312l2.319,-1.416l1.671,-1.416l1.161,-1.931l1.029,-0.772l0.387,-1.416l1.929,-1.287l0.514,1.158l0.645,1.030l1.933,-1.030l0.770,1.160l0,1.157l-1.028,1.160l-1.802,2.059l-1.289,1.029l1.029,1.288l-2.188,0l-2.316,1.030l-0.645,1.803l-1.545,2.703l-2.060,1.286l-1.414,0.773l-2.445,-0.128l-1.805,-0.901l-2.830,-0.130l-0.516,-1.030l1.416,-1.930l3.477,-2.704l1.672,-0.515l-1.931,1.030z'</body><body package="Roassal2-Shapes">Nicaragua	^ 'M234.359,197.045l-0.902,-0.774l-1.287,-1.158l-0.643,-0.901l-1.159,-0.773l-1.288,-1.287l0.258,-0.386l0.514,0.386l0.129,-0.129l0.902,-0.128l0.257,-0.644l0.387,0l0,-1.288l0.643,-0.129l0.515,0l0.643,-0.643l0.773,0.515l0.258,-0.386l0.515,-0.258l0.900,-0.771l0.129,-0.516l0.257,0l0.258,-0.643l0.258,-0.130l0.514,0.517l0.516,0.127l0.643,-0.385l0.643,0l0.902,-0.386l0.386,-0.386l0.901,0.128l-0.129,0.258l-0.129,0.514l0.258,1.030l-0.643,0.901l-0.258,1.159l-0.129,1.158l0.129,0.644l0.128,1.287l-0.514,0.258l-0.129,1.159l0.129,0.644l-0.516,0.771l0.130,0.645l0.386,0.514l-0.644,0.514l-0.772,-0.128l-0.515,-0.644l-0.773,-0.128l-0.644,0.257l-1.801,-0.644l0.386,-0.259z'</body><body package="Roassal2-Shapes">Niger	^ 'M471.091,194.855l0,-1.930l-3.091,-0.515l-0.128,-1.417l-1.545,-1.673l-0.258,-1.287l0.129,-1.287l1.802,-0.129l0.900,-0.901l3.735,-0.258l2.445,-0.386l0.130,-1.674l1.543,-1.802l0,-6.179l3.734,-1.288l7.852,-5.276l9.269,-5.150l4.248,1.159l1.416,1.544l1.932,-1.030l0.643,4.249l1.029,0.643l0.129,0.901l1.030,0.901l-0.514,1.159l-1.030,5.406l-0.130,3.605l-3.475,2.446l-1.158,3.605l1.158,1.029l0,1.673l1.674,0.130l-0.258,1.158l-0.774,0.257l-0.128,0.773l-0.514,0.128l-1.803,-2.960l-0.644,-0.129l-2.058,1.545l-2.061,-0.772l-1.545,-0.258l-0.772,0.386l-1.545,0l-1.544,1.159l-1.416,0l-3.219,-1.417l-1.286,0.644l-1.416,0l-1.030,-1.030l-2.704,-1.029l-2.832,0.385l-0.772,0.516l-0.259,1.544l-0.770,1.159l-0.258,2.447l-2.059,-1.674l-0.901,0.127l0.901,-0.773z'</body><body package="Roassal2-Shapes">Nigeria	^ 'M488.082,214.166l-2.704,0.900l-1.029,-0.128l-1.031,0.644l-2.188,-0.129l-1.415,-1.674l-0.902,-1.931l-1.931,-1.802l-2.059,0.128l-2.318,0l0.130,-4.376l0,-1.802l0.386,-1.674l0.901,-0.773l1.288,-1.672l-0.258,-0.773l0.514,-1.031l-0.643,-1.673l0.129,-0.771l0.258,-2.447l0.770,-1.159l0.259,-1.544l0.772,-0.516l2.832,-0.385l2.704,1.029l1.030,1.030l1.416,0l1.286,-0.644l3.219,1.417l1.416,0l1.544,-1.159l1.545,0l0.772,-0.386l1.545,0.258l2.061,0.772l2.058,-1.545l0.644,0.129l1.803,2.960l0.514,-0.128l1.160,1.158l-0.387,0.386l-0.129,0.901l-2.188,2.189l-0.773,1.673l-0.387,1.417l-0.513,0.514l-0.645,1.931l-1.414,1.159l-0.387,1.288l-0.644,1.159l-0.257,1.029l-1.803,0.901l-1.546,-1.030l-1.029,0l-1.544,1.545l-0.771,0.128l-1.289,2.575l0.772,-1.932z'</body><body package="Roassal2-Shapes">NorthKorea	^ 'M817.112,112.726l0.385,0.514l-1.029,-0.129l-1.158,0.902l-0.774,0.901l0.131,1.930l-1.418,0.644l-0.516,0.386l-1.027,0.772l-1.803,0.516l-1.158,0.773l0,1.158l-0.387,0.257l1.157,0.386l1.418,1.159l-0.385,0.772l-1.033,0.129l-1.930,0.129l-1.029,1.158l-1.285,0l-0.131,0.257l-1.287,-0.514l-0.385,0.386l-0.774,0.257l-0.129,-0.514l-0.644,-0.258l-0.772,-0.386l0.772,-1.159l0.644,-0.385l-0.255,-0.387l0.640,-1.545l-0.127,-0.386l-1.545,-0.258l-1.289,-0.772l2.190,-1.673l2.961,-1.546l1.802,-1.930l1.287,0.900l2.319,0.130l-0.387,-1.417l4.248,-1.157l1.029,-1.546l-1.674,-1.546z'</body><body package="Roassal2-Shapes">Norway	^ 'M494.905,68.442l-1.802,-1.674l-5.279,3.090l-3.603,0.643l-3.734,-1.415l-0.902,-2.833l-0.900,-6.179l2.445,-1.802l7.080,-2.189l5.407,-2.832l4.892,-3.733l6.435,-5.278l4.508,-1.931l7.465,-3.476l5.922,-1.158l4.377,0.129l4.119,-2.188l4.893,0.128l4.889,-0.515l8.368,1.931l-3.474,0.773l2.961,1.672l-4.507,1.031l-2.189,0.257l1.159,-1.803l-3.476,-1.157l-4.247,0.900l-1.289,2.060l-2.572,1.159l-2.832,-0.644l-3.606,0.129l-2.961,-1.416l-1.545,0.643l-1.673,0.129l-0.513,1.803l-5.022,-0.387l-0.644,1.417l-2.702,0l-1.674,1.931l-2.703,2.960l-4.248,3.862l1.031,0.901l-0.903,1.030l-2.705,0l-1.800,2.446l0.127,3.605l1.803,1.415l-0.900,3.090l-2.318,1.931l1.158,-1.545z'</body><body package="Roassal2-Shapes">Oman	^ 'M617.197,159.841l1.157,1.802l1.545,1.030l1.932,0.387l1.674,0.385l1.158,1.545l0.772,0.902l0.902,0.385l0,0.644l-1.031,1.545l-0.387,0.772l-1.158,0.902l-1.029,1.802l-1.157,-0.130l-0.517,0.645l-0.514,1.416l0.385,1.673l-0.257,0.387l-1.286,0l-1.675,1.028l-0.257,1.289l-0.642,0.514l-1.675,0l-1.031,0.773l0,1.029l-1.287,0.773l-1.416,-0.257l-1.802,0.900l-1.286,0.129l-0.900,-1.930l-2.061,-4.378l7.981,-2.702l1.802,-5.408l-1.159,-1.931l0,-1.030l0.773,-1.159l0.129,-1.029l1.159,-0.515l-0.517,-0.386l0.258,-1.802l-1.417,0zM616.294,156.752l0.773,-0.902l0.387,0.257l-0.257,1.159l-0.385,0.386l0.518,0.900z'</body><body package="Roassal2-Shapes">Pakistan	^ 'M667.659,126.886l2.059,1.287l0.773,2.059l4.375,1.159l-2.572,2.189l-2.961,0.386l-4.121,-0.643l-1.287,1.157l0.900,2.447l1.031,1.802l2.059,1.287l-2.187,1.545l0,1.931l-2.575,2.704l-1.802,2.702l-2.704,2.833l-3.218,-0.129l-2.961,2.832l1.802,1.159l0.258,2.059l1.545,1.417l0.514,2.317l-5.922,0l-1.801,1.802l-1.931,-0.772l-0.774,-1.932l-2.187,-2.059l-4.891,0.514l-4.377,0.130l-3.863,0.386l1.030,-3.218l3.992,-1.288l-0.259,-1.287l-1.288,-0.386l-0.128,-2.446l-2.574,-1.159l-1.031,-1.674l-1.414,-1.415l4.504,1.415l2.704,-0.386l1.674,0.386l0.514,-0.643l1.931,0.257l3.476,-1.159l0.129,-2.317l1.417,-1.544l2.058,0l0.257,-0.644l2.061,-0.386l1.029,0.257l1.031,-0.772l-0.129,-1.674l1.158,-1.545l1.673,-0.772l-1.030,-1.673l2.575,0l0.773,-0.902l-0.129,-1.029l1.287,-1.159l-0.257,-1.416l-0.645,-1.029l1.545,-1.287l2.833,-0.517l3.090,-0.256l1.416,-0.516l-1.545,0.385z'</body><body package="Roassal2-Shapes">Palestine	^ 'M560.942,139.759l0,1.544l-0.386,0.902l-1.287,0.257l0.128,-0.644l0.774,-0.385l-0.774,-0.258l0.645,-1.803l-0.900,-0.387z'</body><body package="Roassal2-Shapes">Panama	^ 'M255.47,207.471l-0.902,-0.772l-0.643,-1.416l0.643,-0.773l-0.643,-0.127l-0.514,-0.903l-1.288,-0.771l-1.159,0.257l-0.644,0.900l-1.029,0.644l-0.644,0.129l-0.257,0.515l1.287,1.545l-0.643,0.258l-0.387,0.385l-1.287,0.129l-0.515,-1.544l-0.387,0.386l-0.772,-0.129l-0.643,-1.030l-1.030,-0.258l-0.773,-0.257l-1.158,0l0,0.644l-0.387,-0.515l0.130,-0.515l0.257,-0.515l-0.128,-0.515l0.385,-0.257l-0.514,-0.387l0,-1.157l1.029,-0.260l1.030,1.031l-0.129,0.516l1.159,0.129l0.129,-0.129l0.772,0.643l1.416,-0.258l1.031,-0.643l1.673,-0.515l0.900,-0.901l1.545,0.257l-0.129,0.257l1.545,0l1.159,0.516l0.900,0.773l1.031,0.771l-0.386,0.387l0.643,1.544l-0.515,0.901l-0.900,-0.257l0.258,-1.287z'</body><body package="Roassal2-Shapes">PapuaNewGuinea	^ 'M845.175,242.742l-0.129,-8.752l4.635,1.803l5.019,1.543l1.932,1.417l1.416,1.417l0.385,1.544l4.505,1.673l0.645,1.416l-2.445,0.258l0.642,1.802l2.317,1.802l1.802,2.832l1.545,-0.128l-0.129,1.287l2.059,0.387l-0.771,0.514l2.832,1.158l-0.258,0.773l-1.803,0.129l-0.641,-0.644l-2.320,-0.258l-2.701,-0.385l-2.061,-1.803l-1.545,-1.416l-1.414,-2.446l-3.478,-1.159l-2.315,0.772l-1.673,0.902l0.386,2.059l-2.189,0.902l-1.416,-0.515l-2.832,-0.129l0,8.755zM876.454,236.822l1.031,0.901l0.258,1.417l-0.771,0.641l-0.518,-1.544l-0.642,-1.028l-1.288,-0.902l-1.545,-1.159l-1.931,-0.773l0.773,-0.643l1.416,0.773l1.030,0.515l1.031,0.642l-1.156,-1.160zM872.851,242.742l-1.545,0.645l-1.287,0.644l-1.545,0l-2.188,-0.772l-1.545,-0.773l0.256,-0.901l2.447,0.388l1.416,-0.131l0.387,-1.287l0.385,-0.127l0.260,1.414l1.543,-0.128l0.773,-0.902l1.543,-1.031l-0.256,-1.544l1.543,-0.128l0.516,0.515l0,1.416l-0.901,1.674l-1.416,0.259l0.386,-0.769zM882.118,241.328l0.776,0.645l1.414,1.673l1.158,0.900l-0.258,0.771l-0.771,0.259l-1.159,-1.030l-1.287,-1.673l-0.515,-2.061l0.386,-0.257l-0.256,-0.773z'</body><body package="Roassal2-Shapes">Paraguay	^ 'M296.405,286.898l1.030,-3.219l0,-1.414l1.416,-2.447l4.634,-0.772l2.446,0.130l2.575,1.285l0,0.902l0.772,1.415l-0.128,3.736l2.831,0.513l1.160,-0.513l1.801,0.642l0.516,0.903l0.256,2.443l0.259,1.031l1.028,0.129l1.031,-0.516l0.901,0.516l0,1.544l-0.386,1.545l-0.515,1.546l-0.386,2.445l-2.446,2.059l-2.189,0.387l-2.961,-0.387l-2.702,-0.772l2.574,-4.121l-0.386,-1.157l-2.703,-1.030l-3.348,-2.059l-2.188,-0.387l4.892,4.377z'</body><body package="Roassal2-Shapes">Peru	^ 'M277.74,274.281l-0.644,1.417l-1.415,0.644l-2.704,-1.543l-0.258,-1.031l-5.278,-2.705l-4.891,-2.959l-2.059,-1.674l-1.159,-2.188l0.515,-0.773l-2.318,-3.605l-2.703,-4.891l-2.446,-5.407l-1.158,-1.288l-0.902,-1.930l-2.058,-1.802l-1.932,-1.028l0.901,-1.161l-1.287,-2.576l0.772,-1.929l2.189,-1.673l0.386,1.030l-0.773,0.643l0,1.029l1.159,-0.257l1.030,0.388l1.159,1.286l1.545,-1.030l0.514,-1.802l1.673,-2.446l3.219,-1.030l2.961,-2.832l0.772,-1.674l-0.386,-2.059l0.772,-0.258l1.802,1.288l0.772,1.287l1.288,0.644l1.544,2.832l2.060,0.257l1.416,-0.644l1.030,0.516l1.673,-0.259l2.060,1.287l-1.802,2.704l0.772,0l1.416,1.417l-2.446,-0.129l-0.386,0.514l-2.188,0.515l-3.089,1.802l-0.129,1.288l-0.772,0.901l0.257,1.416l-1.545,0.773l0,1.158l-0.772,0.516l1.158,2.445l1.546,1.674l-0.644,1.158l1.801,0.129l1.030,1.416l2.317,0l2.317,-1.545l-0.256,4.119l1.287,0.257l1.416,-0.384l2.445,4.248l-0.644,0.901l-0.128,1.931l0,2.317l-1.159,1.287l0.515,1.029l-0.643,0.901l1.158,2.318l1.673,-2.830z'</body><body package="Roassal2-Shapes">Philippines	^ 'M790.722,192.797l-1.416,-2.061l2.318,0l1.031,1.030l-0.775,2.316l1.158,1.285zM795.485,200.134l0.645,-0.773l0.256,-1.673l1.545,-0.129l-0.385,1.802l1.930,-2.703l-0.258,2.574l-0.903,0.902l-0.900,1.802l-0.900,0.773l-1.545,-1.932l-0.515,0.643zM805.655,204.253l0.258,1.802l0.256,1.545l-1.029,2.446l-0.901,-2.704l-1.289,1.287l0.903,2.060l-0.774,1.288l-3.217,-1.545l-0.771,-2.059l0.898,-1.287l-1.801,-1.159l-0.773,1.030l-1.285,-0.129l-2.061,1.545l-0.386,-0.773l1.031,-2.317l1.672,-0.773l1.545,-0.901l0.902,1.159l2.061,-0.772l0.384,-1.158l1.930,-0.129l-0.129,-2.061l2.192,1.288l0.255,1.416l-0.129,-0.901zM784.415,201.936l-3.477,2.447l1.288,-1.804l1.929,-1.673l1.676,-1.931l1.285,-2.575l0.518,2.190l-1.803,1.415l1.416,-1.931zM794.841,177.863l-0.514,1.159l0.901,1.931l-0.643,2.188l-1.545,0.901l-0.516,2.188l0.645,2.189l1.416,0.257l1.158,-0.257l3.348,1.415l-0.258,1.417l0.900,0.772l-0.257,1.159l-2.061,-1.287l-1.029,-1.416l-0.643,1.031l-1.803,-1.676l-2.445,0.387l-1.287,-0.515l0.127,-1.157l0.775,-0.645l-0.775,-0.643l-0.256,0.901l-1.416,-1.545l-0.387,-1.159l-0.127,-2.575l1.157,0.902l0.257,-4.248l0.901,-2.447l1.545,0l1.674,0.773l0.902,-0.643l-0.256,-0.643zM793.94,196.271l-0.386,-1.286l1.674,0.771l1.673,0l0,1.160l-1.287,1.157l-1.674,0.773l-0.128,-1.287l-0.128,1.288zM803.337,194.212l0.773,2.961l-2.060,-0.644l0,0.901l0.644,1.674l-1.287,0.514l-0.129,-1.802l-0.773,-0.128l-0.385,-1.674l1.545,0.257l0,-1.029l-1.676,-2.060l2.576,0l-0.772,-1.030z'</body><body package="Roassal2-Shapes">Poland	^ 'M505.718,89.295l-1.158,-1.672l0.257,-1.030l-0.644,-1.417l-1.029,-0.901l0.770,-0.773l-0.642,-1.287l1.802,-0.901l4.248,-1.158l3.347,-0.901l2.703,0.387l0.258,0.643l2.574,0.129l3.348,0.256l4.890,0l1.417,0.259l0.644,0.772l0.129,1.288l0.771,1.029l0,1.029l-1.672,0.516l0.772,1.287l0.129,1.159l1.286,2.317l-0.257,0.773l-1.287,0.385l-2.447,2.189l0.646,1.287l-0.515,-0.257l-2.577,-1.030l-1.929,0.386l-1.289,-0.257l-1.672,0.644l-1.289,-1.030l-1.158,0.386l-0.127,-0.129l-1.289,-1.416l-1.930,-0.129l-0.257,-0.772l-1.802,-0.386l-0.517,0.773l-1.414,-0.644l0.129,-0.645l-1.932,-0.256l1.287,0.903z'</body><body package="Roassal2-Shapes">Portugal	^ 'M440.838,114.141l1.031,-0.643l1.158,-0.387l0.643,1.287l1.545,0l0.514,-0.385l1.545,0.128l0.773,1.416l-1.287,0.643l0,2.189l-0.514,0.387l0,1.159l-1.160,0.256l1.030,1.674l-0.772,1.674l0.902,0.900l-0.258,0.644l-1.030,1.030l0.257,0.902l-1.158,0.772l-1.416,-0.387l-1.416,0.258l0.386,-2.059l-0.129,-1.674l-1.288,-0.258l-0.643,-1.030l0.259,-1.802l1.028,-0.900l0.259,-1.159l0.514,-1.545l0,-1.159l-0.644,-1.030l0.129,0.901z'</body><body package="Roassal2-Shapes">PuertoRico	^ 'M286.622,177.09l1.416,0.258l0.516,0.515l-0.644,0.643l-2.060,0l-1.545,0.129l-0.258,-1.158l0.387,-0.387l-2.188,0z'</body><body package="Roassal2-Shapes">Qatar	^ 'M602.136,160.227l-0.257,-1.931l0.770,-1.416l0.772,-0.257l0.775,0.901l0,1.545l-0.517,1.544l-0.772,0.258l0.771,0.644z'</body><body package="Roassal2-Shapes">RepublicofMacedonia	^ 'M520.651,114.27l0.385,0l0.129,-0.515l1.545,-0.515l1.544,-0.257l1.288,0l1.287,0.900l0.258,1.674l-0.514,0.130l-0.515,0.513l-1.417,-0.128l-1.029,0.643l-1.804,0.258l-1.029,-0.643l-0.385,-1.160l-0.257,0.900z'</body><body package="Roassal2-Shapes">RepublicofTurkey	^ 'M535.712,120.707l2.961,-2.575l4.247,-0.129l1.030,-2.060l5.150,0.387l3.217,-1.803l3.219,-0.772l4.376,0l4.765,1.932l3.860,1.028l3.089,-0.515l2.317,0.259l3.218,-1.417l2.834,-0.128l2.702,1.416l0.386,0.901l-0.256,1.288l2.059,0.643l1.029,0.773l-1.802,0.772l0.773,3.089l-0.516,0.901l1.416,2.189l-1.287,0.385l-0.899,-0.643l-3.091,-0.385l-1.158,0.385l-3.090,0.515l-1.416,-0.128l-3.090,1.028l-2.317,0l-1.416,-0.514l-2.960,0.772l-0.902,-0.514l-0.129,1.545l-0.643,0.515l-0.772,0.643l-1.029,-1.287l1.029,-0.902l-1.674,0.129l-2.188,-0.514l-1.803,1.544l-4.118,0.257l-2.189,-1.416l-2.961,-0.128l-0.644,1.159l-1.802,0.256l-2.574,-1.415l-2.961,0l-1.545,-2.574l-2.058,-1.545l1.286,-2.060l1.673,1.287zM535.581,114.27l2.705,-0.772l2.317,0.257l0.386,1.030l2.317,0.902l-0.514,0.643l-3.219,0.257l-1.031,0.772l-2.314,1.417l-0.774,-1.159l0,-0.644l0.645,-0.258l0.771,-1.673l1.289,0.772z'</body><body package="Roassal2-Shapes">Romania	^ 'M526.442,97.921l1.159,-0.515l1.674,0.258l1.673,0l1.289,0.772l0.899,-0.515l1.931,-0.257l0.773,-0.644l1.158,0l0.774,0.258l0.770,0.901l0.902,1.029l1.545,1.674l0.128,1.158l-0.257,1.159l0.387,1.287l1.287,0.386l1.287,-0.386l1.158,0.515l0,0.645l-1.287,0.643l-0.772,-0.258l-0.773,3.219l-1.544,-0.258l-1.930,-1.030l-3.219,0.644l-1.287,0.644l-3.990,-0.130l-2.059,-0.386l-1.031,0.129l-0.773,-1.030l-0.513,-0.515l0.641,-0.386l-0.771,-0.386l-0.774,0.644l-1.543,-0.773l-0.257,-1.158l-1.674,-0.643l-0.258,-0.902l-1.416,-1.030l2.059,-0.515l1.673,-1.802l1.290,-1.803l-1.671,0.643z'</body><body package="Roassal2-Shapes">Russia	^ 'M950.089,36.129l-0.258,0l-0.516,-1.801l0.774,-0.772l0.127,-0.129l6.308,1.158l6.435,-1.544zM586.045,9.869l5.276,-0.515l4.121,0l0.514,0.773l1.545,-0.644l2.574,-0.515l3.990,0.644l-1.028,0.386l-3.605,0.385l-2.447,0.130l-0.384,0.514l-3.221,0.386l-2.830,-0.643l1.545,-0.772l6.050,0.129zM950.089,51.964l-3.992,1.802l2.574,3.219l-0.641,2.188l-5.539,-0.773l-7.336,1.674l-6.177,2.703l-4.764,2.703l-3.990,-1.673l-7.725,1.803l-6.693,0.128l-4.377,4.506l3.088,0.772l0,4.634l-3.475,1.545l0.645,1.803l-4.506,1.544l-1.159,3.219l-4.250,1.158l-0.513,1.931l-4.119,3.089l-1.674,-6.178l-1.545,-5.922l1.545,-4.249l2.060,-1.157l0.127,-1.287l3.864,-0.773l5.148,-3.219l4.506,-2.832l5.019,-2.060l2.061,-3.732l-3.219,0.128l-1.672,2.317l-6.695,2.446l-2.187,-3.089l-7.081,0.901l-6.693,4.247l1.803,1.288l-6.309,1.416l-10.041,-1.416l-11.715,0l-6.564,1.159l-8.369,5.278l-9.781,5.665l3.861,0.643l0.771,2.317l3.092,0.385l1.672,-1.545l2.961,0.387l3.475,2.060l0.515,3.089l-1.543,2.189l-0.902,2.575l-1.031,5.535l-4.120,3.862l-0.900,1.802l-3.603,3.219l-3.735,3.089l-1.674,1.545l-3.603,1.674l-1.674,0l-1.674,-1.288l-3.601,1.931l-0.518,0.901l-0.385,-0.514l0,-1.288l1.416,-0.129l0.385,-3.219l-0.771,-2.317l2.318,-0.901l3.346,0.516l1.802,-2.704l0.901,-2.832l1.031,-1.029l1.414,-2.448l-4.375,0.774l-2.447,1.030l-3.990,0l-1.159,-2.447l-3.218,-1.930l-4.635,-0.902l-1.029,-2.574l-0.901,-1.674l-1.031,-1.158l-1.674,-2.703l-2.316,-1.030l-4.119,-0.772l-3.475,0l-3.350,0.513l-2.316,1.417l1.545,0.644l0,1.416l-1.414,0.901l-2.447,2.832l0,1.159l-3.862,1.672l-3.219,-0.900l-3.218,0.128l-1.414,-0.900l-1.545,-0.258l-3.991,1.930l-3.476,0.387l-2.574,0.644l-3.348,-0.386l-2.445,0l-1.674,-1.417l-2.701,-1.287l-2.705,-0.257l-3.348,0.257l-2.574,0.515l-3.862,-1.158l-0.515,-1.931l-3.090,-0.773l-2.445,-0.257l-3.090,-1.158l-2.703,2.832l1.029,1.545l-2.574,1.931l-3.862,-0.644l-2.703,-0.129l-1.802,-1.287l-2.832,0l-2.317,-0.901l-4.121,1.287l-5.148,2.317l-2.832,0.515l-1.030,0.258l-1.414,-1.675l-3.478,0.387l-1.158,-1.159l-1.930,-0.515l-1.289,-1.545l-1.545,-0.514l-3.860,0.644l-3.605,-1.546l-1.545,1.416l-5.922,-6.822l-3.474,-2.060l1.029,-0.901l-6.822,2.575l-2.577,0.128l0.258,-1.416l-3.474,-0.901l-2.832,0.645l-0.901,-2.833l-4.763,-0.644l-2.446,1.160l-6.693,1.028l-1.418,0.644l-10.039,0.901l-1.158,0.901l1.929,1.931l-2.575,0.644l0.515,0.772l-2.702,1.288l4.376,1.931l-0.644,1.159l-3.732,0l-0.773,0.772l-3.474,-1.416l-4.250,0l-2.961,1.158l-3.088,-1.029l-5.922,-1.931l-4.248,0.127l-5.535,2.962l-0.387,1.931l-2.705,-1.544l-2.186,2.960l0.772,0.515l-1.545,2.060l2.317,1.802l1.931,-0.129l1.803,1.803l-0.387,1.416l1.416,0.514l-1.287,1.546l-2.575,0.386l-2.704,2.831l2.445,2.576l-0.255,1.801l2.960,3.218l-1.545,1.030l-0.516,0.644l-1.158,-0.129l-1.931,-1.673l-0.643,0l-1.803,-0.644l-0.772,-1.158l-2.446,-0.516l-1.671,0.387l-0.517,-0.515l-3.604,-1.287l-3.990,-0.386l-2.318,-0.516l-0.256,0.387l-3.477,-2.318l-3.089,-1.029l-2.318,-1.545l1.931,-0.514l2.317,-2.189l-1.544,-1.030l3.991,-1.159l-0.129,-0.643l-2.446,0.515l0.128,-1.159l1.417,-0.772l2.575,-0.258l0.384,-0.901l-0.513,-1.417l1.029,-1.415l0,-0.772l-3.990,-0.902l-1.545,0l-1.674,-1.287l-2.059,0.386l-3.476,-0.901l0.129,-0.514l-1.030,-1.159l-2.058,-0.129l-0.258,-0.901l0.643,-0.515l-1.673,-1.544l-2.833,0.256l-0.772,-0.128l-0.773,0.644l-0.901,-0.129l-0.643,-1.674l-0.644,-0.901l0.516,-0.257l2.187,0.128l1.030,-0.643l-0.772,-0.772l-1.803,-0.387l0.129,-0.515l-1.160,-0.515l-1.672,-1.802l0.645,-0.644l-0.258,-1.287l-2.703,-0.643l-1.416,0.385l-0.387,-0.772l-2.833,-0.644l-0.901,-1.545l-0.129,-1.287l-1.286,-0.644l1.158,-0.901l-0.900,-2.446l1.930,-1.544l-0.386,-0.515l3.089,-1.545l-2.832,-1.287l5.792,-3.347l2.448,-1.545l1.030,-1.416l-3.991,-1.802l1.157,-1.802l-2.445,-2.060l1.801,-2.318l-3.089,-2.960l2.448,-2.060l-4.119,-1.801l0.384,-1.932l2.189,-0.257l4.507,-1.031l2.830,-0.900l4.378,1.545l7.466,0.643l10.169,3.089l2.059,1.288l0.129,1.802l-7.336,2.061l-12.102,-2.061l-1.929,0.386l4.504,3.219l0.772,2.060l2.961,1.544l3.218,-2.703l7.596,1.287l0,-2.960l7.465,-1.803l3.992,-0.901l-2.190,-1.674l-0.643,-3.218l7.466,0.772l-1.801,3.348l4.632,-0.129l7.210,-2.703l9.783,-2.318l2.060,1.417l9.397,-1.546l6.695,0.902l0.643,-3.219l7.853,0.772l10.684,2.832l1.673,-1.801l-3.991,-4.507l4.505,-2.702l2.190,-3.090l8.369,0.386l0.769,4.763l0.260,5.536l1.672,1.674l-0.516,1.802l-4.119,2.832l2.832,0.386l5.151,-2.961l1.029,-3.991l-2.832,-1.159l-1.029,-5.664l3.345,-3.346l2.190,1.802l0.644,2.060l1.672,-1.288l3.477,-0.901l5.535,-0.128l5.019,1.544l-2.445,-2.575l-0.256,-2.574l4.760,-0.514l6.437,0.128l5.793,-0.387l-2.189,-1.415l3.219,-1.674l3.090,-0.129l5.150,-1.288l0.385,-0.128l1.029,0l1.418,0l1.545,-0.128l1.416,-0.129l1.027,0l0.389,0l0.900,-0.773l7.080,-0.257l2.190,0.643l6.049,-1.415l4.890,0l0.774,-1.159l2.574,-1.159l6.309,-1.030l4.632,0.772l-3.603,0.644l6.051,0.515l0.771,1.288l2.447,-0.644l9.782,-0.257l5.023,1.673l-2.318,3.089l-7.082,1.546l1.031,1.544l6.180,-0.257l2.961,1.030l11.968,0l2.705,1.544l10.299,0.129l0.387,-1.673l16.603,1.673l0.518,4.892l4.246,1.030l8.111,-1.545l15.834,-0.515l1.930,-3.476l23.170,1.802l2.320,1.545l7.078,2.059l14.416,-0.385l6.438,3.733l10.170,-0.128l9.269,-0.259l6.178,2.447l0.774,-3.219l13.257,0.515l8.496,1.159l3.735,1.158l6.564,2.059l7.209,2.448l8.110,1.029l5.277,2.575l-6.178,1.416l-0.386,2.703l-4.506,0.129l-5.278,-2.317l-5.150,-0.644l-3.475,-1.674l-1.802,2.961l0.385,-0.129zM518.204,80.414l0.645,-1.288l3.733,-0.772l2.702,0.386l1.289,0.515l-0.259,0.643l0.128,0.772l-4.890,0l3.348,0.256zM861.522,24.158l5.666,0.515l-0.128,1.416l-7.725,-1.416l-2.187,0.515zM836.034,22.871l5.279,-0.387l10.426,0.772l1.803,2.189l-9.527,-0.128l-3.989,1.030l-5.021,-1.931l-1.029,1.545zM742.835,13.473l0.516,0.772l5.019,2.575l-14.287,0.387l3.604,-3.090l-5.148,0.644zM718.763,9.226l10.556,0.386l5.922,3.346l-7.853,1.674l-11.328,-1.030l-0.127,-2.446l-2.830,1.930zM609.345,28.277l6.435,-2.317l-0.643,-1.287l6.050,-1.417l8.882,-1.673l8.882,-0.514l4.634,-1.030l5.279,-0.387l1.801,1.159l-1.801,0.772l-9.526,1.417l-8.239,1.287l-8.367,2.445l-3.993,2.704l-4.246,2.574l0.644,2.189l5.149,2.317l-1.672,0.129l-8.756,-0.257l-0.771,-1.287l-4.891,-0.644l-0.386,-1.545l2.830,-0.515l-0.127,-1.417l5.277,-2.316l2.445,0.387zM850.194,82.344l0.901,2.575l0,2.575l1.158,2.832l2.705,4.763l-3.990,-0.901l-1.674,3.862l2.574,2.703l0,1.931l-2.058,-1.674l-1.803,2.189l-0.516,-2.317l0.258,-2.575l-0.258,-2.960l0.645,-2.061l0.127,-3.604l-1.545,-2.575l0.131,-3.733l2.574,-1.287l-1.160,-1.158l1.289,-0.387l-0.642,-1.802z'</body><body package="Roassal2-Shapes">Rwanda	^ 'M547.169,229.999l1.028,1.545l-0.128,1.544l-0.773,0.387l-1.415,-0.128l-0.773,1.545l-1.673,-0.258l0.257,-1.546l0.386,-0.128l0,-1.674l0.901,-0.643l0.643,0.256l-1.547,0.900z'</body><body package="Roassal2-Shapes">SaudiArabia	^ 'M580.509,182.883l-0.387,-1.157l-0.771,-0.773l-0.259,-1.031l-1.415,-1.029l-1.416,-2.188l-0.772,-2.189l-1.802,-1.931l-1.289,-0.386l-1.672,-2.574l-0.386,-1.932l0.128,-1.544l-1.545,-2.961l-1.287,-1.030l-1.416,-0.644l-0.902,-1.545l0.130,-0.514l-0.771,-1.417l-0.774,-0.643l-1.030,-2.060l-1.674,-2.059l-1.287,-1.931l-1.417,0l0.387,-1.417l0.131,-0.901l0.384,-1.158l2.960,0.514l1.160,-0.900l0.643,-0.901l2.060,-0.386l0.515,-0.902l0.901,-0.515l-2.703,-2.703l5.407,-1.287l0.514,-0.516l3.218,0.773l3.990,1.931l7.596,5.406l5.020,0.258l2.447,0.257l0.644,1.288l1.930,-0.129l1.030,2.317l1.288,0.644l0.513,0.902l1.803,1.158l0.127,1.159l-0.256,0.900l0.387,0.901l0.772,0.644l0.386,0.901l0.387,0.644l0.771,0.644l0.772,-0.258l0.517,1.030l0.127,0.643l1.031,2.704l8.110,1.416l0.514,-0.644l1.159,1.931l-1.802,5.408l-7.981,2.702l-7.853,1.030l-2.445,1.159l-1.931,2.832l-1.287,0.515l-0.644,-0.901l-1.031,0.128l-2.574,-0.257l-0.514,-0.257l-3.090,0l-0.773,0.257l-1.158,-0.644l-0.645,1.288l0.258,1.158l1.158,-0.772z'</body><body package="Roassal2-Shapes">Senegal	^ 'M420.242,190.35l-1.159,-2.059l-1.287,-1.030l1.159,-0.515l1.287,-1.803l0.644,-1.416l0.901,-0.901l1.416,0.257l1.287,-0.643l1.416,0l1.288,0.773l1.801,0.772l1.674,1.931l1.802,1.930l0.129,1.674l0.515,1.545l1.030,0.772l0.257,1.030l-0.128,0.772l-0.387,0.129l-1.544,-0.129l-0.130,0.258l-0.643,0l-1.931,-0.643l-1.287,0l-5.020,-0.129l-0.644,0.386l-0.901,-0.129l-1.545,0.386l-0.387,-2.058l2.447,0.127l0.644,-0.386l0.514,0l1.030,-0.644l1.159,0.516l1.158,0.128l1.159,-0.644l-0.516,-0.773l-0.900,0.387l-0.901,0l-1.030,-0.643l-0.901,0l-0.515,0.643l2.961,-0.129z'</body><body package="Roassal2-Shapes">Serbia	^ 'M519.749,102.684l1.416,1.030l0.258,0.902l1.674,0.643l0.257,1.158l1.543,0.773l0.774,-0.644l0.771,0.386l-0.641,0.386l0.513,0.515l-0.772,0.644l0.259,0.902l1.415,1.158l-1.030,0.901l-0.515,0.772l0.256,0.386l-0.385,0.387l-1.288,0l-1.544,0.257l-1.545,0.515l-0.129,0.515l-0.385,0l-0.130,-1.030l-0.643,-0.257l-0.516,-0.773l-0.771,0.258l-0.129,-0.516l-1.287,1.288l0.258,0.901l-0.516,-0.128l-0.773,-0.902l-1.159,-0.515l0.258,-0.514l0.387,-1.545l0.900,-0.515l1.158,-0.387l0.389,-1.287l-1.289,-1.030l0.645,-1.159l-1.030,0l1.030,-1.029l-0.773,-0.772l-0.643,-1.031l2.060,-0.772l-1.672,-0.129z'</body><body package="Roassal2-Shapes">SierraLeone	^ 'M434.402,208.759l-0.772,-0.257l-1.931,-1.031l-1.287,-1.544l-0.515,-0.902l-0.386,-2.059l1.415,-1.159l0.387,-0.772l0.386,-0.515l0.772,-0.129l0.644,-0.514l2.188,0l0.772,1.029l0.515,1.159l0,0.773l0.387,0.642l0,1.030l0.644,-0.127l-1.159,1.157l-1.287,1.546l-0.129,0.771l0.644,-0.902z'</body><body package="Roassal2-Shapes">Slovakia	^ 'M516.017,93.673l0.127,0.129l1.158,-0.386l1.289,1.030l1.672,-0.644l1.289,0.257l1.929,-0.386l2.577,1.030l-0.774,0.772l-0.513,1.030l-0.645,0.257l-2.832,-0.772l-0.900,0.129l-0.645,0.643l-1.287,0.387l-0.258,-0.258l-1.287,0.515l-1.158,0l-0.129,0.644l-2.318,0.257l-1.028,-0.257l-1.288,-0.772l-0.257,-0.903l0.127,-0.256l0.387,-0.644l1.288,0l0.900,-0.258l0,-0.257l0.517,-0.129l0.256,-0.643l0.644,0l0.385,-0.515l-0.774,0z'</body><body package="Roassal2-Shapes">SolomonIslands	^ 'M901.944,255.23l0.772,0.903l-1.930,0l-1.031,-1.674l1.674,0.643l-0.515,-0.128zM900.786,252.784l-0.387,0.516l-2.060,-2.318l-0.514,-1.544l0.901,0l1.029,2.059l-1.031,-1.287zM898.597,253.557l-1.159,0.129l-1.544,-0.386l-0.643,-0.386l0.256,-1.031l1.674,0.387l0.900,0.644l-0.516,-0.643zM895.251,248.537l0.643,0.901l0.128,0.515l-2.060,-1.158l-1.543,-0.902l-1.031,-0.901l0.384,-0.258l1.290,0.644l-2.189,-1.159zM888.556,245.834l1.031,0.900l-0.516,0.129l-1.160,-0.515l-1.158,-1.159l0.129,-0.386l-1.674,-1.031z'</body><body package="Roassal2-Shapes">Somalia	^ 'M597.114,201.549l-1.287,1.674l-1.803,2.188l-2.316,0l-8.754,-3.218l-1.029,-0.901l-1.029,-1.287l-1.032,-1.545l0.645,-0.901l0.900,-1.416l0.902,0.515l0.516,1.030l1.286,1.158l1.288,0l2.575,-0.643l2.959,-0.387l2.319,-0.771l1.286,-0.259l1.029,-0.515l1.545,0l0,1.159l0,2.704l0,-1.415zM603.037,195.371l-0.258,1.545l0,1.415l-0.643,0.901l-0.773,2.961l-1.288,2.961l-1.674,3.475l-2.316,3.991l-2.189,2.962l-3.218,3.732l-2.702,2.188l-3.991,2.576l-2.576,2.059l-2.959,3.347l-0.644,1.415l-0.516,0.645l-1.931,-2.189l0.130,-10.169l2.188,-2.960l1.029,-0.644l1.803,0l2.318,-1.932l3.475,-0.129l7.722,-8.110l1.803,-2.188l1.287,-1.674l0,-1.415l0,-2.704l0,-1.159l0.903,-0.128l1.158,-0.387l1.416,-0.257l1.288,-0.900l1.028,0l-0.130,-0.772z'</body><body package="Roassal2-Shapes">SouthAfrica	^ 'M550.13,305.822l-0.516,0.387l-1.158,1.287l-0.773,1.416l-1.544,1.93l-2.96,2.832l-1.932,1.545l-2.061,1.287l-2.832,1.031l-1.287,0.128l-0.387,0.772l-1.672-0.386l-1.288,0.514l-2.961-0.514l-1.544,0.257l-1.158-0.128l-2.834,1.028l-2.316,0.517l-1.545,1.028h-1.285l-1.16-0.9l-0.9-0.128l-1.158-1.16l-0.131,0.388l-0.385-0.772v-1.546l-0.771-1.801l0.771-0.516v-2.061l-1.802-2.445l-1.288-2.316l-1.931-3.478l1.286-1.415l1.032,0.773l0.384,1.158l1.288,0.129l1.673,0.514l1.418-0.129l2.445-1.416v-9.912l0.772,0.387l1.544,2.574l-0.258,1.674l0.645,0.9l1.93-0.256l1.289-1.287l1.287-0.774l0.643-1.286l1.287-0.645l1.158,0.387l1.288,0.773l2.188,0.129l1.801-0.645l0.258-0.901l0.387-1.287l1.545-0.128l0.772-1.03l0.901-1.804l2.445-2.059l3.733-1.93h1.157l1.289,0.514l0.9-0.387l1.416,0.258l1.287,3.862l0.771,1.802l-0.514,3.09l0.258,0.9l-1.416-0.385l-0.773,0.129l-0.258,0.771l-0.771,1.029L547.94,299l1.545,1.544l1.545-0.386l0.644-1.158h2.059l-0.772,1.93l-0.258,2.318l-0.77,1.157L550.13,305.822zM543.306,304.922l-1.158-0.773l-1.287,0.516l-1.416,1.029l-1.416,1.803l1.931,2.059l1.03-0.258l0.514-0.9l1.417-0.386l0.515-0.901l0.773-1.287L543.306,304.922z'</body><body package="Roassal2-Shapes">SouthKorea	^ 'M810.933,122.895l2.447,3.218l0.642,1.803l0,3.089l-1.029,1.416l-2.445,0.515l-2.190,1.159l-2.445,0.258l-0.258,-1.545l0.514,-1.932l-1.158,-2.833l1.931,-0.514l-1.802,-2.189l0.131,-0.257l1.285,0l1.029,-1.158l1.930,-0.129l1.033,-0.129l-0.385,0.772z'</body><body package="Roassal2-Shapes">Spain	^ 'M440.838,114.141l0.129,-1.931l-1.029,-1.158l3.861,-1.932l3.219,0.515l3.604,0l2.960,0.387l2.189,-0.129l4.377,0.129l1.029,1.030l5.021,1.158l0.901,-0.514l3.089,1.158l3.090,-0.258l0.129,1.545l-2.574,1.802l-3.478,0.516l-0.127,0.900l-1.672,1.545l-1.031,2.189l1.031,1.544l-1.547,1.159l-0.642,1.803l-2.061,0.514l-1.802,2.060l-3.476,0l-2.574,0l-1.673,0.901l-1.031,1.030l-1.287,-0.129l-1.030,-1.030l-0.772,-1.545l-2.446,-0.385l-0.257,-0.902l1.030,-1.030l0.258,-0.644l-0.902,-0.900l0.772,-1.674l-1.030,-1.674l1.160,-0.256l0,-1.159l0.514,-0.387l0,-2.189l1.287,-0.643l-0.773,-1.416l-1.545,-0.128l-0.514,0.385l-1.545,0l-0.643,-1.287l-1.158,0.387l1.031,-0.643z'</body><body package="Roassal2-Shapes">SriLanka	^ 'M685.552,206.699l-0.387,2.832l-1.158,0.772l-2.317,0.643l-1.289,-2.187l-0.513,-3.863l1.285,-4.376l1.805,1.545l1.285,1.801l-1.289,-2.833z'</body><body package="Roassal2-Shapes">Sudan	^ 'M556.308,215.711l-1.416,1.028l-1.545,0l-2.189,0.644l-1.802,-0.644l-1.029,0.774l-2.446,-1.802l-0.644,-1.159l-1.416,0.643l-1.287,-0.257l-0.773,0.515l-1.158,-0.387l-1.672,-2.188l-0.389,-0.901l-2.059,-1.031l-0.643,-1.544l-1.159,-1.287l-1.800,-1.287l0,-0.901l-1.419,-1.159l-2.059,-1.159l-1.029,-0.771l-0.129,-0.773l0.387,-1.159l0,-1.159l-1.545,-1.674l-0.258,-1.157l0,-0.645l-0.902,-0.772l-0.126,-1.544l-0.517,-1.030l-0.902,0.129l0.259,-1.031l0.643,-1.030l-0.258,-1.159l0.901,-0.772l-0.643,-0.643l0.774,-1.673l1.158,-2.060l2.316,0.257l0.258,-10.427l0,-1.415l2.832,0l0,-5.408l10.813,0l10.556,0l10.299,0l1.158,2.704l-0.643,0.386l0.385,2.832l1.030,3.218l1.029,0.644l1.418,1.029l-1.288,1.546l-2.061,0.386l-0.770,0.901l-0.258,1.802l-1.160,3.861l0.258,1.160l-0.387,2.317l-1.158,2.575l-1.672,1.415l-1.158,2.060l-0.259,1.030l-1.286,0.772l-0.774,2.831l0,2.447l-0.386,0.774l-1.416,0.127l-0.901,1.545l1.673,0.129l1.416,1.287l0.388,1.158l1.286,0.644l1.158,2.832l-2.188,2.447l1.416,-1.159z'</body><body package="Roassal2-Shapes">Suriname	^ 'M311.337,210.946l3.219,0.517l0.257,-0.517l2.188,-0.257l2.833,0.774l-1.417,2.316l0.259,1.803l1.029,1.674l-0.386,1.157l-0.257,1.159l-0.772,1.158l-1.545,-0.515l-1.159,0.259l-1.158,-0.259l-0.259,0.773l0.516,0.514l-0.257,0.517l-1.546,-0.130l-1.545,-2.317l-0.385,-1.545l-0.902,0l-1.157,-1.931l0.514,-1.416l-0.129,-0.643l1.545,-0.772l-0.514,2.319z'</body><body package="Roassal2-Shapes">SvalbardJanMayen	^ 'M539.059,11.285l-3.991,1.416l-7.852,0.387l-7.854-0.515l-0.514-0.644l-3.863-0.128l-2.961-1.159l8.369-0.772l3.86,0.644l2.704-0.772l6.822,0.643L539.059,11.285zM505.976,12.314h-3.733l-1.546-0.901l-7.335,1.031l2.059,2.06l5.276,2.317l3.99,0.772l-2.314,0.9l5.791,1.675l3.219-0.129l1.287-2.189l2.316-0.515l1.545-2.06l6.693-1.031l-8.881-1.931l-3.347-1.03l-3.991,0.128L505.976,12.314zM531.851,17.207l-3.863-0.515l-1.158-1.03l-5.535,0.515l1.674,0.901l-1.932,0.643l4.765,0.645L531.851,17.207z'</body><body package="Roassal2-Shapes">Swaziland	^ 'M551.674,299l-0.644,1.158l-1.545,0.386l-1.545,-1.544l-0.128,-0.902l0.771,-1.030l0.258,-0.771l0.773,-0.129l1.416,0.385l0.385,1.289l-0.259,-1.158z'</body><body package="Roassal2-Shapes">Sweden	^ 'M525.026,49.905l-2.703,1.930l0.516,1.674l-4.377,2.060l-5.150,2.317l-1.930,3.861l1.930,1.932l2.576,1.415l-2.576,3.090l-2.704,0.643l-1.028,4.507l-1.545,2.445l-3.348,-0.257l-1.415,2.188l-3.218,0.129l-0.773,-2.575l-2.317,-3.090l-2.059,-3.732l1.158,-1.545l2.318,-1.931l0.900,-3.090l-1.803,-1.415l-0.127,-3.605l1.800,-2.446l2.705,0l0.903,-1.030l-1.031,-0.901l4.248,-3.862l2.703,-2.960l1.674,-1.931l2.702,0l0.644,-1.417l5.022,0.387l0.513,-1.803l1.673,-0.129l3.475,1.417l4.250,1.801l0.128,4.120l0.901,1.031l4.635,-0.772z'</body><body package="Roassal2-Shapes">Switzerland	^ 'M491.042,98.951l0.128,0.515l-0.385,0.644l1.160,0.514l1.416,0l-0.258,1.159l-1.158,0.386l-1.932,-0.257l-0.643,1.030l-1.288,0.129l-0.387,-0.516l-1.543,1.031l-1.287,0.128l-1.160,-0.643l-0.901,-1.159l-1.288,0.386l0,-1.158l1.932,-1.545l-0.130,-0.644l1.288,0.257l0.772,-0.515l2.317,0l0.515,-0.514l-2.832,-0.772z'</body><body package="Roassal2-Shapes">Syria	^ 'M569.696,137.055l-5.278,2.833l-2.960,-1.031l0.256,-0.385l0,-1.160l0.643,-1.416l1.546,-1.029l-0.515,-1.031l-1.159,-0.128l-0.257,-2.059l0.644,-1.159l0.772,-0.643l0.643,-0.515l0.129,-1.545l0.902,0.514l2.960,-0.772l1.416,0.514l2.317,0l3.090,-1.028l1.416,0.128l3.090,-0.515l-1.416,1.673l-1.417,0.773l0.258,1.931l-1.029,3.218l6.051,-2.832z'</body><body package="Roassal2-Shapes">Taiwan	^ 'M793.296,161.256l-1.672,4.378l-1.160,2.188l-1.414,-2.317l-0.260,-1.932l1.545,-2.702l2.189,-2.060l1.288,0.772l0.516,-1.673z'</body><body package="Roassal2-Shapes">Tajikistan	^ 'M656.587,118.519l-1.030,0.900l-2.961,-0.515l-0.257,1.545l2.961,-0.129l3.347,0.901l5.020,-0.514l0.773,2.573l0.772,-0.256l1.674,0.515l-0.129,1.158l0.515,1.416l-2.832,0l-1.802,-0.129l-1.674,1.159l-1.285,0.257l-0.904,0.643l-1.030,-0.900l0.259,-2.317l-0.901,-0.129l0.384,-0.772l-1.543,-0.645l-1.160,0.903l-0.256,1.157l-0.386,0.387l-1.674,-0.128l-0.773,1.287l-0.901,-0.515l-2.059,0.900l-0.773,-0.385l1.547,-2.703l-0.645,-2.060l-1.931,-0.644l0.643,-1.159l2.318,0.129l1.285,-1.417l0.775,-1.801l3.603,-0.644l-0.514,1.287l0.386,0.772l-1.158,0.127z'</body><body package="Roassal2-Shapes">Tanzania	^ 'M551.03,229.742l5.407,-0.258l10.042,5.793l0.256,2.059l4.119,2.445l-1.289,3.092l0.131,1.543l1.802,1.031l0,0.645l-0.644,1.673l0.129,0.772l-0.129,1.287l0.901,1.673l1.160,2.704l0.900,0.514l-2.060,1.674l-2.961,1.030l-1.672,-0.128l-0.902,0.900l-1.930,0l-0.644,0.386l-3.347,-0.771l-1.931,0.256l-0.773,-3.732l-1.415,-1.933l-2.704,-0.514l-1.543,-0.901l-1.675,-0.384l-1.030,-0.387l-1.159,-0.773l-1.545,-3.346l-1.545,-1.546l-0.514,-1.546l0.257,-1.415l-0.514,-2.445l1.158,-0.128l1.031,-1.032l1.030,-1.416l0.642,-0.513l0,-0.903l-0.642,-0.643l-0.131,-1.030l0.773,-0.387l0.128,-1.544l-1.028,-1.545l0.900,-0.257l-2.961,0z'</body><body package="Roassal2-Shapes">Thailand	^ 'M741.548,194.082l-2.445,-1.157l-2.188,0l0.385,-2.060l-2.446,0l-0.128,2.961l-1.545,3.990l-0.903,2.318l0.260,1.931l1.801,0.128l1.031,2.446l0.514,2.318l1.416,1.545l1.674,0.257l1.416,1.415l-0.901,1.159l-1.802,0.257l-0.129,-1.287l-2.188,-1.157l-0.516,0.385l-1.029,-1.029l-0.515,-1.288l-1.418,-1.544l-1.286,-1.287l-0.515,1.544l-0.514,-1.417l0.385,-1.672l0.773,-2.576l1.287,-2.832l1.545,-2.445l-1.158,-2.447l0.129,-1.287l-0.387,-1.545l-1.802,-2.060l-0.643,-1.416l1.029,-0.514l0.901,-2.318l-1.030,-1.802l-1.802,-1.931l-1.287,-2.317l1.158,-0.515l1.287,-2.960l1.803,-0.129l1.672,-1.159l1.544,-0.643l1.161,0.900l0.129,1.546l1.800,0.128l-0.642,2.832l0,2.446l2.832,-1.544l0.900,0.385l1.545,0l0.516,-1.030l2.060,0.258l2.059,2.189l0.129,2.574l2.187,2.446l-0.127,2.189l-0.902,1.288l-2.447,-0.387l-3.475,0.514l-1.801,2.189l-0.643,-3.217z'</body><body package="Roassal2-Shapes">TimorLeste	^ 'M801.921,250.982l0.258,-0.643l2.316,-0.644l1.934,-0.129l0.771,-0.257l1.029,0.257l-0.900,0.773l-2.834,1.158l-2.316,0.773l0,-0.773l0.258,0.515z'</body><body package="Roassal2-Shapes">Togo	^ 'M470.317,210.432l-2.187,0.514l-0.644,-0.900l-0.773,-1.673l-0.128,-1.416l0.514,-2.318l-0.643,-1.030l-0.258,-2.187l0,-1.932l-1.159,-1.417l0.258,-0.772l2.317,0l-0.259,1.417l0.775,0.900l0.900,0.902l0.129,1.287l0.516,0.515l-0.131,6.307l-0.773,-1.803z'</body><body package="Roassal2-Shapes">Tunisia	^ 'M490.785,145.294l-1.159,-4.763l-1.674,-1.159l0,-0.643l-2.187,-1.545l-0.257,-2.059l1.674,-1.545l0.642,-2.189l-0.514,-2.575l0.642,-1.416l2.962,-1.029l1.801,0.257l0,1.415l2.190,-1.028l0.257,0.514l-1.417,1.416l0,1.159l0.902,0.643l-0.258,2.446l-1.801,1.287l0.515,1.416l1.415,0.129l0.644,1.287l1.030,0.387l-0.129,2.060l-1.288,0.772l-0.900,0.902l-1.803,1.029l0.257,1.158l-0.257,1.031l1.287,-0.643z'</body><body package="Roassal2-Shapes">Turkmenistan	^ 'M630.069,130.876l-0.129,-2.188l-2.060,-0.128l-3.088,-2.317l-2.188,-0.387l-2.961,-1.288l-1.932,-0.257l-1.157,0.515l-1.803,-0.129l-1.932,1.546l-2.317,0.513l-0.515,-1.930l0.387,-2.832l-2.059,-0.901l0.644,-1.802l-1.804,-0.129l0.645,-2.318l2.574,0.644l2.316,-0.773l-1.931,-1.673l-0.772,-1.544l-2.187,0.643l-0.260,2.059l-0.900,-1.802l1.160,-0.900l3.090,-0.515l1.800,0.772l1.930,2.060l1.419,-0.128l2.959,0l-0.384,-1.417l2.315,-0.901l2.188,-1.545l3.735,1.416l0.256,2.188l1.030,0.515l2.832,-0.128l1.029,0.515l1.289,2.702l3.089,1.931l1.674,1.288l2.832,1.288l3.604,1.158l0,1.674l-0.902,-0.128l-1.285,-0.774l-0.387,1.030l-2.317,0.516l-0.515,2.188l-1.546,0.772l-2.058,0.386l-0.517,1.288l-2.059,0.257l2.832,1.030z'</body><body package="Roassal2-Shapes">Uganda	^ 'M551.03,229.742l-2.961,0l-0.900,0.257l-1.547,0.900l-0.643,-0.256l0,-2.061l0.643,-1.028l0.131,-2.189l0.514,-1.287l1.029,-1.416l1.031,-0.643l0.901,-1.031l-1.159,-0.258l0.258,-3.217l1.029,-0.774l1.802,0.644l2.189,-0.644l1.545,0l1.416,-1.028l1.287,1.930l1.031,2.704l0.771,1.930l-1.029,1.931l-1.931,1.674l0,0.772l0,2.832l5.407,-0.258z'</body><body package="Roassal2-Shapes">Ukraine	^ 'M550.901,86.593l0.901,0.129l0.773,-0.644l0.772,0.128l2.833,-0.256l1.673,1.544l-0.643,0.515l0.258,0.901l2.058,0.129l1.030,1.159l-0.129,0.514l3.476,0.901l2.059,-0.386l1.674,1.287l1.545,0l3.990,0.902l0,0.772l-1.029,1.415l0.513,1.417l-0.384,0.901l-2.575,0.258l-1.417,0.772l-0.128,1.159l-2.060,0.128l-1.801,0.902l-2.576,0.128l-2.317,1.030l0.129,1.674l1.416,0.644l2.704,-0.130l-0.516,0.902l-2.959,0.515l-3.606,1.544l-1.544,-0.515l0.643,-1.286l-2.962,-0.774l0.389,-0.514l2.573,-0.901l-0.772,-0.645l-4.120,-0.643l-0.257,-1.029l-2.446,0.386l-1.030,1.416l-2.060,2.059l-1.158,-0.515l-1.287,0.386l-1.287,-0.386l0.773,-0.386l0.385,-0.901l0.774,-0.901l-0.129,-0.386l0.513,-0.258l0.258,0.386l1.545,0.129l0.773,-0.257l-0.517,-0.258l0.131,-0.386l-0.902,-0.772l-0.386,-1.030l-1.030,-0.515l0.257,-0.901l-1.287,-0.644l-1.029,-0.128l-2.059,-0.903l-1.675,0.259l-0.644,0.386l-1.158,0l-0.773,0.644l-1.931,0.257l-0.899,0.515l-1.289,-0.772l-1.673,0l-1.674,-0.258l-1.159,0.515l-0.256,-0.643l-1.415,-0.773l0.513,-1.030l0.774,-0.772l0.515,0.257l-0.646,-1.287l2.447,-2.189l1.287,-0.385l0.257,-0.773l-1.286,-2.317l1.286,-0.129l1.417,-0.644l2.187,-0.129l2.706,0.258l2.959,0.644l2.189,0l0.900,0.386l1.030,-0.386l0.772,0.643l2.446,-0.129l1.031,0.258l0.128,-1.416l0.900,-0.643l-2.318,0.129z'</body><body package="Roassal2-Shapes">UnitedArabEmirates	^ 'M604.196,161.643l0.514,-0.129l0,0.772l2.188,-0.386l2.189,0l1.672,0.129l1.803,-1.802l2.058,-1.802l1.674,-1.673l0.518,0.900l0.385,2.189l-1.417,0l-0.258,1.802l0.517,0.386l-1.159,0.515l-0.129,1.029l-0.773,1.159l0,1.030l-0.514,0.644l-8.110,-1.416l-1.031,-2.704l0.127,0.643z'</body><body package="Roassal2-Shapes">UnitedStates	^ 'M284.434,106.546l-2.704,0.772l-2.575,0.644l-3.089,1.673l-1.287,1.417l-0.258,0.386l-0.127,1.545l0.900,1.415l1.159,0l-0.259,-0.900l0.773,0.515l-0.257,0.772l-1.803,0.515l-1.286,-0.130l-1.931,0.517l-1.159,0.128l-1.673,0.128l-2.060,0.644l3.733,-0.387l0.128,0l0.773,0.515l-3.733,0.773l-1.802,0l0.129,-0.257l0.128,-0.644l-0.900,1.416l0.643,0l-0.515,2.060l-1.931,2.060l-0.257,-0.773l-0.516,-0.129l-0.643,-0.643l-0.129,0l-0.128,0l0.514,1.416l0.773,1.416l0.129,0.257l-1.030,0.901l-1.545,2.188l-0.258,-0.128l1.030,-1.802l-1.416,-1.287l-0.128,-2.060l-0.387,0.901l0,2.446l-1.673,-0.901l1.802,1.544l0.515,1.417l0.772,1.674l0.387,2.703l-1.803,1.930l-2.574,1.030l-2.318,1.417l-0.901,0.128l-1.158,1.931l-2.317,1.673l-2.832,1.288l-1.158,2.060l-0.516,1.415l0.387,2.061l1.030,2.187l1.159,2.061l0,1.029l1.157,2.703l0.129,2.447l-0.514,2.316l-1.159,0.516l-1.287,-0.386l-0.386,-1.159l-1.031,-0.644l-1.545,-2.317l-1.287,-1.931l-0.257,-1.287l0.515,-1.674l-0.643,-1.544l-1.803,-1.545l-1.416,-1.030l-3.089,1.158l-0.644,-0.772l-2.574,-1.287l-2.962,0.386l-2.445,-0.258l-1.674,0.515l-1.544,0l-0.258,1.160l0.772,1.543l-3.605,0.130l-2.316,-0.516l-1.545,-0.514l-2.059,-0.387l-2.318,-0.128l-2.317,0.643l-2.446,1.931l-2.702,1.158l-1.417,1.289l-0.644,1.287l0,1.802l0.129,1.287l0.515,0.901l-1.030,0.129l-1.931,-0.643l-2.188,-0.773l-0.772,-1.287l-0.515,-1.931l-1.545,-1.545l-1.030,-1.545l-1.288,-1.802l-1.930,-1.159l-2.189,0.130l-1.674,2.058l-2.316,-0.772l-1.288,-0.772l-0.772,-1.545l-0.900,-1.416l-1.545,-1.159l-1.416,-0.901l-0.902,-0.900l-4.633,0l-0.129,1.158l-2.060,0l-5.407,0l-6.178,-1.931l-3.992,-1.288l0.258,-0.515l-3.475,0.259l-3.090,0.256l-0.258,-1.029l-1.159,-1.416l-2.831,-1.545l-1.158,-0.129l-1.160,-0.900l-2.059,-0.130l-0.772,-0.515l-0.258,-1.416l-2.702,-2.704l-2.189,-3.732l0.128,-0.644l-1.287,-0.901l-2.059,-2.317l-0.386,-2.188l-1.417,-1.417l0.644,-2.189l-0.129,-2.317l-0.901,-1.544l0.901,-2.960l0.129,-2.962l0.514,-4.119l-0.771,-2.188l-0.387,-2.575l3.734,0.515l1.158,2.060l0.644,-0.773l-0.387,-2.188l-1.287,-2.189l15.962,0l2.704,0l32.182,0l18.536,0l5.536,0l0,-1.030l0.901,0l0.516,1.417l0.772,0.514l1.930,0.129l2.704,0.515l2.703,0.773l2.188,-0.387l3.219,0.773l0.385,0l0.515,0l0.258,-0.129l0.386,-0.129l0.387,-0.128l0.772,-0.258l0.643,-0.129l0.644,0.129l0.386,0.258l0.258,0l0.386,0.257l0.773,0.257l0.772,0.258l0.772,0.386l0.643,0.257l0.387,0.130l0.258,0.128l0.514,0.128l0.515,0.258l0.515,0.258l0.515,0.128l0.515,0.257l0.515,0.258l0.515,0.129l0.514,0.257l0.130,0.386l0.128,0.387l0.386,0.257l0.257,0l0.902,0l0.257,0l0,0.129l0,0.129l0,0.128l0,0.258l0.129,0l0.129,0.257l0.128,0l0.258,0.129l0.386,0.128l0.258,-0.128l0.128,0l0.258,0.258l0.128,0l0,0.129l-0.386,0.515l0.516,0.257l0.643,0.257l0.644,0.258l0.514,0.128l0.515,0.386l0.128,0.387l0,0.257l0.130,0.515l0.128,0.386l0.129,0.515l0.130,0.515l0.127,0.515l0,0.386l0.129,0.515l0.258,0.772l-0.129,0.258l-0.385,0.515l-0.259,0.515l0,0.129l0,0.128l-0.514,0.516l-0.772,1.030l-0.387,0.385l-0.257,0.515l0,0.257l0,0.130l0.257,0.257l0.387,0.257l0.514,0.129l0.644,0l0.643,-0.258l0.644,-0.257l0.644,-0.258l0.643,-0.385l0.644,-0.258l0.645,-0.129l0.900,-0.128l0.387,0l0.128,0l0.644,-0.129l0.643,-0.258l0.643,-0.257l0.902,-0.257l0.772,-0.258l0.386,-0.128l0.258,-0.130l0,-0.128l0,-0.258l-0.387,-0.772l0,-0.129l-0.257,-0.386l0.386,-0.129l0.515,-0.257l0.258,0l0.772,-0.128l0.643,0l0.902,0l0.772,0.128l0.901,0l0.516,0l0.643,0l0.257,-0.515l0.387,-0.386l0.256,-0.258l0.387,-0.258l2.703,-1.801l1.287,-0.516l4.120,0l4.891,0l0.258,-0.772l0.901,0l1.158,-0.515l0.902,-1.159l0.901,-2.187l2.060,-1.932l0.900,0.644l1.804,-0.386l1.157,0.772l0,3.605l1.803,1.545l0,-1.158zM16.808,64.322l2.059,0.257l0.258,1.031l-1.545,0.386l-1.802,-0.516l-1.673,-0.772l-2.703,0.386zM52.465,70.759l1.803,0.257l1.157,0.774l-2.317,1.286l-2.703,1.029l-1.416,-0.643l-0.385,-1.288l2.445,-0.901l-1.416,0.514zM85.42,39.22l0,9.913l0,15.446l2.574,0l2.704,0.774l1.802,1.157l2.445,1.803l2.575,-1.545l2.703,-0.902l1.545,1.417l1.802,1.159l2.446,1.159l1.674,1.930l2.703,3.090l4.634,1.673l0,1.802l-1.417,1.287l-1.544,-1.029l-2.316,-0.901l-0.773,-2.318l-3.476,-2.189l-1.415,-2.573l-2.576,-0.129l-4.376,-0.129l-3.090,-0.773l-5.535,-2.703l-2.702,-0.514l-4.636,-1.031l-3.733,0.259l-5.278,-1.288l-3.217,-1.159l-2.962,0.643l0.515,1.804l-1.544,0.257l-3.090,0.515l-2.318,0.900l-2.961,0.644l-0.385,-1.673l1.159,-2.575l2.831,-0.900l-0.771,-0.645l-3.347,1.545l-1.802,1.802l-3.991,1.931l2.059,1.288l-2.574,1.931l-2.961,1.030l-2.704,0.900l-0.643,1.159l-4.119,1.416l-0.901,1.288l-3.090,1.158l-1.931,-0.258l-2.445,0.773l-2.832,0.901l-2.189,0.902l-4.634,0.772l-0.387,-0.516l2.962,-1.158l2.574,-0.901l2.832,-1.417l3.347,-0.385l1.416,-1.030l3.734,-1.673l0.514,-0.516l2.059,-0.901l0.386,-2.059l1.418,-1.545l-3.091,0.773l-0.901,-0.516l-1.415,1.031l-1.803,-1.417l-0.644,1.030l-1.029,-1.417l-2.704,1.160l-1.673,0l-0.257,-1.674l0.514,-0.901l-1.673,-1.029l-3.604,0.513l-2.189,-1.287l-1.931,-0.643l0,-1.545l-2.059,-1.030l1.029,-1.673l2.188,-1.416l1.030,-1.416l2.189,-0.129l1.802,0.386l2.189,-1.287l1.930,0.257l2.059,-0.901l-0.513,-1.158l-1.546,-0.515l2.059,-1.030l-1.673,0l-2.832,0.515l-0.772,0.643l-2.188,-0.514l-3.863,0.257l-3.861,-0.643l-1.158,-1.159l-3.476,-1.545l3.862,-1.030l6.050,-1.416l2.188,0l-0.386,1.416l5.665,-0.129l-2.189,-1.673l-3.347,-1.031l-1.931,-1.286l-2.574,-1.158l-3.605,-0.901l1.417,-1.417l4.762,-0.129l3.475,-1.158l0.644,-1.288l2.703,-1.287l2.704,-0.386l5.021,-1.159l2.574,0.128l4.119,-1.415l3.990,0.643l2.060,1.159l1.159,-0.515l4.505,0.128l-0.128,0.644l4.119,0.516l2.703,-0.258l5.664,0.773l5.278,0.257l2.060,0.386l3.604,-0.514l3.991,0.900l-2.961,-0.387zM2.647,55.182l1.673,0.515l1.674,-0.258l2.189,0.644l2.574,0.386l-0.128,0.258l-2.061,0.644l-2.059,-0.644l-1.030,-0.514l-2.446,0.128l-0.643,-0.128l-0.257,1.031zM45.256,175.546l0,-0.773l-0.385,-1.029l0.643,-0.643l-0.258,-0.516l0.129,-0.128l0,-0.129l1.803,0.773l0.256,0.385l0,0.258l0.258,0.129l0.129,0.128l0.385,0.387l-0.643,0.514l-0.772,0.129l-0.515,0.515l-0.258,0.387l0.772,0.387zM43.067,170.01l-0.385,0.258l-1.158,-0.128l0.128,-0.387l-1.415,-0.257zM44.999,170.912l0,0.257l-0.258,0.129l-0.900,0.128l-0.130,-0.514l-0.386,0l-0.258,-0.387l0.130,-0.128l0.257,-0.129l0.257,0.385l0.516,-0.128l-0.772,-0.387zM39.335,169.496l-0.515,-0.643l0.386,-0.130l0.515,-0.257l0.386,0.643l0.257,0l0.258,0.516l-0.515,0l-0.257,-0.129l-0.129,0l0.386,0zM34.829,167.564l0.129,-0.256l0.386,-0.259l0.643,0.130l0.130,0.129l-0.130,0.514l-0.256,0.258l-0.516,-0.129l0.386,0.387z'</body><body package="Roassal2-Shapes">Uruguay	^ 'M310.05,308.396l1.674,-0.257l2.704,2.059l1.030,-0.130l2.702,1.805l2.189,1.414l1.545,1.804l-1.158,1.286l0.772,1.545l-1.159,1.674l-3.089,1.545l-2.060,-0.515l-1.416,0.257l-2.447,-1.157l-1.801,0.128l-1.674,-1.545l0.129,-1.674l0.643,-0.643l0,-2.705l0.644,-2.702l-0.772,2.189z'</body><body package="Roassal2-Shapes">Uzbekistan	^ 'M644.487,126.371l0,-1.674l-3.604,-1.158l-2.832,-1.288l-1.674,-1.288l-3.089,-1.931l-1.289,-2.702l-1.029,-0.515l-2.832,0.128l-1.030,-0.515l-0.256,-2.188l-3.735,-1.416l-2.188,1.545l-2.315,0.901l0.384,1.417l-2.959,0l-0.130,-9.914l6.951,-1.544l0.515,0.129l0.644,0.386l1.159,0.515l2.317,1.030l2.189,1.029l2.574,2.446l3.219,-0.385l4.633,-0.259l3.219,2.060l-0.258,2.703l1.287,0l0.644,2.189l3.347,0.128l0.771,1.288l1.030,-0.129l1.160,-1.931l3.603,-1.802l1.547,-0.515l0.770,0.258l-2.317,1.801l2.061,1.030l1.929,-0.772l3.090,1.416l-3.346,1.932l-2.060,-0.257l-1.158,0.127l-0.386,-0.772l0.514,-1.287l-3.603,0.644l-0.775,1.801l-1.285,1.417l-2.318,-0.129l-0.643,1.159l1.931,0.644l0.645,2.060l-1.547,2.703l-2.059,-0.515l1.416,0z'</body><body package="Roassal2-Shapes">Vanuatu	^ 'M915.718,269.777l1.674,1.545l-0.901,0.387l-0.902,-1.160l-0.129,0.772zM914.56,269.133l-0.387,-0.643l0,-2.060l1.287,0.773l0.387,2.189l-0.774,-0.387l0.513,-0.128z'</body><body package="Roassal2-Shapes">Venezuela	^ 'M273.105,195.242l-0.128,0.644l-1.545,0.257l0.902,1.287l-0.129,1.416l-1.160,1.545l1.030,2.188l1.159,-0.257l0.643,-1.931l-0.900,-0.901l-0.129,-2.060l3.346,-1.159l-0.385,-1.158l1.029,-0.901l0.902,1.931l1.930,0l1.804,1.545l0,0.902l2.444,0l2.962,-0.259l1.544,1.159l2.060,0.387l1.416,-0.902l0.128,-0.644l3.218,-0.128l3.348,-0.130l-2.317,0.773l0.900,1.288l2.189,0.257l2.060,1.288l0.386,2.187l1.417,-0.128l1.028,0.645l-2.187,1.672l-0.130,0.902l0.902,1.029l-0.644,0.516l-1.673,0.385l0,1.287l-0.772,0.772l1.930,2.061l0.257,0.772l-0.900,1.030l-3.090,0.902l-1.930,0.515l-0.774,0.643l-2.059,-0.773l-2.060,-0.257l-0.514,0.257l1.158,0.643l0,1.804l0.387,1.672l2.188,0.259l0.128,0.514l-1.931,0.772l-0.257,1.159l-1.159,0.515l-1.930,0.644l-0.515,0.772l-2.060,0.129l-1.544,-1.417l-0.773,-2.703l-0.772,-0.901l-1.031,-0.644l1.416,-1.287l-0.127,-0.644l-0.773,-0.772l-0.516,-1.802l0.259,-1.931l0.513,-0.901l0.517,-1.416l-0.902,-0.515l-1.545,0.386l-1.931,-0.129l-1.158,0.258l-1.802,-2.317l-1.546,-0.387l-3.475,0.258l-0.644,-0.901l-0.772,-0.257l0,-0.516l0.257,-1.030l-0.128,-1.028l-0.644,-0.645l-0.387,-1.287l-1.415,-0.129l0.772,-1.545l0.387,-1.931l0.772,-1.030l1.029,-0.771l0.644,-1.289l-1.802,0.514z'</body><body package="Roassal2-Shapes">Vietnam	^ 'M756.353,168.853l-3.606,2.316l-2.316,2.575l-0.514,1.930l2.059,2.832l2.445,3.476l2.445,1.675l1.674,2.188l1.287,5.020l-0.385,4.634l-2.318,1.802l-3.090,1.803l-2.187,2.188l-3.348,2.574l-0.902,-1.801l0.644,-1.803l-1.929,-1.544l2.316,-1.030l2.834,-0.258l-1.160,-1.674l4.506,-2.059l0.386,-3.218l-0.644,-1.803l0.387,-2.702l-0.645,-1.803l-2.061,-1.931l-1.673,-2.318l-2.188,-3.217l-3.219,-1.674l0.774,-0.902l1.672,-0.772l-1.028,-2.317l-3.347,0l-1.159,-2.446l-1.544,-2.188l1.416,-0.644l2.187,0l2.576,-0.257l2.317,-1.416l1.287,1.030l2.445,0.515l-0.387,1.545l1.289,1.029l-2.704,-0.645z'</body><body package="Roassal2-Shapes">WesternSahara	^ 'M441.482,153.92l0,-1.417l0.387,0l0,0.129l0,0.514l0,4.120l-8.883,-0.129l0.129,6.823l-2.574,0.257l-0.644,1.417l0.515,3.862l-10.557,0l-0.643,0.901l0.129,-1.159l0.129,0l6.050,-0.129l0.257,-1.029l1.159,-1.159l0.901,-3.733l3.733,-2.961l1.287,-3.347l0.773,-0.257l0.900,-2.060l2.319,-0.257l0.900,0.257l1.288,0l0.901,-0.515l-1.544,0.128z'</body><body package="Roassal2-Shapes">Yemen	^ 'M608.315,182.111l-1.931,0.772l-0.516,1.159l-0.127,0.901l-2.704,1.159l-4.249,1.287l-2.445,1.802l-1.158,0.258l-0.774,-0.258l-1.673,1.159l-1.673,0.515l-2.189,0.128l-0.772,0.130l-0.515,0.772l-0.772,0.128l-0.386,0.774l-1.287,-0.130l-0.903,0.387l-1.930,-0.129l-0.644,-1.545l0.129,-1.546l-0.516,-0.772l-0.513,-1.930l-0.772,-1.158l0.514,-0.129l-0.258,-1.159l0.388,-0.515l-0.130,-1.288l1.158,-0.772l-0.258,-1.158l0.645,-1.288l1.158,0.644l0.773,-0.257l3.090,0l0.514,0.257l2.574,0.257l1.031,-0.128l0.644,0.901l1.287,-0.515l1.931,-2.832l2.445,-1.159l7.853,-1.030l2.061,4.378l-0.900,-1.930z'</body><body package="Roassal2-Shapes">Zambia	^ 'M553.476,251.883l1.287,1.160l0.644,2.315l-0.386,0.644l-0.645,2.189l0.516,2.317l-0.773,0.902l-0.772,2.447l1.416,0.770l-8.239,2.189l0.258,1.932l-2.060,0.385l-1.543,1.031l-0.259,1.028l-1.028,0.130l-2.319,2.188l-1.545,1.802l-0.902,0l-0.772,-0.257l-3.088,-0.256l-0.515,-0.259l0,-0.259l-1.030,-0.513l-1.803,-0.258l-2.187,0.644l-1.673,-1.674l-1.804,-2.187l0.128,-8.625l5.536,0.127l-0.257,-1.028l0.387,-0.903l-0.387,-1.287l0.257,-1.286l-0.257,-0.902l0.901,0.130l0.128,0.772l1.289,0l1.672,0.258l0.903,1.158l2.187,0.385l1.674,-0.901l0.644,1.416l2.058,0.387l0.903,1.158l1.159,1.545l2.058,0l-0.258,-2.961l-0.642,0.516l-1.932,-1.031l-0.772,-0.514l0.387,-2.705l0.514,-3.088l-0.642,-1.288l0.771,-1.673l0.643,-0.387l3.733,-0.386l1.030,0.258l1.159,0.773l1.030,0.387l1.675,0.384l-1.543,-0.901z'</body><body package="Roassal2-Shapes">Zimbabwe	^ 'M549.228,286.898l-1.416,-0.257l-0.901,0.386l-1.289,-0.513l-1.157,0l-1.673,-1.290l-2.061,-0.385l-0.772,-1.674l0,-1.030l-1.158,-0.256l-3.089,-2.962l-0.900,-1.544l-0.516,-0.516l-1.030,-2.058l3.088,0.256l0.772,0.257l0.902,0l1.545,-1.802l2.319,-2.188l1.028,-0.130l0.259,-1.028l1.543,-1.031l2.060,-0.385l0.129,1.029l2.317,-0.129l1.287,0.645l0.515,0.645l1.287,0.254l1.415,0.774l0,3.475l-0.513,1.801l-0.128,2.061l0.385,0.773l-0.257,1.545l-0.386,0.258l-0.773,1.930l2.832,-3.1z'</body></methods><methods><class-id>Roassal2.RTSVGPath class</class-id> <category>list of countries</category><body package="Roassal2-Shapes">africa	^ #(#Nigeria #Ethiopia #Egypt #DemocraticRepublicCongo #SouthAfrica #Tanzania #Kenya #Algeria #Uganda #Sudan #Morocco #Ghana #Mozambique #IvoryCoast #Madagascar #Angola #Cameroon #Niger #BurkinaFaso #Mali #Malawi #Zambia #Senegal #Zimbabwe #Chad #Guinea #Tunisia #Rwanda #Benin #Somalia #Burundi #Togo #Libya #SierraLeone #CentralAfricanRepublic #Eritrea #Congo #Liberia #Mauritania #Gabon #Namibia #Botswana #Lesotho #EquatorialGuinea #Gambia #GuineaBissau #Swaziland #Djibouti #WesternSahara)</body><body package="Roassal2-Shapes">countries	^ #(#Afghanistan #Albania #Algeria #Angola #Argentina #Armenia #Australia #Austria #Azerbaijan #Bangladesh #Belarus #Belgium #Belize #Benin #Bhutan #Bolivia #BosniaandHerzegovina #Botswana #Brazil #BruneiDarussalam #Bulgaria #BurkinaFaso #Burundi #Cambodia #Cameroon #Canada #CentralAfricanRepublic #Chad #Chile #China #Colombia #Congo #CostaRica #Croatia #Cuba #Cyprus #CzechRepublic #DemocraticRepublicCongo #Denmark #Djibouti #DominicanRepublic #Ecuador #Egypt #ElSalvador #EquatorialGuinea #Eritrea #Estonia #Ethiopia #FalklandIslandsMalvinas #Fiji #Finland #France #FrenchGuyana #GM #Gabon #Georgia #Germany #Ghana #GreatBritian #Greece #Greenland #Guatemala #Guinea #GuineaBissau #Guyana #Haiti #Honduras #Hungary #Iceland #India #Indonesia #Iran #Iraq #Ireland #Israel #Italy #IvoryCoast #Jamaica #Japan #Jordan #Kazakhstan #Kenya #Kuwait #Kyrgyzstan #Laos #Latvia #Lebanon #Liberia #Libya #Lithuania #Luxembourg #Madagascar #Malawi #Malaysia #Mali #Mauritania #Mexico #Moldova #Mongolia #Morocco #Mozambique #MyanmarBurma #Namibia #Nepal #Netherlands #NewZealand #Nicaragua #Niger #Nigeria #NorthKorea #Norway #NewCaledonia #Oman #Pakistan #Palestine #Panama #PapuaNewGuinea #Paraguay #Peru #Philippines #Poland #Portugal #PuertoRico #Qatar #RepublicofMacedonia #RepublicofTurkey #Romania #Russia #Rwanda #SaudiArabia #Senegal #Serbia #SierraLeone #Slovakia #SolomonIslands #Somalia #SouthAfrica #Lesotho #SouthKorea #Spain #SriLanka #Sudan #Suriname #SvalbardJanMayen #Swaziland #Sweden #Switzerland #Syria #Taiwan #Tajikistan #Tanzania #Thailand #TimorLeste #Togo #Tunisia #Turkmenistan #Uganda #Ukraine #UnitedArabEmirates #UnitedStates #Uruguay #Uzbekistan #Vanuatu #Venezuela #Vietnam #WesternSahara #Yemen #Zambia #Zimbabwe)</body><body package="Roassal2-Shapes">icons	^ #(#supermarketCart #America #puzzlePiece)</body><body package="Roassal2-Shapes">southAmerica	^ #(#Argentina #Brazil #Bolivia #Chile #Colombia #Ecuador #Guyana #FrenchGuyana #Paraguay #Peru #Suriname #Uruguay #Venezuela)</body></methods><methods><class-id>Roassal2.RTSVGPath class</class-id> <category>others</category><body package="Roassal2-Shapes">goldenSpiral: level start: p side: side direction: dir type: isNarrow	"level: the number or golden rectangles	p: the start point	side: the size of the bigger rectangle	dir: the direction for rectangle in quadrants 1@1 = first quadrant etc	isNarrow: the arc direction"	| s point p1 p2 p3 goldenRatio si dirs d n ar |	ar := isNarrow 		ifTrue: [  #(1 1 1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 1 1 1) ]		ifFalse: [ #(1 1 -1 1 -1 1 -1 -1 -1 -1 1 -1 1 -1 1 1) ].	dirs := Dictionary new.	(1 to: 16 by: 4) do: [ :i|		dirs at: (ar at: i)@(ar at: i+1) put: (ar at: i+2)@(ar at: i+3) ].	goldenRatio := (1 + 5 sqrt)/2. 	s := WriteStream on: (String new: 100).	point := [ :z| z x asFloat asString, ',', z y asFloat asString,' ' ].	s nextPutAll: 'M', (point value: p).	si := side.	d := dir.	n := isNarrow.	((dir = (-1 @ 1)) or: [ dir= (1@ -1) ]) ifTrue: [ n := n not. ].	1 to: level do: [ :i|		p3 := p+(d * si).		n ifTrue: [ 			p1 :=p x @((0.55*(p3 y - p y))+ p y) .			p2 := ((0.45*(p3 x - p x))+p x ) @ p3 y.		] ifFalse: [ 			p1 := ((0.55*(p3 x - p x))+p x ) @ p y.			p2 := p3 x @((0.45*(p3 y - p y))+ p y). ].		si := (si * goldenRatio)-si.		d := dirs at: d.		n := n not.		s			nextPutAll: 'c';			nextPutAll: (point value: p1);			nextPutAll: (point value: p2);			nextPutAll: (point value: p3).		 ].	s nextPutAll: 'z'.	s close.	^ s contents.</body></methods><methods><class-id>Roassal2.RTSVGPath class</class-id> <category>icons</category><body package="Roassal2-Shapes">America	^ 'M16,1.466C7.973,1.466,1.466,7.973,1.466,16c0,8.027,6.507,14.534,14.534,14.534c8.027,0,14.534-6.507,14.534-14.534C30.534,7.973,24.027,1.466,16,1.466zM19.158,23.269c-0.079,0.064-0.183,0.13-0.105,0.207c0.078,0.078-0.09,0.131-0.09,0.17s0.104,0.246,0.052,0.336c-0.052,0.092-0.091,0.223-0.13,0.301c-0.039,0.077-0.131,0.155-0.104,0.272c0.025,0.116-0.104,0.077-0.104,0.194c0,0.116,0.116,0.065,0.09,0.208c-0.025,0.144-0.09,0.183-0.09,0.285c0,0.104,0.064,0.247,0.064,0.286s-0.064,0.17-0.155,0.272c-0.092,0.104-0.155,0.17-0.144,0.233c0.014,0.065,0.104,0.144,0.091,0.184c-0.013,0.037-0.129,0.168-0.116,0.259c0.014,0.09,0.129,0.053,0.155,0.116c0.026,0.065-0.155,0.118-0.078,0.183c0.078,0.064,0.183,0.051,0.156,0.208c-0.019,0.112,0.064,0.163,0.126,0.198c-0.891,0.221-1.818,0.352-2.777,0.352C9.639,27.533,4.466,22.36,4.466,16c0-2.073,0.557-4.015,1.518-5.697c0.079-0.042,0.137-0.069,0.171-0.062c0.065,0.013,0.079,0.104,0.183,0.13c0.104,0.026,0.195-0.078,0.26-0.117c0.064-0.039,0.116-0.195,0.051-0.182c-0.065,0.013-0.234,0-0.234,0s0.183-0.104,0.183-0.169s0.025-0.169,0.129-0.208C6.83,9.655,6.83,9.681,6.765,9.837C6.7,9.993,6.896,9.928,6.973,9.863s0.13-0.013,0.272-0.104c0.143-0.091,0.143-0.143,0.221-0.143c0.078,0,0.221,0.143,0.299,0.091c0.077-0.052,0.299,0.065,0.429,0.065c0.129,0,0.545,0.169,0.624,0.169c0.078,0,0.312,0.09,0.325,0.259c0.013,0.169,0.09,0.156,0.168,0.156s0.26,0.065,0.26,0.13c0,0.065-0.052,0.325,0.078,0.39c0.129,0.064,0.247,0.169,0.299,0.143c0.052-0.026,0-0.233-0.064-0.26c-0.065-0.026-0.027-0.117-0.052-0.169c-0.026-0.051,0.078-0.051,0.117,0.039c0.039,0.091,0.143,0.26,0.208,0.26c0.064,0,0.208,0.156,0.168,0.247c-0.039,0.091,0.039,0.221,0.156,0.221c0.116,0,0.26,0.182,0.312,0.195c0.052,0.013,0.117,0.078,0.117,0.117c0,0.04,0.065,0.26,0.065,0.351c0,0.09-0.04,0.454-0.053,0.597s0.104,0.39,0.234,0.52c0.129,0.13,0.246,0.377,0.324,0.429c0.079,0.052,0.13,0.195,0.247,0.182c0.117-0.013,0.195,0.078,0.299,0.26c0.104,0.182,0.208,0.48,0.286,0.506c0.078,0.026,0.208,0.117,0.142,0.182c-0.064,0.064-0.168,0.208-0.051,0.208c0.117,0,0.156-0.065,0.247,0.053c0.09,0.116,0.208,0.181,0.194,0.26c-0.013,0.077,0.104,0.103,0.156,0.116c0.052,0.013,0.169,0.247,0.286,0.143c0.117-0.104-0.155-0.259-0.234-0.326c-0.078-0.064,0-0.207-0.182-0.35c-0.182-0.143-0.156-0.247-0.286-0.351c-0.13-0.104-0.233-0.195-0.104-0.286c0.13-0.091,0.143,0.091,0.195,0.208c0.052,0.116,0.324,0.351,0.441,0.454c0.117,0.104,0.326,0.468,0.39,0.468s0.247,0.208,0.247,0.208s0.103,0.168,0.064,0.22c-0.039,0.052,0.053,0.247,0.144,0.299c0.09,0.052,0.455,0.22,0.507,0.247c0.052,0.027,0.155,0.221,0.299,0.221c0.142,0,0.247,0.014,0.286,0.053c0.039,0.038,0.155,0.194,0.234,0.104c0.078-0.092,0.09-0.131,0.208-0.131c0.117,0,0.168,0.091,0.233,0.156c0.065,0.065,0.247,0.235,0.338,0.222c0.091-0.013,0.208,0.104,0.273,0.064s0.169,0.025,0.22,0.052c0.054,0.026,0.234,0.118,0.222,0.272c-0.013,0.157,0.103,0.195,0.182,0.234c0.078,0.039,0.182,0.13,0.248,0.195c0.064,0.063,0.206,0.077,0.246,0.116c0.039,0.039,0.065,0.117,0.182,0.052c0.116-0.064,0.092-0.181,0.092-0.181s0.129-0.026,0.194,0.026c0.064,0.05,0.104,0.22,0.144,0.246c0.038,0.026,0.115,0.221,0.063,0.362c-0.051,0.145-0.038,0.286-0.091,0.286c-0.052,0-0.116,0.17-0.195,0.209c-0.076,0.039-0.285,0.221-0.272,0.286c0.013,0.063,0.131,0.258,0.104,0.35c-0.025,0.091-0.194,0.195-0.154,0.338c0.038,0.144,0.312,0.183,0.323,0.312c0.014,0.131,0.209,0.417,0.235,0.546c0.025,0.13,0.246,0.272,0.246,0.453c0,0.184,0.312,0.3,0.377,0.312c0.063,0.013,0.182,0.131,0.272,0.17s0.169,0.116,0.233,0.221s0.053,0.261,0.053,0.299c0,0.039-0.039,0.44-0.078,0.674C19.145,23.021,19.235,23.203,19.158,23.269zM10.766,11.188c0.039,0.013,0.117,0.091,0.156,0.091c0.04,0,0.234,0.156,0.286,0.208c0.053,0.052,0.053,0.195-0.013,0.208s-0.104-0.143-0.117-0.208c-0.013-0.065-0.143-0.065-0.208-0.104C10.805,11.344,10.66,11.152,10.766,11.188zM27.51,16.41c-0.144,0.182-0.13,0.272-0.195,0.286c-0.064,0.013,0.065,0.065,0.09,0.194c0.022,0.112-0.065,0.224,0.063,0.327c-0.486,4.619-3.71,8.434-8.016,9.787c-0.007-0.011-0.019-0.025-0.021-0.034c-0.027-0.078-0.027-0.233,0.064-0.285c0.091-0.053,0.312-0.233,0.363-0.272c0.052-0.04,0.13-0.221,0.091-0.247c-0.038-0.026-0.232,0-0.26-0.039c-0.026-0.039-0.026-0.092,0.104-0.182c0.13-0.091,0.195-0.222,0.247-0.26c0.052-0.039,0.155-0.117,0.195-0.209c0.038-0.09-0.041-0.039-0.118-0.039s-0.117-0.142-0.117-0.207s0.195,0.026,0.339,0.052c0.143,0.024,0.077-0.065,0.064-0.142c-0.013-0.078,0.026-0.209,0.105-0.17c0.076,0.039,0.479-0.013,0.531-0.026c0.052-0.013,0.194-0.246,0.246-0.312c0.053-0.065,0.064-0.129,0-0.168c-0.065-0.04-0.143-0.184-0.168-0.221c-0.026-0.041-0.039-0.274-0.013-0.34c0.025-0.063,0,0.377,0.181,0.43c0.183,0.052,0.286,0.078,0.455-0.078c0.169-0.155,0.298-0.26,0.312-0.363c0.013-0.104,0.052-0.209,0.117-0.246c0.065-0.039,0.104,0.103,0.182-0.065c0.078-0.17,0.156-0.157,0.234-0.299c0.077-0.144-0.13-0.325,0.024-0.43c0.157-0.103,0.43-0.233,0.43-0.233s0.078-0.039,0.234-0.078c0.155-0.038,0.324-0.014,0.376-0.09c0.052-0.079,0.104-0.247,0.182-0.338c0.079-0.092,0.169-0.234,0.13-0.299c-0.039-0.065,0.104-0.352,0.091-0.429c-0.013-0.078-0.13-0.261,0.065-0.416s0.402-0.391,0.416-0.454c0.012-0.065,0.169-0.338,0.154-0.469c-0.012-0.129-0.154-0.285-0.245-0.325c-0.092-0.037-0.286-0.05-0.364-0.154s-0.299-0.208-0.377-0.182c-0.077,0.026-0.208,0.051-0.312-0.015c-0.104-0.063-0.272-0.143-0.337-0.194c-0.066-0.051-0.234-0.09-0.312-0.09s-0.065-0.053-0.182,0.103c-0.117,0.157,0,0.209-0.208,0.182c-0.209-0.024,0.025-0.038,0.144-0.194c0.115-0.155-0.014-0.247-0.144-0.207c-0.13,0.039-0.039,0.117-0.247,0.156c-0.207,0.038-0.207-0.092-0.077-0.117c0.13-0.026,0.363-0.143,0.363-0.194c0-0.053-0.026-0.196-0.13-0.196s-0.078-0.129-0.233-0.297c-0.156-0.17-0.351-0.274-0.508-0.249c-0.154,0.026-0.272,0.065-0.35-0.076c-0.078-0.144-0.169-0.17-0.222-0.247c-0.051-0.078-0.182,0-0.221-0.039s-0.039-0.039-0.039-0.039s-0.169,0.039-0.077-0.078c0.09-0.117,0.129-0.338,0.09-0.325c-0.038,0.013-0.104,0.196-0.168,0.183c-0.064-0.013-0.014-0.04-0.144-0.117c-0.13-0.078-0.337-0.013-0.337,0.052c0,0.065-0.065,0.117-0.065,0.117s-0.039-0.038-0.078-0.117c-0.039-0.078-0.221-0.091-0.312-0.013c-0.09,0.078-0.142-0.196-0.207-0.196s-0.194,0.065-0.26,0.184c-0.064,0.116-0.038,0.285-0.092,0.272c-0.05-0.013-0.063-0.233-0.05-0.312c0.012-0.079,0.155-0.208,0.05-0.234c-0.103-0.026-0.259,0.13-0.323,0.143c-0.065,0.013-0.195,0.104-0.273,0.209c-0.077,0.103-0.116,0.168-0.195,0.207c-0.077,0.039-0.193,0-0.167-0.039c0.025-0.039-0.222-0.181-0.261-0.13c-0.04,0.052-0.155,0.091-0.272,0.144c-0.117,0.052-0.222-0.065-0.247-0.117s-0.079-0.064-0.091-0.234c-0.013-0.168,0.027-0.351,0.065-0.454c0.038-0.104-0.195-0.312-0.286-0.3c-0.091,0.015-0.182,0.105-0.272,0.091c-0.092-0.012-0.052-0.038-0.195-0.038c-0.143,0-0.026-0.025,0-0.143c0.025-0.116-0.052-0.273,0.092-0.377c0.142-0.104,0.091-0.351,0-0.363c-0.092-0.014-0.261,0.039-0.377,0.026c-0.116-0.014-0.208,0.091-0.169,0.207c0.039,0.117-0.065,0.195-0.104,0.183c-0.039-0.013-0.09-0.078-0.234,0.026c-0.142,0.103-0.194,0.064-0.337-0.052c-0.143-0.118-0.299-0.234-0.325-0.416c-0.026-0.182-0.04-0.364,0.013-0.468c0.051-0.104,0.051-0.285-0.026-0.312c-0.078-0.025,0.09-0.155,0.181-0.181c0.092-0.026,0.234-0.143,0.26-0.195c0.026-0.052,0.156-0.04,0.298-0.04c0.143,0,0.169,0,0.312,0.078c0.143,0.078,0.169-0.039,0.169-0.078c0-0.039,0.052-0.117,0.208-0.104c0.156,0.013,0.376-0.052,0.416-0.013s0.116,0.195,0.194,0.143c0.079-0.051,0.104-0.143,0.131,0.014c0.025,0.155,0.09,0.39,0.208,0.429c0.116,0.039,0.052,0.194,0.168,0.207c0.115,0.013,0.17-0.246,0.131-0.337c-0.04-0.09-0.118-0.363-0.183-0.428c-0.064-0.065-0.064-0.234,0.064-0.286c0.13-0.052,0.442-0.312,0.532-0.389c0.092-0.079,0.338-0.144,0.261-0.248c-0.078-0.104-0.104-0.168-0.104-0.247s0.078-0.052,0.117,0s0.194-0.078,0.155-0.143c-0.038-0.064-0.026-0.155,0.065-0.143c0.091,0.013,0.116-0.065,0.078-0.117c-0.039-0.052,0.091-0.117,0.182-0.091c0.092,0.026,0.325-0.013,0.364-0.065c0.038-0.052-0.078-0.104-0.078-0.208c0-0.104,0.155-0.195,0.247-0.208c0.091-0.013,0.207,0,0.221-0.039c0.012-0.039,0.143-0.143,0.155-0.052c0.014,0.091,0,0.247,0.104,0.247c0.104,0,0.232-0.117,0.272-0.129c0.038-0.013,0.286-0.065,0.338-0.078c0.052-0.013,0.363-0.039,0.325-0.13c-0.039-0.09-0.078-0.181-0.118-0.22c-0.039-0.039-0.077,0.013-0.13,0.078c-0.051,0.065-0.143,0.065-0.168,0.013c-0.026-0.051,0.012-0.207-0.078-0.156c-0.092,0.052-0.104,0.104-0.157,0.078c-0.052-0.026-0.103-0.117-0.103-0.117s0.129-0.064,0.038-0.182c-0.09-0.117-0.221-0.091-0.35-0.025c-0.13,0.064-0.118,0.051-0.273,0.09s-0.234,0.078-0.234,0.078s0.209-0.129,0.299-0.208c0.091-0.078,0.209-0.117,0.286-0.195c0.078-0.078,0.285,0.039,0.285,0.039s0.105-0.104,0.105-0.039s-0.027,0.234,0.051,0.234c0.079,0,0.299-0.104,0.21-0.131c-0.093-0.026,0.129,0,0.219-0.065c0.092-0.065,0.194-0.065,0.247-0.09c0.052-0.026,0.092-0.143,0.182-0.143c0.092,0,0.13,0.117,0,0.195s-0.143,0.273-0.208,0.325c-0.064,0.052-0.026,0.117,0.078,0.104c0.104-0.013,0.194,0.013,0.286-0.013s0.143,0.026,0.168,0.065c0.026,0.039,0.104-0.039,0.104-0.039s0.169-0.039,0.221,0.026c0.053,0.064,0.092-0.039,0.053-0.104c-0.039-0.064-0.092-0.129-0.13-0.208c-0.039-0.078-0.091-0.104-0.194-0.078c-0.104,0.026-0.13-0.026-0.195-0.064c-0.065-0.04-0.118,0.052-0.065-0.04c0.053-0.09,0.078-0.117,0.117-0.195c0.039-0.078,0.209-0.221,0.039-0.259c-0.169-0.04-0.222-0.065-0.247-0.143c-0.026-0.078-0.221-0.221-0.272-0.221c-0.053,0-0.233,0-0.247-0.065c-0.013-0.065-0.143-0.208-0.208-0.273c-0.064-0.065-0.312-0.351-0.351-0.377c-0.039-0.026-0.091-0.013-0.208,0.143c-0.116,0.157-0.22,0.183-0.312,0.144c-0.091-0.039-0.104-0.026-0.193-0.13c-0.093-0.104,0.09-0.117,0.051-0.182c-0.04-0.064-0.247-0.091-0.377-0.104c-0.13-0.013-0.221-0.156-0.416-0.169c-0.194-0.013-0.428,0.026-0.493,0.026c-0.064,0-0.064,0.091-0.09,0.234c-0.027,0.143,0.09,0.182-0.027,0.208c-0.116,0.026-0.169,0.039-0.052,0.091c0.117,0.052,0.273,0.26,0.273,0.26s0,0.117-0.092,0.182c-0.09,0.065-0.182,0.13-0.233,0.053c-0.053-0.079-0.195-0.065-0.155,0.013c0.038,0.078,0.116,0.117,0.116,0.195c0,0.077,0.117,0.272,0.039,0.337c-0.078,0.065-0.168,0.014-0.233,0.026s-0.131-0.104-0.078-0.13c0.051-0.026-0.014-0.221-0.014-0.221s-0.155,0.221-0.143,0.104c0.014-0.117-0.064-0.13-0.064-0.221c0-0.091-0.079-0.13-0.194-0.104c-0.118,0.026-0.26-0.04-0.482-0.079c-0.22-0.039-0.311-0.064-0.493-0.156c-0.182-0.091-0.247-0.026-0.338-0.013c-0.091,0.013-0.052-0.182-0.169-0.207c-0.116-0.027-0.181,0.025-0.207-0.144c-0.026-0.168,0.039-0.208,0.324-0.39c0.286-0.182,0.247-0.26,0.468-0.286c0.22-0.026,0.325,0.026,0.325-0.039s0.052-0.325,0.052-0.195S16.95,9.109,16.832,9.2c-0.116,0.091-0.052,0.104,0.04,0.104c0.091,0,0.259-0.091,0.259-0.091s0.208-0.091,0.26-0.013c0.053,0.078,0.053,0.156,0.144,0.156s0.285-0.104,0.116-0.195c-0.168-0.091-0.272-0.078-0.376-0.182s-0.078-0.065-0.195-0.039c-0.116,0.026-0.116-0.039-0.156-0.039s-0.104,0.026-0.13-0.026c-0.025-0.052,0.014-0.065,0.145-0.065c0.129,0,0.285,0.039,0.285,0.039s0.155-0.052,0.194-0.065c0.039-0.013,0.247-0.039,0.208-0.155c-0.04-0.117-0.169-0.117-0.208-0.156s0.078-0.09,0.143-0.117c0.065-0.026,0.247,0,0.247,0s0.117,0.013,0.117-0.039S17.897,8.2,17.976,8.239s0,0.156,0.117,0.13c0.116-0.026,0.143,0,0.207,0.039c0.065,0.039-0.013,0.195-0.077,0.221c-0.065,0.025-0.169,0.077-0.026,0.09c0.144,0.014,0.246,0.014,0.246,0.014s0.092-0.091,0.131-0.169c0.038-0.078,0.104-0.026,0.155,0c0.052,0.025,0.247,0.065,0.065,0.117c-0.183,0.052-0.221,0.117-0.26,0.182c-0.038,0.065-0.053,0.104-0.221,0.065c-0.17-0.039-0.26-0.026-0.299,0.039c-0.039,0.064-0.013,0.273,0.053,0.247c0.063-0.026,0.129-0.026,0.207-0.052c0.078-0.026,0.39,0.026,0.467,0.013c0.078-0.013,0.209,0.13,0.248,0.104c0.039-0.026,0.117,0.052,0.194,0.104c0.078,0.052,0.052-0.117,0.194-0.013c0.144,0.104,0.065,0.104,0.144,0.104c0.076,0,0.246,0.013,0.246,0.013s0.014-0.129,0.144-0.104c0.13,0.026,0.245,0.169,0.232,0.064c-0.012-0.103,0.013-0.181-0.09-0.259c-0.104-0.078-0.272-0.13-0.299-0.169c-0.026-0.039-0.052-0.091-0.013-0.117c0.039-0.025,0.221,0.013,0.324,0.079c0.104,0.065,0.195,0.13,0.273,0.078c0.077-0.052,0.17-0.078,0.208-0.117c0.038-0.04,0.13-0.156,0.13-0.156s-0.391-0.051-0.441-0.117c-0.053-0.065-0.235-0.156-0.287-0.156s-0.194,0.091-0.246-0.039s-0.052-0.286-0.105-0.299c-0.05-0.013-0.597-0.091-0.674-0.13c-0.078-0.039-0.39-0.13-0.507-0.195s-0.286-0.156-0.389-0.156c-0.104,0-0.533,0.052-0.611,0.039c-0.078-0.013-0.312,0.026-0.403,0.039c-0.091,0.013,0.117,0.182-0.077,0.221c-0.195,0.039-0.169,0.065-0.13-0.13c0.038-0.195-0.131-0.247-0.299-0.169c-0.169,0.078-0.442,0.13-0.377,0.221c0.065,0.091-0.012,0.157,0.117,0.247c0.13,0.091,0.183,0.117,0.35,0.104c0.17-0.013,0.339,0.025,0.339,0.025s0,0.157-0.064,0.182c-0.065,0.026-0.169,0.026-0.196,0.104c-0.025,0.078-0.155,0.117-0.155,0.078s0.065-0.169-0.026-0.234c-0.09-0.065-0.117-0.078-0.221-0.013c-0.104,0.065-0.116,0.091-0.169-0.013C16.053,8.291,15.897,8.2,15.897,8.2s-0.104-0.129-0.182-0.194c-0.077-0.065-0.22-0.052-0.234,0.013c-0.013,0.064,0.026,0.129,0.078,0.247c0.052,0.117,0.104,0.337,0.013,0.351c-0.091,0.013-0.104,0.026-0.195,0.052c-0.091,0.026-0.13-0.039-0.13-0.143s-0.04-0.195-0.013-0.234c0.026-0.039-0.104,0.027-0.234,0c-0.13-0.025-0.233,0.052-0.104,0.092c0.13,0.039,0.157,0.194,0.039,0.233c-0.117,0.039-0.559,0-0.702,0s-0.35,0.039-0.39-0.039c-0.039-0.078,0.118-0.129,0.208-0.129c0.091,0,0.363,0.012,0.467-0.13c0.104-0.143-0.13-0.169-0.233-0.169c-0.104,0-0.183-0.039-0.299-0.155c-0.118-0.117,0.078-0.195,0.052-0.247c-0.026-0.052-0.156-0.014-0.272-0.014c-0.117,0-0.299-0.09-0.299,0.014c0,0.104,0.143,0.402,0.052,0.337c-0.091-0.064-0.078-0.156-0.143-0.234c-0.065-0.078-0.168-0.065-0.299-0.052c-0.129,0.013-0.35,0.052-0.415,0.039c-0.064-0.013-0.013-0.013-0.156-0.078c-0.142-0.065-0.208-0.052-0.312-0.117C12.091,7.576,12.182,7.551,12,7.538c-0.181-0.013-0.168,0.09-0.35,0.065c-0.182-0.026-0.234,0.013-0.416,0c-0.182-0.013-0.272-0.026-0.299,0.065c-0.025,0.091-0.078,0.247-0.156,0.247c-0.077,0-0.169,0.091,0.078,0.104c0.247,0.013,0.105,0.129,0.325,0.117c0.221-0.013,0.416-0.013,0.468-0.117c0.052-0.104,0.091-0.104,0.117-0.065c0.025,0.039,0.22,0.272,0.22,0.272s0.131,0.104,0.183,0.13c0.051,0.026-0.052,0.143-0.156,0.078c-0.104-0.065-0.299-0.051-0.377-0.116c-0.078-0.065-0.429-0.065-0.52-0.052c-0.09,0.013-0.247-0.039-0.299-0.039c-0.051,0-0.221,0.13-0.221,0.13S10.532,8.252,10.494,8.2c-0.039-0.052-0.104,0.052-0.156,0.065c-0.052,0.013-0.208-0.104-0.364-0.052C9.818,8.265,9.87,8.317,9.649,8.304s-0.272-0.052-0.35-0.039C9.22,8.278,9.22,8.278,9.22,8.278S9.233,8.33,9.143,8.382C9.052,8.434,8.986,8.499,8.921,8.421C8.857,8.343,8.818,8.343,8.779,8.33c-0.04-0.013-0.118-0.078-0.286-0.04C8.324,8.33,8.064,8.239,8.013,8.239c-0.04,0-0.313-0.015-0.491-0.033c2.109-2.292,5.124-3.74,8.478-3.74c2.128,0,4.117,0.589,5.83,1.598c-0.117,0.072-0.319,0.06-0.388,0.023c-0.078-0.043-0.158-0.078-0.475-0.061c-0.317,0.018-0.665,0.122-0.595,0.226c0.072,0.104-0.142,0.165-0.197,0.113c-0.055-0.052-0.309,0.06-0.293,0.165c0.016,0.104-0.039,0.225-0.175,0.199c-0.134-0.027-0.229,0.06-0.237,0.146c-0.007,0.087-0.309,0.147-0.332,0.147c-0.024,0-0.412-0.008-0.27,0.095c0.097,0.069,0.15,0.027,0.27,0.052c0.119,0.026,0.214,0.217,0.277,0.243c0.062,0.026,0.15,0,0.189-0.052c0.04-0.052,0.095-0.234,0.095-0.234s0,0.173,0.097,0.208c0.095,0.035,0.331-0.026,0.395-0.017c0.064,0.008,0.437,0.061,0.538,0.112c0.104,0.052,0.356,0.087,0.428,0.199c0.071,0.113,0.08,0.503,0.119,0.546c0.04,0.043,0.174-0.139,0.205-0.182c0.031-0.044,0.198-0.018,0.254,0.042c0.056,0.061,0.182,0.208,0.175,0.269C21.9,8.365,21.877,8.459,21.83,8.425c-0.048-0.034-0.127-0.025-0.096-0.095c0.032-0.069,0.048-0.217-0.015-0.217c-0.064,0-0.119,0-0.119,0s-0.12-0.035-0.199,0.095s-0.015,0.26,0.04,0.26s0.184,0,0.184,0.034c0,0.035-0.136,0.139-0.128,0.2c0.009,0.061,0.11,0.268,0.144,0.312c0.031,0.043,0.197,0.086,0.244,0.096c0.049,0.008-0.111,0.017-0.07,0.077c0.04,0.061,0.102,0.208,0.189,0.243c0.087,0.035,0.333,0.19,0.363,0.26c0.032,0.069,0.222-0.052,0.262-0.061c0.04-0.008,0.032,0.182,0.143,0.191c0.11,0.008,0.15-0.018,0.245-0.096s0.072-0.182,0.079-0.26c0.009-0.078,0-0.138,0.104-0.113c0.104,0.026,0.158-0.018,0.15-0.104c-0.008-0.087-0.095-0.191,0.07-0.217c0.167-0.026,0.254-0.138,0.357-0.138c0.103,0,0.389,0.043,0.419,0c0.032-0.043,0.167-0.243,0.254-0.251c0.067-0.007,0.224-0.021,0.385-0.042c1.582,1.885,2.561,4.284,2.673,6.905c-0.118,0.159-0.012,0.305,0.021,0.408c0.001,0.03,0.005,0.058,0.005,0.088c0,0.136-0.016,0.269-0.021,0.404C27.512,16.406,27.512,16.408,27.51,16.41zM17.794,12.084c-0.064,0.013-0.169-0.052-0.169-0.143s-0.091,0.169-0.04,0.247c0.053,0.078-0.104,0.169-0.155,0.169s-0.091-0.116-0.078-0.233c0.014-0.117-0.077-0.221-0.221-0.208c-0.143,0.014-0.208,0.13-0.259,0.169c-0.053,0.039-0.053,0.259-0.04,0.312s0.013,0.235-0.116,0.221c-0.118-0.013-0.092-0.233-0.079-0.312c0.014-0.078-0.039-0.273,0.014-0.376c0.053-0.104,0.207-0.143,0.312-0.156s0.324,0.065,0.363,0.052c0.04-0.014,0.222-0.014,0.312,0C17.729,11.837,17.858,12.071,17.794,12.084zM18.027,12.123c0.04,0.026,0.311-0.039,0.364,0.026c0.051,0.065-0.054,0.078-0.183,0.13c-0.129,0.052-0.169,0.039-0.221,0.104s-0.221,0.09-0.299,0.168c-0.078,0.079-0.217,0.125-0.246,0.065c-0.04-0.078,0.013-0.039,0.025-0.078c0.013-0.039,0.245-0.129,0.245-0.129S17.988,12.097,18.027,12.123zM16.988,11.668c-0.038,0.013-0.182-0.026-0.3-0.026c-0.116,0-0.091-0.078-0.143-0.064c-0.051,0.013-0.168,0.039-0.247,0.078c-0.078,0.039-0.208,0.03-0.208-0.04c0-0.104,0.052-0.078,0.221-0.143c0.169-0.065,0.352-0.247,0.429-0.169c0.078,0.078,0.221,0.169,0.312,0.182C17.144,11.5,17.026,11.655,16.988,11.668zM15.659,7.637c-0.079,0.026-0.347,0.139-0.321,0.199c0.01,0.023,0.078,0.069,0.19,0.052c0.113-0.018,0.276-0.035,0.355-0.043c0.078-0.009,0.095-0.139,0.009-0.147C15.805,7.689,15.736,7.611,15.659,7.637zM14.698,7.741c-0.061,0.026-0.243-0.043-0.338,0.018c-0.061,0.038-0.026,0.164,0.07,0.172c0.095,0.009,0.259-0.06,0.276-0.008c0.018,0.052,0.078,0.286,0.234,0.208c0.156-0.078,0.147-0.147,0.19-0.156c0.043-0.009-0.008-0.199-0.078-0.243C14.983,7.689,14.758,7.715,14.698,7.741zM14.385,7.005c0.017,0.044-0.008,0.078,0.113,0.095c0.121,0.018,0.173,0.035,0.243,0.035c0.069,0,0.042-0.113-0.018-0.19c-0.061-0.078-0.043-0.069-0.199-0.113c-0.156-0.043-0.312-0.043-0.416-0.035c-0.104,0.009-0.217-0.017-0.243,0.104c-0.013,0.062,0.07,0.112,0.174,0.112S14.368,6.962,14.385,7.005zM14.611,7.481c0.043,0.095,0.043,0.051,0.165,0.061C14.896,7.551,14.991,7.421,15,7.378c0.009-0.044-0.061-0.13-0.225-0.113c-0.165,0.017-0.667-0.026-0.736,0.034c-0.066,0.058,0,0.233-0.026,0.251c-0.026,0.017,0.009,0.095,0.077,0.078c0.069-0.017,0.104-0.182,0.157-0.182C14.299,7.447,14.568,7.386,14.611,7.481zM12.982,7.126c0.052,0.043,0.183,0.008,0.173-0.035c-0.008-0.043,0.053-0.217-0.051-0.225C13,6.858,12.854,6.962,12.697,7.014c-0.101,0.033-0.078,0.13-0.009,0.13S12.931,7.083,12.982,7.126zM13.72,7.282c-0.087,0.043-0.114,0.069-0.191,0.052c-0.078-0.017-0.078-0.156-0.217-0.13c-0.138,0.026-0.164,0.104-0.207,0.139s-0.139,0.061-0.173,0.043c-0.034-0.017-0.234-0.129-0.234-0.129s-0.416-0.018-0.433-0.07c-0.017-0.052-0.086-0.138-0.277-0.121s-0.52,0.13-0.572,0.13c-0.052,0,0.062,0.104-0.009,0.104c-0.069,0-0.155-0.008-0.181,0.069c-0.018,0.053,0.078,0.052,0.189,0.052c0.112,0,0.295,0,0.347-0.026c0.052-0.026,0.312-0.087,0.303-0.009c-0.009,0.079,0.104,0.199,0.164,0.182c0.061-0.017,0.183-0.13,0.243-0.086c0.061,0.043,0.07,0.146,0.13,0.173c0.061,0.025,0.226,0.025,0.304,0c0.077-0.027,0.294-0.027,0.389-0.009c0.095,0.018,0.373,0.069,0.399,0.018c0.026-0.053,0.104-0.061,0.112-0.113s0.051-0.216,0.051-0.216S13.806,7.239,13.72,7.282zM18.105,16.239c-0.119,0.021-0.091,0.252,0.052,0.21C18.3,16.407,18.223,16.217,18.105,16.239zM19.235,15.929c-0.104-0.026-0.221,0-0.299,0.013c-0.078,0.013-0.299,0.208-0.299,0.208s0.143,0.026,0.233,0.026c0.092,0,0.144,0.051,0.221,0.09c0.078,0.04,0.221-0.052,0.272-0.052c0.053,0,0.118,0.156,0.131-0.013C19.508,16.032,19.339,15.955,19.235,15.929zM15.616,7.507c-0.043-0.104-0.259-0.139-0.304-0.035C15.274,7.563,15.659,7.611,15.616,7.507zM18.093,15.292c0.143-0.026,0.064-0.144-0.053-0.13C17.922,15.175,17.949,15.318,18.093,15.292zM19.82,16.095c-0.119,0.022-0.092,0.253,0.051,0.211C20.015,16.264,19.937,16.074,19.82,16.095zM18.247,15.708c-0.09,0.013-0.285-0.09-0.389-0.182c-0.104-0.091-0.299-0.091-0.377-0.091c-0.077,0-0.39,0.091-0.39,0.091c-0.013,0.13,0.117,0.091,0.273,0.091s0.429-0.026,0.479,0.039c0.053,0.064,0.286,0.168,0.352,0.221c0.064,0.052,0.272,0.065,0.285,0.013S18.338,15.695,18.247,15.708zM16.698,7.412c-0.13-0.009-0.295-0.009-0.399,0c-0.104,0.008-0.182-0.069-0.26-0.113c-0.077-0.043-0.251-0.182-0.354-0.199c-0.104-0.017-0.086-0.017-0.303-0.069c-0.11-0.027-0.294-0.061-0.294-0.086c0-0.026-0.052,0.121,0.043,0.165c0.095,0.043,0.251,0.121,0.363,0.164c0.114,0.043,0.329,0.052,0.399,0.139c0.069,0.086,0.303,0.156,0.303,0.156l0.277,0.026c0,0,0.191-0.043,0.39-0.026c0.199,0.017,0.493,0.043,0.659,0.035c0.163-0.008,0.189-0.061,0.208-0.095c0.016-0.035-0.304-0.104-0.383-0.095C17.271,7.42,16.827,7.42,16.698,7.412zM17.182,9.404c-0.034,0.039,0.157,0.095,0.191,0.043C17.407,9.396,17.271,9.309,17.182,9.404zM17.764,9.585c0.086-0.035,0.043-0.139-0.079-0.104C17.547,9.521,17.676,9.62,17.764,9.585z'</body><body package="Roassal2-Shapes">arrowLeft	^ 'M20.834,8.037L9.641,14.5c-1.43,0.824-1.43,2.175,0,3l11.193,6.463c1.429,0.826,2.598,0.15,2.598-1.5V9.537C23.432,7.887,22.263,7.211,20.834,8.037z'</body><body package="Roassal2-Shapes">arrowRight	^ 'M11.166,23.963L22.359,17.5c1.43-0.824,1.43-2.175,0-3L11.166,8.037c-1.429-0.826-2.598-0.15-2.598,1.5v12.926C8.568,24.113,9.737,24.789,11.166,23.963z'</body><body package="Roassal2-Shapes">puzzlePiece	^ 'M3.739,13.619c0,0,3.516-4.669,5.592-3.642c2.077,1.027-0.414,2.795,1.598,3.719c2.011,0.924,5.048-0.229,4.376-2.899c-0.672-2.67-1.866-0.776-2.798-2.208c-0.934-1.432,4.586-4.59,4.586-4.59s3.361,6.651,4.316,4.911c1.157-2.105,3.193-4.265,5.305-1.025c0,0,1.814,2.412,0.246,3.434s-2.917,0.443-3.506,1.553c-0.586,1.112,3.784,4.093,3.784,4.093s-2.987,4.81-4.926,3.548c-1.939-1.262,0.356-3.364-2.599-3.989c-1.288-0.23-3.438,0.538-3.818,2.34c-0.13,2.709,1.604,2.016,2.797,3.475c1.191,1.457-4.484,4.522-4.484,4.522s-1.584-3.923-3.811-4.657c-2.227-0.735-0.893,2.135-2.917,2.531c-2.024,0.396-4.816-2.399-3.46-4.789c1.358-2.391,3.275-0.044,3.441-1.951C7.629,16.087,3.739,13.619,3.739,13.619z'</body><body package="Roassal2-Shapes">supermarketCart	^ 'M29.02,11.754L8.416,9.473L7.16,4.716C7.071,4.389,6.772,4.158,6.433,4.158H3.341C3.114,3.866,2.775,3.667,2.377,3.667c-0.686,0-1.242,0.556-1.242,1.242c0,0.686,0.556,1.242,1.242,1.242c0.399,0,0.738-0.201,0.965-0.493h2.512l5.23,19.8c-0.548,0.589-0.891,1.373-0.891,2.242c0,1.821,1.473,3.293,3.293,3.293c1.82,0,3.294-1.472,3.297-3.293c0-0.257-0.036-0.504-0.093-0.743h5.533c-0.056,0.239-0.092,0.486-0.092,0.743c0,1.821,1.475,3.293,3.295,3.293s3.295-1.472,3.295-3.293c0-1.82-1.473-3.295-3.295-3.297c-0.951,0.001-1.801,0.409-2.402,1.053h-7.136c-0.601-0.644-1.451-1.052-2.402-1.053c-0.379,0-0.738,0.078-1.077,0.196l-0.181-0.685H26.81c1.157-0.027,2.138-0.83,2.391-1.959l1.574-7.799c0.028-0.145,0.041-0.282,0.039-0.414C30.823,12.733,30.051,11.86,29.02,11.754zM25.428,27.994c-0.163,0-0.295-0.132-0.297-0.295c0.002-0.165,0.134-0.297,0.297-0.297s0.295,0.132,0.297,0.297C25.723,27.862,25.591,27.994,25.428,27.994zM27.208,20.499l0.948-0.948l-0.318,1.578L27.208,20.499zM12.755,11.463l1.036,1.036l-1.292,1.292l-1.292-1.292l1.087-1.087L12.755,11.463zM17.253,11.961l0.538,0.538l-1.292,1.292l-1.292-1.292l0.688-0.688L17.253,11.961zM9.631,14.075l0.868-0.868l1.292,1.292l-1.292,1.292l-0.564-0.564L9.631,14.075zM9.335,12.956l-0.328-1.24L9.792,12.5L9.335,12.956zM21.791,16.499l-1.292,1.292l-1.292-1.292l1.292-1.292L21.791,16.499zM21.207,14.5l1.292-1.292l1.292,1.292l-1.292,1.292L21.207,14.5zM18.5,15.791l-1.293-1.292l1.292-1.292l1.292,1.292L18.5,15.791zM17.791,16.499L16.5,17.791l-1.292-1.292l1.292-1.292L17.791,16.499zM14.499,15.791l-1.292-1.292l1.292-1.292l1.292,1.292L14.499,15.791zM13.791,16.499l-1.292,1.291l-1.292-1.291l1.292-1.292L13.791,16.499zM10.499,17.207l1.292,1.292l-0.785,0.784l-0.54-2.044L10.499,17.207zM11.302,20.404l1.197-1.197l1.292,1.292L12.5,21.791l-1.131-1.13L11.302,20.404zM13.208,18.499l1.291-1.292l1.292,1.292L14.5,19.791L13.208,18.499zM16.5,19.207l1.292,1.292L16.5,21.79l-1.292-1.291L16.5,19.207zM17.208,18.499l1.292-1.292l1.291,1.292L18.5,19.79L17.208,18.499zM20.499,19.207l1.292,1.292L20.5,21.79l-1.292-1.292L20.499,19.207zM21.207,18.499l1.292-1.292l1.292,1.292l-1.292,1.292L21.207,18.499zM23.207,16.499l1.292-1.292l1.292,1.292l-1.292,1.292L23.207,16.499zM25.207,14.499l1.292-1.292L27.79,14.5l-1.291,1.292L25.207,14.499zM24.499,13.792l-1.156-1.156l2.082,0.23L24.499,13.792zM21.791,12.5l-1.292,1.292L19.207,12.5l0.29-0.29l2.253,0.25L21.791,12.5zM14.5,11.791l-0.152-0.152l0.273,0.03L14.5,11.791zM10.5,11.792l-0.65-0.65l1.171,0.129L10.5,11.792zM14.5,21.207l1.205,1.205h-2.409L14.5,21.207zM18.499,21.207l1.206,1.206h-2.412L18.499,21.207zM22.499,21.207l1.208,1.207l-2.414-0.001L22.499,21.207zM23.207,20.499l1.292-1.292l1.292,1.292l-1.292,1.292L23.207,20.499zM25.207,18.499l1.292-1.291l1.291,1.291l-1.291,1.292L25.207,18.499zM28.499,17.791l-1.291-1.292l1.291-1.291l0.444,0.444l-0.429,2.124L28.499,17.791zM29.001,13.289l-0.502,0.502l-0.658-0.658l1.016,0.112C28.911,13.253,28.956,13.271,29.001,13.289zM13.487,27.994c-0.161,0-0.295-0.132-0.295-0.295c0-0.165,0.134-0.297,0.295-0.297c0.163,0,0.296,0.132,0.296,0.297C13.783,27.862,13.651,27.994,13.487,27.994zM26.81,22.414h-1.517l1.207-1.207l0.93,0.93C27.243,22.306,27.007,22.428,26.81,22.414z'</body></methods><methods><class-id>Roassal2.RTAxisConfiguration</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">adjustNumberOfTicksAndLabelsIfNecessaryPriorityOnLabels	"This methods is called after each change of the number of ticks or labels. 	The rule is that an axis config cannot have more than labels than ticks"	"Cannot have more labels than ticks"	"The number of labels remains fixed"		self numberOfTicks &lt; self numberOfLabels		ifTrue: [ self numberOfTicks: self numberOfLabels ]</body><body package="Roassal2-Builder-Grapher-Core">adjustNumberOfTicksAndLabelsIfNecessaryPriorityOnTicks	"This methods is called after each change of the number of ticks or labels. 	The rule is that an axis config cannot have more than labels than ticks"	"Cannot have more labels than ticks"	"The number of ticks remains fixed"			self numberOfTicks &lt; self numberOfLabels		ifTrue: [ self numberOfLabels: self numberOfTicks ]</body><body package="Roassal2-Builder-Grapher-Core">builder	^ builder</body><body package="Roassal2-Builder-Grapher-Core">builder: anObject	builder := anObject</body><body package="Roassal2-Builder-Grapher-Core">color	"Return the color of the axis"	^ color</body><body package="Roassal2-Builder-Grapher-Core">color: aColor	"Set the color of the axis"	color := aColor</body><body package="Roassal2-Builder-Grapher-Core">fromPoint	^ fromPoint</body><body package="Roassal2-Builder-Grapher-Core">fromPoint: aPoint	fromPoint := aPoint</body><body package="Roassal2-Builder-Grapher-Core">labelConversion	^ labelConvertion</body><body package="Roassal2-Builder-Grapher-Core">labelConversion: aOneArgBlock	"The argument is a one arg block taking the numerical value and returning another numerical value or a string	#labelConversion: can be used to move the orgin of the graph. For example:-=-=-=-=	values := #(  5 6 10 10 20 22 23   5 6 10 10 20 22 23  5 6 10 10 20 22 23).    lo := values min.    hi := values max.    ds := RTData new.    ds points: values.	ds y: [ :value | value - lo ].    ds dotShape ellipse         color: (Color blue alpha: 0.3).    ds connectColor: Color blue.    b := RTGrapher new.    b add: ds.     b axisX noLabel; numberOfTicks: (values size / 10).    b axisY numberOfTicks: 5.    b axisY labelConversion: [ :v | v + lo ].    ^ b-=-=-=-=	"			labelConvertion := aOneArgBlock</body><body package="Roassal2-Builder-Grapher-Core">labelFontHeight	^ labelFontHeight</body><body package="Roassal2-Builder-Grapher-Core">labelFontHeight: aFontSize	"Values between 6 and 20 are typically acceptable"	labelFontHeight := aFontSize</body><body package="Roassal2-Builder-Grapher-Core">labelRotation	"Return the rotation of the label"	^ labelRotation</body><body package="Roassal2-Builder-Grapher-Core">lineThickness	^ lineThickness</body><body package="Roassal2-Builder-Grapher-Core">lineThickness: lineThicknessInPixels	lineThickness := lineThicknessInPixels</body><body package="Roassal2-Builder-Grapher-Core">maxValue	^ maxValue</body><body package="Roassal2-Builder-Grapher-Core">maxValue: aMaxValue	"Do not use this to set the maximum. Instead, use RTGrapher&gt;&gt;maxX:, minX:, maxY:, minY:"	maxValueManuallySet := true.	self privateMaxValue: aMaxValue</body><body package="Roassal2-Builder-Grapher-Core">maxValueIfNotSet: aMinValue	self maxValue: (aMinValue max: maxValue)</body><body package="Roassal2-Builder-Grapher-Core">minValue	^ minValue</body><body package="Roassal2-Builder-Grapher-Core">minValue: aMinValue	"Do not use this to set the maximum. Instead, use RTGrapher&gt;&gt;maxX:, minX:, maxY:, minY:"	minValueManuallySet := true.	self privateMinValue: aMinValue</body><body package="Roassal2-Builder-Grapher-Core">minValueIfNotSet: aMinValue	self minValue: (aMinValue min: minValue)</body><body package="Roassal2-Builder-Grapher-Core">numberOfLabels	^ numberOfLabels</body><body package="Roassal2-Builder-Grapher-Core">numberOfLabels: aValue	"Set the number of labels the axis should contains. In case that the number of ticks is less than the number of labels, then an adjustment is made"	numberOfLabels := aValue.	self adjustNumberOfTicksAndLabelsIfNecessaryPriorityOnLabels.</body><body package="Roassal2-Builder-Grapher-Core">numberOfTicks	^ numberOfTicks</body><body package="Roassal2-Builder-Grapher-Core">numberOfTicks: aValue	"Set the number of ticks the axis should contains. In case that the number of ticks is less than the number of labels, then an adjustment is made"	numberOfTicks := aValue.	self adjustNumberOfTicksAndLabelsIfNecessaryPriorityOnTicks</body><body package="Roassal2-Builder-Grapher-Core">positionLabel	^ positionLabel</body><body package="Roassal2-Builder-Grapher-Core">positionLabel: aTwoArgBlock	"This method expect a two argblock to set where the label should be"	"eg. [ :aLabel :aTick | aLabel translateTo: aTick position + (0 @ 15) ]"	positionLabel := aTwoArgBlock</body><body package="Roassal2-Builder-Grapher-Core">privateMaxValue: aMaxValue	maxValue := aMaxValue</body><body package="Roassal2-Builder-Grapher-Core">privateMinValue: aMinValue	minValue := aMinValue</body><body package="Roassal2-Builder-Grapher-Core">scaleTransformation	^ scaleTransformation</body><body package="Roassal2-Builder-Grapher-Core">scaleTransformation: anObject	scaleTransformation := anObject</body><body package="Roassal2-Builder-Grapher-Core">step	"Return the step between each tick"		^ (self maxValue - self minValue) / self numberOfTicks."	| s |	s := (self maxValue - self minValue) / self numberOfTicks.	((self minValue to: self maxValue by: s) includes: 0.0) ifTrue: [ ^ s ].		numberOfTicks := numberOfTicks + 1.	s := (self maxValue - self minValue) / self numberOfTicks.	self maxValue: (self maxValue / s) asInteger * s. 	s := (self maxValue - self minValue) / self numberOfTicks.	^ s"</body><body package="Roassal2-Builder-Grapher-Core">tickIntervalForLabel	^ numberOfTicks / numberOfLabels</body><body package="Roassal2-Builder-Grapher-Core">tickLabelOffset: aPoint	"Specify the offset between the tick and its label"	self positionLabel: [ :aLabel :aTick | aLabel translateTo: aTick position + aPoint ].</body><body package="Roassal2-Builder-Grapher-Core">ticksCentered	^ ticksCentered</body><body package="Roassal2-Builder-Grapher-Core">ticksCentered: aBoolean	ticksCentered := aBoolean.</body><body package="Roassal2-Builder-Grapher-Core">title	^ title</body><body package="Roassal2-Builder-Grapher-Core">title: aTitleAsString	title := aTitleAsString</body><body package="Roassal2-Builder-Grapher-Core">titlePosition	^ titlePosition</body><body package="Roassal2-Builder-Grapher-Core">titlePosition: aPoint	"Set the position of the title according to the toPosition when rendering the axis"	"The argument is added to the toPosition"	titlePosition := aPoint</body><body package="Roassal2-Builder-Grapher-Core">toPoint	^ toPoint</body><body package="Roassal2-Builder-Grapher-Core">toPoint: anObject	toPoint := anObject</body></methods><methods><class-id>Roassal2.RTAxisConfiguration</class-id> <category>configuration</category><body package="Roassal2-Builder-Grapher-Core">decimal: anInteger	"Set the number of decimals"	self labelConversion: [ :number | number asFloat round: anInteger ]</body><body package="Roassal2-Builder-Grapher-Core">defaultColor	^ Color gray</body><body package="Roassal2-Builder-Grapher-Core">defaultTitlePosition	^ 0 @ 20</body><body package="Roassal2-Builder-Grapher-Core">doNotRotateLabels	labelRotation := 0</body><body package="Roassal2-Builder-Grapher-Core">labelRotation: rotationAsDegrees	"Rotate the labels"	labelRotation := rotationAsDegrees</body><body package="Roassal2-Builder-Grapher-Core">noDecimal	"Make the axis labels without decimal"	self labelConversion: [ :number | number asInteger ]</body><body package="Roassal2-Builder-Grapher-Core">noLabel	self numberOfLabels: 0</body><body package="Roassal2-Builder-Grapher-Core">noThousandsSeparator	thousandsSeparator := false</body><body package="Roassal2-Builder-Grapher-Core">noTick	self numberOfTicks: 0</body><body package="Roassal2-Builder-Grapher-Core">noTitle	self title: ''</body><body package="Roassal2-Builder-Grapher-Core">normalFontSize	self labelFontHeight: 12</body><body package="Roassal2-Builder-Grapher-Core">oneDecimal	self decimal: 1</body><body package="Roassal2-Builder-Grapher-Core">plain	"Make the axis a plain line"	self noLabel; noTick</body><body package="Roassal2-Builder-Grapher-Core">rotateLabels	"Rotate the labels"	labelRotation := -45</body><body package="Roassal2-Builder-Grapher-Core">smallFontSize	self labelFontHeight: 9</body><body package="Roassal2-Builder-Grapher-Core">twoDecimals	self decimal: 2</body><body package="Roassal2-Builder-Grapher-Core">withThousandsSeparator	"Make the labels on the axis using comma separatation of thousands"	self labelConversion: [ :number | number asInteger asStringWithCommas ]</body></methods><methods><class-id>Roassal2.RTAxisConfiguration</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	labelConvertion := [ :number | (number asFloat round: 2) asString ].	positionLabel := [ :aLabel :aTick | aLabel translateTo: aTick position ].	self smallFontSize.	numberOfTicks := 4.	numberOfLabels := numberOfTicks.	lineThickness := 1.	minValue := 0.	maxValue := 0.	maxValueManuallySet := false.	minValueManuallySet := false.	self twoDecimals.	self noThousandsSeparator.	self noTitle.	color := self defaultColor.	titlePosition := self defaultTitlePosition.	self doNotRotateLabels.	ticksCentered := false.	scaleTransformation := #yourself</body></methods><methods><class-id>Roassal2.RTAxisConfiguration</class-id> <category>action</category><body package="Roassal2-Builder-Grapher-Core">getStringFromNumber: aNumber	^ (self labelConversion rtValue: aNumber) asString</body></methods><methods><class-id>Roassal2.RTAxisConfiguration</class-id> <category>testing</category><body package="Roassal2-Builder-Grapher-Core">areLabelRotated	"Return true if labels are rotated"	^ labelRotation ~= 0</body><body package="Roassal2-Builder-Grapher-Core">hasMaxValueBeenManuallySet	^ maxValueManuallySet</body><body package="Roassal2-Builder-Grapher-Core">hasMinValueBeenManuallySet	^ minValueManuallySet</body></methods><methods><class-id>Roassal2.RTAxisConfiguration</class-id> <category>rendering</category><body package="Roassal2-Builder-Grapher-Core">axisFrom: fromPosition to: toPosition 	| renderer |	renderer := RTAxisRenderer new.	renderer builder: self builder.	renderer config: self.	renderer axisFrom: fromPosition to: toPosition width: lineThickness</body></methods><methods><class-id>Roassal2.RTNameCloudDictionary</class-id> <category>hooks</category><body package="Roassal2-Builder-NameCloud">unnecessaryWords	"Override to return the list of unnecessary words"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTMeanDevVarDecorator</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Grapher-Decorators">render	| values average from to l stdev b |	values := self datasetValues.	average := values average.		"The variation"	stdev := values stdev.	from := builder getPixelPositionOf: builder minX @ (average - stdev).	to := builder getPixelPositionOf: builder maxX @ (average + stdev).	b := self boxFrom: from to: to.	b @ (RTPopup text: 'stdev = ', stdev asString).		"The mean"	from := builder getPixelPositionOf: builder minX @ average.	to := builder getPixelPositionOf: builder maxX @ average.	l := self lineFrom: from to: to.	l @ (RTPopup text: 'average = ', average asString).</body></methods><methods><class-id>Roassal2.RTSVGDiamondMarker</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addPath: stream		stream		nextPutAll: (' d="M 0 0 L &lt;1p&gt; &lt;2p&gt; L 0 &lt;3p&gt; L -&lt;1p&gt; &lt;2p&gt; z" ' expandMacrosWith: xExtent with: ((yExtent/2) rounded) with: yExtent).</body><body package="Roassal2-Exporter-SVG">addSize: stream	stream nextPutAll:  ('markerWidth = "&lt;1p&gt;" markerHeight = "&lt;2p&gt;" ' expandMacrosWith: (3 *size) with: size)</body></methods><methods><class-id>Roassal2.RTBucketColor</class-id> <category>as yet unclassified</category><body package="Roassal2-ColorNormalizer">bucketIndexOf: anObject	|value |	value := command value: anObject.	^ (self buckets collect: #first) detect: [ :step | value &lt;= step ].</body><body package="Roassal2-ColorNormalizer">buckets	^ buckets ifEmpty: [ self initializeBuckets. buckets ]</body><body package="Roassal2-ColorNormalizer">colorScheme: aString	colorScheme := aString.</body><body package="Roassal2-ColorNormalizer">defaultPalette	^ RTColorPalette diverging colors: numberOfBuckets scheme:'RdBu'</body><body package="Roassal2-ColorNormalizer">initializeBuckets		|values min max delta  |	values := scope collect: [:v | command rtValue: v].	values sort: [ :a :b | a &lt; b ].	max := values max.	min := values min.	delta := (max - min)/numberOfBuckets.	((min + delta) to: max by: delta) with: self palette do: [ :i :c |			buckets add:  (Array with:i with: c)		 ].	buckets := buckets sort: [:a :b | a first &lt; b first].</body><body package="Roassal2-ColorNormalizer">numberOfBuckets: anInteger	numberOfBuckets := anInteger</body><body package="Roassal2-ColorNormalizer">palette	^ colorScheme isNil 		ifTrue: [ self defaultPalette ]		ifFalse: [ (RTColorPalette paletteFor: colorScheme) colors: numberOfBuckets scheme: colorScheme			]</body><body package="Roassal2-ColorNormalizer">rtValue: anObject	^ (self buckets detect: [ :pair | pair first = (self bucketIndexOf: anObject) ] ) second</body><body package="Roassal2-ColorNormalizer">scope: groupOfObjects	"The argument is used to determine the maximum value. Command is executed on each of elements of the group passed as argument"	scope := groupOfObjects</body></methods><methods><class-id>Roassal2.RTBucketColor</class-id> <category>initialize</category><body package="Roassal2-ColorNormalizer">initialize	super initialize.	buckets := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTBucketColor class</class-id> <category>examples</category><body package="Roassal2-ColorNormalizer">example		|n elements view|	n := RTBucketColor numberOfColors: 5 command: #asInteger scope: ($a to: $z).	n colorScheme: 'Blues'.	elements := (RTBox new size: 20; color: n) elementsOn: ($a to: $z).	view := RTView new.	view addAll: elements.	RTGridLayout on: view elements.	^ view</body><body package="Roassal2-ColorNormalizer">example1		|n elements view |	n := RTBucketColor numberOfColors: 5 scope: (1 to: 35).	elements := (RTBox new size: 20; color: n) elementsOn: (1 to: 30).	view := RTView new.	view addAll: elements.	RTGridLayout on: view elements.	^ view</body></methods><methods><class-id>Roassal2.RTBucketColor class</class-id> <category>public</category><body package="Roassal2-ColorNormalizer">numberOfColors: anInteger command: aSymboOrBlock  scope: aCollection	^ self new		numberOfBuckets: anInteger;		command: aSymboOrBlock;		scope: aCollection.</body><body package="Roassal2-ColorNormalizer">numberOfColors: anInteger scope: aCollection	^ self numberOfColors: anInteger command: #yourself  scope: aCollection</body></methods><methods><class-id>Roassal2.RTScatterplotMap</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-ScatterplotMap">allData	^ 'http://www.gaslampmedia.com/wp-content/uploads/2013/08/zip_codes_states.csv' asZnUrl retrieveContents</body><body package="Roassal2-Builder-ScatterplotMap">allLocalData	^ '/Users/alexandrebergel/Desktop/zip_codes_states.csv' asFileReference contents</body><body package="Roassal2-Builder-ScatterplotMap">convert: lat with: lon	"	self new convert: 55 with: -143	"	| phi0 lambda0 phi1 phi2 phi lambda n theta c rho rho0 x y |	phi0 := 0.	lambda0 := -96 degreesToRadians.	phi1 := 29.5 degreesToRadians.	phi2 := 45.5 degreesToRadians.		phi := lat degreesToRadians.	lambda := lon degreesToRadians.		n := 0.5 * (phi1 sin + phi2 sin).	theta := n * (lambda - lambda0).	c := phi1 cos + (2 * n * phi1 sin).	c := c * c.	rho := (c - (2 * n * phi sin)) sqrt / n.	rho0 := (c - (2 * n * phi0 sin)) sqrt / n.		x := rho * theta sin.	y := rho0 - (rho * theta cos).		^ x @ y</body><body package="Roassal2-Builder-ScatterplotMap">run	"	RTScatterplotMap new run	"	| tab allLonLat v shape es |	tab := RTTabTable new input: 'http://www.gaslampmedia.com/wp-content/uploads/2013/08/zip_codes_states.csv' asZnUrl retrieveContents usingDelimiter: $,.	tab removeFirstRow.	tab convertColumns: #(2 3) to: [ :s | | str |		str := s.		(str = '') ifTrue: [ str := '0' ]. 		(str beginsWith: '"+' ) ifTrue: [ str := str allButFirst allButFirst allButLast ].		(str first = $") ifTrue: [ Float readFrom: str allButFirst allButLast ] ifFalse: [  Float readFrom: str ] ].	allLonLat := tab values collect: [ :row | (row at: 2) @ (row at: 3) ].		v := RTView new.	v @ RTDraggableView.	shape := (RTEllipse new size: 2; color: (Color blue alpha: 0.01)).	es := shape elementsOn: allLonLat.	es @ RTPopup.	v addAll: es.	es do: [ :el | 		| p |		p := RTScatterplotMap new convert: el model x with: el model y.		el translateTo: (p x * 300) @ (p y negated * 300).	].	v canvas camera focusOnCenter.	^ v</body><body package="Roassal2-Builder-ScatterplotMap">sample	^ '"zip_code","latitude","longitude","city","state","county""99641",60.314735,"-163.118947","Nunapitchuk","AK","Bethel""99643",58.268704,"-155.797078","Old Harbor","AK","Kodiak Island""99644",58.268704,"-155.797078","Ouzinkie","AK","Kodiak Island""99645",62.257284,"-149.633916","Palmer","AK","Matanuska Susitna""99647",58.268704,"-156.648418","Pedro Bay","AK","Lake And Peninsula""99648",58.268704,"-156.648418","Perryville","AK","Lake And Peninsula""99649",57.528787,"-157.485781","Pilot Point","AK","Lake And Peninsula""99650",62.117231,"-163.237636","Pilot Station","AK","Wade Hampton""99651",60.314735,"-163.118947","Platinum","AK","Bethel""99652",61.523043,"-149.728806","Big Lake","AK","Matanuska Susitna""99653",58.268704,"-156.648418","Port Alsworth","AK","Lake And Peninsula""99654",61.581305,"-149.374335","Wasilla","AK","Matanuska Susitna""99655",60.314735,"-163.118947","Quinhagak","AK","Bethel""99656",60.314735,"-163.118947","Red Devil","AK","Bethel""99657",62.117231,"-163.237636","Russian Mission","AK","Wade Hampton""99658",62.117231,"-163.237636","Saint Marys","AK","Wade Hampton""99659",64.755604,"-165.672344","Saint Michael","AK","Nome""99660",54.24018,"-176.787412","Saint Paul Island","AK","Aleutians West""99661",55.350356,"-160.485506","Sand Point","AK","Aleutians East""99662",62.117231,"-163.237636","Scammon Bay","AK","Wade Hampton""99663",59.449486,"-151.700915","Seldovia","AK","Kenai Peninsula""99664",60.25281,"-149.402123","Seward","AK","Kenai Peninsula""99665",65.226375,"-151.025085","Shageluk","AK","Yukon Koyukuk""99666",62.117231,"-163.237636","Nunam Iqua","AK","Wade Hampton""99667",62.280436,"-149.715167","Skwentna","AK","Matanuska Susitna""99668",60.314735,"-163.118947","Sleetmute","AK","Bethel""99669",60.110034,"-151.247935","Soldotna","AK","Kenai Peninsula""99670",58.745599,"-157.159459","South Naknek","AK","Bristol Bay""99671",64.755604,"-165.672344","Stebbins","AK","Nome""99672",60.513614,"-150.853238","Sterling","AK","Kenai Peninsula""99674",61.732741,"-148.783687","Sutton","AK","Matanuska Susitna""99675",65.226375,"-151.025085","Takotna","AK","Yukon Koyukuk""99676",62.280436,"-149.715167","Talkeetna","AK","Matanuska Susitna""99677",61.470966,"-144.991027","Tatitlek","AK","Valdez Cordova""99678",58.962101,"-163.118947","Togiak","AK","Dillingham""99679",60.314735,"-163.118947","Tuluksak","AK","Bethel""99680",60.314735,"-163.118947","Tuntutuliak","AK","Bethel""99681",60.314735,"-163.118947","Tununak","AK","Bethel""99682",60.036583,"-151.655567","Tyonek","AK","Kenai Peninsula""99683",61.720499,"-150.009239","Trapper Creek","AK","Matanuska Susitna""99684",64.755604,"-165.672344","Unalakleet","AK","Nome""99685",53.85513,"-166.518069","Unalaska","AK","Aleutians West""99686",61.68557,"-145.775152","Valdez","AK","Valdez Cordova""99687",61.531298,"-149.478398","Wasilla","AK","Matanuska Susitna""99688",61.896608,"-150.003758","Willow","AK","Matanuska Susitna""99689",58.331798,"-135.181256","Yakutat","AK","Yakutat""99690",60.314735,"-163.118947","Nightmute","AK","Bethel""99691",65.226375,"-151.025085","Nikolai","AK","Yukon Koyukuk""99692",53.865295,"-166.525333","Dutch Harbor","AK","Aleutians West""99693",61.470966,"-144.991027","Whittier","AK","Valdez Cordova""99694",62.280436,"-149.715167","Houston","AK","Matanuska Susitna""99695",61.108864,"-149.440311","Anchorage","AK","Anchorage""99697",58.268704,"-155.797078","Kodiak","AK","Kodiak Island""99701",64.644047,"-147.522052","Fairbanks","AK","Fairbanks North Star""99702",64.790803,"-147.463336","Eielson Afb","AK","Fairbanks North Star""99703",64.832821,"-147.644180","Fort Wainwright","AK","Fairbanks North Star""99704",63.543571,"-149.986676","Clear","AK","Denali""99705",64.780765,"-147.207748","North Pole","AK","Fairbanks North Star""99706",64.852055,"-147.937747","Fairbanks","AK","Fairbanks North Star""99707",64.699839,"-147.405134","Fairbanks","AK","Fairbanks North Star""99708",64.947462,"-147.856443","Fairbanks","AK","Fairbanks North Star""99709",64.860126,"-147.999791","Fairbanks","AK","Fairbanks North Star""99710",64.948648,"-147.535549","Fairbanks","AK","Fairbanks North Star""99711",64.826445,"-147.388840","Fairbanks","AK","Fairbanks North Star""99712",65.036453,"-147.156588","Fairbanks","AK","Fairbanks North Star""99714",64.489102,"-146.924788","Salcha","AK","Fairbanks North Star""99716",64.874591,"-146.898195","Two Rivers","AK","Fairbanks North Star""99720",65.226375,"-151.025085","Allakaket","AK","Yukon Koyukuk""99721",66.693255,"-153.993988","Anaktuvuk Pass","AK","North Slope""99722",65.226375,"-151.025085","Arctic Village","AK","Yukon Koyukuk""99723",70.220472,"-150.238942","Barrow","AK","North Slope""99724",66.929746,"-149.193010","Beaver","AK","Yukon Koyukuk""99725",64.870974,"-148.094930","Ester","AK","Fairbanks North Star""99726",65.226375,"-151.025085","Bettles Field","AK","Yukon Koyukuk""99727",66.868442,"-159.843924","Buckland","AK","Northwest Arctic""99729",63.543571,"-149.986676","Cantwell","AK","Denali""99730",65.226375,"-151.025085","Central","AK","Yukon Koyukuk""99732",63.870552,"-144.002648","Chicken","AK","Southeast Fairbanks""99733",65.226375,"-151.025085","Circle","AK","Yukon Koyukuk""99734",66.693255,"-153.993988","Prudhoe Bay","AK","North Slope""99736",66.868442,"-159.843924","Deering","AK","Northwest Arctic""99737",63.107461,"-143.422478","Delta Junction","AK","Southeast Fairbanks""99738",63.870552,"-144.002648","Eagle","AK","Southeast Fairbanks""99739",64.755604,"-165.672344","Elim","AK","Nome""99740",65.226375,"-151.025085","Fort Yukon","AK","Yukon Koyukuk""99741",65.226375,"-151.025085","Galena","AK","Yukon Koyukuk""99742",64.755604,"-165.672344","Gambell","AK","Nome""99743",63.543571,"-149.986676","Healy","AK","Denali""99744",63.543571,"-149.986676","Anderson","AK","Denali""99745",65.226375,"-151.025085","Hughes","AK","Yukon Koyukuk""99746",65.226375,"-151.025085","Huslia","AK","Yukon Koyukuk""99747",66.693255,"-153.993988","Kaktovik","AK","North Slope""99748",65.226375,"-151.025085","Kaltag","AK","Yukon Koyukuk""99749",66.868442,"-159.843924","Kiana","AK","Northwest Arctic""99750",66.868442,"-159.843924","Kivalina","AK","Northwest Arctic""99751",66.868442,"-159.843924","Kobuk","AK","Northwest Arctic""99752",66.865256,"-161.780844","Kotzebue","AK","Northwest Arctic""99753",64.755604,"-165.672344","Koyuk","AK","Nome""99754",65.226375,"-151.025085","Koyukuk","AK","Yukon Koyukuk""99755",63.543571,"-149.986676","Denali National Park","AK","Denali""99756",65.226375,"-151.025085","Manley Hot Springs","AK","Yukon Koyukuk""99757",65.226375,"-151.025085","Lake Minchumina","AK","Yukon Koyukuk""99758",65.226375,"-151.025085","Minto","AK","Yukon Koyukuk""99759",68.887048,"-164.249713","Point Lay","AK","North Slope""99760",64.117464,"-153.451125","Nenana","AK","Yukon Koyukuk""99761",66.868442,"-159.843924","Noatak","AK","Northwest Arctic""99762",63.888671,"-163.800760","Nome","AK","Nome""99763",66.868442,"-159.843924","Noorvik","AK","Northwest Arctic""99764",63.870552,"-144.002648","Northway","AK","Southeast Fairbanks""99765",65.226375,"-151.025085","Nulato","AK","Yukon Koyukuk""99766",66.693255,"-153.993988","Point Hope","AK","North Slope""99767",65.509038,"-150.161868","Rampart","AK","Yukon Koyukuk""99768",65.226375,"-151.025085","Ruby","AK","Yukon Koyukuk""99769",64.755604,"-165.672344","Savoonga","AK","Nome""99770",66.868442,"-159.843924","Selawik","AK","Northwest Arctic""99771",64.755604,"-165.672344","Shaktoolik","AK","Nome""99772",64.755604,"-165.672344","Shishmaref","AK","Nome""99773",66.868442,"-159.843924","Shungnak","AK","Northwest Arctic""99774",65.226375,"-151.025085","Stevens Village","AK","Yukon Koyukuk""99775",64.859078,"-147.826709","Fairbanks","AK","Fairbanks North Star""99776",63.870552,"-144.002648","Tanacross","AK","Southeast Fairbanks""99777",65.226375,"-151.025085","Tanana","AK","Yukon Koyukuk""99778",64.755604,"-165.672344","Teller","AK","Nome""99779",63.870552,"-144.002648","Tetlin","AK","Southeast Fairbanks""99780",63.870552,"-144.002648","Tok","AK","Southeast Fairbanks""99781",65.226375,"-151.025085","Venetie","AK","Yukon Koyukuk""99782",66.693255,"-153.993988","Wainwright","AK","North Slope""99783",64.755604,"-165.672344","Wales","AK","Nome""99784",64.755604,"-165.672344","White Mountain","AK","Nome""99785",64.755604,"-165.672344","Brevig Mission","AK","Nome""99786",66.868442,"-159.843924","Ambler","AK","Northwest Arctic""99788",65.226375,"-151.025085","Chalkyitsik","AK","Yukon Koyukuk""99789",66.693255,"-153.993988","Nuiqsut","AK","North Slope""99790",64.856055,"-146.275980","Fairbanks","AK","Fairbanks North Star""99791",70.494693,"-157.441073","Atqasuk","AK","North Slope""99801",58.373561,"-134.523946","Juneau","AK","Juneau""99802",58.405657,"-134.589690","Juneau","AK","Juneau""99803",58.377074,"-134.617383","Juneau","AK","Juneau""99811",58.38348,"-134.197786","Juneau","AK","Juneau""99820",57.500525,"-134.585954","Angoon","AK","Skagway Hoonah Angoon""99821",58.449413,"-134.700348","Auke Bay","AK","Juneau""99824",58.276308,"-134.397642","Douglas","AK","Juneau""99825",58.331798,"-135.181256","Elfin Cove","AK","Skagway Hoonah Angoon""99826",58.331798,"-135.181256","Gustavus","AK","Skagway Hoonah Angoon""99827",59.312688,"-135.681153","Haines","AK","Haines""99829",58.097655,"-135.431561","Hoonah","AK","Skagway Hoonah Angoon""99830",56.973554,"-133.935996","Kake","AK","Wrangell Petersburg""99832",58.331798,"-135.181256","Pelican","AK","Skagway Hoonah Angoon""99833",56.767056,"-132.931950","Petersburg","AK","Wrangell Petersburg""99835",57.080818,"-135.318348","Sitka","AK","Sitka""99836",56.53595,"-132.827948","Port Alexander","AK","Wrangell Petersburg""99840",59.456753,"-135.314852","Skagway","AK","Skagway Hoonah Angoon""99841",57.798249,"-135.285061","Tenakee Springs","AK","Skagway Hoonah Angoon""99850",58.38348,"-134.197786","Juneau","AK","Juneau""99901",55.400674,"-131.674090","Ketchikan","AK","Ketchikan Gateway""99903",55.517921,"-132.003244","Meyers Chuck","AK","Prince Wales Ketchikan""99918",55.517921,"-132.003244","Coffman Cove","AK","Prince Wales Ketchikan""99919",55.126774,"-131.580407","Thorne Bay","AK","Prince Wales Ketchikan""99921",55.513301,"-133.117022","Craig","AK","Prince Wales Ketchikan""99922",55.208706,"-132.825903","Hydaburg","AK","Prince Wales Ketchikan""99923",55.517921,"-132.003244","Hyder","AK","Prince Wales Ketchikan""99925",55.554393,"-133.090680","Klawock","AK","Prince Wales Ketchikan""99926",55.094325,"-131.566827","Metlakatla","AK","Prince Wales Ketchikan""99927",55.517921,"-132.003244","Point Baker","AK","Prince Wales Ketchikan""99928",55.395359,"-131.675370","Ward Cove","AK","Ketchikan Gateway""99929",56.449893,"-132.364407","Wrangell","AK","Wrangell Petersburg""99950",55.542007,"-131.432682","Ketchikan","AK","Ketchikan Gateway"'</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>actions</category><body package="Roassal2-Trachel-Shapes">addedIn: aCanvas	"Make sure we are in the center. This is apparently necessary for element Shape. The following code is not nice at all :-("	self		propagateElement;		shapesDo: [ :s | s addedIn: aCanvas ];		positionShapesAfterBeingAdded</body><body package="Roassal2-Trachel-Shapes">addedIn: aCanvas atIndex: index	self propagateElement.	shapeAndOffsets		do: [ :tuple | 			aCanvas addShape: tuple first atIndex: index.			tuple first translateBy: tuple second ].			"Make sure we are in the center"	self translateBy: self position negated</body><body package="Roassal2-Trachel-Shapes">extent: anExtent	self shapesDo: [ :s | s extent: anExtent ]</body><body package="Roassal2-Trachel-Shapes">from	"To be compatible with edges"	self shapesDo: [ :s | 		(s class canUnderstand: #from) ifTrue: [ ^ s from ].		 ].	^ nil</body><body package="Roassal2-Trachel-Shapes">from: p	"To be compatible with edges"	self shapesDo: [ :s | 		(s class canUnderstand: #from:) ifTrue: [ s from: p ].		 ]</body><body package="Roassal2-Trachel-Shapes">from: p1 to: p2	"To be compatible with edges"	self shapesDo: [ :s | 		(s class canUnderstand: #from:to:) ifTrue: [ s from: p1 to: p2 ].		(s class canUnderstand: #from:) ifTrue: [ s from: p1 ].		(s class canUnderstand: #to:) ifTrue: [ s to: p2 ].		 ]</body><body package="Roassal2-Trachel-Shapes">isFixed	^ self shapes allSatisfy: #isFixed</body><body package="Roassal2-Trachel-Shapes">positionShapesAfterBeingAdded	| p |	p := self position.	shapeAndOffsets do: [ :tuple | tuple first translateTo: tuple second ].	(shapeAndOffsets anySatisfy: [ :tupple | tupple first isKindOf: TRAbstractLineShape ])		ifFalse: [ self translateBy: p ]</body><body package="Roassal2-Trachel-Shapes">propagateElement	"Make all the shape aware of the element"	self shapesDo: [ :s | s element: self element ]</body><body package="Roassal2-Trachel-Shapes">pushBack	self shapesDo: #pushBack</body><body package="Roassal2-Trachel-Shapes">pushFront	self shapesDo: #pushFront</body><body package="Roassal2-Trachel-Shapes">remove	self shapesDo: #remove</body><body package="Roassal2-Trachel-Shapes">setAsFixed	self shapesDo: #setAsFixed</body><body package="Roassal2-Trachel-Shapes">signalUpdate	"Signal that the canvas should be refreshed"	"Do nothing if I have no shapes added"	shapeAndOffsets ifEmpty: [ ^ self ].	self firstShape signalUpdate</body><body package="Roassal2-Trachel-Shapes">to	"To be compatible with edges"	self shapesDo: [ :s | 		(s class canUnderstand: #to) ifTrue: [ ^ s to ].		 ].	^ nil</body><body package="Roassal2-Trachel-Shapes">to: p	"To be compatible with edges"	self shapesDo: [ :s | 		(s class canUnderstand: #to:) ifTrue: [ s to: p ].		 ]</body><body package="Roassal2-Trachel-Shapes">translateBy: aPoint	self shapesDo: [ :s | s translateBy: aPoint ]"	shapeAndOffsets do: [ :tupple | 		tupple first class == TRMultiCompositeShape			ifTrue: [ tupple first translateBy: aPoint + (tupple first encompassingRectangle extent / 2) ]			ifFalse: [ tupple first translateBy: aPoint ] ]"</body><body package="Roassal2-Trachel-Shapes">translateTo: aPoint	self translateBy: aPoint - self position</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">allColor: aColor	"Set color of all shapes"	self shapesDo: [ :s | s color: aColor ]</body><body package="Roassal2-Trachel-Shapes">allShapes	"Return all the shapes contained in me."	^ shapeAndOffsets collect: #first as: Array</body><body package="Roassal2-Trachel-Shapes">announcer	self error: 'should not be called'</body><body package="Roassal2-Trachel-Shapes">announcer: anAnnouncer	self shapesDo: [ :s | s announcer: anAnnouncer ]</body><body package="Roassal2-Trachel-Shapes">canvas	"Return the canvas of one of the shapes"	^ self firstShape canvas</body><body package="Roassal2-Trachel-Shapes">canvas: aSurface	"aCanvas is a AthensCairoSurface"	self shapesDo: [ :s | s canvas: aSurface ]</body><body package="Roassal2-Trachel-Shapes">center	^ self encompassingRectangle center</body><body package="Roassal2-Trachel-Shapes">color	^ self firstShape color	"shape2 color: aColor."</body><body package="Roassal2-Trachel-Shapes">color: aColor	"Simply set the first shape"	self firstShape color: aColor.</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	"Really ugly method."	| ans c |	(self shapes anySatisfy: [ :s | s canvas notNil ])		ifTrue: [ ^ Rectangle merging: (self shapes collect: #encompassingRectangle). ]. 		c := shapeAndOffsets collect: [ :s | s first position ].	self positionShapesAfterBeingAdded.	ans := Rectangle merging: (self shapes collect: #encompassingRectangle).	shapeAndOffsets with: c do: [ :s :p | s first translateTo: p ].	^ ans</body><body package="Roassal2-Trachel-Shapes">extent	| res |"	self shapesDo: [ :s | s translateTo: 0 @ 0 ]."			shapeAndOffsets do: [ :tuple | tuple first translateBy: tuple second ].	res := self encompassingRectangle extent.	self shapesDo: [ :s | s translateTo: 0 @ 0 ].	^ res	"We cannot do that, because we may need to get the extent, without having the elements added (and correctly positioned)"	"^ self encompassingRectangle extent"</body><body package="Roassal2-Trachel-Shapes">firstShape	^ shapeAndOffsets first first</body><body package="Roassal2-Trachel-Shapes">height	^ self encompassingRectangle height</body><body package="Roassal2-Trachel-Shapes">height: aValue	^ self extent: self width @ aValue</body><body package="Roassal2-Trachel-Shapes">indexInCanvas	^ canvas privateIndexInCanvasOf: self firstShape</body><body package="Roassal2-Trachel-Shapes">numberOfShapes	"Return the number of shapes added into myself"	^ shapeAndOffsets size</body><body package="Roassal2-Trachel-Shapes">offsetOf: aTrachelShape	^ (shapeAndOffsets detect: [ :shapeAndOffset | shapeAndOffset first == aTrachelShape ]) second</body><body package="Roassal2-Trachel-Shapes">offsets 	^ shapeAndOffsets collect: #second</body><body package="Roassal2-Trachel-Shapes">position	shapeAndOffsets ifEmpty: [ ^ 0 @ 0 ].	^ (Rectangle merging: (self shapes collect: #encompassingRectangle)) center	"^ self encompassingRectangle center"</body><body package="Roassal2-Trachel-Shapes">setShapes: someShapesWithOffsetAsPoint	shapeAndOffsets := someShapesWithOffsetAsPoint</body><body package="Roassal2-Trachel-Shapes">shapes 	^ shapeAndOffsets collect: #first</body><body package="Roassal2-Trachel-Shapes">shapesDo: aBlock	"collect:thenDo: does not create temporary collection &gt; improves performance"	shapeAndOffsets collect: #first thenDo: aBlock</body><body package="Roassal2-Trachel-Shapes">width	^ self encompassingRectangle width</body><body package="Roassal2-Trachel-Shapes">width: aValue	^ self extent: aValue @ self height</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>callbacks</category><body package="Roassal2-Trachel-Shapes">addCallback: aCallback	"Add a call back to only one subshape. This is necessary for example when one does not want to trigger many times the same callback when an action occurs"	^ self firstShape addCallback: aCallback</body><body package="Roassal2-Trachel-Shapes">addCallbackToAllShapes: aCallback	^ self shapesDo: [ :s | s addCallback: aCallback ]</body><body package="Roassal2-Trachel-Shapes">callbacks	^ self firstShape callbacks</body><body package="Roassal2-Trachel-Shapes">hasCallback	"Return true if at least one callback has been added to the shape"	^ self firstShape hasCallback</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>public - layout</category><body package="Roassal2-Trachel-Shapes">alignRight	"Layout the shapes horizontally"	"TRConstraint alignFromRight: self shapes."	RTAlignment new elements: self shapes; right.	shapeAndOffsets do: [ :tuple | tuple at: 2 put: tuple first position ].	self resetInnerShapes</body><body package="Roassal2-Trachel-Shapes">allOfSameSize	"All the same will have the same maximum size"	| maxSize |	maxSize := shapeAndOffsets inject: 0 @ 0 into: [ :max :tuple | tuple first extent max: max ].	self shapesDo: [ :s | s extent: maxSize ]</body><body package="Roassal2-Trachel-Shapes">allOfSameSizeWithPadding	"All the same will have the same maximum size"	| maxSize padding |	padding := 10 @ 10.	maxSize := shapeAndOffsets inject: 0 @ 0 into: [ :max :tuple | tuple first extent max: max ].	self shapesDo: [ :s | s extent: maxSize + padding ]</body><body package="Roassal2-Trachel-Shapes">horizontal	"Layout the shapes horizontally"	| previousShape newPosition |	previousShape := self firstShape.	shapeAndOffsets allButFirst		do: [ :tuple | 			newPosition := previousShape center + ((previousShape extent x / 2) @ 0) + ((tuple first extent x / 2) @ 0).			tuple first translateTo: newPosition.			tuple at: 2 put: newPosition.			previousShape := tuple first ].	self resetInnerShapes</body><body package="Roassal2-Trachel-Shapes">noLayout	"Do nothing here"</body><body package="Roassal2-Trachel-Shapes">relayout	"This methods places the contained shapes according to the specified layout"	| first |	first := self firstShape.	shapeAndOffsets do: [ :shapeAndOffset | 		shapeAndOffset first translateBy: first position + shapeAndOffset second ]</body><body package="Roassal2-Trachel-Shapes">resetInnerShapes	self shapesDo: [ :s | s translateTo: 0 @ 0 ]</body><body package="Roassal2-Trachel-Shapes">resetInnerShapesOffset	shapeAndOffsets := shapeAndOffsets collect: [ :tupple | Array with: tupple first with: 0 @ 0 ]</body><body package="Roassal2-Trachel-Shapes">vertical	"Layout the shapes vertically"	| previousShape newPosition |	previousShape := self firstShape.	shapeAndOffsets allButFirst		do: [ :tupple | 			newPosition := previousShape center + (0 @ (previousShape extent y / 2)) + (0 @ (tupple first extent y / 2)).			tupple first translateTo: newPosition.			tupple at: 2 put: newPosition.			previousShape := tupple first ].	self resetInnerShapes</body><body package="Roassal2-Trachel-Shapes">verticalAndLeft	"Layout the shapes vertically and aligned on the left hand side"	"TRConstraint alignFromLeft: (shapeAndOffsets collect: #first)."	RTAlignment new elements: (shapeAndOffsets collect: #first); left.	RTVerticalLineLayout new gapSize: 0; on: (shapeAndOffsets collect: #first).	shapeAndOffsets doWithIndex: [ :tuple :index | tuple at: 2 put: (tuple first position "x @ (index * 20)") ].	self resetInnerShapes."	| previousShape newPosition maxWidth offsetX |	maxWidth := (shapeAndOffsets collect: [ :tuple | tuple first width ]) max.		previousShape := shapeAndOffsets first first.	shapeAndOffsets allButFirst do: [ :tupple |		offsetX := (maxWidth - tupple first width) / -4.		newPosition := (previousShape center + (offsetX @ (previousShape extent y / 2)) + (0 @ (tupple first extent y / 2))).		tupple first translateTo: newPosition.		tupple at: 2 put: newPosition.		previousShape := tupple first ].	self resetInnerShapes"</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>public - forwarding</category><body package="Roassal2-Trachel-Shapes">shapesInstancesOf: class	"Return the list of shapes instances or subinstances of the argument class"	^ self allShapes select: [ :s | s isKindOf: class ]</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitMultiCompositeShape: self.</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint	^ self shapes anySatisfy: [ :s | s includesPoint: aPoint ]</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">computePath	self shapesDo: [ :s | s computePath ]</body><body package="Roassal2-Trachel-Shapes">resetPath	self shapesDo: #resetPath</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	shapeAndOffsets := OrderedCollection new</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	self shapesDo: [ :s | s drawOn: athensCanvas ]</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>events</category><body package="Roassal2-Trachel-Shapes">announce: anEvent	self shapesDo: [ :s | s announce: anEvent ]</body><body package="Roassal2-Trachel-Shapes">when: event do: aBlock	self shapesDo: [ :s | s announcer when: event do: aBlock ]</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>public - adding</category><body package="Roassal2-Trachel-Shapes">addShape: aShape	"Add a shape in the composite. Shapes added using this method have all the same center"	^ self addShape: aShape translateBy: 0 @ 0</body><body package="Roassal2-Trachel-Shapes">addShape: aShape translateBy: aPoint	shapeAndOffsets add: (Array with: aShape with: aPoint)</body></methods><methods><class-id>Roassal2.TRCompositeShape</class-id> <category>removing</category><body package="Roassal2-Trachel-Shapes">removeShapesSuchAs: aBlock	"Remove all the shapes such as aBlock evaluated with the shape is true"	shapeAndOffsets := shapeAndOffsets reject: [ :tupple | aBlock rtValue: tupple first ]</body></methods><methods><class-id>Roassal2.GEllipse</class-id> <category>comparing</category><body package="Roassal2-Pharo">= anEllipse	self species = anEllipse species		ifFalse: [ ^ false ].	^ self center = anEllipse center &amp; (self a = anEllipse a) &amp; (self b = anEllipse b)</body><body package="Roassal2-Pharo">hash	^ (a bitXor: b) bitXor: center hash</body></methods><methods><class-id>Roassal2.GEllipse</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body><body package="Roassal2-Pharo">setCenter: aCenter a: xRadius b: yRadius	center := aCenter.	a := xRadius.	b := yRadius</body></methods><methods><class-id>Roassal2.GEllipse</class-id> <category>accessing</category><body package="Roassal2-Pharo">a	^ a</body><body package="Roassal2-Pharo">b	^ b</body><body package="Roassal2-Pharo">center	^ center</body><body package="Roassal2-Pharo">encompassingRectangle	^ center - (a @ b) corner: center + (a @ b)</body></methods><methods><class-id>Roassal2.GEllipse</class-id> <category>public interface</category><body package="Roassal2-Pharo">intersectLineSegment: aLineSegment	^ aLineSegment intersectEllipse: self</body></methods><methods><class-id>Roassal2.GEllipse class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">center: aPoint a: xRadius b: yRadius	^ self new setCenter: aPoint a: xRadius b: yRadius</body><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Roassal2.RTCanvasExporter</class-id> <category>export</category><body package="Roassal2-Exporter-PNG">export	canvas ifNil: [ self error: 'No canvas selected' ].	fileName ifNil: [ self error: 'File name not set' ].	self extent: self extent + (self cameraScale * oversize).	self scaleToMorphLimits.	imageExporter putForm: canvas morph imageForm onFileNamed: fileName</body></methods><methods><class-id>Roassal2.RTCanvasExporter</class-id> <category>private</category><body package="Roassal2-Exporter-PNG">cameraScale	^ canvas camera scale</body><body package="Roassal2-Exporter-PNG">cameraScale: aScale	canvas camera doWithoutCallbacks: [ canvas camera scale: aScale ]</body><body package="Roassal2-Exporter-PNG">extent	^ canvas morph extent</body><body package="Roassal2-Exporter-PNG">extent: anExtent	canvas morph extent: anExtent</body><body package="Roassal2-Exporter-PNG">scaleToMorphLimits	"scale down to estimated morph (maxWidthAndHeight) and exporter (maxArea) size limits"	| maxArea maxWidthAndHeight |	maxArea := 32000000.	maxWidthAndHeight := 10000.	self extent x * self extent y &gt; maxArea		ifTrue: [ self scale: (maxArea / (self extent x * self extent y)) sqrt * self cameraScale ].	self extent x &gt; maxWidthAndHeight		ifTrue: [ self scale: maxWidthAndHeight / self extent x * self cameraScale ].	self extent y &gt; maxWidthAndHeight		ifTrue: [ self scale: maxWidthAndHeight / self extent y * self cameraScale ]</body></methods><methods><class-id>Roassal2.RTCanvasExporter</class-id> <category>settings</category><body package="Roassal2-Exporter-PNG">canvas: aCanvas	"sets canvas for export, resets all settings"	canvas := aCanvas veryDeepCopy.	canvas morph		ifNil: [ 			canvas buildMorph.			self whole ]</body><body package="Roassal2-Exporter-PNG">centered	canvas camera doWithoutCallbacks: [ canvas camera focusOnCenter ]</body><body package="Roassal2-Exporter-PNG">defaultScale	self scale: 1.0001</body><body package="Roassal2-Exporter-PNG">fileName: aFileName	fileName := aFileName</body><body package="Roassal2-Exporter-PNG">format: imageFormat	"supported formats: png, jpg, jpeg, bmp, gif		usage examples:		format: 'png' 		format: #png"	| imageFormatUC |	format := imageFormat.	imageFormatUC := imageFormat asUppercase.	imageExporter := TRPlatform current imageExporterForType: imageFormatUC</body><body package="Roassal2-Exporter-PNG">oversizedBy: anExtent	oversize := anExtent</body><body package="Roassal2-Exporter-PNG">scale: aScale	"1 = defaultScale"	self		extent: self extent * aScale / self cameraScale;		cameraScale: aScale</body><body package="Roassal2-Exporter-PNG">whole	"image includes whole canvas, otherwise it is cropped to original camera"	self		centered;		extent: self cameraScale * canvas encompassingRectangle extent</body><body package="Roassal2-Exporter-PNG">withoutFixedShapes	canvas camera doWithoutCallbacks: [ canvas fixedShapes do: [ :shape | shape doWithoutCallbacks: [ shape remove ] ] ]</body></methods><methods><class-id>Roassal2.RTCanvasExporter</class-id> <category>initialization</category><body package="Roassal2-Exporter-PNG">initialize	self		format: #png;		fileName: [ ('export.' , format) asSymbol ];		oversizedBy: 0 @ 0</body></methods><methods><class-id>Roassal2.RTCanvasExporter class</class-id> <category>initialization</category><body package="Roassal2-Exporter-PNG">canvas: aCanvas	^ self new		canvas: aCanvas;		yourself</body></methods><methods><class-id>Roassal2.RTAbstractCompactTree</class-id> <category>algorithm</category><body package="Roassal2-Layouts">compareContourOf: aNode with: another	"return the number of radians the subtree induced by aNode must be displaced to be separated by a predefined distance (horizontalGap) from the one induced by anotherNode"	| difference max nodeA nodeB |	nodeB := aNode.	"the right one"	nodeA := another.	"the left one"	max := aNode = another		ifTrue: [ 0 ]		ifFalse: [ horizontalGap / 2 - (nodeB x - (self getAbcissaOf: nodeA inSubtreeFromLayer: aNode layer - 1)) ].	nodeB := self followLeftContour: nodeB toLayer: nodeB layer + 1.	nodeA := self followRightContour: nodeA toLayer: nodeA layer + 1.	[ nodeB isNil not &amp; nodeA isNil not ]		whileTrue: [ 			difference := horizontalGap				-					((self getAbcissaOf: nodeB inSubtreeFromLayer: aNode layer - 1)						- (self getAbcissaOf: nodeA inSubtreeFromLayer: aNode layer - 1)).			max := max max: difference.			nodeB := self followLeftContour: nodeB toLayer: nodeB layer + 1.			nodeA := self followRightContour: nodeA toLayer: nodeA layer + 1 ].	^ max</body><body package="Roassal2-Layouts">computePosition: aNode"compute the position of the given node and of his sons recursively"	| children neighbor nodeA |		children := self childrenFor: aNode.	neighbor := self leftSiblingOf: aNode.		children isEmpty ifTrue: [ neighbor isNil ifTrue: [ aNode x: 0; mod: 0.]  											 ifFalse: [ aNode x: (neighbor x + (horizontalGap /2)); mod: (neighbor mod);													  pointer: (self followRightContour: neighbor toLayer: (aNode layer + 1)) ] ]					 					 ifFalse: [aNode leftContour: children first;									rightContour: children last.							  children do: [:e | self computePosition: e ].							      aNode x: (aNode leftContour x + aNode rightContour x + aNode rightContour mod ) /2;										mod: 0. 								neighbor isNil ifFalse: [ aNode mod: (self compareContourOf: aNode with: neighbor).																						  nodeA := (self followLeftContour: (aNode father) toLayer: (aNode layer)).													  [(self followLeftContour: nodeA toLayer: (nodeA layer + 1)) isNil ] whileFalse: [ nodeA := self followLeftContour: nodeA toLayer: (nodeA layer + 1) ].													 nodeA pointer: (self followLeftContour: aNode toLayer: (nodeA layer + 1)).																										 nodeA := self followRightContour: aNode toLayer: (aNode layer + 1).													 [(self followRightContour: nodeA toLayer: (nodeA layer +1)) isNil ] whileFalse: [ nodeA := self followRightContour: nodeA toLayer: (nodeA layer +1) ].													nodeA pointer: (self followRightContour: neighbor toLayer: (nodeA layer +1) ) ] ]</body><body package="Roassal2-Layouts">followLeftContour: aNode toLayer: anInteger	"return the last node in the left contour begining at anode"		((self layerOf: aNode) = anInteger ) ifTrue: [^ aNode  ].	((self layerOf: aNode) &gt; anInteger ) ifTrue: [^ nil  ].		(self leftContourOf: aNode) isNil ifTrue: [ (self pointerOf: aNode)  isNil ifTrue: [ ^ nil ] 														 ifFalse: [ ^ ( self followLeftContour: (self pointerOf: aNode) toLayer: anInteger ) ] ]				  				ifFalse: [ ^ (self followLeftContour: (self leftContourOf: aNode) toLayer: anInteger ) ]</body><body package="Roassal2-Layouts">followRightContour: aNode toLayer: anInteger	"return the node in the right contour begining at anode in layer anInteger"	((self layerOf: aNode) = anInteger ) ifTrue: [^ aNode  ].	((self layerOf: aNode) &gt; anInteger ) ifTrue: [^ nil  ].	(self rightContourOf: aNode) isNil ifTrue: [ (self pointerOf: aNode) isNil ifTrue: [ ^ nil ] 														 ifFalse: [ ^ ( self followRightContour: (self pointerOf: aNode) toLayer: anInteger ) ] ]				  				ifFalse: [ ^ (self followRightContour: (self rightContourOf: aNode) toLayer: anInteger ) ]</body><body package="Roassal2-Layouts">getAbcissaOf: aNode inSubtreeFromLayer: anInteger	| node x |		(anInteger &lt; 0) ifTrue: [^ self getAbcissaOf: aNode inSubtreeFromLayer: 0 ].		((self layerOf: aNode) = anInteger ) ifTrue: [ ^ self xOf: aNode ].	((self layerOf: aNode) &lt; anInteger ) ifTrue: [ ^ nil ].		x := (self xOf: aNode) + (self modOf: aNode).		node := self fatherOf: aNode.		[(self layerOf: node) = anInteger  ] whileFalse: [ x := x + (self modOf: node).									node := self fatherOf: node ].									^ x</body><body package="Roassal2-Layouts">leftSiblingOf: aNode"return the left sibling of the given node "	| children |	(self fatherOf: aNode) isNil ifTrue: ["has no sibling" ^ nil]					    ifFalse: [ children := self childrenFor: (self fatherOf: aNode).								(children first) = aNode ifTrue: ["as no left sibling" ^ nil ]																    ifFalse: [^ children at: ((children indexOf: aNode) - 1) ] ]</body><body package="Roassal2-Layouts">nodeAbcissaWithNeighbor: aNode	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractCompactTree</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">greedyCycleRemoval: aGraph</body><body package="Roassal2-Layouts">initialLayout: aLayout	initialLayout := aLayout</body><body package="Roassal2-Layouts">initialize 	super initialize.	verticalGap := 20.	horizontalGap := 30.	margin := 40. 	sonsDictionary := Dictionary new</body><body package="Roassal2-Layouts">initialize: aNode whoseFatherIs: another 	self fatherOf: aNode put: another.		another isNil ifTrue: [ self layerOf: aNode put: 0 ] ifFalse: [ self layerOf: aNode put: (self layerOf: another) + 1 ] .		( self childrenFor: aNode ) do: [ :e | self initialize: e whoseFatherIs: aNode ]</body><body package="Roassal2-Layouts">root: aNode 	root := aNode</body></methods><methods><class-id>Roassal2.RTAbstractCompactTree</class-id> <category>private</category><body package="Roassal2-Layouts">childrenFor: aNode 	sonsDictionary isEmpty ifTrue: [ ^ super childrenFor: aNode ] 							ifFalse: [ ^sonsDictionary at: aNode ifAbsent: [ ^ OrderedCollection new ] ]</body></methods><methods><class-id>Roassal2.RTAbstractCompactTree</class-id> <category>hook</category><body package="Roassal2-Layouts">coordinate: aNode withMod: aFloat	self subclassResponsibility</body><body package="Roassal2-Layouts">doExecute: nodeElements 	| rootNodes |		initialLayout isNil  ifFalse: [ initialLayout new executeOnElements: nodeElements. ].		rootNodes := self rootNodesFor: nodeElements."	root isNil ifTrue: [ rootNodes := self rootNodesFor: nodeElements. ]			 ifFalse: [ rootNodes := Array with: root.						self coveringTreeFor: nodeElements from: root ]."		rootNodes do: [:e | self initialize: e whoseFatherIs: nil ];		do: [:e | self computePosition:e].		rootNodes  do: [:e |					self draw:e withMod: 0  ]</body><body package="Roassal2-Layouts">draw: aNode withMod: aFloat	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTAbstractCompactTree class</class-id> <category>testing</category><body package="Roassal2-Layouts">horizontalGap: anInt	| new |		new := self new.	new horizontalGap: anInt.		^ new</body><body package="Roassal2-Layouts">horizontalGap: anInt verticalGap: another	| new |		new := self new.	new horizontalGap: anInt.	new verticalGap: another.			^ new</body><body package="Roassal2-Layouts">isAbstract	^ self name = #RTAbstractCompactTree</body><body package="Roassal2-Layouts">verticalGap: anInt	| new |		new := self new.	new verticalGap: anInt.		^ new</body></methods><methods><class-id>Roassal2.TRTranslationCallback</class-id> <category>testing</category><body package="Roassal2-Trachel-Callbacks">isTranslationCallback	^ true</body></methods><methods><class-id>Roassal2.TRTranslationCallback</class-id> <category>actions</category><body package="Roassal2-Trachel-Callbacks">shape: aTRShape step: aStep 	"aStep is a point that represents a translation step"	^ block cull: aTRShape cull: aStep</body></methods><methods><class-id>Roassal2.RTConditionalLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">condition	^ condition</body><body package="Roassal2-Layouts">condition: aBlockOrSymbolOrValue	"The argument will be evaluated for each Roassal elements.	elements that meet the condition will be evaluated using the thenLayout, else they will be given to the elseLayout	"	condition := aBlockOrSymbolOrValue</body><body package="Roassal2-Layouts">elseLayout	^ elseLayout</body><body package="Roassal2-Layouts">elseLayout: aLayout	elseLayout := aLayout</body><body package="Roassal2-Layouts">overallLayout	^ overallLayout</body><body package="Roassal2-Layouts">overallLayout: anObject	overallLayout := anObject</body><body package="Roassal2-Layouts">thenLayout	^ thenLayout</body><body package="Roassal2-Layouts">thenLayout: aLayout	thenLayout := aLayout</body></methods><methods><class-id>Roassal2.RTConditionalLayout</class-id> <category>as yet unclassified</category><body package="Roassal2-Layouts">doExecute: elements	| thenElements elseElements |	thenElements := RTGroup new.	elseElements := RTGroup new.	elements do: [ :anElement | (condition rtValue: anElement) 											ifTrue: [ thenElements add: anElement ] 											ifFalse: [ elseElements add: anElement ] ].	thenLayout on: thenElements.	elseLayout on: elseElements.	overallLayout on: (RTGroup with: thenElements with: elseElements)</body><body package="Roassal2-Layouts">initialize	super initialize.	condition := true.	thenLayout := RTTreeLayout new.	elseLayout := RTGridLayout new.	overallLayout := RTHorizontalLineLayout new.</body></methods><methods><class-id>Roassal2.RTRouteBuilder</class-id> <category>interactions</category><body package="Roassal2-Builder-Map">withPopup	self withPopup: #yourself</body></methods><methods><class-id>Roassal2.RTRouteBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Map">buildRoutesUsingNames: cityNames	|elements routeElems|	elements := mapBuilder view elements.	routeElems := OrderedCollection new.	routes do: [ :r |		| route c1 c2 |		c1 := elements detect: [ :e | (cityNames rtValue: e model) = (r key) ] ifNone: [ self cityNotFoundError: r key ].		c2 := elements detect: [ :e | (cityNames rtValue: e model) = (r value)] ifNone: [ self cityNotFoundError: r value ].		route := RTRoute from: c1 to: c2.		route mapBuilder: mapBuilder.		route edge + (shape copy).		popup isNil ifFalse: [ route edge @ (RTPopup text: popup) ].		routeElems add: route edge.	].	^ routeElems.</body><body package="Roassal2-Builder-Map">cityNotFoundError: cityName	self error: 'Not found: ',cityName.</body><body package="Roassal2-Builder-Map">from: aCityName toAll: cityNames	cityNames do: [ :toCityName |		routes add: aCityName -&gt; toCityName.	]</body><body package="Roassal2-Builder-Map">ifRoute: aConditionBlock lineColor: aColorBlock	^ self ifElement: [ :e | aConditionBlock rtValue: e model ] fillColor: aColorBlock.</body></methods><methods><class-id>Roassal2.RTRouteBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Map">initialize	super initialize.	routes := OrderedCollection new.	self line; color: Color black.</body></methods><methods><class-id>Roassal2.RTRouteBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Map">mapBuilder: builder	mapBuilder := builder.</body><body package="Roassal2-Builder-Map">withPopup: aBlockOrSymbol	popup := aBlockOrSymbol</body></methods><methods><class-id>Roassal2.RTFixedPopup</class-id> <category>initialization</category><body package="Roassal2-Interactions">createAndShowPopupFor: element event: event	| popup windowSize |	self removeLastPopup.		popup := self getNewPopupFor: element.	self lastPopup: popup.			windowSize := element view canvas extent.	popup translateTo: ((popup width / 2) @ (windowSize y - (popup height / 2)))	"TRConstraint moveAtTheBottomOfTheWindow: popup"</body></methods><methods><class-id>Roassal2.TRUtil</class-id> <category>factory</category><body package="Roassal2-Trachel-Core">widgetFactory	^ TRMorphWidgetFactory</body></methods><methods><class-id>Roassal2.TRUtil class</class-id> <category>accessing</category><body package="Roassal2-Trachel-Core">instance	^ instance ifNil: [ instance := self new ]</body></methods><methods><class-id>Roassal2.RTEquidistantCircleLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">computeSeparationFor: elements"Compute the separation between each element, this separation will always be the same"	| sep |	sep := ((2 * Float pi * (self computeRadiusFor: elements)) - (self weightSum: elements))/	(elements size).	^sep</body><body package="Roassal2-Layouts">doExecute: elements	| angle rad center angleIncrement |	rad := self computeRadiusFor: elements.	center := Point x: rad y: rad.	angle := self initialAngle.	elements		do: [ :each | 			| point |			"First, the angle is increased only by the angle given by the element radius (height/2),			then the point is set, and then it's increased by the rest of the total increment"			"This is to consider both last and next elements weights"			angle := angle + ((each height)/(2*rad)).			point := center + (Point r: rad theta: angle).			angleIncrement := (((each height)/2) + (self computeSeparationFor: elements))/rad.			angle := angle + angleIncrement.			translator translate: each to: point.		]</body></methods><methods><class-id>Roassal2.RTRectangleAttachPoint</class-id> <category>private</category><body package="Roassal2-AttachPoint">attachPointFor: anEdge from: fromRect to: toRect	| intersections offsetShift fromPoint toPoint |	offsetShift := self offsetNormalFor: anEdge.	fromPoint := fromRect center + offsetShift.	toPoint := toRect center + offsetShift.	fromRect = toRect		ifTrue: [ ^ fromRect topLeft ].	(fromRect containsRect: toRect)		ifTrue: [ ^ fromRect pointNearestTo: toPoint ].	(toRect containsRect: fromRect)		ifTrue: [ ^ fromRect pointNearestTo: (toRect pointNearestTo: fromPoint) ].	intersections := (RTLineSegment from: fromPoint to: toPoint) intersectRectangle: fromRect.	intersections ifEmpty: [ ^ fromRect pointNearestTo: toPoint ].	^ intersections detectMin: [ :each | each r ]</body></methods><methods><class-id>Roassal2.RTRectangleAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">basicEndingPointOf: anEdge	^ self attachPointFor: anEdge from: anEdge to encompassingRectangle to: anEdge from encompassingRectangle</body><body package="Roassal2-AttachPoint">basicStartingPointOf: anEdge	^ self attachPointFor: anEdge from: anEdge from encompassingRectangle to: anEdge to encompassingRectangle</body></methods><methods><class-id>Roassal2.RTGrapherLabel</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Labeling">max	^ max</body><body package="Roassal2-Builder-Grapher-Labeling">max: aNumber	max := aNumber</body><body package="Roassal2-Builder-Grapher-Labeling">min	^ min</body><body package="Roassal2-Builder-Grapher-Labeling">min: aNumber	min := aNumber</body><body package="Roassal2-Builder-Grapher-Labeling">numberOfTicks	| ticks |	min &lt; 0 ifTrue: [ 		ticks := max &lt; 0 ifTrue: [ (max - min) abs ] ifFalse: [ max+min abs  ]		 ] ifFalse: [ 		ticks := max - min ].	^ (ticks / step).</body><body package="Roassal2-Builder-Grapher-Labeling">score	^ score</body><body package="Roassal2-Builder-Grapher-Labeling">score: aNumber	score := aNumber</body><body package="Roassal2-Builder-Grapher-Labeling">step	^ step</body><body package="Roassal2-Builder-Grapher-Labeling">step: aNumber	step := aNumber</body></methods><methods><class-id>Roassal2.RTGrapherLabel</class-id> <category>printing</category><body package="Roassal2-Builder-Grapher-Labeling">printOn: aStream	| x |	aStream 		nextPutAll: '(Score: ';		nextPutAll: (score printShowingDecimalPlaces: 2);		nextPutAll: ') '.	x := min.	[x &lt;= max ] whileTrue: [ 		aStream nextPutAll: (x printShowingDecimalPlaces: 2).		aStream nextPutAll: String tab.		x := x + step ].</body></methods><methods><class-id>Roassal2.RTCell</class-id> <category>accessing</category><body package="Roassal2-Layouts">column	^((number - 1) rem: columns) + 1</body><body package="Roassal2-Layouts">columnWidthAt: index	"private"	^ columnWidths at: index</body><body package="Roassal2-Layouts">columns	^ columns</body><body package="Roassal2-Layouts">columns: anObject	columns := anObject</body><body package="Roassal2-Layouts">computeColumnWidths	columnWidths := Array new: elements columnCount.	1 to: elements columnCount do: [ :columnIndex |		columnWidths at: columnIndex put: ((elements atColumn: columnIndex) select: #notNil thenCollect: #width) max	 ].</body><body package="Roassal2-Layouts">computeRowHeights	rowHeights := Array new: elements rowCount.	1 to: elements rowCount do: [ :rowIndex |		rowHeights at: rowIndex put: ((elements atRow: rowIndex) select: #notNil thenCollect: #height) max	 ].</body><body package="Roassal2-Layouts">element	^ element</body><body package="Roassal2-Layouts">element: anObject	element := anObject</body><body package="Roassal2-Layouts">elements: aCollection 	| rows  col |	rows := (aCollection size / columns) ceiling rounded.	col := Array new: rows * columns.	1 to: aCollection size do: [ :i | col at: i put: (aCollection at: i)].	elements := RTCellMatrix 						rows: rows						columns: columns 						contents: col.	self computeColumnWidths.	self computeRowHeights.</body><body package="Roassal2-Layouts">extent	^ self width @ self height</body><body package="Roassal2-Layouts">height	^ self rowHeightAt: self row</body><body package="Roassal2-Layouts">number	^ number</body><body package="Roassal2-Layouts">number: anObject	number := anObject</body><body package="Roassal2-Layouts">row	^((number - 1) quo: columns) + 1</body><body package="Roassal2-Layouts">rowHeightAt: index	"private"	^ rowHeights at: index</body><body package="Roassal2-Layouts">width	^ self columnWidthAt: self column</body></methods><methods><class-id>Roassal2.RTCell class</class-id> <category>public</category><body package="Roassal2-Layouts">elements: aCollection columns: anInteger 		^ self new columns: anInteger; elements: aCollection; yourself</body></methods><methods><class-id>Roassal2.RTScaleBilinear</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Scaling">rescale	u := uninterpolate uninterpolate: domain first and: domain second.	i := interpolate interpolate: range first and: range second.</body></methods><methods><class-id>Roassal2.RTScaleBilinear</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Scaling">scale: x	^ i interpolate: (u uninterpolate: x)</body></methods><methods><class-id>Roassal2.RTDoubleGrapher</class-id> <category>utility</category><body package="Roassal2-Builder-Grapher-Core">checkIfDataSetHaveBeenAdded	datasets ifEmpty: [ self error: 'No dataset has been added?' ]</body><body package="Roassal2-Builder-Grapher-Core">renderAxis	| centralPoint aPoint anotherPoint |	super renderAxis.		centralPoint := self extent x @ self centralPoint y.	axisConfigurationYRight positionLabel: [ :aLabel :aTick | aLabel translateTo: aTick position + (40 @ 0) ];		minValue:				(self minYRight &gt; 0						ifTrue: [ 0 ]						ifFalse: [ self minYRight ]);		maxValue: self maxYRight.		aPoint := centralPoint x @ 0.	anotherPoint := centralPoint x @ extent y negated.	axisConfigurationYRight fromPoint: aPoint.	axisConfigurationYRight toPoint: anotherPoint.	axisConfigurationYRight axisFrom: aPoint to: anotherPoint</body></methods><methods><class-id>Roassal2.RTDoubleGrapher</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">getMaxNumberOfPoints	"Return the maximum number of points any of the dataset has."	^ datasets inject: 0 into: [ :max :ds | max max: ds numberOfPoints ]</body><body package="Roassal2-Builder-Grapher-Core">maxX	^ self hasDataSet 		ifTrue: [ maxX max: self maxXFromDataSets ]		ifFalse: [ maxX ]</body><body package="Roassal2-Builder-Grapher-Core">maxY	^ self hasDataSet 		ifTrue: [ maxY max: self maxYFromDataSets ]		ifFalse: [ maxY ]</body><body package="Roassal2-Builder-Grapher-Core">minX	^ self hasDataSet 		ifTrue: [ minX min: self minXFromDataSets ]		ifFalse: [ minX ]</body><body package="Roassal2-Builder-Grapher-Core">minY	^ self hasDataSet 		ifTrue: [ minY min: self minYFromDataSets ]		ifFalse: [ minY ]</body><body package="Roassal2-Builder-Grapher-Core">numberOfDataSets	^ datasets size</body></methods><methods><class-id>Roassal2.RTDoubleGrapher</class-id> <category>data sets</category><body package="Roassal2-Builder-Grapher-Core">hasDataSet	^ self numberOfDataSets &gt; 0</body><body package="Roassal2-Builder-Grapher-Core">maxXFromDataSets	^ (datasets collect: #maxX) max</body><body package="Roassal2-Builder-Grapher-Core">maxYFromDataSets	^ (datasets collect: #maxY) max</body><body package="Roassal2-Builder-Grapher-Core">minXFromDataSets	^ (datasets collect: #minX) min</body><body package="Roassal2-Builder-Grapher-Core">minYFromDataSets	^ (datasets collect: #minY) min</body></methods><methods><class-id>Roassal2.RTDoubleGrapher</class-id> <category>min and max</category><body package="Roassal2-Builder-Grapher-Core">computeMinAndMaxForX	super computeMinAndMaxForX.	rightDataSets do: #computeMinAndMaxForX</body><body package="Roassal2-Builder-Grapher-Core">computeMinAndMaxForY	datasets do: #computeMinAndMaxForY.	rightDataSets do: #computeMinAndMaxForY</body><body package="Roassal2-Builder-Grapher-Core">homogenizeMinAndMax		minX := self minX.	maxX := self maxX.	minY := self minY.	maxY := self maxY.	datasets do: [ :ds |		ds minX: minX.		ds minY: minY.		ds maxX: maxX.		ds maxY: maxY. ]</body></methods><methods><class-id>Roassal2.RTDoubleGrapher</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Grapher-Core">axisX	self checkIfDataSetHaveBeenAdded.	^ super axisX</body><body package="Roassal2-Builder-Grapher-Core">axisY	self checkIfDataSetHaveBeenAdded.	^ super axisY</body><body package="Roassal2-Builder-Grapher-Core">axisYRight	axisConfigurationYRight ifNil: [		axisConfigurationYRight := self createAxisConfiguration ].	axisConfigurationYRight		tickLabelOffset: 30 @ 0.	^ axisConfigurationYRight</body><body package="Roassal2-Builder-Grapher-Core">maxYRight	^ (rightDataSets collect: #maxY) max</body><body package="Roassal2-Builder-Grapher-Core">minYRight	self assert: [ rightDataSets notEmpty ] description: 'You need to specify at least one data set for the right axis'.	^ (rightDataSets collect: #minY) min</body><body package="Roassal2-Builder-Grapher-Core">shouldUseNiceLabelsForX: aBool	"Not much to do for now... This class has to be rewritten completely"</body></methods><methods><class-id>Roassal2.RTDoubleGrapher</class-id> <category>adding</category><body package="Roassal2-Builder-Grapher-Core">add: aDataSet	"Essential method. Add a dataset into the grapher. Only non-empty set are considered"	aDataSet numberOfPoints = 0 ifTrue: [ ^ self ].		datasets add: aDataSet.	aDataSet addedInBuilder: self</body><body package="Roassal2-Builder-Grapher-Core">addRight: aDataSet	"Essential method. Add a dataset into the grapher. Only non-empty set are considered"	aDataSet numberOfPoints = 0 ifTrue: [ ^ self ].		rightDataSets add: aDataSet.	aDataSet builder: self</body></methods><methods><class-id>Roassal2.RTDoubleGrapher</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.		"Collection of data sets"	rightDataSets := OrderedCollection new.		"Collection of data sets"	datasets := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTDoubleGrapher</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	datasets do: #computeMinAndMax.	rightDataSets do:#computeMinAndMax.	self homogenizeMinAndMax.	self defineAxesIfNecessary.	self renderAxis.	datasets do: [ :aDataset | aDataset renderIn: aView ].	rightDataSets do: [ :aDataset | aDataset renderIn: aView ]</body></methods><methods><class-id>Roassal2.RTSVGElementPopup</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">element	^ element</body><body package="Roassal2-Exporter-SVG">element: anObject	element := anObject</body></methods><methods><class-id>Roassal2.RTSVGElementPopup</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addEventHandlers: aStream id: aString element: aRTElement  center: aNumber	| visitor myElement|	myElement := (self element value: aRTElement ).	aStream nextPutAll: '&lt;g visibility="hidden"&gt;', String cr.	visitor := RTSVGVisitor new stream: aStream; center: aNumber; yourself.	visitor canvas: myElement encompassingRectangle.	visitor visitElement: myElement.	aStream 		nextPutAll: (self mouseAction: aString);		nextPutAll:  '&lt;/g&gt;'</body></methods><methods><class-id>Roassal2.RTSVGElementPopup</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	element := [ :m | (RTElement  on: m) + (RTBox new color: Color blue; yourself)]</body></methods><methods><class-id>Roassal2.RTCPDiverging class</class-id> <category>default</category><body package="Roassal2-ColorNormalizer">info	^ 'Diverging schemes put equal emphasis on mid-range;critical values and extremes at both ends of the data range. The;critical class or break in the middle of the legend is emphasized;with light colors and low and high extremes are emphasized;with dark colors that have contrasting hues.'</body><body package="Roassal2-ColorNormalizer">rawPalette	^ ((Array new: 9) at: 1 put: ('Spectral'-&gt;((Array new: 9) at: 1 put: (3-&gt;#(#(252 141 89 ) #(255 255 191 ) #(153 213 148 ) )); at: 2 put: (4-&gt;#(#(215 25 28 ) #(253 174 97 ) #(171 221 164 ) #(43 131 186 ) )); at: 3 put: (5-&gt;#(#(215 25 28 ) #(253 174 97 ) #(255 255 191 ) #(171 221 164 ) #(43 131 186 ) )); at: 4 put: (6-&gt;#(#(213 62 79 ) #(252 141 89 ) #(254 224 139 ) #(230 245 152 ) #(153 213 148 ) #(50 136 189 ) )); at: 5 put: (7-&gt;#(#(213 62 79 ) #(252 141 89 ) #(254 224 139 ) #(255 255 191 ) #(230 245 152 ) #(153 213 148 ) #(50 136 189 ) )); at: 6 put: (8-&gt;#(#(213 62 79 ) #(244 109 67 ) #(253 174 97 ) #(254 224 139 ) #(230 245 152 ) #(171 221 164 ) #(102 194 165 ) #(50 136 189 ) )); at: 7 put: (9-&gt;#(#(213 62 79 ) #(244 109 67 ) #(253 174 97 ) #(254 224 139 ) #(255 255 191 ) #(230 245 152 ) #(171 221 164 ) #(102 194 165 ) #(50 136 189 ) )); at: 8 put: (10-&gt;#(#(158 1 66 ) #(213 62 79 ) #(244 109 67 ) #(253 174 97 ) #(254 224 139 ) #(230 245 152 ) #(171 221 164 ) #(102 194 165 ) #(50 136 189 ) #(94 79 162 ) )); at: 9 put: (11-&gt;#(#(158 1 66 ) #(213 62 79 ) #(244 109 67 ) #(253 174 97 ) #(254 224 139 ) #(255 255 191 ) #(230 245 152 ) #(171 221 164 ) #(102 194 165 ) #(50 136 189 ) #(94 79 162 ) )); yourself)); at: 2 put: ('RdYlGn'-&gt;((Array new: 9) at: 1 put: (3-&gt;#(#(252 141 89 ) #(255 255 191 ) #(145 207 96 ) )); at: 2 put: (4-&gt;#(#(215 25 28 ) #(253 174 97 ) #(166 217 106 ) #(26 150 65 ) )); at: 3 put: (5-&gt;#(#(215 25 28 ) #(253 174 97 ) #(255 255 191 ) #(166 217 106 ) #(26 150 65 ) )); at: 4 put: (6-&gt;#(#(215 48 39 ) #(252 141 89 ) #(254 224 139 ) #(217 239 139 ) #(145 207 96 ) #(26 152 80 ) )); at: 5 put: (7-&gt;#(#(215 48 39 ) #(252 141 89 ) #(254 224 139 ) #(255 255 191 ) #(217 239 139 ) #(145 207 96 ) #(26 152 80 ) )); at: 6 put: (8-&gt;#(#(215 48 39 ) #(244 109 67 ) #(253 174 97 ) #(254 224 139 ) #(217 239 139 ) #(166 217 106 ) #(102 189 99 ) #(26 152 80 ) )); at: 7 put: (9-&gt;#(#(215 48 39 ) #(244 109 67 ) #(253 174 97 ) #(254 224 139 ) #(255 255 191 ) #(217 239 139 ) #(166 217 106 ) #(102 189 99 ) #(26 152 80 ) )); at: 8 put: (10-&gt;#(#(165 0 38 ) #(215 48 39 ) #(244 109 67 ) #(253 174 97 ) #(254 224 139 ) #(217 239 139 ) #(166 217 106 ) #(102 189 99 ) #(26 152 80 ) #(0 104 55 ) )); at: 9 put: (11-&gt;#(#(165 0 38 ) #(215 48 39 ) #(244 109 67 ) #(253 174 97 ) #(254 224 139 ) #(255 255 191 ) #(217 239 139 ) #(166 217 106 ) #(102 189 99 ) #(26 152 80 ) #(0 104 55 ) )); yourself)); at: 3 put: ('RdBu'-&gt;((Array new: 9) at: 1 put: (3-&gt;#(#(239 138 98 ) #(247 247 247 ) #(103 169 207 ) )); at: 2 put: (4-&gt;#(#(202 0 32 ) #(244 165 130 ) #(146 197 222 ) #(5 113 176 ) )); at: 3 put: (5-&gt;#(#(202 0 32 ) #(244 165 130 ) #(247 247 247 ) #(146 197 222 ) #(5 113 176 ) )); at: 4 put: (6-&gt;#(#(178 24 43 ) #(239 138 98 ) #(253 219 199 ) #(209 229 240 ) #(103 169 207 ) #(33 102 172 ) )); at: 5 put: (7-&gt;#(#(178 24 43 ) #(239 138 98 ) #(253 219 199 ) #(247 247 247 ) #(209 229 240 ) #(103 169 207 ) #(33 102 172 ) )); at: 6 put: (8-&gt;#(#(178 24 43 ) #(214 96 77 ) #(244 165 130 ) #(253 219 199 ) #(209 229 240 ) #(146 197 222 ) #(67 147 195 ) #(33 102 172 ) )); at: 7 put: (9-&gt;#(#(178 24 43 ) #(214 96 77 ) #(244 165 130 ) #(253 219 199 ) #(247 247 247 ) #(209 229 240 ) #(146 197 222 ) #(67 147 195 ) #(33 102 172 ) )); at: 8 put: (10-&gt;#(#(103 0 31 ) #(178 24 43 ) #(214 96 77 ) #(244 165 130 ) #(253 219 199 ) #(209 229 240 ) #(146 197 222 ) #(67 147 195 ) #(33 102 172 ) #(5 48 97 ) )); at: 9 put: (11-&gt;#(#(103 0 31 ) #(178 24 43 ) #(214 96 77 ) #(244 165 130 ) #(253 219 199 ) #(247 247 247 ) #(209 229 240 ) #(146 197 222 ) #(67 147 195 ) #(33 102 172 ) #(5 48 97 ) )); yourself)); at: 4 put: ('PiYG'-&gt;((Array new: 9) at: 1 put: (3-&gt;#(#(233 163 201 ) #(247 247 247 ) #(161 215 106 ) )); at: 2 put: (4-&gt;#(#(208 28 139 ) #(241 182 218 ) #(184 225 134 ) #(77 172 38 ) )); at: 3 put: (5-&gt;#(#(208 28 139 ) #(241 182 218 ) #(247 247 247 ) #(184 225 134 ) #(77 172 38 ) )); at: 4 put: (6-&gt;#(#(197 27 125 ) #(233 163 201 ) #(253 224 239 ) #(230 245 208 ) #(161 215 106 ) #(77 146 33 ) )); at: 5 put: (7-&gt;#(#(197 27 125 ) #(233 163 201 ) #(253 224 239 ) #(247 247 247 ) #(230 245 208 ) #(161 215 106 ) #(77 146 33 ) )); at: 6 put: (8-&gt;#(#(197 27 125 ) #(222 119 174 ) #(241 182 218 ) #(253 224 239 ) #(230 245 208 ) #(184 225 134 ) #(127 188 65 ) #(77 146 33 ) )); at: 7 put: (9-&gt;#(#(197 27 125 ) #(222 119 174 ) #(241 182 218 ) #(253 224 239 ) #(247 247 247 ) #(230 245 208 ) #(184 225 134 ) #(127 188 65 ) #(77 146 33 ) )); at: 8 put: (10-&gt;#(#(142 1 82 ) #(197 27 125 ) #(222 119 174 ) #(241 182 218 ) #(253 224 239 ) #(230 245 208 ) #(184 225 134 ) #(127 188 65 ) #(77 146 33 ) #(39 100 25 ) )); at: 9 put: (11-&gt;#(#(142 1 82 ) #(197 27 125 ) #(222 119 174 ) #(241 182 218 ) #(253 224 239 ) #(247 247 247 ) #(230 245 208 ) #(184 225 134 ) #(127 188 65 ) #(77 146 33 ) #(39 100 25 ) )); yourself)); at: 5 put: ('PRGn'-&gt;((Array new: 9) at: 1 put: (3-&gt;#(#(175 141 195 ) #(247 247 247 ) #(127 191 123 ) )); at: 2 put: (4-&gt;#(#(123 50 148 ) #(194 165 207 ) #(166 219 160 ) #(0 136 55 ) )); at: 3 put: (5-&gt;#(#(123 50 148 ) #(194 165 207 ) #(247 247 247 ) #(166 219 160 ) #(0 136 55 ) )); at: 4 put: (6-&gt;#(#(118 42 131 ) #(175 141 195 ) #(231 212 232 ) #(217 240 211 ) #(127 191 123 ) #(27 120 55 ) )); at: 5 put: (7-&gt;#(#(118 42 131 ) #(175 141 195 ) #(231 212 232 ) #(247 247 247 ) #(217 240 211 ) #(127 191 123 ) #(27 120 55 ) )); at: 6 put: (8-&gt;#(#(118 42 131 ) #(153 112 171 ) #(194 165 207 ) #(231 212 232 ) #(217 240 211 ) #(166 219 160 ) #(90 174 97 ) #(27 120 55 ) )); at: 7 put: (9-&gt;#(#(118 42 131 ) #(153 112 171 ) #(194 165 207 ) #(231 212 232 ) #(247 247 247 ) #(217 240 211 ) #(166 219 160 ) #(90 174 97 ) #(27 120 55 ) )); at: 8 put: (10-&gt;#(#(64 0 75 ) #(118 42 131 ) #(153 112 171 ) #(194 165 207 ) #(231 212 232 ) #(217 240 211 ) #(166 219 160 ) #(90 174 97 ) #(27 120 55 ) #(0 68 27 ) )); at: 9 put: (11-&gt;#(#(64 0 75 ) #(118 42 131 ) #(153 112 171 ) #(194 165 207 ) #(231 212 232 ) #(247 247 247 ) #(217 240 211 ) #(166 219 160 ) #(90 174 97 ) #(27 120 55 ) #(0 68 27 ) )); yourself)); at: 6 put: ('RdYlBu'-&gt;((Array new: 9) at: 1 put: (3-&gt;#(#(252 141 89 ) #(255 255 191 ) #(145 191 219 ) )); at: 2 put: (4-&gt;#(#(215 25 28 ) #(253 174 97 ) #(171 217 233 ) #(44 123 182 ) )); at: 3 put: (5-&gt;#(#(215 25 28 ) #(253 174 97 ) #(255 255 191 ) #(171 217 233 ) #(44 123 182 ) )); at: 4 put: (6-&gt;#(#(215 48 39 ) #(252 141 89 ) #(254 224 144 ) #(224 243 248 ) #(145 191 219 ) #(69 117 180 ) )); at: 5 put: (7-&gt;#(#(215 48 39 ) #(252 141 89 ) #(254 224 144 ) #(255 255 191 ) #(224 243 248 ) #(145 191 219 ) #(69 117 180 ) )); at: 6 put: (8-&gt;#(#(215 48 39 ) #(244 109 67 ) #(253 174 97 ) #(254 224 144 ) #(224 243 248 ) #(171 217 233 ) #(116 173 209 ) #(69 117 180 ) )); at: 7 put: (9-&gt;#(#(215 48 39 ) #(244 109 67 ) #(253 174 97 ) #(254 224 144 ) #(255 255 191 ) #(224 243 248 ) #(171 217 233 ) #(116 173 209 ) #(69 117 180 ) )); at: 8 put: (10-&gt;#(#(165 0 38 ) #(215 48 39 ) #(244 109 67 ) #(253 174 97 ) #(254 224 144 ) #(224 243 248 ) #(171 217 233 ) #(116 173 209 ) #(69 117 180 ) #(49 54 149 ) )); at: 9 put: (11-&gt;#(#(165 0 38 ) #(215 48 39 ) #(244 109 67 ) #(253 174 97 ) #(254 224 144 ) #(255 255 191 ) #(224 243 248 ) #(171 217 233 ) #(116 173 209 ) #(69 117 180 ) #(49 54 149 ) )); yourself)); at: 7 put: ('BrBG'-&gt;((Array new: 9) at: 1 put: (3-&gt;#(#(216 179 101 ) #(245 245 245 ) #(90 180 172 ) )); at: 2 put: (4-&gt;#(#(166 97 26 ) #(223 194 125 ) #(128 205 193 ) #(1 133 113 ) )); at: 3 put: (5-&gt;#(#(166 97 26 ) #(223 194 125 ) #(245 245 245 ) #(128 205 193 ) #(1 133 113 ) )); at: 4 put: (6-&gt;#(#(140 81 10 ) #(216 179 101 ) #(246 232 195 ) #(199 234 229 ) #(90 180 172 ) #(1 102 94 ) )); at: 5 put: (7-&gt;#(#(140 81 10 ) #(216 179 101 ) #(246 232 195 ) #(245 245 245 ) #(199 234 229 ) #(90 180 172 ) #(1 102 94 ) )); at: 6 put: (8-&gt;#(#(140 81 10 ) #(191 129 45 ) #(223 194 125 ) #(246 232 195 ) #(199 234 229 ) #(128 205 193 ) #(53 151 143 ) #(1 102 94 ) )); at: 7 put: (9-&gt;#(#(140 81 10 ) #(191 129 45 ) #(223 194 125 ) #(246 232 195 ) #(245 245 245 ) #(199 234 229 ) #(128 205 193 ) #(53 151 143 ) #(1 102 94 ) )); at: 8 put: (10-&gt;#(#(84 48 5 ) #(140 81 10 ) #(191 129 45 ) #(223 194 125 ) #(246 232 195 ) #(199 234 229 ) #(128 205 193 ) #(53 151 143 ) #(1 102 94 ) #(0 60 48 ) )); at: 9 put: (11-&gt;#(#(84 48 5 ) #(140 81 10 ) #(191 129 45 ) #(223 194 125 ) #(246 232 195 ) #(245 245 245 ) #(199 234 229 ) #(128 205 193 ) #(53 151 143 ) #(1 102 94 ) #(0 60 48 ) )); yourself)); at: 8 put: ('RdGy'-&gt;((Array new: 9) at: 1 put: (3-&gt;#(#(239 138 98 ) #(255 255 255 ) #(153 153 153 ) )); at: 2 put: (4-&gt;#(#(202 0 32 ) #(244 165 130 ) #(186 186 186 ) #(64 64 64 ) )); at: 3 put: (5-&gt;#(#(202 0 32 ) #(244 165 130 ) #(255 255 255 ) #(186 186 186 ) #(64 64 64 ) )); at: 4 put: (6-&gt;#(#(178 24 43 ) #(239 138 98 ) #(253 219 199 ) #(224 224 224 ) #(153 153 153 ) #(77 77 77 ) )); at: 5 put: (7-&gt;#(#(178 24 43 ) #(239 138 98 ) #(253 219 199 ) #(255 255 255 ) #(224 224 224 ) #(153 153 153 ) #(77 77 77 ) )); at: 6 put: (8-&gt;#(#(178 24 43 ) #(214 96 77 ) #(244 165 130 ) #(253 219 199 ) #(224 224 224 ) #(186 186 186 ) #(135 135 135 ) #(77 77 77 ) )); at: 7 put: (9-&gt;#(#(178 24 43 ) #(214 96 77 ) #(244 165 130 ) #(253 219 199 ) #(255 255 255 ) #(224 224 224 ) #(186 186 186 ) #(135 135 135 ) #(77 77 77 ) )); at: 8 put: (10-&gt;#(#(103 0 31 ) #(178 24 43 ) #(214 96 77 ) #(244 165 130 ) #(253 219 199 ) #(224 224 224 ) #(186 186 186 ) #(135 135 135 ) #(77 77 77 ) #(26 26 26 ) )); at: 9 put: (11-&gt;#(#(103 0 31 ) #(178 24 43 ) #(214 96 77 ) #(244 165 130 ) #(253 219 199 ) #(255 255 255 ) #(224 224 224 ) #(186 186 186 ) #(135 135 135 ) #(77 77 77 ) #(26 26 26 ) )); yourself)); at: 9 put: ('PuOr'-&gt;((Array new: 9) at: 1 put: (3-&gt;#(#(241 163 64 ) #(247 247 247 ) #(153 142 195 ) )); at: 2 put: (4-&gt;#(#(230 97 1 ) #(253 184 99 ) #(178 171 210 ) #(94 60 153 ) )); at: 3 put: (5-&gt;#(#(230 97 1 ) #(253 184 99 ) #(247 247 247 ) #(178 171 210 ) #(94 60 153 ) )); at: 4 put: (6-&gt;#(#(179 88 6 ) #(241 163 64 ) #(254 224 182 ) #(216 218 235 ) #(153 142 195 ) #(84 39 136 ) )); at: 5 put: (7-&gt;#(#(179 88 6 ) #(241 163 64 ) #(254 224 182 ) #(247 247 247 ) #(216 218 235 ) #(153 142 195 ) #(84 39 136 ) )); at: 6 put: (8-&gt;#(#(179 88 6 ) #(224 130 20 ) #(253 184 99 ) #(254 224 182 ) #(216 218 235 ) #(178 171 210 ) #(128 115 172 ) #(84 39 136 ) )); at: 7 put: (9-&gt;#(#(179 88 6 ) #(224 130 20 ) #(253 184 99 ) #(254 224 182 ) #(247 247 247 ) #(216 218 235 ) #(178 171 210 ) #(128 115 172 ) #(84 39 136 ) )); at: 8 put: (10-&gt;#(#(127 59 8 ) #(179 88 6 ) #(224 130 20 ) #(253 184 99 ) #(254 224 182 ) #(216 218 235 ) #(178 171 210 ) #(128 115 172 ) #(84 39 136 ) #(45 0 75 ) )); at: 9 put: (11-&gt;#(#(127 59 8 ) #(179 88 6 ) #(224 130 20 ) #(253 184 99 ) #(254 224 182 ) #(247 247 247 ) #(216 218 235 ) #(178 171 210 ) #(128 115 172 ) #(84 39 136 ) #(45 0 75 ) )); yourself)); yourself)</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlot</class-id> <category>UI</category><body package="Roassal2-Builder-AnimatedScatterPlot">createElements	| es shape |	shape := RTEllipse new		size: 15;		color: (Color gray alpha: 0.4).	es := shape elementsOn: self allEntries.	es @ RTPopup.	es when: TRMouseClick do: [ :evt | evt element inspect ].	^ es</body><body package="Roassal2-Builder-AnimatedScatterPlot">createView	| v |	v := RTView new.	v setDefaultMenu.	v @ RTDraggableView.	^ v</body><body package="Roassal2-Builder-AnimatedScatterPlot">drawAxis	view canvas		addShape:			(TRLineShape new				color: Color veryLightGray;				from: 0 @ 0 to: 0 @ self chartTotalSize negated).	view canvas		addShape:			(TRLineShape new				color: Color veryLightGray;				from: 0 @ 0 to: self chartTotalSize @ 0)</body><body package="Roassal2-Builder-AnimatedScatterPlot">renderCurrentFrame	self renderFrame: frame</body><body package="Roassal2-Builder-AnimatedScatterPlot">renderIn: aView	self setScale.	self setAndCreateElements.	self drawAxis.	self setButtons.	self setViewTitle.	self renderCurrentFrame</body><body package="Roassal2-Builder-AnimatedScatterPlot">setAndCreateElements	| es |	es := self createElements.	view addAll: es</body><body package="Roassal2-Builder-AnimatedScatterPlot">setButtons	| menuBuilder |	menuBuilder := RTMenuBuilder new view: view.		menuBuilder menu: 'previous' background: (Color lightBlue alpha: 0.4) callback: [ self previousFrame ].	menuBuilder menu: 'next' background: (Color lightBlue alpha: 0.4) callback: [ self nextFrame ].	menuBuilder menu: 'x-axis' submenu: '0' background: (Color red alpha: 0.4) callback: [ self x: 0. self renderCurrentFrame ].	menuBuilder menu: 'y-axis' submenu: '0' background: (Color red alpha: 0.4) callback: [ self y: 0. self renderCurrentFrame ].		columns withIndexDo: [ :columnName :index | 		menuBuilder 			menu: 'x-axis' 			submenu: columnName			background: (Color red alpha: 0.4)			callback: [ self x: [ :row | row at: (index + 1) ]. self setScale. self renderCurrentFrame ].		menuBuilder 			menu: 'y-axis' 			submenu: columnName			background: (Color red alpha: 0.4)			callback: [ self y: [ :row | row at: (index + 1) ]. self setScale. self renderCurrentFrame ].	].</body><body package="Roassal2-Builder-AnimatedScatterPlot">setMaxSize	sizeMax := self maxOfColumn: size</body><body package="Roassal2-Builder-AnimatedScatterPlot">setScale	self setMaxSize.	maxX := self maxOfColumn: x.	maxY := self maxOfColumn: y</body><body package="Roassal2-Builder-AnimatedScatterPlot">setViewTitle	labelShape := TRLabelShape new text: 'Hello'.	view canvas addFixedShape: labelShape.	TRConstraint stickAtTheBottomOfTheWindow: labelShape</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlot</class-id> <category>public - frames</category><body package="Roassal2-Builder-AnimatedScatterPlot">chartTotalSize	^ 200</body><body package="Roassal2-Builder-AnimatedScatterPlot">getTitleNumber: aFrameNumber table: table	^ (table attributes at: #title ifAbsent: ['']) , ' ' , aFrameNumber printString , '/' , self numberOfTables printString</body><body package="Roassal2-Builder-AnimatedScatterPlot">nextFrame	frame := (frame + 1) min: self numberOfTables.	self renderFrame: frame</body><body package="Roassal2-Builder-AnimatedScatterPlot">numberOfTables	^ tables size</body><body package="Roassal2-Builder-AnimatedScatterPlot">previousFrame	frame := (frame - 1) max: 1.	self renderFrame: frame</body><body package="Roassal2-Builder-AnimatedScatterPlot">renderFrame: aFrameNumber	| elements newX newY r newSize table |	table := tables at: aFrameNumber.	elements := self allEntries collect: [ :entryName | view elementFromModel: entryName ].	elements		do: [ :e | 			"We get the row that we are interested in"			r := table values detect: [ :rrow | rrow first = e model ] ifNone: [ nil ].			r				ifNil: [ 					newSize := 0.					newX := 0.					newY := 0 ].			r				ifNotNil: [ 					newX := (x rtValue: r) max: maxX in: (0 to: self chartTotalSize).					newY := ((y rtValue: r) max: maxY in: (0 to: self chartTotalSize)) negated.					newSize := (size rtValue: r) max: sizeMax in: (5 to: 30).					properties do: [ :prop | prop value: r value: e ] ].			view addAnimation: (RTAccelerationMove new to: newX @ newY during: 0.4 on: e).			e trachelShape size: newSize ].	"Give indication about the frame"	labelShape text: (self getTitleNumber: aFrameNumber table: table).	view signalUpdate</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlot</class-id> <category>utlity</category><body package="Roassal2-Builder-AnimatedScatterPlot">getTableForClasses: classes	"	self new getTableForClasses: { RTAnimatedScatterPlot . RTElement . RTShape }	"		| s |	s := WriteStream on: String new.	classes do: [ :c |		s nextPutAll: c name.		s nextPut: Character tab.		s nextPutAll: (c numberOfMethods) printString.		s nextPut: Character tab.		s nextPutAll: (c numberOfVariables) printString.		s nextPut: Character tab.		s nextPutAll: (c numberOfLinesOfCode) printString.		s nextPut: Character tab.		s cr.		].	^ s contents</body><body package="Roassal2-Builder-AnimatedScatterPlot">getTableForPackage: packageName	"	self new getTableForPackage: 'Trachel'	"		| s classes |	classes := ((TRPlatform current packageNamed: packageName) classes collect: #baseClass) asSet.	s := WriteStream on: String new.	classes do: [ :c |		s nextPutAll: c name.		s nextPut: Character tab.		s nextPutAll: c numberOfMethods printString.		s nextPut: Character tab.		s nextPutAll: c numberOfVariables printString.		s nextPut: Character tab.		s nextPutAll: c numberOfLinesOfCode printString.		s nextPut: Character tab.		s cr.		].	^ s contents</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlot</class-id> <category>enumerating</category><body package="Roassal2-Builder-AnimatedScatterPlot">allEntries	| answer |	answer := Set new.	tables do: [ :t | answer addAll: t firstColumn ].	^ answer asSortedCollection asArray</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlot</class-id> <category>accessing</category><body package="Roassal2-Builder-AnimatedScatterPlot">color: aBlock	color := aBlock</body><body package="Roassal2-Builder-AnimatedScatterPlot">columns: columnNames	columns := columnNames</body><body package="Roassal2-Builder-AnimatedScatterPlot">frame	^ frame</body><body package="Roassal2-Builder-AnimatedScatterPlot">maxOfColumn: aBlock	"aBlock is evaluated for each row, in each table, and return the maximum value"	| max |	max := tables first maxOfColumn: aBlock.	tables do: [ :t |		max := max max: (t maxOfColumn: aBlock)		 ].	^ max</body><body package="Roassal2-Builder-AnimatedScatterPlot">size: aBlock	size := aBlock</body><body package="Roassal2-Builder-AnimatedScatterPlot">x: aBlock	x := aBlock</body><body package="Roassal2-Builder-AnimatedScatterPlot">y: aBlock	y := aBlock</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlot</class-id> <category>adding</category><body package="Roassal2-Builder-AnimatedScatterPlot">addName: aTitle table: aTable	"This method will be enhanced later"	aTable attributes at: #title put: aTitle.	self addTable: aTable</body><body package="Roassal2-Builder-AnimatedScatterPlot">addTable: table	tables add: table.	table convertColumnsAsFloat: (2 to: table numberOfColumns).</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlot</class-id> <category>coloring</category><body package="Roassal2-Builder-AnimatedScatterPlot">if: aBlockForCondition color: aBlockForColor	properties add: [ :row :element |		(aBlockForCondition rtValue: row) ifTrue: [ element trachelShape color: ((aBlockForColor rtValue: row) alpha: 0.4) ] ]</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlot</class-id> <category>initialization</category><body package="Roassal2-Builder-AnimatedScatterPlot">initialize	super initialize.	tables := OrderedCollection new.	frame := 1.	properties := OrderedCollection new.	columns := #()</body></methods><methods><class-id>Roassal2.RTColorTransitionAnimation</class-id> <category>actions</category><body package="Roassal2-Animation">start	animatedValue start</body></methods><methods><class-id>Roassal2.RTColorTransitionAnimation</class-id> <category>public</category><body package="Roassal2-Animation">toColor: finalColor during: numberOfSeconds on: anElement		element := anElement.	colorNormalizer := RTNColorLinearNormalizer		inContext: ((0 to: 1 by: 1/(30 * numberOfSeconds)) collect: #yourself)		lowColor: anElement trachelShape color		highColor: finalColor.			animatedValue := TRVIAnimatedValue new							evaluator: [ :t | colorNormalizer rtValue: t ];							timer: (TRVITimer new cycleLength: numberOfSeconds);							yourself.</body></methods><methods><class-id>Roassal2.RTColorTransitionAnimation</class-id> <category>testing</category><body package="Roassal2-Animation">hasCompleted	^ animatedValue hasCompleted</body></methods><methods><class-id>Roassal2.RTColorTransitionAnimation</class-id> <category>refreshing</category><body package="Roassal2-Animation">refresh	| color |	color := animatedValue value.	element trachelShape color: color.	"element trachelShape resetPath."	element trachelShape canvas signalUpdate.</body></methods><methods><class-id>Roassal2.TRVIAnimatedPoint</class-id> <category>accessing</category><body package="Roassal2-Trachel-Viva">x	^ x</body><body package="Roassal2-Trachel-Viva">x: anObject	x := anObject</body><body package="Roassal2-Trachel-Viva">y	^ y</body><body package="Roassal2-Trachel-Viva">y: anObject	y := anObject</body></methods><methods><class-id>Roassal2.TRVIAnimatedPoint</class-id> <category>initialization</category><body package="Roassal2-Trachel-Viva">initialize	super initialize.	x := 0.	y := 0.</body></methods><methods><class-id>Roassal2.TRVIAnimatedPoint</class-id> <category>as yet unclassified</category><body package="Roassal2-Trachel-Viva">+ anotherPoint	^ TRVIAnimatedPoint new 		x: [ self x value + (anotherPoint x) ];		y: [ self y value + (anotherPoint y) ];		yourself		"	^ VIAnimatedPoint new 		x: [ :time | (self x value: time) + (anotherPoint x value: time) ];		y: [ :time | (self y value: time) + (anotherPoint y value: time) ];		yourself"</body><body package="Roassal2-Trachel-Viva">- anotherPoint	^ TRVIAnimatedPoint new 		x: [ self x value - (anotherPoint x) ];		y: [ self y value - (anotherPoint y) ];		yourself		"	^ VIAnimatedPoint new 		x: [ :time | (self x value: time) + (anotherPoint x value: time) ];		y: [ :time | (self y value: time) + (anotherPoint y value: time) ];		yourself"</body></methods><methods><class-id>Roassal2.GRectangle</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Roassal2.GRectangle</class-id> <category>comparing</category><body package="Roassal2-Pharo">intersectLineSegment: aLineSegment	^ aLineSegment intersectRectangle: self</body></methods><methods><class-id>Roassal2.GRectangle</class-id> <category>accessing</category><body package="Roassal2-Pharo">encompassingRectangle	^ self</body></methods><methods><class-id>Roassal2.RTVisitor</class-id> <category>visitor</category><body package="Roassal2-Core">visitCanvas: aCanvas</body><body package="Roassal2-Core">visitView: aView	aView canvas accept: self</body></methods><methods><class-id>Roassal2.RTVisitor</class-id> <category>initialization</category><body package="Roassal2-Core">initialize	super initialize.	names := Dictionary new.</body></methods><methods><class-id>Roassal2.RTVisitor</class-id> <category>helpers</category><body package="Roassal2-Core">number: n		| f |	^ n isNaN 		ifTrue: ['NaN']		ifFalse: [ n isInteger 			ifTrue: [ n asString ]			ifFalse: [ f := n asFloat.				f fractionPart isZero 					ifTrue: [ f rounded asString ]					ifFalse: [ f asString ] ]  ]</body></methods><methods><class-id>Roassal2.RTVisitor</class-id> <category>utils</category><body package="Roassal2-Core">nameFor: anElement	"Author: milton mamani	Date: 12/05/2015	There are several shapes and edges, to handle the relations between the shapes RTVisitor	uses a dictionary(names) to asign one unique id to that shape"	(names includesKey: anElement) 		ifTrue: [ ^ names at: anElement ] 		ifFalse: [ 			| n |			n := names size printStringHex.			names at: anElement put: n.			^ n.]</body></methods><methods><class-id>Roassal2.RTSVGVisitor</class-id> <category>visitor</category><body package="Roassal2-Exporter-SVG">setCanvas	self canvas = nil		ifTrue: [ self fixedEncompassingRectangle ]</body><body package="Roassal2-Exporter-SVG">visit	self setCanvas.	self visitView: self view.	self afterStream do: [ :s | s value: 1 ]</body><body package="Roassal2-Exporter-SVG">visitAbstractLine: anAbstractLine	anAbstractLine accept: anAbstractLine</body><body package="Roassal2-Exporter-SVG">visitAbstractLineDecorationShape: anAbstractLineDecoration	anAbstractLineDecoration accept: anAbstractLineDecoration</body><body package="Roassal2-Exporter-SVG">visitArcShape: aShape	|sCenter svgE|	sCenter := self alignPoint: (aShape position).	svgE := RTSVGArc new element: (aShape) center: sCenter r1: (aShape innerRadius) r2: (aShape externalRadius) aAngle: (aShape alphaAngle) bAngle: (aShape betaAngle) color: (aShape color).	svgE addOn: stream using: self.</body><body package="Roassal2-Exporter-SVG">visitArrowHeadShape: arrowHeadShape	| aid color bColor w s svgE|	aid := self getDecorationId: arrowHeadShape.	color := arrowHeadShape color.	bColor := arrowHeadShape strokePaint.	w := arrowHeadShape width.	s := arrowHeadShape mySize.	(markers contains: aid)		ifFalse: [  			svgE := RTSVGArrowHeadMarker new id: aid fillColor: color borderColor: bColor width: w size: s.			svgE addOn: stream using: self. 			markers add: aid. 			]</body><body package="Roassal2-Exporter-SVG">visitArrowShape: arrowShape	| aid bColor w s svgE|	aid := self getDecorationId: arrowShape.	bColor := arrowShape strokePaint.	w := arrowShape width.	s := arrowShape mySize.	(markers includes: aid)		ifFalse: [ 			svgE := RTSVGArrowMarker new id: aid fillColor: nil borderColor: bColor width: w size: s.			svgE addOn: stream using: self. 			markers add: aid. 			]</body><body package="Roassal2-Exporter-SVG">visitBezierShape: aBezierShape	| points svgE |	points := aBezierShape points.	points := points collect: [ :p | self alignPoint: p ].	svgE := RTSVGBezierLine new		element: aBezierShape		points: points		width: aBezierShape width		color: aBezierShape strokePaint.	svgE addOn: stream using: self</body><body package="Roassal2-Exporter-SVG">visitBezierShape: aBezierShape with: aLineDecoration	|points svgE|	points:= aBezierShape points copy.	points := points collect: [ :p | self alignPoint: p].	svgE := RTSVGBezierLine new element: (aBezierShape) points: points width: (aBezierShape width) color: (aBezierShape strokePaint) decoration: aLineDecoration.	svgE addOn: stream using: self.</body><body package="Roassal2-Exporter-SVG">visitBitMapShape: aBitmapShape	| form box svgE|	"Not supported yet"	"form := aBitmapShape form.	box := self alignRectangle: (aBitmapShape encompassingRectangle).	svgE := RTSVGBitmap new element: (aBitmapShape element) form: form box: box.	svgE addOn: stream using: self."</body><body package="Roassal2-Exporter-SVG">visitBoxShape: aBox	|borderColor fillColor box svgE|	((aBox color) isNil)		ifTrue: [ fillColor := Color r: 0 g: 0 b: 0]		ifFalse: [ fillColor := aBox color].	((aBox strokePaint) isNil)		ifFalse: [ borderColor := aBox strokePaint].	box := self alignRectangle: (aBox encompassingRectangle).	svgE := RTSVGRectangle new element: aBox box: box fillColor: fillColor borderWidth: 1 borderColor: borderColor.	svgE addOn: stream using: self.</body><body package="Roassal2-Exporter-SVG">visitCanvas: aCanvas	|elementShapes edgeShapes decoratedEdgeShapes decorationShapes nonDecorationShapes lineClasses lineDecorationClasses canvasShapes|			canvasShapes := aCanvas shapes.	lineClasses := Array with: TRLineShape with: TRBezierShape.	lineDecorationClasses := TRAbstractLineDecoratorShape withAllSubclasses.	elementShapes := canvasShapes reject: [ :e |  (lineClasses includes: e class)  or: [ lineDecorationClasses includes: e class  ]].	edgeShapes := (canvasShapes select: [ :e |  (lineClasses includes: e class)] ) asOrderedCollection.	nonDecorationShapes := (canvasShapes reject: [ :e | lineDecorationClasses includes: e class ]) asOrderedCollection.	decorationShapes := canvasShapes select: [ :e |  lineDecorationClasses includes: e class].	decoratedEdgeShapes := self separateDecorated: edgeShapes decorations: decorationShapes.		stream 		nextPutAll: '&lt;defs&gt;'.	decorationShapes do: [:s | s accept: self ].	stream 		nextPutAll: '&lt;/defs&gt;'.	nonDecorationShapes do:[:s | s accept: self].	decoratedEdgeShapes do:[:p | p first accept: self with: p second].</body><body package="Roassal2-Exporter-SVG">visitDiamondShape: diamondShape	| aid color bColor w s svgE|	aid := self getDecorationId: diamondShape.	color := diamondShape color.	bColor := diamondShape strokePaint.	w := diamondShape width.	s := diamondShape mySize.	(markers contains: aid)		ifFalse: [  			svgE := RTSVGDiamondMarker new id: aid fillColor: color borderColor: bColor width: w size: s.			svgE addOn: stream using: self. 			markers add: aid. 			]</body><body package="Roassal2-Exporter-SVG">visitEllipseShape: anEllipse		|borderColor fillColor box svgE|	((anEllipse color) isNil)		ifTrue: [ fillColor := Color r: 0 g: 0 b: 0]		ifFalse: [ fillColor := anEllipse color].	((anEllipse strokePaint) isNil)		ifFalse: [ borderColor := anEllipse strokePaint].	box := self alignRectangle: (anEllipse encompassingRectangle).	svgE := RTSVGOval new element: anEllipse box: box color: fillColor borderWidth: 1 borderColor: borderColor.	svgE addOn: stream using: self.</body><body package="Roassal2-Exporter-SVG">visitGroup: aRTGroup	aRTGroup accept: self.</body><body package="Roassal2-Exporter-SVG">visitLabelShape: aLabel	| color rectangle position text svgE|	color := aLabel color.		rectangle := aLabel encompassingRectangle.	position := self alignPoint: ((rectangle topLeft x + (rectangle width/4)) @ rectangle center y).	text := aLabel text.	svgE := RTSVGText new 		element: aLabel 		text: text 		at: position 		color: color 		angle: aLabel angleInDegrees.	svgE addOn: stream using: self.</body><body package="Roassal2-Exporter-SVG">visitLineShape: aLine	|startingPoint endingPoint svgE|	startingPoint := self alignPoint: (aLine from).	endingPoint := self alignPoint: (aLine to).	svgE := RTSVGLine new element: (aLine) from: startingPoint to: endingPoint width: 1 color: (aLine strokePaint).	svgE addOn: stream using: self.</body><body package="Roassal2-Exporter-SVG">visitLineShape: aLine with: aLineDecoration	|startingPoint endingPoint svgE|	startingPoint := self alignPoint: (aLine from).	endingPoint := self alignPoint: (aLine to).	svgE := RTSVGLine new element: (aLine) from: startingPoint to: endingPoint width: 1 color: (aLine strokePaint) decoration: aLineDecoration.	svgE addOn: stream using: self.</body><body package="Roassal2-Exporter-SVG">visitMondrianViewBuilder: aView	aView view accept: self</body><body package="Roassal2-Exporter-SVG">visitNoShape: aNoShape	"Do nothing"</body><body package="Roassal2-Exporter-SVG">visitPolygonShape: aPolygon		|borderColor fillColor box svgE|	((aPolygon color) isNil)		ifTrue: [ fillColor := Color r: 0 g: 0 b: 0]		ifFalse: [ fillColor := aPolygon color].	((aPolygon strokePaint) isNil)		ifFalse: [ borderColor := aPolygon strokePaint].	box := self alignRectangle: (aPolygon encompassingRectangle).	svgE := RTSVGPolygon new element: aPolygon box: box color: fillColor borderWidth: 1 borderColor: borderColor.	svgE addOn: stream using: self.</body><body package="Roassal2-Exporter-SVG">visitRotatedLabelShape: aRotatedLabel	| color rectangle position text angle svgE|	color := aRotatedLabel color.		rectangle := aRotatedLabel encompassingRectangle.	position := self alignPoint: ((rectangle topLeft x + (rectangle width/4)) @ rectangle center y).	text := aRotatedLabel text.	angle := aRotatedLabel angle.	svgE := RTSVGText new element: aRotatedLabel text: text at: position color: color angle: angle.	svgE addOn: stream using: self.</body><body package="Roassal2-Exporter-SVG">visitSVGPath: aSVGPath	|borderColor fillColor svgE|	((aSVGPath color) isNil)		ifTrue: [ fillColor := Color r: 0 g: 0 b: 0]		ifFalse: [ fillColor := aSVGPath color].	((aSVGPath strokePaint) isNil)		ifTrue: [ borderColor := fillColor]		ifFalse: [ borderColor := aSVGPath strokePaint].	svgE := RTSVGPathEntity new element: (aSVGPath) path: (aSVGPath pathString) center: (self center) scale: (aSVGPath scale) fillColor: fillColor borderColor: borderColor width: 1.	svgE addOn: stream using: self.</body><body package="Roassal2-Exporter-SVG">visitShape: aShape	aShape accept: self</body></methods><methods><class-id>Roassal2.RTSVGVisitor</class-id> <category>alignment</category><body package="Roassal2-Exporter-SVG">alignLine: aLine	|distanceX distanceY fromX fromY|	distanceX := canvas topLeft x negated + center x.	distanceY := canvas topLeft y negated + center y.	fromX := aLine from x + distanceX.	fromY := aLine from y + distanceY.	^(TRLineShape new from: fromX@fromY; to: (fromX + aLine to x) @ (fromY + aLine to y))</body><body package="Roassal2-Exporter-SVG">alignPoint: aPoint	|distanceX distanceY originX originY|	distanceX := canvas topLeft x negated + center x.	distanceY := canvas topLeft y negated + center y.	originX := aPoint x + distanceX.	originY := aPoint y + distanceY.	^originX@originY</body><body package="Roassal2-Exporter-SVG">alignRectangle: aRectangle	|distanceX distanceY originX originY|	distanceX := canvas topLeft x negated + center x.	distanceY := canvas topLeft y negated + center y.	originX := aRectangle topLeft x + distanceX.	originY := aRectangle topLeft y + distanceY.	^Rectangle origin: originX@originY corner: (originX + aRectangle width) @ (originY + aRectangle height)</body><body package="Roassal2-Exporter-SVG">fixedEncompassingRectangle 	| shapes |	shapes := self view canvas shapes.	canvas := shapes first encompassingRectangle.	shapes do: [ :s| |rect|				rect := s encompassingRectangle.				rect height &lt; 0 					ifTrue: [ rect := Rectangle origin: rect bottomLeft corner: rect topRight].				canvas := canvas merge: rect.				 ].	^canvas</body></methods><methods><class-id>Roassal2.RTSVGVisitor</class-id> <category>interactions</category><body package="Roassal2-Exporter-SVG">addContainedInteractions: id element: e	| aNumber |	aNumber := self alignPoint: e center.	(interactions at: e ifAbsent: [OrderedCollection new]) 		do: [ :i | i contained			ifTrue: [ i addEventHandlers: stream id: id  element: e center: aNumber] ]</body><body package="Roassal2-Exporter-SVG">addEmbeddingInteractions: id element: e	|closings aNumber |	aNumber := self alignPoint: e center.	closings := OrderedCollection new.	(interactions at: e ifAbsent: [OrderedCollection new]) 		do: [ :i | (i external not and: [i contained not])			ifTrue: [ 				closings add: (i addEventHandlers: stream id: id  element: e center: aNumber)] ].	^(closings reverse)</body><body package="Roassal2-Exporter-SVG">addExternalInteractions: id element: el	| aNumber |	aNumber := self alignPoint: el center.	(interactions at: el ifAbsent: [OrderedCollection new]) 		do: [ :i | i external			ifTrue: [ 				self stream					nextPutAll: ' onmousemove="showPopup(evt, ''';					nextPutAll: id;					nextPutAll: ''')" onmouseout="hidePopup(''';					nextPutAll: id;					nextPutAll: ''')"'.						self afterStream add: [:e | 					i addEventHandlers: stream id: id  element: el center: aNumber] ]]</body></methods><methods><class-id>Roassal2.RTSVGVisitor</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">afterStream	"Collection of evaluation promises, needed to write instructions, such as popups, after the actual svg code of the elements"	^ afterStream</body><body package="Roassal2-Exporter-SVG">afterStream: anObject	afterStream := anObject</body><body package="Roassal2-Exporter-SVG">canvas	^canvas</body><body package="Roassal2-Exporter-SVG">canvas: aCanvas	canvas := aCanvas.</body><body package="Roassal2-Exporter-SVG">center	^center</body><body package="Roassal2-Exporter-SVG">center: aPoint	center := aPoint</body><body package="Roassal2-Exporter-SVG">interactions	^ interactions</body><body package="Roassal2-Exporter-SVG">interactions: anObject	interactions := anObject</body><body package="Roassal2-Exporter-SVG">names	^ names</body><body package="Roassal2-Exporter-SVG">names: anObject	names := anObject</body><body package="Roassal2-Exporter-SVG">stream	^stream</body><body package="Roassal2-Exporter-SVG">stream: aStream	stream := aStream.</body><body package="Roassal2-Exporter-SVG">view	^view</body><body package="Roassal2-Exporter-SVG">view: aView	view := aView.</body></methods><methods><class-id>Roassal2.RTSVGVisitor</class-id> <category>utils</category><body package="Roassal2-Exporter-SVG">getCorrespondingLine: decorator from: lines	lines do: [ :l |		(l class = TRBezierShape) 			ifTrue: [ decorator to = l points last 				ifTrue: [					lines remove: l. 					^ Array with: l with: decorator ] ]			ifFalse: [ decorator to = l to ifTrue: [ 					lines remove: l. 					^ Array with: l with: decorator ] ].		 ].	^nil</body><body package="Roassal2-Exporter-SVG">getDecorationId: aLineDecorationShape	|t w c s lw|	t := aLineDecorationShape class name.	w := aLineDecorationShape mySize.	c := aLineDecorationShape color.	s := aLineDecorationShape strokePaint.	lw := aLineDecorationShape width.	^(t asString, w asString, ((c red * 256) + (s red * 256)) rounded asString, ((c green * 256) + (s green * 256)) rounded asString, ((c blue * 256) + (s blue * 256)) rounded asString, lw asString)</body><body package="Roassal2-Exporter-SVG">separateDecorated: lines decorations: decorations	|decorated temp |	decorated := OrderedCollection new.	decorations do: [ :d | 		temp := (self getCorrespondingLine: d from: lines).		decorated add: temp.		].	^decorated</body></methods><methods><class-id>Roassal2.RTSVGVisitor</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	afterStream := OrderedCollection new.	interactions := Dictionary new.	markers := OrderedCollection new.	center := 1@1.	names := Dictionary new.</body></methods><methods><class-id>Roassal2.RTSVGVisitor class</class-id> <category>visitor</category><body package="Roassal2-Exporter-SVG">visit: view on: stream	self new view: view; stream: stream; visit; yourself.</body><body package="Roassal2-Exporter-SVG">visit: view on: stream canvas: aRectangle	self new view: view; stream: stream; canvas: aRectangle; visit; yourself.</body><body package="Roassal2-Exporter-SVG">visit: view on: stream center: aPoint	self new view: view; stream: stream; center: aPoint; visit; yourself.</body><body package="Roassal2-Exporter-SVG">visit: view on: stream with: interactions	self new view: view; stream: stream; interactions: interactions; visit; yourself.</body><body package="Roassal2-Exporter-SVG">visit: view on: stream with: interactions canvas: aRectangle	self new view: view; stream: stream; interactions: interactions; canvas: aRectangle; visit; yourself.</body><body package="Roassal2-Exporter-SVG">visit: view on: stream with: interactions canvas: aRectangle center: aPoint	self new view: view; stream: stream; interactions: interactions; canvas: aRectangle; center: aPoint; visit; yourself.</body></methods><methods><class-id>Roassal2.RTPNGExporter</class-id> <category>accessing</category><body package="Roassal2-Exporter-PNG">builder	"Return a view or a builder that has been previous assigned"	^ view</body><body package="Roassal2-Exporter-PNG">builder: aViewOrABuilder	view := aViewOrABuilder</body><body package="Roassal2-Exporter-PNG">fileName	^ fileName</body><body package="Roassal2-Exporter-PNG">fileName: aFilenameAsString	fileName := aFilenameAsString</body><body package="Roassal2-Exporter-PNG">saveWithScale	^ saveWithScale</body><body package="Roassal2-Exporter-PNG">withScale	saveWithScale := true.</body><body package="Roassal2-Exporter-PNG">withoutScale	saveWithScale := false</body></methods><methods><class-id>Roassal2.RTPNGExporter</class-id> <category>util</category><body package="Roassal2-Exporter-PNG">cameraPositionNegated	^ self encompassingRectangle center negated</body><body package="Roassal2-Exporter-PNG">cameraScale	| camera |	camera := self trachelCanvas camera.	^ self saveWithScale		ifTrue: [ camera scale asFloat ]		ifFalse: [ camera defaultCameraScale ]</body><body package="Roassal2-Exporter-PNG">createFormCanvas	"Return a new form"	| form |	form := TRPlatform current formCanvasClass extent: self viewExtent.	form fillRectangle: self encompassingRectangle color: self trachelCanvas color.	^ form</body><body package="Roassal2-Exporter-PNG">createSurface	^ TRPlatform current surfaceClass extent: self viewExtent</body><body package="Roassal2-Exporter-PNG">encompassingRectangle	^ self trachelCanvas encompassingRectangle</body><body package="Roassal2-Exporter-PNG">trachelCanvas	^ self builder view canvas</body><body package="Roassal2-Exporter-PNG">viewExtent	^ self encompassingRectangle extent asIntegerPoint * self cameraScale + (5 @ 5)</body><body package="Roassal2-Exporter-PNG">viewHalfExtent	^ (self viewExtent / 2) asFloatPoint</body></methods><methods><class-id>Roassal2.RTPNGExporter</class-id> <category>initialization</category><body package="Roassal2-Exporter-PNG">getIFrameDefFromView: aView label: aLabelAsString directory: aDirectory	"This method is useful when invoked from within Pillar"		| pngFileName writeStream |	pngFileName := (aDirectory / aLabelAsString, 'png') pathString.	writeStream := pngFileName asFileReference writeStream.	RTPNGExporter new builder: aView; fileName: pngFileName; exportToFile.	^ '&lt;img src="', pngFileName, '" 		name="', aLabelAsString, '" &gt;&lt;/img&gt;'</body><body package="Roassal2-Exporter-PNG">initialize	super initialize.	self withoutScale.	self setDefaultFileName</body><body package="Roassal2-Exporter-PNG">insert: aView named: aName inPillarStream: aStream	self insert: aView named: aName inPillarStream: aStream directory: self defaultDirectory</body><body package="Roassal2-Exporter-PNG">insert: aView named: aName inPillarStream: aStream directory: aDirectory	| s |	s := self getIFrameDefFromView: aView label: aName directory: aDirectory.	aStream nextPutAll: '{{{ &lt;BR&gt;', s, ' }}}'</body><body package="Roassal2-Exporter-PNG">setDefaultFileName	self fileName: 'roassal.png'</body></methods><methods><class-id>Roassal2.RTPNGExporter</class-id> <category>public</category><body package="Roassal2-Exporter-PNG">exportToFile	| trachelCanvas  surface viewExtent |	trachelCanvas := self trachelCanvas.	viewExtent := self viewExtent.	surface := self createSurface.	surface		drawDuring: [ :cs | 			"Probably not necessary since we have just created a surface"			surface clear;				fillRectangle: (0@0 corner: viewExtent) withSolidColor: view canvas color.			cs pathTransform				translateBy: self viewHalfExtent asFloatPoint;				scaleBy: self cameraScale;				translateBy: self cameraPositionNegated asFloatPoint.			trachelCanvas shapes do: [ :trachelShape | trachelShape drawOn: cs ].			cs pathTransform loadIdentity scaleBy: 1.001.			"trachelCanvas fixedShapes do: [ :trachelShape | trachelShape drawOn: cs ]" ].		surface writeToPng: self fileName</body></methods><methods><class-id>Roassal2.RTOptimizedForceBasedLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">prepareNodes: nodeElements	"Probably something has to be done here"	super prepareNodes: nodeElements</body><body package="Roassal2-Layouts">setEdgesFromElements: elements 	| view realElements realEdges mockEdges |	elements isEmpty ifTrue: [ ^ self ].	view := elements anyOne view.	realElements := elements collect: #realElement.	view ifNil: [ ^ self ].		realEdges := view edges select: [ :el | 		(el isUsedInLayout and: [ realElements includes: el from ]) and: [ realElements includes: el to ] ].	mockEdges := realEdges collect: [ :e | 							RTMockEdge new 								from: (elements detect: [ :ee | ee realElement == e from ]);								to: (elements detect: [ :ee | ee realElement == e to ]) ].	self edges: mockEdges.</body></methods><methods><class-id>Roassal2.RTOptimizedForceBasedLayout</class-id> <category>updating</category><body package="Roassal2-Layouts">addEdges: someEdges	"Probably something has to be done here"	super addEdges: someEdges</body></methods><methods><class-id>Roassal2.RTOptimizedForceBasedLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">executeOnElements: elements	"The argument is the set of Roassal elements"	mockElements := elements collect: [ :e | RTMockElement new realElement: e ].	super executeOnElements: mockElements.	mockElements do: #applyToRealElement</body></methods><methods><class-id>Roassal2.TRCameraScaleCallback</class-id> <category>action</category><body package="Roassal2-Trachel-Callbacks">scaleChanged: aScaleFactorAsInteger	^ block cull: aScaleFactorAsInteger</body></methods><methods><class-id>Roassal2.TRCameraScaleCallback</class-id> <category>testing</category><body package="Roassal2-Trachel-Callbacks">isCameraScaleCallback	^ true</body></methods><methods><class-id>Roassal2.RTNoLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements	"Do nothing"</body></methods><methods><class-id>Roassal2.RTAbstractArrowedLine</class-id> <category>public</category><body package="Roassal2-Shapes">width: aValue	line width: aValue</body><body package="Roassal2-Shapes">withOffsetIfMultiple	self attachPoint: RTShorterDistanceWithOffsetAttachPoint new.</body></methods><methods><class-id>Roassal2.RTAbstractArrowedLine</class-id> <category>accessing</category><body package="Roassal2-Shapes">attachPoint: anAttachPoint	super attachPoint: anAttachPoint.	line attachPoint: anAttachPoint</body><body package="Roassal2-Shapes">color: aColor	line color: aColor</body><body package="Roassal2-Shapes">line	^ line</body><body package="Roassal2-Shapes">line: aLineShape	line := aLineShape</body><body package="Roassal2-Shapes">straight	self line: RTLine new</body></methods><methods><class-id>Roassal2.RTAbstractArrowedLine</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	self straight.</body></methods><methods><class-id>Roassal2.RTDoubleArrowedLine</class-id> <category>accessing</category><body package="Roassal2-Shapes">attachPoint: anAttachPoint	super attachPoint: anAttachPoint.	headStart attachPoint: anAttachPoint.	headEnd attachPoint: anAttachPoint.</body><body package="Roassal2-Shapes">color: aColor	super color: aColor.	headStart color: aColor.	headEnd color: aColor.</body><body package="Roassal2-Shapes">headEnd	^ headEnd</body><body package="Roassal2-Shapes">headEnd: aHead	headEnd := aHead</body><body package="Roassal2-Shapes">headStart	^ headStart</body><body package="Roassal2-Shapes">headStart: aHead	headStart := aHead</body></methods><methods><class-id>Roassal2.RTDoubleArrowedLine</class-id> <category>rendering</category><body package="Roassal2-Shapes">updateFor: edge trachelShape: trachelShape	(self isSelfLoopAllowedFor: edge) ifFalse: [ ^ self ].	line updateFor: edge trachelShape: edge trachelShape shapes first.	headStart updateFor: edge trachelShape: edge trachelShape shapes second.	headEnd updateFor: edge trachelShape: edge trachelShape shapes third</body></methods><methods><class-id>Roassal2.RTDoubleArrowedLine</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	self simple</body></methods><methods><class-id>Roassal2.RTDoubleArrowedLine</class-id> <category>public</category><body package="Roassal2-Shapes">simple	self headStart: RTSimpleArrowHead new.	self headEnd: RTSimpleArrowHead new.	self headEnd attachPoint inverted.</body><body package="Roassal2-Shapes">trachelShapeFor: anEdge	| lineTrachelShape headStartTrachelShape headEndTrachelShape |	(self isSelfLoopAllowedFor: anEdge) ifFalse: [ 		^ TRNoShape instance ].	lineTrachelShape := line trachelShapeFor: anEdge.	headStartTrachelShape := headStart trachelShapeFor: anEdge.	headEndTrachelShape := headEnd trachelShapeFor: anEdge.	^ TRCompositeShape new 			addShape: lineTrachelShape; 			addShape: headStartTrachelShape; 			addShape: headEndTrachelShape;			yourself</body></methods><methods><class-id>Roassal2.RTDraggable</class-id> <category>vistor</category><body package="Roassal2-Interactions">accept: aVisitor with: args	aVisitor visitDraggableInteraction: self with: args</body></methods><methods><class-id>Roassal2.RTDraggable</class-id> <category>hooks</category><body package="Roassal2-Interactions">transformDistance: distanceAsPoint forElement: anElement	"Nothing to be transformed since there is no restriction here"	^ distanceAsPoint</body></methods><methods><class-id>Roassal2.RTDraggable class</class-id> <category>public</category><body package="Roassal2-Interactions">groupToDrag: elements	^ self new groupToDrag: elements</body></methods><methods><class-id>Roassal2.RTShorterVerticalDistanceAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">attachPointsFor: anEdge on: anElement	"Return the four possible attach points for each of the four sides for given edge on given element."	| rec center |	rec := anElement encompassingRectangle.	center := rec center.	^ Array 		"upper side"		with: ((center x) @ rec top)				"lower side"		with: ((center x) @ rec bottom)</body></methods><methods><class-id>Roassal2.RTEmptyArrowHead</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TREmptyArrowHeadShape</body></methods><methods><class-id>Roassal2.RTCellMatrix</class-id> <category>accessing</category><body package="Roassal2-Layouts">columnCount	^ ncols</body><body package="Roassal2-Layouts">rowCount	^ nrows</body></methods><methods><class-id>Roassal2.RTCellMatrix</class-id> <category>private</category><body package="Roassal2-Layouts">indexForRow: row andColumn: column	(row between: 1 and: nrows)		ifFalse: [self error: '1st subscript out of range'].	(column between: 1 and: ncols)		ifFalse: [self error: '2nd subscript out of range'].	^ (row - 1) * ncols + column</body><body package="Roassal2-Layouts">rows: rows columns: columns contents: anArray	(((rows isInteger and: [rows &gt;= 0]) and: 		[columns isInteger and: [columns &gt;= 0]]) and:			[ rows * columns = anArray size ]) ifFalse: [ self error: 'Wrong parameters' ].	nrows := rows.	ncols := columns.	contents := anArray</body></methods><methods><class-id>Roassal2.RTCellMatrix</class-id> <category>accessing rows/columns</category><body package="Roassal2-Layouts">atColumn: column	| p |	p := (self indexForRow: 1 andColumn: column) - ncols.	^ (1 to: nrows) collect: [ :row | contents at: (p := p+ncols) ]</body><body package="Roassal2-Layouts">atRow: row	(row between: 1 and: nrows)		ifFalse: [ self error: '1st subscript out of range' ].	^ contents copyFrom: (row - 1) * ncols + 1 to: row * ncols</body></methods><methods><class-id>Roassal2.RTCellMatrix class</class-id> <category>as yet unclassified</category><body package="Roassal2-Layouts">rows: rows columns: columns contents: contents	^self new rows: rows columns: columns contents: contents</body></methods><methods><class-id>Roassal2.RTLabelGenerator</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Labeling">initialize	super initialize.	nice := nil.	loose := false.	w := #(0.25 0.2 0.5 0.05)</body></methods><methods><class-id>Roassal2.RTLabelGenerator</class-id> <category>private</category><body package="Roassal2-Builder-Grapher-Labeling">coverageMin: dmin max: dmax lmin: lmin lmax: lmax	| a b c|	a := dmax - lmax.	b := dmin - lmin.	c := 0.1 * (dmax - dmin).	^ 1 - ( 0.5 * (((a * a) + (b * b))/ (c * c)) )</body><body package="Roassal2-Builder-Grapher-Labeling">coverageMin: dmin max: dmax span: span	| range r half|	range := dmax - dmin.	(span &gt; range) ifTrue: [ 		half := (span - range)/2.		r := 0.1*range.		^ 1 - (half * half / (r * r) )].	^ 1.0</body><body package="Roassal2-Builder-Grapher-Labeling">density: k m: m dmin: dmin dmax: dmax lmin: lmin lmax: lmax	"* k		number of labels	 * m		number of desired labels	 * dmin	data range minimum	 * dmax	data range maximum	 * lmin	label range minimum	 * lmax	label range maximum	 * ^	density	  	 k-1 number of intervals between labels	 m-1 number of intervals between desired number of labels	 r   label interval length/label range	 rt  desired label interval length/actual range"	| r rt |	r := (k -1)/(lmax - lmin).	rt := (m - 1)/((lmax max: dmax) - (lmin min: dmin) ).	^ 2 - ( (r/rt) max: (rt/r) ).</body><body package="Roassal2-Builder-Grapher-Labeling">densityMax: k m: m	(k &gt;= m) ifTrue: [ ^ 2 - ((k-1)/(m-1)) ].	^ 1</body><body package="Roassal2-Builder-Grapher-Labeling">epsilon	" Compute the machine epsilon for the float type, the largest positive  	floating-point value that, when added to 1, results in a value equal to 1 due to  	roundoff."	| temp |	epsilon ifNotNil: [ ^ epsilon ].	temp := 0.5.	[ (1 + temp) &gt; 1 ] whileTrue: [ temp := temp / 2 ].	epsilon := temp.	^ epsilon.</body><body package="Roassal2-Builder-Grapher-Labeling">flooredMod: a n: num	^ a - (num * (a / num) floor).</body><body package="Roassal2-Builder-Grapher-Labeling">legibility: min max: max step: step	^ 1</body><body package="Roassal2-Builder-Grapher-Labeling">simplicity: min max: max step: step	(nice qvar size &gt; 1) ifTrue: [ 		^ 1 - (n i/ (nice qvar size - 1)) - n j + (self vMin: min max: max step: step) ].	^ 1 - n j + (self vMin: min max: max step: step)</body><body package="Roassal2-Builder-Grapher-Labeling">simplicityMax	(nice qvar size &gt; 1) ifTrue: [ ^ 1 - ((n i )/(nice qvar size -1)) - n j + 1.0 ].	 ^ 1 - n j + 1.0</body><body package="Roassal2-Builder-Grapher-Labeling">vMin: min max: max step: step	^ ((self flooredMod: min n: step) &lt; (self epsilon) 	and: [ min &lt;= 0 and: [ max &gt;= 0 ] ]) ifTrue: [ 1 ] ifFalse: [ 0 ]</body><body package="Roassal2-Builder-Grapher-Labeling">w: s c: c d: d l: l	^ (w first * s) + (w second * c) + (w third * d) + (w fourth * l)</body></methods><methods><class-id>Roassal2.RTLabelGenerator</class-id> <category>public</category><body package="Roassal2-Builder-Grapher-Labeling">nice: aNiceGenerator	nice := aNiceGenerator</body><body package="Roassal2-Builder-Grapher-Labeling">searchMin: dmin max: dmax desired: m	| best sm dm cm delta bestScore k |	best := RTGrapherLabel new.	bestScore := -2.		"In case of a particular situation"	(dmin = 0 and: [ dmax = 0 ]) ifTrue: [ 		best			min: 0;			max: 1;			step: 1;			score: bestScore.		^ best ].		[ :break |		[ true ] whileTrue: [ 			n := nice next.			sm := self simplicityMax.			((self w: sm c: 1 d: 1 l: 1) &lt; bestScore)				ifTrue: [ break value ].			k := 2.			[ :break2 |				[ true ] whileTrue: [ | z |					dm := self densityMax: k m: m.					((self w: sm c: 1 d: dm l: 1) &lt; bestScore) 						ifTrue: [ break2 value ].					delta := (dmax - dmin)/(k+1)/ n j/ (nice qat: n i).					z := (nice logB: delta) ceiling.					[ :break3|						[ true ] whileTrue: [ 							[ :continue | | minStart maxStart step |								step := n j * (nice qat: n i) * (nice base raisedTo: z).								cm := self coverageMin: dmin max: dmax span: step * (k-1).								((self w: sm c: cm d: dm l: 1) &lt; bestScore) 									ifTrue: [ break3 value ].								minStart := ((dmax / step) floor - (k-1)) * n j.								maxStart := (dmin / step) ceiling * n j.								(minStart &gt; maxStart) ifTrue: [ 									z := z +1.									continue value. ].														(minStart to: maxStart) do: [ :start |									| lmin lmax lstep c s d l score |									lmin := start * step / n j. 									lmax := lmin + (step * (k -1)).									lstep := step.									c := self coverageMin: dmin max: dmax lmin: lmin lmax: lmax.									s := self simplicity: lmin max: lmax step: lstep.									d := self density: k m: m dmin: dmin dmax: dmax lmin: lmin lmax: lmax.									l := self legibility: lmin max: lmax step: lstep.									score := self w: s c: c d: d l: l.																((score &gt; bestScore) and: 									[ loose not or: [ (lmin &lt;= dmin) and: 														  [ lmax &gt;= dmax ] ] ]) ifTrue: [										best											min: lmin;											max: lmax;											step: lstep;											score: score.											bestScore := score.									 ].								].								z := z +1.							] valueWithExit.						].					] valueWithExit. 					k := k +1.				].			] valueWithExit.		 ]	] valueWithExit.		nice reset.		^ best.</body><body package="Roassal2-Builder-Grapher-Labeling">setLooseFlag: aBool	"Configuration to 'loose' labelings.	The extreme labels can be placement both inside(setLooseFlag: false) and outside (setLooseFlag: true) of the range of the data.		Example	.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=	lg setLooseFlag: true.	label := lg searchMin: -98.0 max: 18.0 desired: 3.	self assert: label asString = '(Score: 0.14) -100.00	-60.00	-20.00	20.00	'.	lg setLooseFlag: false.	label := lg searchMin: -98.0 max: 18.0 desired: 3.	self assert: label asString = '(Score: 0.62) -100.00	-50.00	0.00	'.	.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=	"	loose := aBool.	nice reset.</body></methods><methods><class-id>Roassal2.RTLabelGenerator class</class-id> <category>instance creation</category><body package="Roassal2-Builder-Grapher-Labeling">nice: aNiceGenerator	^ self new nice: aNiceGenerator</body></methods><methods><class-id>Roassal2.RTHorizontalMultipleData</class-id> <category>rendering</category><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	"We need to do the layout here"	| centralDot positiveElements negativeElements  |	centralDot := self centralDot.	RTMetricNormalizer new		elements: elements;		normalizeElementX: [ :anElement | x rtValue: anElement ]			min: 0			max: builder extent x			minValue: minX			maxValue: maxX + 1.	"We have 'maxX + 1' because we do not want the last bar on the extremity of the X-Axis"	"We treat the element with a positive value"	positiveElements := elements select: [ :el | (y rtValue: el) &gt;= 0 ].	positiveElements		ifNotEmpty: [			RTMetricNormalizer new				elements: positiveElements;				normalizeElementHeight: [ :anElement | y rtValue: anElement ]					min: 0					max: builder extent y + centralDot position y					minValue: 0					maxValue: maxY ].	RTAlignment new elements: positiveElements; fixedElement: centralDot; bottom.	"TRConstraint use: centralDot alignFromBottom: positiveElements.	"			"We treat the element with a negative value"	negativeElements := elements copyWithoutAll: positiveElements.	negativeElements		ifNotEmpty: [ 			RTMetricNormalizer new				elements: negativeElements;				normalizeElementHeight: [ :anElement | y rtValue: anElement ]					min: centralDot position y negated 					max: 0					minValue: minY					maxValue: 0.			RTAlignment new elements: negativeElements; fixedElement: centralDot; top.			"TRConstraint use: centralDot alignFromTop: negativeElements "].	"We set the actions, if any"	elementActions do: [ :act | act rtValue: elements ]</body></methods><methods><class-id>Roassal2.RTHorizontalMultipleData</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">selectElementsForAddingBarTitle	"Return the collection of principal element for each element group.  	This principal element is used to position the title label"	^ groupedElements collect: [ :es | es at: (es size / 2) asInteger + 1 ]</body></methods><methods><class-id>Roassal2.RTBarLabelFactory</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">color	^ color</body><body package="Roassal2-Builder-Grapher-Core">color: aBlockOrAValue	"Use to compute the color given to the label. A one-arg block may be provided. The block is then evaluated with the model of the element"	color := aBlockOrAValue</body><body package="Roassal2-Builder-Grapher-Core">fontSize	^ fontSize</body><body package="Roassal2-Builder-Grapher-Core">fontSize: aBlockOrValue	"Use to compute the font size of the label. A one-arg block may be provided. The block is then evaluated with the model of the element"	fontSize := aBlockOrValue</body><body package="Roassal2-Builder-Grapher-Core">label	^ label</body><body package="Roassal2-Builder-Grapher-Core">label: aBlockOrValue	"Use to compute the label. A one-arg block may be provided. The block is then evaluated with the model of the element"	label := aBlockOrValue</body><body package="Roassal2-Builder-Grapher-Core">rotation	^ rotation</body><body package="Roassal2-Builder-Grapher-Core">rotation: aValue	"Define the rotation angle in degrees of the label. A typical value is -30"	rotation := aValue</body></methods><methods><class-id>Roassal2.RTBarLabelFactory</class-id> <category>computing</category><body package="Roassal2-Builder-Grapher-Core">createLabelForModel: anObject	"Take as argument the model object of the element. Return the label"	| lbl |	lbl := self labelShape elementOn: anObject.	lbl rotateByDegrees: (rotation rtValue: anObject).	^ lbl</body><body package="Roassal2-Builder-Grapher-Core">labelShape	labelShape ifNotNil: [ ^ labelShape ].	labelShape := RTLabel new		text: label;		color: color;		height: fontSize.	^ labelShape</body></methods><methods><class-id>Roassal2.RTBarLabelFactory</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	self color: Color gray.	self fontSize: 12.	self label: #yourself.	self rotation: -30.</body></methods><methods><class-id>Roassal2.RTEmptyNarrowArrow class</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TREmptyNarrowArrowHeadShape</body></methods><methods><class-id>Roassal2.RTScrollShapesBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-ScrollBar">bar	^ bar</body><body package="Roassal2-Builder-ScrollBar">bar: aTRShape	bar := aTRShape. 	collection add: aTRShape.</body><body package="Roassal2-Builder-ScrollBar">collection	^ collection</body><body package="Roassal2-Builder-ScrollBar">defineHorizontalShapes		self bar height: self scrollBuilder width; width: self scrollBuilder barWidth; color: Color lightGray; position: self scrollBuilder fixedPosition; strokePaint: nil.				"This shape is the the fill of the scroll bar"		self surroundingRectangle: (TRBoxShape new height: self scrollBuilder width; width: self scrollBuilder size; position: (self scrollBuilder fixedPosition x )@(self scrollBuilder fixedPosition y); color: self scrollBuilder fillColor; strokePaint: nil).				"the margeRectangle handle the width/2 of the bar"		self margeRectangle: (TRBoxShape new fromRectangle: (Rectangle origin: (self surroundingRectangle encompassingRectangle origin)corner: (self surroundingRectangle encompassingRectangle corner)); color: (Color gray alpha:0); strokePaint: nil) .</body><body package="Roassal2-Builder-ScrollBar">defineVerticalShapes		self bar height: self scrollBuilder barHeight; width: self scrollBuilder width; color: (Color lightGray);  position: self scrollBuilder fixedPosition; strokePaint: nil.				"This shape is the the fill of the scroll bar"		self surroundingRectangle: (TRBoxShape new width: self scrollBuilder width; height: self scrollBuilder size; position: (self scrollBuilder fixedPosition x )@(self scrollBuilder fixedPosition y); color: self scrollBuilder fillColor; strokePaint: nil).		"the margeRectangle handle the width/2 of the bar"		self margeRectangle: (TRBoxShape new fromRectangle: (Rectangle origin: (self surroundingRectangle encompassingRectangle origin)corner: (self surroundingRectangle encompassingRectangle corner)); color: (Color gray alpha:0); strokePaint: nil).</body><body package="Roassal2-Builder-ScrollBar">margeRectangle	^ margeRectangle</body><body package="Roassal2-Builder-ScrollBar">margeRectangle: aTRShape	margeRectangle := aTRShape.	collection add: aTRShape.</body><body package="Roassal2-Builder-ScrollBar">scrollBuilder	^ scrollBuilder</body><body package="Roassal2-Builder-ScrollBar">scrollBuilder: aRTSCrollBuilder	scrollBuilder := aRTSCrollBuilder</body><body package="Roassal2-Builder-ScrollBar">surroundingRectangle	^ surroundingRectangle</body><body package="Roassal2-Builder-ScrollBar">surroundingRectangle: aTRShape	surroundingRectangle := aTRShape.	collection add: aTRShape.</body></methods><methods><class-id>Roassal2.RTScrollShapesBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-ScrollBar">initialize	super initialize.	collection := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTScrollShapesBuilder class</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-ScrollBar">for: aRTScrollBuilder	^ self new scrollBuilder: aRTScrollBuilder</body></methods><methods><class-id>Roassal2.RTGrayLinearColor</class-id> <category>initialization</category><body package="Roassal2-ColorNormalizer">initialize	super initialize.	max := -1.	min := -1.	scope := #()</body></methods><methods><class-id>Roassal2.RTGrayLinearColor</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizer">max	max = -1 ifTrue: [ 		max := scope inject: -1000000 into: [ :s :e | s max: (command rtValue: e) ] ].	^ max</body><body package="Roassal2-ColorNormalizer">min	min = -1 ifTrue: [ 		min := scope inject: 1000000 into: [ :s :e | s min: (command rtValue: e) ] ].	^ min</body><body package="Roassal2-ColorNormalizer">rtValue: anObject	| intensity v |		self min = self max ifTrue: [ ^ Color gray ].	v := command rtValue: anObject.	intensity := 1 - ((v - self min) / (self max - self min)).	^ Color r: intensity g: intensity b: intensity</body><body package="Roassal2-ColorNormalizer">scope: groupOfObjects	"The argument is used to determine the maximum value. Command is executed on each of elements of the group passed as argument"	scope := groupOfObjects</body></methods><methods><class-id>Roassal2.RTMicroprint</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Microprint">createView	^ RTView new @ RTDraggableView</body><body package="Roassal2-Builder-Microprint">initialize	super initialize.	rules := OrderedCollection new.	nbOfHorizontal := 5.</body><body package="Roassal2-Builder-Microprint">lineMatching: pattern color: aColor	rules add: pattern -&gt; aColor</body><body package="Roassal2-Builder-Microprint">texts: someTexts	| aShape aRoassalLine |	aShape := RTBox new.	aShape width: [ :aText | (aText lines collect: #size) max ]. 	aShape height: [ :aText | aText lines size ].	view addAll: (aShape elementsOn: someTexts).	view elements @ RTPopup.	RTGridLayout new		lineItemsCount: nbOfHorizontal;		on: view elements.		view elements do: [ :e |		e model lines doWithIndex: [ :aLine :index | 			rules do: [ :as |				(as key match: aLine) ifTrue: [ 					aRoassalLine := RTBox new color: as value; width: e encompassingRectangle width; height: 2; elementOn: aLine.					view add: aRoassalLine.					aRoassalLine @ RTPopup.					aRoassalLine translateTo: e position + (0 @ (index - (e encompassingRectangle height / 2)))				] ] 		]	]</body></methods><methods><class-id>Roassal2.RTMicroprint</class-id> <category>accessing</category><body package="Roassal2-Builder-Microprint">nbOfHorizontal	^ nbOfHorizontal</body><body package="Roassal2-Builder-Microprint">nbOfHorizontal: anObject	nbOfHorizontal := anObject</body></methods><methods><class-id>Roassal2.TRMorphWantsDrop</class-id> <category>events</category><body package="Roassal2-Trachel-Events">handledBy: anElement	whenHandledBlock value: anElement</body><body package="Roassal2-Trachel-Events">whenHandled: aBlock	"For TRMorph internal tracking of who actually handled the morph"	whenHandledBlock := aBlock</body></methods><methods><class-id>Roassal2.RTLayoutAnimation</class-id> <category>accessing</category><body package="Roassal2-Animation">elements	^ elements</body><body package="Roassal2-Animation">elements: anObject	elements := anObject</body><body package="Roassal2-Animation">layout	^ layout</body><body package="Roassal2-Animation">layout: anObject	layout := anObject</body></methods><methods><class-id>Roassal2.RTLayoutAnimation</class-id> <category>initialization</category><body package="Roassal2-Animation">initialize	super initialize.	layout := RTGridLayout new</body></methods><methods><class-id>Roassal2.RTLayoutAnimation</class-id> <category>refreshing</category><body package="Roassal2-Animation">refresh	layout on: elements.</body></methods><methods><class-id>Roassal2.RTLayoutAnimation</class-id> <category>testing</category><body package="Roassal2-Animation">hasCompleted	^ false</body></methods><methods><class-id>Roassal2.TRVIBasicTimer</class-id> <category>actions</category><body package="Roassal2-Trachel-Viva">pause	"synonym to stop"		^ self stop</body><body package="Roassal2-Trachel-Viva">reset	"Reset the timer"	self subclassResponsibility</body><body package="Roassal2-Trachel-Viva">resume	"synonym to start"		^ self start</body><body package="Roassal2-Trachel-Viva">start	"Start the timer, after which its value change can be observed over time"	self subclassResponsibility</body><body package="Roassal2-Trachel-Viva">stop	"Stop the timer"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRVIBasicTimer</class-id> <category>accessing</category><body package="Roassal2-Trachel-Viva">cycleLength	"answer the timer cycle length, in seconds"	self subclassResponsibility</body><body package="Roassal2-Trachel-Viva">cycleLength: aNumber	"Set the timer cycle length, in seconds"	self subclassResponsibility</body><body package="Roassal2-Trachel-Viva">elapsedCycles	self subclassResponsibility</body><body package="Roassal2-Trachel-Viva">noRepeat	self subclassResponsibility</body><body package="Roassal2-Trachel-Viva">repeat	self subclassResponsibility</body><body package="Roassal2-Trachel-Viva">value	"answer the current value of timer"	self subclassResponsibility</body></methods><methods><class-id>Roassal2.TRVIBasicTimer</class-id> <category>converting</category><body package="Roassal2-Trachel-Viva">mirrored	self error: 'not yet supported'	"^ VIMirrorRepeatTimer on: self"</body><body package="Roassal2-Trachel-Viva">withBias: aWeight	self error: 'not yet supported'	"^ (VIBiasedTimerModifier on: self) weight: aWeight"</body></methods><methods><class-id>Roassal2.TRVIBasicTimer</class-id> <category>testing</category><body package="Roassal2-Trachel-Viva">isActive	"Answer whether timer currently active or not"		self subclassResponsibility</body><body package="Roassal2-Trachel-Viva">isRepeating	"Answer whether timer is one-shot or repeating"		self subclassResponsibility</body></methods><methods><class-id>Roassal2.GRay</class-id> <category>accessing</category><body package="Roassal2-Pharo">direction	^direction</body><body package="Roassal2-Pharo">direction: aPoint	direction := aPoint</body><body package="Roassal2-Pharo">length	^ (( self origin x - self direction x ) * ( self origin x - self direction x )	+	(( self origin y - self direction y ) * ( self origin y - self direction y )))sqrt</body><body package="Roassal2-Pharo">origin 	^origin</body></methods><methods><class-id>Roassal2.GRay</class-id> <category>arithmetic</category><body package="Roassal2-Pharo">* aRay^ ( self origin x - self direction x ) * ( aRay origin x - aRay direction x ) + (( self origin y - self direction y ) * ( aRay origin y - aRay direction y ) )</body><body package="Roassal2-Pharo">+ aRay	| newOrigin vector |		newOrigin := self origin + aRay origin / 2.		vector := (self direction - self origin) + 				 (aRay direction - aRay origin).	^ GRay origin: newOrigin direction: newOrigin + vector</body></methods><methods><class-id>Roassal2.GRay</class-id> <category>converting</category><body package="Roassal2-Pharo">asLine|ai bi ci|(self origin  y) = (self direction  y) ifTrue:[ ^ GLine		a: 0 b: 1 c: ((self origin y) negated)].(self origin x) = (self direction x) ifTrue:[ 	^ GLine		a: 1 b: 0 c: ((self origin x) negated)].	ai := (self origin y) - (self direction y). bi := (self direction x) - (self origin x).ci := ((self origin x) - (self direction x)) * (self origin y) + ( ((self direction y) - (self origin y)) * (self origin x) ).^ GLine		a:ai b: bi c: ci</body><body package="Roassal2-Pharo">asSegment	^ GSegment with: origin with: direction</body></methods><methods><class-id>Roassal2.GRay</class-id> <category>rectangle functions</category><body package="Roassal2-Pharo">extendBy1: num|vect k  xn yn|	( self origin x = self direction x ) 		ifTrue:[ xn := self origin x.			( self origin y &gt; self direction y )				ifFalse:[ yn := self direction y + num. ] 				ifTrue:[ yn := self direction y - num ] ]		ifFalse:[			k := ( self origin y - ( self direction y ) )/( self origin x - ( self direction x ) ).			( self origin x &gt; self direction x ) 				ifFalse:[ xn := self direction x + num. ] 				ifTrue:[ xn := self direction x - num. ].			yn := self direction y + ( k *( xn - self direction x ))].	vect := GRay origin: self origin direction: ( xn @ yn ).	(vect asLine = self asLine)	ifTrue:[^vect]</body><body package="Roassal2-Pharo">extendBy: num|cos sin|self length = 0 	ifTrue:[ self direction: ( (direction - origin) x * num  ) @ ((direction - origin) y * num ) ]	ifFalse:[cos := (direction - origin) x / self length.sin := (direction - origin) y / self length.	self direction: ( cos * num * self length ) @ ( sin * num * self length )].^ self</body><body package="Roassal2-Pharo">extendWith: num|cos sin|cos := (direction - origin) x / self length.sin := (direction - origin) y / self length.	self direction: ( self direction x +  (cos * num) ) @ ( self direction y + (sin * num) ).^ self</body></methods><methods><class-id>Roassal2.GRay</class-id> <category>properties</category><body package="Roassal2-Pharo">cutWith: frame| coll |coll := OrderedCollection new.frame edges	collect: [ :edge | edge intersectionPointWithRay: self ]	thenDo: [ :p |		(p notNil and: [ coll noneSatisfy: [ :p2 | p2 =~ p ] ])			ifTrue: [ coll add: p ] ] .coll isEmpty ifTrue:[^ nil]				 ifFalse:[coll size = 2 					ifTrue:  [ ^GSegment with: coll first with: coll second ]					ifFalse: [ ^GSegment with: coll first with: self origin ] ]</body><body package="Roassal2-Pharo">flipped	^ GRay origin: self origin direction: (origin + (origin - direction))</body><body package="Roassal2-Pharo">hasPoint: aPoint^ (( origin - direction ) signFuz = ( origin - aPoint ) signFuz  or:					[ origin = aPoint ])</body></methods><methods><class-id>Roassal2.GRay</class-id> <category>comparing</category><body package="Roassal2-Pharo">= aRay^ self origin =~ aRay origin and: [ (self origin bearingToPoint: self direction) =~ (aRay origin bearingToPoint: aRay direction) ]</body><body package="Roassal2-Pharo">hash	^ ( self origin hash hashMultiply +		(self origin bearingToPoint: self direction) hash ) hashMultiply</body></methods><methods><class-id>Roassal2.GRay</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	super initialize.	origin := 0@0.	direction := 0@0</body><body package="Roassal2-Pharo">initializeWithOrigin: aPoint1 direction: aPoint2	super initialize.	origin  := aPoint1.	direction  := aPoint2</body></methods><methods><class-id>Roassal2.GRay class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">new	^ self basicNew initializeWithOrigin: 0@0 direction: 0@0</body><body package="Roassal2-Pharo">origin: aPoint1 direction: aPoint2	^ self new initializeWithOrigin: aPoint1 direction: aPoint2</body></methods><methods><class-id>Roassal2.RTSVGStringConverter</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	convertions := Dictionary new.	self initializeValues.</body><body package="Roassal2-Exporter-SVG">initializeValues	convertions 		at: $â¢ put: '&amp;#8482;';		at: $\ put: '&amp;#92;';		at: $â¬ put: '&amp;euro;';		at: $  put: '&amp;#160;';		at: $" put: '&amp;quot;';		at: $&amp; put: '&amp;amp;';		at: $&lt; put: '&amp;lt;';		at: $&gt; put: '&amp;gt;';		at: $Â¡ put: '&amp;iexcl;';		at: $Â¢ put: '&amp;cent;';		at: $Â£ put: '&amp;pound;';		at: $Â¤ put: '&amp;curren;';		at: $Â¥ put: '&amp;yen;';		at: $Â¦ put: '&amp;brvbar;';		at: $Â§ put: '&amp;sect;';		at: $Â¨ put: '&amp;uml;';		at: $Â© put: '&amp;copy;';		at: $Âª put: '&amp;ordf;';		at: $Â¬ put: '&amp;not;';		at: $Â® put: '&amp;reg;';		at: $Â¯ put: '&amp;macr;';		at: $Â° put: '&amp;deg;';		at: $Â± put: '&amp;plusmn;';		at: $Â² put: '&amp;sup2;';		at: $Â³ put: '&amp;sup3;';		at: $Â´ put: '&amp;acute;';		at: $Âµ put: '&amp;micro;';		at: $Â¶ put: '&amp;para;';		at: $Â· put: '&amp;middot;';		at: $Â¸ put: '&amp;cedil;';		at: $Â¹ put: '&amp;sup1;';		at: $Âº put: '&amp;ordm;';		at: $Â» put: '&amp;raquo;';		at: $Â¼ put: '&amp;frac14;';		at: $Â½ put: '&amp;frac12;';		at: $Â¾ put: '&amp;frac34;';		at: $Â¿ put: '&amp;iquest;';		at: $Ã put: '&amp;Agrave;';		at: $Ã put: '&amp;Aacute;';		at: $Ã put: '&amp;Acirc;';		at: $Ã put: '&amp;Atilde;';		at: $Ã put: '&amp;#196;';		at: $Ã put: '&amp;Aring;';		at: $Ã put: '&amp;AElig;';		at: $Ã put: '&amp;Ccedil;';		at: $Ã put: '&amp;Egrave;';		at: $Ã put: '&amp;Eacute;';		at: $Ã put: '&amp;Ecirc;';		at: $Ã put: '&amp;Euml;';		at: $Ã put: '&amp;Igrave;';		at: $Ã put: '&amp;Iacute;';		at: $Ã put: '&amp;Icirc;';		at: $Ã put: '&amp;Iuml;';		at: $Ã put: '&amp;ETH;';		at: $Ã put: '&amp;Ntilde;';		at: $Ã put: '&amp;Ograve;';		at: $Ã put: '&amp;Oacute;';		at: $Ã put: '&amp;Ocirc;';		at: $Ã put: '&amp;Otilde;';		at: $Ã put: '&amp;Ouml;';		at: $Ã put: '&amp;times;';		at: $Ã put: '&amp;Oslash;';		at: $Ã put: '&amp;Ugrave;';		at: $Ã put: '&amp;Uacute;';		at: $Ã put: '&amp;Ucirc;';		at: $Ã put: '&amp;Uuml;';		at: $Ã put: '&amp;Yacute;';		at: $Ã put: '&amp;THORN;';		at: $Ã put: '&amp;szlig;';		at: $Ã  put: '&amp;agrave;';		at: $Ã¡ put: '&amp;aacute;';		at: $Ã¢ put: '&amp;acirc;';		at: $Ã£ put: '&amp;atilde;';		at: $Ã¤ put: '&amp;#228;';		at: $Ã¥ put: '&amp;aring;';		at: $Ã¦ put: '&amp;aelig;';		at: $Ã§ put: '&amp;ccedil;';		at: $Ã¨ put: '&amp;egrave;';		at: $Ã© put: '&amp;eacute;';		at: $Ãª put: '&amp;ecirc;';		at: $Ã« put: '&amp;euml;';		at: $Ã¬ put: '&amp;igrave;';		at: $Ã­ put: '&amp;iacute;';		at: $Ã® put: '&amp;icirc;';		at: $Ã¯ put: '&amp;iuml;';		at: $Ã° put: '&amp;eth;';		at: $Ã± put: '&amp;ntilde;';		at: $Ã² put: '&amp;ograve;';		at: $Ã³ put: '&amp;oacute;';		at: $Ã´ put: '&amp;ocirc;';		at: $Ãµ put: '&amp;otilde;';		at: $Ã¶ put: '&amp;ouml;';		at: $Ã· put: '&amp;divide;';		at: $Ã¸ put: '&amp;oslash;';		at: $Ã¹ put: '&amp;ugrave;';		at: $Ãº put: '&amp;uacute;';		at: $Ã» put: '&amp;ucirc;';		at: $Ã¼ put: '&amp;uuml;';		at: $Ã½ put: '&amp;yacute;';		at: $Ã¾ put: '&amp;thorn;';		at: $â° put: '&amp;#8304;';		at: $Â¹ put: '&amp;#185;';		at: $Â² put: '&amp;#178;';		at: $Â³ put: '&amp;#179;';		at: $â´ put: '&amp;#8308;';		at: $âµ put: '&amp;#8309;';		at: $â¶ put: '&amp;#8310;';		at: $â· put: '&amp;#8311;';		at: $â¸ put: '&amp;#8312;';		at: $â¹ put: '&amp;#8313;';				at: Character cr put: ''.</body></methods><methods><class-id>Roassal2.RTSVGStringConverter</class-id> <category>converting</category><body package="Roassal2-Exporter-SVG">convertString: aString	| array |	array := (1 to: aString size) collect: [ :n | convertions at: (aString at: n) ifAbsent: [ aString at: n ] ].	^ array inject: '' into: [ :acc :e | acc, (e asString) ].</body></methods><methods><class-id>Roassal2.RTSugiyamaLayout</class-id> <category>private</category><body package="Roassal2-Layouts">addDummyNodes		| layer layerNr |	connections := RTIdentityMatrix new.	self edgesDo:			[:edge | 			| a b span fromNode toNode |			"edge hints removeAll."			a := layerNrs at: edge from.			b := layerNrs at: edge to.			span := (a - b) abs.			span = 1				ifTrue:					[connections						at: edge from						at: edge to						put: true].	"Normal case where nodes are in adjacent layers"			fromNode := edge from.			[span &gt; 1]				whileTrue:					[span := span - 1.					layerNr := b + span.					layer := layers at: layerNr.					toNode := RTDummyNode						on: edge						slot: a - span.					layer add: toNode.					layerNrs at: toNode put: layerNr.					connections at: fromNode at: toNode put: true.					fromNode := toNode].			(a - b) abs &gt; 1				ifTrue:					[connections						at: fromNode						at: edge to						put: true]]</body><body package="Roassal2-Layouts">assignLabels: aNodeCollection 	"Initialize label dictionary"	| label vertices parentLabels |	labels := IdentityDictionary new.	label := 1.	"Assign labels to the roots"	(self rootNodesFor: aNodeCollection) do: 		[ :node | 		labels 			at: node			put: label.		label := label + 1 ].	"Assign labels to the rest"	[ labels keys size &lt; aNodeCollection size ] whileTrue: 		[ vertices := SortedCollection sortBlock: self sortBlock.		aNodeCollection do: 			[ :node | 			(labels includesKey: node) ifFalse: 				[ parentLabels := ((self parentsFor: node) collect: 					[ :pn | 					labels 						at: pn						ifAbsent: [ self maxFloat ] ]) asSortedCollection.				parentLabels last ~= self maxFloat ifTrue: [ vertices add: node -&gt; parentLabels ] ] ].		labels 			at: vertices first key			put: label.		label := label + 1 ]</body><body package="Roassal2-Layouts">buildLayers: g		| w layerNr u vertices vertex layer done |	w := self maxFloat.	u := OrderedCollection new.	layers := IdentityDictionary new.	layerNrs := IdentityDictionary new.	"Assign all nodes to layers"	[g isEmpty]		whileFalse:			[vertices := g				select:					[:e | (self childrenFor: e) allSatisfy: [:node | u includes: node]].			vertex := vertices detectMax: [:e | labels at: e].			done := false.			layerNr := 1.			[done]				whileFalse:					[layer := layers						at: layerNr						ifAbsentPut: [OrderedCollection new].					(layer size &gt;= w						or:							[(self childrenFor: vertex) anySatisfy: [:n | (layerNrs at: n) &gt;= layerNr]])						ifTrue: [layerNr := layerNr + 1]						ifFalse: [done := true]].			layer add: vertex.			layerNrs at: vertex put: layerNr.			u add: vertex.			g remove: vertex]</body><body package="Roassal2-Layouts">cl: layer u: u v: v	"Calculates cuv. Di Battista, chapter 9.2.2, page 283"		| partnersOfU partnersOfV c partnersOfUIndex partnersOfVIndex layerNr |	layerNr := layerNrs at: u.	":= layerNrs at: v"	partnersOfU := (connections at: u)		select: [:each | (layerNrs at: each) = (layerNr - 1)].	partnersOfV := (connections at: v)		select: [:each | (layerNrs at: each) = (layerNr - 1)].	c := 0.	partnersOfUIndex := partnersOfU collect: [:node | layer indexOf: node].	partnersOfVIndex := partnersOfV collect: [:node | layer indexOf: node].	partnersOfUIndex		do:			[:uIndex | partnersOfVIndex do: [:vIndex | vIndex &lt; uIndex ifTrue: [c := c + 1]]].	^c</body><body package="Roassal2-Layouts">layoutAt: aPoint		| treeWidth layerKeys layer layerWidth horizontalPosition verticalPosition layerHeight |	treeWidth := layers values		inject: self maxFloat negated		into:			[:max :e | max max: (e sumNumbers: #width) + ((e size - 1) * self horizontalGap)].	verticalPosition := self horizontalGap.	"For visual reasons NOT: self class verticalGap"	layerKeys := layers keys asSortedCollection reverse.	layerKeys		do:			[:aKey | 			layer := layers at: aKey.			layerWidth := (layer sum: #width)				+ ((layer size - 1) * self horizontalGap).			layerHeight := (layer detectMax: #height) height.			horizontalPosition := treeWidth / 2.0 + aPoint x - (layerWidth / 2.0).			layer				do:					[:node | 					translator translateTopLeftOf: node to:  horizontalPosition @ verticalPosition.										horizontalPosition := horizontalPosition + node width						+ self horizontalGap ].			verticalPosition := verticalPosition + layerHeight + self verticalGap ]</body><body package="Roassal2-Layouts">maxFloat	^ 1e10</body><body package="Roassal2-Layouts">reduceCrossing	"Crossing reduction"		| layer2 u v c1 c2 layer1 done |	2		to: layers keys size		do:			[:index | 			layer1 := layers at: index - 1.			layer2 := layers at: index.			done := false.			[done]				whileFalse:					[done := true.					2						to: layer2 size						do:							[:i | 							u := layer2 at: i - 1.							v := layer2 at: i.							c1 := self cl: layer1 u: u v: v.							c2 := self cl: layer1 u: v v: u.							c1 &gt; c2								ifTrue:									[layer2 rtSwapElement: u withElement: v.									done := false]]]]</body><body package="Roassal2-Layouts">sortBlock		sortBlock isNil ifTrue: [ sortBlock := self class sortBlock ].	^sortBlock</body></methods><methods><class-id>Roassal2.RTSugiyamaLayout</class-id> <category>default attach points</category><body package="Roassal2-Layouts">defaultAttachPoint	^ RTVerticalAttachPoint new</body></methods><methods><class-id>Roassal2.RTSugiyamaLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: aNodeCollection 	"Coffman-Graham-Layering. Di Battista Book, page 275, chapter, 9.2.1"	self assignLabels: aNodeCollection.	self buildLayers: aNodeCollection copy.	self addDummyNodes.	self reduceCrossing.	self layoutAt: self verticalGap @ self horizontalGap</body></methods><methods><class-id>Roassal2.RTSugiyamaLayout class</class-id> <category>utils</category><body package="Roassal2-Layouts">sortBlock		^ RTSortBlock new</body></methods><methods><class-id>Roassal2.RTNoDictionary</class-id> <category>hooks</category><body package="Roassal2-Builder-NameCloud">unnecessaryWords	^ #()</body></methods><methods><class-id>Roassal2.RTRectanglePackLayout</class-id> <category>accessing</category><body package="Roassal2-Layouts">boundingBox	^ bounds</body><body package="Roassal2-Layouts">gap	"gap between elements defined as ''percentage'' of average size. 0.2 means 20%"	^ gap</body><body package="Roassal2-Layouts">gap: anObject	gap := anObject</body></methods><methods><class-id>Roassal2.RTRectanglePackLayout</class-id> <category>deprecated</category><body package="Roassal2-Layouts">padding	self deprecated: 'Use gap instead'.	^ self gap</body><body package="Roassal2-Layouts">padding: anObject	self deprecated: 'Use gap: instead'.	self gap: anObject</body></methods><methods><class-id>Roassal2.RTRectanglePackLayout</class-id> <category>execution</category><body package="Roassal2-Layouts">packIn: anElement	translator translateTopLeftOf: anElement to: (self bestSpaceFor: anElement) origin + padding.	bounds := bounds max: anElement encompassingRectangle bottomRight + padding.		self recalculateFreeSpacesWith: anElement</body></methods><methods><class-id>Roassal2.RTRectanglePackLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize	super initialize.	gap := 0.2</body></methods><methods><class-id>Roassal2.RTRectanglePackLayout</class-id> <category>space-calculation</category><body package="Roassal2-Layouts">bestSpaceFor: anElement	| elementsPadedBox suitableSpaces |		elementsPadedBox := anElement encompassingRectangle extendBy: padding * 2.		suitableSpaces := freeSpace select: [ :space |		elementsPadedBox width &lt;= space width and:			[ elementsPadedBox height &lt;= space height ] ].		^ suitableSpaces		fold: [ :best :current |			| bestExt currentExt | 			((currentExt := self extentByInserting: elementsPadedBox into: current) &lt;			(bestExt := self extentByInserting: elementsPadedBox  into: best) or: [ 				currentExt = bestExt and: [					current halfPerimeter &lt; best halfPerimeter ] ])						ifTrue: [ current ]						ifFalse: [ best ] ]</body><body package="Roassal2-Layouts">extentByInserting: aRectangle into: aSpace	| futureCorner |	futureCorner := aSpace origin + aRectangle extent.		^	(((futureCorner x - bounds x) max: 0) +		((futureCorner y - bounds y) max: 0))		* "this is balancing magic"		(((futureCorner max: bounds) degrees - 45) abs / 45 + 1)</body><body package="Roassal2-Layouts">recalculateFreeSpacesWith: anElement	freeSpace := freeSpace inject: Set new into: [ :set :space |		 set			addAll: (space areasOverlapingOutside:				(anElement encompassingRectangle expandBy: padding)); 			yourself ].			"remove subspaces"	freeSpace := freeSpace reject: [ :subspace | 		freeSpace anySatisfy: [ :space |			space ~~ subspace and: [ 				space containsRect: subspace ] ] ]</body></methods><methods><class-id>Roassal2.RTRectanglePackLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements	| sortedElements maxSpace |	bounds := 0@0.		maxSpace := elements inject: 0@0 into: [ :sum :el |			sum + el extent ].			padding := maxSpace / elements size * gap / 2.		maxSpace := 1 + gap * maxSpace.		freeSpace := Set new.	freeSpace add: (0@0 corner: maxSpace).		sortedElements := SortedCollection sortBlock:  [ :larger :smaller |		larger  encompassingRectangle halfPerimeter &gt;		smaller encompassingRectangle halfPerimeter ].	sortedElements addAll: elements.		sortedElements		do: [ :element | self packIn: element ]		displayingProgress: 'Laying out elements'</body></methods><methods><class-id>Roassal2.RTMultiLine</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	self straight</body></methods><methods><class-id>Roassal2.RTMultiLine</class-id> <category>accessing</category><body package="Roassal2-Shapes">block: aTwoArgBlock	blockProducingPath := aTwoArgBlock</body></methods><methods><class-id>Roassal2.RTMultiLine</class-id> <category>public</category><body package="Roassal2-Shapes">trachelShapeFor: anEdge	| shape multiShape col fromPoint toPoint path |	col := self colorFor: anEdge.	fromPoint := attachPoint startingPointOf: anEdge.	toPoint := attachPoint endingPointOf: anEdge.	path := blockProducingPath value: fromPoint value: toPoint.		multiShape := TRCompositeShape new.	2 to: path size do: [ :i |		shape := TRLineShape new.		shape width: (self widthFor: anEdge).		shape from: (path at: i - 1) to: (path at: i).		shape color: col.		multiShape addShape: shape.	].	^ multiShape</body><body package="Roassal2-Shapes">updateFor: anEdge trachelShape: trachelShape	| shape col fromPoint toPoint path |	col := self colorFor: anEdge.	fromPoint := attachPoint startingPointOf: anEdge.	toPoint := attachPoint endingPointOf: anEdge.	path := blockProducingPath value: fromPoint value: toPoint.		2 to: path size do: [ :i |		shape := trachelShape shapes at: i - 1.		shape width: (self widthFor: anEdge).		shape from: (path at: i - 1) to: (path at: i).		shape color: col.	].	^ trachelShape</body></methods><methods><class-id>Roassal2.RTMultiLine</class-id> <category>public - configuration</category><body package="Roassal2-Shapes">orthoHorizontal	self orthoHorizontalBalanceTo: 0.5</body><body package="Roassal2-Shapes">orthoHorizontalBalanceTo: balance	"0 = level of fromPoint	 0.5 = middle	 1 = level of toPoint"	self		block: [ :fromPoint :toPoint | 			| midx |			midx := toPoint x * balance + (fromPoint x * (1 - balance)).			Array				with: fromPoint				with: midx @ fromPoint y				with: midx @ toPoint y				with: toPoint ]</body><body package="Roassal2-Shapes">orthoVertical	self orthoVerticalBalanceTo: 0.5</body><body package="Roassal2-Shapes">orthoVerticalBalanceTo: balance	"0 = level of fromPoint	 0.5 = middle	 1 = level of toPoint"	self		block: [ :fromPoint :toPoint | 			| midy |			midy := toPoint y * balance + (fromPoint y * (1 - balance)).			Array				with: fromPoint				with: fromPoint x @ midy				with: toPoint x @ midy				with: toPoint ]</body><body package="Roassal2-Shapes">straight	"A straight line"	self block: [ :fromPoint :toPoint | Array with: fromPoint with: toPoint ]</body></methods><methods><class-id>Roassal2.RTStyledMultiLine</class-id> <category>public</category><body package="Roassal2-Shapes">trachelShapeFor: anEdge	| multiShape path |	path := self pathFor: anEdge.	multiShape := TRCompositeShape new.	2 to: path size do: [ :i | 		multiShape			addShape:				(TRStyledLineShape new					dashes: dashes;					capStyle: capStyle;					width: (self widthFor: anEdge);					from: (path at: i - 1) to: (path at: i);					color: (self colorFor: anEdge)) ].	multiShape		addShape: (head trachelShapeFor: anEdge from: path allButLast last);		addShape: (tail trachelShapeFor: anEdge from: path second).	^ multiShape</body><body package="Roassal2-Shapes">updateFor: anEdge trachelShape: trachelShape	| path col shape |	path := self pathFor: anEdge.	col := self colorFor: anEdge.	2 to: path size do: [ :i | 		shape := trachelShape shapes at: i - 1.		shape			width: (self widthFor: anEdge);			from: (path at: i - 1) to: (path at: i);			color: col ].	head updateFor: anEdge trachelShape: trachelShape shapes allButLast last from: path allButLast last.	tail updateFor: anEdge trachelShape: trachelShape shapes last from: path second.	trachelShape canvas ifNotNil: [ trachelShape pushFront ].	^ trachelShape</body></methods><methods><class-id>Roassal2.RTStyledMultiLine</class-id> <category>accessing</category><body package="Roassal2-Shapes">color: aColor	tail color: aColor.	head color: aColor.	color := aColor</body><body package="Roassal2-Shapes">dashes	^ dashes</body><body package="Roassal2-Shapes">head	^ head</body><body package="Roassal2-Shapes">head: aLineDecorationShape	(head := aLineDecorationShape asHead)		attachPoint: attachPoint;		color: color</body><body package="Roassal2-Shapes">pathFor: anEdge	| fromPoint toPoint |	fromPoint := attachPoint startingPointOf: anEdge.	toPoint := attachPoint endingPointOf: anEdge.	^ blockProducingPath value: fromPoint value: toPoint</body><body package="Roassal2-Shapes">tail	^ tail</body><body package="Roassal2-Shapes">tail: aLineDecorationShape	(tail := aLineDecorationShape asTail)		attachPoint: attachPoint;		color: color</body></methods><methods><class-id>Roassal2.RTStyledMultiLine</class-id> <category>heads</category><body package="Roassal2-Shapes">arrowHead	self head: RTSimpleArrow asHead</body><body package="Roassal2-Shapes">arrowTail	self tail: RTSimpleArrow asTail</body><body package="Roassal2-Shapes">emptyArrowHead	self head: RTEmptyArrow asHead</body><body package="Roassal2-Shapes">emptyArrowTail	self tail: RTEmptyArrow asTail</body><body package="Roassal2-Shapes">emptyCircleHead	self head: RTEmptyCircle asHead</body><body package="Roassal2-Shapes">emptyCircleTail	self tail: RTEmptyCircle asTail</body><body package="Roassal2-Shapes">emptyDiamondHead	self head: RTEmptyDiamond asHead</body><body package="Roassal2-Shapes">emptyDiamondTail	self tail: RTEmptyDiamond asTail</body><body package="Roassal2-Shapes">emptyNarrowArrowHead	self head: RTEmptyNarrowArrow asHead</body><body package="Roassal2-Shapes">emptyNarrowArrowTail	self tail: RTEmptyNarrowArrow asTail</body><body package="Roassal2-Shapes">filledArrowHead	self head: RTFilledArrow asHead</body><body package="Roassal2-Shapes">filledArrowTail	self tail: RTFilledArrow asTail</body><body package="Roassal2-Shapes">filledCircleHead	self head: RTFilledCircle asHead</body><body package="Roassal2-Shapes">filledCircleTail	self tail: RTFilledCircle asTail</body><body package="Roassal2-Shapes">filledDiamondHead	self head: RTFilledDiamond asHead</body><body package="Roassal2-Shapes">filledDiamondTail	self tail: RTFilledDiamond asTail</body><body package="Roassal2-Shapes">filledNarrowArrowHead	self head: RTFilledNarrowArrow asHead</body><body package="Roassal2-Shapes">filledNarrowArrowTail	self tail: RTFilledNarrowArrow asTail</body><body package="Roassal2-Shapes">noHead	self head: RTNoDecorationShape asHead</body><body package="Roassal2-Shapes">noTail	self tail: RTNoDecorationShape asTail</body><body package="Roassal2-Shapes">notDecorated	self		noHead;		noTail</body></methods><methods><class-id>Roassal2.RTStyledMultiLine</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	self notDecorated</body></methods><methods><class-id>Roassal2.RTStyledMultiLine</class-id> <category>attach point</category><body package="Roassal2-Shapes">attachPoint: anAttachPoint	tail attachPoint: anAttachPoint.	head attachPoint: anAttachPoint.	attachPoint := anAttachPoint</body><body package="Roassal2-Shapes">withShorterDistanceWithOffsetAttachPoint	self attachPoint: RTShorterDistanceWithOffsetAttachPoint new</body></methods><methods><class-id>Roassal2.RTStyledMultiLine</class-id> <category>line styles</category><body package="Roassal2-Shapes">dashdotLine		dashes := #("fill" 6 "gap" 3 "fill" 1 "gap" 3)</body><body package="Roassal2-Shapes">dashedLine		dashes := #("fill" 6 "gap" 4)</body><body package="Roassal2-Shapes">dottedLine	dashes := #("fill" 1 "gap" 2)</body><body package="Roassal2-Shapes">solidLine	dashes := nil</body></methods><methods><class-id>Roassal2.RTGhostDraggable</class-id> <category>announcement handling</category><body package="Roassal2-Interactions">dragEnd: ann	ann element translateTo: ghost position.	ghost remove.	ghost := nil.	ann element view signalUpdate</body><body package="Roassal2-Interactions">dragStart: ann	ghost := ghostBuilder		width: ann element width;		height: ann element height;		elementOn: self.	ghost translateTo: ann element position.	ann element view add: ghost.	ann element view signalUpdate</body><body package="Roassal2-Interactions">dragging: ann	| d |	d := ann element view canvas camera distanceFromPixelToSpace: ann step.	ghost translateBy: (self transformDistance: d forElement: ann element).	self constraintIfNecessary: ghost.	ghost signalUpdate</body><body package="Roassal2-Interactions">resetGhostBuilder	(ghostBuilder := RTShapeBuilder new) rectangle		color: (Color black alpha: 0.1);		borderColor: (Color black alpha: 0.5)</body></methods><methods><class-id>Roassal2.RTGhostDraggable</class-id> <category>hooks</category><body package="Roassal2-Interactions">initialize	super initialize.	self resetGhostBuilder</body><body package="Roassal2-Interactions">initializeElement: anElement	anElement announcer when: TRMouseDragStart send: #dragStart: to: self.	anElement announcer when: TRMouseDragging send: #dragging: to: self.	anElement announcer when: TRMouseDragEnd send: #dragEnd: to: self</body><body package="Roassal2-Interactions">transformDistance: distanceAsPoint forElement: anElement	"Nothing to be transformed since there is no restriction here"	^ distanceAsPoint</body></methods><methods><class-id>Roassal2.TRCameraInitializer</class-id> <category>accessing</category><body package="Roassal2-Trachel-Core">block	^ block</body><body package="Roassal2-Trachel-Core">block: oneArgBlock	"oneArgBlock takes as parameter a camera"	block := oneArgBlock</body></methods><methods><class-id>Roassal2.TRCameraInitializer</class-id> <category>utility</category><body package="Roassal2-Trachel-Core">restorePrevious: camera		| canvas |	LastCamera ifNil: [ LastCamera := camera ].	canvas := camera canvas.	canvas camera: LastCamera.	LastCamera canvas: canvas</body></methods><methods><class-id>Roassal2.TRCameraInitializer</class-id> <category>public - configuration</category><body package="Roassal2-Trachel-Core">focusOnCenter	block := [ :camera | camera focusOnCenter ]</body><body package="Roassal2-Trachel-Core">restorePrevious	block := [ :camera | self restorePrevious: camera ]</body></methods><methods><class-id>Roassal2.TRCameraInitializer</class-id> <category>public</category><body package="Roassal2-Trachel-Core">executeOn: camera	"Do nothing"	block rtValue: camera</body></methods><methods><class-id>Roassal2.TRCameraInitializer</class-id> <category>initialization</category><body package="Roassal2-Trachel-Core">initialize	super initialize.	self focusOnCenter</body></methods><methods><class-id>Roassal2.TRCameraInitializer class</class-id> <category>public</category><body package="Roassal2-Trachel-Core">focusOnCenter	^ self new focusOnCenter</body><body package="Roassal2-Trachel-Core">reset	LastCamera := nil</body><body package="Roassal2-Trachel-Core">restorePrevious	^ self new restorePrevious</body></methods><methods><class-id>Roassal2.RTShorterDistanceWithOffsetAttachPoint</class-id> <category>public</category><body package="Roassal2-AttachPoint">offsetNormalFor: anEdge    "Return the offset in case of multiple edges with the same starting and ending points"    | indexOfEdge multipleEdges normal pos |    multipleEdges := OrderedCollection new.    multipleEdges addAll:         (anEdge to connectedEdges select: [ :e |             (e from == anEdge from) and: [ e to == anEdge to ] ]).        multipleEdges addAll:         (anEdge to connectedEdges select: [ :e |             (e to == anEdge from) and: [ e from == anEdge to ] ]).    	multipleEdges size &lt;= 1 ifTrue: [ ^ 0 @ 0 ].	indexOfEdge := multipleEdges indexOf: anEdge.	pos := anEdge to position - anEdge from position.	normal := pos = (0@0) ifTrue: [ -1 @0  ] ifFalse: [ pos normal].	^ (indexOfEdge - 1 - (multipleEdges size / 2)) * offset * normal</body></methods><methods><class-id>Roassal2.RTShorterDistanceWithOffsetAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">attachPointsFor: anEdge on: anElement	"Return the four possible attach points for each of the four sides for given edge on given element."	| rec center |	rec := anElement encompassingRectangle.	center := rec center.		^ Array 		"upper side"		with: ((center x) @ rec top)		 "right side"		with: (rec right @ (center y))		"lower side"		with: ((center x) @ rec bottom)		"left side"		with: (rec left @ (center y))</body><body package="Roassal2-AttachPoint">basicEndingPointOf: anEdge	^ (super basicEndingPointOf: anEdge) + (self offsetNormalFor: anEdge)</body><body package="Roassal2-AttachPoint">basicStartingPointOf: anEdge	^ (super basicStartingPointOf: anEdge) + (self offsetNormalFor: anEdge)</body></methods><methods><class-id>Roassal2.RTShorterDistanceWithOffsetAttachPoint</class-id> <category>accessing</category><body package="Roassal2-AttachPoint">offset	^ offset</body><body package="Roassal2-AttachPoint">offset: anInteger	"In case fromElement and toElement have more than one edge between the same two extremities, offset is the distance between lines"	offset := anInteger</body></methods><methods><class-id>Roassal2.RTShorterDistanceWithOffsetAttachPoint</class-id> <category>initialization</category><body package="Roassal2-AttachPoint">initialize	super initialize.	offset := 5.</body></methods><methods><class-id>Roassal2.RTSimpleArrowHead</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRSimpleArrowShape</body></methods><methods><class-id>Roassal2.RTQuadTree</class-id> <category>accessing</category><body package="Roassal2-Layouts">charge	^ charge</body><body package="Roassal2-Layouts">charge: anObject	charge := anObject</body><body package="Roassal2-Layouts">corner	^ corner</body><body package="Roassal2-Layouts">corner: anObject	corner := anObject</body><body package="Roassal2-Layouts">cx	^ cx</body><body package="Roassal2-Layouts">cx: aFloat	cx := aFloat</body><body package="Roassal2-Layouts">cy	^ cy</body><body package="Roassal2-Layouts">cy: aFloat	cy := aFloat</body><body package="Roassal2-Layouts">leaf	^ leaf</body><body package="Roassal2-Layouts">node	^ node</body><body package="Roassal2-Layouts">nodes	^ nodes</body><body package="Roassal2-Layouts">origin	^ origin</body><body package="Roassal2-Layouts">origin: anObject	origin := anObject</body></methods><methods><class-id>Roassal2.RTQuadTree</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize 	super initialize.		leaf := true.	nodes := Array new: 4.</body></methods><methods><class-id>Roassal2.RTQuadTree</class-id> <category>adding</category><body package="Roassal2-Layouts">add: aNode	|n|	leaf ifTrue: [ x isNil ifFalse: [ (x - aNode position x) abs + (y - aNode position y) abs &lt; 0.01 ifTrue: [ self addChild: aNode ]																								   ifFalse: [ n := node.																											x := nil.																											y := nil.																											node := nil.																											self addChild: aNode;																												addChild: n ] ] 						ifTrue: [ x := aNode position x.								y := aNode position y.								node := aNode ] ] 		 ifFalse: [ self addChild: aNode ]</body><body package="Roassal2-Layouts">addChild: aNode	| sx sy new |		sx := (origin x + corner x) / 2.	sy := (origin y + corner y) / 2.		leaf := false.	aNode position x &lt; sx ifTrue: [ aNode position y &lt; sy ifTrue: [ (nodes at: 1) isNil ifTrue: [ new := RTQuadTree new.																								new origin: origin;																									corner: sx@sy.																								nodes at: 1 put: new ] .																	(nodes at: 1) add: aNode ]															ifFalse: [ (nodes at: 3) isNil ifTrue: [ new := RTQuadTree new.																								new origin: origin x @ sy;																									corner: sx @ corner y.																								nodes at: 3 put: new ] .																	(nodes at: 3) add: aNode ] ]	 						    ifFalse: [ aNode position y &lt; sy ifTrue: [  (nodes at: 2) isNil ifTrue: [ new := RTQuadTree new.																								new origin: sx @ origin y;																									corner: corner x @ sy.																								nodes at: 2 put: new ] .																	(nodes at: 2) add: aNode ] 															ifFalse: [ (nodes at: 4) isNil ifTrue: [ new := RTQuadTree new.																								new origin: sx @ sy;																									corner: corner.																								nodes at: 4 put: new ] .																	(nodes at: 4) add: aNode ] ]</body></methods><methods><class-id>Roassal2.RTQuadTree class</class-id> <category>public</category><body package="Roassal2-Layouts">withAll: aNodeCollection	^ self withAll: aNodeCollection origin: (aNodeCollection collect: [:e | e position x]) min @ (aNodeCollection collect: [:e | e position y]) min corner: (aNodeCollection collect: [:e | e position x]) max @ (aNodeCollection collect: [:e | e position y]) max</body><body package="Roassal2-Layouts">withAll: aNodeCollection origin: aPoint corner: anotherPoint	| dx dy root |	dx := anotherPoint x - aPoint x.	dy := anotherPoint y - aPoint y.	(dx closeTo: dy ) ifTrue: [ root := self new.										root origin: aPoint;											corner: anotherPoint.										aNodeCollection do: [ :e | root add: e ].										^ root ] .		dx &gt; dy ifTrue: [ ^ self withAll: aNodeCollection origin: aPoint corner: anotherPoint x @ (aPoint y + dx) ].	dy &gt; dx ifTrue: [ ^ self withAll: aNodeCollection origin: aPoint corner: (aPoint x + dy) @ anotherPoint y ] .</body></methods><methods><class-id>Roassal2.TRKeyboardEvent</class-id> <category>accessing</category><body package="Roassal2-Trachel-Events">keyCombination	^ keyCombination</body><body package="Roassal2-Trachel-Events">keyCombination: anObject	keyCombination := anObject</body><body package="Roassal2-Trachel-Events">keyValue	^ keyValue</body><body package="Roassal2-Trachel-Events">keyValue: anObject	keyValue := anObject</body></methods><methods><class-id>Roassal2.TRKeyboardEvent</class-id> <category>comparing</category><body package="Roassal2-Trachel-Events">= anotherKeyDown	"Do we really need this method? It has been imported from Roassal1"	(self class == anotherKeyDown) ifFalse: [  ^ false ].	^ self keyValue = anotherKeyDown keyValue</body></methods><methods><class-id>Roassal2.TRKeyboardEvent</class-id> <category>initialization</category><body package="Roassal2-Trachel-Events">initialize	super initialize.	keyValue := 0</body></methods><methods><class-id>Roassal2.RTLine</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeClass	^ TRLineShape</body></methods><methods><class-id>Roassal2.RTAxisRenderer</class-id> <category>action</category><body package="Roassal2-Builder-Grapher-Core">moveLabel: label againstTick: aTick	self positionLabel value: label value: aTick</body></methods><methods><class-id>Roassal2.RTAxisRenderer</class-id> <category>accessing-computed</category><body package="Roassal2-Builder-Grapher-Core">getStringFromNumber: aNumber	^ config getStringFromNumber: aNumber</body><body package="Roassal2-Builder-Grapher-Core">maxValue	^ config maxValue</body><body package="Roassal2-Builder-Grapher-Core">minValue	^ config minValue</body><body package="Roassal2-Builder-Grapher-Core">numberOfLabels	^ config numberOfLabels</body><body package="Roassal2-Builder-Grapher-Core">numberOfTicks	^ config numberOfTicks</body><body package="Roassal2-Builder-Grapher-Core">positionLabel	^ config positionLabel</body><body package="Roassal2-Builder-Grapher-Core">tickIntervalForLabel	^ config tickIntervalForLabel</body><body package="Roassal2-Builder-Grapher-Core">title	^ config title</body></methods><methods><class-id>Roassal2.RTAxisRenderer</class-id> <category>rendering</category><body package="Roassal2-Builder-Grapher-Core">addTicksFrom: toPosition to: fromPosition	"Add ticks on the lines. Return the list of ticks"	| tickShape ticks tickLength angle ticksShift |	tickLength := 5.	angle := (toPosition - fromPosition) angle.	tickShape := RTBox new		color: config color;		height: tickLength;		width: config lineThickness.	ticks := tickShape elementsOn: (0 to: self numberOfTicks).	self addAllToView: ticks.	ticks pushBack.	ticksShift := self areTicksCentered		ifTrue: [ 1 ]		ifFalse: [ tickLength ].	RTMetricNormalizer new		elements: ticks;		normalizePosition: [ :v | v @ v ]			min: fromPosition + (angle sin @ angle cos * ticksShift / 2)			max: toPosition + (angle sin @ angle cos * ticksShift / 2)			using: [ :aPoint | (config scaleTransformation rtValue: aPoint x) @ (config scaleTransformation rtValue: aPoint y) ].	ticks rotateByDegrees: angle radiansToDegrees.	"Ticks should not have any model"	ticks do: [ :el | el model: nil ].	^ ticks</body><body package="Roassal2-Builder-Grapher-Core">areTicksCentered	^ config ticksCentered</body><body package="Roassal2-Builder-Grapher-Core">axisLineFrom: aPositionFrom to: aPositionTo	"Add the lines"	self axisLineFrom: aPositionFrom to: aPositionTo width: 1</body><body package="Roassal2-Builder-Grapher-Core">axisLineFrom: aPositionFrom to: aPositionTo width: numberOfPixels	"Add the lines, with a width of numberOfPixels"	| edge ex2 ex1 |			ex1 := (RTBox new size: 0) element.	ex2 := (RTBox new size: 0) element.	ex2 translateTo: (aPositionTo).	ex1 translateTo: (aPositionFrom).	edge := (RTLine new color: config color; width: numberOfPixels) edgeFrom: ex1 to: ex2.	self addToView: ex1; addToView: ex2.	self addToView: edge</body></methods><methods><class-id>Roassal2.RTAxisRenderer</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">builder	^ builder</body><body package="Roassal2-Builder-Grapher-Core">builder: aChartBuilder	builder := aChartBuilder</body><body package="Roassal2-Builder-Grapher-Core">config	^ config</body><body package="Roassal2-Builder-Grapher-Core">config: anAxisConfiguration	config := anAxisConfiguration</body><body package="Roassal2-Builder-Grapher-Core">labelFontHeight	^ config labelFontHeight</body></methods><methods><class-id>Roassal2.RTAxisRenderer</class-id> <category>rendering-utility</category><body package="Roassal2-Builder-Grapher-Core">addAllToView: roassalElements	self builder view addAll: roassalElements</body><body package="Roassal2-Builder-Grapher-Core">addToView: roassalElement	self builder view add: roassalElement</body></methods><methods><class-id>Roassal2.RTAxisRenderer</class-id> <category>public-rendering</category><body package="Roassal2-Builder-Grapher-Core">axisFrom: fromPosition to: toPosition	"THIS IS A PUBLIC METHOD"	"fromPosition is the starting point of the axis. toPosition is the ending point"	self axisFrom: fromPosition to: toPosition width: 1</body><body package="Roassal2-Builder-Grapher-Core">axisFrom: fromPosition to: toPosition width: lineThicknessInPixels	"THIS IS A PUBLIC METHOD"	"fromPosition is the starting point of the axis. toPosition is the ending point"	| ticks labelShape labelValues labels tickIntervalForLabel labelledTicks |	"We add the labels"	self axisLineFrom: fromPosition to: toPosition width: lineThicknessInPixels.		"We insert the title if necessary"	self insertTitleIfNecessaryTo: toPosition.		self numberOfTicks = 0 ifTrue: [ ^ self ].	ticks := self addTicksFrom: toPosition to: fromPosition.	self numberOfLabels = 0 ifTrue: [ ^ self ].	tickIntervalForLabel := self tickIntervalForLabel.	labelledTicks := (1 to: ticks size by: tickIntervalForLabel) collect: [ :i | ticks at: i ].	labelValues := (0 to: self numberOfLabels)		collect: [ :i | self minValue + (i * (self maxValue - self minValue) / self numberOfLabels) ].	labelShape := RTLabel new 		color: self defaultLabelColor;		text: [ :i | self getStringFromNumber: (labelValues at: i + 1) ];		height: self labelFontHeight.	labels := labelShape elementsOn: (0 to: self numberOfLabels).	labels withIndexDo: [ :label :i | 		self moveLabel: label againstTick: (labelledTicks at: i).		self rotateLabelIfNecessary: label.		label model: nil ].		self addAllToView: labels.		labels pushBack</body><body package="Roassal2-Builder-Grapher-Core">insertTitleIfNecessaryTo: toPosition	| lbl |	self title notEmpty		ifTrue: [ 			lbl := (RTLabel new text: self title; color: self defaultLabelColor) element.			self addToView: lbl.			lbl translateTo: toPosition - config titlePosition ]</body><body package="Roassal2-Builder-Grapher-Core">rotateLabelIfNecessary: label	"Rotate and position the label if necessary"	config areLabelRotated ifFalse: [ ^ self ].	label rotateByDegrees: config labelRotation.	label translateBy: (label width / -2 * config labelRotation degreesToRadians cos @ 								(label width / -2 * config labelRotation degreesToRadians sin)) "+ (5 @ 0)".</body></methods><methods><class-id>Roassal2.RTAxisRenderer</class-id> <category>configuration</category><body package="Roassal2-Builder-Grapher-Core">defaultLabelColor	"Label should have the same colors than the axis"	^ config color</body></methods><methods><class-id>Roassal2.RTEmptyCircle class</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRCircleHeadShape</body></methods><methods><class-id>Roassal2.RTSpectrograph</class-id> <category>accessing</category><body package="Roassal2-Builder-Spectrograph">lineBlock	^ lineBlock</body><body package="Roassal2-Builder-Spectrograph">lineBlock: anObject	lineBlock := anObject</body><body package="Roassal2-Builder-Spectrograph">objects	^ objects</body><body package="Roassal2-Builder-Spectrograph">objects: anObject	objects := anObject</body><body package="Roassal2-Builder-Spectrograph">pointSize: anObject	shapeBuilder current size: pointSize</body></methods><methods><class-id>Roassal2.RTSpectrograph</class-id> <category>util</category><body package="Roassal2-Builder-Spectrograph">highlight: aBlockOrValue	^ self highlight: aBlockOrValue color: Color red</body><body package="Roassal2-Builder-Spectrograph">highlight: aBlockOrValue color: aColor	shapeBuilder		if: [ :v | aBlockOrValue value: v first value: v second ] fillColor: aColor.</body><body package="Roassal2-Builder-Spectrograph">setTitleIfNecessary	"This method has to be called after having added the elements in the view"	| label g |	title ifEmpty: [ ^ self ].	g := RTGroup withAll: view elements.	label := (RTLabel new text: title) element.	TRConstraint move: label below: g.	view add: label</body></methods><methods><class-id>Roassal2.RTSpectrograph</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Spectrograph">popupText: aTwoArgBlock	self interaction popupText: [ :model | aTwoArgBlock value: model first value: model second ]</body></methods><methods><class-id>Roassal2.RTSpectrograph</class-id> <category>hooks</category><body package="Roassal2-Builder-Spectrograph">createShapeBuilder	^ super createShapeBuilder rectangle</body><body package="Roassal2-Builder-Spectrograph">createView	^ super createView @ RTDraggableView</body><body package="Roassal2-Builder-Spectrograph">renderIn: aView	| rowsOfElements es interaction |	interaction := RTPopup new.	rowsOfElements := OrderedCollection new.		objects do: [ :o | 			es := shapeBuilder elementsOn: ((lineBlock rtValue: o) collect: [ :computedObject | (Array with: o with: computedObject ) ]).				RTVerticalLineLayout new gapSize: 0; on: es.		rowsOfElements add: es.		aView addAll: es.		interactionBuilder setUpElements: es	].	RTHorizontalLineLayout new alignBottom; gapSize: 0; on: rowsOfElements.	self setTitleIfNecessary</body></methods><methods><class-id>Roassal2.RTSpectrograph</class-id> <category>initialization</category><body package="Roassal2-Builder-Spectrograph">initialize	super initialize.	title := ''</body></methods><methods><class-id>Roassal2.RTDecoratedLine</class-id> <category>accessing</category><body package="Roassal2-LineDecorations">color: aColor	color := aColor.	tail color: self color.	head color: self color.	line color: self color</body><body package="Roassal2-LineDecorations">head	^ head</body><body package="Roassal2-LineDecorations">head: aLineHead	(head := aLineHead)		attachPoint: attachPoint;		color: color</body><body package="Roassal2-LineDecorations">line	^ line</body><body package="Roassal2-LineDecorations">line: aLineShape	(line := aLineShape)		attachPoint: attachPoint;		color: color</body><body package="Roassal2-LineDecorations">tail	^ tail</body><body package="Roassal2-LineDecorations">tail: aLineTail	(tail := aLineTail)		ifNotNil: [ 			tail attachPoint: attachPoint.			tail color: color ]</body></methods><methods><class-id>Roassal2.RTDecoratedLine</class-id> <category>attach point</category><body package="Roassal2-LineDecorations">attachPoint: anAttachPoint	super attachPoint: anAttachPoint.	tail attachPoint: self attachPoint.	head attachPoint: self attachPoint.	line attachPoint: self attachPoint</body><body package="Roassal2-LineDecorations">withShorterDistanceWithOffsetAttachPoint	self attachPoint: RTShorterDistanceWithOffsetAttachPoint new</body></methods><methods><class-id>Roassal2.RTDecoratedLine</class-id> <category>heads</category><body package="Roassal2-LineDecorations">arrowHead	self head: RTSimpleArrow asHead</body><body package="Roassal2-LineDecorations">arrowTail	self tail: RTSimpleArrow asTail</body><body package="Roassal2-LineDecorations">emptyArrowHead	self head: RTEmptyArrow asHead</body><body package="Roassal2-LineDecorations">emptyArrowTail	self tail: RTEmptyArrow asTail</body><body package="Roassal2-LineDecorations">emptyCircleHead	self head: RTEmptyCircle asHead</body><body package="Roassal2-LineDecorations">emptyCircleTail	self tail: RTEmptyCircle asTail</body><body package="Roassal2-LineDecorations">emptyDiamondHead	self head: RTEmptyDiamond asHead</body><body package="Roassal2-LineDecorations">emptyDiamondTail	self tail: RTEmptyDiamond asTail</body><body package="Roassal2-LineDecorations">emptyNarrowArrowHead	self head: RTEmptyNarrowArrow asHead</body><body package="Roassal2-LineDecorations">emptyNarrowArrowTail	self tail: RTEmptyNarrowArrow asTail</body><body package="Roassal2-LineDecorations">filledArrowHead	self head: RTFilledArrow asHead</body><body package="Roassal2-LineDecorations">filledArrowTail	self tail: RTFilledArrow asTail</body><body package="Roassal2-LineDecorations">filledCircleHead	self head: RTFilledCircle asHead</body><body package="Roassal2-LineDecorations">filledCircleTail	self tail: RTFilledCircle asTail</body><body package="Roassal2-LineDecorations">filledDiamondHead	self head: RTFilledDiamond asHead</body><body package="Roassal2-LineDecorations">filledDiamondTail	self tail: RTFilledDiamond asTail</body><body package="Roassal2-LineDecorations">filledNarrowArrowHead	self head: RTFilledNarrowArrow asHead</body><body package="Roassal2-LineDecorations">filledNarrowArrowTail	self tail: RTFilledNarrowArrow asTail</body><body package="Roassal2-LineDecorations">noHead	self head: RTNoDecorationShape asHead</body><body package="Roassal2-LineDecorations">noTail	self tail: RTNoDecorationShape asTail</body></methods><methods><class-id>Roassal2.RTDecoratedLine</class-id> <category>public</category><body package="Roassal2-LineDecorations">directed	self line: RTDirectedLine new</body><body package="Roassal2-LineDecorations">edgeFrom: el1 to: el2	^ (RTEdge from: el1 to: el2) addShape: self</body><body package="Roassal2-LineDecorations">empty	self		emptyArrowHead;		noTail</body><body package="Roassal2-LineDecorations">notDecorated	self		noHead;		noTail</body><body package="Roassal2-LineDecorations">simple	self		filledNarrowArrowHead;		noTail</body><body package="Roassal2-LineDecorations">straight	self line: RTLine new</body><body package="Roassal2-LineDecorations">trachelShapeFor: anEdge	^ TRCompositeShape new		addShape: (line trachelShapeFor: anEdge);		addShape: (head trachelShapeFor: anEdge);		addShape: (tail trachelShapeFor: anEdge);		yourself</body><body package="Roassal2-LineDecorations">width: aValue	line width: aValue</body></methods><methods><class-id>Roassal2.RTDecoratedLine</class-id> <category>initialization</category><body package="Roassal2-LineDecorations">initialize	super initialize.	self		straight;		notDecorated</body></methods><methods><class-id>Roassal2.RTDecoratedLine</class-id> <category>rendering</category><body package="Roassal2-LineDecorations">updateFor: edge trachelShape: trachelShape	line updateFor: edge trachelShape: edge trachelShape shapes first.	head updateFor: edge trachelShape: edge trachelShape shapes second.	tail updateFor: edge trachelShape: edge trachelShape shapes third</body></methods><methods><class-id>Roassal2.TRTheme</class-id> <category>accessing</category><body package="Roassal2-Trachel-Theme">trachelCanvasColor	^ self subclassResponsibility</body><body package="Roassal2-Trachel-Theme">transformColor: aColor	"Per default, there is no color transformation"	^ aColor</body></methods><methods><class-id>Roassal2.TRTheme class</class-id> <category>base color</category><body package="Roassal2-Trachel-Theme">blue	^ self current blue</body><body package="Roassal2-Trachel-Theme">cyan	^ self current cyan</body><body package="Roassal2-Trachel-Theme">green	^ self current green</body><body package="Roassal2-Trachel-Theme">magenta	^ self current magenta</body><body package="Roassal2-Trachel-Theme">orange	^ self current orange</body><body package="Roassal2-Trachel-Theme">red	^ self current red</body><body package="Roassal2-Trachel-Theme">violet	^ self current violet</body><body package="Roassal2-Trachel-Theme">yellow	^ self current yellow</body></methods><methods><class-id>Roassal2.TRTheme class</class-id> <category>generic</category><body package="Roassal2-Trachel-Theme">emphasisColor	^ self red</body><body package="Roassal2-Trachel-Theme">primaryColor	^ self blue</body><body package="Roassal2-Trachel-Theme">secondaryEmphasisColor	^ self green</body></methods><methods><class-id>Roassal2.TRTheme class</class-id> <category>accessing</category><body package="Roassal2-Trachel-Theme">current	Current ifNotNil: [ ^ Current ].	Current := self infer.	^ Current</body><body package="Roassal2-Trachel-Theme">infer	^ TRWhiteSolarizedTheme new</body></methods><methods><class-id>Roassal2.TRPlainColorTheme</class-id> <category>constants</category><body package="Roassal2-Trachel-Theme">blue	^ Color blue</body><body package="Roassal2-Trachel-Theme">cyan	^ Color cyan</body><body package="Roassal2-Trachel-Theme">green	^ Color green</body><body package="Roassal2-Trachel-Theme">magenta	^ Color magenta</body><body package="Roassal2-Trachel-Theme">orange	^ Color orange</body><body package="Roassal2-Trachel-Theme">red	^ Color red</body><body package="Roassal2-Trachel-Theme">violet	^ Color fromRgb256Triplet: #(127 0 255)</body><body package="Roassal2-Trachel-Theme">yellow	^ Color yellow</body></methods><methods><class-id>Roassal2.RTSelectionBox</class-id> <category>hooks</category><body package="Roassal2-Experimental">initializeElement: view	| actions |	aView := view.	edges := aView edges.	edges do: #remove.	actions := Array 		with: 'Add box from and to'-&gt; [ self addBox trachelShape condition: [ :rec :ed| 			(rec containsPoint: ed from position) and: [ rec containsPoint: ed to position ] ] ]		with: 'Add box from'-&gt;[ self addBox trachelShape condition: [ :rec :ed |			rec containsPoint: ed from position ] ]		with: 'Add box to'-&gt;[ self addBox trachelShape condition: [ :rec :ed |			rec containsPoint: ed to position ] ]		with: 'Add box (from or to)'-&gt; [ self addBox trachelShape condition: [ :rec :ed |			(rec containsPoint: ed from position) or: [ rec containsPoint: ed to position ]] ].	aView when: TRMouseRightClick do: [ :evt |		lastClick := evt.		TRUtil instance widgetFactory menuForAssociations: actions on: aView ].</body></methods><methods><class-id>Roassal2.RTSelectionBox</class-id> <category>public</category><body package="Roassal2-Experimental">addBox	^ self addBox: Color random</body><body package="Roassal2-Experimental">addBox: aColor	| box |	box := RTClipBox new			size: 100;			borderColor: aColor;			borderWidth: 1;			color: Color transparent;			element.	lastClick isNil ifFalse: [ 		box translateTo: lastClick position ].	aView add: box.	box trachelShape edges: edges.	box @ RTDraggable.	box @ RTResizable.	aView signalUpdate.	^ box</body></methods><methods><class-id>Roassal2.TRVIAnimatedValue</class-id> <category>accessing</category><body package="Roassal2-Trachel-Viva">animationDidFinish	timer value = 1.0		ifTrue: [ finishCallback value ].</body><body package="Roassal2-Trachel-Viva">evaluator		^ evaluator</body><body package="Roassal2-Trachel-Viva">evaluator: anObject	evaluator := anObject</body><body package="Roassal2-Trachel-Viva">finishCallback: anObject	finishCallback := anObject</body><body package="Roassal2-Trachel-Viva">timer	^ timer</body><body package="Roassal2-Trachel-Viva">timer: anObject	timer := anObject</body><body package="Roassal2-Trachel-Viva">value	" evaluate the value of receiver at current time "	self animationDidFinish.	^ evaluator value: timer value</body></methods><methods><class-id>Roassal2.TRVIAnimatedValue</class-id> <category>converting</category><body package="Roassal2-Trachel-Viva">@ anotherValue	^ TRVIAnimatedPoint new x: self; y: anotherValue; yourself</body><body package="Roassal2-Trachel-Viva">adaptToNumber: rcvr andSend: selector	^ self value perform: selector with: rcvr</body><body package="Roassal2-Trachel-Viva">asFloat	^ self value asFloat</body></methods><methods><class-id>Roassal2.TRVIAnimatedValue</class-id> <category>actions</category><body package="Roassal2-Trachel-Viva">animatedPoint: aPoints	| pnts |	pnts := aPoints asSortedCollection.	self evaluator: [ :t |		| inicial fin |		inicial := nil.		fin := nil.				pnts do:[ :e | 	 	    e key &lt;= t 			ifTrue: [ inicial:= e ] 			ifFalse:[fin isNil ifTrue:[fin:= e] ]	 	].		inicial value interpolateTo: fin value at: t.	 ].</body><body package="Roassal2-Trachel-Viva">animatedValue: values	| val fraction currentValue |	fraction := 1.0 / (values size -1).	currentValue:= 0.	self animatedPoint: 		(values collect: [ :e | val := currentValue -&gt; e. currentValue:= currentValue + fraction. val]).</body><body package="Roassal2-Trachel-Viva">reset	timer reset</body><body package="Roassal2-Trachel-Viva">start	timer start</body><body package="Roassal2-Trachel-Viva">stop	timer stop</body></methods><methods><class-id>Roassal2.TRVIAnimatedValue</class-id> <category>grouping</category><body package="Roassal2-Trachel-Viva">+ aValue	^ [ self value + aValue value ]"	self error: 'Not supported yet'""	^VIAnimatedGroup new 		add:self;		add:aVIAnimatedValue."</body><body package="Roassal2-Trachel-Viva">- aValue	^ [ self value - aValue value ]</body></methods><methods><class-id>Roassal2.TRVIAnimatedValue</class-id> <category>testing</category><body package="Roassal2-Trachel-Viva">hasCompleted	^ timer value = 1.0</body></methods><methods><class-id>Roassal2.TRVIAnimatedValue</class-id> <category>sequence</category><body package="Roassal2-Trachel-Viva">, aVIAnimatedValue 	self error: 'Not yet supported'"	^VIAnimatedSecuence new		add:self;		add:aVIAnimatedValue.	"</body><body package="Roassal2-Extentions">sumFromSmallInteger: anInteger	^ self value sumFromInteger: anInteger</body></methods><methods><class-id>Roassal2.TRVIAnimatedValue</class-id> <category>initialization</category><body package="Roassal2-Trachel-Viva">initialize	super initialize.	timer := TRVITimer new.	evaluator := [ :time | time ]</body></methods><methods><class-id>Roassal2.GCircle</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body><body package="Roassal2-Pharo">initializeWithCenter: aPoint1 radius: aNumber	super initialize.	center := aPoint1.	radius := aNumber.</body></methods><methods><class-id>Roassal2.GCircle</class-id> <category>accessing</category><body package="Roassal2-Pharo">center	^center</body><body package="Roassal2-Pharo">encompassingRectangle	^ (center - radius) corner: (center + radius)</body><body package="Roassal2-Pharo">inscribedRectangle		^ Rectangle		origin: center - (radius / 2 sqrt)		corner: center + (radius / 2 sqrt)</body><body package="Roassal2-Pharo">length	^ 2 * (self radius)* (Float pi)</body><body package="Roassal2-Pharo">radius	^ radius</body></methods><methods><class-id>Roassal2.GCircle</class-id> <category>public interface</category><body package="Roassal2-Pharo">intersectLineSegment: aLineSegment	^ aLineSegment intersectCircle: self</body><body package="Roassal2-Pharo">intersectWith: line</body><body package="Roassal2-Pharo">point: p1 isTooCloseTo: p2	^ 1 -( self cosBetween: p1 and: p2 ) &lt;~ 0.1</body><body package="Roassal2-Pharo">polygonOn: points|polygonSegm firstP notUsedPoints currentP|	currentP := points anyOne.	firstP := currentP.	notUsedPoints := points asOrderedCollection remove: currentP; yourself.	polygonSegm := OrderedCollection new.		[ notUsedPoints isNotEmpty ] whileTrue: [		| nextP |		nextP := notUsedPoints detectMin: [ :point | point dist: currentP ].		polygonSegm add:( GSegment with: currentP with: nextP).		currentP := nextP.		notUsedPoints remove: currentP ].	polygonSegm add:( GSegment with: currentP with: firstP).	^ polygonSegm</body><body package="Roassal2-Pharo">upperPoint	^ center x @ ( center y + radius )</body><body package="Roassal2-Pharo">with: p1 boundaryContains1: aPoint ( self boundaryContains: aPoint )	ifFalse:[		(self point: p1 isTooCloseTo: aPoint) 			ifTrue:[ |cir newCenter| 				newCenter := (self center + (self center dist: aPoint))/2.				cir := GCircle center: newCenter radius: (self radius + (self radius dist: aPoint))/2 ]				]</body><body package="Roassal2-Pharo">with: p1 boundaryContains: aPoint^ ( self boundaryContains: aPoint ) or:[self point: p1 isTooCloseTo: aPoint]</body></methods><methods><class-id>Roassal2.GCircle</class-id> <category>comparing</category><body package="Roassal2-Pharo">= circ	^( self radius =~ circ radius and:[ self center =~ circ center ])</body><body package="Roassal2-Pharo">boundaryContains: aPoint^(self radius =~ (self center dist: aPoint))</body><body package="Roassal2-Pharo">boundaryContainsThis: points ^(points select:[ :point| self boundaryContains: point]) isNotEmpty</body><body package="Roassal2-Pharo">boundaryContainsWhichOf: points ^ points select:[ :point| self boundaryContains: point]</body><body package="Roassal2-Pharo">cosBetween: p1 and: p2^ (( GRay origin: self center direction: p1 ) * ( GRay origin: self center direction: p2 )) /( ( GRay origin: self center direction: p1 )length * (( GRay origin: self center direction: p2 ) length ) )</body><body package="Roassal2-Pharo">equal: circ withApproximation: aNumber"self halt."	^( (self radius - circ radius ) abs &lt; aNumber )	and:[ 		( (self center x - circ center x)abs &lt; aNumber)		""and:[  (self center y - circ center y)abs &lt; aNumber ]""		]</body></methods><methods><class-id>Roassal2.GCircle</class-id> <category>testing</category><body package="Roassal2-Pharo">contains: aPoint^ (self radius &gt; (self center dist: aPoint)) and:[ (self boundaryContains: aPoint) not ]</body></methods><methods><class-id>Roassal2.GCircle class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">center: aPoint1 radius: aNumber	^ self new initializeWithCenter: aPoint1 radius: aNumber</body><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Roassal2.RTCubeHelix</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizer">gamma	^ gamma</body><body package="Roassal2-ColorNormalizer">gamma: aNumber	"Defines the luminance bias of the gradient.	&lt;1 : compressed dark tones	=1 : linear progression	&gt;1 : compressed light tones"	gamma := aNumber</body><body package="Roassal2-ColorNormalizer">hueShift: hue	"Defines the starting point (the hue of the darkest color) on the chroma wheel.	The value is modulo 3: 1=red, 2=green, 3=0=blue"	hueShift := hue</body><body package="Roassal2-ColorNormalizer">level: gradientParameter	"Return a color. gradientParameter, the argument, is a value between 0.0 and 1.0"	| gradientGamma phi alpha |	gradientGamma := gradientParameter raisedTo: gamma.	phi := 2.0 * Float pi * (hueShift / 3.0 + (rotations * gradientParameter)).	alpha := saturation * gradientGamma * (1.0 - gradientGamma) / 2.0.	Coefficients ifNil: [ self class initialize. ].		^ Color fromRgbTriplet: (		( (Coefficients *alpha) +* (Array with: phi cos with: phi sin)) + gradientGamma			collect: [ :c | c min: 1 max: 0 ])</body><body package="Roassal2-ColorNormalizer">rotations	^ rotations</body><body package="Roassal2-ColorNormalizer">rotations: nbRotations	"Defines the angular spread and direction of the gradient over the chromatic wheel.	From dark to light, positive values will follow the RGB order (and negative values in the other direction)"	rotations := nbRotations</body><body package="Roassal2-ColorNormalizer">saturation	^ saturation</body><body package="Roassal2-ColorNormalizer">saturation: saturationCoefficient	"Defines the deviation away from gray levels (saturation 0).	Values higher than 1 can produce saturated colors."	saturation := saturationCoefficient</body></methods><methods><class-id>Roassal2.RTCubeHelix</class-id> <category>initialization</category><body package="Roassal2-ColorNormalizer">initialize	"values from the default gradient in the paper"	hueShift := 0.5. "darkest color is a purple"	rotations := -1.5. "progress towards blues rather than reds"	saturation := 1.2.	gamma := 1.0</body></methods><methods><class-id>Roassal2.RTCubeHelix class</class-id> <category>class initialization</category><body package="Roassal2-ColorNormalizer">initialize	" self initialize "	Coefficients := TRPlatform current matrixClass rows: 3 columns: 2 contents: #(		-0.14861	1.78277		-0.29227	-0.90649		1.97924	0	)</body></methods><methods><class-id>Roassal2.RTCubeHelix class</class-id> <category>instance creation</category><body package="Roassal2-ColorNormalizer">hueShift: hueShift rotations: rotations saturation: saturation	^ self new		hueShift: hueShift;		rotations: rotations;		saturation: saturation;		yourself</body></methods><methods><class-id>Roassal2.RTSourceCodeDictionary</class-id> <category>hooks</category><body package="Roassal2-Builder-NameCloud">unnecessaryWords	^ #(	'self' 'super' 'ifTrue:' 'ifFalse:' 'ifTrue' 'ifFalse'	)</body></methods><methods><class-id>Roassal2.RTArrowedLine</class-id> <category>accessing</category><body package="Roassal2-Shapes">attachPoint: anAttachPoint	super attachPoint: anAttachPoint.	head attachPoint: anAttachPoint.</body><body package="Roassal2-Shapes">color: aColor	super color: aColor.	head color: aColor.</body><body package="Roassal2-Shapes">head	^ head</body><body package="Roassal2-Shapes">head: aLineDecorationShape	head := aLineDecorationShape.	line ifNotNil: [ head line: line ].</body><body package="Roassal2-Shapes">headOffset: aFloat	"aFloat is value between 0.0 and 1.0 indicating where the arrow is located between the two extremities"	head percentage: aFloat</body><body package="Roassal2-Shapes">withOffset	self headOffset: 0.7</body></methods><methods><class-id>Roassal2.RTArrowedLine</class-id> <category>public</category><body package="Roassal2-Shapes">directed	self line: RTDirectedLine new</body><body package="Roassal2-Shapes">empty	self head: RTEmptyArrowHead new</body><body package="Roassal2-Shapes">inverted	attachPoint inverted</body><body package="Roassal2-Shapes">simple	self head: RTSimpleArrowHead new</body><body package="Roassal2-Shapes">trachelShapeFor: anEdge	| lineTrachelShape headTrachelShape |	^ (self isSelfLoopAllowedFor: anEdge) ifTrue: [ 		lineTrachelShape := line trachelShapeFor: anEdge.		headTrachelShape := head trachelShapeFor: anEdge.		TRCompositeShape new 			addShape: lineTrachelShape; 			addShape: headTrachelShape; 			yourself ]		ifFalse: [ TRNoShape instance ].</body></methods><methods><class-id>Roassal2.RTArrowedLine</class-id> <category>hooks</category><body package="Roassal2-Shapes">updateFor: edge trachelShape: trachelShape	(self isSelfLoopAllowedFor: edge) 		ifFalse: [ ^ self ].	line updateFor: edge trachelShape: edge trachelShape shapes first.	head updateFor: edge trachelShape: edge trachelShape shapes second</body></methods><methods><class-id>Roassal2.RTArrowedLine</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	self simple</body></methods><methods><class-id>Roassal2.RTArrowedLine class</class-id> <category>public</category><body package="Roassal2-Shapes">edgeFrom: el1 to: el2	^ (RTEdge from: el1 to: el2) addShape: self new</body></methods><methods><class-id>Roassal2.RTSelectable</class-id> <category>actions</category><body package="Roassal2-Interactions">evaluateCallback: selectedElements	selectionCallback value: selectedElements</body><body package="Roassal2-Interactions">evaluateCallbackForElement: element	self evaluateCallback: (self selectedElementsFrom: element)</body><body package="Roassal2-Interactions">prepareViewBeenForDeselection: aView	"Make the view react when one click on the view. Element should be unselected"	(self isViewBeenPreparedForDeselection: aView) 		ifFalse: [			aView when: TRMouseClick do: [ :evt | 				aView elements do: [ :e | (self isSelected: e) ifTrue: [ self unselectNoCallback: e ] ].				self evaluateCallback: RTGroup new.				aView signalUpdate ] ]</body><body package="Roassal2-Interactions">select: element	element attributeAt: #oldColor put: element trachelShape color.	element trachelShape color: Color red.	self evaluateCallbackForElement: element.	self prepareViewBeenForDeselection: element view</body><body package="Roassal2-Interactions">selectedElementsFrom: element	^ element view elements select: [ :e | e attributeAt: #isSelected ifAbsent: [ false ] ]</body><body package="Roassal2-Interactions">unselect: element	self unselectNoCallback: element.	self evaluateCallbackForElement: element</body><body package="Roassal2-Interactions">unselectNoCallback: element	element trachelShape color: (element attributeAt: #oldColor).	self markAsUnselected: element</body></methods><methods><class-id>Roassal2.RTSelectable</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	selectionCallback := [ :selectedElements | ]</body></methods><methods><class-id>Roassal2.RTSelectable</class-id> <category>accessing</category><body package="Roassal2-Interactions">selectionCallback	^ selectionCallback</body><body package="Roassal2-Interactions">selectionCallback: aOneArgBlock	"aOneArgBlock will be evaluated at each selection. 	The collection of selected elements is provided to the block"	selectionCallback := aOneArgBlock</body></methods><methods><class-id>Roassal2.RTSelectable</class-id> <category>testing</category><body package="Roassal2-Interactions">isViewBeenPreparedForDeselection: aView	^ aView attributeAt: #preparedForDeselection ifAbsent: [ false ]</body></methods><methods><class-id>Roassal2.RTResizableRectangle class</class-id> <category>accessing</category><body package="Roassal2-Interactions-Resize">cornerDirectionFor: aCorner	^ self cornerDirections at: aCorner</body><body package="Roassal2-Interactions-Resize">cornerDirections	^ cornerDirections		ifNil: [ 			cornerDirections := (OrderedCollection new				add: (#top -&gt; (0 @ 1));				add: (	#bottom -&gt; (0 @ -1));				add: (#left -&gt; (1 @ 0));				add: (#right -&gt; (-1 @ 0));				add: (#topRight -&gt; (-1 @ 1));				add: (#bottomRight -&gt; (-1 @ -1));				add: (#bottomLeft -&gt; (1 @ -1));				add: (#topLeft -&gt; (1 @ 1));				yourself) asDictionary ]</body><body package="Roassal2-Interactions-Resize">corners	^ #(#topRight #bottomRight #topLeft #bottomLeft)</body><body package="Roassal2-Interactions-Resize">cornersAndSides	^ OrderedCollection new add: #top;		add: #topRight;		add: #right;		add: #bottomRight;		add: #bottom;		add: #bottomLeft;		add: #left;		add: #topLeft;		asArray</body><body package="Roassal2-Interactions-Resize">sides	^ #(#top #right #bottom #left)</body></methods><methods><class-id>Roassal2.RTResizableRectangle class</class-id> <category>as yet unclassified</category><body package="Roassal2-Interactions-Resize">oppositeCornerFor: aCorner	^ self oppositeCorners at: aCorner</body><body package="Roassal2-Interactions-Resize">oppositeCorners	^ oppositeCorners		ifNil: [ 			oppositeCorners := (OrderedCollection new				add: (#topRight -&gt; #bottomLeft);				add: (#bottomLeft -&gt; #topRight);				add: (	#bottomRight -&gt; #topLeft);				add: (#topLeft -&gt; #bottomRight);				add: (	#top -&gt; #bottom);				add: (	#bottom -&gt; #top);				add: (	#left -&gt; #right);				add: (	#right -&gt; #left);				yourself) asDictionary ]</body></methods><methods><class-id>Roassal2.RTHorizontalDominanceTreeLayout</class-id> <category>hook-private</category><body package="Roassal2-Layouts">computeChildrenFor: aNode	^ self childrenWithHighestNestingLevelFor: aNode</body></methods><methods><class-id>Roassal2.RTShorterHorizontalDistanceAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">attachPointsFor: anEdge on: anElement	"Return the four possible attach points for each of the four sides for given edge on given element."	| rec center |	rec := anElement encompassingRectangle.	center := rec center.	^ Array 				 "right side"		with: (rec right @ (center y))		"left side"		with: (rec left @ (center y))</body></methods><methods><class-id>Roassal2.RTIdentityMatrix</class-id> <category>accessing</category><body package="Roassal2-Layouts">at: u		| row |	row := rows		at: u		ifAbsentPut: [IdentityDictionary new].	^row keys</body><body package="Roassal2-Layouts">at: u at: v		| row |	row := rows		at: u		ifAbsentPut: [IdentityDictionary new].	^row		at: v		ifAbsent: [false]</body><body package="Roassal2-Layouts">at: u at: v put: aBoolean		| row |	"u -&gt; v"	row := rows		at: u		ifAbsentPut: [IdentityDictionary new].	row at: v put: aBoolean.	"v -&gt; u"	row := rows		at: v		ifAbsentPut: [IdentityDictionary new].	row at: u put: aBoolean</body></methods><methods><class-id>Roassal2.RTIdentityMatrix</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize		rows := IdentityDictionary new</body></methods><methods><class-id>Roassal2.TRMouseWheelEvent</class-id> <category>testing</category><body package="Roassal2-Trachel-Events">isDown	^ direction = Character arrowDown</body><body package="Roassal2-Trachel-Events">isLeft	^ direction = Character arrowLeft</body><body package="Roassal2-Trachel-Events">isRight	^ direction = Character arrowRight</body><body package="Roassal2-Trachel-Events">isUp	^ direction = Character arrowUp</body></methods><methods><class-id>Roassal2.TRMouseWheelEvent</class-id> <category>accessing</category><body package="Roassal2-Trachel-Events">direction	^ direction</body><body package="Roassal2-Trachel-Events">direction: anObject	direction := anObject</body></methods><methods><class-id>Roassal2.TRMouseWheelEvent class</class-id> <category>instance creation</category><body package="Roassal2-Trachel-Events">fromDirection: aDirection position: aPoint	^ self new		position: aPoint;		direction: aDirection;		yourself</body></methods><methods><class-id>Roassal2.RTFilledNarrowArrow class</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRFilledNarrowArrowHeadShape</body></methods><methods><class-id>Roassal2.RTSVGOval</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">box	^ box</body><body package="Roassal2-Exporter-SVG">box: anObject	box := anObject</body><body package="Roassal2-Exporter-SVG">element: anElement box:aRectangle color: aColor borderWidth: anInteger borderColor: anotherColor	self element: anElement; box: aRectangle; fillColor: aColor; strokeColor: anotherColor; strokeWidth: anInteger</body><body package="Roassal2-Exporter-SVG">rx	rx ifNil: [ rx := (box width /2) rounded ].	^ rx</body><body package="Roassal2-Exporter-SVG">rx: anObject	rx := anObject</body><body package="Roassal2-Exporter-SVG">ry	ry ifNil: [ ry := (box height /2) rounded ].	^ ry</body><body package="Roassal2-Exporter-SVG">ry: anObject	ry := anObject</body></methods><methods><class-id>Roassal2.RTSVGOval</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addOn: stream using: aSVGVisitor	aSVGVisitor names at: self element put: self id.	self openDef: stream.	self addPosition: stream.	self addWidth: (self rx) height: (self ry) into: stream.	self startStyle: stream.	self addFillColor: stream.	self addFillOpacity: stream.	((self strokeWidth) &gt; 0 and: (self strokeColor) ~= nil)		ifTrue: [ 			self addStrokeColor: stream.			self addStrokeWidth: stream ].		self closeTag: stream.	self startClass: stream.	self closeTag: stream.	self addExternalInteractions: aSVGVisitor.	self closeDef: stream.</body><body package="Roassal2-Exporter-SVG">addPosition: stream	stream		nextPutAll:				('cx="&lt;1p&gt;" cy="&lt;2p&gt;" ' expandMacrosWith: self box center x rounded with: self box center y rounded).</body><body package="Roassal2-Exporter-SVG">addWidth: x height: y into: stream	stream		nextPutAll:				('rx="&lt;1p&gt;" ry="&lt;2p&gt;" ' expandMacrosWith: x with: y).</body></methods><methods><class-id>Roassal2.RTSVGOval</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	self type: 'ellipse'.	self label: 'ellipse'</body></methods><methods><class-id>Roassal2.RTMultipleData</class-id> <category>readme</category><body package="Roassal2-Builder-Grapher-Obsolete">thisIsAnObsoleteClass	"please, use RTHorizontalMultipleData instead"</body></methods><methods><class-id>Roassal2.TRSolarizedTheme</class-id> <category>solarized colors</category><body package="Roassal2-Trachel-Theme">base0	^ Color fromRgb256Triplet: #(131 148 150)</body><body package="Roassal2-Trachel-Theme">base00	^ Color fromRgb256Triplet: #(101 123 131)</body><body package="Roassal2-Trachel-Theme">base01	^ Color fromRgb256Triplet: #(88 110 117)</body><body package="Roassal2-Trachel-Theme">base02	^ Color fromRgb256Triplet: #(7 54 66)</body><body package="Roassal2-Trachel-Theme">base03	^ Color fromRgb256Triplet: #(0 43 54)</body><body package="Roassal2-Trachel-Theme">base1	^ Color fromRgb256Triplet: #(147 161 161)</body><body package="Roassal2-Trachel-Theme">base2	^ Color fromRgb256Triplet: #(238 232 213)</body><body package="Roassal2-Trachel-Theme">base3	^ Color fromRgb256Triplet: #(253 246 227)</body><body package="Roassal2-Trachel-Theme">blue	^ Color fromRgb256Triplet: #(38 139 210)</body><body package="Roassal2-Trachel-Theme">cyan	^ Color fromRgb256Triplet: #(42 161 152)</body><body package="Roassal2-Trachel-Theme">green	^ Color fromRgb256Triplet: #(133 153 0)</body><body package="Roassal2-Trachel-Theme">magenta	^ Color fromRgb256Triplet: #(211 54 130)</body><body package="Roassal2-Trachel-Theme">orange	^ Color fromRgb256Triplet: #(203 75 22)</body><body package="Roassal2-Trachel-Theme">red	^ Color fromRgb256Triplet: #(220 50 47)</body><body package="Roassal2-Trachel-Theme">violet	^ Color fromRgb256Triplet: #(108 113 196)</body><body package="Roassal2-Trachel-Theme">yellow	^ Color fromRgb256Triplet: #(181 137 0)</body></methods><methods><class-id>Roassal2.TRSolarizedTheme</class-id> <category>hooks</category><body package="Roassal2-Trachel-Theme">background	self subclassResponsibility</body></methods><methods><class-id>Roassal2.RTRadar</class-id> <category>hooks</category><body package="Roassal2-Experimental">renderIn: aView	| box box2 lupa boundingBox sc |	lupa := nil.	sc := 1.	aView addAnimation: (RTNopAnimation new		waitFor: 0.5; repeat; blockToExecute: [ | ext |			sc := view canvas focusOnCenterScaled.			lupa first translateTo: view canvas extent /2.			ext := targetView canvas encompassingRectangle extent.			Transcript crShow: sc.			lupa second translateTo: view canvas extent * 				(targetView canvas camera position ) / ext.			lupa updateShape. ] ).	view canvas privateShapes: targetView canvas privateShapes.	box := RTBox new		width: [ view canvas extent x ];		height: [ view canvas extent y ];		color: Color transparent.	box2 := RTBox new		width: [ targetView canvas extent x * sc];		height: [ targetView canvas extent y * sc ];		color: Color transparent;		borderColor: Color blue.			lupa := RTGroup new.	lupa add: box element.	lupa add: box2 element.	lupa do: [ :e| 	view canvas addFixedShape: e trachelShape ].</body></methods><methods><class-id>Roassal2.RTRadar</class-id> <category>accessing</category><body package="Roassal2-Experimental">extent: newExtent	extent := newExtent.</body><body package="Roassal2-Experimental">onView: aView	targetView := aView</body></methods><methods><class-id>Roassal2.RTRadar</class-id> <category>public</category><body package="Roassal2-Experimental">build	super build.	view openInWindowSized: extent titled: 'Minimap'</body></methods><methods><class-id>Roassal2.RTRadar</class-id> <category>initialization</category><body package="Roassal2-Experimental">initialize	super initialize.	extent := 250@250.</body></methods><methods><class-id>Roassal2.RTRadar class</class-id> <category>instance creation</category><body package="Roassal2-Experimental">on: aView	^ self new onView: aView</body></methods><methods><class-id>Roassal2.RTEvolutionLine</class-id> <category>ui</category><body package="Roassal2-Builder-DSM">roassalView	| min max temp x round b ds |	self timeline		ifNil: [ ^ RTView new			add: (RTLabel elementOn: 'No applicable');			yourself ].	b := RTGrapher new.	x := self timeline size &lt; 20		ifTrue: [ 400 ] 		ifFalse: [ self timeline size / 5 * 100 ].	b extent: x @ 300.	temp := self timeline collect: #value.	min := temp min.	max := temp max.	ds := RTData new.	ds points: self timeline.	ds x: [ :assoc | self timeline indexOf: assoc ].	ds y: [ :assoc | assoc value - min ].	ds connectUsing: (RTLine new color: Color blue).	b add: ds.	b axisX		labelRotation: -30;		labelConversion: [ :n | 			n isZero				ifTrue: [ '' ]				ifFalse: [ (self timeline at: n) key ] ];		numberOfLabels: self timeline size.	round := (max - min) abs &lt; 1		ifTrue: [ 5 ]		ifFalse: [ 1 ].	b axisY		labelConversion: [ :aValue | aValue + min round: round ];		title: self value value.	self afterBlock ifNotNil: [ self afterBlock value: b.  ].		b view @ RTZoomableBoxView.	^ b</body></methods><methods><class-id>Roassal2.RTEvolutionLine</class-id> <category>accessing</category><body package="Roassal2-Builder-DSM">afterBlock	^ afterBlock</body><body package="Roassal2-Builder-DSM">afterBlock: ablockWith1arg	afterBlock := ablockWith1arg</body><body package="Roassal2-Builder-DSM">key	^ xvalue</body><body package="Roassal2-Builder-DSM">score	| score |	timeline ifNil: [ ^ nil ].	score := (timeline last value - timeline first value)/timeline first value.	^ score</body><body package="Roassal2-Builder-DSM">timeline	^ timeline</body><body package="Roassal2-Builder-DSM">timeline: anArray	anArray ifNil: [ ^ self ].	timeline := anArray</body><body package="Roassal2-Builder-DSM">value	^ yvalue</body><body package="Roassal2-Builder-DSM">xvalue	^ xvalue</body><body package="Roassal2-Builder-DSM">xvalue: anObject	xvalue := anObject</body><body package="Roassal2-Builder-DSM">yvalue	^ yvalue</body><body package="Roassal2-Builder-DSM">yvalue: anObject	yvalue := anObject</body></methods><methods><class-id>Roassal2.RTEvolutionLine</class-id> <category>printing</category><body package="Roassal2-Builder-DSM">printOn: stream	stream print: xvalue; nextPutAll: '-&gt;'; print: yvalue</body></methods><methods><class-id>Roassal2.RTEvolutionLine</class-id> <category>user interface</category><body package="Roassal2-Extentions">inspectorClasses	| ar ar2 |	ar := super inspectorClasses.	ar2 := Array new: ar size + 1.	ar2 at: 1 put: Roassal2.Roassal2Inspector.	ar doWithIndex: [:e :i | ar2 at: i + 1 put: e].	^ ar2</body></methods><methods><class-id>Roassal2.RTEvolutionLine class</class-id> <category>roassal2</category><body package="Roassal2-Extentions">roassalSelector	^ #roassalView</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>enumerating</category><body package="Roassal2-Pharo">collect: aBlock	"Answer a new matrix with transformed elements; transformations should be independent."	^self class 		rows: numberOfRows 		columns: numberOfColumns 		contents: (contents collect: aBlock)</body><body package="Roassal2-Pharo">do: aBlock	"Pass elements to aBlock one at a time in row-major order."	contents do: aBlock</body><body package="Roassal2-Pharo">includesAll: aCollection	^ contents includesAll: aCollection</body><body package="Roassal2-Pharo">includesAny: aCollection	^ contents includesAny: aCollection</body><body package="Roassal2-Pharo">indicesCollect: aBlock		| r i |	r := Array new: numberOfRows * numberOfColumns.	i := 0.	1 to: numberOfRows do: [:row |		1 to: numberOfColumns do: [:column |			r at: (i := i+1) put: (aBlock value: row value: column)]].	^ self class rows: numberOfRows columns: numberOfColumns contents: r</body><body package="Roassal2-Pharo">indicesDo: aBlock	1 to: numberOfRows do: [ :row |		1 to: numberOfColumns do: [ :column |			aBlock value: row value: column]].</body><body package="Roassal2-Pharo">indicesInject: start into: aBlock	|current|	current := start.	1 to: numberOfRows do: [ :row |		1 to: numberOfColumns do: [ :column |			current := aBlock value: current value: row value: column ] ].	^ current</body><body package="Roassal2-Pharo">reject: aBlock	self shouldNotImplement</body><body package="Roassal2-Pharo">select: aBlock	self shouldNotImplement</body><body package="Roassal2-Pharo">with: aCollection collect: aBlock	"aCollection must support #at:at: and be at least as large as the receiver."	^self withIndicesCollect: [:each :row :column |		aBlock value: each value: (aCollection at: row at: column)]</body><body package="Roassal2-Pharo">with: aCollection do: aBlock	"aCollection must support #at:at: and be at least as large as the receiver."	self withIndicesDo: [:each :row :column |		aBlock value: each value: (aCollection at: row at: column)].</body><body package="Roassal2-Pharo">with: aCollection inject: startingValue into: aBlock	"aCollection must support #at:at: and be at least as large as the receiver."	^ self withIndicesInject: startingValue into: [:value :each :row :column |			aBlock value: value value: each value: (aCollection at: row at: column)]</body><body package="Roassal2-Pharo">withIndicesCollect: aBlock		|i r|	i := 0.	r := contents shallowCopy.	1 to: numberOfRows do: [ :row |		1 to: numberOfColumns do: [ :column |			i := i+1.			r at: i put: (aBlock value: (r at: i) value: row value: column)]].	^ self class rows: numberOfRows columns: numberOfColumns contents: r</body><body package="Roassal2-Pharo">withIndicesDo: aBlock		| i |	i := 0.	1 to: numberOfRows do: [:row |		1 to: numberOfColumns do: [:column |			aBlock value: (contents at: (i := i+1)) value: row value: column]].</body><body package="Roassal2-Pharo">withIndicesInject: start into: aBlock		| i current |	i := 0.	current := start.	1 to: numberOfRows do: [ :row |		1 to: numberOfColumns do: [ :column |			current := aBlock 								value: current 								value: (contents at: (i := i+1)) 								value: row value: column ] ].	^ current</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>accessing</category><body package="Roassal2-Pharo">atRandom	"Return the contents of the receiver in a random order."	^ contents atRandom</body><body package="Roassal2-Pharo">atRandom: aGenerator	^ contents atRandom: aGenerator</body><body package="Roassal2-Pharo">columnCount	^ numberOfColumns</body><body package="Roassal2-Pharo">extent    "Answer the receiver's dimensions as point."    ^ self numberOfColumns @ self numberOfRows</body><body package="Roassal2-Pharo">identityIndexOf: anElement		^ self identityIndexOf: anElement ifAbsent: [ 0@0 ]</body><body package="Roassal2-Pharo">identityIndexOf: anElement ifAbsent: anExceptionBlock	^self rowAndColumnForIndex:		 (contents identityIndexOf: anElement ifAbsent: [^anExceptionBlock value])</body><body package="Roassal2-Pharo">indexOf: anElement	"If there are integers r, c such that (self at: r at: c) = anElement, answer some such r@c, otherwise answer 0@0. The order in which the receiver are searched is UNSPECIFIED except that it is the same as the order used by #indexOf:ifAbsent: and #readStream."	^self indexOf: anElement ifAbsent: [0@0]</body><body package="Roassal2-Pharo">indexOf: anElement ifAbsent: anExceptionBlock	"If there are integers r, c such that (self at: r at: c) = anElement, answer some such r@c, otherwise answer the result of anExceptionBlock."	^self rowAndColumnForIndex:		 (contents indexOf: anElement ifAbsent: [^ anExceptionBlock value])</body><body package="Roassal2-Pharo">numberOfColumns	^ numberOfColumns</body><body package="Roassal2-Pharo">numberOfColumns: anObject	numberOfColumns := anObject</body><body package="Roassal2-Pharo">numberOfRows	^ numberOfRows</body><body package="Roassal2-Pharo">replaceAll: oldObject with: newObject	"Replace all occurrences of oldObject with newObject in the receiver."	contents replaceAll: oldObject with: newObject</body><body package="Roassal2-Pharo">rowCount	^numberOfRows</body><body package="Roassal2-Pharo">size	^ contents size</body><body package="Roassal2-Pharo">swap: r1 at: c1 with: r2 at: c2	contents swap: (self indexForRow: r1 andColumn: c1)			 with: (self indexForRow: r2 andColumn: c2)</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>adding</category><body package="Roassal2-Pharo">add: newObject	self shouldNotImplement</body><body package="Roassal2-Pharo">difference: aCollection	"Union is in because the result is always a Set.	 Difference and intersection are out because the result is like the receiver,	 and with irregular seleection that cannot be."	self shouldNotImplement</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>converting</category><body package="Roassal2-Pharo">asArray	^ contents shallowCopy</body><body package="Roassal2-Pharo">asBag	^ contents asBag</body><body package="Roassal2-Pharo">asByteArray	^ contents asByteArray</body><body package="Roassal2-Pharo">asCharacterSet	^ contents asCharacterSet</body><body package="Roassal2-Pharo">asFloatArray	^ contents asFloatArray</body><body package="Roassal2-Pharo">asIdentitySet	^ contents asIdentitySet</body><body package="Roassal2-Pharo">asIntegerArray	^ contents asIntegerArray</body><body package="Roassal2-Pharo">asOrderedCollection	^ contents asOrderedCollection</body><body package="Roassal2-Pharo">asSet	^ contents asSet</body><body package="Roassal2-Pharo">asSortedCollection	^ contents asSortedCollection</body><body package="Roassal2-Pharo">asSortedCollection: aBlock	^ contents asSortedCollection: aBlock</body><body package="Roassal2-Pharo">asWordArray	^ contents asWordArray</body><body package="Roassal2-Pharo">readStream	"Answer a ReadStream that returns all the elements of the receiver in some UNSPECIFIED order."	^ contents readStream</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>copying</category><body package="Roassal2-Pharo">, aMatrix	"Answer a new matrix having the same number of rows as the receiver and aMatrix,	 its columns being the columns of the receiver followed by the columns of aMatrix."	|newCont newCols anArray oldCols a b c|	[numberOfRows = aMatrix numberOfRows] assert.	newCont := Array new: self size + aMatrix size.	anArray := aMatrix privateContents.	oldCols := aMatrix numberOfColumns.	newCols := numberOfColumns + oldCols.	a := b := c := 1.	1 to: numberOfRows do: [:r |		newCont replaceFrom: a to: a + numberOfColumns - 1 with: contents startingAt: b.		newCont replaceFrom: a+numberOfColumns to: a + newCols - 1 with: anArray startingAt: c.		a := a + newCols.		b := b + numberOfColumns.		c := c + oldCols].	^self class rows: numberOfRows columns: newCols contents: newCont</body><body package="Roassal2-Pharo">,, aMatrix	"Answer a new matrix having the same number of columns as the receiver and aMatrix,	 its rows being the rows of the receiver followed by the rows of aMatrix."	[numberOfColumns = aMatrix numberOfColumns] assert.	^self class 			rows: numberOfRows + aMatrix numberOfRows 			columns: numberOfColumns			contents: contents , aMatrix privateContents</body><body package="Roassal2-Pharo">postCopy	super postCopy.	contents := contents copy</body><body package="Roassal2-Pharo">shuffled	^self class rows: numberOfRows columns: numberOfColumns contents: (contents shuffled)</body><body package="Roassal2-Pharo">shuffledBy: aRandom	^self class rows: numberOfRows columns: numberOfColumns contents: (contents copy shuffleBy: aRandom)</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>testing</category><body package="Roassal2-Pharo">identityIncludes: anObject	^ contents identityIncludes: anObject</body><body package="Roassal2-Pharo">includes: anObject	^ contents includes: anObject</body><body package="Roassal2-Pharo">isSequenceable	"LIE so that arithmetic on matrices will work.	 What matters for arithmetic is not that there should be random indexing	 but that the structure should be stable and independent of the values of	 the elements.  #isSequenceable is simply the wrong question to ask."	^ true</body><body package="Roassal2-Pharo">occurrencesOf: anObject	^ contents occurrencesOf: anObject</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>trachel</category><body package="Roassal2-Pharo">anyOne	"Return one element from the receiver"	^ contents anyOne</body><body package="Roassal2-Pharo">at: rowNumber at: columnNumber	^ contents at: (self indexForRow: rowNumber andColumn: columnNumber)</body><body package="Roassal2-Pharo">at: rowNumber at: columnNumber ifInvalid: value	"If rowNumber,columnNumber is a valid index for the receiver, answer the corresponding element. Otherwise, answer value."	(rowNumber between: 1 and: numberOfRows) ifFalse: [ ^ value ].	(columnNumber between: 1 and: numberOfColumns) ifFalse: [ ^ value ].	^contents at: (rowNumber - 1) * numberOfColumns + columnNumber</body><body package="Roassal2-Pharo">at: rowNumber at: columnNumber incrementBy: value	"Add a value to the element available at rowNumber,columNumber."	^ contents at: (self indexForRow: rowNumber andColumn: columnNumber) incrementBy: value</body><body package="Roassal2-Pharo">at: rowNumber at: columnNumber put: value	"Put value at rowNumber,columnNumber"	^ contents at: (self indexForRow: rowNumber andColumn: columnNumber) put: value</body><body package="Roassal2-Pharo">atAllPut: value	"Put value as value of all the receiver elements."	contents atAllPut: value</body><body package="Roassal2-Pharo">intersection: aCollection	"Union is in because the result is always a Set.	 Difference and intersection are out because the result is like the receiver,	 and with irregular seleection that cannot be."	self shouldNotImplement</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>row/column operations</category><body package="Roassal2-Pharo">atColumn: column	|p|	p := (self indexForRow: 1 andColumn: column)-numberOfColumns.	^(1 to: numberOfRows) collect: [:row | contents at: (p := p+numberOfColumns)]</body><body package="Roassal2-Pharo">atColumn: column put: aCollection	| p |	aCollection size = numberOfRows ifFalse: [ self error: 'wrong column size' ].	p := (self indexForRow: 1 andColumn: column) - numberOfColumns.	aCollection do: [ :each | contents at: (p := p + numberOfColumns) put: each ].	^ aCollection</body><body package="Roassal2-Pharo">atRow: rowNumber	(rowNumber between: 1 and: numberOfRows)		ifFalse: [self error: '1st subscript out of range'].	^ contents 			copyFrom: (rowNumber - 1) * numberOfColumns + 1 			to: rowNumber*numberOfColumns</body><body package="Roassal2-Pharo">atRow: row put: aCollection	|p|	aCollection size = numberOfColumns ifFalse: [self error: 'wrong row size'].	p := (self indexForRow: row andColumn: 1)-1.	aCollection do: [:each | contents at: (p := p+1) put: each].	^aCollection</body><body package="Roassal2-Pharo">diagonal	"Answer (1 to: (numberOfRows min: numberOfColumns)) collect: [:i | self at: i at: i]"	|i|	i := numberOfColumns negated.	^ (1 to: (numberOfRows min: numberOfColumns)) collect: [:j | contents at: (i := i + numberOfColumns + 1)]</body><body package="Roassal2-Pharo">swapColumn: anIndex withColumn: anotherIndex	|a b|	a := self indexForRow: 1 andColumn: anIndex.	b := self indexForRow: 1 andColumn: anotherIndex.	numberOfRows timesRepeat: [		contents swap: a with: b.		a := a + numberOfColumns.		b := b + numberOfColumns].</body><body package="Roassal2-Pharo">swapRow: anIndex withRow: anotherIndex	| a b |	a := self indexForRow: anIndex andColumn: 1.	b := self indexForRow: anotherIndex andColumn: 1.	numberOfColumns timesRepeat: [		contents swap: a with: b.		a := a + 1.		b := b + 1].</body><body package="Roassal2-Pharo">transposed	[numberOfRows = numberOfColumns] assert.	^ self indicesCollect: [ :row :column | self at: column at: row ]</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>private</category><body package="Roassal2-Pharo">indexForRow: row andColumn: column	(row between: 1 and: numberOfRows)		ifFalse: [self error: '1st subscript out of range'].	(column between: 1 and: numberOfColumns)		ifFalse: [self error: '2nd subscript out of range'].	^(row-1) * numberOfColumns + column</body><body package="Roassal2-Pharo">privateContents	"Only used in #, #,, and #= so far.	 It used to be called #contents, but that clashes with Collection&gt;&gt;contents."	^ contents</body><body package="Roassal2-Pharo">rowAndColumnForIndex: index	|t|	t := index - 1.	^(t // numberOfColumns + 1)@(t \\ numberOfColumns + 1)</body><body package="Roassal2-Pharo">rows: rows columns: columns contents: anArray	[rows isInteger and: [rows &gt;= 0]] assert.	[columns isInteger and: [columns &gt;= 0]] assert.	[rows * columns = anArray size] assert.	numberOfRows := rows.	numberOfColumns := columns.	contents := anArray.	^self</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>accessing submatrices</category><body package="Roassal2-Pharo">atRows: rs columns: cs	"Answer a Matrix obtained by slicing the receiver.	 rs and cs should be sequenceable collections of positive integers."	^self class rows: rs size columns: cs size tabulate: [:r :c |		self at: (rs at: r) at: (cs at: c)]</body><body package="Roassal2-Pharo">atRows: r1 to: r2 columns: c1 to: c2	"Answer a submatrix [r1..r2][c1..c2] of the receiver."	|rd cd|	rd := r1 - 1.	cd := c1 - 1.	^self class rows: r2-rd columns: c2-cd tabulate: [:r :c| self at: r+rd at: c+cd]</body><body package="Roassal2-Pharo">atRows: r1 to: r2 columns: c1 to: c2 ifInvalid: element	"Answer a submatrix [r1..r2][c1..c2] of the receiver.	 Portions of the result outside the bounds of the original matrix are filled in with element."	|rd cd|	rd := r1 - 1.	cd := c1 - 1.	^self class rows: r2-rd columns: c2-cd tabulate: [ :r :c| self at: r+rd at: c+cd ifInvalid: element]</body><body package="Roassal2-Pharo">atRows: r1 to: r2 columns: c1 to: c2 put: aMatrix	"Set the [r1..r2][c1..c2] submatrix of the receiver	 from the [1..r2-r1+1][1..c2-c1+1] submatrix of aMatrix.	 As long as aMatrix responds to at:at: and accepts arguments in the range shown,	 we don't care if it is bigger or even if it is a Matrix at all."	|rd cd|	rd := r1 - 1.	cd := c1 - 1.	r1 to: r2 do: [:r |		c1 to: c2 do: [:c |			self at: r at: c put: (aMatrix at: r-rd at: c-cd)]].	^aMatrix</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>*collections-arithmetic</category><body package="Roassal2-Pharo">+* aCollection	"Premultiply aCollection by self.  aCollection should be an Array or Matrix.	 The name of this method is APL's +.x squished into Smalltalk syntax."	^aCollection preMultiplyByMatrix: self</body><body package="Roassal2-Pharo">preMultiplyByArray: a	"Answer a +* self where a is an Array."	numberOfRows = 1 ifFalse: [self error: 'dimensions do not conform'].	^Matrix rows: a size columns: numberOfColumns tabulate: [:row :col |		(a at: row) * (contents at: col)]</body><body package="Roassal2-Pharo">preMultiplyByMatrix: m	"Answer m +* self where m is a Matrix."	|s|	numberOfRows = m numberOfColumns ifFalse: [self error: 'dimensions do not conform'].	^ Matrix 		rows: m numberOfRows 		columns: numberOfColumns 		tabulate: [:row :col |			s := 0.			1 to: numberOfRows do: [:k | s := (m at: row at: k) * (self at: k at: col) + s].			s ]</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	contents := nil.	numberOfColumns := nil.	numberOfRows := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>comparing</category><body package="Roassal2-Pharo">= aMatrix	^ aMatrix class == self class		and: [ aMatrix numberOfRows = numberOfRows				and: [ aMatrix numberOfColumns = numberOfColumns 					and: [ aMatrix privateContents = contents ] ] ]</body><body package="Roassal2-Pharo">hash	"I'm really not sure what would be a good hash function here.	 The essential thing is that it must be compatible with #=, and	 this satisfies that requirement."	^contents hash</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>removing</category><body package="Roassal2-Pharo">remove: anObject ifAbsent: anExceptionBlock	self shouldNotImplement</body><body package="Roassal2-Pharo">removeAll	self shouldNotImplement</body></methods><methods><class-id>Roassal2.Matrix</class-id> <category>printing</category><body package="Roassal2-Pharo">printOn: aStream	aStream nextPutAll: '('.	(1 to: self numberOfRows) 		do: [ :r | 				(self atRow: r) 					do: [ :each | aStream nextPutAll: each printString ] 					separatedBy: [ aStream space ]]		separatedBy: [ aStream cr ].	aStream nextPutAll: ' )'.</body><body package="Roassal2-Pharo">storeOn: aStream	aStream nextPut: $(; nextPutAll: self class name;		nextPutAll: ' rows: '; store: numberOfRows;		nextPutAll: ' columns: '; store: numberOfColumns;		nextPutAll: ' contents: '; store: contents;		nextPut: $)</body></methods><methods><class-id>Roassal2.Matrix class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body><body package="Roassal2-Pharo">new: dimension	"Answer a dimension*dimension matrix."	^ self rows: dimension columns: dimension</body><body package="Roassal2-Pharo">new: dimemsion element: element	"Answer a dimemsion*dimemsion matrix with all elements set to element."	^ self rows: dimemsion columns: dimemsion element: element</body><body package="Roassal2-Pharo">new: dimension tabulate: aTwoArgumentBlock	"Answer a dimension*dimension matrix where it at: i at: j is aBlock value: i value: j."	^ self rows: dimension columns: dimension tabulate: aTwoArgumentBlock</body><body package="Roassal2-Pharo">rows: rowNumber columns: columnNumber	"Create a Matrix of rowNUmber rows and columnNumber columns."	^ self 		rows: rowNumber 		columns: columnNumber 		contents: (Array new: rowNumber*columnNumber)</body><body package="Roassal2-Pharo">rows: rowNumber columns: columnNumber element: element	"Create a Matrix of rowNUmber rows and columnNumber columns filled with element."	^ self 		rows: rowNumber 		columns: columnNumber		contents: ((Array new: rowNumber * columnNumber) atAllPut: element; yourself)</body><body package="Roassal2-Pharo">rows: rowNumber columns: columnNumber tabulate: aTwoArgumentBlock	"Answer a new Matrix of the given dimensions where	 result at: i at: j is aTwoArgumentBlock value: i value: j"	|a i|	a := Array new: rowNumber*columnNumber.	i := 0.	1 to: rowNumber do: [:row |		1 to: columnNumber do: [:column |			a at: (i := i + 1) put: (aTwoArgumentBlock value: row value: column)]].	^ self rows: rowNumber columns: columnNumber contents: a</body></methods><methods><class-id>Roassal2.Matrix class</class-id> <category>special instance creation</category><body package="Roassal2-Pharo">columnVector: aCollection	"Create a matrix of one column having aCollection as contents"	^ self rows: aCollection size columns: 1 contents: aCollection asArray shallowCopy</body><body package="Roassal2-Pharo">diagonal: aCollection	|r i|	r := self zeros: aCollection size.	i := 0.	aCollection do: [:each | i := i+1. r at: i at: i put: each].	^r</body><body package="Roassal2-Pharo">identity: n	| r |	r := self zeros: n.	1 to: n do: [ :i | r at: i at: i put: 1 ].	^ r</body><body package="Roassal2-Pharo">ones: dimension	"Create a squared matrix of dimension full of 1"	^ self new: dimension element: 1</body><body package="Roassal2-Pharo">rowVector: aCollection	"Create a matrix of one row having aCollection as contents"	^self rows: 1 columns: aCollection size contents: aCollection asArray shallowCopy</body><body package="Roassal2-Pharo">zeros: dimension	"Create a Matrix of dimensionxdimemsion"	^ self new: dimension element: 0</body></methods><methods><class-id>Roassal2.Matrix class</class-id> <category>private</category><body package="Roassal2-Pharo">rows: rowNumber columns: columnNumber contents: contents	"Private! Creates a Matrix of the given size with an adequate contents."	^ self new rows: rowNumber columns: columnNumber contents: contents</body></methods><methods><class-id>Roassal2.RTMultiLinearColorCached</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizer">level: f	cache size &gt;= sizeBeforeReset ifTrue: [ self resetCache ].	^ cache at: f ifAbsentPut: [ super level: f ]</body></methods><methods><class-id>Roassal2.RTMultiLinearColorCached</class-id> <category>initialization</category><body package="Roassal2-ColorNormalizer">initialize	super initialize.	self resetCache.	sizeBeforeReset := 800</body></methods><methods><class-id>Roassal2.RTMultiLinearColorCached</class-id> <category>actions</category><body package="Roassal2-ColorNormalizer">resetCache	cache := Dictionary new</body></methods><methods><class-id>Roassal2.RTPalette class</class-id> <category>palettes</category><body package="Roassal2-ColorNormalizer">c1	^ Array 		with: (Color r: 225 g: 206 b: 122 range: 255) 		with: (Color r: 251 g: 255 b: 185 range: 255)		with: (Color r: 253 g: 214 b: 146 range: 255)		with: (Color r: 236 g: 115 b: 87 range: 255)		with: (Color r: 117 g: 79 b: 68 range: 255)</body><body package="Roassal2-ColorNormalizer">c10	^ Array		with: (Color r: 51 g: 92 b: 103 range: 255)		with: (Color r: 255 g: 243 b: 176 range: 255)		with: (Color r: 224 g: 159 b: 62 range: 255)		with: (Color r: 158 g: 42 b: 43 range: 255)		with: (Color r: 84 g: 11 b: 14 range: 255)</body><body package="Roassal2-ColorNormalizer">c11	^ Array		with: (Color r: 30 g: 21 b: 42 range: 255)		with: (Color r: 78 g: 103 b: 102 range: 255)		with: (Color r: 90 g: 177 b: 187 range: 255)		with: (Color r: 165 g: 200 b: 130 range: 255)		with: (Color r: 247 g: 221 b: 114 range: 255)</body><body package="Roassal2-ColorNormalizer">c12	^ Array		with: (Color r: 204 g: 88 b: 3 range: 255)		with: (Color r: 226 g: 113 b: 29 range: 255)		with: (Color r: 255 g: 149 b: 5 range: 255)		with: (Color r: 255 g: 182 b: 39 range: 255)		with: (Color r: 255 g: 201 b: 113 range: 255)</body><body package="Roassal2-ColorNormalizer">c13	^ Array		with: (Color r: 123 g: 223 b: 242 range: 255)		with: (Color r: 178 g: 247 b: 239 range: 255)		with: (Color r: 239 g: 247 b: 246 range: 255)		with: (Color r: 247 g: 214 b: 224 range: 255)		with: (Color r: 242 g: 181 b: 212 range: 255)</body><body package="Roassal2-ColorNormalizer">c14	^ Array		with: (Color r: 254 g: 147 b: 140 range: 255)		with: (Color r: 237 g: 175 b: 151 range: 255)		with: (Color r: 196 g: 151 b: 146 range: 255)		with: (Color r: 173 g: 145 b: 163 range: 255)		with: (Color r: 157 g: 145 b: 163 range: 255)</body><body package="Roassal2-ColorNormalizer">c2	^ Array		with: (Color r: 58 g: 96 b: 110 range: 255)		with: (Color r: 96 g: 123 b: 125 range: 255)		with: (Color r: 130 g: 142 b: 130 range: 255)		with: (Color r: 170 g: 174 b: 142 range: 255)		with: (Color r: 224 g: 224 b: 224 range: 255)</body><body package="Roassal2-ColorNormalizer">c3	^ Array		with: (Color r: 239 g: 217 b: 206 range: 255)		with: (Color r: 222 g: 192 b: 241 range: 255)		with: (Color r: 183 g: 156 b: 237 range: 255)		with: (Color r: 149 g: 127 b: 239 range: 255)		with: (Color r: 113 g: 97 b: 239 range: 255)</body><body package="Roassal2-ColorNormalizer">c4	^ Array		with: (Color r: 36 g: 123 b: 160 range: 255)		with: (Color r: 112 g: 193 b: 179 range: 255)		with: (Color r: 178 g: 219 b: 191 range: 255)		with: (Color r: 243 g: 255 b: 189 range: 255)		with: (Color r: 255 g: 22 b: 84 range: 255)</body><body package="Roassal2-ColorNormalizer">c5	^ Array		with: (Color r: 220 g: 220 b: 221 range: 255)		with: (Color r: 197 g: 195 b: 198 range: 255)		with: (Color r: 70 g: 73 b: 76 range: 255)		with: (Color r: 76 g: 92 b: 104 range: 255)		with: (Color r: 25 g: 133 b: 161 range: 255)</body><body package="Roassal2-ColorNormalizer">c6	^ Array		with: (Color r: 216 g: 226 b: 220 range: 255)		with: (Color r: 255 g: 229 b: 217 range: 255)		with: (Color r: 255 g: 202 b: 212 range: 255)		with: (Color r: 244 g: 172 b: 183 range: 255)		with: (Color r: 157 g: 129 b: 137 range: 255)</body><body package="Roassal2-ColorNormalizer">c7	^ Array		with: (Color r: 224 g: 251 b: 252 range: 255)		with: (Color r: 194 g: 223 b: 227 range: 255)		with: (Color r: 157 g: 180 b: 192 range: 255)		with: (Color r: 92 g: 107 b: 115 range: 255)		with: (Color r: 37 g: 50 b: 55 range: 255)</body><body package="Roassal2-ColorNormalizer">c8	^ Array		with: (Color r: 151 g: 249 b: 249 range: 255)		with: (Color r: 164 g: 222 b: 249 range: 255)		with: (Color r: 193 g: 224 b: 247 range: 255)		with: (Color r: 207 g: 186 b: 225 range: 255)		with: (Color r: 197 g: 159 b: 201 range: 255)</body><body package="Roassal2-ColorNormalizer">c9	^ Array		with: (Color r: 237 g: 238 b: 201 range: 255)		with: (Color r: 221 g: 231 b: 199 range: 255)		with: (Color r: 191 g: 216 b: 189 range: 255)		with: (Color r: 152 g: 201 b: 163 range: 255)		with: (Color r: 119 g: 191 b: 163 range: 255)</body></methods><methods><class-id>Roassal2.RTEnglishDictionary</class-id> <category>hooks</category><body package="Roassal2-Builder-NameCloud">unnecessaryWords	^ #(	'the' 'to' 'I' 'a' 'and' 'it' 'of' 'is' 'that' 'in'	'for' 'this' 'have' 'with' 'be' 'or' 'was' 'on'	'there' 'what' 'are' 'can' 'about' 'some' 'do' 'but' 'when' 'am' 'from' 'know' 'how' 'would' 'like' 'any' 'get' 'an' 'using' 'as' 'by' 'not' 'they' 'which' 		'into' 'through' 'my' 'used' 'at' 'function'  'just' 'you' 'its' 'me' 'way' 'if' 'so' 'then' 'Im' 'use'  'anyone' 'has' 'does' 'all' 'run' 'sample' 'also' 'different' 'want' 'find' 'other'  'enough' 'So' 'something' 'one' 'been' 'could' 'How' 'trying' 'able' 'see' 'had' 'no' 'new' 'very' 'another' 'few'  'The' 'point' 'make' 'out' 'What' 'executed' 'were' 'looking' 'will' 'here'  'without'  'same' 'dont' 'But' 'started' 'Or' 'better' 'go' 'recently' 'going' 'up' 'following' 'call' 'seems' 'address' 'after'  'kind' 'only' 'add' 'machine' 'them' 'perform' 'piece' 'jump' 'where'  'under' 'really'  'possible' 'break' 'around' 'set'  'body'  'your' 'approach' 'several' 'And' 'Is' 'static' 'learning' 'may' 'value' 'time' 'looks' 'various' 'gets' 'x' 'specific' 'interested' 'named' 'more' 'over'  'pointer' 'encountered' 'certain' 'particular' 'reading' 'step' 'itself' 'Does' 'basic' 'tried' 'someone' 'increment' 'learned' 'come' 'suggest' 'having' 'dealing' 'load' 'should' 'E' 'Word' 'detailed' 'target'  'identify' 'real' 'detect' 'lot' 'because' 'case' 'Id'		)</body></methods><methods><class-id>Roassal2.RTIdentityLineDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">render	 	| min max |	min := builder getPixelPositionOf: builder minX @ builder minY.	max := builder getPixelPositionOf: builder maxX @ builder maxY.	self lineFrom: min to: max</body></methods><methods><class-id>Roassal2.RTDirectedLine</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	offset := 0.5</body></methods><methods><class-id>Roassal2.RTDirectedLine</class-id> <category>hooks</category><body package="Roassal2-Shapes">pointsFrom: from To: to	| point mid   |	mid := (to * (1 - offset)) + (from * offset).	point := from + ((mid - from) rightRotated).	"(to - from) abs / 2"	^ Array with: from with: point with: to."	| point1 point2 mid   |	mid := ((to x + from x) / 2) @ ((to y + from y) / 2).	point1 := from rotateBy: (Float pi /16) about: mid.	point2 := from rotateBy: (15*(Float pi /16)) about: mid.		^ {from.	point1.	point2.	to}"</body><body package="Roassal2-Shapes">trachelShapeClass	^ TRBezierShape</body></methods><methods><class-id>Roassal2.RTDirectedLine</class-id> <category>rendering</category><body package="Roassal2-Shapes">updateFor: edge trachelShape: trachelShape	trachelShape points: (self pointsFrom: (attachPoint startingPointOf: edge) To: (attachPoint endingPointOf: edge)).	trachelShape color: (self colorFor: edge).	trachelShape width: (self widthFor: edge).	trachelShape resetPath</body></methods><methods><class-id>Roassal2.RTDirectedLine</class-id> <category>accessing</category><body package="Roassal2-Shapes">offset: anOffsetAsFloat	"Argument is a float between 0.0 and 1.0. Its values means where the curve is positioned to.	lesser the argument, closer to the starting point"	offset := anOffsetAsFloat</body></methods><methods><class-id>Roassal2.RTEdgeBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Common">elements: someElements	self toElements: someElements.	self fromElements: someElements</body><body package="Roassal2-Builder-Common">fromElements	fromElements ifNil: [ ^ self view elements ].	^ fromElements</body><body package="Roassal2-Builder-Common">fromElements: someElements	fromElements := someElements</body><body package="Roassal2-Builder-Common">fromObjects	"Return the list of objects considered as targets for the edges"	^ self fromElements collect: #model</body><body package="Roassal2-Builder-Common">fromObjects: someObjectsOrABlock	"Identify the elements we are considering for the edge building process. Note that the view has to be set beforehand."	self assert: [ viewHasBeenManuallySet ] description: 'A view has to be set, please use #view:'.	 	(someObjectsOrABlock isCollection and: [ someObjectsOrABlock isSymbol not ])		ifTrue: [ self fromElements: (view elementsFromModels: someObjectsOrABlock) ]		ifFalse: [ self fromElements: (view elements select: [ :el | someObjectsOrABlock rtValue: el model ]) ]</body><body package="Roassal2-Builder-Common">label: twoArgBlock	"Method useful to label edges. The argument is a two arg block that accept the starting object model and the ending object model. The block has to return a String that will be used to label the edge.		Here is an example:	| b edges |	b := RTMondrian new.	b shape circle size: 10; color: Color red.	b nodes: (1 to: 20).	b edges 		moveBehind; 		highlightable;		label: [ :from :to | from asString, '&gt;', to asString ];		connectFrom: [ :v | v // 2 ].	b layout cluster.	b	"	^ self label: twoArgBlock fontSize: TRLabelShape defaultFontSize</body><body package="Roassal2-Builder-Common">label: twoArgBlock fontSize: fontSizeAsBlockOrValue	"Method useful to label edges. The argument is a two arg block that accept the starting object model and the ending object model. The block has to return a String that will be used to label the edge.		Here is an example:	| b edges |	b := RTMondrian new.	b shape circle size: 10; color: Color red.	b nodes: (1 to: 20).	b edges 		moveBehind; 		highlightable;		label: [ :from :to | from asString, '&gt;', to asString ] fontSize: 5;		connectFrom: [ :v | v // 2 ].	b layout cluster.	b	"	actions add: [ :edge | 		| lbl lblEl |		lbl := twoArgBlock value: edge from model value: edge to model.		lblEl := RTLabel new height: fontSizeAsBlockOrValue; elementOn: lbl.		view add: lblEl.		TRConstraint stick: lblEl between: edge from and: edge to ]</body><body package="Roassal2-Builder-Common">labelElement: oneArgBlock	"Method useful to label edges. The argument is a one arg block that accept the edge. The block has to return a String that will be used to label the edge.		Here is an example:	| b edges |	b := RTMondrian new.	b shape circle size: 10; color: Color red.	b nodes: (1 to: 20).	b edges 		moveBehind; 		highlightable;		labelElement: [ :anEdge | anEdge from model asString, '&gt;', anEdge to model asString ];		connectFrom: [ :v | v // 2 ].	b layout cluster.	b	"	^ self labelElement: oneArgBlock fontSize: TRLabelShape defaultFontSize</body><body package="Roassal2-Builder-Common">labelElement: oneArgBlock fontSize: fontSizeAsBlockOrValue	"Method useful to label edges. The argument is a one arg block that accept the edge. The block has to return a String that will be used to label the edge.		Here is an example:	| b edges |	b := RTMondrian new.	b shape circle size: 10; color: Color red.	b nodes: (1 to: 20).	b edges 		moveBehind; 		highlightable;		labelElement: [ :anEdge | anEdge from model asString, '&gt;', anEdge to model asString ] fontSize: 5;		connectFrom: [ :v | v // 2 ].	b layout cluster.	b	"	actions add: [ :edge | 		| lbl lblEl |		lbl := oneArgBlock value: edge.		lblEl := RTLabel new height: fontSizeAsBlockOrValue; elementOn: lbl.		view add: lblEl.		TRConstraint stick: lblEl between: edge from and: edge to ]</body><body package="Roassal2-Builder-Common">moveBehind	"Set the builder as such that edge that are built and added in the view _behind_ the extremities of each edges"	shouldMoveBehind := true</body><body package="Roassal2-Builder-Common">object: anObject	^ self objects: (Array with: anObject)</body><body package="Roassal2-Builder-Common">objects: someObjectsOrABlock	"Identify the elements we are considering for the edge building process. Note that the view has to be set beforehand."	self assert: [ viewHasBeenManuallySet ] description: 'A view has to be set, please use #view:'.	self toObjects: someObjectsOrABlock.	self fromObjects: someObjectsOrABlock.</body><body package="Roassal2-Builder-Common">toElements	toElements ifNil: [ ^ self view elements ].	^ toElements</body><body package="Roassal2-Builder-Common">toElements: someElements	toElements := someElements</body><body package="Roassal2-Builder-Common">toObject: anObject	^ self toObjects: (Array with: anObject)</body><body package="Roassal2-Builder-Common">toObjects	"Return the list of objects considered as sources for the edges"	^ self toElements collect: #model</body><body package="Roassal2-Builder-Common">toObjects: someObjectsOrABlock	"Identify the elements we are considering for the edge building process. Note that the view has to be set beforehand."	self assert: [ viewHasBeenManuallySet ] description: 'A view has to be set, please use #view:'.	 	(someObjectsOrABlock isCollection and: [ someObjectsOrABlock isSymbol not ])		ifTrue: [ self toElements: (view elementsFromModels: someObjectsOrABlock) ]		ifFalse: [ self toElements: (view elements select: [ :el | someObjectsOrABlock rtValue: el model ]) ]</body><body package="Roassal2-Builder-Common">view: aView	viewHasBeenManuallySet := true.	super view: aView</body></methods><methods><class-id>Roassal2.RTEdgeBuilder</class-id> <category>public repetition</category><body package="Roassal2-Builder-Common">allowRepetition	allowRepetition := true</body><body package="Roassal2-Builder-Common">shouldAllowRepetition	^ allowRepetition</body></methods><methods><class-id>Roassal2.RTEdgeBuilder</class-id> <category>public associations</category><body package="Roassal2-Builder-Common">useAssociation: assoc	"assoc have to be between model objects"	self assert: [ assoc isKindOf: Association ] description: 'Please, provide an association instead'.	self useAssociations: (Array with: assoc)</body><body package="Roassal2-Builder-Common">useAssociations: associations	"associations have to be between model objects"		| edges fromElement toElement |	edges := RTGroup new.	associations do: [ :assoc |		fromElement := self fromElements elementFromModel: assoc key.		toElement := self toElements elementFromModel: assoc value.		(fromElement notNil and: [ toElement notNil ])			ifTrue: [ edges add: (self edgeFrom: fromElement to: toElement) ] ].	self moveBehindIfNecessary: edges.	^ edges</body><body package="Roassal2-Builder-Common">useElementAssociations: associationsBetweenElements	associationsBetweenElements do: [ :assoc |		self edgeFrom: assoc key to: assoc value ]</body></methods><methods><class-id>Roassal2.RTEdgeBuilder</class-id> <category>public using source</category><body package="Roassal2-Builder-Common">source: objects connectFrom: fromblock to: toBlock	"Define some edges from objects that are not part of the view	nbOfNodes := 40.nbOfRandomEdges := 40.nodes := 1 to: nbOfNodes.edges := (1 to: nbOfRandomEdges) 				collect: [ :notUsed | nodes atRandom -&gt; nodes atRandom ].b := RTMondrian new.b shape circle color: (Color black alpha: 0.5).b nodes: nodes.b shape line color: (Color gray alpha: 0.3).b edges	source: edges connectFrom: #key to: #value.b layout force.b	"	| assocs allObjects |	self assert: [ objects notNil ] description: 'Cannot provide a nil value as the source'.	self assert: [ objects isCollection ] description: 'Need to provide a collection as the source'.	allObjects := Set new.		assocs := objects collect: [ :o | 		| f t |		f := fromblock rtValue: o.		t := toBlock rtValue: o.		allObjects add: f; add: t.		f -&gt; t ].	self objects: allObjects asArray.	^ self useAssociations: assocs</body><body package="Roassal2-Builder-Common">source: objects connectFrom: fromblock toAll: toBlock	"Define some edges from objects that are not part of the view	nbOfNodes := 40.nbOfRandomEdges := 40.nodes := 1 to: nbOfNodes.edges := (1 to: nbOfRandomEdges) 				collect: [ :notUsed | nodes atRandom -&gt; {nodes atRandom . nodes atRandom} ].b := RTMondrian new.b shape circle color: (Color black alpha: 0.5).b nodes: nodes.b shape line color: (Color gray alpha: 0.3).b edges	source: edges connectFrom: #key toAll: #value.b layout force.b	"	| assocs allObjects |	allObjects := Set new.	assocs := objects flatCollect: [ :o | 		| cc |		cc := toBlock rtValue: o.		cc collect: [ :ccc | 			| t |			t := fromblock rtValue: o.			allObjects add: t; add: ccc.			t -&gt; ccc ] ].	self objects: allObjects asArray.	^ self useAssociations: assocs</body><body package="Roassal2-Builder-Common">source: objects connectFromAll: fromBlock to: toBlock	"Define some edges from objects that are not part of the view	nbOfNodes := 40.nbOfRandomEdges := 40.nodes := 1 to: nbOfNodes.edges := (1 to: nbOfRandomEdges) 				collect: [ :notUsed | {nodes atRandom . nodes atRandom} -&gt; nodes atRandom ].b := RTMondrian new.b shape circle color: (Color black alpha: 0.5).b nodes: nodes.b shape line color: (Color gray alpha: 0.3).b edges	source: edges connectFromAll: #key to: #value.b layout force.b	"	| assocs allObjects |	allObjects := Set new.	assocs := objects flatCollect: [ :o | 		| cc |		cc := fromBlock rtValue: o.		cc collect: [ :ccc | 			| t |			t := toBlock rtValue: o.			allObjects add: ccc; add: t.			ccc -&gt; t ] ].	self objects: allObjects asArray.	^ self useAssociations: assocs</body></methods><methods><class-id>Roassal2.RTEdgeBuilder</class-id> <category>public</category><body package="Roassal2-Builder-Common">connectFrom: aBlockOrASymbol	^ self connectFrom: aBlockOrASymbol to: [ :each | each ]</body><body package="Roassal2-Builder-Common">connectFrom: aFromBlock to: aBlockOrASymbol	| toElement fromElement |	self resetCreatedEdges.	self fromElements copy		do: [ :e | 			fromElement := self fromElements elementFromModel: (aFromBlock rtValue: e model).			toElement := self toElements elementFromModel: (aBlockOrASymbol rtValue: e model).			toElement ifNotNil: [ self createEdgeIfNecessaryFrom: fromElement to: toElement ] ].	self moveBehindIfNecessary: createdEdges.	^ createdEdges</body><body package="Roassal2-Builder-Common">connectFrom: aFromBlock toAll: aBlockOrASymbol	| fromElement tes |	self resetCreatedEdges.	self fromElements copy do: [ :e | 		fromElement := self fromElements elementFromModel: (aFromBlock rtValue: e model).		tes := self toElements elementsFromModels: (aBlockOrASymbol rtValue: e model).		tes ifNotNil: [ 			tes do: [ :toE | 				self createEdgeIfNecessaryFrom: fromElement to: toE ] ] ].	self moveBehindIfNecessary: createdEdges.	^ createdEdges</body><body package="Roassal2-Builder-Common">connectFromAll: aFromBlockOrSymbol	^ self connectFromAll: aFromBlockOrSymbol to: [ :each | each ]</body><body package="Roassal2-Builder-Common">connectFromAll: aFromBlockOrSymbol to: aBlockOrASymbol	| toElement tfromElements |	self resetCreatedEdges.	self fromElements copy do: [ :e | 		tfromElements := self fromElements elementsFromModels: (aFromBlockOrSymbol rtValue: e model). 		toElement := self toElements elementFromModel: (aBlockOrASymbol rtValue: e model).		tfromElements ifNotNil: [ 			tfromElements do: [ :fromElement | 				self createEdgeIfNecessaryFrom: fromElement to: toElement ] ] ].	self moveBehindIfNecessary: createdEdges.	^ createdEdges</body><body package="Roassal2-Builder-Common">connectTo: aBlockOrASymbol	^ self connectFrom: [ :each | each ] to: aBlockOrASymbol</body><body package="Roassal2-Builder-Common">connectToAll: aBlockOrASymbol	"Should this method use connectFrom:ToAll: ?????"	| tmptoElements |	self resetCreatedEdges.	self fromElements copy do: [ :e | 		tmptoElements := self toElements elementsFromModels: (aBlockOrASymbol rtValue: e model).		tmptoElements ifNotNil: [ 			tmptoElements do: [ :toE | 				self createEdgeIfNecessaryFrom: e to: toE ] ] ].	self moveBehindIfNecessary: createdEdges.	^ createdEdges</body></methods><methods><class-id>Roassal2.RTEdgeBuilder</class-id> <category>private - utility</category><body package="Roassal2-Builder-Common">createEdgeIfNecessaryFrom: fromElement to: toElement	(self shouldCreateEdgeFrom: fromElement to: toElement)		ifTrue: [ createdEdges add: (self edgeFrom: fromElement to: toElement) ]</body><body package="Roassal2-Builder-Common">edgeFrom: source to: target 	"source and target are elements"	| edge |	edge := super edgeFrom: source to: target.	shouldNotBeUsedInLayout ifFalse: [ edge notUseInLayout ].	self processEdge: edge.	^ edge</body><body package="Roassal2-Builder-Common">linkElements: someElements	"Link the first element to the second, the second to the third and so on"	| head |	head := someElements first.	someElements allButFirst do: [ :e |		self edgeFrom: head to: e.		head := e.		]</body><body package="Roassal2-Builder-Common">moveBehindIfNecessary: someEdges	shouldMoveBehind ifFalse: [ ^ self ].	someEdges pushBack</body><body package="Roassal2-Builder-Common">processEdge: anEdge	actions do: [ :action | action value: anEdge ]</body><body package="Roassal2-Builder-Common">resetCreatedEdges	createdEdges := RTGroup new</body></methods><methods><class-id>Roassal2.RTEdgeBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Common">initialize	super initialize.	self noRepetition.	shouldMoveBehind := false.	shouldNotBeUsedInLayout := true.		"The view has to be explicitely set by the end-user"	viewHasBeenManuallySet := false.		actions := OrderedCollection new</body><body package="Roassal2-Builder-Common">noRepetition	allowRepetition := false</body></methods><methods><class-id>Roassal2.RTEdgeBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Common">highlightable	"Make the edges highlightable.	Here is an example:		| b edges |	b := RTMondrian new.	b shape circle size: 10; color: Color red.	b nodes: (1 to: 20).	b edges 		moveBehind; 		highlightable;		connectFrom: [ :v | v // 2 ].	b layout cluster.	b	"	actions add: [ :edge | 		edge @ RTHighlightable ]</body></methods><methods><class-id>Roassal2.RTEdgeBuilder</class-id> <category>configuration</category><body package="Roassal2-Builder-Common">notUseInLayout	shouldNotBeUsedInLayout := false</body></methods><methods><class-id>Roassal2.RTEdgeBuilder</class-id> <category>testing</category><body package="Roassal2-Builder-Common">shouldCreateEdgeFrom: fromElement to: toElement	"Return true if an edge has to be created"	fromElement == toElement ifTrue: [ ^ false ].	(fromElement isNil or: [ toElement isNil ]) ifTrue: [ ^ false ].	allowRepetition ifFalse: [ ^ fromElement outgoingEdges noneSatisfy: [ :edge | edge to == toElement ] ].	^ true</body></methods><methods><class-id>Roassal2.RTResizable</class-id> <category>hooks</category><body package="Roassal2-Interactions-Resize">addCursorEventsOn: anElement corner: aCorner	anElement when: TRMouseLeave do: [ :evt | TRPlatform current showTemporaryCursor: nil ].	anElement when: TRMouseEnter do: [ :evt | TRPlatform current showTemporaryCursor: (self cursorForCorner: aCorner) ]</body><body package="Roassal2-Interactions-Resize">attachHandle: aHandle toCorner: aCorner	"Make sure constraint is setup BEFORE resize callback is attached, otherwise it triggers very expensive resize updates."	(RTConstraint on: aHandle background: element)		perform: aCorner;		border;		stick.	aHandle		addCallback: (TRTranslationCallback block: [ :shape :step | self callbackFor: aHandle corner: aCorner ]).	self addCursorEventsOn: aHandle corner: aCorner</body><body package="Roassal2-Interactions-Resize">basicCallbackFor: aHandle corner: aCorner	| newExtent oppositeCornerPosition distance oppositeCorner |	"An absolute distance the handle has moved from it's assigned corner."	distance := aHandle position		- ((RTResizableRectangle cornerDirectionFor: aCorner) abs * (element encompassingRectangle perform: aCorner)).	"Resizing with RTElement&gt;&gt;extent: changes the element in all directions, so we have to move it back in the opposite direction of the movement. (So when resizing by topRight corner, then bottomLeft should be fixed in place."	distance := self negate: distance forCorner: aCorner.	newExtent := element extent + distance max: self minSize.	oppositeCorner := RTResizableRectangle oppositeCornerFor: aCorner.	oppositeCornerPosition := element encompassingRectangle perform: oppositeCorner.	element trachelShape		doWithoutCallbacks: [ 			element extent: newExtent.			self translateCorner: oppositeCorner of: element to: oppositeCornerPosition ].	"This is to trigger repositioning of subelements etc."	element trachelShape triggerCallbacksForStep: 0</body><body package="Roassal2-Interactions-Resize">callbackFor: aHandle corner: aCorner	"The resize is disabled during it's operation to prevent dependent repositioning between the element and its handles."	self enabled		ifFalse: [ ^ self ].	self disable.	self basicCallbackFor: aHandle corner: aCorner.	self enable</body><body package="Roassal2-Interactions-Resize">connectAllHandles	handles		withIndexDo: [ :each :i | 			| to |			to := handles at: i % handles size + 1.			element view				add:					(RTLine new						color: ((Color gray) alpha: 0.5);						edgeFrom: each to: to) ]</body><body package="Roassal2-Interactions-Resize">connectWithView: aView	(aView hasAttribute: self className)		ifFalse: [ self setupView: aView ].	aView		when: TRResizeCanceled		do: [ :event | 			event shape = element trachelShape				ifFalse: [ self removeHandles ] ]</body><body package="Roassal2-Interactions-Resize">removeEveryonesHandles	element view announce: TRResizeCanceled new</body><body package="Roassal2-Interactions-Resize">removeHandles	handles ifEmpty: [ ^ self ].	handles do: #remove.	handles := #().	element view signalUpdate</body><body package="Roassal2-Interactions-Resize">setupView: aView	aView canvas eventOverseer ifNil: [ aView canvas eventOverseer: TRAnnouncingOverseer new ].	aView canvas eventOverseer		when: TRMouseLeftClick		do: [ :evt | aView announcer announce: (TRResizeCanceled shape: evt shape) ].	aView attributeAt: self className put: true</body><body package="Roassal2-Interactions-Resize">showHandles	handles ifNotEmpty: [ ^ self ].	handles := RTResizableRectangle cornersAndSides		collect: [ :corner | 			| handle |			handle := self createHandle.			self attachHandle: handle toCorner: corner.			handle ].	self connectAllHandles.	element view addAll: handles.	element view signalUpdate</body></methods><methods><class-id>Roassal2.RTResizable</class-id> <category>initialization</category><body package="Roassal2-Interactions-Resize">initialize	super initialize.	handles := #().	enabled := false</body><body package="Roassal2-Interactions-Resize">initializeElement: anElement	"postpone initialization if the element is not yet added to the view"	anElement view		ifNil: [ anElement addCallback: (TRAddedCallback block: [ :evt | self lazyInitializeElement: anElement ]) ]		ifNotNil: [ self lazyInitializeElement: anElement ]</body><body package="Roassal2-Interactions-Resize">lazyInitializeElement: anElement	element := anElement.	element when: TRMouseLeftClick do: [ :evt | self showHandles ].	element when: TRMouseDragStart do: [ :evt | self disable ].	element when: TRMouseDragEnd do: [ :evt | self enable ].	element addCallback: (TRRemoveCallback block: [ :evt | self removeHandles ]).	self connectWithView: (view ifNil: [ element view ]).	self enable</body></methods><methods><class-id>Roassal2.RTResizable</class-id> <category>accessing</category><body package="Roassal2-Interactions-Resize">cursorForCorner: aCorner	^ Cursor perform: ('resize' , aCorner capitalized) asSymbol</body><body package="Roassal2-Interactions-Resize">disable	^ enabled := false</body><body package="Roassal2-Interactions-Resize">enable	enabled := true</body><body package="Roassal2-Interactions-Resize">enabled	^ enabled</body><body package="Roassal2-Interactions-Resize">minSize	"This is the minimal size to which you can resize an element"	^ 20 @ 20</body><body package="Roassal2-Interactions-Resize">view: aView	view := aView</body></methods><methods><class-id>Roassal2.RTResizable</class-id> <category>translating</category><body package="Roassal2-Interactions-Resize">negate: aPoint forCorner: aCorner	^ aPoint * (RTResizableRectangle cornerDirectionFor: aCorner) negated</body><body package="Roassal2-Interactions-Resize">translateCorner: aCorner of: anElement to: aPosition	| selector |	selector := ('translate' , aCorner capitalized , 'Of:to:') asSymbol.	RTDirectLayoutTranslator new perform: selector with: anElement with: aPosition</body></methods><methods><class-id>Roassal2.RTResizable</class-id> <category>instance creation</category><body package="Roassal2-Interactions-Resize">createHandle	| handle |	handle := RTBox new		size: 6;		color: Color black;		element.	handle @ RTDraggable.	^ handle</body></methods><methods><class-id>Roassal2.RTResizable class</class-id> <category>example</category><body package="Roassal2-Interactions-Resize">example	| v g el edge |	v := RTView new.	g := RTGroup new		add: (RTBox new			size: 100;			borderColor: Color black;			borderWidth: 1;			element);		add: (RTRoundedBox new			size: 50;			borderRadius: 20;			borderColor: Color black;			borderWidth: 1;			element);		add: (RTEllipse new			width: 100;			height: 30;			borderColor: Color black;			element);		yourself.	el := RTBox new		size: 50;		color: Color black;		element.	edge := RTLine new		color: Color black;		attachPoint: RTBorderAttachPoint new;		edgeFrom: g first to: el.	v addAll: g.	v		add: el;		add: edge.	"add empty event to prevent event propagation to the view (and thus test event overseer)"	el when: TRMouseLeftClick do: [ :evt |  ].	edge when: TRMouseLeftClick do: [ :evt |  ].	RTGridLayout new		gapSize: 50;		on: v elements.	v elements @ RTDraggable.	g @ RTResizable.	v @ RTZoomableView.	^ v</body></methods><methods><class-id>Roassal2.TRVisual</class-id> <category>focus control</category><body package="Roassal2-Visualworks">hasFocus	^ self widgetState hasKeyboardFocus</body><body package="Roassal2-Visualworks">hasFocus: aBoolean	(self widgetState hasKeyboardFocus = aBoolean) ifFalse: [		self widgetState hasKeyboardFocus: aBoolean.		self invalidate ].</body><body package="Roassal2-Visualworks">loseFocus	self triggerEvent: #losingFocus.	self hasFocus: false</body><body package="Roassal2-Visualworks">takeFocus	self triggerEvent: #gettingFocus.	self hasFocus: true</body></methods><methods><class-id>Roassal2.TRVisual</class-id> <category>controller accessing</category><body package="Roassal2-Visualworks">defaultControllerClass	"Answer the class of the default controller for the receiver."	"Subclasses should redefine defaultControllerClass if the class of the 	default controller is not Controller."	^TRController</body></methods><methods><class-id>Roassal2.TRVisual</class-id> <category>CGK-extensions</category><body package="Roassal2-Visualworks">extent	^ self bounds extent.</body><body package="Roassal2-Visualworks">extent: anExtent	trachelCanvas extent: anExtent.	surface := AthensCairoSurface extent: anExtent</body><body package="Roassal2-Visualworks">height	^ self bounds height</body><body package="Roassal2-Visualworks">width	^ self bounds width</body></methods><methods><class-id>Roassal2.TRVisual</class-id> <category>changing</category><body package="Roassal2-Visualworks">changed	self invalidate.</body></methods><methods><class-id>Roassal2.TRVisual</class-id> <category>accessing</category><body package="Roassal2-Visualworks">canvas: aTrachelCanvas	trachelCanvas := aTrachelCanvas.	surface := aTrachelCanvas canvas.</body><body package="Roassal2-Visualworks">changedView	self getController.	surface := AthensCairoSurface extent: self extent.	controller := TRController visual: self.	trachelCanvas morph: self.	self trachelCanvas extent: self extent.	self invalidate.</body><body package="Roassal2-Visualworks">globalOrigin	^ self localPointToGlobal: self bounds origin.</body><body package="Roassal2-Visualworks">imageForm	"hack"	^ self</body><body package="Roassal2-Visualworks">openInWindow	| window |	window := TRApplicationModel new.	window drawing: self.	TRApplicationModel openOn: window.	^ window</body><body package="Roassal2-Visualworks">scaledToSize: newExtent	|  scale canvas |	newExtent = self extent ifTrue: [^self].	scale := (newExtent x / self width min: newExtent y / self height) asPoint.		canvas := Pixmap extent: newExtent.	canvas graphicsContext newCairoContextWhile: [:acc | 		acc scale: scale.		acc sourceSurface: surface cairoSurface.		acc paint. ].	^ canvas</body><body package="Roassal2-Visualworks">topLeft	^ 0@0</body><body package="Roassal2-Visualworks">trachelCanvas	^ trachelCanvas</body></methods><methods><class-id>Roassal2.TRVisual</class-id> <category>initialize-release</category><body package="Roassal2-Visualworks">createSurface	surface := AthensCairoSurface extent: (500@500).</body><body package="Roassal2-Visualworks">initialize	super initialize.	self createSurface.	shouldRefresh := false.	self widgetState isTabStop: true.	^self</body></methods><methods><class-id>Roassal2.TRVisual</class-id> <category>displaying</category><body package="Roassal2-Visualworks">displayOn: aGraphicsContext		"aGraphicsContext paint: trachelCanvas color.	aGraphicsContext displayRectangle: self bounds."	"The drawing has to be done when a change in the shapes occured or when there is an animation."	surface drawDuring: [ :aCC |		aCC setPaint: trachelCanvas color;			drawShape: self bounds.				"We display the elements that are subject to the camera"		aCC			translateBy: (self bounds extent / 2) asFloatPoint;			    scale: trachelCanvas camera scale asFloat;			translateBy: trachelCanvas camera position negated asFloatPoint.		trachelCanvas shapes do: [ :trachelShape |			trachelShape drawOn: aCC.		].				"We display the elements that are _NOT_ subject to the camera"		aCC identityMatrix.		trachelCanvas fixedShapes do: [ :trachelShape |			trachelShape drawOn: aCC.		].	].	"aGraphicsContext newCairoContextWhile:[:aCC| 		aCC sourceSurface: surface cairoSurface offset: self bounds origin.		aCC paint]."	aGraphicsContext displayImage: surface asImage at: self bounds origin</body><body package="Roassal2-Visualworks">drawOnMockCanvas	"This method is used to trigger all the rendering in a temporary FormCanvas. This method is useful when a bug happens when rendering. Such situation are difficult to debug to the multi-threading and low level graphical primitive. The method #drawOnMockCanvas helps addressing this.Here is an example:v := RTView new.es := RTBox elementsOn: (1 to: 10).v addAll: es.RTGridLayout on: es.v canvas buildMorph drawOnMockCanvas	"	self displayOn: (FormCanvas extent: 500 @ 500)</body></methods><methods><class-id>Roassal2.TRVisual</class-id> <category>bounds accessing</category><body package="Roassal2-Visualworks">bounds: rect	self extent: rect extent.</body></methods><methods><class-id>Roassal2.RTDominanceTreeLayout</class-id> <category>hook-private</category><body package="Roassal2-Layouts">computeChildrenFor: aNode	^ self childrenWithHighestNestingLevelFor: aNode</body></methods><methods><class-id>Roassal2.RTCircleAttachPoint</class-id> <category>private</category><body package="Roassal2-AttachPoint">attachPointFor: anEdge from: fromRect to: toRect	| angle x y fromPoint toPoint offsetShift radius vv |	(anEdge shape isMemberOf: RTArcLine)		ifTrue: [ ^ self curvedAttachPointFor: anEdge from: fromRect to: toRect ].	offsetShift := self offsetNormalFor: anEdge.	fromPoint := fromRect center + offsetShift.	toPoint := toRect center + offsetShift.	radius := fromRect width * 0.5.	angle := (RTLineSegment from: fromPoint to: toPoint) angleInRad ifNil: [ 2 ].	(toPoint dist: fromPoint) &lt; (toRect width * 0.5 - radius)		ifTrue: [ angle := angle + Float pi ].	"fromCircle is inside toCircle"	offsetShift isZero		ifFalse:			[ vv := offsetShift r / radius.			(vv &lt; -1.0 or: [ vv &gt; 1.0 ])				ifTrue: [ radius := 1.0 ]				ifFalse: [ radius := radius * vv arcSin cos ] ].	"recalculates radius based on offset"	x := radius * angle cos + fromPoint x.	y := radius * angle sin + fromPoint y.	^ x @ y</body><body package="Roassal2-AttachPoint">curvedAttachPointFor: anEdge from: fromRect to: toRect	| line normal alpha distance srcMidNormal dstMidNormal center radius srcCircle arcCircle |	srcCircle := RTCircleGeometry center: fromRect center radius: fromRect width / 2.	line := RTLineSegment from: anEdge from position to: anEdge to position.	line length = 0		ifTrue: [ ^ srcCircle center + (0 @ srcCircle radius) ].	distance := anEdge shape distanceFor: anEdge.	normal := self normalFor: line sized: distance.	alpha := (distance abs / (line length / 2)) arcTan * 2.	srcMidNormal := self		normalFor: (RTLineSegment from: line from to: normal to)		sized: distance.	dstMidNormal := self		normalFor: (RTLineSegment from: line to to: normal to)		sized: distance.	center := srcMidNormal intersectLines: dstMidNormal.	radius := center dist: line from.	arcCircle := RTCircleGeometry center: center radius: radius.	^ (srcCircle intersectCircle: arcCircle) detectMin: [ :each | each dist: normal to ]</body><body package="Roassal2-AttachPoint">normalFor: aLine sized: aLength	| mid v |	mid := aLine pointForBalance: 0.5.	v := aLine vector.	^ RTLineSegment from: mid to: mid + (aLength * v normal)</body></methods><methods><class-id>Roassal2.RTCircleAttachPoint</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">basicEndingPointOf: anEdge	^ self attachPointFor: anEdge from: anEdge to encompassingRectangle to: anEdge from encompassingRectangle</body><body package="Roassal2-AttachPoint">basicStartingPointOf: anEdge	^ self attachPointFor: anEdge from: anEdge from encompassingRectangle to: anEdge to encompassingRectangle</body></methods><methods><class-id>Roassal2.RTBezier3Line</class-id> <category>accessing</category><body package="Roassal2-Shapes">controlElement	^ controlElement</body><body package="Roassal2-Shapes">controlElement: anElement	controlElement := anElement</body></methods><methods><class-id>Roassal2.RTBezier3Line</class-id> <category>private</category><body package="Roassal2-Shapes">controlPointFor: cp1 and: cp3	| mid dx dy l vector vectorNorm vectorNormInverse distanceFromMidPoint |	mid := (cp1 + cp3)/2.	dx := cp3 x - cp1 x.	dy := cp3 y - cp1 y.	l := ((dx*dx) + (dy* dy)) sqrt asFloat.	vector := dx asFloat @ dy asFloat.	(vector isZero and: [ l isZero ])		ifTrue: [ ^ 0@0 ].	vectorNorm := vector/l.		vectorNormInverse := vectorNorm y negated @ vectorNorm x.	"distanceFromMidpoint :=  (0.5 - pairEdges.length / 2 + i) * stepSize."	distanceFromMidPoint := -20.	^ mid + (vectorNormInverse * distanceFromMidPoint).</body><body package="Roassal2-Shapes">pointsFor: edge	| cp1 cp2 cp3 |	cp1 := attachPoint startingPointOf: edge.	cp3 := attachPoint endingPointOf: edge.	cp2 := controlElement		ifNil: [ self controlPointFor: cp1 and: cp3 ]		ifNotNil: [ controlElement isPoint				ifTrue: [ controlElement ]				ifFalse: [ controlElement position ] ].				^ Array with: cp1 with: cp2 with: cp3</body><body package="Roassal2-Shapes">pointsForOneElement: edge	| cp1 cp3 e w h |	e := edge to encompassingRectangle.	w := e width/2.	h := e height/2.	cp1 := e rightCenter.	cp3 := e topCenter.	^ OrderedCollection new 		add:cp1;		add: cp1 + (w @0);		add: (cp1 x + w)@cp3 y;		add: (cp1 x + w)@(cp3 y - h);		add: (cp1 x)@(cp3 y - h);		add: (cp1 x-w)@(cp3 y - h);		add: cp3;		yourself.</body></methods><methods><class-id>Roassal2.RTBezier3Line</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeClass	^ TRBezier3Shape</body><body package="Roassal2-Shapes">trachelShapeFor: anEdge	| trachelShape |	(self isSelfLoopAllowedFor: anEdge) ifFalse: [ 		^ nil ].	trachelShape := (anEdge from = anEdge to		ifTrue: [ TRBezierShape ]		ifFalse: [ self trachelShapeClass ]) new.	self updateFor: anEdge trachelShape: trachelShape.	^ trachelShape</body></methods><methods><class-id>Roassal2.RTBezier3Line</class-id> <category>rendering</category><body package="Roassal2-Shapes">updateFor: edge trachelShape: trachelShape	| points |	trachelShape isNil		ifTrue: [ ^ self ].	points := edge from = edge to		ifTrue: [ self pointsForOneElement: edge ]		ifFalse: [ self pointsFor: edge ].		trachelShape points: points.	trachelShape color: (self colorFor: edge).	trachelShape width: (self widthFor: edge).	trachelShape resetPath.	^ trachelShape</body></methods><methods><class-id>Roassal2.RTVisible</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	visibleBlock := [ :anElement | "do nothing " ].	invisibleBlock := [ :anElement | "do nothing " ].</body></methods><methods><class-id>Roassal2.RTVisible</class-id> <category>utility</category><body package="Roassal2-Interactions">doInvisibleBlockOn: element	invisibleBlock rtValue: element</body><body package="Roassal2-Interactions">doUpdate: element	| isVisible |	isVisible := element trachelShape isVisible.	isVisible ~= (element attributeAt: #isVisible)		ifTrue: [ 			isVisible				ifTrue: [ self doVisibleBlockOn: element ]				ifFalse: [ self doInvisibleBlockOn: element ].			element attributeAt: #isVisible put: isVisible ].</body><body package="Roassal2-Interactions">doVisibleBlockOn: element	visibleBlock rtValue: element</body><body package="Roassal2-Interactions">prepareElement: element	element attributeAt: #isVisible put: nil</body></methods><methods><class-id>Roassal2.RTVisible</class-id> <category>accessing</category><body package="Roassal2-Interactions">invisibleBlock	^ invisibleBlock</body><body package="Roassal2-Interactions">invisibleBlock: aOneArgBlock	"The block is evaluated against the element"	invisibleBlock := aOneArgBlock</body><body package="Roassal2-Interactions">visibleBlock	^ visibleBlock</body><body package="Roassal2-Interactions">visibleBlock: aOneArgBlock	"The block is evaluated against the element"	visibleBlock := aOneArgBlock</body></methods><methods><class-id>Roassal2.RTVisible</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	| c |	self prepareElement: element.	self doUpdate: element.		c := TRTranslationCallback new.	c block: [ :aShape :aStep | self doUpdate: element ].	element trachelShape addCallback: c.	element view canvas camera addCallback: c.</body></methods><methods><class-id>Roassal2.TRResizeCanvasEvent</class-id> <category>accessing</category><body package="Roassal2-Trachel-Events">newExtent	^ newExtent</body><body package="Roassal2-Trachel-Events">newExtent: aPoint	newExtent := aPoint</body><body package="Roassal2-Trachel-Events">oldExtent	^ oldExtent</body><body package="Roassal2-Trachel-Events">oldExtent: aPoint	oldExtent := aPoint</body></methods><methods><class-id>Roassal2.RTTextLines</class-id> <category>enumerating</category><body package="Roassal2-Builder-TextBuilder">linesDo: aBlockClosure 	^ self do: aBlockClosure</body></methods><methods><class-id>Roassal2.RTFilledCircle class</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRFilledCircleHeadShape</body></methods><methods><class-id>Roassal2.RTSVGRectangle</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">box	^ box</body><body package="Roassal2-Exporter-SVG">box: anObject	box := anObject</body><body package="Roassal2-Exporter-SVG">element: anElement box: aRectangle fillColor: aColor borderWidth: anInteger borderColor: anotherColor	self element: anElement.	self box: aRectangle.	self fillColor: aColor.	self strokeWidth:  anInteger.	self strokeColor: anotherColor</body><body package="Roassal2-Exporter-SVG">height	height ifNil: [ height := self box height round: 2 ].	^ height</body><body package="Roassal2-Exporter-SVG">height: anObject	height := anObject</body><body package="Roassal2-Exporter-SVG">width	width ifNil: [ width := self box width round: 2 ].	^ width</body><body package="Roassal2-Exporter-SVG">width: anObject	width := anObject</body></methods><methods><class-id>Roassal2.RTSVGRectangle</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addOn: stream using: aSVGVisitor	aSVGVisitor names at: self element put: self id.	self openDef: stream.	self addPosition: stream.	self addWidth: (self width) height: (self height) into: stream.	self startStyle: stream.	self addFillColor: stream.	self addFillOpacity: stream.	((self strokeWidth) &gt; 0 and: (self strokeColor) ~= nil)		ifTrue: [ 			self addStrokeColor: stream.			self addStrokeWidth: stream ].		self closeTag: stream.	self startClass: stream.	self addContainedInteractions: aSVGVisitor.	self closeTag: stream.	self addExternalInteractions: aSVGVisitor.	self closeDef: stream.</body><body package="Roassal2-Exporter-SVG">addPosition: stream	stream		nextPutAll:				('x="&lt;1p&gt;" y="&lt;2p&gt;" ' expandMacrosWith: (self box topLeft x round: 2) with: (self box topLeft y round: 2)).</body></methods><methods><class-id>Roassal2.RTSVGRectangle</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	self type: 'rect'.	self label: 'rect'</body></methods><methods><class-id>Roassal2.RTSimilarityMatrix</class-id> <category>visualization</category><body package="Roassal2-Builder-SimilarityMatrix">colorForElement: elt	^ Color gray: (1 - elt model similarity)</body><body package="Roassal2-Builder-SimilarityMatrix">elementOn: pair For: view	| elt |	elt := RTElement on: pair.	elt + (RTBox new		color: (self colorForElement: elt);		extent: self defaultExtent).	elt @ (RTPopup new text: [self popupTextFor: elt]).	elt when: TRMouseClick do: [:event | self action: pair ].	^ elt</body><body package="Roassal2-Builder-SimilarityMatrix">elementOn: pair forView: view andStack: stack	| elt |	elt := (RTElement on: pair ).	elt + (RTBox new		color: (self colorForElement: elt);		extent: self defaultExtent	).	elt @ (RTPopup new text: [self popupTextFor: elt] ).	elt when: TRMouseClick do: [:event | self action: pair ]."	elt forward: ROMouseDragging."	^ elt</body><body package="Roassal2-Builder-SimilarityMatrix">gridSize	^ elements size</body><body package="Roassal2-Builder-SimilarityMatrix">gridView	| view |	view := RTView new.	view addAll: (pairs collect: [ :pair | self elementOn: pair For: view ]).	RTGridLayout new 		gapSize: 0;		lineItemsCount: self gridSize;		on: view elements.	view @ RTDraggableView.	"	zoomIn := self zoomInButtonOn: view.	zoomOut := self zoomOutButtonOn: view."	"	ROHorizontalLineLayout on: { zoomIn . zoomOut }."	"view @ (ROMiniMap new targetView: stack)."	view open.</body><body package="Roassal2-Builder-SimilarityMatrix">viewMatrix	"display the matrix view"	| view |	view := RTView new.	view @ RTDraggableView.	view addAll:		(pairs collect: [ : pair | 			self				elementOn: pair 				For: view ]).	RTGridLayout new 		gapSize: 0;		lineItemsCount: self gridSize;		on: view elements.	view @ RTDraggableView.		"	view @ (ROMiniMap new targetView: stack)."	view open.</body></methods><methods><class-id>Roassal2.RTSimilarityMatrix</class-id> <category>defaults</category><body package="Roassal2-Builder-SimilarityMatrix">defaultExtent	^ 5@5</body></methods><methods><class-id>Roassal2.RTSimilarityMatrix</class-id> <category>initialize-release</category><body package="Roassal2-Builder-SimilarityMatrix">on: aCollection by: similarity	^ self on: aCollection by: similarity withAction: nil</body><body package="Roassal2-Builder-SimilarityMatrix">on: aCollection by: similarity withAction: aCallBack	"initialize model"	elements := aCollection.	pairs := OrderedCollection new.	action := aCallBack.	elements		do: [ : lhs |			elements do: [ : rhs | | pair |				pair := (RTComparison of: lhs with: rhs by: similarity).				pairs add: pair ] ]		displayingProgress: 'comparing elements ...'.</body></methods><methods><class-id>Roassal2.RTSimilarityMatrix</class-id> <category>interactions</category><body package="Roassal2-Builder-SimilarityMatrix">action: aComparison	action		ifNotNil: [ action value: aComparison lhs value: aComparison rhs ]</body><body package="Roassal2-Builder-SimilarityMatrix">popupTextFor: elt	^ elt model lhs printString, String cr,		elt model rhs printString, String cr,		'similarity = ', elt model similarity printString</body></methods><methods><class-id>Roassal2.RTSimilarityMatrix class</class-id> <category>examples</category><body package="Roassal2-Builder-SimilarityMatrix">comparingMethodSourceCode	"Compare the source code of all the subclasses of ROShape"	"Black dot means the two classes are identical"	"White dot means the two classes are very different"	^ RTSimilarityMatrix new		on: RTShape withAllSubclasses		by: [ :class1 :class2 |			| sourceCode1 sourceCode2 s |			"We get the source code of class1"			s := WriteStream on: String new.			class1 fileOutOn: s moveSource: false toFile: 0.			sourceCode1 := s contents.						"We get the source code of class2"			s := WriteStream on: String new.			class2 fileOutOn: s moveSource: false toFile: 0.			sourceCode2 := s contents.						(sourceCode1 lines intersection: sourceCode2 lines) size			/ ((1 max: (sourceCode1 lines union: sourceCode2 lines) size) + 1) "NB penalty for small methods"			];		gridView</body><body package="Roassal2-Builder-SimilarityMatrix">comparingWordsBetweenText	"methods are similar if they send the same messages; large methods are top-left"	^ RTSimilarityMatrix new		on: #('hello world' 'welcome to our world' 'hello means bonjour' 'bye bye')		by: [ :m1 : m2 |			(m1 substrings intersection: m2 substrings) size			/ ((1 max: (m1 substrings union: m2 substrings) size) + 1) "NB penalty for small methods"			];		gridView</body><body package="Roassal2-Builder-SimilarityMatrix">demo1	^ RTSimilarityMatrix new		on: (1 to: 50)		by: [ :a :b |			(a + b) odd				ifTrue: [ 1 ]				ifFalse: [ 0 ]			];		viewMatrix</body><body package="Roassal2-Builder-SimilarityMatrix">demo2	"show which Collection subclasses have a similar number of methods"	^ RTSimilarityMatrix new		on: (Collection allSubclasses			sort: [:a :b | a methods size &lt; b methods size])		by: [ :classA : classB | |a b|			a := classA methods size.			b := classB methods size.			((a min: b) / ((b max: a) max: 1)) asFloat ]		withAction: [:classA :classB |			TRPlatform current browseClass: classA.			TRPlatform current browseClass: classB. ] ;		viewMatrix</body><body package="Roassal2-Builder-SimilarityMatrix">demo3	"methods are similar if they send the same messages; large methods are top-left"	^ RTSimilarityMatrix new		on: ((Set allSubclasses flatCollect: #methods)					sort: [ :m1 :m2 | m1 size &gt; m2 size ])		by: [ :m1 : m2 |			(m1 messages intersection: m2 messages) size			/ ((1 max: (m1 messages union: m2 messages) size) + 1) "NB penalty for small methods"			]		withAction: [:m1 : m2 |			m1 browse.			m2 browse.			];		viewMatrix</body></methods><methods><class-id>Roassal2.RTTreeMapBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-TreeMap">createView	^ super createView @ RTDraggableView.</body><body package="Roassal2-Builder-TreeMap">renderIn: aView	super renderIn: aView.	self layoutElements.</body></methods><methods><class-id>Roassal2.RTTreeMapBuilder</class-id> <category>customizing</category><body package="Roassal2-Builder-TreeMap">depthShadedBorder	| normalizer |	normalizer := RTNColorLinearNormalizer 		inContext: self elements 		withCommand: [ :e | e attributes at: #depth ] 		lowColor: Color gray		highColor: Color white darker.	self elements do: [ :e | e trachelShape strokePaint: (normalizer rtValue: e) ].</body><body package="Roassal2-Builder-TreeMap">withShadedFramesFromColor: fromColor toColor: toColor	| normalizer |		normalizer := RTNColorLinearNormalizer 		inContext: self elements 		withCommand: [ :e | weight rtValue: e ] 		lowColor: fromColor highColor: toColor.	self elements do: [ :e | e trachelShape strokePaint: (normalizer rtValue: e ) ].</body></methods><methods><class-id>Roassal2.RTTreeMapBuilder</class-id> <category>layout</category><body package="Roassal2-Builder-TreeMap">highestAspectRatioFor: row remainingSpace: remainingSpace	| sum areas minArea maxArea |	areas := row collect: [ :e | e attributes at: #area ].	sum := areas sum.	maxArea := areas max.	minArea := areas min.	((remainingSpace &lt;=0) or: [minArea &lt;= 0])		ifTrue: [ ^ SmallInteger maxVal ]		ifFalse: [ ^ ((((remainingSpace * remainingSpace) * maxArea) / (sum * sum))  max: ((sum * sum) / (minArea * (remainingSpace * remainingSpace)))) ]</body><body package="Roassal2-Builder-TreeMap">layoutElements	self squarify: rootNodes		inRectangle: (RTRectangleTreeMap origin: 0@0 extent: self extent).</body><body package="Roassal2-Builder-TreeMap">layoutRow: row	| container |	container := rectangle currentSubrectangle.	(container width &gt;= container height)		ifTrue: [ self layoutVerticalRow: row ]		ifFalse: [ self layoutHorizontalRow: row ].	self layoutChildrenOfRow: row.	self prepareNextRectangleAfterRow: row.</body><body package="Roassal2-Builder-TreeMap">squarify: children currentRow: row remainingSpace: remainingSpace	| firstElement remainingChildren |	firstElement := children first.	(row isEmpty or: [		| oldRatio newElementRatio |		oldRatio := self highestAspectRatioFor: row remainingSpace: remainingSpace.		newElementRatio := self highestAspectRatioFor: (row, (Array with: firstElement)) remainingSpace: remainingSpace.		oldRatio &gt;= newElementRatio ] ) 	ifTrue: [ 		remainingChildren := children allButFirst.		(remainingChildren isEmpty) ifTrue: [ self layoutRow: (row, (Array with: firstElement)) ]		ifFalse: [ 			self 				squarify: remainingChildren				currentRow: (row, (Array with: firstElement) )				remainingSpace: remainingSpace ]	 ] ifFalse: [ 		self layoutRow: row.		self 			squarify: children			currentRow: (OrderedCollection new)			remainingSpace: self getRemainingSpace.	 ].	firstElement pushBack</body><body package="Roassal2-Builder-TreeMap">squarify: children inRectangle: aTreeRectangle	| elementsToLayout |	children isEmpty ifTrue: [ ^ self  ].	self rectangle: aTreeRectangle.	elementsToLayout := self prepareElementsForLayout: children inRectangle: aTreeRectangle.	self 		squarify: elementsToLayout		currentRow: OrderedCollection new		remainingSpace: (aTreeRectangle width min: aTreeRectangle height).</body></methods><methods><class-id>Roassal2.RTTreeMapBuilder</class-id> <category>default-values</category><body package="Roassal2-Builder-TreeMap">defaultExtent	^ 500@500.</body><body package="Roassal2-Builder-TreeMap">defaultInset	^ 4</body></methods><methods><class-id>Roassal2.RTTreeMapBuilder</class-id> <category>layout-utils</category><body package="Roassal2-Builder-TreeMap">getRemainingSpace	^ self rectangle shortestSide</body><body package="Roassal2-Builder-TreeMap">layoutChildrenOfRow: row	| oldCanvas|	oldCanvas := self rectangle veryDeepCopy.	row do: [ :each | | children |		children := each attributes at: self childrenKey ifAbsent: [ #() ].		self 			squarify: children 			inRectangle: (RTRectangleTreeMap fromContainerBounds: (each position extent: each extent) withInset: self inset) ].		self rectangle: oldCanvas.</body><body package="Roassal2-Builder-TreeMap">layoutHorizontalRow: row 	| container totalWidth areaToLayout height |	container := self rectangle currentSubrectangle.	totalWidth := container width.		areaToLayout := row inject: 0 into: [ :s :e | s + (e attributes at: #area) ].	height := areaToLayout / totalWidth.	row do: [ :each | each extent: (((each attributes at: #area) / height) @ height) ].		self translateElementsHorizontally: row in: container.</body><body package="Roassal2-Builder-TreeMap">layoutVerticalRow: row	| container totalHeight areaToLayout width |	container := rectangle currentSubrectangle.	totalHeight := container height.	areaToLayout := row inject: 0 into: [ :s :e | s+ (e attributes at: #area) ].	width := areaToLayout /totalHeight.	row do: [ :each | each extent: (width @ ( (each attributes at: #area) / width)) ].	self translateElementsVertically: row in: container.</body><body package="Roassal2-Builder-TreeMap">prepareElementsForLayout: elms inRectangle: rec	| elementsArea viewArea area |	elms isEmpty ifTrue: [ ^ elms ].	elementsArea := elms inject: 0 into: [ :s :e | 		s + (weight rtValue: e) ].		viewArea := rec width * rec height.	elms do: [ :e|		area := ((viewArea * (weight rtValue: e))/elementsArea) asFloat.		e attributes at: #area put: area. ].		^ elms</body><body package="Roassal2-Builder-TreeMap">prepareNextRectangleAfterRow: row	| nextRect |	nextRect := self rectangle currentSubrectangle computeRemainingSubrectangleFrom: row.	self rectangle addSubrectangle: nextRect</body><body package="Roassal2-Builder-TreeMap">translateElementsHorizontally: row in: container	| currentPoint |	currentPoint := container origin.	row do: [ :each |		each translateTo: currentPoint + (each extent / 2).		currentPoint := currentPoint translateBy: ((each width) @ 0 ).	].</body><body package="Roassal2-Builder-TreeMap">translateElementsVertically: row in: container	| currentPoint |	currentPoint := container origin.	row do: [ :each | 		each translateBy: currentPoint+(each extent/2).		currentPoint := currentPoint translateBy: (0@(each height))]</body></methods><methods><class-id>Roassal2.RTTreeMapBuilder</class-id> <category>accesing</category><body package="Roassal2-Builder-TreeMap">extent	^ extent</body><body package="Roassal2-Builder-TreeMap">extent: anObject	extent := anObject.</body><body package="Roassal2-Builder-TreeMap">inset	^ inset</body><body package="Roassal2-Builder-TreeMap">inset: anObject	inset := anObject</body><body package="Roassal2-Builder-TreeMap">popup	^ self interaction popup.</body><body package="Roassal2-Builder-TreeMap">rectangle	^ rectangle.</body><body package="Roassal2-Builder-TreeMap">rectangle: anObject	rectangle := anObject</body></methods><methods><class-id>Roassal2.RTTreeMapBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-TreeMap">initialize	super initialize.	self shape rectangle 		fillColor: Color white;		borderColor: Color gray.	self interaction popup; draggable.	inset := self defaultInset.	extent := self defaultExtent.</body></methods><methods><class-id>Roassal2.TRNoShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">center	0@0</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	^ 0@0 corner: 0@0</body><body package="Roassal2-Trachel-Shapes">height	^ 0</body><body package="Roassal2-Trachel-Shapes">position	^ 0 @ 0</body><body package="Roassal2-Trachel-Shapes">width	^ 0</body></methods><methods><class-id>Roassal2.TRNoShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-Shapes">computePath	"do nothing"</body></methods><methods><class-id>Roassal2.TRNoShape</class-id> <category>actions</category><body package="Roassal2-Trachel-Shapes">addedIn: aCanvas	"Do nothing"</body><body package="Roassal2-Trachel-Shapes">setAsFixed	"Not much to do"</body><body package="Roassal2-Trachel-Shapes">translateBy: aPoint	"do nothing"</body><body package="Roassal2-Trachel-Shapes">translateTo: aPoint	"do nothing"</body></methods><methods><class-id>Roassal2.TRNoShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	"do nothing"</body></methods><methods><class-id>Roassal2.TRNoShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitNoShape: self</body></methods><methods><class-id>Roassal2.TRNoShape class</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">instance	instance ifNil: [ instance := self new ].	^ instance</body></methods><methods><class-id>Roassal2.RTAreaBuilder</class-id> <category>initialization</category><body package="Roassal2-Experimental">initialize	super initialize.	self x: #x.	y0 := 0.	y1 := #y.	defined := true.	tension := 0.7.	lvar := 'L'.	self interpolator: RTLinearPathBuilder new.	self shape shape: RTSVGPath new.	self shape path: [ :e | self pathFor: e ].	dataBlock := #yourself</body></methods><methods><class-id>Roassal2.RTAreaBuilder</class-id> <category>public</category><body package="Roassal2-Experimental">data: aCollection	data := aCollection</body><body package="Roassal2-Experimental">dataBlock: ablock	"ablock should return an array of objects(in the best case an array of points)"	dataBlock := ablock</body><body package="Roassal2-Experimental">defined: aBlock	defined := aBlock</body><body package="Roassal2-Experimental">interpolator: anObject	interpolate := anObject.	interpolateReverse := (anObject isKindOf: RTLinePathBuilder ) 		ifTrue: [ 			lvar := interpolate closed 				ifTrue: [ 'M' ] 				ifFalse: ['L'].			 interpolate reverse. ]		ifFalse: [ interpolate ].</body><body package="Roassal2-Experimental">x0: aBlock	x0 := aBlock</body><body package="Roassal2-Experimental">x1: aBlock	x1 := aBlock</body><body package="Roassal2-Experimental">x: aBlock	x0 := x1 := aBlock</body><body package="Roassal2-Experimental">y0: aBlock	y0 := aBlock</body><body package="Roassal2-Experimental">y1: aBlock	y1 := aBlock</body><body package="Roassal2-Experimental">y: aBlock	y0 := y1 := aBlock</body></methods><methods><class-id>Roassal2.RTAreaBuilder</class-id> <category>computed accessing</category><body package="Roassal2-Experimental">pathFor: element	| segments points0 points1 n datapoints d x y fx0 fy0 fx1 fy1 segment |	datapoints := dataBlock rtValue: element model.	n := datapoints size.	segments :=OrderedCollection new.	points0 := OrderedCollection new.	points1 := OrderedCollection new.	fx0 := x0.	fy0 := y0.	x := y := nil.	fx1 := x0 == x1 ifTrue: [ [ x ] ] ifFalse: [ x1 ].	fy1 := y0 == y1 ifTrue: [ [ y ] ] ifFalse: [ y1 ].	segment := [ 		segments 			add: 'M'; 			add: (interpolate rtValue: (points1-&gt;tension) );			add: lvar;			add: (interpolateReverse rtValue: (points0 reverse -&gt; tension));			add: 'Z'. ].		1 to: n do: [ :i | 		d := datapoints at: i.		(defined rtValue: d) 			ifTrue: [ 				x := fx0 rtValue: d.				y := fy0 rtValue: d.				points0 add: x@y.				points1 add: (fx1 rtValue: d)@ (fy1 rtValue: d) ] 			ifFalse: [ 				points0 ifNotEmpty: [ 					segment value.					points0 := OrderedCollection new.					points1 := OrderedCollection new. ] ]		].	points0 ifNotEmpty: [ segment value. ].	^ segments inject: ''  into: [ :str :s | str, s ].</body></methods><methods><class-id>Roassal2.RTAreaBuilder</class-id> <category>hooks</category><body package="Roassal2-Experimental">renderIn: aView	| elements |	elements := self shape elementsOn: data.	aView addAll: elements.	self interaction setUpElements: elements</body></methods><methods><class-id>Roassal2.RTAreaBuilder</class-id> <category>as yet unclassified</category><body package="Roassal2-Experimental">rtValue: e	^ self pathFor: e</body></methods><methods><class-id>Roassal2.RTShapedObject</class-id> <category>accessing trachel</category><body package="Roassal2-Core">color	^ trachelShape color</body><body package="Roassal2-Core">color: aColor 	^ trachelShape color: aColor</body></methods><methods><class-id>Roassal2.RTShapedObject</class-id> <category>testing</category><body package="Roassal2-Core">isFixed	"True if the element is added in the trachel canvas as a fixed shape. 	If this is the case, then it will remain fixed when drag and dropping the view"	^ isFixed</body></methods><methods><class-id>Roassal2.RTShapedObject</class-id> <category>adding</category><body package="Roassal2-Core">+ aRTShape	"Add a Roassal shape, class or instance of it. Not that a Trachel cannot be given as argument"	"Using + between two shapes is used to compose shapes"	self addShape: aRTShape instance</body><body package="Roassal2-Core">addShape: aRTShape	(shape class == RTNoShape)  		ifTrue: [	shape := aRTShape instance ]		ifFalse: [ shape := RTCompositeShape with: shape with: aRTShape ].	trachelShape := shape trachelShapeFor: self</body><body package="Roassal2-Core">addedIn: aView	self subclassReponsibility</body></methods><methods><class-id>Roassal2.RTShapedObject</class-id> <category>accessing</category><body package="Roassal2-Core">model	^ model</body><body package="Roassal2-Core">model: anObject	"anObject could be any Smalltalk object. Shapes are computed based on that object"	model := anObject</body><body package="Roassal2-Core">shape	"Return the shape of the element. Note that modifying the return roassal shape __will not__ modify the visual appearance of the element. If you wish to do so, you need to work directly on the trachel shape, or call #update and #signalUpdate on the element to propagate the changes."	^ shape</body><body package="Roassal2-Core">trachelShape	"Return the Trachel shape of the element, which has been generated from the Roassal shape and the model. Note that modifying the return Trachel shape __modifies__ the visual appearance of the element. You may want to update the view by sending #signalUpdate to it"	^ trachelShape</body><body package="Roassal2-Core">view	^ view</body><body package="Roassal2-Core">view: aRoassalView	view := aRoassalView</body></methods><methods><class-id>Roassal2.RTShapedObject</class-id> <category>rendering</category><body package="Roassal2-Core">renderOn: trachelCanvas	trachelShape isNil ifTrue: [ self error: 'Cannot add an element without a shape. Add a shape to myself, using + or addShape:' . ^ self ].			"Trachel shape use the same announcer than myself"	trachelShape announcer: self announcer.		"Each trachel shape knows the element. Note that this is not a static dependency between Trachel and Roassal since in Trachel, this element could be any object"	trachelShape element: self.	"This ifTrue:ifFalse: is not great. However it simplifies the design"	self isFixed		ifTrue: [ trachelCanvas addFixedShape: trachelShape ]		ifFalse: [ trachelCanvas addShape: trachelShape ].</body><body package="Roassal2-Core">updateShape	shape updateFor: self</body></methods><methods><class-id>Roassal2.RTShapedObject</class-id> <category>signalling</category><body package="Roassal2-Core">signalUpdate	^ trachelShape signalUpdate</body></methods><methods><class-id>Roassal2.RTShapedObject</class-id> <category>actions</category><body package="Roassal2-Core">pushBack	"Move the shaped object back"	self trachelShape pushBack</body><body package="Roassal2-Core">pushFront	"Move the shaped object front"	self trachelShape pushFront</body><body package="Roassal2-Core">setAsFixed	"I will remain fixed when drag and dropping the view"	isFixed := true</body><body package="Roassal2-Core">setAsNotFixed	"I will move when dragging the view"	isFixed := false</body></methods><methods><class-id>Roassal2.RTShapedObject</class-id> <category>announce</category><body package="Roassal2-Core">testCaseAnnounce: evt	"It is used for Test Cases because in that case evt does not know where it has been announced."	| evtInstance |	evtInstance := evt shape: self trachelShape.	self announce: evtInstance</body></methods><methods><class-id>Roassal2.RTShapedObject</class-id> <category>updating</category><body package="Roassal2-Core">update	"Update the trachel shape and reset the path. This has the effect of moving the visual widget"	self updateShape.	self updatePosition</body><body package="Roassal2-Core">updatePosition	trachelShape ifNotNil: [ trachelShape resetPath ]</body></methods><methods><class-id>Roassal2.RTShapedObject</class-id> <category>initialization</category><body package="Roassal2-Core">initialize	super initialize.	shape := RTNoShape new.	trachelShape := TRNoShape instance.	isFixed := false</body></methods><methods><class-id>Roassal2.RTShapedObject</class-id> <category>transformations</category><body package="Roassal2-Core">scaleBy: aPoint 	trachelShape scaleBy: aPoint</body></methods><methods><class-id>Roassal2.RTShapedObject class</class-id> <category>as yet unclassified</category><body package="Roassal2-Core">model: anObject	^ self new model: anObject</body></methods><methods><class-id>Roassal2.ASConverter</class-id> <category>accessing</category><body package="Roassal2-Pharo">noFill	^ ASNoFill soleInstance</body><body package="Roassal2-Pharo">stream	^ stream</body><body package="Roassal2-Pharo">stream: aStream	stream := aStream</body></methods><methods><class-id>Roassal2.ASConverter</class-id> <category>parsing-public</category><body package="Roassal2-Pharo">nextNumber	"read the number from stream.	or answer nil if not successfull"	"&lt;number&gt; (real number value): The specification of real number values is different for property values than for XML attribute values.â CSS2 [CSS2] states that a property value which is a &lt;number&gt; is specified in decimal notation (i.e., a &lt;decimal-number&gt;), which consists of either an &lt;integer&gt;, or an optional sign character followed byzero or more digits followed by a dot (.) followed by one or more digits. Thus, for conformance withCSS2, any property in SVG which accepts &lt;number&gt; values is specified in decimal notation only.â For SVG's XML attributes, to provide as much scalability in numeric values as possible, real numbervalues can be provided either in decimal notation or in scientific notation (i.e., a &lt;scientific-number&gt;), which consists of a &lt;decimal-number&gt; immediately followed by the letter ''e'' or ''E'' immediately followed by an &lt;integer&gt;.Unless stated otherwise for a particular attribute or property, a &lt;number&gt; has the capacity for at least a single- precision floating point number (see [ICC32]) and has a range (at a minimum) of -3.4e+38F to +3.4e+38F.It is recommended that higher precision floating point storage and computation be performed on operations such as coordinate system transformations to provide the best possible precision and to prevent round-off errors.Conforming High-Quality SVG Viewers are required to use at least double-precision floating point (see [ICC32]) for intermediate calculations on certain numerical operations.Within the SVG DOM, a &lt;number&gt; is represented as a float or an SVGAnimatedNumber."		| result sign esign pos int frac exponent |		esign := sign := 1.	pos := stream position.		stream peek = $- ifTrue: [ sign := -1.  stream next ].	int := self readInteger.		stream peek = $. ifTrue: [		stream next.		frac := self readFraction.	].		(stream peek = $e or: [ stream peek = $E ]) ifTrue: [		stream next.		stream peek = $- ifTrue: [ esign := -1.  stream next ].		exponent := self readInteger * esign ].		"failed"	(int isNil and: [ frac isNil ]) ifTrue: [ stream position: pos.  ^ nil ].		int ifNil: [ int := 0 ].	frac ifNil: [ frac := 0 ].	exponent ifNil: [ exponent := 0 ].		result :=  (int + frac * (10 raisedTo: exponent) * sign).		result isFraction ifTrue: [  ^ result asFloat ] ifFalse: [ ^ result ]</body></methods><methods><class-id>Roassal2.ASConverter</class-id> <category>parsing</category><body package="Roassal2-Pharo">parseColor: aString	^ Color fromString: aString</body></methods><methods><class-id>Roassal2.ASConverter</class-id> <category>operations</category><body package="Roassal2-Pharo">readFraction"read fraction, what is after the decimal point:.12345"	| result mul |	(stream atEnd or: [ stream peek isDigit not ]) ifTrue: [ ^ nil ].		mul := 1/10. 	result := 0.	[ stream peek notNil and: [ stream peek isDigit ] ] whileTrue: [		result := result + ( (stream next digitValue) * mul ).		mul := mul / 10	].	^ result</body><body package="Roassal2-Pharo">skipBlanks	[ stream atEnd not and: [ stream peek isSeparator ] ] whileTrue: [ stream next ].</body><body package="Roassal2-Pharo">skipBlanksAndComma	[ stream atEnd not and: [ stream peek isSeparator or: [stream peek =$,]] ] whileTrue: [ stream next ].</body></methods><methods><class-id>Roassal2.ASConverter</class-id> <category>write and read</category><body package="Roassal2-Pharo">readInteger	| result |	(stream atEnd or: [ stream peek isDigit not ]) ifTrue: [ ^ nil ].		result := 0.	[ stream peek notNil and: [ stream peek isDigit ] ] whileTrue: [		result := result * 10 + (stream next digitValue)	].	^ result</body></methods><methods><class-id>Roassal2.ASConverter</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Roassal2.ASConverter class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Roassal2.RTMultiLinearColorForIdentity</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizer">defaultColor	"Return the color used in case the element to display is not part of the visualization"	^ defaultColor</body><body package="Roassal2-ColorNormalizer">defaultColor: aColor	"Set the color used in case the element to display is not part of the visualization"	defaultColor := aColor</body><body package="Roassal2-ColorNormalizer">rtValue: anObject	| index |	index := objects indexOf: (command rtValue: anObject).		"If the object is not part of the range of objects to consider, then we use a default color"	index = 0 ifTrue: [ ^ self defaultColor ].		^ self level: (index - 1 / objects size)</body></methods><methods><class-id>Roassal2.RTMultiLinearColorForIdentity</class-id> <category>public</category><body package="Roassal2-ColorNormalizer">elements: roassalElements	^ self objects: (roassalElements collect: #model)</body><body package="Roassal2-ColorNormalizer">numberOfColors: aValue	^ self objects: (1 to: aValue)</body><body package="Roassal2-ColorNormalizer">objects: someObjects	objects := someObjects</body></methods><methods><class-id>Roassal2.RTMultiLinearColorForIdentity</class-id> <category>initialization</category><body package="Roassal2-ColorNormalizer">initialize	super initialize.	self colors: (RTColorPalette qualitative colors: 12 scheme: 'Set3').	objects := #().	self defaultColor: Color veryLightGray</body></methods><methods><class-id>Roassal2.RTColorLegendItem</class-id> <category>accessing</category><body package="Roassal2-Builder-Legend">color	^ color</body><body package="Roassal2-Builder-Legend">color: aColor	self assert: [ aColor notNil ] description: 'You have to provide a color'.	color := aColor</body><body package="Roassal2-Builder-Legend">model	^ model</body><body package="Roassal2-Builder-Legend">model: anObject	model := anObject</body><body package="Roassal2-Builder-Legend">text	^ text</body><body package="Roassal2-Builder-Legend">text: aStringOrABlockOrASymbol	text := aStringOrABlockOrASymbol</body></methods><methods><class-id>Roassal2.RTColorLegendItem</class-id> <category>hooks</category><body package="Roassal2-Builder-Legend">execute	"Associate a color with a text"	| g |	g := RTGroup new.	g add: (RTBox new size: textSize; color: color) element.	g add: ((RTLabel text: text) height: textSize; elementOn: model).	RTHorizontalLineLayout new alignCenter; on: g.	^ g</body></methods><methods><class-id>Roassal2.RTVerticalLineDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">render		| from to |	values do: [ :aValue |		from := builder getPixelPositionOf: aValue @ builder minY.		to := builder getPixelPositionOf: aValue @ builder maxY.		self lineFrom: from to: to ]</body></methods><methods><class-id>Roassal2.RTRoundedBox</class-id> <category>accessing</category><body package="Roassal2-Shapes">borderRadius	^ borderRadius</body><body package="Roassal2-Shapes">borderRadius: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self borderRadiusElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">borderRadiusElement: aValueOrAOneArgBlock	borderRadius := aValueOrAOneArgBlock</body><body package="Roassal2-Shapes">borderRadiusFor: anElement	^ borderRadius rtValue: anElement</body><body package="Roassal2-Shapes">geometryFor: anElement	| rect |	rect := GRectangle		origin: anElement encompassingRectangle origin		corner: anElement encompassingRectangle corner.	^ GRoundedRectangle rectangle: rect borderRadius: (self borderRadiusFor: anElement)</body></methods><methods><class-id>Roassal2.RTRoundedBox</class-id> <category>rendering</category><body package="Roassal2-Shapes">updateFor: anElement trachelShape: trachelShape	| ex |	trachelShape isNil ifTrue: [ ^ self ].	ex := (self widthFor: anElement) @ (self heightFor: anElement).	trachelShape		extent: ex;		color: (self colorFor: anElement);		borderRadius: (self borderRadiusFor: anElement);		strokePaint: (self borderColorFor: anElement);		strokeWidth: (self borderWidthFor: anElement);		rotateByDegrees: (self rotationFor: anElement);		scaleBy: (self scaleFor: anElement)</body></methods><methods><class-id>Roassal2.RTRoundedBox</class-id> <category>configuration</category><body package="Roassal2-Shapes">defaultBorderRadius	^ 0</body></methods><methods><class-id>Roassal2.RTRoundedBox</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeClass	^ TRRoundedBoxShape</body></methods><methods><class-id>Roassal2.RTRoundedBox</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	borderRadius := self defaultBorderRadius</body></methods><methods><class-id>Roassal2.RTGridView</class-id> <category>accessing</category><body package="Roassal2-Interactions">color	^ color</body><body package="Roassal2-Interactions">color: colorOfTheGrid	color := colorOfTheGrid</body><body package="Roassal2-Interactions">dashes	"Return the dash pattern associated"	^ dashes</body><body package="Roassal2-Interactions">dashes: integers	"Set the dash pattern for the line. Could be #(1 20) for example"	dashes := integers</body><body package="Roassal2-Interactions">gridSize	^ gridSize</body><body package="Roassal2-Interactions">gridSize: aNumber	gridSize := aNumber</body></methods><methods><class-id>Roassal2.RTGridView</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	self gridSize: self class defaultGridSize.	self color: self class defaultColor</body></methods><methods><class-id>Roassal2.RTGridView</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: aView	aView attributeAt: self className put: self.	self addGridShapeTo: aView canvas.	self addCenterMarkerTo: aView canvas.	self registerMovementEvents: aView canvas</body><body package="Roassal2-Interactions">registerMovementEvents: aCanvas	aCanvas camera		addCallback:			(TRTranslationCallback				block: [ :shape :step | 					gridShape addToOffset: step.					gridShape signalUpdate ]).	aCanvas when: TRMouseWheelEvent do: [ :e | gridShape resetPath ]</body></methods><methods><class-id>Roassal2.RTGridView</class-id> <category>adding</category><body package="Roassal2-Interactions">addCenterMarkerTo: aCanvas	aCanvas		addShape:			(TRSVGPath new				strokePaint: (Color black alpha: 0.5);				borderWidth: 1;				path: 'M -5 0 H 5 M 0 -5 V 5')</body><body package="Roassal2-Interactions">addGridShapeTo: aCanvas	gridShape := TRCanvasGridShape new.	gridShape spacing: gridSize.	gridShape dashes: self dashes.	gridShape color: self color.	aCanvas addShape: gridShape</body></methods><methods><class-id>Roassal2.RTGridView class</class-id> <category>example</category><body package="Roassal2-Interactions">example	| v es |	v := RTView new.	v @ RTDraggableView.	v @ (RTGridView new gridSize: 20).	v @ RTZoomableView.	es := RTBox new		color: Color green;		size: 20;		elementsOn: #(1 2).	v addAll: es.	es @ (RTDraggableSnapToGrid new gridSize: 40).	es @ RTResizable.	es first translateTo: 70 negated @ 90 negated.	es second translateTo: 70 @ 110.	^v</body><body package="Roassal2-Interactions">example02	| v es |	v := RTView new.	v @ RTDraggableView.	v @ (RTGridView new dashes: #(1 19); gridSize: 20; color: Color black trans).	v @ RTZoomableView.	es := RTBox new		color: Color green;		size: 20;		elementsOn: #(1 2).	v addAll: es.	es @ (RTDraggableSnapToGrid new gridSize: 40).	es @ RTResizable.	es first translateTo: 70 negated @ 90 negated.	es second translateTo: 70 @ 110.	^ v</body></methods><methods><class-id>Roassal2.RTGridView class</class-id> <category>initialization</category><body package="Roassal2-Interactions">defaultColor	^ Color black alpha: 0.05</body><body package="Roassal2-Interactions">defaultGridSize	^ 20</body></methods><methods><class-id>Roassal2.RTMenuBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-Menu">addParentMenu: aRTMenu	parentMenus add: aRTMenu.</body><body package="Roassal2-Builder-Menu">createView	^ RTView new.</body><body package="Roassal2-Builder-Menu">initialize	closingSubmenuFlag := false.	super initialize.	parentMenus := OrderedCollection new.</body><body package="Roassal2-Builder-Menu">parentMenus	^ parentMenus</body></methods><methods><class-id>Roassal2.RTMenuBuilder</class-id> <category>public</category><body package="Roassal2-Builder-Menu">menu: aTitle background: aColor callback: callback 	"Return a trachel shape, in which the callback has been set up"	^ self menu: aTitle background: aColor highlightColor:  (aColor alpha: (aColor alpha + 0.2)) callback: callback.</body><body package="Roassal2-Builder-Menu">menu: aTitle background: aColor highlightColor: aColor2 callback: callback 	"Return a trachel shape, in which the callback has been set up"	| lbl index |		self configureViewEvents.		index := view canvas fixedShapes 						inject: 0 into: [ :s :e | s max: (e encompassingRectangle topRight x + 10) ].	lbl := TRLabelShape new text: aTitle; translateLeftTo: (index +20) @ 20.	lbl color: Color black.	view canvas addFixedShape: lbl.	lbl element: (RTMenu new view: view; label: lbl; menuBackgroundColor: aColor; buttonLabelBackgroundShapeAndColor: aColor; highlightColor: aColor2 ).		lbl when: TRMouseClick do: [ :event | callback value.].	lbl when: TRMouseEnter do: [ :event | closingSubmenuFlag := false. lbl element executeHighlight; executeTextHighlight. self signalUpdate. ].	lbl when: TRMouseLeave do: [ :event | lbl element endHighlight. self signalUpdate. ].	^ lbl</body><body package="Roassal2-Builder-Menu">menu: aTitle callback: callback	"Return a trachel shape, in which the callback has been set up"	"callback is a zero-arg block, without argument therefore"	^ self menu: aTitle background: (Color gray darker alpha: 0) callback: callback.</body><body package="Roassal2-Builder-Menu">menu: aTitle highlight: aColor callback: callback 	"Return a trachel shape, in which the callback has been set up"	"callback is a zero-arg block, without argument therefore"	^ self menu: aTitle background: (Color gray darker alpha: 0) highlightColor: aColor callback: callback.</body><body package="Roassal2-Builder-Menu">menu: aTitle subcheckmenu: menuname background: color callback: callback	| checkmenu |	checkmenu := nil.	checkmenu := self		 menu: aTitle		 submenu: menuname		 background: color		 callback: [ 			checkmenu selected: checkmenu selected not.			callback value: checkmenu].	checkmenu after: [ :menu | 		menu text: checkmenu label.		self signalUpdate].	^ checkmenu.</body><body package="Roassal2-Builder-Menu">menu: aTitle subcheckmenu: menuname callback: callback	| checkmenu |	checkmenu := nil.	checkmenu := self		 menu: aTitle		 submenu: menuname		 callback: [ 			checkmenu selected: checkmenu selected not.			callback value: checkmenu].	checkmenu after: [ :menu | 		menu text: checkmenu label.		self signalUpdate].	^ checkmenu.</body><body package="Roassal2-Builder-Menu">menu: aTitle subcheckmenus: menus background: color	"format for menus	{'Title'-&gt;[:m | do something ]}"	^ menus collect: [ :m |		self menu: aTitle subcheckmenu: m key background: color callback: m value.		 ].</body><body package="Roassal2-Builder-Menu">menu: aTitle submenu: aSubMenuName background: aColor callback: callback	| parentMenu menuItem |		parentMenu := (self parentMenus) detect: [ :m | m label text = aTitle] ifFound: [:m | m label] ifNone: [parentMenu := self createParentMenu: aTitle background: aColor].		menuItem := RTMenuItem new name: aSubMenuName; callback: callback; color: aColor.	parentMenu element add: menuItem.	^ menuItem.</body><body package="Roassal2-Builder-Menu">menu: aTitle submenu: aSubMenuName background: aColor highlightColor: aColor2 callback: callback	| parentMenu menuItem |		parentMenu := (self parentMenus) detect: [ :m | m label text = aTitle] ifFound: [:m | m label] ifNone: [parentMenu := self createParentMenu: aTitle background: aColor highlightColor: aColor2].		menuItem := RTMenuItem new name: aSubMenuName; callback: callback; color: aColor.	parentMenu element add: menuItem.	^ menuItem.</body><body package="Roassal2-Builder-Menu">menu: aTitle submenu: aSubMenuName callback: callback	| parentMenu menuItem |		parentMenu := (self parentMenus) detect: [ :m | m label text = aTitle] ifFound: [:m | m label] ifNone: [parentMenu := self createParentMenu: aTitle].		menuItem := RTMenuItem new name: aSubMenuName; callback: callback.	parentMenu element add: menuItem.	^ menuItem.</body><body package="Roassal2-Builder-Menu">menu: aTitle submenus: menus background: aColor	^ menus collect: [ :m | 		self menu: aTitle submenu: m key background: aColor callback: m value].</body></methods><methods><class-id>Roassal2.RTMenuBuilder</class-id> <category>utility</category><body package="Roassal2-Builder-Menu">createParentMenu: aTitle		^ self createParentMenu: aTitle background: (Color gray darker alpha: 0).</body><body package="Roassal2-Builder-Menu">createParentMenu: aTitle background: aColor	^ self createParentMenu: aTitle background: aColor highlightColor: (aColor alpha: (aColor alpha + 0.2)).</body><body package="Roassal2-Builder-Menu">createParentMenu: aTitle background: aColor highlightColor: aColor2	| lbl index menu |		index := view canvas fixedShapes 						inject: 0 into: [ :s :e | s max: (e encompassingRectangle topRight x + 10) ].							lbl := TRLabelShape new text: aTitle; translateLeftTo: (index +20) @ 20.	lbl color: Color black.	view canvas addFixedShape: lbl.		menu := RTMenu new view: view; label: lbl; menuLabelBackgroundShapeAndColor: aColor; menuBackgroundColor: aColor; highlightColor: aColor2.	self addParentMenu: menu.	lbl element: (menu).		lbl element labelBackground when: TRMouseEnter do: [ :event | self enterSubmenuOf: lbl].	lbl element labelBackground when: TRMouseClick do: [ :e | self showSubmenuOf: lbl].		lbl element labelBackground when: TRMouseLeave do: [ :e |			| anim |		lbl element isLocked ifFalse: [ 			anim := RTNopAnimation new				waitFor: 0.1 after: [ 					closingSubmenuFlag ifTrue: [ 						lbl element hideItems.						lbl element endHighlight						]					].			view addAnimation: anim.			self signalUpdate.			]		].			^ lbl</body><body package="Roassal2-Builder-Menu">createParentMenu: aTitle highlight: aColor	^ self createParentMenu: aTitle background: (Color gray darker alpha: 0) highlightColor: aColor.</body><body package="Roassal2-Builder-Menu">enterSubmenuOf: lbl	| menu labels|		menu := lbl element.		"We mark the submenu as open" 	(menu isLocked) ifTrue: [ ^ self signalUpdate].	menu hideAll.	menu isLocked: false.	menu isOpen: true.		menu executeHighlight.		labels := menu items collect: [ :item | | m |		m := nil.		m := self menu: item label background: (Color white alpha:0) callback: [ 			item execute: m.			menu isLocked ifFalse: [ menu hideAll ] ].		item menu: m.		m ].	labels doWithIndex: [ :l :i | | p |		p := ((lbl position x) + (l width/2) - (lbl width/2) + 5)@(lbl position y + (l height*i) +3.5).		l translateTo: p.	].	menu update.	self signalUpdate.			lbl element menuBackground when: TRMouseEnter do: [ :e | 				closingSubmenuFlag := false.				self signalUpdate].				lbl element menuBackground when: TRMouseLeave do: [ :e | 			| anim |			closingSubmenuFlag := true.			anim := RTNopAnimation new				waitFor: 0.1 after: [ 					lbl element isLocked ifFalse: [						closingSubmenuFlag ifTrue: [  							lbl element hideItems.							lbl element endHighlight.							]						]					].			view addAnimation: anim.			self signalUpdate			].</body><body package="Roassal2-Builder-Menu">leaveSubmenuOf: lbl	| menu |		menu := lbl element.		menu hideItems.		menu labelBackgroundColor: (menu savedLabelBackgroundColor).		self signalUpdate.</body><body package="Roassal2-Builder-Menu">showSubmenuOf: lbl	| menu  labels |	menu := lbl element.		"Check if submenu is locked"	menu isLocked		ifTrue: [ 			menu hideItems.			menu endHighlight.			self signalUpdate.			 ^ self].			"We mark the submenu as locked" 	menu isLocked: true.	menu executeLockHighlight.	menu isOpen		ifFalse: [ 		"We mark the submenu as open" 		menu hideAll.		menu isOpen: true.		menu executeLockHighlight.			labels := menu items collect: [ :item | | m |			m := nil.			m := self menu: item label background: (Color white alpha:0) callback: [item execute: m].			item menu: m.			m 		].		labels doWithIndex: [ :l :i | | p |			p := ((lbl position x) + (l width/2) - (lbl width/2) + 5)@(lbl position y + (l height*i) +3.5).			l translateTo: p.		].	menu update.	].		self signalUpdate.</body></methods><methods><class-id>Roassal2.RTMenuBuilder</class-id> <category>signalling</category><body package="Roassal2-Builder-Menu">configureViewEvents	view when: TRMouseClick do: [ :evt | | anim |			anim := RTNopAnimation new				waitFor: 0.1 after: [					closingSubmenuFlag ifTrue: [  						parentMenus ifNotEmpty: [parentMenus first hideAll].						view signalUpdate.						]					].					view addAnimation: anim.				 view signalUpdate].	view when: TRMouseEnter do: [ :evt | closingSubmenuFlag := true].	view when: TRMouseLeave do: [ :evt | closingSubmenuFlag := false].</body><body package="Roassal2-Builder-Menu">signalUpdate	view canvas signalUpdate</body></methods><methods><class-id>Roassal2.RTMenuBuilder class</class-id> <category>public</category><body package="Roassal2-Builder-Menu">setGraphMenuOn: view	| builder |	builder := self new view: view.	builder		menu: 'Find'		background: Color blue		callback: [ | element |			element := TRPlatform current 				dialogChooseFrom: (view elements collect: #model)				values: view elements.			element notNil				ifTrue: [					view canvas camera translateTo: element position.					RTBlink on: element ] ].</body></methods><methods><class-id>Roassal2.RTNest</class-id> <category>setting nesting behavior</category><body package="Roassal2-Core">behavior: aBehavior	behavior := aBehavior</body><body package="Roassal2-Core">noBehavior	self behavior: (RTNoBehavior instance)</body><body package="Roassal2-Core">stretchable	"It makes a scaling/zooming effect.	If you change backElement's extent, it changes proportionaly extent and position of nested elements. 	So the overall image --- composition of backElement and elements --- does not change. 	It only zoom in/out the overall image."	self behavior: (RTStretchBehavior new)</body><body package="Roassal2-Core">topLeft	self behavior: (RTTopLeftBehavior new)</body></methods><methods><class-id>Roassal2.RTNest</class-id> <category>utility</category><body package="Roassal2-Core">doLayoutIfNecessaryOn: elements	layout ifNotNil: [ layout on: elements ]</body><body package="Roassal2-Core">encompassingRectangleOf: elements	^ elements asGroup encompassingRectangle</body><body package="Roassal2-Core">makeElements: elements resizable: backElement	"If an element of elements is resized, then the backElement should be resized as well.	"	| callback1 callback2 |	callback1 := TRExtentCallback block: [ :shape :newsize |		self resizeWithoutRecursion: backElement for: elements	].	callback2 := TRTranslationCallback block: [ :shape :newsize |		self resizeWithoutRecursion: backElement for: elements	].	elements do: [ :e | e trachelShape addCallback: callback1 ; addCallback: callback2 ]</body><body package="Roassal2-Core">makeElements: elements resizableWithoutRecursion: backElement	"If an element of elements is resized, then the backElement should be resized as well.	"	| callback1 callback2 |	callback1 := TRExtentCallback block: [ :shape :newsize |		self resizeWithoutRecursion: backElement for: elements	].	callback2 := TRTranslationCallback block: [ :shape :newsize |		self resizeWithoutRecursion: backElement for: elements	].	elements do: [ :e | e trachelShape addCallback: callback1 ; addCallback: callback2 ]</body><body package="Roassal2-Core">mark: backElement with: elements	(backElement hasAttribute: #nestedElements)		ifFalse: [ backElement attributeAt: #nestedElements put: RTGroup new ].	(backElement attributeAt: #nestedElements) addAll: elements.	elements do: [ :anElement | anElement attributeAt: #parentElement put: backElement ]</body><body package="Roassal2-Core">resizeWithoutRecursion: backElement bounds: encompassingRectangle	"it translates backElement, but does not trigger events."	| newRec |	newRec := (encompassingRectangle topLeft - (padding @ padding)) extent: 					((encompassingRectangle width + (padding * 2)) @ 					 (encompassingRectangle height + (padding * 2))).	backElement trachelShape		extent: (encompassingRectangle width + (padding * 2)) @ (encompassingRectangle height + (padding * 2)).		backElement trachelShape doWithoutCallbacks: [ backElement translateTo: encompassingRectangle center ]</body><body package="Roassal2-Core">resizeWithoutRecursion: backElement for: elements	| encompassingRectangle |	encompassingRectangle := self encompassingRectangleOf: elements.	self resizeWithoutRecursion: backElement bounds: encompassingRectangle.</body></methods><methods><class-id>Roassal2.RTNest</class-id> <category>OBSOLETE - to be removed</category><body package="Roassal2-Core">makeElements: elements draggableBy: backElement	^ self makeElements: elements draggableByTrachelShape: backElement trachelShape</body><body package="Roassal2-Core">makeElements: elements draggableByTrachelShape: trachelShape	| callback |	callback := TRTranslationCallback block: [ :shape :step | elements do: [ :e | e translateBy: step ] ].	trachelShape addCallback: callback</body><body package="Roassal2-Core">onResizable: backElement nest: elements	"PROBABLY THIS METHOD HAS TO BE DELETED"	"public method"	"backElement is the elements on which elements are layout-ed"	"- position the elements above backElement. 	 - resize backElement to encapsulate the elements	 - perform a layout of the elements if a layout has been set	 - make the inner elements draggable"		layout ifNotNil: [ layout on: elements ].	self centerOn: backElement elements: elements.	self makeElements: elements draggableBy: backElement."	self makeElements: elements transformable: backElement."	self makeElements: elements resizableWithoutRecursion: backElement.</body><body package="Roassal2-Core">onTrachelShape: trachelShape nest: elements	"public method"	"backElement is the elements on which elements are layout-ed"	"- position the elements above backElement. 	 - resize backElement to encapsulate the elements	 - perform a layout of the elements if a layout has been set	 - make the inner elements draggable"	self doLayoutIfNecessaryOn: elements.	behavior on: trachelShape setNested: elements asGroup	"self centerOnTrachelShape: trachelShape elements: elements.	self makeElements: elements draggableByTrachelShape: trachelShape."</body><body package="Roassal2-Core">resize: backElement bounds: encompassingRectangle	"it translates backElement, but does not trigger events."	| newRec |	newRec := (encompassingRectangle topLeft - (padding @ padding)) extent: 					((encompassingRectangle width + (padding * 2)) @ 					 (encompassingRectangle height + (padding * 2))).	backElement trachelShape		extent: (encompassingRectangle width + (padding * 2)) @ (encompassingRectangle height + (padding * 2)).		backElement translateTo: encompassingRectangle center</body><body package="Roassal2-Core">resize: backElement for: elements	| encompassingRectangle |	encompassingRectangle := self encompassingRectangleOf: elements.	self resize: backElement bounds: encompassingRectangle.</body></methods><methods><class-id>Roassal2.RTNest</class-id> <category>public</category><body package="Roassal2-Core">centerOn: backElement elements: elements	"Public method. This method does the following actions:		- resize the backElement to encompasse all the elements		- translate all the elements on top of backElement		- perform a layout if one is set"	self centerOnTrachelShape: backElement trachelShape elements: elements</body><body package="Roassal2-Core">centerOnTrachelShape: trachelShape elements: elements	"Public method. This method does the following actions:		- resize the backElement to encompasse all the elements		- translate all the elements on top of backElement		- perform a layout if one is set"	behavior centerOnTrachelShape: trachelShape elements: elements asGroup.</body><body package="Roassal2-Core">for: collectionOfElements add: aTwoArgBlock	"aTwoArgBlock follows [ :group :model | ... ]"	"Return all the elements added by the argument block"		"	Example:	| v es |	v := RTView new.	es := RTBox elementsOn: RTShape withAllSubclasses.	v addAll: es.	RTNest new		for: es		add: [ :group :model | 			group				addAll: ((RTBox new color: Color blue) elementsOn: model rtmethods).			RTGridLayout on: group ].	RTFlowLayout new on: es.	es @ RTPopup @ RTDraggable.	^ v	"		| allAddedObject |	allAddedObject := RTGroup new.	collectionOfElements do: [ :element |		| g |		g := RTGroup new.		aTwoArgBlock value: g value: element model.		self doLayoutIfNecessaryOn: g.		self on: element nest: g.				"Add the elements in the view. If no view has been set, it try to use the view of the elements"		view isNil			ifTrue: [ 				element view ifNil: [ self error: 'Please, specify in RTNest a view to which elements have to be added in using #view:.' ].				element view addAll: g ]			ifFalse: [ view addAll: g ].		allAddedObject addAll: g	].	^ allAddedObject</body><body package="Roassal2-Core">for: collectionOfElements inShape: aSymbol add: aTwoArgBlock	"aTwoArgBlock follows [ :group :model | ... ]"	"This methods assumes that each shape of collection of Elements is a multi composed shape"		collectionOfElements do: [ :element |		| g |		g := RTGroup new.		aTwoArgBlock value: g value: element model.		self on: element inShape: aSymbol nest: g.		element view addAll: g.	]</body><body package="Roassal2-Core">indexOfNonLabelShapeIn: backElement	| nonLabelShape |	nonLabelShape := backElement shape allShapes detect: [ :aShape | aShape class ~~ RTLabel ].	^ backElement shape allShapes indexOf: nonLabelShape</body><body package="Roassal2-Core">isCompositeAndHasLabel: backElement	^ backElement shape class == RTCompositeShape		and: [ backElement shape allShapes anySatisfy: [ :aShape | aShape class == RTLabel ] ]</body><body package="Roassal2-Core">on: element inShape: aSymbol nest: elements	"public method"	"add nested elements, in a particular shape of the composed shape of the element. Assume that the shape of element is composed"	"aSymbol could be #first, #second, #third, #fourth"		"We assume that the roassal shape of element is composed"	^ self on: element inShape: aSymbol nest: elements layout: #vertical</body><body package="Roassal2-Core">on: element inShape: aSymbol nest: elements layout: aSymbolLayout	"public method"	"aSymbol could be #first, #second, #third, #fourth		aSymbolLayout is either #vertical or #horizontal"		self doLayoutIfNecessaryOn: elements.		"We assume that the roassal shape of element is composed"	behavior on: (aSymbol rtValue: element trachelShape shapes) setNested: elements asGroup.	"self onTrachelShape: (aSymbol rtValue: element trachelShape shapes) nest: elements."	aSymbolLayout rtValue: element trachelShape.	element trachelShape relayout.	self mark: element with: elements</body><body package="Roassal2-Core">on: backElement nest: elements	"public method"	"backElement is the elements on which elements are layout-ed"	"- position the elements above backElement. 	 - resize backElement to encapsulate the elements	 - perform a layout of the elements if a layout has been set	 - make the inner elements draggable"	"We check if the shape of backElement is a composite shape. nested elements should not be on the Label. We manually consider this situation since it is recurrent"	| indexOfNonLabel |	self		assert: [ elements isKindOf: Collection ]		description: 'Need to provide a collection as second argument'.	self		assert: [ backElement isKindOf: RTElement ]		description: 'Need to provide an element as first argument'.	(self isCompositeAndHasLabel: backElement)		ifTrue: [ indexOfNonLabel := self indexOfNonLabelShapeIn: backElement.			^ self				on: backElement				inShape: [ :array | array at: indexOfNonLabel ]				nest: elements ].	self doLayoutIfNecessaryOn: elements.	self on: backElement simplyNest: elements.	self mark: backElement with: elements</body><body package="Roassal2-Core">on: backElement nestRootOf: elements	"public method"	"backElement is the elements on which elements are layout-ed"	"elements is a collection of elements. These elements may have relation between them (e.g., nesting). This method is useful for example to nest elements that have been produced by RTMondrian"	"- position the elements above backElement. 	 - resize backElement to encapsulate the elements	 - perform a layout of the elements if a layout has been set	 - make the inner elements draggable"	"We check if the shape of backElement is a composite shape. nested elements should not be on the Label. We manually consider this situation since it is recurrent"	^ self on: backElement nest: (elements select: [ :e | e parentElement isNil ])</body><body package="Roassal2-Core">on: backElement simplyNest: elements	behavior on: backElement setNested: elements asGroup</body></methods><methods><class-id>Roassal2.RTNest</class-id> <category>accessing</category><body package="Roassal2-Core">layout	^ layout</body><body package="Roassal2-Core">layout: aLayout	"Set a layout that is used before doing the nesting"	layout := aLayout</body><body package="Roassal2-Core">padding	^ padding</body><body package="Roassal2-Core">padding: aNumber	padding := aNumber</body><body package="Roassal2-Core">view	^ view</body><body package="Roassal2-Core">view: aRTView	"Set the view in which elements have to be added in for:add:"	view := aRTView</body></methods><methods><class-id>Roassal2.RTNest</class-id> <category>initialization</category><body package="Roassal2-Core">initialize	super initialize.	padding := 5.	self noBehavior</body></methods><methods><class-id>Roassal2.RTVerticalMinValueDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">render		self add: self datasetValues min. 	super render.</body></methods><methods><class-id>Roassal2.RTSimpleResizable</class-id> <category>hooks</category><body package="Roassal2-Interactions-Resize">createHandleFor: element	| handle |	handle := (RTEllipse new size: 10) element.	handle addCallback: (TRTranslationCallback block: [ :shape :step | 		| tStep newSize |		tStep := handle position - element encompassingRectangle bottomRight + (handle extent / 2).		newSize := (element extent + (tStep)) max: (20 @ 20).		element translateBy: (tStep / 2).		element extent: newSize ]).	handle @ RTDraggable.	handle when: TRMouseLeave do: [ :evt | self removeResizeHandleOn: element ].	^ handle</body><body package="Roassal2-Interactions-Resize">initializeElement: element	element when: TRMouseEnter do: [ :evt | self showResizeHandleOn: element ].	element when: TRMouseLeave do: [ :evt | self removeResizeHandleOn: element ].</body><body package="Roassal2-Interactions-Resize">removeResizeHandleOn: element	| handle |	(element attributes includesKey: #resizeHandle) ifFalse: [ ^ self ].	handle := element attributeAt: #resizeHandle.	handle remove.	element attributes removeKey: #resizeHandle.	element view signalUpdate</body><body package="Roassal2-Interactions-Resize">showResizeHandleOn: element	| handle |	self removeResizeHandleOn: element.		handle := self createHandleFor: element.		element view add: handle.	handle translateTo: element encompassingRectangle bottomRight - (handle extent / 2).	element attributeAt: #resizeHandle put: handle. 	element view signalUpdate</body></methods><methods><class-id>Roassal2.TRController</class-id> <category>events</category><body package="Roassal2-Visualworks">announceToEventOverseer: evt	self eventOverseer ifNil: [  ^ self ].	self eventOverseer firedEvent: evt.</body><body package="Roassal2-Visualworks">blueButtonPressedEvent: event	self trMouseDown: event.	^ nil.</body><body package="Roassal2-Visualworks">blueButtonReleasedEvent: event	self trMouseDown: event.	^ nil.</body><body package="Roassal2-Visualworks">doubleClickEvent: event	self trMouseDoubleClick: event</body><body package="Roassal2-Visualworks">enterEvent: event	self mouseEnter: event.	^ super enterEvent: event.</body><body package="Roassal2-Visualworks">exitEvent: anEvent	self mouseExit: anEvent.	^ super exitEvent: anEvent.</body><body package="Roassal2-Visualworks">keyPressedEvent: event	self trKeyDown: event.</body><body package="Roassal2-Visualworks">mouseEnter: event	event anyButtonPressed 		ifFalse: [ self trMouseEnter: event ].	^ nil</body><body package="Roassal2-Visualworks">mouseExit: event	event anyButtonPressed		ifFalse: [ self trMouseLeave: event ].	^ nil</body><body package="Roassal2-Visualworks">mouseMovedEvent: evt	view topComponent controller isControlActive ifFalse: [^ nil].	firstClickEvent isNil ifFalse: [		isFirstDragging ifTrue: [ 			self trMouseDragBegin: firstClickEvent.			isFirstDragging := false. ] ].	self isDragging		ifTrue: [ self trMouseDragging: evt ]		ifFalse: [ | trEvent |			shapeBeingPointed ifNil: [ 				currentElement := shapeBeingPointed := self shapeForEvent: evt.				self trMouseEnter: evt.				^ self trMouseMoving: evt ].			currentElement := self shapeForEvent: evt.			currentElement == shapeBeingPointed ifTrue: [^ self trMouseMoving: evt ].			trEvent := self eventOfClass: TRMouseLeave from: evt.			trEvent shape: shapeBeingPointed.			shapeBeingPointed announce: trEvent.			shapeBeingPointed := currentElement.			self trMouseEnter: evt.			self trMouseMoving: evt ].</body><body package="Roassal2-Visualworks">mouseWheelEvent: event	self trMouseWheel: event.	^ self</body><body package="Roassal2-Visualworks">okToSelect	"this method is inspired from  BasicButtonController&gt;&gt;okToSelect.	we are dealing with the actual focus view in order to takeFocus.	I'm sure this code is completly correct but it's seems sufficiently ok after some tests)"	self keyboardProcessor notNil		ifTrue: 			[(self keyboardProcessor requestFocusFor: self)				ifTrue: 					[self keyboardProcessor focusedView: self view.					"self startTransition"]				ifFalse: [^false]]		ifFalse: 			[ ^false].	^true</body><body package="Roassal2-Visualworks">redButtonPressedEvent: event	self trMouseDown: event.	^nil</body><body package="Roassal2-Visualworks">redButtonReleasedEvent: event	self trMouseUp: event.	^nil</body><body package="Roassal2-Visualworks">trMouseDown: event	self okToSelect ifTrue: [		firstClickEvent := event copy.	]</body><body package="Roassal2-Visualworks">trMouseUp: evt	self okToSelect ifTrue: [ | timeout |		firstClickEvent isNil ifFalse: [ 			timeout := (evt time - firstClickEvent time) &gt; 5.			timeout ifTrue: [				self trMouseClick: firstClickEvent.				firstClickEvent := nil.			].		].				self isDragging ifTrue: [ self trMouseDragEnd: evt ].		isFirstDragging := true.	]</body><body package="Roassal2-Visualworks">yellowButtonPressedEvent: event	self trMouseDown: event.	^ nil.</body><body package="Roassal2-Visualworks">yellowButtonReleasedEvent: event	self trMouseUp: event.	^ nil.</body></methods><methods><class-id>Roassal2.TRController</class-id> <category>view access</category><body package="Roassal2-Visualworks">activate	"you probably have to redefine this method in order to inform the view it has focus"	view takeFocus.	self focusIn.	super activate.</body><body package="Roassal2-Visualworks">deactivate	"inform the vieew it has loosing the focus"	view loseFocus.	self focusOut.	super deactivate.</body></methods><methods><class-id>Roassal2.TRController</class-id> <category>testing</category><body package="Roassal2-Visualworks">isDragging	^ eventBeginingDragging notNil</body></methods><methods><class-id>Roassal2.TRController</class-id> <category>event driven</category><body package="Roassal2-Visualworks">diseresFocus	"Controller who wants keyboard control has to redefine this method to true"	^ true</body><body package="Roassal2-Visualworks">handlerForMouseEvent: aMouseEvent	"If aMouseEvent happened in my view's area, and not a scroll event return my handler"	(self viewHasCursorWithEvent: aMouseEvent)			ifTrue: [^self getEventHandler]			ifFalse: [^nil]</body></methods><methods><class-id>Roassal2.TRController</class-id> <category>initialize-release</category><body package="Roassal2-Visualworks">initialize	super initialize.	isFirstDragging := true.</body></methods><methods><class-id>Roassal2.TRController</class-id> <category>event-processed</category><body package="Roassal2-Visualworks">eventOfClass: anEventClass actionClass: anActionClass from: aMorphicEvent	| relativePosition trEvent shape |	relativePosition := self relativePositionFor: aMorphicEvent.	shape := self shapeWithAction: anActionClass forPositionInPixels: relativePosition.	trEvent := anEventClass fromEvent: aMorphicEvent.	trEvent		morph: self view;		canvas: self view trachelCanvas;		shape: shape;		position: relativePosition.	^ trEvent</body><body package="Roassal2-Visualworks">eventOfClass: anEventClass from: aMorphicEvent	^ self eventOfClass: anEventClass actionClass: anEventClass from: aMorphicEvent</body><body package="Roassal2-Visualworks">mouseEventOfClass: defaultClass ifLeftButton: leftButtonClass ifRightButton: rightButtonClass from: aMorphicEvent	| trEventClass |	trEventClass := defaultClass.	aMorphicEvent isRed		ifTrue: [ trEventClass := leftButtonClass ].	aMorphicEvent isYellow		ifTrue: [ trEventClass := rightButtonClass ].	^ self eventOfClass: trEventClass actionClass: defaultClass from: aMorphicEvent</body><body package="Roassal2-Visualworks">shapeForEvent: anEvent	^ self shapeWithActionForPositionInPixels: (self relativePositionFor: anEvent)</body><body package="Roassal2-Visualworks">trKeyDown: event	| trEvent |		(event controlKeyPressed and: [event alternativeKeyCharacter = $w])		ifTrue: [ ^ self owner close ].	trEvent := self eventOfClass: TRKeyDown from: event.	trEvent		position: (self view trachelCanvas camera fromPixelToSpace: trEvent position);		keyValue: event keyValue;		keyCombination: event asKeyCombination.	trEvent shape announce: trEvent</body><body package="Roassal2-Visualworks">trMouseClick: evt	| trEvent |	trEvent := self		mouseEventOfClass: TRMouseClick		ifLeftButton: TRMouseLeftClick		ifRightButton: TRMouseRightClick		from: evt.		trEvent position: (self view trachelCanvas camera fromPixelToSpace: trEvent position).	trEvent shape announce: trEvent.	self announceToEventOverseer: trEvent</body><body package="Roassal2-Visualworks">trMouseDoubleClick: aMorphicEvent	| trEvent |	trEvent := self		mouseEventOfClass: TRMouseDoubleClick		ifLeftButton: TRMouseDoubleLeftClick		ifRightButton: TRMouseDoubleRightClick		from: aMorphicEvent.	trEvent position: (self view trachelCanvas camera fromPixelToSpace: trEvent position).	trEvent shape announce: trEvent.	self announceToEventOverseer: trEvent</body><body package="Roassal2-Visualworks">trMouseDragBegin:  aMorphicEvent	| trEvent trEventClass |	eventBeginingDragging := aMorphicEvent copy.		trEventClass := TRMouseDragStart.	aMorphicEvent isRed		ifTrue: [ trEventClass := TRMouseLeftDragStart ].	aMorphicEvent isYellow		ifTrue: [ trEventClass := TRMouseRightDragStart ].	trEvent := self eventOfClass: trEventClass actionClass: TRMouseDragging from: aMorphicEvent.	shapeBeingPointed := trEvent shape.	shapeBeingPointed announce: trEvent.	self announceToEventOverseer: trEvent</body><body package="Roassal2-Visualworks">trMouseDragEnd: aMorphicEvent	| trEvent |	trEvent := self eventOfClass: TRMouseDragEnd from: aMorphicEvent.	trEvent shape: shapeBeingPointed.	shapeBeingPointed announce: trEvent.	self announceToEventOverseer: trEvent.	eventBeginingDragging := nil.	shapeBeingPointed := nil</body><body package="Roassal2-Visualworks">trMouseDragging: aMorphicEvent	| trEvent step |	eventBeginingDragging ifNil: [ ^ self ].	step := aMorphicEvent position - eventBeginingDragging position.	trEvent := self eventOfClass: TRMouseDragging from: aMorphicEvent.	trEvent step: step.	shapeBeingPointed ifNil: [ shapeBeingPointed := trEvent shape ].	"If the element was removed during the drag then cancel the event"	shapeBeingPointed canvas		ifNil: [ eventBeginingDragging := nil.			shapeBeingPointed := nil.			^ self ].	trEvent shape: shapeBeingPointed.	shapeBeingPointed announce: trEvent.	self announceToEventOverseer: trEvent.	eventBeginingDragging := aMorphicEvent copy.</body><body package="Roassal2-Visualworks">trMouseEnter: aMorphicEvent	| trEvent |	trEvent := self eventOfClass: TRMouseEnter from: aMorphicEvent.	trEvent shape announce: trEvent.	self announceToEventOverseer: trEvent</body><body package="Roassal2-Visualworks">trMouseLeave: aMorphicEvent	| trEvent |	trEvent := self eventOfClass: TRMouseLeave from: aMorphicEvent.	trEvent shape announce: trEvent.	self announceToEventOverseer: trEvent</body><body package="Roassal2-Visualworks">trMouseMoving: aMorphicEvent	| trEvent |	trEvent := self eventOfClass: TRMouseMove from: aMorphicEvent.	trEvent position: (self view trachelCanvas camera fromPixelToSpace: trEvent position).	trEvent shape announce: trEvent.	self announceToEventOverseer: trEvent.</body><body package="Roassal2-Visualworks">trMouseWheel: aMorphicEvent	| trEvent |	trEvent := self eventOfClass: TRMouseWheelEvent from: aMorphicEvent.	trEvent		direction:  (aMorphicEvent up ifTrue: [#up] ifFalse: [#down]);		position: (self view trachelCanvas camera fromPixelToSpace: trEvent position).	self view trachelCanvas announce: trEvent</body></methods><methods><class-id>Roassal2.TRController</class-id> <category>accessing</category><body package="Roassal2-Visualworks">eventOverseer	^ self view trachelCanvas eventOverseer</body><body package="Roassal2-Visualworks">owner	| owner temp |	owner := temp := self view.	[ temp isNotNil and: [(temp class == ScheduledWindow) not ] ] whileTrue: [ 		temp :=owner :=  temp container.		 ].	^ owner</body><body package="Roassal2-Visualworks">shapeWithAction: eventClass forPositionInPixels: position	"Return the shape with event handler located that contains point"	 ^ self view trachelCanvas shapeWithAction: eventClass forPositionInPixels: position</body><body package="Roassal2-Visualworks">shapeWithActionForPositionInPixels: point	^ self view trachelCanvas shapeWithActionForPositionInPixels: point</body></methods><methods><class-id>Roassal2.TRController</class-id> <category>events-roassal</category><body package="Roassal2-Visualworks">relativePositionFor: evt	^ evt position - view globalOrigin.</body></methods><methods><class-id>Roassal2.TRController class</class-id> <category>instance creation</category><body package="Roassal2-Visualworks">new	"Answer a newly created and initialized instance."	^super new initialize</body><body package="Roassal2-Visualworks">visual: aTRVisual	| instance |	instance := self new.	instance view: aTRVisual.	^ instance.</body></methods><methods><class-id>Roassal2.TRNoDecoratorShape</class-id> <category>actions</category><body package="Roassal2-Trachel-ShapesForArrow">addedIn: aCanvas	"Do nothing"</body><body package="Roassal2-Trachel-ShapesForArrow">pushBack	"do nothing"</body><body package="Roassal2-Trachel-ShapesForArrow">pushFront	"do nothing"</body><body package="Roassal2-Trachel-ShapesForArrow">setAsFixed	"Not much to do"</body><body package="Roassal2-Trachel-ShapesForArrow">translateBy: aPoint	"do nothing"</body><body package="Roassal2-Trachel-ShapesForArrow">translateTo: aPoint	"do nothing"</body></methods><methods><class-id>Roassal2.TRNoDecoratorShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-ShapesForArrow">accept: aVisitor	aVisitor visitNoShape: self</body></methods><methods><class-id>Roassal2.TRNoDecoratorShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-ShapesForArrow">center	0@0</body><body package="Roassal2-Trachel-ShapesForArrow">encompassingRectangle	^ 0@0 corner: 0@0</body><body package="Roassal2-Trachel-ShapesForArrow">height	^ 0</body><body package="Roassal2-Trachel-ShapesForArrow">position	^ 0 @ 0</body><body package="Roassal2-Trachel-ShapesForArrow">width	^ 0</body></methods><methods><class-id>Roassal2.TRNoDecoratorShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-ShapesForArrow">computePath	"do nothing"</body></methods><methods><class-id>Roassal2.TRNoDecoratorShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-ShapesForArrow">drawOn: athensCanvas	"do nothing"</body></methods><methods><class-id>Roassal2.RTRotatedLabel</class-id> <category>accessing</category><body package="Roassal2-Shapes">angleFor: element	^ angle rtValue: element</body><body package="Roassal2-Shapes">angleInDegree: aValueOrAOneArgBlock	"aValueOrAOneArgBlock is applied on the object model"	self angleInDegreeElement: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">angleInDegreeElement: aValueOrABlock	"The argument will be evaluated against the model"	angle := aValueOrABlock</body></methods><methods><class-id>Roassal2.RTRotatedLabel</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	self angleInDegree: 0.</body></methods><methods><class-id>Roassal2.RTRotatedLabel</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeFor: anElement	|  shape |	"ex := (self widthFor: anElement) @ (self heightFor: anElement)."	"rec := (anElement position ) extent: ex."		shape := TRRotatedLabelShape new.	shape text: (self textFor: anElement);			color: (self colorFor: anElement);			position: anElement position;			angleInDegree: (self angleFor: anElement);			fontSize: (self heightFor: anElement).	^ shape</body></methods><methods><class-id>Roassal2.RTMouseHoverZoom</class-id> <category>configuration</category><body package="Roassal2-Interactions">defaultRatio	^ 1.3</body></methods><methods><class-id>Roassal2.RTMouseHoverZoom</class-id> <category>accessing</category><body package="Roassal2-Interactions">ratio	^ ratio</body><body package="Roassal2-Interactions">ratio: aFloat	"Ratio by wich the element will grow"	ratio := aFloat</body></methods><methods><class-id>Roassal2.RTMouseHoverZoom</class-id> <category>private</category><body package="Roassal2-Interactions">attributeSymbol	^ #automaticZoomExtent</body><body package="Roassal2-Interactions">doZoomEffect: anElement	(anElement hasAttribute: self attributeSymbol) ifTrue: [ ^ self ].		zoomInElements do: [ :el | self undoZoomEffect: el ].	zoomInElements := OrderedCollection new.	zoomInElements add: anElement.		anElement attributeAt: self attributeSymbol put: anElement extent.	self setExtent: (desiredExtent rtValue: anElement) for: anElement after: [].</body><body package="Roassal2-Interactions">setExtent: newExtent for: anElement after: aBlock	resizeStrategy cull: anElement cull: newExtent cull: aBlock</body><body package="Roassal2-Interactions">undoZoomEffect: anElement	| previousExtent |	previousExtent := anElement attributeAt: self attributeSymbol ifAbsent: [ ^ self ].	self setExtent: previousExtent for: anElement after: [ anElement removeAttributeAt: self attributeSymbol ifAbsent: [ nil ] ]</body></methods><methods><class-id>Roassal2.RTMouseHoverZoom</class-id> <category>public</category><body package="Roassal2-Interactions">animated	self animatedDuring: 0.3</body><body package="Roassal2-Interactions">animatedDuring: seconds	resizeStrategy := [ :anElement :newExtent :afterBlock |		anElement view addAnimation: (RTResizeMove new			toExtent: newExtent during: seconds on: anElement;			after: afterBlock) ].</body><body package="Roassal2-Interactions">desiredExtent: anExtentOrOneArgBlock	desiredExtent := anExtentOrOneArgBlock.</body><body package="Roassal2-Interactions">simple	resizeStrategy := [ :anElement :newExtent :afterBlock |		anElement extent: newExtent.		afterBlock value.		anElement signalUpdate. ].</body></methods><methods><class-id>Roassal2.RTMouseHoverZoom</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	ratio := self defaultRatio.	desiredExtent := [ :anElement | anElement extent * ratio ].	zoomInElements := OrderedCollection new.	self animated.</body></methods><methods><class-id>Roassal2.RTMouseHoverZoom</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	element when: TRMouseEnter do: [ :anEvent |		self doZoomEffect: element ].		element when: TRMouseLeave do: [ :anEvent |		self undoZoomEffect: element ]</body></methods><methods><class-id>Roassal2.RTResetAllShape</class-id> <category>accessing</category><body package="Roassal2-Interactions">addedIn: aTRCanvas	self trCanvas: aTRCanvas</body><body package="Roassal2-Interactions">start	self resetShapes</body><body package="Roassal2-Interactions">trCanvas	^ trCanvas</body><body package="Roassal2-Interactions">trCanvas: anObject	trCanvas := anObject</body></methods><methods><class-id>Roassal2.RTResetAllShape</class-id> <category>refreshing</category><body package="Roassal2-Interactions">refresh	self resetShapes</body></methods><methods><class-id>Roassal2.RTResetAllShape</class-id> <category>testing</category><body package="Roassal2-Interactions">hasCompleted	^ false</body></methods><methods><class-id>Roassal2.RTResetAllShape</class-id> <category>action</category><body package="Roassal2-Interactions">resetShapes	trCanvas shapes do: #resetPath</body></methods><methods><class-id>Roassal2.RTTimeline</class-id> <category>accessing - computed</category><body package="Roassal2-Builder-Timeline">indexOfLineIdentifier: anIdentifier	^ self lineIdentifiers indexOf: anIdentifier</body><body package="Roassal2-Builder-Timeline">lineIdentifiers	^ (sets flatCollect: #lineIdentifiers) removeDuplicates; yourself</body><body package="Roassal2-Builder-Timeline">numberOfEvents	^ sets inject: 0 into: [ :sum :aSet | sum + aSet numberOfObjects ]</body><body package="Roassal2-Builder-Timeline">numberOfLines	^ self lineIdentifiers size</body><body package="Roassal2-Builder-Timeline">numberOfSets	^ sets size</body></methods><methods><class-id>Roassal2.RTTimeline</class-id> <category>private - utility</category><body package="Roassal2-Builder-Timeline">label: aString on: position	"Add a label in the view"	| e |	e := timelineLabelBuilder elementOn: aString.	e translateTo: position.	self view add: e.	^ e</body><body package="Roassal2-Builder-Timeline">labelOffsetBetweenLines	^ 10</body><body package="Roassal2-Builder-Timeline">lineIdentifierLabels	^ self lineIdentifiers collect: [ :i | (timelineLabel rtValue: i) asString ]</body><body package="Roassal2-Builder-Timeline">renderTimeLineLabels	| labels position labelElements halfVerticalStep |	labels := self lineIdentifierLabels.	labelElements := RTGroup new.	labels		doWithIndex:			[ :aLabel :index | 			position := self getPixelPositionOf: 0 @ index.			labelElements add: (self label: aLabel on: position) ].	halfVerticalStep := (self getPixelPositionOf: 0 @ 1) y / -2.	RTAlignment new		elements: labelElements;		right.	labelElements		translateBy:			(labelElements extent x / 2 + self labelOffsetBetweenLines) negated @ halfVerticalStep</body><body package="Roassal2-Builder-Timeline">setsComputeMinAndMax	"We are here compute the minimum and maximum of the timeline (X-axis, Y-axis)"	| globalMin globalMax |	self numberOfSets = 0 ifTrue: [ ^ self ].		globalMin := (sets collect: #localMin) min.	globalMax := (sets collect: #localMax) max.		sets do: [ :s | s globalMin: globalMin ].	sets do: [ :s | s globalMax: globalMax ].		self maxX: globalMax.	self maxY: self numberOfLines.</body></methods><methods><class-id>Roassal2.RTTimeline</class-id> <category>initialization</category><body package="Roassal2-Builder-Timeline">gapBetweenTimeLines	^ 3</body><body package="Roassal2-Builder-Timeline">initialize	super initialize.	sets := OrderedCollection new.	elements := OrderedCollection new.	timelineLabelBuilder := RTBuilder new.	timelineLabelBuilder shape label.	timelineLabel := #yourself.	self axisY noTick; noLabel.</body></methods><methods><class-id>Roassal2.RTTimeline</class-id> <category>accessing</category><body package="Roassal2-Builder-Timeline">elements	^ elements</body><body package="Roassal2-Builder-Timeline">timelineLabel	^ timelineLabel</body><body package="Roassal2-Builder-Timeline">timelineLabel: symbolOrBlock	timelineLabel := symbolOrBlock</body><body package="Roassal2-Builder-Timeline">timelineLabelBuilder	^ timelineLabelBuilder</body></methods><methods><class-id>Roassal2.RTTimeline</class-id> <category>hooks</category><body package="Roassal2-Builder-Timeline">renderIn: aView	self setsComputeMinAndMax.	self defineAxesIfNecessary.		self renderAllDecoratorsBehind.	elements := OrderedCollection new.	sets do: [ :aSet | 			aSet renderIn: aView using: self.			elements addAll: aSet elements ].	self renderAxis.		self renderAllDecoratorsInFront.	self renderTimeLineLabels.</body></methods><methods><class-id>Roassal2.RTTimeline</class-id> <category>adding</category><body package="Roassal2-Builder-Timeline">add: aTimeLineSet	sets add: aTimeLineSet</body></methods><methods><class-id>Roassal2.RTExtremityLineDecoration</class-id> <category>accessing</category><body package="Roassal2-LineDecorations">shape	^ shape</body><body package="Roassal2-LineDecorations">shape: aShape	shape := aShape</body></methods><methods><class-id>Roassal2.RTExtremityLineDecoration</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ self shape trachelShapeClass</body></methods><methods><class-id>Roassal2.RTExtremityLineDecoration</class-id> <category>converting</category><body package="Roassal2-LineDecorations">asHead	^ RTLineHead shape: self shape</body><body package="Roassal2-LineDecorations">asTail	^ RTLineTail shape: self shape</body></methods><methods><class-id>Roassal2.RTExtremityLineDecoration</class-id> <category>private</category><body package="Roassal2-LineDecorations">trachelShapeFor: anEdge from: fromPoint to: toPoint	| tShape |	tShape := self trachelShapeClass		from: fromPoint		to: toPoint		width: (self widthFor: anEdge)		size: (self mySize rtValue: anEdge)		color: (self colorFor: anEdge)		stroke: (self colorFor: anEdge).	tShape baseSize: (baseSize rtValue: anEdge).	^ tShape</body><body package="Roassal2-LineDecorations">updateFor: anEdge trachelShape: trachelShape from: fromPoint to: toPoint	trachelShape		from: fromPoint;		to: toPoint;		color: (self colorFor: anEdge);		width: (self widthFor: anEdge);		resetPath</body></methods><methods><class-id>Roassal2.RTExtremityLineDecoration</class-id> <category>initialization</category><body package="Roassal2-LineDecorations">initialize	super initialize.	self shape: RTSimpleArrow</body></methods><methods><class-id>Roassal2.RTExtremityLineDecoration class</class-id> <category>instance creation</category><body package="Roassal2-LineDecorations">shape: aShape	^ self new		shape: aShape;		yourself</body></methods><methods><class-id>Roassal2.RTLineHead</class-id> <category>public</category><body package="Roassal2-LineDecorations">trachelShapeFor: anEdge	| fromPoint |	fromPoint := attachPoint startingPointOf: anEdge.	line		ifNotNil:			[ | lineShape |			lineShape := line trachelShapeFor: anEdge.			lineShape class = TRBezierShape				ifTrue: [ fromPoint := lineShape points allButLast last ] ].	anEdge shape class = RTArcLine &amp; (attachPoint class = RTBorderAttachPoint)		ifTrue:			[ fromPoint := attachPoint				attachPointFor: anEdge				from: (anEdge to encompassingRectangle expandBy: 10)				to: anEdge to encompassingRectangle ].	^ self trachelShapeFor: anEdge from: fromPoint</body><body package="Roassal2-LineDecorations">trachelShapeFor: anEdge from: aPoint	^ self trachelShapeFor: anEdge from: aPoint to: (attachPoint endingPointOf: anEdge)</body></methods><methods><class-id>Roassal2.RTLineHead</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">updateFor: edge trachelShape: trachelShape	| fromPoint |	fromPoint := attachPoint startingPointOf: edge.	line		ifNotNil: [ 			| lineShape |			lineShape := edge trachelShape.			lineShape class = TRBezierShape				ifTrue: [ fromPoint := lineShape points allButLast last ] ].	edge shape class = RTArcLine &amp; (attachPoint class = RTBorderAttachPoint)		ifTrue:			[ fromPoint := attachPoint				attachPointFor: edge				from: (edge to encompassingRectangle expandBy: 1)				to: edge to encompassingRectangle ].	self updateFor: edge trachelShape: trachelShape from: fromPoint</body><body package="Roassal2-LineDecorations">updateFor: anEdge trachelShape: trachelShape from: aPoint	self		updateFor: anEdge		trachelShape: trachelShape		from: aPoint		to: (attachPoint endingPointOf: anEdge)</body></methods><methods><class-id>Roassal2.RTLineHead</class-id> <category>converting</category><body package="Roassal2-LineDecorations">asHead	^ self</body></methods><methods><class-id>Roassal2.RTSVGBitmap</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">box	^ box</body><body package="Roassal2-Exporter-SVG">box: anObject	box := anObject</body><body package="Roassal2-Exporter-SVG">element: anElement form: aForm box: aRectangle	self element: anElement.	self form: aForm.	self box. aRectangle.</body><body package="Roassal2-Exporter-SVG">form	^ form</body><body package="Roassal2-Exporter-SVG">form: anObject	form := anObject</body></methods><methods><class-id>Roassal2.RTSVGBitmap</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addForm: stream	stream		nextPutAll: ' xlink:href="data:image/png;base64,',form,'" '</body><body package="Roassal2-Exporter-SVG">addOn: stream using: aSVGVisitor	aSVGVisitor names at: self element put: self id.	self openDef: stream.	self addPosition: stream.	self addWidth: (self box width rounded) height: (self box height rounded) into: stream.	self addForm: stream.	self startClass: stream.	self closeTag: stream.	self addExternalInteractions: aSVGVisitor.	self closeDef: stream.</body><body package="Roassal2-Exporter-SVG">addPosition: stream	stream		nextPutAll:				('x="&lt;1p&gt;" y="&lt;2p&gt;" ' expandMacrosWith: self box topLeft x rounded with: self box topLeft y rounded).</body></methods><methods><class-id>Roassal2.RTSVGBitmap</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	self type: 'image'.	self label: 'bitmap'</body></methods><methods><class-id>Roassal2.RTRectangleTreeMap</class-id> <category>accesing</category><body package="Roassal2-Builder-TreeMap">addSubrectangle: aTreeRectangle	self subrectangles add: aTreeRectangle.	self currentSubrectangle: aTreeRectangle.</body><body package="Roassal2-Builder-TreeMap">corner: anObject	corner := anObject.</body><body package="Roassal2-Builder-TreeMap">currentSubrectangle	^ currentSubrectangle ifNil: [ currentSubrectangle := self ]</body><body package="Roassal2-Builder-TreeMap">currentSubrectangle: anObject	currentSubrectangle := anObject</body><body package="Roassal2-Builder-TreeMap">inset	^ inset</body><body package="Roassal2-Builder-TreeMap">inset: anObject	inset := anObject</body><body package="Roassal2-Builder-TreeMap">origin: anObject	origin := anObject</body><body package="Roassal2-Builder-TreeMap">subrectangles	^ subrectangles ifNil: [subrectangles := OrderedCollection new].</body></methods><methods><class-id>Roassal2.RTRectangleTreeMap</class-id> <category>utils</category><body package="Roassal2-Builder-TreeMap">computeHorizontalRemainingSubrectangleFrom: row	| areaToLayout remainingSubrectangle currentRect currentOrigin |		areaToLayout := row inject: 0 into: [ :s :e | s + (e attributes at: #area) ].		remainingSubrectangle := RTRectangleTreeMap new.		currentRect := self currentSubrectangle.	currentOrigin := currentRect origin.		remainingSubrectangle origin: ((currentOrigin x + (areaToLayout / currentRect height)) @ currentOrigin y).	remainingSubrectangle corner: currentRect corner.		^ remainingSubrectangle.</body><body package="Roassal2-Builder-TreeMap">computeRemainingSubrectangleFrom: row	(self currentSubrectangle isHorizontal)		ifTrue: [^ self computeHorizontalRemainingSubrectangleFrom: row ]		ifFalse: [ ^ self computeVerticalRemainingSubrectangleFrom: row ]</body><body package="Roassal2-Builder-TreeMap">computeVerticalRemainingSubrectangleFrom: row	| areaToLayout remainingSubrectangle currentRect currentOrigin |		areaToLayout := row inject: 0 into: [ :s :e | s + (e attributes at: #area) ].		remainingSubrectangle := RTRectangleTreeMap new.		currentRect := self currentSubrectangle.	currentOrigin := currentRect origin.		remainingSubrectangle origin: ((currentOrigin x) @ ((currentOrigin y) + (areaToLayout / currentRect width))).	remainingSubrectangle corner: currentRect corner.		^ remainingSubrectangle.</body><body package="Roassal2-Builder-TreeMap">shortestSide	^ self width min: self height</body></methods><methods><class-id>Roassal2.RTRectangleTreeMap</class-id> <category>testing</category><body package="Roassal2-Builder-TreeMap">isHorizontal	^ (self width &gt;= self height)</body></methods><methods><class-id>Roassal2.RTRectangleTreeMap</class-id> <category>initialization</category><body package="Roassal2-Builder-TreeMap">initialize	super initialize.	inset := 0.</body></methods><methods><class-id>Roassal2.RTRectangleTreeMap class</class-id> <category>instance initialization</category><body package="Roassal2-Builder-TreeMap">fromContainerBounds: aRectangle withInset: anInteger	| treeRectangle relativeOrigin relativeCorner |	treeRectangle := self new.	treeRectangle inset: anInteger.	relativeOrigin := aRectangle origin-(aRectangle extent/2).	relativeCorner := aRectangle corner- (aRectangle extent /2).	((aRectangle width &lt; (anInteger * 2)) or: [ aRectangle height &lt; (anInteger * 2) ])		ifTrue: [ treeRectangle origin: relativeOrigin; corner: relativeCorner.]		ifFalse: [ 			treeRectangle origin: relativeOrigin +anInteger; 			corner: relativeCorner -anInteger   ].	^ treeRectangle</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>actions</category><body package="Roassal2-Core">clean	"Remove all the elements of the view. It does not remove elements that are directly added to the canvas however"	"Iterate over the original collections until they are empty. It's done this way because removal of one element can remove another one via TRRemoveCallback (e.g. RTViewTest&gt;&gt;testCleaningViewWithCallback)."	[ self elements isNotEmpty ] whileTrue: [ self elements anyOne remove ].	[ self edges isNotEmpty ] whileTrue: [ self edges anyOne remove ]</body><body package="Roassal2-Core">cleanAll	"Clean out everything, both the view and the canvas. It means that elements added to the canvas are cleaned out"	self clean.	self canvas clean</body><body package="Roassal2-Core">pushBackEdges	"Move all the edges in the background"	self edges do: [ :e | e trachelShape pushBack ]</body><body package="Roassal2-Core">pushFrontEdges	"Move all the edges in the front"	self edges do: [ :e | e trachelShape pushFront ]</body><body package="Roassal2-Core">removeEdge: anEdge	"Remove an edge from the view"	edges remove: anEdge ifAbsent: [ ].	anEdge trachelShape remove.</body><body package="Roassal2-Core">resetCamera	TRCameraInitializer reset</body><body package="Roassal2-Core">restoreCamera	"Reuse a previous camera. This is useful when scripting in a playground"	self view numberOfElements = 0		ifTrue: [ self resetCamera ].	self view canvas camera toAdjust: TRCameraInitializer restorePrevious</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>adding - removing</category><body package="Roassal2-Core">add: anElementOrAnEdge	"An element or an edge may be provided here"	"The elements or edges variables grow respectively"	self assert: [ anElementOrAnEdge ~= nil ] description: 'Nil cannot be added to a view'.		anElementOrAnEdge addedIn: self.	anElementOrAnEdge renderOn: trCanvas</body><body package="Roassal2-Core">addAll: someElements	"	:: Collection -&gt; RTView	"	"Add a number of of elements to the view"	someElements do: [ :el | self add: el ]</body><body package="Roassal2-Core">addAnimation: animation	trCanvas addAnimation: animation</body><body package="Roassal2-Core">addEdge: anEdge	"Add an edge to the view. Extremity elements may or may not be in the view"	edges add: anEdge</body><body package="Roassal2-Core">addElement: anElement	elements add: anElement</body><body package="Roassal2-Core">addFromView: aView	"Add all the elements and edges from aView to self"	self addAll: aView elements , aView edges</body><body package="Roassal2-Core">animations	^ trCanvas animations</body><body package="Roassal2-Core">removeAllEdges	"Remove all the edges"	 	edges := OrderedCollection new. 	self canvas resetLineShapes. 	self elements do: #removeConnectedEdges</body><body package="Roassal2-Core">removeAllElements	"Remove all the elements found in the view. 	CAUTION: this does not trigger a remove event per elements"	self initializeContent.	self canvas resetShapes.</body><body package="Roassal2-Core">removeAnimation: animation	trCanvas removeAnimation: animation</body><body package="Roassal2-Core">removeEdges: someEdges	"	:: Collection -&gt; RTView	"		someEdges do: #remove	"In case we are trying to remove everything, as it may happen with the cachetor""	(someEdges asArray = edges asArray) ifTrue: [ 		edges := OrderedCollection new. 		self canvas resetLineShapes. 		^ self ]."	"	edges := edges copyWithoutAll: someEdges.	self canvas removeShapes: (someEdges collect: #trachelShape)."</body><body package="Roassal2-Core">removeElement: anElement	elements remove: anElement ifAbsent: [ ].	anElement trachelShape remove.</body><body package="Roassal2-Core">removeElements: someElements	"	:: Collection -&gt; RTView	"	someElements do: #remove	"In case we are trying to remove everything, as it may happen with the cachetor""	(someElements asArray = elements asArray) ifTrue: [ 		self initializeContent.		self canvas resetShapes. 		^ self ]."		"	elements := elements copyWithoutAll: someElements.	self canvas removeShapes: (someElements collect: #trachelShape)."</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>accessing</category><body package="Roassal2-Core">canvas	"Return the trachel canvas on which everything is drawn"	^ trCanvas</body><body package="Roassal2-Core">edges	"	:: Void -&gt; Collection	"	^ edges copy</body><body package="Roassal2-Core">elements	"	:: Void -&gt; RTGroup	"	^ RTGroup withAll: elements</body><body package="Roassal2-Core">setCanvas: aTrachelCanvas	trCanvas := aTrachelCanvas.	"Share my announcer with the one of the Trachel Canvas"	announcer := trCanvas announcer.</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>accessing-computed</category><body package="Roassal2-Core">edgeFromModel: anObject	"Return an edge that corresponds to the object provided as parameter. If none is found, then return nil"	^ edges detect: [ :edge | edge model = anObject ] ifNone: [ nil ]</body><body package="Roassal2-Core">elementFromModel: anObject	"	:: Object -&gt; RTElement	"	"Return an element that corresponds to the object provided as parameter. If none is found, then return nil"	^ elements elementFromModel: anObject</body><body package="Roassal2-Core">elementsFromModel: anObject	"Return an element that corresponds to the object provided as parameter. If none is found, then return nil"	^ elements elementsFromModel: anObject</body><body package="Roassal2-Core">elementsFromModels: objects	"Return elements that corresponds to the objects provided as parameter. If none is found, then return an empty collection"	^ elements elementsFromModels: objects</body><body package="Roassal2-Core">numberOfEdges	"Return the number of edges containde in the view"	^ edges size</body><body package="Roassal2-Core">numberOfElements	^ elements size</body><body package="Roassal2-Core">theme	"Return the theme currently used. A theme is an instance of a subclass of TRAbstractTheme"	^ self canvas theme</body><body package="Roassal2-Core">trachelShape	"	:: Void -&gt; String	"	^ TRNoShape instance</body><body package="Roassal2-Core">view	"This method is meant to be used polymorphically with builders.	Thus, regardless of whether we get a raw view or a builder, we 	can uniformly obtain the view"	^ self</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>menu</category><body package="Roassal2-Core">addFindMenu		self addMenu: 'Find' callback: [ |element|		element := TRPlatform current dialogChooseFrom: (self elements collect: #model) values: self elements.		element notNil			ifTrue: [ self canvas camera translateTo: element position. RTBlink on: element ] ].</body><body package="Roassal2-Core">addLayoutMenu	"Simply add some useful menu		:: Void -&gt; RTView	var b : RTMenuBuilder	var translator : RTSmoothLayoutTranslator	"	| b translator |	translator := RTSmoothLayoutTranslator new.	b := RTMenuBuilder new view: self.	b menu: 'Layout' submenu: 'grid' background: Color yellow callback: [ RTGridLayout new translator: translator; on: self elements. self canvas signalUpdate ].	b menu: 'Layout' submenu: 'hori' background: Color yellow callback: [ RTHorizontalLineLayout new translator: translator; on: self elements. self canvas signalUpdate ].	b menu: 'Layout' submenu: 'tree' background: Color yellow callback: [ RTTreeLayout new translator: translator; on: self elements edges: self edges. self canvas signalUpdate ].	b menu: 'Layout' submenu: 'treeH' background: Color yellow callback: [ RTHorizontalTreeLayout new translator: translator; on: self elements edges: self edges. self canvas signalUpdate ].	b menu: 'Layout' submenu: 'cluster' background: Color yellow callback: [ RTClusterLayout new translator: translator; on: self elements edges: self edges. self canvas signalUpdate ].	b menu: 'Layout' submenu: 'circle' background: Color yellow callback: [ RTCircleLayout new translator: translator; on: self elements edges: self edges. self canvas signalUpdate ].	b menu: 'Layout' submenu: 'radial' background: Color yellow callback: [ RTRadialTreeLayout new translator: translator; on: self elements edges: self edges. self canvas signalUpdate ].	b menu: 'Layout' submenu: 'sugi' background: Color yellow callback: [ RTSugiyamaLayout new translator: translator; on: self elements edges: self edges. self canvas signalUpdate ].	b build</body><body package="Roassal2-Core">addMenu: aTitle callback: aBlock	self canvas addMenu: aTitle callback: aBlock</body><body package="Roassal2-Core">setDefaultMenu	"	:: Void -&gt; RTView	var b : RTMenuBuilder	"	"Simply add some useful menu"	| b |	b := RTMenuBuilder new view: self.	b menu: 'In' callback: [ RTZoomInMove on: self ].	b menu: 'Out' callback: [ RTZoomOutMove on: self ].	b menu: 'Center' callback: [ self canvas focusOnCenterScaled. self signalUpdate ].	b menu: 'Export' submenu: 'HTML' background: Color blue trans 		callback: [ RTHTML5Exporter interactiveExport: self ].	b menu: 'Export' submenu: 'SVG' 		callback: [ RTSVGExporter interactiveExportViewAsSVG: self ].	b menu: 'Export' submenu: 'PNG' 		callback: [ RTPNGExporter new builder: self; fileName: 'roassal.png'; exportToFile ].		(Smalltalk allClasses anySatisfy: [ :c | c name == #RTPDFExporter ])		ifTrue: [ b menu: 'Export' submenu: 'PDF' callback: [ (Smalltalk at: #RTPDFExporter) exportView: self ]. ].	b render</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>initialization</category><body package="Roassal2-Core">initialize	super initialize.	self initializeContent.	self setCanvas: TRCanvas new</body><body package="Roassal2-Core">initializeContent	elements := RTGroup new.	edges := RTGroup new</body><body package="Roassal2-Core">setUpCanvas	"Make the camera point on the center of the visualization"	trCanvas camera adjust.	^ trCanvas</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>announce</category><body package="Roassal2-Core">announce: anEvent	anEvent canvas: self canvas.	super announce: anEvent</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>opening</category><body package="Roassal2-Core">build	"do nothing. This method is used polymorphically with builders"</body><body package="Roassal2-Core">open	^ self setUpCanvas open</body><body package="Roassal2-Core">openInWindowSized: anExtentAsPoint	^ self setUpCanvas openInWindowSized: anExtentAsPoint</body><body package="Roassal2-Core">openInWindowSized: anExtentAsPoint titled: aTitle	^ self setUpCanvas openInWindowSized: anExtentAsPoint titled: aTitle</body><body package="Roassal2-Core">openRaw	"Simply open the canvas. No menu is added, no centering of the camera is done"	^ trCanvas open</body><body package="Roassal2-Core">openTitled: aTitle	^ self setUpCanvas openTitled: aTitle</body><body package="Roassal2-Core">openWithMenu	"	:: Void -&gt; Object	"	self canvas addMenu: 'In' callback: [ RTZoomInMove on: self ].	self canvas addMenu: 'Out' callback: [ RTZoomOutMove on: self ].	^ self open</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>convenient</category><body package="Roassal2-Core">signalUpdate	"Force the view to be refreshed. Useful in case some elements have changed"	^ self canvas signalUpdate</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>testing</category><body package="Roassal2-Core">isView	^ true</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>visitor</category><body package="Roassal2-Core">accept: aVisitor	aVisitor visitView: self</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>convertion</category><body package="Roassal2-Core">asElement	| e |	e := RTBox compoundElement.	e addAll: self elements.	^ e</body><body package="Roassal2-Core">asElementOn: aModel	| e |	e := RTBox compoundElementOn: aModel.	e addAll: self elements.	^ e</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>*Roassal2GT-Glamour</category><body package="Roassal2-Core">openWithToolbarEntitled: aTitle	^ self openWithToolbar title: aTitle</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>user interface</category><body package="Roassal2-Extentions">inspectorClasses	^Array		with: Roassal2Inspector		with: Tools.Trippy.BasicInspector</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>printing</category><body package="Roassal2-Extentions">storeString	^ 'self roassalView'.</body></methods><methods><class-id>Roassal2.GLineSegment</class-id> <category>geometry</category><body package="Roassal2-Pharo">angleInDeg	^ self vector degrees</body><body package="Roassal2-Pharo">angleInRad	^ self angleInDeg degreesToRadians</body><body package="Roassal2-Pharo">cotan	| vector |	vector := self vector.	vector y isZero		ifTrue: [ ^ nil ].	^ vector x / vector y</body><body package="Roassal2-Pharo">length	^ self vector r</body><body package="Roassal2-Pharo">parameters	| k q |	"y = kx + q	k = (y2-y1) / (x2-x1)	q = y1 - k * x1	"	k := (to y - from y) / (to x - from x).	q := from y - (k * from x).	^ Array with: k with: q</body><body package="Roassal2-Pharo">pointForBalance: aNumber	"Return point on the line as specified by the balance.	Balance is		\in &lt;0,1&gt; for relative (e.g. 0 start, 1 end, 0.5 middle).		&gt;1 for absolute starting from source (e.g. '10' is 10 pixels from the FROM)		&lt;1 for absolute starting from end (e.g. '-10' is 10 pixesl from the TO)	"	| balance |	balance := aNumber.	(aNumber between: 0 and: 1)		ifTrue: [ balance := self length * aNumber ].	balance &lt; 0		ifTrue: [ balance := self length - balance negated ].	^ self length &gt; 0		ifTrue: [ from + (self vector / self length * balance) ]		ifFalse: [ from ]</body><body package="Roassal2-Pharo">sideOfPoint: aPoint	"Compute on which side of the segment a point is.	For line going from left A=(a_x, a_y) to right B=(b_x, b_y) the value is	d = (x - a_x)(b_y - a_y) - (y - a_y)(b_x - a_x)	1 - above the line	0 - on the line  -1 - below the line	"	^ ((aPoint x - from x) * (to y - from y) - ((aPoint y - from y) * (to x - from x))) sign</body><body package="Roassal2-Pharo">tan	| vector |	vector := self vector.	vector x isZero		ifTrue: [ ^ nil ].	^ vector y / vector x</body><body package="Roassal2-Pharo">transposed	^ self class from: from transposed to: to transposed</body><body package="Roassal2-Pharo">vector	^ to - from</body></methods><methods><class-id>Roassal2.GLineSegment</class-id> <category>accessing</category><body package="Roassal2-Pharo">bottom	^ from y &lt; to y		ifTrue: [ from ]		ifFalse: [ to ]</body><body package="Roassal2-Pharo">from	^ from</body><body package="Roassal2-Pharo">from: fromPoint	from := fromPoint</body><body package="Roassal2-Pharo">from: fromPoint to: toPoint	from := fromPoint.	to := toPoint.</body><body package="Roassal2-Pharo">left	^ from x &lt; to x		ifTrue: [ from ]		ifFalse: [ to ]</body><body package="Roassal2-Pharo">right	^ from x &gt; to x		ifTrue: [ from ]		ifFalse: [ to ]</body><body package="Roassal2-Pharo">to	^ to</body><body package="Roassal2-Pharo">to: toPoint	to := toPoint</body><body package="Roassal2-Pharo">top	^ from y &gt; to y		ifTrue: [ from ]		ifFalse: [ to ]</body></methods><methods><class-id>Roassal2.GLineSegment</class-id> <category>intersecting</category><body package="Roassal2-Pharo">intersect: otherShape	^ otherShape intersectLineSegment: self</body><body package="Roassal2-Pharo">intersectCircle: aCircle	| e l d det t1 t2 a b c result root |	e := from - aCircle center.	l := to - aCircle center.	d := l - e.	a := d x squared + d y squared.	b := 2 * e x * d x + (2 * e y * d y).	c := e x squared + e y squared - aCircle radius squared.	det := b squared - (4 * a * c).	det &lt; 0		ifTrue: [ ^ #() ].	a = 0		ifTrue: [ ^ #() ].	root := det sqrt.	t1 := (b negated + root) / (2 * a).	t2 := (b negated - root) / (2 * a).	result := (Set with: t1 with: t2) collect: [ :each | e + (each * d) + aCircle center ].	^ (result select: [ :each | each onLineFrom: self from to: self to ]) asArray</body><body package="Roassal2-Pharo">intersectCircleArc: aCircleArc	| intersections |	intersections := self intersectCircle: aCircleArc circle.	intersections ifEmpty: [ ^ #() ].	^ intersections		select: [ :each | 			| angle |			angle := ((each y - aCircleArc center y) negated arcTan: each x - aCircleArc center x)				% Float twoPi.			angle between: aCircleArc startAngle and: aCircleArc endAngle ]</body><body package="Roassal2-Pharo">intersectEllipse: anEllipse	| hr_sq vr_sq lp ldir diff mdir mdiff a b c det result |	hr_sq := anEllipse a squared.	vr_sq := anEllipse b squared.	lp := Array with: from with: to.		ldir := lp second - lp first.	diff := lp first - anEllipse center.	mdir := ldir x / hr_sq @ (ldir y / vr_sq).	mdiff := diff x / hr_sq @ (diff y / vr_sq).		a := ldir dotProduct: mdir.	b := ldir dotProduct: mdiff.	c := (diff dotProduct: mdiff) - 1.	det := b squared - a*c.	a = 0 ifTrue: [ ^#() ].		result := OrderedCollection new.	det = 0 ifTrue: [ |t|		t := b negated / a.		result add: (lp first + ((lp second - lp first) * t))	].	(det &gt; 0) ~= false ifTrue: [ |root t_a t_b|		root := det sqrt.		t_a := b negated - root / a.		t_b := b negated + root / a.		result add: (lp first + ((lp second - lp first) * t_a)).		result add: (lp first + ((lp second - lp first) * t_b)).	].	^ result select: [ :each | each onLineFrom: self from to: self to ]</body><body package="Roassal2-Pharo">intersectEllipseOld: anEllipse	| hr_sq vr_sq lp ldir diff mdir mdiff a b c det result |	hr_sq := anEllipse a squared.	vr_sq := anEllipse b squared.	lp := Array with: from with: to.		ldir := lp second - lp first.	diff := lp first - anEllipse center.	mdir := ldir x / hr_sq @ (ldir y / vr_sq).	mdiff := diff x / hr_sq @ (diff y / vr_sq).		a := ldir dotProduct: mdir.	b := ldir dotProduct: mdiff.	c := (diff dotProduct: mdiff) - 1.	det := b squared - a*c.		result := OrderedCollection new.	det = 0 ifTrue: [ |t|		t := b negated / a.		result add: (lp first + ((lp second - lp first) * t))	].	(det &gt; 0) ~= false ifTrue: [ |root t_a t_b|		root := det sqrt.		t_a := b negated - root / a.		t_b := b negated + root / a.		result add: (lp first + ((lp second - lp first) * t_a)).		result add: (lp first + ((lp second - lp first) * t_b)).	].	^ result select: [ :each | each onLineFrom: self from to: self to ]</body><body package="Roassal2-Pharo">intersectEllipseOlder: anEllipse	"collection of points of intersection with a GEllipse.	Assume centered ellipse so move myself a bit		\frac{x^2}{a^2} + \frac{y^2}{b^2} = 1		z = a^2k^2 + b^2	D = z - q^2	x12 = \frac{a^2kq}{z} \pm \frac{ab}{z}\sqrt{D}	y12 = \frac{b^2q}{z} \pm \frac{abk}{z}\sqrt{D}	"	| me z D k q a b |"	me := self class from: self from - anEllipse center to: self to - anEllipse center."	me := self.	a := anEllipse a.	b := anEllipse b.	k := me parameters first.	q := me parameters second.	z := a squared * k squared + b squared.	D := z - q squared.	self haltOnce.	"No solutions"	D &lt; 0		ifTrue: [ ^ #() ].	"One solution"	D = 0		ifTrue: [ ^ Array with: ((a squared * k * q / z) @ (b squared * q / z) + anEllipse center) ].	"Two solutions"	^ Array		with:			anEllipse center				+					((a squared * k * q / z + (a * b * D sqrt / z))						@ (b squared * q / z + (a * b * k * D sqrt / z)))		with:			anEllipse center				+					((a squared * k * q / z - (a * b * D sqrt / z))						@ (b squared * q / z - (a * b * k * D sqrt / z)))</body><body package="Roassal2-Pharo">sintersectEllipse: anEllipse	"collection of points of intersection with a GEllipse.	Assume centered ellipse so move myself a bit		\frac{x^2}{a^2} + \frac{y^2}{b^2} = 1		z = a^2k^2 + b^2	D = z - q^2	x12 = \frac{a^2kq}{z} \pm \frac{ab}{z}\sqrt{D}	y12 = \frac{b^2q}{z} \pm \frac{abk}{z}\sqrt{D}	"	| me z D k q a b |	"	me := self class from: self from - anEllipse center to: self to - anEllipse center."	me := self.	a := anEllipse a.	b := anEllipse b.	k := me parameters first.	q := me parameters second.	z := a squared * k squared + b squared.	D := z - q squared.	"No solutions"	D &lt; 0		ifTrue: [ ^ #() ].	"One solution"	D = 0		ifTrue: [ ^ Array with: ((a squared * k * q / z) @ (b squared * q / z) + anEllipse center) ].	"Two solutions"	^ Array		with:			anEllipse center				+					((a squared * k * q / z + (a * b * D sqrt / z))						@ (b squared * q / z + (a * b * k * D sqrt / z)))		with:			anEllipse center				+					((a squared * k * q / z - (a * b * D sqrt / z))						@ (b squared * q / z - (a * b * k * D sqrt / z)))</body></methods><methods><class-id>Roassal2.GLineSegment</class-id> <category>private</category><body package="Roassal2-Pharo">intersectHorizontal: other	"Intersection with other line segment. Self must be horizontal (optimization purposes)"	| pt |	(pt := self intersectHorizontalLine: other) ifNil: [ ^ nil ].	pt x &lt; self left x | (pt x &gt; self right x) | (pt y &lt; other bottom y) | (pt y &gt; other top y)		ifTrue: [ ^ nil ].	^ pt</body><body package="Roassal2-Pharo">intersectHorizontalLine: other	"point of intersection of line on which line segment lies with line of other line segment or nil if parallel. Self must be horizontal (optimization purposes)"	| x y vector |	vector := other vector.	vector y isZero		ifTrue: [ ^ nil ].	y := self from y.	x := (self from y - other from y) * other cotan + other from x.	^ x @ y</body><body package="Roassal2-Pharo">intersectVertical: other	"Intersection with other line segment. Self must be vertical (optimization purposes)"	| pt |	pt := self transposed intersectHorizontal: other transposed.	pt ifNil: [ ^ nil ].	^ pt transposed</body><body package="Roassal2-Pharo">intersectVerticalLine: other	"point of intersection of line on which line segment lies with line of other line segment or nil if parallel. Self must be vertical (optimization purposes)"	| pt |	pt := self transposed intersectHorizontalLine: other transposed.	pt ifNil: [ ^ nil ].	^ pt transposed</body></methods><methods><class-id>Roassal2.GLineSegment</class-id> <category>testing</category><body package="Roassal2-Pharo">isHorizontal	^ from y = to y</body><body package="Roassal2-Pharo">isVertical	^ from x = to x</body></methods><methods><class-id>Roassal2.GLineSegment</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	super initialize.	from := 0 @ 0.	to := 0 @ 0</body></methods><methods><class-id>Roassal2.GLineSegment</class-id> <category>line forms</category><body package="Roassal2-Pharo">a	"value from normal form (ax + by + c) of line on which line segment lies on"	^ to y - from y</body><body package="Roassal2-Pharo">b	"value from normal form (ax + by + c) of line on which line segment lies on"	^ from x - to x</body><body package="Roassal2-Pharo">c	"value from normal form (ax + by + c) of line on which line segment lies on"	^ (self a * from x + (self b * from y)) negated</body></methods><methods><class-id>Roassal2.GLineSegment</class-id> <category>comparing</category><body package="Roassal2-Pharo">= anotherSegment	"Answer true if the receiver's species, from and to matches anotherSegment."	^ self species = anotherSegment species		ifTrue: [ ^ from = anotherSegment from and: [ to = anotherSegment to ] ]		ifFalse: [ ^ false ]</body><body package="Roassal2-Pharo">finiteLinesIntersectFrom: current to: next	| uat ubt uy z1 z2 z3 z4 ua ub |	z1 := from.	z2 := to.	z3 := current.	z4 := next.	uat := ((z4 x - z3 x)*(z1 y - z3 y))-((z4 y - z3 y)*(z1 x - z3 x)).	ubt := ((z2 x - z1 x)*(z1 y - z3 y))-((z2 y - z1 y)*(z1 x - z3 x)).	uy := ((z4 y - z3 y)*(z2 x - z1 x))-((z4 x - z3 x)*(z2 y - z1 y)).	uy isZero not ifTrue: [ 		ua := uat / uy.		ub := ubt / uy.		((ua between: 0 and: 1) and: [ ub between: 0 and: 1 ]) 			ifTrue: [ ^ (z1 x + (ua *(z2 x - z1 x)))@(z1 y + (ua *(z2 y - z2 y)))  ]			ifFalse: [ ^ nil ]		 ] 	ifFalse: [ 		(uat isZero or: [ ubt isZero ]) ifTrue: [ 			"Parallel, coincident lines. Check if overlap"			(Array with: z1 x with: z2 x with: z4 x) sort second = z4 x 				ifTrue: [ ^ z4 ].			(Array with: z1 x with: z2 x with: z3 x) sort second = z3 x 				ifTrue: [ ^ z3 ].			(Array with: z3 x with: z4 x with: z2 x) sort second = z2 x 				ifTrue: [ ^ z2 ].			^ nil. ]		ifFalse: [ ^ nil ].	 ]</body><body package="Roassal2-Pharo">hash	"Hash is reimplemented because = is implemented."	^ from hash bitXor: to hash</body><body package="Roassal2-Pharo">intersectLine: other	"point of intersection of line on which line segment lies with line of other line segment or nil if parallel"	| det x y |	self isHorizontal		ifTrue: [ ^ self intersectHorizontalLine: other ].	self isVertical		ifTrue: [ ^ self intersectVerticalLine: other ].	det := self a * other b - (other a * self b).	det isZero		ifTrue: [ ^ nil ].	x := (self b * other c - (other b * self c)) / det.	y := (other a * self c - (self a * other c)) / det.	^ x @ y</body><body package="Roassal2-Pharo">intersectLines: other	^ self intersectLine: other</body><body package="Roassal2-Pharo">intersectPolygon: polygon	"^ self intersectRectangle: polygon encompasingRectangle."	| intersections vertices next intersection |	intersections := Set new.	vertices := polygon vertices.	vertices doWithIndex: [ :current :i | 		next := i = vertices size			ifTrue: [ vertices first ]			ifFalse: [ vertices at: i+1 ].		intersection := self finiteLinesIntersectFrom: current to: next.		intersection 			ifNotNil: [ intersections add: intersection ] ].	^ intersections</body><body package="Roassal2-Pharo">intersectRectangle: aRectangle	"collection of points of intersection with not rotated rectangle"	| pts bottomLeft bottomRight topLeft topRight |	bottomLeft := aRectangle bottomLeft.	bottomRight := aRectangle bottomRight.	topLeft := aRectangle topLeft.	topRight := aRectangle topRight.	pts := Set new.	pts add: ((self class from: topLeft to: topRight) intersectHorizontal: self).	pts add: ((self class from: bottomLeft to: bottomRight) intersectHorizontal: self).	pts add: ((self class from: topLeft to: bottomLeft) intersectVertical: self).	pts add: ((self class from: topRight to: bottomRight) intersectVertical: self).	pts remove: nil ifAbsent: [  ].	^ pts</body><body package="Roassal2-Pharo">intersection: other	"point of intersection with other line segment or nil if it does not exists"	| intersection |	self isHorizontal		ifTrue: [ ^ self intersectHorizontal: other ].	self isVertical		ifTrue: [ ^ self intersectVertical: other ].	intersection := self intersectLines: other.	intersection ifNil: [ ^ nil ].	(intersection onLineFrom: self from to: self to) &amp; (intersection onLineFrom: other from to: other to)		ifFalse: [ ^ nil ].	^ intersection</body></methods><methods><class-id>Roassal2.GLineSegment class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">from: fromPoint to: toPoint	^ self new		from: fromPoint to: toPoint;		yourself</body><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Roassal2.RTSunburstConstantWidthLayout</class-id> <category>public</category><body package="Roassal2-Builder-Sunburst">layoutSunburst: el	| children arc parent depth radius totalPie a b s  auxAngle angleOffset block1 block2 |	children := el attributes at: builder childrenKey.	parent := el attributes at: #parent.	arc := el trachelShape.	depth := el attributes at: #depth.	block1 := [ | radius2 |		depth = 1			ifTrue: [ parent isNil 				ifTrue: [ self hasCenter 					ifTrue: [ radius := 0. radius2 := self centerWidth ] 					ifFalse: [ radius := 0. radius2 := 0 ] ]				ifFalse: [ self hasCenter 					ifTrue: [ radius := 0. radius2 := self centerWidth ] 					ifFalse: [ radius := self centerWidth+radialSpacing. radius2 := radius + self arcWidth ] ].				]			ifFalse: [ 				radius := ((depth = 2 and: [ (parent attributes at: #parent) isNil ])					ifTrue: [ self centerWidth ]					ifFalse: [ parent trachelShape externalRadius  ]) + self radialSpacing.				radius2 := radius + self arcWidth ].		arc			alphaAngle: arc alphaAngle			betaAngle: arc betaAngle			innerRadius: radius			externalRadius: radius2 ].	block2 := [ 		radius := depth = 0 			ifTrue: [ 0 ] 			ifFalse: [ parent isNil				ifTrue: [ self hasCenter ifTrue: [self centerWidth] ifFalse: [0] ]				ifFalse: [ self hasCenter ifTrue: [0] ifFalse: [self centerWidth] ] ].		arc			alphaAngle: 0			betaAngle: 360			innerRadius: 0			externalRadius: radius ].			depth = 0		ifTrue: block2		ifFalse: [ depth = 1 			ifTrue: [ parent isNil 				ifTrue: block2				ifFalse: block1. ]			ifFalse: block1 ].		children isEmpty ifTrue: [ ^ self ].	totalPie := builder weightOf: el. 	auxAngle := arc alphaAngle.	angleOffset := (arc betaAngle - arc alphaAngle)/totalPie.		children doWithIndex: [ :c :i |		a := auxAngle.		b := auxAngle + (angleOffset * (builder weightOf: c)	).		s := self angularSpacing.		auxAngle := b.		(b - a) &gt; s ifTrue: [ 			depth = 1 				ifTrue: [ b := b - (s/2). a := a + (s/2) ]				ifFalse: [ 					i = 1 						ifTrue: [ 							(children size &gt; 1) ifTrue: [b := b - (s/2)] ]						ifFalse: [ 							i = children size 								ifTrue: [ a := a + (s/2) ]								ifFalse: [ b := b - (s/2). a := a + (s/2) ] ] ] ].		c trachelShape			alphaAngle: a			betaAngle: b			innerRadius: 0			externalRadius: 0.		self layoutSunburst: c.		 ].</body></methods><methods><class-id>Roassal2.RTSunburstConstantWidthLayout</class-id> <category>accesing</category><body package="Roassal2-Builder-Sunburst">arcWidth	^ arcWidth</body><body package="Roassal2-Builder-Sunburst">arcWidth: aNumber	arcWidth := aNumber</body><body package="Roassal2-Builder-Sunburst">centerWidth	^ centerWidth</body><body package="Roassal2-Builder-Sunburst">centerWidth: anObject	centerWidth := anObject</body></methods><methods><class-id>Roassal2.RTSunburstConstantWidthLayout</class-id> <category>initialization</category><body package="Roassal2-Builder-Sunburst">initialize	super initialize.	self arcWidth: 50.	self centerWidth: 50.</body></methods><methods><class-id>Roassal2.RTHorizontalTimelineDecorator</class-id> <category>hooks</category><body package="Roassal2-Builder-Timeline">render		| from to lineIdentifiers offset |	lineIdentifiers := builder lineIdentifiers.	identifiers do: [ :id |		values add: (lineIdentifiers indexOf: id)	].	values do: [ :aValue |		from := builder getPixelPositionOf: builder minX @ aValue.		to := builder getPixelPositionOf: builder maxX @ aValue.		offset := 0 @ (self gapBetweenTimeLines / 2).		self lineFrom: from - offset to: to - offset ]</body></methods><methods><class-id>Roassal2.RTHorizontalTimelineDecorator</class-id> <category>initialization</category><body package="Roassal2-Builder-Timeline">gapBetweenTimeLines	^ 3</body><body package="Roassal2-Builder-Timeline">initialize	super initialize.	identifiers := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTHorizontalTimelineDecorator</class-id> <category>adding</category><body package="Roassal2-Builder-Timeline">addLineAboveIdentifier: anIdentifier	"anIdentifier could be any object, not only a string"	identifiers add: anIdentifier</body></methods><methods><class-id>Roassal2.RTTextPath</class-id> <category>initialization</category><body package="Roassal2-Experimental">initialize	super initialize.	outlineWidth := 1.	outlineColor := self defaultColor.</body></methods><methods><class-id>Roassal2.RTTextPath</class-id> <category>accessing</category><body package="Roassal2-Experimental">colorFor: element	| res |	res := super colorFor: element.	res isColor ifFalse: [ 		res := Color colorFrom: res ].	^ res</body><body package="Roassal2-Experimental">outlineColor: aValueOrAOneArgBlock	self outlineColorElement: [ :e | aValueOrAOneArgBlock rtValue: e model ].</body><body package="Roassal2-Experimental">outlineColorElement	^ outlineColor</body><body package="Roassal2-Experimental">outlineColorElement: aValueOrAOneArgBlock	outlineColor := aValueOrAOneArgBlock</body><body package="Roassal2-Experimental">outlineColorFor: element	| res |	res := outlineColor rtValue: element.	res isColor ifFalse: [ res := Color colorFrom: res ].	^ res</body><body package="Roassal2-Experimental">outlineWidth	^ outlineWidth</body><body package="Roassal2-Experimental">outlineWidth: aValueOrAOneArgBlock	self outlineWidthElement: [ :e | aValueOrAOneArgBlock rtValue: e model ].</body><body package="Roassal2-Experimental">outlineWidthElement: aValueOrAOneArgBlock	outlineWidth := aValueOrAOneArgBlock</body><body package="Roassal2-Experimental">outlineWidthFor: element	^ outlineWidth rtValue: element</body></methods><methods><class-id>Roassal2.RTTextPath</class-id> <category>trachel shape production</category><body package="Roassal2-Experimental">trachelShapeForOneLine: anElement	| shape |	shape := TRTextPath new.	shape		text: (self textFor: anElement);		color: (self colorFor: anElement);		position: anElement position;		fontSize: (self heightFor: anElement);		fontName: (self fontNameFor: anElement);		outlineColor: (self outlineColorFor: anElement);		outlineWidth: (self outlineWidthFor: anElement).	^ shape</body></methods><methods><class-id>Roassal2.RTConstrainedDraggable</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	rectangle := (-5 @ -5) extent: (10 @ 10)</body></methods><methods><class-id>Roassal2.RTConstrainedDraggable</class-id> <category>hooks</category><body package="Roassal2-Interactions">constraintIfNecessary: anElement	| rec e deltaX deltaY |	rec := rectangle rtValue: anElement.		e := anElement encompassingRectangle.		(rec containsRect: e)		ifFalse: [ 			deltaX := 0.			deltaY := 0.			(e right &gt; rec right) ifTrue: [ deltaX := rec right - e right ].			(e left &lt; rec left) ifTrue: [ deltaX := rec left - e left ].			(e top &lt; rec top) ifTrue: [ deltaY := rec top - e top].			(e bottom &gt; rec bottom) ifTrue: [ deltaY := rec bottom - e bottom ].			anElement translateBy: deltaX @ deltaY			].			"In case the constraining rectangle is larger than the encompassing rectangle of the constrained element"	(rec height &lt;= e height) ifTrue: [ anElement translateTo: anElement position x @ rec center y ].	(rec width &lt;= e width) ifTrue: [ anElement translateTo: rec center x @ anElement position y].	after ifNotNil: [ after rtValue: anElement ].</body><body package="Roassal2-Interactions">transformDistance: distanceAsPoint forElement: anElement	^ distanceAsPoint"Transcript show: distanceAsPoint printString; cr.	^ (rectangle containsPoint: distanceAsPoint + anElement position)		ifTrue: [ distanceAsPoint ]		ifFalse: [ 0 @ 0 ]"</body></methods><methods><class-id>Roassal2.RTConstrainedDraggable</class-id> <category>accessing</category><body package="Roassal2-Interactions">afterBlock	^ after</body><body package="Roassal2-Interactions">afterBlock: aBlock	after := aBlock</body><body package="Roassal2-Interactions">rectangle	^ rectangle</body><body package="Roassal2-Interactions">rectangle: aRectangleOrOneArgBlock	rectangle := aRectangleOrOneArgBlock</body><body package="Roassal2-Interactions">withinParent	^ self rectangle: [ :anElement | anElement parentElement encompassingRectangle ]</body></methods><methods><class-id>Roassal2.RTIdentityGroup</class-id> <category>public</category><body package="Roassal2-Core">elementFromModel: anObject	"Return an element that corresponds to the object provided as parameter. If none is found, then return nil"	^ self detect: [ :el | el model == anObject ] ifNone: [ nil ]</body></methods><methods><class-id>Roassal2.RTResizeCanceled</class-id> <category>accessing</category><body package="Roassal2-Interactions-Resize">shape: iDontCare	"This is just for compatibility with RTAnnounceableObject&gt;&gt;announce:"</body></methods><methods><class-id>Roassal2.RTDepMatrix</class-id> <category>accessing</category><body package="Roassal2-Builder-StructureMatrix">function: aTwoBlockArgument	"aTwoBlockArgument should follow the pattern [ :row :column | .... ]	The block has to return a boolean"	function := aTwoBlockArgument</body><body package="Roassal2-Builder-StructureMatrix">horizontal: objects	horizontal := objects</body><body package="Roassal2-Builder-StructureMatrix">vertical: objects	vertical := objects</body></methods><methods><class-id>Roassal2.RTDepMatrix</class-id> <category>initialization</category><body package="Roassal2-Builder-StructureMatrix">initialize	super initialize.	function := [ :x :y | x = y ].	view @ RTDraggableView</body></methods><methods><class-id>Roassal2.RTDepMatrix</class-id> <category>hooks</category><body package="Roassal2-Builder-StructureMatrix">renderIn: aView	| x y el |	x := 0.	y := 0.	vertical do: [ :v |		horizontal do: [ :h |			(function value: v value: h) ifTrue: [ 				| size |				el := shapeBuilder elementOn: (v -&gt; h).				self setUpInteractionFor: el.								size := el width.				el translateTo: (x * size) @ (y * size).				aView add: el.			].			x := x + 1.		].		x := 0.		y := y + 1.	].</body></methods><methods><class-id>Roassal2.RTDraggableChildren</class-id> <category>hooks</category><body package="Roassal2-Interactions">"protocol: hooks"initializeElement: element	| recursiveGetChildren dragElements |		dragElements := nil.	recursiveGetChildren := nil.		recursiveGetChildren := [ :elem :ancestor|		dragElements add: elem.		elem outgoingEdges do: [ :edge |			(edge to = ancestor) ifFalse: [				recursiveGetChildren value: edge to value: ancestor].			].		].		element when: TRMouseDragging do: [ :ev |		| d |		dragElements := Set new.		ev shiftKeyPressed 			ifTrue: [dragElements add: ev element]			ifFalse: [recursiveGetChildren value: ev element value: ev element]. 		ev signalUpdate.		d := element view canvas camera distanceFromPixelToSpace: ev step.		dragElements do: [ :e1 | e1 translateBy: d ].		]</body></methods><methods><class-id>Roassal2.RTBenchmarks</class-id> <category>benchmarking</category><body package="Roassal2-Utility">bench01	"Exercizing elementsFromModel"	"	self new bench01	"		| v es |	v := RTView new.	es := RTBox new elementsOn: (1 to: 20000).	es @ (RTHighlightable new highlight: [:obj | Array with: obj - 1 with: obj + 1 ]).	v addAll: es.	RTGridLayout new gapSize: 0; on: es.	^ [v elementsFromModels: (1 to: 20000). v elementsFromModels: (1 to: 20000). v elementsFromModels: (1 to: 20000)] timeToRun</body><body package="Roassal2-Utility">bench02	"Exercizing Mondrian"	"	self new bench02	" 	^ [ | b |		b := RTMondrian new.		b nodes: (1 to: 800) forEach: [ :v |			b nodes: (1 to: v )].		b build ] timeToRun</body><body package="Roassal2-Utility">bench03	"Exercizing force layout"	"	self new bench03	" 	^ [ | b |		b := RTMondrian new.		b nodes: (1 to: 800).		b edges connectFrom: [ :v | v // 2 ].		b layout force.		b build ] timeToRun</body><body package="Roassal2-Utility">bench04	"Exercizing force layout"	"	self new bench04	" 	^ [ | b ds |		b := RTGrapher new.		ds := RTData new.		ds points: (1 to: 20000).		ds y: #yourself.		b add: ds.		b build ] timeToRun</body></methods><methods><class-id>Roassal2.RTTimelineSet</class-id> <category>configuration</category><body package="Roassal2-Builder-Timeline">defaultBarColor	^ Color blue alpha: 0.4</body><body package="Roassal2-Builder-Timeline">gapBetweenTimeLines	^ 3</body><body package="Roassal2-Builder-Timeline">minimumEventWidth	"An event cannot be less than 2 pixels-wide"	^ 2</body></methods><methods><class-id>Roassal2.RTTimelineSet</class-id> <category>accessing</category><body package="Roassal2-Builder-Timeline">elements	^ elements</body><body package="Roassal2-Builder-Timeline">end	^ end</body><body package="Roassal2-Builder-Timeline">end: symbolOrBlockOrValue	"The argument will be evaluated on each element of objects."	end := symbolOrBlockOrValue</body><body package="Roassal2-Builder-Timeline">globalMax	^ globalMax</body><body package="Roassal2-Builder-Timeline">globalMax: anObject	globalMax := anObject</body><body package="Roassal2-Builder-Timeline">globalMin	^ globalMin</body><body package="Roassal2-Builder-Timeline">globalMin: anObject	globalMin := anObject</body><body package="Roassal2-Builder-Timeline">interaction	^ interactionBuilder</body><body package="Roassal2-Builder-Timeline">lineIdentifier	^ lineIdentifier</body><body package="Roassal2-Builder-Timeline">lineIdentifier: symbolOrBlockOrValue	"The argument will be evaluated on each element of objects."	lineIdentifier := symbolOrBlockOrValue</body><body package="Roassal2-Builder-Timeline">objects	^ objects</body><body package="Roassal2-Builder-Timeline">objects: anObject	objects := anObject</body><body package="Roassal2-Builder-Timeline">shape	^ shapeBuilder</body><body package="Roassal2-Builder-Timeline">start	^ start</body><body package="Roassal2-Builder-Timeline">start: symbolOrBlockOrValue	"The argument will be evaluated on each element of objects."	start := symbolOrBlockOrValue</body></methods><methods><class-id>Roassal2.RTTimelineSet</class-id> <category>accessing - computed</category><body package="Roassal2-Builder-Timeline">lineIdentifiers	^ objects collect: [ :o | lineIdentifier rtValue: o ]</body><body package="Roassal2-Builder-Timeline">localMax	^ (objects collect: [ :o | end rtValue: o ]) max</body><body package="Roassal2-Builder-Timeline">localMin	^ (objects collect: [ :o | start rtValue: o ]) min</body><body package="Roassal2-Builder-Timeline">numberOfIdentifier	^ self identifiers size</body><body package="Roassal2-Builder-Timeline">numberOfLines	^ self lineIdentifiers size</body><body package="Roassal2-Builder-Timeline">numberOfObjects	^ objects size</body></methods><methods><class-id>Roassal2.RTTimelineSet</class-id> <category>rendering</category><body package="Roassal2-Builder-Timeline">renderIn: view using: timelineBuilder	| translator |	self setRenderedHeight: timelineBuilder.			elements := shapeBuilder elementsOn: objects.	interactionBuilder setUpElements: elements.	view addAll: elements.		"We set the width of the elements"	RTMetricNormalizer new		elements: elements;		normalizeWidth: [ :anObject | (end rtValue: anObject) - (start rtValue: anObject) ]			min: self minimumEventWidth			max: timelineBuilder extent x			minValue: 0			maxValue: globalMax.	"For the location"	translator := RTDirectLayoutTranslator new.	elements do: [ :e | 		| nx ny |		nx := self setRenderedXFor: e builder: timelineBuilder.		ny := self setRenderedYFor: e builder: timelineBuilder.		translator translateTopLeftOf: e to: nx @ ny ].</body><body package="Roassal2-Builder-Timeline">setRenderedHeight: timelineBuilder	shapeBuilder		height:			[ :obj | 			timelineBuilder extent y / timelineBuilder numberOfLines				- self gapBetweenTimeLines ]</body><body package="Roassal2-Builder-Timeline">setRenderedXFor: element builder: timelineBuilder	^ (start rtValue: element model) / globalMax * timelineBuilder extent x</body><body package="Roassal2-Builder-Timeline">setRenderedYFor: element builder: timelineBuilder	| indexY |	indexY := timelineBuilder		indexOfLineIdentifier: (lineIdentifier rtValue: element model).	^ (timelineBuilder getPixelPositionOf: 0 @ indexY) y</body></methods><methods><class-id>Roassal2.RTTimelineSet</class-id> <category>initialization</category><body package="Roassal2-Builder-Timeline">initialize	super initialize.	self initializeShapeBuilder.	self initializeInteractionBuilder.	lineIdentifier := #yourself.	start := #yourself.	end := #yourself.	objects := #()</body><body package="Roassal2-Builder-Timeline">initializeInteractionBuilder	interactionBuilder := RTInteractionBuilder new popup; yourself</body><body package="Roassal2-Builder-Timeline">initializeShapeBuilder	shapeBuilder := RTShapeBuilder new.	shapeBuilder rectangle color: self defaultBarColor</body></methods><methods><class-id>Roassal2.RTCursorFollower</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Decorators">color	^ color</body><body package="Roassal2-Builder-Grapher-Decorators">color: aColor	color := aColor</body><body package="Roassal2-Builder-Grapher-Decorators">labelXTextConvertion	^ labelXTextConvertion</body><body package="Roassal2-Builder-Grapher-Decorators">labelXTextConvertion: aOneArgBlock	labelXTextConvertion := aOneArgBlock</body><body package="Roassal2-Builder-Grapher-Decorators">labelYTextConvertion	^ labelYTextConvertion</body><body package="Roassal2-Builder-Grapher-Decorators">labelYTextConvertion: aOneArgBlock	labelYTextConvertion := aOneArgBlock</body></methods><methods><class-id>Roassal2.RTCursorFollower</class-id> <category>createLinesAndLabels</category><body package="Roassal2-Builder-Grapher-Decorators">createLinesAndLabelsIfNecessary	lineH		ifNil: [ 			lineH := TRLineShape new.			lineH color: color.			canvas := builder view canvas.			canvas addShape: lineH.			lineV := TRLineShape new.			canvas addShape: lineV.						labelH := TRLabelShape new.			labelH color: color.			canvas addShape: labelH.			labelV := TRLabelShape new.			labelV color: color.			canvas addShape: labelV. ]</body><body package="Roassal2-Builder-Grapher-Decorators">removeLinesAndLabelsIfNecessary	lineH notNil		ifTrue: [ 			lineH remove.			lineV remove.			labelH remove.			labelV remove.			self updateCanvas.			lineH := nil.			lineV := nil.			labelH := nil.			labelV := nil ]</body><body package="Roassal2-Builder-Grapher-Decorators">updateCanvas	canvas signalUpdate</body></methods><methods><class-id>Roassal2.RTCursorFollower</class-id> <category>configuration</category><body package="Roassal2-Builder-Grapher-Decorators">defaultColor	^ Color gray</body></methods><methods><class-id>Roassal2.RTCursorFollower</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">getLabelXValueFor: pp	^ (labelXTextConvertion rtValue: pp x) asString</body><body package="Roassal2-Builder-Grapher-Decorators">getLabelYValueFor: pp	^ (labelYTextConvertion rtValue: pp y negated) asString</body><body package="Roassal2-Builder-Grapher-Decorators">getPositionFromPixel: p	^ builder getPositionFromPixelPosition: (self convertPointForGraph: p)</body><body package="Roassal2-Builder-Grapher-Decorators">render	| p pp |	builder view		when: TRMouseMove		do: [ :evt | 			p := evt position.			(self isPointOverTheBuilder: p)				ifTrue: [ 					self createLinesAndLabelsIfNecessary.					lineH from: 0 @ p y to: builder extent x @ p y.					lineV from: p x @ 0 to: p x @ builder extent y negated.					pp := self getPositionFromPixel: p.					labelV text: (self getLabelXValueFor: pp).					labelV translateTo: p x @ builder extent y negated.					labelH text: (self getLabelYValueFor: pp).					labelH translateTo: builder extent x @ p y.					self updateCanvas ]				ifFalse: [ self removeLinesAndLabelsIfNecessary ] ]</body></methods><methods><class-id>Roassal2.RTCursorFollower</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Decorators">initialize	super initialize.	labelXTextConvertion := [ :v | v round: 2 ].	labelYTextConvertion := [ :v | v round: 2 ].	color := self defaultColor</body></methods><methods><class-id>Roassal2.RTFilledDiamond class</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRFilledDiamondShape</body></methods><methods><class-id>Roassal2.RTSVGPathEntity</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">center	^ center</body><body package="Roassal2-Exporter-SVG">center: anObject	center := anObject</body><body package="Roassal2-Exporter-SVG">element: anElement path: aPath center: aPoint scale: anInteger fillColor: aColor borderColor: anotherColor width: anotherInteger 	self element: anElement.	self path: aPath.	self center: aPoint.	self scale: anInteger.	self fillColor: aColor.	self strokeColor: anotherColor.	self strokeWidth: anotherInteger</body><body package="Roassal2-Exporter-SVG">path	^ path</body><body package="Roassal2-Exporter-SVG">path: anObject	path := anObject</body><body package="Roassal2-Exporter-SVG">scale	^ scale</body><body package="Roassal2-Exporter-SVG">scale: anObject	scale := anObject</body></methods><methods><class-id>Roassal2.RTSVGPathEntity</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addOn: stream using: aSVGVisitor	aSVGVisitor names at: self element put: self id.	self openDef: stream.	self addPath: stream.	self startStyle: stream.	self addFillColor: stream.	self addFillOpacity: stream.	self addStrokeColor: stream.	self addStrokeWidth: stream.		self closeTag: stream.	self startTransform: stream.	self addTranslation: self center into: stream.	self  addScale: self scale into: stream. 	self closeTag: stream.	self startClass: stream.	self addContainedInteractions: aSVGVisitor.	self closeTag: stream.	self addExternalInteractions: aSVGVisitor.	self closeDef: stream.</body><body package="Roassal2-Exporter-SVG">addPath: stream	stream nextPutAll: 'd="' , self path , '" '</body></methods><methods><class-id>Roassal2.RTSVGPathEntity</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	self type: 'path'.	self label: 'p'</body></methods><methods><class-id>Roassal2.RTApplicationMatrix</class-id> <category>accessing</category><body package="Roassal2-Builder-ApplicationMatrix">itemsAtRow: row andColumn: column	^ (items select: [ :item | item row = row and: [ item column = column ] ]) asArray</body><body package="Roassal2-Builder-ApplicationMatrix">numberOfColumns	^ self columns size</body><body package="Roassal2-Builder-ApplicationMatrix">numberOfItems	^ items size</body><body package="Roassal2-Builder-ApplicationMatrix">numberOfRows	^ self rows size</body></methods><methods><class-id>Roassal2.RTApplicationMatrix</class-id> <category>accessing vectorwise</category><body package="Roassal2-Builder-ApplicationMatrix">columns	items ifEmpty: [ ^ #() ].	^ (items collect: #column) removeDuplicates asArray</body><body package="Roassal2-Builder-ApplicationMatrix">rows	items ifEmpty: [ ^ #() ].	^ (items collect: #row) removeDuplicates asArray</body></methods><methods><class-id>Roassal2.RTApplicationMatrix</class-id> <category>adding</category><body package="Roassal2-Builder-ApplicationMatrix">add: anItem	items add: anItem</body></methods><methods><class-id>Roassal2.RTApplicationMatrix</class-id> <category>initialization</category><body package="Roassal2-Builder-ApplicationMatrix">initialize	super initialize.	items := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTApplicationMatrix</class-id> <category>hooks</category><body package="Roassal2-Builder-ApplicationMatrix">createShapeBuilder	^ ((RTBox new height: 20; width: 200; color: #color) + (RTLabel new text: #itemName))	"| b |	b := super createShapeBuilder.	b rectangle width: 250; height: 20; color: #color.	^ b"</body><body package="Roassal2-Builder-ApplicationMatrix">renderIn: aView	| cells el elementsAsGroup itemsPerCell rowElements  |	cells := OrderedCollection new.		"First line"	cells add: (RTLabel elementOn: 'AppMatrix').	self columns do: [ :cName | 		el := RTLabel elementOn: cName.		view add: el.		cells add: el.	].		self rows do: [ :row |		el := RTLabel elementOn: row.		view add: el.		cells add: el.				rowElements := RTGroup new.		self columns do: [ :column |			itemsPerCell := self itemsAtRow: row andColumn: column.						"elementsAsGroup := ((RTBox new height: 20; width: 200) + (RTLabel new text: #itemName)) elementsOn: itemsPerCell."			elementsAsGroup := self elementsOn: itemsPerCell.					view addAll: elementsAsGroup.			RTVerticalLineLayout new gapSize: 1; on: elementsAsGroup.			cells add: elementsAsGroup.			rowElements addAll: elementsAsGroup.		].	].	RTCellLayout new lineItemsCount: self numberOfColumns + 1; on: cells.</body></methods><methods><class-id>Roassal2.RTApplicationMatrix</class-id> <category>examples</category><body package="Roassal2-Builder-ApplicationMatrix">example01	"	self new example01	"	| b item01 item02 item03 item04 |	b := RTApplicationMatrix new.	item01 := RTAMItem new.	item01 itemName: 'Contract Management'.	item01 row: 'Australia'.	item01 column: 'Corporate Services'.	item01 color: Color lightRed.		item02 := RTAMItem new.	item02 itemName: 'Bonus Card Use Watch'.	item02 row: 'Australia'.	item02 column: 'Corporate Services'.	item03 := RTAMItem new.	item03 itemName: 'MailSnake'.	item03 row: 'Australia'.	item03 column: 'Customer Relationship'.	item04 := RTAMItem new.	item04 itemName: 'Saleforce light'.	item04 row: 'France'.	item04 column: 'Customer Relationship'.	item04 color: Color lightGreen.		b add: item01; add: item02; add: item03; add: item04.	^ b</body></methods><methods><class-id>Roassal2.TRCanvasGridShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">addToOffset: aPoint	offset := offset + aPoint</body><body package="Roassal2-Trachel-Shapes">dashes	"Return the dash pattern associated"	^ dashes</body><body package="Roassal2-Trachel-Shapes">dashes: integers	"Set the dash pattern for the line. Could be #(1 20) for example"	dashes := integers</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	^ 0 @ 0 corner: 0@0</body><body package="Roassal2-Trachel-Shapes">spacing: aNumber	spacing := aNumber</body></methods><methods><class-id>Roassal2.TRCanvasGridShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	color := Color black alpha: 0.05.	offset := 0 @ 0</body></methods><methods><class-id>Roassal2.TRCanvasGridShape</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">computePath	| width height |	width := self canvas extent x / canvas camera scale roundUpTo: spacing.	height := self canvas extent y / canvas camera scale roundUpTo: spacing.	path := self athensCanvas		createPath:			[ :builder | 			builder absolute.			height negated to: height by: spacing do: [ :i | 				builder					moveTo: width negated @ i;					lineTo: width @ i ].			width negated to: width by: spacing do: [ :i | 				builder					moveTo: i @ height negated;					lineTo: i @ height ] ]</body></methods><methods><class-id>Roassal2.TRCanvasGridShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	"The shape is first moved by offset, which will always center it on camera, then it is moved by moduled offset, so it will alway move only by at most the modulo" 	| s |	athensCanvas pathTransform		restoreAfter:			[ athensCanvas pathTransform translateBy: offset.			athensCanvas pathTransform				translateBy: ((offset x % spacing) @ (offset y % spacing)) negated.			athensCanvas setShape: self path.			s := athensCanvas setStrokePaint: self color.			s width: 1.			dashes ifNotNil: [ 				 s dashes: dashes offset: spacing ].			athensCanvas draw ]</body></methods><methods><class-id>Roassal2.RTResizeMove</class-id> <category>public</category><body package="Roassal2-Animation">toExtent: toExtent during: numberOfSeconds on: anElement	element := anElement.	originalExtent := anElement extent.		animatedValue := TRVIAnimatedValue new									evaluator: [ :t | originalExtent interpolateTo: toExtent at: t ];									timer: (TRVITimer new cycleLength: numberOfSeconds);									yourself.</body><body package="Roassal2-Animation">toExtent: toExtent on: anElement	^ self toExtent: toExtent during: 1 on: anElement</body></methods><methods><class-id>Roassal2.RTResizeMove</class-id> <category>actions</category><body package="Roassal2-Animation">addedIn: trachelCanvas	"We make sure that there is no existing resize animation in the animation queue."	| conflictingAnimations |	conflictingAnimations := trachelCanvas animations 					select: [ :anim | (anim class == self class 										and: [ anim element == element ])										and: [ self ~~ anim ] ].	trachelCanvas animationsRemoveAll: conflictingAnimations.</body><body package="Roassal2-Animation">start	animatedValue start</body></methods><methods><class-id>Roassal2.RTResizeMove</class-id> <category>accessing</category><body package="Roassal2-Animation">after: aBlock	animatedValue finishCallback: aBlock</body></methods><methods><class-id>Roassal2.RTResizeMove</class-id> <category>refreshing</category><body package="Roassal2-Animation">refresh	| t |	t := animatedValue value.	element extent: t.	element signalUpdate.</body></methods><methods><class-id>Roassal2.RTResizeMove</class-id> <category>testing</category><body package="Roassal2-Animation">hasCompleted	^ animatedValue hasCompleted</body></methods><methods><class-id>Roassal2.GRoundedRectangle</class-id> <category>accessing</category><body package="Roassal2-Pharo">borderRadius	^ borderRadius</body><body package="Roassal2-Pharo">center	^ self rectangle center</body><body package="Roassal2-Pharo">corners	| r |	r := borderRadius.	^ Array		with:			(GCircleArc				center: rectangle topRight + (r negated @ r)				radius: r				startAngle: 0				endAngle: Float halfPi)		with:			(GCircleArc				center: rectangle topLeft + (r @ r)				radius: r				startAngle: Float halfPi				endAngle: Float pi)		with:			(GCircleArc				center: rectangle bottomLeft + (r @ r negated)				radius: r				startAngle: Float pi				endAngle: Float threePi / 2)		with:			(GCircleArc				center: rectangle bottomRight + (r negated @ r negated)				radius: r				startAngle: Float threePi / 2				endAngle: Float twoPi)</body><body package="Roassal2-Pharo">encompassingRectangle	^ self rectangle</body><body package="Roassal2-Pharo">rectangle	^ rectangle</body></methods><methods><class-id>Roassal2.GRoundedRectangle</class-id> <category>comparing</category><body package="Roassal2-Pharo">= aRect	self species = aRect species		ifFalse: [ ^ false ].	^ self rectangle = aRect rectangle and: [ self borderRadius = aRect borderRadius ]</body><body package="Roassal2-Pharo">intersectLine: aLine	(self corners flatCollect: [ :each | aLine intersectCircleArc: each ])		ifNotEmpty: [ :col | ^ col ].	^ aLine intersectRectangle: self rectangle</body><body package="Roassal2-Pharo">intersectLineSegment: aLine	(self corners flatCollect: [ :each | aLine intersectCircleArc: each ])		ifNotEmpty: [ :col | ^ col ].	^ aLine intersectRectangle: self rectangle</body></methods><methods><class-id>Roassal2.GRoundedRectangle</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">setRectangle: aRectangle borderRadius: aRadius	rectangle := aRectangle.	borderRadius := aRadius</body></methods><methods><class-id>Roassal2.GRoundedRectangle class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">rectangle: aRectangle borderRadius: aRadius	^ self new		setRectangle: aRectangle borderRadius: aRadius;		yourself</body></methods><methods><class-id>Roassal2.RTRDatasets class</class-id> <category>public</category><body package="Roassal2-Table">listOfRDatasets	"Return the list of data sets availables	self listOfRDatasets	"	rDataSets ifNil: [ self loadRDatasets ].	^ rDataSets</body><body package="Roassal2-Table">load: aDataSet from: aPackage	"Return a RTTabTable corresponding to a dataset name and a dataset package.	The list of packages and dataset available is given by executing the expression: self listOfRDatasets		For example:	RTRDatasets load:'Titanic' from:'datasets'	Return the list of survival of the titatic disaster.		RTRDatasets load: 'Yogurt' from: 'Ecdat'	Note that the returned table probably needs some column conversions.	"	| items dataSet |	rDataSets isNil		ifTrue: [ self loadRDatasets ].	items := rDataSets values select: [ :row | row first = aPackage ].	dataSet := items detect: [ :row | row second = aDataSet ].	^ RTTabTable new input: (dataSet at: 4) asUrl retrieveContents usingDelimiter: $,</body></methods><methods><class-id>Roassal2.RTRDatasets class</class-id> <category>util</category><body package="Roassal2-Table">loadRDatasets	"Load the list of data sets and packages"	rDataSets  := RTTabTable new		input: 'http://vincentarelbundock.github.com/Rdatasets/datasets.csv' asUrl retrieveContents		usingDelimiter: $,.	rDataSets removeFirstRow.		"Apparently, this is not necessary"	"rDataSets convertColumns: #(1 2 3 4) to:[:aString| aString allButFirst allButLast ]"</body></methods><methods><class-id>Roassal2.RTRDatasets class</class-id> <category>accessing</category><body package="Roassal2-Table">dataPackages	rDataSets isNil		ifTrue: [ self loadRDatasets  ].	packages := Set new.	rDataSets values do: [ :row | packages add: row first ].	^ packages</body><body package="Roassal2-Table">from: aPackage	rDataSets isNil		ifTrue: [ self loadRDatasets ].	^ (rDataSets values select: [ :row | row first = aPackage ]) collect:[:each | each at:2]</body></methods><methods><class-id>Roassal2.RTRDatasets class</class-id> <category>class initialization</category><body package="Roassal2-Table">initialize	rDataSets := nil</body></methods><methods><class-id>Roassal2.RTSunburstExtentLayout</class-id> <category>accessing</category><body package="Roassal2-Builder-Sunburst">extent: aPoint	wside := aPoint x min: aPoint y</body><body package="Roassal2-Builder-Sunburst">radius: depth	| w2 maxDepth |	w2 := wside/2.	maxDepth := builder maxLevel.	^ ((depth * w2 * w2) / (maxDepth + 1) ) sqrt</body><body package="Roassal2-Builder-Sunburst">roots	^ roots.</body></methods><methods><class-id>Roassal2.RTSunburstExtentLayout</class-id> <category>initialization</category><body package="Roassal2-Builder-Sunburst">initialize	super initialize.	self extent: 500@500</body></methods><methods><class-id>Roassal2.RTSunburstExtentLayout</class-id> <category>hook</category><body package="Roassal2-Builder-Sunburst">doInitialize: elements	roots := elements.</body></methods><methods><class-id>Roassal2.RTSunburstExtentLayout</class-id> <category>public</category><body package="Roassal2-Builder-Sunburst">layoutSunburst: el	| children arc parent depth radius totalPie a b s  auxAngle angleOffset block1 block2 |	children := el attributes at: builder childrenKey.	parent := el attributes at: #parent.	arc := el trachelShape.	depth := el attributes at: #depth.	block1 := [ | radius2 |		depth = 1			ifTrue: [ parent isNil 				ifTrue: [ self hasCenter 					ifTrue: [ radius := 0. radius2 := self radius: 1 ] 					ifFalse: [ radius := 0. radius2 := 0 ] ]				ifFalse: [ self hasCenter 					ifTrue: [ radius := 0. radius2 := self radius: 1 ] 					ifFalse: [ radius := (self radius: 1)+radialSpacing. radius2 := (self radius: 2)+radialSpacing ] ].				]			ifFalse: [ | temp d |				d := depth - 1.				(self roots size &gt; 1 and: [ self hasCenter not ]) ifTrue: [ d := depth ].				temp := self radialSpacing * d.				radius := (self radius: d) + temp.				radius2 := (self radius: d+1) + temp ].		arc			alphaAngle: arc alphaAngle			betaAngle: arc betaAngle			innerRadius: radius			externalRadius: radius2 ].	block2 := [ 		radius := depth = 0 			ifTrue: [ 0 ] 			ifFalse: [ parent isNil				ifTrue: [ self hasCenter ifTrue: [self radius: 1] ifFalse: [0] ]				ifFalse: [ self hasCenter ifTrue: [0] ifFalse: [self self radius: 1] ] ].		arc			alphaAngle: 0			betaAngle: 360			innerRadius: 0			externalRadius: radius ].			depth = 0		ifTrue: block2		ifFalse: [ depth = 1 			ifTrue: [ parent isNil 				ifTrue: block2				ifFalse: block1. ]			ifFalse: block1 ].		children isEmpty ifTrue: [ ^ self ].	totalPie := builder weightOf: el. 	auxAngle := arc alphaAngle.	angleOffset := (arc betaAngle - arc alphaAngle)/totalPie.		children doWithIndex: [ :c :i |		a := auxAngle.		b := auxAngle + (angleOffset * (builder weightOf: c)	).		s := self angularSpacing.		auxAngle := b.		(b - a) &gt; s ifTrue: [ 			depth = 1 				ifTrue: [ b := b - (s/2). a := a + (s/2) ]				ifFalse: [ 					i = 1 						ifTrue: [ 							(children size &gt; 1) ifTrue: [b := b - (s/2)] ]						ifFalse: [ 							i = children size 								ifTrue: [ a := a + (s/2) ]								ifFalse: [ b := b - (s/2). a := a + (s/2) ] ] ] ].		c trachelShape			alphaAngle: a			betaAngle: b			innerRadius: 0			externalRadius: 0.		self layoutSunburst: c.		 ].</body></methods><methods><class-id>Roassal2.RTSubTimelineSet</class-id> <category>accessing</category><body package="Roassal2-Builder-Timeline">level	^ level</body><body package="Roassal2-Builder-Timeline">level: symbolOrBlockOrValue	"The argument will be evaluated on each element of objects."	level := symbolOrBlockOrValue</body></methods><methods><class-id>Roassal2.RTSubTimelineSet</class-id> <category>configuration</category><body package="Roassal2-Builder-Timeline">gapBetweenLevels	^ 1</body></methods><methods><class-id>Roassal2.RTSubTimelineSet</class-id> <category>rendering</category><body package="Roassal2-Builder-Timeline">setRenderedHeight: timelineBuilder	shapeBuilder		height:			[ :obj | 			(timelineBuilder extent y / timelineBuilder numberOfLines				- self gapBetweenTimeLines) / self numberOfLevels - self gapBetweenLevels ]</body><body package="Roassal2-Builder-Timeline">setRenderedYFor: element builder: timelineBuilder	^ (super setRenderedYFor: element builder: timelineBuilder)		+ ((self level rtValue: element model) - 1 * element height)</body></methods><methods><class-id>Roassal2.RTSubTimelineSet</class-id> <category>accessing - computed</category><body package="Roassal2-Builder-Timeline">numberOfLevels	^ self level rtValue: (self objects detectMax: [ :eachObject |									self level rtValue: eachObject ])</body></methods><methods><class-id>Roassal2.RTMetricNormalizer</class-id> <category>public normalize y</category><body package="Roassal2-ColorNormalizer">normalizeY: metricBlock min: minValue max: maxValue	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeY: metricBlock min: minValue max: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeY: metricBlock min: min max: max minValue: minValue	"metricBlock is evaluated on each node model. 		 min represent the X value of the minimum value.	 max represent the X value of the maximum value.	 transformation is used to transform the metric value"		^ self normalizeY: metricBlock min: min max: max minValue: minValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeY: metricBlock min: min max: max minValue: minValue maxValue: maxValue 	"	metricBlock is evaluated on each node model. 		min represent the X value of the minimum value.	max represent the X value of the maximum value.		minValue is the minimum value of the dataset.	maxValue is the maximum value of the dataset.		[ minValue ; maxValue ] is mapped to [ min ; max ]	"			self normalizeY: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeY: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"	metricBlock is evaluated on each node model. 		min represent the Y value of the minimum value.	max represent the Y value of the maximum value.		minValue is the minimum value of the dataset.	maxValue is the maximum value of the dataset.		[ minValue ; maxValue ] is mapped to [ min ; max ]	transformation is used to transform the metric value"			(maxValue - minValue) ~= 0 ifTrue: [		elements do: [ :el | 			| tt t |			t := transformation rtValue: (metricBlock rtValue: el model).			tt := self getValue: t min: min max: max minValue: minValue maxValue: maxValue.			translator translate: el to: el position + (0 @ tt) ] ]</body><body package="Roassal2-ColorNormalizer">normalizeY: metricBlock min: min max: max minValue: minValue using: transformation	"metricBlock is evaluated on each node model. 		 min represent the X value of the minimum value.	 max represent the X value of the maximum value.	 transformation is used to transform the metric value"		| maxValue |	"We get the min and the max of the metric for all the elements"	maxValue := transformation rtValue: (metricBlock rtValue: elements anyOne model).	elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el model).		maxValue := maxValue max: t ].		self normalizeY: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation</body><body package="Roassal2-ColorNormalizer">normalizeY: metricBlock min: min max: max using: transformation	"metricBlock is evaluated on each node model. 		 min represent the X value of the minimum value.	 max represent the X value of the maximum value.	 transformation is used to transform the metric value"		| minValue maxValue |	"We get the min and the max of the metric for all the elements"	maxValue := transformation rtValue: (metricBlock rtValue: elements anyOne model).	minValue := maxValue.		elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el model).		minValue := minValue min: t.		maxValue := maxValue max: t ].		self normalizeY: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation</body></methods><methods><class-id>Roassal2.RTMetricNormalizer</class-id> <category>public normalize size</category><body package="Roassal2-ColorNormalizer">normalizeElementHeight: metricBlock	"metricBlock is evaluated on each node model"	^ self normalizeElementHeight: metricBlock min: 5 max: 30</body><body package="Roassal2-ColorNormalizer">normalizeElementHeight: metricBlock min: minValue max: maxValue	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeElementHeight: metricBlock min: minValue max: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeElementHeight: metricBlock min: min max: max minValue: aMinValue maxValue: aMaxValue	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeElementHeight: metricBlock min: min max: max minValue: aMinValue maxValue: aMaxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeElementHeight: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	| values |	self checkNotEmpty.	values := (self getElementNormalizedValues: metricBlock 							min: min max: max 							minValue: minValue maxValue: maxValue 							using: transformation).	elements with: values do: [ :el :v | el trachelShape height: v ]</body><body package="Roassal2-ColorNormalizer">normalizeElementHeight: metricBlock min: min max: max using: transformation	"aBlock is evaluated on each node model. 	 Colors is an array of colors used to do the fading"		| minValue maxValue |		self checkNotEmpty.	"We get the min and the max of the metric for all the elements"	minValue := transformation rtValue: (metricBlock rtValue: elements anyOne model).	maxValue := minValue.	elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el).		minValue := minValue min: t.		maxValue := maxValue max: t ].		self normalizeHeight: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation</body><body package="Roassal2-ColorNormalizer">normalizeHeight: metricBlock	"metricBlock is evaluated on each node model"	^ self normalizeHeight: metricBlock min: 5 max: 30</body><body package="Roassal2-ColorNormalizer">normalizeHeight: metricBlock max: maxValue	"metricBlock is evaluated on each node model. 	 maxValue is an integer representing the maximum size in pixels for each node"	self normalizeHeight: metricBlock min: 5 max: maxValue</body><body package="Roassal2-ColorNormalizer">normalizeHeight: metricBlock min: minValue max: maxValue	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeHeight: metricBlock min: minValue max: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeHeight: metricBlock min: min max: max minValue: aMinValue maxValue: aMaxValue	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeHeight: metricBlock min: min max: max minValue: aMinValue maxValue: aMaxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeHeight: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	| values |	self checkNotEmpty.		values := (self getNormalizedValues: metricBlock 							min: min max: max 							minValue: minValue maxValue: maxValue 							using: transformation).	elements with: values do: [ :el :v | el trachelShape height: v ]</body><body package="Roassal2-ColorNormalizer">normalizeHeight: metricBlock min: min max: max using: transformation	"aBlock is evaluated on each node model. 	 Colors is an array of colors used to do the fading"		| minValue maxValue |		self checkNotEmpty.	"We get the min and the max of the metric for all the elements"	minValue := transformation rtValue: (metricBlock rtValue: elements anyOne model).	maxValue := minValue.	elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el model).		minValue := minValue min: t.		maxValue := maxValue max: t ].		self normalizeHeight: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation</body><body package="Roassal2-ColorNormalizer">normalizeSize	"Normalize the size of each element. It also assume that each model is a numerical value"	self normalizeSize: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeSize: metricBlock	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeSize: metricBlock min: 5 max: 30</body><body package="Roassal2-ColorNormalizer">normalizeSize: metricBlock max: maxValue	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeSize: metricBlock min: 5 max: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeSize: metricBlock min: minValue max: maxValue	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeSize: metricBlock min: minValue max: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeSize: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"aBlock is evaluated on each node model. 	 Colors is an array of colors used to do the fading"	| values |	self checkNotEmpty.		values := (self getNormalizedValues: metricBlock 							min: min max: max 							minValue: minValue maxValue: maxValue 							using: transformation).	elements with: values do: [ :el :v | el trachelShape extent: v @ v ] 		"	(maxValue - minValue) ~= 0 ifTrue: [		elements do: [ :el | 			| tt t |			t := transformation rtValue: (metricBlock rtValue: el model).			tt := min + ((max - min) * ( (t - minValue) / (maxValue - minValue))) asInteger.			el trachelShape extent: tt @ tt ] ] 		"</body><body package="Roassal2-ColorNormalizer">normalizeSize: metricBlock min: min max: max using: transformation	"aBlock is evaluated on each node model. 	 Colors is an array of colors used to do the fading"		| minValue maxValue |		self checkNotEmpty.	elements size &lt;= 1 ifTrue: [ ^ self ].	"We get the min and the max of the metric for all the elements"	minValue := transformation rtValue: (metricBlock rtValue: elements anyOne model).	maxValue := minValue.	elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el model).		minValue := minValue min: t.		maxValue := maxValue max: t ].		self normalizeSize: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation</body><body package="Roassal2-ColorNormalizer">normalizeSize: metricBlock using: transformation	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeSize: metricBlock min: 5 max: 30 using: transformation</body><body package="Roassal2-ColorNormalizer">normalizeWidth: metricBlock	"metricBlock is evaluated on each node model."	^ self normalizeWidth: metricBlock min: 5 max: 30</body><body package="Roassal2-ColorNormalizer">normalizeWidth: metricBlock max: maxValue	"metricBlock is evaluated on each node model. 	 maxValue is an integer representing the maximum size in pixels for each node"	self normalizeWidth: metricBlock min: 5 max: maxValue</body><body package="Roassal2-ColorNormalizer">normalizeWidth: metricBlock min: minValue max: maxValue	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeWidth: metricBlock min: minValue max: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeWidth: metricBlock min: min max: max minValue: minValue	"aBlock is evaluated on each node model"		^ self normalizeWidth: metricBlock min: min max: max minValue: minValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeWidth: metricBlock min: min max: max minValue: minValue maxValue: maxValue	"aBlock is evaluated on each node model"		^ self normalizeWidth: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeWidth: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"aBlock is evaluated on each node model. 	 Colors is an array of colors used to do the fading"			| values |	self checkNotEmpty.			values := (self getNormalizedValues: metricBlock 							min: min max: max 							minValue: minValue maxValue: maxValue 							using: transformation).	elements with: values do: [ :el :v | el trachelShape width: v ]</body><body package="Roassal2-ColorNormalizer">normalizeWidth: metricBlock min: min max: max minValue: minValue using: transformation	"aBlock is evaluated on each node model"		|  maxValue |		self checkNotEmpty.	"We get the max of the metric for all the elements"	maxValue := transformation rtValue: (metricBlock rtValue: elements anyOne model).		elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el model).		maxValue := maxValue max: t ].	self normalizeWidth: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation</body><body package="Roassal2-ColorNormalizer">normalizeWidth: metricBlock min: min max: max using: transformation	"aBlock is evaluated on each node model. 	 Colors is an array of colors used to do the fading"		| minValue maxValue |		self checkNotEmpty.	"We get the min and the max of the metric for all the elements"	minValue := transformation rtValue: (metricBlock rtValue: elements anyOne model).	maxValue := minValue.	elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el model).		minValue := minValue min: t.		maxValue := maxValue max: t ].			self normalizeWidth: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation.</body></methods><methods><class-id>Roassal2.RTMetricNormalizer</class-id> <category>public translation</category><body package="Roassal2-ColorNormalizer">directTranslation	translator := RTDirectLayoutTranslator new</body><body package="Roassal2-ColorNormalizer">fastSmoothTranslation	translator := RTSmoothLayoutTranslator new nbCycles: 0.5; yourself</body><body package="Roassal2-ColorNormalizer">smoothTranslation	translator := RTSmoothLayoutTranslator new</body></methods><methods><class-id>Roassal2.RTMetricNormalizer</class-id> <category>public normalize x</category><body package="Roassal2-ColorNormalizer">normalizeElementX: metricBlock min: min max: max minValue: minValue maxValue: maxValue 	"	metricBlock is evaluated on each element. 		min represent the X value of the minimum value.	max represent the X value of the maximum value.		minValue is the minimum value of the dataset.	maxValue is the maximum value of the dataset.		[ minValue ; maxValue ] is mapped to [ min ; max ]	transformation is used to transform the metric value"			self normalizeElementX: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeElementX: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"	metricBlock is evaluated on each element. 		min represent the X value of the minimum value.	max represent the X value of the maximum value.		minValue is the minimum value of the dataset.	maxValue is the maximum value of the dataset.		[ minValue ; maxValue ] is mapped to [ min ; max ]	transformation is used to transform the metric value"			(maxValue - minValue) ~= 0 ifTrue: [		elements do: [ :el | 			| tt t |			t := transformation rtValue: (metricBlock rtValue: el).			tt := min + ((max - min) * ( (t - minValue) / (maxValue - minValue))).			translator translate: el to: el position + (tt @ 0) ] ]</body><body package="Roassal2-ColorNormalizer">normalizeElementY: metricBlock min: min max: max minValue: minValue maxValue: maxValue 	"	metricBlock is evaluated on each element. 		min represent the Y value of the minimum value.	max represent the Y value of the maximum value.		minValue is the minimum value of the dataset.	maxValue is the maximum value of the dataset.		[ minValue ; maxValue ] is mapped to [ min ; max ]	transformation is used to transform the metric value"			self normalizeElementY: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeElementY: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"	metricBlock is evaluated on each element. 		min represent the X value of the minimum value.	max represent the X value of the maximum value.		minValue is the minimum value of the dataset.	maxValue is the maximum value of the dataset.		[ minValue ; maxValue ] is mapped to [ min ; max ]	transformation is used to transform the metric value"			(maxValue - minValue) ~= 0 ifTrue: [		elements do: [ :el | 			| tt t |			t := transformation rtValue: (metricBlock rtValue: el).			tt := min + ((max - min) * ( (t - minValue) / (maxValue - minValue))).			translator translate: el to: el position + (0 @ tt) ] ]</body><body package="Roassal2-ColorNormalizer">normalizeTopLeftOfX: metricBlock	"metricBlock is evaluated on each node model"	^ self normalizeTopLeftOfX: metricBlock min: 0 max: 200</body><body package="Roassal2-ColorNormalizer">normalizeTopLeftOfX: metricBlock min: minValue max: maxValue	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeTopLeftOfX: metricBlock min: minValue max: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeTopLeftOfX: metricBlock min: min max: max minValue: minValue maxValue: maxValue 	"	metricBlock is evaluated on each node model. 		min represent the X value of the minimum value.	max represent the X value of the maximum value.		minValue is the minimum value of the dataset.	maxValue is the maximum value of the dataset.		[ minValue ; maxValue ] is mapped to [ min ; max ]	"			self normalizeTopLeftOfX: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeTopLeftOfX: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"	metricBlock is evaluated on each node model. 		min represent the X value of the minimum value.	max represent the X value of the maximum value.		minValue is the minimum value of the dataset.	maxValue is the maximum value of the dataset.		[ minValue ; maxValue ] is mapped to [ min ; max ]	transformation is used to transform the metric value"			(maxValue - minValue) ~= 0 ifTrue: [		elements do: [ :el | 			| tt t |			t := transformation rtValue: (metricBlock rtValue: el model).			tt := self getValue: t min: min max: max minValue: minValue maxValue: maxValue.			translator translateTopLeftOf: el to: el encompassingRectangle topLeft + (tt @ 0) ] ]</body><body package="Roassal2-ColorNormalizer">normalizeTopLeftOfX: metricBlock min: min max: max minValue: minValue using: transformation	"metricBlock is evaluated on each node model. 		 min represent the X value of the minimum value.	 max represent the X value of the maximum value.	 transformation is used to transform the metric value"		| maxValue |	"We get the min and the max of the metric for all the elements"	maxValue := transformation rtValue: (metricBlock rtValue: elements anyOne model).	elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el model).		maxValue := maxValue max: t ].		self normalizeTopLeftOfX: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation</body><body package="Roassal2-ColorNormalizer">normalizeX: metricBlock	"metricBlock is evaluated on each node model"	^ self normalizeX: metricBlock min: 0 max: 200</body><body package="Roassal2-ColorNormalizer">normalizeX: metricBlock min: minValue max: maxValue	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizeX: metricBlock min: minValue max: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeX: metricBlock min: min max: max minValue: minValue	"metricBlock is evaluated on each node model. 		 min represent the X value of the minimum value.	 max represent the X value of the maximum value.	 transformation is used to transform the metric value"		^ self normalizeX: metricBlock min: min max: max minValue: minValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeX: metricBlock min: min max: max minValue: minValue maxValue: maxValue 	"	metricBlock is evaluated on each node model. 		min represent the X value of the minimum value.	max represent the X value of the maximum value.		minValue is the minimum value of the dataset.	maxValue is the maximum value of the dataset.		[ minValue ; maxValue ] is mapped to [ min ; max ]	"			self normalizeX: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeX: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"	metricBlock is evaluated on each node model. 		min represent the X value of the minimum value.	max represent the X value of the maximum value.		minValue is the minimum value of the dataset.	maxValue is the maximum value of the dataset.		[ minValue ; maxValue ] is mapped to [ min ; max ]	transformation is used to transform the metric value"			(maxValue - minValue) ~= 0 ifTrue: [		elements do: [ :el | 			| tt t |			t := transformation rtValue: (metricBlock rtValue: el model).			tt := self getValue: t min: min max: max minValue: minValue maxValue: maxValue.			translator translate: el to: el position + (tt @ 0) ] ]</body><body package="Roassal2-ColorNormalizer">normalizeX: metricBlock min: min max: max minValue: minValue using: transformation	"metricBlock is evaluated on each node model. 		 min represent the X value of the minimum value.	 max represent the X value of the maximum value.	 transformation is used to transform the metric value"		| maxValue |	"We get the min and the max of the metric for all the elements"	maxValue := transformation rtValue: (metricBlock rtValue: elements anyOne model).	elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el model).		maxValue := maxValue max: t ].		self normalizeX: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation</body><body package="Roassal2-ColorNormalizer">normalizeX: metricBlock min: min max: max using: transformation	"metricBlock is evaluated on each node model. 		 min represent the X value of the minimum value.	 max represent the X value of the maximum value.	 transformation is used to transform the metric value"		| minValue maxValue |	"We get the min and the max of the metric for all the elements"	minValue := transformation rtValue: (metricBlock rtValue: elements anyOne model).	maxValue := minValue.	elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el model).		minValue := minValue min: t.		maxValue := maxValue max: t ].		self normalizeX: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation</body></methods><methods><class-id>Roassal2.RTMetricNormalizer</class-id> <category>public normalize line width</category><body package="Roassal2-ColorNormalizer">edges	edges ifNotNil: [ ^ edges ].		edges := Set new.	elements do: [ :el | edges addAll: el connectedEdges ]. 	edges := edges asArray.	^ edges</body><body package="Roassal2-ColorNormalizer">normalizeLineWidth: metricBlock	"metricBlock is a two arg block that accept the from model and the to model"	^ self normalizeLineWidth: metricBlock min: 0.5 max: 30</body><body package="Roassal2-ColorNormalizer">normalizeLineWidth: metricBlock min: min max: max	"metricBlock is a two arg block that accept the from model and the to model"	^ self normalizeLineWidth: metricBlock min: min max: max using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeLineWidth: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	| values block |	self checkNotEmpty.		values := (self getNormalizedForLineWidthValues: metricBlock 							min: min 							max: max 							minValue: minValue 							maxValue: maxValue 							using: transformation).	"Very ugly hack"	block := [ :modelOfTheEdge | modelOfTheEdge ].	self edges with: values do: [ :edge :aValue | 		edge model: aValue asFloat.		edge shape width: block.		]</body><body package="Roassal2-ColorNormalizer">normalizeLineWidth: metricBlock min: min max: max using: transformation	"metricBlock is a two arg block that accept the from model and the to model"	| e minValue maxValue |	self checkNotEmpty.		"We get the min and the max of the metric for all the edges"	self edges ifEmpty: [ ^ self ].	e := self edges anyOne.	minValue := transformation rtValue: (metricBlock value: e from model value: e to model).	maxValue := minValue.	self edges do: [ :edge | 		| t |  		t := transformation rtValue: (metricBlock value: edge from model value: edge to model).		minValue := minValue min: t.		maxValue := maxValue max: t ].		^ self normalizeLineWidth: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation</body></methods><methods><class-id>Roassal2.RTMetricNormalizer</class-id> <category>public normalize color</category><body package="Roassal2-ColorNormalizer">distinctColor	"give a color to each element based on the model identify.	Two elements have the same color if they have the same model"	^ self distinctColorUsing: #yourself</body><body package="Roassal2-ColorNormalizer">distinctColorUsing: aBlockOrSymbol	"Give a color to each element according to the result of execution the block and symbol on each element.	For example, the following example paints all the class according to the package the class is in:	| b |	b := RTMondrian new.	b shape circle.	b nodes: Collection withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b normalizer		normalizeSize: #numberOfMethods;		distinctColorUsing: #package.	b		"	| normalizer allObjects |	allObjects := elements collect: [ :e | aBlockOrSymbol rtValue: e model ].	allObjects removeDuplicates.		normalizer := RTMultiLinearColorForIdentity new 						objects: allObjects; 						command: aBlockOrSymbol.	elements do: [ :el | el trachelShape color: (normalizer rtValue: el model) ]</body><body package="Roassal2-ColorNormalizer">normalizeColor: metricBlock	"aBlock is evaluated on each node model. 	 Colors is an array of colors used to do the fading"	^ self normalizeColor: metricBlock using: (Array with: Color gray with: Color red)</body><body package="Roassal2-ColorNormalizer">normalizeColor: metricBlock using: colors	"aBlock is evaluated on each node model. 	 Colors is an array of colors used to do the fading"	^ self normalizeColor: metricBlock using: colors using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizeColor: metricBlock using: colors using: transformation	"aBlock is evaluated on each node model. 	 Colors is an array of colors used to do the fading"		| min max |	"We get the min and the max of the metric for all the elements"	self assert: [ elements notEmpty ] description: 'You need to provide elements using #objects:, #elements:, #fromObjects:, ... '.	min := transformation rtValue: (metricBlock rtValue: elements anyOne model).	max := min.	elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el model).		min := min min: t.		max := max max: t ].	max = 0 ifTrue: [ ^ self ].		self normalizeColor: metricBlock using: colors using: transformation min: min max: max"	normalizer := RTMultiLinearColor new colors: colors.	elements do: [ :el |  		el trachelShape color: (normalizer level: (((transformation rtValue: (metricBlock rtValue: el model)) - min) / max)) ]"</body><body package="Roassal2-ColorNormalizer">normalizeColor: metricBlock using: colors using: transformation min: min max: max	| values normalizer |	self checkNotEmpty.			values := (self getNormalizedValues: metricBlock 							min: 0.0 max: 1.0 							minValue: min maxValue: max							using: transformation).	normalizer := RTMultiLinearColor new colors: colors."	elements do: [ :el |  		el trachelShape color: (normalizer level: (((transformation rtValue: (metricBlock rtValue: el model)) - min) / max)) ]"	elements with: values do: [ :el :v | 		el trachelShape color: (normalizer level: v) ]</body><body package="Roassal2-ColorNormalizer">normalizeColorAsGray: metricBlock	"aBlock is evaluated on each node model."	^ self normalizeColor: metricBlock using: (Array with: Color white with: Color black)</body><body package="Roassal2-ColorNormalizer">normalizeColorUsing: colors	^ self normalizeColor: #yourself using: colors</body></methods><methods><class-id>Roassal2.RTMetricNormalizer</class-id> <category>public normalize position</category><body package="Roassal2-ColorNormalizer">normalizePosition: metricBlock min: minValue max: maxValue	"metricBlock is evaluated on each node model. 	 minValue and maxValue are integer representing the minimum and maximum size in pixels for each node"	self normalizePosition: metricBlock min: minValue max: maxValue using: #yourself</body><body package="Roassal2-ColorNormalizer">normalizePosition: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"aBlock is evaluated on each node model"		| values |	values := (self getNormalizedValues: metricBlock 							min: min max: max 							minValue: minValue maxValue: maxValue 							using: transformation).	elements with: values do: [ :el :v | translator translate: el to: el position + (v asIntegerPoint) ]</body><body package="Roassal2-ColorNormalizer">normalizePosition: metricBlock min: min max: max using: transformation	"aBlock is evaluated on each node model"		| minValue maxValue |	"We get the min and the max of the metric for all the elements"	minValue := transformation rtValue: (metricBlock rtValue: elements anyOne model).	maxValue := minValue.	elements do: [ :el | 		| t |  		t := transformation rtValue: (metricBlock rtValue: el model).		minValue := minValue min: t.		maxValue := maxValue max: t ].		(maxValue - minValue) ~= (0 @ 0) ifTrue: [ 		elements do: [ :el | 			| tt t |			t := transformation rtValue: (metricBlock rtValue: el model).			"tt := minValue + (maxValue * (t - min) / max) asInteger."			tt := min + ((max - min) * ( (t - minValue) / (maxValue - minValue))) asIntegerPoint.			translator translate: el to: (tt) ] ]</body></methods><methods><class-id>Roassal2.RTMetricNormalizer</class-id> <category>utility</category><body package="Roassal2-ColorNormalizer">checkNotEmpty	"Raise an error if no elements have been added"	elements ifNil: [ self error: 'Need to provide a list of elements' ].	elements ifEmpty: [ self error: 'Please specify what are the elements I should operate on using #elements:' ]</body><body package="Roassal2-ColorNormalizer">getElementNormalizedValues: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"aBlock is evaluated on each node model"	self checkNotEmpty.	(maxValue = minValue) ifTrue: [ 		^ elements collect: [ :el | min ] ].	 	^ elements collect: [ :el | 			| tt t |			t := transformation rtValue: (metricBlock rtValue: el).			tt := min + ((max - min) * ( (t - minValue) / (maxValue - minValue))) ]</body><body package="Roassal2-ColorNormalizer">getNormalizedForLineWidthValues: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"aBlock is evaluated on each node model"	self checkNotEmpty.	(maxValue = minValue) ifTrue: [ 		^ self edges collect: [ :edge | min ] ].	 	^ self edges collect: [ :edge | 			| tt t |			t := transformation rtValue: (metricBlock value: edge from model value: edge to model).			tt := min + ((max - min) * ( (t - minValue) / (maxValue - minValue))) ]</body><body package="Roassal2-ColorNormalizer">getNormalizedValues: metricBlock min: min max: max minValue: minValue maxValue: maxValue using: transformation	"aBlock is evaluated on each node model"	self checkNotEmpty.	(maxValue = minValue) ifTrue: [ 		^ elements collect: [ :el | min ] ].	 	^ elements collect: [ :el | 			| tt t |			t := transformation rtValue: (metricBlock rtValue: el model).			tt := min + ((max - min) * ( (t - minValue) / (maxValue - minValue))) ]</body><body package="Roassal2-ColorNormalizer">getValue: t min: min max: max minValue: minValue maxValue: maxValue	maxValue = minValue ifTrue: [ ^ min ].	^ min + ((max - min) * ( (t - minValue) / (maxValue - minValue)))</body></methods><methods><class-id>Roassal2.RTMetricNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizer">alphaColor	"Make all the elements translucent"	^ self alphaColor: 0.4</body><body package="Roassal2-ColorNormalizer">alphaColor: anAlphaValue	"Set an alpha color (transparency) for nodes"	"aFloat has to be between 0.0 and 1.0"	elements do: [ :el | 				el trachelShape color: (el trachelShape color alpha: anAlphaValue) ]</body><body package="Roassal2-ColorNormalizer">elements	"Elements on which the normalization will occur"	^ elements</body><body package="Roassal2-ColorNormalizer">elements: someElements	elements := someElements</body><body package="Roassal2-ColorNormalizer">maxSize: anInteger	"aBlock is evaluated on each node model. 	Set the maximum size of each element"	elements do: [ :el | 		el trachelShape extent: (el trachelShape extent min: anInteger @ anInteger) ]</body><body package="Roassal2-ColorNormalizer">objects: someObjects	self assert: [ view notNil ] description: 'A view has to be set'.		self elements: (self view elementsFromModels: someObjects)</body><body package="Roassal2-ColorNormalizer">view	^ view</body><body package="Roassal2-ColorNormalizer">view: aViewOrAGroup	view := aViewOrAGroup</body></methods><methods><class-id>Roassal2.RTMetricNormalizer</class-id> <category>initialization</category><body package="Roassal2-ColorNormalizer">initialize	super initialize.	elements := OrderedCollection new.	self directTranslation</body></methods><methods><class-id>Roassal2.RTScatterplotMatrix</class-id> <category>accesing</category><body package="Roassal2-Experimental">allDotElements	^ allDotElements</body><body package="Roassal2-Experimental">allowSelectableView	^ allowEvent</body><body package="Roassal2-Experimental">allowSelectableView: aBool	allowEvent := aBool</body><body package="Roassal2-Experimental">boxShape	^ boxShape</body><body package="Roassal2-Experimental">boxShape: aShape	boxShape := aShape</body><body package="Roassal2-Experimental">boxes	^ boxes ifNil: [ boxes := RTGroup new ].</body><body package="Roassal2-Experimental">lineShape	^ lineShape</body><body package="Roassal2-Experimental">lineShape: aShape	lineShape := aShape</body><body package="Roassal2-Experimental">metrics	^ metrics</body><body package="Roassal2-Experimental">objects	^ objects</body><body package="Roassal2-Experimental">padding	^ padding</body><body package="Roassal2-Experimental">padding: aNumber	padding := aNumber</body><body package="Roassal2-Experimental">scatterBoxSize	^ boxSize</body><body package="Roassal2-Experimental">scatterBoxSize: aNumber	boxSize := aNumber</body><body package="Roassal2-Experimental">shouldUseAxis: aBool	self shouldUseAxisForX: aBool.	self shouldUseAxisForY: aBool.</body><body package="Roassal2-Experimental">shouldUseAxisForX: aBool	shouldUseAxisForX := aBool</body><body package="Roassal2-Experimental">shouldUseAxisForY: aBool	shouldUseAxisForY := aBool</body></methods><methods><class-id>Roassal2.RTScatterplotMatrix</class-id> <category>hooks</category><body package="Roassal2-Experimental">createView	^ RTView new @ RTDraggableView @ RTZoomableView</body><body package="Roassal2-Experimental">renderIn: aView	self renderMatrix: aView.	self createAxisIfNecessary: aView.	self addBrushInteractionIfNecessary: aView.</body></methods><methods><class-id>Roassal2.RTScatterplotMatrix</class-id> <category>rendering</category><body package="Roassal2-Experimental">renderMatrix: aView	| m elements x y box delta label |	m := self metrics.	self prepareScales.	allDotElements := RTGroup new.	m keys doWithIndex: [ :metric1 :j | 		m keys doWithIndex: [ :metric2 :k |			delta := ((k@j)* boxSize)+((k@j)*padding).			box := self boxShape elementOn: k@j.			box translateBy: delta.			self boxes add: box.						k = j ifTrue: [				label := self labelShape elementOn: metric1.				RTConstraint new					fix: box; movable: label; inner;					left; top; move.				aView add: label  ].						aView add: box.			elements := self shape elementsOn: self objects.			elements do: [ :e | 				x := (xScales at: metric1) scale: ((m at: metric1) rtValue: e model).				y := (yScales at: metric2) scale: ((m at: metric2) rtValue: e model).				e translateTo: (x @ y)+delta ].			allDotElements addAll: elements.			aView addAll: elements.			 ].		].</body></methods><methods><class-id>Roassal2.RTScatterplotMatrix</class-id> <category>helpers</category><body package="Roassal2-Experimental">addBrushInteractionIfNecessary: aView	| int |	self allowSelectableView ifFalse: [ ^ self ].	int := RTBrushInteraction new.	int elementsToBrush: [ :group | 		group flatCollect: [ :e | aView elementsFromModel: e model ] ].	int domainElements: self allDotElements.	int groups: self boxes.	aView @ int.</body><body package="Roassal2-Experimental">createAxisIfNecessary: aView	self createAxisXIfNecessary: aView.	self createAxisYIfNecessary: aView.	aView edges do: #pushBack</body><body package="Roassal2-Experimental">createAxisXIfNecessary: aView	| m min max v box line e1 e2 edge axe nticks result delta size scale |	shouldUseAxisForX ifFalse: [ ^ self ].	m := self metrics.	size := (boxSize*m keys size) + (padding * m keys size) + (boxSize/2)+ (padding/2).	box := RTBox new size: 0.	line := self lineShape.	axe := self axisX.	m keys doWithIndex: [ :m0 :j |		min := Float fmax.		max := Float fmin.		delta := ((boxSize*j) + (padding * j))@0.				self objects do: [ :o |			v := (m at: m0) rtValue: o.			min := min min: v.			max := max max: v.			 ]. 		nticks := axe numberOfTicks.		nticks isZero ifTrue: [ nticks := 2 ].		result := generator searchMin: min max: max desired: axe numberOfTicks.		scale := xScales at: m0.		(result min to: result max by: result step) do: [ :n |			e1 := box element.			e2 := box element.			edge := RTEdge from: e1 to: e2.			edge + line.			v := scale scale: n.			e1 translateTo: v @(boxSize/2).			e2 translateTo: v @size.			e1 translateBy: delta.			e2 translateBy: delta.			view add: e1; add: e2; add: edge ].		axe minValue: result min;			maxValue: result max;			numberOfTicks: result numberOfTicks;			numberOfLabels: result numberOfTicks;			axisFrom: ((scale scale: result min)@size) + delta			to: ((scale scale: result max)@size) + delta		].</body><body package="Roassal2-Experimental">createAxisYIfNecessary: aView	| m min max v box line e1 e2 edge axe nticks result delta size scale |	shouldUseAxisForY ifFalse: [ ^ self ].	m := self metrics.	size := (boxSize*m keys size) + (padding * m keys size) + (boxSize/2)+ (padding/2).	box := RTBox new size: 0.	line := self lineShape.	axe := self axisY.	m keys doWithIndex: [ :m0 :j |		min := Float fmax.		max := Float fmin.		delta := 0@((boxSize*j) + (padding * j)).				self objects do: [ :o |			v := (m at: m0) rtValue: o.			min := min min: v.			max := max max: v.			 ]. 		nticks := axe numberOfTicks.		nticks isZero ifTrue: [ nticks := 2 ].		result := generator searchMin: min max: max desired: axe numberOfTicks.		scale := yScales at: m0.		(result min to: result max by: result step) do: [ :n |			e1 := box element.			e2 := box element.			edge := RTEdge from: e1 to: e2.			edge + line.			v := scale scale: n.			e1 translateTo: (boxSize/2)@v.			e2 translateTo: size@v.			e1 translateBy: delta.			e2 translateBy: delta.			view add: e1; add: e2; add: edge ].		axe minValue: result min;			maxValue: result max;			numberOfTicks: result numberOfTicks;			numberOfLabels: result numberOfTicks;			axisFrom: ( (boxSize/2) @(scale scale: result min)) + delta			to: ( (boxSize/2) @(scale scale: result max)) + delta		].</body><body package="Roassal2-Experimental">prepareScales	| domain range x y m value | 	xScales := Dictionary new.	yScales := Dictionary new.	m := self metrics.		m keys do: [ :k |		value := m at: k.		domain := Array 			with: (value value: (objects minFor: value)) 			with: (value value: (objects maxFor: value)).		range := Array with: (padding /2)-(boxSize /2) with: (boxSize/2) - (padding/2).		x := RTScale linear domain: domain; range: range.		y := RTScale linear domain: domain; range: range reverse.		xScales at: k put: x.		yScales at: k put: y ].</body></methods><methods><class-id>Roassal2.RTScatterplotMatrix</class-id> <category>accessing</category><body package="Roassal2-Experimental">labelShape	^ labelShape</body><body package="Roassal2-Experimental">labelShape: aShape	labelShape := aShape</body><body package="Roassal2-Experimental">objects: aCollection	objects := aCollection</body></methods><methods><class-id>Roassal2.RTScatterplotMatrix</class-id> <category>initialization</category><body package="Roassal2-Experimental">initialize	super initialize.	self padding: 15.	self scatterBoxSize: 150.	self shouldUseAxis: true.	self allowSelectableView: true.		self shape circle 		size: 4; 		color: (Color colorFrom: '#020289').	self boxShape: (RTBox new size: self scatterBoxSize;		color: Color transparent; 		borderColor: Color veryLightGray).	self lineShape: (RTLine new color: Color veryLightGray trans).	self labelShape: (RTLabel new).		generator := RTLabelGenerator nice: RTNiceStepSizeGenerator new.	generator setLooseFlag: true.	metrics := Dictionary new.</body></methods><methods><class-id>Roassal2.RTDecoration</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: aRTElement 	aRTElement 		when: TRMouseEnter 		do: [ :anEvent | 			self displayDecoration: aRTElement.			anEvent signalUpdate ].		aRTElement 		when: TRMouseLeave 		do: [ :anEvent |			self hideDecoration: aRTElement.			anEvent signalUpdate ]</body></methods><methods><class-id>Roassal2.RTDecoration</class-id> <category>actions</category><body package="Roassal2-Interactions">displayDecoration: anElement	| position decorations callback |	position := anElement encompassingRectangle topRight.	decorations := anElement attributeAt: #decoration ifAbsentPut: [ RTGroup new ].	decorations ifNotEmpty: [ ^ self ].	items reverseDo: [ :item | | decoration halfExtent |		decoration := item element.		decoration when: TRMouseClick do: [ :anDecorationEvent | item action rtValue: anElement ].		item tooltip ifNotNil: [ :text | decoration @ (RTPopup text: text) ].		halfExtent := (decoration extent // 2) * (1 @ -1).		decoration translateTo: position - halfExtent.		position := position - (decoration extent x @ 0).		decorations add: decoration.		anElement view add: decoration.	].	callback := TRTranslationCallback block: [ :shape :step | decorations translateBy: step ].	anElement attributeAt: #decorationCallback put: callback.	anElement trachelShape addCallback: callback.</body><body package="Roassal2-Interactions">hideDecoration: anElement 	| decorations callback |	decorations := anElement attributeAt: #decoration ifAbsent: [ ^ self ].	decorations do: #remove.	anElement removeAttributeAt: #decoration ifAbsent: [ nil ].	callback := anElement attributeAt: #decorationCallback ifAbsent: [ ^ self ].	anElement trachelShape removeCallback: callback ifAbsent: [ nil ].</body></methods><methods><class-id>Roassal2.RTDecoration</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	items := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTDecoration</class-id> <category>public</category><body package="Roassal2-Interactions">shape: aRTShape action: anOneArgBlock 	self shape: aRTShape tooltip: nil action: anOneArgBlock</body><body package="Roassal2-Interactions">shape: aRTShape tooltip: tooltipString action: anOneArgBlock 	items add: (RTDecorationItem new 									shape: aRTShape; 									tooltip: tooltipString;									action: anOneArgBlock;									yourself)</body></methods><methods><class-id>Roassal2.TREmptyNarrowArrowHeadShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-ShapesForArrow">computePath	| vector r u unit middle endPoint |	vector := self to - self from.	r := vector r.	r = 0		ifTrue: [ ^ false ].	u := vector normal.	unit := vector / r.	endPoint := self to - (vector * (1 - percentage)).	middle := endPoint - (unit * size).	left := middle - (u * size * 0.5).	right := middle + (u * size * 0.5).	path := self athensCanvas		createPath: [ :builder | 			builder				absolute;				moveTo: endPoint;				lineTo: left;				lineTo: right;				lineTo: endPoint ]</body></methods><methods><class-id>Roassal2.TRFilledNarrowArrowHeadShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-ShapesForArrow">color: aColor	super color: aColor.	color := aColor</body></methods><methods><class-id>Roassal2.RTMorphingView</class-id> <category>configuration</category><body package="Roassal2-Interactions-MorphingView">morphIntoView: aRTView	afterAllTranslationsBlocks 		add: [ :view | view @ (RTMorphingView new 													referenceView: aRTView; 													smoothTransition)]</body><body package="Roassal2-Interactions-MorphingView">pushElementsToFrontAndEdgesToBack	afterAllTranslationsBlocks 		add: [ :view | view edges do: #pushBack ];		add: [ :view | view elements do: #pushFront ]</body><body package="Roassal2-Interactions-MorphingView">resize: e1 toExtentOf: e2	translator resize: e1 to: e2 extent</body><body package="Roassal2-Interactions-MorphingView">smoothTransition	self smoothTransition: 2</body><body package="Roassal2-Interactions-MorphingView">smoothTransition: aDuration	translator := RTSmoothResizeLayoutTranslator new nbCycles: aDuration</body></methods><methods><class-id>Roassal2.RTMorphingView</class-id> <category>initialization</category><body package="Roassal2-Interactions-MorphingView">getAllModelOfView: aView	^ (aView elements collect: #model) asArray</body><body package="Roassal2-Interactions-MorphingView">initialize	super initialize.		self pushElementsToFrontAndEdgesToBack.</body><body package="Roassal2-Interactions-MorphingView">initializeElement: aView	| allModels referenceElements edges |	allModels := (aView elements collect: #model) asArray.	referenceElements := referenceView elementsFromModels: allModels.	referenceModels := referenceElements collect: #model.		"Removing old elements and edges that are not in the new view"	aView removeElements: (aView elementsFromModels: (allModels difference: referenceModels)).		aView removeAllEdges.		"Adding elements that are not in the old view"	aView addAll: (referenceView elements difference: referenceElements).		"Adding edges"		edges := RTEdgeBuilder new						view: aView;						useAssociations: (referenceView edges collect: #model).			"Updating color and width of edges"	aView edges do: [ :edge | | referenceEdge |		referenceEdge := referenceView edgeFromModel: edge model. 		edge @ RTMakeEdgeNotUpdatable.		edge trachelShape color: referenceEdge trachelShape strokePaint.		edge trachelShape width: referenceEdge trachelShape width.	].	(aView elementsFromModels: referenceModels) with: referenceElements do: [ :e1 :e2 | 		self translate: e1 toPositionOf: e2. 		self resize: e1 toExtentOf: e2. 		e1 color: e2 color.	].	self afterTranslationDoActionOn: aView</body><body package="Roassal2-Interactions-MorphingView">initializeElementOLD: aView	| allModels referenceElements |	allModels := self getAllModelOfView: aView.	referenceElements := referenceView elementsFromModels: allModels.	referenceModels := referenceElements collect: #model.	"Removing old elements and edges that are not in the new view"	aView		removeElements: (aView elementsFromModels: (allModels difference: referenceModels)).	aView removeEdges: (aView edges difference: referenceView edges).	"Adding elements that are not in the old view"	aView addAll: (referenceView elements difference: referenceElements).	"Adding edges that are not in the old view"	RTEdgeBuilder new		view: aView;		useAssociations:			((referenceView edges collect: #model)				difference: (aView edges collect: #model)).	(aView elementsFromModels: referenceModels)		with: referenceElements		do: [ :e1 :e2 | 			self translate: e1 toPositionOf: e2.			self resize: e1 toExtentOf: e2 ].	self afterTranslationDoActionOn: aView</body></methods><methods><class-id>Roassal2.RTMorphingView</class-id> <category>testing</category><body package="Roassal2-Interactions-MorphingView">hasCompleted	^ translator hasCompleted</body></methods><methods><class-id>Roassal2.RTKiviatNode</class-id> <category>accessing</category><body package="Roassal2-Builder-Kiviat">arrayValues	^ arrayValues.</body><body package="Roassal2-Builder-Kiviat">edgeKiviatElements	^ edgeKiviatElements</body><body package="Roassal2-Builder-Kiviat">named	^ named</body><body package="Roassal2-Builder-Kiviat">named: aString	named := aString</body><body package="Roassal2-Builder-Kiviat">nodeKiviatElements	^ nodeKiviatElements</body><body package="Roassal2-Builder-Kiviat">polygonElement	^ polygonElement.</body><body package="Roassal2-Builder-Kiviat">polygonElement: anRTElement	polygonElement := anRTElement.</body><body package="Roassal2-Builder-Kiviat">shapeEdge	^ shapeEdge.</body><body package="Roassal2-Builder-Kiviat">shapeEdge: aShape	shapeEdge := aShape.</body><body package="Roassal2-Builder-Kiviat">shapeNode	^ shapeNode.</body><body package="Roassal2-Builder-Kiviat">shapeNode: aShape	shapeNode := aShape.</body><body package="Roassal2-Builder-Kiviat">values: anArrayValue	arrayValues := anArrayValue.</body></methods><methods><class-id>Roassal2.RTKiviatNode</class-id> <category>adding</category><body package="Roassal2-Builder-Kiviat">addEdgeElement: anElement	edgeKiviatElements add: anElement.</body><body package="Roassal2-Builder-Kiviat">addEdgeElements: anElementsCollection	anElementsCollection do: [ :e | edgeKiviatElements add: e].</body><body package="Roassal2-Builder-Kiviat">addNodeElement: anElement	nodeKiviatElements add: anElement.</body><body package="Roassal2-Builder-Kiviat">addNodeElements: anElementsCollection	anElementsCollection do: [ :e | nodeKiviatElements add: e].</body></methods><methods><class-id>Roassal2.RTKiviatNode</class-id> <category>default</category><body package="Roassal2-Builder-Kiviat">defaultArrayValues	arrayValues := Array new.</body><body package="Roassal2-Builder-Kiviat">defaultShapeEdge	shapeEdge := RTLine new.</body><body package="Roassal2-Builder-Kiviat">defaultShapeNode	shapeNode := RTEllipse new color: (Color blue alpha: 0.3); size: 10.</body></methods><methods><class-id>Roassal2.RTKiviatNode</class-id> <category>initialization</category><body package="Roassal2-Builder-Kiviat">initialize	super initialize.	self defaultArrayValues.	self defaultShapeNode.	self defaultShapeEdge.	nodeKiviatElements := OrderedCollection new.	edgeKiviatElements := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTLinearTransformation</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Scaling">invTrans: value	^ value</body><body package="Roassal2-Builder-Grapher-Scaling">trans: value	^ value</body></methods><methods><class-id>Roassal2.RTStyledLabel</class-id> <category>public - configuration</category><body package="Roassal2-Shapes">bold	emphasis add: self emphasisClass bold</body><body package="Roassal2-Shapes">italic	emphasis add: self emphasisClass italic</body><body package="Roassal2-Shapes">narrow	emphasis add: self emphasisClass narrow</body><body package="Roassal2-Shapes">normal	emphasis add: self emphasisClass normal</body><body package="Roassal2-Shapes">struckOut	emphasis add: self emphasisClass struckOut</body><body package="Roassal2-Shapes">underlined	emphasis add: self emphasisClass underlined</body></methods><methods><class-id>Roassal2.RTStyledLabel</class-id> <category>accessing</category><body package="Roassal2-Shapes">emphasis: aValueOrOneArgBlock	self emphasisElement: [ :anElement | aValueOrOneArgBlock rtValue: anElement model ]</body><body package="Roassal2-Shapes">emphasisElement: aValueOrBlock	emphasis := aValueOrBlock</body><body package="Roassal2-Shapes">emphasisFor: anElement	^ emphasis rtValue: anElement</body></methods><methods><class-id>Roassal2.RTStyledLabel</class-id> <category>private - utility</category><body package="Roassal2-Shapes">emphasisClass	^ TRPlatform current textEmphasisClass</body></methods><methods><class-id>Roassal2.RTStyledLabel</class-id> <category>trachel shape production</category><body package="Roassal2-Shapes">trachelShapeForOneLine: anElement	| shape |	shape := TRStyledLabelShape new.	shape		text: (self textFor: anElement);		color: (self colorFor: anElement);		position: anElement position;		fontSize: (self heightFor: anElement);		fontName: (self fontNameFor: anElement);		emphasis: (self emphasisFor: anElement).	^ shape</body><body package="Roassal2-Shapes">updateFor: anElement trachelShape: trachelShape	trachelShape isNil		ifTrue: [ ^ self ].	trachelShape		color: (self colorFor: anElement);		fontSize: (self heightFor: anElement);		fontName: (self fontNameFor: anElement);		emphasis: (self emphasisFor: anElement);		position: anElement position;		text: (self textFor: anElement) on: anElement position;		rotateByDegrees: (self rotationFor: anElement);		scaleBy: (self scaleFor: anElement)</body></methods><methods><class-id>Roassal2.RTStyledLabel</class-id> <category>rendering</category><body package="Roassal2-Shapes">widthFor: anElement	^ TRStyledLabelShape		widthOfText: (self textFor: anElement)		fontName: (self fontNameFor: fontName)		fontSize: (self heightFor: anElement)		emphasis: (self emphasisFor: anElement)</body></methods><methods><class-id>Roassal2.RTStyledLabel</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	emphasis := OrderedCollection new</body></methods><methods><class-id>Roassal2.RTIcon class</class-id> <category>icons</category><body package="Roassal2-Utility">objectprofile	^ TRPlatform current formFromStream: (self objectprofileContents readStream)</body><body package="Roassal2-Utility">objectprofileContents	"Private - Method generated with the content of the file /Users/alexandrebergel/Documents/ObjectProfile/Logos//ObjectProfileLogo.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAAKwAAAC9CAIAAACh2QGxAAAKtmlDQ1BJQ0MgUHJvZmlsZQAASA2tlndUU9kWh8+96Q0IgUgn9I4U6dJrKNKrqIQkEFqMIUFA7AyOwFgQkaKiyKCAgqNSZCyIKLZBUQH7BBlU1HGwYENlbuARZ7315r931trnfPd3dvbdZ+eetTYA5HqWQJAJKwCQxRcJI/y9GHHxCQzcA4AD6oAI6ADNYmcLPMPCgsG/jvdDAJJu3rKQxvpXt/+9QeVws9kAQGHIdjInm52F8AnEStkCoQgAlAei668UCaTMQVhJiCSIcK6UU2e5VMrJs7xvxicqwhvxQeLgySyWMBUAUjeiM3LYqUgckgRhKz4njQ8AGTk5cGPzWEhssjQH86ys5VIuQNg4+R9xUv/BLFayLCaLlSrj2bMgv0Re7JOWLchk5c08/D+nrEwxUq+ZoYXM5OyMyCBkVUJqlstm+UbOMY/LlP5nM7pA5BUxx2kiZtQc88QB0XMszoj2nOOM5UEyf37yotA5nZ3tjdR+NmY+Lyp2jjlcH985Fi6PkPln50TK9Hye96I5n3RWoLTWM7mxhAj9h7mZ/rL3CkRhsjz5mYtkZ0kR+sl8uNnfzyviRQXMxREJo2Q+KWl+zDmdJwyQ6YLMmW96JgehOEJWBy4/WlZDDstHVlsQCfIAH7BBCGCBbCACXCAUcXNF0uS9lwvyhGmpPBHDE7kBXHMGk8+2NGfYWFnbAOl9kvoA8PbOzD2B6PjvmgDRnajIt9rzXUt2AKCjGgBV6ndNvxYAeSTH9gS2WJgzEw6gpQsGuaXySCVVgRbQA8bAAtgAe+ACPIAvCAShIArEg6VI1jyQBYRgJSgA60ERKAHbwE5QDWrBAXAIHAHHQAc4Bc6Bi+AquAEGwX0gAWPgBZgA78EUBEE4iALRIFVIGzKAzCAbyBFyg3yhYCgCioeSoFSID4mhAmgjVAKVQdXQfqgR+gU6CZ2DLkMD0F1oBBqH3kCfYRRMhpVgTdgQng87wp5wEBwFL4FT4RVwPlwIb4Er4Tr4MNwOn4OvwoOwBH4BT6IAioSio3RQFihHlDcqFJWASkEJUWtQxagKVB2qBdWF6kPdQklQL1Gf0Fg0Dc1AW6Bd0AHoaDQbvQK9Bl2KrkYfQreje9G30CPoCfQ3DAWjgTHDOGOYmDhMKmYlpghTgWnAtGEuYAYxY5j3WCyWjjXCOmADsPHYdOwqbCl2D7YV240dwI5iJ3E4nCrODOeKC8WxcCJcEa4Kdxh3FncTN4b7iCfhtfE2eD98Ap6P34CvwDfhz+Bv4p/ipwgKBAOCMyGUwCHkEbYS6gldhOuEMcIUkUo0IroSo4jpxPXESmIL8QLxAfEtiUTSJTmRwklppHWkStJR0iXSCOkTWZFsSvYmJ5LF5C3kg+Ru8l3yWwqFYkjxoCRQRJQtlEbKecojykc5mpylHFOOI7dWrkauXe6m3Ct5gryBvKf8Uvl8+Qr54/LX5V8qEBQMFbwVWAprFGoUTioMK0xSaVRraig1i1pKbaJepj5TxCkaKvoqchQLFQ8onlccpaFoejRvGpu2kVZPu0AbU8IqGSkxldKVSpSOKPUrTSgrKi9QjlHOVa5RPq0soaPohnQmPZO+lX6MPkT/PE9znuc87rzN81rm3Zz3QUVdxUOFq1Ks0qoyqPJZlaHqq5qhul21Q/WhGlrNVC1cbaXaXrULai/VldRd1NnqxerH1O9pwBqmGhEaqzQOaFzTmNTU0vTXFGhWaZ7XfKlF1/LQStcq1zqjNa5N03bTTtMu1z6r/ZyhzPBkZDIqGb2MCR0NnQAdsc5+nX6dKV0j3WjdDbqtug/1iHqOeil65Xo9ehP62voh+gX6zfr3DAgGjgY8g10GfQYfDI0MYw03GXYYPjNSMWIa5Rs1Gz0wphi7G68wrjO+bYI1cTTJMNljcsMUNrUz5ZnWmF43g83szdLM9pgNmGPMncz55nXmwxZkC0+LHItmixFLumWw5QbLDstX8/XnJ8zfPr9v/jcrO6tMq3qr+9aK1oHWG6y7rN/YmNqwbWpsbttSbP1s19p22r5eYLaAu2Dvgjt2NLsQu012PXZf7R3shfYt9uMO+g5JDrsdhh2VHMMcSx0vOWGcvJzWOp1y+uRs7yxyPub8l4uFS4ZLk8uzhUYLuQvrF4666rqyXPe7StwYbklu+9wk7jruLPc698ceeh4cjwaPp54mnumehz1feVl5Cb3avD54O3uv9u72Qfn4+xT79Psq+kb7Vvs+8tP1S/Vr9pvwt/Nf5d8dgAkICtgeMMzUZLKZjcyJQIfA1YG9QeSgyKDqoMfBpsHC4K4QOCQwZEfIg0UGi/iLOkJBKDN0R+jDMKOwFWG/hmPDw8Jrwp9EWEcURPRF0iKXRTZFvo/yitoadT/aOFoc3RMjH5MY0xjzIdYntixWEjc/bnXc1Xi1+LT4zgRcQkxCQ8LkYt/FOxePJdolFiUOLTFakrvk8lK1pZlLTy+TX8ZadjwJkxSb1JT0hRXKqmNNJjOTdydPsL3Zu9gvOB6ccs4415Vbxn2a4ppSlvIs1TV1R+o4z51XwXuZ5p1WnfY6PSC9Nv1DRmjGwYzpzNjM1ix8VlLWSb4iP4Pfu1xree7yAYGZoEggWeG8YueKCWGQsCEbyl6S3SlSQhqXa2Jj8Q/ikRy3nJqcjytjVh7Ppebyc6/lmeZtznua75f/8yr0KvaqngKdgvUFI6s9V+9fA61JXtOzVm9t4dqxdf7rDq0nrs9Y/9sGqw1lG95tjN3YVahZuK5w9Af/H5qL5IqERcObXDbV/oj+Me3H/s22m6s2fyvmFF8psSqpKPlSyi698pP1T5U/TW9J2dK/1X7r3m3YbfxtQ9vdtx8qo5bll43uCNnRXs4oLy5/t3PZzssVCypqdxF3iXdJKoMrO6v0q7ZVfanmVQ/WeNW07tbYvXn3hz2cPTf3euxtqdWsLan9vC9t3539/vvb6wzrKg5gD+QceFIfU9/3s+PPjQ1qDSUNXw/yD0oORRzqbXRobGzSaNraDDeLm8cPJx6+ccTnSGeLRcv+VnpryVFwVHz0+S9JvwwdCzrWc9zxeMsJgxO722htxe1Qe177RAevQ9IZ3zlwMvBkT5dLV9uvlr8ePKVzqua08umtZ4hnCs9Mn80/O9kt6H55LvXcaM+ynvvn487f7g3v7b8QdOHSRb+L5/s8+85ecr106rLz5ZNXHK90XLW/2n7N7lrbb3a/tfXb97dfd7jeecPpRtfAwoEzN91vnrvlc+vibebtq4OLBgeGoofuDCcOS+5w7jy7m3n39b2ce1P31z3APCh+qPCw4pHGo7rfTX5vldhLTo/4jFx7HPn4/ih79MUf2X98GSt8QnlS8VT7aeMzm2enxv3Gbzxf/HzsheDF1MuiP6l/7n5l/OrEXx5/XZuImxh7LXw9/ab0rerbg+8WvOuZDJt89D7r/dSH4o+qHw99cvzU9zn289OplV9wXyq/mnzt+hb07cF01vS0gCVkzfQCKGSGU1IAeHMQAEo8ALQbABDlZvvdGQ9otkdHWNqrS006/otne+KZHXsADnQDEOUBQDCyVq0DwBAxeeQ5DDFEh21tZQZmR3aKrc0MQaQOpDWpmJ5+i/SIOBMAvg5PT091TE9/bUB6nXsAdL+f7bOl3sEWiKYT5mvt1Is+nD8b6fv8N5Gw9E45PgU9AAABnWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS4xLjIiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lvbj4xNzI8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MTg5PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CgyyweUAADj6SURBVHgB7Z15mCRHdeArj7q6qu97eu57JI2kGd3IEqfEisU2lzG2Ob61DSy7GNYYf+tdY4zPlY/18dkf5g/sNRZe28AasV6wQAiMBJIldI+kue/p6emruqu67spjf1Gpzs6uIzOrunqmpt3J0IqKePHixYsXL168uCTTNAPr379tDsj/tqu/XnvBgXUhWJeDdSFYl4FAQF17TMDKkSRRLZP/iT9YPcRIpmmUK+tpA0lkAj4QkETGgAjwT2AQoTLqtcW1tSYEupk1jLxuFA2zFJBKJX3BNEu6mdf1omamaDv+utvCqtQhS+GAJIeULikQlOWIEogqcocUUBQ5zE9Vjq8tGVhzmmAu+8x87umiPkc7GaYpBxT6cLlnC7XA59mVbUVSBhd6xAwY4DBMQ5Wj8dCuse53SdKasqXWmiZQpe68llCkIE2o2Jq7HLB/Wa1b7295IFhKFMNA2XJSZQntwpiyxiSAql4VEm3CfU3PaPqCGONdv3hkqypFXEGaTCwPIlI8ssszvxnQTVPzJNUTz2UDaF9NUDbKGM8zJWM+r03kSxdD6mBf9BZZCrlwR5YikeDGTPGULCkuYM0lMS50BLd45p3PPp8tne2OHoiqo7IUlFaBEk8aGgJoTyGg1+mi7UvTNH9Bn8IoQysXSrNGpOAuBJKkxsNbM8XjjAYNMcIHsBlVh4NKpzukZqQn049M5x6NLIz0d9zZ13FDPLRPlhhMxAjVnl97CQEjLro0r12iJxVKCd3MyPIS+8xAHuNfDbg1A+N3WBldjWFbN7R46Bp3EaSNS/pssngoKHXqRuZS+p9mct+Nqzs7w3tGu35UkUNSW1ri7SMEzOKLOe1SpnCyZDCvy2OvwLWKrpPJXwjHhsoT94qUpZ/h4EBI6S9oiRaPCJIZDY+4Fy2EwMgZeo4JJmE5EGFqmtQPpYqHZ7OP98fuGordHVR6UQyeeJbqs/qhdhACUzcLaP5MkeafYU5WdszUJEwuGJcYKioM+AouqXJ3UBnIa1MtHBGwBnAbBOWeirIqfqLJ5nJP42Ow48s6SaZSudLkePLLU5lHhmJvGOh4TSQ43D5aoSav7SqsekAofwZ+/VymcJbCBMuEq672R9uLSVqgJAXCtSHKsSgAVYmJxdG6mFxy104yDC0S3hRW+msnL8bqZm4m/b0acy5IL9erWJq7MP/387nnB2Ov7eu4RZU7y1phMf8V+u8VFAJTMzKp/OG8dhGPnm9eGJni2c7wbnd2dQZ3LqhHTYMxpTWCIEGfFJe8jLuiniqZOReLRJJlSYqki8czpROTC98cir9+uPNNkoStsKQ83Ku2GqlXoGz0uREoZUvnpzOP5rQzhlH0LQHMvfVc6YInI+KRPSGlV5TTik94CMwgpoYnsnThZQYOd7DycKYGTDmrnT87/79fmfrddOGEbhTcc61q6uUWAnikGfOp3KHZ7L8aZgbNSedooIZ0bMkwhCvG7WM+JrfODi+7B4a6I9e6FVlOm87+IBDQPcEEgBgfVPRUKn/08PTvnE9+qahPmwGPevnC3DhQIw3QOPaKHDRepnAKTqEPy6Z7E6VLup7NlyYrMFf/jId3mi3TsaYidalyV3UpzpiSNl/QZ1xsGiewHZZlBV04kXrw8OT90+lHDbMgFM/l/ZpohmYIRJ/qRm4+/2yy8KJhMGo2bYtImpktaBc9ieiJHlSUyhmmZ67aAKasKt21kxyxmdJpXctJHqOBI4MdRCnI4ax29sz8F47N/FnRnMFXZidehkDTjdEQbaamJ+ZyLxX1SarrYjf5RKoJL4KH9a+wIhwI64Hiym1DRQn3xQ560jaXf65kzrP63JwtinmIZZDI/mtBn9jU89O94RvEElj9uZInPf4BLoMmMHKlS9OZHxTx/govenMsWqoRSNAl6JWlqJohrPDgaCtUK2NBLKLgJnL7UOn54kXWjVbSbHQPWQ7liuPHJv9gPPU1zZi9PKtQqysEWDoYPonc46ZZWLkCsBoBPHS4ojbv1iZC1qT+6G2etro7ElKZYnSExjxH6bw+ndMn0BmeCL0Bys6SC6m/PzL9x5nSmfKCpHemlUCslhDQBQ0zN5d9LpU/JKZqDifaSsgVebEvTEMzPYQAwKDaqyodK+1Mkh4L7vTs3yU9USjNBIwW8ZNRwFQzxRNHpu+fyT6x2nLQIqKrGlYPpBL5Z7KlM5LMwNbiUrAr89qM2EDm+smBIItJxsqMLMmMdIQ3uZZDorlQOKUH8o1Nd92RIgeSUiwlT8z+6cWFrxc0sVdqlb4WN49NZaZwLl+caHnzW/hhT1FHCDD63D6cx52R3QGp+ck33uJ4dIciRd2KYd+ikU7knlTlSCtMkGVFCamSgmfnvnAh9SWhUFfnWy0hYC9eLLgDv9jqkA1WDTnwQi5F1CG2mTQ9ImDTRJRNiuyxVUkz8vnS+OpUlsEPo2Qza06eQ5IXN+qmr1YjwbjuyP5ocAte8Zb3D1EbU87Bd68vqPQpgR7Dy5VbD40iByOhQc8ZDZ5sLZBt1E1Ur1A7nuVUw0ACNu7o/QjM9CTDzthoYLWEADpkOdgTvS4a3IRVKOTA08JuiHYpoOlpTw3JMl042Cs1pUjx2LChzXNyCNVTmW9LrdZ58EsK6PHQlm29H+yM7GmIN40Cr6IQQAr7cLoj18fUjWKVrKVFIVFGIKeZHuYSS1MhZbA5ByXTy5DSF1Q8vMWshqcLp1vfTQ0jom7cOfALXeG9jTZqo/AtbZlahQs5iN7YEdrC9KmF4wK2oWGUssXztcpcFtcV2ScFsOyaUESSIiTAw7uVL15intLaAduU9EhwZHvvz3egR1f/W3UhoAplfbA/GsI+4CxYE41Rmw301JKRrZ3miI0GhxmYGi/XZE9pT/gaB6bawZnMv+gGA1Pt1EZjhR1gahF5eGf/R7oiq64DLPIuhxBQEnIAQ8PBDawct8o+wMUqTpyZHivxzA6CcnejVhtDsiJHEVzPVkwWjzFZbYkmoFA5YESUoe19H+pc/VHArtoKhYAO4Hfyyim+vujBkLxBOA9WWGyZfIOdqVqiWErYlakX6Ivd1GhPZQxQ5Rhb3evhtOLZHGWwH0T2AHNHYqeiBMLK2I7+j3ZHrrMj3QNYJN7LKO4o6KJeAG7pJS1d0GYakAMp3B+/KaJskAw6sV/pqUcBnc+USnqAnSkeX1TdrMhyQwrblOSuMLMyj4/NsTntotyCqQFHnrVIaHRH/we7fY8CTI4WckfHU//H02/mXo3ml5I1I5sXe3/Z9imH1D6fu+RYae3rOJDMh8pLIwZWgpfh5UY/EzNx7jigu3dZcbJYjpviFJvfTzKVLh/dkVpoRlKRY37x1oRjA61RigXHyqOA39kgteZ0xvHkbyUzxyLq2EDsrgZ26S0no0lNwBwaHSA0YcDkhFBRm/WvDyQp3IUfSdnCqNC0G8eqBQsTBe0CXtvllar8xZFySoTRlQl1f5shtcdTPI1APlu8GGh+g4woHv3EiWcWKnf0/0JneF9dipYnwP9U7sjhmf+eLh1laf3w9G+m8i8vB2ngVzNCgP3CPirNSJWXBhg9zaI+WyzNerpubLrYA9jbsT+kjiqWnWgnNBxgESFd0jxGBLRUPLjNv8phyhcL7fD0LhRKcwuFV1a4mRH2YSdt7/1QPLTdZ+2RgKx26vDMr+WM46WCqWsBOZgaT33FOpDvE4kTrBkhMIxsUWcLjT2BxqDRC/ps+f4HvyM9G2l6Ow6ElCExtDdqtjlqwDk1zfBwGQHOYhLWvklR5c7n8hdggLpCezwPkub1iZx2zhPMQeyyYJmBWoe6ec/Ax7sa0AHGQvH4S1P/LW+cKeRf5XYR7he+cX7uAUbnZWX4+9GwTSAGAh3lj3tkSYDKEyQ2g09GVCOooEiXklzIUKRIT/Sm+dwPxf7MZj9YWdCmzMBed7NAkTvjoZ0FbdbH2TSTvSGK2u1OkWHoydzLTY8FZSksheXhHf3/kfUh97LsVMZcxO5Y4jdL0mmNYziLH4eyikX9TPELXdEDA7HXuLNiMdPSfxsVAi5+mS7p1kCwhKUcQjFo7CTDYOEooE85UOWOnuit8/nnCqWL1Kmp2bZUMBJMk9xvkWG+N9J1H9fYeBaBWoKJnqePJVlfKLwkmWLbeBMfyxmR0MadfR+Nhbb6zo4GPvPy1K/mjGPFIjZ1xYdKMk/O/nFEGRYL6I18jQlByUiVtDmnDlheFt3SpLexXhNW++uDLcvEHTB90ZsSAQP/q1g1aXxrpYnPqHSJPebL8Fb9YDFJ9aWhqnLWiuCwUaY47rOOVQhMej8S0JAOWMifODLzqZx5slRDAkQJhjjJdfr0/F9eM/RphL6q0LoRDXDFNIvcEBCQ3HZDl8c5rhaYLZlJ//MFLorqjRyMhkYZjRu1D4DHB1A0vHeb1eVBUwnJ7IuwQlBb1SXd8eEV7ghu39H7sQYkwNQzhdPHEr+WD5wsFdysLkOXEoVHZrLfY9R2J8OZ6lcIyjOCeRxkPvxLWF8cM51kz51/OeB6sN7ozdHwWFmMnBTWDQt5MbA+lEhwWyy4tS7c6iR0hDePxN6scoyQ0YOJnh9RYC7IVqXg1j0DvxgLb/RNl5kunDqS+FRWP15ctATr5eVwFptQzib/MqudqwdTHe/XMufKhUzxvHDL+FXXDPFySB6IBDnJ61fUxAGVwnNi77arfSD6n5heKyEVc++asDp4Re4B0Y18svDyheSXs0W2t2hieYJ/ZdqqGS1iTIMLbHYM/IL/2SA6Plsaf3nyV/LSkXxWXKLm/ZmBUETqD923d/DTOEi84eGkxVB30PLE9DybOBoaAsEMfEgZiKgc5fRDvqBCM3LJ+nIATkRdYY1X6uBuonhoBxM/d+JXO7WkJy+lH55JP1rQpw1h08g1q4oOiAU3bu//z53hHT5Jgu0LhZPHEr+R0Q6XikLufX7ICtus9w381lD8dX56oB8hwBeUwOz3rQOcpKIr1WhwFKPMvxyU9PRc/ocYFmh7Z6FCqliFDASD8lBneGdYyFa7fKnCkYmFf04XDjNilptrqc1EyNSjwQ07+z4WD2/zSTHbzBcKJ47P/UZWP2b7A3zmBUzlDjd5+/Wjf9QR9J5/egtByUjnxPyNNYKaIu5JGHLA1u/BoNLtX5HAyvncszgArDJF/2eTmhTkrhcuJ2AK2rSf3JPcpgEwnJP5I+OpBzmUaAQ4V2oNDsJBRUvsGvhYNOjXDkACUoVXXpn+dNE8VywwCjTMeXKEIupg8J27Bz/pySsPIWCtj6NxaIKm/WJlnmLQBiPBoZC47sVvfbAP5vLPFLUprhKFC0G5MxbajVIRd8628cfokMg/N5F8EA8YQwCNEVaHdg98wr8/gFEgVXzl8NRnCubphkaBCq6oXMlrdt4w8mflTaoVict+egpBNl06i0UjpHpFH51ZiaojIeGJ84uKhcq53HOGkQoFBzvD13Dr8IpIuIyZc6WJi6l/wgmmSuHt/R9l8PJZOBKAInll5ldyGv4An5nqggVD0kD4rXsHP1V9BZgzj5sQMMFjpsfY7Me4cCKtGQYbx4TZ7NWQfcAtdjgoI+poTZxtHjmd+ZewOuJ/p6i4v6F48uTcH6a0Z4r5JatiZdWUbhn7X93RG1yQuAlBsTSf0y+uVAVUFq5Eg0OK1BYXNlWSdkV/cz1FIvfU8dk/KJrjwiPkV116EM2QEA/tPzD659hk9UDrzuBxCRTN2fId//XyNhPPcYFcaYrjpOi9ZvKv0TwsXieyT5xM/FHBuIBXuFUSALeYUeWMk5Ppb7s47uoKQVFPYu76H799tk7ZtcaGlFkcvWg/n7laCsadKQXumuO6bHYlERD/jCw7tPBAtLQgv8jQAfP5p0+n/iRvnHWuDfrN7wrHJEWWChdTXyppdTdj1l5AMg2ei5hntbSVx2wdtKIGCtp0QDG5Y2xl8w4H0jpByqKBmWtwWTLs1k2qNkurl7cp63IgKiZgkqyKW4k6MaBwYDMTEa9ccDe1b19nncK9o6FtLvfksdk/LJjnNTZqtWgUcBZcYMEpfGY6+/0NXT9ac5W5thBwL5BhtvSgtZOocliS9KLBzJO7i7t9rPFX5feKoL25PaRkJLOliyV9JlM6m8w/X9An8UnqnFfgFlXxNArqUrVm4QoXFYp/4XhoWzy4l6WBYKA3FmaHalyRwp67jLzIqZ1eHgWeOjH3x0XzgtZ6tbtYKCOBqV1MfnWg405c7IuxS/+tYRgaAY175XWTC4ZXQSyXirZCLP8Mcx10C/WBUPVGJpl7sWROz+Wen0k/Rm+j1dnOyVWSlFp24YnShQfKooLAYkjXcf3yXgbXonYMxe/pDu+JBHfGgptwVHseT15E5uu/SECq8OLRxO/ktbPCDljlD/PuuuHfH47fW11ODSHQjYV06Vyz/sHqIjxi8CtHQgNKoMvTseWBiBsE2QCtTbLlMqsdnUg9pEkz+JloVM+MtQCEhLBEgZh0ha7v77glFtwXD+0Oq8MtWaxC0XKNy9mFzy0UD63EI1SL8tpxihzoDB84MPrZalGuFAI0R6Zw3pAyl9FIgt3MGzcEvS4KrF25cizqrqBNzuWfnkw/tFA4LKkLpZJp6HSvxQ7uktkrSbjeZLYQDXSGbhzregfb1IJyn38XeE306eLJQ5d+qRTAK+xvGbomlgYjGdf2j/zPgdidFfkqbQJdz5um9wG/Ciwr+Sl87EIbN3+IByN/IX/4Uub/zuYe1QwOF0hUokxSCyQAPFpJ6GpdnclmHuZu6rHutwzF7isfaGl+ARMNw/wLw6QVUuqb/WrxfPIf+jpurVBmymc+8xkHDqznaU1c0dwa9jkw1w1yr2FQ7QkrvU30WvQWV4RMZR4+M/+5ucLTuo4x6LagX5cIHwm4ztGOhplNay9mC+e5a447Tt03NrpgZSZSKiUyxlFDv3z+EkVma2OxO3yQdRwnbcs0AUoVq0oIgJgyi8602tLAioIsR8NyXzMSwFJb/si55AOzue9gzBqXhZl0XZb15oynFkqvDETu2dzzXtYGKzqWk7/1whhAm3vfl5x8Nq0e5uDA6n3O7qxpphKeupT+end02VnHZc4iptTMj1mn4VAAVJZPEFvb/mgsS8G2klqBk0U2XgLxtwHGWTamdbJw6HjiD6cy39S5NP+ySIBFAB1D1+gu6UuZrx6b+X32HDd3xRz7Ica6fiYU7Gjohm8nE1zCtD1oOShb5jHPekZYf+dETVfkenwzFRkrDEPahW1q/Cuwn4wL6XEaclCyvCTKiclXRaFV6gGNI0sd5Z60TCFVkFj9EwmYzz1zIvEnC6VjuIKa0CLVOJuLkRWzK3jDzoFf7Apf664PBO+E2lvW6/BfHZr4ZEp7toWOQlGC2MwYCAWjIaVDK6mcVGQFjt3YXaFr4hH2YgnPh7O+FULgTBJvgnITKSfuYDr76YRjVawpE8m/lQ4WYMDAZs8dh1WWler1Q0hA/vkTid/DwL6cCqAmXaJdFak3esuOnv/EAdZqn5Ku66lUKpfL5fM81avHYrFQKNTfz378V62uiYWHjs/+D1ZKm1S19lS+HKDtOyL9XNPEtDMW3N4R2hpRRrmrhcvkXExvNyFwVrssARqGUUnD385NXagF3LFiNHvVhCCwWDFnxrphk31wXR3BsQb7sTGbferE7O/lVsHNXpdUrwSW7ePBG3b3/1fBa5zhQp0ayWQynU5nMpnnn39+YmIim+URZyMajQ4ODt5zzz0jIyOKIiZEsPGVqV+fWPi6VyFL6a+y2eI7XYnfphyPjCpKXNck3II8rCPeh1RHfe7A8ysESyTw/CfKhmOQehpTmYqVRw1csBYqXxpCqIGAEg9v5wYTB2bvINvuOIKTN463UH96l+oKQRNwqpY5Tk/orh09v6QVuqanp4vF4gsvvHDs2LFCoTA/Py8aqswfhgP0wa5duz7wgQ8MDLy6R5I9BM9c+IgWmDKqjxU5irbaHm0Px7lbj3/s21Ok4bDarUqdQ/F7u8J7sK7Ygcf5Pkc+72Bjg3EZn3Cp8hixonKBp3jGEB8tcwr2UnIABhNJTKMWVRs1rybBSuUKmUafA+MM/LnkX2aKR62xqBpzYzFO0pqyeml7MWk0JEOT85ngxPwLU8o3Z8Y7Dx9+JZFIaNrSjeeip5Q/K3Dy5Mlz587ZQsBtj5t63nUh+/li3nG+cLEyFgvZX8tQTMOHI3HuNApKQ9HQGCfO+qJ30Jd4ps1F2y9iqvvfJoRgCReDOkZoSAzqPazOcRpMLNsQEM93IA1CZ1jmqdXwtkywWBcO+j2nZpXHMuCF5FcShUeblIByk1vtDgaBxLEygj5lVLMltlzEUjXtEADkA4nAYEiFjFrIBzPJcHI6mpzqmJ+OZlPPsPJaxi/Eyu4MNgY7MD4+fuDAAYshTMRGO986lfmWpp7iKJkNU8Yg6FSVaCwyqGthruPriewLyqOcXIiHd5T3aDnBmwyvSAicZQrdoPASbCeDnPjHXTpmnmcucbUhEMzj4V+ZKaKSvG3u+bKYEzlnMBK5J87PP2DKDa+2lpuWQVrcaFkqKLl0qFRUDNaQHdwW+lw2gxEt1l3A4Efllnu5aE4hHJAi5kYsQwhTKJ8LZpMgUS8c7UtMxEt5OZsOa0VFUQ2cMQLSx4dl4ISKBDeMdr7z9PyfB+QcjKPHwyvM+PJry9FocIwn9DpCm3BPhZVhuy85Mawk3DIhsIkQS3BlHzDvg4aUbipTXstPiWkFj8gaBe6LDqm9Fm/tXO4BDr2fSnweCWCC7g5ZkcpALNS1rqRmo5lkiP46fqInt1DDEMFK6RrIbds/HYrqnb25eE9ZGjDyxBKUsLzyWSU5FdNKytSZ+PjJPiYmpUJQ54S+IsyhYMivp4ImZIIwNjZW0Zajnf9+NvevBelFLd/B8QRZirF0OdL1o2zRxjvpecl2RcUb+tl6IbCLLzezqKmqxPknNKiR1wJpzgy5T6ltDFYARwU7d7PaYRxeFYyrgFz2UxSP+aokJjoSk/Hxo70zF+NCAdCr63TW6fNd0+c7QxFteHNqeFuqdyTd2ZPPZULz0x3FbHB+Kjp+oreYCyJVFgaqpgQbE0pKj0Qie/fu7erimsxlH1enbut5P29hdfRuG4zfHZTZbmMNX8vAVuNHE7OD1SDDDed87oUXJj9W0lJuQMvTaCR6dj6j0mzHnh5ZmInyEz2/HKrOL2HrSkrQ6BnOdfdnLRWSz4YY7BUFLP6Q1MJNowaDweuvv/6d73xnXx+e8nb5VlETtKSKmJmYArKS8f9kIBKAAp+b7Dj13PCFY73FfNAa8v3SU+7fCM3seCwxERNb7LASuCet8U7vLNGSgOuuu+4nfuInenoa84858axGuN2FgDl0xnyZHWE+K48GRV1fOtPzwiNbUokwY0I9BUAz2ziF1b/0S0QLVa+KTo/BaIOtJIAO2LNnz7vf/e52kwAq1dZCgBqYXHjYkKb82oNsaNekS6d6nvv25vRcVAnWMNZoe1QF2l5Vy2vD8AC50eVSUTZ1sWS2kpaumZfyOjo6du/ejQT09lYu3tTMcpkj21oIuKxxOv/PeX/77+i7rMkefWr06A9HSrkgzSyad/ETix6y2dFZ7B7Idfbn4735SEfJ3shSzClM91OzkfnpWGae4d+yHxczr+y/rBS88Y1vvO2221g4WBmm1crdzkJgJrJPaybOVO/Kl+1o49zhoRPPDCEBFR2acT0SL23YMT+0OdUzlGH6xx1PTOgtGaHvE8QlkE2H5ic7mPqPH+9dSOAPXXIfeVNQG0LqH+hjpeCOO+4Ih5ct3NUGv0Kx7SsEXEA6k/mOptVQ6dW8QsPTbEeeHMmlwxVGADpgaGty4665DbvmaH7m/Zbnx0YiREEIhBnvzjMnHNmS7B3OnDvcN36sj9glZWJn8Beg3L7hws13xm6/4+Z2lgBq075CwNWYqcLR5V7U2uwXA4EunT40lJyOVUgAOmBw08INd5/vHcnyMrWQAD6HSejAKJLo/WpE37RvtnsoC1p8gs0dP0F7dQ/m9tw+uWm/Jqlc9BR3FNR2wWV7HNqKOg4O8JiE07lblzzJTE5FTx8aqOi2TBPiPflr7zw/sCnNBcDO6UBdVCQIpSB1D2Svu/vC6E6OYQnJ8P8BjOT1DOauvePixj3TBfkIl7z4z35FINtXCGYyTwi97eczA+eP9WPZOadzNEYorO259RK+P2FV1O79dbGbhtwzmL32jvHOnoIvQSxjEuJiSF2D2WteM75x76wks43UKKwLQV02eyVkS+eW78WqnQGlnc+q5w/3WtP6RSDR5mj1bfunylq+PAospvn8Lx26d0Nm1y0Tsor/0U8mATS4Obn/zvFNexJCIrE3dTNdPO0n8xWEaV9NwAX2jtuT67NIMqbOdqfnlx0BQPNHO4u7brqkhn2PAjVK4Diuue26maHNHND2ECOkBJjBTalr7rwwtjdRfgxSZGHRLCuEwJd5W4OEyxLVpkLACQJOZ/jRw6pqsupTwSsm+luum8E0e9USrEj2/ZPsrC9v3z/D7MMlExJgGPLI1vlr77owtCUt/I+20JhmunRqhc86uBTdkqQ2FYKSOa/pOTfGL9Yefidnos7nymkSWdVHt8/7GU0W0dT9L8bBwOZUNMYm29owZQmQBjakrv2R8eFNC2WNsaQ20ARFbZoTcbUzt0dsmwoBF1azv7ke323WMV5k5iPsD2DwtSNRy939+Wis5EeR2LlcApGotmH3fE2lYlG4aW9i/90XBsZqP4xXPhPNXpj2/dpUCMQFCT7GUVky5qaiRfapODjMQnDfhoVonOPojtgVBPE/Dm5cYMJZgWNRAmavv+vc8FbLbqiEIQu6CjmoyNtWP9tUCMo7QnwwCk0w16GXlj06gALvHswzli8NzD4wuYCIS1SrNg4JCZACI9vmr/uRC12Deec6hQuq9kxqUyGg91R4fmqyD3utmFeZy4n+tvjRPOwOWj5jXExr+r/LSihjkQIbds7tv/t810C+5kjhLEpUp42/NhUCcUOMD4ctwz82ILsXK7QwXuQWc70KHSPRzgOT/RuynhKANDe0ne7yS0ubCkFYGVDlSHlt0IMnkQ5NHLt06A0m97lUSCs0f+FBRZEIgC6WnSqipc4+bx0gMhlsvW3fJUQIbFchCA4qSkcl2ytagTHACMR6ckpIXPZgfywTsy0MN2LFgrIN0HBAD2RToQqJBHk44uPpMXFKqLPRYzYNU7iyDG0qBOywZse67XGpV0dsQJYHo9FlB/wV2WBPQD5TY195PTzu8ZomXzzO+fmlfQ0MQ10DWTWEO9I9q9iREAmOiUM6bfy1qRDAMfH2rNckjzZggxBqWTjpFj+M+UI2uDAbdcQtpjX+X3p8ej4ye4H71ZYyo4HG9nDCcCmmXogzipxS5Z2OegDtEN++QsCV6HQ4Tx7pmozHvhru1IuDnDTyzO4NwBLlkT6dDWeOMhDOgdEFH9SJU5udYY6Fty+f4UD7Etcfv9Pb8BZmgTy6Yy6Ef9DxsX9k8kwXu8ScU0dHut8geGYvxs++xE6FJU0DVX3D7FHLL+5Pq48NBWUq/l86qI9odVPaVwj6IjdzgYFn7RkR2DTGSgEPTDiAaTTp2FOj7BmkIR3xDQQZCIp55chTI+nksnkKHkkWqWPd3q8SoQbCgU3+HzxpgLiWgravEKhKZyy4s3yRg0eN0bVbr5sJx7i50CEHZiAxGTv85AZWFpqQA9xQnDQ9+fzwxEmOTS5TA5Gu4si2pNiquhRdm8JQSOqO3Fp9R1Bt6CsX275CwFDFs7+Kn0dNTal/Q3rzNQmnDYHVRkNyDO3lx8fYg8omH/9MLusA+eQLw8efGdZL4u0t+8MaGNsx3zuc5ZCCHVkvwGPe3VHuMmprJwHEe9ekXg1XOx4/G3cBqVK/54owIwK+/R03TsZ7ONe9pAyQA6Mkn3lx8KXHNk6dYWTh3InbnK7cscVpw4VE+NjTG47/cCSbCjslgK7P3sPtN0zhk3ZDVGaNyoKGNtIVuXa1GbVy/G19IJXFt5OJz04WHuBdSPeq0t6sJqO6n/p/2/NZ8QKUE54FwFhnYWTHPCfP6cRYeRUrCwgOMCz6cwb5xLPDM+c7cTdVnDpgrAlGSne+7fjQ1pSfpSlFDQxH375v6FNtPjWAUe275RziuNFoMHb3pfSDspJ035ZBv6QhhzfP77394qHHNuol3k9ekgPhSM6Ezr4ykLjY2dmfGxxbGNqSCoa5G+ZVRcgrLLMTnVPnOpPTHRxD1kpkxr+zhEGsUUnm/rvGBzezbcQxVXDKmiPM0TMl0Lep96faXwLaXQigrzO0Lyrv0M1nPVQBut6U6Hzbb5jmCoHDT4zSs51yACqGBvYgLcyFp891Hnt2JMxa82JrFotKKa+IG0xKYh0CgWLgsNtUoFKM3TdPbLt+CpxOy8OGqQhgz/ZFb48Ht1fEt+fPttYEsIwbLbb3//yhyV8OBNKea/bog/I28wlE4sQzw8WiukwOytYC2w+5cySQCWQcqkJMK+yGXzIqRJMhAZFYkY1DY7vn1KCvbau8qqBKI1t6fsa6saU9G95JVfsahjaVPdGDvdE7eSHFjnENSOFoadfNEwf/3elYFxvUxHU1FfD0cqw/ZyQ/nV3fSmIIIO/QpuRN955lChqJcr9rJSonEjscDMmbut8Tw1t8lXztrglgI1OsrT3/IT15uKBe8DyjLowD3rDp0DfunovGS6dfHGTtR5iK4jqqZQ3v0kDCAjADsb4cG0f33DYR7y4ovg8whcJyRN47HLsXdeBSRFsltfXswOYU959x/eup5O8XtXTFJW82TEVAzA8NYQ/Onu/kzoqps52pRBQ5YMpX3emtvAgQXZ/FoZ7hzNjO+Q075zs5wR4TS5Qk+fmYzXIn1+7+XxuKvbadp98Vdbk6hACiecHu6Mz9k9lvuE8TllVPDPQMB3IuraZmoqwvT53vYmdAIR0sYQAu/5CPMAuS/fmxXXPd/bm+kbQa5qYa8vsaAsrIxNVz23o+vKnnZzBllqNv619XjRDAxUzhzOHpX8+ZL4mn5H03TbnfCx8At89lyjuO8Prl06HkTAePY4GWXt7RVejqz+M8CIa1WC+X1xmquKEY5jTQeOiegejr9w3/KpfKN5CtDUCvJiHAWb+Qf+XwzG/kjRM8HQTT/X8WsGhU/on7aQJMCG1DjyFfDQlXgPifmBw21vzAq8FAd/C2nf3/pTO8xz9VbQJ5NQkBLGPU5hWi08k/TRUOreSO60UBsnt6o62+rPkwBXoiB3YN/DLPpXHh1bK0q+GHz3lXu1SFBYWeyPVbuz8aVbaq3PLd7IdKKP+j7a1/zSLC56oGusLX7+j7RDx4VUoANb/KhACKeViiJ3Ljjt5PxJRrQmxMtztz8+3YdE7WIKSYeu3O/l/iYYmrxTVUXdurbDiwK8Da0kLh6InE/Wnt8OV5XNIu2grgjWAU6I4c3NbzkZ7ojVfjKGDX6GoVAirAzdkLxSMXM/9wce7hgJxvYOpo134FAW5139j908Px+zrDO6pfvVkB4iuQ9SoWAriFU7igX5pOP3Yu9cWCdoHe2eyjuH5Zz44xjNMOdefm7p8aiL22PBts3jTxW+oqw13dQmAxhztNFvJHx9Nfnss9biqZIl6E1flCPBQoxXpCt2/u+ulYeJfKpvg18a0FIaAhuJk8X5pI5J5eKD15IfkQewHK3uWW9VGePMN/MBi7ty/ymp7IQV52vqqNgArRXSNCYNWK15iK2sx8/rnpzHdmM08FZJ6kEP4hn8sNy1jDZJRuzylEfMdysL/j1sH463vCB0PikOQaUQB2fdeUECyKQraoT+Jjns0+OV/4oWakCloiyKE01AX7Afgn7jWpnFkKVyH/l8VxERI1TQmp3bw80R+9szd6MKJujKjDPB9rM24tBdagEFjNww3pRX2upCcypdPJ7AuFwERBmymWZktG2jA4MrDssApZUO+s+vAAdiQ0GFL6ItLmzui+juC2CF1f6bmK1oWbkM41KwQ2L6wXmMTLO2amoE2XNB6sz9PVbQArgKuHR6J5aSoSGlECkbJAdF5di4EVNfL/c+0LgYMXPMmFDuAisRrTBwYJWTzhxTPhLTvO7Ci6rYP/poSgrVviChJ39a0dXEFmrdWi14VgrbZsA/VaF4IGmLVWQdeFYK22bAP1WheCBpi1VkFXZW/8qVOnnn/++ampqXxeHP9w4V00Gh0eHubR0G3btsmLx49PnDjxjW98Q9d9XQqtKApPzvLg3I033sjLcy5lOZN4vP6hhx4qFou4CXmvdNOmTdD5j//4j+fPn3cn2EZCRoi/7777Nm/ebEUmEolnn3323LlzmUxG0yr9EHZGAtSUB7NvueWWHTt2EIZLX/rSl2ZnZ50wLmGKftOb3sQ7my4wDSW1WAjg4OOPP/61r30tl+OUuN9WfOKJJ9785je/8Y1vtEhPp9OIES3ksyYw5dChQ6+88sp73/teXiL2k6tQKBw/frzEznNFWVjgaXfx0X6nT592bz8Lkr8UyhN34LFiaMK/+qu/unjxIjgN8dKKx4egv/DCC69//etpTph29uzZS5cu+ZQ/VVVtmj2K8ZfcYiFIJpMPPvjg/Dw3e4kVPLtz1yMGfsF02vs73/kOvZkeCSS8gJXEEwCDhcoFA0nAIwdHjx694YYb6kE648HMZzWYEz8xlux6Ug6ARSFoCTz22GM0pCW4IHTidJZrha2iAf7Wt751zTXXbNiwoUwORySWpMeKseAriAHMCVmNv9GYFgvB4cOH6ccQQR3i8Tg15HnYejTBO9QyWhTgubk59IElBDY83ZqnZTs7OwGwIysCdCnGHSJpP/RqRWoTP+H4yMjIrl27QOieneHAevw8m80+/fTTFjzZt27dOjo66kIz/fjIkSNIG4Mgb6YCuX///i1btthZkCHYgm4jAMJbb73VKQeAdXd389dd1NyJd6a2WAjQqNQN4lCVP/dzP7dx40Z0l103Z8HAADk+Pv7Xf/3X6A+SUqnKd9F5TvDuu++GU86MdhgMYEbmPve5z01OThLPGGSnNh2A3cjij//4j9ck20ZLKpDW6EPzUwULngb7sR/7MZeHECEbeMY75IbHs61nU61BgSQb/zPPPEOP4ieRb3nLW5yvq1IQ+J3Adq7mAi0WAksNwJ3t5c/TUgOAbkfz16sSAGgCl7rBHbojAyowliZ3AfaTBCUYCqgxP8A2jFU0au+uu+7iXdx61bHgaUWGLYY/SrEgq+sYCi0tYXgywSajuUCLhQANb9WK6qEDPGmCa3QmhAa+8DnhwWN9zsjqMHkp1Ip36X/VGV1iKNcltWaSNUiTEYn0zA4AzKlu+JqYL0Okdzs1QYQnF5w469k4yATdCxsec6EmDKUAgz3PmEKgie7rJMMOUxZzvDNnzrjbBJSIzDGQ2xmtQEN1r8h7pX6uihC0qjIYXN/85jdhqwtnmaTRWihMZpjYoSsvGiFgMMbUdymUUkjFAPzwhz+88hKvOIa2FgI0AQa/e2PQI/kw1Om+CIRzKG2OuWBj8mYPMfWQoHiYCddLvbri21oIMPpe97rXDQ0NufCUlnjkkUcwzp966ika5u1vf7sfW8QFIUYGTsADBw54yoE1P3RBdbUkrZYQuHffau7UhKc5cY7aftnqXMRYQ/jDDz/MxOQHP/jBPffc09PTUxPSGVmzOAsAIWCW/4Y3vKGmIeJEAqTzJyqEny6YncBtFV4tIbA44qeqFtfqwRPvqeHHxsZoD9qMscOz5WyS6rUW8XyNTjSsXCCvVxG73DYMLJPlldPH2AwX+LCuPdUpxTGQ43UHnjB8rCCAGD+6nbHAanv+Wqgq8FT/xMlouf0poqJD16SkGoMzhkItJFQZ17UzqV6Y0r/97W/7YVE9DC2Mb7EmQBXDDgw6vDd/+7d/izeUflyzYeA+jMBtjLMPeBq7ur3hEYY6U8SaGOACSJChJ598kjAwiCBIECycsvwktZpTROK1ffTRRymUVMyICk2DJOGyffHFFz2niDg5mCDgwQUnSIAnL02L43JgYMCFZkaul19+GYc3HMAbWJPOaspXL6bFQrB3715WgSEXFrBKRmO41BAYuIApDgzh6rEfbsJT2tXq6DW5gKBYSwY0Jz445or08q9+9asu6wh2FuSVNQIazImZsvDpsh5YrxUtYGjG2/O+970PIUD4GJJoVPIi03CgWqAriqDikIEpAwGQ7Uy9/OEWCwENuXPnTphIP6N1qap7lWAlLcG3b98+vO4VwPDUc83UEjIw0C9ZaOAvjUdXw8fg0opWucjNa17zGqdbHgLIBdkuMmQRSYkgoSH5iRCwKMy6CcqAirsXbWen9L6+Pj9mrJVl9f62WAjwAX/gAx/4/ve/jxpnRKArU9V61NPGsI9NJUjA7bffbrvraQZyWeq6Xl4rHkg++uK2bdsYeqwuRcPQGDRSvbxgZnaHJr+2/NmQxFMuCOtldMYjAZRiCQFh9sX85E/+JIMIxpC1HuYErghTcdYX2AXDvpIKPWRD2lXwwwc7V3OB1p87gIl0I4ZVOgQVcOEpvIPpKHA6BNa43Rj0frQxnPKsEsjJxXiMHKCcrdEdyaNTksRXEwPlAokc8FlZAAMYLyGU18tVgQokFM0oYCsSNB+UsxiGInFHQl56C5uL+FuvkyBJExMTFh6UKxqugoAW/my9EFjEQb2fVgQYVsIUZ5X857Vykd36/Be9mGNZuRDs3nhOIq1wBfFkt75qyIoYCCBvRaTzp5OYeoLihF9JeLWEYCU0ree9zBxwE8bLTMp6cVeKA+tCcKU430blrgtBGzXGlSJlXQiuFOfbqNyV+gkwhpkr89dPnTCJAcObZgUIk5FpJJawHeOJB8ia/jiQWFNqd2LIDgCWeQUS8lrZPQmwACwy+GuVC047BgB4QjyB6oLc8eMecKe/Iruz0Iok/z9XKgRMyj//+c/7nNYz1WFmzB5LFmqZo0MlU2rObDCt90MxFeZjXn7w4EEwOBf6cBXjYGbxhsm6e1vSKpCBZ+K1r30tlNjz7+eeew5nM23ghxLaCTfXJz7xCfx9x44d++IXv0i5uBw+/vGPM/sHw1e+8hUQUtbNN9/M5mO7FHfkIPnt3/5tWEo13SGtVMBwtX3wgx9c4XbFlQoB1OCjxbNh+c48SYcvLPmwK/Bnf/Zn4aOd3Sf3qTbZaXI8UewKt3ozpVuS5EcnWV12ZmYG19473vEO3L0WzRDA/hSawbMKFgBuJauvU6iVkerY8kdDEkllodMnQguM1TJPj7WNEPx0iYY0h53XGWiZTUDz8EGWywcAFFNJ1tBQHhYdVh2sXPRR98/KAos5sTQ9PW39/N73voezz5JCl9LtJIsMWv273/1uxWEHksBpQ7oE7Pa2aOCvszGcYRvAT8AmgIBL6XZSNRl+SqmAaYEmACN1pvHuvPNOnPH1+jT9hp0/LLVZdNOhOY5pU0N2/P+sANXLDiQZObCB+iVMk7MMzRYgwvRpq1OidW+66SZWIsBmY3YGoBO1wVEnVBFZ0AeMRM6TnbCekYKDkbYz2Jm9Imy7nCviV/4TOmEFC4yWTLggRBpWTkZrhMASWxzprKPU7ARWZVgyuf/++y2XuNWP7UoSgPssqLhUGMyM4p/+9KcthUlDWsBsILAIgHGMEdYAXI8M4hGdz372s4gUclC9SonVwlqUdTrMhRirRBeAFSaxHos9UbMWTsyQUU/inWDu4dYIgVUGUulOEKkWAHVDpVdTZqVWx9sxrDbRxggBlbeHW0sNEMMpAJrQBq4XYOcqC06M2fUAPCtSkZGiK2JW/rMlreuTjJbZBD7Ls/nlKeM1EdI8dke3MVgB/trIa+a1IxE1y6KsB08pNrCfgE2JH2CfMPVo85m9IbBWaoKKmXdNOqxeS1I1sB/Wk8s2nq3JRc1S3CNpM5dmY9aKtYGqcIEBPyMxGnv1mgrbGfPFEz9HPjm47QnmzpCWCQGtyyDNTN2FdxhiKGEA6IvsqqigjAGCatfLTj0pgptEsBwJ8zFFrsCw8p+Uzk4IDkqDvx4llEIqBtAnP/lJz/GrOZLAj5uBLSru2ekSbFFkS587mGdqy4QAO4sZFxs4XXhHX6efQRPNaRn2NjDZ6X9/8Rd/YauKCtLhCzDsVrKmD9SfWUAFTEt+QoBFpAs2ixgbgJ92uFUBOEN93bHBT08YdwxWasuEAHSwz27UmmVDsaXzmZVV3EdBRox8OrozI5F8doxVZ/5iFtx7773uJ5PsXI0GsD2ZrFaPVhV42Ba2Gm1vlUKt/RythAAclACvkJKWCQF0MI5inNfryjQeyhOArVu3ct9ThRlPdsZ4JmY2r6kb7jM6JQitVDQwqWRkIsoG0aZVsQvLSMKf/Z73vMdJiU2SMwCkJdBEOiXVCbOSMHfY+DlfCxl8KymIvC0TAroO0/TbbrutnrcHluGBoRPTeJaF7ySdSMY2dnA7HbcvvfTS17/+dcuMoG2414MbLagzZTklwOICf+1WcWKuDkOhpUVrNh6YMfqcCxPVGC5PjLOOq1piy4QAKlnGqLd31qqDu8wiGUgJn11hujsI/+Zv/gaVgHOJlaq3vvWt7Eu2AawAzKI5aVfuzUNJeLYfph8+IkvBuJNUUVATP8HfXBE+BboJkqqztFIIwN5chS2yqvslrcv8h4vpkAMmDsjBl7/8ZQYIroRx8ohRHAxk5xpBxAXPY5nzNZQk8cwwL1y4YFuXLdn2X6/WyBmXbHzhC1+oB2BVHDBGUqwc56Z7rkPDQV7NEyuLzTHoZ2y1OOBMaijcYiFoqGw/wDQ2swCGiQceeAA5oAdz5STrltTclgMAuOjLUgace+HuEhfMgMF0AMiOaclc3wV4hUmUhY+cNU93PFCC4GIJ2rJCgAURVsU8MzI+chDbHcwztTHXWE10VJWvZlJDkfWQwCNMpA996EMMDYRxJ2Ao/N3f/Z21bEgRjBq42S07gwYm3uWzrAHwMGq87W1vs/uQXbod8E+8JVXVGYnhcyHGTgIDkHaJhKHTTnUJWEXbGZsLrFQTQK5lRkENnG2CCBqPDzwV8wUnKjDjGnv/+99P2zOi8xPNT653v/vdgGFGvOtd78IawLvCqiBTTSdDnXgIQy3djsVGJil8dio46X/MUCDDJbsN7wxAgLWpxOYAAxl4fFp2sM6uO5XynJ3aRVsZbf1hxzcacPOL+cEFHTAdsYVx9CpPo6wCJ7nIjqQToHmcVmEFJD/tsggDD4ut7UkWJKmYC6Cy+np1disGltkt5GQfrQglxNCQjM12c9bDY8eT0VrKIi8ZrYYHFfFO/DZ8zQC54B5/XZa1amZslNqaSFYqBDWRrkdeXRxoRoFfXTVcp9aTA+tC4MmitQ+wLgRrv409a7guBJ4sWvsA60Kw9tvYs4brQuDJorUPsC4Ea7+NPWu4LgSeLFr7AOtCsPbb2LOG60LgyaK1D7AuBGu/jT1ruC4Enixa+wDrQrD229izhv8fgycu8bow+TkAAAAASUVORK5CYII='</body><body package="Roassal2-Utility">roassal	^ TRPlatform current roassalIcon</body><body package="Roassal2-Utility">roassalContents	^ 'iVBORw0KGgoAAAANSUhEUgAAAIIAAACDCAIAAADOPVQPAAAKl2lDQ1BJQ0MgUHJvZmlsZQAASImVlgdQFGkWx7/uyQkYhhyHnHMGyXHIEgVRGWaGzDgODAJiQhZXYEURkaQIuiii4BoAWQMiioFFUQHzDrIIKOtiwITKNXAMd1e3dXWv63X/+tWrf7/39fdVPQDIh5k8XiosAUAaN4Mf4u1GXxEVTcc9ARgghlxGwJLJSue5Bgf7g7+1D4MAmnveM5rT+vu8/2pUNiedBQAUjHAcO52VhvAZxItZPH4GACgXJK65PoM3x2yEpfhIgQhnzXHCAhfPcdwCH5zPCQtxRxjRwZOZTH4CAKROJE7PZCUgOiQhwqZcdhIXADLSOXBiJTIRbfJcDYZpaWvnOBdh3bh/0Un4N804kSaTmSDihV7mDe+RlM5LZWb/n8vxvy0tVbD4DRXEyekpoX5zPSNrlsVieoYuciKH4b/IvAy3kEVOymCEiXIEPuGLLEgJd13klLV+onxuXGCQSD/dPXqRcxLDIheZzfHwXGT+2hBRfnpmqOdSvnvgIiczfYMXmcmf72WeOaneIUs1B4vq5KYGinqJ53uJcjjpS/1mJIb5iBjZAKL8JC+GqF++z5J+arBIky8IEa0Dhxsu0mQzPURrC0JBNuACFggATJAOMgAH8DM4WRlzxbuv5WXzkxISM+iuyAngGNIZXJaxId3c1MwczJ2nhd/17sH8OYFk8EsxHuJ2VGRfdS3F4mwAaKsCQJ66FNOsBUAcqbE1miXgZy7E0HM3DCACcaRCeWQ3aABd5MSaA2vgAFyAJ/AFQSAMRIHVSNWJIA3wwXqQC7aCAlAEdoG9oArUgkPgKDgBToE2cB5cBtfALXAHDIDHQAhGwSswBT6AGQiCcBAFokHykCqkBRlA5pAt5AR5Qv5QCBQFxUIJEBcSQLnQNqgIKoWqoDqoEfoFOgddhm5A/dBDaBiagN5CX2AUTIalYGVYGzaBbWFX2A8Og1fBCfA6OAfOh3fCFXA9fBxuhS/Dt+ABWAi/gqdRAEVCyaDUUEYoW5Q7KggVjYpH8VGbUIWoclQ9qhnVgepB3UMJUZOoz2gsmoamo43QDmgfdDiahV6H3oQuRlehj6Jb0d3oe+hh9BT6O4aCUcIYYOwxDMwKTAJmPaYAU45pwJzFXMUMYEYxH7BYrAxWB2uD9cFGYZOxG7DF2P3YFmwnth87gp3G4XDyOAOcIy4Ix8Rl4ApwlbjjuEu4u7hR3Cc8Ca+KN8d74aPxXHwevhx/DH8Rfxc/hp8hSBC0CPaEIAKbkE0oIRwmdBBuE0YJM0QqUYfoSAwjJhO3EiuIzcSrxCfEdyQSSZ1kR1pOSiJtIVWQTpKuk4ZJn8mSZH2yOzmGLCDvJB8hd5Ifkt9RKBRtigslmpJB2UlppFyhPKN8EqOJGYsxxNhim8WqxVrF7oq9FieIa4m7iq8WzxEvFz8tflt8UoIgoS3hLsGU2CRRLXFOYkhimkqjmlGDqGnUYuox6g3quCROUlvSU5ItmS95SPKK5AgNRdOgudNYtG20w7SrtFEprJSOFEMqWapI6oRUn9SUtKS0pXSEdJZ0tfQFaaEMSkZbhiGTKlMic0pmUOaLrLKsqyxHdodss+xd2Y9yinIuchy5QrkWuQG5L/J0eU/5FPnd8m3yTxXQCvoKyxXWKxxQuKowqSil6KDIUixUPKX4SAlW0lcKUdqgdEipV2laWUXZW5mnXKl8RXlSRUbFRSVZpUzlosqEKk3VSTVJtUz1kupLujTdlZ5Kr6B306fUlNR81ARqdWp9ajPqOurh6nnqLepPNYgathrxGmUaXRpTmqqaAZq5mk2aj7QIWrZaiVr7tHq0PmrraEdqb9du0x7XkdNh6OToNOk80aXoOuuu063Xva+H1bPVS9Hbr3dHH9a30k/Ur9a/bQAbWBskGew36DfEGNoZcg3rDYeMyEauRplGTUbDxjLG/sZ5xm3Gr000TaJNdpv0mHw3tTJNNT1s+thM0szXLM+sw+ytub45y7za/L4FxcLLYrNFu8UbSwNLjuUBywdWNKsAq+1WXVbfrG2s+dbN1hM2mjaxNjU2Q7ZStsG2xbbX7TB2bnab7c7bfba3ts+wP2X/l4ORQ4rDMYfxZTrLOMsOLxtxVHdkOtY5Cp3oTrFOB52EzmrOTOd65+cuGi5slwaXMVc912TX466v3Uzd+G5n3T6627tvdO/0QHl4exR69HlKeoZ7Vnk+81L3SvBq8prytvLe4N3pg/Hx89ntM8RQZrAYjYwpXxvfjb7dfmS/UL8qv+f++v58/44AOMA3YE/Ak0CtQG5gWxAIYgTtCXoarBO8LvjX5djlwcurl78IMQvJDekJpYWuCT0W+iHMLawk7HG4brggvCtCPCImojHiY6RHZGmkcIXJio0rbkUpRCVFtUfjoiOiG6KnV3qu3LtyNMYqpiBmcJXOqqxVN1YrrE5dfWGN+BrmmtOxmNjI2GOxX5lBzHrmdBwjriZuiuXO2sd6xXZhl7EnOI6cUs5YvGN8afx4gmPCnoSJROfE8sTJJPekqqQ3yT7JtckfU4JSjqTMpkamtqTh02LTznEluSnc7rUqa7PW9vMMeAU84Tr7dXvXTfH9+A3pUPqq9PYMKWRw6RXoCn4QDGc6ZVZnflofsf50FjWLm9WbrZ+9I3ssxyvn5w3oDawNXblquVtzhze6bqzbBG2K29S1WWNz/ubRLd5bjm4lbk3Z+lueaV5p3vttkds68pXzt+SP/OD9Q1OBWAG/YGi7w/baH9E/Jv3Yt8NiR+WO74XswptFpkXlRV+LWcU3fzL7qeKn2Z3xO/tKrEsO7MLu4u4a3O28+2gptTSndGRPwJ7WMnpZYdn7vWv23ii3LK/dR9wn2Ces8K9or9Ss3FX5tSqxaqDarbqlRqlmR83H/ez9dw+4HGiuVa4tqv1yMOnggzrvutZ67fryQ9hDmYdeHI443POz7c+NDQoNRQ3fjnCPCI+GHO1utGlsPKZ0rKQJbhI0TRyPOX7nhMeJ9maj5roWmZaik+Ck4OTLX2J/GTzld6rrtO3p5jNaZ2rO0s4WtkKt2a1TbYltwvao9v5zvue6Ohw6zv5q/OuR82rnqy9IXyi5SLyYf3H2Us6l6U5e5+TlhMsjXWu6Hl9ZceV+9/Luvqt+V69f87p2pce159J1x+vnb9jfOHfT9mbbLetbrb1WvWd/s/rtbJ91X+ttm9vtd+zudPQv67941/nu5Xse967dZ9y/NRA40D8YPvhgKGZI+ID9YPxh6sM3jzIfzTze8gTzpPCpxNPyZ0rP6n/X+71FaC28MOwx3Ps89PnjEdbIqz/S//g6mv+C8qJ8THWscdx8/PyE18Sdlytfjr7ivZqZLPiT+mfNa93XZ/5y+at3asXU6Bv+m9m3xe/k3x15b/m+azp4+tmHtA8zHws/yX86+tn2c8+XyC9jM+u/4r5WfNP71vHd7/uT2bTZWR6Tz5wfBVCIw/HxALw9AgAlCgDaHQCIYgvz7rxBCzP6PIG/44WZeN6sATjUCUCYCwD+yLNyCwDaiIsj78Eu83HYwkLk/7T0eAvzBS1SGzKalM/OvkNmRJweAN+GZmdn2mZnvzUgxT4CoPPDwpw9Z/5GSEwt2NPMrht9PAf8h/0Df/n0ii1BWMYAABMlSURBVHic7Z19cBTlHce/u/eS5I7kcpd3kpiEiAFBKr6gwAxFoNAKAzjVVuVlhpmiFB1stTjVWt5Sx1rbQTpTnSl9AbU6U2UEEQ1OxxlhNBUSIREjBQIBEnJJyNslucvlbu/pH89l73K3u7d392yyOPeZm0zu2d1nf3vffX7P+/NwhBCkmGj4iTYgBZCSQSekZNAFKRl0QUoGXZCSQRekZNAFKRl0QUoGXZCSQRekZNAFxok2IBaEwOfDyEjwL8/DaAx9TKaJto8NepJhYACtrWhrQ2sr+vvh8cDjgdsd+ng84HmkpyMtLfixWJCfj/x8FBSgoADFxcjNnejHSIQJlcHvx1df4exZnD+PCxfQ1YXr14MfrzeOeDIyYLfDbofDgcpKzJ+PBQtwyy2a2c0ebmIauj/8EIcO4Ysv0NeHoSG43fD5JE7jOCibJ3lCZibsdhQXY+NGbNjAzGZNIePG8DA5cIA8+CDJyiJpacRgIMCYD8dFhsT7iYjBaCQzZpCDB8fvGRNFexm8XtLYSH7yE2IysfzF1Ugi3mX5cnL9uuZPmgSaySAIpKOD1NSQpUvV/vqJaRMzTnrCtGnk66+1etik0SBvIATffIPPPsP+/Th5Mhgo5+Wjw61W5OfDag0Vh+hHLLl6POjpCebkCvFE3yU7G++/j4ULk35C9rCW4dQp/OtfOHwY586N3kHqB4oIrKxERQXKy1FWFvxrt8NqhdUKiwUWC3geAAiBx4PBQbS14coVtLSgvh61tbhwIRgnPUf6QTkQgunT8cknKClh+chMYJauOjvJM8+QqVNjuIvwwOnTybPPkg8/JKdOkatXiccT900HBsjp02TfPnLHHWp91Nq1xOdj9tSMYCTD3r1kypRQJhz9W4RnmCUlZOtW8vnnxOlM5KeX5No18tprxG6PvFf0G5CXRw4fVhmrb7wES9optbdj82YcORIs+Ee7oHBfcccdePFFLF4MnofBkNR9JfnyS6xdG/RR0Yi2Pf00/vQnuTgEQXA6nX19fV6vl+M4QojZbM7Ozs7PzzebzextpqYlLkMggGPHsH49rl4FogQQf32OQ1oabrsN1dVYtixpg2PhdOL738e5c0p50rx5ePNNTJkSfXVHR0draysAjtoP0N+Hfi0sLCwsLOR59u2hicbo8eBvf8OSJbh6VSJvpE9LCyeLFuHAAZw4MR4aACgsxFtvwW6Xzqtp4OnTaG6OOCIIwqVLl9ra2hCmAf2fpglCiNPpbGlp8UlW+JMjIRk8HuzciccfhyBIJAIx5N57sWcP/vMf3H8/G2NVcvfdeP75oDGSuN1wucIDAoFAe3t7b28vIYSTukoUo6+vr729PRAIsDU5fhm8Xvzyl3j5ZWqddCKYPBm7duHAAaxfLx2Jz4eWFpw/j5GRhMyOxc9/DodDtqYCoK8vPMzlcnV2dsppEHYpRwi5fv26y+VKNk8dS/wtrL/+Nf76V2qUhAYAHnoIW7firrskXsaLF1FTg9paXLqEgQEIAmw2bN+OpUsTfgBprFYsW4Z33pE9wemE3w+jEYDf7+/p6VEZMVWivb3dZrMxsZQSpwx79+Lvfw9mvJIa7N6NJ56I7I1xubBvH955BxcvBttTw69dtw7nzoHpUwHAzJnS4fTWYQb4/f6+sYkjJh6Px+v1pqenJ27eWOKR4dw57N2LgQFAKkNOS8ORI1i8OPKqJ5/E669HPjy9hP7t7ERtLX74w8QfQhK5qjK9qcNBkwIhZHh4mLojZY8UFgFHCBkYGGAoQzx5wwcfhNqIRi0CAEIwdSqamiQ0ALB4MQKBYJ4hEqHK5cvx2KyO7m7pcHpTh0MMSKzkM8I0V1MtQ2srDh4Ewoof4hu9fDlqayWL4QCwbJnsITG2ggK1Zqino0P2EM8jM1P8llhmyzaLVi1DWxtqa+n9gbDMYPVqvPEGcnJkLyQE06YpHQUwe7ZaM9TT0iJ7qLISRUXiN7PZTP1MXNGzrVGrk4EQtLQgEAglBWr0fffhz38OT+CJkJmpSWr49FOJQGr/rFm4+ebRAC4tLS2uiGlGMmnSpGQtDEOdDIIQbLGg0IeZMQP798duNBYEJf8ASBdtk+Tbb9HVJRFO355Zs5CVJYaZTKbMzEyo8zP0nLS0NIb5M9TKwHEhZ0rdUUEBampQWhr72kAgRg58553sm/neeguIqkXTr+Xl+MEPwoONRmNOTg5Gi0DKEdPSVFFRkcpilUrUyWAwBMebiAWejz9W23kyODimmyyau+9mLIPHg1dfBaK6gAgBz2PRIsydG3GFzWZzOBzU28gpQZuVANjt9qysrImQAUBOTihBvPBCHJlqQwMg37wDYMYMxk6puhoej3RSKCzEs89GX2EwGIqLi7PCPFWEGGLFwmKxFBcXG42Mx3eplmHy5GBaFhvOVFJfD8j3TVZWhpcdGdDQgL17I6sp1JHyPB57DFVVkteZzeaKigq73W4ymcI1EBOBwWCw2+1TpkyJN0tXg2pVc3Px2GM4cwavvIKMjDjucOKE0tGZM8GwyHH9OrZsifSBYrL42c+wfbvC1UajsaKior+/v6+vz+12u91uAGaz2WQypaenZ2Vl2e12tr4oRBw9dYODpKGBuN3x9e85HEoDW37zG+L1xhehHENDZONGwvNjemHFDtFVq8jgoPrIent76+rq6urqurq6aGuHpsTj46xWzJoVn8hOJ+QaL2nCnzYNTOpBIyPYsgX79gUrNxF1zJ/+FLt3w2pVH5/RaKQvfkZGhhZeKPJ22kb/3/8C8oOIMjPDa7OJ4/XikUfw/vtj7iX+88QTqK6G3Z5AxPRVZWBhLDSW4YsvAPn8uayMQf355EmsXo1r10KdTuI/aWl46im89BI06D1mi8b2ff65dDjN6JKRQRDQ1YVt2zBnTkgDsQuW51FZif378fLL+tcAmqeG06elw2n6KCtDXl4i0TY3o6YGf/xjsP0uvPcCgN2OFSvwyiuaNFVpg5YynD2L4WGl0asVFTFiGBiAxRKqY3u9qK3FsWM4dAhffRWKh0LvsmABNm3CI48wsH8c0VKGL78E5DOGnBzpfginE0eO4OxZXL6Mvj6kpSEvD7ffjuFhHD+OxkZcuRI8UxSY/q2qwi9+gZUrMXky+2fRGC1lOHFCaZR1Tg4qKyMDP/4Yzz2H5ma43QgfhGK1QhAwPBz8Gp7CaFa8cyfWrUNREfvG2nFB+9QQDf0Rc3LERn8ACASwYwd+9zuJsZeEYGhIIh6xPLp9O3JyboisWA7NZPB40NGhNHSusHBMferTT1FdDURVMiTHf9CG9zVrsGvXDTr1MwLNZGhoCPmQaOioVpGeHjz8MBBrtgghMJlQWor778fzz7Op+ukDzWRobITHI3s0PX1Mu8jmzejujj3vE4DdjmPHUFzMxkjdoJk/VU4N4TL09+ODD1RpAKC3F+3tbCzUE5rJ0NwMQZA9arWG8udDh5TODIfj4Pdj2zYG5ukMbWS4di3YIy9ZfOQ4TJ8e+vrvf8Pnk56LEAFtKTp5MkYfxg2INjI0NwcHzcnVn+fMCf7v80HsUOR5VFVh82ZUV8Nmk/VRPT14/XXmJk8s2mTRFy/KdjPQ1rd77gl+NZmCgwF9vjEDkI8eDTYLRlcjAgHU1qKxMe7ODx2jWWqgI46joW1wYmoQiRgEvnWrtEOjqvzvf0HxvitoIIPXGxyYJNeukJ8fuxNm5UrcfLPSPJGDB3H+fDJm6goNZOjoCMog59znzVMVDy0RSWbUAE6dwpEjYD35aaLQRgaxEVSS+fNVxfPQQyguVkoQf/kLnM747dMjGsjQ2Sk7mpr+fCplMJvxq1+FrgqHanPhAt5777uRIDSQoaVF1h3R8DvvVBvV2rWYNEkpQezYAbc7ARv1BmsZhobQ1KR0wm23xdEibbPh6aelD9ESV2+vwnz/G4hxl+Hee+OIzWTCo48Gu5TlXNPOnbh0KS4bdYgGMpw5I32I/o5Ro6ljUFERXC9PzjURgs2b44tTf7CWIWK1qXDo7yjWn1ViNmP1apSXAzIJguPwySdKU6BvBJjKEAigsRGQr7glNkzvnnuC03Xlcv5AAH/4A3p7445ZNzCVQRBQVwfI/16zZye4jvD69bKzWui9vv4aL72USMz6gHVqoDLIkbAMc+di4UKlIpYg4M03UVOTSOQ6gKkMPh9OnVI6IWEZALz4YnCIn1wfhtOJV1+9QfvmmMpAe9wURgpNm5b4MJabbsJTT8kepa7p6FH88583Yr2aqQySPQQiN92E7Oyk4n/uOcycGSwdRUMDd+3Ce+8lEnl9Pa5dS8q8JGAqA11GQI6qqvDZyAlC+93khj9xHLxebN6M48fji7ahAevXx6h4aokGqSEa+p5WVSWbGgDMn4+NG0NxRkCV6O7Go4/KLnwYjdOJDRvQ1ATW8zvVw04Gj0e2UYG+vLfcEt/cRUk4Dr/9LaZMkXVNNLy1FUuWxCi2Ua5cwaJFOHUKhYWM56TGAzsZ5EasUiwWVUsKqKG0FLt3h+Y0REPDL1/GihU4elQpqs8+w/Tp+PZbALj11gmcD8FOBjrNTY7iYpZD7ZYuxZNPAoihREcHHngAO3agtTW0LwchwYT7zDNYuDDUTv6jH03gotHsvKFCxkAIYxnS07FlC2prUVen1LfBccFFMt9+Gz/+Mb73PeTm4soV1NXh7bfR3x86+fbbsXw5M/MSgNnU3qIipfnPa9Ywu5HI4cMkJ2fMLGjJu8sdFQ9lZJA33oiIe2BgoL6+vq6ubmBggL3lUTBySu3t6O1V8g+0iZQtK1Zgz57QLSSJWLUBUZO0AGzahHXr2JsXD4xkOHlS4oFFbDa5lSqSZc2a0Ag+lfN8IpZdfPxx/P73mtgWD4xkqKtTGg5ss2m479SmTaiuDk0/UYM4b3fDBrz2GptlCpJjXGTIytJ2+68XXsCePaHkKCcG/fUx6qm2bcM//qGTqVqMjLh4UWl2At2UTVO2bMG77wb7lBS6S+mhoiLs34+dO7U1KR5YyNDUpDRKxWBQWnmSIQ8+iHffxapV0stgUgFyc/Hww/joI9nFwycIFvWGM2cwOCh71GQaM81NU+bPx5w5+OgjHDiAxka0tQU7xu12TJ2KuXNx331YuVKHk3ZZyNDQIDt+G4DRGHs1AIaYTFi1CkuW4PJl9PSgry84bbSoCFOnjp8ZccJChnPn4PfLHuV5FBYyuEtcWK249dbxvmkSJJ03OJ3B8bxyKZ3nldYsTgGAgQxXrgRXu5UrnwgCLl5UiIDW5gOj0K/JWpUcog3idjJa3zFppyRmgxGIBUSPB998g0WLJK/2+Xxut9vlcrndbkEQeJ5PT0+32WwWi4UunZ2seXHi9/u9Xq/L5eofbfhzOp3Z2dmZmZlms1mLzZUoScswODhmRRGM3RSgqgqzZ0uWlAghfX19HR0dbrc7/HUbGhrq7u5OS0srKChwOBwGLfYlk2FwcLCzs7N37LAzl8vlcrl4ns/Pz8/NzdVo3b2k932rr8cDD4xZwRuAzYZ587BkCRYswF13RV9ECGlvb+/o6KB7FYW/9aI9HMfl5ORMnjzZNC471ff09LS2tvr9fiK1ww8NtFqtpaWlFouF+d2TlkEQcPw4amrQ0oKyMlRUoLQUDgcqKhQKSNHbq0VDn9xut5eXl2vtnVwu16VLl/x+v4JJohLl5eXM0wSjrVmHhzEyArMZZnPMVprh4eGmpibJly4CQgjP8yUlJXmJrQWnDp/P19zcTH2jskn0hIKCgqKiIrb5BKO40tORlYX0dDUtZa2treq1DwQCPT09bHdwCYcQ4nK5hoaG1LwWtODU2dnJ3J7xbl8UBMHlckHRHYnQczwej0dhMZqkobuNqd9fKRAIDA4Osi3FjvfInP7+fjXvnQjHcVS5iBXMWUEIGVBoiZHB5XI5HA6GOdZ4y5BAcuY4rrOzs7OzU4uMWqymxWWPVxznwYjxdkrMd9NkQlzpTIt69XinhgQqAYSQ3NxcuzYdR4SQCxcuxJvOmFdlxluGeDeIohlJZmZmVvLDkGXiz8jI8Hg8KpWg6cBqtU7QpjKMyMjIMJvNKhM1PY35tlIRJLDJqs1mu7FlAFBSUoJ43HFWVpYW7QcUjuNyc3MNBkNMe2iWwHFcdnY281r0BMhgt9vp26T85PSZLRaLplVoAGazuUj1/FSDwZCfnz9xWywxpaysjGYScqUO0R2VlJRo6pEwmiDy8vLEoYyS9nAcZzQaS0pKMjUYf8+oTSl+RkZG2tvbu0f3sSVj91zjOM5msxUWFlrj2QkmGQRB6OrqcjqdgiBgtN0i3CSLxVJUVMQ8V6BMmAwABEEYGhrq7e3t7e2l/W50b7XMzMy8vDyLxTI+TdwigUDA6/V2d3f39/cPj3ai0FZVh8Nhs9nYbscazkTKQBH7Pv1+P8/zBoOB47jx7O2Jtod2ytJkYTAYeJ7neV7TxvaJlyEFJiqLThFBSgZdkJJBF6Rk0AUpGXRBSgZdkJJBF6Rk0AUpGXRBSgZdkJJBF6Rk0AUpGXRBSgZdkJJBF6Rk0AUpGXRBSgZd8H/z5igvd0LGTQAAAABJRU5ErkJggg=='</body><body package="Roassal2-Utility">robowo	^ TRPlatform current formFromStream: self robowoContents readStream.</body><body package="Roassal2-Utility">robowoContents	^ ''</body><body package="Roassal2-Utility">smallRoassal	"Private - Generated method"	^ TRPlatform current formFromStream: (self smallRoassalContents readStream)</body><body package="Roassal2-Utility">smallRoassalContents	"Private - Method generated with the content of the file C:\Users\azazael\Documents\smalltalk\inti\moose\roassalWithTransparent.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAAAoAAAASCAYAAABit09LAAABLElEQVR4XmP4//8/w38iMFGKaK1wWo/Z/8Tgiv86UhP+a0vX/9eRbvuvLbnyv57U1P8zek2givoFgArmAvFSoKKS/1N7pf5P6xX7P7XHCaj4zv/EiEKIQh2pLqCgNxCHACX+/58xkQtuk7bkGaB4JYQztVfh//nzjECBnP/aUmf+z+oTAooZ/teTbgA6J+//qaPSCDeePsYJFGwFmj7jv4F0E1DDrP9W8oX/Tx0TRfeMzn8dyTVAT3j/15WqBiq8+j80lBnT11N7goHuOf1/2kTu//Nni/031egCalz1//Rx9v9XTjEiKwS6T/ICmH3lCsP/7CQHoKlf/ieGRP/PCndCKNSRnAzE+1ACWk/GAyh28r+udAFC0EwvDBheYYRjZsEC5v+nTjENwtQDAHm03ZBoT2X8AAAAAElFTkSuQmCC'</body></methods><methods><class-id>Roassal2.RTIcon class</class-id> <category>license and info</category><body package="Roassal2-Utility">roassalDescription	^ 'Roassal graphically renders objects using short and expressive Smalltalk expressions. A large set of interaction are offered for a better user experience. Painting, brushing, interconnecting, zooming, drag and dropping will just make you more intimate with any arbitrary object model.Information about Roassal may be found online: http://objectprofile.comFollow us on Twitter: @ObjectProfileFacebook page: http://facebook.com/ObjectProfile'</body></methods><methods><class-id>Roassal2.RTComposer</class-id> <category>accessing</category><body package="Roassal2-Builder-Composer">allGroupedElements	^ mapping values flatCollect: #yourself</body><body package="Roassal2-Builder-Composer">currentElements	^ view elements</body><body package="Roassal2-Builder-Composer">currentElementsAsGroup	^ RTGroup withAll: self currentElements</body><body package="Roassal2-Builder-Composer">gap	"Return the space between visualizations"	^ gap</body><body package="Roassal2-Builder-Composer">gap: anInteger	gap := anInteger</body><body package="Roassal2-Builder-Composer">getGroup: groupId	"returns the elements grouped under the given key	ex:			composer getGroup: id	"	^mapping at: groupId.</body><body package="Roassal2-Builder-Composer">newElementsAsGroup	| es |	es := view elements select: [ :e | e hasNotAttribute: #AlreadyGrouped ].	es do: [ :e | e attributeAt: #AlreadyGrouped put: true ].	^ es "	^ RTGroup withAll: (view elements copyWithoutAll: self allGroupedElements)"</body><body package="Roassal2-Builder-Composer">view	^ view</body><body package="Roassal2-Builder-Composer">view: aView	view := aView</body></methods><methods><class-id>Roassal2.RTComposer</class-id> <category>public-layout</category><body package="Roassal2-Builder-Composer">group	"Define a new group with the elements added to the view using a computed name"	^ self group: ('group', (mapping size asString)) asSymbol</body><body package="Roassal2-Builder-Composer">group: aName	"Define a new group with the elements added to the view"	| group |	group := self newElementsAsGroup.	groups add: group.	mapping at: aName put: group.</body><body package="Roassal2-Builder-Composer">layout: aLayout	"Layout all the group of elements"	aLayout on: groups.</body><body package="Roassal2-Builder-Composer">move: name1 above: name2		| g1 g2 |	g1 := mapping at: name1. 	g2 := mapping at: name2.	TRConstraint move: g1 above: g2.	g1 translateBy: 0 @ gap negated</body><body package="Roassal2-Builder-Composer">move: name1 below: name2		| g1 g2 |	g1 := mapping at: name1. 	g2 := mapping at: name2.	TRConstraint move: g1 below: g2.	g1 translateBy: 0 @ gap</body><body package="Roassal2-Builder-Composer">move: name1 belowAlignFromLeft: name2		| g1 g2 |	g1 := mapping at: name1. 	g2 := mapping at: name2.	TRConstraint move: g1 belowAlignFromLeft: g2 gap: gap.</body><body package="Roassal2-Builder-Composer">move: name1 onTheLeftOf: name2		| g1 g2 |	g1 := mapping at: name1. 	g2 := mapping at: name2.	TRConstraint move: g1 onTheLeftOf: g2.	g1 translateBy: gap negated @ 0</body><body package="Roassal2-Builder-Composer">move: name1 onTheRightBelowOf: name2		| g1 g2 |	g1 := mapping at: name1. 	g2 := mapping at: name2.	TRConstraint move: g1 onTheRightBelowOf: g2.	g1 translateBy: 0 @ gap</body><body package="Roassal2-Builder-Composer">move: name1 onTheRightOf: name2		| g1 g2 |	g1 := mapping at: name1. 	g2 := mapping at: name2.	RTConstraint move: g1 onTheRightOf: g2.	g1 translateBy: gap @ 0</body><body package="Roassal2-Builder-Composer">open	^ view open</body><body package="Roassal2-Builder-Composer">removeGroup: groupId	| elements |		elements := self getGroup: groupId.	view removeElements: elements.		"remove the mapping from the dictionary"	mapping removeKey: groupId.		"regenerate the groups array"	groups removeAll.	mapping do: [ :groupElements | groups add: groupElements. ].</body></methods><methods><class-id>Roassal2.RTComposer</class-id> <category>public title</category><body package="Roassal2-Builder-Composer">setGeneralTitle: aTitleAsString	self setGeneralTitle: aTitleAsString gap: 0 @ -50</body><body package="Roassal2-Builder-Composer">setGeneralTitle: aTitleAsString gap: gapAsPoint	| title |	title := (RTLabel new text: aTitleAsString; height: 20) element.	TRConstraint move: title above: self allGroupedElements asGroup.	title translateBy: gapAsPoint.	self view add: title</body></methods><methods><class-id>Roassal2.RTComposer</class-id> <category>public-interaction</category><body package="Roassal2-Builder-Composer">propagateHighlight	self newElementsAsGroup @ RTHighlightable allSibblings.</body><body package="Roassal2-Builder-Composer">propagateHighlightToAll	"Highlight all the elements that have the same model"	mapping value do: [ :g | g @ RTHighlightable allSibblings ]</body><body package="Roassal2-Builder-Composer">propagateHighlightUsing: aBlock	"Highlight all the elements return by aBlock. 	 The aBlock variable is evaluated for a Roassal element"	mapping value do: [ :g | g @ (RTHighlightable new highlightElements: aBlock) ]</body></methods><methods><class-id>Roassal2.RTComposer</class-id> <category>public-background</category><body package="Roassal2-Builder-Composer">removeAllBackgrounds	"removes all the backgrounds currently drawn for all the existing groups	ex:		composer removeAllBackgrounds	"	view canvas removeShapes: backgrounds.	backgrounds removeAll.</body><body package="Roassal2-Builder-Composer">setBackgroundColor: aColor forGroup: aName	| backgroundBox g outterGap |	outterGap := 5 @ 5.		backgroundBox := TRRoundedBoxShape new.	backgroundBox color: aColor.	backgroundBox strokeWidth: 0.	backgroundBox borderRadius: 5.		g := mapping at: aName.	backgroundBox translateTo: g center.	backgroundBox extent: g extent + outterGap.		view canvas addShape: backgroundBox.	backgroundBox pushBack.		backgrounds add: backgroundBox.		^ backgroundBox</body></methods><methods><class-id>Roassal2.RTComposer</class-id> <category>public-naming</category><body package="Roassal2-Builder-Composer">nameBelowGroup: aName as: title	"Give a title to a group.		For example:	| compo |compo := RTComposer new.b := RTMondrian new.b view: compo view.b nodes: (1 to: 30).b layout grid.b build.compo group: #g1.b := RTMondrian new.b view: compo view.b nodes: (1 to: 30).b layout grid.b build.compo group: #g2. compo layout: RTVerticalLineLayout new alignCenter.compo setBackgroundForGroup: #g1 color: Color red trans.compo nameGroup: #g1 as: 'Goup 1'.compo view	"	| lbl |	lbl := (RTLabel new text: title) element.	TRConstraint move: lbl below: (mapping at: aName).	view add: lbl.	^ lbl</body><body package="Roassal2-Builder-Composer">nameGroup: aName as: title	| label |	label := (RTLabel new text: title) element.	TRConstraint move: label above: (mapping at: aName).	view add: label.		"store a reference to the created element"	names add: label.		^ label</body><body package="Roassal2-Builder-Composer">removeAllNames	"removes all the names present in the current view	ex:			composer removeAllNames	"	view removeElements: names.	names removeAll.</body></methods><methods><class-id>Roassal2.RTComposer</class-id> <category>initialization</category><body package="Roassal2-Builder-Composer">initialize	super initialize.	view := RTView new.	view @ RTDraggableView.	groups := OrderedCollection new.	mapping := Dictionary new.	gap := 20.	backgrounds := OrderedCollection new.	names := OrderedCollection new.</body></methods><methods><class-id>Roassal2.RTVarianceRangeDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">pathToString: path	^ String		streamContents: [ :s | 			path				do: [ :each | 					s nextPutAll: each key.					each value						ifNotNil: [ s nextPutAll: ''.							s								nextPutAll: each value x asString , ' ' , each value y asString ] ] ]</body><body package="Roassal2-Builder-Grapher-Decorators">render	| deviationData avgData xData svg k path |	avgData := self datasets first elements collect: [ :e | (avg value: e model) asFloat ].	deviationData := self datasets first elements collect: [ :e | (sd value: e model) asFloat ].	xData := self datasets first elements collect: [ :e | (x value: e model) asFloat ].	path := OrderedCollection new.	k := builder getPixelPositionOf: xData first @ (avgData first + deviationData first).	path add: #M -&gt; k.	(2 to: deviationData size)		do: [ :i | 			| p |			p := (avgData at: i) + (deviationData at: i).			k := builder getPixelPositionOf: (xData at: i) @ p.			path add: #L -&gt; k ].	k := builder getPixelPositionOf: xData last @ (avgData last - deviationData last).	path add: #L -&gt; k.	(1 to: deviationData size - 1)		reverseDo: [ :i | 			| p |			p := (avgData at: i) - (deviationData at: i).			k := builder getPixelPositionOf: (xData at: i) @ p.			path add: #L -&gt; k ].	k := builder getPixelPositionOf: xData first @ (avgData first + deviationData first).	path add: #L -&gt; k.	path add: #Z -&gt; nil.	svg := RTSVGPath new		color: color;		borderWidth: 0;		path: (self pathToString: path);		element.	builder view add: svg</body></methods><methods><class-id>Roassal2.RTVarianceRangeDecorator</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Decorators">avg: anObject	avg := anObject</body><body package="Roassal2-Builder-Grapher-Decorators">color	^ color</body><body package="Roassal2-Builder-Grapher-Decorators">color: aColor	color := aColor.</body><body package="Roassal2-Builder-Grapher-Decorators">sd: anObject	sd := anObject</body><body package="Roassal2-Builder-Grapher-Decorators">x: anObject	x := anObject</body></methods><methods><class-id>Roassal2.RTInteractiveSVGExporter</class-id> <category>svg</category><body package="Roassal2-Exporter-SVG">addButtons	self interactions		do: [ :l | 			l				do: [ :i | 					(i type beginsWith: 'button')						ifTrue: [ 							(buttons includes: i fixedName)								ifFalse: [ 									buttonStart := i addSelf: stream startingPoint: buttonStart.									buttons add: i fixedName ] ] ] ].	stream nextPutAll: String cr</body><body package="Roassal2-Exporter-SVG">addMarginsAndGlobals: bounds	| notChecked |	notChecked := true.	self interactions		do: [ :l | 			l				do: [ :i | 					i type = 'popup'						ifTrue: [ 							i bounds: bounds.							marginX := marginX max: i xBound.							marginY := marginY max: i yBound ].					((i type beginsWith: 'button') and: [ notChecked ])						ifTrue: [ 							| val |							val := (TRLabelShape new								text: i getName;								encompassingRectangle) height.							paddingY := paddingY max: val.							notChecked := false ].					(globals includes: i class)						ifFalse: [ 							i addGlobalHandlers: stream.							globals add: i class ] ] ].</body><body package="Roassal2-Exporter-SVG">addStart: bounds	self 		addVersion;		addMarginsAndGlobals: bounds;		addCanvasSize: bounds;		addCanvasColor;		addXLinkVersion;		addScript;		selfAddHelperElements;		addButtons;		addCode.</body><body package="Roassal2-Exporter-SVG">addVersion	stream nextPutAll: '&lt;svg xmlns="http://www.w3.org/2000/svg" onload="init(evt)" '</body><body package="Roassal2-Exporter-SVG">getFinalBounds: bounds	canvasWidth := (bounds width + 1 + marginX + paddingX) rounded.	canvasHeight := (bounds height + 1 + marginY + paddingY) rounded.	finalWidth := canvasWidth.	finalHeight  := canvasHeight.		code = nil		ifFalse: [ | maxW line w h|			maxW := 0.			line := ''.			code lines do: [ :l | 				maxW := maxW max: l size.				maxW = l size					ifTrue: [ line := l ].					].			w := (TRLabelShape new					text: line;						width).			h := (TRLabelShape new					text: line;						height).			finalWidth := canvasWidth  + w.			finalHeight := canvasHeight max: (h * code lines size) 						  ].	^ Array with: finalWidth with: finalHeight</body><body package="Roassal2-Exporter-SVG">selfAddHelperElements	stream		nextPutAll: String cr;		nextPutAll:				'&lt;rect id="BackDrop" x="-10%" y="-10%" width="110%" height="110%" fill="none" pointer-events="all" /&gt;' , String cr;		nextPutAll: '&lt;svg id="Wrapper"/&gt;' , String cr</body></methods><methods><class-id>Roassal2.RTInteractiveSVGExporter</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	interactions := Dictionary new.	marginX := 0.	marginY := 0.	paddingX := 0.	paddingY := 0.	functions := OrderedCollection new.	globals := OrderedCollection new.	buttons := OrderedCollection new.	buttonStart  := 0@0.</body></methods><methods><class-id>Roassal2.RTInteractiveSVGExporter</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">interactions	^ interactions</body><body package="Roassal2-Exporter-SVG">interactions: anObject	interactions := anObject</body><body package="Roassal2-Exporter-SVG">setInteractions	view canvas shapes do: [ :s | | list |		list := TRPlatform current validInteractionsOf: s oklist: (Array with: #RTPopup).		list do: [:pop | | interaction elements group |			[			interaction := RTSVGGroupPopup new.			elements := pop createPopupFor: s element.			interaction group: elements.			group := interactions at: s ifAbsentPut: [ OrderedCollection new ].			group add: interaction.			] on: Error do: [ :ex| ] ] ].</body></methods><methods><class-id>Roassal2.RTInteractiveSVGExporter</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addScript	stream		nextPutAll: '    &lt;script&gt;&lt;![CDATA[		function init(evt){			if(window.svgDocument == null){				svgDocument = evt.target.ownerDocument;			}		}		var popup = null;		function showPopup(evt, id){			if (popup != null)				hidePopup(id);			popup = svgDocument.getElementById(id);			popup.setAttributeNS(null, "visibility", "visible");		}		function hidePopup(id){			popup = svgDocument.getElementById(id);			popup.setAttributeNS(null, "visibility", "hidden");			popup = null;		}		 ]]&gt;&lt;/script&gt;'</body></methods><methods><class-id>Roassal2.RTInteractiveSVGExporter</class-id> <category>exporting</category><body package="Roassal2-Exporter-SVG">exportOnStream: fileStream	|bounds|	bounds := self fixedEncompassingRectangle.	self stream: fileStream.	self addStart: bounds.	self setInteractions.	RTSVGVisitor visit: view on: stream with: self interactions canvas: bounds center: (marginX+paddingX)@(marginY + paddingY).	self addEnd.</body></methods><methods><class-id>Roassal2.RTAMItem</class-id> <category>initialization</category><body package="Roassal2-Builder-ApplicationMatrix">initialize	super initialize.	tags := OrderedCollection new.	itemName := 'Unnamed'.	row := 'row'.	column := 'column'.	color := Color veryVeryLightGray.</body></methods><methods><class-id>Roassal2.RTAMItem</class-id> <category>accessing</category><body package="Roassal2-Builder-ApplicationMatrix">addTag: aTag	tags add: aTag</body><body package="Roassal2-Builder-ApplicationMatrix">color	^ color</body><body package="Roassal2-Builder-ApplicationMatrix">color: anObject	color := anObject</body><body package="Roassal2-Builder-ApplicationMatrix">column	^ column</body><body package="Roassal2-Builder-ApplicationMatrix">column: anObject	column := anObject</body><body package="Roassal2-Builder-ApplicationMatrix">itemName	^ itemName</body><body package="Roassal2-Builder-ApplicationMatrix">itemName: anObject	itemName := anObject</body><body package="Roassal2-Builder-ApplicationMatrix">model	^ model</body><body package="Roassal2-Builder-ApplicationMatrix">model: anObject	model := anObject</body><body package="Roassal2-Builder-ApplicationMatrix">row	^ row</body><body package="Roassal2-Builder-ApplicationMatrix">row: anObject	row := anObject</body><body package="Roassal2-Builder-ApplicationMatrix">tags	^ tags</body></methods><methods><class-id>Roassal2.RTAMItem</class-id> <category>testing</category><body package="Roassal2-Builder-ApplicationMatrix">hasTag	^ tags notEmpty</body></methods><methods><class-id>Roassal2.RTNopAnimation</class-id> <category>accessing</category><body package="Roassal2-Animation">blockToExecute	^ blockToExecute</body><body package="Roassal2-Animation">blockToExecute: aZeroArgBlock	blockToExecute := aZeroArgBlock</body></methods><methods><class-id>Roassal2.RTNopAnimation</class-id> <category>actions</category><body package="Roassal2-Animation">addedIn: aTrachelCanvas	trachelCanvas := aTrachelCanvas</body><body package="Roassal2-Animation">refresh	animatedValue value.	trachelCanvas signalUpdate</body><body package="Roassal2-Animation">repeat	animatedValue timer repeat.</body></methods><methods><class-id>Roassal2.RTNopAnimation</class-id> <category>initialization</category><body package="Roassal2-Animation">initialize	super initialize.	blockToExecute := [  ]</body></methods><methods><class-id>Roassal2.RTNopAnimation</class-id> <category>waiting-specific</category><body package="Roassal2-Animation">start	animatedValue start.	trachelCanvas signalUpdate</body><body package="Roassal2-Animation">waitFor: seconds	animatedValue := TRVIAnimatedValue new							evaluator: [ :t | blockToExecute value ];							timer: (TRVITimer new cycleLength: seconds);							yourself.</body><body package="Roassal2-Animation">waitFor: seconds after: aBlock	animatedValue := TRVIAnimatedValue new							evaluator: [ :t | ];							finishCallback: aBlock;							timer: (TRVITimer new cycleLength: seconds);							yourself.</body></methods><methods><class-id>Roassal2.RTNopAnimation</class-id> <category>testing</category><body package="Roassal2-Animation">hasCompleted	^ animatedValue hasCompleted</body></methods><methods><class-id>Roassal2.RTExperimentalStack</class-id> <category>as yet unclassified</category><body package="Roassal2-Experimental">expand: data	| n m k y0 o |	n := data size.	m := data first size.	k := 1 / n.	y0 := Array new: m.	1 to: m do: [ :j | 		o := 0.		1 to: n do: [ :i| o:= o + (((data at: i) at: j) y) ].		o isZero not 			ifTrue: [ 				1 to: n do: [:i| | v |					v := (data at: i) at: j.					v y: v y / o. ] ]			ifFalse: [ 				1 to: n do: [ :i |					((data at: i) at: j) y: k ] ]		].	1 to: m do: [ :j | y0 at: j put: 0 ].		^ y0</body><body package="Roassal2-Experimental">initialize	| zero |	super initialize.	values := #yourself.	xblock := [ :p | p x ].	yblock := [ :p | p y ].	order := [ :data | (1 to: data size) asArray ].	zero := [ :data | (1 to: data first size ) collect: [ :d| 0 ] ].	offset := zero.	out := [ :d :y0 | d y0: y0 ].	stackOffsets := Dictionary new.	stackOffsets 		at: #wiggle put: [ :data| self wiggle: data ];		at: #silhouette put: [ :data| self silhouette: data ];		at: #expand put: [ :data| self expand: data ];		at: #zero put: zero.</body><body package="Roassal2-Experimental">offset: arg	offset := arg isBlock 		ifTrue: [ arg ] 		ifFalse: [ stackOffsets at: arg ifAbsent: [ 				offset ] ] .</body><body package="Roassal2-Experimental">silhouette: data	| n m y0 sums o max|	n := data size.	m := data first size.	y0 := Array new: m.	sums := OrderedCollection new.	max := 0.	1 to: m do: [ :j | 		o := 0.		1 to: n do: [ :i | o:= o + (((data at: i) at: j) y) ].		o &gt; max ifTrue: [ max := o ].		sums add: o ].	1 to: m do: [ :j | y0 at: j put: (max - (sums at: j))/2 ].	^ y0</body><body package="Roassal2-Experimental">stack: data	| series points orders offsets n m o |	data isNil ifTrue: [ ^ data ].	(n := data size) isZero ifTrue: [ ^ data ].		series := data collect: values.	points := series collect: [ :d | | p |		d collect: [:v | p := RTXPPoint new.			p x: (xblock rtValue: v).			p y: (yblock rtValue: v). 			p. ] ].		orders := order rtValue: points.	series := orders collect: [ :i | series at: i ].	points := orders collect: [ :i | points at: i ].	offsets := offset rtValue: points.	m := series first size.	1 to: m do: [ :j | 		o := offsets at: j.		out value: (points first at: j) value: o.		2 to: n do: [ :i | 			o := o + ((points at: (i -1)) at: j) y.			out value: ((points at: i) at: j) value: o ]		 ].		^ points.</body><body package="Roassal2-Experimental">values: anObject	values := anObject</body><body package="Roassal2-Experimental">wiggle: data	| n x m s1 s2 s3 dx o o0 y0 |	n := data size.	x := data first.	m := x size.	y0 := Array new: m.	y0 at: 1 put: (o := o0 := 0).	2 to: m do: [ :j | 		s1 := 0.		1 to: n do: [ :i | s1 := s1 + ((data at: i) at: j) y ].		s2 := 0.		dx := (x at: j) x - (x at: (j-1)) x.		1 to: n do: [ :i |			s3 := (((data at: i) at: j) y - ((data at: i) at: (j-1)) y)/ (2*dx).			1 to: (i-1) do: [ :k | 				s3 := s3 + 				( (((data at: k) at: j) y - ((data at: k) at: (j-1)) y )/dx ) ].			s2 := s2 + (s3 * ((data at: i) at: j) y). ].				y0 at: j put: ( o := s1 isZero ifTrue: [ 0 ] ifFalse: [s2 / s1 * dx ]).		o &lt; o0 ifTrue: [ o0 := o ].		].		1 to: m do: [ :j | y0 at: j put: ((y0 at: j)- o0)].	^ y0.</body><body package="Roassal2-Experimental">x: anObject	xblock := anObject</body><body package="Roassal2-Experimental">y: anObject	yblock := anObject</body></methods><methods><class-id>Roassal2.ASNoFill</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Roassal2.ASNoFill</class-id> <category>public</category><body package="Roassal2-Pharo">fill: aShape on: aCanvas	"do nothing"</body><body package="Roassal2-Pharo">resolveIds: aDictionary 	^ self</body><body package="Roassal2-Pharo">stroke: aShape on: aCanvas	"do nothing"</body></methods><methods><class-id>Roassal2.ASNoFill class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body><body package="Roassal2-Pharo">soleInstance	^ soleInstance ifNil: [ soleInstance  := self new ]</body></methods><methods><class-id>Roassal2.RTGapTree</class-id> <category>computing</category><body package="Roassal2-Builder-CircularMap">addGapsTo: gaps closest: closest	| innerGap |	gaps add: (RTGapTree new c1: circles first c2: closest).	gaps add: (RTGapTree new c1: closest c2: circles second).		innerGap := RTGapTree new c1: circles second c2: closest.	innerGap circles at: 3 put: circles first.	gaps add: innerGap</body><body package="Roassal2-Builder-CircularMap">makeGapCircle: r	| in1 in2 r1 r2 d a h p2 x0 y0 x1 y1 x2 y2 |	in1 := circles first.	in2 := circles second.	r1 := in1 r + r.	r2 := in2 r + r.	d := RTCircleTree distanceOf: in1 and: in2.	(((d &gt; (r1 + r2) ) ifTrue: [ 1 ] ifFalse: [ 0 ] ) |	( (d &lt; (r1 - r2) abs) ifTrue: [ 1 ] ifFalse: [ 0 ])) ~= 0 ifTrue: [ ^ nil ].		a := ((r1 * r1) - (r2 * r2) + (d * d))/ (2* d).	h := ((r1 * r1)-(a *a )) sqrt.		p2 := in1 center.	p2 add: (((RTCircleTree centerMinus: in2 with: in1) scaleBy: a) scaleBy: 1/d).	x0 := in1 x. x1 := in2 x. x2 := p2 x.	y0 := in1 y. y1 := in2 y. y2 := p2 y.		^ RTCircleTree new 			x: x2 + (h * (y1-y0)/ d)			y: y2 - (h * (x1-x0)/ d) 			r: r.</body></methods><methods><class-id>Roassal2.RTGapTree</class-id> <category>initialization</category><body package="Roassal2-Builder-CircularMap">initialize	super initialize.	circles := Array new:3.</body></methods><methods><class-id>Roassal2.RTGapTree</class-id> <category>accessing</category><body package="Roassal2-Builder-CircularMap">c1: circle1 c2: circle2	circles at: 1 put: circle1;		at: 2 put: circle2.</body><body package="Roassal2-Builder-CircularMap">circles	^ circles.</body></methods><methods><class-id>Roassal2.RTSlider</class-id> <category>accessing</category><body package="Roassal2-Builder-UI-Slider">callback	^ callback</body><body package="Roassal2-Builder-UI-Slider">callback: aOneArgBlock	"aOneArgBlock will be called with the current #progress (float between 0.0 and 1.0)."	callback := aOneArgBlock</body><body package="Roassal2-Builder-UI-Slider">horizontal	orientation := #horizontal</body><body package="Roassal2-Builder-UI-Slider">labeled	hasLabel := true</body><body package="Roassal2-Builder-UI-Slider">labelled	self deprecated: 'Please, use #labeled instead'.	self labeled</body><body package="Roassal2-Builder-UI-Slider">max	^ max</body><body package="Roassal2-Builder-UI-Slider">max: aNumber	self assert: [ min &lt;= aNumber ] description: 'Max value cant be smaller than the min value'.	max := aNumber</body><body package="Roassal2-Builder-UI-Slider">min	^ min</body><body package="Roassal2-Builder-UI-Slider">min: aNumber	self assert: [ aNumber &lt;= max ] description: 'Min value cant be bigger than the max value'.	min := aNumber</body><body package="Roassal2-Builder-UI-Slider">min: aMin max: aMax	self assert: [ aMin &lt;= aMax ] description: 'Min value cant be bigger than the max value'.	min := aMin.	max := aMax</body><body package="Roassal2-Builder-UI-Slider">move: aSymbol	position := aSymbol</body><body package="Roassal2-Builder-UI-Slider">progress	^ (value - min) / (max - min)</body><body package="Roassal2-Builder-UI-Slider">progress: aFloat	self		assert: [ aFloat between: 0 and: 1 ]		description: 'A progress must be a float between 0 and 1'.	self value: min + ((max - min) * aFloat)</body><body package="Roassal2-Builder-UI-Slider">size: aNumber	"Size of the slider (it's width or height)"	size := aNumber</body><body package="Roassal2-Builder-UI-Slider">useIntegerLabel	"sets the display of the slider's label using an integral value instead of a floating point one	ex:		slider useIntegerLabel	"	useIntegerLabel := true</body><body package="Roassal2-Builder-UI-Slider">value	^ value</body><body package="Roassal2-Builder-UI-Slider">value: aNumber	self		assert: [ aNumber between: min and: max ]		description: 'Value must be between min and max.'.	value := aNumber</body><body package="Roassal2-Builder-UI-Slider">vertical	orientation := #vertical</body></methods><methods><class-id>Roassal2.RTSlider</class-id> <category>initialization</category><body package="Roassal2-Builder-UI-Slider">initialize	super initialize.	hasLabel := false.	callback := [ :aValue |  ].	sliderElements := #().	min := 0.0.	max := 1.0.	value := 0.5.	useIntegerLabel := false.	size := 200.	self horizontal</body></methods><methods><class-id>Roassal2.RTSlider</class-id> <category>testing</category><body package="Roassal2-Builder-UI-Slider">isHorizontal	^ orientation = #horizontal</body></methods><methods><class-id>Roassal2.RTSlider</class-id> <category>hooks</category><body package="Roassal2-Builder-UI-Slider">createShapeBuilder	"RTBox new color: (Color red alpha: 0.5); width: 15; height: 20"	^ super createShapeBuilder		rectangle;		color: (Color red alpha: 0.5);		width: 15;		height: 20;		yourself</body><body package="Roassal2-Builder-UI-Slider">renderIn: aView	| extremity1 extremity2 line cursor dragAndConstraint trachelShape aValue w2 sliderSize |	sliderSize := self isHorizontal		ifTrue: [ size @ 0 ]		ifFalse: [ 0 @ size ].	extremity1 := (RTBox new		width: 5;		height: 10) element.	extremity2 := (RTBox new		width: 5;		height: 10) element.	line := (RTLine new width: 5) edgeFrom: extremity1 to: extremity2.	aView add: extremity1.	aView add: extremity2.	aView add: line.	extremity2 translateTo: sliderSize.	cursor := self elementOn: nil.	dragAndConstraint := RTConstrainedDraggable new.	dragAndConstraint		rectangle: [ w2 := (cursor encompassingRectangle width / 2)				@ (cursor encompassingRectangle height / 2).			w2 := w2				*					(self isHorizontal						ifTrue: [ 1 @ 0 ]						ifFalse: [ 0 @ 1 ]).			extremity1 position - w2 corner: extremity2 position + w2 ].	"We compute the slider value, and call the callback"	dragAndConstraint		afterBlock: [ self isHorizontal				ifTrue: [ aValue := (cursor position x - extremity1 position x)						/ (extremity2 position x - extremity1 position x) ]				ifFalse: [ aValue := (cursor position y - extremity1 position y)						/ (extremity2 position y - extremity1 position y) ].			aValue := aValue * (max - min) + min.			aValue := (aValue max: min) min: max.			callback rtValue: aValue.			hasLabel				ifTrue: [ trachelShape						text:							(useIntegerLabel								ifTrue: [ (aValue round: 0) asInteger ]								ifFalse: [ aValue round: 2 ]) asString ] ].	cursor @ dragAndConstraint.	aView add: cursor.	cursor translateTo: sliderSize * self progress.	"We prepare a label if necessary"	hasLabel		ifTrue: [ cursor @ (RTLabeled new text: self value).			trachelShape := cursor attributeAt: #RTLabelledLabel ].	"We keep track of the elements we add in the view"	sliderElements := RTGroup new.	sliderElements add: cursor.	sliderElements add: extremity1.	sliderElements add: extremity2.	sliderElements setAsFixed</body></methods><methods><class-id>Roassal2.RTSlider</class-id> <category>public</category><body package="Roassal2-Builder-UI-Slider">build	| allElements res |	allElements := view elements.	res := super build.	TRConstraint move: sliderElements to: position and: allElements.	^ res</body></methods><methods><class-id>Roassal2.RTValueLinearNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizerOBSOLETE">maxScale	^maxScale.</body><body package="Roassal2-ColorNormalizerOBSOLETE">maxScale: aValue	^maxScale := aValue.</body><body package="Roassal2-ColorNormalizerOBSOLETE">minScale	^minScale.</body><body package="Roassal2-ColorNormalizerOBSOLETE">minScale: aValue	minScale := aValue.</body><body package="Roassal2-ColorNormalizerOBSOLETE">rtValue: anEntity		"Normalize value based on minimum and maximum value."	| value slope |	value := self command rtValue: anEntity.	slope := self slope: anEntity.	^ ((value abs * slope) + self maxScale - ((self maximumValue: anEntity) asFloat * slope)) asInteger</body></methods><methods><class-id>Roassal2.RTValueLinearNormalizer</class-id> <category>initialize-release</category><body package="Roassal2-ColorNormalizerOBSOLETE">initialize	super initialize.	minScale := 0.	maxScale := 1.</body></methods><methods><class-id>Roassal2.RTValueLinearNormalizer</class-id> <category>as yet unclassified</category><body package="Roassal2-ColorNormalizerOBSOLETE">slope: anEntity		^ (maxScale - minScale) / ((self maximumValue: anEntity) asFloat - (self minimumValue: anEntity )asFloat).</body></methods><methods><class-id>Roassal2.RTUnoptimizedComposer</class-id> <category>accessing</category><body package="Roassal2-Builder-Composer">newElementsAsGroup	^ RTGroup withAll: (view elements copyWithoutAll: self allGroupedElements)</body></methods><methods><class-id>Roassal2.RTUnoptimizedComposer</class-id> <category>public-layout</category><body package="Roassal2-Builder-Composer">group	^ self group: ('group', (mapping size asString)) asSymbol</body><body package="Roassal2-Builder-Composer">group: aName	"Compute the group of added objects"	| group |	group := self newElementsAsGroup.	groups add: group.	mapping at: aName put: group.</body></methods><methods><class-id>Roassal2.RTAbstractDSM</class-id> <category>accessing</category><body package="Roassal2-Builder-DSM">columnAt: aNumber	^ (1 to: objectsY size) collect: [ :i | self elementAt: aNumber @ i ]</body><body package="Roassal2-Builder-DSM">createObjectBlock	^ creationBlock</body><body package="Roassal2-Builder-DSM">createObjectBlock: aBlock	creationBlock := aBlock</body><body package="Roassal2-Builder-DSM">elementAt: aPoint	"Return the element at position aPoint"	^ elements at: (objectsX size) * (aPoint y - 1) + aPoint x</body><body package="Roassal2-Builder-DSM">elements	^ elements copy</body><body package="Roassal2-Builder-DSM">labelShapeX	^ labelShapeX</body><body package="Roassal2-Builder-DSM">labelShapeX: aShapeBuilder	labelShapeX := aShapeBuilder</body><body package="Roassal2-Builder-DSM">labelShapeY	^ labelShapeY</body><body package="Roassal2-Builder-DSM">labelShapeY: aShapeBuilder	labelShapeY := aShapeBuilder</body><body package="Roassal2-Builder-DSM">labelShapesDo: aBlock1arg	aBlock1arg value: self labelShapeX.	aBlock1arg value: self labelShapeY.</body><body package="Roassal2-Builder-DSM">labelsXInteraction	^ xinteraction</body><body package="Roassal2-Builder-DSM">labelsYInteraction	^ yinteraction</body><body package="Roassal2-Builder-DSM">numberOfObjects	"Return the number of objects"	^ self objects size</body><body package="Roassal2-Builder-DSM">objects	^ (objectsX, objectsY) asSet</body><body package="Roassal2-Builder-DSM">objects: someObjects	objectsX := someObjects.	objectsY := someObjects</body><body package="Roassal2-Builder-DSM">objectsX	^ objectsX</body><body package="Roassal2-Builder-DSM">objectsX: anObject	objectsX := anObject</body><body package="Roassal2-Builder-DSM">objectsY	^ objectsY</body><body package="Roassal2-Builder-DSM">objectsY: anObject	objectsY := anObject</body><body package="Roassal2-Builder-DSM">rotation	"	Return the rotation of the top labels	:: Void -&gt; Integer	"	^ rotation</body><body package="Roassal2-Builder-DSM">rotation: anInteger	"Set the rotation of the top label	:: Integer -&gt; RTDSM	"	rotation := anInteger</body><body package="Roassal2-Builder-DSM">rowAt: aNumber	"Return the elements located at a given row"	^ (1 to: objectsX size) collect: [ :i | self elementAt: i @ aNumber ]</body><body package="Roassal2-Builder-DSM">selectElement	 ^ selectElement</body><body package="Roassal2-Builder-DSM">selectElement: aBlock	selectElement := aBlock</body><body package="Roassal2-Builder-DSM">text	"Return the text used for labelling"	^ text</body><body package="Roassal2-Builder-DSM">text: aOneArgBlockOrSymbol	"Set the text used for each label. Per default, text is #yourself"	text := aOneArgBlockOrSymbol</body><body package="Roassal2-Builder-DSM">transparencyWhenHighlighted	^ transparencyWhenHighlighted</body><body package="Roassal2-Builder-DSM">transparencyWhenHighlighted: anObject	transparencyWhenHighlighted := anObject</body><body package="Roassal2-Builder-DSM">transparencyWhenNonHighlighted	^ transparencyWhenNonHighlighted</body><body package="Roassal2-Builder-DSM">transparencyWhenNonHighlighted: anObject	transparencyWhenNonHighlighted := anObject</body></methods><methods><class-id>Roassal2.RTAbstractDSM</class-id> <category>configuration</category><body package="Roassal2-Builder-DSM">cellSize	^ 10</body><body package="Roassal2-Builder-DSM">defaultCellShape	^ RTBox new		size: self cellSize.</body><body package="Roassal2-Builder-DSM">doNotShowLabels	wantsLabel := false</body></methods><methods><class-id>Roassal2.RTAbstractDSM</class-id> <category>UI</category><body package="Roassal2-Builder-DSM">addLabels	self addLabelsLeft.	self addLabelsTop.</body><body package="Roassal2-Builder-DSM">addLabelsIfNecessary	self wantsLabel ifFalse: [ ^ self ].	self addLabels</body><body package="Roassal2-Builder-DSM">addLabelsLeft	| es theModel lbl |	es := self columnAt: 1.	es		do:			[ :e | 			theModel := e model key.			lbl := self labelShapeY elementOn: theModel.			yinteraction setUpElement: lbl.			view add: lbl.			RTConstraint new				fix: e;				movable: lbl;				outer;				left;				move ]</body><body package="Roassal2-Builder-DSM">addLabelsTop	| es theModel lbl labels deltaY |	es := self rowAt: 1.	labels := OrderedCollection new.	deltaY := Float fmax.	es		do:			[ :e | 			theModel := e model value.			lbl := self labelShapeX elementOn: theModel.			labels add: lbl.			xinteraction setUpElement: lbl.			view add: lbl.			lbl rotateByDegrees: rotation.			RTConstraint new				fix: e;				movable: lbl;				outer;				middle;				top;				move.			deltaY := deltaY min: lbl position y ].	labels do: [ :l | 		l translateTo: l position x @ deltaY ].</body><body package="Roassal2-Builder-DSM">createElements	"	:: Void -&gt; RTDSM	var shape : RTShape	var e : RTElement	var anObject1 : Object	var index1 : Number	var anObject2 : Object	var index2 : Number	var evt : TREvent	var elements : Collection	var objects : Collection	"	| e |	elements := RTGroup new.	objectsY copy		doWithIndex:			[ :anObject1 :index1 | 			objectsX copy				doWithIndex:					[ :anObject2 :index2 | 					e := self elementOn: (self createObjectBlock value: anObject1 -&gt; anObject2).					e attributeAt: #matrixIndex put: index2 @ index1.					elements add: e ] ].</body><body package="Roassal2-Builder-DSM">defaultTopLabelRotation	^ -55</body><body package="Roassal2-Builder-DSM">labelShape	^ RTLabel new		height: self cellSize;		text: text</body><body package="Roassal2-Builder-DSM">layoutElements: es	RTGridLayout new		gapSize: 1;		lineItemsCount: objectsX size;		on: es</body></methods><methods><class-id>Roassal2.RTAbstractDSM</class-id> <category>highlighting</category><body package="Roassal2-Builder-DSM">highlightColumn: aNumber	^ self highlightElements: (self columnAt: aNumber)</body><body package="Roassal2-Builder-DSM">highlightElements	self highlightElements: elements</body><body package="Roassal2-Builder-DSM">highlightElements: someElements	(someElements select: [ :e | selectElement rtValue: e ]) do: [ :e | | shape |		shape := e trachelShape class = TRCompositeShape 			ifTrue: [ e trachelShape firstShape ]			ifFalse: [ e trachelShape ].		shape color: (shape color alpha: self transparencyWhenHighlighted) ].</body><body package="Roassal2-Builder-DSM">highlightRow: aNumber	^ self highlightElements: (self rowAt: aNumber)</body><body package="Roassal2-Builder-DSM">unhighlightColumn: aNumber	^ self unhighlightElements: (self columnAt: aNumber)</body><body package="Roassal2-Builder-DSM">unhighlightElements	self unhighlightElements: elements</body><body package="Roassal2-Builder-DSM">unhighlightElements: someElements	(someElements select: [ :e | selectElement rtValue: e ]) do: [ :e | | shape |		shape := e trachelShape class = TRCompositeShape 			ifTrue: [ e trachelShape firstShape ]			ifFalse: [ e trachelShape ]. 		shape color: (shape color alpha: self transparencyWhenNonHighlighted ) ].</body><body package="Roassal2-Builder-DSM">unhighlightRow: aNumber	^ self unhighlightElements: (self rowAt: aNumber)</body></methods><methods><class-id>Roassal2.RTAbstractDSM</class-id> <category>initialization</category><body package="Roassal2-Builder-DSM">initialize	"	:: Void -&gt; RTDSM	"	super initialize.	self objects: #().	self createObjectBlock: [ :assoc| assoc ].	self selectElement: [ :e | true ].	self interaction popup.	self interaction 		when: TRMouseEnter do: [ :evt | 			self highlightElements.			self unhighlightColumn: (evt element attributeAt: #matrixIndex) x.			self unhighlightRow: (evt element attributeAt: #matrixIndex) y.		];when: TRMouseLeave do: [ :evt | 			self unhighlightElements. ].	xinteraction := RTInteractionBuilder new.	yinteraction := RTInteractionBuilder new.	rotation := self defaultTopLabelRotation.	wantsLabel := true.	text := #yourself.	self labelShapeX: RTShapeBuilder new.	self labelShapeX label.	self labelShapeY: RTShapeBuilder new.	self labelShapeY label.	transparencyWhenHighlighted := 0.4.	transparencyWhenNonHighlighted := 1.</body></methods><methods><class-id>Roassal2.RTAbstractDSM</class-id> <category>hooks</category><body package="Roassal2-Builder-DSM">createShapeBuilder	| sb |	sb := super createShapeBuilder.	sb shape: self defaultCellShape.	^ sb</body><body package="Roassal2-Builder-DSM">createView	^ super createView @ RTDraggableView @ RTZoomableView</body><body package="Roassal2-Builder-DSM">renderIn: aView	self createElements.	aView addAll: elements.	self layoutElements: elements.	self addLabelsIfNecessary.	^ aView</body></methods><methods><class-id>Roassal2.RTAbstractDSM</class-id> <category>testing</category><body package="Roassal2-Builder-DSM">wantsLabel	^ wantsLabel</body></methods><methods><class-id>Roassal2.RTDSM</class-id> <category>initialization</category><body package="Roassal2-Builder-DSM">initialize	"	:: Void -&gt; RTDSM	"	super initialize.	dependency := #yourself.	self shape		if: [ :assoc | self isAssocDependent: assoc ] fillColor: Color red.</body></methods><methods><class-id>Roassal2.RTDSM</class-id> <category>accessing</category><body package="Roassal2-Builder-DSM">dependency	^ dependency</body><body package="Roassal2-Builder-DSM">dependency: aOneArgBlock	dependency := aOneArgBlock</body></methods><methods><class-id>Roassal2.RTDSM</class-id> <category>testing</category><body package="Roassal2-Builder-DSM">isAssocDependent: assoc	| v |	v := dependency rtValue: assoc key.	v = assoc value ifTrue: [ ^ true ].	^ v isCollection		ifTrue: [ v includes: assoc value ]		ifFalse: [ false ]</body></methods><methods><class-id>Roassal2.TRVITimer</class-id> <category>accessing</category><body package="Roassal2-Trachel-Viva">cycleLength	^ cycleLength</body><body package="Roassal2-Trachel-Viva">cycleLength: anObject	cycleLength := anObject</body><body package="Roassal2-Trachel-Viva">elapsedCycles	"Answer the total number of cycles passed during which timer was active since its first activation.	For example, if timer's cycle length is 2 seconds, and its total active time is 3.5 seconds,	a total number of elapsed cycles will be 3.5 / 2 = 1.75.		Suspending timer (stopping then starting after a while) does not contributes to elapsedCycles, e.g.:	for fresh timer with 4 seconds cycle, we start timer, run for 0.5 seconds, then stop it,	wait for arbitrary amound of time, then start it again and run for extra 0.5 seconds,	the measures elapsedCycles value will be equal to 1/4 .		As you may guess, for non-repeating timer, the elapsed cycles value can never be	greater than 1 (timer always stops at 1 and never advanced since then).		Resetting timer sets elapsed cycles to zero.	" 		| cycles |	active ifFalse: [  ^ elapsedCycles  ].	cycles := elapsedCycles + (self elapsedTime / cycleLength).	(repeat value not and: [ cycles  &gt;= 1.0 ]) ifTrue: [ 		active := false.		^ elapsedCycles := 1.0	].		^ cycles</body><body package="Roassal2-Trachel-Viva">noRepeat	"make receiver to be non-repeating timer (stops once first cycle elapses)"	repeat := false</body><body package="Roassal2-Trachel-Viva">repeat	"make receiver to be a repeating timer"	repeat := true</body><body package="Roassal2-Trachel-Viva">repeat: veces	"make receiver to be a repeating timer"	repeat := [elapsedCycles &lt; veces ]</body><body package="Roassal2-Trachel-Viva">startTime	^ startTime</body><body package="Roassal2-Trachel-Viva">value	"Answer the current timer value.	The value is normalized in range between 0 and 1	relative to cycle length and elapsed time since timer started, e.g.	if cycle length is 0:01:00	and elapsed time is 0:00:30,	the value will be 0.5 (half of a minute).	For repeating timer the value goes from 0 to 1, then repeats over.	For non-repeating timer, when value reaching 1, timer stops.	If timer is inactive, answer the phase of cycle where it was stopped.	"	| cycles |	active ifFalse: [ 		^ repeat 			ifTrue: [ elapsedCycles fractionPart ]			ifFalse: [ elapsedCycles min: 1.0 ]	].	cycles := self elapsedCycles.	active ifFalse: [		 "non-repeating timer was stopped" 		^ 1.0	].		 	^  cycles fractionPart.</body></methods><methods><class-id>Roassal2.TRVITimer</class-id> <category>testing</category><body package="Roassal2-Trachel-Viva">isActive	self value. "making sure it will stop if cycle time elapsed for non-repeating timer"		^ active</body><body package="Roassal2-Trachel-Viva">isRepeating	^ repeat</body></methods><methods><class-id>Roassal2.TRVITimer</class-id> <category>initialize-release</category><body package="Roassal2-Trachel-Viva">initialize	"defaults"	repeat := false.	cycleLength := 1.0.		self reset.</body></methods><methods><class-id>Roassal2.TRVITimer</class-id> <category>actions</category><body package="Roassal2-Trachel-Viva">reset	"Reset the timer: stopping it, if it was active,	and setting its internal elapsed cycles counter to Zero "		active := false.	elapsedCycles := 0.0.</body><body package="Roassal2-Trachel-Viva">start	"Activate (start or resume) the timer.	Ignored if timer is already active"		active ifFalse: [		startTime := self currentTime.		active := true.	].</body><body package="Roassal2-Trachel-Viva">stop	"Stop/pausing the timer "		active ifTrue: [		elapsedCycles := self elapsedCycles.		active := false.	].</body></methods><methods><class-id>Roassal2.TRVITimer</class-id> <category>private</category><body package="Roassal2-Trachel-Viva">currentTime	^ Time millisecondClockValue</body><body package="Roassal2-Trachel-Viva">cycleLengthScale	"cycle length are given in seconds,	while internally we using milliseconds to calculate time difference, hence scale is equal to 1000"		^ 1000.0</body><body package="Roassal2-Trachel-Viva">elapsedTime	^  (self currentTime - startTime) / self cycleLengthScale</body></methods><methods><class-id>Roassal2.RTTheme</class-id> <category>accessing</category><body package="Roassal2-Core">textColor	^ Color gray</body><body package="Roassal2-Core">textFont	^ TRLabelShape getFontForSize: self textSize</body><body package="Roassal2-Core">textSize	^ 10</body></methods><methods><class-id>Roassal2.RTTheme class</class-id> <category>accessing</category><body package="Roassal2-Core">current	^ current ifNil: [ current := self new ]</body></methods><methods><class-id>Roassal2.TRFilledArrowHeadShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-ShapesForArrow">color: aColor	super color: aColor.	color := aColor</body></methods><methods><class-id>Roassal2.TRDarkTheme</class-id> <category>accessing</category><body package="Roassal2-Trachel-Theme">transformColor: aColor	"	self new transformColor: (Color red: 0.8 green: 0.5 blue: 0.5)	"	^ Color h: aColor hue s: aColor saturation l: (0.5 - ((aColor lightness - 0.5) * 0.8)) alpha: aColor alpha</body></methods><methods><class-id>Roassal2.RTNoDecorationShape class</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRNoDecoratorShape</body></methods><methods><class-id>Roassal2.RTKiviatElement</class-id> <category>accessing</category><body package="Roassal2-Builder-Kiviat">kiviatNode	^ kiviatNode</body><body package="Roassal2-Builder-Kiviat">kiviatNode: anRTKiviatNode	kiviatNode := anRTKiviatNode</body><body package="Roassal2-Builder-Kiviat">metric ^ metric</body><body package="Roassal2-Builder-Kiviat">metric: aBlockOrSymbol metric:= aBlockOrSymbol</body><body package="Roassal2-Builder-Kiviat">position	^ position</body><body package="Roassal2-Builder-Kiviat">position: aPoint	position:= aPoint</body><body package="Roassal2-Builder-Kiviat">value	^ value</body><body package="Roassal2-Builder-Kiviat">value: anObject	value := anObject</body></methods><methods><class-id>Roassal2.RTKiviatElement</class-id> <category>initialization</category><body package="Roassal2-Builder-Kiviat">initialize	super initialize.</body></methods><methods><class-id>Roassal2.TRBezierShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">encompassingRectangle	^ Rectangle encompassing: listOfPoints</body><body package="Roassal2-Trachel-Shapes">numberOfPoints	^ self points size</body><body package="Roassal2-Trachel-Shapes">points	^ listOfPoints copy</body><body package="Roassal2-Trachel-Shapes">position	^ self encompassingRectangle center</body><body package="Roassal2-Trachel-Shapes">strokePaint: aColor	"set the color of the border line"	self color: aColor</body></methods><methods><class-id>Roassal2.TRBezierShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitBezierShape: self</body><body package="Roassal2-Trachel-Shapes">accept: aVisitor with: decoration	aVisitor visitBezierShape: self with: decoration</body></methods><methods><class-id>Roassal2.TRBezierShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	athensCanvas pathTransform restoreAfter: [				athensCanvas setShape: self path.		(athensCanvas setStrokePaint: self themedColor) width: width.		athensCanvas draw  ]</body></methods><methods><class-id>Roassal2.TRBezierShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-Shapes">computePath		path := self athensCanvas		createPath: [ :builder | 			builder				absolute;				moveTo: listOfPoints first.						(2 to: (listOfPoints size -2)) do: [ :index |				builder 					curveVia: (listOfPoints at: index) asFloatPoint					to: (((listOfPoints at: index) + (listOfPoints at: (index + 1))) / 2) asFloatPoint.			].			builder 				curveVia: (listOfPoints at: (listOfPoints size -1) )				to: (listOfPoints at: (listOfPoints size) ) asFloatPoint.				]</body></methods><methods><class-id>Roassal2.TRBezierShape</class-id> <category>public</category><body package="Roassal2-Trachel-Shapes">points: points	listOfPoints := points</body><body package="Roassal2-Trachel-Shapes">points: aListOfPoints color: aColor	self points: aListOfPoints.	self strokePaint: aColor.	self color: aColor</body></methods><methods><class-id>Roassal2.TRBezierShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint 	| delta points p1 p2 |	delta := 5.	points := self points.	1 to: points size -1 do: [ :i |		p1 := points at: i.		p2 := points at: i + 1.		(aPoint onLineFrom: p1 to: p2 within: delta) ifTrue: [ ^ true ] ].	^ false.</body></methods><methods><class-id>Roassal2.TRBezierShape</class-id> <category>actions</category><body package="Roassal2-Trachel-Shapes">translateBy: aPoint	listOfPoints := listOfPoints collect: [ :p | p + aPoint ]</body></methods><methods><class-id>Roassal2.TRBezierShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	listOfPoints := Array with: 0 @ 0 with: 0 @ 0</body></methods><methods><class-id>Roassal2.RTPolygon</class-id> <category>accessing</category><body package="Roassal2-Shapes">vertices	^ vertices</body><body package="Roassal2-Shapes">vertices: arrayOfPoints	self verticesElement: [ :e | arrayOfPoints rtValue: e model ].</body><body package="Roassal2-Shapes">verticesElement: arrayOfPoints	vertices := arrayOfPoints</body></methods><methods><class-id>Roassal2.RTPolygon</class-id> <category>hooks</category><body package="Roassal2-Shapes">trachelShapeClass	^ TRPolygonShape</body><body package="Roassal2-Shapes">updateFor: anElement trachelShape: trachelShape	trachelShape isNil ifTrue: [ ^ self ].	trachelShape		color: (self colorFor: anElement);		strokeWidth: (self borderWidthFor: anElement);		strokePaint: (self borderColorFor: anElement);		vertices: (self verticesFor: anElement);		rotateByDegrees: (self rotationFor: anElement);		scaleBy: (self scaleFor: anElement).			(width notNil and: [height notNil])		ifTrue: [ trachelShape extent: (self widthFor: anElement) @ (self heightFor: anElement) ]</body><body package="Roassal2-Shapes">verticesFor: anElement	^ vertices rtValue: anElement.</body></methods><methods><class-id>Roassal2.RTPolygon</class-id> <category>initialization</category><body package="Roassal2-Shapes">initialize	super initialize.	self vertices: #().	width := height := nil.</body></methods><methods><class-id>Roassal2.RTPolygon class</class-id> <category>instance creation</category><body package="Roassal2-Shapes">diamond	^ self new		vertices:			(Array				with: 0 @ 1				with: 1 @ 0				with: 0 @ -1				with: -1 @ 0);		yourself</body><body package="Roassal2-Shapes">heptagon	^ self new		vertices: (self generateUnitNgonPointsFitToSquare: 7 rotation: 0);		yourself</body><body package="Roassal2-Shapes">hexagon	^ self new		vertices: (self generateUnitNgonPointsFitToSquare: 6 rotation: 0);		yourself</body><body package="Roassal2-Shapes">octagon	^ self new		vertices: (self generateUnitNgonPointsFitToSquare: 8 rotation: 0);		yourself</body><body package="Roassal2-Shapes">pentagon	^ self new		vertices: (self generateUnitNgonPointsFitToSquare: 5 rotation: 0);		yourself</body><body package="Roassal2-Shapes">rectangle	^ self square</body><body package="Roassal2-Shapes">rhomboid	^ self new		vertices:			(Array				with: -1 @ -1				with: 0.333 @ -1				with: 1 @ 1				with: -0.333 @ 1);		yourself</body><body package="Roassal2-Shapes">square	^ self new		vertices: (self generateUnitNgonPointsFitToSquare: 4 rotation: 0);		yourself</body><body package="Roassal2-Shapes">star	"		self star	"	| star5Points outerPoints innerPoints innerRadius ar |	star5Points := Array new: 10.	outerPoints := self generateUnitNgonPoints: 5 rotation: 0.	innerPoints := self generateUnitNgonPoints: 5 rotation: Float pi / -5.	"Outer radius is 1; inner radius of star is smaller"	innerRadius := 0.5 * (3 - 5 sqrt) * 1.57.	innerPoints		doWithIndex: [ :p :i | innerPoints at: i put: (p x * innerRadius) @ (p y * innerRadius) ].	star5Points		doWithIndex: [ :p :i | 			ar := i even				ifTrue: [ outerPoints ]				ifFalse: [ innerPoints ].			star5Points at: i put: (ar at: i // 2 + (i % 2)) ].	star5Points := self fitPolygonToSquare: star5Points.	^ self new		vertices: star5Points;		yourself</body><body package="Roassal2-Shapes">triangle	^ self new		vertices: (self generateUnitNgonPointsFitToSquare: 3 rotation: 0);		yourself</body><body package="Roassal2-Shapes">vee	^ self new		vertices:			(Array				with: -1 @ -1				with: 0 @ -0.333				with: 1 @ -1				with: 0 @ 1);		yourself</body></methods><methods><class-id>Roassal2.RTPolygon class</class-id> <category>public</category><body package="Roassal2-Shapes">fitPolygonToSquare: points	| maxx minx maxy miny sx sy x y |	minx := maxx :=  points first x.	miny := maxy :=  points first y.	points do: [ :p | 		minx := minx min: p x.		miny := miny min: p y.		maxx := maxx max: p x.		maxy := maxy max: p y ].	"stretch factors"	sx := 2/(maxx - minx).	sy := 2/(maxy - miny).	points doWithIndex: [ :p :i|		x := p x * sx.		y := p y * sy.		points at: i put: x@y.		minx := minx min: x.		miny := miny min: y.		maxx := maxx max: x.		maxy := maxy max: y ].	miny &lt; -1 ifTrue: [ 		points doWithIndex: [ :p :i |			points at: i put: p x @ ( p y - 1 - miny ) ] ].	^ points.</body><body package="Roassal2-Shapes">generateUnitNgonPoints: sides rotation: rotationAngle	"	RTPolygon generateUnitNgonPoints: 3 rotation: 0	"	| increment startAngle points currentAngle |	increment := 1.0 / sides * 2 * Float pi.	startAngle := sides even		ifTrue: [ (Float pi / 2) + (increment / 2) ]		ifFalse: [ Float pi / 2 ].	startAngle := startAngle + rotationAngle.		points := Array new: sides.	0 to: sides - 1 do: [ :i | 		currentAngle := i * increment + startAngle.		points at: i+1 put: currentAngle cos @ currentAngle negated sin ].	^ points</body><body package="Roassal2-Shapes">generateUnitNgonPointsFitToSquare: sides rotation: rotationAngle	| points |	points := self generateUnitNgonPoints: sides rotation: rotationAngle.	points := self fitPolygonToSquare: points.	^ points.</body></methods><methods><class-id>Roassal2.RTDistribution</class-id> <category>public</category><body package="Roassal2-Utility">annotatedFrequency	"Return a list of elements, each following the template:	{numberOfV . v} "	| fr result |		self sortObjectsAndDefineNumbers.	fr := self frequencyMin: self numbers min max: self numbers max amountOfIntervals: self defaultNumberOfIntervals.		result := fr collect: [ :f | Array with: f size with: f ].		^ result asArray</body><body package="Roassal2-Utility">annotatedFrequencyMin: numMin max: numMax amountOfIntervals: aNbOfIntervals	"	Return a list of elements, each following the template:	{numberOfElementOfV . V} "	| fr result |		fr := self frequencyMin: numMin max: numMax amountOfIntervals: aNbOfIntervals.		result := fr collect: [ :f | Array with: f size with: f ].		^ result asArray</body><body package="Roassal2-Utility">annotatedFrequencyWithAmountOfIntervals: aSmallInteger 		self sortObjectsAndDefineNumbers.		^ self annotatedFrequencyMin: self numbers min max: self numbers max amountOfIntervals: aSmallInteger</body><body package="Roassal2-Utility">defaultMetric	"This block define the metric to apply to the object"		self metric ifNil: [ 		(self objects first isKindOf: Number) ifTrue: [ 			self metric: #yourself ] ifFalse: [ self metric: [:o | o hash] ]		]</body><body package="Roassal2-Utility">defaultStrategyBlock	"This block define which bucket to store in, a given number"	self strategyBlock: 		[ :obj |			|number|			number := (self metric rtValue: obj).			number = self numberMax				ifTrue: self nbOfIntervals				ifFalse: [ ((number - self numberMin) / self interval) floor + 1] 				].</body><body package="Roassal2-Utility">deprecatedAnnotatedFrequencyMin: numMin max: numMax amountOfIntervals: aNbOfIntervals	"Return a list of elements, each following the template:	{ c1 . c2 . elements that are between c1 and c2 }	{ c2 . c3 . elements that are between c2 and c3 }	...		We have c1 &lt;= c2 &lt;= c3 &lt;= ...	c1 = numberMin	cN = numberMax	N = nbOfIntervals	 "	| running tmp result |	numbers := numbers sort.	self numberMax: numMax.	self numberMin: numMin.	self nbOfIntervals: aNbOfIntervals.	interval := ((numberMax + 1 - numberMin) / nbOfIntervals).	running := numberMin.		tmp := numbers copy.	result := OrderedCollection new.	[ running asFloat &lt;= numberMax ] whileTrue: [ 		| c |		c := tmp select: [ :v | v &gt;= running and: [ v &lt; (running + interval) ]].		result add: (Array with: running with: interval + running with: c asArray).		tmp := tmp copyWithoutAll: c.		running := running + interval ].		^ result asArray</body><body package="Roassal2-Utility">frequency	self sortObjectsAndDefineNumbers.	^ self frequencyWithAmountOfIntervals: self defaultNumberOfIntervals.</body><body package="Roassal2-Utility">frequencyMin: numMin max: numMax amountOfIntervals: aNbOfIntervals	| tmp result bucketFor |		self sorted ifFalse: [self sortObjectsAndDefineNumbers].		self numberMax: numMax.	self numberMin: numMin.	self nbOfIntervals: aNbOfIntervals.		self interval: (self numberMax - self numberMin) / (self nbOfIntervals floor).	bucketFor := self strategyBlock.	tmp := self objects copy.	result := (1 to: self nbOfIntervals) collect: [ :i | OrderedCollection new ].	tmp do: [ :obj | (result at: (bucketFor value: obj) asInteger) add: obj ].	^ result asArray</body><body package="Roassal2-Utility">frequencyWithAmountOfIntervals: aSmallInteger 		self sortObjectsAndDefineNumbers.	^ self frequencyMin: self numbers min max: self numbers max amountOfIntervals: aSmallInteger</body><body package="Roassal2-Utility">initialize	super initialize.	self defaultStrategyBlock.	self sorted: false.</body><body package="Roassal2-Utility">interval	^ interval</body><body package="Roassal2-Utility">interval: aSize	interval := aSize</body><body package="Roassal2-Utility">metric	"This block define the metric to apply to the object"	^ metric</body><body package="Roassal2-Utility">metric: aBlockOrSymbol	"This block define the metric to apply to the object"	metric := aBlockOrSymbol.</body><body package="Roassal2-Utility">nbOfIntervals	^ nbOfIntervals</body><body package="Roassal2-Utility">nbOfIntervals: aNumber	nbOfIntervals := aNumber</body><body package="Roassal2-Utility">numberMax	^ numberMax</body><body package="Roassal2-Utility">numberMax: aNumber	numberMax := aNumber</body><body package="Roassal2-Utility">numberMin	^ numberMin</body><body package="Roassal2-Utility">numberMin: aNumber	numberMin := aNumber</body><body package="Roassal2-Utility">numbers	^ numbers</body><body package="Roassal2-Utility">numbers: aCollectionOfNumbers	numbers := aCollectionOfNumbers</body><body package="Roassal2-Utility">objects	^ objects</body><body package="Roassal2-Utility">objects: aCollectionOfObjects	objects := aCollectionOfObjects</body><body package="Roassal2-Utility">on: collectionOfObjects	self assert: (collectionOfObjects isNotEmpty).	self objects: collectionOfObjects.</body><body package="Roassal2-Utility">sortObjectsAndDefineNumbers	self defaultMetric.	self objects: (self objects copy sort: [ :o1 :o2 | (self metric rtValue: o1) &lt; (self metric rtValue: o2)  ]).	self numbers: (self objects collect: [ :o | self metric rtValue: o ]). 		self sorted: true.</body><body package="Roassal2-Utility">sorted	^ sorted</body><body package="Roassal2-Utility">sorted: aBoolean	sorted := aBoolean</body><body package="Roassal2-Utility">strategyBlock	^ strategyBlock</body><body package="Roassal2-Utility">strategyBlock: aBlock"This block define which bucket to store in, a given number"	strategyBlock := aBlock</body></methods><methods><class-id>Roassal2.RTDistribution</class-id> <category>computing</category><body package="Roassal2-Utility">amountOfDifferentValues	^ self objects asSet size</body><body package="Roassal2-Utility">defaultNumberOfIntervals	^ (self numbers size) log * 3.3 + 1</body></methods><methods><class-id>Roassal2.RTDistribution class</class-id> <category>public</category><body package="Roassal2-Utility">on: anArray 	^ self new on: anArray</body></methods><methods><class-id>Roassal2.RTFlowLayout</class-id> <category>utility</category><body package="Roassal2-Layouts">maxNextLineHeightFrom: ele for: elements	| nextLineX maxNextLineHeight anElement |	maxNextLineHeight := 0.	nextLineX := self gapSize.	anElement := ele.	[ nextLineX &lt; (self maxWidth rtValue: elements) ] whileTrue: [		nextLineX := nextLineX + (self gapSize) + (anElement width).		maxNextLineHeight := maxNextLineHeight max: (anElement height).			(anElement = elements last) ifFalse:  [anElement := (elements after: anElement) ].		].	^ maxNextLineHeight</body></methods><methods><class-id>Roassal2.RTFlowLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: elements 	| x y maxLastLineHeight maxNextLineHeight  nextElement |		x := self gapSize.	y := self gapSize.	maxLastLineHeight := 0.	maxNextLineHeight := 0.	nextElement := elements first.	 	elements do:		[ :anElement | 		(anElement = elements last) ifFalse:  [nextElement := (elements after: anElement)] ifTrue: [nextElement := anElement].			self isAlignBottom ifTrue: [ 			translator translateBottomLeftOf: anElement to: x @ y.			x := x + anElement width + (self gapSize).			((x &gt; (self maxWidth rtValue: elements)) | ((x + nextElement width) &gt; (self maxWidth rtValue: elements) )) ifTrue:				[ x := self gapSize.				maxNextLineHeight := self maxNextLineHeightFrom: nextElement for: elements.				y := y + (self gapSize) + maxNextLineHeight.				maxNextLineHeight := 0.				]			].				self isAlignCenter ifTrue: [ 			translator translateCenterLeftOf: anElement to: x @ y.								x := x + (anElement width) +(self gapSize).			maxLastLineHeight := maxLastLineHeight max: (anElement height).			((x &gt; (self maxWidth rtValue: elements)) | ((x + nextElement width) &gt; (self maxWidth rtValue: elements) )) ifTrue: 				[ x := self gapSize.				maxNextLineHeight := self maxNextLineHeightFrom: nextElement for: elements.				y := y + (self gapSize) + (maxNextLineHeight / 2) + (maxLastLineHeight / 2).				maxNextLineHeight := 0.				maxLastLineHeight := 0.				]			].				self isAlignTop ifTrue: [ 			translator translateTopLeftOf: anElement to: (x @ y).			x := x + anElement width + (self gapSize).			maxLastLineHeight := maxLastLineHeight max: (anElement height ).			( (x &gt; (self maxWidth rtValue: elements)) | ((x + nextElement width) &gt; (self maxWidth rtValue: elements) ))ifTrue: 				[ x := self gapSize.				y := y + (self gapSize) + maxLastLineHeight.				maxLastLineHeight := 0. 				]		] 	]</body></methods><methods><class-id>Roassal2.RTFlowLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize	super initialize.	self alignTop.</body></methods><methods><class-id>Roassal2.RTCalendarBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Calendar">dateInteraction	^ dateInteraction</body><body package="Roassal2-Builder-Calendar">dateLayout	^ dateLayout</body><body package="Roassal2-Builder-Calendar">dateSelector	^ dateSelector</body><body package="Roassal2-Builder-Calendar">dateSelector: anObject	dateSelector := anObject</body><body package="Roassal2-Builder-Calendar">dateShape	^ dateShape</body><body package="Roassal2-Builder-Calendar">dateShape: aShapeBuilder	dateShape := aShapeBuilder</body><body package="Roassal2-Builder-Calendar">dates	^ dates</body><body package="Roassal2-Builder-Calendar">dates: anObject	dates := anObject</body><body package="Roassal2-Builder-Calendar">dayLabelShape	^ dayLabelShape</body><body package="Roassal2-Builder-Calendar">monthInteraction	^ monthInteraction</body><body package="Roassal2-Builder-Calendar">monthLayout	^ monthLayout</body><body package="Roassal2-Builder-Calendar">monthShape	^ monthShape</body><body package="Roassal2-Builder-Calendar">yearInteraction	^ yearInteraction</body><body package="Roassal2-Builder-Calendar">yearLayout	^ yearLayout</body><body package="Roassal2-Builder-Calendar">yearShape	^ yearShape</body><body package="Roassal2-Builder-Calendar">yearShape: aShapeBuilder	yearShape := aShapeBuilder</body></methods><methods><class-id>Roassal2.RTCalendarBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-Calendar">createView	^ super createView @ RTDraggableView.</body><body package="Roassal2-Builder-Calendar">renderIn: aView	| dateStructure years |		dateStructure := self getDateStructure.	years := OrderedCollection new.	dateStructure do: [ :asso1 | 		| year months |		year := yearShape elementOn: asso1 key.		view add: year.		years add: year.				months := RTGroup new.		asso1 value do: [ :asso2 | 			| month days dayLabels | 			month := monthShape elementOn: asso2 key.			view add: month.			months add: month.			dayLabels := dayLabelShape elementsOn: (self daysIndex: asso2 value).			days := dateShape elementsOn: asso2 value.			view addAll: days.						(dayLabels first extent = (0.0@0.0)) ifTrue: [ 				dateLayout layout on: days.				RTNest new on: month nest: days.			] ifFalse: [ 				view addAll: dayLabels.				dateLayout layout on: dayLabels, days.				RTNest new on: month nest: dayLabels,days. ].			dateInteraction setUpElements: days.			 ]. 		monthLayout layout on: months.		RTNest new on: year nest: months.		monthInteraction setUpElements: months. ].	yearLayout layout on: years.	yearInteraction setUpElements: years.</body></methods><methods><class-id>Roassal2.RTCalendarBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Calendar">initialize	super initialize.	dateShape := RTShapeBuilder new.	dateShape label text: [:date | date dayOfMonth ].		dayLabelShape := RTShapeBuilder new.	dayLabelShape rectangle size: 0.		self dateSelector: #yourself.		monthShape := RTShapeBuilder new.	monthShape composite: [ :s | 		s add: (RTLabel new text: [ :d | d name ]).		s add: (RTBox new color: Color transparent; borderColor: Color lightGray) ].		yearShape := RTShapeBuilder new.	yearShape rectangle color: Color transparent.		dateLayout := RTLayoutBuilder new.	dateLayout date.	monthLayout := RTLayoutBuilder new.	monthLayout grid gapSize: 10.	yearLayout := RTLayoutBuilder new.	yearLayout grid gapSize: 10.		dateInteraction := RTInteractionBuilder new.	monthInteraction := RTInteractionBuilder new.	yearInteraction := RTInteractionBuilder new.</body></methods><methods><class-id>Roassal2.RTCalendarBuilder</class-id> <category>public</category><body package="Roassal2-Builder-Calendar">monthShapePath: cellSize	^ RTSVGPath new 		borderColor: Color black;		path: [ :e | | month d w0 d0 d1 w1 csize t1 t2 |			csize := cellSize asPoint.			month := e model."an instance of Month"			t1 := month asDate.			t2 := Date newDay: month daysInMonth month: month name year: month year.			d0 := t1 dayOfWeek - 1.			d1 := t2 dayOfWeek - 1.			w0 := 0.			w1 := month weeks size-1.			d := 'M', (d0 * cellSize) asString , ',' , ((w0 + 1) * cellSize) asString     			, 'V' , (w0 * cellSize) asString , 'H' , (7 * cellSize) asString 				, 'V' , (w1 * cellSize) asString , 'H' , ((d1 + 1) * cellSize) asString				, 'V' , ((w1 + 1) * cellSize) asString , 'H 0'     			, 'V' , ((w0 + 1) * cellSize) asString , 'Z'.			d. ].</body><body package="Roassal2-Builder-Calendar">showDayNames	self dayLabelShape label text: [ :index | 		| name i |		i := Week dayNames indexOf: Week startDay.		i := i+index - 1.		i &gt; 7 ifTrue: [ i := i -7 ].		name := Week nameOfDay: i.		name first asString, name second asString ].</body></methods><methods><class-id>Roassal2.RTCalendarBuilder</class-id> <category>accessing - computed</category><body package="Roassal2-Builder-Calendar">daysIndex: aCollection	^ (aCollection collect: [ :d | d dayOfWeek ]) asSet asSortedCollection.</body><body package="Roassal2-Builder-Calendar">getDateStructure	| aDates firstDay currentMonth currentYear days months years |	aDates := self getDays."All the dates"		firstDay := aDates first.	currentMonth := firstDay asMonth.	currentYear := currentMonth asYear.		years := OrderedCollection new.	months := OrderedCollection new.	days := OrderedCollection new.		days add: firstDay.	months add: currentMonth-&gt;days.	years add: currentYear-&gt;months.	aDates allButFirstDo: [ :date | | temp |		temp := date asYear.		temp = currentYear 			ifFalse: [ 				currentYear := temp.				months := OrderedCollection new.				years add: currentYear-&gt;months. ].		temp := date asMonth.		temp = currentMonth 			ifTrue: [ days add: date ]			ifFalse: [ 				currentMonth := temp.				days := OrderedCollection new.				days add: date.				months add: currentMonth-&gt;days ]		].		^ years</body><body package="Roassal2-Builder-Calendar">getDays	| timespan days current limit |	timespan := self dateSelector rtValue: self dates.		(timespan isKindOf: OrderedCollection) ifTrue: [ ^ timespan asSortedCollection ].		days := OrderedCollection new.	current := timespan start asDate.	limit := timespan end asDate.		[ current &lt;= limit ] whileTrue: [ 		days add: current.		current := current next ].		^ days</body></methods><methods><class-id>Roassal2.RTSVGHightlight</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addEventHandlers: aStream id: aString element: element center: aNumber	aStream		nextPutAll: 'hightlight '</body><body package="Roassal2-Exporter-SVG">addFunctions: aStream	| attr  |	attr := self targetColorAttribute.	aStream		nextPutAll: '			var color;			function hightlight(evt) {				if (evt.target.id == "BackDrop")					return;				if (!evt.target.classList.contains("hightlight"))					return;				var affected = evt.target;				if (color == affected.style["',attr,'"] || color == null) {					color = affected.style["',attr,'"];					affected.style["',attr,'"] = "',self color asHTMLColor,'";				}			};						function unHightlight(evt) {				if (evt.target.id == "BackDrop")					return;				if (!evt.target.classList.contains("hightlight"))					return;				var affected = evt.target;				affected.style["',attr,'"] = color;				color = null;			}';		nextPutAll: String cr.</body><body package="Roassal2-Exporter-SVG">addGlobalHandlers: aStream	aStream		nextPutAll: '	onmouseover="hightlight(evt)"	onmouseout="unHightlight(evt)"'</body></methods><methods><class-id>Roassal2.RTSVGHightlight</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	color := Color red.	contained := true.	external := false.	self type: 'hightlight'.</body></methods><methods><class-id>Roassal2.RTSVGHightlight</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">color	^ color</body><body package="Roassal2-Exporter-SVG">color: anObject	color := anObject</body></methods><methods><class-id>Roassal2.RTSVGHightlight class</class-id> <category>as yet unclassified</category><body package="Roassal2-Exporter-SVG">on: anExporter color: aColor targets: aRTShape	| generator |	generator := [ :e |  self new target: e; color: aColor; yourself ].	self on: anExporter targets: aRTShape generator: generator</body></methods><methods><class-id>Roassal2.RTCache</class-id> <category>private</category><body package="Roassal2-Cachetor">addEvents: bitmap	bitmap when: TRMouseMove do: [ :evt| self processMouseMove: evt. ].	bitmap when: TRMouseDragging do: [ :evt | self processMouseDrag: evt ].	bitmap when: TRMouseClick do: [ :evt | self processMouseClick: evt ].</body><body package="Roassal2-Cachetor">cacheElements: someElements	^ self cacheElements: someElements edges: #().</body><body package="Roassal2-Cachetor">cacheElements: someElements edges: someEdges	"This method is assuming all the elements belong to the same view"	| view newElement elements edges |		elements := someElements asGroup.	edges := someEdges asGroup.	view := someElements anyOne view.	canvas := view canvas.	trachelShapes := canvas shapes.	newElement := (RTBitmap new form: (self getFormElements: elements, edges)) element.	self addEvents: newElement.	newElement translateTo: canvas encompassingRectangle center.	view removeAllElements.	view add: newElement.	^ newElement.</body><body package="Roassal2-Cachetor">eventOfClass: anEventClass actionClass: anActionClass from: event	| relativePosition trEvent shape |	relativePosition := canvas camera fromSpaceToPixel: event position.	shape := self shapeWithAction: anActionClass forPositionInPixels: relativePosition.	trEvent := anEventClass fromEvent: event.	trEvent		morph: self;		canvas: canvas;		shape: shape;		position: relativePosition.	^ trEvent</body><body package="Roassal2-Cachetor">eventOfClass: anEventClass from: aMorphicEvent	^ self eventOfClass: anEventClass actionClass: anEventClass from: aMorphicEvent</body><body package="Roassal2-Cachetor">getFormElements: someElements	"Return a form contains the graphical representation of the elements"		| extent surface formCanvas |	extent := someElements extent asIntegerPoint.	surface := TRPlatform current surfaceClass extent: extent.	formCanvas := TRPlatform current formCanvasClass extent: extent.	formCanvas fillRectangle: ((0 @ 0) extent: extent) color: Color transparent.	surface		drawDuring: [ :cs | 			"Probably not necessary since we have just created a surface"			cs pathTransform				translateBy: (someElements encompassingRectangle topLeft) negated asFloatPoint				"translateBy: (someElements position asFloatPoint) negated"				"scaleBy: self cameraScale;				translateBy: self cameraPositionNegated".			surface clear.			someElements do: [ :element | element trachelShape drawOn: cs ].			cs pathTransform loadIdentity scaleBy: 1.001. ].	[formCanvas	 	image: surface asForm		at: 0 @ 0		sourceRect: (0 @ 0 extent: surface extent)		rule: 34] on: Exception do: [ :ex | ].	^ formCanvas form</body><body package="Roassal2-Cachetor">processMouseClick: evt</body><body package="Roassal2-Cachetor">processMouseDrag: evt	| shape relativePosition |	relativePosition := canvas camera fromSpaceToPixel: evt position.	shape := self shapeWithAction: evt class forPositionInPixels: relativePosition.	evt shape: shape.	evt shape announce: evt.	evt position: relativePosition.</body><body package="Roassal2-Cachetor">processMouseMove: evt	| currentElement trEvent |	shapeBeingPointed 		ifNil: [ 			trEvent := self eventOfClass: TRMouseEnter from: evt.			shapeBeingPointed := trEvent shape.			trEvent shape announce: trEvent.			^ self ].	currentElement := self shapeForEvent: evt.	currentElement == shapeBeingPointed		ifTrue: [ ^ self ].	trEvent := self eventOfClass: TRMouseLeave from: evt.	trEvent shape: shapeBeingPointed.	shapeBeingPointed announce: trEvent.	shapeBeingPointed := currentElement.	trEvent := self eventOfClass: TRMouseEnter from: evt.	trEvent shape announce: trEvent.</body><body package="Roassal2-Cachetor">shapeForEvent: evt	^ self shapeWithActionForPositionInPixels: (canvas camera fromSpaceToPixel: evt position).</body><body package="Roassal2-Cachetor">shapeWithAction: eventClass forPositionInPixels: position	| pos |	pos := canvas camera fromPixelToSpace: position.	trachelShapes reverseDo: [ :s| 		((s includesPoint: pos) 			and: [ s announcer handleEventClass: eventClass ]) ifTrue: [ ^ s ] ].	^ canvas</body><body package="Roassal2-Cachetor">shapeWithActionForPositionInPixels: position	| pos |	pos := canvas camera fromPixelToSpace: position.	trachelShapes reverseDo: [ :s| 		((s includesPoint: pos) 			and: [ s hasEventCallback ]) ifTrue: [ ^ s ] ].	^ canvas</body></methods><methods><class-id>Roassal2.RTCache</class-id> <category>public</category><body package="Roassal2-Cachetor">cacheView: aView	"Public method"	self cacheElements: aView elements edges: aView edges</body></methods><methods><class-id>Roassal2.Year</class-id> <category>accessing</category><body package="Roassal2-Pharo">daysInMonth 	self shouldNotImplement</body><body package="Roassal2-Pharo">daysInYear	^ self duration days.</body><body package="Roassal2-Pharo">firstThursday	"Return the years first Thursday.	According to the ISO 8601 definition, the first week starts with the years first Thursday (week day number 5)"	 ^ self start + (5 - self start dayOfWeek) days</body></methods><methods><class-id>Roassal2.Year</class-id> <category>conversion</category><body package="Roassal2-Pharo">asYear 	^ self</body></methods><methods><class-id>Roassal2.Year</class-id> <category>printing</category><body package="Roassal2-Pharo">printOn: aStream	aStream nextPutAll: 'a Year ('. 	self start year printOn: aStream. 	aStream nextPutAll: ')'.</body></methods><methods><class-id>Roassal2.Year</class-id> <category>changes</category><body package="Roassal2-Pharo">previous	"This implementation handles leap years correctly"		^ self class year: (self year - 1)</body></methods><methods><class-id>Roassal2.Year class</class-id> <category>accessing</category><body package="Roassal2-Pharo">daysInYear: yearInteger	^ 365 + ((self isLeapYear: yearInteger) ifTrue: [1] ifFalse: [0]).</body><body package="Roassal2-Pharo">isLeapYear: aYearInteger	| adjustedYear |	adjustedYear := aYearInteger &gt; 0		ifTrue: [aYearInteger]		ifFalse: [(aYearInteger + 1) negated].	"There was no year 0"	^ ((adjustedYear \\ 4 ~= 0) or: [(adjustedYear \\ 100 = 0) and: [adjustedYear \\ 400 ~= 0]]) not.</body></methods><methods><class-id>Roassal2.Year class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">starting: aDateAndTime duration: aDuration 	"Return a new year, starting from the beginning the year the given DateAndTime is in."	| aYear |	aYear := aDateAndTime asDateAndTime year.	^ super		starting: (Timestamp year: aYear month: 1 day: 1)		duration: (Duration days: (self daysInYear: aYear)).</body><body package="Roassal2-Pharo">year: aYear	^ self starting: (Timestamp year: aYear month: 1 day: 1).</body></methods><methods><class-id>Roassal2.RTMenu</class-id> <category>accessing</category><body package="Roassal2-Builder-Menu">buttonLabelBackgroundShapeAndColor: aColor	| box |		box := TRBoxShape new extent: label encompassingRectangle extent + (10@7).	self labelBackground: box.	box color: aColor.	self saveLabelBackgroundColor.	box strokePaint: "(Color black)"nil.	TRConstraint move: box onTheCenterOf: label.	view canvas addFixedShape: box.	box pushBack.</body><body package="Roassal2-Builder-Menu">color	^ color</body><body package="Roassal2-Builder-Menu">color: aColor	color:= aColor</body><body package="Roassal2-Builder-Menu">endHighlight	self labelBackgroundColor: self savedLabelBackgroundColor.	self label color: Color black.</body><body package="Roassal2-Builder-Menu">executeHighlight	self labelBackgroundColor: self highlightColor.</body><body package="Roassal2-Builder-Menu">executeLockHighlight	self labelBackgroundColor: (self highlightColor alpha: ((self highlightColor alpha) + 0.3)).</body><body package="Roassal2-Builder-Menu">executeTextHighlight	self label color: Color blue.</body><body package="Roassal2-Builder-Menu">highlightColor	^ highlightColor</body><body package="Roassal2-Builder-Menu">highlightColor: aColor	highlightColor := aColor.</body><body package="Roassal2-Builder-Menu">isLocked	^ isLocked</body><body package="Roassal2-Builder-Menu">isLocked: abool	isLocked := abool</body><body package="Roassal2-Builder-Menu">isOpen	^ isOpen</body><body package="Roassal2-Builder-Menu">isOpen: abool	isOpen := abool</body><body package="Roassal2-Builder-Menu">items	^ items ifNil: [ items := OrderedCollection new ]</body><body package="Roassal2-Builder-Menu">labelBackground	 ^ labelBackground</body><body package="Roassal2-Builder-Menu">labelBackground: aShape	labelBackground := aShape</body><body package="Roassal2-Builder-Menu">labelBackgroundColor	^ labelBackground color</body><body package="Roassal2-Builder-Menu">labelBackgroundColor: aColor	labelBackground color: aColor.</body><body package="Roassal2-Builder-Menu">menuBackground	^ menuBackground</body><body package="Roassal2-Builder-Menu">menuBackground: aShape	menuBackground :=  aShape</body><body package="Roassal2-Builder-Menu">menuBackgroundColor	^ menuBackgroundColor</body><body package="Roassal2-Builder-Menu">menuBackgroundColor: aColor	menuBackgroundColor := aColor</body><body package="Roassal2-Builder-Menu">menuLabelBackgroundShapeAndColor: aColor	| box form |		box := TRBoxShape new extent: label encompassingRectangle extent + (20@7).	self labelBackground: box.	box color: aColor.	self saveLabelBackgroundColor.	box strokePaint: "(Color black)"nil.	TRConstraint move: box onTheCenterOf: label.	form := TRPolygonShape new color: Color black; vertices: (Array with: 0@0 with: 6@0 with: 3@6).	form strokePaint: (Color black).	TRConstraint move: form onTheRightOf: box.		view canvas addFixedShape: form.	form translateBy: (-12)@(2).	label translateBy: (-5)@(0).	view canvas addFixedShape: box.	form pushBack.	box pushBack.</body><body package="Roassal2-Builder-Menu">saveLabelBackgroundColor	savedLabelBackgroundColor :=  self labelBackground color.</body><body package="Roassal2-Builder-Menu">savedLabelBackgroundColor	^ savedLabelBackgroundColor.</body><body package="Roassal2-Builder-Menu">update|pos1 pos2 maxWidth parentMenu y |			parentMenu := view canvas fixedShapes select: [ :t | t class == TRLabelShape and: [ t text = label text ] ].	parentMenu := parentMenu first.		y := 0.	maxWidth := items ifNotEmpty: [(items collect: [ :item | item rawmenu width]) max] ifEmpty: [0].	pos1:= parentMenu position + ((((parentMenu width)/2 + 5)negated)@((parentMenu height)/2+3.4)).	items do: [ :item | y := y + (item rawmenu height).].	pos2:= pos1 + ((maxWidth+20)@(y + 5)).	self menuBackground: (TRBoxShape new from: pos1 to: pos2; color: (self menuBackgroundColor); strokePaint: nil"(Color gray darker alpha: 0.3)").		view canvas addFixedShape: (self menuBackground).	(self menuBackground) pushBack.	^ (self menuBackground).</body><body package="Roassal2-Builder-Menu">view: v	view := v</body></methods><methods><class-id>Roassal2.RTMenu</class-id> <category>hide entries</category><body package="Roassal2-Builder-Menu">hideAll	view canvas fixedShapes do: [ :s |				(s element isKindOf: RTMenu) ifTrue: [ s element hideItems ]. ]</body><body package="Roassal2-Builder-Menu">hideItems	self isOpen ifFalse: [ ^ self ].	self isOpen: false.	self isLocked: false.	self items do: [:item |		item rawmenu remove].	menuBackground remove.	self endHighlight.</body></methods><methods><class-id>Roassal2.RTMenu</class-id> <category>adding</category><body package="Roassal2-Builder-Menu">add: menuitem	self items add: menuitem.</body><body package="Roassal2-Builder-Menu">label	^ label</body><body package="Roassal2-Builder-Menu">label: aLabel	label := aLabel.</body></methods><methods><class-id>Roassal2.RTMenu</class-id> <category>initialization</category><body package="Roassal2-Builder-Menu">initialize	super initialize.	color := Color gray darker alpha: 0.3.	view := nil.	isOpen := false.	isLocked := false.	savedLabelBackgroundColor := color.</body></methods><methods><class-id>Roassal2.RTMenu class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">new	^ super new initialize</body></methods><methods><class-id>Roassal2.RTDoubleSlider</class-id> <category>initialization</category><body package="Roassal2-Builder-UI-Slider">initialize	super initialize.	labelled := false.	callback := [ :arg1 :arg2 | ].	sliderElements := #().	min := 0.0.	max := 1.0.	useIntegerLabel := false.</body></methods><methods><class-id>Roassal2.RTDoubleSlider</class-id> <category>private</category><body package="Roassal2-Builder-UI-Slider">addDraggableInteractions	| draggable w1 w2 |	draggable := RTConstrainedDraggable new.	draggable rectangle: [ 		w1 := (cursorMin encompassingRectangle width/2)@0.		(extremity1 position - w1) corner: (extremity2 position+w1) ].	draggable afterBlock: [ self eventForCursorMin: true ].	cursorMin @ draggable.	cursorMin translateTo: 0 @ 0.	draggable := RTConstrainedDraggable new.	draggable rectangle: [		w2 := (cursorMax encompassingRectangle width/2)@0.		(extremity1 position - w2) corner: (extremity2 position+w2) ].	draggable afterBlock: [ self eventForCursorMax: true ].	cursorMax @ draggable.	cursorMax translateTo: 200 @ 0.		draggable := RTConstrainedDraggable new.	draggable rectangle: [ extremity1 position corner: extremity2 position].	draggable afterBlock: [ self eventForLineCursor ].	lineCursor @ draggable.	lineCursor translateTo: 100@0.	lineCursor trachelShape width: 200.</body><body package="Roassal2-Builder-UI-Slider">addLabelsIfNecessary	| positionMin positionMax |	labelled ifFalse: [ ^ self ].		positionMin := (cursorMin position x - extremity1 position x)		/ (extremity2 position x - extremity1 position x).	positionMin := positionMin * (max - min) + min.	positionMin := useIntegerLabel		ifTrue: [ (positionMin round: 0) asInteger ]		ifFalse: [ positionMin round: 2 ].	positionMax := (cursorMax position x - extremity1 position x)		/ (extremity2 position x - extremity1 position x).	positionMax := positionMax * (max - min) + min.	positionMax := useIntegerLabel		ifTrue: [ (positionMax round: 0) asInteger ]		ifFalse: [ positionMax round: 2 ].	cursorMin @ (RTLabeled new text: positionMin).	cursorMax @ (RTLabeled new text: positionMax)</body><body package="Roassal2-Builder-UI-Slider">adjustPosition: order	| p1 p2 cmin cmax |	p1 := cursorMin position.	p2 := cursorMax position.	order ifTrue: [ cmin:= cursorMin. cmax:=cursorMax ]		ifFalse: [ cmin:=cursorMax. cmax:=cursorMin ].	p1 x &gt; p2 x ifTrue: [ cmin translateTo: (cmax position x @ cmin position y). ].</body><body package="Roassal2-Builder-UI-Slider">eventForCursor: propagate order: order	| p1 p2 pmin pmax e1 e2 res |	self adjustPosition: order.	p1 := cursorMin position.	p2 := cursorMax position.	e1 := extremity1 position.	e2 := extremity2 position.	pmin := (p1 x - e1 x)/ (e2 x - e1 x).	pmin := (pmin * (max - min)) + min.	pmax := (p2 x - e1 x)/(e2 x - e1 x).	pmax := (pmax * (max - min))+min.	res := Array with: pmin with: pmax.	propagate ifTrue: [ 		callback rtValue: res.		self updateLineCursor ].	self updateLabel: order 		with: (order ifTrue: [ pmin ] ifFalse: [ pmax ] ).	^ res</body><body package="Roassal2-Builder-UI-Slider">eventForCursorMax: propagate	^ self eventForCursor: propagate order: false.</body><body package="Roassal2-Builder-UI-Slider">eventForCursorMin: propagate	^ self eventForCursor: propagate order: true.</body><body package="Roassal2-Builder-UI-Slider">eventForLineCursor	| p w2 res |	p := lineCursor position.	w2 := (lineCursor trachelShape width/2) @ 0.	cursorMin translateTo: p - w2.	cursorMax translateTo: p + w2.	self eventForCursorMax: false.	res := self eventForCursorMin: false.	callback rtValue: res.</body><body package="Roassal2-Builder-UI-Slider">updateLabel: order with: value	| label |	label := order ifTrue: [ cursorMin ] ifFalse: [ cursorMax ].	(label attributes includesKey: #RTLabelledLabel) 		ifTrue: [label := label attributeAt: #RTLabelledLabel.]		ifFalse: [ ^ self ].	labelled ifTrue: [ 		label text: (useIntegerLabel 			ifTrue: [ (value round: 0) asInteger]			ifFalse: [ value round: 2 ] ) asString. ]</body><body package="Roassal2-Builder-UI-Slider">updateLineCursor	| p1 p2 |	p1 := cursorMax position.	p2 := cursorMin position.		lineCursor trachelShape 		width: p1 x - p2 x;		translateTo: (p1 interpolateTo: p2 at: 0.5).</body></methods><methods><class-id>Roassal2.RTDoubleSlider</class-id> <category>accessing</category><body package="Roassal2-Builder-UI-Slider">callback	^ callback</body><body package="Roassal2-Builder-UI-Slider">callback: aTwoArgBlock	"everytime the slider is moved the aTwoArgBlock will be evaluated with 2 arguments which correspond 	to the position of the 2 cursors of the double slider, from the configured min value to the configured max value"	callback := aTwoArgBlock</body><body package="Roassal2-Builder-UI-Slider">isLabelled	^labelled</body><body package="Roassal2-Builder-UI-Slider">labeled	labelled := true</body><body package="Roassal2-Builder-UI-Slider">max	^ max</body><body package="Roassal2-Builder-UI-Slider">max: aNumber	self assert: [ min &lt;= aNumber ] description: 'Max value cant be smaller than the min value'.	max := aNumber</body><body package="Roassal2-Builder-UI-Slider">min	^ min</body><body package="Roassal2-Builder-UI-Slider">min: aNumber	self assert: [ aNumber &lt;= max ] description: 'Min value cant be bigger than the max value'.	min := aNumber</body><body package="Roassal2-Builder-UI-Slider">move: aSymbol	position := aSymbol</body><body package="Roassal2-Builder-UI-Slider">useIntegerLabel	"sets the display of the slider's label using an integral value instead of a floating point one	ex:		slider useIntegerLabel	"	useIntegerLabel := true</body><body package="Roassal2-Builder-UI-Slider">usingIntegerLabel	^useIntegerLabel</body></methods><methods><class-id>Roassal2.RTDoubleSlider</class-id> <category>hooks</category><body package="Roassal2-Builder-UI-Slider">createShapeBuilder	"RTBox new color: (Color red alpha: 0.5); width: 15; height: 20"	^ super createShapeBuilder		rectangle;		color: (Color red alpha: 0.5);		width: 10;		height: 20;		yourself</body><body package="Roassal2-Builder-UI-Slider">renderIn: aView	self createElements.	aView addAll: sliderElements.	self addDraggableInteractions.	self addLabelsIfNecessary.</body></methods><methods><class-id>Roassal2.RTDoubleSlider</class-id> <category>examples</category><body package="Roassal2-Builder-UI-Slider">createElements	sliderElements := RTGroup new.	extremity1 := (RTBox new width: 5; height: 10) element.	extremity2 := (RTBox new width: 5; height: 10) element.	line := (RTLine new width: 5) edgeFrom: extremity1 to: extremity2.	extremity2 translateTo: 200 @ 0.		cursorMin := self elementOn: nil.	cursorMax := self elementOn: nil.	lineCursor := (RTBox new height: 8; color: Color blue trans) element.		sliderElements		add: extremity1;		add: extremity2;		add: line;		add: lineCursor;		add: cursorMin;		add: cursorMax.</body><body package="Roassal2-Builder-UI-Slider">example01	"		self new example01	"	| v label1 label2 doubleSlider composer |	v := RTView new.		composer := RTComposer new.	composer view: v.		label1 := RTLabel elementOn: 0.	v add: label1.	composer group: label1.		label2 := RTLabel elementOn: 0.	v add: label2.	composer group: label2.		doubleSlider := RTDoubleSlider new.	doubleSlider view: v.	doubleSlider labeled.	doubleSlider callback: [ :cursor1 :cursor2 | 		label1 model: cursor1 * 100.		label1 updateShape.		label2 model: cursor2 * 100.		label2 updateShape. ].	doubleSlider move: #below.	doubleSlider build.	composer group: doubleSlider.		composer layout: (RTVerticalLineLayout new gapSize: 25; center).	^ v</body></methods><methods><class-id>Roassal2.RTDoubleSlider</class-id> <category>obsolete</category><body package="Roassal2-Builder-UI-Slider">labelled	self deprecated: 'Please, use #labeled instead'.	self labeled</body></methods><methods><class-id>Roassal2.RTDoubleSlider</class-id> <category>public</category><body package="Roassal2-Builder-UI-Slider">build	| allElements res |	allElements := view elements.	res := super build.	TRConstraint move: sliderElements to: position and: allElements.	^ res</body></methods><methods><class-id>Roassal2.RTNFontLinearNormalizer</class-id> <category>accessing</category><body package="Roassal2-ColorNormalizerOBSOLETE">rtValue: anEntity	"Calculates the color of the entity based on the context."		| value |	value := self command rtValue: anEntity.	^5 + (38 * (value abs / (self maximumValue: anEntity))) asInteger</body></methods><methods><class-id>Roassal2.RTDateLayout</class-id> <category>accessing</category><body package="Roassal2-Builder-Calendar">gapSize	^ gapSize.</body><body package="Roassal2-Builder-Calendar">gapSize: aPoint	gapSize := aPoint.</body></methods><methods><class-id>Roassal2.RTDateLayout</class-id> <category>initialize-release</category><body package="Roassal2-Builder-Calendar">initialize	super initialize.	self gapSize: 3.</body></methods><methods><class-id>Roassal2.RTDateLayout</class-id> <category>hook</category><body package="Roassal2-Builder-Calendar">doExecute: elements	| extent index currentWeek i |	extent := elements inject: 0@0 into: [ :max :each | each extent max: max ].	extent := extent + self gapSize.	index := 0.	currentWeek := nil.	i := Week dayNames indexOf: Week startDay.	elements do: [ :e | | date position week |		date := e model.		(date isKindOf: Date) ifTrue: [ 			week := date asWeek.			currentWeek ifNil: [ currentWeek := week. index := index + 1. ].			currentWeek = week ifFalse: [ currentWeek := week. index := index +1 ].			position := (((date dayOfWeek + 7 - i) rem: 7)+1) @ index.		] ifFalse: [ 			(date isKindOf: Integer) 				ifTrue: [ position := date @ index. ] 				ifFalse: [ self error: 'invale value for date'. ] ].		e translateTo: (extent * position).		 ]</body></methods><methods><class-id>Roassal2.RTGradualDSM</class-id> <category>accessing</category><body package="Roassal2-Builder-DSM">score	^ score</body><body package="Roassal2-Builder-DSM">score: oneArgBlock	"The argument is a one arg block that takes an association as parameter.	The block has to return a numerical value. No predefined bounds is required"	score := oneArgBlock</body><body package="Roassal2-Builder-DSM">selectElement	 ^ selectElement</body><body package="Roassal2-Builder-DSM">selectElement: aBlock	selectElement := aBlock</body></methods><methods><class-id>Roassal2.RTGradualDSM</class-id> <category>initialization</category><body package="Roassal2-Builder-DSM">initialize	super initialize.	score := [ :association | 0 ].</body></methods><methods><class-id>Roassal2.RTGradualDSM</class-id> <category>hooks</category><body package="Roassal2-Builder-DSM">renderIn: aView	super renderIn: aView.			1 to: objectsX size do: [:j | 		RTMetricNormalizer new			elements: ((self columnAt: j) select: [:e | selectElement rtValue: e]);			normalizeColor: score using: (Array with: Color veryVeryLightGray with: (Color colorFrom: '#4d79ff') );			alphaColor: self transparencyWhenNonHighlighted.			].	^ aView</body></methods><methods><class-id>Roassal2.TRVIManualTimer</class-id> <category>accessing</category><body package="Roassal2-Trachel-Viva">value	^ value</body><body package="Roassal2-Trachel-Viva">value: aFloat	self assert: [ aFloat &gt;= 0.0 and: [ aFloat &lt;= 1.0 ] ] description: 'Must provide a value between 0 and 1'.	value := aFloat</body></methods><methods><class-id>Roassal2.TRVIManualTimer</class-id> <category>actions</category><body package="Roassal2-Trachel-Viva">incrementBy: aDelta	value := (value + aDelta) \\ 1</body></methods><methods><class-id>Roassal2.TRVIManualTimer</class-id> <category>initialization</category><body package="Roassal2-Trachel-Viva">initialize	super initialize.	value := 0.0</body></methods><methods><class-id>Roassal2.TRCamera</class-id> <category>actions</category><body package="Roassal2-Trachel-Core">adjust	"This method adjust the camera from the initializer. This method is called by RTView&gt;&gt;setUpCanvas, when opening the view"	initializer executeOn: self</body><body package="Roassal2-Trachel-Core">focusOnCenter	"Do nothing if no shape are present."	canvas numberOfShapes = 0		ifTrue: [ ^ self ].	"Need to get the center by ourselves since Rectangle&gt;&gt;center truncate the result."	"However convert to float point, because FFI down the line (AthensCairoMatrix&gt;&gt;translateX:Y:) cannot coerce Fraction. It could be converted there instead, but this is the only place I have ever encountered the problem in, so maybe don't do needless conversions all the time."	self		translateTo: (self encompassingRectangle in: [ :eR | (eR topLeft + eR bottomRight) / 2 ]) asFloatPoint</body><body package="Roassal2-Trachel-Core">focusOnCenterScaled	^ self focusOnCenterScaled: 500@500.</body><body package="Roassal2-Trachel-Core">focusOnCenterScaled: aFactor	| sc rec |	canvas numberOfShapes = 0 ifTrue: [ ^ self ].	rec := self encompassingRectangle.	self translateTo: rec center.	sc := aFactor / ((rec extent) max: 1 @ 1).	sc := (sc x &lt; sc y) ifTrue: [sc x] ifFalse: [ sc y ].	self scale: sc.	^ sc</body><body package="Roassal2-Trachel-Core">noInitializationWhenOpen	"The default behavior, is when a canvas is open, the camera is set at the center of all the elements."	self toAdjust: (TRCameraInitializer new block: [ :camera | ]).</body><body package="Roassal2-Trachel-Core">translateBy: aPoint	"Move the camera using a step"	position := position + aPoint.	self triggerCallbacksForStep: aPoint</body><body package="Roassal2-Trachel-Core">translateTo: newPosition	"Move the camera to a new position. Note that some callbacks may be triggered"	| step |	step := newPosition - position.	position := newPosition.	self triggerCallbacksForStep: step.</body></methods><methods><class-id>Roassal2.TRCamera</class-id> <category>utility</category><body package="Roassal2-Trachel-Core">encompassingRectangle	"Return the encompassing rectangle of all the elements contained in the canvas"	"Maybe a method encompassingRectangle has to be defined in TRCanvas?"	^ self encompassingRectangleOf: canvas shapes</body><body package="Roassal2-Trachel-Core">encompassingRectangleOf: shapes	^ shapes asGroup encompassingRectangle</body></methods><methods><class-id>Roassal2.TRCamera</class-id> <category>convertion</category><body package="Roassal2-Trachel-Core">distanceFromPixelToSpace: aPoint	^ (aPoint / self scale) asFloatPoint	"^ AthensAffineTransform new scaleBy: (1 / self scale) asFloat; translation: aPoint; transform: aPoint"</body><body package="Roassal2-Trachel-Core">fromPixelToSpace: aPoint	^ TRPlatform current affineTransformClass new		translateBy: self position;		scaleBy: 1 / self scale;		translateBy: (self canvas extent / 2) negated;		transform: aPoint</body><body package="Roassal2-Trachel-Core">fromPixelToSpaceForRectangle: aRectangle	"Return a new rectangle that corresponds to the projection of the argument (expressed in the space coordinate) into the pixels coordinate"	^ (self fromPixelToSpace: aRectangle topLeft) corner: (self fromPixelToSpace: aRectangle bottomRight)</body><body package="Roassal2-Trachel-Core">fromSpaceToPixel: aPoint	^ TRPlatform current affineTransformClass new		translateBy: self canvas extent / 2;		scaleBy: self scale;		translateBy: self position negated;		transform: aPoint</body><body package="Roassal2-Trachel-Core">fromSpaceToPixelForRectangle: aRectangle	^ (self fromSpaceToPixel: aRectangle topLeft) corner: (self fromSpaceToPixel: aRectangle bottomRight)</body></methods><methods><class-id>Roassal2.TRCamera</class-id> <category>testing visibility</category><body package="Roassal2-Trachel-Core">isVisible: aShape	"Return true if aShape is fully or partially visible. I.e., the encompassing bounds of aShape intersects of the of the canvas "	| rec ext |	rec := aShape encompassingRectangle.	rec := self fromSpaceToPixelForRectangle: rec.	ext := self canvas extent.	^ (0 @ 0 extent: ext) intersects: rec</body></methods><methods><class-id>Roassal2.TRCamera</class-id> <category>callbacks</category><body package="Roassal2-Trachel-Core">triggerCallbacksForScale: aScaleFactor	callbacks ifNil: [ ^ self ].	callbacks do: [ :c | 		c isCameraScaleCallback ifTrue: [ 			c scaleChanged: aScaleFactor ] ]</body></methods><methods><class-id>Roassal2.TRCamera</class-id> <category>accessing</category><body package="Roassal2-Trachel-Core">canvas	"Return the trachel canvas I am observing"	^ canvas</body><body package="Roassal2-Trachel-Core">canvas: aTrachelCanvas	"Set the canvas to observe"	canvas := aTrachelCanvas</body><body package="Roassal2-Trachel-Core">position	"Return the position of the camera, in the space coordinates"	^ position</body><body package="Roassal2-Trachel-Core">scale	"Return an integer corresponding to the scaling"	^ scale</body><body package="Roassal2-Trachel-Core">scale: aNewScaleAsInteger	scale := aNewScaleAsInteger.	self triggerCallbacksForScale: aNewScaleAsInteger</body><body package="Roassal2-Trachel-Core">toAdjust: aCameraInitializer	initializer := aCameraInitializer</body></methods><methods><class-id>Roassal2.TRCamera</class-id> <category>initialization</category><body package="Roassal2-Trachel-Core">defaultCameraScale	^ 1.0001</body><body package="Roassal2-Trachel-Core">initialize	super initialize.	position := 0 @ 0.	scale := self defaultCameraScale.	initializer := TRCameraInitializer focusOnCenter</body></methods><methods><class-id>Roassal2.TRCamera class</class-id> <category>public</category><body package="Roassal2-Trachel-Core">forCanvas: aTrachelCanvas	^ super new canvas: aTrachelCanvas</body><body package="Roassal2-Trachel-Core">new	self error: 'Instance of this class have to be created with #forCanvas:'</body><body package="Roassal2-Trachel-Core">null	nullCamera ifNil: [ nullCamera := self forCanvas: TRCanvas new ].	^ nullCamera</body></methods><methods><class-id>Roassal2.RTSVGBoxedTextPopup</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	self backgroundColor: self defaultBackgroundColor.	self borderColor: self defaultBorderColor.</body></methods><methods><class-id>Roassal2.RTSVGBoxedTextPopup</class-id> <category>configuration</category><body package="Roassal2-Exporter-SVG">defaultBackgroundColor	^ Color veryLightGray.</body><body package="Roassal2-Exporter-SVG">defaultBorderColor	^ Color black.</body></methods><methods><class-id>Roassal2.RTSVGBoxedTextPopup</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">backgroundColor	^ backgroundColor</body><body package="Roassal2-Exporter-SVG">backgroundColor: anObject	backgroundColor := anObject</body><body package="Roassal2-Exporter-SVG">borderColor	^ borderColor</body><body package="Roassal2-Exporter-SVG">borderColor: anObject	borderColor := anObject</body></methods><methods><class-id>Roassal2.RTSVGBoxedTextPopup</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addEventHandlers: aStream id: aString element: aRTElement center: aPoint	|rText xOverflow yOverflow x y rectangle converter|	rText := (self text value: aRTElement model) asString.	x := aPoint x.	y := aPoint y.	xOverflow := aPoint x - bounds width + ((TRPlatform current fontFamilyName: self font size: self fontSize)  widthOfString: rText).	yOverflow := aPoint y - bounds height + self fontSize.	xOverflow &gt;= 0 ifTrue: [ x:= x - xOverflow ].	yOverflow &gt;= 0 ifTrue: [ y:= y - yOverflow ].	rectangle := TRLabelShape new text: rText; encompassingRectangle.	converter := RTSVGStringConverter new.	aStream		nextPutAll: '&lt;g id="',aString,'pop" " visibility="hidden"&gt;';		nextPutAll: String cr,'&lt;rect x="',(x - (rectangle width/10)) asString,'" y="',(y - (3 *rectangle height / 4))  asString,'" width="',rectangle width asString,'" height="',rectangle height asString,'"  style="fill:',self backgroundColor asHTMLColor,'; stroke:',self borderColor asHTMLColor,';stroke-width:1"/&gt;';		nextPutAll: String cr,'&lt;text id="',aString,'pop" x="',x asString,'" y="',y asString,'" font-size="',self fontSize asString,'" style="fill:',self color asHTMLColor,'"&gt;&lt;tspan font-family = "',self font,'"&gt;',(converter convertString: rText),'&lt;/tspan&gt;&lt;/text&gt;';		nextPutAll: String cr, (self mouseAction: aString), '&lt;/g&gt;'</body></methods><methods><class-id>Roassal2.TRWhiteTheme</class-id> <category>accessing</category><body package="Roassal2-Trachel-Theme">trachelCanvasColor	^ Color white</body></methods><methods><class-id>Roassal2.TRWhiteTheme class</class-id> <category>accessing</category><body package="Roassal2-Trachel-Theme">default	"Return the default theme"	default ifNil: [ default := self new ].	^ default</body></methods><methods><class-id>Roassal2.RTPolyLineSegment</class-id> <category>accessing</category><body package="Roassal2-AttachPoint">absoluteBalanceFor: aNumber	| balance |	balance := aNumber.	balance &gt; 1		ifTrue: [ ^ self length min: balance ].	balance &lt; 0		ifTrue: [ ^ 0 max: self length - balance negated ].	^ self length * balance</body><body package="Roassal2-AttachPoint">first	^ self segments first</body><body package="Roassal2-AttachPoint">last	^ self segments last</body><body package="Roassal2-AttachPoint">length	^ self segments inject: 0 into: [ :sum :next | sum + next length ]</body><body package="Roassal2-AttachPoint">second	^ self segments second</body><body package="Roassal2-AttachPoint">segmentWithPointFor: aNumber	| sum newSum balance |	sum := 0.	balance := self absoluteBalanceFor: aNumber.	self segments		do:			[ :each | 			newSum := sum + each length.			(balance between: sum and: newSum)				ifTrue: [ 					^ Array with: each with:	(each pointForBalance: balance - sum) ].			sum := newSum ].	self error: 'failed to find a segment'</body><body package="Roassal2-AttachPoint">segments	^ segments</body><body package="Roassal2-AttachPoint">segments: aCollection	segments := aCollection</body></methods><methods><class-id>Roassal2.RTPolyLineSegment</class-id> <category>initialization</category><body package="Roassal2-AttachPoint">initialize	segments := #()</body></methods><methods><class-id>Roassal2.RTPolyLineSegment class</class-id> <category>instance creation</category><body package="Roassal2-AttachPoint">with: aSegment	^ self new		segments: (Array with: aSegment);		yourself</body><body package="Roassal2-AttachPoint">with: first with: second	^ self new		segments: (Array with: first with: second);		yourself</body><body package="Roassal2-AttachPoint">withAll: aCollection	^ self new		segments: aCollection;		yourself</body></methods><methods><class-id>Roassal2.TRExtensibleLabelShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">extent: newExtent	| oldExtent |	oldExtent := self extent.	(oldExtent = (0 @ 0)) ifTrue: [ ^ self ].	matrix scaleBy: newExtent / oldExtent.	self triggerCallbacksForNewExtent: newExtent oldExtent: oldExtent.</body></methods><methods><class-id>Roassal2.RTHighlightElementsInView</class-id> <category>testing</category><body package="Roassal2-Interactions">isNotTransparent	^ self transparency = 1.0</body></methods><methods><class-id>Roassal2.RTHighlightElementsInView</class-id> <category>initialization</category><body package="Roassal2-Interactions">askForPattern	^ TRPlatform current		dialogRequest:			'Enter a regular expression (leave empty to remove all previous selection)'		initialAnswer: '*aPattern*'</body><body package="Roassal2-Interactions">currentColor	| rawColor |	rawColor := self palette at: colorIndex + 1.	self isNotTransparent		ifTrue: [ ^ rawColor ].	^ rawColor alpha: self transparency</body><body package="Roassal2-Interactions">getColorIndex	^ view attributeAt: #RTHighlightElementsInView ifAbsentPut: [ 1 ]</body><body package="Roassal2-Interactions">getRelevantElementsFor: string	^ view elements select: [ :e | string match: e model printString ]</body><body package="Roassal2-Interactions">highlightElementsUsing: string	"Highlight some elements depending on the entered string.	String has to be a regular expression"	string ifEmpty: [ ^ self processEmptyString ].	(self getRelevantElementsFor: string)		do: [ :e | 			self rememberPreviousColorIfNecessaryFor: e.			e trachelShape color: self currentColor ].	self increaseColorIndex.	view signalUpdate</body><body package="Roassal2-Interactions">increaseColorIndex	colorIndex := colorIndex + 1 \\ self palette size</body><body package="Roassal2-Interactions">initialize	super initialize.	colorIndex := 0.	transparency := 1.0</body><body package="Roassal2-Interactions">initializeElement: aView	| string |	view := aView.	view		addMenu: 'Highlight'		callback: [ string := self askForPattern.			string ifNotNil:				[ self highlightElementsUsing: string ] ]</body><body package="Roassal2-Interactions">palette	^ Array with: Color blue with: Color green with: Color orange</body><body package="Roassal2-Interactions">processEmptyString	view attributeAt: #RTHighlightElementsInView ifAbsentPut: [ 1 ].	"Should remove the color previously set"	view elements		do: [ :e | 			(e hasAttribute: #prevousColorRTHighlightElementsInView)				ifTrue: [ e trachelShape						color: (e attributeAt: #prevousColorRTHighlightElementsInView).					e removeAttributeAt: #prevousColorRTHighlightElementsInView ] ].	^ self</body><body package="Roassal2-Interactions">rememberPreviousColorIfNecessaryFor: e	(e hasAttribute: #prevousColorRTHighlightElementsInView)		ifFalse: [ e				attributeAt: #prevousColorRTHighlightElementsInView				put: e trachelShape color ]</body></methods><methods><class-id>Roassal2.RTHighlightElementsInView</class-id> <category>accessing</category><body package="Roassal2-Interactions">transparency	^ transparency</body><body package="Roassal2-Interactions">transparency: aFloatBetweenZeroAndOne	"Transparency is useful in case objects are nested"	transparency := aFloatBetweenZeroAndOne</body></methods><methods><class-id>Roassal2.RTHighlightElementsInView</class-id> <category>configuration</category><body package="Roassal2-Interactions">transparent	transparency := 0.4</body></methods><methods><class-id>CairoGraphics.CairoContext</class-id> <category>transforming</category><body package="Roassal2-Extentions">multiplyBy: aMatrix	self matrix: (self matrix asAffineTransform multiplyBy: aMatrix) asMatrix</body><body package="Roassal2-Extentions">restoreAfter: aBlock	| previous |	previous := self matrix.	aBlock ensure: [		self matrix: previous ]</body><body package="Roassal2-Extentions">scaleBy: aValue	self scale: aValue</body><body package="Roassal2-Extentions">translateBy: aPoint"	| m |	m := self matrix.	self translateX: (m x0 + aPoint x) y: (m y0 + aPoint y)."	self translateX: aPoint x y: aPoint y</body></methods><methods><class-id>CairoGraphics.CairoContext</class-id> <category>paths</category><body package="Roassal2-Extentions">curveVia: a and: b to: c	self curveControl: a control: b end: c.</body><body package="Roassal2-Extentions"> curveVia: a to: b	self curveControl: a control: a end: b</body><body package="Roassal2-Extentions">curveViaX: x Y: y viaX: x1 Y: y1 toX: x2 Y: y2	self curveVia: x@y and: x1@y1 to: x2@y2</body></methods><methods><class-id>CairoGraphics.CairoContext</class-id> <category>stroking attributes</category><body package="Roassal2-Extentions">capButt	self lineCap: CapStyle butt.</body><body package="Roassal2-Extentions">capRound	self lineCap: CapStyle round.</body><body package="Roassal2-Extentions">capSquare	self lineCap: CapStyle square.</body></methods><methods><class-id>CairoGraphics.CairoContext</class-id> <category>accessing</category><body package="Roassal2-Extentions">pathTransform	^ self</body></methods><methods><class-id>CairoGraphics.CairoContext</class-id> <category>transforming-helpers</category><body package="Roassal2-Extentions">absolute	"TODO"</body><body package="Roassal2-Extentions">loadIdentity	^ self identityMatrix</body></methods><methods><class-id>CairoGraphics.CairoContext</class-id> <category>roassal2</category><body package="Roassal2-Extentions">cacheAt: key ifAbsentPut: block	cache ifNil: [ cache := Dictionary new].	^ cache at: key		ifAbsentPut: block</body><body package="Roassal2-Extentions">createPath: aBlock	self newPath.	aBlock value: self.	^ self copyPath.</body><body package="Roassal2-Extentions">draw	"Too ugly"	draw ifNil: [ ^ self fill ].	self perform: draw.	draw = #stroke ifTrue: [ prev := nil].	draw = #paint ifTrue: [		prev := nil.		self sourceRed: 0 green: 0 blue: 0 alpha: 0.		self fill ]</body><body package="Roassal2-Extentions">drawCommand: aByteString	draw := aByteString</body><body package="Roassal2-Extentions">drawShape: aShape	self setShape: aShape.	self draw.</body><body package="Roassal2-Extentions">drawString: aString	self moveTo: 0@0.	self showText: aString</body><body package="Roassal2-Extentions">rotateByDegrees: v	self rotateDegrees: v</body><body package="Roassal2-Extentions">setFont: aFont	self selectFontFace: aFont fontDescription familyName.	self fontSize: aFont rtHeight.</body><body package="Roassal2-Extentions">setPaint: aPaint	aPaint installPaintOn: self.</body><body package="Roassal2-Extentions">setShape: aShape	self appendPath: (aShape asCairoPathOn: self).	prev := aShape.</body><body package="Roassal2-Extentions">setStrokePaint: aPaint	self setPaint: aPaint.	prev ifNotNil: [self setShape: prev].	draw := #stroke</body><body package="Roassal2-Extentions">width: aNumber	self lineWidth: aNumber</body></methods><methods><class-id>Roassal2.RTBoxPlotDataSet</class-id> <category>min and max</category><body package="Roassal2-Builder-BoxPlot">computeMinAndMaxForX	minX := maxX := x rtValue: model.	(minX &lt; 0 and: [ maxX &lt; 0 ]) ifTrue: [ maxX := 0 ].	(minX &gt; 0 and: [ maxX &gt; 0 ]) ifTrue: [ minX := 0 ].</body></methods><methods><class-id>Roassal2.RTBoxPlotDataSet</class-id> <category>accessing</category><body package="Roassal2-Builder-BoxPlot">boxLineShape	^ boxLineShape</body><body package="Roassal2-Builder-BoxPlot">boxShape	^ boxShape</body><body package="Roassal2-Builder-BoxPlot">boxWidth	^ boxWidth</body><body package="Roassal2-Builder-BoxPlot">boxWidth: anObject	boxWidth := anObject</body><body package="Roassal2-Builder-BoxPlot">getValuesX	^ Array with: (x rtValue: model)</body><body package="Roassal2-Builder-BoxPlot">meanShape	^ meanShape</body><body package="Roassal2-Builder-BoxPlot">model: anObject	model := anObject.</body><body package="Roassal2-Builder-BoxPlot">outlierShape	^ outlierShape</body><body package="Roassal2-Builder-BoxPlot">showMean	 ^ showMean</body><body package="Roassal2-Builder-BoxPlot">showMean: aBool	showMean := aBool</body><body package="Roassal2-Builder-BoxPlot">xScale	^ RTLinearTransformation instance</body><body package="Roassal2-Builder-BoxPlot">yScale	^ RTLinearTransformation instance</body></methods><methods><class-id>Roassal2.RTBoxPlotDataSet</class-id> <category>hooks</category><body package="Roassal2-Builder-BoxPlot">renderBoxPlotIn: view item: item	| box normalizer e mx |	mx := x rtValue: model.	boxShape width: boxWidth.	box := boxShape elementOn: item.	view add: box.	normalizer := RTMetricNormalizer new.	normalizer elements: (Array with: box);		normalizeX: [:m | mx ]			min: 0			max: builder extent x			minValue: minX			maxValue: maxX;		normalizeY: [:m | m q3 + (m iqr negated / 2) ]			min: 0			max: builder extent y negated			minValue: minY			maxValue: maxY;		normalizeHeight: [ :m | m iqr negated ]			min: 0			max: builder extent y negated			minValue: minY			maxValue: maxY.		showMean ifFalse: [ ^ self ].	e := meanShape elementOn: item.	view add: e.		normalizer elements: (Array with: e );		normalizeX: [ :i | mx ]		min: 0		max: builder extent x		minValue: minX		maxValue: maxX;		normalizeY: [ :i | i mean ]		min: 0		max: builder extent y negated		minValue: minY		maxValue: maxY</body><body package="Roassal2-Builder-BoxPlot">renderBoxPlotLines: view item: item	|e1 e2 e3 e4 e5 b normalizer mx |	b := boxLineShape.	b height: 0.5; width: boxWidth.	mx := x rtValue: model.	e1 := b elementOn: item maxRegularValue.	e2 := b elementOn: item median.	e3 := b elementOn: item minRegularValue.	view add: e1; add: e2; add: e3.	b width: 0.5.	e4 := b elementOn: item.	e5 := b elementOn: item.	view add: e4; add: e5.		normalizer := RTMetricNormalizer new.	normalizer elements: (Array with: e1 with: e2 with: e3 with: e4 with: e5).	normalizer normalizeX: [ :m | mx ]		min: 0		max: builder extent x		minValue: minX		maxValue: maxX.			normalizer elements: (Array with: e1 with: e2 with: e3);		normalizeY: #yourself		min: 0		max: builder extent y negated		minValue: minY		maxValue: maxY.				normalizer elements: (Array with: e4);		normalizeY: [ :i | i maxRegularValue - ((i maxRegularValue - i q3)/2) ]		min: 0		max: builder extent y negated		minValue: minY		maxValue: maxY;		normalizeHeight: [ :i | (i maxRegularValue - i q3) negated ]		min: 0		max: builder extent y negated		minValue: minY		maxValue: maxY.			normalizer elements: (Array with: e5);		normalizeY: [ :i | i q1 - ((i q1 - i minRegularValue )/2) ]		min: 0		max: builder extent y negated		minValue: minY		maxValue: maxY;		normalizeHeight: [ :i | i minRegularValue - i q1 ]		min: 0		max: builder extent y negated		minValue: minY		maxValue: maxY.</body><body package="Roassal2-Builder-BoxPlot">renderDotsIn: view item: item	| elements |	elements := dotBuilder elementsOn: points.	builder view addAll: elements.	interaction setUpElements: elements.		RTMetricNormalizer new		elements: elements;		normalizeX: [ :m | x rtValue: model ]			min: 0 			max: builder extent x			minValue: minX			maxValue: maxX.	RTMetricNormalizer new		elements: elements;		normalizeY: [ :m | y rtValue: m ]			min: 0			max: builder extent y negated			minValue: minY			maxValue: maxY.				elementActions do: [ :act | act rtValue: elements ].	self renderLinesFor: elements in: view.</body><body package="Roassal2-Builder-BoxPlot">renderIn: view	|  item |		item := RTBoxPlotItem new.	item model: model;		values: self getValuesY.		self renderBoxPlotIn: view item: item.	self renderBoxPlotLines: view item: item.	self renderOutliersIn: view item: item.	self renderDotsIn: view item: item.</body><body package="Roassal2-Builder-BoxPlot">renderOutliersIn: view item: item	| mx elements normalizer |	mx := x rtValue: model.	normalizer := RTMetricNormalizer new.	elements := outlierShape elementsOn: item outliers.	view add: elements.	normalizer elements: elements;		normalizeX: [ :i | mx ]		min: 0		max: builder extent x		minValue: minX		maxValue: maxX;		normalizeY: #yourself		min: 0		max: builder extent y negated		minValue: minY		maxValue: maxY</body></methods><methods><class-id>Roassal2.RTBoxPlotDataSet</class-id> <category>initialization</category><body package="Roassal2-Builder-BoxPlot">initialize	super initialize.	self noDot.	self showMean: false.	self x: [ :m | m isNumber ifTrue: [ m ] ifFalse: [ builder datasets indexOf: self ] ].	boxWidth := [ builder extent x / (builder datasets size * 1.2) ].	boxShape := RTShapeBuilder new.	boxShape rectangle.	boxLineShape := RTShapeBuilder new.	boxLineShape rectangle color: Color black.	meanShape := RTShapeBuilder new.	meanShape circle size: [:e | (boxWidth rtValue: e)* 0.5]; color: Color black.	outlierShape := RTShapeBuilder new.	outlierShape circle; color: (Color black alpha: 0.5); size: [ :e | (boxWidth rtValue: e) * 0.5 ].</body></methods><methods><class-id>Roassal2.RTRangeSelector</class-id> <category>callback</category><body package="Roassal2-Builder-Grapher-Decorators">callbackWithSelectedElements	| selectedElements |	selectedElements := self elementsWithinTheSelection.	self evaluateCallBackWithElements: selectedElements</body><body package="Roassal2-Builder-Grapher-Decorators">evaluateCallBackWithElements: selectedElements	callback value: selectedElements</body></methods><methods><class-id>Roassal2.RTRangeSelector</class-id> <category>accessing - computed</category><body package="Roassal2-Builder-Grapher-Decorators">elementsWithinTheSelection	^ self elementsWithModel		select: [ :e | rectangle containsPoint: e position ]</body></methods><methods><class-id>Roassal2.RTRangeSelector</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Decorators">render	self view		when: TRMouseDragStart		do: [ :evt | 			| x |			x := evt positionFromCamera x.			pointWhenStartingDragging := x @ builder extent y negated.			rectangle := pointWhenStartingDragging corner: x @ 0.			visualRange := TRBoxShape new				fromRectangle: rectangle				color: Color blue trans.			self view canvas addShape: visualRange.			self signalUpdate ].	self view		when: TRMouseDragging		do: [ :evt | 			rectangle := Rectangle				encompassing:					(Array						with: pointWhenStartingDragging						with: evt positionFromCamera x @ 0).			visualRange fromRectangle: rectangle.			self signalUpdate ].	self view		when: TRMouseDragEnd		do: [ :evt | 			self callbackWithSelectedElements.			visualRange remove.			self signalUpdate ]</body></methods><methods><class-id>Roassal2.RTRangeSelector</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Decorators">callback	"Return the block used as a callback when elements are selected"	^ callback</body><body package="Roassal2-Builder-Grapher-Decorators">callback: aOneArgBlock	"The argument is evaluated with the selected Roassal elements"	callback := aOneArgBlock</body></methods><methods><class-id>Roassal2.RTRangeSelector</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Decorators">initialize	super initialize.	self callback: [ :listOfSelectedElements | "No nothing here" ]</body></methods><methods><class-id>Roassal2.RTClipBox</class-id> <category>hooks</category><body package="Roassal2-Experimental">trachelShapeClass	^ TRClipBoxShape</body></methods><methods><class-id>Roassal2.RTUMLClassBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-UML">attributesOf: object	^ self instanceVariables ifNil: [ #() ] ifNotNil: [ :m | m rtValue: object]</body><body package="Roassal2-Builder-UML">attributeselector	^ attributeselector</body><body package="Roassal2-Builder-UML">attributeselector: aSelector	attributeselector := aSelector.</body><body package="Roassal2-Builder-UML">classNameFor: obj	^ self classname rtValue: obj</body><body package="Roassal2-Builder-UML">classesGroup	^ classesGroup.</body><body package="Roassal2-Builder-UML">classname	^ classname</body><body package="Roassal2-Builder-UML">classname: aSelector	classname := aSelector</body><body package="Roassal2-Builder-UML">instanceVariables	^ instanceVariables</body><body package="Roassal2-Builder-UML">instanceVariables: aSelector	instanceVariables := aSelector</body><body package="Roassal2-Builder-UML">layout	layout ifNil: [ layout := RTHorizontalLineLayout new ].	^ layout</body><body package="Roassal2-Builder-UML">layout: aRTLayout	^ layout := aRTLayout</body><body package="Roassal2-Builder-UML">methodsForClass: obj	^ self methodsNames rtValue: obj</body><body package="Roassal2-Builder-UML">methodsNames	^ methodsNames</body><body package="Roassal2-Builder-UML">methodsNames: aSelector	methodsNames := aSelector</body><body package="Roassal2-Builder-UML">methodselector	^ methodselector.</body><body package="Roassal2-Builder-UML">methodselector: aSelector	methodselector := aSelector.</body><body package="Roassal2-Builder-UML">superclass	^ superclass</body><body package="Roassal2-Builder-UML">superclass: aSelector	superclass := aSelector</body></methods><methods><class-id>Roassal2.RTUMLClassBuilder</class-id> <category>examples</category><body package="Roassal2-Builder-UML">example1	"	self new example1	"	^ RTUMLClassBuilder new		addObjects: RTShape withAllSubclasses;		gridLayout;		yourself</body><body package="Roassal2-Builder-UML">example2	"	self new example2	"	^ RTUMLClassBuilder new		addObjects: RTShape withAllSubclasses;		treeLayout;		yourself</body><body package="Roassal2-Builder-UML">example3	"	self new example3	"	| objects|	objects := Array		with: (Array with: 'MyClass' with: (Array with: #iv1 with: #iv2) 			with: (Array with: #method1 with: #method2 with: #method3 ) )		with: (Array with: 'MyClass2' with: (Array with: #iv3 with: #iv4) 			with: (Array with: #method4 with: #method5 with: #method6 ) ).	^ RTUMLClassBuilder new		addObjects: objects;		classname: #first;		instanceVariables: #second;		methodsNames: #third;		methodselector: #yourself;		attributeselector: #yourself;		superclass: nil;		yourself</body><body package="Roassal2-Builder-UML">example4	"	self new example4	"	| b |	b := RTUMLClassBuilder new.	b methodShape label		if: [ :method | method selector beginsWith: 'init' ] color: Color green;		if: [ :method | method selector beginsWith: 'with' ] color: Color red.				b attributeShape label		if: [ :attribute | attribute beginsWith: 'a' ] color: Color blue.	b addObjects: RTShape withAllSubclasses.	b treeLayout.	^ b</body><body package="Roassal2-Builder-UML">example5	"	self new example5	"	| objects b |	objects := Array		with: (Array with: 'MyClass' with: (Array with: #iv1 with: #iv2) 			with: (Array with: #method1 with: #method2 with: #method3 ) )		with: (Array with: 'MyClass2' with: (Array with: #iv3 with: #iv4) 			with: (Array with: #method4 with: #method5 with: #method6 ) ).	b := RTUMLClassBuilder new.	b attributeShape label if: [ :a | a = #iv1 ] color: Color red.	b		addObjects: objects;		classname: #first;		instanceVariables: #second;		methodsNames: #third;		methodselector: #yourself;		attributeselector: #yourself;		superclass: nil.	^ b</body><body package="Roassal2-Builder-UML">example6WithColoredProtocols	"	self new example6WithColoredProtocols	"	| someClasses allMethodCategories b n |	someClasses := RTShape withAllSubclasses.	allMethodCategories := (someClasses flatCollect: #protocols) asSet asArray.	b := RTUMLClassBuilder new.	n := RTMultiLinearColorForIdentity new objects: allMethodCategories.	b methodShape label		color: [ :m | n rtValue: m protocol ].	b methodsNames: [ :cls | (cls rtmethods sortedAs: #protocol) ].	b addObjects: someClasses.	b treeLayout.	b view setDefaultMenu.	^ b</body></methods><methods><class-id>Roassal2.RTUMLClassBuilder</class-id> <category>public</category><body package="Roassal2-Builder-UML">addObject: object		classes add: object.</body><body package="Roassal2-Builder-UML">addObjects: objects	objects do: [ :obj | self addObject: obj ].</body><body package="Roassal2-Builder-UML">applyLayout	self layout layout on: classesGroup elements.</body><body package="Roassal2-Builder-UML">buildSchema: aView	| group box r label e1 e2  l h attributes methods line headerline midline clh |		classes do: [ :object | 		group := RTGroup new.		group add: (self classNameShape elementOn: object).		clh := group encompassingRectangle height.					label := self attributeShape shape.		(attributes := self attributesOf: object) do: [ :attribute |			| lab |			lab := label elementOn: attribute.			(lab notNil and: [ lab trachelShape text trimmed notEmpty ])				ifTrue: [ group add: lab ] ].		RTVerticalLineLayout new gapSize: 0; on: group.		r := group encompassingRectangle.		h := r height.				label := self methodShape shape.		(methods := self methodsForClass: object) do: [ :method | 			| lab | 			lab := label elementOn: method.			lab notNil				ifTrue: [ group add: lab ] ].			RTVerticalLineLayout new gapSize: 0; on: group.		r := group encompassingRectangle.		group first trachelShape 			translateTo: (r center x @ group first trachelShape center y).		box := self boxShape elementOn: object.				line := [ :p1 :p2 |			e1 := (RTBox new size: 0) elementOn: p1.			e2 := (RTBox new size: 0) elementOn: p2.			e1 trachelShape translateTo: p1.			e2 trachelShape translateTo: p2.			l := RTEdge on: object from: e1 to: e2.			l + (RTLine new color: box trachelShape strokePaint).			group add: e1; add: e2; add: l. ].		headerline := [ line value: (r left@ clh) value: (r right@ clh)  ].		midline := [ line value: (r left@h) value: (r right@h)  ].		attributes isEmpty 			ifTrue: [ 				methods isEmpty ifTrue: [  ]					ifFalse: [ headerline value. ] ]			ifFalse: [  				headerline value.				methods isEmpty ifTrue: [  ]					ifFalse: [ midline value ]  ].				RTNest new on: box nest: group.			self interaction setUpElement: box.		classesGroup add: box.		aView add: box.		aView addAll: group.	].</body><body package="Roassal2-Builder-UML">createView	^ super createView @ RTDraggableView</body></methods><methods><class-id>Roassal2.RTUMLClassBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-UML">initialize	super initialize.	classesGroup := RTGroup new.	classes := OrderedCollection new.	self forPharoClasses.	self initializeLayout.	self initializeShapeBuilder.	(self classNameShape: RTShapeBuilder new) label		height: self fontSizeOfClassname;		text: [ :c | self classNameFor: c ].	self methodShape: RTShapeBuilder new.	self attributeShape: RTShapeBuilder new.	(self boxShape: RTShapeBuilder new) box		color: Color white;		borderColor: Color gray.	self interaction draggable.	self prepare: self methodShape selector: #methodselector.	self prepare: self attributeShape selector: #attributeselector.</body><body package="Roassal2-Builder-UML">initializeLayout	self layout: RTLayoutBuilder new</body><body package="Roassal2-Builder-UML">initializeShapeBuilder	(self lineShape: RTShapeBuilder new) orthoVerticalLine</body></methods><methods><class-id>Roassal2.RTUMLClassBuilder</class-id> <category>public - configuration</category><body package="Roassal2-Builder-UML">forPharoClasses	self classname: #name.	self instanceVariables: #instVarNames.	self methodsNames: #rtmethods.	self superclass: #superclass.	self methodselector: #selector.	self attributeselector: #yourself</body><body package="Roassal2-Builder-UML">forSelfMadeClasses	self classname: #yourself.	self instanceVariables: ''.	self methodsNames: #().	self superclass: nil.	self methodselector: ''.	self attributeselector: ''</body></methods><methods><class-id>Roassal2.RTUMLClassBuilder</class-id> <category>private</category><body package="Roassal2-Builder-UML">fontSizeOfClassname	^ 12</body><body package="Roassal2-Builder-UML">fontSizeOfMembers	^ 10</body><body package="Roassal2-Builder-UML">prepare: builder selector: selector	builder shape class = RTNoShape ifTrue: [ 		builder label height: self fontSizeOfMembers ].	builder text: [ :obj | (self perform: selector) rtValue: obj ].</body></methods><methods><class-id>Roassal2.RTUMLClassBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-UML">renderIn: aView	self buildSchema: aView.	self buildEdges.	self applyLayout.</body></methods><methods><class-id>Roassal2.RTUMLClassBuilder</class-id> <category>shapes</category><body package="Roassal2-Builder-UML">attributeShape	^ attributeShape</body><body package="Roassal2-Builder-UML">attributeShape: aUMLShapeBuilder	^ attributeShape := aUMLShapeBuilder</body><body package="Roassal2-Builder-UML">boxShape	^ boxShape</body><body package="Roassal2-Builder-UML">boxShape: aShapeBuilder	^ boxShape := aShapeBuilder.</body><body package="Roassal2-Builder-UML">classNameShape	^ classNameShape</body><body package="Roassal2-Builder-UML">classNameShape: aUMLShapeBuilder	^ classNameShape := aUMLShapeBuilder</body><body package="Roassal2-Builder-UML">methodShape	^ methodShape</body><body package="Roassal2-Builder-UML">methodShape: aUMLShapeBuilder	^ methodShape := aUMLShapeBuilder</body></methods><methods><class-id>Roassal2.RTUMLClassBuilder</class-id> <category>edges</category><body package="Roassal2-Builder-UML">buildEdges	| bool eb |	bool := lineShape shape attachPoint isInverted.	lineShape verticalAttachPoint.	lineShape shape attachPoint inverted: bool.	eb := RTEdgeBuilder new.	eb view: view.	eb objects: classes.	eb shape shape: lineShape shape.	eb connectFrom: self superclass.	"eb connectFrom: self superclass to: #yourself."		eb := RTEdgeBuilder new.	eb view: view.	eb elements: view elements.		self edges do: [ :asso |		eb shape shape: asso key.		asso value value: eb.		 ].</body><body package="Roassal2-Builder-UML">edges	edgeActions ifNil: [ edgeActions := OrderedCollection new ].	^ edgeActions.</body><body package="Roassal2-Builder-UML">edgesDo: aBlock	| s |	s := self shape current copy.	self edges add: s-&gt;aBlock.</body><body package="Roassal2-Builder-UML">lineShape	^ lineShape</body><body package="Roassal2-Builder-UML">lineShape: aShapeBuilder	^ lineShape := aShapeBuilder</body></methods><methods><class-id>Roassal2.RTUMLClassBuilder</class-id> <category>layouts</category><body package="Roassal2-Builder-UML">gridLayout	^ self layout grid</body><body package="Roassal2-Builder-UML">treeLayout	^ self layout tree</body></methods><methods><class-id>Roassal2.TRBitmapShape</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">basicEncompassingRectangle	rectangle ifNil: [ self computeRectangle ].	^ rectangle</body><body package="Roassal2-Trachel-Shapes">computeRectangle	form 		ifNil: [ rectangle := (-2.5 @ -2.5) corner: (2.5 @ 2.5) ]		ifNotNil: [ rectangle := form boundingBox translateBy: form boundingBox center negated ].</body></methods><methods><class-id>Roassal2.TRBitmapShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">at: aPosition put: aColor	self form getCanvas fillRectangle: (aPosition extent: 1 @ 1) color: aColor</body><body package="Roassal2-Trachel-Shapes">center	^ self position</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	^ self transformedEncompassingRectangle</body><body package="Roassal2-Trachel-Shapes">extent	^ self width @ self height</body><body package="Roassal2-Trachel-Shapes">fillColor: aColor	self form getCanvas fillRectangle: (0 @ 0 extent: self encompassingRectangle extent) color: aColor</body><body package="Roassal2-Trachel-Shapes">fillColorMap: aColorMap	self form getCanvas fillRectangle: (0 @ 0 extent: self extent) color: aColorMap</body><body package="Roassal2-Trachel-Shapes">form	^ form</body><body package="Roassal2-Trachel-Shapes">form: aForm	form := aForm</body><body package="Roassal2-Trachel-Shapes">height	^ super height</body><body package="Roassal2-Trachel-Shapes">width	^ super width</body></methods><methods><class-id>Roassal2.TRBitmapShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint	| invertedPoint |	invertedPoint := matrix inverseTransform: aPoint.	^ self basicEncompassingRectangle containsPoint: invertedPoint.</body></methods><methods><class-id>Roassal2.TRBitmapShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	| paint |	athensCanvas pathTransform restoreAfter: [		athensCanvas setShape: self form boundingBox.		athensCanvas pathTransform 			multiplyBy: matrix asFloatTransform;			translateBy: self basicEncompassingRectangle corner negated.		self form ifNotNil: [ 			 paint := (athensCanvas cacheAt: self form                             	ifAbsentPut: [ (self form asAthensPaintOn: athensCanvas) ]).			athensCanvas setPaint: paint.			].		athensCanvas draw ].</body></methods><methods><class-id>Roassal2.TRBitmapShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitBitMapShape: self</body></methods><methods><class-id>Roassal2.TRBitmapShape</class-id> <category>mode constants</category><body package="Roassal2-Trachel-Shapes">erase	self fillColor: Color white</body></methods><methods><class-id>Roassal2.TRBitmapShape</class-id> <category>actions</category><body package="Roassal2-Trachel-Shapes">extent: anExtent	form := TRPlatform current formClass extent: anExtent depth: 32.</body></methods><methods><class-id>Roassal2.RTActiveAnimation</class-id> <category>refreshing</category><body package="Roassal2-Animation">refresh 	(Time now asMilliSeconds - lastRefresh asMilliSeconds) &gt; intervalInMilliseconds		ifTrue: [ blockToExecute value. lastRefresh := Time now. ].	view ifNotNil: [ view canvas signalUpdate ].</body></methods><methods><class-id>Roassal2.RTActiveAnimation</class-id> <category>accessing</category><body package="Roassal2-Animation">blockToExecute	^ blockToExecute</body><body package="Roassal2-Animation">blockToExecute: anObject	blockToExecute := anObject</body><body package="Roassal2-Animation">intervalInMilliseconds	^ intervalInMilliseconds</body><body package="Roassal2-Animation">intervalInMilliseconds: numberOfMillisecondsToWaitBeforeRefresh	"Set the number of milliseconds to wait for a refresh"	intervalInMilliseconds := numberOfMillisecondsToWaitBeforeRefresh</body></methods><methods><class-id>Roassal2.RTActiveAnimation</class-id> <category>public</category><body package="Roassal2-Animation">inView: aView	view := aView.	super inView: aView</body></methods><methods><class-id>Roassal2.RTActiveAnimation</class-id> <category>initialization</category><body package="Roassal2-Animation">initialize	super initialize.	blockToExecute := [  ].	intervalInMilliseconds := 5.	lastRefresh := Time now</body></methods><methods><class-id>Roassal2.RTActiveAnimation</class-id> <category>actions</category><body package="Roassal2-Animation">start	view canvas signalUpdate</body></methods><methods><class-id>Roassal2.RTActiveAnimation</class-id> <category>testing</category><body package="Roassal2-Animation">hasCompleted	^ false</body></methods><methods><class-id>Roassal2.Week</class-id> <category>accessing</category><body package="Roassal2-Pharo">index	^ self asMonth dayOfWeek + self dayOfMonth - 2  // 7 + 1</body></methods><methods><class-id>Roassal2.Week</class-id> <category>conversion</category><body package="Roassal2-Pharo">asWeek	^ self</body></methods><methods><class-id>Roassal2.Week</class-id> <category>printing</category><body package="Roassal2-Pharo">printOn: aStream	aStream nextPutAll: 'a Week starting: '.	self start printOn: aStream.</body></methods><methods><class-id>Roassal2.Week class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">starting: aDateAndTime duration: aDuration	"Override - the duration is always one week.	 Week will start from the Week class&gt;&gt;startDay"	| midnight delta adjusted |	midnight := aDateAndTime asDateAndTime midnight.	delta := ((midnight dayOfWeek + 7 - (self dayNames indexOf: self startDay)) rem: 7) abs.	adjusted := midnight - (Duration days: delta seconds: 0).	^ super		starting: adjusted		duration: (Duration weeks: 1).</body><body package="Roassal2-Pharo">week: weekNumber	"Return a week in this year"	^ self year: Year current week: weekNumber</body><body package="Roassal2-Pharo">year: aYear week: weekNumber	"Return the ISO week for the given week number and the given year.	Week 1 contains the year's first Thursday (weekday = 5)"	^ self starting: aYear asYear firstThursday + (weekNumber * 7 - 5"adjust for firstThursday") days</body></methods><methods><class-id>Roassal2.Week class</class-id> <category>accessing</category><body package="Roassal2-Pharo">dayNames	^ DayNames ifNil: [		DayNames := DayNames := #(Sunday Monday Tuesday Wednesday Thursday Friday Saturday). ]</body><body package="Roassal2-Pharo">indexOfDay: aSymbol	^ DayNames indexOf: aSymbol</body><body package="Roassal2-Pharo">nameOfDay: anIndex	^ DayNames at: anIndex</body><body package="Roassal2-Pharo">startDay	^ StartDay ifNil: [ StartDay := DayNames first ]</body><body package="Roassal2-Pharo">startDay: aSymbol	(DayNames includes: aSymbol)		ifTrue: [ StartDay := aSymbol ]		ifFalse: [ self error: aSymbol, ' is not a recognised day name' ]</body></methods><methods><class-id>Roassal2.RTOrderedCollection</class-id> <category>callbacks</category><body package="Roassal2-Utility">updateView		viewToUpdate ifNotNil: [ viewToUpdate signalUpdate ]</body><body package="Roassal2-Utility">whenAddingDo: aOneArgBlock	addCallback := aOneArgBlock</body></methods><methods><class-id>Roassal2.RTOrderedCollection</class-id> <category>adding</category><body package="Roassal2-Utility">addAllLast: aCollection 	"Add each element of aCollection at the end of the receiver. 	Answer aCollection."	| es |	aCollection do: [:each | super addLast: each].	aCollection do: [ :obj | addCallback rtValue: obj ].		es := self shape elementsOn: aCollection.	self interaction setUpElements: es.	self layout setUpElements: es.	viewToUpdate addAll: es.	self updateView.	^ aCollection</body><body package="Roassal2-Utility">addLast: object	| r |	r := super addLast: object.	addCallback rtValue: object.	^ r</body></methods><methods><class-id>Roassal2.RTOrderedCollection</class-id> <category>accessing</category><body package="Roassal2-Utility">at: index put: object	| r |	r := super at: index put: object.	addCallback rtValue: object.	^ r</body><body package="Roassal2-Utility">interaction	interactionBuilder ifNil: [ interactionBuilder := RTInteractionBuilder new ].	^ interactionBuilder</body><body package="Roassal2-Utility">layout	layoutBuilder ifNil: [ layoutBuilder := RTLayoutBuilder new ].	^ layoutBuilder</body><body package="Roassal2-Utility">shape	shapeBuilder ifNil: [ shapeBuilder := RTShapeBuilder new ].	^ shapeBuilder</body><body package="Roassal2-Utility">viewToUpdate	^ viewToUpdate</body><body package="Roassal2-Utility">viewToUpdate: anObject	viewToUpdate := anObject</body></methods><methods><class-id>Roassal2.RTOrderedCollection</class-id> <category>copying</category><body package="Roassal2-Extentions">copyEmpty: aSize	| inst |	inst := self class new: aSize.	inst viewToUpdate: viewToUpdate.	^ inst.</body></methods><methods><class-id>Roassal2.RTOrderedCollection class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">new	^ super new initialize</body></methods><methods><class-id>Roassal2.RTPieBuilder</class-id> <category>obsolete</category><body package="Roassal2-Builder-PieChart">labeled: aBlockLabel	"Make each pie having a label that respect the aBlockLabel"		self labeledIf: true withBlock: aBlockLabel</body><body package="Roassal2-Builder-PieChart">labelled	"Make each pie having a label"	self deprecated: 'Please, use #labeled instead'.	self labeled</body><body package="Roassal2-Builder-PieChart">labelled: aBlockLabel	"Make each pie having a label that respect the aBlockLabel"	self deprecated: 'Please, use #labeled: instead'.	self labeledIf: true withBlock: aBlockLabel</body><body package="Roassal2-Builder-PieChart">labelledIf: aBlock	self deprecated: 'Please, use #labeledIf: instead'.	self labeledIf: aBlock</body><body package="Roassal2-Builder-PieChart">labelledIf: aBlock withBlock: aBlockLabel	self deprecated: 'Please, use #labeledIf:withBlock: instead'.	self labeledIf: aBlock withBlock: aBlockLabel</body></methods><methods><class-id>Roassal2.RTPieBuilder</class-id> <category>public - pies</category><body package="Roassal2-Builder-PieChart">emphasize: object by: anIntegerOrASymbolOrABlock	"public method"	"Move the pie to a given offset"	"anIntegerOrASymbolOrABlock is the distance for which object has to be moved away"	| element trachelShape delta v |	element := elements elementFromModel: object.	trachelShape := element trachelShape.		v := (anIntegerOrASymbolOrABlock rtValue: object).	delta := (trachelShape position + (v @ 0)) 						rotateBy: ((trachelShape betaAngle - trachelShape alphaAngle) / 2 + trachelShape alphaAngle) * 3.1415 / 180						about: trachelShape position.	trachelShape translateTo: delta.</body><body package="Roassal2-Builder-PieChart">objects: someObjects	objects := someObjects</body><body package="Roassal2-Builder-PieChart">slice: aBlockOrASymbol	values := objects collect: aBlockOrASymbol.	sum := values sum.	elements := self elementsOn: objects.	view addAll: elements.	^ elements</body></methods><methods><class-id>Roassal2.RTPieBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-PieChart">initialize	super initialize.	objects := #().	self initializeShapeBuilder</body><body package="Roassal2-Builder-PieChart">initializeShapeBuilder	self shape arc  		outerAngle: [ :object | self outerAngleOf: object ]			innerAngle: [ :object | self innerAngleOf: object ];		innerRadius: 0;		externalRadius: 90;		color: RTNIdentityNormalizer new</body></methods><methods><class-id>Roassal2.RTPieBuilder</class-id> <category>private - utility</category><body package="Roassal2-Builder-PieChart">innerAngleOf: object	^ (self ratioOf: object) * 360</body><body package="Roassal2-Builder-PieChart">label: aBlock withObject: anObject	"Private method"	| element trachelShape labelPosition lbl off |	element := elements elementFromModel: anObject.	trachelShape := element trachelShape.		off := (trachelShape class == TRArcShape) 				ifTrue: [ trachelShape externalRadius + 30 ] 				ifFalse: [ 0 ].	labelPosition := (trachelShape position + (off @ 0)) 						rotateBy: ((trachelShape betaAngle - trachelShape alphaAngle) / 2 + trachelShape alphaAngle) * 3.1415 / 180						about: trachelShape position.	lbl := RTLabel elementOn: (aBlock rtValue: anObject) asString.	view add: lbl.	"view canvas addShape: lbl."	lbl trachelShape translateTo: labelPosition</body><body package="Roassal2-Builder-PieChart">outerAngleOf: object	^ ((values copyFrom: 1 to: (objects indexOf: object) - 1), (Array with: 0)) sum * 360.0 / sum</body><body package="Roassal2-Builder-PieChart">ratioOf: anObject	| i |	i := objects indexOf: anObject.	i isZero ifTrue: [ ^ 0 ].	^ (values at: i) / sum</body></methods><methods><class-id>Roassal2.RTPieBuilder</class-id> <category>public - shapes</category><body package="Roassal2-Builder-PieChart">emphasizeBy: anIntegerOrASymbolOrABlock	"anIntegerOrASymbolOrABlock is the distance for which object has to be moved away"	objects do: [ :object |		self emphasize: object by: anIntegerOrASymbolOrABlock ]</body><body package="Roassal2-Builder-PieChart">labeled	"Make each pie having a label"	self labeledIf: true</body><body package="Roassal2-Builder-PieChart">labeledIf: aBlock	self labeledIf: aBlock withBlock: [ :o | o ]</body><body package="Roassal2-Builder-PieChart">labeledIf: aBlock withBlock: aBlockLabel	objects do: [ :object |		(aBlock rtValue: object) ifTrue: [ self label: aBlockLabel withObject: object ] ]</body></methods><methods><class-id>Roassal2.RTMonthLayout</class-id> <category>hook</category><body package="Roassal2-Builder-Calendar">doExecute: elements	| prevWeek index first cellSize |	first := elements first.	prevWeek := first model weeks last.	cellSize := first height / first model weeks size.	index := 0.	elements first translateTo: 0 @ 0.	elements allButFirstDo: [ :e | | month |		month := e model.		(prevWeek = month weeks first) ifTrue: [ index := index - 1 ].		(month previous weeks size - month weeks size) odd ifTrue: [  			month previous weeks size odd ifTrue: [ index := index - 0.5 ].			month weeks size even ifTrue: [ index := index + 0.5 ] ].		index := index + month previous weeks size.		prevWeek := month weeks last.		e translateTo: 0@ ((index * cellSize)).				 ].</body></methods><methods><class-id>Roassal2.RTMonthLayout</class-id> <category>accessing</category><body package="Roassal2-Builder-Calendar">gapSize	^ gapSize</body><body package="Roassal2-Builder-Calendar">gapSize: anObject	gapSize := anObject</body></methods><methods><class-id>Roassal2.RTMonthLayout</class-id> <category>initialize-release</category><body package="Roassal2-Builder-Calendar">initialize	super initialize.	self gapSize: 1</body></methods><methods><class-id>Roassal2.RTElement</class-id> <category>accessing</category><body package="Roassal2-Core">addCallback: aCallback	self trachelShape addCallback: aCallback</body><body package="Roassal2-Core">center	^ self position</body><body package="Roassal2-Core">connectedEdges	"Return the list of connected egdes (i.e., incoming and outgoing edges)"	connectedEdges ifNil: [ connectedEdges := RTGroup new ].	^ connectedEdges</body><body package="Roassal2-Core">encompassingRectangle	"Return the encompassing rectangle of the element"	^ trachelShape encompassingRectangle</body><body package="Roassal2-Core">extent	"Returns a point, describing the extent of the encompassing rectangle of myself"	^ self encompassingRectangle extent</body><body package="Roassal2-Core">extent: aPoint	trachelShape extent: aPoint.	self updateConnectedEdges</body><body package="Roassal2-Core">geometry	"Return a geometric representation of the shape. A geometric representation is used for computing intersections, overlapping, etc."	^ self shape geometryFor: self</body><body package="Roassal2-Core">height	^ trachelShape height</body><body package="Roassal2-Core">height: aValue	^ trachelShape height: aValue</body><body package="Roassal2-Core">incomingEdges	"Return the list of incoming edges from the node"	connectedEdges ifNil: [ ^ #() ].	^ self connectedEdges select: [ :e | e to == self ]</body><body package="Roassal2-Core">nestedElements	"Return the list of elements that I may nest. Return an empty array if none"	^ (self hasAttribute: #nestedElements)		ifTrue: [ self attributeAt: #nestedElements ]		ifFalse: [ #() ]</body><body package="Roassal2-Core">outgoingEdges	"Return the list of outgoing edges from the node"	connectedEdges ifNil: [ ^ #() ].	^ self connectedEdges select: [ :e | e from == self ]</body><body package="Roassal2-Core">parentElement	"Return the parent element that contains me. Return nil if none.	This attribute is set by RTNest"	^ (self hasAttribute: #parentElement)		ifTrue: [ self attributeAt: #parentElement ]		ifFalse: [ nil ]</body><body package="Roassal2-Core">parentElement: anElement	"Keep a reference to the parent element"	self attributeAt: #parentElement put: anElement</body><body package="Roassal2-Core">position	^ trachelShape position</body><body package="Roassal2-Core">unbindNestedElements	"Unlink the nested elements to myself"	self removeAttributeAt: #nestedElements ifAbsent: [  ]</body><body package="Roassal2-Core">width	"Return the width of an element"	^ trachelShape width</body><body package="Roassal2-Core">width: aValue	^ trachelShape width: aValue</body></methods><methods><class-id>Roassal2.RTElement</class-id> <category>configuration</category><body package="Roassal2-Core">updateEdgesOFF	shouldUpdateEdges := false</body><body package="Roassal2-Core">updateEdgesON	shouldUpdateEdges := true</body></methods><methods><class-id>Roassal2.RTElement</class-id> <category>actions</category><body package="Roassal2-Core">remove	"Remove the element from the view. Edges that may be connected are also removed"	view ifNil: [ self error: 'cannot remove an element that is not part of a view' ].	view removeElement: self.	self removeConnectedEdges.	view := nil</body><body package="Roassal2-Core">removeWithItsConnectedEdges	view ifNil: [ self error: 'cannot remove an element that is not part of a view' ].	self connectedEdges copy do: [ :anEdge | anEdge view ifNotNil: [ anEdge remove ] ].	view removeElement: self.	view := nil</body><body package="Roassal2-Core">removeWithNestedElements	"Remove the element from the view. Edges that may be connected are also removed"	self nestedElements do: #remove.	self remove.</body><body package="Roassal2-Core">rotateByDegrees: degree	"Translate the element to a new position. If I am connected to some edges, the edges are also updated."	trachelShape rotateByDegrees: (degree rtValue: self model).		"No idea what to do with that"	"self updateConnectedEdges"</body><body package="Roassal2-Core">translateBy: delta	"Translate the element by an incremental step. If I am connected to some edges, the edges are also updated."	"self translateTo: self position + delta"	trachelShape translateBy: delta.	self updateConnectedEdges</body><body package="Roassal2-Core">translateTo: newPosition	"Translate the element to a new position. If I am connected to some edges, the edges are also updated."	trachelShape translateTo: newPosition.	self updateConnectedEdges</body><body package="Roassal2-Core">updateConnectedEdges	shouldUpdateEdges ifFalse: [ ^ self ].	self connectedEdges do: [ :edge | edge update ]</body></methods><methods><class-id>Roassal2.RTElement</class-id> <category>*Roassal2GT-Spotter</category><body package="Roassal2-Core">interestingToHave"From Andrei Chis:spotterPreviewIn: aComposite	&lt;spotterPreview: 10&gt;	RTBlink unhighlightElements: self view elements.	RTBlink highlight: self.	aComposite addBrickBack: self view setUpCanvas buildMorph"</body><body package="Roassal2-Core">spotterActDefault	"This method define the action when an element is selected in the spotter window"	self view canvas camera translateTo: self position.	RTBlink on: self.</body></methods><methods><class-id>Roassal2.RTElement</class-id> <category>initialization</category><body package="Roassal2-Core">addConnectedEdge: anEdge	[ anEdge class == RTEdge ] assert.	(self connectedEdges includes: anEdge) 		ifFalse: [ self connectedEdges add: anEdge ]</body><body package="Roassal2-Core">initialize	super initialize.	self updateEdgesON</body><body package="Roassal2-Core">removeConnectedEdge: anEdge	[  anEdge class == RTEdge ] assert.	self connectedEdges remove: anEdge ifAbsent: [ "Some RTDowserBuilderTest tests failed." ]</body><body package="Roassal2-Core">removeConnectedEdges	"Remove all the edges connected (incoming and outgoing)."	self connectedEdges copy do: [ :edge | edge remove ]</body></methods><methods><class-id>Roassal2.RTElement</class-id> <category>testing</category><body package="Roassal2-Core">isConnected	"Return true if the element is connected to at least one element (which would be itself)"	"An element is connected if it has at least one incoming or outgoing edge"	^ self connectedEdges notEmpty</body><body package="Roassal2-Core">isConnectedTo: anElement	"Return true if the current element is connected to anElement"	connectedEdges ifNil: [ ^ false ].	^ connectedEdges anySatisfy: [ :edge | (edge from == anElement) or: [ edge to == anElement ] ]</body><body package="Roassal2-Core">isDirectlyConnectedTo: anElement	connectedEdges ifNil: [ ^ false ].	^ connectedEdges anySatisfy: [ :edge | edge to == anElement ]</body><body package="Roassal2-Core">isElement	^ true</body><body package="Roassal2-Core">isNotConnected	"Return false if the element is connected to at least one element (which would be itself)"	"An element is connected if it has at least one incoming or outgoing edge"	^ self isConnected not</body><body package="Roassal2-Core">shouldUpdateEdges	^ shouldUpdateEdges</body></methods><methods><class-id>Roassal2.RTElement</class-id> <category>adding</category><body package="Roassal2-Core">addedIn: aView	view := aView.	view addElement: self</body></methods><methods><class-id>Roassal2.RTElement</class-id> <category>visitor</category><body package="Roassal2-Core">accept: aVisitor	aVisitor visitElement: self</body></methods><methods><class-id>Roassal2.RTElement class</class-id> <category>public</category><body package="Roassal2-Core">forCollection: aCollection 	^ (aCollection collect: [ :v | self on: v ]) asArray</body><body package="Roassal2-Core">on: anObject	^ self new model: anObject; yourself</body></methods><methods><class-id>Roassal2.RTAbstractMultiElement</class-id> <category>adding</category><body package="Roassal2-Core">add: anElement	ownedElements add: anElement</body><body package="Roassal2-Core">addAll: someElements	ownedElements addAll: someElements</body><body package="Roassal2-Core">addFirst: anElement	ownedElements addFirst: anElement</body><body package="Roassal2-Core">addShape: aRTShape	"I don't support multiple base elements"	self shouldNotImplement</body><body package="Roassal2-Core">addedIn: aView	super addedIn: aView.	ownedElements do: [ :c | c addedIn: aView ]</body></methods><methods><class-id>Roassal2.RTAbstractMultiElement</class-id> <category>creating - subelements</category><body package="Roassal2-Core">createOwnedElements	"subElements are optional"</body></methods><methods><class-id>Roassal2.RTAbstractMultiElement</class-id> <category>updating</category><body package="Roassal2-Core">show: anElement if: aConditionBlock	(anElement view isNil and: aConditionBlock)		ifTrue: [ ownedElements add: anElement.			self view add: anElement ].	(anElement view isNotNil and: [ aConditionBlock value not ])		ifTrue: [ ownedElements remove: anElement.			anElement remove ]</body><body package="Roassal2-Core">update	ownedElements do: #update.	super update.	self signalUpdate</body></methods><methods><class-id>Roassal2.RTAbstractMultiElement</class-id> <category>actions</category><body package="Roassal2-Core">remove	super remove.	ownedElements do: #remove</body></methods><methods><class-id>Roassal2.RTAbstractMultiElement</class-id> <category>accessing</category><body package="Roassal2-Core">baseShape	^ self subclassResponsibility</body><body package="Roassal2-Core">ownedElements	^ ownedElements</body></methods><methods><class-id>Roassal2.RTAbstractMultiElement</class-id> <category>initialization</category><body package="Roassal2-Core">initialize	super initialize.	ownedElements := RTGroup new.	shape := self baseShape.	trachelShape := shape trachelShapeFor: self.	self createOwnedElements</body></methods><methods><class-id>Roassal2.RTAbstractMultiElement</class-id> <category>rendering</category><body package="Roassal2-Core">addInteractions	"no interactions by default"</body><body package="Roassal2-Core">renderOn: trachelCanvas	super renderOn: trachelCanvas.	ownedElements		do: [ :c | 			c				update;				renderOn: trachelCanvas ].	self addInteractions.	self update.	self trachelShape triggerCallbacksForStep: 0 @ 0</body></methods><methods><class-id>Roassal2.TRFocusTopLeft</class-id> <category>hooks</category><body package="Roassal2-Trachel-Core">on: canvas	| encompassingRectangle |	encompassingRectangle := self encompassingRectangleOf: canvas shapes.	canvas camera translateTo: encompassingRectangle topLeft</body></methods><methods><class-id>Roassal2.RTRoute</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Map">fromCityName	^ mapBuilder cities getCityName: self from</body><body package="Roassal2-Builder-Map">length	length isNil ifTrue: [		|coords1 coords2|		coords1 := mapBuilder translatePixelsToGeoPosition: edge from position / (mapBuilder scale).		coords2 := mapBuilder translatePixelsToGeoPosition: edge to position / (mapBuilder scale).		length := (mapBuilder geoDistanceBetween: coords1 and: coords2) asInteger.	].	^ length</body><body package="Roassal2-Builder-Map">lengthString	^ self fromCityName, ' -&gt; ', (self toCityName), ': ',(self length asString), ' km'</body><body package="Roassal2-Builder-Map">printString	^ self fromCityName, ' -&gt; ', (self toCityName)</body><body package="Roassal2-Builder-Map">toCityName	^ mapBuilder cities getCityName: self to</body></methods><methods><class-id>Roassal2.RTRoute</class-id> <category>accessing</category><body package="Roassal2-Builder-Map">edge	^ edge</body><body package="Roassal2-Builder-Map">edge: anEdge	edge := anEdge</body><body package="Roassal2-Builder-Map">from	^ edge from model</body><body package="Roassal2-Builder-Map">mapBuilder: builder	mapBuilder := builder</body><body package="Roassal2-Builder-Map">to	^ edge to model</body></methods><methods><class-id>Roassal2.RTRoute class</class-id> <category>public</category><body package="Roassal2-Builder-Map">from: cityElem1 to: cityElem2	|route edge|	route := RTRoute new.	edge := RTEdge from: cityElem1 to: cityElem2.	edge model: route.	route edge: edge.	^ route.</body></methods><methods><class-id>Roassal2.RTRadialTreeLayout</class-id> <category>algorithm</category><body package="Roassal2-Layouts">compareContourOf: aNode with: another	"return the number of radians the subtree induced by aNode must be displaced to be separated by a predefined distance (horizontalGap) from the one induced by anotherNode"	| difference max nodeA nodeB |	nodeB := aNode.	"the right one"	nodeA := another.	"the left one"	max := aNode = another		ifTrue: [ 0 ]		ifFalse: [ horizontalGap / (self layerOf: nodeB) / 2 - ((self xOf: nodeB) - (self getAbcissaOf: nodeA inSubtreeFromLayer: (self layerOf: aNode) - 1)) ].	nodeB := self followLeftContour: nodeB toLayer: (self layerOf: nodeB) + 1.	nodeA := self followRightContour: nodeA toLayer: (self layerOf: nodeA) + 1.	[ nodeB isNil not &amp; nodeA isNil not ]		whileTrue: [ 			difference := horizontalGap / (self layerOf: nodeA)				-					((self getAbcissaOf: nodeB inSubtreeFromLayer: (self layerOf: aNode) - 1)						- (self getAbcissaOf: nodeA inSubtreeFromLayer: (self layerOf: aNode) - 1)).			max := max max: difference.			nodeB := self followLeftContour: nodeB toLayer: (self layerOf: nodeB) + 1.			nodeA := self followRightContour: nodeA toLayer: (self layerOf: nodeA) + 1 ].	^ max</body><body package="Roassal2-Layouts">computePosition: aNode"compute the position of the given node and of his sons recursively"	| children neighbor nodeA |		children :=self childrenFor: aNode.	neighbor := self leftSiblingOf: aNode.		children isEmpty ifTrue: [ neighbor isNil ifTrue: [ self xOf: aNode put: 0. self modOf: aNode put: 0. ]  													 ifFalse: [ self xOf: aNode put: ((self xOf: neighbor) + (horizontalGap /(self layerOf: aNode) /2)). self modOf: aNode put: ((self modOf: neighbor)).													 self pointerOf: aNode put: (self followRightContour: neighbor toLayer: ((self layerOf: aNode) + 1)) ] ]					 					 ifFalse: [ self leftContourOf: aNode put: children first.									self rightContourOf: aNode put: children last.							  children do: [:e | self computePosition: e ].							      self xOf: aNode put: ((self xOf: ( self leftContourOf: aNode ) ) + ( self xOf: ( self rightContourOf: aNode ) ) + (self modOf: ( self rightContourOf: aNode ) ) ) / 2. 										self modOf: aNode put: 0. 								neighbor isNil ifFalse: [ self modOf: aNode put: (self compareContourOf: aNode with: neighbor).																						  nodeA := (self followLeftContour: (self fatherOf: aNode) toLayer: (self layerOf: aNode)).													  [(self followLeftContour: nodeA toLayer: ((self layerOf: nodeA) + 1)) isNil ] whileFalse: [ nodeA := self followLeftContour: nodeA toLayer: ((self layerOf: nodeA) + 1) ].													 self pointerOf: nodeA put: (self followLeftContour: aNode toLayer: ((self layerOf: nodeA) + 1)).																										 nodeA := self followRightContour: aNode toLayer: ((self layerOf: aNode) + 1).													 [(self followRightContour: nodeA toLayer: ((self layerOf: nodeA) + 1)) isNil ] whileFalse: [ nodeA := self followRightContour: nodeA toLayer: ((self layerOf: nodeA) +1) ].													self pointerOf: nodeA put: (self followRightContour: neighbor toLayer: ((self layerOf: nodeA) + 1) ) ] ].</body><body package="Roassal2-Layouts">diameterOf: aNode	|diam|		(aNode shapes first isKindOf: RTEllipse) ifTrue: [ diam := aNode width max: aNode height ]										ifFalse: [ diam := (aNode width * aNode width + (aNode height * aNode height)) sqrt floor ].		^ diam</body><body package="Roassal2-Layouts">halfDiameterOf: aNode	|diam|		(aNode shapes first isKindOf: RTEllipse) ifTrue: [ diam := aNode width max: aNode height ]										ifFalse: [ diam := (aNode width * aNode width + (aNode height * aNode height)) sqrt floor ].		^ diam / 2</body><body package="Roassal2-Layouts">nodeAbcissaWithNeighbor: aNode	^ aNode x + (horizontalGap / aNode layer /2) + ((self halfDiameterOf: aNode) / aNode layer)</body><body package="Roassal2-Layouts">radialDraw: aNode	"draw the subtree induced by the given node"	| children r max |	r := (self rOf: aNode).	translator translateTopLeftOf: aNode to: (Point r: r theta: (self thetaOf: aNode)).	"aNode translateTo: (Point radius: (aNode r) theta: (aNode theta))."	children := self childrenFor: aNode.	max := 0.	children do: [ :e | max := max max: (self radialDraw: e) ].	^ r + max.</body><body package="Roassal2-Layouts">toRadialTree: aNode withMod: aFloat	"compute polar coordinates of the subtree induced by anode from its cartesian coordinates "	| children |	self rOf: aNode put: ((self layerOf: aNode) * verticalGap ).	((self rOf: aNode) = 0) ifTrue: [ self thetaOf: aNode put: 0 ] 					ifFalse: [ self thetaOf: aNode put: ((self xOf: aNode)  + aFloat + (self modOf: aNode)) / verticalGap ].		children := self childrenFor: aNode.		children do: [ :e | self toRadialTree: e withMod: ( (self modOf: aNode) + aFloat) ]</body></methods><methods><class-id>Roassal2.RTRadialTreeLayout</class-id> <category>private</category><body package="Roassal2-Layouts">gap		^ self verticalGap</body><body package="Roassal2-Layouts">layoutLayer: aCollection radius: oldRadius from: aFromAngle to: aToAngle		| delta childRadius maximumRadius myRadius fromAngle toAngle |	"Initialize with default value"	maximumRadius := oldRadius.	aCollection isEmpty		ifFalse:			[myRadius := oldRadius + self gap + (self maximumRadius: aCollection).			childRadius := oldRadius + self gap + (self maximumDiameter: aCollection).	"This is a purely optical tweak"			(aCollection size = 1 and: [aToAngle - aFromAngle = (2 * Float pi)])				ifTrue:					[delta := 0.4 * Float pi.					fromAngle := 0.8 * Float pi.					toAngle := fromAngle + delta]				ifFalse:					[delta := (aToAngle - aFromAngle) / aCollection size.					fromAngle := aFromAngle.					toAngle := aFromAngle + delta].			aCollection				do:					[:child | 					translator translateTopLeftOf: child to: (Point								r: myRadius								theta: toAngle - (delta / 2.0)).					"child						translateTo:							(Point								radius: myRadius								theta: toAngle - (delta / 2.0))."					maximumRadius := maximumRadius						max:							(self								layoutLayer: (self childrenFor: child)								radius: childRadius								from: fromAngle								to: toAngle).					fromAngle := toAngle.					toAngle := toAngle + delta]].	^maximumRadius</body><body package="Roassal2-Layouts">moveAllElementsToTopLeft: elements	| pos min |	pos := elements collect: #position.	min := pos inject: 0 @ 0 into: [ :minimum :p | minimum min: p ].	elements do: [ :e | e translateBy: min negated ]</body></methods><methods><class-id>Roassal2.RTRadialTreeLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">computeGap: aNode	" compute the vertical gap needed for drawing the radial tree "	| gap maxAbcissa i abc nodeL nodeR layer |		gap := 0.	maxAbcissa := 0.	layer := 1.		i := 1.	[ nodeL :=(self followLeftContour: aNode toLayer: i).	nodeR := (self followRightContour: aNode toLayer: i).	nodeL isNil not &amp; nodeR isNil not ] whileTrue: [ abc := (((self getAbcissaOf: nodeR inSubtreeFromLayer: 0) - (self getAbcissaOf: nodeL inSubtreeFromLayer: 0 ) + (horizontalGap / layer/2)) / layer).																	(abc &gt; maxAbcissa) ifTrue: [ maxAbcissa := abc. 																								layer := layer ].																	i := i + 1 ].		gap:= (maxAbcissa / 2 /Float pi ) floor +1.		((verticalGap isNil) or: [gap &gt; verticalGap])  ifTrue: [ self verticalGap: gap ]</body><body package="Roassal2-Layouts">doExecute: nodeElements	| rootNodes xOffset maximumRadius | 	initialLayout isNil		ifFalse: [ initialLayout new executeOnElements: nodeElements ].	rootNodes := self rootNodesFor: nodeElements.	rootNodes		do: [ :e | self initialize: e whoseFatherIs: nil ];		do: [ :e | self computePosition: e. self step];		do: [ :e | self computeGap: e ];		do: [ :e | self toRadialTree: e withMod: 0 ].	xOffset := 0.	rootNodes		do: [ :e | 			maximumRadius := self radialDraw: e.			"Shifting all the subgroups"			self shiftTree: e by:  (maximumRadius+xOffset)@maximumRadius.			xOffset := xOffset + (2 * maximumRadius) + 10.  ].</body><body package="Roassal2-Layouts">rotateSubtreeFrom: aNode by: aFloat		aNode theta: aNode theta + aFloat.		(self childrenFor: aNode) do: [ :e | self rotateSubtreeFrom: e by: aFloat ]</body><body package="Roassal2-Layouts">spreadNodes: nodeElements around: aNode	|nodeL nodeR i angle beta lay1 |		i := 1.	angle := 0.		[ nodeL :=(self followLeftContour: aNode toLayer: i).	nodeR := (self followRightContour: aNode toLayer: i).	nodeL isNil not &amp; nodeR isNil not ] whileTrue: [ angle := angle max: ((nodeR theta - nodeL theta) + ((self halfDiameterOf: nodeR) + (self halfDiameterOf: nodeL) + horizontalGap  /i /verticalGap )).													i := i+1. ].	lay1 := nodeElements select: [ :e | e layer = 1 ].	beta := Float pi * 2 - angle / lay1 size.		lay1 do: [ :e | self rotateSubtreeFrom: e by: (lay1 indexOf: e) - 1 * beta ].</body></methods><methods><class-id>Roassal2.TRWhiteSolarizedTheme</class-id> <category>accessing</category><body package="Roassal2-Trachel-Theme">trachelCanvasColor	^ self base3</body></methods><methods><class-id>Roassal2.RTLineSegment</class-id> <category>comparing</category><body package="Roassal2-AttachPoint">= anotherSegment	"Answer true if the receiver's species, from and to matches anotherSegment."	^ self species = anotherSegment species		ifTrue: [ ^ from = anotherSegment from and: [ to = anotherSegment to ] ]		ifFalse: [ ^ false ]</body><body package="Roassal2-AttachPoint">hash	"Hash is reimplemented because = is implemented."	^ from hash bitXor: to hash</body><body package="Roassal2-AttachPoint">intersectLines: other	"point of intersection of line on which line segment lies with line of other line segment or nil if parallel"	| det x y |	self isHorizontal		ifTrue: [ ^ self intersectHorizontalLine: other ].	self isVertical		ifTrue: [ ^ self intersectVerticalLine: other ].	det := self a * other b - (other a * self b).	det isZero		ifTrue: [ ^ nil ].	x := (self b * other c - (other b * self c)) / det.	y := (other a * self c - (self a * other c)) / det.	^ x @ y</body><body package="Roassal2-AttachPoint">intersectRectangle: aRectangle	"collection of points of intersection with not rotated rectangle"	| pts bottomLeft bottomRight topLeft topRight |	bottomLeft := aRectangle bottomLeft.	bottomRight := aRectangle bottomRight.	topLeft := aRectangle topLeft.	topRight := aRectangle topRight.	pts := Set new.	pts add: ((self class from: topLeft to: topRight) intersectHorizontal: self).	pts add: ((self class from: bottomLeft to: bottomRight) intersectHorizontal: self).	pts add: ((self class from: topLeft to: bottomLeft) intersectVertical: self).	pts add: ((self class from: topRight to: bottomRight) intersectVertical: self).	pts remove: nil ifAbsent: [  ].	^ pts</body><body package="Roassal2-AttachPoint">intersection: other	"point of intersection with other line segment or nil if it does not exists"	| intersection |	self isHorizontal		ifTrue: [ ^ self intersectHorizontal: other ].	self isVertical		ifTrue: [ ^ self intersectVertical: other ].	intersection := self intersectLines: other.	intersection ifNil: [ ^ nil ].	(intersection onLineFrom: self from to: self to) &amp; (intersection onLineFrom: other from to: other to)		ifFalse: [ ^ nil ].	^ intersection</body></methods><methods><class-id>Roassal2.RTLineSegment</class-id> <category>accessing</category><body package="Roassal2-AttachPoint">bottom	^ from y &lt; to y		ifTrue: [ from ]		ifFalse: [ to ]</body><body package="Roassal2-AttachPoint">from	^ from</body><body package="Roassal2-AttachPoint">from: fromPoint	from := fromPoint</body><body package="Roassal2-AttachPoint">from: fromPoint to: toPoint	from := fromPoint.	to := toPoint.</body><body package="Roassal2-AttachPoint">left	^ from x &lt; to x		ifTrue: [ from ]		ifFalse: [ to ]</body><body package="Roassal2-AttachPoint">right	^ from x &gt; to x		ifTrue: [ from ]		ifFalse: [ to ]</body><body package="Roassal2-AttachPoint">to	^ to</body><body package="Roassal2-AttachPoint">to: toPoint	to := toPoint</body><body package="Roassal2-AttachPoint">top	^ from y &gt; to y		ifTrue: [ from ]		ifFalse: [ to ]</body></methods><methods><class-id>Roassal2.RTLineSegment</class-id> <category>testing</category><body package="Roassal2-AttachPoint">isHorizontal	^ from y = to y</body><body package="Roassal2-AttachPoint">isVertical	^ from x = to x</body></methods><methods><class-id>Roassal2.RTLineSegment</class-id> <category>geometry</category><body package="Roassal2-AttachPoint">angleInDeg	^ self vector degrees</body><body package="Roassal2-AttachPoint">angleInRad	^ self angleInDeg degreesToRadians</body><body package="Roassal2-AttachPoint">cotan	| vector |	vector := self vector.	vector y isZero		ifTrue: [ ^ nil ].	^ vector x / vector y</body><body package="Roassal2-AttachPoint">length	^ self vector r</body><body package="Roassal2-AttachPoint">pointForBalance: aNumber	"Return point on the line as specified by the balance.	Balance is		\in &lt;0,1&gt; for relative (e.g. 0 start, 1 end, 0.5 middle).		&gt;1 for absolute starting from source (e.g. '10' is 10 pixels from the FROM)		&lt;1 for absolute starting from end (e.g. '-10' is 10 pixesl from the TO)	"	| balance |	balance := aNumber.	(aNumber between: 0 and: 1)		ifTrue: [ balance := self length * aNumber ].	balance &lt; 0		ifTrue: [ balance := self length - balance negated ].	^ self length &gt; 0		ifTrue: [ from + (self vector / self length * balance) ]		ifFalse: [ from ]</body><body package="Roassal2-AttachPoint">sideOfPoint: aPoint	"Compute on which side of the segment a point is.	For line going from left A=(a_x, a_y) to right B=(b_x, b_y) the value is	d = (x - a_x)(b_y - a_y) - (y - a_y)(b_x - a_x)	1 - above the line	0 - on the line  -1 - below the line	"	^ ((aPoint x - from x) * (to y - from y) - ((aPoint y - from y) * (to x - from x))) sign</body><body package="Roassal2-AttachPoint">tan	| vector |	vector := self vector.	vector x isZero		ifTrue: [ ^ nil ].	^ vector y / vector x</body><body package="Roassal2-AttachPoint">transposed	^ self class from: from transposed to: to transposed</body><body package="Roassal2-AttachPoint">vector	^ to - from</body></methods><methods><class-id>Roassal2.RTLineSegment</class-id> <category>private</category><body package="Roassal2-AttachPoint">intersectHorizontal: other	"Intersection with other line segment. Self must be horizontal (optimization purposes)"	| pt |	(pt := self intersectHorizontalLine: other) ifNil: [ ^ nil ].	pt x &lt; self left x | (pt x &gt; self right x) | (pt y &lt; other bottom y) | (pt y &gt; other top y)		ifTrue: [ ^ nil ].	^ pt</body><body package="Roassal2-AttachPoint">intersectHorizontalLine: other	"point of intersection of line on which line segment lies with line of other line segment or nil if parallel. Self must be horizontal (optimization purposes)"	| x y vector |	vector := other vector.	vector y isZero		ifTrue: [ ^ nil ].	y := self from y.	x := (self from y - other from y) * other cotan + other from x.	^ x @ y</body><body package="Roassal2-AttachPoint">intersectVertical: other	"Intersection with other line segment. Self must be vertical (optimization purposes)"	| pt |	pt := self transposed intersectHorizontal: other transposed.	pt ifNil: [ ^ nil ].	^ pt transposed</body><body package="Roassal2-AttachPoint">intersectVerticalLine: other	"point of intersection of line on which line segment lies with line of other line segment or nil if parallel. Self must be vertical (optimization purposes)"	| pt |	pt := self transposed intersectHorizontalLine: other transposed.	pt ifNil: [ ^ nil ].	^ pt transposed</body></methods><methods><class-id>Roassal2.RTLineSegment</class-id> <category>initialization</category><body package="Roassal2-AttachPoint">initialize	super initialize.	from := 0 @ 0.	to := 0 @ 0</body></methods><methods><class-id>Roassal2.RTLineSegment</class-id> <category>line forms</category><body package="Roassal2-AttachPoint">a	"value from normal form (ax + by + c) of line on which line segment lies on"	^ to y - from y</body><body package="Roassal2-AttachPoint">b	"value from normal form (ax + by + c) of line on which line segment lies on"	^ from x - to x</body><body package="Roassal2-AttachPoint">c	"value from normal form (ax + by + c) of line on which line segment lies on"	^ (self a * from x + (self b * from y)) negated</body></methods><methods><class-id>Roassal2.RTLineSegment class</class-id> <category>instance-creation</category><body package="Roassal2-AttachPoint">from: fromPoint to: toPoint	^ self new		from: fromPoint to: toPoint;		yourself</body></methods><methods><class-id>Roassal2.TRArcLineShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">center	^ center</body><body package="Roassal2-Trachel-Shapes">distance: aDistance	distance := aDistance.	self computeCircle</body><body package="Roassal2-Trachel-Shapes">encompassingRectangle	| mid v |	mid := line pointForBalance: 0.5.	v := line vector.	normal := RTLineSegment from: mid to: mid + (distance * v normal).	^ Rectangle		encompassing: (Array with: line from with: line to with: normal to)</body><body package="Roassal2-Trachel-Shapes">line: aLine	line := aLine</body><body package="Roassal2-Trachel-Shapes">radius	^ radius</body></methods><methods><class-id>Roassal2.TRArcLineShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint	| angleOne angleTwo anglePoint |	((aPoint dist: center) - radius) abs &lt; 5		ifFalse: [ ^ false ].	angleOne := line from angleWith: center.	angleTwo := line to angleWith: center.	anglePoint := aPoint angleWith: center.	^ (anglePoint between: angleOne and: angleTwo)		| (anglePoint between: angleTwo and: angleOne)</body></methods><methods><class-id>Roassal2.TRArcLineShape</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">computeCircle	| srcMidNormal dstMidNormal |	line length = 0		ifTrue: [ ^ self ].	normal := self normalFor: line.	alpha := (distance abs / (line length / 2)) arcTan * 2.	srcMidNormal := self normalFor: (RTLineSegment from: line from to: normal to).	dstMidNormal := self normalFor: (RTLineSegment from: line to to: normal to).	center := srcMidNormal intersectLines: dstMidNormal.	radius := center dist: line from</body><body package="Roassal2-Trachel-Shapes">computePath	path := self athensCanvas		createPath:			[ :builder | 			builder				absolute;				moveTo: line from.			distance &gt; 0				ifTrue: [ builder						ccwArcTo: normal to angle: alpha;						ccwArcTo: line to angle: alpha ]				ifFalse: [ builder						cwArcTo: normal to angle: alpha;						cwArcTo: line to angle: alpha ] ]</body><body package="Roassal2-Trachel-Shapes">normalFor: aLine	| mid v |	mid := aLine pointForBalance: 0.5.	v := aLine vector.	^ RTLineSegment from: mid to: mid + (distance * v normal)</body></methods><methods><class-id>Roassal2.TRArcLineShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">drawOn: athensCanvas	athensCanvas pathTransform		restoreAfter:			[ athensCanvas setShape: self path.			(athensCanvas setStrokePaint: self themedColor) width: width.			athensCanvas draw ]</body></methods><methods><class-id>Roassal2.RTZoomableView</class-id> <category>accessing</category><body package="Roassal2-Interactions">maxZoom	^ maxZoom ifNil: [ 10 ]</body><body package="Roassal2-Interactions">maxZoom: aFloat	maxZoom := aFloat</body><body package="Roassal2-Interactions">min: aMinFloat max: aMaxFloat	self minZoom: aMinFloat.	self maxZoom: aMaxFloat</body><body package="Roassal2-Interactions">minZoom	^ minZoom ifNil: [ 0.1 ]</body><body package="Roassal2-Interactions">minZoom: aFloat	minZoom := aFloat</body></methods><methods><class-id>Roassal2.RTZoomableView</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: aView	aView canvas		when: TRMouseWheelEvent		do: [ :e | 			| scale dist |			dist := e position - aView canvas camera position.			scale := aView canvas camera scale.			(e isUp and: [ scale * 1.25 &lt;= self maxZoom ])				ifTrue: [ scale := scale * 1.25.					dist := dist * 0.2 ]				ifFalse: [ dist := 0 ].			(e isDown and: [ scale * 0.8 &gt;= self minZoom ])				ifTrue: [ scale := scale * 0.8.					dist := dist * -0.25 ]				ifFalse: [ dist := 0 ].			aView canvas camera				scale: scale;				translateBy: dist.			aView signalUpdate ]</body></methods><methods><class-id>Roassal2.RTZoomableView class</class-id> <category>instance creation</category><body package="Roassal2-Interactions">min: aMin max: aMax	^ self new		min: aMin max: aMax;		yourself</body></methods><methods><class-id>Roassal2.RTBorderStyle</class-id> <category>styles</category><body package="Roassal2-Shapes">dash	"	Here is an example of use:	v := RTView new.strings := #('Hello' 'World' 'Bonjour').label := RTLabel new.box := RTBox new.box color: Color transparent.box borderStyle dash.box borderColor: Color red.composite := RTCompositeShape new.composite add: box.composite add: label.composite allOfSameSizeWithPadding.es := composite elementsOn: strings.v addAll: es.es @ RTDraggable.RTHorizontalLineLayout on: es.v	"	self style: #(6 4)</body><body package="Roassal2-Shapes">dashDot"Here is an example of usev := RTView new.strings := #('Hello' 'World' 'Bonjour').label := RTLabel new.box := RTBox new.box color: Color transparent.box borderStyle dash.box borderColor: Color red.composite := RTCompositeShape new.composite add: box.composite add: label.composite allOfSameSizeWithPadding.es := composite elementsOn: strings.v addAll: es.es @ RTDraggable.RTHorizontalLineLayout on: es.v"	self style: #(6 3 1 3)</body><body package="Roassal2-Shapes">dot	self style: #(1 2)</body><body package="Roassal2-Shapes">solid	self style: nil</body></methods><methods><class-id>Roassal2.RTBorderStyle</class-id> <category>accessing</category><body package="Roassal2-Shapes">style	^ style</body><body package="Roassal2-Shapes">style: aStyle	aStyle isSymbol		ifTrue: [ self perform: aStyle ]		ifFalse: [ style := aStyle ]</body></methods><methods><class-id>Roassal2.RTDevVarDecorator</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Decorators">color	^ color</body><body package="Roassal2-Builder-Grapher-Decorators">color: aColor	color := aColor.</body><body package="Roassal2-Builder-Grapher-Decorators">deviation	^ deviation</body><body package="Roassal2-Builder-Grapher-Decorators">deviation: aNumber	deviation := aNumber</body><body package="Roassal2-Builder-Grapher-Decorators">points	^ points</body><body package="Roassal2-Builder-Grapher-Decorators">points: pts	points := pts</body></methods><methods><class-id>Roassal2.RTDevVarDecorator</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Decorators">initialize	super initialize.	self color: (Color gray alpha: 0.5).	self deviation: 0.</body></methods><methods><class-id>Roassal2.RTDevVarDecorator</class-id> <category>drawing</category><body package="Roassal2-Builder-Grapher-Decorators">render	| dev svg k str index offset |	dev := points collectWithIndex: [ :p :i | p + (deviation*i). ].		svg := TRSVGPath new.	svg color: color.	offset := -0.15.	k := builder getPixelPositionOf: (1+offset)@dev first.	str := 'M', k x asString,' ', k y asString.	(2 to: dev size) do: [ :i| | p |		p := dev at: i.		k := builder getPixelPositionOf: (i+offset)@p.		str := str, 'L', k x asString,' ', k y asString.		].	dev := (points collectWithIndex:[:p :i | p - (deviation*i)] ).	(1 to: dev size) do: [ :i | | p |		index := dev size - i +1.		p := dev at: index.		k := builder getPixelPositionOf: (index+offset)@p.		str := str, 'L', k x asString,' ', k y asString. ].		str := str, 'Z'.	svg path: str.	builder view canvas addShape: svg.</body></methods><methods><class-id>Roassal2.RTBoxPlotItem</class-id> <category>accessing</category><body package="Roassal2-Builder-BoxPlot">iqr	^ interQuartileRange</body><body package="Roassal2-Builder-BoxPlot">maxOutlier	^ maxOutlier</body><body package="Roassal2-Builder-BoxPlot">maxRegularValue	^ maxRegularValue</body><body package="Roassal2-Builder-BoxPlot">mean	^ mean</body><body package="Roassal2-Builder-BoxPlot">median	^ median</body><body package="Roassal2-Builder-BoxPlot">minOutlier	^ minOutlier</body><body package="Roassal2-Builder-BoxPlot">minRegularValue	^ minRegularValue</body><body package="Roassal2-Builder-BoxPlot">model	^ model</body><body package="Roassal2-Builder-BoxPlot">model: m	model := m</body><body package="Roassal2-Builder-BoxPlot">outliers	^ outliers</body><body package="Roassal2-Builder-BoxPlot">q1	^ q1</body><body package="Roassal2-Builder-BoxPlot">q3	^ q3</body><body package="Roassal2-Builder-BoxPlot">values	^ values</body><body package="Roassal2-Builder-BoxPlot">values: anArray	| upperOutlierThreshold lowerOutlierThreshold upperFaroutThreshold lowerFaroutThreshold |	values := anArray sort.	values size &lt; 3 ifTrue: [ 		self emptyValues.		^ self ].	mean := self calculateMean.	median := self calculateMedian.	q1 := self calculateQ1.	q3 := self calculateQ3.	interQuartileRange := q3 - q1.		upperOutlierThreshold := q3 + (interQuartileRange * 1.5).	lowerOutlierThreshold := q1 - (interQuartileRange * 1.5).		upperFaroutThreshold := q3 + (interQuartileRange * 2.0).	lowerFaroutThreshold := q1 -(interQuartileRange * 2.0).		minRegularValue := Float infinity.	maxRegularValue := Float infinity negated.	minOutlier := Float infinity.	maxOutlier := Float infinity negated.	outliers := OrderedCollection new.		values do: [ :value |		value &gt; upperOutlierThreshold ifTrue: [			outliers add: value.			((value &gt; maxOutlier) and: [value &lt;= upperFaroutThreshold ]) ifTrue: [ 				maxOutlier := value ] ] ifFalse: [ 		value &lt; lowerOutlierThreshold ifTrue: [ 			outliers add: value.			((value &lt; minOutlier ) and: [ value &gt;= lowerFaroutThreshold ] ) ifTrue: [ 				minOutlier := value ]			 ] ifFalse: [ 			minRegularValue := minRegularValue min: value.			maxRegularValue := maxRegularValue max: value. ] ].				minOutlier := minOutlier min: minRegularValue.		maxOutlier := maxOutlier max: maxRegularValue.	 ]</body></methods><methods><class-id>Roassal2.RTBoxPlotItem</class-id> <category>testing</category><body package="Roassal2-Builder-BoxPlot">hasOutlier	^ outliers notEmpty</body></methods><methods><class-id>Roassal2.RTBoxPlotItem</class-id> <category>computing</category><body package="Roassal2-Builder-BoxPlot">calculateMean	^ values sum / values size.</body><body package="Roassal2-Builder-BoxPlot">calculateMedian	| result size |	result := Float nan.	size := values size.	size &gt; 0 ifTrue: [ 		(size % 2) = 1 ifTrue: [ 			result := values at: (size/2 + 1) asInteger ] 		ifFalse: [ |v1 v2|			v1 := values at: size/2.			v2 := values at: size/2+1.			result := (v1 + v2)/2.0. ]		 ].	^ result.</body><body package="Roassal2-Builder-BoxPlot">calculateMedianStart: start end: end	|result size |	result := Float nan.	size := (end asInteger - start asInteger + 1).	size &gt; 0 ifTrue: [ 		size = 1 ifTrue: [ ^ values at: start asInteger ].		(size % 2) = 1 ifTrue: [ 			result := values at: (start + (size /2)) asInteger			 ] ifFalse: [ | v1 v2 |			v1 := values at: (start + (size / 2)-1) asInteger.			v2 := values at: (start + (size / 2)) asInteger.			result := (v1 + v2) / 2.0 ] ].	^ result</body><body package="Roassal2-Builder-BoxPlot">calculateQ1	| result size |	result := Float nan.	size := values size.	size &gt; 0 ifTrue: [ 		result := self calculateMedianStart: 1 end: (size /2). ].	^ result</body><body package="Roassal2-Builder-BoxPlot">calculateQ3	| result size |	result := Float nan.	size := values size.	size &gt; 0 ifTrue: [ 		size % 2 = 1 ifTrue: [ result := self calculateMedianStart: (size / 2)+2 end: size ]		ifFalse: [ result := self calculateMedianStart: (size/2)+1 end: size. ]		 ].	^ result</body><body package="Roassal2-Builder-BoxPlot">emptyValues	mean := median := q1 := q3 := maxOutlier := minOutlier := interQuartileRange := minRegularValue := maxRegularValue := 0 .	outliers := #().</body></methods><methods><class-id>Roassal2.RTEvolutionDSM</class-id> <category>accessing</category><body package="Roassal2-Builder-DSM">sparklineValues: ablock size: aNumber	| shapes |	shapes := self shape shape allShapes.	shapes first size: aNumber.	shapes second		width: aNumber;		height: aNumber;		values: ablock.</body><body package="Roassal2-Builder-DSM">timeline	^ timelineBlock</body><body package="Roassal2-Builder-DSM">timeline: aBlock	timelineBlock := aBlock</body></methods><methods><class-id>Roassal2.RTEvolutionDSM</class-id> <category>UI</category><body package="Roassal2-Builder-DSM">defaultCellShape	^ (RTCompositeShape new 		add: (RTPolygon rectangle);		add: ( RTSparkline new			size: self cellSize);			color: Color transparent;		yourself)</body></methods><methods><class-id>Roassal2.RTEvolutionDSM</class-id> <category>initialization</category><body package="Roassal2-Builder-DSM">initialize	super initialize.	self timeline: [ :evoline |		nil ].	self createObjectBlock: [ :assoc | | inst |		inst := RTEvolutionLine new 			xvalue: assoc key;			yvalue: assoc value.		inst timeline: (self timeline value: inst).		inst ].</body></methods><methods><class-id>Roassal2.RTSparkline</class-id> <category>accessing</category><body package="Roassal2-Sparkline">maxValue	^ maxValue</body><body package="Roassal2-Sparkline">maxValue: aNumber	self maxValueElement: [ :e | aNumber rtValue: e model ].</body><body package="Roassal2-Sparkline">maxValueElement: anObject	maxValue := anObject</body><body package="Roassal2-Sparkline">maxValueFor: anElement	^ maxValue rtValue: anElement</body><body package="Roassal2-Sparkline">minValue	^ minValue</body><body package="Roassal2-Sparkline">minValue: aNumber	self minValueElement: [ :e | aNumber rtValue: e model ].</body><body package="Roassal2-Sparkline">minValueElement: anObject	minValue := anObject</body><body package="Roassal2-Sparkline">minValueFor: anElement	^ minValue rtValue: anElement</body><body package="Roassal2-Sparkline">values: aBlockOrASymbol	valueBlock := aBlockOrASymbol</body></methods><methods><class-id>Roassal2.RTSparkline</class-id> <category>initialization</category><body package="Roassal2-Sparkline">initialize	super initialize.	borderWidth := 1.	borderColor := Color black.	self color: Color white</body></methods><methods><class-id>Roassal2.RTSparkline</class-id> <category>public</category><body package="Roassal2-Sparkline">trachelShapeFor: anElement	| shape |	shape := TRSVGPath new.	shape strokePaint: (borderColor rtValue: anElement).	shape borderWidth: (borderWidth rtValue: anElement).	shape fillColor: (self fillColor rtValue: anElement).	self updateFor: anElement trachelShape: shape.	^ shape</body></methods><methods><class-id>Roassal2.RTSparkline</class-id> <category>hooks</category><body package="Roassal2-Sparkline">updateFor: element trachelShape: trachelShape	| vs p path x y stepHorizontal stepVertical w h min max ny vsnil |	vs := self valuesFor: element.	vsnil := false.	vs isNil ifTrue: [ 		vs := #(0 1 2).		vsnil := true ].	w := self widthFor: element.	h := self heightFor: element.	stepHorizontal := w / vs size.	min := self minValueFor: element.	max := self maxValueFor: element.	min ifNil: [ min := vs min].	max ifNil: [ max := vs max].		stepVertical := max = min 		ifTrue: [ h ]		ifFalse: [ h / (max - min) ].	p := (element position - ((w / 2) @ (h negated / 2))).	x := p x.	y := p y.	ny := vs first - min * stepVertical.	path := 'M', x asFloat asString, ',', (y - ny) asFloat asString.		vs size = 1		ifTrue: [ 			x := x + stepHorizontal.			path := path, 'L', x asFloat asString, ',', (y - ny) asFloat asString ]			ifFalse: [			vs allButFirstDo: [ :v |				x := x + stepHorizontal.				ny := (v - min * stepVertical).				path := path, 'L', x asFloat asString, ',', (y - ny) asFloat asString.			] ].	trachelShape resetPath.	trachelShape path: path.		"We manually specify the extent of the shape. If we do not do it, then the path will be used to determine the encompassing rectangle"	max = min ifTrue: [ h := 1 ].	trachelShape setExtent: w @ h.	vsnil ifTrue: [ 		trachelShape fillColor: Color transparent; strokePaint: Color transparent ]</body></methods><methods><class-id>Roassal2.RTSparkline</class-id> <category>querying</category><body package="Roassal2-Sparkline">valuesFor: anElement	^ valueBlock rtValue: anElement model</body></methods><methods><class-id>Roassal2.ASPathConverter</class-id> <category>builder commands</category><body package="Roassal2-Pharo">absolute	absolute := true.	self addSegment: #()</body><body package="Roassal2-Pharo">close	self addSegment: #()</body><body package="Roassal2-Pharo">curveVia: aPoint and: aPoint2 to: aPoint3 	self addSegment: (Array with: aPoint with: aPoint2 with: aPoint3)</body><body package="Roassal2-Pharo">curveVia: aPoint to: aPoint2 	self addSegment: (Array with: aPoint with: aPoint2)</body><body package="Roassal2-Pharo">hLineTo: aNumber	self addSegment: (Array with: aNumber)</body><body package="Roassal2-Pharo">lineTo: aPoint 	self addSegment: (Array with: aPoint)</body><body package="Roassal2-Pharo">moveTo: aPoint 	self addSegment: (Array with: aPoint)</body><body package="Roassal2-Pharo">reflectedCurveVia: aPoint to: aPoint2 	self addSegment: (Array with: aPoint with: aPoint2)</body><body package="Roassal2-Pharo">relative	absolute := false.	self addSegment: #()</body><body package="Roassal2-Pharo">vLineTo: aNumber		self addSegment: (Array with: aNumber)</body></methods><methods><class-id>Roassal2.ASPathConverter</class-id> <category>adding</category><body package="Roassal2-Pharo">addSegment: args	| sel |	sel := thisContext sender selector.		path add: (Array with: sel with: args)</body></methods><methods><class-id>Roassal2.ASPathConverter</class-id> <category>operations</category><body package="Roassal2-Pharo">convertPathData	path := OrderedCollection new.		[ self skipBlanks. stream atEnd ] whileFalse: [		| cmd |		cmd := stream next.		self assertValidCommand: cmd.		self perform: cmd asString asSymbol.	].	^ path</body><body package="Roassal2-Pharo">cubicBezier"C/c (x1 y1 x2 y2 x y)+Draws a cubic BeÌzier curve from the current point to (x,y) using (x1,y1) as the control point at the beginning of the curve and (x2,y2) as the control point at the end of the curve. C (uppercase) indicates that absolute coordinates will follow; c (lowercase) indicates that relative coordinates will follow. Multiple sets of coordinates may be specified to draw a polybeÌzier. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybeÌzier."	| p1 p2 p3 |		p1 := self readPoint.	p2 := self readPoint.	p3 := self readPoint.		p3 ifNil: [ self error: 'Invalid path data: 3 points expected for cubic bezier '].	self curveVia: p1 and:  p2 to: p3. 		[ 		(p1 := self readPoint) ifNil: [ ^ self ].		p2 := self readPoint.		p3 := self readPoint.		p3 ifNil: [ self error: 'Invalid path data: 3 points expected for cubic bezier '].		self curveVia: p1 and:  p2 to: p3. 	] repeat.</body><body package="Roassal2-Pharo">ellipticalArc "A (absolute) a (relative)elliptical arc(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+Draws an elliptical arc from the current point to (x, y). The size and orientation of the ellipse are defined by two radii (rx, ry) and an x-axis-rotation, which indicates how the ellipse as a whole is rotated relative to the current coordinate system. The center (cx, cy) of the ellipse is calculated automatically to satisfy the constraints imposed by the other parameters. large-arc-flag and sweep- flag contribute to the automatic calculations and help determine how the arc is drawn."	| r xrot large sweep pt |		[	r := self readPoint.	r ifNil: [ ^ self ].		self skipBlanksAndComma.		xrot := self nextNumber.	self skipBlanksAndComma.		large := self nextNumber.	self skipBlanksAndComma.	sweep := self nextNumber.		pt := self readPoint.		pt ifNil: [ self error: 'Invalid path data for elliptical arc segment'].	self ellipticalArc: r xrot: xrot large: large sweep: sweep to: pt.	] repeat.</body><body package="Roassal2-Pharo">ellipticalArc: r xrot: xrot large: large sweep: sweep to: pt	self addSegment: (Array with: r with: xrot with: large with: sweep with: pt)</body><body package="Roassal2-Pharo">hLineTo"H (absolute) h (relative)x +Draws a horizontal line from the current point (cpx, cpy) to (x, cpy). H (uppercase) indicates that absolute coordinates will follow; h (lowercase) indicates that relative coordinates will follow. Multiple x values can be provided (although usually this doesn't make sense). At the end of the command, the new current point becomes (x, cpy) for the final value of x."	| x |		self skipBlanks.	x := self nextNumber ifNil: [ ^ self error: 'number expected for horizontal line segment'   ].		self hLineTo: x.		[ self skipBlanks. x := self nextNumber. x notNil ] whileTrue: [		self hLineTo: x	].</body><body package="Roassal2-Pharo">lastBezierPoint	path reverseDo: [ :arr | arr first caseOf: (Array with: [ #relative ] -&gt; [ "ignore" ] ) ]</body><body package="Roassal2-Pharo">lineTo" L (absolute) l (relative)lineto(x y)+Draw a line from the current point to the given (x,y) coordinate which becomes the new current point. L (uppercase) indicates that absolute coordinates will follow; l (lowercase) indicates that relative coordinates will follow. A number of coordinates pairs may be specified to draw a polyline. At the end of the command, the new current point is set to the final set of coordinates provided."	| pt |	pt := self readPoint.		pt ifNil: [ self error: 'point expected for line segment' ].		self lineTo: pt.		[ pt := self readPoint. pt notNil ] whileTrue: [ self lineTo: pt ]</body><body package="Roassal2-Pharo">moveTo	"move-to"	" 		Start a new sub-path at the given (x,y) coordinate. M (uppercase) indicates that absolute coordinates will follow; m (lowercase) indicates that relative coordinates will follow. 		If a relative moveto (m) appears as the first element of the path, then it is treated as a pair of absolute coordinates. 		If a moveto is followed by multiple pairs of coordinates, the subsequent pairs are treated as implicit lineto commands.		"	| pt |	pt := self readPoint.	pt ifNil: [ self error: 'a point expected following after M/m command'].		self moveTo: pt.		[ pt := self readPoint. pt notNil ] whileTrue: [ self lineTo: pt ]</body><body package="Roassal2-Pharo">quadraticBezier "Q/q (x1 y1 x y)+Draws a quadratic BeÌzier curve from the current point to (x,y) using (x1,y1) as the control point. Q (uppercase) indicates that absolute coordinates will follow; q (lowercase) indicates that relative coordinates will follow. Multiple sets of coordinates may be specified to draw a polybeÌzier. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybeÌzier."	| p1 p2 |		p1 := self readPoint.	p2 := self readPoint.		p2 ifNil: [ self error: 'Invalid path data: 2 points expected for quadratic bezier '].		self curveVia: p1 to: p2. 		[ 		(p1 := self readPoint) ifNil: [ ^ self ].		p2 := self readPoint.		p2 ifNil: [ self error: 'Invalid path data: 2 points expected for quadratic bezier '].		self curveVia: p1 to: p2. 	] repeat.</body><body package="Roassal2-Pharo">readPoint	" A path data permits specifying points without comma separator "	| x y pos |	self skipBlanksAndComma.	pos := stream position.	x := self nextNumber ifNil: [ ^ nil ].		self skipBlanksAndComma.		y := self nextNumber ifNil: [ stream position: pos. ^ nil ].		^ x @ y</body><body package="Roassal2-Pharo">reflectedCubicBezier"S/s (x2 y2 x y)+cubic BÃ©zier curve from the current point to (x,y). The first control point is assumed to be the reflection of the second control point on the previous command relative to the current point. (If there is no previous command or if the previous command was not an C, c, S or s, assume the first control point is coincident with the current point.) (x2,y2) is the second control point (i.e., the control point at the end of the curve). S (uppercase) indicates that absolute coordinates will follow; s (lowercase) indicates that relative coordinates will follow. Multiple sets of coordinates may be specified to draw a polybÃ©zier. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybÃ©zier."	| p1 p2 |		p1 := self readPoint.	p2 := self readPoint.		p2 ifNil: [ self error: 'Invalid path data: 2 points expected for reflected cubic bezier '].	self reflectedCurveVia: p1 to: p2. 		[ 		(p1 := self readPoint) ifNil: [ ^ self ].		p2 := self readPoint.		p2 ifNil: [ self error: 'Invalid path data: 2 points expected for reflected cubic bezier '].		self reflectedCurveVia: p1 to: p2. 	] repeat.</body><body package="Roassal2-Pharo">smoothQuadraticBezier	self notYetImplemented</body><body package="Roassal2-Pharo">vLineTo"V (absolute) v (relative)Draws a vertical line from the current point (cpx, cpy) to (cpx, y). V (uppercase) indicates that absolute coordinates will follow; v (lowercase) indicates that relative coordinates will follow. Multiple y values can be provided (although usually this doesn't make sense). At the end of the command, the new current point becomes (cpx, y) for the final value of y."	| y |		self skipBlanks.	y := self nextNumber ifNil: [ ^ self error: 'number expected for horizontal line segment'   ].		self vLineTo: y.		[ self skipBlanks. y := self nextNumber. y notNil ] whileTrue: [		self vLineTo: y	].</body></methods><methods><class-id>Roassal2.ASPathConverter</class-id> <category>path commands</category><body package="Roassal2-Pharo">A	self absolute; ellipticalArc</body><body package="Roassal2-Pharo">C	^ self absolute; cubicBezier</body><body package="Roassal2-Pharo">H	self absolute; hLineTo</body><body package="Roassal2-Pharo">L	self absolute; lineTo.</body><body package="Roassal2-Pharo">M	"move-to absolute"	" 		Start a new sub-path at the given (x,y) coordinate. M (uppercase) indicates that absolute coordinates will follow; m (lowercase) indicates that relative coordinates will follow. 		If a relative moveto (m) appears as the first element of the path, then it is treated as a pair of absolute coordinates. 		If a moveto is followed by multiple pairs of coordinates, the subsequent pairs are treated as implicit lineto commands.		"	self absolute; moveTo.</body><body package="Roassal2-Pharo">Q	self absolute; quadraticBezier</body><body package="Roassal2-Pharo">S	self absolute; reflectedCubicBezier</body><body package="Roassal2-Pharo">T	self absolute; smoothQuadraticBezier</body><body package="Roassal2-Pharo">V	self absolute; vLineTo</body><body package="Roassal2-Pharo">Z	self close</body><body package="Roassal2-Pharo">a	self relative; ellipticalArc</body><body package="Roassal2-Pharo">c	^ self relative; cubicBezier</body><body package="Roassal2-Pharo">h	self relative; hLineTo</body><body package="Roassal2-Pharo">l	self relative; lineTo.</body><body package="Roassal2-Pharo">m	"move-to relative"	" 		Start a new sub-path at the given (x,y) coordinate. M (uppercase) indicates that absolute coordinates will follow; m (lowercase) indicates that relative coordinates will follow. 		If a relative moveto (m) appears as the first element of the path, then it is treated as a pair of absolute coordinates. 		If a moveto is followed by multiple pairs of coordinates, the subsequent pairs are treated as implicit lineto commands.		"	| pt |	pt := self readPoint.	pt ifNil: [ self error: 'a point expected following after M/m command'].	path isEmpty ifTrue: [ 			self absolute; moveTo: pt; relative ] 		ifFalse: [ self relative; moveTo: pt ].	[ pt := self readPoint. pt notNil ] whileTrue: [ self lineTo: pt ]</body><body package="Roassal2-Pharo">q	self relative; quadraticBezier</body><body package="Roassal2-Pharo">s	self relative; reflectedCubicBezier</body><body package="Roassal2-Pharo">t	self relative; smoothQuadraticBezier</body><body package="Roassal2-Pharo">v	self relative; vLineTo</body><body package="Roassal2-Pharo">z	self close</body></methods><methods><class-id>Roassal2.ASPathConverter</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Roassal2.ASPathConverter</class-id> <category>converting</category><body package="Roassal2-Pharo">assertValidCommand: aCharacter 	( #( $M $m $Z $z $L $l $H $h $V $v $C $c $S $s $Q $q $T $t $A $a ) includes: aCharacter ) ifFalse: [		self error: 'invalid path segment command' ]</body></methods><methods><class-id>Roassal2.ASPathConverter</class-id> <category>accessing</category><body package="Roassal2-Pharo">bbox	^ 100@100</body></methods><methods><class-id>Roassal2.RTSVGArrowHeadMarker</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addPath: stream		stream		nextPutAll: (' d="M 0 0 L &lt;1p&gt; &lt;2p&gt; L 0 &lt;1p&gt; z" ' expandMacrosWith: xExtent with: ((yExtent/2) rounded)).</body></methods><methods><class-id>Roassal2.RTMondrianFrame</class-id> <category>frames</category><body package="Roassal2-Builder-Mondrian">childrenFrames	^ childrenFrame copy</body><body package="Roassal2-Builder-Mondrian">numberOfAllFrames	^ 1 + (childrenFrame inject: 0 into: [ :sum :frame | sum + frame numberOfAllFrames ])</body><body package="Roassal2-Builder-Mondrian">numberOfChildrenFrames	^ childrenFrame size</body><body package="Roassal2-Builder-Mondrian">pushFrame: aFrame	childrenFrame add: aFrame.	aFrame parentFrame: self.	aFrame depth: self depth + 1</body></methods><methods><class-id>Roassal2.RTMondrianFrame</class-id> <category>accessing</category><body package="Roassal2-Builder-Mondrian">depth	"Return the depth of the frame, as integer"	^ depth</body><body package="Roassal2-Builder-Mondrian">depth: anInteger	"Set the depth of the frame, an integer"	depth := anInteger</body><body package="Roassal2-Builder-Mondrian">elements	^ elements</body><body package="Roassal2-Builder-Mondrian">parentFrame	^ parentFrame</body><body package="Roassal2-Builder-Mondrian">parentFrame: anObject	parentFrame := anObject</body></methods><methods><class-id>Roassal2.RTMondrianFrame</class-id> <category>initialization</category><body package="Roassal2-Builder-Mondrian">initialize	super initialize.	depth := 1.	childrenFrame := OrderedCollection new.	elements := RTGroup new.</body></methods><methods><class-id>Roassal2.RTMondrianFrame</class-id> <category>adding</category><body package="Roassal2-Builder-Mondrian">addElements: someElements	elements addAll: someElements</body></methods><methods><class-id>Roassal2.RTMondrianFrame</class-id> <category>accessing-computed</category><body package="Roassal2-Builder-Mondrian">numberOfElements	^ elements size</body></methods><methods><class-id>Roassal2.TRRemoveCallback</class-id> <category>testing</category><body package="Roassal2-Trachel-Callbacks">isRemoveCallback	^ true</body></methods><methods><class-id>Roassal2.TRRemoveCallback</class-id> <category>linking</category><body package="Roassal2-Trachel-Callbacks">removeShape: aTRShape 	^ block cull: aTRShape</body></methods><methods><class-id>Roassal2.RTDirectLayoutTranslator</class-id> <category>hook</category><body package="Roassal2-Layouts">translate: element to: newPosition	element translateTo: newPosition</body></methods><methods><class-id>Roassal2.RTDirectLayoutTranslator class</class-id> <category>testing</category><body package="Roassal2-Layouts">isDefault	^ true</body></methods><methods><class-id>Roassal2.RTCompoundElement</class-id> <category>adding</category><body package="Roassal2-Core">add: anElement	children add: anElement.</body><body package="Roassal2-Core">addAll: someElements	children addAll: someElements</body><body package="Roassal2-Core">addedIn: aView	super addedIn: aView.	"aView addAll: children."	children do: [ :c | c addedIn: aView ].	self doLayoutIfNecessary.	self doNesting</body></methods><methods><class-id>Roassal2.RTCompoundElement</class-id> <category>initialization</category><body package="Roassal2-Core">initialize	super initialize.	children := RTGroup new.</body></methods><methods><class-id>Roassal2.RTCompoundElement</class-id> <category>accessing</category><body package="Roassal2-Core">children	"Defensive copy"	^ children copy</body><body package="Roassal2-Core">layout	"We do a lazy initialization"	layoutBuilder := RTLayoutBuilder new.	^ layoutBuilder</body></methods><methods><class-id>Roassal2.RTCompoundElement</class-id> <category>rendering</category><body package="Roassal2-Core">renderOn: trachelCanvas	super renderOn: trachelCanvas.	children do: [ :c | c renderOn: trachelCanvas ]</body></methods><methods><class-id>Roassal2.RTCompoundElement</class-id> <category>as yet unclassified</category><body package="Roassal2-Core">doLayoutIfNecessary	"Perform a layout on the children elements if necessary."	layoutBuilder ifNil: [ ^ self ].	layoutBuilder setUpElements: children</body><body package="Roassal2-Core">doNesting	RTNest new on: self nest: children</body></methods><methods><class-id>Roassal2.RTEdge</class-id> <category>accessing</category><body package="Roassal2-Core">addedIn: aView	view := aView.	view addEdge: self</body><body package="Roassal2-Core">center	^ self encompassingRectangle center.</body><body package="Roassal2-Core">encompassingRectangle	"Return the encompassing rectangle of the elements"	^ Rectangle merging: (Array with: self from encompassingRectangle with: self to encompassingRectangle)</body><body package="Roassal2-Core">from	"Return the starting element"	^ from</body><body package="Roassal2-Core">from: anElement	from ifNotNil: [ :element | element removeConnectedEdge: self ].	from := anElement.	anElement addConnectedEdge: self</body><body package="Roassal2-Core">from: fromElement to: toElement	self from: fromElement.	self to: toElement</body><body package="Roassal2-Core">height	^ self encompassingRectangle height.</body><body package="Roassal2-Core">lineSegments	^ Array with: (RTLineSegment		from: (self shape startingPointOf: self)		to: (self shape endingPointOf: self))</body><body package="Roassal2-Core">to	"Return the ending element"	^ to</body><body package="Roassal2-Core">to: anElement	to ifNotNil: [ :element | element removeConnectedEdge: self ].	to := anElement.	anElement addConnectedEdge: self</body></methods><methods><class-id>Roassal2.RTEdge</class-id> <category>initialization</category><body package="Roassal2-Core">initialize	super initialize.	shouldBeUsedInLayout := true</body></methods><methods><class-id>Roassal2.RTEdge</class-id> <category>testing</category><body package="Roassal2-Core">isEdge	^ true</body><body package="Roassal2-Core">isUsedInLayout	"If return true, then it is considered in the layout"	^ shouldBeUsedInLayout</body></methods><methods><class-id>Roassal2.RTEdge</class-id> <category>actions</category><body package="Roassal2-Core">moveBehind: elements	self trachelShape pushBehindAll: (elements collect: [:each | each trachelShape])</body><body package="Roassal2-Core">moveBehindItsExtremities	"Make the edge be displayed before its extremities are displayed. This is useful to not have the edge over the extremity nodes"	self trachelShape pushBehindAll: (Array with: self from trachelShape with: self to trachelShape)</body><body package="Roassal2-Core">notUseInLayout	"Make the edge not used by layout"	shouldBeUsedInLayout := false</body><body package="Roassal2-Core">remove	view ifNil: [ self error: 'cannot remove an element that is not part of a view' ].	to connectedEdges remove: self ifAbsent: [ ].	from connectedEdges remove: self ifAbsent: [ ].	view removeEdge: self.	view := nil</body><body package="Roassal2-Core">translateBy: aPoint	"do nothing"</body></methods><methods><class-id>Roassal2.RTEdge</class-id> <category>visitor</category><body package="Roassal2-Core">accept: aVisitor	aVisitor visitEdge: self.</body></methods><methods><class-id>Roassal2.RTEdge</class-id> <category>updating</category><body package="Roassal2-Core">updateFromTo	"Update the trachel shape and reset the path. This has the effect of moving the visual widget"	shape updateFromToFor: self</body></methods><methods><class-id>Roassal2.RTEdge class</class-id> <category>DEPRECATED - edge construction</category><body package="Roassal2-Core">buildEdgesFromAssociations: associations using: aLineShape inView: view	"associations could be {2 -&gt; 5 . 1 -&gt; 5 }.	 Takes the model of element into account"		| edges associationsOfElements |	self deprecated: 'Please use RTEdgeBuilder instead'.	associationsOfElements := associations collect: [ :assoc | (view elementFromModel: assoc key) -&gt; (view elementFromModel: assoc value) ].	associationsOfElements isEmpty ifTrue: [ ^ #() ].		edges := OrderedCollection new.	associationsOfElements do: [ :associationOfTwoElements |				| edge |				edge := RTEdge from: associationOfTwoElements key to: associationOfTwoElements value. 				edge + aLineShape.				edges add: edge ].	view addAll: edges.	^ edges</body><body package="Roassal2-Core">buildEdgesFromElements: elements from: fromBlock to: toBlock	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operates on the model of the elements"	^ self buildEdgesFromElements: elements from: fromBlock to: toBlock using: RTLine</body><body package="Roassal2-Core">buildEdgesFromElements: elements from: fromBlock to: toBlock in: view	"Handy method to easily build edges. Return a list of edges"	^ self buildEdgesFromElements: elements from: fromBlock to: toBlock using: RTLine in: view</body><body package="Roassal2-Core">buildEdgesFromElements: elements from: fromBlock to: toBlock inView: view	"Handy method to easily build edges. Return a list of edges"	^ self buildEdgesFromElements: elements from: fromBlock to: toBlock using: RTLine inView: view</body><body package="Roassal2-Core">buildEdgesFromElements: elements from: fromBlock to: toBlock using: aLineShape	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	| edges container fromElement toElement elementsWithModels |	self deprecated: 'Please use RTEdgeBuilder instead'.	elements isEmpty ifTrue: [ ^ #() ].	edges := OrderedCollection new.	elementsWithModels := elements select: [ :el | el model notNil ].	elementsWithModels do: [ :element |		container := element parent.		fromElement := container elementFromModel: (fromBlock rtValue: element model).		toElement := container elementFromModel: (toBlock rtValue: element model).		(fromElement notNil and: [ toElement notNil ])			ifTrue: [  				| edge |				edge := RTEdge from: fromElement to: toElement. 				edge + aLineShape.				edges add: edge.				container add: edge ] ].	^ edges</body><body package="Roassal2-Core">buildEdgesFromElements: elements from: fromBlock to: toBlock using: aLineShape inView: view	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	self deprecated: 'Please use RTEdgeBuilder instead'.	view addAll: (self buildEdgesFromElements: elements from: fromBlock to: toBlock using: aLineShape)</body><body package="Roassal2-Core">buildEdgesFromElements: elements from: fromBlock toAll: toBlock inView: view	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	"toBlock should return a collection of models"	self deprecated: 'Please use RTEdgeBuilder instead'.	^ self buildEdgesFromElements: elements from: fromBlock toAll: toBlock using: RTLine new inView: view</body><body package="Roassal2-Core">buildEdgesFromElements: elements from: fromBlock toAll: toBlock using: aLineShape	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	"toBlock should return a collection of models"	| edges container fromElement toElements elementsWithModels |	self deprecated: 'Please use RTEdgeBuilder instead'.	elements isEmpty ifTrue: [ ^ #() ].	edges := OrderedCollection new.	elementsWithModels := elements select: [ :el | el model notNil ].		elementsWithModels do: [ :element |		container := element view.		fromElement := container elementFromModel: (fromBlock rtValue: element model).				"We get the list of elements that corresponds to (toBlock roValues: element model)"		toElements := OrderedCollection new.		(toBlock rtValue: element model) do: [ :model | 			| v |			v := container elementFromModel: model.			v notNil ifTrue: [ toElements add: v ] ].						(fromElement notNil and: [ toElements notEmpty ])			ifTrue: [  				toElements do: [ :toElement |					| edge |					edge := RTEdge from: fromElement to: toElement. 					edge + aLineShape.					edges add: edge.					container add: edge ] ]  ].	^ edges</body><body package="Roassal2-Core">buildEdgesFromElements: elements from: fromBlock toAll: toBlock using: aLineShape inView: view	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	"toBlock should return a collection of models"	| es |	self deprecated: 'Please use RTEdgeBuilder instead'.	es := self buildEdgesFromElements: elements from: fromBlock toAll: toBlock using: aLineShape.	view addAll: es.	^ es</body><body package="Roassal2-Core">buildEdgesFromObjects: objects from: fromBlock to: toBlock inView: view	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	self deprecated: 'Please use RTEdgeBuilder instead'.	^ self buildEdgesFromObjects: objects from: fromBlock to: toBlock using: RTLine inView: view</body><body package="Roassal2-Core">buildEdgesFromObjects: objects from: fromBlock to: toBlock inView: view scope: aGroup	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	self deprecated: 'Please use RTEdgeBuilder instead'.	^ self buildEdgesFromObjects: objects from: fromBlock to: toBlock using: RTLine inView: view scope: aGroup</body><body package="Roassal2-Core">buildEdgesFromObjects: objects from: fromBlock to: toBlock scope: aGroup	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	self deprecated: 'Please use RTEdgeBuilder instead'.	^ self buildEdgesFromObjects: objects from: fromBlock to: toBlock using: RTLine new scope: aGroup</body><body package="Roassal2-Core">buildEdgesFromObjects: objects from: fromBlock to: toBlock using: aLineShape inView: view	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	self deprecated: 'Please use RTEdgeBuilder instead'.	^ self buildEdgesFromObjects: objects from: fromBlock to: toBlock using: aLineShape inView: view scope: (RTGroup withAll: view elements)</body><body package="Roassal2-Core">buildEdgesFromObjects: objects from: fromBlock to: toBlock using: aLineShape inView: view scope: aGroup	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	| es |	self deprecated: 'Please use RTEdgeBuilder instead'.	es := self buildEdgesFromObjects: objects from: fromBlock to: toBlock using: aLineShape scope: aGroup.	view addAll: es.	^ es</body><body package="Roassal2-Core">buildEdgesFromObjects: objects from: fromBlock to: toBlock using: aLineShape scope: aGroup	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	| edges fromElement toElement |	self deprecated: 'Please use RTEdgeBuilder instead'.	objects isEmpty ifTrue: [ ^ #() ].	edges := RTGroup new.	objects do: [ :object |		fromElement := aGroup elementFromModel: (fromBlock rtValue: object).		toElement := aGroup elementFromModel: (toBlock rtValue: object).		(fromElement notNil and: [ toElement notNil ])			ifTrue: [  				| edge |				edge := RTEdge from: fromElement to: toElement. 				edge model: object.				edge + aLineShape.				edges add: edge ] ].	^ edges</body><body package="Roassal2-Core">buildEdgesFromObjects: objects from: fromBlock toAll: toAllBlock inView: view	self deprecated: 'Please use RTEdgeBuilder instead'.	^ self buildEdgesFromObjects: objects from: fromBlock toAll: toAllBlock using: RTLine new inView: view scope: (RTGroup withAll: view elements)</body><body package="Roassal2-Core">buildEdgesFromObjects: objects from: fromBlock toAll: toAllBlock scope: aGroup	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toAllBlock operate on the model of the elements"	self deprecated: 'Please use RTEdgeBuilder instead'.	^ self buildEdgesFromObjects: objects from: fromBlock toAll: toAllBlock using: RTLine new scope: aGroup</body><body package="Roassal2-Core">buildEdgesFromObjects: objects from: fromBlock toAll: toAllBlock using: aLineShape inView: view 	self deprecated: 'Please use RTEdgeBuilder instead'.	^ self buildEdgesFromObjects: objects from: fromBlock toAll: toAllBlock using: aLineShape inView: view scope: (RTGroup withAll: view elements)</body><body package="Roassal2-Core">buildEdgesFromObjects: objects from: fromBlock toAll: toAllBlock using: aLineShape inView: view scope: aGroup	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toAllBlock operate on the model of the elements"	| edges fromElement toElement |	self deprecated: 'Please use RTEdgeBuilder instead'.	edges := RTGroup new.	objects isEmpty ifTrue: [ ^ edges ].	objects do: [ :object |		fromElement := aGroup elementFromModel: (fromBlock rtValue: object).		(toAllBlock rtValue: object) do: [ :toObject |			toElement := aGroup elementFromModel: toObject.			(fromElement notNil and: [ toElement notNil ])				ifTrue: [  					(fromElement ~~ toElement) ifTrue: 						[ | edge |						edge := RTEdge from: fromElement to: toElement. 						edge + aLineShape.						edges add: edge.						view add: edge ] ] ] ].	^ edges</body><body package="Roassal2-Core">buildEdgesFromObjects: objects from: fromBlock toAll: toAllBlock using: aLineShape scope: aGroup	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toAllBlock operate on the model of the elements"	| edges fromElement toElement |	self deprecated: 'Please use RTEdgeBuilder instead'.	objects isEmpty ifTrue: [ ^ #() ].	edges := RTGroup new.	objects do: [ :object |		fromElement := aGroup elementFromModel: (fromBlock rtValue: object).		(toAllBlock rtValue: object) do: [ :toObject |			toElement := aGroup elementFromModel: toObject.			(fromElement notNil and: [ toElement notNil ])				ifTrue: [  					(fromElement ~~ toElement) ifTrue: 						[ | edge |						edge := RTEdge from: fromElement to: toElement. 						edge + aLineShape.						edges add: edge.						 ] ] ] ].	^ edges</body></methods><methods><class-id>Roassal2.RTEdge class</class-id> <category>public</category><body package="Roassal2-Core">from: fromElement to: toElement	"Takes instances of RTElement as arguments"	^ self 		on: (Association key: fromElement model value: toElement model)		from: fromElement 		to: toElement</body><body package="Roassal2-Core">from: fromElement toAll: toElementss	"Takes instances of RTElement as first argument and a collection of RTElements as second argument"	^ RTGroup withAll: (toElementss collect: [ :e | self from: fromElement to: e ])</body><body package="Roassal2-Core">on: aModel from: fromElement to: toElement	^ (self model: aModel) from: fromElement to: toElement; yourself</body></methods><methods><class-id>Roassal2.TRFocusRightMost</class-id> <category>hooks</category><body package="Roassal2-Trachel-Core">on: canvas	| encompassingRectangle |	encompassingRectangle := self encompassingRectangleOf: canvas shapes. 	canvas camera translateTo: encompassingRectangle rightCenter</body></methods><methods><class-id>Roassal2.GLine</class-id> <category>properties</category><body package="Roassal2-Pharo">cutWith: frame| coll |coll := OrderedCollection new.frame edges	collect: [ :edge | edge intersectionPointWithLine: self ]	thenDo: [ :p |		(p notNil and: [ coll noneSatisfy: [ :p2 | p2 =~ p ] ])			ifTrue: [ coll add: p ] ] .coll isEmpty	ifTrue:  [ ^ nil ]	ifFalse: [ ^ GSegment with: coll first with: coll second ]</body><body package="Roassal2-Pharo">hasPoint: aPoint	^ a * aPoint x + (b * aPoint y) + c =~ 0</body><body package="Roassal2-Pharo">hasPoint: aPoint withApproximation: approx	(self a * aPoint x) + (self b * aPoint y) + self c - (((self a * approx) + (self b * approx))abs + self c)  lesserOrDifferentThan: 0.	^ "(self a * aPoint x) + (self b * aPoint y) + self c &lt;=~ (2 * approx)"	(self dist: aPoint) lesserOrDifferentThan: (2 * approx)</body><body package="Roassal2-Pharo">parallelTo: aLine	^ (self a isZero &amp; aLine a isZero) or:	[ (self b isZero &amp; aLine b isZero) or:	[ (aLine a isZero | aLine b isZero) not and:	[ (self a / aLine a) = (self b / aLine b) ] ] ]</body><body package="Roassal2-Pharo">pointsWithDist1: aNumber to: aPoint	| deltaX delta |		"(self hasPoint: aPoint) ifFalse: [		Error signal: 'This line does not contain ', aPoint asString ]."	b = 0 ifTrue: [		^ Array with:  aPoint + (0 @ aNumber) with: aPoint - (0 @ aNumber)  ].		deltaX := aNumber / ((a / b) squared + 1) sqrt.			delta := deltaX @ (deltaX * a / b) negated.	^ Array with: aPoint + delta with: aPoint - delta</body><body package="Roassal2-Pharo">pointsWithDist: aNumber to: aPoint	| deltaX delta |		(self hasPoint: aPoint) ifFalse: [		Error signal: 'This line does not contain ', aPoint asString ].	b = 0 ifTrue: [		^ Array with: aPoint + (0 @ aNumber) with: aPoint - (0 @ aNumber) ].		deltaX := aNumber / ((a / b) squared + 1) sqrt.			delta := deltaX @ (deltaX * a / b) negated.	^ Array with: aPoint + delta with: aPoint - delta</body><body package="Roassal2-Pharo">through: aPoint1 and: aPoint2 hasPoint: aPoint	^(GTriangle with: aPoint1 with: aPoint2 with: aPoint) isDegenerate .</body><body package="Roassal2-Pharo">xFor: anY	^ ((anY * b + c) / a) negated</body><body package="Roassal2-Pharo">yFor: anX	^ ((anX * a + c) / b) negated</body></methods><methods><class-id>Roassal2.GLine</class-id> <category>accessing</category><body package="Roassal2-Pharo">a	^a</body><body package="Roassal2-Pharo">b	^b</body><body package="Roassal2-Pharo">c	^c</body></methods><methods><class-id>Roassal2.GLine</class-id> <category>rectangle functions</category><body package="Roassal2-Pharo">intersect: aGLine 	| xi yi |	(self parallelTo: aGLine) ifTrue: [ ^ nil ].						yi := (self c * (aGLine a) - (self a * (aGLine c)))			/ 			(self a * (aGLine b) - (self b * (aGLine a))).	xi := self a isZero		ifTrue: [			 ( aGLine b * yi + (aGLine c)) negated / (aGLine a)]		ifFalse: [			 ( self b * yi + self c) negated / self a].		^xi@yi.</body></methods><methods><class-id>Roassal2.GLine</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body><body package="Roassal2-Pharo">initializeWithA: aNumber1 b: aNumber2 c: aNumber3	super initialize.	a := aNumber1.	b := aNumber2.	c := aNumber3.</body></methods><methods><class-id>Roassal2.GLine</class-id> <category>distance functions</category><body package="Roassal2-Pharo">dist: p	^ ( ( a * p x ) + ( b * p y ) + c )abs	/	( ( a * a + ( b * b ) ) sqrt)</body></methods><methods><class-id>Roassal2.GLine</class-id> <category>comparing</category><body package="Roassal2-Pharo">= line ^( self a asFloat =~ line a asFloat and: [ self b asFloat =~ line b asFloat and: [ self c asFloat =~ line c asFloat ] ] )  or:[ ( (line a notEqualTo: 0) and: [ (line b notEqualTo: 0) and: [ line c notEqualTo: 0 ] ] ) 	ifTrue: [ ( self a / line a ) asFloat =~ ( self b / line b ) asFloat and: [ ( self b / line b ) asFloat =~ ( self c / line c ) asFloat] ]	ifFalse:[ ( (self a notEqualTo: 0) and: [(self b notEqualTo: 0) and: [ self c notEqualTo: 0 ]]) 		ifTrue: [ ( line a / self a ) asFloat =~ ( line b / self b) asFloat and: [ ( line b / self b ) asFloat =~ ( line c / self c ) asFloat ] ]		ifFalse:[ ( (line a notEqualTo: 0) and: [ line c notEqualTo: 0 ] )			ifTrue:[ ( self a / line a ) asFloat =~ ( self c / line c ) asFloat]			ifFalse:[ ( (line b notEqualTo: 0) and:[ line c notEqualTo: 0] )				ifTrue:[ ( self b / line b ) asFloat =~ ( self c / line c ) asFloat ] 				ifFalse:[ ( (line a notEqualTo: 0) and:[ line b notEqualTo: 0] )					ifTrue:[ ( self a / line a ) asFloat =~ ( self b / line b ) asFloat ] 					ifFalse:[ ( line a =~ 0 and: [ line c =~ 0 ] ) or: [ ( line b =~ 0 and: [ line c =~ 0 ] ) ]					]				] 			]]]	]</body><body package="Roassal2-Pharo">hash^( a hash  + b hash + c hash ) hashMultiply</body></methods><methods><class-id>Roassal2.GLine</class-id> <category>converting</category><body package="Roassal2-Pharo">asLine	^ self</body></methods><methods><class-id>Roassal2.GLine</class-id> <category>printing</category><body package="Roassal2-Pharo">printOn: aStream	a printOn: aStream.	aStream nextPutAll: 'x '.	b sign &gt;= 0 ifTrue: [ 		aStream nextPut: $+ ].	b printOn: aStream.	aStream nextPutAll: 'y '.	c sign &gt;= 0 ifTrue: [ 		aStream nextPut: $+ ].	c printOn: aStream.	aStream nextPutAll: ' = 0'.</body></methods><methods><class-id>Roassal2.GLine class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">a: aNumber1 b: aNumber2 c: aNumber3	^ self new initializeWithA: aNumber1 b: aNumber2 c: aNumber3</body><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body><body package="Roassal2-Pharo">through: aPoint1 and: aPoint2|ai bi ci|(aPoint1 y) = (aPoint2 y) ifTrue:[ ^ GLine		a: 0 b: 1 c: ((aPoint1 y) negated)].(aPoint1 x) = (aPoint2 x) ifTrue:[ 	^ GLine		a: 1 b: 0 c: ((aPoint1 x) negated)].	ai := (aPoint1 y) - (aPoint2 y). bi := (aPoint2 x) - (aPoint1 x).ci := ((aPoint1 x) - (aPoint2 x)) * (aPoint1 y) + ( ((aPoint2 y) - (aPoint1 y)) * (aPoint1 x) ).^ self	 a:ai b: bi c: ci</body></methods><methods><class-id>Roassal2.RTHTML5Exporter</class-id> <category>defaults</category><body package="Roassal2-Exporter-HTML5">defaultDirectory	^ TRPlatform current workingDirectory</body><body package="Roassal2-Exporter-HTML5">defaultFileName	^ 'index.html'</body><body package="Roassal2-Exporter-HTML5">defaultRoassalJSfile	^ 'roassal.js'.</body><body package="Roassal2-Exporter-HTML5">defaultTitle	^ 'Roassal Page'.</body></methods><methods><class-id>Roassal2.RTHTML5Exporter</class-id> <category>accessing</category><body package="Roassal2-Exporter-HTML5">directory	^ directory ifNil: [ directory := self defaultDirectory ].</body><body package="Roassal2-Exporter-HTML5">directory: aFile	directory := aFile.</body><body package="Roassal2-Exporter-HTML5">exportFixedShapes	^ exportFixedShapes</body><body package="Roassal2-Exporter-HTML5">exportFixedShapes: aBool	exportFixedShapes := aBool</body><body package="Roassal2-Exporter-HTML5">fileName	^ fileName ifNil: [ fileName := self defaultFileName. ]</body><body package="Roassal2-Exporter-HTML5">fileName: string	fileName := string.</body><body package="Roassal2-Exporter-HTML5">jsreference	^ jsrefenrece</body><body package="Roassal2-Exporter-HTML5">jsreference: aString	jsrefenrece := aString.</body><body package="Roassal2-Exporter-HTML5">maxSizeForString	^ maxSizeForString</body><body package="Roassal2-Exporter-HTML5">maxSizeForString: size	maxSizeForString := size.</body><body package="Roassal2-Exporter-HTML5">roassalJSfile	^ roassalJSfile ifNil: [ roassalJSfile := self defaultRoassalJSfile ]</body><body package="Roassal2-Exporter-HTML5">roassalJSfile: string	roassalJSfile := string</body><body package="Roassal2-Exporter-HTML5">shouldCreateJS	^ shouldCreateJS</body><body package="Roassal2-Exporter-HTML5">shouldCreateJS: aBool	shouldCreateJS := aBool</body><body package="Roassal2-Exporter-HTML5">stream	^ stream</body><body package="Roassal2-Exporter-HTML5">title	^ title ifNil: [ title := self defaultTitle ]</body><body package="Roassal2-Exporter-HTML5">title: string	title := string</body></methods><methods><class-id>Roassal2.RTHTML5Exporter</class-id> <category>initialize-release</category><body package="Roassal2-Exporter-HTML5">createStream	| dir  filename |	dir := self directory.	filename := dir / self fileName.	filename exists ifTrue: [ filename delete ].	stream := filename writeStream.	^ filename</body><body package="Roassal2-Exporter-HTML5">defaultMarginScale	self marginScale: 0.1.</body><body package="Roassal2-Exporter-HTML5">initialize	super initialize.	self exportFixedShapes: true.	self shouldCreateJS: true.	self jsreference: 'roassal.js'.	self maxSizeForString: 500.	self defaultMarginScale.</body></methods><methods><class-id>Roassal2.RTHTML5Exporter</class-id> <category>Pillar utility</category><body package="Roassal2-Exporter-HTML5">getIFrameDefFromView: aView label: aLabelAsString directory: aDirectory	"This method is useful when invoked from within Pillar"		| htmlFileName writeStream |	htmlFileName := (aDirectory / aLabelAsString, 'html') pathString.	writeStream := htmlFileName asFileReference writeStream.	RTHTML5Exporter new directory: aDirectory; export: aView toStream: writeStream.	^ '&lt;iframe src="', htmlFileName, '" 		name="', aLabelAsString, '" 		style="border:none" 		width="', (aView canvas encompassingRectangle width * (aView canvas camera scale + self marginScale )) printString,'" 		height="', (aView canvas encompassingRectangle height * (aView canvas camera scale + self marginScale )) printString,'"&gt;&lt;/iframe&gt;'</body><body package="Roassal2-Exporter-HTML5">insert: aView named: aName inPillarStream: aStream	self insert: aView named: aName inPillarStream: aStream directory: self defaultDirectory</body><body package="Roassal2-Exporter-HTML5">insert: aView named: aName inPillarStream: aStream directory: aDirectory	"Here is an example on how to use this method	PRHTMLWriter defaultConfigurations anyOne    inputString: '!HelloSome text with *a link to Pharo&gt;http://www.pharo.org*.!!WorldHere is a small Roassal visualization[[[eval=trueb := RTMondrian new.b nodes: Collection withAllSubclasses.b edges connectFrom: #superclass.b layout tree.b build.v := b view.			RTHTML5Exporter new insert: v named: ''Example Roassal'' inPillarStream: stream]]]';    outputFile: 'myFirstPillarExport.html' asFileReference;    export	"	| s |	s := self getIFrameDefFromView: aView label: aName directory: aDirectory.	aStream nextPutAll: '{{{ &lt;BR&gt;', s, ' }}}'</body><body package="Roassal2-Exporter-HTML5">marginScale	^ marginScale</body><body package="Roassal2-Exporter-HTML5">marginScale: aScale	marginScale := aScale</body></methods><methods><class-id>Roassal2.RTHTML5Exporter</class-id> <category>helpers</category><body package="Roassal2-Exporter-HTML5">addEnd	self writeText:'}		&lt;/script&gt;	&lt;/head&gt;	&lt;body&gt;	&lt;/body&gt;&lt;/html&gt;'.</body><body package="Roassal2-Exporter-HTML5">addStart: aView	self writeText: '&lt;!DOCTYPE html&gt;&lt;html&gt;	&lt;head&gt;		&lt;title&gt;',self title, '&lt;/title&gt;		&lt;script type="text/javascript"&gt;			var protocol = ("https:" == document.location.protocol)? "https" : "http";			document.write(unescape("%3Cscript src=\""+ protocol + "://code.jquery.com/jquery-1.11.0.min.js\" type=\"text/javascript\"%3E%3C/script%3E"));			document.write(unescape("%3Cscript src=\""+ protocol + "://code.jquery.com/jquery-migrate-1.2.1.min.js\" type=\"text/javascript\"%3E%3C/script%3E"));		&lt;/script&gt;		&lt;script src="',self roassalJSfile,'"&gt;&lt;/script&gt;		&lt;style type="text/css"&gt;			body, svg { 				margin: 0;				padding: 0;				-moz-user-select:-moz-none;				-moz-user-select: none;				-o-user-select: none;				-khtml-user-select:none;				-webkit-user-select:none;				-ms-user-select:none;				user-select:none;			}			text{				cursor: default;			}		&lt;/style&gt;		&lt;script type="text/javascript"&gt;function buildView() {	'.</body><body package="Roassal2-Exporter-HTML5">createJS	| dir s |	dir := self directory.	s := dir / 'roassal.js'.	"s exists ifTrue: [ ^ self ]."	s exists ifTrue: [ s delete ].	s := s writeStream.	[ self to: s writeText: self roassalJSContent ] ensure: [ s close ].</body><body package="Roassal2-Exporter-HTML5">exportSVG: aView	| visitor |	visitor := RTJavascriptVisitor new.	visitor maxSize: self maxSizeForString.	visitor exportFixedShapes: self exportFixedShapes.	visitor stream: stream.	visitor visitView: aView.</body><body package="Roassal2-Exporter-HTML5">to: outputStream writeText: text	outputStream nextPutAll: (text copyReplaceAll: String cr with: String crlf)</body><body package="Roassal2-Exporter-HTML5">writeText: text	self to: stream writeText: text</body></methods><methods><class-id>Roassal2.RTHTML5Exporter</class-id> <category>public-exporting</category><body package="Roassal2-Exporter-HTML5">export: aView	"This is a public method"	fileName := self createStream.	self export: aView toStream: stream.	^ fileName</body><body package="Roassal2-Exporter-HTML5">export: aView toStream: aStream	self assert: [ aStream isStream ].	self shouldCreateJS ifTrue: [ self createJS. ].	stream := aStream.	[		self addStart: aView.		self exportSVG: aView.		self addEnd.	] ensure: [ stream close. ].</body></methods><methods><class-id>Roassal2.RTHTML5Exporter</class-id> <category>Pillar example</category><body package="Roassal2-Exporter-HTML5">exampleWithPillar01"PRHTMLWriter defaultConfigurations anyOne    inputString: '!HelloSome text with *a link to Pharo&gt;http://www.pharo.org*.!!WorldHere is a small Roassal visualization[[[eval=trueb := RTMondrian new.b nodes: Collection withAllSubclasses.b edges connectFrom: #superclass.b layout tree.b build.v := b view.			RTHTML5Exporter new insert: v named: ''Example Roassal'' inPillarStream: stream]]]';    outputFile: 'myFirstPillarExport.html' asFileReference;    export"</body><body package="Roassal2-Exporter-HTML5">loadingPillar"Gofer new     smalltalkhubUser: 'Pier' project: 'Pillar';    configuration;    load.(Smalltalk globals at: #ConfigurationOfPillar) load"</body></methods><methods><class-id>Roassal2.RTHTML5Exporter</class-id> <category>dependencies</category><body package="Roassal2-Exporter-HTML5">roassalJSContent	^ '/* Simple JavaScript for handle Roassal2 in javascript * By milton mamani akevalion@gmail.com */(function(){  var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;   this.Class = function(){};  Class.extend = function(prop) {    var _super = this.prototype;    initializing = true;    var prototype = new this();    initializing = false;       for (var name in prop) {      prototype[name] = typeof prop[name] == "function" &amp;&amp;        typeof _super[name] == "function" &amp;&amp; fnTest.test(prop[name]) ?        (function(name, fn){          return function() {            var tmp = this._super;            this._super = _super[name];                       var ret = fn.apply(this, arguments);            this._super = tmp;                       return ret;          };        })(name, prop[name]) :        prop[name];    }       function Class() {      if ( !initializing &amp;&amp; this.init )        this.init.apply(this, arguments);    }    Class.prototype = prototype;    Class.prototype.constructor = Class;    Class.extend = arguments.callee;    return Class;  };})();/*mamani library*/function createSVG(name){	return document.createElementNS("http://www.w3.org/2000/svg", name);}Number.prototype.max = function (n){	if(this &gt; n) return this.valueOf();	return n;}Number.prototype.min = function (n){	if(this &lt; n ) return this.valueOf();	return n;}Number.prototype.degreesToRadians=function(){	return this* 0.017453292519943295;}/*point functions*/function minus(a, b){	return {x: a.x - b.x, y: a.y - b.y};}function plus(a, b){	return {x: a.x+b.x, y: a.y+b.y};}function product(a, b){	if(b.x != null)return {x: a.x*b.x, y: a.y*b.y};	return {x: a.x * b, y: a.y*b};}function negated(a){	return {x: -a.x, y: -a.y};}function normal(p){	var n = {x: -p.y, y: p.x};	var d = n.x*n.x + n.y*n.y;	if(d == 0) return {x:-1, y:0};	return this.div(n, Math.sqrt(d));}function div(a, b){	if(b.x!=null)return {x: a.x/b.x, y: a.y/b.y};	return {x: a.x/b, y: a.y/b};}function r(p){	return Math.sqrt(dotProduct(p, p));}function dotProduct(a, b){	return a.x*b.x + a.y*b.y;}function lessThan(a,b){	return a.x&lt;b.x &amp;&amp; a.y&lt;b.y;}function interpolate(i, f, t){	if(i.x != null)		return plus(i, product(minus(f, i), t) );	else return i + (f - i)*t; }function eq(a, b){	return a.x == b.x &amp;&amp; a.y == b.y;}function lessEqThan(a, b){	return a.x &lt;= b.x &amp;&amp; a.y &lt;= b.y;}function lessThan(a, b){	return a.x&lt;b.x &amp;&amp; a.y&lt;b.y;}function transposed(p){	return {x: p.y, y: p.x};}/*roassal/pharo classes*/	var Rectangle = Class.extend({	origin: null,	corner: null,	init: function (origin, corner){		this.origin = origin;		this.corner = corner;	},	width: function(){		return this.corner.x- this.origin.x;	},	height: function(){		return this.corner.y - this.origin.y;	},	encompassing: function(list){		var o = list[0];		var c = o;		for(var k = 0; k&lt;list.length; k++){			o = this.min(o, list[k]);			c = this.max(c, list[k]);		}		this.origin = o;		this.corner = c;		return this;	},	min: function (a, b){		return {x: a.x.min(b.x), y: a.y.min(b.y)}	},	max: function (a, b){		return {x: a.x.max(b.x), y: a.y.max(b.y)}	},	center: function (){		var o = this.origin;		var c = this.corner;		return {x: (o.x+c.x)/2, y: (o.y+c.y)/2}	},	mergeRect: function(rect){		this.origin = this.min(this.origin, rect.origin);		this.corner = this.max(this.corner, rect.corner);	},	rightCenter: function (){		return {x: this.corner.x, y: this.center().y};	},	leftCenter: function(){		return {x: this.origin.x, y: this.center().y};	},	topCenter: function(){		return {x: this.center().x, y: this.origin.y};	},	bottomCenter: function(){		return {x: this.center().x, y: this.corner.y};	},	bottomLeft: function(){		return {x: this.origin.x, y: this.corner.y};	},	bottomRight: function(){		return this.corner;	},	topLeft: function(){		return this.origin;	},	topRight: function(){		return {x: this.corner.x, y: this.origin.y};	},	extent: function(){		return {x: this.corner.x - this.origin.x, y: this.corner.y-this.origin.y}	},	pointNearestTo: function(p){		var res, side;		if(this.containsPoint(p)){			side = this.sideNearestTo(p);			if(side == "right") res={x: this.corner.x, y: p.y};			else if(side == "left") res={x: this.origin.x, y: p.y};			else if(side == "bottom") res={x: p.x, y: this.corner.y};			else res ={x: p.x, y: this.origin.y};		}else res = this.adhereTo(p);		return res;	},	adhereTo: function(p){		if(this.containsPoint(p)) return aPoint;		else return {x:p.x.max(this.origin.x).min(this.corner.x), y: p.y.max(this.origin.y).min(this.corner.y)};	},	containsPoint: function(aPoint){		return lessEqThan(this.origin, aPoint) &amp;&amp; lessThan(aPoint, this.corner);	},	eq: function(rect){		return eq(this.origin, rect.origin) &amp;&amp; eq(this.corner, rect.corner);	},	containsRect: function(rect){		return lessEqThan(this.origin, rect.origin) &amp;&amp; lessEqThan(rect.corner, this.corner);	}});var MatrixTransform = Class.extend({	sx: null,	shx: null,	x: null,	shy: null,	sy: null,	y: null,	init: function (obj){		if(obj == null) return this.loadIdentity();		this.sx = obj.sx;		this.shx = obj.shx;		this.x = obj.x;		this.shy = obj.shy;		this.sy = obj.sy;		this.y = obj.y;	},	loadIdentity: function(){		this.sx = this.sy = 1.0;		this.shx = this.shy = this.x = this.y = 0.0;	},	asString: function (){		return "matrix("+this.sx+","+this.shy+","+this.shx+","+this.sy+","+this.x+","+this.y+")";	},	scaleBy: function(f){		if(f.x != null){			this.sx = this.sx*f.x;			this.shx = this.shx*f.y;			this.sy = this.sy*f.y;			this.shy = this.shy*f.x;		}else{			this.sx = this.sx*f;			this.shx = this.shx*f;			this.sy = this.sy*f;			this.shy = this.shy*f;		}		return this;	},	translateBy: function(p){		this.x = this.sx*p.x+this.shx*p.y+this.x;		this.y = this.shy*p.x+this.sy*p.y+this.y;		return this;	},	transformRect: function(rect){		var r = new Rectangle();		r.origin = this.transform(rect.origin);		r.corner = this.transform(rect.corner);		return r;	},	transform: function(p){		return {x: this.sx*p.x+this.shx*p.y+this.x, 				y: this.shy*p.x+this.sy*p.y+this.y}	}});var TREvent = Class.extend({	canvas: null,	position: null,	raw: null});var TRShapeEvent = TREvent.extend({	shape: null});var TRMouseClick = TRShapeEvent.extend({});var TRMouseLeftClick = TRMouseClick.extend({});var TRMouseRightClick = TRMouseClick.extend({});var TRMouseDoubleClick = TRShapeEvent.extend({});var TRMouseDragging = TRShapeEvent.extend({step: null});var TRMouseDragStart = TRMouseDragging.extend({});var TRMouseDragEnd = TRMouseDragging.extend({});var TRMouseEnter = TRShapeEvent.extend({});var TRMouseLeave = TRShapeEvent.extend({});var TRMouseMove = TRShapeEvent.extend({});var TRMouseWheelEvent = TRShapeEvent.extend({	direction: null});/*TODO Wheel event and Key events*/var TRInteraction = Class.extend({	initOn: function (s){ /*override*/}});var RTAbstractDraggable = TRInteraction.extend({	groupToDrag: null,	ides: null,	init: function(arr){		this.ides = arr;	},	initOn: function (s){		var self = this;		s.whenDo(TRMouseDragging, function(e){			var t = new TRGroup()			t.addAll(self.getGroup(s));			if(!t.includes(s)) t.add(s);			var sc = s.canvas.camera.scale;			t.translateBy(self.transformDistance({x: e.step.x/sc, y: e.step.y/sc}, s));			e.canvas.update();		});	},	getGroup: function(s){		var g = this.groupToDrag;		if(g == null){			g = this.groupToDrag = [];			var ides = this.ides;			if(ides == null) return g;			for(var k = 0; k&lt;ides.length; k++)				g[k] = s.canvas.getShapeById(ides[k]);		}		return g;	},	transformDistance: function(distAsPoint,s){ return distAsPoint;}});var RTDraggable = RTAbstractDraggable.extend({});var RTDraggableView = TRInteraction.extend({	initOn: function (canvas){		canvas.whenDo(TRMouseDragging, function(e){			var s = canvas.camera.scale;			canvas.camera.translateBy({x: e.step.x/s, y: e.step.y/s});		});	}});var RTLinkView = TRInteraction.extend({	link: null,	init: function(o){		this.link = o;	},	initOn: function(s){		var link = this.link;		s.whenDo(TRMouseClick, function(e){			window.open(link+".html", "_blank");		});	}});var RTZoomableView = TRInteraction.extend({	initOn: function (canvas){		canvas.whenDo(TRMouseWheelEvent, function(e){			var s = canvas.camera.scale;			var dist = minus(e.position, negated(canvas.camera.position));			if(e.direction == "up"){s *= 1.25; dist = product(dist, -0.2);}			if(e.direction == "down"){s *=0.8; dist = product(dist, 0.25);}			canvas.camera.scale=s;			canvas.camera.translateBy(dist);		});	}});var RTFocusElement = TRInteraction.extend({	initOn: function(s){		s.whenDo(TRMouseDoubleClick, function(e){			//TODO			var canvas = s.canvas;			var rec = s.encompassingRectangle();			var is = canvas.camera.scale;			var ip = canvas.camera.position;			var fp = negated(rec.center());			var sc = div(canvas.camera.extent(), product(rec.extent(), 1.1));			var fs = sc.x&lt;sc.y?sc.x: sc.y;			new VITimer({				time: 1,				refresh: function (t){					var v = interpolate(is, fs, t);					canvas.camera.scale=v;					v = interpolate(ip, fp, t);					canvas.camera.translateTo(v);				}			});		});	}});var VITimer = Class.extend({	init: function(obj){		var t = new Date().getTime();		var cycles = obj.cycles?obj.cycles: 10;		var callback = obj.callback?obj.callback: (function(){});		var tini = t;		var f = obj.time * 1000 + t;		var cycle = (f - t)/cycles;				var fun = function(){			try{ obj.refresh((t-tini)/(f-tini));			}catch(ex){console.log(ex);}			t = new Date().getTime();			if(t &lt; f)				setTimeout(fun, cycle);			else{				try{ 					obj.refresh(1);					callback();				}catch(ex){console.log(ex);}			}		};		fun();	}});var RTLabelled = TRInteraction.extend({	color: null,	lowcolor: null,	init: function(obj){		this.color = obj.color;		this.lowcolor = obj.lowcolor;		this.lbl = obj.lbl;	},	initOn: function (s){		var self = this;		s.whenDo(TRMouseEnter, function(e){			var shape = e.canvas.getShapeById(self.lbl);			shape.setColor(self.color);			shape.pushFront();		});		s.whenDo(TRMouseLeave, function(e){			var shape = e.canvas.getShapeById(self.lbl);			shape.setColor(self.lowcolor);		});	}});var RTAbstractHighlightable = TRInteraction.extend({	shapes: null,	ides: null,	vars: {},	initOn: function(s){		var self = this;		s.whenDo(TRMouseEnter, function(e){			self.doHighlight(s);		});		s.whenDo(TRMouseLeave, function(e){			self.doUnhighlight(s);		})	},	doHighlight: function(s){		this.unhighlightRecordedShapes();		var shapes = this.highlightShapes(s);		for(var k = 0; k&lt;shapes.length; k++)			this.doHighlightShape(shapes[k]);		s.hshapes = shapes;		this.vars.lastShapes = shapes;	},	unhighlightRecordedShapes: function(){		var shapes = this.vars.lastShapes;		if(shapes == null) return;		for(var k = 0; k&lt;shapes.length; k++)			this.doUnhighlightShape(shapes[k]);		this.vars.lastShapes = null;	},	highlightShapes: function(s){		if(this.shapes == null){			var g = this.shapes = [];			var ides = this.ides;			if(ides == null){				this.shapes[0] = s;				return this.shapes;			}			for(var k = 0; k&lt;ides.length; k++){				var e = s.canvas.getShapeById(ides[k]);				if(e == null) continue;				g[g.length] = e;			}		}		return this.shapes;	},	doUnhighlight: function(s){		var shapes = s.hshapes;		if(shapes == null) return;		for(var k = 0; k&lt;shapes.length; k++)			this.doUnhighlightShape(shapes[k]);		s.hshapes = null;	},	doHighlightShape: function(s){		//override	},	doUnhighlightShape: function(s){		//override	}});var RTShowLabel = RTAbstractHighlightable.extend({	lbl:null,	init: function(lbl){		this.lbl = lbl;	},	doHighlightShape: function(s){		s.slabels = [];		for(var k = 0; k&lt;this.lbl.length;k++){			s.slabels[k] = s.canvas.addShape(this.lbl[k]);			s.slabels[k].update();		}	},	doUnhighlightShape: function(s){		for(var k = 0; k&lt;s.slabels.length; k++)			s.slabels[k].remove();	}});var RTHighlightable = RTAbstractHighlightable.extend({	color: null,	init:function(obj){		this.color = obj.color;		this.ides = obj.ides;	},	doHighlightShape: function(s){		s.ocolor=s.color;		s.setColor(this.color);	},	doUnhighlightShape: function(s){		if(s.ocolor == null) return;		s.setColor(s.ocolor);		s.ocolor = null;	}});var RTShowEdge = TRInteraction.extend({	objs: null,	vars: {},	init: function(t){		this.objs = t;	},	initOn: function (s){		var self = this;		s.whenDo(TRMouseEnter, function(evt){			self.doShowEdges(s);		});		s.whenDo(TRMouseLeave, function(evt){			self.removeEdges();		});	},	doShowEdges: function(s){		this.removeEdges();		var list = [];		for(var k = 0;k&lt;this.objs.length; k++){			var d = s.canvas.addShape(this.objs[k]);			d.update();			list[k] = d;		}				this.vars.edges = list;	},	removeEdges: function(){		var l = this.vars.edges;		if(!l) return;		for(var k =0;k&lt;l.length; k++)l[k].remove();		this.vars.edges = null;	}});var RTAbstractPopup = TRInteraction.extend({	popup: null,	vars: {},	initOn: function (s){		var self = this;		s.whenDo(TRMouseEnter, function(evt){			self.createAndShowPopupFor(s, evt);		});		var remove = function(e){			self.removeLastPopup();		};		s.whenDo(TRMouseLeave, remove);		s.whenDo(TRMouseDragging, remove);	},	createAndShowPopupFor: function(s, evt){		//override	},	removeLastPopup: function(s, evt){		var popup = this.vars.lastPopup;		if(popup == null) return;		popup.remove();		this.resetLastPopup();	},	resetLastPopup: function(){		this.lastPopup(null);	},	lastPopup: function(p){		this.vars.lastPopup= p;	},	closestPositionOf: function(popup, p){		var ww = $(window).width();		var wh = $(window).height();		var	pe = popup.encompassingRectangle().extent();		var off = this.popupOffset();		if(pe.x &gt; ww || pe.y &gt; wh)			return {x: p.x + off.x, y: p.y+ off.y};		var virtualX = (p.x + pe.x + off.x) &lt; ww? p.x+off.x: p.x-pe.x-off.x;		var virtualY = (p.y + pe.y + off.y) &lt; wh? p.y+off.y: p.y-pe.y-off.y;		return {x: virtualX, y: virtualY};	},	popupOffset: function(){		return {x:5, y: 5}	}});var RTPopup = RTAbstractPopup.extend({	objs: null,	init: function(t){		this.objs = t;	},	createAndShowPopupFor: function(s, evt){		this.removeLastPopup();		this.popup = this.createPopupFor(s);		this.lastPopup(this.popup);				var idealPosition = {x:evt.raw.pageX,y:evt.raw.pageY};		var popupPosition = this.closestPositionOf(this.popup, idealPosition);		this.popup.translateTopLeftTo(popupPosition);		s.canvas.updateFixed();	},	createPopupFor: function(s){		var g = new TRGroup();		for(var k = 0; k&lt;this.objs.length; k++){			var d = s.canvas.addFixedShape(this.objs[k]);			d.update();			g.add(d);		}		return g;	}});var RTAttachPoint = Class.extend({	inverted: null,	init: function(i){		this.inverted = i;	},	basicEndingPointOf: function(anEdge){		//override	},	basicStartingPointOf: function(anEdge){		//override	},	endingPointOf: function (anEdge){		return this.inverted? this.basicStartingPointOf(anEdge): this.basicEndingPointOf(anEdge);	},	startingPointOf: function (anEdge){		return this.inverted? this.basicEndingPointOf(anEdge): this.basicStartingPointOf(anEdge);	}});var RTVerticalAttachPoint = RTAttachPoint.extend({	basicEndingPointOf: function (anEdge){		return anEdge.to().encompassingRectangle().topCenter();	},	basicStartingPointOf: function(anEdge){		return anEdge.from().encompassingRectangle().bottomCenter();	}});var RTHorizontalAttachPoint = RTAttachPoint.extend({	basicEndingPointOf: function (anEdge){		return anEdge.to().encompassingRectangle().leftCenter();	},	basicStartingPointOf: function(anEdge){		return anEdge.from().encompassingRectangle().rightCenter();	}});var RTCenteredAttachPoint = RTAttachPoint.extend({	basicEndingPointOf: function (anEdge){		return anEdge.to().position();	},	basicStartingPointOf: function(anEdge){		return anEdge.from().position();	}});var RTAbstractShorterDistanceAttachPoint = RTAttachPoint.extend({	basicEndingPointOf: function (anEdge){		return this.attachPointFor(anEdge, anEdge.from(), this.destinationAttachPointsFor(anEdge));	},	destinationAttachPointsFor: function(anEdge){		return this.attachPoints(anEdge, anEdge.to());	},	basicStartingPointOf: function(anEdge){		return this.attachPointFor(anEdge, anEdge.to(), this.startingAttachPointsFor(anEdge));	},	startingAttachPointsFor: function(anEdge){		return this.attachPoints(anEdge, anEdge.from());	},	attachPointFor: function(anEdge, aShape, list){		var p = aShape.encompassingRectangle().corner;		var dp = [];		for(var k=0;k&lt;list.length; k++){			var t = minus(p, list[k]);			dp[k] = {a: dotProduct(t,t), b: list[k]};		}		var res = dp[0];		for(var k=0; k&lt;dp.length; k++)			if(dp[k].a&lt;res.a)				res = dp[k];		return res.b;	},	attachPoints: function(anEdge, aShape){		//override	}});var RTShorterDistanceWithOffsetAttachPoint = RTAbstractShorterDistanceAttachPoint.extend({	offset: null,	edges: null,	init: function(i){		this._super(i);		this.offset = 5;	},	attachPoints: function(anEdge, aShape){		var rec = aShape.encompassingRectangle();		var c = rec.center();		return [{x: c.x, y: rec.origin.y}, {x: rec.origin.x,y:c.y}, {x:c.x,y:rec.corner.y},{x:rec.corner.x,y:c.y}];	},	basicEndingPointOf: function(anEdge){		return plus(this._super(anEdge), this.offsetNormalFor(anEdge));	},	basicStartingPointOf: function(anEdge){		return plus(this._super(anEdge), this.offsetNormalFor(anEdge));	},	offsetNormalFor: function(anEdge){		if(!this.edges){			var eds = [];			for(var k in anEdge.canvas.shapes){				var s = anEdge.canvas.shapes[k];				if((s instanceof TRLineShape) &amp;&amp; ( (s.to()==anEdge.to() &amp;&amp; s.from()==anEdge.from())					||(s.to()==anEdge.from() &amp;&amp; s.from()==anEdge.to())) ){					if(s.multi != null) s = s.multi					if(eds.indexOf(s)==-1) eds[eds.length] = s;				}			}			this.edges = eds;		}		if(this.edges.length &lt;=1) return {x:0,y:0};		var index = this.edges.indexOf(anEdge.multi?anEdge.multi: anEdge);		return product(normal(minus(anEdge.to().position(), anEdge.from().position())), index * this.offset);	}});var RTShorterDistanceAttachPoint = RTAbstractShorterDistanceAttachPoint.extend({	attachPoints: function(anEdge, aShape){		var rec = aShape.encompassingRectangle();		var c = rec.center();		return [{x: c.x, y: rec.origin.y}, {x: rec.origin.x,y:c.y}, {x:c.x,y:rec.corner.y},{x:rec.corner.x,y:c.y}];	},});var RTContinuousAttachPoint = RTAttachPoint.extend({	offset: 5,	offsetNormalFor: function(anEdge){		var temp = new RTShorterDistanceWithOffsetAttachPoint();		temp.offset = this.offset;		return temp.offsetNormalFor(anEdge);	}});var RTRectangleAttachPoint = RTContinuousAttachPoint.extend({	basicEndingPointOf: function(anEdge){		return this.attachPointFor(anEdge, anEdge.to().encompassingRectangle(), anEdge.from().encompassingRectangle());	},	basicStartingPointOf: function(anEdge){		return this.attachPointFor(anEdge, anEdge.from().encompassingRectangle(), anEdge.to().encompassingRectangle());	},	attachPointFor: function(anEdge, fromRect, toRect){		var offsetShift = this.offsetNormalFor(anEdge),			fromPoint = plus(fromRect.center(),offsetShift),			toPoint = plus(toRect.center(), offsetShift),			minP = null, minV, val;		if(fromRect.eq(toRect)) return fromRect.origin;		if(fromRect.containsRect(toRect)) return fromRect.pointNearestTo(toPoint);		if(toRect.containsRect(fromRect)) return fromRect.pointNearestTo(toRect.pointNearestTo(fromPoint));		var intersections = new RTLineSegment(fromPoint, toPoint).intersectRectangle(fromRect);		$.each(intersections, function(i, p){			if(minP == null) {minP = p; minV = r(p);}			else if( (val = r(p)) &lt; minV ){				minP = p;				minV = val;			}		} );				if(minP == null) return fromRect.pointNearestTo(toPoint);		return minP;	}});var RTCircleAttachPoint = RTContinuousAttachPoint.extend({	basicEndingPointOf: function(anEdge){		return this.attachPointFor(anEdge, anEdge.to().encompassingRectangle(), anEdge.from().encompassingRectangle());	},	basicStartingPointOf: function(anEdge){		return this.attachPointFor(anEdge, anEdge.from().encompassingRectangle(), anEdge.to().encompassingRectangle());	},	attachPointFor: function(anEdge, fromRect, toRect){			}});var RTLineSegment = Class.extend({	from: null,	to: null,	init: function(f, t){		this.fromTo(f,t);	},	fromTo: function(f,t){		this.from = f;		this.to = t;		return this;	},	intersectHorizontal: function(other){		var p = this.intersectHorizontalLine(other);		if(!p) return p;		if(p.x &lt; this.left().x || p.x &gt; this.right().x||p.y&lt;other.bottom().y||p.y&gt;other.top().y) return null;		return p;	},	bottom: function(){		return this.from.y &lt; this.to.y? this.from:this.to;	},	top: function(){		return this.from.y &gt; this.to.y? this.from:this.to;	},	left: function(){		return this.from.x &lt; this.to.x? this.from: this.to;	},	right: function(){		return this.from.x &gt; this.to.x? this.from: this.to;	},	intersectHorizontalLine: function(other){		var vector = other.vector();		if(vector.y == 0) return null;		var y = this.from.y;		var x = (this.from.y-other.from.y)*other.cotan()+other.from.x;		return {x:x, y:y};	},	cotan: function(){		var vector = this.vector();		if(vector.y == 0) return null;		return vector.x/vector.y;	},	intersectVertical: function(other){		var pt = this.transposed().intersectHorizontal(other.transposed());		if(!pt) return null;		return transposed(pt);	},	transposed: function(){		return new RTLineSegment(transposed(this.from), transposed(this.to));	},	vector: function(){		return minus(this.to, this.from);	},	intersectRectangle: function(aRect){		var bl = aRect.bottomLeft(),			br = aRect.bottomRight(),			tl = aRect.topLeft(),			tr = aRect.topRight(),			pts = [],			t= new RTLineSegment();		this.add(pts, t.fromTo(tl, tr).intersectHorizontal(this));		this.add(pts, t.fromTo(bl, br).intersectHorizontal(this));		this.add(pts, t.fromTo(tl, bl).intersectVertical(this));		this.add(pts, t.fromTo(tr, br).intersectVertical(this));		return pts;	},	add: function(pts, p){		if(p == null) return;		var flag = true;		for(var k = 0; k&lt;pts.length; k++)			if(eq(pts[k], p)) eq = false;		if(flag) pts.push(p);	}});var TRAnnouceableObject = Class.extend({	registry: null,	whenDo: function (anEventClass, aFunction){		var r = this.getRegistry();		r[r.length] = {e: anEventClass, f: aFunction};	},	getRegistry: function(){		if(this.registry == null) this.registry = [];		return this.registry;	},	announce: function (anEvent){		var list = this.subscriptionsHandling(anEvent);		for( var i = 0; i &lt; list.length; i++){			try{list[i].f(anEvent);}			catch(ex){console.log(ex);}		}	},	subscriptionsHandling: function (anEvent){		var r = this.getRegistry();		var res = [];		for( var k = 0; k&lt;r.length; k++)			if(anEvent instanceof r[k].e)				res[res.length] = r[k];				return res;	},	handleEventClass: function (anEventClass ){		var obj = new anEventClass();		var list = this.subscriptionsHandling(obj);		return list.length != 0;	},	addInteraction: function(interaction){		if(!(interaction instanceof TRInteraction) )			interaction = new interaction();		interaction.initOn(this);	},	addInteractions: function(list){		for(var k = 0; k&lt; list.length; k++)			this.addInteraction(list[k]);	}});var TRCanvas = TRAnnouceableObject.extend({	svg: null,	canvas: null,	shapes: null,	fixedShapes: null,	extend: null,	fixedCanvas: null,	animations: null,	camera: null,	color: null,	definedShapes: null,	eventBeginingDragging: null,	shapeBeingPointed: null,	init: function (){		this.svg = createSVG("svg");		document.getElementsByTagName("body")[0].appendChild(this.svg); 		$(this.svg).css("float","left");		this.canvas = createSVG("g");		this.fixedCanvas = createSVG("g");		this.svg.appendChild(this.canvas);		this.svg.appendChild(this.fixedCanvas);		this.camera = new TRCamera(this);		this.definedShapes = {"ellipse": TREllipseShape, "box": TRBoxShape, "line": TRLineShape, 		"label": TRLabelShape, "bitmap": TRBitmapShape, "multi": TRMultiCompositeShape,		"path": TRSVGPath, "arc": TRArcShape, "polygon": TRPolygonShape, "simplearrow": TRSimpleArrowShape,		"headarrow": TREmptyHeadArrowShape, "bezier": TRBezierShape};		var self = this;		$(this.svg).			mousedown(function (e){self.mousedown(e)}).			mouseup(function (e){self.mouseup(e)}).			mousemove(function (e){self.mousemove(e)}).			dblclick(function (e){self.mouseDouble(e)}).			bind("wheel mousewheel",function(e){ self.mousewheel(e); return false;});		$(this.svg).attr("unselectable","on").bind("selectstart", function(){ return false; });		this.shapes = [];		this.fixedShapes = [];	},	color: function (c){		this.color = c;		var color = c.r == undefined?c:c.a == undefined?"rgb("+c.r+","+c.g+"," +c.b+")":"rgba("+c.r+","+c.g+"," +c.b+","+c.a+")";		$(this.svg).css("background-color", color);	},	createShape: function (s){		var shape = this.definedShapes[s.type];		shape = new shape(s);		shape.setCanvas(this);		shape.setColor(s.color);		if(s.ints != null) shape.addInteractions(s.ints);		if(shape instanceof TRAbstractBoxShape) shape.setBorder(s);		return shape;	},	addShape: function (s){		var shape = this.createShape(s);		shape.addInCanvas();		this.shapes[s.id] = shape;		return shape;	},	focusOnCenterScaled: function(){		this.camera.focusOnCenterScaled(product( this.camera.extent(), 0.9));	},	addFixedShape: function(s){		var shape = this.createShape(s);		shape.addInFixedCanvas();		this.fixedShapes[s.id] = shape;		return shape;	},	addFastShapes: function(objs){		var arr = [];		for(var k = 0; k&lt; objs.length; k++)			arr[k] = this.addShape(objs[k]);		this.update();		return arr;	},	addShapes: function (objs){		this.addFastShapes(objs)		this.camera.focusOnCenter();	},	addFixedShapes: function (objs){		for(var k = 0; k&lt;objs.length; k++)			this.addFixedShape(objs[k]);		this.updateFixed();	},	update: function(){		for(var k in this.shapes)			this.shapes[k].update();	},	updateFixed: function(){		for(var k in this.fixedShapes)			this.fixedShapes[k].update();	},	getShapeById: function (id){		return this.shapes[id];	},	isDragging: function (){		return this.eventBeginingDragging != null;	},	mouseup: function(e){		if(this.isDragging())			this.rtmouseDragEnd(e);	},	mousemove: function (e){		if(this.isDragging()) this.rtmouseDragging(e);		else{			if(this.shapeBeingPointed == null){				this.shapeBeingPointed = this.shapeWith(TRMouseEnter, e);				this.trmouseEnter(e);			}			var currentElement = this.shapeWith(TRMouseLeave, e);			if(currentElement != this.shapeBeingPointed){				var ev = new TRMouseLeave();				this.prepare(this.shapeBeingPointed, ev, e);				this.shapeBeingPointed = currentElement;				this.trmouseEnter(e);			}			this.rtmouseMoving(e);		}	},	mouseDouble: function(e){		var shape = this.shapeWith(TRMouseDoubleClick, e);		this.prepare(shape, new TRMouseDoubleClick, e);	},	trmouseEnter: function(e){		var shape = this.shapeWith(TRMouseEnter, e);		var ev = new TRMouseEnter();		this.prepare(shape, ev, e);	},	mousedown: function (e){		this.rtmouseClick(e);		this.rtmouseDragBegin(e);	},	shapeWith: function (trevent, e){		var s = document.elementFromPoint(e.pageX, e.pageY).id;		s = this.getShapeById(s);		if(s != null &amp;&amp; s.handleEventClass(trevent)) return s;		return this;	},	rtmouseClick: function(e){		var ev = e.button == 0?new TRMouseLeftClick(): e.button ==2?new TRMouseRightClick(): new TRMouseClick();		var shape = this.shapeWith(TRMouseClick, e);		this.prepare(shape, ev, e);	},	prepare: function(shape, ev, e){		ev.shape = shape;		ev.canvas = this;		ev.position = this.camera.fromPixelToSpace(e);		ev.raw = e;		shape.announce(ev);	},	rtmouseDragBegin: function (e){		this.eventBeginingDragging = e;		var shape = this.shapeBeingPointed = this.shapeWith(TRMouseDragging, e);				var ee = new TRMouseDragStart();		ee.step = {x: 0, y: 0};		this.prepare(shape, ee, e);	},	rtmouseMoving: function (e){		var shape = this.shapeWith(TRMouseMove, e);		var ev = new TRMouseMove();		this.prepare(shape, ev, e);	},	rtmouseDragging: function(e){		var ee = this.eventBeginingDragging;		if(ee== null) return;		var step = {x: e.pageX-ee.pageX, y: e.pageY-ee.pageY};		var shape = this.shapeBeingPointed;		if(shape == null)			shape = this.shapeBeingPointed = this.shapeWith(TRMouseDragging, e);		var event = new TRMouseDragging();		event.step = step;		this.prepare(shape, event, e);		this.eventBeginingDragging = e;	},	rtmouseDragEnd: function(e){		var ee = new TRMouseDragEnd();		var ee = this.eventBeginingDragging;		var step = {x: e.pageX-ee.pageX, y: e.pageY-ee.pageY};		ee.step = step;		this.prepare(this.shapeBeingPointed, ee, e);		this.eventBeginingDragging = null;		this.shapeBeingPointed = null;	},	mousewheel: function(evt){		var e = new TRMouseWheelEvent();		evt.pageX = evt.originalEvent.pageX;		evt.pageY = evt.originalEvent.pageY;		e.position = this.camera.fromPixelToSpace(evt);		e.raw = evt;		if(evt.originalEvent.deltaY) evt.originalEvent.wheelDelta = -evt.originalEvent.deltaY;//moz fix		e.direction = evt.originalEvent.wheelDelta /120 &gt; 0?"up":"down";		this.announce(e);	}});var TRGroup = TRAnnouceableObject.extend({	items : null,	add: function (s){		var i = this.getItems();		i[i.length] = s;	},	getItems: function (){		if(this.items == null) this.items = [];		return this.items;	},	each: function(f){		var i = this.getItems();		for(var k =0; k&lt;i.length; k++)			f(i[k]);	},	addAll: function (objs){		for(var k = 0; k&lt; objs.length; k++)			this.add(objs[k]);	},	includes: function (shape){		var i = this.getItems();;		for(var k = 0; k&lt; i.length; k++)			if(i[k] == shape) return true;		return false;	},	encompassingRectangle: function(){		var r = null;		this.each(function (e){			var er = e.encompassingRectangle();			if (r == null) r = er;			else r.mergeRect(er);		});		if(r == null) r = new Rectangle({x:0, y:0}, {x:0,y:0});		return r;	},	translateBy: function(p){		var i = this.getItems();		for(var k = 0; k&lt; i.length; k++){			i[k].translateBy(p);		}	},	translateTopLeftTo: function(p){		var c = this.encompassingRectangle().origin;		this.translateBy({x:p.x-c.x, y:p.y-c.y});	},	remove: function(){		this.each(function(e){e.remove()});	}});var TRCamera = Class.extend({	position: null,	canvas: null,	scale: null,	init: function (c) {		this.canvas = c;		this.scale = 1.000001;		this.position = { x : 0 , y : 0};	},	setScale: function(s){		this.scale = s;		this.update();	},	extent: function(){		return {x: $(window).width(), y: $(window).height()};	},	update: function(){		var ww = $(window).width();		var wh = $(window).height();		$(this.canvas.svg).css("width", ww).css("height", wh);		$(this.canvas.canvas).attr("transform", "translate(" +(ww/2)+", " +(wh/2)+") scale("+this.scale+") translate(" +this.position.x+","+ this.position.y+")");;	},	translateTo: function (point){		this.position = point;		this.update();	},	focusOnCenter: function(){		if(this.canvas.shapes.length == 0) return;		var c = this.encompassingRectangle().center();		this.translateTo({x: -c.x, y: -c.y });	},	focusOnCenterScaled: function(factor){		var r = this.encompassingRectangle();		this.position = negated(r.center());		var sc = div(factor, r.extent());		sc = sc.x &lt; sc.y ? sc.x:sc.y;		this.setScale(sc);	},	encompassingRectangle: function (){		return this.encompassingRectangleOf(this.canvas.shapes);	},	encompassingRectangleOf: function(shapes){		var rect = null;				for(var i in shapes){			if( rect == null){				rect = shapes[i].encompassingRectangle();				continue;			}			rect.mergeRect(shapes[i].encompassingRectangle());		}		return rect;	},	translateBy: function(p){		this.position.x += p.x;		this.position.y += p.y;		this.update();	},	fromPixelToSpace: function (e){		var p = e.pageX?{x: e.pageX, y: e.pageY}:e;		var ww = $(window).width();		var wh = $(window).height();		var p2 = this.position;		p = (new  MatrixTransform()).translateBy({x: -p2.x, y: -p2.y}).			scaleBy(1/this.scale).translateBy({x: -ww/2, y: -wh/2}).transform(p);		return p;	}});var TRShape = TRAnnouceableObject.extend({	canvas: null,	color: null,	path: null,	id: null,	rotationAngleDegrees: null,	matrix: null,	strokeColor: null,	encompassingRectangle: function (){		//override	},	resetPath: function(){		//override	},	setCanvas: function(canvas){		this.canvas = canvas;	},	addInFixedCanvas: function(){		if(this.path != null) this.canvas.fixedCanvas.appendChild(this.path);	},	addInCanvas: function(){		if(this.path != null) this.canvas.canvas.appendChild(this.path);	},	setColor: function(c){		if(c == null) return;		this.color = c;		if(c.r == undefined) $(this.path).css("fill", c);		else $(this.path).css("fill", "rgb("+c.r+","+c.g+"," +c.b+")");		if(c.a == null)	c.a = 1;		$(this.path).css("fill-opacity", c.a);	},	setStrokeColor: function(c){		this.strokeColor = c;		if(c.r == null) $(this.path).css("stroke", c);		else $(this.path).css("stroke", "rgb("+c.r+","+c.g+"," +c.b+")");		if(c.a != null)	$(this.path).css("stroke-opacity", c.a);	},	setBorder: function(obj){		if(obj.bordercolor != null){			this.setStrokeColor(obj.bordercolor);			this.setStrokeWidth(obj.sw);		}	},	setStrokeWidth: function(w){		this.strokeWidth = w;		$(this.path).css("stroke-width", w);	},	translateBy: function(p){		var u = this.position();		this.setPosition({x: p.x + u.x, y: p.y+ u.y});	},	setPosition: function(p){		this.matrix.x = p.x;		this.matrix.y = p.y;	},	position: function (){		var m = this.matrix;		if(this.matrix == null) debugger;		return {x: m.x, y: m.y}	},	update: function(){		$(this.path).attr("transform", this.matrix.asString());	},	remove: function(){		$(this.path).remove();		delete this.canvas.shapes[this.id];		delete this.canvas.fixedShapes[this.id];	},	pushFront: function(){		if(this.path == null) return;		this.path.parentNode.appendChild(this.path);	}});var TRAbstractBoxShape = TRShape.extend({	rectangle: null,	strokeWith: null,	width: function (newWidth){		this.extent({x: newWidth, y: this.rectangle.height});	},	height: function (newHeight){		this.extent({x: this.rectangle.width, y: newHeight});	},	extent: function(newExtent){		this.rectangle = new Rectangle ( {x: -newExtent.x/2,y: -newExtent.y/2}, newExtent);		this.resetPath();	},	encompassingRectangle: function(){		return this.matrix.transformRect(this.rectangle); 	}});var TREllipseShape = TRAbstractBoxShape.extend({	init: function (obj){		this.id = obj.id;		this.color = obj.color;		this.path = createSVG("ellipse");		$(this.path).attr({cx: 0, cy: 0, id: obj.id});		this.rectangle = new Rectangle({x: -obj.rx, y: -obj.ry}, {x: obj.rx, y: obj.ry});		this.matrix = new MatrixTransform(obj.matrix);		this.resetPath();		this.update();	},	resetPath: function (){		var r = this.rectangle;		$(this.path).attr({rx: r.width()/2, ry: r.height()/2});	},	setStrokeWidth: function(w){		this._super(w*this.rectangle.width());	},});var TRBoxShape = TRAbstractBoxShape.extend({	init: function (obj){		this.id = obj.id;		this.color = obj.color;		this.path = createSVG("rect");		var o = {x: -obj.w/2, y: -obj.h/2, id: obj.id};		$(this.path).attr(o);		this.rectangle = new Rectangle(o, {x: obj.w/2, y: obj.h/2});		this.matrix = new MatrixTransform(obj.matrix);		this.resetPath();		this.update();	},	resetPath: function (){		var r = this.rectangle;		$(this.path).attr({width: r.width(),"height": r.height() } );	}});var TRBitmapShape = TRShape.extend({	init: function(obj){		this.id = obj.id;		this.path = createSVG("image");		var w = obj.w;		var h = obj.h;		this.path.setAttributeNS("http://www.w3.org/1999/xlink","href","data:image/png;base64,"+obj.base64);		this.matrix = new MatrixTransform(obj.matrix);		var o = {x: -w/2, y: -h/2, width: w, height: h, id: obj.id};		this.rectangle = new Rectangle(o, {x: w/2, y: h/2});		$(this.path).attr(o);	},	encompassingRectangle: function(){		return this.matrix.transformRect(this.rectangle); 	}});var TRMultiCompositeShape = TRShape.extend({	objs: null,	offsets: null,	shapes: null,	ap: null,	init: function(obj){		this.id = obj.id;		this.objs = obj.shapes;		this.offsets = obj.offsets;		this.ap = obj.ap;	},	encompassingRectangle: function(){		var s = this.shapes;		var r = s[0].encompassingRectangle();		for(var k = 1;k&lt;s.length; k++) r.mergeRect(s[k].encompassingRectangle());		return r;	},	addInFixedCanvas: function(){		this.addIn(this.canvas.fixedCanvas, this.canvas.fixedShapes, true);		for(var k = 0;k&lt;this.shapes.length; k++) this.shapes[k].addInFixedCanvas();		this.postAdd();	},	postAdd: function(){		this.update();		var c = this.encompassingRectangle().center();		c = {x: -c.x, y: -c.y};		for(var k = 0;k&lt;this.shapes.length; k++) this.shapes[k].translateBy(c);	},	addInCanvas: function(){		this.addIn(this.canvas.canvas, this.canvas.shapes, false);		for(var k = 0;k&lt;this.shapes.length; k++) this.shapes[k].addInCanvas();	},	addIn: function(g, list, b){		var o = this.objs;		this.shapes = [];		for(var k = 0; k&lt;o.length; k++){			var s = this.canvas.createShape(o[k]);			this.shapes[k] = s;			s.multi = this;			try{				if(b)s.setPosition(this.offsets[k]);			}catch(x){debugger;}			list[s.id] = s;		}		if(o.length == 2)			if(this.shapes[0] instanceof TRBezierShape){				var l = this.shapes[0].ides;				this.shapes[1].fromid = l[l.length - 2];			}	},	update: function(){		var s = this.shapes;		this.updateForAp(s);		for(var k = 0; k&lt;s.length; k++)			s[k].update();	},	updateForAp: function(s){		if(this.ap != null){			if(this.from == null)				for(var k = 0; k&lt;s.length; k++)					if(s[k] instanceof TRLineShape){						var f = s[k].from();						this.from = function (){return f;};						var t = s[k].to();						this.to = function(){return t;};						s[k].ignoreap=true;					}			var ap = this.ap, p1, p2, l;			var from = ap.startingPointOf(this);			var to = ap.endingPointOf(this);			p1 = from;			l = s.length;			for(var k = 0; k&lt;l; k++){				p2 = plus(from,product(div(minus(to, from), l), k+1));				$(s[k].path).attr({x1: p1.x, y1: p1.y, x2: p2.x, y2: p2.y});				p1 = p2;			}		}	},	translateBy: function(p){		for(var k = 0; k&lt;this.shapes.length; k++)			this.shapes[k].translateBy(p);	},	remove: function(){		delete this.canvas.shapes[this.id];		delete this.canvas.fixedShapes[this.id];		for(var k = 0; k&lt;this.shapes.length; k++)			this.shapes[k].remove();	},	position: function(){		if(this.shapes.length==0) return {x:0,y:0};		var r = null;		for(var k = 0; k&lt;this.shapes.length; k++){			var er = this.shapes[k].encompassingRectangle();			if (r == null) r = er;			else r.mergeRect(er);		}		return r.center();	}});var TRLineShape = TRAbstractBoxShape.extend({	width: null,	fromid: null,	toid: null,	attachPoint: null,	ignoreap: false,	init: function (obj){		this.id = obj.id;		this.fromid = obj.fromid;		this.toid = obj.toid;		this.path = createSVG("line");		$(this.path).attr("id", obj.id);		this.setWidth(obj.width);		this.setAttachPoint(obj.ap);	},	setAttachPoint: function (ap){		if(!(ap instanceof RTAttachPoint)) ap = new ap();		this.attachPoint = ap;	},	setColor: function(c){		this.color = c;		$(this.path).css("stroke","rgb("+c.r+","+c.g+"," +c.b+")");		if(c.a != null){			$(this.path).css("opacity", c.a);		}	},	setWidth: function(w){		this.width = w;		$(this.path).css("stroke-width", this.width);	},	update: function (){		if(this.ignoreap) return;		var from = this.from();		var to = this.to();		if(from == null || to == null ) return;		if(to instanceof TRShape){			from = this.attachPoint.startingPointOf(this);			to = this.attachPoint.endingPointOf(this);		}		$(this.path).attr({x1: from.x, y1: from.y, x2: to.x, y2: to.y});	},	find: function(id){		return typeof id == "string"? this.canvas.getShapeById(id): id;	},	from: function (){		return this.find(this.fromid);	},	to: function(){		return this.find(this.toid);	},	encompassingRectangle: function(){		var r = new Rectangle();		var from, to;		try{ from = this.from().position();		}catch(ex){from = {x:0,y:0}}		try{ to = this.to().position();		}catch(ex){to = {x:0, y: 0}}		return r.encompassing([{x: from.x, y: from.y}, {x: to.x, y: to.y}]);	},	translateBy: function(p){},	setPosition: function(p){}});var TRBezierShape = TRLineShape.extend({	ides: null,	tension: null,	init: function (obj){		this.id = obj.id;		this.fromid = obj.fromid;		this.toid = obj.toid;		this.path = createSVG("path");		this.ides = obj.ides;		this.tension = obj.tension;		$(this.path).attr("id", obj.id);		$(this.path).css("fill","none");		this.setWidth(obj.width);		this.setAttachPoint(obj.ap);	},	update: function (){		if(this.ignoreap) return;		var from = this.from();		var to = this.to();		if(from == null || to == null ) return;		var list = [];		list[0] = this.attachPoint.startingPointOf(this);		for(var k = 0; k &lt; this.ides.length; k++) list[list.length] = this.getP(this.ides[k]);		list[list.length] = this.attachPoint.endingPointOf(this);		this.applyTension(list);		this.buildPath(list);	},	buildPath: function(points){		var p1 = points[0],p2,		d = "M"+ p1.x+" "+p1.y;		for(var k = 1; k&lt; points.length-2; k++){			p1 = points[k];			p2 = points[k+1];			d += "Q"+p1.x+" "+p1.y+" "+((p1.x+p2.x)/2)+" "+((p1.y+p2.y)/2);		}		p1 = points[points.length-2];		p2 = points[points.length-1];		d += "Q"+p1.x+" "+p1.y+" "+p2.x+" "+p2.y;		$(this.path).attr("d", d);	},	applyTension: function(points){		var tension = this.tension,		n = points.length-1,		p1 = points[0],		dp = minus(points[n],p1),		p,t;		for(var k = 1; k&lt; n; k++){			p = points[k];			t = k/n;			points[k] = plus(product(p,tension), product( plus(p1, product(dp, t)),1-tension));		}	},	getP: function(id){		return this.canvas.getShapeById(id).position();	}});var TRSimpleArrowShape = TRLineShape.extend({	size: null,	baseSize: null,	init: function(obj){		this.id = obj.id;		this.fromid = obj.fromid;		this.toid = obj.toid;		this.path = createSVG("path");		$(this.path).attr("id", obj.id);		$(this.path).css("fill", "none");		this.setWidth(obj.width);		this.setAttachPoint(obj.ap);		this.size = obj.size;		this.baseSize = obj.base;	},	update: function(){		if(this.fromid == this.toid) return;		var from = this.from();		var to = this.to();		if(from == null || to == null ) return;		var base = this.baseSize;		from = this.attachPoint.startingPointOf(this);		to = this.attachPoint.endingPointOf(this);		var vector = minus(to, from);		var u = normal(vector);		var unit = div(vector, r(vector));		var middle = minus(to, product(unit, this.size));		var left = minus(middle, product(u, base/2));		var right = plus(middle, product(u, base/2));		var d = "M "+left.x+" "+left.y+" L "+to.x+" "+to.y+" L "+right.x+ " "+right.y;		$(this.path).attr("d", d);	}});var TREmptyHeadArrowShape = TRLineShape.extend({	size: null,	baseSize: null,	init: function(obj){		this.id = obj.id;		this.fromid = obj.fromid;		this.toid = obj.toid;		this.path = createSVG("path");		$(this.path).attr("id", obj.id);		this.setWidth(obj.width);		this.setAttachPoint(obj.ap);		this.size = obj.size;		this.baseSize = obj.base;		this.setBorder(obj);	},	update: function(){		var from = this.from();		var to = this.to();		if(from == null || to == null ) return;		var base = this.baseSize;		from = this.attachPoint.startingPointOf(this);		to = this.attachPoint.endingPointOf(this);		var vector = minus(to, from);		var u = normal(vector);		var unit = div(vector, r(vector));		var middle = minus(to, product(unit, this.size));		var left = minus(middle, product(u, base));		var right = plus(middle, product(u, base));		var d = "M "+left.x+" "+left.y+" L "+to.x+" "+to.y+" L "+right.x+ " "+right.y+" L "+left.x+" "+left.y+" Z";		$(this.path).attr("d", d);	},	setColor: function(c){		if(c == null) return;		this.color = c;		if(c.r == undefined) $(this.path).css("fill", c);		else $(this.path).css("fill", "rgb("+c.r+","+c.g+"," +c.b+")");		if(c.a == null)	c.a = 1;		$(this.path).css("fill-opacity", c.a);	},	setStrokeColor: function(c){		this.strokeColor = c;		if(c.r == null) $(this.path).css("stroke", c);		else $(this.path).css("stroke", "rgb("+c.r+","+c.g+"," +c.b+")");		if(c.a != null)	$(this.path).css("stroke-opacity", c.a);	},});var TRSVGPath = TRShape.extend({	d: null,	rect: null,	init: function(obj){		this.id = obj.id;		this.path = createSVG("path");		$(this.path).attr({id: obj.id, d: obj.d});		this.matrix = new MatrixTransform(obj.matrix);		this.d = obj.d;		this.rect = new Rectangle(obj.o,obj.c);		this.setBorder(obj);	},	encompassingRectangle: function(){		return this.matrix.transformRect(this.rect); 	}});var TRPolygonShape = TRShape.extend({	points: null,	rect: null,	init: function(obj){		this.id = obj.id;		this.path = createSVG("polygon");		$(this.path).attr({id: obj.id, points: obj.p});		this.matrix = new MatrixTransform(obj.matrix);		this.rect = new Rectangle(obj.o,obj.c);		this.setBorder(obj);	},	encompassingRectangle: function(){		return this.matrix.transformRect(this.rect); 	}});var TRArcShape = TRShape.extend({	i: null,	e: null,	a: null,	b: null,	rect: null,	init: function(obj){		this.id = obj.id;		this.path = createSVG("path");		$(this.path).attr("id",obj.id);		this.matrix=new MatrixTransform(obj.matrix);		this.i=obj.ir;		this.e=obj.er;		this.a= obj.aAngle;		this.b=obj.bAngle;		this.rect = new Rectangle(obj.o, obj.c);		this.createD();	},	createD: function(){		var aAngle = -this.a.degreesToRadians();		var bAngle = -this.b.degreesToRadians();		var i = this.i;		var e = this.e;		var xAngle = (aAngle+bAngle)/2;		var xCos = Math.cos(xAngle);		var xSin = Math.sin(xAngle);		var aCos = Math.cos(aAngle);		var aSin = Math.sin(aAngle);		var bCos = Math.cos(bAngle);		var bSin = Math.sin(bAngle);		var str= "M "+(i*aCos)+" "+(i*aSin)+		" L "+(e*aCos)+" "+(e*aSin)+		" A "+e+" "+e+" 0 0 0 "+(e*xCos)+" "+(e*xSin)+		" A "+e+" "+e+" 0 0 0 "+(e*bCos)+" "+(e*bSin)+		" L "+(i*bCos)+" "+(i*bSin)+		" A "+i+" "+i+" 0 0 1 "+(i*xCos)+" "+(i*xSin)+		" A "+i+" "+i+" 0 0 1 "+(i*aCos)+" "+(i*aSin)+ " Z";		$(this.path).attr("d",str);			},	encompassingRectangle: function (){		return this.matrix.transformRect(this.rect); 	}});var TRLabelShape = TRShape.extend({	text: null,	font: null,	rect: null,	calc: false,	vars: {},	init: function(obj){		this.id = obj.id;		this.path = createSVG("text");		$(this.path).attr({id: obj.id});		this.matrix = new MatrixTransform(obj.matrix);		this.setText(obj.text);		this.setFont(obj.font);		this.rect=new Rectangle(obj.o, obj.c);	},	setFont: function(f){		if(f.n != "Verdana, Geneva, sans-serif") this.loadFont(f.n);		this.font = f;		$(this.path).css({"font-family":f.n, "font-size":f.s});	},	loadFont: function(f){		var fonts = this.vars.fonts		if(fonts == null) fonts =this.vars.fonts = [];		if(fonts[f] == null){			 fonts[f] = 1;			 $("head").append("&lt;link href=\"https://fonts.googleapis.com/css?family=" + 			 (f.replace(/ /g, "+"))+ "\" rel=\"stylesheet\" type=\"text/css\"&gt;");		}	},	setText: function(t){		this.text = t;		$(this.path).append(t);	},	update: function (){		$(this.path).attr("transform", this.matrix.asString());		if(this.calc) return;		this.calc = true;		var r = this.path.getBBox();		var w = r.width;		var h = r.height;		$(this.path).attr({x: this.rect.origin.x, y: this.rect.origin.y+h});		this.path.setAttribute("textLength",this.rect.width());		this.path.setAttribute("lengthAdjust", "spacingAndGlyphs");	},	encompassingRectangle: function(){		return this.matrix.transformRect(this.rect); 	}});/*main events*/var mamani;$(document).ready( function(){	mamani = new TRCanvas();	$(window).resize(function(){		$("body").height($(window).height());		mamani.camera.update();	});	$(window).trigger("resize");	buildView();});'</body></methods><methods><class-id>Roassal2.RTHTML5Exporter class</class-id> <category>public</category><body package="Roassal2-Exporter-HTML5">interactiveExport: view	| filename |	filename := TRPlatform current		dialogRequestSaveFilename: 'Export as html'		extensions: #('html')		path: nil.	filename		ifNil: [			TRPlatform current inform: 'Saving cancelled'.			^ self].	(self new)		directory: filename parent;		fileName: filename basename;		export: view.	TRPlatform current openFile: filename</body></methods><methods><class-id>Roassal2.RTHTML5Exporter class</class-id> <category>as yet unclassified</category><body package="Roassal2-Exporter-HTML5">importRoassalJS: fileName	"	self importRoassalJS: 'roassal.js'	"		| content code |	content := ((fileName asFileReference readStream contents copyReplaceAll: '''' with: '"')		copyReplaceAll: String cr		with: '') copyReplaceAll: String lf with: String cr.	code := 'roassalJSContent	^ ''' , content , ''''.	self compile: code classified: 'dependencies'.	TRPlatform current inform: 'imported roassal.js!!'</body></methods><methods><class-id>Roassal2.TRPNGWriter</class-id> <category>initialize-release</category><body package="Roassal2-Visualworks">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Roassal2.TRPNGWriter class</class-id> <category>public</category><body package="Roassal2-Visualworks">putForm: form onStream: stream	form cairoSurface writeToPngStream: stream.</body></methods><methods><class-id>Roassal2.TRPNGWriter class</class-id> <category>instance creation</category><body package="Roassal2-Visualworks">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Roassal2.TRDarkSolarizedTheme</class-id> <category>accessing</category><body package="Roassal2-Trachel-Theme">trachelCanvasColor	"	The original Solarized color is:	^ self base03		However, it does not fit the Pharo Dark theme	"	^ Color veryDarkGray</body></methods><methods><class-id>Roassal2.TRSVGPathLineShape</class-id> <category>accessing</category><body package="Roassal2-Trachel-Shapes">encompassingRectangle	^ Rectangle encompassing: (Array with: from with: to)</body><body package="Roassal2-Trachel-Shapes">from: aPoint	from := aPoint</body><body package="Roassal2-Trachel-Shapes">from: fromPoint to: toPoint	self from: fromPoint.	self to: toPoint</body><body package="Roassal2-Trachel-Shapes">svgPath: aString	| converter |	converter := ASPathConverter new stream: aString readStream.	pathCommands := converter convertPathData</body><body package="Roassal2-Trachel-Shapes">to: aPoint	to := aPoint</body></methods><methods><class-id>Roassal2.TRSVGPathLineShape</class-id> <category>private</category><body package="Roassal2-Trachel-Shapes">computePath	path := self athensCanvas		createPath: [ :builder | 			pathCommands				do: [ :each | builder perform: each first withArguments: each second ] ]</body></methods><methods><class-id>Roassal2.RTScrollpad</class-id> <category>as yet unclassified</category><body package="Roassal2-Interactions">addPadToview: aView		"add a scroll pad to the view"	| b|	b := RTScrollBarBuilder new.	b view: aView.	b scrollBarType: #isPad.	b build.</body><body package="Roassal2-Interactions">initializeElement: aView	self addPadToview: aView</body></methods><methods><class-id>Roassal2.RTNiceStepSizeGenerator</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Labeling">base	^ base</body><body package="Roassal2-Builder-Grapher-Labeling">qvar	^ qvar</body></methods><methods><class-id>Roassal2.RTNiceStepSizeGenerator</class-id> <category>private</category><body package="Roassal2-Builder-Grapher-Labeling">logB: a	^ a ln / base ln</body><body package="Roassal2-Builder-Grapher-Labeling">offsets: tj q: tq	| offs |	offs := Array new: tj.	(0 to: tj-1) do: [ :ti |		offs at: ti+1 put: ((tq*ti) raisedTo: (self logB: tj*tq) ) ].	^ offs</body><body package="Roassal2-Builder-Grapher-Labeling">qat: index	^ qvar at: index + 1</body><body package="Roassal2-Builder-Grapher-Labeling">stepSize: tj q: tq	^ tj * tq / (base raisedTo: (self logB: tj*tq ) floor ).</body></methods><methods><class-id>Roassal2.RTNiceStepSizeGenerator</class-id> <category>public</category><body package="Roassal2-Builder-Grapher-Labeling">next	| oSet |		niceStep		stepSize: ss;		offset: o;		i: i; "all output and calculations shouls add 1 because wilkinsons index start from 1"		j: j.	"Keep track of existing offsets and stepSizes to avoid duplicate returns of 	step size, offset pairs"	(ssOffMap includesKey: ss) ifTrue: [ 		oSet := ssOffMap at: ss.		[ | b | 			b := oSet includes: o.			oSet add: o.			b not and: [io &lt; (ovar size - 1)] ] whileTrue: [			 io := io +1.			 niceStep offset: (o := ovar at: io +1 ). ].		 ] ifFalse: [ 		oSet := Set new.		oSet add: o.		ssOffMap at: ss put: oSet.		 ].	io := io +1."position for next offset if it exists"		"iterate for next call"	io &lt; ovar size ifTrue: [ o := ovar at: io +1  ]	ifFalse: [ 		io := 0.		i := (i&lt; (qvar size - 1) ) ifTrue: [ i+1 ] ifFalse: [ 0 ] .		j := i = 0 ifTrue: [ j+1 ] ifFalse: [ j ].		q := self qat: i.		ss := self stepSize: j q: q.		ovar := self offsets: j q: q.		o := ovar at: io + 1.	].	resetRequired := true.	^ niceStep</body><body package="Roassal2-Builder-Grapher-Labeling">reset	resetRequired ifFalse: [ ^ self ].	i := 0.	io := 0.	j := 1.	q := self qat: i.	ss := self stepSize: j q: q.	ssOffMap := Dictionary new.	resetRequired := false.</body></methods><methods><class-id>Roassal2.RTNiceStepSizeGenerator</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Labeling">initialize	"Generates a NiceNumberGenerator"		super initialize.	niceStep := RTNiceStep new.	o := 0.0.	self setQ: #(1 5 2 2.5 4 3) base: 10.</body><body package="Roassal2-Builder-Grapher-Labeling">setQ: anArray base: aNumber	"anArray: preference ordered list of niceStep step sizes. 	The deault is set by the initializer selector		aNumber: is a number of logs and exps usually changed together with Q"	qvar := anArray.	base := aNumber.	i := 0.	io := 0.	j := 1.	q := self qat: i.	ss := self stepSize: j q: q.	ovar := self offsets: j q: q.	ssOffMap := Dictionary new.	resetRequired := false.</body></methods><methods><class-id>Roassal2.RTEmptyDiamond class</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">trachelShapeClass	^ TRDiamondShape</body></methods><methods><class-id>Roassal2.RTSVGButton</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">fixedName	|result|	result := name copy.	^result replaceAll: $  with: $_</body><body package="Roassal2-Exporter-SVG">getName	|result|	result := name copy.	^result replaceAll: $_ with: $ .</body><body package="Roassal2-Exporter-SVG">name: anObject	name := anObject</body><body package="Roassal2-Exporter-SVG">type	^ type,name</body><body package="Roassal2-Exporter-SVG">val	^ val</body><body package="Roassal2-Exporter-SVG">val: anObject	val := anObject</body></methods><methods><class-id>Roassal2.RTSVGButton</class-id> <category>button effect</category><body package="Roassal2-Exporter-SVG">addContribution: aStream	aStream nextPutAll: self fixedName , '_data["',self targetNameAttribute,self target identityHash asString,'"]  = "',(self dataAsString: (self val rtValue: self target model)),'";', String cr.</body><body package="Roassal2-Exporter-SVG">changeFunction	| attr |	attr := self targetColorAttribute.	^'if (elements[e].style != null)		elements[e].style["',attr,'"]'</body><body package="Roassal2-Exporter-SVG">dataAsString: color	^color asHTMLColor</body></methods><methods><class-id>Roassal2.RTSVGButton</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	contained := true.	external := false.	self name: ''.	self type: 'button'.</body></methods><methods><class-id>Roassal2.RTSVGButton</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addEventHandlers: aStream id: aString element: element center: aNumber	aStream		nextPutAll: self fixedName,' '</body><body package="Roassal2-Exporter-SVG">addFunctions: aStream	aStream		nextPutAll:			'    function button_' , self fixedName				,					'(evt) {      var elements = document.getElementsByClassName("' , self fixedName				,					'");      var color;      for (e in elements) {        value = ' , self fixedName				,					'_data[elements[e].id];        ' , self changeFunction				,					' = value;      }    }    var ' , self fixedName , '_data = { };'.	self addContribution: aStream.</body><body package="Roassal2-Exporter-SVG">addGlobalHandlers: aStream	"do nothing"</body><body package="Roassal2-Exporter-SVG">addSelf: stream startingPoint: startingPoint	|box width height converter|	box := TRLabelShape new text: self fixedName; encompassingRectangle.	 width := box width.	height := box height.	converter := RTSVGStringConverter new.	stream		nextPutAll: '&lt;g onmouseup="button_',self fixedName,'(evt)" cursor="pointer"&gt;  &lt;text x="',(startingPoint x + (width /10) rounded) asString,'" y="',(startingPoint y + (3*height/4) rounded) asString,'"&gt;',(converter convertString: self getName),'&lt;/text&gt;  &lt;rect x="',startingPoint x asString,'" y="',startingPoint y asString,'" rx="5" ry="5"        width="',width asString,'" height="',height asString,'" style="fill-opacity:0;stroke:black;stroke-width:1"/&gt;&lt;/g&gt;', String cr.	^(startingPoint x + width + 5)@(startingPoint y)</body></methods><methods><class-id>Roassal2.RTSVGButton class</class-id> <category>as yet unclassified</category><body package="Roassal2-Exporter-SVG">on: anExporter name: aName targets: aRTShape	| generator |	generator := [ :e |  self new target: e; name: aName; yourself ].	self on: anExporter targets: aRTShape generator: generator</body><body package="Roassal2-Exporter-SVG">on: anExporter name: aName values: values targets: aRTShape	| generator |	generator := [ :e |  self new target: e; name: aName; val: values; yourself ].	self on: anExporter targets: aRTShape generator: generator</body></methods><methods><class-id>Roassal2.RTRangeBelowXAxis</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Decorators">endValue	^ endValue</body><body package="Roassal2-Builder-Grapher-Decorators">endValue: aNumericalValue	endValue := aNumericalValue</body><body package="Roassal2-Builder-Grapher-Decorators">label	^ label</body><body package="Roassal2-Builder-Grapher-Decorators">label: aString	label := aString</body><body package="Roassal2-Builder-Grapher-Decorators">markerColor	^ markerColor</body><body package="Roassal2-Builder-Grapher-Decorators">markerColor: aColor	markerColor := aColor</body><body package="Roassal2-Builder-Grapher-Decorators">startValue	^ startValue</body><body package="Roassal2-Builder-Grapher-Decorators">startValue: aNumericalValue	startValue := aNumericalValue</body></methods><methods><class-id>Roassal2.RTRangeBelowXAxis</class-id> <category>default configuration</category><body package="Roassal2-Builder-Grapher-Decorators">defaultMarkerColor	^ Color black</body><body package="Roassal2-Builder-Grapher-Decorators">defaultSizeInPixelsFromAxis	^ -50</body></methods><methods><class-id>Roassal2.RTRangeBelowXAxis</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Decorators">render		| fromPosition toPosition e1 e2 l lineShape tickShape |	fromPosition := builder getPixelPositionOf: startValue @ 0.	toPosition := builder getPixelPositionOf: endValue @ 0.	fromPosition := fromPosition - (0 @ distanceInPixelsFromAxis).	toPosition := toPosition - (0 @ distanceInPixelsFromAxis).		tickShape := RTBox new height: 10; width: 1; color: self markerColor.	e1 := tickShape element.	e2 := tickShape element.	e1 translateTo: fromPosition.	e2 translateTo: toPosition.		lineShape := RTLine new.	lineShape color: markerColor.	l := lineShape edgeFrom: e2 to: e1.		label := RTLabel new color: markerColor; elementOn: label.	TRConstraint move: label between: e1 and: e2.	TRConstraint move: label above: l.	builder view add: e1; add: e2; add: l; add: label</body></methods><methods><class-id>Roassal2.RTRangeBelowXAxis</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Decorators">initialize	super initialize.	self markerColor: self defaultMarkerColor.	self startValue: 0.	self endValue: 1.	distanceInPixelsFromAxis := self defaultSizeInPixelsFromAxis</body></methods><methods><class-id>Roassal2.RTConstrainedDraggableView</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: aView	aView canvas 		when: TRMouseDragging 		do: [ :e |			| translation |			translation := constraint value: aView value: e step negated.			aView canvas camera translateBy: translation / aView canvas camera scale.			e signalUpdate ]</body></methods><methods><class-id>Roassal2.RTConstrainedDraggableView</class-id> <category>accessing</category><body package="Roassal2-Interactions">constraint: aTwoArgBlock	"First arg = view to drag, and second arg = step"	constraint := aTwoArgBlock</body></methods><methods><class-id>Roassal2.RTConstrainedDraggableView</class-id> <category>initialize</category><body package="Roassal2-Interactions">initialize	super initialize.	constraint := [ :aView :point | point ]</body></methods><methods><class-id>Roassal2.RTConstrainedDraggableView class</class-id> <category>instance creation</category><body package="Roassal2-Interactions">constraint: constraint	^ self new		constraint: constraint;		yourself</body></methods><methods><class-id>Roassal2.RTHorizontalDraggableView</class-id> <category>initialize</category><body package="Roassal2-Interactions">initialize	super initialize.	self constraint: [ :aView :point | 		| p |		p := aView canvas camera position.		"We go to the right"		(point x &gt; 0) 			ifTrue: [ 				(aView elements anySatisfy: [ :e | 					e position x &gt; p x ]) 						ifTrue: [ point x @ 0 ] ifFalse: [ 0 @ 0 ] ]			ifFalse: [ 				(aView elements anySatisfy: [ :e | 					e position x &lt; p x ]) 						ifTrue: [ point x @ 0 ] ifFalse: [ 0 @ 0 ] ]														]</body></methods><methods><class-id>Roassal2.RTDataHighlightInteraction</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">initializeElement: element	element		when: TRMouseEnter		do: [ :event | 			RTBlink highlightElements: dataset elements color: color.			RTBlink highlightElements: dataset elements outgoingEdges color: color.			RTBlink highlight: legendElements first color: color.			RTBlink highlight: legendElements second color: Color black ].	element		when: TRMouseLeave		do: [ :event | 			RTBlink unhighlightElements: dataset elements.			RTBlink unhighlightElements: dataset elements outgoingEdges.			RTBlink unhighlightElements: legendElements ]</body></methods><methods><class-id>Roassal2.RTDataHighlightInteraction</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">color: aColor	color := aColor</body><body package="Roassal2-Builder-Grapher-Core">dataset: aDataset	dataset := aDataset</body><body package="Roassal2-Builder-Grapher-Core">legendElements: aCollection	legendElements := aCollection</body></methods><methods><class-id>Roassal2.RTDataHighlightInteraction</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	legendElements := #()</body></methods><methods><class-id>Roassal2.RTRotationMove</class-id> <category>refreshing</category><body package="Roassal2-Animation">refresh	element trachelShape rotateToDegrees: animatedValue value.	"element update."	element signalUpdate.</body></methods><methods><class-id>Roassal2.RTRotationMove</class-id> <category>actions</category><body package="Roassal2-Animation">start	animatedValue start</body></methods><methods><class-id>Roassal2.RTRotationMove</class-id> <category>testing</category><body package="Roassal2-Animation">hasCompleted	^ animatedValue hasCompleted</body></methods><methods><class-id>Roassal2.RTRotationMove</class-id> <category>public</category><body package="Roassal2-Animation">angle: anAngle during: seconds on: anElement	|currentAngle|	element := anElement.	currentAngle := element trachelShape angleInDegrees.	animatedValue := TRVIAnimatedValue new							evaluator: [ :t | currentAngle interpolateTo: anAngle at: t ];							timer: (TRVITimer new cycleLength: seconds);							yourself.</body></methods><methods><class-id>Roassal2.RTRotationMove class</class-id> <category>as yet unclassified</category><body package="Roassal2-Animation">angle: anAngle during: seconds on: shape	^ self new angle: anAngle during: seconds on: shape</body></methods><methods><class-id>Roassal2.FormCanvas</class-id> <category>accessing</category><body package="Roassal2-Pharo">form	^ form</body><body package="Roassal2-Pharo">form: aPixmap	form := aPixmap.	origin := 0@0.							"origin of the top-left corner of this cavas"	clipRect := (0@0 corner: 10000@10000).		"default clipping rectangle"</body></methods><methods><class-id>Roassal2.FormCanvas</class-id> <category>drawing</category><body package="Roassal2-Pharo">displayImage: image at: position	| gc |	gc := form graphicsContext.	gc paintPreferences: LookPreferences colorDefault.	form clear.	gc displayPixelArray: image at: position + origin</body><body package="Roassal2-Pharo">fillRectangle: r color: c	"Fill the rectangle using the given color"	^self 		frameAndFillRectangle: r		fillColor: c		borderWidth: 0		borderColor: Color transparent</body><body package="Roassal2-Pharo">frameAndFillRectangle: r fillColor: fillColor borderWidth: borderWidth borderColor: borderColor	| rect |	rect := r translateBy: origin.	"draw the border of the rectangle"	borderColor isTransparent ifFalse:[		self setFillColor: borderColor.		(r area &gt; 10000 or: [fillColor isTranslucent]) ifTrue: [			self frameRect: rect borderWidth: borderWidth.		] ifFalse: ["for small rectangles, it's faster to fill the entire outer rectangle					than to compute and fill the border rects"					self fillRect: rect offset: origin]].	"fill the inside"	fillColor isTransparent ifFalse:		[ self form graphicsContext newCairoContextWhile: [:aCC | 			aCC 				setPaint: fillColor;				rectangle: rect;				fill ] ].</body><body package="Roassal2-Pharo">image: aForm at: aPoint sourceRect: sourceRect rule: rule 	| gc |	gc := form graphicsContext.	gc paintPreferences: LookPreferences colorDefault.	form clear.	gc displayPixelArray: aForm asImage at: aPoint + origin</body></methods><methods><class-id>Roassal2.FormCanvas class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">extent: aPoint	^ self new form: (Pixmap extent: aPoint x asInteger @ aPoint y asInteger)</body></methods><methods><class-id>Roassal2.RTSVGViewPopup</class-id> <category>accessing</category><body package="Roassal2-Exporter-SVG">view	^ view</body><body package="Roassal2-Exporter-SVG">view: anObject	view := anObject</body></methods><methods><class-id>Roassal2.RTSVGViewPopup</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addEventHandlers: aStream id: aString element: aRTElement center: aNumber	aStream nextPutAll: '&lt;g visibility="hidden"&gt;', String cr.	RTSVGVisitor visit: (self view value: aRTElement model) on: aStream center: aNumber.	aStream 		nextPutAll: (self mouseAction: aString);		nextPutAll:  '&lt;/g&gt;'</body></methods><methods><class-id>Roassal2.RTSVGViewPopup</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	view := [ :m | RTView new add: ((RTElement on: m) + (RTBox new color: Color blue; yourself))]</body></methods><methods><class-id>Roassal2.RTSVGViewPopup class</class-id> <category>as yet unclassified</category><body package="Roassal2-Exporter-SVG">on: anExporter view: aRTView targets: aRTShape	| generator |	generator := [ :e |  self new target: e; view: aRTView; yourself ].	self on: anExporter targets: aRTShape generator: generator</body><body package="Roassal2-Exporter-SVG">onClick: anExporter view: aRTView targets: aRTShape	| generator |	generator := [ :e |  self new target: e; click: true; view: aRTView; yourself ].	self on: anExporter targets: aRTShape generator: generator</body></methods><methods><class-id>Roassal2.RTCPSequential class</class-id> <category>default</category><body package="Roassal2-ColorNormalizer">info	^ 'Sequential schemes are suited to ordered data that;progress from low to high. Lightness steps dominate the look of;these schemes, with light colors for low data values to dark;colors for high data values.'</body><body package="Roassal2-ColorNormalizer">rawPalette	^ ((Array new: 18) at: 1 put: ('OrRd'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(254 232 200 ) #(253 187 132 ) #(227 74 51 ) )); at: 2 put: (4-&gt;#(#(254 240 217 ) #(253 204 138 ) #(252 141 89 ) #(215 48 31 ) )); at: 3 put: (5-&gt;#(#(254 240 217 ) #(253 204 138 ) #(252 141 89 ) #(227 74 51 ) #(179 0 0 ) )); at: 4 put: (6-&gt;#(#(254 240 217 ) #(253 212 158 ) #(253 187 132 ) #(252 141 89 ) #(227 74 51 ) #(179 0 0 ) )); at: 5 put: (7-&gt;#(#(254 240 217 ) #(253 212 158 ) #(253 187 132 ) #(252 141 89 ) #(239 101 72 ) #(215 48 31 ) #(153 0 0 ) )); at: 6 put: (8-&gt;#(#(255 247 236 ) #(254 232 200 ) #(253 212 158 ) #(253 187 132 ) #(252 141 89 ) #(239 101 72 ) #(215 48 31 ) #(153 0 0 ) )); at: 7 put: (9-&gt;#(#(255 247 236 ) #(254 232 200 ) #(253 212 158 ) #(253 187 132 ) #(252 141 89 ) #(239 101 72 ) #(215 48 31 ) #(179 0 0 ) #(127 0 0 ) )); yourself)); at: 2 put: ('PuBu'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(236 231 242 ) #(166 189 219 ) #(43 140 190 ) )); at: 2 put: (4-&gt;#(#(241 238 246 ) #(189 201 225 ) #(116 169 207 ) #(5 112 176 ) )); at: 3 put: (5-&gt;#(#(241 238 246 ) #(189 201 225 ) #(116 169 207 ) #(43 140 190 ) #(4 90 141 ) )); at: 4 put: (6-&gt;#(#(241 238 246 ) #(208 209 230 ) #(166 189 219 ) #(116 169 207 ) #(43 140 190 ) #(4 90 141 ) )); at: 5 put: (7-&gt;#(#(241 238 246 ) #(208 209 230 ) #(166 189 219 ) #(116 169 207 ) #(54 144 192 ) #(5 112 176 ) #(3 78 123 ) )); at: 6 put: (8-&gt;#(#(255 247 251 ) #(236 231 242 ) #(208 209 230 ) #(166 189 219 ) #(116 169 207 ) #(54 144 192 ) #(5 112 176 ) #(3 78 123 ) )); at: 7 put: (9-&gt;#(#(255 247 251 ) #(236 231 242 ) #(208 209 230 ) #(166 189 219 ) #(116 169 207 ) #(54 144 192 ) #(5 112 176 ) #(4 90 141 ) #(2 56 88 ) )); yourself)); at: 3 put: ('BuPu'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(224 236 244 ) #(158 188 218 ) #(136 86 167 ) )); at: 2 put: (4-&gt;#(#(237 248 251 ) #(179 205 227 ) #(140 150 198 ) #(136 65 157 ) )); at: 3 put: (5-&gt;#(#(237 248 251 ) #(179 205 227 ) #(140 150 198 ) #(136 86 167 ) #(129 15 124 ) )); at: 4 put: (6-&gt;#(#(237 248 251 ) #(191 211 230 ) #(158 188 218 ) #(140 150 198 ) #(136 86 167 ) #(129 15 124 ) )); at: 5 put: (7-&gt;#(#(237 248 251 ) #(191 211 230 ) #(158 188 218 ) #(140 150 198 ) #(140 107 177 ) #(136 65 157 ) #(110 1 107 ) )); at: 6 put: (8-&gt;#(#(247 252 253 ) #(224 236 244 ) #(191 211 230 ) #(158 188 218 ) #(140 150 198 ) #(140 107 177 ) #(136 65 157 ) #(110 1 107 ) )); at: 7 put: (9-&gt;#(#(247 252 253 ) #(224 236 244 ) #(191 211 230 ) #(158 188 218 ) #(140 150 198 ) #(140 107 177 ) #(136 65 157 ) #(129 15 124 ) #(77 0 75 ) )); yourself)); at: 4 put: ('Oranges'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(254 230 206 ) #(253 174 107 ) #(230 85 13 ) )); at: 2 put: (4-&gt;#(#(254 237 222 ) #(253 190 133 ) #(253 141 60 ) #(217 71 1 ) )); at: 3 put: (5-&gt;#(#(254 237 222 ) #(253 190 133 ) #(253 141 60 ) #(230 85 13 ) #(166 54 3 ) )); at: 4 put: (6-&gt;#(#(254 237 222 ) #(253 208 162 ) #(253 174 107 ) #(253 141 60 ) #(230 85 13 ) #(166 54 3 ) )); at: 5 put: (7-&gt;#(#(254 237 222 ) #(253 208 162 ) #(253 174 107 ) #(253 141 60 ) #(241 105 19 ) #(217 72 1 ) #(140 45 4 ) )); at: 6 put: (8-&gt;#(#(255 245 235 ) #(254 230 206 ) #(253 208 162 ) #(253 174 107 ) #(253 141 60 ) #(241 105 19 ) #(217 72 1 ) #(140 45 4 ) )); at: 7 put: (9-&gt;#(#(255 245 235 ) #(254 230 206 ) #(253 208 162 ) #(253 174 107 ) #(253 141 60 ) #(241 105 19 ) #(217 72 1 ) #(166 54 3 ) #(127 39 4 ) )); yourself)); at: 5 put: ('BuGn'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(229 245 249 ) #(153 216 201 ) #(44 162 95 ) )); at: 2 put: (4-&gt;#(#(237 248 251 ) #(178 226 226 ) #(102 194 164 ) #(35 139 69 ) )); at: 3 put: (5-&gt;#(#(237 248 251 ) #(178 226 226 ) #(102 194 164 ) #(44 162 95 ) #(0 109 44 ) )); at: 4 put: (6-&gt;#(#(237 248 251 ) #(204 236 230 ) #(153 216 201 ) #(102 194 164 ) #(44 162 95 ) #(0 109 44 ) )); at: 5 put: (7-&gt;#(#(237 248 251 ) #(204 236 230 ) #(153 216 201 ) #(102 194 164 ) #(65 174 118 ) #(35 139 69 ) #(0 88 36 ) )); at: 6 put: (8-&gt;#(#(247 252 253 ) #(229 245 249 ) #(204 236 230 ) #(153 216 201 ) #(102 194 164 ) #(65 174 118 ) #(35 139 69 ) #(0 88 36 ) )); at: 7 put: (9-&gt;#(#(247 252 253 ) #(229 245 249 ) #(204 236 230 ) #(153 216 201 ) #(102 194 164 ) #(65 174 118 ) #(35 139 69 ) #(0 109 44 ) #(0 68 27 ) )); yourself)); at: 6 put: ('YlOrBr'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(255 247 188 ) #(254 196 79 ) #(217 95 14 ) )); at: 2 put: (4-&gt;#(#(255 255 212 ) #(254 217 142 ) #(254 153 41 ) #(204 76 2 ) )); at: 3 put: (5-&gt;#(#(255 255 212 ) #(254 217 142 ) #(254 153 41 ) #(217 95 14 ) #(153 52 4 ) )); at: 4 put: (6-&gt;#(#(255 255 212 ) #(254 227 145 ) #(254 196 79 ) #(254 153 41 ) #(217 95 14 ) #(153 52 4 ) )); at: 5 put: (7-&gt;#(#(255 255 212 ) #(254 227 145 ) #(254 196 79 ) #(254 153 41 ) #(236 112 20 ) #(204 76 2 ) #(140 45 4 ) )); at: 6 put: (8-&gt;#(#(255 255 229 ) #(255 247 188 ) #(254 227 145 ) #(254 196 79 ) #(254 153 41 ) #(236 112 20 ) #(204 76 2 ) #(140 45 4 ) )); at: 7 put: (9-&gt;#(#(255 255 229 ) #(255 247 188 ) #(254 227 145 ) #(254 196 79 ) #(254 153 41 ) #(236 112 20 ) #(204 76 2 ) #(153 52 4 ) #(102 37 6 ) )); yourself)); at: 7 put: ('YlGn'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(247 252 185 ) #(173 221 142 ) #(49 163 84 ) )); at: 2 put: (4-&gt;#(#(255 255 204 ) #(194 230 153 ) #(120 198 121 ) #(35 132 67 ) )); at: 3 put: (5-&gt;#(#(255 255 204 ) #(194 230 153 ) #(120 198 121 ) #(49 163 84 ) #(0 104 55 ) )); at: 4 put: (6-&gt;#(#(255 255 204 ) #(217 240 163 ) #(173 221 142 ) #(120 198 121 ) #(49 163 84 ) #(0 104 55 ) )); at: 5 put: (7-&gt;#(#(255 255 204 ) #(217 240 163 ) #(173 221 142 ) #(120 198 121 ) #(65 171 93 ) #(35 132 67 ) #(0 90 50 ) )); at: 6 put: (8-&gt;#(#(255 255 229 ) #(247 252 185 ) #(217 240 163 ) #(173 221 142 ) #(120 198 121 ) #(65 171 93 ) #(35 132 67 ) #(0 90 50 ) )); at: 7 put: (9-&gt;#(#(255 255 229 ) #(247 252 185 ) #(217 240 163 ) #(173 221 142 ) #(120 198 121 ) #(65 171 93 ) #(35 132 67 ) #(0 104 55 ) #(0 69 41 ) )); yourself)); at: 8 put: ('Reds'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(254 224 210 ) #(252 146 114 ) #(222 45 38 ) )); at: 2 put: (4-&gt;#(#(254 229 217 ) #(252 174 145 ) #(251 106 74 ) #(203 24 29 ) )); at: 3 put: (5-&gt;#(#(254 229 217 ) #(252 174 145 ) #(251 106 74 ) #(222 45 38 ) #(165 15 21 ) )); at: 4 put: (6-&gt;#(#(254 229 217 ) #(252 187 161 ) #(252 146 114 ) #(251 106 74 ) #(222 45 38 ) #(165 15 21 ) )); at: 5 put: (7-&gt;#(#(254 229 217 ) #(252 187 161 ) #(252 146 114 ) #(251 106 74 ) #(239 59 44 ) #(203 24 29 ) #(153 0 13 ) )); at: 6 put: (8-&gt;#(#(255 245 240 ) #(254 224 210 ) #(252 187 161 ) #(252 146 114 ) #(251 106 74 ) #(239 59 44 ) #(203 24 29 ) #(153 0 13 ) )); at: 7 put: (9-&gt;#(#(255 245 240 ) #(254 224 210 ) #(252 187 161 ) #(252 146 114 ) #(251 106 74 ) #(239 59 44 ) #(203 24 29 ) #(165 15 21 ) #(103 0 13 ) )); yourself)); at: 9 put: ('RdPu'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(253 224 221 ) #(250 159 181 ) #(197 27 138 ) )); at: 2 put: (4-&gt;#(#(254 235 226 ) #(251 180 185 ) #(247 104 161 ) #(174 1 126 ) )); at: 3 put: (5-&gt;#(#(254 235 226 ) #(251 180 185 ) #(247 104 161 ) #(197 27 138 ) #(122 1 119 ) )); at: 4 put: (6-&gt;#(#(254 235 226 ) #(252 197 192 ) #(250 159 181 ) #(247 104 161 ) #(197 27 138 ) #(122 1 119 ) )); at: 5 put: (7-&gt;#(#(254 235 226 ) #(252 197 192 ) #(250 159 181 ) #(247 104 161 ) #(221 52 151 ) #(174 1 126 ) #(122 1 119 ) )); at: 6 put: (8-&gt;#(#(255 247 243 ) #(253 224 221 ) #(252 197 192 ) #(250 159 181 ) #(247 104 161 ) #(221 52 151 ) #(174 1 126 ) #(122 1 119 ) )); at: 7 put: (9-&gt;#(#(255 247 243 ) #(253 224 221 ) #(252 197 192 ) #(250 159 181 ) #(247 104 161 ) #(221 52 151 ) #(174 1 126 ) #(122 1 119 ) #(73 0 106 ) )); yourself)); at: 10 put: ('Greens'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(229 245 224 ) #(161 217 155 ) #(49 163 84 ) )); at: 2 put: (4-&gt;#(#(237 248 233 ) #(186 228 179 ) #(116 196 118 ) #(35 139 69 ) )); at: 3 put: (5-&gt;#(#(237 248 233 ) #(186 228 179 ) #(116 196 118 ) #(49 163 84 ) #(0 109 44 ) )); at: 4 put: (6-&gt;#(#(237 248 233 ) #(199 233 192 ) #(161 217 155 ) #(116 196 118 ) #(49 163 84 ) #(0 109 44 ) )); at: 5 put: (7-&gt;#(#(237 248 233 ) #(199 233 192 ) #(161 217 155 ) #(116 196 118 ) #(65 171 93 ) #(35 139 69 ) #(0 90 50 ) )); at: 6 put: (8-&gt;#(#(247 252 245 ) #(229 245 224 ) #(199 233 192 ) #(161 217 155 ) #(116 196 118 ) #(65 171 93 ) #(35 139 69 ) #(0 90 50 ) )); at: 7 put: (9-&gt;#(#(247 252 245 ) #(229 245 224 ) #(199 233 192 ) #(161 217 155 ) #(116 196 118 ) #(65 171 93 ) #(35 139 69 ) #(0 109 44 ) #(0 68 27 ) )); yourself)); at: 11 put: ('YlGnBu'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(237 248 177 ) #(127 205 187 ) #(44 127 184 ) )); at: 2 put: (4-&gt;#(#(255 255 204 ) #(161 218 180 ) #(65 182 196 ) #(34 94 168 ) )); at: 3 put: (5-&gt;#(#(255 255 204 ) #(161 218 180 ) #(65 182 196 ) #(44 127 184 ) #(37 52 148 ) )); at: 4 put: (6-&gt;#(#(255 255 204 ) #(199 233 180 ) #(127 205 187 ) #(65 182 196 ) #(44 127 184 ) #(37 52 148 ) )); at: 5 put: (7-&gt;#(#(255 255 204 ) #(199 233 180 ) #(127 205 187 ) #(65 182 196 ) #(29 145 192 ) #(34 94 168 ) #(12 44 132 ) )); at: 6 put: (8-&gt;#(#(255 255 217 ) #(237 248 177 ) #(199 233 180 ) #(127 205 187 ) #(65 182 196 ) #(29 145 192 ) #(34 94 168 ) #(12 44 132 ) )); at: 7 put: (9-&gt;#(#(255 255 217 ) #(237 248 177 ) #(199 233 180 ) #(127 205 187 ) #(65 182 196 ) #(29 145 192 ) #(34 94 168 ) #(37 52 148 ) #(8 29 88 ) )); yourself)); at: 12 put: ('Purples'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(239 237 245 ) #(188 189 220 ) #(117 107 177 ) )); at: 2 put: (4-&gt;#(#(242 240 247 ) #(203 201 226 ) #(158 154 200 ) #(106 81 163 ) )); at: 3 put: (5-&gt;#(#(242 240 247 ) #(203 201 226 ) #(158 154 200 ) #(117 107 177 ) #(84 39 143 ) )); at: 4 put: (6-&gt;#(#(242 240 247 ) #(218 218 235 ) #(188 189 220 ) #(158 154 200 ) #(117 107 177 ) #(84 39 143 ) )); at: 5 put: (7-&gt;#(#(242 240 247 ) #(218 218 235 ) #(188 189 220 ) #(158 154 200 ) #(128 125 186 ) #(106 81 163 ) #(74 20 134 ) )); at: 6 put: (8-&gt;#(#(252 251 253 ) #(239 237 245 ) #(218 218 235 ) #(188 189 220 ) #(158 154 200 ) #(128 125 186 ) #(106 81 163 ) #(74 20 134 ) )); at: 7 put: (9-&gt;#(#(252 251 253 ) #(239 237 245 ) #(218 218 235 ) #(188 189 220 ) #(158 154 200 ) #(128 125 186 ) #(106 81 163 ) #(84 39 143 ) #(63 0 125 ) )); yourself)); at: 13 put: ('GnBu'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(224 243 219 ) #(168 221 181 ) #(67 162 202 ) )); at: 2 put: (4-&gt;#(#(240 249 232 ) #(186 228 188 ) #(123 204 196 ) #(43 140 190 ) )); at: 3 put: (5-&gt;#(#(240 249 232 ) #(186 228 188 ) #(123 204 196 ) #(67 162 202 ) #(8 104 172 ) )); at: 4 put: (6-&gt;#(#(240 249 232 ) #(204 235 197 ) #(168 221 181 ) #(123 204 196 ) #(67 162 202 ) #(8 104 172 ) )); at: 5 put: (7-&gt;#(#(240 249 232 ) #(204 235 197 ) #(168 221 181 ) #(123 204 196 ) #(78 179 211 ) #(43 140 190 ) #(8 88 158 ) )); at: 6 put: (8-&gt;#(#(247 252 240 ) #(224 243 219 ) #(204 235 197 ) #(168 221 181 ) #(123 204 196 ) #(78 179 211 ) #(43 140 190 ) #(8 88 158 ) )); at: 7 put: (9-&gt;#(#(247 252 240 ) #(224 243 219 ) #(204 235 197 ) #(168 221 181 ) #(123 204 196 ) #(78 179 211 ) #(43 140 190 ) #(8 104 172 ) #(8 64 129 ) )); yourself)); at: 14 put: ('Greys'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(240 240 240 ) #(189 189 189 ) #(99 99 99 ) )); at: 2 put: (4-&gt;#(#(247 247 247 ) #(204 204 204 ) #(150 150 150 ) #(82 82 82 ) )); at: 3 put: (5-&gt;#(#(247 247 247 ) #(204 204 204 ) #(150 150 150 ) #(99 99 99 ) #(37 37 37 ) )); at: 4 put: (6-&gt;#(#(247 247 247 ) #(217 217 217 ) #(189 189 189 ) #(150 150 150 ) #(99 99 99 ) #(37 37 37 ) )); at: 5 put: (7-&gt;#(#(247 247 247 ) #(217 217 217 ) #(189 189 189 ) #(150 150 150 ) #(115 115 115 ) #(82 82 82 ) #(37 37 37 ) )); at: 6 put: (8-&gt;#(#(255 255 255 ) #(240 240 240 ) #(217 217 217 ) #(189 189 189 ) #(150 150 150 ) #(115 115 115 ) #(82 82 82 ) #(37 37 37 ) )); at: 7 put: (9-&gt;#(#(255 255 255 ) #(240 240 240 ) #(217 217 217 ) #(189 189 189 ) #(150 150 150 ) #(115 115 115 ) #(82 82 82 ) #(37 37 37 ) #(0 0 0 ) )); yourself)); at: 15 put: ('YlOrRd'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(255 237 160 ) #(254 178 76 ) #(240 59 32 ) )); at: 2 put: (4-&gt;#(#(255 255 178 ) #(254 204 92 ) #(253 141 60 ) #(227 26 28 ) )); at: 3 put: (5-&gt;#(#(255 255 178 ) #(254 204 92 ) #(253 141 60 ) #(240 59 32 ) #(189 0 38 ) )); at: 4 put: (6-&gt;#(#(255 255 178 ) #(254 217 118 ) #(254 178 76 ) #(253 141 60 ) #(240 59 32 ) #(189 0 38 ) )); at: 5 put: (7-&gt;#(#(255 255 178 ) #(254 217 118 ) #(254 178 76 ) #(253 141 60 ) #(252 78 42 ) #(227 26 28 ) #(177 0 38 ) )); at: 6 put: (8-&gt;#(#(255 255 204 ) #(255 237 160 ) #(254 217 118 ) #(254 178 76 ) #(253 141 60 ) #(252 78 42 ) #(227 26 28 ) #(177 0 38 ) )); at: 7 put: (9-&gt;#(#(255 255 204 ) #(255 237 160 ) #(254 217 118 ) #(254 178 76 ) #(253 141 60 ) #(252 78 42 ) #(227 26 28 ) #(189 0 38 ) #(128 0 38 ) )); yourself)); at: 16 put: ('PuRd'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(231 225 239 ) #(201 148 199 ) #(221 28 119 ) )); at: 2 put: (4-&gt;#(#(241 238 246 ) #(215 181 216 ) #(223 101 176 ) #(206 18 86 ) )); at: 3 put: (5-&gt;#(#(241 238 246 ) #(215 181 216 ) #(223 101 176 ) #(221 28 119 ) #(152 0 67 ) )); at: 4 put: (6-&gt;#(#(241 238 246 ) #(212 185 218 ) #(201 148 199 ) #(223 101 176 ) #(221 28 119 ) #(152 0 67 ) )); at: 5 put: (7-&gt;#(#(241 238 246 ) #(212 185 218 ) #(201 148 199 ) #(223 101 176 ) #(231 41 138 ) #(206 18 86 ) #(145 0 63 ) )); at: 6 put: (8-&gt;#(#(247 244 249 ) #(231 225 239 ) #(212 185 218 ) #(201 148 199 ) #(223 101 176 ) #(231 41 138 ) #(206 18 86 ) #(145 0 63 ) )); at: 7 put: (9-&gt;#(#(247 244 249 ) #(231 225 239 ) #(212 185 218 ) #(201 148 199 ) #(223 101 176 ) #(231 41 138 ) #(206 18 86 ) #(152 0 67 ) #(103 0 31 ) )); yourself)); at: 17 put: ('Blues'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(222 235 247 ) #(158 202 225 ) #(49 130 189 ) )); at: 2 put: (4-&gt;#(#(239 243 255 ) #(189 215 231 ) #(107 174 214 ) #(33 113 181 ) )); at: 3 put: (5-&gt;#(#(239 243 255 ) #(189 215 231 ) #(107 174 214 ) #(49 130 189 ) #(8 81 156 ) )); at: 4 put: (6-&gt;#(#(239 243 255 ) #(198 219 239 ) #(158 202 225 ) #(107 174 214 ) #(49 130 189 ) #(8 81 156 ) )); at: 5 put: (7-&gt;#(#(239 243 255 ) #(198 219 239 ) #(158 202 225 ) #(107 174 214 ) #(66 146 198 ) #(33 113 181 ) #(8 69 148 ) )); at: 6 put: (8-&gt;#(#(247 251 255 ) #(222 235 247 ) #(198 219 239 ) #(158 202 225 ) #(107 174 214 ) #(66 146 198 ) #(33 113 181 ) #(8 69 148 ) )); at: 7 put: (9-&gt;#(#(247 251 255 ) #(222 235 247 ) #(198 219 239 ) #(158 202 225 ) #(107 174 214 ) #(66 146 198 ) #(33 113 181 ) #(8 81 156 ) #(8 48 107 ) )); yourself)); at: 18 put: ('PuBuGn'-&gt;((Array new: 7) at: 1 put: (3-&gt;#(#(236 226 240 ) #(166 189 219 ) #(28 144 153 ) )); at: 2 put: (4-&gt;#(#(246 239 247 ) #(189 201 225 ) #(103 169 207 ) #(2 129 138 ) )); at: 3 put: (5-&gt;#(#(246 239 247 ) #(189 201 225 ) #(103 169 207 ) #(28 144 153 ) #(1 108 89 ) )); at: 4 put: (6-&gt;#(#(246 239 247 ) #(208 209 230 ) #(166 189 219 ) #(103 169 207 ) #(28 144 153 ) #(1 108 89 ) )); at: 5 put: (7-&gt;#(#(246 239 247 ) #(208 209 230 ) #(166 189 219 ) #(103 169 207 ) #(54 144 192 ) #(2 129 138 ) #(1 100 80 ) )); at: 6 put: (8-&gt;#(#(255 247 251 ) #(236 226 240 ) #(208 209 230 ) #(166 189 219 ) #(103 169 207 ) #(54 144 192 ) #(2 129 138 ) #(1 100 80 ) )); at: 7 put: (9-&gt;#(#(255 247 251 ) #(236 226 240 ) #(208 209 230 ) #(166 189 219 ) #(103 169 207 ) #(54 144 192 ) #(2 129 138 ) #(1 108 89 ) #(1 70 54 ) )); yourself)); yourself)</body></methods><methods><class-id>Roassal2.RTMondrian</class-id> <category>public</category><body package="Roassal2-Builder-Mondrian">applyLayout	layoutBuilder setUpElements: self topElements</body><body package="Roassal2-Builder-Mondrian">build	super build.	self applyLayout</body></methods><methods><class-id>Roassal2.RTMondrian</class-id> <category>initialization</category><body package="Roassal2-Builder-Mondrian">initialize	rootFrame := self createNewFrame.	currentFrame := rootFrame.	super initialize.	self resetLayoutBuilder.	self resetEdgeBuilder</body><body package="Roassal2-Builder-Mondrian">resetEdgeBuilder	edgeBuilder := RTEdgeBuilder new</body><body package="Roassal2-Builder-Mondrian">resetLayoutBuilder	layoutBuilder := self createLayoutBuilder</body><body package="Roassal2-Builder-Mondrian">resetShapeBuilder	shapeBuilder := self createShapeBuilder</body></methods><methods><class-id>Roassal2.RTMondrian</class-id> <category>hooks</category><body package="Roassal2-Builder-Mondrian">computeColorForNode	^ Color gray: ((5 - (self currentDepth + 1 min: 5)) / 5.0) asFloat</body><body package="Roassal2-Builder-Mondrian">createInteractionBuilder	^ RTInteractionBuilder new popup; draggable; yourself</body><body package="Roassal2-Builder-Mondrian">createShapeBuilder	| sb |	sb := RTBoundedShapeBuilder new.	sb shapeInitializer:		[ :aShape | sb color: self computeColorForNode ].	^ sb</body><body package="Roassal2-Builder-Mondrian">createView	^ super createView @ RTDraggableView</body><body package="Roassal2-Builder-Mondrian">metricNormalizerClass	^ RTMetricNormalizer</body></methods><methods><class-id>Roassal2.RTMondrian</class-id> <category>accessing</category><body package="Roassal2-Builder-Mondrian">currentDepth	^ self currentFrame depth</body><body package="Roassal2-Builder-Mondrian">currentElements	^ self currentFrame elements</body><body package="Roassal2-Builder-Mondrian">currentFrame	^ currentFrame</body><body package="Roassal2-Builder-Mondrian">edges	edgeBuilder 		elements: self currentElements; 		view: view;		shapeBuilder: shapeBuilder.	^ edgeBuilder</body><body package="Roassal2-Builder-Mondrian">layout	^ layoutBuilder</body><body package="Roassal2-Builder-Mondrian">rootFrame	^ rootFrame</body></methods><methods><class-id>Roassal2.RTMondrian</class-id> <category>deprecated - compatibility layer</category><body package="Roassal2-Builder-Mondrian">circleLayout	^ self layout circle</body><body package="Roassal2-Builder-Mondrian">edges: objects from: fromBlock to: toBlock	^ self edges			objects: objects;			connectFrom: fromBlock to: toBlock</body><body package="Roassal2-Builder-Mondrian">edgesFrom: aBlock	^ self edges connectFrom: aBlock</body><body package="Roassal2-Builder-Mondrian">flowLayout	^ self layout flow</body><body package="Roassal2-Builder-Mondrian">treeLayout	^ self layout tree</body></methods><methods><class-id>Roassal2.RTMondrian</class-id> <category>stack</category><body package="Roassal2-Builder-Mondrian">numberOfAllFrames	"Return the number of all the frame accessible within the builder"	^ rootFrame numberOfAllFrames</body><body package="Roassal2-Builder-Mondrian">popFrame	currentFrame := currentFrame parentFrame</body><body package="Roassal2-Builder-Mondrian">pushFrame: aFrame	currentFrame pushFrame: aFrame.	currentFrame := aFrame.	^ aFrame</body><body package="Roassal2-Builder-Mondrian">pushNewFrame	^ self pushFrame: self createNewFrame</body><body package="Roassal2-Builder-Mondrian">topElements	^ rootFrame elements</body></methods><methods><class-id>Roassal2.RTMondrian</class-id> <category>benchmarking</category><body package="Roassal2-Builder-Mondrian">benchmark"[ 100 timesRepeat: [| b | b := RTMondrianViewBuilder new.b shape rectangle	width: [ :c | c numberOfVariables * 4];	height: #numberOfMethods;	linearFillColor: #numberOfLinesOfCode within: RTShape withAllSubclasses.b nodes: RTShape withAllSubclasses.b edgesFrom: #superclass.b treeLayout.b build] ] timeToRun 0:00:00:00.393""[ 100 timesRepeat: [|b| b := RTMondrian new.b shape rectangle	width: [ :c | c numberOfVariables * 4];	height: #numberOfMethods;	linearFillColor: #numberOfLinesOfCode within: RTShape withAllSubclasses.b nodes: RTShape withAllSubclasses.b edges connectFrom: #superclass.b layout tree.b build ] ] timeToRun 0:00:00:00.393"</body><body package="Roassal2-Builder-Mondrian">benchmark02"[ 100 timesRepeat: [| b | b := RTMondrianViewBuilder new.b nodes: RTShape withAllSubclasses forEach: [ :c | b nodes: c methods ].b edgesFrom: #superclass.b treeLayout.b build] ] timeToRun 0:00:00:02.804""[ 100 timesRepeat: [|b| b := RTMondrian new.b nodes: RTShape withAllSubclasses forEach: [ :c | b nodes: c methods ].b edges connectFrom: #superclass.b layout tree.b build ] ] timeToRun 0:00:00:01.414"</body></methods><methods><class-id>Roassal2.RTMondrian</class-id> <category>public - recursive nodes</category><body package="Roassal2-Builder-Mondrian">recurTo: anObject	"This method is used to recur"	self assert: [ recurrentBlock notNil ] description: 'The #recurTo: message has to be called within a recursiveNodes:forEach: call'.	recurrentBlock value: anObject</body><body package="Roassal2-Builder-Mondrian">recursiveNodes: aDataStructure forEach: aOneArgBlock	"This method enables one to create recursive nested nodes"		"	Here is an example:-=-=-=-=		allElements := #(((1 2 (39 ) 2 )) 3).	b := RTMondrian new.	b recursiveNodes: allElements forEach: [ :elements |	    b shape rectangle.	    b nodes: elements forEach: [ :el |	        el isArray ifTrue: [ b recurTo: el ]	    ] ].	b-=-=-=-=	Another example:-=-=-=-=    root := '/Users/alexandrebergel/Documents' asFileReference.    b := RTMondrian new.    b        recursiveNodes: root        forEach: [ :aFileReference |             b shape box if: [ :aFile | aFile basename endsWith: '.pdf' ] color: Color green.            aFileReference isDirectory                ifTrue: [ b nodes: aFileReference children forEach: [ :aFileRef | b recurTo: aFileRef ] ]                ifFalse: [ b node: aFileReference ].            b layout grid ].    b-=-=-=-=	"		recurrentBlock := aOneArgBlock.	aOneArgBlock value: aDataStructure.	recurrentBlock := nil</body></methods><methods><class-id>Roassal2.RTMondrian</class-id> <category>public - nodes</category><body package="Roassal2-Builder-Mondrian">node: anObject	"Add a new node represengint an object to the view		For example:	b := RTMondrian new.	b node: 10.	b node: 20.	b open	"	^ (self nodes: (Array with: anObject)) first</body><body package="Roassal2-Builder-Mondrian">node: anObject forIt: aBlock	"Add a new node represengint an object to the view. The node is a container for other objects.		For example:	b := RTMondrian new.	b node: 10 forIt: [ b nodes: (1 to: 5) ].	b node: 20 forIt: [ b nodes: (1 to: 5) ].	b open	"	^ (self nodes: (Array with: anObject) forEach: [ :each | aBlock value ]) first</body><body package="Roassal2-Builder-Mondrian">nodes: objects	"Add a new node represengint an object to the view. The node is a container for other objects.		For example:	b := RTMondrian new.	b nodes: (1 to: 10).	b layout force.	b open			Another example:	b := RTMondrian new.	b shape box size: #numberOfMethods.	b nodes: Collection withAllSubclasses.	b layout flow.	b open		Another example:	b := RTMondrian new.	b shape box size: #numberOfMethods.	b nodes: Collection withAllSubclasses.	b edges connectFrom: #superclass.	b normalizer 		normalizeSize: #numberOfMethods;		normalizeColor: #numberOfMethods.	b layout cluster.	b open	"		| els |	self assert: [ objects isCollection ] description: 'You need to provide a collection to #nodes:'.	els := self elementsOn: objects.	self currentFrame addElements: els.	view addAll: els.	self resetShapeBuilder.	self resetLayoutBuilder.	self resetInteraction.	^ els</body><body package="Roassal2-Builder-Mondrian">nodes: objects forEach: aOneArgBlock	"Add new nodes representing for each object to the view. Each node is a container for other objects.		For example:	b := RTMondrian new.	b nodes: (1 to: 10) forEach: [ :valueBetween1And10 | 		b nodes: (1 to: valueBetween1And10).		b layout grid ].	b layout grid.	b open		Another example:	b := RTMondrian new.	b shape box size: #numberOfMethods.	b nodes: Collection withAllSubclasses forEach: [ :cls |		b nodes: cls methods.		b layout grid. ].	b edges connectFrom: #superclass.	b layout tree.	b open	"	| result |	result := self nodes: objects.		result do: [ :element | 		self pushNewFrame.		self resetShapeBuilder.		self resetLayoutBuilder.		self resetEdgeBuilder.		self resetInteraction.					aOneArgBlock rtValue: element model.		RTNest new			layout: layoutBuilder layout;			on: element nest: self currentFrame elements.		self popFrame.	].	self resetShapeBuilder.	self resetLayoutBuilder.	self resetInteraction.	^ result</body></methods><methods><class-id>Roassal2.RTMondrian</class-id> <category>factories</category><body package="Roassal2-Builder-Mondrian">createLayoutBuilder	| newLayoutBuilder |	newLayoutBuilder := RTLayoutBuilder new.	newLayoutBuilder horizontalLine.	^ newLayoutBuilder</body><body package="Roassal2-Builder-Mondrian">createNewFrame	^ RTMondrianFrame new</body></methods><methods><class-id>Roassal2.TRFocusTopRight</class-id> <category>hooks</category><body package="Roassal2-Trachel-Core">on: canvas	| encompassingRectangle |	encompassingRectangle := self encompassingRectangleOf: canvas shapes. 	canvas camera translateTo: encompassingRectangle topRight</body></methods><methods><class-id>Roassal2.GCircleArc</class-id> <category>initialize-release</category><body package="Roassal2-Pharo">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body><body package="Roassal2-Pharo">setCircle: aCircle startAngle: aStart endAngle: anEnd	circle := aCircle.	startAngle := aStart.	endAngle := anEnd</body></methods><methods><class-id>Roassal2.GCircleArc</class-id> <category>accessing</category><body package="Roassal2-Pharo">center	^ circle center</body><body package="Roassal2-Pharo">circle	^ circle</body><body package="Roassal2-Pharo">endAngle	^ endAngle</body><body package="Roassal2-Pharo">radius	^ circle radius</body><body package="Roassal2-Pharo">startAngle	^ startAngle</body></methods><methods><class-id>Roassal2.GCircleArc</class-id> <category>comparing</category><body package="Roassal2-Pharo">= anArc	self species = anArc species		ifFalse: [ ^ false ].	^ self circle = anArc circle		and: [ self startAngle = anArc startAngle and: [ self endAngle = anArc endAngle ] ]</body></methods><methods><class-id>Roassal2.GCircleArc</class-id> <category>public</category><body package="Roassal2-Pharo">intersectLineSegment: aLineSegment	^ aLineSegment intersectCircleArc: self</body></methods><methods><class-id>Roassal2.GCircleArc class</class-id> <category>instance creation</category><body package="Roassal2-Pharo">center: aCenter radius: aRadius startAngle: aStart endAngle: anEnd	^ self new		setCircle: (GCircle center: aCenter radius: aRadius) startAngle: aStart endAngle: anEnd;		yourself</body><body package="Roassal2-Pharo">circle: aCircle startAngle: aStart endAngle: anEnd	^ self new		setCircle: aCircle startAngle: aStart endAngle: anEnd;		yourself</body><body package="Roassal2-Pharo">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Roassal2.RTClusterLayout</class-id> <category>algorithm</category><body package="Roassal2-Layouts">computePosition: aNode	|children previous|		children := self childrenFor: aNode.		children do: [ :e | self computePosition: e ].													children isEmpty ifTrue: [ externalLayer first = aNode ifFalse: [ previous := externalLayer at: ( externalLayer indexOf: aNode) - 1.																											((self fatherOf: previous) = (self fatherOf: aNode)) ifTrue: [ self xOf: aNode put: (self xOf: previous) + (horizontalGap / 2) ] 																																			ifFalse: [ self xOf: aNode put: (self xOf: previous) + horizontalGap] ] ]																																																ifFalse: [ self xOf: aNode put: ((self xOf: (self leftContourOf: aNode)) + (self xOf: (self rightContourOf: aNode)) / 2 )]</body></methods><methods><class-id>Roassal2.RTClusterLayout</class-id> <category>initialize-release</category><body package="Roassal2-Layouts">initialize 	super initialize.	verticalGap := 30.	horizontalGap := 20.	externalLayer := OrderedCollection new</body><body package="Roassal2-Layouts">initializeNode: aNode	|children|		children := self childrenFor: aNode.		children do: [ :e | self initializeNode: e.						self fatherOf: e put: aNode ].		children isEmpty ifTrue: [ self layerOf: aNode put: 0.							externalLayer add: aNode ] 					ifFalse: [ self layerOf: aNode put: ((children collect: [ :e | (self layerOf: e) ]) max + 1).							self leftContourOf: aNode put: children first.							self rightContourOf: aNode put: children last ].</body></methods><methods><class-id>Roassal2.RTClusterLayout</class-id> <category>drawing-general</category><body package="Roassal2-Layouts">draw: aNode	(self childrenFor: aNode) do: [ :e | self draw: e ].	translator translateTopLeftOf: aNode to: (Point r: maxLayer - (self layerOf: aNode) * verticalGap theta: (maxAbcissa - (self xOf: aNode) / maxAbcissa) * 2 * Float pi )</body></methods><methods><class-id>Roassal2.RTClusterLayout</class-id> <category>hook</category><body package="Roassal2-Layouts">doExecute: nodeElements 	| root gap |	"Not much to do if there is only one element"	nodeElements size = 1 ifTrue: [ ^ self ].		root := self rootNodesFor: nodeElements .	root do: [ :e | self initializeNode: e ].	root do: [ :e | self computePosition: e ].		maxLayer := (root collect: [ :e | self layerOf: e ]) max.		(root size &gt; 1) ifTrue: [ maxLayer := maxLayer + 1 ].		maxAbcissa := (self xOf: externalLayer last) + horizontalGap .		gap := maxAbcissa "+ horizontalGap "/ 2 / Float pi / maxLayer.		verticalGap := verticalGap max: gap.		root do: [ :e | self draw: e. self step ].</body></methods><methods><class-id>Roassal2.RTJavascriptVisitor</class-id> <category>visitor-interactions</category><body package="Roassal2-Exporter-HTML5">visitDraggableInteraction: anInteraction with: anObject	| list trachelBlock nest |	list := OrderedCollection new.	(anObject attributes includesKey: #RTLabelledLabel) ifTrue: [  		list add: (anObject attributes at: #RTLabelledLabel).	].	nest := nil.	nest := [ :ob | 		(ob attributes includesKey: #nestedElements) ifTrue: [ 			(ob attributes at: #nestedElements) do: [ :e|				e isCollection 					ifTrue: [ list addAll: (e collect: [:x | nest value: x. x trachelShape ]) ]					ifFalse: [ nest value: e. list add: e trachelShape ] ] ].		].	nest value: anObject.		trachelBlock := [ :e|	(e isKindOf: TRShape) ifTrue: [ e ] ifFalse: [ e trachelShape ] ].	list addAll: (anInteraction groupToDrag collect: trachelBlock).	list isEmpty ifTrue: [ self visitInteraction: anInteraction with: anObject ]	ifFalse: [		stream nextPutAll: 'new RTDraggable(['.		list do: [ :e | 			stream nextPutAll: '"';				nextPutAll: (self nameFor:e);				nextPutAll: '", ' ].			stream nextPutAll: '])'.	]</body><body package="Roassal2-Exporter-HTML5">visitHightlightableInteraction: anInt with: el	stream nextPutAll: 'new RTHighlightable({'.	self addColor: anInt highlightedColor.	stream nextPutAll: 'ides: ['.		((anInt highlightElements) rtValue: el) 		do: [ :e |			stream 				nextPutAll: '"';				nextPutAll: (self nameFor: e trachelShape);				nextPutAll: '",' ].		stream nextPutAll: ']})'.</body><body package="Roassal2-Exporter-HTML5">visitInteraction: interaction with: anObject	stream nextPutAll: interaction class name.</body><body package="Roassal2-Exporter-HTML5">visitInteractions: anObject	TRPlatform current visitInteractionsFor: self and: anObject.</body><body package="Roassal2-Exporter-HTML5">visitLabelledInteraction: anInt with: el	stream nextPutAll: 'new RTLabelled({'.		self addColor: anInt color.		stream nextPutAll: 'low'.		self addColor: anInt lowColor.		stream 			nextPutAll: 'lbl: ';			nextPutAll: '"';			nextPutAll: (self nameFor: anInt lbl);			nextPutAll: '"})'.</body><body package="Roassal2-Exporter-HTML5">visitLinkView: anInt with: el	| eview name st exporter |	eview := anInt viewFor: el.	name := anInt nameFor: el.	name ifNil: [ name := self nameFor: el ].		[ 	eview ifNotNil: [ 		exporter := RTHTML5Exporter new 			fileName: name, '.html';			shouldCreateJS: false.		exporter createStream.		st := exporter stream.		exporter export: eview toStream: st] 	] on: Error do: [ :ex |	st close.	exporter export: anInt errorView ].	stream 		nextPutAll: 'new RTLinkView("';		nextPutAll: name;			nextPutAll: '")'.</body><body package="Roassal2-Exporter-HTML5">visitPopupInteraction: anInt with: el	| elements |	[elements := anInt createPopupFor: el] 		on: Error do: [ ^ self ].			stream nextPutAll: 'new RTPopup(['.	elements do: [ :e | 		e trachelShape element: e.		e trachelShape accept: self ].	stream nextPutAll: ']) '.</body><body package="Roassal2-Exporter-HTML5">visitShowEdgeInteraction: anInt with: el	|edges t |	t := (anInt connectToElements rtValue: el).	t := t copyWithout: nil.	edges := (anInt shape rtValue: el) edgesFrom: el toAll: t.	stream nextPutAll: 'new RTShowEdge(['.	edges do: [ :e |		e trachelShape element: e.		e trachelShape accept: self ].	stream nextPutAll: ']) '.</body><body package="Roassal2-Exporter-HTML5">visitShowLabelInteraction: anInt with: el		stream nextPutAll: 'new RTShowLabel(['.	((anInt highlightElements) rtValue: el) do: [:ele |		(anInt labelledInteraction initializeElement: ele) accept: self.	].	stream nextPutAll: ']) '.	anInt doUnhighlightElement: el</body></methods><methods><class-id>Roassal2.RTJavascriptVisitor</class-id> <category>visitor</category><body package="Roassal2-Exporter-HTML5">visitAbstractLine: anAbstractLine	"anAbstractLine accept: anAbstractLine	"	"TODO"</body><body package="Roassal2-Exporter-HTML5">visitArcShape: aShape	aShape topLeft ifNil: [ aShape computeRectangle ].	stream nextPutAll: '		{type: "arc", id: "';		nextPutAll: (self nameFor: aShape);		nextPutAll: '", ir: ';		nextPutAll: (self number: aShape innerRadius);		nextPutAll: ', er: ';		nextPutAll: (self number: aShape externalRadius);		nextPutAll:', aAngle: ';		nextPutAll: (self number: aShape alphaAngle);		nextPutAll: ', bAngle: ';		nextPutAll: (self number: aShape betaAngle);		nextPutAll: ', o: {x: ';		nextPutAll: (self number: aShape topLeft x);		nextPutAll: ', y: ';		nextPutAll: (self number: aShape topLeft y);		nextPutAll: '}, c: {x: ';		nextPutAll: (self number: aShape bottomRight x);		nextPutAll: ', y: ';		nextPutAll: (self number: aShape bottomRight y );		nextPutAll: '},'.	self addColor: aShape color.	self addInteractions: aShape element.	self addMatrix: aShape matrix.</body><body package="Roassal2-Exporter-HTML5">visitArrowHeadShape: arrowShape	| e |	e := arrowShape element.	stream nextPutAll: '		{type: "headarrow", id: "';		nextPutAll: (self nameFor: arrowShape);		nextPutAll: ('", fromid: &lt;1p&gt;, toid: &lt;2p&gt;,' 		expandMacrosWith:  (self nameFor: e from trachelShape) with: (self nameFor: e to trachelShape) ).	self addColor: arrowShape color.	self addBorderColor: arrowShape strokePaint.		stream 		nextPutAll: ' width: ';		nextPutAll: (self number: arrowShape width);		nextPutAll: ', size: ';		nextPutAll: (self number: arrowShape mySize).	self visitAttachPoint: e.	stream 		nextPutAll: ', base: ';		nextPutAll: (self number: arrowShape baseSize);		nextPutAll: '},'.</body><body package="Roassal2-Exporter-HTML5">visitArrowShape: arrowShape	| e |	e := arrowShape element.	stream nextPutAll: '		{type: "simplearrow", id: "';		nextPutAll: (self nameFor: arrowShape);		nextPutAll: ('", fromid: &lt;1p&gt;, toid: &lt;2p&gt;,' 		expandMacrosWith:  (self nameFor: e from trachelShape) with: (self nameFor: e to trachelShape) ).	self addColor: arrowShape strokePaint.	stream		nextPutAll: ' width: ';		nextPutAll: (self number: arrowShape width);		nextPutAll: ', size: ';		nextPutAll: (self number: arrowShape mySize).	self visitAttachPoint: e.	stream 		nextPutAll: ', base: ';	 	nextPutAll: (self number: arrowShape baseSize);		nextPutAll: '},'.</body><body package="Roassal2-Exporter-HTML5">visitAttachPoint: element	| ap |	element ifNil: [ 		^ stream nextPutAll: ',ap:RTCenteredAttachPoint' ].	ap := element shape class = RTCompositeShape 		ifTrue: [ element shape allShapes first ] 		ifFalse: [ element shape ].	stream nextPutAll: ',ap: new ';		nextPutAll: ap attachPoint class name;		nextPutAll: '(';		nextPutAll: ap attachPoint isInverted asString;		nextPutAll: ')'.</body><body package="Roassal2-Exporter-HTML5">visitBezierShape: aBezierShape	| e shape |	e := aBezierShape element.	shape := (e shape class = RTCompositeShape) ifTrue: [ shape := e shape allShapes first ] ifFalse: [ e shape ].	stream nextPutAll: '		{type: "bezier", id: "';		nextPutAll: (self nameFor: aBezierShape);		nextPutAll: ('", fromid: &lt;1p&gt;, toid: &lt;2p&gt;,' 		expandMacrosWith:  (self nameFor: e from trachelShape) with: (self nameFor: e to trachelShape) ).	self addColor: aBezierShape strokePaint.		shape class = RTBezierLine ifTrue: [ 		stream 			nextPutAll:  'tension: ';			nextPutAll: (self number: shape tension);			nextPutAll: ', ides: ['.		shape follow ifNotNil: [ shape setControllingElementsFromFollowFor: e ].		(shape controllingElements rtValue: e) do: [ :el | 			stream 				nextPutAll: '"';				nextPutAll: (self nameFor: el trachelShape);				nextPutAll: '", '] ].		stream nextPutAll: '], width: ';		nextPutAll: (self number: aBezierShape width).	self visitAttachPoint: e.	stream nextPutAll: '},'.</body><body package="Roassal2-Exporter-HTML5">visitBitMapShape: aBitmapShape	| s icon64 |	s := WriteStream on: ByteArray new.		TRPlatform current pngReadWriterClass putForm: (aBitmapShape form) onStream: s.		icon64 := (TRPlatform current mimeEncode: s contents readStream multiLine: false).	stream nextPutAll: '		{type: "bitmap", id: "';		nextPutAll: (self nameFor: aBitmapShape);		nextPutAll: '", base64: "';		nextPutAll: icon64;		nextPutAll: '", w: ';		nextPutAll: (self number: aBitmapShape width);		nextPutAll: ', h: ';		nextPutAll: (self number: aBitmapShape height);		nextPutAll: ', '.	self addInteractions: aBitmapShape element.	self addMatrix: aBitmapShape matrix.	s close.</body><body package="Roassal2-Exporter-HTML5">visitBoxShape: aBox		| box |	box := aBox basicEncompassingRectangle.	stream nextPutAll: '		{type: "box", id: "';		nextPutAll: (self nameFor: aBox);		nextPutAll: '", w: ';		nextPutAll: (self number: box width);		nextPutAll: ', h: ';		nextPutAll: (self number: box height);		nextPutAll: ', '.	self addBorderColor: aBox strokePaint.	self addBorderWidth: aBox.	self addColor: aBox color.	self addInteractions: aBox element.	self addMatrix: aBox matrix.</body><body package="Roassal2-Exporter-HTML5">visitCanvas: aCanvas	self exportFixedShapes ifFalse: [ ^ self ].	aCanvas fixedShapes ifEmpty: [ ^ self ].	stream nextPutAll:'	shapes = ['.	aCanvas fixedShapes do: [ :s | s accept: self ].	stream nextPutAll: '	];	mamani.addFixedShapes(shapes);'</body><body package="Roassal2-Exporter-HTML5">visitDiamondShape: diamondShape	"TODO"</body><body package="Roassal2-Exporter-HTML5">visitEdge: edge	edge trachelShape accept: self.</body><body package="Roassal2-Exporter-HTML5">visitElement: e	e trachelShape accept: self</body><body package="Roassal2-Exporter-HTML5">visitEllipseShape: anEllipse		| box |	box := anEllipse basicEncompassingRectangle.	stream nextPutAll: '		{type: "ellipse", id: "';		nextPutAll: (self nameFor: anEllipse);		nextPutAll: '", rx: ';		nextPutAll: (self number: box width / 2);		nextPutAll: ', ry: ';		nextPutAll: (self number: box height/2);		nextPutAll: ','.	self addBorderColor: anEllipse strokePaint.	self addBorderWidth: anEllipse.	self addColor: anEllipse color.	self addInteractions: anEllipse element.	self addMatrix: anEllipse matrix.</body><body package="Roassal2-Exporter-HTML5">visitGroup: aRTGroup	aRTGroup accept: self.</body><body package="Roassal2-Exporter-HTML5">visitLabelShape: aLabel	| box |	box := aLabel basicEncompassingRectangle.	stream nextPutAll: '		{type: "label", id: "';		nextPutAll: (self nameFor: aLabel);		nextPutAll: '",o: {x: ';		nextPutAll: (self number: box origin x);		nextPutAll: ', y: ';		nextPutAll: (self number: box origin y);		nextPutAll: '},c: {x: ';		nextPutAll: (self number: box corner x);		nextPutAll: ', y: ';		nextPutAll: (self number: box corner y);		nextPutAll: '},'.	self addColor: aLabel color.	self addStringWithFont: aLabel.	self addInteractions: aLabel element.	self addMatrix: aLabel matrix.</body><body package="Roassal2-Exporter-HTML5">visitLineShape: aLine		| e fromTo |	e := aLine element.	fromTo := e 		ifNil: [ '", fromid: ',(self pointToString: aLine from),',toid:',(self pointToString: aLine to),',' ]		ifNotNil: [ '",fromid:&lt;1p&gt;,toid:&lt;2p&gt;,' 			expandMacrosWith: (self nameFor: e from trachelShape)			with: (self nameFor: e to trachelShape) ].		stream nextPutAll: '		{type: "line", id: "';		nextPutAll: (self nameFor: aLine);		nextPutAll: fromTo.	self addColor: aLine color.	stream nextPutAll: ' width: ';		nextPutAll: (self number: aLine width).	self visitAttachPoint: e.	stream nextPutAll: '},'.</body><body package="Roassal2-Exporter-HTML5">visitMultiCompositeShape: aShape	stream nextPutAll: '		{id: "';		nextPutAll: (self nameFor: aShape);		nextPutAll: '", type:"multi", shapes:['.	aShape shapes do: [ :s| s accept: self].	stream nextPutAll: '], offsets: ['.	aShape offsets do: [ :o | 		stream nextPutAll: '{x: ';			nextPutAll: (self number: o x);			nextPutAll: ', y: ';			nextPutAll: (self number: o y);			nextPutAll: '},' ].		stream nextPutAll: ']'.	(aShape element isNil not and: [aShape element shape isKindOf: RTMultiColoredLine]) ifTrue: [ 		self visitAttachPoint: aShape element. ].	stream nextPutAll: '},'.</body><body package="Roassal2-Exporter-HTML5">visitNoShape: aNoShape	"Do nothing"</body><body package="Roassal2-Exporter-HTML5">visitPolygonShape: aPolygon	| r c |	r := aPolygon encompassingRectangle.	c := aPolygon color.	c ifNil: [ c:= Color transparent ].		stream nextPutAll: '		{type: "polygon", id: "';		nextPutAll: (self nameFor: aPolygon);		nextPutAll: ('", o: {x: ',(self number: r origin x),', y: ',(self number: r origin y),'}');		nextPutAll: (', c: {x: ',(self number: r corner x),', y: ',(self number: r corner y),'}, p: "').		aPolygon vertices do: [ :p |		stream nextPutAll: (self number: p x),',',(self number: p y),' '. ].	stream nextPutAll: '",'.	self addBorderColor: aPolygon strokePaint.	self addBorderWidth: aPolygon.	self addColor: c.	self addInteractions: aPolygon element.	self addMatrix: aPolygon matrix.</body><body package="Roassal2-Exporter-HTML5">visitRotatedLabelShape: aLabel	| box matrix |	box := aLabel basicEncompassingRectangle.	stream nextPutAll: '		{type: "label", id: "';		nextPutAll: (self nameFor: aLabel);		nextPutAll: ('",o: {x: &lt;1p&gt;, y: &lt;2p&gt;},' expandMacrosWith: box origin x with: box origin y);		nextPutAll: ('c: {x: &lt;1p&gt;, y: &lt;2p&gt;},' expandMacrosWith: box corner x with: box corner y).	self addColor: aLabel color.	self addStringWithFont: aLabel.	self addInteractions: aLabel element.	matrix := aLabel matrix copy.	matrix rotateByDegrees: aLabel angle.	self addMatrix: matrix.</body><body package="Roassal2-Exporter-HTML5">visitSVGPath: aSVGPath	| r c |	r := aSVGPath basicEncompassingRectangle.	c := aSVGPath color.	c ifNil: [ c:= Color transparent ].	stream nextPutAll: '		{type: "path", id: "';		nextPutAll: (self nameFor: aSVGPath);		nextPutAll: '", d:"';		nextPutAll: aSVGPath pathString;		nextPutAll: '", o: {x: ',(self number: r origin x),', y: ',(self number: r origin y),'}' ;		nextPutAll: ', c: {x: ',(self number: r corner x),', y: ',(self number: r corner y),'},'.		self addBorderColor: aSVGPath strokePaint.	self addBorderWidth: aSVGPath.		self addColor: c.	self addInteractions: aSVGPath element.	self addMatrix: aSVGPath matrix.</body><body package="Roassal2-Exporter-HTML5">visitShape: aShape	aShape accept: self</body><body package="Roassal2-Exporter-HTML5">visitView: aView	| elements |	stream nextPutAll: 'mamani.color('.	self addColorBase: aView canvas color.	stream nextPutAll:(');	mamani.camera.setScale(&lt;1p&gt;);' 	expandMacrosWith: aView canvas camera scale).	aView announcer subscriptions trSubscriptions isEmpty ifFalse: [		stream nextPutAll: 'mamani.addInteractions('.		self visitInteractions: aView.		stream nextPutAll: ');	'].	elements := (aView canvas shapes collect: [ :s | 		s element isNil ifTrue: [ s ] ifFalse: [ s element ] ]) asOrderedCollection removeDuplicates.		stream nextPutAll:'	var shapes = ['.	elements do: [ :e | e accept: self ].	stream nextPutAll:'	];	mamani.addShapes(shapes);'.	aView canvas accept: self</body></methods><methods><class-id>Roassal2.RTJavascriptVisitor</class-id> <category>initialization</category><body package="Roassal2-Exporter-HTML5">initialize	names := Dictionary new.	validInteractions := #(#RTDraggableView #RTDraggable #RTPopup 	#RTHighlightable #RTLabeled #RTShowEdge #RTShowLabel #RTZoomableView	#RTFocusElement #RTLinkView).	self exportFixedShapes: true.	self stream: (WriteStream on: String new).	self maxSize: 500.</body></methods><methods><class-id>Roassal2.RTJavascriptVisitor</class-id> <category>accessing</category><body package="Roassal2-Exporter-HTML5">exportFixedShapes	^ exportFixedShapes</body><body package="Roassal2-Exporter-HTML5">exportFixedShapes: aBool	exportFixedShapes := aBool</body><body package="Roassal2-Exporter-HTML5">maxSize	^ maxSize</body><body package="Roassal2-Exporter-HTML5">maxSize: size	maxSize := size.</body><body package="Roassal2-Exporter-HTML5">stream	^stream</body><body package="Roassal2-Exporter-HTML5">stream: aStream	stream := aStream.</body><body package="Roassal2-Exporter-HTML5">view	^view</body><body package="Roassal2-Exporter-HTML5">view: aView	view := aView.</body></methods><methods><class-id>Roassal2.RTJavascriptVisitor</class-id> <category>helpers</category><body package="Roassal2-Exporter-HTML5">addBorderColor: c	c ifNil: [ ^ self].		stream nextPutAll: ('bordercolor: {r: &lt;1p&gt;, g: &lt;2p&gt;, b:&lt;3p&gt;' expandMacrosWith: (c red*255) rounded with: (c green*255) rounded with:  (c blue*255) rounded ).	c alpha = 1 ifTrue: [ stream nextPutAll: '}, ' ]	ifFalse: [ stream nextPutAll: (', a: &lt;1p&gt;}, ' expandMacrosWith: c alpha) ]</body><body package="Roassal2-Exporter-HTML5">addBorderWidth: aShape	(aShape strokePaint isNil or: [ aShape strokeWidth &lt; 0 ]) ifTrue: [ ^ self ].	stream 		nextPutAll: 'sw: ';		nextPutAll: (self number: aShape strokeWidth);		nextPutAll: ','.</body><body package="Roassal2-Exporter-HTML5">addColor: c	stream nextPutAll: 'color: '.	self addColorBase: c.	stream nextPutAll: ', '.</body><body package="Roassal2-Exporter-HTML5">addColorBase: c	stream 		nextPutAll: '{r:';		nextPutAll: (self number: (c red*255) rounded);		nextPutAll: ',g:';		nextPutAll: (self number: (c green*255) rounded);		nextPutAll: ',b:';		nextPutAll: (self number: (c blue*255) rounded).	c alpha = 1 ifTrue: [ stream nextPutAll: '}' ]	ifFalse: [ stream 		nextPutAll: ',a:';		nextPutAll: (self number: c alpha);		nextPutAll: '}' ]</body><body package="Roassal2-Exporter-HTML5">addInteractions: aShape	aShape isNil ifTrue: [ ^ self ].	(aShape isKindOf: RTAnnounceableObject) ifFalse: [ ^ self ].	stream nextPutAll: 'ints: '.	self visitInteractions: aShape.	stream nextPutAll: ', '</body><body package="Roassal2-Exporter-HTML5">addMatrix: m	stream 		nextPutAll: 'matrix:{shx: ';		nextPutAll: (self number: m shx);		nextPutAll: 	',shy: ';		nextPutAll: (self number: m shy);		nextPutAll: 	',sx: ';		nextPutAll: (self number: m sx);		nextPutAll: 	',sy: ';		nextPutAll: (self number: m sy);		nextPutAll: 	',x: ';		nextPutAll: (self number: m x);		nextPutAll: ',y: ';		nextPutAll: (self number: m y);		nextPutAll: '}}, '.</body><body package="Roassal2-Exporter-HTML5">addStringWithFont: aLabel	| converter fn |	converter := RTSVGStringConverter new.	fn := aLabel fontName.	fn = 'Source Sans Pro' ifTrue: [ fn := 'Verdana, Geneva, sans-serif' ].	stream nextPutAll: ' text: "';		nextPutAll: (converter convertString: (aLabel text truncateTo: maxSize));		nextPutAll: '", font: {n: "';		nextPutAll: fn;		nextPutAll: '", s: ';		nextPutAll: (self number: aLabel fontSize);		nextPutAll: '},'</body><body package="Roassal2-Exporter-HTML5">pointToString: point	^ '{x:', (self number: point x), ',y:', (self number: point y),'}'</body><body package="Roassal2-Exporter-HTML5">validInteractions	^ validInteractions</body></methods><methods><class-id>Roassal2.TRApplicationModel</class-id> <category>accessing</category><body package="Roassal2-Visualworks">extent	^self mainWindow extent.</body><body package="Roassal2-Visualworks">extent: aPoint	self mainWindow resize: aPoint.</body><body package="Roassal2-Visualworks">labelString	^self mainWindow label</body><body package="Roassal2-Visualworks">setLabel: aString	^ self mainWindow label: aString</body></methods><methods><class-id>Roassal2.TRApplicationModel</class-id> <category>aspect</category><body package="Roassal2-Visualworks">drawing	drawing ifNil:[ self error: 'This should not happend, use drawing: before'].	^drawing</body><body package="Roassal2-Visualworks">drawing: aTRVisual	drawing :=aTRVisual</body></methods><methods><class-id>Roassal2.TRApplicationModel</class-id> <category>interface closing</category><body package="Roassal2-Visualworks">close	self delete</body><body package="Roassal2-Visualworks">delete	self closeRequest.</body></methods><methods><class-id>Roassal2.TRApplicationModel</class-id> <category>interface opening</category><body package="Roassal2-Visualworks">postOpenWith: aBuilder 	super postOpenWith: aBuilder.	TRApplicationModel postOpenWith: aBuilder and: self selector: #drawing.</body></methods><methods><class-id>Roassal2.TRApplicationModel class</class-id> <category>utility</category><body package="Roassal2-Visualworks">postOpenWith: builder and: anApp selector: selector	| delay open process vp |	open := true.	delay := Delay forMilliseconds: 20.	vp := selector isSymbol ifTrue: [anApp perform: selector] ifFalse: [selector ].	process := nil.	builder window damageRepairPolicy: DoubleBufferingWindowDisplayPolicy new.	"anApp mainWindow when:#bounds evaluate: [ vp changedView. ]."	anApp mainWindow when:#close evaluate: [ open := false. process terminate. ].		process := [		[open] whileTrue: [ 			| canvas |			canvas := vp trachelCanvas.			vp trachelCanvas playAnimations.			canvas hasAnimation				 ifTrue: [ vp invalidateNow. ].			delay wait.						]. ] fork.</body></methods><methods><class-id>Roassal2.RTShorterDistanceAttachPointAndCompositeShape</class-id> <category>initialization</category><body package="Roassal2-AttachPoint">initialize	super initialize.	composedShapeSelection := #first</body></methods><methods><class-id>Roassal2.RTShorterDistanceAttachPointAndCompositeShape</class-id> <category>public - hooks</category><body package="Roassal2-AttachPoint">attachPointsFor: anEdge on: anElement	"Return the four possible attach points for each of the four sides for given edge on given element."	| rec center |	rec := (composedShapeSelection rtValue: anElement trachelShape shapes) encompassingRectangle.	center := rec center.	^ Array 		"upper side"		with: ((center x) @ rec top)		 "right side"		with: (rec right @ (center y))		"lower side"		with: ((center x) @ rec bottom)		"left side"		with: (rec left @ (center y))</body></methods><methods><class-id>Roassal2.RTShorterDistanceAttachPointAndCompositeShape</class-id> <category>as yet unclassified</category><body package="Roassal2-AttachPoint">composedShapeSelection: aSymbol	"aSymbol can be #first, #second, #third, or a one arg block"	"The argument is used to select which of the shapes in the composed shape of the element to pick"	composedShapeSelection := aSymbol</body></methods><methods><class-id>Roassal2.TREllipseShape</class-id> <category>hooks</category><body package="Roassal2-Trachel-Shapes">computePath	path := TRPlatform current computeEllipsePathFor: self</body><body package="Roassal2-Trachel-Shapes">defaultStrokeWidth	^ self class defaultStrokeWidth</body></methods><methods><class-id>Roassal2.TREllipseShape</class-id> <category>testing</category><body package="Roassal2-Trachel-Shapes">includesPoint: aPoint	"Implementation is taken over from EllipseMorph&gt;&gt;containsPoint:"	| invertedPoint radius other delta xOverY t1 t2 |	invertedPoint := matrix inverseTransform: aPoint.	(rectangle containsPoint: invertedPoint) ifFalse: [ ^ false ]. "quick elimination"	radius := rectangle height asFloat / 2.	other := rectangle width asFloat / 2.	delta := invertedPoint - rectangle topLeft - (other@radius).	xOverY := rectangle width asFloat / rectangle height asFloat.	t1 := (delta x asFloat / xOverY) squared + delta y squared.	t2 := radius squared.	^ (t1 &lt; t2)  or: [ t1 closeTo: t2 ].</body></methods><methods><class-id>Roassal2.TREllipseShape</class-id> <category>visitor</category><body package="Roassal2-Trachel-Shapes">accept: aVisitor	aVisitor visitEllipseShape: self</body></methods><methods><class-id>Roassal2.TREllipseShape</class-id> <category>initialization</category><body package="Roassal2-Trachel-Shapes">initialize	super initialize.	self strokeWidth: self defaultStrokeWidth</body></methods><methods><class-id>Roassal2.TREllipseShape</class-id> <category>drawing</category><body package="Roassal2-Trachel-Shapes">scaledStrokeWidth	^ self strokeWidth</body></methods><methods><class-id>Roassal2.TREllipseShape class</class-id> <category>hooks</category><body package="Roassal2-Trachel-Shapes">defaultStrokeWidth	^ 1</body></methods><methods><class-id>Roassal2.RTSetEdgeAlpha</class-id> <category>utility</category><body package="Roassal2-Interactions">setHighAlphaFor: element	self setAlpha: highAlpha for: element</body><body package="Roassal2-Interactions">setLowAlphaFor: element	self setAlpha: lowAlpha for: element</body></methods><methods><class-id>Roassal2.RTSetEdgeAlpha</class-id> <category>public - setting</category><body package="Roassal2-Interactions">onlyIncomingEdges	evaluationBlock := #incomingEdges</body><body package="Roassal2-Interactions">onlyOutgoingEdges	evaluationBlock := #outgoingEdges</body></methods><methods><class-id>Roassal2.RTSetEdgeAlpha</class-id> <category>hooks</category><body package="Roassal2-Interactions">initializeElement: element	self setLowAlphaFor: element.	element		when: TRMouseEnter		do: [ :e | 			self setHighAlphaFor: element.			e signalUpdate ].	element		when: TRMouseLeave		do: [ :e | 			self setLowAlphaFor: element.			e signalUpdate ]</body></methods><methods><class-id>Roassal2.RTSetEdgeAlpha</class-id> <category>initialization</category><body package="Roassal2-Interactions">initialize	super initialize.	highAlpha := 1.0.	lowAlpha := 0.4.	evaluationBlock := #connectedEdges</body><body package="Roassal2-Interactions">setAlpha: alpha for: element	(evaluationBlock rtValue: element)  do: [ :e | e trachelShape allColor: (e trachelShape color alpha: alpha) ]</body></methods><methods><class-id>Roassal2.TRMorphWidgetFactory class</class-id> <category>public</category><body package="Roassal2-Trachel-Core">menuForAssociations: associations on: element	"associations is a list of association following: #aSymbol -&gt; [ :model | ... ]	The block contains in the association is evaluated with the model provided by the element."			| v |		v := TRPlatform current menuMorphClass new.		associations do: [ :assoc | 			v 				add: assoc key				target: assoc value				selector: #cull:				argument: element		].				v popUpInWorld.</body></methods><methods><class-id>Roassal2.RTLegendBuilder</class-id> <category>accessing</category><body package="Roassal2-Builder-Legend">gapSize	^ gapSize</body><body package="Roassal2-Builder-Legend">gapSize: aNumber	gapSize := aNumber</body><body package="Roassal2-Builder-Legend">group	"Return all the elements"	| myGroup |	myGroup := RTGroup new.	items do: [ :item | myGroup add: item execute ].	RTVerticalLineLayout new		gapSize: gapSize;		on: myGroup.	^ myGroup</body><body package="Roassal2-Builder-Legend">legendElement	^ legendElement</body><body package="Roassal2-Builder-Legend">onDemand	"Make the legend appear if the user move the mouse on a particular icon in the visualization"	isOnDemand := true.	onDemandText := '?'.</body><body package="Roassal2-Builder-Legend">onDemand: text	self onDemand.	onDemandText := text</body><body package="Roassal2-Builder-Legend">textSize	^ textSize</body><body package="Roassal2-Builder-Legend">textSize: aSizeAsInteger	textSize := aSizeAsInteger</body></methods><methods><class-id>Roassal2.RTLegendBuilder</class-id> <category>public - convenient</category><body package="Roassal2-Builder-Legend">addColor: aColor object: anObject text: aBlockOrSelector	"Associate a color with a text"	items add: (RTColorLegendItem new color: aColor; model: anObject; text: aBlockOrSelector;	textSize: self textSize)</body><body package="Roassal2-Builder-Legend">addColor: aColor text: aText	"Associate a color with a text"	^ self addColor: aColor object: aText text: #yourself</body><body package="Roassal2-Builder-Legend">addColorFadingFrom: startColor to: endColor text: textualDescription	"Add a fading between startColor and endColor. A textualDescription is provided"	self addColorFadingUsing: (Array with: startColor with: endColor) text: textualDescription</body><body package="Roassal2-Builder-Legend">addColorFadingUsing: colors text: textualDescription	"Specify a description of a fading using a provided set of colors"	items		add:			(RTColorFadingLegendItem new				colors: colors;				description: textualDescription)</body><body package="Roassal2-Builder-Legend">addColoredObject: anObject text: aTextOrSymbolOrBlock color: aColor	items add: (RTLabelLegendItem new model: anObject; text: aTextOrSymbolOrBlock; color: aColor; textSize: self textSize)</body><body package="Roassal2-Builder-Legend">addColoredText: aText color: aColor	^ self addColoredObject: nil text: aText color: aColor</body><body package="Roassal2-Builder-Legend">addLineColor: aColor text: aText	"Associate a color with a text"	items add: (RTLineLegendItem new color: aColor; text: aText; textSize: self textSize)</body><body package="Roassal2-Builder-Legend">addObject: anObject text: aTextOrASymbolOrBlock	^ self addColoredObject: anObject text: aTextOrASymbolOrBlock color: Color lightGray</body><body package="Roassal2-Builder-Legend">addRectanglePolymetricWidth: widthDescription height: heightDescription box: boxDescription	"Associate a color with a text"	items add: (RTPolymorphicBoxLegendItem new 						widthDescription: widthDescription;						heightDescription: heightDescription;						boxDescription: boxDescription;						textSize: self textSize)</body><body package="Roassal2-Builder-Legend">addText: aText	"Add a text to the legend, simply"	self addColoredText: aText color: self textColor</body></methods><methods><class-id>Roassal2.RTLegendBuilder</class-id> <category>public - positioning</category><body package="Roassal2-Builder-Legend">below	position := #below</body><body package="Roassal2-Builder-Legend">isBelow	^ position = #below</body><body package="Roassal2-Builder-Legend">isLeft	^ position = #left</body><body package="Roassal2-Builder-Legend">isRight	^ position = #right</body><body package="Roassal2-Builder-Legend">left	position := #left</body><body package="Roassal2-Builder-Legend">right	position := #right</body></methods><methods><class-id>Roassal2.RTLegendBuilder</class-id> <category>initialization</category><body package="Roassal2-Builder-Legend">defaultOffset	^ 20</body><body package="Roassal2-Builder-Legend">initialize	super initialize.	"Thisi group variable should be removed"	group := RTGroup new.		offset := self defaultOffset.	position := #below.	isOnDemand := false.	textSize := 12.	gapSize := 10.	items := OrderedCollection new.	isFixed := false</body><body package="Roassal2-Builder-Legend">offset	^ offset</body><body package="Roassal2-Builder-Legend">offset: aDistanceInPixel	offset := aDistanceInPixel</body></methods><methods><class-id>Roassal2.RTLegendBuilder</class-id> <category>private - utility</category><body package="Roassal2-Builder-Legend">newLabelShape: widthDescription	"Return a new label with the argument as the content of the label"	^ RTLabel new color: self textColor; text: widthDescription; yourself</body></methods><methods><class-id>Roassal2.RTLegendBuilder</class-id> <category>hooks</category><body package="Roassal2-Builder-Legend">backgroundBoxElement	^ (RTBox new		borderColor: Color lightGray;		fillColor: Color transparent) element</body><body package="Roassal2-Builder-Legend">renderIn: aView	| myGroup elementsInTheViewWithoutTheLegend |	super renderIn: aView.	isOnDemand		ifTrue: [ ^ self renderOnDemandIn: aView ].	elementsInTheViewWithoutTheLegend := aView elements.	myGroup := self group.	legendElement := self backgroundBoxElement.	aView add: legendElement.	myGroup do: [ :g | aView addAll: g ].	RTNest new on: legendElement nest: myGroup.	self isBelow		ifTrue: [ TRConstraint				move: legendElement				below: (RTGroup withAll: elementsInTheViewWithoutTheLegend).			legendElement translateBy: 0 @ offset ].	self isRight		ifTrue: [ RTConstraint				move: legendElement				onTheRightOf: (RTGroup withAll: elementsInTheViewWithoutTheLegend).			legendElement translateBy: offset @ 0 ].	self isLeft		ifTrue: [ TRConstraint				move: legendElement				onTheLeftOf: (RTGroup withAll: elementsInTheViewWithoutTheLegend).			legendElement translateBy: offset @ 0 ].	legendElement @ RTDraggable.	isFixed		ifTrue: [ | els |			els := aView elements				copyWithoutAll: elementsInTheViewWithoutTheLegend.			els do: [ :e | e trachelShape setAsFixed ].			TRConstraint				stickAtTheBottomOfTheWindow: legendElement trachelShape ]</body><body package="Roassal2-Builder-Legend">renderOnDemandIn: aView	| label myGroup |	super renderIn: aView.	RTVerticalLineLayout on: group.	label := (RTLabel new color: Color red) elementOn: onDemandText.	label setAsFixed.	label @ RTHighlightable.	aView add: label.	label translateTo: label extent / 2.	label		@			(RTPopup new				alphaPopupBackground: self backgroundTransparencyOnDemand;				background: Color white					group: [ :gg :el | 					myGroup := self group.					gg addAll: (myGroup flatCollect: #yourself) ])</body></methods><methods><class-id>Roassal2.RTLegendBuilder</class-id> <category>configuration</category><body package="Roassal2-Builder-Legend">backgroundTransparencyOnDemand	^ 0.9</body><body package="Roassal2-Builder-Legend">setAsFixed	"The legend is fixed, therefore not subject to the camera movement.	This is handy if the visualization is very large (ie. if not fixed, then the legend may appear very small"	isFixed := true</body><body package="Roassal2-Builder-Legend">textColor	^ Color lightGray</body></methods><methods><class-id>Roassal2.RTLegendBuilder class</class-id> <category>instance creation</category><body package="Roassal2-Builder-Legend">on: aView	| i |	i := self new.	i view: aView.	^ i.</body></methods><methods><class-id>Roassal2.RTLineTail</class-id> <category>hooks</category><body package="Roassal2-LineDecorations">updateFor: edge trachelShape: trachelShape	| fromPoint |	fromPoint := attachPoint endingPointOf: edge.	line		ifNotNil: [ 			| lineShape |			lineShape := edge trachelShape shapes first.			lineShape class = TRBezierShape				ifTrue: [ fromPoint := lineShape points second ] ].	self updateFor: edge trachelShape: trachelShape from: fromPoint</body><body package="Roassal2-LineDecorations">updateFor: anEdge trachelShape: trachelShape from: aPoint	self		updateFor: anEdge		trachelShape: trachelShape		from: aPoint		to: (attachPoint startingPointOf: anEdge)</body></methods><methods><class-id>Roassal2.RTLineTail</class-id> <category>converting</category><body package="Roassal2-LineDecorations">asTail	^ self</body></methods><methods><class-id>Roassal2.RTLineTail</class-id> <category>public</category><body package="Roassal2-LineDecorations">trachelShapeFor: anEdge	| fromPoint |	fromPoint := attachPoint endingPointOf: anEdge.	line		ifNotNil: [ 			| lineShape |			lineShape := line trachelShapeFor: anEdge.			lineShape class = TRBezierShape				ifTrue: [ fromPoint := lineShape points second ] ].	^ self trachelShapeFor: anEdge from: fromPoint</body><body package="Roassal2-LineDecorations">trachelShapeFor: anEdge from: aPoint	^ self trachelShapeFor: anEdge from: aPoint to: (attachPoint startingPointOf: anEdge)</body></methods><methods><class-id>Roassal2.RTSVGDragAndDrop</class-id> <category>adding</category><body package="Roassal2-Exporter-SVG">addEventHandlers: aStream id: aString element: element center: aNumber	aStream		nextPutAll: 'dragdrop '</body><body package="Roassal2-Exporter-SVG">addFunctions: aStream	aStream		nextPutAll: '				var SVGDocument = null;		var SVGRoot = null;		var TrueCoords = null;		var GrabPoint = null;		var BackDrop = null;		var DragTarget = null;		var Wrapper = null;		function GADInit(evt)		{			SVGDocument = evt.target.ownerDocument;   		SVGRoot = evt.target;   		TrueCoords = SVGRoot.createSVGPoint();   		GrabPoint = SVGRoot.createSVGPoint();   		BackDrop = SVGDocument.getElementById("BackDrop");		Wrapper = SVGDocument.getElementById("Wrapper");		}		function Grab(evt)		{  		if (!evt.target.classList.contains("dragdrop"))      			return;    		var targetElement = evt.target;   		if ( BackDrop != targetElement )   		{      			DragTarget = targetElement;            Wrapper.appendChild(DragTarget);      			DragTarget.parentNode.appendChild( DragTarget );      			DragTarget.setAttributeNS(null, ''pointer-events'', ''none'');      			var transMatrix = DragTarget.getCTM();      			GrabPoint.x = TrueCoords.x - Number(transMatrix.e);      			GrabPoint.y = TrueCoords.y - Number(transMatrix.f);  		 }		};		function Drag(evt)		{   		GetTrueCoords(evt);   		if (DragTarget)   		{      			var newX = TrueCoords.x - GrabPoint.x;      			var newY = TrueCoords.y - GrabPoint.y;      			DragTarget.setAttributeNS(null, ''transform'', ''translate('' + newX + '','' + newY + '')'');         var pop = document.getElementById(DragTarget.id + "pop");            		pop.setAttributeNS(null, ''transform'', ''translate('' + newX + '','' + newY + '')'');            var lines = document.getElementsByTagName("line");	     var beziers = document.getElementsByName("bezier[]");            var match = DragTarget.id.match(/\d+/);            var idNum = parseInt(match[0], 10);            var bb = Wrapper.getBBox();            var centerX = bb.x + (bb.width / 2);            var centerY = bb.y + (bb.height / 2);            for(var i = 0; i &lt; lines.length; i++)             {              var p1 = lines[i].id.substring(4,lines[i].id.indexOf("_"));              var p2 = lines[i].id.substring(lines[i].id.indexOf("_")+1);              if (p1 == "" + idNum)               {                lines[i].setAttributeNS(null, ''x1'', centerX);                lines[i].setAttributeNS(null, ''y1'', centerY);              }              else if (p2 == "" + idNum)               {                lines[i].setAttributeNS(null, ''x2'', centerX);                lines[i].setAttributeNS(null, ''y2'', centerY);              }            }            for(var j =0; j &lt; beziers.length; j++)             {              var p1 = beziers[j].id.substring(6,beziers[j].id.indexOf("_"));              var p2 = beziers[j].id.substring(beziers[j].id.indexOf("_")+1);              var split = beziers[j].getAttribute(''d'').split(" ");              if (p1 == "" + idNum)               {                split.shift();                beziers[j].setAttributeNS(null, ''d'', "M"+centerX+","+centerY+" "+split.join(" "));              }              else if (p2 == "" + idNum)               {                var pref = "";                if (split[split.length-1].charAt(0) == ''L'')                  pref = "L";                split.pop();                beziers[j].setAttributeNS(null, ''d'', split.join(" ")+" "+pref+centerX+","+centerY);              }                                        }   		}		};		function Drop(evt)		{   		if ( DragTarget )   		{     		  var targetElement = evt.target;      		DragTarget.setAttributeNS(null, ''pointer-events'', ''all'');          Wrapper.removeChild(DragTarget);          Wrapper.parentNode.appendChild(DragTarget);      		DragTarget = null;   		}		};		function GetTrueCoords(evt)		{		if (SVGRoot == null)			return; 		   		var newScale = SVGRoot.currentScale;   		var translation = SVGRoot.currentTranslate;   		TrueCoords.x = (evt.clientX - translation.x)/newScale;   		TrueCoords.y = (evt.clientY - translation.y)/newScale;		};'</body><body package="Roassal2-Exporter-SVG">addGlobalHandlers: aStream	aStream		nextPutAll: '	onload="GADInit(evt)"	onmousedown="Grab(evt)"	onmousemove="Drag(evt)"	onmouseup="Drop(evt)"'</body></methods><methods><class-id>Roassal2.RTSVGDragAndDrop</class-id> <category>initialization</category><body package="Roassal2-Exporter-SVG">initialize	super initialize.	contained := true.	external := false.	self type: 'draganddrop'.</body></methods><methods><class-id>Roassal2.RTVerticalDraggableView</class-id> <category>initialize</category><body package="Roassal2-Interactions">initialize	super initialize.	self constraint: [ :aView :point | 0 @ point y ]</body></methods><methods><class-id>Roassal2.RTHistogramSet</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">addedInBuilder: aBuilder	"Really ugly method. This will be fixed soon!"	super addedInBuilder: aBuilder.		distribution on: self points; metric: x.		((self points first isKindOf: Number) not &amp; (x = #yourself )) ifTrue: [ 		distribution metric: nil.		 ].	 	self points: (distribution annotatedFrequencyWithAmountOfIntervals: (self nbOfIntervals rtValue: points)).		self y: #first.		self barShape width: builder extent x / self points size.		builder axisX noTick; noLabel.</body><body package="Roassal2-Builder-Grapher-Core">nbOfIntervals	^ nbOfIntervals</body><body package="Roassal2-Builder-Grapher-Core">nbOfIntervals: aNumberOfBlock	nbOfIntervals := aNumberOfBlock</body><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	self adjustMinAndMaxValues.	self renderBarChartIn: aView</body></methods><methods><class-id>Roassal2.RTHistogramSet</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">defaultDistribution 	self distribution: RTDistribution new.</body><body package="Roassal2-Builder-Grapher-Core">defaultNbOfIntervals 	self nbOfIntervals: [ :vls | (vls size) log * 3.3 + 1 ].</body><body package="Roassal2-Builder-Grapher-Core">distribution 	^ distribution.</body><body package="Roassal2-Builder-Grapher-Core">distribution: aDistributionInstance 	distribution := aDistributionInstance.</body><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	self metric: #yourself.	self defaultNbOfIntervals.	self defaultDistribution</body></methods><methods><class-id>Roassal2.RTHistogramSet</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">metric: aMetricAsBlockOrSymbol	metric := aMetricAsBlockOrSymbol.</body></methods><methods><class-id>Roassal2.RTHistogramSet</class-id> <category>public</category><body package="Roassal2-Builder-Grapher-Core">barShape	^ histogramBuilder</body></methods><methods><class-id>Roassal2.RTMultiGrapher</class-id> <category>adding</category><body package="Roassal2-Builder-Grapher-Core">add: aGrapher	graphers add: aGrapher</body></methods><methods><class-id>Roassal2.RTMultiGrapher</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Core">extent	^ extent</body><body package="Roassal2-Builder-Grapher-Core">extent: anObject	extent := anObject</body><body package="Roassal2-Builder-Grapher-Core">legend	^ legendBuilder ifNil: [ legendBuilder := RTLegendBuilder new ]</body></methods><methods><class-id>Roassal2.RTMultiGrapher</class-id> <category>hooks</category><body package="Roassal2-Builder-Grapher-Core">renderIn: aView	graphers		withIndexDo: [ :each :i | 			each yOffset: (i - 1) * yOffset.			each build.			aView addFromView: each view ].	legendBuilder		ifNotNil: [ graphers				do: [ :each | 					each legend: legendBuilder.					each renderLegend ].			aView addFromView: legendBuilder view.			graphers do: #inferLegendInteractions ]</body></methods><methods><class-id>Roassal2.RTMultiGrapher</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Core">initialize	super initialize.	graphers := OrderedCollection new.	yOffset := 70.	extent := 300 @ 200</body></methods><methods><class-id>Core.Magnitude</class-id> <category>*Roassal2-Core</category><body package="Roassal2">max: max in: anInterval 	"	(0 max: 20 in: (1 to: 10)) == 1	(0 max: 20 in: (0 to: 10)) == 0	(0 max: 20 in: (1 to: 10)) == 1	(2 max: 20 in: (0 to: 10)) == 1 	(4 max: 20 in: (0 to: 10)) == 2	(20 max: 20 in: (0 to: 10)) == 10	"	^ self min: 0 max: max in: anInterval</body><body package="Roassal2">min: min max: max in: anInterval 	"	(0 max: 20 in: (1 to: 10)) == 1	(0 max: 20 in: (0 to: 10)) == 0	(0 max: 20 in: (1 to: 10)) == 1	(2 max: 20 in: (0 to: 10)) == 1 	(4 max: 20 in: (0 to: 10)) == 2	(19 max: 20 in: (0 to: 10)) == 10	"	min = max ifTrue: [ ^ min ].	^ (self - min) / (max - min) * (anInterval last - anInterval first) + anInterval first</body></methods><methods><class-id>Core.String</class-id> <category>*Roassal2-Core</category><body package="Roassal2">subStringsKeepingEmptyFields: separators 	"Answer an array containing the substrings in the receiver separated 	by the elements of separators."	"In addition, it makes sure that double quote do not prevent from parsing"	| result sourceStream subStringStream isInDoubleQuotes |	isInDoubleQuotes := false.		(separators isString or: [ separators allSatisfy: [ :element | element isCharacter ] ])		ifFalse: [ ^ self error: 'separators must be Characters.' ].	sourceStream := self readStream.	result := OrderedCollection new.	subStringStream := String new writeStream.	[ sourceStream atEnd ] whileFalse: [		| char |		char := sourceStream next.		(char = $") ifTrue: [			isInDoubleQuotes := isInDoubleQuotes not ].				isInDoubleQuotes 			ifTrue: [ subStringStream nextPut: char ]			ifFalse: [ 				(separators includes: char)					ifTrue: [						result add: subStringStream contents.						subStringStream := String new writeStream ]					ifFalse: [						subStringStream nextPut: char ] ] ].	result add: subStringStream contents.	^ result asArray</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>*Roassal2-Core</category><body package="Roassal2">trans	"Make the color transparent"	^ self alpha: 0.4</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>*roassal2-core</category><body package="Roassal2">cumsum	"Cumulative sum	#(1 2 3 4 5) cumsum = #(1 3 6 10 15)	"   | sum |	sum := 0.	^ self collect: [ :v | sum := sum + v. sum ]</body><body package="Roassal2">histogram	"Plot the histrogram (distribution) of the numerical values given the metric block or symbol on my elements.	#('yes' 'no' 'no' 'yes' 'yes' 'maybe' 'maybe' 'yes') histogram	#(5 6 5 6 4 2 10 10 10 10) histogram	(RTShape withAllSubclasses) histogram: #numberOfMethods	"	^ self histogram: #yourself.</body><body package="Roassal2">histogram: aBlockOrSymbol	"Plot the histrogram (distribution) of the numerical values given the metric block or symbol on my elements.	#('yes' 'no' 'no' 'yes' 'yes' 'maybe' 'maybe' 'yes') histogram	#(5 6 5 6 4 2 10 10 10 10 12 12 14 8 5 6 4 2 3 4 5 6) histogram	(RTShape withAllSubclasses) histogram: #numberOfMethods	"	| b ds |	b := Roassal2.RTGrapher new.		ds := Roassal2.RTHistogramSet new.	ds points: self.	ds barShape width: 20.	ds x: aBlockOrSymbol.		ds barChartWithBarTitle: [:ar | 		ar second isEmpty 			ifTrue: ['[:]']			ifFalse: ['[', (ar second first isNumber ifTrue: [ar second first floor] ifFalse: [ar second first]) asString,':', (ar second last isNumber ifTrue: [ar second last ceiling] ifFalse: [ar second last]) asString,']']			].				b add: ds. 	b axisX title: 'Values'.	b axisY title: 'Frequency'.		^ b.</body><body package="Roassal2">plot	"	#(1 2 3 4 5) plot	"	| b ds |	b := Roassal2.RTGrapher new.		"We defien the size of the charting area"	b extent: 500 @ 100.		ds := Roassal2.RTData new.	"When the mouse is above a bar, say which class we are point at"	ds interaction popup.	ds points: self.	ds dotShape rectangle color: Roassal2.Color blue.	b add: ds.		b build.	^ b view</body><body package="Roassal2">removeDuplicates	| iterator |	"Remove the copies of elements, but keep the same order"		self ifEmpty: [ ^ self ].	iterator := 1.	[ iterator &lt;= self size ]		whileTrue: [ | each newIndex |			each := self at: iterator.						[ newIndex := (self indexOf: each startingAt: iterator+1).			newIndex &gt; 0 ]				whileTrue: [ self removeAt: newIndex ].			iterator := iterator + 1.	 ]</body><body package="Roassal2">rtSwapElement: u withElement: v	| index1 index2 |	index1 := self indexOf: u.	index2 := self indexOf: v.	self at: index2 put: u.	self at: index1 put: v.</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>*Roassal2-Core</category><body package="Roassal2">rtValue: valueOrArray	self numArgs = 0 ifTrue: [ ^ self value ].  	self numArgs = 1 ifTrue: [ ^ self value: valueOrArray ].		"if I have more than 1 argument, then the valueOrArray is a collection"	valueOrArray isCollection ifFalse: [ self error: 'A block with more than one argument can only be evaluated with a collection ' ].		self numArgs = valueOrArray size ifTrue: [ ^ self valueWithArguments: valueOrArray ]. 		self error: 'Incorrect number of arguments'</body></methods><methods><class-id>Core.Collection</class-id> <category>*Roassal2-Core</category><body package="Roassal2">asGroup	^ Roassal2.RTGroup withAll: self</body><body package="Roassal2">asIdentityGroup	^ Roassal2.RTIdentityGroup withAll: self</body><body package="Roassal2">maxFor: aSymbolOrBlock 	"Return one of the elements which has the minimum value returned by aSymbolOrBlock"		"	#(5 6 2 1 4) max	#(5 6 2 1 4) maxFor: #negated	"	^self 		inject: self anyOne 		into: [ :max :each | 			(aSymbolOrBlock value: each) &gt; (aSymbolOrBlock value: max)				ifTrue: [ each ]				ifFalse: [ max ] ]</body><body package="Roassal2">maxValue: aBlock	^ self inject: (aBlock value: self anyOne) into: [ :max :each | max max: (aBlock value: each) ]</body><body package="Roassal2">minFor: aSymbolOrBlock 	"Return one of the elements which has the minimum value returned by aSymbolOrBlock"		"	#(5 6 2 1 4) min	#(5 6 2 1 4) minFor: #negated	"	^self 		inject: self anyOne 		into: [ :min :each | 			(aSymbolOrBlock value: each) &lt; (aSymbolOrBlock value: min)				ifTrue: [ each ]				ifFalse: [ min ] ]</body><body package="Roassal2">minValue: aBlock	^ self inject: (aBlock value: self anyOne) into: [ :min :each | min min: (aBlock value: each) ]</body><body package="Roassal2">reverseSortedAs: aSortBlockOrSymbol	^ (self sortedAs: aSortBlockOrSymbol) reverse</body><body package="Roassal2">sortedAs: aSortBlockOrSymbol	"Answer a SortedCollection whose elements are the elements of the 	receiver. The sort order is defined by the argument, aSortBlock."	"Return a new collection. This method does not do a side effect"	| aSortedCollection aSortBlock |	aSortedCollection := SortedCollection new: self size.	aSortBlock := 		aSortBlockOrSymbol isSymbol 			ifTrue: [ [:a :b | |t1 t2|							t1 := (a perform: aSortBlockOrSymbol).							t2 := (b perform: aSortBlockOrSymbol).							((t1 isKindOf: Boolean) and: [t2 isKindOf: Boolean])								ifTrue: [ t1 ]								ifFalse: [ t1 &lt; t2 ] ] ]			ifFalse: [ 				(aSortBlockOrSymbol numArgs = 1)					ifTrue: [ [ :v1 :v2 | (aSortBlockOrSymbol value: v1) &lt; (aSortBlockOrSymbol value: v2) ] ]					ifFalse: [ aSortBlockOrSymbol ] ].	aSortedCollection sortBlock: aSortBlock.	aSortedCollection addAll: self.	^ aSortedCollection</body></methods><methods><class-id>Core.Behavior</class-id> <category>*Roassal2-Core</category><body package="Roassal2">numberOfLinesOfCode 	"Return the amount of lines of code"		^ 5 + ((self rtmethods, self class rtmethods) inject: 0 into: [:sum :el | sum + el numberOfLinesOfCode ])</body></methods><methods><class-id>Core.Object class</class-id> <category>*roassal2-core</category><body package="Roassal2">visualworksName	(#('WA' 'SU' 'CT') includes: (self name copyFrom: 1 to: 2))		ifTrue: [^'Seaside.', self name].	^ self == Object ifTrue: ['Core.Object'] ifFalse: [self name]</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>*Roassal2-Core</category><body package="Roassal2">areasOverlapingOutside: aRectangle 	"Answer an Array of maximized Rectangles comprising (overlaped by each other) the parts of the receiver not 	intersecting aRectangle."	"Make sure the intersection is non-empty"	| areas o c |	(self intersects: aRectangle) ifFalse: [ ^ Array with: self ].	areas := OrderedCollection new.	o := self topLeft.	c := self bottomRight.	aRectangle topLeft y &gt; o y 		ifTrue: 			[ areas addLast: (o corner: c x @ aRectangle topLeft y) ].	aRectangle bottomRight y &lt; c y 		ifTrue: 			[ areas addLast: (o x @ aRectangle bottomRight y corner: c) ].	aRectangle topLeft x &gt; o x 		ifTrue: 			[ areas addLast: (o corner: aRectangle topLeft x @ c y) ].	aRectangle bottomRight x &lt; c x 		ifTrue: 			[ areas addLast: (aRectangle bottomRight x @ o y corner: c) ].	^ areas</body><body package="Roassal2">halfPerimeter	^ self width + self height</body><body package="Roassal2">perimeter	^ self halfPerimeter * 2</body></methods><methods><class-id>Core.Symbol</class-id> <category>*Roassal2-Core</category><body package="Roassal2">rtValue: anObject 	^ anObject perform: self</body></methods><methods><class-id>Graphics.Pixmap class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">extent: extent depth: depth	^ self extent: extent</body><body package="Roassal2-Extentions">fromBinaryStream: aBinaryStream	| readerClass image pix |	readerClass := ImageReader readerClassFor: aBinaryStream.	image := (readerClass new from: aBinaryStream) imageAsAlphaComposited.	image ifNil: [image := (readerClass new from: aBinaryStream) image ]. 	pix := Pixmap extent: image extent.	pix clear.	image displayOn: pix graphicsContext.	^ pix</body></methods><methods><class-id>Graphics.Pixmap</class-id> <category>roassal2</category><body package="Roassal2-Extentions">asAthensPaintOn: aCC	^ self cairoSurface.</body></methods><methods><class-id>Graphics.Pixmap</class-id> <category>accessing</category><body package="Roassal2-Extentions">boundingBox	^ Rectangle origin: 0 @ 0			corner: width @ height</body></methods><methods><class-id>Graphics.Pixmap</class-id> <category>roassal2</category><body package="Roassal2-Extentions">getCanvas	^ self graphicsContext</body><body package="Roassal2-Extentions">image: aForm at: aPoint sourceRect: sourceRect rule: rule	self graphicsContext displayPixelArray: aForm at: aPoint</body><body package="Roassal2-Extentions">installPaintOn: aCC	aCC sourceSurface: self cairoSurface x: 0 y: 0.	aCC drawCommand: #paint</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>adding</category><body package="Roassal2-Extentions">at: index ifAbsentPut: block	"Return value at index, however, if value does not exist (nil or out of bounds) then add block's value at index (growing self if necessary)"	| v |	index &lt;= self size ifTrue: [		^ (v := self at: index)			ifNotNil: [v]			ifNil: [self at: index put: block value]	].	[self size &lt; index] whileTrue: [self add: nil].	^ self at: index put: block value</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>removing</category><body package="Roassal2-Extentions">removeAt: index	| removed |	removed := self at: index.	self removeIndex: index + firstIndex - 1.	^removed</body><body package="Roassal2-Extentions">removeDuplicates	| iterator |	"Remove the copies of elements, but keep the same order"		self size = 0 ifTrue: [ ^ self ].	iterator := 1.	[ iterator &lt;= self size ]		whileTrue: [ | each newIndex |			each := self at: iterator.						[ newIndex := (self indexOf: each startingAt: iterator+1).			newIndex &gt; 0 ]				whileTrue: [ self removeAt: newIndex ].			iterator := iterator + 1.	 ]</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">withIndexCollect: elementAndIndexBlock 	"Just like with:collect: except that the iteration index supplies the second argument to the block. Override superclass in order to use addLast:, not at:put:."	| newCollection |	newCollection := self species new: self size.	firstIndex to: lastIndex do:		[:index |		newCollection addLast: (elementAndIndexBlock			value: (self at: index)			value: index - firstIndex + 1)].	^ newCollection</body></methods><methods><class-id>Core.Object class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">newFrom: aSimilarObject	"Create an object that has similar contents to aSimilarObject. If the classes have any instance variables with the same names, copy them across. If this is bad for a class, override this method."	^ (self isVariable		ifTrue: [self basicNew: aSimilarObject basicSize]		ifFalse: [self basicNew]) copySameFrom: aSimilarObject</body></methods><methods><class-id>Core.Object</class-id> <category>geometry</category><body package="Roassal2-Extentions">&lt;~ other	^ (self greaterOrDifferentThan: other) not</body><body package="Roassal2-Extentions">&gt;~ other	^ other &lt;~ self</body></methods><methods><class-id>Core.Object</class-id> <category>converting</category><body package="Roassal2-Extentions">as: aSimilarClass	"Create an object of class aSimilarClass that has similar contents to the receiver."	^ aSimilarClass newFrom: self</body></methods><methods><class-id>Core.Object</class-id> <category>roassal2</category><body package="Roassal2-Extentions">assert: aBlock	aBlock value ifFalse: [ self error: 'Assertion failed']</body><body package="Roassal2-Extentions">assert: aBlock description: aStringOrBlock	"Throw an assertion error if aBlock does not evaluates to true."		aBlock value 		ifFalse: [ self error: aStringOrBlock value ]</body></methods><methods><class-id>Core.Object</class-id> <category>copying</category><body package="Roassal2-Extentions">copySameFrom: otherObject	"Copy to myself all instance variables named the same in otherObject.	This ignores otherObject's control over its own inst vars."	| myInstVars otherInstVars |	myInstVars := self class allInstVarNames.	otherInstVars := otherObject class allInstVarNames.	myInstVars doWithIndex: [:each :index | | match |		(match := otherInstVars indexOf: each) &gt; 0 ifTrue:			[self instVarAt: index put: (otherObject instVarAt: match)]].	1 to: (self basicSize min: otherObject basicSize) do: [:i |		self basicAt: i put: (otherObject basicAt: i)].</body></methods><methods><class-id>Core.Object</class-id> <category>roassal2</category><body package="Roassal2-Extentions">flag: object	"Send this message, with a relevant symbol as argument, to flag a message for subsequent retrieval.  For example, you might put the following line in a number of messages:	self flag: #returnHereUrgently	Then, to retrieve all such messages, browse all senders of #returnHereUrgently."</body></methods><methods><class-id>Core.Object</class-id> <category>geometry</category><body package="Roassal2-Extentions">greaterOrDifferentThan: other	^ other lesserOrDifferentThan: self</body></methods><methods><class-id>Core.Object</class-id> <category>roassal2</category><body package="Roassal2-Extentions">in: aBlock	"Evaluate the given block with the receiver as its argument."	^ aBlock value: self</body></methods><methods><class-id>Core.Object</class-id> <category>testing</category><body package="Roassal2-Extentions">isBlock	^ false</body><body package="Roassal2-Extentions">isClass	^ false</body><body package="Roassal2-Extentions">isClosure	^ false</body><body package="Roassal2-Extentions">isCollection	"Return true if the receiver is some sort of Collection and responds to basic collection messages such as #size and #do:"	^false</body><body package="Roassal2-Extentions">isColor	^ false</body><body package="Roassal2-Extentions">isDictionary	^false</body></methods><methods><class-id>Core.Object</class-id> <category>trachel</category><body package="Roassal2-Extentions">isFloat	"Overridden to return true in Float, natch"	^ false</body></methods><methods><class-id>Core.Object</class-id> <category>testing</category><body package="Roassal2-Extentions">isFraction	"Answer true if the receiver is a Fraction."	^ false</body><body package="Roassal2-Extentions">isNotNil	^ true</body></methods><methods><class-id>Core.Object</class-id> <category>trachel</category><body package="Roassal2-Extentions">isPoint	"Overridden to return true in Point."	^ false</body></methods><methods><class-id>Core.Object</class-id> <category>testing</category><body package="Roassal2-Extentions">isStream	"Return true if the receiver responds to the stream protocol"	^false</body></methods><methods><class-id>Core.Object</class-id> <category>geometry</category><body package="Roassal2-Extentions">lesserOrDifferentThan: other	^ self &lt; other or: [ self =~ other ]</body></methods><methods><class-id>Core.Object</class-id> <category>roassal2</category><body package="Roassal2-Extentions">rtValue: anArgument 	^ self</body></methods><methods><class-id>Core.Object</class-id> <category>copying</category><body package="Roassal2-Extentions">veryDeepCopy	^ self dcopy</body></methods><methods><class-id>Core.Symbol</class-id> <category>*Roassal2-Core</category><body package="Roassal2-Extentions">capitalized	^ self asString capitalized asSymbol</body></methods><methods><class-id>Core.Float class</class-id> <category>constants access</category><body package="Roassal2-Extentions">halfPi	^ Float pi /2</body><body package="Roassal2-Extentions">infinity	^ 1.0e38</body><body package="Roassal2-Extentions">nan	"to ugly but works"	^ 'NaN'</body></methods><methods><class-id>Core.Float class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">readFrom: aStream 	"Answer an instance of me as described on the stream, aStream."	(aStream isKindOf: String) ifTrue: [ ^ aStream asNumber ].	^self readSmalltalkSyntaxFrom: aStream</body></methods><methods><class-id>Core.Float</class-id> <category>arithmetic</category><body package="Roassal2-Extentions">arcTan: denominator	"Answer the angle in radians.	 Optional. See Object documentation whatIsAPrimitive.	Implementation note: use sign in order to catch cases of negativeZero"	| Halfpi |	Halfpi := Float halfPi.	^self = 0.0		ifTrue: [denominator sign &gt;= 0			ifTrue: [ 0 ]			ifFalse: [ self sign &gt;= 0				ifTrue: [ Pi ]				ifFalse: [ Pi negated ]]]		ifFalse: [denominator = 0.0			ifTrue: [self &gt; 0.0				ifTrue: [ Halfpi ]				ifFalse: [ Halfpi negated ]]			ifFalse: [denominator &gt; 0				ifTrue: [ (self / denominator) arcTan ]				ifFalse: [self &gt; 0					ifTrue: [ ((self / denominator) arcTan) + Pi ]					ifFalse: [ ((self / denominator) arcTan) - Pi ]]]]</body></methods><methods><class-id>Core.Float</class-id> <category>printing</category><body package="Roassal2-Extentions">asTrueFraction	" Answer a fraction that EXACTLY represents self,	  a double precision IEEE floating point number.	  Floats are stored in the same form on all platforms.	  (Does handle gradual underflow but not NANs.)	  By David N. Smith with significant performance	  improvements by Luciano Esteban Notarfrancesco.	  (Version of 11April97)"	| signexp positive expPart exp fraction fractionPart signedFraction result zeroBitsCount |	"self isInfinite ifTrue: [self error: 'Cannot represent infinity as a fraction']."	self isNaN ifTrue: [self error: 'Cannot represent Not-a-Number as a fraction'].	" Extract the sign and the biased exponent "	signexp := (self basicAt: 1) bitShift: -20.	positive := (signexp bitAnd: 16r800) = 0.	expPart := signexp bitAnd: 16r7FF.	" Extract fractional part; answer 0 if this is a true 0.0 value "	fractionPart := (((self basicAt: 1) bitAnd: 16rFFFFF) bitShift: 32)+ (self basicAt: 2).	( expPart=0 and: [ fractionPart=0 ] ) ifTrue: [ ^ 0  ].	" Replace omitted leading 1 in fraction unless gradual underflow"	fraction := expPart = 0		ifTrue: [fractionPart bitShift: 1]		ifFalse: [fractionPart bitOr: 16r0010000000000000].	signedFraction := positive ifTrue: [fraction] ifFalse: [fraction negated].		"Unbias exponent: 16r3FF is bias; 52 is fraction width"	exp := 16r3FF + 52 - expPart.	" Form the result. When exp&gt;52, the exponent is adjusted by	  the number of trailing zero bits in the fraction to minimize	  the (huge) time otherwise spent in #gcd:. "	exp negative		ifTrue: [			result := signedFraction bitShift: exp negated ]		ifFalse:	[			zeroBitsCount := fraction lowBit - 1.			exp := exp - zeroBitsCount.			exp &lt;= 0				ifTrue: [					zeroBitsCount := zeroBitsCount + exp.					"exp := 0."   " Not needed; exp notrefernced again "					result := signedFraction bitShift:zeroBitsCount negated ]				ifFalse: [					result := Fraction						numerator: (signedFractionbitShift: zeroBitsCount negated)						denominator: (1 bitShift:exp) ] ].	"Low cost validation omitted after extensive testing"	"(result asFloat = self) ifFalse: [self error: 'asTrueFraction validation failed']."	^ result</body></methods><methods><class-id>Core.Float</class-id> <category>arithmetic</category><body package="Roassal2-Extentions">closeTo: num 	^ self closeTo: num range: 0.001.</body><body package="Roassal2-Extentions">closeTo: num range: aFloat 	"are these two numbers close?"	num isNumber ifFalse: [^[self = num] ifError: [false]].	self = 0.0 ifTrue: [^num abs &lt; aFloat].	num = 0 ifTrue: [^self abs &lt; aFloat].	^self = num asFloat		or: [(self - num) abs / (self abs max: num abs) &lt; aFloat]</body></methods><methods><class-id>Core.Float</class-id> <category>trachel</category><body package="Roassal2-Extentions">isFloat	^ true</body></methods><methods><class-id>Core.Float</class-id> <category>printing</category><body package="Roassal2-Extentions">printShowingDecimalPlaces: placesDesired	"This implementation avoids any rounding error caused by rounded or roundTo:"		^self asFraction printShowingDecimalPlaces: placesDesired</body></methods><methods><class-id>Core.Float</class-id> <category>truncation and round off</category><body package="Roassal2-Extentions">round: numberOfWishedDecimal        "only leave a fixed amount of decimal"        "10.12345 round: 2 =&gt; 10.12"                | v |        v := 10 raisedTo: numberOfWishedDecimal.        ^ ((self * v) rounded / v) asFloat</body></methods><methods><class-id>Core.Interval</class-id> <category>testing</category><body package="Roassal2-Extentions">rangeIncludes: aNumber	"Return true if the number lies in the interval between start and stop."	step &gt;= 0		ifTrue: [^ aNumber between: start and: stop]		ifFalse: [^ aNumber between: stop and: start]</body></methods><methods><class-id>Core.SubscriptionRegistry</class-id> <category>selecting</category><body package="Roassal2-Extentions">getInteractionForClass: eventClass	"Return true if the receiver has a callback subscripbed for the event class"	classesAndSubscriptions do: [ :arr | | cls |		arr do: [:sub | 			cls := sub subscriber method outerMethod mclass.			((cls == eventClass) or: 				[ eventClass inheritsFrom: cls  ]) ifTrue: [ 					^ sub subscriber copiedValues isCollection						ifTrue: [ sub subscriber copiedValues first ]						ifFalse: [ sub subscriber ]  ] ]  ].	self error: 'Please, use handleEventClass: before getting the interaction'</body><body package="Roassal2-Extentions">getInteractionsForClass: eventClass	"Return the list of subscription for a given Event class"		| answer |	answer := OrderedCollection new.	classesAndSubscriptions do: [:arr | | cls |		arr do: [:sub | 			cls := sub subscriber method outerMethod mclass.			((cls == eventClass) or: [eventClass inheritsFrom: cls ])				ifTrue: [answer add: sub subscriber ] ]  ].	^ answer</body></methods><methods><class-id>Core.SubscriptionRegistry</class-id> <category>testing</category><body package="Roassal2-Extentions">handleSubscriberClass: eventClass	"Return true if the receiver has a callback subscripbed for the event class"	^ classesAndSubscriptions anySatisfy: [ :arr | arr anySatisfy: [:sub| | cls |		cls := sub subscriber method outerMethod mclass.		cls == eventClass or: [eventClass inheritsFrom: cls ] ] ].</body></methods><methods><class-id>Core.SubscriptionRegistry</class-id> <category>selecting</category><body package="Roassal2-Extentions">trSubscriptions	^ classesAndSubscriptions</body></methods><methods><class-id>Core.Number</class-id> <category>arithmetic</category><body package="Roassal2-Extentions">% aNumber	^ self \\ aNumber</body></methods><methods><class-id>Core.Number</class-id> <category>geometry</category><body package="Roassal2-Extentions">=~ aNumber 	^((self - aNumber) abs) &lt; Number epsilon.</body></methods><methods><class-id>Core.Number</class-id> <category>converting</category><body package="Roassal2-Extentions">adaptToCollection: rcvr andSend: selector	"If I am involved in arithmetic with a Collection, return a Collection of	the results of each element combined with me in that expression."	^ rcvr collect: [:element | element perform: selector with: self]</body></methods><methods><class-id>Core.Number</class-id> <category>arithmetic</category><body package="Roassal2-Extentions">arcTan: denominator	"The receiver is the tangent of an angle. Answer the angle measured in 	radians."	^(self asFloat) arcTan: denominator.</body></methods><methods><class-id>Core.Number</class-id> <category>converting</category><body package="Roassal2-Extentions">asDuration  	^ Duration fromSeconds: self asInteger</body><body package="Roassal2-Extentions">asMargin	^ Margin fromNumber: self</body></methods><methods><class-id>Core.Number</class-id> <category>printing</category><body package="Roassal2-Extentions">asString	^ self printString</body></methods><methods><class-id>Core.Number</class-id> <category>arithmetic</category><body package="Roassal2-Extentions">closeTo: num	"are these two numbers close?" 	^ num closeTo: self  range: 0.001.</body><body package="Roassal2-Extentions">closeTo: num range: aFloat 	"are these two numbers close?"	num isNumber ifFalse: [^[self = num] ifError: [false]].	self = 0.0 ifTrue: [^num abs &lt; aFloat].	num = 0 ifTrue: [^self abs &lt; aFloat].	^self = num asFloat		or: [(self - num) abs / (self abs max: num abs) &lt; aFloat]</body></methods><methods><class-id>Core.Number</class-id> <category>trachel</category><body package="Roassal2-Extentions">interpolateTo: aNumber at: param	^self + (aNumber - self * param)</body></methods><methods><class-id>Core.Number</class-id> <category>geometry</category><body package="Roassal2-Extentions">isBetween: a and: b with: eps 	|mi ma|	(a =~ self or:[ b =~ self or:[ a + (2 * eps) =~ self or:[ a - (2 * eps) =~ self or:[ b + (2 * eps) =~ self or:[ b - (2 * eps) =~ self ]]]]] )		ifTrue:[ ^ true]		ifFalse:[			mi := a min: b. 			ma := a max: b. 	( (self + (2 * eps) greaterOrDifferentThan: mi) and:[ self + (2 * eps) lesserOrDifferentThan: ma ] )	ifTrue:[ ^ true]	ifFalse:[ 					^  self between: mi and: ma ]] "( ( self - mi ) abs &gt;=~ eps ) and:[ ( ma - self ) abs &gt;=~ eps ]"</body><body package="Roassal2-Extentions">notEqualTo: aNumber   ^ (self =~ aNumber) not</body></methods><methods><class-id>Core.Number</class-id> <category>printing</category><body package="Roassal2-Extentions">printOn: aStream base: base	"This method should print a representation of the number for the given base,	excluding the base prefix (and the letter r for radix)"		^self subclassResponsibility</body><body package="Roassal2-Extentions">printOn: aStream showingDecimalPlaces: placesDesired	"Print a representation of the receiver on aStream in decimal notation with prescribed number of places after decimal separator."	| rounder rounded roundedFractionPart |	placesDesired &lt;= 0 ifTrue: [^ self rounded printOn: aStream].	rounder := 10 raisedToInteger: placesDesired.	rounded := self roundTo: rounder reciprocal.	rounded negative ifTrue: [aStream nextPut: $-].	rounded := rounded abs.	rounded integerPart truncated printOn: aStream.	aStream nextPut: $..	roundedFractionPart := (rounded fractionPart * rounder) truncated.	roundedFractionPart printOn: aStream base: 10 length: placesDesired padded: true</body><body package="Roassal2-Extentions">printShowingDecimalPlaces: placesDesired	"Print the receiver showing precisely the given number of places desired.  If placesDesired is positive, a decimal point and that many digits after the decimal point will always be shown.  If placesDesired is zero, a whole number will be shown, without a decimal point."	^String new: placesDesired + 10 streamContents: [:aStream |		self printOn: aStream showingDecimalPlaces: placesDesired]"23 printShowingDecimalPlaces: 223.5698 printShowingDecimalPlaces: 2-234.567 printShowingDecimalPlaces: 523.4567 printShowingDecimalPlaces: 023.5567 printShowingDecimalPlaces: 0-23.4567 printShowingDecimalPlaces: 0-23.5567 printShowingDecimalPlaces: 0100000000 printShowingDecimalPlaces: 10.98 printShowingDecimalPlaces: 5-0.98 printShowingDecimalPlaces: 22.567 printShowingDecimalPlaces: 2-2.567 printShowingDecimalPlaces: 20 printShowingDecimalPlaces: 2"</body><body package="Roassal2-Extentions">printStringBase: base	^ String streamContents:		[:strm | self printOn: strm base: base]</body></methods><methods><class-id>Core.Number</class-id> <category>truncation and round off</category><body package="Roassal2-Extentions">round: numberOfWishedDecimal	self subclassResponsibility</body></methods><methods><class-id>Core.Number</class-id> <category>arithmetic</category><body package="Roassal2-Extentions">roundDownTo: aNumber	"Answer the next multiple of aNumber toward negative infinity that is nearest the receiver. 	Examples:               3.1479 roundDownTo: 0.01 -&gt; 3.14               3.1479 roundDownTo: 0.1 -&gt; 3.1               1923 roundDownTo: 10 -&gt; 1920               3.1479 roundDownTo: 0.005 -&gt; 3.145               -3.1479 roundDownTo: 0.01 -&gt; -3.15"		^(self / aNumber) floor * aNumber</body></methods><methods><class-id>Core.Number</class-id> <category>geometry</category><body package="Roassal2-Extentions">signFuz	"Answer 1 if the receiver is greater than 0, -1 if less than 0, else 0."	self &gt;~ 0 ifTrue: [ ^  1 ].	self &lt;~ 0 ifTrue: [ ^ -1 ].	^ 0</body></methods><methods><class-id>CairoGraphics.Matrix</class-id> <category>accessing</category><body package="Roassal2-Extentions">asAffineTransform	| m |	m := Roassal2.AthensAffineTransform new.	m sx:  self xx.	m shx: self xy.	m x: self x0.	m shy: self yx.	m sy: self yy.	m y: self y0.	^ m.</body></methods><methods><class-id>Core.Stream</class-id> <category>testing</category><body package="Roassal2-Extentions">isStream	"Return true if the receiver responds to the stream protocol"	^true</body></methods><methods><class-id>UI.KeyboardEvent</class-id> <category>converting</category><body package="Roassal2-Extentions">asKeyCombination	"^ KMKeyCombination fromKeyboardEvent: self	TODO"	^ self</body></methods><methods><class-id>Core.Time</class-id> <category>converting</category><body package="Roassal2-Extentions">asMilliSeconds	^ self asDuration asMilliseconds</body></methods><methods><class-id>Core.Double</class-id> <category>private - printing</category><body package="Roassal2-Extentions">printExponentCharacterIfNeededOn: aStream	"Floating point numbers other than floats should print their type indicator"	"aStream nextPut: self class exponentCharacter"</body></methods><methods><class-id>Core.Double</class-id> <category>truncation and round off</category><body package="Roassal2-Extentions">round: numberOfWishedDecimal        "only leave a fixed amount of decimal"        "10.12345d round: 2 =&gt; 10.12"                | v |        v := 10 raisedTo: numberOfWishedDecimal.        ^ ((self * v) rounded / v) asDouble</body></methods><methods><class-id>Kernel.CompiledMethod</class-id> <category>roassal2</category><body package="Roassal2-Extentions">ageInDays	^ (Timestamp now - self date) days</body><body package="Roassal2-Extentions">ageInDaysRounded	^ self ageInDays rounded</body><body package="Roassal2-Extentions">date	"Return the DateAndTime associated to me"	^ Date today. "hack"	"^ (self properties includesKey: #date)		ifTrue: [ self properties at: #date ]		ifFalse: [ 			| m |			m := self computeDate.			self properties at: #date put: m.			m ]"</body><body package="Roassal2-Extentions">dependentMethods	"Return the list of methods defined in my class for which I may invoke"	"(self &gt;&gt; #dependentMethods) dependentMethods"	^ self messages		select: [ :k | self mclass methodDict includesKey: k ]		thenCollect: [ :k | self mclass &gt;&gt; k ]</body><body package="Roassal2-Extentions">livingInDays	^ (Timestamp now - self date) days</body></methods><methods><class-id>Kernel.CompiledMethod</class-id> <category>accessing</category><body package="Roassal2-Extentions">methodClass	^ self mclass</body></methods><methods><class-id>Kernel.CompiledMethod</class-id> <category>roassal2</category><body package="Roassal2-Extentions">numberOfLinesOfCode	"An approximate measure of lines of code.	Includes comments, but excludes empty lines."	| lines |	lines := 0.	"It may happens that thre is no source"	self getSource ifNil: [ ^ 0 ].		self getSource asString lineIndicesDo: [:start :endWithoutDelimiters :end | 		endWithoutDelimiters &gt; start ifTrue: [ lines := lines + 1 ]].	^ lines</body><body package="Roassal2-Extentions">sourceCode	^ self getSource asString</body><body package="Roassal2-Extentions">timeStamp	^ 'AlexandreBergel 5/11/2014 00:30' "hack"</body></methods><methods><class-id>Core.FixedPoint</class-id> <category>truncation and round off</category><body package="Roassal2-Extentions">round: numberOfWishedDecimal    "only leave a fixed amount of decimal"    "(10.12345s round: 2) =&gt; 10.12"    "(10.56745s round: 2) =&gt; 10.57"        ^ self asFixedPoint: numberOfWishedDecimal</body></methods><methods><class-id>Core.ArrayedCollection class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">with: firstObject with: secondObject with: thirdObject with: fourthObject with: fifthObject	| newCollection |	newCollection := self new: 5.	newCollection at: 1 put: firstObject.	newCollection at: 2 put: secondObject.	newCollection at: 3 put: thirdObject.	newCollection at: 4 put: fourthObject.	newCollection at: 5 put: fifthObject.	^newCollection</body></methods><methods><class-id>Core.ArrayedCollection</class-id> <category>copying</category><body package="Roassal2-Extentions">fillFrom: aCollection with: aBlock	"Evaluate aBlock with each of aCollections's elements as the argument.  	Collect the resulting values into self. Answer self."	| index |	index := 0.	aCollection do: [ :each |		self at: (index := index + 1) put: (aBlock value: each) ]</body></methods><methods><class-id>Core.Fraction</class-id> <category>testing</category><body package="Roassal2-Extentions">isFraction	^ true</body></methods><methods><class-id>Core.Fraction</class-id> <category>printing</category><body package="Roassal2-Extentions">printOn: aStream showingDecimalPlaces: placesDesired	"Same as super, but provides a faster implementation by inlining some Fraction protocol thus avoiding intermediate Fraction creation."		| roundedFractionPart integerPart scaling |	placesDesired &lt;= 0		ifTrue: [self rounded printOn: aStream]		ifFalse:			[scaling := 10 raisedToInteger: placesDesired.			integerPart := numerator abs quo: denominator.			roundedFractionPart := (numerator abs - (integerPart * denominator)) * scaling * 2 + denominator quo: denominator * 2.			roundedFractionPart = scaling				ifTrue:					[integerPart := integerPart + 1.					roundedFractionPart := 0].			"Don't print minus sign if result is rouded to zero"			(numerator negative and: [integerPart &gt; 0 or: [roundedFractionPart &gt; 0]]) ifTrue: [aStream nextPut: $-].			integerPart printOn: aStream.			aStream nextPut: $..			roundedFractionPart printOn: aStream base: 10 length: placesDesired padded: true].</body></methods><methods><class-id>Core.Fraction</class-id> <category>truncation and round off</category><body package="Roassal2-Extentions">round: numberOfWishedDecimal	^self asFloat round: numberOfWishedDecimal</body></methods><methods><class-id>Core.Behavior</class-id> <category>accessing</category><body package="Roassal2-Extentions">&gt;&gt; selector	^ self methodDict at: selector</body><body package="Roassal2-Extentions">ageInDays	"Return the number of days the class exists"	self numberOfMethods isZero ifTrue: [ ^ 0 ].	^ (Timestamp now - self oldestMethod date) days</body><body package="Roassal2-Extentions">ageInDaysRounded	"Return the number of days the class exists"	^ self ageInDays rounded</body><body package="Roassal2-Extentions">computeOldestMethod	| d m |	d := Timestamp now.	m := nil.	self rtmethods, self class rtmethods do: [ :cm | cm date &lt; d ifTrue: [ m := cm. d := cm date ] ].	^ m</body><body package="Roassal2-Extentions">computeYoungestMethod	| d m ms aMethod |	ms := self rtmethods, self class rtmethods.	aMethod := ms anyOne.	d := aMethod date.	m := aMethod.		ms do: [ :cm | cm date &gt; d ifTrue: [ m := cm. d := cm date ] ].	^ m</body><body package="Roassal2-Extentions">dependentClasses	"Return the list of classes used myself"		"Object dependentClasses"	| cll | 	cll := Set new.	"A class depends on its superclass"	self superclass ifNotNil: [ cll add: self superclass ].		"We unify a class and its metaclass"	(self methodDictionary values, self class methodDictionary values)		do: [ :m | m literalsDo: [ :l | 					"We also check if the method is not an extension"					((l isVariableBinding 					and: [ l value notNil ]) 					and: [ l value isBehavior ]) ifTrue: [ cll add: l value ]  ] ].	^ cll asArray</body><body package="Roassal2-Extentions">gotMethodOnDay: dayAsNumber	"Return true if a method has been defined on dayAsNumber.	Always returns true for dayAsNumber = 0"	| age |	age := self ageInDaysRounded.	^ self rtmethods anySatisfy: [ :cm | (age - cm ageInDaysRounded) = dayAsNumber ]</body><body package="Roassal2-Extentions">hasAnyMethodProducedAfterDay: aNumberOfDays	^ self rtmethods anySatisfy: [ :cm | cm livingInDays = aNumberOfDays ]</body><body package="Roassal2-Extentions">isReferencedBy: aClass 	"	Return true or false on whether the class receiver is referenced by aClass		Halt isReferencedBy: Object 	"	^ aClass dependentClasses includes: self</body><body package="Roassal2-Extentions">livingInDays	self numberOfMethods isZero ifTrue: [ ^ 0 ].	^ (Timestamp now - self oldestMethod date) days</body><body package="Roassal2-Extentions">methodDict	^methodDict</body><body package="Roassal2-Extentions">numberOfMethods	^ self methodDictionary size + self class methodDictionary size.</body><body package="Roassal2-Extentions">numberOfVariables	^ self instVarNames size</body><body package="Roassal2-Extentions">oldestMethod	"We pick a method, and put the cache in it"	| aMethod list |	list := self rtmethods, self class rtmethods. 	list		detect: [:cm | cm selector = #setUp ] 		ifFound: [:cm | aMethod := cm ]		ifNone: [aMethod := list first].	^ aMethod "hack we need to review"	"^ (aMethod properties includesKey: #oldestMethod)		ifTrue: [ aMethod properties at: #oldestMethod ]		ifFalse: [ | m |			m := self computeOldestMethod.			aMethod properties at: #oldestMethod put: m ]"</body><body package="Roassal2-Extentions">protocols	^ (self rtmethods collect: #protocol) asSet</body><body package="Roassal2-Extentions">rtmethods	^ self methodDictionary values</body></methods><methods><class-id>Core.Behavior</class-id> <category>accessing class hierarchy</category><body package="Roassal2-Extentions">withAllSubclassesDo: aBlock	"Evaluate the argument, aBlock, for the receiver and each of its 	subclasses."	self withAllSubclasses do: [ :subclass | aBlock value: subclass ].</body></methods><methods><class-id>Core.SmallInteger</class-id> <category>printing</category><body package="Roassal2-Extentions">decimalDigitLength	"Answer the number of digits printed out in base 10.	Note that this only works for positive SmallIntegers."		^ self &lt; 10000		ifTrue: [self &lt; 100				ifTrue: [self &lt; 10						ifTrue: [1]						ifFalse: [2]]				ifFalse: [self &lt; 1000						ifTrue: [3]						ifFalse: [4]]]		ifFalse: [self &lt; 1000000				ifTrue: [self &lt; 100000						ifTrue: [5]						ifFalse: [6]]				ifFalse: [self &lt; 100000000						ifTrue: [self &lt; 10000000								ifTrue: [7]								ifFalse: [8]]						ifFalse: [self &lt; 1000000000								ifTrue: [9]								ifFalse: [10]]]]</body><body package="Roassal2-Extentions">numberOfDigitsInBase: b 	"Return how many digits are necessary to print this number in base b.	Mostly same as super but an optimized version for base 10 case"		b = 10 ifFalse: [^super numberOfDigitsInBase: b].	self &lt; 0 ifTrue: [^self negated numberOfDigitsInBase: b].	^self decimalDigitLength</body><body package="Roassal2-Extentions">printOn: stream base: base length: minimumLength padded: padWithZeroes	| n numberOfDigits totalLength divisor |	self &lt; 0		ifTrue: [			n := self negated.			totalLength := 1 ]		ifFalse: [			n := self.			totalLength := 0 ].	numberOfDigits := n numberOfDigitsInBase: base.	totalLength := totalLength + numberOfDigits.	padWithZeroes ifFalse: [		[ totalLength &lt; minimumLength ] whileTrue: [			stream space.			totalLength := totalLength + 1 ] ].	n = self ifFalse: [ stream nextPut: $- ].	padWithZeroes ifTrue: [		[ totalLength &lt; minimumLength ] whileTrue: [			stream nextPut: $0.			totalLength := totalLength + 1 ] ].	divisor := (base raisedToInteger: numberOfDigits - 1).	[ divisor &gt; 0 ] whileTrue: [		| digit |		digit := n // divisor.		stream nextPut: ('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' at: digit + 1).		n := n - (digit * divisor).		divisor := divisor // base ]</body></methods><methods><class-id>CairoGraphics.Surface</class-id> <category>roassal2</category><body package="Roassal2-Extentions">installPaintOn: aCC	aCC 		sourceSurface: self x: 0 y: 0;		drawCommand: #paint</body></methods><methods><class-id>UI.MouseEvent</class-id> <category>accessing</category><body package="Roassal2-Extentions">position	^ self point</body></methods><methods><class-id>Core.String class</class-id> <category>defaults</category><body package="Roassal2-Extentions">cr	^ self with: Character cr</body><body package="Roassal2-Extentions">crlf	"Answer a string containing a carriage return and a linefeed."	^ self with: Character cr with: Character lf</body><body package="Roassal2-Extentions">lf	"Answer a string containing a single carriage return character."	^ self with: Character lf</body><body package="Roassal2-Extentions">tab	^ self with: Character tab</body></methods><methods><class-id>Core.String</class-id> <category>converting</category><body package="Roassal2-Extentions">asDate	"Many allowed forms, see Date&gt;&gt;#readFrom:"	^ Date readFrom: self readStream</body><body package="Roassal2-Extentions">asFileReference	^ self asFilename</body></methods><methods><class-id>Core.String</class-id> <category>*Roassal2-Core</category><body package="Roassal2-Extentions">capitalized	"Return a copy with the first letter capitalized"	| cap |	self isEmpty ifTrue: [ ^self copy ].	cap := self copy.	cap at: 1 put: (cap at: 1) asUppercase.	^ cap</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Roassal2-Extentions">copyReplaceAll: oldSubstring with: newSubstring asTokens: ifTokens	"Answer a copy of the receiver in which all occurrences of	oldSubstring have been replaced by newSubstring.	ifTokens (valid for Strings only) specifies that the characters	surrounding the recplacement must not be alphanumeric.		Bruce Simth,  must be incremented by 1 and not 	newSubstring if ifTokens is true.  See example below. "	| aString startSearch currentIndex endIndex |	aString := self.	startSearch := 1.	[(currentIndex := aString indexOfSubCollection: oldSubstring startingAt: startSearch)			 &gt; 0]		whileTrue: 		[endIndex := currentIndex + oldSubstring size - 1.		(ifTokens not			or: [(currentIndex = 1					or: [(aString at: currentIndex-1) isAlphaNumeric not])				and: [endIndex = aString size					or: [(aString at: endIndex+1) isAlphaNumeric not]]])			ifTrue: [aString := aString					copyReplaceFrom: currentIndex					to: endIndex					with: newSubstring.				startSearch := currentIndex + newSubstring size]			ifFalse: [				ifTokens 					ifTrue: [startSearch := currentIndex + 1]					ifFalse: [startSearch := currentIndex + newSubstring size]]].	^ aString"Test case:	'test te string' copyReplaceAll: 'te' with: 'longone' asTokens: true   "</body><body package="Roassal2-Extentions">findDelimiters: delimiters startingAt: start 	"Answer the index of the character within the receiver, starting at start, that matches one of the delimiters. If the receiver does not contain any of the delimiters, answer size + 1."	start to: self size do: [:i |		delimiters do: [:delim | 			delim = (self at: i) 				ifTrue: [^ i]]].	^ self size + 1</body><body package="Roassal2-Extentions">findTokens: delimiters keep: keepers	"Answer the collection of tokens that result from parsing self.  The tokens are seperated by delimiters, any of a string of characters.  If a delimiter is also in keepers, make a token for it.  (Very useful for carriage return.  A sole return ends a line, but is also saved as a token so you can see where the line breaks were.)"	| tokens keyStart keyStop |	tokens := OrderedCollection new.	keyStop := 1.	[keyStop &lt;= self size] whileTrue:		[keyStart := self skipDelimiters: delimiters startingAt: keyStop.		keyStop to: keyStart-1 do: [:ii | 			(keepers includes: (self at: ii)) ifTrue: [				tokens add: (self copyFrom: ii to: ii)]].	"Make this keeper be a token"		keyStop := self findDelimiters: delimiters startingAt: keyStart.		keyStart &lt; keyStop			ifTrue: [tokens add: (self copyFrom: keyStart to: (keyStop - 1))]].	^tokens</body><body package="Roassal2-Extentions">indexOf: aChar startingAt: index	^ self indexOfSubCollection: (Array with: aChar) startingAt: index</body><body package="Roassal2-Extentions">lines    "Answer an array of lines composing this receiver without the line ending delimiters"    ^Array new: (self size // 60 max: 16)            streamContents: [:lines | self linesDo: [:aLine | lines nextPut: aLine]]</body><body package="Roassal2-Extentions">linesDo: aBlock	"Execute aBlock with each line in this string. The terminating line delimiters CR, LF or CRLF pairs are not included in what is passed to aBlock"	self lineIndicesDo: [:start :endWithoutDelimiters :end |		aBlock value: (self copyFrom: start to: endWithoutDelimiters)]</body><body package="Roassal2-Extentions">skipDelimiters: delimiters startingAt: start 	"Answer the index of the character within the receiver, starting at start, that does NOT match one of the delimiters. If the receiver does not contain any of the delimiters, answer size + 1.  Assumes the delimiters to be a non-empty string."	start to: self size do: [:i |		delimiters detect: [:delim | delim = (self at: i)]				ifNone: [^ i]].	^ self size + 1</body><body package="Roassal2-Extentions">substrings	"Answer an array of the substrings that compose the receiver."	| result end beginning separators |	result := (Array new: 10) writeStream.	separators := Array with: Character tab with: Character lf 		with: Character newPage with: Character cr with: Character space.		end := 0.	"find one substring each time through this loop"	[ 		"find the beginning of the next substring"		beginning := self indexOfAnyOf: separators startingAt: end+1 ifAbsent: [ nil ] 			withBlock: [:s :v | (s includes: v) not ].		beginning ~~ nil ] 	whileTrue: [		"find the end"		end := self indexOfAnyOf: separators startingAt: beginning ifAbsent: [ self size + 1 ]			withBlock: [:s :v | s includes: v ].		end := end - 1.		result nextPut: (self copyFrom: beginning to: end).	].	^result contents</body><body package="Roassal2-Extentions">substrings: separators 	"Answer an array containing the substrings in the receiver separated 	by the elements of separators."	| result sourceStream substringStream |		(separators isString or: [ separators allSatisfy: [ :element | element isCharacter ] ])		ifFalse: [ ^ self error: 'separators must be Characters.' ].	sourceStream := self readStream.	result := OrderedCollection new.	substringStream := String new writeStream.	[ sourceStream atEnd ] whileFalse: [		| char |		char := sourceStream next.		(separators includes: char)			ifTrue: [				substringStream isEmpty ifFalse: [					result add: substringStream contents.					substringStream := String new writeStream ] ]			ifFalse: [				substringStream nextPut: char ] ].	substringStream isEmpty ifFalse: [		result add: substringStream contents ].	^ result asArray</body></methods><methods><class-id>Core.String</class-id> <category>converting</category><body package="Roassal2-Extentions">subStrings: separators 	"Answer an array containing the substrings in the receiver separated 	by the elements of separators."	| result sourceStream subStringStream |		(separators isString or: [ separators allSatisfy: [ :element | element isCharacter ] ])		ifFalse: [ ^ self error: 'separators must be Characters.' ].	sourceStream := self readStream.	result := OrderedCollection new.	subStringStream := String new writeStream.	[ sourceStream atEnd ] whileFalse: [		| char |		char := sourceStream next.		(separators includes: char)			ifTrue: [				subStringStream isEmpty ifFalse: [					result add: subStringStream contents.					subStringStream := String new writeStream ] ]			ifFalse: [				subStringStream nextPut: char ] ].	subStringStream isEmpty ifFalse: [		result add: subStringStream contents ].	^ result asArray</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Roassal2-Extentions">trimBoth	^ self trimBoth: [:char | char isSeparator ].</body><body package="Roassal2-Extentions">trimBoth: aBlock		^ self trimLeft: aBlock right: aBlock</body><body package="Roassal2-Extentions">trimLeft: aLeftBlock right: aRightBlock	"Trim characters satisfying the condition given in aLeftBlock from the left side and aRightBlock from the right sides of the receiving string."	| left right |	left := 1.	right := self size.		[ left &lt;= right and: [ aLeftBlock value: (self at: left) ] ]		whileTrue: [ left := left + 1 ].			[ left &lt;= right and: [ aRightBlock value: (self at: right) ] ]		whileTrue: [ right := right - 1 ].			^ self copyFrom: left to: right</body><body package="Roassal2-Extentions">trimmed	^ self trimBoth</body></methods><methods><class-id>Core.String</class-id> <category>converting</category><body package="Roassal2-Extentions">truncateTo: smallSize	"return myself or a copy shortened to smallSize."	^ self size &lt;= smallSize		ifTrue:			[self]		ifFalse:			[self copyFrom: 1 to: smallSize]</body></methods><methods><class-id>Core.Random</class-id> <category>accessing</category><body package="Roassal2-Extentions">nextInt: anInteger    "Answer a random integer in the interval [1, anInteger]."    anInteger strictlyPositive ifFalse: [ self error: 'Range must be positive' ].    ^ (self next * anInteger) truncated + 1</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>roassal2</category><body package="Roassal2-Extentions">lineIndicesDo: aBlock	"execute aBlock with 3 arguments for each line:	- start index of line	- end index of line without line delimiter	- end index of line including line delimiter(s) CR, LF or CRLF"		| cr lf start sz nextLF nextCR |	start := 1.	sz := self size.	cr := Character cr."	nextCR := self indexOf: cr startingAt: 1."	(nextCR := self nextIndexOf: cr from: 1 to: self size) ifNil:[nextCR:= 0].	lf := Character lf."	nextLF := self indexOf: lf startingAt: 1."	(nextLF := self nextIndexOf: lf from: 1 to: self size) ifNil:[nextLF := 0].	[ start &lt;= sz ] whileTrue: [		(nextLF = 0 and: [ nextCR = 0 ])			ifTrue: [ "No more CR, nor LF, the string is over"					aBlock value: start value: sz value: sz.					^self ].		(nextCR = 0 or: [ 0 &lt; nextLF and: [ nextLF &lt; nextCR ] ])			ifTrue: [ "Found a LF"					aBlock value: start value: nextLF - 1 value: nextLF.					start := 1 + nextLF.					"nextLF := self indexOf: lf startingAt: start"					(nextLF := self nextIndexOf: lf from: start to: self size) ifNil:[nextLF := 0]. ]			ifFalse: [ 1 + nextCR = nextLF				ifTrue: [ "Found a CR-LF pair"					aBlock value: start value: nextCR - 1 value: nextLF.					start := 1 + nextLF.					"nextCR := self indexOf: cr startingAt: start."					(nextCR := self nextIndexOf: cr from: start to: self size) ifNil:[nextCR := 0].					"nextLF := self indexOf: lf startingAt: start "					(nextLF := self nextIndexOf: lf from: start to: self size) ifNil:[nextLF := 0].]				ifFalse: [ "Found a CR"					aBlock value: start value: nextCR - 1 value: nextCR.					start := 1 + nextCR.					"nextCR := self indexOf: cr startingAt: start "					(nextCR := self nextIndexOf: cr from: start to: self size) ifNil:[nextCR := 0].]]]</body></methods><methods><class-id>CairoGraphics.Path</class-id> <category>roassal2</category><body package="Roassal2-Extentions">asCairoPathOn: aCC	^ self</body></methods><methods><class-id>Core.Collection class</class-id> <category>private</category><body package="Roassal2-Extentions">randomForPicking	^ Random new</body></methods><methods><class-id>Core.Collection</class-id> <category>math</category><body package="Roassal2-Extentions">* arg	^ arg adaptToCollection: self andSend: #*</body><body package="Roassal2-Extentions">+ arg	^ arg adaptToCollection: self andSend: #+</body></methods><methods><class-id>Core.Collection</class-id> <category>trachel</category><body package="Roassal2-Extentions">adaptToCollection: rcvr andSend: selector	"If I am involved in arithmetic with another Collection, return a Collection of	the results of each element combined with the scalar in that expression."	(rcvr isSequenceable and: [ self isSequenceable ]) ifFalse:		[self error: 'Only sequenceable collections may be combined arithmetically'].	^ rcvr with: self collect:		[:rcvrElement :myElement | rcvrElement perform: selector with: myElement]</body></methods><methods><class-id>Core.Collection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">allButFirstDo: block	2 to: self size do:		[:index | block value: (self at: index)]</body></methods><methods><class-id>Core.Collection</class-id> <category>trachel</category><body package="Roassal2-Extentions">anyOne	"Answer a representative sample of the receiver. This method can	be helpful when needing to preinfer the nature of the contents of 	semi-homogeneous collections."	self emptyCheck.	self do: [:each | ^ each]</body></methods><methods><class-id>Core.Collection</class-id> <category>converting</category><body package="Roassal2-Extentions">asDictionary	^ self as: Dictionary</body><body package="Roassal2-Extentions">asOrderedDictionary	^ self as: Roassal2.OrderedDictionary</body></methods><methods><class-id>Core.Collection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">associationsDo: aBlock	"Evaluate aBlock for each of the receiver's elements (key/value 	associations).  If any non-association is within, the error is not caught now,	but later, when a key or value message is sent to it."	self do: aBlock</body></methods><methods><class-id>Core.Collection</class-id> <category>accessing</category><body package="Roassal2-Extentions">atRandom	^ self atRandom: self class randomForPicking.</body><body package="Roassal2-Extentions">atRandom: aGenerator"Answer a random element of the receiver. Uses aGenerator whichÂ Â Â Â should be kept by the user in a variable and used every time. UseÂ Â Â Â this instead of #atRandom for better uniformity of random numbers because 	only you use the generator. Causes an error if self has no elements."	| rand index |	self emptyCheck.	rand := aGenerator nextInt: self size.	index := 1.	self do: [:each |		index = rand ifTrue: [^each].		index := index + 1].	^ self error: 'Collection is empty'.</body></methods><methods><class-id>Core.Collection</class-id> <category>math</category><body package="Roassal2-Extentions">average	^ self sum / self size</body></methods><methods><class-id>Core.Collection</class-id> <category>copying</category><body package="Roassal2-Extentions">collect: aBlock as: aClass	"Evaluate aBlock with each of the receiver's elements as the argument.  	Collect the resulting values into an instance of aClass. Answer the resulting collection."	^(aClass new: self size) fillFrom: self with: aBlock</body></methods><methods><class-id>Core.Collection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">collect: collectBlock thenDo: doBlock 	"Utility method to improve readability."		^ self do: [ :each|		doBlock value: (collectBlock value: each)]</body><body package="Roassal2-Extentions">collect: collectBlock thenSelect: selectBlock	"Utility method to improve readability."	^ (self collect: collectBlock) select: selectBlock</body></methods><methods><class-id>Core.Collection</class-id> <category>copying</category><body package="Roassal2-Extentions">copyWithoutAll: aCollection	"Answer a copy of the receiver that does not contain any elements 	equal to those in aCollection."	^ self reject: [:each | aCollection includes: each]</body></methods><methods><class-id>Core.Collection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">detectMax: aBlock	"Evaluate aBlock with each of the receiver's elements as the argument. 	Answer the element for which aBlock evaluates to the highest magnitude.	If collection empty, return nil.  This method might also be called elect:."	| maxElement maxValue |	self do: [:each | | val | 		maxValue == nil			ifFalse: [				(val := aBlock value: each) &gt; maxValue ifTrue: [					maxElement := each.					maxValue := val]]			ifTrue: ["first element"				maxElement := each.				maxValue := aBlock value: each].				"Note that there is no way to get the first element that works 				for all kinds of Collections.  Must test every one."].	^ maxElement</body><body package="Roassal2-Extentions">detectMin: aBlock	"Evaluate aBlock with each of the receiver's elements as the argument. 	Answer the element for which aBlock evaluates to the lowest number.	If collection empty, return nil."	| minElement minValue |	self do: [:each | | val | 		minValue == nil			ifFalse: [				(val := aBlock value: each) &lt; minValue ifTrue: [					minElement := each.					minValue := val]]			ifTrue: ["first element"				minElement := each.				minValue := aBlock value: each].				"Note that there is no way to get the first element that works 				for all kinds of Collections.  Must test every one."].	^ minElement</body><body package="Roassal2-Extentions">do: aBlock displayingProgress: aStringOrBlock	"TODO displayingProgress in VW?"	^self do: aBlock</body></methods><methods><class-id>Core.Collection</class-id> <category>copying</category><body package="Roassal2-Extentions">fillFrom: aCollection with: aBlock	"Evaluate aBlock with each of aCollections's elements as the argument.  	Collect the resulting values into self. Answer self."	aCollection do: [ :each |		self add: (aBlock value: each) ]</body></methods><methods><class-id>Core.Collection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">flatCollect: aBlock 	"Evaluate aBlock for each of the receiver's elements and answer the	list of all resulting values flatten one level. Assumes that aBlock returns some kind	of collection for each element. Equivalent to the lisp's mapcan"		| stream |	self isEmpty ifTrue: [ ^ self copy ].	stream := (self species new: 0) writeStream.	self do: [ :each | stream nextPutAll: (aBlock value: each) ].	^ stream contents</body><body package="Roassal2-Extentions">includesAll: aCollection 	"Answer whether all the elements of aCollection are in the receiver."	aCollection do: [:elem | (self includes: elem) ifFalse: [^ false]].	^ true</body></methods><methods><class-id>Core.Collection</class-id> <category>testing</category><body package="Roassal2-Extentions">includesAllOf: aCollection 	^ self includesAll: aCollection.</body></methods><methods><class-id>Core.Collection</class-id> <category>trachel</category><body package="Roassal2-Extentions">intersection: aCollection	| set outputSet |	set := self asSet.	outputSet := Set new.	aCollection		do: [:each |			((set includes: each) and: [(outputSet includes: each) not])				ifTrue: [outputSet add: each]].	^ self species withAll: outputSet asArray</body></methods><methods><class-id>Core.Collection</class-id> <category>testing</category><body package="Roassal2-Extentions">isCollection	"Return true if the receiver is some sort of Collection and responds to basic collection messages such as #size and #do:"	^true</body><body package="Roassal2-Extentions">isEmptyOrNil	"Answer whether the receiver contains any elements, or is nil.  Useful in numerous situations where one wishes the same reaction to an empty collection or to nil"	^ self isEmpty</body></methods><methods><class-id>Core.Collection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">noneSatisfy: aBlock	"Evaluate aBlock with the elements of the receiver.	If aBlock returns false for all elements return true.	Otherwise return false"	self do: [:item | (aBlock value: item) ifTrue: [^ false]].	^ true</body></methods><methods><class-id>Core.Collection</class-id> <category>removing</category><body package="Roassal2-Extentions">removeAllFoundIn: aCollection 	"Remove each element of aCollection which is present in the receiver 	from the receiver. Answer aCollection. No error is raised if an element	isn't found. ArrayedCollections cannot respond to this message."	aCollection do: [:each | self remove: each ifAbsent: []].	^ aCollection</body></methods><methods><class-id>Core.Collection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">select: selectBlock thenCollect: collectBlock	"Utility method to improve readability."	^ (self select: selectBlock) collect: collectBlock</body></methods><methods><class-id>Core.Collection</class-id> <category>math</category><body package="Roassal2-Extentions">stdev	| avg sample sum |	avg := self average. 	"see comment in self sum"	sample := self anyOne.	sum := self inject: sample into: [:accum :each | accum + (each - avg) squared].	sum := sum - sample.	^ (sum / (self size - 1)) sqrt</body><body package="Roassal2-Extentions">sum: aBlock	"Evaluate aBlock for each element of the receiver, and answer the sum 	of all values. Assumes that all values respond to arithmetics."	^self inject: Number zero into: [ :sum :each | sum + (aBlock value: each) ]</body><body package="Roassal2-Extentions">sumNumbers: aBlock	"This is implemented using a variant of the normal inject:into: pattern	that is specific to handling numbers. aBlock is expected to return a number	for every element in the collection.		Different from the sum: implementation, the default value is zero. While sum: is 	more general, sumNumbers: is meant to support the most often encountered use case of	dealing with numbers."	^ self 		inject: 0 		into: [ :sum :each |  sum + (aBlock value: each) ]</body></methods><methods><class-id>Core.Collection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">withIndexDo: elementAndIndexBlock 	"Just like with:do: except that the iteration index supplies the second argument to the block."	1 to: self size do:		[:index |		elementAndIndexBlock			value: (self at: index)			value: index]</body></methods><methods><class-id>Core.Dictionary class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">newFrom: aDict 	"Answer an instance of me containing the same associations as aDict.	 Error if any key appears twice."	| newDictionary |	newDictionary := self new: aDict size.	aDict associationsDo:		[:x |		(newDictionary includesKey: x key)			ifTrue: [self error: 'Duplicate key: ', x key printString]			ifFalse: [newDictionary add: x]].	^ newDictionary"	NewDictionary newFrom: {1-&gt;#a. 2-&gt;#b. 3-&gt;#c}	{1-&gt;#a. 2-&gt;#b. 3-&gt;#c} as: NewDictionary	NewDictionary newFrom: {1-&gt;#a. 2-&gt;#b. 1-&gt;#c}	{1-&gt;#a. 2-&gt;#b. 1-&gt;#c} as: NewDictionary"</body></methods><methods><class-id>Core.Dictionary</class-id> <category>testing</category><body package="Roassal2-Extentions">isDictionary	^true</body></methods><methods><class-id>Core.WriteStream</class-id> <category>accessing</category><body package="Roassal2-Extentions">originalContents	"Answer the receiver's actual contents collection, NOT a copy."	^ collection</body></methods><methods><class-id>Core.Point class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">r: rho degrees: degrees	^ (0@0) setR: rho degrees: degrees</body></methods><methods><class-id>Core.Point</class-id> <category>geometry</category><body package="Roassal2-Extentions">=~ aPoint	^ (self dist: aPoint) =~ 0</body></methods><methods><class-id>Core.Point</class-id> <category>accessing</category><body package="Roassal2-Extentions">adaptToCollection: rcvr andSend: selector	"If I am involved in arithmetic with a Collection, return a Collection of	the results of each element combined with me in that expression."	^ rcvr collect: [:element | element perform: selector with: self]</body></methods><methods><class-id>Core.Point</class-id> <category>trachel</category><body package="Roassal2-Extentions">adhereTo: aRectangle	"If the receiver lies outside aRectangle, return the nearest point on the boundary of the rectangle, otherwise return self."	(aRectangle containsPoint: self) ifTrue: [^ self].	^ ((x max: aRectangle left) min: aRectangle right)		@ ((y max: aRectangle top) min: aRectangle bottom)</body><body package="Roassal2-Extentions">angle	"Answer the angle in radians between the vectors represented by	the receiver and (1, 0) from the origin."	^self y arcTan: self x</body><body package="Roassal2-Extentions">angleWith: aPoint	"Answer the angle in radians between the vectors represented by	the receiver and aPoint from the origin."	|ar ap|	ar := self angle.	ap := aPoint angle.	^ap &gt;= ar		ifTrue: [ap - ar]		ifFalse: [Float pi * 2 - ar + ap]</body></methods><methods><class-id>Core.Point</class-id> <category>accessing</category><body package="Roassal2-Extentions">asFloatPoint	^ x asFloat @ y asFloat</body></methods><methods><class-id>Core.Point</class-id> <category>trachel</category><body package="Roassal2-Extentions">asIntegerPoint	^ x asInteger @ y asInteger</body></methods><methods><class-id>Core.Point</class-id> <category>converting</category><body package="Roassal2-Extentions">asMargin	^ Margin fromPoint: self.</body></methods><methods><class-id>Core.Point</class-id> <category>trachel</category><body package="Roassal2-Extentions">closeTo: aPoint 	^ (x closeTo: aPoint x) and: [ y closeTo: aPoint y ]</body></methods><methods><class-id>Core.Point</class-id> <category>point functions</category><body package="Roassal2-Extentions">degrees	"Answer the angle the receiver makes with origin in degrees. right is 0; down is 90."	| tan theta |	x = 0 		ifTrue: 			[ y &gt;= 0 				ifTrue: [ ^ 90.0 ]				ifFalse: [ ^ 270.0 ] ]		ifFalse: 			[ tan := y asFloat / x asFloat.			theta := tan arcTan.			x &gt;= 0 				ifTrue: 					[ y &gt;= 0 						ifTrue: [ ^ theta radiansToDegrees ]						ifFalse: [ ^ 360.0 + theta radiansToDegrees ] ]				ifFalse: [ ^ 180.0 + theta radiansToDegrees ] ]</body></methods><methods><class-id>Core.Point</class-id> <category>geometry</category><body package="Roassal2-Extentions">has: aPoint onTheSameSideAs: p	(self x &lt;= p x) 		ifTrue:[ self y &lt;= p y			ifTrue:[ ^ (self x &lt;= aPoint x) and:[ self y &lt;= aPoint y ] ]			ifFalse:[ ^ (self x &lt;= aPoint x) and:[ self y &gt; aPoint y ] ] ]		ifFalse:[ self y &lt;= p y			ifTrue:[ ^ (self x &gt; aPoint x) and:[ self y &lt;= aPoint y ] ]			ifFalse:[ ^ (self x &gt; aPoint x) and:[ self y &gt; aPoint y ] ] ]</body></methods><methods><class-id>Core.Point</class-id> <category>trachel</category><body package="Roassal2-Extentions">interpolateTo: end at: amountDone	"Interpolate between the instance and end after the specified amount has been done (0 - 1)."	^ self + ((end - self) * amountDone).</body><body package="Roassal2-Extentions">isPoint	^ true</body></methods><methods><class-id>Core.Point</class-id> <category>point functions</category><body package="Roassal2-Extentions">leftRotated	"Return the receiver rotated 90 degrees. i.e., self rotateBy: #left centerAt: 0 asPoint.Compare to transposed and normal."	^y  @x negated</body><body package="Roassal2-Extentions">nearestPointAlongLineFrom: p1 to: p2 	"Note this will give points beyond the endpoints.	Streamlined by Gerardo Richarte 11/3/97"	| x21 y21 t x1 y1 |	p1 x = p2 x ifTrue: [ ^ p1 x @ y ].	p1 y = p2 y ifTrue: [ ^ x @ p1 y ].	x1 := p1 x asFloat.	y1 := p1 y asFloat.	x21 := p2 x asFloat - x1.	y21 := p2 y asFloat - y1.	t := ((y asFloat - y1) / x21 + ((x asFloat - x1) / y21)) / (x21 / y21 + (y21 / x21)).	^ (x1 + (t * x21)) @ (y1 + (t * y21))	"	| old new |	Pen new place: 200@100; goto: (old := 500@300).	Display reverse: (old extent: 10@10).	[Sensor anyButtonPressed] whileFalse:		[(new := (Sensor cursorPoint nearestPointAlongLineFrom: 200@100 to: 500@300) )			= old ifFalse:				[Display reverse: (old extent: 10@10).				Display reverse: ((old := new) extent: 10@10)]]"</body></methods><methods><class-id>Core.Point</class-id> <category>geometry</category><body package="Roassal2-Extentions">notEqualTo: aPoint	^ (self =~ aPoint) not</body></methods><methods><class-id>Core.Point</class-id> <category>point functions</category><body package="Roassal2-Extentions">onLineFrom: p1 to: p2	^ self onLineFrom: p1 to: p2 within: 2</body><body package="Roassal2-Extentions">onLineFrom: p1 to: p2 within: epsilon	"Answer true if the receiver lies on the given line segment between p1 and p2 within a small epsilon."	"is this point within the box spanning p1 and p2 expanded by epsilon? (optimized)"	p1 x &lt; p2 x		ifTrue: [			((x &lt; (p1 x - epsilon)) or: [x &gt; (p2 x + epsilon)]) ifTrue: [^ false]]		ifFalse: [			((x &lt; (p2 x - epsilon)) or: [x &gt; (p1 x + epsilon)]) ifTrue: [^ false]].	p1 y &lt; p2 y		ifTrue: [			((y &lt; (p1 y - epsilon)) or: [y &gt; (p2 y + epsilon)]) ifTrue: [^ false]]		ifFalse: [			((y &lt; (p2 y - epsilon)) or: [y &gt; (p1 y + epsilon)]) ifTrue: [^ false]].	"it's in the box; is it on the line?"	^ (self dist: (self nearestPointAlongLineFrom: p1 to: p2)) &lt;= epsilon</body></methods><methods><class-id>Core.Point</class-id> <category>geometry</category><body package="Roassal2-Extentions">ray: aPoint 	^ Roassal2.GRay origin: self direction: aPoint</body></methods><methods><class-id>Core.Point</class-id> <category>point functions</category><body package="Roassal2-Extentions">rightRotated	"Return the receiver rotated 90 degrees, i.e. self rotateBy: #right centerAt: 0 asPoint. Compare to transposed and normal."	^y negated @x</body></methods><methods><class-id>Core.Point</class-id> <category>trachel</category><body package="Roassal2-Extentions">rotateBy: angle about: center 	"Even though Point.theta is measured CW, this rotates with the more conventional CCW interpretateion of angle."	| p r theta |	p := self - center.	r := p r.	theta := angle asFloat - p theta.	^ (center x asFloat + (r * theta cos)) @ (center y asFloat - (r * theta sin))</body></methods><methods><class-id>Core.Point</class-id> <category>point functions</category><body package="Roassal2-Extentions">scaleBy: factor 	"Answer a Point scaled by factor (an instance of Point)."	^(factor x * x) @ (factor y * y)</body></methods><methods><class-id>Core.Point</class-id> <category>geometry</category><body package="Roassal2-Extentions">segment: aPoint 	^ Roassal2.GSegment with: self with: aPoint</body></methods><methods><class-id>Core.Point</class-id> <category>point functions</category><body package="Roassal2-Extentions">setR: rho degrees: degrees 	| radians |	radians := degrees asFloat degreesToRadians.	x := rho asFloat * radians cos.	y := rho asFloat * radians sin</body></methods><methods><class-id>Core.Point</class-id> <category>geometry</category><body package="Roassal2-Extentions">signFuz	^ (x signFuz @ y signFuz)</body></methods><methods><class-id>Core.Point</class-id> <category>point functions</category><body package="Roassal2-Extentions">squaredDistanceTo: aPoint 	"Answer the distance between aPoint and the receiver."	| delta |	delta := aPoint - self.	^ delta dotProduct: delta</body><body package="Roassal2-Extentions">translateBy: delta 	"Answer a Point translated by delta (an instance of Point)."	^(delta x + x) @ (delta y + y)</body></methods><methods><class-id>Core.Point</class-id> <category>trachel</category><body package="Roassal2-Extentions">transposed	^y@x</body></methods><methods><class-id>Core.Array</class-id> <category>accessing</category><body package="Roassal2-Extentions">preMultiplyByMatrix: m	"Answer m+*self where m is a Matrix."	m numberOfColumns = self size ifFalse: [self error: 'dimensions do not conform'].	^ (1 to: m numberOfRows) collect: [ :row | 			| s |			s := 0.			1 to: self size do: [:k | s := (m at: row at: k) * (self at: k) + s].		s ]</body></methods><methods><class-id>Core.Text</class-id> <category>accessing</category><body package="Roassal2-Extentions">findTokens: delimiters keep: keepers	^ self asString findTokens: delimiters keep: keepers</body><body package="Roassal2-Extentions">substrings	^ self asString substrings</body></methods><methods><class-id>Core.Character class</class-id> <category>roassal2</category><body package="Roassal2-Extentions">arrowDown	^ #down</body><body package="Roassal2-Extentions">arrowUp	^ #up</body></methods><methods><class-id>Core.Character class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">separators	"Answer a collection of the standard ASCII separator characters."	^ #(32 "space"		13 "cr"		9 "tab"		10 "line feed"		12 "form feed")		collect: [:v | Character value: v] as: String</body></methods><methods><class-id>Core.Character</class-id> <category>printing</category><body package="Roassal2-Extentions">asString	^ self asSymbol asString</body></methods><methods><class-id>Core.Character</class-id> <category>converting</category><body package="Roassal2-Extentions">to: other	"Answer with a collection in ascii order -- $a to: $z"	^ (self codePoint to: other codePoint) collect:				[:ascii | Character value: ascii]</body></methods><methods><class-id>Graphics.ScreenFont</class-id> <category>trachel</category><body package="Roassal2-Extentions">emphasized: acode	"TODO"</body><body package="Roassal2-Extentions">familyName	^ self fontDescription family</body><body package="Roassal2-Extentions">rtHeight	^ self fontDescription pixelSize</body><body package="Roassal2-Extentions">widthOfString: string	"Return the length of a string in cairo"	| aCC |	aCC := (ScreenGraphicsContext on: (Pixmap extent: 0@0)) cairoContext.	aCC fontSize: self fontDescription pixelSize;		selectFontFace: self fontDescription familyName.	^ (aCC measureString: string) width.</body></methods><methods><class-id>Core.Set</class-id> <category>enumerating</category><body package="Roassal2-Extentions">doWithIndex: aBlock2	"Support Set enumeration with a counter, even though not ordered"	| index |	index := 0.	self do: [:item | aBlock2 value: item value: (index := index+1)]</body></methods><methods><class-id>Core.UndefinedObject</class-id> <category>testing</category><body package="Roassal2-Extentions">isEmptyOrNil	"Answer whether the receiver contains any elements, or is nil.  Useful in numerous situations where one wishes the same reaction to an empty collection or to nil"	^ true</body><body package="Roassal2-Extentions">isNotNil	^ false</body></methods><methods><class-id>UI.StatefullEvent</class-id> <category>accessing</category><body package="Roassal2-Extentions">commandKeyPressed	state ifNil: [^ false ].	^ self commandDown</body><body package="Roassal2-Extentions">controlKeyPressed	state ifNil: [^ false].	^ self ctrlDown</body><body package="Roassal2-Extentions">optionKeyPressed	state ifNil: [ ^ false].	^ self optionDown</body><body package="Roassal2-Extentions">shiftPressed	state ifNil: [^ false].	^ self shiftDown</body></methods><methods><class-id>OS.Filename</class-id> <category>navigating</category><body package="Roassal2-Extentions">, extention	self flag: 'review this part'.	^ self class createInstanceNamed: self asString, '.', extention.</body><body package="Roassal2-Extentions">asUrl		^ self asURI</body></methods><methods><class-id>OS.Filename</class-id> <category>file utilities</category><body package="Roassal2-Extentions">directories	^ (self filenamesMatching: '*') select: #isDirectory</body><body package="Roassal2-Extentions">ensureDelete	[ self delete ] on: Error do: [:ex | ].</body><body package="Roassal2-Extentions">files	^ (self filenamesMatching: '*') select: #isFile</body></methods><methods><class-id>OS.Filename</class-id> <category>testing</category><body package="Roassal2-Extentions">isFile	^ self isDirectory not</body><body package="Roassal2-Extentions">parent	^ self directory</body></methods><methods><class-id>OS.Filename</class-id> <category>navigating</category><body package="Roassal2-Extentions">pathString	^ self asString</body></methods><methods><class-id>OS.Filename</class-id> <category>streams</category><body package="Roassal2-Extentions">writeStreamDo: aBlock	| stream |	stream := self writeStream.	^ [aBlock value: stream]		ensure: [stream close]</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">encompassing: listOfPoints 	"A number of callers of encompass: should use this method."	| topLeft bottomRight |	topLeft := bottomRight := listOfPoints first.	listOfPoints allButFirstDo: [ :p | 		topLeft := topLeft min: p.		bottomRight := bottomRight max: p ].	^ topLeft corner: bottomRight</body><body package="Roassal2-Extentions">merging: listOfRects 	"A number of callers of merge: should use this method."	| minX minY maxX maxY |	listOfRects do: 		[ :r | 		minX 			ifNil: 				[ minX := r topLeft x.				minY := r topLeft y.				maxX := r bottomRight x.				maxY := r bottomRight y ]			ifNotNil: 				[ minX := minX min: r topLeft x.				minY := minY min: r topLeft y.				maxX := maxX max: r bottomRight x.				maxY := maxY max: r bottomRight y ] ].	^ minX @ minY corner: maxX @ maxY</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>*Roassal2-Core</category><body package="Roassal2-Extentions">asCairoPathOn: aCC	aCC		newPath;		absolute;		moveTo: self topLeft;		lineTo: self topRight;		lineTo: self bottomRight;		lineTo: self bottomLeft;		closePath.	^ aCC copyPath.</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Roassal2-Extentions">center	"Answer the point at the center of the receiver."	^self topLeft + self bottomRight // 2</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Roassal2-Extentions">containsRect: aRect	"Answer whether aRect is within the receiver (OK to coincide)."	^ aRect origin &gt;= origin and: [aRect corner &lt;= corner]</body><body package="Roassal2-Extentions">expandBy: delta 	"Answer a Rectangle that is outset from the receiver by delta. delta is a 	Rectangle, Point, or scalar."		^ delta asMargin expandRectangle: self</body><body package="Roassal2-Extentions">extendBy: deltaMargin 	"Answer a Rectangle with the same origin as the receiver, but whose corner is offset by deltaMargin."	^ deltaMargin asMargin extendRectangle: self</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>*Roassal2-Core</category><body package="Roassal2-Extentions">pointNearestTo: aPoint 	"Return the point on my border closest to aPoint"	| side |	(self containsPoint: aPoint) 		ifTrue: 			[ side := self sideNearestTo: aPoint.			side == #right ifTrue: [ ^ self right @ aPoint y ].			side == #left ifTrue: [ ^ self left @ aPoint y ].			side == #bottom ifTrue: [ ^ aPoint x @ self bottom ].			side == #top ifTrue: [ ^ aPoint x @ self top ] ]		ifFalse: [ ^ aPoint adhereTo: self ]</body><body package="Roassal2-Extentions">sideNearestTo: aPoint 	| distToLeft distToRight distToTop distToBottom closest side |	distToLeft := aPoint x - self left.	distToRight := self right - aPoint x.	distToTop := aPoint y - self top.	distToBottom := self bottom - aPoint y.	closest := distToLeft.	side := #left.	distToRight &lt; closest ifTrue: 		[ closest := distToRight.		side := #right ].	distToTop &lt; closest ifTrue: 		[ closest := distToTop.		side := #top ].	distToBottom &lt; closest ifTrue: 		[ closest := distToBottom.		side := #bottom ].	^ side	" | r | r := Rectangle fromUser.Display border: r width: 1.[Sensor anyButtonPressed] whileFalse:	[(r sideNearestTo: Sensor cursorPoint) , '      ' displayAt: 0@0]"</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>transforming</category><body package="Roassal2-Extentions">translateBy: factor 	"Answer a Rectangle translated by factor, a Point or a scalar."	^Rectangle origin: origin + factor corner: corner + factor</body></methods><methods><class-id>Core.Announcer</class-id> <category>trachel</category><body package="Roassal2-Extentions">handleEventClass: eventClass	self subscriptionRegistryOrNil ifNil: [ ^ false].	^ self subscriptionRegistryOrNil allSubscriptions anySatisfy: [ :sub | 		(sub announcementClass == eventClass) or: 			[ sub announcementClass inheritsFrom: eventClass ] ]</body></methods><methods><class-id>Core.Announcer</class-id> <category>accessing</category><body package="Roassal2-Extentions">numberOfSubscriptions	self subscriptionRegistryOrNil ifNil: [ ^ 0].	^ self subscriptionRegistryOrNil allSubscriptions size.</body></methods><methods><class-id>Core.Announcer</class-id> <category>announcements</category><body package="Roassal2-Extentions">subscriptions	^ self subscriptionRegistry</body></methods><methods><class-id>UI.Cursor class</class-id> <category>constants</category><body package="Roassal2-Extentions">resizeBottom	^ self normal.</body><body package="Roassal2-Extentions">resizeBottomLeft	^ self normal.</body><body package="Roassal2-Extentions">resizeBottomRight	^ self normal.</body><body package="Roassal2-Extentions">resizeLeft	^ self normal</body><body package="Roassal2-Extentions">resizeRight	^ self normal</body><body package="Roassal2-Extentions">resizeTop	^ self normal.</body><body package="Roassal2-Extentions">resizeTopLeft	^ self normal.</body><body package="Roassal2-Extentions">resizeTopRight	^ self normal.</body></methods><methods><class-id>UI.Menu</class-id> <category>roassal2</category><body package="Roassal2-Extentions">openInWorld		self startUp</body><body package="Roassal2-Extentions">popUpInWorld	| b |	b := self startUp.	b value.	"Not yet done"</body></methods><methods><class-id>Core.ClassDescription</class-id> <category>testing</category><body package="Roassal2-Extentions">isClass	^ true</body></methods><methods><class-id>Core.Timestamp class</class-id> <category>system queries</category><body package="Roassal2-Extentions">clockPrecision	^ Duration seconds: 0 nanoSeconds: 1</body></methods><methods><class-id>Core.Timestamp class</class-id> <category>class initialization</category><body package="Roassal2-Extentions">julianDayNumber: aJulianDayNumber	^ self fromSeconds: aJulianDayNumber days asSeconds</body></methods><methods><class-id>Core.Timestamp class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">year: year month: month day: day	"Return a DateAndTime, midnight local time"	^ self		year: year		month: month		day: day		hour: 0		minute: 0</body><body package="Roassal2-Extentions">year: year month: month day: day hour: hour minute: minute	"Return a DateAndTime" 		^ self 		year: year 		month: month 		day: day 		hour: hour		minute: minute		second: 0</body><body package="Roassal2-Extentions">year: year month: month day: day hour: hour minute: minute second: second	"Return a DateAndTime"		^ self 		fromDate: (Date newDay: day monthNumber: month year: year) 		andTime: (Time new hours: hour minutes: minute seconds: second).</body></methods><methods><class-id>Core.Timestamp</class-id> <category>accessing</category><body package="Roassal2-Extentions">asDateAndTime	^ self</body></methods><methods><class-id>Core.Timestamp</class-id> <category>conversion</category><body package="Roassal2-Extentions">asMonth	^ Roassal2.Month starting: self</body><body package="Roassal2-Extentions">asWeek	^ Roassal2.Week starting: self</body><body package="Roassal2-Extentions">asYear	^ Roassal2.Year starting: self</body></methods><methods><class-id>Core.Timestamp</class-id> <category>enumerating</category><body package="Roassal2-Extentions">dayMonthYearDo: aBlock	"Return the value of executing block with the Gregorian Calender day, month and year as arguments,	as computed from my Julian Day Number, julianDayNumber.	See http://en.wikipedia.org/wiki/Julian_date#Gregorian_calendar_from_Julian_day_number        A short Description for the Constants used below:    - 400 years span 146097 days in gregorian calendar.    - 100 years span 36524 days, except every 400 years.    - 4 years span 1461 days, except every 100 years.    - 1 year spans 365 days, except every four years    "	| l n i j monthDay m fullYear |	l := self julianDayNumber + 68569.	n := 4 * l // 146097.	l := l - (146097 * n + 3 // 4).	i := 4000 * (l + 1) // 1461001.	l := l - (1461 * i // 4) + 31.	j := 80 * l // 2447.	monthDay := l - (2447 * j // 80).	l := j // 11.	m := j + 2 - (12 * l).	fullYear := 100 * (n - 49) + i + l.	^ aBlock		value: monthDay		value: m		value: fullYear.</body></methods><methods><class-id>Core.Timestamp</class-id> <category>accessing</category><body package="Roassal2-Extentions">dayOfWeek	"Sunday=1, ... , Saturday=7"	^ (self julianDayNumber + 1 rem: 7) + 1</body><body package="Roassal2-Extentions">julianDayNumber	^ self asDate julianDayNumber</body><body package="Roassal2-Extentions">midnight	"Answer a DateAndTime starting at midnight (towards the end of the day) local time"	self dayMonthYearDo: [ :d :m :y|		^self class 			year: y			month: m			day: d  ].</body><body package="Roassal2-Extentions">monthName	^ Roassal2.Month nameOfMonth: self month</body></methods><methods><class-id>Core.Duration class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">days: aNumber	^ self seconds: aNumber * 86400 nanoSeconds: 0</body><body package="Roassal2-Extentions">days: days seconds: seconds	^ self seconds: ((days * 86400) + seconds) nanoSeconds: 0</body><body package="Roassal2-Extentions">seconds: seconds nanoSeconds: nanos	^ self fromNanoseconds: (seconds * Nanoseconds denominator) + nanos</body><body package="Roassal2-Extentions">weeks: aNumber	^ self days: (aNumber * 7) seconds: 0</body></methods><methods><class-id>Core.Duration</class-id> <category>converting</category><body package="Roassal2-Extentions">asNanoSeconds	^ self asNanoseconds</body></methods><methods><class-id>Graphics.Window</class-id> <category>accessing</category><body package="Roassal2-Extentions">resize: aExtentPoint	self moveTo: creationOrigin resize: aExtentPoint.</body></methods><methods><class-id>Core.Magnitude</class-id> <category>*Roassal2-Core</category><body package="Roassal2-Extentions">min: aMin max: aMax 	^ (self min: aMin) max: aMax</body></methods><methods><class-id>Core.SequenceableCollection class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">new: newSize streamContents: blockWithArg	| stream |	stream := WriteStream on: (self streamSpecies new: newSize).	blockWithArg value: stream.	stream position = newSize		ifTrue: [ ^stream originalContents ]		ifFalse: [ ^stream contents ]</body><body package="Roassal2-Extentions">ofSize: n	"Create a new collection of size n with nil as its elements.	This method exists because OrderedCollection new: n creates an	empty collection,  not one of size n."	^ self new: n</body></methods><methods><class-id>Core.SequenceableCollection class</class-id> <category>stream creation</category><body package="Roassal2-Extentions">streamContents: blockWithArg	^ self new: 100 streamContents: blockWithArg</body></methods><methods><class-id>Core.SequenceableCollection class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">streamSpecies	"I return the class that is used for streaming. If override consider overriding #new:streamContents:"	^ self</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>accessing</category><body package="Roassal2-Extentions">allButFirst	"Answer a copy of the receiver containing all but the first	element. Raise an error if there are not enough elements."	^ self allButFirst: 1</body><body package="Roassal2-Extentions">allButLast	"Answer a copy of the receiver containing all but the last	element. Raise an error if there are not enough elements."	^ self allButLast: 1</body><body package="Roassal2-Extentions">atRandom: aGenerator	^ self at: (aGenerator nextInt: self size).</body><body package="Roassal2-Extentions">atWrap: index 	"Answer the index'th element of the receiver.  If index is out of bounds,	let it wrap around from the end to the beginning until it is in bounds."	^ self at: index - 1 \\ self size + 1</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">collectWithIndex: elementAndIndexBlock	"Use the new version with consistent naming"	^ self withIndexCollect: elementAndIndexBlock</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>copying</category><body package="Roassal2-Extentions">copyWithoutIndex: index	"Return a copy containing all elements except the index-th."	| copy |	copy := self species ofSize: self size - 1.	copy replaceFrom: 1 to: index-1 with: self startingAt: 1.	copy replaceFrom: index to: copy size with: self startingAt: index+1.	^ copy</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>accessing</category><body package="Roassal2-Extentions">eighth	"Answer the third element of the receiver.  Provide an error 	notification if the receiver contains no elements."	self emptyCheck.	^ self at: 8</body><body package="Roassal2-Extentions">indexOf: anElement startingAt: start       "Answer the index of the first occurence of anElement after start within the receiver. If the receiver does not contain anElement, answer 0."	^self indexOf: anElement startingAt: start ifAbsent: 0</body><body package="Roassal2-Extentions">indexOf: anElement startingAt: start ifAbsent: exceptionBlock	"Answer the index of the first occurence of anElement after start	within the receiver. If the receiver does not contain anElement, 	answer the 	result of evaluating the argument, exceptionBlock."	start to: self size do:		[:index |		(self at: index) = anElement ifTrue: [^ index]].	^ exceptionBlock value</body><body package="Roassal2-Extentions">indexOfAnyOf: aCollection startingAt: start ifAbsent: exceptionBlock withBlock: block	start to: self size do:		[:index |		(block value: aCollection value: (self at: index)) ifTrue: [^ index] ].	^ exceptionBlock value</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>roassal2</category><body package="Roassal2-Extentions">max: aBlock	| max |		self ifEmpty: [ ^ nil ].		max := aBlock value: self first.		self allButFirstDo: [ :each || value |		value := aBlock value: each.		value &gt; max ifTrue: [ max := value ] ].		^ max</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">pairsDo: aBlock 	"Evaluate aBlock with my elements taken two at a time.  If there's an odd number of items, ignore the last one.  Allows use of a flattened array for things that naturally group into pairs.  See also pairsCollect:"	1 to: self size // 2 do:		[:index | aBlock value: (self at: 2 * index - 1) value: (self at: 2 * index)]"#(1 'fred' 2 'charlie' 3 'elmer') pairsDo:	[:a :b | Transcript cr; show: b, ' is number ', a printString]"</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>converting</category><body package="Roassal2-Extentions">reversed	"Answer a copy of the receiver with element order reversed."	"Example: 'frog' reversed"	| n result src |	n := self size.	result := self species new: n.	src := n + 1.	1 to: n do: [:i | result at: i put: (self at: (src := src - 1))].	^ result</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>enumerating</category><body package="Roassal2-Extentions">withIndexCollect: elementAndIndexBlock 	"Just like with:collect: except that the iteration index supplies the second argument to the block."	| result |	result := self species new: self size.	1 to: self size do:		[:index | result at: index put:		(elementAndIndexBlock			value: (self at: index)			value: index)].	^ result</body></methods><methods><class-id>Graphics.ScreenGraphicsContext</class-id> <category>displaying</category><body package="Roassal2-Extentions">fillRectangle: aRect color: aColor	self newCairoContextWhile: [:aCC | 		aCC sourceColorValue: aColor alpha: aColor alpha.		aCC rectangle: aRect.		aCC fill].</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>roassal2</category><body package="Roassal2-Extentions">assert	self value ifFalse: [self error: 'Assertion failed']</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>trachel</category><body package="Roassal2-Extentions">ifError: errorHandlerBlock	"Evaluate the block represented by the receiver, and normally return it's value.  If an error occurs, the errorHandlerBlock is evaluated, and it's value is instead returned.  The errorHandlerBlock must accept zero, one, or two parameters (the error message and the receiver)."	"Examples:		[1 whatsUpDoc] ifError: [:err :rcvr | 'huh?'].		[1 / 0] ifError: [:err :rcvr |			'ZeroDivide' = err				ifTrue: [Float infinity]				ifFalse: [self error: err]]"	^ self on: Error do: [:ex |		errorHandlerBlock cull: ex description cull: ex receiver]</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>roassal2</category><body package="Roassal2-Extentions">initializeElement: aRTElement 	self value: aRTElement</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>testing</category><body package="Roassal2-Extentions">isBlock	^ true</body><body package="Roassal2-Extentions">isClosure	^ true</body></methods><methods><class-id>Core.Integer</class-id> <category>bit manipulation</category><body package="Roassal2-Extentions">| aNumber	^ self bitOr: aNumber</body></methods><methods><class-id>Core.Integer</class-id> <category>printing</category><body package="Roassal2-Extentions">asStringWithCommas	"123456789 asStringWithCommas"	"-123456789 asStringWithCommas"	^ String streamContents: [:stream | 		self printWithCommasOn: stream ]</body></methods><methods><class-id>Core.Integer</class-id> <category>truncation and round off</category><body package="Roassal2-Extentions">atRandom	"Answer a random integer from 1 to self"	| rand |	self = 0 ifTrue: [^ 0].	self &lt; 0 ifTrue: [ ^ self negated atRandom negated].	rand := Random new.		^ (rand next * self) asInteger + 1.</body></methods><methods><class-id>Core.Integer</class-id> <category>arithmetic</category><body package="Roassal2-Extentions">differenceFromTimestamp: timestamp	^ timestamp + self negated asDuration</body></methods><methods><class-id>Core.Integer</class-id> <category>testing</category><body package="Roassal2-Extentions">isFraction	"Each Integer is considered as a special kind of Fraction with self as numerator and a unit denominator.	Rationale: A Fraction with a unit denominator will be automatically reduced to an Integer.	Hence Integer has to be polymorphic to Fraction."	^true</body><body package="Roassal2-Extentions">isPowerOfTwo	"Return true if the receiver is an integral power of two."	^ self ~= 0 and: [(self bitAnd: self-1) = 0]</body><body package="Roassal2-Extentions">isPrime	"Answer true if the receiver is a prime number. See isProbablyPrime for a probabilistic	implementation that is much faster for large integers, and that is correct to an extremely	high statistical level of confidence (effectively deterministic)."		self &lt;= 1 ifTrue: [ ^false ].	self even ifTrue: [ ^self = 2].	3 to: self sqrtFloor by: 2 do: [ :each |		self \\ each = 0 ifTrue: [ ^false ] ].	^true</body></methods><methods><class-id>Core.Integer</class-id> <category>printing</category><body package="Roassal2-Extentions">numberOfDigitsInBase: b 	"Return how many digits are necessary to print this number in base b.	This does not count any place for minus sign, radix prefix or whatever.	Note that this algorithm may cost a few operations on LargeInteger."	| nDigits q total |	self negative ifTrue: [^self negated numberOfDigitsInBase: b].	self &lt; b ifTrue: [^1].	b isPowerOfTwo ifTrue: [^self highBit + b highBit - 2 quo: b highBit - 1].		"A conversion from base 2 to base b has to be performed.	This algorithm avoids Float computations like (self log: b) floor + 1,	1) because they are inexact	2) because LargeInteger might overflow	3) because this algorithm might be cheaper than conversion"	q := self.	total := 0.	["Make an initial nDigits guess that is lower than or equal to required number of digits"	nDigits := b = 10		ifTrue: [((q highBit - 1) * 1233 &gt;&gt; 12) + 1. "This is because (2 log)/(10 log)*4096 is slightly greater than 1233"]		ifFalse: [q highBit quo: b highBit].	total := total + nDigits.		"See how many digits remains above these first nDigits guess"	(q := q quo: (b raisedToInteger: nDigits)) &lt; b] whileFalse.	^q = 0		ifTrue: [total]		ifFalse: [total + 1]</body><body package="Roassal2-Extentions">print: positiveNumberString on: aStream prefix: prefix length: minimum padded: zeroFlag	| padLength |	padLength := minimum - positiveNumberString size - prefix size.	padLength &gt; 0		ifTrue: [zeroFlag				ifTrue: [aStream nextPutAll: prefix; nextPutAll: (String new: padLength withAll: $0)]				ifFalse: [aStream nextPutAll: (String new: padLength withAll: Character space); nextPutAll: prefix]]		ifFalse: [aStream nextPutAll: prefix].	aStream nextPutAll: positiveNumberString</body><body package="Roassal2-Extentions">printOn: aStream base: base length: minimum padded: zeroFlag	| prefix |		prefix := self negative ifTrue: ['-'] ifFalse: [ '' ].		self print: (self abs printStringBase: base) on: aStream prefix: prefix length: minimum padded: zeroFlag</body><body package="Roassal2-Extentions">printOn: aStream showingDecimalPlaces: placesDesired	"Same as super, but provides a faster implementation because fraction part and rounding are trivial."		self printOn: aStream base: 10.		placesDesired &lt;= 0 ifTrue: [ ^ self ].		aStream nextPut: $..	placesDesired timesRepeat: [ aStream nextPut: $0 ]</body><body package="Roassal2-Extentions">printSeparatedBy: aDelimiter every: offset signed: printSigned base: base on: aStream	| digits |	digits := self abs printStringBase: base.		self sign = -1 		ifTrue: [ aStream nextPut: $- ] 		ifFalse: [ printSigned ifTrue: [ aStream nextPut: $+ ] ].		1 to: digits size do: [ :i | 		aStream nextPut: (digits at: i).		(i &lt; digits size and: [ (i - digits size) \\ offset = 0 ])			ifTrue: [ aStream nextPut: aDelimiter ] ]</body><body package="Roassal2-Extentions">printSeparatedBy: aDelimiter every: offset signed: printSigned on: aStream	^ self printSeparatedBy: aDelimiter every: offset signed: printSigned base: 10 on: aStream</body><body package="Roassal2-Extentions">printStringBase: base length: minimum padded: zeroFlag	^String streamContents: [:s| self printOn: s base: base length: minimum padded: zeroFlag]</body><body package="Roassal2-Extentions">printStringHex	"returns the hex digit part of the integer when printed in hexadecimal format.	30 printStringHex 		'1E'	30 hex		 '16r1E' "			^self printStringBase: 16</body><body package="Roassal2-Extentions">printWithCommasOn: aStream	"123456789 asStringWithCommas"	"-123456789 asStringWithCommas"	^ self printSeparatedBy: $, every: 3 signed: false on: aStream</body></methods><methods><class-id>Core.Integer</class-id> <category>truncation and round off</category><body package="Roassal2-Extentions">round: numberOfWishedDecimal	^self</body></methods><methods><class-id>Core.Date class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">julianDayNumber: aJulianDayNumber	^ (Timestamp julianDayNumber: aJulianDayNumber) asDate</body><body package="Roassal2-Extentions">year: year day: dayOfYear	^ self newDay: dayOfYear year: year</body><body package="Roassal2-Extentions">yesterday	^ self today previous</body></methods><methods><class-id>Core.Date</class-id> <category>converting</category><body package="Roassal2-Extentions">asMonth	^ self asTimestamp asMonth</body><body package="Roassal2-Extentions">asWeek	^ self asTimestamp asWeek</body><body package="Roassal2-Extentions">asYear	^ self asTimestamp asYear</body></methods><methods><class-id>Core.Date</class-id> <category>accessing</category><body package="Roassal2-Extentions">dayOfWeek	"Sunday=1, ... , Saturday=7"	^ (self julianDayNumber + 1 rem: 7) + 1</body><body package="Roassal2-Extentions">end	^ self next start - Timestamp clockPrecision.</body><body package="Roassal2-Extentions">julianDayNumber	| p q r s monthIndex |	monthIndex := self monthIndex.	p := monthIndex - 14 quo: 12.	q := year + 4800 + p.	r := monthIndex - 2 - (12 * p).	s := (year + 4900 + p ) quo: 100.	^ ((1461 * q) quo: 4) + 		((367 * r) quo: 12) -		((3 * s) quo: 4) +		(self dayOfMonth - 32075).</body><body package="Roassal2-Extentions">next	"TODO check a better way to do this"	^self class newDay: day + 1 year: year</body><body package="Roassal2-Extentions">previous	"TODO check a better way to do this"	^self class newDay: day - 1 year: year</body><body package="Roassal2-Extentions">start	^ self asTimestamp</body></methods><methods><class-id>Core.Date</class-id> <category>converting</category><body package="Roassal2-Extentions">to: anEnd	"Answer an Timespan. anEnd must be aDateAndTime or a Timespan" 	| end |	end := anEnd end.	^ Roassal2.Timespan starting: (self start) ending: end.</body></methods><methods><class-id>Graphics.ColorValue class</class-id> <category>instance creation</category><body package="Roassal2-Extentions">grayScale256: intensity	"between 0 and 256"	| i |	i := intensity asFloat / 256.	^ Roassal2.Color red:  i green: i blue: i</body><body package="Roassal2-Extentions">h: hue s: saturation v: brightness alpha: alpha	^ self basicNew		intializeHue: hue saturation: saturation brightness: brightness alpha: alpha</body></methods><methods><class-id>Graphics.ColorValue class</class-id> <category>constants</category><body package="Roassal2-Extentions">lightBlue	^ ColorNames at: #lightBlue ifAbsent: [ |c | c := ColorValue red:0.7996089931573802 green: 1  blue: 1. ColorNames at: #lightBlue put: c  ].</body><body package="Roassal2-Extentions">lightGreen	^ ColorNames at: #lightGreen ifAbsent: [ |c | c := ColorValue red: 0.7996089931573802 green: 1  blue: 0.6001955034213099. ColorNames at: #lightGreen put: c  ].</body><body package="Roassal2-Extentions">lightRed	^ ColorNames at: #lightRed ifAbsent: [ |c | c := ColorValue red: 1 green: 0.7996089931573802  blue: 0.7996089931573802. ColorNames at: #lightRed put: c  ].</body></methods><methods><class-id>Graphics.ColorValue class</class-id> <category>instance creation</category><body package="Roassal2-Extentions"> r: r g: g b: b range: aDivisor	^ self red: r green: g blue: b range: aDivisor</body></methods><methods><class-id>Graphics.ColorValue class</class-id> <category>constants</category><body package="Roassal2-Extentions">transparent	^ ColorNames at: #transparent ifAbsent: [ |c | c := ColorValue red: 0 green:  0  blue: 0. ColorNames at: #transparent put: (c alpha: 0)  ].</body><body package="Roassal2-Extentions">veryVeryLightGray	^ ColorNames at: #veryVeryLightGray ifAbsent: [ |c | c := ColorValue red: 0.8748778103616813 green:  0.8748778103616813  blue: 0.8748778103616813. ColorNames at: #veryVeryLightGray put: c  ].</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>converting</category><body package="Roassal2-Extentions">adjustBrightness: brightness	"Adjust the relative brightness of this color. (lowest value is 0.005 so that hue information is not lost)"	^ self class		h: self hue		s: self saturation		v: (self brightness + (brightness min: 1.0) max: 0.005)		alpha: self alpha</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>*Roassal2-Core</category><body package="Roassal2-Extentions">asHexString	^ self asHTMLColor</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>converting</category><body package="Roassal2-Extentions">asHTMLColor	^'#' , ((self red * 255 / 16) truncated printStringRadix: 16) , ((self red * 255 rem: 16) truncated printStringRadix: 16) , ((self green * 255 / 16) truncated printStringRadix: 16) , ((self green * 255 rem: 16) truncated printStringRadix: 16) , ((self blue * 255 / 16) truncated printStringRadix: 16) , ((self blue * 255 rem: 16) truncated printStringRadix: 16)</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>testing</category><body package="Roassal2-Extentions">closeTo: aColor	^ (self red closeTo: aColor red range: 0.01) and: [ 		(self green closeTo: aColor green range: 0.01) and: [		(self blue closeTo: aColor blue range: 0.01)] ]</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>converting</category><body package="Roassal2-Extentions">darker	"Answer a darker shade of this color."	^ self adjustBrightness: -0.08</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>comparing</category><body package="Roassal2-Extentions">diff: theOther	"Returns a number between 0.0 and 1.0"	^ ((self red - theOther red) abs		+ (self green - theOther green) abs		+ (self blue - theOther blue) abs)		/ 3.0 / 1023</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>converting</category><body package="Roassal2-Extentions">initializeRed: r green: g blue: b alpha: anAlpha 	"Initialize this color's r, g, and b components to the given values in the range [0.0..1.0].  Encoded in a single variable as 3 integers in [0..1023]."	self setRed: r setGreen: g setBlue: b.	^ self alpha: anAlpha</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>*Roassal2-Core</category><body package="Roassal2-Extentions">installPaintOn: aCC	aCC sourceColorValue: self alpha: self alpha.	aCC drawCommand: #fill.</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>converting</category><body package="Roassal2-Extentions">intializeHue: hue saturation: saturation brightness: brightness alpha: anAlpha 	"Initialize this color to the given hue, saturation, and brightness. See the comment in the instance creation method for details."	| s v hf i f p q t |		red == nil ifFalse: [ self error: 'attempt to modify colors' ].		s := (saturation asFloat max: 0.0) min: 1.0.	v := (brightness asFloat max: 0.0) min: 1.0.	"zero saturation yields gray with the given brightness"	s = 0.0 ifTrue: 		[ ^ self 			initializeRed: v			green: v			blue: v			alpha: anAlpha ].			hf := hue asFloat.	(hf &lt; 0.0 or: [ hf &gt;= 360.0 ]) ifTrue: [ hf := hf - ((hf quo: 360.0) asFloat * 360.0) ].	hf := hf / 60.0.	i := hf asInteger.	"integer part of hue"	f := hf fractionPart.	"fractional part of hue"	p := (1.0 - s) * v.	q := (1.0 - (s * f)) * v.	t := (1.0 - (s * (1.0 - f))) * v.	0 = i ifTrue: 		[ ^ self 			initializeRed: v			green: t			blue: p			alpha: anAlpha ].		1 = i ifTrue: 		[ ^ self 			initializeRed: q			green: v			blue: p			alpha: anAlpha ].	2 = i ifTrue: 		[ ^ self 			initializeRed: p			green: v			blue: t			alpha: anAlpha ]		.	3 = i ifTrue: 		[ ^ self 			initializeRed: p			green: q			blue: v 			alpha: anAlpha ].	4 = i ifTrue: 		[ ^ self 			initializeRed: t			green: p			blue: v			alpha: anAlpha ].	5 = i ifTrue: 		[ ^ self 			initializeRed: v			green: p			blue: q			alpha: anAlpha ].	self error: 'implementation error'</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>testing</category><body package="Roassal2-Extentions">isColor	^ true</body><body package="Roassal2-Extentions">isTranslucent	^ self alpha &lt; 255</body><body package="Roassal2-Extentions">isTransparent	^ self alpha = 0</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>printing</category><body package="Roassal2-Extentions">printHtmlString	"answer a string whose characters are the html representation  	of the receiver"	^ ((self red * 255) asInteger printStringBase: 16 length: 2 padded: true)	, ((self green * 255) asInteger printStringBase: 16 length: 2 padded: true)	, ((self blue * 255) asInteger printStringBase: 16 length: 2 padded: true)</body></methods><methods><class-id>Core.ByteString</class-id> <category>*roassal2-core</category><body package="Roassal2-Visualworks">split: aByteString	"At the moment this is only implemented for single characters."	^aByteString tokensBasedOn: self any</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>building</category><body package="Roassal2-Visualworks">roassalView: spec into: builder	| component model wrap canvas |	builder isEditing ifFalse: [		(builder source class methodDict includesKey: #roassalView) ifFalse: [			builder source class compile: 'roassalView	^ Roassal2.RTView new' classified: 'roassal2' 			]		].		model := spec modelInBuilder: builder.	component := Roassal2.TRPlatform current trMorphClass new.	canvas := model value value.	(canvas class == Roassal2.RTView) ifTrue: [ canvas := canvas canvas ].	(canvas isKindOf: Roassal2.RTBuilder)		ifTrue: [ canvas build. canvas := canvas view canvas].		component canvas: canvas.	canvas morph: component.		builder isEditing ifFalse: [component widgetState isVisible: spec initiallyVisible].	component widgetState isEnabled: spec initiallyEnabled.		builder component: component.	self setDispatcherOf: component fromSpec: spec builder: builder.	wrap := spec bordered		ifTrue: [ self borderedWrapperFor: spec borderTypeNumber: 0 ]		ifFalse: [ self boundedWrapperClass new ].	builder wrapWith: wrap.		builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec).	builder isEditing ifFalse: [ 		(builder source class methodDict includesKey: #postOpenWith:) 			ifFalse: [ builder source class compile: 'postOpenWith: aBuilder	| canvas model |	aBuilder bindings do: [:b | 		canvas := nil.		model := b value.		model class == Roassal2.RTView ifTrue: [ canvas := model canvas ].		model class == Roassal2.TRCanvas ifTrue: [ canvas := model ].		(model value isKindOf: Roassal2.RTBuilder) ifTrue: [ canvas := model view canvas ].				canvas isNotNil ifTrue: [ canvas focusOnCenterScaled; signalUpdate  ]		]' classified: 'interface opening' ]. 		Roassal2.TRApplicationModel postOpenWith: builder and: builder source selector: component ].</body></methods><methods><class-id>Core.Number</class-id> <category>*Roassal2-Core</category><body package="Roassal2-Visualworks">roundUpTo: aNumber 	"Answer the next multiple of aNumber toward negative infinity that is nearest the receiver. 	Examples:               3.1479 roundUpTo: 0.01 -&gt; 3.15               3.1479 roundUpTo: 0.1 -&gt; 3.2               1923 roundUpTo: 10 -&gt; 1930               3.1479 roundUpTo: 0.005 -&gt; 3.15               -3.1479 roundUpTo: 0.01 -&gt; -3.14"		^(self / aNumber) ceiling * aNumber</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="Roassal2-Visualworks">roassalImage64	^ 'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAACn0lEQVR42u2Vy0tUURzH/TMSdVGLinwkUlRmTlEgaWJBQWirAmsR9FhIEGEECbaQiiChMINRQcpAoSSrXSDMe3TRdRx8zouZua953bkz47ffPVPNNJMOM9ImWhzuPef8zu/ze53fKRNFEX9zlP0HbAvA+3yQLEZE+nqhnG9B4ngD1KYaKK3NiPY/gLi6WhpAcK0jPPQcSmcH1HYdYvd7aD6I0NsxhMaG2Tx5aDfU040QbRZ2xuv1IhgMFgYIfj9it68iVV2OyNNHEB0LkEiJIAgZGVIUfXgXqZoKhEZeweFwwGg0wmazgef5rQHy549Q245C/jIDafYrWboHyqUOiORVtlxk8AlS9VUIvRmFyWRiQ4P4ycAtARIplicn0rBP09g4sAvKjSvgA4GMB14PlO4uJJqqIXIcXC4XLBYL8yTb081z8MPNkP4lNuoqEBnoY6ETKKmSzUxJvwelqx2SYTYtT0rdbndeeApWUYwUbezbweIcvX4Zamsj4hdaEH79AsLycsagUgHx7k4GCI/roV5so/9yhJ8N5HtcKiDRcgRqcz3F3AtxZQXxMzokdPV5CS8JIKy7kKqrROzWtUzljAyxtWhvDyvVbQHkqYl0/EeHM4ocHOJnTyB5eC+kmQ8ZebuteEDszk2kaivZJcteD70bJy+qkDhWC/n9JCKP+yGP6YsDaO6rpw5SvPdTtTjz9rQ2ojbVItmwk1WadkeKAyxwSFKs4+dOUi7W2cHcwzwlnielP3Pg8XiKAFCNR6gc5ekpBHxezM/Pw2w2Y4UqKa/jklLuG8f2ObrVRb8HmmVaj9F6jdVqxdLS0m9jcXERBoPhVy/K7agFAdoBzUK73Y61tbU/yjidTszNzbFvSS+aFoZAVrPbbD+30f0bb/J3J58mbNQEIe0AAAAASUVORK5CYII='</body></methods><methods><class-id>Core.Bag</class-id> <category>*Roassal2-Core</category><body package="Roassal2-Visualworks">valuesAndCounts	^contents</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Roassal2-Visualworks">corners	"Return an array of corner points in the order of a quadrilateral spec for WarpBlt."	^Array		with: self topLeft		with: self bottomLeft		with: self bottomRight		with: self topRight</body></methods><methods><class-id>Core.Float class</class-id> <category>*Roassal2-Core</category><body package="Roassal2-Visualworks">twoPi	^2 * self pi</body></methods><methods><class-id>Core.Date</class-id> <category>*Roassal2-Core</category><body package="Roassal2-Visualworks">asUnixTime	^self asTimestamp asSeconds</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>converting</category><body package="Roassal2-Visualworks">asUrl	^self asURI</body><body package="Roassal2-Visualworks">asZnUrl	^self asUrl</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>*roassal2-core</category><body package="Roassal2-Visualworks">select: aBlockClosure thenDo: aBlockClosure2	| selected |	selected := self select: aBlockClosure.	^selected do: aBlockClosure2</body></methods><methods><class-id>Store.PackageModel</class-id> <category>accessing</category><body package="Roassal2-Visualworks">dependentClasses	"Return the list of classes used by the classes defined in this package.	Compiled methods literals are checked for this."	^ self allDefinedClasses flatCollect: #dependentClasses</body><body package="Roassal2-Visualworks">dependentPackages	"Return the list of packages used by the classes defined in this package.	Compiled methods literals are checked for this."	^ (self dependentClasses collect: #package) asSet</body><body package="Roassal2-Visualworks">numberOfDependentPackages	"Return the number of packages that are used by myself.	Compiled methods literals are checked for this."	^ self dependentPackages size</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="Roassal2-Visualworks">roassal2Icon	^ ToolbarIconLibrary roassal2Small20x20</body></methods><methods><class-id>Roassal2.RTBuilder</class-id> <category>*Roassal2GT-Inspector</category><body package="Roassal2-Builder-Common">gtInspectorViewIn: composite	&lt;gtInspectorPresentationOrder: -10&gt;	composite roassal2		title: 'View';		initializeView: [ self ]</body></methods><methods><class-id>Roassal2.RTBuilder class</class-id> <category>*Roassal2GT-Inspector</category><body package="Roassal2-Builder-Common">gtExampleBuilder	&lt;gtExample&gt;	&lt;label: 'Example builder'&gt;		^ self new</body></methods><methods><class-id>Roassal2.TRVWPlatform class</class-id> <category>instance creation</category><body package="Roassal2-Visualworks">roassalIcon	&lt;resource: #image&gt;	^CachedImage on: (Image			extent: 70 @ 97			depth: 8			bitsPerPixel: 8			palette: (MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 2280 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 5428 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 3469 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 1509 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6006 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 4047 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 4625 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 4657 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 3276 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 3854 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 3886 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 1927 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 4464 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 2505 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 2505 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 5043 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 3083 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 5043 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 3693 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 5621 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 3661 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 4272 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 4850 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 2890 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 2923 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6038 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 1509 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 4079 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 2120 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2730 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 3308 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 5846 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 5846 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 1927 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 1927 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 2505 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 2537 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 3115 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 5653 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2344 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 4882 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 5460 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 1573 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 2152 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 4689 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 2730 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 5267 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1381 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 5846 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 1959 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 4497 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 4497 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 5075 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 3147 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 3726 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 1734 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 1798 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 4304 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 2376 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 5492 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6070 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 4111 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 1573 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 3533 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 2152 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2762 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 4111 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 3340 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 5878 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1381 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 5107 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 3147 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 5685 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 1798 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 3726 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 2376 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 4914 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2376 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 5492 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 5492 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 1606 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 1606 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 2184 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 4721 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 4721 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 5300 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1413 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 3950 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 2023 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 4529 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 2601 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 5107 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 5717 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 3758 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 4336 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 3565 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 2216 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2794 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 3372 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1445 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 3983 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 5910 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 3950 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 2023 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 2601 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 3180 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 5717 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 5717 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 1830 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 4946 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 2987 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 5524 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 4946 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 3565 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 1638 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 4175 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 4753 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 5332 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 5942 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 3983 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 3790 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 1830 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 3019 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 5557 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 3597 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 3629 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 2248 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2826 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 5364 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 2826 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1477 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 2055 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 5942 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 2633 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 5171 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 5781 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 3212 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 3822 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 1863 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 2441 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 4978 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 5557 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 1670 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 4207 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 4786 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 5396 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 3437 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 5974 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 1477 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 4015 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 2055 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 4593 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 4593 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 2055 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 5203 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 4400 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 4432 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 2473 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 3051 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 3051 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 3629 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2280 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 4818 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 2858 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 5396 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6006 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 4047 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 2087 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 4625 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 2666 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 5781 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 5814 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 3276 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 1895 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 5010 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 5621 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 5621 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 1702 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 1702 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 4240 4015))) collect: [:t1 | (t1 at: 1) value perform: (t1 at: 2)							withArguments: (t1 at: 3)]))			usingBits: (ByteArray fromPackedString: ',+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2VHD8ERJ0Q2^KV5M4#@&ampgt;7M[^/.;J2,+J2, @@,+J2,+J2,(I5L4-KR4-KR4,_O$J2,+J2,+J2,+J2,+J2,+J2,+J2,,MYR4-KR4-KR3^2,+J2,+I]0CT5MST50E62,+J2, @@,+J2,+J2S+MKR4-KR4-K,0ZJ,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+HQV$-KR4-KR7*2,+J2,%45MST5MST5MSU],+J2, @@,+J2,+JACT-KR4-KR79?"+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2QT-KR4-KR3&gt;2,+J2.&lt;@5MST5MST5MSW@.;J2, @@,+J2,,R]R4-KR4-K!''^2,+J2/*1*[Y]6,+J2,+J2,+J2,+J2,+J2,+J2FT-KR4-KR9&amp;2,+J2+3T5MST5MST5MST5+;J2, @@,+J2,+5KR4-KR0N+,+J2%\"S[4-KR4-.,+J2,+J2,+J2,+J2,+J2,+J2A@MKR4-KR9&amp;2,+J2-3T5MST5MST5MST5-;J2, @@,+J2FD-KR4-K&amp;YR2,+J2SCMKR4-KR4.%,+J2,+J2,+J2,+J2,+J2,+J2PZMKR4-KR2.2,+J20CT5MST5MST5MST50KJ2, @@,+J2O4-KR4.K];J2,+J2,"=KR4-KR4.K,+J2,+J2,+J2,+J2,+J2,+J2-$-KR4-KR1*2,+J2-3T5MST5MST5MST5-;J2, @@,+H\(4-KR9E'',+J2,+J2,"!KR4-KR4..,+J2,+J2,+J2,+J2,+J2,+J2X4-KR4-KR9:2,+J2+3T5MST5MST5MST5+;J2, @@,+J)R4-K^G.2,+J2,+J2,!=KR4-KR4.$,+J2,+J2,+J2,+J2,+J2,+J2N4-KR4-KL&lt;R2,+J2.&lt;@5MST5MST5MSW@.;J2, @@,+HVR4.#L+J2,+J2,+J2PZMKR4-KR4-9,+J2,+J2,+J2,+J2,+J2,+JOIT-KR4-K,KJ2,+J2,%45MST5MST5MSU],+J2, @@,+J214,J,+J2,+J2,+J2#T-KR4-KR3M1,+J2,+J2,+J2,+J2,+J2,+I=R4-KR4.#PKJ2,+J2,+I]0CT5MST50E62,+J2, @@,+J2)EUA,+J2,+J2,+J2ND-KR4-KR4Z2,+J2,+J2,+J2,+J2,+J2,(6PR4-KR4-?,+J2,+J2,+J2.:&lt;5MSV/.;J2,+J2, @@,+J2PW.2,+J2,+J2,+J2QT-KR4-KR2&amp;2,+J2,+J2,+J2,+J2,+J2/"-KR4-KR4&amp;2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2YD-KR4-KR;&ampamp;;J2G$-KR4-KR4-KR0LIU;J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,''-KR4-KR4,3$+KDK$-KR4-KR4-K"4:2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,*YKR4-KR4.:,+I0R4-KR4-KR4-K@7^2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,(!KR4-KR4.0,+HPR4-KR4-KR4-KR;F2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+5KR4-KR4.$,+JI!#,NRD-KR4-KR&lt;ZR,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,,]KR4-KR4-9,+J2,+J2")EKR4-KR4,E,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2!4-KR4-KR3M1,+J2,+J2,$MKR4-KR4-8AKJ2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2)4-KR4-KR:"2,+J2,+J2,(J]R4-KR4-K ;J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2E4-KR4-KR;B2,+J2,+J2,+IER4-KR4-KOXJ2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2LT-KR4-KR8N2,+J2,+J2,+KD(4-KR4-KR0*2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2OD-KR4-KR722,+J2,+J2,+J20T-KR4-KR5%7,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+KDR4-KR4-KL4*2,+J2,+J2,+J21JMKR4-KR4,:,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J&lt;R4-KR4-K)[J2,+J2,+J2,+J2,,EKR4-KR4,3SKJ2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+H;R4-KR4-K!+J2,+J2,+J2,+J2,,R#R4-KR4-KK;"2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+H R4-KR4-K\+J2,+J2,+J2,+J2,+JHR4-KR4-KR4V2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+IPR4-KR4-KUKJ2,+J2,+J2,+J2,+JR!T-KR4-KR6@,,+J2,+J2,+J2,+J2.KJ2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,,UKR4-KR4-KMKJ2,+J2,+J2,+J2,+J2*4-KR4-KR4/F@[J2,+J2,+J2,+H7)KJ2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,%1KR4-KR4-3,+J2,+J2,+J2,+J2,+J2,!AKR4-KR4-K$\V2,+J2,+J2,)&gt;#.[J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,%EKR4-KR4-:,+J2,+J2,+J2,+J2,+J2,''-YR4-KR4-KR&lt;I_,+J2,+J2AV=K0;J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,&amp;5KR4-KR4-!,+J2,+J2,+J2,+J2,+J2,+I)R4-KR4-KR4,C_\V2.KPPR4-[,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,''!KR4-KR4,,,+J2,+J2,+J2,+J2,+J2,+J2^$-KR4-KR4-KR4/G[4-KR6CC,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2]4-KR4-KR4,#,+J2,+J2,+J2,+J2,+J2,+J2AJ5KR4-KR4-KR4-KR4-KR0*2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2W$-KR4-KR6J2,+J2,+J2,+J2,+J2,+J2,+J2,+&lt;_R4-KR4-KR4-KR4-K"KJ2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2!D-KR4-KR1.2,+J2,+J2,+J2,+J2,+J2,+J2,+J&gt;C4-KR4-KR4-KR&lt;X8,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2#$-KR4-KR8R2,+J2,+J2,+J2,+J2,+J2,+J2,+J2V@JPR4-KR4-K]AZ2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2&amp;T-KR4-KR;22,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J\[ AYT6*@,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+H*R4-KR4-KR:&amp;2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+HGR4-KR4-KR5Z2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+JDR4-KR4-KR9&gt;2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+H"R4-KR4.P-X62,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+I9I)B%H@-7,+J2,+J2,+./-&lt;B7+;.2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2* #@MSV*,+J2,+J2, @@,+J2,+J2,+J2,$F2,+J2,+J2,+J2W\@5MST5M\A],+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+.7MST5MST5-;.2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+I]MST5MST5MST5W[J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2&amp;D&lt;5MST5MST5MT&gt;X,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+/@MST5MST5MST50K.2,+J2,+J2,+J2,+J2,+J2,+J2,+J2Y#T5MST5MST5MSU&amp;,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,*&lt;5MST5MST5MST5MZ&gt;2,+J2,+J2,+J2,+J2,+J2,+J2,+HLMST5MST5MST5MST5CKJ2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+\5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5T+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,,@5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5H[J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+\5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5T+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,*&lt;5MST5MST5MST5MZ&gt;2,+J2,+J2,+J2,+J2,+J2,+J2,+HLMST5MST5MST5MST5CKJ2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+/@MST5MST5MST50K.2,+J2,+J2,+J2,+J2,+J2,+J2,+J2Y#T5MST5MST5MSU&amp;,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+I]MST5MST5MST5W[J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2&amp;D&lt;5MST5MST5MT&gt;X,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2W\@5MST5M\A],+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+.7MST5MST5-;.2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+./-&lt;B7+;.2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2* "7-0"*,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@'))</body></methods><methods><class-id>DemoRoassal class</class-id> <category>interface specs</category><body package="Roassal2-Visualworks">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'DemoRoassal' 			#bounds: #(#{Graphics.Rectangle} 571 269 1015 568 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Roassal2.Roassal2Spec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 30 0 0 1 0 1 ) 					#name: #Roassal2View1 					#flags: 8 					#model: #view1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 46 0 10 0 151 0 23 0 ) 					#name: #ActionButton1 					#model: #focusOnCenter 					#label: 'Focus On center' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Roassal2.Roassal2Spec class</class-id> <category>resources</category><body package="Roassal2-Visualworks">paletteIcon	&lt;resource: #image&gt;	^ CachedImage on: (Roassal2.TRPlatform current formFromStream: self iconBase64 readStream) asImage</body><body package="Roassal2-Visualworks">paletteMonoIcon	"Tools.UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[255 255 255 192 128 0 0 192 128 0 0 192 128 254 0 192 131 255 0 192 140 0 128 192 152 0 64 192 183 128 32 192 131 128 32 192 131 0 32 192 131 0 32 192 131 0 64 192 131 99 128 192 131 126 0 192 131 24 0 192 131 12 0 192 130 6 0 192 134 3 0 192 134 3 0 192 134 1 128 192 134 0 196 192 134 0 120 192 134 0 0 192 128 0 0 192 255 255 255 192 255 255 255 192])</body></methods><methods><class-id>Roassal2.Roassal2Spec class</class-id> <category>interface specs</category><body package="Roassal2-Visualworks">basicsEditSpec	"Tools.UIPainter new openOnClass: self andSelector: #basicsEditSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 300 243 ) 			#max: #(#{Core.Point} 300 243 ) 			#bounds: #(#{Graphics.Rectangle} 618 291 918 534 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 4 0 0.5 0 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #roassal 						#defaultString: 'Rosssal view' 						#catalogID: #UIPainter ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 55 0 0 1 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #AspectC 						#defaultString: 'Aspect:' 						#catalogID: #UIPainter ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 87 0 0 1 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #IDC 						#defaultString: 'ID:' 						#catalogID: #UIPainter ) ) 				#(#{UI.InputFieldSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dragLeaveSelectorAspect: #dragEnterSelector 						#dragEnterSelectorAspect: #dropSelector 						#dropInSelectorAspect: #dragOverSelector 						#dragOverSelectorAspect: ) 					#layout: #(#{Graphics.LayoutFrame} 86 0 28 0 -10 1 53 0 ) 					#name: #modelField 					#model: #model 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#validAspectSelector: ) 					#menu: #fieldMenu ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 86 0 60 0 -10 1 85 0 ) 					#model: #name 					#menu: #fieldMenu ) ) ) )</body><body package="Roassal2-Visualworks">detailsEditSpec	"Tools.UIPainter new openOnClass: self andSelector: #detailsEditSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 245 233 ) 			#max: #(#{Core.Point} 300 243 ) 			#bounds: #(#{Graphics.Rectangle} 618 291 918 534 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 10 0 25 0 ) 					#model: #initiallyDisabled 					#label: 					#(#{Kernel.UserMessage} 						#key: #InitiallyDisabled 						#defaultString: 'Initially Disabled' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 10 0 45 0 ) 					#model: #initiallyInvisible 					#label: 					#(#{Kernel.UserMessage} 						#key: #InitiallyInvisible 						#defaultString: 'Initially Invisible' 						#catalogID: #UIPainter ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 4 0 0.5 0 ) 					#label: #componentName ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 10 0 65 0 ) 					#model: #bordered 					#label: 					#(#{Kernel.UserMessage} 						#key: #bordered 						#defaultString: 'Bordered' 						#catalogID: #UIPainter ) ) ) ) )</body></methods><methods><class-id>Roassal2.Roassal2Inspector class</class-id> <category>interface specs</category><body package="Roassal2-Visualworks">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 668 312 868 512 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 25 0 0 1 0 1 ) 					#name: #view 					#component: #view ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} -96 1 1 0 -77 1 21 0 ) 							#name: #zoomIn 							#model: #zoomIn 							#label: '+' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} -71 1 2 0 -52 1 21 0 ) 							#name: #zoomOut 							#model: #zoomOut 							#label: '-' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} -46 1 2 0 -27 1 21 0 ) 							#name: #center 							#model: #centerScaled 							#label: 'o' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} -21 1 2 0 -2 1 21 0 ) 							#name: #more 							#model: #moreOptions 							#label: '...' 							#defaultable: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 25 0 ) 						#name: #buttons ) ) ) ) )</body></methods><methods><class-id>Roassal2.Roassal2Inspector class</class-id> <category>resources</category><body package="Roassal2-Visualworks">menuOptions	"Tools.MenuEditor new openOnClass: self andSelector: #menuOptions"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Export to PNG' 				#value: 				#exportPNG: ) 			#(#{UI.MenuItem} 				#rawLabel: 'Export to SVG' 				#value: 				#exportSVG: ) 			#(#{UI.MenuItem} 				#rawLabel: 'Export to HTML' 				#value: 				#exportHTML: ) 			#(#{UI.MenuItem} 				#rawLabel: 'Export to HTML...' 				#value: 				#exportHTML2: ) 			#(#{UI.MenuItem} 				#rawLabel: 'Add Box Zoom' 				#value: 				#addBoxZoom: ) 			#(#{UI.MenuItem} 				#rawLabel: 'Inspect view' 				#value: 				#inspectView: ) ) #(4 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Roassal2.TRExampleApplication class</class-id> <category>interface specs</category><body package="Roassal2-Visualworks">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #screenCenter #openType #advanced ) 			#label: 'Example on Roassal2' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 455 97 1055 697 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.Rectangle} 52 45 554 558 ) 					#name: #roassalView 					#component: #roassalView ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 283 8 322 40 ) 					#name: #ActionButton1 					#model: #up 					#label: '^' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 7 276 41 309 ) 					#name: #ActionButton2 					#model: #left 					#label: '&lt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 557 276 593 309 ) 					#name: #ActionButton3 					#model: #right 					#label: '&gt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 293 564 332 596 ) 					#name: #ActionButton4 					#model: #down 					#label: 'v' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Roassal2.RTNameCloud</class-id> <category>examples</category><body package="Roassal2-Builder-NameCloud">example03	"	self new example03	"	&lt;noTest&gt;	| b |	b := RTNameCloud new. 	b dictionary: (RTSourceCodeDictionary new).	RTObject withAllSubclasses do: [ :c | 		b addObjects: c rtmethods description: #getSource ].	^ b</body></methods><methods><class-id>Roassal2.TRCanvas</class-id> <category>*Roassal2GT-Inspector</category><body package="Roassal2-Trachel-Core">gtInspectorViewIn: composite	&lt;gtInspectorPresentationOrder: -10&gt;	composite roassal2		title: 'Canvas';		initializeView: [ RTView new setCanvas: self ]</body></methods><methods><class-id>Roassal2.TRCanvas class</class-id> <category>*Roassal2GT-Inspector</category><body package="Roassal2-Trachel-Core">gtExampleEmpty	&lt;gtExample&gt;	&lt;label: 'Empty canvas'&gt;		^ TRCanvas new</body></methods><methods><class-id>Roassal2.RTCanvasExporter</class-id> <category>example</category><body package="Roassal2-Exporter-PNG">example01	&lt;noTest&gt;	| b view |	b := RTMondrian new.	b nodes: RTShape withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b build.		view := b view.	(RTCanvasExporter canvas: view canvas)		withoutFixedShapes;		whole;		defaultScale;		oversizedBy: 20 @ 20;		format: #png;		fileName: ((TRPlatform current dialogRequest: 'Please enter file name' initialAnswer: 'export.png') ifNil: [ ^ nil ]);		export</body></methods><methods><class-id>Roassal2.RTMicroprint</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Microprint">example01	&lt;gtExample&gt;	&lt;noTest&gt;	| b |	b := RTMicroprint new.	b lineMatching: '*view*' color: Color red trans.	b lineMatching: '*roassal*' color: Color green trans.	b lineMatching: '*shape*' color: Color blue trans.	b texts: (RTBuilder methods collect: #getSource).	^ b</body></methods><methods><class-id>Roassal2.RTDecoratedLine class</class-id> <category>examples</category><body package="Roassal2-LineDecorations">example	" this class is a problem as it provides examples as well / this is not gtExample-compatible "	&lt;todo: 'reorganize examples'&gt;	| v b1 b2 edges |	b1 := (RTBox new		size: 150;		element)		translateTo: 0 @ 0;		@ RTDraggable.	b2 := (RTBox new		size: 150;		element)		translateTo: 400 @ 0;		@ RTDraggable.	edges := OrderedCollection new.	edges add: ((RTArrowedLine new head: RTFilledDiamond asHead; color: Color black; width: 2; attachPoint: (RTShorterDistanceWithOffsetAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new color: Color blue; width: 2; attachPoint: (RTShorterDistanceWithOffsetAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new filledDiamondHead; color: Color green; width: 2; attachPoint: (RTShorterDistanceWithOffsetAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new filledDiamondHead; emptyCircleTail; color: Color red; width: 2; attachPoint: (RTShorterDistanceWithOffsetAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	v := RTView new		add: b1;		add: b2;		addAll: edges.	edges do: [ :each | each update ].	v open</body></methods><methods><class-id>Roassal2.RTEvolutionLine</class-id> <category>ui</category><body package="Roassal2-Builder-DSM">gtEvolutionGraphIn: composite	&lt;gtInspectorPresentationOrder: -10&gt;	| b ds |	^ composite roassal2 		title: 'Plot';		initializeView: [ 			b := RTGrapher new.			b extent: 300@ 200.						ds := RTData new.			ds points: self timeline.			ds x: [ :assoc | self timeline indexOf: assoc ].			ds y: [ :assoc | assoc value ].			ds connectUsing: (RTLine new color: Color blue).			b add: ds.						b axisX 				labelRotation: -30;				labelConversion: [ :n | n isZero					ifTrue: ['']					ifFalse: [ (self timeline at: n) key ] ];				numberOfLabels: self timeline size.			b axisY				title: self value.			b build.			b view ]</body><body package="Roassal2-Builder-DSM">gtRelativeEvolutionGraphIn: composite	&lt;gtInspectorPresentationOrder: -20&gt;	^ composite roassal2 		title: 'Relative Plot';		initializeView: [ self roassalView ]</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>*Roassal2GT-Inspector</category><body package="Roassal2-Core">gtInspectorElementsHierarchyIn: composite	&lt;gtInspectorPresentationOrder: 20&gt;	composite table 		title: 'Elements';		showOnly: 50;		display: [ :each | each elements ];		children: #nestedElements;		column: 'Model' evaluated: [ :each | each model asString ];		column: 'Shape' evaluated: [ :each | each shape asString ]</body><body package="Roassal2-Core">gtInspectorViewIn: composite	&lt;gtInspectorPresentationOrder: -10&gt;	composite roassal2		title: 'View';		initializeView: [ self ]</body></methods><methods><class-id>Roassal2.RTView</class-id> <category>*Roassal2GT-Spotter</category><body package="Roassal2-Core">spotterPreviewIn: aComposite	&lt;spotterPreview: 10&gt;		self build.	aComposite addBrickBack: self view setUpCanvas buildMorph</body></methods><methods><class-id>Roassal2.RTView class</class-id> <category>*Roassal2GT-Inspector</category><body package="Roassal2-Core">gtExampleEmptyView	&lt;gtExample&gt;	&lt;label: 'Empty view'&gt;		^ self new</body></methods><methods><class-id>Roassal2.RTMorphingView class</class-id> <category>examples</category><body package="Roassal2-Interactions-MorphingView">exampleForceBasedLayout	&lt;noTest&gt;	| randomView view lay |		lay := RTForceBasedLayout new.	randomView := [ | rndView |		rndView := RTView new.		rndView addAll: ((RTEllipse new size: 15 + 15 atRandom; color: Color red) elementsOn: (1 to: (10 + 30 atRandom))).		RTEdgeBuilder new			view: rndView;			connectFrom: [ :vv | vv // 2 ].		lay charge: (-1 * 1000 atRandom).		lay on: rndView elements.		rndView	].	view := randomView value.	view elements do: [ :el | el color: Color gray. el @ RTLabeled ].	view addMenu: 'Animate!' callback: [ 		view @ (RTMorphingView new 						referenceView: randomView value; 						smoothTransition: 0.3).		view elements do: [ :el | 			el pushFront.			(el hasAttribute: #RTLabelledLabel) ifFalse: [ el @ RTLabeled ]		]	].	^ view inspect</body><body package="Roassal2-Interactions-MorphingView">exampleSimple	&lt;noTest&gt;	| v1 v2 |	v1 := RTView new.	v1 addAll: ((RTEllipse new color: Color green trans; size: 10) elementsOn: #(1 2)).	RTEdgeBuilder new		view: v1;		useAssociation: 1 -&gt; 2.	RTHorizontalLineLayout on: v1 elements.	"---"	v2 := RTView new.	v2 addAll: ((RTEllipse new color: Color green trans) elementsOn: #(1)).	v2 addMenu: 'animate' callback:  [ 		v2 @ (RTMorphingView new referenceView: v1; smoothTransition: 0.3).	].	v2 addMenu: 'camerea' callback:  [ 		v2 canvas camera scale: 10.		v2 signalUpdate.	].	^ v2 inspect</body><body package="Roassal2-Interactions-MorphingView">exampleWithVaryingEdgeSize	&lt;noTest&gt;	| v1 v2 eb |	v1 := RTView new.	v1 addAll: ((RTEllipse new color: Color green trans; size: 10) elementsOn: #(1 2 3)).	eb := RTEdgeBuilder new		view: v1.	eb shape line width: [ :ee | 10 atRandom ] ; color: [ :ee | Color random ].	eb		useAssociations: (Array with: 1 -&gt; 2 with: 2 -&gt; 3 ).	RTHorizontalLineLayout on: v1 elements.	"---"	v2 := RTView new.	v2 addAll: ((RTEllipse new color: Color green trans; size: 10) elementsOn: #(1 2 3)).	eb := RTEdgeBuilder new		view: v2.	eb shape line width: [ :ee | 10 atRandom ] ; color: [ :ee | Color random ].	eb		useAssociations: (Array with: 1 -&gt; 2 with: 2 -&gt; 3).	RTHorizontalLineLayout on: v2 elements.	"---"	v2 addMenu: 'animate' callback:  [ 		v2 @ (RTMorphingView new referenceView: v1; smoothTransition: 0.3).	].	v2 canvas camera scale: 10.	^ v2 inspect</body></methods><methods><class-id>Roassal2.RTDSM class</class-id> <category>examples</category><body package="Roassal2-Builder-DSM">example01	&lt;script: 'self example01 inspect'&gt;	| dsm |	dsm := RTDSM new.	dsm objects: RTShape withAllSubclasses.	dsm dependency: #dependentClasses.	^ dsm</body><body package="Roassal2-Builder-DSM">example02	&lt;script: 'self example02 inspect'&gt;	| dsm |	dsm := RTDSM new.	dsm objects: (1 to: 10).	dsm dependency: [ :aValue | aValue // 2 ].	^ dsm</body><body package="Roassal2-Builder-DSM">example03	&lt;script: 'self example03 inspect'&gt;	| values b |	values := (Array		with: (1 -&gt; #(A B C))		with: (2 -&gt; #(A C))		with: (3 -&gt; #(B))		with: (4 -&gt; #())) asDictionary.	b := RTDSM new.	b objectsX: #(A B C).	b objectsY: #(1 2 3 4).	b dependency: [ :v | values at: v ].	^ b</body><body package="Roassal2-Builder-DSM">example04Authorship	&lt;script: 'self example04Authorship inspect'&gt;	| classes classesToAuthors authors authorsToClasses b |	classes := RTShape withAllSubclasses.	classesToAuthors := (classes collect: [ :cls | cls -&gt; ((cls methods collect: #author) asSet sortedAs: #yourself ) ]) asDictionary.	authors := (classesToAuthors values flatCollect: #yourself )asSet sortedAs: #yourself.	authorsToClasses := (authors collect: [ :anAuthor | anAuthor -&gt; (classesToAuthors associations select: [ :as | as value includes: anAuthor ] thenCollect: #key) ] ) asDictionary.	b := RTDSM new.	b objectsX: classes.	b objectsY: authors.	b dependency: [ :author | authorsToClasses at: author ].	^ b</body></methods><methods><class-id>Roassal2.RTGradualDSM class</class-id> <category>examples</category><body package="Roassal2-Builder-DSM">example01	&lt;script: 'self example01 inspect'&gt;	| dsm values |	dsm := RTGradualDSM new.	values := (Array 		with: (1-&gt;#(2 3 1 5 6)) 		with: (2 -&gt; #(1 2 1 1 1 1 4))		with: (3 -&gt; #(1 2 5 3 2)) 		with: (4 -&gt; #(2 5 1)) 		with: (5 -&gt; #()) 		with: (6 -&gt; #(4)) ) asDictionary.	dsm objects: (1 to: 6).	dsm score: [ :assoc | (values at: assoc key) occurrencesOf: assoc value ].	^ dsm</body><body package="Roassal2-Builder-DSM">example02Authorship	&lt;script: 'self example02Authorship inspect'&gt;	| classes classesToAuthors authors authorsToClasses b |	classes := RTShape withAllSubclasses.	classesToAuthors := (classes collect: [ :cls | cls -&gt; ((cls methods collect: #author) asSet sortedAs: #yourself) ]) asDictionary.	authors := (classesToAuthors values flatCollect: #yourself) asSet sortedAs: #yourself.	authorsToClasses := (authors collect: [ :anAuthor | anAuthor -&gt; (classesToAuthors associations select: [ :as | as value includes: anAuthor ] thenCollect: #key) ]) asDictionary.	b := RTGradualDSM new.	b objectsX: classes.	b objectsY: authors.	b score: [ :assoc | (assoc value methods collect: #author) occurrencesOf: assoc key ].	^ b</body><body package="Roassal2-Builder-DSM">example03AuthorshipByTime	&lt;script: 'self example03AuthorshipByTime inspect'&gt;	| classes classesToAuthors authors authorsToClasses b intervalDays oldAge youngAge diff c |	classes := RTShape withAllSubclasses.	intervalDays := 100.	oldAge := (classes collect: #ageInDaysRounded) max.	youngAge := (classes collect: #ageInDaysRounded) min.		diff := oldAge - youngAge.		c := RTComposer new.	youngAge to: oldAge by: intervalDays do: [ :t |  		classesToAuthors := (classes collect: [ :cls | cls -&gt; (((cls methods select: [ :m | (t to: t + intervalDays) rangeIncludes: m ageInDaysRounded ]) collect: #author) asSet sortedAs: #yourself) ]) asDictionary.		authors := (classesToAuthors values flatCollect: #yourself) asSet sortedAs: #yourself.		authorsToClasses := (authors collect: [ :anAuthor | anAuthor -&gt; (classesToAuthors associations select: [ :as | as value includes: anAuthor ] thenCollect: #key) ]) asDictionary.		b := RTGradualDSM new.		b view: c view.		b objectsX: classes.		b objectsY: authors.		b score: [ :assoc | (assoc value methods collect: #author) occurrencesOf: assoc key ].		b build.		c group: t asString asSymbol.	].	c layout: (RTGridLayout new gapSize: 30).	youngAge to: oldAge by: intervalDays do: [ :t |  		c nameGroup: t asString asSymbol as: 'Time ', t asString ].	^ c view</body></methods><methods><class-id>Roassal2.RTElement</class-id> <category>*Roassal2GT-Spotter</category><body package="Roassal2-Core">spotterPreviewIn: aComposite	&lt;spotterPreview: 10&gt;	RTBlink unhighlightElements: self view elements.	RTBlink highlight: self.	aComposite addBrickBack: self view setUpCanvas buildMorph</body></methods><methods><class-id>Roassal2.TRApplicationModel class</class-id> <category>interface specs</category><body package="Roassal2-Visualworks">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #screenCenter #openType #advanced ) 			#label: 'Roassal2' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 518 163 1018 663 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #drawing 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 1024 8191 1024 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} #red ) 						#setSelectionForegroundColor: #(#{Graphics.ColorValue} #cyan ) 						#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 8191 4096 6143 ) ) 					#component: #drawing ) ) ) )</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="Roassal2-Visualworks">roassal2Small20x20	&lt;resource: #image&gt;	^ CachedImage on: (Roassal2.TRPlatform current formFromStream: self roassalImage64 readStream) asImage</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Roassal2-Visualworks">roassal2NewInspector	&lt;menuItem: 'Add roassal inspector to class...' icon: #roassal2Icon nameKey: nil 	menu: #(#menuBar #tools) position: 60.0&gt;		((ResourceInstallDialog new)		targetClass: nil;		selector: #roassalView;		resourceType: #roassal;		select) ifNotNil: [:definition|			Roassal2.Roassal2Inspector addInspectorTo: definition ].	^ self</body></methods><initialize><class-id>Roassal2.Color</class-id></initialize><initialize><class-id>Roassal2.RTCubeHelix</class-id></initialize><initialize><class-id>Roassal2.RTRDatasets</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>StatefullEvent</name><environment>UI</environment><super>UI.Event</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Events</category><attributes><package>Interface-Events</package></attributes></class><class><name>MouseEvent</name><environment>UI</environment><super>UI.StatefullEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y gx gy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Events</category><attributes><package>Interface-Events</package></attributes></class><class><name>Magnitude</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>Number</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Integer</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>SmallInteger</name><environment>Core</environment><super>Core.Integer</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars>minVal maxVal maxBits maxBytes </class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Collection</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>SequenceableCollection</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>ArrayedCollection</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>CharacterArray</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>ByteString</name><environment>Core</environment><super>Core.ByteEncodedString</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-String Support</category><attributes><package>Collections-String Support</package></attributes></class><class><name>Array</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class><class><name>Bag</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>Float</name><environment>Core</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Point</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>Fraction</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numerator denominator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Duration</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>period scale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Core</category><attributes><package>Magnitude-General</package></attributes></class><class><name>Stream</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private IOConstants.*			</imports><category>Collections-Streams</category><attributes><package>Collections-Streams</package></attributes></class><class><name>WriteStream</name><environment>Core</environment><super>Core.InternalStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Streams</category><attributes><package>Collections-Streams</package></attributes></class><class><name>Character</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>Text</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars>string runs </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>SimpleView</name><environment>UI</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>Set</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>tally </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>Dictionary</name><environment>Core</environment><super>Core.Set</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>Window</name><environment>Graphics</environment><super>Graphics.DisplaySurface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputOrigin creationOrigin sensor iconic windowType effectiveWindowType statusLineHeight allowsStatusLine mapped eventHandlers windowManager </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>UndefinedObject</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>WidgetSpec</name><environment>UI</environment><super>UI.NamedSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model callbacksSpec tabable helpText helpField </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>UILookPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>systemAttributes systemWidgetAttributes useSystemFontOnWidgets systemMenuAttributes </class-inst-vars><imports></imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><class><name>Time</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hours minutes seconds milliseconds partialNanosecond </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>BlockClosure</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method outerContext copiedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>KeyboardEvent</name><environment>UI</environment><super>UI.StatefullEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>keyCharacter metaState alternativeKeyCharacter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Events</category><attributes><package>Interface-Events</package></attributes></class><class><name>ManagedHandle</name><environment>CairoGraphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>handle errorCode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CairoGraphicsX</category><attributes><package>CairoGraphics</package></attributes></class><class><name>Surface</name><environment>CairoGraphics</environment><super>CairoGraphics.ManagedHandle</super><private>false</private><indexed-type>none</indexed-type><inst-vars>callbacks </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CairoGraphicsX</category><attributes><package>CairoGraphics</package></attributes></class><class><name>Announcer</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subscriptionRegistry </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Model-Observables</category><attributes><package>System-Announcements</package></attributes></class><class><name>Pixmap</name><environment>Graphics</environment><super>Graphics.UnmappableSurface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>CompiledMethod</name><environment>Kernel</environment><super>Kernel.CompiledMainBlock</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>mclass sourceCode </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>Menu</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>items groupSizes adornment selectionMemory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Menus</category><attributes><package>Interface-Menus</package></attributes></class><class><name>SubscriptionRegistry</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subscriptionClass classesAndSubscriptions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Announcements</category><attributes><package>System-Announcements</package></attributes></class><class><name>SimplePaint</name><environment>Graphics</environment><super>Graphics.Paint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Support</category><attributes><package>Graphics-Support</package></attributes></class><class><name>ColorValue</name><environment>Graphics</environment><super>Graphics.SimplePaint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>red green blue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Support</category><attributes><package>Graphics-Support</package></attributes></class><class><name>Date</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>day year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>OrderedCollection</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>firstIndex lastIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class><class><name>Inspector</name><environment>Tools.Trippy</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object container </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>Controller</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>PackageModel</name><environment>Store</environment><super>Store.PundleModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>models </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class><class><name>Random</name><environment>Core</environment><super>Core.Stream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>seed </inst-vars><class-inst-vars>defaultGeneratorClass </class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Timestamp</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>year month day hours minutes seconds milliseconds partialNanosecond </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>Interval</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>start stop step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class><class><name>FixedPoint</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numerator denominator scale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Rectangle</name><environment>Graphics</environment><super>Graphics.Geometric</super><private>false</private><indexed-type>none</indexed-type><inst-vars>origin corner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>ScreenGraphicsContext</name><environment>Graphics</environment><super>Graphics.GraphicsContext</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Support</category><attributes><package>Graphics-Support</package></attributes></class><class><name>Announcement</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Announcements</category><attributes><package>System-Announcements</package></attributes></class><class><name>Filename</name><environment>OS</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>osName publicName logicalName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Support</category><attributes><package>OS-Support</package></attributes></class><class><name>Path</name><environment>CairoGraphics</environment><super>CairoGraphics.ManagedHandle</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CairoGraphics</category><attributes><package>CairoGraphics</package></attributes></class><class><name>ScreenFont</name><environment>Graphics</environment><super>Graphics.DeviceFont</super><private>false</private><indexed-type>none</indexed-type><inst-vars>handle ascent descent widths name encoder defaultScanner fontDescription </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Fonts</category><attributes><package>Graphics-Fonts</package></attributes></class><class><name>Matrix</name><environment>CairoGraphics</environment><super>Core.UninterpretedBytes</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>CairoGraphics</package></attributes></class><class><name>Symbol</name><environment>Core</environment><super>Core.String</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>Behavior</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclass methodDict format subclasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>Double</name><environment>Core</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>ClassDescription</name><environment>Core</environment><super>Core.Behavior</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instanceVariables organization </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class></st-source>