<?xml version="1.0"?><st-source><!-- Name: Roassal2-DevNotice: Copyright (c) 2011-2017 ObjectProfile.com.Copyright (c) 2010 - 2011 Vanessa Pena, Alexandre BergelThis version of Roassal is distributed under the MIT License.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.BundleName: Roassal2-DevBundleStructure: a Store.BundleForParcelComment: Roassal2 tests and example view definitions.DevelopmentPrerequisites: #(#(#any 'Roassal2' '') #(#any 'SUnitToo' '') #(#any 'AT Profiling Core' '') #(#any 'Browser-BrowserUI' ''))Parcel: nilParcelName: Roassal2-DevPrerequisiteDescriptions: #(#(#name 'Roassal2' #componentType #bundle) #(#name 'SUnitToo' #componentType #package) #(#name 'AT Profiling Core' #componentType #package) #(#name 'Browser-BrowserUI' #componentType #package))PrerequisiteParcels: #(#('Roassal2' '') #('SUnitToo' '') #('AT Profiling Core' '') #('Browser-BrowserUI' '') #('AT Profiling Core' '') #('SUnit' ''))Version: 2.91Date: 8:18:56 AM June 23, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.3) of June 16, 2017 on June 23, 2017 at 8:18:56 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>RTAbstractExample</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTAbstractExample</class-id><body>I am the super class of all the roassal examples.Try to use this script to know the excecution of roassal examples | examples errors |examples := OrderedCollection new.errors := OrderedCollection new.(RTAbstractExample subclasses collect: #new) 	do: [ :example | 		example gtExamples do: [:met | | time builder |			time := DateAndTime now.			[builder := example perform: met selector.			(builder isKindOf: RTBuilder) 				ifTrue: [ builder build ].			time := DateAndTime now - time.			time &gt; (1 asDuration)				ifTrue: [ examples add: met-&gt;time ]			] on: Error do: [ errors add: met ] ] ]	displayingProgress: 'Running examples'.examples-&gt;errors</body></comment><class><name>RTTest</name><environment>Roassal2</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTShapeBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder shapes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common-Tests</package></attributes></class><class><name>RTSVGPathTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTHighlightElementsInViewTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions-Tests</package></attributes></class><class><name>RTMapBuilderExample</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map</category><attributes><package>Roassal2-Builder-Map-Examples</package></attributes></class><class><name>TRTest</name><environment>Roassal2</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><class><name>TRVisualTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visual window canvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Tests-Extentions</package></attributes></class><class><name>RTSVGExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTSVGExample</class-id><body>RTSVGExample new installTitle: 'Animated' 		code:		' 	| view randInt rand |	rand := Random new.	randInt := [ :n | (rand next * n) asInteger ].	view := RTView new.	RTSVGPath icons do: [ :icon |		|elem|		elem := (RTSVGPath new		path: (RTSVGPath perform: icon);		borderWidth: 0;		scale: 5;		fillColor: Color random) element.		elem @ RTDraggable.		view add: elem.		elem translateBy: (randInt value: 400) @ (randInt value: 400).		view addAnimation: (RTRotationMove angle: 100 during: (randInt value: 90) + 10 on: elem).	].	^ view	'</body></comment><class><name>RTDecoratedTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><comment><class-id>Roassal2.RTDecoratedTest</class-id><body>A RTDecoratedTest is a test class for testing the behavior of RTDecorated</body></comment><class><name>RTMondrianTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Mondrian</category><attributes><package>Roassal2-Builder-Mondrian-Tests</package></attributes></class><class><name>RTBezierLineTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTBoxPlotExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-BoxPlot</category><attributes><package>Roassal2-Builder-BoxPlot-Examples</package></attributes></class><comment><class-id>Roassal2.RTBoxPlotExample</class-id><body>RTBoxPlotExample new installTitle: 'BoxPlot1' 		code:		'| b createList r ds |r := Random new.createList := [ :size :d1 :d2 | (1 to: size) collect: [ :i | d1 + (r next * (d2-d1))] ].b := RTGrapher new.ds := RTBoxPlotDataSet new.	ds points: (createList value: 20 value: 0 value: 20).	b add: ds.b build.b view. '</body></comment><class><name>RTHorizontalTimelineDecoratorTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Timeline-Tests</category><attributes><package>Roassal2-Builder-Timeline-Tests</package></attributes></class><comment><class-id>Roassal2.RTHorizontalTimelineDecoratorTest</class-id><body>A RTHorizontalTimelineDecoratorTest is a test class for testing the behavior of RTHorizontalTimelineDecorator</body></comment><class><name>RTLegendBuilderExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Legend</category><attributes><package>Roassal2-Builder-Legend-Examples</package></attributes></class><comment><class-id>Roassal2.RTLegendBuilderExample</class-id><body>RTLegendBuilderExample new installTitle: 'OnDemand' 		code:		'| l lb |b := RTMondrian new.b shape rectangle	width: [ :c | c numberOfVariables * 5 ];	height: #numberOfMethods.b nodes: RTShape withAllSubclasses.b edges connectFrom: #superclass.b layout tree.b normalizer	normalizeColor: #numberOfLinesOfCode using: { Color black. Color red }.b build.lb := RTLegendBuilder new.lb onDemand.lb view: b view.lb addText: ''System complexity view''.lb addRectanglePolymetricWidth: ''number of methods'' height: ''Line of code'' box: ''a Pharo class''.lb build.^ b view'	</body></comment><class><name>RTVisibleTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTAMItemTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>item </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ApplicationMatrix</category><attributes><package>Roassal2-Builder-ApplicationMatrix-Tests</package></attributes></class><class><name>RTMenuBuilderExamples</name><environment>Roassal2</environment><super>Roassal2.RTBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Menu</category><attributes><package>Roassal2-Builder-Menu-Examples</package></attributes></class><class><name>TRArcShapeTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arc1 arc2 arc3 arc4 arc5 p1 p2 p3 p4 p5 p6 p7 p8 p1n p2n p3n p4n p5n p6n p7n p8n arcQ1 arcQ2 arcQ3 arcQ4 pR pB pL pT pQ1 pQ2 pQ3 pQ4 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><comment><class-id>Roassal2.TRArcShapeTest</class-id><body>A TRArcShapeTest is a test class for testing the behavior of TRArcShape</body></comment><class><name>RTQuadTreeTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nodes quad </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts-Tests</category><attributes><package>Roassal2-Layouts-Tests</package></attributes></class><comment><class-id>Roassal2.RTQuadTreeTest</class-id><body>A ROQuadTreeTest is xxxxxxxxx.Instance Variables	nodes:		&lt;Object&gt;	quad:		&lt;Object&gt;nodes	- xxxxxquad	- xxxxx</body></comment><class><name>RTCompoundElementTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTVerticalMultipleDataTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>d b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><class><name>RTEventForwarderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTExtensionTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><class><name>RTInteractionExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTInteractionExample</class-id><body>self new installTitle: 'GroupOfGroups' 		code:		'^ v'	</body></comment><class><name>RTGeneralExample</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTGeneralExample</class-id><body>This class contains some examples. These examples are not accessible from the World menu.</body></comment><class><name>RTLazyMetricNormalizerTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>n </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer-Tests</category><attributes><package>Roassal2-ColorNormalizer-Tests</package></attributes></class><class><name>RTSVGExporterTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG-Tests</package></attributes></class><class><name>RTSelectableTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectedElements view selectable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTExperimentalExampleTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental-Tests</package></attributes></class><class><name>RTPieBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-PieChart</category><attributes><package>Roassal2-Builder-PieChart-Tests</package></attributes></class><class><name>RTMondrianExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Mondrian</category><attributes><package>Roassal2-Builder-Mondrian-Examples</package></attributes></class><comment><class-id>Roassal2.RTMondrianExample</class-id><body>RTMondrianExample new installTitle: 'ClusterLayout' 		code:		'| b |b := RTMondrian new.b shape circle.b nodes: RTObject withAllSubclasses.b shape line color: (Color blue alpha: 0.4).b edges connectFrom: #superclass.b normalizer	objects: RTObject withAllSubclasses;	normalizeSize: #numberOfMethods min: 5 max: 30 using: [:value | (value + 1) ln ];	normalizeColor: #numberOfMethods using: {Color gray . Color blue. Color red } using: [ :value | (value + 1) ln ].	b layout cluster.b build.^ b'	</body></comment><class><name>RTMultipleDataTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>d </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><class><name>RTFocusElementTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-CircularMap</category><attributes><package>Roassal2-Builder-CircularMap-Tests</package></attributes></class><class><name>RTLineSegmentTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lineX lineY lineDiagonal lineX0 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint-Tests</category><attributes><package>Roassal2-AttachPoint-Tests</package></attributes></class><comment><class-id>Roassal2.RTLineSegmentTest</class-id><body>A RTLineSegmentTest is a test class for testing the behavior of RTLineSegment</body></comment><class><name>RTBitmapExamples</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><class><name>RTVerticalValuesDecoratorTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><class><name>RTElementTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTMetricNormalizerTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer-Tests</category><attributes><package>Roassal2-ColorNormalizer-Tests</package></attributes></class><class><name>RTExploraBuilderExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Explora</category><attributes><package>Roassal2-Builder-Explora-Examples</package></attributes></class><comment><class-id>Roassal2.RTExploraBuilderExample</class-id><body>A ROExploraBuilderExample is xxxxxxxxx.</body></comment><class><name>TRVIAnimatedPointTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pZero </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Viva</category><attributes><package>Roassal2-Trachel-Viva-Tests</package></attributes></class><class><name>TRBoxShapeTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>box </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><comment><class-id>Roassal2.TRBoxShapeTest</class-id><body>A TRBoxShapeTest is a test class for testing the behavior of TRBoxShape</body></comment><class><name>RTScrollBarBuilderExamples</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ScrollBar</category><attributes><package>Roassal2-Builder-ScrollBar-Examples</package></attributes></class><comment><class-id>Roassal2.RTScrollBarBuilderExamples</class-id><body>A RTScrollBarBuilderExamples shows some usable examples for the scroll bar.</body></comment><class><name>RTDynamicGrapherTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><class><name>RTMenuActivableTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTBezier3LineTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTBezier3LineTest</class-id><body>A RTBezier3LineTest is a test class for testing the behavior of RTBezier3Line</body></comment><class><name>RTNameCloudExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-NameCloud</category><attributes><package>Roassal2-Builder-NameCloud-Examples</package></attributes></class><comment><class-id>Roassal2.RTNameCloudExample</class-id><body>RTNameCloudExample new installTitle: 'SimpleExample' 		code:		'| b |b := RTNameCloud new 		addString: ''open		| v shape |		v := RTView new.		shape := RTLabel new height: [ :assoc | assoc value ]; text: #key.		v addAll: (shape elementsOn: table associations).		RTFlowLayout on: v elements.		v open''.b open.b  view canvas.		'	</body></comment><class><name>RTKiviatBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Kiviat</category><attributes><package>Roassal2-Builder-Kiviat-Tests</package></attributes></class><class><name>RTShapeTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTTextBuilderExamples</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TextBuilder</category><attributes><package>Roassal2-Builder-TextBuilder-Examples</package></attributes></class><comment><class-id>Roassal2.RTTextBuilderExamples</class-id><body>A RTTextBuilderExamples has examples of RTTextBuilder class.</body></comment><class><name>RTDominanceTreeLayoutTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts-Tests</category><attributes><package>Roassal2-Layouts-Tests</package></attributes></class><class><name>RTExtensibleLabelTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTStyledMultiLineTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTStyledMultiLineTest</class-id><body>A RTStyledMultiLineTest is a test class for testing the behavior of RTStyledMultiLine</body></comment><class><name>RTDynamicStackerGrapherExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Examples</category><attributes><package>Roassal2-Builder-Grapher-Examples-Examples</package></attributes></class><comment><class-id>Roassal2.RTDynamicStackerGrapherExample</class-id><body>RTDynamicStackerGrapherExample new installTitle: 'Basic' 		code:		'| b |b := RTDynamicStackedGrapher new.b numberOfBars: 10.b minY: -200; maxY: 200.b y: #yourself. b barShape color: (Color red alpha: 0.3).b view addMenu: ''+ 1'' callback: [ b add: 400 atRandom - 200 ].^ b view'	</body></comment><class><name>RTVerticalTickLineDecoratorTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators-Tests</category><attributes><package>Roassal2-Builder-Grapher-Decorators-Tests</package></attributes></class><class><name>RTDragAndDroppableTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTAxisAdaptedBuilderExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects minX maxX minY maxY margin xAxisConfiguration yAxisConfiguration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-AxisAdapted</category><attributes><package>Roassal2-Builder-AxisAdapted-Examples</package></attributes></class><class><name>RTInteractionBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common-Tests</package></attributes></class><class><name>RTStackBarPlotExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-StackBarPlot</category><attributes><package>Roassal2-Builder-StackBarPlot-Examples</package></attributes></class><comment><class-id>Roassal2.RTStackBarPlotExample</class-id><body>RTStackBarPlotExample new installTitle: 'SimpleWithDifferentColor' 		code:		'| b |b := RTStackBarPlot new.b interaction popupText.b colorPalette colors: { Color blue . Color gray . Color red }.b add: #(1 2 3 4 ).b add: #(4 3 2 1).b add: #(5 3 2 0).b barWidth: 200 height: 20.b open.^ b view canvas'	</body></comment><class><name>TRShapeTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><class><name>RTRotableViewTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>event v r </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions</category><attributes><package>Roassal2-Interactions-Tests</package></attributes></class><class><name>RTSBFadeInteractionExamples</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Sunburst</category><attributes><package>Roassal2-Builder-Sunburst-Examples</package></attributes></class><comment><class-id>Roassal2.RTSBFadeInteractionExamples</class-id><body>Just a class for examples</body></comment><class><name>RTRTShorterDistanceAttachPointTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>e1 e2 lineShape edge view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint-Tests</category><attributes><package>Roassal2-AttachPoint-Tests</package></attributes></class><class><name>RTDraggableViewTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTMondrianFrameTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Mondrian</category><attributes><package>Roassal2-Builder-Mondrian-Tests</package></attributes></class><class><name>RTMultiColoredLineTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTRoassal2ArchitectureTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><class><name>RTComposerExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Composer</category><attributes><package>Roassal2-Builder-Composer-Examples</package></attributes></class><comment><class-id>Roassal2.RTComposerExample</class-id><body>RTComposerExample new installTitle: 'ClassAnalysis' 		code:		'| classesToAnalyze c b b2 b3 b4 es |classesToAnalyze := TRShape withAllSubclasses.c := RTComposer new.c gap: 35."-------"b := RTGraphBuilder new.b view: c view.b nodes 	if: [ :cls | cls numberOfMethods &gt; 10 ];	color: Color red.b edges connectFrom: #superclass; useInLayout.b nodes color: Color gray.b global normalizeSize: #numberOfLinesOfCode min: 5 max: 15 using: #sqrt.b layout tree.b addAll: classesToAnalyze.b build.c propagateHighlight.c group: #hierarchy."-------"b2 := RTCharterBuilder new.b2 view: c view.b2 extent: 200 @ 150.b2 interaction popup.b2 shape rectangle size: 0.b2 points: classesToAnalyze.b2 allY: [ :cls | cls methods size ].b2 shape rectangle color: Color lightBlue.b2 stackX.b2 histogramBarWidth: 5.b2 axisX; axisYWithNumberOfTicks: 4.b2 build.c propagateHighlight.c group: #stat."-------"b3 := RTPieBuilder new.b3 view: c view.b3 interaction popup.b3 objects: classesToAnalyze.es := b3 slice: #numberOfLinesOfCode.b3 globalRule 		elements: es;		distinctColor.b3 build.c propagateHighlight.c group: #pie."-------"b4 := RTCharterBuilder new.b4 view: c view.b4 extent: 290 @ 200.b4 interaction popup.b4 shape ellipse size: 15; color: (Color red alpha: 0.3).b4 points: classesToAnalyze.b4 x: #numberOfMethods; y: #numberOfVariables min: 0 max: 10.b4 size: #numberOfLinesOfCode min: 4 max: 20 using: #sqrt.	b4 axisXWithNumberOfTicks: 3.b4 axisYWithNumberOfTicks: 4.b4 highlightIf: [ :cls | (cls numberOfLinesOfCode &gt; 2000) or: [ cls numberOfVariables &gt; 10 ] ] using: #name.c propagateHighlight.c group: #plot."-------"c move: #hierarchy onTheLeftOf: #pie.c move: #stat below: #hierarchy.c move: #plot below: #stat.c nameGroup: #hierarchy as: ''class hierarchy''.c nameGroup: #stat as: ''#methods''."c nameGroup: #pie as: ''#LOC''."c nameGroup: #plot as: ''NOM x NOA x LOC''.c open.c view canvas'	</body></comment><class><name>RTTimelineTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Timeline-Tests</category><attributes><package>Roassal2-Builder-Timeline-Tests</package></attributes></class><class><name>RTUMLClassBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-UML</category><attributes><package>Roassal2-Builder-UML-Tests</package></attributes></class><class><name>RTEdgeTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>el1 el2 edge </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTApplicationMatrixTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ApplicationMatrix</category><attributes><package>Roassal2-Builder-ApplicationMatrix-Tests</package></attributes></class><class><name>RTHTML5ExporterExample</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-HTML5</category><attributes><package>Roassal2-Exporter-HTML5-Examples</package></attributes></class><comment><class-id>Roassal2.RTHTML5ExporterExample</class-id><body>Examples of HTML exporter</body></comment><class><name>RTCellLayoutTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts-Tests</category><attributes><package>Roassal2-Layouts-Tests</package></attributes></class><class><name>RTShorterDistanceWithOffsetAttachPointTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view box1 box2 edgeBuilder line </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTAttachPointTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view el1 el2 edge shape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTBorderAttachPointTest</name><environment>Roassal2</environment><super>Roassal2.RTAttachPointTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attachPoint el </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTGrapherBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><class><name>RTGridViewTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTGridViewTest</class-id><body>A RTGridViewTest is a test class for testing the behavior of RTGridView</body></comment><class><name>RTComposedShapeExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTComposedShapeExample</class-id><body>RTComposedShapeExample new installTitle: 'Flags' 		code:		'v canvas'	</body></comment><class><name>RTSVGStringConverterTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG-Tests</package></attributes></class><class><name>RTConstraintTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shape2 shape1 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTIntrospectionTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-HTML5</category><attributes><package>Roassal2-Exporter-HTML5-Tests</package></attributes></class><class><name>RTMapLocationExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map</category><attributes><package>Roassal2-Builder-Map-Examples</package></attributes></class><comment><class-id>Roassal2.RTMapLocationExample</class-id><body>RTMapLocationExample new installTitle: 'SeismOnEarth' 		code:		'| b tab |tab := RTTabTable new input:  RTMapLocationBuilder new seismData2 usingDelimiter: $,.tab removeFirstRow.tab replaceEmptyValuesWith: ''0'' inColumns: #(2 3 4 5).tab convertColumnsAsFloat: #(2 3 4 5).b := RTMapLocationBuilder new.b shape circlesize: [ :v | (2 raisedTo: v) / 2 ];color: (Color red alpha: 0.3).tab values do: [ :row | b addPoint: row second @ row third value: row fifth ].b open.b view canvas'	</body></comment><class><name>RTTextBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TextBuilder</category><attributes><package>Roassal2-Builder-TextBuilder-Tests</package></attributes></class><class><name>TRMouseDraggingTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><class><name>RTAnimationExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTAnimationExample</class-id><body>RTAnimationExample new installTitle: 'Smooth' 		code:''	</body></comment><class><name>RTHorizontalTickLinePluginTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><class><name>RTShowEdgeTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTNormalizerTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer-Tests</category><attributes><package>Roassal2-ColorNormalizer-Tests</package></attributes></class><comment><class-id>Roassal2.RTNormalizerTest</class-id><body>A RONormalizerTest is xxxxxxxxx.</body></comment><class><name>RTSpectrographExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Spectrograph</category><attributes><package>Roassal2-Builder-Spectrograph-Examples</package></attributes></class><comment><class-id>Roassal2.RTSpectrographExample</class-id><body>RTSpectrographExample new installTitle: 'RoassalVisualization' 		code:		'| b now |	now := DateAndTime now.	b := RTSpectrograph new.	b objects: ((RTObject withAllSubclasses , TRObject withAllSubclasses) reverseSortedAs: #livingInDays).	b highlight: [ :cls :livingDay | cls inheritsFrom: TRObject ] color: Color lightGreen.	b highlight: [ :cls :livingDay | cls gotMethodOnDay: livingDay ].		b popupText: [ :cls :age | cls name, ''  '', age printString , '' days old'' ].	b lineBlock: [ :cls | 0 to: cls livingInDays ].		b open.	self halt.	b view canvas'	</body></comment><class><name>TRVIAnimatedValueTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Viva</category><attributes><package>Roassal2-Trachel-Viva-Tests</package></attributes></class><class><name>TRSVGPathTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><class><name>RTScrollPadBuilderExamples</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ScrollBar</category><attributes><package>Roassal2-Builder-ScrollBar-Examples</package></attributes></class><comment><class-id>Roassal2.RTScrollPadBuilderExamples</class-id><body>Give it a try, inspect the comments</body></comment><class><name>RTAbstractGrapherDecoratorTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><class><name>RTLabelTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTLayoutExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTLayoutExample</class-id><body>Example about layoutsRTLayoutExample new installTitle: 'ConditionaLayoutInMondrian' 		code:		'b := RTMondrian new.b shape rectangle	fillColor: Color white;	borderColor: Color lightGray;	withTextAbove: #name.b nodes: Collection withAllSubclasses forEach: [ :cls |	b nodes: cls methods.	b edges connectToAll: #dependentMethods.	b layout 		ifElement: #isConnected then: RTTreeLayout new;		else: RTGridLayout new. ].b edges connectFrom: #superclass.b layout tree.b build.^ b view'	</body></comment><class><name>RTArrowedLineTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTArrowedLineTest</class-id><body>A RTArrowedLineTest is a test class for testing the behavior of RTArrowedLine</body></comment><class><name>RTExperimentalExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Experimental</category><attributes><package>Roassal2-Experimental-Examples</package></attributes></class><comment><class-id>Roassal2.RTExperimentalExample</class-id><body>RTExperimentalExample new installTitle: 'BoxSelectionForEdges' 		code:		'| view lb |view := RTMondrianExample new exampleClassDependencies view.lb := RTLegendBuilder new.lb view: view.lb addText: '1 Right click on the view';	addText: '2 Select one option from the menu';	addText: '3 Move the new box';	addText: '4 Change the the size of the box with double click'.lb build.view  @ RTSelectionBox.view canvas camera 	noInitializationWhenOpen;	scale: 0.6;	translateTo: 72@1270.RTEmptyViewContext setOnView: view.^ view	'</body></comment><class><name>RTSimonTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Simon</category><attributes><package>Roassal2-Builder-Simon-Tests</package></attributes></class><class><name>RTConstrainedDraggableTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>TRVIManagedTimeExample</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Viva</category><attributes><package>Roassal2-Trachel-Viva-Examples</package></attributes></class><class><name>RTTimelineExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Timeline</category><attributes><package>Roassal2-Builder-Timeline-Examples</package></attributes></class><comment><class-id>Roassal2.RTTimelineExample</class-id><body>RTTimelineExample new installTitle: 'SimpleGantt2' 		code:		'| b s data |data := #(     #(WP1 0 4)      #(WP2 4 8)     #(WP3 8 12)         #(WP4 3 4)     #(WP4 7 9)     #(WP4 10 12)     ).b := RTTimeline new.s := RTTimelineSet new.s objects: data.s lineIdentifier: #first.s start: #second.s end: #third.b add: s.b axisX	noDecimal;	title: ''Month'';	numberOfLabels: 12.b build.^ b view'</body></comment><class><name>RTLayoutTranslatorTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts-Tests</category><attributes><package>Roassal2-Layouts-Tests</package></attributes></class><class><name>RTDraggableTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>v e1 e2 e3 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><comment><class-id>Roassal2.RTDraggableTest</class-id><body>A RTDraggableTest is a test class for testing the behavior of RTDraggable</body></comment><class><name>TRPolygonShapeTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><comment><class-id>Roassal2.TRPolygonShapeTest</class-id><body>A TRPolygonShapeTest is a test class for testing the behavior of TRPolygonShape</body></comment><class><name>RTExamplesBrowser</name><environment>Roassal2</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuExamples composite examples </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal2-Examples-Extentions</package></attributes></class><comment><class-id>Roassal2.RTExamplesBrowser</class-id><body>I am a simple example browser of Roassal2 examples</body></comment><class><name>RTPolyLineSegmentsTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><class><name>RTGrapherScatterplotExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Examples</category><attributes><package>Roassal2-Builder-Grapher-Examples-Examples</package></attributes></class><class><name>RTMultiLineTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>e1 e2 v </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTRangeBelowXAxisTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators-Tests</category><attributes><package>Roassal2-Builder-Grapher-Decorators-Tests</package></attributes></class><comment><class-id>Roassal2.RTRangeBelowXAxisTest</class-id><body>A RTRangeBelowXAxisTest is a test class for testing the behavior of RTRangeBelowXAxis</body></comment><class><name>RTSimpleArrowHeadTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTBucketColorTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer-Tests</category><attributes><package>Roassal2-ColorNormalizer-Tests</package></attributes></class><class><name>RTDSMExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-DSM</category><attributes><package>Roassal2-Builder-DSM-Examples</package></attributes></class><comment><class-id>Roassal2.RTDSMExample</class-id><body>RTDSMExample new installTitle: 'EvolutionDSM' 		code:'	| b option data labels input other |	option := #(collab gtinspector).	option := TRPlatform current dialogChooseFrom: option values: option.	option ifNil: [ ^ nil ].		data := RTTabTable new 		input: (RTDSMExample perform: option)		usingDelimiter: Character tab.	labels := data removeFirstRow.	input := Dictionary new.	other := Set new.	data values do: [ :line| | item timeline  | 		item := input at: (line second) ifAbsentPut: [ Dictionary new ].		other add: line third.		timeline := item at: line third ifAbsentPut: [ OrderedCollection new ].		timeline add: line first -&gt; line fourth asNumber. ].	b := RTEvolutionDSM new.	b objectsY: input keys.	b objectsX: other.	b timeline: [ :assoc | (input at: assoc key) at: assoc value ifAbsent: [ nil ] ].	b labelShape		height: 30;		color: Color blue.	b shape shape allShapes first size: 100.	b shape shape allShapes second		size: 100;		values: [ :assoc| 			assoc timeline 				ifNil:  [ nil ]				ifNotNil: [ :ob | ob collect: #value ] ].	b selectElement: [ :e| e model score notNil ].	b score: [ :assoc | assoc score ].	^ b 	'</body></comment><class><name>RTEdgeBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view elements b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common-Tests</package></attributes></class><class><name>RTDistributionTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Utility</category><attributes><package>Roassal2-Utility-Tests</package></attributes></class><comment><class-id>Roassal2.RTDistributionTest</class-id><body>A GETDistributionTest is a test class for testing the behavior of GETDistribution</body></comment><class><name>RTHighlightableTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>box </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTTreeMapTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TreeMap</category><attributes><package>Roassal2-Builder-TreeMap-Tests</package></attributes></class><class><name>TRCanvasExample</name><environment>Roassal2</environment><super>Roassal2.TRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Examples</category><attributes><package>Roassal2-Trachel-Examples-Examples</package></attributes></class><class><name>RTRectangleAttachPointTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>el elX elD edgeX edgeD </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint-Tests</category><attributes><package>Roassal2-AttachPoint-Tests</package></attributes></class><comment><class-id>Roassal2.RTRectangleAttachPointTest</class-id><body>A RTRectangleAttachPointTest is a test class for testing the behavior of RTRectangleAttachPoint</body></comment><class><name>RTSugiyamaLayoutTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts-Tests</category><attributes><package>Roassal2-Layouts-Tests</package></attributes></class><class><name>RTCollectionExtensionTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTMetricMapTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map-Tests</category><attributes><package>Roassal2-Builder-Map-Tests</package></attributes></class><class><name>RTEllipseTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTEllipseTest</class-id><body>A RTEllipseTest is a test class for testing the behavior of RTEllipse</body></comment><class><name>RTTreeMapExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TreeMap</category><attributes><package>Roassal2-Builder-TreeMap-Examples</package></attributes></class><comment><class-id>Roassal2.RTTreeMapExample</class-id><body>RTTreeMapExample new installTitle: 'FileSystem' 		code:		'| b color |b := RTTreeMapBuilder new.color := RTScale linear 	domain: { 0. 12000.};	range: { Color gray. Color red }.b shape	color: Color transparent;	borderColor: Color black;	if: [ :f | f isFile ] color: [ :f | color scale: f size sqrt ].b 	leafWeight: [:f | f size sqrt ]; 	explore: FileSystem disk workingDirectory	nesting: #directories	leaves: #files.b build.^ b view'	</body></comment><class><name>RTTabTableTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tab data </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Table</category><attributes><package>Roassal2-Table-Tests</package></attributes></class><class><name>RTShapedObjectTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTDSMTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-DSM</category><attributes><package>Roassal2-Builder-DSM-Tests</package></attributes></class><class><name>RTTreeMapExampleTODELETE</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-TreeMap</category><attributes><package>Roassal2-Builder-TreeMap-Examples</package></attributes></class><comment><class-id>Roassal2.RTTreeMapExampleTODELETE</class-id><body>Examples of RTTreeMap</body></comment><class><name>RTTreeLayoutTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts-Tests</category><attributes><package>Roassal2-Layouts-Tests</package></attributes></class><class><name>RTDoubleScrollBarTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-ScrollBar</category><attributes><package>Roassal2-Builder-ScrollBar-Tests</package></attributes></class><class><name>RTShowLabelTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>box view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTShowLabelTest</class-id><body>A RTShowLabelTest is a test class for testing the behavior of RTShowLabel</body></comment><class><name>RTLineDecorationExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTLineDecorationExample</class-id><body>RTLineDecorationExample new installTitle: 'Cool' 		code:		'	| v b1 b2 edges |	b1 := (RTBox new		size: 100;		element)		translateTo: 0 @ 0;		@ RTDraggable.	b2 := (RTBox new		size: 100;		element)		translateTo: 400 @ 0;		@ RTDraggable.	edges := OrderedCollection new.	edges add: ((RTArrowedLine new head: RTFilledDiamond asHead; color: Color black; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new color: Color blue; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new filledDiamondHead; color: Color green; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new filledDiamondHead; emptyCircleTail; color: Color red; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).v := RTView new	add: b1;	add: b2;	addAll: edges.edges do: [ :each | each update ].v'	</body></comment><class><name>RTSliderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>slider </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-UI-Slider</category><attributes><package>Roassal2-Builder-UI-Slider-Tests</package></attributes></class><class><name>RTNestTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTHTML5ExporterTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-HTML5</category><attributes><package>Roassal2-Exporter-HTML5-Tests</package></attributes></class><class><name>RTMapExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map</category><attributes><package>Roassal2-Builder-Map-Examples</package></attributes></class><comment><class-id>Roassal2.RTMapExample</class-id><body>RTMapExample new installTitle: 'ColoredAfrica03' 		code:		'					b := RTMapBuilder new.				countries := RTMapBuilder africanPopulation.	countriesName := countries collect: #first.	max := (countries collect: [ :c | c at: 2 ]) max.		cn := RTMultiLinearColor new		colors: (ColorPalette sequential colors: 8 scheme: ''GnBu'');		command: [ :aCountry | (countries detect: [ :c | c first = aCountry ]) second / max ].		b countries: countriesName.	b color: cn.	b scale: 2.	b build.	^ b view'	</body></comment><class><name>RTResizableTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Interactions-Resize-Tests</category><attributes><package>Roassal2-Interactions-Resize-Tests</package></attributes></class><comment><class-id>Roassal2.RTResizableTest</class-id><body>A RTResizableTest is a test class for testing the behavior of RTResizable</body></comment><class><name>TRCameraTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>camera canvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><class><name>RTRoassalExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTRoassalExample</class-id><body>RTRoassalExample new installTitle: 'GroupOfGroups' 		code:		'^ v'	</body></comment><class><name>RTDynamicStackedGrapherTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><comment><class-id>Roassal2.RTDynamicStackedGrapherTest</class-id><body>A RTDynamicStackedGrapherTest is a test class for testing the behavior of RTDynamicStackedGrapher</body></comment><class><name>RTInteractionTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view ui </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTNNormalizerTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer-Tests</category><attributes><package>Roassal2-ColorNormalizer-Tests</package></attributes></class><comment><class-id>Roassal2.RTNNormalizerTest</class-id><body>A RONormalizerTest is xxxxxxxxx.</body></comment><class><name>RTBundleExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-BundleEdge</category><attributes><package>Roassal2-Builder-BundleEdge-Examples</package></attributes></class><comment><class-id>Roassal2.RTBundleExample</class-id><body>RTBundleExample new installTitle: 'GroupOfGroups' 		code:		'^ v'	</body></comment><class><name>RTSparklineTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Sparkline</category><attributes><package>Roassal2-Sparkline-Tests</package></attributes></class><class><name>TRCallbackTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas circle1 circle2 rectangle1 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><class><name>RTShapeBuilderExample</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common-Examples</package></attributes></class><class><name>RTSparklineExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Sparkline</category><attributes><package>Roassal2-Sparkline-Examples</package></attributes></class><class><name>RTAxisConfigurationTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>config </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><class><name>RTGradientColoredLineTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTConstraintExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTConstraintExample</class-id><body>RTConstraintExample new installTitle: 'AboveTopOnLabel' 		code:		'| v b e |v := RTView new.e := RTLabel elementOn: ''Happiness''.b := (RTBox new size: 80; color: (Color blue alpha: 0.3)) element.v add: e; add: b.b @ RTDraggable.e @ RTDraggable.(RTConstraint child: e parent: b)	above;	top;	stick.^ v'	</body></comment><class><name>RTAbstractElasticBoxInteractionTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTAbstractElasticBoxInteractionTest</class-id><body>A RTAbstractElasticBoxInteractionTest is a test class for testing the behavior of RTAbstractElasticBoxInteraction</body></comment><class><name>RTAnimatedScatterPlotExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-AnimatedScatterPlot</category><attributes><package>Roassal2-Builder-AnimatedScatterPlot-Examples</package></attributes></class><comment><class-id>Roassal2.RTAnimatedScatterPlotExample</class-id><body>RTAnimatedScatterPlotExample new installTitle: 'EvolutionOfGraphET2'		code:		'| b |b := RTAnimatedScatterPlot new.b addName: ''Version 22 of GraphET2'' table: (RTTabTable new input:  ''GET2HorizontalBarDiagram	12	0	70	GET2AbstractLineDiagram	23	5	86	GET2AxisBuilderTest	8	0	54	GET2UnionDiagram	8	1	26	GET2VerticalLabelDecorator	3	0	10	GET2RegularLabelDecorator	12	2	51	GET2ModelLabelDecorator	8	2	31	GTScatterplot	5	1	51	GET2AbstractAxisBuilder	18	2	55	GET2Abstract2DDiagram	22	4	94	GET2SingleAxisDiagram	17	2	65	GET2Examples	64	0	48	GET2RegularTickDecorator	6	1	24	GET2AbstractAxisDecorator	10	1	64	GET2AbstractAxisStrategy	8	1	17	GET2OrdinaryLineDiagram	7	1	40	GET2TopDownAxisStrategy	3	0	11	GET2AbstractBarDiagram	11	2	34	GET2Distribution	8	1	41	GET2InteractionWrapper	9	1	33	GET2UnionDiagramTest	4	0	60	GTBuilderTest	3	0	38	GTHistogram	2	0	5	GET2BaseLineDecorator	2	0	10	GTAbstractBuilder	18	4	57	GTLine	3	0	19	GET2LineDiagram	19	3	94	GET2DiagramBuilder	19	2	55	GET2PieDiagramTest	2	0	22	GET2YAxisBuilder	2	0	15	GET2Scatterplot	7	1	38	GET2PieDiagram	9	2	35	GET2OldExamples	59	0	48	GET2XAxisBuilder	2	0	15	GET2LineDiagramTest	12	0	128	GET2CompositeDiagramTest	16	0	240	GET2VerticalBarDiagram	11	0	66	GET2BarDiagramTest	34	0	525	GET2AbstractDiagram	47	15	138	GET2TitleDecorator	2	0	14	GET2CompositeDiagram	18	1	70	GET2RotatedLabelDecorator	10	1	47	GET2Axis	29	10	71	GET2Version	4	2	13	DotaHero	8	4	21	GET2LeftRightAxisStrategy	3	0	11	GET2DataObject	8	3	24	'').b addName: ''Version 28 of GraphET2'' table: (RTTabTable new input: ''GET2HorizontalBarDiagram	12	0	71	GET2AbstractLineDiagram	21	5	82	GET2VerticalLabelDecorator	3	0	10	GET2UnionDiagram	8	1	26	GET2AbstractBuilder	26	11	85	GET2RegularLabelDecorator	12	2	51	GET2ModelLabelDecorator	8	2	31	GET2CatalogTest	1	0	10	GET2AbstractAxisBuilder	29	4	85	GET2SingleAxisDiagram	11	2	38	GET2Examples	69	0	48	GET2AbstractAxisBuilderTest	11	0	80	GET2RegularTickDecorator	6	1	24	GET2Line	10	5	44	GET2CatalogSample	10	2	29	GET2AbstractAxisDecorator	11	1	66	GET2AbstractAxisStrategy	8	1	17	GET2OrdinaryLineDiagram	8	1	43	GET2TopDownAxisStrategy	3	0	11	GET2AbstractBarDiagram	8	2	24	GET2InteractionBuilder	4	2	25	GET2Distribution	8	1	41	GET2InteractionWrapper	9	1	33	GET2UnionDiagramTest	4	0	60	GTBuilderTest	3	0	38	GET2ScatterplotDiagram	7	1	38	GET2BaseLineDecorator	2	0	10	GET2LineDiagram	17	3	85	GET2DiagramBuilder	19	2	55	GET2PieDiagramTest	2	0	22	GET2YAxisBuilder	4	0	11	GET2Scatterplot	5	1	51	GET2PieDiagram	9	2	35	GET2OldExamples	59	0	48	GET2XAxisBuilder	4	0	11	GET2LineDiagramTest	12	0	128	GET2Catalog	10	1	23	GET2CompositeDiagramTest	16	0	240	GET2Histogram	10	2	31	GET2VerticalBarDiagram	10	0	67	GET2BarDiagramTest	34	0	525	GET2AbstractDiagram	54	15	156	GET2TitleDecorator	2	0	14	GET2CompositeDiagram	16	1	66	GET2RotatedLabelDecorator	10	1	47	GET2Axis	33	10	85	GET2Version	4	2	13	DotaHero	8	4	21	GET2LeftRightAxisStrategy	3	0	11	GET2DataObject	8	3	24	'').b addName: ''Version 34 of GraphET2'' table: (RTTabTable new input: ''GET2CompositeBuilder	7	1	31	GET2HorizontalBarDiagram	12	0	72	GET2Builder	29	11	95	GET2AbstractLineDiagram	19	5	78	GET2Bar	10	2	31	GET2UnionDiagram	9	1	29	GET2VerticalLabelDecorator	3	0	10	GET2RegularLabelDecorator	12	2	51	GET2ModelLabelDecorator	8	2	32	GET2CatalogTest	1	0	10	GET2LabelDecorator	8	0	48	GET2SingleAxisDiagram	7	2	20	GET2Examples	73	0	48	GET2RegularTickDecorator	6	1	24	GET2Line	10	5	44	GET2CatalogSample	10	2	29	GET2AbstractAxisDecorator	9	2	38	GET2AbstractAxisStrategy	8	1	17	GET2OrdinaryLineDiagram	8	1	43	GET2TopDownAxisStrategy	3	0	11	GET2AbstractBarDiagram	8	2	24	GET2InteractionBuilder	4	2	25	GET2Distribution	8	1	41	GET2InteractionWrapper	9	1	33	GET2UnionDiagramTest	4	0	60	GTBuilderTest	3	0	38	GET2UnionBuilder	5	1	17	GET2AxisBuilder	39	7	109	GET2AxisBuilderTest	15	0	119	GET2LineDiagram	19	3	93	GET2BaseLineDecorator	2	0	10	GET2ScatterplotDiagram	7	1	38	GET2PieDiagramTest	2	0	22	GET2YAxisBuilder	4	0	11	GET2Scatterplot	5	1	52	GET2PieDiagram	9	2	37	GET2OldExamples	60	0	48	GET2XAxisBuilder	4	0	11	GET2DiagramBuilder	19	2	55	GET2LineDiagramTest	12	0	128	GET2Catalog	10	1	23	GET2CompositeDiagramTest	16	0	240	GET2VerticalBarDiagram	8	0	64	GET2BarDiagramTest	34	0	525	GET2AbstractDiagram	67	15	193	GET2TitleDecorator	2	0	14	GET2CompositeDiagram	14	1	62	GET2RotatedLabelDecorator	6	1	18	GET2Axis	36	10	91	GET2Version	4	2	13	DotaHero	8	4	21	GET2LeftRightAxisStrategy	3	0	11	GET2DataObject	8	3	24	'').b addName: ''Version 38 of GraphET2'' table: (RTTabTable new input:  ''GET2LabelDecorator	1	1	7	GET2VerticalBarDiagram	8	0	65	GET2SingleAxisDiagram	7	2	20	GET2PieDiagram	9	2	37	GET2HorizontalBarDiagram	12	0	72	GET2Line	10	5	44	GET2NumericLabelDecorator	15	3	55	GET2Axis	38	10	99	DotaHero	8	4	21	GET2LineDiagram	19	3	93	GET2TopDownAxisStrategy	3	0	11	GET2Scatterplot	5	1	52	GET2XAxisBuilder	4	0	11	GTBuilderTest	3	0	38	GET2Bar	10	2	31	GET2UnionDiagramTest	5	0	128	GET2AbstractLineDiagram	19	5	78	GET2DiagramBuilder	21	2	59	GET2InteractionBuilder	4	2	25	GET2AbstractBarDiagram	8	2	24	GET2AbstractAxisDecorator	19	2	84	GET2ObliqueLabelCreator	6	1	15	GET2HorizontalLabelCreator	1	0	7	GET2VerticalLabelCreator	2	0	7	GET2Version	4	2	13	GET2OldExamples	60	0	48	GET2BaseLineDecorator	2	0	10	GET2PieDiagramTest	2	0	22	GET2LineDiagramTest	12	0	131	GET2Catalog	10	1	23	GET2ModelLabelDecorator	8	2	33	GET2DataObject	8	3	24	GET2UnionDiagram	9	1	31	GET2BarDiagramTest	35	0	521	GET2OrdinaryLineDiagram	8	1	43	GET2ScatterplotDiagram	7	1	38	GET2Builder	32	12	104	GET2Distribution	8	1	41	GET2AbstractAxisStrategy	8	1	17	GET2CatalogSample	10	2	29	GET2CompositeDiagram	14	1	64	GET2AxisBuilder	45	9	137	GET2YAxisBuilder	4	0	11	GET2CompositeDiagramTest	16	0	240	GET2AbstractDiagram	69	16	202	GET2UnionBuilder	5	1	17	GET2LabelCreator	6	0	7	GET2Examples	72	0	48	GET2RegularTickDecorator	7	1	30	GET2InteractionWrapper	9	1	33	GET2LeftRightAxisStrategy	3	0	11	GET2CompositeBuilder	7	1	31	GET2AxisBuilderTest	16	0	124	GET2TitleDecorator	3	0	20	'').b addName: ''Version 42 of GraphET2'' table: (RTTabTable new input:  ''GET2LabelDecorator	1	0	7	GET2VerticalBarDiagram	8	0	65	GET2SingleAxisDiagram	7	2	20	GET2PieDiagram	9	2	37	GET2HorizontalBarDiagram	12	0	72	GET2Line	10	5	49	GET2CompositeBuilderTest	11	0	150	GET2NumericLabelDecorator	14	3	53	GET2Axis	40	10	105	DotaHero	8	4	21	GET2LineDiagram	19	3	93	GET2TopDownAxisStrategy	3	0	11	GET2Scatterplot	5	1	53	GET2XAxisBuilder	4	0	11	GTBuilderTest	3	0	45	GET2Bar	10	2	31	GET2BackgroundLinesDecorator	11	2	42	GET2AbstractLineDiagram	19	5	78	GET2UnionDiagramTest	5	0	128	GET2InteractionBuilder	4	2	25	GET2AbstractBarDiagram	8	2	24	GET2AbstractAxisDecorator	20	4	88	GET2ObliqueLabelCreator	6	1	15	GET2HorizontalLabelCreator	1	0	7	GET2VerticalLabelCreator	2	0	7	GET2Version	4	2	13	GET2OldExamples	60	0	48	GET2BaseLineDecorator	2	0	10	GET2PieDiagramTest	2	0	22	GET2LineDiagramTest	12	0	131	GET2Catalog	10	1	23	GET2DiagramBuilder	21	2	59	GET2ModelLabelDecorator	5	1	27	GET2DataObject	8	3	24	GET2UnionDiagram	9	1	31	GET2BarDiagramTest	35	0	521	GET2OrdinaryLineDiagram	8	1	43	GET2ScatterplotDiagram	7	1	38	GET2Builder	30	12	112	GET2Distribution	8	1	41	GET2AbstractAxisStrategy	8	1	17	GET2CatalogSample	10	2	29	GET2CompositeDiagram	14	1	65	GET2AxisBuilder	50	11	151	GET2YAxisBuilder	4	0	11	GET2CompositeDiagramTest	17	0	252	GET2AbstractDiagram	70	16	205	GET2UnionBuilder	5	1	18	GET2LabelCreator	6	0	7	GET2Examples	73	0	48	GET2RegularTickDecorator	6	1	24	GET2InteractionWrapper	9	1	33	GET2LeftRightAxisStrategy	3	0	11	GET2CompositeBuilder	6	1	31	GET2AxisBuilderTest	16	0	124	GET2TitleDecorator	3	0	20	'').b addName: ''Version 45 of GraphET2'' table: (RTTabTable new input:  ''GET2LabelDecorator	1	0	7	GET2VerticalBarDiagram	8	0	65	GET2SingleAxisDiagram	7	2	20	GET2PieDiagram	9	2	37	GET2HorizontalBarDiagram	12	0	72	GET2Line	10	5	49	GET2CompositeBuilderTest	11	0	150	GET2NumericLabelDecorator	18	3	90	GET2Axis	40	10	105	DotaHero	8	4	21	GET2LineDiagram	19	3	93	GET2TopDownAxisStrategy	3	0	11	GET2Scatterplot	5	1	53	GET2XAxisBuilder	4	0	11	GTBuilderTest	3	0	45	GET2Bar	10	2	37	GET2BackgroundLinesDecorator	11	2	42	GET2AbstractLineDiagram	19	5	78	GET2UnionDiagramTest	5	0	128	GET2InteractionBuilder	4	2	25	GET2AbstractBarDiagram	8	2	24	GET2AbstractAxisDecorator	20	4	88	GET2ObliqueLabelCreator	6	1	15	GET2HorizontalLabelCreator	1	0	7	GET2VerticalLabelCreator	2	0	7	GET2Version	4	2	13	GET2OldExamples	60	0	48	GET2BaseLineDecorator	2	0	10	GET2PieDiagramTest	2	0	22	GET2LineDiagramTest	12	0	131	GET2Catalog	10	1	23	GET2DiagramBuilder	21	2	59	GET2ModelLabelDecorator	5	1	27	GET2DataObject	8	3	24	GET2UnionDiagram	9	1	31	GET2BarDiagramTest	35	0	521	GET2OrdinaryLineDiagram	8	1	43	GET2ScatterplotDiagram	7	1	38	GET2Builder	30	12	112	GET2Distribution	8	1	41	GET2AbstractAxisStrategy	8	1	17	GET2CatalogSample	10	2	29	GET2CompositeDiagram	14	1	65	GET2AxisBuilder	50	11	151	GET2YAxisBuilder	4	0	11	GET2CompositeDiagramTest	17	0	252	GET2AbstractDiagram	70	16	205	GET2UnionBuilder	5	1	18	GET2LabelCreator	6	0	7	GET2Examples	73	0	48	GET2RegularTickDecorator	6	1	24	GET2InteractionWrapper	9	1	33	GET2LeftRightAxisStrategy	3	0	11	GET2CompositeBuilder	6	1	31	GET2AxisBuilderTest	16	0	124	GET2TitleDecorator	3	0	20	'').b addName: ''Version 47 of GraphET2'' table: (RTTabTable new input:  ''GET2Axis	40	10	105	GET2TopDownAxisStrategy	3	0	11	GET2ModelLabelDecorator	5	1	27	GET2YAxisBuilder	4	0	11	GET2Line	10	5	49	GET2Version	4	2	13	GTBuilderTest	4	0	51	GET2SingleAxisDiagram	7	2	20	GET2HorizontalLabelCreator	1	0	7	GET2BarDiagramTest	35	0	521	GET2AxisBuilderTest	16	0	124	GET2Scatterplot	5	1	53	GET2AbstractBarDiagram	8	2	24	GET2AxisBuilder	50	11	151	GET2RegularTickDecorator	6	1	24	GET2LabelCreator	6	0	7	DotaHero	8	4	21	GET2AbstractLineDiagram	19	5	78	GET2InteractionWrapper	9	1	33	GET2LineDiagram	19	3	93	GET2OldExamples	60	0	48	GET2DataObject	8	3	24	GET2CompositeDiagramTest	17	0	252	GET2Distribution	8	1	41	GET2Table	28	2	100	GET2XAxisBuilder	4	0	11	GET2InteractionBuilder	4	2	25	GET2Examples	73	0	48	GET2ObliqueLabelCreator	6	1	15	GET2Bar	5	1	14	GET2VerticalLabelCreator	2	0	7	GET2PieDiagramTest	2	0	22	GET2LeftRightAxisStrategy	3	0	11	GET2BackgroundLinesDecorator	11	2	42	GET2LineDiagramTest	12	0	131	GET2AbstractDiagram	70	16	205	GET2AbstractAxisStrategy	8	1	17	GET2UnionDiagram	9	1	31	GET2UnionDiagramTest	5	0	128	GET2HorizontalBar	2	0	15	GET2Builder	30	12	115	GET2OrdinaryLineDiagram	8	1	43	GET2VerticalBar	2	0	15	GET2PieDiagram	9	2	37	GET2NumericLabelDecorator	18	3	92	GET2LabelDecorator	1	0	7	GET2CompositeBuilder	6	1	31	GET2UnionBuilder	5	1	18	GET2VerticalBarDiagram	8	0	65	GET2HorizontalBarDiagram	12	0	72	GET2AbstractAxisDecorator	20	4	88	GET2BaseLineDecorator	2	0	10	GET2CatalogSample	10	2	29	GET2ScatterplotDiagram	7	1	38	GET2Catalog	10	1	23	GET2DiagramBuilder	21	2	59	GET2CompositeDiagram	14	1	65	GET2CompositeBuilderTest	11	0	150	GET2TitleDecorator	3	0	20	'').b x: #second.b y: #third.b size: #fourth.b if: [ :row | row first endsWith: ''Test'' ] color: Color green.b if: [ :row | row first endsWith: ''Decorator'' ] color: Color blue.b if: [ :row | row first endsWith: ''Diagram'' ] color: Color red.b open."b build.b view "b view canvas'	</body></comment><class><name>RTLineTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTExploraBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Explora</category><attributes><package>Roassal2-Builder-Explora-Tests</package></attributes></class><comment><class-id>Roassal2.RTExploraBuilderTest</class-id><body>A ROExploraBuilderTest is xxxxxxxxx.Instance Variables	builder:		&lt;Object&gt;builder	- xxxxx</body></comment><class><name>RTBlinkTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTNameCloudTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-NameCloud</category><attributes><package>Roassal2-Builder-NameCloud-Tests</package></attributes></class><class><name>RTSunburstBuilderExamples</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Sunburst</category><attributes><package>Roassal2-Builder-Sunburst-Examples</package></attributes></class><comment><class-id>Roassal2.RTSunburstBuilderExamples</class-id><body>RTSunburstBuilderExamples new installTitle: 'basic15' 		code:		'	| b |	b := RTSunburstBuilder new.	b strategy: (RTSunburstExtentStrategy new extent: 800@800).	b shape colorElement: [ :el | el model subclasses isEmpty ifTrue: [ Color purple ] ifFalse: [ Color lightGray ] ].	b explore: Morph using: #subclasses.	b view @ RTDraggableView.	b build.	^ b view'	</body></comment><class><name>RTCircleLayoutTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts-Tests</category><attributes><package>Roassal2-Layouts-Tests</package></attributes></class><class><name>TREllipseShapeTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><comment><class-id>Roassal2.TREllipseShapeTest</class-id><body>A TREllipseShapeTest is a test class for testing the behavior of TREllipseShape</body></comment><class><name>RTComposerTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>composer view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Composer</category><attributes><package>Roassal2-Builder-Composer-Tests</package></attributes></class><class><name>RTUnoptimizedComposerTest</name><environment>Roassal2</environment><super>Roassal2.RTComposerTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Composer</category><attributes><package>Roassal2-Builder-Composer-Tests</package></attributes></class><class><name>RTExampleBrowser</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>exampleView method theView </inst-vars><class-inst-vars></class-inst-vars><imports>			Roassal2.*			</imports><category></category><attributes><package>Roassal2-Examples-Extentions</package></attributes></class><comment><class-id>RTExampleBrowser</class-id><body>I am the browser of just one example</body></comment><class><name>RTForceBasedLayoutTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTForceBasedLayoutTest</class-id><body>A RTForceBasedLayoutTest is a test class for testing the behavior of RTForceBasedLayout</body></comment><class><name>RTDataTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><class><name>RTRotatedLabelTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTSpectrographTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Spectrograph</category><attributes><package>Roassal2-Builder-Spectrograph-Tests</package></attributes></class><class><name>RTCubeHelixTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer-Tests</category><attributes><package>Roassal2-ColorNormalizer-Tests</package></attributes></class><class><name>RTUMLExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-UML</category><attributes><package>Roassal2-Builder-UML-Examples</package></attributes></class><comment><class-id>Roassal2.RTUMLExample</class-id><body>RTUMLExample new installTitle: 'BlackColor' 		code:		'| b |b := RTUMLClassBuilder new   instanceVariables: #instVarNames;   methodselector: #selector;	methodsNames: #methods;	attributeselector: #yourself.b attributeShape color: Color black.b methodShape color: Color black.b classNameShape color: Color black.b lineShape color: Color black.b boxShape borderColor: Color black.b addObjects: (TRAbstractArrowHeadShape withAllSubclasses ).b layout tree.b build.^b view'</body></comment><class><name>RTOrderedCollectionTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Utility</category><attributes><package>Roassal2-Utility-Tests</package></attributes></class><class><name>RTAnimationTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTCircularTreeMapTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-CircularMap</category><attributes><package>Roassal2-Builder-CircularMap-Tests</package></attributes></class><class><name>RTDepMatrixExample</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-StructureMatrix</category><attributes><package>Roassal2-Builder-StructureMatrix-Examples</package></attributes></class><class><name>RTConditionalLayoutTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts-Tests</category><attributes><package>Roassal2-Layouts-Tests</package></attributes></class><comment><class-id>Roassal2.RTConditionalLayoutTest</class-id><body>A RTConditionalLayoutTest is a test class for testing the behavior of RTConditionalLayout</body></comment><class><name>RTSpringLayoutSteppingTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTSunburstBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTSunburstBuilderTest</class-id><body>A RTSunburstBuilderTest is a test class for testing the behavior of RTSunburstBuilder</body></comment><class><name>RTGrapherExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Examples</category><attributes><package>Roassal2-Builder-Grapher-Examples-Examples</package></attributes></class><comment><class-id>Roassal2.RTGrapherExample</class-id><body>RTGrapherDecorationExample new installTitle: 'RangeBelowXAxis' 		code:		'	| b d |	b := RTGrapher new.	d := RTData new.	d points: (1 to: 5).	d y: #yourself.	b add: d.	b addDecorator: (RTRangeBelowXAxis new startValue: 2.5; endValue: 4; label: ''A'').	b addDecorator: (RTRangeBelowXAxis new startValue: 0; endValue: 2; label: ''B'').	^ b'	</body></comment><class><name>RTAbstractLineDecorationTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>from to </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-LineDecorations</category><attributes><package>Roassal2-LineDecorations-Tests</package></attributes></class><comment><class-id>Roassal2.RTAbstractLineDecorationTest</class-id><body>A DCRTAbstractLineDecorationTest is a test class for testing the behavior of DCRTAbstractLineDecoration</body></comment><class><name>RTCompositeShapeTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTExampleOpeningEvent</name><environment>Roassal2</environment><super>Core.Announcement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>theClass theSelector time </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTExampleOpeningEvent</class-id><body>RTExampleOpeningEvent  is an event that is trigger when someone browse an example</body></comment><class><name>RTHorizontalTreeLayoutTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts-Tests</category><attributes><package>Roassal2-Layouts-Tests</package></attributes></class><class><name>RTAlignmentTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>align </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTAnimatedScatterPlotTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-AnimatedScatterPlot</category><attributes><package>Roassal2-Builder-AnimatedScatterPlot-Tests</package></attributes></class><class><name>RTMultiLinearColorForIdentityTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTMultiLinearColorForIdentityTest</class-id><body>A RTMultiLinearColorForIdentityTest is a test class for testing the behavior of RTMultiLinearColorForIdentity</body></comment><class><name>RTColorPaletteExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTColorPaletteExample</class-id><body>RTColorPaletteExample new installTitle: 'DivergingPalette' 		code:		'CPDiverging show canvas'	</body></comment><class><name>RTDoubleSliderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-UI-Slider</category><attributes><package>Roassal2-Builder-UI-Slider-Tests</package></attributes></class><comment><class-id>Roassal2.RTDoubleSliderTest</class-id><body>Tests for class RTDoubleSlider</body></comment><class><name>RTPopupTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view popup </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><comment><class-id>Roassal2.RTPopupTest</class-id><body>A ROAbstractPopupTest is xxxxxxxxx.Instance Variables	popup:		&lt;Object&gt;	view:		&lt;Object&gt;popup	- xxxxxview	- xxxxx</body></comment><class><name>RTTimelineSetTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Timeline-Tests</category><attributes><package>Roassal2-Builder-Timeline-Tests</package></attributes></class><comment><class-id>Roassal2.RTTimelineSetTest</class-id><body>A RTTimeLineSetTest is a test class for testing the behavior of RTTimeLineSet</body></comment><class><name>RTSelectionExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Selection</category><attributes><package>Roassal2-Selection-Examples</package></attributes></class><comment><class-id>Roassal2.RTSelectionExample</class-id><body>RTSelectionExample new installTitle: 'ElasticBoxZoom' 		code:'| v |v := RTGrapherExample new exampleDeviation.v @ RTZoomableBoxView.v'	</body></comment><class><name>RTStackBarPlotTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-StackBarPlot</category><attributes><package>Roassal2-Builder-StackBarPlot-Tests</package></attributes></class><class><name>RTKiviatFruitExample</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arr color name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Kiviat</category><attributes><package>Roassal2-Builder-Kiviat-Examples</package></attributes></class><comment><class-id>Roassal2.RTKiviatFruitExample</class-id><body>I am a utility class for and example of KiviatBuilder</body></comment><class><name>TRConstraintTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element1 element2 view canvas shape1 shape2 originShape conformingShape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><comment><class-id>Roassal2.TRConstraintTest</class-id><body>A ROConstraintTest is xxxxxxxxx.Instance Variables	element1:		&lt;Object&gt;	element2:		&lt;Object&gt;	view:		&lt;Object&gt;element1	- xxxxxelement2	- xxxxxview	- xxxxx</body></comment><class><name>RTMultiCompositeShapeTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTDynamicEqualizerGrapherTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><comment><class-id>Roassal2.RTDynamicEqualizerGrapherTest</class-id><body>A RTDynamicEqualizerGrapherTest is a test class for testing the behavior of RTDynamicEqualizerGrapher</body></comment><class><name>RTResizeTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements resize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTGrapherDecorationExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Examples</category><attributes><package>Roassal2-Builder-Grapher-Examples-Examples</package></attributes></class><class><name>RTColorPaletteTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer-Tests</category><attributes><package>Roassal2-ColorNormalizer-Tests</package></attributes></class><class><name>RTPieExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-PieChart</category><attributes><package>Roassal2-Builder-PieChart-Examples</package></attributes></class><comment><class-id>Roassal2.RTPieExample</class-id><body>RTPieExample new installTitle: 'GroupOfGroups' 		code:		'v canvas'	</body></comment><class><name>RTLabelledTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>TRCompositeShapeTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>emptyShape multiShape box1 box2 canvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><class><name>RTLayoutBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common-Tests</package></attributes></class><class><name>RTCalendarExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Calendar</category><attributes><package>Roassal2-Builder-Calendar-Examples</package></attributes></class><comment><class-id>Roassal2.RTCalendarExample</class-id><body>RTCalendarExample new installTitle: 'VisualizationCSV' 		code:'| b tab colors dictionary |tab := RTTabTable new input: ''http://bl.ocks.org/mbostock/raw/4063318/dji.csv'' asUrl retrieveContents usingDelimiter: $,.tab removeFirstRow.dictionary := Dictionary new.tab values do: [ :ar | | value |	value := (ar fifth asNumber - ar second asNumber)/ ar second asNumber.	dictionary at: ar first asDate put: value ].colors := #(#(165 0 38) #(215 48 38) #(244 109 67)	#(253 174 97) #(254 224 139) #(255 255 191) #(217 239 139)	 #(166 217 106) #(102 189 99) #(26 152 80) #(0 104 55)  ) collect: [ :ar| Color r: ar first g: ar second b: ar third range: 255 ].b := RTCalendarBuilder new.b dateShape rectangle size: 15; color: Color white; borderColor: Color lightGray.b monthShape shape: (b monthShapePath: 15.0).b yearShape composite: [ :comp | 	comp add: (RTLabel new text: [ :d | d year ]; height: 20 ).	comp add: (RTBox new color: Color transparent). ] .b dates: ((Year year: 1990) to: (Year year: 2010) ).b dateLayout gapSize: 0.b monthLayout month.b yearLayout horizontalLine.b dateShape if: [ :d | dictionary includesKey: d ] color: 	[ :d | | value index |	value := (dictionary at: d)+0.05.	index := (value * 11/ 0.1)+1.	index &lt; 1 ifTrue: [ index := 1 ].	index &gt; 11 ifTrue: [ index := 11 ].	colors at: index. ].b dateInteraction popup.b build.(b view elements select: [:e | e model isKindOf: Month]) pushFront.^ b view'	</body></comment><class><name>RTGrapherTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><class><name>RTCircleGeometryTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>circle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-AttachPoint-Tests</category><attributes><package>Roassal2-AttachPoint-Tests</package></attributes></class><class><name>RTGradientColoredLineExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ExampleBrowser</category><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></class><comment><class-id>Roassal2.RTGradientColoredLineExample</class-id><body>RTGradientColoredLineExample new installTitle: 'Dependencies' 		code:		'| eb |v := RTView new.es := RTEllipse new elementsOn: RTShape withAllSubclasses, TRShape withAllSubclasses.v addAll: es.es @ RTDraggable.es @ RTPopup.eb := RTEdgeBuilder new.eb view: v.eb shape line color: Color black.eb objects: RTShape withAllSubclasses from: #yourself toAll: #dependentClasses.RTMetricNormalizer new	elements: es;	normalizeSize: #numberOfLinesOfCode min: 10  max: 30;	normalizeColor: #numberOfMethods using: {Color green . Color red} using: #sqrt;	alphaColor: 0.5.RTForceBasedLayout new charge: -300; on: es.v edgesDo: #remove.eb := RTEdgeBuilder new.eb view: v.eb shape gradientLineFrom: Color green to: Color white.eb objects: RTShape withAllSubclasses, TRShape withAllSubclasses from: #yourself to: #superclass.v open.v canvas.'</body></comment><class><name>RTLabelGeneratorTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nice lg </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTLabelGeneratorTest</class-id><body>A RTLabelGeneratorTest is a test class for testing the behavior of RTLabelGenerator</body></comment><class><name>RTMapBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Map-Tests</category><attributes><package>Roassal2-Builder-Map-Tests</package></attributes></class><class><name>RTLayoutTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTLegendBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Legend</category><attributes><package>Roassal2-Builder-Legend-Tests</package></attributes></class><class><name>RTMultiLinearColorTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-ColorNormalizer-Tests</category><attributes><package>Roassal2-ColorNormalizer-Tests</package></attributes></class><class><name>RTCircularTreeMapExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-CircularMap</category><attributes><package>Roassal2-Builder-CircularMap-Examples</package></attributes></class><comment><class-id>Roassal2.RTCircularTreeMapExample</class-id><body>RTCircularTreeMapExample new installTitle: 'FileSystem' 		code:		'| b color |b := RTCircularTreeMapBuilder new.color := RTScale linear 	domain: { 0. 12000.};	range: { Color gray. Color red }.b shape	color: Color transparent;	borderColor: Color black;	if: [ :f | f isFile ] color: [ :f | color scale: f size sqrt ].b 	leafWeight: [:f | f size sqrt ]; 	explore: FileSystem disk workingDirectory	nesting: #directories	leaves: #files.b build.^ b view'	</body></comment><class><name>RTPNGExporterTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>emptyExporter view exporter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-PNG</category><attributes><package>Roassal2-Exporter-PNG-Tests</package></attributes></class><class><name>TRCanvasTest</name><environment>Roassal2</environment><super>Roassal2.TRTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Tests</category><attributes><package>Roassal2-Trachel-Tests</package></attributes></class><class><name>RTOptimizedForceBasedLayoutTest</name><environment>Roassal2</environment><super>Roassal2.RTForceBasedLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><class><name>RTSVGExporterExample</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Exporter-SVG</category><attributes><package>Roassal2-Exporter-SVG-Examples</package></attributes></class><comment><class-id>Roassal2.RTSVGExporterExample</class-id><body>A RTSVGExporterExample is the example class for RTSVGExporter.</body></comment><class><name>RTDoubleGrapherBuilderTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Tests</category><attributes><package>Roassal2-Builder-Grapher-Tests</package></attributes></class><class><name>RTPolygonTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTCacheTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Cachetor</category><attributes><package>Roassal2-Cachetor-Tests</package></attributes></class><class><name>RTKiviatBuilderExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Kiviat</category><attributes><package>Roassal2-Builder-Kiviat-Examples</package></attributes></class><comment><class-id>Roassal2.RTKiviatBuilderExample</class-id><body>RTKiviatBuilderExample new installTitle: 'Colored3' 		code:		'	| b myKiviatNodesElems m col |	b := RTKiviatBuilder new.	b objects: RTAbstractCircleLayout withAllSubclasses.	b addMetric: #numberOfLinesOfCode.	b addMetric: #numberOfMethods.	b addMetric: #numberOfVariables.	b open.	myKiviatNodesElems := (b view elements select: [ :e | (e model isKindOf: RTKiviatElement)]).	b objects do: [:o | m:= myKiviatNodesElems select: [ :e | (e model named name= o name)]. col := 	(Color random alpha: 0.6). m do: [:e | e color: col]].	b build.	b '</body></comment><class><name>RTScaleTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Scaling-Tests</category><attributes><package>Roassal2-Builder-Grapher-Scaling-Tests</package></attributes></class><class><name>RTExpandableTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTSimonExample</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Simon</category><attributes><package>Roassal2-Builder-Simon-Examples</package></attributes></class><class><name>RTGridLayoutTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Layouts-Tests</category><attributes><package>Roassal2-Layouts-Tests</package></attributes></class><class><name>RTViewTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><class><name>RTSVGVisitor2Test</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visitor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Tests</category><attributes><package>Roassal2-Tests</package></attributes></class><comment><class-id>Roassal2.RTSVGVisitor2Test</class-id><body>I am a simple test class for RTSVGVisitor2</body></comment><class><name>RTGrapherBarChartExample</name><environment>Roassal2</environment><super>Roassal2.RTAbstractExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Examples</category><attributes><package>Roassal2-Builder-Grapher-Examples-Examples</package></attributes></class><comment><class-id>Roassal2.RTGrapherBarChartExample</class-id><body>RTGrapherDecorationExample new installTitle: 'LikertScale' 		code:		'| q11 q12 q21 q22 q3 t toVisualize b ds lb |q11 := #(A A SA SA A SA N A A SA N) groupedBy: #yourself. q12 := #(D SA SA SA A N SA A SA A A) groupedBy: #yourself.q21 := #(A N SA A SA A D A N A N) groupedBy: #yourself.q22 := #(D N SA A SA SA D A A SA A) groupedBy: #yourself.q3  := #(D A SA SA N A SA A SA A A) groupedBy: #yourself.t := q3.toVisualize := OrderedCollection new.toVisualize add: #SA -&gt; (t at: #SA ifAbsent: [ #() ]).toVisualize add: #A -&gt; (t at: #A ifAbsent: [ #() ]).toVisualize add: #N -&gt; (t at: #N ifAbsent: [ #() ]).toVisualize add: #D -&gt; (t at: #D ifAbsent: [ #() ]).toVisualize add: #SD -&gt; (t at: #SD ifAbsent: [ #() ]).b := RTGrapher new.ds := RTData new.ds barChartWithBarTitle: #key rotation: 0.ds points: toVisualize, {'''' -&gt; #() }.ds y: [ :as | as value size ].b add: ds.b axisX noTick; noTitle.b axisY noDecimal.b maxY: 5.b build.lb := RTLegendBuilder new.lb view: b view.lb addText: ''Likert scale result''.lb addText: ''SA = Strong agree; A = agree; N = neutral''.lb addText: ''D = Disagree; SD = Strongly Disagree''.lb build.^ b view'	</body></comment><class><name>RTCursorFollowerTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Grapher-Decorators-Tests</category><attributes><package>Roassal2-Builder-Grapher-Decorators-Tests</package></attributes></class><class><name>RTGroupTest</name><environment>Roassal2</environment><super>Roassal2.RTTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core-Tests</category><attributes><package>Roassal2-Core-Tests</package></attributes></class><shared-variable><name>ExampleAnnouncer</name><environment>Roassal2.RTAbstractExample</environment><private>false</private><constant>false</constant><category>class variables</category><initializer>nil</initializer><attributes><package>Roassal2-ExampleBrowser-Examples</package></attributes></shared-variable><methods><class-id>Roassal2.RTAbstractExample</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'fill please'</body></methods><methods><class-id>Roassal2.RTAbstractExample</class-id> <category>instance creation</category><body package="Roassal2-ExampleBrowser-Examples">open	| v |	v := RTView new.	v @ RTDraggableView.	self openOn: v.	v open.</body><body package="Roassal2-ExampleBrowser-Examples">openOn: v	| exampleSymbols icon64Mime form element  helpBar |	exampleSymbols := self class selectors 								select: [ :symbol | (symbol beginsWith: 'example') 															and: [ (symbol endsWith: 'Icon') not ] ].	exampleSymbols do: [ :k |		icon64Mime := self perform: (k, #Icon) asSymbol.		form := TRPlatform current formClass fromBinaryStream: 							(TRPlatform current mimeDecodeToBytes: icon64Mime readStream).		element := (RTBitmap new form: form) element.		element @ (RTPopup new text: k asString).		element when: TRMouseLeftClick do: [ :evt | self class new perform: k ].		element when: TRMouseRightClick do: [ :evt | (self class &gt;&gt; k) browse ].		element @ (RTEventForwarder new eventClass: TRMouseDragging). 		v add: element.	].	RTGridLayout new on: v elements.		helpBar := TRLabelShape new text: ' Left to run / Right for code'.	v canvas addFixedShape: helpBar.	TRConstraint stickAtTheBottomOfTheWindow: helpBar.</body></methods><methods><class-id>Roassal2.RTAbstractExample</class-id> <category>installing</category><body package="Roassal2-ExampleBrowser-Examples">installOn: aView	| el |	el := (RTLabel new text: (self label)) element.	el @ RTHighlightable.	aView add: el.		el when: TRMouseClick do: [ :evt |		aView clean.		self openOn: aView.		aView canvas camera focusOnCenter.	].</body><body package="Roassal2-ExampleBrowser-Examples">installTitle: aTitle code: sourceCode	"SourceCode should be a complete example, executable within a workspace"		| viewOrBuilder canvas icon64Mime stream window | 	viewOrBuilder := (Compiler evaluate: sourceCode).	window := viewOrBuilder open.	viewOrBuilder class == RTView 		ifTrue: [ canvas := viewOrBuilder canvas ]		ifFalse: [ canvas := viewOrBuilder view canvas ].		canvas morph ifNil: [ self error: 'You have forgotten to open the view!' ].		(self class methodDict includesKey: ('example', aTitle) asSymbol)		ifTrue: [ self error: 'Title already used. Proceed to override' ].		self class compile: 'example', aTitle, String cr, sourceCode classified: 'sources'.		stream := WriteStream on: ByteArray new.	TRPlatform current pngReadWriterClass		putForm: (canvas morph imageForm scaledToSize: 100 @ 100)		onStream: stream.	icon64Mime := (TRPlatform current mimeEncode: stream contents readStream) contents.	self class 		compile: 'example', aTitle, 'Icon', String cr, '	^ ''', icon64Mime, '''' 		classified: 'icons'.	window delete.</body><body package="Roassal2-ExampleBrowser-Examples">justToTry		RTGrapherExample new installTitle: 'ForceLayoutWithGreatCharge' 		code:		'	| b |	b := RTGraphBuilder new.	b nodes		shape: (RTEllipse new size: #numberOfMethods);		whenOverShowEdges: [ :cls | cls dependentClasses ].	b edges		connectTo: [ :c | c subclasses ];		shape: (RTLine new color: Color gray).	b layout 		use: (RTForceBasedLayout new charge: -180).	b global		minSize: 10;		normalizeColor: [ :cls | cls methods size ] using: (Array with: Color green with: Color red).	b addAll: (RTObject withAllSubclasses).	b open.	b view canvas'</body></methods><methods><class-id>Roassal2.RTAbstractExample</class-id> <category>*Roassal2GT-Inspector</category><body package="Roassal2-ExampleBrowser-Examples">gtDisplayExamplesIn: aComposite	^ (self gtInspectorPreviewIn: aComposite)		title: 'E.g'</body><body package="Roassal2-ExampleBrowser-Examples">gtOpenOn: v	| icon64Mime form element |	(self gtExamples		sorted: [ :a :b | a method selector asLowercase &lt; b method selector asLowercase ])		do: [ :anExample | 			[ icon64Mime := self perform: (anExample method selector , #Icon) asSymbol.			form := TRPlatform current formClass				fromBinaryStream: (TRPlatform current mimeDecodeToBytes: icon64Mime readStream) ]				on: Error				do: [ :exception |  ].	" ignore, continue and use a fallback form "			form ifNil: [ form := Color red iconOrThumbnailOfSize: 32 ].			" not all examples stick to the naming convention or simply dont provide an icon, provide a fallback here since RTExampleBrowser is the only entity that depends strongly on icons "			element := (RTBitmap new form: form) elementOn: anExample.			element @ (RTPopup new text: anExample method selector asString).			element @ (RTEventForwarder new eventClass: TRMouseDragging).			element				when: TRMouseClick				do: [ :event | 					self announcer						announce:							(RTExampleOpeningEvent new								theClass: self className;								theSelector: anExample method selector) ].			v add: element ].	RTGridLayout new		gapSize: 50;		on: v elements.	v elements		@			(RTLabeled new				below;				fontSize: 10;				text: [ :m | m method selector asString withoutPrefix: 'example' ])</body></methods><methods><class-id>Roassal2.RTAbstractExample</class-id> <category>announcement</category><body package="Roassal2-ExampleBrowser-Examples">announcer	"Return the announcer responsible to emit example-related events"	^ self class announcer</body></methods><methods><class-id>Roassal2.RTAbstractExample class</class-id> <category>announcement</category><body package="Roassal2-ExampleBrowser-Examples">announcer	ExampleAnnouncer ifNil: [ ExampleAnnouncer := Announcer new ].	^ ExampleAnnouncer</body><body package="Roassal2-ExampleBrowser-Examples">initialize	self announcer when: Announcement do: [ :announcement | 			"RTEventCollector uniqueInstance add: announcement" ]</body></methods><methods><class-id>Roassal2.RTTest</class-id> <category>useful documentation</category><body package="Roassal2-Core-Tests">readme"Exporting the core of Roassal2 to AmberNote that you need to have Trachel also exported| exporter rootClasses soleClasses |exporter := P2AExporterV11 new.rootClasses := Array with: RTAnnounceableObject with: RTLayout.rootClasses do: [ :c |	c withAllSubclasses do: [ :cc | exporter addClass: cc ] ].soleClasses := { RTObject . RTGroup. RTShape . RTAbstractElementShape . RTBox . RTEllipse . RTAbstractLine . RTLine . RTNoShape . RTLayoutTranslator . RTDirectLayoutTranslator}.soleClasses do: [ :cc | exporter addClass: cc ].exporter fileOutAsString| exporter rootClasses |exporter := P2AExporterV11 new.rootClasses := Array with: RTShapeTest with: RTViewTest with: RTShape with: RTExample with: RTAnnounceableObject.rootClasses do: [ :c |	c withAllSubclasses do: [ :cc | exporter addClass: cc ] ].exporter fileOutAsString "</body><body package="Roassal2-Tests-Extentions">skip	^ self</body></methods><methods><class-id>Roassal2.RTTest</class-id> <category>initialization</category><body package="Roassal2-Core-Tests">setUp" The following lines are useful for debugging	'/tmp/results.txt' asFileReference writeStream 		nextPutAll: self class name asString, '&gt;&gt;', testSelector asString;		cr.		Transcript show: self class name asString, '&gt;&gt;'.	Transcript show: testSelector asString; cr"</body></methods><methods><class-id>Roassal2.RTShapeBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-Common-Tests">testBasic	self assert: builder shape class == RTNoShape</body><body package="Roassal2-Builder-Common-Tests">testBox	builder rectangle.	self assert: builder shape class == RTBox</body><body package="Roassal2-Builder-Common-Tests">testBoxWithDimensions	| shape |	builder rectangle width: [ :v | v + 3 ].	shape := builder shape.	self assert: shape class == RTBox.	self assert: (shape widthFor: (RTElement on: 5)) = 8</body><body package="Roassal2-Builder-Common-Tests">testColor	| e |	builder rectangle color: Color blue.	e := builder elementOn: 1.		self assert: (e shape colorFor: e) equals: Color blue.	self assert: e trachelShape color equals: Color blue.</body><body package="Roassal2-Builder-Common-Tests">testColorIf	| e |	builder box 		if: true color: Color blue;		if: true color: Color red.	e := builder elementOn: 1.		self assert: (e shape colorFor: e) equals: Color red.	self assert: e trachelShape color equals: Color red.</body><body package="Roassal2-Builder-Common-Tests">testFillColor	self assert: builder color isColor.	self assert: builder fillColor isColor.</body><body package="Roassal2-Builder-Common-Tests">testLine	builder line.	self assert: builder shape class == RTLine</body><body package="Roassal2-Builder-Common-Tests">testOrthoLine	| v eb |	v := RTView new.	v addAll: (RTBox new elementsOn: (1 to: 4)).	eb := RTEdgeBuilder new.	eb shape orthoHorizontalLine color: Color veryLightGray.	eb view: v.	eb objects: (1 to: 4);		connectFrom: #yourself to: [ :vv | vv - 1 ].	self assert: (v canvas shapes noneSatisfy: [ :s | s class == TRCompositeShape ])</body><body package="Roassal2-Builder-Common-Tests">testShape	| e1 e2 e3 |	builder rectangle		if: [ :o | o = 3 ] fillColor: Color blue;		if: [ :o | o = 4 ] fillColor: Color red.	e1 := builder elementOn: 3.	e2 := builder elementOn: 4.	e3 := builder elementOn: 5.		self assert: (e1 shape colorFor: e1) = Color blue.	self assert: e1 trachelShape color = Color blue.	self assert: e2 trachelShape color = Color red.	self assert: e3 trachelShape color = Color veryVeryLightGray.</body><body package="Roassal2-Builder-Common-Tests">testShape2	| e1 e2 e3 |	builder rectangle		ifElement: [ :el | el model = 3 ] fillColor: Color blue;		ifElement: [ :el | el model = 4 ] fillColor: Color red.	e1 := builder elementOn: 3.	e2 := builder elementOn: 4.	e3 := builder elementOn: 5.		self assert: (e1 shape colorFor: e1) = Color blue.	self assert: e1 trachelShape color = Color blue.	self assert: e2 trachelShape color = Color red.	self assert: e3 trachelShape color = Color veryVeryLightGray.</body></methods><methods><class-id>Roassal2.RTShapeBuilderTest</class-id> <category>hasSetShape</category><body package="Roassal2-Builder-Common-Tests">testHasSetShape	self deny: builder hasSetShape.	builder rectangle.	self assert: builder hasSetShape.	self deny: builder hasSetLineShape.		builder line.	self assert: builder hasSetShape.	self assert: builder hasSetLineShape.</body></methods><methods><class-id>Roassal2.RTShapeBuilderTest</class-id> <category>attach point</category><body package="Roassal2-Builder-Common-Tests">testAttachPoint01	builder line; verticalAttachPoint.	self assert: RTVerticalAttachPoint equals: builder shape attachPoint class</body><body package="Roassal2-Builder-Common-Tests">testAttachPoint02	builder line; horizontalAttachPoint.	self assert: builder shape attachPoint class equals: RTHorizontalAttachPoint</body><body package="Roassal2-Builder-Common-Tests">testAttachPoint03	builder line; centeredAttachPoint.	self assert: builder shape attachPoint class equals: RTCenteredAttachPoint</body></methods><methods><class-id>Roassal2.RTShapeBuilderTest</class-id> <category>withText</category><body package="Roassal2-Builder-Common-Tests">testWithText	| v el |	v := RTView new.	builder := RTShapeBuilder new.	builder circle 				size: 50; 				fillColor: (Color purple alpha: 0.3);				withText.	el := builder elementOn: 'hello'.	v add: el.		self assert: el shape class == RTCompositeShape.</body><body package="Roassal2-Builder-Common-Tests">testWithTextAndColor	| v el |	v := RTView new.	builder := RTShapeBuilder new.	builder circle 				size: 50; 				fillColor: (Color purple alpha: 0.3);				withText;				withTextColor: Color red.	el := builder elementOn: 'hello'.	v add: el.		self assert: el shape class == RTCompositeShape.</body><body package="Roassal2-Builder-Common-Tests">testWithTextAndTranslation	| v el |	v := RTView new.	builder := RTShapeBuilder new.	builder circle 				size: 50; 				fillColor: (Color purple alpha: 0.3);				withText.	el := builder elementOn: 'hello'.	el translateTo: 20 @ 20.	v add: el.		self assert: el shape class == RTCompositeShape.</body></methods><methods><class-id>Roassal2.RTShapeBuilderTest</class-id> <category>composite shapes</category><body package="Roassal2-Builder-Common-Tests">testBorderColorAndCompositeShape	| s label box |	builder box; withTextAbove; borderColor: Color black.	s := builder current.	shapes := s allShapes.	 	"Checking the label"	self assert: shapes first class equals: RTLabel.	label := shapes first.	self assert: label color equals: RTLabel defaultColor.		"Checking the box"	self assert: shapes second class equals: RTBox.	box := shapes second.	self assert: (box borderColorFor: RTElement new) equals: Color black.</body><body package="Roassal2-Builder-Common-Tests">testFillColorAndCompositeShape	| s label box |	builder box; withTextAbove; fillColor: Color black.	s := builder current.	shapes := s allShapes.	 	"Checking the label"	self assert: shapes first class equals: RTLabel.	label := shapes first.	self assert: (label colorFor: RTElement new) equals: RTLabel defaultColor.		"Checking the box"	self assert: shapes second class equals: RTBox.	box := shapes second.	self assert: (box colorFor: RTElement new) equals: Color black.</body><body package="Roassal2-Builder-Common-Tests">testFillColorAndCompositeShape02	| s label box |	builder box; withTextAbove; textColor: Color black; fillColor: Color red.	s := builder current.	shapes := s allShapes.	 	"Checking the label"	self assert: shapes first class equals: RTLabel.	label := shapes first.	self assert: (label colorFor: RTElement new) equals: Color black.		"Checking the box"	self assert: shapes second class equals: RTBox.	box := shapes second.	self assert: (box colorFor: RTElement new) equals: Color red.</body></methods><methods><class-id>Roassal2.RTShapeBuilderTest</class-id> <category>linear fill color</category><body package="Roassal2-Builder-Common-Tests">testLinearFillColorWithin	| elements m |	m := (Array with: #(0) with: #(1) with: #(2)).	builder rectangle linearFillColor: #first within: m.	elements := builder elementsOn: m.		self assert: elements first trachelShape color red &gt; 0.9.	self assert: elements first trachelShape color green &gt; 0.9.	self assert: elements first trachelShape color blue &gt; 0.9.		self assert: elements third trachelShape color = Color black.</body></methods><methods><class-id>Roassal2.RTShapeBuilderTest</class-id> <category>ensure</category><body package="Roassal2-Builder-Common-Tests">testEnsure	builder rectangle color: Color red.	self assert: builder current class equals: RTBox.	self assert: ((builder current color) rtValue: RTElement new) equals: Color red.	builder ensure: RTBox.	self assert: ((builder current color) rtValue: RTElement new) equals: Color red.</body><body package="Roassal2-Builder-Common-Tests">testEnsure2	builder rectangle color: Color red.	builder ensure: RTEllipse.	self assert: ((builder current color) rtValue: RTElement new) equals: (RTEllipse new color).</body></methods><methods><class-id>Roassal2.RTShapeBuilderTest</class-id> <category>created elements</category><body package="Roassal2-Builder-Common-Tests">testCreatingElements	builder rectangle.	self assert: builder createdElements size = 0.	builder elementsOn: (1 to: 10).	self assert: builder createdElements size = 10.	builder reset.	self assert: builder createdElements size = 0.</body></methods><methods><class-id>Roassal2.RTShapeBuilderTest</class-id> <category>bezier line</category><body package="Roassal2-Builder-Common-Tests">testBezierLine01	| v es eb centralPoint |	v := RTView new.	es := (RTEllipse new size: 15) elementsOn: (1 to: 15).	v addAll: es.	RTCircleLayout on: es.	centralPoint := (RTEllipse new size: 10; color: Color red) elementOn: -1.	centralPoint translateTo: es encompassingRectangle center.	v add: centralPoint.	es @ RTLabeled.	eb := RTEdgeBuilder new.	eb view: v.	eb shape bezierLineUsingObjects: (Array with: -1)  inView: v.	eb useAssociations: (Array with: 1-&gt;10 with: 2 -&gt; 10 with: 3 -&gt; 10 ).</body></methods><methods><class-id>Roassal2.RTShapeBuilderTest</class-id> <category>border color</category><body package="Roassal2-Builder-Common-Tests">testIfBorderColor	| e |	builder 		box;		if: true borderColor: Color red.			self assert: (builder borderColor rtValue: RTElement new) equals: Color red.	e := builder elementOn: 42.		self assert: (e shape borderColorFor: e) equals: Color red</body></methods><methods><class-id>Roassal2.RTShapeBuilderTest</class-id> <category>running</category><body package="Roassal2-Builder-Common-Tests">setUp	super setUp.	builder := RTShapeBuilder new</body></methods><methods><class-id>Roassal2.RTSVGPathTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testParseSimple	|res p1 |	res := OrderedCollection new.	res		add: (Array with: #absolute with: #() );		add: (Array with: #moveTo: with: (Array with: 100.0@100.0) );		add: (Array with: #absolute with: #() );		add: (Array with: #lineTo: with: (Array with: 300.0@100.0) );		add: (Array with: #absolute with: #() );		add: (Array with: #lineTo: with: (Array with: 200.0@300.0) );		add: (Array with: #close with: #()).	p1 := (TRSVGPath new path: 'M 100 100 L 300 100 L 200 300 z') curves.	self assert: p1 = res.		"	According to the specification: 		The command letter can be eliminated on subsequent commands if the same command is used multiple times in a row (e.g., you can drop the second 'L' in 'M 100 200 L 200 100 L 	-100 -200' and use 'M 100 200 L 200 100 -100 -200' instead).			Hence, the following assertion should be true:		p2 := (RTSVGPath new path: 'M 100 100 L 300 100 200 300 z') processPath asString.	self assert: p2 = res."</body><body package="Roassal2-Core-Tests">testTranslateBy	| v e |	v := RTView new.	e := (RTSVGPath new path: 'M200,200l100,0l0,100l-100,0z') element.	v add: e.	self assert: (e trachelShape includesPoint: 210@210).	e translateBy: -10@0.	self assert: (e trachelShape includesPoint: 200@200).	self assert: (e trachelShape includesPoint: 0@0) not.</body><body package="Roassal2-Core-Tests">testTranslateTo	| v e |	v := RTView new.	e := (RTSVGPath new path: 'M200,200l100,0l0,100l-100,0z') element.	v add: e.	self assert: (e trachelShape includesPoint: 210@210).	e translateTo: 0@0.	self assert: (e trachelShape includesPoint: 200@200).	self assert: (e trachelShape includesPoint: 0@0) not.</body><body package="Roassal2-Core-Tests">testTranslateToCentered	| v e rectangle |	v := RTView new.	e := (RTSVGPath new centeredPath: 'M200,200l100,0l0,100l-100,0z') element.	rectangle := (Rectangle encompassing: (Array with: 200@200 with: 300@200 with: 300@300 with: 200@300)).	v add: e.	self deny: (e trachelShape includesPoint: 200@200).	self assert: (e trachelShape includesPoint: 0@0).	e translateTo: rectangle center.	self assert: (e trachelShape includesPoint: 200@200).	self deny: (e trachelShape includesPoint: 0@0).</body></methods><methods><class-id>Roassal2.RTSVGPathTest</class-id> <category>point inclusion</category><body package="Roassal2-Core-Tests">testIncludesPointBasic	| v e |	v := RTView new.	e := (RTSVGPath new path: 'M 100 100 L 300 100 L 200 300 z') element.	v add: e.	self assert: (e trachelShape includesPoint: 200@200).	self assert: (e trachelShape includesPoint: 200@80) not</body><body package="Roassal2-Core-Tests">testUpdate	| v e |	v := RTView new.	e := (RTSVGPath new path: 'M 0 0 h 10 v 100 h -10 z') element.	v add: e.	self assert: (e trachelShape includesPoint: 5 @ 50).	self assert: (e trachelShape includesPoint: 50 @ 5) not.	e shape path: 'M 0 0 h 100 v 10 h -100 z'.	e update.	self assert: (e trachelShape includesPoint: 5 @ 50) not.	self assert: (e trachelShape includesPoint: 50 @ 5)</body></methods><methods><class-id>Roassal2.RTSVGPathTest</class-id> <category>test countries</category><body package="Roassal2-Core-Tests">testCountries	self assert: ((RTSVGPath countries collect: [ :k | RTSVGPath perform: k ]) allSatisfy: #isString)</body></methods><methods><class-id>Roassal2.RTHighlightElementsInViewTest</class-id> <category>tests</category><body package="Roassal2-Interactions-Tests">testBasic	| v cs i |	cs := Collection withAllSubclasses.	v := RTView new.	v addAll: (RTBox elementsOn: cs).	RTGridLayout on: v elements.	v elements @ RTPopup.	i := RTHighlightElementsInView new.	v @  i.		self assert: (v elements collect: [ :e | e trachelShape color ] as: Set) size equals: 1.		i highlightElementsUsing: '*Collection*'.	self assert: (v elements collect: [ :e | e trachelShape color ] as: Set) size equals: 2.	i highlightElementsUsing: 'Hash'.	self assert: (v elements collect: [ :e | e trachelShape color ] as: Set) size equals: 2.		i highlightElementsUsing: '*Array*'.	self assert: (v elements collect: [ :e | e trachelShape color ] as: Set) size equals: 3.		i highlightElementsUsing: ''.	self assert: (v elements collect: [ :e | e trachelShape color ] as: Set) size equals: 1.</body><body package="Roassal2-Interactions-Tests">testBasic02	| v cs i |	cs := Collection withAllSubclasses.	v := RTView new.	v addAll: (RTBox elementsOn: cs).	RTGridLayout on: v elements.	v elements @ RTPopup.	i := RTHighlightElementsInView new.	v @  i.		self assert: (v elements collect: [ :e | e trachelShape color ] as: Set) size equals: 1.		i highlightElementsUsing: 'Collection'.	self assert: (v elements collect: [ :e | e trachelShape color ] as: Set) size equals: 2.	i highlightElementsUsing: 'Collection'.	self assert: (v elements collect: [ :e | e trachelShape color ] as: Set) size equals: 2.	"We make sure that if we select twice the same element, we should not forget it"		i highlightElementsUsing: ''.	self assert: (v elements collect: [ :e | e trachelShape color ] as: Set) size equals: 1.</body><body package="Roassal2-Interactions-Tests">testBasic3	| i |	i := RTHighlightElementsInView new.	self assert: i isNotTransparent.	i transparent. 	self deny: i isNotTransparent.</body></methods><methods><class-id>Roassal2.RTMapBuilderExample</class-id> <category>dbPedia</category><body package="Roassal2-Builder-Map-Examples">queryDBPediaAboutUniversitiesInEurope"| map locations rawData rawData2 rawData3 |map := RTMapBuilder new.map countries: #('France' 'Spain' 'Italy').map color: Color veryVeryLightGray.rawData := DBPediaSearch universitiesIn: 'France'.rawData2 := ((NeoJSONReader fromString: rawData) at: #results) at: #bindings.rawData3 := rawData2 select: [ :d | d keys includesAll: #('label' 'long' 'lat') ] thenCollect: [ :d | { (Float readFrom: ((d at: 'long') at: 'value')) . (Float readFrom: ((d at: 'lat') at: 'value')) . (d at: 'label' ) at: 'value' } ].locations := rawData3.locations do: [ :array |	map cities addCityNamed: array third location: array second @ array first ].map cities shape size: 8; color: (Color blue alpha: 0.03).map cities: (locations collect: #third).rawData := DBPediaSearch universitiesIn: 'Italy'.rawData2 := ((NeoJSONReader fromString: rawData) at: #results) at: #bindings.rawData3 := rawData2 select: [ :d | d keys includesAll: #('label' 'long' 'lat') ] thenCollect: [ :d | { (Float readFrom: ((d at: 'long') at: 'value')) . (Float readFrom: ((d at: 'lat') at: 'value')) . (d at: 'label' ) at: 'value' } ].locations := rawData3.locations do: [ :array |	map cities addCityNamed: array third location: array second @ array first ].map cities shape size: 8; color: (Color blue alpha: 0.03).map cities: (locations collect: #third).rawData := DBPediaSearch universitiesIn: 'Spain'.rawData2 := ((NeoJSONReader fromString: rawData) at: #results) at: #bindings.rawData3 := rawData2 select: [ :d | d keys includesAll: #('label' 'long' 'lat') ] thenCollect: [ :d | { (Float readFrom: ((d at: 'long') at: 'value')) . (Float readFrom: ((d at: 'lat') at: 'value')) . (d at: 'label' ) at: 'value' } ].locations := rawData3.locations do: [ :array |	map cities addCityNamed: array third location: array second @ array first ].map cities shape size: 8; color: (Color blue alpha: 0.03).map cities: (locations collect: #third).map scale: 5.map render.map view openInWindowSized: 1000 @ 500."</body><body package="Roassal2-Builder-Map-Examples">queryingDBPedia"Below I describe a small example that fetches some data about the US Universities from DBPedia and visualize them using Roassal2. Pick a fresh 3.0 image.First, you need to load HernÃ¡n work, Svenâs NeoJSON, and Roassal 2 (If you are using a Moose Image, there is no need to load Roassal2 since it is already in):-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=Gofer it  smalltalkhubUser: 'SvenVanCaekenberghe' project:  'Neo';  package:  'ConfigurationOfNeoJSON';  load.((Smalltalk at: #ConfigurationOfNeoJSON) load).Gofer it  smalltalkhubUser: 'hernan' project: 'DBPedia';  package: 'DBPedia';  load.Gofer it  smalltalkhubUser: 'ObjectProfile' project:  'Roassal2';  package:  'ConfigurationOfRoassal2';  load.((Smalltalk at: #ConfigurationOfRoassal2) loadBleedingEdge).-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=Using Roassal2, I was able to render some data extracted from dbpedia:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=| map locations rawData rawData2 rawData3 |map := RTMapBuilder new.map countries: #('UnitedStates' 'Canada' 'Mexico').map color: Color veryVeryLightGray.rawData := DBPediaSearch universitiesInUS.rawData2 := ((NeoJSONReader fromString: rawData) at: #results) at: #bindings.rawData3 := rawData2 select: [ :d | d keys includesAll: #('label' 'long' 'lat') ] thenCollect: [ :d | { (Float readFrom: ((d at: 'long') at: 'value')) . (Float readFrom: ((d at: 'lat') at: 'value')) . (d at: 'label' ) at: 'value' } ].locations := rawData3.locations do: [ :array |	map cities addCityNamed: array third location: array second @ array first ].map cities shape size: 8; color: (Color blue alpha: 0.03).map cities: (locations collect: #third).map scale: 2.map render.map view openInWindowSized: 1000 @ 500.-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="</body></methods><methods><class-id>Roassal2.TRTest</class-id> <category>documentation</category><body package="Roassal2-Trachel-Tests">readme"Exporting to Amber| exporter rootClasses |exporter := P2AExporterV11 new.rootClasses := Array with: TREvent with: TRObject with: TRTest.rootClasses do: [ :c |	c withAllSubclasses do: [ :cc | exporter addClass: cc ] ].exporter fileOutAsString "</body></methods><methods><class-id>Roassal2.TRTest</class-id> <category>initialization</category><body package="Roassal2-Trachel-Tests">setUp	Transcript show: self class name asString, '&gt;&gt;'.	Transcript show: testSelector asString; cr</body></methods><methods><class-id>Roassal2.TRTest</class-id> <category>as yet unclassified</category><body package="Roassal2-Tests-Extentions">skip	^ self</body></methods><methods><class-id>Roassal2.TRVisualTest</class-id> <category>initialize-release</category><body package="Roassal2-Tests-Extentions">setUp	super setUp.	canvas := TRCanvas new.	visual := canvas buildMorph.	window := visual openInWindow.</body><body package="Roassal2-Tests-Extentions">tearDown	window ifNotNil:[ window delete ].	window := nil.</body></methods><methods><class-id>Roassal2.TRVisualTest</class-id> <category>testing</category><body package="Roassal2-Tests-Extentions">testBounds	self assert: visual bounds equals: ((0 @ 0) corner: (500 @ 500))</body><body package="Roassal2-Tests-Extentions">testResize	| b pos positionA |	pos := nil.	canvas when: TRMouseClick do: [:evt | pos := evt position.].		canvas morph controller trMouseClick: (RedButtonPressedEvent withArray: #(1 2 30 40 50 60 1 8 123) ).	(Delay forMilliseconds: 400) wait.	positionA := pos.	self assert: pos notNil.	window mainWindow resize: 200 @ 200.	(Delay forMilliseconds: 10) wait.	b := visual bounds.	self assert: b = (0@0 corner: 200@200).	canvas morph controller trMouseClick:  (RedButtonPressedEvent withArray: #(1 2 30 40 50 60 1 8 123) ).	(Delay forMilliseconds: 400) wait.		self assert: pos ~= positionA.</body></methods><methods><class-id>Roassal2.RTSVGExample</class-id> <category>icons</category><body package="Roassal2-ExampleBrowser-Examples">animatedIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">diamondIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">fibonacciSpiralIcon	^ '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HxBAs4ueZTTJAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">icon1Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACoUlEQVR4XuXbT6tpURiA8TXwJ1MjJWMjMyVlIDIxMzdWGJOSfAVDZeoDKGYGfAVFik9gJGWg1OverXtup+4599jsba+1n6fWnPPL2u9au6NuN346pfh/Aj4IPz4IH4QfH4QPwo8Pwgfhxwfhg/Djg/Djg/BB+PFB+CD8+CB8EH58ED4IPz4IPz4IH4QfH4QPwo8Pwgfhxwfhg/DjgzjRbDYTpdTNWsFgUA6Hg/BBvPwCfzA+Vjab5YPoBGItPoiHWdvUZ4x6vc7/hXjZ8XiUXC53R2k0GsJ/qPPjg/BBNGyxWEilUvlniyoUCvftKxwOCx/kjU2nU4nFYvK/qWswGAgfxONSqdTfqet0OvFBdGg+n8v1euVvWfxgIK1WSyKRiHx1Ov9ulctlWa/XwgdxuGazaQvC1OsUYz5prVbjg+iU9ZDOZDK2UQKBgFgPeT6IixWLxYdg+GPvm7pcLj+CdDod/tj71g/+A0i/3+ePvXwQKMjn9+jfrXQ6zd+y3lWv1xM/jbrGg4RCoYdAttstf8pyu9Vq9fBZ5Kv3JXwQhyuVSrYOh/I7PoiLp3W7J/Vut8sHcSvrttfP91jGgTx7sTgej/l3WU43Go2evu2Nx+N8EKeLRqMvXb/vdjvhg3gw6po+Ais/jromj8DKj6OuySOw9iDtdtsxEBNGYOXXUdfUEVj5ddQ1dQTWGiSRSDgOovu7dkXarkx4m6gtyHK5FLdA8vk8/xdit/1+7xpItVrlgzxTMpl0BUXnaxStQc7n8/2fcpzEmEwm/Cnr1TabjVgP4lfWcDjk32Xx44PwQfjxQfgg/PggfBB+fBB+fBA+CD8+CB+EHx+ED8KPD8IH4ccH4ccH4YPw44PwQfjxQfgg/PggfBB+fBB+fBA+CL+H+wX6dsn/L7VWKgAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">icon2Icon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">icon3Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADz0lEQVR4XuXbyyt8YRjA8UGyssVmFkpjoUkKQ7lMWUjZ2thYKCslUUokTTZjQcpCNpRLFsrKQmoWI/kDLKRcSjZKbqHQM7951cjMnDPnPWfOzxjfb70bNTP1fMy5vA5PLMbvN+Xhj4APwo8Pwgfhxwfhg/Djg/BB+PFB+CD8+CD8+CB8EH58ED4IPz4IH4QfH4QPwo8Pwo8Pwgfhxwfhg/Djg/BB+PFB+CD8+CD8+CB8EH5gkP39fSksLJSPjw/hg+S4jo4O8Xg8MbV6enr4ILnq8PBQCgoKvjAS6+zsTPggP9za2loaRGL5/X5LkL29PZmamoptb28LHyTLZmZmTDESa3193XTQjY2NSa8PBALCB3FYJBKxxEis19fXtEHX1tYavr6trU34IA5qamrSBqmpqUka8sDAQMbXbmxsCB/EZru7u9ogarW3t38O+erqSut1fBCHnZycSDgctoWjs5aXl4UPknIp29vbK1VVVbK0tGQ5nKGhIVdR1JUXHySexGttbU0b7uTkZEaUp6cnV0FmZ2f535CLiwspKioyHGxFRYXlgNzC6Orq4p/Uj4+PM/6G62yFZIOgDo3qMHV7e8u/7L25uZFsj+nRaNTRIWtxcVH4WycplZSUWA6zsrLSdHAvLy9SXFzsCIS/l5V+x609PIWysrLyBfP4+CgTExNZncyPjo7435DU1NZGdXW16/cSmkuen5+FD2JQMBjMCYo63N3f3/N3e436/kemn17qZpQPYlB9fX3OUHR2BXAg6mSd7WCHh4fl/f09abjqZ3Y2Ivkg36qrq3OMcn5+bjrQvr4+y/ddXV3lg6TW3d3tCEQ9dZLpfefm5jK+r7qw4B+y4l1fX39uXagVCoUcfzus2tnZMX1vnf0yBMjCwoJrJ3GrHh4eDD+rtLQ07ZyDBLm8vHT1ikqn5ubmpM9UV3Uq/n1IvNHRUVdB1JMoOp8bPzSK+tv65uYmf+vkew0NDa7fc3R2dsrd3R3/yUUnDQ4O/rebwJGREf6Ti3Y7ODgQ3fPC6emp+Hw+W4Dz8/PCB7FZS0uL6ZDHxsbSBhq/k9YGmZ6e5oM4ST3MZjRQ9a1weu4pLy/nH7KyaXx8PGnI/f39pgNV//+RCaOsrOzX3Ff8ia0TndQl6299PhcJovJ6vUkoW1tbeY2R9yCJp+DVt+Lt7S3vMfIeJHHpHPtD8f8Llw/Cjw/CB+HHB+GD8OOD8EH48UH4IPz4IPz4IHwQfnwQPgg/PggfhB8fhA/Cjw/Cjw/CB+HHB+GD8OOD8EH48UH4IPz4IPz4IHwQfjb7ByPPkYDDAMrjAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">icon4Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEdUlEQVR4XuWcSyi0URjH3yyUEiWllFhZqNFkMUmULFAWbpHGwsbGRkgUuSxkIaUslCKlxEYWQmFhIwuZlDulXEqhsHFJPWMema/5mHnnvOc17xzv/1/PTudMz8973uf2Hs3rxZdK0vBdgA8EX/hA8IHgCx8IPhB84QPBB4IvfCD4QPCFDwRf+EDwgeALHwg+EHzhA8EHgi98IPhA8IUPBF/4QPCB4AsfCD4QfOEDCdTx8TEtLy/T/Pw8bW1t0fPzM+EDiZISExNJ0zTvd7u6uiJ8IBbr4eEhKAy21tZWfCBWq7u7OyQQNnwgVv9wTdMFwu8TfCAW6fT0VBcGW319PT4QMyouLqacnBza3t4O68impqawQESOLfKJ3zexsbF0fn5O+EC+lJ+f/5+D09PTaXV1lXSOKyGbmZkJusbLyws1NDT8gCryz2B7IN9hBFpSUhLNzs5+Ounw8JDKyspIFIbfEhISaGxs7HONm5sbqqio0F1jb2+PYIHwMWXUwRYYvb29ESQQl8ulIhDv6+srJpDd3V3lgFRXVxP0OyQzM1MpKLe3t9hANjY2lAFSVFSEH2WxUlJSlIDCCSc+EJ8WFhaiDsTpdOInhjLJXqSMj058IF86OTmRfUKopaWF+vr6vH7LyMiQWsvtduMD8auqqsqoE2lxcTGkA5+enqigoMAwGHwgEscVh8mi6w4MDBiCMjw8jPtSPzg4INGqrd9iYmK4QGvIaTU1NYb2yMrK+lf7sj2Qu7s76urqonDNpVCmd0xFImAoLS0ljgBtCSQ+Pt5saCvtmP7+ftNh9fT0NNkGCJfOzTqEoynZ/fUGIkSttrbWPkBWVlZMO4RD2mjmObm5ufYB8huZeLSBWJXJWwJkc3PzzwPhZpptgPB4p1mHcJ9ddv/JyUnT+3d0dJCtoqzLy0tqb2835ZjHx0cpp2RnZ0vvyz1/qyKsqCWGHo8n6NSHiHOM7rW2tkYyT+Po6ChBlk7m5uYMOay3t1fYUdfX14bWLiwspPf3d4KvZSUnJxtyXGVlZVinra+vG34yVJiaVwLI+Pg4SUZexElf4FpTU1Mk885ITU3FL7//Zlhq1paWlvCB+HV/fx/1Fm5zczM+ENkSeaQMH4hPPLapyhgQfwQED6SxsVGpQTloINz9U22UdGhoCDcPaWtrU3LYGhZIXFyckkC4oQYJhDNjkT4EZ90yta/A2hT347nr+JulGVu+1Hd2dijU4PPR0dEP5/CojpHa1MXFxY81enp6gq7B0PHzEJ/Ozs6IR3zYKTw0x9Mpen/vcDiEoIQrFH7B/VxrcHAQPzH8no+I3lMyMTERFkhaWpqwg/f395X5hPovXxygayMjI/jfqVup8vJy/Ks1VJLeaFFeXh7+5TMqHVuhLgzABxJh8aUCdXV1xJ9Xc1OqpKSEOjs78S8wwxc+EHwg+MIHgg8EX/hA8IUPBB8IvvCB4APBFz4QfCD4wgeCDwRf+EDwhQ8EHwi+8IHgA8EXPhB8IPjCB4IPBF/4QPCFD0RVfQBQ8AY7U59S6gAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">icon5Icon	^ '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RU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">rabbitIcon	^ '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g8UTxgAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">simpleBezierIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAC80lEQVR4XuXbv0sbYRjA8cuhYrIp+I+Ii2jMoGNmXf0nJLgZBCWjIC3YoQW3IkiibRqNqZqEYkloSFu6tVmSDiVQQoeSNM/1UodKaX7fvbnL9wvPqpCPdx7Pe9EMg5+T0vgfAR+EHx+ED8KPD8IH4ccH4YPw44PwQfjxQfjxQfgg/PggfBB+fBA+CD8+CB+EHx+EHx+ED8KPD8IH4ccH4YPw44PwQfjxQfjxQfgg/PggfBB+fBA+iB1dXFxJKPRFZmcfydTUc9H1lzI5eSAbG58kEnkmfBBFRSIJ8Xgyopm/vfP8MoLBpNRqNeGD2FA+X5Dp6eseIP6dH8beXkr4IBYWjxdMiJ9G/xh/Z3V1/G9jSkBOTz/IMBAPZ3HxWvggQ3RzkzUxxLAKpDVra4+FDzJA9XrdfHKy7up4OEdHb4QP0md+/7ktGPfz3RjHpy/bQJLJ1zZi3I/ff8YH6bWZmVe2g7SmWPwofJAuJRKXSjBas7x8yQfp1vz8uTKQ1hNco9EQPkinH2rxY263CYdjfJB27e8fi0qM1vh8x3yQdi0sxJWDaBr/f0jb0um0jGK83pD5h5A2VE+lUhHXbnvtbGfnnfIrU9cL4tptr92VSiXlIJubeT5IpzyeE6Uod3c5PkindnejykAmJqLiuuXiSJ5SNDW3rsPDBB+kl7a37d+h6bp9h2Rj+RqQrmdsRYnH+SB9lUqlbQMJBE7EdbssJxQMHoj1t6q0NJtNPsigraxYt3X2eD5LoVAUV257nVQgcCbDXxnvJZtVc4aPeLd3ff3JwChzc2+lXC6La5eLTu32NiM+X6IPmG/G1pb6cxbc2++x2AtZWroyYb7+F8LrfSrhcHRk5yvoryOIWS6X+7O+r1arjjjk4n8/xGmrH/5HwAfhxwfhg/Djg/BB+PFB+CD8+CB8EH58EH58ED4IPz4IH4QfH4QPwo8Pwgfhxwfhxwfhg/Djg/BB+PFB+CD8+CB8EH58EH58ED4IPz4IH4Sfdf0GPXVIS+o1L8IAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">southAmericaIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">theWorldIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">veryBasicIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACCElEQVR4XuXbzXGCUABFYQpysA6tLs0oBWTlTDrBAlg9ollksjCJP8A7l3Md9+I3RxG1GUf/SGv8T4EfxD8/iB/EPz+IH8Q/P4gfxD8/iB/EPz+If34QP4h/fhA/iH9+ED+If34QP4h/fhD//CB+EP/8IH4Q//wgfhD//CB+EP/8IP6BQDZvm9K8NyP1fj6fiwrk9HEql0NH3nbdrihfstpjy0O5PKK+750gxEpq1oF4U0dVUrkOBAipktp1YE57EZUA6sCAECoh1IH6YLjttsVeBwqkZiWUOnCXTqpUAqoDB1KjElIdyIuL7WHBMy5YHUiQJSuh1YG9/L5IJcA6sCBLVEKsAwsyeyXQOtAgc1ZCrQMNMlsl4DrwIHNUQq4DDzJ5JfA6IkCmrIReRwTIVyVTfF8SUEcMyBSV7Lt9STjWmB/KvVRJSB1RIK9UklJHFMjTZ1xBdcSBPFNJUh1xIA9XElZHJMgjlaTVEQlydyWBdcSC3FNJYh2xIP9WElpHNMhflaTWEQ3yayXBdcSD3KokuY54kOu2xx+/diz1/hvoB7lRSXodqwD5rmQFdawG5FrJGupYDch1wzD4Qfzzg/hB/POD+EH884P45wfxg/jnB/GD+OcH8YP45wfxg/jnB/HPD+IH8c8P4gfxzw/iB/HPD+IH8c8P4p8fxA/inx/ED+KfH2St+wTjNjdgljtjMQAAAABJRU5ErkJggg=='</body></methods><methods><class-id>Roassal2.RTSVGExample</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'SVG'</body></methods><methods><class-id>Roassal2.RTDecoratedTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testShapeTooltipAction	| view element decoration yellowElement yellowPosition |	view := RTView new.	element := RTBox new size: 50; color: Color blue; element.	decoration := RTDecoration new 						shape: (RTEllipse new color: Color red; borderColor: Color black; size: 10)							tooltip: 'Set red color' 							action: [ :anElement | 											anElement trachelShape color: Color red.											anElement signalUpdate. ];						shape: (RTEllipse new color: Color yellow; borderColor: Color black; size: 10)							tooltip: 'Set yellow color'							action: [ :anElement | 											anElement trachelShape color: Color yellow.											anElement signalUpdate. ];						shape: (RTEllipse new color: Color green; borderColor: Color black; size: 10)							tooltip: 'Set green color'							action: [ :anElement | 											anElement trachelShape color: Color green.											anElement signalUpdate. ].	element @ decoration @ RTDraggable.	view add: element.	"enter to the element -&gt; display the decoration"	self assert: view elements size equals: 1.	element testCaseAnnounce: TRMouseEnter.	self assert: view elements size equals: 4.	"click on the yellow element"	yellowElement := view elements detect: [ :eachElement |		eachElement trachelShape color = Color yellow ].	yellowElement testCaseAnnounce: TRMouseClick.	self assert: element trachelShape color equals: Color yellow.	"let's move the element -&gt; the decoration should also move"	yellowPosition := yellowElement position.	element translateBy: 50@50.	self assert: yellowElement position equals: yellowPosition + (50 @ 50).	"leave the element -&gt; remove the decoration"	element testCaseAnnounce: TRMouseLeave.	self assert: view elements size equals: 1.</body></methods><methods><class-id>Roassal2.RTMondrianTest</class-id> <category>tests - nodes</category><body package="Roassal2-Builder-Mondrian-Tests">testBasic	| pos someNodes |	someNodes := b nodes: (1 to: 5).	b applyLayout.		pos := b view canvas shapes collect: #position.	self assert: pos asArray equals: ((Array new: 5) at: 1 put: ((2.5@2.5)); at: 2 put: ((17.5@2.5)); at: 3 put: ((32.5@2.5)); at: 4 put: ((47.5@2.5)); at: 5 put: ((62.5@2.5)); yourself).		self assert: someNodes equals: b view elements</body><body package="Roassal2-Builder-Mondrian-Tests">testBasic2	| someNodes |	someNodes := b nodes: (1 to: 5).	b build.		self assert: b view numberOfElements equals: 5</body><body package="Roassal2-Builder-Mondrian-Tests">testBasicWithNesting	| result pos |	b nodes: (1 to: 2) forEach: [ :nb | 		b shape rectangle color: Color red.		b nodes: (1 to: 3) ].	b applyLayout.		result := ((Array new: 8) at: 1 put: ((22.5@7.5)); at: 2 put: ((77.5@7.5)); at: 3 put: ((8.0@8.0)); at: 4 put: ((23.0@8.0)); at: 5 put: ((38.0@8.0)); at: 6 put: ((63.0@8.0)); at: 7 put: ((78.0@8.0)); at: 8 put: ((93.0@8.0)); yourself).		pos := b view canvas shapes collect: #position.	self assert: pos asArray equals: result</body><body package="Roassal2-Builder-Mondrian-Tests">testBasicWithNestingAndDifferentSizeOfInner	| result pos |	b nodes: (1 to: 2) forEach: [ :nb | 		b shape rectangle 			size: [ :aValue | aValue * 5 ];			color: Color red.		b nodes: (1 to: 3).		b layout grid ].	b applyLayout.			result := ((Array new: 8) at: 1 put: ((15.0@20.0)); at: 2 put: ((55.0@20.0)); at: 3 put: ((7.5@7.5)); at: 4 put: ((20.0@10.0)); at: 5 put: ((12.5@27.5)); at: 6 put: ((47.5@7.5)); at: 7 put: ((60.0@10.0)); at: 8 put: ((52.5@27.5)); yourself).		pos := b view canvas shapes collect: #position.	self assert: pos asArray equals: result</body><body package="Roassal2-Builder-Mondrian-Tests">testBasicWithNestingAndGridLayout	| result pos |	b nodes: (1 to: 2) forEach: [ :nb | 		b shape rectangle color: Color red.		b nodes: (1 to: 3).		b layout grid ].	b build.		result := ((Array new: 8) at: 1 put: ((12.5@12.5)); at: 2 put: ((47.5@12.5)); at: 3 put: ((8.0@8.0)); at: 4 put: ((18.0@8.0)); at: 5 put: ((8.0@18.0)); at: 6 put: ((43.0@8.0)); at: 7 put: ((53.0@8.0)); at: 8 put: ((43.0@18.0)); yourself).		pos := b view canvas shapes collect: #position.	self assert: pos asArray equals: result</body><body package="Roassal2-Builder-Mondrian-Tests">testBasicWithNestingAndNesting	| result pos |	b nodes: (1 to: 2) forEach: [ :nb | 		b shape rectangle color: Color red.		b nodes: (1 to: 3) forEach: [ :nb2 |			b shape rectangle color: Color blue.		b nodes: (1 to: 3) 		].		b layout grid ].	b build.	result := ((Array new: 26) at: 1 put: ((52.5@22.5)); at: 2 put: ((167.5@22.5)); at: 3 put: ((28.0@13.0)); at: 4 put: ((78.0@13.0)); at: 5 put: ((28.0@33.0)); at: 6 put: ((13.5@13.5)); at: 7 put: ((28.5@13.5)); at: 8 put: ((43.5@13.5)); at: 9 put: ((63.5@13.5)); at: 10 put: ((78.5@13.5)); at: 11 put: ((93.5@13.5)); at: 12 put: ((13.5@33.5)); at: 13 put: ((28.5@33.5)); at: 14 put: ((43.5@33.5)); at: 15 put: ((143.0@13.0)); at: 16 put: ((193.0@13.0)); at: 17 put: ((143.0@33.0)); at: 18 put: ((128.5@13.5)); at: 19 put: ((143.5@13.5)); at: 20 put: ((158.5@13.5)); at: 21 put: ((178.5@13.5)); at: 22 put: ((193.5@13.5)); at: 23 put: ((208.5@13.5)); at: 24 put: ((128.5@33.5)); at: 25 put: ((143.5@33.5)); at: 26 put: ((158.5@33.5)); yourself).		pos := b view canvas shapes collect: #position.	self assert: pos asArray equals: result</body><body package="Roassal2-Builder-Mondrian-Tests">testColor	| view |	b node: 1.	b shape rectangle.	b node: 2.	b build.	view := b view.	self assert: view elements first trachelShape color equals: view elements second trachelShape color</body><body package="Roassal2-Builder-Mondrian-Tests">testExampleNodes	b node: '1'		forIt: [ 			b shape rectangle.			b nodes: (1 to:2).			b layout verticalLine ].	b node: '2'		forIt: [ 			b shape circle				size: 10;color:Color green.			b nodes: (3 to:4).			b layout tree ].	b layout horizontalLine.	b build.		self assert: (b view canvas shapes collect: #position) asArray equals: ((Array new: 6) at: 1 put: ((7.5@15.0)); at: 2 put: ((8.0@7.5)); at: 3 put: ((8.0@22.5)); at: 4 put: ((41.5@10.0)); at: 5 put: ((35.5@10.0)); at: 6 put: ((48.5@10.0)); yourself)</body><body package="Roassal2-Builder-Mondrian-Tests">testNodesOnce	b nodes: #(1 2 3).	self assert: b numberOfAllFrames equals: 1.	self assert: b topElements size equals: 3</body><body package="Roassal2-Builder-Mondrian-Tests">testNodesTwice	b nodes: #(1 2 3).	b nodes: #(1 2 3).	self assert: b numberOfAllFrames equals: 1.	self assert: b topElements size equals: 6</body><body package="Roassal2-Builder-Mondrian-Tests">testShape	| n1 n2 |	b shape circle.	n1 := b node: #one.	n2 := b node: #two.		self assert: n1 shape class == RTEllipse.	self assert: n2 shape class == RTBox.</body><body package="Roassal2-Builder-Mondrian-Tests">testShape2	| n1 n2 |	b shape circle.	n1 := b node: #one forIt: [		n2 := b node: #two ].		self assert: n1 shape class == RTEllipse.	self assert: n2 shape class == RTBox.</body><body package="Roassal2-Builder-Mondrian-Tests">testShape3	| n1 n2 |	b shape circle.	b node: #one forIt: [		b shape circle.		n1 := b node: #two ].	n2 := b node: #three.		self assert: n1 shape class == RTEllipse.	self assert: n2 shape class == RTBox.</body><body package="Roassal2-Builder-Mondrian-Tests">testSingleNode	b node: 10.	b build.		self assert: b view numberOfElements equals: 1.	self assert: b view elements anyOne position equals: 2.5 @ 2.5.</body><body package="Roassal2-Builder-Mondrian-Tests">testSingleNodeForIt	b node: 10 forIt: [ b node: 5 ].	b build.		self assert: b view numberOfElements equals: 2.	self assert: b view elements first position equals: 7.5 @ 7.5.	self assert: b view elements second position equals: 8.0 @ 8.0.</body></methods><methods><class-id>Roassal2.RTMondrianTest</class-id> <category>tests - interaction</category><body package="Roassal2-Builder-Mondrian-Tests">testHighlightNeighbor	| elements |	b interaction highlightNeighbors: [ :v | Array with: v + 1 ].	b nodes: #(1 2 2).	b build.	elements := b view elements.		"All nodes have default color"	self assert: (elements allSatisfy: [ :e | e trachelShape color = b computeColorForNode ]).		elements first announce: TRMouseEnter.		self assert: (elements first trachelShape color = b computeColorForNode ).	self assert: (elements second trachelShape color ~= b computeColorForNode ).	self assert: (elements third trachelShape color ~= b computeColorForNode ).</body><body package="Roassal2-Builder-Mondrian-Tests">testHighlightNeighborColor	| elements |	b interaction highlightNeighbors: [ :v | Array with: v + 1 ] color: Color red.	b nodes: #(1 2 2).	b build.	elements := b view elements.		"All nodes have default color"	self assert: (elements allSatisfy: [ :e | e trachelShape color = b computeColorForNode ]).		elements first announce: TRMouseEnter.		self assert: (elements first trachelShape color = b computeColorForNode ).	self assert: (elements second trachelShape color = Color red ).	self assert: (elements third trachelShape color = Color red ).</body><body package="Roassal2-Builder-Mondrian-Tests">testInteraction	| i nodes |	i := b interaction.	nodes :=	b nodes: #(1 2) forEach: [ :each |		self assert: b interaction ~~ i	].	"Maybe this is what we should have"	"self assert: nodes first announcer == nodes second announcer"</body><body package="Roassal2-Builder-Mondrian-Tests">testInteractionNoOverride	"popup and draggable"		self assert: b interaction numberOfInteractions equals: 2.	b interaction when: TRMouseClick do: [ :evt | ].	self assert: b interaction numberOfInteractions equals: 3</body><body package="Roassal2-Builder-Mondrian-Tests">testInteractionOverridePopup	"popup and draggable"		self assert: b interaction numberOfInteractions equals: 2.	"Since there is a popup in the interaction, we cannot have two popup"	b interaction popupText: 'hello'.	self assert: b interaction numberOfInteractions equals: 2</body><body package="Roassal2-Builder-Mondrian-Tests">testShapeAndForEach	| i nodes |	i := b shape.	nodes := 	b nodes: #(1 2) forEach: [ :each |		self assert: b shape ~~ i	].	self assert: nodes first shape == nodes second shape</body><body package="Roassal2-Builder-Mondrian-Tests">testShowEdge	| elements |	b interaction showEdge connectTo: [ :v | Array with: v + 1 ].	b nodes: #(1 2 2 3).	b layout circle initialRadius: 10. 	b build.	self assert: b view numberOfEdges equals: 0.		elements := b view elements.	elements first announce: TRMouseEnter new.	self assert: b view numberOfEdges equals: 2.</body></methods><methods><class-id>Roassal2.RTMondrianTest</class-id> <category>tests - edges</category><body package="Roassal2-Builder-Mondrian-Tests">testBasicEdges	b nodes: #(1 2).	b edges		connectTo: [ :v | v + 1 ].	b build.		self assert: b view edges size equals: 1</body><body package="Roassal2-Builder-Mondrian-Tests">testBasicEdgesAndTree	b nodes: #(1 2).	b edges		connectTo: [ :v | v + 1 ].	b layout tree.	b build.		self assert: b view edges size equals: 1</body><body package="Roassal2-Builder-Mondrian-Tests">testConnectFromTo	b := RTMondrian new.	b nodes: #(1 2).	b edges allowRepetition; connectFrom: 1 to: 2.	b build.		"We have two edges because of the repetition"	self assert: b view numberOfEdges equals: 2</body><body package="Roassal2-Builder-Mondrian-Tests">testConnectFromToNoRepetition	b := RTMondrian new.	b nodes: #(1 2).	b edges noRepetition; connectFrom: 1 to: 2.	b build.		"We have two edges because of the repetition"	self assert: b view numberOfEdges equals: 1</body><body package="Roassal2-Builder-Mondrian-Tests">testEdgeInInnerFrame	b node: '1'		forIt: [ 			b nodes: (1 to: 2).			b edges connectFrom: #yourself.			b layout verticalLine ].	b node: '2'		forIt: [ 			b nodes: (3 to: 4).			b layout tree ].	b layout horizontalLine.	b build</body><body package="Roassal2-Builder-Mondrian-Tests">testEdgeInInnerFrame2	b node: '1'		forIt: [ 			b shape rectangle.			b nodes: (1 to: 2).			b shape line color: Color red.			b edges connectFrom: #yourself.			b layout verticalLine ].	b build.		self assert: b view numberOfEdges equals: 0.</body><body package="Roassal2-Builder-Mondrian-Tests">testEdgeInInnerFrame3	b node: '1'		forIt: [ 			b shape rectangle.			b nodes: (1 to: 2).			b shape line color: Color red.			b edges connectTo: [ :v | v + 1 ].			b layout verticalLine ].	b build.		self assert: b view numberOfEdges equals: 1.	self assert: b view edges anyOne trachelShape from equals: (8.0 @ 7.5).	self assert: b view edges anyOne trachelShape to equals: (8.0 @ 22.5).</body><body package="Roassal2-Builder-Mondrian-Tests">testNoLineShape	b := RTMondrian new.	b nodes: (1 to: 2).	b edges connectTo: 2.</body><body package="Roassal2-Builder-Mondrian-Tests">testNotUseInLayoutInInner	| v e1 e2 e3 e20 e21 e22 e4 e23 |	b nodes: #(1 20) forEach: [ :n |		b nodes: (n + 1 to: n + 3).		b edges 			connectTo: [ :nn | nn + 2 ].				b edges 			notUseInLayout;			connectTo: [ :nn | nn + 1 ].		b layout tree.	].	b build.	v := b view.		e1 := v elementFromModel: 1.	e2 := v elementFromModel: 2.	e3 := v elementFromModel: 3.	e4 := v elementFromModel: 4.	e20 := v elementFromModel: 20.	e21 := v elementFromModel: 21.	e22 := v elementFromModel: 22.	e23 := v elementFromModel: 23.	self assert: e2 encompassingRectangle topLeft - e1 encompassingRectangle topLeft equals: 5.5 @ 5.0.	self assert: e4 encompassingRectangle topLeft - e1 encompassingRectangle topLeft equals: 5.5 @ 30.0.		self assert: e21 encompassingRectangle topLeft - e20 encompassingRectangle topLeft equals: 5.5 @ 5.0.	self assert: e23 encompassingRectangle topLeft - e20 encompassingRectangle topLeft equals: 5.5 @ 30.0.</body><body package="Roassal2-Builder-Mondrian-Tests">testUseAssociationsWithError	b := RTMondrian new.	b nodes: #(1 2 3).	b edges		useAssociation: 1 -&gt; 5.	b build.		self assert: b view numberOfEdges equals: 0</body></methods><methods><class-id>Roassal2.RTMondrianTest</class-id> <category>tests - frames</category><body package="Roassal2-Builder-Mondrian-Tests">testDefaultFrameDepth	self assert: b rootFrame depth equals: 1.</body><body package="Roassal2-Builder-Mondrian-Tests">testDefaultFrames	self assert: b numberOfAllFrames equals: 1.</body><body package="Roassal2-Builder-Mondrian-Tests">testDefaultRootFrameAndCurrentFrame	self assert: b rootFrame equals: b currentFrame</body><body package="Roassal2-Builder-Mondrian-Tests">testFramesWithNestingNesting	b nodes: (1 to: 1) forEach: [ :nb | 		b nodes: (2 to: 2) forEach: [ :nb2 |		   b nodes: (3 to: 3) ] ].	b build.		"Checking the children links"	self assert: b numberOfAllFrames equals: 3.	self assert: b rootFrame numberOfChildrenFrames equals: 1.	self assert: b rootFrame childrenFrames first numberOfChildrenFrames equals: 1.	self assert: b rootFrame childrenFrames first childrenFrames first numberOfChildrenFrames equals: 0.		"Checking the parent links"	self assert: b rootFrame childrenFrames first parentFrame equals: b rootFrame.	self assert: b rootFrame childrenFrames first childrenFrames first parentFrame equals: b rootFrame childrenFrames first.		"Checking the number of elements"	self assert: b rootFrame numberOfElements equals: 1.	self assert: b rootFrame childrenFrames first numberOfElements equals: 1.	self assert: b rootFrame childrenFrames first childrenFrames first numberOfElements equals: 1.		"Checking the depth"	self assert: b rootFrame depth equals: 1.	self assert: b rootFrame childrenFrames first depth equals: 2.	self assert: b rootFrame childrenFrames first childrenFrames first depth equals: 3.</body><body package="Roassal2-Builder-Mondrian-Tests">testFramesWithNestingNesting2	b nodes: (1 to: 1) forEach: [ :nb | 		b nodes: (1 to: 2) forEach: [ :nb2 |		   b nodes: (1 to: 3) ] ].	b build.		"Checking the children links"	self assert: b numberOfAllFrames equals: 4.	self assert: b rootFrame numberOfChildrenFrames equals: 1.	self assert: b rootFrame childrenFrames first numberOfChildrenFrames equals: 2.	self assert: b rootFrame childrenFrames first childrenFrames first numberOfChildrenFrames equals: 0.		"Checking the parent links"	self assert: b rootFrame childrenFrames first parentFrame equals: b rootFrame.	self assert: b rootFrame childrenFrames first childrenFrames first parentFrame equals: b rootFrame childrenFrames first.		"Checking the number of elements"	self assert: b rootFrame numberOfElements equals: 1.	self assert: b rootFrame childrenFrames first numberOfElements equals: 2.	self assert: b rootFrame childrenFrames first childrenFrames first numberOfElements equals: 3.		"Checking the depth"	self assert: b rootFrame depth equals: 1.	self assert: b rootFrame childrenFrames first depth equals: 2.	self assert: b rootFrame childrenFrames first childrenFrames first depth equals: 3.</body><body package="Roassal2-Builder-Mondrian-Tests">testParentFrame	| f |	self assert: b currentFrame equals: b rootFrame.	f := b pushNewFrame.		self assert: b currentFrame equals: f.	self assert: b rootFrame ~~ f.			self assert: b rootFrame equals: f parentFrame.		b popFrame.	self assert: b currentFrame equals: b rootFrame.</body><body package="Roassal2-Builder-Mondrian-Tests">testPartitionedLayoutInInnerFrame	b := RTMondrian new.	b node: 5 forIt: [ 		b node: 'hello'.		b layout			for: [ :str | str size &gt; 5 ] use: RTGridLayout new;			horizontalLine ].	b layout grid.	b build.</body><body package="Roassal2-Builder-Mondrian-Tests">testPushingNewFrame	| f |	f := RTMondrianFrame new.	b pushFrame: f.	self assert: b rootFrame ~~ b currentFrame.	self assert: b currentFrame equals: f.</body><body package="Roassal2-Builder-Mondrian-Tests">testRootFrameAndCurrentFrame	b nodes: #(1 2).	self assert: b rootFrame equals: b currentFrame</body></methods><methods><class-id>Roassal2.RTMondrianTest</class-id> <category>tests - normalizer</category><body package="Roassal2-Builder-Mondrian-Tests">testNormalizer	b := RTMondrian new.	b nodes: #(1 2 3).	b normalizer		normalizeSize: #yourself min: 5 max: 30.	b build.		self assert: b view elements first trachelShape width equals: 5.	self assert: b view elements second trachelShape width equals: 17.5.	self assert: b view elements third trachelShape width equals: 30.</body><body package="Roassal2-Builder-Mondrian-Tests">testNormalizer02	b := RTMondrian new.	b nodes: #(1 2 3).	b normalizer		normalizeSize: #yourself.	b build.		self assert: b view elements first trachelShape width equals: 5.	self assert: b view elements second trachelShape width equals: 17.5.	self assert: b view elements third trachelShape width equals: 30.</body></methods><methods><class-id>Roassal2.RTMondrianTest</class-id> <category>tests - source</category><body package="Roassal2-Builder-Mondrian-Tests">testSourceConnectFromAllTo	b nodes: (1 to: 2) forEach: [ :each |		b node: each * 10 ].	b edges source: (Array with: (Array with: 10) -&gt; 20) connectFromAll: #key to: #value.	b build.		self assert: b view edges size equals: 1</body><body package="Roassal2-Builder-Mondrian-Tests">testSourceConnectFromTo	b nodes: (1 to: 2) forEach: [ :each |		b node: each * 10 ].	b edges source: (Array with: 10 -&gt; 20) connectFrom: #key to: #value.	b build.		self assert: b view edges size equals: 1</body><body package="Roassal2-Builder-Mondrian-Tests">testSourceConnectFromToAll	b nodes: (1 to: 2) forEach: [ :each |		b node: each * 10 ].	b edges source: (Array with: 10 -&gt; (Array with: 20)) connectFrom: #key toAll: #value.	b build.		self assert: b view edges size equals: 1</body></methods><methods><class-id>Roassal2.RTMondrianTest</class-id> <category>running</category><body package="Roassal2-Builder-Mondrian-Tests">setUp	super setUp.	b := RTMondrian new.</body></methods><methods><class-id>Roassal2.RTBezierLineTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| v shape  edge els |	v := RTView new.	shape := RTEllipse new size: 10; color: (Color purple alpha: 0.3).	els := (shape elementsOn: (1 to: 4)) @ RTDraggable.	v addAll: els .	RTHorizontalLineLayout on: v elements.	edge := (RTBezierLine new controllingElements: v elements) edgeFrom: els first to: els last.	v add: edge.		self assert: (els first connectedEdges includes: edge).	self assert: (els second connectedEdges includes: edge).	self assert: (els third connectedEdges includes: edge).	self assert: (els fourth connectedEdges includes: edge).</body><body package="Roassal2-Core-Tests">testControllingElementsAndBlock	| es shape1 edge1 shape2 edge2 v |		es := RTBox elementsOn: (1 to: 5).	v := RTView new.	v addAll: es.		shape1 := RTBezierLine new.	shape1 controllingElements: [ :edge | 		Array 			with: (v elementFromModel: 2)			with: (v elementFromModel: 3) ].	edge1 := shape1 edgeFrom: es first to: es fourth.		shape2 := RTBezierLine new.	shape2 controllingElements: [ :edge | 		Array 			with: (v elementFromModel: 3)			with: (v elementFromModel: 4) ].	edge2 := shape2 edgeFrom: es first to: es last.</body><body package="Roassal2-Core-Tests">testControllingElementsAndBlock02	| es shape1 edge1 shape2 edge2 |		es := RTBox elementsOn: (1 to: 5).	shape1 := RTBezierLine new.	shape1 centerOfElements: [ :edge | 		es copyFrom: edge from model + 1 to: edge to model - 1 ].	edge1 := shape1 edgeFrom: es first to: es fourth.		shape2 := RTBezierLine new.	shape2 centerOfElements: [ :edge | 		es copyFrom: edge from model + 1 to: edge to model - 1 ].	edge2 := shape2 edgeFrom: es first to: es last.</body><body package="Roassal2-Core-Tests">testControllingElementsAndBlock03	| v es shape1 edge1 shape2 edge2 |	v := RTView new.	es := RTBox elementsOn: (1 to: 5).	v addAll: es.	shape1 := RTBezierLine new.	shape1 centerOfObjects: #(2 3) inView: v.	edge1 := shape1 edgeFrom: es first to: es fourth.		shape2 := RTBezierLine new.	shape1 centerOfObjects: #(3 4) inView: v.	edge2 := shape2 edgeFrom: es first to: es last.</body><body package="Roassal2-Core-Tests">testControllingElementsAndBlock04	| v es shape1 edge1 shape2 edge2 |	v := RTView new.	es := (RTEllipse new size: 10; color: (Color blue alpha: 0.4)) elementsOn: (1 to: 5).	v addAll: es.	es @ RTDraggable @ RTPopup.	shape1 := RTBezierLine new.	shape1 centerOfObjects: [ :f :t | f + 1 to: t -1 ] inView: v.	edge1 := shape1 edgeFrom: es first to: es fourth.		shape2 := RTBezierLine new.	shape2 centerOfObjects: [ :f :t | f + 1 to: t -1 ] inView: v.	edge2 := shape2 edgeFrom: es first to: es last.	v add: edge1; add: edge2.		RTHorizontalLineLayout on: es.	"	v open."	self assert: edge1 trachelShape  numberOfPoints = 3.	self assert: edge2 trachelShape  numberOfPoints = 3</body><body package="Roassal2-Core-Tests">testFollow	| v e bezier startNode endNode edge |	v := RTView new.	e := RTBox elementsOn: (Collection withAllSubclasses). 	v addAll: e.	bezier := RTBezierLine new 					color: Color blue;					follow: #superclass.		startNode := v elementFromModel: OrderedCollection.	self assert: (bezier getFollowersOf: startNode using: #superclass) size = 3.		endNode := v elementFromModel: Bag.	edge := bezier edgeFrom: startNode to: endNode.	self assert: ((bezier getControllingElementsFromFollowFor: edge using: #superclass) collect: #model) asArray = (Array with: SequenceableCollection with: Collection).</body><body package="Roassal2-Core-Tests">testFromTo	| v e1 e2 e3 l |	v := RTView new.	e1 := RTBox element.	e2 := RTBox element.	e3 := RTBox element.	e1 @ RTDraggable.	e2 @ RTDraggable.	l := RTBezierLine new controllingElements: (Array with: e3); edgeFrom: e1 to: e2.	v add: e1; add: e2; add: l.		self assert: l from == e1.	self assert: l to == e2.</body><body package="Roassal2-Core-Tests">testFromToAndControllingElements	| e1 e2 l |	e1 := RTBox element.	e2 := RTBox element.		l := RTBezierLine edgeFrom: e1 to: e2.	self assert: l shape controllingElements isEmpty</body><body package="Roassal2-Core-Tests">testPointsNumber	| v e e1 e2 e3 e4 l1 l2 |	v := RTView new.	e1 := RTBox element.	e2 := RTBox element.	e3 := RTBox element.	e4 := RTBox element.	e := Array with: e1 with: e2 with: e3 with: e4.	e2 translateBy: (100@0).	e3 translateBy: (200@0).	e4 translateBy: (300@0).	l1 := RTBezierLine new controllingElements: (Array with: e3 with: e4); edgeFrom: e1 to: e2. "well defined"	l2 := RTBezierLine new controllingElements: e; edgeFrom: e1 to: e4. "wrongly defined"	v add: e1; add: e2; add: l1; add: l2.	self assert: l1 trachelShape points size = 4.	self assert: l2 trachelShape points size = 4.</body></methods><methods><class-id>Roassal2.RTBezierLineTest</class-id> <category>vertical horizontal</category><body package="Roassal2-Core-Tests">testHorizontal	| v shape e1 e2 e |	v := RTView new.	shape := RTEllipse new size: 15; color: Color blue trans.	e1 := shape element.	e2 := shape element.	e2 translateBy: 50 @ 25.	v add: e1; add: e2.		e := RTBezierLine horizontal edgeFrom: e1 to: e2.	v add: e.</body><body package="Roassal2-Core-Tests">testHorizontal02	| v shape e1 e2 e |	v := RTView new.	shape := RTEllipse new size: 15; color: Color blue trans.	e1 := shape element.	e2 := shape element.	v add: e1; add: e2.		e := RTBezierLine horizontal edgeFrom: e1 to: e2.	v add: e.</body><body package="Roassal2-Core-Tests">testVertical	| v shape e1 e2 e |	v := RTView new.	shape := RTEllipse new size: 15; color: Color blue trans.	e1 := shape element.	e2 := shape element.	e2 translateBy: 50 @ 25.	v add: e1; add: e2.		e := RTBezierLine vertical edgeFrom: e1 to: e2.	v add: e.</body><body package="Roassal2-Core-Tests">testVertical02	| v shape e1 e2 e |	v := RTView new.	shape := RTEllipse new size: 15; color: Color blue trans.	e1 := shape element.	e2 := shape element.	v add: e1; add: e2.		e := RTBezierLine horizontal edgeFrom: e1 to: e2.	v add: e.</body></methods><methods><class-id>Roassal2.RTBoxPlotExample</class-id> <category>sources</category><body package="Roassal2-Builder-BoxPlot-Examples">exampleBoxPlot1| b createList r ds |r := Random new.createList := [ :size :d1 :d2 | (1 to: size) collect: [ :i | d1 + (r next * (d2-d1))] ].b := RTGrapher new.b extent: 70@300.ds := RTBoxPlotDataSet new.	ds points: (createList value: 20 value: 0 value: 20).	b add: ds.b axisX noLabel; noTick.b build.^ b view.</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleBoxPlot2| b createList r |r := Random new.createList := [ :size :d1 :d2 | (1 to: size) collect: [ :i | d1 + (r next * (d2-d1))] ].b := RTGrapher new.(1 to: 10) do: [ :i | | ds |	ds := RTBoxPlotDataSet new.	ds points: (createList value: 20 value: 0 value: 20).	b add: ds.].b build.^ b view.</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleBoxPlot3| b createList r d today |r := Random new.createList := [ :size :d1 :d2 | (1 to: size) collect: [ :i | d1 + (r next * (d2-d1))] ].b := RTGrapher new.today := d := Date today.(1 to: 10) do: [ :i | | ds |	ds := RTBoxPlotDataSet new.	ds points: (createList value: 20 value: 0 value: 20).	ds model: d.	ds x: [ :date| date julianDayNumber - today julianDayNumber + 1 ].	b add: ds.	d := d next.].b build.^ b view.</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleBoxPlot4| b createList r d today |r := Random new.createList := [ :size :d1 :d2 | (1 to: size) collect: [ :i | d1 + (r next * (d2-d1))] ].b := RTGrapher new.today := d := Date today.(1 to: 10) do: [ :i | | ds |	ds := RTBoxPlotDataSet new.	ds points: (createList value: 20 value: 0 value: 20).	ds model: d.	ds x: [ :date| date julianDayNumber - today julianDayNumber + 1 ].	b add: ds.	d := d next.].b axisX labelRotation: -30;	labelConversion: [ :v | Date julianDayNumber: v + today julianDayNumber -1];	numberOfLabels: 10.b build.^ b view.</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleBoxPlot5| b createList r d today |r := Random new.createList := [ :size :d1 :d2 | (1 to: size) collect: [ :i | d1 + (r next * (d2-d1))] ].b := RTGrapher new.today := d := Date today.(1 to: 10) do: [ :i | | ds |	ds := RTBoxPlotDataSet new.	ds showMean: true.	ds boxShape if: [ :item | item median &gt; 10 ] fillColor: [ Color green ];	if: [ :item | item median &lt; 5 ] fillColor: [ Color orange ];	if: [ :item | item hasOutlier ] fillColor: [ Color red ].	ds boxLineShape color: Color blue.		ds points: (createList value: 20 value: 0 value: 20).	ds model: d.	ds x: [ :date| date julianDayNumber - today julianDayNumber + 1 ].	b add: ds.		d := d next.].b axisX labelRotation: -30;	labelConversion: [ :v | Date julianDayNumber: v + today julianDayNumber -1];	numberOfLabels: 10.b build.^ b view.</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleMethodDistribution| b ds |b := RTGrapher new.b extent: 400 @ 200.RTShape withAllSubclasses do: [ :cls |	ds := RTBoxPlotDataSet new.	ds points: (cls rtmethods collect: #numberOfLinesOfCode).	b add: ds.].b build.^ b view</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleTitle| b classes deco |b := RTGrapher new.b extent: 700 @ 200.classes := RTShape withAllSubclasses.classes do: [ :cls | | ds |	ds := RTBoxPlotDataSet new.	ds points: cls rtmethods.	ds model: cls.	ds y: [ :method | method numberOfLinesOfCode ].	b add: ds.].b axisX noTick; noLabel.deco := RTHorizontalAllValuesDecorator new.deco labelRotation: -45;	labelConversion: [ :index | classes at: index ].b addDecorator: deco.b build.^ b view</body></methods><methods><class-id>Roassal2.RTBoxPlotExample</class-id> <category>icons</category><body package="Roassal2-Builder-BoxPlot-Examples">exampleBoxPlot1Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACjUlEQVR4XuXcvWrCUBiAYW8ugxfiLTg4+DO4eAfOjg6OguLPpOLipCgILiq6KCIIKn6pX6g2hTRTck7s+0LQ1uE0eYjhI9aU6/JLUin+IeCD8OOD8EH48UH4IPz4IHwQfnwQPgg/Pgg/PggfhB8fhA/Cjw/CB+HHB+GD8OOD8OOD8EH48UH4IPz4IHwQfp8Bst1u5X6/e5v+vNlshH9ILYJUq1VZLBbettvtZL/fv0GOx6M7n8+9R34GQPTgp9NpabVa3jYcDiWfz/86Q1arFf+MSdI1hA/CB+GD8EF+Wi6Xwgfhg/BB+CB8ED7IR4Lcbjc5nU7eFjSp80EMg4zHY6nVatLv9wMn9dFohJrUrYNkMhnpdDr8Sf3Z4/GQ9Xot+si/hiSgw+Egz/31HvkgfBA+CB+ED8IH4YPwQfgg/wpEJ/Wwe+p8EAuTetg9ddKknggQndT599T51xA+CB+ED8IH4YPwQfggfBA+CB/EJMj1en0Pg0GffOeDGAap1+veUPg9mYv/j+FP6hZAZrOZ5HI5eR54KRQKor1e0+d6hvh/xwfhX0P4IHwQPkhi4n+UlA/CB+GD8EH4IB8NEjap661dGwfmcrlYWXc6ndoFKRaLUiqVAid1fd5ut91msym9Xs81uTUaDdf0mroNBgPXKki325VyufznpK7f9GBjUtd1bZwhUawb2zUk7K0szl7r6r8GmFz3fD5Hsr+xgIS9lcWZf91sNmsUpFKpRLK/sYCEvZXFmX9dhdHbAybWnUwm4jhOJPvL/3qmhMUH4YPw44PwQfjxQfgg/PggfBB+fBA+CD8+CD8+CB+EHx+ED8KPD8IH4ccH4YPw44Pw44PwQfjxQfgg/PggfBB+5voCUYQRoBEyxGMAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleBoxPlot2Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADyklEQVR4XuXcTUvrQBSHcT+1W19Av4O4tCCCC0FcWFHRTe2i+4qvSK2Kb2CrCLYn9gQK3jozt2kzmYnPHwa8uaHmnl8nyWQmdyZJ+IkpM/wS8EH44YPwQfjhg/BB+OGD8EH44YPwQfjhg/DDB+GD8MMH4YPwwwfhg/DDB+GD8MMH4YcPwgfhhw/CB+GHD8IH4Sd+kLe3N+n3+3J7eyv656+vL9HGL2nAHrKysiKvr6/y8vIip6enaRv+3dXVVdJsNvkVLgpkfn5etra2ZG5uTmq1mlSr1bT93GeAkkuPUfTRbZ1OR25ubrz1SO35w94/mouLCynlNcQEonhHR0cy7edoLi8vM31O1v1thTdtPzw8lI2NDdGUCkRzfX39a7ue9mwFywJSr9dFW9EgmvPzcyldD7GBuPY3bddv4t3dXabC80E8guhNg7ZpQT4/P+X+/l74IJGATFL4PwXiKqQNxHS3wwcJBGLbPxTIx8eHtFqtX3dT+tl6PMHvsvTgbCP1vwhiK3w0ILOzs+kBmEbqJycnCR+kIJDBQCjZ39+XhYUFOT4+HnukzgcpyTXk+fnZOK7IC6Tb7crw9MoHmaLAk24fLYxtOx8kMpD393fjXdPwUc64heeD5ASStcB8kMhAdnZ2ZNASnZzjg4yxfX19PW38HsI/ZcUB4ppT9wky7Al8kJG45tSzjNT5PSSnkXrWOXU+SGTXEL3nN42Y+SCBQDSmCaq8QHS9mGk1Ch8kEIjtWRYfJDKQRqORtnELqbN/g2dZfBB+D+GD8EFMIIPxTJLH3VdWEE0ej9mjAHl8fBSd9NefHx4eZBoQ1/55LAPStVfafIHoBJvWICjI8vJy+o/Uhdc6lTtaMNNIPRSIa3teE1HBlwGtrq6mo/ODgwNZWlr652D0gMu8UM5VeNtxolcu6jXHtgTUNwh/KWnG1xHyALFN4fJBAoFMsp0PwgeJB0RPKdqyFN62Px7E9M7gJD3Eliwv5ugd4ubmpky7XqvUIK7CFA1iS7vdFm1ZelpwkJ+j89GReq/Xk7OzMykaVkfMlUql8PflB0+SZXd3N+xIfThCN43U9Vu6trYmOtVbZNvb25Pt7e0gv9f2GnVhIIuLi+nKd9NIXd/de3p6KvybWvbf6+Ua4jqV+cz/Hnb6TF7/xYgXENepzGdcDzt9x7YcKgoQ16nMZ1wPO31lnOVQ0dz28sMH4YPwwwfhg/DDB+GD8MMH4YcPwgfhhw/CB+GHD8IH4YcPwgfhhw/CDx+ED8IPH4QPwg8fhA/CDx+ED8IPH4QfPkjM+Qbkn0SlmLU0PQAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleBoxPlot3Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADzUlEQVR4XuXcS0vzQBSHcT91t7WCfgcpuunCRQULBRdKFQRpsbpW8V5b8C5oEUV7Yk94C77pJGY00yQ+f5iF05Km8zOXkxmd8jx+spQp/hDwQfjhg/BB+OGD8EH44YPwQfjhg/BB+OGD8MMH4YPwwwfhg/DDB+GD8MMH4YPwwwfhhw/CB+GHD8IH4YcPwgfhJ/sgT09PMhgMpNfrif78/v4u2vhDmuIRMj8/L4+Pj/Lw8CCHh4d+G712dnbmHRwcZH4Anp+fRVvuQaanp6VWq0mxWJRmsylra2t++/qeIYrxiypisG9jY0MajUYqA3NyciKIa0gYyPn5udi8P6yfDwIDSQMKA/L29ibagv2np6ei1zsZJgtQqCNEB58PEsj9/b1cXl7GHvhOpyPa8gCi3y13IPrltQVzc3Mj2uK+P4sgx8fHfwfEtp8PEpJutxtaqacFYhp4DEihUPB3wlSpt1otzxXI3t6ebG9vCx/kXzY3Nz2trEulkmxtbcWu1JM8QmwGnn8NgYFEbYcP4hDk6upKtAXfjwfR2iSswDQN/Gg7NgNpcyTkFmRpaclvkz5y+CCOj5Dv+oMDYwuSVD8fhA/CB8kUSNScOh8kBZCoOXWXlXrWQLQ4HjZPF36kWqnbzqnnHWR4hyh6lxgceP41hH/K4oPwQX7QPyo8+SAxQTSjORT+EZIRENMzqLRAwvaHD5IiiOmZVbValWHjg2QFJJdHyO3trby8vPg7cH19Lb8B0dX0puU+tiDDQtUfHEP9YLzY/ymQubk5f7JGF17rVG5wwEyVehhIGKCiX1xcWC0Psnn8bgvS7/f9X5xgv96omPonClIul/3qXFeuz87O/rcjumO2KxdNq+Jtb5+TAtEB1gV9NlO7uZxTjwJJop5JCuQn/XwQPggfhA+SEIjefZlWi/BBIi7etttJYhmQ7cBr3+7urhE2tyBJbcc0wO12e2xeJkmQqPBBQgY4LH8e5Gt1HqzUPz4+5Ojo6Nc7qDXO+vr62HZ0lnJ1dXWsXz/39fU1NqBuf3l5eewUpPuur8XdT/3c/f39dEFGFbqpUtcvX6lURKd6J9kUr16vj33uysqKt7i46Gx/FhYWZGdnJ12QmZkZf+W7qVLX39K7u7uJ/xVr3j/XyTUk6lTmMt897HSZpP7FiBOQqFOZy0Q97HSdsOVQmQCJOpW5TNTDTleJsxwqM7e9/PBB+CD88EH4IPzwQfgg/PBB+OGD8EH44YPwQfjhg/BB+OGD8EH44YPwwwfhg/DDB+GD8MMH4YPwwwfhg/DDB+GHD5LlfAI06kS7B0UeLAAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleBoxPlot4Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFJ0lEQVR4XuWcZ0v8TBTF/59Zv4D6QkRQQRRfKHZZRBHrC8Xee++KvWPv9e6zJxCJMVk2PtnMZM+FZfUYk8n9JZm5d27mXzTKbzrZP34X8APhN34g/ED4jR8IPxB+4wfCD4Tf+IHwA+E3fiD8xg+EHwi/8QPhB8Jv/ED4gfAbPxB+IPzGD4Tf+IHwA+E3tUByc3NlZGRERkdHBb8XFRUJv4sVApmYmJCtrS3js7u7K4+Pj99AXl5eZHx8PHpycpIUSDjW3NycbG5uil3HBYI2WfXb21vp6OiQ6elpSVkg3d3dMjk5KVNTU7K6uir9/f0/TnZgYMDTyff29vqyvRf97u5Oenp6ZGFh4cffXl9fDc1+QQFsaWmpb2AD7UPCAMRPnQLI8/OzdHZ2ysHBgegOZGdnRyjukLDr2gNJVcenFBCMymIjtV+jMonZ8vKyfH5+Cj8QDYC46fxAyICYxz0+PpbQAMF4HLHH0NCQY6SuAoibI9/f32V7e1uur68lZYEgdbK+vi5LS0uOkXpLS4tnRyYKxM1hXvWUAoIG7O3tGdG6l0jdzH3xA9GgD/mr43UB8vb2JmdnZ3J5eSn8QDQA4qZ/fHzI7Oys3N/fCz+QJDjST+D8QDTSQwvk/PxcIpFItKurix+IznfI1dUVsr3R2GQXPxD+R1bIgCBSjzenzg9EQaQeb07dKVIPCxDEGU1NTdG+vr7wAMH4HXPLXubU+e8Q/j6EHwg/kBABMXNBNzc3CTt+f39fTk9P+YEkA4jX9Lvb9qiPis3DRFEsl6hj7H3cXxyMC+ro6EguLi74geiQRPxLuj6UQFDMgImuRIsZ/HIkMgFtbW3RwcFBfiD/R4/nAKcJMJo7JCcnx2hAYWGh6ALEj/38EYh4LS73HQgKrvGNIgJrY7zOqWsKRPxof2BAkDJHamFlZUWc7oYw3yF+tZO/D+EHwg+EH4iP+49XnMAPhL/6XQ0QpxSGSsfQA0m2Y7y+ycQPJMmO8WopBcScR3eK1PFuIMyuI/XupLe2tv7Sn56eBKVBCNIS3Y9XPZbLSnh7ZHtramp+ZXvj7ScwINZ5dKdIHe+pYxu8uGn9oGIejrZqmCPBiY6NjSW0fTx9Y2PDVUd77TqubCfdbXs3He/Mf319qU2doIN2i9T9uoLDrmvTh/CbRkAaGxtFFx137/DwsJL2KAWCfmB+fl7QOaMsyHyMqdJh2dnZguUz8FIRovKgjqscSF1dneTn50t1dbUUFBR8FzGo0tGp43VqOCktLc1YnySI4yoHgpEORhyRSEQwDdrQ0CAqdbzYidEehtwYijc3NwdyXC36EKyWg6j48PBQMFGFagyVOh4blZWVxs8VFRXGYyqI42oBpKqqSvApKyv78exUoWNhGtNRuHIXFxcDa49yIHl5eUa6Gs9MBEMqdXTS9fX1hpPwaAKQoNqjHEhGRoaxRBI6Mkzb1tbWGo0rLi42vu16Zmamo56VleWol5SUOOrmcNJte1TgYxuMeOCw9PR0x+3hWLf24H/tutv5KgeCVRra29uNDtJcscGqI7eDK9SuY8IHS+rZdVQcmoURVr28vNz42HX7cNLUAWJtbe17JThTR4drre0yddw91lXgTB3DYoyYrDo6a/v5ahUYosFO1RfQnaY+oc/MzIiX/eikA9zDw4OkVKTOb/xA+IHwGz8QfiD8xg+EHwi/8QPhN34g/ED4jR8IPxB+4wfCD4Tf+IHwA+E3fiD8xg+EHwi/8QPhB8Jv/ED4gfBbsuw/+njh8GU4VAsAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleBoxPlot5Icon	^ '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'</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleMethodDistributionIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEAElEQVR4XuXc20syQRjH8f5rL7uuu6LCG6GLIMroLuhw0TmiwsoyOlIQdKSiUIuix9dnYGPzHXfdXHfX/f5gEV101vk4Mzuzak+txk+S0sOvAj4IP3wQPgg/fBA+CD98ED4IP3wQPgg/fBB++CB8EH74IHwQfvggfBB++CB8EH74IPzwQfgg/PBB+CD88EH4IPzEB/L9/S3v7+8yNDQken91ddXc51dVTCBjY2Oyv78v5XLZIPT29prNSbValaenJz5QlF2WtoilpSU5OjqSQqEgFxcXvwD4IAkbQ/ggfBA+CB+kVtNue3JyUvgg/BbCB+G3EH7iBenv7zen0fwqDwgyMTEhCwsLsrGxYSrPmbHzW0hMIM/PzzI1NSVnZ2dyeXn5M2N3z9Rvb2/5IFGBrK2tSTable3tbdPF6MDGbyH8QZ0Pwgfhg4QWqefu7k5vpPHxxsf4IBHl8PBQ+C2ED8IH4YPwQeIFGR8fl6+vL89r6nyQCEEUY35+3vOaehJn6qkF2dzclEql0nXX1OMGeXh4kK4dQ+otTtIGEtZKdioG9foYVzs5OZGXlxc+SBKiEPWVabPxQTyi41A+n5e4QPRx3T4/P4UPEmMLccYo5zE9M7Q9z29/kC7z9PQ0lC4zFYN6sxZiq/DX11dTcXomGRZImF1mYlrI/f29RAFyfX1tIB4fH7sDRCeFehv2TF2Xx732Hxwc8EFsIFtbW7+upTfO1BXnLzP1YrHYMojtGoZXC0o1yPn5uXx8fLQ1U7eNEUFA9DcqQVpQp0BaPUtzl+9+/VjHEL8u6S8g7gqJA8TZrycAXQdiq3CnQnWdx69J20DcFebVpYUJYtvfNSDuiZ8bpHEecHNz4wnS7A01ez4fxKeF6MTo+Pj4v4lRp0H8WmDcIKOjo5LJZCRyEL9PaJBPuB+ITuz025XuiV0zcNugnOoWYvuE2mbC7gpzH7Dt+X4grYA55duOvRMgGud6iO39BVlLCwXk7e3tp3B3hcS933bsfvvbXZy0HV/bIIODg+YF1tfXf74Fn+TFxTTFCqKi2g3oN+B1axjAzUxeUdK0lUqlyMrSMTAQyPLysjnAnZ0d8y34xv3tLjUkMfoBjKosr3/G4P/XSTd0Wc2iK786GdSBy9ZywsrMzMyvMgYGBmR4eDj08nTg1d/CRPG+rq6uZHp6Wvb29szCrVNmWyD6U7e5uTnZ3d2VxcXFjoGsrKyYvlbL0CtxIyMjksvlQi9P50Ozs7MSxfvSRdq+vj4Dof8l45TJ77LS1GXxwwfhg/DDB+GHD8IH4YcPwgfhhw/CB+GHD8IH4YcPwg8fhA/CDx+ED8IPH4QPwg8fhA/CDx+EHz4IH4QfPggfhJ+28g/i0bNGZk1ymwAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-BoxPlot-Examples">exampleTitleIcon	^ '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QmCC'</body></methods><methods><class-id>Roassal2.RTBoxPlotExample</class-id> <category>accessing</category><body package="Roassal2-Builder-BoxPlot-Examples">label	^ 'Box Plot'.</body></methods><methods><class-id>Roassal2.RTHorizontalTimelineDecoratorTest</class-id> <category>tests</category><body package="Roassal2-Builder-Timeline-Tests">testBasic	| data b s p |	data := #(#(c1 0 5) #(c1 6 8) #(c2 0 5) #(c2 8 10) #(c3 0 10) #(c4 5 10) #(c5 5 8)).	b := RTTimeline new.		s := RTTimelineSet new.	s objects: data.	s lineIdentifier: #first.	s start: #second.	s end: #third.	b add: s.		b axisX 		numberOfLabels: 5;		labelRotation: -45;		labelConversion: [ :v | Date year: 2015 day: v ]. 	p := RTHorizontalTimelineDecorator new.	p addLineAboveIdentifier: #c3.	p addLineAboveIdentifier: #c2.	p shape line width: 5; color: (Color red alpha: 0.3).	b addDecorator: p.	b build.		self assert: b view edges last from position equals: 0 @ (-163 / 2).	self assert: b view edges last to position equals: 300 @ (-163 / 2).</body></methods><methods><class-id>Roassal2.RTLegendBuilderExample</class-id> <category>sources</category><body package="Roassal2-Builder-Legend-Examples">exampleBelow	|  lb b |	b := RTMondrian new.	b shape rectangle		width: [ :c | c numberOfVariables * 5 ];		height: #numberOfMethods.	b nodes: RTShape withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b normalizer		normalizeColor: #numberOfLinesOfCode using: (Array with: Color black with: Color red ) using: [:vv | (vv + 1) ln * 5 ] .	b build.	lb := RTLegendBuilder new.	lb view: b view.	lb addText: 'System complexity view'.	lb addRectanglePolymetricWidth: 'number of methods' height: 'Line of code' box: 'a Pharo class'.	lb addColorFadingFrom: Color black to: Color red text: 'number of lines of code'.	lb build.	^ b view</body><body package="Roassal2-Builder-Legend-Examples">exampleOnDemand	|  lb b |	b := RTMondrian new.	b shape rectangle		width: [ :c | c numberOfVariables * 5 ];		height: #numberOfMethods.	b nodes: RTShape withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b normalizer		normalizeColor: #numberOfLinesOfCode using: (Array with: Color black with: Color red).	b build.	lb := RTLegendBuilder new.	lb onDemand: '+Info'.	lb view: b view.	lb addText: 'System complexity view'.	lb addRectanglePolymetricWidth: 'number of methods' height: 'Line of code' box: 'a Pharo class'.	lb build.	^ b view</body></methods><methods><class-id>Roassal2.RTLegendBuilderExample</class-id> <category>icons</category><body package="Roassal2-Builder-Legend-Examples">exampleBelowIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAIGklEQVR4XuWd3U9URxTAaVPT9kG09b3/ikmb+A/4QGrSlyYmKvgRFE2TKqsFbG3at/ZJTXzTmiAxRqpEoMbYIN+fiojgBwgoK4LIwrLndn7jDr2su7C7btbdPSc5mTv3zp175/xm7pwzm3u3yPP0Sy5JkX4T6AeiX/QD0Q9Ev+gHoh+IftEPRD+QvJDHjx/LX+fPi34gOSJNjY3y9dat+oHoB6IfiH4g+oHoB7KuhMNhGRoaktHRURkbG5Oh+/fl9OnTMjIyIgMDA9LW1iZPnz4VRD+QDEkkEpEHDx5YIy8tLQn5R48eyeDgoExNTcnr16/tcWf0J0+eyOLiovT29srMzIw0NTVJd3e3tLa2SnNzs4yPj0t/f7/cN/BQyuoHEsfozsjOQM+ePZO+vj4JhUKrDPbixQuZnp62IwJAsXVRfmJiwirl2Pfw4UMLjNHEcUbPwsKCtLe3y61bt2yebcBxHGgApUzBAsEgsUamh9Pwubm5NRvO8ZcvX1ojr1cWmZ2dXSkDDP85jCZAYnR/eTfKgsGgXLlyxY4+pLOzU2pra4WOQFkg9/T0rMDOGyDNTU3e8cpKr+LgQfm2pETqLl1KuQEjxpjl+/fLn3/8Ialc84cjR4SUPFq6a5eciOaRfyh39KjsKy2Vn9hvnAF/PeZcKd29W/aVldl60OvXrsm9e/dkv7kf5Hez74ip9/vt2+W3Y8ds3mlOAqERnxQVrejxNG606cYN2WDO/SZJzyneNQFBHeiJ6D0A4VOTd3rcGNRfjzlX/PX477/SwEK+MvsSqX4gWQTiRD+QNK95rb5eDh44YJXtZIA4qaurS3hdlUA6jOfz3Y4d8svJk5LJa4aM94RLTJwyZuKUeN4ULjEuNJ5ZQQBxHgkeCjFESpO5KX/z5s2VwA7vDM/m+fPnGfVshoeHrdsbux8XHOXa5HGx8x4ILip+PUEYPY38evBwPTECLunk5OQqkLimuK/AQTMBw7njXMt/36Qs5RcMEGIG/P+uri7rkTD8ydPI2LLs5/EBOAyN/49RqMMFfs4gxAgo24wWtpeXlyXdDkOK0amLeyBfXFwsNTU1Ul1dLZs2bbIrAz+bR2Z1VZXkJRB6G8bEuM6g9GwMzShwUBqN73/27FmpMc/5HysqpML492aZw2toaBAWCQ8fOiQmbrBly0xM4A8w9+zZs5LfvXOnVJk6qpKco5jQ/cp9XL16Vex1zfUBw5yyEJ1n7NwUCMgxE7fkHRB6FrplyxbbczebHmZ2iGzcaNNik9LjvjC9EEOwzrTRNMApBrl8+bIEjNcTnZStETbENPIjX/5zs+00GfF7Vyj3Eb0Xe/14Mj8/b4PCvAPiepbzTGwPo+dykyZ1Pc6liB+IezwxQoiS3QipKC9fZQy/cVIFEjtCklkJjrcImVdzyKpJ0AcknsQDEmt0f31M7i0tLWkDSUdYe2NVWQUQ5hCn/nP9q7z++vDYgOJ6djaAMBfidKgAgty9e9eWv337tjRcvy5r1ee8LHdONoB8bOoOmPsP+NqQV0CYzJMFwqOAX/7Y/tssbaBM9v8aOO6Zf9jMIaQnjWPw66lTQvrl5s02zQaQvI/U/V7QekBcgOaXSuNlBaIe1mfmXKeul3Lc9Vr9QFIU43aJCUxEEvz6dtjEIGud7wfiRhCeHLEOaYVZNHSqH0gGJLBOQOcHkktSsEDWE/1A9APRD0Q/EP1A9ANJV/zrTvqB6Bf9QPQD0Q9EPxD9QPQD0Q9EPxD9QPQD0Q9EPxD9QPSLfiD6gegHoh+IfiD6gegHoh+IfiD6gaiVmWBQEql+IAUo+oHoB6JfcgYIL8DwXl++qXsJtOCAJHr3O9clm/eddSBLS0ukGakvGAyuys/Pz/OW7jv79ANZo2HT09Pe6OioVeC0t7fzwj6PMz6h5PX09PABAd4B5BtZfD/L5tva2rze3l6vr6/P7uvq6uLVal724cUeXnPmZR6bp9zy8jJvXXmtra02pW7qIU31Q3MFDSQSifA+u+3dGBINh8NWMdTMzIz35s0bPm7GSz3WsPRyDAkIFIATExN8dMCWWVxctHnqnJqasgCQUChk93E+dff391vw+kdInIZh1LSDMwMtkQABOPrnEP2Tun4g+oF84IYxVyQSHIS5ubmEj7FYWVhY0A8k2YbhDTF5z87O2kl/cHCQr/TwUQE7SU9OTtp5hGNAYBLv7u62jgHHKMscxbbzxsgz4bvJH2+NvH4gSQgGBAKeFW4rRu3s7LTxy/DwsD326tUra2S22T8wMLByLuUvXLjgjY+PWxfY1YeX5coCECj6gaQguL6xghuM+GOJcEuLI8kHuFaV9Zdz9bk64tWvH8h7SMQEi15ZmeedO/e/7t3rRc6c0T+pf7CGNTTwVbO326R37hCo6AeS1YZFv2/Fo4dJPVaJ9PUDyWbDSko8M1tb1xWPLFbx0PQDyVbD6us9LxCwqX4gudIwgESDO/1AMtSwtZbAY3/neCdSTwNIvGhdPxDTMH63cEYnksZ4bkncRdL8JsKyuovC2UeQSHBHdJ4MEJb4UeomUOzo6LD7+Y2FQJGle44R3XNd6uKa3BMBJdd08UrBA6G3YhTU/ehE4/2RNMskeEsYhx+eMHRjY+PbZfskgFAH0b2D7aJ16q2trbWjjX0A5/pcC+gtJsjkHlkJcCNV/xyifw7RD0Q/kHTFzAdeebnnXbyoH0jONGzbNlYG9QN5X+FzsHyEP9+Uf3MrSCD6RT8Q/UD0i34g+oHoF/1A9APRL/qB6Bcj/wHPMRRbfIEHkQAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Legend-Examples">exampleOnDemandIcon	^ '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'</body></methods><methods><class-id>Roassal2.RTLegendBuilderExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Legend-Examples">label	^ 'Legend'</body></methods><methods><class-id>Roassal2.RTVisibleTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| v e t |	v := RTView new.	e := RTBox element.	v add: e.	t := 0.	e @ (RTVisible new 			visibleBlock: [ :el | t := t + 1 ]; 			invisibleBlock: [ :el | t := t - 10 ]).	self assert: t equals: 1.	e translateBy: 5 @ 5.	self assert: t equals: 1.		e translateTo: 1000 @ 1000.	self assert: t equals: -9.</body><body package="Roassal2-Core-Tests">testBasicWithoutInvisibleBlock	| v e t |	v := RTView new.	e := RTBox element.	v add: e.	t := 0.	e @ (RTVisible new 			visibleBlock: [ :el | t := t + 1 ]).	self assert: t equals: 1.	e translateBy: 5 @ 5.	self assert: t equals: 1.		e translateTo: 1000 @ 1000.	self assert: t equals: 1.</body><body package="Roassal2-Core-Tests">testInitialization	| v |	v := RTVisible new.	v visibleBlock rtValue: RTElement new.	v invisibleBlock rtValue: RTElement new.	self assert: v visibleBlock notNil.	self assert: v invisibleBlock notNil.</body><body package="Roassal2-Core-Tests">testIsVisible	"The center of e is outside the canvas"	| v e |	v := RTView new.	self assert: v canvas extent equals: 500 @ 500.		e := (RTBox new size: 100) element.	v add: e.	e translateTo: 260 @ 260.	self assert: e trachelShape isVisible</body><body package="Roassal2-Core-Tests">testIsVisible2	"The center of e is outside the canvas"	| v e |	v := RTView new.	self assert: v canvas extent equals: 500 @ 500.		e := (RTBox new size: 100) element.	v add: e.	e translateTo: 248 @ 248.	self assert: e trachelShape isVisible</body><body package="Roassal2-Core-Tests">testVisible	"The center of e is outside the canvas"	| v t visible e |	v := RTView new.	self assert: v canvas extent equals: 500 @ 500.		e := (RTBox new size: 100) element.	v add: e.	e translateTo: 260 @ 260.	t := false.	visible := RTVisible new					visibleBlock: [ :el | t := true ].	e @ visible.	self assert: t</body><body package="Roassal2-Core-Tests">testVisible2	"The center of e is within the canvas"	| v t visible e |	v := RTView new.	self assert: v canvas extent equals: 500 @ 500.		e := (RTBox new size: 100) element.	v add: e.	e translateTo: 248 @ 248.	t := false.	visible := RTVisible new					visibleBlock: [ :el | t := true ].	e @ visible.	self assert: t</body></methods><methods><class-id>Roassal2.RTAMItemTest</class-id> <category>running</category><body package="Roassal2-Builder-ApplicationMatrix-Tests">setUp	super setUp.	item := RTAMItem new.</body></methods><methods><class-id>Roassal2.RTAMItemTest</class-id> <category>tests</category><body package="Roassal2-Builder-ApplicationMatrix-Tests">testBasic	self assert: item itemName equals: 'Unnamed'.	self assert: item tags isEmpty.	self assert: item row equals: 'row'.	self assert: item column equals: 'column'.	self deny: item hasTag.	self assert: item model isNil</body></methods><methods><class-id>Roassal2.TRArcShapeTest</class-id> <category>basic tests</category><body package="Roassal2-Trachel-Tests">setUp	super setUp.	arc1:=TRArcShape new.	arc2:=TRArcShape new.	arc3:=TRArcShape new.	arc4:=TRArcShape new.	arc5:=TRArcShape new.	arcQ1:=TRArcShape new.	arcQ2:=TRArcShape new.	arcQ3:=TRArcShape new.	arcQ4:=TRArcShape new.	arc1 alphaAngle: 0 betaAngle: 360 innerRadius:  0 externalRadius:  100.	arc2 alphaAngle: 30 betaAngle: 60 innerRadius:  50 externalRadius:  50.	arc3 alphaAngle: 0 betaAngle:  90 innerRadius:  2 sqrt externalRadius: 2 sqrt.	arc4 alphaAngle:180 betaAngle: 270 innerRadius: 50 externalRadius:150.	arc5 alphaAngle:0 betaAngle: 270 innerRadius: 50 externalRadius:150.	arcQ1 alphaAngle: 0 betaAngle: 90 innerRadius:  0 externalRadius:  100.	arcQ2 alphaAngle: 90 betaAngle: 180 innerRadius:  0 externalRadius:  100.	arcQ3 alphaAngle: 180 betaAngle: 270 innerRadius:  0 externalRadius:  100.	arcQ4 alphaAngle: 270 betaAngle: 360 innerRadius:  0 externalRadius:  100.	pR:=100 @ 0.	pB:=0 @ 100.	pL:=-100 @ 0.	pT:=0 @ -100.	pQ1:=50 @ 50.	pQ2:=-50 @ 50.	pQ3:=-50 @ -50.	pQ4:=50 @ -50.	p1:= 0 @ 0.	p2:=100 @ 100.	p3:=50 @ 50.	p4:= 0 @ 150.	p5:=1 @ -1.	p6:=0 @ -100.	p7:=-100 @ 0.	p8:=-100 @ 100.	p1n:=p1 negated.	p2n:=p2 negated.	p3n:=p3 negated.	p4n:= p4 negated.	p5n:=p5 negated.	p6n:=p6 negated.	p7n:=p7 negated.	p8n:=p8 negated.</body><body package="Roassal2-Trachel-Tests">testEncompassingRectangle	self assert: (arc1 encompassingRectangle = ((-100.0@ -100.0) corner: (100.0@100.0))).	self assert: (arc1 encompassingRectangle width abs = 200).	self assert:(arc2 encompassingRectangle width abs &lt; 50).  	self assert:(arc2 encompassingRectangle height abs &lt; 50).	self assert: (arc3 encompassingRectangle height abs= 2 sqrt).	self assert: (((arc4 encompassingRectangle height abs) roundDownTo: 1 )= 150). 	self assert: (((arc4 encompassingRectangle width abs) roundDownTo: 1 )= 150). 	self assert: (arc5 encompassingRectangle width abs= 300).	self assert: (arc5 encompassingRectangle height abs= 300).</body><body package="Roassal2-Trachel-Tests">testIncludesPoint		self assert: (arc1 includesPoint: p1).	self deny: (arc1 includesPoint: p2).	self assert: (arc1 includesPoint: p3).	self deny: (arc1 includesPoint: p4).	self assert: (arc1 includesPoint: p5).		self assert: (arc1 includesPoint: p6).	self assert: (arc1 includesPoint: p7).	self deny: (arc1 includesPoint: p8).	self assert: (arc1 includesPoint: p1n).	self deny: (arc1 includesPoint: p2n).	self assert: (arc1 includesPoint: p3n).	self deny: (arc1 includesPoint: p4n).	self assert: (arc1 includesPoint: p5n).		self assert: (arc1 includesPoint: p6n).	self assert: (arc1 includesPoint: p7n).	self deny: (arc1 includesPoint: p8n).		self deny: (arc2 includesPoint: p1).	self deny: (arc2 includesPoint: p2).	self deny: (arc2 includesPoint: p3).	self deny: (arc2 includesPoint: p4).	self deny: (arc2 includesPoint: p5).		self deny: (arc2 includesPoint: p6).	self deny: (arc2 includesPoint: p7).	self deny: (arc2 includesPoint: p8).	self deny: (arc2 includesPoint: p1n).	self deny: (arc2 includesPoint: p2n).	self deny: (arc2 includesPoint: p3n).	self deny: (arc2 includesPoint: p4n).	self deny: (arc2 includesPoint: p5n).		self deny: (arc2 includesPoint: p6n).	self deny: (arc2 includesPoint: p7n).	self deny: (arc2 includesPoint: p8n).		self deny: (arc3 includesPoint: p1).	self deny: (arc3 includesPoint: p2).	self deny: (arc3 includesPoint: p3).	self deny: (arc3 includesPoint: p4).	self assert: (arc3 includesPoint: p5).	self deny: (arc3 includesPoint: p6).	self deny: (arc3 includesPoint: p7).	self deny: (arc3 includesPoint: p8).	self deny: (arc3 includesPoint: p1n).	self deny: (arc3 includesPoint: p2n).	self deny: (arc3 includesPoint: p3n).	self deny: (arc3 includesPoint: p4n).	self deny: (arc3 includesPoint: p5n).	self deny: (arc3 includesPoint: p6n).	self deny: (arc3 includesPoint: p7n).	self deny: (arc3 includesPoint: p8n).		self deny: (arc4 includesPoint: p1).	self deny: (arc4 includesPoint: p2).	self deny: (arc4 includesPoint: p3).	self assert: (arc4 includesPoint: p4).	self deny: (arc4 includesPoint: p5).		self deny: (arc4 includesPoint: p6).	self assert:(arc4 includesPoint: p7).	self assert:(arc4 includesPoint: p8).	self deny: (arc4 includesPoint: p1n).	self deny: (arc4 includesPoint: p2n).	self deny: (arc4 includesPoint: p3n).	self deny: (arc4 includesPoint: p4n).	self deny: (arc4 includesPoint: p5n).		self assert: (arc4 includesPoint: p6n).	self deny: (arc4 includesPoint: p7n).	self deny: (arc4 includesPoint: p8n).		self deny: (arc5 includesPoint: p1).	self deny: (arc5 includesPoint: p2).	self deny: (arc5 includesPoint: p3).	self assert: (arc5 includesPoint: p4).	self deny: (arc5 includesPoint: p5).		self assert:(arc5 includesPoint: p6).	self assert:(arc5 includesPoint: p7).	self assert:(arc5 includesPoint: p8).	self deny: (arc5 includesPoint: p1n).	self assert: (arc5 includesPoint: p2n).	self assert: (arc5 includesPoint: p3n).	self assert: (arc5 includesPoint: p4n).	self deny: (arc5 includesPoint: p5n).		self assert: (arc5 includesPoint: p6n).	self assert: (arc5 includesPoint: p7n).	self assert: (arc5 includesPoint: p8n).		self assert:(arcQ1 includesPoint: pR).	self deny:(arcQ1 includesPoint: pQ1).	self deny:(arcQ1 includesPoint: pB).	self deny:(arcQ1 includesPoint: pQ2).	self deny:(arcQ1 includesPoint: pL).	self deny:(arcQ1 includesPoint: pQ3).	self assert:(arcQ1 includesPoint: pT).	self assert: (arcQ1 includesPoint: pQ4).		self deny:(arcQ2 includesPoint: pR).	self deny:(arcQ2 includesPoint: pQ1).	self deny:(arcQ2 includesPoint: pB).	self deny:(arcQ2 includesPoint: pQ2).	self assert:(arcQ2 includesPoint: pL).	self assert:(arcQ2 includesPoint: pQ3).	self assert:(arcQ2 includesPoint: pT).	self deny:(arcQ2 includesPoint: pQ4).		self deny:(arcQ3 includesPoint: pR).	self deny:(arcQ3 includesPoint: pQ1).	self assert:(arcQ3 includesPoint: pB).	self assert:(arcQ3 includesPoint: pQ2).	self assert:(arcQ3 includesPoint: pL).	self deny: (arcQ3 includesPoint: pQ3).	self deny:(arcQ3 includesPoint: pT).	self deny:(arcQ3 includesPoint: pQ4).		self assert:(arcQ4 includesPoint: pR).	self assert:(arcQ4 includesPoint: pQ1).	self assert:(arcQ4 includesPoint: pB).	self deny:(arcQ4 includesPoint: pQ2).	self deny:(arcQ4 includesPoint: pL).	self deny:(arcQ4 includesPoint: pQ3).	self deny:(arcQ4 includesPoint: pT).	self deny:(arcQ4 includesPoint: pQ4).</body></methods><methods><class-id>Roassal2.RTQuadTreeTest</class-id> <category>tests</category><body package="Roassal2-Layouts-Tests">testCreate		| quadrants points |	points :=  Array with: 0@0 with: 0@5 with: 5@0 with: 5@5.		nodes := points collect: [ :pos | RTBox element translateTo: pos ].	quad := RTQuadTree withAll: nodes.		quadrants := quad nodes.		self assert: (quadrants at: 1) node position = (0@0).	self assert: (quadrants at: 2) node position = (5@0).	self assert: (quadrants at: 3) node position = (0@5).	self assert: (quadrants at: 4) node position = (5@5)</body><body package="Roassal2-Layouts-Tests">testLeaf	self assert: (quad leaf ifTrue: [quad nodes allSatisfy: [ :e | e isNil ] ]							ifFalse: [ quad nodes anySatisfy: [ :e | self isTrueLeaf: e ] ] )</body><body package="Roassal2-Layouts-Tests">testRectangle	| points |	points := Array with:  0@5 with: 5@0 with: 10@5 with: 5@5.	nodes := points collect: [ :e | RTBox element translateTo: e ].	quad := RTQuadTree withAll: nodes.		self assert: quad origin = (0@0).	self assert: quad corner = (10@10)</body><body package="Roassal2-Layouts-Tests">testSquare	| points |	points := Array with:  0@5 with: 5@0 with: 10@5 with: 5@5.		nodes := points collect: [ :pos | RTBox element translateTo: pos ].	quad := RTQuadTree withAll: nodes.		self assert: quad origin = (0@0).	self assert: quad corner = (10@10)</body></methods><methods><class-id>Roassal2.RTQuadTreeTest</class-id> <category>util</category><body package="Roassal2-Layouts-Tests">isTrueLeaf: aQuad	aQuad isNil ifTrue: [ ^ false ].	aQuad leaf ifTrue: [ ^ aQuad nodes allSatisfy: [ :e | e isNil ] ]				ifFalse: [ ^ aQuad nodes anySatisfy: [ :e | self isTrueLeaf: e ] ]</body><body package="Roassal2-Layouts-Tests">wellCreated: aQuad	aQuad leaf ifTrue: [ aQuad node isNil ifTrue: [ ^ true ]										   ifFalse: [ ^ (Rectangle origin: aQuad origin corner: aQuad corner) contains: aQuad node position ] ] 				ifFalse: [ aQuad node isNil ifTrue: [ ^ aQuad nodes allSatisfy: [ :e | self wellCreated: e ] ] 										    ifFalse: [ ^ ((Rectangle origin: aQuad origin corner: aQuad corner) contains: aQuad node position) &amp; (aQuad nodes allSatisfy: [ :e | self wellCreated: e ]) ] ]</body></methods><methods><class-id>Roassal2.RTQuadTreeTest</class-id> <category>running</category><body package="Roassal2-Layouts-Tests">setUp	super setUp.	nodes := OrderedCollection new.		(0 to: 10) do: [ :e | nodes add: (RTBox element translateTo: e @ e); 								add: (RTBox element translateTo: e @ (10 - e)) ].		quad := RTQuadTree withAll: nodes.</body></methods><methods><class-id>Roassal2.RTCompoundElementTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testAdding	| v c es |	v := RTView new.	c := RTBox compoundElement.	es := RTBox elementsOn: (1 to: 5).	c addAll: es.	self assert: c children equals: es.	v add: c.	self assert: v numberOfElements equals: 6</body><body package="Roassal2-Core-Tests">testBasic	| c |	c := RTCompoundElement new.	self assert: c children size equals: 0.	self assert: c children class equals: RTGroup.</body><body package="Roassal2-Core-Tests">testLayoutBuilder	| c v |	c := RTBox compoundElement.	c addAll: (RTBox elementsOn: (1 to: 5)).	c layout grid.		v := RTView new.	v add: c.</body><body package="Roassal2-Core-Tests">testOrder	| c v e |	c := RTBox compoundElement.	e := RTBox element.	c add: e.	v := RTView new.	v add: c.		self assert: v elements equals: (RTGroup with: c with: e).	self assert: (v elements collect: #trachelShape) asArray equals: v canvas shapes asArray</body></methods><methods><class-id>Roassal2.RTVerticalMultipleDataTest</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Tests">setUp	super setUp.				b := RTGrapher new.	d := RTVerticalMultipleData new.	d points: #( #('hello' 1 2 1) #('world' 2 4 2) #('bonjour' 3 5 4) #('bonjour' 3 5 4) #('bonjour' 3 5 4)).	d addMetric: #second.	d addMetric: #third.	d addMetric: #fourth.	b add: d.		"d barChartWithBarTitle: #first rotation: -30.	"	b axisX noTick; noLabel.	b axisY noTick; noLabel.	b build</body></methods><methods><class-id>Roassal2.RTVerticalMultipleDataTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testBasic	| a |	self assert: b view numberOfElements equals: 23.	self assert: b view numberOfEdges equals: 2.	a := ((Array new: 23) at: 1 put: ((19@ -58)); at: 2 put: ((19@ -33)); at: 3 put: ((19@ -8)); at: 4 put: ((0@0)); at: 5 put: ((76@ -116)); at: 6 put: ((76@ -66)); at: 7 put: ((76@ -16)); at: 8 put: ((0@0)); at: 9 put: ((134@ -175)); at: 10 put: ((134@ -108)); at: 11 put: ((134@ -33)); at: 12 put: ((0@0)); at: 13 put: ((191@ -175)); at: 14 put: ((191@ -108)); at: 15 put: ((191@ -33)); at: 16 put: ((0@0)); at: 17 put: ((248@ -175)); at: 18 put: ((248@ -108)); at: 19 put: ((248@ -33)); at: 20 put: ((0@0)); at: 21 put: ((0@ -200)); at: 22 put: ((0@0)); at: 23 put: ((300@0)); yourself).	self assert: ((b view elements collect: #position) asArray collect: #rounded) equals: a</body></methods><methods><class-id>Roassal2.RTEventForwarderTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| v e |	v := RTView new.	e := RTBox element.	e @ RTEventForwarder.	v add: e.		self assert: v canvas camera position equals: 0 @ 0.</body></methods><methods><class-id>Roassal2.RTExtensionTest</class-id> <category>tests</category><body package="Roassal2-Tests">testIsReferencedBy	self deny: (String superclass isReferencedBy: self class).	self assert: (String isReferencedBy: Object)</body></methods><methods><class-id>Roassal2.RTInteractionExample</class-id> <category>sources</category><body package="Roassal2-ExampleBrowser-Examples">exampleDragAndDrop01| v e1 e2 |v := RTView new.e1 := (RTBox new size: 10; color: Color gray) element. e2 := (RTEllipse new size: 30; color: Color blue) element.e1 @ RTDraggable.e1 translateTo: 50 @ 50.v add: e1.v add: e2.e2 @ (RTDragAndDroppable new 			host: e1;			do: [ :fromElement :toElement | 				| newElement alreadyNested |				newElement := (RTBox new size: 20) element.				v add: newElement.				alreadyNested := toElement nestedElements.				toElement unbindNestedElements.				RTNest new					layout: RTGridLayout new;					on: toElement nest: alreadyNested, (Array with: newElement) ]).	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleDraggingChildren| v es |v := RTView new.v @ RTDraggableView.es := RTLabel elementsOn: (1 to: 40).v addAll: es.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: [ :aValue | aValue // 2 ].RTClusterLayout on: es.es @ RTDraggableChildren.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleExpandable| v s es expand methods |v := RTView new.s := RTShapeBuilder new		rectangle;		width: [ :c | c numberOfVariables * 5 ]; height: #numberOfMethods.		es := s elementsOn: RTShape withAllSubclasses.v add: es.es @ RTPopup @ (RTLabeled new setAsHighlightable).expand := (RTExpandable new				group: [ :group :element | 					methods := (RTBox new color: Color red) 										elementsOn: element model rtmethods.					RTGridLayout on: methods.					methods @ RTPopup.					group addAll: methods];				afterBlock: [ RTGridLayout on: es] ).es @ expand. RTGridLayout on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleGhostDraggable	| v e e2 |	v := RTView new.	e := RTBox new		color: Color blue muchDarker;		width: 150;		height: 200;		elementOn: 'drag me'.	e2 := RTBox new elementOn: 'I am here just so the view isnt zoomed too much'.	e2 translateTo: 200 @ 300.	v add: e.	v add: e2.	e @ RTGhostDraggable.	e		@			(RTLabeled new				center;				color: Color white).	v @ RTGridView.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleGridDraggable	| v es |	v := RTView new.	v @ RTDraggableView.	v		@			(RTGridView new				color: Color gray;				gridSize: 20).	v @ RTZoomableView.	es := RTBox new		borderColor: Color black;		color: (Color green alpha: 0.6);		size: 30;		elementsOn: #(#topLeft #center).	v addAll: es.	es first @ (RTDraggableSnapToGrid new gridSize: 40).	es second @ (RTDraggableSnapToGrid new center gridSize: 40).	es @ RTResizable.	es @ RTLabeled.	es first translateTo: 70 negated @ 90 negated.	es second translateTo: 70 @ 110.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleResizable	| v g |	v := RTView new.	g := RTGroup new.	g 		add: (RTBox new			size: 100;			borderColor: Color black;			borderWidth: 1;			element);		add: (	RTRoundedBox new			size: 50;			borderRadius: 20;			borderColor: Color black;			borderWidth: 1;			element);		add: (RTEllipse new			width: 100;			height: 30;			borderColor: Color black;			element).	v addAll: g.	RTGridLayout on: g.	g @ RTDraggable.	g @ RTResizable.	v @ RTZoomableView.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleSelectableElements|  b label labelShape |b := RTMondrian new.b nodes: Collection withAllSubclasses.b layout flow.b normalizer 	normalizeSize: #numberOfMethods.b build."Adding a label"labelShape := RTLabel new text: 'Nothing selected'.label := labelShape element.b view add: label.TRConstraint move: label below: b view elements."Changing the label according to the selection"b view elements @ (RTSelectable new selectionCallback: [ :es | label trachelShape text: es size asString, ' selected elements']).^ b view</body></methods><methods><class-id>Roassal2.RTInteractionExample</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'Interaction'</body></methods><methods><class-id>Roassal2.RTInteractionExample</class-id> <category>icons</category><body package="Roassal2-ExampleBrowser-Examples">exampleDragAndDrop01Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABU0lEQVR4XuXWwQmDMBiG4dz05kDiTVxLL26mE7jPZysUWtoB1D4v5B7ykD8p++53pYp/BD6Inw/ig/j5ID6Inw/ig/j5ID6Inw/i54P4IH4+iA/i54P4IH4+iA/i54P4+SA+iJ8P4oP4+SA+iJ8P4oP4+SB+PogP4ueD+CB+PogP4ueD+CB+PoifD+KD+PkgPoifCrKuSdclTZPMc+KDnNiyJOW548/V9/+FciuQtv0FKcW/Iad1jCkf5EIdb8Y3Rl37I+vUhuGNUlXJtvkgfj6ID+Lng/j5ID6IHw0yjmOmadqT+3yN/xrkwPBBLlRe+SPLzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPBxF7ALBqbiDM8YpuAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleDraggingChildrenIcon	^ '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AAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleExpandableIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEi0lEQVR4XuWc6U7kMBAGef+HHM7hvob7NFBWvshEmYUfu0tCtWT5iJ0MXU63Z0T3xtubX6YkG34V+IH4xQ/ED8QvfiB+IH7xA/ED8YsfiB+IX/xA/OIH4gfiFz8QPxC/+IH4gfjFD8QPxC9+IH75GSCXl5fl+vq6XFxclIeHh7K/v1/7FPop9/f35eDgoI4z5/DwsGxvb5fz8/PaPjk5Kbu7u+X09LTO29nZKavVquzt7dV5jNFmDus3NzdrvVwu67P5HFdXV+Xo6Kjej3HuzT1ubm5qzee4u7ur5enpqf9cXHt5eantXwOEP+719bU8Pj7WPn9cV/q5KBuFMrdV4vHxca1RYJSOwmkDinW0gUTZ2toqi8WiAgEUNSCouQeFezLGM1iP0il8Np718fz6mRijBhqgfq3JAg6SNnXbz1j67ND2WtunjSJzDXl+fq47P/1cy31ZgwzXtZ9nWOt9CDuVXZ1CP2Nte+z6d+e0436n/oVgNj5MU1/oZ6xtj12nYJqGc8bGMq4HguNkZ2KbMS/4lLSpO+fcKw27j0OmnZ3dXsdR41PSxzewxg/km3J7e1uVnz72HCWiVEB9OORPSsNB47BpUwNgoNje4bMWGHH0UzNNk31DOHW1/ZxyeEPOzs4+2XlA5WTEKQyF52ibkxRrqJnLPO7TPsP/xfAvQMt3g9ac5btCSjufOXOCMCsgY/a+deI5NQ3nT8Un6ICsm+8H4gfiB+IH4gfiB+IHMnMg/HrM+P/4ZdYP5BtA5i5+IH4gfiB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gfiA/KYRDE6xJEGdyk1ATqkYE7TogzCewk8J67rUuypaIX55D2g4/kC+E0AGiaAFB6DNBm4Q9U/4EJIlkyHNCYT1rSEbDOv4DPjlVAEIhyjeBo0Tq0vcDGRF2brIEoUAgoXBqIFFQYBf4X4P/83Z0GRxKgkBpp04WIiAwRjIZInQT3Tu1aN3J5zoZlrGcJ5k7h8QAkweSmPLkrcoupk1Wh2R3SK6r+A7elDh23qg2B8pQki1o7K30AxkIqTCw9ygYxeMD8AvU7PgkKCNdRlfeyIXVtrt0G30OLe6HecPMxc9wLQnJgEsNWD+QgXCaQmlJVIZy4+S5RmlynNTEZAGSMYClAIRx3pQcCrgva+LkOZHxBgJNCQSTgVnK6SaZf6jjXNm9SFLtxS/EITMn2eko9Nu5Ee6X5GZ+H7JGOG7GN6BMdij9JIpJtp602eW8JTFbncnqj7sxczFlzMHcsYZdz/Pin9okNH4gDZCUHEdRILY9CStRchJdJrsP1zFX9AHQmaqahilAgJZjcXIwAppo3GQWAtRcktFM5ti7TmFtxp9h9p+5ZvyZ9W9Zw+8hSeP3W2V2iZT9QPxA/ED8QGYkw5R+fiB+8QPxA/GLH4hf/ED8QPziB+IH4hc/ED8Qv/iB+IH4xQ/EL34gfiB+8QPxA/GLH4gfiF/+kbwDIevKLIeDipEAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleGhostDraggableIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAADgAAABACAYAAABP97SyAAABm0lEQVR4XuVZu07DMBQ1qAu/wtCJX2BKBz4AWFqQmPgCEjYWNiZmxMJUiQG1E3/QD4Ad9bUUV8iK40ud1CpSjBrTVFg+kY58c61c6+ocHccyk1IqWj5yGUtLbt28LZdlWW11TC3XOixNU6VfNExsy62b32adn3Ctw2ToDEp8iQYoUT05Hs9zDIefpbhqbjTi+ShEsbg3DE4mXDGWUIGYyrFbrtd784vB6XS+aPCaCiRUjt1y/f678spkNm8w9qfB+iV6tcBl6BKNQ5doErJE8V0Un0F8BvFNBl+ivzPY2LsLm8Hz41c6bd7Q0ckzdTpdujh8oYPols7aT4GYzM5qbO7fr+Z38U0G32Tw90F8BvH/ZPAlii9RfIn+R4OmgImLBhOqC1qitnU2yVX9xsrgbPalWq3HHFH0UIqr5gwGgw+FfzeBf32Gf32GL9FwJVqnLftWB99k8E0G32TwTWb7JoPvovgSxWcQfx90bVC/CyHC3Qd1c5xz/H0Q/08G32TwJYovUXwG8RnENxl8ieIfl/BP9PjnQXyT+VudbwqnpsQOME32AAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleGridDraggableIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAABwUlEQVR4XuXbTQqCQACAUc9tRNeKpJ3HEG/gvnFo+tlEY5vBwIleIkMLFfl8+IM2McYUQkixYFzOpcutXf+W29piX0qWbW6P3/NPybj8lS63dv1bbmuLfSlZ1g/iB/GD+EH8IH6Q1UGif5XlX2X5QnwhvhBfiC/EF+IL8YX4QnwhvhBfiC/EF+IL8YX4QnwhvhBfiC/EF+IL8YX4Qnwh1Y+qOc7Z7AupeFQ9AzS3fPKFVDyqLuHyEcQX4gvxhWRCFpMvxL/K8l+U84P4QfwgfhA/iB/ED+IH8YP4QfzH7/6NoS/EF+IL8YX4QnwhvhBfiC/EF5KPwzD4Qn5FyDiOqe/7NE2TL8Q/h/hC/HOIL8QX4gvxhfhCfCG+EF+IL8QX4gvxhfhCfCG+EF+I/xqQH8QP4gfxg/hB/CB+ED+IH8S/D/lyPF/P6fA2neaTfx9SU8jhMb1/hr2LO19ITSH76z77Nr6dW1+IL8QX8hq72KU2tq/5GI6+EP8qyxfiP+31hfhCfCG+EF+IL8QX4gvxhfhCfCG+EF+IL8QX4gvxhfhCfCG+EF+IL8QX4gvxhfhC/Bfl/CB+ED+IH8QP4gf5wyB3CTnGiKMrhLsAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleResizableIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAACDElEQVR4XuXaQYsBUQDA8f3GvoK7D6EcuKGUi6McjRSRwkEphNx5s/u2dtut1WyZJru/f70Lr3eYXzMPz0ua+j1TL/4l8EH8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H8QH8fNBfBA/H8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB8mjy+USttttbqPdboev6zebzbBer9OP92ezWdrv94MPcqfj8fh+wfIapVLpc+1Op3N37VqtFnyQAkGq1WrmunGOD1IQSJIkmXPjHB+kIJDfzg9v+SBPBHK73XwQ/w4BQZbLZebcOMffQwoCqdfrmes2Gg3/U1ZRIPv9PrRarbtrDwaDcDgcfJAivxjG/aHX64VyuRzi63FUKpXQ7XbDs+wdFIj/W5YP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4/SOQ3W4XzudzOh6Pw2q1yrwbRqNRiD8ibjab4IPk2Nu5RFgsFg8/uiLQs5wA/lmQ0+mU5rmHDIdDH+SR5vN5rpt6vNt8kBweWfFx8wjEdDp9/2fi9Xr1QfIqnuDFTT2OyWQSkiQJP52Nx00/An7M9Td1Px/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxM8H8UH8fBC/b70C+18/bEtmoXgAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleSelectableElementsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAD30lEQVR4XuWcW0tqQRTH+3B9oF76HkpPEb4E+VAQBXZ9SC1CUImIhKAo6EJQESjaBXJ5zhpYMmfO3rnNLjt/fxiWe/ZsH+bnzFprXDrR6/GVJk3wp4APhC8+ED4QvvhA+ED44gPhA+GLD4QPhC8+EL74QPhA+OID4QPhiw+ED4QvPhA+EL74QPjiA+ED4YsPhA/kC9VoNKRarcrFxYUsLS2J9qm1pvfDMf44s1HvYVaf5wNJqJubm55O5P39vdTrddc3Ozvbb9qnY87Pz+Xk5ESsX+WP39nZ+ec9zG5tbcnZ2RkfyCgKgZhswv0+/pb1g0D4PoQvHhBdAeYTfGtbk9/XbDZlYWGhv22p3zC/Ej4fjk3TSks1kE6nIw8PDxJCUkeubdBEPj8///c8f4WMGGWFkZFvfThxTSOwMMJ6eXmRo6MjSaMP+jVbVggkDH2j2unpqZv46+tr2dzclHDLsvfmA/nEaOujn/LHx0e3cvhA+BqfKKtYLA6MnKLuJbF8IAmjLNtW1AeoP4gap2Pe3t6kXC73fQV/hXyBdJ9P2u7u7qTVan3I8oEklEZJSZolghpNWVQ1jOUD4ev3OvWwRTl2c+j+cYn/Oo1HJGO1QvRIJMwh1I+oT/CBWEKo2xp/hfA1vnlI2KJOe+PyEn9seBLsWz6QEYH4OUrS9+H7kC8Ewt+y+ED4QPhA+ED4QPj6ZSvEMvPQRoWucUfzcZZf5PADGXycdJyGzvwVMoSsdtev332vTndY2263ZX193Vk+kATST7A2q/HVFaDnVX4Via2IQTYcb9UnegamX27xgSTQoBKfJM3KgKLKgXzLB/INQKwMyID4Tp8PhK/xCHvDFiaJFsLa6e4gG1f7ywfySZk7f4XwgfCB8IGkOOoKfQofyA8A+Ix8ZFDjAxlii/oOKHwgQ64Qfh6Sskz9vV9S2S+i4o5Lklg+kCGARP2Syqrc1eoBZKlU6tf6+sclfCB8MY5O/NxDvzXkA0lRQsgHwgfCB8IHwhcfSKjp6Wk5PDyUtbU1mZqakpWVFdnf35e9vT1ZXV11q2JmZsb+AECurq7k+PhYlpeXJZfLye3trXvm74py15eXl5LNZvl/rfFR6SROTk66yc9kMm6it7e3JZ/P918XCgU3wfPz87KxsSEHBwcyNzcnu7u7UqlU3D39fxO9rtVqrqqED2REaVmOKux/fX2VxcVF168VKGq73a5LDPWeXmsFydPTU/+av2XxxQfCB8IXHwgfCF98IHzxgfCB8MUHwgfCFx8IHwhffCB8IHzxgfCB8KeAD4QvPhA+EL74QPhA+OID4QPhiw+ErT/v5CT+ky0riwAAAABJRU5ErkJggg=='</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>morph</category><body package="Roassal2-Examples-Extentions">combiningRoassalAndVisualComponents	| win button view es e |	view :=  RTView new.	win := ScheduledWindow new.	win minimumSize: (500 @ 500).	win component: CompositePart new.	button := ActionButtonView new.	button action: [ (view elements, view edges) do: [ :each | each color: Color random. each signalUpdate ] ].	button labelString: 'I am a button'.	button hasBorder: true.	es := RTBox new color: Color black; size: 50; elementsOn: #(1 2).	e := RTLine new color: Color black; edgeFrom: es first to: es second.	view addAll: es; add: e.	es second translateBy: 100 @ 200.	view canvas buildMorph.	view canvas morph extent: 500@300.	win component add: view canvas morph in:  (0@0 corner: 1@1).	win  component add: button.		win damageRepairPolicy: DoubleBufferingWindowDisplayPolicy new.	win when:#bounds evaluate: [ view canvas morph changedView. ].	win open.</body></methods><methods><class-id>Roassal2.RTLazyMetricNormalizerTest</class-id> <category>tests</category><body package="Roassal2-ColorNormalizer-Tests">testBasic	n foo.	n bar.	self assert: n numberOfReceivedMessages equals: 2.		n resetMessages.	self assert: n numberOfReceivedMessages equals: 0.</body><body package="Roassal2-ColorNormalizer-Tests">testBasic02	| es |	es := RTBox elementsOn: (1 to: 5).	n elements: es.	n normalizeSize: #yourself.		self assert: es last trachelShape extent equals: 5 @ 5.	n build.	self assert: es last trachelShape extent equals: 30 @ 30.</body><body package="Roassal2-ColorNormalizer-Tests">testBasic03ReuseOfMetrics	| es es2 |	es := RTBox elementsOn: (1 to: 5).	n elements: es.	n normalizeSize: #yourself.	n build.		es2 := RTBox elementsOn: (1 to: 5).	n elements: es2.	n build.	self assert: es2 last trachelShape extent equals: 30 @ 30.</body><body package="Roassal2-ColorNormalizer-Tests">testDefault	self assert: n numberOfReceivedMessages equals: 0.	n build.</body></methods><methods><class-id>Roassal2.RTLazyMetricNormalizerTest</class-id> <category>running</category><body package="Roassal2-ColorNormalizer-Tests">setUp	super setUp.	n := RTLazyMetricNormalizer new.</body></methods><methods><class-id>Roassal2.RTSVGExporterTest</class-id> <category>tests</category><body package="Roassal2-Exporter-SVG-Tests">testBasic		| b str |	b := RTMondrian new.	b nodes: Collection withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b build.	str := WriteStream on: String new.	RTSVGExporter new view: b view; exportOnStream: str</body></methods><methods><class-id>Roassal2.RTSelectableTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testClickOn	| e |	e := view elements first.	self assert: e trachelShape color ~= Color red.	selectable clickOn: e.	self assert: e trachelShape color equals: Color red.</body><body package="Roassal2-Core-Tests">testClickOnTwice	| e |	e := view elements first.	selectable clickOn: e.	selectable clickOn: e.	self assert: e trachelShape color ~= Color red.</body><body package="Roassal2-Core-Tests">testSelectable	| e |	self assert: selectedElements isEmpty.	e := RTElement new.	self assert: (selectable selectionCallback value: e) equals: e</body></methods><methods><class-id>Roassal2.RTSelectableTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	| b |	super setUp.	b := RTMondrian new.	b nodes: Collection withAllSubclasses.	b layout flow.	b normalizer 		normalizeSize: #numberOfMethods.	b build.		selectedElements := #().	selectable := RTSelectable new selectionCallback: [ :es | selectedElements := es ].	b view elements @ selectable.		view := b view.</body></methods><methods><class-id>Roassal2.RTExperimentalExampleTest</class-id> <category>tests</category><body package="Roassal2-Experimental-Tests">testBasic	"Should not raise an error"	| view |	view := RTExperimentalExample new exampleClusterBezierAndSlider.	view canvas buildMorph drawOnMockCanvas</body></methods><methods><class-id>Roassal2.RTPieBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-PieChart-Tests">testExample	| b es |	b := RTPieBuilder new.	b interaction popup.	b objects: (Array with: Dictionary with: Collection with: Set with: OrderedCollection ).	es := b slice: #numberOfMethods.	b normalizer distinctColor.		b labeled.	b emphasize: Set by: 20.	b emphasize: Dictionary by: 20.	b build.		self assert: es size equals: 4</body><body package="Roassal2-Builder-PieChart-Tests">testExample02	| c g ds b data |	data := #(20 30 50 100).	c := RTComposer new.	"First visualization"	g := RTGrapher new.	g extent: 200 @ 200.	g view: c view.	ds := RTData new.	ds interaction popup.	ds barShape color: Color blue.	ds points: data.	g add: ds.	g axisX noTick; noLabel.	g build.	c group: #graph.	"Second visualization"	b := RTPieBuilder new.	b view: c view.	b interaction popup.	b objects: data.	b slice: #yourself.	b normalizer distinctColor.		b labeled.	b build.	c group: #pie.	"Layouting"	c move: #graph onTheLeftOf: #pie.	c view</body></methods><methods><class-id>Roassal2.RTMondrianExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Mondrian-Examples">label	^ 'Mondrian'</body></methods><methods><class-id>Roassal2.RTMondrianExample</class-id> <category>icons</category><body package="Roassal2-Builder-Mondrian-Examples">example2015Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADmElEQVR4XuWa207yQBSFeUpPFz6Lh5cT9E7ggoMXHG4sXBBNRAjDP9OkzXTodDO0hf5+KyFm2T27la+d5UZb+z1fTVKL/xbwgfDFB8IHwhcfCB8IX3wgfCB88YHwgfDFB8IXHwgfCF98IHwgfPGB8IHwxQfCB8IXHwhffCB8IHzxgfCB8MUHwgfCFx8IHwhffCB88YHwgfDFB8IHwhcfCB8IX3wgfCB88YHwxQfyh4Aore12q1K/2Sj18eH3br3kzfrx2O9D+0n9y15PYL9KgZjms9ksfq1WK6V+f9W+pZfrl3p+PvRuveTt9U9PyvywGR/az/V2v8fH8Poi//Ag9qscyEZfgGne6XT0TTFWi3Y7vaCfuzsVOX4+n6t+v5/WSz7SX9P1t7dZf3MTnzupH41GmfXH+Oj1tbCf66O3t7R+fX0t+uR8bf0+2Od/f39Xy+VS1bJlGdLmZLvdLj6BuVN+9MWo7+9cb+qHw2Fan+er7lfkzZMW0i+t//ry+6ur1Of1GwwGqa8+Q/RTEt9pzjbm9br+09zpBcejouNa0+k02888ib7jUn3Z9VJ9jp9MJjVliCcjer1eZs9MvVTvZobUz5Mp3W43U596KQNC10v1gq8eiH4U7Yyw99zcTLAzRWeClBnu8YM93cmU0MwomyG+87mZcdYMifd0/cMcvQcLGZB33M6U0H5SZpTNkFMyrN4MkTLj0hlS9nhoBh3Rr74Mkfb4oj0/L0Ok46EZUva4681AZ2eI5M+dIWbitOcQaa5YOBniZk5RxuRmgpUh65wMkTLGzpC1kyFuZsXXVzR36F91XZ+sv+gc0rQMEY//uTnkiMyQMuGsc0gNc0Vov8tlSJlMqCJDQuaKU9ZLGdO0DFkIc0fdGRIylxyTIUUZeTCnNDVDgueEmueQshlyVL9GfZblZkCO/yyTKRfY8/+fOcT9bMrNAMmHZopnz3fX15YhTZ9D3M+yopeXTAa4GeKbQ8zL3pPNK96TnXpfZiT1od6XIcn1uP7UOcTcMPb5zfdr/SxL3d9n/l4R4s2dYi7O3mNtX3a92N88GSHXk9Rbc0eRl/rx/8mB/18nfPGB8IHwxQfCB8IXHwhffCB8IHzxgfCB8MUHwgfCFx8IHwhffCB88YHwgfDFB8IHwhcfCB8IX3wgfCB88YHwgfDfAj4QvvhA+ED44gPhA+GLD4QPhC8+ED4QvvhA+OID4QPhiw+ED4SvqvUPKQLC3FyCt+cAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleArrowedLinesIcon	^ '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'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleBezierIcon	^ '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AABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleBezierLinesAndLayoutIcon	^ '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Xo4IAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleBezierLinesIcon	^ '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NwUID4aJG+Dfra2tojMeEB/9/f3iOj8sD4QHxHUtFotSV34QLpfbYSakt8Vt8MMy0xg4rjc9Pa0wqa+vTzwY14vFYqKM75f7HxgYWOrs7BRler1e3D8+Pi7GyIxjxnDb8nj4Hr4uTyaup9VqFUDk8TADebz8TEzMeAaTr8t9MHHbzHD5Xh4D84Tvkycgj1se85ZEFoUQxMEDSSe5XL7G6QNmonzO15kZ8jWZMrWVXie9LrclkwxUOnF5pn7k+twGrxxeHRqNRiljZvFqTe/nSf2tNfZkHiRf53J55atfh6hfqauf1A/IbgZEVurJxIpLJlZea5FshW30ut/vX1X2uH7YekkmtpYeZ8Vkeqb1jjlTfzKx0k4fp8yrTOPP9JyPGyv/VgBhC2ZoaEhpnM1gVkxsXvJfPrhztiaY2Npii0geJP9lS8doNIqDz/nh29vblcFyH0xs1fB1ZiozN9kiYmuHr3G53JdstfA5j4HPuQ6f8xhYgbPC5jLZRGVrivvnPtii42vymJhCodBSb2+vYjkxcf9y+zLw1dXV4nmY2KqSrT25L/nZ+C/X4zbYcmSrTuYtl/E4+Xr6WGWLja/x87zAjObKbB0wo2RfgAfDlhM3zpXTTTkGjx+WB9fd3S3q8yC4Pj+UbNbKbcnWEHfO53wfM4MtIXmm6XQ6MY5k4HlsfF9y/8xMboPLuD/5tww4m73cDgPDfbAfw9fkMcn9DQ4Oij7lycLM4jrJfpD8PDIg8rncF5/Lf7mceSL7PHwwGNwHrxa+nj5Wrivfy9fUr0N2mg7hVaD+Y+cc6l8h6jd71U/qB0T9gKif1A+I+gFRP6kfEPUDon562vT/8JCQvCkqBBMAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleClassDependenciesIcon	^ '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SUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleClassesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAADOElEQVR4XuXdTW7CMBBAYW7KUdjBMdjBLWDHMWAHtyCtkaYaTcexQ5zEzpuN1SSklT/s+Cd2N1237rher93lcnm38vduOj4IH4QPwgfhg9QSj8eju9/vfJDcCJklmZablv6d9hgf5DcjQrUSqpfb7fbebrd/P9vzJaqfcA/J/HBPOVZD9VZNlSUZIvF8Pt+73e7f+RIZpkuBBglfhPCF4IM4IH3XlX7oT3FfPshKgg/CB+GD8EH4IMNjv99/WjlDWkh8kAnifD5/mrev12tUGu4TStiYlA+iqiDdD5D+hk3lfOy64/H4KWmSxo7b8zWNd1UFovsGHojXh+g7nxoK4YNkguhhjZwM/3YMypYUPkgEZO5vMB8kE8SWlA4QVYMQY8PPAj6I20OfIo2di/1ePkj3f4IqdT52nfQvNLRtSp9OJz5IqbGsFIh3fazlZu/Hr7JmAOlr4sr9wpBLmJnkg1QCwn+ojwAZeh0fZCaQEr1yPkhFIPx+CB+ED8IH4YPwQfgg/GCA2CGMsYOKfJCRIQN+HojuO+jjduqWDzJRSdEgASoGYj+r58ZzQr9VzwfJAPF617Yk9fXCh0ZNQE2A2JIyFKTmElEtiLzGk/MeVekSwgf5Mghvn/D7IXyQeD9kyRLAn1NXzw5ZmpzKmLEP577P80EyMmaq1pF3Xz5IZd9UPggfhA/CB+HHOpq9uenYz/NfJe0BSTWLvXd3LYhuRcleKSHlgxQEKTGk0gLEqkBSEVuLyAdxQi8RmDv4L1s7cTgcPs8GL42dCxmZe+2QlA/itJL0zKB3TEpT7mopu3ucd8+a9mVcHERaT94gY9+Cm1wQOzfvzdXzq6zMkpMC0ai1bpWBBLHfeHkLhQ+yMEhre/SuHoQ/lsUH4YPwQfggfBA+CB+ED8IH4YPwQfggfBA+CB+ED8IH4YPwQaIgMomlJ7P4IAuCrD34IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IPxggUyxNUbL22tUt3FAat263gDA/js9fU+98rZvz9/aVl01X2XFQOx1rSwExYDwnyEzg+hqp+WFn82D2A0HWo8fkhzJrlx6vgkAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleClusterLayout02Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAmr0lEQVR4XuXdScxkV3mH8Vo6IIgSoYRNYIOyi0jWkaIsoqwiZZVNlGySXZRtEhEJQUR2SJ4xGMxkDBhhYwbbYAQYM5h5BjN5wBMY2hN228YG3y/1XPpXfrv42u5ut0mkfNKn+r6qe8895x3/73BObR588MHl7rvvXn70ox8tN99883LkyJHl5z//+fLYY48tP/7xj5ejR48uP/3pT9fPb7rppvX13nvvXR5++OHlkUceWR599NHl4NjPE088sTz00EPr/f3dvf025gMPPLB8/vOfX7761a8ufrqmMX74wx8uP/nJT9b7DsbPk08+udx+++3rvL785S+v82n8O++8c31u8+71/vvvX99vns27ud13333Lg9u1dU+fN+f+7znd9/jjj69z6r3m0T2//OUv17/7rHH6+1e/+tVuTn3ea3P+xS9+sV7js3nds/nZNKkW00QjTItvMf3fQyPSPffcsxL2Zz/72XLXXXet10WoFtpCuq7fCGjgFoU5FtjfES0ixpwI0/8W26IaM4I3j8acxOj/5vaDH/xg+frXv758//vf383zjjvuWOfS/z2rMZp3/zdm92Hi+eefv3z605/eCY11EpzW2bX9WAtGmVP/93smmbEyhDY0aAS85ZZbVi1oQS2i3z7r1UQjYgu97bbblltvvXVdjHH6fGpNi2oRLTzJahH938IjGOLF4LRnMjQm9FlSnhBgeK8Y2HVp7jXXXLOcffbZ6xwbu/k2v14Tot5LS5r7Jz7xieW73/3ubt2kvTk2btf2Xn93fwy9+uqrl9e//vXr8/aJeEYZ0kQQugm0+CQlSUoCaUifNxlMirAtruuTziS6hfRL6qZKm3jjUPn+75kRKgb7/IYbbli++MUv7qQUA3p+2hGBYpAxe16M+8IXvrBe298x6XOf+9zyvve9b7nooovWNfWM1tQYzb059F7rb0xakmD2PxNmrTG2OfTTM9PIXrueNjWvfdN7SgxB6BbRa//3oB6SpqQxEZ0qM08xpWsiSJONaY2RxnRdnzUOCaTe+/6G7TauhWPOZz7zmXUOvW+M3jfud77znZ3G8gXG7bo0LwZ0XeuJSY2XUDQWDTznnHMOEoII3FpaH39qvs0T4QnDNKtdc+GFFx4kGKfNkDSB82ry/VDfFpbkR6AW1f9NkuS2aH4kyYwoLSaNIYUkqWd039Qai0wQWnhjkcDG4wO6pjGS7hj+zW9+c3Fv4zGFOeg043vf+96qdc0VeOgza0pgkuRM2o033rg+58orr1zHjhGN19jTyXdvY3R/vwlofmhq0TTVp82Qb3/72ysBY0g/SUsf9PBep+1Nspo8lY4YEa6/MaYJRsSIkfRFHGjNYpo8+81h99tYHC30g0EJReNYeOMn0YEDmgPVxdzmQnO/9a1vre/17P7v3q5rnN5vjWnP1772tdWPxZgY9J73vGcdu3l1LU1vrgnHFhwcYEifT1Bz2gxJA5ow7egnCcKMXvu/BUToJKjJ9z+4GdGmfyFhLT6ixPAWEIMwhdY0zr6v4dQbp89iTq9MRuPwAZ59/fXXr89oHRAdWN08W0MaEVMjfASEAvubWWaqoktj9uzo07M5fRaksWkPSPysGZK9i9CZmKTQBy2C+er/h/7kT5YnXvzilRktomvTHP6ETfZ/95NCjjMGpWVQD3PGbHUvEzNjFX4NUOh/1zRWMcrb3va2dQ6NG2MiYgTNdxCu7s9EN+9LLrlk/TxGhLhaU/f3mWd6r78JZL9pPUb2Pi0+YwzJbDXRpKsH+rDJUdfHP/Wp5bEtXIwgERsag9Cyp0kVe97r1ISIEfEwJ8byMWAxqGmhPWt/oY1LE5m2/MHHP/7xHXxuXl2XyXnXu961Muyzn/3sOj5Cv/vd796hpsbp72KbBDPBMX8ICnPEVALnGB49EjS+WGx1WgxJkrLD3/jGN9aJzGCtH+gGAotgTbLJ0ZKIfPHFF68OMmIwL01OjNKkY+6Emv0K4JLg7mvsxmRSAIYZKXOiMaP58XFMHOYLBqdfCrVlsiBBvmGa2+bb9TE6+jS/hDaBaz4sCO3pfhr8gQ98oHjl9DWkCSZB8Hn2fiXyddcty3/8x/rwJsScTITFZETM7m2REFOLs7B+weR+QdckrPcRFJPYaLA5hkhl9NrzpEdoFF8z0zagaWP3XM+SnaARMQjwAAiYXOCg6P6jH/3oqoHSNHwHU0rDAZTTYkgPzpaGw5PwHF+TfOC1r13u2foM5iZJxoQWtbzmNTvpYMJaaAyCpCAx0W3XRrTG4Tu6tntjep+Bq73SLs638SMEMyilQTrFNj2Xj5LbkpMDy5unfByBCmFlepsHwer+GCnlg/FdH8qKZvwn5kxtPmWGNHAmpIg2s5WaRqAYw3S4GNpaLrhgOfJ7v7cioSSQo22hLULKwmcteOaG+ruxmRHpiogkGBNoJpGNi8hiFSYHfCY4vQckNHbXZXZaZwyQTegZmefGK6659tpr17/ls84777w1Y5CvE19NhjT/rEp/yzrsxyKHpVmekSGpbQz40pe+tBIgxNFvk8pRic7lkMQbJB866rom9ZOtE73/H/5hvS4Ct3Cfk8heJRpJvIVIg0SEFhsz+u09TOweGgAA9FoUDhX2v7nn37Lt8meNRwtjYKjpgq2QkfTGeMc73rGuvzkU78S0BJYZk9NDixOZqlPVlA101eRDItnTkENSFVH6W5DmYU0CcUTRcPoT5567HPnbv905d2NDJhAQx8yh8iONRQO6t8/Y8RgsrRFxSS6fkAn5yle+sotPAIPGpsWthZbQsOZBM/mkrpt5Lff1XrTBfOaNKd5PNGYVTiX5uGnRpRv4iEwWaUhyZE1b+MxHcY5QR8ziFLu2SUawVaL/+q+XO1/ykh0TE4IWxtHTmO4jwWoVMaH5NM/u7+80eGajmSaZ5pn4o5ldg0H9HezFAFqHqEBJ78UM2el+zKvX6KHG85a3vGWdF9ByulqyaQLSC01CraOFS1esjvaP/3i5a5vi3o9UI8xkFJjZWEzQrVtz8bMrrljHa2yOunuhMFlgKZdeW7gonSkTfzRWjGPaaB5pBrUFl9I73RsxM2P9j2Dd09hgOHMFtUWDru95NNWY+ZnXve51K+1ksk+XKZsGVm8ohxOhQg6Zrt4TKN3xF3+x3PzBD+6ieaimSadBaQRJ9H4ThYZ6hmwwDZHWlpKZ0T5pBgr6gXwElY3ReP02NqcM4sawGWTKYQnwMiVqKlImTKIYq7luib2iqdbUveKf5h+Nuk/BzRwPg737Ge9DGfJIZmQbb7TozNRqBraLu/Gf/mk1ZUxEE4C8Im4PZR+bZJNJCkwYUXofYVXuei8Cthg2uEXxRzA9AivBQnmkH/oCu2UPmmtjh5ykQ7q35zJdGCeFLm1PU5iprs10CzwFjtAb35NGRR8wW4hwqsWszS9DDr/zOwf3bBeXdMSEh6qd/9EfHdx9TEOKUHPuTUKp9MiLXnRw5JWv3JmWn27H+cFf/uVKFGYENJW0A0uTvojIN0nps+Uc6YyBGlMgKXoXAPZ5z+qztKVxQ0ZvfOMbl1lKZvImQmRWla0jOC3iIxGZ4PSMmC1V1PMIiSrofuFqMuTp8l4bMYBijbp6UpUaNsmYJI3Adj9w+eXLA8fQy2qXtwy59w//cLnvWP4LfLRodvixrbQxQ9LhLUTDQp/1dwSC/REH/u/vrpEwZC6lZBqDVjBd/E7XqRDKVNPcxiq2IPUAR698D/pUhSzL0fwSVmCAL5OtXuO2PQY8nT/ZcFzTpGSiWlyDFhz1wJyx7pOI0cT6n9NbteaYtiDsLjF5TBrXDpEXvvDgkVe/epe804QQ0WRijZNGyE9x/MxB1yRtXSe9AiBYh4Ja4zT2O9/5zuWqq67axVKNx4TK3kboj3zkI7v5Cfbk7KR45OpiUrSR1xKfKEF4zj5TThQ0brqZk20AxE5SYPjsY8m1/An73wL6v8mZtNTFiki2TDz6vOcdHNmqM1OxmqVtIDpRlY6PJh7hSLAF0hR5MXHCdPzmPVuPpGN6toRpuagcNLTVfR/72MdWE5T2CPBmxM/cJjBgMCHoc/WerpE8VZ/HCHM6zHwdarKoaK9+VfqaZMFW0tHEJSA91IKpOLt7NMn5x39cHjxmVmjNfp8T6WOOLJ4po2UgssIUOAs9SfZpwBD8adjgrPkuzn6rEQcxxX0EhbSDuVIqrXFmdxuLueWr0AZg6UeGYjKlte2jsQ1ps/AG+dCHPrRmgNMUhMle9vDMVyYtWKwSlxmTuyJVHHqLFhCScnZZdhRzEDDCxHxawxdJMNJEvgQ6kqOa40BLXUNTwOxMjRhGlK3eocJoLXyNYLJfRGfyOXKmdDIXfft8MmFfSzZqAlQ0BtQ5kdRkptKIiFJFrhR0jIghObavbSPUn2+DRfidQ5ONndW+WSWUt5oSorGB3UcUCcaIQWB6Fl8yCYEA0wnrJ5P6b2woT+DJHwIiYhIam8n2fPk47Ut6DGZgG5E5eT5QnxnEtt9UeFxfVhOfQVl/QyJikMxIPqPXEpJN8o5//dfl83/6pwcxaTZAaOkhoRzulBqxBmbIbxEOCcTuASg0YKwl5WPwmX02jjqJ5ozWAEpjFtAgPUJjGk9bkMxwRO1zzIXOgA7gwbMJnNyduGXm7jD2sDbVDVuqc1GXIm1JE3LwUtWpse7GmHXrVrq6Xi2h6zI3OXMl1zXpeIzYb3/729dFT1WfzjQCgYyys93HJ/Q5wiieiRtmv/G8R+2fnyHFfA6HLcHJyU/BoXUz16WuQrAAhVlv5zcAmNml0nuYIsje4KZas1+L5Nj0LPWAGEFLepWljdBrebRA7g/+4OCubQobIyUhq3FnIjhkzyPZs5cWIWirucg3zZIulCV7y/EL5kT0+gBmdY8QTU2R49M7PFMu2lX5UMLBH8/MBMYQACHArCPNdqiNB818jwd1Y5NSJEqCTEoCMubkZ/ptMalxTLrj0kt3XfJsvPQL+5wpE58wMxY1CcthS53wVdCdxUBCAAAkhkBiCJ32EpdM2zRhM2OsXdbY/BIn75Uf7m8E3xX1jnXwMM0aOKwVU9Y4JGxeGZejElz1cEUpNXcOUgdJ0XvIS8rEwkT1mrEjHieM8aR/pko4Y4KhEqexQGoCQVsgM0dbuoZNVyCb+TGNfHJgmV9RvzzcDC5teYgprUe+LloRKFqO8XzGtDh8NBONUfO9TfGGxKD0w6xnN+i6x+LP/mz53t/93S6F3fu6HtOIoLK0irSGrCzIqdwpngAhOc3DaurQFCnnmJk30Txoq7MQilIKsBYojcOW0QWf5zieIzcnVmtdAmdwFjhSyFNbmRliSAsTJWYFlI2xUSgCyeY2AYRbkcq2AHPftu5eXkuFTz/we9/73uWyyy5bJ6nQkyQxEXC+xRkXs2acAWVBfkyZjC+HTRJVHPXucuBMAvMiPlFaVu0Ty3RNhOHzSHh0kRPjY9RrbNtgZvkK8J3z1sChjWpCYP5SZ82G+ooNVji41YSaGOSomBKRecjLbqUWp3m5z0S1Xd+E5ZEqr6ZRCKR+QTInEmPWSBJpntU7Psmuqq5NO5kb5oCUypPJSdG0CEgbaVLPht5ki/WotTatQIRFg4agUmOdWpAIXqYZouRLNEnElE0D9SvvsqpYafFt3gcaYBuZNt2BuM5f5LBz8n0eM5oIk9YmmdlvK60udqF1GtA4dYyyPYFggOucr8SfxgrtReIPDRPQ1tyUY4zZgMG8AhDTb+nM6ZkYzqwqX4u/aNksV8+aic9pz4aDbrIT1kV8agiyKtDcuXXit2xLoB7Qbw5fi7/ovjG8Zs7kuUih8ZSJmYpJGLidrZ32msOGjhpHnqm5ELbmNKP55ocRgjTmZjaAW5+gUGFrmr9Zz8FUzR2TIbIMAIDgVu+aazZwuWCNo8QxaQIEWX3Ev//78tDzn3/AaXe/zo41Lvnwh5ebXvayA7uWqDpTJ56YUbtFkm5+DdHmVjlM6gdSc38MSAAiFD8mgOt3zpepYwJnCke2AeoDEvhUaSAmS9CKVvtNFkATM8xkabeNPsVwm0xMD5ISsEgmg9OZFTzFfItvsN4HCW/a1lDu/pd/2W0PSEJjntqzBZJaUkjVzUfkO3NiM/iTe0I4UpxA9WytRK0xBkFGCZ+gNyHBFD1dGr+Za3AZzO11+gzaRNhsdOWnpOm1qHLsNNIa3/zmN/86MBSV2vchfSLvMp26gAxCkXhDLBtBpVg0SXS/FEWSYCzoxYJnkMrWgr+YMeEz0we5kFZNFRx56NDfytCAgsyvHB6UKfsL3PQZFClHNSHtrM33Gj1F6MyZ2okYD1Nct+GUWkQVtQ9vzY3tySsRtgPMDTmzpCqLyyGT9IhRDUU2lPnoPq2rsxjFBDCfs0qI6PJXtIP02c/B3DFxjc+8cObKCaJ1kj9LvgjMN2oAnzGSRkG0QGAMmjsHjKcQV50/gTQP6RsCsIF8bP3V7LVrhNv6ike3JVc3sYkcagtbzd5f/dVy/8tfvnPSNs6w672fFPYsKE2bkIVI8IlHPIdpozHiFLkiRTWwdabwxVUTfaUtysCIBnVJoM50OvAxO2kw1XMITMRXhOIzCFXXV9YoGFevUaORadhEAAm9LsTJXdfEVtJh5J3z3HJYRyPm3XbllcsTW+3ijBvLplG9VGIKkBeepx1s8tRIGjwLTwgn9yUgnBU7NQ3QVXObewANASq7L22kxqNAJ1PsGUxnjNLLRVj4CWbVemapWjmi92JSvdUxbDMb20SxE92woWKUxz/4weWBF77w4PFjjW3afdIGE6N1cT+GIJCmspnQqxdsSr+5WBAiie5JbWPbxcSZMluYN09pQKieS1O7n/M3d+kMz8nUmpOIfSYwJ2TmW7kABzEkzPNUCNBZrJYZKx+4wl5EmF0gs/kYFObYVlRz4427BXGUTTbizx1FUgyVg7X2aHhQb9HrJXUwz0CBdMBIkqYmAsrqAZaiIJW0R9FMZpvZYdLUQbQRgaRMqFiKI4dGjQWJERgmt3WXoaBVQAKtZx1Ynt7fpd8NpC10Fukxa7bz0Jq5mYe9BlP1LPWapGhqs4+98W3i7xVSUlugHQJT9QN+BvDQBc/8zMokeMtJG0+2N3/CN6oASufQdLky+170mDF/s+FOkAvigtPagayJmeSXmOhNAzBXpEUOH8afzdViE5OYHFbQkSCEljJVXRcjInj/93kL7H9+JuZFqFnyVWgSzc5qHKJ79r6jNy+tnzRX/YKARBxdLTYd2ZDDLBMG5m1u3mFyZ75NTQnM5hsxdJpoMVT3bIKncPO0nfYTUjFJsrl9LIbMuoaG6WzjPqQEP0Hn8l8ShY0pZS9o46inCZgpC/6BOdOQzWfIic0ORmiKBIPtHLM1qh7Os1yYKdlkjJe6Ibxzp+5uz8yxGg3hl2cDAjCo+9bjmZJIMIxJMDlMmt0iE2WQHPUMO6OmJGc7g8ZNuFf+RNsmSWdu1Kl1ikgsTpOFmZwoBqlvz23NYDATB1hghCQoX8JkSyJKTPI5xp/b9abAzqqgamiftQVdJZZWdIpRpQtWZeN4JHkYKMI+DMSeBRjB2dxl2726QLo388N+c2j2XLRQEir1IuYQYd+21yRB+lQRaa4mAhCUVDINYOxMgTBZxgNipOnzK7R77a7ZMmM/7phHTWE231fzXWPwo8rJbZcu18dcNdesiUNvev6mxYmWpwnRtDwLKzQCIUxmOl2S6VAxUuLoJzthqSwkExSdx3Hk9MUms3dM7mdW4BBC4xk/NyEp5ykKxwDrkC6ZtXUn7fWerXkYYwexdh6WoWdvY4oD0H1uSJpFr3kgm1zWmjrpD04VonLh7MQD8Vr0LLQABB5AgsBIcQ6J08bZM9UTkkLOvusVryT+mDNlz7k/fH87MqZI1SOCXBMfOauO4peZXseM5iY/Ji/HjPGfzCvEp+AGnPApwgdzsTdl9qxtpD8mMxAZ2sJpn9MeDAENaQI7yh/M2nK/+Q7mwPOqJip+2Spnu5j7aeD0FTTE/7o3wHLvmevcqDpPHVIqmIlDiEoOTAP3PMEiAAC9adjQGSPTy8TrmAeI5qEHaLPx8Aigji1CFr3qb5JmnicoyAhPSIqRfI6Ok92WhGMmoM9y8sxRbUVqMc1DL1iIDEKyOKfM0YrJpMmg/XNS+CSmbKYx1DQgt1kPkVAEBPKRNghJrwAPOhsFqrRHhne20Qq4+1krhrorNCjMaNnpN/NAGBNk92brDNuooaF71EwsErwjjRNe9vc8PEb7UYQoN0ZY5gGUfrTZzNZM6W3veTYhUkDSSyDd0r35P+kSPkJZQlaheerqTNtjTk3pmCf2am1tOZ9CZP5vetOblve///072m3m+R7T5gqOSLm2R2lo/1NX3LdQcJR0OEJwFpNoR/ks+xbBUCar96X4pcH3N7vsH7U3TzmdjMNQCIlp1dk+20QVoGZj96ww8gnOeNSdcu655x6UMpma2rXnnXfe2gM9zaxSb/er728mA5xTAtlIhNmgsm+ymChB0cw9MV1Ul9RPuy2lwocwVbYB6Bbkh2aj3CS8gHB/hxL7PdPhHDC/4T6CJqaQRuma2XFi3XwqE8Q/Yer+EbJKwxSA1Zmts7stbYoqs13SoHYhKcpjHlOFWQ4TmPkjzGIa5K9U9qAZST2VvO5PmkTrInha25wgKc+eWsPkQl+uUYWcO3+VUgmLJrtZdwF4zE0OSkA9N+AwcfO0CoTnazF4aos0ykbLaG+Wk4eeJlqgvuz37K5AfFoCEZE8/kbCTqMc89HnjpjVOyWDK/Go9AmuasiYTn0yBLNmT4DFE5BZnqY5GIhhHPW8h0bO7AR6eIZKIDM+C22z010qyPwbf6PK5bQfRJow2MSYlIm4OHeTnmd+0BJ5pHm6qeuhElF+miG9DvVo75FNxqDpHyZDaMU8kRqjpIPmSXekXowzE5eECsHktMREerF8RhOgQsiSoM/j2XVKhth2NXV2U5ef7hA2TjJPtx8HL1DUNgm3Qzyz1WXWyRVmMJo0qjsoZEFkjuLQw6shw2eHnZIwg6+5MYgNnxLP1xBKSJMATFM9i1dSJXO3LQHSyaNvGVM1qJtjz7n88svXk4f4tA2146Ba7NxGAHVEkHmqszQH8+SexjBpEkgT2GfZTklKNjnTpeYtY9u9mS69XLMqaK/KPkOYK8+en0kRzU04TK++MyZMZgJx54lIU7Pm87r3ggsuOO4wZb6281U6fnb/Cwdo5epDJrZ38uaMF+bZVhAI6ZCkMylgYLbeS+LNWgotoFmkq2tCW11TWSBfQQCc9qN2PrcJSL3s7241H5/13jzMkiDqKpRcJSRMy4T4+5v+ZwEPkJCG2ofnzkc+7LgN429mLmX2w/IFFj2Px5hOHKqAvjTaQRTsps4Me1CabBohnzRP/lFedWw5fyQinudZ0TrSPLWFkJHqWcmU7mGyCA1mYQjTPXNih234n2AHeJjhAMKDx4fdv2oIAvP6OvCUSUFfhaYJZ0Xks5o44xMSNXdKiW84a00VtolBZLRPt4q4RhxEkNQX5vePINp+HDK/F0TNfMJjc5sdi3MfoHNKnu6AS4yhIUwRf4VRrMz+vRsoB+bvYdlwUsJEkVAqry48TwMlAXwNCeMQ2WU1brGHAs7c55FvaJy0xKnbs+WGD5I6114zI/nZFQhuCkptgfP57G4ncJ65fwLDyRyzNL8kJvOMDjPKJ4DTdG1mC6TqIRMTMeYB9JgmzzU3/8+yKkeFKfNbDQCFWYsAeTUPgI9MV37FJs/mWyQ/s9GTKRKZ83tGZu5rtqRiCOfMH8xgd55cTTNO5XDLhKmClZKyb1+Yydb59RY72FumVV0jxpQM6wAB9j0idRBNME0JlnSBxlLeM/EoJpgbVRz0Bfo6tYFzZA7THsLi8ABjgOFzKwDpl1kQgDFDs3N+oizgA/yX3XXvDDJnOuRkz+YVr80Ybm6N7r2Skq1xQ3Lb+Kkg1ANbaGZj9qb2eV12IvfpE6CZSXxSyU9xoPwBmElLMHVmAsqm6h7XANF9GtEADvMUjCWF0Bb7PbeOIYa1SZWYL23h/+ZO2f2Ttk/lpzEKjtsePr+QprPoq6/v6iFJ7dyoogVGAm6emSv9kValjtMRzjqJB1JPjhgSEzVrJYJQOHESngZBY3Z7qeHbYMTkaEPqOa1BXouUaymaXyQjk0BoMEGwuK9lBO10zuVliq+44opD6zUbOX6lzLkBc/ZYzZ4j8Yrv8CBZUJleKpVGC+InwGEEZW5shxCRT/QHWBRzgLv2qtjrKJiNgeIkDJwISaTOX+6f+T6bI+bhnhgwT+o+E9+IgFarD4GiIChMkdzTFDZPvNEtwTnuHwCAABNhQSuQxewonBtbOO/ZzSKoms1t+b55npXjZ/kF5k2XCWRD8gVyQAZBlHEAeT2fYE2TdTJo65l+mPnjDp9RrSOtsr3BX8UkTdQSbpoV5tas7s8XtUtKMEcbDivs96P9aHb7QWok3sITAjms2dmoiimfBrY2x56ni10K3sEzM0OgEMfJ0/SnM0/P9tvZDhtzIzXCL0iTaB62+0kpV4pBzWCmCDj+maqedQAMmc3Q/MlMg/uWnP3qnARc/1fS5Xf4QNlTJmgWmPQMeA6LYD38marnDHRPhKhO90tc9vsBjmOII/oEWvZB9F7npXfKjx5ViTKow7Wzrj1r565nvuRsZmefwpY6A/OiAASOIogDzXSo6GLUqdLc+BOJUdc4x9fcITR+RVQuvprCZq5TK07nKyn2v+nt0G/6TKrLUM5TE1rQpZdeurbUT2cfqvrkJz953Pd3QAhM2iy6zHOiBGZ8yKx5g89SL5rs5ulsiGDbg65LpdOeEaTsGkfQYohMQu9rQmDeCODctgA+z290YHpP96D9k0FlG/vRCwRFkjMOaPEa3UTJUhyIN3ux5hGpGDIbDmbhh8ZgqPfmd/FCfDNrK1Ngm5gGaiYNIguB2a7t0IM+D6zoNqep83SFabJmxwqtOdWvo+BHT/qLJedxdOwqwrDjtMYGnfndtbMYRdqKPIPEUwvmQQDKrFPSPJdZm0d+SM2IJ/iSnps/mY5aSiXTpQwsGJUpLr0v2zDP8LUuGjdjhH1EdDKw91SR2GYeawrVzK92iAAKRPqo5tblNCYzNpOJvd/Jz9ddd91x7ZNikYm7p7TxNTPlrWg1k34cKgAhXSLtwpSpgOqm0ScGqdm2bN1SPbRj+gj/T4Y8nYYctsaTYohdP/P8j9mq43umYHqLk+vpNedPQzjJfcw+6wAngoszOravjzaQcP7IYs2N5upF7llpjr304iOxEqivq4U1YJbA+Dm/fZN1IoI/q++gynfMvYSz6gemCrZ8tfbcoKKKx+nP5OIs/syN+M9kb2fFUel2VvEmQsNoBxrY36FglpPvM7uCBZOlfTTw8S+eBx6L7jn2/QLVYUQ/3XTKjiEFcknZLKK0gDe84Q0HTdoDfKWeU0rngY6ztrw/od6bGyNPZlJSFhDW3HviAMtJnNmX7Huh5qZ+jXoC3T5vbYSO6ZvftLZfU5nNbidKGp6Jb/vciHYFRiQlhzw7BGNCPajBY9u/xAcINo+tO+wboU/U4nlY4AQ6GwPB1FHmV+NhCiSYf3CNjhXZYe2r+pYBGs3fc1/5YVpxOrHFKTEEPJ3f20SKZoSsPWgWgOaeOu0tGNIxHXVYqGGciPAnWvA8llvMMvNT4ptZ/FLBlCphcvus+duXkqZo2pgnR9DCaVr3v3p83/+diXzWb8BeTXLzGzrn8UxMjVM/58lA4hRYHZqJALa1nayD43NcLzsgglcXmd+POI/Jc0ppz/QVTszP1JyC3Zkc1SztFGtIcTZKzDT8qcYWp8QQf2hEI5Wz2gfS+jq9uT0hyFsyUdC1/yXFpzvpubUBs9T197cUz+xxhGbW/D3huLr7n//59Qf/+Z+P79I80iyOcdr/srOZeZj7PJ4zhuTc99vop6b0HrurfVJannMHLV37bLOhGgGUPNOOforA1WZAZYnRCOXEIceBz8DVkbAXXNCe9KcOx59H49odtZ8I3O8Tfk4ZAvZOO/mpviF6OPakMDMEu0udiDt8Qf78zttTyYDOlLfxZJb5EduQZ02ExjC52pga5yUv+eHBP//zg7uaS/cWzOoDm+b2RS+6Z3n1q48ed9Iph01jn2218KQZsv8liE384osvPuAvTKwOeSmHCQ/Z42x3fmXabmmS+d6pIBPMnSewydyS/hnJ95t5zYRedVUnpj6x2/WLqWWxwX1Z5Ysuumu54YYHjjtN7pxzgvqP/YYPOVPVwhMyZCb6pqrOnFNOsR1CMqdzT4VrfMXcmbaxus4538aXfmdy9BgzQ86ElPjkf2xdc74KwDK/sZTW/O7vHjk477yntOJMVgtPyJBJ0MP2783WzAKq/W/IERAeBgnP1MRnNlicAjSAwjRkAgA5runcHeMBxq/f4XssJvEsNRRx0D4TzoR/POE3fT6TCbGQw75490TNw6SJ+p/o2lN18LOTxRmP8/jZF7zgwYO3vvWpRmpfsIzAL3/5w8vf//29O7Nr27VjXdX95/MkWeeXz5ypQPA3GJLjfiZH+3R9SKdCZH5m5r1Ot/Q5uyWTbg0O//VfT27Nz9Fds4L9i/a/v/WtTyzXXPPU9oqELZjLJ81DCFQSmef9zO9z7tQn0efG+8mceW0qX87rsG7uk2194eSZvWeCk6SWjZetdgKDOEFKCOJKE4ytYYOJu/76o8tLX3rzwS23HF9Mo9kYdNZZjxy86lVPBbC/FYaErCrR7r9/IqJvY5dnPQkLnwIwzd5+IDbnolG7dIjD0+aWAPDW2b1zd7AOmMa+8MJHjkuVTARJcy67rF1my6FJ1OeMIWDu/vtpQlW2g+f455mAgAofhmklsptXEpJzvuyyp3ZbZbpsu56JUWn3CftnlkBubVqR5xz2PtOPBubf1g9inchWz8DzuuseXl7xittXP+E83pj13//9+MHznnf0YB4QUxTfxtK5L2R2VO7XzGezteB5P+H4v8KQ/82fw7RmOtmzz16Ws876NRPml8wrtKmVJP1XX33z8spXfmfnJ+auqsMITRMwSgz2W/Mh/5d/AAFmZT/dY2eWcqwaD1TUz/nn/2J5/vOP74jUsf/7v//Y8m//9tguTdLPJZccH//8utGuvq4n//8zZF9rZrJvQlTlWQHhPMzTj/iL0+6+1752Wa699tHjCH3WWY8evOY1y875d8/f/M39y+Y5otz/AFJUUcsg4NQ/AAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleClusterLayoutIcon	^ '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'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleColorInGraphIcon	^ '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kWvJ4/jRyf8PiGByCdcGkMEAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleColorPalette02Icon	^ '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'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleColorPalette03Icon	^ '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SUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleColorPaletteIcon	^ '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'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleColoredNodesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFhklEQVR4XuWay07cQBBF/WdI+SY2QZHYZsEy6yTrfER+Iksk3u83DK8Bppw5DnfUNMYzA3Z43Gu1bI/tcnWd7up2a4qy9NdbUuEfAn8g/vIH4g/EX/5A/IH4yx+IPxB/+QPxB+IvfyD+8gfiD8Rf/kD8gfjLH4g/EH/5A/EH4i9/IP7yB+IPxF/+QPyBvAHd3NzE2dlZ+AOZQoPBIO7u7qLf78fl5WX0er04PT2Nk5OTODo6qsrx8bH2ZVMZ3vPgfG9vL9bW1sY+N4HdB37gG37i7+3tbaDOgSwvLwdldXU11tfXY2NjI7a2tmJnZyd2d3fj4OBg5ByFlkjBUfYElQpQFFye4dnt7e1qv7+/H4eHh6PKch37BFHvH5aS/crKSnXONY7xiT0+4SO/8yzHFI7TQAEdn9Rr2HOeB1s+YhebvAc/qYPuoQCbehAX+ca9ad1kI6vLg7K0tFR7nJdCDqROUHgRlZUzVF7O4AC/KYCU4UtGAeNcwcKO7uU5QGKf+7h2dXVVVZp71HM4vri4qIKDDe6h8kDd3Nys7uf4+vp6ohbLfdijND0DTHwgFmpo+EidBQzf1SC5fn5+XvX61A4NhIaA31xXY+YZfuMaGUP3yBZ1KnLi7AmmAs11giBnMMyx7qcCGMcwBhU4XqbWqZcRDH7DhhzheX5XD1PLppLcw3u4xrFs8cxL0gIBS3sPIJ5jA795HlvAJj74S1EWUANSPRV87uf9j1KWKHMRKZ8SQLVS9nJ6GJgS4wSIaxyj+fLftnC7ELO92cpJQOlFvwa/YrG/WMHGWeXs9Bzb+EMF/vT+xNfB1/Jb79soTVLBrnK3Uh0+dTFWEF9gKCNRR2DR4Kk/jZzfipx6ks9qnSJolMezg4dbru/xPZajPr+qyDbHv+N3YGcmZqpUd59KOh1QaXikXqCkjaltUY+03un5IyBcVJqYbrrWDERqAiIRFODND7cfw62r3kBrJV0znjFu0VK5Ru+nN9IQNKHQuNIGKBpXOl5zTp0pRd6tcIaWMv38uT0gbYp0TIUJJuObZo+kZI1JgKDe6RQd8Ryx4DrphEJqIdUAUjZIp22luSKdiaSD26QzGInx48vdl6pVc/y/gfCdQHDY0/I1sQAAEwRaOXAIniBpgpA3QOykQJXOKBoHeI5Mgm3NEAUJaDxHmRZUBYQX1OXT53RFQDZ167aAkFp5nwLGOcECAscEPvn2KQGj1kwhmIxX9Jb7ycSoaJKhom8uCr0juRb6MNUkJf3u0jSdc1IfMR03DhbXc3MRP39GXYWnGURpCQJB939qKtkWECqZ282PyclAk316iaa7CqAG8Sa/sMGzlPx3xUmDswox0DuBn94/JvUXZXz69Ch4GmSm6R3ZbKx2nt0WEFrxOCDTaBK/6oCks6Y02CmQ+2+Psi4eEwOhe6UDXd2YkW6f+58jPefldF+lj7aB0AOVruoAdQHkKaU97eWDegOQfIBrmlXlW54q2l6oTAdcxMD6WkDaXe2tAZKvzdTNuF4TCL1BSzPqfbnP7375PRJpOURTNlokFU6ncOOAdClmNSkQ9Zguv67/O5B8wEqWM6Ku+74mkLw3qMdozMoHWH8gHQPJlzC01pWuC9kBmR+zdSmtRTUt3H1oIG/JYa0IN01zn7PK4A/khUCaegAfYu8eyEfSe55t+f8vyx9It5p2UdQfiL/8gfgD8Zc/EH8g/vIH4g/EX/5A/IH4yx+Iv/yB+APxlz8QfyD+8gfiD8Rf/kD8gfjLH4i//IH4A/GXPxB/IP7yB+IPxF/+QPyB+MsfiL/8gfgD8Zc/EH8g/vIH4g/EX/5A/IH4yx+Iv/yB+APxlz8QfyD+8gfiD8Rf/kD8gfjLH4i//IH4A/GXPxB/IP7yB/Ih9ReUe2Cwge8uvwAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleConditionalLayoutIcon	^ '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YII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleForceAndNestedIcon	^ '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'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleForceIcon	^ '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MAAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleHappy2016Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAJSklEQVR4XuWcR4gUTRSAx4CiICgmzHEVFFTMOQdQEdNBRBQMBz0IBozomjPmcDAsooKgiKwHFcMaMcdddfVizjmHdd/+VV3TPVXV1T01PTWz4/8eiPqYnq6ub+qletWhggL8kkoSwj8F+IHgF/xA8APBL/iB4AeCX/ADwQ8Ev+AHgh8IfsEPBL/gB4IfCH7BDwQ/EPyCHwh+IPgFPxD8QPALfiD4BT8Q/EDwC34g+IHgF/xA8AOJUaBDBygIhQpg6FBwdE2aMN3o0ZYOfv8GqFOH6aZNY7rXrwEqVmS6TZsg1SYLJkxgYyPPQsXSDRvGdG3bQkoCgfR0a4D2Hzh4EGDWLFGXmwswdqyo+/QJoFs3QZdSMB49Esc7dSrAyZPieNPTzQHJzs52EX7y5IlL9+XLF5fuz58/ER0dFD/wXbsApk8XH+b6dYBRo0Td+/cA7dp5Avn69auxFfPr1y/Xd718+dKlu3PnTmSFP3ggjnfSJKA/Ni8gqvH+JlZB1r0mVkEbyNOnT106nRtB3bpsGXfuzJY1AQYVKjBdr15M9/EjQKlSTDdkCNPdvw9QvDjTTZ4MqQTEGl+fPmxsZcsC/PjBxtylC9NVqeKYsViAvHnzRg0kJyfHGBAqr169cunu3bvn0t28eVNrZRYGkLt377p0t2/fDjxewZL4AYFBgxjlWrUA/v51PvDs2bOoN4Lmzdm11NwEAHLr1i3fB4Tz5x2zAKtXQ7KAwIgR7LnIKgZuHmQg1oqnn6tdW1ghUU07vbZZM3Ztz56OPgR0knjbGI54vIB8+/YtMlnz54vXchNmDEj58sYdfTQgQJ+Rf66wSZXHC4cPe/oQFZC8vDxvX7tzJ8DcueAL5Pnz5/5AFi8Wr924EfxMQCAgNWoYB6IysQKQnz/F5xo+XA0kK8sTyOfPn4MBsb548OCIycrP9wXy/ft3cdl16uRadkaBkGugdGl2j8xMSAYQ677z5rF7kh8EcD9CebyOuafmh5OoQBQmi5q8kN9k6QCh8pP+ojScZBAgiXDqOkC8nLpqvI8fP3bpVED+cv7Zlvck3Hc79X79Ir8G7qIXL15EXyE25fbtBb3qWt0HFFbIuXMRp75qVUJWiGWm6fcXKQI0R/IbrxwVWr9uem3NmoJ1+UQSXeFzbdooM/oPHz6IQIDegLdlM2b4AvkRjr/5Ze1cu3YtGAeSAKfuWiH8MzRsCLphOhw96ulDeCCwdKk4T8uXgzcQmhDyH545Ux/IokXitZs3mweSDKfOPwMN43WBnDmjB2TlSs9o9CNJkN0mixYB6QfT0oRYWmVXeSCCU+/dOzEmKwlOnUY41veXKwfAJcM6iawzd5JTlyfayehpvc7nc85P7j4pW+g4OpUDlyGZBJIspx5PZeERLTxKIk+0HUVF+5zo1KWwVzVIGQi0aMGu7dgxMSvkwgUSC4ZAznMCV20zMiJBwtmzEC8Qp75F6nf83LlWCHXmCqcuO/8QXL0q2rfZs7WBuDL1DRt8fYhcrNMCEt4fMeZD+PGWKRMXEL/yOw/EcuL8famT9wRy40ZwIAsXitdu2RIzkGjFOqhWLXFAaAXa51lzyb6NLxAuJJeB8NGTy6mvWOENRMjUGzQQnLqWybJ3B8NldeNASBUaSpZk9zhwIH6TdegQ+y5S5resQxxAhLmjO6I++YUT/NC//UyW/Y8HdANGw9GpnLoqezcFpDCdug4QKg8fPnTpZCBU8jkfEwiIvJulqpRC69aMPA3rErFCLl0CKFqU3WPHjpig8ImbVQhMABDo21dpXVwrxLYkUkVDLrHEBcTl1LnGBGNAKlcO7kP4sdFIzTAQOH06mA9ZtgwSA2TBgpgydV0g/E4l3Ro1AoTUqUwAuUGDIHtsNGzWAUJrcB6lE6NAhPi6e3djJksAQibA2Wffuzc2k3XiRMRknTplHIh1jwED2NgaNfJ36rS/QJGvGQfi5dRVpfsgQFLNqctA4nXq5leI7dS7doVEAIErVyIrZM8ebyhZWRHTQf+dJCBOlSPVnboxILo+hP9MFF9jzIfoOnWaCJpw6qpBxgNEt61GAKIbZRUGEJ/ye9KAuDL1Vq2UeYgxINeuRfKQ3btT2mT5OnUTJks3U4+n/P5/deq65XfjpRO7H1cn7A20Qkgi5tSy9u+HVAPihL2NG/tvUClqWc7WBTd3cQFxJYZRMvVAQKpWTUpflulMXSi/y5k6+b/rlMDWrUCv990xjHk/ZP1680AqVSo0IAnbDyH/DwREa0/dXnZSWTkeIEIt6/JlsMoeAYqLiQZijY/bMfQ1WdSZS07d12QFBeLl6E0BKUynHs+euuysvZy6Z5ODyl5qrRBam9FsJQ20p56dHek6oQdkDIiq/BN4hditpE2b+m48OfMUPjMTCEjUviy52Zpz6saAVK+elO73IN36VsFSpy9L9iFcB6arUc7v5tFaSV1R1rp15oGYbnIwCeTYMfOdi/EAsW7WsqWyrGwMyMWLkTYgbr/FNJCgzeFWgyAdW716QnFRzsCd3l7pYJOy2dprsnS73+M5IlYYjXKmx2u8+z0WIPyBHSED7dEjMedDaNdJEpx6UCAwcKDW+RCnoiGlB+/evVMDUZXGox5pk5061yhn7Ehbkpx6ECD8jqTfkTZYssSz2dosENmpr1kDJuJ6AUgCMnVTp3DhyBE9IPIPlwPy9u1bs8einfI7LS8bSrRSxanrbKg5Tr1+fUEvH/p0eg+k4MfznLrJFwcELdalmlM33QOg/eIA5+xCsWIA3AeCvFqDdoDbFVq7bgMkMqNvP+CdP5CAAUqUYLr+/ZmO2GenbjVmDPwLQJwMnORL/HFA1XiF3da8vMic0L4EqiMRV4hGMYJ9mzgR/MK5mN91kpHhftcJLRiGD+Y7OuLc7GJbKr7rRGVJYN8+Tx8iR6Ou+8rztG0b5E+ZQoDQ0NbjnHoQcZ07zMwEq6NefhvQuHGijoSJ1upJ0bcBKZ/VZz8k6rXy1sXx4wBz5oTPqYdTe3lfPPBAbRNI3yUlO//x48FZsmlpTEchhpes3WUC27dDwT8gMHKk0llrXUtNNTcnglPHL6kh+IHgB4Jf8APBDwS/4AeCHwh+wQ8EPxD8gh8IfiD4BT8Q/IIfCH4g+AU/EPxA8At+IPiB4Bf8QPADwS/4geAX/EDwA8Ev+IHgB4JfzMp/N3KR2+sTkjsAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleHighlightableEdgesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAD40lEQVR4XuWcOy+sURSGR4NKQvwZjVAoFBKFaERoNUQhGnEpNH6AaJQkfgIRCZ1EhDDu9/v9OnGZOfM6s2bOOTliOPj2zHxnnifRme2zHnuvtfden8DLCx8/EeCHgC+ED18IXwgfvhC+ED58IXwhfPhC+EL48IXw4QvhC+HDF8IXwocvhC+ED18IXwgfvhA+fCF8IXz4QvhC+PCF8IX4HLW0SIWF4gvxi5CyMr0EAvwZ4ieenp4UjUbfnSXq64tL0+ys+ELSxPb29rvBvhgYSAhZX+cLSSe3t7dvAr68vCz+kpUh9vf3/wT/4eFBZ2dn4ueQDBPt7NTJ+LiSzRa+kH9VSLFkq+JiZ4HT0lIiV1RWil9lfSeAFjgLYCQil5KPFxf5QrywtrbmNIBHR0d8IX6Tsre3x88hnvcSMzNSLCkrttHzOtbNzQ1fiGe6ul7iOaW7W6neLPKFfJKD2AxxNVY4HI7VCxH+xtALz8/PTgP4P80S324MXUt5HB6WPjh8TFo+9/YmSvK5OeGFBINBZ0GITk8nAltf/6UxrwcHE5/b2eELub+/9xSElZUVXV9f6/fZltrbFRod1WdLYTvKPz4+Fn/J+uIMUWOjVFsr2wheXV3pMye7duB4cHDw4fednJyIn0P+ro4mJ6WhISXbgS8sLCgUCun8/FwKBL59W2hSkomx8flJ/c2TBeJfFpx/HYMEPZ5bmZTT01NpbEznaUzgvheyu7sbX7cfHx+liQmpv/9TwbHZ4uqPQDk5bCGWeG1Nv7y8VKYrMvX0SLF7FNu3GBgh1pBgSXPHUTlpM8r1M9qs20ljuZtWIWpuloqKtLm5qY2NDee/ZCr7suJLaFNT2vq+0iOktDSlfVOp7stSeXna+r6y5k798PCQ37nIF8IXwhfCF8IXwhfCF8IXwhfCF8IXwhfCF8IX4gv47xj6BDvltTvzH7/OyqxTMRMntGghdolld+cfLVHWQrS1taXV1dWM3WtkpRA1NEj5+fHA2qXR0zf7fe3zdgn2XFcn5eXx3zH8KjYDLi4uFHF87K2Kivh4Nra1CfGFJAtSa6uUmyt7FcEaDe7u7l4FyvUrCq9+dgybPdZEEampkQoKxBdSXZ3oDnynzdPl9exH+UQlJb745wO+T+ouG9Yy1fyWVULm5+flx7H4M4Q/Q3xS+ra1ybpWPI8zNSVVVUnhML/s9faEiZZSz0I6OhLFw8gIX4inQIZCkqOXN5XCEhp7dJLt8IXwhfDhC+EL4cMXwhfChy+EL4QPXwhfCB++ED58IXwhfPhC+EL48IXwhfDhC+EL4cMXwocvhC+ED18IXwgft/wE8aALou9qsYoAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleInnerAndPopupIcon	^ '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AAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleLayoutPartitionIcon	^ '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SUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleLegendInPopupIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADgElEQVR4XuWbsW7qMBiF+4oI0T4G5QloxVMwdGJC3WDswMAEA4JSCRaoOrWVKE9A7ZsT4SpNY8dX1dUlfEc6SmL/RFE+Y/tPnAtr+TolXfBvAR8IX3wgfCB88YHwgfDFB8IHwhcfCB8IX3wgfPGB8IHwxQfCB8IXHwgfCF98IHwgfPGB8MUHwgfCFx8IHwhffCB8IHzxgfCB8FUdIJeXl+b29tbEbJfLpX18fDT9ft9+fn6a+/t7q7LE6f7NzY3h3/ZfAplMJub9/d3kt9Pp9Nu22+2a9XptVquVGQwGRkB6vZ6dz+f24+PDPD8/84Hwu6wzBNJqtdLWrW7J7Sct3u52u3R/s9nYw+GQ7ufr3L/i+vrae7zf77/+QfJ2u7UmkTt2MXwgfCCn32Vp/BiPx+bl5SUdL4bDoZU1XiTb1CqfzWbp+CHzgVRgDNFEQGCL4MoC4gA7yHwgR93d3ZmHhwfrLGWPfWWj0cjkf6tjlXtio84bKk/OY4vOo7KzG0OcpeyxryzfNck6VnlMrO+8ofJ2u22bzeaPcpXxgfCB8IEggCgDzw64UnbAlVXmZlW+2RUfyInOst7e3r5mWM4qS8DbLHgffF8DkPlA+Pr/Y0hRdp614pXVF9X5uiyXECrBLKo7dkemqPWXdWPuH6Lf++pD15U9Px8IHwgfCB8IHwgfSKWB6Obmp516IyggRVPPer3OB1Klae/r6+uPPMT5+JTXFlkPIIsaR1luItdqNT6QqinUUOSTAaLVJFoxUuSrq6u0Zfnq3UqT0DlkKVQfG6NMvdFoBGNUX3bNsdctq+vWKpuYuH82qMcM4GXPqWL7/7+J8T06yY8nZd1T7HXLutGa5MTE8YHwgfCB8IHwgfCB8IHwgYQzdedOp5NOe30Jme/NIR9IBRLDUFLmEjNfFp/J5oMNSFZ9WSM6vn1kA6myyhpTbKb/60zd2X0XUhaX/W6kzE9PT3JUbEyGnok1Z/cKN+/8Amuf9dcOPdHNr+dNHBUbM3ZkY/lA+ED4QPhA+ED4QPhA+ED4QPhA+EBOG0h+9XuR1+u11ffpoUcWbrWK+369zIvFgg+kynIfpJZZixn4QPjiA+ED4YsPhA+ELz4QPhC++ED44gPhA+GLD4QPhC8+ED4QvvhA+ED44gPhiw+ED4QvPhA+EL74QPhA+OID4QPhiw+ELz4QPhC+QvoDvX+dONQ5jLYAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleNestingAndPopupIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACO0lEQVR4XuXbzYrCMBQGUN//IXXnUsGFgos6c4VAJjQ/ZaDang9KMbZReuJNK+3h9fLzTTn4h8AH8eOD+CB+fBAfxI8P4oP48UF8ED8+iB8fxAfx44P4IH58EB/Ejw/ig/jxQfz4ID6IHx/EB/Hjg/ggfnwQH8TPdkDO5/P0eDymufX9fv+zvl6vr1hOp9N731jnbbGdf9hX+oXcbrc3zC/WGyByPB6ny+Uy+SB+ydp3yYrRncpUWYby8jT3Xipntdfl9mV/aRsfxAfZVsmKAxvzQyzxOh3YmEOiLeaPWHyQDc4hOW4JnJB9kOzsKT845cGqtT2fz6ncN15H+8i2tX5b7bV+om13c0itnNTaytIUS7pmGdm21m+rvdZPtPkgPogPQoCMziE+yM6u1JdO6j6In++cQ3plo1aWeu+1+myN/pF9e5/bez/174P4ID6ID+KD+CCbBpk7HW2devogOzvtncNv/XHYGyA+iJ/PzCGjI6tXanrlZsk2I5818p1H+xr9XqO/MB/EB/FBfBAfxAfxQXwQH+RjIHExlt+iky/pfl4fZEWQtTJ10rqKL6/mawNodBD5IBvPNJBV5pDW7aD/HVFL+hwdzd/+SIQP4oP4ID6ID+KD+CA+iA/ig/ggPshXgrRuLMgfOSsfS6stPgjy18m0ID6IHx/EB/Hjg/ggfnwQH8SPD+LHB/FB/PggPogfH8QH8eOD+CB+fBA/PogP4scH8UH8+CA+iB8fxAfx44P48UF8ED+t/AB/sRc/XKQU+AAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleNestingAndTitleIcon	^ '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'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleNormalizationIcon	^ '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dUYAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleNumbersAndBeziersIcon	^ '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nl0/lgAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Mondrian-Examples">examplePartitioningAndNormalizationIcon	^ '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Re7mS7a9SVe4O7xv1OZpiL5PjSbXN5V1ijWFda5KnJn5x33z/9XIDigXFrfsIwt67OyoG6iG0lOHtAZCfnqi849kFNlOiXeYtRG1qVXrzq/cvHSKGDtQguGzyYmAQwSPFJDSFkvaAKGF0e60b+h07WjnTpSZTiIZ9/aziI50K9z/XXd+FTNLZydHda+uufhnD/4cmw6EbKtuVIfr9msp60StSZMwLxVU0IUvaRP0oNaOlACRDZcicv6cyGVdj+zzVvyy55m4u8FkDptGmtCO9k0Bkgqz9MCAyH2rAzU6HNpQcBmOOWKDMwJOeXpDXrEZKW2iPo/yU76oW21WbMT0xXox0XgmYESx49ymwgiEF/D+QV3mAfmf/wZaA02fueLFo+8n9M424rWlSjq/Fsp7DVJGb50kEp0XVNuqhWmiaJ5MUuHAWwk7nU76JCbaFCB66GHH0tb2ym3ulVpr05E/kAegWE9tpQpQgPzwxR/I56TztvNsOjsjgBwPX/yVZiaLv/gD4Q+Ev/gD4Q+Ev/gD4Q+Ev/gD4Q+Ev/gD4S/+QPgD4S/+QPgD4S/+QPgD4S/+QPgD4S/+QPiLPxD+QPiLPxD+QPiLPxD+QPiLPxD+QPiLPxD+4g+EPxD+4g+EPxD+4g+EPxD+eiD6P5rJTjj+5tZzAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleRadialTreeIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAK00lEQVR4XuWdBZPkOAyF9///gmVmZmaqZWZmZkbP3ZcaTflyBjlx0pm2qqZ2djud7uhZ0hPYO2NionwZkswoXwXlA1K+lA9I+YCUL+UDUj4g5Uv5gJQPSPlSPiDlA1K+lA9I+VI+IOUD8l/5+/ev+fr1q8l1P+41a9asiTNnzphPnz5Vvx87dux/9+f1379/m/IBqcmcOXMqpaWK+Vd43969e40LkLNnz5pfv37xu7l9+/Z/rrl161Z1zYkTJ8znz5/N2rVrzcuXL035gEwqZ/v27WploMilS5caAWTfvn3O98rq5/6u13nfly9fzKVLl6YsqnxALLlz545KIStXrjRbtmyprsUCfNfduHGjeu3t27fOa54+fVr9O27t27dvxvX65cuXzdgDcvr0ae9DPn/+fOq1P3/+mH9XbRVj6te9ePEiqqhnz54FrxEX9fDhQ+OzxCaudFoBgoIn3UMUkNi19+7dCyr8w4cPJmR17969Mx8/fvS+jisj9vz8+bNyaQcPHjRjBQgPj6DgJ0+eeB9u0aJFZv369UaYkO86YsSPHz+qH9fruDNffBFX5bMO29VhoQBy6tSp8QEEN8VDXbhwwdQtwcW6Zs+ePfX63bt3vdeiUN/rKJDPlFhSBwPQsRLfvR89elS99ubNGzN2Luv169dVIH78+PGUm7h+/XrwQXEZtmJcAuVF6bin+mtYjs/dnTt3Lsisvn//bmJuEVo9FkEdtyWrOmQpCBblCuoWE6roK34+lbWFyAWWd/HiRdM0Fk5L2osr2L9/v1m8eHFQcefPnzcut1O3wFRAfIngpk2bookq7xUGGHJ7gwLk2rVr0ex39+7d1cO7Vnidgq5YsSJ4jQ2aL9BrhM+ZO3du8P1i2Tdv3qy+f8jaBgOIlsfH3BaydetWo0kchTVp8hTJdWzW9urVq+j7hCHC4vi8Xbt2Gc0zjBwQslzcjSsLrsv9+/ezPRDs6uTJk6r72bFMAwaWjPUBShsr7BWQycLdVKDFbb1//960BSTm1lItE3KxY8cOgzWFiINd+zpy5Egv1pAVEErdKIQvLoomyYqtQKGabWtdDx48qCq4basGLqDt/MglPCOUetAsC0UDDu5rwYIF5sqVK6ZJLInlLSkxSSwElodoLT927ZIlS6rFqL3nSGnvZG9iggQR5dK3gPrC96msbtiwwZCl+95PqTz2GakUNJRr2KJpoGGVMEvtPQeXh9SFUgaAABZA4e6kRI4cPXo06vZSyxz1xpVPYpVj4pDUvqQp5uvD9AYIvtvXe2grgIR1SdGxqeLqEqr21sswoSRRXicXwmXyXVlAIwWk6/4BNJq8AUaE9dSDfIzJNRVfRViSWr4LCWIXcaMVIARtiodaNpRDWJm4NXoVKEeT86QIJITSDgpH8RAU+V0AGSTtxV/aZXBWa6jnkVtIBFGOHXM0QnHSLnugaNyeUHbKKKtXr55+5XdxV/QZKFnDxTF1WIdvDKcLgYlpyyYINSu+X1fubmSAsKpcihCqu2fPnl4fGNcZ+75cA52NtYKnJSDaoNznA7gSSVhgDKxiAEnJtnMJeQn0k3wDWj4xjaWzxNDVTOpScJkLFy6c1mAkAUIFNHX1SS9cW8FtI/S+NdXcsQEExVLy0MzGYh380LOYN2+ecQ0n9B3gxw4Qyg+yAvkdv43PhuMfPny4KoUDgouFacrybaUPKxwMIACB+xFlkynDpgCFAWqsJ9abgHp22fRJyUumPSDS5PclftoAru1nNxEZzivGZeVSJMU5XJivgdVENm7caIY0MO2Kv9u2bTMjpb0hkZHTq1evZgHlwIEDVZdylErHe1AToxDKYsNF8ydlHoiNtqw0EkAYH6XHTUzJEYxD+0f6EAqsq1atMlLnC80pDw6Qei4DQWgb7HNZWopAdJhH9tFtXDOxVxpZ2S2EXkTbskQoDvFg9kBbivRVxcU1olzNIIRNx137H7MkhuzpICDjIqCZrExpGsWmxDVMDHNvsimzj/oVn3Ho0KFqHiC1hdyJyyI42asCk2VV0wuZP39+1aii18y/2ZMjUF3tkJpNYQFZ0/yirM7K7UI5BGiUX59GQQ9d5T1qQOjSkQSyUvCdMZOlXIKZNtkmRntY9nVgWXw2iqeKDFhYIwxGtj1LMG2rDOLZsmXLqsabxuq6GAVSA7Jz587kfjariL3hqS1XRDOVKGUZWa18Dn9vMhWDdVtbp5PiIp+bq5aWxLJiY6D1L6odv/HFk7YEgtKOEAm+u31PLA4rrvduIBapg3hipYACsFgwpSXoL//OVP9IaS9upm2Ftw2YdUHBojQUFnO3qRaNe4PiAkidlHD4AXF2ZIDgLnLsNspdsme+lyM2tDlGm/krYiwLCjaaes5KNkBYHaxA2cTZVnLnFqFNpb7nyVHDSq2xJQMCDyfAY6awKCnFswL58Fw5Qe49falJZ45iKn2i48ePd2shKJ0Nk/USQheuL9e9mk5Z5tzx1YvLgm52tTs150b+poDMnDnTrFmzxvhiXBd72Ge08I2drR5YDp+RY8arTSWYKZbNmzdPdUnxBMw2k5AClOwgGzkgbBdIOfvKofApbo7CoIVQZfw29THKFTJxngPcLsiAWAh5DGARO6HUsCr2KTadee6s/A7tq1NXkjHcnGT9oWw8VwzJAWpsZ5WdZwCIZo9L74AI5WMF1SksGXPX243JzPl8KrRt76VZ7TYr02zL6w0QTJcfzNlXfNMG7Da5yORxS4Z2cVtr414a2kzi6TskpzdAKL3Dt/H78qVjCtf61zZBvR5sWSRt2sUwtVjBkxgCIG1OX53RlsHwBTh2wn7wXCWRNjulXKCzYJrGlL6OAszmsiiZaMomKflF7HSgphZIDFu+fLlJoe70Ydj/woLrcqgiCyDWaQnBL0qjKmVTD7NMTXa5anIDZrk4ACCVFuOaYVJdbQDKAgiuxXeyaJuEUnPMhTZvCAmFRG1DDLcnJEFO1CaODs5lxXIS8g9Wlaa3TvCFRiLa8jXXklXTl2jKpKTEEhu0sPvp69atM9qpxEEAgktAqVrXgDLs5pR26Cx1/inmfmOHyzCNaBdZBw0IboOHsldrKBfAXZBMuQbetEdXsMJxIU2JgJ37UEmI3QfXm9NVdQoISaG9nzwWAEOUUtvHt09iyDGiA5vq6oCZkbksVj0rKRZoOTmIKqrrNQ2bgYbambRmkI1DCELxRvKVPg9G6BwQKaOH6DAxI+TO2BYXy11c55TEgrsm0ZPEVA7F6XJisVeWFUv8Qk2umOIoUvoGEgjQPvflGgFy5Rw2IH3swR8JILgD2fEUG/chgfMNHMguX1ecYXXHyuBMP4Ym5xnh6XsjUO+A1LP60BA2KzRUe4KBhfamM/MbikFSBPRl9uQ1/D8mYw0I1JRyCMkfXUNfz1oCqi/YS+wITTiSw4QIhTSWWBRD2eM+0hjC9gafSxB2E5r6I/aE/DqKRny9DNs6+R4MWhcNSMitycoOMRssJNR5lP6Hr0rAILgcyMl5WbmP6xsLQFjxMoEOEyJHcbVENc0miRHQZhcoBHxKIEN6/qFaSOXT+dO1O4vchdiDkBS69p/AzDi4DAuio9nFyE4xgNjiSgplWzV5jLC2On2V/3kHEHB7Q3BHYwGIT2S1YyF9/ocr5QNSmJQPSPmAlC/lA1I+IOVL+YCUD0j5Uj4g5QNSvpQPSPmAlC/lA1K+eOUfeVqoeUse4lsAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleRandomGraphIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAADjElEQVR4XuWbW0syURSG+//XRfgDIuhCobAuzIyKqDACLdJCJYTO5/Nx9fEKG8Zx7JsxzRmfBwRzxIv1zFp7rb2nse9vPnFijB8CvhA+fCF8IXz4QvhC+PCF8IXw4QvhC+HDF8KHL4QvhA9fCF8IH74QvhA+fCF8IXz4QvjwhfCF8OEL4QvhwxfCF8KHLyQqjUbD9OIL4QthC3l6ejJ+yYoJ9XrdisUiX8gokU6nbXl52fhC/piJiQnjZ0gfKBQKtrm5+etg3t/f84XEiefnZ76QJHZis7OzxhcyYLa3t0MHeXd3ly9k0KytrdnX1xe/ZMWFh4cH488hfWRnZ8fu7u56Curn56e9vb3xhfSTZrNp7+/vgUGdm5uzQba7arv5QkJ2SldXV/bx8WHX19dds+Do6OhXAd3a2uIL+d/drplCIrxl6eXlpa2s6frFxYWtrq6GCujS0pKtrKwYv2T5gnJwcNA1KK+vr5bP5wPLlyRJWLVaNc0Syhqh73Yrd27Bj/PQGPsu6+TkpGvwpqamTNlyenra9h1vNjlmZmbs/Pzc+Iv6gKZuzRkuS/wZ4V3Y9Z0knaEkVkipVLLDw0N7fHwMbJE1rd/e3kYWcXNzw1/Uow56Wiu0qLu/Ly8vO4K4sLDQU2AXFxfbfpsvJAD/Iqz213VbQdf9XVkU1EjwMyTCsOa9e50ILfw6BRQqcWp/da2XIa/XHQKUkOPj41Y3pSB7s8EdxXoXdUlxGRJViH5H8IWEoFKpWLlcbgvWxsaG+e/q33RUOqlUdmGFqEsKu/ekO7dWq7XdweqwvHVfa8tPcwu/7Q0hJMpWuQKucqTtEc0hkqnPzs7OWiVNk38ul+Pv9v4FEqCJXFmRzWZbIvWZEyo53g5J4nRNsvhC+sjk5GRLguugNOwJzQvKikwmY24OCSp/erBumHPFyGaIC7iyRNP0/v5+S4Teu4nczSe9MD4+bnwhEVBWpFKpjiZAMlSaJKeXrRJ+hgxgbXHvp6enLekPYydaiH+bw+0A84UMifn5+Y7gJ7nlTbyQoONaZU2Yrmpvb8+G/UDDSK4hQWg45GdIjNC/tiVp9hh5IeKnBx34QobEsM82+EJ8rK+vx3Lhxgrhlyw+fCF8IXz4QvhC+PCF8OEL4QvhwxfCF8KHL4QvhA9fCF8IH74QPnwhfCF8+EL4QvjwhfCF8OEL4QvhwxfChy+EL4TPT/wDMqwUZqPbYhgAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSidesAndRadiusIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAA3UUlEQVR4Xo3dBdB1VdnG8e2oI+ZgAgYSigpiYmKBIKIIYqDYiYggtliIitiBjd3dIHaCIjYqdreggp0s9Ldm/s/sz5lvvu+ded7zPOfsvdYd133d94q9znLyySeP973vfeOTn/zk+N73vjfO/s+/pz/96eONb3zjeO1rXzt/nvSkJ42PfvSj4/vf//64053uNK8/+T/3vfnNbx73vve9x5FHHjmue93rjj322GMccsgh8+czn/nMeNOb3jS++c1vjm984xuz3Wc+85njJz/5yfjyl7883vWud40f/ehH8/33vOc944c//OH4zW9+M7761a/O9k488cT5nn7+9Kc/zfae8YxnjMMPP3ze459rDjvssI2///jHP45b3OIWG3//9a9/HVtvvfX4wAc+MN/77Gc/O+//yEc+Mj71qU+Nl7/85ePPf/7z7PPd7373+Oc//zll+stf/jIe+chHzmue97znDe24/53vfOd8pderXvWqcbnLXW5c7WpXmza49a1vPe5+97uPBz3oQfMacu+1117j1a9+9dTrFa94xXja05423vKWt4wPfehD4+CDD546upbd3/72t48XvvCFY/HfscceO25+85uPhzzkIdPY//jHP8b+++8/3vGOd4wf//jHGwqeeuqp44wzzpifvf/97x/77LPP+O1vfzue8IQnjJe85CXj4he/+DTQF77whWlwyrhPZ4Tw91e+8pVphBe84AXj9a9//TjppJMmGAj+4Q9/ePziF7+Y95CDkj6v/1vd6lazn0984hPjBz/4wZT1Pve5z1TMj/fvd7/7TQMzLoNyyKc//emNNnbbbbfxnOc8Z/z6178ep5122tSVDTgcEBmHPtrjGO2R/fOf//wEkza897a3vW2CdPPNNx9XvOIVx/HHHz/7e8QjHjHe8IY3jOc///mzH4D817/+Ne9zP30e9ahHjY9//OMTaEccccS4zW1uM5785CfPIFhcqCHI97sbjj766Hmhjh/72MeO5z73udNpz372s6exGZKHL3/5y49nPetZ43Wve9245S1vOX9/2cteNtuBSteLhj/84Q/jmGOOmUr5zDUMT3ACM8bXv/712abfXXPWWWdNIV/60peOb33rWzM6GAvCjzvuuOk8RoE6xqMD1D7mMY+ZMj7xiU8c3/72t6ce2iQjw+65557j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lZrmMgAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSimpleNestingIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAACz0lEQVR4XuWZzY3CMBCFqZY2aIACoAyogSMFUACcOMGJU7L7VjvS7Mh/sPwk+Z40smKPEuSP57GTWd/zNSTN+FPAB8IXHwgfCF98IHwgfPGB8IHwxQfCB8IXHwhffCB8IHzxgfCB8MUHwgfCFx8IHwhffCB88YHwgfDFB8IHwhcfCB8IX3wgfCB88YHw9SYgh8Oh2+/3veJ6vXb+2vefTqc+9qvvnn4LPYMPJKPNZtMtl8te8T2Jnb/2/ZrI2G8TXOpfLBb9er3+0263Wz4QPpCJLVl+4jWxikeAKPhAniA+kIEB4Rf1DyxZqaWqNF6beI1dLpeuBMaWw1ogi3qqmJfGc0uWHz8ej10s6r646xm5cWtXqxUfCB8IHwgfCB/IAIHsdrtOE5OK8/n8A0QTorBta9z22njM80Cs37ceSByPwd/2OgfpX+rPERGIjcc8D2Q+n/ex9UDiOB/IAw7StlVRGpfLcuO6d2ncBwaIJkT/0lLcbrfu941vMZTTkmehZ+verfmK30Nq028ebVFPLRE+7OViLc+WsFqef4ViS1ZrSC15WipHCyTWgBgGpJaXqimp2tFSQ3yrQm/XBiSOx98yaiB8h/AdwncI3yETcEgE8gyH5IDUHBKBTNYhOgsISim0PdWZopZn55JanoWdQ1rzFZN3yBhVcggfyIeA8B3C1/h2WY/utu6pDffutl7pmMGfQ1K7rdLuyVoPpHYOSZ1HUrusd+y6+A7hO4TvkI8ASX3N860BiV8GcxG/JJburdYDacn3QHx/KfgOeYFDfDv5GlL6R/6nhuS+kbfWkFaH8GtI4ht76lt7zhk5IDWHpN5p8R3yQYdEIJNzCF98IHwgfPGB8IHwxQfCB8KfAj4QvvhA+ED44gPhA+GLD4QPhC8+ED4QvvhA+OID4QPhiw+ED4QvPhA+EL74QPhA+OID4YsPhA+ELz4QPhC+nqov6Ocd2QtwZA0AAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSimpleTreeIcon	^ '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8QfEn76P/gCZdK8iJGbd0AAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSimpleTreeLayoutIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAFQUlEQVR4XuWbuU7sMBSG82S8Ei1ILAUSPAodLRJi6aCkQKJBghKExL5vnstn3YNyfZ0ZJ/FkwvxHGiVxvByfL7b/OFAMBvrWJyv0Q6APRN/0gegD0Td9IPpA9E0fiD4QfdMHog9E3/SB6Js+EH0g+qYPRB+IvukD0Qeib/pA9IHomz4QfdMHog9E3/SB6APRN30g+kD0TR+IPhB90weib/pA9IF0YbOzs4Ozs7PB8vKyPhB9IOJAPj4+3N3dnfv8/HT39/fu9fXVle+7b3t+fna3t7f++PX15fNw/fT05K/1gTQwAk7gAfD4+OiDm7uNt7c3D/Xh4cG3w49z0t7f350kEJ5oAkBwCDrB7+PDwehilDHaGGU2Cl9eXuiC+3VAcJpg0wF7MnN2pA9Gf8Lpkb4y0m0U9gYIiy4/ZUuJQdGlEuKnbCkxyA6EYWoqyNaH8lBlKDNtcc6R62mGQDysnxhx4ZqYhAqxNRAqtbXAVFETWYljtpijbqZhfWHNMMk9bM0hnx1rAek6aLlgd2nExWR6U4hRILzx2ltvn6aV8nR4cHDg8HFtbW2ivu3t7flYbW1teb/GInt/gyIiCPg4aaFwc3Pj/eA4tveQ36CIVldXHT7OzMxMdIRsbm76WHHMDoS5j3mQoceP8769OYfzNEfbv5qEP6yt9kKYY2ov6Ii9RVdlmnSnw4elSrGYpO5i8QdAbGPTtoAaA6mjlLrudMrDUhUs/DMpOQ4Y9i5VFSceniZgijZO7ezseKWD0shlqCbqpO4cshqYZdXY1relpSW3v7/vUlXhysqKbx9VOCyvqcaiTwrDBEXuj025VGMT31LLmGos+qQwMFQTdaKiutxDGpdvqWVMNbYCYqqCl7Vcb+emWobN0XWMemwBblunffuoUw95U/KbIChyLWoWyDZrUvi9oC3omAxtKk1ZD8r+pfhWLjOq3dp7WeFT0kR9VNmwzsVANYXRBkqszCjfymVCoGFMf1TW3NycS1mkUBjkTVELCwsLLmWPiXbn5+dH5tve3k5Wc+TDz4R8yepnWH9ivlWVIS2MdehvkapA6qqFlEU0te06aq7r/sR8qyoT8y1MK1IVSF21kLLHlNp2HTXXdX9ivlWVifkWphWpKqCuWhj2YcaM7x38UhZ86kwRDZPoz/X1tYuMnOiaE279sJiXdyIKk5vDtkKaqIVRnS3fT807aivEfOuyP/b3W+HDEtvyoa6wHmD/B6SOKklVC6MCmAokrKMqbwihq/7YyCnXGYNowEK/wpH/AwSVgArIpRZsLg2VDPWTL2yHtLCdv3tQ/6TFVCHl8ClsZ9z9sTyHh4fO/FpfX/f7XbS7uLj4o8C4zz3bV6OMKT3SLSbFuNRClZKZpna+A+mvAcCR642NDX/OIm912Dn3RpUpSsNzcH5+zhw3KD9lpIXqhrRQgnIdLm6UI2/5KZ2mdo6OjgaXl5dud3fXl+f6+PjYn5+cnPg6yufcIw/nVWWKUW/MsTT7c9BwXg73/+1vYlPq/K3t5P5oV4QLWLjAxb4U4lTMsVi+sKPT1s7YgZQbMCfLaaajQwWC/MNiSqdcftrayQ7E5jXmRua1i4sLZ/Pa1dWVY17jaHMc+cK5kLnWylDe5kzSrfy0tsMacnp6mu/fEVJW/iZqQakMELOPkGErfxO1oFQm6wgZ6FuvTB+IPhB90weiD0Tf9IHoA9E3fSD6QPRNH4g+EH3TB6Jv+kD0geibPhB9IPqmD0QfiL7pA9EHom/6QPRNH4g+EH3TB6IPRN/0gegD0Td9IPpA9E0fiL5F7A9htB21NeOvdgAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Mondrian-Examples">exampleStyledLabelsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFhUlEQVR4XuWZh0stPRDF/c9t2FDE3isWsPeCvVcQGxasWLFiQezj986+N0vu7l7dveKHcA4E705ys0l+yczkGvXxwa/fpCj+JeAHwi9+IPxA+MUPhB8Iv/iB8APhFz8QfiD84gfCL34g/ED4xQ+EHwi/+IHwA+EXPxB+IPziB8IvfiD8QPjFD4QfCL/4gfAD4Rc/EH4g/OIHwi9+IPxA+MUPhB8Iv/iB8APhFz8QfiD84gfCL34g/ED49VuAnJ+fy9ramlVMu9pQz4/gfwQyPDz8ERMTYxVTakM9k8bGxuSrOUdhYeLi4iTIgv52IO/v73J3dydPT0+e84q07rvCnGtra4UOyPz8vITrv729PWxdR0eHVffw8CA/cTrQ997eHh8Qfe/R0VHIvC4vL0Xfvb6+HlKHUwE7oPzEmBITE8XPOn4LyOLiotTV1UlOTo709PS4gnQkQOAyBgcHJT8/XyoqKmRkZCTwAlVVVXlOPiMjQxoaGqy6l5eXkH7Ly8sl0o33lTAn9N3f3y8/BiQ3N9febWaZmZmRSIFMTEx49olyeHgoQXy1851zc3MSGxsr4+PjroVH37AtLy+73jE1NWVtONSnp6fLxsZG2LX6444+5I+wOdG+ubnZatvd3W09Pz4+ur57dXUlcKPR0dESHx8vFhAM9Pb21lV6e3vFa3LFxcW2HZ8xmOTkZNt2fX0tQYFsbm6GwOjs7JTS0tIQG4K1XyDZ2dl227e3N6ufra0tjNUFJC0tTXB6TNv+/j7aWW2bmpqkpaXFHgvGarYFSNi3t7etv0lJSYL10OQANrzDOc76+nrRA4H5ZmZm/gXip6gQlNSGQGW+AGBh7+rqCgxEJ49iZjkmKD/+HdD+9W23LSsrk5KSEjE3k2ppacl6Pj09tdvv7u5aNrgxs2+1Z2VlhdjhXmEHBN2MKsQq1E1PT3u6yIWFBXG5rCBAQDKcGxsaGhLTBfoFcn9/b/c5MDDgWnQF7cfH6wLPzs5a/eBUmJDxuaCgQMyx1NTU2M83NzdWe0D04w7hovCMoA052+spN6Wex3nSIoohCQkJ4hegXyCTk5N2n15+3HQXfjMsDdrwzWZiYAZX9fWmK8zLy5PP3CPqkDToM/qG7eTkRPzcPRBHvE5fxEBM1/JJCXRC1K+rn3eOQxfODxBkfdoOwRL+3PluvFfjiul24W5ga2tr81wPBHjU456jNgRina+fu4fegxDMne3hNgMDUd8XZLd+BcSMS6bvN4Ou33diceA+1A2a2dnz87MdfLFrsZheLvf4+Fj83CWwqHjG9/zePT6bR2NjY3AgZmrq/NHwOxdDtaWmpopXDo9SWFgofjIs+OiioiJx/kyxsrIimgUqGLMe/YdbLD0d5px1t7++voqfu4fGm3DzQF1E9xDTPfX19cnZ2ZlgcprGeX1/dXVVnN9vbW0VPc5wE2pHIER2oncHtTtv3k7phHGh9FpYHQ9gIdsKd6FENuWVKVVXV7vcnzNdVnndPfTUIg4721dWVkrEQA4ODj6NIxpE4RO9MjUzDpmnRHeoV/FyZU7pwjk3gNMloWBxnPV6n9BxoWiQd6bc2taMJ16b1hkT1Q646B8bGs960Y74po40Un+G0ILd4kzldLei4LJl5vMo2Blm+9HRUevWqvW4He/s7EiQ37DMtNYrBQ0XtPX95pzg9i4uLlzt9e4RTikpKZ4/YppzR0EG+S/BEFxA+f9jyPQPKn7xA+EHwi9+IPxA+MUPhB8Iv/iB8IsfCD8QfvED4QfCL34g/ED4xQ+EHwi/+IHwix8IPxB+8QPhB8IvfiD8QPjFD4QfCL/4gfCLHwg/EH7xA+EHwi9+IPxA+MUPhB8Iv/iB8IsfCD8QfvED4QfCL34g/ED49bP6D68in6oZc4LNAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSystemComplexity02Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAJ50lEQVR4XuWb2W8cWRXGyzzCv8AT4hWNQEIDEkjMA+IJISGxzGgEPE2YYBQYaSARnpSjTGIGiYRAyHhJvO8h3tt7uu3Ysdtu7/va8dbeEsdrnGTsPkV/x3PtSk+32704bc/5Wkd9q6vq1q37u+fec29Va4YhXydJmvwqkA9EvuQDkQ9EvuQDkQ9EvuQDkQ9EvuQDkQ9EvuQDkS/5QOQDkS/5QOQDkS/5QOQDkS/5QOQDkS/5QORLPhD5QORLPhD5QE6AptxOytxJI/lAjkE7Ozu0tbVFy8vLNDExQX19fdTZ2UkdHR0ww5fda79L5+yxfvcrczgcMM5vcHCQnjx5QtCJAtLV1WW+4X1DwVtaWqixsZHq6+upsrKSioqKKC8vjzIyMujOnTt0+/ZtSk9Pp8LCQiovL6eqqir+LigooNTUVN6P40tLSzmP1tZWzttut1NZWRnnk5KSQmlpaXxORUUFXwPnJSUlUWJi4ivfOLapqYkrfnJykitybm6Otre3Ob27u8v3gnL39/cz0JGREZqenuZyoUz379/n8+vq6vi6yNdjxudGXmZ47/MukzrOvP15mn9LTk7musrKyqLi4mKyWq3U3t7ut/FoaCkul4tWV1fp5cuX9OzZM26djx494lakWtPU1BQ9fvyY9+M4nIObBjgFEFZbW0vZ2dn7BUOBUJGoDFVgVLgCgf3YVr8pyICHay8tLflswWjd8/Pzflv38+fPqaenh0pKSmh8fJzvybzf7XbTzMwM38P6+jrfW29vLx8HsMi7u7t7v4G2tbVxo8S9oYwouwKKe0CZVUPNyclhQxr71DE4T/2Ge4UhjXqCYVvz9gq0HLRq7DS3FtUCUCBVKByHC2AbhcnNzeUWjsLl5+dzgXEM0mghmZmZbDgex2IfrouKQ4M4qluPjY0F1c0gb6fTyRVeXV1NOP/FixcB80BjQNkAa21tjeHNzs4SYHofCy8FYECEKU9FT4C6wn2jJ0H9oM5QX0hbLBbuWZAGRO2PFb+lhw8fcsWkNF6jjJok9oax8TE6XxZLDksaNZVn0+XUd/kitS3FdOvex3zxqtL/UENdDt0oPUf5tTcpIed3ZKn+lErKUyiu6gzfwHsP3qPctk+pwH6bx4ONjY2Q++ycF6nU5moNq89HF3d96gJ3Z5fbz1CT00LdT60h5QnQgIzeYtjVRv1LweUDyCgH6hV1hW/tm2PafiZJLp2NXZrc9O+VeOrPi6PBwkv0m4y98b9nuZ7imt/ic6bHrTQzYaNf5WvG3f54KurRjbqmPftuu8Z5aJ5P55qVutZsYVUkWuUHD2Opbqgm7EH4W317Zft+i2akO3UjbfJi2HkWDMZT3sBHFNEoq2PDxmaWAlLUrZM3ECUFBOm6BzrBkuf0sAuHARnjlwomGhoa+BvdH7o81TqDzffWos7R1YkHgv7Re/BTQNR2ICDhCNfGYI3ID2nVD6P/h0uj8tGdIg1DBFhTU8PjAqCp4CSYa55oICsrK3zzhwFZ2Jqkwq5/RgQIBlYMsOhHMSgilIWhYQwNDdHAwAAtLCxwpIXQVXkD+l6AwzE4HpAQSiIgASBsAyryRVT4OuYPEQeCm1Ct9CgtOVQgNs/HsmLhimaPW/Fs92Zz5JLZ8Veyu6qoaiCXkifi+bcr03+htk1P7L5pMzKaPqChBZtxY/oC78sa142GyXJqdnnmLz1XqXgwk+pniymt9wKHugktZ8g+30Q1CyWEwTxxXj8dQDDA3bCd5cwSRz8h18spvxkvLi7yZCscIPgoZU7obNAvCzQjc1wnGPp39PPXV3Xjv54+H/0+AgsEDm/07LWjn1RrRteqje2dHM1weMY/2E/L9s79kU0z7Ns2Nug7HTF0KoDsunfo50Vf4czedf6QHFuNfjOGJ2F5I1QgAIpJpz8gh0kBUQIQJQBRUkDSHr3qEejijgvI/wYS6F7fPyIPZHh42G+mg4s2I9dxwXOrbsrvOWgNwQABUDMQdFkwNUcIBohZ72QfhO+5I7rhvUa1ubkZ1hzIl1BXGKswg0dDQ1eObRgm2WpJJywgWEbA4p7PVtCnc0t0u3fp1/mhuT8Kjm/MftW2Wh4JB0ggwTvC9RAspzx9+pSjO5QZAQnKr+4Jwn41PiINOFi+Oeqk2KeH+Ct4uEDQauMHY/m8yxt/I2+POU4g6xvrpHTUc9DCEamh4lGZgIBID1EgICAq9bXWhmsgCvRexcbYiwVGLJfgnr2P+ULYS9wZuWljc+NQIKEK+V8a3gPy923dCNZDwtH3WjXjky2dYIG6IXiv8mCE1YCi1rZUGeEF6AYPywthu78GMDo6ynOpOdccz6EU4Fdqt9gRR2Udut/BNVwgkHmeg8ImdMWSxVmIsJZ+URj9xzM/rn21DIjUlN60H6TfztW4Pg5T4YDOdpi+3aUZecM629dnNeO1AjF7gwq332zV6ObiRUJoKxEIT74f29i+0GUFAoIoK1AhAkVY3h6SMnvQhZwEINfbYskfkKudZ+k4gPgdQxSQ49K/PDPsps9sBszf0ng0YWDcMIfkahxQaTzp/FIB8cy2jZMMBAO1OYTFk1HzwG1eMjoKkMbBe2Ttz6eQgURb0QaC0NTsIVj6hyHt7Tlv58YEBIIFUUg9/5cPJAgltL3PldexbiPH+t6TP3gHvATplAfneP+18Q95GzPxw/LDE1Vv71N5nRog35iMXnF+8EDjOZgZCNbEckbjKXvkI/J4AwNRT1SV5xzmHd6/YXJp7hJPPJDTJMDxtxTS76yh0Tnf42R1i26kF/+e8I1puHwgEZBa6/O3xFTRrrP50p+vafvmdu/IBxIJqZn1z0p8V598IBFU67aNWretYQUX8oHIB/LlFdbaAkVCgVTZfkU+kEgJE0D1wkcoAszm5mbyFxbLB/IaPQTPM/A2jAqH8bwDL32f2qWTk6Ar3X+gKuddfu0oGJk9QoXDeGkPj33VI135QEJQ4txFDwwr21HP8Z6Vm58SYkESOuoblfKBhKmyzngqcRy8gZPhjKfUybiDN2BGL1HWSBy9fyuG8C6CfCBRBqIkH0iUgHQs11H7Uuh/mZAPJMJAMIAHM4jLB3LMwmNgX+9byQcSpUmlSnv/rUM+kGiEzMPn9yHcHDvPD7zkA4mi3rLG7KevOs7KBxINVdrjqaJ1b1DHf9nV74GeucsH8hqAmJ8ghroeJh9ImBqbtdHozH1+f8v7xepQBnb5QCIk5R0AU71hocZdm/Hh8p/kA4mWvrYVQ7uez1efaQZgwD7+TJffZZ12yQciH4h8yQciH4h8yQciH4h8yQciH4h8yQciH4h8yQciX/KByAciX/KByAciX/KByAciX/KByAciX/KByJd8IPKByJd8IPKByJd8IPKByJd8IGL1f203tY3PGtWnAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSystemComplexityIcon	^ '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'</body><body package="Roassal2-Builder-Mondrian-Examples">exampleTreeAndBeziersIcon	^ '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'</body><body package="Roassal2-Builder-Mondrian-Examples">examplenestedTreeIcon	^ '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QmCC'</body></methods><methods><class-id>Roassal2.RTMondrianExample</class-id> <category>sources</category><body package="Roassal2-Builder-Mondrian-Examples">example2015| b toBeRed |toBeRed := #(21 2 3 24 44 63 82 81 83 84 26 46 66 7 8 29 49 69 88 87 51 32 13 33 53 73 93 18 17 16 36 56 57 58 78 98 97 96 ).b := RTMondrian new.b shape circle size: 15;	color: (Color veryLightGray alpha: 0.4);	if: [ :value | toBeRed includes: value ] fillColor: Color red.b nodes: (1 to: 100).b edges	moveBehind;	connectToAll: [ :v | 		v \\ 20 ~~ 0 			ifTrue: [ Array with: v + 1 with: v + 20 ]			ifFalse: [ Array with: v + 20 ]		 ].b layout gridWithPerRow: 20.b  build.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleArrowedLines	| b |	b := RTMondrian new.	b shape circle size: 30.	b nodes: (RTShape withAllSubclasses).	b shape arrowedLine withShorterDistanceAttachPoint.	b edgesFrom: #superclass.	b layout forceWithCharge: -500.	b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleBezierLines| b lb |b := RTMondrian new.b shape circle color: (Color red alpha: 0.4).b nodes: Collection withAllSubclasses.b edges connectFrom: #superclass.b shape bezierLineFollowing: #superclass; color: (Color blue alpha: 0.1).b edges	notUseInLayout;	connectToAll: #dependentClasses.b normalizer	normalizeSize: #numberOfMethods min: 5 max: 50.b layout force.b build.lb := RTLegendBuilder new.lb view: b view.lb addText: 'Circle = classes, size = number of methods; gray links = inheritance;'.lb addText: 'blue links = dependencies; layout = force based layout on the inheritance links'.lb build.^ b view @ RTZoomableView.</body><body package="Roassal2-Builder-Mondrian-Examples">exampleBezierLinesAndLayout| classes b |classes := RTShape withAllSubclasses, TRShape withAllSubclasses.b := RTMondrian new.b shape circle.b nodes: classes.b edges connectFrom: #superclass.b shape bezierLineFollowing: #superclass;	 color: (Color blue alpha: 0.2).b edges notUseInLayout; connectToAll: #dependentClasses.b normalizer	normalizeSize: #numberOfMethods using: #sqrt;	normalizeColor: #numberOfMethods using: (Array with: Color green with: Color red) using: #sqrt.b layout cluster.b build.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleClasses	| b |	b := RTMondrian new.	b shape rectangle 				withBorder;				width: #numberOfVariables;				height: #numberOfMethods;				fillColor: Color white.	b nodes: RTObject withAllSubclasses.	b layout grid.	b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleClusterLayout| b |b := RTMondrian new.b shape circle.b nodes: RTObject withAllSubclasses.b shape line color: (Color blue alpha: 0.4).b edges connectFrom: #superclass.b normalizer	objects: RTObject withAllSubclasses;	normalizeSize: #numberOfMethods min: 5 max: 30 using: [:value | (value + 1) ln ];	normalizeColor: #numberOfMethods using: (Array with: Color gray with: Color blue with: Color red) using: [ :value | (value + 1) ln ].	b layout cluster.b build.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleColorPalette| b |b := RTMondrian new.b shape circle	size: 20.b nodes: RTObject withAllSubclasses.b normalizer	normalizeColor: #numberOfLinesOfCode using: (RTColorPalette sequential colors: 9 scheme: 'PuBu') using: #ln.	b layout grid.b build.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleColorPalette02| b |b := RTMondrian new.b shape circle	size: 20.b nodes: RTObject withAllSubclasses.b normalizer	normalizeColor: #numberOfLinesOfCode using: (RTColorPalette diverging colors: 11 scheme: 'PRGn') using: #ln.	b layout grid.b build.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleColorPalette03| b |b := RTMondrian new.b shape circle	size: 20.b nodes: RTObject withAllSubclasses.b normalizer	normalizeColor: #numberOfLinesOfCode using: (RTColorPalette sequential colors: 9 scheme: 'YlOrRd') using: #ln.	b layout grid.b build.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleColoredNodes	| b |	b := RTMondrian new.	b shape rectangle 				width: [ :cls | cls numberOfVariables * 5];				height: #numberOfMethods;				if: [:cls | '*Layout*' match: cls name ] color: Color red;				if: [:cls | '*Builder*' match: cls name ] color: Color green.	b nodes: RTObject withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleConditionalLayout| b |b := RTMondrian new.b shape rectangle	fillColor: Color white;	borderColor: Color lightGray;	withTextAbove: #name.b nodes: Collection withAllSubclasses forEach: [ :cls |	b nodes: cls rtmethods.	b edges connectToAll: #dependentMethods.	b layout 		ifElement: #isConnected then: RTTreeLayout new;		else: RTGridLayout new. ].b edges connectFrom: #superclass.b layout tree.b build.^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleForce	| b |	b := RTMondrian new.	b shape circle size: 30.	b nodes: (RTShape withAllSubclasses).	b shape arrowedLine color: Color black; withShorterDistanceAttachPoint.	b edges connectFrom: #superclass.	b layout force charge: -500; nbIterations: 50.	b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleHappy2016| values b ff |values := #(61 91 31 2 3 4 5 36 66 96 125 154 183 212 241 241 271 272 273 274 275 276 249 219 189 159 129 99 69 69 39 10 11 12 13 44 74 104 134 164 164 194 194 224 254 283 282 281 280 166 137 108 79 50 21 22 52 82 112 142 172 202 232 262 292 120 90 59 58 57 56 55 84 114 144 174 204 234 264 295 296 297 298 299 270 240 210 209 208 207 206 205 ).b := RTMondrian new.b shape ellipse size: 20;	fillColor: (Color white alpha: 0);	if: [ :value | values includes: value ]  fillColor: Color red.b nodes: (1 to: 300)."b shape line color: Color white."b edges 	moveBehind;	connectToAll: [ :value | 	(value \\ 30 = 0) 		ifTrue: [ Array with: (value + 30) ]		ifFalse: [ Array with: (value + 1) with: (value + 30) ]	 ].b layout grid lineItemsCount: 30.b build.ff := RTForceBasedLayout new.ff initialLayout: (RTGridLayout new lineItemsCount: 30).RTForceLayoutStepping new 	view: b view; 	layout: ff;	inView: b view.^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleHighlightableEdges| b edges |b := RTMondrian new.b shape circle size: 10; color: Color red.b nodes: (1 to: 20).edges := b edges moveBehind; connectFrom: [ :v | v // 2 ].edges @ RTHighlightable.edges @ (RTPopup text: [ :association | 'An edge from ', association key asString, ' to ', association value asString ]).b layout cluster.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleInnerAndPopup	| b |	b := RTMondrian new.	b shape rectangle withTextAbove.	b nodes: RTShape withAllSubclasses forEach: [:cls | 		b shape rectangle color: Color red; size: #numberOfLinesOfCode.		b nodes: cls rtmethods. b layout grid ].	b layout flow.	b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleLayoutPartition| b classes |classes := (TRPlatform current packageNamed: 'Roassal2') definedClasses.b := RTMondrian new.b shape circle size: 5.b nodes: classes.b edges connectFrom: #superclass.b layout		for: [ :c | (classes intersection: (Array with: c superclass), c subclasses) notEmpty ] use: RTTreeLayout new;		for: [ :c | (classes intersection: (Array with: c superclass), c subclasses) isEmpty ] use: RTGridLayout new;		horizontalLine.b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleLegendInPopup	| b |	b := RTMondrian new.	b interaction noInteractions.	b interaction popup group: [ :group :el |			| background elements cls legend1 legend2 | 		elements := RTGroup new.		background := (RTBox new color: (Color green alpha: 0.8)) element.				el model timesRepeat: [ 				cls := RTEllipse.				50 atRandom &gt; 25					ifTrue: [ cls := RTBox ].				elements add: (cls new size: 10; color: (Color purple alpha: 0.5)) element				].		RTGridLayout on: elements.						"Legend Good"		legend1 := RTGroup new.		legend1 add: (RTBox new size: 10; color: (Color purple alpha: 0.5)) element.		legend1 add: (RTLabel elementOn: '= Good').		RTHorizontalLineLayout on: legend1.				"Legend Bad"		legend2 := RTGroup new.		legend2 add: (RTEllipse new size: 10; color: (Color purple alpha: 0.5)) element.		legend2 add: (RTLabel elementOn: '= Bad').		RTHorizontalLineLayout on: legend2.				RTVerticalLineLayout new gapSize: 0; on: (Array with: legend1 with: legend2 with: elements). 					RTNest new centerOn: background elements: (Array with: legend1 with: legend2 with: elements).		group add: background.		group addAll: legend1.		group addAll: legend2.		group addAll: elements ].	b shape rectangle size: #yourself.	b nodes: (1 to:50).	b layout grid.		^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleNestingAndPopup	| b |	b := RTMondrian new.	b interaction noInteractions.	b interaction popup group: [ :group :el |		| background elements | 		elements := OrderedCollection new.		background := (RTBox new color: (Color green alpha: 0.5)) element.		el model timesRepeat: [ 				elements add: (RTBox new size: 10; color: (Color purple alpha: 0.5)) element.				].		RTGridLayout on: elements.		RTNest new centerOn: background elements: elements.		group add: background .		group addAll: elements ].	b shape rectangle size: #yourself.	b nodes: (1 to:50).	b layout grid.		b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleNestingAndTitle	| b |	b := RTMondrian new.	b shape rectangle withTextAbove.	b nodes: RTShape withAllSubclasses forEach: [:cls | 		b shape rectangle color: Color white; size: #numberOfLinesOfCode.		b nodes: cls rtmethods. b layout grid ].	b flowLayout.	^ b build</body><body package="Roassal2-Builder-Mondrian-Examples">exampleNormalization		| b |	b := RTMondrian new.b nodes: RTObject withAllSubclasses.b normalizer	objects: RTObject withAllSubclasses;	normalizeSize: #numberOfMethods min: 5 max: 30 using: [:value | (value + 1) ln ];	normalizeColor: #numberOfMethods using: (Array with: Color gray with: Color blue with: Color red ) using: [ :value | (value + 1) ln ].	b layout flow.b build.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleNumbersAndBeziers| b |b := RTMondrian new.b nodes: (1 to: 300).b edges connectFrom: [ :value | value // 2 ].b shape 	bezierLineFollowing: [ :value | value // 2 ];	color: Color blue trans.b edges 	notUseInLayout;	connectTo: [ :value | (value / 10) asInteger + (value \\ 10) ].b layout cluster.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">examplePartitioningAndNormalization| b classes |classes := RTLayout withAllSubclasses, RTBuilder withAllSubclasses, RTShape withAllSubclasses.b := RTMondrian new.b shape circle size: 5.b nodes: classes.b edges connectFrom: #superclass.b normalizer	objects: classes;	normalizeSize: #numberOfMethods min: 5 max: 30;	normalizeColor: #numberOfLinesOfCode using: (Array with: Color green with: Color red ) using: #sqrt.	b layout		for: [ :c | c includesBehavior: RTLayout ] use: RTForceBasedLayout new;		for: [ :c | c includesBehavior: RTBuilder ] use: RTForceBasedLayout new;		for: [ :c | c includesBehavior: RTShape ] use: RTForceBasedLayout new;		flow.b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleRadialTree	| b |	b := RTMondrian new.	b shape circle size: 10.	b nodes: (1 to: 100).	b edges connectFrom: [ :v | v // 2 ].	b layout radialTree.	b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleRandomGraph| nbOfNodes nbOfRandomEdges nodes edges b |nbOfNodes := 40.nbOfRandomEdges := 40.nodes := 1 to: nbOfNodes.edges := (1 to: nbOfRandomEdges) 				collect: [ :notUsed | nodes atRandom -&gt; nodes atRandom ]."In case you do not wish random data. You can set it manually. nodes := #(1 2 3 4 5).edges := { 1 -&gt; 2 . 1 -&gt; 4 . 4 -&gt; 3 }."b := RTMondrian new.b shape circle color: (Color black alpha: 0.5).b nodes: nodes.b shape line color: (Color gray alpha: 0.3).b edges	source: edges connectFrom: #key to: #value.b layout force.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSidesAndRadius"Thanks to Peter Uhnak for the script"|sidesCount radius points b els edges|sidesCount := 70.radius := 2000.points := (1 to: sidesCount) collect: [ :i |	i -&gt; (	(radius * ((Float twoPi * i) / sidesCount) cos)	@	(radius * ((Float twoPi * i) / sidesCount) sin)	)].b := RTMondrian new.(b shape ellipse)	color: Color transparent;	size: 0.els := (b nodes: points).(b edges shape line)	color: Color black.edges := b edges connectToAll: [ :src | points copyUpTo: src ].b build.els do: [ :el |	el translateTo: el model value.].b view @ RTZoomableView @ RTDraggableView.^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSimpleNesting	| b |	b := RTMondrian new.		b nodes: (1 to: 20) forEach: [ :each |		b nodes: (1 to: (each)).		b layout grid.	].	b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSimpleTree	| b |	b := RTMondrian new.	b shape rectangle size: 10.	b nodes: (1 to: 100).	b edges connectFrom: [ :v | v // 2 ] to: #yourself.	b layout tree.	b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSimpleTreeLayout	| b |	b := RTMondrian new.	b shape rectangle size: 10; borderColor: Color black.	b nodes: (1 to: 100).	b edges connectFrom: [ :v | v // 2 ].	b layout tree.	b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleStyledLabels| b |b := RTMondrian new.b shape styledLabel 	height: 80;	bold.b node: 'Hello'.b shape styledLabel 	height: 80;	italic.b node: 'World'.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSystemComplexity	| b |	b := RTMondrian new.	b shape rectangle 				withBorder;				width: [ :cls | cls numberOfVariables * 5];				height: #numberOfMethods;				linearFillColor: #numberOfLinesOfCode within: RTObject withAllSubclasses.	b nodes: RTObject withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b build.	^ b view</body><body package="Roassal2-Builder-Mondrian-Examples">exampleSystemComplexity02| b |b := RTMondrian new.b shape rectangle	width: #numberOfVariables;	height: #numberOfMethods.b nodes: RTObject withAllSubclasses.b edges 	connectToAll: #subclasses.b normalizer	normalizeColor: #numberOfLinesOfCode using: (Array with: Color green with: Color red) using: #ln.	b layout tree.b build.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleTreeAndBeziers| b |b := RTMondrian new.b shape circle	size: 8;	if: [ :c | '*Line*' match: c name ] fillColor: Color red.b nodes: TRShape withAllSubclasses, RTShape withAllSubclasses.b shape line.b edges	connectFrom: #superclass.b shape bezierLineFollowing: #superclass; color: (Color blue alpha: 0.2).b edges	objects: TRShape withAllSubclasses, RTShape withAllSubclasses;	notUseInLayout;	connectToAll: #dependentClasses.	b layout tree.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">examplenestedTree	| b |	b := RTMondrian new.		b nodes: (1 to: 100 by: 10) forEach: [ :each |		b nodes: (1 to: each).		b edges connectFrom: [ :v | v // 2 ].		b layout cluster.	].	b layout grid.	b build.	^ b view</body></methods><methods><class-id>Roassal2.RTMultipleDataTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testAddingInGrapher	| g elements |	g := RTGrapher new.	g add: d.		elements := d elements.	self assert: elements size equals: 8.		self assert: d selectElementsForAddingBarTitle size equals: d numberOfPoints.	self assert: d selectElementsForAddingBarTitle size equals: 3.	self assert: d selectElementsForAddingBarTitle first equals: d elements second.	self assert: d selectElementsForAddingBarTitle second equals: d elements fifth.	self assert: d selectElementsForAddingBarTitle third equals: d elements eighth.		g build.		"Make sure that all the elements created by the data are in the view"	self assert: (g view elements includesAllOf: d elements)</body><body package="Roassal2-Builder-Grapher-Tests">testBasic	| data |	data := RTVerticalMultipleData new.	self assert: data numberOfPoints equals: 0.	self assert: data numberOfMetrics equals: 0.</body><body package="Roassal2-Builder-Grapher-Tests">testBasic02	self assert: d numberOfPoints equals: 3.	self assert: d numberOfMetrics equals: 2.</body><body package="Roassal2-Builder-Grapher-Tests">testSelectElementsForAddingBarTitle01	| b |	b := RTGrapher new.	d := RTHorizontalMultipleData new.	d barShape color: Color blue.	d points: #( #('hello' 1 2 1) #('world' 2 4 2) #('bonjour' 3 5 4) #('Gutten Morgen' -1 4 -5)).	d addMetric: #second.	d addMetric: #third.	d addMetric: #fourth.	d barChartWithBarTitle: 'hello' rotation: -45 color: Color gray.	b add: d.	b build.		self assert: d elements size equals: 15.	self assert: d selectElementsForAddingBarTitle first equals: (d elements at: 2).</body></methods><methods><class-id>Roassal2.RTMultipleDataTest</class-id> <category>initialization</category><body package="Roassal2-Builder-Grapher-Tests">setUp	super setUp.	d := RTHorizontalMultipleData new.	d points: #( #(1 2) #(2 4) #(3 5)).	d addMetric: #first.	d addMetric: #second.</body></methods><methods><class-id>Roassal2.RTMultipleDataTest</class-id> <category>tests - rendering</category><body package="Roassal2-Builder-Grapher-Tests">testRendering01	| g elements |	g := RTGrapher new.	g add: d.	elements := d elements.	g build.	self assert: elements first position x asInteger equals: 33.	self assert: elements second position x asInteger equals: 66.		self assert: elements third position x asInteger equals: 100.	self assert: elements fourth position x asInteger equals: 133.</body></methods><methods><class-id>Roassal2.RTFocusElementTest</class-id> <category>tests</category><body package="Roassal2-Builder-CircularMap-Tests">testBasic	| v e |	v := RTView new.	e := (RTBox new size: 50) element.	e @ RTFocusElement.	v add: e.	e announce: TRMouseDoubleClick.</body><body package="Roassal2-Builder-CircularMap-Tests">testBasic02	| v e |	v := RTView new.	e := (RTBox new size: 50) element.	e @ RTFocusElement animated.	v add: e.	e announce: TRMouseDoubleClick.</body></methods><methods><class-id>Roassal2.RTLineSegmentTest</class-id> <category>running</category><body package="Roassal2-AttachPoint-Tests">setUp	super setUp.	lineX := RTLineSegment from: 10 @ -10 to: 110 @ -10.	lineY := RTLineSegment from: 10 @ -10 to: 10 @ 90.	lineDiagonal := RTLineSegment from: 10 @ -10 to: -90 @ -110.	lineX0 := RTLineSegment from: 0 @ 0 to: 100 @ 0</body></methods><methods><class-id>Roassal2.RTLineSegmentTest</class-id> <category>tests</category><body package="Roassal2-AttachPoint-Tests">testAngles	self assert: lineX angleInDeg = 0.	self assert: lineY angleInDeg = 90.	self assert: lineDiagonal angleInDeg = 225.	self assert: lineX angleInRad = 0.	self assert: (lineY angleInRad closeTo: 1.5707963268)</body><body package="Roassal2-AttachPoint-Tests">testEquals	| anotherX |	anotherX := RTLineSegment from: lineX from to: lineX to.	self assert: anotherX equals: lineX.	self assert: anotherX = lineX.	self assert: anotherX hash equals: lineX hash.	self deny: lineX = lineY</body><body package="Roassal2-AttachPoint-Tests">testIntersectHorizontal	"assumes intersection: method is tested elsewhere"	self assert: (lineX intersectHorizontal: lineY) = (lineX intersection: lineY).	self assert: (lineX0 intersectHorizontal: lineY) = (lineX0 intersection: lineY).	self assert: (lineX intersectHorizontal: lineDiagonal) = (lineX intersection: lineDiagonal).	self assert: (lineX0 intersectHorizontal: lineDiagonal) = (lineX0 intersection: lineDiagonal).	self assert: (lineX0 intersectHorizontal: lineX) = (lineX0 intersection: lineX).	self assert: (lineX intersectHorizontal: lineX) = (lineX intersection: lineX)</body><body package="Roassal2-AttachPoint-Tests">testIntersectLines	self assert: (lineX intersectLines: lineY) = (10 @ -10).	self assert: (lineX intersectLines: lineDiagonal) = (10 @ -10).	self assert: (lineY intersectLines: lineDiagonal) = (10 @ -10).	self assert: (lineX intersectLines: lineX0) isNil.	self assert: (lineY intersectLines: lineX0) = (10 @ 0).	self assert: (lineDiagonal intersectLines: lineX0) = (20 @ 0)</body><body package="Roassal2-AttachPoint-Tests">testIntersectVertical	self assert: (lineY intersectVertical: lineX0) = (lineY intersection: lineX0).	self assert: (lineY intersectVertical: lineX) = (lineY intersection: lineX).	self assert: (lineY intersectVertical: lineDiagonal) = (lineY intersection: lineDiagonal).	self assert: (lineY intersectVertical: lineY) = (lineY intersection: lineY)</body><body package="Roassal2-AttachPoint-Tests">testIntersection	self assert: (lineX intersection: lineY) = (10 @ -10).	self assert: (lineX intersection: lineDiagonal) = (10 @ -10).	self assert: (lineY intersection: lineDiagonal) = (10 @ -10).	self assert: (lineX intersection: lineX0) isNil.	self assert: (lineY intersection: lineX0) = (10 @ 0).	self assert: (lineDiagonal intersection: lineX0) isNil</body><body package="Roassal2-AttachPoint-Tests">testLength	self assert: lineX length = 100.	self assert: lineY length = 100.	self assert: (lineDiagonal length closeTo: 141.4213562)</body><body package="Roassal2-AttachPoint-Tests">testNormalForm	self assert: lineX a = 0.	self assert: lineY a = 100.	self assert: lineDiagonal a = -100.	self assert: lineX b = -100.	self assert: lineY b = 0.	self assert: lineDiagonal b = 100.	self assert: lineX c = -1000.	self assert: lineY c = -1000.	self assert: lineDiagonal c = 2000</body><body package="Roassal2-AttachPoint-Tests">testPointForBalance	self assert: (lineX pointForBalance: 0) equals: lineX from.	self assert: (lineX pointForBalance: 0.5) equals: (lineX from + lineX to) / 2.	self assert: (lineX pointForBalance: 1) equals: lineX to.	self assert: (lineX pointForBalance: 10) equals: lineX from + (10 @ 0).	self assert: (lineX pointForBalance: 90) equals: lineX to - (10 @ 0).	self assert: (lineX pointForBalance: -10) equals: lineX to - (10 @ 0)</body><body package="Roassal2-AttachPoint-Tests">testSideOfPoint	self assert: (lineX sideOfPoint: 20 @ -20) equals: 1.	self assert: (lineX sideOfPoint: 20 @ -10) equals: 0.	self assert: (lineX sideOfPoint: 20 @ 0) equals: -1.	self assert: (lineY sideOfPoint: 0 @ 0) equals: -1.	self assert: (lineY sideOfPoint: 10 @ 0) equals: 0.	self assert: (lineY sideOfPoint: 20 @ 0) equals: 1.	self assert: (lineDiagonal sideOfPoint: -40 @ -30) equals: 1.	self assert: (lineDiagonal sideOfPoint: 10 @ -10) equals: 0.	self assert: (lineDiagonal sideOfPoint: -30 @ -70) equals: -1</body><body package="Roassal2-AttachPoint-Tests">testVector	self assert: lineX vector = (100 @ 0).	self assert: lineY vector = (0 @ 100).	self assert: lineDiagonal vector = (-100 @ -100)</body></methods><methods><class-id>Roassal2.RTBitmapExamples</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'Bitmaps'</body></methods><methods><class-id>Roassal2.RTVerticalValuesDecoratorTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testBasic	| b ds deco labels |	b := RTGrapher new.	ds := RTData new.	ds points: #(2 3 4 5 6).	b add: ds.	deco := RTVerticalValuesDecorator new.	deco addAll: #(3 5).	b addDecorator: deco.	b axisX noTick; noLabel.	b axisY noTick; noLabel.	b build.		labels := b view canvas shapes select: [ :s | s class == TRLabelShape ].	self assert: labels size equals: 2.</body><body package="Roassal2-Builder-Grapher-Tests">testBasic02	| b ds deco labels |	b := RTGrapher new.	ds := RTData new.	ds points: #(2 3 4 5 6).	b add: ds.	deco := RTVerticalAllValuesDecorator new.	b addDecorator: deco.	b axisX noTick; noLabel.	b axisY noTick; noLabel.	b build.		labels := b view canvas shapes select: [ :s | s class == TRLabelShape ].	self assert: labels size equals: 5.</body><body package="Roassal2-Builder-Grapher-Tests">testBasic03	| b ds deco labels |	b := RTGrapher new.	ds := RTData new.	"We repeat the points"	ds points: #(2 3 4 5 6 2).	b add: ds.	deco := RTVerticalAllValuesDecorator new.	b addDecorator: deco.	b axisX noTick; noLabel.	b axisY noTick; noLabel.	b build.		labels := b view canvas shapes select: [ :s | s class == TRLabelShape ].	self assert: labels size equals: 5.</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>nested elements</category><body package="Roassal2-Core-Tests">testNestedElements	self assert: RTElement new nestedElements equals: #()</body><body package="Roassal2-Core-Tests">testNestedElements2	| nested e v |	v := RTView new.	e := RTBox element.	v add: e.	RTNest new		for: (Array with: e) add: [ :group :model |			nested := RTBox elementsOn: (1 to: 5).			group addAll: nested		].		self assert: e nestedElements equals: nested</body><body package="Roassal2-Core-Tests">testNestedElements3	| added v classShape es |	added := RTGroup new.	v := RTView new.	v @ RTDraggableView.	classShape := RTCompositeShape new. 	classShape add: (RTLabel new).	classShape add: (RTBox new color: Color lightGreen).	classShape add: (RTBox new color: Color lightRed).	classShape vertical.	es := classShape elementsOn: (Array with: RTShape).	v addAll: es.	RTNest new		layout: RTGridLayout new;		for: es inShape: #second add: [ :group :model |			group addAll: (RTBox elementsOn: model instVarNames).			added addAll: group		].	RTNest new		layout: RTGridLayout new;		for: es inShape: #third add: [ :group :model |			group addAll: (RTBox elementsOn: model rtmethods).			added addAll: group		].		self assert: es first nestedElements equals: added</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>creating</category><body package="Roassal2-Core-Tests">testCreatingMany	| els |	els := RTBox elementsOn: (1 to: 20).	self assert: els size = 20.	self assert: (els collect: #model) asArray = (1 to: 20) asArray.</body><body package="Roassal2-Core-Tests">testUpdateEdges	| e1 e2 l v |	e1 := RTBox elementOn: 1.	e2 := RTBox elementOn: 1.	l := RTLine edgeFrom: e1 to: e2.	v := RTView new.	v add: e1; add: e2; add: l.		e2 translateTo: 50 @ 50.		self assert: l trachelShape from equals: 0 @ 0.	self assert: l trachelShape to equals: 50 @ 50.	e1 updateEdgesOFF.	e1 translateTo: 10 @ 10.	self assert: l trachelShape from equals: 0 @ 0.	self assert: l trachelShape to equals: 50 @ 50.</body><body package="Roassal2-Core-Tests">testUpdateEdgesOnAndOff	| e |	e := RTElement new.	self assert: e shouldUpdateEdges.	e updateEdgesOFF.	self deny: e shouldUpdateEdges.	e updateEdgesON.	self assert: e shouldUpdateEdges.</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>events</category><body package="Roassal2-Core-Tests">testAddingInteraction	| e |	e := RTElement new.	e @ RTDraggable.	self assert: e announcer numberOfSubscriptions equals: 1.	e @ RTPopup.	self assert: e announcer numberOfSubscriptions equals: 5.</body><body package="Roassal2-Core-Tests">testBasicEvent	self assert: RTElement new announcer numberOfSubscriptions equals: 0.</body><body package="Roassal2-Core-Tests">testRemovingEvent	| e |	e := RTElement new.	e @ RTDraggable.	e @ RTPopup.	e removeInteractionIfPresent: RTPopup.	self assert: e announcer numberOfSubscriptions equals: 1.</body><body package="Roassal2-Core-Tests">testSharedAnnouncer	| e v a |	e := RTBox element.	self assert: e announcer ~~ e trachelShape announcer.	a := e announcer.		v := RTView new.	v add: e.	self assert: e announcer == e trachelShape announcer.	self assert: a == e trachelShape announcer</body><body package="Roassal2-Core-Tests">testSharedAnnouncerAndComposedShapes	| e s1 s2 v |	s1 := RTBox new.	s2 := RTEllipse new.		e := (s1 + s2) element.	v := RTView new.	v add: e.	self assert: e announcer == e trachelShape shapes first announcer.	self assert: e announcer == e trachelShape shapes second announcer.</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testAddingABoxAndEllipse	| view el1 el2 |	view := RTView new.	el1 := (RTBox new extent: 40 @ 20; color: Color purple) element.	el1 translateTo: 50 @ 40.	el2 := (RTEllipse new extent: 40 @ 20; color: Color blue) element.	el2 translateTo: 150 @ 40.	view add: el1; add: el2.		self assert: el1 position = (50 @ 40).	self assert: el1 encompassingRectangle = ((30@30) corner: (70@50))</body><body package="Roassal2-Core-Tests">testConnectedEdges01	| e1 e2 l |	e1 := RTBox element.	e2 := RTBox element.	self deny: (e1 isConnectedTo: e2).	self deny: (e2 isConnectedTo: e1).		l := RTLine edgeFrom: e1 to: e2.	self assert: (e1 isConnectedTo: e2).	self assert: (e2 isConnectedTo: e1).	self assert: (e1 isDirectlyConnectedTo: e2).	self deny: (e2 isDirectlyConnectedTo: e1).</body><body package="Roassal2-Core-Tests">testDefault	| el |	el := RTElement new.	self assert: el position = (0 @ 0).	"self assert: el width = 0.	self assert: el height = 0."</body><body package="Roassal2-Core-Tests">testExtentAndWidthHeight	| shape |	shape := RTBox new extent: 40 @ 20.	self assert: (shape widthFor: RTElement new) = 40.	self assert: (shape heightFor: RTElement new) = 20.</body><body package="Roassal2-Core-Tests">testModel	self assert: (RTElement on: 10) model = 10</body><body package="Roassal2-Core-Tests">testRemoveWithEdges	| view e1 e2 l1 l2 |	view := RTView new.	e1 := RTBox element.	e2 := RTBox element.	l1 := RTLine edgeFrom: e1 to: e2.	l2 := RTLine edgeFrom: e2 to: e1.	view add: l1; add: l2; add: e1; add: e2.		e1 remove.	e2 remove.</body><body package="Roassal2-Core-Tests">testRendering	| view el |	view := RTView new.	el := RTBox element.	view add: el.		self assert: el trachelShape notNil.	self assert: el trachelShape class == TRBoxShape</body><body package="Roassal2-Core-Tests">testRenderingAndEvent	| view el trachelShape |	view := RTView new.	el := RTBox element.	view add: el.	view setUpCanvas.	trachelShape := el trachelShape.	self assert: el announcer == trachelShape announcer</body><body package="Roassal2-Core-Tests">testResizingAndDragging	| view box |	view := RTView new.	box := RTBox element.	view add: box.	view setUpCanvas.		self assert: box extent = (5 @ 5).	box trachelShape extent: 10 @ 10.	self assert: box extent = (10 @ 10).	box translateTo: 5 @ 5.	self assert: box extent = (10 @ 10).</body><body package="Roassal2-Core-Tests">testSameNullShape	self assert: RTElement new shape == RTElement new shape.	self assert: RTNoShape element shape == RTElement new shape.</body><body package="Roassal2-Core-Tests">testSize	| box el |	box := RTBox new width: 10; height: 8.	el := box element.		self assert: el position = (0 @ 0).	self assert: el height = 8.	self assert: el width = 10</body><body package="Roassal2-Core-Tests">testSizeAndModel	| box el |	box := RTBox new width: [ :e | e + 2 ]; height: [ :e | e + 3 ].	el := box elementOn: 5.		self assert: el position = (0 @ 0).	self assert: el height = 8.	self assert: el width = 7</body><body package="Roassal2-Core-Tests">testTrachelShape2	self assert: RTElement new trachelShape notNil.</body><body package="Roassal2-Core-Tests">testTranslationBy	| el |	el := RTBox element.	el translateBy: 15 @ 10.	self assert: el position = (15 @ 10).	el translateBy: 5 @ 10.	self assert: el position = (20 @ 20).</body><body package="Roassal2-Core-Tests">testTranslationTo	| el |	el := RTBox element.	el translateTo: 15 @ 10.	self assert: el position = (15 @ 10)</body><body package="Roassal2-Core-Tests">testWidthAndHeight	| view outter inner |	view := RTView new.	outter := RTBox element.	inner := (RTBox new color: Color green) element.	RTNest new on: outter nest: (RTGroup with: inner).	self assert: outter width = 15.	self assert: outter height = 15.	self assert: outter encompassingRectangle extent = (15 @ 15)</body><body package="Roassal2-Core-Tests">testWidthAndHeight2	| view outter inners |	view := RTView new.	outter := RTBox element.	inners := (RTBox new color: Color green) elementsOn: (1 to: 3).		RTHorizontalLineLayout on: inners.	RTNest new on: outter nest: inners.	self assert: outter width = 45.	self assert: outter height = 15.	self assert: outter encompassingRectangle extent = (45 @ 15)</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>attributes</category><body package="Roassal2-Core-Tests">testAttributes	| el |	el := RTElement new.	self deny: el hasAttributes.	self assert: (el hasNotAttribute: #oldColor).	el attributes at: #oldColor put: Color black.	self assert: el hasAttributes.	self deny: (el hasNotAttribute: #oldColor).</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>interaction</category><body package="Roassal2-Core-Tests">testDraggingCircle	| view shape el |	view := RTView new.	shape := RTEllipse new size: 40.	el := shape element.	view add: el.	view setUpCanvas.		self assert: el position = (0 @ 0).	el translateBy: 100 @ 50.	self assert: el position = (100 @ 50).		self assert: el trachelShape encompassingRectangle = ((80@30) corner: (120@70))</body><body package="Roassal2-Core-Tests">testGrowing	| view el |	view := RTView new.	el := RTBox new size: 20; color: (Color purple alpha: 0.2); element.	el @ RTDraggable.	el translateTo: 100 @ 130.	view add: el.</body><body package="Roassal2-Core-Tests">testHighlighting	| el view |	el := RTBox element.	view := RTView new.	view add: el.	view setUpCanvas.		self assert: el trachelShape color = RTBox new defaultColor.		el trachelShape color: Color red.	self assert: el trachelShape color = Color red.</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>edges</category><body package="Roassal2-Core-Tests">testIsConnected	self deny: RTElement new isConnected.	self assert: RTElement new isNotConnected.</body><body package="Roassal2-Core-Tests">testIsConnected02	| e1 e2 l |	e1 := RTBox element.	e2 := RTBox element.		l := RTLine edgeFrom: e1 to: e2.		self assert: e1 isConnected.	self assert: e2 isConnected.	self deny: e1 isNotConnected.	self deny: e2 isNotConnected.</body><body package="Roassal2-Core-Tests">testIsConnected03	| e1 l |	e1 := RTBox element.	l := RTLine edgeFrom: e1 to: e1.		self assert: e1 isConnected.	self deny: e1 isNotConnected.</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>popup</category><body package="Roassal2-Core-Tests">testPopupAndGroup	| v el p es |	v := RTView new.	el := (RTBox new size: 20) element.	p := [ :g :e |  		es := (RTBox new size: 15; color: (Color red alpha: 0.5)) elementsOn: (1 to: 10).		RTGridLayout on: es.		g addAll: es ].	el @ (RTPopup new group: p).	v add: el.		self assert: v numberOfElements equals: 1.	el announce: (TRMouseEnter new position: 0 @ 0; shape: el trachelShape).	self assert: v numberOfElements equals: 11.	self assert: v canvas fixedShapes first position asIntegerPoint = (22@22)</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>position</category><body package="Roassal2-Core-Tests">testPosition	| el |	el := RTBox element.	el translateTo: 1.1234 @ 1.1234.	self assert: el position = (1.1234 @ 1.1234).</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>view</category><body package="Roassal2-Core-Tests">testAddingAndRemoving	| view e tr |	view := RTView new.	tr := view canvas.	e := RTBox element.		self assert: e view isNil.	self assert: tr numberOfShapes = 0.	view add: e.	self assert: e view == view.	self assert: tr numberOfShapes = 1.		e remove.	self assert: view numberOfElements = 0.	self assert: tr numberOfShapes = 0.	self assert: e view isNil.</body><body package="Roassal2-Core-Tests">testTrachelShape	| e |	e := RTBox element.	self assert: e trachelShape ~~ e.	self assert: e trachelShape class equals: TRBoxShape.		self assert: e trachelShape trachelShape equals: e trachelShape.	self assert: e trachelShape trachelShape trachelShape equals: e trachelShape.</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>removing</category><body package="Roassal2-Core-Tests">testRemovingWithNested	| b |	b := RTMondrian new.	b node: 1 forIt: [ b node: 2 ].	b build.	self assert: b view numberOfElements equals: 2.	(b view elementFromModel: 1) removeWithNestedElements.	self assert: b view numberOfElements equals: 0.</body></methods><methods><class-id>Roassal2.RTElementTest</class-id> <category>composite shape</category><body package="Roassal2-Core-Tests">testCompositeShape	| s e |	s := RTCompositeShape new.	s add: RTBox new.	e := s element.		e update</body></methods><methods><class-id>Roassal2.RTMetricNormalizerTest</class-id> <category>test x</category><body package="Roassal2-ColorNormalizer-Tests">testBasicNegativeRangeX		| es |	es := RTEllipse new elementsOn: (Array with: 0 with: 25 with: 50).	RTMetricNormalizer new			elements: es;			normalizeX: #yourself min: -200 max: 200.	self assert: (es collect: #position) asArray equals: (Array with: -200 @ 0 with: 0 @ 0 with: 200 @ 0)</body><body package="Roassal2-ColorNormalizer-Tests">testBasicPositiveRangeX		| es |	es := RTEllipse new elementsOn: (Array with: 0 with: 25 with: 50).	RTMetricNormalizer new			elements: es;			normalizeX: #yourself min: 0 max: 200.	self assert: (es collect: #position) asArray equals: (Array with: 0 @ 0 with: 100 @ 0 with: 200 @ 0)</body><body package="Roassal2-ColorNormalizer-Tests">testBasicPositiveRangeX2		| es |	es := RTEllipse new elementsOn: (Array with: 25 with: 50).	RTMetricNormalizer new			elements: es;			normalizeX: #yourself min: 0 max: 200 minValue: 0 maxValue: 50.	self assert: (es collect: #position) asArray equals: (Array with: 100 @ 0 with: 200 @ 0)</body><body package="Roassal2-ColorNormalizer-Tests">testBasicPositiveRangeX3		| es |	es := RTEllipse new elementsOn: (Array with: 25 with: 50).	RTMetricNormalizer new			elements: es;			normalizeX: #yourself min: 0 max: 200 minValue: 0.	self assert: (es collect: #position) asArray equals: (Array with: 100 @ 0 with: 200 @ 0)</body><body package="Roassal2-ColorNormalizer-Tests">testNormalizeXBugTracking	| es |	es := RTBox elementsOn: (0.0 to: 1.0 by: 0.005).	self assert: es size equals: (0.0 to: 1.0 by: 0.005) size.	RTMetricNormalizer new		elements: es;		normalizeElementX: [ :anElement | #yourself rtValue: anElement model ]			min: 0			max: 300			minValue: 0			maxValue: 1.2.	RTMetricNormalizer new		elements: es;		normalizeY: [ :model | #yourself rtValue: model ]			min: 0			max: 300			minValue: 0			maxValue: 1.2.	"	es collect: #position	"	self assert: (es allSatisfy: [ :e | e position x = e position y ])</body></methods><methods><class-id>Roassal2.RTMetricNormalizerTest</class-id> <category>test colors</category><body package="Roassal2-ColorNormalizer-Tests">testColorFading	| v1 objects es1 v2 es2 |	v1 := RTView new.	objects := (0 to: 1).	es1 := RTBox new elementsOn: objects.	v1 addAll: es1.	RTHorizontalLineLayout on: es1.	RTMetricNormalizer new		elements: es1;		normalizeColor: #yourself.	v2 := RTView new.	objects := (10 to: 11).	es2 := RTBox new elementsOn: objects.	v2 addAll: es2.	RTHorizontalLineLayout new gapSize: 0; on: es2.	RTMetricNormalizer new		elements: es2;		normalizeColor: #yourself.	es1 with: es2 do: [ :e1 :e2 | self assert: e1 trachelShape color equals: e2 trachelShape color ].	self assert: es1 first trachelShape color equals: Color gray.	self assert: es1 second trachelShape color equals: Color red.</body><body package="Roassal2-ColorNormalizer-Tests">testColors	| v objects es n |	v := RTView new.	objects := (1 to: 5).	es := RTBox new elementsOn: objects.	v addAll: es.	self assert: (es collect: [ :e | e trachelShape color ]) asSet size equals: 1.	n := RTMetricNormalizer new.	n view: v.	n objects: objects.	n distinctColor.	self assert: (es collect: [ :e | e trachelShape color ]) asSet size equals: 5.</body><body package="Roassal2-ColorNormalizer-Tests">testColors02	| v objects es n |	v := RTView new.	objects := (1 to: 5).	es := RTBox new elementsOn: objects.	v addAll: es.	self assert: (es collect: [ :e | e trachelShape color ]) asSet size equals: 1.	n := RTMetricNormalizer new.	n view: v.	n objects: objects.	n distinctColorUsing: #odd.	self assert: (es collect: [ :e | e trachelShape color ]) asSet size equals: 2.</body><body package="Roassal2-ColorNormalizer-Tests">testDistinctColor	| v data es n |	v := RTView new.	data := #((1) (2) (1 2)).	data do: [ :d |		v addAll: (RTEllipse elementsOn: d) @ RTPopup.	].	"Checking RTView&gt;&gt;elementsFromModels:"	self assert: (v elementsFromModels: #(1 2)) size equals: 4.	RTGridLayout on: v elements.	n := RTMetricNormalizer new		view: v;		objects: #(1 2);		distinctColor. 	self assert: v numberOfElements equals: 4.	"Checking the normalizer"	self assert: n elements size equals: 4.	"For elements 1"	es := v elementsFromModel: 1.	self assert: es size equals: 2.	self assert: (es collect: [ :e | e trachelShape color ]) asSet size equals: 1.		"For elements 2"	es := v elementsFromModel: 2.	self assert: es size equals: 2.	self assert: (es collect: [ :e | e trachelShape color ]) asSet size equals: 1.	"Elements 1 and 2 have different color"	self assert: (v elementFromModel: 1) trachelShape color ~= (v elementFromModel: 2) trachelShape color</body></methods><methods><class-id>Roassal2.RTMetricNormalizerTest</class-id> <category>test y</category><body package="Roassal2-ColorNormalizer-Tests">testBasicNegativeRange		| es |	es := RTEllipse new elementsOn: (Array with: 0 @ 0 with: 50 @ 25 with: 100 @ 50).	RTMetricNormalizer new			elements: es;			normalizeY: #y min: -200 max: 200.	self assert: (es collect: #position) asArray equals: (Array with: 0 @ -200 with: 0 @ 0 with: 0 @ 200)</body><body package="Roassal2-ColorNormalizer-Tests">testBasicNegativeRange2		| es |	es := RTEllipse new elementsOn: (Array with: 0 @ 0 with: 50 @ 25 with: 100 @ 50).	RTMetricNormalizer new			elements: es;			normalizeY: #y min: -200 max: -100.	self assert: (es collect: #position) asArray equals: (Array with: 0 @ -200 with: 0 @ -150 with: 0 @ -100)</body><body package="Roassal2-ColorNormalizer-Tests">testBasicNegativeRange3		| es |	es := RTEllipse new elementsOn: (Array with: 0 @ 0 with: 50 @ 25 with: 100 @ 50).	RTMetricNormalizer new			elements: es;			normalizeY: #y min: 0 max: -200.	self assert: (es collect: #position) asArray equals: (Array with: 0 @ 0 with: 0 @ -100 with: 0 @ -200)</body><body package="Roassal2-ColorNormalizer-Tests">testBasicNegativeRange4		| es |	es := RTEllipse new elementsOn: (Array with: 0 @ 0 with: 50 @ 25 with: 100 @ 50).	RTMetricNormalizer new			elements: es;			normalizeY: #y min: -200 max: 0.	self assert: (es collect: #position) asArray equals: (Array with: 0 @ -200 with: 0 @ -100 with: 0 @ 0)</body><body package="Roassal2-ColorNormalizer-Tests">testBasicPositiveRange		| es |	es := RTEllipse new elementsOn: (Array with: 0 @ 0 with: 50 @ 25 with: 100 @ 50).	RTMetricNormalizer new			elements: es;			normalizeY: #y min: 0 max: 200.	self assert: (es collect: #position) asArray equals: (Array with: 0 @ 0 with: 0 @ 100 with: 0 @ 200)</body></methods><methods><class-id>Roassal2.RTMetricNormalizerTest</class-id> <category>test size</category><body package="Roassal2-ColorNormalizer-Tests">testBasicPositiveRangeSize		| es |	es := RTEllipse new elementsOn: (Array with: 0 with: 25 with: 50).	RTMetricNormalizer new			elements: es;			normalizeSize: #yourself min: 0 max: 200.	self assert: (es collect: [ :e | e extent x ]) asArray equals: (Array with: 0 with: 100 with: 200)</body><body package="Roassal2-ColorNormalizer-Tests">testBasicPositiveRangeWidth		| es |	es := RTEllipse new elementsOn: (Array with: 25 with: 50).	RTMetricNormalizer new			elements: es;			normalizeWidth: #yourself min: 0 max: 200.	self assert: (es collect: [ :e | e extent x ]) asArray equals: (Array with: 0 with: 200)</body><body package="Roassal2-ColorNormalizer-Tests">testBasicPositiveRangeWidth2		| es |	es := RTEllipse new elementsOn: (Array with: 25 with: 50).	RTMetricNormalizer new			elements: es;			normalizeWidth: #yourself min: 0 max: 200 minValue: 0.	self assert: (es collect: [ :e | e extent x ]) asArray equals: (Array with: 100 with: 200)</body></methods><methods><class-id>Roassal2.RTExploraBuilderExample</class-id> <category>sources</category><body package="Roassal2-Examples-Extentions">exampleCircularList	| builder lst |	lst := LinkedList new.	lst		add: (LinkValue value: 1);		add: (LinkValue value: 2);		add: (LinkValue value: 3);		add: (LinkValue value: 4).	lst last nextLink: lst firstLink.	builder := RTExploraBuilder new.	builder		layout: RTCircleLayout new;		withPopup;		node: lst firstLink;		onClickExplore: [:link | Array with: link nextLink].	builder build.	^ builder</body><body package="Roassal2-Builder-Explora-Examples">exampleClassHierarchy| builder |	builder := RTExploraBuilder new.	builder shape circle		size: 20;		color: (Color blue alpha: 0.5);		if: [ :cls | cls subclasses isEmpty ] fillColor: (Color red alpha: 0.5);		if: [ :cls | cls == ProtoObject ] fillColor: (Color green alpha: 0.5).	builder		onRightClickExplore: [ :cls | Array with: cls superclass] edges: #To;		onLeftClickExplore: [ :cls | cls subclasses ] edges: #From;		withPopup;		dragChildren;		node: String.	builder build.	^ builder</body><body package="Roassal2-Builder-Explora-Examples">exampleClassHierarchy2| builder |	builder := RTExploraBuilder new.	builder shape circle		size: [ :cls | cls numberOfMethods / 3 + 10];		color: (Color blue alpha: 0.5);		if: [ :cls | cls subclasses isEmpty ] fillColor: (Color red alpha: 0.5);		if: [ :cls | '*Array*' match: cls name] fillColor: (Color green alpha: 0.5).	builder		layout: [RTClusterLayout new horizontalGap: 80];		onClickExplore: [ :cls | cls subclasses ];		withPopup;		dragChildren;		node: Collection.	builder build.	^ builder</body><body package="Roassal2-Builder-Explora-Examples">exampleClassHierarchy3| builder |	builder := RTExploraBuilder new.	builder shape rectangle		width: [ :cls | cls numberOfVariables * 10 max: 5 ];		height: [ :cls | cls numberOfMethods / 2 max: 5];		color: (Color blue alpha: 0.5);		if: [ :cls | cls subclasses notEmpty ] borderColor: (Color red alpha: 0.5).			builder		layout: [ RTClusterLayout new horizontalGap: 80 ];		onClickExplore: [ :cls | cls subclasses ];		withPopup;		dragChildren;		node: Collection.	builder view canvas color: Color white.	builder build.	^ builder</body><body package="Roassal2-Builder-Explora-Examples">exampleNumbers| builder |	builder := RTExploraBuilder new.	builder shape circle size: 30;		if: [:n | (n &lt; 100)] fillColor: (Color green alpha: 0.5);		if: [:n | (n &gt; 100) and: (n &lt; 500)] fillColor: (Color yellow alpha: 0.5);		if: [:n | (n &gt;= 500)] fillColor: (Color red alpha: 0.5);		withText.	builder		layout: [RTClusterLayout new verticalGap: 40];		withPopup;		dragChildren;		node: 1;		onClickExplore: [ :aNumber | aNumber*5 to: (aNumber*5 + 5) ].	builder build.	^ builder</body></methods><methods><class-id>Roassal2.RTExploraBuilderExample</class-id> <category>basic</category><body package="Roassal2-Builder-Explora-Examples">exploreCircularList	"	self new exploreCircularList	"	| builder lst |		" A circular linked list "	lst := LinkedList new.	lst add: 1; add: 2; add: 3; add: 4.	lst lastLink nextLink: (lst firstLink).		builder := RTExploraBuilder new.	builder layout: RTCircleLayout new;		withPopup;		node: lst firstLink;		onClickExplore: [ :link | Array with: link nextLink ].		^ builder</body><body package="Roassal2-Builder-Explora-Examples">exploreClassHierarchy	"	self new exploreClassHierarchy	"	| builder |	builder := RTExploraBuilder new.	builder shape circle		size: 20;		color: (Color blue alpha: 0.5);		if: [ :cls | cls subclasses isEmpty ] fillColor: (Color red alpha: 0.5);		if: [ :cls | cls == ProtoObject ] fillColor: (Color green alpha: 0.5).	builder		onRightClickExplore: [ :cls | Array with: cls superclass] edges: #To;		onLeftClickExplore: [ :cls | cls subclasses ] edges: #From;		withPopup;		dragChildren;		node: String.	^ builder</body><body package="Roassal2-Builder-Explora-Examples">exploreClassHierarchy2	"	self new exploreClassHierarchy2	"	| builder |	builder := RTExploraBuilder new.	builder shape circle		size: [ :cls | cls numberOfMethods / 3 + 10];		color: (Color blue alpha: 0.5);		if: [ :cls | cls subclasses isEmpty ] fillColor: (Color red alpha: 0.5);		if: [ :cls | '*Array*' match: cls name] fillColor: (Color green alpha: 0.5).	builder		layout: [RTClusterLayout new horizontalGap: 80];		onClickExplore: [ :cls | cls subclasses ];		withPopup;		dragChildren;		node: Collection.	^ builder</body><body package="Roassal2-Builder-Explora-Examples">exploreClassHierarchy3	"	self new exploreClassHierarchy3	"	| builder |	builder := RTExploraBuilder new.	builder shape rectangle		width: [ :cls | cls numberOfVariables * 10 max: 5 ];		height: [ :cls | cls numberOfMethods / 2 max: 5];		color: (Color blue alpha: 0.5);		if: [ :cls | cls subclasses notEmpty ] borderColor: (Color red alpha: 0.5).			builder		layout: [ RTClusterLayout new horizontalGap: 80 ];		onClickExplore: [ :cls | cls subclasses ];		withPopup;		dragChildren;		node: Collection.	builder view canvas color: Color white.	^ builder</body><body package="Roassal2-Builder-Explora-Examples">exploreNumbers	"	self new exploreNumbers	"	| builder |	builder := RTExploraBuilder new.	builder shape circle size: 30;		if: [:n | (n &lt; 100)] fillColor: (Color green alpha: 0.5);		if: [:n | (n &gt; 100) and: (n &lt; 500)] fillColor: (Color yellow alpha: 0.5);		if: [:n | (n &gt;= 500)] fillColor: (Color red alpha: 0.5);		withText.	builder		layout: [RTClusterLayout new verticalGap: 40];		withPopup;		dragChildren;		node: 1;		onClickExplore: [ :aNumber | aNumber*5 to: (aNumber*5 + 5) ].	^ builder</body><body package="Roassal2-Builder-Explora-Examples">label	^ 'Explora'</body></methods><methods><class-id>Roassal2.RTExploraBuilderExample</class-id> <category>icons</category><body package="Roassal2-Builder-Explora-Examples">exampleCircularListIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABKElEQVR4XuXUQQ2AMBBFQZxXQD1wpaoq5Rd6ICggJcxL1sBOdrcx/L7U5q/AB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/H4FkqvjSGpNek98kMW1lpTyjA+yuHkZPsiHmm/qxth3H8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBC/NzsB4oWgQHkqZ3wAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Explora-Examples">exampleClassHierarchy2Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAB4ElEQVR4XuXZP0tCYRTAYb95gzhHIOggNjans/hntE2HIsgP4SKiHuMt7hIF1n0lX58fnC/gg17PuY3j0e+SavgfgQ/i54P4IH4+iA/i54P4IH4+iA/i54P4+SA+iJ8P4oP4+SA+iJ8P4oP4+SB+PogP4ueD+CB+PogP4ueD+CB+PoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggZ+1wiFitIp6fI9brCB/kH9puIx4fI25uvp+7u4jX1zJxigOZz3+G+Dq9Xnzkg5yph4fTMappNiP2+3JQigF5evo9RjW3tz5I1na7v2NUMx6XgVIEyHBYHySND5KpHBhpFovLR2mUsGfkAhmNfJDapaUvF8j9vQ9Su5eXfCDdrg9Su3QOyQWS/hz4IBf0UJ9MfJAstdt5QErY2IsAeXurj9Hv+3tI1tKhsA7IZuODZC1dbVutv2Gkb5h/yzrTkpjedVwrRnEgVbPZaUtgKT9TxYNULZef55D0wO50IgaDiOm0rPcfVwVyjfkgPoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggfj6ID+Lng/ggfj6ID+Lng/j5ID6Inw/ig/j5ID6Inw/ig/j5IH4+iA/i54P4IH4+iA/i54P4IH4+iJ8PcuG9A1urjXPuUt/yAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Explora-Examples">exampleClassHierarchy3Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABJElEQVR4XuXRMQGAIBRAQRpbhxTYAJkZHYzhyPixBnIvwrs0p99KJX+BD+Lng/ggfj6ID+Lng/ggfj6ID+Lng/j5ID6Inw/ig/j5ID6Inw/ig/j5IH4+iA/i54P4IH4+iA/i54P4IH4+iJ8P4oP4+SA+iJ8P4oP4+SA+yF8b/Y4nt/BBFuk9ryhH9UF8EB/EB/FBfBAfxAfxQXwQH8QH8UF8EB/EB/FBfBAfxAfxQXwQH8QH8UF8EB/EB/FBfBAfxAfxQXwQH8QH8UF8kD1BdsoH8UH8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H8QH8fNBfBA/H8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/E7AM6t39d4/ReMAAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Explora-Examples">exampleClassHierarchyIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABKElEQVR4XuXUQQ2AMBBFQZxXQD1wpaoq5Rd6ICggJcxL1sBOdrcx/L7U5q/AB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/H4FkqvjSGpNek98kMW1lpTyjA+yuHkZPsiHmm/qxth3H8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBC/NzsB4oWgQHkqZ3wAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Explora-Examples">exampleFileSystemIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABF0lEQVR4XuXRAQkAIRAAQTN9GQWTGEmwwVX5LKcpBGE2wk7Z2++lir/AB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH+Ruf8yM0dIHeaQYNVf/fBA/H8QH8fNBfBA/H8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBCrA0O5p25G3CngAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Explora-Examples">exampleNumbersIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABUklEQVR4XuXVsQnCQBiG4Uya7JAFBIXgEhHMHqZwkwQsXOKPf1IIamlx4vN+zdX3cFy1LH6/VOVfgQ/i54P4IH4+iA/i54P4IH4+iA/i54P4+SA+iJ8P4oP4+SA+iJ8P4oP4+SB+PogP4ueD+CB+PogP4ueD+CB+PoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggfj6ID+Lng/ggfj6ID+Lng3zXHHOccsfcNeeDFGyKKXZvO+d8kEL10W8I7a19QfFBCtVF9/FCfJCCrX/GCtCMTdSXejsfcj5IwYYYni9jn7vnfBA/H8QH8fNBfBA/H8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H+ZseLViO+siI4bsAAAAASUVORK5CYII='</body></methods><methods><class-id>Roassal2.TRVIAnimatedPointTest</class-id> <category>tests</category><body package="Roassal2-Trachel-Viva-Tests">testAddToZero	| p |	p := pZero + (1 @ 1).	self assert: p x value equals: 1.	self assert: p y value equals: 1.</body><body package="Roassal2-Trachel-Viva-Tests">testZero	self assert: pZero x value equals: 0.	self assert: pZero y value equals: 0.</body></methods><methods><class-id>Roassal2.TRVIAnimatedPointTest</class-id> <category>running</category><body package="Roassal2-Trachel-Viva-Tests">setUp	super setUp.	pZero := TRVIAnimatedPoint new.</body></methods><methods><class-id>Roassal2.TRBoxShapeTest</class-id> <category>tests - position</category><body package="Roassal2-Trachel-Tests">testBotomPosition	self assert: box bottomPosition equals: 0 @ 15</body><body package="Roassal2-Trachel-Tests">testBottomPosition02	box position: -10 @ -10.	self assert: box bottomPosition equals: -10 @ 5</body><body package="Roassal2-Trachel-Tests">testBottomosition03	box bottomPosition: -10 @ -10.	self assert: box bottomPosition equals: -10 @ -10.	self assert: box position equals: -10 @ -25.</body><body package="Roassal2-Trachel-Tests">testDefaultPosition	self assert: box position equals: 0 @ 0</body><body package="Roassal2-Trachel-Tests">testLeftPosition	self assert: box leftPosition equals: -20 @ 0</body><body package="Roassal2-Trachel-Tests">testLeftPosition02	box position: -10 @ -10.	self assert: box leftPosition equals: -30 @ -10</body><body package="Roassal2-Trachel-Tests">testLeftPosition03	box leftPosition: -10 @ -10.	self assert: box leftPosition equals: -10 @ -10.	self assert: box position equals: 10 @ -10.</body><body package="Roassal2-Trachel-Tests">testRightPosition	self assert: box rightPosition equals: 20 @ 0</body><body package="Roassal2-Trachel-Tests">testRightPosition02	box position: -10 @ -10.	self assert: box rightPosition equals: 10 @ -10</body><body package="Roassal2-Trachel-Tests">testRightPosition03	box rightPosition: -10 @ -10.	self assert: box rightPosition equals: -10 @ -10.	self assert: box position equals: -30 @ -10.</body><body package="Roassal2-Trachel-Tests">testTopPosition	self assert: box topPosition equals: 0 @ -15</body><body package="Roassal2-Trachel-Tests">testTopPosition02	box position: -10 @ -10.	self assert: box topPosition equals: -10 @ -25</body><body package="Roassal2-Trachel-Tests">testTopPosition03	box topPosition: -10 @ -10.	self assert: box topPosition equals: -10 @ -10.	self assert: box position equals: -10 @ 5.</body></methods><methods><class-id>Roassal2.TRBoxShapeTest</class-id> <category>tests - extent</category><body package="Roassal2-Trachel-Tests">testExtent	self assert: box extent equals: 40 @ 30</body><body package="Roassal2-Trachel-Tests">testExtent02	box extent: 5 @ 10.	self assert: box extent equals: 5 @ 10</body></methods><methods><class-id>Roassal2.TRBoxShapeTest</class-id> <category>running</category><body package="Roassal2-Trachel-Tests">setUp	super setUp.	box := TRBoxShape new height: 30; width: 40.</body></methods><methods><class-id>Roassal2.RTScrollBarBuilderExamples</class-id> <category>examples</category><body package="Roassal2-Builder-ScrollBar-Examples">doubleScrollBar	"	RTScrollBarBuilderExamples new doubleScrollBar	"	| b b2 b3 |	b := RTMondrian new.		b shape rectangle 				withBorder;				width: [ :cls | cls numberOfVariables * 5];				height: #numberOfMethods;				linearFillColor: #numberOfLinesOfCode within: RTObject withAllSubclasses.	b nodes: RTObject withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b build.	b2 := RTScrollBarBuilder new.	b2 view: b view.	b2 orientation: #vertical.	b2 fixedPosition: [ :v | (v view canvas extent x - ((v width /2))@(v view canvas extent y /2)) ].	b2 movable: #isFixed.	b2 size: [ :v | v view canvas extent y ].	b2 barShape: #aBox.	b2 barSpecific: #scalable.	b2 width: 30.	b2 build.	b3 := RTScrollBarBuilder new.	b3 view: b view.	b3 fixedPosition: [ :v | (v view canvas extent x / 2)@(v view canvas extent y - (v width /2))].	b3 movable: #isFixed.	b3 size: [ :v | v view canvas extent x].	b3 barShape: #aBox.	b3 barSpecific: #scalable.	b3 build.	^ b view</body><body package="Roassal2-Builder-ScrollBar-Examples">example1	"	RTScrollBarBuilderExamples new example1	"	| b b2 |	b := RTMondrian new.	b shape rectangle 				withBorder;				width: [ :cls | cls numberOfVariables * 5];				height: #numberOfMethods;				linearFillColor: #numberOfLinesOfCode within: RTObject withAllSubclasses.	b nodes: RTObject withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b build.	b2 := RTScrollBarBuilder new.	b2 view: b view.	b2 fillColor: (Color lightGray alpha:0.2).	b2 build.	^ b view</body><body package="Roassal2-Builder-ScrollBar-Examples">example3	"	RTScrollBarBuilderExamples new example3	"	| b b2 |	b := RTMondrian new.	b shape rectangle 				withBorder;				width: [ :cls | cls numberOfVariables * 5];				height: #numberOfMethods;				linearFillColor: #numberOfLinesOfCode within: RTObject withAllSubclasses.	b nodes: RTObject withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b build.	b2 := RTScrollBarBuilder new.	b2 size: [ :v | v view canvas extent x / 3].	b2 barSpecific: #scalable.	b2 barShape: #aBox.	b2 view: b view.	b2 fillColor: (Color lightGray alpha: 0.2).	b2 build.	^ b view</body><body package="Roassal2-Builder-ScrollBar-Examples">scrollsWithInteraction	"	RTScrollBarBuilderExamples new scrollsWithInteraction	"	| b |	b := RTMondrian new.	b shape rectangle 				withBorder;				width: [ :cls | cls numberOfVariables * 5];				height: #numberOfMethods;				linearFillColor: #numberOfLinesOfCode within: RTObject withAllSubclasses.	b nodes: RTObject withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b build.	b view @ RTDoubleScrollBar.	^ b view</body></methods><methods><class-id>Roassal2.RTScrollBarBuilderExamples</class-id> <category>initialization</category><body package="Roassal2-Builder-ScrollBar-Examples">initialize	super initialize</body></methods><methods><class-id>Roassal2.RTDynamicGrapherTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testBasic	| b |	b := RTDynamicGrapher new.	b maxX: 100.	b maxY: 100.	b x: #x; y: #y.		b build.		b shape circle color: (Color red alpha: 0.3).	b addAll: ((1 to: 10) collect: [ :i | (100 atRandom @ 100 atRandom) ]).	b view</body></methods><methods><class-id>Roassal2.RTMenuActivableTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testHasInteraction	| e |	e := RTElement new.	self deny: (e hasInteraction: RTMenuActivable).	e @ RTMenuActivable.	self assert: (e hasInteraction: RTMenuActivable).</body></methods><methods><class-id>Roassal2.RTBezier3LineTest</class-id> <category>tests</category><body package="Roassal2-Tests">testBasic	| v e1 e2 e3 lineShape s edge|	v := RTView new.	s := RTEllipse new color: (Color red alpha: 0.4); size: 30.	e1 := s elementOn: 'Begin'.	e2 := s elementOn: 'End'.	e3 := s elementOn: 'Middle'.	lineShape := RTBezier3Line new.	lineShape controlElement: e3.	lineShape attachPoint: (RTShorterDistanceAttachPoint instance).	edge := lineShape edgeFrom: e1 to: e2.	v add: e1; add: e2; add: e3; add: edge.	e2 translateBy: 80 @ 50.	e3 translateBy: 40 @ 25.</body></methods><methods><class-id>Roassal2.RTNameCloudExample</class-id> <category>icons</category><body package="Roassal2-Builder-NameCloud-Examples">exampleRoassalCodeIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAN0UlEQVR4XuXdR5OVRRcHcFau/AhsdenGD+CGhWursCwWVAliuUDLUimlFDGUAUUxR8wZVMSEOeesYMacFXNG7fH9db1n6tzHZxiBmXEu3VVT994Op/vpc+/5n9Q9M0ZG2i/TqcxofwvaZ0j7pX2GtM+Q9sswM+TSSy8tW9P/q6++2mL/a665ptx4443l66+/Ln/++We56KKLyuuvv15++umn8sUXXwyM/eyzz8qHH344Wvf+++//o9+mTZuKskMx5Nlnnx19IBv00ksvjX5eunTpyHHHHVfefPPN0bply5aVBx54YGATVq9eXdS/9dZb5brrritXXHFF+eCDD8qaNWv+MdbrMcccUx588MGyfPny+vnkk08eoHfffffVz88//3yxBv0x6JZbbhnot2jRovLyyy/vWAzZZZdd6gOdccYZ5YQTTii+iZkhyqGHHjpa9+6775Zrr712YBN8VjDk3nvvLZ9//nnZfffdK73c77XXXqub+tBDD5UNGzZgysixxx5bfyW539tvv13uueee4hf6xx9/VLrnnHPOP/qh88wzzwwXQ2xC/vzjjz+WLFqCITY//zqi7vrrry+XXHJJaR9DJqDsuuuu9Vu2//77l/gmH3jggeX0008vBx10UMkM2WOPPUYOOOCA8v3335f2IXySGLLbbruVq666anSDZ8yYUb777rv6t9NOO5XxfiHtl0kQWUTOzjvvXP7PkJGnnnqqxF/7DJlihpx99tl1g2fPnl1+/fXXMmfOnHLHHXfUuieffLK+zpw5s32GTBVDQm3MairVVl3o81RONgGNh2rZ/ta3b6m3z5D2S/sMaZ8h7Zf2GVLLO++8s02KAXfLDs8QLo+bb7652hy///57WbVqVbn66qvLRx99VH1Ja9eurR7V5557bnQzos04423UI488UvtwHG7cuLHSOPjgg2vdl19+OTpW28qVKwuvLsagxXXDP8YfFf1eeeWVwlMbn/XnIdi8eXN59dVXC2flJ598UrLjE41vv/223HDDDXXdUU99nwpmbjdDPLCNtLH77rtvefTRR0ts2rp168oLL7xQ2zjx8rhou/jii0fH20Aby3XOtqE6c0Y+/PDDVV2Octddd5UFCxZUtZq75vbbb69eYJ7dxx9/fHSeO++8c8BRaB6v1O9ffvmlOiitn2Mx+tx9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'</body><body package="Roassal2-Builder-NameCloud-Examples">exampleSimpleExampleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADF0lEQVR4XuXYXUsiYRyHYQ/6VB127nF0KkFR9AGKTCgLLYoIEix7sUwUCsSEXgQ9SE0lRLAgyI466qCz6PDn7v8hZdtdFvYN3L1vkGJmmpznmhnHx9Pp8OunPPwh4IPw44PwQfjxQfgg/PggfBB+fBA+CD8+CD8+CB+EHx+ED8KPD8IH4ccH4YPw44Pw44PwQfjxQfgg/PggfBB+fBA+CD8+CD8+CB+EHx+ED8KPD8IH4ccH4YPw44Pw44PwQfjxQfgg/P5lkNfXV/XDwR8eHqparapcLisajSoSiWhhYUHxeFwXFxdqtVq997m1tSV75fN59/Pk5ETtdlv/BYgd0K/8XSAQUDKZ1Pj4uGKxmFZWVrS4uKipqakP+5ufn9fe3p4qlYrGxsZ0fHysmZkZzc3NOQD+FfLexMSE0um0O8N2dnY0Ojqqu7s7XV5eygbx84B37MybnJyU3+9XoVBQNpvtDWAwGNTp6amGh4eVy+VseyUSCd3c3HwYZFt2e3vr0Gyb8/Nzzc7OurPflvNB3nt5edHIyIi6V4jP53MYu7u7DsNelg340NCQQqGQrq6uvhnArwH4nyE/aHp6Ws/Pz27A9vf33RncXRcOh7W6uto7ozOZjBtwu38Xi0UHsra2plqtpnq97u7p9/f34n+o/0aPj4/u9mC/Dw4O/tRg2m2M/5T1FxoYGHAD6/V6xX+Q7QMQe5pZX193H8D8Ie4DkLe3N3k8/O+c/G/qfBB+fBA+CD8+CB/kz/W9WVH7Rm6PwV/Ojm5ubn54LH54eND19bWbPEylUnp6euqtOzo60vLysmybUqnUW96drbX/Zfu3CcXuOlu+sbGhZrPZW7a0tKSDgwOdnZ252QCbmLT5su3tbbfv7nY222v7sxnf7rJGo+H2Z+/ZjstmFPhXCP8K4ccH4YPw44Pw44PwQfjxQfgg/PggfBB+fBA+CD8+CD8+CB+EHx+ED8KPD8IH4ccH4YPw44Pw44PwQfjxQfgg/PggfBB+fBA+CD8+CD8+CB+EHx+ED8KPD8IH4ccH4YPw44Pw44P0c58A+fULRMou/rUAAAAASUVORK5CYII='</body></methods><methods><class-id>Roassal2.RTNameCloudExample</class-id> <category>sources</category><body package="Roassal2-Builder-NameCloud-Examples">exampleSimpleExample| b |b := RTNameCloud new 		addString: 'open		| v shape |		v := RTView new.		shape := RTLabel new height: [ :assoc | assoc value ]; text: #key.		v addAll: (shape elementsOn: table associations).		RTFlowLayout on: v elements.		v open'.	^ b</body></methods><methods><class-id>Roassal2.RTNameCloudExample</class-id> <category>accessing</category><body package="Roassal2-Builder-NameCloud-Examples">label	^ 'Name cloud'</body></methods><methods><class-id>Roassal2.RTKiviatBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-Kiviat-Tests">testBasic	| b |	b := RTKiviatBuilder new.	b shapes: ((RTColorPalette qualitative colors: 12 scheme:'Paired') do: [:c | c alpha: 0.3]).	b objects: RTAbstractCircleLayout withAllSubclasses.	b addMetric: #numberOfLinesOfCode.	b addMetric: #numberOfMethods.	b addMetric: #numberOfVariables.		b activateAxisTitle.		b build.		b recordElement: (b view elements detect: [ :e | e shape class == RTEllipse ]).</body></methods><methods><class-id>Roassal2.RTShapeTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testArcShape	| arc el |	arc := RTArc new.	el := arc element.	RTView new add: el.	el encompassingRectangle</body><body package="Roassal2-Core-Tests">testBitmapShape	| shape e |	shape := RTBitmap new.	shape form: (TRPlatform current colorFormClass extent: 600 @ 523 depth: 32).	e := shape element.	self assert: e encompassingRectangle extent equals: 600 @ 523</body><body package="Roassal2-Core-Tests">testBitmapShape2	| shape e form |	shape := RTBitmap new.	shape form: #yourself.	form := TRPlatform current colorFormClass extent: 600 @ 523 depth: 32.	e := shape elementOn: form.	self assert: e trachelShape form equals: form.</body><body package="Roassal2-Core-Tests">testBitmapShape3	| shape e form |	shape := RTBitmap new.	shape formElement: [ :anElement | anElement model ].	form := TRPlatform current colorFormClass extent: 600 @ 523 depth: 32.	e := shape elementOn: form.	self assert: e trachelShape form equals: form.</body><body package="Roassal2-Core-Tests">testColoredShape	| shape el |	shape := RTBox new color: Color red.	el := shape element.	RTView new add: el; setUpCanvas.	self assert: el trachelShape color = Color red</body><body package="Roassal2-Core-Tests">testElementCreation	| s |	s := RTBox new.	self assert: s element shape == s</body><body package="Roassal2-Core-Tests">testInstance	| s |	self assert: RTBox instance class == RTBox.	self assert: RTBox instance ~~ RTBox instance.		s := RTBox instance.	self assert: s instance == s.</body><body package="Roassal2-Core-Tests">testShapeAndElements	| es |	es := RTBox elementsOn: #(1 2 3 4).	self assert: es first shape == es second shape</body><body package="Roassal2-Core-Tests">testShapeCreation	self assert: RTBox element shape class == RTBox</body></methods><methods><class-id>Roassal2.RTShapeTest</class-id> <category>composing</category><body package="Roassal2-Core-Tests">testComposing	| s1 s2 e v  |	s1 := RTLabel new.	s2 := RTBox new.	e := RTElement on: 'hello'.	e + s1 + s2.	v := RTView new.	v add: e.		self assert: v canvas numberOfShapes = 2.	self assert: v canvas shapes first class == TRLabelShape.	self assert: v canvas shapes second class == TRBoxShape.	"	self assert: c shape2 extent = (5@5).	self assert: c shape1 width &gt; 10."</body><body package="Roassal2-Core-Tests">testComposingAndEvent	| s1 s2 e v t |	s1 := RTLabel new.	s2 := RTBox new.	e := RTElement on: 'hello'.	e + s1 + s2.	t := false.	e when: TRMouseClick do: [ :evt | t := true  ].	v := RTView new.	v add: e.		self deny: t.	e announce: TRMouseClick.	self assert: t</body></methods><methods><class-id>Roassal2.RTTextBuilderExamples</class-id> <category>examples</category><body package="Roassal2-Builder-TextBuilder-Examples">example01Highlighting	"	self new example01Highlighting	"	| builder |	builder := RTTextBuilder new.	builder wordInteraction highlightColored: Color blue.	builder addText: 'hello world'.	builder build.	^ builder view</body><body package="Roassal2-Builder-TextBuilder-Examples">example02ClickableWord	"	self new example02ClickableWord	"	| builder |	builder := RTTextBuilder new.	builder wordInteraction  					highlightColored: Color blue;					when: TRMouseClick do: [ :event | event element model inspect ].	builder addText: 'hello world', String cr, 'hola mundo'.	builder build.	^ builder view</body><body package="Roassal2-Builder-TextBuilder-Examples">example03ShowCode	"	self new example03ShowCode	"	| builder |	builder := RTTextBuilder new.	builder shape rectangle		withBorder;		color: (Color gray alpha: 0.2).	builder wordShape color: Color brown.	builder wordInteraction		highlight;		when: TRMouseClick do: [ :event | event element model inspect ].	builder		addText: (RTTextBuilderExamples &gt;&gt; #example03ShowCode) sourceCode.	builder build.	^ builder view</body><body package="Roassal2-Builder-TextBuilder-Examples">example04ShowCodeAsBoxes	"	self new example04ShowCodeAsBoxes	"	| builder |	builder := RTTextBuilder new.	builder shape rectangle withBorder color: (Color white alpha: 0.2).	builder wordShape rectangle		height: 3;		width: [ :model | model size + 3 ];		color: Color yellow.	builder wordInteraction		highlight;		popup;		when: TRMouseClick do: [ :event | event element model inspect ].	builder		addText: (RTTextBuilderExamples &gt;&gt; #example04ShowCodeAsBoxes) sourceCode.	builder build.	^ builder view</body></methods><methods><class-id>Roassal2.RTDominanceTreeLayoutTest</class-id> <category>tests - reversed</category><body package="Roassal2-Layouts-Tests">testDoNotAttachPointStraight	| v bs |	v := RTView new.	bs := RTBox new elementsOn: #(1 2).	v addAll: bs.	v add: (RTArrowedLine new withBorderAttachPoint; edgeFrom: bs first to: bs second).	bs @ RTDraggable.	RTDominanceTreeLayout new	    doNotAttachPoint;	    on: bs.	self assert: v edges anyOne shape attachPoint class equals: RTBorderAttachPoint.</body><body package="Roassal2-Layouts-Tests">testDoNotAttachPointStraightVerticallyReversed	| v bs |	v := RTView new.	bs := RTBox new elementsOn: #(1 2).	v addAll: bs.	v add: (RTArrowedLine new withBorderAttachPoint; edgeFrom: bs first to: bs second).	bs @ RTDraggable.	RTDominanceTreeLayout new	    doNotAttachPoint;		 verticallyReverse;	    on: bs.	self assert: v edges anyOne shape attachPoint class equals: RTBorderAttachPoint.</body><body package="Roassal2-Layouts-Tests">testReverse	| v elements lineShape edge layout compositeShape |	v := RTView new.	elements := RTBox elementsOn: (1 to: 3).	elements @ RTPopup.	v addAll: elements.	lineShape := RTArrowedLine new.	edge := lineShape		color: Color red;		edgeFrom: elements first to: elements second.	v add: edge.	edge := lineShape		color: Color red;		edgeFrom: elements first to: elements third.	v add: edge.	layout := RTDominanceTreeLayout new.	layout verticallyReverse.	layout horizontallyReverse.	layout on: elements.		compositeShape := edge trachelShape.	self assert: compositeShape class equals: TRCompositeShape.	self assert: compositeShape shapes first class equals: TRLineShape.	self assert: compositeShape shapes second class equals: TRSimpleArrowShape.	self assert: compositeShape shapes second from equals: compositeShape shapes first from.	self assert: compositeShape shapes second to equals: compositeShape shapes first to.</body></methods><methods><class-id>Roassal2.RTExtensibleLabelTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| v s e |	v := RTView new.	s := RTExtensibleLabel new.	e := s elementOn: 'Hello World'.	v add: e.</body><body package="Roassal2-Core-Tests">testBasicWithExtention	| v s e |	v := RTView new.	s := RTExtensibleLabel new.	e := s elementOn: 'Hello World'.	e extent: 50 @ 50.	v add: e.</body></methods><methods><class-id>Roassal2.RTStyledMultiLineTest</class-id> <category>tests</category><body package="Roassal2-Tests">testBasic	| v es shape lines |	v := RTView new.	es := (RTEllipse new size: 20; color: (Color blue alpha: 0.3)) elementsOn: (1 to: 10).	RTCircleLayout new on: es allButFirst.	v addAll: es.	es @ RTDraggable.	TRConstraint move: es first onTheCenterOf: es allButFirst.	shape := RTStyledMultiLine new.	shape filledArrowHead; arrowTail; dashdotLine; orthoVertical.	shape attachPoint: (RTBorderAttachPoint new).	lines := shape edgesFrom: es first toAll: es allButFirst.	v addAll: lines.	v</body></methods><methods><class-id>Roassal2.RTDynamicStackerGrapherExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Examples-Examples">label	^ 'Dynamic stack grapher'</body></methods><methods><class-id>Roassal2.RTDynamicStackerGrapherExample</class-id> <category>icons</category><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBasicIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAACn0lEQVR4XuXcS8t5URTH8eclehWmXgIGMmJg5h0YKhkwcB+4RYRCiKIMRC4RWZ7WKvJ/Jv+Jy6nvr05n785sf9p25+xt/dxu/DgpP/wh4IPw8z+Q2Wwmp9NJer2e8IfEASCZTMYgqtUqH8QJILvdTs7nswyHQz4Ifw3hhw/CB+GHD8IH4YcPwgfhhw/CB+GHD8IPH4QPwg8fhA/CDx+ED8IPH4QPwg8fhJ8XgCwWC7lcLnbN53Pbj9f2crnk781/GqTb7UowGJRisSi5XE46nY5sNhvrr9frB8h4PJbr9coHejdINpu9uVwu0SNEChIKheyu/XQ6/Q/AZDLhgzhpDeGD8EH4IHwQPggfhA/CB+GD8EH4IPy8AuR4PEosFpNEIiHJZFLC4bDs93vr5/N5/ovhp0H0/yT6Zq5v5alUSsrlstRqNeuvVit5xuCDfOEnS2eMIt3b/BnCX0P4IHwQPggfhA/CB+GD8EH4IPy8C6TVakmz2bQB1xdEPsiXQbT6g17T6VS0IsTf53rIoVKp2HPSpQc+vgJSr9ftk8lgMLDPJ/wZwl9D+CB8ED4IH4QPwgfhhw/CB+HnnSB6Al7vkUhEDoeDlEol6xcKBXneNeSDfACk3W4/Blm3bt1ut3i9Xuvr/d7m76l/cIZoaVm99JRJv98XRdJZ02g0ZDQa8WcIfw3hg/BB+CB8ED4IH4QPwgfhg/DzcpDtdmv/Qb8XDbgXDPhbOIAP8sEZEo1GrVCAx+MRv99vA+/z+R5t3VN/LiTAzxtBdODj8bh+MrGCAYFAwPbVFUO/Z/GH16FrCD98ED4IP3wQPgg/fBA+CD98EH74IHwQfvggfBB++CB8EH74IHwQfvgg/PBB+CD88EH4IPzwQfgg/PBB+CD8fCu/tkDt9Hdeg+0AAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleComposingIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAENElEQVR4XuWc2yttXRiH93/mzoXcy4VcoByK3JCclUiU5HwIF44JSZKc5Swh5CyJUCgXCnnX12+058quxd6fPutb2/PUas4x11xzrfk+a8zZO8aY44fPxyeU+MEPAV8In4+ELC0tmVcoKyuzxcVFe7tDd3e3bW9v2/r6utve39/vlldXV8YP3xcIGRkZsdvbW5OYqqoqq6ys/CXQNTU1VltbaxJRUlJiPT09Njk5abOzs3whXyGkqanJpqamfEVFRU7KysqKPT09+YN9cHBgR0dH7r3i4mLb3d11ZUnhh49/D+EL4cMXwhfChy+ED18IXwgfvhC+ED58IXwhfPhC+EL48IXw4QvhC/k8qamplp2dbTc3N5/qd4mPjzd1vkVFRVl5ebkNDAy44ywvL1tjY6PxhfwBubm5lpSUZMfHx3ZxceEPWlZWlqWkpLhyfn6+xcbGuvXExETLyclxAdZyYmLCSTw9PTUJ+bm/z1uqIy4iIsIvJDMz0ySeL+QdqqurLSwszKdeybu7O1N/vrqVY2JibGxszK6vr13PpYLb2dnptrW0tPgDrF5M1QZ1QwcS4n2Ht7/21XfwhbxDZGSkRUdHuwAlJyebaowEqIYUFBS47Z4QkZCQ4C5Fb//x9fX1TkhcXFxAIeHh4a77eWNjwzIyMqy0tJQvhA9fCF8IH74QvhA+fCF8IXz4QvhCAqEETAnU2tqaP3HSyPi+vj43tpcfOp9P46D39/c/jEVzc/O/illAIWqSGB4etvb2dlMTRWtrq9XV1bkMuKOjw2W3c3NztrW1Zb29ve5Rhby8PKuoqMCIGh0dNT2SoaaboaEhS09Pd+e+t7dnGsCudQ1gl5D3YuY1Bf1WiJ4T0YG1rgOobamhocGNjFeN0cGmp6ft/PzcvacfphHz+nEUIfrXq+VYV5G2tjZ7eXmxrq4uvwzx+PjomnI2NzcDxkyfkTT+PYR/Uw8uquHz8/O2sLDgWou1zSvzhfwP6FJyeHjoXs/Pz3Z5eekve/uoz4QvJEiMj4+7+93q6qrNzMzYzs6Ou/epzK8hfPhC+EL48IXwhfDhC+EL4cMX8hWoPYmfqYcQajr5XaZ+cnLCz9SDhdePw8/U+fCF8IXw4QvhC+HDF8KHL4QvJNhomI2Wbx+PC3khZ2dn9je/3jsxPXFVWFjohtt4Yt6iTD0Uz+fb1hBl65pFVaMtNYiPf8niwxfCF8KHL4QvhA9fCF8IH76QYOBl6H9Txv6thdzf31taWprL2L2yJrXxMnW+kCChaZg0VZOmcvIy9p+T1pjg1xA+fCF8IXz4QvhC+PCF8IXw4Qv5r3l4eLDX11fjZ+ohhKYC+ShT19zAfCFBQgMcBgcH+Zk6H74QvhA+fCF8IXz4QvjwhfCF8OEL4QvhwxfCF8KHL4QvhA9fCB++EL4QPnwhfCF8+EK+Ef8AYYqQzBlo8q8AAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleWithTextBelowIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAD7klEQVR4XuWcSUszQRCG/bPBP+BdxZvePHoSb3oRBXdFwagHN/zctyi4RxRckLiV37yNM5iYTGKik0meF4rYs2Qm9UxXd3W30/DxwVec1MB3AR8IX6UAyWQyNjo6anyXVBnI8PBwAKK9vZ0PJC41ZHV11Zqbm/ke4bchfPGB8IHwxQfCB8IXHwgfCF98IHwgfPGB8MUHwgfCFx8IHwhffCB8IHzxgfCB8MUHwhcfCB8IX3wgfCB8VRHIxMSEdXR0WGNjo/X19VlTU5NbaKfy6+srf9Fd1EDm5+dtcXHRDg8PLZFIaKGdg6Dy2dmZ+/vi4sJGRkb4cKIMWXd3d+Z/Pj09mV/2pVWRcfrR3hNktr2dbY+PhmlDSgFiyaR9s+trs52dbPO2VQxkctJscDDbrq74QLKclOsgmQDk2cYHwgfCB8IHwgfCB8IHwgdS30AWFhaCzDwsU+cDibiG/EamzgcSs0ydD4TfhvCBxBrI8fH3YZr9feMDqRaQfNeqwosU+ED4QPhAYglkc3PTZElvmL0cIOvr67a7u2v9/f1FnTY1NeW12Vc2MzNj5QDRtba9OZN9r03x77eugFxeXtr5+bk9PDwEDv0JEJ2vXGdra8ukl5cXC8uR3t/fXS7kd8dLBZIZGrLb21s7PT11lkqlbGlpKf5Aurq63E1OT0+b7CchSw4tp4bYp/wRAY9wwcms5+dn9xkcW0bIent7s5oJWY/e9KfCTz4gqgkDAwO2trbmbMf7oanOzizTNn9/KZZ7vuw3ji31/H8rK6HnaHSiqkDa2tpcfJ6dnc0bY7/WkEJPvYZa9M4uhZiNjQ27ublxT7/itkLNycmJpdPpgrXp66iBQlRYZ+H+/t7tP/ZyD4W/g4ODYKRB11Bo0oNUsOaGhMiaa0MKAVGM1v7l5WU7OjoKGmABFgzVwrAOgP/9Or9Y7+3rfekB0OqZz5D7MTY25q4tKGggGjn2QLg32/kNp6q+nKTtPpxiTlZHoRgQfZ8crmtq7G1vby9ol1QjVdZ2NJAf5REhQCo5tuT8qJ6A/IYqdTIfCB8IHwgfSJRA5uYs1/hAPtXa2uq6oz09Pdbd3e26kH75r4BEqZoCMj4+bi0tLe71svnMz9RrefV7zdUQOV5Jm/5XRC9k1kCfcgmV+TUE0obwgfCB8IHwgfCB8IHwgfCB8IHwgUQMRCs66jpTz52nl/3h/HrFmXpvb2/RTN2fDeQrokxd06BhmTpfMWtD+OID4QPhiw+ED4QvPhA+EL74QPjiA+ED4YsPhA+ELz4QPhC++ED4QPjiA+GLD4QPhC8+ED4QvvhA+ED44gPhA+GLD4QvPhA+EL6K6j+bb8xyXqkAQAAAAABJRU5ErkJggg=='</body></methods><methods><class-id>Roassal2.RTDynamicStackerGrapherExample</class-id> <category>sources</category><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBasic| b |b := RTDynamicStackedGrapher new.b numberOfBars: 10.b minY: -200; maxY: 200.b y: #yourself. b barShape color: (Color red alpha: 0.3).b build.b view addMenu: '+ 1' callback: [ b add: 400 atRandom - 200 ].^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleComposing| composer a b |composer := RTComposer new.    a := RTDynamicStackedGrapher new.    a minY: -200; maxY: 200.    a view: composer view.    a y: #yourself.	a build.	composer group: #first.    b := RTDynamicStackedGrapher new.      b minY: -200; maxY: 200.    b view: composer view.    b y: #yourself.	b build.composer group: #second.composer move: #first onTheLeftOf: #second.composer nameGroup: #first as: 'aFirstName'.composer nameGroup: #second as: 'aSecondName'.composer setGeneralTitle: 'aGeneralTitle'.composer view addMenu: 'Left' callback: [ a add: 400 atRandom - 200 ].composer view addMenu: 'Right' callback: [ b add: 400 atRandom - 200 ].^ composer view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleWithTextBelow| b |b := RTDynamicStackedGrapher new.b numberOfBars: 10.b minY: -200; maxY: 200.b y: #yourself. b barShape color: (Color red alpha: 0.3).b textBelow: #yourself.b build.b view addMenu: '+ 1' callback: [ b add: 400 atRandom - 200 ].^ b view</body></methods><methods><class-id>Roassal2.RTVerticalTickLineDecoratorTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Decorators-Tests">testBasicHorizontal	| b ds d |	b := RTGrapher new.	ds := RTData new.	ds points: #(3 4 6 -2).	b add: ds.	d := RTHorizontalTickLineDecorator new.	b addDecorator: d.	b shouldUseNiceLabels: false.	b build.		self assert: b axisX numberOfTicks equals: 4.	self assert: b axisX step equals: 1.	self assert: d step equals: 2.</body><body package="Roassal2-Builder-Grapher-Decorators-Tests">testBasicHorizontalWithNumberOfTicks	| b ds d |	b := RTGrapher new.	ds := RTData new.	ds points: #(3 4 6 -2).	b add: ds.	d := RTHorizontalTickLineDecorator new.	d numberOfTicks: 10.	b addDecorator: d.	b build.		self assert: b axisX numberOfTicks equals: 4.	self assert: b axisX step equals: 1.	self assert: d step equals: 4 / 5.</body><body package="Roassal2-Builder-Grapher-Decorators-Tests">testBasicHorizontalWithStep	| b ds d |	b := RTGrapher new.	ds := RTData new.	ds points: #(3 4 6 -2).	b add: ds.	d := RTHorizontalTickLineDecorator new.	d step: 1.	b addDecorator: d.	b build.		self assert: b axisX numberOfTicks equals: 4.	self assert: b axisX step equals: 1.	self assert: d step equals: 1.</body><body package="Roassal2-Builder-Grapher-Decorators-Tests">testBasicVertical	| b ds d |	b := RTGrapher new.	ds := RTData new.	ds points: #(3 4 6 -2).	b add: ds.	d := RTVerticalTickLineDecorator new.	b addDecorator: d.	b build.		self assert: b axisX numberOfTicks equals: 4.	self assert: b axisX step equals: 1.	self assert: d step equals: 1.</body><body package="Roassal2-Builder-Grapher-Decorators-Tests">testBasicVerticalWithNumberOfTicks	| b ds d |	b := RTGrapher new.	ds := RTData new.	ds points: #(3 4 6 -2).	b add: ds.	d := RTVerticalTickLineDecorator new.	d numberOfTicks: 10.	b addDecorator: d.	b build.		self assert: b axisX numberOfTicks equals: 4.	self assert: b axisX step equals: 1.	self assert: d step equals: 2 / 5.</body><body package="Roassal2-Builder-Grapher-Decorators-Tests">testBasicVerticalWithStep	| b ds d |	b := RTGrapher new.	ds := RTData new.	ds points: #(3 4 6 -2).	b add: ds.	d := RTVerticalTickLineDecorator new.	d step: 1.	b addDecorator: d.	b build.		self assert: b axisX numberOfTicks equals: 4.	self assert: b axisX step equals: 1.	self assert: d step equals: 1.</body></methods><methods><class-id>Roassal2.RTDragAndDroppableTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testDefault	| dnd |	dnd := RTDragAndDroppable new.	self assert: dnd numberOfHosts equals: 0.	dnd host: RTElement new.	dnd host: RTElement new.	self assert: dnd numberOfHosts equals: 2.</body></methods><methods><class-id>Roassal2.RTAxisAdaptedBuilderExample</class-id> <category>icons</category><body package="Roassal2-Builder-AxisAdapted-Examples">boxesFlLayoutIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAEjElEQVR4XuWc20sbQRTG+9/56l/gn6Hgg5YiqNDig4iIl75UUJAiVgoqXmK8+xCiqG3UpEu8YBITc10N9WzzHRixRZNmjemm3weH2Vn2ZGbnt5PJnMzsG8fhl5f0hr8J+IHwix8IPxB+8QPhB8IvfiD8QPjFD4QfCL/4gfCLHwg/EH7xA+EHwi9+IPxA+MUPhB8Iv/iB8Ku+QILBoCCdm5sTkw8EAlLOZ3NzU9LptExNTel15+fnsr6+LltbW1IoFKRSeclkUmKxmJydncn29rYcHBzI1dXVs363t7cCv8nJSTk+PtZycN74m7o/p8XFRfVfWFjQcnB/yFfyqzuQ/f192dnZ0Up1dHRILpfTG4aV80MjoHHGx8e1ce/v72VpaUnzExMTZX1RHq73+XwyPDwsph7t7e0V/VZWVqStrU1aW1v1WgPG1L3cQ5DNZhWkZVl63NnZqannesjy8rKDJ2dgYEArjKdnb2+v4hOHRhwdHVUfwJmenpbBwUEpFotlfUsNof64Hr0M/oeHhzI/P/+sH+oEv6GhIb2mr69PewbqjvJQ90pl4lrY6uqq3t/GxkZFP/4xhGkM+XNcQDc2PUFKSqVSmlb7ubZtq7kRynQjjFOVxqrXqG/NgOD73YwVZhBHNy41iB5jHDg9PXWi0ah+5VRj8XhcrVo/2MnJiePGDz8I3JaZSCTE7YNQ0x5SunlBgwNMKBTS7+3d3V156dPK30P4xT8x5JcHgNzc2bJxFXX+xqBE/KwqK97dSiEYkJx/2XFrd1aEB4iVvZEP+5vO3xgU+rZTleVzaUl++iix7reOWwMUfiD8QPiB8APhB8IPhAoIgniP8xcXFxrY+/M8P5A6ACmFRKSlpUXwnwXy+Xxeuru7ZWxsTEwYBbNehE8ymYzwA3llIPjfoampSUPVCHvPzs5Kc3OzmGMTTkAYgx8I/xjCD+S1Zur8QDwmfiAeU9Q6kmrMtnP8QLwmfiD8QPiB8ANpIGXmv+o44tbwfwoNkJ/FguTjkZqa/pzOW/JSs4s3UrwrSiGX19TO2ZKKpZ60bCojngPi9/tlZmZGl25eX19ryOTx0s2nZur5eFhCX945tTRo6/v7F1s0se4k49dO+NuxptbhD8f/2fekBX0B7wHBar2enp6H1YFYj/V46WYjAsncpOXcigrShgOCJT9ra2sazzL5cks3GwHIb2GeRgPiRvxA+IHwA+EHwg+EHwgDEIqJIT8QfiD8QPiB/AMg2OEaiURkZGRE9wJi1QlCKV1dXZrC+IHUuYcACsInWOpjtgJjoyfScDis55FivRY/kDoAwd5BAMDWYRM+QeMjj61hj8UPhH8M4QfCD4QfCD8QrwL5X8QPhB8IPxBPAeEXPxB+IPz6R0BKs/OHGTgWOOAFYpeXl2o499QOKn69EhCEQ3p7ex8aGqESvAXo6OhIzNuA+IHUEQhiV+aNatjG1t/f//DmOAQc+ZuWfwzhB8IvfiD8QPjFD4QfCL/4gfCLHwg/EH7xA+EHwi9+IPxA+MUPhB8Iv/iB8IsfCD8QfvED4QfCr1rqFwbGcUaeNWcPAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-AxisAdapted-Examples">boxesFlowLayoutIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAENUlEQVR4XuWcy0tbQRjF+7e51D/DpXsXIhrro4JVEURcKClSKS7swuD7GWNMKQgtbdVamjSJUTTiK/GtJ+0ZesXa5nmj3vQcOMSE+e53M79MJjPOzLNUSl9O0jP9KtAHoi99IPpA9KUPRB+IvvSB6APRlz4QfSD60geiL30g+kD0pQ9EH4i+9IHoA9GXPhB9IPrSB6IvfSD6QPSlD0QfSAZdX1/j6OjImM+3t7eRqfzFxQW2trZwfHwMiq/F43Hs7e0hmUwiWy4rbnNzEzc3N3/kziTmZDzzM47xucTy3qxcOzs7sK7lWCBra2twu92Yn583FZpIJDLebH9/P6amplBRUYFoNGrKTkxMoKamBrFYDNly8bG7uxtjY2Pmbyt3pjhWOsuMj49jYWHBlJ2cnEQusbw35qqvr4fL5TJlz87OcHp6CkcCqaqqwuzsLHw+H5aWltDU1JTxRldXV1FbW4vGxkZ4PB7Mzc2Z5319fZiZmUG2XK2traZiI5GIyWflThfzq8JTLMN8/CBMT0/D7/ejoaEha6x1b8xFcLwGc7a0tEC/D9HvQ3LvKy4vL0EXct1Cm76dOKvvykd23uODAMnUV4RCodTIyEiKzT8fLy4uopA42kacyZtvHL/u9vf3nQMkU1/BXz50vtfkJ7XQXyx24gppIYW+R/0+RH9gqK+SABJOHCIXs+xJ8gj52AwwfwRhx3JA2j8FcjK1sf4+L1O7L1y2rA9EH4g+EH0g+kD0gegD0QfytECWl5c59WxG6nx+fn6O9vZ2dHR03P505JTC/WkFfSAPBKSrqwuVlZWoq6sD57O8Xq+Zx+I0Av/ZwzIHBwfG+kD0v7L0geSqoe+fkYv1gThQ+kAcpmh4DflYH4gDpQ9EH4g+EH0gJaT9127YsRyQk3gIxTSveXgShl3zOqfJE9BmULt7gHR2LBCuKuTitPLycnOT1dXVWFlZub3hf43UNzzPi2rq3deXtk0F178ZU7633rR2LJDh4WG0tbVhYGDAQOCqDa78K1UgsXAUdMkCubsI+urqKuv6XacDuauSBFLQ6FsfiD4QfSD6QPSBFBvIR+8HpLM+kCcAIjMw1AeiD0QfiD6QRwbCQeDo6KjZk8fBIUfsfJ27UgOBgNmdqg/kkVtIc3MzhoaGMDg4iN7eXgOAO5D42NPTYx65g4rWB/LAQNgKuCaLO2S5v66zs9O0Fu5s5Z5DC4h+C9HvQ/SB6APRB/IXkC+RN7BrfSBFBPK/SB+IPpBUKuJ/hWJaH4i+9IHoA8lB1oFh1rESxTrESx+IDfHAME6hpDvEKxgMgtav6kcAYh0YVlZWBusgsPuHeOG39Ktavw/RB6IvfSD6QPSlD0QfiL70gehLH4g+EH3pA9EHoi99IPpA9KUPRB+IvvSB6EsfiD4QfekD0QeiL30g+kD0pQ9EH4i+nkI/AWbyx21YZEZCAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-AxisAdapted-Examples">withComposerIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAMQ0lEQVR4XuWd21OT1xrG7d/TC+9b73rrfdsLnba2nXY61U6rzuw906111/HQbqrV7nqorYooihaFLUiQkwTCmRxJSDgKISBgOIOiz7e/ZyUrfgk5AYnErHfmne/78q1v5cv7+9b7rtO3sk3TQjI0NAQty7K0tIRnz54JTZV2ZWUlbpq5uTnx+czMDGLzlcfPnz8Xx4uLi5DXBINB8BqeW+99dzntKC4r1RLpjfsVOFPWgt9uN6O2sBSBghOYLDiJqf+eQdMDK+prejWvp03o7Ew9FuZN2pNFEwJLlRq19UktTP46jbpNyxIQ3L4Nbds2baWhATRuuobA9u149vbbCdPCYhH54u+/sXLjRmi/pUWkJ4AXFy6EPrt0CRIOv3+5vl58/vLOHczOzqK4uBiNjY3AO+8ITXZPPabf0FB2TququpMUzLXySpwtb8OtYhP6fwpBGb12MwoIYTxdrBUwBudNeOivj8DILpCPPgoZ5uTJ9eWrXyM0Ub7Hj4fy/eQT4OOP136HvD4mD5w4EUrLa3RZXl4WW+zYAbz7btJ79JYfidF/o7XiPB5VXMat8tI1kK6WPcCfeomxXb0uoHRXd8HtssM/YsHsfJWA4XgaDeLBqBlFfU3IChDo8vTpUzzv7sb09HTa+dLNLAcCWBwbQyKXJfJ3OBBvXxxfvRoyfGHhmuuDZvOGfuNi1Z5XWv0lnj78BwIV32qBqn9iqPonEFLvgwJRimqqSiKACv9nQtX1Mkz8/hs622za9FQjArqrMk80CBilQ2YU+iz4j8OiSc0KEPp0+m26BroR+TSmihlSeLy6uprWdbHy4sULESsWFhairn358iV4X/Pz89gUkBS6ULcfEw/2C2Ceut9hrvgTlaZq9JrbMDBTh+L+Rlz0tEZByCoQGpYQ+LRLo9CPJzOuhCGDsDQer1tvEGYevDYWCEHEBv9sAJlp3I/xxq8w1vCpNlb/KYbbD6DbuR/evpsYHm3H4yndjU2f0/W0Fk8zCoRGkIanYWhYuZ/IuBKG0a8zHZ90+ZnMJx1hyYzNzwgkmStMBmS24VtMNH4dMrSuj9t0I7fvhaf1My2eOru+RnPPPlR7v9BqfHsRtNq0SdcwbI1WdPWb4QyYMDh9F4+nr+pwziCjQFwuF6xWK9rb2+HxeFBeXg7mh/Pngc8+E0/+3bt3EdDjQ1FRkXAp8pyQw4ex+uGH0B9r4eZY+2G+rAn19PSI60tKStDX14d04pextHDb398Pn8+nV8z+Fq60qalpXb81kdHX6udotX2uQ/hSgJDq9dzCim0UU44hjLuG4Kh3oM3WjFaPGbaRh3BPlWvUoekSZAyI2+3G4OCgNjk5+QrIW29B1nYIq16veh4+fFjjVp7TLQVZK8Lu3eIemAfhMS21rq5Ok/uJhKB5/vr162D6O3r1lgCOHDkiShhVtl1kWyZTQKz2fXjk/SYKgtSmvsPwO2q0511+baZnhFC0IUcfbA9taKu1EIpGtQ03wDNViaxVe8XTqvtrjI9H5TsePpbnQDcmgfz4I2SlgNuamhqMjo4K93Vbb9fwSU/0XRKYEdrIyAh6e3s3/bvG+v5c45p6OveixfV1XAhSTb1fYMB5DwFnAwhk3vpYIxBqv8ML60MrOu61o93zCkxWgaQNTq9RwfD9Eghb1+nmoZdO4Q65zfT9zUw2R4C0279CrW9fUhBSO71nROkI2mwCyII9VEKEOofgs3nhaHTAcrkZbV3CheUGkHjVZhmIc+Wemtx704Igtdb7LUZdNQLIvN0ngDyz+l8B0XXcMQBXq1MP9Lr7utYG870G5BwQxiH6/tha0lZLz3jRuoA4PFcEDBk/pBqBUP29g3C1OGFvtGst11pyDwhrYzIOMIbkCpCXeJE2EIvvOGGkBYQ67OmH0xKCkpMui8KuF4LhNlfuqfdJSUoo9b4D8LiLIzCmnd0wApl2PUYcKBjw+GB7ZEPOAslVaeg/kBRKm/d0BAZ1xmqPAjJnDOwGnXANor/Hpz6QdXcNrc4mBNLkO4oBd3kUEAZyIxBj1TdWx3qH1AeyEQku9WGtq9qPLu+5KBix8YO65BxDIiDUNxbIeEyD8/VD6Y+C0uorwJCrIgrIhKsZsUASBfYoIKxqtrS0bG0tRu/a+O677/QBQQtu3rwp+sWqq6vFdmpqCrW1tWjQRx/ZTcM0x44dg91u31Ioqy+W0DT4L5h9h2B1X1hTOtihuCEguVBCOJB18OBB/PXXX6If68mTJzh16hS6uroivbdVVVXi/NGjRwWQqxyMygEZmWqG31m7BsiSY3hdJWS657H6MSSTMhvoQ7L4IXWmZzQqjky7R7AyE+qZVh9INmpiC0EQznPrWNwSwppWsG8MixNB4CWi7L4pIBx9u3XrFthd/ujRI3F9RUXFq/Fug6iPKT3ZdAn55ZdfhMEZdDneYBwiZSu7o6MDbn3gaTEMxaM+nOwB4UDPoUOHtLKyMlRWVoqRuLNnzyKmsxCEMBcG0aG+zbNbQlKJ+kDUB6I+EPWBqA9EfSCbBTKqK7e5AmQufD95B4Q1K5PJFJkEx/lP8hzHxh0OB5z6uXhAttIgeQuE7Qy2QThBjnBkAzEdIOmUlrmwRlrBeh6TGTBk3gLZjMtKB4g/rJH+ogwZUn0gGQbSoT4Q9YHkLRDGgZXw/oK+XU1iGPWBvAYg0sgd4ZrWnPpAMgeEs979fn/k2tjud/WBbAEQuR/b/R4MBsVYvXV5WVMfyGsCwu53vo/Btkiy7vfXAUTGJvVjSI7EkNi06gPZJJCODQKR+VDVB6I+EPWBqA9EfSBvDhDOHhwbGxPXFhQUROWxrFd34/X2qg8ki0CcTqeY1sn2CGehGNshGwES291uBDIZ7npPB8hkgiqwPyYf9V1WCiCxJcJ4nKyTMhYI92fjGLwjJh/1gcQBEu9cLKAO9YFsHRCfvj+cRtq8BcI+J8aCXAHiSTNtXgLh5AT1geSRy+IkB8464b7cGqWzszMtIPaVlbSA9Oo1uUTnJBAeM790HgJZZc+n3l4x4ZrCRWKMy2Gw5FksFq25u1tr1bXT7dbsg4Nin8p9ftai79fo6eQ5fpYo7QO9ZznROao8Zn4tKb6TW95fXgHhu4FcbslsNuPXX39dk4dctySV5Hq6N76WlcqVRVres7Pgu4Op0smBML76wK1xZFKKfIEo0QhmbDrmKX93vHR5BSSZK4uVC1xrN0U6Gm/Xrl3Ys2fPmheDjMIXiOR+qnTNzc1isbVk6fIGSCpXZhSug5gqnYTL0cl4I5Oifyr8AlGyEUxjOp7n9yZKl5cNQ/VFfSDqA1Ff1AeiPpBMC9ctKSwsxPnz58Wav1zW71L4Hw2kcAkNpuHaJpcvXxark8o1fY2iB3GxPgq3XB9FfSAbEC7lR4MPDAyA1d4dO3bgvffeE/ewfft2sS0tLcXOnTvxww8/4Ny5czh+/DhOnz4tznF9XpkX300xtlXUB7JB4cs99+/fF2vrtra2igWQZZVZGphp2Mjk0892A4+Hh4fFvqwOcwVrQmWrm+DUB6K+vB4gdBF8atmK5ROsooEwqY++h13ilgORnxm7QaRw0TOHw5H/QPS+M6HrWGU7a0CkT6cvt9lsa85nY1lv9UvIJmKICkDeqKCuPhD1gagPRH0g6gNRH4j6QNQHor6sFwj7jtizyn6lixcvQh6rD2SLgHi9XvGXddy/cuUKjMeypW5cnhz8P8KJCfUBZQsI/x1NN7hYXonLfsvjRCUk0sWgd6erb9YciCERIDk2NVPpoI7w36WqL+rXstQHoj6QLALZ6PshEggqK0Pxo6gotD1zBkgyT1d9SQKE7YzNANHrwyEId+4A338P/PEH8P77oX29dqa+iV+zy8LSEiI1rBMnQtvdu4Fjx9SHkWkgN27cEDM5OMsj3kToiMvinwvzn58phlcB1JcMA+H/f/CVNDYICScGxpb/kZhyQORUfcYX4wLJ6tey3oSWutUaih8dHepDyqmuk/ArZ+rLVgPhdJmaGnCrvlnVb6mrD0R9ILnusgKBUAzRu0ywvKw+qC1rqXOkkCDYVXLqFLBrF3DwYGT6pWgw8nycF23Ul3UAkS+/sKUengUfd0wdi4uvgPz8M/DBB8C+fUC4b4wjiLLkqG/uDJUQNgqTjalzZjgslpDhS0oAQzpxXn0XtnkgfJmfylY6Z8GnGlNXXzIj/weSiR++oaicGgAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-AxisAdapted-Examples">withMondrian1Icon	^ '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'</body></methods><methods><class-id>Roassal2.RTAxisAdaptedBuilderExample</class-id> <category>examples</category><body package="Roassal2-Builder-AxisAdapted-Examples">label	^ 'Axis adapted'</body></methods><methods><class-id>Roassal2.RTInteractionBuilderTest</class-id> <category>running</category><body package="Roassal2-Builder-Common-Tests">setUp	super setUp.	builder := RTInteractionBuilder new</body></methods><methods><class-id>Roassal2.RTInteractionBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-Common-Tests">testAddingAndRemovingInteraction	builder addInteraction: RTDraggable new.	self assert: builder numberOfInteractions equals: 1.		builder removeInteractionOfType: RTAbstractDraggable.	self assert: builder numberOfInteractions equals: 0.		builder addInteraction: RTConstrainedDraggable new.	self assert: builder numberOfInteractions equals: 1.		builder removeInteractionOfType: RTAbstractDraggable.	self assert: builder numberOfInteractions equals: 0.</body><body package="Roassal2-Builder-Common-Tests">testAddingOneAction	builder action: #inspect.	self assert: builder numberOfInteractions equals: 1</body><body package="Roassal2-Builder-Common-Tests">testAddingTwoActions	| e |	builder action: #inspect; action: #browse.	self assert: builder numberOfInteractions equals: 2.		e := RTElement new.	builder setUpElements: (Array with: e) asGroup.	self assert: e announcer numberOfSubscriptions equals: 1.</body><body package="Roassal2-Builder-Common-Tests">testDefault	self assert: builder numberOfInteractions equals: 0</body><body package="Roassal2-Builder-Common-Tests">testDraggableAndSnapToGrid	builder snapToGrid.	self assert: builder numberOfInteractions equals: 1</body><body package="Roassal2-Builder-Common-Tests">testDraggableAndSnapToGrid02	builder draggable.	builder snapToGrid.	self assert: builder numberOfInteractions equals: 1</body><body package="Roassal2-Builder-Common-Tests">testMultipleDraggable	builder draggable; draggable.	self assert: builder numberOfInteractions equals: 1.</body><body package="Roassal2-Builder-Common-Tests">testPopupTextColor	builder popupText: [ :v | 'My number is ', v printString ] color: Color blue.	builder setUpElement: RTBox element.</body></methods><methods><class-id>Roassal2.RTStackBarPlotExample</class-id> <category>accessing</category><body package="Roassal2-Builder-StackBarPlot-Examples">label	^ 'StackBarPlot'</body></methods><methods><class-id>Roassal2.RTStackBarPlotExample</class-id> <category>sources</category><body package="Roassal2-Builder-StackBarPlot-Examples">exampleSimple	| b |	b := RTStackBarPlot new.	b add: #(1 2 3 4).	b add: #(4 3 2 1).	b add: #(5 3 2 0).	b build.	^ b view</body><body package="Roassal2-Builder-StackBarPlot-Examples">exampleSimpleWithDifferentColor	| b |	b := RTStackBarPlot new.	b interaction popupText.	b colorPalette colors: (Array with: Color blue with: Color gray with: Color red ).	b add: #(1 2 3 4 ).	b add: #(4 3 2 1).	b add: #(5 3 2 0).	b barWidth: 200 height: 20.	b build.	^ b view</body><body package="Roassal2-Builder-StackBarPlot-Examples">exampleSurveyResult	| b |	b := RTStackBarPlot new.	b interaction popupText.	b colorPalette colors: (Array with: Color blue with: Color lightBlue ).	b add: #(37	33	0	0 0) title: 'DN1'.	b add: #(24	26	17	3 0) title: 'DN2'.	b add: #(25	29	15	1 0) title: 'DN3'.	b add: #(30	33	6	1 0) title: 'DN4'.							b addLegend: #('strongly agree' 'agree' 'neutral' 'disagree' 'strongly disagree').	b barWidth: 260 height: 20.	b addLabelToBars: [ :assoc | (assoc key  / b totalSum * 100) asInteger asString, '%' ] if: [:assoc | assoc key &gt; 5 ] color: Color white.	b build.	^ b view</body></methods><methods><class-id>Roassal2.RTStackBarPlotExample</class-id> <category>icons</category><body package="Roassal2-Builder-StackBarPlot-Examples">exampleSimpleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABR0lEQVR4XuXVsQmAMBRF0Sxr7SKCO2llqZVD6Ao/WlkpKgQUzoUskAPvp5z9/lTyv8AH8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAcp0tI2x5uH6vRN/XT78lq/erHng/ggPogP4oP4R90/6n7GZD15V7P2ZOJiqcOfLB/EB/FBfBD/qPtH3c+frBLzNXZjnM6XP1nfgFzeEx/EB/FBfJD3xUf5R93PB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxK9IG4S3hO8XsV6oAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-StackBarPlot-Examples">exampleSimpleWithDifferentColorIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAABbElEQVR4XuXW4QmCUBSAUUdpFEdxEdEN2kDbwA3UCWqD3KAm6L78E0FQYREY54M7gO/guy9LyW9NZf4R+CB+PogP4ueD+CB+PogP4ueD+CB+PoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggfj6ID+Lng/ggfj6ID+Lng/j5ID6Inw/ig/j5ID6Inw/ig/j5IH5rALlcIvJ8TPcZoq7r9GrGPF8002Yzf1328URZhg/ig/ggPogP4i91f6n7/fuVtXzeXXGPsyuKd1dc+DvEB/FBfBAfZP0gMde2U/pmhmFYNIeuS1PbPp3zdhupqtJtou/9Z6/fH/8hv/5jTvu9v0PWtFOOTeOD+CA+iA/i7xD/leW/svx8EB/EzwfxQfx8EB/EPwIfxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/Fb1hXzQ/HInLBYRQAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-StackBarPlot-Examples">exampleSurveyResultIcon	^ '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+wAAAABJRU5ErkJggg=='</body></methods><methods><class-id>Roassal2.TRShapeTest</class-id> <category>lines</category><body package="Roassal2-Trachel-Tests">testCenterOnALine	| c l |	c := TRCanvas new.		l := TRLineShape new from: 50 @ 50 to: 120 @ 100.		c addShape: l.		self assert: l center = (85 @ 75)</body></methods><methods><class-id>Roassal2.TRShapeTest</class-id> <category>callback</category><body package="Roassal2-Trachel-Tests">testAddingCallback	| t c s canvas |	t := OrderedCollection new.	c := TRAddedCallback new.	c block: [ :aShape | t add: aShape ].	self assert: t isEmpty.		s := TRBoxShape new size: 30.	s addCallback: c.	self assert: t isEmpty.		canvas := TRCanvas new.	canvas addShape: s.	self deny: t isEmpty.	self assert: t size equals: 1.	self assert: t anyOne equals: s</body><body package="Roassal2-Trachel-Tests">testAddingCallbackWithFixed	| t c s canvas |	t := OrderedCollection new.	c := TRAddedCallback new.	c block: [ :aShape | t add: aShape ].	self assert: t isEmpty.		s := TRBoxShape new size: 30.	s addCallback: c.	self assert: t isEmpty.		canvas := TRCanvas new.	canvas addShape: s.	s setAsFixed.	self deny: t isEmpty.	self assert: t size equals: 1.	self assert: t anyOne equals: s</body><body package="Roassal2-Trachel-Tests">testHasCallback	| s |	s := TRBoxShape new.	self deny: s hasEventCallback.	s when: TRMouseClick do: [ :e | ].	self assert: s hasEventCallback.</body><body package="Roassal2-Trachel-Tests">testNumberOfCallbacks	| s |	s := TRBoxShape new.	self assert: s numberOfCallbacks equals: 0.	s addCallback: (TRExtentCallback new).	self assert: s numberOfCallbacks equals: 1</body></methods><methods><class-id>Roassal2.TRShapeTest</class-id> <category>position</category><body package="Roassal2-Trachel-Tests">shapesForPositionTest	^ Array with: TRBoxShape with: TREllipseShape with: TRSVGPath with: TRBitmapShape with: TRLabelShape.</body><body package="Roassal2-Trachel-Tests">testPosition	self shapesForPositionTest do: [ :s | | eachShapeClass |		eachShapeClass := TRBoxShape new.		eachShapeClass translateTo: 10 @ 20.		self assert: eachShapeClass position = (10 @ 20)	]</body><body package="Roassal2-Trachel-Tests">testPositionDefault	self shapesForPositionTest do: [ :eachShapeClass |		self assert: eachShapeClass new position equals: (0 @ 0)	]</body><body package="Roassal2-Trachel-Tests">testPositionDefaultCenteredSVGPath	| svg rectangle |	svg := TRSVGPath new centeredPath: 'M 0 0 L 30 10 L 20 30 z'.	rectangle := (Rectangle encompassing: (Array with: 0@0 with: 30@10 with: 20@30) ).	self assert: svg position equals: (0 @ 0).	self assert: svg center equals: (0 @ 0).	self deny: svg position = rectangle center.</body><body package="Roassal2-Trachel-Tests">testPositionDefaultSVGPath	| svg rectangle |	svg := TRSVGPath new path: 'M 0 0 L 30 10 L 20 30 z'.	rectangle := (Rectangle encompassing: (Array with: 0@0 with: 30@10 with: 20@30)).	self assert: svg position equals: (0 @ 0).	self assert: svg center equals: rectangle center.	self deny: svg position = rectangle center.</body><body package="Roassal2-Trachel-Tests">testPositionWithFloats	| box |	box := TRBoxShape new.	box translateTo: 1.1234 @ 1.1234.	self assert: box position = (1.1234 @ 1.1234)</body><body package="Roassal2-Trachel-Tests">testScaleBox	| box |	box := TRBoxShape new.	box scaleBy: 2.0.	self assert: box scale equals: 2.0 @ 2.0.</body><body package="Roassal2-Trachel-Tests">testScaleSVG	| svg rectangle scaledRectangle |	svg := TRSVGPath new path: 'M 0 0 L 30 10 L 20 30 z'.	rectangle := svg encompassingRectangle. 	svg scaleBy: 2.0.	scaledRectangle := svg encompassingRectangle.	self assert: svg scale equals: 2.0 @ 2.0.	self deny: rectangle = scaledRectangle.	self assert: rectangle width * 2.0 equals: scaledRectangle width.	self assert: rectangle height * 2.0 equals: scaledRectangle height.</body></methods><methods><class-id>Roassal2.TRShapeTest</class-id> <category>fixed</category><body package="Roassal2-Trachel-Tests">testIsFixed	| c s |	c := TRCanvas new.		s := TRBoxShape new size: 30.	c addShape: s.	s setAsFixed.	self assert: s isFixed.	self assert: (c fixedShapes includes: s).	s remove.	self deny: (c fixedShapes includes: s).</body><body package="Roassal2-Trachel-Tests">testIsFixed02	| c s |	c := TRCanvas new.		s := TRBoxShape new size: 30.	c addShape: s.	s setAsFixed.	s pushFront</body></methods><methods><class-id>Roassal2.TRShapeTest</class-id> <category>removing</category><body package="Roassal2-Trachel-Tests">testRemoving	| t callback shape canvas |	t := nil.	callback := TRRemoveCallback new.	callback block: [ :aShape | t := aShape hash ].		shape := TRBoxShape new size: 20.	shape addCallback: callback.		canvas := TRCanvas new.	self assert: canvas numberOfShapes equals: 0.	canvas addShape: shape.	shape translateBy: 5 @ 5.	self assert: t isNil.		self assert: canvas numberOfShapes equals: 1.	shape remove.	self assert: t equals: shape hash.	self assert: canvas numberOfShapes equals: 0.</body></methods><methods><class-id>Roassal2.TRShapeTest</class-id> <category>bitmap</category><body package="Roassal2-Trachel-Tests">testBitmapIncludesPoint	| s c |	s := TRBitmapShape new form: (TRPlatform current newFormWithExtent: 20 @ 20 depth: 32).	c := TRCanvas new.	c addShape: s.		self assert: (s includesPoint: 0 @ 0).	self assert: (s includesPoint: -9 @ -9).	self assert: (s includesPoint: 9 @ 9).	self deny: (s includesPoint: 19 @ 19).</body><body package="Roassal2-Trachel-Tests">testBitmapWidth	self assert: (TRBitmapShape new form: (TRPlatform current newColorFormWithExtent: 20 @ 20 depth: 32)) width equals: 20</body></methods><methods><class-id>Roassal2.TRShapeTest</class-id> <category>NoShape</category><body package="Roassal2-Trachel-Tests">testAddingNoShape	| c |	c := TRCanvas new.	c addShape: (TRNoShape new).	self assert: c numberOfShapes = 0</body></methods><methods><class-id>Roassal2.TRShapeTest</class-id> <category>composite</category><body package="Roassal2-Trachel-Tests">testBoxTransformation	| canvas box |	canvas := TRCanvas new.	box := TRBoxShape new size: 10.	canvas addShape: box.	"regular rectangle"	self assert: box position equals: 0 @ 0.	self assert: box encompassingRectangle equals: (-5 @ -5 corner: 5 @ 5).	self assert: box encompassingRectangle center equals: box position.	self assert: box width equals: 10.	self assert: box height equals: 10.	self assert: box extent equals: 10 @ 10.	self assert: (box includesPoint: 0 @ 0).	self deny: (box includesPoint: 10 @ 10).	"translated rectangle"	box translateTo: 10@10.	self assert: box position equals: 10 @ 10.	self assert: box encompassingRectangle equals: (5 @ 5 corner: 15 @ 15).	self assert: box encompassingRectangle center equals: box position.	self assert: box width equals: box encompassingRectangle width.	self assert: box height equals: box encompassingRectangle height.	self assert: box extent equals: box encompassingRectangle extent.	self assert: (box includesPoint: 5 @ 5).	self deny: (box includesPoint: 4 @ 10).	"rotated rectangle"	box rotateByDegrees: 45.	self assert: box position equals: 10 @ 10.	self assert: box encompassingRectangle rounded equals: (3 @ 3 corner: 17 @ 17).	self assert: box encompassingRectangle center equals: box position.	self assert: box width equals: box encompassingRectangle width.	self assert: box height equals: box encompassingRectangle height.	self assert: box extent equals: box encompassingRectangle extent.	self assert: (box includesPoint: 10 @ 4).	self deny: (box includesPoint: 6 @ 6).	"scaled rectangle"	box scaleBy: 2.	self assert: box position equals: 10 @ 10.	self assert: box encompassingRectangle rounded equals: (-4 @ -4 corner: 24 @ 24).	self assert: box encompassingRectangle center equals: box position.	self assert: box width equals: box encompassingRectangle width.	self assert: box height equals: box encompassingRectangle height.	self assert: box extent equals: box encompassingRectangle extent.	self assert: (box includesPoint: 10 @ -3).	self deny: (box includesPoint: 0 @ 0).	"translated rectangle"	box translateTo: 20 @ 20.	self assert: box position equals: 20 @ 20.	self assert: box encompassingRectangle rounded equals: (6 @ 6 corner: 34 @ 34).	self assert: box encompassingRectangle center equals: box position.	self assert: box width equals: box encompassingRectangle width.	self assert: box height equals: box encompassingRectangle height.	self assert: box extent equals: box encompassingRectangle extent.	self assert: (box includesPoint: 20 @ 7).	self deny: (box includesPoint: 10 @ 10).	"back to regular rectangle"	box rotateByDegrees: -45.	box scaleBy: 0.5.	self assert: box position equals: 20 @ 20.	self assert: box encompassingRectangle equals: (15 @ 15 corner: 25 @ 25).	self assert: box encompassingRectangle center equals: box position.	self assert: box width equals: box encompassingRectangle width.	self assert: box height equals: box encompassingRectangle height.	self assert: box extent equals: box encompassingRectangle extent.	self assert: (box includesPoint: 16 @ 16).	self deny: (box includesPoint: 10 @ 10).	"set width"	box width: 20.	self assert: box position equals: 20 @ 20.	self assert: box encompassingRectangle rounded equals: (10 @ 15 corner: 30 @ 25).	self assert: box encompassingRectangle center equals: box position.	self assert: box width equals: 20.	self assert: box height equals: 10.	self assert: box extent equals: 20 @ 10.	"set height"	box height: 20.	self assert: box position equals: 20 @ 20.	self assert: box encompassingRectangle rounded equals: (10 @ 10 corner: 30 @ 30).	self assert: box encompassingRectangle center equals: box position.	self assert: box width equals: 20.	self assert: box height equals: 20.	self assert: box extent equals: 20 @ 20.	"set extent"	box extent: 30 @ 30.	self assert: box position equals: 20 @ 20.	self assert: box encompassingRectangle rounded equals: (5 @ 5 corner: 35 @ 35).	self assert: box encompassingRectangle center equals: box position.	self assert: box width equals: 30.	self assert: box height equals: 30.	self assert: box extent equals: 30 @ 30.</body><body package="Roassal2-Trachel-Tests">testEllipseTransformation	| canvas ellipse |	canvas := TRCanvas new.	ellipse := TREllipseShape new size: 10.	canvas addShape: ellipse.	"regular rectangle"	self assert: ellipse position equals: 0 @ 0.	self assert: ellipse encompassingRectangle equals: (-5 @ -5 corner: 5 @ 5).	self assert: ellipse encompassingRectangle center equals: ellipse position.	self assert: ellipse width equals: 10.	self assert: ellipse height equals: 10.	self assert: ellipse extent equals: 10 @ 10.	self assert: (ellipse includesPoint: 0 @ 0).	self deny: (ellipse includesPoint: 10 @ 10).	"translated rectangle"	ellipse translateTo: 10@10.	self assert: ellipse position equals: 10 @ 10.	self assert: ellipse encompassingRectangle equals: (5 @ 5 corner: 15 @ 15).	self assert: ellipse encompassingRectangle center equals: ellipse position.	self assert: ellipse width equals: ellipse encompassingRectangle width.	self assert: ellipse height equals: ellipse encompassingRectangle height.	self assert: ellipse extent equals: ellipse encompassingRectangle extent.	self assert: (ellipse includesPoint: 7 @ 7).	self deny: (ellipse includesPoint: 4 @ 10).	"rotated rectangle"	ellipse rotateByDegrees: 45.	self assert: ellipse position equals: 10 @ 10.	self assert: ellipse encompassingRectangle rounded equals: (3 @ 3 corner: 17 @ 17).	self assert: ellipse encompassingRectangle center equals: ellipse position.	self assert: ellipse width equals: ellipse encompassingRectangle width.	self assert: ellipse height equals: ellipse encompassingRectangle height.	self assert: ellipse extent equals: ellipse encompassingRectangle extent.	self assert: (ellipse includesPoint: 10 @ 7).	self deny: (ellipse includesPoint: 6 @ 6).	"scaled rectangle"	ellipse scaleBy: 2.	self assert: ellipse position equals: 10 @ 10.	self assert: ellipse encompassingRectangle rounded equals: (-4 @ -4 corner: 24 @ 24).	self assert: ellipse encompassingRectangle center equals: ellipse position.	self assert: ellipse width equals: ellipse encompassingRectangle width.	self assert: ellipse height equals: ellipse encompassingRectangle height.	self assert: ellipse extent equals: ellipse encompassingRectangle extent.	self assert: (ellipse includesPoint: 10 @ 0).	self deny: (ellipse includesPoint: 0 @ 0).	"translated rectangle"	ellipse translateTo: 20 @ 20.	self assert: ellipse position equals: 20 @ 20.	self assert: ellipse encompassingRectangle rounded equals: (6 @ 6 corner: 34 @ 34).	self assert: ellipse encompassingRectangle center equals: ellipse position.	self assert: ellipse width equals: ellipse encompassingRectangle width.	self assert: ellipse height equals: ellipse encompassingRectangle height.	self assert: ellipse extent equals: ellipse encompassingRectangle extent.	self assert: (ellipse includesPoint: 20 @ 14).	self deny: (ellipse includesPoint: 10 @ 10).	"back to regular rectangle"	ellipse rotateByDegrees: -45.	ellipse scaleBy: 0.5.	self assert: ellipse position equals: 20 @ 20.	self assert: ellipse encompassingRectangle equals: (15 @ 15 corner: 25 @ 25).	self assert: ellipse encompassingRectangle center equals: ellipse position.	self assert: ellipse width equals: ellipse encompassingRectangle width.	self assert: ellipse height equals: ellipse encompassingRectangle height.	self assert: ellipse extent equals: ellipse encompassingRectangle extent.	self assert: (ellipse includesPoint: 17 @ 17).	self deny: (ellipse includesPoint: 10 @ 10).	"set width"	ellipse width: 20.	self assert: ellipse position equals: 20 @ 20.	self assert: ellipse encompassingRectangle rounded equals: (10 @ 15 corner: 30 @ 25).	self assert: ellipse encompassingRectangle center equals: ellipse position.	self assert: ellipse width equals: 20.	self assert: ellipse height equals: 10.	self assert: ellipse extent equals: 20 @ 10.	"set height"	ellipse height: 20.	self assert: ellipse position equals: 20 @ 20.	self assert: ellipse encompassingRectangle rounded equals: (10 @ 10 corner: 30 @ 30).	self assert: ellipse encompassingRectangle center equals: ellipse position.	self assert: ellipse width equals: 20.	self assert: ellipse height equals: 20.	self assert: ellipse extent equals: 20 @ 20.	"set extent"	ellipse extent: 30 @ 30.	self assert: ellipse position equals: 20 @ 20.	self assert: ellipse encompassingRectangle rounded equals: (5 @ 5 corner: 35 @ 35).	self assert: ellipse encompassingRectangle center equals: ellipse position.	self assert: ellipse width equals: 30.	self assert: ellipse height equals: 30.	self assert: ellipse extent equals: 30 @ 30.</body></methods><methods><class-id>Roassal2.TRShapeTest</class-id> <category>replacing</category><body package="Roassal2-Trachel-Tests">testReplacing01	| c s1 s2 |	c := TRCanvas new.	s1 := TRBoxShape new extent: 30 @ 40; color: Color red.	s2 := TRBoxShape new extent: 50 @ 20; color: Color green.	c addShape: s1.	s1 translateBy: 5 @ 5.		self assert: s1 canvas == c.	self assert: s2 canvas ~~ c.		self assert: s1 extent ~= s2 extent.	self assert: s1 position ~= s2 position.		s1 replaceShapeBy: s2.	self assert: s1 canvas ~~ c.	self assert: s2 canvas == c.		self assert: s1 extent = s2 extent.	self assert: s1 position = s2 position.</body></methods><methods><class-id>Roassal2.RTRotableViewTest</class-id> <category>tests</category><body package="Roassal2-Interactions-Tests">testBasic	event := TRMouseDragging new step: 50 @ 50.	v announce: event.		self assert: event canvas equals: v canvas.		r dragViewWithEvent: event.	self assert: (v canvas camera position closeTo:  -50 @ -50)</body><body package="Roassal2-Interactions-Tests">testCenter	self assert: r center equals: 0 @ 0.	r center: 5 @ 50.	self assert: r center equals: 5 @ 50</body><body package="Roassal2-Interactions-Tests">testElement	self assert: r elements size equals: 0</body><body package="Roassal2-Interactions-Tests">testMouseDragging	| evt |	evt := TRMouseDragging new step: 50 @ 50.	self assert: evt position equals: 0 @ 0</body></methods><methods><class-id>Roassal2.RTRotableViewTest</class-id> <category>running</category><body package="Roassal2-Interactions-Tests">setUp	| e |	super setUp.	v := RTView new.	e := (RTBox new size: 30) element.	v add: e.	e translateBy: 50 @ 50.		r := RTRotableView new.	v @ r.</body></methods><methods><class-id>Roassal2.RTSBFadeInteractionExamples</class-id> <category>examples</category><body package="Roassal2-Builder-Sunburst-Examples">example01		"	self new example01	"		| b |	b := RTSunburstBuilder new.		"This should be called before the explore method"	b interaction addInteraction: RTSBFadeInteraction new.		b radialSpacing: 5.	b angularSpacing: 1.	b color: [ :cls | cls subclasses notEmpty 		ifTrue: [ Color orange ] 		ifFalse: [ Color red ] ].	b explore: RTObject using: #subclasses.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">example02		"	self new example02	"		| b |	b := RTSunburstBuilder new.		b radialSpacing: 5.	b angularSpacing: 1.	b color: [ :cls | cls subclasses notEmpty 		ifTrue: [ Color orange ] 		ifFalse: [ Color red ] ].	b explore: RTObject using: #subclasses.	b view @ RTDraggableView.	"This should'nt work"	b interaction addInteraction: (RTSBFadeInteraction new).	b build.	^ b view</body><body package="Roassal2-Builder-Sunburst-Examples">example03		"	self new example03	"		| b |	b := RTSunburstBuilder new.		b radialSpacing: 5.	b angularSpacing: 1.	b shape current 				color: [ :cls | cls subclasses notEmpty ifTrue: [ Color orange ] ifFalse: [ Color red ] ].	b interaction addInteraction: (RTSBFadeInteraction action: [:cls | Transcript show: cls name; cr.]).		b explore: RTObject using: #subclasses.	b view @ RTDraggableView.	b build.	^ b view</body></methods><methods><class-id>Roassal2.RTRTShorterDistanceAttachPointTest</class-id> <category>tests</category><body package="Roassal2-AttachPoint-Tests">testHorizontalTwoElements	e2 translateBy: 90 @ 0.		self assert: (lineShape startingPointOf: edge) equals: 35 @ 0.	self assert: (lineShape endingPointOf: edge) equals: 55 @ 0.</body><body package="Roassal2-AttachPoint-Tests">testVerticalTwoElements	e2 translateBy: 0 @ 50.			self assert: (lineShape startingPointOf: edge) equals: 0 @ 15.	self assert: (lineShape endingPointOf: edge) equals: 0 @ 35.</body></methods><methods><class-id>Roassal2.RTRTShorterDistanceAttachPointTest</class-id> <category>running</category><body package="Roassal2-AttachPoint-Tests">setUp	super setUp.	view := RTView new.	e1 := RTBox new extent: 70 @ 30; element.	e2 := RTBox new extent: 70 @ 30; element.	lineShape := RTLine new.	lineShape color: Color blue.	lineShape attachPoint: RTShorterDistanceAttachPoint new.	edge := lineShape edgeFrom: e1 to: e2.	view add: e1; add: e2; add: edge.	e2 @ RTDraggable.	e1 @ RTDraggable.</body></methods><methods><class-id>Roassal2.RTDraggableViewTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testDefault	self assert: view canvas camera position = (0 @ 0).</body><body package="Roassal2-Core-Tests">testDraggingOnDraggable	view @ RTDraggableView.	view canvas announce: (TRMouseDragging step: 10 @ 5).	self assert: (view canvas camera position closeTo: (-10 @ -5))</body><body package="Roassal2-Core-Tests">testDraggingOnNotDraggable	view canvas announce: (TRMouseDragging step: 10 @ 5).	self assert: view canvas camera position = (0 @ 0)</body></methods><methods><class-id>Roassal2.RTDraggableViewTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	view := RTView new.	view add: (RTEllipse new width: 40; height: 20) element.</body></methods><methods><class-id>Roassal2.RTMondrianFrameTest</class-id> <category>tests</category><body package="Roassal2-Builder-Mondrian-Tests">testDefault	self assert: RTMondrianFrame new elements isEmpty</body><body package="Roassal2-Builder-Mondrian-Tests">testDefaultDepth	self assert: RTMondrianFrame new depth equals: 1</body><body package="Roassal2-Builder-Mondrian-Tests">testDefaultElements	self assert: RTMondrianFrame new elements isEmpty</body></methods><methods><class-id>Roassal2.RTMultiColoredLineTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| v elem1 elem2 edge|	v := RTView new.	elem1 := (RTEllipse new color: (Color blue alpha:0.6); size:10) elementOn: 1.	elem2 := (RTEllipse new color: (Color blue alpha:0.6); size:10) elementOn: 2.	elem2 translateBy: 200@0.	v add: elem1.	v add: elem2.	edge := RTEdge from:elem1 to:elem2.	v add: (edge + (RTMultiColoredLine new colors: (RTColorPalette qualitative colors: 12 scheme:'Paired'); colorShape)).</body></methods><methods><class-id>Roassal2.RTRoassal2ArchitectureTest</class-id> <category>tests</category><body package="Roassal2-Tests">testNoInteractionViewAreNotSubclassOfRTAbstractInteractionView	| viewInteraction |	viewInteraction := RTInteraction allSubclasses select: [ :c | c name endsWith: 'View' ].	self assert: viewInteraction notEmpty.		"Not sure if RTLinkView has the right name"	viewInteraction := viewInteraction copyWithoutAll: (Array with: RTLinkView with: RTAbstractInteractionView).		"	For debug, inspect the following line:	viewInteraction reject: [ :c | c inheritsFrom: RTAbstractInteractionView ]	"	self assert: (viewInteraction allSatisfy: [ :c | c inheritsFrom: RTAbstractInteractionView ])</body></methods><methods><class-id>Roassal2.RTComposerExample</class-id> <category>icons</category><body package="Roassal2-Builder-Composer-Examples">exampleClassAnalysis2Icon	^ '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jIgUtaLIAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Composer-Examples">exampleClassAnalysisIcon	^ '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'</body><body package="Roassal2-Builder-Composer-Examples">exampleTwoGraphsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAD3UlEQVR4XuXcXSs0YRzHcSf7ArwgR5xJeQdKkQOncqKUUg44IDnwkJwoRc4oT+shD3laFHl+iISSQpH47e267ns0t3u5h5ndMfv91dWs2Z1a12dnpus/c01OMsnPT0oOvwv4IPzwQfgg/PBB+CD88EH4IPzwQfgg/PBB+OGD8EH44YPwQfjhg/BB+OGD8EH44YN8IW1tbTLLwsJCu2xubpbXbWtra/kgQef6+loXFxfKz8/Xy8uLdnd3lZeXp3g8nqyoqFBNTY3a29vV2Nio8vJyra+vq7q6WsvLyyoqKlJBQYH4IAGnsrLSdmpJSYmcX35vb69GRkbU1dVlQcz60tJSufcK83piYoIPEnRyc3Ntp8ZiMbkPRWVlZRocHPwLZG1tTVVVVRofHxcfhB8+CB+EHz4IH4QfPgg/fBA+CD8BgCwsLChKg6tMZ2VlJbD+8QQyNDSknp4e1dXVaWBgQN3d3drc3LR/NzU18aH+ZHt7Wx0dHbbeZvqnuLhYDQ0NGh0dtdWDwEBMMc8sx8bGbJFva2vLliqen59tHYlP8TsGw3ltfqj9/f1qaWmxxdCpqSnxzyH8k3r4MdVfs2xtbbXLmZkZPTw88IuLn+W1g5I3Nzf/NLPebxYXF3V0dKT7+/u3qrC7HP/6nm18EFdM5zsd425mvd/s7+/r8fFRk5OT9ly3urqqg4MD/h4SFgj/HMIH4YPwQfggfBA+CB8k2iB+xhJ8kDSA+OnUdIPU19fbccfs7Kzm5ubEBwkZJB6P28Ln3t6ebe73vjNST3UkSNfenJUgpiJtyt/mVtKlpSXfe0iq75qu8ktWggQdPggfhA/CB+GDpAYJYyzBB/kEJIxO5YPwQfggYYKYOz2CHKnzQXzm6elJ5+fnH47UE4lE8vLyUl7bzs5OyuZl249G+R99PitBzD1QQY7UM7l38c8hX8jh4aHd8/ggPyTm8Hd6esoHiXL4IHwQPggfhA/CB+GD+OsEdXZ2yj1q54OEBGJurDYlk76+PrlH7e87iA+SwT1kY2ND8/PzdrTudeYSH4R/DuGD8EH4IHwQPggfhA/CB+GD8EH8ZHp6Wu7r6c6c9UiApLpWfHJy8t9rxeYzYWzrbs5cdCd3d3d2CrSZq+5cT3fPWQ9jpP7VO+ez8tEaBsK5nm7mqps561H57m8gXp9W8z63t7e6urr69j8cdmkjUzEPNDg+PpZnkEQiIT+1o+9uOzw8jADx+jQJ34cs8xiLKD3cJaycnZ3xH88UxfBB+CD88EH4IPzwQfgg/PBB+CD88EH4IPzwQfjhg/BB+OGD8EH44YPwQfjJaH4Bf732U85mxQ8AAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Composer-Examples">exampleWorldPopulationIcon	^ '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RU5ErkJggg=='</body></methods><methods><class-id>Roassal2.RTComposerExample</class-id> <category>sources</category><body package="Roassal2-Builder-Composer-Examples">exampleClassAnalysis| classesToAnalyze c b b2 b3 b4 es ds |classesToAnalyze := TRShape withAllSubclasses.c := RTComposer new.c gap: 35."-------"b := RTMondrian new.b view: c view.b shape circle	if: [ :cls | cls numberOfMethods &gt; 10 ] fillColor: Color red.b nodes: classesToAnalyze.b edges connectFrom: #superclass.b normalizer normalizeSize: #numberOfLinesOfCode min: 5 max: 15 using: #sqrt.b layout tree.b build.c group: #hierarchy."-------"b2 := RTGrapher new.b2 view: c view.b2 extent: 200 @ 150.ds := RTData new.ds interaction popup.ds points: classesToAnalyze.ds y: [ :cls | cls rtmethods size ].ds barShape rectangle color: Color lightBlue."b2 histogramBarWidth: 5."b2 add: ds.b2 axisX; axisYWithNumberOfTicks: 4.b2 build.c group: #stat."-------"b3 := RTPieBuilder new.b3 view: c view.b3 interaction popup.b3 objects: classesToAnalyze.es := b3 slice: #numberOfLinesOfCode.b3 normalizer 		elements: es;		distinctColor.b3 build.c group: #pie."-------"b4 := RTGrapher new.b4 extent: 290 @ 200.ds := RTData new.ds interaction popup.ds dotShape ellipse size: 15; color: (Color red alpha: 0.3).ds points: classesToAnalyze.ds x: #numberOfMethods.ds y: #numberOfVariables" min: 0 max: 10".ds dotSize: #numberOfLinesOfCode min: 4 max: 20 using: #sqrt.ds highlightIf: [ :cls | (cls numberOfLinesOfCode &gt; 2000) or: [ cls numberOfVariables &gt; 10 ] ] using: #name.b4 add: ds."b4 axisXWithNumberOfTicks: 3.b4 axisYWithNumberOfTicks: 4."c group: #plot."-------"c move: #hierarchy onTheLeftOf: #pie.c move: #stat below: #hierarchy.c move: #plot below: #stat.c nameGroup: #hierarchy as: 'class hierarchy'.c nameGroup: #stat as: '#methods'."c nameGroup: #pie as: '#LOC'."c nameGroup: #plot as: 'NOM x NOA x LOC'.c propagateHighlightToAll.^ c view</body><body package="Roassal2-Builder-Composer-Examples">exampleClassAnalysis2| classesToAnalyze c b b2 b3 b4 es ds |classesToAnalyze := RTShape withAllSubclasses.c := RTComposer new.c gap: 35."-------"b := RTMondrian new.b view: c view.b shape circle	if: [ :cls | cls numberOfMethods &gt; 10 ] fillColor: Color red.b nodes: classesToAnalyze.b edges connectFrom: #superclass.b normalizer normalizeSize: #numberOfLinesOfCode min: 5 max: 15 using: #sqrt.b layout tree.b build.c group: #hierarchy."-------"b2 := RTGrapher new.b2 view: c view.b2 extent: 200 @ 150.ds := RTData new.ds interaction popup.ds points: classesToAnalyze.ds y: [ :cls | cls rtmethods size ].ds barShape rectangle color: Color lightBlue.b2 add: ds."b2 axisX; axisYWithNumberOfTicks: 4."b2 build.c group: #stat."-------"b3 := RTPieBuilder new.b3 view: c view.b3 interaction popup.b3 objects: classesToAnalyze.es := b3 slice: #numberOfLinesOfCode.b3 normalizer 		elements: es;		distinctColor.b3 build.c group: #pie."-------"b4 := RTGrapher new.b4 view: c view.b4 extent: 290 @ 200.ds := RTData new.ds interaction popup.ds dotShape ellipse size: 15; color: (Color red alpha: 0.3).ds points: classesToAnalyze.ds x: #numberOfMethods; y: #numberOfVariables "min: 0 max: 10".ds dotSize: #numberOfLinesOfCode min: 4 max: 20 using: #sqrt.ds highlightIf: [ :cls | (cls numberOfLinesOfCode &gt; 2000) or: [ cls numberOfVariables &gt; 10 ] ] using: #name.b4 add: ds."b4 axisXWithNumberOfTicks: 3.b4 axisYWithNumberOfTicks: 4."b4 build.c group: #plot."-------"c move: #hierarchy onTheLeftOf: #pie.c move: #stat below: #hierarchy.c move: #plot below: #stat.c nameGroup: #hierarchy as: 'class hierarchy'.c nameGroup: #stat as: '#methods'."c nameGroup: #pie as: '#LOC'."c nameGroup: #plot as: 'NOM x NOA x LOC'.c propagateHighlightToAll.^ c view</body><body package="Roassal2-Builder-Composer-Examples">exampleTwoGraphs| force torque composer b ds |force := Array with: (Array with: 'x' with: 3) with: (Array with: 'y' with: 4 ) with: (Array with: 'z' with: 5 ) .torque := Array with: (Array with: 'x' with: 5) with: (Array with: 'y' with: -10) with: (Array with: 'z' with: 8) .composer := RTComposer new."-------------""Force"b := RTGrapher new.b view: composer view.ds := RTData new.ds points: force.ds y: #second.ds barShape width: 30.ds barChartWithBarTitle: #first rotation: 0.b add: ds.b axisX noLabel; noTick.b build.composer group: #force."-------------""Torque"b := RTGrapher new.b view: composer view.ds := RTData new.ds points: torque.ds y: #second.ds barShape width: 30.ds barChartWithBarTitle: #first rotation: 0.b add: ds.b axisX noLabel; noTick.b build.composer group: #torque."-------------""Doing the layout of the graphs"composer move: #force onTheLeftOf: #torque.composer nameGroup: #force as: 'Force'.composer nameGroup: #torque as: 'Torque'.composer setGeneralTitle: 'Wrench'.^ composer view</body><body package="Roassal2-Builder-Composer-Examples">exampleWorldPopulation		| composer v b countries cn grapher ds |	composer := RTComposer new.	v := composer view.		"========"	b := RTMapBuilder new.		b view: v.					countries := RTMapBuilder countriesPopulation select: [ :c | RTSVGPath countries includes: (c at: 1) ].		cn := RTNColorLinearNormalizer		inContext: (countries collect: [:c | c at: 2])		lowColor: (Color r:0.8 g:0.8 b:1)		highColor: (Color r:0 g:0 b:0.3).		b countries: countries named: [ :c | c at: 1 ].	b color: [ :dic | cn rtValue: (dic at: 2) ].	b withPopup: [ :c | (c at: 1) asString, ': ',(((c at: 2) / 1000000 asFloat round: 3) asString, ' Million') ].	b build.	composer group: #worldMap.	"========"	grapher := RTGrapher new.	grapher extent: 600 @ 300.	grapher view: v.	ds := RTData new.	ds barShape width: 5; color: Color blue.	ds points: ((countries reverseSortedAs: #second) copyFrom: 1 to: 50).	ds y: #second.	ds interaction popupText.	grapher add: ds.	grapher axisX noLabel; noTick; title: 'countries'.	grapher axisY noDecimal; labelConversion: [ :aValue | (aValue / 1000000) round: 2]; title: 'Millions'.	grapher build.	composer group: #graph.		"========"	composer move: #graph above: #worldMap.		composer nameGroup: #worldMap as: 'Human distribution across the globe'.	composer nameGroup: #graph as: 'Chart'.	^ v</body></methods><methods><class-id>Roassal2.RTComposerExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Composer-Examples">label	^ 'Composition of Builders'</body></methods><methods><class-id>Roassal2.RTTimelineTest</class-id> <category>tests</category><body package="Roassal2-Builder-Timeline-Tests">testBasic	| b s |	b := RTTimeline new.		s := RTTimelineSet new.	s objects: #(1 2 3 4).	s end: [ :v | v + 1 ].	b add: s.		self assert: b numberOfSets equals: 1.	self assert: b numberOfEvents equals: 4.	self assert: b numberOfLines equals: 4.		b build.		self assert: b numberOfSets equals: 1.	self assert: b numberOfEvents equals: 4.	self assert: b numberOfLines equals: 4.</body><body package="Roassal2-Builder-Timeline-Tests">testBasicWithDifferentIdentifier02	| b s |	b := RTTimeline new.		s := RTTimelineSet new.	s objects: #(1 2 3 4).	s end: [ :v | v + 1 ].	b add: s.		s := RTTimelineSet new.	s objects: #(1 2 3 4 5).	s end: [ :v | v + 2 ].	b add: s.		b build.		self assert: b numberOfSets equals: 2.	self assert: b numberOfEvents equals: 9.	self assert: b numberOfLines equals: 5.</body><body package="Roassal2-Builder-Timeline-Tests">testDefault		self assert: RTTimeline new numberOfSets equals: 0.	self assert: (RTTimeline new build; numberOfSets) equals: 0</body></methods><methods><class-id>Roassal2.RTUMLClassBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-UML-Tests">testBasic	| b |	b := RTUMLClassBuilder new.	b methodShape label		if: [ :method | method selector beginsWith: 'init' ] color: Color green;		if: [ :method | method selector beginsWith: 'with' ] color: Color red.					b attributeShape label		if: [ :attribute | attribute beginsWith: 'a' ] color: Color blue.	b addObjects: RTShape withAllSubclasses.	b treeLayout.	b view setDefaultMenu.	b build.</body><body package="Roassal2-Builder-UML-Tests">testBasic02	| classes classNode b |	classes := OrderedCollection new.	classNode := #('Node').	b := RTUMLClassBuilder new.	b forSelfMadeClasses.	b addObjects: (Array with: classNode).	b build</body></methods><methods><class-id>Roassal2.RTEdgeTest</class-id> <category>tests - building</category><body package="Roassal2-Core-Tests">testBuildingFromAssociations	| view elements |	view := RTView new.	elements := RTBox elementsOn: #(1 2).	view addAll: elements.	RTEdgeBuilder new		view: view;		useAssociations: (Array with: 1 -&gt; 2).		self assert: view numberOfElements = 2.	self assert: view numberOfEdges = 1.	edge := view edges last.	self assert: edge from == view elements first.	self assert: edge to == view elements second.		self assert: edge trachelShape class == TRLineShape.</body><body package="Roassal2-Core-Tests">testBuildingFromObjects	| view objects elements |	view := RTView new.	objects := Array with: RTLine with: RTLine superclass.	elements := (RTBox new size: 20) elementsOn: objects.	view addAll: elements.	RTEdgeBuilder new		view: view;		objects: objects;		connectFrom: #yourself to: #superclass.	self assert: view numberOfElements = 2.	self assert: view numberOfEdges = 1.	edge := view edges last.	self assert: edge from == elements first.	self assert: edge to == elements second.	self assert: edge model notNil.	self assert: edge model equals: elements first model -&gt; elements second model</body></methods><methods><class-id>Roassal2.RTEdgeTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testAddingEdgeAndGroup	| v g |	v := RTView new.	g := RTGroup new.		g		add: el1;		add: el2;		add: edge.	v addAll: g.	v setUpCanvas.	self assert: edge trachelShape notNil.	self assert: edge trachelShape color notNil.	self assert: el1 view equals: v.	self assert: el2 view equals: v.	self assert: edge view equals: v.</body><body package="Roassal2-Core-Tests">testBasic	| v |	v := RTView new.	v		add: el1;		add: el2;		add: edge;		setUpCanvas.	self assert: edge trachelShape notNil.	self assert: edge trachelShape color notNil.	self assert: el1 view equals: v.	self assert: el2 view equals: v.	self assert: edge view equals: v.</body><body package="Roassal2-Core-Tests">testBezierColorAndWidth	| v shape l els |		v := RTView new.	shape := RTEllipse new size: 10; color: (Color red alpha: 0.3).	els := (shape elementsOn: (1 to: 4)).	v addAll: els .	RTHorizontalLineLayout on: v elements.	(els at: 1) translateBy: 0 @ 100.	(els at: 2) translateBy: 100 @ 0.	(els at: 3) translateBy: 200 @ 100.	(els at: 4) translateBy: 300 @ 0.	l := (RTBezierLine new controllingElements: v elements) edgeFrom: els first to: els last.	v add: l.	l shape width: 5.	l shape color: Color green.		self assert: l trachelShape width = 1.	l updateShape.	self assert: l trachelShape width = 5.	self assert: l trachelShape strokePaint = Color green.</body><body package="Roassal2-Core-Tests">testEdgesFromToAll	| shape e someElements lines |	shape := RTLine new.	e := RTElement new.	someElements := RTElement forCollection: (1 to: 5).	lines := shape edgesFrom: e toAll: someElements.	self assert: lines size equals: 5.	self assert: lines first shape == lines second shape</body><body package="Roassal2-Core-Tests">testIncomingAndOutgoingEdges	self assert: (el1 outgoingEdges includes: edge).	self assert: (el2 incomingEdges includes: edge).</body><body package="Roassal2-Core-Tests">testLineColorAndWidth	| v e1 e2 l |	v := RTView new.	e1 := RTElement new.	e2 := RTElement new.	e1 + (RTBox new size: 10).	e2 + (RTBox new size: 10).	l := RTLine edgeFrom: e1 to: e2.	e2 translateBy: 50 @ 40.	l shape width: 10.	l shape color: Color red.	v addAll: (Array with: e1 with: e2 with: l).	self assert: l trachelShape width = 1.	l updateShape.	self assert: l trachelShape width = 10.	self assert: l trachelShape color = Color red.</body><body package="Roassal2-Core-Tests">testOnFromTo	el1 := RTBox element.	el2 := RTBox element.	edge := RTEdge on: 10 from: el1 to: el2.	self assert: edge model = 10.	self assert: edge from == el1.	self assert: edge to == el2</body><body package="Roassal2-Core-Tests">testReconnectingEdge	| e1 e2 e3 e4 l |	e1 := RTBox element.	e2 := RTBox element.	e3 := RTBox element.	e4 := RTBox element.	l := RTLine edgeFrom: e1 to: e2.		self assert: e2 incomingEdges size = 1.	self assert: e1 outgoingEdges size = 1.	self assert: e3 connectedEdges size = 0.	self assert: e4 connectedEdges size = 0.		l to: e3.	self assert: e2 incomingEdges size = 0.	self assert: e3 incomingEdges size = 1.	l from: e4.	self assert: e1 outgoingEdges size = 0.	self assert: e4 outgoingEdges size = 1.</body><body package="Roassal2-Core-Tests">testRemoveEdgeWithSameExtremities	| v e l |	v := RTView new.	e := RTBox element.	l := RTLine edgeFrom: e to: e.	v add: e.	v add: l.		e remove.</body><body package="Roassal2-Core-Tests">testRemoveEdgeWithSameExtremities02	| v e l |	v := RTView new.	e := RTBox element.	l := RTLine edgeFrom: e to: e.	v add: e.	v add: l.	self assert: (e connectedEdges includes: l).	self assert: e connectedEdges size equals: 1.</body><body package="Roassal2-Core-Tests">testRemovingEdge	| v e1 e2 l |	v := RTView new.	e1 := RTBox element.	e2 := RTBox element.	l := RTLine edgeFrom: e1 to: e2.	v add: e1; add: e2; add: l.		self assert: v numberOfEdges = 1.	self assert: e2 incomingEdges size = 1.	self assert: e1 outgoingEdges size = 1.		l remove.		self assert: v numberOfEdges = 0.	self assert: e2 incomingEdges size = 0.	self assert: e1 outgoingEdges size = 0.</body><body package="Roassal2-Core-Tests">testShouldBeUsedInLayout	self assert: RTEdge new isUsedInLayout</body><body package="Roassal2-Core-Tests">testShouldBeUsedInLayout02 	self deny: (RTEdge new notUseInLayout; isUsedInLayout)</body><body package="Roassal2-Core-Tests">testTrachelShape	edge := RTLine edgeFrom: RTBox element to: RTBox element.	self assert: edge trachelShape notNil.	self assert: edge trachelShape class == TRLineShape</body><body package="Roassal2-Core-Tests">testTranslatingNode	| old |	RTView new		add: el1;		add: el2;		add: edge;		setUpCanvas.	old := edge trachelShape from.	self assert: edge trachelShape from = el1 position.	self assert: edge trachelShape to = el2 position.		el1 translateBy: 10 @ 5.	self assert: edge trachelShape from = (old + (10 @ 5)).	self assert: edge trachelShape from = el1 position.	self assert: edge trachelShape to = el2 position.</body><body package="Roassal2-Core-Tests">testromTo	el1 := RTBox elementOn: 4.	el2 := RTBox elementOn: 2.	edge := RTEdge from: el1 to: el2.	self assert: edge model equals: 4-&gt;2.	self assert: edge from == el1.	self assert: edge to == el2</body></methods><methods><class-id>Roassal2.RTEdgeTest</class-id> <category>pushing back</category><body package="Roassal2-Core-Tests">testMoveBehindItsExtremities	| view |	view := RTView new.	view add: el1; add: el2; add: edge.	edge moveBehindItsExtremities.	self assert: view canvas shapes = 		(Array with: edge trachelShape with: el1 trachelShape with: el2 trachelShape)</body><body package="Roassal2-Core-Tests">testMoveBehindItsExtremities2	| v e1 e2 |	v := RTView new.	e1 := RTBox element.	e2 := RTBox element.	v add: e1; add: e2.	edge := RTArrowedLine edgeFrom: e1 to: e2.	v add: edge.	self assert: (edge trachelShape shapes allSatisfy: [ :t | t canvas notNil ]).	e1 translateTo: 50 @ 50. 	edge moveBehindItsExtremities.	self assert: (edge trachelShape shapes allSatisfy: [ :t | t canvas notNil ]).	self assert: edge trachelShape canvas notNil.	self assert: edge trachelShape canvas == v canvas.</body></methods><methods><class-id>Roassal2.RTEdgeTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	el1 := RTBox element.	el2 := RTBox element.	el1 translateTo: 20 @ 20.	el2 translateTo: 60 @ 80.	edge := RTLine edgeFrom: el1 to: el2</body></methods><methods><class-id>Roassal2.RTApplicationMatrixTest</class-id> <category>tests</category><body package="Roassal2-Builder-ApplicationMatrix-Tests">testBasic	| item01 item02 item03 |	item01 := RTAMItem new.	item01 itemName: 'Contract Management'.	item01 row: 'Australia'.	item01 column: 'Corporate Services'.		item02 := RTAMItem new.	item02 itemName: 'Bonus Card Use Watch'.	item02 row: 'Australia'.	item02 column: 'Corporate Services'.	item03 := RTAMItem new.	item03 itemName: 'MailSnake'.	item03 row: 'Australia'.	item03 column: 'Customer Relationship'.		b add: item01; add: item02; add: item03.	self assert: b numberOfItems equals: 3.	b renderIn: RTView new.		self assert: b numberOfItems equals: 3.	self assert: b rows equals: #('Australia').	self assert: b columns equals: #('Corporate Services' 'Customer Relationship').		self 		assert: (b itemsAtRow: 'Australia' andColumn: 'Customer Relationship') 		equals: (Array with: item03).	self 		assert: (b itemsAtRow: 'Australia' andColumn: 'Corporate Services') 		equals: (Array with: item01 with: item02).</body><body package="Roassal2-Builder-ApplicationMatrix-Tests">testEmpty	self assert: b numberOfItems equals: 0.	self assert: b numberOfRows equals: 0.	self assert: b numberOfColumns equals: 0.	self assert: b rows equals: #().	self assert: b columns equals: #().</body><body package="Roassal2-Builder-ApplicationMatrix-Tests">testRender	b renderIn: RTView new</body></methods><methods><class-id>Roassal2.RTApplicationMatrixTest</class-id> <category>running</category><body package="Roassal2-Builder-ApplicationMatrix-Tests">setUp	super setUp.	b := RTApplicationMatrix new.</body></methods><methods><class-id>Roassal2.RTHTML5ExporterExample</class-id> <category>examples</category><body package="Roassal2-Exporter-HTML5-Examples">example01	"	self new example01	"	| e view |	e := RTHTML5Exporter new.	view := RTView new.	view canvas color: Color gray.	RTShape withAllSubclasses		do:			[ :cls | view add: (RTBox elementOn: cls) @ RTPopup @ RTDraggable ].	view @ RTDraggableView.	RTEdgeBuilder new		view: view;		objects: RTShape withAllSubclasses;		connectFrom: #superclass to: #yourself.	RTTreeLayout on: view elements.	e export: view.	^ view</body><body package="Roassal2-Exporter-HTML5-Examples">exportExampleCircleLayoutAndEdges	| e view|	e := RTHTML5Exporter new.	view := RTRoassalExample new perform: #exampleCircleLayoutAndEdges.		e export: view.</body><body package="Roassal2-Exporter-HTML5-Examples">exportExampleClusterLayout	| e view|	e := RTHTML5Exporter new.	view := RTRoassalExample new perform: #exampleClusterLayout.		e export: view.</body><body package="Roassal2-Exporter-HTML5-Examples">exportExampleColoredAndInteractionLabel	| e view|	e := RTHTML5Exporter new.	view := RTGrapherExample new perform: #exampleColoredAndInteractionLabel.		e export: view.</body><body package="Roassal2-Exporter-HTML5-Examples">exportExampleHappyNewYear	| e view|	e := RTHTML5Exporter new.	view := RTAnimationExample new perform: #exampleHappy2014.		e export: view.</body><body package="Roassal2-Exporter-HTML5-Examples">exportExampleLabels	| e view|	e := RTHTML5Exporter new.	view := RTRoassalExample new perform: #exampleLabels.		e export: view.</body><body package="Roassal2-Exporter-HTML5-Examples">exportExampleLazyFormLoading	| e view|	e := RTHTML5Exporter new.	view := RTRoassalExample new perform: #exampleLazyFormLoading.		e export: view.</body></methods><methods><class-id>Roassal2.RTHTML5ExporterExample</class-id> <category>private</category><body package="Roassal2-Exporter-HTML5-Examples">createIndexFor: aCollection	| index stream text |	index := TRPlatform current workingDirectory / 'index.html'.	index exists ifTrue: [ index delete ].	stream := index writeStream.	[ stream nextPutAll: '&lt;!DOCTYPE html&gt;&lt;html&gt;	&lt;head&gt;		&lt;title&gt;Roassal Examples&lt;/title&gt;		&lt;script src="http://code.jquery.com/jquery-latest.min.js"&gt;&lt;/script&gt;		&lt;script type="text/javascript" src="http://objectprofile.com/bjqs.js"&gt;&lt;/script&gt;		&lt;link type="text/css" rel="Stylesheet" href="https://raw.githubusercontent.com/jcobb/basic-jquery-slider/master/bjqs.css" /&gt;		&lt;link type="text/css" rel="Stylesheet" href="http://basic-slider.com/css/main.css" /&gt;				&lt;style type="text/css"&gt;			body{				margin: 0 auto			}			h1{				text-align: center			}			iframe{				border: 1px solid lightblue			}			img{				position: absolute;				top: 50%;				left: 50%;				margin-left: -100px;				width: 200px;				margin-top: -100px;				display: none			}		&lt;/style&gt;	&lt;/head&gt;	&lt;body&gt;&lt;center&gt;		&lt;div id="my-slideshow"&gt;			&lt;ul class="bjqs"&gt;'.		(aCollection sorted: [ :a :b| a selector &lt;= b selector ]) do: [ :met |		text := met methodClass name,'-', met selector asString.		stream nextPutAll: '	&lt;li&gt;	&lt;h1&gt;',text,'&lt;/h1&gt;'.		stream nextPutAll: '	&lt;iframe width="800" height="800" ref="',met methodClass name, '-',met selector,'.html"&gt;&lt;/iframe&gt;	&lt;/li&gt;'.		].	stream nextPutAll: '			&lt;/ul&gt;		&lt;/div&gt;		&lt;img src="http://bradsknutson.com/wp-content/uploads/2013/04/page-loader.gif" style="display: none;"&gt;	&lt;script type="text/javascript"&gt;		$(document).ready( function(){			$("#my-slideshow").bjqs({				height: 900,				width: 1000,				responsive: true,				visiblemarkers: 15,				animspeed: 8000			});		});	&lt;/script&gt;	&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;'. ] ensure: [ stream close ].	^ index.</body></methods><methods><class-id>Roassal2.RTCellLayoutTest</class-id> <category>tests</category><body package="Roassal2-Layouts-Tests">testBasic	| v es |	v := RTView new.	es := RTBox elementsOn: (1 to: 20).	v addAll: es.	RTCellLayout on: es.		self assert: es sixth position x equals: es first position x</body><body package="Roassal2-Layouts-Tests">testOnEmpty	RTCellLayout on: Array new</body></methods><methods><class-id>Roassal2.RTShorterDistanceWithOffsetAttachPointTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	view := RTView new.	box1 := (RTBox new size: 50) elementOn: 1. box1 @ RTDraggable @ RTPopup. view add: box1.	box2 := (RTBox new size: 50) elementOn: 2. box2 @ RTDraggable @ RTPopup. view add: box2.	box1 translateTo: (10@100). box2 translateTo: (200@100).			line := RTLine new.	line attachPoint: RTShorterDistanceWithOffsetAttachPoint new.	view add: (line edgeFrom: box1 to: box2).	view add: (line edgeFrom: box1 to: box2).</body></methods><methods><class-id>Roassal2.RTShorterDistanceWithOffsetAttachPointTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testOffset	| attachPoint |	attachPoint := line attachPoint.	self assert: true</body></methods><methods><class-id>Roassal2.RTAttachPointTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testContinuousCircleAttachPoint	shape withBorderAttachPoint.	self 		assert: (shape startingPointOf: edge) 		equals: (el1 encompassingRectangle topRight 					+ (0 @ (el1 encompassingRectangle extent y / 2)) asIntegerPoint).	self 		assert: ((shape endingPointOf: edge) 					closeTo: (el2 encompassingRectangle topLeft 					+ (0 @ (el2 encompassingRectangle extent y / 2)) asIntegerPoint)).</body><body package="Roassal2-Core-Tests">testContinuousRectangleAttachPoint	shape withBorderAttachPoint.	self 		assert: (shape startingPointOf: edge) 		equals: (el1 encompassingRectangle topRight 					+ (0 @ (el1 encompassingRectangle extent y / 2)) asIntegerPoint).	self 		assert: (shape endingPointOf: edge) 		equals: (el2 encompassingRectangle topLeft 					+ (0 @ (el2 encompassingRectangle extent y / 2)) asIntegerPoint).</body><body package="Roassal2-Core-Tests">testHorizontalAttachPoint	shape withHorizontalAttachPoint.	self 		assert: (shape startingPointOf: edge) 		equals: (el1 encompassingRectangle topRight 					+ (0 @ (el1 encompassingRectangle extent y / 2)) asIntegerPoint).	self 		assert: (shape endingPointOf: edge) 		equals: (el2 encompassingRectangle topLeft 					+ (0 @ (el2 encompassingRectangle extent y / 2)) asIntegerPoint).</body><body package="Roassal2-Core-Tests">testShorterDistancePoint1	shape withShorterDistanceAttachPoint.	"el1 and el2 are on the same horizontal line. el1 is on the left of el2"	self 		assert: (shape startingPointOf: edge) 		equals: (el1 encompassingRectangle topRight 					+ (0 @ (el1 encompassingRectangle extent y / 2))) asIntegerPoint.	self 		assert: ((shape endingPointOf: edge) 					closeTo: (el2 encompassingRectangle topLeft 						+ (0 @ (el2 encompassingRectangle extent y / 2)))).</body><body package="Roassal2-Core-Tests">testShorterDistancePoint2	| p |	shape withShorterDistanceAttachPoint.	"el1 and el2 are on the same horizontal line. el2 is on the left of el1"	p := el1 position.	el1 translateTo: el2 position.	el2 translateTo: p.	self 		assert: ((shape startingPointOf: edge) 					closeTo: (el1 encompassingRectangle topLeft 					+ (0 @ (el1 encompassingRectangle extent y / 2)))).	self 		assert: ((shape endingPointOf: edge) 					closeTo: (el2 encompassingRectangle topRight 					+ (0 @ (el2 encompassingRectangle extent y / 2)))).</body><body package="Roassal2-Core-Tests">testShorterDistancePoint3	| p |	shape withShorterDistanceAttachPoint.	"el1 and el2 are on the same horizontal line. el2 is on the left of el1"	p := el1 position.	el1 translateBy: 0 @ 80.	el2 translateTo: p.	self 		assert: ((shape startingPointOf: edge) 					closeTo: (el1 encompassingRectangle topLeft 					+ ((el1 encompassingRectangle width / 2) @ 0))).	self 		assert: ((shape endingPointOf: edge) 					closeTo: (el2 encompassingRectangle topLeft 					+ ((el2 encompassingRectangle width / 2) 							@ el2 encompassingRectangle width))).</body><body package="Roassal2-Core-Tests">testVerticalAttachPoint	shape withVerticallAttachPoint.	self 		assert: (shape startingPointOf: edge) 		equals: (el1 encompassingRectangle bottomLeft 					+ ((el1 encompassingRectangle extent x / 2) @ 0)) asIntegerPoint.	self 		assert: (shape endingPointOf: edge) 		equals: (el2 encompassingRectangle topLeft 					+ ((el2 encompassingRectangle extent x / 2) @ 0)) asIntegerPoint.</body></methods><methods><class-id>Roassal2.RTAttachPointTest</class-id> <category>initialization</category><body package="Roassal2-Core-Tests">setUp	super setUp.	view := RTView new.	el1 := RTBox new size: 30; elementOn: 1.	el2 := RTBox new size: 30; elementOn: 2.	el1 @ RTDraggable.	el2 @ RTDraggable.		edge := RTEdge from: el1 to: el2.	view addAll: (Array with: el1 with: el2 with: edge).	shape := RTLine new.	edge + shape.	RTHorizontalLineLayout on: (Array with: el1 with: el2)</body></methods><methods><class-id>Roassal2.RTBorderAttachPointTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBoxBorderPoint	| from to via |	from := GRectangle origin: 0 @ 0 corner: 20 @ 10.	to := GRectangle origin: 10 @ 30 corner: 20 @ 40.	via := GLineSegment from: from center to: to center.	self assert: (attachPoint borderPointFrom: from to: to via: via) equals: (65 / 6) @ 10.	self assert: (attachPoint borderPointFrom: to to: from via: via) equals: (85 / 6) @ 30</body><body package="Roassal2-Core-Tests">testGeometryBox	el := RTBox new		width: 20;		height: 30;		element.	el translateTo: 20 @ 30.	self		assert: (attachPoint geometryFor: el)		equals: (GRectangle origin: 10 @ 15 corner: 30 @ 45)</body><body package="Roassal2-Core-Tests">testGeometryEllipse	el := RTEllipse new		width: 20;		height: 30;		element.	el translateTo: 20 @ 30.	self assert: (attachPoint geometryFor: el) equals: (GEllipse center: 20 @ 30 a: 10 b: 15)</body><body package="Roassal2-Core-Tests">testGeometryRoundedBox	el := RTRoundedBox new		width: 80;		height: 40;		borderRadius: 10;		element.	self		assert: (attachPoint geometryFor: el)		equals:			(GRoundedRectangle				rectangle: (GRectangle origin: -40 @ -20 corner: 40 @ 20)				borderRadius: 10)</body></methods><methods><class-id>Roassal2.RTBorderAttachPointTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	attachPoint := RTBorderAttachPoint new</body></methods><methods><class-id>Roassal2.RTGrapherBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testCentralPoint	| ds  |	b := RTGrapher new.	ds := RTData new.	ds interaction popupText.	ds points: #(1 2 3).	ds x: #yourself.	ds y: #yourself.	b add: ds.	b minY: -2.		b build.		self assert: b centralPoint equals: 0 @ -80.	self assert: b getAxisX fromPoint equals: 0 @ -80</body><body package="Roassal2-Builder-Grapher-Tests">testDefault	self deny: b isXAxisDefined.	self deny: b isYAxisDefined.</body><body package="Roassal2-Builder-Grapher-Tests">testGetMaxNumberOfPoints	| ds |	self assert: b getMaxNumberOfPoints equals: 0.		ds := RTData new.	ds points: (1 to: 5).	b add: ds.		self assert: b getMaxNumberOfPoints equals: 5.		ds := RTData new.	ds points: (1 to: 10).	b add: ds.	self assert: b getMaxNumberOfPoints equals: 10.</body><body package="Roassal2-Builder-Grapher-Tests">testIgnoringEmptyDataSets	| ds |	self assert: b numberOfDataSets equals: 0.		ds := RTData new.	b add: ds.	self assert: b numberOfDataSets equals: 0.		ds := RTData new.	ds points: #(1).	b add: ds.	self assert: b numberOfDataSets equals: 1.</body><body package="Roassal2-Builder-Grapher-Tests">testIsAxisDefined	b := RTGrapher new.	b add: (RTData new points: #(1 2 3); x: #yourself; y: #yourself).		self deny: b isXAxisDefined.	self deny: b isYAxisDefined.		b axisXWithNumberOfTicks: 2.	self assert: b isXAxisDefined.	self deny: b isYAxisDefined.	b axisY.	self assert: b isXAxisDefined.	self assert: b isYAxisDefined.	b build.	self assert: b getAxisX step equals: 3 / 2.</body><body package="Roassal2-Builder-Grapher-Tests">testStepOnXAxis	b := RTGrapher new.	b add: (RTData new points: #(1 2 3); yourself).	b axisXWithNumberOfTicks: 2.	b build.	self assert: b getAxisX step equals: 3 / 2.</body><body package="Roassal2-Builder-Grapher-Tests">testTickOnXAxis	| ds1 result expected |	b := RTGrapher new.	ds1 := RTData new.	ds1 points: (1 to: 10).	b add: ds1.	b axisY noLabel; noTick.	b axisX noLabel.	b build.		result := (b view elements collect: #position) asArray collect: #asIntegerPoint.	expected := ((Array new: 19) at: 1 put: ((0@0)); at: 2 put: ((0@ -200)); at: 3 put: ((0@0)); at: 4 put: ((300@0)); at: 5 put: ((0@2)); at: 6 put: ((75@2)); at: 7 put: ((150@2)); at: 8 put: ((225@2)); at: 9 put: ((300@2)); at: 10 put: ((30@ -20)); at: 11 put: ((60@ -40)); at: 12 put: ((90@ -60)); at: 13 put: ((120@ -80)); at: 14 put: ((150@ -100)); at: 15 put: ((180@ -120)); at: 16 put: ((210@ -140)); at: 17 put: ((240@ -160)); at: 18 put: ((270@ -180)); at: 19 put: ((300@ -200)); yourself).	self assert: result equals: expected.</body><body package="Roassal2-Builder-Grapher-Tests">testTickOnXAxisWithLog	| ds1 result expected |	b := RTGrapher new.	ds1 := RTData new.	ds1 points: (1 to: 10).	ds1 xLog.	b add: ds1.	b axisY noLabel; noTick.	b axisX noLabel.	b build.		result := (b view elements collect: #position) asArray collect: #asIntegerPoint.	expected := ((Array new: 19) at: 1 put: ((0@0)); at: 2 put: ((0@ -200)); at: 3 put: ((0@0)); at: 4 put: ((300@0)); at: 5 put: ((0@2)); at: 6 put: ((129@2)); at: 7 put: ((204@2)); at: 8 put: ((258@2)); at: 9 put: ((300@2)); at: 10 put: ((86@ -20)); at: 11 put: ((137@ -40)); at: 12 put: ((173@ -60)); at: 13 put: ((201@ -80)); at: 14 put: ((224@ -100)); at: 15 put: ((243@ -120)); at: 16 put: ((260@ -140)); at: 17 put: ((274@ -160)); at: 18 put: ((288@ -180)); at: 19 put: ((300@ -200)); yourself).	self assert: result equals: expected.</body><body package="Roassal2-Builder-Grapher-Tests">testTickOnYAxis	| ds1 result expected |	b := RTGrapher new.	ds1 := RTData new.	ds1 points: (1 to: 10).	ds1 yLog.	b add: ds1.	b axisY noLabel; numberOfTicks: 10.	b axisX noLabel; noTick.	b build.		result := (b view elements collect: #position) asArray collect: #asIntegerPoint.	expected := ((Array new: 25) at: 1 put: ((0@0)); at: 2 put: ((0@ -200)); at: 3 put: ((-2@0)); at: 4 put: ((-2@ -57)); at: 5 put: ((-2@ -91)); at: 6 put: ((-2@ -115)); at: 7 put: ((-2@ -134)); at: 8 put: ((-2@ -149)); at: 9 put: ((-2@ -162)); at: 10 put: ((-2@ -173)); at: 11 put: ((-2@ -183)); at: 12 put: ((-2@ -192)); at: 13 put: ((-2@ -200)); at: 14 put: ((0@0)); at: 15 put: ((300@0)); at: 16 put: ((30@ -57)); at: 17 put: ((60@ -91)); at: 18 put: ((90@ -115)); at: 19 put: ((120@ -134)); at: 20 put: ((150@ -149)); at: 21 put: ((180@ -162)); at: 22 put: ((210@ -173)); at: 23 put: ((240@ -183)); at: 24 put: ((270@ -192)); at: 25 put: ((300@ -200)); yourself).	self assert: result equals: expected.</body><body package="Roassal2-Builder-Grapher-Tests">testWithStrangeValues	| graphBuilder ds |	graphBuilder := RTGrapher new.	graphBuilder extent: 300 @ 200.	ds := RTData new.	ds dotShape rectangle size: 0.	ds points: #(1 3 7 0 6).	ds y: [ :c | c asInteger ].	ds barShape rectangle 	   width: 10;	   color: Color blue.	graphBuilder add: ds.	graphBuilder axisX noLabel; noTick.	graphBuilder axisY noLabel; noTick.	graphBuilder build.	self assert: (graphBuilder view elements collect: #position) asArray equals: ((Array new: 9) at: 1 put: ((0@0)); at: 2 put: ((0@ -200)); at: 3 put: ((0@0)); at: 4 put: ((300@0)); at: 5 put: ((60@ -12.5)); at: 6 put: ((120@ -37.5)); at: 7 put: ((180@ -87.5)); at: 8 put: ((240@0.0)); at: 9 put: ((300@ -75.0)); yourself)</body><body package="Roassal2-Builder-Grapher-Tests">testWithStrangeValues02	| graphBuilder ds |	graphBuilder := RTGrapher new.	graphBuilder extent: 300 @ 200.	ds := RTData new.	ds dotShape rectangle size: 0.	ds points: #(1 3 7 0 6).	ds y: [ :c | c asInteger ].	ds barShape rectangle 	   width: 10;	   color: Color blue.	graphBuilder add: ds.	graphBuilder axisX noLabel; noTick.	graphBuilder axisY noLabel; noTick.	graphBuilder build.		self assert: (graphBuilder view elements collect: #position) asArray equals:  ((Array new: 9) at: 1 put: ((0@0)); at: 2 put: ((0@ -200)); at: 3 put: ((0@0)); at: 4 put: ((300@0)); at: 5 put: ((60@ -12.5)); at: 6 put: ((120@ -37.5)); at: 7 put: ((180@ -87.5)); at: 8 put: ((240@0.0)); at: 9 put: ((300@ -75.0)); yourself).		"This was true when there was no offset for the bars. ""	self assert: (graphBuilder view elements collect: #position) asArray equals: ((Array new: 9) at: 1 put: ((0@0)); at: 2 put: ((0@ -200)); at: 3 put: ((0@0)); at: 4 put: ((300@0)); at: 5 put: ((50@ -12.5)); at: 6 put: ((100@ -37.5)); at: 7 put: ((150@ -87.5)); at: 8 put: ((200@0.0)); at: 9 put: ((250@ -75.0)); yourself)"</body></methods><methods><class-id>Roassal2.RTGrapherBuilderTest</class-id> <category>running</category><body package="Roassal2-Builder-Grapher-Tests">setUp	super setUp.	b := RTGrapher new</body></methods><methods><class-id>Roassal2.RTGridViewTest</class-id> <category>tests</category><body package="Roassal2-Tests">testBasic	| gridView |	gridView := RTGridView new.	self assert: gridView gridSize equals: RTGridView defaultGridSize.	self assert: gridView color equals: RTGridView defaultColor.</body></methods><methods><class-id>Roassal2.RTComposedShapeExample</class-id> <category>icons</category><body package="Roassal2-ExampleBrowser-Examples">exampleEdgesFromComposedShapeIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleFlagsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABKUlEQVR4XuXVQQrAIAwAwfz/0yooBg96EhRmi5cWSukQEqX4/VT4v8AH8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAf58yMjT//kcdYH7U5ehxf4ID6ID+KD+CD+UveX+rsJiXmOE7IbBH9CfBAfxAfxQfyl7i91Px/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/K5UAYIdyaudpALHAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleHorizontalCompositeShape1Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABTklEQVR4XuXZsQ3EIAxA0YzOJmyB6LIJA8AOzl2ZSCelNKf3JSp3eTIUOa7Lb6cO/xP4IH4+iA/i54P4IH4+iA/i54P4IH4+iJ8P4oP4+SA+iJ8P4oP4+SA+iJ8P4ueD+CB+PogP4ueD+CB+PogP4ueD+PkgPoifD+KD+PkgPoifD+KD+Pkgfj6ID/LaeZ6PkznzQb6VUh4nc+aD/PhAc85Ya0XGzAfxN8R/Q/w35KUxRtxP5swH8a+s/UFaa9F7j4yZD+JvyH4gtda4n8yZD+LnX1n+leWD+CA+iA/iP+r+o+5viA/ig2wA4v8P8TfE3xA/H8QH8fNBfBA/H8QH8fNBfBA/H8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80H+sg++wcJAXG1TJgAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleInnerShapesIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleNamedPopupIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAB3ElEQVR4XuXVz8pBQRjAYfdsIyllaeMCLFwF+ZNEFrJRRJYWNhaUnQWvz1mYDDfw1fMrdV6Z05zzNCk9n37/qZL/CnwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H8QH8fNBfBA/H8TPB/FBfrvdbtHv9+M9b7fbWC6XaT4cDjGbzeJzzXg8zn5/Op3SfDweo/juPV+v1xiNRmler9cxGAzSPJ1OY7FYxPd+ijWf96FOSLPZzB682+1mc6PRSHOn04larZbmzWYT1Wo1zfV6/Vkul7P17XY7A2i1WmkusCuVSnzv53Wf4uOdkNVqlT34ZDJ5fs77/T56vV72wi6XS5p3u10Mh8M0Px6P7MS9T8n7+nw+Z/cr1s/n8/jez2sfcb/fw/8P8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQH8R/BT6Inw/ig/j5ID6Inw/ig/j5ID6Inw/i54P4IH4+iA/i54P4IH4+iA/i54P4+SA+iJ8P4oP4+SA+iJ8P4oP4+SB+v/0B+zt+o1wgBuoAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleNesting1Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACGUlEQVR4XuXa3Y3CMBBFYVqlSAqhgmgftoCtICveyY8nHsf2dyWElNgx4uSSmWse6+qrJz38r8AH4ssH4gPx5QPxgfjygfhAfPlAfCC+fCC+fCA+EF8+EB+ILx+ID8SXD8QH4ssH4ssH4gPx5QPxgfjygfhAfPlAfCC+5gOyLMvhq2RsZE7k+lfW6R7I8/m3vl6/m+8lYyNzIte/sk73QD4f9v3+2XwvGRuZE7n+lXV8h/gO8R3iO8R3iO+QKR1Sy0175ejRnJK7vMY6UwHZuvv2vqijOSV3eY11/E7d79R9TR2dZEUo0XN7Y0qPDVn2ZpW/0XN7Y0qPDVn2ZpW/0XN7Y0qP+Q5JcMh0z5DRHTIdkJoOqb0H8W2t7L5iKodkAGnd6HXnkNY7bn4fcvIO9IH4nboPxNcA0UnruCMjGmn5c5v+UG8dd2REIy2byPSHeuu4IyMaadlE3uKQMzt0Jc1cxh74XU3kLQ45s0NX0sxl7IHf1UROUWXd+S8RH0gwsvGBdOKQ0ZKB6R3iA/HlA/GBnIhOMqKKyD9UeCCZUUVkR5IHkhlVRHYk/WdIxdI1EpH4DkksXSMRie+QziIS3yGdRSS+QzqLSPyyt7OIxAfiywfiA/HlA/GB+PKB+PKB+EB8+UB8IL58ID4QXz4QH4gvH4gvH4gPxJcPxAfiywfiA/HlA/GB+PKB+PKB+EB8+UB8IL58IBPqH65mwUlrOttkAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleNesting2Icon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleRelayoutIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABs0lEQVR4XuXUP2rCUBzAccGD9BA5UC8ihGQQXCSDm4ObWXMEUSEiurjoJIQco/Cz9YGUQqfS0pbPF8L7wxvC+5AMbje/v9TAvwIfxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx+xcgef72coP35772QX6pa1zjOb/GZyDL5TIe55qmSfO2bcMH+cEWsYinfPEBZDgs4wGy3W7TPMuyNFZVFZfLJSaTSex2u6jrOu7n9vt9bDabOJ1OaT0ej8MH+aZf1mj0ki76eDzG+XyO9Xqdxq7rYjqdxnw+T5ddlmXcv5iiKNLearWKvu8TyuFwiNlsFj6Inw/ig/j5ID6Inw/ig/j5IH4+iA/i54P4IH4+iA/i54P4IH4+iJ8P4oP4+SA+iJ8P4oP4+SA+iJ8P4ueD+CB+PogP4ueD+CB+PogP4ueD+PkgPoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggfl/rFeR5agGSyks/AAAAAElFTkSuQmCC'</body></methods><methods><class-id>Roassal2.RTComposedShapeExample</class-id> <category>sources</category><body package="Roassal2-ExampleBrowser-Examples">exampleEdgesFromComposedShape	| v shape es |	v := RTView new.	v @ RTDraggableView.	shape := RTCompositeShape new.	shape add: RTLabel new.	shape add: RTBox new.	es := shape elementsOn: RTShape withAllSubclasses.	v addAll: es.	RTEdgeBuilder new		view: v;		objects: RTShape withAllSubclasses;		shape:			(RTArrowedLine new				color: Color black;				attachPoint:					(RTShorterDistanceAttachPointAndCompositeShape new						composedShapeSelection: #second));		connectFrom: #superclass to: #yourself.	RTNest new		for: es		inShape: #second		add:			[ :group :model | 			group				addAll:					((RTBox new color: Color blue) elementsOn: model rtmethods).			RTGridLayout on: group ].	RTHorizontalTreeLayout on: es.	es @ RTPopup @ RTDraggable.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleFlags| view shape els flags |view := RTView new.shape := RTCompositeShape new.shape add: (RTBox new color: #first; height: 20; width: 15).shape add: (RTBox new color: #second; height: 20; width: 15) translateBy: 15 @ 0.shape add: (RTBox new color: #third; height: 20; width: 15) translateBy: 30 @ 0.flags := Dictionary new.flags at: 'France' put: (Array with: Color blue with: Color white with: Color red).flags at: 'Belgium' put: (Array with: Color black with: Color yellow with: Color red).flags at: 'Romania' put: (Array with: Color blue with: Color yellow with: Color red).flags at: 'Italia' put: (Array with: Color green with: Color white with: Color red).	els := shape elementsOn: flags values.els @ RTDraggable.view addAll: els.RTGridLayout new on: els.^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleHorizontalCompositeShape1| view shape els |view := RTView new.shape := RTCompositeShape new				add: (RTBox new color: Color gray; size: 20);				add: (RTLabel new text: '+');				horizontal;				yourself.els := shape elementsOn: (1 to: 20).els @ RTDraggable.view addAll: els.RTGridLayout new on: els.^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleInnerShapes	| v shape es methodElements |	v := RTView new.	v @ RTDraggableView.	shape := RTCompositeShape new.	shape add: RTLabel new.	shape add: (RTBox new color: (Color blue alpha: 0.3)).	shape vertical.		es := shape elementsOn: RTShape withAllSubclasses.	v addAll: es.	es do: [ :e | 		methodElements := RTBox new elementsOn: e model rtmethods.		RTGridLayout on: methodElements.		v addAll: methodElements.		RTNest new			on: e 			inShape: #second 			nest: methodElements.	].	RTFlowLayout on: es.	es @ RTDraggable.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleNamedPopup| v es |v := RTView new.es := RTLabel elementsOn: (1 to: 10).v addAll: es.es @ (RTPopup new 	named: #yourself	background: Color blue	group: [ :group :el |   		group addAll: (RTEllipse elementsOn: (1 to: el model)).		RTWeightedCircleLayout new			initialRadius: 50;			on: group.		]).RTHorizontalLineLayout on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleNesting1	| v es |	v := RTView new.	es := RTBox elementsOn: RTShape withAllSubclasses.	v addAll: es.	RTNest new		for: es		add: [ :group :model | 			group				addAll: ((RTBox new color: Color blue) elementsOn: model rtmethods).			RTGridLayout on: group ].	RTFlowLayout new on: es.	es @ RTPopup @ RTDraggable.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleNesting2| v shape es |v := RTView new.shape := RTCompositeShape new.shape add: RTLabel new.shape add: RTBox new.es := shape elementsOn: RTShape withAllSubclasses.v addAll: es.RTNest new	for: es	inShape: #second	add: [ :group :model | 		group addAll: ((RTBox new color: Color blue) elementsOn: model rtmethods).		RTGridLayout on: group.	].RTFlowLayout new on: es.es @ RTPopup @ RTDraggable.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleRelayout	| s b1 b2 b3 view e |	s := RTCompositeShape new.	b1 := RTBox new color: Color green.	b2 := RTBox new color: Color blue; size: 20.	b3 := RTLabel new.	s add: b1.	s add: b2.	s add: b3.	s horizontal.	s setAutomaticRelayout.		e := s elementOn: 'click to expand'.	view := RTView new.	view add: e.		e @ RTDraggable.	e @ RTPopup.		e when: TRMouseClick do: [ :ev |		e trachelShape shapes second extent: 45 @ 45.		e trachelShape shapes third text: 'hello'.		view signalUpdate.	].	^ view</body></methods><methods><class-id>Roassal2.RTComposedShapeExample</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'Composite shapes'</body></methods><methods><class-id>Roassal2.RTSVGStringConverterTest</class-id> <category>tests</category><body package="Roassal2-Exporter-SVG-Tests">testBasic	self assert: (RTSVGStringConverter new convertString: 'Hello world') equals: 'Hello&amp;#160;world'</body></methods><methods><class-id>Roassal2.RTConstraintTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	shape1 := (RTBox new size: 50) element.	shape2 := (RTBox new size: 10) element.</body><body package="Roassal2-Core-Tests">testStickAbove	RTConstraint new fix: shape1; movable: shape2; above; stick.	self assert: shape1 center = (0 @ 0).	self assert: shape2 center = (0 @ -30).		shape1 translateBy: 10 @ 10.	self assert: shape1 center = (10 @ 10).	self assert: shape2 center = (10 @ -20).</body><body package="Roassal2-Core-Tests">testStickBelow	RTConstraint new		fix: shape1;		movable: shape2;		below;		stick.	self assert: shape1 center = (0 @ 0).	self assert: shape2 center = (0 @ 30).	shape1 translateBy: 10 @ 10.	self assert: shape1 center = (10 @ 10).	self assert: shape2 center = (10 @ 40).</body><body package="Roassal2-Core-Tests">testStickToTheCenter	RTConstraint new		fix: shape2;		movable: shape1;		center;		stick.			self assert: shape1 center = (0 @ 0).	self assert: shape2 center = (0 @ 0).	shape2 translateBy: 10 @ 15.	self assert: shape1 center = (10 @ 15).	self assert: shape2 center = (10 @ 15).</body></methods><methods><class-id>Roassal2.RTIntrospectionTest</class-id> <category>tests</category><body package="Roassal2-Exporter-HTML5-Tests">testHighlightable	| e |	e := RTElement new.	self deny: (e hasInteraction: RTHighlightable).	e @ RTHighlightable.	self assert: (e hasInteraction: RTHighlightable).</body><body package="Roassal2-Exporter-HTML5-Tests">testPopup	| e |	e := RTElement new.	self deny: (e hasInteraction: RTPopup).	e @ RTPopup.	self assert: (e hasInteraction: RTPopup).</body><body package="Roassal2-Exporter-HTML5-Tests">testPopup2	| e aPopup |	e := RTElement new.	aPopup := RTPopup text: 'zork'.	e @ aPopup.	self assert: (e getInteractionForClass: RTPopup) == aPopup.</body></methods><methods><class-id>Roassal2.RTMapLocationExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Map-Examples">label	^ 'Map location'</body></methods><methods><class-id>Roassal2.RTMapLocationExample</class-id> <category>icons</category><body package="Roassal2-Builder-Map-Examples">exampleAirportsIcon	^ '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'</body><body package="Roassal2-Builder-Map-Examples">exampleSeismOnEarthIcon	^ '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'</body></methods><methods><class-id>Roassal2.RTTextBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-TextBuilder-Tests">fixmeTestWordHighlight	| element text |	builder := RTTextBuilder new.	text := 'hello'.	builder interaction highlightColored: Color blue.	builder addText: text.	element := builder view elementFromModel: text.	self assert: element shape color = element shape defaultColor.	element announce: (TRMouseEnter new shape: element trachelShape).	self assert: element shape color = Color blue.	element announce: (TRMouseLeave new shape: element trachelShape).	self assert: element shape color = element shape defaultColor.</body><body package="Roassal2-Builder-TextBuilder-Tests">testAdditionalInformation	| text trigger elHello elWorld |	text := 'hello world'.	trigger := false.	builder wordHook: [ :anElement :anInterval | 								anElement model = 'hello' 									ifTrue: [ anElement attributeAt: #myValue put: 'value' ] ]. 	builder wordInteraction 				when: TRMouseClick 				do: [ :event | (event element hasAttribute: #myValue) 										ifTrue: [ trigger := true ] ].	builder addText: text.	elHello := builder view elementFromModel: 'hello'.	elWorld := builder view elementFromModel: 'world'.		self assert: (elHello hasAttribute: #myValue).	self deny: (elWorld hasAttribute: #myValue).	self assert: (elHello attributeAt: #myValue) = 'value'.	self deny: trigger.	elHello announce: (TRMouseClick new shape: elHello trachelShape).	self assert: trigger.		trigger := false.	self deny: trigger.	elWorld announce: (TRMouseClick new shape: elWorld trachelShape).	self deny: trigger.</body><body package="Roassal2-Builder-TextBuilder-Tests">testClickableWord	| t element |	t := false.	 	builder wordInteraction 					when: TRMouseClick do: [ :event | t := true ].	builder addText: 'hello world'.	self deny: t.		element := builder view elementFromModel: 'hello'.	element announce: TRMouseClick.	self assert: t</body><body package="Roassal2-Builder-TextBuilder-Tests">testExamples	RTTextBuilderExamples selectors do: [ :eachSelector |		(RTTextBuilderExamples new perform: eachSelector) build.	]</body><body package="Roassal2-Builder-TextBuilder-Tests">testHookIntervals	| text words intervals arr |	words := OrderedCollection new.	intervals := OrderedCollection new.	text := 'my whole text', String cr, 'a b c'.	builder wordHook: [ :anElement :anInterval | 		words add: anElement model.		intervals add: anInterval. ].	builder addText: text.	arr := OrderedCollection new.	arr add: 'my'; add: ' '; add: 'whole'; add: ' '; add: 'text'; add: 'a'; add: ' '; add: 'b'; add: ' '; add: 'c'.	self assert: words asArray equals: arr asArray.	arr := OrderedCollection new.	arr add: (1 to: 2); add: (3 to: 3); add: (4 to: 8); add: (9 to: 9); add: (10 to: 13) ; add: (15 to: 15); add: (16 to: 16); add: (17 to: 17); 		add: (18 to: 18); add: (19 to: 19).	self 		assert: intervals asArray 		equals: arr asArray</body><body package="Roassal2-Builder-TextBuilder-Tests">testOpening	builder open close</body><body package="Roassal2-Builder-TextBuilder-Tests">testOpeningOnEmpty	self assert: builder view numberOfElements = 0</body><body package="Roassal2-Builder-TextBuilder-Tests">testOpeningOnMultilineText	| elements text |	text := 'helloworld'.	builder addText: text.	elements := builder view elements.	self assert: elements size = 3.	self assert: (elements anySatisfy: [ :el | el model = text ]).	self assert: (elements anySatisfy: [ :el | el model = 'hello' ]).	self assert: (elements anySatisfy: [ :el | el model = 'world' ]).</body><body package="Roassal2-Builder-TextBuilder-Tests">testOpeningOnMultilineText2	| elements text |	text := 'hello worldhola mundo'.	builder addText: text.	elements := builder view elements.	self assert: elements size = 7.	self assert: (elements anySatisfy: [ :el | el model = text ]).	self assert: (elements anySatisfy: [ :el | el model = 'hello' ]).	self assert: (elements anySatisfy: [ :el | el model = 'world' ]).	self assert: (elements anySatisfy: [ :el | el model = 'hola' ]).	self assert: (elements anySatisfy: [ :el | el model = 'mundo' ]).</body><body package="Roassal2-Builder-TextBuilder-Tests">testOpeningOnMultilineText2Position	| spaces text |	text := 'hello worldhola mundo'.	builder addText: text.	spaces := builder view elements select: [ :each | each model = ' ' ].		self assertModel: 'hello' position: #top equals: 'world' position: #top.	self assertModel: 'hola' position: #top equals: 'mundo' position: #top.	self assertModel: 'hello' position: #left equals: 'hola' position: #left.	self assertModel: 'hello' position: #bottom equals: 'hola' position: #top.	self assertModel: text position: [:rectangle | rectangle topLeft + 5 ] equals: 'hello' position: #topLeft.</body><body package="Roassal2-Builder-TextBuilder-Tests">testOpeningOnMultilineText3	| text |	text := (RTTextBuilderTest &gt;&gt; #testOpeningOnMultilineText3)		sourceCode.	builder addText: text.	builder open close</body><body package="Roassal2-Builder-TextBuilder-Tests">testOpeningOnText	builder addText: 'hello world'.	self assert: builder view numberOfElements = 4.		builder addText: 'hello world'.	self assert: builder view numberOfElements = 8.</body><body package="Roassal2-Builder-TextBuilder-Tests">testOpeningOnText2	| elements text |	text := 'hello world'.	builder addText: text.	elements := builder view elements.	self assert: elements size = 4.	self assert: (elements anySatisfy: [ :el | el model = text ]).	self assert: (elements anySatisfy: [ :el | el model = 'hello' ]).	self assert: (elements anySatisfy: [ :el | el model = ' ' ]).	self assert: (elements anySatisfy: [ :el | el model = 'world' ]).</body><body package="Roassal2-Builder-TextBuilder-Tests">testWordHighlight	| element text |	builder := RTTextBuilder new.	text := 'hello world'.	builder wordInteraction highlightColored: Color blue.	builder addText: text.	element := builder view elementFromModel: 'hello'.	self assert: element trachelShape color = element shape defaultColor.	element announce: (TRMouseEnter new shape: element trachelShape).	self assert: element trachelShape color = Color blue.	element announce: (TRMouseLeave new shape: element trachelShape).	self assert: element trachelShape color = element shape defaultColor.</body></methods><methods><class-id>Roassal2.RTTextBuilderTest</class-id> <category>running</category><body package="Roassal2-Builder-TextBuilder-Tests">setUp	super setUp.	builder := RTTextBuilder new</body></methods><methods><class-id>Roassal2.RTTextBuilderTest</class-id> <category>accessing</category><body package="Roassal2-Builder-TextBuilder-Tests">elementFromModel: anObject 	^ builder view elementFromModel: anObject</body><body package="Roassal2-Builder-TextBuilder-Tests">encompassingRectangleFromModel: anObject	^ (self elementFromModel: anObject) encompassingRectangle</body></methods><methods><class-id>Roassal2.RTTextBuilderTest</class-id> <category>asserting</category><body package="Roassal2-Builder-TextBuilder-Tests">assertModel: anObject1 position: aSymbol1 equals: anObject2 position: aSymbol2 	| position1 position2 |	position1 := aSymbol1 cull: (self encompassingRectangleFromModel: anObject1).	position2 := aSymbol2 cull: (self encompassingRectangleFromModel: anObject2).	self assert: (((position1 isNumber) and: [ position2 isNumber ])					or: [ (position1 isPoint) and: [ position2 isPoint ] ]).	position1 isNumber		ifTrue: [ self assert: (position1 - position2) abs &lt;= 1 ]		ifFalse: [ self assert: (position1 - position2) abs &lt;= (1 @ 1) ].</body></methods><methods><class-id>Roassal2.TRMouseDraggingTest</class-id> <category>tests</category><body package="Roassal2-Trachel-Tests">testPositionFromCamera	| evt |	evt := TRMouseDragging new.	self assert: (evt positionFromCamera closeTo: -250 @ -250)</body><body package="Roassal2-Trachel-Tests">testPositionOnDefault	| evt |	evt := TRMouseDragging new.	self assert: evt position equals: 0 @ 0</body></methods><methods><class-id>Roassal2.RTAnimationExample</class-id> <category>sources</category><body package="Roassal2-ExampleBrowser-Examples">dustEffect: e and: v	| e2 anim |	e2 := (RTEllipse new 		size: 10; 		color: (Color random alpha: 0.5)) element.	v add: e2.	e2 translateTo: e position.	anim := RTAccelerationMove to: 		e2 position + ((30 atRandom - 15) @ (30 atRandom - 15)) during: 3 on: e2.	anim after: [ anim element remove. ].	v addAnimation: anim</body><body package="Roassal2-ExampleBrowser-Examples">exampleActive| v anim |v := RTView new.anim := RTActiveAnimation new.anim intervalInMilliseconds: 1000.anim blockToExecute: [ 	| e |	e := (RTEllipse new size: 40 atRandom; color: (Color red alpha: 0.2)) element.	e translateTo: (500 atRandom @ 500 atRandom) - (250 @ 250). 	v add: e.].anim inView: v.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleCircle	| view shape el |	view := RTView new.	shape := RTEllipse new color: (Color purple alpha: 0.2); size: 80.	100 timesRepeat: [ 		el := shape element translateTo: 500 atRandom @ 500 atRandom.		el @ RTDraggable.		view add: el. 		view addAnimation: (RTLinearMove to: 500 atRandom @ 500 atRandom during: 2 on: el).	].		^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleCoolAnimation| v shape elements |v := RTView new.shape := RTEllipse new color: (Color purple alpha: 0.1); size: #yourself.elements := shape elementsOn: (1 to: 100 by: 10).v addAll: elements.v canvas addMenu: 'Right!' callback: [  elements do: [ :e | RTLinearMove new to: e model @ 0 during: 1 on: e in: v ] ].v canvas addMenu: 'Left!' callback: [  elements do: [ :e | RTLinearMove new to: e model negated @ 0 during: 1 on: e in: v ] ].v canvas addMenu: 'Up!' callback: [  elements do: [ :e | RTLinearMove new to: 0 @ e model negated during: 1 on: e in: v ] ].v canvas addMenu: 'Down!' callback: [  elements do: [ :e | RTLinearMove new to: 0 @ e model during: 1 on: e in: v ] ].^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleHappy2014	| view txt x y el shape size offset |	txt := 	'	xxxxx  xxxxx     xxx      x	x   x  x   x    x  x     x	   x   x   x   x   x    x x 	  x    x   x       x    xxxxx	 x     x   x       x      x	xxxxx  xxxxx       x      x	'.	view := RTView new.	x := 0.	y := 0.	size := 20.	offset := 100 @ 100.	txt linesDo: [ :line |		y := y + 1.		line do: [ :c |			x := x + 1.			c = $x ifTrue: [ 				shape := (RTEllipse new size: size; color: (Color purple alpha: 0.2)).				el := shape element.				el translateTo: (800 atRandom @ 450 atRandom).				view add: el.				view addAnimation: (RTLinearMove new to: ((x * size) @ (y * size) + offset) during: 0.5 on: el).			]		].	   x := 0.	].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">examplePathAnimation| v els eb effect t example |v := RTView new."v canvas color: Color black."v add: (RTBitmap new form: RTIcon robowo) element.els := RTBox elementsOn: (1 to: 4).v addAll: els.eb := RTEdgeBuilder new.eb view: v.eb objects: (1 to: 4).eb useAssociations: (Array with: 1-&gt;2 with: 3-&gt;4).	t := 10.example := RTAnimationExample new.effect := [ :e| example dustEffect: e and: v ].v addAnimation: ((RTPathAnimation on: els first path: ('L0,100L-110,110', (RTSVGPath 		goldenSpiral: 10 		start: 0@0		side: 200		direction: 1@ 1		type: true)) seconds: t) repeat; duringDo: effect).v addAnimation: ((RTPathAnimation on: els third path: ('L0,100L110,110', (RTSVGPath 		goldenSpiral: 10 		start: 0@0		side: 200		direction: 1@ -1		type: true)) seconds: t) repeat; duringDo: effect).v addAnimation: ((RTPathAnimation on: els second path: ('L0,-100L-110,-110', (RTSVGPath 		goldenSpiral: 10 		start: 0@0		side: 200		direction: -1@ -1		type: true)) seconds: t) repeat; duringDo: effect) .v addAnimation: ((RTPathAnimation on: els fourth  path: ('L0,-100L110,-110', (RTSVGPath 		goldenSpiral: 10 		start: 0@0		side: 200		direction: -1@ 1		type: true)) seconds: t) repeat; duringDo: effect).v canvas camera scale: 0.4.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleSmooth| v e |v := RTView new.v when: TRMouseClick do: [ :event | v clean ].v when: TRMouseMove do: [ :event |	e := (RTBox new color: (Color red alpha: 0.2); size: 20 atRandom + 5) element.	e translateTo: event position.	v add: e.	v addAnimation: (RTAccelerationMove to: 		event position + ((150 atRandom - 75) @ (150 atRandom - 75)) during: 5 on: e)].^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleVerySimple| view circle |	view := RTView new.	circle := (RTEllipse new size: 40; color: (Color purple alpha: 0.2)) element.	view add: circle.	view addAnimation: (RTLinearMove to: 100 @ 100 during: 2 on: circle). 	^ view</body></methods><methods><class-id>Roassal2.RTAnimationExample</class-id> <category>icons</category><body package="Roassal2-ExampleBrowser-Examples">exampleActiveIcon	^ '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1pT2H/WKWFJXbkccAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleCircleIcon	^ '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QmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleCoolAnimationIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAEgklEQVR4XuXZ/U+bZRQG4Ht80xbKN6UUOqAtpR9QCi1tocJa2CYbQzLYYEFUMDObY3O4GZeoqOhi4rKZaOIW/1nPHV6SSch+alFzX8kJtG8LyTk9z/Oep9CnT5++/5c1izsWaefxpvNzxuLuO9735xmvKbz1fpy6xv+z8Y6/N6xfimP3LI6cRD52fvK5hxY7Z7y+ZJG0eHDGa5YtDpy/kTt1bdd5b9Ziz/kQ7FusW8xbdOuX4tikRdEiYfGtxX2nW6YtFk+99tAi5Lyeif3CSSbe6ipee2EROXVt3rnO52edx4yo0x1J/VLo06dPnz59+vTp06dPnz59+vTp06dPnz59+vTp06dPnz59+vTp06dPnz59+vTp06dPnz59+vTp06dPn77/tAs1dWhwWbhrUNugn49/ST0aPc1o6XGhzd+CrqFWdI940D7ggrevHk2tNahr1M/SOai1RDej1deKnlA7/IlODEz2YCjXg+F8F4JT9jjFa260BawwLfoZq24xmtgRbeiLdeNi1odwsR9jiwNIXBtE8noAsct+REu9GCmwMC3ovNgId4d+5qqA+wOXI3YFE87kBzFxYxjTt0KY2Q4jtzOCzOYQ0jetOMt9iMyzezzoCDbC1a6fwQprgqeLnWHL00wA8atDmNoII78zhvc+i2PhQRyX9vn7KAq7VpitQYyvOEVJsausoPX6Waxgd7jRHuAnnkuUFWN9FLO7MSx8Po7LT1J4/9kklr+ZwJWvEig9iqJ4l93CwnFv8cIX1V+6KqgBzV4vesNcqmw5uhZC9k4M8/dZgDSuH2bwwc9ZrP0yhRtHLE4S5cdWsD1bvtatgOXjLvH26WeyQuyuqrcDgXE/RkvcI0Yxt5fE4oEV47sM1p7ncfu3AjZ/z2H9xTRWj1goLl/cX9hRTkH8HFr0s1kB/HQzqUwuk8xkM+lMfh63XhWx/aaID/8qWGGsW35K4erX1kH3rJO2BhC/0o3gNGcU/X2kigWxveOpLVE/sCtmsfXHHLZfszj/7JDM7X7ElrowmOZccgE1tfrZrMgdlrvT7rDGfAgV7VZ3NYL8R3GUHnK/YAFmcPPXHDZeWnc8T2PlkMU6Y8nS30Mqpc6OSex4ZNiGwQznj5MuSWLpwJanZ1NY+d665ceTOy1u+GGbTYJIrfLWtwP9SU73+pmswrJlG/sCu2TE7rSOZ5BL++NY+pJdkUD5EZ+LoPAJ5xR2B5crj03sPHzUz2IF8VyKU7ezl5RPpnQOh1HMfcrZwwrx8cm0zmLYEJnlMKnfHVWc1nmyy6JwKeKGzYmc8wY7gp1j51rLLAaXNztmibOz9O+uqlwU65RBm0smeLprw+Is5xM7VCzzsNEm8xwLZoNkxCmG/nck57DJu5ls2xuCTDw3bRaoDb4x+14kxGt2VNKpPwiee2EaXPV2rMIvqrhP8LyKX1xZHfQLoU+fPn369OnTp0+fPn369OnTp0+fPn369OnTp0+fPn369OnTp0+fPn369OnTp0+fPn369OnTp0+fPn369OnTp0+fPn36JPwNXt+qEqTBc4UAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleHappy2014Icon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">examplePathAnimationIcon	^ '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gg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleSmoothIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFZUlEQVR4XuWdy0rtMBSGfXUfwaFTcehQnDhRHImI4MTLRAR1IghHFAQhnq7uru4kTdMkTZvLHwjq5tB290vWfeXs/P3hj5zGDv4rwAeCP/CB4APBH/hA8IHgD3wg+EDwR61AxNeXEHd36nx+FvgIUgH590+Iqyt1NlDwEeADwQeCDwQfCD6QSSC/v6KFIs9G0Q/+3evrABw+kIQDH0huQJ6ehDg5UefPj8AHkgrI46MQBwfq/Pz0BkIQFfHYiEx8ICFA3t6GOyQEiC76Gij4QGJZYwsDGUQQDMYGPpA1gej3S7ibqg0uEsQWCk+LYYAPJDd4+EAy9H0cdxMsEHzHsFIg/XWalT/7me7vF4/D7USRuRG+LD4QRyCtXf7+LtYA0vsB19fb2Xnas/WDZDoPdIbj8+cBhB5CB0LeM4c16PdYQPjLymGTBfTIYEE5Xp/eQw9ReydpRRYokGyVeglAdE+9/YwDjrUBWdyy2tvbzrMzd5HC3jn/1IEYci34QKZeKM3Dw+08P59UoP2L5Z3Lcn7khYcodRl2cUDaGiwtXRss411eFou5/f0+XK/HsqJ4893zsDVYDhB64BkiIRhIp3MW270sDhcUc1kCieGojokXW4FFtTpkdSBymSr9btldumMn+xb4QGLdj14qp3sfHjY/XYFI3ne9QGYqde/7UR6edciEmdxabTQvLjYgHIHYxGC9Zq+e25bCEzaz0+TsueqbFEHK8hxDw5eXzU58IDkAse0QQ+/JmPkcDARSZEUO6xuBrKjb8IHMdDDxgWQWQ8MHoq/ihftFBrVaLMZqdwznAJkSM6aSHddIbAmtDvkAIafu6EhNTnUet1XPkHK2mMRVAWlXn2fxmEks2FZu6ynTJBjHxyoQSlBJWUM50qoAGdkhCgBDjsQERHx/J23ftgORHS5HpWfMyrmG0DnJxJPyGw5AnJ7FAUj7GYVV5Huu3AuZDRAjnN3dzZQad/odxdMSRld2q8PzD4DwfWn3riTeouuQGED6a0XopPJeCPhALNeiyK08I7Wl9c/Y7DDjrtKrX4oGMmLrx/Dcoy8aExBq3+acvBaqr2aHrGZCdzpv7AUr1iN91lhU1fshIUDmtq/pZvqYCIKMZaUEMipC8YHkA6S0kUW0t1eiNGdaUvKCwAeSA1x8IHZTFa1HsGogSujGI56Uq0mLC4S860IPR6sTSISWs1RitygdwmGZpcI9vkCUBROpgmVVK8urDopjYnL1YmdBLWWZKX9zLobnVIGeBmRwnKGjOb+ztkk65U33iShqiaYkFRe9OR7E7JqpnFwMeujfBMSSUQ09PyUfx1Dv7zg93YS9u5fueqrp4Dr6yXI0HdLRLgUXXqK7WCCcvu1WplE8+AAJTSlDA5G3PokqgzJdHQgVO8ghHc8TgooGMhb6mATikMmLmcH0ghB4j3xPAyIlzoUMjR4xHsR8czPdMj0TiK29ulogxtX/8rLVJ5RGDbWYqN3N0giED8QHiFxkkKj21gdIcY6hF5CPj221CRUZaIXRazTPKA5qt1txgXDNrvbyU/V8OGc/Z+Zj8jN7J2qJkwFxPROlBiDeK5WVfYZdUXBAfMTHEkp96b7E8nYIK9jGo8cHkpNIMOUvYp9sx+EXfCCBoCKZwbGB+Byeid+Fa3qB5PuQWGxSAFGu53G8bDZAZF8kG7FoqI6vEojR4YsMZE66V9zebiIEl5eDlgqnXLvu5FIsLmsgoZFXj8zfnIIIW6FGEBCP5ygLSIq8Bj4QfCDFeehJgTicJuTTp18kkLHTqBcDEvi/J8A4hkpI3rOcp7SB7xjiA8Ef+EDwgeAPfCD4QPAHPhB8IPgDHwj4+A+pNt+eBhQLBgAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleVerySimpleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABX0lEQVR4XuXXzQqCQBSAUd//1ewdXEUJUYnK2A9jTdAiMJeOcj64K3cenDsW4+i3pgr/Ffggfj6ID+Lng/ggfj6ID+Lng/ggfj6Inw/ig/j5ID6Inw/ig/j5ID6Inw/i54P4IH4+iA/i54P4IH4+iA/i54P4+SA+iJ8P4oP4+SA+iJ8P4oP4+SB+PogP4ueD+CB+PogP4ueD+CCbrDuHeNl3sT2F6INk7DE8Y7WrY1X+zq2/Rx8kQ1MY3/FBMhxT/zDSNHUffZAFSztjDiQ990EWLC3wOZDrwf9Clt8hpb9DVtXwvk1NYYTWv2VlrTn2n52x1WPK/1P3Qfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H8QH8fNBfBA/H8TPB/FB/HwQH8TPB/FB/HwQH8TPB8F7AZYRl347ncDSAAAAAElFTkSuQmCC'</body></methods><methods><class-id>Roassal2.RTAnimationExample</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'Animation'</body></methods><methods><class-id>Roassal2.RTHorizontalTickLinePluginTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testDefault	| b p |	b := RTGrapher new.	p := RTHorizontalTickLineDecorator new.	p builder: b.	p lineFrom: 10 @ 10 to: 20 @ 20.</body></methods><methods><class-id>Roassal2.RTShowEdgeTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| v es |	v := RTView new.	es := (RTEllipse new + RTLabel) elementsOn: (1 to: 5).	v addAll: es.	RTCircleLayout on: es.	es first @ (RTShowEdge new connectTo: [:vvvv| Array with: 2 ]).	self assert: v numberOfEdges = 0.	es first announce: TRMouseEnter.	self assert: v numberOfEdges = 1.		es first announce: TRMouseLeave.	self assert: v numberOfEdges = 0.</body><body package="Roassal2-Core-Tests">testBasic2	| v es |	v := RTView new.	es := (RTEllipse new + RTLabel) elementsOn: (1 to: 5).	v addAll: es.	RTCircleLayout on: es.	es @ (RTShowEdge new connectTo: [:vvvv| Array with: vvvv + 1 ]).	self assert: v numberOfEdges = 0.	es third announce: TRMouseEnter.	self assert: v numberOfEdges = 1.		es third announce: TRMouseLeave.	self assert: v numberOfEdges = 0.</body><body package="Roassal2-Core-Tests">testBasic3MultipleObjects	| v es |	v := RTView new.	es := RTEllipse new + RTLabel elementsOn: #(1 2 2).	v addAll: es.	RTCircleLayout on: es.	es @ (RTShowEdge new connectTo: [ :vvvv | Array with: vvvv + 1 ]).	self assert: v numberOfEdges equals: 0.	es first announce: TRMouseEnter.	self assert: v numberOfEdges equals: 2.	es first announce: TRMouseLeave.	self assert: v numberOfEdges equals: 0</body></methods><methods><class-id>Roassal2.RTNormalizerTest</class-id> <category>gray color</category><body package="Roassal2-ColorNormalizer-Tests">testGray	| n es v c1 c2 |	v := RTView new.	es := RTBox elementsOn: (0 to: 255).	v addAll: es.		n := RTGrayLinearColor new.	n command: #yourself.	n scope: (0 to: 255).		self assert: (n rtValue: es first model) = Color white.	c1 := n rtValue: (es at: 100) model.	c2 := Color r: 0.612 g: 0.612 b: 0.612 alpha: 1.0.	self assert:  (c1 red closeTo: c2 red).	self assert:  (c1 green closeTo: c2 green).	self assert:  (c1 blue closeTo: c2 blue).</body><body package="Roassal2-ColorNormalizer-Tests">testOnCharacters	| es n |	n := RTGrayLinearColor new 				command: #asInteger; 				scope: ($a to: $z).					es := RTBox new				color: n;				elementsOn: ($a to: $z).	self assert: n max = $z asInteger.	self assert: n min = $a asInteger.		self assert: es first trachelShape color = Color white.	self assert: es last trachelShape color = Color black.</body></methods><methods><class-id>Roassal2.RTNormalizerTest</class-id> <category>multicolor</category><body package="Roassal2-ColorNormalizer-Tests">testMultiColor	| n |	n :=  RTMultiLinearColor new		colors: (Array with: Color white with: Color black).	self assert: (n level: 0) = Color white. 	self assert: (n level: 1.0) = Color black.	self assert: (n level: 0.5) = (Color r: 0.5 g: 0.5 b: 0.5).</body><body package="Roassal2-ColorNormalizer-Tests">testMultiColor2	| n |	n :=  RTMultiLinearColor new		colors: (Array with: Color white with: Color red with: Color black).	self assert: (n level: 0) = Color white. 	self assert: (n level: 1.0) = Color black.	self assert: (n level: 0.5) = (Color red).</body><body package="Roassal2-ColorNormalizer-Tests">testMultiColor3	| n |	n :=  RTMultiLinearColor new		colors: (Array with: Color white with: Color red with: Color black).	self assert: (n level: 0) = Color white. 	self assert: (n level: 1.0) = Color black.	self assert: (n level: 0.75) = (Color r: 0.5 g: 0.0 b: 0.0).</body></methods><methods><class-id>Roassal2.RTSpectrographExample</class-id> <category>sources</category><body package="Roassal2-Builder-Spectrograph-Examples">exampleClassMethods	| b |	b := RTSpectrograph new.	b objects: (RTLayout withAllSubclasses reverseSortedAs: #numberOfMethods).	b popupText: [ :aClass :cm | cm methodClass name, '&gt;&gt;', cm selector ].	b lineBlock: [ :cls | cls rtmethods, cls class rtmethods ].	b highlight: [ :aClass :cm | cm methodClass isMeta ].	b title: 'Proportion of class methods'.b build.^ b view</body><body package="Roassal2-Builder-Spectrograph-Examples">exampleVeryBasic	| b |	b := RTSpectrograph new.	b objects: #(1 2 3 4 5).	b lineBlock: [ :v | (1 to: v) ].	b highlight: [ :x :y | y odd ].b build.^ b view</body></methods><methods><class-id>Roassal2.RTSpectrographExample</class-id> <category>icons</category><body package="Roassal2-Builder-Spectrograph-Examples">exampleClassMethodsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAADP0lEQVR4XuXZz0rjUBiGce/E6xDXLl2LW3Eh4i2IUFxYFRQsCrUbN4VWUBCmgohKFxZFQUQ7bqooWu04g3+Q6hR5nX4ZUkJxahdDyenzwiGnJ2kK36/nJCEdHx/8hCkd/BKEDERra2rY7u/FL1OLQWJDQ3yQsIAUFhd1nkgoNzWl+MiIzhYWvG1ldVX5+Xk+SKtBvo2Naay/X9+rxc9OTHgY/uz4lUzyQVq+ZFUL3rBVKnwQ/l0WH4QfPgg/fBA+CD98ED4IP3wQPgg/fBA+CD98EH74IHwQfvggfBB++CB8EH74IHwQfvgg/DgAUi6XVSwWxQfhg/BB+CB8ED4IH4QPwgfhg/BB+CB8ECjI6+urbm9v9fb2Jj5ISECur691d3fHB+GD8EH4IK6AWLu5uUFdS0IPcnV1hZopfBA+CB/EeRDSM4kTIKQ7LmdAKLPEGRDKLOGD8EH4IHwQPggfBAFid1q2r53vtpwCIcwUJ0H88XZ8zcsH4YPwQfggfJDWgLTj20SnQdrxXUkoQX6XSirt7DQFEuzbjHH9OSWUINraUrmvr1bo+vYjnW6435AeHx/1/PwsPsh/BCnu7upnIvH3Ah7ofwXiMkyoQYKF/6wfRPoKxhWU0IJUurv1MjhYK7zfD4I0O1NcukUOLYg6O73mF976hmQzwj4HweqXNL8fHPOXL7+FdcaEE+T8XJqZ8VpleVkvJycNP1uBbay+Hxyrb3yQT3JwcKCnpyc1c9y/9h0eHtb2HR8fN13kfD7PB6lPMplUKpVSLpdTNpuVX3i/b+P7+/uyQl9cXOj09NTrB4+37fv7u/zz2dZ/Dnl4eJAPZUuWHWdtdnZW6eqyd3l56X3ffsOO297eZoNkMhmvECsrKxodHdXe3p4mJye1vr6u6elp2XihUNDw8LCqxVI0GpUVPR6Pa3Nz0zvGCmqFj0QiWlpaUk9Pj7ckDQwMqKurq3Z+QylVHzh7e3s1Nzfn/RE2Nja837VzxWIxHR0daXx8XPxrCD98ED4IP3wQPgg/fBA+CD98ED4IP3wQfvggfBB++CB8EH74IHwQfvggfBB++CD88EH4IPzwQfgg/PBB+CD88EH4IPzwQfj5A7cfNxrUTXl/AAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Spectrograph-Examples">exampleRoassalVisualizationIcon	^ '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4vxPXn3+B0aiQLkUjCBIAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Spectrograph-Examples">exampleVeryBasicIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAABtklEQVR4XuXXMUtCURiAYf+gv8HBPXFwcBJBJRBcBBcH4SI0tTi1hJM0tDWISwjSEHgh9+SzaOoWCA3dTjwvfJPbeTj381ROJ7+UqvhHkBhIrFZxdna78I+pRJC74TAuqtXYz+cRi8X32Wx8kDJBHqfTuB+N4qbbjet2Oy5rtciazRjV63HVasXreu2DlAmyHAziYTyO214vnmazD5xlvx/rySSes8wHKX2HvH+Szs5+74P4/7J8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/HzQXwQPx/EB/HzQX77BCqFicMhfBAfxAfxQVKp0ymOD5LWjdhut4U5Ho8+iA/ig/ggqfTSaBTGB0nsRvhL3QfxQXyQhN8ZX3eID5LYjfCXug/ig/ggCb8z/HdI4jfCX+o+iA/ig/whSJ7n8Xl++rsP4ueD+CB+PogP4ueD+CB+PogP4ueD+PkgPoifD+KD+PkgPoifD+KD+Pkgfj6ID+Lng/ggfj6ID+Lng/ggfj6Inw/ig/j5IP+sN1Y07qFzIeyLAAAAAElFTkSuQmCC'</body></methods><methods><class-id>Roassal2.RTSpectrographExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Spectrograph-Examples">label	^ 'Spectrograph'</body></methods><methods><class-id>Roassal2.TRVIAnimatedValueTest</class-id> <category>tests</category><body package="Roassal2-Trachel-Viva-Tests">testAddingWithNumber	| t |	t := TRVIAnimatedValue new.	t evaluator: [ :timE | 5 ].	self assert: t value equals: 5.	self assert: (t value + 4) value equals: 9.	self assert: (4 + t value) value equals: 9</body><body package="Roassal2-Trachel-Viva-Tests">testBasic	| t |	t := TRVIAnimatedValue new.	t evaluator: [ :time1 | 0 interpolateTo: 100 at: time1 ].	self assert: t value equals: 0</body><body package="Roassal2-Trachel-Viva-Tests">testBasicWithOutEvaluator	| t  |	t := TRVIAnimatedValue new.	self assert: t value equals: 0</body><body package="Roassal2-Trachel-Viva-Tests">testBasicWithTimer	| t timer |	t := TRVIAnimatedValue new.	t evaluator: [ :time1 | 0 interpolateTo: 100 at: time1 ].	timer := TRVITimer new cycleLength: 2.	t timer: timer.	self assert: t value equals: 0</body><body package="Roassal2-Trachel-Viva-Tests">testPoint	| t1 t2 p |	t1 := TRVIAnimatedValue new.	t2 := TRVIAnimatedValue new.	p := t1 @ t2.	self assert: p class equals: TRVIAnimatedPoint.</body></methods><methods><class-id>Roassal2.TRSVGPathTest</class-id> <category>tests</category><body package="Roassal2-Trachel-Tests">testColor	| path |	path := TRSVGPath new.	self assert: path color equals: Color black.		path color: Color blue.	self assert: path color equals: Color blue.</body><body package="Roassal2-Trachel-Tests">testDefault	| path |	path := TRSVGPath new.	self assert: path height equals: 0.	self assert: path width equals: 0.</body><body package="Roassal2-Trachel-Tests">testReaderColombia	| path |	path := TRSVGPath new.	path path: 'm 578.3,497.2 1.2,-2.1 -1.3,-1.7 -2,-0.4 -2.9,3.1 -2.3,1.4 -4.6,3.2 -4.3,-0.5 -0.5,1.3 -3.6,0.1 -3.3,3 -1.4,5.4 -0.1,2.1 -2.4,0.7 -4.4,4.4 -2.9,-0.2 -0.7,0.9 1.1,3.8 -1.1,1.9 -1.8,-0.5 -0.9,3.1 2.2,3.4 0.6,5.4 -1.2,1.6 1.1,5.9 -1.2,3.7 2,1.5 -2.2,3.3 -2.5,4 -2.8,0.4 -1.4,2.3 0.2,3.2 -2.1,0.5 0.8,2 5.6,3.6 1,-0.1 1.4,2.7 4.7,0.9 1.6,-1 2.8,2.1 2.4,1.5 1.5,-0.6 3.7,3 1.8,3 2.7,1.7 3.4,6.7 4.2,0.8 3,-1.7 2.1,1.1 3.3,-0.6 4.4,3 -3.5,6.5 1.7,0.1 2.9,3.4 2.2,-17.4 0.1,-2.8 -0.9,-3.6 -2.5,-2.4 0,-4.6 3.2,-1 1.1,0.6 0.2,-2.4 -3.3,-0.7 0,-3.9 10.9,0.1 1.9,-2.2 1.6,2 1,3.8 1.1,-0.8 -1.7,-6.4 -1.4,-2.2 -2,-1.4 2.9,-3.1 -0.2,-1.5 -1.5,-1.9 -1,-4.2 0.5,-4.6 1.3,-2.1 1.2,-3.4 -2,-1.1 -3.2,0.7 -4,-0.3 -2.3,0.7 -3.8,-5.5 -3.2,-0.8 -7.2,0.6 -1.3,-2.2 -1.3,-0.6 -0.2,-1.3 0.8,-2.4 -0.4,-2.5 -1.1,-1.4 -0.6,-2.9 -2.9,-0.5 1.8,-3.7 0.9,-4.5 1.8,-2.4 2.2,-1.8 1.6,-3.2 3.7,-1.1 z'.	self assert: path curves size &gt; 2.</body></methods><methods><class-id>Roassal2.RTScrollPadBuilderExamples</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-ScrollBar-Examples">padWithScalableBar	"	RTScrollPadBuilderExamples new padWithScalableBar	"	| b b2 |	b := RTMondrian new.	b shape rectangle 				withBorder;				width: [ :cls | cls numberOfVariables * 5];				height: #numberOfMethods;				linearFillColor: #numberOfLinesOfCode within: RTObject withAllSubclasses.	b nodes: RTObject withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b build.	b2 := RTScrollPadBuilder new.	b2 view: b view.	b2 barSpecific: #scalable.	b2 barShape: #aBox.	b2 size: [ :v | v view canvas extent x / 7].	b2 fillColor: (Color gray alpha: 0.2).	b2 build.	^ b view</body></methods><methods><class-id>Roassal2.RTScrollPadBuilderExamples</class-id> <category>examples</category><body package="Roassal2-Builder-ScrollBar-Examples">example2	"	RTScrollPadBuilderExamples new example2	"	| b b2 |	b := RTMondrian new.	b shape rectangle 				withBorder;				width: [ :cls | cls numberOfVariables * 5];				height: #numberOfMethods;				linearFillColor: #numberOfLinesOfCode within: RTObject withAllSubclasses.	b nodes: RTObject withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	b build.	b2 := RTScrollPadBuilder new.	b2 view: b view.	b2 fillColor: (Color gray alpha: 0.2).	b2 build.	^ b view</body></methods><methods><class-id>Roassal2.RTAbstractGrapherDecoratorTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testDatasetValues	| b ds1 ds2 deco |	b := RTGrapher new.	ds1 := RTData new.	ds1 points: #(2 4 6).	b add: ds1.	ds2 := RTData new.	ds2 points: #(1 3 5).	b add: ds2.	deco := RTAverageDecorator new.	b addDecorator: deco.	b build.	self assert: deco datasets asSet equals: (Set with: ds1 with: ds2).	deco dataset: ds1.	self assert: deco datasets asSet equals: (Set with: ds1)</body></methods><methods><class-id>Roassal2.RTLabelTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testDefault	self assert: (RTLabel new heightFor: RTElement new) = TRLabelShape new defaultFontSize.</body><body package="Roassal2-Core-Tests">testEncompassing	| lbl rec |	lbl := (RTLabel elementOn: 'hello world').	rec := lbl encompassingRectangle.	self assert: rec class == Rectangle.	self assert: rec center = (0 @ 0).	self assert: rec extent &gt; (10 @ 10)</body><body package="Roassal2-Core-Tests">testHeight2	| v label els |	v := RTView new.	label := RTLabel new.	label height: #yourself.	els := label elementsOn: (1 to: 3).	self assert: els first trachelShape text = '1'.	self assert: els first trachelShape fontSize = 1.	self assert: els second trachelShape text = '2'.	self assert: els second trachelShape fontSize = 2.	self assert: els third trachelShape text = '3'.	self assert: els third trachelShape fontSize = 3.</body><body package="Roassal2-Core-Tests">testLabel	| label1 label2 el |	label1 := RTLabel new.	label2 := RTLabel new textElement: [ :e | e model, '2' ].	el := RTElement on: 'hello'.	self assert: (label1 textFor: el) = 'hello'.	self assert: (label2 textFor: el) = 'hello2'.</body><body package="Roassal2-Core-Tests">testLabelAndElement	| label el |	label := RTLabel new textElement: [ :e | e model ].	el := label elementOn: 'hello'.	self assert: el width = (label widthFor: el)</body><body package="Roassal2-Core-Tests">testLabelHeight	| label1 label2 el |	label1 := RTLabel new text: 'hello'.	label2 := RTLabel new text: 'hello world'.	el := RTElement new.	self assert: (label1 heightFor: el) = (label2 heightFor: el)</body><body package="Roassal2-Core-Tests">testLabelWidth	| label1 label2 el |	label1 := RTLabel new text: 'hello'.	label2 := RTLabel new text: 'hello world'.	el := RTElement new.	self assert: (label1 widthFor: el) &lt; (label2 widthFor: el)</body><body package="Roassal2-Core-Tests">testText	| v label els |	v := RTView new.	label := RTLabel new.	els := label elementsOn: (1 to: 30).	self assert: els first trachelShape text = '1'.	self assert: els second trachelShape text = '2'.</body><body package="Roassal2-Core-Tests">testUpdatingShape	| view el |	view := RTView new.	el := (RTLabel new text: 'Hello') element.	view add: el.		self assert: el trachelShape class == TRLabelShape.	self assert: el trachelShape text = 'Hello'.		el shape text: 'Change'; color: Color red. el update.	self assert: el trachelShape class == TRLabelShape.	self assert: el trachelShape text = 'Change'.</body></methods><methods><class-id>Roassal2.RTLabelTest</class-id> <category>font</category><body package="Roassal2-Core-Tests">testFont	| v shape es firstShape fontList |	v := RTView new.	fontList := TRPlatform current fontListStrings.	shape := RTLabel new 		fontName: [ :i | fontList at: i ]; 		text: 'The quick brown fox jumps over the lazy dog'.	es := shape elementsOn: (1 to: fontList size).	es @ RTPopup.	v addAll: es.	RTVerticalLineLayout on: v elements.	firstShape := v canvas shapes first.	self assert: firstShape fontName equals: fontList first.</body></methods><methods><class-id>Roassal2.RTLabelTest</class-id> <category>test multilines</category><body package="Roassal2-Core-Tests">testMultiline01	| v lbl |	v := RTView new.	lbl := RTLabel elementOn: 'Hello', String cr, 'World'.	v add: lbl.		lbl trachelShape setAsFixed.	self assert: lbl trachelShape class == TRCompositeShape</body></methods><methods><class-id>Roassal2.RTLayoutExample</class-id> <category>icons</category><body package="Roassal2-ExampleBrowser-Examples">exampleCircle02Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEbElEQVR4XuWcV27DMBBEdf9Duvfeu6lkDCsQFFkmKVbNAATykeLwicvdWVJJmvIrJCX8U8APhF/8QPiB8IsfCD8QfvED4QfCL34g/ED4xQ+EX/xA+IHwix8IPxB+8QPhB8IvfiAaej6fYrvdivV6nWIcDgfBD8SDfidftFot0W6307LR7XZFTHCCAoInfD6fY3JfEzwYDMRqtRK32+3fhF4ul7/vkxnD4VBA/EAktNlsvk5sv9//A3M+n1NZEIUhENr4gVRoNBoJlUnFKtKE8RqdTocfiCkYpgbCIv4+QhhWJ5IAhMYsISgLkY0HIhOmbA5s9t++B5BogPiEoTKQwf3uWaLRQHa7nYgFSDZcpc5egMxms+iAYJxOJxEtENQJZRM/nU6V6gdDYcfY77Jdy1gBMh6Po1wBKhlaNEBQwDUVRjaiASJbV5gMIT4GkpLggby9pZRh2KxPjAGZTCaNBpJf1QjL9/tdBA2EZXUUR6/Xe/VhaIHA8lgsFiGuRmGiTokKCJKGfO8kxBWDOqsRQKqeeoSF4/H47x9FHEfjKTQoqMO8A6ljpaMzmP0eNJD2+/0rLsuaeqie0coFVHwOTAgyIaSnvpIN3X3FGBA8wbofvuzpN6Xr9eptBT0eD+EUCELGO9QYWR225MvKwep0BuRtEtbOTFwdPEDrNgabJfHVesXKcHkKBHuTDyjojFoFUre5hCrX5zkp1318VXc4cZHe+jw0UCYUcK5cadVTLkpAMLGhmXF19T6YF8w+ogQEub7OB0LxFioQhM+YgWjvG6ECQa1gE4bqw5i4eJpQq6QByyYQPMTBbeqwQkIGYnODh1NgFYhGQRj8iXM8MLYseSeFoYpV4vLUX82wZRyKTmRIdD0smX/ApmloozYxCUPXo6tlLi6XS/GpH6DjdPqWqU4kzgPr2kJJHbu96A3hIAAgpRHLgGkq6jgTWkC+NX3Q4YsZiu4mb8IwtWYuhlydy7rDsofCESlMpfZW6xAcnksbILRjsb/kLvm8WsU2blspAUEKqwIk9v3Eh6x6WS7as+xARFNc3kzYhPHghGLvJBoFoTVjzYey0zKhXJdW3tRV+tKhX9LPZ46hFLLKQGQ3dts3jfj3EAXfp+75Vn4gmpth0ftBBd+U2iM6IFVFVP51Sfha9WwSPxBDqjrzlL9KwC8HQGTua/CvFIdAZBpWCF/8U+4OiPc73p+K2ZjewdhoIChMYwuZTkOW6xMoRTM0hsZZYtJ+0LnmhX4C/CQbVxOK3lsM7QBvae/bghGmLktWuQqwceBUUxaG75WSn2hRfDdI1Xnab/UKNme0VvG0q54KpAQio29XAD65xGU/5+KlYo0H8i0B+HSlOMbXvkYBBNmO6qv0qsIcPxDLNotKrRPy3ZNogECfXolRtSeU3U8J7f5itEAgVM7ZWSf0UmSypswKiSWNjQoIv/iB8APhFz8QfiD84gfCD4Rf/ED4gfCLHwi/+IHwA+EXPxB+IPziB8IPhF/8QPiB8MuzfgBBCe/nMYeS2gAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleCircleIcon	^ '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gg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleClusterIcon	^ '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TkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleConditionaLayoutInMondrianIcon	^ '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YII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleEquidistantCircleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFXUlEQVR4XuWd6XLkIAyE/f4Pmfu+7zvMplOjLS/rsTkEiGlV8SOVzSTmM0JqCXZYrfjNkg38U8APhN/4gfAD4Td+IPxA+I0fCD8QfuMHwg+E3/iB8Bs/EH4g7ez19dXd3t6uxuPh4cHxA6lo7scuLy/d7u7uam4cHx+79/d3xw+koD0+Pi6C8MfZ2ZnjB1LAzs/Po2HIODo6cvxAFO3m5iYZxtiF8QMZuRpM6unpqTs5OfndA/D119fX4iS9vb1lw5Dxs+k7aiBXV1eLk3lwcOAQLW36DHxfCwgGJRBENz8PHzWRFxcX/0H5+PhQhYGBlUkFZA0jabLgzrT3Dn/s7e1xAYldGf64u7v7O2GYPG0gVtxWFSBwOxoThuRvDXfFDyRvdagMBAMlgYREd90DQUip/Rbzr5BGmfQmt8W/hzTczP3x8vLiakVZSFzXOdM/vw+JLFa+7Gm9AVEdmKTPz091IONs/fr62sWE5Ph7ugGi7V4gmeBzDw8P1femtRyT9Ln39/euCyAhMkmKn89JNKdyHLjC3M+BKzMPJKVWMTP+eWBMZO5nwuVowpXQnCIPGWfrGkmnSO/agcecKGoCCPyr9uoY2/Pzc/TnIxy3qItV07LwNpZ860Jr6uKiSkWBMp6enpwZIJDHEbH4cXpqZBT7cJhwv+tk6jOU9zeVSuSgXE51m6IPeSvxhsYmgr1EgBqZfzYQuJKdnR0X0+mBn1laLUjOelMRmgNJid39YhM2ZHEriKJqKq4lYWDAdVcDklNGtdITVRqIqApVgORKFxa6B0sD+f7+rgNEI7P1XVcLiw0wzO4hMWqo5fqDdvFMIzkcWiq4rUumyJNKAUltvhta+t6SOUaoIUeyVH1sCiRHhNMyrFIrqyMZSK4u5bf1tDYl8VOlo35ouRlaMuRGGop07ks2tNoMa0gjNbUtrAyNFZ+cGOZ2I1o17GuxUaTmcYYsLWt/f9/1Gl0tGeT6ub0S0EqcKxly4/hYKKmFm9YmNZ4UOaR6PSTEfQFcithm1UpFiIPmHwgJ3TvZ9FtW7cFFWTH+mxwSDJcQQO3uopUUBSeEjxKpYMWgvKvZbtna5NnwrGaBYH9YChchd1vJznPlllJXdagAiSzlOgsHY7Z2D0kpVlk5YJmyMsQLlCqwZQNJPS9uUTqJDe+1Ot7VgOSWcnsz/zSYOSC5fbEpbTKts3XpQSt1cU0WkNwmAUt3jGzFpp7bCoTMvgfDi4NnRc2ktPyTBSSk23xu9HDt3pQXKFl6HnLfnG0o4c6FuZtuKjKbh6TCgAuwvjrmDgKZBZLqtnqR4kOvjDIlnSAErHkwsqahoObXdUq62qHk5jeXocM/A8z4bAketmUojBNVojyMIypUCfF34fvmtSz/gTYdgsEqko73pYQSkGo30W16oUpI7NWAiGFJ40EQ1vp7RUy3Si0ovltqKfFUrRhigmP2GqyUFhpVyPn4rQCSktnXmIyloKSmojC0DiFDrovVWJl+mQDheqhIWvO019A6642V6VGdnKrBbLrmFfvYXKFMzMp15NWA5NxxJbbUe+uvppDfKZW/qauZWlxDbt5lSbk39D6T8SSGNk+PEz3UPBC+l+5QNAEk5SicuKLQywnGvcOhFwNYam8damfCKYpw7Jl42bD5gShKLHK/In4mVuYXN5fisuiAhEIZNxDEHjmTzT1mU6cGIu5r6iiDf5+ViHupLUYhYS8/kAnta+nfxJxD8btZlhJDfiAFdTCr/9nX1gGRLL30Na38QCIN+4lfNoa8UbtuwQ+ExPiB8APhN34g/ED4jR8IPxB+4wfCD4Tf+IHwA+E3fiD8xg+kF/sDDCKXPG3LMWwAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleFlowIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleForceIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEzklEQVR4XuWbh04rMRRE8/8fSSf03pt5nNVOZIy9DT3WyYwUJSSLgXt8q5fF56e/atLC3wT+QPzlD8QfiL/8gfgD8Zc/EH8g/vIH4g/EX/5A/OUPxB+Iv/yB+APxlz8QfyD+8gfiD8Rf/kD85Q/EH4i//IH4A/GXPxB/IP7yB+IPxF/+QPy1wUDOz8/D9vb25+PjY/AH8sc6PDxsjP/w8LAy/t7eXvPe1dWVv4f8tWT8u7u7FRDgfMEI/iFrJn18fITn5+dvQPxzyB/o5eUlvL29FY19cnLSeMvT05M/kP+t9/f3xtg8StrZ2dmI3LEWQMKXWiChC9rl5WWYur4/kIkaG5Jub2/Dzc1NkOHjfIOur68b2MvlMvgDGRiuCEPxLqa6Sg1YSuYKdSR/PIzXQNLnwOK9o6MjfyBjeo3T09OAUe/v71f55PX1NbDDldDPzs5+GBVwrBGvlXqZYCpX6Xp/IBlhrNaI38JM7BEXFxdFIAhwPJe6d/Ux+lldxYN/DhkJr5RHpNxngMJrKKtZo6u8tgOCYaaWrvKEXNgif6RA6G1q8YhqgchAU0tYxibp6ERrph7UltOhhpxRLRBAYCQS7G+Axomb1+SdMSU0BQSeWvK6jQfCro7/+CmGwAMoXymL+/oVvIOQVfpcY/yDgwM/IMBIYznGpcQd4BGhFI7UBKa5g+/Z2tr69h6l8+7ubgOSJM+D6+Y6V5kViJIrRsEz4vIz7axLIaoU4mj82O0yLBVUnFOosuINoa7eP4ckIlSow/5N6Glz0goAAkoaEgHGtYjr6E0YWM41Pa6yD8E4Q5J7PArJdPnNY2zV1pbKxWbTtjEkj/R5CUAIS3H11OaA1Yhl7MEV30OVNbXa21ggCl25sjXNIzEUhSFCj0LQOk0dFnP2HbGxSOJq7PAOhY7U2HE1pgFjn6ex4/u8zRpIPLnlNaFHX+duVFAoYpgIxDEJ9/j4uFmb57TkTsMZldZcoWp2D6GRi3c/X5OESwM+VU00f2N+Dl5E76HQB0xNibUB+Iwxf9/ppFUO6WvECGltJz4KRpxr4oZzf38/4DXaAKxfw4HVooYSd2iMH9LBUyWlO10FQq5v4T28ZsjaFkAUKnjuuzbXTQOA0McOJ/7TP+RG6xi81P2zIeacX1UFROOSvn6h1FMIaGxMQlWanFXR8YxXxB6p32HIprDtQ0o9RzowJNwAI85BuXykrp7raz2cWhsg7U0IYUgFhHfkoKns1ZCReZU/kBHCcMR2drsGgn2JV7kgLY1Lp5F9E2V/IJnRSdqpdxlRc6x0MMga9CJpj9NWeKGm21CrAdIm1qYTx7B4A0ZM8wGJtzROKUkJPdd05noUfyBf4tQuDSu5weCUhCyouWSPN9V0s0M1QChF01tHc3MtvIPRx5B7qFiLjlwDSA0sa8wd1ecQGa90KkjlRPXV1eHjYbFH6Ry+a6TvD6Tcd/y4QboU5rrOPPA6NZTAq/18pFogGC+N+fp/EZW1qsQ25d/Z1qpTj5u6WrtsOyDKHXPdVegPxFD+QPyB+MsfiD8Qf/kD8QfiL38g/kD85Q/EH4i//IH4yx+IPxB/+QPxB+IvfyD+QPzlD8QfiL/8gfjLH4g/EH/5A/EH4i9/IP5A/OUPxB+Iv+rQP4A1SZDsnBpJAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleGrid01Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACSUlEQVR4XuXZiWrbQBRG4bz/Q3rBeMV4xbstp//QCSEpoRuq6++A0Gy5QTr2nSv55X73eSRe/FvgC/HxhfhCfHwhvhAfX4gvxMcX4gvx8YX4+EJ8IT6+EF+Ijy/EF+LjC/GF+PhCfHwhvhAfX4gvxMcX4gvx8YX4Qnx8IT6+EF+Ijy/EF+LjC/GF+PhCfCFtcLvdmm6324zH4yb9nNPP+H6/T/u+2WzK3GAwaHKknbHMZU3bMZ5ayHq9LhebI9R2xpfLZWn3+/3m/VzIWNpZ03aMp09Z3y64ORwO5WJzTv/d3P16vZb+drttcqR9uVzKjfrZGFn/t2L4QnwhfspiU5a/qftlr1/2fsXpdCqfvvqpzTn9jCfXpz2dTj+lm4ylnTVtx3hqIbvdrubucrGdTuctjSwWi9IejUafbuZwOCxzWVNj5G9/JUbGaoyalj7GSOwaI/+TSFnn87kJaeecfp07Ho9v7VRbteL6ONdmjKcXMpvNmrph5px+LUsnk0lK0bJuPp83Ob6XpffM1VK0zRhPLWS1Wv2w3Mx4LTd7vd6ndJOxWrK2HcP/hvjfEH8PYfeQ362Q/CrLfw4xnkN8/HdZ/rss/23vf5ay/N9DfCG+ED9l+Zu6v6n7+A+Gf/Rg6Av54tXJv/iByhfygC8XfSE+vhBfiI8vxBfi4wvxhfj4Qnx8Ib4QH1+IL8THF+IL8fGF+EJ8fCE+vhBfiI8vxBfi4wvxhfj4QnwhPr4QH1+IL8THF+IL8fGF+EJ8fCG+EB9fiI8v5BF5BaOO+xyllGGcAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleGrid02Icon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleHorizontalTreeIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAD6UlEQVR4XuWdbU8yMRBF+f9/Eg0RIxJEVFCQ5fFu0qTPZl9att3O5txkI1HYDx3mzpx2hMXtZlff39/V2Hu8v79X0uVyqY7HY/3Y3TvF/VNrYTget8PhUKV4jq/r9VoH5uHhob74AYnQ7+/v4IKdz+e7FnW5XNYXPyCBksWkyqIuO+RbVoQ+Pz+zLhbfsiL19fVVpXju29vbf9n28fFRyeb4lhWpn5+fauxzFQwtujJBgeBb1p1SJzS2G5Pl/QWkzgT9XVmioKjDUiD4lhVRzJ+fn6MWSousxXf2FZJdfMsK1OPjY/2ult3EtrD7/b7id1kZYFCLezqdghdLGfX3mtqSZFXKEBG6Hute2+22us1Ei7kSepcUSAeUrqivVit+QMa2vM2uKJbwXYa5vSx+QEZICzgmIE673Y5vWSmDMvYefMtKKLWyKbKEb1mJ5LqksUHlW1ZCQBz7zn55ean4lpWw09LPe2xLr+V3WZlYJMS21ut1nQkKhH9gxbeshHIbjCEbjW7rRBalzHDX6+sr37JyaMi2lEUuk5Ql/vkI37ISyu3a9h1AdQVLduX2xfiWlUhu97bLtoY2IPlgmClDujIhZEeYb1kJ5Z9XyIJi6gq/y8poWZI/oxV6VrLZbPhdVko1h+CUFQrM0ACdMoMPhhNspejd/vT0VPHBsKBcNig7HAD68KfL/V4WxQfDzJLltAFgM3t8MPQbAL5lJVazu5JCztz5YJixdtwDhXwwnKD1jQ2Iez3fshKqb+GH4JDfZRkLGB8MM6nPctpA0QdDvmVl0NCpoWCRD4YTaqhW8MGwEK33tcYuaE0w5FtWgQzhg6GxGsIHQ0NdFh8MZyR+l1UIAPlgWEAx/z/IB8MJ1PdRG/wTw0L1gA+GhuSfHLa1xXwwNELr/FHSGXVefDDMrOacVkgrzLesiVpf/iipAblZX/4oqRFpGj52lJRvWRnBkD9Kakj8UVKjQekaJeWDYUHxR0lnCIV8MDQYEL5lFagpfDCcUabwwbCA+KOkBsUfJTUmPhga3Fbhg6Fx8cHQoPhgaFB8yzJmW3zLMiQ+GBrKDD4YFhT/xJAPhvyA9ElQyAdDQ8Hgg6ER8UdJZxYQvmUZsCo+GBrNDD4YTqSQUVK/0+JbViaFjpL6n4bNt6zMNYM/SmpMsp+2Yu6fGGrU1P82Bb5lZZQbIQ0ZJVVQ9I+ifMsy1GnxwTCjmlPv/FHSwmr7jnT+KKmB+hFjXXwwzKgu22kDRT4YZpb/TTtt8kdJ+WA4gfo+eEbig2EBSh/aVuGD4YQa2kzkg6HxYPDBsKBd8cHQWEHng6GxlrdPfDCcCAZDCvpcwfAfVog6NLjaUcUAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleRadialIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEyUlEQVR4XuWbiVIqMRBF+f+PdEVQQMF9JciZol/FqfQs4DMZ7q2ixNnQPun0kjDabPRVkkb6JtAHoi99IPpA9KUPRB+IvvSB6APRlz4QfSD60geiL30g+kD0pQ9EH4i+9IHoA9GXPhB9IPrSB6IvfSD6QPSlD0QfiL70gegD0Zc+EH0g+tIHoq8jBjIej8N8Pg+8f3x8DJ+fn0EfyB/o9PQ0YPz4GAC2xzn3470+kP+k29vbMJ1Oq1HvGXu5XP7zDM5PJhN9D9lXz8/P4fLyMnx8fATHK6rXw8NDwOivr6/J6zjvTVVXV1cVKD5LH0iLTk5OKmMxylN6enoKeMnb21ujMe/u7gLXps5dXFxUn3F/f190fCkCCCMeYzLCm65br9dhC626tn4OQzfFjvf398oD7To8Uh9IB2FwDLZarRqnLwxbh0XAJ9ak7jPvwtNKjjHFAVksFpXBbm5ukgabzWaB6Qd53lY/dn5+XmVmXuzRB7IVNcP19bUbnBnx+zy3HkOYpoaUBo8y1hPVyxu13vE2UNv7qiIRMGRUiPcvLy9BH0iDiAHM514aChDiScp7mp5r2RTP1q9DerQ5zs7OQpyuYsR4FDPvc4yYARyyJAvITRkSdQpxSL91ssd0RSaFFwDIArkFazN+DAlvsgyp7lnc11an6ANxhJHj4LurLzZe5uQJAJaV8XNzBBp8t9eAWKdXH0gBqheJ+kAyq+9Upw8kknVdfzMLIsgP4ZlFAokzLNJZAjw9qEPaGvHi1CEA6Bwgap3feOYggHx9ff1IWakpDi3kGMWpIrKrdo3JH+0VnvnXMLIAIRsyDwEMBR8pL0bhd3pPeEtbRZ5KpfsAtG5y9DcEWysxr42L16MFYkWgtxgVT0EYqmvqi6d1De4Ye7sotkmtq1iSkKshmSXLapsKCPyMTkYvxZ8FVkZ17AkYjlGNcXmxFhIvA3PevM8+lxexAmM3Vfacy1H5j0pMYVOZjfW7bHEqNjzgYo8zULRiuJ6+WMp7SuwAFwfE8x4Mitf0WenbxYKNt87ubaqQBMI0EnuCrXW37Qrpmx63PS+1zytnpzj7ApVlNlYwtqW/3mjfNwW3v4P3eKetp/TN8o4BSPWP29zuLUgdMs10ydIAzMsCeO79W1ljCAZjAapPc5BA3aVgw+vIurqmwgDBO3MUg8UAsSyoa6BOVdSe+nYAbPEr92aIrECYppgivEC9S2dDPLUQgLmnq4Ft6ykes5sW3XuoT3IvdBXdfrcRW5/Pu2RaqRrDnndI30sWCEYnBqQ2NJARdYkJqRYLyUSuDGpwQAjwttPEM6oViTQpvfNMS57R7R6A81ls9NYH0jCHYyTaJBjOMyoG57pUN9b2BjcFZ2JRnwRBesqy4NtkLM5b8zGVidG78jY92PYi4HNtacu/RcYQ+xaUtyGu7TuExBjOp4xtq4Glbhsa1CYHC8oGwxvd1l4hRS71eyBHASROW631Ug/sdpwugF0/pB2NgwISF3bEkJSx7ThA8JSSa47BA1GQPhB9IPrSB6IPRF/6QPSB6EsfiD4QfekD0QeiL30g+tIHog9EX/pA9IHoSx+IPhB96QPRB6IvfSD60geiD0Rf+kD0gehLH4g+EH3pA9EHoi99IPpK6BtiI0rnb2P9YgAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleRectanglePackIcon	^ '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fwG1s65SxN0mrAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleReversedHorizontalTreeLayoutIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFf0lEQVR4XuVd2W7cMAzM/3/k5i15y30fdjuLZUG4kixK8nq4JGCgaB2l0JgckhpJV/O8n93f3x+fGnt/f5+ur69nPPhz6d2vr69pdmpXe/5ymeAaME6AHJ+19z8+PuID0gMIJvDz83N6fn4+TuTd3d2EByZ/Z7Hv7+/4gLTY29vbhEdPpA5NAKl17JeXlyk+II0eAlD0BP7llQlPz9jxAWmw29vbCc/WgCP0xQekwm5ubiY8W4z9+/v7L/Q9Pj7GB8QaskDe8iVb0uESP3kk+V0BkXR2GcZq641aQOJ7iNFDQMCY/J+fn/88BBNr/cI1GBK+4gMysDDEhL6+vk6WQjI1RnxABrZOnp6eqkk6NflewhZNpa7D0nQy+dqXIajUHsnVH16IncpDMMl4BCh4RckLUpV8DpD4HmIs3DCR0rc6HA4THitXlLwgvocMJPWSAURpRq6lyR4qdqrmYoshVRZgJW0ugRcfkMpKvXUMcI54yNq7Pd3jEIDoXhZIWnikNpRZidpDB5gGEMmwsPyq10NyvNCyKtjTiokfspShSocHSZoM0Dy1Qy6S1PGeLiR7fmd8QDrTXsR+2Oi2fHxACoCAzBHjUcBpTxgd99l5hKp1AlAsWVaLsWdaNOsh56yidfMyPiAFDzn3h7BW2ccn9TOZNC8ZO8BUykWJ77WtkBbTul/GDjC1cnELAtZeEd9DCpW6nnztIaNTX+0hjCp5N0K5Uekw+8qhC0CQDVn2h5Rs2QNjq9zplYv4t1QjsbTeXgI25XnxAcmQOsyiXLR6SipcsWVa9MrFNYK2FHepyWfjFPeFoZYNtXgIW7XuvnViqVsYWyW0lXpOuVgyvKN5pETQpfGYOsDUysU1lUgqZc0VeyWuwBJxfEDmvHJxuXCV+tlc2pvLvEpVOZM8yNU+9RqFYi6NLdUtTJmWG5GDJu+1HlSKE0pewKRgoZcBIZxJjK/NylpImmUFkVq5KKKHlrH1V18DUEsr5qIBSSkXe+sTS4uFRY3iXmxdmmAJcTVpbXxA5jHbEWoAr0lrWbq+FytyANDiIbVVf3xAVpSLvYBYfwZKlL3PRqFWLgKg1nXvltoiPCA1ykVpq1jG9bB1zYWHbFmpxwdkIKmrMxdXl3ZbC0mWtRJK5aLOjnJfey4stdYTLF7l+szFVMHXmgQ8PDzEB6Rw5mIVtyxXDHu+8viV+jzmiL9RWmCWFrx7QCyqk9GF5EWHrJYzF626rPgcYiR12JbKxfgeYqjUtXJRb0fQf79lNR6fQ2bbmYv4gmUrmocjMi6+dbLldmmmHbmUysVU20QmbovJY/I4auXiubq2LBkWjYeUlIvnsPjaXiOpb21MqviLFjnUWnxtb6JS3/P/EV/be7LeMxdHGdOSr9szF0ca08ZPV2cubnkGSnxA5vbtCPFbJzunvfAQWE3T0XO4ogJEKxelibh28Myy6eid0OlaJy1nLupQ1pK+xj84IOEhS+WidVu0ft96pi/befCuDw5IJQS5i148tE1oSb0mZJVivyULY5OdUgOSUzTWTDgAq9kfwtR63x2Q2vpkqWisVSfK+6UtbWx3r1MC0qtolNpF3m89AyU+ICcbIaBbFnzxL5bcEZBUiPJy+yd9yNKKxprmIt5NpbIpQBivrnBB6rBaRWOJwJdjsmVY9B5SUjRicpeeAO8ohaElIPE9pLM+SXEAPEKai2snNiwzqvgcskFLxdqM1Gk047oKPannek36FmmLolEDEp9DGj1kuQu39yglFrWLOw/ZQtGIMfX48QEZSOotxn7KAyUgWvEeHxAyUh89Nvud6vS9LGRZ4BEQeW8oi3+feqOhTYIHfx6paIx/W/TGIQuec7pF+visjct4K5sLQLa4RZr9UmKxP57mDHmPaisXAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleTreeIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADN0lEQVR4XuWaiY7iMBBE/f8fySEECIS478PZrUi98jKOEwEOMK8khIFO7PSzu9uecUXB1yfJ8V3AB8IXHwgfCF98IHwgfPGB8IHwxQfCB8IXHwhffCB8IHzxgfCB8MUHwgfCFx8IHwhffCB88YHwgfDFB8IHwhcfCB8IX3wgfCB88YHwxQfCB8IXHwgfCF98IHwgfH0IkMvl4vv9vl+v157vrjcDuV6vfjwe+263W+i12Wy8XhLfdS0AOZ/Pfrvdli+17fvFYlHs9/vys1aKQTkcDn61WnmtIv2utiDy3foEEDlVTn7EkbpO8G63249rBXS5XPrj8ehPp1PZ1jvf5dXSJH9ZUhec3W7XCKwAmr1Wl1aWrUCS9OyKNvKDTdYsVZY6kYMfWXWaJRqgrVqtQN0vtgq/TYpGdREpe9lrcDQbwlnx6P0UAhX+FBLDHJaagW3O9vtn18zXGJsWQq3uQzTAsGLL4RQ9vEDJETn7upf1pcnyzBbBtR0zh8Nh6SiFopx9KSRYX7mBhH09+1yuzfhpcdMSeC5HfXNfrq1QFX4OKypLdPy+WgBSNahYifvs0cxv6cvZRapa9P6qY5HUQKr2HHrIqoqJ0perurHKS9u8KVnpTKvuZk0Sm9lUDTBMkKmHaJKwR6PRS/qy+7TRV23I+nuOZeWjb1r6pQbOt0nbNMohqq2blHNaTZPJxNfZTKdTrE2df1wTJ1tFUVc1KA8p3Nk1MWnDxrfZPb5ClEvM2TpPqop/1kmqQ75NvY1rsjrC6sIAVVUY9h7rlG9Tb+MSybxM6CEcfSfN5/N/7TB2hm2dKb3DRg9l34ftb7Fx+iEGwyqC+wpB9uFB2qe0O53O19nE2i62EVSe6PV6/51azmYzPxgMyo0jv52v7aqStO3eC75alUuVYLmPyPmKANEyuf/zqIFIweIrE5DYoZiFKv5/ibwBiPYVSuDK8qk231V8INyQxRcfCF98IHwgfPGB8IHwxQfCB8IXHwgfCF98IHzxgfCB8MUHwgfCFx8IHwhffCB8IHzxgfDFB8IHwhcfCB8IX3wgfCB88YHwgfDFB8IXHwgfCF98IHwgfPGB8IHwxQeC0x8XSjityN/MVAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleWeightedCircleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFgklEQVR4XuWdCY/rKgyF8/9/5Oz7vu9D75yqSHl5pICxE6fHErq6I7Wd8sVgHxumW634zZN1/FPAD4Tf+IHwA+E3fiD8QPiNHwg/EH7jB8IPhN/4gfAbPxB+INNb+LOHh4dwe3sbzs7O1uPm5ibc39+Hn5+fwA9kIvv4+AgnJydhf39/tW0cHh6Gt7e3wA/E0C4vL7MghgOeww/EwDCxtTDiODo6CvxAFO38/FwMIw4sc/xAFOz19bUZRhx3d3eBH0ij/U2kGhAMaiDf39/rsDQxqeuf58LTl5cXVRgYCIvpgPz+/obT09OiycT+AEu9z9XVlToQhMNUQN7f36sncW9vLyC/SCxXJoMGCCa1ZaK+vr4CPxBHG/DBwQE/EC3bbN7NkwV9ih+IjneoT5h2yEsDBCKe5oTFcFjL6/oD0d/Y93h6egpIHiHTILPHv/g/fr4oIH+xvUmugE1eG8hwcgG/VLREiI7cyj0Q7ScZgKMdHx9rvvd/JhNPv+R9rq+vg2sgKAxZAdH0kn59pEU91pL1l7Rk/W9tb31PLEua6rEGFDMgz8/Pqh7y+fkZEtDFn3FxcRE04fYHlmuasDcVzUFmqXkvPCzx9dDMLMJoaQ3fFIiWEFjyxG28JeTeZyhaWoTRw+XQDRCtp6/2M7EEYc/BQJa/7Wm1yvylyaa5ltWaIEIptvrdAMoSiKTDZRL5XVpUsm7ZaQkKJJGhqwIVnnQot6UdIamoyntorhFtddrLE74kst24hg9lBUQ4Y5k2NCV401QPiTUQSfbeTSGTwDPQKbJyZtZAJB0tTUBQJ0c9uvQXRDbsCcjj4+Pu7CGbkHbRbZxWSWEcEhVYDKS0gyRXAZzbSgMN13mIRuegF9PWsVo7IkVANOoRnprTtL0E2tqk4qLGL+2p0bm1VUkzoe3m3Ag9mVaLaqvnVwNB5LCLQDT2Ro1ghd9DBgbJBtJNbTOflgg62x6yrfXGyxKWC14Arl/smg1IyQHLJeUiJZs+9oao01mq0N0cNQ6vy1XtXuoGCKylZQYa0pJhxDYkC22uScuSJFSejyTXbPxW36VrFedqsvZ+682SLdZ9oHa7AhING3QuGvF+g4JU+xo7ejcrkL4rx0rhZgSLp2hOG9Z/tDU5/tuAKm3Ys6wdbXWWGx9Ku72NP6BxTjuRmsPieRGLZVgdSOHx52DZb2XsHWsYqRPCLveQmhDYY+PDmKX0LQsoqkAkNfYp+q9abUwFtgjj1YCgB2mXrknq21iHo8UNEJ2id6ie/fBk2BenuklIBYjk6ozW/qW5E0Kr8kGn5NJNHuJRUoHXbs63BIiI2EdgEEYtPdoFEG+C41h9XXoIx52WZXkmT9tyJWrr/Kmb4kssqT6SOzOC5NA9kLHEaYnVw9zya90wrgZEGmkNQ0es3321eOobqXOtQNYRYWeg9Yg2821LBZoqtFVVhLH9iicivXhZ2rYjFtr1D3NxsfSukL7rl9bntTbUbeInPASJYGIJNhMUTYHEGH5skvFF+6Ji7VXhrQWvkrPz0RvhMfDcKZVp8wIVvhwApJ4uybHkVBIJSAktLaR6v6a82cclEI3lbVtUlusRQxNGXPdrygOUQGrOJ6bEyNLG73j0oSYSpAQizVtiGbjmWF18jXcpZ1Yg0pNLcT+SHBAqiejmbFmaFYj0Jp4YAUlet6ltBK9Ht2cFIpnUuJxIgUTtLXWDnAdNbfa+rNqr9fpSSs3rEG2lPh8eY519LwoIrPS8yXBtrzmnYnXP7k4CyWXQ2PxTiWVpXjHmHfxAMoalA1IFNvvN3x/M6le5xBC5jqclaVFApIZ9BZKK978vRQNkl4wfCD8QfuMHwg+E3/iB8APhN34g/ED4jR8IPxB+4wfCb/xAlmL/ANDxmACJVISBAAAAAElFTkSuQmCC'</body></methods><methods><class-id>Roassal2.RTLayoutExample</class-id> <category>sources</category><body package="Roassal2-ExampleBrowser-Examples">exampleCircle| v es |v := RTView new.es := (RTEllipse new size: 12) elementsOn: (1 to: 20).v addAll: es.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: [ :value | value // 2 ].RTCircleLayout new on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleCircle02| v es |v := RTView new.es := (RTEllipse new size: #yourself) elementsOn: (1 to: 130 by: 10).v addAll: es.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: [ :value | value // 2 ].RTCircleLayout new on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleCluster| v es |v := RTView new.es := (RTEllipse new size: 12) elementsOn: (1 to: 100).v addAll: es.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: [ :value | value // 3 ].RTClusterLayout new on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleConditionaLayoutInMondrian| b |b := RTMondrian new.b shape rectangle	fillColor: Color white;	borderColor: Color lightGray;	withTextAbove: #name.b nodes: Collection withAllSubclasses forEach: [ :cls |	b nodes: cls rtmethods.	b edges connectToAll: #dependentMethods.	b layout 		ifElement: #isConnected then: RTTreeLayout new;		else: RTGridLayout new. ].b edges connectFrom: #superclass.b layout tree.b build.^ b view</body><body package="Roassal2-ExampleBrowser-Examples">exampleEquidistantCircle| v es |v := RTView new.es := (RTEllipse new size: #yourself) elementsOn: (1 to: 130 by: 10).v addAll: es.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: [ :value | value // 2 ].RTEquidistantCircleLayout new on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleFlow| v es |v := RTView new.es := (RTEllipse new size: #yourself) elementsOn: (1 to: 100).v addAll: es.RTFlowLayout on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleForce| v es |v := RTView new.es := (RTEllipse new size: 12) elementsOn: (1 to: 50).v addAll: es.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: [ :value | value // 2 ].RTOptimizedForceBasedLayout new on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleGrid01| v es |v := RTView new.es := (RTEllipse new size: 12) elementsOn: (1 to: 100).v addAll: es.RTGridLayout on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleGrid02| v es |v := RTView new.es := (RTEllipse new size: #yourself) elementsOn: (1 to: 100).v addAll: es.RTGridLayout on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleHorizontalTree| v es |v := RTView new.es := (RTEllipse new size: 12) elementsOn: (1 to: 100).v addAll: es.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: [ :value | value // 3 ].RTHorizontalTreeLayout new on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleRadial| v es |v := RTView new.es := (RTEllipse new size: 12) elementsOn: (1 to: 50).v addAll: es.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: [ :value | value // 2 ].RTRadialTreeLayout new on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleRectanglePack| v es |v := RTView new.es := (RTEllipse new size: #yourself) elementsOn: (1 to: 50).v addAll: es.RTRectanglePackLayout on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleReversedHorizontalTreeLayout"The mondrian version is:b := RTMondrian new.b shape box size: 20; color: Color red trans.b nodes: (1 to: 128).b edges connectFrom: [ :v | v // 2 ].b layout horizontalReversedTree.b "| v es eb |v := RTView new.es := RTBox new size: 10; elementsOn: (1 to: 100).v addAll: es.eb := RTEdgeBuilder new.eb view: v.eb objects: (1 to: 100).eb connectFrom: [ :value | value // 2 ].RTReversedHorizontalTreeLayout  on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleTree| v es |v := RTView new.es := (RTEllipse new size: 12) elementsOn: (1 to: 100).v addAll: es.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: [ :value | value // 3 ].RTTreeLayout new on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleWeightedCircle| v es |v := RTView new.es := (RTEllipse new size: #yourself) elementsOn: (1 to: 130 by: 10).v addAll: es.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: [ :value | value // 2 ].RTWeightedCircleLayout new on: es.^ v</body></methods><methods><class-id>Roassal2.RTLayoutExample</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'Layout'</body></methods><methods><class-id>Roassal2.RTArrowedLineTest</class-id> <category>tests</category><body package="Roassal2-Tests">testBasic	| s e1 e2 edge |	s := RTArrowedLine new.	e1 := RTBox element.	e2 := RTBox element.	edge := s edgeFrom: e1 to: e2.	self assert: edge from equals: e1.	self assert: edge to equals: e2.</body></methods><methods><class-id>Roassal2.RTExperimentalExample</class-id> <category>sources</category><body package="Roassal2-Experimental-Examples">exampleBundleArrowedBezier| b v |v := RTView new.b := RTBundleBuilder new.b view: v.b explore: Collection using: #subclasses.b bezier color: Color blue trans.b useBezierlineWith: #dependentClasses.b edgeBuilderDo: [ :ebuilder|	ebuilder shape: (RTArrowedLine new line: b bezier; yourself).	ebuilder connectToAll: #dependentClasses  ].^ b</body><body package="Roassal2-Experimental-Examples">exampleBundleBezierNoSlider| b |b := RTBundleBuilder new.b explore: Collection using: #subclasses.b bezier color: Color blue trans.b useBezierlineWith: #dependentClasses.b sliderShape: nil.^ b</body><body package="Roassal2-Experimental-Examples">exampleBundleSimple| b |b := RTBundleBuilder new.b explore: Collection using: #subclasses.b useBezierlineWith: nil.^ b</body><body package="Roassal2-Experimental-Examples">exampleClusterBezierAndSlider| b lb |b := RTBundleBuilder new.b from: (Array with: TRObject with: TRTest) using: #subclasses. b edges shape line color: Color black.b bezier color: (Color blue alpha: 0.5).b useBezierlineWith: #dependentClasses.b build.lb := RTLegendBuilder new.lb view: b view; right.lb addText: 'RTBundleBuilder: TRObject and TRTest subclasses'.lb addColor: Color black text: 'Hierarchy'.lb addColor: (Color r: 0 g: 120 b: 0 range: 255) text: 'Dependent classes'.lb addColor: Color red text: 'Senders'.lb build.^ b view</body><body package="Roassal2-Experimental-Examples">exampleFisheye	|v|	v := RTLayoutExample new exampleForce.	v @ (RTFisheye radius: 120).	^ v</body><body package="Roassal2-Experimental-Examples">exampleFlowerBuilder | v angles angle b color size block bcolor arcs update |angle := 360 / 12.angles := 0 to: 360 by: angle.v := RTView new.v canvas color: Color black.bcolor := Color random.arcs := (RTArc new	color: [ bcolor ];	innerRadius: 0;	externalRadius: 250;	alphaAngle: [:m | m];	betaAngle: [ :m | m + 1 ]) elementsOn: angles.v addAll: arcs.update := [ arcs do: #update. v signalUpdate ].b := RTMenuBuilder new view: v.color := Color green.size := 10.b menu: 'Color' submenu: 'Red' callback: [ color := Color red ].b menu: 'Color' submenu: 'Green' callback: [ color := Color green ].b menu: 'Color' submenu: 'Blue' callback: [ color := Color blue ].b menu: 'Color' submenu: 'Black' callback: [ color := Color black ].block := [ :i |	 b menu: 'Size' submenu: i asString callback: [ size := i ] ].1 to: 10 do: [ :i | block value: i ].b menu: 'Base' submenu: 'Show' callback: [ 	bcolor := Color random.	update value. ].b menu: 'Base' submenu: 'Hide' callback: [ 	bcolor := Color black.	update value. ].b menu: 'Clear' callback: [ 	(v elements select: [ :e | e shape class = RTEllipse ]) do: #remove.	v signalUpdate. ].v when: TRMouseDragging do: [ :evt | | els p dist degrees |	els := (RTEllipse new 		color: color;		size: size) elementsOn: angles.	p := evt positionFromCamera.	dist := (p squaredDistanceTo: 0@0) sqrt.	degrees := p degrees.   	els doWithIndex: [ :e :i | | ang |		ang := i odd			ifTrue: [ e model + degrees ]			ifFalse: [ e model + angle - degrees ].		ang := ang degreesToRadians.		e translateTo: (dist * ang  cos)@(dist * ang sin) ].		v addAll: els.	evt signalUpdate. ].^ v</body><body package="Roassal2-Experimental-Examples">exampleRadarOnSVGMap | view radar |view := RTSVGExample new theWorld.radar := RTRadar on: view."radar build. temporal disable"^ view</body><body package="Roassal2-Experimental-Examples">exampleRadarOnUML| view radar |view := RTUMLExample new exampleNoInstVar.radar := RTRadar on: view."radar build. temporal disable"^ view</body><body package="Roassal2-Experimental-Examples">exampleScaleLog | g s extent x y superscript |extent := 500@300.superscript := 'â°Â¹Â²Â³â´âµâ¶â·â¸â¹'.g :=  RTGrapher new.g extent: extent.x := RTScale linear	domain: #(0 100);	range: (Array with: 0 with: extent x).	y := RTScale log	base: Float e;	domain: (#(0 9) collect: #exp);	range: (Array with: 0 with: extent y).s := RTData new.s points: (0 to: 100).s x: [ :n | n ].s y: [ :n | y scale: ((n * n)) ].s interaction popup text: [ :n| 	'Number: ',n asString,'Value: ', (y scale: (n*n)) asString ].g add: s.g axisX numberOfTicks: 10.g axisY 	numberOfTicks: 10;	labelConversion: [:n | | v | 		v:= (y invert: n) ln + 1.		v := v isInfinite 			ifTrue: [ 1 ]			ifFalse: [ v rounded ].		v &gt; 10 ifTrue: [ v := 10 ].		'e', (superscript at: v) asString ].	g build.^ g view.</body><body package="Roassal2-Experimental-Examples">exampleSimpleBundleBuilder| tree searchTree relationsBlock relations b |tree := 'president'-&gt;(OrderedCollection new	add: ('assistant1'-&gt; #());	add: ('director1'-&gt; (Array		with: ('employee1'-&gt;#())		with: ('employee2'-&gt;#())		with: ('employee3'-&gt;#())));	add: ('director2'-&gt;(Array		with: ('employee4'-&gt;#())		with: ('employee5'-&gt;#())));	add: ('guard1'-&gt;#());	add: ('guard2'-&gt;#());	add: ('chef'-&gt;(Array		with: ('subchef'-&gt;#())		with: ('employee6'-&gt;#())));	add: ('vicepresident'-&gt;(Array		with: ('assistant2'-&gt;#())		with: ('guard3'-&gt;#())));	yourself).searchTree := nil.searchTree := [ :s :t| t key = s ifTrue: [ t ]	ifFalse: [ | r |		r := nil.		t value do: [ :child | 			r ifNil: [ r := searchTree value: s value: child.] ].		r ] ].relationsBlock := [ :str| | res strings |	res := Dictionary new.	(str substrings: '') do: [:s| 		strings := s substrings:' '.		res at: strings first put: 			(strings allButFirst collect: [:st |				searchTree value: st value: tree] )].	res	 ].relations := relationsBlock value: 'president director1 director2 vicepresidentassistant1 assistant2director1 employe1 chefemployee1 director1 employee2 employee3 assistant2employee2 employee3 guard1 subchefemployee3 guard2director2 director1 vicepresident assistant2employee4 employee2 employee5employee5 assistan1 chef guard2guard1 presidentguard2 employee6 vicepresidentchef president vicepresident subchefsubchef employee6 employee1 assistant1employee6 employee5 employee4vicepresident president director1 director2 chefassistant2 assistant1 guard3guard3 vicepresident president'.b := RTBundleBuilder new.b explore: tree using: [ :asso| asso value ].b labelShape text: #key.b bezier color: (Color purple alpha: 0.5).b useBezierlineWith: [ :asso | relations at: asso key ].b build.^ b view.</body><body package="Roassal2-Experimental-Examples">exampleStackExpand	^ RTExperimentalExample new helper: #expand colorA: Color yellow colorB: Color orange</body><body package="Roassal2-Experimental-Examples">exampleStackSilhouette 	^ RTExperimentalExample new helper: #silhouette colorA: (Color r: 177/255.0 g: 175/255.0 b: 134/255.0) colorB: (Color r: 98/255.0 g: 101/255.0 b: 73/255.0)</body><body package="Roassal2-Experimental-Examples">exampleStackWiggle 	^ RTExperimentalExample new helper: #wiggle colorA: Color cyan colorB: Color blue</body><body package="Roassal2-Experimental-Examples">exampleStackZero 	^ RTExperimentalExample new helper: #zero colorA: Color black colorB: Color green</body></methods><methods><class-id>Roassal2.RTExperimentalExample</class-id> <category>icons</category><body package="Roassal2-Experimental-Examples">exampleBundleArrowedBezierIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAwbUlEQVR4Xs3daY8eVXo38P4G+Rx5nbeR8ipfIVKUd5GiJIqiTJSRRomySTPJwCRhAhkYhmWGbcCDGRYbvOAVb2BjzGIwYINtvNt4a7u777XLz/md09fddVfX3YttnqSkW/dSdVedupb/tZ5TU3fu3N/txIkT1eXLl6vm71988UV1+PDham5urpqdna2+/vrrsWM+++yz6v333696vV713nvvVadOnRrt/+qrr6rTp0+Pvh87dqyan5/P5/n444+r8+fP532DwSBf48KFC9WNGzeqXbt25fPVrzMzM1PFteq/u4Zrfv7559XmzZvzZ/fi/Ldu3arsv3nzZtXv9/P77du383Wa97lz587q5MmTVafTGe374IMPqm63W62GflP3ygADrX+v0oYhzRtGnEuXLlVffvllHtzu3bvzzcV+N/3JJ59kIh89erQ6dOjQaN+ZM2eqPXv2jL4jCKZ88803iH4HAeIcGOc69r/77rvV9evXq3feeaeqj++tt94aYzDCItqnn36af8OEc+fOVR9++GG+j4sXL2bGECKMPnjwYL52876N46OPPsqvOjOmp6ft/u4Zsn///iw9zcEhAOn69ttvx353YzTF7272yJEjY1JGKt20GwqC0QTMc744jpa5Jsa+/fbbI4IjVhpTFhLnefPNN6vQqPgvDcLw+E6rzp49m4/3u+2NN97IgvH666/n4zDA/2guIXL+NgI7F4ELBjmPMa6WGfdFQ0i+wdd/I2kkg5Q1jyftbujVV1/Nal/fd/z48QwZv/71r7Nk1tX+888vjd3YsWPTef+BA+Owce7c7Swk779/uQJPu3cfGcEfrSMEhCKOxwxjdV37jCkYiAHuwbgIjmNCi2IjMPaDqg0bNuR9NMJ/nacN1r5Thhw4cGAJTsdA3Tg8rsMDuPGyD3MQIfaRULAFaq5cuZ7tTf2cw+G4pJG+gwdvLbn2558vMvKjj8bP8fHHxzBo9H3fvn15HAh47dq1DDs0wpj9jqhslLFhVlOI3Lv/YBTG01Ia3hz7d8IQEskgNn8HQQaB0M19pHLv3r1jv1Nr0uYGSGf9nKTrm2/OJ4m7lPZfyFLeRmjbli2gqzuRIZgxMzMc2//yy7dHBpYw0EQvzACjxkuYQkAwBwLQAAxqXst+TLNhInht2tXvjCHgycCavw+T6O7Y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'</body><body package="Roassal2-Experimental-Examples">exampleBundleBezierNoSliderIcon	^ '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'</body><body package="Roassal2-Experimental-Examples">exampleBundleSimpleIcon	^ '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'</body><body package="Roassal2-Experimental-Examples">exampleClusterBezierAndSliderIcon	^ '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rBoIldjiEkOdawZVKbpHfG5Wb99kvSK+qkR25wa1jyyyQ5NchpvE2NYjm4n/z25eqhkflBcunZDV9dmytblAWD+3zRjEFlsdIMDHeQtkvGH5OcuxxIxBUx7Z1VAu5weapMaYz9r0dm2i+/WRy/LsqUzJCDXrhsfAwKhcbp0Ur2VAh5kILGrbiSkZHLuvEILFJdcGNcf5KLNK3tkZ1Lsp8B5JI4zK4vqqtFaxidPPPurUGLQ8rVo95XBblcJevKkIEFfIwI8bl9xukkfgByJBTLvUOCmZzWHX+teldquS2PZscwWvALMHWySjYUjHgiKtwDAGb2P2VzmKx7vkcG+J0Ftwvr9ZMvvb5Fyw0S012dpg3LP7SqTD1KaSeuokob1KSKasglgPb54ZUjeP33Fb3j1dJYdbq+SYyZq5uZkdZHnPFfn1oeKokgOWrp0hZvK1XTfcXOX9jDJNBk+UhnWdgNtWMCC8AwKw1CxEYRi1V0KyIbPDzaK/OBlUWLnYOO52uuv+kyEDTWXzTp9tzohy+m1mzCgERSLwjMC0HM0f0r8Zc8VoSIJzkzqGxaz/YHOVxkRvsmeXrb+OUgjeJRNdcra/XnKGWlXuGcE2WZXi7DIGql0P4W46CL7FKGBXqeNSzW0P5cPDvfp3VdMdQy/bpHXan6uE5qbk56fTFoLpfcdS7c29qsJjcrZ8TGMFAs9o7XcTOc63r6xNV9FQAHFK18ULnBak+OIaOZw77FpQcumIQgkCHAg/Usq6+nKlXockEogjPmy53Oxu/rfQgJWfqxiR1PzrqnztRDQQxZa+TYZ6LlbwO5FxXfYVdEdl2yg78vaFT3OUjfdK5WRQr8kWvjM9zg0F1qb06p374gpGuiRvqMNdB7hUekcSKjtkWUqt02Mb6pZznW0xL0wf1xv56VHbEezvl+qnpNrAgn1t1a4ZGbt9zdl3UtolDQPX1JpZuLL7MIgFBUFnKx23FJy+O6f1MyZv75Wo58psVOVszHCy+vPms3wXZeE1pw1jS6sPa2c/AZ0DRVzuDcvZyzP6Xa0YXL0nRcFBSakJq4CiqasTS9JbBuRk9lWjyIXbQNldY19FIcynZXpEqsZDUjTeqePLpUH9yrCmD+ohHUM35NDFITlQ2KvCItmjlzett3XRFbTBsRH5ZtI2944EBCevK8+Y1/enTLsFStzxWIazf531l9KecaXHGAHsC4ZF7pGWf8NN1k6U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TkSuQmCC'</body><body package="Roassal2-Experimental-Examples">exampleFisheyeIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAE1ElEQVR4XuWbh1LjMBRF8/8fSe+9d5TleHwzQkhuzGIl984wJokxu+/oVYnFcumvmrTwN4E/EH/5A/EH4i9/IP5A/OUPxB+Iv/yB+APxlz8Qf/kD8QfiL38g/kD85Q/EH4i//IH4A/GXPxB/+QPxB+IvfyD+QPzlD8QfiL/8gfgD8Zc/EH9tMJDLy8uwvb29fHp6Cv5A/liHh4eN8R8fH1fG39vba967vr7295C/lox/f3+/AgKcLxjBP2TNpM/Pz/Dy8vINiH8O+QO9vr6G9/f3orFPT08bb3l+fvYH8r/18fHRGJuvknZ2djYid6wFkPAljL21tRW6oF1dXYWpz/cHMlFjQ9Ld3V24vb0NMnycb9DNzU0D++joKPgDGRiuCEPxKqa6Oj4+/mbAUjJXqCP5f10b4wNJnwOL99Ln+QPp6TXOzs4CRn14eFjlk7e3t8AKV0I/Pz//YVRWPs+In5V6iWAqV+l+fyAZYay2evoWZmKPUHeeA4IAx7XUvauP0e/qKh78c8hIeKU8IuU+AxS5ibKaZ3SV13ZAMMzU0lWekAtb5I8UCL1NLR5RLRAZaGoJSzhLRyd6ZupBbTkdasgZ1QIBBEYiwf4GaFwe8z2gxpTQFBB4asnrNh4Iqzr+z08xBB5A+UpZ3Nev4B2ErNLnFxcXTTg7ODjwAwKMNJZjXErcAR4RSuFI5W2aO/iZtOundN7d3W1AkuT54r659lVmBaLkilHwjLj8THuGUogqhTgaP1a7DEsFFecUqqx4Qair988hiQgV6rB/E3ranLQCgICShkSAcS/iPnoTBpZzTY+r7EMwzpDkHo9CMl1+8zW2amtL5WKzadsYkkf6vITVTFiKq6c2B6xGLGM3rvgZqqyp1d7GAlHo6ortMnwMRWEIWApB6zR1WMzZd8TVFElcjR3vK3Skxo6rMQ0Y+zyNFd/nbdZA4skt35ML9Dp3UEGhiGEiK35Mwj05OWmezTUtudNwhjfOFapm9xAauXj187qrU1fVRPM3dqRC76HQB0xNibUAuIcxf/te8C97l8veA26EtLYTHwWDK0Dkjfpsf3+/CXea8PL8GjasFjWUuENj/JAOniopXekqEHJ9C+/hNUOebQFEoYJr3725igsAhD5WOOGO/iE3Wsfgpe6fBTHn/KoqIBqX9PULpZ5CQGNjEqrSXKTylyteEXuk/g1DFoVtH1LqOdKBIeEGGHEOyuUjdfXcX+vm1NoAaQ8hhCEVEN6Rg6ayV0NG5lX+QEYIwxHbWe0aCPYlXuWCtDQu7Ub2TZT9gWRGJ2mn3mVEzbHSwWC76fTjEENb4YWajqFWA6RNrE0njmHxBvqHNB+QeEvjlJKU0HOnSuKJgT+QSOzapWElNxickpAFNZfs8aaaDjtUA4RSND06mptr4R2MPoacoeJZ6sh5rYFljbmj+hwi45V2BamcqL66Onw8LPYo7cPnTqL4A+nvO34ckC6Fua49D7xODSXwat8fqRYIxktjvv5eRGWtKrF1/8vbtezU46au1i7bDohyx1ynCv2BGMofiD8Qf/kD8QfiL38g/kD85Q/EH4i//IH4A/GXPxB/+QPxB+IvfyD+QPzlD8QfiL/8gfgD8Zc/EH/5A/EH4i9/IP5A/OUPxB+Iv/yB+APxVx36Bzo0Sa3V2uanAAAAAElFTkSuQmCC'</body><body package="Roassal2-Experimental-Examples">exampleFlowerBuilderIcon	^ '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'</body><body package="Roassal2-Experimental-Examples">exampleRTCacheIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAABSsUlEQVR4XnXd93Oe55UffPwTyeQPyEx+zSST/JBskknebLLJZhMna6/tXTfZlmW5SJYsq9CSLZGqVBepQlKURFLsBaxgAYjeOwEQAEES7F2FVHHZcu97Pud6blrZd17MYAA8eJ67nPI931Ou6266cOFa9eKLLdWaNW3VCy9sqbZuHahaW0eqn/1sZ/XkkzuqBx5ojte3VRcuXK76+k5Wv/rVgepb3+qq1q0bq954o7vasqWvOnx4onrttZ5qfv5CNTNzujp4cKLauLGv2rNnsPrBDzrjPf3V2Nh81dExXZ0+fb46efJc1dY2Vf3617urBx9srfr7p6qBgePV7t1DcdzuamjoeHX06ER1/PhC1dNzrOrsnKoee6wzrmu22ratP94zVG3aNJjnffPN1mpq6lR1+fLV6vz5y3GtHXEdp+N6L+Xnzp69EOc8F+eYqY4dOx33N1r19k7H91S8Nl3t3z9Ubd8+UD37bEf8PhLXPF4dOHAsrnkormEqjjEbxztTXbp0LY5zsRocnItjXqpGRk7EtZ2Mz/bH/Y7Ee49Ve/dOxH0dq3btGqlWreqL852ourun89xHjoxXO3cOVs3NQ3Hd4/m/M2euxv/mq4WFs3H91/McTR999HH881z1yitd8b2jev75A/nhp58+Wj3xxO5q2bID8drWONhYCGwwhNgTytpT3XdfR7V6dXc1Onqimpw8GTfiRGNxozMhuNEQWE98Zqj6zne643ijcY6TKeTh4flQ2qnqpZfa4xy7q3PnLobwrlTj43OVa5mbO1X99re/raanz1ZXr14LRc6mAl9+eTgN4o03BkOxE9U77/RXK1YMVJs3T1QtLVOhqIEwnqMhnOGqvX08zjkS5zoegputZmfPxM/5aseOjhDAybjGuTjmpWpx8XJc16n4PlNdv/5BHHcqhH4hlUnBZ89eqbq6pkJgF0MpiymwK1eux3Fn4zoX47iL1ccf34zPz8f3Qrz3WNzHqXj9fOPc8/FzptqwoT/OeSze+0kc82LIbD6UcTHPPzExl0oaHDwehtZVNZ08eT7+cT4P9pOf7Kl+/vODod3mOOHZuOG91cMPH65++MO91TPPHA2hdIaF9VY/+lFLdffd+6r33uuLAy6EhZ4IAYzFBZxM5XR3T6ZSWlqGqx//uCP+nor/HY/3Laa1tbZO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Ur60e/ex9CjX9/jj7QlBTz3VmexIWUheI28BO+6dAHnD+vUadR1R22vPgqfsXoJL8IzSfZAFZagWoPWMRP5Vl28gxOXLKPqHGbOawAq3pEUUFyxt3DiYXoNeghhWODt7Nm52MC1JAH7gAdTtUFDe5upP/mQ4WFdb9d/+20hiJ09RLHvqqZ684S1bJiLLb0v8X7FiKJpTXWkdb7wxnJD30ks92evYtet4xh94v2rV0fi9WB18ViPbulVwHExrhLlqWvv2DabXCPJyJzQejVVZeOqp7syQtQYwrv37RzNOwHSwAprkWTx09ere9H7Y7hpAEa9UDtm790QYTWco7Gg2w95990j2f5AesP7b3/4u4yTav2HDcJIbsCQmiF8ot4S0FDCvpzeoNLheBVCohC36f5OkR5miv1+96Xqj9zCVljo+fjLxX+kYHSTElSsVF/sza/3GN1qDeR2q/u2/PVZ99asd1b/7d5NxQwNhcePxvu6IM4MpzHXrRsKjjiRL8VmB76mn+jJ/Wbr0QJxvOPsdLFwg37SpO+FDv4VitTzdAK9AM8U39PbQoWNphc3N40mXly9vCwEeDYXNZUmDIcll4P077/SEJfekUW3fPpzWjsTIPVBiCvceMefAAcceDLg9nHFNMsjKQaQKhrKHhI8S1dMKeixmItvRMZ89FghD+NIAJAHsqp1BH9QZoUH965L+tWs3gzzdrJpkqgpqw8MnEt9UJkFVXfXcvHk8Ax/3J+xnn+3LoLZ+/Ujg52j15S93RfwYrv7X/+qvvvKV7sD83my2oHW//OVY4uwTT/SGgobiM6X6uWKF93RFMtSWbd+lSzvC6lhyT5atWSrvgO0tLRNxrM4M5mLOq692pueuXNmVWO4axKbnnutK75U7EJjKqZ4ESwa7hb7PZ6IJQkuwnmr8HA3I6YzzD8Q1dldaEs6BePT2zifmK/1gZNoAevM6qoQKnsAzBiWnA0HSBoknufEi3UcJK1YomGvvqmNBnbNnr+axKIkhNekBaxy9/35fls1RxxdeKIJA32Drpk1DcTGzIcjOpJ8aRS0tk2mhhPWf//OxgKuhqHO1RzzpSqtTIX7oIbDUF8ysPyuja9b0p8Ife+xoKGNf0r+WlunA12uR8belZe3aNZ4BnYdgWoQJ65XhGQSFnDlzPrEeHEog3RwWJS7AdkpG2ZVkenrmksqrF+3fL1APxn3K/gtxOXCg0HoxChLw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rkJggg=='</body><body package="Roassal2-Experimental-Examples">exampleRadarOnSVGMapIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAbjUlEQVR4XuXdB1RUV8IHcEyi8fvWFt1ExQgivXcUhoGh994ZEIaO9C5deu9NQBBEigWi2KKIiih2k2xiEt1E0zfJ7mazSXazJ7v7v9+8587IUBSNwuw395z/AYeBee/+5t773r3vjWKEiH4RpiIm+lUg+iCiX0QfRPRBRL+IPojog4h+EX0Q0QcR/SL6IKIPIvpF9EFEvywYSGd3N/IL8lFQXIzc3FxSUl6OuqZGdHR14fPPP4foE0wBMTOOJtZmSY+MvKwR7G0D4ODohLLBAVRdu0Dyr5zDjrPHUX7iCNJOH4FpeR4qTw5jjTkTG5tLIDXYTmbK+sJUsi43kaxNiyKrTBlYY28Be1cXHD95EkUlJSht34UyLtibb74pklhiW7S9iZVpggCAuXEMMTL0QGPDHgwPH8VrmyQhubeOzFbJzyISndVEPj0WRW0tePfdd58KY6C/D73cFjm4fwCVBXlwsbcDR1MJHA0FpJgaYFde9pz+7tjYGDgcDthsNmoKK55b5TcmlKBaIxpZKoFoiyzFv//9b4hNhlBXsUXvvgH89a9/hVtuOtaFsvF6U9FzheBlNdv1V7eInsYGOL26DNmvLyc53KQ42cCd2/qGyotw+dIloWtx4JZ33nkHuxpb8Mknn0B5gyzEoiLzoK1hAzdXH/zrX//C5CfHVpZCPD4Ua0N88Vt/N7wW6IUN+Sl45q2ju5boGDJw/eaNZ1JpHa27cHBfz3MDuHH9BmpLqzBU04OxwoNQXS+H27dvP/HrvfvO79BY14DRM6M4VLMX+2JqIRYRloPAbam4cePmnP/gzVu34NJQ/sxgJHeVYZO8nFCPGZ9++imi5FzRq5uN0YIBHDxw8Im3d+LiJcTKuuOEfhm5atwyY8QsTOKIl0cMLl68iLratieCcUyM/dUoy3U1EB0fRzVIoQV59+x17NPNRLN/Ht3Pz/ScvTlN+F3VKVDv+pqSKnp/zp8/j6LCIsxW+TOCzHRUpa5iAyOGD6qrGvHBBx/MWlHUz6S0NLA2M/apMDb6uUMuIw4ZRQXPFYPqim92duC7AwO4XlKE7urqJ3q9ypJy5BtEwEBeGx/cfn/a76Y6R/IrvTqvjP5+nFlPngSCD7JFxwu52WX0+HHnzh2oKVvByjSRj6OhaoVffvnlkTtQ0tTwxC1lY2U24o8M4Mjw8HPBGNq1C3l6ukh2sUaGjjYytDShVlZD5JPSSZWGP3p1stDslI27zWPoamznb8OPP/6If/zjHwLbRHVPp0+dRtuuVuyv7UJ5aRm6tdJJipIvLtUNIzMtnQ/Sl9aEPk4VngaDBqEOcRsbWgU2gDphm9xiqMNiR7tI5OfnT6s8u7L8OWFsGmgmpf2PHmipingc/mP76QsX0GjMhEdeFDj16YQXxomz/DSrJ9A7366ZgstGTfzK2F3RhC+++AJDWwvQV9uJGuvUJ6rYS0aNJDcwGb3M3KcHOXbsGL8C6ut2Y3fbINmq480HsTAJ5Y4tdfDzTURf7+C0yjrLPWaX6KqdEUGlrhCl3Z3o379/1koO3smB+RtMsLr14X7HjgT86EEijgQ/FcpQZQWO2FrDIYXDx3BJ525/Qz2ComPAAwm2iH7wbtbLxh/+8Ac01NXjww8/RJVa1FNX5LOKWGlpOSIj4ugK+Omnn+ivf/nLX+DitI1G0dZwwVZut0aNJ7NVxLaCHEzvknIwxn23zqUiy5vKMPBVD+m834r2zvYnxujmdk8HnR0wbGcNizAPPoZ3UigOHToEq6p6TG4hSsHR4PXxZxhVZKERBEAm75immjX09djYqstGRnoJ7t27h6NHj6Gzs+uxldRx6gSkDrXxQUpbmuflqOltTzd8HehPqAzb2SCwbgeN4R4bSL/+rbfeEsCg4mATCmFCmBUkIa5AYOwwZoTSj1OHet6e0XOq4D/+8Y8o6e2et0PYUSd7GuSmhyv2ujoIjBtd3Q/eSLtHzkDO2AxmLBv4GDsLLcY0kB2p+Zh6CGzAbTFGBhz6cS/35AU7V3Aok4S2uRzu/v6uwDYcO3oUx1pacOXqVaSU5PBB6rnTKPyx5Y0hmFkEQn9DKPq4J3b/NSDnz4/hcTO/FeVNC4KiEfIybHsW48bN69Nev6i0FJv9nJBZVgz3nAjsP//wQKW4tAReq8IIe2M0kfbRgKWLJ5JlvYS3y6IqmSps36DHYjw8DE4kYSGJ8wLTlJEKTdNVOHr8CHzTzGDRvATv3RacDb7FncpZndSEmOZ9KBk+j963D8GpnY3Q/fGoaMojO/IyidfScOiMlBHWVwN0StUjfxVKjIwHsg3ySKBJKfQZqfANGiceZhUki1mEAV1uS5V7OnQaJDurmB7A5wrCSy33cPh5g1R5OaGQ44emlgb4XFxCqFi3v4yP730Mt5BA2DXkk41nfiQbR3/iJ+T9VKT8Uk54Sfq5lKh0JEHzcB6NoTmcT3RXKSNLLgJzPb+Y/O9d6onEwqaBRnhUPFiFc0bp0HxwziM2eQ1ktorX03aHsaEnFOVZUJI3QVvrXrg6B8/rIpKzqyOiOs2x91YeCut3wCdJFk3aKlBT1cVkjJUhO/GquwcM820Q9+cCGoQGkipHqVw3mZxC2Q4SLhnC7cL8uCeIzQIVdFy/FLGa0fDwe5OuXEPWTngyd2LrllgEm5bDzn7XY0GoGJsVQUc7HLaqgThlUEFX+mmDShIrkYJUyWJSqhROn5zqvFRJGIv3zDyXxYsl9wxdR9sY1PRJbEzypBPINro1mRhGEF/viHlBoc6N9l9IQ/4+Fg58ZEl4aRpjklc9gvgouhxbhNY4QM3RhrizdKGlKAnD1VYoku0kAeIJ8FsfQ6bCUNkmHifwbg7U3D6nCn+SWDk0Q0Z2AwwW76Yrf6aITZ63mhoJWSmsU15KV35NdRtd8T09+8Cb5igqKoabS9C8tRIKpe6EpQBIfLM6dAc0iJT9OuRXbEFImgbSCvUQmaiDxm5bEpeuj6qRH0jN6N/osOp7YL/WD5HymXSLidBKRZRNElrUE6Z1LxHccSY9+wC6e2//ahymiTo82AaIS7MmVORf2o4ZQTS9VwqMHbo6zjD1NiOGrvpkS/Ar2BL0CgK2hYM6/HVxCsfu3d0LOk3etb9GAITK5StOdK5cdSZdXV1IcdIGy8gMuioKKI7zRkztKfBA2Ds6cO7sOXz33XdwWOuLrOQcxFgETMMY8qmh59VGRkahq/+gtUT5VZBSX0ckecfAzffYnCC8tjUTloUuH4IXlqEhrLUiiO5LtQIwYnrcCqcgNogrQcFqOUxSfkt4ae2qpyv/+vXr+PrrrxcEoogdg2RxFiLFDZEqa4U4q63wTZDFwB0LcvxSCy7eacPE5QmcPHUco2ftSE2tKb7//nsEeLtDW1uXDNYkkKJUT7TWccin79eSzPSZT3CpxaMAByekmHmgRjUaV7hjCrWm8ec//xkunvU0SF1ULvmgKgOfNe0kwymhpCXEE/UhQfzWY2HbSPT0k+DP3EWcWXUwY+RiKzNiGsbkbAtlQuIFV6LyUiqUX0qBmKbPShjFryGTIVRdlpNtqTZkd0f7gi8a1R7Lh5r+BpyVDSO8NEm4oDu1lL9to6Nn0LyrAnfv3sHBQ7E4ddqW9PfXorW9DY7By+DvLQt9XVXoqNjCxT4QvZ2nyY7YdmSEnSNs+yr0dp1GS2M3MhPboaPpCMNUNbJVYiO2WRvQr9Hf34/QdHtU7vUkFXeVSPxBadTtsCPfthXRCXIIB0PTGnZK5ojXz0QJ400SrloJ6y3WJDLenDwKZGrEJkNQUbRegbHx80KzesdutECcDlMApKaiSmD7PvvsMwy9UcN/7Ny5s+jpqQY1jaMsbQRzQ29QzyktqUDu9svkcZGTVycGiuvAVFpL/81vvvkGSUdlUPOJMpmc9HgGKJBDCUEITzZETIQvyQ3JIf4hhk+EMCsIK2kNCQsLFaql1Nbj1fBV1ORj9NkJnpC+9fY7uHzlCvcAo5S7lvEl1NUVuOs27vznjIyMQE/VEdeuXuMuU0/MCJITeYn+aqEfB1vjWHiaRaEu4SiJ9y7H+dFx+m/pO2+ArYEvQiO3kej9m/g4RpxXEWvLgj1bFVLamxGTx4IucxOeCQiVxn0lQrm27ZtYgGruiWjlgcNQza2FSt85wssGTiICAm6T2ca5H374Afl5+fQlN3QX1DeACxfGkZOzE8XF5XjlhUZCRV0plJyZKCTDI9nIDe4gFMpsUTbjdvUcaThmuBNetroZAK9oEipt0opw993y9CDMuDXk4JFeocO4d/8+QjqPwPb8HwiVzUnFAhhUtC12ws1tBDdvvvXE2x/sFkaDKMmE4NCxDHz1w15y68O6R2JQsU9zJZMxqJS9tpkGYdr6wtDOj+hbeeGpQCyiZfD2228JZcvYUtHPx1COK4ZUQsE0EKXOE8TMrBmWHEs4JjKJm58jf1+MfDTBYmthV089uv5zyP7+e+/TF6YNDQ1hw1p5iIsrIqx+J3btjaFBqJy7WoxHgTADTPmtwyzSmrhKS/Fbx47X1YgDJ5XIaz35WCKmF7AaVd1ZQnsJjvWZzwir9zI2BSZAseM4mYrBi6SNJZyTjQgvTklMYu5pwH9MmbkZxxd9Q3hpfnEMRxd9RXTVHImesxfir48SKuH1Gfji+24ydDwL0cHJKIrZMyOMDkMfDuluxMCTgX//B4LKJyuVYWTvDwqEiqyKHrKkX0d0suXcQMorymAQsVroQPYOHgaj/g0oRuZgNoTJ0UhPFgCZGn1XFQEQKv4vpsKro56PMTkxE2+Ssq5OXLt2HdlB7dNQUj1K8csqDT4ElcKl62Fp48vHoMK08EDliytwSmwFImU2gMGQgVugEUysVKBnbEA/V3OLFtgcBt29iVGrgVs4q/HRRx8JDcrpdz+C6cFbZNlKQ6xcw4S0o/VjUbTD3J4YpJExhEsTEzOC8JKYkvJgymj3QaSlcufSQrtonFzPclxYqcDvpj5fqQILr0gyGWNq7DWMkCCjhTXrNkJBi0k/ZrnVDSeUykiZI+dBC3lwwdv7QoNBzZEZNByBhHEanCK2ECqW/ppEydwYm3NqZ4XZtKMMDC91TO6yHgdC5fKpGwjPz5kVxaOtFm1trWhvKMNWWX16OoXaxoG+Pvoiwp9//hk9dl4o/c1GBKmx8CgQKjZ+8WSbejqRXqMGlkswKZMMx4hyFWEHMR6A7AjPBeM1GwwUH8P1azcWHKbgxGUohO7ERvn1fBAqbsVZdOS92TOiSGVwF4cCrRHmZAA9hjis3WVgs32rAMj+RXfJ1HTrnaP32bk0d1YU5x3byfZYdygtS4HOinrS3zkyrZ6Sd2Q+FoMXa1l/+DpyEKTKpjGoZLzuB34Locrf//53lFp3oYnTj48/+njBYORVpaGoJwVDJxUBEJeCdD4KKyKQ21rqaBjlfdx3cYAXjpeFEV4i3begoFidULH3koZFCHca3koe+6/vJDOlrr4WhR2tj+y6qKguyyVKy5Pw+Wcz3/lV0diJsLj0R8JQ84K857fJJPNBqATLeQuuqY+cOUM/OTIyEhKrX4X2RhscO3wSR44NzxtQR3+jAAQvup5O4IHwou3jg9ZkTwEMKhxbPT4IL2nVvrOC7Dnw4IKI3P09AiieHXUwz0+EcUg6lJftgMbyEnLq2MQj62JXZ++MIIb2ftPG6YlLEzTIoHwBydAxgI+cMgRA7ty9y79H5OOPF6aVFNdlgeWhOg1ExZI1DcQ9aDoGlbxoEzIVpKAjmMwGEhlhR69+UuODirctNJNd4dhVAKfxIuJ8sZjoFbOJvmwkqPWYx23/yZNvTgPxDksFNVswY6uSikTppjDEqukhTVsfYiMjZ4RmQP/nP/8JiXRlbN6tQ6SsJWEaYE4M2XZ0TCICaBBGoA9RMjMi6WlBpDzCcRpGlr/lNAzOdm20j6TMiDFwLZcUJvkhM8qbvpxUP8UDFAIvJvkBmHjr2hPVEZPbGngYuSW1j/zd7v9chBinwEI105yIVRRXCtU5yFKpZVhpthYSpapwLcwUaBHx+Ztx98sXSOvu/6FbRmxmALyr4kiIlykS2eZIywoEO9IFKWmKAiABidazdlcFncEwer+dUFHjVn5AcgRMO2PQdHUQV65dfaq6ad3TxwfJKW2Y099gimvCV0MHYhfHLwr8ArUoU1xUBGMNLbiwfTA+Pj6vYBdPdiGTaY63xb8jya8VI0wmg24Zvkl6uHhrEensW0RqWxaRnkFTWJXFIvuncTI5iZ8cha3dBoExxD9yy6wgGntT+CBag9mQUrWj9/fbb79FSX4+IvUZeJqlZmvfWBqkqmZuV+akOkbSq5hi/m4Z9C8UVzXh3r376C8sx6e1HcQvPgYe2amEimt6IjFie8I2IhjnJp7/zZPXj76FdMlMxEskYGzdPZJhYoEcMwuEsdSgu6SNFKoPk5MXgkjAqUYyFSS3xob4+UvRIDsL1Ii16wasaFk1I4Zvsi3hYfCiyVRD/AuLSfILS4jJohdJtKb2U+1vQlYxrHxiSH1d7Zx+X1tRiR6/xTo6OsHiVNI362hqOwA9RwgVFRaT8EAmh+njgR3uYc8dJdbbC1vMlbF1KQv3kzIJlUM+ATSIyZpkGBhLTWsdfsdq8ek1M1KQoUjMXdZjWepyrGh7hVB5nbNuWitRCbLAVBAqBtfqiaKxGoIWLSYnjh9/qn2lBvELFy7AUEUKfXO4ATUrMgq7q6oFj7IuDw3zQahcyC5Fc0oGJoP4bzTCAZlwkhTDQdWtYtLZ2fHccDKbssAsY5FBdiCNksqwpUGU1tmjpKQEHaeH+Ch7ajTIteOGhAL53+RlfIjJ0YxTwNQBXbM3bRqKzvEC+C56CeGbNv/qfRs9fhgTE7MfKlOrkX/729/on8soiguC1FdWCYBQOZKURYOY+HrCztKWdKk6oVHSB+vqf0OkLq0inbV+xM/N5bmhXLl6Bc01D5dn7318T+C1ekaPorGzDYO7denWQUV8+0osS1kB5jYZmIXLg5Ugh4x2C5K9x4o4h2jCzl+bbEuwgxZTGSp+bEhts4d8WTCRT2YTRzkJUN1V+AuLcf/evefeE1An5M7x5SiqbUX/eNdDEOpmnbGsEgGQ71r7SG9UMhwSo4iOnRU+1Qkjn3GzWyqAmGrIg+2hSPJ8LUE99tHvF3Zycqy/HYU7DVFfqo/tgTLY1x9PEutNQCFMTUqjKZHU2sNNJ9GJiSJ6CXF0WItfpjECXnoZ43O82ehZXW/mmliJ7TsKHoJYR+UiansGad+ezEc5EJJAAzTKW+JDLQ79/WxpamhcUBAda3MYhPkTvQBP9B9IJLX1QWQmDCpKjG2gQMRVY8DDoGL84mJkMpgLsh/9AwMIqx1+MHXS1r4boS1HCRVLth2C3JRplD+19D4SYWr6FezRaRmA3739zrzvlC7bDaz4MGIcF0ooEK9IXcwGovm6JKx+q0SsX1WBhKEhH0VdctOCvqlSi+sftJCvvvoKLjuqYc89RGxuX094UVFcjicB4eW6mh85rOzCPXTVx/k3js3LTlJHNFpWDLp1NLeGzdo6qJiIS6NawYPwoqesB/UAf/7gulCFOgekQfb1ZiMqbo0ARrWe/lNhzJTTnAyMjz3/PnlgoBfOoaoISNd7JEiMhIkACJXCnflCMWPxnxbyJTJyHraOhJD1zwyD32oy6uZlh30NViHaYhVxClRGYOYW2HjLTeu6nPTUp4G051cJDwhVLl26+BAkZQ19RPWJdugzAxmsnJ9b4XzMFWiQyUlvs+BjOISpQnefNryjjZElbfsQhpMiXCD0iViOGh+luPw1wlwtTrK0bIhzeT7uaYc8NUaVx/xdDVlXljMNRFb9VdgHKtMgZtsU4PSzA6Gy+jdqNEiBrCNxeG0rvRwrVCBXrkwIjCNUGKH+CDrYRTjhUWiXs37irmxIxWVedzLSz2YaiJ70UqLdoQmrexZEwlkcmi3qNMra/zGGxIt7CC9TPwOyo2U3/vSnP2HBQKiSki4vgOJaW0IoEF70Q/yfCKS6uGzedoi6uHoqBhWbr6wJr1VQMRwxICqhwWTjkkRsXJLCRxkcfIO/rd9+8y0Ohe0ldRW1CwtClcamFFTWraVBrLNTBEDc6kpJnWv4nEEaKuZvsGyuKUaE6cppIAYn9fndlOmIJUIzW4mJZT7EX6gi6xaH0yBSKx5eLNhf0YN9we24kjZKhgaHFh6EKtSNKq4WLEzGmJxCCcM5dV/zeaNP7969iDZhkAhjfUJ9NVeUhcrmdXglzJ1IJQUSh+hEtJ7+mvBCQWx8sY0cOyq4akpBUBmJO7KwY8jU0pF1HfqeQXwUp/I8eMkYgC3LxP05HIGdNOLM+yDpabiVRuHFyN2abH53iI5Cbx0q9r9Lo1Qf+oCL0U7Gx6ev7zT6VNKtY3/ePggVSHvWBPQk4+EWnwru2AHtLYaoNgggVJI36OK8itesreT3WsFk8NChed+hC2NjAiDqVal8EDo53P0JzYaqQgbdVRUX1ghsY0NVPXgtpK+3T7hAbOQyYblkD0mQCyPFaul0XCSNUL7Vj0aJ2DT9bL5a3RbtLbvoj5pdqEPHKNZDkMkYGw9UYOiLrTj/LyOiqeZLd1mlOwU/zPLmzZs0yFjSyYU/7J1a9JdmI2B9Fh+DFx9JF5Ku6UKK9HzIIXkHPsqphk6hOLmyUVfhtxLG3lAwOjiE1ReK3ju6NAYVAyM/DA0dnnF7h3e/gQP7D0DoQKyW7CWRm7djKkikTACilVyI6TptHJwEQt1zIQwgrdVV4Bjo0iADH+nxEXgZ/QeT5BzSIsJYZgU5d/Y8NF8OnNY6eEmW42Dy1MqbvilCdTlRdL4BIoulp2GkW0jRjx0+W4//KpD62ibYv+Y3K0hawxnEWYXSreMNJWdQS5HCtGPXb1zD2V+YZCpI43kNZJR7Ce0NSrOCdO3phvmKmBkxMpRiSdnAB3Q4ztGzfrjwQpeT3zMEMPru6qFnOF+oP0F7VhC2fiXMVoVixu5KIRLePoHYf+ptjE+50E6YyvCJ/ejqr/+v+m8vZgS5/d77sHv5IAmT9sdsXZY7dzAnol/mB6R1VxssuOcfhappAghxCiGw2WCGcv9C3Lp5S/RB5gukueAItJYGC7SOaNkgOEvaiD7CQoCYafrDelWCAEic83ah/h8M/l+DVBQ2QfWlMAGQL7/8UvQxFgJkYuIKPaArLQ6gQYq4oRZ+RL+qFgjkzJlRWC3pITbr7PgtxHeTq+iDLBRIfcEAdJek8jE4Cj6ij7GQIO+9d5vushirnBAm7Ud/3tTkn58/dx4VO8tFH2k+B3VzUysoLwmA6nIfWLMcRb/yhWHq5OzoOVQmHsbSxb9BR1Eb7t+7L/owCwki+kX0QUS/iD6I6IOIfhF9ENEHEf0i+iCiDyL6RfRBRB9E9Ivog4h+EX0QISv/Byc8GhDPYOGSAAAAAElFTkSuQmCC'</body><body package="Roassal2-Experimental-Examples">exampleRadarOnUMLIcon	^ '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Jsux/Av9KBnkMQ8L+QAAAABJRU5ErkJggg=='</body><body package="Roassal2-Experimental-Examples">exampleScaleLogIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADmklEQVR4XuWdS08qQRBG/f//BzescOEKhZ3GDU8fCCoPX7wacyYZ403ExtwBGs+XGIxTGU2drq7qmp72aLXyKyUd+V3gB+KXH4gfiF9+IH4gfvmB+IH45QfiB+KXH4hffiB+IH75gfiB+OUH4gfilx+IH8hqVa/Xg98dfiB++YGkpdlsFiaTSXh6egr9fj/4gexA0+k0jMfj8Pj4GG5vb0Or1QrNZjN0u90MwnA4DM/Pz2E+n/uBFCWcmY/0u7u7zOmNRiNz+mAwCKPRKLy9vQXkn7IKHu04FyfjbJze6XQ+R/rLy0tYLpfBn0MKFk5lxDPNfHV8PtoBs7WkDtWTk5NgTqw4mVGez++9Xi8b8a+vr8FfZW1Ri8XiH+fzxff8jDzgL3u3LEY4iZbpJh/5qThfAYR5n3mekQ8EcgBTsn9huMMIeHh4+ARANGwr4fqBrKl+SLY4HwhEwPv7e/C3TnZcBeF4cgCLLla9f7XoSBYIEMgF1P9UQaxyDVVgUkBoK5ADcgh/aSo6KCBURuSEm5ubrMlm7hDsFUgeDSTplV/7AUKVdH9/n0XEIa0P/hwQQFAh8ZXqKlkDhIgAxP+0pf1ACsoRTE3+iPglECqbItvvtC5I1lRPfhfvOULoK7Gg87s2ASC0NoyLueSA0NYgV/jdmQAQFnU0/vyuTAAIVRRP3/xuTAAIMPxVVCJAiAo/jESAsMjzNwMTAsJzCr/bEgHC6tvvskSA+KepxID4y9uEgPhX4Qe0UvdrC0B+ar/TMPS7yR8hfiDfAfE3DRMDYtkt6J+y/Po9EH+p648Qv/xADgSIf0NbYkDYZeh3jX/K8ssPxA/ELz+QAwfiXxAmAIT2e6VS8YPwT1l++YH4gfjlB+IH4pcfiAGIf3diYkA22Z24aSTVarW92J2fn+/F7uzsrBA7/39HSDFCOJmNz3a7vZZe/vJ//qxk3TMTpj3OuuI6b+SuO24PO67H7BAHlsXseB2bAy5jdjx8Y3tTzI57bXI/duZwzGDMjhec8GHMLgNydXWVXby4uPgxnDg+iT8y//zOhjOvCEuuc99198QxtGtidkyRx8fHUTt2WJ6enkbtLi8vQ7Vajdqh6+vrqB2vaJTL5agd79WUSqWoXQaEs2y/fv4kbHBmzDZ2PT8DfZPfuY/7FW236d/nzyGpVll++YH45QfiB+KXH4gfiF9+IH4gfvmB+IH45Qfilx+IH4hffiB+IH4VpQ8Ov0piikAREgAAAABJRU5ErkJggg=='</body><body package="Roassal2-Experimental-Examples">exampleScatterplotMatrixIcon	^ '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Bq5DjnJ+yP8BKe77/uIF4G0AAAAASUVORK5CYII='</body><body package="Roassal2-Experimental-Examples">exampleSimpleBundleBuilderIcon	^ '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mAAAAABJRU5ErkJggg=='</body><body package="Roassal2-Experimental-Examples">exampleStackExpandIcon	^ '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'</body><body package="Roassal2-Experimental-Examples">exampleStackOnRoassalIcon	^ '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'</body><body package="Roassal2-Experimental-Examples">exampleStackSilhouetteIcon	^ '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'</body><body package="Roassal2-Experimental-Examples">exampleStackWiggleIcon	^ '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'</body><body package="Roassal2-Experimental-Examples">exampleStackZeroIcon	^ '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'</body><body package="Roassal2-Experimental-Examples">exampleTextNamesAndShapesIcon	^ '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'</body></methods><methods><class-id>Roassal2.RTExperimentalExample</class-id> <category>accessing</category><body package="Roassal2-Experimental-Examples">label	^ 'Experimental'</body></methods><methods><class-id>Roassal2.RTExperimentalExample</class-id> <category>utility</category><body package="Roassal2-Experimental-Examples">createExampleButton	| shape base color |"	color := TRPlatform current linearGradientClass new start: 0@ -10.5; stop: 0@10.5;colorRamp: (Array with: (0.0 -&gt; (Color white alpha: 0.4)) with: (1.0 -&gt; Color transparent))."	color := Color blue.	base := Color r: 0 g: 84 b: 85 range: 256.	shape := RTCompositeShape new		add: (RTEllipse new width: 103; height: 50; 			color: Color gray);		add: (RTLabel new text: 'Swap Data'; color: Color white).	"	base := Color r: 0 g: 84 b: 85 range: 256.	shape := RTCompositeShape new		add: (RTEllipse new width: 103; height: 50; 			color: Color gray);		add: (RTEllipse new width: 97; height: 47; 			color: base );		add: (RTEllipse new width: 71; height: 21;			color: color) translateBy: 0@ -10;		add: (RTLabel new text: 'Swap Data'; color: Color white)."			^ shape element.</body><body package="Roassal2-Experimental-Examples">dataFor: dim stack: s	^ s stack: ( (1 to: dim y) collect: [:n | self class bumpLayer: dim x ] )</body><body package="Roassal2-Experimental-Examples">helper: method colorA: colorA colorB: colorB| num m layers0 layers1 s width height x y color area button elements |num := 20."Number of layers"m := 200."Number of samples per layer"width := 960.height := 500.s := RTExperimentalStack new 	offset: method; yourself.layers0 := self dataFor: m@num stack: s.layers1 := self dataFor: m@num stack: s.x := RTScale linear 	domain: (Array with: 1 with: m);	range: (Array with: 0 with: width).y := RTScale linear 	domain: (Array with: 0 with: (self maxYValueFor: layers0 and: layers1));	range: (Array with: height with: 0).color := RTScale linear range: (Array with: colorA with: colorB).area := RTAreaBuilder new 	x: [ :d | x scale: d x  ];	y0: [:d | y scale: d y0 ];	y1: [:d | y scale: d y0 + d y];	data: layers0.area shape color: [ :e | color scale: Random new next ].area interaction highlightColored: Color red.area build.button := self createExampleButton.elements := area view elements.area view add: button.TRConstraint move: button below: elements.button when: TRMouseClick do: [ | temp |	temp := layers0.	layers0 := layers1.	layers1 := temp.	elements doWithIndex: [ :e :i | e model: (layers0 at: i) ].	area view addAnimation: (RTXPSVGAnimation new 		on: elements		during: 2.5		path: area). ].^ area view @ RTDraggableView.</body><body package="Roassal2-Experimental-Examples">maxYValueFor: layers0 and: layers1 	^ ((layers0, layers1) inject: Float fmin 	into: [ :max :arr | arr inject: max into: [:a :each | a max: (each y0 + each y) ] ])</body></methods><methods><class-id>Roassal2.RTExperimentalExample class</class-id> <category>public - generation</category><body package="Roassal2-Experimental-Examples">bumpLayer: n	"This method recibes a number and return an array of random numbers with that size	Inspired by Lee Byron's test data generator."	| rand arr bump |	rand := Random new.	bump := [ :a | | x y z |		x := 1 / (0.1 + rand next).		y := (2 * rand next)-0.5.		z := 10 / (0.1 + rand next).				(1 to: n) do: [ :i | | val w |			w := (((i -1)/n) - y)*z.			val := (a at: i) + (x * ((w negated * w) exp)).			a at: i put: val. ] ].	arr := Array new: n.	(1 to: n) do: [ :i | arr at: i put: 0].	(1 to: 5) do: [ :i | bump value: arr ].		^ arr collectWithIndex: [ :d :i | i@(0 max: d)].</body></methods><methods><class-id>Roassal2.RTSimonTest</class-id> <category>tests</category><body package="Roassal2-Builder-Simon-Tests">testBasic	builder models: (Array with: 10 with: 20 with: 30).	self assert: builder view numberOfElements equals: 3.		self assert: builder view elements anyOne shape class == RTArc.</body><body package="Roassal2-Builder-Simon-Tests">testDefault	self assert: builder view numberOfElements equals: 0</body></methods><methods><class-id>Roassal2.RTSimonTest</class-id> <category>running</category><body package="Roassal2-Builder-Simon-Tests">setUp	super setUp.	builder := RTSimon new</body></methods><methods><class-id>Roassal2.RTConstrainedDraggableTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| v e dragAndConstraint |	v := RTView new.	e := RTBox element.		dragAndConstraint := RTConstrainedDraggable new.	dragAndConstraint rectangle: [ :someElement | 10 @ 10 corner: 200 @ 200 ].	e @ dragAndConstraint.		self assert: (dragAndConstraint rectangle value: nil) equals: (10 @ 10 corner: 200 @ 200).	e translateBy: 5 @ 5. 		self assert: (dragAndConstraint transformDistance: 10 forElement: e) equals: 10.	dragAndConstraint constraintIfNecessary: e.</body><body package="Roassal2-Core-Tests">testThinRectangle	| e1 e2 i v |	e1 := (RTBox new size: 20) element.	e2 := (RTBox new width: 5; height: 20; color: Color blue) element.	i := RTConstrainedDraggable new.	i rectangle: [ :e | e1 position corner: e1 position ].	e2 @ i.		"For debugging"	v := RTView new.	v add: e1; add: e2.			e2 announce: (TRMouseDragging new step: 50 @ 30).	self assert: e2 position equals: 0 @ 0.		e2 announce: (TRMouseDragging new step: -50 @ 30).	self assert: e2 position equals: 0 @ 0.		e2 announce: (TRMouseDragging new step: -50 @ -30).	self assert: e2 position equals: 0 @ 0.		e2 announce: (TRMouseDragging new step: 50 @ -30).	self assert: e2 position equals: 0 @ 0.</body><body package="Roassal2-Core-Tests">testWithParent	| e1 e2 i v |	e1 := (RTBox new size: 20) element.	e2 := (RTBox new size: 5) element.	e2 parentElement: e1.		i := RTConstrainedDraggable new.	i withinParent.	e2 @ i.		"For debugging"	v := RTView new.	v add: e1; add: e2.		"No event is being generated, so no restriction"	e2 translateBy: 50 @ 50.	self assert: e2 position equals: 50 @ 50.</body><body package="Roassal2-Core-Tests">testWithParentWithEvent	| e1 e2 i v |	e1 := (RTBox new size: 20) element.	e2 := (RTBox new size: 5; color: Color blue) element.	e2 parentElement: e1.	i := RTConstrainedDraggable new.	i withinParent.	e2 @ i.		"For debugging"	v := RTView new.	v add: e1; add: e2.			e2 announce: (TRMouseDragging new step: 50 @ 30).	self assert: (e2 position closeTo: 7.5 @ 7.5).		e2 announce: (TRMouseDragging new step: -50 @ 30).	self assert: (e2 position closeTo: -7.5 @ 7.5).		e2 announce: (TRMouseDragging new step: -50 @ -30).	self assert: (e2 position closeTo: -7.5 @ -7.5).		e2 announce: (TRMouseDragging new step: 50 @ -30).	self assert: (e2 position closeTo: 7.5 @ -7.5).</body><body package="Roassal2-Core-Tests">testWithParentWithEventOfSameSize	| e1 e2 i v |	e1 := (RTBox new size: 20) element.	e2 := (RTBox new width: 5; height: 20; color: Color blue) element.	e2 parentElement: e1.	i := RTConstrainedDraggable new.	i withinParent.	e2 @ i.		"For debugging"	v := RTView new.	v add: e1; add: e2.			e2 announce: (TRMouseDragging new step: 50 @ 30).	self assert: e2 position equals: 7.5 @ 0.		e2 announce: (TRMouseDragging new step: -50 @ 30).	self assert: e2 position equals: -7.5 @ 0.		e2 announce: (TRMouseDragging new step: -50 @ -30).	self assert: e2 position equals: -7.5 @ 0.		e2 announce: (TRMouseDragging new step: 50 @ -30).	self assert: e2 position equals: 7.5 @ 0.</body></methods><methods><class-id>Roassal2.TRVIManagedTimeExample</class-id> <category>examples</category><body package="Roassal2-Trachel-Viva-Examples">example01	| v timer t e |	v := RTView new.	timer := TRVITimer new cycleLength: 2.	t := TRVIAnimatedValue new.	t evaluator: [ :time | 0 interpolateTo: 100 at: time ].	t timer: timer.	timer start.	timer repeat.	e := (RTEllipse new size: 30) element.	v add: e.	e translateTo: t @ t.	v addMenu: 'refresh' callback: [ v signalUpdate ].	v</body><body package="Roassal2-Trachel-Viva-Examples">example02	| v timer t e slider |	v := RTView new.	timer := TRVIManualTimer new.	t := TRVIAnimatedValue new.	t evaluator: [ :time | 0 interpolateTo: 100 at: time ].	t timer: timer.		e := (RTEllipse new size: 30) element.	v add: e.	e translateTo: t @ t.		slider := RTSlider new.	slider view: v.	slider labeled.	slider callback: [ :aValue | timer value: aValue  ].	slider build.	slider move: #above.	^ v</body></methods><methods><class-id>Roassal2.RTTimelineExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Timeline-Examples">label	^ 'Time line'</body></methods><methods><class-id>Roassal2.RTTimelineExample</class-id> <category>icons</category><body package="Roassal2-Builder-Timeline-Examples">exampleClassAgesIcon	^ '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'</body><body package="Roassal2-Builder-Timeline-Examples">exampleColorPerEntryIcon	^ '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'</body><body package="Roassal2-Builder-Timeline-Examples">exampleColorPerTimeLineIcon	^ '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'</body><body package="Roassal2-Builder-Timeline-Examples">exampleGantt01Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEJUlEQVR4XuWcSUsrQRSF/YOCCP6N7NyooETciCiCOCLOOKEoDgRBY5wVp2gcQBBxwgF048KF3LzcfvQuPqqfSXeV34EimyNW5+uquqe6UyXZLF82qYT/FfCB8MUHwgfCFx8IHwhffCB8IHzxgfCB8MUHwhcfCB8IX3wgfCB88YHwgfDFB8IHEo5eX18liot8exPJZH7e7u9FfhWQdDodCZCLC5HOzp+3ZJIPhA+kEDo7O5Pn52fhA7EAiMI4PT2VqqoqPhAbgHR3d8v5+bksLS3xgfDXED4QPhA+kOhySBi5hT9CithWVvhA+EC+0/LysvCBWABEc0hfX5/U1NTwgdgARHPI34X0jQ+Ev4bwgfCBuAxkfz8dSR6IqlmfQzY305HcqVE160cIH0hEQG5ubmRtbU34QCzJIfoZj8f5QGzJIZeXl7K4uMgHwl9D+ED4QFzPIbklJvT28FCYB0vv78H+Lz+HFPlJX9DEz5+y+EC+L3339vaED8SiHLKwsMAHYksOSSaT2draWv6UxV9D+ED4QPg5pHA5RN/XKnau4I+QACMk6B3/695c5AOJCMjn56ckEgnhA7EAiJ9DGhsb+UBsAKI55OjoSFzIIfw1hA+ED4QP5B86PDyUTCZj3IL6Dw4OrPJrsxrI3d2dFNN/e3vrtD90IHw5DESzjMv+3d1dsRqIlsOtra3GnWxubpbt7W1n/VNTU1JXV2fnlJXLJN6bjPkeWuVTU1OT51tdXXXSrzks90xITP2hAuno6JCTkxMpLS016pxeiMLr6upy0q8nWIyOjua23lfsmrL0NIeGhgZv2M7Ozhp1rr+/3zsBoqWlxUm/Qmtra5Pq6mqxblHX10mfnp6kp6fHqHP+8N7Y2HDSv76+7vnKy8vFuipLK4yysjJRmeaNkZER74wUF/0Kb35+Pu/7zJECubq68uba3t5emZmZMeqc3oF68fojUZNka5tfK6/29nZJpVLi73RbA0TnT+2Yabm3tbUlx8fHMjc356T/+vpa9LcwAwMDYl0w1GlKy0P9jbppKal34+TkpJN+PRhBi5b6+nqxLqnv7OzI8PCwNzpM/C8vL57X9E60za9TswbF6elpsW7rRGt0XdRM6nStuvRTL17nXdf8qsfHR68UzndAW+RAdHugoqLC+GL81O6XiC76NSgWYvEuKJCPjw+ZmJiQWCwm+Q6Z+S5k+Xejib+ysjKQX/vjTz1BtkNM/X4C10XctJwPdYSMjY1560aQvzENWSrd9xofHzf260jVKs/Ur1+waWgdGhrypuWfJPCiAPn6+hJ/4ywLU2fuGW4Y/6ck6HbI4ODgf2+c8VWEKUtTOP9rswgIX3wgfCB88YHwxQfCB8IXHwgfCF98IHwgfPGB8IHwxQfCFx8IHwhffCB8IHzxgfCB8MUHAtEfxTYBJq0poOcAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Timeline-Examples">exampleLabelledAndColoredIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADRUlEQVR4XuXb2UsqcRjG8f7/qy5bIYhuu2ghKrKiRSsibHUJhtI2csmCFrGnfE8cmhmtI0fLn/N9wAtfasT5zG95a6bv7Y0fl9LHPwV8EH74IHwQfvggfBB++CB8EH74IHwQfvgg/PBB+CD88EH4IPzwQfgg/PBB+CD88EH44YPwQfjhg/BB+OGD8EH+I+VyWeHawIAU1RcfhA/CB3Ea5P7+XrlcTolEQnNzc1paWtLt7a26CbKxIS0uSjMz0uysNDkpra5CQPr7+7W5ual4PK7Ly0u9vr7Wv/xqV0GGh6VYTJqf/wCx2uioNDICnLJeXl7En7L4awgfpB2QnR0pqq+eBHE97YyQk5POoPBB+CB8kF/pQzzP09PTk6IEYlvmlRVpYeGzr1lfdxQk3IccHh7KkKI2QqampNPTz76mfv1pfJw/ZfGnLD4IH6TraacPqf8Zjw/i6lXOB+GD8EGcAwn3IbbtPT8/l2sgzXqJsbEIgoT7kMfHRx0cHMjFERLuJb76/0ikpqxqtSr+lMVfQ/ggroO40EtEDqSdqzyVUs81pHwQPggf5Nf7ENvyXl1d6SdAmvUSQ0N8kG/7kLOzM/3kCAn3EvWP5oPwpyw+CB/EBZBe7yV6BoRylfNB+CB8EOf7kL29vZbvfrfnOKanP57jsPcTE8FtLB+kA31IPp9vGcR6Cf+DNIOD0tYWH4Q/ZfFB+CBOgVB6CSdBbE2xhd//alazjUErtXZ+t1nNbsjoZK1YLLp9oxw/fBA+yFdJp9M6Pj5uaQin6iu4/709Xr27uxuo2f9Z7Jj+WjabDdwHZtne3m7YflsqlUqgZsf337JkyWQySiaTgZo9dx/+XKvt7+831C4uLtydsmxBD58EO1Hhk+V53pvN7/6afbFCodDw5cI1O9bd3V2g9vDwoJubm3+emOvr64afs+M9Pz8Hatb0Hh0dNdSs/wrX1tbW+GtIN2MjzJriv5A20m3U2mgOI/JBfiE2lZVKJS0vL//BsCk6FouJP0K6nFqtpu/e80H4uyx++CB8EH74IHwQfvgg/PBB+CD88EH4IPzwQfgg/PBB+CD88EH44YPwQfjhg/BB+OGD8EH44YPwQfjhg/DDB3E375rcxfOvBJoWAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Timeline-Examples">exampleNestedTimeLineIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACyUlEQVR4XuXc2WryQBjG8d7/FRTaI2nxOgSpSwSpouK+4XaitrhGfdu8H/SgBctMifON/h+Ys6dhml+MyUzp3ccHPz7ljn8K+CD88EH4IPzwQfgg/PBB+CD88EH4IPzwQfjhg/BB+OGD8EH44YPwQfjhg/BB+OGD8PN/Qd7eREjDe5D7exHS4IPwQfggfBA+CB+ED8IH4YPwQfgg7kGWy6XwQTwA6fV6Uq/XZbfbfZvU+7tInOPhwX68vLg7njcg7XZbyuWyJJNJ2W634tMtMAjOn6i4j4dbXOSD8EH4IHwQPggfhA/CB+GD8EEAIE9PIrbj9fX8CYz7eN6D+LDPHYYivl9oqMXFTocPwgfhg/BB+CB8ED4IH4QPwgfhg9wyyH6/Fz6IByBfe+rpdFou+ab++Gg/EgmR5+f4Rr9/BUsnX3vqiei3P51Ocsu3wOhX5S8u8kH4IHwQPggfhA/CB+GD8EH4ICCQv+yBxz2u4sXwXIIgENLAfUJuNXwQKshwOBSb7s/V4lvuOwWRKJPJRLrdrtj0O9FaOaHvFOR4PIqu/k6nUzHt96NHlzAMvenbzt+m7xxkPp+L7o9oTPvValVsjn/pvu38bfpOQQqFgtXE9Koi9Z2B6JdZq9WSbDZrPLnxeCy1Wg3TdwqiED+3b3/LarWSSqWC6TsF0TfUZrNpPDm935L6TkEajYbxo57utedyOdGfIfSdgujkisWi1ZWi91zb75hr7jsD0Y+sfl/on/2Y9Eej0b/ebDYz6q/Xa6u+PulsNhsx7esLnM3x9YFF32NM+05B9GQdDgfrKyWVSln1M5mMcV//v0o+n7c6/mAwMO4vFgsplUri3VqWYmj+ujzAzwU+ITZXLj+eLJ3wwwfhg/DDB+GD8MMH4YPwwwfhhw/CB+GHD8IH4YcPwgfhhw/CB+GHD8IPH4QPwg8fhA/CDx/kRvMJxf6wAB6OMLQAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Timeline-Examples">exampleSimpleGantt2Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAC5UlEQVR4XuXcy2rqUBSH8b6LT+jQkb6AIGKhE2fOFMGRU3HiDRHvVxC8X/E2UdHlcTtKoocjNa3J+f4QpKtmR/NLdrpq2o/LhR8r5YO/C/gg/PBB+CD88EH4IPzwQfgg/PBB+CD88EH44YPwQfjhg/BB+OGD8EH44YPwQfjhg/DDB+GD8MMH4YPwwwfhg3wjq9VKvrvu15eIcWk0xNTxHi31+v02XlmXD8IH4YPwQfggjzMajSSVSonf7xen0ynb7Vbcbjcf5F0gDodDvF6v+Hw+yeVyUqlUxOVyCR+EP2XxQfggfBA+yDtBrpckMS7zuZg63rPbeGXd/wbkN/Lskc8/Q/ggfBA+CB/k5zv1RCIhwWBQ+CAW6dT3+72Ew2E+iFWmrNPpJPwpi38N4YPwQfggP5JnO3B+p26zI9rs8EH4IHwQPggBxNipJ5NJCYVCwgexSKderVal3W7zQfhTFh+ED8IH4YNYDsSqnbVtQD4/V6Ye0a/cdWKn8EH4IHwQPggBxNipq8aQD2KhTp1/hvCnLD4IH4QPwgcxK8nkCtFZ2wZkMBjc/u5Quzyq9fv9p2qvrPuo1uv1TK0tl0tr3+TADx+ED/K3NJtNqdVqT53CjevVWvv1+XyWfD6vq43HY1Fjamvq00k1dWhr2Wz2NrUZt7HZbHQ1NX65XNbVWq2WFItFXW1+vXCpbc9mM9HW1GOpVLqrPdq2JUDUr96NO0G9WOML7na7FzW/a2vD4VAWi8XdGzPW1Fjr9VpX2+12Mp1O/7lTJpPJ3fPUeOqGcW0tnU7f7WhVUweN9gBRNfV+69cPWfhT1psSiUQkEAhIJpO5YcRiMYnH41IoFER9jw/yy1E7v9PpiMfjuWFEo1H1nyz4Z8i7czwedQiHw0H4IPyfsvjhg/BB+OGD8MMH4YPwwwfhg/DDB+GD8MMH4YPwwwfhg/DDB+GHD8IH4YcPwgfhhw/CB+GHD8IH4YcPwg8fxB75A+4RqV/eY8yIAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Timeline-Examples">exampleSimpleGanttIcon	^ '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'</body><body package="Roassal2-Builder-Timeline-Examples">exampleThresholdLinesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEJElEQVR4XuWcWy9rQRzFfTWPPoBvwCfAi3hweyEuER7QuFekCA4ROQ51bSh1qVRIvbg2LolUjgcVluO/cyQkJzXb6W7/Y61k0pfVdu/9m/nPrJmmeS8v/NKkPP5HwA+EX/xA+IHwix8IPxB+8QPhB8IvfiD8QPjFD4Rf/ED4gfCLHwg/EH7xA+EHwi9+IPxAsqObmxvk4iZvb4FYLDPtWwGJRqM5AXJwALS3Z6bxA+EHklmdn5+DH4gCII2NjUgmk/D5fPxANACpqKjA8fExamtr+YHwzyH8QPiB8APJTQ7xOrfwjxCPGz8QfiDpdXd3B34ginJIfn4+PxAtOeTo6AglJSX8QPjnEH4g/EBsBBL/+QtJX4Cm/Q6GdQMJhaI566m5aMEg+IHwA3FxHsIPREEOqamp4QeiJYecnJygqqqKHwj/HMIPhB+IjUBymUMQ+P+W8rv7zsQP/hzi6UnfVxI/PxB+IOmVSCTAD0RRDuno6OAHoiWHbG9vo6CggB8I/xzCD4QfiI1AIpEo9veRk/av65Hfa2XiczIp6hGSjR7PD4QfSHo9Pj6CH4iiHLKxscEPREsOkdPC4uJifiD8cwg/EH4gNgKRrZRYLGbc3Pq3trZU+aWpBnJ2dgYv/aenp1b7sw6EX8qAFBUVGfeYcDiM9xnGNv/DwwNUAxkYGEBpaSmWl5eNLnRpaQmRSARTU1PW+eVQrqmpCWtrazpL1sLCggOi/XWZ8pk3lUo5Ny3vkXBpm1/C8MrKCkZHRzE0NKQPSG9vL2ZnZ9Hc3PzpxQk06VWLi4vw+/3W+UXj4+O4v79HT0+PvpIlvUVeV1dXjS5OemNdXZ3Tw2z0i0+ATExM4Pn5WReQ6+trZ5i7ec/f0mCt/22uUbnKOniNwaYXJ2VB/CY1Wqt/eHgYlZWVULfslV+7y7Dt7u42GrayGywTYF9fHy4uLqzzSzmem5tzOp/ctyog8/Pzzs20tbW5Wt+//8cgm/wCb3d313jpnFUge3t7WF9fx+bmJkzhtbS0YHBw0Eq/aGZmBp2dnVCX1OPxOOrr6xEKhYwvToLT2NiYlX68Ss56BKK6rZO39bkMdRO/pFipt8Fg0Dq/eN9KmmQTdXtZUqImJychQ9dNajd9WBr9Mor6+/s9Oxf5EpDLy0undlZXV3/47e5niV1e5W//RJ/5y8rKXPll2SnZx9Tf0NBg/PlXV1fo6upyVo2tra2eHlJ9eYSMjIwYT+Dvl4im3unpaQQCAWN/YWGhq9VdeXn5hz/oTCfZGJXSLK9ebzW5AvL09ISdnR3XCfw7yGRjNOtADg8Pnfrppubyy+OSJbWU/7EpnEP4xQ+EHwi/+IHwA+F/BPxA+MUPhB8Iv/iB8APhFz8QfiD84gfCD4Rf/ED4xQ+EHwi/+IHwA+EXP5Bvrj8Ikrxg3UeEpgAAAABJRU5ErkJggg=='</body></methods><methods><class-id>Roassal2.RTTimelineExample</class-id> <category>sources</category><body package="Roassal2-Builder-Timeline-Examples">exampleClassAges	| data b s |	data := (RTShape withAllSubclasses sortedAs: #ageInDaysRounded) select: #hasMethods.	b := RTTimeline new.	b extent: 400 @ 600.	s := RTTimelineSet new.	s objects: data.	s start: [ :cls |  cls computeYoungestMethod ageInDays ].	s end: [ :cls | cls computeOldestMethod ageInDays ].	b add: s.	b build.^ b view</body><body package="Roassal2-Builder-Timeline-Examples">exampleColorPerEntry	| data normalizer b s d |	data := #(#(c1 0 5) #(c1 6 8) #(c2 0 5) #(c2 8 10) #(c3 0 10) #(c4 5 10) #(c5 5 8)).	normalizer := RTMultiLinearColorForIdentity new objects: data.	b := RTTimeline new.		s := RTTimelineSet new.	s objects: data.	s shape color: normalizer.	s lineIdentifier: #first.	s start: #second.	s end: #third.	b add: s.		b axisX 		numberOfLabels: 5;		labelRotation: -45;		labelConversion: [ :v | Date year: 2015 day: v ]. 	d := RTVerticalTickLineDecorator new.	d shape line color: Color white.	b addDecorator: d.	b build.^ b view</body><body package="Roassal2-Builder-Timeline-Examples">exampleColorPerTimeLine		| data normalizer b s d |	data := #(#(c1 0 5) #(c1 6 8) #(c2 0 5) #(c2 8 10) #(c3 0 10) #(c4 5 10) #(c5 5 8)).	normalizer := RTMultiLinearColorForIdentity new objects: #(c1 c2 c3 c4 c5); command: #first.	b := RTTimeline new.		s := RTTimelineSet new.	s objects: data.	s shape color: normalizer.	s lineIdentifier: #first.	s start: #second.	s end: #third.	b add: s.		b axisX 		numberOfLabels: 5;		labelRotation: -45;		labelConversion: [ :v | Date year: 2015 day: v ]. 	d := RTVerticalTickLineDecorator new.	d shape line color: Color white.	b addDecorator: d.	b build.^ b view</body><body package="Roassal2-Builder-Timeline-Examples">exampleGantt01	| data b s |	data := #(#(c1 0 5) #(c1 6 8) #(c2 0 5) #(c2 8 10) #(c3 0 10) #(c4 5 10) #(c5 5 8)).	b := RTTimeline new.		s := RTTimelineSet new.	s objects: data.	s lineIdentifier: #first.	s start: #second.	s end: #third.	b add: s.		b axisX 		numberOfLabels: 5;		labelRotation: -45;		labelConversion: [ :v | Date year: 2015 day: v ]. 		b build.	^ b view</body><body package="Roassal2-Builder-Timeline-Examples">exampleLabelledAndColored| b s data |data := #(     #(WP1 1 3)      #(WP2 3 6)     #(WP3 6 9)         #(WP4 9 12)     #(WP5 1 12)    ).b := RTTimeline new.s := RTTimelineSet new.s shape box 	color: Color blue trans;	withText: #first;	withTextColor: Color white.s objects: data.s lineIdentifier: #first.s start: #second.s end: #third.b add: s.b axisX	noDecimal;	title: 'Month';	numberOfLabels: 12.b build.^ b view</body><body package="Roassal2-Builder-Timeline-Examples">exampleNestedTimeLine	| b s data |	data := #(#(c1 0 5 1) #(c1 3 8 2) #(c2 0 9 1) #(c2 3 5 2) #(c2 6 8 2)).	b := RTTimeline new.		s := RTSubTimelineSet new.	s objects: data.	s lineIdentifier: #first.	s start: #second.	s end: #third.	s level: #fourth.	b add: s.		b axisX 		numberOfLabels: 5;		labelRotation: -45;		labelConversion: [ :v | Date year: 2015 day: v ]. 	^ b</body><body package="Roassal2-Builder-Timeline-Examples">exampleSimpleGantt	| data b s d |	data := #(#(WP1 0 5) #(WP2 5 8) #(WP3 7 10)).	b := RTTimeline new.		s := RTTimelineSet new.	s objects: data.	s lineIdentifier: #first.	s start: #second.	s end: #third.	b add: s.		b axisX 		numberOfLabels: 5;		labelRotation: -45;		labelConversion: [ :v | Date year: 2015 day: v ]. 	d := RTVerticalTickLineDecorator new.	d shape line color: Color white.	b addDecorator: d.	b build.^ b view</body><body package="Roassal2-Builder-Timeline-Examples">exampleSimpleGantt2| b s data |data := #(     #(WP1 0 4)      #(WP2 4 8)     #(WP3 8 12)         #(WP4 3 4)     #(WP4 7 9)     #(WP4 10 12)     ).b := RTTimeline new.s := RTTimelineSet new.s objects: data.s lineIdentifier: #first.s start: #second.s end: #third.b add: s.b axisX	noDecimal;	title: 'Month';	numberOfLabels: 12.b build.^ b view</body><body package="Roassal2-Builder-Timeline-Examples">exampleThresholdLines	| data b s p |	data := #(#(c1 0 5) #(c1 6 8) #(c2 0 5) #(c2 8 10) #(c3 0 10) #(c4 5 10) #(c5 5 8)).	b := RTTimeline new.		s := RTTimelineSet new.	s objects: data.	s lineIdentifier: #first.	s start: #second.	s end: #third.	b add: s.		b axisX 		numberOfLabels: 5;		labelRotation: -45;		labelConversion: [ :v | Date year: 2015 day: v ]. 	p := RTHorizontalTimelineDecorator new.	p addLineAboveIdentifier: #c3.	p addLineAboveIdentifier: #c2.	p shape line width: 1; color: (Color red).	b addDecorator: p.	b build.	^ b view</body></methods><methods><class-id>Roassal2.RTLayoutTranslatorTest</class-id> <category>tests</category><body package="Roassal2-Layouts-Tests">testDefault	RTLayoutTranslator allSubclasses detect: #isDefault.	RTLayoutTranslator allSubclasses reverse detect: #isDefault.</body><body package="Roassal2-Layouts-Tests">testIsDefault	self deny: RTLayoutTranslator isDefault</body></methods><methods><class-id>Roassal2.RTDraggableTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testDragAndDropOtherElement	e1 @ RTDraggable.	e2 announce: (TRMouseDragging new step: 10 @ 15).	self assert: e1 position = (0 @ 0).	self assert: e2 position = (0 @ 0).</body><body package="Roassal2-Core-Tests">testGroupedDragAndDrop	e1 @ (RTDraggable groupToDrag: (Array with: e1 with: e2 with: e3)).	e1 announce: (TRMouseDragging new step: 10 @ 15).	self assert: (e1 position closeTo: (10 @ 15)).	self assert: (e2 position closeTo: (10 @ 15)).	self assert: (e3 position closeTo: (10 @ 15)).</body><body package="Roassal2-Core-Tests">testGroupedDragAndDrop2	e2 translateBy: 5 @ 5.	e3 translateBy: 10 @ 10.		e1 @ (RTDraggable groupToDrag: (Array with: e1 with: e2 with: e3)).	e1 announce: (TRMouseDragging new step: 10 @ 15).	self assert: (e1 position closeTo: (10 @ 15)).	self assert: (e2 position closeTo: (15 @ 20)).	self assert: (e3 position closeTo: (20 @ 25)).</body><body package="Roassal2-Core-Tests">testGroupedDragAndDrop3	e2 translateBy: 5 @ 5.	e3 translateBy: 10 @ 10.		e1 @ (RTDraggable groupToDrag: (Array with: e2 with: e3)).	e1 announce: (TRMouseDragging new step: 10 @ 15).	self assert: (e1 position closeTo: (10 @ 15)).	self assert: (e2 position closeTo: (15 @ 20)).	self assert: (e3 position closeTo: (20 @ 25)).</body><body package="Roassal2-Core-Tests">testGroupedDragAndDrop4		e1 @ (RTDraggable groupToDrag: (Array with: e2 with: e3)).	e2 translateBy: 5 @ 5.	e3 translateBy: 10 @ 10.	e1 announce: (TRMouseDragging new step: 10 @ 15).	self assert: (e1 position closeTo: (10 @ 15)).	self assert: (e2 position closeTo: (15 @ 20)).	self assert: (e3 position closeTo: (20 @ 25))</body><body package="Roassal2-Core-Tests">testGroupedDragAndDrop5		| oldPosition |	oldPosition := e1 position.	(RTGroup withAll: (Array with: e2 with: e3 with: e1)) @ (RTDraggable groupToDrag: (Array with: e1 with: e2 with: e3)).	e2 translateBy: 5 @ 5.	e3 translateBy: 10 @ 10.	e2 announce: (TRMouseDragging new step: 5 @ 5).	e3 announce: (TRMouseDragging new step: 10 @ 15).	self assert: (e1 position closeTo: (oldPosition + (5 @ 5) + (10 @ 15)))</body><body package="Roassal2-Core-Tests">testNoDragAndDrop	e1 announce: (TRMouseDragging new step: 10 @ 15).	self assert: e1 position = (0 @ 0)</body><body package="Roassal2-Core-Tests">testSimpleDragAndDrop	e1 @ RTDraggable.	e1 announce: (TRMouseDragging new step: 10 @ 15).	self assert: (e1 position closeTo: (10 @ 15))</body></methods><methods><class-id>Roassal2.RTDraggableTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	v := RTView new.	e1 := RTBox element.	e2 := RTBox element.	e3 := RTBox element.	v add: e1; add: e2; add: e3</body></methods><methods><class-id>Roassal2.TRPolygonShapeTest</class-id> <category>tests</category><body package="Roassal2-Trachel-Tests">testBasic	| s |	s := TRPolygonShape new.	self assert: s numberOfVertices equals: 0.	self assert: s vertices equals: #().	self assert: s encompassingRectangle equals: ((0 @ 0) corner: (0 @ 0))</body><body package="Roassal2-Trachel-Tests">testPainting	| c s |	c := TRCanvas new.	s :=  TRPolygonShape new.	c addShape: s.	c buildMorph drawOnMockCanvas</body><body package="Roassal2-Trachel-Tests">testTranslationAndEmpty	| c s |	c := TRCanvas new.	s :=  TRPolygonShape new.	s color: nil.	s vertices: (Array with: 10@10 with: 0@0 with: 10@0).	c addShape: s.	s translateBy: 3 @ 3.	s :=  TRPolygonShape new.	s color: nil.	s vertices: (Array with: 10@10 with: 0@0 with: 10@0).	c addShape: s.		c buildMorph drawOnMockCanvas</body></methods><methods><class-id>Roassal2.RTExamplesBrowser</class-id> <category>initialize-release</category><body package="Roassal2-Examples-Extentions">initialize	super initialize.	examples := ((RTAbstractExample subclasses collect: #new) 		sorted: [:x :y| x label &lt; y label] ) select: [:ex | | methods |			methods := ex class rtmethods select: [:met| 			(('example*' match: met selector) and: [('*Icon' match: met selector) not ]) ].			methods notEmpty ]</body></methods><methods><class-id>Roassal2.RTExamplesBrowser</class-id> <category>aspects</category><body package="Roassal2-Examples-Extentions">menuExamples	^ menuExamples isNil ifTrue:[ | list scroll |				composite := Panel new.		composite beGrid.		scroll := (BorderDecorator on: composite) useHorizontalScrollbar.		builder composite add: scroll borderedIn: ((LayoutFrame new)			leftFraction: 0 offset: 220; 			rightFraction: 1; 			topFraction: 0; 			bottomFraction: 1).				list := List new.		list addAll: (examples collect: #label).				menuExamples := SelectionInList with: list.		menuExamples selectionIndexHolder			onChangeSend: #selectExample			to: self.		menuExamples selectionIndex: (list size /2) asInteger.		]		ifFalse: [menuExamples]</body></methods><methods><class-id>Roassal2.RTExamplesBrowser</class-id> <category>actions</category><body package="Roassal2-Examples-Extentions">selectExample	| example methods icon64Mime form selIndex |	selIndex := self menuExamples selectionIndex.	selIndex = 0 ifTrue: [^ self].	example := examples at: selIndex.	methods := example class rtmethods select: [:met| 		(('example*' match: met selector) and: [('*Icon' match: met selector) not ]) 			or: [ (met isKindOf: AnnotatedMethod) and: [ met hasAttributeSelector: #gtExample]  ] ] .			composite removeAll: composite components copy.	methods doWithIndex: [:m :index | |  button | 		[ icon64Mime := example perform: (m selector, #Icon) asSymbol.		form :=  TRPlatform current formFromStream: icon64Mime readStream.		button := LabelAndIcon new			icon: form asImage.		button := ActionButtonView new			label:form asImage;			action: [ | browser |				browser := RTExampleBrowser new.				browser example: m.				RTExampleBrowser openOn: browser. ];			tooltip: m class name asString, '&gt;&gt; #', m selector;			hasBorder: false.		composite add: button ] on: Error do: [].		].</body></methods><methods><class-id>Roassal2.RTExamplesBrowser class</class-id> <category>images</category><body package="Roassal2-Examples-Extentions">errorImage	^ ''</body></methods><methods><class-id>Roassal2.RTPolyLineSegmentsTest</class-id> <category>tests</category><body package="Roassal2-Tests">testLength	| segment segments |	segment := RTLineSegment from: 0 @ 0 to: 8 @ 6.	segments := RTPolyLineSegment with: segment.	self assert: segments length equals: 10.	segments := RTPolyLineSegment		with: (RTLineSegment from: 0 @ 0 to: 10 @ 0)		with: (RTLineSegment from: 10 @ 0 to: 10 @ 5).	self assert: segments length equals: 15</body><body package="Roassal2-Tests">testSegmentWithPointAbsolute	| segments |	segments := RTPolyLineSegment		with: (RTLineSegment from: 0 @ 0 to: 8 @ 6)		with: (RTLineSegment from: 8 @ 6 to: 16 @ 0).	self		assert: (segments segmentWithPointFor: 5)		equals: (Array with: segments first with: 4 @ 3).	self		assert: (segments segmentWithPointFor: 10)		equals: (Array with: segments first with: 8 @ 6).	self		assert: (segments segmentWithPointFor: 15)		equals: (Array with: segments second with: 12 @ 3).	self		assert: (segments segmentWithPointFor: 20)		equals: (Array with: segments second with: 16 @ 0)</body><body package="Roassal2-Tests">testSegmentWithPointNegative	| segments |	segments := RTPolyLineSegment		with: (RTLineSegment from: 0 @ 0 to: 8 @ 6)		with: (RTLineSegment from: 8 @ 6 to: 16 @ 0).	self		assert: (segments segmentWithPointFor: -20)		equals: (Array with: segments first with: 0 @ 0).	self		assert: (segments segmentWithPointFor: -15)		equals: (Array with: segments first with: 4 @ 3).	self		assert: (segments segmentWithPointFor: -10)		equals: (Array with: segments first with: 8 @ 6).	self		assert: (segments segmentWithPointFor: -5)		equals: (Array with: segments second with: 12 @ 3)</body><body package="Roassal2-Tests">testSegmentWithPointRelative	| segment segments |	segment := RTLineSegment from: 0 @ 0 to: 8 @ 6.	segments := RTPolyLineSegment with: segment.	self assert: (segments segmentWithPointFor: 0) equals: (Array with: segment with: 0 @ 0).	self assert: (segments segmentWithPointFor: 0.5) equals: (Array with: segment with: 4 @ 3).	self assert: (segments segmentWithPointFor: 1) equals: (Array with: segment with: 8 @ 6)</body></methods><methods><class-id>Roassal2.RTGrapherScatterplotExample</class-id> <category>icons</category><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleAgeOfRoassalAndTrachelIcon	^ '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'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleCrossesIcon	^ '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'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDateOnXAxis2Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADKklEQVR4XuXczUtqQRzGcf+5/pkWLjNpYS4KdRFtglAUCSNcCBYVGpEpJb6BIkobXZmGIYovkBL8jDmXe7lw48qxPCN9H4ha9NB4Puo4M3Rs8zk/6xQb/xLwQfjhg/BB+OGD8EH44YPwQfjhg/BB+OGD8MMH4YPwwwfhg/DDB+GD8MMH4YPwwwfhxzqQdrstf3/nRyOI1+uVi4sLA2IwGEi/3/8HZTgcSrVanfd6PQyYzaYJJJPJyPb2tuRyOXG5XKLy2e/VajX+q2ed5hA+CB+ED8IH4YPwQfggfBBLPn7yQfhZHcjb25txsZ+fn4UPohmk2WxKvV43LvbW1tanF12t1FOpFGqlrg1kNBpJPp83Vuput1tmsxl/pc6fQ/ggprO52eWD8EH4IPy3LD4IH4QPwgfhg5jK7wXf/87U+SAWghweHi48U+ev1C0CeXp6ErVlwj9T588hfBA+CB+ED8IH4YPwQfggfBA+iJUg4/GYf6a+TiA+n49/pr4uIOVyWTY2Nvhn6vw5hA/CB+GD8EH4IHwQPggfhA/CB7EUpNvtLjxTL5VK8tWdgJ/Y/XaQ3d1dY0Gofl50pv7w8CCVSsX01+3t7XyZns5uoVDQ8wq5u7uTvb29hWfqr6+vSz/bfnKXf68T/qT+a/NxMpkIv6sZRM0dDodDAoGAOJ1O4Xc1gZyensrBwYHc398bg4rFYsLvagJRH33f39+NwV1dXQm/qwmkWCzK+fm5tFotY1DX19fC72oAUWuLo6MjsdvtEo/H/wyQ39UAcnx8LOr9c39/X8w+Q2jdlYJks1k5OTkRtR1i9rZ+tO5KQdTkpf4nfWdnRxqNhqTTaeF3NYCovZnLy0tjYMFgUPhdjSDqJpdnZ2cSCoWM908ruureKTq6X328KwNRG2NqQJFIxBhQIpGQ6XQqVnRvbm6ML6u7Ho9HHh8fTXctAel0OpJMJsXv94vaDjDzB76jGw6HTV+M7+hGo1F5eXmRtdxcXOaBUbtrsw7hhw/CB+GHD8IH4YcPwg8fhA/CDx+ED8IPH4QPwg8fhA/CDx+EHz4IH4QfPggfhB8+CB+En1XlA+KfYhAltsKuAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDateOnXAxisIcon	^ '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0U/6AdFM/wHYRxAyEaJaiwAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleSeismDepthAndMagIcon	^ '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H3lF1g9+YtrbAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplescatterPlotsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAKc0lEQVR4XuWdC1BU1xnHLwZjRq1Nm0wyPjKNJlMbsc40JjrTmjbYJhIxMzVO0NSoGSWOBhtqnEYZo6C8BKNiA4jxAYIpoFZBERDkJQKrKIiFDS5U0fpAKiYKi4jwp+e7NxcvsKtiYLnL983cWXb3nHPvnt/5Huc7516k1lb+oieR+HcBfyD8hT8Q/kD4C38g/IHwF/5A+APhL/yB8AfCX/gD4S/8gfAHwl/4A+EPhL/wB8IfSHuJjY3FvXv3EBUVhezsbOTl5YE+Dw0NBf/u7AUgBMNgMMhAGhsbERgYiAsXLqC+vr4dEAg5e/Zs6/nz53sEVEUFQAd7IATDbDYjOTkZ1NklJSUwGo2ytnQs21Mw+GvIYwp/IPyB8AfCHwh/IPyB8AfCHwh/IPyB8AfCX/gD4Q+EPxD+QDpLcbH95LzsGsjNmwAdDyvX0NBHgRw7dgwnT57Etm3bcPXqVRw/flz+oevWrZOTjNu3b4cegfRpk7Vv3z4EBwcjISEB06ZNkzsjMjJSBhIfH9/WOZR+z8/P5+9HehIIaURdXR0yMzNx8eJFmEwmlJWVoaamhtY+UFBQ0KMaIk4nzqVoBJkh8g32ZI76nA/RAtGbo75zp3uuh3/Y201SWQl0BxS7AiJiiT65bMtfQ/gD6Vkhv6L6Fv5AdACkpQWggz+QXgRiT+kQFkDMZv5A+Dt1/kAe7jvImfelXYx9Agh/DeFvsvQDJC0tTe7kjIwMSuhix44d8nt/f/9e39vbFyKvLgOh9ZBbt25h/vz58Pb2bk1KSpI7ISsrC83NzTZLv4skc6d2bZkBhgjzdAGkUmTR6DYEAaCVbkOgVDyl4Kurq22qIcnJoD5Bb2kFnZi/D9GIUEz+8xC9TQzpEBaUf5SlByBffaWsP9A6RMfvumuxiD+QbhBrkPgD4T8P4QOE0iShoV3TAjUk1ntwYbdA9u/nH2XpBogeF6RI+7pjScAuNzl0Zcn2UbLAj9qeLeY+fd6pPwoQPWlcnwDCfz1EB0B6K3VibdLZazsXL1++LGd76ZXeX7t2DernttaQntr9rtU42bkIe/awSSclO7vjWroMpEEE9E1NTfD19W07OW2yplsUtOVssfvdFrcjaIHo0mQRCHoi0Jo1a3DixAm4uLggPT0dfn5+NtWQHxtikgaoZq+nJo2sfEjHieGjro2opoheLZmg3r4JyG6BiJVjWNOcB4HRgqSOv3q1/e0NXQGinb8UFXXPSqUugXTcTWJpnjBpUvv3P5j6R7rfkLRDWFmcPn0fiMFgua7WtFm6ToJ3+DAQHd09cxmbAOnqUmtHIJZm0nFx7fdj0ffXr1vvlI5tqiZLC8pSvcTE+ykRaxNIaic2to+kTqyBsvS5VgtWrlT+1naQ+r22o9V0y8P2cFlz7FrtoPq02Ub7PQ2CrCxgyxY7BaKdUVPHpaR0/hH0w0QA1+nztDSgtlb5nDSEOkftZFULH3eBSgXyzTfAuXPtNU8LXe10Hx/lNScHOHoUWLECqKqycyAklrbzWJuoZWYqP546nXyI6ny1pqu0FKBJmlr30iWAjgfN8AnGokWWAWjfq6ZTq4FqEDBvHnDmjJ0BUfdM0Q9SO1EdcVp1v2usgKW0hDYqGjoUWLVKaU/bTsco6UFA6HrofUP+aWzdbEZhYed9wtrrIjCkPaSpubmKJlIbdLz5JnDokM6BlJdfaLtA1QSRigcGKj+MRhttVqDP6TO18y9nV7Qza0eOKKN0927xo/2KUVxghpMTQNpAbVBbFHZSGdIgKqdqi0gitBvx5FM6mqlb4dHw821BSYnynkwP+QYqo2oOidF435Tu3QuQw4+KUs4xbBgQHq5zIDExN9rWL6IilJ1+NFo/+gjYuRP424fX8bG7kpa4EZMES4k66kwaudTG3LkimvE14YbBhDeGmjByJJCdrXQ4vW7dqmgKAaTzGlJr4besFgEBCjDqbHX+MmMGQIODoIS8nYRZs5RVSGqruvo+kLKZa1BvrJL/jo//Ib8lKpXHF8maSOHzxo3A4MHKq66BfPttldyRNIK2LVF2+gUFAW+NMuHvHvVwnVANpzEtcpmEhPumIvdog9xR1IOnM27i1Cmlo+rrgQ3uZYjxNmHisyZMnaqYJzIdIqMj+w7SioMHlXayNhVhwWtFWLwYoNG9fLkCgYBPnKjYfDJ7y5YBC91q5fNTue3bWpCYoAyU0PXmtkBi3DhlHxjBdXq5QfYbbm6AhwfQvz+waWGZvoGELTTggrEBcf4mLBmxH+tmnIDraBMmPGPCohcOIuhpf/TrB9DII7NDdRq/v4ONSyoRF9ssD/f/pFfCY1IxCuaGweeXMVg8IhHxz32Cvwzcj+HDgffeAyIjgTlzFEdPUZsaAWWFFGHer/KxdHKxPOK9vETCM9OMKynFmD4dmDlT6Uxvb+EXnnJFzBdGeXB8uaIGGfGKB/981B78Y+QG1NUBzs5KeGtI+w5eDgF49RUzRv+iQQ4IXPsl4eDU8N4DcuXKFShx+HWrF7F5TgFMiWW48evfI2mwGz5+8QjCf7ocvo7e2DFuE6Ic5uH5J2oQHKyYC5o5X6k0Y9dnxQiZU4jUgEIsXQr8dnwDZkyuxYwBiQhz8IBb/39hteSD1yUDPhySgC3PrcLYsUDQSxFwGvEdHB0ha9WqDyoQ5vhXvPGaGWfPAkveMcnmLCH6e4xzLEXkK+sQFgYsWADsfcINGRM/R35wDnLHe+La2q9xNzsPXw/3RuRIH9mvLH+/EnN/cwanlkbjjwNysPLFaLz180L82aVBHlgpIxb86LnIYwGhjdUqCB8xHCnz2yltLSRx9KetuQP/gGMDnNEs9cMdaQD+Jz0DSA5olJ6EWRqI2VIMxowx44OnD2DPniq4z/4vfJ7fAL9hXyJ1yLsolMZjlFSB2Q4xSHFwQb00SG6rXtQtlcZgp6M7/CUvYTKa8eqgf8P5J3kYNOguNm26BPchu3FK1D/85Ls46rkdoWM3YMJwE3Y6ecvXcLjfO2J0X8NkAfuS9AIifxeIt8eUoElyhPHTAJR/5oNa6WdIf/0TGLJLMfulNLg+lYrpz6YhTfoT/inNQoiDJwYOvAdJakGTgyNoecLmQFqEQV+9erWcfl+7di3osU2WytEjnB73ArnVtYkP4S86AUJLvIUiVpX9yObNwk6HPXDU0P0m9AwuWuSilUdn4T13i8nEJREj0/dnRDjkJTzyVhHXdqxbJYz7fuGA6DledK4cEUbdvn0bERERcllaPNu1axfojq+OdQ8cOCA/iI3qxolcTEhISFtZ+g8Q1Ia1ukr6Jg7K/MQoJoWH5Ie70U1Myqy+BtoyvQqEnqlFd1TR87TCxWxJve3NmqhLwtS5dGvclClTQA9FoyfVnRPhV66YFpeXl4u5y85O7RSJGDRIxNIEkw7qZCpPUOj89G806OFqlswqPeNr/fr1cj1PT08RoaW0laW6qampVusqKXuDPAhuitibroMGzAIRIdA10/nJtFMZ/iaLv8niL/yB8AfCX/gD4Q+Ev/AHwl/4A+EPhL/wB8IfCH/hD4Q/EP7CHwh/IPyFPxD+wh+IbuX/VfQ6glP26KYAAAAASUVORK5CYII='</body></methods><methods><class-id>Roassal2.RTGrapherScatterplotExample</class-id> <category>sources</category><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleAgeOfRoassalAndTrachel | methodsRoassal methodsTrachel greatestAge b ds |methodsRoassal := RTObject withAllSubclasses flatCollect: #rtmethods.methodsTrachel := TRObject withAllSubclasses flatCollect: #rtmethods.methodsRoassal := methodsRoassal select: [ :m | m numberOfLinesOfCode &lt; 300 ].methodsTrachel := methodsTrachel select: [ :m | m numberOfLinesOfCode &lt; 300 ].greatestAge := (methodsTrachel , methodsRoassal collect: [ :m | m date asUnixTime ]) min.b := RTGrapher new.b extent: 300 @ 300.ds := RTData new.ds interaction popup.ds dotShape circle color: (Color blue alpha: 0.3); size: 5.ds points: methodsRoassal.ds x: [ :m | ((m date asUnixTime - greatestAge) / 3600) asFloat ] .ds y: #numberOfLinesOfCode.b add: ds.ds := RTData new.ds dotShape circle color: (Color red alpha: 0.3); size: 5.ds points: methodsTrachel.ds x: [ :m | ((m date asUnixTime - greatestAge) / 3600) asFloat ] .ds y: #numberOfLinesOfCode.b add: ds.b axisX numberOfTicks: 4.b axisY numberOfTicks: 4.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleCrosses	| b ds |	b := RTGrapher new.	b extent: 300 @ 300.	ds := RTData new.	ds dotShape cross color: (Color red alpha: 0.3).	ds points: (RTShape withAllSubclasses flatCollect: #rtmethods).	ds x: #numberOfLinesOfCode.	ds y: [ :m | m sourceCode size ].	b add: ds.	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDateOnXAxis 	| methods oldestMethod b ds |	methods := RTObject withAllSubclasses flatCollect: #rtmethods.	methods := methods reject: [ :m | m numberOfLinesOfCode &gt; 150 ].	oldestMethod := methods minFor: #date.	b := RTGrapher new.	b extent: 300 @ 200.	ds := RTData new.	ds dotShape circle size: 5; color: (Color blue alpha: 0.1).	ds interaction popup.	ds points: methods.	ds y: #numberOfLinesOfCode.	ds x: [ :m | m date julianDayNumber - oldestMethod date julianDayNumber ].	b add: ds. 	b axisY 		noDecimal;		title: 'LOC'.		b axisX 		title: '';		labelRotation: -30;		labelConversion: [ :v | (Date julianDayNumber: v + oldestMethod date julianDayNumber) ].	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDateOnXAxis2	| dates minDate b ds |	dates := Array with: Date today with: Date yesterday with: Date yesterday previous.	minDate := dates min.	b := RTGrapher new.	b extent: 300 @ 200.	ds := RTData new.	ds interaction popup.	ds dotShape rectangle color: Color blue.	ds points: dates.	ds x: [ :aDate | aDate julianDayNumber - minDate julianDayNumber ].	ds y: [ :d | d dayOfWeek \\ 7 ].	b add: ds.	b axisX		labelRotation: -30;		labelConversion: [ :v | Date julianDayNumber: v + minDate julianDayNumber ].	b build.	^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplescatterPlots	| methodsRoassal methodsTrachel greatestAge b ds |	methodsRoassal := RTObject withAllSubclasses flatCollect: #rtmethods.	methodsTrachel := TRObject withAllSubclasses flatCollect: #rtmethods.	methodsRoassal := methodsRoassal select: [ :m | m numberOfLinesOfCode &lt; 300 ].	methodsTrachel := methodsTrachel select: [ :m | m numberOfLinesOfCode &lt; 300 ].	greatestAge := (methodsTrachel , methodsRoassal collect: [ :m | m date asUnixTime ]) min.	b := RTGrapher new.	b extent: 300 @ 300.	ds := RTData new.	ds dotShape circle		color: (Color blue alpha: 0.3);		size: 5.	ds		points: methodsRoassal;		x: [ :m | (m date asUnixTime - greatestAge) / 3600 ];		y: #numberOfLinesOfCode.	ds interaction popup.	b add: ds.	ds := RTData new.	ds dotShape circle		color: (Color red alpha: 0.3);		size: 5.	ds		points: methodsTrachel;		x: [ :m | (m date asUnixTime - greatestAge) / 3600 ];		y: #numberOfLinesOfCode.	ds interaction popup.	b add: ds.	b axisX		noDecimal;		noLabel;		title: 'Time'.	b axisY		noDecimal;		title: 'Number of lines of code'.	^ b</body></methods><methods><class-id>Roassal2.RTGrapherScatterplotExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Examples-Examples">label	^ 'Grapher - Scatterplots'</body></methods><methods><class-id>Roassal2.RTMultiLineTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testAddedInCanvas	| es shape edge |	v := RTView new.	es := RTBox new elementsOn: (1 to: 2).	es second translateBy: 30 @ 30.	es @ RTDraggable.	v addAll: es.	shape := RTMultiLine new orthoHorizontal.	edge := shape edgeFrom: es first to: es second.	v add: edge.	self assert: v canvas numberOfShapes equals: 5.	edge pushBack.	self assert: v canvas numberOfShapes equals: 5.	edge trachelShape pushFront.	self assert: v canvas numberOfShapes equals: 5.	v canvas push: edge trachelShape behind: es first trachelShape.	self assert: v canvas numberOfShapes equals: 5.</body><body package="Roassal2-Core-Tests">testHorizontalOrthogonal	"The default is a straight line"	| lineShape edge |	lineShape := RTMultiLine new.	lineShape orthoHorizontal.	edge := lineShape edgeFrom: e1 to: e2.	v add: edge.	self assert: v canvas numberOfShapes equals: 3</body><body package="Roassal2-Core-Tests">testOrthoVerticalLine	| eb |	v addAll: (RTBox elementsOn: Collection withAllSubclasses).	eb := RTEdgeBuilder new.	eb shape orthoVerticalLine.	eb view: v.	eb	objects: Collection withAllSubclasses;		connectFrom: #superclass to: #yourself.	RTTreeLayout on: v elements.	v</body><body package="Roassal2-Core-Tests">testStraight	"The default is a straight line"	| lineShape edge |	lineShape := RTMultiLine new.	edge := lineShape edgeFrom: e1 to: e2.	v add: edge.	self assert: v canvas numberOfShapes equals: 1</body><body package="Roassal2-Core-Tests">testVerticalOrthogonal	"The default is a straight line"	| lineShape edge |	lineShape := RTMultiLine new.	lineShape orthoVertical.	edge := lineShape edgeFrom: e1 to: e2.	v add: edge.	self assert: v canvas numberOfShapes equals: 3</body></methods><methods><class-id>Roassal2.RTMultiLineTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	e1 := RTBox element.	e2 := RTBox element.	v := RTView new</body></methods><methods><class-id>Roassal2.RTRangeBelowXAxisTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Decorators-Tests">testBasic	| r |	r := RTRangeBelowXAxis new.	self assert: r startValue equals: 0.	self assert: r endValue equals: 1.	self assert: r markerColor equals: r defaultMarkerColor.</body><body package="Roassal2-Builder-Grapher-Decorators-Tests">testSimpleExample	| b d |	b := RTGrapher new.	d := RTData new.	d points: (1 to: 5).	d y: #yourself.	b add: d.	b addDecorator: (RTRangeBelowXAxis new startValue: 2.5; endValue: 4; label: 'A').	b addDecorator: (RTRangeBelowXAxis new startValue: 0; endValue: 2; label: 'B').	b build.</body></methods><methods><class-id>Roassal2.RTSimpleArrowHeadTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testDragAndDropNodes	"Initializing the view"	| v e1 e2 l lineTrachel |	v := RTView new.	e1 := (RTEllipse new size: 10) element.	e2 := (RTEllipse new size: 10) element.	e2 translateBy: 100 @ 0.	e1 @ RTDraggable.	e2 @ RTDraggable.		v add: e1.	v add: e2.	l := RTEdge from: e1 to: e2.		l + (RTLine new color: Color red) + (RTSimpleArrowHead new color: Color red).	v add: l.		"Checking"	lineTrachel := v canvas shapes detect: [ :s | s class == TRLineShape ].	self assert: lineTrachel from equals: l from position.	self assert: lineTrachel to equals: l to position.		"Drag and Drop"	e1 translateBy: 10 @ 20.	self assert: lineTrachel from equals: l from position.</body></methods><methods><class-id>Roassal2.RTBucketColorTest</class-id> <category>tests</category><body package="Roassal2-ColorNormalizer-Tests">testGivenCommandAndCollectionDefault	|n elements defaultPalette|	n := RTBucketColor numberOfColors: 5 command: #yourself scope: (1 to: 5).	defaultPalette := n defaultPalette.	elements := (RTBox new size: 20; color: n) elementsOn: (1 to: 5).	"view := RTView new.	view addAll: elements.	RTHorizontalLineLayout on: view elements.	view open."	(elements collect: #color) with: defaultPalette do: [ :elementColor :realColor |		self assert: elementColor equals: realColor.		 ]</body><body package="Roassal2-ColorNormalizer-Tests">testGivenCommandAndCollectionDefault2	|n elements view defaultPalette|	n := RTBucketColor numberOfColors: 5 command: #yourself scope: (1 to: 30).	elements := (RTBox new size: 20; color: n) elementsOn: (1 to: 30).	defaultPalette := n defaultPalette.	"view := RTView new.	view addAll: elements.	RTHorizontalLineLayout on: view elements.	view open."	self assert: elements first color equals: defaultPalette first.	self assert: (elements at: 10) color equals: defaultPalette second.	self assert: (elements at: 14) color equals: defaultPalette third.	self assert: (elements at: 22) color equals: defaultPalette fourth.	self assert: (elements at: 29) color equals: defaultPalette fifth.</body></methods><methods><class-id>Roassal2.RTDSMExample</class-id> <category>icons</category><body package="Roassal2-Builder-DSM-Examples">exampleClassesIcon	^ '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YII='</body><body package="Roassal2-Builder-DSM-Examples">exampleEvolutionDSMIcon	^ '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ru6tGpYAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-DSM-Examples">exampleNumbersIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADAElEQVR4XuWZ22oiQRBA8/9fkPckDyKSxzyEoEiCqBAveAmJ94yXKN4Vd12tbFezIyZRou6uDpwDRTNOz0udqanu9uz9nY+XOOOngC+ED18IXwgfvhC+ED58IXwhfPhC+EL48IXw4QvhC+HDF8IXwocvhC+ED18IXwgfvhA+fCF8IXz4QvhC+PCF8IXw4QvhC+HDF8KHL4QvhA9fCF8IH74QvhA+fCF8IXz4Qv4Jy+VSdvnNJZPJSLFYFL6QA6hWq1KpVGzk83l5fX21Y7PZlOfnZ8nlcpJMJiUajYomWuPt7U0eHx9twm9vb6Xb7UoikZBGoyGFQkFKpZKMx2O+kENxHMcmbz2J8/lcFovF6lqTreN0Ov2Q6NlstppXr9fFfZb/ydoTffM1gfF43H5edEylUnZcD33bdUyn09/Ode91Oh2+kH0JBoN8IV5CEyrlsogR89P0Ck18rVaz43q02+0P9z5fb5o7Go34QvZFm7Z5nUXOz2V2f8+vkFMzGAxEtEouL2UWi9kE6+pKx/XQVdj6Pfdae9C2ubrq4gvZE11R8SvEQ8RMVfwyfeDHw4PMzN7BeXqSpknotr6g+5Nde4hX9yCeFuLz+VarLMd8frRS5OqKXyGnomxWWNrYdRfefHkRubgQub621+uhfUFHd8f++XrTXH4POYBAIMCvEC+hZ1N8IR4im81u3KlbMSb4Qo5MJBLhC/Ha4WKv1/uylNWjFA3+svfI6P8X/ArxEMPhUFqt1pfjEOfuzkb75sYG/+jkSHx3/O5WCr9CjrjK6vf7ohtE/fbrqH1Bx/KfY3kN9572kG1z3XDv8XvIX+5D+BXiASaTycYe4vYDe5Rigt9DjtQ/wuHwTn/himnwWimOeYZfIf8Jv98voVCIL4QPXwgfvhC+ED58IXwhfPhC+EL48IXwhfDhC+HDF8IXwocvhC+ED18IXwgfvhC+ED58IXz4QvhC+PCF8IXw4QvhC+HDF8IXwocvhA9fCF8IH74QvhA+fCF8IXz4QvhC+JyG3yIplAJj8utNAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-DSM-Examples">exampleTopLabelRotationIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABqElEQVR4XuXWTYrCQBCAUe9/Ak/jTvFn5TIIZhEwQkhAQcc4Us50JGFOkFHeB0VBL/vRJJPn0++dmvhX4IP4+SA+iJ8P4oP4+SA+iJ8P4oP4+SB+PogP4ueD+CB+PogP4ueD+CB+PoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggfj6ID+Lng/ggfj6ID+Lng/j5ID6Inw/ig/j5ID6Inw/ig3xch8Mh0t7tdpFlWazX60j5IP9UVVXRNE1cr9c4n89R13WkMx9k5Iqi6C79crlEmpjNXrPfD9sHGbH5fB5t28bpdOomptPXbDbD9kFGLM/z7sLbxSLSfG233Xwfj8P2QUZstVp1H/H+ZfQv5Xa7DdsHGbHlchn3+z0evzBp+m9JOuu3DzJiZVl2F96/DP+FvAFIegXpV/fvJIh++yB+PogP4ueD+CB+PoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggfj6ID+Lng/ggfj6ID+Lng/j5ID6Inw/ig/j5ID6Inw/ig/j5ID6Inw/i54P4IH4+iA/i54P4IH4+iA/i54P4+SAf0Q9xU5fjChaEpQAAAABJRU5ErkJggg=='</body></methods><methods><class-id>Roassal2.RTDSMExample</class-id> <category>sources</category><body package="Roassal2-Builder-DSM-Examples">exampleClasses	| dsm |	dsm := RTDSM new.	dsm objects: RTShape withAllSubclasses.	dsm dependency: #dependentClasses.	^ dsm</body><body package="Roassal2-Builder-DSM-Examples">exampleNumbers	| dsm |	dsm := RTDSM new.	dsm objects: (1 to: 10).	dsm dependency: [ :aValue | aValue // 2 ].	^ dsm</body><body package="Roassal2-Builder-DSM-Examples">exampleTopLabelRotation	| dsm v keys |	v := Array 		with: (#A -&gt; (Array with: #B with: #C)) 		with: (#B -&gt; (Array with: #A) ).	keys := #(A B C).	dsm := RTDSM new.	dsm rotation: 0.	dsm objects: keys.	dsm dependency: [ :k  | v asDictionary at: k ifAbsent: #() ].	^ dsm</body></methods><methods><class-id>Roassal2.RTDSMExample</class-id> <category>accessing</category><body package="Roassal2-Builder-DSM-Examples">label	^ 'Dependency Structural Matrix'</body></methods><methods><class-id>Roassal2.RTDSMExample class</class-id> <category>example-data</category><body package="Roassal2-Builder-DSM-Examples">collab	^ 'time	n1	n2 	weight2005	Lea	Lucas	4.02005	Lucas	Lea	4.02005	Nathan	Nathan	1.02005	Lucas	Lucas	1.02005	Lea	Lea	1.02005	Louise	Louise	2.02006	Lucas	Nathan	2.02006	Nathan	Louise	2.02006	Lucas	Lea	8.02006	Louise	Nathan	2.02006	Louise	Lucas	2.02006	Lea	Lucas	8.02006	Nathan	Lucas	2.02006	Lucas	Louise	2.02006	Lucas	Lucas	3.02006	Emma	Emma	1.02006	Louise	Louise	1.02007	Lucas	Camille	4.02007	Lucas	Enzo	2.02007	Lea	Nathan	2.02007	Nathan	Camille	4.02007	Enzo	Lucas	2.02007	Emma	Lea	2.02007	Louise	Camille	4.02007	Lea	Camille	2.02007	Lucas	Emma	2.02007	Camille	Lea	2.02007	Enzo	Lea	2.02007	Chloe	Louise	2.02007	Chloe	Camille	2.02007	Louise	Nathan	8.02007	Lea	Lucas	8.02007	Nathan	Chloe	2.02007	Lucas	Chloe	2.02007	Chloe	Lucas	2.02007	Camille	Chloe	2.02007	Nathan	Lucas	8.02007	Emma	Lucas	2.02007	Chloe	Nathan	2.02007	Louise	Lea	2.02007	Camille	Nathan	4.02007	Nathan	Louise	8.02007	Lucas	Louise	8.02007	Lucas	Nathan	8.02007	Chloe	Lea	2.02007	Lea	Louise	2.02007	Lea	Emma	2.02007	Nathan	Lea	2.02007	Lea	Chloe	2.02007	Louise	Lucas	8.02007	Camille	Lucas	4.02007	Lea	Enzo	2.02007	Louise	Chloe	2.02007	Camille	Louise	4.02007	Lucas	Lea	8.02007	Hugo	Hugo	2.02007	Louise	Louise	1.02007	Sarah	Sarah	1.02007	Camille	Camille	1.02007	Enzo	Enzo	1.02007	Emma	Emma	1.02007	Chloe	Chloe	1.02008	Louise	Camille	2.02008	Emma	Lucas	2.02008	Camille	Louise	2.02008	Lucas	Gabriel	2.02008	Lucas	Camille	4.02008	Camille	Nathan	4.02008	Nathan	Louise	4.02008	Lucas	Louise	4.02008	Lucas	Nathan	6.02008	Louise	Lucas	4.02008	Camille	Lea	2.02008	Camille	Lucas	4.02008	Nathan	Lucas	6.02008	Nathan	Lea	2.02008	Lucas	Lea	2.02008	Nathan	Camille	4.02008	Emma	Enzo	2.02008	Gabriel	Lucas	2.02008	Louise	Nathan	4.02008	Lea	Camille	2.02008	Lea	Lucas	2.02008	Lea	Louise	2.02008	Lea	Nathan	2.02008	Enzo	Emma	2.02008	Lucas	Emma	2.02008	Louise	Lea	2.02008	Camille	Camille	1.02008	Emma	Emma	3.02008	Sarah	Sarah	1.02008	Gabriel	Gabriel	2.02008	Hugo	Hugo	1.02008	Louise	Louise	1.02009	Hugo	Lucas	4.02009	Lucas	Sarah	2.02009	Lucas	Lea	2.02009	Louise	Hugo	2.02009	Louise	Camille	4.02009	Hugo	Louise	2.02009	Enzo	Hugo	4.02009	Gabriel	Nathan	4.02009	Enzo	Louise	2.02009	Lea	Lucas	2.02009	Sarah	Lucas	2.02009	Camille	Nathan	4.02009	Camille	Hugo	2.02009	Enzo	Camille	2.02009	Louise	Gabriel	10.02009	Camille	Lucas	6.02009	Emma	Enzo	2.02009	Enzo	Lucas	2.02009	Camille	Enzo	2.02009	Gabriel	Louise	10.02009	Lucas	Camille	6.02009	Sarah	Louise	2.02009	Nathan	Louise	6.02009	Nathan	Camille	4.02009	Nathan	Lea	2.02009	Camille	Lea	2.02009	Gabriel	Lucas	10.02009	Nathan	Gabriel	4.02009	Louise	Nathan	6.02009	Louise	Sarah	2.02009	Nathan	Lucas	8.02009	Enzo	Emma	2.02009	Louise	Enzo	2.02009	Camille	Sarah	2.02009	Lea	Camille	2.02009	Hugo	Camille	2.02009	Enzo	Sarah	4.02009	Lucas	Hugo	4.02009	Sarah	Camille	2.02009	Camille	Louise	4.02009	Hugo	Enzo	4.02009	Sarah	Enzo	4.02009	Lucas	Louise	14.02009	Lucas	Enzo	2.02009	Lucas	Gabriel	10.02009	Lea	Nathan	2.02009	Lucas	Nathan	8.02009	Lea	Louise	2.02009	Louise	Lea	2.02009	Sarah	Hugo	2.02009	Hugo	Sarah	2.02009	Louise	Lucas	14.02009	Sarah	Sarah	1.02009	Camille	Camille	1.02009	Hugo	Hugo	1.02009	Gabriel	Gabriel	2.02009	Emma	Emma	4.02010	Nathan	Lea	2.02010	Sarah	Lucas	4.02010	Lea	Nathan	2.02010	Camille	Sarah	2.02010	Gabriel	Lucas	10.02010	Louise	Lea	2.02010	Hugo	Lucas	6.02010	Nathan	Camille	4.02010	Enzo	Louise	2.02010	Nathan	Lucas	6.02010	Camille	Hugo	2.02010	Lucas	Nathan	6.02010	Lucas	Hugo	6.02010	Lucas	Camille	6.02010	Louise	Gabriel	12.02010	Louise	Camille	4.02010	Sarah	Louise	4.02010	Hugo	Louise	2.02010	Lucas	Sarah	4.02010	Gabriel	Sarah	2.02010	Camille	Louise	4.02010	Nathan	Gabriel	2.02010	Camille	Lucas	6.02010	Nathan	Louise	4.02010	Lucas	Lea	2.02010	Enzo	Camille	2.02010	Enzo	Lucas	2.02010	Lucas	Enzo	2.02010	Lucas	Gabriel	10.02010	Hugo	Enzo	2.02010	Sarah	Gabriel	2.02010	Louise	Hugo	2.02010	Lea	Lucas	2.02010	Camille	Nathan	4.02010	Sarah	Enzo	2.02010	Gabriel	Louise	12.02010	Camille	Enzo	2.02010	Lucas	Louise	14.02010	Louise	Lucas	14.02010	Enzo	Sarah	2.02010	Hugo	Sarah	2.02010	Enzo	Hugo	2.02010	Louise	Sarah	4.02010	Sarah	Hugo	2.02010	Lea	Louise	2.02010	Camille	Lea	2.02010	Sarah	Camille	2.02010	Lea	Camille	2.02010	Hugo	Camille	2.02010	Louise	Enzo	2.02010	Gabriel	Nathan	2.02010	Louise	Nathan	4.02010	Enzo	Enzo	1.02010	Emma	Emma	1.02010	Chloe	Chloe	1.02010	Camille	Camille	1.02010	Hugo	Hugo	1.0'</body><body package="Roassal2-Builder-DSM-Examples">gtinspector	^ 'time	n1	n2 	weight51	GTExample	AndreiChis	151	GTExample	StefanReichhart	347	GTExample	StefanReichhart	1546	GTExample	StefanReichhart	1049	GTExample	StefanReichhart	5852	GTExample	StefanReichhart	548	GTExample	StefanReichhart	1949	GTExampleFinder	StefanReichhart	1248	GTExampleFinder	StefanReichhart	647	GTExampleFinder	StefanReichhart	246	GTExampleFinder	StefanReichhart	449	GTExampleResult	StefanReichhart	148	GTExampleResult	StefanReichhart	1452	GTExampleResult	StefanReichhart	146	GTExampleResult	StefanReichhart	249	GTExampleProcessor	StefanReichhart	948	GTExampleProcessor	StefanReichhart	847	GTExampleProcessor	StefanReichhart	740	GTInspectorMethodListFilter	AndreiChis	1249	GTExampleProxy	StefanReichhart	348	GTExampleProxy	StefanReichhart	1647	GTExampleProxy	StefanReichhart	546	GTExampleProxy	StefanReichhart	240	GTInspectorTagFilter	AndreiChis	1141	GTInspectorTagFilter	AndreiChis	251	GTExampleOrganizer	AndreiChis	347	GTExampleOrganizer	StefanReichhart	546	GTExampleOrganizer	StefanReichhart	149	GTExampleOrganizer	StefanReichhart	2148	GTExampleOrganizer	StefanReichhart	20	GTInspector	TudorGirba	140	GTInspector	AndreiChis	140	GTInspector	EstebanLorenzano	136	GTInspector	AndreiChis	344	GTInspector	TudorGirba	131	GTInspector	TudorGirba	238	GTInspector	AndreiChis	338	GTInspector	SvenVanCaekenberghe	141	GTInspector	AndreiChis	649	GTExampleNautilus	StefanReichhart	252	GTExampleNautilus	StefanReichhart	551	GTExampleNautilus	JurajKubelka	2'</body></methods><methods><class-id>Roassal2.RTEdgeBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-Common-Tests">testCompositeShapes	| els lineShape edges eb |	view := RTView new.	els := (RTBox new		size: 10;		color: Color blue;		borderColor: Color veryLightGray)		elementsOn: Collection withAllSubclasses.	els @ RTDraggable.	view addAll: els.	lineShape := (RTLine new				attachPoint: RTShorterDistanceAttachPoint new;				color: Color veryDarkGray)			+					(RTSimpleArrowHead new						attachPoint: RTShorterDistanceAttachPoint new;						color: Color veryDarkGray).	eb := RTEdgeBuilder new.	eb		view: view;		objects: Collection withAllSubclasses;		shape: lineShape.	self assert: eb shape hasSetLineShape.	edges := eb	connectFrom: #yourself toAll: #subclasses.	RTTreeLayout on: els.			self assert: (edges allSatisfy: [ :e | e shape == lineShape ])</body><body package="Roassal2-Builder-Common-Tests">testCompositeShapes02	| els lineShape edges |	view := RTView new.	els := (RTBox new		size: 10;		color: Color blue;		borderColor: Color veryLightGray)		elementsOn: Collection withAllSubclasses.	els @ RTDraggable.	view addAll: els.	lineShape := (RTLine new				attachPoint: RTShorterDistanceAttachPoint new;				color: Color veryDarkGray).	edges := RTEdgeBuilder new		view: view;		objects: Collection withAllSubclasses;		shape: lineShape;		connectFrom: #yourself toAll: #subclasses.	RTTreeLayout on: els.		self assert: (edges allSatisfy: [ :e | e shape == lineShape ])</body><body package="Roassal2-Builder-Common-Tests">testConnectFrom	| e |	b view: view.	b objects: #(1 2).	b connectFrom: [ :v | v - 1 ].		self assert: view numberOfEdges equals: 1.		e := view edges anyOne.	self assert: e from model equals: 1.	self assert: e to model equals: 2.</body><body package="Roassal2-Builder-Common-Tests">testConnectTo	| e |	b view: view.	b objects: #(1 2).	b connectTo: [ :v | v - 1 ].		self assert: view numberOfEdges equals: 1.		e := view edges anyOne.	self assert: e from model equals: 2.	self assert: e to model equals: 1.</body><body package="Roassal2-Builder-Common-Tests">testConnectToAll	| eFrom eTo |	b view: view.	b objects: #(1 2 3).	b connectToAll: [ :v | Array with: v - 1 with: v - 2 ].		self assert: view numberOfEdges equals: 3.	 	eFrom := (view edges collect: [ :edge | edge from model ]) sorted asArray.	eTo := (view edges collect: [ :edge | edge to model ]) sorted asArray.	self assert: eFrom equals: #(2 3 3).	self assert: eTo equals: #(1 1 2).</body><body package="Roassal2-Builder-Common-Tests">testDefault	self assert: view numberOfEdges equals: 0</body><body package="Roassal2-Builder-Common-Tests">testElements	| es |	b := RTEdgeBuilder new.	b view: view.	self assert: b fromElements equals: view elements.		es := RTBox elementsOn: (1 to: 4).	b elements: es.	self assert: b fromElements equals: es.</body><body package="Roassal2-Builder-Common-Tests">testElementsToLookup	| es1 es2 edges |	es1 := RTEllipse elementsOn: #(1 2 3).	es2 := RTBox elementsOn: #(1 2 3).	edges := RTEdgeBuilder new					fromElements: es1;					toElements: es2;					connectTo: #yourself.	self assert: edges size equals: 3.		self assert: edges first from equals: es1 first.	self assert: edges first to equals: es2 first.</body><body package="Roassal2-Builder-Common-Tests">testFromAll	| v es |	v := RTView new.	es := (RTEllipse new size: 20) elementsOn: (1 to: 2).	v addAll: es.		self assert: v edges size equals: 0.	RTEdgeBuilder new		view: v;		objects: (1 to: 2);		connectFromAll: (Array with: 1) to: 2.	es @ RTPopup.	RTTreeLayout on: es.	self assert: v edges size equals: 1.	self assert: v edges first from position equals: (15.0@15.0).	self assert: v edges first to position equals: (15.0@55.0).</body><body package="Roassal2-Builder-Common-Tests">testFromObjects	"	view := RTView new.	elements := RTBox elementsOn: (1 to: 10).	view addAll: elements. 	b := RTEdgeBuilder new."	| edges |	b view: view.	b fromObjects: #(1 2).	b connectFrom: #yourself to: 10.	self assert: view numberOfEdges equals: 2.	edges := view edges.	self assert: edges first from model equals: 1.	self assert: edges first to model equals: 10.	self assert: b toObjects asArray equals: (1 to: 10) asArray.	self assert: b fromObjects asArray equals: #(1 2).</body><body package="Roassal2-Builder-Common-Tests">testFromObjects02	"	view := RTView new.	elements := RTBox elementsOn: (1 to: 10).	view addAll: elements. 	b := RTEdgeBuilder new."		b view: view.	b fromObjects: #(1).	b connectFrom: #yourself to: 10.	self assert: view numberOfEdges equals: 1.	self assert: b toObjects asArray equals: (1 to: 10) asArray.	self assert: b fromObjects asArray equals: #(1).</body><body package="Roassal2-Builder-Common-Tests">testFromObjectsError"view := RTView new.	elements := RTBox elementsOn: (1 to: 10).	view addAll: elements. 	b := RTEdgeBuilder new."	self should: [ RTEdgeBuilder new  fromObjects: #(1 2) ] raise: Error</body><body package="Roassal2-Builder-Common-Tests">testFromObjectsToElements	| edges |	b view: view.	edges := 		b fromObjects: #(1 2);			toElements: (elements copyFrom: 10 to: 10);			connectTo: 10.	self assert: edges size equals: 2.</body><body package="Roassal2-Builder-Common-Tests">testInit	| eb |	eb := RTEdgeBuilder new.	self deny: eb shouldAllowRepetition.	eb allowRepetition.	self assert: eb shouldAllowRepetition.</body><body package="Roassal2-Builder-Common-Tests">testNoMoveBehind	RTEdgeBuilder new		view: view;		useAssociations: (Array 									with: 1 -&gt; 2									with: 2 -&gt; 3									with: 5 -&gt; 6).	self assert: (view canvas shapes collect: [ :c | c class name ]) asArray equals: #(#TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRLineShape #TRLineShape #TRLineShape)</body><body package="Roassal2-Builder-Common-Tests">testObjectFrom	| e |	b view: view.	b objects: #(1 2); connectFrom: [ :v | v - 1 ].		self assert: view numberOfEdges equals: 1.		e := view edges anyOne.	self assert: e from model equals: 1.	self assert: e to model equals: 2.</body><body package="Roassal2-Builder-Common-Tests">testObjectTo	| e |	b view: view.	b objects: #(1 2); connectTo: [ :v | v - 1 ].		self assert: view numberOfEdges equals: 1.		e := view edges anyOne.	self assert: e from model equals: 2.	self assert: e to model equals: 1.</body><body package="Roassal2-Builder-Common-Tests">testObjects	b view: view.	b objects: (1 to: 5).	self assert: b fromElements equals: (elements copyFrom: 1 to: 5)"	view := RTView new.	elements := RTBox elementsOn: (1 to: 10).	view addAll: elements. 	b := RTEdgeBuilder new."</body><body package="Roassal2-Builder-Common-Tests">testObjects02	b view: view.	b objects: #even.	self assert: (b fromElements collect: #model) asArray equals: #(2 4 6 8 10)"	view := RTView new.	elements := RTBox elementsOn: (1 to: 10).	view addAll: elements. 	b := RTEdgeBuilder new."</body><body package="Roassal2-Builder-Common-Tests">testObjects03	b view: view.	b objects: #odd.	self assert: (b fromElements collect: #model) asArray equals: #(1 3 5 7 9)"	view := RTView new.	elements := RTBox elementsOn: (1 to: 10).	view addAll: elements. 	b := RTEdgeBuilder new."</body><body package="Roassal2-Builder-Common-Tests">testSimple	RTEdgeBuilder new		view: view;		useElementAssociations: (Array 									with: elements first -&gt; elements second									with: elements second -&gt; elements third).	self assert: view numberOfEdges equals: 2</body><body package="Roassal2-Builder-Common-Tests">testSimple2	RTEdgeBuilder new		view: view;		useAssociations: (Array 									with: 1 -&gt; 2									with: 2 -&gt; 3									with: 5 -&gt; 6).	self assert: view numberOfEdges equals: 3</body><body package="Roassal2-Builder-Common-Tests">testSimple3	RTEdgeBuilder new		view: view;		fromObjects: #(1 2 3 6);		toObjects: (1 to: 10);		connectFrom: #yourself to: [ :v | v + 1 ].	self assert: view numberOfEdges equals: 4.	self assert: (view edges collect: [ :e | e from model -&gt; e to model ]) asArray equals: ((Array new: 4) at: 1 put: (1-&gt;2); at: 2 put: (2-&gt;3); at: 3 put: (3-&gt;4); at: 4 put: (6-&gt;7); yourself)</body><body package="Roassal2-Builder-Common-Tests">testSimple4	RTEdgeBuilder new		view: view;		fromObjects: #(1 2 3 6);		toObjects: #(1 2 3 6);		connectFrom: #yourself to: [ :v | v + 1 ].	self assert: view numberOfEdges equals: 2.	self assert: (view edges collect: [ :e | e from model -&gt; e to model ]) asArray equals: ((Array new: 2) at: 1 put: (1-&gt;2); at: 2 put: (2-&gt;3); yourself)</body><body package="Roassal2-Builder-Common-Tests">testSimple5	RTEdgeBuilder new		view: view;		fromObjects: #(1 2 3 6);		connectFrom: #yourself toAll: [ :v | Array with: v + 1 with: v + 2 ].			self assert: view numberOfEdges equals: 8.</body><body package="Roassal2-Builder-Common-Tests">testSimple6	RTEdgeBuilder new		view: view;		fromObjects: (Array with: 2);		connectFromAll: (Array with: 2) to: 3.	self assert: view numberOfEdges equals: 1.</body><body package="Roassal2-Builder-Common-Tests">testSimple7	RTEdgeBuilder new		view: view;		useAssociation: 1 -&gt; 2;		useAssociation: 2 -&gt; 3;		useAssociation: 5 -&gt; 6.	self assert: view numberOfEdges equals: 3</body><body package="Roassal2-Builder-Common-Tests">testSource	| v es eb c |	v := RTView new.	es := RTBox elementsOn: #(1 2 3). 	v addAll: es.		eb := RTEdgeBuilder new.	eb view: v.		c := OrderedCollection new.	c add: 1 -&gt; 2.	c add: 3 -&gt; 1.	eb source: c connectFrom: #key to: #value.		self assert: v numberOfEdges equals: 2</body><body package="Roassal2-Builder-Common-Tests">testToObjects	"	view := RTView new.	elements := RTBox elementsOn: (1 to: 10).	view addAll: elements. 	b := RTEdgeBuilder new."	b view: view.	b toObjects: #(1 2).	b connectFrom: #yourself to: 10.	self assert: view numberOfEdges equals: 0.	self assert: b toObjects asArray equals: #(1 2).	self assert: b fromObjects asArray equals: (1 to: 10) asArray.</body><body package="Roassal2-Builder-Common-Tests">testWithMoveBehind	RTEdgeBuilder new		view: view;		moveBehind;		useAssociations: (Array 									with: 1 -&gt; 2									with: 2 -&gt; 3									with: 5 -&gt; 6).	self assert: (view canvas shapes collect: [ :c | c class name ]) asArray equals: #(#TRLineShape #TRLineShape #TRLineShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape)</body><body package="Roassal2-Builder-Common-Tests">testWithMoveBehind02	RTEdgeBuilder new		view: view;		moveBehind;		connectFrom: [ :v | v - 1 ].	self assert: (view canvas shapes collect: [ :c | c class name ]) asArray equals: #(#TRLineShape #TRLineShape #TRLineShape #TRLineShape #TRLineShape #TRLineShape #TRLineShape #TRLineShape #TRLineShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape #TRBoxShape)</body><body package="Roassal2-Builder-Common-Tests">testconnectFromToAll	| es1 es2 edges |	es1 := RTEllipse elementsOn: #(1 2 3).	es2 := RTBox elementsOn: #(1 2 3).	edges := RTEdgeBuilder new					fromElements: es1;					toElements: es2;					connectFrom: #yourself toAll: [ :obj | Array with: obj ].	self assert: edges size equals: 3.		self assert: edges first from equals: es1 first.	self assert: edges first to equals: es2 first.</body></methods><methods><class-id>Roassal2.RTEdgeBuilderTest</class-id> <category>running</category><body package="Roassal2-Builder-Common-Tests">setUp	super setUp.	view := RTView new.	elements := RTBox elementsOn: (1 to: 10).	view addAll: elements. 	b := RTEdgeBuilder new.</body></methods><methods><class-id>Roassal2.RTEdgeBuilderTest</class-id> <category>tests - use in layout</category><body package="Roassal2-Builder-Common-Tests">testUseInLayout	b		view: view; 		notUseInLayout; 		connectTo: [ :v | v + 1 ].	RTTreeLayout on: view elements.		self assert: (view elements collect: #position) asArray equals: ((Array new: 10) at: 1 put: ((7.5@7.5)); at: 2 put: ((15.5@7.5)); at: 3 put: ((23.5@7.5)); at: 4 put: ((31.5@7.5)); at: 5 put: ((39.5@7.5)); at: 6 put: ((47.5@7.5)); at: 7 put: ((55.5@7.5)); at: 8 put: ((63.5@7.5)); at: 9 put: ((71.5@7.5)); at: 10 put: ((79.5@7.5)); yourself)</body><body package="Roassal2-Builder-Common-Tests">testUseInLayoutDefault	b 		view: view;		connectTo: [ :v | v + 1 ].	RTTreeLayout on: view elements.		self assert: (view elements collect: #position) asArray equals: ((Array new: 10) at: 1 put: ((7.5@7.5)); at: 2 put: ((7.5@32.5)); at: 3 put: ((7.5@57.5)); at: 4 put: ((7.5@82.5)); at: 5 put: ((7.5@107.5)); at: 6 put: ((7.5@132.5)); at: 7 put: ((7.5@157.5)); at: 8 put: ((7.5@182.5)); at: 9 put: ((7.5@207.5)); at: 10 put: ((7.5@232.5)); yourself)</body></methods><methods><class-id>Roassal2.RTDistributionTest</class-id> <category>tests</category><body package="Roassal2-Utility-Tests">testAnnotatedFrequency	| set d f |	set := #(2 2 2 5 5).	d := RTDistribution on: set.	f := d annotatedFrequency.	self assert: d amountOfDifferentValues = 2.	self assert: f = (Array 		with: (Array with: 3 with: #(2 2 2) asOrderedCollection)		with: (Array with: 0 with: OrderedCollection new) 		with: (Array with: 2 with: #(5 5) asOrderedCollection))</body><body package="Roassal2-Utility-Tests">testBasic	| numbers distribution values |	numbers := #(5 2 1 8 1 2 4 8 1 9 7 3 7).	distribution := RTDistribution on: numbers.	values := distribution frequencyMin: 1 max: 9 amountOfIntervals: 3.		self assert: values size = 3.	self assert: values first asSortedCollection = ((numbers select: [ :n | n &lt; 4 ]) asSortedCollection).	self assert: values second asSortedCollection = ((numbers select: [ :n | n &gt;= 4 and: [ n &lt; 6 ] ]) asSortedCollection).	self assert: values third asSortedCollection = ((numbers select: [ :n | n &gt;= 6 ]) asSortedCollection).</body><body package="Roassal2-Utility-Tests">testBasic2	| numbers distribution values |	numbers := #(5 2 1 8 1 2 4 8 1 9 7 3 7).	distribution := RTDistribution on: numbers.	values := distribution frequencyWithAmountOfIntervals: 3.		self assert: values size = 3.	self assert: values first asSortedCollection = ((numbers select: [ :n | n &lt; 4 ]) asSortedCollection).	self assert: values second asSortedCollection = ((numbers select: [ :n | n &gt;= 4 and: [ n &lt; 6 ] ]) asSortedCollection).	self assert: values third asSortedCollection = ((numbers select: [ :n | n &gt;= 6 ]) asSortedCollection).</body><body package="Roassal2-Utility-Tests">testFrequency	| set d f |	set := #(3 31 17 17 20 50 9 32 47 2 8 36 30 33 49 31 18 25 21 31 1 37 1 40 46 16 18 20 30 29 4 49 31 45 25 44 12 16 23 27 5 41 20 23 29 17 7 20 13 11).	d := RTDistribution on: set.		self assert: d amountOfDifferentValues = set asSet size.		f := d frequency.	self assert: f size = 6.</body><body package="Roassal2-Utility-Tests">testFrequencyOfObjects	| set d f |	set := #(yes yes no maybe no maybe maybe yes no maybe yes maybe).	d := RTDistribution on: set.		self assert: d amountOfDifferentValues = set asSet size.		"No idea why this fails""	f := d annotatedFrequencyWithAmountOfIntervals: d amountOfDifferentValues.	self assert: f size = 3.	self assert: (f copy sort: [:a :b | a first &lt; b first ]) = (Array 		with: (Array with: 3 with: #(no no no) asOrderedCollection)		with: (Array with: 4 with: #(yes yes yes yes) asOrderedCollection)		with: (Array with: 5 with: #(maybe maybe maybe maybe maybe) asOrderedCollection))"</body><body package="Roassal2-Utility-Tests">testFrequencyWithSetSize	| set d f |	set := #(3 31 17 17 20 50 9 32 47 2 8 36 30 33 49 31 18 25 21 31 1 37 1 40 46 16 18 20 30 29 4 49 31 45 25 44 12 16 23 27 5 41 20 23 29 17 7 20 13 11).	d := RTDistribution on: set.		self assert: d amountOfDifferentValues = set asSet size.		f := d frequencyWithAmountOfIntervals: set asSet size.	self assert: f size = set asSet size.</body></methods><methods><class-id>Roassal2.RTHighlightableTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	box := (RTBox new color: Color green) element.	self assert: (box shape colorFor: box) = Color green.	self assert: box trachelShape color = Color green.	box @ RTHighlightable.	self assert: (box shape colorFor: box) = Color green.	self assert: box trachelShape color = Color green.	box announce: TRMouseEnter.	"The Roassal shape remains the same"	self assert: (box shape colorFor: box) = Color green.	self assert: box trachelShape color = RTHighlightable highlightedColor.		box announce: TRMouseLeave.	self assert: (box shape colorFor: box) = Color green.	self assert: box trachelShape color = Color green.</body><body package="Roassal2-Core-Tests">testBasicWithSVGShape	box := (RTSVGPath new path: 'M 100 100 L 300 100 L 200 300 z'; color: Color green) element.	self assert: (box shape colorFor: box) = Color green.	self assert: box trachelShape color = Color green.	box @ RTHighlightable.	self assert: (box shape colorFor: box) = Color green.	self assert: box trachelShape color = Color green.	box announce: TRMouseEnter.	"The Roassal shape remains the same"	self assert: (box shape colorFor: box) = Color green.	self assert: box trachelShape color = RTHighlightable highlightedColor.		box announce: TRMouseLeave.	self assert: (box shape colorFor: box) = Color green.	self assert: box trachelShape color = Color green.</body><body package="Roassal2-Core-Tests">testDefaultColor	self assert: RTHighlightable new color equals: RTHighlightable highlightedColor</body><body package="Roassal2-Core-Tests">testHighlightAllSibblings	| v e1 e2 e3 |	v := RTView new.	e1 := (RTBox new color: Color gray) elementOn: 1.	e2 := (RTEllipse new color: Color gray) elementOn: 1.	e3 := (RTBox new color: Color gray) elementOn: 2.		v add: e1; add: e2; add: e3.		e1 @ RTHighlightable allSibblings.	self assert: e1 trachelShape color == Color gray.	self assert: e2 trachelShape color == Color gray.	self assert: e3 trachelShape color == Color gray.		e1 announce: TRMouseEnter.	self assert: e1 trachelShape color ~~ Color gray.	self assert: e2 trachelShape color ~~ Color gray.	self assert: e3 trachelShape color == Color gray.</body><body package="Roassal2-Core-Tests">testHighlightAllSibblings02	| v e1 e2 e3 |	v := RTView new.	e1 := (RTBox new color: Color gray) element.	e2 := (RTEllipse new color: Color gray) element.	e3 := (RTBox new color: Color gray) element.		v add: e1; add: e2; add: e3.		e1 @ RTHighlightable allSibblings.	self assert: e1 trachelShape color == Color gray.	self assert: e2 trachelShape color == Color gray.	self assert: e3 trachelShape color == Color gray.		e1 announce: TRMouseEnter.	self assert: e1 trachelShape color == Color gray.	self assert: e2 trachelShape color == Color gray.	self assert: e3 trachelShape color == Color gray.</body><body package="Roassal2-Core-Tests">testHighlightMultipleObjects	| elements view originalColor |	elements := RTBox elementsOn: (Array with: 1 with: 2 with: 2).	view := RTView new.	view addAll: elements.		originalColor := elements first color. 		"Not necessary, but useful when debugging the test"	RTHorizontalLineLayout on: elements.	elements @ (RTHighlightable highlight: [ :v | Array with: v + 1 ]).	self assert: (elements allSatisfy: [ :e | e trachelShape color = originalColor ]).		elements first announce: TRMouseEnter new.	self assert: (elements first trachelShape color = originalColor ).	self assert: (elements second trachelShape color = RTHighlightable highlightedColor).	self assert: (elements third trachelShape color = RTHighlightable highlightedColor).		elements first announce: TRMouseLeave new.	self assert: (elements allSatisfy: [ :e | e trachelShape color = originalColor ]).</body><body package="Roassal2-Core-Tests">testMultipleElements	| box1 box2 |	box1 := (RTBox new color: Color green) element.	box2 := (RTBox new color: Color red) element.		box1 @ (RTHighlightable highlightElements: [ :e | Array with: box2 ]).	box1 announce: TRMouseEnter.	"The Roassal shape remains the same"	self assert: (box1 shape colorFor: box1) = Color green.	self assert: box1 trachelShape color = Color green.	self assert: box2 trachelShape color = RTHighlightable highlightedColor.		box1 announce: TRMouseLeave.	self assert: box1 trachelShape color = Color green.	self assert: box2 trachelShape color = Color red</body><body package="Roassal2-Core-Tests">testMultipleElementsDoHighlight	| box1 box2 h |	box1 := (RTBox new color: Color green) elementOn: 1.	box2 := (RTBox new color: Color red) elementOn: 2.		h := RTHighlightable new highlightElements: [ :e | Array with: box2 ].	h doHighlight: box1.		"The Roassal shape remains the same"	self assert: (box1 shape colorFor: box1) = Color green.	self assert: box1 trachelShape color = Color green.	self assert: box2 trachelShape color = RTHighlightable highlightedColor.		h doUnhighlight: box1.	self assert: box1 trachelShape color = Color green.	self assert: box2 trachelShape color = Color red</body><body package="Roassal2-Core-Tests">testSetColor	| i |	i := RTHighlightable new.	i color: Color red.	self assert: Color red equals: i color</body><body package="Roassal2-Core-Tests">testhighlightElements	self assert: RTHighlightable new highlightElements notNil</body></methods><methods><class-id>Roassal2.RTTreeMapTest</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-TreeMap-Tests">testEmpty	RTTreeMapBuilder new build</body></methods><methods><class-id>Roassal2.TRCanvasExample</class-id> <category>arcs</category><body package="Roassal2-Trachel-Examples-Examples">arc	"	self new arc	"	| c  shape|	c := TRCanvas new.	shape:= TRArcShape new.	shape alphaAngle:10  betaAngle: 20  innerRadius: 30 externalRadius: 150. 	shape color: Color blue.	c addShape: shape.	c open.</body><body package="Roassal2-Trachel-Examples-Examples">arc0	"	self new arc0	"	| c shape |	c := TRCanvas new.	shape:= TRArcShape new.	shape alphaAngle:0  betaAngle: 360  innerRadius: 0 externalRadius: 100. 	shape color: Color blue.	c addShape: shape.	c open.</body><body package="Roassal2-Trachel-Examples-Examples">arc2	"	self new arc	"	| c  shape1 shape2 shape3 shape4|	c := TRCanvas new.	shape1:= TRArcShape new.	shape2:= TRArcShape new.	shape3:= TRArcShape new.	shape4:= TRArcShape new.	shape1 alphaAngle:10  betaAngle: 80 innerRadius: 30 externalRadius: 150. 	shape1 color: Color blue.	shape2 alphaAngle:100  betaAngle: 170 innerRadius: 30 externalRadius: 150. 	shape2 color: Color green.	shape3 alphaAngle:190  betaAngle: 260 innerRadius: 30 externalRadius: 150. 	shape3 color: Color yellow.	shape4 alphaAngle:280  betaAngle: 350 innerRadius: 30 externalRadius: 150. 	shape4 color: Color red.	c addShape: shape1. c addShape: shape2. c addShape: shape3. c addShape: shape4.	c open.</body><body package="Roassal2-Trachel-Examples-Examples">arc3	"	self new arc3	"	| c  shape1 shape2 shape3 shape4|	c := TRCanvas new.	shape1:= TRArcShape new.	shape2:= TRArcShape new.	shape3:= TRArcShape new.	shape4:= TRArcShape new.	shape1 alphaAngle:5  betaAngle: 85 innerRadius: 30 externalRadius: 150. 	shape1 color: Color blue.	shape2 alphaAngle:95  betaAngle: 175 innerRadius: 30 externalRadius: 150. 	shape2 color: Color green.	shape3 alphaAngle:185  betaAngle: 265 innerRadius: 30 externalRadius: 150. 	shape3 color: Color yellow.	shape4 alphaAngle:275  betaAngle: 355 innerRadius: 30 externalRadius: 150. 	shape4 color: Color red.	c addShape: shape1. c addShape: shape2. c addShape: shape3. c addShape: shape4.	c open.</body><body package="Roassal2-Trachel-Examples-Examples">arc4	"	self new arc4	"	| c  shape1 shape2 shape3 shape4|	c := TRCanvas new.	shape1:= TRArcShape new.	shape2:= TRArcShape new.	shape3:= TRArcShape new.	shape4:= TRArcShape new.	shape1 alphaAngle:0  betaAngle: 90 innerRadius: 130 externalRadius: 150. 	shape1 color: Color blue.	shape2 alphaAngle:90  betaAngle: 180 innerRadius: 130 externalRadius: 150. 	shape2 color: Color green.	shape3 alphaAngle:180  betaAngle: 270 innerRadius: 130 externalRadius: 150. 	shape3 color: Color yellow.	shape4 alphaAngle:270  betaAngle: 360 innerRadius: 130 externalRadius: 150. 	shape4 color: Color red.	c addShape: shape1. c addShape: shape2. c addShape: shape3. c addShape: shape4.	c open.</body><body package="Roassal2-Trachel-Examples-Examples">arc5	"	self new arc5	"	| c  shape1 shape2 shape3 shape4|	c := TRCanvas new.	shape1:= TRArcShape new.	shape2:= TRArcShape new.	shape3:= TRArcShape new.	shape4:= TRArcShape new.	shape1 alphaAngle:0  betaAngle: 90 innerRadius: 0 externalRadius: 150. 	shape1 color: Color blue.	shape2 alphaAngle:90  betaAngle: 180 innerRadius: 0 externalRadius: 150. 	shape2 color: Color green.	shape3 alphaAngle:180  betaAngle: 270 innerRadius: 0 externalRadius: 150. 	shape3 color: Color yellow.	shape4 alphaAngle:270  betaAngle: 360 innerRadius: 0 externalRadius: 150. 	shape4 color: Color red.	c addShape: shape1. c addShape: shape2. c addShape: shape3. c addShape: shape4.	c open.</body><body package="Roassal2-Trachel-Examples-Examples">arc6	"	self new arc6	"	| c  shape shape2|	c := TRCanvas new.	shape:= TRArcShape new.	shape alphaAngle:10  betaAngle: 80  innerRadius: 30 externalRadius: 150. 	shape color: Color blue.	shape2:=TRBoxShape new.	shape2 fromRectangle: (shape topLeft corner: shape bottomRight).	shape2 color: Color red.	c addShape: shape.	c addShape: shape2.	c open.</body><body package="Roassal2-Trachel-Examples-Examples">arc7	"	self new arc7	"	| c shape|	c := TRCanvas new.	1 to: 90 by: 10 do: [ :angle |		shape:= TRArcShape new.		shape alphaAngle: 0  betaAngle: (angle)  innerRadius: 30 externalRadius: 150. 		shape color: (Color blue alpha: 0.2).		c addShape: shape ].	c open.</body></methods><methods><class-id>Roassal2.TRCanvasExample</class-id> <category>svg</category><body package="Roassal2-Trachel-Examples-Examples">svg01	"	self new svg01	"	| c svg |	c := TRCanvas new.	svg := TRSVGPath new path: 'M256,116.656L308.021,186H203.979L256,116.656z M256,50L123.966,226h264.068L256,50z M308.021,326	L256,395.345L203.979,326H308.021z M388.034,286H123.966L256,462L388.034,286z'.	svg scaleBy: 0.1.	c addShape: svg.	c open</body></methods><methods><class-id>Roassal2.TRCanvasExample</class-id> <category>rotating labels</category><body package="Roassal2-Trachel-Examples-Examples">fiveLabelFlowers	"	self new fiveLabelFlowers.	"	| t label box points |	t := TRCanvas new.	t color: Color white.	points := OrderedCollection new.	points add: 0 @ 0.	points add: 150 @ 150.	points add: -150 @ -150.	points add: 150 @ -150.	points add: -150 @ 150.	points do: [ :position |		1 to: 180 by: 25 do: [ :angle |			box := TRBoxShape new.			box from: position -1 to: position + 1.			box color: (Color blue alpha: 0.5).			t addShape: box.						label := TRRotatedLabelShape new.			label text: 'Hello World Bonjour Monde'.			label color: Color black.			label position: position.			label angleInDegree: angle.			t addShape: label ] ].		t open</body></methods><methods><class-id>Roassal2.TRCanvasExample</class-id> <category>events</category><body package="Roassal2-Trachel-Examples-Examples">event01	"	self new event01	"	| s1 s2 c |	s1 := TRBoxShape new color: (Color blue alpha: 0.8); size: 80; strokePaint: nil.		s2 := TREllipseShape new size: 100; color: (Color green alpha: 0.8); strokePaint: nil.	c := TRCanvas new.	c addShape: s1.	c addShape: s2.	s1 when: TRMouseDragging do: [ :e | 		s1 translateBy: e step.  		e signalUpdate ].	c open</body><body package="Roassal2-Trachel-Examples-Examples">mouseMove	"	self new mouseMove	"	| c lbl |	c := TRCanvas new.	lbl := TRLabelShape new text: 'pos'.	c addShape: lbl.		c when: TRMouseMove do: [ :evt | lbl text: (c camera fromPixelToSpace: evt position) printString. c signalUpdate ].	c open</body></methods><methods><class-id>Roassal2.TRCanvasExample</class-id> <category>examples</category><body package="Roassal2-Trachel-Examples-Examples">bezier	"	self new bezier.	"	| t points |	points := OrderedCollection new.	points add: 50 @ 50.	points add: 150 @ 20.	points add: 120 @ 130.	points add: 50 @ 150.	points add: 80 @ 80.	t := TRCanvas new.	t addShape: (TRLineShape  new from: 50 @ 50 to: 130 @ 20).	t addShape: 		(TRBezierShape new 			points: points; 			width: 2.5;			strokePaint: Color purple;			yourself).	t open</body><body package="Roassal2-Trachel-Examples-Examples">circle	"	self new circle	"	| c  |	c := TRCanvas new.	c buildRectangle: (50 @ 50 corner: 80 @ 80) color: (Color blue alpha: 0.2).	100 to: 200 by: 20 do: [ :i |		 c buildCircleFrom: 50 @ 50 to: i @ 100 color: (Color red alpha: 0.1).	].	c openTitled: 'Example with transparent circles'.</body><body package="Roassal2-Trachel-Examples-Examples">circle2	"	self new circle2	"	| c circle line1 line2 |	c := TRCanvas new.	circle := TREllipseShape new from: -50 @ -50 to: 50 @ 50.	circle color: (Color purple alpha: 0.3).	line1 := TRLineShape new from: -50 @ 0 to: 50 @ 0.	line2 := TRLineShape new from: 0 @ -50 to: 0 @ 50.	line1 color: (Color blue alpha: 0.5).	line2 color: (Color blue alpha: 0.5).		c addShape: circle.	c addShape: line1.	c addShape: line2.	c open</body><body package="Roassal2-Trachel-Examples-Examples">fixedRec	"	self new fixedRec	"	| c r1 r2 colors |	c := TRCanvas new.	r1 := c buildRectangle: ((0 @ 0) extent: (150 @ 75)) color: Color red.	r2 := c buildRectangle: ((0 @ 0) extent: (130 @ 50)) color: Color lightGreen.	c buildLineFrom: 50 @ 50 to: 80 @ 80 color: Color lightGreen.		colors := Array with: Color red with: Color blue with: Color white.	r1 when: TRMouseClick do: [ :event | event shape color: colors atRandom. c signalUpdate ].	r2 when: TRMouseClick do: [ :event | r2 color: colors atRandom. c signalUpdate ].				r2 setAsFixed.		c when: TRMouseDragging do: [ :event | c camera translateBy: event step negated. c signalUpdate ].	c open</body><body package="Roassal2-Trachel-Examples-Examples">label	"	self new label	"	| c |	c := TRCanvas new.	c addShape: (TRLabelShape new fontSize: 5).	c addShape: (TRLabelShape new fontSize: 25; position: 20 @ 20).	c open</body><body package="Roassal2-Trachel-Examples-Examples">rec1	"	self new rec1	"	| c |	c := TRCanvas new.	c buildRectangle: ((50 @ 50) extent: (150 @ 75)) color: Color red.	c buildRectangle: ((80 @ 80) extent: (150 @ 75)) color: Color lightGreen.	c buildLineFrom: 50 @ 50 to: 80 @ 80 color: Color lightGreen.	c open</body><body package="Roassal2-Trachel-Examples-Examples">recSimple	"	self new recSimple	"	| c |	c := TRCanvas new.	c buildRectangle: ((50 @ 50) extent: (150 @ 75)) color: Color red.	c open</body><body package="Roassal2-Trachel-Examples-Examples">text	"	self new text	"	| c label rec |	c := TRCanvas new.	label := TRLabelShape new.	rec := TRBoxShape new color: Color white.	rec fromRectangle: label encompassingRectangle.	c addShape: rec.	c addShape: label.	c open</body></methods><methods><class-id>Roassal2.TRCanvasExample</class-id> <category>animation</category><body package="Roassal2-Trachel-Examples-Examples">animatedArc	"	self new animatedArc	"	| v e angle timer |	v := TRCanvas new.	timer := TRVITimer new cycleLength: 2.	timer repeat.	angle := TRVIAnimatedValue new					evaluator: [ :t | 0 interpolateTo: 360 at: t ];					timer: timer;					yourself.						e := (TRArcShape new 			alphaAngle: angle betaAngle: (angle + 30) innerRadius: 50 externalRadius: 80).	v addShape: e.	angle start.	v addAnimation: (RTResetAllShape new).	v open</body></methods><methods><class-id>Roassal2.TRCanvasExample</class-id> <category>menu</category><body package="Roassal2-Trachel-Examples-Examples">menu1	"	self new menu1	"	| canvas |	canvas := TRCanvas new.	canvas addMenu: '+ box' callback: [ canvas addShape: (TRBoxShape new color: (Color purple alpha: 0.1); from: (400 atRandom @ 400 atRandom) extent: (100 atRandom @ 100 atRandom)). canvas signalUpdate ].	canvas addMenu: '+ circle' callback: [ canvas addShape: (TREllipseShape new color: (Color blue alpha: 0.1); from: (400 atRandom @ 400 atRandom) extent: (100 atRandom @ 100 atRandom)). canvas signalUpdate ].		canvas camera translateTo: 250 @ 250.	canvas open</body><body package="Roassal2-Trachel-Examples-Examples">menuWithSVGIcon1	"	self new menuWithSVGIcon1	"	| canvas svgPath1 svgPath2 |	canvas := TRCanvas new.	svgPath1 := 'M256,116.656L308.021,186H203.979L256,116.656z M256,50L123.966,226h264.068L256,50z M308.021,326L256,395.345L203.979,326H308.021z M388.034,286H123.966L256,462L388.034,286z'.	canvas addMenuAsSVG: svgPath1 scale: 0.1 callback: [ canvas addShape: (TRBoxShape new color: (Color purple alpha: 0.1); from: (400 atRandom @ 400 atRandom) extent: (100 atRandom @ 100 atRandom)). canvas signalUpdate ].	canvas addMenu: '+ circle' callback: [ canvas addShape: (TREllipseShape new color: (Color blue alpha: 0.1); from: (400 atRandom @ 400 atRandom) extent: (100 atRandom @ 100 atRandom)). canvas signalUpdate ].		canvas camera translateTo: 250 @ 250.	canvas open</body></methods><methods><class-id>Roassal2.RTRectangleAttachPointTest</class-id> <category>running</category><body package="Roassal2-AttachPoint-Tests">setUp	super setUp.	"| shape |	true ifTrue: [ ^ self skip ].	shape := RTBox new size: 20.	(el := shape element) translateTo: 0 @ 0.	(elX := shape element) translateTo: 100 @ 0.	(elD := shape element) translateTo: -100 @ -100.	edgeX := RTLine new		attachPoint: RTRectangleAttachPoint new;		edgeFrom: el to: elX.	edgeD := RTLine new		attachPoint: RTRectangleAttachPoint new;		edgeFrom: el to: elD"</body></methods><methods><class-id>Roassal2.RTRectangleAttachPointTest</class-id> <category>tests</category><body package="Roassal2-AttachPoint-Tests">testInside	"| ap |	el extent: 2000 @ 2000.	self assert: (edgeX shape startingPointOf: edgeX) = (1000 @ 0).	self assert: (edgeX shape endingPointOf: edgeX) = (110 @ 0).	ap := edgeD shape startingPointOf: edgeD.	self assert: -1000 @ -100 = ap | (-100 @ -1000 = ap).	ap := edgeD shape endingPointOf: edgeD.	self assert: -110 @ -100 = ap | (-100 @ -110 = ap)"</body><body package="Roassal2-AttachPoint-Tests">testNoCollision	"self assert: (edgeX shape startingPointOf: edgeX) = (10 @ 0).	self assert: (edgeX shape endingPointOf: edgeX) = (90 @ 0).	self assert: (edgeD shape startingPointOf: edgeD) = (-10 @ -10).	self assert: (edgeD shape endingPointOf: edgeD) = (-90 @ -90)"</body></methods><methods><class-id>Roassal2.RTSugiyamaLayoutTest</class-id> <category>as yet unclassified</category><body package="Roassal2-Layouts-Tests">testBasic	| v es |	v := RTView new.	es := RTBox elementsOn: (1 to: 10).	v addAll: es.	RTEdgeBuilder new		view: v;		connectFrom: [ :value | value // 2 ].	RTSugiyamaLayout on: v elements.</body></methods><methods><class-id>Roassal2.RTCollectionExtensionTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	self assert: ((#(5 4 1 5 2) sortedAs: #squared) asArray =  #(1 2 4 5 5) )</body><body package="Roassal2-Core-Tests">testReverseBasic	self assert: ((#(5 4 1 5 2) reverseSortedAs: #squared) asArray =  #(1 2 4 5 5) reverse )</body></methods><methods><class-id>Roassal2.RTMetricMapTest</class-id> <category>tests</category><body package="Roassal2-Builder-Map-Tests">testNameConversion	self assert: (b convertIntoSVGCountryName: 'France') = #France.	self assert: (b convertIntoSVGCountryName: 'Germany') = #Germany.	self assert: (b convertIntoSVGCountryName: 'New Zealand') = #NewZealand.	self assert: (b convertIntoSVGCountryName: 'Mauritius') = #Mauritania.	self assert: (b convertIntoSVGCountryName: 'MauritiusNotExisting') isNil.		self assert: (b convertIntoSVGCountryName: 'FR') = #France.	self assert: (b convertIntoSVGCountryName: 'UK') = #GreatBritian.	self assert: (b convertIntoSVGCountryName: 'DE') = #Germany.	self assert: (b convertIntoSVGCountryName: 'US') = #UnitedStates.	self assert: (b convertIntoSVGCountryName: 'CH') = #Switzerland.	self assert: (b convertIntoSVGCountryName: 'CA') = #Canada.	self assert: (b convertIntoSVGCountryName: 'AU') = #Austria.	self assert: (b convertIntoSVGCountryName: 'IE') = #Israel.	self assert: (b convertIntoSVGCountryName: 'IT') = #Italy.</body></methods><methods><class-id>Roassal2.RTMetricMapTest</class-id> <category>running</category><body package="Roassal2-Builder-Map-Tests">setUp	super setUp.	b := RTMetricMap new.</body></methods><methods><class-id>Roassal2.RTEllipseTest</class-id> <category>tests</category><body package="Roassal2-Tests">testBorderWidth	self assert: (RTEllipse new borderWidth rtValue: RTElement new) equals: TREllipseShape defaultStrokeWidth</body><body package="Roassal2-Tests">testBorderWidth02	self assert: (RTEllipse new borderWidthFor: RTElement new) equals: TREllipseShape defaultStrokeWidth</body></methods><methods><class-id>Roassal2.RTTreeMapExample</class-id> <category>icons</category><body package="Roassal2-Builder-TreeMap-Examples">example08Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAABP0lEQVR4XuXToQ2AMBRFUeZgBwxLdN5KBsCgqhCdgCn4TToCAkqOuP4lJ2+q1xzVr5e3dH+9wQfxQXwQH8QH8UF8EB/EB/FBfBAfxAfxQXwIH8QH8UF+A3KcS4yc/xD/IT6ID+KD+CA+iA/ig/ggPogP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4ID6ID/IcZC9rjJz/EP8hPogP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4ID6ID+KD+CA+iA/iQ/ggPogP4oP4ID6ID+KD+CA+iA/ybg2rSMm5jrJ+mgAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-TreeMap-Examples">exampleCollectionSubclassesIcon	^ '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zWoI7KMAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-TreeMap-Examples">exampleFileSystemIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAENElEQVR4XuXd3UtacRzH8ah/oesuumjBIoICKyp7cpWsUGdPxrIlY0W1FZF6Vqmpg25alhrUpHIjGkTuoue6iOhmt9Hf0t34/nbOYR489jCt0+bpc/HmHM+j+uJwjkqdrFAoROfn5/hlSFlnZ2d0dXVFR0dHaXVwcJD2On9rZ2fnxum7u7vXpl1cXNDGxgYdHx+L68XXPTw8FId7e3vSsvFp8emJ85Lb398XS/U5JW5bKBaLSdOE5+b3+8njdjOh1tZWmuGHtxWNRpkIcnJyIq70keOYb3o6pawWS8rLplq9VstmXK5rmU0mSp7msNtFkEgkQp/n5igQCFBse5vW19fFYTAYFIfitLU1aXx5eZm+rKxIj5MLh8O0tLQkPfZ6vdL4981NaXwhaX/xOI6jr9GoOC48NygQQ0UFWYqK0qo6L4/82dn/LF8affN41A0yZTDQltnM0mm8vJz9ysnJyM7wQfBB8EFSAuGvBm56I/r7+qQTTmNDg+yEZOJPUL6pKZZqzrEx2Qmss71dti/O4ZDmtSWd/OInxYmJCWkcHwQfBB8EHwQfBB8EH+QGEOGrAn1LC7XX1sp6VVND7XV1YoaqKmlcyCg8Tlr+rsxarWx9U3X1rfONwryEZeOZhWX/jL/mr7ye9GWvi7/sDA0PqybvyAg+CD4IPgg+CD4IPgg+CD4IPgg+CD6IykEe643TazQsyA+VbgYfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHyQNEOFv4biuLvYYGSorH2W74zYb/hFyn0aNRvxfDPFB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EGeBMiszXav9RYGB1lwZCTt8H/CxQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQfBB1ETiL2jg9asVpZOPv7Lzp8azX/vR0kJ2y4uplOtlkXz82khN5fW1Q4y2tNDoaEhpsb6e3tZr8Ui/u/jF/X19KyggNxuNz4IPgg+CD4IPgg+CD4IPgg+CD4IPkiGg/iam+lYp2Nq7E4Q4TaibRUVD+qtXk/4IAqB4B8h+CD4IPggYCAe/srBk3ADL6GX/Bvm53eoZF6XS0y4KRg+CD4IPgg+yD17b7Gwzo4OWZqyMurjd6pk+CAPOUKamsg/OcmUDB8EH0S9IIm3S53BB8k8kOeFhdTS2Kho+CD4R4g6Qd6ZTCTcUToxfBD8IwQf5C4QvU5HboeDKRk+CP4Rok6QqYEB5rTbZeGDZNgHQ01pKVm7u5mS4YPgf1JXJ8gHfuNdnZ2y8EHwj5CnAXJ5eUlzHPegvE4n+bxeWW+sVvrk8Sian9+u0OLi4tMFEe6OoMZWAwHamp9namwpHGbhUIhWIxG2wL+O2dlZdnp6yn4Dc30v7BmzzPIAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-TreeMap-Examples">exampleNumberIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFi0lEQVR4XuXd62/bVBgG8AoxxEWANmkSnygb+8BAExLbYBoglSGmaWhiH4aQNiEhBm3TJl2TtFopo3Rb2uZiO46d2E56+8eY2N/RD3vx68ojiU8S24kdt8+RHlWesuPL79gnsU9OJojwS5LKBP4hwAfBL/gg+CD4BR8EHwS/4IPgg+AXfBB8EF9l8bJC6fd1/ITMs3+evRgpSHpSp729PTIMY6xpNBpj34YgaTab9OeNejQghmHSwtm6vYJG4Cxdqo+kpeWnJKpvtaiYMUYSaU0ny7IiCTce0zSjBeHKtzJ1Wr2u+87jaYWe3tmm9ftVKuUaoTP9iuWAOHX9NlxdbpamZJJXrED74zeMEQvI6vU6aZrmaRELH9WErTr3tewcxKqsUvqMJnzNwx8qfVubqqo08+r/IP3q4jz6UR3Ygnd2dhyQjXtNqhSUga+vlCX/Z7O9bbGC8Ir4AGXOapQ61SBl0/77jkH7+/sdmTlhdYDwcvdrOEtTivDf3YhAeFn0WqNhOJfJfvVx2kGUojbw9bzO6Ymmr4wFJHPmcCc2fm7igyQBhFfKK2cIfJAEgKTeNSj7heKcKfggCQDZ3d19Ge7kGWTudKMjIpDs54onYUFEdS3fLGOCtG+srusOSPeGiUBEOxAWRFQXv9HAB8EHwQfBB+kC4R1y4/Yhqbc7gw8SE0jZ/mTLO9Ge7FWZFi9WPWkHmTtdp9TJhifLNyTa3t7uGRFIr7o4j25rfevjHBuQyqpOWzOm7xTyhwdxY61M8hMtdNpBNtdKQ9XlhkFK2Yb99r068sQGwitZvlmh3JWqr3Dr5oOY+9Jujb9YtCnI+j2tZ2vnZD7sBOlXF+evO7W+9XFmTpgOCJ8pg86OMIkVhJe7N4AvTaJOvR2En6mINl7X9L6XAP6/3SC96uLIhdrAy8rsWwY+CD4IPgg+CD7ImEDWb7U64nS8r5sd4ad8+CAxgEiSRDW15iv4IDGAdN86GfQpGx8EHwQfBB8EHwQfBB8EHwQfxA/IoFvb3bfO3YPY82bfqQE3Al+zPCB9bx4OqI9z+BzmiIM8/LZGWlUPnMe/1ujBp+rQYZDivEHZi+pI8sfdkvO0M4ooihItSKvVorXvrbGmMF8LdHaOOzwENTKQ/FcKfkLkwQU1GhAeEJeUljeof0hKFs6rzrGLDKS4YNh/9XDX7EvVofsQHnzHnXDuapUssxmqPxMlij7EHW4bOQg/gy6mjZ6PT4W5b5FStjvl82bo/iP/iUnZy8pLkI27LVq5pg/dL/Fd6ajeZcUGwsvyU2/y1yRhy561d5pBCj+1Qu9gwQboBlFKtaEPXOqkcTxARBvBz0SEH8LwQfBB8EHwQfBB8EHwQZILInp7mzknHjGIDxIxiFSWSZVrvlOVVAdk8eM6rXynhUr2gu4BeTIn09bv1lA5FiBBnodw+GtvDOIMDfI5gtxz2XvT+8GQ52AJW58bfBB8EHwQfBB8EHwQfBB8EHwQfBB8kKMBwkN7goZB0pOaM4QnTNIfaF6Qz6pDz1I3+8YRfkBVWuTbINZY44LUK82RzCrHiWK+xVhAeCW6Xne+sx04ihrqzGqPO2EBTzKT9JlInZlc4wDhiQP+vm06IwiDhO8ED3sZ4BkjHBB7Z9dvNUd2eeFveg3bF3kmD5jU4wMJ2qm7t+bxQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQY4JSP4byfkiSpDgg0QIwstBNxAfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHwQfBB8EHyQykBCjMPBBIgBJwm/RuiD8OyFJTvaKHC0IzzNS4pGLCchR+ZXozLkoz5CEt8ikZv69CObLev7v8xf4CZ+Dg4PRguCXeAo+CD4IfsEHwQfBL/gg+CD4BR8EHwS/xF3+A8ir+VLeOJwSAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-TreeMap-Examples">exampleSimpleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACoklEQVR4XuXdyWoCQRCA4byaD+ADeFMPnrwr4i6CuC8oihviqAiiIoiC26NVqAZzkhxMYo/5D2VPe7Cb+ehpmKkpPxzHke12ay3m87nV8R/FeDy2NvaHftxuN2ux2+2sjv8olsultbH5IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQBMh6vZZWqyWdTkf2+z0fxCbI9XqVXC4n5XJZ/H6/5PN5PohNkOPx+HV8Op34lyz+HsIH4YPwQfggfBA+CB+ED8IH4YPwQfgg9kHa7bY1kF6vxwYJBoOm1Vs3ejIymYyEw2GJRCISCAQkm82+DETnkkgkJJVKSa1WM/1n5/C2IOfzWZLJpIRCIVmtVuZkdLtdGQ6HcrlcJJ1OvwykUqlIsViUyWQis9nM9PU3npkDfw/h7yF8kG9BHMvZ7/pMhQ/CXyF8ED4IH4QPwgfhg/BB+CB8ED4IH4QPwgfhg/BB+CB8ED4IH8QWSCwWM22hUDBP7DabDR/EFsj9JN6z3huNhnl0yQdxQfb74XDgZ7/z9xA+CB+ED8IH4YPwQfggrgPRJDdFcVMsFgtrY/NXiMuCD8IH4YPwQfggfBA+CB+ED3LjZ7/zVwh/hfBB+CB8ED4IH4QPwgfhg/BB+CB8ED4IH4QPwgfhg/BB+CB8ED4IH+QNQB7d/vf5fKYgGR/kRWN5vV6Jx+PmuNlsmlYB9PUKDY/HY/para7f7/NB/jK0/F61WjXV37SvlekUZTQaSb1eN++5lEolk704nU7Nd3wQ/h7CB/kXIPc/ddHqm88ubT7IL4Fo5U1to9GoDAYD854hH4R/yeKD8EH4IHwQPggfhB98ED4IH4QPwgfhg/BB+CB8ED4IH4QPwgfhBx+ED8IH4YPwQfggP4lPMH/VCMYIisUAAAAASUVORK5CYII='</body></methods><methods><class-id>Roassal2.RTTreeMapExample</class-id> <category>accessing</category><body package="Roassal2-Builder-TreeMap-Examples">label	^ 'Tree map'</body></methods><methods><class-id>Roassal2.RTTreeMapExample</class-id> <category>sources</category><body package="Roassal2-Builder-TreeMap-Examples">example08	| b |	b := RTTreeMapBuilder new.	b shape fillColor: Color random.		b from: (1 to: 5) using: [#()].	b weight: #yourself.	^ b</body><body package="Roassal2-Builder-TreeMap-Examples">exampleCollectionSubclasses| b  |b := RTTreeMapBuilder new.	b shape	color: Color transparent;	borderColor: Color black;	if: [ :obj | obj isClass ] color: [ :cls | 		(Smalltalk includesKey: (cls name, 'Test') asSymbol) ifTrue: [ Color green ]		ifFalse: [ Color gray ] ].b	leafWeight: #numberOfLinesOfCode;	explore: Collection	using: #subclasses.^ b</body><body package="Roassal2-Builder-TreeMap-Examples">exampleNumber	| b |	b := RTTreeMapBuilder new.	b shape 		if: #even fillColor: Color lightGray;		if: #odd fillColor: Color purple.	b		extent: 400@400;		explore: 1		using: [ :n | n&lt; 8 ifTrue: [ Array with: n + 1 with:  n + 2 ] ifFalse: [ #() ] ];		weight: [ :n | n ].	^ b</body><body package="Roassal2-Builder-TreeMap-Examples">exampleSimple	| b labels |	b := RTTreeMapBuilder new.	labels := #('uno' 'dos' 'tres' 'cuatro' 'cinco' 'cent mille').	b shape fillColor: Color veryLightGray.	b from: labels using: [ #() ].	b weight: [ :n | n size ].	b build.	b view elements		@			(RTLabeled new				color: Color black;				setAsShouldBeInTheFront;				center).	^ b view</body></methods><methods><class-id>Roassal2.RTTabTableTest</class-id> <category>tests</category><body package="Roassal2-Table-Tests">testAccessing	tab input: 'key	m1	m2	m3A	1	2	5B	2	5	4C	1	7	4'.	self assert: tab numberOfRows = 4.	tab removeFirstRow.	self assert: tab numberOfRows = 3.</body><body package="Roassal2-Table-Tests">testAccessing2	tab input: 'key	m1	m2	m3A	1	2	5B	2	5	4C	1	7	4'.	self assert: tab numberOfRows = 4.	tab removeFirstRow.	self assert: tab numberOfRows = 3.	self assert: tab numberOfColumns = 4.	self assert: tab firstColumn = (Array with: 'A' with: 'B' with: 'C').</body><body package="Roassal2-Table-Tests">testCommasInsideQuotes	tab input:  '2014-01-26 00:00:00+00,Boeing 737-3B7 (SF),ZK-TLC,"Airwork, NZ,opf. Pacific Air Express",0,Honiara-Henderson International Airport(HIR),Solomon Islands,-9.428056,160.053056,"Brisbane International Airport, QLD (BNE/YBBN), Australia","Honiara-Henderson International Airport (HIR/AGGH), Solomon Islands",Accident resulting in a total loss of the plane,0101000020E6100000691B7FA2B201644091B6F1272ADB22C0,7,2014-07-18 11:46:49.32676+00,2014-07-18 11:47:01.156893+00'  usingDelimiter: $,.  self assert: tab numberOfColumns equals: 16</body><body package="Roassal2-Table-Tests">testConvertAsDateAndTime	tab input: TRPlatform current dateTimeStringExample usingDelimiter: $,.	tab convertColumnAsDateAndTime: 3.	tab convertColumnAsDateAndTime: 4.	self assert: tab values size equals: 3.		self assert: tab values first third year equals: 2014.	self assert: tab values last third year equals: 2008.	self assert: tab values last fourth year equals: 2009.	self assert: tab values last fourth month equals: 1.</body><body package="Roassal2-Table-Tests">testConvertAsFloats	tab input: '5.4,1.2,0,hello world' usingDelimiter: $,.	tab convertColumnsAsFloat: #(1 2 3).	self assert: tab values first equals: #(5.4 1.2 0 'hello world')</body><body package="Roassal2-Table-Tests">testConvertAsInteger	tab input: '5.4,1.2,0,hello world' usingDelimiter: $,.	tab convertColumnsAsInteger: #(1 2 3).	self assert: tab values first equals: #(5 1 0 'hello world')</body><body package="Roassal2-Table-Tests">testDetectDelimiter	data := 'm1	m2	m31	2	52	5	41	7	4'.	self assert: (tab detectDelimiterIn: data) equals: Character tab</body><body package="Roassal2-Table-Tests">testDetectDelimiter1	data := 'm1	m2	m3'.	self assert: (tab detectDelimiterIn: data) equals: Character tab</body><body package="Roassal2-Table-Tests">testDetectDelimiter2	data := 'm1,m2,m3'.	self assert: (tab detectDelimiterIn: data) equals: $,</body><body package="Roassal2-Table-Tests">testDetectDelimiter3	data := ''.	self assert: (tab detectDelimiterIn: data) equals: Character tab</body><body package="Roassal2-Table-Tests">testDictionaryValues	tab		input:			'm1	m2	m3A	1	2B	4	9'.	tab removeFirstRow.	self		assert: tab dictionaryValues		equals:			(Array with: (OrderedDictionary with: #m1 -&gt; 'A' with: #m2 -&gt; '1' with: #m3 -&gt; '2') with: 			(OrderedDictionary with: #m1 -&gt; 'B' with: #m2 -&gt; '4' with: #m3 -&gt; '9'))</body><body package="Roassal2-Table-Tests">testEmptyAndReplaceColumn	tab input: ',,' usingDelimiter: $,.	tab replaceEmptyValuesWith: 0 inColumns: #(1 2 3).	self assert: tab numberOfColumns equals: 3.	self assert: tab values first equals: #(0 0 0)</body><body package="Roassal2-Table-Tests">testEmptyColumn	tab input: ',,' usingDelimiter: $,.	self assert: tab numberOfColumns equals: 3</body><body package="Roassal2-Table-Tests">testFiltering	tab input: 'abc,123,1235,0,01,2,3' usingDelimiter: $,.	self assert: tab numberOfRows equals: 3.	tab rejectRow: [ :row | row first = 'abc' ]. 	self assert: tab numberOfRows equals: 2.	tab rejectRow: [ :row | row first = 'abc' ].	self assert: tab numberOfRows equals: 2.</body><body package="Roassal2-Table-Tests">testFilteringPerColumn	tab input: 'abc,123,1235,0,01,2,3' usingDelimiter: $,.	tab convertColumnAsInteger: 2.	self assert: tab numberOfRows equals: 3.	tab rejectInColumn: 2 row: #isZero. 	self assert: tab numberOfRows equals: 2.	tab rejectInColumn: 2 row: #isZero. 	self assert: tab numberOfRows equals: 2.	tab rejectRow: [ :row | row first = 'abc' ].	self assert: tab numberOfRows equals: 1.</body><body package="Roassal2-Table-Tests">testGathering	tab input: '1 A2 B1 A1 A5 B' usingDelimiter: $ .	tab convertColumn: 1 to: #asInteger.	tab gather: 2 using: [ :row1 :row2 | Array with: row1 first + row2 first with: row1 second ].	self assert: (tab values asArray = #( #(3 'A') #(7 'B')))</body><body package="Roassal2-Table-Tests">testGrouped	tab		input:			'm1	m2	m3A	1	2A	3	7B	2	5B	4	9'.	tab removeFirstRow.	tab convertColumnsAsInteger: #(m2 m3).	self		assert: (tab valuesGroupedBy: #m1)		equals:			(Array with: ('A'				-&gt;					(Array						with: (OrderedDictionary with: #m1 -&gt; 'A' with: #m2 -&gt; 1 with: #m3 -&gt; 2)						with: (OrderedDictionary with: #m1 -&gt; 'A' with: #m2 -&gt; 3 with: #m3 -&gt; 7)))			with: ('B'				-&gt;					(Array						with: (OrderedDictionary with: #m1 -&gt; 'B' with: #m2 -&gt; 2 with: #m3 -&gt; 5)						with: (OrderedDictionary with: #m1 -&gt; 'B' with: #m2 -&gt; 4 with: #m3 -&gt; 9))))				asDictionary</body><body package="Roassal2-Table-Tests">testMassiveConversion	tab input: 'key	m1	m2	m3A	1	2	5B	2	5	4C	1	7	4	'.	tab removeFirstRow.	self assert: tab values first second = '1'.	self assert: tab values third third = '7'.		tab convertColumns: (2 to: 4) to: [ :s | s asInteger ]. 	self assert: tab values first second = 1.	self assert: tab values third third = 7.		self assert: tab minimum = 1.	self assert: tab maximum = 7.		self assert: (tab maxOfColumn: #second) = 2.	self assert: (tab maxOfColumn: #fourth) = 5.	self assert: (tab maxOfColumn: [ :row | row at: 3 ]) = 7.</body><body package="Roassal2-Table-Tests">testMinimumAndMaximum	tab input: '5.4,1.2,0,hello world-56,1.2,100,bravo' usingDelimiters: ','.	tab convertColumnsAsFloat: #(1 2 3).	self assert: tab minimum equals: -56.0.	self assert: tab maximum equals: 100.		self assert: (tab maxOfColumn: #first) equals: 5.4.	self assert: (tab maxOfColumn: #second) equals: 1.2.	self assert: (tab maxOfColumn: #third) equals: 100.0.		self assert: tab firstColumn equals: #(5.4 -56).</body><body package="Roassal2-Table-Tests">testProcessing	tab input: 'France	20Germany	80'.	tab convertColumn: 2 to: #asInteger.	self assert: (tab values = #( #('France' 20) #('Germany' 80)))</body><body package="Roassal2-Table-Tests">testProcessingWithEmptyLines	tab input: 'France	20Germany	80'.	tab convertColumn: 2 to: #asInteger.	self assert: (tab values = #( #('France' 20) #('Germany' 80)))</body><body package="Roassal2-Table-Tests">testRemovingColumn	tab		input:			'Country	number	toremoveFrance	20	toremoveGermany	80	toremove'.	tab removeFirstRow.	tab removeColumn: 3.	self assert: tab values equals: #(#('France' '20') #('Germany' '80')).	self assert: tab firstRow equals: #('Country' 'number')</body><body package="Roassal2-Table-Tests">testUsingFirstRow	| tabString |	tabString :='x,y4,12,61,31,5'.	tab := RTTabTable new input: tabString usingDelimiter: $,.	tab removeFirstRow.	tab convertColumnsAsInteger: #('x' 'y').		self assert: (tab indexOfName: 'x') equals: 1.	self assert: (tab indexOfName: 'y') equals: 2.		self assert: (tab valuesOfColumn: 'x') equals: #(4 2 1 1).		self assert: (tab convertFromNameToIndexIfNecessary: 1) equals: 1.	self assert: (tab convertFromNameToIndexIfNecessary: 100) equals: 100.	self assert: (tab convertFromNameToIndexIfNecessary: 'x') equals: 1.	self assert: (tab convertFromNameToIndexIfNecessary: 'y') equals: 2.</body><body package="Roassal2-Table-Tests">testWithQuote	tab input: 'abc,def,"ghi,ijk"' usingDelimiter: $,.	self assert: tab numberOfColumns equals: 3</body></methods><methods><class-id>Roassal2.RTTabTableTest</class-id> <category>running</category><body package="Roassal2-Table-Tests">setUp	super setUp.	tab := RTTabTable new</body></methods><methods><class-id>Roassal2.RTShapedObjectTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testEmittingEvent	| el t |	t := 0.	el := RTBox element.	el when: TRMouseEnter do: [ :evt | t := t + 1 ].		self assert: t = 0.	el announce: TRMouseEnter.	self assert: t = 1</body></methods><methods><class-id>Roassal2.RTDSMTest</class-id> <category>tests</category><body package="Roassal2-Builder-DSM-Tests">testDefault	| dsm |	dsm := RTDSM new.	self assert: dsm numberOfObjects equals: 0</body><body package="Roassal2-Builder-DSM-Tests">testDep	| dsm v ts |	dsm := RTDSM new.	dsm doNotShowLabels.	dsm objects: (1 to: 10).	dsm dependency: [ :aValue | aValue // 2 ].	dsm build.	v := dsm view.	self assert: v numberOfElements equals: 100.		ts := v elements collect: [ :e | e trachelShape color ].	self assert: ts asSet size equals: 2</body><body package="Roassal2-Builder-DSM-Tests">testExample01	| dsm |	dsm := RTDSM new.	dsm objects: RTShape withAllSubclasses.	dsm dependency: #dependentClasses.	dsm build</body><body package="Roassal2-Builder-DSM-Tests">testExample02	| dsm es column5 row5 |	dsm := RTDSM new.	dsm objects: (1 to: 10).	dsm dependency: [ :aValue | aValue // 2 ].	dsm build.		es := dsm elements.	self assert: es size equals: 100.	self assert: (dsm elementAt: 1 @ 1) model equals: 1 -&gt; 1.	self assert: (dsm elementAt: 3 @ 1) model equals: 1 -&gt; 3.	self assert: (dsm elementAt: 10 @ 10) model equals: 10 -&gt; 10.	self assert: (dsm elementAt: 5 @ 2) model equals: 2 -&gt; 5.		column5 := dsm columnAt: 5.	self assert: column5 size equals: 10.	self assert: column5 first model equals: 1 -&gt; 5.		row5 := dsm rowAt: 5.	self assert: row5 size equals: 10.	self assert: row5 first model equals: 5 -&gt; 1.		column5 first announce: (TRMouseEnter new shape: column5 first trachelShape)</body><body package="Roassal2-Builder-DSM-Tests">testHightlightElements	| b elements |	b := RTDSM new.	b objects: (1 to: 3).	b dependency: [ :aValue | aValue + 1 ].	b shape box color: Color blue.	b build.	b highlightElements.	elements := b view elements select: [ :e| e trachelShape class = TRBoxShape ].	self assert: elements first color equals: (Color blue alpha: b transparencyWhenHighlighted).	b unhighlightElements.	self assert: elements first color equals: (Color blue alpha: b transparencyWhenNonHighlighted).</body><body package="Roassal2-Builder-DSM-Tests">testLabelShapeColor	| b elements |	b := RTDSM new.	b objectsX: #(1 2 3 4).	b objectsY: #( 'A' 'B' 'C' ).	b labelShapeX 		if: [:n | n even ] color: Color red.	b build.	elements := b view elements select: [ :e | 		e trachelShape class = TRLabelShape and: [ e model isKindOf: Number ] ].	self assert: elements first model equals: 1.	self assert: elements second color equals: Color red</body><body package="Roassal2-Builder-DSM-Tests">testLabelShapeHeight	| b elements |	b := RTDSM new.	b objectsX: #(1 2 3 4).	b objectsY: #( 'A' 'B' 'C' ).	b labelShapesDo: [ :l| l height: 30; color: Color blue ].	b build.	elements := b view elements select: [ :e | 		e trachelShape class = TRLabelShape ].	self assert: elements first color equals: Color blue.	self assert: elements first height &gt; TRLabelShape defaultFontSize.</body><body package="Roassal2-Builder-DSM-Tests">testLabelsTopPosition	| b elements firstRow|	b := RTDSM new.	b objectsY: (1 to: 3).	b objectsX: #(#a #b #c).	b dependency: [ :aValue | aValue + 1 ].	b build.	elements := b view elements select: [ :e | 		e trachelShape class = TRLabelShape and: [ e model isString ] ]. 	firstRow := b rowAt: 1.	firstRow doWithIndex: [ :e :i | 		self assert: e position x equals: (elements at: i) position x ].</body><body package="Roassal2-Builder-DSM-Tests">testUsingXAndY	| b |	b := RTDSM new.	b objectsX: #(1 2 3 4).	b objectsY: #( 'A' 'B' 'C' ).	b build.		self assert: b objectsX size equals: 4.	self assert: b objectsY size equals: 3.</body></methods><methods><class-id>Roassal2.RTTreeMapExampleTODELETE</class-id> <category>examples</category><body package="Roassal2-Builder-TreeMap-Examples">example02	"	self new example02	"	| b |	b := RTTreeMapBuilder new.	b shape 		if: [ :cls| Smalltalk includesKey: (cls name, 'Test') asSymbol ] fillColor: Color lightGreen;		if: [ :cls | cls name endsWith: 'Line' ] fillColor: Color purple;		if: [ :cls | cls hasAbstractMethods ] fillColor: Color red.	b popup text: [ :cls | cls name, ' number of methods: ', cls numberOfMethods asString ].		b		extent: 400@400;		explore: TRShape using: #subclasses;		weight: [:el | el numberOfMethods == 0 ifTrue: [ 1 ] ifFalse: [ el numberOfMethods ]  ].	^ b</body><body package="Roassal2-Builder-TreeMap-Examples">example03	"	self new example03	"	| b mt |	b := RTTreeMapBuilder new.	b shape 		if: [ :m| Smalltalk includesKey: (m name,'Test') asSymbol ] fillColor: Color lightGreen;		if: [ :m| m hasAbstractMethods ] fillColor: Color red.		b		extent: 400@400;		weight: 1.	mt := TRPlatform current morphClass.	b explore: mt		using: #subclasses.	b elements do: [ :e | e when: TRMouseClick do: [ :evt | e model inspect ] ].	^ b</body><body package="Roassal2-Builder-TreeMap-Examples">example04	"	self new example04	"	| b |	b := RTTreeMapBuilder new.	b		extent: 400@400;		weight: [:n | n ].	b shape if: [ :n | n even ] fillColor: Color blue;		if: [ :n | n odd ] fillColor: Color lightGray.			b from: (1 to: 10)		using: [:n | n &lt; 5 ifTrue: [ Array with: n+1 with: n+2 ] ifFalse: [ #() ] ].	^ b</body><body package="Roassal2-Builder-TreeMap-Examples">example05	"	self new example05	"	| b normalizer tally methods mt |	b := RTTreeMapBuilder new.	b shape 		if: [ :m| Smalltalk includesKey: (m theClass name,'Test') asSymbol ] fillColor: Color lightGreen;		if: [ :m| m theClass hasAbstractMethods ] fillColor: Color red.	mt := TRPlatform current messageTallyClass.	tally := (mt new		spyEvery: 1		on: [Object browse]; yourself).	methods := tally withDeepCollect: #children.		normalizer := RTNColorLinearNormalizer inContext: methods withCommand: #tally lowColor: Color gray highColor: Color red.	b shape borderColor: [ :e |normalizer rtValue: e ];		borderWidth: 2.		b		extent: 500@500;		weight: [:m | m tally ].	b explore: tally		using: #children.	b elements do: [ :e | e when: TRMouseClick do: [ :evt | e model inspect ] ].	^ b</body><body package="Roassal2-Builder-TreeMap-Examples">example06	"	self new example06	"	| b mt |	b := RTTreeMapBuilder new.	b shape 		if: [ :m| Smalltalk includesKey: (m name,'Test') asSymbol ] fillColor: Color lightGreen;		if: [ :m| m hasAbstractMethods ] fillColor: Color red;		borderWidth: 2.		b		extent: 400@400;		weight: 1.	mt := TRPlatform current morphClass.	b explore: mt		using: #subclasses.	b withShadedFramesFromColor: Color gray toColor: Color red.	b elements do: [ :e | e when: TRMouseClick do: [ :evt | e model inspect ] ].		^ b</body><body package="Roassal2-Builder-TreeMap-Examples">example07	"	self new example07	"	| b mt |	b := RTTreeMapBuilder new.	mt := TRPlatform current morphClass.	b		extent: 400@400;		weight: 1;		explore: mt		using: #subclasses;		depthShadedBorder.	^ b</body></methods><methods><class-id>Roassal2.RTTreeLayoutTest</class-id> <category>tests</category><body package="Roassal2-Layouts-Tests">testAddingAttachPoint	| v es lineShape l |	v := RTView new.	es := RTBox elementsOn: (1 to: 2).	v addAll: es.	lineShape := RTLine new.	l := lineShape edgeFrom: es first to: es second.	v add: l.		self assert: lineShape attachPoint class equals: RTCenteredAttachPoint.	RTHorizontalTreeLayout on: es.	self assert: lineShape attachPoint class equals: RTHorizontalAttachPoint.</body><body package="Roassal2-Layouts-Tests">testAddingAttachPointOnVertical	| v es lineShape l |	v := RTView new.	es := RTBox elementsOn: (1 to: 2).	v addAll: es.	lineShape := RTLine new.	l := lineShape edgeFrom: es first to: es second.	v add: l.		self assert: lineShape attachPoint class equals: RTCenteredAttachPoint.	RTTreeLayout on: es.	self assert: lineShape attachPoint class equals: RTVerticalAttachPoint.</body><body package="Roassal2-Layouts-Tests">testAttachPoint	| v es edge |	v := RTView new.	es := RTBox new size: 10; elementsOn: #(1 2).	v addAll: es.	edge := RTLine new color: Color red; edgeFrom: es first to: es second.	v add: edge.	RTTreeLayout on: es.	self assert: edge trachelShape from equals: 10 @ 15.	self assert: edge trachelShape from ~= es first center.		self assert: edge trachelShape to equals: 10 @ 35.	self assert: edge trachelShape to ~= es second center.</body><body package="Roassal2-Layouts-Tests">testAttachPointAndArrowedLine	| v es edge |	v := RTView new.	es := RTBox new size: 10; elementsOn: #(1 2).	v addAll: es.	edge := RTArrowedLine new color: Color red; edgeFrom: es first to: es second.	v add: edge.	RTTreeLayout on: es.	self assert: edge trachelShape from equals: 10 @ 15.	self assert: edge trachelShape from ~= es first center.		self assert: edge trachelShape to equals: 10 @ 35.	self assert: edge trachelShape to ~= es second center.</body><body package="Roassal2-Layouts-Tests">testAttachPointAndArrowedLineNo	| v es edge |	v := RTView new.	es := RTBox new size: 10; elementsOn: #(1 2).	v addAll: es.	edge := RTArrowedLine new color: Color red; edgeFrom: es first to: es second.	v add: edge.	RTTreeLayout new doNotAttachPoint; on: es.	self assert: edge trachelShape from equals: es first center.	self assert: edge trachelShape to equals: es second center</body><body package="Roassal2-Layouts-Tests">testAttachPointNo	| v es edge |	v := RTView new.	es := RTBox new size: 10; elementsOn: #(1 2).	v addAll: es.	edge := RTLine new color: Color red; edgeFrom: es first to: es second.	v add: edge.	RTTreeLayout new doNotAttachPoint; on: es.	self assert: edge trachelShape from equals: es first center.	self assert: edge trachelShape to equals: es second center</body><body package="Roassal2-Layouts-Tests">testBasic	| layout |	layout := RTTreeLayout new.	self assert: layout shouldSetDefaultAttachPoint.	layout doNotAttachPoint.	self deny: layout shouldSetDefaultAttachPoint.</body><body package="Roassal2-Layouts-Tests">testNotAddingAttachPoint	| v es lineShape l |	v := RTView new.	es := RTBox elementsOn: (1 to: 2).	v addAll: es.	lineShape := RTLine new.	l := lineShape edgeFrom: es first to: es second.	v add: l.	self assert: lineShape attachPoint class equals: RTCenteredAttachPoint.	RTHorizontalTreeLayout new		doNotAttachPoint;		on: es.	self assert: lineShape attachPoint class equals: RTCenteredAttachPoint</body></methods><methods><class-id>Roassal2.RTTreeLayoutTest</class-id> <category>tests - reversed</category><body package="Roassal2-Layouts-Tests">testHorizontallyReversed	| layout v edge lineShape elements |		v := RTView new.	elements := RTBox elementsOn: (1 to: 3).	v addAll: elements.	lineShape := RTLine new.	edge := lineShape edgeFrom: elements first to: elements second.	v add: edge.	edge := lineShape edgeFrom: elements first to: elements third.	v add: edge.	layout := RTTreeLayout new.		"NO REVERSE"	layout on: elements.	self assert: elements second position y &gt; elements first position y.	self assert: elements second position x &lt; elements first position x.	self assert: elements second position y equals: elements third position y.		"REVERSE"	layout horizontallyReverse.	layout on: elements.	self assert: elements second position y &gt; elements first position y.	self assert: elements second position x &gt; elements first position x.	self assert: elements second position y equals: elements third position y.		"ATTACHPOINT"	self assert: (v edges noneSatisfy: [ :ed | ed shape attachPoint isInverted ]).	self assert: (v edges collect: [ :ed | ed shape attachPoint ]) asSet size equals: 1.</body><body package="Roassal2-Layouts-Tests">testHorizontallyReversedSetting	| l |	l := RTTreeLayout new.	self deny: l shouldBeHorizontallyReversed.	self deny: l shouldBeVerticallyReversed.	l horizontallyReverse.	self assert: l shouldBeHorizontallyReversed.	self deny: l shouldBeVerticallyReversed.</body><body package="Roassal2-Layouts-Tests">testVerticallyReversed	| layout v edge lineShape elements |		v := RTView new.	elements := RTBox elementsOn: (1 to: 3).	v addAll: elements.	lineShape := RTLine new.	edge := lineShape edgeFrom: elements first to: elements second.	v add: edge.	edge := lineShape edgeFrom: elements first to: elements third.	v add: edge.	layout := RTTreeLayout new.		"NO REVERSE"	layout on: elements.	self assert: elements second position y &gt; elements first position y.	self assert: elements second position x &lt; elements first position x.	self assert: elements second position y equals: elements third position y.		"REVERSE"	layout verticallyReverse.	layout on: elements.	self assert: elements second position y &lt; elements first position y.	self assert: elements second position x &lt; elements first position x.	self assert: elements second position y equals: elements third position y.		"ATTACHPOINT"	self assert: (v edges collect: [ :ed | ed shape attachPoint ]) asSet size equals: 1.</body><body package="Roassal2-Layouts-Tests">testVerticallyReversedAndAttachPoint	| es v edge |	v := RTView new.	es := RTBox new color: Color blue trans; size: 10; elementsOn: #(1 2).	v addAll: es.	edge := RTArrowedLine new color: Color red trans; edgeFrom: es first to: es second.	v add: edge.	es @ RTDraggable.		RTTreeLayout new verticallyReverse; on: es.	self assert: edge trachelShape from equals: es first encompassingRectangle topCenter.	self assert: edge trachelShape from equals: 10 @ 25.	self assert: edge trachelShape to equals: es second encompassingRectangle bottomCenter.	self assert: edge trachelShape to equals: 10 @ 5.</body><body package="Roassal2-Layouts-Tests">testVerticallyReversedAndAttachPointNo	| es v edge |	v := RTView new.	es := RTBox new color: Color blue trans; size: 10; elementsOn: #(1 2).	v addAll: es.	edge := RTArrowedLine new color: Color red trans; edgeFrom: es first to: es second.	v add: edge.	es @ RTDraggable.		RTTreeLayout new doNotAttachPoint; verticallyReverse; on: es.	self assert: edge trachelShape from equals: es first center.	self assert: edge trachelShape from equals: 10 @ 30.	self assert: edge trachelShape to equals: es second center.	self assert: edge trachelShape to equals: 10 @ 0.</body><body package="Roassal2-Layouts-Tests">testVerticallyReversedAndAttachPointNo02	| es v edge |	v := RTView new.	es := RTBox new color: Color blue trans; size: 10; elementsOn: #(1 2).	v addAll: es.	edge := RTArrowedLine new color: Color red trans; edgeFrom: es first to: es second.	v add: edge.	es @ RTDraggable.		RTTreeLayout new verticallyReverse; doNotAttachPoint; on: es.	self assert: edge trachelShape from equals: es first center.	self assert: edge trachelShape from equals: 10 @ 30.	self assert: edge trachelShape to equals: es second center.	self assert: edge trachelShape to equals: 10 @ 0.</body><body package="Roassal2-Layouts-Tests">testVerticallyReversedSetting	| l |	l := RTTreeLayout new.	self deny: l shouldBeVerticallyReversed.	self deny: l shouldBeHorizontallyReversed.	l verticallyReverse.	self assert: l shouldBeVerticallyReversed.	self deny: l shouldBeHorizontallyReversed.</body></methods><methods><class-id>Roassal2.RTDoubleScrollBarTest</class-id> <category>running</category><body package="Roassal2-Builder-ScrollBar-Tests">setUp	super setUp.	view := RTView new</body></methods><methods><class-id>Roassal2.RTDoubleScrollBarTest</class-id> <category>tests</category><body package="Roassal2-Builder-ScrollBar-Tests">testBasic	view @ RTDoubleScrollBar</body><body package="Roassal2-Builder-ScrollBar-Tests">testBasic02	| es |	es := (RTBox new size: #yourself) elementsOn: (0 to: 1000 by: 100).	view addAll: es.	RTFlowLayout on: es.	view @ RTDoubleScrollBar</body></methods><methods><class-id>Roassal2.RTShowLabelTest</class-id> <category>tests</category><body package="Roassal2-Tests">testBasic	view := RTView new.	box := RTBox new size: 30; elementOn: 'Hi'.	view add: box.	self assert: view canvas shapes size equals: 1.	box @ RTShowLabel.	self assert: view canvas shapes size equals: 1.	box testCaseAnnounce: TRMouseEnter.	self assert: view canvas shapes size equals: 2.		box testCaseAnnounce: TRMouseLeave.	self assert: view canvas shapes size equals: 1.</body><body package="Roassal2-Tests">testBasic02	| v e int labelledInteraction |	v := RTView new.	e := RTBox elementOn: 1.	v add: e.	int := RTShowLabel new.	int highlightObject: #yourself.	int top.	int color: Color red.	e @ int.	"Checking the labelledInteraction"	labelledInteraction := int labelledInteraction.	self assert: labelledInteraction textElement notNil.	self assert: (labelledInteraction textElement rtValue: e) equals: 1.	"Low level highlight"		self assert: v canvas numberOfShapes equals: 1.	int doHighlightElement: e.	self assert: v canvas numberOfShapes equals: 2.	int doUnhighlightElement: e.	self assert: v canvas numberOfShapes equals: 1.		"High level highlight"		self assert: v canvas numberOfShapes equals: 1.	int doHighlight: e.	self assert: v canvas numberOfShapes equals: 2.	int doUnhighlight: e.	self assert: v canvas numberOfShapes equals: 1.	"Simulating mouse entering"	self assert: v canvas numberOfShapes equals: 1.	e testCaseAnnounce: TRMouseEnter.	self assert: v canvas numberOfShapes equals: 2.	e testCaseAnnounce: TRMouseLeave.	self assert: v canvas numberOfShapes equals: 1.</body><body package="Roassal2-Tests">testBasic03	view := RTView new.	box := RTBox new size: 30; elementOn: 'Hi'.	view add: box.	self assert: view canvas shapes size equals: 1.	box @ RTShowLabel.	self assert: view canvas shapes size equals: 1.	box announce: TRMouseEnter.	box announce: TRMouseEnter.	self assert: view canvas shapes size equals: 2.		box announce: TRMouseLeave.	self assert: view canvas shapes size equals: 1.</body><body package="Roassal2-Tests">testSetLabelledInteraction	| lbl |	lbl := RTShowLabel new.	lbl labelledInteraction: RTLabeled new</body><body package="Roassal2-Tests">testVisit	| int e v |	int := RTShowLabel new.	int highlightObject: #yourself.	int top.	int color: Color red.		e := (RTBox elementOn: 3).	v := RTView new.	v add: e.	int accept: RTJavascriptVisitor new with: e</body><body package="Roassal2-Tests">testWithNesting	| v e e2 int |	v := RTView new.	e := RTBox elementOn: 1.	v add: e.	e2 := (RTBox new color: Color blue) elementOn: 2.	v add: e2.	RTNest new on: e nest: (Array with: e2).	int := RTShowLabel new.	int highlightObject: #yourself.	e @ int.		"We enter and leave the outter element"	self assert: v canvas numberOfShapes equals: 2.	e announce: TRMouseEnter.	self assert: v canvas numberOfShapes equals: 3.	e announce: TRMouseLeave.	self assert: v canvas numberOfShapes equals: 2.		"We enter the outer and inner elements"	e announce: TRMouseEnter.	e announce: TRMouseLeave.	e2 announce: TRMouseEnter.	self assert: v canvas numberOfShapes equals: 2.	e2 announce: TRMouseLeave.	e announce: TRMouseLeave.	self assert: v canvas numberOfShapes equals: 2.</body><body package="Roassal2-Tests">testWithNesting02	| v e e2 int |	v := RTView new.	e := RTBox elementOn: 1.	v add: e.	e2 := (RTBox new color: Color blue) elementOn: 2.	v add: e2.	RTNest new on: e nest: (Array with: e2).	int := RTShowLabel new.	int highlightObject: #yourself.	e @ int.		"We enter and leave the outter element"	self assert: v canvas numberOfShapes equals: 2.	e announce: TRMouseEnter.	self assert: v canvas numberOfShapes equals: 3.	e announce: TRMouseLeave.	self assert: v canvas numberOfShapes equals: 2.		"We enter the outer and inner elements"	e announce: TRMouseEnter.	e announce: TRMouseLeave.	"For some strange reason, this is what happens"	e announce: TRMouseEnter.	self assert: v canvas numberOfShapes equals: 3.	e2 announce: TRMouseLeave.	e announce: TRMouseEnter.	e announce: TRMouseLeave.	self assert: v canvas numberOfShapes equals: 2.</body></methods><methods><class-id>Roassal2.RTLineDecorationExample</class-id> <category>sources</category><body package="Roassal2-ExampleBrowser-Examples">exampleCool	| v b1 b2 edges |	b1 := (RTBox new		size: 100;		element)		translateTo: 0 @ 0;		@ RTDraggable.	b2 := (RTBox new		size: 100;		element)		translateTo: 400 @ 0;		@ RTDraggable.	edges := OrderedCollection new.	edges add: ((RTArrowedLine new head: RTFilledDiamond asHead; color: Color black; width: 2; attachPoint: (RTBorderAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new color: Color blue; width: 2; attachPoint: (RTBorderAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new filledDiamondHead; color: Color green; width: 2; attachPoint: (RTBorderAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new filledDiamondHead; emptyCircleTail; color: Color red; width: 2; attachPoint: (RTBorderAttachPoint new offset: 15)) edgeFrom: b1 to: b2).v := RTView new	add: b1;	add: b2;	addAll: edges.edges do: [ :each | each update ].^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleCoolWithJump	| v b1 b2 edges |	b1 := (RTBox new		size: 150;		element)		translateTo: 0 @ 0;		@ RTDraggable.	b2 := (RTBox new		size: 150;		element)		translateTo: 400 @ 0;		@ RTDraggable.	edges := OrderedCollection new.	edges add: ((RTArrowedLine new head: RTFilledDiamond asHead; color: Color black; width: 2; attachPoint: (RTShorterDistanceWithOffsetAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new color: Color blue; width: 2; attachPoint: (RTShorterDistanceWithOffsetAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new filledDiamondHead; color: Color green; width: 2; attachPoint: (RTShorterDistanceWithOffsetAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	edges add: ((RTDecoratedLine new filledDiamondHead; emptyCircleTail; color: Color red; width: 2; attachPoint: (RTShorterDistanceWithOffsetAttachPoint new offset: 15)) edgeFrom: b1 to: b2).	v := RTView new		add: b1;		add: b2;		addAll: edges.	edges do: [ :each | each update ].	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleStyledMultiLineHeads|view addHead heads offset|view := RTView new.addHead := [ :aHeadName :anOffset |	| e1 e2 l1 |	e1 := RTBox new element.	e2 := RTBox new element.	l1 := RTStyledMultiLine new		color: Color black;		perform: aHeadName asSymbol;		edgeFrom: e1 to: e2.	l1 model: aHeadName.	view addAll: (Array with: e1 with: e2 with: l1).	e1 translateBy: -110 @ anOffset.	e2 translateBy: 110 @ anOffset.	l1 @ (RTLabeled new color: Color black) ].heads := (RTStyledMultiLine rtmethods collect: [ :m | m selector ]) select: [ :m | m endsWith: 'Head' ].offset := 0.heads	do: [ :id | 		addHead value: id value: offset.		offset := offset + 40 ].^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleStyledMultiLineHeadsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGEAAABCCAAAAABiVefnAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQffCAMOAQeAmGmdAAAEs0lEQVRYw+1YXWhbVRw/aVrwRSg4YeCgsAfZg/UDnxVBnwQFEZE9jIHIcJtuSqcjw1qpi42OpEljtV2lrevarluXzZXaD1aossHK2lHaabRN2jQftZqEpWmaNLn33L/39n7k3pN7czNvJir9PyX3/M7/d875f56D4EELIj8wWHcOpnUhDM1oMpTEIVOgKSIE8ToFoWkYGKKAUZmPaQFDgeMiFIfkYMB9T4SwDLmsbHGQutB0E1NZYj1bst/wInphGOMtJYTJ5DkpaDp3umMNtj8hBpLT3/0wOiLKxI2+t14ZTIJijZmfe6+NCYDhn55FFabas1ElA+W/NDguQiaPxODWSWsYCwxTZz3fXxVlaOLyO8+d21AypOc7L14TAJ7xZ5AZ7bZHledE+c73SpDRQ1Hw1n0YwvwpZdMK5Mjp4TSVIRa4mVdHw0uotjuF00oITuUdhAKb53O7D7Zn8b6EJVNDX29K3YxYsvQnrTk9S3dZQzJLExYrxRVL8VYs91bFZKw7Gd/XEpAe1rDsMPxLGfQzcymC8+FXuAd9by1JNL01N7gFhikwXJ+TDoNkYB45YnwXbGLZ7xcpSAa6Bn1gmIIGx/RHvwgUPAMjClB7EHpf7ZwYpagplgYpsK7Fj3sBCwybsWR+At6DqtB760nl3GxsnfCxdDxBrDueyOX3YAtC5NhsSqxAPza43Ly0uF3VyFSFLBmixt2x2r9y56WltaF/jTj7BUdTaws/7Gp/Mw6w+LpPrKILt/zLvCwFfLtRJaq9QVbRpanfAkvLkiwFZubIKhq6fXdFgPiillUAR1tUqHGKQ2VPCT0VJONOpcEp+CT7z3YCQbB18lqQwkQYqBr0dBBUOiZG39TSWA5sfzR3CVoK4uHRfWHDmYOCL4/3acVD9uCi8dREg/0bzZguqaksRSQtBQy4zAT/zwq0wyCKrGdTqaJYtzwwNF3U4zgF2t7KaWeKU3DDxaKGhkyvl+hbGVlmmunoCauUIDkk0tEe1ISw/bvv1PnGAbEZIHIrhrH62esnQsR8+Yox+Pci9Ng8mR7zfy9ZloHq+vR3Ibdy9eH2SigY4iQYWbRsAkw15sj6MO0P85BQIHEAVVWhV1PEHSg08ysLCYYXHN05YO10p96zJta4yfpmFy/Orz+2QBoSJzbIGvfZmRYnj2lufxxVVqIn4wTDgt3qdrqa2w4dZmsAsBcZz8sB4Q60GVuXgRtnAbo7iVPKxhJSwqXhDDKb0UkigdHxezneUybr5jljO21/JnChpTGsnGr7wqmSv2W1Z+vdXbveTmmZGsNqfQ/crRsG9VsWO3/Or9P1MbAaKQJhF95fx97jaK17HKPbunKeVQzCbSMj+ZZK1iih49MJSVY7ftD3ONkK/rO5dYfBIAMuUzejxbCdpUt4FfnbDGzO7X/NC3RZtyF7X6JpSB42oepvdUP2fhnENzIGbj6BzJUm9EaEfAAzxMC987VfvnrlimfoaAUym5DJjKo7NoxfquUM0z0jY6OjIxMND3MMFWa090KyjAz591YGvM+zp4RMx9bJx1SDDOKbMWvpbMNDqGaoXE8bMgZR2FZn/OhqmQNCJeLKHNQFWaPMEf1PZL6/AAR+8n9Npcr0AAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDE1LTA4LTAzVDE2OjAwOjMwKzAyOjAwCPXwuwAAACV0RVh0ZGF0ZTptb2RpZnkAMjAxNS0wOC0wM1QxNjowMDozMCswMjowMHmoSAcAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleStyledMultiLineStyles|view addStyle styles|view := RTView new.addStyle := [ :aStyleName |	| e1 e2 l1 |	e1 := RTBox new element.	e2 := RTBox new element.	l1 := RTStyledMultiLine new		color: Color black;		perform: aStyleName asSymbol;		edgeFrom: e1 to: e2.	l1 model: aStyleName.	view addAll: (Array with: e1 with: e2 with: l1).	l1 @ (RTLabeled new color: Color black).].styles := (RTStyledMultiLine rtmethods collect: [ :m | m selector ]) select: [ :m | m endsWith: 'Line' ].styles do: [ :id | addStyle value: id ].RTGridLayout new	gapSize: 50;	lineItemsCount: 2; on: view elements.view elements pairsDo: [ :a :b | b translateBy: 100 @ 0 ].^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleStyledMultiLineStylesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAHQAAAAsCAIAAAA7JQvqAAAAA3NCSVQICAjb4U/gAAABxklEQVRoQ+2ZUYqFMAxFpzr/4hZ0/1vSHSguQJ0MHYokNR1o87B435c0Nsk7vZRcdOd5fuFnQ6CxSYusvwQA11AHgAu4hgQMU0O5hnC/We51XbdtC4td1/V9b1i/5tRJVlCu4fFy5fpSNPwOw8DKhon4OI62be+itO6ce0h03/em+ROQ7CozmjyWOFzqY55n2hy9Fqhd3Xq8LXpHGdfCHZkC605XWYEKL04B5RoePuACriEBw9RQriFcPoolXYdhL7WlTrKCcg2PlCvXl1IcmrdnfoDTrRo5kTDnSXd0DZV9LfguWfQayn9tWRb9ZOJwFYd2tWe6VbtO0Mo0Xe9rdC3ocHEt6HyyonBoWfj0zVCuzicrCrhZ+PTNgKvzyYoCbhY+fTMfxZKuQ0/3qmiSFZRrqAeuXF8q6tAMu6g89TRN0g3Sf4rDVRxa5RxKts+uBZka14JkUmwFDq0YSpkIypVMiq0AbjGUMhHgSibFVgC3GEqZiI9iSdchU7x2JckKyjXURhzu1aF570Gfy/7/QP0Gx/LhB+rTV//Agz+WcRzvPmLxOTcpdcODri11klVcubX9zYf2y5X70DbrbAvKNTw3wDWE+wOKyj7o41vluQAAAABJRU5ErkJggg=='</body></methods><methods><class-id>Roassal2.RTLineDecorationExample</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'Line decoration'</body></methods><methods><class-id>Roassal2.RTLineDecorationExample</class-id> <category>icons</category><body package="Roassal2-ExampleBrowser-Examples">exampleCoolIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAByElEQVR4XuXau43CQBSGURdCBdCZG4BgBSEZJUACvZgCCHmInBL4vQObbbDBConB5xtNAz72cEei6Xu/mmr8R+CD+PkgPoifD+KD+PkgPoifD+KD+Pkgfj6ID+Lng/ggfj6ID+Lng/ggfj6Inw/ig/j5ID6Inw/ig/j5ID6Inw/i54P4IH4+iA/i54P4IH4+iA/i54P4+SCVg5zP5/6VW+t0OuWVz88H8UGG0e12iw9SQdfrNaPRKE3T9Ov1OtWDLJfLDHm3bfvEeOzJZJLD4eB/Ie9uv99nNpv5R5b/o/6PvVj01D4e/S+kjikr/pRVx5SVMmWV1ZS1Kav+I2vgq02ZsvqfNc44h4s/Zb29Ll2+bu1nHFlZrZLdLrnfM0SMlIthuRmmXEaSzQccWdlunxCZzzPEsarcDFNuhf1jZzzOpfaL4ePLeLxFQz6y0nXJdOpPWf7F0AfxQXwQH8QH8UH+AMmL00Be/fz8f51Ulg/ig/j5ID6Inw/ig/j5ID6Inw/ig/j5IH4+iA/i54P4IH4+iA/i54P4IH4+iJ8P4oP4+SA+iJ8P4oP4+SA+iJ8P4ueD+CB+PogP4ueD+CB+PogP4ueD+P3uG69wVbQ1PZxEAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleCoolWithJumpIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAByElEQVR4XuXbsXHCMBiGYQ/CBLAZWYAiByUlG0ADu8AAlOA7eo/A58jJCgFsPa9OC/ixhf6Cpu/9xlTjPwIfxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/HzQXwQPx+kXpC2bftX71q63+959bPyQXwQH8QH8UF8EB/EB/FBfJAP1XVdfJAR9Hg8MpvN0jRNv9/vUw3IdrvNFPdyufzFGPZiscj1evW/kE93uVyyWq38I8v/UX/h3mz6Kvbt5n8h47hlxb9ljeOWlXLLKqsp61BWPUfWRNcy5ZbV/6155rm2/i3r451zznf3VdeRld0uOZ2S5zNTwkgZDMtkmDKMJIeKjqwcj78QWa8zpWtVmQxTpsJ+2JnP09YyGA5fxvC2TfHIyvmc+IOhPxj6ID6ID+KD+CA+iA/ig/ggPogP4oP4ICpI3lAtIO94Vv7/Q0aWD+KD+PkgPoifD+KD+PkgPoifD+KD+Pkgfj6ID+Lng/ggfj6ID+Lng/ggfj6Inw/ig/j5ID6Inw/ig/j5ID6Inw/i54P4IH4+iA/i94/9AObDevK8Tn8bAAAAAElFTkSuQmCC'</body></methods><methods><class-id>Roassal2.RTSliderTest</class-id> <category>initialization</category><body package="Roassal2-Builder-UI-Slider-Tests">setUp	super setUp.	slider := RTSlider new</body></methods><methods><class-id>Roassal2.RTSliderTest</class-id> <category>tests</category><body package="Roassal2-Builder-UI-Slider-Tests">testDefault	self assert: slider min equals: 0.	self assert: slider max equals: 1.	self assert: slider value equals: 0.5</body><body package="Roassal2-Builder-UI-Slider-Tests">testOutsideRange	self should: [ slider value: 10 ] raise: Error.	self should: [ slider value: -5 ] raise: Error.</body><body package="Roassal2-Builder-UI-Slider-Tests">testProgress	slider max: 100.	slider value: 20.	self assert: slider value equals: 20.	self assert: slider progress equals: 0.2</body></methods><methods><class-id>Roassal2.RTNestTest</class-id> <category>composed shape</category><body package="Roassal2-Core-Tests">testAutomaticLayout	| v lbl box cs e bigElement bigElement2 |	v := RTView new.	lbl := RTBox new color: Color pink.	box := RTBox new.	cs := RTCompositeShape new.	cs add: lbl.	cs add: box.	cs vertical.	e := cs element.	v add: e.	bigElement := ((RTBox new size: 20; color: Color red) element).	bigElement2 := ((RTBox new size: 20; color: Color red) element).	v add: bigElement.	v add: bigElement2.	RTNest new 		layout: RTFlowLayout new;		on: e nest: (Array with: bigElement with: bigElement2).	self assert: (bigElement position closeTo: (-12.0@2)).	self assert: (bigElement2 position closeTo: (13.0@2)).</body><body package="Roassal2-Core-Tests">testDragAndDrop	| v shape es outer  inner |	v := RTView new.	shape := RTCompositeShape new.	shape add: RTBox new.	shape add: RTBox new.		es := shape elementsOn: #(1).	v addAll: es.	outer := es anyOne.		RTNest new		for: es		inShape: #first		add: [ :group :model | 			inner := (RTBox new color: Color blue) elementOn: 'hello'.			group add: inner ].			self assert: outer position equals: 0 @ 2.	self assert: inner position equals: 0 @ 0.				outer translateBy: 5 @ 5.	self assert: outer position equals: 5 @ 7.0.	self assert: inner position equals: 5 @ 5.</body><body package="Roassal2-Core-Tests">testDragAndDrop2	| v shape e inner |	v := RTView new.	shape := RTBox new.		e := shape element.		inner := (RTBox new color: Color blue) element.	RTNest new on: e nest: (RTGroup with: inner).			self assert: e position equals: 0 @ 0.	self assert: inner position equals: 0 @ 0.				e translateBy: 5 @ 5.	self assert: e position equals: 5 @ 5.	self assert: inner position equals: 5 @ 5</body><body package="Roassal2-Core-Tests">testDragAndDropWithoutComposite	| v shape es outer  inner |	v := RTView new.	shape := RTBox new.		es := shape elementsOn: #(1).	v addAll: es.	outer := es anyOne.		RTNest new		for: es		add: [ :group :model | 			inner := (RTBox new color: Color blue) elementOn: 'hello'.			group add: inner ].			self assert: outer position equals: 0 @ 0.	self assert: inner position equals: 0 @ 0.				outer translateBy: 5 @ 5.	self assert: outer position equals: 5 @ 5.	self assert: inner position equals: 5 @ 5.</body><body package="Roassal2-Core-Tests">testInnerElement1	| v shape e innerBox innerElement |	v := RTView new.	shape := RTCompositeShape new.	shape add: (RTBox new size: 20; color: (Color green alpha: 0.3)).	shape add: (RTBox new size: 20; color: (Color blue alpha: 0.3)) translateBy: 0 @ 20.	e := shape elementOn: 1.	v add: e.	innerBox := RTBox new size: 10; color: (Color red alpha: 0.9).	innerElement := innerBox elementOn: 2.	v add: innerElement.	RTNest new		onTrachelShape: e trachelShape shapes second nest: (Array with: innerElement).  	self assert: innerElement position equals: 0 @ 20</body><body package="Roassal2-Core-Tests">testInnerElement2	| v shape e innerBox innerElements |	v := RTView new.		shape := RTCompositeShape new.	shape add: (RTBox new size: 20; color: (Color green alpha: 0.3)).	shape add: (RTBox new size: 20; color: (Color blue alpha: 0.3)) translateBy: 0 @ 20.	e := shape elementOn: 1.	v add: e.	innerBox := RTBox new size: 10; color: (Color red alpha: 0.9).	innerElements := innerBox elementsOn: #(2 3).	v addAll: innerElements.	RTGridLayout on: innerElements.	RTNest new		onTrachelShape: e trachelShape shapes second nest: innerElements.  	self assert: (innerElements collect: #position) asArray equals: (Array with: (-7.0@20.0) with: (8.0@20.0))</body><body package="Roassal2-Core-Tests">testInnerElement3	| v shape e innerBox innerElements |	v := RTView new.	shape := RTCompositeShape new.	shape add: (RTBox new size: 20; color: (Color green alpha: 0.3)).	shape add: (RTBox new size: 20; color: (Color blue alpha: 0.3)) translateBy: 0 @ 20.	e := shape elementOn: 1.	innerBox := RTBox new size: 10; color: (Color red alpha: 0.9).	innerElements := innerBox elementsOn: #(2 3).		RTVerticalLineLayout on: innerElements.	RTNest new		onTrachelShape: e trachelShape shapes second nest: innerElements.  	e trachelShape vertical.		v add: e.	v addAll: innerElements.		self assert: (innerElements collect: #position) asArray equals: (Array with: (0 @ 20.0) with: (0 @ 40.0))</body><body package="Roassal2-Core-Tests">testInnerElement4	| v shape es |	v := RTView new.	v @ RTDraggableView.	shape := RTCompositeShape new.	shape add: RTBox new.	shape vertical.	es := shape elementsOn: #(1 2).	v addAll: es.	RTNest new		layout: RTGridLayout new;		for: es inShape: #first add: [ :group :model |			group addAll: ((RTBox new color: Color blue) elementsOn: (1 to: model)).		].	RTHorizontalLineLayout on: es.	es @ RTDraggable.		self assert: es first position ~= es second position</body><body package="Roassal2-Core-Tests">testInnerElement5	| v shape es |	v := RTView new.	v @ RTDraggableView.	shape := RTCompositeShape new.	shape add: RTBox new.	shape vertical.	es := shape elementsOn: #(1 2).	v addAll: es.	RTNest new		layout: RTGridLayout new;		for: es inShape: #first add: [ :group :model |			group addAll: ((RTBox new color: Color blue) elementsOn: (1 to: model)).		].	es first translateTo: 25 @ -20.	self assert: es first position equals: 25 @ -20</body><body package="Roassal2-Core-Tests">testLabelInCompositeShape	| v lbl box cs e bigElement p1 p2 |	v := RTView new.	lbl := RTLabel new text: ''.	box := RTBox new.	cs := RTCompositeShape new.	cs add: lbl.	cs add: box.	cs vertical.	e := cs element.	v add: e.	RTNest new		for: (Array with: e) add: [ :group :model | 			bigElement := ((RTBox new size: 20; color: Color red) element).			group add: bigElement. ].	self assert: bigElement position ~= e position.	p1 := bigElement trachelShape position.	p2 := e trachelShape shapes second position.	self assert: ((p1 = p2) or: [ (p1 - p2) abs &lt;= (0.5@0.5) ]).</body><body package="Roassal2-Core-Tests">testLabelNotInCompositeShape	| v box  e bigElement |	v := RTView new.	box := RTBox new.	e := box element.	v add: e.	RTNest new		for: (Array with: e) add: [ :group :model | 			bigElement := ((RTBox new size: 20; color: Color red) element).			group add: bigElement ].	self assert: bigElement position equals: e position.	self assert: bigElement trachelShape position equals: e trachelShape position.</body><body package="Roassal2-Core-Tests">testLayout	| v lbl box cs e bigElement bigElement2 |	v := RTView new.	lbl := RTBox new color: Color pink.	box := RTBox new.	cs := RTCompositeShape new.	cs add: lbl.	cs add: box.	cs vertical.	e := cs element.	v add: e.	bigElement := ((RTBox new size: 20; color: Color red) element).	bigElement2 := ((RTBox new size: 20; color: Color red) element).	v add: bigElement.	v add: bigElement2.		RTFlowLayout on: (Array with: bigElement with: bigElement2).	RTNest new 		on: e nest: (Array with: bigElement with: bigElement2).	self assert: bigElement position equals: (-12.0@2).	self assert: bigElement2 position equals: (13.0@2).</body></methods><methods><class-id>Roassal2.RTNestTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| view el el2 |	view := RTView new.	el := (RTBox new color: Color red) element.	el2 := RTBox element.	el translateTo: 100 @ 50.	RTNest		new 		layout: RTGridLayout new;		on: el nest: (Array with: el2).	view add: el.	view add: el2.		self assert: el position asIntegerPoint = (100 @ 50).	self assert: el2 position asIntegerPoint = (100 @ 50).	self assert: el trachelShape width = 15.	self assert: el trachelShape height = 15.		self assert: el2 trachelShape width = 5.	self assert: el2 trachelShape height = 5.</body><body package="Roassal2-Core-Tests">testChangeExtent	| view el innerElement1 innerElement2 		elExtent elPosition extent1 extent2 position1 position2 ratio |	view := RTView new.	el := (RTBox new color: Color red) element.	innerElement1 := (RTBox new size: 10) element.	innerElement2 := (RTBox new size: 20) element.	el translateTo: 100 @ 50.	RTNest new		stretchable;		layout: RTGridLayout new;		on: el nest: (Array with: innerElement1 with: innerElement2).	view add: el; add: innerElement1; add: innerElement2.	elExtent := el extent.	elPosition := el position.	extent1 := innerElement1 extent.	extent2 := innerElement2 extent.	position1 := innerElement1 position.	position2 := innerElement2 position.	ratio := 0.5.	el extent: el extent * ratio.	self assert: el position equals: (100 @ 50).	self assert: el extent equals: elExtent * ratio.	self assert: innerElement1 extent equals: extent1 * ratio.	self assert: innerElement2 extent equals: extent2 * ratio.	self assert: innerElement1 position equals: elPosition + ((position1 - elPosition) * ratio).	self assert: innerElement2 position equals: elPosition + ((position2 - elPosition) * ratio).</body><body package="Roassal2-Core-Tests">testDifferentSizes	| view el innerElement1 innerElement2 |	view := RTView new.	el := (RTBox new color: Color red) element.	innerElement1 := (RTBox new size: 10) element.	innerElement2 := (RTBox new size: 20) element.	el translateTo: 100 @ 50.	RTNest		new 		layout: RTGridLayout new;		on: el nest: (RTGroup with: innerElement1 with: innerElement2).	view add: el.	view add: innerElement1.	view add: innerElement2.	self assert: el position = (100 @ 50).	self assert: el trachelShape width = 45.	self assert: el trachelShape height = 30.	self assert: innerElement1 position y = 45.	self assert: el position y = 50.	self assert: innerElement2 position y = 50.	self assert: 50 = el position y.</body><body package="Roassal2-Core-Tests">testForAdd	| v es positions |	v := RTView new.	es := RTBox elementsOn: (1 to: 5).	v addAll: es.	es @ RTDraggable.	RTNest new		for: es		add: [ :group :model | 			group addAll: ((RTBox new color: Color blue) elementsOn: (1 to: model)).			RTGridLayout on: group.		].	RTGridLayout on: es.		positions := ((Array new: 20) at: 1 put: ((7.5@7.5)); at: 2 put: ((32.5@7.5)); at: 3 put: ((62.5@12.5)); at: 4 put: ((12.5@42.5)); at: 5 put: ((47.5@42.5)); at: 6 put: ((8.0@8.0)); at: 7 put: ((28.0@8.0)); at: 8 put: ((38.0@8.0)); at: 9 put: ((58.0@8.0)); at: 10 put: ((68.0@8.0)); at: 11 put: ((58.0@18.0)); at: 12 put: ((8.0@38.0)); at: 13 put: ((18.0@38.0)); at: 14 put: ((8.0@48.0)); at: 15 put: ((18.0@48.0)); at: 16 put: ((38.0@38.0)); at: 17 put: ((48.0@38.0)); at: 18 put: ((58.0@38.0)); at: 19 put: ((38.0@48.0)); at: 20 put: ((48.0@48.0)); yourself).	self assert: (v elements collect: #position) asArray equals: positions</body><body package="Roassal2-Core-Tests">testInner	| view host el1 el2 edge |	view := RTView new.	host := (RTBox new color: (Color purple alpha: 0.5)) element.	el1 := RTBox element. 	el2 := RTBox element.	edge := RTLine edgeFrom: el1 to: el2.	view add: host; add: el1; add: el2; add: edge.	RTTreeLayout new on: (Array with: el1 with: el2) edges: view edges.	RTNest new on: host nest: (Array with: el1 with: el2).	self assert: el1 position equals: (0.5@ (-25/2)).		self assert: el2 position equals: (0.5@(25/2)).	self assert: host position equals: (0@0).</body><body package="Roassal2-Core-Tests">testResizableInnerNode	"If we resize an inner node, the outter node should be resized"	| outter inner |	outter := RTBox element.	inner := (RTBox new color: Color blue) element.	self deny: inner trachelShape hasCallback.	self deny: outter trachelShape hasCallback.	RTNest new 		onResizable: outter nest: (Array with: inner)."	self deny: outter trachelShape hasCallback."	self assert: inner trachelShape hasCallback.		self assert: outter encompassingRectangle extent = (15 @ 15).	self assert: inner encompassingRectangle extent = (5 @ 5).		inner extent: 10 @ 10.	self assert: inner encompassingRectangle extent = (10 @ 10).	self assert: outter encompassingRectangle extent = (20 @ 20).</body><body package="Roassal2-Core-Tests">testResizableInnerNodeAndTranslateInnerNode	"If we resize an inner node, the outter node should be resized"	| outter inner |	outter := RTBox element.	inner := (RTBox new color: Color blue) element.	self deny: inner trachelShape hasCallback.	self deny: outter trachelShape hasCallback.	RTNest new 		onResizable: outter nest: (Array with: inner).	self assert: inner trachelShape hasCallback.		self assert: outter encompassingRectangle extent = (15 @ 15).	self assert: inner encompassingRectangle extent = (5 @ 5).	inner translateBy: 5 @ 5.	self assert: inner encompassingRectangle extent = (5 @ 5).	self assert: outter encompassingRectangle extent = (15 @ 15).</body><body package="Roassal2-Core-Tests">testSimpleExample	| view el shape inner |	view := RTView new.	el := (RTBox new color: (Color purple alpha: 0.3)) element.		shape := RTBox new color: (Color purple alpha: 0.3).	inner := (shape elementOn: #inner).	view add: el.	view add: inner.	RTNest		new 		layout: RTGridLayout new;		on: el nest: (RTGroup with: inner).	self assert: el position = (0 @ 0).	self assert: inner position = ((1 / 2) @ (1 / 2)).	el translateTo: 100 @ 50.	self assert: el position = (100 @ 50).	self assert: inner position =  ((201/2)@(101/2)).	self assert: el trachelShape hasCallback.	"This may change later"	self deny: inner trachelShape hasCallback.</body><body package="Roassal2-Core-Tests">testView	| v n |	self assert: RTNest new view isNil.		v := RTView new.		n := RTNest new.	n view: v.	self assert: n view equals: v</body><body package="Roassal2-Core-Tests">testWithTwoInnerNodes	| view el shape innerElement innerElement2 |	view := RTView new.	el := (RTBox new width: 80; height: 40; color: (Color purple alpha: 0.3)) element.	el translateTo: 100 @ 50.	shape := RTBox new color: (Color red alpha: 0.3).	innerElement := shape element.	innerElement2 := shape element.		view add: innerElement.	view add: innerElement2.		RTNest		new 		layout: RTGridLayout new;		on: el nest: (Array with: innerElement with: innerElement2).			view add: el.		self assert: el position = (100 @ 50).	self assert: el trachelShape width = 25.	self assert: el trachelShape height = 15.		self assert: (innerElement2 position - innerElement position) = (10 @ 0)</body></methods><methods><class-id>Roassal2.RTNestTest</class-id> <category>multi line</category><body package="Roassal2-Core-Tests">testMultiline	| v b e |	v := RTView new.	b := (RTBox new color: (Color red alpha: 0.3)) element.	e := RTLabel elementOn: 'Hello	World	Bonjour	Blah	'.	v add: b.	v add: e.	RTNest new on: b nest: (Array with: e).	self assert: (RTNest new encompassingRectangleOf: (Array with: e)) extent equals: e encompassingRectangle extent.		"This has to be fixed."	"self assert: (b encompassingRectangle extent) equals: (e encompassingRectangle extent + (10 @ 10)) "</body><body package="Roassal2-Core-Tests">testMultiline02	| v b e |	v := RTView new.	b := (RTBox new color: (Color red alpha: 0.3)) element.	e := RTLabel elementOn: 'Hello	World	Bonjour	Blah	'.	v add: b.	v add: e.	RTNest new on: b nest: (Array with: e).	self assert: (RTNest new encompassingRectangleOf: (Array with: e)) extent equals: e encompassingRectangle extent.		"This has to be fixed"	"self assert: (b encompassingRectangle extent) equals: (e encompassingRectangle extent + (10 @ 10))"</body><body package="Roassal2-Core-Tests">testMultiline03	| v b e |	v := RTView new.	b := (RTBox new color: (Color red alpha: 0.3)) element.	e := RTLabel elementOn: 'Hello	World	Bonjour	Blah	'.	RTNest new on: b nest: (RTGroup with: e).	self assert: (RTNest new encompassingRectangleOf: (Array with: e)) extent equals: e encompassingRectangle extent.	"self assert: (b encompassingRectangle extent) equals: (e encompassingRectangle extent + (10 @ 10)) "</body><body package="Roassal2-Core-Tests">testMultiline04	| v b e |	v := RTView new.	b := (RTBox new color: (Color red alpha: 0.3)) element.	e := RTLabel elementOn: 'Hello	World	Bonjour	Blah	'.	RTNest new on: b nest: (Array with: e).	v add: b.	v add: e.		self assert: (RTNest new encompassingRectangleOf: (Array with: e)) extent equals: e encompassingRectangle extent.	"self assert: (b encompassingRectangle extent) equals: (e encompassingRectangle extent + (10 @ 10)) "</body></methods><methods><class-id>Roassal2.RTNestTest</class-id> <category>encompassing</category><body package="Roassal2-Core-Tests">testEncompassingRectangle	| e1 e2 r |	e1 := (RTBox new size: 10) element.	e2 := (RTBox new size: 30) element.		r := RTNest new encompassingRectangleOf: (Array with: e1 with: e2).	self assert: r = ((-15 @ -15) extent: (30 @ 30))</body><body package="Roassal2-Core-Tests">testEncompassingRectangle2	| e1 e2 r |	e1 := (RTBox new size: 10) element.	e2 := (RTBox new size: 30) element.	e2 translateTo: (100 @ 80).	r := RTNest new encompassingRectangleOf: (Array with: e1 with: e2).	self assert: r = ((-5 @ -5) corner: (115 @ 95))</body></methods><methods><class-id>Roassal2.RTNestTest</class-id> <category>tests - nesting</category><body package="Roassal2-Core-Tests">testNestingComposite	| v element compShape elements ellipses |	v := RTView new.	element := RTBox element.	v add: element.	compShape := RTCompositeShape new.	compShape	  add: (RTBox new	     color: Color blue;	     height: 0);	  add: ((RTEllipse new	    size: 25;	    color: Color red));	  vertical.  "	compShape := (RTEllipse new	    size: 25;	    color: Color red)."	 elements := compShape elementsOn: (1 to: 2).	RTNest new for: (Array with: element) add: [ :group :model |		group addAll: elements.		RTGridLayout on: group.].		"Testing"	ellipses := v canvas shapes select: [ :t | t class == TREllipseShape ].	self assert: ellipses size equals: 2.	self assert: (ellipses collect: [ :s | s position asIntegerPoint ]) equals: (Array with: (-15@0) with: (15@0)).</body></methods><methods><class-id>Roassal2.RTHTML5ExporterTest</class-id> <category>tests</category><body package="Roassal2-Exporter-HTML5-Tests">testBasic	| view stream |	view := RTView new.	view add: RTBox element.	stream := WriteStream on: String new.	[RTHTML5Exporter new 			export: view toStream: stream;		insert: view named: 'foo' inPillarStream: stream.	] ensure: [ 		'roassal.js' asFileReference ensureDelete.		'foo.html' asFileReference ensureDelete. ]</body></methods><methods><class-id>Roassal2.RTMapExample</class-id> <category>icons</category><body package="Roassal2-Builder-Map-Examples">exampleAfricanPopulationIcon	^ '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RU5ErkJggg=='</body><body package="Roassal2-Builder-Map-Examples">exampleCity01Icon	^ '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AAAASUVORK5CYII='</body><body package="Roassal2-Builder-Map-Examples">exampleColoredAfrica02Icon	^ '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'</body><body package="Roassal2-Builder-Map-Examples">exampleColoredAfrica03Icon	^ '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'</body><body package="Roassal2-Builder-Map-Examples">exampleColoredAfricaIcon	^ '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'</body><body package="Roassal2-Builder-Map-Examples">exampleSouthAmericaPopulationIcon	^ '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iAAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Map-Examples">exampleWorldPopulationIcon	^ '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TkSuQmCC'</body></methods><methods><class-id>Roassal2.RTMapExample</class-id> <category>sources</category><body package="Roassal2-Builder-Map-Examples">exampleAfricanPopulation	| b countries cn sum|	b := RTMapBuilder new.				countries := RTMapBuilder countriesPopulation select: [ :c | RTSVGPath africa includes: (c at: 1) ].	sum := (countries collect: [ :c | c at: 2 ])inject: 0 into: [ :acc :n | acc + n ].		cn := RTNColorLinearNormalizer		inContext: (countries collect: [:c | c at: 2])		lowColor: (Color r:0.8 g:0.8 b:1)		highColor: (Color r:0 g:0 b:0.3).		b countries: countries named: [ :c | c at: 1 ].	b color: [ :c | cn rtValue: (c at: 2) ].	b withPopup: [ :c |		(c at: 1) asString, ': ',		(((c at: 2) / sum * 100 asFloat roundTo: 0.01) printString), '%'].	b scale: 2.	b build.	^ b view</body><body package="Roassal2-Builder-Map-Examples">exampleCity01	| b |	b := RTMapBuilder new.		b countries: RTMapBuilder southAmerica.	b cities: #( " (name, population) pairs "		#('Santiago' 6027000)		#('Bogota' 6763000)		#('Buenos Aires' 12801365)		#('Brasilia' 2481000)		#('Montevideo' 1338000)		#('Lima' 8473000)		#('La Paz' 789585)		#('Quito' 1608000)		#('Sao Paulo' 19889559)		#('Caracas' 2104000))		named: [ :c | c at: 1 ].		" Cities' pop-ups show their population "	b cities		withPopup: [ :c | (c at: 1), ': ', (((c at: 2) / 1000000 roundTo: 0.01) asString), 'M'].		" Cities' size and color depend on the population "	b cities shape		size: [ :c | (c at: 2)/300000 + 10 ];		if: [ :c | (c at: 2) &lt; 1000000 ] fillColor: (Color green alpha: 0.5);		if: [ :c | (c at: 2) &gt;= 1000000 and: (c at: 2) &lt; 5000000 ] fillColor: (Color yellow alpha: 0.5);		if: [ :c | (c at: 2) &gt;= 5000000 ] fillColor: (Color red alpha: 0.5).		" We define some routes and color them, then we set the pop-ups to show each route's length "	b routes		from: 'Santiago' toAll: #('Buenos Aires' 'Lima' 'Sao Paulo');		from: 'Bogota' toAll: #('Sao Paulo' 'Brasilia' 'Quito');		ifRoute: [ :r | r fromCityName = 'Bogota' ] lineColor: (Color brown);		ifRoute: [ :r | r fromCityName = 'Santiago' ] lineColor: (Color blue);		withPopup: #lengthString.		" We set the countries' colors, scale, and pop-up "	b color: Color veryVeryLightGray.	b scale: 3.	b withPopup.	b build.	^ b view</body><body package="Roassal2-Builder-Map-Examples">exampleColoredAfrica	| b countries countriesName max cn |		b := RTMapBuilder new.				countries := RTMapBuilder africanPopulation.	countriesName := countries collect: #first.	max := (countries collect: [ :c | c at: 2 ]) max.		cn := RTMultiLinearColor new		colors: (RTColorPalette sequential colors: 8 scheme: 'Reds');		command: [ :aCountry | (countries detect: [ :c | c first = aCountry ]) second / max ].		b countries: countriesName.	b color: cn.	b scale: 2.	b build.	^ b view</body><body package="Roassal2-Builder-Map-Examples">exampleColoredAfrica02	|b countries countriesName max cn|				b := RTMapBuilder new.				countries := RTMapBuilder africanPopulation.	countriesName := countries collect: #first.	max := (countries collect: [ :c | c at: 2 ]) max.		cn := RTMultiLinearColor new		colors: (RTColorPalette sequential colors: 8 scheme: 'Purples');		command: [ :aCountry | (countries detect: [ :c | c first = aCountry ]) second / max ].		b countries: countriesName.	b color: cn.	b scale: 2.	b build.	^ b view</body><body package="Roassal2-Builder-Map-Examples">exampleColoredAfrica03	|b countries countriesName max cn|				b := RTMapBuilder new.				countries := RTMapBuilder africanPopulation.	countriesName := countries collect: #first.	max := (countries collect: [ :c | c at: 2 ]) max.		cn := RTMultiLinearColor new		colors: (RTColorPalette sequential colors: 8 scheme: 'GnBu');		command: [ :aCountry | (countries detect: [ :c | c first = aCountry ]) second / max ].		b countries: countriesName.	b color: cn.	b scale: 2.	b build.	^ b view</body><body package="Roassal2-Builder-Map-Examples">exampleSouthAmericaPopulation	| b countries cn sum|	b := RTMapBuilder new.				countries := RTMapBuilder countriesPopulation select: [ :c | RTSVGPath southAmerica includes: (c at: 1) ].	sum := (countries collect: [ :c | c at: 2 ])inject: 0 into: [ :acc :n | acc + n ].		cn := RTNColorLinearNormalizer		inContext: (countries collect: [:c | c at: 2])		lowColor: (Color r:0.8 g:0.8 b:1)		highColor: (Color r:0 g:0 b:0.3).		b countries: countries named: [ :c | c at: 1 ].	b color: [ :c | cn rtValue: (c at: 2) ].	b withPopup: [ :c |		(c at: 1) asString, ': ',		(((c at: 2) / sum * 100 asFloat roundTo: 0.01) printString), '%'].	b scale: 2.	b build.	^ b view</body><body package="Roassal2-Builder-Map-Examples">exampleWorldPopulation	| b countries cn |	b := RTMapBuilder new.				countries := RTMapBuilder countriesPopulation select: [ :c | RTSVGPath countries includes: (c at: 1) ].		cn := RTNColorLinearNormalizer		inContext: (countries collect: [:c | c at: 2])		lowColor: (Color r:0.8 g:0.8 b:1)		highColor: (Color r:0 g:0 b:0.3).		b countries: countries named: [ :c | c at: 1 ].	b color: [ :dic | cn rtValue: (dic at: 2) ].	b withPopup: [ :c | (c at: 1) asString, ': ',(((c at: 2) / 1000000 asFloat roundTo: 0.001) asString, ' Million') ].	b build.	^ b view</body></methods><methods><class-id>Roassal2.RTMapExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Map-Examples">label	^ 'Geographical maps'</body></methods><methods><class-id>Roassal2.RTResizableTest</class-id> <category>tests</category><body package="Roassal2-Interactions-Resize-Tests">testBasic	| v g |	v := RTView new.	g := RTGroup new		add: (RTBox new			size: 100;			borderColor: Color black;			borderWidth: 1;			element);		add: (RTRoundedBox new			size: 50;			borderRadius: 20;			borderColor: Color black;			borderWidth: 1;			element);		add: (RTEllipse new			width: 100;			height: 30;			borderColor: Color black;			element);		yourself.	v addAll: g.	RTGridLayout on: g.	g @ RTDraggable.	g @ RTResizable.	v @ RTZoomableView.</body><body package="Roassal2-Interactions-Resize-Tests">testSimpleExample	| v s e |	v := RTView new.	s := RTBox new color: Color blue; size: 20.	e := s element.	e @ RTResizable.	v add: e.	e announce: TRMouseClick new.	e announce: (TRMouseDragging new step: 5 @ 5).	e translateBy: 5 @ 5.		"A bit strange this 'top'"	RTResizable new lazyInitializeElement: e; basicCallbackFor: RTElement new corner: #top</body></methods><methods><class-id>Roassal2.TRCameraTest</class-id> <category>tests</category><body package="Roassal2-Trachel-Tests">testInitialization	self assert: camera position = (0 @ 0)</body><body package="Roassal2-Trachel-Tests">testTranslation	camera translateTo: 5 @ 3.	self assert: camera position = (5 @ 3).		camera translateBy: 2 @ 4.	self assert: camera position = (7 @ 7).</body></methods><methods><class-id>Roassal2.TRCameraTest</class-id> <category>visibility</category><body package="Roassal2-Trachel-Tests">testIsVisible	| c s |	c := TRCanvas new.	s := TREllipseShape new size: 50.	c addShape: s.		self assert: c extent equals: 500 @ 500.	self assert: s position equals: 0 @ 0.	self assert: s isVisible.		"Outside the canvas"	s translateTo: 600 @ 600.	self deny: s isVisible.		"Inside the canvas"	s translateBy: -400 @ -400.	self assert: s isVisible.		"Inside the canvas"	s translateTo: -200 @ -200.	self assert: s isVisible.		"Outside the canvas"	s translateTo: -400 @ -400.	self deny: s isVisible.</body><body package="Roassal2-Trachel-Tests">testIsVisibleWithCameraMoving	| c s |	c := TRCanvas new.	s := TREllipseShape new size: 50.	c addShape: s.		c camera translateBy: 200 @ 200.	self assert: s position equals: 0 @ 0.	self assert: s isVisible.		"Outside the canvas"	s translateBy: -100 @ -100.	self deny: s isVisible.</body></methods><methods><class-id>Roassal2.TRCameraTest</class-id> <category>running</category><body package="Roassal2-Trachel-Tests">setUp	super setUp. 	canvas := TRCanvas new.	camera := canvas camera</body></methods><methods><class-id>Roassal2.TRCameraTest</class-id> <category>callbacks</category><body package="Roassal2-Trachel-Tests">testScale	| callback t |	callback := TRCameraScaleCallback new.	t := 0.	callback block: [ :newScale | t := t + 1 ].	camera addCallback: callback.	self assert: t equals: 0.		camera scale: 0.5.	self assert: t equals: 1.	camera scale: 10.	self assert: t equals: 2.		camera scale: 11.	self assert: t equals: 3.</body><body package="Roassal2-Trachel-Tests">testTranslateBy	| callback t |	callback := TRTranslationCallback new.	t := 0.	callback block: [ :o :step | t := t + 1 ].	camera addCallback: callback.	self assert: t equals: 0.		camera translateBy: 5 @ 4.	self assert: t equals: 1.	camera translateBy: 5 @ 4.	self assert: t equals: 2.		camera translateTo: 15 @ 4.	self assert: t equals: 3.</body></methods><methods><class-id>Roassal2.TRCameraTest</class-id> <category>focusing</category><body package="Roassal2-Trachel-Tests">testFocusingCenter	canvas addShape: (TREllipseShape new from: 50 @ 50 to: 100 @ 80).	canvas camera focusOnCenter.	self assert: canvas camera position = (75 @ 65)</body></methods><methods><class-id>Roassal2.TRCameraTest</class-id> <category>conversion</category><body package="Roassal2-Trachel-Tests">testConversion	self assert: ((camera fromSpaceToPixel: 0 @ 0) closeTo: (canvas extent / 2)).	self assert: ((camera fromSpaceToPixel: 10 @ 10) closeTo: ((canvas extent / 2) + (10 @ 10))).	self assert: (camera fromPixelToSpace: (canvas extent / 2)) = (0 @ 0).	self assert: ((camera fromPixelToSpace: ((canvas extent / 2) + (10 @ 10))) closeTo: (10 @ 10)).		camera		translateTo: 5 @ -15; 		scale: 2.		self assert: (camera fromSpaceToPixel: 0 @ 0) = (canvas extent / 2 - (10 @ -30)).	self assert: (camera fromSpaceToPixel: 10 @ 10) = ((canvas extent / 2) + (10 @ 50)).	self assert: (camera fromPixelToSpace: (canvas extent / 2 - (10 @ -30))) = (0 @ 0).	self assert: (camera fromPixelToSpace: ((canvas extent / 2) + (10 @ 50))) = (10 @ 10).		camera		translateTo: 21578 @ -1239;		scale: 736.			self assert:		((camera fromPixelToSpace: (camera fromSpaceToPixel: 100 @ 100))		closeTo: 100 @ 100).				self assert:		((camera fromSpaceToPixel: (camera fromPixelToSpace: 100 @ 100))		closeTo: 100 @ 100)</body></methods><methods><class-id>Roassal2.RTRoassalExample</class-id> <category>sources</category><body package="Roassal2-ExampleBrowser-Examples">exampleAddingAndRemovingEdges| v es anim edges |v := RTView new.v @ RTDraggableView.es := RTEllipse new elementsOn: RTObject withAllSubclasses.v addAll: es.RTMetricNormalizer new	elements: es;	normalizeSize: #numberOfLinesOfCode min: 5 max: 30 using: [:vv | vv sqrt * 5 ];	normalizeColor: #numberOfMethods using: (Array with: Color green with: Color red );	alphaColor: 0.3.	 anim := RTForceLayoutStepping new view: v.v addAnimation: anim. v addMenu: 'add edges' callback: [ 	edges := RTEdgeBuilder new		view: v;		objects: RTObject withAllSubclasses;		connectFrom: #superclass.	anim addEdges: edges ].v addMenu: 'remove edges' callback: [ 	v edges do: #remove.	anim removeAllEdges.	v signalUpdate ].	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleAddingNodeDynamically| v stepping |v := RTView new.v @ RTDraggableView.stepping := RTForceLayoutStepping new view: v.stepping after: [ v canvas camera focusOnCenter ].v addAnimation: stepping.v canvas addMenu: 'Add circle' callback: [ 	| el |	el := (RTEllipse new size: 20; color: (Color blue alpha: 0.4)) element.	el @ RTDraggable.	el translateTo: 5 atRandom @ 5 atRandom.	v add: el.	stepping addNode: el.	v signalUpdate.].v canvas addMenu: 'Add connected circle' callback: [ 	| el edge |	el := (RTEllipse new size: 20; color: (Color blue alpha: 0.4)) element.	el @ RTDraggable.	el translateTo: 5 atRandom @ 5 atRandom.	v add: el.	edge := RTLine edgeFrom: el to: v elements atRandom.	v add: edge.	stepping addNode: el; addEdge: edge.	v signalUpdate.].	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleAligningGroups| rootClasses groups v elements edges |rootClasses := Array with: RTShape with: RTLayout with: RTBuilder.groups := rootClasses collect: [ :cls |  | g |	g := RTGroup new.	elements := (RTEllipse new size: 8; color: Color blue) elementsOn: cls withAllSubclasses.	g addAll: elements.	edges := RTEdgeBuilder new		view: g;		objects: cls withAllSubclasses;		connectFrom: #superclass.	RTTreeLayout on: elements edges: edges.	g	].v := RTView new.groups do: [ :aGroup | v addAll: aGroup ].RTHorizontalLineLayout new gapSize: 30; on: groups.RTAlignment new elements: groups; bottom.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleAlignmentFromTop| rootClasses groups v elements edges |rootClasses := Array with: RTShape with: RTLayout with: RTBuilder.groups := rootClasses collect: [ :cls |  | g |	g := RTGroup new.	elements := (RTEllipse new size: 8; color: Color blue) elementsOn: cls withAllSubclasses.	g addAll: elements.	edges := RTEdgeBuilder new		view: g;		objects: cls withAllSubclasses;		connectFrom: #superclass.	RTTreeLayout on: elements edges: edges.	g	].v := RTView new.groups do: [ :aGroup | v addAll: aGroup ].RTHorizontalLineLayout new gapSize: 30; on: groups.RTAlignment new elements: groups; top.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleAnimatedCircle	| nbOfCircles  v shape mousePos |	nbOfCircles := 25.		mousePos := 50 @ 50.	v := RTView new.	shape := RTEllipse new sizeElement: [ :el | ((el position - mousePos) r abs / 3) min: 50 ]; color: (Color blue alpha: 0.4).	v addAll: (shape elementsOn: (1 to: nbOfCircles)).	RTGridLayout on: v elements.		v when: TRMouseMove do: [ :evt |  Transcript show: evt position printString; cr . mousePos := evt position. v elements do: #updateShape. v canvas signalUpdate ].		^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleAnimatedDots| v elements s |v := RTView new.v @ RTDraggableView.elements := (RTEllipse new size: 20; color: (Color blue alpha: 0.3)) elementsOn: (1 to: 100).v addAll: elements.elements @ RTDraggable.s := RTForceLayoutStepping new view: v.v addAnimation: s.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleAnimationStartStopButton| v elements stepping |v := RTView new.v @ RTDraggableView.elements := (RTEllipse new size: 20; color: (Color blue alpha: 0.3)) elementsOn: (1 to: 100).v addAll: elements.elements @ RTDraggable.stepping := RTForceLayoutStepping new view: v.stepping addStartStopButton."Uncomment the next line to have the animation from the beginning""v addAnimation: stepping."	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleAnotherTreeLayout	| view elements |	view := RTView new.	elements := RTBox elementsOn: (1 to: 100).	elements @ RTDraggable.	view addAll: elements.	RTEdgeBuilder new		view: view;		objects: (1 to: 100);		shape: (RTLine new color: Color purple);		connectFrom: [ :v | v // 2 ] to: #yourself.	RTTreeLayout on: view elements edges: view edges.	view edges do: [ :e | e trachelShape pushBack ].	view @ RTDraggableView.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleArc| view shape label elems |view := RTView new.view @ RTDraggableView.shape := RTArc new    innerRadius: [ :i | i *50];    externalRadius: [ :i | (i * 50) + 4];    alphaAngle: 45;    betaAngle: 135;    color: Color black.elems := shape elementsOn: (1 to: 10).view addAll: elems.elems @ RTHighlightable.label := RTLabeled new text: #yourself.label bottomLeft.elems @ label.^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleArrow	| v es c arrow |	v := RTView new.	c := RTMultiLinearColor new.	es := (RTEllipse new		size: 30;		color: [ :e | c level: e / 10 ]) elementsOn: (1 to: 10).	v addAll: es.	es @ RTDraggable.	arrow := RTArrowedLine new		color: Color red;		attachPoint: RTVerticalAttachPoint instance.	RTEdgeBuilder new		view: v;		objects: (1 to: 10);		shape: arrow;		connectFrom: [ :n | n // 2 ] to: #yourself.	RTTreeLayout new on: es.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleArrowedAndLabelledLine| v e1 e2 l |v := RTView new.e1 := (RTEllipse new size: 20) elementOn: 'hello'.e2 := (RTEllipse new size: 20) elementOn: 'world'.e1 @ RTDraggable.e2 @ RTDraggable.l := RTEdge from: e1 to: e2.l + (RTLine new color: Color red).l + (RTSimpleArrowHead new color: Color red).e2 translateBy: 60 @ 80.v addAll: (Array with: e1 with: e2 with: l ).e1 @ RTLabeled.e2 @ RTLabeled."Note that the RTLabelled interaction has to be set after having added the element in the view"l @ (RTLabeled new text: 'lining up!').	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleArrowedBezier	| v shape  edge els |	v := RTView new.	shape := RTEllipse new size: 10; color: (Color purple alpha: 0.3).	els := (shape elementsOn: (1 to: 6)) @ RTDraggable.	v addAll: els .	RTHorizontalLineLayout on: v elements.	edge := (RTEdge from: els first to: els last) + ((RTBezierLine new controllingElements: v elements)  + (RTEmptyArrowHead new) ).	v add: edge.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleArrowedEdges	| view els |	view := RTView new.	els := (RTBox new		size: 10;		color: Color blue;		borderColor: Color veryLightGray)		elementsOn: Collection withAllSubclasses.	els @ RTDraggable.	view addAll: els.	RTEdgeBuilder new		view: view;		objects: Collection withAllSubclasses;		shape:			(RTLine new				attachPoint: RTShorterDistanceAttachPoint new;				color: Color veryDarkGray)				+					(RTSimpleArrowHead new						attachPoint: RTShorterDistanceAttachPoint new;						color: Color veryDarkGray);		connectFrom: #yourself toAll: #subclasses.	RTTreeLayout on: els.	view @ RTDraggableView.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleArrowedLineWithOffset| v e1 e2 e3 e4 line |v := RTView new.e1 := (RTEllipse new color: (Color blue alpha: 0.4); size: 20) element.e2 := (RTEllipse new color: (Color red alpha: 0.4); size: 20) element.e3 := (RTEllipse new color: (Color yellow alpha: 0.4); size: 20) element.e4 := (RTEllipse new color: (Color green alpha: 0.4); size: 20) element.e1 @ RTDraggable.e2 @ RTDraggable.e3 @ RTDraggable.e4 @ RTDraggable.v add: e1; add: e2; add: e3; add: e4.line := RTArrowedLine new color: Color red.line withOffsetIfMultiple.v add: (line  edgeFrom: e1 to: e2).v add: (line  edgeFrom: e2 to: e1).v add: (line  edgeFrom: e1 to: e2).v add: (line  edgeFrom: e2 to: e2).v add: (line  edgeFrom: e3 to: e4).RTCircleLayout on: (Array with: e1 with: e2 with: e3 with: e4 ).	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleAttachPoint|v ellipse box roundedBox e1 e2 e3 l1 l2 l3 ap|v := RTView new.ellipse := RTEllipse new    width: 100;    height: 50;    borderColor: Color black.box := RTBox new    width: 50;    height: 100;    borderColor: Color black.roundedBox := RTRoundedBox new	borderRadius: 25;	borderColor: Color black;	width: 80;	height: 50.e1 := ellipse element.e2 := box element.e2 translateBy: 200 @ 0.e3 := roundedBox element.e3 translateBy: 40 @ 100.v add: e1; add: e2; add: e3.ap := RTBorderAttachPoint new offset: 10.l1 := RTDoubleArrowedLine new	headStart: RTFilledNarrowArrow asHead;	headEnd: RTSimpleArrow asTail;	attachPoint: ap;	color: Color black;	edgeFrom: e1 to: e2.l2 := RTDoubleArrowedLine new    headStart: RTFilledNarrowArrow asHead;    headEnd: RTSimpleArrow asTail;    attachPoint: ap;    color: Color magenta;    edgeFrom: e2 to: e1.    l3 := RTStyledMultiLine new    head: RTEmptyDiamond asTail;    tail: RTNoDecorationShape asHead;    attachPoint: ap;    color: Color magenta muchLighter;    edgeFrom: e2 to: e3.    v add: l1; add: l2; add: l3.    v elements @ RTDraggable.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleBezier| v shape  edge els |v := RTView new.shape := RTEllipse new size: 10; color: (Color purple alpha: 0.3).els := (shape elementsOn: (1 to: 6)) @ RTDraggable.v addAll: els .RTHorizontalLineLayout on: v elements.v elements first translateBy: -50 @ 50.v elements third translateBy: -10 @ 20.v elements fifth translateBy: 0 @ -60.v elements last translateBy: 150 @ 100.edge := (RTBezierLine new controllingElements: v elements) edgeFrom: els first to: els last.edge when: TRMouseEnter do: [ :ev | edge trachelShape color: Color random. ev signalUpdate ].v add: edge.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleBezier3| v e1 e2 e3 lineShape s edge|v := RTView new.s := RTEllipse new color: (Color red alpha: 0.4); size: 30.e1 := s elementOn: 'Begin'.e2 := s elementOn: 'End'.e3 := s elementOn: 'Middle'.lineShape := RTBezier3Line new.lineShape controlElement: e3.lineShape attachPoint: (RTShorterDistanceAttachPoint instance).edge := lineShape edgeFrom: e1 to: e2.v add: e1; add: e2; add: e3; add: edge.e1 @ RTDraggable.e2 @ RTDraggable.e3 @ RTDraggable.e2 translateBy: 80 @ 50.e3 translateBy: 40 @ 25.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleBezierAndCenterOfObjects| v es startingElement shape |v := RTView new.es := (RTEllipse new color: (Color blue alpha: 0.4); size: 15) elementsOn: (1 to: 20).v addAll: es.es @ RTDraggable."we are properly locating the nodes"startingElement :=  (RTEllipse new color: (Color red alpha: 0.4); size: 20) element.v add:  startingElement.startingElement @ RTDraggable.RTCircleLayout new initialRadius: 80; on: es.es translateTo: 0 @ 0.startingElement translateBy: -150 @ 0."Building the bezier lines"shape := RTBezierLine new				centerOfObjects: (1 to: 20) inView: v.v addAll: (shape edgesFrom: startingElement toAll: es).			^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleBezierCurve"Moving each extremity will reposition the control points"		| v e1 e2 l s p1 p2 | v := RTView new.e1 := (RTEllipse new size: 15; color: (Color blue alpha: 0.4)) element.e2 := (RTEllipse new size: 15; color: (Color blue alpha: 0.4)) element.e1 @ RTDraggable.e2 @ RTDraggable.e2 translateBy: -150 @ 150.p1 := RTBox element.p2 := RTBox element.p1 translateTo: (e2 position x + e1 position x / 2) @ e1 position y.p2 translateTo: (e2 position x + e1 position x / 2) @ e2 position y."It is not necessary to add the control points to the view""v add: p1.v add: p2."s := RTBezierLine new.s controllingElements: (Array with: p1 with: p2 ).l := s edgeFrom: e1 to: e2.e1 trachelShape addCallback: 	(TRTranslationCallback block: [ :shape :step | 		p1 translateTo: (e2 position x + e1 position x / 2) @ e1 position y.		p2 translateTo: (e2 position x + e1 position x / 2) @ e2 position y ]).e2 trachelShape addCallback: 	(TRTranslationCallback block: [ :shape :step | 		p1 translateTo: (e2 position x + e1 position x / 2) @ e1 position y.		p2 translateTo: (e2 position x + e1 position x / 2) @ e2 position y ]).v add: e1.v add: e2.v add: l.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleBezierLinesUsingObject| v  es assocs centralPoint eb |v := RTView new.es := (RTEllipse new size: 15) elementsOn: (1 to: 15).v addAll: es.RTCircleLayout on: es.centralPoint := (RTEllipse new size: 10; color: Color red) elementOn: -1.centralPoint translateTo: es encompassingRectangle center.v add: centralPoint.centralPoint @ RTDraggable.es @ RTLabeled.eb := RTEdgeBuilder new.eb view: v.eb shape bezierLineUsingObjects: #( -1 ) inView: v.assocs := OrderedCollection new.assocs add: 1-&gt;10.assocs add: 2 -&gt; 10.assocs add: 3 -&gt; 10.assocs add: 5-&gt; 10.eb useAssociations: assocs.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleBitmap	| v s |	v := RTView new.	s := RTBitmap new.	s form: RTIcon roassal.	v add: s element.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleBlinking| classes v shape es labels |"Set here the classes you wish to visualize"classes := Collection withAllSubclasses.v := RTView new.v @ RTDraggableView.shape := RTBox new width: [ :cls | cls numberOfVariables * 5  max: 5 ]; height: [ :cls | cls numberOfMethods sqrt * 2 ].es := shape elementsOn: classes.v addAll: es.RTFlowLayout on: es.RTMetricNormalizer new	elements: es;	normalizeColor: #numberOfLinesOfCode."Set here the classes you wish to visualize"labels := (RTLabel new height: 8) elementsOn: classes.RTFlowLayout new gapSize: 0; on: labels.v addAll: labels.RTConstraint move: labels onTheRightOf: es.labels translateBy: 20 @ 0.labels @ RTHighlightable.labels when: TRMouseClick do: [ :event | RTBlink new color: Color blue; on: (es elementFromModel: event element model) ].es @ RTHighlightable.es when: TRMouseClick do: [ :event | RTBlink new color: Color blue; on: (labels elementFromModel: event element model) ].^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleBorderWidth| v shape |v := RTView new.shape := RTBox new size: 50; borderColor: Color black; borderWidth: #yourself.v addAll: (shape elementsOn: (1 to: 10)).RTHorizontalLineLayout on: v elements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleCellLayout	| view substrings |	view := RTView new.	substrings := (RTCellLayout &gt;&gt; #doExecute:) sourceCode substrings.	view addAll: (RTLabel elementsOn: substrings).	RTCellLayout on: view elements.	view @ RTDraggableView.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleCellLayoutWithCircle	| view els |	view := RTView new.	els := RTEllipse new size: #yourself; elementsOn: ((1 to: 20) collect: [ :v | 50 atRandom ]).	view addAll: els.		RTCellLayout new lineItemsCount: 5; on: view elements.	view @ RTDraggableView.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleChangingCargeInForceLayout| v es setSizeAndColor s layout |v := RTView new.v @ RTDraggableView.es := RTEllipse elementsOn: (1 to: 30).es @ RTDraggable.v addAll: es.RTEdgeBuilder new	view: v;	moveBehind;	connectFrom: [ :vv | vv // 2 ].	setSizeAndColor value.s := RTForceLayoutStepping new view: v.layout := RTForceBasedLayout new.s layout: layout.v addAnimation: s.setSizeAndColor := [ 		RTMetricNormalizer new			elements: es;			normalizeSize: #yourself;			normalizeColor: #yourself;			alphaColor: 0.5.		es do: [ :e | layout set: e charge: e model negated * 5 ].	 ].v addMenu: 'Change Weight' callback: [ 	es do: [ :e | e model: 30 atRandom ]. 	setSizeAndColor value.	v signalUpdate.	].^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleCircleCould| v |"The GlobalBuilder allow you to normalize the size or the colors across a number of elements. Consider the example:"v := RTView new.v addAll: ((RTEllipse new color: (Color red alpha: 0.3)) elementsOn: Collection withAllSubclasses) @ RTPopup.RTMetricNormalizer new	elements: v elements;	normalizeSize: #numberOfLinesOfCode min: 10 max: 60;	normalizeColor: #numberOfMethods using: (Array with: Color gray with: Color red ).RTRectanglePackLayout on: v elements."elements provided to #elementsToConsider: are resized and have a colors chosen between these elements."	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleCircleLayoutAndEdges	| v els |	v := RTView new.	els := RTBox new		size: 10;		elementsOn: (1 to: 100).	v addAll: els.	els @ RTDraggable.	RTEdgeBuilder new		view: v;		objects: (1 to: 100);		shape:			(RTLine new				color: (Color blue alpha: 0.4);				withVerticallAttachPoint;				yourself);		connectFrom: [ :value | value // 2 ] to: #yourself.	RTCircleLayout new		initialRadius: 260;		on: v elements.	v @ RTDraggableView.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleClusterLayout	| v |	v := RTView new.	v		addAll:			((RTEllipse new				color: Color purple;				size: 10) elementsOn: Collection withAllSubclasses) @ RTDraggable.	RTEdgeBuilder new		view: v;		objects: Collection withAllSubclasses;		connectFrom: #superclass to: #yourself.	RTClusterLayout on: v elements edges: v edges.	v edges do: [ :e | e trachelShape pushBack ].	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleCodeAuthorship"Code authorship Red dot = author, purple dot = class, edge = commit."| classes classesToAuthors authors  authorsToClasses eb v classesElements authorsElements l |classes := RTShape withAllSubclasses.classesToAuthors := (classes collect: [ :cls | cls -&gt; ((cls methods collect: #author) asSet sortedAs: #yourself ) ]) asDictionary.authors := (classesToAuthors values flatCollect: #yourself )asSet sortedAs: #yourself.authorsToClasses := (authors collect: [ :anAuthor | anAuthor -&gt; (classesToAuthors associations select: [ :as | as value includes: anAuthor ] thenCollect: #key) ] ) asDictionary.v := RTView new.classesElements := RTEllipse new color: Color purple trans; size: 5; elementsOn: classes.v addAll: classesElements.classesElements @ RTPopup.authorsElements := RTEllipse new color: Color red; elementsOn: authors.v addAll: authorsElements.authorsElements @ RTPopup.eb := RTEdgeBuilder new.eb moveBehind.eb shape line color: (Color veryLightGray alpha: 0.2).eb view: v.eb fromElements:  authorsElements.eb toElements: classesElements.eb connectToAll: [ :a | authorsToClasses at: a ].RTMetricNormalizer new	view: v; 	objects: authors;	normalizeSize: [ :a | (authorsToClasses at: a) size ].RTCircleLayout on: authorsElements.RTForceBasedLayout on: classesElements.authorsElements translateTo: classesElements center.l := RTForceBasedLayout new.authorsElements do: [:ae | l fix: ae at: ae position ]. l on: authorsElements, classesElements.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleComposedLayout| view es1 es2 es3 |view := RTView new.es1 := (RTEllipse new color: Color lightRed; size: 20) elementsOn: (1 to: 20).RTForceBasedLayout on: es1.view addAll: es1.es2 := (RTEllipse new color: Color lightGreen; size: 20) elementsOn: (1 to: 20).RTForceBasedLayout on: es2.view addAll: es2.es3 := (RTEllipse new color: Color lightBlue; size: 20) elementsOn: (1 to: 20).RTForceBasedLayout on: es3.view addAll: es3.RTForceBasedLayout new 	charge: -800;	on: (Array with: es1 with: es2 with: es3).^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleCreatingBitmap	| v  s trachelShape |	v := RTView new.	s := RTBitmap element.	v add: s.	trachelShape := s trachelShape.	trachelShape extent: 180 @ 100.	trachelShape fillColor: Color blue.	1 to: 80 do: [ :i |		trachelShape at: i @ i put: Color green ].	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleCrosses| v nbOfCrosses n s es |v := RTView new.nbOfCrosses := 300. n := RTMultiLinearColorForIdentity new objects: (1 to: nbOfCrosses).s := RTShapeBuilder new cross; current.s color: n.es := s elementsOn: (1 to: nbOfCrosses)."The code above is equivalent tos := RTMultiCompositeShape new.s add: (RTBox new height: 10; width: 3). s add: (RTBox new height: 3; width: 10).s color: n.es := s elementsOn: (1 to: nbOfCrosses)."v addAll: es.RTGridLayout on: es.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleDependenciesWithCurve	| v classesRoassal classesTrachel shape1 shape2 helpBar1 helpBar2 |	v := RTView new.	v @ RTDraggableView.	shape1 := RTEllipse new		size: #numberOfMethods;		color: (Color gray alpha: 0.3).	shape2 := RTEllipse new		size: #numberOfMethods;		color: (Color pink alpha: 0.3).	classesRoassal := shape1 elementsOn: RTObject withAllSubclasses.	classesTrachel := shape2 elementsOn: TRObject withAllSubclasses.	classesRoassal @ RTPopup.	classesTrachel @ RTPopup.	v addAll: classesRoassal.	v addAll: classesTrachel.	RTEdgeBuilder new		view: v;		objects: RTObject withAllSubclasses;		shape: (RTDirectedLine new color: (Color blue alpha: 0.5));		connectFrom: #yourself			toAll:				[ :c | c dependentClasses copyWithoutAll: RTObject withAllSubclasses ].	RTHorizontalLineLayout new		gapSize: 1;		on: classesRoassal , classesTrachel.	helpBar1 := TRLabelShape new		text: 'Dependencies between Roassal and Trachel'.	helpBar2 := TRLabelShape new		text: 'down links = Roassal depends on Trachel'.	v canvas addFixedShape: helpBar1.	v canvas addFixedShape: helpBar2.	TRConstraint stick: helpBar1 above: helpBar2.	TRConstraint stickAtTheBottomOfTheWindow: helpBar2.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleDistinctColors| b |b := RTMondrian new.b shape circle.b nodes: Collection withAllSubclasses.b edges connectFrom: #superclass.b layout tree.b normalizer	normalizeSize: #numberOfMethods;	distinctColorUsing: #package.b build.^ b view</body><body package="Roassal2-ExampleBrowser-Examples">exampleDotIndex| v values resolutionVertical groups maxValue g c el |values := #(15 8 2 5 11).resolutionVertical := 10.v := RTView new.maxValue := values max.groups := RTGroup new.values do: [ :aValue |	g := RTGroup new.	resolutionVertical to: 1 by: -1 do: [ :y | 		c := (aValue / maxValue &gt;= (y / resolutionVertical)) ifTrue: [ Color orange ] ifFalse: [ Color gray ].		el := (RTEllipse new size: 20; color: c) element.		g add: el.		v add: el	].	RTVerticalLineLayout on: g.	g last  @ (RTLabeled new 					below; 					text: aValue;					color: Color orange).	groups add: g. ].RTHorizontalLineLayout on: groups.groups do: [ :aGroup | v addAll: aGroup ].v canvas color: Color black.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleDoubleArrow| v edges es |v := RTView new.edges := OrderedCollection new.es := RTBox elementsOn: (1 to: 300).RTGridLayout new gapSize: 30; on: es.es do: [ :e |	| te |	te := RTBox element.	te translateTo: e position + (0 @ 10).	edges add: ((RTDoubleArrowedLine new color: Color black) edgeFrom: e to: te).].v addAll: edges.v when: TRMouseMove do: [ :evt |  	edges do: [ :edge |		edge to translateTo: (evt positionFromCamera - edge from position) / 5 + edge from position.	].	v signalUpdate.].	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleDoubleClick| v es |v := RTView new.es := (RTBox new color: Color purple; size: 25) elementsOn: (1 to: 100).es when: TRMouseDoubleClick do: [ :e | e element trachelShape color: Color red. v signalUpdate ].v addAll: es.RTGridLayout on: v elements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleDynamicBezierEdges	| v es |	v := RTView new.	es := ((RTEllipse new size: 30) + RTLabel) elementsOn: (1 to: 20).	v addAll: es.	RTCircleLayout new initialRadius: 150; on: es.	es @ (RTShowEdge new 				connectTo: [ :value | value - 5 to: value + 5]; 				shape: [ :el | RTBezierLine new 									centerOfObjects: (el model - 5 to: el model + 5) inView: v; 									color: (Color blue alpha: 0.4) ] ).	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleDynamicEdges	| v es |	v := RTView new.	es := ((RTEllipse new size: 40) + RTLabel) elementsOn: (1 to: 20).	v addAll: es.	RTCircleLayout new initialRadius: 150; on: es.	es @ (RTShowEdge new connectTo: [ :value | value - 5 to: value + 5]; shape: (RTLine new color: (Color blue alpha: 0.4))).	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleDynamicLabelsAndEdges	| view elements |	view := RTView new.	elements := RTEllipse new size: 30; elementsOn: (1 to: 20).	view addAll: elements.	RTCircleLayout new initialRadius: 150; on: elements.	elements @ (RTShowLabel new highlight: [ :value | value - 5 to: value + 5]; center; yourself).	elements @ (RTShowEdge new 						connectTo: [ :value | value - 5 to: value + 5]; 						shape: (RTLine new color: (Color blue alpha: 0.4))).	^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleDynamicallyAdding	| c v |	c := OrderedCollection new.	v := RTView new.	v canvas addMenu: '+1' callback: [ c add: 42 ].	RTActiveAnimation new		blockToExecute: [ 			(v numberOfElements ~~ c size) ifTrue: 				[ v clean. 				  v addAll: ((RTBox new size: 8; color: Color blue) elementsOn: c).				  RTGridLayout on: v elements.				   ] ];		inView: v.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleEdgeTransparency	| v es |	v := RTView new.	es := RTEllipse new elementsOn: RTShape withAllSubclasses.	v addAll: es.	RTWeightedCircleLayout new		initialRadius: 200;		on: es.	RTMetricNormalizer new		elements: es;		normalizeSize: #numberOfMethods			min: 10			max: 35			using: #sqrt;		normalizeColor: #numberOfLinesOfCode.	RTEdgeBuilder new		view: v;		objects: RTShape withAllSubclasses;		shape: (RTLine new color: Color blue);		connectFrom: #yourself toAll: #dependentClasses.	es @ RTPopup @ RTSetEdgeAlpha.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleEdgedWorm| v es |v := RTView new.es := RTBox elementsOn: (1 to: 50).v addAll: es.es @ RTDraggable."RTEdge buildEdgesFromObjects: (1 to: 50) from: #yourself toAll:  [:value | (Array with: value -1  with: value + 1 with: value + 2) ] inView: v."RTEdgeBuilder new	view: v;	objects: (1 to: 50);	connectToAll: [ :value | (Array with: value -1  with: value + 1 with: value + 2) ].RTForceBasedLayout on: es.v addAnimation: (RTForceLayoutStepping new view: v).v @ RTDraggableView.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleEdgesInTooltip	"	self new exampleEdgesInTooltip	"	| v shapeBuilder elementClasses edges background label methods methodElements eb |	v := RTView new.	"We use the bounded shape builder to:	  - have no element smaller than 5 x 5 "	shapeBuilder := RTBoundedShapeBuilder new.	shapeBuilder 		rectangle;		width: [ :c | c numberOfVariables * 7 ]; height: #numberOfMethods.	elementClasses := shapeBuilder elementsOn: RTShape withAllSubclasses.	"For each class, we add a popup that will show the method invocations and the class name"	"The popup uses #group: to specify what is the group of elements to use	#group: takes as argument a two-arg block. The first argument is a RTGroup, to which elements have to be added.	the second argument, aClassElement, is the class element on which the popup is being triggered."	elementClasses @ (RTPopup new group: 	[ :group :aClassElement |		methods := aClassElement model rtmethods.		methodElements := (RTBox new color: Color red) elementsOn: methods.		"We do not want to directly add the edges to the view. We instead need to add the edges to the group"		eb := RTEdgeBuilder new						elements: methodElements.		edges := eb connectToAll: #dependentMethods.		RTTreeLayout on: methodElements edges: edges.						background := (RTBox new color: (Color blue alpha: 0.4)) element. 		RTNest new centerOn: background elements: methodElements.		label := (RTLabel new text: aClassElement model name asString) element.		TRConstraint move: label above: background.				group add: label.		group add: background.			group addAll: edges.		group addAll: methodElements.	]).	v addAll: elementClasses.	RTFlowLayout on: elementClasses.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleEdgesWithBezier| b |b := RTMondrian new.b shape circle.b nodes: Collection withAllSubclasses.b edges moveBehind; connectFrom: #superclass.	b shape bezierLineFollowing: #superclass; color: (Color blue alpha: 0.4).b edges 	notUseInLayout; 	objects: [ :cls | '*Array*' match: cls name ];	connectToAll: #dependentClasses.b layout cluster.b normalizer 	normalizeSize: #numberOfMethods min: 5 max: 35 using: #sqrt;	normalizeColor: #numberOfLinesOfCode using: (Array with: Color blue with: Color red ).^ b</body><body package="Roassal2-ExampleBrowser-Examples">exampleEllipseBorder|v shape |v := RTView new.shape := RTEllipse new	size: 50;	color: Color white;	borderWidth: [ :vv | vv / 30 ];	borderColor: Color black.	v addAll: (shape elementsOn: (1 to: 10)).RTGridLayout on: v elements.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleExtensibleLabels| v e s |v := RTView new.s := RTExtensibleLabel new.40 timesRepeat: [	e := s elementOn: 'Hello World'.	e extent: (50 atRandom + 10) @ (50 atRandom + 10).	v add: e. ].RTFlowLayout on: v elements.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleFadingLetter| data mousePosition shape v es |data := (RTView rtmethods flatCollect: #getSource) copyFrom: 1 to: 1500.data := data select: #isAlphaNumeric.mousePosition := 250 @ 250.shape := RTLabel new 	colorElement: [ :anElement | 		| d |		d := (anElement position - mousePosition) r abs.		d := d max: 1.		d := (10000 / d) asInteger.		d := d min: 256.		Color grayScale256: d  ];	text: [ :aChar | aChar asString ].v := RTView new.es := shape elementsOn: data.v addAll: es.RTGridLayout new gapSize: 0; on: es.v when: TRMouseMove do: [ :evt |	mousePosition := evt position.	es updateShape.	v signalUpdate].	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleFontSize	| v label els |	v := RTView new.	label := RTLabel new height: #yourself.	els := label elementsOn: (1 to: 30).	v addAll: els.	RTFlowLayout on: els.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleFontSizeWithRTLabelled| v  vv es shape |v := RTView new.vv := 10 to: 100 by: 10.shape := RTEllipse new size: #yourself.es := shape elementsOn: vv.v addAll: es.es @ (RTLabeled new fontSize: #yourself).RTCircleLayout new radius: 250; on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleFonts	"	self new exampleFonts	"| v fontNames shape es |v := RTView new.fontNames := TRPlatform current fontListStrings allButFirst.shape := RTLabel new fontName: #yourself; text: #yourself.es := shape elementsOn: fontNames.es @ RTPopup.v addAll: es.RTVerticalLineLayout on: v elements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleForceBasedLayout	| v classes edges |	v := RTView new.	classes := (RTEllipse new		color: (Color purple alpha: 0.3);		size: 10) elementsOn: Collection withAllSubclasses.	(classes elementFromModel: Collection) trachelShape color: Color red.	classes @ RTDraggable.	v addAll: classes.	edges := RTEdgeBuilder new		view: v;		objects: Collection withAllSubclasses;		shape: (RTLine new color: (Color purple alpha: 0.2));		connectFrom: #superclass to: #yourself.	edges do: [ :e | e trachelShape pushBack ].	RTForceBasedLayout on: v elements edges: v edges.	"v addAnimation: (RTSpringLayoutStepping new view: v)."	v @ RTDraggableView.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleForceBasedLayoutAnimated	| v classes edges |	v := RTView new.	classes := (RTEllipse new		color: (Color purple alpha: 0.3);		size: 10) elementsOn: Collection withAllSubclasses.	(classes elementFromModel: Collection) trachelShape color: Color red.	classes @ RTDraggable.	v addAll: classes.	edges := RTEdgeBuilder new		view: v;		objects: Collection withAllSubclasses;		shape: (RTLine new color: (Color purple alpha: 0.2));		connectFrom: #superclass to: #yourself.	edges do: [ :e | e trachelShape pushBack ].	"RTForceBasedLayout on: v elements edges: v edges."	v addAnimation: (RTForceLayoutStepping new view: v).	v @ RTDraggableView.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleGrayScaling| v es n |	v := RTView new.	n := RTGrayLinearColor new 				command: #asInteger; 				scope: ($a to: $z).					es := RTBox new				size: 40;				color: n;				elementsOn: ($a to: $z).					v addAll: es.	es @ RTPopup.	RTGridLayout on: es.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleGrid| v es |v := RTView new.v @ RTDraggableView.v @ (RTGridView new gridSize: 10).v @ RTZoomableView.es := RTBox new	color: Color green;	size: 20;	elementsOn: #(1 2).v addAll: es.es @ (RTDraggableSnapToGrid new gridSize: 40).es @ RTResizable.es first translateTo: 70 negated @ 90 negated.es second translateTo: 70 @ 110.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleGroupOfGroups	"	self new exampleGroupOfGroups	"| objects groups edgesBlock1 edgesBlock2 colorNormalizer groupsOfElements v predicate layoutClass filteredObjects shape elements edges |objects := Collection withAllSubclasses.groups := Array with:  ([ :c | c name endsWith: 'List' ] -&gt; RTGridLayout new) with:([ :c | '*Set*' match: c name ] -&gt;  RTForceBasedLayout new) with:([ :c | '*Dictionary*' match: c name ] -&gt;  RTTreeLayout new) with:([ :c | c name endsWith: 'Array' ] -&gt;  (RTWeightedCircleLayout new initialRadius: 60)).edgesBlock1 := [ :c | c dependentClasses ].edgesBlock2 := [ :c | Array with: c superclass ].colorNormalizer := RTMultiLinearColorForIdentity new numberOfColors: groups size.groupsOfElements := RTGroup new.v := RTView new.groups doWithIndex: [ :assoc :index |	predicate := assoc key.	layoutClass := assoc value.	filteredObjects := objects select: predicate.	shape := RTEllipse new size: 20; color: (colorNormalizer rtValue: index).	elements := shape elementsOn: filteredObjects.	elements @ RTPopup.	v add: elements.	groupsOfElements add: elements."	edges := RTEdge 		buildEdgesFromObjects: filteredObjects from: #yourself toAll: edgesBlock1 using: (RTLine new color: Color red) scope: elements."		edges := RTEdgeBuilder new					elements: elements;					connectToAll: edgesBlock1.								v addAll: edges.		layoutClass  on: elements edges: edges.	RTEdgeBuilder new		elements: elements;		connectToAll: edgesBlock2."	v addAll: (RTEdge 		buildEdgesFromObjects: filteredObjects from: #yourself toAll: edgesBlock2 using: (RTLine new color: Color green) scope: elements)."		].RTFlowLayout on: groupsOfElements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleGroupedLayout	| view group1 group2 host1 host2 edgesGroup1 edgesGroup2 |	view := RTView new.	group1 := (RTBox new color: (Color blue alpha: 0.3); size: 30) elementsOn: (1 to: 10).	group2 := (RTBox new color: (Color blue alpha: 0.3); size: 30) elementsOn: (1 to: 10).		host1 := (RTBox new color: (Color green alpha: 0.3)) element.	host2 := (RTBox new color: (Color green alpha: 0.3)) element.		view addAll: group1; addAll: group2; add: host1; add: host2.		edgesGroup1 := RTEdgeBuilder new		view: view;		elements: group1;		connectFrom: [ :v | v //2 ].		edgesGroup2 := RTEdgeBuilder new		view: view;		elements: group2;		connectFrom: [ :v | v //2 ].		RTTreeLayout on: group1 edges: edgesGroup1.	RTTreeLayout on: group2 edges: edgesGroup2.		RTNest new on: host1 nest: group1.	RTNest new on: host2 nest: group2.		RTHorizontalLineLayout on: (Array with: host1 with: host2).		host1 @ RTDraggable.	host2 @ RTDraggable.		view canvas addMenu: 'In' callback: [ RTZoomInMove on: view ].	view canvas addMenu: 'Out' callback: [ RTZoomOutMove on: view ].	view @ RTDraggableView.		^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleHighlightingNeighbourg			| v es |	v := RTView new.	es := ((RTBox new size: 30)" + RTLabel") elementsOn: (1 to: 16).	es @ (RTHighlightable highlight: [ :vv | Array with: vv - 1 with: vv with: vv + 1 with: vv - 4 with: vv + 4 ]).	RTGridLayout on: es.	v addAll: es.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleLabelAndCircle| v s es |v := RTView new.s := RTEllipse new + (RTLabel new text: #name).s allOfSameSize.es := s elementsOn: Collection withAllSubclasses.es @ RTDraggable.RTEdgeBuilder new	view: v;	elements: es;	connectFrom: #superclass.	v addAll: es.RTClusterLayout on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleLabelledEncapsulating| classes allClassElements v es enclosing label g1 back |classes := RTShape withAllSubclasses.allClassElements := OrderedCollection new.v := RTView new.classes do: [ :cls | 	es := RTBox elementsOn: cls rtmethods.	es @ RTPopup.		back := (RTBox new color: Color blue) element.	RTNest new 		layout: RTGridLayout new;		on: back nest: es.	enclosing := (RTBox new color: Color transparent) element.	label := (RTLabel new text: #name) elementOn: cls.	g1 := RTGroup withAll: (Array with: label with: back).	RTNest new 		layout: RTVerticalLineLayout new alignCenter;		on: enclosing nest: g1.	enclosing @ RTDraggable.	v add: enclosing.	v add: back.	v addAll: es.	v add: label.		allClassElements add: enclosing.].RTFlowLayout on: allClassElements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleLabellingNodes"La parte superior entre barras define las variables"| vista e1 e2 e3 e4 line |"Se crea un objeto tipo vista"vista := RTView new."Definimo los elementos, que denominamos simplemente e1, e2, etc, consu color y su tamaÃ±o"e1 := (RTEllipse new color: (Color blue alpha: 0.4); size: 20) elementOn: 'hello'.e2 := (RTEllipse new color: (Color red alpha: 0.4); size: 20) elementOn: 'Bonjour'.e3 := (RTEllipse new color: (Color yellow alpha: 0.4); size: 20) elementOn: 'Gutten Tag'.e4 := (RTEllipse new color: (Color green alpha: 0.4); size: 20) elementOn: 'BuenGiorno'."Adicionamos los elementos a la vista"vista add: e1; add: e2; add: e3; add: e4."Decimos que los elementos antes definidos se podrÃ¡n arrastrar"e1 @ RTDraggable @ RTLabeled.e2 @ RTDraggable @ RTLabeled.e3 @ RTDraggable @ RTLabeled.e4 @ RTDraggable @ RTLabeled."Decimos quÃ© propiedades va a tener la lÃ­nea que los conecta los elementos"line := RTArrowedLine new color: Color red.line withOffsetIfMultiple."Decimos de dÃ³nde a dÃ³nde van las lÃ­neas que unen los elementos en la vista"vista add: (line edgeFrom: e1 to: e2).vista add: (line edgeFrom: e2 to: e1).vista add: (line edgeFrom: e1 to: e2).vista add: (line edgeFrom: e2 to: e2).vista add: (line edgeFrom: e3 to: e4)."Decimos que dispocisiÃ³n van a tener los elementos en la vista. En este caso se van a disponer de manera circular"RTCircleLayout on: (Array with: e1 with: e2 with: e3 with: e4 )."Abrimos la vista"vista canvas.^ vista</body><body package="Roassal2-ExampleBrowser-Examples">exampleLabels| v es |v := RTView new.v @ RTDraggableView.es := (RTEllipse new size: #numberOfMethods) elementsOn: RTObject withAllSubclasses.v addAll: es.es @ RTPopup @ RTLabeled @ RTDraggable.RTFlowLayout new maxWidth: 900; gapSize: 50; on: es.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleLazyFormLoading	"	self new exampleLazyFormLoading	""This example shows how to do lazy form loading. It is used to make Roassal use OpenStreetMap by loading tiles"| forms v emptyForm s elements visibleInteraction |forms := TRPlatform current colorFormClass allInstances select: [:f | f extent = (16 @ 16) ].v := RTView new.v @ RTDraggableView."We first create elements on an empty form"emptyForm := TRPlatform current colorFormClass extent: 16 @ 16 depth: 32.emptyForm fillColor: Color blue.s := RTBitmap new			form: emptyForm.elements := s elementsOn: (1 to: forms size)."We add all the elements to the view"v addAll: elements."We define an interaction to capture the exact moment an element is visible or invisible"visibleInteraction := RTVisible new.visibleInteraction	visibleBlock: [ :el | 		Transcript show: 'refresh'; cr.		el trachelShape form: (forms at: el model).		el signalUpdate ].elements @ visibleInteraction."We do the layout with a gap, for the purpose of the demo"RTGridLayout new gapSize: 90; on: elements."To make sure if we drag and drop a form, the view get translated"elements @ RTEventForwarder.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleLinkingObjects	| associations v labels |	associations := OrderedCollection new.	associations		add: 'bonjour' -&gt; 'hello';		add: 'homme' -&gt; 'man';		add: 'femme' -&gt; 'women';		add: 'hello' -&gt; 'goodbye';		add: 'people' -&gt; 'homme';		add: 'people' -&gt; 'women'.	"We create the nodes"	v := RTView new.	v @ RTDraggableView.	labels := Set new.	associations		do: [ :assoc | 			labels				add: assoc key;				add: assoc value ].	labels		do:			[ :aLabel | 			| n |			n := v elementFromModel: aLabel.			n				ifNil:					[ 					n := RTBox new + RTLabel elementOn: aLabel.					n @ RTDraggable ].			v add: n ].	"We add the links"	RTEdgeBuilder new		view: v;		objects: associations;		shape: (RTLine new color: (Color blue alpha: 0.4));		connectFrom: #key to: #value.	"We do a layout"	RTForceBasedLayout new		charge: -500;		on: v elements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleMakingVisualizationFit	| view |	view := RTView new.	view		addAll:			(RTBox elementsOn: Collection withAllSubclasses) @ RTDraggable.	RTEdgeBuilder new		view: view;		objects: Collection withAllSubclasses;		connectFrom: #superclass to: #yourself.	RTTreeLayout on: view elements edges: view edges.	view @ RTDraggableView.	view edges do: [ :e | e trachelShape pushBack ].	(RTGroup withAll: view elements) translateTo: 0 @ 0.	"Removing this line will make the visualization larger than the window"	view canvas camera focusOnCenterScaled: 500 @ 500.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleMenu| classes v n shape es |classes := RTObject withAllSubclasses.v := RTView new.v @ RTDraggableView.n := RTMultiLinearColorForIdentity new objects: classes.shape := RTEllipse new size: #numberOfMethods; color: n.es := shape elementsOn: classes.es @ (RTMenuActivable new action: #inspect; item: 'browse class' action: [ :e | e model browse ]).v addAll: es.RTFlowLayout on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleMetricNormalizer| v es |v := RTView new.es := RTEllipse elementsOn: RTObject withAllSubclasses.es @ RTPopup.v addAll: es.RTMetricNormalizer new	elements: es;	normalizeColor: #numberOfLinesOfCode;	alphaColor: 0.4;	normalizeSize: #numberOfMethods min: 5 max: 15;	normalizeX: #numberOfMethods min: 0 max: 300;	normalizeY: #numberOfVariables min: 0 max: 300.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleMetricNormalizer2| v es |v := RTView new.es := RTEllipse new color: Color blue; elementsOn: (Collection withAllSubclasses).es @ RTPopup.v addAll: es.RTMetricNormalizer new	elements: es;	alphaColor: 0.3;	normalizeSize: #numberOfVariables min: 5 max: 20;	normalizePosition: [ :aClass | aClass numberOfLinesOfCode @ aClass numberOfMethods ] min: 0 @ 0  max: 300 @ -300.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleMidPointCenterUsingBezier| v es startingElement shape |v := RTView new.es := (RTEllipse new color: (Color blue alpha: 0.4); size: 15) elementsOn: (1 to: 20).v addAll: es.es @ RTDraggable."we are properly locating the nodes"startingElement :=  (RTEllipse new color: (Color red alpha: 0.4); size: 20) element.v add:  startingElement.startingElement @ RTDraggable.RTCircleLayout new initialRadius: 80; on: es.es translateTo: 0 @ 0.startingElement translateBy: -150 @ 0."Building the bezier lines"shape := RTBezierLine new				midPointInCenterOfObjects: (1 to: 20) inView: v.v addAll: (shape edgesFrom: startingElement toAll: es).			^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleMovingCamera		| v menu |	v := RTView new.	v add: (RTEllipse new size: 50) element.	menu := RTMenuBuilder new view: v.	menu menu: '&lt;-' callback: [ v canvas camera translateBy: -10 @ 0. v signalUpdate ].	menu menu: '-&gt;' callback: [ v canvas camera translateBy: 10 @ 0. v signalUpdate ].	menu menu: 'V' callback: [ v canvas camera translateBy: 0 @ 10. v signalUpdate ].	menu menu: '^' callback: [ v canvas camera translateBy: 0 @ -10. v signalUpdate ].	 	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleMovingEdges| v edges es |v := RTView new.edges := OrderedCollection new.es := RTBox elementsOn: (1 to: 300).RTGridLayout new gapSize: 30; on: es.es do: [ :e |	| te |	te := RTBox element.	te translateTo: e position + (0 @ 10).	edges add: ((RTArrowedLine new color: Color black) edgeFrom: e to: te).].v addAll: edges.v when: TRMouseMove do: [ :evt |  	edges do: [ :edge |		edge to translateTo: (evt position - edge from position) / 10 + edge from position.	].	v signalUpdate.].	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleMovingGrid	| v es size initialLayout layout step |	v := RTView new.	v @ RTDraggableView.	size := 10.	es := (RTEllipse new		size: 20;		color: (Color red alpha: 0.4)) elementsOn: (1 to: size * size).	v addAll: es.	es @ RTDraggable @ RTPopup.	"es when: TRMouseEnter do: [ :evt | evt element translateBy: (20 atRandom @ 20 atRandom) - (10 @ 10) ]."	RTEdgeBuilder new		view: v;		elements: es;		connectFrom: #yourself			toAll:				[ :value | 			value \\ size = 0				ifTrue: [ Array with: value + size ]				ifFalse: [ Array with: value + 1 with: value + size ] ].	initialLayout := RTGridLayout new		lineItemsCount: size;		on: es.	layout := RTForceBasedLayout new initialLayout: initialLayout.	step := RTForceLayoutStepping new		view: v;		layout: layout.	v addAnimation: step.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleNamedPopup| v es |v := RTView new.es := RTLabel elementsOn: (1 to: 10).v addAll: es.es @ (RTPopup new 	named: #yourself	background: Color blue	group: [ :group :el |   		group addAll: (RTEllipse elementsOn: (1 to: el model)).		RTWeightedCircleLayout new			initialRadius: 50;			on: group.		]).RTHorizontalLineLayout on: es.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleNestingAndEdges| v es |v := RTView new.es := (RTBox new color: (Color blue alpha: 0.4)) elementsOn: (RTShape withAllSubclasses).v addAll: es.RTNest new	for: es add: [ :group :model | 		group addAll: (RTBox new elementsOn: model rtmethods).		RTGridLayout on: group ].	es @ (RTShowEdge new 			connectTo: #dependentClasses; 			shape: (RTLine new color: Color red);			yourself).es @ (RTShowLabel new 			color: Color red;			highlight: #dependentClasses; top; yourself).RTGridLayout on: es.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleOrthoHorizontalLines| v eb |v := RTView new.v addAll: (RTBox elementsOn: Collection withAllSubclasses).eb := RTEdgeBuilder new.eb shape orthoHorizontalLine.eb view: v.eb		objects: Collection withAllSubclasses;	connectFrom: #superclass	to: #yourself;	build.v elements @ RTDraggable @ RTPopup.RTHorizontalTreeLayout on: v elements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleOrthoVerticalLines| v  eb |v := RTView new.v addAll: (RTBox elementsOn: Collection withAllSubclasses).eb := RTEdgeBuilder new.eb shape orthoVerticalLine.eb view: v.eb		objects: Collection withAllSubclasses;	connectFrom: #superclass.v elements @ RTDraggable @ RTPopup.RTTreeLayout on: v elements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleOrthoVerticalLines2	| v shape |	v := RTView new.	v		addAll:			((RTEllipse new				size: 20;				color: (Color red alpha: 0.3)) elementsOn: (1 to: 20)).	shape := RTMultiLine new.	shape orthoVertical.	shape color: (Color blue alpha: 0.3).	RTEdgeBuilder new		view: v;		objects: (1 to: 20);		shape: shape;		connectFrom: [ :n | n // 3 ] to: #yourself.	v elements @ RTDraggable @ RTPopup.	RTTreeLayout on: v elements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleParallelCoordinate| maxValue spaceBetweenLine lineHeight numberOfColumns numberOfLines values setOfElements v e t line| "Configuration"maxValue := 40.spaceBetweenLine := 50.lineHeight := 150.numberOfColumns := 10.numberOfLines := 100."Script"values := OrderedCollection new.numberOfLines timesRepeat: [ 	t := OrderedCollection new.	numberOfColumns timesRepeat: [ t add: maxValue atRandom ].	values add: t.	 ].v := RTView new.setOfElements := OrderedCollection new.1 to: numberOfColumns do: [ :i |	t := OrderedCollection new.	values do: [ :setOfValues |		e := (RTEllipse new color: (Color red alpha: 0.3)) element.		t add: e.		e translateTo: 				(i * (spaceBetweenLine - 1)) @ 					((setOfValues at: i) * lineHeight / maxValue) asFloat.		v add: e.	].	setOfElements add: t.].2 to: numberOfColumns do: [ :column |	t := OrderedCollection new.	values doWithIndex: [ :setOfValues :index |		line := (RTLine new color: (Color red alpha: 0.3)) 			edgeFrom: ((setOfElements at: (column - 1)) at: index) to: ((setOfElements at: column) at: index).		v add: line.	].	].^ v</body><body package="Roassal2-ExampleBrowser-Examples">examplePlacingGroups	| v g1 g2 |	v := RTView new.	g1 := RTGroup new.	g1 addAll: (RTBox new size: 10; elementsOn:( 1 to: 200)).	g2 := RTGroup new.	g2 addAll: ((RTEllipse new size: 15; color: Color red )elementsOn: (RTShape withAllSubclasses)).	v addAll: g1; addAll: g2.	RTEdgeBuilder new 		view: v;		objects: RTShape withAllSubclasses;		connectFrom: #superclass to: #yourself.	RTGridLayout on: g1.	RTTreeLayout on: g2.	RTConstraint move: g1 onTheRightOf: g2.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">examplePolygons| clss v ver d composedShape e s |clss := RTShape withAllSubclasses.v := RTView new.v @ RTDraggableView.clss do: [ :cls | 	s := RTPolygon new.	ver := OrderedCollection new.	d := 0.	(cls rtmethods sortedAs: #numberOfLinesOfCode) do: [ :m |		ver add: (Point r: m numberOfLinesOfCode * 5 degrees: d).		d := d + (360 / cls rtmethods size).	 ].	s vertices: ver.		composedShape := RTCompositeShape new.	composedShape add: s.	composedShape add: (RTEllipse new color: (Color red)).	e := composedShape elementOn: cls.	e @ RTPopup @ RTDraggable.	v add: e ].RTFlowLayout on: v elements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleRectangleLayout| v |v := RTView new.v @ RTDraggableView.v addAll: ((RTBox new size: [ :value | value / 2 ]; borderColor: Color black) elementsOn: (1 to: 100)).RTRectanglePackLayout new on: v elements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleResizingElements| v es resizeAnimation shape normalizer |v := RTView new.v @ RTDraggableView.normalizer := RTMultiLinearColor new.shape := RTBox new size: #yourself; color: [ :value | (normalizer level: (value / 100)) alpha: 0.4 ].es := shape elementsOn: (1 to: 100 by: 10).v addAll: es.v canvas addMenu: 'Press me!' callback: [ 	es do: [ :e | 		resizeAnimation := 			RTResizeMove new 				toExtent: (100 - e model) @ (100 - e model) on: e.		e model: (100 - e model).		v addAnimation: resizeAnimation ] ].v addAnimation: (RTLayoutAnimation new elements: es; yourself).	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleResizingGroup| elements v handle callback |elements := (RTEllipse new size: (30 atRandom)) elementsOn: (1 to: 30).RTForceBasedLayout on: elements.v := RTView new.v addAll: elements.handle := (RTBox new size: 20; color: Color red) element.v add: handle.handle @ RTDraggable.TRConstraint move: handle onTheRightBelowOf: elements.callback := TRTranslationCallback new block: [ :shape :step | 	elements extent: (handle encompassingRectangle topLeft - elements encompassingRectangle topLeft). v signalUpdate ].handle trachelShape addCallback: callback.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleRotatingAnimatedLabels	| v shape timer |	v := RTView new.	timer := TRVITimer new cycleLength: 2.			shape := RTRotatedLabel new.	"shape angleInDegree: [ :cls | cls numberOfMethods negated / 1.5 ]."	shape angleInDegree: [ :cls | 		| valueEnd |		valueEnd := cls numberOfMethods negated / 1.5.		TRVIAnimatedValue new					evaluator: [ :t | 0 interpolateTo: valueEnd at: t ];					timer: timer;					yourself. ].	shape text: [ :cls | '                                                                                ', cls name ].	shape color: (Color black alpha: 0.2).	v addAll: (shape elementsOn: Collection withAllSubclasses).	v canvas color: Color white.	v addAnimation: RTResetAllShape new.	timer start.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleRotatingElements| v es |v := RTView new.es := (RTBox new color: (Color blue alpha: 0.4); size: 30) elementsOn: (1 to: 60).v addAll: es.es when: TRMouseEnter do: [ :evt |  evt element trachelShape rotateByDegrees: 5. evt signalUpdate ].es @ RTDraggable.RTGridLayout on: es.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleRotatingLabels	| v shape |	v := RTView new.	shape := RTRotatedLabel new.	shape angleInDegree: [ :cls | cls numberOfMethods negated / 1.5 ].	shape text: [ :cls | '                                                                                ', cls name ].	shape color: (Color black alpha: 0.2).	v addAll: (shape elementsOn: Collection withAllSubclasses).	v canvas color: Color white.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleSVGPath| paths v normalizer es |"Icons have been obtained from http://iconmonstr.com"paths := RTGroup new.paths add: 'M50,50.002c48.046,20.595,149.05,16.396,142.596,109.369l-36.781,37.526	C64.183,198.499,65.876,100.672,50,50.002z M236.836,314.404c46.488,35.155,202.98,145.061,202.98,145.061	c12.942,8.801,28.532-7.157,19.496-19.948c0,0-113.425-153.879-149.669-199.452c-28.634-36.068-42.95-37.333-93.729-52.295	l-33.528,34.274C198.463,272.378,200.123,286.61,236.836,314.404z M153.117,371.604l44.978-45.096	c-4.459-4.19-8.398-8.315-11.852-12.423l-45.263,45.381L153.117,371.604z M294.64,179.983l82.462-82.647l36.982,36.999	l-80.619,80.786c7.511,9.02,13.965,17.519,21.392,27.191l107.139-107.34l-84.96-84.969L261.664,165.591	C273.768,169.513,284.464,173.88,294.64,179.983z M377.672,122.197l-68.18,68.348c4.124,3.42,8.315,7.267,12.573,11.692	l67.743-67.903L377.672,122.197z M211.137,337.707l-61.792,61.927L98.214,413.8l14.149-51.147l63.117-63.268	c-6.119-10.008-10.595-20.637-14.752-32.673l-79.412,79.562L50,461.996l116.276-30.745l72.555-72.688	C221.665,346.056,221.145,345.721,211.137,337.707z'.paths add: 'M410.5,101.5c0-28.449-23.051-51.5-51.5-51.5s-51.5,23.051-51.5,51.5	c0,22.716,14.786,41.76,35.188,48.617c2.884,73.729-34.702,81.785-85.792,92.547c-29.346,6.186-62.514,13.311-86.73,35.801V149.848	c19.958-7.091,34.333-25.951,34.333-48.348c0-28.449-23.051-51.5-51.5-51.5s-51.5,23.051-51.5,51.5	c0,22.397,14.375,41.257,34.333,48.348v212.304c-19.958,7.091-34.333,25.951-34.333,48.348c0,28.449,23.051,51.5,51.5,51.5	s51.5-23.051,51.5-51.5c0-22.229-14.149-40.988-33.864-48.215c4.635-67.324,44.124-75.656,93.334-86.033	c52.146-10.981,116.287-24.745,112.934-126.638C396.484,142.321,410.5,123.621,410.5,101.5z M122.104,101.5	c0-17.041,13.855-30.896,30.896-30.896s30.896,13.855,30.896,30.896S170.041,132.396,153,132.396S122.104,118.541,122.104,101.5z	 M183.896,410.5c0,17.033-13.855,30.896-30.896,30.896s-30.896-13.863-30.896-30.896s13.855-30.896,30.896-30.896	S183.896,393.467,183.896,410.5z'.	paths add: 'M209.965,376.166c-27.661,0-56.127-12.17-74.132-37.217c2.95,0.235,5.767,0.369,8.432,0.369	c68.315,0,44.845-77.526,114.953-78.272l31.584,26.337C295.598,345.639,253.787,376.166,209.965,376.166z M377.307,216.813	c20.352-31.97,65.783-117.074,83.15-150.175c1.074-1.869,1.543-3.747,1.543-5.541C462,55.038,456.635,50,450.734,50	c-2.348,0-4.795,0.805-7.008,2.666c-28.666,24.258-101.256,86.177-128.951,112.019c-26.286,24.585-26.387,35.826-34.902,76.354	l28.834,24.031C346.93,249.353,357.928,247.215,377.307,216.813z M393.334,252.966v174.7h-309V187.333h173.342	c11.232-30.704,29.875-45.725,96.194-103H50V462h377.666V199.052C415.831,219.923,405.772,237.961,393.334,252.966z'.	paths add: 'M118.672,424.778c78.741,6.521,50.544-77.132,123.401-77.903l31.55,26.338	C281.486,468.265,165.209,489.488,118.672,424.778z M360.125,302.636c24.493-38.44,100.367-167.347,100.367-167.347	c6.035-10.687-7.377-21.852-16.748-13.965c0,0-112.821,98.095-146.099,129.184c-26.302,24.584-26.419,35.815-34.937,76.335	l28.835,24.04C329.767,335.174,340.763,333.046,360.125,302.636z M154.146,369.189c11.433-19.48,30.008-51.114,76.343-56.009	c7.444-35.825,10.428-56.646,43.721-87.76c23.57-22.011,84.776-75.689,120.533-106.921c-17.166-37.903-71.079-69.06-140.382-68.489	C140.633,50.94,49.102,143.813,50.007,257.574c0.402,49.974,18.558,95.621,48.415,131.061	C126.183,396.011,139.208,394.62,154.146,369.189z M273.473,97.352c18.909-0.109,34.416,15.121,34.601,34.04	c0.066,18.935-15.139,34.483-34.099,34.609c-18.977,0.159-34.466-15.104-34.567-34.064	C239.207,112.95,254.461,97.502,273.473,97.352z M170.541,131.693c18.91-0.176,34.467,15.062,34.534,34.039	c0.201,18.994-15.105,34.425-33.998,34.601c-18.977,0.134-34.483-15.112-34.602-34.115	C136.325,147.292,151.53,131.818,170.541,131.693z M136.141,234.666c18.994-0.125,34.5,15.146,34.601,34.072	c0.167,18.952-15.104,34.468-34.098,34.601c-18.977,0.135-34.417-15.121-34.517-34.081	C101.959,250.29,117.23,234.842,136.141,234.666z M308.341,381.125c0.369,38.423-15.138,63.838-28.866,78.74	c-0.252,0.269-0.537,0.504-0.789,0.755c90.208-10.126,155.555-73.879,107.559-135.42C362.674,360.338,342.74,367.11,308.341,381.125	z'.	paths add: 'M179.997,83.572V272.42c-15.98-17.393-43.605-38.143-70.619-36.524	c-32.408,1.941-38.563,36.646-10.562,62.864c47.141,44.139,94.575,109.268,105.167,163.24c0,0,140.646,0,184.41,0	c0-108.793,35.16-131.914,41.555-188.706c4.786-42.488-6.636-75.721-41.023-80.612l4.742,13.429	c1.827,6.01-1.573,12.363-7.588,14.185c-6.018,1.82-12.371-1.575-14.188-7.594l-4.521-12.506	c-4.734-15.642-19.271-17.712-40.844-20.582l5.641,16.599c1.827,6.016-1.581,12.369-7.598,14.194	c-6.01,1.813-12.363-1.582-14.183-7.597l-4.083-12.843c-4.896-16.162-18.077-17.917-41.978-21.556l5.349,17.832	c5.002,16.528-26.534,24.509-26.534-21.546V83.572C243.141,65.03,230.11,50,211.569,50S179.997,65.03,179.997,83.572z'.paths add: 'M236.105,181.743L419.02,325.125l-78.146,13.294l49.697,101.311L345.002,462l-49.983-102.275	l-58.913,53.492V181.743z M209.991,275.845v-27.536l-27.961,12.44l5.284-54.958l-44.66-32.461l50.238-22.901l5.783-54.909	l44.953,32.059l50.441-22.445l-5.286,54.955l44.662,32.465l-27.023,12.318l22.304,17.481l54.393-24.795l-67.916-49.369l8.038-83.573	L246.533,98.75L178.172,50l-8.794,83.499L92.98,168.327l67.917,49.363l-8.036,83.573L209.991,275.845z'.paths add: 'M50,121.974l214.373,168.043l-91.587,15.581l58.244,118.734l-53.405,26.101l-58.581-119.864	L50,393.26V121.974z M350.522,61.567c-61.567,0-111.477,49.908-111.477,111.477c0,61.567,49.909,111.477,111.477,111.477	c61.569,0,111.478-49.909,111.478-111.477C462,111.476,412.092,61.567,350.522,61.567z M351.741,247.129	c-8.746,0-15.84-7.095-15.84-15.843c0-8.746,7.094-15.835,15.84-15.835c8.75,0,15.839,7.089,15.839,15.835	C367.58,240.034,360.491,247.129,351.741,247.129z M364.193,200.31v2.851c0,0-23.747,0-26.108,0v-2.851	c0-8.062,1.176-18.405,10.536-27.396c9.36-8.995,21.058-16.422,21.058-27.657c0-12.421-8.618-18.989-19.484-18.989	c-18.108,0-19.293,18.78-19.739,22.916H305.06c0.677-19.583,8.953-46.976,45.287-46.976c31.484,0,45.639,21.086,45.639,40.861	C395.985,174.543,364.193,180.011,364.193,200.31z'.paths add: 'M149.201,462l-48.81-83.796c29.764-23.725,54.763-43.234,53.67-81.087h-49.181v-83.98h31.73	C120.796,126.937,181.513,50,272.01,50c67.423,0,120.139,37.954,128.956,124.836l-96.363,14.023	c-1.928-8.925-6.635-45.78-34.753-45.78c-19.901,0-33.456,24.244-15.27,70.058h78.943v83.98h-60.687	c-1.319,18.151-9.282,33.163-19.438,46.447c24.343,1.238,45.975,13.569,68.383,13.569c19.778,0,25.201-3.376,58.65-20.264	l31.177,90.997c-18.337,11.344-42.196,27.734-82.166,27.808C250.038,455.675,238.966,405.734,149.201,462z M329.444,425.651	l0.346-0.001c16.368-0.104,30.496-3.509,45.497-11.163l-12.229-35.694c-15.21,6.548-25.454,8.364-41.277,8.364	c-38.07,0-74.053-32.272-140.604-3.835c51.043-42.409,67.551-82.729,59.606-116.228H303.5V243.16h-69.433	c-15.322-33.327-28.368-74.206-7.945-106.069c9.788-15.274,25.728-24.034,43.728-24.034c21.355,0,45.728,13.174,57.087,42.213	l40.358-5.873c-11.964-50.885-57.479-69.374-95.285-69.374c-75.705,0-125.545,68.262-101.907,143.635l6.116,19.503h-41.315v23.935	h45.909c0.616,1.001,23.514,59.864-41.573,118.153l20.498,35.189c16.166-8.858,34.12-15.76,55.276-15.76	C247.36,404.829,300.137,425.651,329.444,425.651z'.	paths add: 'M299.715,461.13c-94.312,2.166-176.276-59.753-195.785-153.012H49.734l8.188-41.354h41.369	c-0.218-9.804,0.165-19.596,0.938-29.292H63.047l7.938-41.354h35.533C132.739,82.586,230.829,17.764,383.484,66.522l-16.625,68.5	c-77.396-24.258-139.529-17.381-159.892,61.098h150.1l-7.917,41.354H200.857c-0.529,9.121-0.69,19.461-0.295,29.292H344.15	l-0.104,0.54c-23.77,7.239-43.852,21.902-58.121,40.813h-79.712c9.279,36.496,30.106,59.916,56.761,71.075	C263.549,410.001,276.244,439.362,299.715,461.13z M292.947,377.225c0,46.756,37.903,84.66,84.659,84.66s84.659-37.904,84.659-84.66	s-37.903-84.658-84.659-84.658S292.947,330.469,292.947,377.225z M420.312,367.84h-22.095v53.455H357.46V367.84h-22.096	l42.475-42.549L420.312,367.84z'.	normalizer := RTMultiLinearColorForIdentity new objects: paths.es := paths collect: [ :p | (RTSVGPath new path: p; color: normalizer; scale: 0.1) elementOn: p ].v := RTView new.v addAll: es.es when: TRMouseClick do: [ :e | e inspect ].es @ RTHighlightable.RTGridLayout on: es.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleScaledNesting	| view inner host edges outter trachelCanvas resizable |	outter := OrderedCollection new.	view := RTView new.	view @ RTDraggableView.		1 to: 200 by: 10 do: [ :i |		inner := (RTBox new color: (Color purple alpha: 0.2)) elementsOn: (1 to: i).		host := (RTBox new color: (Color yellow alpha: 0.1)) element.		outter add: host.		view add: host.		view addAll: inner.		edges := 			RTEdgeBuilder new				view: view;				elements: inner;				connectFrom: [ :v | v // 2 ].		RTGridLayout new on: inner.		RTNest new					on: host nest: inner.	].	RTGridLayout on: outter.		trachelCanvas := view setUpCanvas.	TRFocusCenter on: trachelCanvas.		"Zoom a specific element"	resizable := outter at: (Random new nextInt: outter size).	view addMenu: 'Smaller'		callback: [ view addAnimation: (RTResizeMove new 													toExtent: resizable extent * 0.6 													during: 0.3 on: resizable) ].	view addMenu: 'Bigger'		callback: [ view addAnimation: (RTResizeMove new 													toExtent: resizable extent * (1 / 0.6) 													during: 0.3 on: resizable) ].		^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleScales| v scale width doLayout values dots |v := RTView new.v @ RTDraggableView."Linear per default"scale := [ :x | x ].width := 200.doLayout := [	RTHorizontalLineLayout new gapSize: 0; on: dots.	RTMetricNormalizer new		elements: dots;		fastSmoothTranslation;		normalizeY: #numberOfMethods min: 0 max: width negated using: scale.		v signalUpdate ].v addMenu: 'linear' callback: [ scale := [ :x | x ]. doLayout value ].v addMenu: 'log' callback: [  scale := [ :x | (x + 1) log ] . doLayout value ].v addMenu: 'square root' callback: [  scale := [ :x | x sqrt ] . doLayout value ].values := RTObject withAllSubclasses.dots := (RTEllipse new color: (Color blue alpha: 0.5)) elementsOn: values.v addAll: dots.doLayout value. ^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleScrollZoom	| v |	v := RTView new.	v @ RTZoomableView.	v @ RTDraggableView.	v add: (RTLabel new elementOn:'Scroll your mouse wheelwhile hovering cursorover the view to zoom it').	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleSliderAndCubeHelix	| v helix shape elements slider |	v := RTView new.	helix := RTCubeHelix new.	helix rotations: 2.	helix gamma: 2.	shape := (RTBox new height: 300; width: 1; color: [ :model | helix level: model ]).	elements := shape elementsOn: (0.0 to: 1.0 by: 0.002).	v addAll: elements.	RTHorizontalLineLayout new gapSize: 0; on: elements.	"Set the gamma value"	slider := RTSlider new.	slider view: v.	slider labeled.	slider callback: [ :aValue | helix gamma: 5 * aValue. elements updateShape ].	slider move: #below.	slider build.	"Set the rotation value"	slider := RTSlider new.	slider view: v.	slider labeled.	slider callback: [ :aValue | helix rotations: 5 * aValue. elements updateShape ].	slider move: #below.	slider build.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleSmoothLayout	| v translator |	translator := RTSmoothLayoutTranslator new.	v := RTView new.	v canvas		addMenu: 'grid'		callback:			[ 			RTGridLayout new				translator: translator;				on: v elements.			v canvas signalUpdate ].	v canvas		addMenu: 'hori'		callback:			[ 			RTHorizontalLineLayout new				translator: translator;				on: v elements.			v canvas signalUpdate ].	v canvas		addMenu: 'treeV'		callback:			[ 			RTTreeLayout new				translator: translator;				on: v elements edges: v edges.			v canvas signalUpdate ].	v canvas		addMenu: 'treeH'		callback:			[ 			RTHorizontalTreeLayout new				translator: translator;				on: v elements edges: v edges.			v canvas signalUpdate ].	v canvas		addMenu: 'cluster'		callback:			[ 			RTClusterLayout new				translator: translator;				on: v elements edges: v edges.			v canvas signalUpdate ].	v canvas		addMenu: 'circle'		callback:			[ 			RTCircleLayout new				translator: translator;				scaleBy: 0.8;				on: v elements.			v canvas signalUpdate ].	v canvas		addMenu: 'radial'		callback:			[ 			RTRadialTreeLayout new				translator: translator;				on: v elements.			v canvas signalUpdate ].	v canvas		addMenu: 'sugiyama'		callback:			[ 			RTSugiyamaLayout new				translator: translator;				on: v elements.			v canvas signalUpdate ].	v addAll: (RTBox new elementsOn: (1 to: 100)).	RTEdgeBuilder new		view: v;		objects: (1 to: 100);		connectFrom: [ :value | value // 2 ] to: #yourself.	RTTreeLayout new on: v elements edges: v edges.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleSparkline| v cls s es |v := RTView new.cls := RTLayout withAllSubclasses.s := RTSparkline new		width: 50; height: 30;		values: [ :c | (c rtmethods collect: #numberOfLinesOfCode) sorted ].es := s elementsOn: cls.v addAll: es.es @ RTPopup @ RTDraggable.RTFlowLayout on: es.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleSpiralViz	"Simple visualization in which each class is a curve. How the curve varies indicates variations in the methods set"	| classes v angle shape incr |	classes := RTShape withAllSubclasses.	classes := classes select: [ :c | c methods size &gt; 1 ].	v := RTView new.	angle := 0.	classes		do: [ :c | 			shape := TRBezierShape new.			shape color: Color black.			shape				width: 2.5;				strokePaint: Color random.			incr := 0.			angle := angle + (360 / classes size).			shape				points:					(c methods						collect: [ :m | 							incr := incr + (angle cos @ angle sin * 10).							(m numberOfLinesOfCode log * 25) @ (m sourceCode size log * 25)								+ incr ]).			v canvas addShape: shape ].	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleTimeLineOfRoassal| d popup v |"Time line of code in Roassal""We compute the number of methods created for each day. We keep the information in a dictionary"d := Dictionary new.RTObject withAllSubclasses do: [ :c |	c rtmethods do: [ :m |		d at: m ageInDaysAsInteger ifAbsentPut: [ 0 ].		d at: m ageInDaysAsInteger put: (d at: m ageInDaysAsInteger) + 1 ].].popup := RTPopup text: [:assoc | assoc value asString, ' methods added on day ', assoc key asString ].v := RTView new.v addAll: (RTEllipse elementsOn: d associations) @ popup.RTMetricNormalizer new	elements: v elements;	normalizeX: #key min: 0 max: 500;	normalizeSize: #value min: 5  max: 30;	normalizeColor: #value;	alphaColor: 0.3."We add a line from the left most element to the right most element"v add: ((RTLine new color: Color lightGray) edgeFrom: v elements leftMostElement to: v elements rightMostElement)."It make sense to only drag horizontally"v @ RTHorizontalDraggableView."We add a small legend"v canvas addFixedShape: (TRLabelShape new text: 'Each circle is a day. Size of the circle indicates the number of methods produced that day').TRConstraint stickAtTheBottomOfTheWindow: v canvas fixedShapes last.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleTreeLayout	| view |	view := RTView new.	view		addAll:			(RTBox elementsOn: Collection withAllSubclasses) @ RTDraggable.	RTEdgeBuilder new		view: view;		objects: Collection withAllSubclasses;		connectFrom: #superclass to: #yourself.	RTTreeLayout on: view elements edges: view edges.	view @ RTDraggableView.	view edges do: [ :e | e trachelShape pushBack ].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleTwoColumnFlow| firstColumn secondColumn associations firstElements secondElements v eb |firstColumn := #( 'WP A.1'  'WP A.2' 'WP A.3'  ).secondColumn := #('WP B.1'  'WP B.2'  'WP B.3' ).associations := OrderedCollection new. associations 	add: 'WP A.1' -&gt; 'WP A.2';	add: 'WP A.2' -&gt; 'WP A.3' ;	 add: 'WP B.1' -&gt; 'WP B.2' ;	add: 'WP B.2' -&gt; 'WP B.3' ;		 add: 'WP A.3' -&gt; 'WP B.1' ;	 add: 'WP B.1' -&gt; 'WP A.1' ;	 add: 'WP B.2' -&gt; 'WP B.2' ;	 add: 'WP B.3' -&gt; 'WP A.2'.v := RTView new.firstElements := ((RTEllipse new extent: 70 @ 30; color: (Color r: 1.0 g: 1.0 b: 0.7020000000000001 alpha: 1.0)) + RTLabel) elementsOn: firstColumn.secondElements := ((RTEllipse new extent: 70 @ 30; color: (Color r: 0.996 g: 0.851 b: 0.651 alpha: 1.0)) + RTLabel) elementsOn: secondColumn.v addAll: firstElements.v addAll: secondElements.v elements @ RTDraggable.RTVerticalLineLayout new gapSize: 15; on: firstElements.RTVerticalLineLayout new gapSize: 15; on: secondElements.secondElements translateBy: 100 @ 0.eb := RTEdgeBuilder new.eb view: v.eb shape arrowedLine	withBorderAttachPoint.eb useAssociations: associations.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleTwoColumnsAsFlow| firstColumn secondColumn associations v eb firstElements secondElements |firstColumn := #( 'WP A.1' 'WP A.2' 'WP A.3' ).secondColumn := #( 'WP B.1' 'WP B.2' 'WP B.3' ).associations := OrderedCollection new	add: 'WP A.1' -&gt; 'WP A.2';	add: 'WP A.2' -&gt; 'WP A.3';	add: 'WP B.1' -&gt; 'WP B.2';	add: 'WP B.2' -&gt; 'WP B.3';		add: 'WP A.3' -&gt; 'WP B.1';	add: 'WP B.1' -&gt; 'WP A.1';	add: 'WP B.2' -&gt; 'WP A.2';	add: 'WP B.3' -&gt; 'WP A.2';	yourself.v := RTView new.firstElements := ((RTEllipse new extent: 70 @ 30; color: Color lightBlue) + RTLabel) elementsOn: firstColumn.secondElements := ((RTEllipse new extent: 70 @ 30; color: Color yellow) + RTLabel) elementsOn: secondColumn.v addAll: firstElements.v addAll: secondElements.v elements @ RTDraggable.RTVerticalLineLayout new gapSize: 15; on: firstElements.RTVerticalLineLayout new gapSize: 15; on: secondElements.secondElements translateBy: 100 @ 0.eb := RTEdgeBuilder new.eb view: v.eb shape arrowedLine	withBorderAttachPoint.eb useAssociations: associations.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleUseOfDecoration	| view element decoration |	view := RTView new.	element := RTBox new size: 50; color: Color blue; element.	decoration := RTDecoration new 						shape: (RTEllipse new color: Color red; borderColor: Color black; size: 10)							tooltip: 'Set red color'							action: [ :anElement | 											anElement trachelShape color: Color red.											anElement signalUpdate. ];						shape: (RTEllipse new color: Color yellow; borderColor: Color black; size: 10)							tooltip: 'Set yellow color'							action: [ :anElement | 											anElement trachelShape color: Color yellow.											anElement signalUpdate. ];						shape: (RTEllipse new color: Color green; borderColor: Color black; size: 10)							tooltip: 'Set green color'							action: [ :anElement | 											anElement trachelShape color: Color green.											anElement signalUpdate. ].	element @ decoration @ RTDraggable.	view add: element.^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleUseOfMetrics| metrics classes view mb xAxis yAxis refresh elements |refresh := nil.metrics := Array with: 	(Array with: 'LOC' with: #numberOfLinesOfCode) with: 	(Array with: 'NOM' with: #numberOfMethods ) with:	(Array with: 'NOA' with: #numberOfVariables).classes := RTObject withAllSubclasses.view := RTView new.view @ RTDraggableView.xAxis := metrics first second.yAxis := metrics second second."Preparing the menu according to the provided metrics"mb := RTMenuBuilder new.mb view: view.metrics do: [ :tupple |	mb menu: 'X-axis' submenu: tupple first background: Color green callback: [ xAxis := tupple second. refresh value].	mb menu: 'Y-axis' submenu: tupple first background: Color green callback: [ yAxis := tupple second. refresh value ].].elements := (RTEllipse new color: (Color red alpha: 0.3)) elementsOn: classes.elements @ RTPopup.view addAll: elements.refresh := [	RTMetricNormalizer new		elements: elements;		fastSmoothTranslation;		normalizePosition: [:cls | (xAxis rtValue: cls) @ (yAxis rtValue: cls) negated ] min: 0@0 max: 200 @ 200.	view signalUpdate.].refresh value. view canvas addShape: (TRLineShape new from: 0 @ 200 to: 200 @ 200).view canvas addShape: (TRLineShape new from: 0 @ 0 to: 0 @ 200).^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleVectorEditing	| view selected statusBar |	view := RTView new.	selected := nil.	statusBar := nil.		view when: TRMouseClick do: [ :evt |		selected == #line ifTrue: [ 			| ex1 ex2 line |			ex1 := (RTBox new size: 10; color: (Color purple alpha: 0.2)) element. 			ex2 := (RTBox new size: 10; color: (Color purple alpha: 0.2)) element.			ex1 translateTo: evt position.			ex2 translateTo: evt position + (100 @ 60).			ex1 @ RTHighlightable.			ex2 @ RTHighlightable.			ex1 @ RTDraggable. 			ex2 @ RTDraggable.			line := (RTLine new "width: 3;" color: (Color blue alpha: 0.2)) edgeFrom: ex1 to: ex2.			view addAll: (Array with: ex1 with: ex2 with: line ).			line trachelShape pushBack.		].		selected == #circle ifTrue: [ 			| ellipse |			ellipse := (RTEllipse new size: 40; color: (Color yellow alpha: 0.2)) element. 			ellipse translateTo: evt position.					ellipse @ RTDraggable. 			view add: ellipse.				].				selected == #rectangle ifTrue: [ 			| box |			box := (RTBox new width: 40; height: 30; color: (Color blue alpha: 0.2)) element. 			box translateTo: evt position.					box @ RTDraggable. 			view add: box.				].		view canvas signalUpdate.	].	view @ RTDraggableView.	view addMenu: '+ line' callback: [ selected := #line. statusBar text: 'line' ].	view addMenu: '+ circle' callback: [ selected := #circle. statusBar text: 'circle' ].	view addMenu: '+ rectangle' callback: [ selected := #rectangle. statusBar text: 'rectangle' ].	view addMenu: 'Info' callback: [ TRPlatform current inform: 'Vectorial editing is hyper cool' ].	statusBar := TRLabelShape new.	statusBar text: 'Please, select an option'.	view canvas addShape: statusBar.	statusBar setAsFixed.	TRConstraint stickAtTheBottomOfTheWindow: statusBar.	view canvas color: Color white.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">exampleVisualizingSoftwareWithBeziers	"	self new exampleVisualizingSoftwareWithBeziers	"	| v inheritanceEdges shape helpBar1 helpBar2 elements eb classes |		"The variable classes contains the Pharo classes that will be represented"	classes := Collection withAllSubclasses.		v := RTView new.	shape := RTEllipse new		color: (Color red alpha: 0.4);		size: [ :e | e numberOfMethods / 5 max: 5 ].	elements := shape elementsOn: classes.	elements @ RTPopup @ RTDraggable.	v addAll: elements.	"Defining edges from inheritance"	inheritanceEdges := RTEdgeBuilder new		view: v;		objects: Collection withAllSubclasses;		connectFrom: #superclass to: #yourself.	"Layout the whole thing"	RTForceBasedLayout new on: v elements edges: inheritanceEdges.	"Defining edges from dependencies"	eb := RTEdgeBuilder new.	eb view: v.	eb objects: classes.	eb shape		bezierLineFollowing: #superclass;		color: (Color blue alpha: 0.1).	eb connectFrom: #yourself toAll: #dependentClasses.											helpBar1 := TRLabelShape new		text:			'Circle = classes, size = number of methods; gray links = inheritance;'.	helpBar2 := TRLabelShape new		text:			'blue links = dependencies; layout = force based layout on the inheritance links'.	v canvas addFixedShape: helpBar1.	v canvas addFixedShape: helpBar2.	TRConstraint stick: helpBar1 above: helpBar2.	TRConstraint stickAtTheBottomOfTheWindow: helpBar2.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleWorm| v s e last lineLength callback nbOfElements head |v := RTView new.s := RTEllipse new 				size: [ :m | m * 10 ]; 				color: (Color blue alpha: 0.4).nbOfElements := 10.last := nil.1 to: nbOfElements do: [ :i | 	e := (s elementOn: i).	v add: e.			last ifNotNil: [ v add: (RTLine new edgeFrom: e to: last) ].	last := e.		].lineLength := 40.callback := TRTranslationCallback 	block: [ :shape :step | 			| diff alpha dist |			(shape element outgoingEdges collect: #to) do: [ :el | 				diff := shape position - el position.				alpha := diff theta.				dist := ((diff x * diff x) + (diff y * diff y)) sqrt. 				el translateBy: (alpha cos * (dist - lineLength)) @ (alpha sin * (dist - lineLength)) ] ]. v elements do: [ :el | el trachelShape addCallback: callback ].head := v elements last.v when: TRMouseMove do: [ :evt | 	head translateBy: (evt positionFromCamera - head position) / 10.	v canvas signalUpdate ].head translateBy: -150 @ -150.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleWrappingText| v el str t block lb |v := RTView new.el := RTBox new	width: 200;	height: 300;	borderColor: Color black;	element.v add: el.str := String loremIpsum.t := (Smalltalk at: #RTText) new "This line is for compatibility with VisualWorks"	width: 180;	text: str;	wrapText;	element.v add: t.(RTConstraint on: t background: el)	stick.block := [ :aShape :step |	t shape width: aShape width - 20.	t update.].el addCallback: (TRTranslationCallback block: block).el addCallback: (TRExtentCallback block: block).el @ RTDraggable @ RTResizable.lb := RTLegendBuilder new.lb view: v.lb addText: 'Try resizing the rectangle by clicking near the border.'.lb build.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleforAddWithEdges| v es elements edges |v := RTView new.es := (RTBox new color: Color white; borderColor: Color lightGray) elementsOn: (Array with: RTLayout with: RTShape with: RTBuilder ).v addAll: es.es @ RTDraggable.RTNest new	for: es add: [ :group :model |		elements := (RTBox new color: Color red) elementsOn: model withAllSubclasses.		group addAll: elements.		edges := RTEdgeBuilder new			view: group;			objects: model withAllSubclasses;			connectFrom: #superclass.		RTTreeLayout on: elements edges: edges .	].RTGridLayout on: es.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampletimeLines| classes oldestAge v elements |classes := RTShape withAllSubclasses.oldestAge := (classes collect: #ageInDays) max.v := RTView new.v @ RTDraggableView.classes doWithIndex: [ :c :index |	elements := RTEllipse new elementsOn: c rtmethods.	v addAll: elements.	RTMetricNormalizer new		elements: elements;		normalizeX: #ageInDaysAsInteger min: 0 max: 200 minValue: 0 maxValue: oldestAge.	elements translateBy: 0 @ (index * 10).	RTEdgeBuilder new		view: v;		linkElements: elements.].^ v</body></methods><methods><class-id>Roassal2.RTRoassalExample</class-id> <category>icons</category><body package="Roassal2-ExampleBrowser-Examples">exampleAddingAndRemovingEdgesIcon	^ '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AElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleAddingNodeDynamicallyIcon	^ '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t8bt/+2frM7BYLwVAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleAligningGroupsIcon	^ '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RU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleAlignmentFromTopIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFeUlEQVR4XuWavWtTURjG76AuOrpVOourH+AkDg5ORR1EcFD8A4p2KIKoYIuCoIhTHV3Eog5+TFWUoovWP0CdlH43bb5zk6Z54n3O6UlvLomN6W0S+jwQbnJzcj7e3znv+56T61Wr+uolefom0AeiL30g+kD0pQ9EH4i+9IHoA9GXPhB9IPrSB6IvfSD6QPSlD0QfiL70gegD0Zc+EH0g+tIHoi99IPpA9KUPRB+IvvSB6APRlz4QfSD60geiL30g+kD0pQ9EH4i+9IHoA9lO3boFTE0B+ji6CKRSqSCZTGJ5eRmeB4yMFJBKpZDJZKAPpENaXV2F7/tYXFzEysoKyuWyeRWLRXPfgSKkmZkZA2xtbQ36QGJULpczBqdx8/m8MXyhUDBG5ntCcmWjq4O/Jby5uTmzevh5Jxidk45jpR1KpRKWlpbMJDTeYjsaZGM0Pmc3r2yYChuUMKjob2n46D3WwRWVzWbNa35+3gyo0e97SRw3+0k7OAB8cQycaLOzs7UrXxy7FxdxNuKM5FaBM5iD8y+jh8W6Gt3nbGK9BMs6+J6rh/edy+u06HLZF9eHdDoN2sONg96BfeT96enpGgyuCvafIFjGTbi2gBw8CFy4UDEdYCXPniEIzNbFuFXAQD06uuGerl4F9u1DS4ZzZZt9T9Cs99KlMi5e9PHoUR7HjxeCTC2DEyfy1WQyY/rz/Hk8K4h1PX1aMmMlABqXRuR3bIPf896BA+Xq5OQCTp7MY2wsgStXchgcTOPu3TTOnctiYiKFgYFsNZFI4fTpXHVqKodTp3K4d6+Ay5cLOH9+rT0gBPDhw8ZggwmA4eF6Qw8PF+pS2Y8fETRcbslALHv/fqU26GZ6/x6gQb59A5g6B4swuLpUuloNPFssQIaGMsEsrzScTAsL9W3aPgBfv9q+sY92PECjstevF03Z8XFb1ovTX0bdS3RptxqUWda9J5Ruxgq6YboX9oOuKG7XGHXPXpyZVPgeP0eDeKtAooPm526kv5xkzAIJgpOE/YgbyrYAcavBBTM3w6MpbXjmbzYro/cIeDMXFqdce65NQmD/OVZOjrigxAKEseHXL6wbH3j1ynb6wQPbybEx+3liwg+yB+DHD+D7d4BlX7/+t/txZZu5MhpichJBzh6/G2OdrJsQnjyxk+zhQ3t9+dI3/f/yxcfPnwgypbIpu9U2X7womnq3BGTXLgRZja2EwYlZxps3Nttg5svr6Ki9XrsGHDkC7NljA5q3SYtHjwK7d6Opi+IqZB3MxOIGwjpZ9507lfXMyX5+985e2X/27dgxgOPyvHgyOBfoe+ZwMSzu6J2r6PWN3446XGzmT13g5/topqYPpINnOy54hjMx7oC5y9cH0kGFT3qjexCXcW121CIP5MwZ4Pbt9v3779/A/v08RinWzn2os2ftLjdc9s8foK+Pp6NZ9PcDnz/v7LjSVSABi7o6mgFxZfv69IE0Db6tbvL+Z/PH+BE9gtEP6i36/a3+WRQFQtfFl2JmtWUgPBKJG0i4vp3yz2BHgLgZHKfLCp95udWiuClsCwi3+kNDwOHD9jiknUbfvkXtaKLR8cHgYDzHEhJAPn1C3YFhuw0/frzx2/Fxv+6ALZHgH2Al/RXSLTX6/6OTR+36QCJiPArHFMYp1QfmvF5ZHeHAziwrvIPXB9JB3bhRNn/+j4z45mGA8IMLN29W9E97O96B9cd19u4FmL0NDACHDtmnNPgokT4QfekD0Zc+EH0g+tIHog9EX/pA9IHoSx+IPhB96QPRlz4QfSD60geiD0Rf+kD0gehLH4g+EH3pA9GXPhB9IPrSB6IPRF/6QPSB6EsfiD4QfekD0Zc+EH0g+tIHog9EX/pA9IHoa1v0F3yNzF9907LgAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleAnimatedCircleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAD8UlEQVR4XuWZCUuVQRSGp5JcU3HJNENBczfXLCuXXHFX3BUVS/3/PyHepsM3M3cSkYLieWDg+vrduTBnzvo5Pnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OFzD2/eOHdx4dzdnXOTk4U+MeG1y0vnOjq89uSJcwsLXt/YcK6hweutrc4dHnr98+dij6Eh575/92tkpNA/ffLPHh3574r6eufW172+uOjcs2dQg+gAwvX6tT+kVBdzc7G2u+v1q6tYlyEqK0v3qKlxrq8v1r5983tsb8e6jMI3yJ33DPOOcMk7jo/zhkq16Wnveane1eXc+/cP20Nei+TkJD6IxkYfPkLt/Nw/qwMN9bU1r29txbqFodvbQtNnGTX1Pn1XLC/Hen8/1CBVVYVX6FYbCl2mv3hR6OPjPtdIN3TQ+lv6wECht7QUe7x6Vei9vcUeT5/GeUtLv4Gmudm57u5SXR7x8mWs6QB1eysqYl1GU35IaW+PDW3o2draWCsv93tjE7pQVWRhYmen0MMkOztb3Pibm9LQ9PZtHN7kdUIhzXRVUHboYZg0I4ahTL8RehQ6qQ8OllZClnhXVvIVUvrs1JRzdXWluvJTrmDIVWqbm3yD/Fyjo84ND+errDR5K1Hn9vj40fcoqS4v+F2VFXqe1v4+1CDWjFkTaElWocd0NYFpWNHq7PS6DBAaSZ4gFALTnkUVXFh9WThMy2QLh0jkEQolYTKVYaS9exc/a2EnTdQ9PV5X8xeiiimtmqyyU7UVYpVdUxO8ylIYUXJXtRUevEYcygcKV4YS+Py8D20hOkh18qqqDHXr8h6t6ur44OUZYeksZHztLeNiUZgKQ4UOTiVtqF1fF6VqqGuulYYmG7/kcksu7O3t5ccyKi74Sf2e0YnC2enpw8Ye8jYNJFNd3iWPe8geqrr4Bvk1b8odppiZibWzs9IRiZZyhvqNdA/ljrGx/N7pnEyhC0lbW37C+vVraQgSKkftBlsCV8NoRgn7B4Ud2yMcv6tqs4rMGkDlG3sNoFE+Hz7/BkqydrtVbRkWWvS/sCew261bXFZW9BZ2u5eW+Gf6R3OI+guFkVyctzd9tiy06I1gqIfhic9fqrLUKD60yvryhX+ujyadISn8aJSem1np5of66qrXDw7yIxU+j+D5c19RadakiivMLWr41PyF7z7UTStUffgQ7yOvkJ57r8KHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHD5//mx9m6Vpqr6HZGwAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleAnimatedDotsIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleAnimationStartStopButtonIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAB0ElEQVR4XuXVsWrCUBiGYe/dzSFkl0CmkMXFTQUnQRK9Ae9AEG9AzK89KbTQQjfbU54PHDwu4TyGd/J4+MtpE/8KfBB/P4H0fR+n0yn2+318/bFt26jrOu73e/hX9Usg5/M5qqqKsixjvV6Plz8MwwiwWCwioRyPx7her+NZ0zSREP2rexFI13Wx3W6jKIqYzWYfb8Nms4nb7TaeJaD0fTqdRgKZz+c+iN8QH8SfD+LPB/FB/PkgPog/H8QH8eeD+CD+fBAfxJ8P4s8H8UH8+SA+iD8fxAfx54P4IP58EH8+iA/i7w9BLpeI5fL9s9tFiGdZgaxWnw+YPuJZViCHw/cH1M6yAom3pYdM/5z0OotnftT9qPtR96PuR92Puh91P+p+1P2o+1H3o+5H3Y+6H3U/6v78qPtR96PuR92Puh91P+r+/Kj7Ufej7kfdj7ofdT/qftT9qPtR96PuR92Puh91P+p+1P2o+1H3o+5H3Y+6H3V/ftT/X4SzBVEjnC2IGuFsQdQIZwvizwfxQfz5ID6IPx/Enw/ig/jzQXwQfz6ID+LPB/FB/Pkg/nwQH8SfD+KD+PNBfBB/PogP4s8H8eeD+CD+fBAfxJ8P4oP4e9meacybRQbJVu4AAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleAnotherTreeLayoutIcon	^ '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gg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleArcIcon	^ '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AABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleArrowIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAFKklEQVR4XuXa20+bZRwH8DeZXmy72Y033vgXmE3RcTEvvJjRmI0sMTHgjQkaJGbrJDswI6Q6Ix64YAnLSEtwcQQZ4TBoDDAPVBAYh25jcoaV4UopR0XAAqX9vr5PyVv6tm9HW4pgvt8nv0D6vjTwfHif533ep5Is82cvReLvAn4Q/vCD8IPwhx+EH4Q//CD8IPzhB+EH4Q8/CH/4QfhB+MMPwg/CH34QfhD+8IPwg/CHH4Q//CD8IPzhB+EH4Q8/CD8If/hB+EH4ww/CH34QfhD+kIE8Sv8MNilJFvX7cyfgXVgCP8guZfpqRQBDrZ5njvOD7FbuK50fCiKKH2SX0n84jR9kL2Xhx44wkMFX3uMfsnYVpb4Njw35GH/xFJxGE/9d1m4HbW3AnTvA+jrQ2gpYLPxXyH8KoHS8/+vYGDA8DJGwc+rqgOVl4MED8IPsNEhlJdDZCXR1bdnZWFwE+vqA6mqgvx+YmQE/SAKzVFoDX1YWMD4eU8fC6wUuXoQ3+xImeufBD7LNjNf1wLzvA5ikDFlUd25dbCBKrqY0IkMyyaIuH6nC5MCf4AeJI+srngBEcDmtQ1F3aHHqzwEMtb54qYYfJJ70FjbpgtiMlqjfIxRDLX6QODLZMqIP8mn0t7cXni0FP0gCU/NyngbF/FQmPEsrUYMMWZ1hGOVnWvmHrLjnEfcaxBD1y/MGdOXUYrrrUcyd2f7dMMoyW2B++ydYjDbw32Vtd/0hVuMdHUB7u7/ieo+SEuDWLf7b3m1BtLQACwv+BV7gNZcLmJiAWF9E9R5iUWi1bv682Qz4fPxDVlwgdjvQ3Q31kYnmmMMBP9jNm0/sXLGqF+cGP35BbS0wNwd+kFhW5gteTKekAwMDETtOXDme9AwM/KbfuYMtw5i9diPs2GpVNcbPf8IPEvXa4dUhJEk2WS2bdVH3vORkQFL+CrWamzceNjbfXYSUZJPVSn53MND5JwobIGWYZLUquh+CH+QJKSuY0mCoFZrsbC2GWv4/LAhDrUuFDtTcG9NgqLXi8YIfJELOvDGiC9LXqf1Eyf79sYEcOHYXRotN1gP5urGHHyRSCs45dEHcS9r/4pMnYwNJyRoVILpXyL0/ZvlBIuUfpeNDMcScEnqe2OoIxUhL25hDUj+2IxSk3+72H9uXadagHM2r4Z9Dtop72YsrFxzIPdqIymuRN5acTsBgAFJfn0d5uXb3sKxhHqfOjcKQ/xiuOU/gmE95HJ9T24XXCn7Alw33wX+XFe0apKhoY598bW3r3cGmpv/1XvqeBsHkJGDbfN6k7o1HgvGfr4CIfXR+kJ0AOXsWmN/caoXbDZSWAsXF+iCNjcoYlMN/hexE7H/PwJV1OmyYQn09Rr45jzWfJ6zjZzELe8VX/CCJTJvrIQ6UnIZkypBFie/bp+z+Ts6dKIJkS5LVenPE4H99FatIVpokb7bbuM3/uaxE5HDl5QCGWkeqPodjbVqDoVbtX7/ifaUFY6iNHyQRv0gIhlr5rhu6IEanST6Ig/wgO5VD18+GXSGHrn+EXveoLsiVqe/xltL4QXYoVudQ2NUhXhM5PvyhBuWF/nf880Qf+vC00oIx8pDHP4ckKq0u5VmTzSKLEpN88LG8yW8hhilRPmzu9jnhhFHeaOUo51+H8IcfhB+EP/wg/CD84QfhDz8IPwh/+EH4QfjDD8IPwh9+EH4Q/vCD8IcfhB+EP/wg/CD84QfhB+EPPwg/CH/4QfjDD8IPwh9+EH4Q/vCD8IPwhx+ELf8CoRrNZjC/o6EAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleArrowedAndLabelledLineIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAACf0lEQVR4XuXZ3YtSQRyH8QPiS0q+oK6ix1fwbdd1u3BR0VUQsRA2iLroogOxhHSVFBEERRcSLCh0ZRd7sYW3etOl1GVdebm3C3YRsftXnM4IQl120c6J58MMczyeq+8wDL8ZhY+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4/vf5NIJJq//47FYnV+KhI1m81XvV5v0u12x5qmfa7X6y/y+fydWq32jJ+OpBXi9/uzPp8vHQ6H98QKSSaTrUgkss9PRyKHw3FtMBi8Ed1utzv4iUg2n8+/rVYrXfTZbPaVn4hkm8n4OZutR34ikk2n04WYiB+LhT49PV3wEzGBfr//XHRNUTR+GiazvW58phE2mlEh8otEs60Si6JY+EmYCH8/kUgcm3i93lSpVHrgcrm2RBVfrVYHR9nssVHF3xDfuN1u1ajiy8b7p0Yx6eWn9o8nJB6PN1RVrVYqlSfinCuTyfSM8fX+zs5D8Y34v1wuPxbPTqczwE9NgmKxeP9od/ed2E+sVqtTdJvNdp2fjGStdeMzlXvr9qdQKFQSY6FQuMtP6IqJe5JbBwdvG43GS3FM3+l0jsXmHwwGt8W+w0/oihnht1KpVDupqo1cLnf7Ziz2yOPxJNLpdCcajVb4CUnStljaw+Hw/afDwy/8+xMTWC6Xl5eTif797Ew3ni/4iUi2Oj/XL05O9M09Cj8Rycbj8cfNZIxGow/8REwgEAhsic5Pgo+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+P76/8Al/ZjWaoPOt3AAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleArrowedBezierIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAABCUlEQVR4XuXRIQoCURQF0A8iDGgSwWCTCTpBTAb34Tp+NAjKiLgBbWYXNGifJVjsyjSxOQyInAMvXG67L/h8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/lIaZpO/BUa0ArtpIlcFMU9y7LZZ+/7wiCMFpt4uMQYt9Wt4vpUN5dl+bwWt8e4M1/6y9aUhG6/F4bTJnL1kP3ucH7vfT+U5/nRX8Hn8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n+/vvADh2zp6vpL8RAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleArrowedEdgesIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleArrowedLineWithOffsetIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAACLklEQVR4XuXXzUpbQQCGYS/KS/FSxGuJWBFcWEGswUXBlSCCYrEmhILgLm6kiy6sujDw2Tnxpw0UIQZOTvK8w0BWWczDzJlZeHrya1IL/hL4IH4+iA/i54P4IH4+iA/i54P4IH4+iJ8P4oP4+SA+iJ8P4oP4+SA+iJ8P4ueD+CB+PogP4ueD+CB+PogP4ueD+PkgPoifD+KD+PkgPoifD+KD+PkgfvMGcpObfC6jVcb3MnyQKbeXvSHG6/BBplw7bR+kaUfWdhn+kdWQ8viYLC7G/6g3BWRrKzk89EEagbGzM4TIw4MPMnWM/f3475BpLX5+jix+Dg7Gxri/T6rpg0wE8SvJpzJbZX55Pp6Oj8de1E6n/EPreXa7zUZpOMi3F4yX+bsz9mLm7OwN43X6IB8G+TEKktuxFjOnp0m/n83NvxjVbx9kIpRy3uRrmf0PYVS/B91ejo4ynIOBD1I/4j8Y6fVS5d+yGoaRdjvZ2EhWV/0dUgvE7m7e2xm5vExOTvxrb20gKyvJ+Xm5KZer8v8wLi6SuzsfpBaMq6tkefldDP8bUhdGeWe83WmXlsrTpbxdrq8zixjzAbK+PvLqm9WdMZ87ZG0ts4wxX9+Q6qiaofcG9TD0Qfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/CbqDwek5Kyq+eWvAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleAttachPointIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABAklEQVR4XuXRAQ0AAAgCQfuXVmMwju0LcPNbv6j8E3wQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H8QH8fNBfBA/H8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8/wAfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fJDuDpK06ys7QL90AAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleBezier3Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABuUlEQVR4XuXYTYrCQBCAUe9/AlHQhQu3gl5D7+BKQVzIENObKScZRok/26GTfh/kAnkk1dWj282vT438V+CD+PkgPoifD+KD+PkgPoifD+KD+Pkgfj6ID+Lng/ggfj6ID+Lng/ggfj6Inw/ig/j5ID6Inw/ig/j5ID6Inw/i54P4IH4+iA/i54P4IH4+iA/i54P4+SA+iJ8P4oP8W3E8RqxWEbNZxG4XPkhOjMMhYjx+fjab8EFygbRfxitI8/gguUDa35QP0iOQ7fYdZDqNqqrCB8mF0syMLkacz78YdV3H09Cfz6MF9EFyQTWl/f79C1qvwwfJOPTTYlHUjBk2yN/Q/3o5jfkguUCaRfGOcGl+Vfc544P0ZOin5TK+T6f4uOkPZOgXd5eVUorHCezTpt/zoV/k5WJ7ArterzHETb/o294hbvplg3SGfne59EH6sulPJo9N3wfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQUrvB3WSZ0g6cvlUAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleBezierAndCenterOfObjectsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAHNklEQVR4XuWaW0wUVxjHZ8FdFkFYuSwL7HK/LSCy7MIuBARBuewKrIhIQRABIZbAVrSUXikJiTXyYFGjSUs0prEPTfqg1b7YxMQHExISGjE8WO1LkyZ9aGKb9KXp5XwOkz0zDCug9sL/l53MnJkz58D3zfluMwI++OCDDz744IMPPvjggw8++OCDDz744IMPPvjggw8++OCDDz744IMPPvjggw8++OCDDz744IMPPvjggw8++Py30esFwW4X9/j8w8THC4LHIwiJif5zx44JwsCAuJcwm8V+1B+fVwgJXtr8CnG5pqblClHrh89LICFBEHJy/O39+ysqTp8ThK4u3mS5XN0DcpPV3S0qyev1n6NxaDx8NkhsrP8pLyz0n4+MjIuLkwnW5XJV8e2kpKQ06uc/Q/dLY9G4+GyAuDgSYGvr+SuCkJsbSAHKdllZWbV8rNxcr/fjWVEhRiO+bDeM1SoIRUXR0dHGQAJXKqSgoKCYb5tMJjONIzd/+KwBh0N8iqtkAs7IyLBmZWXl8ecsFkuamkIKCwudfL+dO3eWJCYmJsvnofFpHgqX8QkYRRmNo2+qRUfKVcIrgT9Wrh6j0Ri/nnnwkWGzkZDy89sO2+32MuXVtra2Pum4oqKiVk0hvLnq7e19QzlGUVFRWV5e2+GVwQI+AUlNTc0i4fHnghjZ2dk7pLZOpwtZVlQv7XklshUVq6aMhIQEC750n0t6umjPdTrlFfIBkZGRUZyPKOH9CCklNjbWRG2DwfCsX35+flFeXp6N76e24sT5aN60NHwdqGbg9fVqV0kJvIDr6+tbyNHT8e7du91sp2G+o0ZaJbm5uYWcCXOoK4NoaMDP6FdRiMl0ciwzs7MnMzMzj4WpiSufZZ3O6XRW0rHb7T5IvoIETf6DVhFbHdG0UqTVkpKSkrEyuhIxm80pZBKzsw/30rz4ClEtkfhD0G3btkWWlpZWk2KYgmRJ4ZEjR4arqqoaTp06NVVcXFzR1NT0mlar1Umrgtp0PwldscpcpLTq6mpPaGjoVv8VmneTllRinv1eLlsYs7OzX7GI6cTly5e/pEhrcHBwLCQkRN/c3NzR3t7eT6uCwmJSlHQfux566NChPo1GE0T9oJ5vA/uxMKeXjDGr5nnXdzeVyOkpjY8n503C9vl8E319faMXL178YmZm5vPr169/c+fOnaWjR4/66I6oqKhYOq6rq2uh0Lampmaf9NQnJydndHV1vR4REWFY7/ybRiHsv7GTMqaczulrPt+N93y+aRLq87bJyckLc3OLT588efIX2/58/PjxH48ePfp9cXHxl4WFhZ/n5+d/unv37ndXr179mvHtgwcPnt6/f/8Hao+NjZ1eyxzP367dcDqV5fv/e8WJ/bgXEAPhghC+JhMXExPX2XnmEgnF57vw2dTU1KWHDx/+urS09Nu9e/e+n5ub+3F4ePj9s2fPXrl9+/bC+Pj4mdraWi85a1ole/bsaerv7x9lYe4LlEDa28U/m/abCJat7agThDpWxTOv/271kjiLqnaNjIx8cPPmzflbt24tDA0NvUNOmUJdZpaGyHd0dHQMMnMV5q9SVbmZKdvPal/51PdF5sdnJRrmkDtpo8bx48fHJyYmZii68ng8beTEKaqia1R8zMnJKWhsbGxXhsvUt6WlpQtfnGv3QnZ6G0juejnPaFUTIGXglI1TxMWEfJDqWZSH0EqhomJwcPAW6kdJI1/r4iEFer3eTrFF89G8VJrHR1oEGrLhyclvvet2f3R+tV6UR0gJIxP2XkYzJYd6vX4rJYwsvNWwyGo7X3632Wwuh8NRvtqYTU3Tl2he0YfQ34HPMtKXI2WqJY7u7u4hvl1SUrJrOdfQM6GXSiUS6Tpz9Cf5/pSPqM9L8ym/WMFnGa1WeYZyCuULp4aGhlauaJhK+8rKymc1MIrAuKKk7K0hrSb1dyMr58VHhuhHqD4VFhYmC5/JBEnHfPlDUojkQwhmykKZQtPlI0fFsCJlET8PPgFpaSET0tx87hN11++v2rLsvFE65l9Q8VGW8t26BBv/U9FUkUPHJwCrf+DW2trao4yW1BTCmy2C8pT1zIOPDBMrndfVyT8VXf1JV1MIq/yu8Alk/uRnaHyax2TCl/m6qKzU6z2NFktSmmJ1dKymEKXZItLTM6xardtD4+HLdOMVMiuZFIPBd0L5uU55efneQAqR3h7y3mf7dt+oaKKsVnzZbojwcH9+IpXGTSaNxu4IDrYkBVJISEja8jt6ySTR/VK+ERaGL9sXIijIf9zTY7dPnpE746wsl2uEvYbNzOSdts324Wnqrz4OPi+JAwdEZfCCHhgwm998W64kuk5t6o/PK0T6bCciwn9u3z5R+LSXoOvUDz8L/5fAf5+BDz744IMPPvjggw8++OCDDz744IMPPvjggw8++OCDDz744IMPPvjggw8++OCDDz744IMPPvjggw8++Gxa/gaxvt0BZhXIeQAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleBezierCurveIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAABu0lEQVR4XuXawYsSURzA8ddhOwwxYwkxSx2dAQ1UHLPN2GQVD2rQJXLxJsF27P+/pezBU9ghl198PvAuwzt9H4/hvZnk8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8/1BVpdQ0focQsiylh4fHcXvr93hCZVm+HQwGk+12+6Oqqt7j06ur04Lc3PiVnsB0Ol0sl8uvf56R5ynVtV/qwnq93nA8Hn/ySwQwGo2mh/HRLxFAnuetfr//3i8RxHq9/uZXCKJpmqlfIZDZbLbyKwRSFMVLv0IQi8Xii18hkLqu3/kVYr3Q/UNgJPv9/pdfIZDVauWfPyI5XCLO/QqBDIfDD36FQE7fOHwhZFn2wq/g8/n+A51Op+tXCGS32/30KwRSluUbv0Igm83mu18hiFar9cqvEMhkMvnsVwji+YF/IAzi2UG73X7tl7iYu7uU7u9Tur4+N/N4kdjtdgd+s4spitNPz/P5uUNgnuf+zwyXd9wdxwU5v0N8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/vr/wGmY0mlw5w+SYAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleBezierIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAACcUlEQVR4XuXb3W/SUBjH8YPIqFHREayhikDBUkbLW+2kkAUUEl9ivDMh3K2JmYk323/hpX+yPUYTQzagCOzA93NJS6C/59Cn57QIPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+OF2Uey+E+4mfhCKOheE8Fyfv+Unw8fHx8cXhOE7Xdd1XYRhedjqdwDTNWjqd1vjJ3GJB5l/zff+sVqu5/HR2LJvN5hZtb7fbr6NfTY+f1I5MJpPPy/aRpy/btpv8tHZA9oxV9221Wn6lUrH5qW1J1COcuO/pdrtB1HM8fnprSIrUjVdKiUTizqnXG6/Zd55EV2X8osTxVJj9RWtT388vf/zv2tVgMBjzk17RfXFcyIpn1zZiz/P6i7bHEQTBG37aS2QymceWZf3uD8VisTrfmDf9ec1m00+lUkf85Ofoum7IYvx7iZrP5wvheXhVrVbr2xzNsvCyt/Cr8IcsghypcXvJJpVKpZeRE3Qh5Ey6Xq/f2As08SC3iV6xKsMwCsiZvaZp96JT0FtVe5gcKJhiRJOzftQv8krPgZLJu+tMPPdrohcd5HA4/LBP37lcLlsHOeOWSxb7OuIOamHSELXxty9XP/f9OEaj0cfDaN47vkrapul0+pU/QVGMvE3MT0Exs9nsgp8Cv6fwLdNoNDr8FBTDvyWsoOhWQeO6R5H4bhH/cSNFi+K5p+OHImfy01DEmf0u5P9PRSFyZeKR0C1+Enx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx//QL7WkIkODawDAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleBezierLinesUsingObjectIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFc0lEQVR4XuWdWUokQRCG6xpexZt5HS/gkw+CIIgP4oMgCor7vu/7Gj3+DdkkNd12ZVVkVmT/ATI6bS+VX8UemRadDr9YkoJ/CfiB8As/EH4g/MIPhB8Iv/AD4QfCL/xA+IHwCz8QfuEHwg+EX/iB8ANpR3Z2duTr60v4gRiRvb09WVhYkJ+fn8pQHh8fBbKxsSH8QAzJ4uIiPxBtOT09lV8t6dzd3UmAVnW2t7eFH8gQWV1dlampKQk0Wb2vEAHAEIiUQI6Pj7v+IOQ5Z2dnXQ2BX6j6nIeHB3EQLUOh8SEvLy89ICEg6YDgbj08PJS3t7foi4T3ABh+k1XBH+zv75taqMvLy+7nWVtbEzYgXVPiFsCSbG5uytHRkdD5ECRsHX7hTAxDzdbV1ZXwAzEgv8FGz78hZM4aCAp/W1tbgsw4VyDPz8+9MPnz81Oy15Dp6Wn5+PjI2jd8f38HFTDNAkEmPTc311laWuJ31lY0BHYXdphfDABBRuzs7+3tLb+WtA0ETtABubi44AdiwWTBoT89Pcn7+7vAp7y+vo4UGBQokafgGrPLQwAHmnJzc5N95OULrml2dlayTAyhKfjCnYUYHyFlzjBgjhFFaudaRepkC1AQgblSeM5gEEVqBy3JSyf39/fd6Q8HBIlXjmDQx3GBC64pWyAQ5+ChKQDhfgaYXHyMX1rRbHq1Vlx0HUL8CwEUBwMXa72z5/yi9g3UGAjCvjrdPuQqzkwBCi4O4oeRgAI4/HlIoKyvr0vdO8x9D1/ifoa2+HkLwAFayqrryCWGVaXca/AnQqAd5Wor/m+UtaYxEGSrcGyYJmzqT/pBQW+lnz+BeQMY7Uw5eyB1pwjLmXy5r+58ih+ZDRoVAjQ8NgqaU2iYHI2pkX6LiUUuRzH4vb+GIgAH8CwPw5n2IX+ZLt+h91v0Ya8HcAADkxd7P4lW+FtYi+tDYJWjsSqvj9cBJO3KQOh8chZABpmuQRGZn6/UWWDc1Xg/QGo6yjo5OanSfzcHBGbmL/MyyDdgMTScOuA6zWujWmByLmvYQpRNm0xMiIyPi3tMuxkG2NBOVypBMdH/DH5dq+kUZmG5TjTscWciZGxMOkXxn39JMVEPwXSjVqHRLJAqF9YvLO73OrEjLPgvDGVrzA+oAIk1fzVMS/ykcJhfApgchrpVgMzPz0tbWuJsfFV4I79hBxeJ4YVYHzDE3FSB4kyd1SmYIuWdrJW9a32W0MQyCyDYRRtzS1qdZCt0+0DKiCw6EI1qb5PsfZDUGTyAdrXdBCs0TAri8JiqX7fnUbfimyJUzi4PaeLcm2qXD+Yvk4lTKDAmSwmkagSlERj0y2H6gTk4OBBaDWlaOGwCdBgYSiCuRNHk+RpNJDdDBjAwV+fn50ILRCPfKffq64q/S1dzvjcrIFp9cg0o/i6xpuYwCRAcpae9d0KzOKilKdQ+xGXVowwlOyCa5sEilGhA0KxB00Z7uiPGvJUlKEWsnME5PO3SfKyShhUoUYAgRndAYox3xlq4cp4CDU99jleWpwHFHLD2oeDowdQn3WUJJHbvwgUOy8vLycvxWQJJsQ8R4fX19XXU9rRJIOjuhdppzV2vVUojKSfpWweCY5xmZmakzVxkkJ9yQFLuDG4dCCImnD5n0TTCf6TuHBYWSiGolqY4OABH0loZZjALxJkFhJgB9l1WVlaCFxaHIlvfWWUGSEhvGk2hOkBykNaBIKsPvWsBBKdOh74XoJ+cnJie8c0yD8GChk6a+4fFWD4LMksgu7u73cXF3R6STDoglh17rn8UzORfVKAF4kLlUTz7hP/sd34g/MIPhB8Iv/AD4QfCL/xA+IHwCz8QfiD8wg+EX/iB8APhl1ryDy61TE1yL2FZAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleBitmapIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADKUlEQVR4XuXZzSu0URyH8clLNvK2UFbKQrGwtreyEBtRdnb+DCmxICkriewoG1aUslI0ZjE0qxlqzDQLJU0z8jpf928O5vHMjCzmnh7PddUdc8+Z0vl03+eeIyDx+5cK8KeAD8KPD8IH4ccH4YPw44PwQfjxQfgg/Pgg/PggfBB+fBA+CD8+CB+EHx+ED8KPD8KPD8IH4ccH4YPw44PwQfjxQfgg/Pgg/PggfBB+fBA+CD8+CB+EHx+ED8KPD8LvvwB5eJBOT6WNDWlpSVpZkfb2pHSaD1K1cjlpe1vq6fH+6oA7Ghultjapvr5wbmzMjeWD+NjRkdTU5CZ8aEg6Ppaen7+OsXN1dW7M3Fz+VNq7YpLJpDf0mQ9SsdbW3CT39krxuLS/L83Ofj92cDCPEQwGdXZ2plAo5F00OT5IRW5TNsHDw+713V3h1lSqnR333uRk/sowDDsMhg9SKZC+vsLrqys34XZrKtXIiHv/5EQvLy/5K8MwotEoH6RiPT4Wfp+edhM+Olo8bmHBvbe8/OV0IpHgL+q+NTHhJt3WkGzWPe6urkrd3VJXl3R+XvQRu3XxQfyqocGB2HeQjo7CenJwUPYjfBC/F3g77PeZGamz073e2uKDVL1YrPgJa3fXvW5v54NUvfl5N/nj41/Pt7a685ubfJCqNjXlJt6etP7M9rDsfG2tlMkU3eb4IH71sS3ifbcoqr/fvWdryu2t9PQkDQzwQaqyoJfKHoFbWgpj7Fhf59+yfOvy0k1yTU35MXa7svXFrpbDQ/4a4muLiw6kufn9y/ujUqmU92+Rh28/duftff2mbZPfA3J/L11fv9+9cp+7uPbT9qxKdXNz8znu4uKCv5flVxnv1vSxi2tHzPt+Eve25f8+IpEIf7e3Wp17e1Y2yeFwuOyYrLfQ2xg7rt+vLj6Ij72+vv7g4Sz3o3F8EH58ED4IPz4IH4QfH4QPwo8Pwgfhxwfhxwfhg/Djg/BB+PFB+CD8+CB8EH58EH58ED4IPz4IH4QfH4QPwo8Pwgfhxwfhxwfhg/Djg/BB+PFB+CD8+CB8EH58EH58ED4IPz7Ib+0NJ43wr9GLX5MAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleBlinkingIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAaX0lEQVR4XuXc5a9kxdYG8POvkPAN/UZIIIQECXzFA8EtSNBBBveLDe7u7gzu7u7ubgODDLLn7V+F56TY7+7T5zBnLszdnXS6e++qVatqaT17dY3Nn9//17/pNdb/Jei/QPr/6r9A+i+Q/r/6L5D+C6T/r/4LpP8C6f+r/wLpv0D6/+q/QPr/6r9A+i+Q/r/6L5D+C6T/r2kXyK+//tr8Om9e49X/5fgXCOSk//ynOXzmzPnffftt/wWyKAjkyy+/bJ555pkJhfXcc881Tz/99Hibc8455y/tX3/99eb3338fKfAnn3yy+eWXX0q7J554onn//ffL71zzYtF1n9dee615+eWXm5rGW2+91Xz11VdNV3uvzz//vPHO748++qj5O3PV/qWXXmq65jGs/zXXXPOXew8//HDz5ptvNt99910zqRhyySWXNHPmzGk+++yzZtasWc2BBx7YvP3222WBX3nlleabb75pMHb88cc3mfzmm2/efPjhh43Bs2Cnn356s/feezfHHntsGfyxxx4r19AwKe1PO+205sorryy/X3311ebss89uzjjjjOb7778v7Y2pL5p77rlnc8EFFzQm77v7t956a7PGGms0Tz31VHPeeeeV34TzwQcfNH/88Ufz448/NrfccksRBr7NBz18bLDBBs1U56o9PrU57rjjynzRx8N9991XFOmYY45pttpqq8KrtbnxxhvLfC699NLCn/vo4+Hyyy9vFmpQJ4i2xj3//PP/Nddo4T/++OPx8SzoIp9lkfjXX39dtMabeZMwDbn66qubTz75pGige7Tnp59+argoC0HyrqHjtwWxSL/99lvR2BdeeKG0Yx0//PBDue59//33Nz///HOhja62TNvY77777rh506jbbrut3EfH9Xfeead8d+2kk04a51d/tIxz8cUXl7buhXff9bv22muLlRibVruOv7vuuqvwZt76WBPuy72sg7aZFz7NgQUZWzt8uGYd9DcH7fTDFxojBXL44Yc3t99+e8PUmPFmm21WCJ911lnNwQcfXEwPoTvuuKPZcsstm6uuumrc/J599tnx2OH33XffXRbilFNOKS7FYp566qnFbL/44ouyAHvttVdz0EEHFTd38803NxdeeGGhcf7555exvU2QKzrqqKOatdZaqxFvuA/jrrzyysV96LPT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rkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleBorderWidthIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACXklEQVR4XuXYwaoBURjA8YmFlTyHslSEkuy9CllQUvIsFhZSs7YgkWdQxFNg5Tt3ztyOzGbOOW7d1P9f32Lqc+/M/GYzEyjF75sK+LeAD8KPD8IH4ccH4YPw44PwQfjxQfgg/Pgg/PggfBB+fBA+CD8+CB+EHx+ED8KPD8KPD8IH4ccH4YPw44PwQfjxQfgg/Pgg/PggfBB+fBA+CD8+CB+EHx+ED8KPD8KPD8IH4ccH4YPw44PwQf7c/X4XlzH7q9VKXMb8ZjKZOM3xePTa3+/38f5gMBCXWa/XcrvdpF6vO81isZDT6SRBEKggOlDb7Tb+h41GQw2HQ+tMp9N4v1KpqG63ax19Uc/nU3z29UUVCgUVnXDqlEol1Ww2Rf9GX1Aul0udbDYb75l91/Hdb7Va4rOfyWR+96/X6wuk3+8rfWwbA6Jvnsu+AXHZv1wuL5BqtWrdn8/nCRDbfq/XS9xg274+50/2DYhtv1ar8UH4IHwQPggfhA/CB+GD8EH4IHyQLwIpFotqNpulzmg0SoDYXjo18vsNtu3rl9lP9g1IuVxOnXw+nwTZ7XbyeDy8PiVEN81r/3A4eO1vNhulPz20222nWS6Xcj6fnd+Mx+Ox6HNy3e90OqLPyXU/ekBUGIbOfz96SEQ/5PEx/3Me/2svPz4IH4QfH4QPwo8Pwgfhxwfhg/Djg/Djg/BB+PFB+CD8+CB8EH58ED4IPz4IPz4IH4QfH4QPwo8Pwgfhxwfhg/Djg/Djg/BB+PFB+CD8+CB8EH58ED4IPz4IPz4IH4QfH4QPwo8Pwgfh9w/9AEtPZnpjvs3ZAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleCellLayoutIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAGcklEQVR4XuWbe28UZRTGX2KBtuCNxRabBtKyLZsWWqQtFAo7XEqtVErFFipKQancjNQiWRNdWVQMmhglxhhJCImE/zQxUUNMjH4Mv4Hfw3Pkee3byc5259JM6/NLTqe7M+/tvDvvucw7hh9++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++OGHH3744YcffpYduwO+f1PkYsC5rb7PJ0We9n3XJ9Jdpuw+kdMi2Qh9/TTk9a+mpNOuMuObKqM3pV3/nBK5JzIrclmkIHJfZELkjMh+kR0idSIjON+PSutFJn2V6vnfUO9HIj+IDON6206TyGaRvSLjIkWR7SKDIldF1pTp7AcieZGf0MavIRXzTkoTksf46h3dlqA3OxbV9Ysi27RAm8iQyBaRHpFekSMizZCNIq+IjOLcLpHDzi++w9eBAZHXUG8f7oIs7j7bTg2Unsc1ehzDndURMLCd6PQw6joVUjH9KU3IJozPQL+qWw/9sWNRPW8Q2cO/SPPDz0JchZyAQXaXnri3aiU2LlK9SktC9SS9ZFm8gPGv8ntCBvbiJoyNiej9qJH6XOQ6bMMt2BV7rgSj/DaMeq6KekdQnw7uPXxWQ/+Jc+4Y+j4j8rWv/DjKfQb78wd+hG7/1Bk5j7JPJGzUrzn91PHfcfRxA3074BZUg3tIpBUGO+odoo1m4FVt9jkH9px+PgfDP1ZlvR7q24RyrnPgOW3tgvFUI9noK38IzkkW7vYBX//yqNtfNqk7xPbTg+fq6kPbPM6/YPPDTxi2BHzvN/hJGOewrECgahbZ2ajWKYhCC5Ynu3wFBlw7ccEs1tV9CO09BC4jCGRyMH7tiOA7oaQVTn318Np2JzyYD0UOxijvYVx5Z7zbYCs9Z8wnYdjPJtTvbgTSPTDcHtooQa8juBFsH/6NHNXir4cnotHwF5iAfqQ33kVlk0iHfAejbaCklU4HcpiUlQlPyCA8FC9i+ecxrrwz3lqRBuecjvcKxvs9zsfltKOrK04bJfz/FTxa2wd++OEnFHUxy7tG/qllrIcGLG9+J2CD73Mrjmozn63gGDVX23AnKrNB4Qv4XAODtyrCWq/lLmHt1LR6L44NMRQ0CQXtQPCnbTwHm+LB0WjDdTlkHtZFLN+N6zSifwxOi4cxTKO+flxzEfaoExH5UTP/eZAdfwE6zTtt2nNDTqbkP0NjDfhRVHwTBjzsHVNEXX9jQjQt8SM61BVjQk5gMGr8/nSM4104JhqBP4QRVUW/HqP8A5ELmJBWRNNfwlu6BEX+As9vGnfGQaRARn13gx3/bej0Fgx6yTlXRB9WG/vHweZw1idw29u6ahNeTlwPLuO0UYc7OhOzvP+JZyNyTk863631JQXXVWivtoJOa4OSi/zww0+QES4kWN9hOAVqWGewbmsb78OQzUSsNw8bF4c0HuOedbIBapfWwL4F2uZ7CU/IQ3gqP+N4DW1YwzUVsd7HY0ymTWE8SGFCJmDoNdX0MSZl1FRhcJJi7QJt1JCtQH0YfzlngR9++EmdAgxYN5YnDZqGYU/acU0OwdU4ArEOGOx63NYtSLtMJpjW0ZTO5RT0oc7IcUTyBtmAEvrShExABwLQ3sWaEN0soHn+Y/Ao7M5FTVmMmbm0t32GfA5Ha/SLKO86ADqQOzH7ltaEFPF/CR6o3bl4Gz9Mu2Hw/mJ0wN252IOUQhau7yx+EXZzgk7Mdaeze5GusJsNBhN2W/tM9OcpUXE3OazGj8JDKkfTOFvN3CaHDP8Cyw8/YdDU+3kT7fUANwB72eD5cML4n0Vk/69e0QSOuhNwCEZoP74bD1mfelXfiryRcD/PwM54Zu61CO2n3ZRQcLy2oJROGu+IdCNbUTWDMKT2IdWQmXuIsseE3z3ShmNzwgNTt/AGnAZ1FrrQT7tbcQB9rbTNZyilH33orVK1y+RujrNfqonfIvGzJBhArOE3vuXeMbQxQabC+psU2ZSWrPxScBI0Uv/GPNr49TsidU2d/2Xmv0Zgd75rWuEtBEpTKD9t5qfb474eUFqs1MQCFJfCHWIjdftqQxaGuNxrBM+YR1s6G3HddidS7/HV/RIUGwUvhSh9SUwIP/O5wK8Cfvjhhx9++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++OGHn5j8A9TB373eT7gUAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleCellLayoutWithCircleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAE50lEQVR4XuXbbUgcRxgHcFOMxoq2Ul/S6BnPpipoowbfuaRJQ0BBBV9Qg1grWvAtSgWN2qKiGLGo1BNLiAVrlIpB0PZDUQ98g6JWEak5fEnUL8mHUigUGpJ8SJt5IAvLsLO3K1e19//BwLH73I47z93NzM7ohA8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OGTq66ubh4YGPipra3t25SUlGxRnMFgCG5paTH39PTcj4+Pv6p2zd7e3h+UjsfFxV3p7u6+r/Vva29vvwuTiNjYWNPBwcG/fJmYmFjmY728vN7j40wm0w29Camqqmqi9+J/DRQoJUMqZrN5lP8W8TEWi8WK34p2UlpaelstIfynWCkhU1NTv+G3pB37DT0J8fDweIc/n5SUdB2/JY8pIcTf3z9Q6tSpc8ZvRTtijXteLRnLy8tP8FvpiFVWVn6plIzd3d2XoaGhH+G30DHIz88vHR4etlAi9vf3X9XX13cGBweH4rcMPnz4Tlb/8RX1IXre4+Pjc5ZGWVJf09zcbKZjSrHp6ek37VFvf3//g83Nzb8cPiGnGWdn59N63jM/P/+YHwDQsf+yXpiE6JWXl/e5aIicm5tbgt9CJ2giSefwW+iIVVRUNIoSUl5e3oDfQkfM1dX1DJun/MMng465uLi44rfQMWCLUh/PzMxYpWTQazqG3zLHLCgo6ENWLuC3BD4MNTU1rVtbW8/oZ2hlZeVpYWHhLVEsWxfx7OjouCf9bLG1+B8jIiIu8XExMTEmmj9QH5OcnJypdK2Ghoav6fkZXWdxcXE/LS0tT1Svr6/v+11dXd9L9bLnbzPR0dEJDpUIPz+/c3t7e6+URk7T09ObfDxbA7ksGmllZ2d/Jo/lz1Nd0rmQkJBw0XVGR0fn+HoTExOvieIbGxu7HCYhGxsbf6qtiQwNDU2pNTJfDAaDURRbUlJSI53b2dl5oXYd+sZKsW5ubm/bqpcl7JP/fTLYz0iWrRulcoqh+OLi4i9sxba2tvaLGp09MXGh45mZmZ9qqVe6Tl1dXYet2IWFhT2HnnnLS05OTrHWeKvV+rf8k93U1PQN628G5H2M1nql+LW1td/1xDt8QoqKiqq1xs/Ozu7Yq14pfnV1FSMhBQUFFVpulHabUHxkZGScrVgtj9UzMjIK9DRwbW3tHVux7InzI4fo1G3dKBtpPZTHj4+P/yKKpT5Da734nboAbeUR3STNHzw9Pd/l3zM2NrbAxy4tLT1xd3f30Fqv0WgM0TPsTUhIuCqKp07foeYigYGBH0xOTv4qv8m+vr6xtxiV+Ys/9QVUwsPDow9bNzWmNA+am5vbTU1NzRXF0spkZ2fnd9LfODg4+LPDTQzx4cOnRs+mhaioqPj19fU/qNBrW9fOysoq3N7efk6FJoPyc9IzqZGREQttT1W7Dv3LBExC9GxakM8ftCzZioax9AhFfpweTuJ/NZz0b1qghSjpvJZFKVFC+IkhPeXFz4bT4TYteHt7+1HRcn0avioNZcPCwi7K68JfcXzjKDYtlJWV1VPhjwcEBBgp6bRmgp+JN/A3LZxA+JsWTij8TQv48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDh+9QXgOox3JYRZSQNAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleChangingCargeInForceLayoutIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACoklEQVR4XuXcu4oiQRiG4blsUwMDQcFAwUQwUMFAvALRREUx0RtQQcXz+Xz4e/iKaZNld4Nhmx3eF5pqtCepZ6rKqD88j9//1Ad/Cvgg/P4EUqvVrFKpWKFQsL89nM/nrVgsWqlUcs92Oh03+n/bbDaNP6XfBGk0Gu9JTaVSbxzda+JzuZyVy2VbLpfWarWsXq9bKBSyaDTqnovH4+/nE4kEH+S7IMfj0dLptPV6PdN/fCwWe98LIhKJWDabdRNdrVa9brdrz+fTMpmMey4cDlsymXTPt9ttu91ufBT+GcIH4ccH4YPw44Pw44PwQfjxQfgg/PggfBB+fBA+CD8+CB+EHx+EHx+ED8KPD8IH4ccH4YPw44PwQfjxQfjxQfgg/PggfBB+fBA+CD8+CB+EHx+EHx+ED8KPD8IH4ccH4YPw44P8vuFwaLvdzmazmbvm87kbx+OxjUYj0/f6TPd8kAA7nU6m63K52H6/d2+R0P35fLbX62X3+50PEtQK0aRvNhvbbrd2OBxstVrZdDp1IF+Xp+8UHySABKDVIZTJZOJgtG0JR+9v8a+f9u6VHwmiSdYZIQTBaFwsFu5cEdBgMHBbmO6v1ysfJKgVIgh/21qv127U9Xg8HILOEf4ZEkB6d5cgtCK0LWm1CMQ/S/zDXSDa1vgg/zj/15O2pa+D3BOAYPSdVokgBKLDnw8SQP1+34HoXqtFoyAEo9WibUsriP8rK8B8CE28Rm1Z/srRKBz+GcKPD8IH4ccH4YPw44Pw44PwQfjxQfgg/PggfBB+fBA+CD8+CB+EPwV8EH58ED4IPz4IH4QfH4QPwo8Pwgfhxwfhxwfhg/Djg/BB+PFB+CD8+CB8EH58EH58ED4IPz4IH4QfH4QPwo8Pwgfhxwfh92ufH5Zw558V2rYAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleCircleCouldIcon	^ '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AABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleCircleLayoutAndEdgesIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleClusterLayoutIcon	^ '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UUkAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleCodeAuthorshipIcon	^ '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zwneDyP69wAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleComposedLayoutIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleCoolIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAB2ElEQVR4XuXasW3CQBiGYTcZgqwAa2SSVFClSEPlkgUyAUoZiQKJkpqUmYDUFHYHDfocg9JGSoGSk5/39C9wj3z2Iaqu8yupyt8CH8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80FMkP1+391q2rYlN/GWe+iD+CDDaLvd5nw+p2iQw+GQ4/E4+KnrOlVVdaPRKJvNJsWCrNfrLBaLwc9kMrmCXGY2m8U/sgpoPp9nt9vFf4f4L/Xfz2rVdnXdceM/IQXUpIn/2VtIyyxT9eu+X5/9KvfIalddDaxxxum/sa5rmqn/lfXfpe+5eczlSSn6yGr6S1I+PpLvG+xgQV5fk7u75OEh+Sz4yGpeXq4Q6X9WGPJnVcbj9LfC7jKZFn5k5e0teX/P0I+sPD0ly6V/MfQvhj6ID+KD+CA+iA/yA8hlE281p9OJBLnlHvr/OiksH8QH8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfz+qC9z7PTjhlg+LgAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleCreatingBitmapIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABTElEQVR4XuXZQQqDMABE0blZb2Z6sx4t1W0XBdHWkfch+zAPQUjm9Gsq/gQ+iJ8P4oP4+SA+iJ8P4oP4+SA+iJ8P4ueD+CB+PogP4ueD+CB+PogP4ueD+PkgPoifD+KD+PkgPoifD+KD+Pkgfj6ID+Lng/ggfj6ID+Lng/ggfj6Inw/ig3y/wOM1s96i5fgg2xDL0wepAilC8UHSheKDfI6yDB+kCmQ7Y/ggVSAXovgg6ULxQdKF4oOkC8UHSReKD7JnsD/8Evsge0f78Zfig6QLxQdJF4oPki4UH+ToiCe/p/ggmf4DlQ/ig/ggdwHx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H8QH8fNBfBA/H8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/kVr0B+TcSGNGBj4kAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleCrossesIcon	^ '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IebHF+Lfm8wwF8kmVgIAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleDependenciesWithCurveIcon	^ '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/wLZleMnuj1bsAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleDistinctColorsIcon	^ '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dwKZbROAAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleDotIndexIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABfCAYAAAAeX2I6AAAFhklEQVR4XuWc72tbVRzGT+PAV75ouw37M03bORlO2k4YNMlSakU0QbQV6WrapqkDrSBtHFLaLi0TZvtO9sM5fKGI/gH6xjfTwf4S3eZ7QcQ382T3ST33nHtybpNmob+ewcNyn5tlcJ6c7/dzzz25wvtT4teBEv8g8AfCL/5A+APhF38g/IHwiz8Q/kD4xR8IfyD84g+EX/yB8AfCL/5A+APhF0Egl5JCfpAQ0vZjsZgcGhqq8Lu7u2UikZCRSCRwrrW1VaZSqVC/paVF8gdSRb8VhCzdESXo5491KBjwjY2NEjQ7O+v7fX19vj83N+cPfjQa9f2VlZWAj2N1Dsf8gewgFYaS8tfW1vxBhML8eDxeHuCRkZFSLT6O+QPZQX98oWfI79f0DMlms/7ALy4uOn2os7OzfG5wcLAmf2BggH+G7KTUC6L0aFPIB14wr0R1IO3t7RIlqVAoyJ6eHv/9TU1Ncnp6Wq6urkqUL/OzxsfH5fr6erm/mH4mk5HFYlHiPH8P4Rd/IPyBPIV+nNc95Pb7umQNDw/7td8sNUBhk7JMtDUpy/RNyjqA6MtPWfyB7KD/vtYzBK+Vj8atBhGN2uVDXV1d5XO48KvFxzF/IPyUxd/U+Zs6v45GIFvjuofMx3XJQplC+UHdHxsbc/rmGhdoamlpyenncrly/0D546esOikLg+eiLNvH0oiLpsJ8fsqqk7K8b7WTskwf8maMk6bCfH7K2gVl4bVZmlyU1dbW5lMWLh5dlDU6Olrh81MWv/gD4Q+kAQJZqR5ilyxFU+Zt3I6ODqn8qampQAlyURZ0r7D9+Q82BX/Jqpey1ODalGX71ShrPRP8fBzzB8IfyNEtWaAs5U9OTvKXLH7xB8IfyF5fGP65JeTDzdouDEFZMzMzEjeqkslkoARNTEw4LwxxV/KxtwqAv/kDqSJpLJ1IY+kkn887l05MH8ItXdcSifKLGf35EI75A9nHxUV+ytqlrr2tv8G5Yffyu1mCwpbfm5ubncvvvceFNCkrdpx/hvCLPxD+QBpOWXh9/7KQj7aCPj9l7RNl3V10+wjDbN74rYiLspTPT1kNoqx/bwYHst6NcvyUtUt9P6cH/uZF/e399DXtf5cTVbeSgrJcW0lBWX9f15/FT1n84g+EP5AGUZa5lRSvXZSFraSKsuytpIqy7K2kd7L8lMVPWfyUxU9ZDdGvS3rgf1rQ397PXtc+3uNTU29vgLJQwlw/i1b+hVNBysIxfyBVhIcG5OOVAzV62v1AAfz2AzPAfkAA9u26HhzQf0LItTeF7D/J30P4dRgpC3UdsilL+TZloV9A6iaUkno/LipNH8fqHH8gVQSsVfX9obEr5JdP3H7YgwMuJYIQcD4mnP58nL+H1EVZ5q5401c3p+zd7DZNXUkLfsp6WsoyaerqW27f/Ln08vJygKbMgY80CafPT1l7SFmgKcyMZyKCn7L4dUQC6TsRTkDF9PY5vCdAZl7fAGXZz75Cw8b77bKkSO4ANvTDQ1k/5N0+fgVlNnXcB3HRlAqRn7L4KetwB6L2TEF47Zohpp9OpwOUpWYIypJrhti+eZHJHwh/D+GnLH7K2oMZonx7JvDPkH3oId9Ma/+fG0KG9Qr+HtJgynp8201Zto8rcBdNhfn8lNXgGfLVlPb/+pJ/hjRcp58P7yGfewuMkKuHbL4jZK095NUXt/2PUvw9pKquT24P0rezQh6zFgVf7ghuDVKKtgi58kalnz0v5IcXKn38H93ev7l1kT+QqlrwvrXPHhPyrDf4NgW95Hknn6scRAz6mbZKP9kv5LtDlf7C/zPjvXP8gfCLPxD+QPjFHwh/IPziD4Q/EH7xB8Iv/kD4A+EXfyD8gfCLPxD+QPjFHwh/IPziD4RcTwAORhKa195QOgAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleDoubleArrowIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACb0lEQVR4XuXcS27CMBhF4a6P92IA8doHsCneQ9iKW7kSkyaOwA0pzXcnSFwUyxxF/xlY/vj89PNO+fD/Ah+In0eB7Ha7cLvdwuFwCD9/+Ipuv99/d/Hz2e56vWZ1ueuluriv2MV91tEV3pB+vx82m00oo1fV9Xq9sF6vS7tut5vVdTqdf989u/cCkNlsFlKvU1U3n89b3S0Wi2S3XC6zutVqFfwZ4g91Pz4QH4gfX3t97fW119deX3v9+EPdjw/EB+LH115fe33t9bXX114//lD3gfjxgfjxtdfXXl97fe31tdePP9R9IH58IC6Qu4qdTqekppV1x+Ox8S6qbfx8povPis9suitT/lRXeENGo1HYbrelZjAcDpPdYDBIdlGXc7qo0nV3UTWbXO/Zvfva+6Da+trrzxA/PhA/PhBfe33t9bXX115fe33t9Ye6Hx+ID8RPO7T3L5Q4R3vvz/xX2lultq/Q3qbVNrdrSolr0942KHGu9uYqsa+9/lD34wPxgfjxtdfXXl97fe31tdePP9T9+EB8IH6a117/kIN/yME/5NAWtfUPOfjxh7oPxI8PxNdeX3t97fW119deX3v9+EB8IH58IO0Aclexy+WS1LRXdOfzudDF76q6qLY5Xe56KQWP+6qzK9Xe1CVlUXtTXdTenIvPYpe64KvqUrTcrupCsd+sl7v3n10ByHg8TmradDpNdpPJpPauar136uo8GOLPEH+o+/GB+ED8+Nrra6+vvb72+trrxx/qPhA/PhA/vvb62utrr6+9vvb68Ye6D8SPD8QH4mtvZfenb4ivvev3AuJrrz9D/PhAfCB+HswXjenj9eANteIAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleDoubleClickIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABNElEQVR4XuXWsQ0AIQwEQVdLT1RrCiBAIuHErPSJQ+ZBrm6/pMo/Ah/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxC8XZNTcPn9+nvsgPog/90F8EP+A40D8/C3LvyE+iA/ig/ggPogP4m9Z/pblz/0nywfxD9gH8UF8EH/L8vNviP9k+SA+iA/iz30Qf8vy87cs/4b4ID6ID+KD+CA+iL9l+VuWP/efLB/EP3gfxAfxQfwty9+y/BviP1k+iA/ig/hzH8Tfsvz8Lev5H+yD+CA+iA/ig/gg34D4+SA+iJ8P4ueD+CB+PogP4ueD+CB+PogP4ueD+PkgPoifD+KD+PkgPoifD+KD+Pkgfj6ID+Lng/ggftct4d43QXzhOT8AAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleDynamicBezierEdgesIcon	^ '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OQlQqimsUAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleDynamicEdgesIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleDynamicLabelsAndEdgesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEXUlEQVR4XuWca1PyMBCF+/9/JHgFQQGvgArhneO8cUrcSKnZZpNzZvpFO06Tx+wtmzSHA78sqeGfAn4g/OIHwg+EX/xA+IHwix8IPxB+8QPhB8IvfiD84gfCD4Rf/ED4gfCLHwg/ENvabDZuMpm4i4sLt1qtHD+QASb8/f3dxX43Ho8P7Wc6nYrv7vd79/b25iB+ID0ECO2JxgoIJxMrIwSCJ9RsNjt6b7FYOH4gZ+ry8vLHZN/d3R1NJCCdAiKtIjwfHx+OH8gZkiYxnGz4DOEdF7wj/h38nB/IH4Fg1YTvwWe0YYT+5unpSVwhLy8v/CtEMCXfk7Ver48mCBMWTmL4Tl/zd3Nzc/R34JvwM//7+/t7RwUEE9DFrgPaw8ODgxP+q82HeZvP52JofH19/eN7Hh8fHQ0QDNaSXZe+BQEDDZCYXbcERPJXVfuQtv/wD5K3HN8i5TOvr69cQHa7nbu9vf2aiKurK7fdbrNGPfAvPlLLBWMwIPAZMFOl1pcQSsOcDpFMNgOEtt9mYDQaOayMkmCE5ixWKysCiOQnYKZKgYFipOTwY8XOEoAcuhT/rCpH2WVwIHDgpQB5fn4WV0jfikF2IPjwcDC5o6lz5SNB/8CnFB1lfX5+fkUoeHLlGSkSWXz/EAVJ/j11Y+IHUjMQhIPtUjecYm0TBhOMwKQVcTmzQJD4DRmR5JCUW6UstTRaWbl/sJ9RCwxUGaQxpszem5TmSvpYyx0e5wpRojRGdLWYNFlSp4jV7o6+knYXYR1MAsHWrG86AJyUH2pJaEfyu4qpfSR/2Mufh/CLHwgjkNq60HONt9HKQbR31nLD0BpvEiBdu9BrkeZ4kwDp0oVekzTHmwRIly70mqQ53mRO/VQXem3SGi9/2Mufh/CLHwgzEMToaAgouXX0lNA5gzFqnCFJCiQ87ZqrpV9Ty+Xy5OlgE0BimzcYQE1AtDfhkgHBvrL0sWjzrwVGbFc0PLNoAkjs3GBthUZtK9Bo2teU/zlWFPb7pu5VTh5l+dZRq+fAU45Ro++MPw/hTwz5lQ0IHH27bUa7lV9DYfSo3YmpCiQ8W1FaGIyeMimq0jxWwX+k7RdRHGkraeMqshGlWqdTBYJGays3JPSV0NFf9pE2VERRgEOhsTQYEDrefdEU/k/7zsasYS/OgWslWH0c+P+zkI4yDwlbaXKWWcLQNueNE1mAxKqmuTa1tM98mAdi7WJKS+F5YynhknwJTEeqRCx2eMjSPk42H+IPvcTKKqiotg9YogTTN8IJtwVC8MKNE9luwM4aZfl7qKT6UPvo8W92/VQXesxfAXj7PaxCC80ZRV+k3KULnf8iZUUg4U2hXbrQYzegWr3UwCwQ6ebS0LR17UIP37N8RZTpDSokbDBB8B3Sid6uXehw0GjVwXaA9bak4ncMa+u659/C5QfCL34g/ED4xQ+EHwi/+IHwA+EXPxB+IPziB8IvfiD8QPjFD4QfCL/4gfAD4deg+gdk9tXngy6lfAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleDynamicallyAddingIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAABVklEQVR4XuXXMQrDIBSAYW+e3UPpXXKFLC55acUGOrTNFizfD4FH3PzQNuk4/GYq+Vvgg/hdgazrGqWU8LdjEpCOkXP2QWYB2bYtaq3RWvNR/N8QPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/HiSl8Zzzsoynz/Hs1/q+R/ggPoh/ZflXln9CXJBzg8+51vH0uYNcrfsgPoh/ZflX1o3Fq0/zt/X3dz7ILSdknIxxQsbsnxD/yvK/Q/zvEP+E+CD+314/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8f5N96AGxOp0bY2FZoAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleEdgeTransparencyIcon	^ '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LG82MO+SAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleEdgedWormIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleEdgesInTooltipIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAADnklEQVR4XuWdTYvDIBBA+///ZG+9FnpooYfdJQtCGBydGTXRvAEhJEbTvETny/T2+xuT5/P5X9L2/X6vlkj7qXw+H/O53+/3ZyvyOvf7LXXOkFv0xO0GpZv0er1+Ho9HtZzxA/c3u6XO9EBWET4QPhA+ED4QPhA+ED4QPhA+ED4QPhA+kFWh8YHwgfCB8IHwgfCB8IHwhQ8ECcQSoEpS2u8Jclna07b3/XgDa72Db0OAbEGprViAlKCmIFcPIJpswbF0rbL/ywCRcFojhCOBtPS5JJBemg4fCB8IHwgfyCJAttSb9/tdLFLDazXoLH1aC98O4dshNs0qp2W17i+VpM6WrkerI/dH+tf6OsUwtI6r3qHHM3ZbjDytTtq/2ULR/rW+pgbilVFA5JyhpYwuCSQ9VaVyJBDLkDWi/2mAjJQjbwAfyAJAlpzUrwxkSbV3pHgMsjPXcmCA8A3DoGG4N6xyxldtTN4ft4zfuTrR83oYpSMWJ3WJGMrlYTVnoDy+/wEWuyb3wyNOSW+dI5yNXd4QzWC0ArFO6FFFAAHEYjBGgJylLFwWiOfpXV3l5gPhA+EDuSSQ3s5Hvh3Cl/mByKCO/ASGdly+HblzrMXSdqkfrV5ue3ogyd6QY68MGGljc+5GebNAam1r/ViBnPE5kG5viDcsWoLsBVIKBWPnkJo7fCQQ/hxS0KS0zyhZNCw+kMm0LD6QyYBEtSw+EL7MB8ST7ZdTIy3ZhbW25fFcG5bMRm825FJ2SC2DUaufS3iz+sJKbUSWr1mX6i0PZC9askJrgAsLJKVlRoHMrMEtCWQ1iQBZag4hAOGrvQPFs1pqyQ8p82VSO8SyGilnT3iOW84r2Q5eW8na3lRApJsjORWl9iW3ZdqNpqlp2pvWbk5tbsnLKmla/CGrcfJuUc1z/jU+kEYH5R7W7I5K/qR+lUldm0O8T2g0waF3koPnuqb2ZXkmwegq2miSg4yvWxMwlpzUI29I6Ye3vCGtN+wSQCIyyiputRM8a9t7fteEP6kf/KDwgfBdJ+WwpzUU6nV11NwuPcPIo9cUHqpl9fhqaTQkbDlHA9Ki8V0CiNeytk7MLf+huORnYnNP1159rSVR9xQ8kFb/Um+Llw9kMuED4QPhA+ED4QPhA+ED4QPhA5kdSOSL13wgA4Es6VzkA+ED4QPhA+ED4QPhA+ED4QPhA+ED4QPhA+ED4QPhA+ED4QPhA+ED4QPhA+ED4QNZRP4AizmlcvoLni4AAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleEdgesWithBezierIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAgr0lEQVR4Xt1dC3RdVZk+RVBEwAFHrYC6xHGN1GFkFMdxVpeMS12MrnEURVYBR1zOgDymKIpULDSFPoBiKYWWvmltS2lLH4S2KW3SJmnSNk2TNO8XzfvZpmmeN8lN7v3v7G9f/nv32Xefc8/Noymz1zor9+aex97/97/3v/exQqHJaWtXB+jDlj8042d+umKKjwYHibq7uwm/1dbWyr/V1dXyb29vL6nX+v1+2/fTp8n2/ezZwcj3iopWcutHfn5Z5HcS7TJrOPRsUiA0f+4wnTgepAtNF+tCPuyuu0D0KPEwcLSBgQEbEOfPn5d/q6qq5N/29nYbYerr623f9+0bsn3Pza2g6OciV6L299vBfXr2IC1/ZYQutwZDl1sD/78B+e9fB6i/387NDMJpwebMpZWVlfLz4OCgDShuhYWFGgAttu/Hj0cBO3y40/Zba2tUevr6hmII3tbWJv8342eNdCg1ID+n7h+may/tofeqAvSBBmTWLKLsbDsALS0tRkBYCioqKoCJ7X+lpaUaUe1q6LXXim3fOzujqmbvXtLAaiCTuuJWVlZGIyMjtv/fe4ePrrZ6Qtdd2U3XXtJF7W0Tp8omXEIaGxttndfVD1pXVxexNHR2hjna5/NRUVFY3eTn57vakFWryowEArC7d9sBOXHiVOT7mTN9Mdfh3iwl3KBSd2/3099YXSEcS54f/OAAcvOXhyn1YJSD+oWOCgaj33ViqhwPtaVKhSo16vkzZw5EpCgrfSR0zZQuOpY1ohn6M7TitX56+207IMXFTZHveXlmINmGRYE7I78fSe+hF54Jg/HGG0Tz5xNd9ID889eGafeuLltHa2pqXL+zimBghoeHCUAy0RsaGmznz54d1eVznhiQnPtc0mDILgnF9NEPj9DyZUHt2VG74fPZf4Nk1NXVxRCZGePcuXOR39LSThO060UJyMK5fiEF9s7pA2NVZAKEiT40FCYWjLpqNzo6Omznl5TYr1+2uJcOHLA//+DBbjpx4gzt22f/f2bmOTqePSxB/N437e407Ife7+bm5himqK2NVbvPLwjQ2bNjB2jMgJQWB+hjVn9oQZI/ZDKQTsacia8P/L333iN8ZlcY9oU/R55Z2hwz8Ndft0vlgQNnhJQFKDlZN+pltGH1kATk0x+JXrPgT710x7+dpRNZfqPN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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleEllipseBorderIcon	^ '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3YE/yavlAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleExtensibleLabelsIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleFadingLetterIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAXgUlEQVR4XuWdRa/kRheG8+siZZNFVskii2gWQSVSEoWZmZmZmZmZmZmZGep+31Oap3Xuid3t7nbP3LkuqeV2uVxoH3x9aqOlpfHp9ttvLw899FC5/vrry7XXXls4f/3118tbb71Vrr766nLBBReUSy+9tDz44IPlhhtuKNxz9tlnlzPOOKM8+eST9fy2224rv/32Wzn99NPLOeecUy677LLy888/l0MPPbS8+eab5f777y9///13vfbHH3+Uxx57rNx3333llFNOqfebf8UVV9R6Dj744NrWM888U37//fda33vvvVf7duWVV5arrrrqP/3iP/dSx80331zznn/++ULyOm1y7ccffyyPPPJIifPw2muvjdq23htvvHFUhjH+8ssv5eSTTy7HHnvsknU++uijtYz5k9JGS+shXX755eWdd94pk8o9/fTT5ZVXXinT1v/iiy+WpQ00bbQ0/LRhLchLL71Uvvnmm0pG/vzzz/Lss88WnnCPu+66a7n11lvrEwk54HjLLbf85wk17+KLL67kB5IgiSNBvki288ILL5Sffvqp3HnnnbX8fvvtVy655JJKCiEfb7/9dtl3333L559/Xt8ij19//XV54oknCm8J/eOcN+2iiy4qn376afnyyy+XkRrq9tzjXXfdVY+0F8dFos0ffvih1v/ZZ59VkgupZA6++OKLUb8hnbGu3haEwf1/kpZoABrIj4F6hO4ysd99992IZ5iY4Hj+7bff1vPHH3+8rFmzZtmCMCjobGinXtt6663rca+99qoTwQPCuTSeCWCyPUYeR//kgTfddFPlNSzIhx9+WMvyMFEHk0n/zfeea6655j/jOu+88yq/4gfve/nll2t5y9hv8uCL1tXbgvz111+1MhgaR5hoPMbEkx3PvScmnsi8WHTc+rzHdrukf//9t8TjpPTrr7829jPn21fHRT+b2ozjtN/T9H/4PGS1M3VIg8cLL7ywvsrjyt99993LyMBXX331n/KZnDXVA3/heNZZZ1WyimgOKfnoo48quRnXB8hmbMMEaeONgFTNMye77757aVIh5l4QmDET/dRTT1XazIDff//9yihPOOGE+uO6RxjjPffcU77//vvK+NvIBboCDP7UU0+ti0N58j/55JNy+OGHL5ssZPyTTjppWZvkb7LJJvV40EEHVTFa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34tAr/wPT2b9vzS7zIsAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleFontSizeIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAEV0lEQVR4XuWaW4hWVRTHj7dQEVMfBm26SOiTUVEGEenkaF4yKhqbsuxm9WBFqTmllPNpOalY0AWMoAgKUYusl8gsK0vFy4NCEVQPJRHUUw899CLo2sx/42q5z0BoM339fvBnr2/vffZ8317n7L3WPlPx4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHD59/SKuzJzn7whp7frj+cme/5exO0xz3+TxTi6knXH+L6TLTeFd3t8qNYYzUd5xprWmRq59s6pK9I4x/g2mEqcN03//RgcP6aLvK2VeYrg3tF5vuqnHo+MJ4C02jQ11yyBjngEzDdKvp0cI4I01PmNbzn78zI01yW6gbIafOKvSt+nBIt+lF/pTy4cOHz1nhWZUpilkW2p42DTFdYrpREUrlNt/3ZS82PR6uTe1bZN+vawe59hWKltLesNw02zTRtV+pSG652/Rvd+0P6do8RtpL1oTvsNo0z3Sd69P4rzvkGpVvmq4PbaNMQ2U/FtpS/fOyXzJtC+0XmPa4jTZFRXe69jRBw03PuIlshPYc8ua2FSHySvxmWuC+h2eeyoOme2S/2ywOeU45Q51DnqyJfnI5Rf09H6pcpidxasgllhbG8Twc8gzvkBaNmx23Sk+N51xFVW3OiU0V8raEz+eYBsueUOiff+hK0wOF9jtULig4e78LZ1/Q8nJpWC7XBSd5h3xkulpKT2e7bM92Z+cnmJ+D/Iu5SVa3s0t9HpHjV7mnkg8fPnz4nDmd1elnRXEtHhnW6LaaNbtddYtcblM6h2oN1/v9IPbtUv00fe7Q5/bCb0nBxVz3uUM5UlORI5GfVabk6YfQ5xWFtHOUS9Qdzn2pcqfKT1V2FyKssUo273XRUk9wSDol3qB85SfVfaYE82gYc48clfKpGaablN80NEZTkb78q1XvsfjNCilL7DZdZDqmH3qo0CdN1hFl3p8rF1ldM16XnFLJQesKT2bO7v9Q+bX+9lehb04UJ6p9n2s70UzO2Oni/xTn7zL9Xp16OVQpoftExygxrPTvRdJRxzuy57pkclchYTsQlp1tfdws6YkarZsh3yxfFPreZjrslqvXlHf81UwOSZP/jZT5IPTZG9b4vTV36T7F+UvdpLVq8j3fF77Hx4W6mWEPSMvpU7J7wg2yu/r7W8Upzv6RHyr0Mrhm842b+KDCZh6Dh4ZzxHemJaFvuqFel9IymA4iX9aSOZ3vCj58+PDhQyBFJn9Wp95dJN4z/VKd/u87fPqBnPFOd9FMfq9wnD89A0Onsur0n4MHXf0O/tQMDOnN4IOmTaZvXf1W/tT0P3nvON/0ho4a8pL1K396+p90Evu2aXPVezA3VI7ZWpM98+HDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnz48OHDhw8fPnwGhpNYGq32Nn6+JQAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleFontSizeWithRTLabelledIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleFontsIcon	^ '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QmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleForceBasedLayoutAnimatedIcon	^ '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/s2/+bch7X+UezlxUQktfwAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleForceBasedLayoutIcon	^ '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/s2/+bch7X+UezlxUQktfwAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleGrayScalingIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABfCAYAAAAeX2I6AAACt0lEQVR4XuWYP0ibQRiHu2RxyRIIggQkEBKFEBDxD8YDIWQRUQhkCYEsLi7SkAZcbnJ2dnbP0KE4Z3Z2d+hQ7NDF+e39oLrda1uQKM8DzxDeIwf3fN9w3yc+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHz38SXyEk2u12uLi4iDk1393dDZPJJHpqv/Pz8+ipNWdnZ9Fzc3MzbGxshNPT05hT8w8ZxF5BUXToT09PllNzHfjj46N5ar+Hhwfz1Jr7+3vzVBQd+t3dneXUnB+EH4QfhB+EH4QfhB+EH4QfhB+Efw95n4xGo+jZarVCs9kMg8Eg5tR8fX099Pv96Kn9Tk5OoqfWHB4eRs9arRaq1Wrodrsxp+YfMsh8PjdPRdGh397eWk7NdeCz2cw8td/NzY15as319bV5KooO/erqynJqzg/CD8IPwg/CD8IPwg/CD8IPwg/Cv4e8Tw4ODqLn6upqqFQquq3HnJqvrKyE7e3t6Kn90g06empNChw9y+VyKJVKoV6vx5yaf8ggl5eX5qkoOvT0icRyaq4DT58+zFP7pc8a5qk16a0zT0XRoac3ynJqzg/CD8IPwg/CD8IPwg/CD8IPwg/CD8KHz1+QPjOYZ/oEoZu43hLLqfny8rJu2uap/RqNhnlqTfo/8ywWi3FpaUm3ccupOT8IPwg/CD8IPwg/CD/IGwfZ29uz4+PjF7e2tvhBFhlEEabT6YudTocfZNFBjo6O+EHeCzs7O5/39/d/DYfDH+Px+Hv6/ZV/Kn9IT5J5FgoFPWnSHOO/BlGIZ/lBFhxkbW3tS6/X+/ls+v2NX2KBQfjwg/CD8OEH4QfhB+EH4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPjw4cOHDx8+fPi8Nb8Bjy8MaRHyChQAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleGridIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAABwUlEQVR4XuXbTQqCQACAUc9tRNeKpJ3HEG/gvnFo+tlEY5vBwIleIkMLFfl8+IM2McYUQkixYFzOpcutXf+W29piX0qWbW6P3/NPybj8lS63dv1bbmuLfSlZ1g/iB/GD+EH8IH6Q1UGif5XlX2X5QnwhvhBfiC/EF+IL8YX4QnwhvhBfiC/EF+IL8YX4QnwhvhBfiC/EF+IL8YX4Qnwh1Y+qOc7Z7AupeFQ9AzS3fPKFVDyqLuHyEcQX4gvxhWRCFpMvxL/K8l+U84P4QfwgfhA/iB/ED+IH8YP4QfzH7/6NoS/EF+IL8YX4QnwhvhBfiC/EF5KPwzD4Qn5FyDiOqe/7NE2TL8Q/h/hC/HOIL8QX4gvxhfhCfCG+EF+IL8QX4gvxhfhCfCG+EF+I/xqQH8QP4gfxg/hB/CB+ED+IH8S/D/lyPF/P6fA2neaTfx9SU8jhMb1/hr2LO19ITSH76z77Nr6dW1+IL8QX8hq72KU2tq/5GI6+EP8qyxfiP+31hfhCfCG+EF+IL8QX4gvxhfhCfCG+EF+IL8QX4gvxhfhCfCG+EF+IL8QX4gvxhfhC/Bfl/CB+ED+IH8QP4gf5wyB3CTnGiKMrhLsAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleGroupOfGroupsIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleGroupedLayoutIcon	^ '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DO2Li2xss+0AAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleHappyNewYearIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAACGElEQVR4XuXZW08CQQyG4aIIiMhBMCYeY/TCCy9M/P//TTDZRMZDt9uuXfZ9Ei4G2H5dDNMhCh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fX2cMjo5lOK6/jq7nzcu+38B+TmQ828j9++4xl8tnba2Vttbz5lll52v9yEquX6sndg9trQVY63nzrLLztX5kLpunr09oay3AWs+bZ5Wdr/Ujg+3+NZXlzbmsH0cyWfy0PpPV3UKuXnZrdTcs3l+nvifPukfn5Nfvx77HBb8/+vrs/luv750hbed1rf/W63tnSNt5Xeu/pfrN9zjvHhyzh+f136yfP373ZM+AQ7/eWk/Ny54Bh369tZ6alz0DDv16a71fXnecizs2Q7L7r1dv//Pee30kp4vqr7PcPultwFsvup/s/LKetpa13L5FfkW99aL7yc4v62lrmcnFQ2QD3nrR/WTnl/W09edF1Z47lNE04qaqPbFpPe/12f2Xys+3XLd6v/wZ0rE8/gzpWB5/hoTkxf6P+fueaKvftxliyjOfk4PP3d683s0Q8zk5+NztzevdDGl0Tg48d3vzejlDtHOy9XeKtZ43L9p/52ffLx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fX+EDGUbckNrlS/AAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleHighlightingNeighbourgIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAABGklEQVR4XuXXwQnEIBBA0SnLYzpKCZZjGZZiKdkGJgqGLLu8B3MSPOSDTMLn8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/vV5znWbN5chZRaz6+pTHGlc2Ts4jrysfnB/GD+EH8IH4QP4i/ZflBnnx0P8jXn6z5s+Q/WX4QP4gfxA/iB/GD+FuWr/d8IlprPZvV2exO39L98+L/qftBfH4QP4jPD/JXjiOfiFLKkc3qbHanb2F3td1fiX2v/KnvP2c+P4gfxA/iB/GD+EFesbva7q/EPp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/NxPvWi+6f+K4KdAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleLabelAndCircleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAlqklEQVR4Xt3d5a8sWdUG8P4X+MpHwidICARJCAmSMASXYdDBBhkGGNzd3d3d3d0Z3G1wmcHdXare+u2cp7PuvlV9us89d+77vp3U6T6ley95luy1d63GcffPa17zmuHcc88dvv71r48//OEPx69+9avjN77xjfZ7afvgBz84vulNbxrf/va3jy9/+cvH6173uuMTn/jE8cwzzxw/8IEPjJ///OfHpzzlKePLXvay8alPfer4kpe8ZLzb3e42Pu1pT2vbc5/73HbdKaecMn7yk59s93nAAx7Q9r3uda8bX/GKV4z3uMc92v1e+cpXjr/73e+G8f/gZ7XNSZ/61KeGX//618OTnvSkRlydf9e73jX+4Ac/GL/97W9vZMRJJ500vvWtbz1i35vf/OYj/v/Wt741fu5znxuf/vSnjx/96EePOOYZvj3ne9/73viqV71q9jkY8+lPf5qwjK9//evbvnPOOWf485//PPy/YMi///3v4fvf//7wi1/8Ykin3/KWt4zvfOc7jyDEe97zniP+f9vb3rb+/ZnPfOYIwt773vduvx/84AePH/rQh8ZLXOIS6+Pf/e53B1L9xz/+sRHwX//61zAxafjVr341PPrRj25a5Fk044EPfGC75g1veMP6+vve977j1N4jnr/N9qMf/ag94/e///3o2T7/6xjyj3/8Y3jxi188vvrVr24SBwJoxAte8IIGJQ972MPGO93pTuOLXvSiBicf/vCHm4SeccYZ4/Oe97zxWte6VmPGwx/+8PEWt7hFI+Id7nCH8eY3v3n7xtQnPOEJA5j629/+1gjwhz/84ShC/Oc//1nv+/GPfzxMsLgWjne84x3t+7Of/WzTCO2kRZj0nOc8p2nh85///HbO4x//+Pb9xje+cXzoQx9K48f3vve942Uuc5kGla6lebaPfexj49e+9rXhr3/963BCGTIRfZjgYqDmGg+XNfqmN73peOc733l897vf3YgJyzEBvtuPcc94xjMaw3Ls6le/+njb2952fOxjH9sIgKE3uclN1tfQvtoI2tA37C9/+csR+yqBHPvlL3853O9+92vPvOc979mI7jswyq4tacWXv/zl9e9PfOITTWAw5UpXulKza09+8pNHEH3CGEISJ8K2Dj7qUY8a73Of+4zvf//7x9vc5jbtN6LSjI9//OPj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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleLabelledEncapsulatingIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleLabellingNodesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADX0lEQVR4XuXaW0sbQRjGcT+qX8AboXjhByioeKtXDaUgXil4IUIEY42IRBM8RGMUNWliJFJajaI5PXbegdWNVKypp+T/LMuy2exC5sfszjubnttbfj5SevhNwAfhhw/CB+GHD8IH4YcPwgfhhw/CB+GHD8IPH4QPwg8fhA/CDx+ED8IPH4QPwg8fhB8+CB+EHz4IH4QfPggfhB8+CB+EHz4IP3wQPgg/fBA+CD98ED4IP3wQPgg/fJBnZ2trS2dnZ/rbsUKhoHK5rGKxKD7IGyUajSqZTCqRSGhpaUmZTEarq6t+jcVi/vPNzU2Ptr6+LoudZ8d2dnbEB3nhWCOXSiVls1m/TaVSOj099b3C9nd3d/2+fS98XrPZVDqd5oO8ZfLKK+GWulv4t6x3zp72NB5a+CDvnFnNtoCU3cIH4fcQPkjLM+TbZ/4z5KPEFSDSwID4heELx2qL4+NjnZ+f6+TkxA9jbUhrtUelUlE+n9fl5aWWl5d1c3Ojw8ND/XBrcXpaurh4FCQY8tr3rU6xmmRtbU18kCdihZ4h7O/v31XcV1dXHska8eDgwH9mx46OjjQ5MaHs5KSv0J+69sLCgsew9WGdwgd5JI1GQ+FtrVaTrcF+y23KsrGhubk5X6H/y/XtWlYk2rZer/N7SNvPCGVc68/KtneftVF5x+OS6yh2d+P3kPYxcg5iPLS6/e3tZzfo1JQ7e/x+5YO0DZJoBfk131ZjhjH4IP8FUn/QQ55/73czj0p/WdH0p7jHmJnhg7wATHvTIYahlRVpdFTX13LDZ4lfh7wXYgjDjaXlXpxIg4N8kNeI1SU2HLZ3I0HRmMvlFLxV/O1qmsr8vJojI/cjMzdMlqtd+CCvEKsnIpGIf2sYFI2G8dNV41+HhvR9eFil0HSKYfCnTt4g1Wr1rqHtVW7VYchNpTQe9IxO+C1d9QyRFRpjY1Jvr9TXJy0uqpMwugpEVoIHBUZ/v1QodBxGd4HEYq1Vn41t3Qxxp/2O7gGxyakAw1V9nfo7+P9c5IPwwwfhg/DDB+GD8MMH4YPwwwfhg/DDB+GHD8IH4YcPwgfhhw/CB+GHD8IH4YcPwg8fhA/CDx+ED8IPH4QPwg8fhA/CDx+EHz4IH4QfPggfhB8+CB+EHz4IH4SfD5A/mYBKdt936qgAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleLabelsIcon	^ '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RK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleLazyFormLoadingIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADI0lEQVR4XuXc30tTYRzHca/6T/oTugmioDtvErqrLgJBCrqOCiq0MuwXmJUkGok/oUCl6XRuTedJmdqmc5ubbnNT25xTR4M0UPaJuoguu3iio+83jHP35TnPazvPzWEVEj87VcHfAj4IPz4IH4QfH4QPwo8Pwgfhxwfhg/Djg/Djg/BB+PFB+CD8+CB8kL8rNnTf+OKS44+0s2IZm+fxDOlb8o2CkwNG1zlttehdZ5N9QApxh4qOShUyC8ZuMjpQo4PtYW0Em8zt3KZXHZ6o/OmiltN5Y2NnAkE1DvVofT1tD5B8fEQqBVTaTBv95uWXJv7JYyEUiRqdl9stq67NxT9D+GcIPz4IH4QfH4QfH4QPwo8Pwgfhxwfhg/Djg/BB+PFB+PFB+CD8+CB8EH52ADn9ZFx1z1t/XU3lT0e1Gu7RTGTd6A0HZzqUW08amzc3O6jaVy26XX9P87Mf7AHyE+PY8ZNGN67d16yY+5paHXPGZi4nltTr6lNhLWxspvXJrcfXr6rFGZJlue3zC/nzaqKxcFDJQJd8n82+OFHfMaitvbKxeU6PpXw8pXAkKqfb4p8h/DOEHx+ED8KPD8KPD8IH4ccH4YPw44PwQfjxQfgg/Pgg/PggfBB+fBA+CL//DfJ1zFJy+4tGol7jC9xKLBub5fH51d/doGAgZGxmJptVuXyg/YN9+4DsOEcVy2fkCI0au9GXLo8WVtOa6HtmTrc4ralJh7IbIWP/5OCemlNi0VIiGbcPyPk775VNWMqO3zS2d9bHNlnBmEr75l5ImF/MaXGtJH8kZ2zm1HxKt154dKNx+GifIV7X29+fw1Bnv0/BcIJ/qPMPdX58ED4IPz4IPz4IH4QfH4QPwo8Pwgfhxwfhg/Djg/Djg/BB+PFB+CD8jiJIcWpae13dKjQ1G5vpcLtV9WBYF556ja41U3NFK9WXtbuRswdIe+eEzlY+NHqT39Oryl+sVq62wdjMMZ9Xl+726kT1a6NrTZ06p9SZKu1l8/xHFv+RxY8Pwgfhxwfhxwfhg/Djg/BB+PFB+CD8+CB8EH58EH58ED4IPz7I4eoHSM9N3guI5iUAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleLinkingObjectsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEl0lEQVR4XuWb2y9jURSH/XFePXrAQ0UmPHjoqJgIIxWRIC4JIploXBqXMm0xTFJSSpEIEYJoRlQMKlqXMGlaNdhrztqmTVXHPPWcw+9LVtJzeOn52HuttdfJIsJHT2ThPwJ8IfjgC8EXgg++EHwh+OALwReCD74QfCH44AvBB18IvhB88IXgC8EHXwi+EHzwheALwQdfCD74QvCF4IMvBF8IPvhC8IXggy/kf9ze3tL19XXawBeiAaFQiJaWlmhlZYUODw+fBb4QDfB4PAkBbreXcnI+UFNTE3V3d+ML0QKfz5cQsr6+TmNjY/T164oSy/hCtCASiYiLi4u0cXwsZOAL0RE2m03ZX45lpO4xyXF1dSXwhaiAwWAgq9VKnZ2dtLZ2RA0NA2SxWGhkZISam5uprq6OBgYGyOVyibu7O4EvJMMYjUYpYHFxkerr62lnZ4eqq7/I+xy1tbXU399PhYWFQsnW8IVkmviSlLz5c8zOBp5dK+kz/pKlBvf39+JfEQr9Tnx+eHjAF6I1igNFij6zMDghsVhMcJycxEQk8vQ5XeALUXlv4djcPHqRBsf3HHwhKtHa2koFBQXkdDqVDX5WybZsNDg4SOXl5bIvxtmYw+HAF6IWNTU1VFJSQo2NjTQ/P0/Dw8NUXPyZ6xGZInOPjO/hC1GJoaGhF8uU0/ldWap+6qJjjH9A9Zfzc31kXfhCktjb014KvpAUzs60lYIvRCEYDIp4bG+HRPJ1coTDYYEvROXahMPl8tPy8rLMupLvq3Fejy9EgWuSlpYWys3NlW157gYXFZllCsyd4o6ODpkusyB8ISrAx7+jo6NSQG9vrzzcslq/0dbWFo2Pj9P+/r4sIvkaX4gKpBsl8vl+idR7PHqEL0RDlB6jwM+ydMTBAb4Q+EIRX0gSj4+PIhqNJiIcjj67jkcmz0uy1N4s9TyPyw96ZmbmWe3h9Z68qFMCgcDbFMLpZOqXSddt1cs8LgupqKiQ5yF8PpKdnU15eSXye5hMJlmTcOo7MTHxNoVUVVXJcRvO8bm44oKrtPQjVVZWykKM56Kmpqb4C+pGCIvg85D4qBAPdCf/YXFdYrfb36YQHkrjU7i5uTmanp6WD99o7KTJyUn5M47V1VVd/Ye8NuX45pesy8tLkRoWi02ku4+fUmiYZfEYDv6j15EQnw9fiK6EKMcK+EK0FnJzcyPiM09ud0C+7cShx1cCYIS0tbXJiXO73ZGYQueU2Ov14gvRQggPofFM1FOe30D5+Sb5TmB7ezu+EC2EpMvpPZ4T/CVL6009FZ70UHp2+FJIR93eSESIYBBfiuZCuNObuoTFP/O7gKlL3Huv6jUXwu+Yc8ubm3accfX19dHCwg8yGD5RWVmZ7LzyfW5AcqcYX0iG4UYjT56bzWb5qgBnYD09PVIQC+Hm5O7uLnV1dcnfOT09xReSSVgG1yavdVc3NjbI7/fjL1n44AvBF4L/CPCF4IMvBF8IPvhC8IXggy8EXwg++ELwheCDLwQffCH4QvDBF4IvBB98IfhC8MEXgi8EH3wh+OALwReCD74QfCH44At5z/wBWVep7TxiFq0AAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleMakingVisualizationFitIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleMenuIcon	^ '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dTJs+3921Y0yRVF0kwAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleMetricNormalizer2Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAACnUlEQVR4XuXcSyt1URyA8eMylJm5r2BqwMhMJjLyAZSBKRNjU0ouKQaUAQYMRCkTYiIjUSi55BYmpFweb//W4JR6Ry97n/0+T606J7P1a6299znLKX19+aukSv4p8IP484P4Qfz5Qfwg/vwgfhB/fhA/iD8/iD8/iB/Enx/ED+Iv+vgAP0gFdXDgB/FvWf78IH4Qf34Qf34QP4g/P4gfxJ8fxA/izw/iB/HnB/HnB/GD+PODfOvkBF5ff+6LJD/IP1YEDP+W5Qf5/S4vi7E1aUDu7uDz0w/izw/iB/HnB/GD+PODZNPLC+zv+5/U/flB/CD+/CB+EH9+ED+IPz+IPz+IH8SfH8QP4s8P4gfx5wfxg/jzg/jLDyS+tbu4KO6Zqf8OZGUFFhfh6sqPUjEgIyOwtgbX136UXEDiWOfxcZr8OHcbBw0CJoZ/+nMAiYPP3097xPutLdjchLk5ODz042S6ZZ2eQox4HRf1hYW0Qvr70xa2upr+Fhd9P8gvFpO/t1feomJMTsLgYHo9OwvT03B7myCKcG6qsCDLyzA1BcPDZYy4w1paKoPEODryI2QKMjQEo6MwPg5nZ3B+DnFxDwj/7W/GW9bGBszPQ18fdHcnnJsbP0LmIG9vaUV0dEBbG7S2QktL2qr8W1TGIA8PsL2dMJqaEkRPD/T2wswMvL9D/M7tT/74sB/kLz09pZXR3Az19dDQkFDiTsr/MJgDSPzDZayIqiqorU0onZ2wu5u2Kv/HJRmDTExATQ2USlBXl1ZHfG7ln+acQNrbE0aMxkYYG4PHRz9IbiADA1BdDV1d6Sn8/t6PkStIAKyvw84OPD/7MSruwdCfH8QP4s8P4gfx5wfxg/jzg/jzg/hB/PlB/CD+/CB+EH9+EGd/ACi98fSb7A31AAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleMetricNormalizerIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADQ0lEQVR4XuXcbUuaYRjG8b5yHyAc9aoFgdiLoBas9SC55osg2ohYjKLSIJNasZ6gNEer1O5yVh7tOm9SGuyBJPO2/wEXdyJCXL/u83q4L2u7u+MnSGnjdwEfhB8+CB+EHz4IH4QfPggfhB8+CB+EHz4IP3wQPgg/fBA+CD98ED4IP3wQPgg/fBB+WgtEt7fyZmZUz2e92VkVRkdV8TyhQaamphQKhfSqo0NvBwY06zr03eBgfZ3qPvu9vV3lo6NHf74wMiJrP1Mp8e+QJ0z58LCuDi1vb+tqcVH8ksVPsEAKhYLGx8bU09Oj97GY7HV0eFjp9fVa43f5M4LIJZPJKJFI6Pj42F7q29aWisVirfG7nF+y+CD/S6VS0c3NjezKJ2gwSDweV1dnp153dysSDivixpNxG0fcFPTHyYkPsLezoy/z89rd3eWD8EsWH4SfZoO8cav02MSEJqJR9ff1aXhoyC9Z5XJZq0tLfpk62NvTwf6+ttNpv/EpGgiy48aIXC6nI7ftYRBbm5u18SN7vxVSdGsUmwYXzs78xqfglyw+SDWlUknVlT2f4BlBbBsl3Nurj9PT6o9E9MldDSO5suJf426cqeLwwy9ZfBB+mgjiXVwo4UrTqttoTK2tyWZXV5eXslU6v9v5IHyQlx7PPa/PuD+y6+trtTyIrdhbHcPu/mprCZBsNitrn+fmFJ+c/O2Xtmlv1j3IalUQuzMegnhPeLqFX7LqiJWpKsZqMin+GBKg0vUiBvWz01NZs5/z5+f66jYf+bxBAtnY4IPwSxYfhJ8ggDw83GCxLfcPsZi/Yl9aWPB3fvkMTb5D7GmhfxTITR/z+TwfhF+ygCAXbnPRNhj/9J4dbvjXsdKUHUWt42sIfJBGgbjVLx+EHz4IP00CeTi1rR5y4Hd9gO4Q/kkTfsnig/wtWejsKZAg9ug2ubzMB+GXLD4IP3wQPgg/fBA+SMOmvvzpb0BA/O8ZuqmvtVY/wcgvWXwQfvggfBB++CD88EH4IPzwQfgg/LyQlfr9fwTiJyB3CH8fi1+y+CD88EH4IPzwQfgg/PBB+CD88EH44YPwQfjhg/BB+OGD8EH44YPwQfjhg/DDB+GD8PPY/AJeDlpBtqIlvwAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleMidPointCenterUsingBezierIcon	^ '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Dz/8rFr+AnBX68ww1MTcAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleMovingCameraIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAABj0lEQVR4XuXVIU+CURgFYJOFTzY3JsFNNzc3i2wEA6MatJMcweAcFIk6ihuFgNViwPEfDCT+AM0RIJGtGrTpNbB9YwiFfeCeZzvhvvGccDd8Pt8S7YdEU7c9v5blu55xOww5mrqVQyqx907IuV/fcl2EXIUcxG7bIYWQs5B07H4ccuNX5vP5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xy+/yybze7mcrkTv4kVq1Qqt/1+/208Hn9PUq/XH6IoSvvtJKzRaDzGh4in1+uNNgO/pYTk8/nCX2NM0ul0un5TCWm1Ws+LBvmN31RCBoPBuz/IGul2u6/+IGukWq3eLRpjOBx++k0laDQafc0bpFgsnvotJSiTyWTDX/Ixa4xSqXTpN7Qi5XK52mw2n9rt9kutVrtPpVJbfis+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fzzffDyz/G9+Gw2cAAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleMovingEdgesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAUlUlEQVR4XuXd1a5uRbMG4Hkh3ACcwDEh4RI4AYIeQIDgEIK7u7u7u7u7u7u7u47172fs1EyvmtUfPwvZrD06+TLXGj3aqqq73n5bxtyiRYuHL774YljUCQ8++GA37r777uvGffLJJ924H374oRt37733duPeeuutbtyrr746/Pjjj2X8L7/8Msxqx0MPPdSNe/TRR7txn376aTfuuuuu+6/lNvffFvjKK68M3333XRn/7LPPDkIV98033wzSVnEff/zx0BP6448/3hXcAw880I177733ho8++mjoCfT+++8v4+6+++5u3BtvvDG8/PLLZdytt946EOpvv/02VIroGerTTz895kk+XYXMspzHHnts6Fl4ryEq88gjj5RxKkOwVdxLL700vPjii0Ov1+gBPaEyjvycsKTROypjevvtt4fvv/9+qMq65557SkO88847h55MKKInE4og56xA/1fWXCvwSstff/318PDDDy94/vPPP4/PzjvvvLLg999/f2aP6gmVIqru/9NPPw0nnnhiN03PEjW+p3j10BMXFcO2Xlalk+bdd98t26YeVX5GD8p98sknF8S9/vrrgyH9+uuvH+Z7yJdffjk89dRTpTUfeeSR5fPzzz9/MDxUDSW8atx87bXXBsOGsnKcOoiTNguAIii4ssQnnnhiwbBHObfccss4VGZfcvnll4/Wm4dnCiBkcXpa9g/e97c1pBB+pQgjgNHj+eefH6655pr5uOg5OgBFUEjbI0eFXHHFFcM+++xTCnfZZZctLUWXvfjii0sfsPzyyw/GXb2rfb7ffvsNBx988IKeaChZZpllBgrLee2+++7DQQcdNHzwwQdDtjp1ZjDVuH7ppZcu6DUMgSBOPfXUBWkOPPDA4bbbbltQN8Z45plnlj3wnHPOGW644Yah6pWM4fbbbx8yECE38szlXH311aNBzMWw1PMdLHfRHww9pxrDXIV8qvE9HGovTS+/ngOeBUwoq0J8hPjcc88NWQ7KN+b75V6txxBwHlnkY2Q54IADFpRzySWXDIcddtgw90cE3YOSvxe3pGGWofyZ8NVXX/2lBvh7YRbszz1lMYWEY6kCS+hZcQ9RCMbQXoU4uR6yMxRK2yuv58RZZYW0Ypi94447us7fUNeLg/yquJtuumnozV0MgXpKD4Eqb6ZCqvGwbWj1HCJ54YUXyjjo7JlnnukOET2kpYEV4hMOP/zw7pznkEMOGX799dcFcd9+++1w5ZVXdsu69tpru0LrGQVA0TPgq666qixPvXvGZDTgW+ZizO1lTqCcVzUeh5VXmSu0KtjQVlliIC8Cz3HGXijnww8/HLKgo/dmKw0ESNgt+xBpPv/88+GYY45ZrNfHsKsX3XzzzUM1rJBTZbhGAXIyz6jaJs+KXQA+LrroomGxHnLXXXcN++67bznDXX311UdkkJ9fdtllwwknnFBia4ogwGh8O2RUCEe48cYbF8BNgWDg/mqiaDiojMVwBwxUw5O2EkLunSxXulYRbX7alFETqOs5h5zBgjTQq19mGciM/HIdQPi53+uaF1544YLpfWi9Nz5WkDN6m1lxxuyslEAqiuXcc88dWHOeSUtj/K7KP/bYY0vj0tMYUTUr33777UfDy8iNQA2Fee7kvTXXXHMAl7PhGa5WXnnlEUbnOdVyyy1XoqzNN998TDO3aPrhXxX+MthbWd2/FfbOYrT/CET9s/Oy6OldhfQmVIKZco/yfvPNN4cette1e7DYUNhjmCG0HhPM1+TxvKVn1KeK4x96SBIyQrdUyAhgABwqo5NOfJaNdGgavi+zDPwN/0ZRGQTMBVKCYCqF4JAIrYKv77zzzlggp5tpdX89b7matpeB0ZU1mvXOmn/0iELITVwFiXuKYBAETagViaht1RyDf9SOKh1jqfybejEiMsuGRg7yBERGhZiyc2gVWahSFbEnAxMmjrJadwA3s7MzR7jgggtKspKwNT5PFA1bJmUakxEdy5OOlbWK0Es+++yzoVKE3uN99W6FjTbRfk4c+mmNxexdfhQQyogRxfBHqay9RaPBy4G0ekQ4+JhgqwNejeIpKWQwF6hkvfXWK60L6QeS5udnn332sO2225YwEfpQuUyjU/xOO+1U9rb1119/hKMZ5Wy88cajQqrehHisxufTTz+9hMmUcdZZZ40CzHEbbrjhAogaQtp7770HcDnHIUtB3mx4lIbhRb62zykVUak35/YYwhjy9FFWGlYqx61nE2bPv1Qkp95W+UeKOPnkk8thlw+bvkKWZtg7/fAPK6SHYGJm3ttZYebdm4dwvD2C0ZhejecxpvZgr65dQdRgAyo+KWbdKIseu+DXY4n9KuKS01aXysdZ3uZ/83zKsAj0ADeZnZiLiRKPX9EdqAuCqah3hVXjZCwqVat50I05SyYYIRFKhVx6FLm4LOxAPMBFVRcwmtJbJx9AIDilgPstqOGQta9CngSNHuE7Wp9DKZSDX8sACfyXH7opK1bd1U+6USGnnXbacPTRR5cTvzPOOGMQn/kseJuiMgMbDGvFc2m4yVKFWCg+llgzSacO/uaVOWnUIzPVUBn+KZTRxp1yyinjfEU5LbnHOSuH827ZV+HQQw8dYbfQIifWDc6ydPm18ycQmeIgsPgbjAZkRjmMPMhW/55fU9czesMDMq6iMLwPwlVDlcJUIk8YVVyDqwUkcdniBFZTkZuxJlE9N9eJHpcnuQwlT1ZD6BViolCKqrb8GAGOOOKIBaMH2WywwQYLRhxy3GGHHUZCsmImVlpppemjrOmjrOmH6StkqVSIhSNOrrf5OVbHeuxrj9HlYHtbLuVZgQIBB9XzEfxAb8kZYIDgKoiK7uHQq416tufYG1BBZuXxLxX645S1o4LvAARon2fmwemJy7sx5wIXc56VswPveoqAME466aSS8STQakcJYXH6mQNTBmFAaJkQ9AxCA1FbghG8JgxzhLzbJMg87dKGACYESyEgKoW3JGjMbdTFfEZ5nDwlBoMNITFcjj7mWcFTQWecs/lMC5K8D53JR9vbTSHKZ7AQo9XZUSF2Bu68884lIbfCCiuMk5dsVYjCVVddtWSC11prrWGXXXYZt3m2z/fcc89hu+22W0Cvmwetu+66o+Izfkd6Vmv6GFhopdpLe9xxx409KPd2+VB2tcsEUUpombNCo0OTlNMiQEqUJhtJCJlxsf6WeNR7yQCEzm1CyM7T7/9fQ563tKxr9Tyztm3orfr1FsqUXU1UGVy1jhLzmuk79emjrOmH6StkaVQI1NGDvMY9DjdTKAF1Iaa8STkcN4fXOuqAwKBfRm+xlCkOYmlJwPYdtEyQiu2GBkQgiKod2U94L5x5pnQ4UwgH1ZJBivrKEz2S289/AA+cfYbZ0GSU13KEZNHCdnvOWhZ4Liq01157lbsAQcEKt4OP+J+8GSzmNJ5n2l3F9thjj5H0yygDTITbGUaL6T3XcAjQv9uNGP4P4xNGC9vNfQjDT/BOKBAkt2QtH5DVfEAcuIr4NK8QIERx8kaugrIhxFAEqE24UBhjkI8lYoYG/QVhSZmQpHyk49S1Ndb0yQVi83xUiAlPb6IFEqtYJvgUCt+bbFX0NOFkck/lq+VOvatSbJB+ys55sVZ1rmD38ccfP0L1DLvBTr+KiT7qqKPKnZCUrvfkORXyEryu5mFGDM+zISvb3mXyzGnsZtx6662nj7Km79SnH6avkOkrZPrhzysEvKtOQoFiSDGcTQvRBE5L4Nhb1haqkB/oaWNB65AD9oKenFs4eY4dcReoA9qB1gK1xXuQDY5IeZ61EBZqsUlO+ry5z/8hMY6+PXevbpyw8tQ1oHcAB/B7//33HzfrBcEY/Jv8HPpRl3ZvM/SmjpAU6N6SnvLhwAEfULw91Gpz3agQrCeysLejz7JjVpY1+BVXXLFcXt1kk03m2dCMJHbdddcFcwRwcY011hgbkXfYWwqNdfCcRl7q0QpRkA8DIrDWGEBeSAcCArtbsnCrrbYaFQNttRsbIDbpKIwQY76lfO+ab6iD+oXRxPkUBid9QHWIzZIvhCqNOoYskKiUvNQMWa115jlP7/3ebv7eodBq+SFCL68eURhXZVRxGY63k97p+5DpO/Xph+krZGlVSG+pdtZlYdX5kCD6eml6JGZvQWlWXO8yg6VaIeDdpptuWi7hIsnWWWedBZwRx4TjsVksr6ZxqOAnUq+N40xBW8/9bffDioNOoBDoI84BQkWWXfFW4iChiItNbNCPS20gHnGgJIYY8oFy5OvfYDvjslQrH/mpZ6x1e6Zd8nOxDdIQAsX1QVre8z60CA5rA6hMbuoHOUGr6qTO1tLBfO/ZSQmVydNPHJgecc6a7Lbbbv/r1CXq3XSgMcFWZqIMKqh2acgL+snXUSDvsKcZfegxGNTqXi6Nk09eDgU7Pas2T2N5kZUZkiMI1as6wYXprTZbg6qUVMFucflQjqAt5JJHFuVLU22lpWhtmb4Pmb5Tn36YvkKmr5Dph79EIdWmM8FSbAVVOegeDdDbPgpd9G5o6NEQQEBvz1R1QngWPYIE7B296JXPQWe+rHXg1XMor6ozLqw3vYDMRoVAEJYjKy7HcWXLlQTZ8kYQSWwoyHFuFopbScVFY5BtFEgofuLMV+QBLmI/pREX18hutNFGIzwEnyEbx+rEIQftjnQeXCMhQTBaHJhuk4U6yQvpJz24ueOOO47w1v/Nbfz8e7XVVhvjwVvwWBqGY43cPgB1J0j54amUtdlmm43IDPSFEKE66bDftoZCm34UrY3ydpQ7trD66yeNdqrXXGvtPTJs1g3TvasxeressZoeUdhbVyfc3nUZvbOG6ty7m6RHFFZbVmPyOeu8Y/WcPHvlVJd9Cto4fR8yfac+/TB9hUxfIdMPf0ohYJ1lzQraIQ8r5hYAAIeri4kRb5BDvicKioBqMscFPYGP1aY3S6cVVJQPmF5terM2XZ3OAjQ8q+6JRPJVJ6QgI+gzO3Xlx16DnAbJyUFnslb5fhUQ0s75y/gRh6BadcTZRgZr5P7dNhB8tQsv9q+2wgRNrcMHiRfEJKre+jjWM5QVZZo32EwgLlAYxREI9CWdxsccxuYGDWBI2FJCiDgQlJGBm1jguEcrNmwg8sBZa+/xqQ3leJ8c5EdBUBIjZSwUryw7OcFckBoqw/IiCz3HHns3Luz3jnmSwzgErgx1lo4xIyYdVMIug9WLfR3BYnvvvN+sj7X0JoCzPozSu4Zj1rpLL03v+ZKsk/TuA54VqrOMfya/6fuQ6Tv16YfpK2T6Cpkdep+Z6N1pAmX1rniqruULv1ctSeOUeuffnVWvnjvaUPlE/qP3hSGrg9XhUiChR1FBp6NCIKXqGLOAjHNkOi97IuJUpnJqEEzFC1mDJ6TMxEJHhAEWZ+htRyPgEFC6Vd4222wznsHILC2iEEJzQKaF2NDQlltuORKS6t+u96+yyiojVI0DNa1i3fuoXpBeXIcO7q+99tojJCY3KCqmBxAfEhFJCZ2RE/AhrWPR8ckniDKU4311mu8hEoJ62XpVBHOJ3cxKAUeRayrXHk6RhiVSinStclRKGXFlUayjqyQBBcMaJ5fCQv01fzBXiFNR4HQgGUYFcpofUG6sW4O6oRh5Em7UNS6ljPwpOHoVgYWQ42tC0X4KsKdX+eBt3FuvXeohXVyMEOfcKYRR+bfy1cXcxsYIZfgr3bxCett5lhRCTj9M36lPXyHTD9NXyDQUMmvbZ2/VizPrUR3IPU4tf7AEdLXxLt8ExBHbYcjhZX8F2VgmzRSJNBxrRUhy+FYZ85I0tBbHmXMaPFX1nSkoCPDIyFD52lmdQgY8nKfJlJPygY3qxLPy5+9chCxsj6yOBSPgVChjapcGEFa1cxHOJ5TM9lIQQrJiSEFiz+MUVSsQpGPsBmzjkHnQGoTYbpzQHg0kAIgts6rKMK9o6xEXWUJCBBYgBxqKK2S9Yydl7B8gA4apDvFpKMhRAH2hs/h6gnwpUd7gNYKTwcRaPVlhqOeHLI2ttC1gX1lw3vAclqaBeT6ismBhVkxYjcqoZHtVU+x6oTh5Rw9rqW8WpvHxbktlU1rclprvGCY08w/vtMfP1JvSYl6QiUsCoyjQuSULCZ6xhlDbHgzq670En+XmfSMBozFatIY+30OmH6bv1Kcfpq+Q6SvkHwm9BSqOt0KI/Ed17CCcd8VKoGwqbo5D5yOq/V+olqp8pGO1VGwZe546sWtQZSoWcostthg5mpy5S2EsW1bCcFzZAZTcOAjFPY0Z9nJsGubQUN6y6li0dBliAwyQSsX2ulkHTM10EEFAPRx73s7q4heOOm9Nje8eStvCaOSm/QYMAsprHT4khedzcKiVKaXGFePtoSTBAaH5U7iWbiGCapNDe+9T5rcgoUqJkFN8EDLHQToqlvfESgM5EWS2II2I7xy2GxRYG0SjcdK3dDsCkNAhJHtmAwVCeYTob6yXh4VH+4PFDsMJJBgEYfwVAkFpE6NVfzJrr82F4hi19rVf12GIcSWWMhfbSiqjaitnsL+U0vtcRe8LZhrKWqqPfOmiseif4/QS1ljdBUzABFed+KIs8LU6iQVSqmN14ikger6EP4xBHGHlHo8F10YKz5+roARxymt7AgXGNVXa3m6R/cMXB8z6VuHf8c3BWZ/SnvVNwVkbD4RZ3xWcFTfrUOqskCfIs2Q6fZQ1fZQ1/fC7CvkfJ9q9RNg4WT2PU7hVHPRRrSdDOPlCmKBmbGjDP+UVSxQESidfsWd5FPdW+SBUBsI05wUszPoq6b9GIQg/sLNCRQTSopQWZ4urNhJgOqu8wFBopPqmLoFnIjAAQ3WhpqDOlJLHaEuk0Ey1mQFDa/firI18/+cK0VhIo5rIYGF7h3IIo0ImsZvRPCHHgZtBHrbP0ejxRf58jjswPkXnPbYRx2haIYfT11NA23Z+E4gIyrMnYEmd9d/uQ2Z9pa233SaGr15cTISqOMLvbV8Fl6uhhQIYQl5riZAV0yoIdK0guDzVs7c951/r1GfB3r/j891LOtb/3p7aWZ/o7h23+6fCfwBkpXxqQJKGSQAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleMovingGridIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAKo0lEQVR4XuVciZYURRD0/79A8cD7vm9RVMQL7/vA+15RZ6EXcEUpjMiuyMmqHsSDRV5lvTdv2aBnprqyKiMjM3uvOHcu/7icxhX5lyC/QfKP/AbJb5D8I79B8hsk/8hvkPwGyT/yGyS/QfKP/AbJP/IbJL9B8o/8BslvkPwjv0HyGyT/yG+Q/AbJP/IbJP/Ib5D8Bsk/8hskv0Hyj/wGyW+QizTKiy+WcvXVpRw5Uhx75JFSrryylE8+Maz8/nspd9wxY19+OWOnT5dyyy0z9s03M7a9Xcr118/Yt9/O2E8/lXLddaVcdVUp3303Yz/+WMq1187f+/33M/bDDzPGa7e2ZgzXG3brraXs7MzY55+Xcs01pRw8WIYzSPnoo3nx9IIByuHDLXbmTCkPP9xg9l4ZKGI33rjEuKA9RuP0WPxO/P8C42f/9ls7t5dfLmMZ5NVX7camBx+cb/C110p58skWO3WqlNtvt3/v3HvvegH3718u6r59f73QF8D0+RHzefD1yy/t3J5+ejCDcMBt2A1iJxsWb/qBB9buBNjuzTeX8thjMwZX4wv17LNrFyPslVdmDK7LsXffnbGvv15jR4/O2Kefll25wC++KHKnvvhygffcs8bgDock9Wmayt/BaL+93iD/dm7jkPqdd847Di/7/fhx8+GGPfHEjIFkfUcfOrQ8IdjJixPyxhtL7IMPZgxBgGM4GYtT89VXM/bZZ+vToIDgmWf8RNOdjs0hH35YFGE5xghLriT69z3gkE1YwyEMMCIGvhvbIIy6elI/e7bQby8Wi6Foj91wwxJjiPpPo6xNBuF7uDki9tRT43GIkyRCW/uduxDkbdhbb80YIy0tNtyIYfDjjsHdXFCHRLfDIIEaJGqT6NoCZvPgdXhPQ/T8Hsw1Nan/HyMVqZs7wu61HYeTYtixY2u3oFMTd6+IPmLVdTQh7nPPLQlcoTDUvmNvv71W4MLgOg1DEODuSUQPjhs27BWHHIM6Xx04UE4g/j+JKGb3ppvWN00XJjcU/Ttdzn/ghn/CIZzPSWyY44gAOc9jMLZdByE5lkEYVUWSZI4Juz1idt2m1AlE4wK7//5l+iMGBDCiQm3HcEINi5EcuMkwnV5iyBYsiH60KEunZGKC8fXXi7sxJBonplHgRgxjDgkY3ZAnEnd3Z+yFF9YkTPInxs8TduKE5ZwMUyJxtVpjImu6Sn4WX0ou4voJgUV5/nl3T6ZN4Prs/X/8MaBBYICpZnAdw8JONXJyjFFVNYZjjKqqb3eMi91fx3RMjbocY/RVDeTYzz/bKW0InIbC+xuMXPXrrwNme7koUuXI3kaybtR7VNEPPbQkZpE/s8XCHn3Uidmxxx+fMe76PiCofNbkxnAi3T1J+eP3Xr0PR+onsMhKbSiz2wjDTSn0PVDlF1TqcFENBi4ash6yjQyu3SBdRqfUz0vqcaE2kToMZth9960xqHbD7r57jSGCM6xuBNU+pPx98XWCh1fqOCUruhCpcg4SPfSBK3CmLEikL720VuAkep4wkrgIHH7dMRE4iV6YCJwJTGL8TBE4uYfXkKwrj/Dn9M47M155hJw1vfnm/H6c3vEMgkVc0feH1DfJeqpZ2IZwP/64xUi4tZ7hGDPD/XuZKqkRm2Pkqlr3cIwisgswjMC7IGGiiET0Nh6p17T6NsjWdABHJHUVqCKBi+gRfi6Ivuoae0FRG8YdLkzFLYTYC+XPk9ETPSqC7p6U4secxid1cQQXtGZx/aY5/mPG9qKROgOMiGGuYxkE7qa5QfrxTUpdXShxsRSZRVUe1btUeSR6qfJQO3cCv+uuNYbTKvXuc8P/pyF1I873329JnZhUOXcmTxNfInASvTAROPNewkTgVPTCRNYier7AQy48hYGvxFs2D2IIBMQzju1xSfn/MQjI0W4wpCEsuqkZ14aYa5OCYyTc995rMYrIWqp1jBwEd9hgJOb+O8hLXZAwgfjVH+YY9VKn6MdwWbUu3ohALLBjcjFRRcudMA8lTIk/ZWGjizl4cI3V7CyJ3DHoFMOg7B1TMBEJXEECRKpj3WYYT6lTe9RUe0Pqe0DW/4rU61wcq1nhcQxSi0Ku1Onv685vSB3h54LAq6JvCFyfw5f6vCL5S5VH9Y5y8SJNf9ttrt598aHuF0aCUB2PQ+CjV3RTofpG7WC8AgM5JnUMMncMCT/DIv9QY3Qq2joiOxIWgS9ObIeJwP0azMkwvIbjEKXGzSBx8RnJ9AROcoVRFlgtwToGld4vloXX/edB9S8CApJ1h03MInRBAudWuvLAGC6r1sDdZTGbSh6RW5Ariipa1TwWjXqiR/nXMSUDo2uT24muTUQfE5gievx096QUP5KWjtX827ikziRj7WC/LEm9V+qotY9lEGROmxtkBpcZ2J7UUTBaEHgMZ5VWj+Hs/v1LlV8XsFH0IvBI9LXO4W2u8dTE+XZ8MwaHSPlWJawkoWGRwKWOI1nzRPVkLfKPWCX65nsr0V8Is3kA92swJ8M6UTmOQaDA7QZD8xnDYcPi4pNcw8I4WdfmiIasa7k1Grj390zVLAICfmd33dRdR56zuXXqfQyXVZvY3AVQh9R6t1o47ToWpvoEYVTlShBGvVIzsY0bkyuKbkwNepEr5J4QBPjclOKP8+0MPwyps/GMNRHmr04hhXEG/t9vmpHXJUq1n4/UOZ9T5BOcYs7TG+VqJDdmLotNCyT1WowyTDmqWGTSjq7k3+zoeGqQdl+EvcpRbcpbRUWvIljsMFFxKxL9JdIil5ZDlOI+fbpEcbfgEIq2nqwpKHti7pR1JP8Go8rvOYnk32ETvyPwCr/f5taVescxCBbAbjAoaa+HhOa2vs7RYKpp1FqKvVDsWtRSauDQ1FLqU1DeIBEx1vYV3eH09vWQ8Ui91yHs7WUrZ69DottRe090O5sSiVL0UXOI6GMVUUQfk4tyi7je58b39NleZAuGJfUVFn2FkHV15Ij9ewvpEsOw01cQhvbv+tre3j63Qvl0gYXfLxbm89Bc8NNJvfLPOAZha492HJ8ZpCuJXSfaqfHZDZE19UFPzLGQJezQoSVZ17p9E86y86XvTkH+qj8NTX5rtK4T+W4TXzGFvrVVpj4TC/d2theBFIs9RhHYC0N+fp8p3iAMz5LAN2V7u34whufklzFJHZwxMdOqvifqDjY5U+Spm5GEC2yXXKLHmHd25scTmLlVhyO7VojxBKjDkc10PCXMfcVnDPn5EcPPXWaQ+V41TZDAyWkHDqw7HBmE8Dv53pDaGcNl1d5edwHcjdXFNOq9pst3KvEuyFpYbO/Z9DdRpPyRZFwkJhEY+J/WUGUxzoO9v9wEETt8eDCDMBEYFTJrITGLy9fJk6VphNZC/93H3C6Weqdw5cM/Eat/xGAcg3AoBI1/10QLK3KND3jCfSwwtX7GBzz1jEdsQ601cEtACqvcom6X5qFPNlkLU4+YAgL+3ZXavzUUh5zXWJ1/NuN1Ty0Z3wSFbxjTL92fvDC3t+m6UDY2jI12/fdeog73y94g+Ud+g+Q3SP6R3yD5DZJ/5DdIfoPkH/kNkt8g+Ud+g+Qf+Q2S3yD5R36D5DdI/pHfIPkNkn/kN0h+g+Qf+Q2Sf+Q3SH6D5B/5DZLfIPlHfoMMNP4E5gU0YnvlseEAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleNamedPopupIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAB4UlEQVR4XuXVu4oiQRSA4XlkIwMTcx/AVF/B1MBLoHiJVAwEUQRBDARFBDU47tTCFt0PsMPA94Pgae0W6+uivz4fv9/Ul78EPoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggfj6ID+Lng/ggfj6ID+Lng/j5ID6Inw/ig/j5ID6Inw/ig/j5IH4+iA/i54P4IH4+iA/i54P4IH4+iJ8P4oP4+SA+iJ8P4oP4+SA+yI81n8+jOO92uxiNRvnY5XKJ6XRa+s54PM7zer2O8/mc5+PxGJvNJs+32y0Gg0Hp/MlkkufX6xWdTqf0eavVisViEf1+PziQ2WxW+tNpIXq9Xj52Op1KIM1mM9rtdp5Xq1XUarU81+v1T6VSKV1zOBzm+fF4RLVazfP7/Y4EcL/f87FGoxHf10kvb4dst9t4Pp95Ma7Xa2lxDofD37u1eE5a1H/vl8tlFHfZfr+PIkDq+07P79NvpV1U/Lzb7ZbmdEOkXVbcaf4zxH+G+Pkgfj6ID+Lng/ggfj6ID+Lng/ggfj6Inw/ig/j5ID6Inw/ig/j5ID6Inw/i54P4IH4+iA/i54P4IH4+iA/i54P4+SA+iJ8P4oP4+SA+iJ8P4oP4+SB+PogP4ueD+CB+PogP4vff+wMItDGYvnMiCAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleNestingAndEdgesIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleOrthoHorizontalLinesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAC+0lEQVR4XuXdW2sCMRCGYf//n/RORfEsHmG3pLBlG9PdtNrkm3kDgsjWiz7OJpNMspO21WuHw6HJuW6z2Txddz6fm8vl8vmaTqft8Xhsdrvd13Xb7bZVbpPWGUiqXa/XJkCFV0Dig7wB5HQ6ffvlB4zZbDb4y1ePBtMg4ded+IfzQdRA+lHjobmJEC/NNEgYPfUjpHtvOWrMR0g3erLYX7gD6V/HBxEACUlfP7/o3lvJOdyBpD4bG/byM/XCIP3P+CACIOE2xh9lCYHkzoPxQQqBxLkJH6QyiPXcRBJkv98/zewul8u3TDjyQf7Q+gtKXftpMWooQvi3rMIgj8fjKZLm8zk/QmqBjP0tH0QEhD/KEgLh5yHCIN0tK16P54MUBEnNZQWQfm4Szwor9TWuQVJNfcLRHYilGizXIPwVQ7FMnQ9SAaQ/UgrzXev1ml+XVQskVYM11oHzQQqDxHNZ/LqsyiD3+51fl6V6y+KDCICEaRLLOYdLEH6ECIFYX/twB8LfHyIIws9DKoKk1s/5ESIWIfw8hN+p80GGQPh5CD8P4YPwp04MgfBHWUIgHpsZEOsViS4jxFvOYRrE44jKNEi8J50PUqClzsFKDXFzG387wpvaKxUm1nMTUyBjFSYearXMgOQ267Va7kCs12rJghByDpMRwgcRixDPOQc/QvggfBA3IN6q2rHDXj5IgQjhg/DzED4Iv1N30IdYP6PXJYi3SDINwi+UEwOJz2bkgxQEifuLcM1iseDvD6kJwo8QAyD8/SFCIPxRlhiI9bOx3IFkfA8fpCRIfNZJyEv45/aK9SHW94yYWFOPf/mv3Mb4IPw8hJ+H8EEqgfD3qYuBeKzfMgPi8VkhpkFSjX/LEgThj7KEQKw/K8Q1yNBTD/jPDykEkvvc2/j5IXyQAiC/+G4+yH+B8NdDKoDwKxf5IHyQnFvW7Xbj7w+pCZKzHsIHqRgh8VwWH0RwlMV/fohQHxKOa+JPLlYE4ddlVQaJT/lZrVb8E+VUI8QzyAdHik3+wPASdAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleOrthoVerticalLines2Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACk0lEQVR4XuXYP0vkUBSH4fn+zX6JLRa2E2HRBZnCSplCbERBReyChWihzdV740yyiWG5yTqTZJ8XLvMv50wmb2J+x8Xbm8+UWPiHwBfi4wvxhfj4QnwhPr4QX4iPL8QX4uML8fGF+EJ8fCG+EB9fiC/ExxfiC/Hxhfj4QnwhPr4QX4iPL8QX4uML8YX4+EJ8fCG+EB9fiC/ExxfiC/HxhfhCfHwhPr4QX0hvQlGEcHAQwslJSOz8+5+eQlguP9bzc/CF7O2Fap2e7l7I/n79/fG5LyQeiNW35ccBiVfKqCdEXL6Q4+NaSPzztfPvv7yshcTn/k09slrt/t7h39R9IeMIeXgIoe+6uupfk9bd3TCRqa7d6/q6uc7PP2+TAiFxhQz9odus69pmVkKG5vl02hU/j3rPIeHmJhQ/fodwdtbrIKXty7rb25Dbu9yxuH/lfn5h8FhMMc+n7Yvvv3rNIeHxMTTqMtPRJlFVdbFPTu/yZPnjvXkIGZjnh8wh6Qxu1F1c5NXF7Rp1HVfJpne1Uk36T8IWZpXFFPP80DkkHB7Wda+veUJeXmohsf5vvavfEnuXd/PN67i/fuydSJ0/h/hC/j3P58wK7bmjaw65v/9clzO/tKNpep1T918I+ao8PzTzb7P37IS083zXHJKT57vmkLF7z05IV55vzyG5eb49h4zde55C1nm+WvFsa88huXm+sU36fOTe8xSyzvPlWuf5rjkkJ8+nx+q99PkEevOxV8UX4gvx8YX4Qnx8Ib4QH1+IL8THF+IL8fGF+PhCfCE+vhBfiI8vxBfi4wvxhfj4Qnx8Ib4QH1+IL8THF+IL8fGF+EJ8fCE+vhBfiI8vxBfi4wvxhfj4QnwhPr4QH1/IxHkHjKX55SNVWJ0AAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleOrthoVerticalLinesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAC40lEQVR4XuWZ267CIBBF+/8/6Zsajfeo0Yd6zpiMQULplEJF106ItUIZuoTNtM3jwVdNavi3gA+ELz4QPhC++ED4QPjiA+ED4YsPhA+ELz4QvvhA+ED44gPhA+GLD4QPhC8+ED4QvvhA+OID4QPhiw+ED4QvPhA+EL74QPhA+OID4YsPhA+ELz4QPhC++ED4QGrXbDbjA6lJu92u/Qkgp9OpHVMOh0MVZT6ft9vt9uvL6BlyuVyq/WdqbG6M7rnU2MeOOdRez/GB/BqQms3031eeRWJ0jzVuPTfFmN2+Qu313Gggsu59k2nmmNHH47HN3X6/37/PkPP53F6v18FltVq1ssOxFgForStB9hXdXGg8fTfcAkTqxMYs/frn7ve7CdLtdnu21/ryXdqv1+vnZzO1F1j7sdzYmEeMBVJ6XKHY32YIH0hlQKYyZ2s/ffVCRm1tV8K0h47L/9SxNFNnumpepTLvHDM9ZaOSGq9v8I1miIvFImimvml2FYupSb3NZvOqL0WO3axf+9V4NBPXGHIsSV0mrjEsl8tXv3JejFfqabxS3KcEEqe2Cd0zbe9Lrif13d+b2BrXtc7lWkOtiVtuj4i1ifXv17PG1xVTqD0fSK1AYplsDiPsu/7Q33MbsmX8frYdi68vMw/dk2imPuRfmWJqpbbZ1k3DJzJ00+P3vunkHrsG7Bp/iqmVAOJvGkrALp2vDQKSusYPWVdLPOGt7VkYH8g3AQmZkG9EKaZrfdycS6H4Sl7fWn8wkCmM6hOq+cVZFIifKeaSPM6XQgWSOv6mVPBjXpH+ApDU8fOB1AbEalRDTWrMO+sc+vS7/tTxN3xjrczU+UD4QPjiA+EDGZWt8oHwxQfCFx8IHwhffCB8IHzxgfCB8MUHwgfCFx8IX3wgfCB88YHwgfDFB8IHwhcfCB8IX3wgfPGB8IHwxQfCB8IXHwgfCF98IHwgfPGB8MUHwgfCFx8IHwhffCC/qD8BcE4ipo/6xQAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleParallelCoordinateIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAASD0lEQVR4XuXbVYxtRRMFYF544I03CAkhQUJIcAgElwDBLQSX4O7u7u7u7u7u7u7u7l7Q3+5TI9y5d87kf/mT3snJ3LOlq2qtVVXdffad6J9/2j/+n46J2oegfULaP9onpH1C2j/aJ6R9Qto/2iekfULaP9onpH1C2j/aJ6T9o31C2iek/aN9QtonpP2jfULaJ6T9o31C2iek/aN9Qto/2iekfULaP9onpH1C2j/aJ6R9Qto/2iekfULaP9onpP2jfULaJ6T9o31C2iek/aN9QtoiJC6+OGLnnSOeeiriww8jvv8+HOPcd8wxEZddFuMbPP76K+KDDyJmmini999jQo7EF19ETDllxJtvRrz9dsSXX0b88ceIz8Qii8RogcWLL0Y8/fTo991+e8Qzz0zYt59+ith114h33gn/nuC9W20VYhnV7q23Rv+EAOS00yI++STi77/r5+OPIz7/POLXXyNefjni0UcjVlwxYvfdI156qX5HHAKB+emn9X5/l1oq4uGHO0fju+/qeO+91wXXEYa4e++NWHzxzsn45ps6Vnl2GLnO33lnxCyzRFx+ecQPPwwLCunx2WcdwB14993XPTNBYC66KOL++4ePIwa+8ZFd462zTvXp55+rj7/8Um2U7128nuHf2WcP+iy2HKfEPCA84y288BgIKQ7GUUdVpSJgCOPxyit1QNlz4IERhx8e8eqrEffcE901xnvqjLvvjthvv4gppojYe++IO+6IeP75+pEJAHTvtddGvP56xNJLRzz55LggI7YE1303Hps33xxx3XXV7mOPRTzxRABpGKgIQX4RwYgZWQiN5ZePTtWXXlrFwRagieyNN6rQjHX++TVmz/Gfv67zDyF84Mtcc9X7fFwn6sx4/oj1lFMill12DIRw7NBDIx58MOKhh6oKbrihc25AwQDZd9+IM8+MOOmkmkHffhvx2281gzzHKY5vskl1Qha8++4gaLLmrbfqc67NO2/EscdGvP9+tVnIHebXjTdWv+abrwKIdHYeeWQ4AASinG60UQUBoPn5+uvqI4VffXXELrtEnHtuxF13VaCJsQDb2etlaefPcst1oA/zB9nsEUOJq4tB5ir5niFOovzooypG97z2WnRl8tRTx0DIc89F7L9/VQMjBgAc54CI7T326NIzzjor4pZbqtI5ARzq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'</body><body package="Roassal2-ExampleBrowser-Examples">examplePlacingGroupsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABgCAYAAADrc9dCAAAFSUlEQVR4XuWZzWsTURTFsxB0KVgU/NiJoNiqRUTBnehGQRSsbl2IC3HlqrjoQndCF36gC8GNIAoqCLq0gv4B6j/QjVShrW0nH5N0kvt85yZv8jKZSSOkaZNzYMibmZP30vvLve9OkzOGX5tJOf4Q8APhFz8QfiD84gfCD4Rf/ED4gfCLHwg/EH7xA+EXPxB+IPziB8IPhF/8QPiB8IsfCD8QfvED4Rc/EH4g/OIHwg+EX/xA+IHwix8IPxB+8QPhFyGQpaUlPXo1DsNQj16O/TWGHsjs7KwevRq7APZy7K/BnyH8GcIPhL9k8Zcs/gzZlBkiHz+KyeWMnDghED+QDQYS3LwphQsXzNKtW6b07Zvwl6w+l6zV1VWx1KVarcrCwoKEMzNSPHvWBNPTEvz6JfPz81IoFGRlZUXy+bzwZ8g6ZEgQBBJFkRSLRX2tVCoCMK5EAQ4g4ToOeHBuF1cwpVJJIQHQepS1oQeCgLrgAUYyQxB0d14ul+Oxu4731mo1HQMGBJiAgvPFxUWdA3M7H3/JSgiBcuUIr8n7uO6Cm7yeBOJA+fec12UXoAMIsmtubk7nBbC0tWkyBEFBkBGYTqUEgUwG1y9n/jkywZ/fzyA/y+Dz72GMz4LswoHzfu1Bff/nouzcKXL1qriA4VuaFWBtZT9/Ftm1S6qTkxqkVI+dR44ckdq1a61Avn8X2b1btB1uKA/g1ivnzqF2tQHEobKfUQ4fFvn6VbMFnxOvgF6xzUNw44bUXr7U96vXfkZ4B65klU6fNsUzZ0z1+fOuvnGyY4eEp06Z6vbt2aapKROOjxt9Bnn8uDmvPS8fPaqvvje4cqV+zY5T13z0SMpjYyY8frzNg30mmJgw1ZERnaP04YOUjx2rrz0yMnhA/t65Y0I8uP350xWQaGpKVq5fN9GePdLpgbBy4EA9KN68eEB0D4pJb+H8eSOfPqVn3O/fUh4dlfzFi0bu32/z+PPCK1u21M9v3x64spbDxon2M62epwl+lKpioryk7R/JPaSTF/NmArZy7XFWmRyqLgt/cFYHldxwcbigdPJjTr+z6lgGrTrN5eC7bm/ogbgAr5Ul7lvs/FlZ4u53821ey4s9wnV5rrX+3ywZuJ9wAcL90cvLy6l/rN99uYBkZYHfpa319O17UZKS91FOk/C6La+D+2A4M2MKL16I21SjJ08E3QzaRm1F7bjy4EF9bL2lp0/Fba6F9+/1Pq47r86FdhUtKsYpG7HrsHxvdPdu7MVmX52eNpHtmvT83j3RdeH78kXK795ldmUDDUTevBE5eFBq27bF7ejqvn31DunQoXqw0a6OjmoA4I327m22rvYVLafvrW3dGnsr+/fX57LrtOwbr1+L73Xvjb1uTZw3vLpuw+va3OS8g/9g+POnyOXLLe1o3DbiAavxm4ae2wyKvfD4Xnu9zTsxIeHJk+rBOi1Afvxo9doMcPPqZ/JbWeuN17EZ5Lx6nph3aLosefZMe3jX98vDh819wP6WIY3fM9Rr77V48d7GXqHet2+bdR8Z2PC2dVcItOeVV69icDohyqSbF5Ds/dhr36dQ+X8P+T8Nc0e0bl3WMAPhzxB+IJsXCNpZbVUz/kfFrz6XLBkb0y5LuyE8r/BnyAZnyKVLzfa0i46IH0gf9hC/RebXJuiyNlr8GcIPhB8If8niz5CejPmB8APhF3/J4gfCL34g/ED4xQ+EHwi/+IHwix8IPxB+8QPhB8IvfiD8QPjFD4QfCL/4gfCLHwg/EH7xA+EHwi9+IPxA+MUPhB8Iv/iB8IsfCD8QfvED4QfCrx7oH6mCLh8Lryj6AAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">examplePlatformPoupIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABDElEQVR4XuXVQQ0AQAgDQfybrBS4Lw4uzCYY6Dyobr+fKn8CH8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8TsFkmSdD+KD+CA+iA/ig/hP3c8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8XgPtoabWrQOqsAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">examplePolygonsIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleRectangleLayoutIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAEZElEQVR4XuWdzys9URTA3//h31CytJC1rJAsFEtLUX6UIhQ2FhaKFEVRJEWRlJVslFJiZ2tpd+f7zvQdjfvuzFx3fryZ+Zw6Pc2dH+/dz5x7zz333KvheXwpkzT4VcAHwhc+ED4QvvCB8IHwhQ+ED4QvfCB8IHzhA+ELHwgfCF/4QPhA+MIHwgfCl8oDeX9/V19fX16SPj8/ezbnZXUv1+ddXl62HLu9va0OkJubG/Xx8eEl6eHhoWdzXlb3cn3e5ORky7H5+Xk+ED4QPhA+ED4QPhAnIPIb+UD4QFhAokSaJz4QvoWUF4gMzDY2NmJ1bGzMu76+jtWdnR3lCmR/f/+XyuC3MkCaFajkRyRpV1eXZ3OeDTjTW5ynhVQqdGJrITaVmKbS+ED4QPhAigKi9yF8IAUAierDuru7fddXVz6QlPeSStS9s/CxqOvW1taMcPlAcrAQm+v4QPhAyg3k7u6upVPVtb+/P3E809vbG1vOB2IJRKZMk8QUb7KpWBudnZ1tgTcwMFAdIFdXVyop1CHaaDQya45cmx4bNV0nz6udhZQNiOmlub+/V1tbW4oPpCQW8j82x7cQPhA+EKNKf7i7u6tMXh0fSJs69bm5OeXi+eGBBB3x4uKiMTwik1hxXt/x8bFRFxYWPD6QFBaiW0JQ5hrtNV3HB+IAJBjhB6N4PpAYbfr3iRUdVIRt/xCMol9eXn4le5+envrnbG9vOwPRk62/v7/rBeQv8+RZTT65dup5xa0qCUQ6ZD6QEgERKQpIVCR5ZmbGH4+E9e3tTfGBpLzf+Ph4bAhfr/RAR0ZG6j8OKZuFxJWZns8HwgfCB8IHUjCQcKXGfedwWGZvb0+dn5+r19fXenXqZ2dnKmmefGVlxTs6OlLyaSqfnp7++Xt1dTUVsLjy8AuRl2W0HYhteMX2jU9yaflAKggkLnOxs7PT18HBwXpmLmYBRConaNslMyQPC5HvaerDapcGlLWF2AYq+UD4QJhA+E0WxMvCAHl6ekoN5OLi4scVfXh4UOHJr79GeuOavL6+vpb596mpqfqtws1LXbLc48pNZScnJ3wgfCB8IHwgfCA1BaIHIkdHR52BNDvwlqwTyWzBABEvyeQppbEQ2TXCFUhecavCgCRtrRGVyhlendTR0RG7/My0olZ0c3NTLS0tKT1xISknKwpI1PFaBBeDCaesd/nR23YXC+UD4QPhA+ED4QPhAykCSOV2to5aFj00NOTv7KZ7RZLFIWqqEPGOwuOJ5eVlfyo1aqMAWe0kgUZbDy94tkzThs8bHh72raCnp6ewrZlKMQ4Jj3htUnd0i/nr3odRlatbgiz0FDFtSIAFIhYxMTGh+EBKZCHr6+ttBSKDTL3ZqxyQz89PFd7oS7L9ZEeEQKOua7blv1REdv8MHzs4OEj13UzPEJG+Knz88fHRa4fw/6FLyYQPhA+EL3wgfCB84QPhA+ELHwgfCF/4QPhA+MIHwhc+ED4QvvCB8IHwhQ+k7vIP3qBBe9TjobAAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleResizingElementsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAACBElEQVR4XuXYT0sqURjA4T6uOz+DfgmPdyeIi8ABcW0KbYS5biyajVxoIVFKhCWXC/UaUxAE0X8v0vODl8HhOAznEQZnb7Px26X2/C3wQfxeA+l2u9HpdOK9X1gul+Fv2xZBUkrR6/Wi3W5HpVKJVqsV/X4/Go3Gw8aXWLVaLarVaozH4yiKwgfZJshkMnnY4Ol0GoPBIMrPWZZFs9l8Oj8ajWI4HG7q9XrMZjMfxH+G+CB+PoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggfj6ID+Lng/ggfj6ID+Lng/ggfj6Inw/ig/j5ID6Inw/ig/j5ID6Inw/i54P4IH4+iA/i54P4IH4+iA/i54P4+SA+iB8LEqtV3K5u4t/84vG4+hs386tnU667nK/jpfFBttB1fhJnKYvyeJ6fxlE6fDblmoNUxEvjg/gg1jPEB/FBfJDP5IP4ID6I/z9kB9pPi3htjvN15L/vIv26fXPKdfnJdaTs7ENT3kc6PIrPjA/ig/ggPogP4oP4ID6ID+KD+CA/Mx/EB/FBvg3PB/FBfJAt5IP4IH7+6/f3/DKLg/jK5Is/ka+PIy32vzzldXwQH8QH8UF8EB/EB/FBfBAfxAfxQXwQH8QH8UF8EB/EB/FBfBAfxAfxQXYxH8QH8UF2PR/EB/HzQXwQPx/EB/HzQXwQv//dPcyFUJ9iOehYAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleResizingGroupIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAC7UlEQVR4XuWa6Y6jMBAG8+bzprnv+77TTL5RMjLE7Cbg7BKqJH4MBEbqwu5um0oU8SkSFX4I+EL48IXwhfDhC+EL4cMXwhfChy+EL4QPXwgfvhC+ED58IXwhfPhC+EL48IXwhfDhC+HDF8IXwocvhC+ED18IXwgfvhC+ED58IXz4QvhC+PCF8IX8a9rtto3HY3PPdbtd6/f7xhfyZo7H40OQa7Va1Gq1LHnuejz89nw+G19IIJbLpSnQs9ks0/2SpvvtCl9IAC6Xi/V6PdvtdpkCutlsbDAY8EcIn5II0WhI5oaQaOpSntFUyBfyBM1m82fO/xvXnOJN3qvV6o+BPp1OP88fjUZ8IaGQDF+ibzQaH5fASyFEAZcMve3u+e12a1mrMb6QJ1GQkw3gq/I0Pe33e37Z+woqa30NXL1efyqnpKGcovun0+nDsw+Hg/maTr6QW5et4Pv6EAUu7yhL+595ZJdaiN7gtMC9i/l8Xsjy9+OSuvLBrcqKBbPT6VgR3/jSC9G8r8Cv1+uYEC2R+KY9vpDAVVaetSgVClqW51dZGaYgXyWkYOqaknvWPJH2bO2p8JN6yltcrVZNK7Np1/NOcb7zw+HQtFTDF8KHL4Qv5M1omd5dSFTF5SuF+UJylrK+gCq36JqbY5Ss3fn/dn+sudQamO7z5aBbsWB8ISnc9ykUaF/pq2uvdvKTySS1QuML4cMXwhcSuEP/pOeWWoh2/TT3LxaLoMFTt67nFvkDh0IK0VKKdvlC742/67nIHKK3+7qr+Pu3dhjd/fP7Prtb4mokhB5lfCHR77dUkdt33BcG7yWt70uUou4IlmKEqCl0+wmNhGQuSDaV2vp9avv36yt+8IX87whU4gdfCF8IXwhfSIHh5xA+fCF8IXz4QvhC+PCF8IXw4QvhC+HDF8KHL4QvhA9fCF8IH74QvhA+fCF8IXz4QvjwhfCF8OEL4QvhwxfCF8KHL4QvhA9fCB++EL4QPnwhfCF8AvINhKVoOa9+wjYAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleRotatingAnimatedLabelsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAALH0lEQVR4XuWdZYwU3RKG5x/hBxoIQQJBgxMkECx4cIcEd3cLHtyCu7u7W3B3d3d3d+q7eSr3bObOneXbhdndWaqSTtuZntP1nnrfOtU9u55//rFvwWQe+y6wD4h9sw+IfUDsm31A7ANi3+wDYh8Q+2YfEPuA2Df7gNg3+4CEw+7duyf2AQkS+/Tpk3z48EHevXsXZlDC09Y+IOGwJ0+eyMePH+Xhw4dhdvCrV6/k7du3EihQ7APyX/vx44e8ePFCLl26JN+/f/9X5wLc48ePAwqGfUC87Pnz53L16lVdwkJJRNPLly8FirOvIRGgG3fu3JHr16/Lt2/f1MGMfAfG3bt35evXr7r/5csXBeLz589Kb+H9rp8/f4Zcyz4godizZ8+Uqt6/fy/eEQMoTiM4hraQgd26dUsePHjg16kA5e84IPAZwHz06JF9QEKz169fa2QcPHhQvEfx06dP5ebNm+pAoobMCyAuXLggt2/f9uvQN2/eCOD6HieqAAGaw34rQn4nHKOjIcw4C2e6Y/fv31ehBhQihG2ceerUKQXPaQrAuagiemjL4mgP4zztAT4s4u/5VUcZHeFJAaOb4Sycf+7cOdUE5zCohfsGJAwnX7t2TaAxIsVpC9HCZ9mG8mjnTYNEFH7k2tgfiboTM0YB6LL+2wAhzYV+cLSbU7AABveM2F++fFlB45jTEhx8/vx5jZb9+/drG5zvogYwiCYozxukP86yQJVQBRyihU7+TfMORjvOdqOX+8SBOBy6unHjhpw4cUJpyQkx0QOInD98+LBGDlGA2PNZwCBjY9+fnvxx2kunHY+y5kYCnXtHhTHAcKY3JbsRjSMZiDDE6dOnQ9o4DYGeiKozZ84oOIg0IFy8eFGuXLnyP3oUofMQwpGO0EHHpX+bARSA4FyoiH2nqYcOHZIDBw6oD4gAwOEc21AY0RNWrQho2gv38uW/yqejK41xT1AVdAQILt0FnLNnz6ou4HxvSuczUBifj5KZOp1E4OBfRgsd/xsA4b5wLuUTRzsMvqNHj2rEMAjZh7KhMwQdiuJ4oHzg+dMshTU3weQnumsL98EAQw9wNJNFaImIABSOQduuCEnK+6tJnksUQpvVR8hMHT2hU05bAhG2UWE4mv4z0rkHJ+ZEwfHjx5WuiBxAQMihtdCu5cottPdmEMDh+K985Am0IJIaI3JhKWEHE1WhAW5W7UoqCDiZFBqCdrA+efLkL+kJH6ArRBML1wFYPktUEX2uEhAptSw6zqgg/KNDtLi5Ak6EdlkofeBYHIrzoWK2mZn7A8PVqgCPSKItSQBAMDChPPYBnGvgH475m2xHSHGRG2AE0HnvammwFhdxqAOGvgMOfceZ0A46AkX5prTcoyuRrF+/Xnbv3q1rlwLzGVchxg9MMkkOAI5zToMjrdpLZ+kIoye6zFsAB1pxD6voOxmVbztAg3o2b94sS5culSVLlsjcuXNl27ZtIeX5TZs2yb59+3QfEIgSN8uPNMryl9tDAU40gzlaMKIC4XaprK/jAIyUeNeuXTJv3jxZtWqVbN++XYUfpx85ckQjxIHjNIgoAwyXNKBP3nW0SAPEO7zpFJ2Dn50FW3RAYYx+Bo5vSss5NJKSy5o1a+TYsWOybt26EMcD0KJFixSgCRMmyJYtWzQJ2LNnj+zdu1cpDSA2btyo2zAI0Qd7OF94Iju15MtdtARTsRJqhUrcAyl3nGNEjXuqCPcj2qTFq1evlhUrVigos2fPVmCIkJUrV8ro0aN1f/r06Uppc+bMUZCmTp2qbUmn8QGgAhr6EumAeEeLK3OH9x2oQEeEK3vQF38iy8gFBKIG51FgZJKIk5ctWyaLFy9WR7PG+bNmzdLoWbhwoYwZM0aaNWsm3bt3lz59+kjHjh1lyJAhSme0GTdunFIftEfk8P2eqKwbsSB0/rg6smbmRCvizMDwjgz2neZBUbQBGIQaCtqwYYPMnz9fF0Z97969pV+/fjJ27Fh1fPPmzWXatGnSuXNn6dKli54bMWKEAtKyZUsZNmyYnqc9PiCytm7dKp5gmCG7GWxUVHbd8x5/0bN27VqNCAqNjorQiSlTpki3bt1k4MCB6mC2cXKTJk3U8Ww3atRIF8CpXLmytG7dWqpWrSqDBw/Wa0yaNEkXrsvAQK8YoJ5gEdNgSouhKfQCSmKiB0Wx4ECciaOhmxo1akjTpk2lSpUqeqxYsWLSqlUrjQ5AqF69uoJElIwcOVJ69uwZoi9oyo4dO5TuSAJcScb+a0ChGDQFv8+cOVO1AU0YNWqU1K9fX4oWLSp16tSRihUrSunSpaVIkSJSqFAhXdeqVUsqVaqka/SDpX379hopffv2lUGDBukxQOPaXbt2leHDh8vEiRN1sQ9IKEbWA7eTRTVo0EDq1aunI56oKFWqlG4DAMeLFy+uws2ac0QMQNWtW1dq1qwpZcuW1Wtwrn///grQgAEDVIcAA/Hn+5hE2gfExxB2koydO3dqJtWpUyd1MBoA/RAdREPevHkVEACqUKGC1K5dW0qUKCHlypWTatWqaTvA4jg0RsQQJVBUr169ZPz48Rp1UBhzElJk9u0D4pWKUyphhs7smQkeejF06FBp166djnBEGc0oXLiwAlKwYEHdBrAcOXLoucaNGysdsU2EkH2hHey3aNFC6QphB8SGDRtK27ZtNQno0aOHLF++3DYg7hEsb5mQylJFYHY9efJkWbBggQoxIxz6YY1Qly9fXoEAhHz58knJkiUVKJxLhDgtIVJY89ns2bNL5syZJWfOnJI7d24pUKCAlClTRkHheoCNJgGYx8roZ40mkM1RiyLVpPJKNsWCwDKaKRYyH2DuAOXkyZNH6Qfnpk+fXjJmzChZs2aVbNmySZo0aSRLliySNGlS3cbpuXLlkhQpUuh2okSJJGXKlJI6dWrJlCmTpE2bVttzLc4DKGBCe9AZkWMCEJ5DkO+7Z+NM8pgZU5eiXD5jxgzdBxAyqQ4dOugcAyfmz59f4sePr85NkiSJJE+eXBImTCgxY8aUePHiSaxYsSRu3LgKCmsWjrMADG35XKpUqfRaRAkRky5dOsmQIYNGCNFC2mwqywIENMLVpih08rCIV3twPqUM+L1NmzYqwjiOkQwAyZIlU8fGiRNHYsSIIbFjx1YgWAOWAyJBggTaxrVln+O0cRGTOHFiBY8Ig+5IndEcN8v3WMqevPepG6EZRAYUxeybEUpJA4ElWtABogXhRhtYAApBRwtwMtuMdrYZ8VAaFEdajO6gLY6WyNTQCSaKDAJKKdS+qAiQRDA4PIEQRrdN7YdZN2UAFqq50AWV0mB/DuJrrvTu+g2g3Jt7ZuIq1ZQ73IsL1LrcY1ki0bV118MX3iV977fn/T4PId1zX+Aew7LtnvwhhrRhYduVoekI3Eyn3Xut1IkYhWQxrrxtP7n+d/u/CCETcW/wMeJZcDxO5yELJQXQp/aCk90bfYwe96jT9ykY4EVViT1aA+JLK4xwRjwRAghsM+JZ3AtjbrHv/AiKkPAIo32LYkDsm31A7ANi3+wDYt/sA2IfEPtmHxD7gNg3+4DYB8S+2QfEPiD2zT4g9s0+IPYBsW/2AbEPiH2zD4h9QOybfUDsA2Lf7ANi3+wDYh8Q+2YfEPuA2Dd7gPAusfv3D/YBCQJzfwHud/6Ut31AIsD4Vxr8cvZP/qS3fUACbL6/QbEPSBQaPxTi94F/4z+diZaA8Ksuf3+Y0j4gUQQGf4vE/QDTPiBRbAg5f43B99er9gGxb/YBsQ+IfbMPiH1A7Jt9QOybfUDsA2Lf7ANiHxD7Fnj7D8sZewm4xZooAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleRotatingElementsIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleRotatingLabelsIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleSVGPathIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleScaledNestingIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAaaElEQVR4XuVcd1Sb2ZVnszmTsyfJSU7aZDyesT32uDcwYNN7E00U0QQIUdQAFZBooiMQSKJ30Xs3vRljMGDc7RlPZiaTTHaSSTJJNslu9uzZv/affT+MchQWGMZFePZ7x+9cW5be7373vvu+993ffZ8R9Rv1G/Xbl7RvkG6/w/8d3OV3tl8B47s7fB64iU/9ptd4pBuT7kQ6e9PQ9E2ZQrop6d6b39Nv+E446dakx25+L5T0ANLNSD+i911z0p1J99f7TLYpY0g/vumcn1LfHU8NcYj0K5sdBq4kXbLpkDjSg7eJiNObxkwlnb/pCA3ppZsONNriEIwt1PvMdRM3cXP8SNK/RX13PH+z2YyU86Rfpr45qN+o36jfqN+o36jfqN+o39Bee4382dJ3+nyvnfpWfY72xhtGbxz+yfcu6sudPt+rpL5Vn6O1tdVP37mz/vvMTJGGG83M0HeIj4ddJD7X9Rs3rn3S1dU0n5kpLl1fX/0cn+30e+q3Z2zR0f5CurtTDAypk/oRwmTSOEde/75xXp6sKtTXN8ne/qxrepK4KicnudzBytiPxfIRbPd76rfnWLJCA7yFMDSbyZDqO8TDyTLU39+e6eliHQbZ29G5FhrqHjs/M/Oxn589083BImSn31O/PWMTCqPkrU31s+fP/9RkuwjBUhTu7y+rrlb1lRYrB5qaqscdrS/5T06O3BdxuOqdfk/99ozNwuKYbXREUMqhQ68djokMTtV3SFIiv+TAgX86kMCJzq+pUfezmH7C1FSB0pdmHxke7sVNEnGLrlw5apOaJCzb+nvqt+dYsna6h5x554AViYBMR2sT/5AQ12g4oqenZaGuomKC3MynbMzP+7zzzreP8aIjsqh/D3mBDiGGt9SXus9PH37DIiqKnoAlKiYmUFSUn9Xi4mLslS1LaxaLo7ML8zKbs7IkpQwfd/7W31O/PYdDtnbd50de/95FJ6eLtKpy9ZC7u5mvvbkJw9LyXTs/NxceIsf4xBEnyFSxqNLPzy6M+s8hL9khJqePOFhbn3B0c7gcJJHE5FheOk2DdLYxY2zswhwtwyBZoQHJkE42pgHUd8hztu98h/zZ0nUOcbA0ptvYnHR0c7wS/Oab33hTJwNobhtLlE7q7h36DqV+ewmRc/zgj80gT7z1Y3N9eerQ61f0pe7eQX2HGDhy9tqpb73nNPzzOmAvDvo6j2/QifYisrt7yf5+ncc36O5xLxd06dRRl+TkuHw/DxdOZ6d2TpaQWIntbkJ0TFF6emKJ8akjDuQJvijQx42bnMzJFyfEKTic4GQ/mnPcqzI+vu9qeyX05s3FTwO83Hi74SQnCtQcTlBSanKCaiP56uEUu28OOXPmR+d5nLC0kBC3aFWBore0tKCd7Lb8urqarzH9/KRstl9iiI+PJCEhIl2WzFeyWL6C8hLVMFIw2JUhlbJb9thQ45Nkp9vM5MQTkq2O2wknJiw0U63ObbUxu0AvLc1vi40ITcf4u+EY1CHebrYkj+gQ7u5kEYKZk5wg0MTGMiTlxaqra2vLnymys1qfPHn/bxEhdAkuIE0sriLZ3xgn8iSP5xW6p2MUtsU15WVjERFevABPV86rMH5poXJoenrsUaVKM/rw4f1/a2mqm7p37/YXRbk5HaAVUoTCiq04Z8/+5GJRXnZbTEyAyN/TJW7fIoROtwkpLy3qISGbnJmUouXzmanyNElFf3/HUrCPlwiyXF3cT/iQiqnxiQ94vFDZ2urN38zOjr83PTn+vlTKLUiVJqp3msEve3wPD3N6ZXlxX2Skj0AUx1Xn5soqMX5LS+2ESpnfMTLSd0soiCloba2bHBsafhQY6Bhx/+7dPymVmY3ksyniuMdKRU6bUMjO3A7HoA6RCgVqZHfBFAoEzNTQQE9BdXVJX3CAO7eurnQwV57aoNVWjSmystqlUk4BnxOeQdbmJG932wga7bI/hx2WDtlS3zCPVIsglpW7n+OHBHjyEQFEClpaaibY4YHS7u6WhapSzdXy8sIubXXdfFpafHE0K1Di6nrJeytOX2f3OsGhE5ycfYuQ3FxpZXRIaCYuKD42Ki8gwDGiWlM6WliYXr+0uPiriYnh+709bYuJiSx5mUbR2dxcMxFIbpLx8eFphQVybXR0gFCX/dVJQ4/PDg6RI+lZmJPdjvErVeqR4uIsbUleQe+dO7d+v7526wuZjKu4fn3u44oKZTehnuU6nPz8lCqxIK7QweGc23Y4BnVIZHCA1NfXJjieG5Xz5pv/fDA8iC7m88NSJieuPsBampuR1gg+nR0ZIMEMloriNbj5VmiK+zdmoo+32NPzSsBON92t4wviWNmYoVgmmpurx0sU+V1NTVXjokR2jkzGU+RkpNQ9z/h+Xo5RWm3F1fzs9EaMr1EqejC+ODE2v729YZYfG5lNHFNQVa4aILu8vLWVlc8TEiIzdsMxqEMsLpzxJjOkOphOiycGqPSlOURhJl0+d5IGhYPoHnziIBmPHZENBhH3AFC58eyYIrJbaSEzP4tc6AzZrWTQ6bahWw223fiY0UhOpqTwC2emx9/H5y0NDdeuXu2//Szjp6cnlNCcrZmICIyP3Zwwnp2TkZFY0tPZfrOwMKP+9q1bX5AlcqiluW769u1bv8P49fWlQ5AY38nCLBjXtx2OwZeskBD3GGwLkU5Pl4orsCaL+HFF2H1EM4PTsHRgW4htI74PefrwAaun/MlTudu2dLvxwThOTY0+SuRG5+P5YHJi9BH2/wU5GdqyMkXns46flSqrwz0A45PIGMN1LC7O/5w4YgqGnp2deB/jg+m8fn32o73gGNQhxw784BIejPxoTjH29mdcIUHVihKjc8LDPbm6/bmnizUT39dJP3dXnr7cyWDbjS8SsbNammun8GCYliwqb2ysGJGJ4tUCQXhaooCVBT4mNzO1AZGy1/G9XGwjGQynSN34ghhWbklJdlNPe8caxk2VJJatri5/hvElktjcxvrKMYwf4ust+jIcg0eIiclBc0hyAc3Yl6PKxMHKxA8R8iJSG/rjx8dF5eF5IZJJFxKHc/KyUuuwzfWws448ePCbb0GS3Y+Pj7NjHGRSAq/k+PHvnTI9/a7bl41PligV+T0L9yjsxrDkAoc8aMYncKILwHwG0NwF/v724WnJwnL98UP8PeN3wjGoQ+CAo0e/fUyZn9t57Nh3j6MMSCfBiyBCtiO0vqxvN/7G9jI2JAURAMlkenICvF05OhwYDIQYpLXZWa+LFw+Ymp8/7grJDKBLYDCT0+846o9ve/m896lTPzhbqizqx/jQW4eD8eEQHQ7G9Xa1i8KmZafxQ/18RFtxXsnk4rM6BL8/e/bHF0B0WVi8a2djfs5bJ5OSYvNeRATqxv8yHJ3E88crlVw0VHocFwQDkf29u92VCz64F+mk6dmjTs/i6K0O143/ZTg66Wx1OeSr4vy/YiBfdORtF4HPIinpEOoTVAY0lKEM8qrgvkx8o68TY/eq4L5MfKMLF9641NfZdWtgoHOZ5mQTAUbN2uScr0qV2yJgsxXgFyKDAlIKClJrsF3EbiVbnlwF4kefSdsN6MK7hx2QZrc3v8RArkhbWzuLysf+ru5dcSV8nhrHHlxszTcK9BT56fVBQc5Re8WFJNvWkxKuoAz1ZMDHA+j87MxHSO/3d3ev74QfFUWPL8jIao+Pj0jHcxiq+0uKc1pIrizkZeIbdXRo58Ck4QlXLkuuRdIQfMSlS29dzpWnNcbFMSR48tXfrez0pHz++Fu2MDyeByCRqujv71yOZoZkjI8P31NkZbfHxgaK8zPkrQ0NFSNkPF+FIr12oL9rBSkO4NnannZurqufR7bVy8UmYi+4Z48dtMbzhC/NngVcOBC8R3lxyRAueCd8Z1szxvz81AfV5ZphU9NDFnny9I1sckG2vPncudeNDY2fIZVUGd2+vfbbhdm5T8rLFZ3Li0u/rqxU9oh53BKVKqc5Uyarj4jw5uGBDpERHREkwwyJiwpNRw7Ln+byD5y2l5sNEw9i4cG+IkfHCx4ZSZJqKBgdFpxOGLo/ZKemNq6t3fx1m1Z7HTmrRw8f/pUo9GRydOxJW1vdlEahHERyUC5NrtPHLczJaoHCvJiITEyQrVz6brgrK0v/qilUDjx8+ODPzfX18+vrq78BLmEm/3NleemzubnJJ2VFqhEkNatUZePk+STX2uycNx4ggY/IbKqrm8UDsjg+tmA7Lv9F4CMZWqUqHTNCNTs3Jix9YWHmw67W1mXyH43lStUIDFdVqh5+8ODun3o7O1ZwhM3D0TJUoUirlaeJy5HjCvBy5W6dKRUVRV1SkUCFJ1xWcGAKUhj4N/iNmrKyse7u5mvxMdGK+fnpD/p7um+Njw/d7e3sXFtfX/lNRlJy7crKjV/dub3+xeBg182Wxvo5/DvY350jl4vUu+GCM5enSiqBywzwlQAvScBXI0lZUpTXDmKqpb7xOhKKcPzwcO/acH/fXfAj2enS2tXVpc/aGpsWCR9zb2Zq4gmO791YuP4r6BtE8LF0FhVmagMDnSIJpct58fjLn/V2dK0ZIevZ3dq+Cr6hTFk8BAOyQgKkN24sfIKTU+7u5nQwaUjWMehuHMKLCJEExO/4MZE5+opFMQOlyHnh+yCgcO4EDpQkcAqJ46/XV1dO4sJ62jpWCd9RmJOe0jAxMXJfrSjsl0iic0rVii7i0G6ai9X/wc3PT62WiRM0yK3thoslobaiYtzb2yqosCBTi+uq0mhGhoZ6VklycaWqqri3qa5+DjMzkRNTiANI3ChmllwuVGekiMvx/e3wCcPYiYmFXBjBz35Z+EZk5v92bGT4IeGcJ8nNfY0MUN3d3ras0eS38bnhGYSo8RfyYgvBZWdJUxpxb9mJsdMVYysV2a04AtfX3bESFuYRJxFwlVBEwI3InJy8+iAnK7mqr6/9RntT0yJwB3t71sHcVZQV9xFHpsREBUmBW0n+jYiLDg3J2A338sUTblhqutpbl4Db1tx4zc3N1EeZm9sBXFaYnxh8CskkXyXX1T7SP/hgcXHu523axmszM+PvNdRVjoGX6elsWwJljIhAtQsmAIitIG/PREPgE3vdNMrKEpfhAA54gvmZ2Z+DGIoMoycSfuKhRlnYi7W9WVs7hZsdjh1YWZ1w2OnmRtLmGh8f62BCDLGQI0J6HhGXkSypnpubesJiBKZ2dTVdI0xhLlmiPl+9ufJb8BCzU9MfLS0t/MLXxZkD/I62xjlHx/MezfV1s6gGYTGC0r8KLpKKqan8Inlych0Zb725sXYahsU4hKodl6eLy7DLq65UD46NDd4FQ6jVVo52trQuYfczOjJ4D8UPhNBaBhUMfsQQ+GTpXjXCB631WrJ2jjxobqqZxNIyNzv1AbZ7IXRvIU5KpYrEVagGSYiJLYKBC7Oz22GoQG93nr5iVpfOetXXlw1lp8nqyMzoSZLE5UdEeHG7Opuu4WZINg+/wKYBxQW3bq18TniKvPv37/6xplo9gCIHRV5GI0IdeKgeSRbElwEviS8o1Wjy2lD8sB2upclpT622ajSeE5VXW6sZwJKDm/Ti4rVPsIbjkCqKKYTcuKLs7KRyHjsyBwbgRodn1taqBxCpZEb7lquKB2g0cz/gQo8kfnwZcMVcnhrHwUW8OCW2wy8Lv1KjGjYCpdnSVD9bU6Me8HKzjVCr81oTuTEKrH0NNVWTCF0r47M+CFnIL2PscNNNTZTUorigtqxiAttpslYqsORlpiTXgFK9c/v2H3APiudFyhGqZmeOu+GmzQ4NSsXvvVzsory9LRk6vL3i0l2ducSRfhNXrz4GLj+alavj4sEgFmTJm9LSEoqTJJwC4LvYmTOsrI7b42CSTrq6mng/zQKbeO8HvlFurqxKxI9VYN/Pj43IdHEx8cLzAOG4i6TCeA0YNG1N3Ty2u44WpozdFEOBGgwsE8dr4BDCzJVihggT2dnYTfV0td7A7iPAxyWOzfZPjGWFpKHwDRJrb0SwXxLwKkpUI8BLSRRV7QXX2dY0gBBRyhSCB1zg494l4EVkwNHZWUkVKPvR4YKytbE55QRc/N7e4uIGz+PlbMfWlzpcQ+IbYb8PLhseArWJags+i62AJIxOFgzk5WzLguTFhMvJ2hq5WwrhyJF/OQqJikEWg5FGdhPvg4fAEzokdiMJBA/fhwRBBUZQJ4EDpk4fL5DuErtXXDIBEvmsKAV2d0H+bhzg7QX3eVMnLwp/41h0VLi/2NnZ2JPDCt/gsCFRHmN69pizTsJAYM4gnaxMGdhFXDhxyO4fqj6MT7ljPJWioAchj12KTurXzEICB7syncSTOnB0cjs8+8vG/tvhYpeDJ/yasvIx3QsPdPKr4j6LQ14kvpFu7UK1N4B0EvcMfflVkmycKKZcX1I/ufgVkovkLwfcHaw2qkd0EvtufblXxWjOVqG4B+kk9bO9z+YQ6qffX3WHGJpCfR5K9WUafD/wqe+QV80hz/Mqvxf1SsCvG64+/ot2NPWPIRugmob6DjFge+FR98Mfkj/71HFB+4n/qumxoYv+Sy4N1XHkbLeXbVJND319/s8aiNSEXCLTIvfk7+7KR9ZydHjoAQ5N4p2LoHYT+ezckZHetdmZySdXrrxjs7x0/Zc4N8IK9xPhaJhCnt0JXgHHmwlHXhwS4MEtKpLXM3zceTtlS7eT7rZWkRgXeoAAwpE0pPU7mluWdtWD6SdCmr8kV9Hf3t44Az2Q/PN0tWaSz7uZgT7Cr6KHIe1iZGz8pplaqeghRFUpBg4OdmV3t7Wv4MRRflZ6I9LmpSVFYO6646JC0qanRx8tXJv9CNnKXsJwXb78jvX0xPgTMG2qorwOZDvDgjz5kOAFAIQ0MyROTqE6feurBH1o9pEojqZ7OkThWADBvwmCCHrAEUQPLao6yoqVfQUFabXQA/rMz03/DJRwf2/XKlI8TYQIwgmv9uamBSQjd9PjxInvn9qqB6pGzMwOW0KP/bKLEaFcc3HiCFUgSJ8D4PGjR/9OUh/eKytLn+GIF6okHj68/+eHDx785e7d9d+jWuLTTz/9n96e9qXl5cVfZkvTW4aGulfzUjM7CCX5mOlHT46JCRQH0jwSwsJocVeMT7rb2Z1xycpIqthuZiIbGhcXlAQ9kpLi8nT6MOjuXJzKXb+19jsY/NGjh3/dOB49Pfb48eOHf5keH3/y4Yc/+6/ZqakPP/74o/9uqK6eBuGVmyJvI8RPf7oouR6Gu3TqmCtmtpXpGU8cNyjIS68naf+De9XDkHYx8vC47Ie6IC43RNrf07WK8xsk5N5HaN1curFRpgKCHlTm2OjgXXDigz19d2tqVP1dba03iouztSMDA/cQsii4w9tKwRmDAWzXNl0HD8IOZ8hQaMdhMzPAjOl4gL/PTDIjQdg425oFEiKH2dfVuQrCp7ujdQmvGBzs717DuB3t2lkcvFlYmP0I1Oi1uZmPUSSB74NZbG6om4W+iwvXfoGyGujZ1FQ9pios6OrtbVvMkEmqSITVoIzJ2Zlktdlh//DiaEQGihqgx37ZxQgMHqFmlRkZQlVzY90MyoLwKgoUcEUzg1JQBsQOeyqvDg/cHR0duP3e48d/I0RURamiZARAWWnSGoEgPNXFzoyBbPGRn37fGKdojU8ecQDj6O1uF4kZHhPxdInYOjMRwqi/QuGcSBSVefn8SRoMmSYRV+HsYaVKPQwn4MgZLrCxrmoC9WQzU5M/e/Lkvb8Ndvfdw1L28MH9PxMCLGMnPao0mqtYSupqy4bxpoatxQr6euyXXYxotCv+w/39d52cLtBKi4oHMdMqy0sGwIF3dTYvYGZVFKuvLi9f/yUJ2f/A/6fI+Epw4hGB/lKc9V69efNz8CbVVeoBHi9U6ubw9MAMw8sjISjIJQqSzEhPZyvz4KfnMp5KnSE8nC1DN9bo9rYl8AaDvT23UTSQnZrSCLxyjbKXcPrLtTWaQdRLjY8MP1pcnPt4enLsPUSCLElQcv/+nT+KOJwS1D2NDPXfOXTotUMZ6YkqLAnBPl5CvFxGpwcx6IYBdFLvBJYP9Giqr53GTXw/7LLBhzhYmmyUkno52rHffvu1QyRE18jaOV9fXbFRnnJ9Yf4T3FwbairHUUjGDPIRwkANdRVXEXLa2poZGEbIiylAiE+OjT4mjKFYrSjsg0LuttaRXl4WgTtlS5OFfBWqOrzcbMKhD93DMRpnDy2Nz3ijvqtYmaUlelTVVVZOggIe6Om+hXqmtJQENdb4dKm4EsUaFeqSQSwZKUkJGhQRtLdor2EJGhkcuLdRR0aYPOixGzeOCaE7cbUfdjHCwXxPZ5sI3PwIjxFG1sQydZGiBzOltrJsFAYIYdB4OFaM1xbBszJRQikusCgvpwOnactKlP1QuKasbBQllWQ3NICCMZTH4IUDkgReMWZoGMMn8ejR77yLmbLlleZhuDAPB+sIvNzfy9UmHFw6Gb9dpwe4+ZDAp3qIBVwlvg9HlJUVdCDkUQMAh+CYNfSBHqXKDekHfbBESOK5SuiTlSar3e7F0Y5WJn6HD3/riKOlKQPX7WZvEWpouxghJFHcxmA4s2AESNCmqPbeoE8J1YhZhlOxkCCe8JlOoixmo3pvUyLUdRKlNBtv6dmUO2VL0XETx/oKfJ3cTg9UTqKAQCrl5D+rHlim9aW+HhuloeT+gtc77YddjLDftzljGo4yFcuTxqEA1EnzY+cYZL9+WidtzpqGb2wPN6WPrWuivmS4+kj15ZXjF4L15ckfve2mL/++3ST4KNUMdqenoHY20MUrGRMFemCGelk7x6N44EXp4WHhwNOXOj3szl9m4ZiFzh77YRej5znb97x968zcUJrMRMwiPJG/9dY3394vPfbNJtvNXENJnSFcTK1jEb7sgLCN1y3RLB35+tJQeuyXHV7pCKGyHq9MhOz3zKR+hFA/QqgfIdSPEOpHiOEi5EUbgvoRQv0IeXUj5FUoo3lZM+5VidSvnUOoHyHUr8uifqN+o36jfqN+o36jfqN+o36jfqN+o36jfqN+o36jfttD+18hZpCBm4KOVwAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleScalesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEJElEQVR4XuWbW09TQRSF+9v4Z8ALkPAMhBAeRNLGeA1tTGMEAUvFYptqmtp4iY1GfKh3jVq71NVmpBzaniPe0G8lJz2XPXtm9jezZ9r0pL584eskKcUPAR8IX6OArK6uqlQqKc7Qdr+68v39ffERDADiI5PJaGxsTLOzs9re3tbk5KQ6nY76gezs7GhxcbFr0+9kbm5OhUJBuVxO8/PzmpqaUj6f18rKilqtlorFYtd+eXlZ9Xpd09PT3evNzU0+kCiQvb09VatV1Wo1NRoNLS0tKZ1Oa319/ZBhs9nsBnNra0vj4+Pa2Nj4HsyFhQXt7u5qZmZG2WxW5XK5e16pVLo2ExMT3U/XYaA+N/B2uy0+FP4awgfCFx8IHwhfyfX6tcQHcoJgfNvE8oHwUxZffCB8IHzxgfCB8MUHwgfCFx8IX3wgfCB88YHwgfDFB8IHwhcfCB8IX3wgfPGB8IHwxQfCB8IXHwgfCF98IHwgfPGB8MUHcoL08qV07lzvf77hnA/kf5sh+qaHD8V/Le2YevVKOn/+IH4jgbRa0oULo4P98aPUaCQH8vx5vE/+DEkQxF9h4zx55QofRiIgnjo3bhwEK1z7BZObN6VOR3rwYHAwg02SCj99Omz34kWyGfPhw/FBun3F4r8xEFLRETzsut2W7t2T3r2TarXe/bj04/IXLx593n//0aNkM+vq1Z8LaLRvJ20dCXE81qL+5InkDubzx++ky589K9XrfyZQru/SpT9X15kzUql0eMH+4RliUoVCz4FnQrj/+bN0//5Rx76ftKI3bwb7iPqLswntvH5dGmVvGw8Y2/1McJ3uLl8eHtjoO4OGYVvLKd6p/tat5GBSgyqw02vXjqarUY68FoQ05OC7vKeh75861Us5cT4c4FGjyikyPHM7bW+fw7bdtmk2D8q8fStVKkdtHbw4KKFfLu/6yuXeFzmfj3qrNrSx/0vgD++ynj4dHhAH3Qvs3buDbZyCslnp2bPkIzPqz9feJNiPz+3THfJ1tJ3edoeytllbG11vf7vs14MllxteJsTCvm33+LF0506vzv66PSMzmfj6h8U2+Ei5kz7CjPAoun07PpiDRmXSssP89Y80Xw+aAQ6MZ55TaqjLdg6Mbd0prxXDNhvheTotVauHy/vwyPds9qcBBJu4NSPJTtFttj+34fTpwZkg9f69FI6/vdOI5nvn3yRriu0MI9jG9SX6PJQPPhw4f/6NmPB/y/rffsviiw+ED4QvPhA+EL74QPjiA+ED4YsPhA+ELz4QPhC++ED4QPjiA+GLD4QPhC8+ED4QvvhA+ED44gPhA+GLD4QvPhA+EL74QPhA+OID4QPhiw+ED4QvPhC++ED4QPjiA+ED4YsPhA+ELz4QPhC++ED44gPhA+GLD4QPhC8+ED4Qvn6jvgLxBzfrDplOIQAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleScrollZoomIcon	^'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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleSeismsIcon	^ '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YII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleSelfCallsIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleSliderAndCubeHelixIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADMUlEQVR4XuXd7UtTYRzGcf+yszkTRVEyxLYzMzNFbFGKhYqOzfmYUSIZZEWPVioYEQRmoCAEkUTlA5UF0fZiZeUgadjYLjuzGREEhQOX32tccHMGN4fzYefHXt1Z6+v8ZFKy+I+AD8IPH4QPwg8fhA/CDx+ED8IPH4QPwg8fhB8+CB+EHz4IH4SftIMYhqFfa/utdpuh7FQdydqtZhvKcaSaYzU31Tzru3yrBVYLbcousste7JBtd45se3JlK82XUVooo6xYxt4S2Zxlspmm7GaFHGaVdrlrlec+rAJ3vYrcx1TiblaZ2SrT9KnSDKjG1SmPq0sNrh41WfVa7XB164R1vd/6ftDt11B5my5VtOjqgeMarm7QzdojGjlUp9GjNRptrNJI837d8pZrOGDqWo9TV047dfGMU+eGTA1e3qeBG5U6NVatvjt16r5Xr477TQpM+eSf6ZX/4YD8j86rfXZYnU9uq+fphE4+m1H/88c6OzevC3OvdX0+pLGFD7q7ENHk4qpmFtc0+yKm+ZdxLS0l9O6N9P6t9DkorYal6MeEvkXiin+NKxFLiA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQPggfhA/CB+GD8EH4IHwQPsgOA+n0BNR3sJ0PkikgXZ529Xr8fJCMeWWZO+iVlUgk9F93akoJn+9Hk+vUdf1Df+711x/9sVvNtpyOsLKyouXlZUWj0S13bWJC016vXrW1bazTsWfy3pL3iDmuIhKJrIdCIYXD4S330/i4Jlta9MBqcp2OPYPBIAtk8+eZlr2mpxWzXldK1lpn2v3hDnRJIijNILgTdtI9Q2KtrRvlz5AMmSFfGhs3yp8hGTJDxJ8hGTRDktn8T7FND5EPwj82jx8+CB+EHz4IP3wQPgg/fBA+CD98ED4IP3wQPgg/fBB++CAZne8rE5WE57/UxQAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleSmoothLayoutIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleSparklineIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEn0lEQVR4XuWbW0sjQRCF/eciPhjQJ1FBAlFjwEvwQUVR4yXeFRVEo/GOIsEooiBeo9ZsKmwvs2EyUx0ncabPgXlZzvZ26uvpqq7pbbAsfAVJDfghwAeCL3wg+EDwhQ8EHwi+8IHgA8EXPhB8IPjCB4IvfCD4QPCFDwQfCL7wgeADwRc+EHwg+MIHgi98IPhA8IUPBB8IvvCB4APBl9lAqKiRkRGS+jOZjMi7vr5OOnNgSb06Y4cKiArCxcWFOGjDw8Mk8W1tbZHOHLx42KG1t7ebBaR8NXZ2dpJ09X59fZFk3Lu7O9KZw9raGkm9uVzODCBOW8P9/b31/PxMEu/k5CRJAub2FlXanvr7+0nqnZ2dDTcQ9cPe39+t19fXf8/t7a21urpKbkE4ODgg5T87O3P09vb2UktLS+mZm5sjpxXslSfm5+fJyzs4OEj8hDqpFwqFUkDLA+/mtT+Vkrjy2gMpGddrHuyV5h/8sjcAurq6IqOB8Dbk54/s6emhWnhZ/HY9PT2ZCUTt034lSB5rZWWF/PYqP1d3j4+PZOSWpRLm4uIi+QlXkqd0vPa5crFgXA6xVy68Qr+/v8mvMfv6+shPb/l8j46OzAFSXkZubGz4shfzmOPj47SzsyOCMTY2Jvba5zs6OkrGVFlcRhZbI3R9fS0tTz0f9vF4JycnokDpeFWJfHp6SgsLC4Rf9v6SpM1FfCC2gEm3DvZOTU1pVVG7u7tVt3/ggHAAPj8/ue8lTtzn5+dauaKrq4uCAiKwQOxB8Ooh6QTXaYtyq7zKvcvLy3hvCAeB+1ScYN1a48qbTCZLzcVsNkvV5ApO4pK3IpFIcJMUBwgHgMtiSdNQeSUr1m3LiUQi/x0UK3lTqZT4QGkEkGI7Xtze1vGq4HIeampqosbGRmt6etr12wqXyexTz9LSEuFXWQFVvTq+dQNyeXlJP8krUq9kVXM1Jp0Pj9nW1mbWllXNjQ21p6fTaa1c4dbR1Wky8oldt0McCiDcd6r2BF1pz6/mtM1v2c3Njag1wlXVb53iawrE6RKBZKU/PDyULi1IVrv9z2KxmKN/b29PPI9KlypCD6Sjo0P70hpXRK2trdqn5+bm5lJ15OTl7ak4ruhNm5iY8OXzQOCAeB3q7Do8PKSPjw/tbxVKxX6U49/l7Umau7gzLL0diV/2BrQ8DTWQt7e3upx21QcpiU/SGWZfNBo1q8riHyX5YvfTf+NvO10UZKcelpNve3vbvJP6/v4+1RqEykXHx8eiqszr7WAfNyydrruGGkgtW9YquJICwl4MdHd3e0Lj5qVOqRwKIPF4nGoF4uXlpfTNng95+XzeNcA8D/ZxWTwwMODqzeVy1tDQkHllb60SOAdtZmZGNDZ3bqWX3LhE3tzcxC978YUP5Mc5Cx9IAEDU8zyCD0RQJrPqdc8XH4gHCHu3AR9IQPIE/xc7/KQOBgIfCH7Ziy98IPhA8IUPBB8IvvCB4APBFz4QfOEDwQeCL3wg+EDwhQ8EHwi+8IHgA8EXPhB84QPBB4IvfCD4QPCFDwQfCL7wgeADwRc+EHwg+CHAB4IvfCD4QPCFD8QM/QGnQh9WCjgVcwAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleSpiralVizIcon	^ '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RK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleTimeLineOfRoassalIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAD9UlEQVR4XuXXW09TWRjGcT6XV34BEw/xwmg0xpioMTExXnjhIWq88hCjUaPRBCeKBaMIRAQFbNpKdRCRCREoCKVyKi3CwLSUlj7Os5sZ4iTjDBfGjPN/khW62+61V9/fendL1efP/PyXUsUvAR+EHz4IH4QfPggfhB8+CB+EHz4IH4QfPgg/fBA+CD98ED4IP3wQPgg/fBA+CD98EH74IHwQfvggfBB++CB8EH74IHwQfvgg/PBB+CD88EH4IPzwQfgg/PBB+CD88EH44YPwQfjhg/BB+OGD8EH44YPwQfj5v4BoZETlxkYVTp5Ubtcu5U+c0Mr4uL7lYkvT0yoOD6u8uCgciJyF9+81++qVinNzqwUoLS0pPzPzl4LIhQow8vv2Kbdz5+rI7t+v8bo6TTQ3a/mLOdaM7Cx9+qTyyormnz/Xby0tyoZCmvWcxdFR5aemlInHtWikYP55rzc3OflDY1UNxmLq6ehQPpfT1MePmkmngzoo9fKl+mtrFbt+XeErV5T2bl/IZtXtgrT4+Bef0xMOq8sQifPnlTp1SqPr1imxfr3imzerbft2tW7cqIj/drhrolevVt4bq6lR5OFDTbij5l3EWc856esWi0WVSqXKtdMuatbr6PQ5jT634ehRxQ8fVnsw18GDCp8+rfi5c+q+eVODwfWfPtWHBw/0wfAzXnchk/muKMHa/21jBflq5/tzr4J0+UM8qq5Wd1eX2vy4/dkzJZNJhe/c0ZOLF1Vz9qxCLni0rU3d0ageX7qkGh/fvXxZ9zxCPn5x7Jg69u7Vmw0bFN20SU/27FH9gQN6tHu3mtwld48f109nzqj+xg3V+v3VFy4o5vl+9u6OGLbdO7+vr09DQ0Ma9c5/0dqqeCSiel/7nqGrjdFw6JAeB/MeOaKQ56ozVJPX1+Q5m73+2K1blTUPuJOSvb1u2unvNgYGBv7x9bGxMaVSqa++PuwOn/QmDB5X/eoHhb+5Jwe3qawBgjHh8efzcy5a+u1bFd1RwXFw7oKLV25o0NyWLZrfulXzO3Yo6TGybZt6XcjEtWvKvn6t5Xxec+60om97a9l52URCg94kmf5+pdyVk7dva8SYKXdtvrNTaXd35o8x29NT6Y6Mr8P/UnfK3pkl79Ivv0OW7t//ZsVRoVBByLmDC+/eif8ra42/tNy/Knu3anlZ/B+x/P9D+CD88EH4IPzwQfgg/PBB+OGD8EH44YPwQfjhg/BB+OGD8EH44YPwwwfhg/DDB+GD8MMH4YPwwwfhg/DDB+GHD8IH4YcPwgfhhw/CB+GHD8IH4YcPwg8fhA/CDx+ED8IPH4QPwg8fhA/CDx+EHz4IH4QfPsiPl98ByUwFby0fOIYAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleTreeLayoutIcon	^ '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u5nePWZ+kW8AAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleTwoColumnFlowIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAER0lEQVR4XuXa/U9aVxzH8f7/yZJlXetsa0XXobW2ndq6Ne2i01jb1SfEuUoi+BgY8rBBEUHu97tzTgeCwBXdrTN5f5KTq9x4fjgv77n3fsItVX5uUm7xl4APwg8fhA/CDx+ED8IPH4QPwg8fhA/CDx+EHz4IH4QfPggfhB8+CB+EHz4IH4QfPgg/fBA+CD98ED4IP3wQPgg/fBA+CD98EH74IHwQfvggfBB++CB8kOuKyL6IfDRj3owXojplPntjfo6YsWXGqVxqvr/iIkcR8XZfibc1aqYIq7c9IZJ6L5JZF/EuNx8GRCTqFr+XITJrYMq+Cyl/LrnF72kkXhrnY+GDNDBWHcbc3D1dWRl04927AV1bCzmAWOyRO9Z/P4MROT4+toeWxZTkosP49dltXfmpT5en+3Q6/LX7OTZzX99O3HEQqz/3tcDwQRogvziQYvGZLi091IODUZ2d7dd8flwjkZAuLNx3AIeHoy0ghUJB8vm8lMvlluHFJx1IITKsH17e1f23D3V88Cs9/eMHB1JYG3YAB+ZzPkhHkE/mf3zKd8vyvMlzV0es6xYjlYK5X4z4blk1g9PyWWaDv2W1w2xL/WrpfO+YMuc3zaj0tHiS+9i4WjoNbysskl4VqZ0I/6beY+w94r/8falUkmQyKUHNxwcJAMQOPsgNADk5+bwVVatVPsj/DVKpVMTzPAn6ikOD2K3GLmCtVrvc27l9bSy3vzhedT4+SNOWk8vl5CpXR5Dz8busRpc1bbadafcofNZl+f9325fFrl1WbExqscfC77Kuqctqfprid1kBdFnr60O6sTGsm5vD5jikqdSYA9jdHXHHeDzs6pQznPYnquYuK/LqO42+7tfNN/dcf5WYf2BqlAGNzz1wENvmmFsZ4lcn3bqsVOqxLi8P6tHRmEajQ67T2t8f0adPv9H6+UrlxzaQ809U9bfz5PtBVyymP4R0/vm3rtOyXdbCv+WiPX/y+yM+iF+XVSo910QirNnsE7fo9mjOOZyZmX53rrnL6vRE1dxlfVr/3l0Rh4ufi8TMUkgXJ+84nJnx242rhd9lBdRldXui4ndZ1/himM1mJZPJuHHdVQwfpMMC2vtFsVh0gw9yA0Can6js+cssMh8kYJBuHZV9Bzk9vfgljw8SYJfVraNq7rD8tjF+lxVwl+X3RHX+Kui21fG7rIC6LM9b66nLapvv74RPlxXld1lfsstqmY/fZX35Lsu+rafTTzp2WS3z9dhl2bf19G8hfnVy1S5rb29Ed3bCF4L02mXtLQzozvwAH+SqXZb9RmO1OqG9fS8rfGGXZb/JWKmXi5kof8sKosvynY/fZfHDB+GD8MMH4YPwwwfhhw/CB+GHD8IH4YcPwgfhhw/CB+GHD8IPH4QPwg8fhA/CDx+ED8IPH4QPwg8fhA/CXwI+CD98ED4IP3wQPgg/fBA+CD98ED4IP3wQfrrlHzNd3LoOQ52QAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleTwoColumnsAsFlowIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEY0lEQVR4XuWazWtjVRiHhyoDogMig8ooWmQEkQGVWTgigkvX/gPuXLp058KvvXt3IopI5kPB0elga5h2qiahk4YKU0nSNmlDmzS017RNmryv7zmmnSSTr3Zua+H5wctJensv3PNw33PuQ06p8nOScoo/BXwg/PCB8IHwwwfCB8IPHwgfCD98IHwg/PCB8MMHwgfCDx8IHwg/fCB8IPzwgfCB8MMHwg8fCB8IP3wgfCD88IHwgfDDB8IHwg8fCD98IHwg/PCB8IHwwwfCB3JcKYpIzuovq7hVzP6WtDFrlbeqWx3keiJf2RkfWV2yOi3ulkVG7fP7Vh9b/SN8IF2y0Jz8YSpl/1sbAEbkA/nv9gaXyAW72orwgTSTbsL4NhrVK4mEXrb6fnpar87MeAA/3b3rxyvN73tlp8nW1pYbpB3Gex5GNPqWJhKv+rp+/R0/zs+f16mpN/ytz8y80gGHD8RntglkMgg0EovpzVxOv5mY0Gi5rFfv3NHvJic9gJv5fBuQzc1NKZfLsr293VYiL3ogQfCoxmIXNZd7RiORd7VeH/FAguAxf+v5/Dk+kG5xUxgb0LL+aDTavi/3aVkif9vRh/q2rEZjpKNtfc5vWZ0p2DTO9gNjx5asdodc2EW+2H9auq8dI3b8Q6ui8Bf1IePWiAc5v1KpyMrKvQX7Qa/HBxICEFd8ICcAyM7Ojj+3VqvxgfzfQKrVqjQaDQn7iUMDca3GTWC9Xj/g27n47W9Y1+MDaWk56+vrcpinI8zr8V1W02UlnM+yttPqshoDtrzuZbG3yzpjbeyMjS+0uKwK32Udlctq3U3xXVYILutaMqk/pFL649ycH38tFDyAGwsLfvw5nfY6pZvL2ttRtbqsZPKCplIv69zcS+avLmk2+7zXKJnMqL/1dHpUy+XH+eqkM8kmEAfgcjyuE2trem12VsfMaY0tLemXkYjuHZ+uVu9zWRsbGx7MPZd13gMpFJ7SePw1XVs7q7duvWkwzrXJxULhSVtvTvOB9HNZU5WK/pLJ6G+lkp90N/5p3ckLx/Fxf6zVZXXbUYnM77usSuUR/0QsLz/tb7dUekJv337dwxkff3v/aRH5jN+ywnBZvXZUfJd1jC+GpVJJisWir+NWMXwgXSbQvYEHQeCLD+QEAGndUbnjB5lkPpCQgfRyVO4dZHd3V/hAjtFl9XJUrQ6rXxvju6yQXVa/HVXnU9Cr1fFdVkguK2Pj8hAu6/6n5us+LusTvss6SpfVDoLvso7cZTmVMrG6ug+mN4zhXJb7vLp6lq9ODuuyxhYX9UY2OwSQ4VzW4uKzBuk5PpDDuiz3i8bfa7UhfpflXNbIQJflfslYqz3cbFuf8ltWGC6r/zrCd1n88IHwgfDDB8IHwg8fCD98IHwg/PCB8IHwwwfCB8IPHwgfCD98IPzwgfCB8MMHwgfCDx8IHwg/fCB8IPzwgfCB8MMHwg8fCB8IP3wgfCD88IHwgfDDB8IHwg8fCD898i/yRZSg2d3sdAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleUseOfDecorationIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABFElEQVR4XuXYsQkAMAhFwb//0JoMkIBNIHAP7MXrTLffT8U/gQ/i54P4IH4+iA/i54P4IH4+iA/i54P4+SA+iJ8P4oP4+SA+iJ8P4oP4+SB+PogP4ueD+CB+PogP4ueD+CB+PoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggfj6ID+Lng/ggfj7IZenMpnY+iA/ig/ggPogP4oP4ID6ID+KD+CA+iA/ig7yuhvmvEz8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfzOLZ+d5T9+ROpBAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleUseOfMetricsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAC2klEQVR4XuXbvUojURjG8bkCG+/AexHBxivwAqKdtkLYQtgiWG1nq52wTRZZhZVdkrCVFq4oKqKLRYyO4gdR8/HoeyYjJtEYB42Z+H8OL4SYOYHzyznHSWa8uzt+4hTv4cGKtWTE1pyox7v35KcFiBsgL2J72lm09hwqH6QeJNNi6BQB5I/Vv9f1wQdpB/LThumH1YrVrNU3q69W362+hMOYskq8AJIOa85q3Oq3VdZq0moh7KPf6j8fpD2IDZJXDAfNDeQvq5zVplXBqhz+LfsCyN+64x1sNexj0SrvPc4i/gzh7yE9BVJRRaWIrbmzqMe79+QTtADhhw/CDx+ED8IPH4QPwg8fhA/CDx+ED8IPH4QfPggfhB8+CB+EHz4IH4QfPggfhJ+H6PhYOj0VAkTlsrS9Hevf05XPy6FgZojOz/kXOPCXLD4IP3wQPgg/fBA+CD98ED4IP3wQfvggfBB++CB8EH74IHwQfvggfBB++CDvEG1sSGdn4oPwwwfhg/DDB+GD8MMH4YcPwgd507lFpSLlcm3PLbSzI21tiQ/y1gE/OZEymU9zQtf7IKWSND8vZbOf6hPe00uWLi8VzBT+LInBDDk4kGZmgkv+u3HZPx+kHsPdHzIxIU1NSdWqXvN6PkgnQVxGR6VEQs33iejoSLq6anxud/fJc3yQ90YZHpbGxoJBrl+2gsc3N+IvWR+JcX0tDQzUliz75KtQ4O8jXQW5vZX6+qS1NQVL1Pq6tLzMB+kaSDoteZ40PV1D8f0ARMVi495hG77298UH6TRIKlUDGRyUlpaCQXdpeI3huNuSdXjIB+k4SDJZAxkZCU4K3X9aWl1tBHEYwH2layD+0JB8+2LQt+UqrsUBubiQ9vb4m3iczkP44YPwQfjhg/BB+OGD8EH44YPwQfjhg/DDB+GD8MMH4YPwwwfhg/DDB+GD8MMH4YcPwgfhhw/CB+GHD8IH4ecjcg8nrAVd+NhQ9wAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleVectorEditingIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAADFUlEQVR4XuXVS0tqURyH4b5wgd+gUeUgCCIowYGTDBRxEIGoYYSRN8QLEhlWWpQpmVkNtH51/ou2FOcyOJwD0fuCqPuy9nY9e+HM6yu/r9QMfwq+MMhgMNDfDtRut/UvbuhX4wyHw+m2RqOhbw/SbDbdj8xkMkokEopGo4pEIsrlcp9+vHdcKBTS7u6udnZ2lE6ntbGxocXFRWWz2d9O1tramra2tnR4eKhkMqmFhQXFYjHZNQOBgAqFgvL5vJaWltx14/H4dCw7x7uv1dVVhcPhn+7t24CUy2X5/f4pyMHBgVZWVuTz+T5Nysfj5ufn3UTay7YZytzcnAOZTCbTc7a3t91EemMb5Obmpur1ukOYnZ3V8vKyu6adb9cwkPX1dXfcRxDvvuyeSqWSgsGg+P8h/7Gnp6c/rjD+nzo/Pgg/PggfhB8fhA/Cjw/CB+HHB+GD8OOD8EH4U8AH4ccH4YPw44PwQfjxQfgg/PggfBB+fBB+fBA+CD8+CB+EHx+ED8KPD8IH4ccH4ccH4YPw44PwQfjxQfgg/PggfBB+fBB+fBA+CD8+CB+EHx+ED8KPD8IH4ccH4ccH4YPw44PwQfjxQfgg/PggfBB+fBB+fBA+CD8+CB+EHx+ED8KPD8IH4ccH4ccH4YPw44PwQfjxQfgg/PggfBB+fBB+fBA+CD8+CB+EHx+ED8KPD8IH4ccH4ccH4YPw44PwQfjxQb4RSKVS0cXFharVqobDoV5eXnR9fS3badufn591f38v74ROp+M+93o9XV1dyd7t+/n5uY6Pj93nwWCgyWSim5ub6Xndblfj8Vi27+joSJeXlzo7O9NoNHLj8CneQfb3992E2HsikVCz2VQ+n1e9XlexWFSpVFKtVptOWLvdVjqddvtPT08dZKFQcJNdLpfdcalUyo3h7dvb29PJyYkbx65j22OxmMNPJpOyh4JP8Q5iT7b3hNsTaxN+e3srWwkPDw9u9djLWxm2WlqtljvOnnbbZyvBVoB9tmN+QNlLd3d37jw71sa2ibfr2OqwMR4fHx1qv9/ng7z3Bl50tq2EUZhJAAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleVisualizingSoftwareWithBeziersIcon	^ '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t5T/yz92IvXRDqRfGUPpU6OIOwPMqMf2TPpTPwVw4MCom9xXXKzWxfBMkUqVGpercxAIvrq6+vJHb779Cw+/oN6E0tbFV3k5toYUWhGn2orsu8CsArbdVJMHmQGqvB//PsAYe5U89yD5IvwCU4QoTUx/DmxgEyIrq0pOebiiorMvkZien5rae3RiYvnCq5c//O2ZvpPfjjA7roN3nNIx+BpFvN0jfO3KZuViWacZyKt9sVj05/+1oaX3+lHhQcKUdlR1HE+x0rWUYHC8b3QcVev30J4pQBHsAdKCRRfLqXgsFutsamrqkclUWp+oIoEJuOJlRk+mpU1Mcjizc2AwbEG5o/VSz5RCURfdaNUlQRnKTO6NWxrG0p1OpD22plMqj/oQ8hUgjgxmWUor0r3ehtY1oZjJrxOKY9gpz6P1Jg98IQYm0+B21zYm+y7ue+jY7DSk1BTwhmfT0p6/AM4mTLvsqiqw7ioUoNGxvb13FGXMJNLrL+Vy/vhnG+Jgn0pr6/2aIhHYDK4tFvLuLavBKIn1FLO8XGustVS30V92JemUbYs71tIygxGPp6V1dNQYeg/0ZvsvgGhqR6aTcu4//bYk7Uf/AswJoZKB+7mAEUYjNhV7a1FhP0IiUUGBtMzp9EfOnbv0GqSIytXtkI4YIbe0pcXjg3qE9LRhEOgXE/a0poq4ZD94drbXa2Mc/2Ch79ZPJrRz7ygzvvu7ZvHuL5ejj37ejLznJxBjMh+xij2e5i6NZmq2oODM+fHIu5/M9n/nDyH5c7dfPPOtX1ssjW1sdlGRxdLau7Bw4429e1++6y8LjW/UJlgJworQ5/NRq7RnVrTB0revr28SDsGVlpaWC4VC0fGxsYun2mffstt7h8XiSh04WjmIJ3RmljY2NOw5nEisPG+375h4sX//V25N7Xv/pYPf+M+L+7/27xfm7vzsrRdu/axdf/37EeH8OwrufmyOTyTWlshicR4y1spQmkKKmGVxS+041CmRSMqg3srKSkM5YihguS2XW109PSN7o9HukbBIFF06snLFZvOH3e7qmk8toad37VoA1yico8JOuXsOnwiHEwUlDiNuSiSaAaIAEyBOrw9FbDY4p5uXtx3hNYJXXaC4fZkrXx1H+Yve9GPvjSH2FBZfJyD84ZMlspRTiDk5KpXRDgodFhdxg2EDPSIQwLIcjhHBvkitNjvr6yOtUH+byTnM5/M/HWeGVdS1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QmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleWormIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAAE30lEQVR4XuWb7UsUURTGj1pgEL2gtBYo0rC4gS6xrtpWhNALSAYRqR+CNMQ3FHxBwxeULBPLD64vVFaIbUUJuuJLiiSSRmQvCPUX1eEyzMzOzDq7zqwfnh9cdJmZ/fA8e+8595w7hA8++OCDDz744IMPPvjggw8++OCDDz744IMPPvjggw8++OCDDz744IMPPvjggw8++OCDRFISkc9HdPMmUW2tMq5eJcrNxdcnoVy5ojXBbPj9+Fo5yvHjRDU11syQR1kZvm6OcPhwbEaox927+PrZTlVV/IbwKC3F19A2zp7dmxnycLnwtbSFeA2orydqaFA+37qFr+WeOXIkNhMePyZ6+9Z4DA2JdBmfPZCfb82I+/fNjVCP5mYiScLX1VFDenqsmcHjwQPxzPnz+No6Ykh7Owt95kx4OSnJiiH9/cqzmZn4+tpuyPS0LLbHE17KyZlbim5Ia6v2efyYEiPp6eZmdHVFCr67KZHfwSk1PjalvcGgkejmpoTDRAMD2sFpMT4xEggYG2K+NGlN+fSJ6Pt3otlZ4/u5WJmWhq9zTFRWxmKIbIrL9fW/EdvbRBsb0ZcxLlqePImvs2VYrNgMYRMyMnb+uFy/dojev7cWV44dw9faMqdOacvvk5PmIvPyxDNja8vjWV4zD/ShkNaQGzfwdY6Jo0eVBtXDh+aGbG4SrazsHuiHh/Uzj8s1+MQxWwoKiJ490wo8MiKyp48frWVfLS16Q3jvg0+cnDunF7Sx0Vr2NT4uzItMn/l5txtf27jh5pPaEN6N75Z9hRf0s0sebBR/z+XL+NrGTUmJtg8SLfuanPR45hbNA/2TJ/idRlvgMsidO+YpMde9eIniGRAt0Pf1aWcc/vK1Rw4eFD14dYmE4wKL29SkFl+SZhf0phhVBfBxqAbG5mhnhNYUdXlePVJT8fV0ZHc/OGi0nAlTpt7pkwN5hhUW4uvpiClmPfdgUJK6+nJyevpFO5h38Orr3d3i+awsfE1tgX/hLOijR1qhJyaI2tpkwyRpOGgc6OvqFFPz8vD1tBW1uPoNpT7Qv3mjv5dLOPjYhNlhba5rGQX6zk79vdeu4etoKxUVu5XzhSmvQ+YdS3wcLrlExo3BQQ70p0939uIbkjC4dctntKqrhQlTUyLN5fKLHOjl7Es+kMcVZb6XZxn+IQkHKS42W56EKVOq2TM2plxnMw8dwtfPdqK9gzI0pAT61VWimRmi0VGln3LvHr5+jpCdHe2EiyR9++l2f/6ijTV8epLv8Xjw9XMEPmJaXq6YwbNA3o/Mz0vS/LLb/WOH/9eW6y9exNfO8dnC7VxuVPGBbtmYDx/c7t9/fb7NbfH56VNhCMcgfBKE/iyx17u05vMtrxN1dIhrly6J3smBA/h6JWzPwvFCbv2GQl7vxCufb/ylqImpSzLc68fHQfhXf/u2UcDPy5tfCQReTItzwnJVmMf16/i6OUpysogpvO9Qm9LR4fePvwwEltbFzHn+XLmWkoKvW0LhzErsU/z+xTUlFZbjCn7/JMEUFQnhufWr3ptw7x7/FOQ+cOKEtl/Pb/r29uLv3vcVo9OTPPBfb9hH+FVrDvgXLoi/+K814IMPPvjggw8++OCDDz744IMPPvjggw8++OCDDz744IMPPvjggw8++OCDDz744IOPbfwDrvFXiiOUZrIAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleWrappingTextIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAALm0lEQVR4XuVciXLbRhLNp28qtVu1tamt7JFNbGdjx0lsWdZBURRFifcFAiR4gSABAiDlQ9Fty/IhyYmtt90NUpEVWbZzWdmZqilAM9MDcB6mp7vfjD4A1E8XKX2g/hCoD4j6SX1A1AdE/aQ+IOoDon5SHxD1AVE/qQ+I+oCon1QHZDgcHu3u7uIi516vd6QMIOl0+mhlZQUXOU9PT6sPiPqAqA+I+oCoD4j6gKgPiPqAqA+I+oCoD4j6gKgPiPqAKAhI09DPHZjBcHhufbmQf+V6WrbhD9QH5F0Ayc3PIXAryNDV6Pno98r44tJV9P02ogsVWMEQC3MRLGoWLl25JjL8t9PNiRzfz0XTuDwxhYAAGA4H0o9Vz4hsxvHRc3tYyHQQiUTh93KYjSyrD8h5M8QwDGTyGtzBEDW6X04XaWA96IYlZTevf4V6owG9rME0a6jqFQwIMJZPxWMwyjlYVR1VkjWMqshUS2m5FitV1MwqjLqLSkUXuWopi3rdpGf46gNy3hryJvX0atvzVdy79MXZ6/fVB0TyaGArFQOxVEa+/uhiimZHC17goJTLSn0kEpPrkNoPB30spjOoL81LGbcdDBxUtBKatGZwX3LVq+iS2tKNBno0WyqVirTlZ/gEWOBo0KmMn8OqT31AKBs0aDzIrJ4KmobY7DTiyQLaTRMDryGDx+1mb9xEUtMRBAE8P0CuWEaLBjPoN6Wt55goaU3YXiB98VWrtFB3AxRLDVFfJVJ5KytDpBIhuL6Th02qLuibx89Rf4acyu1m88zyrtUkvV//SflQfbP31wWkmM/Ddbrw6Avu2jbapGoM/qqpfOrGDTiOg3arJW3auhYCQOqmZvfEirLtDiyaMT7J+32XrK+u9CMg0tVotuSe++J6vm/0HDiuJ/2My9QHZPTDx7r7r3/+u+j1b2aTaJCZGp28hPlIBNHILP7y4Z9k8KvxKA3+AF63jrTthSZxbJnaE4Cxq0hE5qQvU19Gmayr61/dkHaBq0tfdldHLhZFldoPAxfNroHpWEJ9QNT31P8AgJy2ck7mPs0cZ/CqGTscBm8cVEPX37qt+oCMfnijUkaxUMDHH30IrZzGQmQas7OzmL89cTw4VW+A61qd9H0D//pyghw9E/PRBKp0/fZWCOR/P/8UerWBVsOU8kIugY8/+fLMtuoDch4gZHaaJq0JFDrRdUNmSmIhhmQiLn4Dt1lOLFJdFR7NlGSmHHriZKa64luEsyBbSIq8WW9JOXv689HlM9uqD4j6a8gfBxCnbaJmWeJl8+ywOqEfUsouwTCbqJHZ2qhSjKrVRjIeOnQ1LSeeeF0vipdtt0y0TAO5UhmZionrlz5DMZMRGb3ZRoniX02q5z7VB+RNfki2hDQFBOdmpgSQWHRWytmk1YsJVFJLWFxKIlHSESNAOLgYmZ4TQK5fuwYtFUcilUUquUzrzlVSXRpu/vtvSC7M4pPPaC0q6ljKVbCYDyPH6gPyFirrtAWlvsp6j4CMY0inY0kueehnDdRZ5bxgn4zuvk5WfUDe0lO3O3V8emUCsSlWWwv4ZnIat6dnMD9zS9pcvfatRHgtqy3t2Sz2OGRCa0/k1m1RRS2nji+/uErhkEA8+7ZlI0/WmaZlECeVV67U5P7WZFTCLeoD8hpAmFgya1UsxAtI5cpCNvFs4by0EC7iJY2ium5HSCou1zLh4swkE5vHtWZPZsnVy5dljYkTaCb5Hc2OK4RXstwRIozvM7mSmNnqA3IBzd4xKXWanFIaECaT7I6JciGHLllOhUICXYrGWhRuT6ezWCAiSmaSWUGqbUu0l3n45fk4stksSvkctSuGM0mnyC5x6jf/80902i2K6PbEYEgtxhEMPDSJX+87YbltkYq7fIVMbps4mAnkyUzmduoTVEwy+S75EKE3bWgFIqF8dIlgKpU0LFMOqDyznIbZ6wvBxOqn2uiQ7xKqNtf3iCtvoVLtSlv2+u2+Lwv92FNvkr/D947Xl3LfdyQC7FDovqrlKWyjvWJYqK+y1Dd7LwYgrvsjqWQzsTQijcT6srvodGyZFXwfpYAjt2OZJDmD1XxWiCyrFXr3PpXbZHkx+SROIPXVbjZgEbHlOj0MaK1gwmtMYHEUmO85oDkmstQ3e2ngo3NxNIm6rTuuDGSpnMAXl67I/WIyLVcmmaZmZoV84jqWY8KKrxJyYfawWkaP1iEmnzQioZjI4rrJr2+jXc8hlrSOn5XRGvjH59flntswkaU+ICdy4Ps/euwnnLzBCS9+OAik3bFMcNauxKEs/F4/HGBDK4/6D45lXumD7nlzHfetPiAnyCaTOI/T3vrp0Ir7hhBLh9TVaXLqrHweGaY8IHrVFj3OJBQPFJun7mCA1Mjctbs91CjzupCqdFA0LTFP5+djCIiwmp6OiPnLbXu0zqTp3rYtTEXjMA0NFd2SdSO9tIilTFZ2KzIZxnVl2RakPiA/MXvH0V2eIS0Kv58kk3r9HppeuC4UycxlOpfbObxWDEPTdtwH5zSbyQTUUnROTGHeQjqOlbG812uJJy+7UppV9QFR3+y96J56OoUW6f5upyfmLi/IDjl1dtcWs5bV2XgvFmf24semrjXap2V3OiLbc/qhWUwmLvchM4zK2JzmfVzqA/IWgHAYhK9LSxl07ApmIqFZqi3HxKzlvVVLRE6xCctqrU0e99jUTY9ku6TWWDZKHDqrqYnpgshF59P0dx1fT+Z+YtaqD4j6Kuv/BxBr5G+cZBZfdxzhPJP3PLPZOuXTKO2p19odzE1O4etbU6g1alK2nNdR1A1SZUvIkbqJ3p7G5HIWOeLYM+klLOTDCG8qk4I38IW0YiKrXtHCPokP4b54r9c3UzMhwcVbT2emZR9YxnCkzxpbcKM69QEZmaNi5hayx/cSFqGvXO7nF+SqFfMoVkIyi//mfVqJhQRqlaKcA6mRLBNZTFqN+wkjvQbqJNOyXSGymATjPtgc1gp5JMqG1J2ePUqrrHc97fQ2akv9NeQXEFThqSddTjfxaSdWIU3Hk52L/LXHv7oyiksRIWWQiRs4MiMkEDk6YcUnsXKmKwTV7K2J8IRUPzw55Y+PuVG/gd+Wg6DqA/K60MnotFOp0pbAYDRekhNSHD4pjUgjPqHLQcEqqSduzyer+ORTdxT/4jpWYcWa+0qsig94yrbSUeDQpfC733ewWDbVB0R9s1d9QNQHRH1A1AdEfUDUB0R9QNQHRH1A1AdEfUDUB0R9QNQH5KICov4/479ggKif1AdEfUDUT78TIEeUeFeI+vnNeW1t7eg3B+Tly5dH6n/Hv91Y/aaAHL2h5Q8H+z/7x56UPasfKTv1Ake/wqe0f/jizPLv9/ffLyDP9wL5+27fx/r6JjY2d7G5s4N7a9t48eIHrN4ZYPPBIQ4ODqRuf2sDd+/dw+PtTew83seTbQ9rzRpsl+Q3dkSG0+rOI+xsb1CfGzh4ugejZuPpzhru+fek7ebOHrZ29/CwZ+G7tY3QjDZ0bK2vH7/H42cHWDPL8sxxP1sb6/I+94kuPtx/jKfbq/IeO4+eYGvvEfYekOzWI2ysrsrveE4/89njPann9od7W1Lf7t7Fd1tkGm+Hz+P3fba7gcBqYeh7Inv4/Pn7A4QH5u5oYGx/D17g4uGTJ3CovOntYW19m2XCAbTbuOe08fT7lzh8SIPbDcuClfsiI/2/eILVtXXcWb2Dlz88R6vtoN+pIzsxKW17K2sEyC4eOhbadh+H9DrrNBjf3XexttKWPg4O9/CgY8ozx/00Gl15Py4T4HumvAcnZ/UZGoaGB9vbuOs1pZ189SfG0zYreECDbznrsHoe+vQuqwNb6rxOC36zRO/joN4ngB49eL8qa+XO/beW9zwP+3vbP19lPHuKzdXhmXVP9w/e4T38X/Qef8g1RP1F/XcARP2kvmOoPiDqJ/UBUT+pD4j6gKif1AdEfUDUT+oDoj4g6if1AVEn/Q/KMj00pFK1fgAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleforAddWithEdgesIcon	^ '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cAAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampletimeLinesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADtUlEQVR4XuWcB27jMBQFff9TuvfeK7N4wnKhFUKr2iQ1DyBkIbaiePgb+ZXOzw9fIanD/wr4QPjiA+ED4YsPhA+ELz4QPhC++ED4QPjiA+GLD4QPhC8+ED4QvvhA+ED44gPhA+ELD+R+v5u613i9XubxeJgm72u73ZrdbmdwQObzuTkcDrXGZrMxi8XCrNfrxka32zW9Xs9cLheDAnI6nUr9wS5LKGJp6fekr2P+Sq8F4Pl8GqzLGo1GpWauyxJkaXmfTb8ne53VapUcJ5NJ8vp2uxl+UPcsWYcs53w+G36WFYCm02liOePxmA/EFSvSvj4bJ9IzOfuz6/WanPt2Pa0Bopm63+8Tvy5XoqEYoFRUQ5mVZrIrhmi2KwObzWZBBOlWuqwqNYug2s9lwbgyNmV+sjCbefGBNFiz9Pv9f9azXC4LZWbK/GRhPoN7dEFds1cVepnPCNC7c77LqiHNXsWRMtYyGAz+swSd84FEIMUaxR0dfcURPpBMImDji6840gmh7rC1Q1OqUoPoPnwtKAYDRG5BdYcyG1tn1B1aPlcNojhTZug+tJ7FjyENStlXkQxMcaJspsYHUkEq7OT/86xIcaLs8j8fSEGX10Q2ZGsb9H5IUzWJMiO75lV16Bp2nQy7H2L9uM91I76FZNanbFZUd2+97tA9yDr4O4YVpS+wrcVplEDUGcIH8uXqPW/N6ZNVOx9IRrbnylVHyNfrWCQ+qGpvoikPBeSTVXMInSTRAVHVrNlct574bYTQSRIdkKKrvfZ9rhjjqmt89upGCaRof65Whd91MdouxOxQry4fyAcshKBgLCS24IsvDG3qWqXrJF2/SK6dQf0O32tr0QCxvVlaNlFc0LHssDHGtUMZgqXimhxCLxJxQGRpfCAVsq4izw42/XwhH4hD8vfy53nrVHpPCBtcOJeV9ft5/VPH49HwgXwhw7JD/VPveqyGwyEfSNPSPoaaD/iFYSBSXaBnPGJ8Coqf9vLrEH4dwgfyBYUQs/hAUlLM4gPxoJArfCQQVfh8IPzMig8klsyKbyF8IHwLiQoIv+skMCDa427bvgbfZRWsN+x/j+MD8VRvpPt81VGivRT9d6BQV5GDBJLuu3o3m9vYXBckkHQ3vHqpdN6GzvZWuaxP1hJKKLRDKYuTdSrr8+XSoutc/NRTuHrSShYni1TW56tRgr/8zndZfPGB8IHwxQfCB8IXHwgfCF98IHwgfPGB8MUHwgfCFx8IHwhffCB8IHzxgfCB8MUHwtfv+gNX61dLNkTxDQAAAABJRU5ErkJggg=='</body></methods><methods><class-id>Roassal2.RTRoassalExample</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'Plain Roassal'</body></methods><methods><class-id>Roassal2.RTDynamicStackedGrapherTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testBarPosition	| b e5 e4 |	b := RTDynamicStackedGrapher new.	b maxY: 10.	b add: 5.	b add: 4.	b build.		e5 := b view elementFromModel: 5.	e4 := b view elementFromModel: 4.	self assert: e5 position equals: (75.0@ -50).	self assert: e4 position equals: (150.0@ -40).</body><body package="Roassal2-Builder-Grapher-Tests">testBarPositionWithoutAnimation	| b e5 e4 |	b := RTDynamicStackedGrapher new.	b doNotUseAnimation.	b maxY: 10.	b add: 5.	b add: 4.	b build.		e5 := b view elementFromModel: 5.	e4 := b view elementFromModel: 4.	self assert: e5 position equals: (75.0@ -50).	self assert: e4 position equals: (150.0@ -40).</body><body package="Roassal2-Builder-Grapher-Tests">testEmbeddedInComposer	| a1 a2 composer a b |	a1:= Array 		with: (Array with: 'x' with: 10) 		with: (Array with: 'y' with: 20) 		with: (Array with: 'z' with: 100).	a2 := Array 		with: (Array with: 'x' with: 30)		with: (Array with: 'y' with: 20)		with: (Array with: 'z' with: 10).	composer := RTComposer new.	    a := RTDynamicStackedGrapher new.	    a numberOfBars: a1 size.	    a minY: -200; maxY: 200.	    a view: composer view.	    a y: #yourself.	    a barShape color: (Color blue alpha: 0.3).	    a addAll: (a1 collect: #second).		a build.	composer group: #first.	    b := RTDynamicStackedGrapher new.	    b numberOfBars: a2 size.	    b minY: -200; maxY: 200.	    b view: composer view.	    b y: #yourself.	    b barShape color: (Color blue alpha: 0.3).		 b addAll: (a2 collect: #second).		b build.	composer group: #second.	composer move: #first onTheLeftOf: #second.	composer nameGroup: #first as: 'aFirstName'.	composer nameGroup: #second as: 'aSecondName'.	composer setGeneralTitle: 'aGeneralTitle'.	composer view addMenu: 'Left' callback: [ a add: 200 atRandom ].	composer view addMenu: 'Right' callback: [ b add: 200 atRandom ].	self assert: b centerElement position equals: 0 @ 0.	self assert: a centerElement position ~= (0 @ 0).</body><body package="Roassal2-Builder-Grapher-Tests">testGetY	| b |	b := RTDynamicStackedGrapher new.	self assert: b y equals: #yourself</body><body package="Roassal2-Builder-Grapher-Tests">testNumberOfBars	self assert: RTDynamicStackedGrapher new numberOfBars equals: RTDynamicStackedGrapher new defaultNumberOfBars</body><body package="Roassal2-Builder-Grapher-Tests">testUpdateView	| b |	b := RTDynamicStackedGrapher new.	b updateView</body></methods><methods><class-id>Roassal2.RTInteractionTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	view := RTView new.</body><body package="Roassal2-Core-Tests">tearDown	super tearDown.	ui ifNotNil: [ :aUI | ui := nil. aUI delete. ].</body></methods><methods><class-id>Roassal2.RTInteractionTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBlockAsInteraction	| e |	e := RTBox element.	e @ ([ :ee | ee ])</body><body package="Roassal2-Core-Tests">testMouseHoverZoom	| element interaction |	element := RTBox new size: #yourself; elementOn: 30.	interaction := RTMouseHoverZoom new.	interaction desiredExtent: 60 @ 60; simple.	element @ interaction.	view add: element.	self assert: element extent equals: 30 @ 30.	element testCaseAnnounce: TRMouseEnter.	self assert: element extent equals: 60 @ 60.	element testCaseAnnounce: TRMouseLeave.	self assert: element extent equals: 30 @ 30.</body></methods><methods><class-id>Roassal2.RTNNormalizerTest</class-id> <category>identity</category><body package="Roassal2-ColorNormalizer-Tests">testBeginingAtBlue	| n |	n := RTNIdentityNormalizer beginingAtBlue.	self assert: n nextColor = Color blue</body><body package="Roassal2-ColorNormalizer-Tests">testBeginingAtRed	| n |	n := RTNIdentityNormalizer beginingAtRed.	self assert: n nextColor = Color red</body><body package="Roassal2-ColorNormalizer-Tests">testIdentity	| colorOne colorTwo normalizer |		normalizer := RTNIdentityNormalizer new.	colorOne := normalizer rtValue: 1.	colorTwo := normalizer rtValue: 2.	self deny: colorOne = colorTwo.	colorOne := normalizer rtValue: 12.	colorTwo := normalizer rtValue: 12.	self assert: colorOne = colorTwo.</body><body package="Roassal2-ColorNormalizer-Tests">testIdentityModulo	"This checks that there is no exception if there are more identities than colors"	1 to: 150 do: [:index | RTNIdentityNormalizer new rtValue: index]</body><body package="Roassal2-ColorNormalizer-Tests">testIdentityWithCommand	| colorOne colorTwo normalizer |		normalizer := RTNIdentityNormalizer withCommand: #last.	colorOne := normalizer rtValue: 'bob'.	colorTwo := normalizer rtValue: 'tom'.	self deny: colorOne = colorTwo.	colorOne := normalizer rtValue: 'anna'.	colorTwo := normalizer rtValue: 'maria'.	self assert: colorOne = colorTwo.</body></methods><methods><class-id>Roassal2.RTNNormalizerTest</class-id> <category>explicit identity</category><body package="Roassal2-ColorNormalizer-Tests">testExplicitIdentity	| normalizer colorOne colorTwo |		normalizer := RTNExplicitIdentityNormalizer 						withCommand: #last 						withColors: (Array with: Color blue with: Color white with: Color red) 						withDefaultColor: Color green.							colorOne := normalizer rtValue: 'alex'.	colorTwo := normalizer rtValue: 'suffix'.	self assert: (colorOne = colorTwo)</body><body package="Roassal2-ColorNormalizer-Tests">testExplicitIdentity3Initialization	| normalizer colors |		colors := Array with: Color blue with: Color white with: Color red.	normalizer := RTNExplicitIdentityNormalizer					withCommand: #yourself					withColors: colors					withDefaultColor: Color green.																		self assert: (normalizer rtValue: 1) = Color blue.	self assert: (normalizer rtValue: 2) = Color white.	self assert: (normalizer rtValue: 3) = Color red.	self assert: (normalizer rtValue: 4) = Color green.</body></methods><methods><class-id>Roassal2.RTNNormalizerTest</class-id> <category>linear</category><body package="Roassal2-ColorNormalizer-Tests">testGradient	| normalizer |	normalizer := RTNColorLinearNormalizer inContext: #(0 1 2 3 4 5 6 7 8 9 10) lowColor: Color yellow highColor: Color red.	self assert: (normalizer maximumValue: nil) = 10.	self assert: (normalizer rtValue: 10) =  (Color r: 1.0 g: 0.0 b: 0.0). 	self assert: (normalizer rtValue: 1) = (Color r: 1.0 g: 0.900012 b: 0.0).	self assert: (normalizer rtValue: 0) =  (Color r: 1.0 g: 1.0 b: 0.0)</body><body package="Roassal2-ColorNormalizer-Tests">testNumberLinearNormalizer	| normalizer |	normalizer := RTNumberLinearNormalizer inContext: (1 to: 10) withCommand: [:entity | entity * 1000 ].	self assert: (normalizer rtValue: 100) = 10.		normalizer := RTNumberLinearNormalizer inContext: (1 to: 100) withCommand: [:entity | entity * 1000 ].	self assert: (normalizer rtValue: 100) = 1.		normalizer := RTNumberLinearNormalizer inContext: (1 to: 100) withCommand: [:entity | entity ].	self assert: (normalizer rtValue: 100) = 1.</body><body package="Roassal2-ColorNormalizer-Tests">testValueLinearNormalizer	| normalizer |	normalizer := RTValueLinearNormalizer inContext: (0 to: 10) withCommand: [:entity | entity ].	self assert: (normalizer rtValue: 10) = 1.		normalizer := RTValueLinearNormalizer inContext: (0 to: 10) withCommand: [:entity | entity * 1000 ].	self assert: (normalizer rtValue: 100) = 10.		normalizer := RTValueLinearNormalizer inContext: (99 to: 100) withCommand: [:entity | entity ].	self assert: (normalizer rtValue: 101) = 2.</body></methods><methods><class-id>Roassal2.RTNNormalizerTest</class-id> <category>tests</category><body package="Roassal2-ColorNormalizer-Tests">testExplicitIdentity2	| normalizer |		normalizer := RTNExplicitIdentityNormalizer					withCommand: #yourself					withColors: (Array with: Color blue with: Color white with: Color red) 					withDefaultColor: Color green.							self assert: (normalizer rtValue: 1) = Color blue.	self assert: (normalizer rtValue: 2) = Color white.	self assert: (normalizer rtValue: 3) = Color red.	self assert: (normalizer rtValue: -1) = Color green.	self assert: (normalizer rtValue: 1000) = Color green.</body></methods><methods><class-id>Roassal2.RTNNormalizerTest</class-id> <category>multiple</category><body package="Roassal2-ColorNormalizer-Tests">testMultipleLinearNormalizer	| normalizer |	normalizer := RTMultipleColorLinearNormalizer 					valueRange: #(5 10 15) colorRange: (Array with: Color blue with: Color white with: Color red) .		self assert: (normalizer rtValue: 5) =  (Color r: 0.0 g: 0.0 b: 1.0).	self assert: (normalizer rtValue: 6) =  (Color r: 0.2 g: 0.2 b: 1.0). 	self assert: (normalizer rtValue: 15) = (Color r: 1.0 g: 0.0 b: 0.0)</body></methods><methods><class-id>Roassal2.RTBundleExample</class-id> <category>icons</category><body package="Roassal2-Builder-BundleEdge-Examples">exampleArrowedBezierIcon	^ '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'</body><body package="Roassal2-Builder-BundleEdge-Examples">exampleClusterBezierAndSliderIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAmc0lEQVR4Xt2d+ZMV13XH318QS1WqsmzZEkKyQBIMu2BmmBkxC7Pvj2FmhNi3YVgFAiGB2EEgiU0gtBiDVluWbMty5C2LlaTKSbxlkcsVuypJ5Ye48kMq+Q+ucj7n9um5r6f7zQOxDCnq8t709rrP9+zn3Nu5Rx999LO+vj7X29vr+G5j4cKF7rHHHnODg4NuwYIF+n3FihV6TGdnp2tra9Nt4TldXV2uvb3dNTY2FmznWPl0S5YsKdjOaG1t1XM2btzoamtrU/c3Nze7tWvX6jWS+20sXbrUPf744y76rc/GGly3v79/1L3e7JHjPx6kpaVl1I0NDAy4lStXxiAAHN8hLNuTDw+oixYtGkVYHn758uWpD851Gfl8PnU/v8H9wSDFiFtXV1cyGNw/99rd3T2uwFBAeJiOjg4dyZ1sg/NMipqamlRaIGAWYZYtWzZqH5IDETg3uQ/uZ399fb3LIh5SmvUA3CNMUAJxdf+qVav097jX8QZGLCEmDRAnSeCQc8vLy50dW1/fUKBCIDacnHxQrgmxIEKamoGYWTeHKoMR0pjF9jc0NDiIXEyd2f2hFpGMrOuNK0AgGBKQPKCi4gU3Atpz+r2pqdtVV9ekHFvh5s+f79KkI41g2CAkI03VQEDUaJY0AtSGDRuKAhoOOy7NTo1LQCBkS8vSUTe7cOFxN5oYuzMfqrt73ah9VVVNqdyNhKD70+xKT09PKoPYQI0VU3WhhCK55pCM95EL/+jp2Vxw0zU1j4oxbXePPPKYGxg4pvsaG7uKqoeBgROj9vX27hi1DSIlVaSN1atXqweXxc2oHAABtGIPhweFysWbuhXAGAXI4GAhMWfNWuUAoKKiXfTuCjeWdDBaWvoK9qPe0o5ralrjqqqqUoFavHhxqs2BEbBH2Azz+LIGYAFcmpNxywBSV1foWpaX94oR3OBmzVojn9vcWNLh7cKpgv35/FMZNmBPaswBIZMxUegCmzor5ggABG7yeDbemYAMDr6UiCW2xX9XVraLqtoverqzJOlIk4jBwedSCJ/uxmJ4s+IRJAJiF3NvLZ7BXiBltxoYsYQMDh5wIwT10ff8+d6gDg6ekYc7LDHE8jGlI+nz19TUpJ6Tz+9IvU5//3Hx3qrdaEehuyR3FSeB4wCuVAJcybE3VGXl8xucd13XuxkzNrk5cx6PADkngBwQYpwo+cb7+w85L207RxF4wYJaMdb1GcZ6aWrgiFHOcn8tgseucEyWo5AcSBCOA5KXFrCOCxvS0bHWzZ272tXUXHQPP7zb4WUNDByWB10udmR1yTedzz8RgXk8xaXd7LKBPDwqn2ZGOQsQglSTjLEkyNJDeGiotrTc2rgCxHPwCQnU4NTn3bx5iwSQd4SLnhZOr7sCQLZED342JeC7Mq+nru6xTLthgWNaliFN7TE4B/CK5cZuKiBJQldX14s3tVncznddeXm3cOgx+fReDV5XKRcdGDgSpVguFBzf0PBcEek45kYHf8+7rDQIxC01WwtYOAwkRLMkbdwAMn9+q0sSet68PskRtQnnfSwc9Ve6b8aMITmuq8SHWRBJyOmC42trDxZJEhbaj7SI38BA5QwNDZWS3dXcGnYCyciIbcanypozZ5kEgF4Hz57tU+7Tpg1JbqpaVRd/P/zwMyU/UGNjpxDuqBuJIfa64lI14jS0t693yZgo9KQgNGoqW83VqT3hGALNsdIraRH+zYphcm1tIzq9rGyHEr+qqlG8rCVq1Jubj+ungVKqlAwOnhKVMgJga+tzJT5gg7it64oQe3GmTUF6ICSuLCoKMK6EGKRqCDrxvrKC0zCXdl0AaWh4VlTReslXDQrR82769E0amY9kay9EQOQVGKSnomJsPUwKJZ/3HlVr62o9N9sF3RdIR7Y319f3ROY+0vBwtrmzY0X0oX0xB4GAkjFW8BlkE645KLnKyl0iBdsdeh9bYuoKiWA0N/eKK+y5gSQj0XspkjIwcFzdZU+sA654cLY0sjlHXZZN6upaW7RIBZHgWri8VBUFcABJVhn7wt8hGFzHrs0xuODFsgnXBJCamjUKSHPzbjdz5vrYoxqJ3N8uMPrTpw/H32fPzk5p9/RscNiR+vrWMV1mvKnBwWMZgV+7w6ZknYtawttiRMQshVjK4RCWzLLV/JPHAJIV0azke71r8DmCsUceGZIfXyeG9Lh8LwyWeno2qqSgynxKpUUM/YjPP2vWSpddpasTf//gmA/Q3b0h4R63CEAnhSsHxDtam3keNRxzY9N6ApKGGgLD7dT3ITLnhvGIRe0GlH2/UqfgcwHS3r5W0N8kor5GuOwpcRNPp/743Ln9DonAFpSVFeryiop09dXT87RwVLYeb2rqEp3/mnhDu+UeNjsqkqRWSrlxKXq5r371t4582VhBIWqMYyA4sUhalREpgfjr1q1TF7nUFMw1BwRC9/XtFUA2Ogw82d/e3vdcSGRUj7chS9SgmzdWCMpoQ79o0S8FZK553JEFXrx4t8P7CmsmUQLyim4aFVpd/ZEr5oYDgsUfGHrsCyrH8lZW/LLKI2Cg/m52sjFXUdEdEXujqKKLcvP7hVMPyjjpbB9ENEDsxGnTNsUGPiRUR8cqefD18mAnZX/lNX+42bOXy2+84b7ylW9lur5IgOXAAAW1lEyVoLbMvUV1jaXybhggeFV4T1VVC9WgL1jwolTkLskDnRXu3qmGHnUyord9Wh7PC1cZNZbP73ZE1u3tK+X4dbGXdi1vlOtxf+3tb6uEJm0dRhjDjjSsX79epSFq5AuP0/0MM9TjLlIHDAg7Z87S2BuC0xcvfso9+eQf5MG2ij4ljV4fEdq7fB0dXxdR3yyOwBqRhDZxjUci56lTnxTdfm26O7AVqFUfx5zRz/vuO5eStFwYxx2oH2wAdoFtcD/fkZaovj5+24Dq6vrlhn/gpkz5maiszcLtW0VdnZNtu5z31d+Xh/iZ2o729hdEvA+IvWlwZugNIA9kj0iIjxcqKzsK9l3pgPCk/LkeYNfVHREwFoghf9eNjmM2OAsoLW2CFAAKRtzswy1RMezt3SgPcFYe6B0B4Yzc9H7hptfFCP5CHuo/5GH+yz3wwEUR708dTRC1tQcEuHVqoFtbL6nRrqnZGIHQptIC4UydIYEmXdnqKK+qDkDtXCRjxEAf0VhowoTXXEb07pIpjTVr1qhtuILYZLyorJ2OdPng4G+FmIdFTf1OiPwbGS8KYXyMUV3dIKC8IIBdVv2NXTEim+GfPn2zel5NTT2RZ3VeQWtooLsQIC8JgU6pwQ8JZN4cWWeyzCF4lZWtYoyfkvtY6u6///So9Mvg4ItRZXKr2IQnRYWeFuAqVTrGa72jBAk5K4TeJFLyqRCOCt/KyI50K7eacYZwfG9rG5bj9gmBzqgETJu2LT4OoMb6QfJk06ZtUXVUWdkrqggi/oVI2w/EocCzo7uFAPWigPi+entlZZ84Uvm9vYckSHvaPfTQMfm+T4Df78Js9a0IQEqz9VYhxhIh7iqppW9UQqE6vA3wng2f/O2B6tS8V0fHKfV0IPD06RsVnHnzFguxni1KGNQRfV54d6ilsrJtcs5eN2nSMR3Tpm1Wu4GKKivb4u6++w3ngVwt97deMwYTJ77sCr2vq7NV2BpLiRRL599wL2vq1B1KVPQ4KmjuXN9Cg+cF4SAQUmB6ndS8zzMdlGNXusmTC2vh3nYMuK997aQS/8EH94vTsEvT+skb4DfNeD/wwAk555TYiosSZ7znvvjFH8q252Qc1/tAsiZNes6F0lbqgxL8AQAFKww8cQgeF64xntj1TBheESA84OTJBxWQBx88pKCELiw6HfX1ta+9IMQ4qlIBYTkPz6uubp886LDuBwgIh80hG5yVcrf6SlnZdvGa3hE39iWRkv0K4Je+9JECwW8hnbjQBIP33HNJQPqmNl8A0OTJh1RdZsU7QbLxM2slJQoHDDK3ZHnHo7HPmUGG2+BUBpz6yCOj3cRJk45re5ARGnUDsZAy4pK7735bVQr2prq6NvKyHtdPSsD8zvTpW4SoewWIt5Wwd975p0popAIpAWQbM2YMi3q6IAD9SJjlgKZKUFcPP3xCgLokgHxXvv+ZXOfXAuA/CZj/7u6441dy7cuOTnzSMqgiJANwspKEpFGsK/J6EhsmwPsrNnLTpm1VvQ1XjyQSB5RocGdoLFFhU6bsdng/PgM8XFBDqa/fLtf5kUjQ60KMV0UVAOz7IgnfFgIdFAI/KS4zTsE28Yq2i1T8g2y/4GiGyOffEi/pDXG/n5XffFWueUoAfjPuD8MDw/4Y0yAhEyeeExC+p/cJaF/4wm9UykaSl00uTB6irmzGlk2BY0oDdgRQSCxez1xWKTO8cuj6CRO+oQ+F2gIgz9lLNEKGS2fM2KBqDMnAjvhtQzFH89nYeMJR7HrggaMCVq9KnLdHAwoabq2PqNdrdrm8nK6WH2teasGCj2VwD6/L+Wdl+0ktHTc0nBZCfVv+/rlKYEXFObm3nXo/SCv3e9ddH7jbb/87ve9kJRACQ3ikxCYSEa3z3aJ3wLlRCcWSAPHqpV45fs6cxxz1Drrep07dKVLytHpeADRr1lqNvDH4GHWkBVDq6g7KeEn/NrcXQqHGsD0jUXxet/F98uQjCu69974eGfIXRSUdVKM9c+YaBRGPCzU1ZcpTygAEnBaboCZxJJAK4iIyB21ta4XIrwqI35Fz/lrOPacEpw4C0a3WfjOnshkgMAPSa2kdBvfJtpyvkXdr5ta8K294a1U1QOiHHtojY58S1CRi0qQX5OHei/NbcCig4o0hWdiLZGrFu8fL1Bh/8Ys/FqIejdUfoOAokKfCsYAxwnvh3gDn4Yf3SAx0VsB8JXKdG6I6f4cGlsnM73gy2CEgYZ4N2wKz8HeOip8n4LAzdzaMGcLUOp4P6Yt5876hNY377jurkmM2BGLNnr1UE4vm/fjGiOWRBK0TiXjeffnL31WvCs7nOwCx38cU3XocqpGYhn12D8QrqCi2wUDFSsjjcZSksiACqXQeHsMeSgmELPTlcQDeEe68oHocNQJoqJsRou1Tw2/9XZYkRGKmTt0uXtUPNMpHJeExkRJBNeGxEQ9hlLmHsEzMNQCSc8fKi93ygKDbcUUx4qiXsFJotQ+kYdGincrB6HmThrKyrcrl/u+nnc264jhAIiDEDYb7UVcTJnxdYw/OtYieYwEewCzoQ/WEdgzAbr/97yP3eYOqpmJtRWmEML1t06itpcfiEdQbBh9djvfFp3U7cg6fnzdjXBIgZpwBg8FDm6vb3b1N9v30M6YP1NdvEtd0v3hIb0pe6WXtEmlqOioEO6u63dpNISqER/UQayAdFL9GCL1awUBFkrCEwBhyfheJo14PEHhpJg0Ej8kbp3aDdKK+ANmrxWUqnVOn7lLGKi8v/8wicSvP2rx3iI0Hxj6bPBpM8on7hm02FuB93lbUkgBBdZjhxZZ0dhJDvCjccsStWPEv8vf/ihfls7vJZgbfu9UjKuxVJS6ERDLKy3fI8YfEcB2T81+RoOyiPOBe4cYn5fiVMvYL8S/L39+SY74p33F9vy5EGZLfblBgkBB+Y+LEV9TgI62owLFqLPn8TvnNlULco3K852ziDD6RAOolNvM39HBuRAm3xDhkhRDlnHhMZx1tO3Baf/9PBIy35OE/Eg75VynpfqBgmPE28LAFcD1xB1KC/vcAL1KOxw0mziEFgiTiUcHNXnre1bwV8Q9eHhIzd25fQZc96nHixDckJtkq97RHM740YQwOHhKib5HjnxDirpP9O9zWrT+X741B0rFXC1QWqZOrIlpP9uwaIDeirl6yUYdofmLnVrd27T8Kdx8WMd0j47JU3P5TbnSHznoiap4zZ7lGyXg51lSHSsIzwkBPmfK02iP2oVL85xJVi7jN2ArcZssMQ3TAxltjP9t90nGt5K++oYADfqkPTb2lpeW09gE0N69UtYSKWrZsmc4R4W/AQT2hwkgyYj/sOKQIELEzzMqyZohr0TlvgPzxj3/UsXfvXmdzVyz7nPPGe1DUxyXhoA8czddTp34kD3VCiP+SGx7+UG5yl3Dfy5GuHkmlkGTEIzJdj/FFisjsApB3ArZGxnhYpQQnAgITZ9x//ymVLFI3bPdTHnqijPLjut87CaVnYq1i6e1MtbOVixhIjOW1TFIAAQmxDkXLAPOdbQBJB8u1kJ5igFi3TI6c0sDAAbmpd8RAHxbOekUJM2MG6uF5eZCzIilflxNPF2RWk4SCCADmid6tXhXJQIaXkGFn6XZA8nWRLg0EkRQkgb9xfTHOGHdajdhGtiCMicbqThnvbi9rrjDSpC5Hy+bAgE+7z5794yg4O6UBG/aFzvTm5peF04YFrF1xf1ayJwtJYRAU4qoiKUgGXhcq0bu2mwpcXa6BIwBA5qnxHRsCSD46360MUkrHfRhD3bJxSE/PW6pCsBl4S+SRpk//kUjMJQGiT4A4rt0ozDfv6BiKGrIL+5mo5GFHiA18zLFZXVkI7+vxJ1SaUEO4pN5uDUYxRV4Thag5i3EIAgHT3GXuD8BCpyK9ozF/6wOCIV2wYLNwIEWgy6KiXtSC0bx5F0QiXlfvprPzXSVsRQVt+ecTy2+sjmMMVJU1X3uXOB+XV5EEb7xXqx3yLuwiBQIJsHoMas+7uxccSUgregGmTZFILw2PLsGSUsfljQI6d0sAUlm5WqTjGZUSuJ/mawKxtraTakOIH5Yt+0Rr6n19Z124JIaBwXkQCo5PNjQAAql3bAxGmmPI0CJlqDYkEntEvDFz5pB6WVyL5CFpGPJrBIEYeyTPTxxakLI0VKFKq6qi8cKv70UaHs8Jw4nXlJzIc6OSkCUBsnDhgSBV8jfKidb/1NaG9JwX9++1qAR6LvIKtsfeEGCgqqyFNDlQZz4LXKsShO1AWog/MPQYb0BBUlFtOAOAgmGfOPG8VhVhFvaj0ogvwrR+sufYys719RfjCiGVQ1IkuLuk34nW8Wj4NCkyzytKpXwWSlSw7UbEIXlNLmIQJ0z4jnJjVdW3o/jioHgCBzVVAtHpsfJT0PZG2dblkSHenMq15n1Nn74hJiKf/KYHol8zyKglpAaPzHeXbNBrAzLqDPBmzVqhoPIdAEMGCHsASEoS0AICczxs3mCoxsznD5d6AhQIRmzCIO9lK+QRm/AdEAHnahcciL2s6F/X0a641m/l49wIF5xSnY3xrKz0OabW1tdlvKVeWFXVhqjiti/qA94W246xXE2vzobi41BRSBhA+g7H5epp+c6T55Xo7POJyKfVzsAoJCs5F88LlYd0hkEjamvevPciqTgV56Zs3od1uhebYRtVD53NFyEu4ZPtxCK2YCifABPNIympcTsLEAsMiXty9GOhClpatmsFj3TGvHnfjyb+HxTuOCyg7BKQLimXV1UdUg7t6dkRGesdJcYHi53v/V3nzAgDLETHVpjq8onHzSopBJo0SUyY4CuLSBvqiIQix+FAAB4Oh+8dO60LrtlEVVQWiUEkhIe1/isCPwgJoSPOLHlRHQjPuYBBHME1TeqGh4f1+mxPm6VrgPRd6tPRtKrJWe0/Wv/L5dC/9fWnnY+Mz0j88R3t9EAlzZmzQ8T0qBBqSANE38x8KFJrjcK95+W4Fg384PJiHe9mdFFXljj0GeZFCgQlWZ+53aEJSuojSAsSRNaY4hRqlXyZr1BuVqkCqPvuO6PzRSoqLgv3X9YFb5juZmmQMMq2YIy0CERFWgAI9WbplGTAVmypweTyHZYZTqvTl2RDvB7dFNcwyspeUxVhUXVHB4HdWQHNahQ7BIwDqjIw+D5N3pCYuNMTp0GIJTDQqEAICNB+9YiuaBpDv0bpqCtvS57Q73A/A5UFmGR8kSbrduF3YRwGVcQ77/y9gPaX6rrX1X0c1zxQORAHrk4u/Gzd8iZJttaWTX2DsIDGCNffSlsn8poZdeIMXFOMts9FXVbCkPkl5T0w8KxIx5vaR2uc3dXlDe28eUOqdiC6eUEQlOPI7JKvwm31eaxlGrH7hop8nNWF630r0rbIfuxSQ097DxKLO4wqpZORGjzX901yW1WVcc+dnW8JAFv1XgYGnolViBHalvqzXFXUpeiKrWAaSVW8GoQlHm3uCVLEtZGeUhsnSgKkrOySqgkA8anznyhn9vVtV8IODOxzrJnFVASLOzo7T8YNBWZLsjwsmg98Ecy3DkF4VJSP0hcpp/P7pFUefPBZlUAIDjioLSQEkAASCeFcGAaJ8Y3bH8i2M7JvvzDRae3/raxcELu2obqCgBCVGVaWPOQTCYqmwI25wilERYrwtmzdR65jUsg1shKRJQEC0a1l5447fq51ClQWdQdUTn39CQ0QKyo2Bh2LfqEB75VcWaOBNW1bzZ1AD2L7esiAAhe607jCM2f6KiN5MQZg+CaJi0KEfUKcPUKELUKUIZGWTXEsQSegtY/aCt1GdECxhjmAQnI4DgcAWzDWKhBIH79DUBnGOKi2rJUgSqyp98YNCRUVv1ejSU2jvPw15eaKivccVThLaVgnvC0b6/X03isCBYkJ7Y2f+vBolGUeitIlK+IA0roVUYP0EJPamTTpvKiiCzo9YeHCNvl+UsFNrgEP4SAQkoDasVJuWnM16sfWr7/adeFt/nsxQH51222OcXTy5HjWl9moHGKPrkdvP/jgBe0EIdf0yCNPqd6vq/tIbMRm9f2rq4c0AQnx+vpG5mYQuV8tIARyfh7h4qgPeLlKCqoO6cW7AhTUmm8MP6z2o6npLXnwM47pbDR78wzNzd+U0Rq/MCDs5TViwM3YFNSORepp93g9JoTaPXyWy+m4NGFCnAkwjzAX9u5OmXJae60gTnn5n6vub2k5pekLOLSm5kP1kCDi7Nm+48QMfV/fM+7KJnMuLJASa5LAMcAOWBfLpElHtEsFDxBgkIKenl8Lh/9UQDmjqrO3d7tIxQpnKzZYExpcnnRZAcmAQtcjLbi8pqKu51LkBsg//8mfOMbxSZPi7hd71UfOuLSiYpXqa4I0jPGiRZcVhPb253U7xJ858wM1xuZ2IiVwpld7bytXJ/NMxeYVJueJWHMekkBOi/uiKx6QfO/WE8JFLwtXfyo6/4ga8blzlzlbZsMWN8NO2EMCEJLA38kVruFMm51rZV1bBvCmJRdH7MBRVQd4Wp7TnlSd3dd3UAM+Yoba2secN8S9Kj3z53uwrBuloeGQBnKA5ItQ2fWLtK5Ds2fcA3bConWSjEgHZYLu7v8WNfq2EO28cDXl4beFkHt0lWz0N6DA7WFC0GIJa3gotrQtXMrLYyx+yXrvydUMnAcrJ2eN3Mhs1mc0j0VJ1fJE3r6cjoz+M1rqLUxbP6ESgfT4CTznXNiLi8T4VtIVUST/aGJt+VqXTK+gQgGbhgliDzwtVCYEb2r6H2GK18VOvCvXXhMXrzjeomtAQQXB9bihFsTxiUEHKICB4FngQBiOs7jlpizx19KyWIh6QgkBx/tmgVrxYH6sKqy5eY9LW/bVVqmGKHhFc+fuirtKbI2tMAHoG/GWx0lGS6tYgcl3qTwmjHFeAbGaSXf3J+JW/q0Q+JTck83c7RXiHhWwhmPut/WykBJii2Qy0ZbdsEYGgLMJO2lLL93o2bw5P6/QNyeQdiBv1NCwXolKZzlSQdBGYNjY2JHy9pzCmbe0nFpykMAOjkcyUGUhMIAc9gGboce2EHMgpffcc9Fh1Csq9gin/ptI2SFhjDNyXzscS9GaHTIpYGFMW8PXbASEt+g6GfgBgE3WsSUBb/riMxCvpeWkEvCuu97XKWatra8pCMQkAAInM+88GYVjKzo7z6o68kZ/vRrZ+fN7dEobKpAgk7Q5nhKSQRKTY/3KQt2xhGBvuBc/m7dXAeE8clUDAz8SiT0ikvGh7D+pv4ck5fMHNJEYxBQa5EF81FYoFeSmAAeCc0woDbb+L9sCu+Fu2hzD7u7X1Z2EaKiJ2tozatD522xIf/9BJVJFxa5o1YVejbB9sWijplI4J21tdwJMzgFkXxHMq+RYDozpc6gm7uHee19T1WddKxUVZJQ/FlXFWlqblHG4F1+prIljCUsmYtQhqq29mLYUoC0xnhb8cQz7OB9gOCa0RTcEkIULOzSljv9P+09V1ZA+OG5nefknUUJxlQsXNw6XAiRqR2Iw8FOnPiU6fLnWxwENW4SUeBuzPWrp6VIgkRa8KVusJuxmsZJubS3x0CfiAf5Er4PE1NSQ19obS4Y1t1lOybwla6xOGG+VBFsnyxrpkgtdArB1MNqrNG4IIJ2da5zFIhhWVBaRL74/Op8iFS5sfX1T9PD7Iq9rVWyc+/oOOFtNwbpNent9X1VybjqeG4lDX5rdqd4Z3wvti1cXzc2vyfk/FHA/kfHTKKX/rWhqW2WcHrfF9S32SBLYKn9Jj4ljbZqBdblnLdyPFNqSgIna+7UFxNY7tOwttYWqqreivqkhBQRV0t291oWryxnRkKz6+ubIBfXdh8QRgFpsRTi8OQbOA+rHdypuifNltLTW19Mfhg36juz7UBcRaGg442xeB8QMk3kAYesqmg0wNWVradnCmcksLsadgbrK6uM1VYbUXK/FMHN4T2Gb5h13fCLc+j0N+MgxAYi/6dNRWfeQS2vdJFAjKWl9vuSe0pKOPm4ZUunBrjBH3dSfrwT6qLy5+aSoKdqRmH31kdiTi5EbPT+OJ8J3hlhCD0621RqSGVsrlSbf22iv5zMvi/OLRdXXs0s+R1c7eh7ORs/ffvsvhFhboq70Tm3997bjvKqiMMtry8bSg9vePuxsmQxr68znjySM+1adcgAAVhRDpXENAxZA58//hjbotbaejHp9H5fSwB/iOeZwP8Q2ECzIs7yVLXSc9SpAkxhq4GHuiu22eikA2VrAjBsVj+R4WBKG1qt7222/1An7ttzSCCDPRetZrYhTI6grv0QguaI1+h1AjLjEIV1d29RgU9PAxvh0e++oqN1PYxiM3OA9co2Xxas6Ip8vRk5Ea1wQgnttwr+pF7jbVEr4Titb5Tr5dk/UVJDfclmLaJoNuVHvzM3Z3ELbcNttn2ruyGxKc/P5yJXdHDVPH9MYw6YjhI1qrCpkxCZtAnC1teei+kp31IGYH1WDN3Ao9zY2ntbcFCpz7ty1cuzGeAUGInAIb41vSULa1GJUSsD5qoYAkfOT3lKxlqBQbVlUzyj1nbtXCUhhu8qdd/5OvR+bqI+E+GnKy6MOkX55sDVx01vYLchizHxa0xy2gmi8unpr7ACkvYPEOlJaWvrFuO8WNcO7qF5ylrowWwAoqA9boMwqe4mllTQIZFvoCcHhJkFXE40DJOqP2OR6puhzSbf0nnu+H80n7Iy8rCNaIfSd7ctU97OSm08CLnNhYhD7QlTv6+TbVELwnhobz44CMK1gRdqls/OY/C7nX4jrGxDeVJER34htvVXJN3mynWOTlUGI+nlmRF3vVa5HvfJowoTT8YIv2JXBwcNxjGHJQPOewuZqm1dONE4a3zc4dKqKwkGYM2dT5oOQSuntfSKSgn1xNx/SYCtXR7OZ4rdVJ11P2xYacXsxMvtCVWVLiJvHNW5fCmZ1kTCIM0AsBeKJv9mNVPmGg4rjLhHns6PWseI6Cxe+WhQQSrGVlb5pwIgEAKgkuNI4PSK47mMYKOh169FNFqHMqwrVj73A34K+8fJ61lza2wjCOYQhIDNmPBe5la8WrK8IQbE7qKT+/g9Grbbg54EcK7Jo/4V4FqyVX+11Epb0sxVGLTIHGHshWJhYxOgn1RQEtwJVMsbgHIvyx8M7DXOFOZw1KS/mOhJ0cPi+XtbvtdcjETxSRPLJQLKwO3VVUjPU1tLjc11nXNbye2YD4HKIbYYTkMwTsjesBS092hIaBoDWkoM6gsihOmI7x6YlCpEQe4/I9fSirggQOhJHv1HmzSBNfTaaujCksQsg2FQADLMvbBEvHFWDj1EP442ZM3emvsnTfH2IxQAM43zrdTJjyt8AEtoEiGnLYoR9tgkJigHj/LRoG+Dxom7m+w1zY72mrrPz7SDFcD6uAtLmaRISurJ+fseQviQm6VIDhs3DSHvZlxHJsreoIZuPAXHNPgAG3G6SwzE2tTisgXMMEpfsk7LXUXB+8rUUN3M9rQJAWKNw/vzqlITa8cCTOaiqyHcT7oumABTqXasQ3n//m6OiW1MVWe/vYA5HdE7cCmpEstdxGwEBAPUSqp+090JZh7t1MYa/xzWuV9b2cwNiU71Gt34uCVaafiK2DRMnvpkS4FXEBONaSSOJ2sFWpLVpWlrbONSyr6Fba0tkhNuSHM31k9usEzG0PY+OwxcTJ9qA+kd5J+b/QxiIaS4pxOb4JGHDNATHWsk0WfzhOPlMzaLaPXA++j9sUuBesC/2Ehi43F7sZcdYx0hSWsyLGm+rzGUCwoOmZUbZbvUGDKetFZjWw2rvD4wI4eyFXUmjGmZm0/S3JfXs/egGHsSmVh6CbM1xoeqy6WjJPJWl1q/XOwivJSD6kMm0gHV0G6fBjbaoFw+VNM5wtHVxQCib3ZpW6EFFpXk6FsSFRSeANYLbm3PYHuaUcH9D8LNcV0Cy+R7jEhA4Fa4ulu8HGFvMyzKpaUk6ONq426LptDf/pyQEC9Qkvxd4SwpsCJ5V+EIJsFVHx7IL7LfXsnJ/486oW3UtjXBIhHEmwKHD+du6tdM4HOCMi4t1l1vMkbUCdGjQ4fwkgEhzMkmIQS9l4o0BaCtf38xAMGWtE98lnjZfApCMC629xpJ9gTobFU8YuGlvz7SBG1rsjQTBkhgF7TmhlJikXG0m1gw8vzNeQMllTeFNk5bQLUalpBV3ILIBYiXXNAMerOCWOT+D65iEwgxcO5Qq2/Z5m9pstbnQXt40QKzdMkttsICXcZ+9opTjs0AMM7AQM2jjHMWdNpUsq1McQEIdbzNpQzVoK4Z+3tdtUxK2zO9NBQQil1LAh7B2s5xjdiJNzaGOQv2f9dbMpMpJkzb2J2KHAtthafprQcgbVTcfY1p0aXUAq0sbIZNpi5CzQ7WCmst6UNRWmjORnLORnPN3PfuibjogoaEcq6ZMrdq+Z01kSXpIAJR1LMAR6BVjijQ31lLr/y8BKVX3orLMzYUYBk5a+sOmlSXX8Ugjts1uKvbbgBY6Bnh61jB9q76NLWv8H83CzoKWGOMMAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-BundleEdge-Examples">exampleNoSliderIcon	^ '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'</body><body package="Roassal2-Builder-BundleEdge-Examples">exampleSimplerBundlerBuilderIcon	^ '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'</body><body package="Roassal2-Builder-BundleEdge-Examples">exampleVerySimpleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAYoklEQVR4Xt2d17Lcxg5F55ucs+Wcc845u8pP/v3R9WLNmtoHQjc5QZJ9H1hzDlM3kYEG0Ltbt27dvsbx1ltv7T/++OP9G2+8sc/z77///v7NN9/knAfnl/veeeed5doHH3ywf/XVV4/Pvffee3ve9+GHH+5ffvnl4zP8/+mnn954P+d++umn5dzbb7+9/L700kvLvT7zyiuv7JkH4/gc97777rs3xmU+r7/++v67775bvuWTTz7ZP/fcc8vva6+9tpxjbtzH/Z9//vnyjsP33YAHYzFmnNt/9tln+xdffHE/g+PuHOAz2BdffHHHi/n4559/PgG/HHxIBSQfxQcBkF9//XX5UK999dVXC/D4/frrrxegeO3hhx++8R7/z/MgEQD+8MMPC4B51wsvvLAAxHsYG6Tnu7jOeN98881yHuDx3Lfffrt3Xr///vsC1ANgO2Qc587YnGMuEMBhvOsiBGpjAADIZPMaE/jxxx8Xyjgg5sbHFu5ZKI13gUiBwPHzzz8v5zgeeeSR/bPPPnu89swzz9x4r//X8z7z2GOPLb8PPvjgERgAhjlWhEA4HFyD4A5ctnAs/8N5fDPIPBDQjef5PqUB90q8H3300XJsge/uXBH15ZdfLpQg+3owYZABm6eIgGo550RFEgjhfj5eiuJ4+umnF0TwW8euwOd44okn7jj35JNPHpHJ34VDb+d4/M38DiJsoXC+DcqGQ+EcuYG5JrcpAvne77//fnkH38TzB0Tst8J118m/LUcOGHL+SP1QfOUSKK9+CBTJ/U899dS+AhVkdMDn3lPu49rjjz/ecpDzYh4QGcCGAyAsuQCpILfIOUlY3MM7uB/EAhfeBWJS3F6NQ5CXTKqe56O4xgQq+zM5EJLIkqNUvr5DsVIBXal6dL7jjgQ61/OZ7vl/xl44FkSgqAE68+SXeSOO+EbmX0U135gKGyL3XacS+g6MQxHJvvWA2sF4pW45BfZmMpXbVJxSCeIJBd6NBTIqoCqCRiJrdJ/A5/4UfaNx4CIILwyQRVQxX74BacC3VtENkvxG/kf0pZFyEkIYkIEAXhUxFSncdxAxt6syZyIdFzE5jg5IFSgpRtYAnc8fFHZ7n6LQd9cxRI6/IA7EwCXA5sDNC4dwrlqVcIEcD7IUbeceu2quAViQ08k+BgPzlUq0XHy+io2OAztgA5ROTFUgzqi8ezafz+dAahoOvENEcx/nQQockBSPiNJX0iiB8zvL7RKELNQMQHmpSrs+AKXooNXB4RBEV+oIuQ4qroDtLKiqD/i/U9hbEZIcyfjpr/CMnKlVl+KN/x999FFF2D4JE0mBYudbEeXArTrFFyEEqmcADlgT3XJw/u4YRC+3Y1EmyvlESlJkAk4g5D3V7+CeDthbrK9EiIj2OS0zDq9pJnN0IhSugDvwtRBVKm04AymQvtRFCEE3AEAACaClfEIIIAVl3XELyIClazgANoaqOqBV6u5EVCIKYI2sqPr+juOkdIHv/yJa0aS4mnEacNDaUu+CBK3HEiq5XGRhN6vECBfwNwgBSbPB0qvNA+U4QgpA4AAgmr2dkucYIaRD5shUhvNSgef4/s4AxXz4HjgEKQAhqlcQ9QcL9GyEgFhgfIcfAnWDmAM7Hu1qKMJgX9Ud3K/t3gF+hJTUGR3Q5ZSt/kinxPNe9IeA9diCiOQa7ge5IAQpoP64hCuALx4+Emo38sINH4D9jG7CDUwio6RaHlzjt1PeM6QoLjqdohm6RWStIQoF/dBDDy0AnYmmqrvUKSkSIVws0Wo9GkhcQwLPQsSoBWCs2N+NHjY8wM0E+1RYWFJ6q+mTGGaQoqpS7IBdAeZHV2AByC3+yNp5LL01jkiOVKekD6Pe6d4DvNAnhoM8ByGnSIPQDVBWywwOaZ09fROxDlvxIv0TYzZYHLN4TU4eXTHSB1V3VKScokdmfs4aQYiQyh2zZ1XoiK4//vhjATzABm4AnoO/gZnneKYT8TsuilWAPgOui0ZwCy/mf9iOd6wpNKnN3zUvvAs2nqLEK1Jm3FnntQUJKXoE8MHwWRBjKF+fxYhF9fbvQAgspRhCcevwcW4QSlleCgu68ITY6yylNa7xw2e6oIq6atqu6aYZ4gR6ImQLEnxW/cb8DDwCF5CgeSyS6gLdECEAF0V8UNzLr4CGCw5hkuHqIPeLjJEfsCYmBErHNekrpA9xKlIS0Jxjzo67BQmMkYRUxwBOEDSiCkkD1wDDtXAK6zLpUC/RXkQWSEkPGwwririnWwvWDtemPwcpnV+yFueqXDMDaEUkiBAZWzg5v62eN6zDu0ECsANmECuEPgqluKxsXoHijXM7zTbDAnCFpi5ii4dwEpWHM2wnwC6xyw11VHEmEOoYayYspi6iZc2gSKKo5u+Ig+VyTGnGAKgzPezilQticFBGQXayltSOf8ENYJjfiPUf4/w8A0V0CzAj0/Wcw4/lQ9PqMQJQ41NbHLvOxDX46Dvz3SmyvKaYmxkK3QGcMYgMwnaqYGf8CvkHxnRsXHhB6ctSBhQNrTzwwAP7GSCvgZRO7qfYSJ9hFsis4kYrTkBnmEbOHEWaNxzHxSot0lgX2pZ1AtbMJUIsyTnqDq4bJiAVRk99zUq6JlLSJwE5IqmKmXTmFEM4l1K2AUsV9TXnCPwgblRBLgNzfmTyas0y5zZ04uoYOkVril8wjZj6888/j4CQ1Ud6Yxb6uPSQipXf6b+AAM5L8blqeDcPYAVXqNCNCEPMSBfXmnIJGCnkgtduSx6WuVhgm6AagyVXKIdnsnpNoY5C5lI/z6uYFTtaOPyKFO+51LA4R0w5pkmEBh8hZvQwMMwMFe5x7YlfiH13SpoKOgWEqB8EllFTzv0TL7otIHPNASARS8p714KOpyBvthYihzieXHMtjskVR94LAiLRYW+arYki5qMBy8pdO2MqYBPLSbF0j6nr9qVm8jVEX8aytir01EMimJQi9THUD3J++eWXRdKYFgWyTK7jvMkmO5SziQtaWmCUCC/nuHmWInS/j7thNIzM4zR7NSzwcdIqU3pA4MYHgS9wBL4EYw2puKbisjn37rQGXJQyL4lzYJeHzW1VKd0H+TykznuhqNeiAGkiyy2mlQJkg7C4CsC7y287mr0oaACNJSDbmInI38g1rQLumYU3/h+54xIxaulCSTvdtqYO5swm4W9+fZGJ1fymCXtt5+9e6o1/63GH2QsiUEKRFrpwi9ngAkLrKU3OeyU+DqLiP4OQmoyuw2j8EFHGgbRq/RDWeUEIyEFMqT84p51fYzrJKcpSTc0ak7oUcf9mUZVzxGJF7BvhQMoYllIKWdoAEyxWVrcCxovAlpFIVwV5+JrA0H7X2dPrT2Re6mDeLatLAkM6pPOa4X5gB0FDzMBSszeT0ms4ZfdfYXvTQC8I+G223NLETYK5FyJ5l/Grg2v/r7RYctUwo7an6p4Um/oT1/Tau7jgKX7cTvPWFSvX1PnbFFIzwA8i657KYcMdozV7RUcuaknVnFeH3euDOSuaEPcmOqgG0CPoZjN6LAHcWQ3LA/wCfOSaJrCKnZv5+5REgEsQkQtStfK2SxMFAXjN/qaxcS1j4pxScRS2ySPW2PD3b7/9tvxvaQNwXxASNYG3dQItyQJZVkaBILx5AXWtVcG11b1ZfrBJdPmcayQZzqhzvd96YrXoEzbCEoBLIuH6tpnxLuVyrxZF+iOXIkYA1fMCdvQc1+GObh1fq61mGWaUeoboqmMqEreujaT1ugkhBg9hF+RY5g/5EhPBuCc9dUPs5y7ZzhKpXduYKWi4Q90yW7U05tWJW03pXMq9hqHAgchCFJnVaP06Yqor/1sQwkV1BQ9Z0qaFYBcEuyrUpLIsAeusoRkiRh+/lkTAecsL1mpNuvEkpFmpxCxXbCuxIVGQOpS7WexqHY6FtPp3MALXdypyS7PAJohwLRiEGaHk6KydjHJ6jGT/mqhQns+QqryvCNhCCFW517WMtbK4S5aC4Q7EmGvuZjoaqlqUOmJJ84xfTDE4AnYzS8LSaf5PVsu1gWRZPViQh1jJFcItJQAzK87QjblQWzMYt4jKUVb7bFkaC/CaVudORNggAO6wAQtcgnl2WLA/5mIpI9Pu1/YWQSJE5GxR7GvIkHsc69Tk663GROZrnWMl8py17ZkEt8Xx3iHHzFgE4HCAkUjEl2VtHC5DVpatCzQ5wVrEOYtpzUzpKtdH9SbnyPxZbWHmB5zyTsQSxEtHIvU0UgdEzZbId4cGMcuNcIWrhibIZSa3mScAeU2emke7hcqqKT0SD1l3OPLcL/Ej1nyrcxIzbPEEQjL6wVIucIXwrRNZ0oAQSRYtIqosjdaGzuofGoXxsrWPTpG2JU61Zs3Uuo01ir1Upm+xrhDF6scBPPZrMS6kU5rFSKHF7HUBRfFkbaHZETiLs3XgWli5lqeViJu1YUrkZg35GkK26KxrIcZ7UmzbqAxAb8ng4R7bUy06RJaCjUCECcFdC40Rm1cbf8uHZL34LBs9wyJb9ET6StcI1W9FjGPpx1lCfZKVxcOmjoKYNRffBRYDeJ0fsPYBWUsyU6apUOWOLY5nRcI5FtO5iAEuRnaROBhCwNRafv6eNfnZukC1DILYwqPEgqiuf1cwOUJGhivWvPWMmY3aOG11Dq+VMTPzqayIMgRldzn9OIt5WCY3iSRjh7tZ2qjrJLwczuBB5GKtUa96YDTZakLOepPUj862GFtypWYmduYBX4KcmUg06RCO4NdEONQAhG2hrS6F6mFXS60sJLFj6GG1a1OnnZk9L8K8d1bOnMHA2tNqTfRsqUPXQsp+WpeE351z1w/GLBNjgq57MI5tBPnf1oK7bM1kpjZWAuw0W3o0SJbt+UTKmt5Yc+qqrK4BzBmwty4Hg5DKTerFUW3hGlLsgTKK5GIsQeQuVpmym5UGOyOSNjy210mneHiBqaWWwSHKRj0Ta9H/rAZRDkrzNp8ZdYQ71UvPuXRBzLTs0sTeaBQsukG4DJomL2KM69aNkJNl9e4uC3Fmg8ERDAZC+Nv2p7BbBWIHAIE1chbr2krlji1Lx1ujAi5uRR+t/ag9VHJlxrhmhIFkAT5dG93uUKe0eVlVMfFLPAYusiqXQSxGQSHxf9f3sCr5NQ6qoqr+fY0k70RwZqvPenaNRK3LxSrtygn4dac0NUMy7WYX0Stmo5hpJ5KSQ7qWqF2hfwdQz3XlzpldvhZe3+pnZOVuhm06zh2VUieX8O0CfYsjfVJuLzJPLxM5B7Bt1eTyrosqsiPc0yEjPfe1znGjbguVOq+RXlqbYKaF2I0x40wQlq3JTRBZ62eyuSspwAXLdrKxLMtzIIzzTMAeJ9V3SUXZUX1XBtYB/FSEbDVXk8vS+UwlPuOIauQAAzjEohwIFUsrWsyehhCoG+Ci6dX+llvZcF9HkMgwRkDtTm2ALHqd3xBZs4aVXXyqaxqztop4SUZk+j0zk3wU6tE6tY0uHKI5S+jkJIS4nmvzGQBqXla69VhYIGZUfGLWisgRSN0HVMur3lORs0b9RJjPceh8JgORIy7JeJoZ7LWTHOJePWLm+2BLi3kaUJ5AbBmH4YUgwPjVyByGKtxUhb9BXrfXR1XUmXo50gUzrz5TSWdd52ZhleSKHKtT5pxDZyBJEN91SQIkWGkLYkwWidYl+5MLdhQ9pqUwcC3fzVR6W3NomVFXp/XRLfWm2VlFUTaXOVFcbV5/mTXprBxbEWgNh1k41s7UiIa7+ViDbhNRCHW1gVnXIAVZKEeMRJQFoGAeitECs6dHbHN0B4XWCG4Ct2uaPxJH2WK2axhzStu/ugA2qn83LgXl2/ita5th1o65CbwL/YwkOeiV/SaEaEGN4lhMwB5bIMU4vymn3pNtnJi8jmO1ntZa8q0lv6VFt7YwNmvaX4kkRVcV13AH35dlf6P3uhEMYXlEGMQLjEeNaHYjvbBW72DfcyjjoIeOiRI1XMAHcG8q+7Xe7SMu6lJuBJwW3YijRkkZyYl52JW1W/XjPMC2sQz/jxxDSw2EixLFDWSuUkFlrq+5RuYH5+QZmAHdIcGuBSjgta0pRm2XquVV95qaRYRHYZKqQ4j6qgcEXLehl6ut1tBYutbFryBG4ZOdl6okOhkhcoWKX5PXnlp1wlzDMLBm249L3VSBlA3zZ4DtFrDWutp1QdDc0MVmllqZmvv2o6wRXEQR7arc+EXkjKQL10EccOgk0ckIsQ+83WyQj25PV4tH7R0F8LXbOZcfZcfpWVCyA17VFzUGNlur77iR+RsGwVK0gEmKJ1kaZHXdRV3C8Lu0xkYhemHXbfmxO7cy6FbsTFYtDPWLdSVyUGbWJ8dlimVaNl3pQGZHplXV9WAcOaU1emAKjr0m5XYjFAA3q8iavpM3dh/im+quQh0MMySlODxbh+Q+TZ2lxuQJP2eTfky+RJ5yNZVhV+ow8ktGDuXhfOtxy43FSrptopqNxCAqkzncAVRucOfP/Hb+t75/JLI6bhEx9mHcncMd7htSkWE9u2lFWFdyBMipbCw15gTdSKxyXV2VHCGr3o+CTjGaBkYqX/4m/kTE1jCQLoDGSRIO8+50AJzE/ae0uDKQO+zksMW6Gl3LIKUWhakvtcVE7rygzS43WSCkMgQwiBDewfsPAD9Se0HQjSZiGXfSgXV8W/HJMQCHb2C+mqc4cm71ZPTC7QI7ONi1Yevuntk+9iyRVeNfTNYtgLrmwSjEqgzdzDG5yyIh9UoiEEDYMdpeU1Is4yJupFizzQGsnrWU6FqOCjiBBkAQO3///ffy66bJjMfBOc17iaZDClxmnOvUfal212r8aLZeRZQ179VcNBEgRYDtPJo9AI+dohEJlt+pAwB0FXFWJoEUCEgFbfkY87HHfT6HhcV1Dq654GTfK0PsWZrWRTWYq0ve9xwhozxg67QLFd1oP5sfkDmxCSgjyoa9BY7viP4hNwyG5Nj0eyzfc+eCKjqch/kCIgLAWyfIc/piI6BLOBlWuqsIYXKabjWbUS6oIWr3J69cIEUeqrdu133OuebmxooQ3808OnMagKKoqyMIAM29rcoXJLsztB1ZFadunqanvaVlhlbaVk65CCHK+woMrQ2LgSqg+LBM6nb504KgmqnBhxvQFAi587TbhldK12EDcWni6i0jam2dns9inqP3/EbFqZylRBhtytKZt7M1pasgJDs2zwJqXQ5StbbSAkvdkB23Db24H62hiuiTewP5PMOSs74D4Y3M4JdL+Ia6+qdjZ/UYylydIEJ978ji7GJZ+huzDQ0u1SFt+UJYH2t+xxEhVhRpsmZumMWmdplw9/7UMzbsTNs+TehKySDTxHFb5Fb9J7FBDIg+7nNRzrHh5q2btWgIdAnrd6VfFoO4llydJhCBLK+WGOIC8YD4SMVeF8Lqxpf1/TXs70qeYrBaYeoKEVKJxx09eY53aDJbRi5Ac3V1K4xyAfCuIkRfoRNjioE68TxnB+hqGNi6+9Am6hjQrFxWFTQbdBnyr2JCxw+uxNTt9iLM1lTmFogsEOp38n7nuDXaAQF1uveqCKm9UmpWSsrxdMZkf2R+1S+ICj8WIJpm89dff90hYqppCcCMSXUAA7GWgnO9o1rOyV34NN4Dt2Y8D+CekiBn4LVaYFdDiFZE1SluDA+yKpUafpD6oJrqnyDOvAeAEMbwfanLQGQlBlfx4KpqLGQj/MqJ1Qix+7SGAFxsA2qVuvkEW/0NJQrE4LZ6V0OINdjV9MytL6oY009QRGmedvpDjx/5242hDun0gPX1jI85Wx1ExrUEw3WQugCVq4Dp5LmXehJhZ8yslUcb87saQqy06sw5VwurVWGIW+Wsrd85l4ZUoMBO7o5ERu4d2IVvVNCxf2NbF6NXzje4eujqoN34ivl9srVqFPoaCDlmO45qH7prmrgqYt5R9QcIM+ILpSKyZjUWlbrTF4ktAFt/Sk7v9IhUL8HY9vCa+pdvZY4XI8Q408ia6OJWUq+sLgfMxnGfv9F1wi3V17D/sCk3PF+R7lpEevCzIs6c/7W7azP+7lJkuGbeLbqYUNZRM+zpNVt6zJQfVDlypkyBHS0KuTwwilTbMa9bo0mEpCHhduZ3vff7qcp81GjAjfI77lHJKvJGuU8petY6IpwSwOssRJWq6+ZdKyXLmHMR7ITl2ruLEOQ5Fk9H2YZIOkozs97n3HXhlC0dusPw/LnPGkxUH3bzgUO5nsbLwMi4twhhYhbvjOR91+3BIFtSu/uXXEOXnduZ25qYXMQa+RN8l5xoafN9R0jnM1QdMQglHAODGTW9BpUhZrYG+boNCNLTN7lhFLUdmej3BSFMCHaeeaQmNcycoaTsa3wcQJyZxWuFOy41p9VnnUs1AroMxvuCECgZZMysHdh/LUnsbhzM7ZQtALcQ3pYGyfcNIek8zT4COX5KPOdah51Tb/3Htzz6H3Tf13kTh7nCAAAAAElFTkSuQmCC'</body></methods><methods><class-id>Roassal2.RTBundleExample</class-id> <category>accessing</category><body package="Roassal2-Builder-BundleEdge-Examples">label	^ 'Bundle Edges'</body></methods><methods><class-id>Roassal2.RTBundleExample</class-id> <category>sources</category><body package="Roassal2-Builder-BundleEdge-Examples">exampleArrowedBezier| b v |v := RTView new.b := RTBundleBuilder new.b view: v.b explore: Collection using: #subclasses.b bezier color: Color blue trans.b useBezierlineWith: #dependentClasses.b edgeBuilderDo: [ :ebuilder|	ebuilder shape: (RTArrowedLine new line: b bezier; yourself).	ebuilder connectToAll: #dependentClasses  ].^ b</body><body package="Roassal2-Builder-BundleEdge-Examples">exampleClusterBezierAndSlider| b lb |b := RTBundleBuilder new.b from: (Array with: TRObject with: TRTest) using: #subclasses. b edges shape line color: Color black.b bezier color: (Color blue alpha: 0.5).b useBezierlineWith: #dependentClasses.b build.lb := RTLegendBuilder new.lb view: b view; right.lb addText: 'RTBundleBuilder: TRObject and TRTest subclasses'.lb addColor: Color black text: 'Hierarchy'.lb addColor: (Color r: 0 g: 120 b: 0 range: 255) text: 'Dependent classes'.lb addColor: Color red text: 'Senders'.lb build.^ b view</body><body package="Roassal2-Builder-BundleEdge-Examples">exampleNoSlider	| b |	b := RTBundleBuilder new.	b explore: Collection using: #subclasses.	b bezier color: Color blue trans.	b useBezierlineWith: #dependentClasses.	b withoutSlider.	^ b</body><body package="Roassal2-Builder-BundleEdge-Examples">exampleSimplerBundlerBuilder| tree searchTree relationsBlock relations b |tree := 'president'-&gt;(OrderedCollection new	add: ('assistant1'-&gt; #());	add: ('director1'-&gt; (Array		with: ('employee1'-&gt;#())		with: ('employee2'-&gt;#())		with: ('employee3'-&gt;#())));	add: ('director2'-&gt;(Array		with: ('employee4'-&gt;#())		with: ('employee5'-&gt;#())));	add: ('guard1'-&gt;#());	add: ('guard2'-&gt;#());	add: ('chef'-&gt;(Array		with: ('subchef'-&gt;#())		with: ('employee6'-&gt;#())));	add: ('vicepresident'-&gt;(Array		with: ('assistant2'-&gt;#())		with: ('guard3'-&gt;#())));	yourself).searchTree := nil.searchTree := [ :s :t| t key = s ifTrue: [ t ]	ifFalse: [ | r |		r := nil.		t value do: [ :child | 			r ifNil: [ r := searchTree value: s value: child.] ].		r ] ].relationsBlock := [ :str| | res strings |	res := Dictionary new.	(str substrings: '') do: [:s| 		strings := s substrings:' '.		res at: strings first put: 			(strings allButFirst collect: [:st |				searchTree value: st value: tree] )].	res	 ].relations := relationsBlock value: 'president director1 director2 vicepresidentassistant1 assistant2director1 employe1 chefemployee1 director1 employee2 employee3 assistant2employee2 employee3 guard1 subchefemployee3 guard2director2 director1 vicepresident assistant2employee4 employee2 employee5employee5 assistan1 chef guard2guard1 presidentguard2 employee6 vicepresidentchef president vicepresident subchefsubchef employee6 employee1 assistant1employee6 employee5 employee4vicepresident president director1 director2 chefassistant2 assistant1 guard3guard3 vicepresident president'.b := RTBundleBuilder new.b explore: tree using: [ :asso| asso value ].b labelShape text: #key.b bezier color: (Color purple alpha: 0.5).b useBezierlineWith: [ :asso | relations at: asso key ].b build.^ b view.</body><body package="Roassal2-Builder-BundleEdge-Examples">exampleVerySimple| b |b := RTBundleBuilder new.b explore: Collection using: #subclasses.b useBezierlineWith: nil.^ b</body></methods><methods><class-id>Roassal2.RTSparklineTest</class-id> <category>tests</category><body package="Roassal2-Sparkline-Tests">testValue	| shape e obj |	obj := #(1 2 3 4 5).	shape := RTSparkline new values: [ :tuple | tuple + 10 ].	e := shape elementOn: obj.	self assert: (shape valuesFor: e) = (obj + 10).		self assert: (shape heightFor: obj) equals: 5.	self assert: (shape widthFor: obj) equals: 5.</body><body package="Roassal2-Sparkline-Tests">testWithOneValue	| shape e obj |	obj := #(1).	shape := RTSparkline new values: [ :tuple | tuple + 10 ].	e := shape elementOn: obj.	self assert: (shape valuesFor: e) = (obj + 10).		self assert: (shape heightFor: obj) equals: 5.	self assert: (shape widthFor: obj) equals: 5.</body><body package="Roassal2-Sparkline-Tests">testWithOneValueAndExtent	| shape e obj |	obj := #(1).	shape := RTSparkline new 					width: 30;					height: 20;					values: [ :tuple | tuple + 10 ].	e := shape elementOn: obj.	self assert: (shape valuesFor: e) = (obj + 10).		self assert: (shape heightFor: e) equals: 20.	self assert: (shape widthFor: e) equals: 30.	"because all the values are the same"	self assert: e trachelShape basicEncompassingRectangle extent equals: 30 @ 1.	self assert: e trachelShape encompassingRectangle extent equals: 30 @ 1.	self assert: e extent equals: 30 @ 1.</body></methods><methods><class-id>Roassal2.TRCallbackTest</class-id> <category>tests</category><body package="Roassal2-Trachel-Tests">testAllCallbacks	| counter1 callbacks |	counter1 := 0.	callbacks := TRCallback allSubclasses collect: #new.	callbacks do: [ :eachCallback | 		eachCallback block: [ counter1 := counter1 + 1 ].		circle1 addCallback: eachCallback ].	circle1 		translateTo: 20 @ 30;		extent: 10 @ 10.	self assert: counter1 equals: 2.	"just to check there is no error."</body><body package="Roassal2-Trachel-Tests">testExtentCallback	| callback v s newExtent |	callback := TRExtentCallback 						block: [ :shape :ratio | 									v := shape. s := ratio ].	circle1 addCallback: callback.	self assert: circle1 extent equals: rectangle1 extent.	newExtent := 5 @ 5.	circle1 extent: newExtent.	self assert: v == circle1.	self assert: v extent equals: newExtent.	self assert: s equals: newExtent / rectangle1 extent.</body><body package="Roassal2-Trachel-Tests">testExtentCallbackWith0	| s callback |	s := TRBoxShape new size: 0.	callback := TRExtentCallback new shape: s newExtent: 5 @ 5 oldExtent: 0 @ 0.</body><body package="Roassal2-Trachel-Tests">testHasCallBack	self deny: TREllipseShape new hasCallback.	self assert: (TREllipseShape new addCallback: TRTranslationCallback new) hasCallback</body><body package="Roassal2-Trachel-Tests">testTranslationCallback	| callback v s  |	callback := TRTranslationCallback 						block: [ :shape :step | 									v := shape. s := step ].	circle1 addCallback: callback.	self assert: circle1 position = rectangle1 center.	circle1 translateTo: 20 @ 30.	self assert: v == circle1.	self assert: v center = (20 @ 30).	self assert: s = ((20 @ 30) - rectangle1 center).	v := nil.	circle1 translateBy: 5 @ 3.	self assert: v == circle1.	self assert: v center = (25 @ 33).	self assert: s = (5 @ 3).</body></methods><methods><class-id>Roassal2.TRCallbackTest</class-id> <category>running</category><body package="Roassal2-Trachel-Tests">setUp	super setUp.	canvas := TRCanvas new.	rectangle1 := (20@20) corner: 150@100.	circle1 := canvas buildCircleFrom: rectangle1 origin 							to: rectangle1 corner color: (Color green alpha: 0.1).	circle2 := canvas buildCircleFrom: 200 @ 200 to: 240 @ 230 color: (Color blue alpha: 0.1).</body></methods><methods><class-id>Roassal2.RTShapeBuilderExample</class-id> <category>example</category><body package="Roassal2-Builder-Common-Examples">example01	"	self new example01	"	| builder v |	v := RTView new.	builder := RTShapeBuilder new.	builder circle 				size: 20; 				fillColor: (RTNColorLinearNormalizer new									context: (Collection withAllSubclasses);									command: #numberOfMethods;									lowColor: Color green;									highColor: Color red);				withText.					v addAll: (builder elementsOn: Collection withAllSubclasses).	RTCellLayout new gapSize: 1; on: v elements.	v build.	^ v view</body><body package="Roassal2-Builder-Common-Examples">example02	"	self new example02	"	| builder v |	v := RTView new.	builder := RTShapeBuilder new.	builder rectangle 				size: 50; 				fillColor: (Color purple alpha: 0.3);				withText.	v addAll: (builder elementsOn: (1 to: 50)).	RTCellLayout on: v elements.	v build.	^ v view</body><body package="Roassal2-Builder-Common-Examples">example03	"	self new example03	"	| builder v els |	v := RTView new.	builder := RTShapeBuilder new.	builder rectangle 				width: 50;				fillColor: (Color purple alpha: 0.3);				withText.	els := builder elementsOn: (1 to: 50).	els @ RTDraggable.	v addAll: els.	RTCellLayout on: v elements.	v build.	^ v view</body></methods><methods><class-id>Roassal2.RTSparklineExample</class-id> <category>accessing</category><body package="Roassal2-Sparkline-Examples">label	^ 'Sparkline'</body></methods><methods><class-id>Roassal2.RTSparklineExample</class-id> <category>icons</category><body package="Roassal2-Sparkline-Examples">exampleLOCIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAE+UlEQVR4XuWaWUssMRCF5+f75oMg4oYg6rijgvu+466guCvuKKKIuFvjVHMjuX07mXSl2ztyDjTK6NQk83VyqiqdyeXwVUzK4H8F+EDwhQ8EHwi+8IHgA8EXPhB8IPjCB4IPBF/4QPCFDwQfCL7wgeADwRc+EHwg+MIHgg8EX/hA8IUPBB8IvvCB4APBFz4QfCD4wgeCDwRf+EDwhQ8EHwi+8IHgA8EXPpBE9PHxQb8SCGlaW1sTTUKPMT4+TtL3z8zM0ODgoHgM+s+3tzfymUdDQwP9CBA14NfX12Dy6iorKyPp5JWGhoYo7sTVa9lslnwA6GpvbxePg1VZWUlSkLW1tcb3ZigkflHdhZeXlyT5QNv/dXZ2Utz357eW3MrKCvkAUHGamppoZ2eH5ufnSTqPqakpknwfExMTNDk5aX1vZmlpSbTs1tfXg+A8ONPFf7dNzBZjYWGBRkdHg9+Pjo5ix9jd3f1e2f39/cFlirGxsWGdS2Nj4/fvm5ubJInhsro5Bn6W9VtMne9sXt4+wdWSra6uTsz8VMzb21uRIU9PT3snJa4+WCgWrwgrEPWPvMSkW5k+8O3tbZqdnSXfgYf34pGREZKYetwbLOqzJVlmlLeZPDGjf+D7+3uuo6NDnArqrw0PD9PT05NXVsTp8cDAwD/78fn5eSxDzq+mnOvKMBn64eFh4Fe+2R2L52TcstQkObNiI5SaOmcuNTU1lB84JZEYtLW1kW+M7u5ua0IQZcicfZ2dnVF5eTn19vaSa61iMvWxsTFaXFx0joFv6oitE05huRiKs3q0nD+4rq6uglTYtaBLS2pLY2+UJgjhWBcXF5QqEH0vdynoTDFaWloKFppxxdsYbyV3d3eiSv3l5SXwR0kfLOwtNzc3QZHJW2SiQKLMlBOEqqoq5/Q0PNi9vT0vGFEZWnNzszFeuE3EF5sv/+Q2ycPDQ2JtG5unZGyVtum6v78n3UxXV1eDLUn93TW7UjHYeCsqKv76jOPj41gxCnUN+vr6jPF4FedvIK+VWKhS1y/uQCRi6q5fEr5SNHVpuzwNT6qrqyM4IFF+8NNAosaAAOO7UrdVla2trfS/IKDBiDR1zipU29uW2rGZShICPTFgTzo4OKDS0tKgPW7630Km7jMOTn/ZTIslBn6ljlKpq/Nv7uUkEYvrGelZuorBXWKfGFE1hnQ71bfo+vr6dCp1/UN8zlLCfsJNPklhpuQLwuZv0sJX6fPzM9kVEh4sF0d8DuIbh++8ubk5Oj09FZ/rS0CYzmAM1b0Ioi4+Hk6kUud2++PjI21tbQVBS0pKrNWwqdBUps5fnN5kc5XeMeDWeb4/FHQNTA9T+FbZ6rzfJ0ZPTw+dnJyQd6WOryIxdX352U67khZvfXx+/acFTy6P36QRw6Tl5WXnrrEXEFuxaKvauZuqzi+0K/aAudPL25/LHmzS/v6+dwybt3DI6+trSqVSdzUgPgcIv8bnC5zaPj8/O8cxTZhb9nH2/jRimIw97ANpHZQVNPWurq7ITIdP//ihMZ+7TzdkfppD8mhPEjGUIdse2vv1hSG+8IHgA8EXPhB8IPjCB4IPBF/4QPCFDwQfCL7wgeADwRc+EHwg+MIHgg8EX/hA8IUPBB8IvvCB4APBFz4QfCD4wgeCDwRf+EDwhQ8EHwi+8IHgA8EXPhB8IPjCB4IPBF/4QPCFD6So9QWkXF11duLGUQAAAABJRU5ErkJggg=='</body></methods><methods><class-id>Roassal2.RTSparklineExample</class-id> <category>sources</category><body package="Roassal2-Sparkline-Examples">exampleLOC	| shape es v |	shape := RTSparkline new.	shape		width: 80;		height: 20.	shape values: [ :cls | (cls rtmethods collect: #numberOfLinesOfCode) sorted ].	es := shape elementsOn: RTShape withAllSubclasses.	es @ RTDraggable @ RTPopup.	v := RTView new.	v addAll: es.	RTGridLayout on: es.	^ v</body></methods><methods><class-id>Roassal2.RTAxisConfigurationTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testDefault	self deny: config areLabelRotated</body><body package="Roassal2-Builder-Grapher-Tests">testLabelConversion	self assert: (config labelConversion rtValue: 1000) equals: 1000.0</body><body package="Roassal2-Builder-Grapher-Tests">testLabelRotation	self assert: config labelRotation equals: 0.</body><body package="Roassal2-Builder-Grapher-Tests">testLabelRotationBy45	config labelRotation: -45.	self assert: config labelRotation equals: -45</body><body package="Roassal2-Builder-Grapher-Tests">testMaxValue	config maxValue: 5.	self assert: config maxValue equals: 5</body><body package="Roassal2-Builder-Grapher-Tests">testMaxValueIfNotSet	config maxValueIfNotSet: 5.	self assert: config maxValue equals: 5</body><body package="Roassal2-Builder-Grapher-Tests">testMaxValueIfNotSet02	config maxValueIfNotSet: 5.	config maxValueIfNotSet: 10.	config maxValueIfNotSet: 2.	self assert: config maxValue equals: 10</body><body package="Roassal2-Builder-Grapher-Tests">testMaxValueInScript01	| b ds axeConfig |	b := RTGrapher new.	ds := RTData new.	ds points: #(1 2 3).	ds x: #yourself.	ds y: #yourself.	b add: ds.	axeConfig := b axisX.	b build.		self assert: axeConfig maxValue equals: 3</body><body package="Roassal2-Builder-Grapher-Tests">testMinValue	config minValue: 5.	self assert: config minValue equals: 5</body><body package="Roassal2-Builder-Grapher-Tests">testMinValueIfNotSet	config minValueIfNotSet: -5.	config minValueIfNotSet: -2.	self assert: config minValue equals: -5</body><body package="Roassal2-Builder-Grapher-Tests">testMinValueIfNotSet02	config minValueIfNotSet: -5.	config minValueIfNotSet: -10.	config minValueIfNotSet: -1.	self assert: config minValue equals: -10</body><body package="Roassal2-Builder-Grapher-Tests">testNoRotation	config rotateLabels.	config doNotRotateLabels.	self deny: config areLabelRotated</body><body package="Roassal2-Builder-Grapher-Tests">testNumberOfTicksAndLabel	self assert: config numberOfTicks equals: 4.	self assert: config numberOfLabels equals: 4.		config numberOfLabels: 5.	self assert: config numberOfTicks equals: 5.	self assert: config numberOfLabels equals: 5.</body><body package="Roassal2-Builder-Grapher-Tests">testNumberOfTicksAndLabels02	self assert: config numberOfTicks equals: 4.	self assert: config numberOfLabels equals: 4.</body><body package="Roassal2-Builder-Grapher-Tests">testNumberOfTicksAndLabels02Default	self assert: config numberOfTicks equals: 4.	self assert: config numberOfLabels equals: 4.</body><body package="Roassal2-Builder-Grapher-Tests">testNumberOfTicksAndLabels03	self assert: config numberOfLabels equals: 4.		config numberOfTicks: 3.	"Cannot have more labels than ticks"	self assert: config numberOfLabels equals: 3.</body><body package="Roassal2-Builder-Grapher-Tests">testNumberOfTicksAndLabels04		config numberOfTicks: 3.	self assert: config numberOfLabels equals: 3.		config numberOfLabels: 2.	self assert: config numberOfTicks equals: 3.	self assert: config numberOfLabels equals: 2.		config numberOfLabels: 5.	self assert: config numberOfTicks equals: 5.	self assert: config numberOfLabels equals: 5.</body><body package="Roassal2-Builder-Grapher-Tests">testPlain	config plain.	self assert: config numberOfTicks equals: 0.	self assert: config numberOfLabels equals: 0.</body><body package="Roassal2-Builder-Grapher-Tests">testRotation	config rotateLabels.	self assert: config areLabelRotated</body><body package="Roassal2-Builder-Grapher-Tests">testcolor	self assert: config color equals: Color gray</body><body package="Roassal2-Builder-Grapher-Tests">testnoDecimal	config noDecimal.	self assert: (config getStringFromNumber: 1000) equals: '1000'.	self assert: (config getStringFromNumber: 1000000) equals: '1000000'</body><body package="Roassal2-Builder-Grapher-Tests">testoneDecimal	config oneDecimal.	self assert: (config labelConversion rtValue: 1000) equals: 1000.0.	self assert: (config labelConversion rtValue: 1000000) equals: 1000000.0.</body><body package="Roassal2-Builder-Grapher-Tests">testtitlePosition	self assert: config titlePosition equals: 0 @ 20</body><body package="Roassal2-Builder-Grapher-Tests">testtitlePosition02	config titlePosition: 50 @ 30.	self assert: config titlePosition equals: 50 @ 30</body><body package="Roassal2-Builder-Grapher-Tests">testwithThousandsSeparator	config withThousandsSeparator.	self assert: (config getStringFromNumber: 1000) equals: '1,000'.	self assert: (config getStringFromNumber: 1000000) equals: '1,000,000'.</body></methods><methods><class-id>Roassal2.RTAxisConfigurationTest</class-id> <category>min max</category><body package="Roassal2-Builder-Grapher-Tests">testHasBeenManuallySet	| axis |	axis := RTAxisConfiguration new.	self deny: axis hasMinValueBeenManuallySet.	self deny: axis hasMaxValueBeenManuallySet.</body><body package="Roassal2-Builder-Grapher-Tests">testHasBeenManuallySet02	| axis |	axis := RTAxisConfiguration new.	axis minValue: -5.	self assert: axis hasMinValueBeenManuallySet.	self deny: axis hasMaxValueBeenManuallySet.</body><body package="Roassal2-Builder-Grapher-Tests">testHasBeenManuallySet03	| axis |	axis := RTAxisConfiguration new.	axis maxValue: -5.	self deny: axis hasMinValueBeenManuallySet.	self assert: axis hasMaxValueBeenManuallySet.</body></methods><methods><class-id>Roassal2.RTAxisConfigurationTest</class-id> <category>running</category><body package="Roassal2-Builder-Grapher-Tests">setUp	super setUp.	config := RTAxisConfiguration new</body></methods><methods><class-id>Roassal2.RTGradientColoredLineTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| e1 e2 l |	e1 := RTElement new.	e2 := RTElement new.	l := RTGradientColoredLine edgeFrom: e1 to: e2.</body><body package="Roassal2-Core-Tests">testBasicWithInitialization	| e1 e2 |	e1 := RTElement new.	e2 := RTElement new.	(RTGradientColoredLine new color: (Array with: Color red with: Color blue)) 		edgeFrom: e1 to: e2.</body><body package="Roassal2-Core-Tests">testGradientColorShape	| e1 e2 shape |	e1 := RTElement new.	e2 := RTElement new.	shape := RTGradientColoredLine new.	shape gradientColorShape.	shape edgeFrom: e1 to: e2.</body><body package="Roassal2-Core-Tests">testGradientColorShape2	| e1 e2 shape |	e1 := RTElement new.	e2 := RTElement new.	e2 translateBy: 5 @ 5.	shape := RTGradientColoredLine new.	shape colors: (Array with: Color red with: Color blue).	shape precision: 100.	shape gradientColorShape.	shape edgeFrom: e1 to: e2.</body><body package="Roassal2-Core-Tests">testPrecision	self assert: RTGradientColoredLine new precision equals: 1</body></methods><methods><class-id>Roassal2.RTConstraintExample</class-id> <category>sources</category><body package="Roassal2-ExampleBrowser-Examples">exampleAboveTopOnLabel| v b e |v := RTView new.e := RTLabel elementOn: 'Happiness'.b := (RTBox new size: 80; color: (Color blue alpha: 0.3)) element.v add: e; add: b.b @ RTDraggable.e @ RTDraggable.(RTConstraint on: e background: b)	above;	top;	stick.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleAnchorConstraint	| v lbls es e1 e2 a1 a2 |	v := RTView new.	lbls := RTLabel new elementsOn: #(#First #Second).	es := RTEllipse new		size: 30;		borderColor: Color black;		elementsOn: #(#source #dest).	v		addAll: lbls;		addAll: es.	es @ RTDraggable.	es @ RTLabeled.	e1 := RTArrowedLine new		withBorderAttachPoint;		color: Color black;		edgeFrom: es first to: es second.	v add: e1.	e2 := RTArrowedLine new		withBorderAttachPoint;		color: Color black;		edgeFrom: es second to: es first.	v add: e2.	a1 := RTAnchorConstraint new.	a1 anchorShape size: 10.	a1 guideLine color: Color red.	a1		element: lbls first;		edge: e1;		balance: 0.2;		minDistance: 10;		build.	(a2 := RTAnchorConstraint new)		element: lbls second;		edge: e2;		balance: 0.2;		minDistance: 10;		build.	es second translateTo: 200 @ 150.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleAnchorConstraintIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleBelowAndStick| v b e |v := RTView new.e := (RTEllipse new size: 20; color: (Color red alpha: 0.3)) element.b := (RTBox new size: 80; color: (Color blue alpha: 0.3)) element.v add: e; add: b.b @ RTDraggable.e @ RTDraggable.(RTConstraint on: e background: b)	below;	stick.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleBelowAndStickWithLabel| v b e |v := RTView new.e := RTLabel elementOn: 'Happiness'.b := (RTBox new size: 80; color: (Color blue alpha: 0.3)) element.v add: e; add: b.b @ RTDraggable.e @ RTDraggable.(RTConstraint on: e background: b)	below;	stick.^ v</body></methods><methods><class-id>Roassal2.RTConstraintExample</class-id> <category>icons</category><body package="Roassal2-ExampleBrowser-Examples">exampleAboveTopOnLabelIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABnElEQVR4XuXRMYrCUBSGUXfuMhQJpBC1EQs3YCEiIgTrmB1YWIki8isTmGqmM8Iw54MLl/e6e3rPp99fquefwAfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H8QH8fNBfBA/H8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQv/8KUhRFDodDVqtVbrdbJpNJmqbJeDzOdrvNer3O8XjMbDbL+XzOfr/PYrGID/KhBoNBqqpKWZbp9/vt2xfGbrdrDz+dTjMajTKfz1uguq4zHA59kE93uVzaI9/v9xbher3mt//H45Hv3QfpuM0meWd8kI5bLpN3xgfxQXwQH8QH8UF8EB/EB/FBfBAfxAfxQXwQH8QH8UF8EB/EB/FBfJAfnU7JO+OD+PkgPoifD+KD+PkgPoifD+Lng/ggfj6ID+Lng/ggfj6ID+Lng/j5ID6Inw/ig/j5ID6Inw/ig/j5IH4+iA/i54P4IH4+iA/i54P4IH4+iJ8P4oP4+SA+iF8nvQDq9/iZKK4j/gAAAABJRU5ErkJggg=='</body><body package="Roassal2-ExampleBrowser-Examples">exampleBelowAndStickIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAABR0lEQVR4XuXTIQ6DQBBAUe5/nE0xXKAat2kQeFKDQg0NNQ0C1QR2eT8ZN2bnZZt19Supxj+BD+Lng/ggfj6ID+Lng/ggfj6ID+Lng/j5ID6Inw/ig/j5ID6Inw/ig/j5IH4+iA/i54P4IH4+iA/i54P4IH4+iJ8P4oP4+SA+iJ8P4oP4+SA+SMmlFPHP5Bzhg/ggPogP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4ID6ID+KD+CA+iA9ScttBD+fxipxy5Of7cGeafJBTir7ff4VliZrfUz9I2+5BhsEHuRRkHH8YXRdbPsjVKPMcX5jKMW4Dcqd8EB/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H8QH8TupD9ZNp2Sij7j1AAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleBelowAndStickWithLabelIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABh0lEQVR4XuXUPYqDABCA0ZzQS6Wzt7LRRmySQhGCTZpUYoJYWNl7i3EX622W/WHZ98FcYN4wp333+0ud/BX4IH4+iA/i54P4IH4+iA/i54P4IH4+iJ8P4oP4+SA+iJ8P4oP4+SA+iJ8P4ueD+CB+PogP4ueD+CB+PogP4ueD+PkgPoifD+KD+PkgPoifD+KD+Pkgfj6ID/ItNU3EV8YH8UF8EB/EB/FBfBAfxAfxQXwQH8QH8UF8EB/EB/FBfBAfxAfxQXwQH8TPB/l0XdfFuq4fXvvr9Qof5JdLkiTquo7H4xHn8/kAKMsyhmGI6/UaVVVFlmXvL6qJy+USfd9H27bhg/xQz+cztm07UO73+56m6YGQ53ksyxLzPMc4jlEURUzTFLfb7YDyQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H8QH8fNBfBA/H8TPB/FB/HwQH8TPB/mvvQEMgfXIHXCtJwAAAABJRU5ErkJggg=='</body></methods><methods><class-id>Roassal2.RTConstraintExample</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'Constraint'</body></methods><methods><class-id>Roassal2.RTAbstractElasticBoxInteractionTest</class-id> <category>tests</category><body package="Roassal2-Tests">testSelectableView	| view e position int |	view := RTView new.	e := RTBox element.	view add: e.	int := RTSelectableView new.	position := view canvas camera fromSpaceToPixel: e position.	view @ int.	self assert: int group isEmpty.	view announce: (TRMouseLeftDragStart new		shape: view;		position: position;		canvas: view canvas ).	view announce: (TRMouseDragging new		shape: view;		position: position + e extent;		canvas: view canvas ).	view announce: (TRMouseDragEnd new		shape: view;		position: position + e extent;		canvas: view canvas ).	self assert: int group size = 1.</body></methods><methods><class-id>Roassal2.RTAbstractElasticBoxInteractionTest</class-id> <category>as yet unclassified</category><body package="Roassal2-Tests">testZoomableBoxView	| view e position int |	view := RTView new.	e := RTBox element.	view add: e.	int := RTZoomableBoxView new.	position := view canvas camera fromSpaceToPixel: e position.	view @ int.	self assert: view canvas camera scale equals: 1.0001.	view announce: (TRMouseLeftDragStart new		shape: view;		position: position;		canvas: view canvas ).	view announce: (TRMouseDragging new		shape: view;		position: position + e extent;		canvas: view canvas ).	view announce: (TRMouseDragEnd new		shape: view;		position: position + e extent;		canvas: view canvas ).	self assert: view canvas camera scale &gt; 1.0001.</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlotExample</class-id> <category>sources</category><body package="Roassal2-Builder-AnimatedScatterPlot-Examples">exampleCountriesAndPublications| data b |	data := RTTabTable new input: '	Country	Population	Documents	Citable documents	Citations	Self-Citations	Citations per Document	H index	Docs/Pop1	Switzerland	7997152	395703	377016	7714443	1077442	22.69	569	0.04948049005445942	Sweden	9516617	375891	361569	6810427	1104677	20.11	511	0.03949838477265613	Denmark	5590478	208227	198923	3876514	573278	21.56	427	0.0372467255930534	Finland	5414293	190192	184924	3091345	506506	18.55	372	0.03512776275683645	Iceland	320137	10834	10359	199408	19732	23.7	160	0.03384176149585966	Netherlands	16767705	547634	519258	1.01E+07	1701502	21.25	576	0.03266004500914117	Norway	5018869	162390	154481	2299463	382990	17.23	327	0.0323558953222338	Monaco	37579	1185	1099	16430	2138	16.72	56	0.03153356928071539	United Kingdom	63227526	1918650	1763766	3.14E+07	7513112	18.29	851	0.030345169602239410	Australia	22683600	683585	643028	9338061	2016394	16.73	514	0.030135648662469811	New Zealand	4433100	129822	122601	1705695	276798	15.73	282	0.029284699194694512	Canada	34880491	993461	946493	1.57E+07	3050504	18.5	658	0.028481852506032713	Israel	7907900	224674	215590	3663004	530340	17.78	414	0.028411335499943114	Singapore	5312400	149509	144653	1616952	230656	12.95	268	0.028143400346359515	Belgium	11142157	299077	285735	4696153	701283	18.16	454	0.026841930157688516	Austria	8462446	214844	204243	3047983	433709	16.67	378	0.025387931574393517	Slovenia	2058152	50565	49471	403209	83402	9.53	153	0.024568156287776618	Liechtenstein	36656	844	820	7665	717	12.16	41	0.023024879965080719	Ireland	4588798	104634	98785	1329296	162271	16.47	271	0.022802049687085820	United States	313914040	7063329	6672307	1.30E+08	6.25E+07	20.45	1380	0.022500838127533321	Germany	81889839	1782920	1704566	2.58E+07	6852785	16.16	740	0.021772176154846322	France	65696689	1283370	1229376	1.79E+07	4151730	15.6	681	0.019534774423715623	Spain	46217961	759811	715452	8688942	2212008	13.89	476	0.016439734327526924	Greece	11280167	180688	171529	1827577	324747	12.28	266	0.016018202567391125	Italy	60917978	959688	909701	1.27E+07	2976533	15.26	588	0.015753773048737826	Czech Republic	10514810	163740	160193	1265709	313836	9.28	239	0.015572321325825227	Estonia	1339396	19141	18774	204306	38547	13.58	130	0.014290769869403828	Japan	127561489	1776473	1734289	2.03E+07	6073934	12.11	635	0.013926405327551529	Croatia	4267000	57454	55909	305003	71781	6.45	143	0.01346472931802230	Portugal	10526703	138892	134447	1342075	270626	13.06	234	0.013194254649342731	Luxembourg	531441	6736	6459	52218	5038	12.97	80	0.012674972386398532	Korea	50004000	578625	566953	4640390	1067252	10.55	333	0.011571574274058133	Hungary	9943755	112177	109150	1189497	202337	11.76	254	0.011281150832859434	Greenland	56840	609	600	6927	951	17.65	36	0.010714285714285735	Cyprus	1128994	10311	9938	79318	10252	12.46	86	0.0091329094751610736	Poland	38542737	346611	339712	2441439	652956	8.25	302	0.0089929005301310137	Lithuania	2985509	24755	24434	151748	37377	8.61	109	0.0082917184305925738	Bermuda	64806	483	463	13161	1010	29.08	55	0.0074530136098509439	Faeroe Islands	49506	331	321	5915	481	26.55	35	0.0066860582555649840	Bulgaria	7304632	45348	44609	319449	56183	7.8	138	0.0062081156175971641	New Caledonia	258121	1562	1519	19506	2872	15.38	59	0.0060514254942449542	Malta	418366	2517	2384	21115	1584	12.5	60	0.00601626327187243	Grenada	105483	558	502	2791	157	11.81	23	0.0052899519353829544	Palau	20754	106	102	1314	77	15.01	22	0.0051074491664257545	Latvia	2025473	10082	9918	67924	10428	8.61	85	0.0049776027624164846	Romania	21326905	92264	91247	396795	100983	6.34	135	0.0043261785992857447	Kuwait	3250496	13775	13425	93290	12879	7.67	83	0.0042378147827285448	Barbados	283221	1195	1083	11744	801	11.28	50	0.0042193198950642849	Turkey	73997128	306926	291814	1935431	519675	8.24	210	0.0041478096285034250	Russian Federation	143533000	586646	579814	3132050	938471	5.52	325	0.004087185525279951	Serbia	7223887	28882	28312	81010	23288	8.75	68	0.0039981245553813352	Chile	17464814	68974	66972	685110	134570	13.24	194	0.0039493120281727653	San Marino	31247	117	114	1381	13	17.61	17	0.0037443594585080254	Seychelles	87785	328	309	4632	360	17.86	33	0.0037364014353249455	Guam	162810	587	575	7779	416	14.67	45	0.0036054296419138956	Tunisia	10777500	38334	36859	169981	39062	6.77	85	0.0035568545581071757	French Polynesia	273814	934	908	11157	1288	14.27	45	0.0034110746711271258	Malaysia	29239927	99187	97018	356918	93479	7.85	125	0.0033921767314945859	Brunei Darussalam	412238	1345	1188	8967	874	9.52	40	0.0032626783557071460	Armenia	2969081	9365	9194	73659	13718	8.78	105	0.0031541746419178261	Jordan	6318000	19847	19507	107550	15257	7.24	82	0.0031413421968977562	Lebanon	4424888	13677	12847	97316	10182	9.7	97	0.0030909256912265363	Puerto Rico	3667084	11209	10953	150252	11819	15.34	129	0.0030566520974158264	Cayman Islands	57570	171	165	825	36	7.5	14	0.0029702970297029765	Argentina	41086927	118347	114659	1167884	259247	11.44	222	0.0028804052442276866	Qatar	2050514	5788	5542	23880	2554	5.74	50	0.0028227068920280567	Uruguay	3395253	9552	9263	107649	15598	14.39	104	0.0028133396833755868	Trinidad and Tobago	1337439	3743	3541	25225	2242	8.38	61	0.0027986323114549569	Macedonia	2105575	5753	5611	30344	3717	6.98	62	0.0027322702824644170	Iran	76424443	202807	197571	832211	337637	8.49	135	0.0026536928767671971	Belarus	9464000	24801	24466	122850	24438	5.08	106	0.0026205621301775172	Oman	3314001	8202	7816	43277	5405	7.06	63	0.0024749539906596373	Bahrain	1317827	3256	3071	13287	1404	5.19	39	0.0024707340189569674	South Africa	51189307	125303	118747	1170454	260828	11.36	231	0.0024478354434452575	Ukraine	45593300	110291	108782	452610	131479	4.29	142	0.0024190177065489976	Brazil	198656019	461118	446892	3362480	1151280	10.09	305	0.0023211881639488677	Cuba	11270957	24606	23847	123183	28193	5.81	93	0.0021831331625167278	Dominica	71684	155	145	865	77	7.42	15	0.0021622677305953979	Saudi Arabia	28287855	58840	56534	293556	45641	7.11	124	0.002080044598644980	United Arab Emirates	9205651	19051	18331	100247	11207	7.56	87	0.0020694897080065381	American Samoa	55128	113	107	1199	69	11.25	18	0.0020497750689304982	China	1350695000	2680395	2655272	1.13E+07	6127507	6.17	385	0.0019844561503522383	Montenegro	621081	1091	1076	2209	548	1.79	17	0.0017566146766685884	Fiji	874742	1524	1479	10758	1100	8.48	40	0.0017422279940828385	Botswana	2003910	3454	3369	27060	3224	9.13	57	0.0017236303027581186	Georgia	4511800	7490	7309	50895	7781	7.74	78	0.0016600913161044487	Virgin Islands (U.S.)	105275	173	168	2024	53	12.63	24	0.0016433151270482188	Tuvalu	9860	15	15	109	2	7.24	7	0.0015212981744421989	Mexico	120847477	166604	162116	1346721	295320	10	232	0.0013786303540288290	Costa Rica	4805295	6491	6319	86713	9950	15.67	103	0.0013508015636917291	Andorra	78360	104	93	921	29	8.18	16	0.0013272077590607592	Jamaica	2712100	3489	3298	28602	3554	9.69	57	0.0012864569890490893	Moldova	3559541	4553	4513	27987	5555	6.5	60	0.0012790975016160894	Thailand	66785001	82209	79537	621817	109600	10.96	167	0.0012309500452055195	Marshall Islands	52555	63	62	499	24	7.1	13	0.0011987441727713896	Bosnia and Herzegovina	3833916	4448	4336	14364	2274	6.92	44	0.0011601714800219997	Egypt	80721874	89489	87658	518096	106783	7.56	132	0.0011086090493885298	Mauritius	1291456	1428	1387	9101	772	7.85	41	0.0011057287278854399	Samoa	188889	177	176	1373	104	8.15	19	0.000937058272318663100	Panama	3802281	3561	3401	74014	7882	29.76	106	0.00093654309084468101	Northern Mariana Islands	53305	49	48	443	26	10.71	12	0.000919238345370978102	Gabon	1632572	1497	1419	20417	2496	16.09	61	0.000916958026966039103	Venezuela	29954782	27138	26445	204691	29729	8.42	130	0.000905965531647001104	Turks and Caicos Islands	32427	29	28	251	4	11.28	9	0.0008943164646745105	Vanuatu	247262	215	206	1620	200	9.64	20	0.000869523016072021106	Antigua and Barbuda	89069	75	71	279	17	5.07	9	0.000842043808732556107	Gambia	1791225	1508	1410	35029	3232	25.59	80	0.000841881952295217108	Morocco	32521143	27253	26175	157219	29432	7.11	99	0.000838008676386313109	Azerbaijan	9297507	7472	7373	18607	4318	3	45	0.000803656291950089110	Tonga	104941	81	80	747	53	9.54	16	0.000771862284521779111	Mongolia	2796484	2140	2096	17104	1869	12.97	55	0.000765246645430476112	Colombia	47704427	35890	34768	228686	36843	10.61	133	0.0007523410772757113	Belize	324060	225	217	2209	121	13.26	26	0.000694315867431957114	Bahamas	371960	258	246	2498	206	13.52	25	0.000693622970211851115	Algeria	38481705	25714	25387	105945	20698	6.49	78	0.000668213635544475116	Namibia	2259393	1449	1412	16317	1594	12.61	55	0.000641322691537063117	India	1236686732	750777	716232	4528302	1585248	7.99	301	0.000607087454383719118	Swaziland	1230985	695	676	4421	287	8.2	28	0.000564588520574987119	Guyana	795369	423	400	3157	128	9.23	27	0.00053182862294105120	Albania	3162083	1543	1500	7407	769	7.88	36	0.000487969480877004121	Congo	4337051	2051	1947	16173	1685	10.17	49	0.000472901978786968122	Sri Lanka	20328000	8239	7853	61175	6285	9.91	86	0.00040530303030303123	Solomon Islands	549598	222	209	2345	184	13.16	24	0.000403931600915578124	Maldives	338442	135	131	895	52	6.57	15	0.000398886663002819125	Bhutan	741822	295	290	1360	173	6.55	18	0.00039766952179903126	Aruba	102384	40	40	233	1	7.57	8	0.000390686044694484127	Kenya	43178141	16727	16044	206886	34874	15.09	131	0.000387395094198243128	Zimbabwe	13724317	5254	5092	55075	6025	10.71	72	0.000382824150739159129	Senegal	13726021	5052	4844	44909	5892	10.73	75	0.000368060051780483130	Suriname	534541	191	187	1632	126	10.62	24	0.000357315902802591131	Cameroon	21699631	7543	7318	59454	12199	10.42	72	0.000347609597600991132	Kazakhstan	16797459	5654	5563	21197	3306	4.48	52	0.000336598529575217133	Pakistan	179160111	58133	55915	243958	72199	6.22	111	0.000324475128283438134	Peru	29987800	8963	8528	97117	10907	15.04	109	0.00029888821454058135	Ecuador	15492264	4568	4406	51303	6817	14.47	83	0.000294856839516807136	Ghana	25366462	6825	6594	52958	6618	10.73	73	0.000269056047311604137	Uzbekistan	29776850	7551	7414	29026	5687	3.99	53	0.000253586259124118138	Benin	10050702	2536	2472	18846	3379	10.06	49	0.000252320683669658139	Bolivia	10496285	2564	2505	31002	3203	14.13	61	0.000244276903685447140	Nigeria	168833776	40952	40124	174002	42457	6.23	89	0.000242558100459709141	Papua New Guinea	7167010	1719	1669	18668	2092	11.43	54	0.000239848974677027142	Nepal	27474377	6070	5582	41907	5494	9.73	71	0.000220933126163334143	Malawi	15906483	3356	3163	42360	6042	16.51	80	0.000210983156993284144	Burkina Faso	16460141	3372	3259	31888	5299	12.14	62	0.000204858512451382145	Uganda	36345860	7389	7014	87647	14831	17.01	99	0.00020329688168061146	Sao Tome and Principe	188098	38	37	436	56	11.85	14	0.000202022350051569147	Guinea-Bissau	1663558	325	299	5919	1068	22.77	40	0.000195364393667068148	Vietnam	88775500	16474	16116	125927	18500	11.79	107	0.000185569216732094149	Zambia	14075099	2608	2467	30437	3583	14.07	68	0.000185291769528584150	Iraq	32578209	5836	5526	14909	1831	4.82	41	0.000179138147219818151	Syrian Arab Republic	22399254	3953	3851	29002	3808	9.93	58	0.000176479091669749152	Tanzania	47783107	7983	7708	91706	14922	14.46	93	0.000167067411501726153	Nicaragua	5991733	965	936	9903	840	13.41	45	0.000161055240612357154	Lesotho	2051545	319	308	1848	112	7.31	22	0.000155492567796466155	Djibouti	859652	133	122	653	42	6.6	13	0.000154713767896777156	Togo	6642928	1007	943	5111	516	6.06	31	0.0001515897808918157	Equatorial Guinea	736296	109	107	896	105	9.07	15	0.00014803828894901158	Paraguay	6687361	938	904	9364	615	13.45	45	0.000140264597649207159	Philippines	96706764	13163	12796	141070	15727	13.38	116	0.000136112506049732160	El Salvador	6297394	803	777	4553	263	7.45	31	0.000127513063340169161	Bangladesh	154695368	19481	19037	115329	22662	8.37	97	0.000125931372424803162	Mali	14853572	1769	1717	19599	2135	13.95	55	0.000119095931941489163	Kiribati	100786	12	11	84	1	7.27	6	0.000119064155735916164	Tajikistan	8008990	880	870	2429	396	3.14	23	0.000109876526253622165	Sudan	37195349	3980	3860	24909	3661	9.29	52	0.000107002625516432166	Cambodia	14864646	1556	1462	15891	1739	12.76	49	0.00010467790487577167	Guatemala	15082831	1528	1453	15652	1011	12.7	53	0.000101307241326247168	Madagascar	22293914	2251	2182	22100	3516	11.9	56	0.000100969260041104169	Mauritania	3796141	349	338	2711	150	8.98	25	0.0000919354681504191170	Central African Republic	4525209	399	383	4080	236	11.73	32	0.0000881727230720172171	Ethiopia	91728849	8015	7825	60457	12411	10.42	73	0.000087377091148282172	Honduras	7935846	692	675	7265	370	12.48	39	0.000087199272768146173	Comoros	717503	59	56	516	36	9.71	10	0.0000822296213395623174	Indonesia	246864191	20166	19740	146670	16149	10.94	112	0.0000816886398886423175	Rwanda	11457801	901	838	6336	506	12.72	36	0.0000786363805759936176	Yemen	23852409	1718	1676	8972	1069	7.93	37	0.0000720262678708888177	Niger	17157042	1183	1158	11457	1055	10.83	47	0.0000689512795970308178	Dominican Republic	10276621	705	678	7234	422	13.02	41	0.0000686023158779525179	Eritrea	6130922	370	361	3233	261	9.35	25	0.0000603498136169405180	Mozambique	25203395	1505	1457	15973	1867	12.98	53	0.0000597141773955453181	Sierra Leone	5978727	342	323	2077	134	7.87	21	0.0000572028125719739182	Haiti	10173775	438	397	6447	441	21.58	36	0.000043051866195193183	Turkmenistan	5172931	215	213	1259	119	7.29	16	0.0000415625106926808184	Timor-Leste	1210233	50	44	216	12	7.23	8	0.000041314358474773185	Guinea	11451273	382	363	4249	179	14.19	34	0.0000333587366225572186	Burundi	9849569	281	273	2195	124	9.51	24	0.0000285291671138097187	Liberia	4190435	117	103	570	39	8.74	14	0.0000279207289935293188	Chad	12448175	280	266	3013	264	12.02	27	0.0000224932570437032189	Angola	20820525	442	427	2806	205	8.9	25	0.0000212290516209366190	Myanmar	52797319	1077	1049	7944	612	11.9	38	0.0000203987630508284191	Afghanistan	29824536	485	441	2088	241	5.38	21	0.0000162617785570914192	Somalia	10195134	60	57	323	12	7.96	11	0.00000588516050892514'.	data removeFirstRow.	data removeColumn: 1.b := RTAnimatedScatterPlot new.b addTable: data.b columns:  #('Country' 'Population' 'Documents' 'Citable documents' 'Citations' 'Self-Citations' 'Citations per Document' 'H index' 'Docs/Pop').b x: #third.b y: #fourth.b size: #fourth.b build.^ b view</body><body package="Roassal2-Builder-AnimatedScatterPlot-Examples">exampleEvolutionOfGraphET2| b |b := RTAnimatedScatterPlot new.b addName: 'Version 22 of GraphET2' table: (RTTabTable new input:  'GET2HorizontalBarDiagram	12	0	70	GET2AbstractLineDiagram	23	5	86	GET2AxisBuilderTest	8	0	54	GET2UnionDiagram	8	1	26	GET2VerticalLabelDecorator	3	0	10	GET2RegularLabelDecorator	12	2	51	GET2ModelLabelDecorator	8	2	31	GTScatterplot	5	1	51	GET2AbstractAxisBuilder	18	2	55	GET2Abstract2DDiagram	22	4	94	GET2SingleAxisDiagram	17	2	65	GET2Examples	64	0	48	GET2RegularTickDecorator	6	1	24	GET2AbstractAxisDecorator	10	1	64	GET2AbstractAxisStrategy	8	1	17	GET2OrdinaryLineDiagram	7	1	40	GET2TopDownAxisStrategy	3	0	11	GET2AbstractBarDiagram	11	2	34	GET2Distribution	8	1	41	GET2InteractionWrapper	9	1	33	GET2UnionDiagramTest	4	0	60	GTBuilderTest	3	0	38	GTHistogram	2	0	5	GET2BaseLineDecorator	2	0	10	GTAbstractBuilder	18	4	57	GTLine	3	0	19	GET2LineDiagram	19	3	94	GET2DiagramBuilder	19	2	55	GET2PieDiagramTest	2	0	22	GET2YAxisBuilder	2	0	15	GET2Scatterplot	7	1	38	GET2PieDiagram	9	2	35	GET2OldExamples	59	0	48	GET2XAxisBuilder	2	0	15	GET2LineDiagramTest	12	0	128	GET2CompositeDiagramTest	16	0	240	GET2VerticalBarDiagram	11	0	66	GET2BarDiagramTest	34	0	525	GET2AbstractDiagram	47	15	138	GET2TitleDecorator	2	0	14	GET2CompositeDiagram	18	1	70	GET2RotatedLabelDecorator	10	1	47	GET2Axis	29	10	71	GET2Version	4	2	13	DotaHero	8	4	21	GET2LeftRightAxisStrategy	3	0	11	GET2DataObject	8	3	24	').b addName: 'Version 28 of GraphET2' table: (RTTabTable new input: 'GET2HorizontalBarDiagram	12	0	71	GET2AbstractLineDiagram	21	5	82	GET2VerticalLabelDecorator	3	0	10	GET2UnionDiagram	8	1	26	GET2AbstractBuilder	26	11	85	GET2RegularLabelDecorator	12	2	51	GET2ModelLabelDecorator	8	2	31	GET2CatalogTest	1	0	10	GET2AbstractAxisBuilder	29	4	85	GET2SingleAxisDiagram	11	2	38	GET2Examples	69	0	48	GET2AbstractAxisBuilderTest	11	0	80	GET2RegularTickDecorator	6	1	24	GET2Line	10	5	44	GET2CatalogSample	10	2	29	GET2AbstractAxisDecorator	11	1	66	GET2AbstractAxisStrategy	8	1	17	GET2OrdinaryLineDiagram	8	1	43	GET2TopDownAxisStrategy	3	0	11	GET2AbstractBarDiagram	8	2	24	GET2InteractionBuilder	4	2	25	GET2Distribution	8	1	41	GET2InteractionWrapper	9	1	33	GET2UnionDiagramTest	4	0	60	GTBuilderTest	3	0	38	GET2ScatterplotDiagram	7	1	38	GET2BaseLineDecorator	2	0	10	GET2LineDiagram	17	3	85	GET2DiagramBuilder	19	2	55	GET2PieDiagramTest	2	0	22	GET2YAxisBuilder	4	0	11	GET2Scatterplot	5	1	51	GET2PieDiagram	9	2	35	GET2OldExamples	59	0	48	GET2XAxisBuilder	4	0	11	GET2LineDiagramTest	12	0	128	GET2Catalog	10	1	23	GET2CompositeDiagramTest	16	0	240	GET2Histogram	10	2	31	GET2VerticalBarDiagram	10	0	67	GET2BarDiagramTest	34	0	525	GET2AbstractDiagram	54	15	156	GET2TitleDecorator	2	0	14	GET2CompositeDiagram	16	1	66	GET2RotatedLabelDecorator	10	1	47	GET2Axis	33	10	85	GET2Version	4	2	13	DotaHero	8	4	21	GET2LeftRightAxisStrategy	3	0	11	GET2DataObject	8	3	24	').b addName: 'Version 34 of GraphET2' table: (RTTabTable new input: 'GET2CompositeBuilder	7	1	31	GET2HorizontalBarDiagram	12	0	72	GET2Builder	29	11	95	GET2AbstractLineDiagram	19	5	78	GET2Bar	10	2	31	GET2UnionDiagram	9	1	29	GET2VerticalLabelDecorator	3	0	10	GET2RegularLabelDecorator	12	2	51	GET2ModelLabelDecorator	8	2	32	GET2CatalogTest	1	0	10	GET2LabelDecorator	8	0	48	GET2SingleAxisDiagram	7	2	20	GET2Examples	73	0	48	GET2RegularTickDecorator	6	1	24	GET2Line	10	5	44	GET2CatalogSample	10	2	29	GET2AbstractAxisDecorator	9	2	38	GET2AbstractAxisStrategy	8	1	17	GET2OrdinaryLineDiagram	8	1	43	GET2TopDownAxisStrategy	3	0	11	GET2AbstractBarDiagram	8	2	24	GET2InteractionBuilder	4	2	25	GET2Distribution	8	1	41	GET2InteractionWrapper	9	1	33	GET2UnionDiagramTest	4	0	60	GTBuilderTest	3	0	38	GET2UnionBuilder	5	1	17	GET2AxisBuilder	39	7	109	GET2AxisBuilderTest	15	0	119	GET2LineDiagram	19	3	93	GET2BaseLineDecorator	2	0	10	GET2ScatterplotDiagram	7	1	38	GET2PieDiagramTest	2	0	22	GET2YAxisBuilder	4	0	11	GET2Scatterplot	5	1	52	GET2PieDiagram	9	2	37	GET2OldExamples	60	0	48	GET2XAxisBuilder	4	0	11	GET2DiagramBuilder	19	2	55	GET2LineDiagramTest	12	0	128	GET2Catalog	10	1	23	GET2CompositeDiagramTest	16	0	240	GET2VerticalBarDiagram	8	0	64	GET2BarDiagramTest	34	0	525	GET2AbstractDiagram	67	15	193	GET2TitleDecorator	2	0	14	GET2CompositeDiagram	14	1	62	GET2RotatedLabelDecorator	6	1	18	GET2Axis	36	10	91	GET2Version	4	2	13	DotaHero	8	4	21	GET2LeftRightAxisStrategy	3	0	11	GET2DataObject	8	3	24	').b addName: 'Version 38 of GraphET2' table: (RTTabTable new input:  'GET2LabelDecorator	1	1	7	GET2VerticalBarDiagram	8	0	65	GET2SingleAxisDiagram	7	2	20	GET2PieDiagram	9	2	37	GET2HorizontalBarDiagram	12	0	72	GET2Line	10	5	44	GET2NumericLabelDecorator	15	3	55	GET2Axis	38	10	99	DotaHero	8	4	21	GET2LineDiagram	19	3	93	GET2TopDownAxisStrategy	3	0	11	GET2Scatterplot	5	1	52	GET2XAxisBuilder	4	0	11	GTBuilderTest	3	0	38	GET2Bar	10	2	31	GET2UnionDiagramTest	5	0	128	GET2AbstractLineDiagram	19	5	78	GET2DiagramBuilder	21	2	59	GET2InteractionBuilder	4	2	25	GET2AbstractBarDiagram	8	2	24	GET2AbstractAxisDecorator	19	2	84	GET2ObliqueLabelCreator	6	1	15	GET2HorizontalLabelCreator	1	0	7	GET2VerticalLabelCreator	2	0	7	GET2Version	4	2	13	GET2OldExamples	60	0	48	GET2BaseLineDecorator	2	0	10	GET2PieDiagramTest	2	0	22	GET2LineDiagramTest	12	0	131	GET2Catalog	10	1	23	GET2ModelLabelDecorator	8	2	33	GET2DataObject	8	3	24	GET2UnionDiagram	9	1	31	GET2BarDiagramTest	35	0	521	GET2OrdinaryLineDiagram	8	1	43	GET2ScatterplotDiagram	7	1	38	GET2Builder	32	12	104	GET2Distribution	8	1	41	GET2AbstractAxisStrategy	8	1	17	GET2CatalogSample	10	2	29	GET2CompositeDiagram	14	1	64	GET2AxisBuilder	45	9	137	GET2YAxisBuilder	4	0	11	GET2CompositeDiagramTest	16	0	240	GET2AbstractDiagram	69	16	202	GET2UnionBuilder	5	1	17	GET2LabelCreator	6	0	7	GET2Examples	72	0	48	GET2RegularTickDecorator	7	1	30	GET2InteractionWrapper	9	1	33	GET2LeftRightAxisStrategy	3	0	11	GET2CompositeBuilder	7	1	31	GET2AxisBuilderTest	16	0	124	GET2TitleDecorator	3	0	20	').b addName: 'Version 42 of GraphET2' table: (RTTabTable new input:  'GET2LabelDecorator	1	0	7	GET2VerticalBarDiagram	8	0	65	GET2SingleAxisDiagram	7	2	20	GET2PieDiagram	9	2	37	GET2HorizontalBarDiagram	12	0	72	GET2Line	10	5	49	GET2CompositeBuilderTest	11	0	150	GET2NumericLabelDecorator	14	3	53	GET2Axis	40	10	105	DotaHero	8	4	21	GET2LineDiagram	19	3	93	GET2TopDownAxisStrategy	3	0	11	GET2Scatterplot	5	1	53	GET2XAxisBuilder	4	0	11	GTBuilderTest	3	0	45	GET2Bar	10	2	31	GET2BackgroundLinesDecorator	11	2	42	GET2AbstractLineDiagram	19	5	78	GET2UnionDiagramTest	5	0	128	GET2InteractionBuilder	4	2	25	GET2AbstractBarDiagram	8	2	24	GET2AbstractAxisDecorator	20	4	88	GET2ObliqueLabelCreator	6	1	15	GET2HorizontalLabelCreator	1	0	7	GET2VerticalLabelCreator	2	0	7	GET2Version	4	2	13	GET2OldExamples	60	0	48	GET2BaseLineDecorator	2	0	10	GET2PieDiagramTest	2	0	22	GET2LineDiagramTest	12	0	131	GET2Catalog	10	1	23	GET2DiagramBuilder	21	2	59	GET2ModelLabelDecorator	5	1	27	GET2DataObject	8	3	24	GET2UnionDiagram	9	1	31	GET2BarDiagramTest	35	0	521	GET2OrdinaryLineDiagram	8	1	43	GET2ScatterplotDiagram	7	1	38	GET2Builder	30	12	112	GET2Distribution	8	1	41	GET2AbstractAxisStrategy	8	1	17	GET2CatalogSample	10	2	29	GET2CompositeDiagram	14	1	65	GET2AxisBuilder	50	11	151	GET2YAxisBuilder	4	0	11	GET2CompositeDiagramTest	17	0	252	GET2AbstractDiagram	70	16	205	GET2UnionBuilder	5	1	18	GET2LabelCreator	6	0	7	GET2Examples	73	0	48	GET2RegularTickDecorator	6	1	24	GET2InteractionWrapper	9	1	33	GET2LeftRightAxisStrategy	3	0	11	GET2CompositeBuilder	6	1	31	GET2AxisBuilderTest	16	0	124	GET2TitleDecorator	3	0	20	').b addName: 'Version 45 of GraphET2' table: (RTTabTable new input:  'GET2LabelDecorator	1	0	7	GET2VerticalBarDiagram	8	0	65	GET2SingleAxisDiagram	7	2	20	GET2PieDiagram	9	2	37	GET2HorizontalBarDiagram	12	0	72	GET2Line	10	5	49	GET2CompositeBuilderTest	11	0	150	GET2NumericLabelDecorator	18	3	90	GET2Axis	40	10	105	DotaHero	8	4	21	GET2LineDiagram	19	3	93	GET2TopDownAxisStrategy	3	0	11	GET2Scatterplot	5	1	53	GET2XAxisBuilder	4	0	11	GTBuilderTest	3	0	45	GET2Bar	10	2	37	GET2BackgroundLinesDecorator	11	2	42	GET2AbstractLineDiagram	19	5	78	GET2UnionDiagramTest	5	0	128	GET2InteractionBuilder	4	2	25	GET2AbstractBarDiagram	8	2	24	GET2AbstractAxisDecorator	20	4	88	GET2ObliqueLabelCreator	6	1	15	GET2HorizontalLabelCreator	1	0	7	GET2VerticalLabelCreator	2	0	7	GET2Version	4	2	13	GET2OldExamples	60	0	48	GET2BaseLineDecorator	2	0	10	GET2PieDiagramTest	2	0	22	GET2LineDiagramTest	12	0	131	GET2Catalog	10	1	23	GET2DiagramBuilder	21	2	59	GET2ModelLabelDecorator	5	1	27	GET2DataObject	8	3	24	GET2UnionDiagram	9	1	31	GET2BarDiagramTest	35	0	521	GET2OrdinaryLineDiagram	8	1	43	GET2ScatterplotDiagram	7	1	38	GET2Builder	30	12	112	GET2Distribution	8	1	41	GET2AbstractAxisStrategy	8	1	17	GET2CatalogSample	10	2	29	GET2CompositeDiagram	14	1	65	GET2AxisBuilder	50	11	151	GET2YAxisBuilder	4	0	11	GET2CompositeDiagramTest	17	0	252	GET2AbstractDiagram	70	16	205	GET2UnionBuilder	5	1	18	GET2LabelCreator	6	0	7	GET2Examples	73	0	48	GET2RegularTickDecorator	6	1	24	GET2InteractionWrapper	9	1	33	GET2LeftRightAxisStrategy	3	0	11	GET2CompositeBuilder	6	1	31	GET2AxisBuilderTest	16	0	124	GET2TitleDecorator	3	0	20	').b addName: 'Version 47 of GraphET2' table: (RTTabTable new input:  'GET2Axis	40	10	105	GET2TopDownAxisStrategy	3	0	11	GET2ModelLabelDecorator	5	1	27	GET2YAxisBuilder	4	0	11	GET2Line	10	5	49	GET2Version	4	2	13	GTBuilderTest	4	0	51	GET2SingleAxisDiagram	7	2	20	GET2HorizontalLabelCreator	1	0	7	GET2BarDiagramTest	35	0	521	GET2AxisBuilderTest	16	0	124	GET2Scatterplot	5	1	53	GET2AbstractBarDiagram	8	2	24	GET2AxisBuilder	50	11	151	GET2RegularTickDecorator	6	1	24	GET2LabelCreator	6	0	7	DotaHero	8	4	21	GET2AbstractLineDiagram	19	5	78	GET2InteractionWrapper	9	1	33	GET2LineDiagram	19	3	93	GET2OldExamples	60	0	48	GET2DataObject	8	3	24	GET2CompositeDiagramTest	17	0	252	GET2Distribution	8	1	41	GET2Table	28	2	100	GET2XAxisBuilder	4	0	11	GET2InteractionBuilder	4	2	25	GET2Examples	73	0	48	GET2ObliqueLabelCreator	6	1	15	GET2Bar	5	1	14	GET2VerticalLabelCreator	2	0	7	GET2PieDiagramTest	2	0	22	GET2LeftRightAxisStrategy	3	0	11	GET2BackgroundLinesDecorator	11	2	42	GET2LineDiagramTest	12	0	131	GET2AbstractDiagram	70	16	205	GET2AbstractAxisStrategy	8	1	17	GET2UnionDiagram	9	1	31	GET2UnionDiagramTest	5	0	128	GET2HorizontalBar	2	0	15	GET2Builder	30	12	115	GET2OrdinaryLineDiagram	8	1	43	GET2VerticalBar	2	0	15	GET2PieDiagram	9	2	37	GET2NumericLabelDecorator	18	3	92	GET2LabelDecorator	1	0	7	GET2CompositeBuilder	6	1	31	GET2UnionBuilder	5	1	18	GET2VerticalBarDiagram	8	0	65	GET2HorizontalBarDiagram	12	0	72	GET2AbstractAxisDecorator	20	4	88	GET2BaseLineDecorator	2	0	10	GET2CatalogSample	10	2	29	GET2ScatterplotDiagram	7	1	38	GET2Catalog	10	1	23	GET2DiagramBuilder	21	2	59	GET2CompositeDiagram	14	1	65	GET2CompositeBuilderTest	11	0	150	GET2TitleDecorator	3	0	20	').b x: #second.b y: #third.b size: #fourth.b columns: #('NOM' 'NOA' 'LOC').b if: [ :row | row first endsWith: 'Test' ] color: Color green.b if: [ :row | row first endsWith: 'Decorator' ] color: Color blue.b if: [ :row | row first endsWith: 'Diagram' ] color: Color red.b build.^ b view</body><body package="Roassal2-Builder-AnimatedScatterPlot-Examples">exampleSimple| b t1 t2 t3 |t1 := RTTabTable new input: '	m1	m2	m3A	1	2	1B	2	5	4C	1	7	4	'.t1 removeFirstRow.t2 := RTTabTable new input: '	m1	m2	m3A	1	4	8B	2	6	4C	1	6	2	'.t2 removeFirstRow.t3 := RTTabTable new input: '	m1	m2	m3A	2	5	5B	2	5	4C	2	7	8	'.t3 removeFirstRow.b := RTAnimatedScatterPlot new.b addTable: t1.b addTable: t2.b addTable: t3.b columns: #('m1' 'm2' 'm3').b x: #second.b y: #third.b size: #fourth.b build.^ b view</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlotExample</class-id> <category>icons</category><body package="Roassal2-Builder-AnimatedScatterPlot-Examples">exampleCountriesAndPublicationsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAADjElEQVR4XuXcbS+bURzHce9mb2EvYQ/EC/BgYohYyLKHHky3BTMsggfuRmpDSTBhN9ke1E2bmWlWS0k2jQphZMY2ow3Sn13nyrqsI8WS5SrfX/KPC+fU8f/odZ0raMbhIT/plAx+C9IMRMPDSlkbGzIDf0j6eoaKWWXmxVKMMZ83j3/SGhKLPe24cw0SaWvTo5s3/wnkpd//30C+9faeCmSzp+digYRbWvS9r0/N16/raVmZBkpLdSMrS89criSQu5WV6hocVLvHo7yiIj0eGNC1wkLdq6vT1fx8rUWjul1VdQSk0prnfftWVzIzVd/aKl8wqHfhcBLI5UuXFGps1MitW/YaHpaU6FNnp7wVFUmNfm6tadT6mKn6ggJ73pa1nqqcnIsDYgDuZGfrQV6eXldX63NXl8asJn7p7j4C8sLnsxvfNzKiEa9Xzycm9OTVK72PRDS7tCSPNf5vEK81xsy539BgjzM4Y4FAEsjB0JD9tSZratRaXKwPTU1acbv1prY2qdHVubn2+wHrh+Bjc7M9L9rfr2EL8sKA2KeMVLW/b3+jB1YDz1LxXw2Ppxhjg1iPf9Iafp+yTjmOv8vihw/CB+GHD8IH4YcPwg8fhA/CDx+ED8IPH4QPwg8fhA/CDx+EHz4IH4QfPggfhB8+CB+En4sMEo1GxSdII5CtrS0+CB+ED8IH4YPwQfggfBA+CB+ED8IH4YPwQfjhg/BB+CB8ED4IH4QPwgfhg/BBTpmdnR2trq5qc3NTfBCHQVZWVjQ9Pf275ufnxQdxCGRvby8JI1Hn9XR47kHW1taOBTGnLz6IAyDmDyWOA1lfX+eDOHUNCYfDSRizs7P8awh/l8UH4d+H8EH4IHwQPggfhB8+CB+ED3LeQUKhkH2Tt7y8LD5IGoD8eefNB0kDkEgkYmNsb2/zQZwCMc1vb2+Xx+NRLBYT/xriIEg8Htfc3Jw6Ojrkdrv5IE6D+P1+TU1NaXFxUeaXTvxdloMg4+Pj9rMiGAyKv+11GCQQCKi8vFyTk5P8exKnQcxOyuVyaWZmho+RDiA+n89cMw7TuVAg/PBB+CD88EH4IPzwQfgg/PBB+CD88EH44YPwQfjhg/BB+OGD8EH44YPwQfjhg/DDB+GD8MMH4YPwwwfhg/DDB+GD8OM4iHk1HfN2YWFBiWN+HAQx/yyzu7urxDG/LQ6DjI6O2s8O8+ps5pgf5/ITaEVeoL/RjEQAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-AnimatedScatterPlot-Examples">exampleEvolutionOfGraphET2Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAEB0lEQVR4XuXcW08TQRQH8EPLrd3SQrf0Qi+0DbRcerMLCPRGFVBjQcGoBER80IrBxBc1aOTVaPTNGBMffPPJFz+Qn8BP4TlriJtmIcTQS/L/zUy6bWe37ZzODC3dIXz48J1mgfNpJUQUwm+lFqpxvka0KZdmJUGUaNhFMTmMvRXPVVEU31nr9vb2OkKh0EWr1dprvD0SiRTtdruHi2qxWKyN+wWDwYsN9Uvd3d02OZZcj0ajS3LpdDqb80atEj2sED3hR3nMpT5J9C1H9HGK6Gue6N040YSh+iH9vW4MyjSXV1wczQ6Iy+UazeVyD2q12pdsNrtns9ncc3NzB6lUamtycnIzk8nsVCqVo0AgoHH1Lp/Pl/X7/Rdk30Kh8MLtdo8nk8kb5XL5jdwm9UZGRmb5vpfpdHpb6szMzOxzo1c5WD1SSqXSa6nLx96Vy8XFxeddLBwOL8pjnvuLLBM9XSXaukJ0e5lot0j0jIeqQw7O/grRTkNA2mp0dLTicDj80hherzcl79yxsbGrsh2Lxapyv8fjmRgaGopLnZ6eHoVvv8TtZ+HGz8u+HNSI9Bp+5xfkNjmuqqrjEhA51vH+cuy+vj6n9BBj7+THKHNw7unDAve0c3+RMiSdVlR+vghDtwxx+BMYPnz48OHDhw8fPnz48OHD10kCnIP8/SJ+S3SIOmcpbiI3fmt0APl3wzrROn5L4MOHDx8+fPjw4cOHDx8+fPiAyK8M+/v7B/FbokNomlaPx+PL+C3RIQYGBoL4PQQfPnz4MEX1jK9jLOkZH35A8OEHBD8g+PADgh8QfO0NiI2zxl9h2fRNfG0PSJ6z/AIxr2/iwx+y0AIi55KbfZ2eTqd35NzzPaK9uv5TXXwtCYic0G+2zIaqqklZHKBIVKzqi1Tga0lAZMkLsxP95XSCeaJ5/BZrcUBkWEokErXGevKXlQxVAT02+No+qSucTVYvwtesgPD8EJAifWSBYtslct900fVtuS/H+SASeS8rA+G3WBsCotHIWp4cZSdp+uQd5ryqqtuy+g9+i7V2yOr6t+l0GusNcrbwnI/fYi0KyPDw8NSstvH2w+zGr8+ZO78V5ftPYz2Z0DV9bjfh4LTGqc7pEaewdCp8zekhPk4LtDAYpNSJPUSCUG9ICfw/AP47IL5keDm+P/2JJjhJQ67Qyt1xOrq1RT/okNNxI5u98yOc6ibpPqczkrmJP4x6ZVvWXeQPpy7ooPiSobMFJGSyiur5BOSyISBV+ICcyMMpyomHLMpyOonZkJXkhK9NApyMk3pOPrrgw4cPHz58+PDhw4cPHz58+PDhw4cPHz58+PDhw4cPHz58+PDhw4cPHz58+PDhw4cPHz58+PDhw4cPHz58sP4AohCdyI/yvN0AAAAASUVORK5CYII='</body><body package="Roassal2-Builder-AnimatedScatterPlot-Examples">exampleSimpleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABjCAYAAABt56XsAAABy0lEQVR4XuXbMUsbcRzH4V/kgkkMQXJCCFgQQs4l1JI4dDMttIoWN2kHJ1H7Hpzt1kXfgm+0/xsOLErIIMnh85A/ZEmG74fcJUPC5/Mt8iM9Fp08IvdXWqGvEVefIv4uGWTrlbfo+Cu+oS8R1ycRF/sRT4cRf+YRtx8jHs4iztPz38+CHKVzkc782cv30kk949Jf8o2kCPdFivE54u5bGjbFeKw+HccRv/xL1oqVgy86WUTmr+Tz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fzvSPz//9G90Kv1/vQ7XaH/lI1CJLneTGbzW7LU4bx11pzkMlk8rMKMh6PT/211hwkfSp2qyD+Zasm95Asy9rpbPpL1STIMvr9/rjZbG75a9YgSLq3nFWXtU6ns+MvuuYgVYzyDIfDmb/omoOMRqPvZYzpdHrTarW2/UVrcA9pt9t5o9HY8NesSRCfH8QP4vOD+EFeUxTFefomdewvVZMgg8HgoPwl7i/lX7L8ID4/iM8P4vP5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+n8/n8/l8Pp/P5/P5fD6fz+fz+Xw+33L+AUWxN2Nrk18AAAAAAElFTkSuQmCC'</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlotExample</class-id> <category>accessing</category><body package="Roassal2-Builder-AnimatedScatterPlot-Examples">label	^ 'Animated scatter plot'</body></methods><methods><class-id>Roassal2.RTLineTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| e1 e2 l edge |	e1 := RTBox elementOn: 5.	e2 := RTBox elementOn: 10.	l := RTLine new.	l widthElement: [ :anEdge | anEdge from model ].		edge := l edgeFrom: e1 to: e2.	self assert: edge trachelShape width equals: 5</body><body package="Roassal2-Core-Tests">testBasicError	| arrow |	arrow := RTArrowedLine new			color: Color red;			edgeFrom: RTElement new to: RTElement new;			withOffsetIfMultiple.	self should: [ arrow element ] raise: Error</body></methods><methods><class-id>Roassal2.RTExploraBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-Explora-Tests">testClickWithCallback	| node1 elem2 |	node1 := builder node: 1.	builder onClickExplore: [ :num | num*3 to: num*3 + 1 ].	builder renderIn: builder view.		node1 element announce: TRMouseClick.	self assert: builder view numberOfElements = 3.		elem2 := builder view elements at: 3.	elem2 announce: TRMouseClick.	self assert: builder view numberOfElements = 5.		elem2 announce: TRMouseClick.	self assert: builder view numberOfElements = 3.		elem2 announce: TRMouseClick.	self assert: builder view numberOfElements = 5.		node1 element announce: TRMouseClick.	self assert: builder view numberOfElements = 1.</body><body package="Roassal2-Builder-Explora-Tests">testClickWithoutCallback	| node |	node := builder node: 5.	self assert: node element model = 5.	builder renderIn: builder view.		node element announce: TRMouseClick.	self assert: builder view numberOfElements = 1</body><body package="Roassal2-Builder-Explora-Tests">testEmpty	self assert: builder view numberOfElements = 0</body><body package="Roassal2-Builder-Explora-Tests">testIsExpandable	| node1 node2 |	node1 := builder node: 1.	builder renderIn: builder view.	self assert: node1 isExpandable not.		builder onClickExplore: [ :n | n = 1 ifTrue: [ 2 to: 3 ] ifFalse: [ #() ]].	node1 element announce: TRMouseClick.	node2 := node1 expandedNodes at: 1.	self assert: node1 isExpandable.	self assert: node2 isExpandable not.</body><body package="Roassal2-Builder-Explora-Tests">testNodeCantKillDaddy	| node1 elem2 |	node1 := builder node: 1.	builder onLeftClickExplore: [ :n | #(2 3) ].	builder onRightClickExplore: [ :n | #(1) ].	builder renderIn: builder view.	self assert: builder view numberOfElements = 1.		node1 element announce: TRMouseLeftClick.	elem2 := builder view elementFromModel: 2.	self assert: builder view numberOfElements = 3.		elem2 announce: TRMouseRightClick.	self assert: builder view numberOfElements = 3.</body><body package="Roassal2-Builder-Explora-Tests">testTwoWayExpansion	| node1 node2 n1 n2 n3 n4 expandDown |		" A tree structure "	n1 := RTExploraTestTree new.	n2 := RTExploraTestTree new.	n3 := RTExploraTestTree new.	n4 := RTExploraTestTree new.	n1 left: n2; right: n3.	n2 parent: n1; left: n4.	n3 parent: n1.	n4 parent: n2.		expandDown := [ :n |		|r|		r := OrderedCollection new.		n left isNil ifFalse: [ r add: n left ].		n right isNil ifFalse: [ r add: n right ].		r	].		node2 := builder node: n2.	builder onLeftClickExplore: [ :n | expandDown value: n ].	builder onRightClickExplore: [ :n | n parent isNil ifFalse: [ Array with: n parent ] ifTrue: [ #() ] ].	builder renderIn: builder view.		node2 element announce: TRMouseRightClick.	node1 := builder view elementFromModel: n1.	self assert: builder view numberOfElements = 2.		node2 element announce: TRMouseLeftClick.	self assert: builder view numberOfElements = 3.		node1 announce: TRMouseLeftClick.	self assert: builder view numberOfElements = 4.		node2 element announce: TRMouseRightClick.	self assert: builder view numberOfElements = 2.</body><body package="Roassal2-Builder-Explora-Tests">testWithOneNode	builder node: 5.	builder renderIn: builder view.	self assert: builder view numberOfElements = 1</body></methods><methods><class-id>Roassal2.RTExploraBuilderTest</class-id> <category>running</category><body package="Roassal2-Builder-Explora-Tests">setUp	super setUp.	builder := RTExploraBuilder new.</body></methods><methods><class-id>Roassal2.RTBlinkTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBlink	| view el canvas |	view := RTView new.	el := RTBox element.	view add: el.	canvas := view setUpCanvas.	self assert: el shape color ~= Color red.	self deny: canvas hasAnimation.		RTBlink on: el in: view.	self assert: el trachelShape color = Color red.	self assert: canvas hasAnimation.</body><body package="Roassal2-Core-Tests">testHighlighting	| view el canvas originalColor |	view := RTView new.	el := RTBox element.	view add: el.	canvas := view setUpCanvas.	originalColor := el trachelShape color.	RTBlink highlight: el.	self assert: el trachelShape color = Color red.	RTBlink unhighlight: el.	self assert: el trachelShape color = originalColor.</body></methods><methods><class-id>Roassal2.RTNameCloudTest</class-id> <category>tests</category><body package="Roassal2-Builder-NameCloud-Tests">testBasic	| b |	b := RTNameCloud new.	b addString: 'open		| v shape |		v := RTView new.		shape := RTLabel new height: [ :assoc | assoc value ]; text: #key.		v addAll: (shape elementsOn: table associations).		RTFlowLayout on: v elements.		v open'.	b build.	self assert: b view numberOfElements &gt; 0.</body></methods><methods><class-id>Roassal2.RTSunburstBuilderExamples</class-id> <category>examples</category><body package="Roassal2-Builder-Sunburst-Examples">label	^ 'Sunburst'</body></methods><methods><class-id>Roassal2.RTSunburstBuilderExamples</class-id> <category>icons</category><body package="Roassal2-Builder-Sunburst-Examples">exampleBasic2Icon	^ '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/yA8x38BsksFStfXt2UAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Sunburst-Examples">exampleBasicIcon	^ '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'</body><body package="Roassal2-Builder-Sunburst-Examples">exampleCollectionSubclassesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAARPklEQVR4XuVdB3RUVRpGdK2osAoWXMtyZG2ryK56FAGxIIJHdBWxArKiIisdaQKColgQXRYlIfTQJJRESkILYoSEJqi0CKGEahQQIfQv+3/3zryZN69MgjOZCe+dk5Nkypt7/+/+vUy5oiLvX/F0lfM+CbwPiPcv7wPifUC8f3kfEO8D4v3L+4B4HxDvX94HxHxhzx7giy9Q1KdPEd58E3j0UeDOO4GbblK/vQ9IaQPSvz+KyskynX68D0gpA7Jtm/cBwciRwNq1FnGAzZtjIyI8D8jhw8CLLwKzZpkAwMKFQKtWwIkTVrCWLwdeeSUqgOGOO+B9kUVCDBgATJtmBmXRIuCDD4D9+2F67NJLgXLlgMaNIw4Kevf2PiAGMQ4eBL4TYOQyHlu/Hhg2DDh2DAqMa6/VgJQvD5x/PvDCCxEFBVOmQIEilpblx4tKHQe2At+2R9GOzMBjJ08CO9cCmzOBhx8GrrwSuPBC4KyzgAoVgOTkiIGCvWuAFf1QtFwACP3JzDTA4eHwlJWFnO5AnhZhijNuu0244WJg61ygYUPg8ss1h1xxhRBwhfDUyVMiEN+rCNykiRJVGP8cihJkqXY/BCNEjOGJJ/T79+6NK4DsdO8fNnuRP0eJLzRqpMXUOecArSsDv6wGbrgBOO88YMECID8DSJK/964rNlEwR+59110WfYHX6jkCgl69bPULHn8caNYMuO46YOzYmAKDkyeAAwcQNT8EY98RECoBF1ygxVSVKsIhVYFd3wBrRLxsSjEIiJTbhVGOuS4GkyYBXbo4K25ygRMgTZvaA9Kpk+lxZXB8/nnUgVGWaL9+MIl20cNRdwzRsiXQQcRTDeGOSy7R4CxfBhwvBL6633SiMb6a7YKQKfrnmmu0WCJ3detmT1wxpzHxb7ZcwhCK7XuEO2wfF5Gq9E6kAPj++wDxP/wQ/v+RKwfzSKHJGIq6p46cHBExFwG1RInPng1sX6CIhu/eFx+moRmU1Npm8/mBB6yiaeBAeyLSelvWxwIIEsWAOPNM631uv135Ubb34sHp3h1FdesW4dAhd87dtw+4+27YOcTIywOefBIYN04DsGWL/p23ARidCKROFYmxC6UeOlFHIPlz4LdNZgAWvQZkPGF+bFcWsHs3cPbZ9sSiWGne3P65r16xAkLOs3ttx46O4o/muvH3RXKYRMTY7oui9557VGATt95qNvunTtX6KT8fGPQIMPwzDcaoL5S+QkEBYh7Loq9iIVh6Y1HwzTTX7Pwa2CEiKvVe4MEHnQn2ySf2RH6qovX+M+rbv9bh/soSFPPc8rjvlBt7+UZ0Ya1awPTpQJ06IoK/Uqa9em7ECA3S1hnAP0V/pqcD6xYDq0UPRsCqi6iriw2jgaHlzFwxS6yxzamGOFOP5fRSFpkt0ehk3nuvlWi921r8EOSlGM6iXwQqf4iOqd29Bw1yPggTJmiCz5+v/SrqA7knRsue6tUTThIxlN0VFHOYKI7yAHEBVs+TSMZbwMjeYsj8iLiM9qJgJYrS6gYA2ZahHcrQ0z3zI+Dmm+0J16ePJq6YtEhMVLEzFKywdwz94OzO1gTdvh0qbxIiFl3DL3z+mWeALcIJ84TIr4m4FX1GfwYDRB9+LUbFAont8cDli8+15kcgKxkYJWCsXYUyEX6nZ48lnRQYSChvbyGN6wOccYaZcKKkkZICHD0K/Pg/uUcXYMTFzo6hScnLe6m71iWpWBvefhu47DLglluUEncEgwDMeEB/BtdLY0W4TK0v6w3hhE9EbAm3LO0pVtSnyuFF1nSUuXwICiXbN/nvzk7dcDGbEwL+At54QzlQWPEuMP6vxQLB8d5f3qI5ymdeO4LxUVsgrW5AnA4TR/fwr6LvxLnN+BewSjg5/TEx6fsBMxsY9yyTCSo6SJgo8nXUn51BmSrp2LZPK98AOyUcM73WHwLCcv+J12tRNFdETeXKZm4c0gH8fMt7BCB1EYyV/YHM5hLLE+AO7pDf3wLPPotohWWiJ7JouXDTDKXMEBE0oZq92BolHv9usVI2T48oEJbPyR2r/AKGetS6+v1H1nS980EhiL+skrU/JNwi3vfvv8vBaRvgZgkPlS1AfB64sYFHxF6f29RsgY2SWNheiRh/2y6qYBifN09O9pEj4jdJ6Geku15CgvhEh3ZpTnn5ZRgOqoRflKEhDmbZAcQmAhvgloEwNrwnG1jcsVTAMAg9R7zrw7+IA1fVmTtSagC5yVrUTZ6sjAJmT1WMyr8XScRh0ybEBSA0IWmfO3ruPrHgqEh7iQ2/Z6myWEoTDIPg2WIW71xo1R3DJayyVk7/lH8ElPxvG8HMqcEh7wh3ZUgk+/77Vboh5oBgxw6EesXBuXf06OFeJcL30E8QBR4LMAxCb5ykLSb//zRtZzWwrsmXBKNORM+eAQ6pVk35KrHnEAdx5M9vY9XHIp+HqzyELRh02Pg68RliCsjIiiotgKXi3GW+5Cy+JICp1kv/SPSiqidgSMUXDUDfvrF1DFXyKURhq4VJXgK7FgdYPVViQDMFHEkUmV43caIQoVdMwQg+/fjhs7BrweqB2ix/7LEAhzAmxpDNnj0xBoR5Bi7kLTlZDG1Qn1SsqGM+WW2scnm6hK/TWkkCqpUO7PEeCWfEBSAYIdHeYwcdTXLjdctkn0OHAu3b671LlDc+cuq5uVbOqF0b/uoPermuG2MsiLI7HrjDv6blfYH1I+Fo+jKGtXoI4rPIQSwMpzyGekG4zf++1TWUEhNAmN0MWrsyizM7Ai1uBoOczImoPfoSUHEFiJKjtJBq1rQ6fZLrCEuAYoAWE1AO7hSRWlMAEPFbvbr9oWPRd8wACSpEUwUIvlQkfpO05eFANgyFkjNmHoFA0X530Q0qL7J9PuISEBYCik50NddLqSjPvrb3pK6nwsaNuoTGryMkFG3KZ9OjXdIZKhu4fZ6y67FCHKcfBqugnPp/zlOS4qwQyGXEIyBMFbgkr2IPCHPGkjELLdmkKWu7oU0plvy55TXrhuv8SDwCMk78i7w89+gCy5TiTqkz300x9pGEpZlbZs1tpvglhWI6Mv/gtmnhIKTVi0tADP3mBsjTT8chIFWq2Cs8irbkq9wBKfhOLKxb4xoQdJOcR08xWnpJZvB9Sd3y4H0qGcIhQ1ShQ/wBInEqFc8JqUDHr5Jhm3SjOyBRSD5FnEPc1k+R7PYaXv78vl+P5iZHti4LO8UczMqSjN8oreRpKdnEoLB1poRJ6rsDwvz4N23iU4cwL1P4s/v6mbMJB0gxRaEq4igRIE6Bw4X/toIx7GxgwxgdpBMdwTCDPiXvqsfU34s7SVh7KOLWyvq6lSqMCBv3YuG4U6CSlf58Da3O2XJwx1wOQxSy64ydwxUqIJzFZm9lde5sFUs0hVmRwRwzCwCOFwb8EQbY+NyiVyXSa58/Z8EcfhofnxzCMtVwh4XEXjPUfm8zGwDZkmxr1w5/tKGoxJ56cGEam3MUCz7/vGTPJodJiZbX5ZjxCMi+dcLNiepkuwHiBJqSDgzDR6DlrlxEUrPnngv2QITd+PFD4mheEV+xLFp+PjGNq6/WZn1zST5l99SBxQRdian6X5yMEnIPa7k+/jhQScmSpho1oltsjSVL3JsvixOi+H5QfHEJiTljhr05z+5fEve9pvBbUcjpBtaTheZL/K0UqoC7ZUsNzCm0PZQ8HyJ5ZdvFM4s2/3mbloHyqpABrWvoEs04E1vYn2tEdB2dQpb/hNJh/09aiYv+UdUpQSVCpvaKqAMi+sJ20W3amJS2qkqUzCAGDVDlnMbrWGi24IX4SFDxoLDtO1wNgIuZaqEPuY1cJeKPrRexz6nTmprxme5Xt9sciwPihEtwYLOqKGH/hysgx47FZ4JKEXzlSnMuhJYWT8Tx49p59BWVuW7wyy9NfYgxAYPm++DBWu77ixdCSk3Vc127lmrD6KnVZbFl7KWXoFK6oc+x5jUcIOy3YC47+83Y1GVJGARbtxpmu7Eu1lpxIEJQm1y0SkZLtXLR399hC8bY/wKjJVQx7lrg6AFdUV6aYKTW1uWhdeo4r5GetUS2ozW7pfQBYUtBSDOm6rJdkQQrcU5IJLV0wvKYfo8Wq8n9wnKxWrMETU8LQNSmg+tgX5WQypKu9kRPq1uEI/tVlXlUwUh/XHMGq9lHV5Z0QW81LMcRjHbtYjJsILr9Ia+/rjfukGk06mlZ98SWhPUjEa6U6JQVOOe1BK1DpZXH9VEF4BYwbrwxZpMfogsIr6TzEDawpyKmlXTnFPXKsshUNqpcOYul81cJ0H+CXQucAuWqq8ziVXyl0w4QOkhISwO2pTtzB/sBQ1rXMO1uVUyHI79qTzhMVaFTK5vywNnO3KCBHhKQcpt9pHYoi+H6GaVNmDkzpnNRIt+Fy45Z5p+5OTZ0skRo8zTr6czuaurWNfef91VTR/0TfRRxl7+tCc3WZFaysAmT5qvEloxMXYHuiGXkVVVUmtqe+7tzak5/XdgR4yuyfeoc2UT5G0yI5s0lG1cgCaqEgPxmdtEJDCa8HnrIfA+OhM2YpgFZ+Z7mIE4lYp5exJwBCK02id4qrgjVC5xatKC5M7eyxCkOrshNcpg/30oETkFYM0IV0DFFqqKiYy5z1RGKE+ysnqZXWrls9qP2YqhjCzhZTv5wuqWIj1N7qlYFfv759BBZoa3HuO8+lei3VJ4w1ekmOpwmAo2w1n1h0k32gExu5mzOLh1jXtMW0XVH9ukJeP55KxxNe1qILH/rl4gM9nWbi9Gu1vKdU4PYXpz8FyuBl7jMzLLJ1qme8qE2J54F0w6euBokw5yGgKmG4eTPhWFMdOgQ8J02bDg9/BAVOFzcwQwGRdaJY2DDi+orkdCEem3uWJh6NZwGz3DEBcc72XHD+OvsH+/ewZlLEhN8VTQNRXz2NjKBylBo2DBmcazohU6yuwQInSTpXQ6xZJUjZ081aQK8K/5GpUq6RZlBRlpN2W9ZxmwUa6JcemMHsWUd86RmEfuj0ieOqpianseSbpQ3qcPkG8PBqv6yLbI4IY6ElhC9KgHiBlmhwoGYlM0c7MKYFjOHnEPCqC9NVI7F4zha/m0TzkDbJs5GQE53e0BYASN6TL2/fXsDCNN6gxNqQe0UyJuqwvFlW2TR3/ARUw3+4sypgpUajOrVoQZcEiy2hnFOI0Ub51fx2w5CnDFVxtm9uxGgxOAw1SB2uiWrrfaBDh92nxrnG0eItDqG9ad8pLKs1JWsDbH5jQQ/idKihfaW2exDsDh3hBxDLuEpdrt3VpYe7+T3NZiRTBMLbkpNNTRGjeQIHtO0J0cHEdk+dzT8JFB1aBjXUkZFZ0lDj9Mc+9xzZZhDQmV+SLWFIlBn2WxSkgaGHVdsFqXISk1FcbjPKK9ZtkyPoeVv4UIjrcznqJuCumrZol2s9bPIj13DnPVVpCsN/RPoyiaHUOT4uUNOv+PrOBSMs7DoNbMYgMqzhHl8FRYPLT9yMI+Vn1KSfbDgr359/R6/YqcpXyYdQyrsxMTwIoLfvMATznHkkycXa7MmUzR0Tm8IIEh6GZZi5+LuoVEj+A8VB6gZoGRk4LQIv7tuvgTfRRJseVnm8YYC0quH2QfaOKFkXOI3TBgkZeW/L0B62gNSbALxazGCCd66tbvIoi7x+RcKkPkl+6YGcrr6nBh9v1X8AxLajBlaF8bXsCY3eExgTg8YbQLiiZf4Mxn64Ux57wPi4N8w3MISHY4JtwNE8i8cLcsByix49g89VpGAUuov9w4gp8pZwXonhtFb7wPiB6RFICeiZvZ6H5AYX8G+C1vJvA9IjDlEvHaTdVbCr43wPiCRBsQ3mUFFBXr2RGlN8/E+IG6gbNxY5r4kzPvfFu19QLx/eR8Q7wPi/cv7gHgfEO9f3gfE+4B4/yrt6/9ncuUI5n0hzwAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Sunburst-Examples">exampleFileSystem2Icon	^ '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s58AAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Sunburst-Examples">exampleFileSystemIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAQVElEQVR4XuXdeVCUd54H4Ld2amtra6q2NnvUztROZjYmOzPJJpOZxCMm0cQkoAYkEkEOBQQEmkuwORpoaKG5j+ZqoLtpmqYbaG7kVBBFVE4VD7wRvO9bPKPx826/7TShOYSGt0V4P1WfP5H2fer3/b3vrxsgTPYfhsA5GIUulvAOyQY3JBOu1VuRqZDBJaEOoUHJqHSTozMlEq28tSiOTUdJiQgpQQmQ1QpxU9ZGTqQbOFKYugnImVpj4xL89Z1qcrx+P3crom1bycmWkBQLYNdVg9TUNDSH+SGJX4FgXjrspUqI8vIRwq+Bc7AIBUES9DoUITLcDaElKegQFuDGBDGo7knZMmNBjCwzJ4ShrdHH9Yi1a5sUDBGSnAF+BgccWSHWlWagzccciaEFCI8SwS9ZhkSZHMFRVXAJlUDFy0CfXx4q00QTXhlD6+cvnZEgCz4pJvUBobp83lbEObbrjUIs21OFSHEmlElRCN5dgE05RahmbUCofyKCXGPBTVQiMjcPnNjNcE+MQVfG5klhUL0ob5txq8TMRg59MbQ1VqNE6rlSiFRPM9geSsbnFTUoDvCD0/Zo2DQ2oYQTBFkcH1EO6fBMLUWIXIGW/AOTxtBWGl+hN8oKlgDJ8q0orG0nqVZt78bla3dAjpHHT3/Cvp5+qGrbB7/GKThb7+/7o2cavv6satIgVL/9ZAuiHSaOQhQovZCftAackDB4bpPAI00ChSwTLvtqUc5mQ+HPA59VjAp585QxtF3lmTruxYkWVWsu5pHei2NeeH3z8PFTDZKyag9s/bLGfQ1LliqmhKHtsvkNiF83sfFF2MmTwJOaQxVjhk0B3jDvrkGUMANZYn+YdzSgwpOP1hgJbRhUa5Jrx7wYkuJm3Ln3kDaEV6Wl6zi8+IpRX4uldwaFQQsI1aXUSrFtxfibenYS2FVS+KTwUaoyhiBnLexVMnAkaZAlhCKuvo5WDG3tfDMHL4RTsBTtB3pfC8JoGXj4RDMSh4J8Pq+UNgxtTeaNf0tMhMYmIywqEX5tXlijiIS4gANFihlcaqPh0LzZIBhUO9IbYRcoxsHj56YNYnh+/vkFEnLqsMxaRDuGtnZLml6JQjiHqOCbl4WE0Fz4xGTAYtda+Ej8oEpdhf6MBoOBPDl17Y2BGJ4L5x7iR6MdBkPxW7VrTBQid5sK2dI4uNVtgS/PE4nq21xWeTDq5WUGwbhb1wMq5AxIx57rapQq2mE+ebcaUfaj33kRlnY54KYVQ6j0AT9LDE6+ErJ0qUEwnvTdmBEQQ3PzxhM4rt5DO8qyl5v8SJB0bi42equw1kuB4kYZkqqrcVq8g24QPD13e8ZhDG76A8+w3qaVdhTOKHddhI8gABvX5SLYvQK+HhnYklpNK8bd+iN4duPBjMUYGrm4l3aUoaOL75EDgl+nPq/KTAM3Ih4iQQGtGPfqj5AvHv80KzC0aai9RCsKdRCZ6LoTETw2/FLeIQlWjDu8lOuQWRuHrlL6njk0GE+fzyoMbZobr9CK4uRnpMHQgDSl7EUspwzllWmgc0zNtpUxPFtrLtKG8t3nhb+AOPhlQLahCafT2mgBuV3erd4zBmY1hjYJ/B7aUNwCV74cWWsKTZAho291PL/5gBEY2libttCCsuhv5S9BXGrqsDdrKy0gT3qvMwrj5XELYPpVEy0obpwVIArjS0HXEzjJ0HS23qAFxHhxHoir8p20gOAFGAtCJVNwghYUgpZRdfIaozGoUOdzxgsbMe0gt/K7GI+hTaG8f/pBfrp4h/kgQ2JnvgvTBnJLtZf5GMNSVnh2+kCenrnJfJBRMpU3tyYNcqfqEPMxxsjObVdeP8ijAxeYf+VfkdcO8vP9J8xfIa9IiO9+vDYQ6jSX+ZfcME/vBPPH1Zs1tiYF8vT8beavkAnEZoX+J8GTAmF+JhZR6knDr5CBll7mr44J5vzZB4ZfIczfPwy7jzAfZKaDPD56mfkjS48s+rgeBgV5fush80H0iK9rp2FBmP7OoL4RJh43LAjzY9hbX+aDvGkg0gAXUp8yP/rlengBeeQflk+4zAdhPgjzQWgFGbjN/Ldt9ckF+0QYFORk1x7mg+iRE79ba1iQ7m01zL/KekQfDOaDzAaQ1spC5o+sCeb59bswOEhe2Abmg0wwN5MrDQ9C9fbVS8xHmUDOW0S9HhDm7yOG2T8mDdJWVcT8FTLe/nHzPl4bCNWZ8vtKpivXeMrXC9LdVMt8kFeNq18tf70gjfIM5oOMkcfdpyeFMSUQqlf6TzEfZZT0LwmcHpByQTjzQYblXvmeSWNMGYTqzUvnmY8yJOd+CJ9ekFpRIvNB/p4HOw9PCYMWEM1e0neS+RrqnFkSSE4ZRMJxxVRBVFGBjF8lt3Maprw6NCBrlOGgY5W0FOcyFuXx/l4c+zfLKYN0/84CxJI4FSRsXzB/dE3vqKIaJ/MA4bwmAeFREbSAyLlejFsllzdk0TKqqK6+4EkSblF1iLA9rAZxpQWlNiuBMSgPdhykDaPJKBAufRwQESGHEVXXjSShhBYQqg2y9FmP8mjvKdowqJ74YJemBEvZjUX8/TD1zEJOEIs2lGZVzqxFedp7mV6MP4owCGLiKQLbdDEirNdCyhHQBkJ1R2H2rEN5evIirRg9b61ApdECnPi0RYNChJiZIXOjFJERxbCsqEPuRltaUbbmpM0alEedJ2jFoFq++LfI+/6fSKrblzqBSAgvgXtuNVyFiWSK4xfYF5lEKwjVOnESnj+b2b82dmDrPgqDVpD2/1g4iKEtsV5VhGQ/CzQ4LMWlpAqyRCiEI28p7Sgl8Vyon1NmHAr1zugl11TaV0bzZzbw6QtFVOYSHRQi3+Q36OFGoltSj9WBSzA/dCkc8ptRzfcg6Ub5+wckZgzKw109oOuhb3j5RV4k60yQpsGt7hCy/6SBIR4qjkCVlooFnA+xMlOITcoqsq9cgLAKLsQh7jAESm1WPN7kN7fw4gWuhSnQQ/OI0rYr0gb8CwHQgmgbLfoWhGXg1/goYCEss4tQV5qHptJgGJf6YW5uAPjRbgYBoSpOCoT80nace/xm/U2RpluHUJyWZBAIqqcXf0c+fLCAvHDPBLlXPEegEObCaNgrWtBdJCC3lQaR/1rOhomMi43xLLR7vw8pK8QgKME7k+F5QkJSrbzeQf0s6bTC9D+6iqj+0sHXdOQfTWhHOfEHcwxcXwIKRNuq6ywdFCI6vwoPyyOwsYaPOSUcrBD6gxftgFbvjxA0LwVC1g/IDlhBK0qGwH/wPz60kosNuPzk9f1iG2rDbrl9FP6n5CNeT7I4inaQSpE5jpy30AGheuzO9xSKBoa4WBmBb0rZeFvpA4t4X5T4LUSd03dgzUlDosP/oTDmj2jb7A4F24U2lMCjOaOCaOt1QoLaG3tx95lhfiZ+771epJyreeVroFpr7UMbSkWZDZRtq0iq23rMRqBQjb+gPu3951If0jSHC99ELzQGfgGFtQfc30uDiP0eGhQ/YE8hC+WrLUiRohOS6Ogpo6QoIsa9EMMbc6YM9Tf3kz0D5/T+g2IDzx9j262DKL3WCgpan+/L35FBC8jelZvUGBaDIFS3HFqBBwNfjYAhbIVB8OXbke1efwJ/YTD85vuQYv9fo6nAHDtz1mkwxGXHEO++Ab5WixAfMbWVoi/GeA3sVSCyv0RTXp8KPieloPPfl3ttnBrGZ2HoXC4gOy1TUFbhpINC9dIN3T2FKA1bht3eC8CbFwrut96QBr2FbflmaM52RLmNNbKqzyJy3Xr4Wi8Gq4yF7W3Lkcyd3J4StVUAukFeRw//dvWkVkqiVeVLDG1NBSgrchyBcvaq0SAKsXnNN/D5MBMpTmYoiHoPrdXr0ZLpiUonZ6RXX0D4WgcNhlOJG7bs/h48yX/BISYI8eEZeqHkRPrOSAyquWFcvUCo55e5ftfwLyEkmeK7SxdF3TKVIzkcZV+ftQaFYM1JJ1NdFkPJ/wN2FFlie7QHyr02Qlx6BHE+wZoxZVfkippdy5GofB8O0V/Clr2HDLDOwAbT7AmjcJqTZiwI1cb5E/vhzbr/sYC5Z6cGQ1vJmmErZU0yRkPp7DUHkeTwgRrj92R7HQt1bDsUeHHIrOoziPNkazCsCtajYucyxOW9q8ZYSNoHd8LPPhXLP6gnFV8cR3WsENLAV+8rqQL2jMagGps7/m1wzRxL2PNCYREhxFuh0EWxKtVB6VgpQJXKY8T4IrYXrlGPKRfUeFuRFIaw6ixiXD00GBb5zijZYYw01fsajPWxx8CyTYfJh/VI/fIYtlk0kuI2HiIOH0S6yxhP9RxXBHVlzngQzSoxdsMYI4qMtEyGZQiH1PbbEAk5FESDYlkyYnzV5vnqoBAvXjxHh4ivwUir7MMmm7UkhbFK6QxVkxGyy/4Cp9iFWMU7rcYQko5G1XD6324NhrzJGdxzh+FvHwPHH1Mg2TDyI0VRqk2zAoOq9zHxiCP4krddYWWWQ/6F1UCuCk3VQTHeVARdFECNQg5Hqc9ia1Cu3D0MQvO5otu3Udly7iWGegNfle9MFjYZkcrqT+CeNBfWkS8xXIwyYf/ufrL1h0NQ5XLB7W0BP7EQG7/hgmUvJSPCpAiWBaLQzUSDIRIEwPtE9qwBoSpOiRwEOc9fgR8jy0FhUP3UswEmAbE6KAujj+ig/HvIi1FRzt/q1DxfEYOfvLt8ETzPVVoMlNZ/DOfYX5H2sd0I8CmC69IULPp9J8rnHsdmYQriD+aBs+8QAj/1gK1dDilyk8K8Q4XN9u/hdNDXOFLpj8iyyFmFoW3v11a4c9sWd1+sJFv7PAdBqH7mVawDQnUO76oOyjuhT1FnnTc4vs7Ldw8+7BJDn2qv3L+Gst1rUNU4X4NhE1kF18BmsFfFqDG6SOX8Y6jlKJDWGo7AEyfB/dwHzlZCJLjLwFYWgKOeh4fs5uBmtQN6bwUjrOkefA/UzJ6RpX7oTLzTiIon+RoMbZNrosihKIt8i0ag/CdPd5P/a+gAdq2W4GJBu87JAzHiTfyn17FJ9jdYRRRSt7fwMeOSxn/uQv5c9SZu1YjcZk8EXepHoFM8AiwS4O4gRVqQHEv2K9D+FUFeFTviwQUryPZ3IKjxPkmVu+0+gg+0zFiYkP5CJKgh0h7vJrU997O7DopNfIHOSjEPEeigrI4Q4L/Dn+ugZHeMPAYixjoDSpAe1WCYfrQdYQt6sMf0ABRNbghV7xvsxAL4LeVpRlWGswgrO1UoXP8BzvBNcbfbCR0XJIMYur0H/67WGQMTeKYAsXe26kBoq3zSoAPScspDB4SqXUSEDsp3IeJBkJa+0c/kiFcdzMWyO+CgvqNq/fQkSWFEH1KCXb8LIV+y4egsR6yTBOz8ArgVcXDA+m1ck63Hk+fmZMLuS2OA/NKwtpPwObj5TcQB70oF0h/tHhViaI8+C9VBEdRE6aAsYm8ZMbpMoyvRfnbsA1JivNPSG+pxo5KEIr0rAf79fQj7xh8s63Rw1mUjLViOr7qVZNtXBK6K12tGVUlP87gYw+upaoBTTfr04RwXY115HDIejo8wvENBqFrGlOigfM3+ZT8Jk4jw4NGjV55W/z+4y7BrAdq4hgAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Sunburst-Examples">exampleMorphSubclassesIcon	^ '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'</body><body package="Roassal2-Builder-Sunburst-Examples">exampleOnNumbersIcon	^ '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TkSuQmCC'</body><body package="Roassal2-Builder-Sunburst-Examples">exampleRTObjectSubclassesIcon	^ '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'</body></methods><methods><class-id>Roassal2.RTCircleLayoutTest</class-id> <category>as yet unclassified</category><body package="Roassal2-Layouts-Tests">testEmptyLayout	RTCircleLayout on: #()</body></methods><methods><class-id>Roassal2.TREllipseShapeTest</class-id> <category>tests</category><body package="Roassal2-Trachel-Tests">testStrokeWidth	self assert: TREllipseShape new strokeWidth equals: TREllipseShape new defaultStrokeWidth.</body><body package="Roassal2-Trachel-Tests">testStrokeWidth02	self assert: TREllipseShape new defaultStrokeWidth equals: 1.</body><body package="Roassal2-Trachel-Tests">testWidth	| s |	s := TREllipseShape new size: 30.	self assert: s strokeWidth equals: 1.</body></methods><methods><class-id>Roassal2.RTComposerTest</class-id> <category>tests</category><body package="Roassal2-Builder-Composer-Tests">testAbove	| e1 e2 |	e1 := RTBox element.	view add: e1.	composer group: #first.	self assert: e1 position equals: (0 @ 0).	e2 := RTBox element.	view add: e2.	composer group: #second. 	composer move: #second above: #first.	self assert: e1 position equals: (0 @ 0).		self assert: e1 position x equals: e2 position x.	self assert: e2 position y equals: -25.0.</body><body package="Roassal2-Builder-Composer-Tests">testBackground	| compo b group1 group2 |	compo := RTComposer new.	b := RTMondrian new.	b view: compo view.	group1 := b nodes: (1 to: 3).	b build.	compo group: #g1.	b := RTMondrian new.	b view: compo view.	group2 := b nodes: (1 to: 4).	b build.	compo group: #g2.	compo layout: RTVerticalLineLayout new alignCenter.	self assert: group1 center equals: 25 @ 3.	self assert: group2 center equals: 25 @ 18.	compo setBackgroundColor: Color red forGroup: #g1.	self assert: group1 center equals: 25 @ 3.	self assert: group2 center equals: 25 @ 18</body><body package="Roassal2-Builder-Composer-Tests">testBelow	| e1 e2 |	e1 := RTBox element.	view add: e1.	composer group: #first.	self assert: e1 position equals: (0 @ 0).	e2 := RTBox element.	view add: e2.	composer group: #second. 	composer move: #second below: #first.	self assert: e1 position equals: (0 @ 0).		self assert: e1 position x equals: e2 position x.	self assert: e2 position y equals: 25.0.</body><body package="Roassal2-Builder-Composer-Tests">testGap	composer gap: 30.	self assert: composer gap equals: 30</body><body package="Roassal2-Builder-Composer-Tests">testGroup	| e |	self assert: composer newElementsAsGroup isEmpty.	self assert: composer allGroupedElements isEmpty.	self assert: composer currentElementsAsGroup isEmpty.	e := RTEllipse element.	composer view add: e.		self assert: composer allGroupedElements isEmpty.	self assert: composer currentElementsAsGroup asArray equals: (Array with: e).	"self assert: composer newElementsAsGroup asArray equals: (Array with: e)."	composer group: #first.			self assert: composer newElementsAsGroup isEmpty.	self assert: composer allGroupedElements asArray equals: (Array with: e).</body><body package="Roassal2-Builder-Composer-Tests">testGroup02	| e |	self assert: composer newElementsAsGroup isEmpty.	self assert: composer allGroupedElements isEmpty.	self assert: composer currentElementsAsGroup isEmpty.	e := RTEllipse element.	composer view add: e.		self assert: composer allGroupedElements isEmpty.	self assert: composer currentElementsAsGroup asArray equals: (Array with: e).	"self assert: composer newElementsAsGroup asArray equals: (Array with: e)."	composer group.			self assert: composer newElementsAsGroup isEmpty.	self assert: composer allGroupedElements asArray equals: (Array with: e).</body><body package="Roassal2-Builder-Composer-Tests">testOnTheLeftOf	| e1 e2 |	e1 := RTBox element.	view add: e1.	composer group: #first.	self assert: e1 position equals: (0 @ 0).	e2 := RTBox element.	view add: e2.	composer group: #second. 	composer move: #second onTheLeftOf: #first.	self assert: e1 position equals: (0 @ 0).		self assert: e1 position y equals: e2 position y.	self assert: e2 position x equals: -25.5.</body><body package="Roassal2-Builder-Composer-Tests">testOnTheRightBelow	| e1 e2 |	e1 := RTBox element.	view add: e1.	composer group: #first.	self assert: e1 position equals: (0 @ 0).	e2 := RTBox element.	view add: e2.	composer group: #second. 	composer move: #second onTheRightBelowOf: #first.	self assert: e1 position equals: (0 @ 0).		self assert: e2 position equals: (5.5 @ 25.5)</body><body package="Roassal2-Builder-Composer-Tests">testOnTheRightOf	| e1 e2 |	e1 := RTBox element.	view add: e1.	composer group: #first.	self assert: e1 position equals: (0 @ 0).	e2 := RTBox element.	view add: e2.	composer group: #second. 	composer move: #second onTheRightOf: #first.	self assert: e1 position equals: (0 @ 0).		self assert: e1 position y equals: e2 position y.	self assert: e2 position x equals: 25.</body><body package="Roassal2-Builder-Composer-Tests">testPropagate	| classesToAnalyze c b2 ds es |	classesToAnalyze := TRShape withAllSubclasses.	c := RTComposer new.	c gap: 35.	"-------"	b2 := RTGrapher new.	b2 view: c view.	b2 extent: 200 @ 150.	ds := RTData new.	ds interaction popup.	ds points: #(1 2 3).	b2 add: ds.	b2 build.	c group: #stat.	"-------"	b2 := RTGrapher new.	b2 view: c view.	b2 extent: 200 @ 150.	ds := RTData new.	ds interaction popup.	ds points: #(1 2 3).	b2 add: ds.	b2 build.	c group: #pie.	"-------"	c layout: RTGridLayout new.	c propagateHighlightToAll.	es := c view elementsFromModel: 1.	self assert: es size equals: 2.	self assert: (es collect: [ :e | e position y ]) asSet size equals: 1</body><body package="Roassal2-Builder-Composer-Tests">testPropagateHighlight	| e1 e2 e3 |	e1 := (RTBox new color: Color gray) elementOn: 1.	composer view add: e1.	composer group: #first.		e2 := (RTEllipse new color: Color gray) elementOn: 1.	composer view add: e2.	composer group: #second.		e3 := (RTBox new color: Color gray) elementOn: 1.	composer view add: e3.	composer group: #third.		composer propagateHighlightToAll.	composer move: #second onTheRightOf: #first.	composer move: #third onTheRightOf: #second.		e1 announce: TRMouseEnter.	self assert: e1 trachelShape color ~~ Color gray.	self assert: e2 trachelShape color ~~ Color gray.	self assert: e3 trachelShape color ~~ Color gray.	e1 announce: TRMouseLeave.		self assert: e1 trachelShape color == Color gray.	self assert: e2 trachelShape color == Color gray.	self assert: e3 trachelShape color == Color gray.	e3 announce: TRMouseEnter.	self assert: e1 trachelShape color ~~ Color gray.	self assert: e2 trachelShape color ~~ Color gray.	self assert: e3 trachelShape color ~~ Color gray.	e3 announce: TRMouseLeave.	e2 announce: TRMouseEnter.	self assert: e1 trachelShape color ~~ Color gray.	self assert: e2 trachelShape color ~~ Color gray.	self assert: e3 trachelShape color ~~ Color gray.	e2 announce: TRMouseLeave.</body><body package="Roassal2-Builder-Composer-Tests">testPropagateHighlightToAll	| e1 e2 e3 |	e1 := (RTBox new color: Color gray) elementOn: 1.	composer view add: e1. 	composer group: #first.		e2 := (RTEllipse new color: Color gray) elementOn: 1.	composer view add: e2.	composer group: #second.		e3 := (RTBox new color: Color gray) elementOn: 1.	composer view add: e3.	composer group: #third.			composer move: #second onTheRightOf: #first.	composer move: #third onTheRightOf: #second.		composer propagateHighlightToAll.		e1 announce: TRMouseEnter.	self assert: e1 trachelShape color ~~ Color gray.	self assert: e2 trachelShape color ~~ Color gray.	self assert: e3 trachelShape color ~~ Color gray.	e1 announce: TRMouseLeave.		self assert: e1 trachelShape color == Color gray.	self assert: e2 trachelShape color == Color gray.	self assert: e3 trachelShape color == Color gray.	e3 announce: TRMouseEnter.	self assert: e1 trachelShape color ~~ Color gray.	self assert: e2 trachelShape color ~~ Color gray.	self assert: e3 trachelShape color ~~ Color gray.	e3 announce: TRMouseLeave.	e2 announce: TRMouseEnter.	self assert: e1 trachelShape color ~~ Color gray.	self assert: e2 trachelShape color ~~ Color gray.	self assert: e3 trachelShape color ~~ Color gray.	e2 announce: TRMouseLeave.</body><body package="Roassal2-Builder-Composer-Tests">testView	self assert: composer view equals: view.	view := RTView new.	composer view: view. 	self assert: composer view equals: view.</body><body package="Roassal2-Builder-Composer-Tests">testopeningEmpty	composer open delete.	self assert: composer gap &gt; 0</body><body package="Roassal2-Builder-Composer-Tests">testpropagateHighlightUsing	| e1 e2 e3 |	e1 := (RTBox new color: Color gray) elementOn: 1.	composer view add: e1. 	composer group: #first.		e2 := (RTEllipse new color: Color gray) elementOn: 1.	composer view add: e2.	composer group: #second.		e3 := (RTBox new color: Color gray) elementOn: 1.	composer view add: e3.	composer group: #third.		composer move: #second onTheRightOf: #first.	composer move: #third onTheRightOf: #second.		composer propagateHighlightUsing: [ :element | Array with: e2 ].		e1 announce: TRMouseEnter.	self assert: e1 trachelShape color equals: Color gray.	self assert: e2 trachelShape color ~~ Color gray.	self assert: e3 trachelShape color equals: Color gray.	e1 announce: TRMouseLeave.		self assert: e1 trachelShape color equals: Color gray.	self assert: e2 trachelShape color equals: Color gray.	self assert: e3 trachelShape color equals: Color gray.	e3 announce: TRMouseEnter.	self assert: e1 trachelShape color equals: Color gray.	self assert: e2 trachelShape color ~~ Color gray.	self assert: e3 trachelShape color equals: Color gray.	e3 announce: TRMouseLeave.	self assert: e1 trachelShape color equals: Color gray.	self assert: e2 trachelShape color equals: Color gray.	self assert: e3 trachelShape color equals: Color gray.	e2 announce: TRMouseEnter.	self assert: e1 trachelShape color equals: Color gray.	self assert: e2 trachelShape color ~~ Color gray.	self assert: e3 trachelShape color equals: Color gray.	e2 announce: TRMouseLeave.		self assert: e1 trachelShape color equals: Color gray.	self assert: e2 trachelShape color equals: Color gray.	self assert: e3 trachelShape color equals: Color gray.</body></methods><methods><class-id>Roassal2.RTComposerTest</class-id> <category>running</category><body package="Roassal2-Builder-Composer-Tests">setUp	super setUp.	composer := RTComposer new.	view := composer view</body></methods><methods><class-id>Roassal2.RTUnoptimizedComposerTest</class-id> <category>running</category><body package="Roassal2-Builder-Composer-Tests">setUp	super setUp.	composer := RTComposer new.	view := composer view</body></methods><methods><class-id>RTExampleBrowser</class-id> <category>actions</category><body package="Roassal2-Examples-Extentions">focusOnCenter	theView canvas focusOnCenterScaled.	theView signalUpdate.</body><body package="Roassal2-Examples-Extentions">more	| point |	point := (self builder componentAt: #more) component absOrigin + self builder window globalOrigin+ (0@18).	Roassal2Inspector moreOptionsWith: theView atPoint: point</body><body package="Roassal2-Examples-Extentions">openSource	(Refactory.Browser.RefactoringBrowser open navigator) 		selectClass: method mclass;		setSelector: method selector;		changed</body><body package="Roassal2-Examples-Extentions">zoomIn	RTZoomInMove on: theView</body><body package="Roassal2-Examples-Extentions">zoomOut	RTZoomOutMove on: theView</body></methods><methods><class-id>RTExampleBrowser</class-id> <category>accessing</category><body package="Roassal2-Examples-Extentions"> errorViewFor: aBlock	| e v f |	v := RTView new.	f := TRPlatform current formFromStream: RTExamplesBrowser errorImage readStream.	v add: (RTBitmap new form: f) element.	e := RTLabel new elementOn: 'Error on this example, click here to see the error'.	v add: e.	RTVerticalLineLayout on: v elements.	v elements when: TRMouseClick do: [ aBlock value ].	^ v</body><body package="Roassal2-Examples-Extentions">example: aMethod	method := aMethod</body><body package="Roassal2-Examples-Extentions">exampleView	^ exampleView ifNil: [ | create |		create := [ theView := method mclass new perform: method selector].		[ create value. ] on: Error do: [:ex | theView := self errorViewFor: create. ].				(theView isKindOf: Roassal2.RTBuilder) ifTrue: [theView build.].		theView := theView view.		exampleView := theView canvas buildMorph.			exampleView		].</body></methods><methods><class-id>RTExampleBrowser</class-id> <category>interface opening</category><body package="Roassal2-Examples-Extentions">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	TRApplicationModel postOpenWith: aBuilder and: self selector: #exampleView.</body><body package="Roassal2-Examples-Extentions">postOpenWith: aBuilder 	self focusOnCenter</body></methods><methods><class-id>Roassal2.RTForceBasedLayoutTest</class-id> <category>tests</category><body package="Roassal2-Tests">classToTest	^ RTForceBasedLayout</body><body package="Roassal2-Tests">testBasic	| l |	l := RTForceBasedLayout new.	self assert: l shouldUseProgressBar.		l doNotUseProgressBar.	self deny: l shouldUseProgressBar.</body><body package="Roassal2-Tests">testSimpleRun	| b |	b := RTMondrian new.	b nodes: (1 to: 20).	b edges connectFrom: [ :v | v // 3 ].	b build.	self classToTest new 		doNotUseProgressBar;		on: b view elements.</body></methods><methods><class-id>Roassal2.RTDataTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testBasic	| charter |	charter := RTGrapher new.	charter add: (RTData new points: #(#(1 2) #(3 4) #(2 5)); x: #first; y: #second).	charter build.</body><body package="Roassal2-Builder-Grapher-Tests">testBasic02	| b ds |	b := RTGrapher new.	ds := RTData new. 	ds barShape.	ds points: #(5 1 20 8 5 1 20 8 5 1 20 8).	ds y: [ :v | v ].	b add: ds.	b build</body><body package="Roassal2-Builder-Grapher-Tests">testComputeMinAndMax	| b ds |	b := RTGrapher new.	ds := RTData new.	ds points: #(1 2 3).	ds x: #yourself.	ds y: #yourself.	b add: ds.	b maxY: 5.	b build.		self assert: b centralPoint equals: 0 @ 0.	self assert: ds minX equals: 0.	self assert: ds maxX equals: 3.		self assert: b maxY equals: 5.	self assert: ds minY equals: 0.	self assert: ds maxY equals: 5.</body><body package="Roassal2-Builder-Grapher-Tests">testConnectColor	| b ds |	b := RTGrapher new.	ds := RTData new.	ds connectColor: Color blue.	ds points: #(1 2 3).	ds x: #yourself.	ds y: #yourself.	b add: ds.	b build.		self assert: b view numberOfEdges equals: 4.	self assert: b view edges last trachelShape color equals: Color blue.</body><body package="Roassal2-Builder-Grapher-Tests">testDefault	self assert: RTData new points isEmpty.	self deny: RTData new shouldConnect</body><body package="Roassal2-Builder-Grapher-Tests">testDotColor	| b ds e |	b := RTGrapher new.	ds := RTData new.	ds interaction popup.	ds dotShape color: Color blue.	ds points: #(1 2 3 4).	ds x: #yourself; y: #yourself.	b add: ds.	b build.		e := b view elementFromModel: 1.	self assert: e trachelShape color equals: Color blue.</body><body package="Roassal2-Builder-Grapher-Tests">testGetDictionaryValues	| ds |	ds := RTData new.	ds		points:			(Array with: (Dictionary with: #a -&gt; 12 with: #b -&gt; 7) with: 			(Dictionary with: #a -&gt; 2 with: #b -&gt; 3)).	ds x: #a.	ds y: #b.	self assert: ds getValuesX asArray equals: #(12 2).	self assert: ds getValuesY asArray equals: #(7 3)</body><body package="Roassal2-Builder-Grapher-Tests">testGetValues01	| ds |	ds := RTData new.	ds points: #(3 4 5).	self assert: ds getValuesX asArray equals: #(1 2 3).	self assert: ds getValuesY asArray equals: #(3 4 5).</body><body package="Roassal2-Builder-Grapher-Tests">testGetValues02	| ds |	ds := RTData new.	ds points: #(3 4 5).	ds x: [ :v | v + 2 ].	ds y: [ :v | v + 3 ].	self assert: ds getValuesX asArray equals: #(5 6 7).	self assert: ds getValuesY asArray equals: #(6 7 8).</body><body package="Roassal2-Builder-Grapher-Tests">testGetValues03	| ds |	ds := RTData new.	ds points: #(3 4 5).	ds stack.		self assert: ds getValuesX asArray equals: #(1 2 3).	self assert: ds getValuesY asArray equals: #(3 4 5).</body><body package="Roassal2-Builder-Grapher-Tests">testInteraction	| ds |	ds := RTData new.	self assert: ds interaction class equals: RTDataInteractionBuilder</body><body package="Roassal2-Builder-Grapher-Tests">testNoDot	| b ds |	b := RTGrapher new.	ds := RTData new.	ds noDot.	ds points: #(1 2 3).	ds x: #yourself.	ds y: #yourself.	b add: ds.	b build.		self assert: (b view elementFromModel: 2) trachelShape width equals: 0.	self assert: (b view elementFromModel: 2) trachelShape height equals: 0.		"Axes"	self assert: b view numberOfEdges equals: 2</body><body package="Roassal2-Builder-Grapher-Tests">testNonTrivialGraph	| grapher dataSet |	grapher := RTGrapher new.	grapher extent: 300 @ 200.	dataSet := RTData new 		points: RTObject withAllSubclasses; 		x: #numberOfLinesOfCode; 		y: #numberOfMethods.	dataSet dotShape color: (Color red alpha: 0.3).	grapher add: dataSet.	grapher axisX; axisY.	grapher build</body><body package="Roassal2-Builder-Grapher-Tests">testStackedData	| data b ds |	data := (-20 to: 20).	 	b := RTGrapher new.	b extent: 300 @ 200.	ds := RTData new.	ds interaction popup.	ds points: data.	ds barShape width: 8; 	      color: (Color green alpha: 0.3);	     if: [:value | value &lt; 0 ] fillColor: (Color red alpha: 0.3).	b add: ds.	b build.	^ b view</body><body package="Roassal2-Builder-Grapher-Tests">testlineShape	| ds |	ds := RTData new.	self assert: ds lineShape class equals: RTShapeBuilder</body></methods><methods><class-id>Roassal2.RTRotatedLabelTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| v shape |	v := RTView new.	shape := RTRotatedLabel new.	shape angleInDegree: [ :cls | cls numberOfMethods negated / 1.5 ].	shape text: [ :cls | '                                                                                ', cls name ].	shape color: (Color black alpha: 0.2).	v addAll: (shape elementsOn: Collection withAllSubclasses).	v canvas color: Color white.</body></methods><methods><class-id>Roassal2.RTSpectrographTest</class-id> <category>method timestamp</category><body package="Roassal2-Builder-Spectrograph-Tests">foo	"timeStamp : 'AlexandreBergel 5/11/2014 00:29'"	^ 'hello world'</body><body package="Roassal2-Builder-Spectrograph-Tests">testGotMethodOnDay	self assert: (RTShape gotMethodOnDay: 0)</body></methods><methods><class-id>Roassal2.RTSpectrographTest</class-id> <category>tests</category><body package="Roassal2-Builder-Spectrograph-Tests">testBasic	b objects: #(1 2 3).	b lineBlock: [ :v | (1 to: v) ].	b highlight: [ :v1 :v2 | v2 odd ].	b build.		self assert: b view numberOfElements equals: 1 + 2 + 3</body><body package="Roassal2-Builder-Spectrograph-Tests">testBasicWithNoHighlight	b objects: #(1 2 3).	b lineBlock: [ :v | (1 to: v) ].	b build.		self assert: b view numberOfElements equals: 1 + 2 + 3</body><body package="Roassal2-Builder-Spectrograph-Tests">testHighlight	b objects: (Array with: 10).	b lineBlock: [ :v | 1 to: v ].	b highlight: [ :root :v | v = 2 ].	b build.	self assert: (b view elementFromModel: #(10 1)) trachelShape color ~= Color red.	self assert: (b view elementFromModel: #(10 2)) trachelShape color = Color red.</body></methods><methods><class-id>Roassal2.RTSpectrographTest</class-id> <category>running</category><body package="Roassal2-Builder-Spectrograph-Tests">setUp	super setUp.	b := RTSpectrograph new.</body></methods><methods><class-id>Roassal2.RTCubeHelixTest</class-id> <category>tests</category><body package="Roassal2-ColorNormalizer-Tests">testBasic	| helix |	helix := RTCubeHelix new.	helix rotations: 2.	helix gamma: 2.	helix level: 0.	helix level: 0.5.	helix level: 1.</body><body package="Roassal2-ColorNormalizer-Tests">testBasic02	| helix |	helix := RTCubeHelix new.	helix level: 0.	helix level: 0.5.	helix level: 1.</body><body package="Roassal2-ColorNormalizer-Tests">testBasic03	| helix |	helix := RTCubeHelix new.	helix saturation: 0.5.		helix level: 0.	helix level: 0.5.	helix level: 1.	self assert: helix saturation equals: 0.5</body><body package="Roassal2-ColorNormalizer-Tests">testDefault	| helix |	helix := RTCubeHelix new.	self assert: helix rotations equals: -1.5.	self assert: helix saturation equals: 1.2.	self assert: helix gamma equals: 1.0</body></methods><methods><class-id>Roassal2.RTUMLExample</class-id> <category>icons</category><body package="Roassal2-Builder-UML-Examples">exampleArrowedIcon	^ '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'</body><body package="Roassal2-Builder-UML-Examples">exampleBlackColorIcon	^ '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l78AbpUHhczSvmoAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-UML-Examples">exampleColoredProtocolsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEn0lEQVR4XuXd3U/bVhgGcP+b0W4mVUJccDGpH7dMahHtKipQgUlctaga6kUvqCY2aVrajnWwSDBWBAkhpfkgteN82I6Jk9jx+84+XVC1LVRNnOUkzyMdJTaBOP7pnNfxSYzCPNrs7+9TeNtolFiG1Go1GuXzKywJSKtl4IOEIETP6eqmiw3c2QmWnl/dXr0i6hdElowc5PXrb+jRo68+CfL48S7NzcV7Yqyvq/ggUYBsbc2KHZ9KfUv37n0p7j99eosSiQU6PFy+BFle3qJr1x7QzZsbdOPGd7SwkKD793doZmaNrl9/Qnfv/jIQiO2W2fFM9snj7rLnt9loF7julthyVbG+4Rnc9huTCzI7G6N4fI7W1mYExu3bX9Dx8Spp2jrp+pNLkGfP0hSLzQqEWOxrAbG6mhQQDx++oTt3fu4bpNzMiPvhbd3VL29DCNsrC4C27wgcgBqi09WtLTbQMIIl/eoWvJa+e4hPHSbyxbrgScXyx/l4mYjwj7KGfZSFX0MkAdE0jXK53MAtm81G8ndomN1vHECiihGMqZPwOhTbtmkSWggyCW1iesikRAnGTe637e7uEv4uHDx/1z+xTwfqIWdnZ/ggEYFEUtTxQYYAsrKywtPT07yxsYEPIgPI3t4ex+NxTiaT+CD4QxZ+8EEkBsnn8/ggMoEsLi7ig+APWfjpCbK9vY0PIhPI1NQUPohMIEtLS4Ody8IHGUINUav25Q+02gV+DxkhyObmZtBDNJPfV2w+PCtxKl/hk0KFC7qFDzICkPn5+Q81pFZ3+Lxc57LZ4KrlsGk3OVcy8UHwD3vxQZSLpivuNNsePogMR1mZ8yqHdSSrGp+Ngg8SLUir1WIlrBlhGkFP6fg+Pgh+DcFPF8QsWvggMoEcf5/EB5EJhHzCB8GvIfjpCVJX6/ggMoFoRxo+iEwgtm7jg+DXEPz0fqdut/BBpKshvyeL/PIgy0Zwyj08/Z4uVDlTrHGxUuc/TlU+yup8EsyTiHeSwWOSubJ4PD7IkGpIMZgH2U+rYmdnilUB0z3huHNUYOuixWbQ/nyriQmscCIrfDw+yJBqiNfxOfxWne9/WOd6nX/9wj/Xdb+Fhw+CX9QnGiTzIoMPIhPI+zcqPgj+kIUffJBxAcGfoJIMBH+CSjIQ/Akq/BqCH3yQcSrqBRMfRCYQ7biED4I/ZOEHH2RcQMqnFXwQmUAqb6v4IPhDFn7wQcYFpJYz8EFkAkn9eIIPgj9k4acnSHgNZ3wQiUDwP9srGQj+p9/xawh+8EHGCCT7WxYfBL+G4Ad/yMIHwQ8+yCSApH5IsTLI/6DFB4kWpJatseI4ZXwQ/CELP/8FYuTx50OkAnn36zt8EJlAzHP8Ty7i1xD89AbBnw+RDAT/5KJkIOmf0vgg+DUEP/gg4wJi4X8LVy6QfKLAiuWq7HgG267Ont/GBxn1kKU1U9zuXLDZLgYwJj4Ifg3BD/6VHCQFwb+Sg2Qg+FdywK8h+PkkSC6Xo37bwcEBPkiEIJ55OlgPwU+0IK6WCN4YWhb1arZtS9PC7Wk2m1I113Xpf6shjuNINRzJtj1RblMXxG8Z/Bd88sFNlxjeZgAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-UML-Examples">exampleExternalEdgesIcon	^ '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AElFTkSuQmCC'</body><body package="Roassal2-Builder-UML-Examples">exampleNoInstVarIcon	^ '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La6t/QsKQ1/eU5eplQAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-UML-Examples">exampleSimpleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACQElEQVR4XuXYy2oiURRA0fz/bzj0B8SJBB2oKMQHKGriK4iSxAeIiqK3+xYEGiQRmo5Krw1CqOikFrcOdR5C8LunHvxb4IP4+SA+iJ8P4oP4+SA+iJ8P4oP4+SB+PogP4ueD+CB+PogP4ueD+CB+PoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggfj6ID+Lng/ggfj6ID+Lng/j5ID7IP69QKJzy+fzFjw9ypV5eXk7+CbkzkI+Pj7Prk8nEB7kVSLfbDc1mMzw9PYVyuRwajUaoVCohk8mEUqnkg9zihKzX6/D+/h46nU54fX0No9EoOSXb7dYHuTbIcrkMw+Hwy48PcsXm8/nZUN/v9yd/qN9Rm83GB/FBfBAf5F5aLBbf/v+7GXLptz7IX9Tv92/yWx/kwk39/Wj68jtvb28+yLVB4ht6fBGs1WrJG/rz83Pyd7yWzWaTd5BqtRra7XZYrVY+yDVAxuNxcuPT6XRotVphNpslpyOuTQaDQXh8fEyu+yfEnyEuyOFwOPtOfHz9uTY5Ho8+yE+CxIXidDoNqVQqWSDudrtQLBaTre/nwI+PrXgtl8slM+Z0OvkgP3lC4la3Xq8nMyOu3OM8iYvGz+K2t9frJYM9boPjSfJB/Bnir07+l3wQH8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8HufN+Ab7cfG3xZnGjAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-UML-Examples">exampleWithNonClassesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEFElEQVR4XuXZR0skaxTG8fl6LvwObty4UBDduFFRMSxEUcSMATMGRBAMqBgwx4VgzmGhjoqKC/vceg5478xgO109XO6d+T9QtF3dbwv1qzpvvae+mPHzf8oX/iHgg/DDB+GD8MMH4YPwwwfhg/DDB+GD8MMH4YcPwgfhhw/CB+GHD8IH4YcPwgfhhw/CDx+ED8IPH4QPwg8fhA/CDx+ED8IPH4QfPggfhB8+CB+EHz4IH4QfPggf5L/O3t5eJOx2dHQU0diHh4dIPOO13dzcRPggH+Tw8DD0mImJie9e40kkCB8kJMjd3V3cILe3t3yQeEGamppsdnbWtra27OzszKqrq/2z/v5+W1lZsenpabu6urKDg4MPQfLy8iwhIcGmpqZsbm7OgnJkHR0dtru7a4uLi/4b+j+jo6M2PDzMB/kZSFdXl3V3d9vl5aUVFhZaaWmp7e/vW29vr9XU1PiBbW5utszMzA9BSkpKLCsry0ZGRnSgbXNz08rLy62zs9P3NTY22sXFhWVkZNj4+DgfJNaS9fLyYjMzM3HPIQMDA/w5hD+p/4kgwRwR1Cizr18tqDOhQdrb232e0Lyxvr7OB/llkOBAWn29WVub2dJSaJCCggKbnJz0GwP+FcIvWXwQPsi/DLK8vOx/Pz8/W19fX2iQtbU1f9UtbazAfJBPQDQZ9/T0BNNIva8fwoIkJSX5/LGxsWGPj498kF8F0Qo9aBTa9fW1ZWdnhwbZ3t52DI2NtYzxQT4B0ao81k09qm9B9D7M+Pff4IN8AqLe08nJibc91Mva2dnxV23K8fGxt1GiXSH63vn5uZ2envp8kp6e7vvVnFTLRB0A/hUSAkT9K9X+nJwcbyxqcad9lZWVlpaW5t/Jzc2NCiKIuro673e9j83Pz/dSqKbk09MTH4R/2/sHgby9vX33Xme4ylYsIBqrdv23Udnig4QsWbW1tb6lpKTY2NiYpaamWllZmd8Ga32xuroaFUSlTS37xMTEoPvSZsnJyd7fGhwc9FtpIf2Iwgf5BERn9OvrqzcIh4aGHED79EBJk/XCwoLPCdFA7u/vfWxFRYW37zVW4/SwSnOS1jhLP/TI+CD8OeT3ukL0GFfzhM50lSw9QVQHV+sGXTGtra1RQVpaWvy7DQ0Nf5csPe5VS0Yla35+ng8Sz21vUVGRlxc9etU+vde8ogNfVVX109ve4uJifw6vsfod9cVUsrSG0UqeD8IvWb8fSHDmRoJSFWoLJm4/mMHCL/TY9y1YxfNB+OGD8EH44YPwQfjhg/BB+OGD8EH44YPwwwfhg/DDB+GD8MMH4YPwwwfhg/DDB+GHD8IH4YcPwgfhhw/CB+GHD8IH4YcPwg8fhA/CDx+ED8IPH4QPwg8fhA/CDx+En3/yF6uitrt8gybeAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-UML-Examples">examplecoloredIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAK8klEQVR4XuWdaU9UyxaG+6v/x88nfjq/wMToiTmJepKboFFDHO69BgUVB5xQFFEUnEBRRBEUJ1AU54EjKiqj84Ai4nScat16qk9x9+3bAtK7RXvVzs6eqqFrv73XW2utt2pHRIa3XLlyxcybN0927NghpaWlUl5eLnl5eTJ//nyZO3euTJgwQU6dOuXq+u369eulqqpK9uzZ4z6zcePG0L5Pd3e3Gc77EZEfABC2b9++lU+fPrltsHAuWD58+ODqsO2v3k8LiDGVpv+1y33BhgZ7VNn/Sp2hAvKjlB8CkLy8f5iOjkJTUJBmtm9PN3/+ucZUVPzL1NRkmpaWy+4LlpXdcjd98eJ6k56+w/z2W5YpLOwwaWkFJje30fz666RQAdm0aZPbPnnypO/crl27pKOjI7UBaWvbaNrbC01Z2SzT1JRngfi32b17lunp2Wm2bp1usOMekNLSbvP774scKIADCHl5TZYDakxGRtWQASkoKJAlS5Y4/li4cKHjDwA5cuSInDx5UrKysmT58uVu29DQ4D4Hd3z8+DH1AKmunmtv+ljz/HmJKS6eZsrL/2k6OzeZ9+/LTWNjrqmrq3Zf8NChLjN27FyzcGGt+eOPXPeElJQ8N9OmFdsb2mKys+tMff3HIQECJ6xevdoRe11dnf1fh+TGjRuydOlSd9NPnDjhAGppaXGfWbBggTQ1Ncm5c+dS0WR1mf7X6E3u6bFHXf2v1NHPIT95L8s+Caa1tTXh9ebNm6H8nXfv3ukGJKzy8uVLkwrtiPT29ppUWAHkZ127rL33+ynzhPzM5f37931PdyQRe3vp0iWj+Ua2tbWFwludnZ19+wk9Ie3t7aoBSUb79QMyDO3HnyIgitNbUVEhp0+f/i8geOLTp0+XNWvW6AfkO7UfxxcgfMHRtd1tuXDhgkQuX74srJbh9QPyHZ8QIhHBQoRCv8nSzyGpC4gNrUm8fUpsgDr2un5AQgakqIjos8jx42IDoiIrVohs3y42ai3y11/R8/n50XM5OSKZmWJpQiRebFQ/ICG0f8YMkcpKsdFqkezsKDg2oyBkllkJUnOO/V9+Edm5U6S+XmwvSz8gSeWQ5uaBP1NTI9Lbq99kJRWQb+mhDlRXPyAhtH/ZsmXWBNW7bCZZT7q1+BSoYihkPm3ex3LJced/HDt2TD8gyQRky5YtMmrUKDl69KjzundakgAE5Exco3AOGROA5ebmElDUD8hw+iHNlmAOHz6s3w/R7xgqBKSkpMT6GNvl6dOnjkcQXyDk85zy+PFj2bBhg9y7d8+JOTBdDx48cFxz8eJF/YCEDciYMWNc9BbChkeC8lcI/8uXLw4Imz9ygUUkTDW2/wuv3LlzRz8gyTZZ8WStsRJZrykDLP2A6OcQPYD0J97DpK2wgS4faqdgwjBl+gEJEZADBw44lSU6ZHwMjtetW+e4Yu3atc43QWkJIOnp6XLr1i3XBT579mwfp8A9HOsHJIT2FxcXOxE4PaaVK1e6YwBgJfmHFJZeFVs8dlK39L7w5vft2+fqoW1ubW3VD0ii7e/u7kZ9EtqqH5AQ2o+f8bXCkxAsPDEPHz7UT+rJ9kMQi6DQxwR50QgmCf/k1atXMnHiROd3MPTCc8bkyZP5G/oBCRuQ3bt3u18+8SrMTqxoBF8DwgYgvHc4Az45c+aMPHr0SD8g+v2QFAek+SupwnjD75oHSCvqBySE9s+wSfXFixcLw7tnz57t4lNwxObNm109ElX4InRt8UXgl9hQin5AQgQEEkd9CKmTkGJwamNjo82d9zpHkZKfny979+51Y+wZL6n/CRlmDoHoIXX9HPKdAMFBjLcfr/R3PcJjRIKexPu3jmrVD0i0/fz68S3oynIPMzIyXAARUQOF7m1ZWZk7R7cX34QtBI8po9y9e9edi3CRyti6a9eu6QdkCO3H2SNjSAwLYQPgkCHcunWrCy5C9n5OFsgfB7GwsNBlDElckV2kPh2BCOjpN1nhtD82HRuv8BRcvXpVP4fodwwVAVJUVORMEkFGcukkoTBHmCHKwYMH3XnOYdYyMzNdOP769ev6AUkGIDh727Ztc9vs7GwHDrwCP3A+Jyenj0M8eIgcyI3oByQJgHjBAoAEJ8SJ543zhNAbo8QKHPQDop9DUhcQfLl4+5TgKNvY63R/u7q69AMSJiB+ainiVPgZOIbEq0hK3b9/3/l4/hxxLrgEhxAuYX4w4l/4L/gt+gEJof23b992TjU3Fh+DBBTSHpJSrD09PX2CB3wV6uHRwzcQO9Hh6upq57nrByTE9r9+/XrAzwzkiEfEJ+gHCIjpByTx9vMEBEVyFHyT/xXKMaPAkSMijF148UI/IENoPwkn7H9tba2MGzfOHcMPM2fOlClTpvQlrLxQDoeReSXRZ8E/CCMgeoCJ9I1UZPZPxvDqB+Sb2w9Z4wDi7KFA4RhAvDPoE1aQvlemcH7//v1OHU+9SZMmOW9eP4fo90P0AhJvBC6aLROYO1Q/ICG0n+QehE1ofc6cOe6Ybi68gFnyo3LhEEwWojqSV3AIMS/qouci4KgfkBDaj+NXWVnpurQoSzj2QUS4wo/KRVaKZ37+/HnXCUAlj09CPTgIj14/IPo5RD8g+gFJMiDYfswQeXU/0pYQO+M9CJdgsvwscuxT4BucRK6zj4nTD0hIgOB/oF6EuP1IW26wf5EB3AFYfgyIV5oEC2DRIdAPSAjtJ0gIMQeny/DJKeZSDCaq3rx507fPaF2u+7+h/wnRzyGpCUhwhtHgC2i8UC7WNOkHJMmAwBEjRoxwMSziUX7U7ejRo6Wzs9PVRSFKEgtA8D+ePXumH5BkAYK3/fnzZ+eFE/H1o24pPn1LQBFFCtcQOtAr0w+Ifg7RAUiio3CDQocIyXX9gCTW/kRH4eJIUpzIIdgv1g/I0Nqf6ChcOgIo4PWLHPRzSGoCMpRRuFyLNyxBPyAhtH8oo3AXLVrkTBhCbN6UgNnSb7JCAmQoo3D9q2VRLlKXgm+iH5Dv1P7Bj8INjisMCLb0AzL49huJ3obYbez+4Ejd2jrhhb8lJfj3PEPRY96noB+QwXV77bLfLs12KbcL28sSvX9NdumyC+cbpGGQvSyikjiIvFOBaCQg9TM/uX5AYhxDu2y0S4VdTtuFbYFdPtml1C5Vdllrl6N20d/t1e+H6AdEPyDDDAgxKqYZZ1Tt+PHj3TECB2JT5NLxSxg/gg8ydepUJ7aON/U4AUb9gITQfiK6q1atcjeULcd+RgeCi8S3CDoCSFpamrx48SLu1ON0jfUDEkL7gyIGgoRfm1bcCxpiPxOsox8Q/RySeoAwXjBWvIDIWj8gwwQI8So//VJWVpa7NnLkyL6pxlHDwxeIG4hpBScX0A9IEgBhenGfnELsQC+L+d0ZWQtR08uCvAkukjHsb14y/YD8cByCsCsWMW8PbRhZ4k1q9nd9/YAkPpPD/wPCq3mI2fMh3pp786ZYg8j7pKOxLfRDt29H3xvKsbWJ8neMXz8gic/kEKvPikhtLVOhRQOKiLu48aQZrT10L3GlcI4CYESBqW/72/oBSXwmh9j0r34OCbH9oczkkMi7LmwuWD8gXylNgZems4+XTnyrv6nGE37DjvbiAWH2hlmzZrlBOmiw6NoyzR+BRQQN5M9RwmPWEEQwJSwzOXCOVyUhdMBHcU+ITcSbZK7Wfhr76/ih1rABQbmIp87NJkbFzfaBRYicORchb8TW1OP9U1yjI8A5CJ8nBxD/A2xqAIUQ0XD1AAAAAElFTkSuQmCC'</body></methods><methods><class-id>Roassal2.RTUMLExample</class-id> <category>sources</category><body package="Roassal2-Builder-UML-Examples">exampleArrowed| b |b := RTUMLClassBuilder new.   b instanceVariables: #instVarNames.   b methodselector: #selector.	b methodsNames: #rtmethods.   b attributeselector: #yourself.b lineShape arrowedLine.b addObjects: (TREvent withAllSubclasses ).b layout tree.b build.^b view</body><body package="Roassal2-Builder-UML-Examples">exampleBlackColor| b |b := RTUMLClassBuilder new   instanceVariables: #instVarNames;   methodselector: #selector;	methodsNames: #rtmethods;	attributeselector: #yourself.b attributeShape color: Color black.b methodShape color: Color black.b classNameShape color: Color black.b lineShape color: Color black.b boxShape borderColor: Color black.b addObjects: (TRAbstractArrowHeadShape withAllSubclasses ).b layout tree.b build.^b view</body><body package="Roassal2-Builder-UML-Examples">exampleColoredProtocols	| someClasses allMethodCategories b n |	someClasses := RTShape withAllSubclasses.	allMethodCategories := (someClasses flatCollect: #protocols) asSet asArray.	b := RTUMLClassBuilder new.	n := RTMultiLinearColorForIdentity new objects: allMethodCategories.	b methodShape		color: [ :m | n rtValue: m protocol ].	b methodsNames: [ :cls | (cls rtmethods sortedAs: #protocol) ].	b addObjects: someClasses.	b treeLayout.	b build.	^ b view</body><body package="Roassal2-Builder-UML-Examples">exampleExternalEdges| b |b := RTUMLClassBuilder new.b    instanceVariables: #instVarNames;    methodselector: #selector;    methodsNames: #();    attributeselector: #yourself.b attributeShape color: Color black.b methodShape color: Color black.b classNameShape color: Color black.b lineShape color: Color black.b boxShape borderColor: Color black.b    addObjects: (Array with: RTView with: TRCanvas);    treeLayout.b shape arrowedLine        color: Color black;        withHorizontalAttachPoint.b edgesDo: [ :edges|	edges connectFrom: 'trCanvas' to: TRCanvas. ].        ^ b</body><body package="Roassal2-Builder-UML-Examples">exampleNoInstVar	| b |	b := RTUMLClassBuilder new.	   b instanceVariables: #instVarNames.	   b methodselector: #selector.		b methodsNames: [ :cls | cls rtmethods sortedAs: #selector ].	   b attributeselector: ''.	b addObjects: (RTShape withAllSubclasses).	b layout tree.	b build.	^ b view.</body><body package="Roassal2-Builder-UML-Examples">exampleSimple| b classes classNode classNumber |classes := OrderedCollection new.classNode := #('Node' nil #()).classNumber := #('Number' 'Node' #('value: Float') ).classes add: classNode; add: classNumber.b := RTUMLClassBuilder new.b forSelfMadeClasses.b addObjects: classes.b classname: #first.b attributeselector: #yourself.b instanceVariables: #third.b superclass: [ :c | classes detect: [ :cc | cc first = c second ] ifNone: [ nil ] ].b layout tree.b build.^ b view</body><body package="Roassal2-Builder-UML-Examples">exampleWithNonClasses| objects b |	"objects :=  {		{ 'MyClass' . { #iv1 . #iv2 } . { #method1 . #method2 . #method3 }}  .		{ 'MyClass2' . { #iv2 . #iv2 } . { #method1 . #method2 . #method4 }}  }."	objects := Array		with: (Array with: 'MyClass' with: (Array with: #iv1 with: #iv2) 			with: (Array with: #method1 with: #method2 with: #method3 ) )		with: (Array with: 'MyClass2' with: (Array with: #iv3 with: #iv4) 			with: (Array with: #method4 with: #method5 with: #method6 ) ).	b := RTUMLClassBuilder new.	b attributeShape label if: [ :a | a = #iv1 ] color: Color red.	b		addObjects: objects;		classname: #first;		instanceVariables: #second;		methodsNames: #third;		methodselector: #yourself;		attributeselector: #yourself;		superclass: nil.b build.^ b view</body><body package="Roassal2-Builder-UML-Examples">examplecolored| b |b := RTUMLClassBuilder new.b methodShape	if: [ :method | method selector beginsWith: 'init' ] color: Color green;	if: [ :method | method selector beginsWith: 'with' ] color: Color red.			b attributeShape label	if: [ :attribute | attribute beginsWith: 'a' ] color: Color blue.b addObjects: RTShape withAllSubclasses.b treeLayout.b view setDefaultMenu.b build.^ b view</body></methods><methods><class-id>Roassal2.RTUMLExample</class-id> <category>accessing</category><body package="Roassal2-Builder-UML-Examples">label	^ 'UML builder'</body></methods><methods><class-id>Roassal2.RTOrderedCollectionTest</class-id> <category>tests</category><body package="Roassal2-Utility-Tests">testAddingToView	| v c |	v := RTView new.		c := RTOrderedCollection new.	c viewToUpdate: v.	c shape		rectangle size: 10; 		color: (Color blue alpha: 0.4).			self assert: v numberOfElements equals: 0.		c addAll: (1 to: 20).	self assert: v numberOfElements equals: 20.	v</body><body package="Roassal2-Utility-Tests">testCallback	| t c lastAdded v |	t := 0.	v := RTView new.	c := RTOrderedCollection new.	c viewToUpdate: v.	c whenAddingDo: [ :object | t := t + 1. lastAdded := object ].		self assert: c isEmpty.	self assert: t equals: 0.	c add: 10.	self assert: c notEmpty.	self assert: t equals: 1.	self assert: lastAdded equals: 10.		c addAll: (1 to: 4).	self assert: t equals: 5.</body></methods><methods><class-id>Roassal2.RTAnimationTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testExclusiveAnimations	| v a1 a2 e |	v := RTView new.	e := RTBox element.	v add: e.	a1 := RTResizeMove new toExtent: 20 @ 20 during: 0.4 on: e.	a2 := RTResizeMove new toExtent: 50 @ 50 during: 0.4 on: e.		v addAnimation: a1.	v addAnimation: a2.		self assert: v animations size = 1</body><body package="Roassal2-Core-Tests">testExclusiveAnimations2	| v a1 a2 e |	v := RTView new.	e := RTBox element.	a1 := RTResizeMove new toExtent: 20 @ 20 during: 0.4 on: e.	a2 := RTResizeMove new toExtent: 50 @ 50 during: 0.4 on: RTBox element.		v addAnimation: a1.	v addAnimation: a2.		self assert: v animations size = 2</body></methods><methods><class-id>Roassal2.RTCircularTreeMapTest</class-id> <category>tests</category><body package="Roassal2-Builder-CircularMap-Tests">testBasic	| b |	b := RTCircularTreeMapBuilder new.	b shape		color: Color transparent;		borderWidth: 1.	b		baseradius: 400;		weight: [:n | n].	b explore: 1		using: [:n | n&lt; 3 ifTrue: [Array with: n+1 with: n+2] ifFalse: [ #() ] ].		b build.</body></methods><methods><class-id>Roassal2.RTDepMatrixExample</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-StructureMatrix-Examples">example01	"	self new example01	"	| b |	b := RTDepMatrix new.	b shape rectangle size: 20.	b horizontal: 'ABCDEF'.	b vertical:  'DAEFCB'.	b build.	^ b view</body><body package="Roassal2-Builder-StructureMatrix-Examples">example02	"	self new example02	"	| b |	b := RTDepMatrix new.	b horizontal: 'ABCDEF'.	b vertical:  'ABCDDEF'.	b build.	^ b view</body><body package="Roassal2-Builder-StructureMatrix-Examples">example03DNA	"	self new example03DNA	"	| m |	m := RTDepMatrix new.	m horizontal: 'NNANNNGNNNAGGNNNNAAGANNGAANGNNNAATGNGNANAAGATATTAGNNNNAAANANNNNNNNGGTGGGTTCCCCCTANGTANNNATTATNNNCNNNGGAGAGCACCGGCCCAGTGGATTGTACGGCCTACCAAAAAGGGGGCTGGTNNNGTGGAAGGCNNNAATCCCCCCCCAACGGGGAGCAAAGGGGAAAAAAAACCAGNGCTGAAC'.	m vertical: 'NNANNNGNNNAGGNNNNAAGANNGAANGNNNAATGNGNANAAGATATTAGNNNNAAANANNNNNNNGGTGGGTTCCCCCTANGTANNNATTATNNNCNNNGGAGAGCACCGGCCCAGTGGATTGTACGGCCTACCAAAAAGGGGGCTGGTNNNGTGGAAGGCNNNAATCCCCCCCCAACGGGGAGCAAAGGGGAAAAAAAACCAGNGCTGAAC'.	m build.	^ m view</body><body package="Roassal2-Builder-StructureMatrix-Examples">example04DNA	"	self new example04DNA	"	| m |	m := RTDepMatrix new.	m horizontal: 'ACCNGGNAAANNTATGCCGCATCCTTGACTTACGTCGCAGTCCTCAGTCCCAGCTGGCAGTATTCCCACAGGCTATAATACTTACCGAGGCAAGCTACATTCCTATGGATTTATCCTGCCACCAAAACTGATGCTGGCCCAGTGAAATGCGAGATTCCCCTACCCACAAGGAGCAGAGGGCACAAAACACCATGTCTGATCAAATGCCCTTCCCTTTCAACAATTTCACGTACTTTTTCACTCTCTTTTCAAAGTTCTTTTCATCTTTCCATCACTGTACTTGTTCGCTATCGGTCTCTCGCCAATATTTAGCTTTAGATGGAATTTACCACCCACTTAGAGCTGCATTCCCAAACAACTCGACTCTTCGAAGGCACTTTACAAAGAACCGCACTCCTCGCCACACGGGATTCTCACCCTCTATGACGTCCTGTTCCAAGGAACATAGACAAGGAACGGCCCCAAAGTTGCCCTCTCCAAATTACAACTCGGGCACCGAAGGTACCAGATTTCAAATTTGAGCTTTTGCCGCTTCACTCGCCGTTACTAAGGCAATCCCGGTTGGTTTGTTTTCCTCNNTNNNNNNNTTTTTNNAAAAAANAANNNNNNNNNNN'.	m vertical: 'AACCCNGGNNNTATGNAGCATCCTTGNCTTACGTCGCAGTCCTCAGTCCCAGCTGGCAGTATTCCCACAGGCTATAATACTTACCGAGGCAAGCTACATTCCTATGGATTTATCCTGCCACCAAAACTGATGCTGGCCCAGTGAAATGCGAGATTCCCCTACCCACAAGGAGCAGAGGGCACAAAACACCATGTCTGATCAAATGCCCTTCCCTTTCAACAATTTCACGTACTTTTTCACTCTCTTTTCAAAGTTCTTTTCATCTTTCCATCACTGTACTTGTTCGCTATCGGTCTCTCGCCAATATTTAGCTTTAGATGGAATTTACCACCCACTTAGAGCTGCATTCCCAAACAACTCGACTCTTCGAAGGCACTTTACAAAGAACCGCACTCCTCGCCACACGGGATTCTCACCCTCTATGACGTCCTGTTCCAAGGAACATAGACAAGGAACGGCCCCAAAGTTGCCCTCTCCAAATTACAACTCGGGCACCGAAGGTACCAGATTTCAAATTTGAGCTTTTGCCGCTTCACTCGCCGTTACTAAGGCAATCCCGGTTGGTTTGTTTTCCTCCCNTNTNNNNATATGCAAAANN'.	m build.	^ m view</body><body package="Roassal2-Builder-StructureMatrix-Examples">example05DuplicationClasses	"	self new example05DuplicationClasses	"	| m cls1 cls2 str |	 	str := WriteStream on: String new.	RTLine fileOutOn: str.	cls1 := str contents lines.	str := WriteStream on: String new.	RTBox fileOutOn: str.	cls2 := str contents lines.	m := RTDepMatrix new.	m horizontal: cls1.	m vertical: cls2.	m build.	^ m view</body><body package="Roassal2-Builder-StructureMatrix-Examples">example06	"	self new example06	"	| b |	b := RTDepMatrix new.	b horizontal: (1 to: 10).	b vertical:  (1 to: 10).	b function: [ :x :y | (x + y) &lt; 10 ].	b build.	^ b view</body></methods><methods><class-id>Roassal2.RTConditionalLayoutTest</class-id> <category>tests</category><body package="Roassal2-Layouts-Tests">testBasic	| v es l |	v := RTView new.	es := (RTBox new				color: [ :value | value odd ifTrue: [ Color red ] ifFalse: [ Color blue ] ])				elementsOn: (1 to: 4).	v addAll: es.		l := RTConditionalLayout new				condition: [ :element | element model odd ];				thenLayout: RTVerticalLineLayout new;				elseLayout: RTHorizontalLineLayout new.	l on: es.	self assert: (es collect: #position) asArray equals: ((Array new: 4) at: 1 put: ((3.0@2.5)); at: 2 put: ((17.5@3.0)); at: 3 put: ((3.0@17.5)); at: 4 put: ((32.5@3.0)); yourself)</body></methods><methods><class-id>Roassal2.RTSpringLayoutSteppingTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testAfterBlock	| t s |	t := 0.	s := RTForceLayoutStepping new.	s afterBlock: [ t := t + 1 ].	self assert: t equals: 0.	s refresh; refresh.	self assert: t equals: 2.</body><body package="Roassal2-Core-Tests">testBasic	| l |	l := RTForceLayoutStepping new.	self deny: l hasCompleted.</body><body package="Roassal2-Core-Tests">testBasic2	RTForceLayoutStepping new refresh</body><body package="Roassal2-Core-Tests">testBasic3	| v l |	l := RTForceLayoutStepping new.	self assert: l nodes isEmpty.	v := RTView new.	v addAll: (RTBox elementsOn: (1 to: 2)).				l view: v.	l layout: RTForceBasedLayout new.	self assert: l nodes size = 2</body></methods><methods><class-id>Roassal2.RTSunburstBuilderTest</class-id> <category>tests</category><body package="Roassal2-Tests">testBasic	| b |	b := RTSunburstBuilder new.	self assert: b layout layout class equals: RTSunburstConstantWidthLayout.	self assert: b shape current class equals: RTArc.	self assert: b elements isCollection.</body></methods><methods><class-id>Roassal2.RTGrapherExample</class-id> <category>icons</category><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleAdjustedAxesIcon	^ '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'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleColoredAndInteractionLabelIcon	^ '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AElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDoubleBarIcon	^ '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'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDoubleYAXisIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADmUlEQVR4XuXbW0vbYADGcb+ZCPsKskvxbrsTvNIbQRRPg3oxRRAH0ot65YUXgspQUTyjFbEyL2wd4hQHlpXqPPTJ8sYJKk0TNW2T/h8IrfYQ8/5M3jyx1lkWP2FKHX8I+CD88EH4IPzwQfgg/PBB+CD88EH4IPzwQfjhg/BB+OGD8EH44YPwQfjhg/BB+OGD8MMH4YPwwwfhg/DDB+GD8MMH4YPwEy2QhoYGmduuri7Nzs7q5eOyc3V15SxRHYxUSq/62d22t7m5WQcHB4rFYpqenlZPT48CBTk7O1Nra6vzpp2dnTIoxUC2trZ0enrqunLznHQ6bZVaqhHF49LKir5/HNFrUH5PThbd3v7+frOp6u3tldt4BXLIur291fX1teubHx0dlVxxWECUTMpB6OuTLi/fvEdrYaHka29ubpzHS41ZWeeQsIIom30YfIOwsxPYIdULpOqTelhAVChI3d36/OGHcl+/lW1O44N4AGhpSRobq9hJBR+kygB8kKevteeAT/Up5WMjoTmtRoE4E/DiojMZh7W31DTIz+Vl61c8br33VBQBcn9/r5aWFt3d3TlFx22wTTst1dRfgjQ2/rGSXxIORjWL4Vvz175iUWx7BwYGnO9NTU2pra1NTU1NwfeQ8fFxXVxc6OTkxBUk6KYe1mbv1dSHh4efFejHy0qBguTzeVW6qYcdxO2QZcbIjNXTr2viLCuqIDV72ssH4YPwQfggfBA+CB+ED1LbIKaDTNolyNyfm5vT/v6+gmjqUQdxa+omKftvweZ2bW3tVZ8z8L2HDA4OOm/a0dEhewltUy/38/009fPzc/uS3MNFUfOLPDExESyIWYFBWF9f1/z8vMy1rbAesioJUuqQZUDMeI2Ojj5r7bg5JCwg/EmdD8IH4YPwQfggfBA+CB8kkiC7u7uRaOqVBHFr6oeHh3q8NWNlelzgIBsbG/ym7rOpJxIJFQoFewda0N7entrb24MH4Td1/4cs88kccw3LjNnq6mrR/6fhzyH8SZ0Pwgfhg/BB+CB8ED4IH4QP4p2ZmRnPpr65ualsNotv6n7G610gx8fHyuVynk09k8loe3tb5vmEJZlMFm3qfsbr3XvI0NCQvJq6/sfix9d4lX0O4Sdkkzo/fBA+CD98ED4IP3wQfvggfBB++CB8EH74IHwQfvggfBB++CD88EH4IPzwQfgg/PBB+CD88EH4IPzwQfjhg/BB+OGDRCn/ACEOsXsP+FT6AAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDynamicStackedIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACMklEQVR4XuXcvWoiURiA4dyzFyCIINh6ATZegohgodhoJyo2sRArC0Xt/P8SzsAsy7Ik22R0eV4YzGB3Hk4OnyO+fXz4vVJv/hL4IH7/AnI+n6Pb7Ya/JE8G6XQ6vyDq9boP8io7ZDKZRLlc9lfEP0P8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H8QH8fNBfBA/H8TPB/FB/HwQH8TviSDD4TBarVZUKpVot9tRq9WyL9ql+8fj4X/prmiQxWIRy+UyttttlEqlqFarGUK6Px6P2d+HwyHSl/D8pS7wX9bpdIr89Xq9Rn6ft1qtfJBXOkN8EB/EB/FBfBAfxAfxQXwQH+Q/HwzzyfyrSd0HKXiH+JO6P6n7IP4Z4oP4ID6ID+Lng/ggPogPgoP0er1swafT6V+HQB+kYJDL5RKbzSZ7vp6u39/b7/cxGo1ivV4zV/p04qkgjUYjxuNxtjtms5m/Q/wzxAfxQXwQH8QH8UH8fBAfxO9HQZrNZqQJvd/vR5rY03P2/N4HKRhkPp9H+q3fcrmc/cTsn6/5pO4/Uy9wh6SFTx+dDAaDbFfc7/e43W7Zvb9D/DPEB/FBfBAfxAfxQXwQH8QH8fsJkPf3d39Sf6VJPQ2A303q6fKXusBJfbfbfTmp+73YGeLng/ggfj6ID+Lng/ggfj6Inw/ig/j5ID6Inw/ig/j5ID6Inw/i54P4IH4+iA/i54P4IH4+iA/i54P4+SA+iN+3fQIe1z3fETJGzQAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleEbolaIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAJKUlEQVR4XuVbWU8USxj1L/nmi1GjiSEkQmKMiUvQROTBBI36IFFxBQUlguioCIoREUGMuOQqywACCggKcr0KIkIc2VwQUUTFj1unxmp7mhmnu6dhwO8klZ7uma6u7lPfdqpnzsQEf8wkzOH/CPgTwh/8CeFPCH/wJ4Q/IfzBnxD+hPAHf0L4E8If/AnhD/6E8CeEP/gTwp8Q/uBPCH9C+IM/IfwJ4Q/+hPAHf0L4E8If/AnhTwh/8CeEPyH8wZ+QvwHj4+MEjI2NEfZ//vwptz9+/CD+hIQBePAfPnygr1+/0vfv3+nTp0+SnKGhIf4WEg58+fKFQMrnz5/ldnh4GGTwJ+SviSFVVVWUk5NDR48epZqaGtqzZ4/0fQcOHKDS0lIyzgY0/o90Mh4+JNq9myg3lygkQuDvioqKqL29Xfq+S5cuyQ73799PBw8e9On89evX9OjRI+kzQcwv3zkxOjrKnqSSEqKVK0tp374QCUGWgK3xoSJI+fv9q1evJBHwkd++fZMkqgyDOwoK+knMWZq2tBcpXU9PD4E8BDBYB7b8CfHi7NmzNO11CCwE27Y2EpZCjhABSxsZGZEZysePH+VnlbXMJkL27t0bHkJOn/YGMPhLsevIQ1O5fG9vr3SJsLpAbnOmwuVyhYcQkLFuXb3cut2hEwJXiIcPq1B5/Wwk5OXLl6ET8v79e3r79q2MC5id6hjch8fjIX+EZGURLViQLLIw5ywEEMOQBIv7IiuVMsYO8oxt1tUhT58+pXv37lFqairhQR86dEjLuNpEkIiJifG5KWRWOI7Pc+fOFzIBOXrTeXleV4j25o25vqEjYbzIFgcHB2X2hzaT409AQiorKyeioqII2QHqj+joaFkMZmRkSF0mJSVFuhEjIQjCxcXFPt85AVGf0sKFKZIQs5anMj5slZsLh4U8fvyYHKnU7cSQEydOkLcYKnH0pru6iJYvT6WyMnuWB3cn5pHlczH5MMkgDIJIuGscQ7Zntg9M4rARUl1drVXzTs80SDl2yYiJqSNUzFbPhduDtcMD9PX1kSqWlZRuBvtEyhk2QqB74fOxY8ccJyQ7O1sj3AqwLLF06SZTlbIRKHBhDcjwAKi1ihTz8S8vfIS0trbKiz9//txxQiBqGjU0s4iPjw9pPO/eEd29SwSh0Oq5/f3900fIwMCA0q8ImRkCKPztVATHhoYGsuKP9Thz5kxIY0LsSkgYk0kFLM7KuZcvX3aGkDciv8T26tWr9OTJE01yr6+vJyU4oi5B0AMh27Ztk+YMghD4nCTjxo0bsj9VD9kJzleuXCGdK5KBGcdxLwjW6ligOLRokTfLs3ptx2MI0l5kTYmJiaT2CwoKyOCuJnJzc7V91DBOEmLlpgIhOTnZpw8Ea5AAQhCkMbFATKDzMSnt1DDp6enOEKLkc7gKZDjqIWNfFYG/SSOKjMzQzFkFd6egzN6OO7x9+7Y8p6mpifT3BgIARQqO/cmyjxw5QufPn7d8/Yci8Ex7UIdkEh8/JG7MS4hxNoYKPDxlnVbPVYnAaaF8Tp50XkkmmO4Gy4CrzszMpLBU6nbQ0dGjDbaiomJKBm6nvlGWffLkyUnnCs+rSTL4HCwpaGxsnD2EqPUQVVA5mfoqt6MPzFbPxXqK8Tsh1dHGjf/Sli19hM+B+lDXVZqeWXR3d9OMIMRqMDNTgyh9CiuTdlwWYMyi2tuJli3Lp4iIHII8E6wvq5Z/6tSpmUOIE5mRv2rX7GKPwq1bt0hf7Ru/x5s1+t/4A17gsDNusyuFpghBZnPz5k1CHYL92tpaqquro127dtGzZ88mvQZkdFGFhYWOEPLixQvSa0eh6GTIlPxZMQK2WSvDeKaqIJ3z5+q0jK5du0bNzc0yJUQlDlJQ/CkXogDhDb/zlxmFisOHD/v0c+fOHdP9GuuKjo4On339xML9BZI+sJ5iZ0Ko4toRQugXVKWrr3rNuCyncPz4cZ9+W1pabEvfKigjXhQWDorqvUH7/uLFixTMOgArAqdKKGZEDPGX1dgBpJg/WYweNTXeFBZbfwXq9u1FVFQEXYpo9Wq3jzaF1dFAFbp+PxBxZsgMKyHnzp2bEosJ9OAAPODY2DZNc9K/XIDiD8eXLHHRvHlFIhaO+xDS3T0iC0RRA5KVOGTF3YaVEOVr4fZwo3be1RJZI23a1EVIT9UxY6zSIzGxmlatKhPLvUkEZSQzM1sXjH8XgUIBofJy8ukXx3GuWPTUjnk8/ZST43u9YGk3RFhYtchDhGRfOnMISUvLESoxiTV2oq1bByktzTohcXEttHZtleaCzKS4Iv7K365Z46bFi9NIxGTtXFFoE5rxPKw/gZD16xvlBFByyYULF2hyoCaR3PhfMezs7JTaWFbWdcL1YYX66ztCiAqqSHn1Ap0eCPT6jOXBA6LNm3vlGkJkpFs81FoxwH+CDgwrdGgqzXa7mySp/rQl/b7HQ0KRbtXkc/Thco0Khdq8ZWLigJSsrApyucrFYliyXNsxJjEi8aSoqMJJxyHAVlZWkiI+Lu4/2Z/QYuUSsJklCVOE/PqTidb8/QbvaUEzQpqHlpAwLOSIYZo/P11um5s98jgCIoq8QC1LqJRo+Jyfn6/1Z2x460V/XnR0CW3Y0Kl9j5oILdD5wdrOnV3CsgfkCmiXSMn03+Feios9hFiCSarGgPpE/7u8PI9s+CxSalP/BDBFCB422MVLc4FeocHagj6rEjWl5q+tLOroLcQKjIqt3X6M8GchduCohQQD/swDolCtw83gGNag1UMyoxFh5REZCUiF6aNPO2MpF5EasUxJJGpsVvpA4Qs5RSkTOJaUlGTj5YpxguSPPu7fv29qncgRQqDXQLdSW7v9QKZReb7dV36QEuNPRopQu2NSkoeq9GNjY8muKIo/PKGh4odSYKyrHCcE6S3ih1uYg52ZpIA3/KApQVE1/mXOLFasWEEQH/H3O6xsqrFZ6QMvbkRERBAW2aDHwVLQj1UpCIkHJgPuBQ1WsmPHDk39mPK0lz9CB39C+BPCH/wJ4U8If/AnhD8h/MGfEP6E8Ad/QvgTwh/8CeEP/oTwJ4Q/+BPCnxD+4E8If0L4gz8h/AnhD/6E8Ad/QvgTwh/8CeFPCH/wJ4Q/Ifwxffgff5Jw1WkAY5wAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleFunctionsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEl0lEQVR4XuXd3UobQRgG4FxBr6S34WnxuLfgQY604oFrBAUj9a/QntjS0hapAQ+0LVbRqq2/YBUqGlsUBRUDkmBDFJW+2/kmTjDF2nWzyY55v2XIbjTr7D67M+bb7CTiuvxhU0T4dwE/CH/wg/CD8Ac/CD8If/CD8IPwBz8IPwh/8IPwBz8IPwh/8IPwg/AHPwg/SHGcn59DHvf393FxcaGLzMtzqVSq8DP+XVshkKWlJRweHkJ2/ubmpi6ZTAbRaBSxWExDyHI6ndbz8phMJl2zzBDAFioGUl9fj4mJCTQ3N2NsbEwXx3EwOTmJtrY2LCws6GUJ85rt7W2qMwZ4Dav7ECYQ4AzWd+pcIO38IHaBfOEHsQvkLT+IPRhHuBNvDHlAevlB7ALp5wexC+QHP4g9GO8D2UZ+kMBAxvlBqq3/4AcJDOMgsO3zBbK3t4dcLqczvn+n3M0yF0h/uCAjIyNIJBI609vS0oK6uroCjCybNLyEpN3n5uaqOv0OxMMFWVlZwfr6OpqamtDa2oqpqSmdjl9cXNTLMzMz4DpDfocLwt+HlOfs4AcJBCTBD2IXSIofxB6M7sC3ix+kJJBBfhC7QE74Qaq5ueIH4QepFoxc2baHH8SC9x78ICWDjPOD2IPxoqzb4jv9Lo+M6XdgwD6QhoYGmDQ7U/odyJR9G3yByA4fHR3Vn3ZnSr+X++zg70NuDbLCD2IPxtOKbAM/iGeQD/wg9mA8q1j9+UE8gTznB7EHY6SidecHsaTv4AexrKniB/EEMsMPYg/Gu1DqzA9yLUYOwAY/iD0gr0Krry+Q3d1dnJ2dVeWn34E3odbVF8jx8fFtP/2Ou5B+B5KhNVUlgdTW1mJ+ft7Tp99lEJqtra2iwWjsBfkUeh35+5ACRqsVdeQH0RgfrakfPQjwNfR+gx+kgLGoMOatqhstSP7MWLCuXpQgeYxZK89aOhDgs8L4aW2fRgUC9FWkHtOY5h8E82aIWZT7QlM3utGjJv4z5EaIjIJ4GfjfVhk8JNT0TU3LauJvsv4LkVIQnQjqDtkYYhhVk+M6GoO/D/GMkFDFf7MhO16OeDn6H6vpznXqZux3mb9pvPeNjWDfCZ+cnKgdv6xKPqvsBUF2tBzhicubbbrQVTjiZX1B1y8UEDP2uxkL/rrfkbT72lqfe3r6SKV7HVeKe/noZb5T7zY14T4cRFzn10NEo2nXUb9iygNnGRE1Y4osOw4ufw7XzHc6WbfohZclE41e+/zV0nXPgRNR9fBQvj8ZDOcMMWO/Sype0u/XNyXAwcFBoOl3WV+QR7RN6ytrH+K1SfMaR0f5cXF3dnZwddlvmDrJDpSLbuZGJL+RzWaLWop/tRqhgXhp0m4TPT35vmJgIH+fhln2Ex0dHRgeHtav7+3Nj7c7NDRUUh3j8XjRjUxXr5xaAeKlSfMa8o+B3LklX4chVyVXV1f1st/1yVXNxsZGvb729nb9HSjJZNL3+mQMsZqamsIVU/P1HVb+28sf/CD8IPzBD8IPwh/8IPwg/MEPwh/8IPwg/MEPwg/CH/wg/CD8wQ/CD8If/CD8YeIPX2amRIdH+ZAAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleHighlightDatasetIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFLklEQVR4XuXdW3PaRhQH8HzwPuQxnyGeyUOn7Uwz02kfmmk6SYwdDA7FXAQGhIS4GNCFu4AABnNOhVSUuGNnYi72iv+Z0QDW7iL2p9XRIsDPmPFDpHiG3wX4IPiBD4IPgh/4IPgg+IEPgg+CH/gg+CD4gQ+CH/gg+CD48eggpmHSeLqk1f1LtULonUmdDj0piK6bZLcaNP48IlU6vbUxi8WCTk5OoJDo5Uui+ZyEPWQlk0kYEGo2SfgcggJC4zGRbeODHNrowAfZBUYsRoE57T10kF2ODHwQgfIGPoigowMfRJC8sbuZum7QcMr3ztQPEWRfI2MnIB/TMtkThpmp7ytv4B+yBB0d+CCC5A18EAFHBj6IQHkDH0TQ0YEPIkjewAcRcGTggwiUN3YGksxFaTbsEi+XdCgz9dV18acaHduDxH4lozWisVm9c6YeCoWCB3J0tPV1cfxD1q4w4vEn3158EIEw8EEEw8AHEQwDHkQ0DGgQETFgQUTFgAQRGWNrkCUx3SyWpNUqVK2VhJ+pi46xNUh7yNQoKVRyZukfknmhZ+pBwIA5ZO0bo1olymSIXr1y33XB/zrCY2GsO340otWlktUbwvifXNw3hiQRPUbHQ4FQt0vfg3FXx2saEX4O2RZgOvV6tN0mKhaJXr8mck4qHvNQAwlyq+MVhSh/+8xu3fGrSxrRqAfAAQshQWgyIXrxgsiyvtnxQdjjAwXyrT3+qZNrYGfqkxndO1NPvPtEX3f8pN6m4huFwkc5kmWi4ZCo3yfK5YjOzryEen3tdXqpRJDfe98KxBgsaWm3752pv/vhR6qU6tRsNh+8HB8fb1TvKevu4tP++D+tgZRD8EMgkEb+2B2+byXtwcN49fGiTeuW6vrGdXWzs3FdVa5sXPdRQOI5jRbzBVXyiQdvYDTyceO64XB447qR2MXGdccz3rgu/iELP4fgBz4IPgh+CAdi2zbPZjOopVAoiPvjM6PRCG6PVlU1GCCqWtr5i5ekgveWjdnjS9W+te7/j++L7y33dSznvWCDpFIpTlyEvc6rK2y2TVYbBpczaW8CZnc5k6+z7qw7jsQ5l8lwJ5/xyo/n7jp3ctlpcmNgs+S016vlWcqW3b+nMxpniz3OX5ncsiy/o3tOG7Ws5NdTy2W/zdPf/vLLnUciXNE0lrMXflmvPct/Lesyq5i2im7b7k7hbMtqexU5H6wRYhgGp9Pei7DaYy4rMk9apvt42O84e7nlliFackHR/HUlOfelvX6Xzf/KqOUrNi1vT5UvJba6M27bc5bSaf/5Vm0MLdOvl05n/TbX7a/KGXqT2x3dGXGSX3bdXjaveOWcMp3+0L1PdMNV5zm9+972qkEDwc8h+CD4IPgg+CD4IPggAQfRdeZQyFvWsZh+5k5vcG+9caOGD7IvkGSS+flzb1nHxcdT9/bkPM5XxpivqhWOhE45ITec6/LXrP39BzfKMpcvYpz6dM6NlsWKbuGD7AuknD5nrVLlD5EzrtUHHJeLfPb+PUdTXXd95vdfuKYWWJaz/Obnn7jcqHKtWsUHwc8h+CD4IPgg+CD4IPgg+CBfQAbOfEOWvQUfRACQO857E8mYe6soJR4vljwbmM59xZmT6Dy7IZYTKe6aV84pcZvrjTo+yL5BIudRNvojlqsGp4pXfPlPmNVM1J+HWLEzDr3907lgpfFo2MMHwc8hBwrS7Xa53+9DLc5Vx+D8yyP8wAfBB8EPfBB8EPzAB8EHwQ98EPzAB8EHwQ98EHwQ/MAHOdz4F6JT5DYsMEvIAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleLabelsInBarIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABwUlEQVR4XuXavYrCQBSAUd//NcTW3krBEMFOIiRWBl/An0JS3UjCVq6Fu7jrmPPBYCMhMwenuDhqW7+UGvlH4IP4+SA+iJ8P4oP4+SA+iJ8P4oP4+SB+PogP4ueD+CB+PogP4ueD+CB+PoifD+KD+PkgPoifD+KD+PkgPojfMEB2u110n3meh3+cCYCUZRnX6zUmk0k8wprP5/+2mcPhEPv9vr1fl8sl/CvrKx/EB/FBfBAfxAfxQXwQH8QH8UF8EB/EB/FBfBAfxAdJBaSu636zq9Xq26arqnrJcPF0OsXxeGzvV9M08RuQZ5/3kSCLxSLO53Os1+v4q1/Iswf96u/5V5YP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4ID7IsECyLOs3MZvN/FlWCiDj8bgfLk6n0x+DvOugU4Z765Xlg/ggPogP4oP4ID6ID+KD+CA+iA/ig/ggPogPMnCQoij6l9tut/4sK5Vpb9dyuXz4V9IObLPZMKsbtCZ9Zfn5ID6Inw/ig/j5ID6Inw/i54P4IH4+iA/i54P4IH4+iA/i54P4+SA+iJ8P4oP4+SA+iJ8P4oP4+SB+PogP4ueDfGI3wxBGiYmHNxEAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleLinesAndBarsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACvUlEQVR4XuXcz0vCYBzH8f76/oOIoEvHqINgh6BDIYiX1cCDUB60sOksdYRIB/0sH2GRyye3NXX1/sCDP3im43m559kX5vbCkJ8iZY8/BHwQfvggfBB++CB8EH74IHwQfvggfBB++CD88EH4IPzwQfgg/PBB+CD88EH4IPzwQfjhg/BB+OGD8EH44YPwQfj5OyCj0UjmsdfriT+cOwYxCLVaTZ7nyff9byCDwSBXpDn+UhtcXYVvJyeKv8+fsuaZTqffBl/z5LmzrVbrs/kHB5/Pn6rV0Ds7Cx/v7hav+SCWbArkZX9/CWcJ6vAwVKkkPsg2QO7vw+eLCytG1BbffXMjXV4q733gg0SfdXsr7/x8LUZ8ytL7u3R9Lbmu+CA5gchxpCBQEoyvIPHF/vX4WOZEpMgnAYUH0empVi3qSUDS9ueDrNv+6Ei2syw+yBZBFvP+fM346bSXD2IZ8KggXFWpZwExEKpWta4O4YPYa4PMlXp8ce12u6H/8GBddPkgCTKbzWRalkp90wPMX0P4IHwQPggfhA/CB+GD8EH4IHyQ/1mp9/v9zJU6H2QDR4iBsFXqw+GQD7KrKYtfqfPXED4IH4QPwgfhg/BB+CB8ED4IH2RbIEEQ8Cv1IoHU63V+pc6v1Pkg/DWED8IH4YPwQfggfBA+CB+ED0IGiSp0fqVeAJCoQv+pUjdXwNta/Cp30z/+3uL/6Jb+tpa1fx5t50eIqdCzXv3+2/7/Mfx7nZBAHMdJ9YtvNBqp+jebTaWdYs3RnLR/p9NJ9fmrpu1CgVQqlVQ7WEp5B4ZyuZyqf7vd1mQySbyN67qKbq6TJObfZOPxWPwpiz9l8cMH4YPwwwfhhw/CB+GHD8IH4YcPwgfhhw/CB+GHD8IH4YcPwg8fhA/CDx+ED8IPH4QPwg8fhA/CDx+EHz4IH4SfDPkAjjgATwwDm+UAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMethodSize2Icon	^ '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'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMethodSizeIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAGmElEQVR4XuWca2/TSBSG+Yn8CX4EEhIXCbRC4gMf+Y7g0wLa7iLovWyFSsuqS4HQNGmbNvf4bie++83O2CRtaZs2IkmzvK80amynHmUen3PmjGfmWrfLr2nSNf4m4AfCL34g/ED4xQ+EHwi/+IHwA+EXPxB+IPziB8IvfiD8QPjFD4QfCL/4gfAD4Rc/EH4g/OIHwi9+IPxA+MUPhB8Iv/iB8APh19UAcRwHcRzj4OAA8jiKIsjC30xXBKRer2N+fh6WZaUQ8vk8ZPnxn/b39+W1/nGS8EMbC5DFxUW8fv0a169fx9u3bzE7O5uWs/6xVCr1zwMJP5CrjiHHgfBrCoFEocUPaJqAeO4hP5BpAhLHLj+QaQIShiY/kKlyWR6/y5oaIIFbFwmlzw9k1EBs20aSJAiC4MJM/UcL8SObH8g4LOTJkyd49uzZhZn62traiXN1/W8k/FYyWiB37tzBq1evkMvl8O7du0tn6lLlz7/B88r8QKYlqPvtCsLQ4AcyNXlI7QMsl384ZXqAKF9Q15f5gUwLkDSOmCv8QKYJSBzwDzBOBZAoznKVqDQPtfONH8pVA5HJpGHpSJwqjPY2P5BRA6nVakNl6hBqide/sbqN3dbv/EBGDeTx48dDZepivAW6qcLdEdl6EvIDGRWQpaWl7sLCAh48eIA3b94Mlam7ahOmrsJrVFG1PvBDuepeVquioV7ehabsIO4E0ov1r2sd/rgyUSBxlL0tLFcOUf/4V/r5OBStk+cHMtFeFhJ07GI6dB+r32CUD05BaTqf+KFMzELE+xPV+poetw4/QWmWoFebSKIwdV9h3ep2KtX0b6R3+MFMIoZouWwcy9lbgpyBImWrJsJOu/+9uv0PEo+/FzYRIJZpwvbqsB0DUWhCUyvp9bblIvKOZqSY3n5qNfxNP0YgvufDFEDUyvv0XBgG0DUNvldLLcWot456XG6+e9BYRFGb6coirYYfwwAgiqL0G6jZbOIyQGSj5/NFOMZn2BuzUA830TsvrUVaiK1nriuOHMS2d+K+VWuNH8p5QB49eoTV1VXI17l37949s6F+zNT9MMS2yOillejODqLiMuy2lVpJ7zsdVYGlOemxfNWbBBE/lMsAuXXrFl68eAE5E/7+/ftnNpJ88gWUE9c+lnIolQpwnRJ8MQxvljZg6EdAAseC7wZwzKyX5RnVU/fmhzKiGIIkxu7+Ib4VtqErC+gINwW/jUb+6IVVEsfpZ9top3ElEi5s2EkRuivcol9FO2iAH8igPEQkhMXSFsqVJgqNItygCNOvi35vC1p15yj4G2qWuTeyaadI54CJ4C++O2z9qhiOMdw98AM5p9srtbS+iq2tryJ2LMOL94WlGNDLeSiHudQqvO9A0m6y7iAyOjADE0GcZfQSzLAzVxrO5olxM34g8kn/7o4cpYSv3wrYVOtY2J/DtvYnVmslWI0coo1FqHoLip51geM4gX14FGMUT4Ed2AKkN7TF2H4FB8ZSvysti+HugtpCvEYLgaphL7+V9rayfERB08wyeL3yL6qb7+ErDcQi5liOiWq5dubT3XSbqKZjYz+X1cvXydK1Jfj/rIEcqcuSMcEsbsO029BMG+VmltMo+q44V4Pf/CLifwi52tcyswkRiRiITFoNJOXsfla9BkdVEbieuF2Q5jaWupFZoL8Lw9uFF54O6omwrCi0hXVdHPC9UIftl6G0v+CXBtIfs8pviB7Waves0tRz3Wan0C/HLSTRFMTLs91ecfd2up1GpV+Uyh/9YmoL3bb7YUBZu+D6z5eO/6nrxjtHJdo5eTygnBf3TgE5np2fl6nLteyFQmEiT5fv++na+UnU5bqTWQUmf4/8XZcC0svQB2Xqe3t7ePr0KeQr33GXmZkZzM3NTaSuly9fdidRj/w91Wr1ckDu3buXznwflKlLuqqqTuRpkvWc9zSNWr3ZNpOw+uNjhj8VQy7j0kahSqWSTkHqbfcxrnXxYZj15Hq7V8h6NDEGp+v6yOvrLYgatHXJ0EAu49JGIemq0g7C9+0+nj9/Ppa61tfXsbKygtu3b6cN9vDhw7QeOftmHPXJBVGDti4ZGshlXNootLm5CTGijN52H7LecbiuGzduQFr6zZs30/rkFKhxBffegqhBW5fwb8/0q+Qh/OIHwg+EX/xA+IHwNwE/EH7xA+EHwi9+IPxA+MUPhB8Iv/iB8APhFz8QfvED4QfCL34g/ED4xQ+EHwi/+IHwA+EXPxB+8QPhB8KvofUfARe3igib9zQAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMethodsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEZUlEQVR4XuWczUtUURiHr0Wtgty0aJF/QK78B1oEItFGiqTATRAtBHc6fsTo+AkqSoMZigsDUQllFCF1xHFUVFqIo2AghPntoPhtI/n1s3mP3MHKcQwc53p/DxxmmHu4yn3uOe9577nnaMfH/BgJjf8S8Avhh18IvxB++IXwC+GHXwi/EH74hfAL4YdfCD/8QviF8MMvhF8IP/xC+IXwwy+EXwg//EL44RfCL4QffiH8Qvgxl5CpqSns7OxgdHQU/DoMIKS6uhpbW1soKipCfn4+Kisr4fP5wC8kQjQ0NMDpdCI5ORmNjY0oLy8Hfwvhh0OIxIbl5eXAHS9dk/wm39fW1vhjxlULKS0thc1mQ15eHvr7+5Gbm6t+k2Pd3d1/CJmenlbFqMzNAVKurRCPx4P4+HgVqAcGBjA7O4usrCz1W09PD7Kzs/lbSKRiyMHBAf/F5w/q/EL44RfCL4QffiH8QvgxqxDJxtfX19WQd2VlJZC1Ly4u8g+DI9VCXC4XRkZGUFVVpbL2lJQUdHV1/SPE6Jm6KYTs7u6qC5+WloaMjAyVtff19aG4uJi/hUQyhgDgF8Af1PmF8MMvhF8IP/xC+IXwY1YhMocuRc/a9Ux9ZmaGfxgcCSH19fUqEZTvMocumXp6ejr0eXX+TP2KhchjExGRk5Oj5tAlU5eXHfgzdf5MnV8IP/xC+IXwwy/kv/D5AI/nesUvuhaC3l7wC+HHGEK2t7dxdHQUmEfXM/WFhYWw3qXwz1RifBz8Qs6gpqYGJSUlaG9vD7wJX1BQwJ+pR0KICGhra1MCMjMzVabudruVlLOSx3AnkHrL8d8d4M/U+eEI6ka+200vRHqb3clZqK5HyuvXgMmWxhlWiOrrW1rUxUZrK1yPcoGmJsBqBSoqAKcTmJ+HPyidfPpLOP6P1dVVdV5ZBSafw8PD4BQyNoa9cju8rm9AUhLc918CsbFAQgIwOAhMTl5Jy+jo6Aism7fb7aBrIXKh9z47sPTmHX7euQerlgdERwMxMUBcHNDcfKVdlMVikZHhcVlZGWR+R9bRHx4egkKI6qZSU1ESZcErrQEz2gM81now//Qt5rI/Ym7gB/hHWZfE6fXqZ7G/v4/WZ5/wUJvADe0Qt7Q9PL/pwPvU7ycBfGgIej0pof5epOpdGyF6lh7s+ETXV0RFAbe1X3hy9ws+vLCpruLv0tnZqcpZx8Jdb2NjwzwtRF+vHuy4PPeSEuo8Rq9nmhgSqksTZFsOCahLS0vn1tUXCslmBaHOd5FFRPp2IPKgNNwPRg0jJFSXJni9XrULxEWGnzIi0t8JC8bprT+s/vzmvHp1dXXY3NxEbW0th5BQXZrQ659ckrxAXiPy9+dB6+oLhRITE4PWO731h8PhCLotlF5PWqW0uMLCQvA/OiGCXwi/EH74hfAL4YdfCL8QfviF8Avhh18IvxB++IXwwy+EXwg//EL4hfDDL4RfCD/8QviF8MMvhB9+IfxC+OEXwi+En8vlN9AkwQP3P1GfAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMultiDataPointIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAADrUlEQVR4XuXbS08TURiHcT6rCze6EzV+AhMTVm4QiJFE3UCCMSGmRg1U27SU3svFXqCUXkILhJJwCbTv6HvIGFKr7UCB6Tz/5IRAO9OZ93fOmdN2GLEsftyUEX4J+CD88EH4IPzwQfgg/PBB+CD88EH4IPzwQfjhg/BB+OGD8EH44YPwQfjhg/BB+OGD8MMH4YPwwwfhg/DDB+GD/CPtdluSyaTUajWpVqvS+fjGxoa48aRF2nLRRDw3Qg4PD6XRaEi9Xpe/T1xcCdIau2daO/iBNWXxQfggfBA+CB/Eaqe/i13U64Jkcg0ZexOxtKWz9Z7H25p8cvHarx4JH4QPwgfhg/BBvA9y3//OtI/FFB+ED8IH4YPwQTwA0poYvTixycc9T+xHLS92UQO1gnSCBOMVyy4qH4QPwgfhg/BBvAeixbAL0w1kYiZhCjM5kxQ+CB+ED8IHuQEQLfjJyYlsb29LuVwWPsgdg+zv74u2dDptbnbofFxvctja2hrq9j78TR5+nLKefXrb9fEX4z5L2/yX6J+/aSe9symr1WrJbb9TPzg4uLVvIu2R/TQ01/U17dGlo3Qol71669DZ2Zm5dWhzc9PxPpvNpqyvr5tp8irHdH5+LolEQq4Coj0/n8+LnoMnQLRnBwIBWVxclL29va73cv0v+vxKpWKmhWw262hb7QC5XE78fr+ZZp2APJh/bY3OTUkqlTIdoVgsDjfI7u6urK6uSigUMgjHx8eOinl6eio+n88UU4txuSC9onhHR0dmVOrI0N+djMavmag8H38pn3/GTWfwxJSlU5PeSKc9TEeGk2Lu7OyYKer3Pkzrd1u9gU+3zWQysrCwYDpDv9vq66ysrJjt9Rj09SORiLeuIU569eXMzs6KjrB+n18qlcxztaBaxEKhYDpCv9vr8n16elqWlpYMSq/nD/1F/aajI0Eh9OKrU46TlZterOPxuFlw9NsJ+CA9okWNxWLiZNkeDAYlGo3K8vKy4+PlgwwoOgr0zayu+vSn0xUfH2TA0VGhnzBou85++CDXiF4fdAms72F0JeVkscAHuYHoElbf2OkyWP+nZRD75IO47Jj4IC4LH4QPwgfhg/BB+CB8ED7I4EF0Lb+2tmaKrt93dD6un7R6HSQQK4u2UrUprhgh4XDYfLVpw/Dj4imLHz4IH4QfPggfhB8+CB+EHz4IP3wQPgg/fBA+CD98ED4IP3wQPgg/fBB++CB8EH74IHwQfvggfBB++CB8EH7uOr8Ao4yOPnBNaKAAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMultiGrapherIcon	^ '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SDMMAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMultipleCurvesStackingIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEnUlEQVR4XuWbX08TSxjG/Wrc8DHgQ3DDXUONOa1GUqIo2iAXBVvbGDiBHKyQUAgeaJEQaZAARkMEqiD9A8tuoe2z7ju0pkGIWtvuts9vs5kSNu3M/nZ25p1395Zp8uMkbvGfAn4h/PAL4RfCD78QfiH88AvhF8IPvxB+IfzwC+GHXwi/EH74hfAL4YdfCL8QfviF8Avhh18IP/xC+IXwwy+EXwg//EL4hfDDL4RfCD+tL6S7uxuRSARerxfyt9vtRqlUwtXjdF2H7Cwn9eLiArYIgcX+/j66urpUBY6OjpDNZn+qzNbWFg4ODmiEjORHYBgGmi6k8qPSK+SquKkS6XQaTLedZ3gGR48hTEJKuNz4hTgEP/xw/CyLScgABviFOIUNbKAl4hAWIROY4BfiFCTOmtVn+YU4BTfcKBaL9gmJxWIqCOzo6FCVCAaDWFtbg8fj+alSEhS2c6Q+gpG6ta1mIeFwWAno6elRlVlcXFRlIpGgitSj+Whd21WXW1b12o2maWC5ZckKxdv0W+cJYR1D/jbm4BdSRzaxiSKK/EKcwnM8b0ib+IXUwGR2smHt4RdSA768j1+IU4gj3tC28Av5Q4IIOlfI9vY25ufnsby8rCoZjV4fJKVSqbaI1NNIN2RmVTchsnyysLCA3t5eVUm/34/rAsN2idTruUTSECEul8tcWlqCLJtIL+nr62vbnLphGGaykHS2EJYxZBjDmDamUSgU+IXYQSaTMe/hHt5k3yB6Fm1q3fmFXB0XEcP7k/e2/T6/kCsykkjaWld+IWVeZ17bLoNfSJlHeISz8zNH1JFOiOS9X+ZeQh5oC5wFMJwfdtTFUrOQlZUV1ZCBgcskzd7eHuLxOKS8eqzdOXV5tHM0NWpO4nKV9vz8XJV/85S644RI7nx9fR2dnZ2qUZXlk/7+fkdF6jJQy9Yqs7yahfh8PszNzZmyS8+QUq64oaEhW3Pq8oqE5LplXJhNzyKn5VoqBmq7MWTCmMChftiyKwNtJeQBHtgmQnqmTBg+fQK8Xu3aRVYaIXIiXFmXbTKs7AIikYI1Tur8j5IKHnhQmTk1g8pvDQ4Cfv9Xq2cA/Lcsi2/Zb/jP2prZG0IhIBzO8eTUq6/0fD6P6pnTR2u7q93FK+0V5CE1a1UW9b7qBXlXUq7627cNBIMnCASAUCiHx491ruX3EKztJIRAeZvKTKly/GIcKSP1W98hJ1OSSeXPZiWHIUvqFU5PT1H5/+hoEVbiE0+eaOrEyx6LHaNlZ1mVPPrMzAw2Nq5/g2hnZwfHx5eNrJ59yMlLWZtX8+Kp/hS/6iHV0bWVpMTDh4fqBI6Nlays5RfcuQN8+PBnQpqRdGqakN3dXVQaZ6VzISndm45bXV2FlIkvCfyTHMf9zX/x/+47a1DU1e1gbExXn6ens6qUfWoqo8pwWMeLF9qPYz9/TqnvcvJuWw8ZtKYa5Uj9xhdWUMbkxxljCD/8QviF8MMvhF8IP/xC+IXwwy+EH34h/EL44RfCL4QffiH8QvjhF8IvhB9+IfzwC+EXwg+/EH4h/PAL4RfCD78QfiH88Avhh18IvxB+fsl3T+IO9OMHW7cAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleNegativeYIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAD1ElEQVR4XuXcS0vzQBiGYf+jP8GVW5cqCCriwqW4EF24EleiCIJ4ruBho9YzIiqIooLn8+GNfYKFWmvTfp+mk7kfCLUY0zJXZ5J3JrUqCPhxKVX8JuCD8MMH4YPwwwfhg/DDB+GD8MMH4YPwwwfhhw/CB+GHD8IH4YcPwgfhhw/CB+GHD8IPH4QPwg8fhA/CDx+ED8IPH4QPwg8fJJuNjQ3r6uoy/dzc3Gzv7++Wv8/r66s9PDzY8/OzxfGeXl5eDAtimczNzYUNcH5+bldXV98a4/7+3qanp+3y8vLPG0ofiLOzM8MPWfpUPj4+/tgQy8vLsWAUew/8c0iMIJXG4IM4hsEH+czNzY1p419lOQCinnF3d2f8y14HQFwZpvggjmJUFGR/f7/s/YqBlHM8FZdRGKUezxuQ9fX14PDw0LQNDg6G28HBgbW1tVl3d7fNzMyEv1tcXAz329vbs9HRUdvd3bXs3+Vu2f2iNu2noi9qP70/5JCVTqdte3vbNH2i5319fSrcbXZ21n67Und1mKo4SEdHR9goQ0NDNjw8bLmVuh7f3t6stbXVxsbGLJVKWV1dnTU2Nlp/f/+3xsxCKu3t7QUbe2tryzo7O0OMhoYGGxgYsJ6enoL7jo+Ph9M4mjvTvJr3IOoROzs79vT09KVn5DeKGkMoej4yMmJCqq6uLtpAS0tL9lPP6O3t/XKslpaWgvvq9ysrK6Y5taOjI0P0EM3aRs2m5g8tqhWKndR1vEL1xPX1tV1cXISzxLmvWez1NWRGzavxL3v/4bI3CecMDEgSMbwFSSqGlyA6ZyQVwzsQ9Yw4VhQRIBMTE5aZrggvg09PTwuuqWeq7B/X1JM8TDkHMjk5aaurq3Z7e2tra2tWX19f1pq6LxhO9ZCmpqZgamoq2NzcDCv0UocsnzASfw7JFn2BR0ksiG89I9EgvmIkEsRnjMSBaJbYZ4xEgahnaF0j8DxVScFQz4jjVlI+yGe0cqhqXMXf/Py86ZI2FyOqUueD/FJUmdfW1lpNTU3Y0Lq5QQ2vZdbcE3icd7/ze0gmqtIFoUfNa2kZ9eTkxKIqdT5IjOeMqEqdD1JBDD6IYxh8kJhTylcC+CAx9oxSvhLAB3FgmOKDOIrBB/nj5N8ZqNs2VYdoKTdTi5S9ps4H+c/kfg9ca+oLCwvh88xSrmk5Nz+q1I+Pj/mVepyVerYnaIokgIb/v074IPzwQfgg/PBB+CD88EH4IPzwQfgg/PBB+OGD8EH44YPwQfjhg/BB+OGD8EH44YPwwwfhg/DDB+GD8MMH4YPwwwfhg/DjRj4AuTQugM8hpswAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleNestingElementsInBarsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAB/0lEQVR4XuXbMYrCQACG0ZxKj+Wt1NIbCFpaiI02EVHRlAELAxaTJZHtsmMhZmPeDzLtZh6fgqxJWfrr0hL/CnwQfz6ID+LPB/FB/PkgPog/H8QH8eeD+PNBfBB/PogP4s8H8UH8+SA+iD8fxJ8P4oP480F8EH8+iA/izwfxQfz1AyTLslCd+/0++NfZAZDz+Ryqrdfr0IQ1n887DXW9XsPhcChfve73e+jFW9Y3gBSDQX3psdMHaREkm07ri4+dPohfiF+IX4hfiA/iF+IX4oP4hXx7IcPhs4TI6YO0Wchk8iwhcvogfiF+Ib0o5HK51H/odrsNTQ/bBsjtdgt5npevXo/HI/S+kOVyGYqiCLvdLvxXIdWl5qNRfXmxs+lS/c+QDoL4nyF+IT6IX4hfiA/iF+IX4oP4hfiF+IX4heiFjMfPEiKnD9IiSK/+Ue73S8XVahV8kA6AzGaz+svFxWLxFsg7F+ODfOAtq7qYMknqh4+dPkiLIH4hPSrkHUwf5AOF+CB+IX4hfiF+IX4hfiE+iA/ig/ggDkiaptHfqfsgLYNsNps/f6dePezpdArH45F5VV+0dvoty58P4oP480F8EH8+iA/izwfx54P4IP58EB/Enw/ig/jzQXwQfz6IPx/EB/Hng/gg/nwQH8SfD+KD+PNB/PkgPog/H+Qb9wNAW4BOOD56cQAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePointAspectsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADx0lEQVR4XuWaPUtjQRSG82vEznI7PwohpT/BdQsLS9E1FkaUVbSyE0H0F6hBLRZERQMJWqVQ1kYTxfgBalZFC8X37swNyYqb3EQ2388DQy7cQ7iZ586cOTPxOQ6fWsLH7wK+ED58IXwhfPhC+EL48IXwhfDhC+EL4cMXwocvhC+ED18IXwgfvhC+ED58IXwhfPhC+PCF8IXw4QvhC+HDF8IXwocvhC+ED18IH74QvhA+fCF8IXz4QvhC+PCF8IWUg8vLS9nP+/t7PT09ycLv9ioKiUQiisVi6ujo0N7enlZWVv4RkkqlnKOjI/ez0qRSMs+Ubva6qcm8MQsL0vGxNDIibW2lm7luCCHz8/NaWlpSf3+/Njc3FQ6Hc/6weDxe0ZFjHkO9vdLpqRSNmtb+XeYB5QSDjhYXpZMT99rZ3k43e03KIaUQ8r7/7JseDKabzyclokl99SfV4os5v39GFPryQ2pvT4+C1lbxk3oZhCwvS8lkun28J/P99s2v1Jte80k9kUjo4eFBb29vNTFloZe9Gxsbmp6edjt8bm4uZ1KPRqNVSeo4IX6/3yxStjQxMaHR0VGFQqGSjxCboLNTUw5qfZqq2xzS3S3t7ko9PVJfn3R2JrW0yEiWTJnzt/Nt8/mc7DVfSGmF2KWpXaLmu6+2NrdWcCXwpyxvXl5e9Pr6qvPz82zFzk/qVRSyv7/vdvT6+rp2dnZMXRB0/iepu1WzHRENNCoqKmRgYEDbplIbHx/X9fW1AoHAp0ZIc7OUlWAKOPNl4o+QKuSQu7v0/lI9JeSGFmL3ksLfFvlCysHFxYVsMs8k9mKFuFsd/KReeiYnJ92OXTabTbnu8yv1CguZmZnRnUkK5swjpxBb0J3YEcE/vGqs3V6+kFILeb/twRdSXpLmkMLrfr7p7CPPz881HVcXQq6urtyiMN99m8zNFr0TCPzS2Fhcthi0xWSuZs7knXz3yhlnFx0NI8QeSo14/EnAJnO7NC4mqdu4Ypfa1YhrmBxSaErLYE8eC8U8Pj66MTc3Nyom7vb21jPu1Gw3f+YZ615IoSktgz0Czpw8epGJscvtQnG2RhoeHvaMs0Xt1NSUVldXGUIKTWnvpzZ78lgorrOzU4eHhxocHFShuIODA83OznrGdXV1aW1tTUNDQ8JMWXz4QvhC+PCF8IXw4QvhC+HDF8IXwocvhA9fCF8IH74QvhA+fCF8IXz4QvhC+PCF8OEL4QvhwxfCF8KHL4QvhA9fCF8IH74QvhA+fCF8+EL4QvjwhfCF8OEL4QvhwxdC5g9sF+trm6wBMAAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePopulationUSAIcon	^ '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XcWjA7UAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePopupDecoratorsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAEKElEQVR4XuXcW08aQRwFcL9jP5K+mPTFS3yojbcmXhIfaiqEVGvrHRWwaksJsoAgl6XiSrgKerY7izTeahVYduScxKQvW2bnt/xnZme0R9f5I1N6+LuAH4Q//CD8IPzhB+EH4Q8/CD8If/hB+EH4ww/CH34QfhD+8IPwg/CHH4QfhD/8IPwg/OEH4Q8/CD8If/hBqEHCkQh0AJlkAP7TFPi7U9cLhQJsAQkGg9jb28W3lSXElAACSvhOQ6LRKDweDxUSzs6gxeOQtmT5fD4ukNlZSD2GMIHAqBgi/CAyYBweAltbkH6WRQOyu4tXMe1lAGnHuMEP0i6MzU28qoVhN4PA6wWqVX4QaUA2NiDXSh3XiJ8EkUmoUE4iiJ6EwALS7nGjLSC5zClyWh5qTkfoYBVffP4HK/WdnR3wjxv8JcvaccNYc/CDyIBxfAwkk5bfDz/Ic0Fcro7cCz/IczDa9FqEH6QdGLGY5eMGP8izZ/bXwP5+R++BH+QpEBs22PhB/oXhcNjS9qZBshd5s8GJxCmKl8bGzGWpa1bqYvHXjs2mjoJcFHVkjFV6KnSEdGAVrqO7e+pis/817qlXVBWF5WXb2t1yybq+qqFbShY0DVa9NOQfQ14hBj/IbYxwWIq20oOIb4UsGPQgJobx7ZCpTbQgMmLQgsiKQQki0wBOD2L11PZCjdp7lHT+04LZANeB8qAhsu2pd2Kd4VzftBfEc/ALtWoNEb8XMn9DOrno01ocm7q+ZFmFkc0Cg4OAogDGqy/MzACXxkvWcrnMD2IlRjwOvH8PhELAwkL9h39Q78AKXHT4wACgqlXDUdNFxzeeev5ZVisQqRSqU1MopR7/ncftbWB0FBAlp1IBpqetf+opQETHY3gYSKfNz8DKCjAxARj7MLlcDk5nxSw14gkXHS8QBIYueaQFaQyOODoCxsZELYF56GBxEZib+7ujd7uui6deIHg85ZYHV3oQY9ECjIyYTzhqNVTGx4G1NfP6RmkRs5n7Mxy9y9JxELO03DzhovPL7ybgHnJjaKjusbdneiASiaAx0IqZjk6SlkC8u/Up5Ve3+0GHiT314OxHhHs/YKQ3jaU3b5H4vG54ZNHfn0VfXxYORxaxWNYYYLvnp1Qq2bcOiYT9opI/+KMBjSiKAjtWvK1OJs7Pz9GVJYs/koCIc1pqOolEKv3oea3/vpa4OfMl/o+XXptR69cU88UXX3tmfO5VOV9vd4v3LhWIOKfV+Pf981rPiTjzFf2tQ9defmNapn7N5Pzki68V5df743tTn32cSOGn22meUWum3ZaXLHFeq3Z13XTDaldVPHXmy8rY2W7+MYRpHcIffhB+EP7wg/CD8IcfhB+EP/wg/OEH4QfhDz8IPwh/+EH4QfjDD8IPwh9+EP7wg/CD8IcfhB+EP/wgXZo/l//Z8HRVBGQAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePopupOnCurvesIcon	^ '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'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePrimeNumberSpaceIcon	^ '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11sAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleRandomCurvesIcon	^ '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'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleScatterPlot2Icon	^ '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VgAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleScatterplotWithHighlightingIcon	^ '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'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleSimpleCurve2Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAE4UlEQVR4XuWdS08TURiG0X/gkqU/wB/gzgRI+AdqXBhNGm8bI7Hh1rQUEWgkLlyQsGFhAomRkEDBhAINF8PFGBIXCCEpLChIgF7Tcil963ynjqKW2o6lM/q+yclwyZx853vObb4zc05FJsMvK6mC3wX8QPjFD4QfCL/4gfAD4Rc/EH4g/OIHwg+EX/xA+MUPhB8Iv/iB8APhFz8QfiC/Kx6PY3d3F/JzMBhU152dHfC70yQgHo8HXV1dmJ2dhcPhUCBcLhdaWlp+grK+vp5ZWVmhcebWFvDqVQplBbK0tISamho0Nzejp6dHgVlYWIDb7cb09PRvxmhQqFpOMpmEpccQNiDpdJofCP8six8IPxB+IPxAitbJyQn4gVhIgUCSH4iV9OlTHNEo+GdZVlEsFuNvIVZSVGse/ED4gfADOUuRSIQfCD+QTDb8LleJ2xwfH+cNv/MDKQMQCb/39vZCDFhcXMwbfp+fn6d5yg6Hw+UHoofft7TgvySbzcYffjcTCP8Ywg+EHwg/EGMKhUL8QPiB8APhB8IPhB8I/6D+n7SQDD8Qa7UQfiD8Ywg/EH4g/ED+oEQiAdHR0ZEyIJVKQRI/EJOASHR3cHAQfX19yoDV1VVIygGDKvxuGpCJiQnMzMxgeXlZhdzHxsZU4p9l8T+H8APhB8IPhB8IPxBj4n8NiB8IP5B84n9zkR8IPxB+IP+Qrl+P8wPhn/byA8mpYBB4946/hVhGIyOA1wvzgMgAtrm5CT30zh5+9/limj9MAjI1NQWn05kZHh7OG34PBAKYm5ujAOJwxEpSTkNA5FuQhoYGyJvw2nrHmeF3WcRiaCGfPwMdHSYC4R9DfujNG+D27ahWMcEPxAqqqwtDm+2WrIz8QP5CN27E0dp6XNLy8QMxoA8fgEePonj+PFXysvEDKVI3b6bx+HEI79/jXMrFD6QIDQwAL19GzrU8/EAK0JcvwK1bcVRWnuDjR/ADMUtv3wI2WwrV1Qm8fo2ylIMfyCm9eCEAkqirC+HOnYiWknC7UVb7aYFoUR88fRpS6eHDMJ48CeH+fUCgmGnXfw9EpqhOZ9b5TU3i9Kzz794tTTCQH0hGFoIAlyvraLneu5dERQVw8SLU9cIF4PLlI+X4Bw+i2sMbIOsV/0K3aRjI6c1mztp4RjaFXFtbw1kD5rNngMcD1U+LY3UnX72adbDuZPldnGu3h9RV+nhxsqSODuPdjNh3eHhYMlClyM8wEH2zmVybzuiS8PuVK4lvtTZ9yslpXLqUxLVr/u+pujqbqqr8GiQ//H5/5tfk8/kgIf9c/zOSziM//XCCsgPRN5uZnJxEW1tbTiMODg6wt7dXshootc/q+emnRlhuDCmkSytU+/v72N7e/p6H1EJZrTTy2o3s7yWrm/KxkeQhf5P9v6S72djYgFH7dHv+9viOcwNSSJdWiNrb29HY2Kjul9XHzs5ODA0NQU4h0DdPK0ayv9eItgAu3Yvdblf3C+zx8XH09/cbslMW53R78h3fYSqQQrq0QiQfBXV3d6O2tlb19ZJnfX29NqC3GspT9veSccPr9SqH6TaOjo6qPb+KHZTlXqkwYo90V386vsP0aS+/+IHwA+EXPxB+IPziB8IPhF/8QPjFD4QfCL/4gfAD4Rc/EH4g/OIHwg+EX/xA+HVaXwHyHHqxNmVDtQAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleSimpleCurveIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAD/UlEQVR4XuWdTUsyURTH+3JCWz9JqwxaWL5BuOgL2BdoEYEICYkShRotbOlOAivd+N74fubxDPgw9KjP6IzOuff/BxmY4qLzm3PPyz1z58g08SVJR/iXAB8IvvCB4APBFz4QfCD4wgeCDwRf+EDwgeALHwi+8IHgA8EXPhB8IPjCB4IPZL36/T7x8fPzk/AvpQAgyWTSAtFut6nVav0DZXHerFar1hFFZ2dD8gVIpVKhQCBA5XKZLi4uiLXq/2q1GoT19Ho9MgyDxPsQ3YEMBgO6uhqQMk5dVyAvLwaxVSgXZekGZDQaEQczuRyRkmGvLkCm0ymdnPRJ+TxEdSDZLFlT07qgBR/IgSOnu7spaZWpqwikWDSIoyflEkMdgXQ6nb05bHwgWyga/aHhcOj7d4UHwhD2kU/gA9lSHDWFQj1x3w0SCCd2nOBJvFF2BrIsudfrdep2u8RH6UAmkwklEgPRU+hOQBqNBjWbTeuHcYWTf2gqlVpZfl9Ug0WU3/mmmc1m4gOMnYDM53MKh8P0+vpKsVjMAhKPx0VaCDvtWMxQJvTW2odwTqFaUqolEHbYkYihZMlGOyAcQangKyCAnJ93lS/1awFkPB57sp6ND8QDPT8PiYGYmkhpIFyD8rMyiw/EplV9YPhAfAISj/e0bS1SCgiHs36t5OED+aVcbqRNJKU8EAbx9DSGaEl1BWRZ8V1XevcCCE9Rh2rBURrI5eXlol4UsS5UKBRaecHclt8jkS7cYw47A8nn84vFnoTV/c5g1iVnu1oIr1+YgBLpQ3SPpJQCks0OoZ/GEgWEV/cKhRk+EAlAOJJCyDOUAYLqxEUCOT3t4cOQAgR/mhIGREKDMz4QfL8hD8jt7QAfhhQgHOK+vU3wgUgBomJHoXggy+737+/vjSX430C4CIlUTj8IEHv3O6tUKq3sfudGBP6bvSFB0tNK2gCxd78fHx/T4+Pjyu53tgS2kKVF4OccwnzI9TW+dYgCIvUxMkgg+I5cGBDedQ7/cgsCgj9d4VsIPpBNQHi/KfzLLQQIPgxhQPCnK2FA8B06voXgA9kEBD8pPBCQZcV3097vHx8fnsLwukApbTxPut/X7f3O56LRpvnw8ECFQsH04nN/f296NdY+xisWi/5YiL37fd3e73zu6+vL0ymLx/PyjpY23l59iJMpzamcrlBuOx4vmPFuRm7HY3nx+o69AXEypTmVfYVyMSXQ+/u7tS2UF+MFg0HLijOZjGsg/3t9h69AnExpTmVfoby5uaF0Ov0XttvxeKWTx3MDmOX09R2+h734wgeCDwRf+EDwgeALHwg+EHzhA8EXPhB8IPjCB4IPBF/4QPCB4AsfCD4QfOEDwZddfwAbTfhlYJ+zmQAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleSimpleValuesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEeUlEQVR4XuWdy0srMRTG/evcubkLt/4ZLlwI4srrC6XgRgVRXAiCouLbIkWsIL6QqqAot1gfqFXRatXj7QkdL9zJTMe0M570+2BwwDkk5jf5kpOEsebzE1+SVIPfBPhA8IUPBB8IvvCB4APBFz4QfCD4wgeCDwRf+EDwhQ8EHwi+8IHgA8EXPhB8IPjCB4IP5J9ubm6orq6O+L61tZXm5+dJF/j8/Ex82fqH5/N5sqaHjIyMqMq2tLQQQ9E9c3h4SOfn51YCoY4OysVilMvlyBrL4jfIr8Lck6yCMD1NNDlJlMl81Zt+/6aqGUNsAELpNNHUlAKh/f3gID6QqCyJr5LPPT7iA4nSkgLFCbMta4HwGFfKkgIBEWZbVgKp5CxJmm1ZA8TUkmyzLdFAlCUVQYRazsCAXCANDQ2qcvF4nPr7+6m9vV1bWU4Kw8rU1SypqyuyRpJkWy4gVBA39MvLC42NjRFn5Hz//3MHBwcVzdTDtCSbbMsFhAdKnsG8v7+rCnr1gnItq1KzpGqzrR8bQ+7u7rQ978eACLGtql46sdG28IEIsy18IMJsCx+IMNvCByLMtvCBCLMtFxAnM19cXKREIkFNTU2UzWYpykwd2bZcQJzMfKqQsG1vb6ufusBKZ+r4tuUBhN9650QGL6OgWdZP2xb+GCLMtvCBCLMtfCDCbAsfiDDbwgcizLbwgQizLXwgwmzLBeTp6YnGx8dVJRYWFmh/fz/yPXVk29L2kO7ublWJ5uZmKlzaQJtPv0u2LReQy8tLBSGZTNLKysrX3jqqZUVtW/hjiDDbwgcizLbwgQizLXwgwmwLH4gw28IHIsy28IEIsy0XEM7OnQbnXOTo6Ag6U4/atlxAXl9fKZPJqIuBjI6O0sfHR+in3/FtywNIb28vra+v0/LyMm1ubhJ/PEAXeHx8TA8PD8aVu7q6sjLesa1yy7++vtbGG48hDCSVStHZ2ZnRtbOzY2X8n4IzVKL83d3dygLhMcbvVErJN60oG+PZtsIq3wjI3NwcMRC/5Xk/8dvlTCC+Gx90e8CvISYmJozjWanGxrLi0+m0Z/y3gXB3eyzMNhiI3/K8nzY2Nkou7/spyPaAn3p6eozj2Wp+1daWVX5nZ6dnvFEPicVitLa25rs876cgy/teCro94KW3tzdiIKbxrELcZ7K+3iieDyH29fV5lo+fGJqOASF9AQIfiKGyt7eUGxqi0IHwQevZ2VlVEGfpp6entLq6SviZukdPKY4HoQA5OTlRA3ZbW5sqxMnSdckhaqauhbK0RJRIUCg9ZGtrSw2anK0zCG74mZkZwresElDu74mGhwl/DKkyC8MHIszC8IGEaWHFr7viA7HYwvCBCLMwfCDCZmH4QIRZWI1XY/PiF9/zUrvuGfxMvTwLy8fjFAjI3t7e1366s9TuBQQ/UzfX/cWF9quq2h7i7KczFF5qx2++6IT//0PwgeALHwg+EHzhA8EHgi98IPhA8IUPBB8IvvCB4AsfCD4QfOEDwQeCL3wg+EDwhQ8EWX8BBR3Ll9qys4kAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleSquaredCurveIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACV0lEQVR4XuXcPU8iQRzAYT6kJup3UaiML1/B91qN3wB6Co7QLVDREAoqErT5r9kzuYgzl9sgd8o9v2QSMpnZdXxAizU2ytLvO9XwvwU+iJ8P4oP4+SA+iJ8P4oP4+SA+iJ8P4ueD+CB+PogP4ueD+CB+PogP4ueD+PkgPoifD+KD+PkgPoifD+KD+PkgfjVAiiKi2Vwdp6cRdS6W23t+vv71hsP1945G6++tW+4eufOenKT3HY/TdWdnEQnIxUW6OTeX6/Jys+uurtJ1ublc19fputzcZ7q9rXe93Lq7u/xeH8QH8UF8EB/EB/FBfBAfxAfxQXwQH8QH8UF8EB/EB/FBfBAfxAfxQXwQH8QH8UFokGazLN+Pvb2/D3J/Xz1DXr1v7nl37pv/8JDufXuOvTq3v5/ufXxM1+Wed789K19dVz3v/jh3cFDvvE9P9ffW+quTTYNs+tPwmW5u0nvk5v5VPogP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oPQIO12u/zTODz8Ea1WlO/H8fFz+XFuZ+c56lwvN46Oesk9dndf1r5e3dFqfc19fzd+fUKGw+GXvSs2WVEUW30O/19rfDeQyWQSy+UyxuNxjEajn++u6vW2HGCxWER1hm0/R/W1V2dodDqdmM/n0ev1ot/vR1X1elsOMpvNYjAYxLafYzqdRrfbDf9Hlv87xM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HyQ/7pXlUUAwIdknNYAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleStackingX3Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAO/UlEQVR4XuVc13IbVxL1z/lr/AO2H5ztKvtpvbUPVkm7W2XJa5cli7uKlCiSYiZIEDkDRB5gBjPIOfBgu+8EgEkSTSr5dhVqZkBMwD23u0+fvuAH06n89i7ZB/IPgfyAyG/yAyI/IPKb/IDID4j8Jj8g8gMiv8kPiPyAyG/yAyK/yQ+I/IDIb/IDIj8g8pv8gMgPiPwmPyDyAyK/yQ+I/CY/IPIDIr/JD4j8gMhv8gMiPyDy29sBpNvtgi2bzYKPx+Mx+CX/ML0lQFwuFxYWFvDrr78KEOLxOPh18qRMJsN/k3/0Xjcgy8vL2NjYwFdffYW1tTU8ffpUvM460fYi29izJuOJ/N70tnLISUBKBQ3pZF5+QN4VQP6zuo6QLy4/IG8bkIHeEtvNJRdKRU1+QN42IP1yXWxT3gSqRv0YIC6teAqgaDCJQqcpP3CvC5BOuiK2rXJtGvYnjg30buU0IFvP3dhW5c81rw+QZFlsKzkNyWj62EBva6cH/s4vj+CqKM779Zr83nK1gGRMD8nF86ioxrHB3VILpwb79q2H8Ohl5335icALAFEUBaVSSQxQs9lEsViEruvo9Xo4N4eodXg2fCiWKziaHB373I42A2Tc7ov9jdU9JBoz4FybXvkBOQuQ77//Hvfu3cO3336Lb775RgzS3bt38d1330FVVZys1Hd3d8X+0GjBs3KAQX9wamD350ITf07UK8TEPEbZAXNlcUt+QM4CZH19HR9//DGuXbuGQCAgBikWi+H69etnVuvsIZP+EOPOAAdP9tCstU55Q7CqQet1xH43p5vbThe25/TVBs7zEM9eCPLnkAvmkGrJEBQ29NyHmlZ1BrBbqgkpJaGWEa6ZOWYyGInCUe21sW0BMqy18e+lFfk95KoAGVSaCNcrULwptMs1k/422shEMhh3BygUytizqC+rxlW9joSuEcsy3zsaTfDb9s65gCh5M1QOjba4l/yAvASQo+EYXPyVYnm01Zr5/mERrtUDDGsdtBQDW1bNwVqXYGVqXYQyAVKrhweJsJD89TkPs/dtBsahzS5A5QfkBYBwouYiL5HMoKzq4v0wDWLSl0CXBrDHOcLyhnj4EDg6IoJgIN9umLKL1sD/4kFoZQORQNIZcHs/FbeYHH1uoMoPyEsBYZa0S/nAE0vh0GJiB8tuGFmV8wiqWk2ENJHgCSgOY1ndQG80cmb+43AQa89cCHqimJdXTAJg0m0mDm2tjmG1LUiE/IC8oDD0V1VBY6MVVSR4P1HgHoHRUarTeF4RLGubCsRoKCXCWIfYWKNuMrJKuozdaBx3qFhcXNnBmFibCFl5M6QxqLyt9nsEuIYeed1Ab8oPyIsAybXrIo8kG1URniL7UTFwzaIBjzeK/niEUreNQq4kEnOrUkcpV0ayWUUmnoM/lRbsa2fdg4puAtCzgMjGzHuk6LPZqoE2gdy3Qle8bkAKQLhCn6/W+fUiQNqDvsgjBs1ifvk2/WIWM+vaX/MI3WpADGtAs58Tc5Per5HutavkEC8qCOYL4FwSdUehWdJLPa7AGHSR9iUxavZwoJfQILVAS5cQ2zbrEzsU/qUB4bbt559/Pv3xxx/Fl7158yaeP39+Zk/drtRZv2JA2FjddVOROGp0kaTE7H66J85ttDvQKzUBSI9YVqtoTCPZAphtRSjUcV54HggJpsbXasUUQZd7lDea4YK4fkxToRwqSOybuaYx7GNyNJNq6AAYH5161l2tgPcWEE3T8Mknnwi5ZHFxEdxjf1lP/TCRcypvpqvFMFXwwxGC/jjRX7d4PxBOIhnLgNlSTa1OM9Estv1hQQhChaIIZf7kIYgS4/6WC91sBUXKRzrln1aiBFaNC2oFVQK1SznIVojLFAodaYbUgVGrf1ruf8+k/kvnkEggAXfFDHE8sPYsjaVy2N0zJZhEMCXyxKDaYnqMoCuEB3sHomLP58uCraVTeXQrDaxlqMikAtJLoS5CYalLTGxfV9AlMPtU2bPZoS1a153BblBuaukNRwWw65i7mahcgAR9MdiFHmtbzaFJS4uajr1EEofJHNSyjjABN6JCsGRUEd0KIpbIwkvsjMMO09kw5ZBMSSUdLYGfo17hNXsESjZdFPJLv0zeVTQBGA5N2uzWZ+JlrVABNcngzcx6/dww+yUZOAVI8R3uWF4aEB5opr7CQ2g2s7TOelWbZr2f+h4GhZkqhSnOIUejMVrdHiqJIpRk0SkQWbb3UHW/X8pDLemOt3G44VnO4Y+vvRmMmDS43qS8Y5KJo8EYk94QrJ9xftpzB53BLmRLuJ+LYV7wZLO9qDKnDvwlAJnQQGYo1Ni9cx4YDi88s3MZSvCZjFj4wHKJGPihuQqyZTSRoMq9b62K5DB0sLSPA7Uo8o8tRjKNTkTSSJE38WKKWCJjhsl0ThAEBoRrm8lgSN5RndYVY/pgw+Uk+zYVlrv0bANSFAaW/L9NLeRNK6/YLWd+7r8EIPlMCT360vOLGXj2MdvaCUWxF46JGd61AOGQxds0hTGmtLaHxMmrQms+ZAslsAJsyyrhmiY8huWYUbMLLWPmqgNP2AlpLN+MaUATlLOUXHn6cHUHPgqFpW4LwWRaKAVMJmzhk7ePMqZGlgqnrZUzTZGb3ntAeLB5cdx8Z5BnJFfsK0Rjff4YsqkCmmrNUm3NWRqiEKTHiyKH8PH9XBwZTwLVrAaWU+wQo1Hos+/B3mUoZjhLuiLUiyE5v2bmLp79j1e2kY7nptvrHuFZHqpdAoH4tDboOUqxZ9lkfXd2XGKrEsBtIhIMPj/bqNbBew1IjMIOa1Tbc73zECV4ziHuYg4hb1wk8qZWc0RCG5A+DZIdy6/HDtDv9VEK5zCYU3XtkGa3hu2lqoYnjREBtunymYBQwl9Y3kSENLBUNE0Falc8E9PtAYUzmwR4n3vEdilleghPgsi6X3glg2ZPBtvmafVbAaRaraJcni1A4OMX9dS5HshnlGNUk78EhzAGhUMNx/6uYc7QnjXYnHcqmuGc9/eQOWO9z9xOyBKfa52t8Ca2QjSrm1BiOYdMePI5+DwRNAu6kFq44GwQKysrFWRJ3qkSSGrG/G6ugklImp0OokTJTYY4wqQ7Ey67oyF8c4sx3gogXARub2/D5zNnHh+/qKfOVTrb/MK3wWT28wWesZx87dxhN7HarY6oO+zzfoqYoaRLfx/PDQqHtK6lDHv2TclkfDRBcMsvZnOt1bY6jx2U9SqCRJ2Z/q5Fo4LlRUgCivuTJH6WRFgtZE2avLPlxXgywX4+i7Z1DQY1rc5WXoapYL29cbx5ZofcNwLIysoKPv30U9y4cQOPHj2CfXxWT51BIFBEiDh5QdeJxXFc9Nkshqr0UxI72x+ZyJlflD2IxcuTNUQ8V0CjRF6QMllXkphYjwYrH8kSu1OwE4mhSvmG7+ch9rbq8kLvd+At5NFTqsgl8qgRDQ9EU1iJmPfW6g2WdbDjM4/9ISp4w3FHXRYz78hM/I3XuJbscknd//I1VZxwYdHQXLsxV0XHnP2dc/QmBiRQPb5emI+DpAxww8udpcZYq4kiqccd0r06BJJWrSPqieGZNyA8I7zhx862TwiUnnhq2qZQxK0BJhr/on7+psuPx4WkUJ895SJu3n4s7ueLJgVlD0TMkMYsj9sAPLn8q168s4Xhy4zZ0pGVVOdD2/wCOdcZS05FmKIYfvJvzOJY2+LzWQv7eW8X3Dbm/NS1cpRvzYvHz8zlRezFWcVUAKjAnCaoTaAXKwipJXENPtd+BlYceFmSQs9ZJEmHZaHcYUGo2Bwi+b6NchVtqz3wXgLC2pZdJc97wnzL9jyjCIGT4iAXgwFSBg6pvctM6ufNLXCBx/mpphhOL163Erj9mxUWPkPhFHit2JjY2j6FXC46j6wwZBeTrJmlqfcSp7pm1OqKgrVB1DlAXsHamZHXhIoQOJhpZH6Lvlf6l6fNrx0QTujDegd9Svb+ufBjdw1fZj9F3cc+x7I8E4dOuys8xH0QtuQZGkSrkmcQktGMA4QoAkltTuaKzkLvHGlkqjLrqbSbHXEdbh0YlHuYznN9UqRaxZvLiV6MJxSHJ5xwcokt89zYWEe6rGI/nnz3AbFNocp5dHTxn7wtK8cXcNvrvFjxddNsj0cOTUmEvCUYiDukQ7dqHw49tjoQJM+yQ2CD9TCrzmEger2Z1lWvEo2mKn9itZTX3X6EqabyJWfPwq7FeYz3H9x/joA7Aj+RBO7tFCo6/mwf5o0BsqpkriTu2sTArh9YQGTv43BIeeLU5+dzFYNmt35D+ozK37u9dOzZ+JpMKAZWobhP1T+3Dtxq0cmFJd3gxRwOe9zNZUTPZ0xAuakmOgykhH5mXFDAfGOAXJX5jBLmWVoslBJq8wG9z1T1VBE59xMJ9o76wPSE9X3fjIKHUsfOu3PrkdDDJj2TjBxQwcrgMEPj43/GPASsjtUDP/YoTDE1ZkWa66u7SxsI0HN40hmnCLWX0/4pQLhreNb+vE2oqEomk28EkMFgAL7fKelcnSXwu1THcFK+SJ9j+4yfStiKhMcVPPY3vlcqc5xc8P34tUtd0Xlpf72cFaEsnS2KRhqHw0Pajx3mHNGUvw9/r1cC5IsvvsCXX34Je3vWSel0Grdu3cLq6ur0db/u37+PpaUl5163Hz88dd8/Fh9d+FluL56+zsLCwrmf/+XhvVe6x+9zz7ew+Fjs//SPG/j9tzv0+gP/+Nu16X9v3p4WFeXVAOHfqPNKeK7U+acJ581aw3gzy3D4PufNpqs2e7XNm/B61givJIe8Ski7rNkCJ/9g6KzjqzQ7F7KQah/zfq129cVfu92GPWaK5SEnx/DCgLxKSLus2QLn119/jbOOr8parRZ++OEHPHnyRPznCvtY0O3l5Sv/bnxtHrePPvrIAebkOF4YkFcJaZc1Fjj511z8oPz/V+aPr/I+XK+wms1rzx4+fAhSsMXxWe2Gy5rX68WHH34o/m0J3++zzz4T380ez0vTXvntHdOy5Df5AZEfEPlNfkDkB0T+IZAfEPlNfkDkB0R+kx8Q+QGR3+QHRH5A5Df5AZEfEPlNfkDkN/kBkR8Q+U1+QOQHRH6THxD5AZHf5AdEfkDkN/kBkd/kB0R+QOS3C9v/AekkqIf1iQwpAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleStackingXIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEZ0lEQVR4XuWdSU/jQBCF8+f4KfwFDhxYDnDIhSCO7MsJBEisIgECB9ZLkNhBCA5JhmhYBJFAYSmPu2eAjGwn3Xbb6fZ7kpUQSBH1567qV25MwrLwpZMS+EOADwRf+EDwgeALHwg+EHzhA8EHgi98IPhA8IUPBF/4QPCB4AsfCD4QfOEDQQPy9vZG7+/v/GBfFwoFwh+mBgLZ39+n8/Nzftze3lKpVHIAeXx8tOzv80cUbW5Gc2I6gDQ3N1M6nebHzs4OtbW1uX6Qm5sbmJkzMUH0+Ul0ckKkbQ1BAdLd/QOBgcEH0kB1djoBrK2FCwUfiIf6+twHfmgIH0ikYrVifr72oIcJBR9IlfJ5oo2N+oMdZtrCB/JPW1tiMMIu8PhAbGWzRIeHcgN8dET08aEeCjwQln7KZX8D29uLD0S54Qu6AFBtFmGBVBu+RkLFB+Jh+IKmPXwgig1fEKn0JQ4gT09PlLcX5H/X5XmKCxARw6cDFNcZMjMzw4O3tLS4/hLWdt/d3TWm/S5q+HRIW65Azs7OyB5w6rSTbaVSMbr9Lmv4Gl3gY11D/Bi+IFJhFmMLZHW16Nvwualg0xX5uVQKH4jn7AjyfmKFh1XqZJJfLhR9H5shQcxiLIGMjfkbEFpaIspkOIhG1ZLYAbHXIHRxIT4gfAYsLvLTWodVV+yA1MvhflORrAYH8YFYuRxxhZWKojCLsQIyPv4zAL9Zj4RZc8WpSG6lBwwkvfIZSSoKe4FhNJDqVDQ8TFrWNFmzaBwQPgMWFv5LRf39pLUn6umJERCRVVFQExi2ZMxiwrmOr3xvsK618z1MIDKrIr8mUNda4gAyNTXFN1qz53Z7nR4eHlx3v6tuv/+am5NeFcmawEZLxCw6gJzYA9La2srb7+3t7a7rel2KetBGXtQaGPABxJRV1sEBeZ4sOquegzcWSLUJNEn1zKKRQOwSZ/QWpFoF3kggIyNmA2FXMb3MonFARAqjCZqcLMYDiO4mMKiMAmKKCYQAYpoJjD2QMLb+4wMBM4GxBWKqCYwlENNNoBIg9/f32ux+N90EKgHy1X732v3OWvLsPihurXl8E6gYyPr6+nf73Wv3Oyuw19fXoRfaqHat49cQ/EJuFhBmAi8v8YFoAwTFBBoBhJlAC1jaAYniJmH4QPBNoJlARkfxgWgDZHq6hH87Wgv/bkD4QPCFDwQfCL4UAxHZ/c5uRa7yg7y8vODHcwPS0dHBu7zsudfud/ZaJpOxlpeXKZvNWiqO2dlZS1UsE+Jtb2+LzRDWfu/q6qq5+529ViwWlbbfWTyVZ6Cp8XzVEJGUJqNyuaw03tcVT1Xx7u7ulMZ7fX31jCcNRCSlySqZTCqNV+8PjmSVSqWUxbu6uqLj42PPeNJARFKajHK5HDU1NSmLV33FU0W809NTYpeyVcV7fn6mvb09z3j4//IoLj4EX/hA8IHgCx8IPhD8IcAHgi98IPhA8IUPBB8IvvCB4APBFz4QfCD4wgeCL3wghugPLJi7puVmqhwAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleTwoInteractionsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAD7UlEQVR4XuXcS0sbURyGcT9aN+5d9gu46K4bF4qaeEUEbXcFXbgQ7KItggYkSmK8LFSKsS4kbgzxLhrwjtc3nTN4gpeJTDQmo88LQzKlh8b5deZc/sdU5XL8BClV/EvAB+GHD8IH4YcPwgfhhw/CB+GHD8IH4YcPwg8fhA/CDx+ED8IPH4QPwg8fhA/CDx+EHz4IH4QfPggfhB8+CB+En2CDZLNZXV1dybzf2tpyX/f29sS/nBUCGR8f18LCgnZ3d2UhwuGwWlpaHqCk0+lcKpUqyQfV+rq0sSE+yKPE43E1NDSorq5OsVhMzc3Nmp+fV2trq6anp59cMAeFf+cEqQ/hg3wgECUS4oOUEUSLi9L5Of8O4j+y+CD88EH4IHyQSoGcnJxof39fx8fH2tzcdC+4OT/36KD5IGUA6e7uVmdnpztTj0Qi7gW3549n6nNzc/yr/JYgyWRS1dXV6u/vl1lCaWtrc2fq9px/h/D7ED4IH+SDgehuIMBPUEBSKT5IUECWltzlKz7Ie+pDtLyMXXTkd+ofZaZuS7d2pl6ops4HKdNM3dbQzYTQ/FmhmrrXTN0x5COVeqZuauimvt7e3l50Td0ZZPFBgtqH6G7YxacIYKeukRHxQfijLD4IP3wQPshjEKd7ePDq9hmQ7aGBvUPMGpZZFTHvd37GNDnJH/6WBOTo6EjmyGQyun/+HEjyW9x9NUPcTKhfOztSNssHKQnI4OCgEolEHsGee2A8mKnbR5SdqTvzSj5IKUDMrndTP6+pqVE0GpU9fzKvcGLuEP6FD1gf4nghQM7O5G5XDjwIv2QbJJCZGS2Hf/FBAgPi9DFjX8fyIyz9+8fHqfQd8vv7Oh8hKCDRaFpdXfxRVmBAfnyOiF8hLAPI/Rp6oXr67empvnz6+yKMm5sbXVxcYNq+GsTW0L1q6TZra2v609vrrFlN5oo9JiYmNDo6+u7a2i9SKDuIraGbunpHR4fnhzD/Ww4ODl70AWlt37wP8fNIKxSzRma2F11fX+cPfzPlM7Nao8vLS/fvF9PWbG1yH7O3t/mvDfH7ue0vMJn3r/2qkTcD8fNI88rU1JRCoVDOPDbM+erqqszhp63Z/TI8PKyhoaGi25qtTQMDAzo8PHS/NuT+z+CnbU9Pj2ZnZ9XU1FRU27KB+HmkFbqz6uvrZbYbOSvF7qKl18KlV8wi54wz71lZWXH/bb9t7dam7e1t96itrX12a5NX28bGRvX19bkwfttWZNjLDx+ED8IPH4QPwg8fhA/CDx+EHz4IH4QfPggfhB8+CB+EHz4IH4QfPgg/fBA+CD98ED4IP3wQPgg/fBA+CD98EH74IEHNf4EL0NxGzOIGAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleTwoStackedCurvesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEQUlEQVR4XuWcW0vrQBSF/XM++EP8C+KT1yqWvouXo1al+CBI8X6v1LsvCqK0LwqioiK9CEertitndjWHQmtN2mmaZi0YQkpmmuyveyZ79kybDINfblITvwn4gfCLHwg/EH7xA+EHwi9+IPxA+MUPhB8Iv/iB8IsfCD8QfvED4QfCL34g/ED4xQ+EHwi/+IHwix8IPxB+8QPhB8IvfiD8QPjlHSC3t7f4/PzMFzm/u7sDv9nrCKS3txfxeDxfHh4e8Pj4WAQkmUwasVgsf6y13t/f8XR9DUog4hXd3d1YX1/Pl8PDQ3R0dJQ0xrVDRsL8PPjHEAtyDMjgID8QtwDBygr437LcBGRoiB+IW4BgcxP8b1luAjI6yg/ELUCwswP+OMRNQIJBfiCm7u/v8fLyglwuBzNydxIIdnfBH6kXaHh4GIXH0RJ9uUToKmisSaSO6Wl+IKZkmqSlpQVdXV0Ih8PY39+Hz+dzzENwcNBw82aeHkMwM8MPxC1A/p6eam0vlUqBH0g1BgyFtLYXCvEDqbyrOjrSajzVHPi7LBeNHao5fiAVw9jb02o89WII/kG9GiDaxw6PAfn4+EA6nc4XOf8pp64DCKJRrcZTzcFzr70nJycqWJ5W83s7ZXPqOiJ1TE5qNeDUlAeBtLa2Ymtrq+Y5dUQiWo2nmgN/YFgNkLExrQYcH+cHUrEBdGcDVXN1m3LxBhDN2UDVHD+QSoHoXkmyuoq6Tkg2PpCREa0GVM3xA6kUSHJuDm9vb9oMuLiY0NoeHRB8ZyF1KJOBzLrUPX9ScyASoZt59J/y6ZUA0b1GNxiEK5JZjnjInOpa5NjW1lbyoSuJ1HV6Rz0i8roCicViKkVxlF8JL9sBioyrdHV1JQc47R0ym/v6SgZE9xii0zvW1uCqvHvDAdHpHT4fXLcIovGAaPKO5WW4ckVKQwHR5R2pFNTMMz+Q6oFo8I6zsyzC4STnHkOdQOx6x1f8A/T3A2dnQCAA5HLg37CjDcgv3qEyxRgYAM7PvyDc3KSNRpQjQMy0bbk96hKrWPUOiRvE+EtLT/D7M7i8tP7Lz2azyKh5ErvP8Kq+1BNAZKG1BITfETkSiUTRg8lnGxsbxoqaSo9EIkZhubi4MOJ/Fo1AIIrm5ghmZyP/r1lYWJB6RXXKFble6tmpI0VmEjwBZHt7G319fflIvbOzs2Q0Lp/JPhKrkbqp5+dn2792uV7q2X0OuT+aMcRKl/aTgUqtYiknc+OQnXrmfTnxtyB1B2KlSyslcwNQYf3fNDExAVnFbqeO3+9XQ9i87ftrWCBWurRSHiUbgY6Pj9HT04OoxQVy4lVSzO+0Ukfabm9vt3V/nnjt5Rc/EH4g/OIHwg+EX/xA+IHwix8IPxB+8QPhFz8QfiD84gfCD4Rf/ED4gfCLHwg/EH7xA+EXPxB+IPziB8IPhF/8QPiB8IsfCD8Qfjmtf+Fp+dApOMdFAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampledoubleCurvesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAErklEQVR4XuWc20sqURTG+2d76qGnXnqoFIrEJ4kkrOhiIKQIUUnTdMPqxSAqKCroQkfnona/39Y+rQ0TdjBRjzrjfB8srJzRcX6z117fmm0tQuDLSWrBPwX4QPCFDwQfCL7wgeADwRc+EHwg+MIHgg8EX/hA8IUPBB8IvvCB4APBFz4QfCD4wgeCDwRf+EDwhQ8EHwi+8IHgA8EXPhB8IPhyLpC3tzd6f3+XkclkiP9mmiZx8M/Wc/intkFAUqkUHR0dybi+vqb29nbyeDzU09MjH63nrO01TSMOlBN6d3dHj4+P1DAgra2ttLi4KKO7u5tWVlaot7eXvF4vJZPJ7+es7Z+enogDAcbz87Pw5D3i9fWV8OcQm/X5+UkT+oQcIfiTugOkmAqdGWf4VZYTpBkaxc044Ze9DtD9/T2NG+OiVpUlPpD/m8TJn/OL/6mq8IHUcBKfycwILv3xnbpDJnFN1+w3hre3t5ROpymXy0l/wW690J1bjt3NOjVOhWqq5AinzorH49TX10d7e3uyZWK5c8ut/6hAXObUs9kszWXmZMpyDJDDw0MaHh6mhYUF6urq+nbnPp9PuvbCbd3k1Dk7BM2g7OfV6z3w55Ay9XVRybYIt0fqKXwg5cGoeXmLD6RKcXoa18fFzc1NQ9IuPpAS4spR/aOKy8vLhs2B+EB+0cfHB81mZkWjK0R8IL+MDAmjDsYPH0gVIyORTtgCoyogfDes8B66m5w6f4b59LxtMKoCEo1GpQlkV97W1uYap87VlBwZNh9rxUAODg6os7NT3kNfW1tzhVNn0zetTTtidMPPIey8fTlfzdvo+ECqEPemvHmvvOvnlGOCBaLrOg2ZQ3XvTeEDKUOb2U2aTc/WtWuLD6SCslbNqo4tMmCAPDw80IA5IAzDcHTFBwHky1uIiBZpSPscH0jpkpaiWpQUQ2maFfkVA9nf36dEIkHBYJC4bNza2qL19XVpEgOBAA0ODjrCqfO9b3/WL3gxRjNdRFU59aWlJbnAob+/n1ZXV0lVVVIUhTo6OigUCtnq1K1REdNj9PLy0nR9NdekLF4FwnNFIBsQ+Xy+aRucrgDCd/RCZkikjFTTf3urqYFw/4kXOnOKaoYKyrVArq6uZNsjZIQc1YeCAsKpiOcGTk1hLUyNWgWCD6TIaIhpMQrrYTlHuCU1NQ0QHglfc4NQ0gpF9IgYMUaIoQgQtThhBDCAZDpJXLLyJL1xsSEh1GtBs2uB7OzsEDftijl0SxcXFxQO6z9iakoXHBNTGTH5FeEpTf7+73alYnJSKxljYzpFo5qwI/gCswUIt0x2d3dlG2V0dJR+a2Fw64Sv+ErDartUu2+1J4b3s2NfVzl1/JRVo5RWTNzA5FUsJycnVPg65exb2PSsdF8W9+oqfV/rf77w9vxFJv6shcfgGCDlpLRi4gbl+fk5LS8v0/Hxsewml9ugLGx6VrovXzi8FKjS9+UmJgdvz6/Bx7+9vS2PAT9l4acsfOEDwQeCL3wg+EDwhQ8EX/hA8IHgCx8IPhB84QPBB4IvfCD4QPCFDwRf+EDwgeALHwg+EHzhA8EHgi98IPhA8IUPBF/4QPCB4KtM/QXWS8k76Tz9LAAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplesinAndCosIcon	^ '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'</body></methods><methods><class-id>Roassal2.RTGrapherExample</class-id> <category>sources</category><body package="Roassal2-Builder-Grapher-Examples-Examples">dataEbola^ 'FID,the_geom,Year,YearEnd,Country,latitude,longitude,Type,cases,deaths,PerFatalit,DescriptioEbola2.1,POINT (-9.696645 9.945587),2014-01-01T00:00:00,2015-01-01T00:00:00,Guinea,9.945587,-9.696645,ZEBOV,528,337,64%,"Outbreak is currently ongoing in southeastern Guinea, including the capital?Conakry?and the neighbour countries?Sierra Leone?andLiberia"Ebola2.2,POINT (32.290275 1.373333),2012-01-01T00:00:00,-0002-12-29T00:00:00,Uganda,1.373333,32.290275,SEBOV,24,17,71%,Outbreak occurred in the?Kibaale District.[34]Ebola2.3,POINT (15.827659 -0.228021),2012-01-01T00:00:00,-0002-12-29T00:00:00,Republic of Congo,-0.228021,15.827659,ZEBOV,77,36,,Ebola2.4,POINT (32.290275 1.373333),2011-01-01T00:00:00,-0002-12-29T00:00:00,Uganda,1.373333,32.290275,SEBOV,1,1,,Ebola2.5,POINT (121.774017 12.879721),2008-01-01T00:00:00,-0002-12-29T00:00:00,Philippines,12.879721,121.774017,REBOV,0,0,0%,Outbreak in the?Philippines?and the first known occurrence of REBOV in pigs. Strain closely similar to earlier strains. Six workers from the pig farm and slaughterhouse developed antibodies but did not become sick.[31][32]Ebola2.6,POINT (21.758664 -4.038333),2008-01-01T00:00:00,2009-01-01T00:00:00,Democratic Republic of Congo,-4.038333,21.758664,ZEBOV,32,14,45%,Outbreak occurred in the Mweka and Luebo health zones of the Province of?Kasai-Occidental.[33]Ebola2.7,POINT (21.758664 -4.038333),2007-01-01T00:00:00,-0002-12-29T00:00:00,Democratic Republic of Congo,-4.038333,21.758664,ZEBOV,264,187,71%,Outbreak occurred in?Kasai-Occidental Province. The outbreak was declared over on November 20. Last confirmed case on October 4 and last death on October 10.[30]Ebola2.8,POINT (32.290275 1.373333),2007-01-01T00:00:00,2008-01-01T00:00:00,Uganda,1.373333,32.290275,Bundibugyo ebolavirus,149,37,25%,Outbreak occurred in?Bundibugyo District?in western Uganda. First reported occurrence of a new strain.[2][3][4]Ebola2.9,POINT (30.217636 12.862807),2004-01-01T00:00:00,-0002-12-29T00:00:00,Sudan,12.862807,30.217636,SEBOV,17,7,41%,"Outbreak occurred in Yambio county in?Western Equatoria?of southern Sudan. This outbreak was concurrent with an outbreak of measles in the same area, and several suspected EHF cases were later reclassified as measles cases.[29]"Ebola2.10,POINT (15.827659 -0.228021),2003-01-01T00:00:00,-0002-12-29T00:00:00,Republic of Congo,-0.228021,15.827659,ZEBOV,35,29,83%,"Outbreak occurred in Mbomo and Mbandza villages located in Mbomo district, Cuvette Ouest D?partement.[28]"Ebola2.11,POINT (15.827659 -0.228021),2002-01-01T00:00:00,2003-01-01T00:00:00,Republic of Congo,-0.228021,15.827659,ZEBOV,143,128,90%,Outbreak occurred in the districts of Mbomo and K?ll? in Cuvette Ouest D?partement.[27]Ebola2.12,POINT (11.609444 -0.803689),2001-01-01T00:00:00,2002-01-01T00:00:00,Gabon,-0.803689,11.609444,ZEBOV,65,53,82%,Outbreak occurred over the border of Gabon and the Republic of the Congo.[26]Ebola2.13,POINT (15.827659 -0.228021),2001-01-01T00:00:00,2002-01-01T00:00:00,Republic of Congo,-0.228021,15.827659,ZEBOV,57,43,75%,Outbreak occurred over the border of Gabon and the Republic of the Congo. This was the first time that Ebola hemorrhagic fever was reported in the Republic of the Congo.[26]Ebola2.14,POINT (32.290275 1.373333),2000-01-01T00:00:00,2001-01-01T00:00:00,Uganda,1.373333,32.290275,SEBOV,425,224,53%,"Occurred in Gulu, Masindi, and Mbarara districts of Uganda. The three most important risks associated with Ebola virus infection were attending funerals of Ebola hemorrhagic fever case-patients, having contact with case-patients in one''s family, and prov"Ebola2.15,POINT (11.609444 -0.803689),1996-01-01T00:00:00,-0002-12-29T00:00:00,Gabon,-0.803689,11.609444,ZEBOV,37,21,57%,Occurred in Mayibout area. A chimpanzee found dead in the forest was eaten by people hunting for food. Nineteen people who were involved in the butchery of the animal became ill; other cases occurred in family members.[19]Ebola2.16,POINT (11.609444 -0.803689),1996-01-01T00:00:00,1997-01-01T00:00:00,Gabon,-0.803689,11.609444,ZEBOV,60,45,75%,Occurred in Boou? area with transport of patients to Libreville. Index case-patient was a hunter who lived in a forest camp. Disease was spread by close contact with infected persons. A dead chimpanzee found in the forest at the time was determined to beEbola2.17,POINT (22.937506 -30.559482),1996-01-01T00:00:00,-0002-12-29T00:00:00,South Africa,-30.559482,22.937506,ZEBOV,2,1,50%,"A medical professional traveled from Gabon to Johannesburg, South Africa, after having treated Ebola virus-infected patients and thus having been exposed to the virus. He was hospitalized, and a nurse who took care of him became infected and died.[22]"Ebola2.18,POINT (-95.712891 37.09024),1996-01-01T00:00:00,-0002-12-29T00:00:00,USA,37.09024,-95.712891,REBOV,0,0,0%,REBOV was introduced into a quarantine facility in Texas by monkeys imported from the Philippines. No human infections were identified.[23]Ebola2.19,POINT (121.774017 12.879721),1996-01-01T00:00:00,-0002-12-29T00:00:00,Philippines,12.879721,121.774017,REBOV,0,0,0%,REBOV was identified in a monkey export facility in the Philippines. No human infections were identified.[24]Ebola2.20,POINT (21.758664 -4.038333),1995-01-01T00:00:00,-0002-12-29T00:00:00,Democratic Republic of Congo (formerly Zaire),-4.038333,21.758664,ZEBOV,315,250,79%,Occurred in Kikwit and surrounding area. Traced to index case-patient who worked in forest adjoining the city. Epidemic spread through families and hospitals.[21]Ebola2.21,POINT (11.609444 -0.803689),1994-01-01T00:00:00,-0002-12-29T00:00:00,Gabon,-0.803689,11.609444,ZEBOV,52,31,60%,Occurred in M?kouka and other gold-mining camps deep in the rain forest. Initially thought to be yellow fever; identified as Ebola hemorrhagic fever in 1995.[19]Ebola2.22,POINT (-5.54708 7.539989),1994-01-01T00:00:00,-0002-12-29T00:00:00,Ivory Coast,7.539989,-5.54708,CIEBOV,1,0,0%,Scientist became ill after conducting an necropsy on a wild chimpanzee in the Tai Forest. The patient was treated in Switzerland.[20]Ebola2.23,POINT (12.56738 41.87194),1992-01-01T00:00:00,-0002-12-29T00:00:00,Italy,41.87194,12.56738,REBOV,0,0,0%,REBOV was introduced into quarantine facilities in Siena by monkeys imported from the same export facility in the Philippines that was involved in the episodes in the United States. No humans were infected.[18]Ebola2.24,POINT (-95.712891 37.09024),1990-01-01T00:00:00,-0002-12-29T00:00:00,USA,37.09024,-95.712891,REBOV,0,0,0%,REBOV was introduced once again into quarantine facilities in Virginia and Texas by monkeys imported from the Philippines. Four humans developed antibodies but did not get sick.[15]Ebola2.25,POINT (-95.712891 37.09024),1989-01-01T00:00:00,-0002-12-29T00:00:00,USA,37.09024,-95.712891,REBOV,0,0,0%,REBOV was introduced into quarantine facilities in Virginia and Pennsylvania by monkeys imported from the Philippines.[14]Ebola2.26,POINT (121.774017 12.879721),1989-01-01T00:00:00,1990-01-01T00:00:00,Philippines,12.879721,121.774017,REBOV,0,0,0%,High mortality among cynomolgus macaques in a primate facility responsible for exporting animals in the USA.[16]?Three workers in the animal facility developed antibodies but did not get sick.[17]Ebola2.27,POINT (30.217636 12.862807),1979-01-01T00:00:00,-0002-12-29T00:00:00,Sudan,12.862807,30.217636,SEBOV,34,22,65%,"Occurred in Nzara, Maridi. Recurrent outbreak at the same site as the 1976 Sudan epidemic.[13]"Ebola2.28,POINT (21.758664 -4.038333),1977-01-01T00:00:00,-0002-12-29T00:00:00,Zaire,-4.038333,21.758664,ZEBOV,1,1,100%,Noted retroactively in the village of Tandala.[12]Ebola2.29,POINT (21.758664 -4.038333),1976-01-01T00:00:00,-0002-12-29T00:00:00,Zaire,-4.038333,21.758664,ZEBOV,318,280,88%,Occurred in Yambuku and surrounding area. Disease was spread by close personal contact and by use of contaminated needles and syringes in hospitals/clinics. This outbreak was the first recognition of the disease.[10]Ebola2.30,POINT (30.217636 12.862807),1976-01-01T00:00:00,-0002-12-29T00:00:00,Sudan,12.862807,30.217636,SEBOV,284,151,53%,"Occurred in Nzara, Maridi and the surrounding area. Disease was spread mainly through close personal contact within hospitals. Many medical care personnel were infected.[11]"'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleAdjustedAxes| c b1 ds1 b2 ds2 b3 ds3 |c := RTComposer new.c gap: 35."-------"b1 := RTGrapher new.b1 view: c view.ds1 := RTData new.ds1 dotShape color: Color red.ds1 points: #(3 -3).ds1 connectColor: Color red.b1 add: ds1.b1 build.c group: #regular."-------"b2 := RTGrapher new.b2 view: c view.b2 minX: 1.b2 maxX: 3.b2 withoutOrigin.ds2 := RTData new.ds2 dotShape color: Color red.ds2 points: #(3 -3).ds2 connectColor: Color red.b2 add: ds2.b2 build.c group: #withoutOrigin."-------"b3 := RTGrapher new.b3 view: c view.b3 yOffset: 30.ds3 := RTData new.ds3 dotShape color: Color red.ds3 points: #(3 -3).ds3 connectColor: Color red.b3 add: ds3.b3 build.c group: #offset."-------"c move: #withoutOrigin below: #regular.c move: #offset below: #withoutOrigin.c nameGroup: #regular as: 'Regular'.c nameGroup: #withoutOrigin as: '#Without origin (0@0)'.c nameGroup: #offset as: 'Y axis offset'.^ c view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleColoredAndInteractionLabel	| b |	b := RTDoubleBarBuilder new.	b interaction action: #inspect.	b shape label 		text: [ :cls | '&lt;', cls name, '&gt;' ];		if: [ :cls | cls name endsWith: 'Shape' ] fillColor: Color green;		if: [ :cls | cls name endsWith: 'Box' ] fillColor: Color red.		b points: RTShape withAllSubclasses.	b bottomValue: #numberOfMethods.	b topValue: #numberOfVariables.	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDoubleBar| b |	b := RTDoubleBarBuilder new.	b points: RTShape withAllSubclasses.	b bottomValue: #numberOfMethods.	b topValue: #numberOfVariables.	b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDoubleYAXis	| b ds |	b := RTDoubleGrapher new.	b extent: 300 @ 200.		ds := RTData new.	ds points: #(4 3 2 2).	ds barShape width: 40.	b add: ds.		ds := RTData new.	ds points: (10 to: 13).	ds dotShape color: Color blue.	ds connectColor: Color red.	b addRight: ds.		b axisX noLabel.	b axisYRight color: Color red.	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDynamicStacked	| b |	b := RTDynamicStackedGrapher new.	b numberOfBars: 10.	b		minY: -200;		maxY: 200.	b y: #yourself.	b barShape color: (Color red alpha: 0.3).	b view addMenu: '+ 1' callback: [ b add: 400 atRandom - 200 ].	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleEbola	"Preparing the data"	| tab data b ds |	tab := RTTabTable new input: (RTGrapherExample new dataEbola readStream) contents usingDelimiter: $,.	tab removeFirstRow.	tab replaceEmptyValuesWith: '0' inColumns: #(10 11).	tab convertColumnsAsInteger: #(10 11).	tab convertColumnsAsDateAndTime: #(3 4).	data := tab values reversed.	"Charting the data"	b := RTGrapher new.	b extent: 400 @ 200.	ds := RTData new.	ds interaction fixedPopupText: [ :row | row value at: 12 ]. 	ds dotShape ellipse 		color: (Color blue alpha: 0.3);		size: [ :row  | (row at: 11) / 5 ].	ds points: data.	ds connectColor: Color blue.	ds y: [ :r | r at: 10 ].	ds highlightIf: [ :row | (row at: 10) &gt; 100 ] using: [ :row | row third year ].	b add: ds. 	b axisX noLabel; numberOfTicks: tab values size.	b axisY noDecimal.	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleFunctions	| b ds |	b := RTGrapher new.	b extent: 300 @ 300.		(Array with: Color red with: Color blue with: Color green with: Color yellow) doWithIndex: [ :color :i |		ds := RTData new.		ds label: 'x^', i asString.		ds dotShape ellipse size: 0.		ds points: (0.0 to: 10.0 by: 0.1).		ds connectColor: color.		ds x: #yourself.		ds y: [ :v | v raisedTo: i ].		b add: ds.	].		b axisXWithNumberOfTicks: 3.	b axisYWithNumberOfTicks: 4.b legend right.^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleHighlightDataset| b data colors ds |b := RTGrapher new.data := Array	with: (Array with: 0-&gt;0 with: 1-&gt;1 with: 2-&gt;3 with: 3-&gt;5 with: 4-&gt;7)	with: (Array with: 0-&gt;0 with: 1-&gt;2 with: 2-&gt;4 with: 3-&gt;16 with: 4-&gt;32).colors := Array with: Color blue with: Color red.data withIndexDo: [ :each :i | |c|	c := colors at: i.	ds := RTData new.	ds label: c.	ds connectColor: (c alpha: 0.5).	ds dotShape ellipse color: (c alpha: 0.5).	ds points: each.	ds x: #key.	ds y: #value.		ds interaction noInteractions.	ds interaction highlightDataset: c.	b add: ds.].b legend below.b legend addText: 'Hover over one of the lines or legend entries'.^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleLabelsInBar| b ds barElements someElements |b := RTGrapher new.ds := RTData new.ds barShape.barElements := ds points: #(1 2 3 2 1).b add: ds.b axisX noTick.b build.ds barShape createdElements do: [ :back |	someElements := (RTLabel new color: Color red) elementsOn: (1 to: back model * 3).	b view addAll: someElements.	RTFlowLayout new maxWidth: back trachelShape width; on: someElements.	someElements translateTo: back position.	(RTConstraint  on: someElements background: back)		top ; center ; inner; padding: 5; move.].^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleLinesAndBars	| b d |	b := RTGrapher new.	d := RTData new.	d points: #(3 4 3.5).	d barShape.	b add: d.		d := RTData new.	d points: #(3 4 3.5).	d connectColor: Color red.	b add: d.	b maxX: 5.	b axisX		numberOfLabels: 5;		noDecimal.	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMethodSize	| b classes normalizer |	b := RTGrapher new.	b extent: 400 @ 200.		classes := RTShape withAllSubclasses.	normalizer := RTMultiLinearColorForIdentity new objects: classes.	classes do: [ :c |		| ds data |		data := ((c rtmethods reverseSortedAs: #numberOfLinesOfCode ) collect: [ :m | m numberOfLinesOfCode ]).		ds := RTData new.		ds dotShape ellipse size: 0.		ds points: data.		ds connectColor: (normalizer rtValue: c).		ds y: #yourself.		b add: ds.	].	b axisXWithNumberOfTicks: 3.	b axisYWithNumberOfTicks: 4.	b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMethodSize2	| b classes normalizer |	b := RTGrapher new.	b extent: 400 @ 200.		classes := RTShape withAllSubclasses.	normalizer := RTMultiLinearColorForIdentity new objects: classes.	classes do: [ :c |		| data ds |		ds := RTData new.		data := (c rtmethods reverseSortedAs: #numberOfLinesOfCode ).				ds interaction popup.		ds dotShape rectangle color: (normalizer rtValue: c).		ds points: data.		ds connectColor: (normalizer rtValue: c).		ds y: #numberOfLinesOfCode.		b add: ds.	].	b axisX.	b axisY.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMethods	| methods trachelMethods b ds |	methods := Collection withAllSubclasses flatCollect: #rtmethods.	trachelMethods := TRObject withAllSubclasses flatCollect: #rtmethods.	b := RTGrapher new.	b extent: 200 @ 200.	"Data set 1"	ds := RTData new.	ds interaction popup.	ds dotShape circle color: (Color red alpha: 0.3).	ds points: methods.	ds x: #numberOfLinesOfCode.	ds y: [ :m | m sourceCode size ].	b add: ds.	"Data set 2"	ds := RTData new.	ds interaction popup.	ds dotShape circle color: (Color blue alpha: 0.3).	ds points: trachelMethods.	ds x: #numberOfLinesOfCode.	ds y: [ :m | m sourceCode size ].	b add: ds.	b axisX		withThousandsSeparator;		title: 'LOC'.	b axisY		noDecimal;		title: 'Size'.	b build.	^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMultiDataPoint| b d |b := RTGrapher new.d := RTHorizontalMultipleData new.d barShape color: Color blue.d points: #( #('hello' 1 2 1) #('world' 2 4 2) #('bonjour' 3 5 4) #('Gutten Morgen' -1 4 -5)).d addMetric: #second.d addMetric: #third.d addMetric: #fourth."d barChartWithBarCenteredTitle: #first."d barChartWithBarTitle: #first rotation: -30.b add: d.^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMultiGrapher|g g1 g2 ds1 ds2|g := RTMultiGrapher new.g1 := RTGrapher new.ds1 := RTData new.ds1 label: 'Red'.ds1 dotShape color: Color red.ds1 connectColor: Color red.ds1 points: ((1 to: 10) collect: [ :each | 20 atRandom ]).ds1 interaction highlightDataset: Color black.g1 add: ds1.g2 := RTGrapher new.ds2 := RTData new.ds2 label: 'Blue'.ds2 dotShape color: Color blue.ds2 connectColor: Color blue.ds2 points: ((1 to: 10) collect: [ :each | 1000 atRandom ]).ds2 interaction highlightDataset: Color purple.g2 add: ds2.g1 axisY	title: 'y 1';	color: Color red.	g2 axisY	title: 'y 2';	color: Color blue.g add: g1.g add: g2.g legend.^ g</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMultipleCurvesStacking| b points1 points2 minY maxY ds1 ds2 |points1 := TRShape withAllSubclasses sortedAs: #numberOfVariables.points2 := TRShape withAllSubclasses sortedAs: #numberOfMethods.minY := 0.maxY := (points1 maxValue: #numberOfVariables) max: (points2 maxValue: #numberOfMethods).b := RTGrapher new.b extent: 300 @ 200.ds1 := RTData new.ds1 points: points1.ds1 connectColor: Color blue.ds1 y: #numberOfVariables" min: minY max: maxY".b add: ds1.ds2 := RTData new.ds2 points: points2.ds2 connectColor: Color green.ds2 y: #numberOfMethods" min: minY max: maxY".b add: ds2.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleNegativeY| b ds |b := RTGrapher new.b extent: 200 @ 200.ds := RTData new.ds points: (-3 to: 6).ds y: [ :v | v - 4 ].ds x: #yourself.ds connect.b add: ds.b axisXWithNumberOfTicks: 4.b axisYWithNumberOfTicks: 4.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleNestingElementsInBars| b ds back barElements someElements |b := RTGrapher new.ds := RTData new.ds barShape.barElements := ds points: #(1 2 3).b add: ds.b axisX noTick.b build.#(1 2 3) do: [ :value |	back := b view elementFromModel: value.	someElements := (RTBox new color: Color red) elementsOn: (1 to: back model * 20).	b view addAll: someElements.	RTFlowLayout new maxWidth: back trachelShape width; on: someElements.	someElements translateTo: back position.	(RTConstraint  on: someElements background: back)		top ; center ; inner; padding: 5; move.].^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleOccurrencesInBag	| b ds v |	b := Bag new.	b add: 1 withOccurrences: 5.	b add: 3 withOccurrences: 4.	b add: 6.	v := RTGrapher new.	ds:=RTData new.	ds interaction popup.	ds points: b valuesAndCounts keys.	ds y:[:c|b valuesAndCounts at: c].	ds x: [ :c | c ].	ds barShape color: Color red.	v add: ds.	v axisX numberOfLabels: 6.	^ v</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleOccurrencesInBagIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACc0lEQVR4XuXcy2rqUBQGYN+4j+ArCb6BE0EFLwMFRZ2IN7zNVNBtu4UOTm1MkFNN+/2wKehqQvMlO64msXC5+MlTCv4m8EH8+CA+iB8fxAfx44P4IH58EB/Ejw/ixwfxQfz4ID6IHx/EB/Hjg/ggfnwQPz6ID+LHB/FB/PggPoif/IMsFotwOBzC8XgM/mZ8Mcj5fA6DwSD0+/3Q6/X+AQkfGQ6HN0jx9UuxeEkboVgMPsiDKEnvjUajW5BYX/hYXcoIhYIP8r/jg/ggPogP4oP4ID7ILwLZbreJfYgP8mSQ+XweqtVqYh/SbrefA5Khr7kOf8p60hGSYXnX4YP4ID6ID+KD+CA+iA/yK0DiR9t710N8kBccIePxOLEP6XQ6PsizQXJxPcQH8c8hPogP4oP4ID6ID/Ln+pDlcun3IXk6QuI1Eb8P8acsH8QH8UF8EB/EB/FBfJA/DrLb7fw+JE8gsdf4rg/5fO9Pg/zg/WD+lPXQVvu59fogPogP4oP4ID6ID6KDxH+/s31I3kCm0+n1Rrl7fch6vb4ZXz+nb97ewnfPqX/9vfjc+6PLiyPr8h5d7zZhvU89Qk6nU+KevNlsMu3lr6qLT3+9ou5l5xA/OQJpNBrXvaVer9/da7rdbqa6+BUeWeri9JmlbjKZZKqLU3KWungujXdxfv7duQOpVCphv9+H+PNeXalUylRXLpcz1dVqtUx1zWYzzGaz1Lp47/JqtUqtiztCq9VKrfOnLH/K8uOD+CB+fBAfxI8P4scH8UH8+CA+iB8fxAfx44P4IH58ED8+iA/ixwfxQfz4ID6IHx/EB/Hjg/jxQXwQPyl5B0m1OSYuUujxAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePointAspects	| b ds |	b := RTGrapher new.	ds := RTData new.	ds dotShape rectangle color: Color red.	ds points: (RTShape withAllSubclasses sortedAs: #ageInDays).	ds y: [ :c | c ageInDays ].	b add: ds.	ds := RTData new.	ds dotShape circle color: Color blue.	ds points: (TRShape withAllSubclasses sortedAs: #ageInDays).	ds y: [ :c | c ageInDays ].	b add: ds.	b axisX noDecimal; title: 'Classes'.	b axisY noDecimal; title: 'Age in days'.	b build.	^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePopupDecorators| b ds1 ds2 |b := RTGrapher new.ds1 := RTData new.ds1 connectColor: Color blue.ds1 points: (Array with: 0-&gt;0 with: 1-&gt;1 with: 2-&gt;3 with: 3-&gt;5 with: 4-&gt;7).ds1 x: #key.ds1 y: #value.ds2 := RTData new.ds2 connectColor: Color red.ds2 points: (Array with: 0-&gt;0 with: 1-&gt;2 with: 2-&gt;4 with: 3-&gt;16 with: 4-&gt;32).ds2 x: #key.ds2 y: #value.b add: ds1.b add: ds2.b addDecorator: (RTAverageDecorator new withLabel).ds1 interaction noInteractions.ds1 interaction popupDecorator: [ :model |	RTAverageDecorator new		lineColor: Color blue;		withLabel: [ :num | 'average ', num asFloat asString ]].ds2 interaction noInteractions.ds2 interaction popupDecorator: [ :model |	RTAverageDecorator new		lineColor: Color red;		withLabel: [ :num | 'average ', num asFloat asString ];		dataset: ds2].b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePopupOnCurves	| b ds |	b := RTGrapher new.	b extent: 300 @ 200.	ds := RTData new.	ds points: (0 to: 100 by: 0.1).	ds y: [ :x | (0.1 * x) sin  ].	ds noDot.	ds interaction popupText: 'sinus'.	ds connectColor: Color blue.	b add: ds.	ds := RTData new.	ds points: (0 to: 100 by: 0.1).	ds y: [ :x | (0.1 * x) cos  ].	ds noDot.	ds interaction popupText: 'cosinus'.	ds connectColor: Color red.	b add: ds.	b build.	^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleRandomCurves| b ds |b := RTGrapher new.b extent: 300 @ 200.5 timesRepeat: [ 	ds := RTData new.	ds noDot.	ds points: ((1 to: 500) collect: [ :i | 50 atRandom - 25 ]) cumsum.	ds connectColor: Color green.	b add: ds.].b axisX; axisY.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleScatterPlot2	| b ds |	b := RTGrapher new.	b extent: 290 @ 200.	b interaction popup.		ds := RTData new.	ds dotShape ellipse size: 15; color: (Color red alpha: 0.3).	ds points: RTObject withAllSubclasses.	 	ds x: #numberOfMethods; y: #numberOfVariables.	ds dotSize: #numberOfLinesOfCode min: 4 max: 20 using: #sqrt.		b add: ds.	b axisXWithNumberOfTicks: 4.	b axisYWithNumberOfTicks: 4.	b build.	^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleScatterplotWithHighlighting	| b ds |	b := RTGrapher new.	b extent: 290 @ 200.		ds := RTData new.	ds interaction popup.	ds dotShape ellipse size: 15; color: (Color red alpha: 0.3).	ds points: RTObject withAllSubclasses.	ds x: #numberOfMethods; y: #numberOfVariables.	ds dotSize: #numberOfLinesOfCode min: 4 max: 20 using: #sqrt.	ds highlightIf: [ :c | (c numberOfLinesOfCode &gt; 2000) or: [ c numberOfVariables &gt; 10 ] ] using: #name.	b add: ds.		b axisX 			numberOfTicks: 4;			title: 'LOC'.	b axisY 			numberOfTicks: 4;			title: 'NOM'.		b build.	^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleSimpleCurve	| b ds |	b := RTGrapher new.	b extent: 300 @ 300.		ds := RTData new.	ds dotShape ellipse color: (Color blue alpha: 0.5).	ds points: (0.0 to: 1.0 by: 0.05).	ds connect.	ds y: [ :v | v sqrt ].	b add: ds.		b axisXWithNumberOfTicks: 3.	b axisYWithNumberOfTicks: 4.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleSimpleCurve2	| b ds |	b := RTGrapher new.	b extent: 300 @ 300.		ds := RTData new.	ds dotShape ellipse color: (Color blue alpha: 0.5).	ds points: (RTObject withAllSubclasses sortedAs: #numberOfMethods).	ds connect.	ds y: #numberOfMethods.	b add: ds.		b axisXWithNumberOfTicks: 3.	b axisYWithNumberOfTicks: 4.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleSimpleValues| b values ds |b := RTGrapher new.values := #(5 6 7 -1 -3).b extent: 400 @ 300.ds := RTData new.ds interaction popup.ds points: values.ds connectColor: Color red.ds y: #yourself.b add: ds.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleSquaredCurve| data b ds |data := (0 to: 40000 by: 1000) collect: [:n | n @ (Random new next * 3) floor].b := RTGrapher new.b extent: 1000@ 200. ds := RTData new.ds dotShape rectangle height: 1; width: 25; color: Color blue.ds connectUsing: (RTLine new 	color: (Color blue); 	width: 1; 	withHorizontalAttachPoint; yourself).ds 	points: data;	x: #x;	y: #y.b add: ds.b axisX. b axisY title: 'alles Count'.^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleStackingX	| b ds |	b := RTGrapher new.	b extent: 400 @ 300.		ds := RTData new.	ds points: #( 5 6 7 ).	ds connectColor: Color red.	ds y: #yourself.	b add: ds.		ds := RTData new.	ds points: #(1 7 10 4).	ds connectColor: Color blue.	ds y: #yourself.	b add: ds.		b axisXWithNumberOfTicks: 4.	b axisYWithNumberOfTicks: 4.	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleStackingX3	| b nbOfCurves normalizer |	b := RTGrapher new.	b extent: 400 @ 200.		nbOfCurves := 3.	normalizer := RTMultiLinearColorForIdentity new numberOfColors: (nbOfCurves).	1 to: nbOfCurves do: [ :i |		| data ds |		ds := RTData new.		data := (100 to: 1 by: -1) collect: #atRandom.		ds dotShape ellipse size: 0.		ds points: data.		ds connectColor: (normalizer rtValue: i).		b add: ds.	].	b axisXWithNumberOfTicks: 3.	b axisYWithNumberOfTicks: 4.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleTwoInteractions	| b ds |	b := RTGrapher new.	b extent: 300 @ 200.	ds := RTData new.	ds interaction popupText: [ :c | 'Roassal class: ', c name ].	ds dotShape circle color: (Color blue alpha: 0.3).	ds points: RTShape withAllSubclasses.	ds x: #numberOfMethods.	ds y: #numberOfLinesOfCode.	b add: ds.	ds := RTData new.	ds interaction popupText: [ :c | 'Trachel class: ', c name ].	ds dotShape circle color: (Color red alpha: 0.3).	ds points: TRShape withAllSubclasses.	ds x: #numberOfMethods.	ds y: #numberOfLinesOfCode.	b add: ds.	b axisX; axisY.	b build.	^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleTwoStackedCurves	| b ds |	b := RTGrapher new.	b extent: 200 @ 200.		ds := RTData new.	ds points: #(0 1 2 3 10 20).	ds connectUsing: (RTLine new color: Color blue).	b add: ds.		ds := RTData new.	ds points: #(0 10 20 30).	ds connectUsing: (RTLine new color: Color red).	b add: ds.		b axisXWithNumberOfTicks: 3.	b axisYWithNumberOfTicks: 4.	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampledoubleCurves	| f g b ds xValues |	f := [ :x | x ].	g := [ :x | x * x ].	xValues := 0 to: 100 by: 0.1.	b := RTGrapher new.	b extent: 300 @ 200.	ds := RTData new.	ds noDot.	ds points: xValues.	ds y: g.	ds x: #yourself.	ds connectColor: Color green.	b add: ds.	ds := RTData new.	ds noDot.	ds points: xValues.	ds y: f.	ds x: #yourself.	ds connectColor: Color blue.	b add: ds.	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplesinAndCos	| b ds |	b := RTGrapher new.	b extent: 400 @ 400.		ds := RTData new.	ds label: 'sine'.	ds dotShape rectangle size: 0.	ds points: (-3 to: 3.1415 * 5 by: 0.01).	ds y: [ :v | v sin ].	ds x: #yourself.	ds connectColor: (Color red alpha: 0.4).	b add: ds.		ds := RTData new.	ds label: 'cosine'.	ds dotShape rectangle size: 0.	ds points: (0 to: 3.1415 * 5 by: 0.01).	ds y: [ :v | v cos ].	ds x: #yourself.	ds connectColor: (Color blue alpha: 0.4).	b add: ds.	b legend.	^ b</body></methods><methods><class-id>Roassal2.RTGrapherExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Examples-Examples">label	^ 'Grapher - Overall'</body></methods><methods><class-id>Roassal2.RTAbstractLineDecorationTest</class-id> <category>tests</category><body package="Roassal2-LineDecorations-Tests">testCustomFromPoint	| head line edge trachelShape |	head := RTLineHead shape: RTSimpleArrow.	line := RTArrowedLine new head: head.	edge := line edgeFrom: from to: to.	trachelShape := head trachelShapeFor: edge from: 200 @ 0.	self assert: (trachelShape from onLineFrom: 105 @ 0 to: 205 @ 0).	to translateTo: 0 @ -100.	head updateFor: edge trachelShape: trachelShape from: 0 @ -200.	self assert: (trachelShape from onLineFrom: 0 @ -105 to: 0 @ -205)</body><body package="Roassal2-LineDecorations-Tests">testHead	| head line edge trachelShape |	head := RTLineHead shape: RTSimpleArrow.	line := RTArrowedLine new head: head.	edge := line edgeFrom: from to: to.	trachelShape := head trachelShapeFor: edge.	self assert: trachelShape to = (100 @ 0).	to translateTo: 0 @ -100.	head updateFor: edge trachelShape: trachelShape.	self assert: trachelShape to = (0 @ -100)</body><body package="Roassal2-LineDecorations-Tests">testShapeHandling	| head |	head := RTLineHead shape: RTEmptyArrow.	self assert: head trachelShapeClass = TREmptyArrowHeadShape</body><body package="Roassal2-LineDecorations-Tests">testTail	| tail line edge trachelShape |	tail := RTLineTail shape: RTSimpleArrow.	line := RTArrowedLine new head: tail.	edge := line edgeFrom: from to: to.	trachelShape := tail trachelShapeFor: edge.	self assert: trachelShape to = (0 @ 0).	from translateTo: 100 @ -100.	tail updateFor: edge trachelShape: trachelShape.	self assert: trachelShape to = (100 @ -100)</body></methods><methods><class-id>Roassal2.RTAbstractLineDecorationTest</class-id> <category>running</category><body package="Roassal2-LineDecorations-Tests">setUp	super setUp.	(from := RTBox element) translateTo: 0 @ 0.	(to := RTBox element) translateTo: 100 @ 0</body></methods><methods><class-id>Roassal2.RTCompositeShapeTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testAddingAfterLayout	| v s es |	v := RTView new.	s := RTCompositeShape new.	s add: RTBox new.	"s := RTEllipse new."	es := s elementsOn: (1 to: 2).	RTGridLayout on: es.	v add: es first.	v add: es second.	self assert: (es collect: [ :e | e position asIntegerPoint ]) asArray equals: (Array with: (2@2) with: (12@2))</body><body package="Roassal2-Core-Tests">testAddingAfterLayout02	| v s es |	v := RTView new.	s := RTCompositeShape new.	s add: RTBox new.	"s := RTEllipse new."	es := s elementsOn: (1 to: 2).	v add: es first.	v add: es second.	RTGridLayout on: es.	self assert: (es collect: [ :e | e position asIntegerPoint ]) asArray equals: (Array with: (2@2) with: (12@2))</body><body package="Roassal2-Core-Tests">testAttachPoint	| c l head attachPoint |	c := RTCompositeShape new.	l := RTLine new.	c add: l.	head := RTSimpleArrowHead new.	c add: head.	attachPoint := RTHorizontalAttachPoint instance.	c attachPoint: attachPoint.	self assert: l attachPoint equals: attachPoint.	self assert: head attachPoint equals: attachPoint.</body><body package="Roassal2-Core-Tests">testCallbacks	| compo ellipse v shapes |	compo := ((RTBox new size: 50; color: Color red; yourself) + RTBox new) element.	ellipse := RTEllipse new size: 20; color: Color blue; element.	"compo will have two callbacks after the call to stick:below:"	TRConstraint stick: ellipse below: compo.	v := RTView new.	v add: compo; add: ellipse.	self assert: ellipse trachelShape numberOfCallbacks equals: 0.	self assert: compo trachelShape numberOfCallbacks equals: 2.		shapes := compo trachelShape shapes.	self assert: shapes first numberOfCallbacks equals: 2</body><body package="Roassal2-Core-Tests">testCallbacks02	| compo ellipse v |	compo := ((RTBox new size: 50; color: Color red; yourself)) element.	ellipse := RTEllipse new size: 20; color: Color blue; element.	"compo will have two callbacks after the call to stick:below:"	TRConstraint stick: ellipse below: compo.	v := RTView new.	v add: compo; add: ellipse.	self assert: ellipse trachelShape numberOfCallbacks equals: 0.	self assert: compo trachelShape numberOfCallbacks equals: 2.</body><body package="Roassal2-Core-Tests">testHeightFor	| shape e |	shape := RTCompositeShape new.	shape allOfSameSizeWithPadding.	shape add: (RTBox new color: Color white; borderWidth: 2; borderColor: Color black).	shape add: (RTLabel new height: 30).	shape height: 50.	e := shape elementOn: 'hello'.	"RTView new add: e; open"</body><body package="Roassal2-Core-Tests">testRemoving	| s e v |	s := RTCompositeShape new.	s add: RTLabel new.	s add: RTBox new.	e := s element.		v := RTView new.	v add: e.	self assert: v numberOfElements equals: 1.		e remove.	self assert: v numberOfElements equals: 0.</body><body package="Roassal2-Core-Tests">testSimpleCompositionWithTranslation	| v c b |	v := RTView new.	c := RTCompositeShape new.	c add: (RTBox new size: 10).	c add: (RTEllipse new size: 10) translateBy: 5 @ 5.	b := c element.	b @ RTPopup.	b translateBy: 5 @ 5.	v add: b.	self assert: v canvas shapes first position equals: 5 @ 5.	self assert: v canvas shapes second position equals: 10 @ 10</body><body package="Roassal2-Core-Tests">testSimpleCompositionWithTranslation02	| v c b |	v := RTView new.	c := RTCompositeShape new.	c add: (RTBox new size: 10).	c add: (RTEllipse new size: 10).	c vertical.	b := c element.	b @ RTPopup.	b translateBy: 5 @ 5.	v add: b.	self assert: v canvas shapes first position equals: 5 @ 5.	self assert: v canvas shapes second position equals: 5 @ 15</body></methods><methods><class-id>Roassal2.RTCompositeShapeTest</class-id> <category>centering</category><body package="Roassal2-Core-Tests">testCenter	| v es shape |	v := RTView new. 	shape := RTCompositeShape new.	shape add: (RTBox new height: 10; color: Color green; width: #yourself).	shape add: (RTBox new height: 10; color: Color red; width: [ :cc | 100 - cc ]).	es := shape elementsOn: #(0 50 100).	v addAll: es.		self assert: es first position equals: 0 @ 0.	self assert: es second position equals: 0 @ 0.	self assert: es third position equals: 0 @ 0.</body><body package="Roassal2-Core-Tests">testCenter2	| v es shape |	v := RTView new. 	shape := RTCompositeShape new.	shape add: (RTBox new height: 10; color: Color green; width: #yourself).	shape add: (RTBox new height: 10; color: Color red; width: [ :cc | 100 - cc ]).	shape horizontal.		es := shape elementsOn: #(0 50 100).	v addAll: es.		"Ideally, we should have 0 @ 0"	self assert: es first position equals: 50 @ 0.	self assert: es second position equals: 25 @ 0.	self assert: es third position equals: 0 @ 0.</body><body package="Roassal2-Core-Tests">testCenter2AndTranslation	| v es shape |	v := RTView new. 	shape := RTCompositeShape new.	shape add: (RTBox new height: 10; color: Color green; width: #yourself).	shape add: (RTBox new height: 10; color: Color red; width: [ :cc | 100 - cc ]).	shape horizontal.		es := shape elementsOn: #(0 50 100).	v addAll: es.	es translateTo: 10 @ 10.		self assert: es first position equals: 35 @ 10.	self assert: es second position equals: 10 @ 10.	self assert: es third position equals: -15 @ 10.</body><body package="Roassal2-Core-Tests">testCenter3	| v es shape |	v := RTView new. 	shape := RTCompositeShape new.	shape add: (RTBox new height: 10; color: Color green; width: #yourself).	shape add: (RTBox new height: 10; color: Color red; width: [ :cc | 100 - cc ]).	shape vertical.		es := shape elementsOn: #(0 50 100).	v addAll: es.		self assert: es first position equals: 0 @ 5.	self assert: es second position equals: 0 @ 5.	self assert: es third position equals: 0 @ 5.</body><body package="Roassal2-Core-Tests">testCenter3AndTranslation	| v es shape |	v := RTView new. 	shape := RTCompositeShape new.	shape add: (RTBox new height: 10; color: Color green; width: #yourself).	shape add: (RTBox new height: 10; color: Color red; width: [ :cc | 100 - cc ]).	shape vertical.		es := shape elementsOn: #(0 50 100).	v addAll: es.	es translateTo: 10 @ 10.		self assert: es first position equals: 10 @ 10.	self assert: es second position equals: 10 @ 10.	self assert: es third position equals: 10 @ 10.</body><body package="Roassal2-Core-Tests">testCenterAndTranslation	| v es shape |	v := RTView new. 	shape := RTCompositeShape new.	shape add: (RTBox new height: 10; color: Color green; width: #yourself).	shape add: (RTBox new height: 10; color: Color red; width: [ :cc | 100 - cc ]).	es := shape elementsOn: #(0 50 100).	v addAll: es.	es translateTo: 10 @ 10.		self assert: es first position equals: 10 @ 10.	self assert: es second position equals: 10 @ 10.	self assert: es third position equals: 10 @ 10.</body><body package="Roassal2-Core-Tests">testCenterVerticalLineLayout	| v es shape |	v := RTView new. 	shape := RTCompositeShape new.	shape add: (RTBox new height: 10; color: Color green; width: #yourself).	shape add: (RTBox new height: 10; color: Color red; width: [ :cc | 100 - cc ]).	shape horizontal.		es := shape elementsOn: #(0 50 100).	v addAll: es.	RTVerticalLineLayout on: es.	self assert: es second width equals: 100.0.		self assert: (es collect: [ :e | e width ]) asArray equals: #(100 100 100).	self assert: (es collect: [ :e | e position x ]) asArray equals: #(50 50 50).		self assert: es first trachelShape shapes first encompassingRectangle  equals: ( (0.0@0.0) corner: (0.0@10.0)).	self assert: es first trachelShape shapes second encompassingRectangle  equals: ( (0.0@0.0) corner: (100.0@10.0)).		self assert: es second trachelShape shapes first encompassingRectangle equals: ( (0.0@20.0) corner: (50.0@30.0)).	self assert: es second trachelShape shapes second encompassingRectangle  equals: ( (50.0@20.0) corner: (100.0@30.0)).		self assert: es third trachelShape shapes first encompassingRectangle equals: ( (0.0@40.0) corner: (100.0@50.0)).	self assert: es third trachelShape shapes second encompassingRectangle equals: ( (100.0@40.0) corner: (100.0@50.0)).</body><body package="Roassal2-Core-Tests">testCenterVerticalLineLayout2	| v es shape |	v := RTView new. 	shape := RTCompositeShape new.	shape add: (RTBox new height: 10; color: Color green; width: #yourself).	shape add: (RTBox new height: 10; color: Color red; width: [ :cc | 100 - cc ]).	shape horizontal.		es := shape elementsOn: #(0 100).	v addAll: es.	RTVerticalLineLayout on: es.				self assert: es first trachelShape shapes first encompassingRectangle  equals: ( (0.0@0.0) corner: (0.0@10.0)).	self assert: es first trachelShape shapes second encompassingRectangle  equals: ( (0.0@0.0) corner: (100.0@10.0)).		self assert: es second trachelShape shapes first encompassingRectangle equals: ( (0.0@20.0) corner: (100.0@30.0)).	self assert: es second trachelShape shapes second encompassingRectangle  equals: ( (100.0@20.0) corner: (100.0@30.0)).</body></methods><methods><class-id>Roassal2.RTCompositeShapeTest</class-id> <category>tests - all same size</category><body package="Roassal2-Core-Tests">testAllSameSize01	| box1 box2 combo v |	box1 := RTBox new color: Color blue trans; size: 20.	box2 := RTBox new color: Color red trans; size: 10.	combo:= RTCompositeShape new allOfSameSize; add: box1; add: box2.	v := RTView new.	v add: combo element. 		self assert: v numberOfElements equals: 1.	self assert: v canvas numberOfShapes equals: 2.		self assert: (v canvas shapes collect: #encompassingRectangle) asSet size equals: 1</body><body package="Roassal2-Core-Tests">testAllSameSize01AndVertical	| box1 box2 combo v firstShape secondShape |	box1 := RTBox new color: Color blue trans; size: 20.	box2 := RTBox new color: Color red trans; size: 10.	combo:= RTCompositeShape new allOfSameSize; add: box1; add: box2; vertical.	v := RTView new.	v add: combo element. 		self assert: v numberOfElements equals: 1.	self assert: v canvas numberOfShapes equals: 2.		firstShape := v canvas shapes first.	secondShape := v canvas shapes second.	self assert: firstShape position x equals: secondShape position x.	self assert: firstShape position y &lt; secondShape position y.	self assert: (v canvas shapes collect: [ :s | s encompassingRectangle extent ]) asSet size equals: 1</body></methods><methods><class-id>Roassal2.RTExampleOpeningEvent</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">theClass	^ theClass</body><body package="Roassal2-ExampleBrowser-Examples">theClass: aClassnameAsSymbol	theClass := aClassnameAsSymbol</body><body package="Roassal2-ExampleBrowser-Examples">theSelector	^ theSelector</body><body package="Roassal2-ExampleBrowser-Examples">theSelector: aMethodNameAsSymbol	theSelector := aMethodNameAsSymbol</body></methods><methods><class-id>Roassal2.RTHorizontalTreeLayoutTest</class-id> <category>tests - reversed</category><body package="Roassal2-Layouts-Tests">testHorizontallyReversed	| layout v edge lineShape elements from to |		v := RTView new.	elements := RTBox elementsOn: (1 to: 3).	v addAll: elements.	lineShape := RTLine new.	edge := lineShape edgeFrom: elements first to: elements second.	v add: edge.	edge := lineShape edgeFrom: elements first to: elements third.	v add: edge.	layout := RTHorizontalTreeLayout new.		"NO REVERSE"	layout on: elements.	self assert: elements second position x &gt; elements first position x.	self assert: elements second position y &lt; elements first position y.	self assert: elements second position x equals: elements third position x.	from := v edges first trachelShape from.	to := v edges first trachelShape to.	self assert: from class equals: Point.	self assert: to class equals: Point.		"REVERSE"	layout horizontallyReverse.	layout on: elements.	self assert: elements second position x &lt; elements first position x.	self assert: elements second position y &lt; elements first position y.	self assert: elements second position x equals: elements third position x.		"ATTACHPOINT"	self assert: (v edges collect: [ :ed | ed shape attachPoint ]) asSet size equals: 1.		"ATTACHPOINT FROM AND TO"	self assert: (0 @ 7) equals: v edges first trachelShape to.	self assert: (20 @ 11) equals: v edges first trachelShape from.</body><body package="Roassal2-Layouts-Tests">testHorizontallyReversedSetting	| l |	l := RTHorizontalTreeLayout new.	self deny: l shouldBeHorizontallyReversed.	self deny: l shouldBeVerticallyReversed.	l horizontallyReverse.	self assert: l shouldBeHorizontallyReversed.	self deny: l shouldBeVerticallyReversed.</body><body package="Roassal2-Layouts-Tests">testVerticallyReversed	| layout v edge lineShape elements |		v := RTView new.	elements := RTBox elementsOn: (1 to: 3).	v addAll: elements.	lineShape := RTLine new.	edge := lineShape edgeFrom: elements first to: elements second.	v add: edge.	edge := lineShape edgeFrom: elements first to: elements third.	v add: edge.	layout := RTHorizontalTreeLayout new.	self assert: (v edges noneSatisfy: [ :ed | ed shape attachPoint isInverted ]).	self assert: (v edges collect: [ :ed | ed shape attachPoint ]) asSet size equals: 1.		"NO REVERSE"	layout on: elements.	self assert: elements second position x &gt; elements first position x.	self assert: elements second position y &lt; elements first position y.	self assert: elements second position x equals: elements third position x.	self assert: (v edges noneSatisfy: [ :ed | ed shape attachPoint isInverted ]).	self assert: (v edges collect: [ :ed | ed shape attachPoint ]) asSet size equals: 1.	"REVERSE"	layout verticallyReverse.	layout on: elements.	self assert: elements second position x &gt; elements first position x.	self assert: elements second position y &gt; elements first position y.	self assert: elements second position x equals: elements third position x.		"ATTACHPOINT"	self assert: (v edges noneSatisfy: [ :ed | ed shape attachPoint isInverted ]).	self assert: (v edges collect: [ :ed | ed shape attachPoint ]) asSet size equals: 1.</body><body package="Roassal2-Layouts-Tests">testVerticallyReversedSetting	| l |	l := RTHorizontalTreeLayout new.	self deny: l shouldBeVerticallyReversed.	self deny: l shouldBeHorizontallyReversed.	l verticallyReverse.	self assert: l shouldBeVerticallyReversed.	self deny: l shouldBeHorizontallyReversed.</body></methods><methods><class-id>Roassal2.RTHorizontalTreeLayoutTest</class-id> <category>tests</category><body package="Roassal2-Layouts-Tests">testAddingAttachPoint	| v es lineShape l |	v := RTView new.	es := RTBox elementsOn: (1 to: 2).	v addAll: es.	lineShape := RTLine new.	l := lineShape edgeFrom: es first to: es second.	v add: l.		self assert: lineShape attachPoint class equals: RTCenteredAttachPoint.	RTHorizontalTreeLayout on: es.	self assert: lineShape attachPoint class equals: RTHorizontalAttachPoint.</body></methods><methods><class-id>Roassal2.RTAlignmentTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testFromBottom	| es |	es := (RTBox new size: #yourself) elementsOn: (10 to: 100 by: 10).	align elements: es.	RTHorizontalLineLayout on: es.	es second translateBy: 0 @ 150.	self assert: (es collect: [ :e | e encompassingRectangle bottom ]) asArray equals: #(10.0 170.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0).	self assert: align bottomMostElement equals: es second.	align bottom.	self assert: (es collect: [ :e | e encompassingRectangle bottom ]) asArray equals: #(170.0 170.0 170.0 170.0 170.0 170.0 170.0 170.0 170.0 170.0)	"		RTView new addAll: es; yourself.	"</body><body package="Roassal2-Core-Tests">testFromLeft	| es |	es := (RTBox new size: #yourself) elementsOn: (10 to: 100 by: 10).	align elements: es.	RTVerticalLineLayout on: es.	es second translateBy: -150 @ 0.	self assert: (es collect: [ :e | e encompassingRectangle left ]) asArray equals: #(0.0 -150.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0).	self assert: align leftMostElement equals: es second.	align left.	self assert: (es collect: [ :e | e encompassingRectangle left ]) asArray equals: #(-150.0 -150.0 -150.0 -150.0 -150.0 -150.0 -150.0 -150.0 -150.0 -150.0)"		RTView new addAll: es; inspect.	"</body><body package="Roassal2-Core-Tests">testFromRight	| es |	es := (RTBox new size: #yourself) elementsOn: (10 to: 100 by: 10).	align elements: es.	RTVerticalLineLayout on: es.	es second translateBy: 150 @ 0.	self assert: (es collect: [ :e | e encompassingRectangle right ]) asArray equals: #(10.0 170.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0).	self assert: align rightMostElement equals: es second.	align right.	self assert: (es collect: [ :e | e encompassingRectangle right ]) asArray equals: #(170.0 170.0 170.0 170.0 170.0 170.0 170.0 170.0 170.0 170.0)"		RTView new addAll: es; inspect.	"</body><body package="Roassal2-Core-Tests">testFromTop	| es |	es := (RTBox new size: #yourself) elementsOn: (10 to: 100 by: 10).	align elements: es.	RTHorizontalLineLayout on: es.	es second translateBy: 0 @ -50.	self assert: (es collect: [ :e | e encompassingRectangle top ]) asArray equals: #(0.0 -50.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0).	self assert: align topMostElement equals: es second.	align top.	self assert: (es collect: [ :e | e encompassingRectangle top ]) asArray equals: #(-50.0 -50.0 -50.0 -50.0 -50.0 -50.0 -50.0 -50.0 -50.0 -50.0).</body><body package="Roassal2-Core-Tests">testHasElement	self deny: align hasElement.	align elements: (Array with: RTElement new).	self assert: align hasElement.	align elements: #().	self deny: align hasElement.</body><body package="Roassal2-Core-Tests">testNoErrorOnDefault	RTAlignment new left; right; top; bottom</body></methods><methods><class-id>Roassal2.RTAlignmentTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	align := RTAlignment new.</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlotTest</class-id> <category>running</category><body package="Roassal2-Builder-AnimatedScatterPlot-Tests">setUp	super setUp.	b := RTAnimatedScatterPlot new.</body></methods><methods><class-id>Roassal2.RTAnimatedScatterPlotTest</class-id> <category>tests</category><body package="Roassal2-Builder-AnimatedScatterPlot-Tests">testDefault	self assert: b numberOfTables = 0.	self assert: b frame = 1.</body></methods><methods><class-id>Roassal2.RTMultiLinearColorForIdentityTest</class-id> <category>tests</category><body package="Roassal2-Tests">testBasic	| n s e |	n := RTMultiLinearColorForIdentity new 				command: #first; 				objects: #(#c1 #c2 #c3 #c4 #c5);				yourself.	s := RTBox new color: n.	e := s elementsOn: #(#(c1) #(c2) #(c3) #(c4) #(c5)).	RTView new add: e.</body><body package="Roassal2-Tests">testDefaultColor	| v wordsToHighlight normalizer shape strings es |	v := RTView new.		wordsToHighlight := #('all' 'me' 'you').	normalizer := RTMultiLinearColorForIdentity new.	normalizer objects: wordsToHighlight.	normalizer defaultColor: Color yellow.	shape := RTBox new color: [ :w | normalizer rtValue: w ].	strings := 'you and me make us all' substrings.	es := shape elementsOn: strings.	v addAll: es.	es @ RTPopup.	RTHorizontalLineLayout new gapSize: 1; on: es.	self assert: (v elementFromModel: 'make') trachelShape color equals: Color yellow</body></methods><methods><class-id>Roassal2.RTColorPaletteExample</class-id> <category>sources</category><body package="Roassal2-ExampleBrowser-Examples">exampleDivergingPalette	| v |	v := RTView new.	v @ RTDraggableView.	RTCPDiverging new viewOn: v.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">examplePalettes| v allLines lbl es lb| v := RTView new.allLines := OrderedCollection new.(RTPalette class selectors sorted) do: [ :selector |	lbl := RTLabel elementOn: selector.		v add: lbl.		es := (RTBox new size: 20) elementsOn: (1 to: 5).	v addAll: es.	es @ (RTMouseHoverZoom new desiredExtent: [ :anElement | anElement extent * 1.7 ]).	TRConstraint stick: lbl onTheLeftOf: es first.		RTHorizontalLineLayout new gapSize: 3; on: es.	RTMetricNormalizer new		elements: es;		normalizeColor: #yourself using: (RTPalette perform: selector).	allLines add: es.].RTVerticalLineLayout on: allLines.lb := RTLegendBuilder new.lb view: v.lb onDemand.lb addText: 'Many color palettes are offered by Roassal'.lb addText: 'To obtain the a palette, simply evaluate: RTPalette c5'.lb build.^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleQualitativePalette	| v |	v := RTView new.	v @ RTDraggableView.	RTCPQualitative new viewOn: v.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleSequentialPalette	| v |	v := RTView new.	v @ RTDraggableView.	RTCPSequential new viewOn: v.	^ v</body></methods><methods><class-id>Roassal2.RTColorPaletteExample</class-id> <category>icons</category><body package="Roassal2-ExampleBrowser-Examples">exampleDivergingPaletteIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">examplePalettesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFjUlEQVR4XuWcTWhcVRiGC+5dCOLOjbpxK7pwKS5cKlItIqggdBNEUMGmiBXB4l9tTEsbKmiSQiVJm8YhwaaThoIxk79pxsxkEpPM352ZNJP5STKZ/8x3nO9m7uGe2Norgj3T9y0P4TvMap7m3HfOnZtDQuBHpxyiuTmia9cI/63QRcj6Or4MrYQsLOAL0UkI/luALwQ/+ELwheAHXwi+kP8lueR1inrbhcVW0i2q1YAoFgckPHPq6z0KnNJguwLH3/aqAjWCL+Qf4vf7KZVKEb4QTZJOpwn/N0SjVCoVfCH4wReCn1YUcn7gF3rmzaPCouuyS6RS82Ix0C3hmZO52abA+f395xQ43z3xlALV6/hb1p2Sz+cpmUw2zjsXaGlpyQRfyH2MYRjmGxOPx2lzc9OsvvhC7nPqB94cfCH4wReCnxYS8u2XnfT4o08Li1NfnRHdfQPixdfekPDMOdzZpcD5ePSiAmdk9lMF/A+GDlqWdZaFL0STloX/G6Jpy8IXgh98IfhpISGJvhM0e+QhYZHo/0xkh78WobbHJDxzdk8+rGCm5xEVzuizCkT4Hwzv2bIikQj5fD7CF6JJy+Lam8lk8IXo1rLwheAHXwh+WkiIO1um4+EdYTGWK4uFSklcym9JeOYES7sKZlFIZRU4xfmQAv4HQwctKxwOk9frJXwhmrSsWq1GgUAAX4guLcv6iS8EP/hC8NNCQsgzQdT5jZBMTYiyf1ps952V8MwJdJ9R4Fw/26XA6evoVcDfshy0rHK5TOPj4/hCdGlZGxsb5Ha7CV+IZmdZ+ELwgy8EPy0k5MKVYXr+7feExQ+DI6J/1C2OfNQu4Znz4RcnFDjfXzipwBn+9UcF/C3rHuFnDK07hvhCNAg/Y2jdMcQXokHszxjiC8EPvhD8tJCQ4maScsteYVFKJ8VWbFfEJlISnjmT/TkF80Pg6awC59SxnAL+luVERLFIfISCL0SDcMPig0Z8IZpkdnaWQqGQefKLL0Sz0IHcae1u6/9mDV8IflpTSIf7Fj15/Cdh0TF2i64uB8U7rkEJz5zzvlEFc/tL3VDgFOYvUdH3s7DA37Ichv+Sw+m/CxH/VYhdBr4Qhy3L5XLR0NAQvhBdWhb/DIfDAl8IfsvCF4KfFhLC90RWVlYlPMeNOE1NTkt45tcea/+E7PDaSy+/TnZ47YV3PyA7+FuWg8RiMfO7WSxgdXVNWGQyWRE3EmLaMyPhuSlEoSlEoSlEAV+Ig5bF51h8KxdfiCYta21tzfyyHL4QzVvW3YLfsvCDKWRzK0PB6IqE59p2mkrxZQnP5v98f4Ds8Fp1zEN2zMLQe5ns4G9ZDltWoVAwBSzFVoVFYxa1nbQoJ/6U8GwmsKjSSO3GlALHuHhFAV+Ig5YVjUYpGAziC9GlZfGfieXHE/CF4LcsfCH4aSEhub06has1Cc/Gdp4m4+sSnvm1A7/NkR1e+/xcN9nhtVfeOkp28LcsB7G+l8UCIrU9YZGr14WxkxeexG0Jz6aQCa9CU4hCU4gCvhAHLcu8INdq+EJ0aVnVapWsLQtfyAPUsup1Ijv7a3Wyg39Rx0/rCpluXEfONW5UWcw05vntGvUYZQnP/NqRcIns8NqkL0t2eG1ueJXs4G9ZDi/sfC/EFFKpCIuZvT0xv70neuIVCc+mkEhZYV9ITmFfyJoCvhCHZ1mLi4v4QnRpWXyOxeAL0bBl1W3gn2XhB1+IPYWiQenMlKRQbByn5A2K3PZIeObXzoRukh1eu/qHi+zwWsdkL9nB37IcJJvNUiKRIBaSyU4Ji2IxLrZ2DRHd8Eh4bgpRaApRaApRwBfisPLy4wj4QjRpWfyMIT/4iS/kQTvLOtDS9tfUf/gXdfzgC8EXgh98IfhC8IMvBF8IfvCFIOcvFMdBUx6uJnQAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleQualitativePaletteIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleSequentialPaletteIcon	^ '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'</body></methods><methods><class-id>Roassal2.RTColorPaletteExample</class-id> <category>accessing</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'Color palettes'</body></methods><methods><class-id>Roassal2.RTDoubleSliderTest</class-id> <category>tests</category><body package="Roassal2-Builder-UI-Slider-Tests">testCallback	| slider block t |		slider := RTDoubleSlider new.	slider build.	t := 0.	block := [ :arg1 :arg2 | t := t+1 ].	slider callback: block.	self assert: slider callback equals: block.	slider eventForCursorMin: true.	self assert: t equals: 1.	slider eventForCursorMax: true.	self assert: t equals: 2.	slider eventForLineCursor.	self assert: t equals: 3.</body><body package="Roassal2-Builder-UI-Slider-Tests">testLabelled	| slider |		slider := RTDoubleSlider new.	self assert: slider isLabelled equals: false.	slider labeled.	self assert: slider isLabelled equals: true.</body><body package="Roassal2-Builder-UI-Slider-Tests">testMax	| slider |		slider := RTDoubleSlider new.	self assert: slider max equals: 1.0.	slider max: 0.7.	self assert: slider max equals: 0.7.</body><body package="Roassal2-Builder-UI-Slider-Tests">testMin	| slider |		slider := RTDoubleSlider new.	self assert: slider min equals: 0.0.	slider min: 0.7.	self assert: slider min equals: 0.7.</body><body package="Roassal2-Builder-UI-Slider-Tests">testUseIntegerLabel	| slider |		slider := RTDoubleSlider new.	self assert: slider usingIntegerLabel equals: false.	slider useIntegerLabel.	self assert: slider usingIntegerLabel equals: true.</body></methods><methods><class-id>Roassal2.RTPopupTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	view := RTView new.</body><body package="Roassal2-Core-Tests">tearDown	RTAbstractPopup withAllSubclassesDo: [ :c | c resetLastPopup ]</body></methods><methods><class-id>Roassal2.RTPopupTest</class-id> <category>multi lines</category><body package="Roassal2-Core-Tests">testWithMultiLine	| v e p |	v := RTView new.	e := (RTBox new size: 40) elementOn: 'Hello	World	Bonjour	Blah'.	v add: e.	self assert: v numberOfElements equals: 1.	self assert: v canvas numberOfShapes equals: 1.	self assert: v canvas numberOfFixedShapes equals: 0.	p := RTPopup new.	p createAndShowPopupFor: e event: TRMouseEnter new.		self assert: v numberOfElements = 3.	self assert: v canvas numberOfShapes = 1.	self assert: v canvas numberOfFixedShapes = 5.</body><body package="Roassal2-Core-Tests">testWithMultiLine02	| v e  |	v := RTView new.	e := (RTBox new size: 40) elementOn: 'Hello	World	Bonjour	Blah'.	v add: e.	e @ RTPopup.	RTPopup resetLastPopup.		"Entering"	e announcer announce: TRMouseEnter new.	self assert: v numberOfElements equals: 3.	self assert: v canvas numberOfShapes equals: 1.	self assert: v canvas numberOfFixedShapes equals: 5.	"Leaving"	e announcer announce: TRMouseLeave new.	self assert: v numberOfElements equals: 1.	self assert: v canvas numberOfShapes equals: 1.	self assert: v canvas numberOfFixedShapes equals: 0.</body><body package="Roassal2-Core-Tests">testWithMultiLine03	| v e  p |	v := RTView new.	e := (RTBox new size: 40) elementOn: 'Hello	World	Bonjour	Blah'.	v add: e.	e @ RTPopup.	RTPopup resetLastPopup.		"Entering"	p := RTPopup new.	p createAndShowPopupFor: e event: TRMouseEnter new.	self assert: v numberOfElements equals: 3.	self assert: v canvas numberOfShapes equals: 1.	self assert: v canvas numberOfFixedShapes equals: 5.	"Leaving"	p removeLastPopup.	self assert: v numberOfElements equals: 1.	self assert: v canvas numberOfShapes equals: 1.	self assert: v canvas numberOfFixedShapes equals: 0.</body><body package="Roassal2-Core-Tests">testWithMultiLine04	| v e  p secondElement firstElement |	v := RTView new.	e := (RTBox new size: 40) elementOn: 'Hello	World	Bonjour	Blah'.	v add: e.	e @ RTPopup.		"Entering"	p := RTPopup new.	RTPopup resetLastPopup.	p createAndShowPopupFor: e event: TRMouseEnter new.	self assert: v numberOfElements equals: 3.	self assert: v canvas numberOfShapes equals: 1.	self assert: v canvas numberOfFixedShapes equals: 5.	"Leaving"	firstElement := RTPopup lastPopup first.	secondElement := RTPopup lastPopup second.	self assert: secondElement shape class equals: RTLabel.	self deny: secondElement isFixed.	firstElement remove.	secondElement remove.	self assert: v numberOfElements equals: 1.	self assert: v canvas numberOfShapes equals: 1.	self assert: v canvas numberOfFixedShapes equals: 0.</body></methods><methods><class-id>Roassal2.RTPopupTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">test	| el |	el := RTElement on: 123.	el + RTBox.	el @ RTPopup.	view add: el.		self assert: el view == view.		self assert: view numberOfElements = 1.	el announce: TRMouseEnter.	self assert: view numberOfElements = 3.	el announce: TRMouseLeave.	self assert: view numberOfElements = 1.</body><body package="Roassal2-Core-Tests">testPopup	| v es |	v := RTView new.	es := RTLabel elementsOn: (1 to: 10).	v addAll: es.	es @ (RTPopup new 		named: #yourself		background: Color blue		group: [ :group :el |  	 			group addAll: (RTEllipse elementsOn: (1 to: el model)).			RTWeightedCircleLayout new				initialRadius: 50;				on: group.			]).	RTHorizontalLineLayout on: es.		es first announce: TRMouseEnter new</body><body package="Roassal2-Core-Tests">testWithOneLine	| v e p |	v := RTView new.	e := (RTBox new size: 40) elementOn: 'Hello'.	v add: e.	self assert: v numberOfElements = 1.	self assert: v canvas numberOfShapes = 1.	p := RTPopup new.	RTPopup resetLastPopup.	p createAndShowPopupFor: e event: TRMouseEnter new.		self assert: v numberOfElements = 3.	self assert: v canvas numberOfShapes = 1.	self assert: v canvas numberOfFixedShapes = 2.</body><body package="Roassal2-Core-Tests">testWithSymbol	| v e p |	v := RTView new.	e := (RTBox new size: 40) elementOn: #symbol.	v add: e.	self assert: v numberOfElements = 1.	self assert: v canvas numberOfShapes = 1.	p := RTPopup new.	p createAndShowPopupFor: e event: TRMouseEnter new.		self assert: v numberOfElements = 3.	self assert: v canvas numberOfShapes = 1.	self assert: v canvas numberOfFixedShapes = 2.</body></methods><methods><class-id>Roassal2.RTTimelineSetTest</class-id> <category>tests</category><body package="Roassal2-Builder-Timeline-Tests">testBasic	| b f |	b := RTTimeline new.		f := RTTimelineSet new.	f shape rectangle color: Color green.	f start: [ :v | v ].	f end: [ :v | v + 1 ].	f lineIdentifier: #yourself.	f objects: #(1 2 3).	b add: f.		b build.		self assert: b numberOfEvents equals: 3</body><body package="Roassal2-Builder-Timeline-Tests">testDefault	self assert: RTTimelineSet new numberOfObjects equals: 0</body><body package="Roassal2-Builder-Timeline-Tests">testLocalMinAndMax	| f |	f := RTTimelineSet new.	f shape rectangle color: Color green.	f start: [ :v | v ].	f end: [ :v | v + 1 ].	f lineIdentifier: #yourself.	f objects: #(1 2 3).		self assert: f localMin equals: 1.	self assert: f localMax equals: 4.</body></methods><methods><class-id>Roassal2.RTSelectionExample</class-id> <category>icons</category><body package="Roassal2-Selection-Examples">exampleDifferentSelectionColorIcon	^ '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'</body><body package="Roassal2-Selection-Examples">exampleElasticBoxZoomIcon	^ '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9PEAAAAASUVORK5CYII='</body><body package="Roassal2-Selection-Examples">exampleSelectionChangeIcon	^ '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'</body><body package="Roassal2-Selection-Examples">exampleSimpleIcon	^ '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'</body></methods><methods><class-id>Roassal2.RTSelectionExample</class-id> <category>sources</category><body package="Roassal2-Selection-Examples">exampleDifferentSelectionColor	| int v |	v := RTComposerExample new exampleClassAnalysis2.	int := RTSelectableView new.	int color: [ :e | e color = Color red ifTrue: [Color green] ifFalse: [ Color red ] ].	v @ int.	^ v</body><body package="Roassal2-Selection-Examples">exampleElasticBoxZoom	| v |	v := RTGrapherDecorationExample new exampleDeviation.	v @ RTZoomableBoxView.	^ v</body><body package="Roassal2-Selection-Examples">exampleSelectionChange| int v |v := RTComposerExample new exampleClassAnalysis2.int := RTSelectableView new.int when: RTSelectionChange do: [ :evt | 	evt shape trachelShape color: (int group size &lt; 10 ifTrue: [Color green alpha: 0.3 ] ifFalse: [ Color red alpha: 0.3 ]) ].v @ int.^ v</body><body package="Roassal2-Selection-Examples">exampleSimple	| v |	v := RTComposerExample new exampleClassAnalysis2.	v @ RTSelectableView.	^ v</body></methods><methods><class-id>Roassal2.RTSelectionExample</class-id> <category>accessing</category><body package="Roassal2-Selection-Examples">label	^ 'Selection Elements'.</body></methods><methods><class-id>Roassal2.RTStackBarPlotTest</class-id> <category>tests</category><body package="Roassal2-Builder-StackBarPlot-Tests">testBarHeight	| b e |	b := RTStackBarPlot new.	b add: #(37).					b barWidth: 150 height: 50.	b build.	self assert: b view numberOfElements equals: 1.	e := b view elements anyOne.	self assert: e extent y equals: 50</body><body package="Roassal2-Builder-StackBarPlot-Tests">testDefault	| b |	b := RTStackBarPlot new.	self assert: b height equals: 20.	self assert: (b createShapeBuilder current height rtValue: RTElement new) equals: 20.</body><body package="Roassal2-Builder-StackBarPlot-Tests">testExample01	| b |	b := RTStackBarPlot new.	b add: #(1 2 3 4).	b add: #(4 3 2 1).	b add: #(5 3 2 0).	b barWidth: 150 height: 20.	b build.		self assert: (b view elements collect: #position) asArray equals: ((Array new: 12) at: 1 put: ((7.5@10.0)); at: 2 put: ((30.0@10.0)); at: 3 put: ((67.5@10.0)); at: 4 put: ((120.0@10.0)); at: 5 put: ((30.0@40.0)); at: 6 put: ((82.5@40.0)); at: 7 put: ((120.0@40.0)); at: 8 put: ((142.5@40.0)); at: 9 put: ((37.5@70.0)); at: 10 put: ((97.5@70.0)); at: 11 put: ((135.0@70.0)); at: 12 put: ((150.0@70.0)); yourself) asArray</body><body package="Roassal2-Builder-StackBarPlot-Tests">testExample02	| b |	b := RTStackBarPlot new.	b add: #(1 2 3 4).	b add: #(4 3 2 1).	b add: #(5 3 2 0).	b build.		self assert: (b view elements collect: #position) asArray equals: ((Array new: 12) at: 1 put: ((7.5@10.0)); at: 2 put: ((30.0@10.0)); at: 3 put: ((67.5@10.0)); at: 4 put: ((120.0@10.0)); at: 5 put: ((30.0@40.0)); at: 6 put: ((82.5@40.0)); at: 7 put: ((120.0@40.0)); at: 8 put: ((142.5@40.0)); at: 9 put: ((37.5@70.0)); at: 10 put: ((97.5@70.0)); at: 11 put: ((135.0@70.0)); at: 12 put: ((150.0@70.0)); yourself) asArray</body></methods><methods><class-id>Roassal2.RTKiviatFruitExample</class-id> <category>metrics</category><body package="Roassal2-Builder-Kiviat-Examples">w1	^ arr at: 1</body><body package="Roassal2-Builder-Kiviat-Examples">w2	^ arr at: 2</body><body package="Roassal2-Builder-Kiviat-Examples">w3	^ arr at: 3</body><body package="Roassal2-Builder-Kiviat-Examples">w4	^ arr at: 4</body><body package="Roassal2-Builder-Kiviat-Examples">w5	^ arr at: 5</body><body package="Roassal2-Builder-Kiviat-Examples">w6	^ arr at: 6</body><body package="Roassal2-Builder-Kiviat-Examples">w7	^ arr at: 7</body><body package="Roassal2-Builder-Kiviat-Examples">w8	^ arr at: 8</body></methods><methods><class-id>Roassal2.RTKiviatFruitExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Kiviat-Examples">color	^ color</body><body package="Roassal2-Builder-Kiviat-Examples">color: aColor	color := aColor</body><body package="Roassal2-Builder-Kiviat-Examples">name	^ name</body><body package="Roassal2-Builder-Kiviat-Examples">name: aString	name := aString</body><body package="Roassal2-Builder-Kiviat-Examples">values: anArray	arr := anArray.</body></methods><methods><class-id>Roassal2.RTKiviatFruitExample</class-id> <category>printing</category><body package="Roassal2-Builder-Kiviat-Examples">printString	^ name</body></methods><methods><class-id>Roassal2.RTKiviatFruitExample class</class-id> <category>public</category><body package="Roassal2-Builder-Kiviat-Examples">fruits	^ Array with: (self new values: #(6 8 5 2 6 5 7 9); color: Color red; name: 'apple')		with: (self new values: #(5 7 3 7 7 7 6 5); color: Color green; name: 'orange')		with: (self new values: #(4 3 5 9 5 5 4 4); color: Color blue; name: 'banana')</body></methods><methods><class-id>Roassal2.TRConstraintTest</class-id> <category>sticking</category><body package="Roassal2-Trachel-Tests">testStickAbove	TRConstraint stick: shape2 above: shape1.	self assert: shape1 center = (0 @ 0).	self assert: shape2 center = (0 @ -30).		shape1 translateBy: 10 @ 10.	self assert: shape1 center = (10 @ 10).	self assert: shape2 center = (10 @ -20).</body><body package="Roassal2-Trachel-Tests">testStickBelow	TRConstraint stick: shape2 below: shape1.	self assert: shape1 center = (0 @ 0).	self assert: shape2 center = (0 @ 30).	shape1 translateBy: 10 @ 10.	self assert: shape1 center = (10 @ 10).	self assert: shape2 center = (10 @ 40).</body><body package="Roassal2-Trachel-Tests">testStickToTheCenter	TRConstraint 		stick: shape1 onTheCenterOf: shape2.			self assert: shape1 center = (0 @ 0).	self assert: shape2 center = (0 @ 0).	shape2 translateBy: 10 @ 15.	self assert: shape1 center = (10 @ 15).	self assert: shape2 center = (10 @ 15).</body></methods><methods><class-id>Roassal2.TRConstraintTest</class-id> <category>resizing</category><body package="Roassal2-Trachel-Tests">testChangingExtent		TRConstraint changeExtentOf: conformingShape like: originShape plus: 5 @ -5.	self assert: conformingShape extent = (15 @ 5).	self assert: originShape extent = (10 @ 10).		originShape extent: 0 @ 0.	self assert: conformingShape extent = (15 @ 5).		TRConstraint changeExtentOf: conformingShape like: originShape plus: 0 @ 0.	self assert: conformingShape extent = (0 @ 0)</body><body package="Roassal2-Trachel-Tests">testKeepingExtent	originShape extent: 10 @ 10.	conformingShape extent: 20 @ 20.	TRConstraint keepExtentOf: conformingShape like: originShape plus: 5 @ -5.	self assert: conformingShape extent = (15 @ 5).	self assert: originShape extent = (10 @ 10).	originShape extent: 0 @ 5.	self assert: conformingShape extent = (5 @ 0)</body><body package="Roassal2-Trachel-Tests">testResizingHeight	self assert: shape1 height equals: 50.	self assert: shape2 height equals: 10.		TRConstraint useHeightOf: shape1 for: (Array with: shape2).	self assert: shape1 height equals: 50.	self assert: shape2 height equals: 50.</body><body package="Roassal2-Trachel-Tests">testResizingToMaxHeight	self assert: shape1 height equals: 50.	self assert: shape2 height equals: 10.		TRConstraint setAllToMaxHeight: (Array with: shape2 with: shape1).	self assert: shape1 height equals: 50.	self assert: shape2 height equals: 50.</body><body package="Roassal2-Trachel-Tests">testResizingToMaxWidth	self assert: shape1 width equals: 50.	self assert: shape2 width equals: 10.		TRConstraint setAllToMaxWidth: (Array with: shape2 with: shape1).	self assert: shape1 width equals: 50.	self assert: shape2 width equals: 50.</body><body package="Roassal2-Trachel-Tests">testResizingWidth	self assert: shape1 width equals: 50.	self assert: shape2 width equals: 10.		TRConstraint useWidthOf: shape1 for: (Array with: shape2).	self assert: shape1 width equals: 50.	self assert: shape2 width equals: 50.</body></methods><methods><class-id>Roassal2.TRConstraintTest</class-id> <category>aligning</category><body package="Roassal2-Trachel-Tests">testAlignFromBottom	"	TRCanvas new addShape: shape1; addShape: shape2; yourself	"	"TRConstraint alignFromBottom: (Array with: shape1 with: shape2)."	RTAlignment new elements: (Array with: shape1 with: shape2); bottom.	self assert: shape1 position equals: 0 @ -20.	self assert: shape2 position equals: 0 @ 0.</body><body package="Roassal2-Trachel-Tests">testAlignFromLeft	"	TRCanvas new addShape: shape1; addShape: shape2; yourself	"	RTAlignment new elements: (Array with: shape1 with: shape2); left.	self assert: shape1 position equals: 0 @ 0.	self assert: shape2 position equals: -20 @ 0.</body><body package="Roassal2-Trachel-Tests">testAlignFromRight	"	TRCanvas new addShape: shape1; addShape: shape2; yourself	"	RTAlignment new elements: (Array with: shape1 with: shape2); right. 	"TRConstraint alignFromRight: (Array with: shape1 with: shape2)."	self assert: shape1 position equals: 0 @ 0.	self assert: shape2 position equals: 20 @ 0.</body><body package="Roassal2-Trachel-Tests">testAlignFromTop	"	TRCanvas new addShape: shape1; addShape: shape2; yourself	self debug: #testAlignFromTop	"	"TRConstraint alignFromTop: (Array with: shape1 with: shape2)."	RTAlignment new elements: (Array with: shape1 with: shape2); top.	self assert: shape1 position equals: 0 @ 0.	self assert: shape2 position equals: 0 @ -20.</body><body package="Roassal2-Trachel-Tests">testUseAlignFromBottom	"	TRCanvas new addShape: shape1; addShape: shape2; yourself	"	TRConstraint use: shape1 alignFromBottom: (Array with: shape1 with: shape2).	self assert: shape1 position equals: 0 @ 0.	self assert: shape2 position equals: 0 @ 20.</body><body package="Roassal2-Trachel-Tests">testUseAlignFromLeft	"	TRCanvas new addShape: shape1; addShape: shape2; yourself	"	TRConstraint use: shape1 alignFromLeft: (Array with: shape1 with: shape2).	self assert: shape1 position equals: 0 @ 0.	self assert: shape2 position equals: -20 @ 0.</body><body package="Roassal2-Trachel-Tests">testUseAlignFromRight	"	TRCanvas new addShape: shape1; addShape: shape2; yourself	"	TRConstraint use: shape1 alignFromRight: (Array with: shape1 with: shape2).	self assert: shape1 position equals: 0 @ 0.	self assert: shape2 position equals: 20 @ 0.</body><body package="Roassal2-Trachel-Tests">testUseAlignFromTop	"	TRCanvas new addShape: shape1; addShape: shape2; yourself	"	TRConstraint use: shape1 alignFromTop: (Array with: shape1 with: shape2).	self assert: shape1 position equals: 0 @ 0.	self assert: shape2 position equals: 0 @ -20.</body></methods><methods><class-id>Roassal2.TRConstraintTest</class-id> <category>running</category><body package="Roassal2-Trachel-Tests">setUp	super setUp.	canvas := TRCanvas new.	shape1 := TRBoxShape new size: 50.	shape2 := TRBoxShape new size: 10.	canvas addShape: shape1.	canvas addShape: shape2.		(originShape := TRBoxShape new) extent: 10 @ 10.	(conformingShape := TRBoxShape new) extent: 20 @ 20</body></methods><methods><class-id>Roassal2.RTMultiCompositeShapeTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testAlignRight	| v box box2 s |	v := RTView new.	box := RTBox new.	box2 := RTBox new.	s := RTCompositeShape new.	s add: box.   s add: box2.	s alignRight.	self assert: s allShapes equals: (Array with: box with: box2)</body><body package="Roassal2-Core-Tests">testAllShapes	| v box box2 s |	v := RTView new.	box := RTBox new.	box2 := RTBox new.	s := RTCompositeShape new.	s add: box.   s add: box2.	self assert: s allShapes equals: (Array with: box with: box2)</body><body package="Roassal2-Core-Tests">testBeforeAddingToAView	| e1 e2 v |	e1 := RTBox element.	e2 := (RTShapeBuilder new cross color: Color red trans) element.	e1 translateTo: 50 @ 50.	e2 translateTo: 50 @ 50.		self assert: e1 position equals: 50 @ 50.	self assert: e2 position equals: 50 @ 50.		v := RTView new.	v add: e1.	v add: e2.		self assert: e1 position equals: 50 @ 50.	self assert: e2 position equals: 50 @ 50.</body><body package="Roassal2-Core-Tests">testColor	| v box s e |	v := RTView new.	box := RTBox new.	s := RTCompositeShape new.	s add: box.	s color: Color red.	e := s element.	v add: e.		self assert: e trachelShape shapes first color equals: Color red</body><body package="Roassal2-Core-Tests">testScenario	| v s2 s e |	v := RTView new.	s2 := RTCompositeShape new.	s2 add: RTEllipse new.	s2 add: RTEllipse new.	s2 horizontal.	s := RTCompositeShape new.	s add: (RTLabel new text: 'hello').	s add: s2.	s vertical.	e := s element.	v add: e.	v</body><body package="Roassal2-Core-Tests">testTranslationBy	| view shape el ps ps2 |	view := RTView new.	shape := RTCompositeShape new.	shape add: (RTBox new color: Color blue; height: 20; width: 15).	shape add: (RTBox new color: Color white; height: 20; width: 15) translateBy: 15 @ 0.	shape add: (RTBox new color: Color red; height: 20; width: 15) translateBy: 30 @ 0.	el := shape element.	el @ RTDraggable.	view add: el.	self assert: view canvas numberOfShapes equals: 3.	self assert: el shape class equals: RTCompositeShape.		ps := view canvas shapes collect: #position.	self assert: ps equals: (Array with: (0 @ 0) with: (15 @ 0) with: (30 @ 0)).		el translateBy: 10 @ 5.	ps2 := view canvas shapes collect: #position.	self assert: ps2 equals: (ps + (10 @ 5)).</body><body package="Roassal2-Core-Tests">testTranslationTo	| view shape el ps ps2 |	view := RTView new.	shape := RTCompositeShape new.	shape add: (RTBox new color: Color blue; height: 20; width: 15).	shape add: (RTBox new color: Color white; height: 20; width: 15) translateBy: 15 @ 0.	shape add: (RTBox new color: Color red; height: 20; width: 15) translateBy: 30 @ 0.	el := shape element.	el @ RTDraggable.	view add: el.	self assert: view canvas numberOfShapes equals: 3.	self assert: el shape class equals: RTCompositeShape.		ps := view canvas shapes collect: #position.	self assert: ps equals: (Array with: (0 @ 0) with: (15 @ 0) with: (30 @ 0)).	el translateTo: 10 @ 5.	ps2 := view canvas shapes collect: #position.	self assert: ps2 equals: (Array with: (-5 @ 5) with: (10 @ 5) with: (25 @ 5))</body><body package="Roassal2-Core-Tests">testVerticalAndChangingElementSize	| s b1 b2 e view |	s := RTCompositeShape new.	b1 := RTBox new color: Color green.	b2 := RTBox new color: Color blue; size: 20.	s add: b1.	s add: b2.	s vertical.	s setAutomaticRelayout.		e := s element.	view := RTView new.	view add: e.	"No resize has been done"	self assert: (view canvas shapes collect: #encompassingRectangle) first equals: (((-5/2)@ (-5/2)) corner: ((5/2)@(5/2))).	self assert: (view canvas shapes collect: #encompassingRectangle) second equals: ((-10@(5/2)) corner: (10@(45/2))).		"We resize the second box"	e trachelShape shapes second extent: 5 @ 5."	e trachelShape resetInnerShapes; vertical; relayout."	self assert: (view canvas shapes collect: #encompassingRectangle) first equals: ((-2.5@ -2.5) corner: (2.5@2.5)).	self assert: (view canvas shapes collect: #encompassingRectangle) second equals: ((-2.5@2.5) corner: (2.5@7.5)).</body><body package="Roassal2-Core-Tests">testVerticalAndChangingElementSize2	| s b1 b2 e view |	s := RTCompositeShape new.	b1 := RTBox new color: Color green.	b2 := RTBox new color: Color blue.	s add: b1.	s add: b2.	s vertical.		e := s element.	view := RTView new.	view add: e.		"No resize has been done"	self assert: (view canvas shapes collect: #encompassingRectangle) first equals: (((-5/2)@ (-5/2)) corner: ((5/2)@(5/2))).	self assert: (view canvas shapes collect: #encompassingRectangle) second equals: (((-5/2)@(5/2)) corner: ((5/2)@(15/2))).		"We resize the second box"	e trachelShape shapes second extent: 5 @ 5.</body><body package="Roassal2-Core-Tests">testVerticalLayoutAndTranslation	| v s e positions b1 b2 tb1 tb2 |	v := RTView new.	b1 := RTBox new color: Color red; size: 16.	b2 := RTBox new color: Color blue; size: 16.	s := RTCompositeShape new.	s add: b1.	s add: b2.	s vertical.	e := s element.	v add: e @ RTDraggable.	self assert: e trachelShape shapes second position equals: 0 @ 16.		self assert: (e trachelShape offsets asArray) equals: (Array with: (0 @ 0) with: (0 @ 16.0)).	tb1 := e trachelShape shapes first.	tb2 := e trachelShape shapes second.	self assert: (e trachelShape offsetOf: tb1) equals: 0 @ 0.	self assert: (e trachelShape offsetOf: tb2) equals: 0 @ 16.0.	positions := (e trachelShape shapes collect: #position) asArray.		self assert: positions equals: (Array with: (0 @ 0) with: (0 @ 16)).	e translateTo: 0 @ 0.		positions := (e trachelShape shapes collect: #position) asArray.	self assert: positions equals: (Array with: (0 @ -8) with: (0 @ 8)).</body></methods><methods><class-id>Roassal2.RTMultiCompositeShapeTest</class-id> <category>tests - composing</category><body package="Roassal2-Core-Tests">testComposedCompositedShape	| s1 s2 e v |	s1 := RTCompositeShape new.	s2 := RTCompositeShape new.		s1 add: (RTBox new color: Color blue; size: 20).	s1 add: (RTBox new color: Color red; size: 20).	s1 vertical.	s2 add: s1.	s2 add: (RTBox new color: Color green; size: 20).	s2 vertical.		e := s2 element.		"The element has to be added to the view in order to have the #vertical layout applied"	v := RTView new.	v add: e.	"It does not pass for now.. No idea why"	"self assert: e height equals: 60"</body><body package="Roassal2-Core-Tests">testExtentCompositedShape	| s1  e v |	s1 := RTCompositeShape new.		s1 add: (RTBox new color: Color blue; size: 20).	s1 add: (RTBox new color: Color red; size: 20).	s1 vertical.	e := s1 element.	v := RTView new.	v add: e.		self assert: e height equals: 40</body></methods><methods><class-id>Roassal2.RTDynamicEqualizerGrapherTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testBasic	self assert: b numberOfMetrics equals: 0</body></methods><methods><class-id>Roassal2.RTDynamicEqualizerGrapherTest</class-id> <category>running</category><body package="Roassal2-Builder-Grapher-Tests">setUp	super setUp.	b := RTDynamicEqualizerGrapher new</body></methods><methods><class-id>Roassal2.RTResizeTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBiggestElement	self assert: resize biggestElement equals: elements last.	resize useBiggestElement.	self assert: resize fixedElement equals: elements last.</body><body package="Roassal2-Core-Tests">testBiggestExtent	self assert: resize biggestExtent equals: 4 @ 3</body><body package="Roassal2-Core-Tests">testHighestElement	self assert: resize highestElement equals: elements last.</body><body package="Roassal2-Core-Tests">testSameHeight	resize fixedElement: elements second.	resize sameHeight.	self assert: (elements collect: #extent) sorted asArray equals: (Array with: (2.0@2.0) with: (3.0@2.0) with: (4.0@2.0))</body><body package="Roassal2-Core-Tests">testSameSize	resize fixedElement: elements second.	resize sameSize.	self assert: (elements collect: #extent) asSet asArray equals: (Array with: (3.0@2.0))</body><body package="Roassal2-Core-Tests">testSameSizeWithoutFixedElement	resize sameSize.	self assert: (elements collect: #extent) asSet asArray equals: (Array with: (4.0 @ 3.0))</body><body package="Roassal2-Core-Tests">testSameWidth	resize fixedElement: elements second.	resize sameWidth.	self assert: (elements collect: #extent) sorted asArray equals: (Array with: (3.0@1.0) with:(3.0@2.0) with: (3.0@3.0))</body><body package="Roassal2-Core-Tests">testWidestElement	self assert: resize widestElement equals: elements last.</body></methods><methods><class-id>Roassal2.RTResizeTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	elements := (RTBox new height: #yourself; width: [ :o | o + 1 ]) elementsOn: (1 to: 3).	resize := RTResize new.	resize elements: elements.</body></methods><methods><class-id>Roassal2.RTGrapherDecorationExample</class-id> <category>sources</category><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleAverage	| b ds |	b := RTGrapher new.	ds := RTData new.	ds dotShape color: Color red.	ds points: #(5 1 20 8).	b add: ds.	b addDecorator: (RTAverageDecorator new withLabel: #asFloat).	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleAverageAndStdev	| b ds |	b := RTGrapher new.	ds := RTData new.	ds interaction popup.	ds points: #(600 470 170 430 300).	ds barShape width: 20; color: Color lightGreen.	b add: ds.	b axisX noLabel; noTick.	b axisY noDecimal.	b addDecorator: RTMeanDevVarDecorator new.	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleAverageWithName	| b ds |	b := RTGrapher new.	ds := RTData new.	ds dotShape color: Color red.	ds points: #(5 1 20 8).	b add: ds.	b addDecorator: (RTAverageDecorator new withLabel: [ :aValue | 'average = ' , aValue asFloat asString ]).	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleCursorFollower	| b ds |	b := RTGrapher new.	ds := RTData new.	ds points: #(5 10 6 2 -2.5).	b add: ds.	b addDecorator: (RTCursorFollower new color: Color blue).	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDeviation| b colors points ds pts dec lb |b := RTGrapher new.colors := Array with: Color red with: Color blue.points := OrderedCollection new.colors do: [ :c |	ds := RTData new.	pts := ((1 to: 100) collect: [ :i | 50 atRandom - 25 ]) cumsum.	points add: pts.	ds points: pts.	dec := RTDevVarDecorator new.	dec moveBehind;		deviation: 0.5;		color: (c alpha: 0.3);		points: pts.	ds connectUsing: (RTLine new color: (c alpha: 0.5); width: 1 ).	b add: ds.	b addDecorator: dec.	 ].b axisX; axisY.b build.lb := RTLegendBuilder new.lb view: b view.colors doWithIndex: [ :c :i | 	lb addColor: c text: 'Series  ', i printString ].lb build.b view @ RTZoomableView @ RTZoomableBoxView.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleLikertScale| q11 q12 q21 q22 q3 t toVisualize b ds lb |q11 := #(A A SA SA A SA N A A SA N) groupedBy: #yourself. q12 := #(D SA SA SA A N SA A SA A A) groupedBy: #yourself.q21 := #(A N SA A SA A D A N A N) groupedBy: #yourself.q22 := #(D N SA A SA SA D A A SA A) groupedBy: #yourself.q3  := #(D A SA SA N A SA A SA A A) groupedBy: #yourself.t := q3.toVisualize := OrderedCollection new.toVisualize add: #SA -&gt; (t at: #SA ifAbsent: [ #() ]).toVisualize add: #A -&gt; (t at: #A ifAbsent: [ #() ]).toVisualize add: #N -&gt; (t at: #N ifAbsent: [ #() ]).toVisualize add: #D -&gt; (t at: #D ifAbsent: [ #() ]).toVisualize add: #SD -&gt; (t at: #SD ifAbsent: [ #() ]).b := RTGrapher new.ds := RTData new.ds barChartWithBarTitle: #key rotation: 0.ds points: toVisualize, (Array with: '' -&gt; #() ).ds y: [ :as | as value size ].b add: ds.b axisX noTick; noTitle.b axisY noDecimal.b maxY: 5.b build.lb := RTLegendBuilder new.lb view: b view.lb addText: 'Likert scale result'.lb addText: 'SA = Strong agree; A = agree; N = neutral'.lb addText: 'D = Disagree; SD = Strongly Disagree'.lb build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMarkerOnTheXAxis| b ds |b := RTGrapher new.ds := RTData new.ds connectColor: Color blue.ds points: #(3 4 5 6 7).ds x: #yourself.ds y: #yourself.b add: ds.b addDecorator: (RTMarkerOnX new value: 5).b addDecorator: (RTMarkerOnX new value: 6).b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMinAndMaxSetManually| b ds |b := RTGrapher new.ds := RTData new.ds points: #(1 2 3).b add: ds.b maxX: 6.b minX: -2.b maxY: 5.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMinAndMaxValues| b ds |b := RTGrapher new.ds := RTData new.ds points: RTShape withAllSubclasses.ds y: #numberOfMethods.b add: ds.b addDecorator: RTVerticalMinValueDecorator new red.b addDecorator: RTVerticalMaxValueDecorator new blue.b axisY noLabel.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleUsingLegend| clss b lb n ds |b := RTGrapher new.clss := Array with: RTElement with: RTEdge.n := RTMultiLinearColorForIdentity new objects: clss.clss do: [ :cls |	ds := RTData new.	ds points: (cls rtmethods sortedAs: #numberOfLinesOfCode).	ds connectColor: (n rtValue: cls).	ds y: #numberOfLinesOfCode.	b add: ds.].	b axisY; axisX.b build."defining the legend"lb := RTLegendBuilder new.lb view: b view.lb addText: 'Distribution of number of Methods in some classes'.clss do: [ :aClass |	lb addColor: (n rtValue: aClass) text: aClass name.].lb build.^ lb view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleValuesDecoration| b ds deco |b := RTGrapher new.ds := RTData new.ds points: #(0 1 2 3 4 5 6).b add: ds.deco :=  RTHorizontalAllValuesDecorator new.deco labelConversion: [ :value | '#', value asString ].b addDecorator: deco.deco :=  RTVerticalValuesDecorator new.deco addAll: #(2 3 4).deco labelConversion: [ :value | '#', value asString ].b addDecorator: deco.b axisX noTick; noLabel.b axisY noTick; noLabel.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleVerticalAndHorizontalBars	| b ds p |	b := RTGrapher new.	ds := RTData new.	ds points: #( 0 1 2 10).	b add: ds.	b minY: -3.33.	p := RTHorizontalLineDecorator new.	p add: 5; add: 7; add: 3.34.	p shape line color: (Color red alpha: 0.3).	b addDecorator: p.	p := RTVerticalLineDecorator new.	p add: 3.	p shape line color: (Color blue alpha: 0.3).	b addDecorator: p.	b build.	^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleVerticalAndHorizontalLines	| b ds |	b := RTGrapher new.	b extent: 300 @ 200.	ds := RTData new.	ds noDot.	ds points: (-50 to: 100 by: 0.1).	ds y: [ :x | (0.1 * x) sin  ].	ds noDot.	ds interaction popupText: 'sinus'.	ds connectColor: Color blue.	b add: ds.	ds := RTData new.	ds noDot.	ds points: (-50 to: 100 by: 0.1).	ds y: [ :x | (0.1 * x) cos  ].	ds noDot.	ds interaction popupText: 'cosinus'.	ds connectColor: Color red.	b add: ds.	b addDecorator: RTHorizontalTickLineDecorator new.	b addDecorator: RTVerticalTickLineDecorator new.	^ b</body></methods><methods><class-id>Roassal2.RTGrapherDecorationExample</class-id> <category>icons</category><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleAverageAndStdevIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACvElEQVR4XuXbX0vCYBTH8d6wb8ALBRUE30EgeCmEIAQD0QvF6qoEh0r+uUkowa5EcILaWXsGK7MpwjY39/3F4WFtOtqH7em4eWOa/EQpN/xDwAfhhw/CB+GHD8IH4YcPwgfhhw/CB+GHD8IPH4QPwg8fhA/CDx+ED8IPH4QPwg8fhB8+CB+EHz4IH4QfPggfhB8+CB+En3iAFAoF0TRN8vm85HI5qdfr4qzbbDZiGIaokX+oLwTSbrclkUjYGJlMxh6ddcvlUmazmajx2Os/zBfr5/an1DIfxEPUGaDG9Xotqg7Xi5VTr+eDXHgO4YNEDOT19Uvu7+VoNYfPsg+ilk9tH/UaDkX4IHwQPggfhA/CB+GD8EG8g1QqFanValIsFl079W7XkGp16xnkWuBCB+l0OvbHI9ls1rVTf3iYy92dwQe59CVLnQ1unbpflyy/QWpP7/Z7OqWW+XNIiCBBnXF8ED4IH4QPwgfhg/BB+CB8kFiCjMdj0XVdms2mNBoNGQwGfzp1XV9HslOPLUi5XJZUKiXpdNq0yh73O/XHx89IdupB7Td0EPVxyXa7lVarZZ8lu91O4nTJujqQuM8hfBA+SLAZjb5E0+RotcZ//2C17GW7cyuo/Vr/4wjiMSC/HxcKa798ED4IH4QPwgf5TalUsrvz+Xzu2qmvVquTT7/7fWDC2i4yIOrrCL1eT5LJpLh16n49/c4HOTMKoN/v20+buHXql75k4UGiNofwQfggfBA+CB+ED8IH4YPwQfggAYE499QPf8/v1EMCOezQ9zv1yWRi3bQZynQ6da236du/usbtnFosFuHfD3HuqZv8RH8O4YcPwgfhhw/CB+GHD8IH4YcPwg8fhA/CDx+ED8IPH4QPwg8fhA/CDx+EHz4IH4QfPggfhB8+CB+EHz4IH4QfPgg/fBA+CD9n5Rv6/4j1KSpjNgAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleAverageIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACuElEQVR4XuXczWrCQBiF4d5sF/YC3PoD6tatuPQGBBeC4g9u9BIUQSlVURRFFyKoJ3UCQis6sVab1PfALEoN6DzJTL5MkhfH4SdIeeF3AR+EHz4IH4QfPggfhB8+CB+EHz4IH4QfPgg/fBA+CD98ED4IP3wQPgg/fBA+CD98EH74IHwQfvggfBB++CB8EH6CD7JarbTf7zUcDmX+3m63Mo3fpT4eIZlMRovFQvP5XJ1Ox23H//X7fafdbmM6Uh8f0uurfAOJRqPK5/OKRCJqNpsqlUpu+/qZAwr/iAnSHMIH4YPwQfggfBA+CB+ED8IH4YM8CchgMLhYqfNBfAAJh8Nup5+r1FutFr+H/wqkVqs5lUpFsVhMjUaDX6nz5xA+CB+ED8IH4YPwQfjhg/BB+PkzENuaOh/EBxDbmvqzV+qj0cj9vcvlUqYFolInr6mnUin39+VyOdXrdfHnEJ+TTqdVLBZldszTnTGwIIchzaE0HYI9QvT+LoVC4k/q/CGLD8IH4YPwQfi5A8h0OtV6vXY7fTKZiA/iM0gymdR4PJa58dos5Z5g3FypP+sZ1MNBstmsWxBVq1UlEolvHWjOyflHCH8O4YPwQfggfBA+CB+ED8IHAYG4dcXbGx/n0SBfq/PTSn2326nb7d6EYLbdbDaYbe8GcqzQz1XqvV5PZmnTLPX+tJXLZRUKhX+37fGGD99A4vG4e+f7uUrd7C2z2eymL0jb9uFziG0o84rXBUuv/OZVH7aHjy7l3q8YeQiIbSjziu2C5TW5dFvSNbn08JFXbK8YCQSIbSjziu2CpS3X3Jbkta3t4SPbzuf1ipHAnPbywwfhg/DDB+GD8MMH4YPwwwfhhw/CB+GHD8IH4YcPwgfhhw/CB+GHD8IPH4QPwg8fhA/CDx+ED8IPH4QPwg8fhB8+SJDzCdJH+DKX7bt+AAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleAverageWithNameIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADHklEQVR4XuXczUsqURjH8f5OV25a2F63qZBu3Wq0CsSNILgI0krd6EJw6wsolYovkeRCBOuZO+eA0BU94/VqTn5/cIioE835nHl55oxzZln8uCln/CHgg/DDB+GD8MMH4YPwwwfhg/DDB+GD8MMH4YcPwgfhhw/CB+GHD8IH4YcPwgfhhw/CDx+ED8IPH4QPwg8fhA/Cj/tBptOpfH19Sa/XE/X9YrEQ1fhDesQ9JB6Py2Qykff3d2k0Grotf9bpdKx6vY4ZSHl9FTk/l6OBBINByWQycnl5KeVyWe7v73X7/js2Cn+PcdM5hA/CB+GD8EH4IHwQPggfhA/CBzkRkG63u7FS54McASQQCOhBX1epVyoV/gj/FMjT05P18PAgoVBISqUSv1Lnn0P4IHwQPggfhA/CB+GHD8IH4efHQExr6nyQI4CY1tRPvVLv9/t6ez8+PkQ1V1Tqp7Cm3mw29f8+Go0kl8uJel4gFouJvY2Sz+fF7/dLtVoVe4LJYDCQRCKhtysajeqvt7e3UigUhH8O2VNSqZTUajXxeDyiJtnNzY0kk0nx+Xxqwller1eKxaJu8/lcXl5e9HYptLu7O91ndTK6FsQ+pFm/ub29vUk6nd5qO8QOdg+R52exp7DwT+r8y14+CB+ED8IH4WcPIOPxWGazmR704XAofJAjg0QiEV0oqUJKLeWuYOxcqZ/qFdTBQa6vr3VB9Pj4KFdXV38NoLom5+8h/HMIH4QPwgfhg/BB+CB8ED4ICETXFRcXfJxDg3yvzlcr9c/PT2m1WjshqL5qIYjSd28gywp9XaXebrdFLW2qpd5/bWoZNZvN/rq+ywc+jgYSDof1k+/rKnU1W9Rq2y5/l9b34OcQ06HMKU43LJ3yP6/6MH34aFP2/YqRg4CYDmVOMd2w3CabHkvaJps+fOQU0ytGXAFiOpQ5xXTD0pRtHkty6mv68JFp8jm9YsQ1l7388EH4IPzwQfgg/PBB+CD88EH44YPwQfjhg/BB+OGD8EH44YPwQfjhg/DDB+GD8MMH4YPwwwfhg/DDB+GD8MMH4YcP4ub8ASxv3uJpWgWIAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleCursorFollowerIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACdUlEQVR4XuXazYsBYQDHcf82F5G4Kpz4AzhyUDhw83ZC5ERKSQ7Ka95+1jOt2t12t91m1o75fmty8nhmPs0wj/Fdr/zclI9/CPgg/PggfBB+fBA+CD8+CB+EHx+ED8KPD8KPD8IH4ccH4YPw44PwQfjxQfgg/Pgg/PggfBB+fBA+CD8+CB+EHx+ED8KPD5LNZpXP51UoFFQsFhWLxfRMB0+3LpeLPAPSarU0HA7V7/cVDocViUTe7dx4PHY10G6303a7lScvWcfjUfv9XvxLFj8+CD8+CB+EHx+ED8KPD8IH4ccHeVjmRvS28UHcklmHOp1O4oO8ZtaqMpmMdUCSyaT4F6x/Bul0OsrlcjIwm81Gn4E5+XnL5VK3jQ/yVd1uV/V63VrtrdVq/DOE/yuLD8KPD8IH4ccH4YPw44M8530F/wzhg/Djg/BB+D0tyGq10k838/hoNBo1X8zy+/36zXvdsnnqDLk/PrpYLDSdTvmLi264ZJl/7fiPkf4BiFlCn8/n1kEtlUq2D26lUtH91Yxtd7z7nJwYr91u6+OYrgIZjUZqNBoKBAKaTCZar9e2J3g4HDSbzRQMBs1me47pdNr6E8yJ8cxT+2/38z5XV50hg8FA5XLZgkmlUrYnl0gkrLGq1arO57Pt8UKhkGPjxeNxM87V7Gez2ZSZK/9nL/87xLm8uAbFP0P4IPz4IHwQfnwQfu4CcfIOmg9is16vp+/uoM0KAB/kwTl5B80H4ccH4YPw44PwQfjxQfjxQfgg/PggfBB+fBA+CD8+CB+EHx+EHx+ED8KPD8IH4ccH4YPw44PwQfjxQfjxQfgg/PggfBB+TvUCoQ9cNP2p/78AAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleDeviationIcon	^ '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QmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleLikertScaleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEiElEQVR4XuWcaU/yQBSF/f+/yA9GjSZCXCK47/uKG4obUWecZ/JeUhFs5RWpPSdplOHOTLlPW+5hKEPe6ytPGtJPgT4QfekD0QeiL30g+kD0pQ9EH4i+9IHoA9GXPhB96QPRB6IvfSDqQFxQs9l07e2np6duc3PT/cQO3t3dufZNH0gX7e7uul6e++YcnzZ9ID8MSx+IPhB9IPpA9IHoA9EHog9EH8hX2tjY6Jh0fEipVHI/4S/0gfzSGZI10fpA9IHoA9EHog9EH4g+EH0g+kD0gQwYSL1ed29vb64XH6IPpA9A9vb2nP4Zon/J0geiD0QfiD4QfSD6QPSB6AMpOBA8CNL3ITkBsrKy4hqNhtM/Q/QvWfpA9IHoA9EHog9EH4g+EH0gBQZycXHRMeknJye/7kOyfs8r7/eb/BeQ/f199/z8nAsfUpQzrjCXLH0g+kD0gegD0QeiD0QfiD6Q4gBh3aNWq7lOPmR0dNRVKpWuW7lc/rTlKe67G7kYOJDj4+Oed2Jrayv2vb6+zjRGlriHh4fMY93f338Ze3R05LLE/ZlLVppmZ2fdy8uL297eTn3BWeO4o2t9fT01bm5uzq2urrqvzvy1tTWXFlcoIGNjYw4ol5eXLgu8LHEAOTg4SI2bmppyk5OTXeP4OGVkZMSlxRUKiL70gegD0Zc+EH0g3YQX4Tezirr9SSD6x3tOgfDlxmazmalflriwKKYPpBcgwe2aM/Y7Ozs4aX9+fu6DyePuq/hc8BcsBfunpyfcMauQMd7agyeIfXjM/4zBWMG06QPpBQhHMwkMJssHFx2TzmOS/M/M+aWlpZjo4IojqJmZmQgFONaHOECGj1xi/4WFBX0g+u8h+kD0gegD0QeiL30g+kD0lQcgZ2dnPnzM4MOqWyxX8RKUsYjSljL26uoqlsC04zNou729jaVtWJhiscgzDn2Jo/x9fHz0Nzc3MQ4dHh7GNhs7zM3tdrGMph0/Qzzr59aH+Zk72S+spbRKccpwvNHExEQcz8b800B4AXgM/AQJxoUDB/FizdyZ8yaG5ISl4ehDgDE+Pu4XFxdjQokjMQAgyQjQPP/6+toamzHwKcQxt8Uzvs1F0gGd7Gf7yRx4H/osLy+39us3vE/fL1kc5Z1k7XbUkRgTQEiEaXp62ocl1Q9xfBxj5rLT2Iyb/EYJ8bQ3Go3UfWcOu5fV5mvfX/33EP33EH0g+kD0pQ9EH4i+BgekVqvFEjIpPl6n+sEDZBXlp3kT/EhS+JwOv+7xQZSzJqo3yunvzF8YILZARcKo40km9T+QSBKlLImuVqv8TEcsY/EJ/KX0JWmUmZg3+jEeniNp5pKQmKder/vh4eHW2oothvHY/Adj0w8jaPtCHHBtXtoGsTLZVyAkG+OWFEcnZw6JMyActaVSqeUbKpVKbCeWxHOGkDj+b/cRAAIEiTRTaCuOJBXYjEMcmp+fj/E8DyjambdcLsd9snmBo/8eoq/+AeEOXf2vAeUIiL70gegD0Zc+EH0g+tIHog9EX/pA9KUPRB+IvvSB6APRlz6QYusdM8tBXZ5uKHAAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMarkerOnTheXAxisIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADFklEQVR4XuXcQUtqQRjG8VZ9jL5my1q6qYULaREItYoKC1clolJqauZChMhCQRQRFLV7E0oer3PAS2HIDc/VOef/gKsDwzg/3zPH16mNyYQfm7LBXwI+CD98ED4IP3wQPgg/fBA+CD98ED4IP3wQfvggfBB++CB8EH74IHwQfvggfBB++CD88EH4IPzwQfgg/PBB+CD8eAMkEAio3+8rmUzq5uZG/OVcM0g4HHYQHh8fVS6Xv4C8vb2p1+vxkVYJ0ul0VKlUVK/Xlc/n5xafD2LZHuJ3kNfXV/FBLMndnVQs8kHWnvFYuryU+LcsS6pi+vwi/h7i86rgg1hWFXyQf6yKw8M2/7GXWBV8EAv2Cj6IxVXBB7GsKlwDCYVCzhsxnV7T8f18zTQX2+221SDX130rqsI1ENN6L5VKisViurq68kxzcVYVHx8f1s0Pd8uyZa/Ag5iquLiQ9XsaAuT21u6qwIAMh791diZPfRfyLcj0wU+ZzC/PdQp8B2L2Cq9VhW9BTFWUy/J0h9kXIF6vCl+B+KEqfANyetqa+C38bq+fQJ6enpwFz2azGgwG/INy6waZdXhzuZxOTk6+LH6r1dLz8zMfZJUgOzs7E9Pljcfjc2d7+RXC30P4IHwQPggfhA/CB+GDUEG0v79wftrbEx9klSBbW1rmOh+ED8IH4YOsCmN3V2bBdXyshdePjuQZkGAw6Ew2nU5Pf7/OeKp1ovNzaXNTenjQwuvFondA3t/fZZqI1WrVeX2+NhqNVKvV1O12XXs1m01Xxxttby+8Pm3WTX4ynhsfwKVAUqmU83fq9/f3KhQKc5Mx53vd/PS4PZ750Ng2Hv9/nRC+GM5Ow5sfrb6rnJ9mOBzq4ODAGefl5WXp8SKRiEy1uTU/k9lh82Xn919AZqfhzcn4RCIhN4ANinl4ML+9LDteo9FQNBp1bX7j8fjvw82y8+Pfsgi3LH74IHwQfvggfBB++CB8EP4S8EH44YPwQfjhg/BB+OGD8EH44YPwQfjhg/DDB+GD8MMH4YPwwwfhg/DDB+GD8MMH4efb/AE7UEBHDfiIBAAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMinAndMaxSetManuallyIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAC/0lEQVR4XuXcS2vqQBiH8X45934aQRdeQDeu3EqXrkRFQURU6mUhuhNcKOJK8VaoileQ4pvTCXjw1Es9KY2pzx9ChPqSOr9O0pmJedI0fqyUJ34T8EH44YPwQfjhg/BB+OGD8EH44YPwQfjhg/DDB+GD8MMH4YPwwwfhg/DDB+GD8MMH4YcPwgfhhw/CB+GHD8IH4ecxQRaLhahNvR4Oh8Jv/juDRCIRKZfLMplM5PX19R+Q+Xyudbtdfc8HMSkvLy+Sz+elVquJ2+0+6SGz2Uz4PcRC4YPwQfggfBA+CB+ED8IH4YPwQR4A5O3tTW/wwWAgm83mZHDIBzEZJBQK6Q2eTqclFovpg8TjkXqz2eSP1M06ULvdFofDIfV6XRqNhrRaLXG5XPwewr+G8EH4IHwQPggfhA9ye9Si2Hq9Fj4Iv4fwQfgg/5Hlcin7/f7vaJ0PYoEeEg6H9UZ/fn4+WVPnj9RNBvF6vZJKpaRarYrf7+f3EP41hA/CB6GC9Pt94YPwewgfhA/CB+GD8EFMymq10hu81+vJbrfjr6nfGyQYDOoNrmZf+WvqdwZR6+g2m01fU7fb7fod8Mdr6vKR6XSqdsIH+QXXkN+0psG/qPNB+CB8ED4IH4QPwgfhgzw8yHa7vdio7+/vojb1+tz31MfjsfzEca1aawrIx4BPK5VKZ7d4PK6P0AuFgiQSCTn+WTablWg0qu8v1V/bksmkZqTuu7Xq81oaZDQaXfyLUVMll76nrkboqtboSP3aca1a++MgatLw86nplnx1KruW41uLjDyu4zuP+lBTPWr/eZLUMiCHD9fpdERtt9Yd3n/ukRu3RN1aZKS2UqmIx+PRjNTmcjlR9epOGp/PZ00QNWmoftHDqenWumunsq9yuLXISK1CcDqdhmrVM1symYwUi0UJBALykP/28sMH4YPwwwfhg/DDB+GD8MMH4YPwwwfhg/CbgA/CDx+ED8IPH4QPwg8fhA/CDx+ED8IPH4QfPggfhB8+CB+EHz4IH4QfM/MH1/IkxV9vyMYAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleMinAndMaxValuesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACrElEQVR4XuXbvWvqYBjGYf/zUhEKnTo41M1NMupUXFrEKQ6lgyB0EEEQFT9BrV93Tp+UlFSO57T1TdX+bgg1mD4m7/V+JNKmgoCfU0qK3wR8EH74IHwQfvggfBB++CB8EH74IHwQfvgg/PBB+CD88EH4IPzwQfgg/PBB+CD88EH44YPwQfjhg/BB+OGD8EH4OX+Q0WgkfvP+IMjLi3R3J3me9PwsPT2JD3DsEXJ9LT08SJeXku9/BLm9PQyo1WqJD/KFPD5KFxdBkMu9Nby95oe/qPNB+OGD8EH44YPwwwfhP6nzwx8hfBB++CB8EH74IHwQfvgg/PBB+CD8HA1kOBzyn9T5I4QPwg8fhA/CDx+ED8IPH4QfPggfhB/+kzofhB8+CB/ktLJardTr9cQH4ef8QWazmbbb7XtvXi6Xv6pnLxYL2XY2IPP5XBabYtbrtabTqTabzfsFdDodJdU4g8Eg/Mwkr886mMtOdrQpK/qXtWj0uPjT093GiY9M/pT1xUwmk8Qbr9lsKj4qo/1fBaJaTUk0WnzferqtRTb92DQUvWejKr59dqraN3L+BRSdQ/RZ1oGS6ESHg/j+X09qcHUVrhcuNrvwbrcbvh6Px/89fveYdrst++Zg3/EGsbtvx0e/Zz/j57BvOw2QmxsF9/f8+1X+cwgf5NNJp9PhvF8sFlUqlQ4ayvl8PlwPrKbtZzIZlcvlb9csFAqvy17NWT3P81SpVJzVSwSk3++H83ij0VC9Xj8IxH9do6yezeMRtl30d+tVq1Wn9ewGIpvNOquXSurp1b5vSqKmq6diV/XszstlPf4awl/U+eGD8EH44YPwQfjhg/BB+OGD8EH44YPwwwfhg/DDB+GD8MMH4YPwwwfhg/DDB+GHD8IH4YcPwgfhhw/CB+GHD4LNHyhras4H+gdeAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleUsingLegendIcon	^ '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gg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleValuesDecorationIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACrUlEQVR4XuXbyYoiQRSF4XpuNz6JuBFEfAHRjRMq4gSigjgh6EJwWjigeOy+TQtd3WJIU1Zm+h9IqMXFKuIzMrLiZnxcr/z4KR/8IeCD8MMH4YPwwwfhg/DDB+GD8MMH4YPwwwfhhw/CB+GHD8IH4YcPwgfhhw/CB+GHD8IPH4QPwg8fhA/CDx+ED/KfWa1Wogzk+XzWYrGQr0HG47H433k+CB+ED8IH4YPwQfggvoh+Zr/fiw/ik1wuF+12Oz4I/5bFB+GD8MMHeX+Q7Xar2+LHB/EYZDKZKJPJKBqNarPZfBr8crksP4PYZuByudRbgTQaDdVqNc3n819X0GaI/Y/BX0P44YPwQfggfBA+yO8Mh0NVKhV1u13+Y6/XIPV6XZFIRKVSSfl8/tPgDwYDTx57T6fTl/S2AwkyGo1kl6Hc2xHlzxD+GsIH4YPwQfggfJCAgNjmom0sxuNxNZvNly7q393bDiTIdDpVp9NRsVjUq2fId/e2+bcsfvggfBB++CB8ED5IsEH82ttGzxA/9rb5tyx++CB8EH74IHwQPog/Qay3bbvB1lt3Xfb24zvUfcW5/JfOkPV6LS/qnh0Yr+o8A+GHD8IH4ScgINZNLBQKOhwOctWl02k983nWKra9L1ddIpFwdhetzrqQz/x9sVhMvV7PWZfNZu+2sj0HsddKk8mkwuHw1S5XXbVa1TOfZxj9fl+uOltcW62Ws84G+u+DRvfqUqnUP29m3qsLhULK5XL+A7HDO7PZTHagx979ddXZI+PxeHTW2TvEj775tzrr8T9CvtXZz49myJ+/t91uO+usxk6O8dcQ/hrCDx+ED8IPH4QfPggfhB8+CB+EHz4IH4QfPggfhB8+CB+EHz4IP3wQPgg/fBA+CD98ED4IP3wQPgg/fBB++CDByA9txEgft66zuwAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleVerticalAndHorizontalBarsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAADiklEQVR4XuWby0ojQRSGfUd3voJ7t0o2bhQUdOdS9AHcKC6ihohGFO+aRRIVgzHEGPF+ycn0X0yJzQyazqjdzvdD0d2Qsqvr85yqc6qqq9XiK0nq4ncBHwhffCB8IHzxgfCB8MUHwgfCFx8IHwhffCB88YHwgfDFB8IHwhcfCB8IX3wgfCB88YHwxQfCB8IXHwgfCF/JAnJ+fm66lstl43dnjEAEYHR01MbHxx2I3d1dazQar1Dq9Xrr8vIS1Zn39/euxAKkv7+/NTc3ZwMDA7aysmLDw8N2d3f3CuTo6MhoQB4fHy02IB8psBC+C+MD4QPhA+ED4QPhA+ED4QPhA+ED4evTgCgAGhkZMUlB4cLCgvX09IQidQWG9ULB7OKCVV5e7NuBXF1dWW9vr21vb7vUSTqdttnZ2VBDiJF6rC5L1vH09GT+nu+y+GMIHwgfCB8IH8hnAsHNsOKaZfEthO+y+ED4QH4QEMUdPhC8CPzm6uqqLS8vhwCcnZ2FlnT5+mILmZmZsWazaep4Aenu7raTk5NXAPl83ipBCcJ1VoljUK9Wqy6HpU4/Pj62ra0tu729Nb7L4o8hfCBfBUTj0vPzs/GBJASIJgB8q+K7LD4QvhIGRKuKwcIVHxbfQv5zIIo7xsbGXKdnMhltMg4BqFQqHW88fgmCq7fr81H1L0vHNzc39vDw0NG7Y9/9rsb7e5W3KpVKOqLQUuAYtRQKBVtbW7NO6qoEmYNWp3UV5B4cHHRUd29vz2q1WjxAFKVrt8n+/r5tbGy4TuRbSIwW8p6GhoZcTLG+vv5H0vEjTU9PuwAxsDCbmJiIVFf/IHKfvg1R6ipJOjg46OpMTk46K2m37tLSUuid2Ww28nd/GRAdcZP1FItF070/8tauBGNnZ8eZv//QdnV4eGiyLt+GqLO5qakp9/uo787lcqF36qqSCCDKAOt4mxKQGvjluqLUV9LSp1Lm5+ctqqvzLkdt+Nv2pPck69LWJv2NdDrddr3T01Pz3636+nZlwfnTXn4cwgfCB8IHwgfyI4BcX18rCHKdro3VuvpnPpAYgGgWoSMJPnbQ1T//noK6aJ2vbwKyuLhofX19bm09lUrZ5uame+Z3aULHEL74QPhA+OID4QPhiw+ED4QvPhC++ED4QPjiA+ED4YsPhA+ELz4QPhC++ED44gPhA+GLD4QPhC8+ED4QvvhA+ED4SoJ+AbqWxW0ZX8E0AAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleVerticalAndHorizontalLinesIcon	^ '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'</body></methods><methods><class-id>Roassal2.RTGrapherDecorationExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Examples-Examples">label	^ 'Grapher - Decoration'</body></methods><methods><class-id>Roassal2.RTColorPaletteTest</class-id> <category>tests</category><body package="Roassal2-ColorNormalizer-Tests">testDiverging	| palette c c2 |	palette := RTColorPalette diverging.	self assert: (palette colors: 11 scheme: 'RdGy') size equals: 11.	c := (palette colors: 11 scheme: 'RdGy') first.	c2 := Color colorFrom: '#67001F'.	self assert: (c closeTo: c2).		self assert: (palette colors: 6 scheme: 'RdGy') size equals: 6.	c := (palette colors: 6 scheme: 'RdGy') second.	c2 := Color colorFrom: '#EF8A62'.	c assert: (c closeTo: c2)</body><body package="Roassal2-ColorNormalizer-Tests">testQualitative	|palette |	palette := RTColorPalette qualitative.			self assert: (palette colors: 9 scheme: 'Set1') size equals: 9.	self assert: (palette colors: 3 scheme: 'Set1') size equals: 3.</body><body package="Roassal2-ColorNormalizer-Tests">testQualitativeError	|palette |	palette := RTColorPalette qualitative.			self should: [palette colors: 1 scheme: 'Set1'] raise: Error.	self should: [palette colors: 80 scheme: 'Set1'] raise: Error.	self should: [palette colors: 9 scheme: 'Pastel2'] raise: Error.</body><body package="Roassal2-ColorNormalizer-Tests">testSequential	| palette c1 c2 |	palette := RTColorPalette sequential.	self assert: (palette colors: 3 scheme: 'Purples') size equals: 3.	c1 := (palette colors: 3 scheme: 'Purples') first.	c2 := Color colorFrom: '#EFEDF5'.	self assert: (c1 closeTo: c2).		c1 := (palette colors: 3 scheme: 'Purples') second.	c2 := Color colorFrom: '#BCBDDC'.	self assert: (c1 closeTo: c2).		c1 := (palette colors: 3 scheme: 'Purples') third.	c2 := Color colorFrom: '#756BB1'.	self assert: (c1 closeTo: c2).</body></methods><methods><class-id>Roassal2.RTPieExample</class-id> <category>accessing</category><body package="Roassal2-Builder-PieChart-Examples">label	^ 'Pie chart'</body></methods><methods><class-id>Roassal2.RTPieExample</class-id> <category>icons</category><body package="Roassal2-Builder-PieChart-Examples">exampleEmphasisIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFf0lEQVR4XuXc608iVxgGcP/Zbfof9Eu/NOkHXXU13abZdmvamGZ3Y6tdhfWyWqQKIiCiIIosCMhVYVguA3J9p/OeLjReUIHpKjxP8obLECLnx8w5M+fgkKLg5zFlCL8J8EHwgw+CD4IffBB8EPzgg+CD4AcfBB8EP/gg+MEHwQfBDz4IPgh+8EHwQfCDD4IPgh98EPzgg+CD4AcfBB8EP/gg+CD4wQe5KSWng3Jv5yg9Maa0re8mSN78m6rxGLV7n9ngIXHwQbpIQ5Ypr5u/HaFNpSbGqGS3Xmr45Yifxt0WhSsi5wgfpIN0C3G1ZKNBNHyxVm1hNMuXlQgf5I5UE3FKT45rgpF6Ntpq8Fd+9zWQf1HShA/SJpVwSBOIZpWPDkVjnxaylzDGHBvK6PZfytON5Ud1+Bp6XBhhTTEyP//YauTvPbZLICOrOmXctaWMrMwrT41L4jYWi1EoFCKj0UiBQIDcbjcFg0Fx3+l0UjQaJRiQWjKhKQYXvye/976UvHaoYpDh+RlleHFOGVnTKyPri8qb7U3R+AaDgQ4PD8nv95Ner6f19XXxN5pMJhwQrfqMZmVnZ1qNd1O/0a5SF8UbG71UKlGxWMQAyesXNN87qFajq8Pc+9RrteOH7kMackFzjMJ6+2HufeohTxofHCS38FZzkLuGuXeV5SzS/yA8QnG5XOKD+Hw+cZ87xt3dXSoUChSPx2l2dpYikQjt7OyQJEm0v7+vOUa7YW4n9cuxs/9B7Ha7+BDqiIS8Xq8A4YbnYSQj8DaLxUIOh0Pc5+32jQ1NQaSXL9oOczutgThkVatV0SCVSoUajQbx43q9Lp7jx7VPHW3zNjf/p6Yg1UT7YS4kSMdDXS2HuX90N8xtVzX1C4QP0ssw99PeuRY7ocmD7Z4rVynjg/Q6zB2EDATIIGUgQHy76jB706X0UgdbB/hXe7UCqZQrPYN82PuAD6LlISvii/SEkggm8EHSzydJyz5EbdiuUc4j5/ggsmlDM5BUVEf5TL5rkEa9gQ9SOz/XDMRrfaI2apm4L+gCBH9OvRleqqMVSNgzQvVavWOQZCiJD9JMyWbVDIRLznqIO+hOQPDPQ67uJc9GSSsQr/UL8W13m9z3Qon5Y/jrsq6mEjzpCUS9pExe65fUREmGXlMhW6B+6jseFQiHr9Z2C1LPZsnv/Ir+20ueKLVqjgKugEAxL5sV3YyuBbE2vyZu5Zx8DYQnznjJT/Px6ekpQYJwMlMvu0KpRqMU8gxfAgm6vyVqkAAx6o0C4N3v75S5V3PKzPSMsrq4KibReNJsaWmJNtTJMm785mQar8my2Wxi1nNvb08sB+LXZDIZsfqEn7NarWLC7ejoiAYShBcXSD887xil7D2iqO/FJRCufMZJfMJn0BnEXrG5tCnKZrKJhufJs3N16M3TzxcXF5RKpSgcDovi7c1tfJvP58VzsiyL16bTaTo+PhbbeK8aSJBmPv423RFKyWGnZOjNNRAujsfiafUnUkIi/Ku9XaTwfuXeKEWLWT1TX1BuAon7p6iYLzII3dRn4IN0ciavHgo+Tv9KvYBwVS7O+mYCqy9+QVVTj+23rW68CySw/zU+yP93/euMGKCwukKZqZ+If8JW3LbQbSBc2ZSF8EE+59n+HSDNDh4f5DNFSqzRbRhS/D3+HvI5k5cc10BOXN9QNrXVVytSBgakWk6LfiQVWSCvx0wej6cvlwYN5D8O4DNqviRiNpvFdSk+28YHecAkEgnxszQuvhzCP1PDB8EPPgg+CH7wQfBB8IMPgg+CH3wQ/OCD4IPgBx8EHwQ/+CD4IPjBB8EHwQ8+CH7wQfBB8IMPgg+CH3wQfBD84IPgg+AHHwQ/+CD4IPjBB8EHwQ8+yIDmH9dg+7bM7y8iAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-PieChart-Examples">exampleLabelledChartIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAFQklEQVR4XuXb608iVxgG8P1nN/20SdNPzbZpsp/6pXZrbbbNdtMa0q712ijFS9yAFxhERlDkIqDAogsG8YYwXNR3ynvqkJV1XRyOFXie5A0IJCbnl5lzzpxzHuk6fjopj/CbAB8EP/gg+CD4wQfBB8EPPgg+CH7wQfBB8IMPgh98EHwQ/OCD4IPgBx8EHwQ/+CD4IPjBB8EPPgg+CH4wQGrv9qjkdunNpamrdHF6Svgg9xw6P6eSx02FaRvln3+nf6oOX/5MJZeTyoF1wgeRmMtymUqKk/I/9bcEcVMdDf5G2ppK+CBtRvOuMoJpiPcrMPInjSRCtK8VCR/ERArWSSkQV0V9AYX6Nt06V+T4gPBBWu0rLi/pZGRIJoY+5ZhpYBj15l1CoGQyGUomk8Thv8/Ozhrv8UHqORn5SypGvv/7DzCM8ueztLa2JkD8fj+l02na2NigQCBAwWCQdnZ2yOFwUDgcpqmpKdrf36dIJCK+hwAp2KxyMeo1ujDzURBxpfi8xFdJLpej4+NjOjg4EA3PGOX6gII/9/l8FIvFBEKpVKoP+M57H0RTvdIx1LHXt2Jw/RjyUPXiouUGZqSev2Xx0Db/vE86yKC69EkQLkcmSfid+nsR8wzJGG8mh/VWMIzKlArU0yCaptFNl3fzCIZn4LIxci8Grg1zWylLfKP3QDY3NwUCd4BWq1WMTrgT5I4yGo2K0QxXKpUSHSmPZLJzM/KvDtvEnTCMunzg4e69gHBD8wjFYrFQKBSi3d1dymaztL29TXt7e2LIyFA8zOT3hel/pIJEfn9pCsMYBvcUyMXVaKVarYrXSqVSn+ddiomW8ZnxG+PW9X8Pc28rfrQC3alX67cumRhByyvTGEZBg/D6hUyQgQ0FH6RTQJyzk21j4INIBJGBgQ8iESRYn1wGlgN6u4UPIgkk6n2KD9L2bP6/FUEpIFuex3p45W/CB2nnoWKlLBWEK+hymEYJuoIE/3CRd4fIBImsfGsaJJPI4IPI6kcMEHHrcg+bQikXy/gg1WSCZINseZ4xyF1RCH895Coy1tGvgzzWQ8qrO4FkU1l8kMZVsh2XDsK16ZxrCSXmi+GvGDbndHyE2gP5jJpBwu5nLYEUDgv4IM05z+Xo6NdfTKPEvV/QTVfJ1up0A8U2arsGocwpeiqc+gCD13R4p0mtVhPf8c6T5t/w2g7v4epZELF+Et0yDZLwPL0ZpF7c+GN/jInX2fFZ3W6169Zhqz40OESLi4ti+w8vlvEeLKfTSSsrK6KheS3H6/WK3/DfS0tLYqGNP7PZbBSPx8nlclEikaD5+Xmxp6unQER/8tbcGklq+ZuPgmx5+sk169KHLcO6alf19cV1feL1BE3bpkXj8v/lRuWrwmhYRVHE/itG4OXoYrEoYHjP1sLCAnk8HuIVUrvdLlZIGVRV1d4D4dTS6TujvJ35+haQ+gxecTVuXbG1GFW0Ssfu7+3Izdbn+TwdvhhoGSY99qV+G4jx8DEZSuLvfm8nRecyyQCJqZ+TVjzsijMiXXGCio+q5Qd+oLuC7Kx/RYUjf1edouqaM4Z8VEHz+8TZwpPxUboJJOp9QtmEhQ72pvRSId6VZw3xT+Hig+AHHwQf5GHDjzt41o0P0iHhRxy8t5iPqfFmb55R44M85Gy//mCQd+Hzpm5+WOh2u/FBHjrGBm/e2H3f5wLxQfA7dfzgg+CD4AcfBD/4IPgg+MEHwQfBDz4IPgh+8EHwQfCDD4IffBB8EPzgg+CD4AcfBB8EP/gg+CD4wQfBDz4IPgh+8EHwQfAjIf8CK2x8XCu31d4AAAAASUVORK5CYII='</body><body package="Roassal2-Builder-PieChart-Examples">exampleLabelledIfIcon	^ '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l/8BzNJh52yayYQAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-PieChart-Examples">examplePieAndLegendIcon	^ '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rkJggg=='</body><body package="Roassal2-Builder-PieChart-Examples">exampleRefreshPieIcon	^ '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'</body><body package="Roassal2-Builder-PieChart-Examples">exampleRingChartIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEUUlEQVR4XuXca0/aUBgHcL/s3u077Avo1HmZ6LLoEnUat2UzOl2yeEEBRadTQAjelclFpRRaWiwP4xgxKudU1EJL/v/keSv6/DztOaentJRK+HFSWvBbgA+CH3wQfBD84IPgg+AHHwQfBD/4IPgg+MEHwQ8+CD4IfvBB8EHwgw+CD4IffBB8EPzgg+AHHwQfBD/4IPggNsWQ0qT4vKR4l0sPS4tGCR+kAVFWfHQ54KLz9tZSrZWbnyMjnSZ8EItChkHy9NSTEHh10d9H+tEh4YO8ZER4ll8McbeSvV00vLtNehkZH+Qpo6JQoMvBj5ZisBp2z1LbtrfEal925mXMcSBXibjlEKxCgwO3GJX6HdsnfBALMeSpyapZVm5xns573lX9nL7N5SoQVpNHEcIH4aSYz9eEIc9Mk5GVa2qi6l+h8442WpsY4WJUyp+MET7Ig1y43puCSGOjRFdXz2oca7gZCKvTXIbwQW4i/5oxxcgHAy9uVragU1dw1QwGH+R6xS3LphiF42PLGkXl9IfXhSizp7sEDyKNjQhBtF3rt0CKZRQ2GkQoBhUJFsTsRp75OlG3xvxTZCGI3VNhW0HYPpMIpN75UZ7uilBgQUQYimep7v+lN5cuLshRViI4kKKu2zY6KhnfD3JRFs4O8UCuF228XdkProY1Y/sywQXpCPjwQJQlNxeEbX80Mk67j7TYN90d5YJokTDhg9hxQ+dsALIqKgo+iB1JtbdyQajY2IXZN/8at+BALvp6uCBGprFTzi33FrfgQNhKnAei/t3AB7FlllWeTdm1KKyEbTbig1TWIZsb/IVh+WbfqN8heZLkgoR8IcLfOrk709K0hjRkZ3WHCxI/ioPuZXV1kOgxbb0/W1M14eVKz+uYI0TxeoT7WfVej0Q3oiIQ3O13dlMVgaQ/DdatMVJKEo6OxHECF4RF/ik+JipPT1reHDWrCjHsnF05BsRslFQOS1v1WXklb4qRiqXwn6lfNyoUMD8C9GX8xY2SL2VTjLA/jH/q5N51ffyz+UG5zrekHx48uWlUNOg4MmeKwaqgF/BBqva3XL2Pnl686O0i9c/6o81T5T06iXRTeOVViVXQuy5EyUpZx/TAUSBsp/e8u/NJ53vTo8OUW5ijnHuBYlEXRfyvbxHu1eobLgi7lDmpB447/c5u8umh572KwIW4UyHf1D2UbDqLf/q95pvw5HeyGoQVgwh4AmTnarwpQVgKsVMSPVl8Lkj8YNnRr7U1xUufWihIon2vWkHO9ofKF8Mi/juGVsbIZCi3tEhsClwLSCw6QFLK01SvSDf1FweQrpO+t0vqmp+U1RWSkh7S1DNq5r8J/5sc8EHwgw+CD4IffBB8EPzgg+CD4AcfBB8EP/gg+MEHwQfBDz4IPgh+8EHwQfCDD4IPgh98EPzgg+CD4AcfBB8EP/gg+CD4wQfBB8EPPgh+8EHwQfCDD4IPgh98EHwQ/DQo/wGK0Xg+nbEqTgAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-PieChart-Examples">exampleSimpleIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAEGUlEQVR4XuXba0/aYBiHcb+ar/xYfgL3AjfnskO2bNnicSIdkCgqo7RQNpEKKjgBdSDgCfAwhnCztkYHyqGlSEv+V3LH1/TnUx4eylCthp+ZGsK/BPgg+OGD4IPghw+CD4IfPgg+CH74IPgg+OGD4IcPgg+CHz4IPgh++CD4IPjhg+CD4IcPgh8+CD4Ifvgg+CD44YOoKRKJkPzXYrEQPoiJKpfLlE6nCR/E4EqlEsnjdrvxVwh++CD4IPjhg+CDDELx4hlx2cOaNblDE1sBGtvka+MRP03thYnNHND6SZrk8EGesETxnD7tisrFVzvjEYGEXIrwQXrYwUWe5AurBaLZBEwMMzAgs/Et3RD1I9/ezkrXhA+isaubMlnC/p5i1E9SWnX4ICqT/4OfCqJ+ovkTwgfp0E21SmMi1xcQefZNslJMC/Imut43jLuRb4/4IE1yHyX7jiHPu2gQH+Rh5WrFEIy7iZzlCB+kLuYgZiiINPgg9RmMocz2+THhg0jJn6DNAPJROpbBB5EKr27Q3BpHb4OC4TD4IFLCV2/DrLj8NMP7DcE5/WPMsYqpQeonwPhoxs3VXoj9AfJKR/fQIFeFK2oH8nAca376Eni6W5v8HQs0yOnhsSaQ+uEcPpr18PRM5HsG5ErFsVfI8X62a5D6+eFg6bvFU9M70eUYNkghd64bhHW6KL7J9AQkwSexQaqVqi4QdsFFPnaBEmGm1guQpG8ff9vb9XuIdZUWFz/XEhF7z0CyO1n8bW/AymlfJTavguFemVMw5PG/53XftvA/GEodhpOaQRhmSgHZ23Tcg2wsunSBeJ6zWEcnw8PDTV/w3+uSJhAnM69guJb+rw4FxLak8/0jiQMiiiKNjIy0fMFBh6AKxWmdUzDkify0NYDE+FVdK8TIB+tMd/yez5x1BFlzOO4x7PbpBoy76RZj27mD/31Is1PfVhhexnWPIY8YsPUUxOjHTk0JUrmpNAVhvzZiKFvdJhjdguRiOfzv1FveurKNn9z9jOcRhsDOUysQ4YO2ra84L+I/BtSpdOz3LcqC8llD9eq43fouqwYJTm/gPyintsxemhz22UcYd8ckLUFUbn03ZkL4j5JqPgk+zjRZHd/aguz6Om99Y64Y/sPWXR8+VqvEcbdv6p7VubYYnd7YuVc8FY4KbTEmJibwz7LUVCzmKRX3dQXifclRZiuj6kLn83m6vLwkfBAtO7HcL0rtsdQOhH/tI/kopHRRGoifteH/6BMfRH2hUIjwQUyUIAj4IGZqdHQU/5aFHz6Izm1wkSYnJwkfxCR5PB6SUfBB8MMHwQfBDx8EHwQ/fBD88EHwQfDDB8EHwQ8fBB8EP3wQfBD88EHwwwfBB8EPHwQfBD98EHwQ/PBB8EHwwwfBDx9kAPoHXr9gU/fk5PYAAAAASUVORK5CYII='</body></methods><methods><class-id>Roassal2.RTPieExample</class-id> <category>sources</category><body package="Roassal2-Builder-PieChart-Examples">exampleEmphasis	| b |	b := RTPieBuilder new.	b interaction popup.	b objects: (Array with: Dictionary with: Collection with: Set with: OrderedCollection ).	b slice: #numberOfMethods.	b normalizer distinctColor.		b labeled.	b emphasize: Set by: 20.	b emphasize: Dictionary by: 20.	^ b</body><body package="Roassal2-Builder-PieChart-Examples">exampleLabelledChart	| b |	b := RTPieBuilder new.	b interaction popup.	b objects: (Array with: Dictionary with: Collection with: Set with: OrderedCollection).	b slice: #numberOfMethods.	b normalizer distinctColor.		b labeled.	^ b</body><body package="Roassal2-Builder-PieChart-Examples">exampleLabelledIf	| b |	b := RTPieBuilder new.	b interaction popup.	b objects: RTShape withAllSubclasses.	b slice: #numberOfMethods.	b normalizer distinctColor.		b labeledIf: [ :c | c numberOfMethods &gt; 18 ].	^ b</body><body package="Roassal2-Builder-PieChart-Examples">examplePieAndLegend	"	RTPieExample new examplePieAndLegend	"	| b myClasses lb |	myClasses := (Array with: Dictionary with: Collection with: Set with: OrderedCollection ).	b := RTPieBuilder new.	b interaction popup.	b objects: myClasses.	b slice: #numberOfMethods.	b normalizer distinctColor.		b labeled.	b emphasize: Set by: 20.	b emphasize: Dictionary by: 20.	b build.		"Legend"	lb := RTLegendBuilder new.	lb view: b view.	lb addText: 'Distribution of number of Methods in some classes'.	myClasses do: [ :aClass |		| aColor |		aColor := (b view elementFromModel: aClass) trachelShape color.		lb addColor: aColor text: aClass name.	].	lb build.		^ b view</body><body package="Roassal2-Builder-PieChart-Examples">exampleRefreshPie	| view fillView |	"We create an empty view. The view will contain the button and the pie."	view := RTView new.	"fillView is block that: 		(i) remove all the elements in the view (except the button); 		(ii) create a new pie with totally random data		(iii) force a screen refresh with #signalUpdate"	fillView := 	[		| b |		view clean.		b := RTPieBuilder new.				"The RTPieBuilder will create the pie in the view"		b view: view.		b interaction popup.		b objects: ((1 to: 10 atRandom) collect: [ :i | 30 atRandom ]).		b slice: [ :aNumber | aNumber ].		b normalizer distinctColor.		b labeled.		b build.		view signalUpdate	].	"Add a button menu to the view"	view addMenu: 'Generate new data' callback: [ fillView value ].	"We want some data when opening the view"	fillView value.	^ view</body><body package="Roassal2-Builder-PieChart-Examples">exampleRingChart	| b |	b := RTPieBuilder new.	b interaction popup.	b shape current		innerRadius: 70;		externalRadius: 100.	b objects: (Array with: Dictionary with: Collection with: Set with: OrderedCollection ).	b slice: #numberOfMethods.	b normalizer distinctColor.		^ b</body><body package="Roassal2-Builder-PieChart-Examples">exampleSimple	| b |	b := RTPieBuilder new.	b interaction popup.	b objects: #(10 4 1 2 5).	b slice: #yourself.	b normalizer distinctColor.	b labeled.	^ b</body></methods><methods><class-id>Roassal2.RTLabelledTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testConstruction	RTLabeled above; below; center</body><body package="Roassal2-Core-Tests">testDefault	| v el |	v := RTView new.	el := (RTBox new size: 30) elementOn: 'hello world'.	v add: el.		el @ RTLabeled.	self assert: v numberOfElements = 1.	self assert: v canvas numberOfShapes = 2.		self assert: v canvas shapes first class == TRLabelShape.	self assert: v canvas shapes first position x = 0.	self assert: v canvas shapes first position y &lt; 10</body><body package="Roassal2-Core-Tests">testDefaultFromNumber	| v el |	v := RTView new.	el := (RTBox new size: 30) elementOn: 5.	v add: el.		el @ RTLabeled.	self assert: v numberOfElements = 1.	self assert: v canvas numberOfShapes = 2.		self assert: v canvas shapes first class == TRLabelShape.	self assert: v canvas shapes first position x = 0.	self assert: v canvas shapes first position y &lt; 10.	self assert: v canvas shapes first text = '5'.</body><body package="Roassal2-Core-Tests">testDefaultWithNoLabel	| v el |	v := RTView new.	el := (RTBox new size: 30) element.	v add: el.		el @ RTLabeled.	self assert: v numberOfElements = 1.		"No label since there is no object behind the el"	self assert: v canvas numberOfShapes = 1.</body><body package="Roassal2-Core-Tests">testRemovingLabelledElement	| v el |	v := RTView new.	el := (RTBox new size: 30) elementOn: 'hello world'.	v add: el.		el @ RTLabeled.	self assert: v numberOfElements = 1.	self assert: v canvas numberOfShapes = 2.		el remove.	self assert: v numberOfElements equals: 0.	self assert: v canvas numberOfShapes equals: 0.</body></methods><methods><class-id>Roassal2.TRCompositeShapeTest</class-id> <category>testing translation</category><body package="Roassal2-Trachel-Tests">testDefaultPosition	self assert: emptyShape position equals: 0 @ 0.	self assert: multiShape position equals: 0 @ 0.	self assert: box1 position equals: 0 @ 0.	self assert: box2 position equals: 0 @ 0.</body><body package="Roassal2-Trachel-Tests">testPositionWithOffset	| s |	s := TRCompositeShape new.	s addShape: box1. 	s addShape: box2 translateBy: 5 @ 4.	canvas addShape: s.		self assert: box1 position equals: 0 @ 0.	self assert: box2 position equals: 5 @ 4.	s translateTo: 10 @ 5.	self assert: s position equals: 10 @ 5.		self assert: box1 position equals: 5 @ 1.	self assert: box2 position equals: 10 @ 5</body><body package="Roassal2-Trachel-Tests">testPositionWithOffsetTranslationBy	| s |	s := TRCompositeShape new.	s addShape: box1. 	s addShape: box2 translateBy: 5 @ 4.	canvas addShape: s.		self assert: box1 position equals: 0 @ 0.	self assert: box2 position equals: 5 @ 4.		s translateBy: 10 @ 5.	self assert: s position equals: 15 @ 9.	self assert: box1 position equals:  10 @ 5.	self assert: box2 position equals:  15 @ 9</body><body package="Roassal2-Trachel-Tests">testTranslation	multiShape translateTo: 5 @ 6.	self assert: multiShape position equals: 5 @ 6.	self assert: box1 position equals: 5 @ 6.	self assert: box2 position equals: 5 @ 6.</body><body package="Roassal2-Trachel-Tests">testTranslationBy	multiShape translateBy: 5 @ 6.	self assert: multiShape position equals: 5 @ 6.	self assert: box1 position equals: 5 @ 6.	self assert: box2 position equals: 5 @ 6.</body><body package="Roassal2-Trachel-Tests">testTranslationBy2	multiShape translateBy: 5 @ 6.	multiShape translateBy: 5 @ 6.	self assert: multiShape position equals: 10 @ 12.	self assert: box1 position equals: 10 @ 12.	self assert: box2 position equals: 10 @ 12.</body></methods><methods><class-id>Roassal2.TRCompositeShapeTest</class-id> <category>running</category><body package="Roassal2-Trachel-Tests">setUp	super setUp.		emptyShape := TRCompositeShape new.	multiShape := TRCompositeShape new.	box1 := TRBoxShape new size: 20. 	box2 := TRBoxShape new size: 30.	multiShape addShape: box1; addShape: box2.	canvas := TRCanvas new.</body></methods><methods><class-id>Roassal2.TRCompositeShapeTest</class-id> <category>tests</category><body package="Roassal2-Trachel-Tests">testAddingShape	emptyShape addShape: TRLabelShape new.	self assert: emptyShape numberOfShapes equals: 1.	self assert: multiShape numberOfShapes equals: 2.</body><body package="Roassal2-Trachel-Tests">testAlignRight	box2 translateBy: 5 @ 5.	self assert: box1 position equals: (0 @ 0).	self assert: box2 position equals: (5 @ 5).	multiShape alignRight.	self assert: box1 position equals: (0 @ 0).	self assert: box2 position equals: (0 @ 0).	multiShape relayout.		"Below is a strange result!"	self assert: box1 position equals: (10 @ 0).	self assert: box2 position equals: (15 @ 5)."TRCanvas new addShape: multiShape ; yourself"</body><body package="Roassal2-Trachel-Tests">testAllColor	multiShape allColor: Color red.	self assert: box1 color equals: Color red.	self assert: box2 color equals: Color red.		self assert: multiShape color equals: Color red"	emptyShape := TRMultiCompositeShape new.	multiShape := TRMultiCompositeShape new.	box1 := TRBoxShape new size: 20. 	box2 := TRBoxShape new size: 30.	multiShape addShape: box1; addShape: box2.	canvas := TRCanvas new."</body><body package="Roassal2-Trachel-Tests">testAnnounce	| t |	t := 0.	box1 when: TREvent do: [ :evt | t := t + 1 ].	box2 when: TREvent do: [ :evt | t := t + 10 ].	self assert: t equals: 0.	multiShape announce: TREvent.	self assert: t equals: 11."	emptyShape := TRMultiCompositeShape new.	multiShape := TRMultiCompositeShape new.	box1 := TRBoxShape new size: 20. 	box2 := TRBoxShape new size: 30.	multiShape addShape: box1; addShape: box2.	canvas := TRCanvas new."</body><body package="Roassal2-Trachel-Tests">testAnnounce2	| t |	t := 0.	multiShape when: TREvent do: [ :evt | t := t + 1 ].	self assert: t equals: 0.	multiShape announce: TREvent.	self assert: t equals: 2."	emptyShape := TRMultiCompositeShape new.	multiShape := TRMultiCompositeShape new.	box1 := TRBoxShape new size: 20. 	box2 := TRBoxShape new size: 30.	multiShape addShape: box1; addShape: box2.	canvas := TRCanvas new."</body><body package="Roassal2-Trachel-Tests">testAnnouncer	self should: [ multiShape announcer ] raise: Error</body><body package="Roassal2-Trachel-Tests">testBasic	emptyShape addShape: TRLabelShape new.	self assert: emptyShape numberOfShapes equals: 1.	self assert: emptyShape element equals: nil</body><body package="Roassal2-Trachel-Tests">testColor	multiShape color: Color red.	self assert: box1 color equals: Color red.	self assert: box2 color ~= Color red.		self assert: multiShape color equals: Color red"	emptyShape := TRMultiCompositeShape new.	multiShape := TRMultiCompositeShape new.	box1 := TRBoxShape new size: 20. 	box2 := TRBoxShape new size: 30.	multiShape addShape: box1; addShape: box2.	canvas := TRCanvas new."</body><body package="Roassal2-Trachel-Tests">testComputePath	multiShape computePath"	emptyShape := TRMultiCompositeShape new.	multiShape := TRMultiCompositeShape new.	box1 := TRBoxShape new size: 20. 	box2 := TRBoxShape new size: 30.	multiShape addShape: box1; addShape: box2.	canvas := TRCanvas new."</body><body package="Roassal2-Trachel-Tests">testElement	emptyShape element: 10.	self assert: emptyShape element equals: 10.</body><body package="Roassal2-Trachel-Tests">testElementOnNonEmpty	| c |	multiShape element: 10.	self assert: box1 element equals: nil.	self assert: box2 element equals: nil.		c := TRCanvas new.	c addShape: multiShape.	multiShape element: 10.	self assert: box1 element equals: 10.	self assert: box2 element equals: 10</body><body package="Roassal2-Trachel-Tests">testExtent	self assert: box1 extent equals: (20 @ 20).	self assert: box2 extent equals: (30 @ 30).		multiShape extent: 25 @ 25.	self assert: box1 extent equals: (25 @ 25).	self assert: box2 extent equals: (25 @ 25).</body><body package="Roassal2-Trachel-Tests">testHeight	self assert: multiShape height equals: 30.	multiShape horizontal.	TRCanvas new addShape: multiShape.	self assert: multiShape height equals: 30.	multiShape vertical.	TRCanvas new addShape: multiShape.	self assert: multiShape height equals: 50."	emptyShape := TRMultiCompositeShape new.	multiShape := TRMultiCompositeShape new.	box1 := TRBoxShape new size: 20. 	box2 := TRBoxShape new size: 30.	multiShape addShape: box1; addShape: box2.	canvas := TRCanvas new."</body><body package="Roassal2-Trachel-Tests">testIncludesPoint	self assert: (multiShape includesPoint: 5 @ 5).	self deny: (multiShape includesPoint: -65 @ 5)</body><body package="Roassal2-Trachel-Tests">testIsFixed	| c |	c := TRCanvas new.	c addShape: multiShape.	self deny: multiShape isFixed.		multiShape setAsFixed.	self assert: multiShape isFixed.</body><body package="Roassal2-Trachel-Tests">testNoCanvas	self assert: box1 canvas equals: nil.	self assert: multiShape canvas equals: nil</body><body package="Roassal2-Trachel-Tests">testNoLayout	multiShape noLayout</body><body package="Roassal2-Trachel-Tests">testNoShapeInEmptyShape	self assert: emptyShape numberOfShapes equals: 0</body><body package="Roassal2-Trachel-Tests">testOffsets	self assert: multiShape offsets asArray equals: (Array with: 0 @ 0 with: 0 @ 0).	box2 translateBy: 5 @ 6.	self assert: multiShape offsets asArray  equals: (Array with: 0 @ 0 with: 0 @ 0).</body><body package="Roassal2-Trachel-Tests">testOffsets2 	box2 translateBy: 5 @ 6.	emptyShape addShape: box1; addShape: box2.	"Humm.... I do not really understand this. is offset always made of 0@0?"	self assert: emptyShape offsets asArray equals: (Array with: 0 @ 0 with: 0 @ 0).</body><body package="Roassal2-Trachel-Tests">testPushBack	| c aShape |	aShape := TRBoxShape new.	c := TRCanvas new.	c addShape: aShape.	c addShape: multiShape.	self assert: c numberOfShapes equals: (multiShape numberOfShapes + 1).	multiShape pushBack.		self assert: (c shapes indexOf: aShape) equals: multiShape numberOfShapes + 1.	self assert: (c shapes indexOf: multiShape shapes first) equals: multiShape numberOfShapes.	self assert: (c shapes indexOf: multiShape shapes last) equals: 1</body><body package="Roassal2-Trachel-Tests">testPushFront	| c aShape |	aShape := TRBoxShape new.	c := TRCanvas new.	c addShape: multiShape.	c addShape: aShape.		self assert: c numberOfShapes equals: (multiShape numberOfShapes + 1).	multiShape pushFront.		self assert: (c shapes indexOf: aShape) equals: 1.	self assert: (c shapes indexOf: multiShape shapes first) equals: 2.	self assert: (c shapes indexOf: multiShape shapes last) equals: multiShape numberOfShapes + 1.</body><body package="Roassal2-Trachel-Tests">testRemove	| c |	c := TRCanvas new.	c addShape: multiShape.	self assert: c numberOfShapes equals: 2.	multiShape remove.	self assert: c numberOfShapes equals: 0."	emptyShape := TRMultiCompositeShape new.	multiShape := TRMultiCompositeShape new.	box1 := TRBoxShape new size: 20. 	box2 := TRBoxShape new size: 30.	multiShape addShape: box1; addShape: box2.	canvas := TRCanvas new."</body><body package="Roassal2-Trachel-Tests">testRemovingSubshapes	| c s1 s2 s3 s4 |	c := TRCompositeShape new.	s1 := TRBoxShape new.	s2 := TRBoxShape new.	s3 := TRLabelShape new.	s4 := TRLabelShape new.	c addShape: s1; addShape: s2; addShape: s3; addShape: s4.		self assert: c allShapes size equals: 4.	c removeShapesSuchAs: [ :s | s class == TRLabelShape ].	self assert: c allShapes size equals: 2.	self assert: c allShapes asArray equals: (Array with: s1 with: s2)</body><body package="Roassal2-Trachel-Tests">testResetPath	multiShape resetPath</body><body package="Roassal2-Trachel-Tests">testSetCanvas	| c |	c := TRCanvas new.	multiShape canvas: c.	self assert: box1 canvas equals: c.	self assert: multiShape canvas equals: c</body><body package="Roassal2-Trachel-Tests">testSignalUpdate	multiShape signalUpdate</body><body package="Roassal2-Trachel-Tests">testSignalUpdate2	TRCompositeShape new signalUpdate</body><body package="Roassal2-Trachel-Tests">testVerticalLayoutWithoutAddingToCanvas	multiShape vertical."	canvas addShape: multiShape."		self assert: (multiShape offsetOf: box1) equals: 0 @ 0.	self assert: (multiShape offsetOf: box2) equals: 0 @ 25.	self assert: box1 position equals: 0 @ 0.	self assert: box2 position equals: 0 @ 0.</body><body package="Roassal2-Trachel-Tests">testWidth	self assert: multiShape width equals: 30.	multiShape resetInnerShapes; vertical.	TRCanvas new addShape: multiShape.	self assert: multiShape width equals: 30.	multiShape resetInnerShapes; horizontal.	TRCanvas new addShape: multiShape.	self assert: multiShape width equals: 50."	emptyShape := TRMultiCompositeShape new.	multiShape := TRMultiCompositeShape new.	box1 := TRBoxShape new size: 20. 	box2 := TRBoxShape new size: 30.	multiShape addShape: box1; addShape: box2.	canvas := TRCanvas new."</body></methods><methods><class-id>Roassal2.TRCompositeShapeTest</class-id> <category>testing layout</category><body package="Roassal2-Trachel-Tests">testVerticalLayout	multiShape vertical.	canvas addShape: multiShape.		self assert: (multiShape offsetOf: box1) equals: 0 @ 0.	self assert: (multiShape offsetOf: box2) equals: 0 @ 25.	self assert: box1 position equals: 0 @ 0.	self assert: box2 position equals: 0 @ 25</body></methods><methods><class-id>Roassal2.TRCompositeShapeTest</class-id> <category>callbacks</category><body package="Roassal2-Trachel-Tests">testCallbackRemove	| t callback |	t := 0.	callback := TRRemoveCallback new block: [ :shape | t := t + 1 ].	multiShape addCallback: callback.	self assert: t equals: 0.	multiShape remove.	self assert: t equals: 0.	canvas addShape: multiShape.	multiShape remove.	self assert: t equals: 1</body></methods><methods><class-id>Roassal2.RTLayoutBuilderTest</class-id> <category>tests - attach point</category><body package="Roassal2-Builder-Common-Tests">testHorizontalTreeAndAttachPoint	| b edges allEdges lastTwoEdges firstEdges |	b := RTMondrian new.	b shape label.	b nodes: (1 to: 10).	edges := b edges connectFrom: [ :x | x//2 ].	b shape arrowedLine color: Color red; centeredAttachPoint.	b edges source: (Array with: 3-&gt;2 with: 9-&gt;7) connectFrom: #key to: #value. 	"We test the attachpoints"	allEdges := b view edges.	firstEdges := allEdges copyFrom: 1 to: (allEdges size - 2).	lastTwoEdges := allEdges copyFrom: (allEdges size - 1) to: allEdges size.	self assert: (firstEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ] ).	self assert: (lastTwoEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ]).	"We set a tree layout"	b layout tree userDefinedEdges: edges.	b build.		"We test the attachpoints"	allEdges := b view edges.	lastTwoEdges := allEdges copyFrom: (allEdges size - 1) to: allEdges size.	self assert: (firstEdges allSatisfy: [ :e | e shape attachPoint class == RTVerticalAttachPoint ] ).	self assert: (lastTwoEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ])</body><body package="Roassal2-Builder-Common-Tests">testHorizontalTreeAndNoAttachPoint	| b edges allEdges lastTwoEdges firstEdges |	b := RTMondrian new.	b shape label.	b nodes: (1 to: 10).	edges := b edges connectFrom: [ :x | x//2 ].	b shape arrowedLine color: Color red; centeredAttachPoint.	b edges source: (Array with: 3-&gt;2 with: 9-&gt;7) connectFrom: #key to: #value. 	"We test the attachpoints"	allEdges := b view edges.	firstEdges := allEdges copyFrom: 1 to: (allEdges size - 3).	lastTwoEdges := allEdges copyFrom: (allEdges size - 2) to: allEdges size.	self assert: (firstEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ] ).	self assert: (lastTwoEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ]).	 		"We set a tree layout"	b layout horizontalTree doNotAttachPoint; userDefinedEdges: edges.	b build.		"We test the attachpoints"	allEdges := b view edges.	lastTwoEdges := allEdges copyFrom: (allEdges size - 2) to: allEdges size.	self assert: (firstEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ] ).	self assert: (lastTwoEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ])</body><body package="Roassal2-Builder-Common-Tests">testSugiyamaAndVerticalAttach	| e1 e2 edge |	builder sugiyama.	e1 := RTBox element.	e2 := RTBox element.	edge := RTLine edgeFrom: e1 to: e2.	builder setUpElements: (Array with: e1 with: e2).	self assert: edge shape attachPoint class equals: RTVerticalAttachPoint</body><body package="Roassal2-Builder-Common-Tests">testTreeAndVerticalAttach	| e1 e2 edge |	builder tree.	e1 := RTBox element.	e2 := RTBox element.	edge := RTLine edgeFrom: e1 to: e2.	builder setUpElements: (Array with: e1 with: e2).	self assert: edge shape attachPoint class equals: RTVerticalAttachPoint</body><body package="Roassal2-Builder-Common-Tests">testVerticalTreeAndAttachPoint	| b edges allEdges lastTwoEdges firstEdges |	b := RTMondrian new.	b shape label.	b nodes: (1 to: 10).	edges := b edges connectFrom: [ :x | x//2 ].	b shape arrowedLine color: Color red; centeredAttachPoint.	b edges source: (Array with: 3-&gt;2 with: 9-&gt;7) connectFrom: #key to: #value. 	"We test the attachpoints"	allEdges := b view edges.	firstEdges := allEdges copyFrom: 1 to: (allEdges size - 2).	lastTwoEdges := allEdges copyFrom: (allEdges size - 1) to: allEdges size.	self assert: (firstEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ] ).	self assert: (lastTwoEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ]).	"We set a tree layout"	b layout tree userDefinedEdges: edges.	b build.		"We test the attachpoints"	allEdges := b view edges.	lastTwoEdges := allEdges copyFrom: (allEdges size - 1) to: allEdges size.	self assert: (firstEdges allSatisfy: [ :e | e shape attachPoint class == RTVerticalAttachPoint ] ).	self assert: (lastTwoEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ])</body><body package="Roassal2-Builder-Common-Tests">testVerticalTreeAndNoAttachPoint	| b edges allEdges lastTwoEdges firstEdges |	b := RTMondrian new.	b shape label.	b nodes: (1 to: 10).	edges := b edges connectFrom: [ :x | x//2 ].	b shape arrowedLine color: Color red; centeredAttachPoint.	b edges source: (Array with: 3-&gt;2 with: 9-&gt;7) connectFrom: #key to: #value. 	"We test the attachpoints"	allEdges := b view edges.	firstEdges := allEdges copyFrom: 1 to: (allEdges size - 3).	lastTwoEdges := allEdges copyFrom: (allEdges size - 2) to: allEdges size.	self assert: (firstEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ] ).	self assert: (lastTwoEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ]).	 		"We set a tree layout"	b layout tree doNotAttachPoint; userDefinedEdges: edges.	b build.		"We test the attachpoints"	allEdges := b view edges.	lastTwoEdges := allEdges copyFrom: (allEdges size - 2) to: allEdges size.	self assert: (firstEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ] ).	self assert: (lastTwoEdges allSatisfy: [ :e | e shape attachPoint class == RTCenteredAttachPoint ])</body></methods><methods><class-id>Roassal2.RTLayoutBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-Common-Tests">testAddingPartition	builder for: #odd use: RTGridLayout new.	self assert: builder hasPartition</body><body package="Roassal2-Builder-Common-Tests">testConditional	| v es eb lb |	v := RTView new.	es := RTBox elementsOn: (1 to: 20).	v addAll: es.		eb := RTEdgeBuilder new				view: v;				elements: (es copyFrom: 1 to: 10);				connectTo: [ :aValue | aValue + 1 ].	lb := RTLayoutBuilder new				ifElement: #isConnected then: RTGridLayout new;				else: RTTreeLayout new;				overall: RTHorizontalLineLayout new.	lb setUpElements: es.		self assert: (es collect: #position) asArray equals: (((Array new: 20) at: 1 put: ((3.0@3.0)); at: 2 put: ((13.0@3.0)); at: 3 put: ((23.0@3.0)); at: 4 put: ((33.0@3.0)); at: 5 put: ((3.0@13.0)); at: 6 put: ((13.0@13.0)); at: 7 put: ((23.0@13.0)); at: 8 put: ((33.0@13.0)); at: 9 put: ((3.0@23.0)); at: 10 put: ((13.0@23.0)); at: 11 put: ((48.0@3.0)); at: 12 put: ((56.0@3.0)); at: 13 put: ((64.0@3.0)); at: 14 put: ((72.0@3.0)); at: 15 put: ((80.0@3.0)); at: 16 put: ((88.0@3.0)); at: 17 put: ((96.0@3.0)); at: 18 put: ((104.0@3.0)); at: 19 put: ((112.0@3.0)); at: 20 put: ((120.0@3.0)); yourself))</body><body package="Roassal2-Builder-Common-Tests">testDefault	self deny: builder hasPartition</body><body package="Roassal2-Builder-Common-Tests">testFlowOnEmpty	"Juraj had a problem on some point. This tests describes the problematic situation"	RTMondrian new layout flow</body><body package="Roassal2-Builder-Common-Tests">testFlowOnEmpty02	"Juraj had a problem on some point. This tests describes the problematic situation"	| b |	b := RTMondrian new.	b layout flow. 	b build.</body></methods><methods><class-id>Roassal2.RTLayoutBuilderTest</class-id> <category>running</category><body package="Roassal2-Builder-Common-Tests">setUp	super setUp.	builder := RTLayoutBuilder new</body></methods><methods><class-id>Roassal2.RTCalendarExample</class-id> <category>icons</category><body package="Roassal2-Builder-Calendar-Examples">exampleBasicIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAB0klEQVR4XuXYvWoCQRSAUR/Qd7K3sxK0WhTc0idQ/CnEwk4LRUERKxEsxEK4G2aLtIEQo8n5YIsdmGYOOxe2UhR+71TFPwIfxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/kT9VsNuNwOMTpdIpWqxW73S6u12v4IC8qz/Not9txPB6j0WhElmXR6XR8kHfodrtFv98P/8r6pdLVNBwOi+88k8kkfJAfLs2HV+z1Qb441DQz0hCfTqfl+3K5jNFoFOkruN/v5Vqv14vH4xHj8Th8kCeD1Ov1clZUq9XPQ+52u1Gr1Yr0pBLGer2O+XzugzwbZDAYxH6/Lw88va9Wqzifz7FYLGK73ZZrs9ks0pDfbDY+iD9DEJDL5RKv2OuD+L9O/HwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H+Q/9gEUtn5Gru2F5QAAAABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Calendar-Examples">exampleCodeCommitsIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABeCAYAAADVA7GfAAAJmUlEQVR4XuVdSW8URxTuQzjkkBxySA455AgIgpJc8wtyQChSxAVjAs6CMCC2kEMktoAJERKSTRxsxjZgx5jdrGY3mM3sO1yQEEJcgAMHDkhINamvNK9VPLqruz1VPTOukT5NT/ebelX1db2uev1edzA0NCQ6CgWxeOFChf59+8Qf8ptw+fJlceLECYUhKXv27Nnw9/DwsHj48GEk9P+RrP5bLydJVj+Oba6L6oFvU7n6b8ihPSOVpXrQtn5s7erV4jfZd4CpLSiXtyWI69BycevWLeGqbI6bN2+GhOzdu1d0dXUpoNG0DdjUSYTYbmeQV6flARCye/dudH4RKBFSJLggxDb8J8R/QtwScv78+djrgv+E5AyQcfLkyVzgPyGewH9CqpmQY8eOiXv37omBgYHcKgB9169fz73hR44cCbePHj3qVBdMXJpp+3uEHD9+XHR3d4tdu3aJM2fOqIUL7LJrQrZv367WD+iYAwcOiMHBQXHx4kWnetFG6Llw4YLS29/f70zXPrnYRvmHDh0Szc3N6sTHfug+ePCgWnRGEkIrXhCBQuhPLjsGlbx7966q8KVLl5S+K1euRK5ibeHBgwfq5Dt37pzqHJB/6tQpZ/rQnmvXronTp0+LHTt2iJ6eHtU+tBXtR32IlOD+/fvCJqgSN27cELbLjgMNeXzXus4gzXw7zpeFY/MaG0Ok9WXh7Mziy+rfulWsk+UD2NaPoUN0X1batkD/5vb2sO6HDx+OrUOSL8umuymREH21u2fPHmV79ZXwB0FQJPDG66tkkEDbnZ2dRdOKWpcFQMS3snwA2/oxdFxaQnQ90D9j+vSw/htbWmLrAFm0Xa+vC0JQlv+E1Boh/pusnE0WZlMl9hX0be7C5rKlsyjSvV0aISEwi6FtOULEGnnPYMrkyQotcioYJ8vrwF3qmMHohJjc7/pvyJlk9bZFyeqE8PqhfWnagr7ksgF26uZDN0ncnESZrDhvapLJqq+rC83FPGaGuMnS9XCd3GSZTCE3WdwMjdRkRdRPpGkLyi0REsr6T0i1EYLFEewjFkiAvg2gkbTNZfVjtPrUCdGPYWGk/4ZdhosGwILQJKvr4Tpv3779DiG02IuS5W0pR1YnxFQ/U1t4X0PW6QiZNHZs8UM5AgA+Qn6WI+QTuR9YYnGEzJQzJ9L5D5s5JY2Qz+V/CKPSZPlPSM6EcGWckK8nTCh+PGaMAidk9owZ4jO5H/h9/nxrhPwkyyWdrRs3ZiLkC/kfQjmE8E7ORAhsOTy7ZMf0bW7zuGyWawiXRVlp7HfSNYSvQ9KWC7m0suT5TnsNWbVsmZg/Z44CL7d7yxaxQO4HNm/aJFZI2blye25JtmKzrCwr9VqbZX01fnxoNkGCXu4iaZ4/kvuBWdOmiYlSlmabkPWfkGojhLtD9G3u1ohyncRFddh0nfDIQJPrxFbkYhbXCa/fnytWiAWy4wHelh7p+gEpQKGtTayUsuS+USYrT9cJuUoaZs60Hv4zEtfJ32vWiKmyPkBfb2+mKEeT6yStG6iirhMMRxqaE8aNK7oiJIvJ+kVOkWnq/S+bIo+AkNpynfhPSEpCEMQAtwDZOH2b21Yum+UaArcAggkIrggxRS7qv0M3kKwLMCzdN1miHE3TXt5uUx24bGA7ok8PfckL8GdVKnIxaoT4HyhXQfhPiP+E+I+k61euYUD+w/9ga/8JMYFmMHkhb33V1s4AkefkUsf6AHGumB9jkYLbq73SpYD5Os3bbVUIQcaIQId+BFvjYgjXAfbTegfB0DZ0IaYW/ijogg7E0lLMLa0fUAccQ1/YWichhle/BUz6UJet0qdF+tBeBJ0rQhDsC78Ogp3R+Yg+xzwblcJKEhVFzBL24ZgtQug+A2KAd+7cqTofBAFUB1tpaCAE9+3RVpSPsqEPgc/YxjHUAfrQZlvt3L9/v2iTDkT0LdpJ+nBM14d6vWOycHWntAMwpQdNE6L2lQOUhzNV/0YUPB2zrY9AOvg2tZ3vs6Uzquyofc5W6mA9r1UzTEHe3gEy3zA7Nst16n7PchaZohyzRC66ugibIhe5bNVGLmYkxModQ1eEZAm2rlr3u/+EjDByMa37ncsmud+zNFgv5+rVq6lv4fLIRVeE8HabCBmp+x3trtgNqqQgB13W/2Br/wnxnxD/CSkRUqkwoC65gl3a2KjQy7Ki+G3QbfI4hcpsS8igchUG1NneLhCDDAzINZYpDChtSBPKRV/oshULlPu1rk58KkcAsDQh2BpExOWS5DVC3gmIaG4efQk7/hPiv8mqDZOluUPCURDHKJfNMkLgFpg6ZUoRmN3QUCy5IiLLgXc27cIwJukzUrZfeq6XSP1AW1OTWLd2rfhBbgN98ljcCEGZaPtILuqmtqBcfYRANtdZFgUZf5NiluUi2Pq/lhbxndQPrJQmc5YhuceLaa//hFTYdWJyIZjKKcd1Yio3S1uSZNNeQ8p2nYAlW/FKrvJDTKGkDfKsp5HYKs96GgFANS4M37un7j8h/hPiPyEmQlyGWOYZPRi3DnHdPts6Rv2TrWvthPOfEP8JcUtI3ibLf0JSPv/WNVy9jiN4/vy58B/Vg6Do/6eqPv4T4j8h/n9GFSGvXr1Sj+iG0+7NmzcqSPzly5fi8ePHRQQvQwYXd+z3n5AcP3DnDw4Oqm24J/ANYvCNvJanT5/6T0hen2fPnolHjx6FhIAcnZDXr1+rnJC3b98K/wlx/Hny5IlYv369IkOaKfpWQDIOvu/cuROS5T8h/n/KI+TFixfCf1QP/E+L9j9P3X+Y0qMDeh8TbrDjIAXDYT/20TuaKK3YRiWQ1UtpyZiyYt1A74DSdVL6sk1g9oWyESeGFHA9GMFWGnYckAqNfkTWLwD9PAU7AAmUrottCCBhE39Ax/X19al9qCyiJGwSgtRglAnPaaFQeE9nR0eHE0LQViwiEfy2YcMG1V7XnmKczEi3bm1tDUnAicAfrxvYevWbC+CsHW0mKukla6Punnqej2WqyD31Sj23V0/YweNWKXJkQRnR750tLeJLWQawuK7OWtRJ1lxKY+Si/4T4T4j/hFRjfkjSk63pydCrli+vuSdb12RKW9IIoRExyf8sXP8J8TIL13+TZUhp+wsPpS+lmxXa252ktOmpXRgh65qaQp2tLFmGp4HhLZzfSzmAv5EzS0obTyczyVY0pQ3vsaCIcXRUHiarQc5ySOeiGsjCzfUa4j8hVfgeQ/9T2qo0pY3PsvCeWjo7f6yvr8grj2yNEFx/qJx6iwvDXKe9/hOSLyH/A66IE81LBR81AAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Calendar-Examples">exampleMonthIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAFOklEQVR4XuWa10vtShTGz5+nb4Lvgvrmk/okItixvagPYsGGiBW7IvZeUVRQUezYGyr2sjz3C3eFJLjvLudc93Z/HwSdJGsymV+yvpnJ/vX5ya9A0i/+LuAHwi9+IPxA+MUPhB8Iv/iB8APhFz8QfiD84gfCL34g/ED4xQ+EHwi/+IHwA+EXPxB+IPziB8IvfiD8QPjFD4QfCL/4gfAD4Rc/EH4g/OIHwi9+IPxA+MUPhB8Iv4IESH5+vkRFRcnm5qasrKwI9j09Pcl3tgHXxt/T01OZnJyUmZkZeXl5EUogMTExEh0dLVtbW9La2iqxsbHf2hEfHx+yu7srUEtLi/T19UlkZKSMj48Ldcp6fX01OqC+vv5bO+L+/t643sPDg3ndt7c3CYqUhafKX9vBwYHRie3t7X5rQ8AB2dnZ8duTpdf2ZxuogBwdHdnqXl1dlbm5OfEUiLt4eAjeLus5U1NTtjLM/vHx0dyHAcDFxYVQAvlK3d3d8idviDUeKiwstJXDw8PNVAjB9K0eNzExIW1tbZxAhoeHPwcHB8VaTk5O9jhluYuHkTuBWI0eKisrEx18QOvr6zI9Pc3/hvB7CD+Qnw1kZGREysvLbR3T2NhoK2dnZ9vKubm5xuTMehyTNC3X1dVJZ2enWW5qapKcnByXHuJtPCaDPT09kpWVZeyrqqqyzYswCNB26moC/m9oaBCn+QcckOfnZ8EN637c6OzsrK3R1hEONDY2Jufn5+a+2tpa2/H+/n5jJq3lq6sriYiIcAnE23h0blpammRkZIi1fc52lpaW2mJQz9+ezP51IO/v7+LpDFllHU5+JflXzmUPT1OWu3iVt+toTuPn9xB+D+EH8qOAqNkhF6upIseqKaqBolxUVGQaKNKcrvTquc3NzTYDTUpKEoz9tc6BgQHB5MwJxJd4XeGNj4+3mbqavNaZl5dnltF+630G7BviyiCdIyrtDD1eXV1tO29hYUEwQNAYQEtPTzdjurq6ZGlpSVy9Id7E6+gJ+/Q4lkWsIzMIEABY22+9z4BOWb58ZHJnkM6BgJq1pynrv+JdyXkf7sr8HsLvIfxAfhQQ5GzNx2tra6KTMviDLu7FxcUZebekpMQ0SBjw/Py8Ub67u5Pi4mLBeXock0v8hYEiteE4vnvjm7wTiC/xSD2Yl6iH6Lnb29u2NunkUuu03mdAAsFqKIyzoKDAbCSWUpaXlwWzcZRxfH9/XyoqKkRnv5il/7MCa5Qx2kEHqAHjhjEiwnnoTKi3t9eoQzvFCsSXeDxEuD5GYtqmvb098yHSOkdHR+Xy8lK0Tut98qcs/pTFD+RHAsGCm3Wt6Pj4WG5vb40NZaQK/NXPqicnJ4IPRIeHh2a+RizirIuB1jLORYz+QsTpId7GBzUQmGFlZaXc3NwYZZh3TU2NwEtQBhgsfXd0dJidgS9vaqgao7NkrTMzM9OchMEfNjY2jO2rN8Tb+KAFMjQ0JImJicbTiO3s7ExCQ0MNc9QlhrCwMGMGnJCQYJRDQkJgqJ9qwikpKca3aoyArq+vzTrRyfh1I57q1NRUoz6t0wrEl3h+D+H3EA4g+Dkq3jZ/bAEJBKupSBHfnQqC4c34394QzMqdK7z8QPwEZHFx0RhN4dfsuvTND4TYQ/iBWIQhpr9uwp/XDlgg/OIHwg+EX/xA+IHwix8Iv/iB8APhFz8QfiD84gfCD4Rf/ED4gfCLHwi/+IHwA+EXPxB+IPziB8IPhF/8QPiB8IsfCL/4gfAD4Rc/EH4g/OIHwg+EX/xA+IHwyy/6DSC1D9R8yJyVAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Calendar-Examples">exampleVisualizationCSVIcon	^ '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AABJRU5ErkJggg=='</body><body package="Roassal2-Builder-Calendar-Examples">exampleYearIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAASg0lEQVR4XuWd968VRRTH779miBETjRr/AjGa+JtRwYK9YMGKYgGNEhuosTdsNBXFXrGggKBgxQYqwsH5DPvdnJ3de+9e2Hvf880kN+9tOTtn5uzOKfOdM70DB/Iv06n08u+CjAXyxRdf2KOPPmrToeHwwt9Vq1bVrq1fv35iPL733nuVunovvPCCvf3223bTTTfZfffdZzB6//33j4WhZ5991r766is7/fTTbdGiRfbaa6/Zvffea7/88ouJueuvv97OOeccW7Zsma1evXpsHQMv11xzjV100UUH5syZE+tbunSpff3113bttdfaW2+9NRGhPPPMM7HuhQsX2t133229119/3V566SX77LPP7P33349MwNA430pegF27dsXGf/jhh6a3kuN33303nrv55ptt3F/IDz/8YK+88opR96effhr7AB74f9OmTRMRCP3/3Xff2e23327bt2+33rp168z/XnzxRUvPDfpt2bIlMv7xxx+PRDfs99hjj7W+9/fff488rF27tlMeRvmpgw+V/rnnnot/D1uH8Eb5v1NRpgMPE1XqP//8c6WhfFqjdMYgeso///xTOf7xxx9tz5491u8Zv/32mw3iwfburdDyBe3fv79y7qeffqoc88xBPPIMiudHuq+r8scff7T7QlD8/viyyy4bSSCD6CkPPPBA5XjBggW2c+fO8tzKlSttzZo1lXu8tVYTyIYNNV7uuOOOyrkbb7yxcnzEEUdUjufNm1c5PuGEE+JY78+9/PLLnQoEI6MmEMxAXxFK77zzziuP//33X7vkkkv6CyTQ2wj0FJTo33//XZ7D2vFCxNrCGvE0KOC+Apk71w44c/biiy+2xx9/vLx/48aN5jucr/HMM8+sPB8e/Zd7+eWX25NPPlmh6dr8PfLII/PXITPOMcxfIB0L5KqrrjLvrb766qsVM45xk3N+ONm9e3d5rjZchPM2Ar2GJkxW/n7yySem8ZS/f/31V7x3xYoVkc7fK75rPATbPjg6ZZ3c/84771SOcUrxAcST6hFP+/bts7vuuqvCk/wz3YuhwP9NHWtXXFE5z7DrvXKGv6efftq8QueZPfkRKrfeemvJCIWx95hjjjGvePBu+TV2RqC3Eeg3FAp4Q6KI33zzzQoNFo0cV+6lMX15eOghM2cEYON/8MEH5TH0X375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'</body><body package="Roassal2-Builder-Calendar-Examples">exampleYearShapeIcon	^ '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'</body><body package="Roassal2-Builder-Calendar-Examples">exampleYearWithDayNamesIcon	^ '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QmCC'</body></methods><methods><class-id>Roassal2.RTCalendarExample</class-id> <category>sources</category><body package="Roassal2-Builder-Calendar-Examples">exampleBasic| b |b := RTCalendarBuilder new.b dates: (Date today to: Date today next next).b build.^ b view</body><body package="Roassal2-Builder-Calendar-Examples">exampleCodeCommits| classes dictByJulian dictByDate maxPerDays b |"Set your classes here:"classes := RTShape withAllSubclasses."classes := (RPackageOrganizer default packageNamed: 'Roassal2') definedClasses.""Script"dictByJulian := (classes flatCollect: #methods) groupedBy: [ :m | m date julianDayNumber ].dictByDate := (classes flatCollect: #methods) groupedBy: [ :m | m date ].maxPerDays := (dictByJulian values collect: #size) max.b := RTCalendarBuilder new.b yearShape composite: [ :comp | 	comp add: (RTLabel new text: [ :d | d year ]; height: 20 ).	comp add: (RTBox new color: Color lightGray trans)].b yearLayout verticalLine.b dateShape rectangle 	size: 15; 	borderColor: Color lightGray;	color: Color lightGray;	if: [ :d| dictByJulian includesKey: d julianDayNumber ] color: [ :d| |i|		i := (dictByJulian at: d julianDayNumber) size / maxPerDays.		Color r: i g: 0 b: 0 ].b dateInteraction when: TRMouseClick do: [ :evt | 	(dictByJulian at: evt element model julianDayNumber ifAbsent: [ #() ]) inspect ].b dateInteraction popup text: [ :d | 	(dictByJulian at: d julianDayNumber ifAbsent: [ #() ]) size asString, ' Methods' ].b dates: (dictByDate keys min to: dictByDate keys max).^ b</body><body package="Roassal2-Builder-Calendar-Examples">exampleMonth| b |b := RTCalendarBuilder new.b dates: (Month current to: Month current next).b build.^ b view</body><body package="Roassal2-Builder-Calendar-Examples">exampleYear| b |b := RTCalendarBuilder new.b dateShape if: [ :date | date dayOfWeek = 1 ] color: Color red.b dates: Year current.b build.^ b view</body><body package="Roassal2-Builder-Calendar-Examples">exampleYearShape| b |b := RTCalendarBuilder new.b dateShape if: [ :date | date dayOfWeek = 1 ] color: Color red.b yearShape composite: [ :comp | 	comp add: (RTLabel new text: [ :d | d year ]; height: 20 ).	comp add: (RTBox new color: [:d | 		(d year % 2 = 0) 			ifTrue: [Color lightGray alpha: 0.2] 			ifFalse: [ Color lightGreen alpha: 0.2 ]]). ] .b dates: (Year current to: Year current next).b build.^ b view</body><body package="Roassal2-Builder-Calendar-Examples">exampleYearWithDayNames| b |b := RTCalendarBuilder new.b dateShape composite: [ :com | 	com add: (RTEllipse new color: [ :d | 		d = Date today			ifTrue: [ Color blue alpha: 0.2 ]			ifFalse: [Color transparent] ]; size: 18).	com add: (RTLabel new text: [:d| d dayOfMonth];		color: [:d | (d dayOfWeek = 1) 			ifTrue: [Color red] 			ifFalse: [ Color black ] ]) ].b showDayNames.b yearShape composite: [ :comp | 	comp add: (RTLabel new text: [ :d | d year ]; height: 20 ).	comp add: (RTBox new color: [ Color blue alpha: 0.1 ]). ] .b dates: Year current.b build.^ b view</body></methods><methods><class-id>Roassal2.RTCalendarExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Calendar-Examples">label	^ 'Calendar'</body></methods><methods><class-id>Roassal2.RTGrapherTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testAxis	| x1 x2 ds |	b := RTGrapher new.	ds := RTData new.	ds points: #(1 2).	b add: ds.		x1 := b axisX numberOfTicks: 4.	x2 := b axisX numberOfLabels: 5.		self assert: x1 == x2.	self assert: x1 numberOfTicks equals: 5.	self assert: x1 numberOfLabels equals: 5.</body><body package="Roassal2-Builder-Grapher-Tests">testAxis02	| x1 x2 ds |	b := RTGrapher new.	ds := RTData new.	ds points: #(1 2).	b add: ds.		x1 := b axisY numberOfTicks: 4.	x2 := b axisY numberOfLabels: 5.		self assert: x1 == x2.	self assert: x1 numberOfTicks equals: 5.	self assert: x1 numberOfLabels equals: 5.</body><body package="Roassal2-Builder-Grapher-Tests">testDefault	b := RTGrapher new.	self assert: b minX equals: 0.	self assert: b maxX equals: 0.	self assert: b minY equals: 0.	self assert: b maxY equals: 0.		self assert: b datasets isEmpty.	self assert: b decorators isEmpty.</body><body package="Roassal2-Builder-Grapher-Tests">testDefault02	b := RTGrapher new.	b maxX: 2.	b minX: -2.	b maxY: 5.	b minY: -1.	self assert: b minX equals: -2.	self assert: b maxX equals: 2.	self assert: b minY equals: -1.	self assert: b maxY equals: 5.</body><body package="Roassal2-Builder-Grapher-Tests">testExtent	b := RTGrapher new.	b extent: 50 @ 30.	self assert: b extent equals: 50 @ 30</body><body package="Roassal2-Builder-Grapher-Tests">testNumberOfPlugins	self assert: RTGrapher new numberOfDecorators equals: 0.	b := RTGrapher new.	b addDecorator: (RTVerticalLineDecorator new).	self assert: RTGrapher new numberOfDecorators equals: 0.</body><body package="Roassal2-Builder-Grapher-Tests">testNumberOfPlugins01	self assert: RTGrapher new numberOfDecorators equals: 0.</body><body package="Roassal2-Builder-Grapher-Tests">testNumberOfPlugins02	b := RTGrapher new.	b addDecorator: (RTVerticalLineDecorator new).	self assert: b numberOfDecorators equals: 1.</body><body package="Roassal2-Builder-Grapher-Tests">testRender	| v ds |	b := RTGrapher new.	ds := RTData new.	ds points: #(1 2).	b add: ds.		v := RTView new.	b renderIn: v</body><body package="Roassal2-Builder-Grapher-Tests">testSimple	| ds |	b := RTGrapher new.	ds := RTData new.	ds interaction popupText.	ds points: #(3 4 5 6).	ds x: #yourself.	ds y: #yourself.	b add: ds.	b build.		self assert: ds maxX equals: 6.		self assert: b minX equals: 0.	self assert: b maxX equals: 6.	self assert: b minY equals: 0.	self assert: b maxY equals: 6.</body><body package="Roassal2-Builder-Grapher-Tests">testSimple02	| ds |	b := RTGrapher new.	ds := RTData new.	ds points: (-100 to: 100 by: 0.1).	ds y: [ :x | (0.1 * (x + 30)) sin  ].	ds noDot.	ds interaction popupText: 'sinus'.	ds connectColor: Color blue.	b add: ds.	b minY: -2.	b maxY: 2.	b build.</body><body package="Roassal2-Builder-Grapher-Tests">testSimple03	| ds |	b := RTGrapher new.	ds := RTData new.	ds interaction popup.	ds points: RTShape withAllSubclasses.	ds y: [ :cls | cls rtmethods size ].	ds barShape rectangle color: Color lightBlue.	b add: ds.	b build.		ds renderIn: RTView new.</body></methods><methods><class-id>Roassal2.RTGrapherTest</class-id> <category>test labels</category><body package="Roassal2-Builder-Grapher-Tests">testAxesPosition	| ds center |	b := RTGrapher new.	ds := RTData new.	ds points: #(3 -3).	b add: ds.	b build.	center := b getPixelPositionOf: 0 @ 0.	self assert: center equals: 0 @ -100.	self assert: b axisX fromPoint equals: 0 @ -100.	self assert: b axisX toPoint equals: 300 @ -100.	self assert: b axisY fromPoint equals: 0 @ 0.	self assert: b axisY toPoint equals: 0 @ -200</body><body package="Roassal2-Builder-Grapher-Tests">testAxesWithOFffsetPosition	| ds center |	b := RTGrapher new.	b yOffset: 30.	b minX: 1.	ds := RTData new.	ds points: #(3 -3).	b add: ds.	b build.	center := b getPixelPositionOf: 0 @ 0.	self assert: center equals: 0 @ -100.	self assert: b axisX fromPoint equals: 0 @ -100.	self assert: b axisX toPoint equals: 300 @ -100.	self assert: b axisY fromPoint equals: -30 @ 0.	self assert: b axisY toPoint equals: -30 @ -200</body><body package="Roassal2-Builder-Grapher-Tests">testTitleOnAxes	| ds labels |	b := RTGrapher new.	ds := RTData new.	ds points: #(1 2).	b add: ds.	b axisX noTick; title: 'hello'.	b axisY noLabel; title: 'world'.	b build.		labels := b view elements elements select: [ :el | el shape class == RTLabel ].	self assert: (labels anySatisfy: [ :e | e trachelShape text = 'hello' ]).	self assert: (labels anySatisfy: [ :e | e trachelShape text = 'world' ]).</body><body package="Roassal2-Builder-Grapher-Tests">testTitleOnAxes02	| ds labels |	b := RTGrapher new.	ds := RTData new.	ds points: #(1 2).	b add: ds.	b axisX title: 'hello'.	b axisY title: 'world'.	b build.		labels := b view elements elements select: [ :el | el shape class == RTLabel ].	self assert: (labels anySatisfy: [ :e | e trachelShape text = 'hello' ]).	self assert: (labels anySatisfy: [ :e | e trachelShape text = 'world' ]).</body></methods><methods><class-id>Roassal2.RTGrapherTest</class-id> <category>test - scaling</category><body package="Roassal2-Builder-Grapher-Tests">testScaling01	| ds1 |	b := RTGrapher new.	ds1 := RTData new.	ds1 points: (1 to: 10).	ds1 yLog.	b add: ds1.	self assert: b yScale equals: ds1 yScale</body><body package="Roassal2-Builder-Grapher-Tests">testScaling02	| ds1 ds2 |	b := RTGrapher new.	ds1 := RTData new.	ds1 points: (1 to: 10).	ds1 yLog.	b add: ds1.	ds2 := RTData new.	ds2 points: (1 to: 10).	ds2 yLog.	b add: ds2.		self assert: b yScale equals: ds1 yScale</body><body package="Roassal2-Builder-Grapher-Tests">testScaling03	| ds1 ds2 |	b := RTGrapher new.	ds1 := RTData new.	ds1 points: (1 to: 10).	ds1 yLog.	b add: ds1.	ds2 := RTData new.	ds2 points: (1 to: 10).	ds2 yLinear.	b add: ds2.		self should: [ b yScale ] raise: Error</body><body package="Roassal2-Builder-Grapher-Tests">testScaling04	| ds1 ds2 |	b := RTGrapher new.	ds1 := RTData new.	ds1 points: (1 to: 10).	ds1 xLog.	b add: ds1.	ds2 := RTData new.	ds2 points: (1 to: 10).	ds2 xLinear.	b add: ds2.		self should: [ b xScale ] raise: Error.	self shouldnt: [ b yScale ] raise: Error</body></methods><methods><class-id>Roassal2.RTCircleGeometryTest</class-id> <category>tests</category><body package="Roassal2-AttachPoint-Tests">testIncludesPoint	circle := RTCircleGeometry center: 10 @ 10 radius: 10.	self assert: (circle includesPoint: 10 @ 0).	self assert: (circle includesPoint: 20 @ 10).	self assert: (circle includesPoint: 10 @ 20).	self assert: (circle includesPoint: 0 @ 10).	self deny: (circle includesPoint: 0 @ 0).	self deny: (circle includesPoint: 20 @ 0).	self deny: (circle includesPoint: 20 @ 20).	self deny: (circle includesPoint: 0 @ 20)</body><body package="Roassal2-AttachPoint-Tests">testIntersectCircleIntersect	| circleLeft circleRight |	circleLeft := RTCircleGeometry center: 0 @ 0 radius: 10.	circleRight := RTCircleGeometry center: 10 @ 10 radius: 10.	self assert: ((circleLeft intersectCircle: circleRight) first closeTo: 10 @ 0).	self assert: ((circleLeft intersectCircle: circleRight) second closeTo: 0 @ 10)</body><body package="Roassal2-AttachPoint-Tests">testIntersectCircleNot	| circleLeft circleRight |	circleLeft := RTCircleGeometry center: 0 @ 0 radius: 10.	circleRight := RTCircleGeometry center: 30 @ 0 radius: 10.	self assert: (circleLeft intersectCircle: circleRight) isEmpty</body><body package="Roassal2-AttachPoint-Tests">testIntersectCircleTouch	| circleLeft circleRight |	circleLeft := RTCircleGeometry center: 0 @ 0 radius: 10.	circleRight := RTCircleGeometry center: 20 @ 0 radius: 10.	self assert: (circleLeft intersectCircle: circleRight) equals: (Array with: (10 @ 0))</body><body package="Roassal2-AttachPoint-Tests">testNew	self should: [ RTCircleGeometry new ] raise: Error.	circle := RTCircleGeometry center: 0 @ 0 radius: 10.	self assert: circle center equals: 0 @ 0.	self assert: circle radius equals: 10</body></methods><methods><class-id>Roassal2.RTGradientColoredLineExample</class-id> <category>sources</category><body package="Roassal2-ExampleBrowser-Examples">exampleA	| v elem1 elem2 edge |	v := RTView new.	elem1 := (RTEllipse new color: (Color blue alpha:0.3); size:20) elementOn: 1.	elem2 := (RTEllipse new color: (Color red alpha:0.9); size:20) elementOn: 2.	elem1 @ RTDraggable.	elem2 @ RTDraggable.	elem2 translateBy: 300@0.	v add: elem1.	v add: elem2.		edge := RTEdge from:elem1 to:elem2.	v add: (edge + (RTGradientColoredLine new colors: (Array with: (elem1 color) with: (elem2 color)); precision: 100; gradientColorShape)).	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleB	| v elem1 elem2 edge |	v := RTView new.	elem1 := (RTEllipse new color: (Color red alpha:0.3); size:20) elementOn: 1.	elem2 := (RTEllipse new color: (Color red alpha:0.9); size:20) elementOn: 2.	elem2 translateBy: 300@0.	v add: elem1.	v add: elem2.		edge := RTEdge from:elem1 to:elem2.	v add: (edge + (RTGradientColoredLine new colors: (Array with: (elem1 color) with: (elem2 color)); precision: 100; gradientColorShape)).	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleDependencies		| eb v es |	v := RTView new.	es := RTEllipse new elementsOn: RTShape withAllSubclasses, TRShape withAllSubclasses.	v addAll: es.	es @ RTDraggable.	es @ RTPopup.	eb := RTEdgeBuilder new.	eb view: v.	eb shape line color: Color black.	eb objects: RTShape withAllSubclasses.	eb connectToAll: #dependentClasses.	RTMetricNormalizer new		elements: es;		normalizeSize: #numberOfLinesOfCode min: 10  max: 30;		normalizeColor: #numberOfMethods using: (Array with: Color green with: Color red) using: #sqrt;		alphaColor: 0.5.	RTForceBasedLayout new charge: -300; on: es.	v edges do: #remove.	eb := RTEdgeBuilder new.	eb view: v.	eb shape gradientLineFrom: Color green to: Color white.	eb 		objects: RTShape withAllSubclasses, TRShape withAllSubclasses;		connectFrom: #yourself to: #superclass.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">exampleedgePaletteColored		| v elem1 elem2 edge|	v := RTView new.	elem1 := (RTEllipse new color: (Color blue alpha:0.6); size:10) elementOn: 1.	elem2 := (RTEllipse new color: (Color blue alpha:0.6); size:10) elementOn: 2.	elem2 translateBy: 200@0.	elem1 @ RTDraggable.	elem2 @ RTDraggable.	v add: elem1.	v add: elem2.	edge := RTEdge from:elem1 to:elem2.	v add: (edge + (RTMultiColoredLine new colors: (RTColorPalette qualitative colors: 12 scheme:'Paired'); colorShape)).	^ v</body></methods><methods><class-id>Roassal2.RTGradientColoredLineExample</class-id> <category>as yet unclassified</category><body package="Roassal2-ExampleBrowser-Examples">label	^ 'Gradient and multi colored lines'</body></methods><methods><class-id>Roassal2.RTGradientColoredLineExample</class-id> <category>icons</category><body package="Roassal2-ExampleBrowser-Examples">exampleAIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACBklEQVR4XuXVS1IaUQCFYffgyC2YgWtxDZZLcwOOdO4IiUZCRIPG94sGRMUHqMc0RUxWkCqK7686C7j91e078/HhN0nN+J/AB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/P4LSMoqlWR9PSmKZNo/3Oi8WVpKFhaSjY1MHMgIY3X136YeZHk5mZv7u4kDWVsbQ6ysjPaedvFnrfcUN29plyuuX8e7Go53ORjvYpDW+Uu557TOntI6He0xxUm5435axw8pju7H+3VXrpf24W3aB93xmp10mu10fhbp7rfK3aS7d51u4yq3jcvc7l6kt3ue3o+z3NVPy53k/vtxuaM81A7Trx2kv9PM47f9cnt52m7keWu3XD0vX+sZVGsZVncy3NzO6+ZW3irVvM1/yfvs7OSCjH5Tn7ejvMHTf0NGh/y8IYuL8R91/1H380F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EKHfwFZ+KsQkEEMAAAAASUVORK5CYII='</body><body package="Roassal2-ExampleBrowser-Examples">exampleBIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABxUlEQVR4XuXVy01CURiFUXpwZAtOqMUajKXRgCOdM/KFiPLwCT5QsIeN4h+pQJMb15fsAu5Z9+S0Viu/JtXyj8AH8fNBfBA/H8QH8fNBfBA/H8QH8fNB/HwQH8TPB/FB/HwQH8TPB/FB/HwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8/gQk646Pk6Oj5OMj//3gvr93by9pt5NuN80DWWMcHGz270H295Pt7c2aB3J4WBidTu3rlnxvuUwWi9r7e+3trTaf115fk5eX2vNz8vRUm82S6bT2+Fh7eKjd3yd3d7Xb29rNTTKZ1MbjZDSqDYe16+vk6qo2GNQuL2v9fnJxUev1kvPz2tlZcnpaOzmprX++nZ1ka6vBIOvD/7khv3iFG3tDvr5xc0N2d+M/6v6j7ueD+CB+PoifD+KD+PkgPoifD+KD+PkgPoifD+Lng/ggfj6ID+Lng/ggfj6ID+Lng/j5ID6Inw/ig/j5ID6Inw/ig/j5IH4+iA/i54P4IH4+iA/i54P4IH4+iJ8P4oP4+SA+iJ8P4oP4+SBCnzOafijeu2A3AAAAAElFTkSuQmCC'</body><body package="Roassal2-ExampleBrowser-Examples">exampleDependenciesIcon	^ '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'</body><body package="Roassal2-ExampleBrowser-Examples">exampleedgePaletteColoredIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAABbklEQVR4XuXUTQpBURjHYZu1AmNiCxbkDoyIMPORKOVSV4rE5L7I4MgK3Hp+9Z+eTuepU3s+/apUzX8CH8TPB/FB/HwQH8TPB/FB/HwQH8TPB/HzQXwQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH8fBAfxM8H8UH8fBAfxM8H8fNBfJDfer2ITieiqo+SZf+7319A2u2IRvMex+vjs8XxEsPNKa2479Imh3HaPl9Gme/THoNBWpzX3x2mEdt+2qW4pa1medrpfUbEd8V89Fm3NYp6vQz/y/LzQXwQPx/EB/HzQXwQPx/EB/HzQXwQPx/EzwfxQfx8EB/EzwfxQfx8EB/Ezwfx80F8ED8fxAfx80F8ED8fxAfx80H8fBAfxM8H8UH8fBAfxM8H8UH8fBA/H8QH8fNBfBA/H8QH8fNBfBA/H8TPB6l0L/57mfhqM72IAAAAAElFTkSuQmCC'</body></methods><methods><class-id>Roassal2.RTLabelGeneratorTest</class-id> <category>running</category><body package="Roassal2-Tests">setUp	super setUp.	nice := RTNiceStepSizeGenerator new.	lg := RTLabelGenerator nice: nice.</body></methods><methods><class-id>Roassal2.RTLabelGeneratorTest</class-id> <category>tests</category><body package="Roassal2-Tests">testSearch	| label |	lg setLooseFlag: true.	label := lg searchMin: -98.0 max: 18.0 desired: 3.	self assert: label asString = '(Score: 0.14) -100.00	-60.00	-20.00	20.00	'.	lg setLooseFlag: false.	label := lg searchMin: -98.0 max: 18.0 desired: 3.	self assert: label asString = '(Score: 0.62) -100.00	-50.00	0.00	'.						lg setLooseFlag: true.	label := lg searchMin: -1 max: 3.5 desired: 4.	self assert: label asString = '(Score: 0.54) -1.00	0.00	1.00	2.00	3.00	4.00	'.	lg setLooseFlag: false.	label := lg searchMin: -1 max: 3.5 desired: 4.	self assert: label asString = '(Score: 0.63) -1.00	0.00	1.00	2.00	3.00	'.		lg setLooseFlag: true.	label := lg searchMin: -1 max: 200 desired: 3.	self assert: label asString = '(Score: -0.29) -25.00	50.00	125.00	200.00	'.	lg setLooseFlag: false.	label := lg searchMin: -1 max: 200 desired: 3.	self assert: label asString = '(Score: 1.00) 0.00	100.00	200.00	'.		lg setLooseFlag: true.	label := lg searchMin: 119 max: 178 desired: 3.	self assert: (label asString = '(Score: -0.65) 110.00	150.00	190.00	' or:				[label asString = '(Score: -0.65) 110.00	130.00	150.00	170.00	190.00	']).	lg setLooseFlag: false.	label := lg searchMin: 119 max: 178 desired: 3.	self assert: label asString = '(Score: 0.48) 120.00	150.00	180.00	'.		lg setLooseFlag: true.	label := lg searchMin: -31 max: 27 desired: 4.	self assert: label asString = '(Score: 0.07) -40.00	-30.00	-20.00	-10.00	0.00	10.00	20.00	30.00	'.	lg setLooseFlag: false.	label := lg searchMin: -31 max: 27 desired: 3.	self assert: label asString = '(Score: 0.71) -30.00	0.00	30.00	'.		lg setLooseFlag: true.	label := lg searchMin: -55.45 max: -49.99 desired: 2.	self assert: label asString = '(Score: -1.13) -56.00	-48.00	'.	lg setLooseFlag: false.	label := lg searchMin: -55.45 max: -49.99 desired: 3.	self assert: label asString = '(Score: 0.49) -55.00	-52.50	-50.00	'.		lg setLooseFlag: false.	label := lg searchMin: 0 max: 100 desired: 2.	self assert: label asString = '(Score: 1.00) 0.00	100.00	'.	label := lg searchMin: 0 max: 100 desired: 3.	self assert: label asString = '(Score: 0.95) 0.00	50.00	100.00	'.	label := lg searchMin: 0 max: 100 desired: 4.	self assert: label asString = '(Score: 0.70) 0.00	50.00	100.00	'.	label := lg searchMin: 0 max: 100 desired: 5.	self assert: label asString = '(Score: 0.85) 0.00	25.00	50.00	75.00	100.00	'.	label := lg searchMin: 0 max: 100 desired: 6.	self assert: label asString = '(Score: 0.90) 0.00	20.00	40.00	60.00	80.00	100.00	'.	label := lg searchMin: 0 max: 100 desired: 7.	self assert: label asString = '(Score: 0.80) 0.00	20.00	40.00	60.00	80.00	100.00	'.	label := lg searchMin: 0 max: 100 desired: 8.	self assert: label asString = '(Score: 0.79) 0.00	10.00	20.00	30.00	40.00	50.00	60.00	70.00	80.00	90.00	100.00	'.	label := lg searchMin: 0 max: 100 desired: 9.	self assert: label asString = '(Score: 0.88) 0.00	10.00	20.00	30.00	40.00	50.00	60.00	70.00	80.00	90.00	100.00	'.	label := lg searchMin: 0 max: 100 desired: 10.	self assert: label asString = '(Score: 0.94) 0.00	10.00	20.00	30.00	40.00	50.00	60.00	70.00	80.00	90.00	100.00	'.</body></methods><methods><class-id>Roassal2.RTMapBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-Map-Tests">testCities	|stgo brasilia saopaulo|	stgo := #('Santiago' 6027000).	brasilia := #('Brasilia' 2481000).	saopaulo := #('Sao Paulo' 19889559).		builder countries: #('Chile' 'Brazil').	builder cities: (Array with:stgo with: brasilia with: saopaulo) named: [ :c | c at: 1 ].		builder renderIn: builder view.		self assert: builder view numberOfElements = 5.	self assert: builder view elements third model = stgo.	self assert: builder view elements fourth model = brasilia.	self assert: builder view elements fifth model = saopaulo.</body><body package="Roassal2-Builder-Map-Tests">testCityEvolution	| myCities santiago |	myCities := #(		#('Santiago' #(33 41))	).		builder cities: myCities named: [ :c | c at: 1 ].	builder cities evolveAt: 2 through: #(1907 1920).	self assert: (myCities == builder cityObjects) not.	self assert: ((myCities at: 1) == (builder cityObjects at: 1)) not.		santiago := builder cityObjects at: 1.	self assert: (santiago at: 2) currentValue = 33.		builder cities stepBack.	self assert: (santiago at: 2) currentValue = 33.		builder cities stepForward.	self assert: (santiago at: 2) currentValue = 41.		builder cities stepForward.	self assert: (santiago at: 2) currentValue = 41.</body><body package="Roassal2-Builder-Map-Tests">testCountries	| chile france |	chile := #('Chile').	france := #('France').	builder countries: (Array with: chile with: france) named: [ :c | c at: 1 ].	builder renderIn: builder view.	self assert: builder view numberOfElements = 2.		self assert: builder view elements first model == chile.	self assert: builder view elements second model == france.</body><body package="Roassal2-Builder-Map-Tests">testGeoLength	| santiago paris distance error vdm |		santiago := -33.45 @ -70.66.	vdm := -33 @ -71.52.	paris := 48.85 @ 2.35.		distance := builder geoDistanceBetween: santiago and: paris.	error := distance * 0.003.	self assert: (distance - error &lt; 11650 and: distance + error &gt; 11650).		distance := builder geoDistanceBetween: santiago and: vdm.	error := distance * 0.003.	self assert: (distance - error &lt; 94.35 and: distance + error &gt; 94.35).</body><body package="Roassal2-Builder-Map-Tests">testPixelsToGeoTransformations	|santiago stgoPixels paris parisPixels pixelsToGeo|		santiago := -33.45 @ -70.66.	paris := 48.85 @ 2.35.		pixelsToGeo := [ :p | (builder translatePixelsToGeoPosition: p) roundTo: 0.01]. 		stgoPixels := builder translateGeoPositionToPixels: santiago.	self assert: ((pixelsToGeo value: stgoPixels) closeTo: santiago).		parisPixels := builder translateGeoPositionToPixels: paris.	self assert: ((pixelsToGeo value: parisPixels) closeTo: paris).</body><body package="Roassal2-Builder-Map-Tests">testRoutes	builder countries: #('Chile' 'Brazil').	builder cities: #('Santiago' 'Brasilia' 'Sao Paulo').	builder routes from: 'Santiago' toAll: #('Brasilia' 'Sao Paulo').	builder routes from: 'Sao Paulo' toAll: #('Brasilia').	builder renderIn: builder view.		self assert: builder view numberOfEdges = 3.	self assert: builder view edges first from model = 'Santiago'.	self assert: builder view edges last from model = 'Sao Paulo'.</body></methods><methods><class-id>Roassal2.RTMapBuilderTest</class-id> <category>running</category><body package="Roassal2-Builder-Map-Tests">setUp	super setUp.	builder := RTMapBuilder new.</body></methods><methods><class-id>Roassal2.RTLayoutTest</class-id> <category>flow layout</category><body package="Roassal2-Core-Tests">testHorizontalFlowLayoutAlignment	| l |	l := RTHorizontalFlowLayout new.	self assert: l isAlignTop.	self deny: l isAlignBottom.		l alignBottom.	self deny: l isAlignTop.	self assert: l isAlignBottom.</body><body package="Roassal2-Core-Tests">testHorizontalFlowLayoutAlignmentLayoutBottom	| l es |	es := (RTBox new size: [ :v | v * 10 ]) elementsOn: #(1 2 3).	l := RTHorizontalFlowLayout new.	l alignBottom.	l on: es.	"	RTView new		addAll: es;		open."			self assert: (es collect: #position) asArray = (Array with: (0@10.0) with: (-5@30.0) with: (-10.0@ 60.0))</body><body package="Roassal2-Core-Tests">testHorizontalFlowLayoutAlignmentLayoutCenter	| l es |	es := (RTBox new size: [ :v | v * 10 ]) elementsOn: #(1 2 3).	l := RTHorizontalFlowLayout new.	l alignCenter.	l on: es.	"	RTView new		addAll: es;		open.		"	self assert: (es collect: #position) asArray = (Array with: (5@10.0) with: (5@30.0) with: (5@60.0))</body><body package="Roassal2-Core-Tests">testHorizontalFlowLayoutAlignmentLayoutTop	| l es |	es := (RTBox new size: [ :v | v * 10 ]) elementsOn: #(1 2 3).	l := RTHorizontalFlowLayout new.	l on: es.	"	RTView new		addAll: es;		open."			self assert: (es collect: #position) asArray = (Array with: (10.0@10.0) with: (15.0@30.0) with: (20.0@60.0))</body></methods><methods><class-id>Roassal2.RTLayoutTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testCellLayout	| v els el30 el50 el80 |	v := RTView new.	els := RTBox new size: #yourself; color: (Color green alpha: 0.3); elementsOn: #(30 50 80).	els @ RTDraggable.	v addAll: els.	RTEdgeBuilder new		view: v;		useAssociations: (Array with: 30 -&gt; 50 with: 30 -&gt; 80).	RTCellLayout new 		gapSize: 0; on: els.	el30 := els first.	el50 := els second.	el80 := els third.		self assert: el30 encompassingRectangle bottom + 10 equals: el80 encompassingRectangle top.	self assert: el30 encompassingRectangle right + 25 equals: el50 encompassingRectangle left.	self assert: el50 encompassingRectangle bottom equals: el80 encompassingRectangle top.</body><body package="Roassal2-Core-Tests">testCircleLayout	| answer |	RTCircleLayout on: view elements.	answer :=  OrderedCollection new.	answer add: (442@222);		add: (431@290);		add: (400@351);		add: (351@400);		add: (290@431);		add: (222@442);		add: (154@431);		add: (93@400);		add: (44@351);		add: (13@290);		add: (2@222);		add: (13@154);		add: (44@93);		add: (93@44);		add: (154@13);		add: (222@2);		add: (290@13);		add: (351@44);		add: (400@93);		add: (431@154).	self assert: ((view elements collect: #position) collect: #asIntegerPoint) asArray = answer asArray</body><body package="Roassal2-Core-Tests">testCircleLayoutOnEmpty	RTCircleLayout new applyOn: #()</body><body package="Roassal2-Core-Tests">testCluster	view := RTView new.	view		addAll:			((RTEllipse new size: 10) elementsOn: Collection withAllSubclasses).	RTEdgeBuilder new		view: view;		objects: Collection withAllSubclasses;		connectFrom: #superclass to: #yourself.	RTClusterLayout on: view elements edges: view edges</body><body package="Roassal2-Core-Tests">testFlowLayoutAlignment	| l |	l := RTFlowLayout new.	self assert: l isAlignTop.	self deny: l isAlignBottom.		l alignBottom.	self deny: l isAlignTop.	self assert: l isAlignBottom.</body><body package="Roassal2-Core-Tests">testFlowLayoutAlignmentLayoutBottom	| l es |	es := (RTBox new size: [ :v | v * 10 ]) elementsOn: #(1 2 3).	l := RTFlowLayout new.	l alignBottom.	l on: es.	"	RTView new		addAll: es;		open."			self assert: (es collect: #position) asArray = (Array with: (10.0@0.0) with: (30.0@ -5.0) with: (60.0@ -10.0))</body><body package="Roassal2-Core-Tests">testFlowLayoutAlignmentLayoutCenter	| l es |	es := (RTBox new size: [ :v | v * 10 ]) elementsOn: #(1 2 3).	l := RTFlowLayout new.	l alignCenter.	l on: es.	"	RTView new		addAll: es;		open.		"	self assert: (es collect: #position) asArray = (Array with: (10.0@5) with: (30.0@5) with: (60.0@5))</body><body package="Roassal2-Core-Tests">testFlowLayoutAlignmentLayoutTop	| l es |	es := (RTBox new size: [ :v | v * 10 ]) elementsOn: #(1 2 3).	l := RTFlowLayout new.	l on: es.	"	RTView new		addAll: es;		open."			self assert: (es collect: #position) asArray = (Array with: (10.0@10.0) with: (30.0@15.0) with: (60.0@20.0))</body><body package="Roassal2-Core-Tests">testForce	| v es layout |	v := RTView new.	es := RTBox elementsOn: (1 to: 2).	v addAll: es.	RTEdgeBuilder new		view: v;		objects: (1 to: 2);		connectFrom: #yourself			toAll:				[ :value | Array with: value - 1 with: value + 1 with: value + 2 ].	layout := RTForceBasedLayout new.	layout on: es edges: #().	self assert: layout userDefinedEdges isEmpty</body><body package="Roassal2-Core-Tests">testForceDefault	| l |	l := RTForceBasedLayout new.	self assert: l edges isEmpty.	self assert: l nodes isEmpty.</body><body package="Roassal2-Core-Tests">testForceWithForeinEdges	| v es layout edges |	v := RTView new.	es := RTBox elementsOn: (1 to: 3).	v addAll: (es copyFrom: 1 to: 3).	edges := RTEdgeBuilder new		view: v;		objects: (1 to: 3);		connectFrom: #yourself			toAll: [ :value | Array with: value - 1 with: value + 1 ].	"We give to the layout node 1 and 2, and some edges that refer to 3"	layout := RTForceBasedLayout new.	"No error should be raised"	layout on: es allButLast edges: edges allButFirst</body><body package="Roassal2-Core-Tests">testHorizontalLineLayout	| answer |	RTHorizontalLineLayout on: view elements.	answer := (((Array new: 20) at: 1 put: (((5/2)@(5/2))); at: 2 put: (((35/2)@(5/2))); at: 3 put: (((65/2)@(5/2))); at: 4 put: (((95/2)@(5/2))); at: 5 put: (((125/2)@(5/2))); at: 6 put: (((155/2)@(5/2))); at: 7 put: (((185/2)@(5/2))); at: 8 put: (((215/2)@(5/2))); at: 9 put: (((245/2)@(5/2))); at: 10 put: (((275/2)@(5/2))); at: 11 put: (((305/2)@(5/2))); at: 12 put: (((335/2)@(5/2))); at: 13 put: (((365/2)@(5/2))); at: 14 put: (((395/2)@(5/2))); at: 15 put: (((425/2)@(5/2))); at: 16 put: (((455/2)@(5/2))); at: 17 put: (((485/2)@(5/2))); at: 18 put: (((515/2)@(5/2))); at: 19 put: (((545/2)@(5/2))); at: 20 put: (((575/2)@(5/2))); yourself)).	self assert: (view elements collect: #position) asArray = answer</body><body package="Roassal2-Core-Tests">testHorizontalLineLayoutWithBox	| models elHello elWorld elHelloWidth elWorldWidth |	view := RTView new.	models := #(50 150 ).	view addAll: (RTBox new color: (Color blue alpha: 0.2); size: #yourself; elementsOn: models).	self assert: view elements size = 2.	elHello := view elementFromModel: models first.	elWorld := view elementFromModel: models second.	elHelloWidth := elHello width.	elWorldWidth := elWorld width.	RTHorizontalLineLayout new gapSize: 0; on: view elements.	"view open."		self assert: elHello width = elHelloWidth.	self assert: elWorld width = elWorldWidth.	self assert: elHello encompassingRectangle width = elHelloWidth.	self assert: elWorld encompassingRectangle width = elWorldWidth.		self assert: elHello encompassingRectangle top = elWorld encompassingRectangle top.	self assert: elHello encompassingRectangle right &lt;= elWorld encompassingRectangle left.</body><body package="Roassal2-Core-Tests">testHorizontalLineLayoutWithText	| elHello elWorld elHelloWidth elWorldWidth |	view := RTView new.	view addAll: (RTLabel elementsOn: #('hola ' 'mundo') ).	self assert: view elements size = 2.	elHello := view elementFromModel: 'hola '.	elWorld := view elementFromModel: 'mundo'.	elHelloWidth := elHello width.	elWorldWidth := elWorld width.	RTHorizontalLineLayout new gapSize: 0; on: view elements.	"view open."		self assert: elHello width = elHelloWidth.	self assert: elWorld width = elWorldWidth.	self assert: elHello encompassingRectangle width = elHelloWidth.	self assert: elWorld encompassingRectangle width = elWorldWidth.		self assert: elHello encompassingRectangle top = elWorld encompassingRectangle top.	self assert: elHello encompassingRectangle bottom = elWorld encompassingRectangle bottom.	self deny: elHello encompassingRectangle right &gt; elWorld encompassingRectangle left.</body><body package="Roassal2-Core-Tests">testHorizontalTreeLayout	| v els el30 el50 el80 |	v := RTView new.	els := RTBox new size: #yourself; color: (Color green alpha: 0.3); elementsOn: #(30 50 80).	els @ RTDraggable.	v addAll: els.	RTEdgeBuilder new		view: v;		useAssociations: (Array with: 30 -&gt; 50 with: 30 -&gt; 80).		RTHorizontalTreeLayout new 		isLayered: false; leftGap: 0; topGap: 0; verticalGap: 0; horizontalGap: 0; on: els.	el30 := els first.	el50 := els second.	el80 := els third.	self assert: el30 encompassingRectangle right equals: el50 encompassingRectangle left.	self assert: el30 encompassingRectangle right equals: el80 encompassingRectangle left.	self assert: el50 encompassingRectangle bottom equals: el80 encompassingRectangle top.</body><body package="Roassal2-Core-Tests">testRadialTreelLayout	| answer |	RTEdgeBuilder new		view: view;		objects: (1 to: 20);		connectFrom: [ :v | v // 2 ] to: #yourself.	RTRadialTreeLayout on: view elements edges: view edges.	answer := OrderedCollection new.	answer		add: 202 @ 202;		add: 216 @ 217;		add: 187 @ 215;		add: 239 @ 217;		add: 213 @ 240;		add: 184 @ 238;		add: 165 @ 216;		add: 262 @ 208;		add: 250 @ 239;		add: 226 @ 257;		add: 212 @ 261;		add: 182 @ 259;		add: 169 @ 252;		add: 149 @ 230;		add: 144 @ 216;		add: 282 @ 202;		add: 281 @ 217;		add: 270 @ 245;		add: 261 @ 257;		add: 234 @ 275.	self		assert:			((view elements collect: #position) collect: #asIntegerPoint) asArray				= answer asArray</body><body package="Roassal2-Core-Tests">testTreeLayoutWithoutSpecificingEdges	| v answer |	v := RTView new.	v addAll: (RTBox elementsOn: (1 to: 20)).	RTEdgeBuilder new		view: v;		objects: (1 to: 20);		connectFrom: [ :value | value // 2 ] to: #yourself.	RTTreeLayout on: v elements.	answer := OrderedCollection new.	answer		add: 43.5 @ (15 / 2);		add: 27.5 @ (65 / 2);		add: 67.5 @ (65 / 2);		add: 19.5 @ (115 / 2);		add: 43.5 @ (115 / 2);		add: 59.5 @ (115 / 2);		add: 75.5 @ (115 / 2);		add: 11.5 @ (165 / 2);		add: 27.5 @ (165 / 2);		add: 39.5 @ (165 / 2);		add: 47.5 @ (165 / 2);		add: 55.5 @ (165 / 2);		add: 63.5 @ (165 / 2);		add: 71.5 @ (165 / 2);		add: 79.5 @ (165 / 2);		add: 7.5 @ (215 / 2);		add: 15.5 @ (215 / 2);		add: 23.5 @ (215 / 2);		add: 31.5 @ (215 / 2);		add: 39.5 @ (215 / 2).	self		assert: (v elements collect: #position) asArray		equals: answer asArray</body><body package="Roassal2-Core-Tests">testTreelLayout	| answer |	RTEdgeBuilder new		view: view;		objects: (1 to: 20);		connectFrom: [ :v | v // 2 ] to: #yourself.	RTTreeLayout on: view elements edges: view edges.	answer := OrderedCollection new.	answer		add: 43.5 @ (15 / 2);		add: 27.5 @ (65 / 2);		add: 67.5 @ (65 / 2);		add: 19.5 @ (115 / 2);		add: 43.5 @ (115 / 2);		add: 59.5 @ (115 / 2);		add: 75.5 @ (115 / 2);		add: 11.5 @ (165 / 2);		add: 27.5 @ (165 / 2);		add: 39.5 @ (165 / 2);		add: 47.5 @ (165 / 2);		add: 55.5 @ (165 / 2);		add: 63.5 @ (165 / 2);		add: 71.5 @ (165 / 2);		add: 79.5 @ (165 / 2);		add: 7.5 @ (215 / 2);		add: 15.5 @ (215 / 2);		add: 23.5 @ (215 / 2);		add: 31.5 @ (215 / 2);		add: 39.5 @ (215 / 2).	self		assert:			(view elements collect: #position) asArray = answer asArray</body><body package="Roassal2-Core-Tests">testVerticalLineLayoutOnElements	| el1 el2 |	view := RTView new.	el1 := RTBox new size: #yourself; elementOn: 30.	el2 := RTBox new size: #yourself; elementOn: 50.	view add: el1; add: el2.	self assert: view elements size equals: 2.	RTVerticalLineLayout new 		gapSize: 0; 		on: view elements.	self assert: el1 height equals: 30.	self assert: el2 height equals: 50.	self assert: el1 position equals: 15 @ 15.	self assert: el2 position equals: 25 @ 55.	self assert: el1 encompassingRectangle left equals: el2 encompassingRectangle left.	self assert: el1 encompassingRectangle bottom &lt;= el2 encompassingRectangle top.</body><body package="Roassal2-Core-Tests">testVerticalLineLayoutOnGroups	| line1 line2 el1 el2 |	view := RTView new.	line1 := RTBox new size: #yourself; elementsOn: #(30).	line2 := RTBox new size: #yourself; elementsOn: #(50).	view addAll: line1; addAll: line2.	self assert: view elements size equals: 2.	RTVerticalLineLayout new 		gapSize: 0; 		on: (Array with: line1 with: line2).	el1 := line1 first.	el2 := line2 first.		self assert: el1 height equals: 30.	self assert: el2 height equals: 50.	self assert: el1 position equals: 15 @ 15.	self assert: el2 position equals: 25 @ 55.	self assert: el1 encompassingRectangle left equals: el2 encompassingRectangle left.	self assert: el1 encompassingRectangle bottom &lt;= el2 encompassingRectangle top.</body><body package="Roassal2-Core-Tests">testVerticalTreeLayout	| v els el30 el50 el80 |	v := RTView new.	els := RTBox new size: #yourself; color: (Color green alpha: 0.3); elementsOn: #(30 50 80).	els @ RTDraggable.	v addAll: els.	RTEdgeBuilder new		view: v;		useAssociations: (Array with: 30 -&gt; 50 with: 30 -&gt; 80).	RTTreeLayout new 		isLayered: false; leftGap: 0; topGap: 0; verticalGap: 0; horizontalGap: 0; on: els.	el30 := els first.	el50 := els second.	el80 := els third.	self assert: el30 encompassingRectangle bottom equals: el50 encompassingRectangle top.	self assert: el30 encompassingRectangle bottom equals: el80 encompassingRectangle top.	self assert: el50 encompassingRectangle right equals: el80 encompassingRectangle left.</body></methods><methods><class-id>Roassal2.RTLayoutTest</class-id> <category>sugiyama</category><body package="Roassal2-Core-Tests">testSugiyamaLayout	| result elements |	elements := (RTBox new size: 50) elementsOn: (1 to: 20).	view := RTView new.	view addAll: elements.	elements allButFirst do: [:e | 	 	view add: (RTLine edgeFrom: elements first to: e) ].		RTSugiyamaLayout on: elements.		result := (((RTGroup new) add: ((522.0@28.0)); add: ((999.0@98.0)); add: ((946.0@98.0)); add: ((893.0@98.0)); add: ((840.0@98.0)); add: ((787.0@98.0)); add: ((734.0@98.0)); add: ((681.0@98.0)); add: ((628.0@98.0)); add: ((575.0@98.0)); add: ((522.0@98.0)); add: ((469.0@98.0)); add: ((416.0@98.0)); add: ((363.0@98.0)); add: ((310.0@98.0)); add: ((257.0@98.0)); add: ((204.0@98.0)); add: ((151.0@98.0)); add: ((98.0@98.0)); add: ((45.0@98.0)); yourself)).	self assert: (result includesAll: (elements collect: #position))</body></methods><methods><class-id>Roassal2.RTLayoutTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	view := RTView new.		1 to: 20 do: [ :i | view add: (RTBox elementOn: i) ]</body></methods><methods><class-id>Roassal2.RTLegendBuilderTest</class-id> <category>running</category><body package="Roassal2-Builder-Legend-Tests">setUp	super setUp.	b := RTLegendBuilder new.	b addText: 'Hapao show the coverage on which you have run it'.	b addText: 'Big box = classes. Green classes are unit tests'.	b addText: 'Inner box = method'.	b addText: 'height = number of lines of code of '.	b addText: 'width = number of methods that call it'.	b addText: 'edge = static call between methods. Above calls below'.	b addColor: Color black text: 'Method well tested'.	b addColor: Color gray text: 'Method tested'.	b addColor: Color red text: 'Method not tested'.	b build</body></methods><methods><class-id>Roassal2.RTLegendBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-Legend-Tests">testAddObjectText	| lb |	lb := RTLegendBuilder new.	lb addObject: 'hello world' text: [ :str | str substrings first ].	lb build.		self assert: lb view numberOfElements equals: 2.	self assert: lb view elements second model equals: 'hello world'.	self assert: (lb view elements second shape textFor: lb view elements second) equals: 'hello'.</body><body package="Roassal2-Builder-Legend-Tests">testBelow	| view element lb |	view := RTView new.	element := (RTEllipse new size: 30) element.	view add: element.	lb := RTLegendBuilder new.	lb view: view.	lb below.	lb addText: 'Hello world'.	lb build.		self assert: view numberOfElements equals: 3.	self assert: view elements first shape class == RTEllipse.	self assert: view elements third shape class == RTLabel.	self assert: view elements first position y &lt; view elements third position y.</body><body package="Roassal2-Builder-Legend-Tests">testColorNotNil	self should: [ RTColorLegendItem new color: nil ] raise: Error.	self shouldnt: [ RTColorLegendItem new color: Color red ] raise: Error</body><body package="Roassal2-Builder-Legend-Tests">testEdgesWhenOnDemand	| v  lb lbl allElements edges |	v := RTView new.	v @ RTDraggableView.	lb := RTLegendBuilder new.	lb view: v.	lb onDemand.		lb addRectanglePolymetricWidth: 'number of methods' height: 'Line of code' box: 'a Pharo class'.	lb build.	self assert: v canvas fixedShapes size equals: 1.		lbl := v canvas fixedShapes first.	allElements := lb group flatCollect: #yourself.	edges := allElements select: [ :e | e class == RTEdge ].	self assert: edges size equals: 2.	self assert: (allElements includes: edges first from).	self assert: (allElements includes: edges first to).</body><body package="Roassal2-Builder-Legend-Tests">testLayout		| firstInnerElement secondInnerElement |	firstInnerElement := b view elements second.	secondInnerElement := b view elements third.	"First element is above second element"	self assert: firstInnerElement position y &lt; secondInnerElement position y</body><body package="Roassal2-Builder-Legend-Tests">testLegendElement	| lb |	lb := RTLegendBuilder new.	lb addLineColor: Color red text: 'Meaning of this great red line'.	lb build.		self assert: lb view elements first equals: lb legendElement</body><body package="Roassal2-Builder-Legend-Tests">testNumberOfElements	self assert: b view numberOfElements equals: 13</body><body package="Roassal2-Builder-Legend-Tests">testRight	| view element lb |	view := RTView new.	element := (RTEllipse new size: 30) element.	view add: element.	lb := RTLegendBuilder new.	lb view: view.	lb right.	lb addText: 'Hello world'.	lb build.		self assert: view numberOfElements equals: 3.	self assert: view elements first shape class == RTEllipse.	self assert: view elements third shape class == RTLabel.	self assert: view elements first position x &lt; view elements third position x.</body><body package="Roassal2-Builder-Legend-Tests">testaddColorFading	| lb |	lb := RTLegendBuilder new.	lb addColorFadingFrom: Color green to: Color black text: 'this is a test'.	lb build.		self assert: lb view numberOfElements equals: 52.</body><body package="Roassal2-Builder-Legend-Tests">testaddColorFading02	| lb |	lb := RTLegendBuilder new.	lb addColorFadingUsing: RTPalette c1 text: 'this is a test'.	lb build.		self assert: lb view numberOfElements equals: 52.</body><body package="Roassal2-Builder-Legend-Tests">testaddLineColortext	| lb |	lb := RTLegendBuilder new.	lb addLineColor: Color red text: 'Meaning of this great red line'.	lb build.		self assert: lb view numberOfElements equals: 3.</body></methods><methods><class-id>Roassal2.RTMultiLinearColorTest</class-id> <category>tests</category><body package="Roassal2-ColorNormalizer-Tests">testBasic	| n |	n := RTMultiLinearColor new.	self assert: (n rtValue: 0.0) equals: Color red</body><body package="Roassal2-ColorNormalizer-Tests">testDefaultCommand	| n |	n := RTMultiLinearColor new.	self assert: n command notNil.	self assert: (n command rtValue: 0.3) equals: 0.3.</body><body package="Roassal2-ColorNormalizer-Tests">testNumberOfColors	 	self assert: RTMultiLinearColor new numberOfColors equals: 3</body><body package="Roassal2-ColorNormalizer-Tests">testNumberOfColors2	| n |	n := RTMultiLinearColor new.	n colors: (Array with: Color gray with: Color blue).	self assert: n numberOfColors equals: 2</body></methods><methods><class-id>Roassal2.RTCircularTreeMapExample</class-id> <category>accessing</category><body package="Roassal2-Builder-CircularMap-Examples">label	^ 'Circular Tree map'</body></methods><methods><class-id>Roassal2.RTCircularTreeMapExample</class-id> <category>sources</category><body package="Roassal2-Builder-CircularMap-Examples">example01	| b mt |	b := RTCircularTreeMapBuilder new.	b shape		color: Color transparent.	b		baseradius: 200;		weight: 1.	mt := TRPlatform current morphClass.	b explore: mt		using: #subclasses.		b build.	^ b view</body><body package="Roassal2-Builder-CircularMap-Examples">example02| b |	b := RTCircularTreeMapBuilder new.	b shape		color: Color transparent.	b		baseradius: 400;		weight: [:n | n].	b explore: 1		using: [:n | n&lt; 3 ifTrue: [Array with: n+1 with: n+2] ifFalse: [ #() ] ].		b build.	^ b view</body><body package="Roassal2-Builder-CircularMap-Examples">example03		| b  |	b := RTCircularTreeMapBuilder new.		b shape		color: Color transparent;		borderColor: Color black;		if: [ :cls | cls subclasses isEmpty ] fillColor: [ :cls| 			(Smalltalk includesKey: (cls name, 'Test') asSymbol) ifTrue: [ Color green ]			ifFalse: [ Color purple ] ].	b		baseradius: 200;		weight: [ :cls | cls withAllSubclasses size].	b explore: RTObject		using: #subclasses.		b build.	^ b view</body><body package="Roassal2-Builder-CircularMap-Examples">exampleClassHierarchy| b  |b := RTCircularTreeMapBuilder new.b	baseradius: 200;	weight: [ :cls | cls withAllSubclasses size].b explore: Collection 	using: #subclasses.b build.	^ b view</body></methods><methods><class-id>Roassal2.RTCircularTreeMapExample</class-id> <category>icons</category><body package="Roassal2-Builder-CircularMap-Examples">example01Icon	^ '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'</body><body package="Roassal2-Builder-CircularMap-Examples">example02Icon	^ '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aQEYAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-CircularMap-Examples">example03Icon	^ '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IQHCkVeSAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-CircularMap-Examples">exampleClassHierarchyIcon	^ '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T/62FQl3AAAAAElFTkSuQmCC'</body></methods><methods><class-id>Roassal2.RTPNGExporterTest</class-id> <category>running</category><body package="Roassal2-Exporter-PNG-Tests">setUp	super setUp.	emptyExporter := RTPNGExporter new.		view := RTView new.	exporter := RTPNGExporter new.	exporter builder: view.</body></methods><methods><class-id>Roassal2.RTPNGExporterTest</class-id> <category>tests</category><body package="Roassal2-Exporter-PNG-Tests">testBasic	emptyExporter builder: view.	self assert: emptyExporter builder equals: view.	"5 @ 5 is a delta we add to make sure we have no pb when exporting	plus the delta from TRCanvas&gt;&gt;encompassingRectangle"	self assert: (emptyExporter viewExtent closeTo: (6 @ 6)).	self assert: (emptyExporter viewHalfExtent closeTo: (3 @ 3)).</body><body package="Roassal2-Exporter-PNG-Tests">testCameraPosition	self assert: exporter cameraPositionNegated equals: (0 @ 0)</body><body package="Roassal2-Exporter-PNG-Tests">testCameraPosition2	view canvas camera translateTo: 6 @ 4.	self assert: exporter cameraPositionNegated equals: (0 @ 0).</body><body package="Roassal2-Exporter-PNG-Tests">testCameraScale	self assert: exporter cameraScale equals: view canvas camera defaultCameraScale</body><body package="Roassal2-Exporter-PNG-Tests">testCreateSurface	exporter createSurface.	exporter createFormCanvas.</body><body package="Roassal2-Exporter-PNG-Tests">testDefault	self assert: emptyExporter fileName equals: 'roassal.png'.	self assert: emptyExporter builder equals: nil</body><body package="Roassal2-Exporter-PNG-Tests">testExportWithScale	emptyExporter withScale.	view canvas camera scale: 2.	emptyExporter builder: view.		self assert: emptyExporter viewExtent equals: (7 @ 7).	self assert: emptyExporter viewHalfExtent equals: (3.5 @ 3.5).	self assert: emptyExporter saveWithScale.		emptyExporter withoutScale.	self assert: (emptyExporter viewExtent closeTo: (6 @ 6)).	self assert: (emptyExporter viewHalfExtent closeTo: (3 @ 3)).</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>contains</category><body package="Roassal2-Trachel-Tests">testContainsPoint1	self assert: (canvas shapeForPosition: 20 @ 20) == canvas</body><body package="Roassal2-Trachel-Tests">testContainsPoint2	| box |	box := canvas buildRectangle: (15 @ 15 extent: 20 @ 20) color: Color gray.	self assert: (canvas shapeForPosition: 20 @ 20) == box.	self assert: (canvas shapeForPosition: 35 @ 35) == canvas.	self assert: (canvas shapeForPosition: 15 @ 15) == box.	self assert: (canvas shapeForPosition: 200 @ 200) == canvas.</body><body package="Roassal2-Trachel-Tests">testContainsPointAfterTranslation	| box |	box := canvas buildRectangle: (0 @ 0 extent: 20 @ 20) color: Color gray.	box translateBy: 10 @ 10.		self assert: (canvas shapeForPosition: 10 @ 10) == box.	self assert: (canvas shapeForPosition: 5 @ 5) == canvas.</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>back and front</category><body package="Roassal2-Trachel-Tests">testBack	| s1 s2 s3 |	s1 := TRBoxShape new size: 10.	s2 := TRBoxShape new size: 10.	s3 := TRBoxShape new size: 10.	canvas addShape: s1; addShape: s2; addShape: s3.		s1 pushBack.	self assert: canvas shapes = (Array with: s1 with: s2 with: s3).		s3 pushBack.	self assert: canvas shapes = (Array with: s3 with: s1 with: s2).</body><body package="Roassal2-Trachel-Tests">testFront	| s1 s2 s3 |	s1 := TRBoxShape new size: 10.	s2 := TRBoxShape new size: 10.	s3 := TRBoxShape new size: 10.	canvas addShape: s1; addShape: s2; addShape: s3.		self assert: canvas shapes = (Array with: s1 with: s2 with: s3).		s1 pushFront.	self assert: canvas shapes = (Array with: s2 with: s3 with: s1).		s3 pushFront.	self assert: canvas shapes = (Array with: s2 with: s1 with: s3).</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>theme</category><body package="Roassal2-Trachel-Tests">testthemeCanvas01	| c s |	c := TRCanvas new.	c theme: TRWhiteTheme new.		s := TRBoxShape new.	c addShape: s.		self assert: s theme equals: c theme</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>should be drawn</category><body package="Roassal2-Trachel-Tests">testShouldBeDrawn	self assert: (TRBoxShape new from: 0 @ 0 to: 10 @ 20) shouldBeDrawn.	self deny: (TRBoxShape new from: 200 @ 0 to: 10 @ 0) shouldBeDrawn.	self deny: (TRBoxShape new from: 200 @ 0 to: 200 @ 0) shouldBeDrawn.	self deny: (TREllipseShape new from: 0 @ 0 to: 0 @ 0) shouldBeDrawn.	self assert: (TREllipseShape new from: 10 @ 0 to: 50 @ 50) shouldBeDrawn</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>label</category><body package="Roassal2-Trachel-Tests">testCenteredLabelShapes	| label1 label2  |	label1 := TRLabelShape new.	label1 text: 'hello'.	label1 position: 10 @ 10.	label2 := TRLabelShape new.	label2 text: 'hello'.	label2 translateLeftTo: label1 encompassingRectangle leftCenter.		"	TRCanvas new addShape: label1; addShape: label2; open	"	self assert: label1 encompassingRectangle = label2 encompassingRectangle</body><body package="Roassal2-Trachel-Tests">testDefaultFontSize	self assert: (TRLabelShape new fontSize = TRLabelShape new defaultFontSize)</body><body package="Roassal2-Trachel-Tests">testLabelShapes	| label1 label2 rec |	label1 := TRLabelShape new.	label1 text: 'hello'.	label2 := TRLabelShape new.	label2 text: 'hello world'.	self assert: label2 width &gt; label1 width.		rec := label1 encompassingRectangle.	self assert: rec center = (0 @ 0).</body><body package="Roassal2-Trachel-Tests">testLabelShapesAndColor	| label  |	label := TRLabelShape new.	label color: Color blue.	self assert: label color = Color blue</body><body package="Roassal2-Trachel-Tests">testLabelShapesAndIncludesPoint	| label rec |	label := TRLabelShape new.	label text: 'hello'.		rec := label encompassingRectangle.	self assert: (label includesPoint: rec topLeft).	self assert: (label includesPoint: (rec bottomLeft - (0 @ 1))).	self assert: (label includesPoint: rec topRight - (1 @ 0)).	self assert: (label includesPoint: rec bottomRight - (1 @ 1)).</body><body package="Roassal2-Trachel-Tests">testLabelShapesHeight	| label1 label2 |	label1 := TRLabelShape new.	label1 text: 'hello'.	label2 := TRLabelShape new.	label2 text: 'hello world'.	self assert: label2 height = label1 height</body><body package="Roassal2-Trachel-Tests">testSizeAndLabels	| c l1 l2 |	c := TRCanvas new.	l1 := TRLabelShape new fontSize: 10.	l2 := TRLabelShape new fontSize: 15; position: 20 @ 20.	c addShape: l1.	c addShape: l2.		self assert: l1 font ~~ l2 font</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>tests</category><body package="Roassal2-Trachel-Tests">testAddingAndRemoving	| box |	box := TRBoxShape new from: 10 @ 10 to: 20 @ 20.	canvas addShape: box.	self assert: canvas numberOfShapes = 1.	box remove.	self assert: canvas numberOfShapes = 0.</body><body package="Roassal2-Trachel-Tests">testBezierShape	| b |	b := TRBezierShape new points: (Array with: 10 @ 10 with: -20 @ 30 with: 50 @ -180).	canvas addShape: b.	b translateBy: 5 @ 6.	self assert: b points = (Array with: 15 @ 16 with: -15 @ 36 with: 55 @ -174).</body><body package="Roassal2-Trachel-Tests">testBox	| rec box |	rec := (50 @ 50 extent: 100 @ 50).	box := canvas buildRectangle: rec color: Color purple.	self assert: box encompassingRectangle center = rec center.	box extent: 20 @ 20.	self assert: box encompassingRectangle center = rec center.</body><body package="Roassal2-Trachel-Tests">testCanvas	| box |	box := canvas buildRectangle: ( (5 @ 5) extent: (5 @ 5) ) color: Color red.	self assert: box canvas == canvas.	self assert: box athensCanvas == canvas athensCanvas.	self assert: canvas ~~ canvas athensCanvas.</body><body package="Roassal2-Trachel-Tests">testCircle	| c  |	c := TRCanvas new.	100 to: 200 by: 20 do: [ :i |		 c buildCircleFrom: 50 @ 50 to: i @ 100 color: (Color red alpha: 0.2).	].	self assert: c numberOfShapes = (100 to: 200 by: 20) size</body><body package="Roassal2-Trachel-Tests">testDefault	self assert: canvas shapes isEmpty.	self assert: canvas numberOfShapes equals: 0.</body><body package="Roassal2-Trachel-Tests">testEncompassingRectangle	| r |	r := TRCanvas new encompassingRectangle.	self assert: r extent equals: 1 @ 1</body><body package="Roassal2-Trachel-Tests">testInitialization	| circle |	circle := TREllipseShape new.	self assert: circle encompassingRectangle = TRAbstractBoxShape nullRectangle</body><body package="Roassal2-Trachel-Tests">testLine	| line |	line := canvas buildLineFrom: 2 @ 3 to: 13 @ 15 color: Color blue.	self assert: line from = (2 @ 3).	self assert: line to = (13 @ 15).		line translateBy: 3 @ 4.	self assert: line from = (5 @ 7).	self assert: line to = (16 @ 19).</body><body package="Roassal2-Trachel-Tests">testRemovingLine	| line |	line := TRLineShape new from: 50 @ 50 to: 100 @ 80.	self deny: line isInACanvas.	canvas addShape: line.	self assert: line isInACanvas.		line remove.	self deny: line isInACanvas.		line remove.	self deny: line isInACanvas.</body><body package="Roassal2-Trachel-Tests">testResetShapes	canvas addShape: TRBoxShape new.	canvas addShape: TRBoxShape new.	self assert: canvas numberOfShapes equals: 2.	canvas resetShapes.	self assert: canvas numberOfShapes equals: 0.</body><body package="Roassal2-Trachel-Tests">testShape	| shape |	shape := canvas buildRectangle: (5 @ 5 extent: 20 @ 20) color: Color gray.	self assert: shape notNil.</body><body package="Roassal2-Trachel-Tests">testShapes	canvas buildRectangle: (5 @ 5 extent: 20 @ 20) color: Color gray.	canvas buildRectangle: (5 @ 5 extent: 20 @ 20) color: Color gray.	self assert: canvas shapes size = 2</body><body package="Roassal2-Trachel-Tests">testShapingElement	| circle |	circle := canvas buildCircleFrom: 20 @ 20 to: 100 @ 80 color: Color red.	self assert: circle encompassingRectangle = ((20 @ 20) corner: (100 @ 80)).		circle translateBy: -20 @ -20.	self assert: circle encompassingRectangle = ((0 @ 0) corner: (80 @ 60)).</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>shapes</category><body package="Roassal2-Trachel-Tests">testChangingBoxHeight	| box |	box := TRBoxShape new.	self assert: box height = 0.	box height: 15.	self assert: box height = 15.	box height: 20.	self assert: box height = 20</body><body package="Roassal2-Trachel-Tests">testChangingBoxWidth	| box |	box := TRBoxShape new.	self assert: box width = 0.	box width: 15.	self assert: box width = 15.	box width: 20.	self assert: box width = 20</body><body package="Roassal2-Trachel-Tests">testPositionWithShapes	TRShape allSubclasses do: [ :c |		self assert: c new position = (0 @ 0) ]</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>animations</category><body package="Roassal2-Trachel-Tests">testDefaultAnimation	self deny: canvas hasAnimation.	self assert: canvas numberOfAnimations = 0</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>camera</category><body package="Roassal2-Trachel-Tests">testCamera	self assert: canvas camera position = (0 @ 0)</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>events</category><body package="Roassal2-Trachel-Tests">testCanvasAndEvent	| c f |	c := TRCanvas new.	f := false.	c when: TRMouseClick do: [ :event | f := true ].	self deny: f.	c announce: TRMouseMove.	self deny: f.	c announce: TRMouseClick.	self assert: f</body><body package="Roassal2-Trachel-Tests">testCapturingEvents2	| s1 s2 |	 	s1 := (TRBoxShape new size: 10).	s2 := (TRBoxShape new size: 10).	canvas addShape: s1.	canvas addShape: s2. 	self assert: (canvas shapeForPosition: 0 @ 0) == s2</body><body package="Roassal2-Trachel-Tests">testShapeAndEvent	| shape t |	shape := TRBoxShape new.	t := false.	shape when: TRMouseEnter do: [ :event | t := true ].	self deny: t.	shape announce: TRMouseEnter new.	self assert: t</body><body package="Roassal2-Trachel-Tests">testShapeAndSharedAnnouncer	| shape1 shape2 t |	shape1 := TRBoxShape new.	shape2 := TRLineShape new.	shape1 announcer: shape2 announcer.		t := 0.	shape1 when: TRMouseLeave do: [ :event | t := t + 1 ].	shape2 when: TRMouseEnter do: [ :event | t := t + 10 ].	shape1 announce: TRMouseEnter new.	shape2 announce: TRMouseLeave new.	self assert: t = 11</body><body package="Roassal2-Trachel-Tests">testShapeWithActionForPositionInPixels	| c s1 s2 |	c := TRCanvas new.	s1 := TRBoxShape new size: 20.	s1 when: TRMouseClick do: [  ].	s2 := TRBoxShape new size: 20.		c addShape: s1.	c addShape: s2.	s2 translateTo: 30 @ 0.		self assert: (c shapeWithActionForPositionInPixels: 250 @ 250) == s1.	self assert: (c shapeWithActionForPositionInPixels: 280 @ 250) == c.</body><body package="Roassal2-Trachel-Tests">testShapeWithActionForPositionInPixels2	| c s1 s2 |	c := TRCanvas new.	s1 := TRBoxShape new size: 20.	s1 when: TRMouseClick do: [  ].	s2 := TRBoxShape new size: 20.		c addShape: s1.	c addShape: s2.	s2 translateTo: 30 @ 0.		self assert: (c shapeWithAction: TRMouseClick forPositionInPixels: 250 @ 250) == s1.	self assert: (c shapeWithAction: TRMouseMove forPositionInPixels: 250 @ 250) == c.	self assert: (c shapeWithAction: TRMouseClick forPositionInPixels: 280 @ 250) == c.</body><body package="Roassal2-Trachel-Tests">testShapeWithActionForPositionInPixelsUnder	| c top under |	c := TRCanvas new.	top := TRBoxShape new size: 20.	top when: TRMouseDragging do: [  ].	under := TRBoxShape new size: 20.	under when: TRMouseDragEnter do: [  ].	c addShape: top.	c addShape: under.	self		assert: (c shapeWithAction: TRMouseDragEnter forPositionInPixels: 250 @ 250 under: top)		equals: under.	self		assert: (c shapeWithAction: TRMouseDragEnter forPositionInPixels: 0 @ 0 under: top)		equals: c</body><body package="Roassal2-Trachel-Tests">testShapeWithActionForPositionInPixelsUnder2	| c top under |	c := TRCanvas new.	top := TRBoxShape new size: 20.	top when: TRMouseDragEnter do: [  ].	under := TRBoxShape new size: 20.	under when: TRMouseDragEnter do: [  ].	c addShape: under.	c addShape: top.	self		assert: (c shapeWithAction: TRMouseDragEnter forPositionInPixels: 250 @ 250 under: top)		equals: under.	self		assert: (c shapeWithAction: TRMouseDragEnter forPositionInPixels: 0 @ 0 under: top)		equals: c</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>rendering list</category><body package="Roassal2-Trachel-Tests">testPushAllBehindWithGroup	| box1 box2 box3 g |	box1 := TRBoxShape new.	box2 := TRBoxShape new.	box3 := TRBoxShape new.	canvas addShape: box1; addShape: box2; addShape: box3.	self assert: canvas shapes asArray = (Array with: box1 with: box2 with: box3).	g := Array with: box2 with: box3.	canvas pushAll: (Array with: box1) behindAll: g.	self assert: canvas shapes asArray = (Array with: box1 with: box2 with: box3).		g := Array with: box2 with: box3.	canvas pushAll: (Array with: box1) behindAll: g.	self assert: canvas shapes asArray = (Array with: box1 with: box2 with: box3).	g := Array with: box1.	canvas pushAll: (Array with: box3 with: box2) behindAll: g.	self assert: canvas shapes asArray = (Array with: box3 with: box2 with: box1).</body><body package="Roassal2-Trachel-Tests">testPushBehind	| box1 box2 box3 |	box1 := TRBoxShape new.	box2 := TRBoxShape new.	box3 := TRBoxShape new.	canvas addShape: box1; addShape: box2; addShape: box3.	self assert: canvas shapes asArray = (Array with: box1 with: box2 with: box3).	canvas push: box1 behind: box2.	self assert: canvas shapes asArray = (Array with: box1 with: box2 with: box3).		canvas push: box3 behind: box2.	self assert: canvas shapes asArray = (Array with: box1 with: box3 with: box2).</body><body package="Roassal2-Trachel-Tests">testPushBehindWithGroup	| box1 box2 box3 g |	box1 := TRBoxShape new.	box2 := TRBoxShape new.	box3 := TRBoxShape new.	canvas addShape: box1; addShape: box2; addShape: box3.	self assert: canvas shapes asArray = (Array with: box1 with: box2 with: box3).	g := Array with: box2 with: box3.	canvas push: box1 behindAll: g.	self assert: canvas shapes asArray = (Array with: box1 with: box2 with: box3).		g := Array with: box2 with: box3.	canvas push: box1 behindAll: g.	self assert: canvas shapes asArray = (Array with: box1 with: box2 with: box3).	self assert: (canvas shapes indexOf: box1) = 1.	self assert: (canvas shapes indexOf: box2) = 2.	self assert: (canvas shapes indexOf: box3) = 3.</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>fixed shape</category><body package="Roassal2-Trachel-Tests">testAccessing	| c r1 r2 |	c := TRCanvas new.	r1 := c buildRectangle: ((0 @ 0) extent: (150 @ 75)) color: Color red.	r1 setAsFixed.		r2 := c buildRectangle: ((0 @ 0) extent: (130 @ 50)) color: Color lightGreen.	self assert: (c shapeForPositionInPixels: (0 @ 0)) = r1.	self assert: (c shapeForPositionInPixels: (250 @ 250)) = r2.</body><body package="Roassal2-Trachel-Tests">testFixedShapes	| s1 s2 |	s1 := TRBoxShape new from: 10 @ 20 extent: 50 @ 40.	s2 := TRBoxShape new from: 10 @ 20 extent: 50 @ 40.	canvas addShape: s1; addShape: s2.		self assert: s1 isNotFixed.	self assert: s2 isNotFixed.		s2 setAsFixed.	self assert: s1 isNotFixed.	self deny: s2 isNotFixed.		s2 setAsNotFixed.	self assert: s1 isNotFixed.	self assert: s2 isNotFixed.</body><body package="Roassal2-Trachel-Tests">testRemovingFixedElement	| c r |	c := TRCanvas new.	r := c buildRectangle: ((0 @ 0) extent: (150 @ 75)) color: Color red.	r setAsFixed.	self assert: c numberOfFixedShapes = 1.	self assert: c numberOfShapes = 0.	r remove.	self assert: c numberOfShapes = 0.	self assert: c numberOfFixedShapes = 0.</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>event overseer</category><body package="Roassal2-Trachel-Tests">testEventOverseer	| c s click eo events |	c := TRCanvas new.	s := TRBoxShape new.	c addShape: s.	click := 0.	s when: TRMouseClick do: [ :evt | click := click + 1 ].	eo := TREventOverseer new.		events := OrderedCollection new. 	eo block: [ :anEvent | events add: anEvent ].	c eventOverseer: eo.		self assert: click equals: 0.	self assert: events isEmpty.		s announce: TRMouseClick new.	self assert: click equals: 1.	"self assert: events size equals: 1.	self assert: events first class equals: TRMouseClick."</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>running</category><body package="Roassal2-Trachel-Tests">setUp	super setUp.	canvas := TRCanvas new</body></methods><methods><class-id>Roassal2.TRCanvasTest</class-id> <category>resizing</category><body package="Roassal2-Trachel-Tests">testResizing	| t |	t := false.	canvas when: TRResizeCanvasEvent do: [ :evt | t := true ].	canvas extent:  12 @ 12.	self assert: t</body><body package="Roassal2-Trachel-Tests">testResizing02	| e |	canvas when: TRResizeCanvasEvent do: [ :evt | e := evt ].	canvas extent:  12 @ 12.	self assert: e newExtent equals: 12 @ 12.	self assert: e oldExtent equals: 500 @ 500.</body></methods><methods><class-id>Roassal2.RTOptimizedForceBasedLayoutTest</class-id> <category>tests</category><body package="Roassal2-Tests">classToTest	^ RTOptimizedForceBasedLayout</body></methods><methods><class-id>Roassal2.RTSVGExporterExample</class-id> <category>simple</category><body package="Roassal2-Exporter-SVG-Examples">exampleDependencyAnalyzerBuilder		"self new exampleDependencyAnalyzerBuilder"	| b |		b := RTMondrian new.	b nodes: Collection withAllSubclasses.	b edges connectFrom: #superclass.	b layout tree.	^ b view.	"This line does the export."	"RTSVGExporter exportBuilderAsSVG: b filename:'exampleDependencyAnalyzerBuilder'."</body></methods><methods><class-id>Roassal2.RTDoubleGrapherBuilderTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Tests">testExample	| b ds |	b := RTDoubleGrapher new.	b extent: 300 @ 200.		ds := RTData new.	ds points: #(4 3 2 2).	ds barShape width: 40.	b add: ds.		ds := RTData new.	ds points: (10 to: 13).	ds dotShape color: Color blue.	ds connectColor: Color red.	b addRight: ds.		b axisX noLabel.	b axisYRight color: Color red.	b build.</body></methods><methods><class-id>Roassal2.RTPolygonTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic 	RTView new add: RTPolygon element.</body><body package="Roassal2-Core-Tests">testBasic02	RTView new add: (RTPolygon new vertices: (Array with: 0 @ 0 with: 50 @ 50 with: 25 @ 75)) element.</body><body package="Roassal2-Core-Tests">testBasic03	self assert: (RTPolygon new verticesFor: RTElement new) isEmpty</body></methods><methods><class-id>Roassal2.RTCacheTest</class-id> <category>tests</category><body package="Roassal2-Cachetor-Tests">testBasic	| v es form |	v := RTView new.	es := (RTEllipse new size: 20) elementsOn: (1 to: 20).	v addAll: es.	RTHorizontalLineLayout on: es.		self assert: v numberOfElements equals: 20.	RTCache new cacheElements: es.	self assert: v numberOfElements equals: 1.	self assert: v elements anyOne class equals: RTElement.	self assert: v elements anyOne shape class equals: RTBitmap.	self assert: v elements anyOne trachelShape form class equals: TRPlatform current formClass.		form :=  v elements anyOne trachelShape form.	self assert: form extent equals: es extent</body></methods><methods><class-id>Roassal2.RTKiviatBuilderExample</class-id> <category>icons</category><body package="Roassal2-Builder-Kiviat-Examples">exampleAOBIcon	^ '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'</body><body package="Roassal2-Builder-Kiviat-Examples">exampleBudgetChartIcon	^ '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'</body><body package="Roassal2-Builder-Kiviat-Examples">exampleColored2Icon	^ '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'</body><body package="Roassal2-Builder-Kiviat-Examples">exampleColored3Icon	^ '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'</body><body package="Roassal2-Builder-Kiviat-Examples">exampleColoredIcon	^ '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AAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Kiviat-Examples">exampleDynamicChartIcon	^ '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SUVORK5CYII='</body><body package="Roassal2-Builder-Kiviat-Examples">exampleRandomValuesIcon	^ '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'</body><body package="Roassal2-Builder-Kiviat-Examples">exampleSimple01Icon	^ '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'</body><body package="Roassal2-Builder-Kiviat-Examples">exampleWithAreaIcon	^ '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QOgDoW+nsP8DRe4gRSmBD8QAAAAASUVORK5CYII='</body></methods><methods><class-id>Roassal2.RTKiviatBuilderExample</class-id> <category>sources</category><body package="Roassal2-Builder-Kiviat-Examples">exampleAOB	| b lb fruits |	b := RTKiviatBuilder new.	fruits := RTKiviatFruitExample fruits.	b objects: fruits.	b shape circle color: [ :f | f kiviatNode named color ]; size: 10.	RTKiviatFruitExample rtmethods do: [ :met | 		met protocol = #metrics ifTrue: [ 			b addMetric: met selector ] ].	b activateAxisTitle.	b activatePolygons.	b build.		lb := RTLegendBuilder new.	lb view: b view.	lb addText: 'Fruit example '.	fruits do: [ :f | lb addColor: f color text: f name ].	lb build.		^ b view</body><body package="Roassal2-Builder-Kiviat-Examples">exampleBudgetChart| b n |	b := RTKiviatBuilder new.	b objects: (Array with: ('Allocated Budget' -&gt; #(60 15 25 8 40 20)) with: ('Actual Spending' -&gt; #( 20 20 25 20 50 145) )).	n := RTMultiLinearColorForIdentity new objects: (b objects).	b shape circle color: [ :value | n rtValue: value kiviatNode named]; size: 10.	b addMetric: [:e | e value at:1] title: 'Development'.	b addMetric: [:e | e value at:2] title: 'Customer Support'.	b addMetric: [:e | e value at:3] title: 'Information Technology'.	b addMetric: [:e | e value at:4] title: 'Administration'.	b addMetric: [:e | e value at:5] title: 'Sales'.	b addMetric: [:e | e value at:6] title: 'Marketing'.	b activateAxisTitle.	b activatePolygons.		b build.	^ b view</body><body package="Roassal2-Builder-Kiviat-Examples">exampleColored	| b n |	b := RTKiviatBuilder new.	b objects: RTAbstractCircleLayout withAllSubclasses.		n := RTMultiLinearColorForIdentity new objects: (b objects).	b shape circle color: [ :value | n rtValue: value kiviatNode named]; size: 10.	b addMetric: #numberOfLinesOfCode.	b addMetric: #numberOfMethods.	b addMetric: #numberOfVariables.	b build.	^ b</body><body package="Roassal2-Builder-Kiviat-Examples">exampleColored2	| b |	b := RTKiviatBuilder new.	"shapes: takes in argument a collection of colors, at least of the size of the numbers of objects"	b shapes: ((RTColorPalette qualitative colors: 12 scheme:'Paired') do: [:c | c alpha: 0.3]).	b objects: RTAbstractCircleLayout withAllSubclasses.	b addMetric: #numberOfLinesOfCode.	b addMetric: #numberOfMethods.	b addMetric: #numberOfVariables.		b activateAxisTitle.		b build.	^ b view</body><body package="Roassal2-Builder-Kiviat-Examples">exampleColored3| b myKiviatNodesElems m col |	b := RTKiviatBuilder new.	b objects: RTAbstractCircleLayout withAllSubclasses.	b addMetric: #numberOfLinesOfCode.	b addMetric: #numberOfMethods.	b addMetric: #numberOfVariables.		b activateAxisTitle.		b build.		myKiviatNodesElems := (b view elements select: [ :e | (e model isKindOf: RTKiviatElement)]).	b objects do: [:o | m:= myKiviatNodesElems select: [ :e | (e model kiviatNode named name= o name)]. col := (Color random alpha: 0.6). m do: [:e | e color: col]].		^ b view</body><body package="Roassal2-Builder-Kiviat-Examples">exampleDynamicChart| b n |	b := RTKiviatBuilder new.	n := RTMultiLinearColorForIdentity new objects: (b objects).	b shape circle color: [ :value | n rtValue: value kiviatNode named]; size: 10.    b addMetric: [ :v | v first ] max: 100.    b addMetric: [ :v | v second ] max: 100.    b addMetric: [ :v | v third ] max: 100.    b addMetric: [ :v | v fourth ] max: 100.    b addMetric: [ :v | v fifth ] max: 100.    b activatePolygons.    b build.    b view addMenu: '+1' callback: [    b addDynamicObject: ((1 to: 5) collect: [ :i | 100 atRandom ]) ].    b view addMenu: 'clean' callback: [ b  clean ].	^ b view</body><body package="Roassal2-Builder-Kiviat-Examples">exampleRandomValues	| b  |	b := RTKiviatBuilder new.	b objects: (Array with: ('object1' -&gt; ((1 to: 25) collect: [:i | i atRandom])) with: ('object2' -&gt; ((1 to: 25) collect: [:i | i atRandom]))).		b shapes: ((Array with: Color blue with: Color red) do: [:c | c alpha: 0.3]).	(1 to: 25) doWithIndex: [ :ei :i |		b addMetric: [:e | e value atWrap: i]	].	b build.	^ b view</body><body package="Roassal2-Builder-Kiviat-Examples">exampleSimple01| b |	b := RTKiviatBuilder new.	b objects: #('ABCDEF' ' 123' '      1').	b addMetric: #size.	b addMetric: [ :str | (str select: #isAlphaNumeric) size ].	b addMetric: [ :str | (str select: [ :c | c = $ ]) size ].	b build.	^ b view</body><body package="Roassal2-Builder-Kiviat-Examples">exampleWithArea	| b n |	b := RTKiviatBuilder new.	b objects: RTAbstractCircleLayout withAllSubclasses.	n := RTMultiLinearColorForIdentity new objects: (b objects).	b shape circle color: [ :value | n rtValue: value kiviatNode named]; size: 10.	b addMetric: #numberOfLinesOfCode.	b addMetric: #numberOfMethods.	b addMetric: #numberOfVariables.		b activatePolygons.		b build.	^ b view</body></methods><methods><class-id>Roassal2.RTKiviatBuilderExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Kiviat-Examples">label	^ 'Kiviat (Radar)'</body></methods><methods><class-id>Roassal2.RTScaleTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Scaling-Tests">testLinearScale	| s |	s := RTScale linear 		domain: #(0 100);		range: #(5 10).	self assert: (s scale: 50) equals: 15 / 2.	self assert: (s scale: 0) equals: 5.	self assert: (s scale: 100) equals: 10.</body><body package="Roassal2-Builder-Grapher-Scaling-Tests">testLinearScaleWithColors	| s |	s := RTScale linear 		domain: #(0 100);		range: (Array with: Color white with: Color black).	self assert: (s scale: 50) equals: Color gray.	self assert: (s scale: 0) equals: Color white.	self assert: (s scale: 100) equals: Color black.</body><body package="Roassal2-Builder-Grapher-Scaling-Tests">testLinearScaleWithNegative	| s |	s := RTScale linear 		domain: #(0 100);		range: #(-10 -5).	self assert: (s scale: 50) equals: -15 / 2.	self assert: (s scale: 0) equals: -10.	self assert: (s scale: 100) equals: -5.</body><body package="Roassal2-Builder-Grapher-Scaling-Tests">testLogarithmScale	| s |	s := RTScale log		base: Float e; 		domain: (#(0 9) collect: #exp);		range: #(200 0).	self assert: ((s scale: 50) closeTo: 113.06615543493011).	self assert: ((s scale: 0.01) closeTo: 302.3371152441798).	self assert: ((s scale: 100) closeTo: 97.66288475582019).		self assert: ((s invert: 10) closeTo: 5166.754427175983)</body></methods><methods><class-id>Roassal2.RTExpandableTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testBasic	| v s e es expand |	v := RTView new.	s := RTBox new width: [ :c | c numberOfVariables * 5 ]; height: #numberOfMethods.	e := s elementOn: RTComposer.		expand := (RTExpandable new					group: [ :group :element | 						es := (RTBox new color: Color red) elementsOn: element model rtmethods.						RTGridLayout on: es.						group addAll: es]).	e @ expand. 	v add: e.		self assert: v numberOfElements equals: 1.	self deny: (expand hasElementBeenExpended: e).	self deny: (expand isSelected: e).	expand clickOn: e.	self assert: (expand isSelected: e).	self assert: (expand hasElementBeenExpended: e).	self assert: v numberOfElements equals: 1 + RTComposer rtmethods size.	expand clickOn: e.	self deny: (expand isSelected: e).	self assert: v numberOfElements equals: 1.</body><body package="Roassal2-Core-Tests">testMultipleSelection	| v es expandable |	v := RTView new.	es := (RTBox new size: 30) elementsOn: #(1 2).	es @ RTPopup.	expandable := RTExpandable new				group: [:group :el | 					group add: ((RTBox new color: Color red) elementOn: 1).					];				afterBlock: [ RTHorizontalLineLayout on: es ].	es @ expandable.	v add: es.	RTHorizontalLineLayout on: es.		expandable clickOn: es first.	"Position of the red inner node is the same than the first encapsulating node"	self assert: es first position equals: v elements last position.			expandable clickOn: es first.	expandable clickOn: es first.		self assert: v numberOfElements equals: 3.		"Position of the red inner node is the same than the first encapsulating node"	self assert: es first position equals: v elements last position.</body></methods><methods><class-id>Roassal2.RTGridLayoutTest</class-id> <category>tests</category><body package="Roassal2-Layouts-Tests">testIsAbstract	self deny: RTGridLayout isAbstract.	self assert: RTGridLayout superclass isAbstract.</body><body package="Roassal2-Layouts-Tests">testLineItemsCount	| layout |	layout := RTGridLayout new.	self assert: layout lineItemsCountBlock notNil.	self assert: (layout lineItemsCountBlock rtValue: (1 to: 10)) equals: 4.	self assert: (layout lineItemsCountBlock rtValue: (1 to: 2)) equals: 2.	self assert: (layout lineItemsCountBlock rtValue: (1 to: 100)) equals: 13.</body><body package="Roassal2-Layouts-Tests">testSpaceBetweenElements	| v es |	v := RTView new.	es := (RTBox new size: 5) elementsOn: (1 to: 4).	v addAll: es.	RTGridLayout new on: es.		self assert: (es second position - es first position) = (10 @ 0).	self assert: (es third position - es first position) = (0 @ 10).</body><body package="Roassal2-Layouts-Tests">testWithGap	| layout |	layout := RTGridLayout withGap: 5.	self assert: layout class equals: RTGridLayout.	self assert: layout gapSize equals: 5</body><body package="Roassal2-Layouts-Tests">testWithLineItemsCount	| layout |	layout := RTGridLayout withLineItemsCount: 5.	self assert: layout lineItemsCountBlock notNil.	self assert: (layout lineItemsCountBlock rtValue: (1 to: 10)) equals: 5.	self assert: (layout lineItemsCountBlock rtValue: (1 to: 2)) equals: 5.	self assert: (layout lineItemsCountBlock rtValue: (1 to: 100)) equals: 5.</body></methods><methods><class-id>Roassal2.RTViewTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testAddingAnimation	| c |	c := RTView new canvas.	c addAnimation: (RTLinearMove to: 50 @ 50 during: 2 on: RTBox element).	self assert: c hasAnimation.	self assert: c numberOfAnimations = 1</body><body package="Roassal2-Core-Tests">testCleaningView	| v e |	v := RTView new.	e := (RTBox new size: 80) elementOn: 'Hello World'.	v add: e.	e @ RTLabeled.	v cleanAll.	self assert: v numberOfElements equals: 0.	self assert: v canvas numberOfFixedShapes equals: 0.	self assert: v canvas numberOfShapes equals: 0.</body><body package="Roassal2-Core-Tests">testCleaningViewWithCallback	| v parent child |	v := RTView new.	parent := RTBox new element.	child := RTBox new element.	parent addCallback: (TRRemoveCallback block: [ child remove ]).	v		add: parent;		add: child.	self assert: v numberOfElements equals: 2.	v clean.	self assert: v numberOfElements equals: 0</body><body package="Roassal2-Core-Tests">testElementFromModel	| els |	els := RTBox elementsOn: (1 to: 3).	view addAll: els.	self assert: (view elementFromModel: 1) == els first.	self assert: (view elementFromModel: 2) == els second.	self assert: (view elementFromModel: 3) == els third.</body><body package="Roassal2-Core-Tests">testEmptyCanvas	self assert: RTView new setUpCanvas numberOfShapes = 0</body><body package="Roassal2-Core-Tests">testFillingCanvas	| canvas |	view := RTView new.	view add: RTBox element.	canvas := view setUpCanvas.		self assert: canvas class == TRCanvas.	self assert: canvas numberOfShapes = 1.</body><body package="Roassal2-Core-Tests">testRemoveEdges	| element1 element2 element3 edge1 edge2 |	element1 := RTBox new element.	element2 := RTEllipse new element.	element3 := RTBox new element.	edge1 := RTLine edgeFrom: element1 to: element2.	edge2 := RTLine edgeFrom: element2 to: element3.	self assert: view numberOfElements equals: 0.	self assert: view numberOfEdges equals: 0.	self assert: view canvas shapes size equals: 0.	view add: element1; add: element2; add: element3; add: edge1; add: edge2.	self assert: view numberOfElements equals: 3.	self assert: view numberOfEdges equals: 2.	self assert: view canvas shapes size equals: 5.	view removeEdges: (RTGroup with: edge1).	self assert: view numberOfElements equals: 3.	self assert: view numberOfEdges equals: 1.	self assert: view canvas shapes size equals: 4.	view removeEdges: (RTGroup with: edge2).	self assert: view numberOfElements equals: 3.	self assert: view numberOfEdges equals: 0.	self assert: view canvas shapes size equals: 3.</body><body package="Roassal2-Core-Tests">testRemoveElements	| es |	es := RTBox elementsOn: (1 to: 5).	self assert: view numberOfElements equals: 0.	view addAll: es.	self assert: view numberOfElements equals: 5.	es remove.	self assert: view numberOfElements equals: 0.</body><body package="Roassal2-Core-Tests">testRemoveElementsWithCompositeShape	| s1 s2 c el1 el2 |	s1 := RTBox new.	s2 := RTEllipse new.	c := RTCompositeShape new.	c add: s1; add: s2.	el1 := c element.	el2 := c element.	self assert: view numberOfElements equals: 0.	self assert: view canvas shapes size equals: 0.	view add: el1.	self assert: view numberOfElements equals: 1.	self assert: view canvas shapes size equals: 2.	view add: el2.	self assert: view numberOfElements equals: 2.	self assert: view canvas shapes size equals: 4.		view removeElements: (RTGroup with: el1).	self assert: view numberOfElements equals: 1.	self assert: view canvas shapes size equals: 2.		view removeElements: (RTGroup with: el2).	self assert: view numberOfElements equals: 0.	self assert: view canvas shapes size equals: 0.</body><body package="Roassal2-Core-Tests">testRemoveElementsWithEdges	| element1 element2 element3 edge1 edge2 |	element1 := RTBox new element.	element2 := RTEllipse new element.	element3 := RTBox new element.	edge1 := RTLine edgeFrom: element1 to: element2.	edge2 := RTLine edgeFrom: element2 to: element3.	self assert: view numberOfElements equals: 0.	self assert: view numberOfEdges equals: 0.	self assert: view canvas shapes size equals: 0.	view add: element1; add: element2; add: element3; add: edge1; add: edge2.	self assert: view numberOfElements equals: 3.	self assert: view numberOfEdges equals: 2.	self assert: view canvas shapes size equals: 5.	view removeElements: (RTGroup with: element1).	self assert: view numberOfElements equals: 2.	self assert: view numberOfEdges equals: 1.	self assert: view canvas shapes size equals: 3.	view removeEdges: (RTGroup with: element2 with: element3).	self assert: view numberOfElements equals: 0.	self assert: view numberOfEdges equals: 0.	self assert: view canvas shapes size equals: 0.</body></methods><methods><class-id>Roassal2.RTViewTest</class-id> <category>camera</category><body package="Roassal2-Core-Tests">testCameraProjection	| v camera |	v := RTView new.	camera := v canvas camera.	self assert: ((camera fromPixelToSpace: (camera fromSpaceToPixel: (10@10))) closeTo: (10.0 @ 10.0))</body><body package="Roassal2-Core-Tests">testRestoreCamera	"	self debug: #testRestoreCamera	"	view resetCamera.	view add: (RTBox element).	view restoreCamera.	view canvas camera translateTo: 5 @ 5.	view setUpCanvas.		view := RTView new.	view add: (RTBox element).	view restoreCamera.	self assert: view canvas camera position equals: 0 @ 0.	view setUpCanvas.	self assert: view canvas camera position equals: 5 @ 5.</body></methods><methods><class-id>Roassal2.RTViewTest</class-id> <category>edges</category><body package="Roassal2-Core-Tests">testAccept	view accept: RTVisitor new</body><body package="Roassal2-Core-Tests">testAddingEdgeSetsTheElementInTrachelShape	| el1 el2 edge |	el1 := RTBox element.	el2 := RTBox element.	edge := RTLine edgeFrom: el1 to: el2.	view add: el1; add: el2.	view add: edge.		self assert: edge trachelShape element equals: edge</body><body package="Roassal2-Core-Tests">testAddingEdges	| el1 el2 edge |	el1 := RTBox element.	el2 := RTBox element.	edge := RTLine edgeFrom: el1 to: el2.	view add: el1; add: el2.	self assert: view numberOfElements = 2.	self assert: view numberOfEdges = 0.	view add: edge.	self assert: view numberOfEdges = 1.</body><body package="Roassal2-Core-Tests">testBuild	view build</body><body package="Roassal2-Core-Tests">testEdgeFromModel	| e1 e2 edge |	e1 := RTBox elementOn: 1.	e2 := RTBox elementOn: 2.	edge := RTLine edgeFrom: e1 to: e2.	edge model: 'hello'.	view add: e1; add: e2; add: edge.		self assert: (view edgeFromModel: 'hello') equals: edge</body><body package="Roassal2-Core-Tests">testElementsFromModel	| e1 e2 e3 edge |	e1 := RTBox elementOn: 1.	e2 := RTBox elementOn: 2.	e3 := RTBox elementOn: 1.	edge := RTLine edgeFrom: e1 to: e2.	edge model: 'hello'.	view add: e1; add: e2; add: e3; add: edge.		self assert: (view elementsFromModel: 'hello') isEmpty.	self assert: (view elementsFromModel: 1) size equals: 2.	self assert: (view elementsFromModel: 2) size equals: 1.	self assert: (view elementsFromModel: 3) size equals: 0</body><body package="Roassal2-Core-Tests">testPushBackEdges	| es lastEdge |	es := RTBox new elementsOn: (1 to: 10).	view addAll: es.		RTEdgeBuilder new		view: view;		objects: (1 to: 10);		connectFrom: [ :aValue | aValue // 3 ] to:  #yourself.	view add: (RTBox element).	RTTreeLayout on: es.			lastEdge := view edges last.	self assert: (view canvas shapes indexOf: lastEdge trachelShape) equals: 18.	view pushBackEdges.	self assert: (view canvas shapes indexOf: lastEdge trachelShape) equals: 1.</body><body package="Roassal2-Core-Tests">testPushFrontEdges	| es lastEdge |	es := RTBox new elementsOn: (1 to: 10).	view addAll: es.		RTEdgeBuilder new		view: view;		objects: (1 to: 10);		connectFrom: [ :aValue | aValue // 3 ] to:  #yourself.	view add: (RTBox element).	RTTreeLayout on: es.			lastEdge := view edges last.	self assert: (view canvas shapes indexOf: lastEdge trachelShape) equals: 18.	view pushFrontEdges.	self assert: (view canvas shapes indexOf: lastEdge trachelShape) equals: 19.</body><body package="Roassal2-Core-Tests">testRemovingEdges	| es |	es := RTBox elementsOn: #(1 2).	view addAll: es.	view add: (RTLine edgeFrom: es first to: es second).	self assert: view numberOfEdges equals: 1. 		view removeAllEdges.	self assert: view numberOfEdges equals: 0.		self assert: es first connectedEdges isEmpty.	self assert: es second connectedEdges isEmpty.</body></methods><methods><class-id>Roassal2.RTViewTest</class-id> <category>running</category><body package="Roassal2-Core-Tests">setUp	super setUp.	view := RTView new</body></methods><methods><class-id>Roassal2.RTViewTest</class-id> <category>menu</category><body package="Roassal2-Core-Tests">testAddFindMenu	view addFindMenu.	self assert: view canvas numberOfFixedShapes &gt; 0.	self assert: view canvas numberOfShapes equals: 0</body><body package="Roassal2-Core-Tests">testAddLayoutMenu	view addLayoutMenu.	self assert: view canvas numberOfFixedShapes &gt; 0.	self assert: view canvas numberOfShapes equals: 0</body><body package="Roassal2-Core-Tests">testMenu	view add: (RTEllipse new size: 50) element.	view addMenu: 'foo' callback: [  ].	self assert: view canvas numberOfShapes = 1.	self assert: view canvas numberOfFixedShapes = 1.</body><body package="Roassal2-Core-Tests">testSignalUpdate	RTView new signalUpdate</body><body package="Roassal2-Core-Tests">testTrachelShape	self assert: view trachelShape class equals: TRNoShape</body><body package="Roassal2-Core-Tests">testsetDefaultMenu	view setDefaultMenu.	self assert: view canvas numberOfFixedShapes &gt; 0.	self assert: view canvas numberOfShapes equals: 0</body></methods><methods><class-id>Roassal2.RTViewTest</class-id> <category>low events</category><body package="Roassal2-Core-Tests">testLowLevelEvent	| v e |	v := RTView new.	e := (RTBox new size: 30) element.	e @ RTDraggable.	v add: e.	self assert: (v canvas shapeWithAction: TRMouseDragging forPositionInPixels: 250 @ 250) == e trachelShape</body><body package="Roassal2-Core-Tests">testLowLevelEvent02	| v e |	v := RTView new.	e := (RTBox new size: 30) element.	e when: TRMouseClick do: [ ].	v add: e.	self assert: (v canvas shapeWithAction: TRMouseClick forPositionInPixels: 250 @ 250) == e trachelShape</body><body package="Roassal2-Core-Tests">testLowLevelEvent3	| v e |	v := RTView new.	e := (RTBox new size: 30) element.	v add: e.	e @ RTDraggable.	self assert: (v canvas shapeWithAction: TRMouseDragging forPositionInPixels: 250 @ 250) == e trachelShape</body></methods><methods><class-id>Roassal2.RTViewTest</class-id> <category>opening</category><body package="Roassal2-Core-Tests">testOpenWithMenu	| window |	window := view openWithMenu.	self assert: view numberOfElements equals: 0.	self assert: view canvas numberOfFixedShapes &gt; 0.	window delete.</body><body package="Roassal2-Core-Tests">testOpening	| window |	window := RTView new openInWindowSized: 500 @ 300.	self assert: window extent equals: 500 @ 300.	window delete.</body><body package="Roassal2-Core-Tests">testOpeningInWindowSizedTitled	| window |	window := RTView new openInWindowSized: 500 @ 300 titled: 'Hello World'.	self assert: window extent equals: 500 @ 300.	window delete.</body><body package="Roassal2-Core-Tests">testOpeningRaw	| window |	window := view openRaw.	self assert: window notNil.	window delete.</body></methods><methods><class-id>Roassal2.RTViewTest</class-id> <category>removing</category><body package="Roassal2-Core-Tests">testRemoving	"	self debug: #testRemoving	"	| v es |	v := RTView new.	es := RTBox elementsOn: (1 to: 10).	v addAll: es.	es remove.	self assert: v numberOfElements equals: 0.	self assert: v canvas numberOfShapes equals: 0.</body></methods><methods><class-id>Roassal2.RTViewTest</class-id> <category>fixed elements</category><body package="Roassal2-Core-Tests">testAdding	| e1 e2 |	e1 := RTBox element.	e2 := RTBox element.		e1 setAsFixed.	view add: e1.	view add: e2.		self assert: view canvas numberOfFixedShapes = 1.	self assert: view canvas numberOfShapes = 1.</body><body package="Roassal2-Core-Tests">testDefault	self deny: RTElement new isFixed.	self assert: (RTElement new setAsFixed; isFixed).	self deny: (RTElement new setAsNotFixed; isFixed).</body></methods><methods><class-id>Roassal2.RTSVGVisitor2Test</class-id> <category>tests</category><body package="Roassal2-Tests">testAddInteractions	| element |	element := RTBox new borderColor: Color black; elementOn: 1.	element @ RTDraggable.	visitor addInteractions: element.	self assert: visitor stream contents equals: 'ints: [RTDraggable], '</body><body package="Roassal2-Tests">testAddMatrix	| el |	el := RTBox new element.	el translateTo: 0 @ 0.5.	visitor addMatrix: el trachelShape matrix.	self assert: visitor stream contents equals: 'matrix:{shx: 0,shy: 0,sx: 1,sy: 1,x: 0,y: 0.5}}, '</body><body package="Roassal2-Tests">testAddPopup	| element background |	element := RTBox new borderColor: Color black; elementOn: 1.	element @ (RTPopup new group: [ :group :el |		el model timesRepeat: [			group add: (RTBox new size: 10; color: Color blue) element ].			RTGridLayout on: group.			background := (RTBox new color: (Color black)) element.			RTNest new centerOn: background elements: group.			group add: background. ]).	visitor addInteractions: element.	self assert: visitor stream contents equals: 'ints: [new RTPopup([		{type: "box", id: "0", w: 10, h: 10, color: {r:0,g:0,b:255}, ints: [], matrix:{shx: 0,shy: 0,sx: 1,sy: 1,x: 0,y: 0}}, 		{type: "box", id: "1", w: 20, h: 20, color: {r:0,g:0,b:0}, ints: [], matrix:{shx: 0,shy: 0,sx: 1,sy: 1,x: 0,y: 0}}, ]) ], '</body><body package="Roassal2-Tests">testBasic	| size |	self assert: visitor view isNil.	self assert: visitor stream contents isEmpty.	self assert: visitor validInteractions isNotEmpty.	visitor view: RTView new.	self deny: visitor view isNil.	visitor visitView: visitor view.	size := visitor stream contents size.	self assert: visitor stream contents isNotEmpty.	visitor visitNoShape: nil.	self assert: size equals: visitor stream contents size.</body><body package="Roassal2-Tests">testBorderWidth	| el |	el := RTBox new borderColor: Color black; element.	visitor addBorderWidth: el trachelShape.	self assert: visitor stream contents equals: 'sw: 1,'.</body><body package="Roassal2-Tests">testVisitArcShape	| el |	el := (RTArc new  betaAngle: 0; innerRadius: 30; externalRadius: 30) element.	visitor visitElement: el.	self assert: visitor stream contents equals: '		{type: "arc", id: "0", ir: 30, er: 30, aAngle: 0, bAngle: 0, o: {x: 30, y: 0}, c: {x: 30, y: 0},color: {r:223,g:223,b:223}, matrix:{shx: 0,shy: 0,sx: 1,sy: 1,x: 0,y: 0}}, '</body><body package="Roassal2-Tests">testVisitArrowShape	| shape box e1 e2 view |	view := RTView new.	box := RTBox new.	e1 := box element.	e2 := box element.	shape := RTArrowedLine edgeFrom: e1 to: e2.	view add: e1; add: e2; add: shape.	visitor visitView: view.	self assert: visitor stream contents equals:'mamani.color({r:255,g:255,b:255});	mamani.camera.setScale(1.0001);	var shapes = [		{type: "box", id: "0", w: 5, h: 5, color: {r:223,g:223,b:223}, ints: [], matrix:{shx: 0,shy: 0,sx: 1,sy: 1,x: 0,y: 0}}, 		{type: "box", id: "1", w: 5, h: 5, color: {r:223,g:223,b:223}, ints: [], matrix:{shx: 0,shy: 0,sx: 1,sy: 1,x: 0,y: 0}}, 		{id: "2", type:"multi", shapes:[		{type: "line", id: "3",fromid:''0'',toid:''1'',color: {r:223,g:223,b:223},  width: 1,ap: new RTCenteredAttachPoint(false)},		{type: "simplearrow", id: "4", fromid: ''0'', toid: ''1'',color: {r:223,g:223,b:223},  width: 1, size: 10,ap: new RTCenteredAttachPoint(false), base: 10},], offsets: [{x: 0, y: 0},{x: 0, y: 0},]},	];	mamani.addShapes(shapes);'</body><body package="Roassal2-Tests">testVisitBoxShape	| box |	box := RTBox new size: 1/2; elementOn: 'foo'.	visitor visitElement: box.	self assert: visitor stream contents equals: '		{type: "box", id: "0", w: 0.5, h: 0.5, color: {r:223,g:223,b:223}, matrix:{shx: 0,shy: 0,sx: 1,sy: 1,x: 0,y: 0}}, '</body><body package="Roassal2-Tests">testVisitEllipseShape	| ellipse |	ellipse := RTEllipse new size: 1/2; elementOn: 'foo'.	visitor visitElement: ellipse.	self assert: visitor stream contents equals:'		{type: "ellipse", id: "0", rx: 0.25, ry: 0.25,color: {r:223,g:223,b:223}, matrix:{shx: 0,shy: 0,sx: 1,sy: 1,x: 0,y: 0}}, '</body><body package="Roassal2-Tests">testVisitGroup	| group |	group := RTGroup new.	group add: RTBox element.	visitor visitGroup: group.	self assert: visitor stream contents equals: '		{type: "box", id: "0", w: 5, h: 5, color: {r:223,g:223,b:223}, matrix:{shx: 0,shy: 0,sx: 1,sy: 1,x: 0,y: 0}}, '</body><body package="Roassal2-Tests">testVisitLineShape	| shape box e1 e2 |	box := RTBox new.	e1 := box element.	e2 := box element.	shape := RTLine edgeFrom: e1 to: e2.	visitor visitEdge: shape.	self assert: visitor stream contents equals: '		{type: "line", id: "0", fromid: {x:0,y:0},toid:{x:0,y:0},color: {r:223,g:223,b:223},  width: 1,ap:RTCenteredAttachPoint},'</body><body package="Roassal2-Tests">testVisitPolygonShape	| shape |	shape := RTPolygon new 		vertices: (Array with: 0@0 with: 1@0 with: 1@1); elementOn: 'foo'.	visitor visitElement: shape.	self assert: visitor stream contents equals: '		{type: "polygon", id: "0", o: {x: 0, y: 0}, c: {x: 1, y: 1}, p: "0,0 1,0 1,1 ",color: {r:223,g:223,b:223}, matrix:{shx: 0,shy: 0,sx: 1,sy: 1,x: 0,y: 0}}, '</body><body package="Roassal2-Tests">testVisitSVGPath	| shape |	shape := RTSVGPath new path:'M 100 100 L 300 100 L 200 300 z'; element.		visitor visitElement: shape.	self assert: visitor stream contents equals: '		{type: "path", id: "0", d:"M 100 100 L 300 100 L 200 300 z", o: {x: 100, y: 100}, c: {x: 300, y: 300},bordercolor: {r: 0, g: 0, b:0}, sw: 1,color: {r:0,g:0,b:0,a:0}, matrix:{shx: 0,shy: 0,sx: 1,sy: 1,x: 0,y: 0}}, '</body></methods><methods><class-id>Roassal2.RTSVGVisitor2Test</class-id> <category>running</category><body package="Roassal2-Tests">setUp	super setUp.	visitor := RTJavascriptVisitor new.</body></methods><methods><class-id>Roassal2.RTGrapherBarChartExample</class-id> <category>sources</category><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBarAndCurve| b ds |b := RTGrapher new.b extent: 400 @ 400.ds := RTData new.ds barShape color: (Color red).ds points: (-3 to: 3.1415 * 5 by: 0.1).ds y: [ :v | v sin ].b add: ds.ds := RTData new.ds noDot.ds connectColor: Color blue.ds points: (-3 to: 3.1415 * 5 by: 0.1).ds y: [ :v | v cos ].b add: ds.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBarChart2	| b ds |	b := RTGrapher new.		"We defien the size of the charting area"	b extent: 500 @ 100.		ds := RTData new.	"When the mouse is above a bar, say which class we are point at"	ds interaction popup.		"Each subclass of RTShape will be a bar"	ds points: RTShape withAllSubclasses.		"The height of a bar will be the number of methods (defined in the instance side)"	ds y: [ :c | c rtmethods size ].		"We set a color of the rectangle"	ds dotShape rectangle color: Color blue.		"Set the width of a bar"	ds barShape color: Color blue; width: 10.	b add: ds.		b axisX.	b axisYWithNumberOfTicks: 4.		^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBarChartWithNegativeValues	| data b ds |	data := (1 to: 20) collect: [ :v | 10 atRandom - 5 ].	 	b := RTGrapher new.	b extent: 300 @ 200.	ds := RTData new.	ds interaction popup.	ds points: data.	ds barShape width: 8; 	      color: (Color green alpha: 0.3);	     if: [:value | value &lt; 0 ] fillColor: (Color red alpha: 0.3).	b add: ds.	b build.	^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBarchart	| grapher dataSet |	grapher := RTGrapher new.	grapher extent: 300 @ 200.		dataSet := RTData new. 	dataSet barShape width: 10.	dataSet 		points: RTShape withAllSubclasses; 		y: #numberOfMethods.	 	grapher add: dataSet.	dataSet := RTData new.	dataSet dotShape color: (Color red alpha: 0.3).	dataSet 		points: RTShape withAllSubclasses; 		y: #numberOfMethods. 	grapher add: dataSet.	grapher axisY.	grapher axisX noLabel.	^ grapher</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBarsAndDots| data b ds |data := (-5 to: 5 by: 0.1). b := RTGrapher new.b extent: 300 @ 200.ds := RTData new.ds points: data.ds y: #cos.ds barShape color: (Color blue).b add: ds.ds := RTData new.ds points: data.ds y: #cos."ds barShape color: (Color blue)."b add: ds.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleGroupViewOnHistogram| b ds |b := RTGrapher new.b extent: 300 @ 200.ds := RTData new.ds dotShape rectangle size: 0.ds points: RTShape withAllSubclasses.ds y: [ :c | c rtmethods size ].ds barShape rectangle 	color: Color veryLightGray.ds interaction 	highlightColored: Color red.ds interaction popup 	named: [ :c | c name, ' methods' ] 	background: Color veryVeryLightGray 	group: [ :group :element | 		| s ms |		s := RTBox new size: #numberOfLinesOfCode; color: Color red.		ms := element model rtmethods sortedAs: #numberOfLinesOfCode.		group addAll: (s elementsOn: ms).		RTGridLayout on: group ].	b add: ds.b axisX noTick; noLabel.^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleLabelledBars	| b ds |	b := RTGrapher new.	b extent: 500 @ 200.	ds := RTData new.	ds interaction highlight.	ds points: RTShape withAllSubclasses.	ds barShape width: 10.	ds y: #numberOfMethods.	ds barChartWithBarTitle: #name.	b add: ds.	b axisY.	b axisX		noTick;		noLabel.	^ b</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePositiveAndNegativeValues	| b ds |	b := RTGrapher new.	ds := RTData new.	ds barShape		width: 15;		if: [ :v | v &lt; 0 ] fillColor: Color red;		if: [ :v | v &gt; 0 ] fillColor: Color green.	ds points: #(5 -6 10 20 -9).	b add: ds.	b axisX		noLabel;		noTick.	b axisY noDecimal.	^ b</body></methods><methods><class-id>Roassal2.RTGrapherBarChartExample</class-id> <category>icons</category><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBarAndCurveIcon	^ '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DqzquEBjAy0AAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBarChart2Icon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADI0lEQVR4XuXaP2vqUBjHcd9J+5bcS/sGCu1soVXRqUPfQTsoOLjpVL3+nVxKNyU4xEEEwUVxULSPzZOQS0yDt71Nau79/uCQHELOycnH5OjBxG7HT5yS4N8CPgg/fBA+CD98ED4IP3wQPgg/fBA+CD98EH74IHwQfvggfBB++CB8EH74IHwQfvgg/PBB+CD88EH4IPzwQfgg/PBB+CD88EH44YPwQfjhg/BB+OGD8EH44YPwQfiJGYhpmjvDMPh3JU5PyGg0kt8HE04Jyt2dc0y3/PBB+CB8ED4IH0Qn9V6vtwsCeXsTeXx0ShDIy4tz7PVVhH9bf+AJWa9FvHU/yM2NczyOT4z3g8QHicMgfa9evca4vmqRIIfmxv8W5P5e5ORE5OHBeVXovhY+SEiT+ldB/PVj3gT+E8IH4YPwQUIE2W732+aD8EFiswIRi0k9ziA/DbR3WWLFQonFE/L0JKLlbwblPzdKkO9cpy4z6bnucpPuH+2V5f217Af50xPTbIroua1W8C9v91xdf4sa5DtPtr9tu61jgRwC8Nf1xnsBbm8/1/Y/D7K17sRwOIwURPtYrVbyFRB/X3EACRpH6CA6qReLReuT2LKL25nu1+tt8dYvLkx7X7daPzsbyaG6e269XpdqtbrXVqPROlj393V+bga27b/uZrMlh47r/tWVaS/p6DaoL3/99NRZAnp+/vVhHFrcJaKg+vW109fl5Siwrw8gKj6bzSJdb+L38clvWdPpVIL2w8xisdAvcrK23n9R9eGdBzebjWiJoo/xeGy3O5/PRUvoIOl0WjKZjLjbKAaRTCZlMplIuVyWWq0WGUipVLLbNgxDtETRx2AwkOVyKYVCQdrtdvgg2WxWut2uNK3vlPl8PpJB5HI5qVQq0u/3JZVKhd6HM/80RMfS6XRs9LDh3T50LNaPaNH9MPvg/3Mx7mtZ/PBB+OGD8EH44YPwQfjhg/BB+OGD8EH44YPwwwfhg/DDB+GD8MMH4YPwwwfhg/DDB+GHD8IH4YcPwgfhhw/CB+GHD8IH4YcPwg8fhA/CDx+ED8IPH4QPwg8fBJF3z7uGtXujWGMAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBarChartWithNegativeValuesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAD+0lEQVR4XuXbzU7iUBiHcW/OW/EOXJmIH9GFC5fGRHeuTFyocWEgiooGiRkM+B1HUwwgxAQDOpqoeZm+xympTtFSqQPz/JumB9LTlvOjPRwoPfU6P52UHn4T8EH44YPwQfjhg/BB+OGD8EH44YPwQfjhg/DDB+GD8MMH4YPwwwfhg/DDB+GD8MMH4YcPwgfhhw/CB+GHD8IH4YcPwgfhp7tBZmZmJJFIyPPzs4yMjIjXOk9PT/Lw8CC65Dd1yCBiZ2trS25ubiSfz3s2eK1Wk7OzM9Gln20uy7Ls2xMfJEBeXl7EOQseHx+bNmKlUvHdwHyQb+hD+CB8ED4IH4QPwgfhg/BB+CD/AsSN8L58ak85e9LyL3vigzTJ0dGRTE1NmQYaGBiQ+fl5mZ2dFa+RerFY/HCkzgdpA4iO0re3t00DraysiA4SR0dHJchInQ/SxkuW+53f7CzgX7L4fQgfhA/CB+GD8EH4IL5BYhIz67TrmN3b02XanvggfBA+SFeDZDIZ2d9/bbxmP+Hq2OT6+jr0kTofxM75+bnorOXJycnAv6nzQdoEomdHNpuVnZ0dmZ6ebnrAlmUFvmTtVfcCg9ze3gZulMXaYmCQr+z3W/qQZDJZz+VyUrDxyomEaLmUTDbKUSsqKSvlWV7dW61nrawp/7R+mue95rgVN+u4n0ulUnX3Y92fHkOzbbjnhR8LdWd7uty1dhvbKKbTb9bNHx+b568uLszjw8PDzgZxzhA5PRVZfn3XSSzWKIf1bntfV/enx/CVd7nZRvrt2SJXV+a1yP29dPQZojfQ6ayfsgqFgrQCUq1WRWcta91W9nt3dyflcrlRxyn7AdG6ep+Z3tznrusHpGJ/sPHab8eAaGeu88nJiTnQVkDm5uZkY2NDSqWStPrCJiYmZGhoSIaHhxtLvyBad3x83OzXXdcPSGxpyXO/HQMSjUZFZ+30BwcHWwJZW1szde3+x9Rt5YNGb2+vubVV76pcX1+XsbExXyBOXb1FVvftrvsZSMZeL9Lf77nfrhgY+u1D2plW+pAPt/FJH9KVI3U+SAggTmerHbde7/Xy4nTE7pG612/qfJA2g+g10v14c3NTP/ebmx38jNT5ICGcIfF43HS+CuGUDw4OxNclyx5EfbVx+CAhfdvLB+GD8EH4IHwQPggB5DvCB+GD8EFCA7m8vDRfVevv6/ZYJNDd73yQNoHoILCvr898sxmJRHT+ax0doSuI3/+phwryJ//9JUv/o+58n1Xnp/P7EH74IHwQfvggfBB++CB8EH74IPzwQfgg/PBB+CD88EH4IPzwQfgg/PBB+OGD8EH44YPwQfjhg/BB+OGD8EH44YPwwwfhg/DjK78B7gqeCFF7BtEAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBarchartIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADa0lEQVR4XuXb3UtiQRzG8f5a/4aEIIjAy7rpMuquojJ6EyIKjS4qgl6oFCpfWozdCzUVKiIe9/xmnbAyazc12+8Dw8Rh6Bzmc2ZOvw6nr1bjp5fSx58CPgg/fBA+CD98ED4IP3wQPgg/fBA+CD98EH74IHwQfvggfBB++CB8EH74IHwQfvgg/PBB+CD88EH4IPzwQfgg/PBB+CD8fF+Q6elpTU1NaXl5WQMDA7Jji4uLWlpaUuO4h4cH3d7eyvp2XKyKRfFBmmRvb0/r6+uKRqOamZkJ5qmoVCql09PTZxNWqVS0v78v6z97oaVSqZaPxVzPB2l2t9Zzd3fXcgWk0+m23NUGkclk+CCfDR+ED8IH4YPwQfggfBA+CB+ED/KNK3Ur9gYHB2uTk5NuwmOxmCKRyKtKPZlMtqVS54O8U6mfnJwoHA7LfrZjQ0NDGh4e7milzgf5y1jVzt+y+M8QPggfhA/CB+GD8EH4IHwQPggfpBMgiURCOzs7ssm2d+Z2bG1t7dXE8yv1LoFsbW2pv79foVBIm5ubyuVyqlarryadX6l3CeTs7Ezb29vy1fnu7q7GxsbE37L4zxA+CB+ED8IH4YPwQfggfBA+CB+kkyAbGxsqFAquBuFX6l8MMjEx8fQZwv39Pb9S74UVYp8g+P9j8St1/jOED8IH4YPwQToJouAdisrlZzian9f/ClJZXVUpn1dPgliyqdSfCc1kVF5YkE1sNpl0E6zzc+niQp0C0dWVrHUTxK7VWs+C+Av0rXGCM+m0a61WzWdAcoeHrgXvbmrVkRH7LpIP0hKkfsz+lLZVY305GlUpm1U7QJqd82n13NxIwRtQv61+W5CjoyMdHBy8WaW/rNQ/CtLYv9zi/PibeFzWGldUZWVFpetrt2/b/u1Xg9VKzc5pEH7ibDu1c/6Ix12vx0fXGleUH+8RXV//bt5fjxs/Our6roOcB/u+tbeqdF+pXweT5HvDuby8fLddBM+Tj4yzlgtujH/5HT/n5pQ9Pm46Ph+sGGvNxlv7NTvrxhfGx1uex9I1EFsdx8HFtarSnz1Y66nx87XPEH74IHwQfvggfBB++CB8EH74IPzwQfgg/PBB+CD88EH4IPzwQfgg/PBB+OGD8EH44YPwQfjhg/BB+OGD8EH44YPwwwfhg/DzofwGc3EH7cin41IAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleBarsAndDotsIcon	^ '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UYtIR/UAAAAASUVORK5CYII='</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleGroupViewOnHistogramIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADJElEQVR4XuXaSWsiQRiH8XxuL979CMnBi4ecBD0qLigEEdxRlKBBiYIejHjw4PI6vk0qNE6NOqPd2vP8oSh7SVvWL71Udz/t9/w8Up74XcAH4YcPwgfhhw/CB+GHD8IH4YcPwgfhhw/CDx+ED8IPH4QPwg8fhA/CDx+ED8IPH4QfPggfhB8+CB+EHz4IH4QfPggfhJ9ggxQKBYnFYhKJRESnE4mEJJNJOV5vtVqJFn5XewzSbrfl/f1dnp+fnc7udrui847Xm0wmUqlU+CB+HrLW6/XJDv/4+JB+vy+5XG4/GAx+5uu0Fn58PofwQfggfBA+CB+ED8IH4YPwQfggV/9Wp8ghvg8MtdaRuubl5UWKxaJ1pN7r9TAg5jftdju5yx6it1Bms5mDop//NFI3IFq/vb05xTR+OBw606PRSPggV0b3AB2pb7dbueSQZWp3MfN0V+eD+HwO8RtEt+knNh+EDxJcED8uIvggfBA+CAakVqs5Hff19fUzwOKD3BHElFt2HgZkPB47XxiNRp260WjI4T/87EidD+LxHmJectDn61ouGanzQTwA0S/NZDISDof3ettD945msyn8Qxb/HMIH4YPwQfggjwbyr/ek+CABAlkul6JXgVrzQR4AxIs7wXyQG4CYWzbz+VwCDVIqlZw32/X5+nQ6tTbgViN1L0Hc7Qg0SDwel9fXV2m1WhIKhawNuNVInQ9yQfRNE32e3ul0JJVKSVAPWf8NyD3OIYPBQC65fDXrmPX/FiSbzZ7tWBs2H4QP4i/I8TwbyKmO4YP4CKIXDFr4IA8CcryMD8IH4YPwQU4knU47o3R9nn5ohLUBi8XiqoGhFyDmZW8biFlmQMyL4KZ2F9u27wpyeHzrPMI1tS2fn59SLpelWq06jTe1u+jjX/d0vV7/bR0z73hd9zLb35n1T23T1g4DYmu3WXZq23cB0b1C33rfbDaSz+etDZDv7Pl5nHMIP3wQPgg/fBA+CD98ED4IP3wQfvggfBB++CB8EH74IHwQfvggfBB++CD88EH4IPzwQfgg/PBB+CD88EH4IPzwQfjhg/BB+DmbX54DDngf154DAAAAAElFTkSuQmCC'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleLabelledBarsIcon	^ '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'</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePositiveAndNegativeValuesIcon	^ 'iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACBklEQVR4XuXavWrCUBiA4VxOe5WCODl6Ay4OvQYXf25ARJwU3FwEFRd/wM9yplSwrbQaQ543HBwUg+dJDDkku1z8ylTmT4EP4ueD+CB+PogP4ueD+CB+PogP4ueD+PkgPoifD+KD+PkgPoifD+KD+Pkgfj6ID+Lng/ggfj6ID+Lng/ggftUAGQ6H0el0ol6vx/l8Dn9KXwwynU5jNpvFarWK7XZ7BbLZbGI0GpUW6S3yrXJ/Wfv9/uaPWiwWUd6jMd+Ya4gP4oP4ID6ID+KD+CA+iA/ig/ggPogP4oP4IEWCpLWs9NpqtfylkzKdIafTKZbLZSkWFz8i3ziQw+EQaQwGg9KcIfdOtH8N8UF8EB/EB/FBfBAfpNog75FvPkgJQB49MT6ID+KD+CA+iA/ig/yxRqMR3W735sTP5/PY7XY/jq8T89tn7xn3ft+j95tGWtd7OUh6rjehPP0+JMvyUehhW9x+H7KH7x4j9UGqfqfug/ggPogP4oP4ID6ID+KDPAPkZbfPPogP4oP4ID7Is0Da7XaMx+Po9XpRSZAi7f/7BZPJJJrNZtRqtTSu3luv15GGP80FnyEJ4ng8Rr/f9ye/7NcQPx/EB/HzQXwQPx/EB/HzQfx8EB/EzwfxQfx8EB/EzwfxQfx8ED8fxAfx80F8ED8fxAfx80F8ED8fxM8H8UH87uoTt/3tJ829VVMAAAAASUVORK5CYII='</body></methods><methods><class-id>Roassal2.RTGrapherBarChartExample</class-id> <category>accessing</category><body package="Roassal2-Builder-Grapher-Examples-Examples">label	^ 'Grapher - Bar charts'</body></methods><methods><class-id>Roassal2.RTCursorFollowerTest</class-id> <category>running</category><body package="Roassal2-Builder-Grapher-Decorators-Tests">setUp	| ds |	super setUp.	b := RTGrapher new.	ds := RTData new.	ds points: #(5 10 6 2 -2.5).	b add: ds.</body></methods><methods><class-id>Roassal2.RTCursorFollowerTest</class-id> <category>tests</category><body package="Roassal2-Builder-Grapher-Decorators-Tests">testIsPointOverTheBuilder	| follower |	follower := RTCursorFollower new.	b addDecorator: follower.	b build.		self assert: (follower convertPointForGraph: 5 @ 4) equals: (5 @ -4).	self assert: (follower convertPointForGraph: 5 @ -4) equals: (5 @ 4).		self assert: (follower isPointOverTheBuilder: 0 @ 0)</body></methods><methods><class-id>Roassal2.RTGroupTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">testAttributeAt	| g |	g := RTGroup new.	self assert: (g attributeAt: #foo ifAbsent: [10]) equals: 10.	self deny: (g hasAttribute: #foo)</body><body package="Roassal2-Core-Tests">testAttributeAtPresent	| g |	g := RTGroup new.	g attributeAt: #foo ifAbsentPut: 20.	self assert: (g attributeAt: #foo) equals: 20.	self assert: (g hasAttribute: #foo)</body><body package="Roassal2-Core-Tests">testAttributeAtput	"	self debug: #testAttributeAtput	"	| g |	g := RTGroup new.	g attributeAt: #foo put: 10.	self assert: (g attributeAt: #foo ifAbsent: [20]) equals: 10.	self assert: (g hasAttribute: #foo)</body><body package="Roassal2-Core-Tests">testElementFromModel	| group |	group := RTBox elementsOn: (1 to: 5).	self assert: (group elementFromModel: 1) == group first.	self assert: (group elementFromModel: 5) == group last.</body><body package="Roassal2-Core-Tests">testGroup	| group |	group := RTBox elementsOn: (1 to: 5).	self assert: group class == RTGroup.</body><body package="Roassal2-Core-Tests">testGroup2	| group |	group := RTBox new elementsOn: (1 to: 5).	self assert: group class == RTGroup.</body><body package="Roassal2-Core-Tests">testGroupTranslation	| group |	group := RTBox elementsOn: (1 to: 5).	self assert: group class == RTGroup.		self assert: (group allSatisfy: [ :el | el position = (0 @ 0) ]).	group translateBy: 20 @ 30.	self assert: (group allSatisfy: [ :el | el position = (20 @ 30) ]).</body><body package="Roassal2-Core-Tests">testGroupTranslation02	| v center elements firstPos |	v := RTView new.	center := (RTEllipse new size: 8; color: Color blue) element.	v add: center.	center translateBy: 80 @ 60.	elements := (RTEllipse new size: 5; color: Color red) elementsOn: (1 to: 20).	v addAll: elements.	RTCircleLayout on: elements.		firstPos := elements first position.	elements translateBy: 80 @ 60.	self assert: elements first position = (firstPos + (80 @ 60)).</body><body package="Roassal2-Core-Tests">testIncomingEdges	| v e1 e2 |	v := RTView new.	e1 := RTBox element.	e2 := RTBox element.	v add: e1; add: e2.	v add: (RTLine edgeFrom: e1 to: e2).		self assert: (RTGroup with: e1) outgoingEdges size equals: 1. 	self assert: (RTGroup with: e1) incomingEdges size equals: 0.		self assert: (RTGroup with: e2) incomingEdges size equals: 1. 	self assert: (RTGroup with: e2) outgoingEdges size equals: 0.</body><body package="Roassal2-Core-Tests">testRemovingGroup	| els view |	els := RTBox new elementsOn: (1 to: 5).	view := RTView new.	view addAll: els.	self assert: view numberOfElements equals: 5.		els remove.	self assert: view numberOfElements equals: 0.</body><body package="Roassal2-Core-Tests">testSignalUpdate	"Should not raise an error"	RTGroup new signalUpdate.</body><body package="Roassal2-Core-Tests">testView	| group |	group := RTBox elementsOn: (1 to: 5).	self assert: group view equals: group first view</body><body package="Roassal2-Core-Tests">testViewWhenAddedToView	| group v |	group := RTBox elementsOn: (1 to: 5).		v := RTView new.	v addAll: group.	self assert: group view equals: group first view</body></methods><methods><class-id>Roassal2.RTGroupTest</class-id> <category>tests - caches</category><body package="Roassal2-Core-Tests">testCache01	| es el |	es := RTBox elementsOn: (1 to: 5).	self assert: es class equals: RTGroup.	self assert: es elementFromModelCache isEmpty.		el := es elementFromModel: 2.	self assert: el class equals: RTElement.	self assert: el model equals: 2.		self deny: es elementFromModelCache isEmpty.</body><body package="Roassal2-Core-Tests">testCache02	| es el els |	es := RTBox elementsOn: #(1 1).		el := es elementFromModel: 1.	self assert: el class equals: RTElement.	self assert: el model equals: 1.		els := es elementsFromModel: 1.	self assert: els class equals: RTGroup.	self assert: els size equals: 2</body><body package="Roassal2-Core-Tests">testCache03	| es el |	es := RTBox elementsOn: #(1 1).		es elementsFromModel: 1.	el := es elementFromModel: 1.	self assert: el class equals: RTElement.	self assert: el model equals: 1.</body><body package="Roassal2-Core-Tests">testCache04	| es |	es := RTBox elementsOn: #(1).	self assert: (es elementsFromModel: 1) size equals: 1.		es addAll: (RTBox elementsOn: #(1)). 	self assert: (es elementsFromModel: 1) size equals: 2.</body></methods><methods><class-id>Roassal2.RTGroupTest</class-id> <category>resizing</category><body package="Roassal2-Core-Tests">testResizing	| e1 e2 g |	e1 := (RTBox new width: 30; height: 20) element.	e2 := (RTEllipse new width: 30; height: 20) element.	g := RTGroup new.	g add: e1; add: e2.	TRConstraint move: e2 below: e1.		self assert: g encompassingRectangle extent equals: ((30.0 @ 40.0)).	self assert: g encompassingRectangle equals: ((-15.0 @ -10.0) corner: (15.0 @ 30.0)).		"We resize the group"	g width: 15.	self assert: g encompassingRectangle extent equals: ((15 @ 40.0)).	self assert: g encompassingRectangle equals: ((-15.0 @ -10.0) corner: (0 @ 30.0)).		g width: 30.	self assert: g encompassingRectangle extent equals: ((30.0 @ 40.0)).	self assert: g encompassingRectangle equals: ((-15.0 @ -10.0) corner: (15.0 @ 30.0)).</body><body package="Roassal2-Core-Tests">testResizingAndMinimumSize	| e1 e2 g |	e1 := (RTBox new width: 30; height: 20) element.	e2 := (RTEllipse new width: 30; height: 20) element.	g := RTGroup new.	g add: e1; add: e2.	TRConstraint move: e2 below: e1.		"We resize the group"	g width: -4.	self assert: g encompassingRectangle extent equals: ((1 @ 40.0)).</body></methods><methods><class-id>UI.Panel</class-id> <category>layout algorithms</category><body package="Roassal2-Examples-Extentions">beGrid	self childFramingBlock: 			[:rectangle :child :index | | max height width x y i gap |			max := self children size sqrt.			gap := 10.			height := child preferredHeight.			width := child preferredWidth.			i := index - 1.			x := (i / max ) asInteger * (width + gap).			y := (i% max ) asInteger * (height + gap) .			(x @ y) extent: width @ height ]</body></methods><methods><class-id>Roassal2.RTAbstractExample</class-id> <category>*Roassal2GT-Inspector</category><body package="Roassal2-ExampleBrowser-Examples">gtInspectorPreviewIn: composite	&lt;gtInspectorPresentationOrder: 4&gt;	^ composite roassal2		title: 'Examples';		when: [ self gtExamples notEmpty ];		send: [ :example | example ];		painting: [ :view | 			view @ RTDraggableView.			self gtOpenOn: view ]</body></methods><methods><class-id>Roassal2.RTAbstractExample class</class-id> <category>*Roassal2GT-Inspector</category><body package="Roassal2-ExampleBrowser-Examples">gtInspectorPreviewIn: composite	&lt;gtInspectorPresentationOrder: 4&gt;	&lt;gtInspectorTag: #examples&gt;	^ self new gtInspectorPreviewIn: composite</body></methods><methods><class-id>Roassal2.RTAbstractExample class</class-id> <category>examples</category><body package="Roassal2-ExampleBrowser-Examples">runningAllExamples	&lt;todo: 'deprecated (?) since the new GTExample API / UI-Runner is coming soon ...'&gt;	"	self runningAllExamples	"	"Useful to find examples that may trigger an error"		| examples result w |	w := '/tmp/result.txt' asFileReference writeStream.	self allSubclasses do: [ :cls |		examples := cls selectors select: [ :k |( k beginsWith: 'example')  and: [ (k endsWith: 'Icon') not ] ].		examples do: [ :k | 			w nextPutAll: 'About to run ', cls name, '&gt;&gt;', k, ' ...'.			result := cls new perform: k.			[ result class == RTView or: [ result isKindOf: RTBuilder ] ] assert.			w nextPutAll: 'done!'; cr		] ]</body></methods><methods><class-id>Roassal2.RTMapBuilderExample</class-id> <category>as yet unclassified</category><body package="Roassal2-Builder-Map-Examples">citiesExample1	&lt;gtExample&gt;	"self new citiesExample1"	| b |	b := RTMapBuilder new.		b countries: RTMapBuilder southAmerica.	b cities: #( " (name, population) pairs "		#('Santiago' 6027000)		#('Bogota' 6763000)		#('Buenos Aires' 12801365)		#('Brasilia' 2481000)		#('Montevideo' 1338000)		#('Lima' 8473000)		#('La Paz' 789585)		#('Quito' 1608000)		#('Sao Paulo' 19889559)		#('Caracas' 2104000))		named: [ :c | c at: 1 ].		" Cities' pop-ups show their population "	b cities		withPopup: [ :c | (c at: 1), ': ', (((c at: 2) / 1000000 roundTo: 0.01) asString), 'M'].		" Cities' size and color depend on the population "	b cities shape		size: [ :c | (c at: 2)/300000 + 10 ];		if: [ :c | (c at: 2) &lt; 1000000 ] fillColor: (Color green alpha: 0.5);		if: [ :c | (c at: 2) &gt;= 1000000 and: (c at: 2) &lt; 5000000 ] fillColor: (Color yellow alpha: 0.5);		if: [ :c | (c at: 2) &gt;= 5000000 ] fillColor: (Color red alpha: 0.5).		" We define some routes and color them, then we set the pop-ups to show each route's length "	b routes		from: 'Santiago' toAll: #('Buenos Aires' 'Lima' 'Sao Paulo');		from: 'Bogota' toAll: #('Sao Paulo' 'Brasilia' 'Quito');		ifRoute: [ :r | r fromCityName = 'Bogota' ] lineColor: (Color brown);		ifRoute: [ :r | r fromCityName = 'Santiago' ] lineColor: (Color blue);		withPopup: #lengthString.		" We set the countries' colors, scale, and pop-up "	b color: Color veryVeryLightGray.	b scale: 3.	b withPopup.		^ b</body><body package="Roassal2-Builder-Map-Examples">citiesExample2	&lt;gtExample&gt;	"self new citiesExample2"	| b |	b := RTMapBuilder new.			b countries: RTMapBuilder countries.	b cities: #(		#('New York City' 8337000)		#('Washington, D.C.' 632323)		#('Paris' 2211000)		#('Santiago' 6027000)		#('Shanghai' 23710000))		named: [ :c | c at: 1 ].			b cities withPopup.	b cities shape		size: [ :c | (c at: 2)/300000 + 10 ];		color: (Color red alpha: 0.5).		b routes		from: 'Paris' toAll: #('Santiago' 'New York City' 'Washington, D.C.' 'Shanghai');		color: Color blue;		withPopup: #lengthString.		b color: Color veryVeryLightGray.	^ b</body><body package="Roassal2-Builder-Map-Examples">cityEvolution	&lt;gtExample&gt;	"self new cityEvolution"	| b |	b := RTMapBuilder new.		b countries: RTMapBuilder southAmerica.	b cities: #(		#('Santiago' #(332724 507296 696231 952075 1353400 1907378 2436398 3650541 4679900 5822316))		#('Buenos Aires' #(950891 1800000 2200000 2700000 2970000 2966634 2972453 2922829 2965403 2776138))		#('Sao Paulo' #(240000 400000 900000 1300000 2000000 3700000 5800000 8400000 9500000 10300000))		#('Lima' #(120000 198875 400000 661508 1200000 1901927 3418452 4835793 6386308 7000000))		#('Bogota' #(0 0 0 325650 715250 1697311 2855065 4000000 5200000 7000000))		) named: [ :c | c at: 1 ].			b cities evolveAt: 2		through: #(1910 1920 1930 1940 1950 1960 1970 1980 1990 2000). " This list is only used for changing a label "		" Cities' pop-ups show their population "	b cities withPopup: [ :c |		|population|		population := (c at: 2) currentValue.		(c at: 1), ': ', (population = 0 ifTrue: ['no data'] ifFalse: [((population / 1000000 roundTo: 0.01) asString), 'M'])	].		" Cities' size and color depend on the population "	b cities shape		size: [ :c | (c at: 2) currentValue /50000 + 10 ];		if: [ :c | (c at: 2) currentValue &lt; 1000000 ] fillColor: (Color green alpha: 0.5);		if: [ :c | (c at: 2) currentValue &gt;= 1000000 and: (c at: 2) currentValue &lt; 5000000 ] fillColor: (Color yellow alpha: 0.5);		if: [ :c | (c at: 2) currentValue &gt;= 5000000 ] fillColor: (Color red alpha: 0.5);		if: [ :c | (c at: 2) currentValue = 0 ] fillColor: (Color black alpha: 0.5).		" We set the countries' colors, scale, and pop-up "	b color: Color veryVeryLightGray.	b scale: 3.	b withPopup.		^ b</body><body package="Roassal2-Builder-Map-Examples">simpleExample	&lt;gtExample&gt;	"self new simpleExample"	| b |	b := RTMapBuilder new.				b countries: #('Chile').	b color: Color red.	b scale: 3.	^ b</body><body package="Roassal2-Builder-Map-Examples">southAmericaPopulation	&lt;gtExample&gt;	"self new southAmericaPopulation"	| b countries cn sum|	b := RTMapBuilder new.				countries := RTMapBuilder countriesPopulation select: [ :c | RTSVGPath southAmerica includes: (c at: 1) ].	sum := (countries collect: [ :c | c at: 2 ])inject: 0 into: [ :acc :n | acc + n ].		cn := RTNColorLinearNormalizer		inContext: (countries collect: [:c | c at: 2])		lowColor: (Color r:0.8 g:0.8 b:1)		highColor: (Color r:0 g:0 b:0.3).		b countries: countries named: [ :c | c at: 1 ].	b color: [ :c | cn rtValue: (c at: 2) ].	b withPopup: [ :c |		(c at: 1) asString, ': ',		(((c at: 2) / sum * 100 asFloat roundTo: 0.01) printString), '%'].	b scale: 2.	^ b</body><body package="Roassal2-Builder-Map-Examples">worldPopulation	&lt;gtExample&gt;	"self new worldPopulation"	| b countries cn |	b := RTMapBuilder new.				countries := RTMapBuilder countriesPopulation select: [ :c | RTSVGPath countries includes: (c at: 1) ].		cn := RTNColorLinearNormalizer		inContext: (countries collect: [:c | c at: 2])		lowColor: (Color r:0.8 g:0.8 b:1)		highColor: (Color r:0 g:0 b:0.3).		b countries: countries named: [ :c | c at: 1 ].	b color: [ :dic | cn rtValue: (dic at: 2) ].	b withPopup: [ :c | (c at: 1) asString, ': ',(((c at: 2) / 1000000 asFloat roundTo: 0.001) asString, ' Million') ].	^ b</body></methods><methods><class-id>Roassal2.RTSVGExample</class-id> <category>basic</category><body package="Roassal2-ExampleBrowser-Examples">animated	&lt;gtExample&gt;	&lt;iconSelectorBase64: #animatedIcon&gt; 	| view randInt rand |	rand := Random new.	randInt := [ :n | (rand next * n) asInteger ].	view := RTView new.	RTSVGPath icons do: [ :icon |		|elem|		elem := (RTSVGPath new		path: (RTSVGPath perform: icon);		borderWidth: 0;		scale: 5;		fillColor: Color random) element.		elem @ RTDraggable.		view add: elem.		elem translateBy: (randInt value: 400) @ (randInt value: 400).		view addAnimation: (RTRotationMove angle: 100 during: (randInt value: 90) + 10 on: elem).	].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">diamond	&lt;gtExample&gt;	&lt;iconSelectorBase64: #diamondIcon&gt;		| v s elements |	v := RTView new.	v @ RTDraggableView.	s := RTSVGPath new path: 'M342.906,153H170.301l-85.967,96.562L256,462l171.666-211.23L342.906,153z M181.634,256l52.171,123.905		L133.688,256H181.634z M311.741,256L256,388.371L200.259,256H311.741z M208.055,238.833L256,190.887l47.945,47.946H208.055z		 M330.367,256h48.801L277.895,380.626L330.367,256z M371.875,238.833h-43.654l-51.5-51.5h50.511L371.875,238.833z M185.69,187.333		h49.589l-51.5,51.5h-43.922L185.69,187.333z M126.396,150.67l-42.062-42.062l24.274-24.274l40.653,40.653L126.396,150.67z		 M238.834,118.667V50h34.332v68.667H238.834z M363.442,124.283l39.95-39.949l24.273,24.274l-41.676,41.676L363.442,124.283z'.	s color: Color black.	elements := s elementsOn: (1 to: 40).	elements when: TRMouseEnter do: [ :evt |		evt shape color: Color red.		evt signalUpdate].	v addAll: elements.	RTGridLayout on: elements.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">fibonacciSpiral 	&lt;gtExample&gt;	&lt;iconSelectorBase64: #fibonacciSpiralIcon&gt;		| view elem |	view := RTView new.	elem := (RTSVGPath new		path: (RTSVGPath 			goldenSpiral: 10 			start: 0@0			side: 100			direction: 1@ 1			type: true);		fillColor: Color random;		scale: 2;		borderWidth: 0.5) element.	elem @ RTDraggable.	view add: elem.	elem := (RTSVGPath new		path: (RTSVGPath 			goldenSpiral: 10 			start: 0@0			side: 100			direction: -1@ 1			type: true);		fillColor: Color random;		scale: 2;		borderWidth: 0.5) element.	elem @ RTDraggable.	view add: elem.	elem := (RTSVGPath new		path: (RTSVGPath 			goldenSpiral: 10 			start: 0@0			side: 100			direction: -1@ -1			type: true);		fillColor: Color random;		scale: 2;		borderWidth: 0.5) element.	elem @ RTDraggable.	view add: elem.	elem := (RTSVGPath new		path: (RTSVGPath 			goldenSpiral: 10 			start: 0@0			side: 100			direction: 1@ -1			type: true);		fillColor: Color random;		scale: 2;		borderWidth: 0.5) element.	elem @ RTDraggable.	view add: elem.	view elements do: [ :e| 		view addAnimation: (RTRotationMove angle: 300 during: 20 on: e)		 ].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">icon1	&lt;gtExample&gt;	&lt;iconSelectorBase64: #icon1Icon&gt;		"	self new icon	"	| view element |	view := RTView new.	element := (RTSVGPath new		path: 'M22.121,24.438l-3.362-7.847c-0.329-0.769-0.599-2.081-0.599-2.917s0.513-1.521,1.14-1.521s1.141-0.513,1.141-1.14s-0.685-1.14-1.521-1.14h-6.84c-0.836,0-1.52,0.513-1.52,1.14s0.513,1.14,1.14,1.14s1.14,0.685,1.14,1.521s-0.269,2.148-0.599,2.917l-3.362,7.847C8.55,25.206,8.28,26.177,8.28,26.595s0.342,1.103,0.76,1.521s1.444,0.76,2.28,0.76h8.359c0.836,0,1.862-0.342,2.28-0.76s0.76-1.103,0.76-1.521S22.45,25.206,22.121,24.438zM16.582,7.625c0,0.599,0.484,1.083,1.083,1.083s1.083-0.484,1.083-1.083s-0.484-1.084-1.083-1.084S16.582,7.026,16.582,7.625zM13.667,7.792c0.276,0,0.5-0.224,0.5-0.5s-0.224-0.5-0.5-0.5s-0.5,0.224-0.5,0.5S13.391,7.792,13.667,7.792zM15.584,5.292c0.874,0,1.583-0.709,1.583-1.583c0-0.875-0.709-1.584-1.583-1.584C14.709,2.125,14,2.834,14,3.709C14,4.583,14.709,5.292,15.584,5.292z';		borderWidth: 0;		scale: 8;		fillColor: Color black) element.	element @ RTDraggable.	element when: TRMouseEnter do: [ :evt |		evt shape color: Color red.		evt signalUpdate].	view add: element.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">icon2	&lt;gtExample&gt;	&lt;iconSelectorBase64: #icon2Icon&gt;		"	self new icon2	"	| view element |	view := RTView new.	element := (RTSVGPath new		path: 'M29.02,11.754L8.416,9.473L7.16,4.716C7.071,4.389,6.772,4.158,6.433,4.158H3.341C3.114,3.866,2.775,3.667,2.377,3.667c-0.686,0-1.242,0.556-1.242,1.242c0,0.686,0.556,1.242,1.242,1.242c0.399,0,0.738-0.201,0.965-0.493h2.512l5.23,19.8c-0.548,0.589-0.891,1.373-0.891,2.242c0,1.821,1.473,3.293,3.293,3.293c1.82,0,3.294-1.472,3.297-3.293c0-0.257-0.036-0.504-0.093-0.743h5.533c-0.056,0.239-0.092,0.486-0.092,0.743c0,1.821,1.475,3.293,3.295,3.293s3.295-1.472,3.295-3.293c0-1.82-1.473-3.295-3.295-3.297c-0.951,0.001-1.801,0.409-2.402,1.053h-7.136c-0.601-0.644-1.451-1.052-2.402-1.053c-0.379,0-0.738,0.078-1.077,0.196l-0.181-0.685H26.81c1.157-0.027,2.138-0.83,2.391-1.959l1.574-7.799c0.028-0.145,0.041-0.282,0.039-0.414C30.823,12.733,30.051,11.86,29.02,11.754zM25.428,27.994c-0.163,0-0.295-0.132-0.297-0.295c0.002-0.165,0.134-0.297,0.297-0.297s0.295,0.132,0.297,0.297C25.723,27.862,25.591,27.994,25.428,27.994zM27.208,20.499l0.948-0.948l-0.318,1.578L27.208,20.499zM12.755,11.463l1.036,1.036l-1.292,1.292l-1.292-1.292l1.087-1.087L12.755,11.463zM17.253,11.961l0.538,0.538l-1.292,1.292l-1.292-1.292l0.688-0.688L17.253,11.961zM9.631,14.075l0.868-0.868l1.292,1.292l-1.292,1.292l-0.564-0.564L9.631,14.075zM9.335,12.956l-0.328-1.24L9.792,12.5L9.335,12.956zM21.791,16.499l-1.292,1.292l-1.292-1.292l1.292-1.292L21.791,16.499zM21.207,14.5l1.292-1.292l1.292,1.292l-1.292,1.292L21.207,14.5zM18.5,15.791l-1.293-1.292l1.292-1.292l1.292,1.292L18.5,15.791zM17.791,16.499L16.5,17.791l-1.292-1.292l1.292-1.292L17.791,16.499zM14.499,15.791l-1.292-1.292l1.292-1.292l1.292,1.292L14.499,15.791zM13.791,16.499l-1.292,1.291l-1.292-1.291l1.292-1.292L13.791,16.499zM10.499,17.207l1.292,1.292l-0.785,0.784l-0.54-2.044L10.499,17.207zM11.302,20.404l1.197-1.197l1.292,1.292L12.5,21.791l-1.131-1.13L11.302,20.404zM13.208,18.499l1.291-1.292l1.292,1.292L14.5,19.791L13.208,18.499zM16.5,19.207l1.292,1.292L16.5,21.79l-1.292-1.291L16.5,19.207zM17.208,18.499l1.292-1.292l1.291,1.292L18.5,19.79L17.208,18.499zM20.499,19.207l1.292,1.292L20.5,21.79l-1.292-1.292L20.499,19.207zM21.207,18.499l1.292-1.292l1.292,1.292l-1.292,1.292L21.207,18.499zM23.207,16.499l1.292-1.292l1.292,1.292l-1.292,1.292L23.207,16.499zM25.207,14.499l1.292-1.292L27.79,14.5l-1.291,1.292L25.207,14.499zM24.499,13.792l-1.156-1.156l2.082,0.23L24.499,13.792zM21.791,12.5l-1.292,1.292L19.207,12.5l0.29-0.29l2.253,0.25L21.791,12.5zM14.5,11.791l-0.152-0.152l0.273,0.03L14.5,11.791zM10.5,11.792l-0.65-0.65l1.171,0.129L10.5,11.792zM14.5,21.207l1.205,1.205h-2.409L14.5,21.207zM18.499,21.207l1.206,1.206h-2.412L18.499,21.207zM22.499,21.207l1.208,1.207l-2.414-0.001L22.499,21.207zM23.207,20.499l1.292-1.292l1.292,1.292l-1.292,1.292L23.207,20.499zM25.207,18.499l1.292-1.291l1.291,1.291l-1.291,1.292L25.207,18.499zM28.499,17.791l-1.291-1.292l1.291-1.291l0.444,0.444l-0.429,2.124L28.499,17.791zM29.001,13.289l-0.502,0.502l-0.658-0.658l1.016,0.112C28.911,13.253,28.956,13.271,29.001,13.289zM13.487,27.994c-0.161,0-0.295-0.132-0.295-0.295c0-0.165,0.134-0.297,0.295-0.297c0.163,0,0.296,0.132,0.296,0.297C13.783,27.862,13.651,27.994,13.487,27.994zM26.81,22.414h-1.517l1.207-1.207l0.93,0.93C27.243,22.306,27.007,22.428,26.81,22.414z';		borderWidth: 0;		scale: 8;		fillColor: Color black) element.	element @ RTDraggable.	view add: element.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">icon3	&lt;gtExample&gt;	&lt;iconSelectorBase64: #icon3Icon&gt;	"	self new icon3	"	| view element |	view := RTView new.	element := (RTSVGPath new		path: 'M3.739,13.619c0,0,3.516-4.669,5.592-3.642c2.077,1.027-0.414,2.795,1.598,3.719c2.011,0.924,5.048-0.229,4.376-2.899c-0.672-2.67-1.866-0.776-2.798-2.208c-0.934-1.432,4.586-4.59,4.586-4.59s3.361,6.651,4.316,4.911c1.157-2.105,3.193-4.265,5.305-1.025c0,0,1.814,2.412,0.246,3.434s-2.917,0.443-3.506,1.553c-0.586,1.112,3.784,4.093,3.784,4.093s-2.987,4.81-4.926,3.548c-1.939-1.262,0.356-3.364-2.599-3.989c-1.288-0.23-3.438,0.538-3.818,2.34c-0.13,2.709,1.604,2.016,2.797,3.475c1.191,1.457-4.484,4.522-4.484,4.522s-1.584-3.923-3.811-4.657c-2.227-0.735-0.893,2.135-2.917,2.531c-2.024,0.396-4.816-2.399-3.46-4.789c1.358-2.391,3.275-0.044,3.441-1.951C7.629,16.087,3.739,13.619,3.739,13.619z';		borderWidth: 0;		scale: 8;		fillColor: Color black) element.	element @ RTDraggable.	view add: element.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">icon4	&lt;gtExample&gt;	&lt;iconSelectorBase64: #icon4Icon&gt;		"	self new icon4	"	| view element |	view := RTView new.	element := (RTSVGPath new		path: 'M31.229,17.736c0.064-0.571,0.104-1.148,0.104-1.736s-0.04-1.166-0.104-1.737l-4.377-1.557c-0.218-0.716-0.504-1.401-0.851-2.05l1.993-4.192c-0.725-0.91-1.549-1.734-2.458-2.459l-4.193,1.994c-0.647-0.347-1.334-0.632-2.049-0.849l-1.558-4.378C17.165,0.708,16.588,0.667,16,0.667s-1.166,0.041-1.737,0.105L12.707,5.15c-0.716,0.217-1.401,0.502-2.05,0.849L6.464,4.005C5.554,4.73,4.73,5.554,4.005,6.464l1.994,4.192c-0.347,0.648-0.632,1.334-0.849,2.05l-4.378,1.557C0.708,14.834,0.667,15.412,0.667,16s0.041,1.165,0.105,1.736l4.378,1.558c0.217,0.715,0.502,1.401,0.849,2.049l-1.994,4.193c0.725,0.909,1.549,1.733,2.459,2.458l4.192-1.993c0.648,0.347,1.334,0.633,2.05,0.851l1.557,4.377c0.571,0.064,1.148,0.104,1.737,0.104c0.588,0,1.165-0.04,1.736-0.104l1.558-4.377c0.715-0.218,1.399-0.504,2.049-0.851l4.193,1.993c0.909-0.725,1.733-1.549,2.458-2.458l-1.993-4.193c0.347-0.647,0.633-1.334,0.851-2.049L31.229,17.736zM16,20.871c-2.69,0-4.872-2.182-4.872-4.871c0-2.69,2.182-4.872,4.872-4.872c2.689,0,4.871,2.182,4.871,4.872C20.871,18.689,18.689,20.871,16,20.871z';		borderWidth: 0;		fillColor: Color black;		scale: 8) element.	element @ RTDraggable.	view add: element.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">icon5	&lt;gtExample&gt;	&lt;iconSelectorBase64: #icon5Icon&gt;	"	self new icon5	"	| view element |	view := RTView new.	element := (RTSVGPath new		path: 'M16,1.466C7.973,1.466,1.466,7.973,1.466,16c0,8.027,6.507,14.534,14.534,14.534c8.027,0,14.534-6.507,14.534-14.534C30.534,7.973,24.027,1.466,16,1.466zM19.158,23.269c-0.079,0.064-0.183,0.13-0.105,0.207c0.078,0.078-0.09,0.131-0.09,0.17s0.104,0.246,0.052,0.336c-0.052,0.092-0.091,0.223-0.13,0.301c-0.039,0.077-0.131,0.155-0.104,0.272c0.025,0.116-0.104,0.077-0.104,0.194c0,0.116,0.116,0.065,0.09,0.208c-0.025,0.144-0.09,0.183-0.09,0.285c0,0.104,0.064,0.247,0.064,0.286s-0.064,0.17-0.155,0.272c-0.092,0.104-0.155,0.17-0.144,0.233c0.014,0.065,0.104,0.144,0.091,0.184c-0.013,0.037-0.129,0.168-0.116,0.259c0.014,0.09,0.129,0.053,0.155,0.116c0.026,0.065-0.155,0.118-0.078,0.183c0.078,0.064,0.183,0.051,0.156,0.208c-0.019,0.112,0.064,0.163,0.126,0.198c-0.891,0.221-1.818,0.352-2.777,0.352C9.639,27.533,4.466,22.36,4.466,16c0-2.073,0.557-4.015,1.518-5.697c0.079-0.042,0.137-0.069,0.171-0.062c0.065,0.013,0.079,0.104,0.183,0.13c0.104,0.026,0.195-0.078,0.26-0.117c0.064-0.039,0.116-0.195,0.051-0.182c-0.065,0.013-0.234,0-0.234,0s0.183-0.104,0.183-0.169s0.025-0.169,0.129-0.208C6.83,9.655,6.83,9.681,6.765,9.837C6.7,9.993,6.896,9.928,6.973,9.863s0.13-0.013,0.272-0.104c0.143-0.091,0.143-0.143,0.221-0.143c0.078,0,0.221,0.143,0.299,0.091c0.077-0.052,0.299,0.065,0.429,0.065c0.129,0,0.545,0.169,0.624,0.169c0.078,0,0.312,0.09,0.325,0.259c0.013,0.169,0.09,0.156,0.168,0.156s0.26,0.065,0.26,0.13c0,0.065-0.052,0.325,0.078,0.39c0.129,0.064,0.247,0.169,0.299,0.143c0.052-0.026,0-0.233-0.064-0.26c-0.065-0.026-0.027-0.117-0.052-0.169c-0.026-0.051,0.078-0.051,0.117,0.039c0.039,0.091,0.143,0.26,0.208,0.26c0.064,0,0.208,0.156,0.168,0.247c-0.039,0.091,0.039,0.221,0.156,0.221c0.116,0,0.26,0.182,0.312,0.195c0.052,0.013,0.117,0.078,0.117,0.117c0,0.04,0.065,0.26,0.065,0.351c0,0.09-0.04,0.454-0.053,0.597s0.104,0.39,0.234,0.52c0.129,0.13,0.246,0.377,0.324,0.429c0.079,0.052,0.13,0.195,0.247,0.182c0.117-0.013,0.195,0.078,0.299,0.26c0.104,0.182,0.208,0.48,0.286,0.506c0.078,0.026,0.208,0.117,0.142,0.182c-0.064,0.064-0.168,0.208-0.051,0.208c0.117,0,0.156-0.065,0.247,0.053c0.09,0.116,0.208,0.181,0.194,0.26c-0.013,0.077,0.104,0.103,0.156,0.116c0.052,0.013,0.169,0.247,0.286,0.143c0.117-0.104-0.155-0.259-0.234-0.326c-0.078-0.064,0-0.207-0.182-0.35c-0.182-0.143-0.156-0.247-0.286-0.351c-0.13-0.104-0.233-0.195-0.104-0.286c0.13-0.091,0.143,0.091,0.195,0.208c0.052,0.116,0.324,0.351,0.441,0.454c0.117,0.104,0.326,0.468,0.39,0.468s0.247,0.208,0.247,0.208s0.103,0.168,0.064,0.22c-0.039,0.052,0.053,0.247,0.144,0.299c0.09,0.052,0.455,0.22,0.507,0.247c0.052,0.027,0.155,0.221,0.299,0.221c0.142,0,0.247,0.014,0.286,0.053c0.039,0.038,0.155,0.194,0.234,0.104c0.078-0.092,0.09-0.131,0.208-0.131c0.117,0,0.168,0.091,0.233,0.156c0.065,0.065,0.247,0.235,0.338,0.222c0.091-0.013,0.208,0.104,0.273,0.064s0.169,0.025,0.22,0.052c0.054,0.026,0.234,0.118,0.222,0.272c-0.013,0.157,0.103,0.195,0.182,0.234c0.078,0.039,0.182,0.13,0.248,0.195c0.064,0.063,0.206,0.077,0.246,0.116c0.039,0.039,0.065,0.117,0.182,0.052c0.116-0.064,0.092-0.181,0.092-0.181s0.129-0.026,0.194,0.026c0.064,0.05,0.104,0.22,0.144,0.246c0.038,0.026,0.115,0.221,0.063,0.362c-0.051,0.145-0.038,0.286-0.091,0.286c-0.052,0-0.116,0.17-0.195,0.209c-0.076,0.039-0.285,0.221-0.272,0.286c0.013,0.063,0.131,0.258,0.104,0.35c-0.025,0.091-0.194,0.195-0.154,0.338c0.038,0.144,0.312,0.183,0.323,0.312c0.014,0.131,0.209,0.417,0.235,0.546c0.025,0.13,0.246,0.272,0.246,0.453c0,0.184,0.312,0.3,0.377,0.312c0.063,0.013,0.182,0.131,0.272,0.17s0.169,0.116,0.233,0.221s0.053,0.261,0.053,0.299c0,0.039-0.039,0.44-0.078,0.674C19.145,23.021,19.235,23.203,19.158,23.269zM10.766,11.188c0.039,0.013,0.117,0.091,0.156,0.091c0.04,0,0.234,0.156,0.286,0.208c0.053,0.052,0.053,0.195-0.013,0.208s-0.104-0.143-0.117-0.208c-0.013-0.065-0.143-0.065-0.208-0.104C10.805,11.344,10.66,11.152,10.766,11.188zM27.51,16.41c-0.144,0.182-0.13,0.272-0.195,0.286c-0.064,0.013,0.065,0.065,0.09,0.194c0.022,0.112-0.065,0.224,0.063,0.327c-0.486,4.619-3.71,8.434-8.016,9.787c-0.007-0.011-0.019-0.025-0.021-0.034c-0.027-0.078-0.027-0.233,0.064-0.285c0.091-0.053,0.312-0.233,0.363-0.272c0.052-0.04,0.13-0.221,0.091-0.247c-0.038-0.026-0.232,0-0.26-0.039c-0.026-0.039-0.026-0.092,0.104-0.182c0.13-0.091,0.195-0.222,0.247-0.26c0.052-0.039,0.155-0.117,0.195-0.209c0.038-0.09-0.041-0.039-0.118-0.039s-0.117-0.142-0.117-0.207s0.195,0.026,0.339,0.052c0.143,0.024,0.077-0.065,0.064-0.142c-0.013-0.078,0.026-0.209,0.105-0.17c0.076,0.039,0.479-0.013,0.531-0.026c0.052-0.013,0.194-0.246,0.246-0.312c0.053-0.065,0.064-0.129,0-0.168c-0.065-0.04-0.143-0.184-0.168-0.221c-0.026-0.041-0.039-0.274-0.013-0.34c0.025-0.063,0,0.377,0.181,0.43c0.183,0.052,0.286,0.078,0.455-0.078c0.169-0.155,0.298-0.26,0.312-0.363c0.013-0.104,0.052-0.209,0.117-0.246c0.065-0.039,0.104,0.103,0.182-0.065c0.078-0.17,0.156-0.157,0.234-0.299c0.077-0.144-0.13-0.325,0.024-0.43c0.157-0.103,0.43-0.233,0.43-0.233s0.078-0.039,0.234-0.078c0.155-0.038,0.324-0.014,0.376-0.09c0.052-0.079,0.104-0.247,0.182-0.338c0.079-0.092,0.169-0.234,0.13-0.299c-0.039-0.065,0.104-0.352,0.091-0.429c-0.013-0.078-0.13-0.261,0.065-0.416s0.402-0.391,0.416-0.454c0.012-0.065,0.169-0.338,0.154-0.469c-0.012-0.129-0.154-0.285-0.245-0.325c-0.092-0.037-0.286-0.05-0.364-0.154s-0.299-0.208-0.377-0.182c-0.077,0.026-0.208,0.051-0.312-0.015c-0.104-0.063-0.272-0.143-0.337-0.194c-0.066-0.051-0.234-0.09-0.312-0.09s-0.065-0.053-0.182,0.103c-0.117,0.157,0,0.209-0.208,0.182c-0.209-0.024,0.025-0.038,0.144-0.194c0.115-0.155-0.014-0.247-0.144-0.207c-0.13,0.039-0.039,0.117-0.247,0.156c-0.207,0.038-0.207-0.092-0.077-0.117c0.13-0.026,0.363-0.143,0.363-0.194c0-0.053-0.026-0.196-0.13-0.196s-0.078-0.129-0.233-0.297c-0.156-0.17-0.351-0.274-0.508-0.249c-0.154,0.026-0.272,0.065-0.35-0.076c-0.078-0.144-0.169-0.17-0.222-0.247c-0.051-0.078-0.182,0-0.221-0.039s-0.039-0.039-0.039-0.039s-0.169,0.039-0.077-0.078c0.09-0.117,0.129-0.338,0.09-0.325c-0.038,0.013-0.104,0.196-0.168,0.183c-0.064-0.013-0.014-0.04-0.144-0.117c-0.13-0.078-0.337-0.013-0.337,0.052c0,0.065-0.065,0.117-0.065,0.117s-0.039-0.038-0.078-0.117c-0.039-0.078-0.221-0.091-0.312-0.013c-0.09,0.078-0.142-0.196-0.207-0.196s-0.194,0.065-0.26,0.184c-0.064,0.116-0.038,0.285-0.092,0.272c-0.05-0.013-0.063-0.233-0.05-0.312c0.012-0.079,0.155-0.208,0.05-0.234c-0.103-0.026-0.259,0.13-0.323,0.143c-0.065,0.013-0.195,0.104-0.273,0.209c-0.077,0.103-0.116,0.168-0.195,0.207c-0.077,0.039-0.193,0-0.167-0.039c0.025-0.039-0.222-0.181-0.261-0.13c-0.04,0.052-0.155,0.091-0.272,0.144c-0.117,0.052-0.222-0.065-0.247-0.117s-0.079-0.064-0.091-0.234c-0.013-0.168,0.027-0.351,0.065-0.454c0.038-0.104-0.195-0.312-0.286-0.3c-0.091,0.015-0.182,0.105-0.272,0.091c-0.092-0.012-0.052-0.038-0.195-0.038c-0.143,0-0.026-0.025,0-0.143c0.025-0.116-0.052-0.273,0.092-0.377c0.142-0.104,0.091-0.351,0-0.363c-0.092-0.014-0.261,0.039-0.377,0.026c-0.116-0.014-0.208,0.091-0.169,0.207c0.039,0.117-0.065,0.195-0.104,0.183c-0.039-0.013-0.09-0.078-0.234,0.026c-0.142,0.103-0.194,0.064-0.337-0.052c-0.143-0.118-0.299-0.234-0.325-0.416c-0.026-0.182-0.04-0.364,0.013-0.468c0.051-0.104,0.051-0.285-0.026-0.312c-0.078-0.025,0.09-0.155,0.181-0.181c0.092-0.026,0.234-0.143,0.26-0.195c0.026-0.052,0.156-0.04,0.298-0.04c0.143,0,0.169,0,0.312,0.078c0.143,0.078,0.169-0.039,0.169-0.078c0-0.039,0.052-0.117,0.208-0.104c0.156,0.013,0.376-0.052,0.416-0.013s0.116,0.195,0.194,0.143c0.079-0.051,0.104-0.143,0.131,0.014c0.025,0.155,0.09,0.39,0.208,0.429c0.116,0.039,0.052,0.194,0.168,0.207c0.115,0.013,0.17-0.246,0.131-0.337c-0.04-0.09-0.118-0.363-0.183-0.428c-0.064-0.065-0.064-0.234,0.064-0.286c0.13-0.052,0.442-0.312,0.532-0.389c0.092-0.079,0.338-0.144,0.261-0.248c-0.078-0.104-0.104-0.168-0.104-0.247s0.078-0.052,0.117,0s0.194-0.078,0.155-0.143c-0.038-0.064-0.026-0.155,0.065-0.143c0.091,0.013,0.116-0.065,0.078-0.117c-0.039-0.052,0.091-0.117,0.182-0.091c0.092,0.026,0.325-0.013,0.364-0.065c0.038-0.052-0.078-0.104-0.078-0.208c0-0.104,0.155-0.195,0.247-0.208c0.091-0.013,0.207,0,0.221-0.039c0.012-0.039,0.143-0.143,0.155-0.052c0.014,0.091,0,0.247,0.104,0.247c0.104,0,0.232-0.117,0.272-0.129c0.038-0.013,0.286-0.065,0.338-0.078c0.052-0.013,0.363-0.039,0.325-0.13c-0.039-0.09-0.078-0.181-0.118-0.22c-0.039-0.039-0.077,0.013-0.13,0.078c-0.051,0.065-0.143,0.065-0.168,0.013c-0.026-0.051,0.012-0.207-0.078-0.156c-0.092,0.052-0.104,0.104-0.157,0.078c-0.052-0.026-0.103-0.117-0.103-0.117s0.129-0.064,0.038-0.182c-0.09-0.117-0.221-0.091-0.35-0.025c-0.13,0.064-0.118,0.051-0.273,0.09s-0.234,0.078-0.234,0.078s0.209-0.129,0.299-0.208c0.091-0.078,0.209-0.117,0.286-0.195c0.078-0.078,0.285,0.039,0.285,0.039s0.105-0.104,0.105-0.039s-0.027,0.234,0.051,0.234c0.079,0,0.299-0.104,0.21-0.131c-0.093-0.026,0.129,0,0.219-0.065c0.092-0.065,0.194-0.065,0.247-0.09c0.052-0.026,0.092-0.143,0.182-0.143c0.092,0,0.13,0.117,0,0.195s-0.143,0.273-0.208,0.325c-0.064,0.052-0.026,0.117,0.078,0.104c0.104-0.013,0.194,0.013,0.286-0.013s0.143,0.026,0.168,0.065c0.026,0.039,0.104-0.039,0.104-0.039s0.169-0.039,0.221,0.026c0.053,0.064,0.092-0.039,0.053-0.104c-0.039-0.064-0.092-0.129-0.13-0.208c-0.039-0.078-0.091-0.104-0.194-0.078c-0.104,0.026-0.13-0.026-0.195-0.064c-0.065-0.04-0.118,0.052-0.065-0.04c0.053-0.09,0.078-0.117,0.117-0.195c0.039-0.078,0.209-0.221,0.039-0.259c-0.169-0.04-0.222-0.065-0.247-0.143c-0.026-0.078-0.221-0.221-0.272-0.221c-0.053,0-0.233,0-0.247-0.065c-0.013-0.065-0.143-0.208-0.208-0.273c-0.064-0.065-0.312-0.351-0.351-0.377c-0.039-0.026-0.091-0.013-0.208,0.143c-0.116,0.157-0.22,0.183-0.312,0.144c-0.091-0.039-0.104-0.026-0.193-0.13c-0.093-0.104,0.09-0.117,0.051-0.182c-0.04-0.064-0.247-0.091-0.377-0.104c-0.13-0.013-0.221-0.156-0.416-0.169c-0.194-0.013-0.428,0.026-0.493,0.026c-0.064,0-0.064,0.091-0.09,0.234c-0.027,0.143,0.09,0.182-0.027,0.208c-0.116,0.026-0.169,0.039-0.052,0.091c0.117,0.052,0.273,0.26,0.273,0.26s0,0.117-0.092,0.182c-0.09,0.065-0.182,0.13-0.233,0.053c-0.053-0.079-0.195-0.065-0.155,0.013c0.038,0.078,0.116,0.117,0.116,0.195c0,0.077,0.117,0.272,0.039,0.337c-0.078,0.065-0.168,0.014-0.233,0.026s-0.131-0.104-0.078-0.13c0.051-0.026-0.014-0.221-0.014-0.221s-0.155,0.221-0.143,0.104c0.014-0.117-0.064-0.13-0.064-0.221c0-0.091-0.079-0.13-0.194-0.104c-0.118,0.026-0.26-0.04-0.482-0.079c-0.22-0.039-0.311-0.064-0.493-0.156c-0.182-0.091-0.247-0.026-0.338-0.013c-0.091,0.013-0.052-0.182-0.169-0.207c-0.116-0.027-0.181,0.025-0.207-0.144c-0.026-0.168,0.039-0.208,0.324-0.39c0.286-0.182,0.247-0.26,0.468-0.286c0.22-0.026,0.325,0.026,0.325-0.039s0.052-0.325,0.052-0.195S16.95,9.109,16.832,9.2c-0.116,0.091-0.052,0.104,0.04,0.104c0.091,0,0.259-0.091,0.259-0.091s0.208-0.091,0.26-0.013c0.053,0.078,0.053,0.156,0.144,0.156s0.285-0.104,0.116-0.195c-0.168-0.091-0.272-0.078-0.376-0.182s-0.078-0.065-0.195-0.039c-0.116,0.026-0.116-0.039-0.156-0.039s-0.104,0.026-0.13-0.026c-0.025-0.052,0.014-0.065,0.145-0.065c0.129,0,0.285,0.039,0.285,0.039s0.155-0.052,0.194-0.065c0.039-0.013,0.247-0.039,0.208-0.155c-0.04-0.117-0.169-0.117-0.208-0.156s0.078-0.09,0.143-0.117c0.065-0.026,0.247,0,0.247,0s0.117,0.013,0.117-0.039S17.897,8.2,17.976,8.239s0,0.156,0.117,0.13c0.116-0.026,0.143,0,0.207,0.039c0.065,0.039-0.013,0.195-0.077,0.221c-0.065,0.025-0.169,0.077-0.026,0.09c0.144,0.014,0.246,0.014,0.246,0.014s0.092-0.091,0.131-0.169c0.038-0.078,0.104-0.026,0.155,0c0.052,0.025,0.247,0.065,0.065,0.117c-0.183,0.052-0.221,0.117-0.26,0.182c-0.038,0.065-0.053,0.104-0.221,0.065c-0.17-0.039-0.26-0.026-0.299,0.039c-0.039,0.064-0.013,0.273,0.053,0.247c0.063-0.026,0.129-0.026,0.207-0.052c0.078-0.026,0.39,0.026,0.467,0.013c0.078-0.013,0.209,0.13,0.248,0.104c0.039-0.026,0.117,0.052,0.194,0.104c0.078,0.052,0.052-0.117,0.194-0.013c0.144,0.104,0.065,0.104,0.144,0.104c0.076,0,0.246,0.013,0.246,0.013s0.014-0.129,0.144-0.104c0.13,0.026,0.245,0.169,0.232,0.064c-0.012-0.103,0.013-0.181-0.09-0.259c-0.104-0.078-0.272-0.13-0.299-0.169c-0.026-0.039-0.052-0.091-0.013-0.117c0.039-0.025,0.221,0.013,0.324,0.079c0.104,0.065,0.195,0.13,0.273,0.078c0.077-0.052,0.17-0.078,0.208-0.117c0.038-0.04,0.13-0.156,0.13-0.156s-0.391-0.051-0.441-0.117c-0.053-0.065-0.235-0.156-0.287-0.156s-0.194,0.091-0.246-0.039s-0.052-0.286-0.105-0.299c-0.05-0.013-0.597-0.091-0.674-0.13c-0.078-0.039-0.39-0.13-0.507-0.195s-0.286-0.156-0.389-0.156c-0.104,0-0.533,0.052-0.611,0.039c-0.078-0.013-0.312,0.026-0.403,0.039c-0.091,0.013,0.117,0.182-0.077,0.221c-0.195,0.039-0.169,0.065-0.13-0.13c0.038-0.195-0.131-0.247-0.299-0.169c-0.169,0.078-0.442,0.13-0.377,0.221c0.065,0.091-0.012,0.157,0.117,0.247c0.13,0.091,0.183,0.117,0.35,0.104c0.17-0.013,0.339,0.025,0.339,0.025s0,0.157-0.064,0.182c-0.065,0.026-0.169,0.026-0.196,0.104c-0.025,0.078-0.155,0.117-0.155,0.078s0.065-0.169-0.026-0.234c-0.09-0.065-0.117-0.078-0.221-0.013c-0.104,0.065-0.116,0.091-0.169-0.013C16.053,8.291,15.897,8.2,15.897,8.2s-0.104-0.129-0.182-0.194c-0.077-0.065-0.22-0.052-0.234,0.013c-0.013,0.064,0.026,0.129,0.078,0.247c0.052,0.117,0.104,0.337,0.013,0.351c-0.091,0.013-0.104,0.026-0.195,0.052c-0.091,0.026-0.13-0.039-0.13-0.143s-0.04-0.195-0.013-0.234c0.026-0.039-0.104,0.027-0.234,0c-0.13-0.025-0.233,0.052-0.104,0.092c0.13,0.039,0.157,0.194,0.039,0.233c-0.117,0.039-0.559,0-0.702,0s-0.35,0.039-0.39-0.039c-0.039-0.078,0.118-0.129,0.208-0.129c0.091,0,0.363,0.012,0.467-0.13c0.104-0.143-0.13-0.169-0.233-0.169c-0.104,0-0.183-0.039-0.299-0.155c-0.118-0.117,0.078-0.195,0.052-0.247c-0.026-0.052-0.156-0.014-0.272-0.014c-0.117,0-0.299-0.09-0.299,0.014c0,0.104,0.143,0.402,0.052,0.337c-0.091-0.064-0.078-0.156-0.143-0.234c-0.065-0.078-0.168-0.065-0.299-0.052c-0.129,0.013-0.35,0.052-0.415,0.039c-0.064-0.013-0.013-0.013-0.156-0.078c-0.142-0.065-0.208-0.052-0.312-0.117C12.091,7.576,12.182,7.551,12,7.538c-0.181-0.013-0.168,0.09-0.35,0.065c-0.182-0.026-0.234,0.013-0.416,0c-0.182-0.013-0.272-0.026-0.299,0.065c-0.025,0.091-0.078,0.247-0.156,0.247c-0.077,0-0.169,0.091,0.078,0.104c0.247,0.013,0.105,0.129,0.325,0.117c0.221-0.013,0.416-0.013,0.468-0.117c0.052-0.104,0.091-0.104,0.117-0.065c0.025,0.039,0.22,0.272,0.22,0.272s0.131,0.104,0.183,0.13c0.051,0.026-0.052,0.143-0.156,0.078c-0.104-0.065-0.299-0.051-0.377-0.116c-0.078-0.065-0.429-0.065-0.52-0.052c-0.09,0.013-0.247-0.039-0.299-0.039c-0.051,0-0.221,0.13-0.221,0.13S10.532,8.252,10.494,8.2c-0.039-0.052-0.104,0.052-0.156,0.065c-0.052,0.013-0.208-0.104-0.364-0.052C9.818,8.265,9.87,8.317,9.649,8.304s-0.272-0.052-0.35-0.039C9.22,8.278,9.22,8.278,9.22,8.278S9.233,8.33,9.143,8.382C9.052,8.434,8.986,8.499,8.921,8.421C8.857,8.343,8.818,8.343,8.779,8.33c-0.04-0.013-0.118-0.078-0.286-0.04C8.324,8.33,8.064,8.239,8.013,8.239c-0.04,0-0.313-0.015-0.491-0.033c2.109-2.292,5.124-3.74,8.478-3.74c2.128,0,4.117,0.589,5.83,1.598c-0.117,0.072-0.319,0.06-0.388,0.023c-0.078-0.043-0.158-0.078-0.475-0.061c-0.317,0.018-0.665,0.122-0.595,0.226c0.072,0.104-0.142,0.165-0.197,0.113c-0.055-0.052-0.309,0.06-0.293,0.165c0.016,0.104-0.039,0.225-0.175,0.199c-0.134-0.027-0.229,0.06-0.237,0.146c-0.007,0.087-0.309,0.147-0.332,0.147c-0.024,0-0.412-0.008-0.27,0.095c0.097,0.069,0.15,0.027,0.27,0.052c0.119,0.026,0.214,0.217,0.277,0.243c0.062,0.026,0.15,0,0.189-0.052c0.04-0.052,0.095-0.234,0.095-0.234s0,0.173,0.097,0.208c0.095,0.035,0.331-0.026,0.395-0.017c0.064,0.008,0.437,0.061,0.538,0.112c0.104,0.052,0.356,0.087,0.428,0.199c0.071,0.113,0.08,0.503,0.119,0.546c0.04,0.043,0.174-0.139,0.205-0.182c0.031-0.044,0.198-0.018,0.254,0.042c0.056,0.061,0.182,0.208,0.175,0.269C21.9,8.365,21.877,8.459,21.83,8.425c-0.048-0.034-0.127-0.025-0.096-0.095c0.032-0.069,0.048-0.217-0.015-0.217c-0.064,0-0.119,0-0.119,0s-0.12-0.035-0.199,0.095s-0.015,0.26,0.04,0.26s0.184,0,0.184,0.034c0,0.035-0.136,0.139-0.128,0.2c0.009,0.061,0.11,0.268,0.144,0.312c0.031,0.043,0.197,0.086,0.244,0.096c0.049,0.008-0.111,0.017-0.07,0.077c0.04,0.061,0.102,0.208,0.189,0.243c0.087,0.035,0.333,0.19,0.363,0.26c0.032,0.069,0.222-0.052,0.262-0.061c0.04-0.008,0.032,0.182,0.143,0.191c0.11,0.008,0.15-0.018,0.245-0.096s0.072-0.182,0.079-0.26c0.009-0.078,0-0.138,0.104-0.113c0.104,0.026,0.158-0.018,0.15-0.104c-0.008-0.087-0.095-0.191,0.07-0.217c0.167-0.026,0.254-0.138,0.357-0.138c0.103,0,0.389,0.043,0.419,0c0.032-0.043,0.167-0.243,0.254-0.251c0.067-0.007,0.224-0.021,0.385-0.042c1.582,1.885,2.561,4.284,2.673,6.905c-0.118,0.159-0.012,0.305,0.021,0.408c0.001,0.03,0.005,0.058,0.005,0.088c0,0.136-0.016,0.269-0.021,0.404C27.512,16.406,27.512,16.408,27.51,16.41zM17.794,12.084c-0.064,0.013-0.169-0.052-0.169-0.143s-0.091,0.169-0.04,0.247c0.053,0.078-0.104,0.169-0.155,0.169s-0.091-0.116-0.078-0.233c0.014-0.117-0.077-0.221-0.221-0.208c-0.143,0.014-0.208,0.13-0.259,0.169c-0.053,0.039-0.053,0.259-0.04,0.312s0.013,0.235-0.116,0.221c-0.118-0.013-0.092-0.233-0.079-0.312c0.014-0.078-0.039-0.273,0.014-0.376c0.053-0.104,0.207-0.143,0.312-0.156s0.324,0.065,0.363,0.052c0.04-0.014,0.222-0.014,0.312,0C17.729,11.837,17.858,12.071,17.794,12.084zM18.027,12.123c0.04,0.026,0.311-0.039,0.364,0.026c0.051,0.065-0.054,0.078-0.183,0.13c-0.129,0.052-0.169,0.039-0.221,0.104s-0.221,0.09-0.299,0.168c-0.078,0.079-0.217,0.125-0.246,0.065c-0.04-0.078,0.013-0.039,0.025-0.078c0.013-0.039,0.245-0.129,0.245-0.129S17.988,12.097,18.027,12.123zM16.988,11.668c-0.038,0.013-0.182-0.026-0.3-0.026c-0.116,0-0.091-0.078-0.143-0.064c-0.051,0.013-0.168,0.039-0.247,0.078c-0.078,0.039-0.208,0.03-0.208-0.04c0-0.104,0.052-0.078,0.221-0.143c0.169-0.065,0.352-0.247,0.429-0.169c0.078,0.078,0.221,0.169,0.312,0.182C17.144,11.5,17.026,11.655,16.988,11.668zM15.659,7.637c-0.079,0.026-0.347,0.139-0.321,0.199c0.01,0.023,0.078,0.069,0.19,0.052c0.113-0.018,0.276-0.035,0.355-0.043c0.078-0.009,0.095-0.139,0.009-0.147C15.805,7.689,15.736,7.611,15.659,7.637zM14.698,7.741c-0.061,0.026-0.243-0.043-0.338,0.018c-0.061,0.038-0.026,0.164,0.07,0.172c0.095,0.009,0.259-0.06,0.276-0.008c0.018,0.052,0.078,0.286,0.234,0.208c0.156-0.078,0.147-0.147,0.19-0.156c0.043-0.009-0.008-0.199-0.078-0.243C14.983,7.689,14.758,7.715,14.698,7.741zM14.385,7.005c0.017,0.044-0.008,0.078,0.113,0.095c0.121,0.018,0.173,0.035,0.243,0.035c0.069,0,0.042-0.113-0.018-0.19c-0.061-0.078-0.043-0.069-0.199-0.113c-0.156-0.043-0.312-0.043-0.416-0.035c-0.104,0.009-0.217-0.017-0.243,0.104c-0.013,0.062,0.07,0.112,0.174,0.112S14.368,6.962,14.385,7.005zM14.611,7.481c0.043,0.095,0.043,0.051,0.165,0.061C14.896,7.551,14.991,7.421,15,7.378c0.009-0.044-0.061-0.13-0.225-0.113c-0.165,0.017-0.667-0.026-0.736,0.034c-0.066,0.058,0,0.233-0.026,0.251c-0.026,0.017,0.009,0.095,0.077,0.078c0.069-0.017,0.104-0.182,0.157-0.182C14.299,7.447,14.568,7.386,14.611,7.481zM12.982,7.126c0.052,0.043,0.183,0.008,0.173-0.035c-0.008-0.043,0.053-0.217-0.051-0.225C13,6.858,12.854,6.962,12.697,7.014c-0.101,0.033-0.078,0.13-0.009,0.13S12.931,7.083,12.982,7.126zM13.72,7.282c-0.087,0.043-0.114,0.069-0.191,0.052c-0.078-0.017-0.078-0.156-0.217-0.13c-0.138,0.026-0.164,0.104-0.207,0.139s-0.139,0.061-0.173,0.043c-0.034-0.017-0.234-0.129-0.234-0.129s-0.416-0.018-0.433-0.07c-0.017-0.052-0.086-0.138-0.277-0.121s-0.52,0.13-0.572,0.13c-0.052,0,0.062,0.104-0.009,0.104c-0.069,0-0.155-0.008-0.181,0.069c-0.018,0.053,0.078,0.052,0.189,0.052c0.112,0,0.295,0,0.347-0.026c0.052-0.026,0.312-0.087,0.303-0.009c-0.009,0.079,0.104,0.199,0.164,0.182c0.061-0.017,0.183-0.13,0.243-0.086c0.061,0.043,0.07,0.146,0.13,0.173c0.061,0.025,0.226,0.025,0.304,0c0.077-0.027,0.294-0.027,0.389-0.009c0.095,0.018,0.373,0.069,0.399,0.018c0.026-0.053,0.104-0.061,0.112-0.113s0.051-0.216,0.051-0.216S13.806,7.239,13.72,7.282zM18.105,16.239c-0.119,0.021-0.091,0.252,0.052,0.21C18.3,16.407,18.223,16.217,18.105,16.239zM19.235,15.929c-0.104-0.026-0.221,0-0.299,0.013c-0.078,0.013-0.299,0.208-0.299,0.208s0.143,0.026,0.233,0.026c0.092,0,0.144,0.051,0.221,0.09c0.078,0.04,0.221-0.052,0.272-0.052c0.053,0,0.118,0.156,0.131-0.013C19.508,16.032,19.339,15.955,19.235,15.929zM15.616,7.507c-0.043-0.104-0.259-0.139-0.304-0.035C15.274,7.563,15.659,7.611,15.616,7.507zM18.093,15.292c0.143-0.026,0.064-0.144-0.053-0.13C17.922,15.175,17.949,15.318,18.093,15.292zM19.82,16.095c-0.119,0.022-0.092,0.253,0.051,0.211C20.015,16.264,19.937,16.074,19.82,16.095zM18.247,15.708c-0.09,0.013-0.285-0.09-0.389-0.182c-0.104-0.091-0.299-0.091-0.377-0.091c-0.077,0-0.39,0.091-0.39,0.091c-0.013,0.13,0.117,0.091,0.273,0.091s0.429-0.026,0.479,0.039c0.053,0.064,0.286,0.168,0.352,0.221c0.064,0.052,0.272,0.065,0.285,0.013S18.338,15.695,18.247,15.708zM16.698,7.412c-0.13-0.009-0.295-0.009-0.399,0c-0.104,0.008-0.182-0.069-0.26-0.113c-0.077-0.043-0.251-0.182-0.354-0.199c-0.104-0.017-0.086-0.017-0.303-0.069c-0.11-0.027-0.294-0.061-0.294-0.086c0-0.026-0.052,0.121,0.043,0.165c0.095,0.043,0.251,0.121,0.363,0.164c0.114,0.043,0.329,0.052,0.399,0.139c0.069,0.086,0.303,0.156,0.303,0.156l0.277,0.026c0,0,0.191-0.043,0.39-0.026c0.199,0.017,0.493,0.043,0.659,0.035c0.163-0.008,0.189-0.061,0.208-0.095c0.016-0.035-0.304-0.104-0.383-0.095C17.271,7.42,16.827,7.42,16.698,7.412zM17.182,9.404c-0.034,0.039,0.157,0.095,0.191,0.043C17.407,9.396,17.271,9.309,17.182,9.404zM17.764,9.585c0.086-0.035,0.043-0.139-0.079-0.104C17.547,9.521,17.676,9.62,17.764,9.585z';		borderWidth: 0;		fillColor: Color black;		scale: 10) element.	element @ RTDraggable.	view add: element.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">icons	&lt;gtExample&gt;		"	self new icons	"	| view |	view := RTView new.	RTSVGPath icons do: [ :icon |		|elem|		elem := (RTSVGPath new		path: (RTSVGPath perform: icon);		borderWidth: 0;		scale: 8;		fillColor: Color random) element.		elem @ RTDraggable.		view add: elem.	].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">rabbit	&lt;gtExample&gt;	&lt;iconSelectorBase64: #rabbitIcon&gt;		| v s elements |	v := RTView new.v @ RTDraggableView.s := RTSVGPath new path: 'M397.49,222.581c-31.734-6.53-70.661,22.749-95.237,63.244c-11.35-13.957-25.565-26.455-42.892-37.536	c-10.193-6.521-16.261-13.093-16.63-18.03c-0.771-10.444,18.708-27.653,32.917-40.218c10.427-9.212,20.284-17.913,27.594-27.234	c13.411-17.141,16.73-38.533,8.684-55.842c-6.17-13.261-18.105-22.246-33.025-25.314c-2.146-6.379-5.666-12.339-10.353-17.351	C259.932,55.08,248.297,50,235.757,50c-14.669,0-37.167,6.974-61.005,40.184c-7.159,9.958-12.422,19.791-17.083,28.475	c-10.427,19.455-17.971,33.512-41.576,43.436C74.409,179.605,50,221.08,50,252.404c0,23,16.287,33.932,26.396,40.729	c12.573,8.449,17.267,11.609,12.154,30.629c-6.505,24.023-3.487,43.117,7.326,56.697C54.836,395.479,64.895,462,117.602,462	c29.807,0,82.062,0,185.07,0c10.998,0,20.988-2.582,29.472-7.058c11.366,4.644,23.034,7.058,35.255,7.058	C422.336,462,462,410.115,462,343.543C462,287.5,434.842,230.25,397.49,222.581z M393.4,242.379	c16.865,3.461,33.16,25.993,41.91,55.422l-4.979,2.213l-10.008-10.847l-13.429,6.035l-9.975-10.854l-13.429,6.019l-9.957-10.838	l-13.429,6.043l-9.958-10.838l-13.412,6.043l-3.688-4.039C352.697,253.167,376.568,238.917,393.4,242.379z M302.672,427.667H200.669	c-20.318,0-21.073-34.267,6.253-31.718c9.64,0.889,23.939,4.928,45.163,13.109c-21.19-10.461-63.302-73.294-6.806-115.506	c-52.204,17.87-55.021,56.361-53.646,73.662c-32.992,0-46.202,33.327-37.636,60.452H117.2c-16.764,0-21.324-29.505,18.374-37.82	c-28.164-34.87-11.718-61.29-11.718-78.491c0-27.351-17.72-39.262-29.187-46.965c-26.286-17.669,5.767-58.616,34.065-70.511	c34.534-14.518,46.554-36.948,58.206-58.65c8.55-15.993,19.162-34.568,34.032-45.087c18.139-12.833,30.679-2.331,25.632,14.124	c-5.247,17.041-24.191,45.574-34.584,59.195c11.735-12.456,35.406-41.575,53.813-47.015c13.471-3.982,24.267,8.357,11.392,24.836	c-5.373,6.865-14.107,14.568-23.328,22.724c-21.827,19.262-46.538,41.098-44.459,68.885c1.207,16.161,10.36,31.508,29.975,42.824	c37.375,21.559,59.941,59.496,62.422,100.217c0.369,5.801,3.554,11.015,8.482,13.865	C333.82,403.408,329.293,427.667,302.672,427.667z M352.73,440.24c-0.973-0.201-1.777-0.553-2.699-0.771	c3.336-4.777,5.851-10.176,7.359-16.127c1.106-4.275,1.475-8.566,1.441-12.824l13.379-5.985l9.99,10.829l13.429-6.001l9.976,10.829	l13.479-6.035l0.469,0.504C404.398,434.104,381.766,446.208,352.73,440.24z M439.1,371.238c-1.979,9.656-5.297,19.212-9.79,28.029	l-5.868-6.32l-13.444,6.02l-10.024-10.863l-13.412,6.035l-9.992-10.848l-13.41,6.02l-9.959-10.83l-4.123,1.844	c-3.891-5.615-8.701-10.83-14.652-15.322c-0.504-4.711-1.309-9.254-2.18-13.78c4.945-1.659,8.986-5.6,10.125-11.064	c1.678-8.198-3.604-16.212-11.801-17.904c-2.381-0.47-4.695-0.235-6.874,0.353c-2.581-6.287-5.432-12.423-8.817-18.257	c2.363-4.501,4.76-8.994,7.477-13.16l10.025,10.805l13.41-6.019l9.926,10.838l13.444-6.043l9.958,10.838l13.445-6.043l9.991,10.854	l13.429-6.035l9.975,10.863l13.445-6.035C442.587,333.149,442.955,352.529,439.1,371.238z M152.707,225.648	c2.381,8.407-3.185,17.401-12.506,20.067c-9.304,2.64-18.776-2.045-21.207-10.469c-2.397-8.433,3.202-17.41,12.506-20.05	C140.821,212.53,150.292,217.216,152.707,225.648z M357.206,343.208c1.693-8.181,9.69-13.479,17.888-11.785	s13.479,9.673,11.803,17.888c-1.711,8.181-9.707,13.479-17.904,11.785C360.794,359.402,355.514,351.389,357.206,343.208z	 M413.518,370.232c-8.197-1.643-13.479-9.689-11.785-17.854c1.693-8.215,9.689-13.496,17.887-11.819	c8.182,1.692,13.479,9.706,11.786,17.904C429.712,366.645,421.699,371.942,413.518,370.232z'.s color: Color black.elements := s elementsOn: (1 to: 40).v addAll: elements.RTGridLayout on: elements.^ v</body><body package="Roassal2-ExampleBrowser-Examples">rotatingIcons	&lt;gtExample&gt;		"	self new rotatingIcons	"	| view randInt rand |	rand := Random new.	randInt := [ :n | (rand next * n) asInteger ].	view := RTView new.	RTSVGPath icons do: [ :icon |		|elem|		elem := (RTSVGPath new		path: (RTSVGPath perform: icon);		borderWidth: 0;		scale: 5;		fillColor: Color random) element.		elem @ RTDraggable.		view add: elem.		elem translateBy: (randInt value: 400) @ (randInt value: 400).		view addAnimation: (RTRotationMove angle: 100 during: (randInt value: 90) + 10 on: elem).	].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">simpleBezier	&lt;gtExample&gt;	&lt;iconSelectorBase64: #simpleBezierIcon&gt;		"	self new simpleBezier	"	| view element |	view := RTView new.	element := (RTSVGPath new		path: 'M600,800 C625,700 725,700 750,800 S875,900 900,800 z';		fillColor: Color blue) element.	view add: element.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">simpleExample	&lt;gtExample&gt;		"	self new simpleExample	"	| view element |	view := RTView new.	element := (RTSVGPath new		path: 'M 100 100 L 300 100 L 200 300 z';		fillColor: Color green) element.	element @ RTDraggable.	view add: element.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">southAmerica	&lt;gtExample&gt;	&lt;iconSelectorBase64: #southAmericaIcon&gt;		"	self new southAmerica	"	| view |	view := RTView new.	RTSVGPath southAmerica do: [ :country |		|elem|		elem := (RTSVGPath new			path: (RTSVGPath perform: country);			fillColor: Color random;			scale: 2;			borderWidth: 0.5) element model: (country asString).		elem @ RTPopup.		view add: elem.	].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">southAmerica2	&lt;gtExample&gt;	&lt;iconSelectorBase64: #southAmericaIcon&gt;		"	self new southAmerica2	"	| view cn |	cn := RTNColorLinearNormalizer inContext: (RTSVGPath southAmerica collect: #size)		lowColor: (Color r:0.3 g:0.8 b:0.3)		highColor: (Color r:0.8 g:0.3 b:0.3).			view := RTView new.	RTSVGPath southAmerica do: [ :country |		|elem|		elem := (RTSVGPath new			path: (RTSVGPath perform: country);			fillColor: (cn rtValue: country size);			scale: 2) element.		elem @ RTDraggable.		view add: elem.	].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">theWorld	&lt;gtExample&gt;	&lt;iconSelectorBase64: #theWorldIcon&gt;		"	self new theWorld	"	| view |	view := RTView new.	RTSVGPath countries do: [ :country |		| elem |		elem := (RTSVGPath new			path: (RTSVGPath perform: country);			fillColor: Color random;			scale: 1) element model: (country asString).		elem @ RTPopup.		view add: elem.	].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">veryBasic 	&lt;gtExample&gt;	&lt;iconSelectorBase64: #veryBasicIcon&gt;		| view element |	view := RTView new.	element := (RTSVGPath new		path: 'M 100 100 L 300 100 L 200 300 z';		fillColor: Color green) element.	element @ RTDraggable.	view add: element.	^ view</body></methods><methods><class-id>Roassal2.RTMenuBuilderExamples</class-id> <category>examples</category><body package="Roassal2-Builder-Menu-Examples">example01	&lt;script: 'self new example01 inspect'&gt;	"	self new example01	"	| v b |	v := RTView new.		b := RTMenuBuilder new view: v.	b menu: 'add values' background: Color red callback: [ 		| es |		es := (RTLabel new color: [ :tt| Color random ]) elementsOn: (1 to: 10).		es do: [ :e | e translateTo: ((500 atRandom @ 500 atRandom) - (250 @ 250)) ].		v addAll: es. 		v canvas signalUpdate ].		b menu: 'remove odd' callback: [ (v elements select: [ :e | e model odd ]) do: #remove. v canvas signalUpdate ].	b menu: 'remove even' callback: [ (v elements select: [ :e | e model even ]) do: #remove. v canvas signalUpdate ].	b menu: 'shuffle' callback: [ 		| tra |		tra := RTSmoothLayoutTranslator new.		tra nbCycles: 0.5.		(v elements do: [ :e | tra translate: e to: ((500 atRandom @ 500 atRandom) - (250 @ 250)) ]) ].			^ v</body><body package="Roassal2-Builder-Menu-Examples">example02	&lt;script: 'self new example02 inspect'&gt;	"	self new example02	"	| v b |	v := RTView new.		b := RTMenuBuilder new view: v.	b menu: 'add' submenu: '10' background: (Color red alpha:0.3) callback: [ 		| es |		es := (RTLabel new color: [ :tt| Color random ]) elementsOn: (1 to: 10).		es do: [ :e | e translateTo: ((500 atRandom @ 500 atRandom) - (250 @ 250)) ].		v addAll: es. 		v canvas signalUpdate ].	b menu: 'add' submenu: '20' background: (Color red alpha:0.3) callback: [ 		| es |		es := (RTLabel new color: [ :tt| Color random ]) elementsOn: (1 to: 20).		es do: [ :e | e translateTo: ((500 atRandom @ 500 atRandom) - (250 @ 250)) ].		v addAll: es. 		v canvas signalUpdate ].		b menu: 'remove' submenu: 'odd' background: (Color red alpha:0.3) callback: [ (v elements select: [ :e | e model odd ]) do: #remove. v canvas signalUpdate ].	b menu: 'remove' submenu: 'even' background: (Color red alpha:0.3) callback: [ (v elements select: [ :e | e model even ]) do: #remove. v canvas signalUpdate ].	b menu: 'shuffle' callback: [ 		| tra |		tra := RTSmoothLayoutTranslator new.		tra nbCycles: 0.5.		(v elements do: [ :e | tra translate: e to: ((500 atRandom @ 500 atRandom) - (250 @ 250)) ]) ].			^ v</body><body package="Roassal2-Builder-Menu-Examples">example03	&lt;script: 'self new example03 inspect'&gt;	"	self new example03	"	| v b menus withBorder withText shape |	v := RTView new.	withBorder := false.	withText := false.	shape := false.		b := RTMenuBuilder new view: v.	menus := Array with: 		'with border'-&gt;[:m | withBorder := m selected ] with:		'with text'-&gt;[:m | withText := m selected] with:		'ellipse'-&gt;[:m | shape := m selected].				b menu: 'add element' callback: [ 		| e t s |		t := withText ifTrue:['Demo'] ifFalse: [ '...' ].		e := RTLabel elementOn: t.				v add: e. 		RTVerticalLineLayout on: v elements.		s := (shape ifTrue: [TREllipseShape] ifFalse: [TRBoxShape])		 new extent: e encompassingRectangle extent.		s color: Color green.		s strokePaint: (withBorder ifTrue: [Color black] ifFalse: [nil]).		TRConstraint move: s onTheCenterOf: e.		v canvas addShape: s.		s pushBack.		v canvas signalUpdate ].	menus := b menu: 'options' subcheckmenus: menus background: Color red.	^ v</body><body package="Roassal2-Builder-Menu-Examples">example04	&lt;script: 'self new example04 inspect'&gt;	"	self new example04	"	| v b menus withBorder withBackground text shape |	v := RTView new.	withBorder := false.	withBackground := true.	text := 'test'.	shape := TREllipseShape.	b := RTMenuBuilder new view: v.		b menu: 'add element' callback: [ 		| e  s |				e := RTLabel elementOn: text.		v add: e. 		RTVerticalLineLayout on: v elements.		s := shape new extent: e encompassingRectangle extent.		s color: (withBackground ifTrue: [Color green] ifFalse: [Color transparent]).		s strokePaint: (withBorder ifTrue: [Color black] ifFalse: [nil]).		TRConstraint move: s onTheCenterOf: e.		v canvas addShape: s.		s pushBack.		v canvas signalUpdate ].	b menu: 'Text' callback: [ text := text,'test'. ].		menus := Array with: 		('Ellipse'-&gt;[:m | shape := TREllipseShape ]) with:		('Box'-&gt;[:m | shape := TRBoxShape]).		menus := b menu: 'Shape' subcheckmenus: menus background: Color red.	RTMenuGroup on: menus.	menus first selected: true.		menus := Array with:  		('with background'-&gt;[:m | withBackground := m selected]) with:		('with border'-&gt;[:m | withBorder := m selected]) .	menus := b menu: 'opions' subcheckmenus: menus background: Color green.	menus first selected: true.	^ v</body><body package="Roassal2-Builder-Menu-Examples">example05	&lt;script: 'self new example05 inspect'&gt;	"	self new example05	"	| v |	v := RTView new.	RTMenuBuilder new		view: v;		menu: 'add' submenu: 'circle' background: Color red 			callback: [ v add: (RTEllipse new size: 40) element @ RTDraggable. v signalUpdate ];		menu: 'add' submenu: 'box' background: Color blue			callback: [ v add: (RTBox new size: 40) element @ RTDraggable. v signalUpdate ];		menu: 'add2' submenu: 'circle' background: Color red 			callback: [ v add: (RTEllipse new size: 40) element @ RTDraggable. v signalUpdate ];		menu: 'add2' submenu: 'box' background: Color blue			callback: [ v add: (RTBox new size: 40) element @ RTDraggable. v signalUpdate ];				menu: 'add3' submenu: 'circle' background: Color red 			callback: [ v add: (RTEllipse new size: 40) element @ RTDraggable. v signalUpdate ];		menu: 'add3' submenu: 'box' background: Color blue			callback: [ v add: (RTBox new size: 40) element @ RTDraggable. v signalUpdate ];		build.		^ v</body><body package="Roassal2-Builder-Menu-Examples">example06	&lt;script: 'self new example06 inspect'&gt;	"	self new example06	"	| v b |	v := RTView new.		b := RTMenuBuilder new view: v.	b menu: 'add' submenu: '10' callback: [ 		| es |		es := (RTLabel new color: [ :tt| Color random ]) elementsOn: (1 to: 10).		es do: [ :e | e translateTo: ((500 atRandom @ 500 atRandom) - (250 @ 250)) ].		v addAll: es. 		v canvas signalUpdate ].	b menu: 'add' submenu: '20' callback: [ 		| es |		es := (RTLabel new color: [ :tt| Color random ]) elementsOn: (1 to: 20).		es do: [ :e | e translateTo: ((500 atRandom @ 500 atRandom) - (250 @ 250)) ].		v addAll: es. 		v canvas signalUpdate ].		b menu: 'remove' submenu: 'odd' background: (Color blue alpha:0.3) callback: [ (v elements select: [ :e | e model odd ]) do: #remove. v canvas signalUpdate ].	b menu: 'remove' submenu: 'even' background: Color red callback: [ (v elements select: [ :e | e model even ]) do: #remove. v canvas signalUpdate ].	b menu: 'shuffle' highlight: Color lightBlue callback: [ 		| tra |		tra := RTSmoothLayoutTranslator new.		tra nbCycles: 0.5.		(v elements do: [ :e | tra translate: e to: ((500 atRandom @ 500 atRandom) - (250 @ 250)) ]) ].			^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>animations</category><body package="Roassal2-ExampleBrowser-Examples">animationTest	&lt;gtExample&gt;	"	self new animationTest	"	| view circle |	view := RTView new.	circle := (RTEllipse new size: 40; color: (Color purple alpha: 0.2)) element.	view add: circle.	view addAnimation: (RTLinearMove to: 100 @ 100 during: 2 on: circle). 	^ view</body><body package="Roassal2-ExampleBrowser-Examples">blinking	&lt;gtExample&gt;	"	self new blinking	"	| view el |	view := RTView new.	el := (RTBox new size: 100) element.	view add: el.	el when: TRMouseClick do: [ :evt | RTBlink on: el in: view ].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">escapingCircle	&lt;gtExample&gt;		| v e |	v := RTView new.	e := (RTEllipse new size: 50; color: (Color blue alpha: 0.4)) element.	v add: e.	e when: TRMouseEnter do: [ :evt | 		| newPos |		newPos := ((300 atRandom - 150) @ (300 atRandom - 150)) + evt element position. 		v addAnimation: (RTAccelerationMove to: newPos  during: 2 on: evt element) ].	^ v</body><body package="Roassal2-ExampleBrowser-Examples">expandingArc	&lt;gtExample&gt;	"	self new expandingArc	"	| v e angle externalRadius |	v := RTView new.	angle := TRVIAnimatedValue new					evaluator: [ :t | 0 interpolateTo: 360 at: t ];					timer: (TRVITimer new cycleLength: 4);					yourself.	externalRadius := TRVIAnimatedValue new					evaluator: [ :t | 50 interpolateTo: 150 at: t ];					timer: (TRVITimer new cycleLength: 4);					yourself.						e := (RTArc new 			innerRadius: 50;			externalRadius: externalRadius;			outerAngle: angle innerAngle: 30) element.	v add: e.	v addAnimation: (RTResetAllShape new trCanvas: v canvas).	angle start.	externalRadius start.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">growingSquare	&lt;gtExample&gt;	" 	self new growingSquare	"	| view el |	view := RTView new.	el := RTBox new size: 20; color: (Color purple alpha: 0.2); element.	el @ RTDraggable.	el translateTo: 100 @ 130.		el when: TRMouseClick do: [ :evt |		| t |		t := evt element trachelShape width + 5.		evt element trachelShape extent: t @ t. evt signalUpdate ].	view add: el.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">newYear2014	&lt;gtExample&gt;	"	self new newYear2014	"	| view txt x y el shape size offset |	txt := 	'	xxxxx  xxxxx     xxx      x	x   x  x   x    x  x     x	   x   x   x   x   x    x x 	  x    x   x       x    xxxxx	 x     x   x       x      x	xxxxx  xxxxx       x      x	'.	view := RTView new.	x := 0.	y := 0.	size := 20.	offset := 100 @ 100.	txt linesDo: [ :line |		y := y + 1.		line do: [ :c |			x := x + 1.			c = $x ifTrue: [ 				shape := (RTEllipse new size: size; color: (Color purple alpha: 0.2)).				el := shape element.				el translateTo: (800 atRandom @ 450 atRandom).				view add: el.				view addAnimation: (RTLinearMove new to: ((x * size) @ (y * size) + offset) during: 0.5 on: el).			]		].	   x := 0.	].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">shrinking	&lt;gtExample&gt;	"	self new shrinking	"	| e v |	v := RTView new.	e := (RTBox new color: Color green; width: 150; height: 120) element.	v add: e.	e when: TRMouseClick do: [ :evt |		| anim |		anim := RTResizeMove new toExtent: (50 @ 30) on: e.		anim after: [ 			| el |			el := RTLabel elementOn: 'hello'.			v add: el.			RTNest new on: e nest: (Array with: el). e trachelShape signalUpdate ].		v addAnimation: anim.	].	e @ RTDraggable.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">zooming	&lt;gtExample&gt;	| v |	v := RTView new.	v add: (RTBox new size: 40) element @ RTHighlightable @ RTDraggable.	v canvas addMenu: 'In' callback: [ RTZoomInMove on: v ].	v canvas addMenu: 'Out' callback: [ RTZoomOutMove on: v ].	v @ RTDraggableView.	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>shapes</category><body package="Roassal2-ExampleBrowser-Examples">circleWaves	&lt;gtExample&gt;	"	self new circleWaves	"	"Inspired from http://haptic-data.com/toxiclibsjs/examples/ColorWaves_raphael.html"		| nbOfCircles  v shape mousePos |	nbOfCircles := 25.		mousePos := 50 @ 50.	v := RTView new.	shape := RTEllipse new sizeElement: [ :el | ((el position - mousePos) r abs / 3) min: 50 ]; color: (Color blue alpha: 0.4).	v addAll: (shape elementsOn: (1 to: nbOfCircles)).	RTGridLayout on: v elements.		v when: TRMouseMove do: [ :evt |  Transcript show: evt positionFromCamera printString; cr . mousePos := evt positionFromCamera. v elements do: #updateShape. v canvas signalUpdate ].		^ v</body><body package="Roassal2-ExampleBrowser-Examples">circles	&lt;gtExample&gt;	"	self new circles	"	| view shape el |	view := RTView new.	shape := RTEllipse new color: (Color purple alpha: 0.2); size: 80.	100 timesRepeat: [ 		el := shape element translateTo: 500 atRandom @ 500 atRandom.		el @ RTDraggable.		view add: el. 		view addAnimation: (RTLinearMove to: 500 atRandom @ 500 atRandom during: 2 on: el).	].		^ view</body><body package="Roassal2-ExampleBrowser-Examples">colorWaves	&lt;gtExample&gt;	"	self new colorWaves	"	"Inspired from http://haptic-data.com/toxiclibsjs/examples/ColorWaves_raphael.html"		| nbOfCircles normalizer v shape mousePos |	nbOfCircles := 25.		mousePos := 50 @ 50.	normalizer := RTMultiLinearColor new. 	v := RTView new.	shape := RTEllipse new 					sizeElement: [ :el | ((el position - mousePos) r abs / 3) min: 50 ]; 					colorElement: [ :el | 						| va|						va := ((((el position - mousePos) r abs / 3) min: 50) / 50).						(normalizer level: va) alpha: 0.4 ].	v addAll: (shape elementsOn: (1 to: nbOfCircles)).	RTGridLayout on: v elements.		v when: TRMouseMove do: [ :evt | mousePos := evt positionFromCamera. v elements do: #updateShape. v canvas signalUpdate ].		^ v</body><body package="Roassal2-ExampleBrowser-Examples">edges	&lt;gtExample&gt;	"	self new edges	"	| view elements |	view := RTView new.	elements := (RTBox new color: (Color purple alpha: 0.2))		elementsOn: Collection withAllSubclasses.	view addAll: elements.	RTEdgeBuilder new		view: view;		objects: Collection withAllSubclasses;		shape: (RTLine new color: (Color blue alpha: 0.2));		connectFrom: #yourself to: #superclass.	RTGridLayout on: view elements.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">edges2	&lt;gtExample&gt;	"	self new edges2	"		| view elements |	view := RTView new.	elements := (RTBox new color: (Color purple alpha: 0.2); size: 40) elementsOn: #(1 2).	elements @ RTDraggable.	view addAll: elements.		RTEdgeBuilder new		view: view;		useAssociation: 1 -&gt; 2.		RTHorizontalLineLayout on: elements.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">growingSquares	&lt;gtExample&gt;	"	self new growingSquares	"		| view shape |	view := RTView new.	shape := RTBox new size: #yourself.	1 to: 100 do: [ :i |		view add: ((shape elementOn: i) translateTo: 20 @ 20; yourself).	].	RTGridLayout on: view elements.		^ view</body><body package="Roassal2-ExampleBrowser-Examples">highlightSquare	&lt;gtExample&gt;	"	self new highlightSquare	"		| view shape el |	view := RTView new.	shape := RTBox new size: #yourself.	1 to: 100 do: [ :i |		el := shape elementOn: i.		el translateTo: 20 @ 20.		el when: TRMouseEnter do: [ :e | e shape color: Color red. e signalUpdate ].		el when: TRMouseLeave do: [ :e | e shape color: Color gray. e signalUpdate ].		el when: TRMouseDragging do: [ :e | e shape translateBy: e step. e signalUpdate ].		view add: el.	].	RTGridLayout on: view elements.		^ view</body><body package="Roassal2-ExampleBrowser-Examples">label2	&lt;gtExample&gt;	"	self new label2	"	| view |	view := RTView new.	1 to: 20 do: [ :i |		view add: (RTLabel elementOn: 'hello world').	]."	RTVerticalLineLayout on: view elements."	RTGridLayout on: view elements."	RTHorizontalLineLayout on: view elements."	^ view</body><body package="Roassal2-ExampleBrowser-Examples">label3	&lt;gtExample&gt;	"	self new label3	"	| view |	view := RTView new.	1 to: 20 do: [ :i |		view add: (RTLabel elementOn: i asString).	]."	RTVerticalLineLayout on: view elements."	RTGridLayout on: view elements."	RTHorizontalLineLayout on: view elements."	^ view</body><body package="Roassal2-ExampleBrowser-Examples">linkedSquares	&lt;gtExample&gt;	"	self new linkedSquares	"	| view shape  fromEl toEl edge |	view := RTView new.	shape := RTBox new size: 90; color: (Color blue alpha: 0.1).	fromEl := shape element.	fromEl translateTo: 20 @ 30.	fromEl @ RTDraggable.	toEl := shape element.	toEl translateTo: 200 @ 80.	toEl @ RTDraggable.		edge := RTLine edgeFrom: fromEl to: toEl.  		view add: fromEl; add: toEl; add: edge.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">manySquares	&lt;gtExample&gt;	"	self new manySquares	"		| view shape el |	view := RTView new.	shape := RTBox new.	1 to: 7000 do: [ :i |		el := shape elementOn: i.		el translateTo: 20 @ 20.		el @ RTHighlightable.		el @ RTDraggable.		view add: el.	].	RTGridLayout new gapSize: 1; on: view elements.		^ view</body><body package="Roassal2-ExampleBrowser-Examples">styledLabel	&lt;gtExample&gt;	"	self new styledLabel	"	| v shape el all cls|	v := RTView new.	cls := TRPlatform current textEmphasisClass.	(shape := RTStyledLabel new) color: Color black.	#(#normal #italic #bold #underlined #struckOut)		do:			[ :each | 			el := shape				emphasis: (cls perform: each);				elementOn: each.			v add: el ].	all := shape		emphasis:			(Array with: cls bold				with: cls italic				with: cls underlined);		elementOn: 'bold + italic + underlined'.	v add: all.	RTVerticalLineLayout on: v elements.	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>labels</category><body package="Roassal2-ExampleBrowser-Examples">label	&lt;gtExample&gt;	"	self new label	"	| v label els |	v := RTView new.	label := RTLabel new height: [ :e | e ].	els := label elementsOn: (1 to: 30).	v addAll: els.	RTGridLayout on: els.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">rotatingLabels	&lt;gtExample&gt;	"	self new rotatingLabels	"	| v shape |	v := RTView new.	shape := RTRotatedLabel new.	shape angleInDegree: [ :cls | cls numberOfMethods negated / 1.5 ].	shape text: [ :cls | '                                                                                ', cls name ].	shape color: (Color black alpha: 0.2).	v addAll: (shape elementsOn: Collection withAllSubclasses).	v canvas color: Color white.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">rotatingLabelsAnimated	&lt;gtExample&gt;	"	self new rotatingLabelsAnimated	"	| v shape timer rotationRatio seconds |	v := RTView new.	seconds := 7.	timer := TRVITimer new cycleLength: seconds.	rotationRatio := 0.2.	shape := RTRotatedLabel new.	shape angleInDegree: [ :cls | 		| valueEnd |		valueEnd := cls numberOfMethods negated / rotationRatio.		TRVIAnimatedValue new					evaluator: [ :t | 0 interpolateTo: valueEnd at: t ];					timer: timer;					yourself. ].	shape text: [ :cls | '                                                                                ', cls name ].	shape color: (Color black alpha: 0.2).	v addAll: (shape elementsOn: Collection withAllSubclasses).	v canvas color: Color white.	v addAnimation: RTResetAllShape new.	timer start.	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>normalizers</category><body package="Roassal2-ExampleBrowser-Examples">normalizer01	&lt;gtExample&gt;	"	self new normalizer01	"	| v es n |	v := RTView new.	n := RTGrayLinearColor new 				command: #asInteger; 				scope: ($a to: $z).					es := RTBox new				size: 40;				color: n;				elementsOn: ($a to: $z).					v addAll: es.	es @ RTPopup.	RTGridLayout on: es.	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>edges</category><body package="Roassal2-ExampleBrowser-Examples">arrowedEdges01	&lt;gtExample&gt;	"	self new arrowedEdges01	"	| v e1 e2 l |	v := RTView new.	e1 := (RTEllipse new size: 10) element.	e2 := (RTEllipse new size: 10) element.	e2 translateBy: 100@0.	e1 @ RTDraggable.	e2 @ RTDraggable.		v add: e1.	v add: e2.	l := RTEdge from: e1 to: e2.	l + (RTLine new color: Color red) + (RTSimpleArrowHead new color: Color red).	v add: l.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">directedEdges01	&lt;gtExample&gt;	"	self new directedEdges01	"	| v classesRoassal classesTrachel shape1 shape2 helpBar1 helpBar2 |	v := RTView new.	v @ RTDraggableView.	shape1 := RTEllipse new		size: #numberOfMethods;		color: (Color gray alpha: 0.3).	shape2 := RTEllipse new		size: #numberOfMethods;		color: (Color pink alpha: 0.3).	classesRoassal := shape1 elementsOn: RTObject withAllSubclasses.	classesTrachel := shape2 elementsOn: TRObject withAllSubclasses.	classesRoassal @ RTPopup.	classesTrachel @ RTPopup.	v addAll: classesRoassal.	v addAll: classesTrachel.	RTEdgeBuilder new		view: v;		fromObjects: RTObject withAllSubclasses;		toObjects: TRObject withAllSubclasses;		shape: (RTDirectedLine new color: (Color blue alpha: 0.5));		connectToAll: #dependentClasses.	RTHorizontalLineLayout new		gapSize: 1;		on: classesRoassal , classesTrachel.	helpBar1 := TRLabelShape new		text: 'Dependencies between Roassal and Trachel'.	helpBar2 := TRLabelShape new		text: 'down links = Roassal depends on Trachel'.	v canvas addFixedShape: helpBar1.	v canvas addFixedShape: helpBar2.	TRConstraint stick: helpBar1 above: helpBar2.	TRConstraint stickAtTheBottomOfTheWindow: helpBar2.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">directedEdges02	&lt;gtExample&gt;	"	self new directedEdges02	"	| v elements1 elements2 objects1 objects2 shape1 shape2 assocs |	objects1 := 1 to: 5.	objects2 := 6 to: 10.	assocs := Array		with: 1 -&gt; 5		with: 2 -&gt; 6		with: 6 -&gt; 10		with: 10 -&gt; 2.	v := RTView new.	v @ RTDraggableView.	shape1 := RTEllipse new		size: 10;		color: (Color gray alpha: 0.3).	shape2 := RTEllipse new		size: 10;		color: (Color pink alpha: 0.3).	elements1 := shape1 elementsOn: objects1.	elements2 := shape2 elementsOn: objects2.	elements1 @ RTPopup.	elements2 @ RTPopup.	v addAll: elements1.	v addAll: elements2.	RTEdgeBuilder new		view: v;		objects: objects1, objects2;		shape: (RTDirectedLine new color: (Color blue alpha: 0.5));		source: assocs connectFrom: #key to: #value.	RTHorizontalLineLayout new		gapSize: 1;		on: elements1 , elements2.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">dynamicEdges01	&lt;gtExample&gt;	"	self new dynamicEdges01	"	| v es |	v := RTView new.	es := ((RTEllipse new size: 30) + RTLabel) elementsOn: (1 to: 20).	v addAll: es.	RTCircleLayout new initialRadius: 150; on: es.	es @ (RTShowEdge new connectTo: [ :value | value - 5 to: value + 5]; shape: (RTLine new color: (Color blue alpha: 0.4))).	^ v</body><body package="Roassal2-ExampleBrowser-Examples">dynamicEdges02	&lt;gtExample&gt;	"	self new dynamicEdges02	"	| v es |	v := RTView new.	es := ((RTEllipse new size: 30) + RTLabel) elementsOn: (1 to: 20).	v addAll: es.	RTCircleLayout new initialRadius: 150; on: es.	es @ (RTShowEdge new 				connectTo: [ :value | value - 5 to: value + 5]; 				shape: [ :el | RTBezierLine new 									centerOfObjects: (el model - 5 to: el model + 5) inView: v; 									color: (Color blue alpha: 0.4) ] ).	^ v</body><body package="Roassal2-ExampleBrowser-Examples">dynamicLabels	&lt;gtExample&gt;	"	self new dynamicLabels	"	| view elements |	view := RTView new.	elements := RTEllipse new size: 30; elementsOn: (1 to: 20).	view addAll: elements.	RTCircleLayout new initialRadius: 150; on: elements.	elements @ (RTShowLabel new highlight: [ :value | value - 5 to: value + 5]; center; yourself).	elements @ (RTShowEdge new 						connectTo: [ :value | value - 5 to: value + 5]; 						shape: (RTLine new color: (Color blue alpha: 0.4))).	^ view</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>layout</category><body package="Roassal2-ExampleBrowser-Examples">cellLayout	"	self new cellLayout	"	&lt;gtExample&gt;	| view substrings |	view := RTView new.	substrings := (RTCellLayout &gt;&gt; #doExecute:) sourceCode substrings.	view addAll: (RTLabel elementsOn: substrings).	RTCellLayout on: view elements.	view @ RTDraggableView.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">cellLayout2	&lt;gtExample&gt;	"	self new cellLayout2	"	| view substrings |	view := RTView new.	substrings := #('doExecute:' 'elements' '|').	view addAll: (RTLabel elementsOn: substrings).		RTCellLayout new lineItemsCount: 3; on: view elements.	view @ RTDraggableView.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">cellLayout3	&lt;gtExample&gt;	"	self new cellLayout3	"	| view els |	view := RTView new.	els := RTEllipse new size: #yourself; elementsOn: ((1 to: 20) collect: [ :v | 50 atRandom ]).	view addAll: els.		RTCellLayout new lineItemsCount: 5; on: view elements.	view @ RTDraggableView.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">circleLayout	&lt;gtExample&gt;	"	self new circleLayout	"	| v els |	v := RTView new.	els := RTBox new		size: 10;		elementsOn: (1 to: 100).	v addAll: els.	els @ RTDraggable.	RTEdgeBuilder new		view: v;		objects: (1 to: 100);		shape:			(RTLine new				color: (Color blue alpha: 0.4);				withVerticallAttachPoint;				yourself);		connectFrom: [ :value | value // 2 ] to: #yourself.	RTCircleLayout new		initialRadius: 260;		on: v elements.	v @ RTDraggableView.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">classHierarchy	&lt;gtExample&gt;	"	self new classHierarchy	"	| view |	view := RTView new.	view		addAll:			(RTBox elementsOn: Collection withAllSubclasses) @ RTDraggable.	RTEdgeBuilder new		view: view;		objects: Collection withAllSubclasses;		connectFrom: #superclass to: #yourself.	RTTreeLayout on: view elements edges: view edges.	view @ RTDraggableView.	view edges do: [ :e | e trachelShape pushBack ].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">clusterLayout	&lt;gtExample&gt;	"	self new clusterLayout	"	| v |	v := RTView new.	v		addAll:			((RTEllipse new				color: Color purple;				size: 10) elementsOn: Collection withAllSubclasses) @ RTDraggable.	RTEdgeBuilder new		view: v;		objects: Collection withAllSubclasses;		connectFrom: #superclass to: #yourself.	RTClusterLayout on: v elements edges: v edges.	v edges do: [ :e | e trachelShape pushBack ].	^ v</body><body package="Roassal2-ExampleBrowser-Examples">forceBasedLayout	&lt;gtExample&gt;	"	self new forceBasedLayout	"	| v classes edges |	v := RTView new.	classes := (RTEllipse new		color: (Color purple alpha: 0.3);		size: 10) elementsOn: Collection withAllSubclasses.	(classes elementFromModel: Collection) trachelShape color: Color red.	classes @ RTDraggable.	v addAll: classes.	edges := RTEdgeBuilder new		view: v;		objects: Collection withAllSubclasses;		shape: (RTLine new color: (Color purple alpha: 0.2));		connectFrom: #superclass to: #yourself.	edges do: [ :e | e trachelShape pushBack ].	"RTForceBasedLayout on: v elements edges: v edges."	v addAnimation: (RTForceLayoutStepping new view: v).	v @ RTDraggableView.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">numbers	&lt;gtExample&gt;	"self new numbers"	| view elements |	view := RTView new.	elements := RTBox elementsOn: (1 to: 100).	elements @ RTDraggable.	view addAll: elements.	RTEdgeBuilder new		view: view;		objects: (1 to: 100);		shape: (RTLine new color: Color purple);		connectFrom: [ :v | v // 2 ] to: #yourself.	RTTreeLayout on: view elements edges: view edges.	view edges do: [ :e | e trachelShape pushBack ].	view @ RTDraggableView.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">smoothLayout	&lt;gtExample&gt;	"	self new smoothLayout	"	| v translator |	translator := RTSmoothLayoutTranslator new.	v := RTView new.	v canvas		addMenu: 'grid'		callback:			[ 			RTGridLayout new				translator: translator;				on: v elements.			v canvas signalUpdate ].	v canvas		addMenu: 'hori'		callback:			[ 			RTHorizontalLineLayout new				translator: translator;				on: v elements.			v canvas signalUpdate ].	v canvas		addMenu: 'treeV'		callback:			[ 			RTTreeLayout new				translator: translator;				on: v elements edges: v edges.			v canvas signalUpdate ].	v canvas		addMenu: 'treeH'		callback:			[ 			RTHorizontalTreeLayout new				translator: translator;				on: v elements edges: v edges.			v canvas signalUpdate ].	v canvas		addMenu: 'cluster'		callback:			[ 			RTClusterLayout new				translator: translator;				on: v elements edges: v edges.			v canvas signalUpdate ].	v canvas		addMenu: 'circle'		callback:			[ 			RTCircleLayout new				translator: translator;				scaleBy: 0.8;				on: v elements.			v canvas signalUpdate ].	v canvas		addMenu: 'radial'		callback:			[ 			RTRadialTreeLayout new				translator: translator;				on: v elements.			v canvas signalUpdate ].	v addAll: (RTBox new elementsOn: (1 to: 100)).	RTEdgeBuilder new		view: v;		objects: (1 to: 100);		connectFrom: [ :value | value // 2 ] to: #yourself.	RTTreeLayout new on: v elements edges: v edges.	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>popup</category><body package="Roassal2-ExampleBrowser-Examples">popup1	&lt;gtExample&gt;	"	self new popup1	"	| v els |	v := RTView new.	v @ RTDraggableView.	els := (RTBox new size: 20) elementsOn: (1 to: 100).	els @ (RTPopup new textElement: [ :e | e model printString ]).	els @ RTDraggable.	els when: TRMouseClick do: [ :evt | evt element inspect ].	v addAll: els.	RTGridLayout on: els.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">popupView1	&lt;gtExample&gt;	&lt;noTest&gt;		"	self new popupView1	"	| v els |	v := RTView new.	v @ RTDraggableView.	els := (RTBox new size: 20) elementsOn: (1 to: 100).		els @ (RTPopup new group: [ :group :el |		el model timesRepeat: [			group add: (RTBox new size: 10; color: (Color purple alpha: 0.5)) element ].		RTGridLayout on: group. ]).				v addAll: els.	els @ RTDraggable @ RTLabeled.	RTGridLayout on: els.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">popupView2	&lt;gtExample&gt;	&lt;noTest&gt;	"	self new popupView2	"	| v els background |	v := RTView new.	v @ RTDraggableView.	els := (RTBox new size: 20) elementsOn: (1 to: 100).		els @ (RTPopup new group: [ :group :el |		el model timesRepeat: [			group add: (RTBox new size: 10; color: (Color purple alpha: 0.5)) element ].		RTGridLayout on: group.				background := (RTBox new color: (Color white alpha: 0.5)) element.			RTNest new centerOn: background elements: group.		group add: background.			 ]).		v addAll: els.	els @ RTDraggable@RTLabeled.	RTGridLayout on: els.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">popupWithLegend	&lt;gtExample&gt;	"	self new popupWithLegend	"	| view |	view := RTMondrian new.	view interaction noInteractions.	view interaction popup group: [ :group :el |				| background elements cls legend1 legend2 | 		elements := RTGroup new.		background := (RTBox new color: (Color green alpha: 0.8)) element.				el model timesRepeat: [ 				cls := RTEllipse.				50 atRandom &gt; 25					ifTrue: [ cls := RTBox ].				elements add: (cls new size: 10; color: (Color purple alpha: 0.5)) element				].		RTGridLayout on: elements.						"Legend Good"		legend1 := RTGroup new.		legend1 add: (RTBox new size: 10; color: (Color purple alpha: 0.5)) element.		legend1 add: (RTLabel elementOn: '= Good').		RTHorizontalLineLayout on: legend1.				"Legend Bad"		legend2 := RTGroup new.		legend2 add: (RTEllipse new size: 10; color: (Color purple alpha: 0.5)) element.		legend2 add: (RTLabel elementOn: '= Bad').		RTHorizontalLineLayout on: legend2.				RTVerticalLineLayout new gapSize: 0; on: (Array with: legend1 with: legend2 with: elements). 					RTNest new centerOn: background elements: (Array with: legend1 with: legend2 with: elements).				group add: background.		group addAll: legend1.		group addAll: legend2.		group addAll: elements ].	view shape rectangle size: #yourself.	view nodes: (1 to:50).	view layout grid.	^ view</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>groups</category><body package="Roassal2-ExampleBrowser-Examples">group1	&lt;gtExample&gt;	&lt;noTest&gt;	"self new group1"	| view group1 group2 host1 host2 edgesGroup1 edgesGroup2 |	view := RTView new.	group1 := (RTBox new color: (Color blue alpha: 0.3)) elementsOn: (1 to: 10).	group2 := (RTBox new color: (Color blue alpha: 0.3)) elementsOn: (1 to: 10).		host1 := (RTBox new color: (Color green alpha: 0.3)) element.	host2 := (RTBox new color: (Color green alpha: 0.3)) element.		view addAll: group1; addAll: group2; add: host1; add: host2.		edgesGroup1 := RTEdge 		buildEdgesFromObjects: (1 to: 10) 		from: [ :v | v //2 ] to: #yourself inView: view scope: group1.	edgesGroup2 := RTEdge 		buildEdgesFromObjects: (1 to: 10) 		from: [ :v | v //2 ] to: #yourself inView: view scope: group2.		RTTreeLayout on: group1 edges: edgesGroup1.	RTTreeLayout on: group2 edges: edgesGroup2.		RTNest new on: host1 nest: group1.	RTNest new on: host2 nest: group2.		RTHorizontalLineLayout on: (Array with: host1 with: host2).		host1 @ RTDraggable.	host2 @ RTDraggable.		view canvas addMenu: 'In' callback: [ RTZoomInMove on: view ].	view canvas addMenu: 'Out' callback: [ RTZoomOutMove on: view ].	view @ RTDraggableView.		^ view</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>nesting</category><body package="Roassal2-ExampleBrowser-Examples">elementWithFontsZooming	&lt;gtExample&gt;	"	self new elementWithFontsZooming	"	| view firstGroup secondGroup bothGroups mainElement originalExtent mainWithNested |	view := RTView new.	"element creation"	mainElement := RTBox new color: (Color blue alpha: 0.3); elementOn: nil.	firstGroup := (RTLabel new) elementsOn: #('Smalltalk' 'World').	secondGroup := (RTBox new size: #yourself) elementsOn: #(30 40).	bothGroups := RTGroup with: firstGroup with: secondGroup.	"layouting"	RTHorizontalLineLayout new gapSize: 1; alignLeft; on: firstGroup; on: secondGroup.	RTVerticalLineLayout new gapSize: 1; alignLeft; on: bothGroups.	RTNest new padding: 1; on: mainElement nest: firstGroup, secondGroup.	mainWithNested := RTGroup with: mainElement with: bothGroups.	mainWithNested @ RTDraggable.	view add: mainWithNested.	"define menu and their actions"	originalExtent := mainElement extent.	view addMenu: 'Smaller' 		callback: [ view addAnimation: (RTResizeMove new 													toExtent: mainElement extent * 0.6 													during: 0.3 on: mainElement) ].	view addMenu: 'Bigger' 		callback: [ view addAnimation: (RTResizeMove new 													toExtent: mainElement extent * (1 / 0.6) 													during: 0.3 on: mainElement) ].	view addMenu: 'Original' callback: [ mainElement extent: originalExtent. view signalUpdate ].	view addMenu: 'Half' callback: [ mainElement extent: originalExtent / 2. view signalUpdate ].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">elementZooming	&lt;gtExample&gt;	"	self new elementZooming	"	| view firstGroup secondGroup bothGroups mainElement originalExtent mainWithNested |	view := RTView new.	"element creation"	mainElement := RTBox new color: (Color blue alpha: 0.3); elementOn: nil.	firstGroup := (RTBox new size: #yourself) elementsOn: #(20 50).	secondGroup := (RTBox new size: #yourself) elementsOn: #(30 40).	bothGroups := RTGroup with: firstGroup with: secondGroup.	"layouting"	RTHorizontalLineLayout new gapSize: 1; alignLeft; on: firstGroup; on: secondGroup.	RTVerticalLineLayout new gapSize: 1; alignLeft; on: bothGroups.	RTNest new padding: 1; on: mainElement nest: firstGroup, secondGroup.	mainWithNested := RTGroup with: mainElement with: bothGroups.	mainWithNested @ RTDraggable.	view add: mainWithNested.	"define menu and their actions"	originalExtent := mainElement extent.	view addMenu: 'Smaller' 		callback: [ view addAnimation: (RTResizeMove new 													toExtent: mainElement extent * 0.6 													during: 0.3 on: mainElement) ].	view addMenu: 'Bigger' 		callback: [ view addAnimation: (RTResizeMove new 													toExtent: mainElement extent * (1 / 0.6) 													during: 0.3 on: mainElement) ].	view addMenu: 'Original' callback: [ mainElement extent: originalExtent. view signalUpdate ].	view addMenu: 'Half' callback: [ mainElement extent: originalExtent / 2. view signalUpdate ].	^ view</body><body package="Roassal2-ExampleBrowser-Examples">multipleNesting	&lt;gtExample&gt;	&lt;noTest&gt;	" 	self new multipleNesting	"	| view inner host edges outter trachelCanvas resizable |	outter := OrderedCollection new.	view := RTView new.	view @ RTDraggableView.		1 to: 200 by: 10 do: [ :i |		inner := (RTBox new color: (Color purple alpha: 0.2)) elementsOn: (1 to: i).		host := (RTBox new color: (Color yellow alpha: 0.1)) element.		outter add: host.		view add: host.		view addAll: inner.		edges := 			RTEdge 				buildEdgesFromObjects: (1 to: 100) 				from: [ :v | v // 2 ] 				to: #yourself 				inView: view				scope: inner.		RTGridLayout new on: inner.		RTNest new					on: host nest: inner.	].	RTGridLayout on: outter.		trachelCanvas := view setUpCanvas.	TRFocusCenter on: trachelCanvas.		"Zoom a specific element"	resizable := outter at: (Random new nextInt: outter size).	view addMenu: 'Smaller' 		callback: [ view addAnimation: (RTResizeMove new 													toExtent: resizable extent * 0.6 													during: 0.3 on: resizable) ].	view addMenu: 'Bigger' 		callback: [ view addAnimation: (RTResizeMove new 													toExtent: resizable extent * (1 / 0.6) 													during: 0.3 on: resizable) ].		^ view</body><body package="Roassal2-ExampleBrowser-Examples">nestedHierarchy	&lt;gtExample&gt;	" 	self new nestedHierarchy	"	| view inner host |	view := RTView new.	inner := (RTBox new color: (Color purple alpha: 0.2))		elementsOn: (1 to: 100).	host := (RTBox new color: (Color yellow alpha: 0.1)) element.	inner		do:			[ :i | i when: TRMouseClick do: [ :event | event model inspect ] ].	view add: host.	view addAll: inner.	RTEdgeBuilder new		view: view;		objects: (1 to: 100);		connectFrom: [ :v | v // 2 ] to: #yourself.	RTTreeLayout new on: inner edges: view edges.	RTNest new on: host nest: inner.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">nesting	&lt;gtExample&gt;	"	self new nesting	"	| view el shape inner |	view := RTView new.	el := (RTBox new width: 80; height: 40; color: (Color purple alpha: 0.3)) element.		shape := RTBox new color: (Color purple alpha: 0.3).	inner := shape elementsOn: (1 to: 20).	view add: el.	view addAll: inner.	el @ RTDraggable.		RTNest		new 		layout: RTGridLayout new;		on: el nest: inner.			el translateTo: 100 @ 50.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">nesting2	&lt;gtExample&gt;	"	self new nesting2	"	| view el shape  innerElements |	view := RTView new.	el := (RTBox new width: 80; height: 40; color: (Color purple alpha: 0.3)) element.	el translateTo: 200 @ 150.	shape := RTBox new color: (Color red alpha: 0.3); size: #yourself.		innerElements := (1 to: 30) collect: [ :i | shape elementOn: i ].	view addAll: innerElements.			RTNest		new 		layout: RTGridLayout new;		on: el nest: innerElements.			view add: el.		^ view</body><body package="Roassal2-ExampleBrowser-Examples">nesting3	&lt;gtExample&gt;	"	self new nesting3	"	| view el shape inner |	view := RTView new.	el := (RTBox new width: 80; height: 40; color: (Color purple alpha: 0.3)) element.		shape := RTBox new color: (Color purple alpha: 0.3).	inner := (shape elementOn: #inner).	view add: el.	view add: inner.	RTNest		new 		layout: RTGridLayout new;		on: el nest: (Array with: inner).			el translateTo: 100 @ 50.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">nesting4	&lt;gtExample&gt;	"	self new nesting4	"	| v es |	v := RTView new.	v @ RTDraggableView.	es := RTBox new elementsOn: RTShape withAllSubclasses.	v addAll: es.	es @ RTPopup.	RTNest new		view: v;		for: es add: [ :group :model |			group addAll: ((RTBox new color: (Color blue alpha: 0.2)) elementsOn: model methods).						RTNest new 				view: v;				for: group add: [ :g2 :m2 | g2 addAll: ((RTBox new color: Color yellow) elementsOn: #(1 2 3)).				RTHorizontalLineLayout on: g2. ].				 			RTHorizontalFlowLayout on: group ].	RTHorizontalFlowLayout on: es.	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>compound elements</category><body package="Roassal2-ExampleBrowser-Examples">compound01	&lt;gtExample&gt;	| c es v |	c := (RTBox new color: Color red trans) compoundElement.	c @ RTDraggable.	c @ RTPopup.	es := (RTBox new color: Color white) compoundElementsOn: (1 to: 10).	c addAll: es @ RTPopup.		es do: [ :ee | 		| g |		g := RTSlider new.		g build.		ee addAll: g view elements.	].		c layout grid.		v := RTView new.	v add: c.	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>fun</category><body package="Roassal2-ExampleBrowser-Examples">dragonCurve	&lt;gtExample&gt;	"	self new dragonCurve	"	| v curveDragon calc addLine center 	color   lines |	v := RTView new.	v @ RTDraggableView.	center := 0@0.	lines := 0.	"RTNColorLinearNormalizer future work"	color:= [ [Color random] ].	addLine := [ :p1 :p2 | | e1 e2 |		e1 := RTBox elementOn: p1.		e2 := RTBox elementOn: p2.		e1 extent: 1@1.		e2 extent: 1@1.		e1 translateTo: p1.		e2 translateTo: p2.		v add: e1; add: e2.		v add: (RTLine new color: color value; edgeFrom: e1 to: e2)		 ].	curveDragon := nil.	curveDragon := [ :p1 :p2 :level :order |		level = 0 ifTrue: [ addLine value: (center+p1) value: (center+p2). ]		ifFalse: [ | cx cy px py l |			cx := (p1 x + p2 x)/2.			cy := (p1 y + p2 y)/2.			px := (cx - (p2 y - cy)).			py := (cy + (p2 x - cx)).			l := level -1.			order ifTrue: [ 				curveDragon value: p1 value: px@py value: l value: order.				curveDragon value: p2 value: px@py value: l value: order not ]			ifFalse: [				curveDragon value: p2 value: px@py value: l value: order not.				curveDragon value: p1 value: px@py value: l value: order				] ] ].	calc := [ :extent :level| | p1 p2 |		p1 := (extent x negated / 5)@(extent y negated / 4).		p2 := (extent x / 3)@0.		center := extent / 2.				curveDragon value: p1 value: p2 value: level value: true ].		calc value: 800@800 value: 13.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">worm	&lt;gtExample&gt;	"	self new worm	"	| v s e last lineLength callback nbOfElements head |	v := RTView new.	s := RTEllipse new 					size: [ :m | m * 10 ]; 					color: (Color blue alpha: 0.4).	nbOfElements := 10.	last := nil.	1 to: nbOfElements do: [ :i | 		e := (s elementOn: i).		v add: e.				last ifNotNil: [ v add: (RTLine new edgeFrom: e to: last) ].		last := e.			].	lineLength := 40.	callback := TRTranslationCallback 		block: [ :shape :step | 				| diff alpha dist |				(shape element outgoingEdges collect: #to) do: [ :el | 					diff := shape position - el position.					alpha := diff theta.					dist := ((diff x * diff x) + (diff y * diff y)) sqrt. 					el translateBy: (alpha cos * (dist - lineLength)) @ (alpha sin * (dist - lineLength)) ] ].	 	v elements do: [ :el | el trachelShape addCallback: callback ].	head := v elements last.	v when: TRMouseMove do: [ :evt | 		head translateBy: (evt positionFromCamera - head position) / 10.		v canvas signalUpdate ].	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>beziers</category><body package="Roassal2-ExampleBrowser-Examples">beziers01	&lt;gtExample&gt;		| v shape  edge els |	v := RTView new.	shape := RTEllipse new size: 10; color: (Color purple alpha: 0.3).	els := (shape elementsOn: (1 to: 6)) @ RTDraggable.	v addAll: els .	RTHorizontalLineLayout on: v elements.	edge := (RTBezierLine new controllingElements: v elements) edgeFrom: els first to: els last.	v add: edge.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">beziers02	&lt;gtExample&gt;		"	self new beziers02	"	| v classes hierarchicalLinks depLinks dep |	v := RTView new.	classes := (RTEllipse new		color: Color purple;		size: 10) elementsOn: Collection withAllSubclasses.	classes @ RTDraggable @ RTPopup.	classes		when: TRMouseEnter		do: [ :evt | RTBlink outgoingEdgesOf: evt element ].	v addAll: classes.	hierarchicalLinks := RTEdgeBuilder new		view: v;		objects: Collection withAllSubclasses;		shape: (RTLine new color: (Color white alpha: 0.2));		connectFrom: #superclass to: #yourself.	"A nice layout"	RTClusterLayout on: v elements edges: v edges.	"Computing dependencies"	dep := OrderedCollection new.	Collection withAllSubclasses		do:			[ :cls | 			cls rtmethods				do:					[ :cm | 					((cm literals						select: [ :l | l class == Association and: [ l value notNil ] ])						collect: #value)						do:							[ :depClass | 							cls ~~ depClass								ifTrue: [ dep add: cls -&gt; depClass ] ] ] ].	"Add dependency edges"	depLinks := RTEdgeBuilder new		view: v;		objects: dep;		shape:			(RTBezierLine new				color: (Color blue alpha: 0.2);				follow: #superclass);		connectFrom: #key to: #value.	"Move the edges at the back"	depLinks do: [ :e | e trachelShape pushBack ].	hierarchicalLinks do: [ :e | e trachelShape pushBack ].	"Open the view"	^ v</body><body package="Roassal2-ExampleBrowser-Examples">beziersWithArrow	&lt;gtExample&gt;	"self new beziersWithArrow"	| v shape  edge els |	v := RTView new.	shape := RTEllipse new size: 10; color: (Color purple alpha: 0.3).	els := (shape elementsOn: (1 to: 6)) @ RTDraggable.	v addAll: els .	RTHorizontalLineLayout on: v elements.	edge := (RTEdge from: els first to: els last) + ((RTBezierLine new controllingElements: v elements) + (RTEmptyArrowHead new)).	v add: edge.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">softviz01	&lt;gtExample&gt;	&lt;noTest&gt;	"	self new softviz01	Circle = classes, size = number of methods; gray links = inheritance; blue links = dependencies; layout = force based layout on the inheritance links	"	| v inheritanceEdges shape helpBar1 helpBar2 elements |	v := RTView new.	shape := RTEllipse new		color: (Color red alpha: 0.4);		size: [ :e | e numberOfMethods / 5 max: 5 ].	elements := shape elementsOn: Collection withAllSubclasses.	elements @ RTPopup.	v addAll: elements.	"Defining edges from inheritance"	inheritanceEdges := RTEdgeBuilder new		view: v;		objects: Collection withAllSubclasses;		connectFrom: #superclass to: #yourself.	"Layout the whole thing"	RTOptimizedForceBasedLayout new		userDefinedEdges: inheritanceEdges;		on: v elements.	"Defining edges from dependencies"	Collection withAllSubclasses		do:			[ :cls | 			cls rtmethods				do:					[ :cm | 					((cm literals						select: [ :l | l class == Association and: [ l value notNil ] ])						collect: #value)						do:							[ :depClass | 							(cls ~~ depClass								and: [ Collection withAllSubclasses includes: depClass ])								ifTrue:									[ 									RTEdgeBuilder new										view: v;										shape:											(RTBezierLine new												follow: #superclass;												color: (Color blue alpha: 0.1));										useAssociations: (Array with: cls -&gt; depClass) ] ] ] ].	helpBar1 := TRLabelShape new		text:			'Circle = classes, size = number of methods; gray links = inheritance;'.	helpBar2 := TRLabelShape new		text:			'blue links = dependencies; layout = force based layout on the inheritance links'.	v canvas addFixedShape: helpBar1.	v canvas addFixedShape: helpBar2.	TRConstraint stick: helpBar1 above: helpBar2.	TRConstraint stickAtTheBottomOfTheWindow: helpBar2.	"Open the view"	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>interaction</category><body package="Roassal2-ExampleBrowser-Examples">edition	&lt;gtExample&gt;	"	self new edition	"		| view selected statusBar |	view := RTView new.	selected := nil.	statusBar := nil.		view when: TRMouseClick do: [ :evt |		selected == #line ifTrue: [ 			| ex1 ex2 line |			ex1 := (RTBox new size: 10; color: (Color purple alpha: 0.2)) element. 			ex2 := (RTBox new size: 10; color: (Color purple alpha: 0.2)) element.			ex1 translateTo: evt position.			ex2 translateTo: evt position + (100 @ 60).			ex1 @ RTHighlightable.			ex2 @ RTHighlightable.			ex1 @ RTDraggable. 			ex2 @ RTDraggable.			line := (RTLine new "width: 3;" color: (Color blue alpha: 0.2)) edgeFrom: ex1 to: ex2.			view addAll: (Array with: ex1 with: ex2 with: line ).			line trachelShape pushBack.		].		selected == #circle ifTrue: [ 			| ellipse |			ellipse := (RTEllipse new size: 40; color: (Color yellow alpha: 0.2)) element. 			ellipse translateTo: evt position.					ellipse @ RTDraggable. 			view add: ellipse.				].				selected == #rectangle ifTrue: [ 			| box |			box := (RTBox new width: 40; height: 30; color: (Color blue alpha: 0.2)) element. 			box translateTo: evt position.					box @ RTDraggable. 			view add: box.				].		view canvas signalUpdate.	].	view @ RTDraggableView.	view addMenu: '+ line' callback: [ selected := #line. statusBar text: 'line' ].	view addMenu: '+ circle' callback: [ selected := #circle. statusBar text: 'circle' ].	view addMenu: '+ rectangle' callback: [ selected := #rectangle. statusBar text: 'rectangle' ].	view addMenu: 'Info' callback: [ TRPlatform current inform: 'Vectorial editing is hyper cool' ].	statusBar := TRLabelShape new.	statusBar text: 'Please, select an option'.	view canvas addShape: statusBar.	statusBar setAsFixed.	TRConstraint stickAtTheBottomOfTheWindow: statusBar.	view canvas color: Color white.	^ view</body><body package="Roassal2-ExampleBrowser-Examples">highlight	&lt;gtExample&gt;	" self new highlight "			| v es |	v := RTView new.	es := ((RTBox new size: 30)" + RTLabel") elementsOn: (1 to: 16).	es @ (RTHighlightable highlight: [ :vv | | arr |		arr := OrderedCollection new.		arr add: vv - 1.		arr add: vv.		arr add: vv + 1.		arr add: vv - 4.		arr add: vv + 4.		arr]).	RTGridLayout on: es.	v addAll: es.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">hoverZoom	&lt;gtExample&gt;	"	self new hoverZoom	"			| v es |	v := RTView new.	es := RTBox new size: #yourself; elementsOn: (10 to: 60 by: 5).	v addAll: es.	es do: [ :eachElement | | nested |		nested := RTBox new color: (Color green alpha: 0.5); 						size: #yourself; elementsOn: (10 to: 25 by: 5).		nested @ RTHighlightable.		v add: nested.		RTNest new 			layout: RTGridLayout new;			on: eachElement nest: nested ].	es @ RTMouseHoverZoom.	RTGridLayout on: es.	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>attachpoints</category><body package="Roassal2-ExampleBrowser-Examples">attachPoint01	&lt;gtExample&gt;	| v e1 e2 l |	v := RTView new.	e1 := (RTEllipse new size: 30; color: (Color blue alpha: 0.3)) element.	e2 := (RTEllipse new size: 30; color: (Color yellow alpha: 0.3)) element.	l := (RTLine new attachPoint: RTShorterDistanceAttachPoint new) edgeFrom: e1 to: e2.	 	e1 @ RTDraggable.	e2 @ RTDraggable.	v addAll: (Array with: l with: e2 with: e1).	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>software visualization</category><body package="Roassal2-ExampleBrowser-Examples">systemComplexity	&lt;gtExample&gt;	"	self new systemComplexity	"	| v els edges |	v := RTView new.	els := RTBox new		height: [ :c | c numberOfMethods max: 5 ];		borderColor: Color black;		width: [ :c | c numberOfVariables * 5 max: 5 ];		color:			(RTGrayLinearColor new				command: #numberOfLinesOfCode;				scope: Collection withAllSubclasses);		elementsOn: Collection withAllSubclasses.	v addAll: els.	els @ RTDraggable @ RTPopup.	edges := RTEdgeBuilder new		view: v;		objects: Collection withAllSubclasses;		shape:			(RTLine new				withVerticallAttachPoint;				yourself);		connectFrom: #superclass to: #yourself.	edges do: #moveBehindItsExtremities.	RTTreeLayout on: v elements.	v @ RTDraggableView.	^ v</body></methods><methods><class-id>Roassal2.RTGeneralExample</class-id> <category>camera</category><body package="Roassal2-ExampleBrowser-Examples">movingCamera	&lt;gtExample&gt;		"	self new movingCamera	"			| v menu |	v := RTView new.	v add: (RTEllipse new size: 50) element.	menu := RTMenuBuilder new view: v.	menu menu: '&lt;-' callback: [ v canvas camera translateBy: -10 @ 0. v signalUpdate ].	menu menu: '-&gt;' callback: [ v canvas camera translateBy: 10 @ 0. v signalUpdate ].	menu menu: 'V' callback: [ v canvas camera translateBy: 0 @ 10. v signalUpdate ].	menu menu: '^' callback: [ v canvas camera translateBy: 0 @ -10. v signalUpdate ].	 	^ v</body></methods><methods><class-id>Roassal2.RTMondrianExample</class-id> <category>sources</category><body package="Roassal2-Builder-Mondrian-Examples">exampleBezier	&lt;gtExample&gt; 	&lt;noTest&gt;| classes b |(TRPlatform current dialogConfirm: 'This example takes a long time to load, execute?')	ifFalse: [ ^ self ].classes := RTObject withAllSubclasses, RTTest withAllSubclasses.b := RTMondrian new.b shape circle.b nodes: classes.b edges connectFrom: #superclass.b shape bezierLineFollowing: #superclass;	color: (Color blue alpha: 0.2).b edges 	notUseInLayout;	connectToAll: #dependentClasses.b normalizer	normalizeSize: #numberOfMethods using: #sqrt;	normalizeColor: #numberOfMethods using: (Array with: Color green with: Color red) using: #sqrt.b layout cluster.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleClassDependencies&lt;gtExample&gt; &lt;noTest&gt;| b |(TRPlatform current dialogConfirm: 'This example takes a long time to load, execute?')	ifFalse: [ ^ self ].b := RTMondrian new.b shape circle size: 8.b nodes: RTObject withAllSubclasses.b shape line color: (Color gray alpha: 0.2).b edges	connectToAll: #dependentClasses.b normalizer	normalizeSize: #numberOfMethods using: #sqrt;	normalizeColor: [ :c | c withAllSuperclasses indexOf: RTObject ] using: (Array with: Color red with: Color gray);	alphaColor: 0.4.	b layout forceWithCharge: -400.b build.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleClusterLayout02&lt;gtExample&gt; &lt;noTest&gt;| b |(TRPlatform current dialogConfirm: 'This example takes a long time to load, execute?')	ifFalse: [ ^ self ].b := RTMondrian new.b shape circle	size: 8;	if: [ :c | c inheritsFrom: RTShape ] fillColor: Color blue;	if: [ :c | c name endsWith: 'Builder' ] fillColor: Color red.b nodes: RTObject withAllSubclasses.b shape line	color: (Color gray alpha: 0.1)";	if: [ :f :t | f inheritsFrom: RTLayout ] fillColor: (Color green alpha: 0.2)".b edges	notUseInLayout;	connectToAll: #dependentClasses.b layout	for: [ :c | c inheritsFrom: RTLayout ] use: RTForceBasedLayout new;	for: [ :c | c inheritsFrom: RTShape ] use: RTForceBasedLayout new;	for: [ :c | c inheritsFrom: RTInteraction ] use: RTForceBasedLayout new;	for: [ :c | c inheritsFrom: RTBuilder ] use: RTForceBasedLayout new;	for: [ :c | '*Example*' match: c name] use: RTForceBasedLayout new;	circleWithRadius: 250.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleColorInGraph&lt;gtExample&gt; &lt;noTest&gt;| b |(TRPlatform current dialogConfirm: 'This example takes a long time to load, execute?')	ifFalse: [ ^ self ].b := RTMondrian new.b shape circle.b nodes: ((RTObject withAllSubclasses, TRObject withAllSubclasses)).b shape line color: (Color gray alpha: 0.2).b edges 	moveBehind;	connectToAll: #dependentClasses.b layout forceWithCharge: -80.b normalizer	normalizeSize: [ :c | c dependentClasses size ]		min: 5 max: 25 using: #log;	normalizeColor: [ :c | c dependentClasses size ] 		using: (Array with: Color green with: Color  red ) using: #log;	alphaColor: 0.4.^ b</body><body package="Roassal2-Builder-Mondrian-Examples">exampleForceAndNested	&lt;gtExample&gt; 	&lt;noTest&gt;	| b |	(TRPlatform current dialogConfirm: 'This example takes a long time to load, execute?')	ifFalse: [ ^ self ].	b := RTMondrian new.	b nodes: RTShape withAllSubclasses forEach: [ :cls |		b shape rectangle color: Color blue.		b nodes: cls rtmethods.		b shape line color: Color black.		b edges connectToAll: #dependentMethods.		b layout force.	].	b edges connectFrom: #superclass.	b layout tree.	b build.		^ b view</body></methods><methods><class-id>Roassal2.RTBitmapExamples</class-id> <category>examples</category><body package="Roassal2-ExampleBrowser-Examples">image01	&lt;gtExample&gt;		"	self new image01	"	| v c s |	v := RTView new.	c := v canvas.	s := TRBitmapShape new.	s form: RTIcon roassal.	c addShape: s.	^ v</body><body package="Roassal2-ExampleBrowser-Examples">image02	&lt;gtExample&gt;		"	self new image02	This example directly talk to Trachel	"	| v  s trachelShape |	v := RTView new.	s := RTBitmap element.	v add: s.	trachelShape := s trachelShape.	trachelShape extent: 180 @ 100.	trachelShape fillColor: Color blue.	1 to: 80 do: [ :i |		trachelShape at: i @ i put: Color green ].	^ v</body></methods><methods><class-id>Roassal2.RTExploraBuilderExample</class-id> <category>sources</category><body package="Roassal2-Builder-Explora-Examples">exampleFileSystem	&lt;noTest&gt;	| builder |	builder := RTExploraBuilder new.	builder shape circle size: 10;		if: [ :x | x isFile ] fillColor: (Color yellow alpha: 0.8);		if: [ :x | x isDirectory ] fillColor: (Color brown alpha: 0.8).	builder		layout: (RTTreeLayout new);		onLeftClickExplore: [ :elem | (elem isFile) ifTrue: [ #() ] ifFalse: [elem children] ];		onRightClickExplore: [ :elem | Array with: elem parent ];		withPopup: [ :file | file basename ];		dragChildren;		node: TRPlatform current workingDirectory.	builder build.	^ builder</body></methods><methods><class-id>Roassal2.RTExploraBuilderExample</class-id> <category>basic</category><body package="Roassal2-Builder-Explora-Examples">exploreFileSystem	&lt;noTest&gt;	"	self new exploreFileSystem	"	| builder |	builder := RTExploraBuilder new.	builder shape circle size: 10;		if: [ :x | x isFile ] fillColor: (Color yellow alpha: 0.8);		if: [ :x | x isDirectory ] fillColor: (Color brown alpha: 0.8).	builder		layout: (RTTreeLayout new);		onLeftClickExplore: [ :elem | (elem isFile) ifTrue: [ #() ] ifFalse: [elem children] ];		onRightClickExplore: [ :elem | Array with: elem parent ];		withPopup: [ :file | file basename ];		dragChildren;		node: TRPlatform current workingDirectory.	^ builder</body></methods><methods><class-id>Roassal2.RTNameCloudExample</class-id> <category>sources</category><body package="Roassal2-Builder-NameCloud-Examples">exampleRoassalCode	&lt;gtExample&gt; 	&lt;noTest&gt;	| b |	(TRPlatform current dialogConfirm: 'This example takes a long time to load, execute?')	ifFalse: [ ^ self ].	b := RTNameCloud new.	RTObject withAllSubclasses do: [ :c | 		b addStrings: (c rtmethods collect: #getSource) ].	^ b</body></methods><methods><class-id>Roassal2.RTAxisAdaptedBuilderExample</class-id> <category>sources</category><body package="Roassal2-Builder-AxisAdapted-Examples">boxesFlLayout	&lt;gtExample&gt;	&lt;iconSelectorBase64: #boxesFlLayoutIcon&gt;	"RTAxisAdaptedBuilderExample new boxesFlLayout"	| view coll n  b |	view := RTView new.	coll:= #(50 60 80 100 85 10 35).	n := RTMultiLinearColorForIdentity new objects: (coll).	coll do: [ :r | view add: ((RTBox new color: [ :value | n rtValue: r]; size: r) elementOn: r )].	RTFlowLayout new applyOn: view elements.	view elements do: [ :e | e @ (RTPopup text: [:el | el])].	b := RTAxisAdaptedBuilder new.	b view: view.	b margin: 20.	b objects: view elements.	b build.	^ b view</body><body package="Roassal2-Builder-AxisAdapted-Examples">boxesFlowLayout	&lt;gtExample&gt;	&lt;iconSelectorBase64: #boxesFlowLayoutIcon&gt;		"RTAxisAdaptedBuilderExample new boxesFlowLayout"	| view coll n  b |	view := RTView new.	coll:= #(50 60 80 100 85 10 35).	n := RTMultiLinearColorForIdentity new objects: (coll).	coll do: [ :r | view add: ((RTBox new color: [ :value | n rtValue: r]; size: r) elementOn: r )].	RTFlowLayout new applyOn: view elements.	view elements do: [ :e | e @ (RTPopup text: [:el | el])].	b := RTAxisAdaptedBuilder new.	b view: view.	b margin: 20.	b objects: view elements.	b build.	^ b view</body><body package="Roassal2-Builder-AxisAdapted-Examples">withColorPalette	&lt;gtExample&gt;	"RTAxisAdaptedBuilderExample new withColorPalette"	| c b |	c := RTColorPaletteExample new exampleSequentialPalette.	b := RTAxisAdaptedBuilder new.	b view: c view.	b margin: 20.	b objects:  c view elements.	b build.	^ b view.</body><body package="Roassal2-Builder-AxisAdapted-Examples">withComposer	&lt;gtExample&gt;	&lt;iconSelectorBase64: #withComposerIcon&gt;		"RTAxisAdaptedBuilderExample new withComposer"	| c b |	c := RTComposerExample new exampleClassAnalysis2.	b := RTAxisAdaptedBuilder new.	b view: c view.	b margin: 20.	b objects:  c view elements.	b build.	^ b view.</body><body package="Roassal2-Builder-AxisAdapted-Examples">withMondrian1	&lt;gtExample&gt;	&lt;iconSelectorBase64: #withMondrian1Icon&gt;		"RTAxisAdaptedBuilderExample new withMondrian1"	| c b |	c := RTMondrianExample new exampleNormalization .	b := RTAxisAdaptedBuilder new.	b view: c view.	b margin: 20.	b objects:  c view elements.	b build.	^ b view.</body><body package="Roassal2-Builder-AxisAdapted-Examples">withMondrian2	&lt;gtExample&gt;	&lt;noTest&gt;	"RTAxisAdaptedBuilderExample new withMondrian2"	| c b |	c := RTMondrianExample new exampleBezier  .	b := RTAxisAdaptedBuilder new.	b view: c view.	b margin: 20.	b objects:  c view elements.	b build.	^ b view.</body></methods><methods><class-id>Roassal2.RTMapLocationExample</class-id> <category>sources</category><body package="Roassal2-Builder-Map-Examples">exampleAirports	&lt;gtExample&gt; 	&lt;noTest&gt;	| tab b ask |	ask := TRPlatform current dialogConfirm: 'This script takes about 1 minutes to execute. Do you want to continue?'.	ask ifFalse: [ ^ self ].	tab := RTTabTable new input: (TRPlatform current httpClientRequestClass get:	'https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat')	entity contents asString usingDelimiter:$,.	tab convertColumnsAsFloat: #(7 8).	b := RTMapLocationBuilder new.	b shape circle	size: 1;	color: (Color red).	tab values do: [ :row | b addPoint: row seventh @ row eighth value: row second].	^ b</body><body package="Roassal2-Builder-Map-Examples">exampleSeismOnEarth&lt;noTest&gt;| b tab |"tab := RTTabTable new input:  RTMapLocationBuilder new seismData2 usingDelimiter: $,."tab := RTTabTable new input:  'http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_month.csv' asUrl retrieveContents  usingDelimiter: $,.tab removeFirstRow.tab replaceEmptyValuesWith: '0' inColumns: #(2 3 4 5).tab convertColumnsAsFloat: #(2 3 4 5).b := RTMapLocationBuilder new.b shape circlesize: [ :v | (2 raisedTo: v) / 2 ];color: (Color red alpha: 0.3).tab values do: [ :row | b addPoint: row second @ row third value: row fifth ].b build.b view @ RTZoomableView.^ b view</body></methods><methods><class-id>Roassal2.RTSpectrographExample</class-id> <category>sources</category><body package="Roassal2-Builder-Spectrograph-Examples">exampleRoassalVisualization	&lt;gtExample&gt; 	&lt;noTest&gt;	| b |	(TRPlatform current dialogConfirm: 'This example takes a long time to load, execute?')	ifFalse: [ ^ self ].	b := RTSpectrograph new.	b objects: ((RTObject withAllSubclasses , TRObject withAllSubclasses) reverseSortedAs: #livingInDays).	b highlight: [ :cls :livingDay | cls inheritsFrom: TRObject ] color: Color lightGreen.	b highlight: [ :cls :livingDay | cls gotMethodOnDay: livingDay ].		b popupText: [ :cls :age | cls name, '  ', age printString , ' days old' ].	b lineBlock: [ :cls | 0 to: cls livingInDays ].		b build.	^ b view</body></methods><methods><class-id>Roassal2.RTLabelTest</class-id> <category>tests</category><body package="Roassal2-Core-Tests">rotated45gridLayout	&lt;gtExample&gt;	"	self new rotated45gridLayout.	"	| v shape |	v := RTView new.	1 to: 20 do: [ :i |			shape := RTRotatedLabel new.			shape text: 'Hello World'.			shape angleInDegree: 45.			v add: shape element.	].	RTGridLayout on: v elements.	^ v</body><body package="Roassal2-Core-Tests">rotated90gridLayout	&lt;gtExample&gt;	"	self new rotated90gridLayout.	"	| v shape |	v := RTView new.	1 to: 20 do: [ :i |			shape := RTRotatedLabel new.			shape text: 'Hello World'.			shape angleInDegree: 90.			v add: shape element.	].	RTGridLayout on: v elements.	^ v</body></methods><methods><class-id>Roassal2.RTExperimentalExample</class-id> <category>sources</category><body package="Roassal2-Experimental-Examples">exampleRTCache	&lt;gtExample&gt; 	&lt;noTest&gt;"This example shows a lot elements and draw it in a fast way"| b cache |(TRPlatform current dialogConfirm: 'This example takes a long time to load, execute?')	ifFalse: [ ^ self ].b := RTMondrianExample new exampleBezier.b build.cache := RTCache new.cache cacheView: b view.b view @ RTDraggableView.^ b view</body><body package="Roassal2-Experimental-Examples">exampleScatterplotMatrix	&lt;noTest&gt;	&lt;gtExample&gt;| b data block d lb |data := RTTabTable new input: (TRPlatform current downloadContent: 'http://mbostock.github.io/d3/talk/20111116/iris.csv') usingDelimiter: $,.data 	removeFirstRow;	convertColumns: #( 2 3 4 5) to: #asNumber.b := RTScatterplotMatrix new.b objects: data values.block := [ :n | n == n asInteger 	ifTrue: [ n asInteger ] 	ifFalse: [ n asFloat ] ].b axisX 	numberOfTicks: 5;	rotateLabels;	labelConversion: block.b axisY 	numberOfTicks: 5;	labelConversion: block.d := Dictionary new	at: 'setosa' put:Color red;	at: 'versicolor' put: Color green;	at: 'virginica' put: Color blue; yourself.b shape circle	size: 3.5;	color: [ :a | d at: a first ].b metrics	at: 'Sepal length' put: #second;	at: 'Sepal width' put: #third;	at: 'Petal length' put: #fourth; 	at: 'Petal width' put: #fifth.b build.lb := RTLegendBuilder new.lb view: b view.lb addText: 'Iris flower data set'.d keys do: [ :k |lb addColor: (d at: k) text: 'Iris ', k ].lb build.^ b view</body><body package="Roassal2-Experimental-Examples">exampleStackOnRoassal&lt;gtExample&gt; &lt;noTest&gt;| s classes extent layers x y color area maxY dates |(TRPlatform current dialogConfirm: 'This example takes a long time to load, execute?')	ifFalse: [ ^ self ].classes := (RTShape withAllSubclasses reverseSortedAs: #ageInDaysRounded ) select: #hasMethods.dates := (classes flatCollect: [ :cls | cls rtmethods collect: #date ]) 	asSet asSortedCollection.extent := 500@300.s := RTExperimentalStack new 	offset: #zero;	values: [ :cls| dates collect: [ :d | 			d -&gt; (cls rtmethods select: [ :m | d &gt;= m date ]) ] ];	x: [ :asso| asso key julianDayNumber ];	y: [ :asso| | temp |		temp := 0.		asso value do: [ :m | temp := temp + m numberOfLinesOfCode ].		temp.		 ].layers := s stack: classes.maxY := layers inject: 0 into: [ :max :arr | arr inject: max into: [ :a :each| a max: (each y0 + each y) ] ].x := RTScale linear 	domain: (Array with: layers first first x with: layers first last x); 	range: (Array with: 0 with: extent x).y := RTScale linear 	domain: (Array with: 0 with: maxY);	range: (Array with: extent y with: 0).color := RTScale linear range: (Array with: Color green with: Color darkGray).area := RTAreaBuilder new	x: [ :d|  x scale: d x];	y0: [ :d| y scale: d y0 ];	y1: [ :d| y scale: d y0 + d y];	data: layers.area shape color: [ :e | color scale: Random new next ].area interaction highlightColored: Color red;	popupText: [:obj | classes at: (layers indexOf: obj)].area build.RTAxisConfiguration new builder: area; minValue: maxY; maxValue: 0; title: 'Number of lines of code'; titlePosition: -0 @ 320;numberOfLabels: 10;tickLabelOffset: -20@0;noDecimal; axisFrom: -15 @0 to: -15 @ extent y.RTAxisConfiguration new builder: area; minValue: layers first first x; maxValue: layers first last x; title: 'Time'; titlePosition: -30 @ 0; labelRotation: -30; labelConversion: [:v | (Date julianDayNumber: v) ]; numberOfLabels: 15; axisFrom: 0 @(extent y+15) to: extent x @ (extent y+15).	^ area view @ RTDraggableView.</body><body package="Roassal2-Experimental-Examples">exampleTextNamesAndShapes	&lt;gtExample&gt; 	&lt;noTest&gt;| v elements data edges e |v := RTView new.data := Array 	with: (Array with: 'j' with: 'Joel' with: 65 with: '#6FB1FC' with: #star)	with: (Array with: 'e' with: 'Eunis' with: 45 with: '#EDA1ED' with: #ellipse)	with: (Array with: 'k' with: 'Kramer' with: 75 with: '#86B342' with: #octagon)	with: (Array with: 'g' with: 'Geovanna' with: 70 with: '#F5A45D' with: #rectangle).edges := OrderedCollection new	add: (Array with: 'j' with: 'e' with: '#6FB1FC' with: 90);	add: (Array with: 'j' with: 'k' with: '#6FB1FC' with: 70);	add: (Array with: 'j' with: 'g' with: '#6FB1FC' with: 80);	add: (Array with: 'e' with: 'j' with: '#EDA1ED' with: 95);	add: (Array with: 'e' with: 'k' with: '#EDA1ED' with: 60 with: 'dotted');	add: (Array with: 'k' with: 'j' with: '#86B342' with: 100);	add: (Array with: 'k' with: 'e' with: '#86B342' with: 100);	add: (Array with: 'k' with: 'g' with: '#86B342' with: 100);	add: (Array with: 'g' with: 'j' with: '#F5A45D' with: 90);	yourself.	elements := (RTSelectiveShape new	shape: #fifth;	width: [ :m | RTScale linear domain: #(40 80); range: #(20 60); scale: m third.];	text: #second;	labelShapeDo: [ :shape | shape outlineWidth: 0.5; outlineColor: #fourth ];	backgroundColor: #fourth;	color: Color white) elementsOn: data.v addAll: elements.elements @ RTDraggable.edges do: [ :edge| | from to line |	from := elements detect: [ :el | el model first = edge first ] ifNone: [ nil ].	to:= elements detect: [ :el | el model first = edge second ] ifNone: [ nil ].	line := RTDecoratedLine new 		filledArrowHead;		filledCircleTail;		line: (RTBezier3Line new 			width: [ :m | RTScale linear domain: #(60 100); range: #(2 6); scale: m fourth ]);		attachPoint: (RTBorderAttachPoint new offset: 9);		color: (Color colorFrom: edge third) trans.	e := RTEdge on: edge from: from to: to.	e+line.	v add: e ].v edges do: #pushBack.elements first translateTo: 300@260.elements second translateTo: 170@150.elements third translateTo: 160@260.elements fourth translateTo: 290@150.v @ RTDraggableView @ RTZoomableView.^ v</body></methods><methods><class-id>Roassal2.RTExamplesBrowser class</class-id> <category>interface specs</category><body package="Roassal2-Examples-Extentions">examplesSpec	"Tools.UIPainter new openOnClass: self andSelector: #examplesSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 288 292 ) 			#max: #(#{Core.Point} 288 292 ) 			#bounds: #(#{Graphics.Rectangle} 624 266 912 558 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body><body package="Roassal2-Examples-Extentions">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Roassal examples browser' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 631 212 1431 712 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 220 0 0 1 ) 					#name: #list 					#model: #menuExamples 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Roassal2.RTGrapherScatterplotExample</class-id> <category>sources</category><body package="Roassal2-Builder-Grapher-Examples-Examples">exampleSeismDepthAndMag	&lt;noTest&gt;	|tab ds b |	tab := RTTabTable new 		input: (TRPlatform current downloadContent: 	 'http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_month.csv')		usingDelimiter: $,.	tab removeFirstRow.	tab replaceEmptyValuesWith: '0' inColumns: #(4 5).	tab convertColumnsAsFloat: #(4 5).	b := RTGrapher new.	ds := RTData new.	ds interaction popup.	ds points: tab values.	ds dotShape color: (Color blue alpha: 0.3).	ds x: [ :row | row at: 4 ].	ds y: [ :row | row at: 5 ].	b add: ds.	b maxY: 8.	b maxX: 700.	b axisX title: 'depth'.	b axisY title: 'magnitude'.	^ b</body></methods><methods><class-id>Roassal2.RTDSMExample</class-id> <category>sources</category><body package="Roassal2-Builder-DSM-Examples">exampleEvolutionDSM	&lt;noTest&gt;	| b option data labels input other |	option := #(collab gtinspector).	option := TRPlatform current dialogChooseFrom: option values: option.	option ifNil: [ ^ nil ].		data := RTTabTable new 		input: (RTDSMExample perform: option)		usingDelimiter: Character tab.	labels := data removeFirstRow.	input := Dictionary new.	other := Set new.	data values do: [ :line| | item timeline  | 		item := input at: (line second) ifAbsentPut: [ Dictionary new ].		other add: line third.		timeline := item at: line third ifAbsentPut: [ OrderedCollection new ].		timeline add: line first -&gt; line fourth asNumber. ].	b := RTEvolutionDSM new.	b objectsY: input keys.	b objectsX: other.	b timeline: [ :assoc | (input at: assoc key) at: assoc value ifAbsent: [ nil ] ].	b labelShape		height: 30;		color: Color blue.	b shape shape allShapes first size: 100.	b shape shape allShapes second		size: 100;		values: [ :assoc| 			assoc timeline 				ifNil:  [ nil ]				ifNotNil: [ :ob | ob collect: #value ] ].	b selectElement: [ :e| e model score notNil ].	b score: [ :assoc | assoc score ].	^ b</body></methods><methods><class-id>Roassal2.RTTreeMapExample</class-id> <category>sources</category><body package="Roassal2-Builder-TreeMap-Examples">exampleFileSystem&lt;noTest&gt;| b color |b := RTTreeMapBuilder new.color := RTScale linear 	domain: #(0 12000);	range: (Array with: Color gray with: Color red).b 	color: Color transparent;	borderColor: Color black;	leafColor: [ :f | color scale: f size sqrt ];	leafWeight: [:f | f size sqrt ]; 	explore: TRPlatform current workingDirectory	nesting: #directories	leaves: #files.^ b</body></methods><methods><class-id>Roassal2.RTRoassalExample</class-id> <category>sources</category><body package="Roassal2-ExampleBrowser-Examples">exampleSeisms&lt;noTest&gt;| b tab l|tab := RTTabTable new input: 'http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_month.csv' asZnUrl retrieveContents usingDelimiter: $,.tab removeFirstRow.tab replaceEmptyValuesWith: '0' inColumns: #(2 3 4 5).tab convertColumnsAsFloat: #(2 3 4 5).b := RTMapLocationBuilder new.b shape circlesize: [ :v | (2 raisedTo: v) / 2 ];color: (Color red alpha: 0.3).tab values do: [ :row | b addPoint: row second @ row third value: row fifth ].b build.l := RTLegendBuilder new.l view: b view.l addText: 'Seisms of a magniture of 2.5 or more, over the last 30 days'.l build.b view @ RTZoomableView.^ b view</body><body package="Roassal2-ExampleBrowser-Examples">exampleSelfCalls	" The RTNest class offer simple methods to encapsulate some elements into a composing elements. Consider for example the following visualization that shows the shape hierarchy in Roassal. Each purple square is a class. Classes are linked with to represent class inheritance. Gray boxes are methods. Relation between methods indicates a possible invocation path between methods within the same class."	&lt;gtExamle&gt;	&lt;noTest&gt; " -&gt; image crash "	| v classes classElement classElements shapeBuilder methods methodElements |	v := RTView new.	v @ RTDraggableView.	shapeBuilder := RTShapeBuilder new.	shapeBuilder rectangle size: [ :m | m linesOfCode min: 60 max: 5 ].	classElements := RTGroup new.	classes := RTShape withAllSubclasses.	classes		do:			[ :class | 			classElement := (RTBox new color: (Color blue alpha: 0.4))				elementOn: class.			classElement @ RTPopup.			v add: classElement.			methods := class rtmethods.			methodElements := shapeBuilder elementsOn: methods.			v addAll: methodElements.			RTEdgeBuilder new				view: v;				objects: methods;				connectFrom: #yourself toAll: #dependentMethods.			RTTreeLayout on: methodElements.			methodElements @ RTDraggable @ RTPopup.			RTNest new on: classElement nest: methodElements.			classElement @ RTDraggable.			classElements add: classElement ].	RTEdgeBuilder new		view: v;		shape: (RTLine new attachPoint: RTVerticalAttachPoint instance);		objects: classes;		connectFrom: #superclass.	RTTreeLayout on: classElements.	^ v</body></methods><methods><class-id>Roassal2.RTSunburstBuilderExamples</class-id> <category>examples</category><body package="Roassal2-Builder-Sunburst-Examples">basic1	&lt;gtExample&gt;		"	self new basic1	"	| b|	b := RTSunburstBuilder new.	b explore: 1 using: [ :n | 		n&lt; 4 			ifTrue: [ Array with: n + 1 with: n + 2 ] 			ifFalse: [ #( ) ] ].	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic10	&lt;gtExample&gt;		"	self new basic10	"		| b |	b := RTSunburstBuilder new.	b layout sunburstWithRadius: 100.	b shape color: [ :cls | 		cls subclasses isEmpty 			ifTrue: [ Color red ] 			ifFalse: [ Color orange ] ].		b		radialSpacing: 10;		angularSpacing: 2;		explore: TREvent using: #subclasses.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic11	&lt;gtExample&gt;		"	self new basic11	"		| b |	b := RTSunburstBuilder new.	b layout sunburstWithRadius: 100.	b strategy radialSpacing:10.	b shape current color: [ :cls | 		(cls inheritsFrom: TREvent)			ifTrue: [ Color lightGray ]			ifFalse: [ Color blue ] ].	b		angularSpacing: 1; 		from: (Array with: TREvent with: RTInteraction) using: #subclasses.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic12	&lt;gtExample&gt;		"	self new basic12	"		| b |	b := RTSunburstBuilder new.	b layout sunburstWithRadius: 100.	b strategy radialSpacing:10.	b shape current color: [ :cls | 		(cls inheritsFrom: TREvent)			ifTrue: [ Color lightGray ]			ifFalse: [ Color blue ] ].	b		angularSpacing: 1; 		hasCenter: false;		from: (Array with: TREvent with: RTInteraction) using: #subclasses.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic13	&lt;gtExample&gt;		"	self new basic13	"		| b mt |	b := RTSunburstBuilder new.	b radialSpacing: 1.	b interaction addInteraction: RTSBFadeInteraction new.	b shape current 				color: [ :m | m subclasses notEmpty ifTrue: [ Color orange ] ifFalse: [ Color red ] ].					mt := TRPlatform current morphClass.	b explore: mt using: #subclasses.	b view canvas focusOnCenterScaled.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic14	&lt;gtExample&gt;		"	self new basic14	"	| b mt |	b := RTSunburstBuilder new.	b layout sunburstWithRadius: 100.	b radialSpacing: 1.	b interaction addInteraction: RTSBFadeInteraction new.	b shape color: [ :m | m subclasses notEmpty 		ifTrue: [ Color lightGray ] 		ifFalse: [ Color purple ] ].					mt := TRPlatform current morphClass.	b explore: mt using: #subclasses.	b view canvas focusOnCenterScaled.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic15	&lt;gtExample&gt;		"	self new basic15	"	| b mt |	b := RTSunburstBuilder new.	b layout sunburstWithArcWidth: 30.	b 		radialSpacing: 2;		angularSpacing: 1.		b interaction addInteraction: RTSBFadeInteraction new.	b shape color: [ :m | m subclasses notEmpty 		ifTrue: [ Color orange ] 		ifFalse: [ Color red ] ].					mt := TRPlatform current morphClass.	b explore: mt using: #subclasses.	b view canvas focusOnCenterScaled.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic2	&lt;gtExample&gt;		"	self new basic2	"	| b|	b := RTSunburstBuilder new.	b		explore: 1		using: [ :n | n&lt; 4 			ifTrue: [ Array with: n + 1 with: n + 2 ] 			ifFalse: [ #( ) ] ].	b hasCenter: false.	b radialSpacing: 0.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic3	&lt;gtExample&gt;		"	self new basic3	"		| b |	b := RTSunburstBuilder new.	b shape current 		colorElement: [ :el | Color grayScale256: ((el attributeAt: #depth ifAbsent: [ 0 ]) * 30) ].	b explore: RTObject using: #subclasses.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic4	&lt;gtExample&gt;	"	self new basic4	"		| b |	b := RTSunburstBuilder new.	b shape color: [ :cls | 		cls subclasses isEmpty 			ifTrue: [ Color red ] 			ifFalse: [ Color orange ] ].		b		radialSpacing: 10;		angularSpacing: 2;		explore: TREvent using: #subclasses.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic5	&lt;gtExample&gt;	"	self new basic5	"		| b |	b := RTSunburstBuilder new.	b strategy radialSpacing:10.	b shape current color: [ :cls | 		(cls inheritsFrom: TREvent)			ifTrue: [ Color lightGray ]			ifFalse: [ Color blue ] ].	b		angularSpacing: 1; 		from: (Array with: TREvent with: RTInteraction) using: #subclasses.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic6	&lt;gtExample&gt;	"	self new basic6	"		| b |	b := RTSunburstBuilder new.	b strategy radialSpacing:10.	b shape current color: [ :cls | 		(cls inheritsFrom: TREvent)			ifTrue: [ Color lightGray ]			ifFalse: [ Color blue ] ].	b		angularSpacing: 1; 		hasCenter: false;		from: (Array with: TREvent with: RTInteraction) using: #subclasses.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic7	&lt;gtExample&gt;	"	self new basic7	"		| b|	b := RTSunburstBuilder new.	b layout sunburstWithRadius: 100.	b explore: 1 using: [ :n | 		n&lt; 4 			ifTrue: [ Array with: n + 1 with: n + 2 ] 			ifFalse: [ #( ) ] ].	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic8	&lt;gtExample&gt;	"	self new basic8	"		| b|	b := RTSunburstBuilder new.	b layout sunburstWithRadius: 100.	b		explore: 1		using: [ :n | n&lt; 4 			ifTrue: [ Array with: n + 1 with: n + 2 ] 			ifFalse: [ #( ) ] ].	b hasCenter: false.	b radialSpacing: 0.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">basic9	&lt;gtExample&gt;	"	self new basic9	"		| b |	b := RTSunburstBuilder new.	b layout sunburstWithRadius: 100.	b shape current 		colorElement: [ :el | Color grayScale256: ((el attributeAt: #depth ifAbsent: [ 0 ]) * 30) ].	b explore: RTObject using: #subclasses.	^ b</body></methods><methods><class-id>Roassal2.RTSunburstBuilderExamples</class-id> <category>sources</category><body package="Roassal2-Builder-Sunburst-Examples">exampleBasic	&lt;gtExample&gt;		| b |	b := RTSunburstBuilder new.	b radialSpacing: 10.	b shape color: [ :cls | cls subclasses notEmpty 		ifTrue: [ Color orange ] 		ifFalse: [ Color red ] ].	b explore: TRShape using: #subclasses.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">exampleBasic2	&lt;gtExample&gt;	&lt;iconSelectorBase64: #exampleBasic2Icon&gt;		| b data |	data := Array 		with: 'Chile' -&gt; (Array with: 'Santiago' with: 'Iquique' )		with: 'France' -&gt; (Array with: 'Paris' with: 'Nice').	b := RTSunburstBuilder new.	b 		explore: data 		using: [ :o | 			o class == Association 				ifTrue: [ o value ] 				ifFalse: [ o isString 									ifTrue: [ #() ] 									ifFalse:  [ o ] ] ].	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">exampleCollectionSubclasses	&lt;gtExample&gt;	&lt;iconSelectorBase64: #exampleCollectionSubclassesIcon&gt;		| b |	b := RTSunburstBuilder new.	b layout sunburstWithRadius: 100.	b 		angularSpacing: 1;		radialSpacing: 5.	b shape color: [ :cls | cls subclasses notEmpty 		ifTrue: [ Color orange ] 		ifFalse: [ Color red ] ].	b explore: Collection using: #subclasses.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">exampleFileSystem	&lt;noTest&gt;	| b c1 c2 |	b := RTSunburstBuilder new.		c2 := Color r: 177/255.0 g: 175/255.0 b: 134/255.0.	c1 := Color r: 98/255.0 g: 101/255.0 b: 73/255.0.		b		color: c2; 		angularSpacing: 1;		radialSpacing: 5;		leafWeight: [:f | f size sqrt ];		leafColor: c1;		explore: TRPlatform current workingDirectory		nesting: #directories		leaves: #files.				b view canvas camera scale: 1.5.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">exampleFileSystem2	&lt;noTest&gt;	&lt;iconSelectorBase64: #exampleFileSystem2Icon&gt;		| b c1 c2 |	b := RTSunburstBuilder new.		c2 := Color r: 177/255.0 g: 175/255.0 b: 134/255.0.	c1 := Color r: 98/255.0 g: 101/255.0 b: 73/255.0.	b interaction addInteraction: RTSBFadeInteraction new.	b		color: c2; 		angularSpacing: 1;		radialSpacing: 5;		leafWeight: [:f | f size sqrt ];		leafColor: c1;		explore: TRPlatform current workingDirectory		nesting: #directories		leaves: #files.				b view canvas camera scale: 1.5.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">exampleMorphSubclasses	&lt;gtExample&gt;	&lt;iconSelectorBase64: #exampleMorphSubclassesIcon&gt;		| b |	b := RTSunburstBuilder new.	b layout sunburstWithRadius: 400.	b color: [ :cls | cls subclasses isEmpty ifTrue: [ Color purple ] ifFalse: [ Color lightGray ] ].	b explore: TRPlatform current morphClass using: #subclasses.	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">exampleOnNumbers	&lt;gtExample&gt;	&lt;iconSelectorBase64: #exampleOnNumbersIcon&gt;		| b|	b := RTSunburstBuilder new.	b		color: [ :e | e &lt; 5 			ifTrue: [ Color gray ] 			ifFalse: [Color blue] ].	b 		explore: 1 		using: [ :n | n&lt; 5 			ifTrue: [ Array with: n + 1 with: n + 2 with: n+3 ] 			ifFalse: [ #( ) ] ].	^ b</body><body package="Roassal2-Builder-Sunburst-Examples">exampleRTObjectSubclasses	&lt;gtExample&gt;	&lt;iconSelectorBase64: #exampleRTObjectSubclassesIcon&gt;		| b c1 c2 |	b := RTSunburstBuilder new.	b layout sunburstWithRadius: 100.	c1 := Color r: 0/255.0 g: 100/255.0 b: 0/255.0.	c2 := Color r: 73/255.0 g: 121/255.0 b: 107/255.0.	b color: [ :cls | cls subclasses notEmpty 		ifTrue: [ c2 ] ifFalse: [ c1 ] ].	b explore: RTObject using: #subclasses.	^ b</body></methods><methods><class-id>RTExampleBrowser class</class-id> <category>interface specs</category><body package="Roassal2-Examples-Extentions">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #screenCenter #openType #advanced ) 			#label: 'Roassal example' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 518 212 1018 612 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 5 0 80 0 16 0 ) 					#name: #source 					#model: #openSource 					#label: 'Source' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -80 1 5 0 -65 1 16 0 ) 					#name: #zoomIn 					#model: #zoomIn 					#label: '+' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -60 1 5 0 -45 1 16 0 ) 					#name: #zoomOut 					#model: #zoomOut 					#label: '-' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -40 1 5 0 -25 1 16 0 ) 					#name: #center 					#model: #focusOnCenter 					#label: 'o' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -20 1 5 0 -5 1 16 0 ) 					#name: #more 					#model: #more 					#label: '...' 					#defaultable: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 0 1 0 1 ) 					#name: #view 					#component: #exampleView ) ) ) )</body></methods><methods><class-id>Roassal2.RTGrapherExample</class-id> <category>sources</category><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePopulationUSA&lt;noTest&gt;| b  tab |tab := RTTabTable new input: (TRPlatform current download: 'https://www.census.gov/popest/data/state/asrh/2013/files/SCPRC-EST2013-18+POP-RES.csv') contents usingDelimiter: $,.tab removeFirstRow.tab convertColumnsAsInteger: #('POPESTIMATE2013' 'POPEST18PLUS2013').b := RTDoubleBarBuilder new.b pointName: [ :row | row at: (tab indexOfName: 'NAME') ].b points: tab values allButFirst. b bottomValue: [ :row | ((row at: (tab indexOfName: 'POPESTIMATE2013')) / 1000) asInteger ] titled: 'Pop estimate'.b topValue: [ :row | ((row at: (tab indexOfName: 'POPEST18PLUS2013')) / 1000) asInteger ] titled: 'Pop +18 estimate'.b build.^ b view</body><body package="Roassal2-Builder-Grapher-Examples-Examples">examplePrimeNumberSpace	&lt;noTest&gt;	| diag v ds anim |	"Made by Serge Serge Stinckwich &lt;serge.stinckwich@gmail.com&gt;"	v := RTView new.	diag := RTGrapher new.	diag view: v.	ds := RTData new.	ds dotShape ellipse color: (Color r: 0.9450000000000001 g: 0.768 b: 0.059000000000000004 alpha: 1.0); size: 0.1.	ds points: ((0 to: 5e5) select:#isPrime);	   y: [ :p |(p* (p cos))];	   x: [ :p |(p* (p sin))].	diag add: ds.	diag axisX color: (Color black alpha:0); noTick; noLabel.	diag axisY color: (Color black alpha:0); noTick; noLabel.	diag build.	anim := RTActiveAnimation new.	anim intervalInMilliseconds: 100.	anim blockToExecute: [ 	    v canvas camera scale: v canvas camera scale + 0.2.	    v signalUpdate.	].	anim inView: v.	v canvas color: Color black.	^ v</body></methods><methods><class-id>Roassal2.RTCalendarExample</class-id> <category>sources</category><body package="Roassal2-Builder-Calendar-Examples">exampleVisualizationCSV&lt;noTest&gt;| b tab colors dictionary |tab := RTTabTable new 	input: (TRPlatform current downloadContent: 'http://bl.ocks.org/mbostock/raw/4063318/dji.csv')	usingDelimiter: $,.tab removeFirstRow.dictionary := Dictionary new.tab values do: [ :ar | | value |	value := (ar fifth asNumber - ar second asNumber)/ ar second asNumber.	dictionary at: ar first asDate put: value ].colors := #(#(165 0 38) #(215 48 38) #(244 109 67)	#(253 174 97) #(254 224 139) #(255 255 191) #(217 239 139)	 #(166 217 106) #(102 189 99) #(26 152 80) #(0 104 55)  ) collect: [ :ar| Color r: ar first g: ar second b: ar third range: 255 ].b := RTCalendarBuilder new.b dateShape rectangle size: 15; color: Color white; borderColor: Color lightGray.b monthShape shape: (b monthShapePath: 15.0).b yearShape composite: [ :comp | 	comp add: (RTLabel new text: [ :d | d year ]; height: 20 ).	comp add: (RTBox new color: Color transparent). ] .b dates: ((Year year: 1990) to: (Year year: 2010) ).b dateLayout gapSize: 0.b monthLayout month.b yearLayout horizontalLine.b dateShape if: [ :d | dictionary includesKey: d ] color: 	[ :d | | value index |	value := (dictionary at: d)+0.05.	index := ((value * 11/ 0.1)+1) asInteger.	index &lt; 1 ifTrue: [ index := 1 ].	index &gt; 11 ifTrue: [ index := 11 ].	colors at: index. ].b dateInteraction popup.b build.(b view elements select: [:e | e model isKindOf: Month]) pushFront.^ b view</body></methods><methods><class-id>Roassal2.RTGradientColoredLineExample</class-id> <category>sources</category><body package="Roassal2-ExampleBrowser-Examples">edgePaletteColored	&lt;gtExample&gt;	| v elem1 elem2 edge|	v := RTView new.	elem1 := (RTEllipse new color: (Color blue alpha:0.6); size:10) elementOn: 1.	elem2 := (RTEllipse new color: (Color blue alpha:0.6); size:10) elementOn: 2.	elem2 translateBy: 200@0.	elem1 @ RTDraggable.	elem2 @ RTDraggable.	v add: elem1.	v add: elem2.	edge := RTEdge from:elem1 to:elem2.	v add: (edge + (RTMultiColoredLine new colors: (RTColorPalette qualitative colors: 12 scheme:'Paired'); colorShape)).	^ v</body></methods><methods><class-id>Roassal2.RTSimonExample</class-id> <category>basic</category><body package="Roassal2-Builder-Simon-Examples">basic01	&lt;gtExample&gt;	"	self new basic01	"	| builder |	builder := RTSimon new.	builder models: (1 to: 20).	^ builder</body><body package="Roassal2-Builder-Simon-Examples">basic02	&lt;gtExample&gt;	"	self new basic02	"	| builder |	builder := RTSimon new.	builder shape current externalRadius: [ :obj | (obj * 3) + 80].	builder models: (1 to: 20).	^ builder</body><body package="Roassal2-Builder-Simon-Examples">basic03	&lt;gtExample&gt;	"	self new basic03	"	| builder |	builder := RTSimon new.	builder shape current 						innerRadius: [ :r | 200 atRandom ];						externalRadius: [ :obj | 200 + 40 atRandom ];						outerAngle: [ :o | 360 atRandom ] innerAngle: [ :o | 50 atRandom ];						color: [ :o | ((Array with: Color red with: Color blue with: Color white) atRandom alpha: 0.1)].	builder models: (1 to: 10).	^ builder</body><body package="Roassal2-Builder-Simon-Examples">basic03Animated	&lt;gtExample&gt;	"	self new basic03Animated	"	| builder timer |	timer := TRVITimer new cycleLength: 10.		builder := RTSimon new.	builder shape current 						innerRadius: [ :r | 200 atRandom ];						externalRadius: [ :obj | 200 + 40 atRandom ];						outerAngle: [ :o | 							| a b |							a := 300 atRandom.							b := 200 atRandom.							TRVIAnimatedValue new													evaluator: [ :t | a interpolateTo: (a + b) at: t ];													timer: timer;													yourself. ]							innerAngle: [ :o | 50 atRandom ];						color: [ :o | ((Array with: Color red with: Color blue with: Color white) atRandom alpha: 0.1)].	builder models: (1 to: 10).	timer start.	builder view addAnimation: (RTResetAllShape new trCanvas: builder view canvas). 	^ builder</body></methods><methods><class-id>Roassal2.RTSimonExample</class-id> <category>software visualization</category><body package="Roassal2-Builder-Simon-Examples">softviz01	&lt;gtExample&gt;	"	self new softviz01	LOC, NOM, NOV, NOS	"	| b | 	b := RTSimon new.	b shape current				outerAngle: [ :cls | cls numberOfVariables * 25 ] innerAngle: [ :cls | cls numberOfMethods / 1 ];				innerRadius: [ :cls | cls withAllSuperclasses size * 10 ];				thickness: [ :cls | cls numberOfMethods * 2 ];				color: (Color red alpha: 0.2).	b models: RTObject withAllSubclasses.	^ b</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Roassal2-Examples-Extentions">roassal2Menu	&lt;menuItem: 'Roassa2 Examples Browser' icon: #roassal2Icon nameKey: nil 	menu: #(#launcherToolBar) position: 81.8 helpText: 'Roassal2 Examples Browser'&gt;	&lt;menuItem: 'Roassal2 Examples Browser' icon: #roassal2Icon nameKey: nil 	menu: #(#menuBar #tools) position: 60.0&gt;	Roassal2.RTExamplesBrowser open.	^ self</body></methods><initialize><class-id>Roassal2.RTAbstractExample</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Announcement</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Announcements</category><attributes><package>System-Announcements</package></attributes></class><class><name>Panel</name><environment>UI</environment><super>Graphics.CompositePart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>layoutAlgorithm isInUpdate cachedPreferredExtent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>RTObject</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Core</category><attributes><package>Roassal2-Core</package></attributes></class><class><name>RTBuilder</name><environment>Roassal2</environment><super>Roassal2.RTObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view interactionBuilder shapeBuilder layoutBuilder title metricNormalizer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal2-Builder-Common</category><attributes><package>Roassal2-Builder-Common</package></attributes></class><class><name>TRObject</name><environment>Roassal2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Trachel-Core</category><attributes><package>Roassal2-Trachel-Core</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>