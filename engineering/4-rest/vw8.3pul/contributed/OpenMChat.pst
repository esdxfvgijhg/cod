<?xml version="1.0"?><st-source><!-- Name: OpenMChatComment: This is a chat application based on broadcasting. This means it doesn't need a server, the chat peers discover themselves within the reach of IP broadcasts on your network.Starting a chat application:You can start a chat peer from the Tools menu or evaluting something like:	(OpentalkMChat		as: <yourChatID>					"e.g. 'martin'"		) openStarting a Chat Session:The left pane shows all the parties currently connected to the server. You can start a chat session by selecting somebody and choosing 'Start Chat' from the context menu. The other party will get a confirmation dialog which has to be accepted to join the session.Messages:Once a chat session is started message text can be typed into the input field on the bottom. Hit Enter to send the message out. Messages are displayed in the top right text pane.Multiparty Sessions (Not Implemeted Yet):If you want to get somebody else into the session just select his chat id and choose 'Invite to Join' from the context menu. Invitation to join has to be confirmed by the other party as well.Leaving a Session:To finish the session hit the Leave button. Simply closing the client has the same effect.Multiple Sessions:A chat peer can carry on only one session at a time. If you want multiple sessions, start more peers.DbIdentifier: bear73DbTrace: 54790DevelopmentPrerequisites: #(#(#any 'Opentalk-Groups' ''))PackageName: OpenMChatParcel: #('OpenMChat')PrerequisiteParcels: #(#('Opentalk-Groups' ''))PrintStringCache: (9,mkobetic)Version: 9Date: 11:14:06 AM October 21, 2009 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.7 (oct09.4) of October 21, 2009 on October 21, 2009 at 11:14:06 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>OpenMChat</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id broker all parties session message textCollector proxies </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OpenChat</category><attributes><package>OpenMChat</package></attributes></class><comment><class-id>OpenMChat</class-id><body>Instance Variables:	id	&lt;Object&gt; undocumented	broker	&lt;Object&gt; undocumented	all	&lt;Object&gt; undocumented	parties	&lt;Object&gt; undocumented	session	&lt;Object&gt; undocumented	message	&lt;Object&gt; undocumented	textCollector	&lt;Object&gt; undocumented	proxies	&lt;OrderedCollection on: Proxy&gt; a strong registry of proxies so that they don't get GCed (see joinGroupId:)</body></comment><shared-variable><name>Log</name><environment>OpenMChat</environment><private>false</private><constant>false</constant><category>debugging</category><initializer></initializer><attributes><package>OpenMChat</package></attributes></shared-variable><shared-variable><name>LogMessages</name><environment>OpenMChat</environment><private>false</private><constant>false</constant><category>debugging</category><initializer>false</initializer><attributes><package>OpenMChat</package></attributes></shared-variable><methods><class-id>OpenMChat</class-id> <category>session broadcasts</category><body package="OpenMChat" selector="accepted:">accepted: party	self displayMessage: 'Accepted !' from: party</body><body package="OpenMChat" selector="declined:">declined: party	self displayMessage: 'Declined !' from: party</body><body package="OpenMChat" selector="leavingSession:">leavingSession: party	self displayMessage: 'Left !' from: party</body></methods><methods><class-id>OpenMChat</class-id> <category>private</category><body package="OpenMChat" selector="addParty:">addParty: aChatId	self parties list: (self parties list add: aChatId; yourself)</body><body package="OpenMChat" selector="joinGroupId:">joinGroupId: sessionId	"Using the Proxy is a nasty hack to get around the fact that ObjectTable won't let you	register the same object under several different OIDs at the same time"	broker objectAdaptor		export: (			proxies add: (Opentalk.Proxy newOn: self) )		oid: sessionId.	^broker groupById: sessionId.</body><body package="OpenMChat" selector="log">log"	Log := EventPrinter new."	Log isNil ifTrue: [Log := Opentalk.EventCollector new resetClock; yourself].	^Log</body><body package="OpenMChat" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	super noticeOfWindowClose: aWindow.	session notNil ifTrue: [session leavingSession: id].	all notNil ifTrue: [all leaving: id].	broker stop.</body><body package="OpenMChat" selector="printOn:">printOn: aStream	aStream		nextPutAll: 'MChat(';		nextPutAll: id;		nextPut: $)</body></methods><methods><class-id>OpenMChat</class-id> <category>group broadcasts</category><body package="OpenMChat" selector="alreadyIn:">alreadyIn: aChatId	(aChatId = id or: [self parties list includes: aChatId])		ifFalse: [self addParty: aChatId]</body><body package="OpenMChat" selector="joining:">joining: aChatId	self addParty: aChatId.	aChatId = id ifFalse: [all alreadyIn: id]</body><body package="OpenMChat" selector="leaving:">leaving: aChatId	(self parties list includes: aChatId) ifTrue: [		self parties list: (self parties list remove: aChatId; yourself)]</body><body package="OpenMChat" selector="startingSession:for:with:on:">startingSession: sessionId for: originatorId with: party on: topic	| question |	party = id ifFalse: [^self].	question := WriteStream on: (String new: 20).	question		nextPutAll: originatorId;		nextPutAll: ' wants to talk to you about ';		nextPutAll: topic;		nextPut: $.; cr;		nextPutAll: 'Do you accept ?'.	(Dialog confirm: question contents)		ifFalse: [(broker groupById: sessionId) declined: id. ^self].	session := self joinGroupId: sessionId.	session accepted: party.	self message onChangeSend: #sendMessage to: self</body></methods><methods><class-id>OpenMChat</class-id> <category>actions</category><body package="OpenMChat" selector="displayMessage:from:">displayMessage: aString from: anId	anId notNil ifTrue: [		textCollector show: '&lt;', anId, '&gt;: ' ].	textCollector		show: aString;		cr</body><body package="OpenMChat" selector="leaveSession">leaveSession	session notNil ifTrue: [		session leavingSession: id.		session := nil ]</body><body package="OpenMChat" selector="sendMessage">sendMessage	session notNil ifTrue: [		session displayMessage: self message value from: id.		self message			retractInterestsFor: self;			value: '';			onChangeSend: #sendMessage to: self ]</body></methods><methods><class-id>OpenMChat</class-id> <category>aspects</category><body package="OpenMChat" selector="labelFor:">labelFor: aKey	^aKey = #windowLabel		ifTrue: [self windowLabel]		ifFalse: [super labelFor: aKey]</body><body package="OpenMChat" selector="message">message	message isNil ifTrue: [message := String new asValue].	^message</body><body package="OpenMChat" selector="parties">parties	parties isNil ifTrue: [parties := SelectionInList with: List new].	^parties</body><body package="OpenMChat" selector="partyMenu">partyMenu	^Menu new		augmentFrom: self class to: OpenMChat menuName: #partyMenu;		yourself</body><body package="OpenMChat" selector="textCollector">textCollector	textCollector isNil ifTrue: [textCollector := TextCollector new].	^textCollector</body><body package="OpenMChat" selector="textView">textView	| tcv |	tcv := TextCollectorView new model: self textCollector.	^tcv</body><body package="OpenMChat" selector="windowLabel">windowLabel	| s |	s := WriteStream on: String new.	self printOn: s.	^s contents</body></methods><methods><class-id>OpenMChat</class-id> <category>debugging</category><body package="OpenMChat" selector="flushLogToTranscript">flushLogToTranscript	Log flushToTranscript</body><body package="OpenMChat" selector="inspectLog">inspectLog	Log inspect</body><body package="OpenMChat" selector="postBuildWith:">postBuildWith: aBuilder	self eventsHandled isEmpty ifFalse: [		(aBuilder menuAt: #partyMenu)			addLine;			addItem: (MenuItem labeled: 'Reset Log Clock') value: #resetLogClock;			addItem: (MenuItem labeled: 'Flush Log To Transcript') value: #flushLogToTranscript;			addItem: (MenuItem labeled: 'Inspect Log') value: #inspectLog ]</body><body package="OpenMChat" selector="resetLogClock">resetLogClock	Log resetClock</body></methods><methods><class-id>OpenMChat</class-id> <category>initialization</category><body package="OpenMChat" selector="initializeBcastId:">initializeBcastId: aChatId	broker := Opentalk.RequestBroker newStstBcastAtPort: 4242.	broker configuration adaptor transport networkDirected: true.	self initializeId: aChatId</body><body package="OpenMChat" selector="initializeBcastLANId:">initializeBcastLANId: aChatId	broker := Opentalk.RequestBroker newStstBcastAtPort: 4242.	self initializeId: aChatId</body><body package="OpenMChat" selector="initializeId:">initializeId: aChatId	id := aChatId.	(InputState default shiftDown) ifTrue: [		broker sendAllEventsTo: self log ].	#{Opentalk.Log} ifDefinedDo: [ :log |		log ifNotNil: [			#(sendingRequest:in: receivingRequest:in:) do: [ :ev |				broker objectAdaptor when: ev do: [ :rq :tr |					log log: (						MessageSend							receiver: rq target							selector: rq message selector							arguments: rq message arguments) ] ] ] ].	broker start.	proxies := OrderedCollection new.	all := self joinGroupId: #all.	all joining: aChatId</body><body package="OpenMChat" selector="initializeMcastId:">initializeMcastId: aChatId	broker := Opentalk.RequestBroker newStstMcastAtPort: 4242.	self initializeId: aChatId</body></methods><methods><class-id>OpenMChat class</class-id> <category>instance creation</category><body package="OpenMChat" selector="bcastAs:">bcastAs: aChatId	^self new initializeBcastId: aChatId</body><body package="OpenMChat" selector="bcastLANAs:">bcastLANAs: aChatId	^self new initializeBcastLANId: aChatId</body><body package="OpenMChat" selector="mcastAs:">mcastAs: aChatId	^self new initializeMcastId: aChatId</body></methods><methods><class-id>OpenMChat</class-id> <category>actions</category><body package="OpenMChat" selector="chatWithParty">chatWithParty	&lt;menuItem: 'Start Chat'		nameKey: nil		menu: #(#partyMenu)		position: 2.3&gt;	| topic party sessionId |	session notNil ifTrue: [^Dialog warn: 'You have to leave the current session to start another one !'].	party := self parties selection.	party = id ifTrue: [^self].	topic := Dialog request: 'What is the topic ?' initialAnswer: 'General'.	topic isNil ifTrue: [^self].	sessionId := Time now asSeconds.	session := self joinGroupId: sessionId.	all startingSession: sessionId for: id with: party on: topic.	self message onChangeSend: #sendMessage to: self.</body></methods><methods><class-id>OpenMChat class</class-id> <category>interface specs</category><body package="OpenMChat" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #windowLabel 			#bounds: #(#{Graphics.Rectangle} 399 275 726 669 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 -28 1 -62 1 -2 1 ) 					#model: #message ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 2 0 98 0 -30 1 ) 					#model: #parties 					#tabable: false 					#menu: #partyMenu 					#selectionType: #highlight ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 2 0 -2 1 -30 1 ) 					#flags: 9 					#component: #textView ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -58 1 -26 1 -2 1 -2 1 ) 					#model: #leaveSession 					#tabable: false 					#label: 'Leave' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="OpenMChat" selector="openMChat">openMChat	&lt;menuItem: 'Open MChat'		icon: nil		nameKey: nil		menu: #(#menuBar #tools)		position: 12.50&gt;	| id protocolMessage |	id := Dialog request: 'Your chat ID ?'.	id isNil ifTrue: [^self].	protocolMessage := Dialog choose: 'What type of protocol to use ?'				labels: #('Mcast' 'Bcast' 'Bcast (LAN)')				values: #(mcastAs: bcastAs: bcastLANAs:)				default: #mcastAs:.	(OpenMChat perform: protocolMessage with: id) open</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>