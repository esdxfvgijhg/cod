<?xml version="1.0"?><st-source><!-- Name: I18nRuntimeNotice: Copyright © 2013 Cincom Systems, Inc.  All Rights Reserved.#installBeforeContinuing: trueComment: This package contains code that's required for using the Internationalizer package. It defines the methods #asIs, which mark a literal so that the Internationalizer doesn't pick it up as string that needs to be converted into a user message. It also provides a general method for CharacterArray to convert it into a proper UserMessage-Key, called #userMessageKey.DbIdentifier: bear73DbTrace: 397253DbUsername: gheegDbVersion: 7.10 - 8PackageName: I18nRuntimeParcel: #('I18nRuntime')ParcelName: I18nRuntimePrintStringCache: (7.10 - 8,gheeg)Version: 7.10 - 8Date: 9:45:06 AM March 1, 2013 --><time-stamp>From VisualWorks®, Pre-Release 7.10 (mar13.1) of March 1, 2013 on March 1, 2013 at 9:45:06 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>OS.MC_FileBTree class</class-id> <category>testing</category><body package="I18nRuntime">createNewMapFor: fn	"FileBTree createNewMapFor: 'test'"	| fn1 fn2 fName |	"overridden because source defaults to UTF8 if BOM support is not loaded. 	Otherwise source is defined as #autoDetectOrUTF8:UTF8WithBOM:"	fn1 := ((fn asString, '.lbl') asFilename withEncoding: #source) readStream.	fName := (fn asString, '.idx') asFilename.	fName definitelyExists ifTrue: [fName delete].	fn2 := self named: fName asString.	[[| scan |	fn2 recordLock: true.	fn2 at: '123' put: 0.	scan := MessageFileParser new scan: fn1.	scan parseSourceOntoFile: fn2.	fn2 recordLock: false.]		ensure: [fn1 close. fn2 close]]		ifCurtailed:			["An error occurred--remove the incomplete index file."			fName definitelyExists ifTrue: [fName delete]]</body></methods><methods><class-id>Core.ArrayedCollection</class-id> <category>accessing</category><body package="I18nRuntime">asIs	"as is marks a string to not be internationalized"	^self</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>accessing</category><body package="I18nRuntime">asIs	"as is marks a string to not be internationalized"	^self</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>i18n</category><body package="I18nRuntime">asUserMessageKey	| proposedKey s prefix capital suffix |	s := (self species new: self size) writeStream.	capital := false.	self trimBlanks do: 			[:each |			each == $&amp;				ifTrue: [s nextPut: $_]				ifFalse: 					[each isAlphaNumeric						ifTrue: 							[(s position = 0 and: [each isDigit]) ifTrue: [s nextPut: $_].							s nextPut: (capital										ifTrue: 											[capital := false.											each asUppercase]										ifFalse: [each])]						ifFalse: [each == $' ifFalse: [capital := true]]]].	proposedKey := s contents.	"if the label starts or ends with blanks, prefix or suffix with _"	prefix := '' asIs.	suffix := '' asIs.	(self findFirst: #isAlphaNumeric) &gt; 1 ifTrue: [prefix := '_' asIs].	(self findLast: #isAlphaNumeric) &lt; self size ifTrue: [suffix := '_' asIs].	^(prefix , proposedKey , suffix contractToLiteral: 48) asSymbol</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>converting</category><body package="I18nRuntime">contractToLiteral: charCount	"Shorten by ellipsis if too long"	| half |	self size &lt; charCount ifTrue: [^self].	half := charCount // 2.	^self		copyReplaceFrom: half		to: self size - (charCount - half) + 2		with: '___' asIs	"	'antidisestablishmentarianism' contractToLiteral: 10 'anti___ism'	"</body></methods><methods><class-id>Core.Object class</class-id> <category>editor</category><body package="I18nRuntime">i18nHintPragmas	&lt;pragmas: #class&gt;	&lt;pragmas: #instance&gt;	^#(#i18nSelectorsToIgnore #i18nPragmasToIgnore)</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ArrayedCollection</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>CharacterArray</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class></st-source>