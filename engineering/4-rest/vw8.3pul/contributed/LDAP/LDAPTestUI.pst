<?xml version="1.0"?><st-source><!-- Name: LDAPTestUINotice: Copyright 2001-2004 Matt Rosen, Jan SchuemmerThis utility is free to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: Simple UI for connecting to an LDAP server and browsing its contents.DbIdentifier: bear73DbTrace: 482870DbUsername: nrossDbVersion: 8.2 - 1DevelopmentPrerequisites: #(#(#package 'LDAP' ''))KSignature: #('definedClasses' 3 'definedClassesHash' 3375676753 'extendedClasses' 0 'extendedClassesHash' 0)PackageName: LDAPTestUIParcel: #('LDAPTestUI')ParcelName: LDAPTestUIPrerequisiteParcels: #(#('LDAP' ''))PrintStringCache: (8.2 - 1,nross)Version: 8.2 - 1Date: 1:08:30 PM January 15, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (jan16.2) of January 15, 2016 on January 15, 2016 at 1:08:30 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>LDAPBindPanel</name><environment>Net</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>port user password host </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LDAP-Tools</category><attributes><package>LDAPTestUI</package></attributes></class><comment><class-id>Net.LDAPBindPanel</class-id><body>A subpanel for use in specifying connection specific information for an LDAP server.  Provides functionality for saving connection/bind information as the default for next time.Instance Variables:	host		&lt;ValueHolder on String&gt;		domain name of host LDAP server lives on	password	&lt;ValueHolder on String&gt;		password to use corresponding to user	port			&lt;ValueHolder on Integer&gt;	port number on which LDAP service can be found.  											LDAP default is 389.	user		&lt;ValueHolder on String&gt;		user distinguished name for binding (login)Class Variables:	BindDefaults	&lt;Dictionary&gt;	used to hold default connection/bind settings for next time</body></comment><class><name>LDAPBrowser</name><environment>Net</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>entryDescription base bind filter attributes scope entryList bindPanel results </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LDAP-Tools</category><attributes><package>LDAPTestUI</package></attributes></class><comment><class-id>Net.LDAPBrowser</class-id><body>A simple tool to allow specification of search base, scope, filter, and attributes desired.  Distinguished names of entries found as result of the search are shown in an entry list.  Selecting a distinguished name in the list shows the string representation of the attributes associated with the selected entry.Instance Variables:	attributes			&lt;ValueHolder on String&gt;		space delimited list of attribute names to be returned by search	base				&lt;ValueHolder on String&gt;		distinguished name that will be the base of the search	bind				&lt;ValueHolder on String&gt;		description of current connection host and port	bindPanel			&lt;LDAPBindPanel&gt;			subcanvas used to display and change connection information	entryDescription		&lt;ValueHolder on String&gt;		string representation of the attributes associated with selected entry	entryList			&lt;SelectionInList&gt;			list containing distinguished names of LDAPEntry objects resulting from search	filter				&lt;ValueHolder on String&gt;		LDAP search filter string to be used for search	results				&lt;Dictionary&gt;				search results.  key is entry distinguished name.  value is entry.	scope				&lt;ValueHolder on Integer&gt;	see LDAPv2 class protocol constants-scope for meaningful values</body></comment><class><name>LDAPSchemaBrowser</name><environment>Net</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>entryDescription bindPanel schemaView entryList schema </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LDAP-Tools</category><attributes><package>LDAPTestUI</package></attributes></class><comment><class-id>Net.LDAPSchemaBrowser</class-id><body>Simple browser to allow viewing the schema associated with an LDAP server.  User specifies server connection information using the LDAPBindPanel subcanvas and clicks on the FetchSchema button.  User may then ask for display of attribute types, object class definitions, or matching rule definitions in the Entries list.  Selection of an entry distinguished name in the list causes a string representation of the attributes associated with the selected entry to be displayed.Instance Variables:	bindPanel			&lt;LDAPBindPanel&gt;			subcanvas used to display and change connection information	entryDescription		&lt;ValueHolder on String&gt;		string representation of attributes associated with selected schema entry	entryList			&lt;SelectionInList&gt;			list of distinguished names of schema entries	schema				&lt;LDAPSchema&gt;			LDAPSchema object obtained from LDAP server	schemaView		&lt;ValueHolder on Symbol&gt;	determines which schema entries to show in entryList													#A = attribute types (default)													#O = object class definitions													#M = matching rule definitions</body></comment><shared-variable><name>BindDefaults</name><environment>Net.LDAPBindPanel</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>LDAPTestUI</package></attributes></shared-variable><methods><class-id>Net.LDAPBindPanel</class-id> <category>aspects</category><body package="LDAPTestUI">host	^host isNil		ifTrue:			[host := (self class bindDefaults at: #host ifAbsent: [String new]) asValue]		ifFalse:			[host]</body><body package="LDAPTestUI">password	^password isNil		ifTrue:			[password := (self class bindDefaults at: #password ifAbsent: [String new]) asValue]		ifFalse:			[password]</body><body package="LDAPTestUI">port	^port isNil		ifTrue:			[port := (self class bindDefaults at: #port ifAbsent: [0]) asValue]		ifFalse:			[port]</body><body package="LDAPTestUI">user	^user isNil		ifTrue:			[user := (self class bindDefaults at: #userdn ifAbsent: [String new]) asValue]		ifFalse:			[user]</body></methods><methods><class-id>Net.LDAPBindPanel</class-id> <category>actions</category><body package="LDAPTestUI">saveDefaults	self class bindDefaults at: #host put: self host value.	self class bindDefaults at: #port put: self port value.	self class bindDefaults at: #userdn put: self user value.	self class bindDefaults at: #password put: self password value.</body></methods><methods><class-id>Net.LDAPBindPanel class</class-id> <category>accessing</category><body package="LDAPTestUI">bindDefaults	^ BindDefaults</body></methods><methods><class-id>Net.LDAPBindPanel class</class-id> <category>class initialization</category><body package="LDAPTestUI">initialize	"LDAPBindPanel initialize"	BindDefaults := Dictionary new.	BindDefaults at: #host put: String new.	BindDefaults at: #port put: LDAPv2 defaultPort.	BindDefaults at: #userdn put: String new.	BindDefaults at: #password put: String new.</body></methods><methods><class-id>Net.LDAPBrowser</class-id> <category>initialize-release</category><body package="LDAPTestUI">initialize	self entryList selectionIndexHolder onChangeSend: #entrySelected to: self.	results := Dictionary new</body></methods><methods><class-id>Net.LDAPBrowser</class-id> <category>aspects</category><body package="LDAPTestUI">attributes	^attributes isNil		ifTrue:			[attributes := '' asValue]		ifFalse:			[attributes]</body><body package="LDAPTestUI">base	^base isNil		ifTrue:			[base := 'o=San Joaquin Delta College, c=US' asValue]		ifFalse:			[base]</body><body package="LDAPTestUI">bind	^bind isNil		ifTrue:			[bind := self getBindValue asValue]		ifFalse:			[bind]</body><body package="LDAPTestUI">bind: aValueHolder	^bind:= aValueHolder</body><body package="LDAPTestUI">bindPanel	^bindPanel isNil		ifTrue:			[bindPanel := LDAPBindPanel new]		ifFalse:			[bindPanel]</body><body package="LDAPTestUI">entryDescription	^entryDescription isNil		ifTrue:			[entryDescription := String new asValue]		ifFalse:			[entryDescription]</body><body package="LDAPTestUI">entryList	^entryList isNil		ifTrue:			[entryList := SelectionInList new]		ifFalse:			[entryList]</body><body package="LDAPTestUI">filter	^filter isNil		ifTrue:			[filter := LDAPConnection defaultFilter asValue]		ifFalse:			[filter]</body><body package="LDAPTestUI">scope	^scope isNil		ifTrue:			[scope := 2 asValue]		ifFalse:			[scope]</body></methods><methods><class-id>Net.LDAPBrowser</class-id> <category>actions</category><body package="LDAPTestUI">doSearch	| found foundEntry myConn attrs cons |	"Establish the connection.  No need to authenticate to this server."	myConn := LDAPConnection new.	[self bindPanel user value size &gt; 0 			ifTrue: [myConn connectToHost: self bindPanel host value 							port: self bindPanel port value 							dn: self bindPanel user value 							password: self bindPanel password value]			ifFalse: [myConn connectToHost: self bindPanel host value 							port: self bindPanel port value]]		on: LDAPException		do: [:ex | myConn isConnected					ifTrue: [myConn disconnect].				  ^ Dialog warn: 'Connection unsuccessful.  ', (ex toString)].(Delay forMilliseconds: 1) wait.	"Specify the distinguished name of the base entry for search, the filter, and the desired attributes."	self base value size = 0		ifTrue: [^ Dialog warn: 'Search Base Distinguished Name is required.'].	attrs := self attributes value tokensBasedOnAnyOf: (Array with: Character space with: $,) answerTokens: false.	cons := LDAPSearchConstraints new.	cons batch: 0.	"Conduct the search, making sure the connection is closed afterward."	[ found := myConn searchForDN: self base value						scope: (self scope value - 1)						filter: self filter value						attributes: attrs						attributesOnly: false						constraints: cons]		on: LDAPException		do: [:ex | Dialog warn: 'LDAPException occurred.  ', (ex toString).				  ^ String new].	"Now present the results.  The search answered an LDAPSearchResults object, so enumerate over it."	results := Dictionary new.	[[found hasMoreElements]		whileTrue: [[foundEntry := found next. results at: foundEntry dn put: foundEntry]						on: LDAPException, LDAPReferralException						do: [:ex |								(ex isKindOf: LDAPException)									ifTrue: [ "too many results - return what we have so far" ]									ifFalse: ["to be implemented" "ex urls do: [:aURL | ...code for handing referrals...].											ex resume: referralResult"]]]] ensure: [myConn disconnect].	self entryList list: results keys asSortedCollection</body><body package="LDAPTestUI">inspectSelection	(results at: self entryList selection) inspect</body><body package="LDAPTestUI">setBind	self openDialogInterface: #bindDialogSpec.	self bind value: self getBindValue.</body></methods><methods><class-id>Net.LDAPBrowser</class-id> <category>private</category><body package="LDAPTestUI">getBindValue	^ self bindPanel host value, ' port: ', self bindPanel port value printString</body></methods><methods><class-id>Net.LDAPBrowser</class-id> <category>updating</category><body package="LDAPTestUI">entrySelected	| entry outStream |	self entryList selection isNil		ifTrue: [^ self entryDescription value: String new].	entry := results at: self entryList selection.	outStream := WriteStream on: String new.	entry getAttributeSet getAttributes do: [:anAttribute | | subtypes first attrStream |		subtypes := anAttribute getSubtypes.		outStream nextPutAll: anAttribute name.		outStream nextPutAll: ': '.		" Show something reasonable for binary attribute values."		(subtypes includes: 'binary')			ifTrue: [outStream nextPutAll: ' binary data'.					outStream cr]			ifFalse: [first := true.					attrStream := anAttribute getStringValues.					[attrStream atEnd]						whileFalse: [							first								ifTrue: [first := false]								ifFalse: [outStream tab].							outStream nextPutAll: attrStream next.							outStream cr]].		outStream cr].	self entryDescription value: outStream contents</body></methods><methods><class-id>Net.LDAPBrowser class</class-id> <category>interface opening</category><body package="LDAPTestUI">openForBind: aValueHolder	| instance |	instance := self basicNew.	instance bind: aValueHolder.	instance initialize.	^ instance open</body></methods><methods><class-id>Net.LDAPSchemaBrowser</class-id> <category>aspects</category><body package="LDAPTestUI">entryDescription	^entryDescription isNil		ifTrue:			[entryDescription := String new asValue]		ifFalse:			[entryDescription]</body><body package="LDAPTestUI">entryList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^entryList isNil		ifTrue:			[entryList := SelectionInList new]		ifFalse:			[entryList]</body><body package="LDAPTestUI">schemaView	^schemaView isNil		ifTrue:			[schemaView := #A asValue]		ifFalse:			[schemaView]</body></methods><methods><class-id>Net.LDAPSchemaBrowser</class-id> <category>accessing</category><body package="LDAPTestUI">bindPanel	^bindPanel isNil		ifTrue:			[bindPanel := LDAPBindPanel new]		ifFalse:			[bindPanel]</body></methods><methods><class-id>Net.LDAPSchemaBrowser</class-id> <category>private</category><body package="LDAPTestUI">getEntryDictionary	self schemaView value == #A		ifTrue: [^ schema attributes].	self schemaView value == #O		ifTrue: [^ schema objectClasses].	self schemaView value == #M		ifTrue: [^ schema matchingRules].</body></methods><methods><class-id>Net.LDAPSchemaBrowser</class-id> <category>initialize-release</category><body package="LDAPTestUI">initialize	super initialize.	self schemaView onChangeSend: #schemaViewChanged to: self.	self entryList selectionIndexHolder onChangeSend: #entrySelected to: self</body></methods><methods><class-id>Net.LDAPSchemaBrowser</class-id> <category>updating</category><body package="LDAPTestUI">entrySelected	| entry |	entryList selection isNil		ifTrue: [^ self entryDescription value: String new].	entry := self getEntryDictionary at: entryList selection ifAbsent: [nil].	entry isNil		ifTrue: [^ self entryDescription value: String new].	self entryDescription value: (entry toString)</body><body package="LDAPTestUI">schemaViewChanged	schema isNil		ifTrue: [^ self].	self entryList list: self getEntryDictionary keys asSortedCollection</body></methods><methods><class-id>Net.LDAPSchemaBrowser</class-id> <category>actions</category><body package="LDAPTestUI">fetchSchema	| myConn |	myConn := LDAPConnection new.	[self bindPanel user value size &gt; 0 			ifTrue: [myConn connectToHost: self bindPanel host value 							port: self bindPanel port value 							dn: self bindPanel user value 							password: self bindPanel password value]			ifFalse: [myConn connectToHost: self bindPanel host value 							port: self bindPanel port value]]		on: LDAPException		do: [:ex | myConn isConnected					ifTrue: [myConn disconnect].				  Dialog warn: 'Connection unsuccessful.  ', (ex toString).				  ^ String new].(Delay forMilliseconds: 1) wait.	schema := LDAPSchema new.	[[schema fetchSchemaUsingConnection: myConn]		on: LDAPException		do: [:ex | Dialog warn: 'LDAPException: ', ex toString.				  ^ String new]]	ensure: [myConn disconnect].	#( #schemaViewAttribute #schemaViewObjectClass #schemaViewMatchingRule )		do: [:widgetId | (self builder componentAt: widgetId) enable].	self schemaViewChanged</body></methods><methods><class-id>Net.LDAPBindPanel class</class-id> <category>interface specs</category><body package="LDAPTestUI">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 389 455 892 570 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 48 11 ) 					#label: 'Host' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 92 8 371 35 ) 					#name: #hostField 					#model: #host ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 382 11 ) 					#label: 'Port' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 423 9 495 34 ) 					#name: #portField 					#model: #port 					#alignment: #right 					#type: #number 					#formatString: '0' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 22 48 ) 					#label: 'User DN' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 92 44 495 72 ) 					#name: #userField 					#model: #user ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 12 83 ) 					#label: 'Password' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 92 81 203 106 ) 					#name: #passwordField 					#model: #password 					#type: #password ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 379 80 494 108 ) 					#name: #saveDefaultsButton 					#model: #saveDefaults 					#label: 'Save as Default' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Net.LDAPBrowser class</class-id> <category>interface specs</category><body package="LDAPTestUI">bindDialogSpec	"UIPainter new openOnClass: self andSelector: #bindDialogSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#min: #(#{Core.Point} 515 134 ) 			#max: #(#{Core.Point} 515 134 ) 			#bounds: #(#{Graphics.Rectangle} 383 445 898 579 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 4 7 509 125 ) 					#name: #bindPanel 					#majorKey: #LDAPBindPanel 					#minorKey: #windowSpec 					#clientKey: #bindPanel ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 321 91 377 118 ) 					#model: #accept 					#label: 'OK' 					#isDefault: true 					#defaultable: true ) ) ) )</body><body package="LDAPTestUI">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'LDAP Browser' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 521 432 1152 837 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 6 41 ) 					#label: 'Base DN' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 75 37 380 65 ) 					#name: #baseField 					#model: #base ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 389 10 ) 					#label: 'Scope' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 439 5 622 32 ) 					#name: #scopeButton 					#model: #scope 					#menu: #scopeMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 32 72 ) 					#label: 'Filter' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 75 69 380 97 ) 					#name: #filterField 					#model: #filter ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 16 7 70 34 ) 					#name: #setBindButton 					#model: #setBind 					#label: 'Bind To' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 75 6 380 34 ) 					#name: #bindField 					#model: #bind 					#tabable: false 					#isReadOnly: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 389 49 ) 					#label: 'Attributes' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 387 69 597 97 ) 					#name: #attributesField 					#model: #attributes ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 17 102 69 127 ) 					#name: #searchButton 					#model: #doSearch 					#label: 'Search' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 131 0 262 0 -4 1 ) 					#name: #entryList 					#model: #entryList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #inspectSelection ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 266 0 131 0 -4 1 -4 1 ) 					#name: #entryText 					#model: #entryDescription 					#isReadOnly: true 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 266 111 ) 					#label: 'Entry Description' ) ) ) )</body></methods><methods><class-id>Net.LDAPBrowser class</class-id> <category>resources</category><body package="LDAPTestUI">scopeMenu	"MenuEditor new openOnClass: self andSelector: #scopeMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Base DN Only' 				#value: 1 ) 			#(#{UI.MenuItem} 				#rawLabel: 'One Level Under Base DN' 				#value: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 'All Sublevels Under Base DN' 				#value: 3 ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Net.LDAPSchemaBrowser class</class-id> <category>interface specs</category><body package="LDAPTestUI">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'LDAP Schema Browser' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 320 272 960 752 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 6 7 512 127 ) 					#name: #bindPanel 					#majorKey: #LDAPBindPanel 					#minorKey: #windowSpec 					#clientKey: #bindPanel ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 516 16 635 45 ) 					#name: #fetchSchemaButton 					#model: #fetchSchema 					#label: 'Fetch Schema' 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 519 56 ) 					#name: #schemaViewAttribute 					#flags: 32 					#model: #schemaView 					#label: 'Attributes' 					#select: #A ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 519 82 ) 					#name: #schemaViewObjectClass 					#flags: 32 					#model: #schemaView 					#label: 'Object Classes' 					#select: #O ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 519 107 ) 					#name: #schemaViewMatchingRule 					#flags: 32 					#model: #schemaView 					#label: 'Matching Rules' 					#select: #M ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 156 0 262 0 -4 1 ) 					#name: #entryList 					#model: #entryList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 21 134 ) 					#label: 'Entries' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 279 136 ) 					#label: 'Entry Description' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 268 0 156 0 -4 1 -4 1 ) 					#name: #entryDescriptionText 					#model: #entryDescription 					#tabRequiresControl: true ) ) ) )</body></methods><initialize><class-id>Net.LDAPBindPanel</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>