<?xml version="1.0"?><st-source><!-- Name: SUnitToo(lsoverage)Notice: Copyright 2006 - 2015 Michael Lucas-SmithThis utility is free to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: I am the UI for the coverage tool:Click the 'Cover Tests' button in the SUnitToo(ls) toolbar to gather coverage information while running one or more tests.  'Coverage' will be added to the code tabs (N.B. you may need to click again on the method after running the test to make the new tab appear).  It will show (by colour-coding) what code was run.  The navigator will also show which methods were run and percentages of methods executed against packages, classes and protocols.A 'Clear coverage' button at the left of the RB's toolbar lets you flush the coverage information.DbIdentifier: bear73DbTrace: 454809DbUsername: nrossDbVersion: 2.3DevelopmentPrerequisites: #(#(#any 'SUnitToo(verage)' '') #(#any 'SUnitToo(ls)' '') #(#any 'Browser-BrowserUI' ''))PackageName: SUnitToo(lsoverage)Parcel: #('SUnitToo(lsoverage)')ParcelName: SUnitToo(lsoverage)PrerequisiteDescriptions: #(#(#name 'SUnitToo(verage)') #(#name 'SUnitToo(ls)' #componentType #package) #(#name 'Browser-BrowserUI' #componentType #package))PrerequisiteParcels: #(#('SUnitToo(verage)' '') #('SUnitToo(ls)' '') #('Browser-BrowserUI' ''))PrintStringCache: (2.3,nross)Version: 2.3Date: 9:56:49 AM January 16, 2015 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.1 (jan15.2) of January 16, 2015 on January 16, 2015 at 9:56:49 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SUnitTooCoverageTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>SUnitToo(lsoverage)</package></attributes></class><methods><class-id>Refactory.Browser.SUnitTooCoverageTool</class-id> <category>updating</category><body package="SUnitToo(lsoverage)">updateContents	| coverage |	coverage := SUnit.Coverage.MethodCoverage percentageCoverageFor: self definition asCompiledMethod.	coverage hasCoverage ifFalse: [		^self			text:				(self definition asCompiledMethod getSource asText emphasizeAllWith: #color -&gt; ColorValue red)].	self text: coverage sourceText</body></methods><methods><class-id>Refactory.Browser.SUnitTooCoverageTool</class-id> <category>accessing</category><body package="SUnitToo(lsoverage)">menu	^nil</body></methods><methods><class-id>Refactory.Browser.SUnitTooCoverageTool</class-id> <category>accepting</category><body package="SUnitToo(lsoverage)">accept: aText from: aController	self updateContents</body></methods><methods><class-id>Refactory.Browser.SUnitTooCoverageTool</class-id> <category>tab management</category><body package="SUnitToo(lsoverage)">isActive	(codeModel definition isKindOf: RBMethodDefinition) ifFalse: [^false].	SUnit.Coverage.MethodCoverage		percentageCoverageFor: codeModel definition asCompiledMethod		ifAbsent: [^false].	^true</body><body package="SUnitToo(lsoverage)">tabName	| name coverage hasCoverage shouldHaveCoverage |	name := (#Coverage &lt;&lt; #browser &gt;&gt; 'Coverage').	coverage := SUnit.Coverage.MethodCoverage		percentageCoverageFor: codeModel definition asCompiledMethod		ifAbsent: [nil].	hasCoverage := coverage notNil.	shouldHaveCoverage := false.	hasCoverage ifTrue:		[coverage := coverage methodCoverage.		hasCoverage := coverage notNil.		shouldHaveCoverage := SUnit.Coverage.MethodCoverage			hasCoverageForClass: codeModel definition implementingClass			inPundle: codeModel pundle].	shouldHaveCoverage ifFalse: [^name asString].	^(hasCoverage not or: [coverage isPartiallyCovered])		ifTrue: [name asText emphasizeAllWith: (Array with: #color -&gt; ColorValue red)]		ifFalse: [name asText emphasizeAllWith: (Array with: #color -&gt; ColorValue blue)]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>resources</category><body package="SUnitToo(lsoverage)">clearCoverageIcon	^ToolbarIconLibrary visualFor: #clearCoverage ifAbsent: [nil]</body></methods><methods><class-id>Tools.MethodDefinition</class-id> <category>accessing</category><body package="SUnitToo(lsoverage)">asCompiledMethod	^implementingClass compiledMethodAt: selector</body></methods><methods><class-id>Store.PackageModel</class-id> <category>printing</category><body package="SUnitToo(lsoverage)">displayCoverageText	| percentage prefix |	^(percentage := self coveragePercentage) isNil		ifTrue: ['' asText]		ifFalse: [			prefix := ('(' , percentage printString , '%) ') asText.			percentage &lt; 100 ifTrue: [prefix emphasizeAllWith: #color -&gt; ColorValue red].			prefix]</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>private</category><body package="SUnitToo(lsoverage)">displayPrefixTextFor: aClass	| percentage prefix |	^(percentage := SUnit.Coverage.MethodCoverage		calculateCoveragesForClass: aClass		inPundle: navigator pundle) isNil		ifTrue: ['' asText]		ifFalse: [			prefix := ('(' , percentage printString , '%) ') asText.			percentage &lt; 100 ifTrue: [prefix emphasizeAllWith: #color -&gt; ColorValue red].			prefix]</body><body package="SUnitToo(lsoverage)">displayTextFor: classNameWrapper	"The addition of the string '(self displayPrefixTextFor: each) , ' in the last line is the only intentional alteration to the base in this override."	| type each simpleName |	each := self objectForName: classNameWrapper fullName.	type := (each notNil and: [each isPatched])		ifTrue: [Array with: #color -&gt; self overriddenColor]		ifFalse: [#()].	simpleName := (each isNil ifTrue: [''] ifFalse: [each name]) asText.	(self class shouldBoldDefinedItems and: [		each notNil and: [self isClassOrNameSpaceDefinedInSelection: each]])		ifTrue: [simpleName emphasizeAllWith: (type copyWith: #bold)]		ifFalse: [simpleName emphasizeAllWith: type].	^(self displayPrefixTextFor: each) , simpleName</body></methods><methods><class-id>Refactory.Browser.PackageListElement</class-id> <category>printing</category><body package="SUnitToo(lsoverage)">displayString	"The addition of the string 'codeComponent displayCoverageText , ' is the only intentional alteration to the base in this override."	^codeComponent displayCoverageText ,		(#{Store.DbRegistry}			ifDefinedDo: [:ignore | codeComponent toolListText]			elseDo: [codeComponent displayString])</body></methods><methods><class-id>Store.Glorp.StorePundle</class-id> <category>displaying</category><body package="SUnitToo(lsoverage)">displayCoverageText	"PackageListElement is used to display both PundleModels in the main browser and StorePundles in the shadow browser, so we must provide this nonce implementation for the latter."	^'' asText</body></methods><methods><class-id>Refactory.Browser.HierarchyPundleNavigatorPart</class-id> <category>private</category><body package="SUnitToo(lsoverage)">displayTextFor: aPundleModel	"The addition of the string 'aPundleModel displayCoverageText , ' is the only intentional alteration to the base in this override."	| baseText |	baseText := aPundleModel displayCoverageText , aPundleModel toolListText.	aPundleModel == definingPackage ifTrue:		[baseText addEmphasis: #(#bold) removeEmphasis: #() allowDuplicates: true].	^baseText</body></methods><methods><class-id>Refactory.Browser.SUnitTooMiniBar</class-id> <category>accessing</category><body package="SUnitToo(lsoverage)">coverageWrapperClass	^SUnit.Coverage.CoverageWrapper</body></methods><methods><class-id>Refactory.Browser.SUnitTooMiniBar</class-id> <category>actions</category><body package="SUnitToo(lsoverage)">coverTests	self		coverTestsUsing: [:each | each run]		whenDone:			[(self hasBrokenTests and: [results ranCount &gt; 1])				ifTrue: [self browseBrokenTests]]</body></methods><methods><class-id>Refactory.Browser.SUnitTooMiniBar</class-id> <category>private</category><body package="SUnitToo(lsoverage)">coverTestsDo: aBlock 	| wrapper |	wrapper := self coverageWrapperClass on: #performTest				inClass: SUnit.TestCase.	wrapper ifNotNil: [wrapper install].	^aBlock ensure: [self coverageWrapperClass nuke]</body><body package="SUnitToo(lsoverage)">coverTestsUsing: aTestRunningBlock whenDone: aCompletionBlock	| progressView suite |	suite := self makeSuite.	suite isEmpty ifTrue: [^self].	self clearResults.	progressView := self addProgressView: suite.	progressView		when: SUnitTooRunDone		do:			[:note | 			[progressView unsubscribe: self.			results := note results.			self				updateBackColor;				refreshLists.			aCompletionBlock value] uiEventNowFor: self topComponent]		for: self.	progressView runSuiteUsing: [:each | self coverTestsDo: [aTestRunningBlock value: each]]</body></methods><methods><class-id>Refactory.Browser.SelectorNavigatorPart</class-id> <category>private</category><body package="SUnitToo(lsoverage)">displayPrefixTextFor: aMethodDefinition	| prefix percentage |	^(percentage := SUnit.Coverage.MethodCoverage		calculateCoveragesFor: aMethodDefinition		inPundle: navigator pundle) isNil		ifTrue: ['' asText]		ifFalse: [			prefix := ('(' , percentage printString , '%) ') asText.			percentage &lt; 100 ifTrue: [prefix emphasizeAllWith: #color -&gt; ColorValue red].			prefix]</body><body package="SUnitToo(lsoverage)">displayTextFor: aMethodDefinition	"The addition of the string '(self displayPrefixTextFor: aMethodDefinition) , ' is the only intentional alteration to the base in this override."	| text |	text := (self displayPrefixTextFor: aMethodDefinition) , (super displayTextFor: aMethodDefinition).	navigator showOnlyFiltered ifTrue: [^text].	(navigator packages anySatisfy:		[:each |		each			definesSelector: aMethodDefinition selector			forClass: aMethodDefinition implementingClass])		ifTrue:			[text addEmphasis: #(#bold) removeEmphasis: #() allowDuplicates: false].	^text</body></methods><methods><class-id>Store.PundleModel</class-id> <category>printing</category><body package="SUnitToo(lsoverage)">displayCoverageText	^'' asText</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>menus</category><body package="SUnitToo(lsoverage)">clearCoverage	&lt;menuItem: 'Clear Coverage'		icon: #clearCoverageIcon		nameKey: nil		enablement: nil		indication: nil		menu: #(#toolbarMenu)		position: 1		helpText: 'Clear coverage'&gt;	SUnit.Coverage.Coverages := EphemeronDictionary new.	self builder window display</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="SUnitToo(lsoverage)">clearCoverage20x20	"UIMaskEditor new openOnClass: self andSelector: #clearCoverage20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 6) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: Graphics.ColorValue white; at: 4 put: Graphics.ColorValue yellow; at: 5 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 7398 scaledBlue: 7926); at: 6 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 2113 scaledBlue: 2113); yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"H @@H"H"H"H"H"H"H @@H"H"H"H"H"H"H @@H"H"H"H"H"URH @@H"UUUUH"H%H H @@H"T"H%@"IRL H @@H"T"H%HBT#DBH @@H"T"H%@EH1@"H @@H"T"H"IRLPH"H @@H"T"H"T#DBH"H @@H"T"H%H1@"H"H @@H"T"IELPH"H"H @@H"T"P @@H"H"H @@H"T$IDQ@H"H"H @@H"ABQDQ@H"H"H @@H"@@@@@@H"H"H @@H"H"H"H"H"H"H @@H"H"H"H"H"H"H @@H"H"H"H"H"H"H @@H"H"H"H"H"H"H @@'))</body><body package="SUnitToo(lsoverage)">clearCoverage20x20bw	"UIMaskEditor new openOnClass: self andSelector: #edit20x20bw"	&lt;resource: #image&gt;	^CachedImage		on:			(Image				extent: 20 @ 20				depth: 1				bitsPerPixel: 1				palette: CoveragePalette monoMaskPalette				usingBits:					#[0 0 0 0 0 0 0 0 0 0 0 0 0 1 128 0 31 130 64 0 16 196 64 0 16 168 128 0 16 241 0 0 16 34 0 0 16 68 0 0 16 136 0 0 16 144 0 0 16 240 0 0 16 16 0 0 16 16 0 0 31 240 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="SUnitToo(lsoverage)">clearCoverage20x20mask	"UIMaskEditor new openOnClass: self andSelector: #edit20x20mask"	&lt;resource: #image&gt;	^CachedImage		on:			(Image				extent: 20 @ 20				depth: 1				bitsPerPixel: 1				palette: CoveragePalette monoMaskPalette				usingBits:					#[0 0 0 0 0 0 0 0 0 0 0 0 0 1 128 0 31 131 192 0 31 199 192 0 31 239 128 0 31 255 0 0 31 254 0 0 31 252 0 0 31 248 0 0 31 240 0 0 31 240 0 0 31 240 0 0 31 240 0 0 31 240 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="SUnitToo(lsoverage)">coverTests20x20	"UIMaskEditor new openOnClass: self andSelector: #coverTests20x20"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2055 2055 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 4111 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L3L0@@L3L3L3L3L3L3L0@@L3L3"H"H"HL3L0@@L3L3"H"H"HL3L0@@L3L4"H"H"HX3L0@@L3L3QH"H!&amp;L3L0@@L3L3MH"H CL3L0@@L3L3MH"H CL3L0@@L3L3MGU9DCL3L0@@L3L3MGU9DCL3L0@@L3L3MGU9DCL3L0@@L3L3MG]7DCL3L0@@L3L3MG]7DCL3L0@@L3L3MGU9DCL3L0@@L3L3MGU9DCL3L0@@L3L3MGVYE#L3L0@@L3L3L4\QX3L3L0@@L3L3L3H&amp;L3L3L0@@L3L3L3L3L3L3L0@@L3L3L3L3L3L3L0@@'))</body><body package="SUnitToo(lsoverage)">coverTests20x20mask	"UIMaskEditor new openOnClass: self andSelector: #coverTests20x20mask"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 1 254 0 0 1 254 0 0 7 255 0 0 3 254 0 0 1 252 0 0 1 252 0 0 1 252 0 0 1 252 0 0 1 252 0 0 1 252 0 0 1 252 0 0 1 252 0 0 1 252 0 0 1 252 0 0 0 248 0 0 0 112 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>tool registration</category><body package="SUnitToo(lsoverage)">coverageToolClass	&lt;tool&gt;	^SUnitTooCoverageTool</body></methods><methods><class-id>Refactory.Browser.SUnitTooMiniBar</class-id> <category>building widgets</category><body package="SUnitToo(lsoverage)">coverButton	&lt;subpart: 2.5&gt;	| button |	button := self newButton action: [self coverTests].	button label: (ToolbarIconLibrary visualFor: #coverTests).	button helpText: #coverTests &gt;&gt; 'Cover Tests' &lt;&lt; #sunitToo.	^button</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>PundleModel</name><environment>Store</environment><super>Kernel.CodeComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dbInfo readonly </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class><class><name>PackageModel</name><environment>Store</environment><super>Store.PundleModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>models </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class><class><name>MethodDefinition</name><environment>Tools</environment><super>Tools.GeneralMethodDefinition</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inheritingClass implementingClass selector extraText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Tools-Programming</package></attributes></class><class><name>StorePundle</name><environment>Store.Glorp</environment><super>Store.Glorp.StoreSourceObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>comment properties propertiesBlob propertiesRecordDictionary version blessings currentBlessingLevel storeModel session versionless fullClasses </inst-vars><class-inst-vars>cache </class-inst-vars><imports>			private Store.*			private Store.Glorp.*			</imports><category></category><attributes><package>Store-Database Model</package></attributes></class><class><name>SelectorNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>RefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractRefactoringBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>policyClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>PackageListElement</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeComponent parent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>SUnitTooMiniBar</name><environment>Refactory.Browser</environment><super>UI.Panel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel results testCount testCountLabel updateProcess label isVisible </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>SUnitToo(ls)</package></attributes></class><class><name>BrowserTextTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>savedText changed textHolder originalText menuBarMenu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>HierarchyPundleNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>definingPackage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>ClassNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class></st-source>