<?xml version="1.0"?><st-source><!-- Name: FileBrowserExtensionsComment: Additional specialized buttons and file information text for use in the FileBrowser.DbIdentifier: bear73DbTrace: 146959DevelopmentPrerequisites: #(#(#any 'Tools-File Browser' '') #(#any 'LinuxSymlinkSupport' ''))PackageName: FileBrowserExtensionsParcel: #('FileBrowserExtensions')PrerequisiteParcels: #(#('Tools-File Browser' '') #('LinuxSymlinkSupport' ''))PrintStringCache: (7.7 - 2,smichael)Version: 7.7 - 2Date: 10:54:53 AM August 7, 2009 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.7 (aug09.1) of August 7, 2009 on August 7, 2009 at 10:54:53 AM </time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Tools.FileTools.FileBrowser</class-id> <category>directory tree</category><body package="FileBrowserExtensions" selector="goToHomeDirectory">goToHomeDirectory		| name |	name := OSSystemSupport new		getVariable: 'HOME'		ifAbsent: [Filename defaultDirectory asString].	name isEmpty ifFalse: [self selectDirectory: name asFilename]</body><body package="FileBrowserExtensions" selector="gotoImageFileDirectory">gotoImageFileDirectory	self selectDirectory: ObjectMemory imageDirectory</body><body package="FileBrowserExtensions" selector="selectParentDirectory">selectParentDirectory	| name destination |	name := self hasDirectoryInTreeSelected 				ifTrue: [self selectedDirectory asFilename asString]				ifFalse: [String new].	name isEmpty ifTrue: [^self].	Cursor wait showWhile: 			[destination := [name asFilename directory] on: Error do: [:ex | ^self].			(self isLocalDirectory: destination) 				ifTrue: [self selectDirectory: destination]				ifFalse: [self addAndSelectDirectory: destination]]</body><body package="FileBrowserExtensions" selector="selectVWHomeDirectory">selectVWHomeDirectory	(SystemUtils getEnvironmentVariable: 'VISUALWORKS' ifAbsent: [nil]) 		ifNotNil: [:string | self selectDirectory: string asFilename]</body></methods><methods><class-id>Tools.FileBrowser</class-id> <category>private</category><body package="FileBrowserExtensions" selector="directoryInfoText">directoryInfoText		| msg dirList dirStream |	msg := #isDirectory &lt;&lt; #dialogs &gt;&gt; '- directory -'.	dirStream := String new writeStream.	dirStream		nextPutAll: msg asString;		cr;		cr.	self writeLinkTargetOn: dirStream.	dirList := SortedCollection forStrings.	dirList addAll: ((Filename named: fileName) filesMatching: '*').	dirList		do:			[:name | 			dirStream				nextPutAll: name;				cr].	^dirStream contents asText		emphasizeFrom: 3		to: msg size - 2		with: #italic</body><body package="FileBrowserExtensions" selector="infoText">infoText	"Returns aText with proper emphasis information 	 from the file system information on fileName"		| fn dates stream |	fn := fileName asFilename.	dates := fn dates.	stream := TextStream on: String new.	self writeFileInfoHeaderOn: stream.	self writeLinkTargetOn: stream.	self		writeSize: fn fileSize		on: stream.	self writeModificationTimeFrom: dates on: stream.	self writeAccessTimeFrom: dates on: stream.	fn extension		ifNotNil:			[:ext | 			ext asLowercase = Parcel fileExtension				ifTrue: [self writeParcelInfoOn: stream]].	^stream contents</body></methods><methods><class-id>Tools.FileBrowser</class-id> <category>initialize-release</category><body package="FileBrowserExtensions" selector="initialize">initialize	"Initialize some instance variables and set up a dependency forfileEncoding."	list := #() asSortedStrings.	autoRead := false asValue.	patternAspect := (PluggableAdaptor on: self)		getSelector: #pattern		putSelector: #acceptPattern:.	defaultEncodings := IdentityDictionary new.	DefaultEncodings keysAndValuesDo:		[:key :value | defaultEncodings at: key put: value asValue].	currentFileEncoding := #default asValue.	currentFileEncoding onChangeSend: #changedEncoding to: self</body></methods><methods><class-id>Tools.FileBrowser</class-id> <category>private</category><body package="FileBrowserExtensions" selector="writeAccessTimeFrom:on:">writeAccessTimeFrom: aDictionary on: stream		| accessTime |	accessTime := (aDictionary at: #accessed) ifNil: [^self].	accessTime := self formatTime: accessTime.	stream		cr;		emphasis: #bold;		nextPutAll:				(#fileAccessTime &lt;&lt; #dialogs &gt;&gt; 'Last accessed:     ') asString;		emphasis: nil;		nextPutAll: accessTime</body><body package="FileBrowserExtensions" selector="writeFileInfoHeaderOn:">writeFileInfoHeaderOn: stream		stream		emphasis: #italic;		nextPutAll:				(#isFile &lt;&lt; #dialogs &gt;&gt;							'- file -  Select ''Get contents'' to view contents. ') asString</body><body package="FileBrowserExtensions" selector="writeLinkTargetOn:">writeLinkTargetOn: stream		| fn link target |	fn := fileName asFilename.	fn isSymlink ifFalse: [^self].	link := fn resolveAsSymlink.	target := fn fullyResolveAsSymlink.	stream		cr;		cr;		emphasis: #bold;		nextPutAll:				(#thisIsSymlink &lt;&lt; #dialogs &gt;&gt;							'This is a symbolic link pointing to:&lt;n&gt;     ') expandMacros;		emphasis: nil;		nextPutAll: link asString.	target = link ifTrue: [^self].	stream		cr;		emphasis: #bold;		nextPutAll:				(#fullyResolvingTo &lt;&lt; #dialogs &gt;&gt;							'which is also a symlink. The chain eventually resolves to:&lt;n&gt;     ')						expandMacros;		emphasis: nil;		nextPutAll: target asString</body><body package="FileBrowserExtensions" selector="writeModificationTimeFrom:on:">writeModificationTimeFrom: aDictionary on: stream		| modTime |	modTime := (aDictionary at: #modified) ifNil: [^self].	modTime := self formatTime: modTime.	stream		cr;		emphasis: #bold;		nextPutAll:				(#fileModifiedTime &lt;&lt; #dialogs &gt;&gt; 'Last modified:     ') asString;		emphasis: nil;		nextPutAll: modTime</body><body package="FileBrowserExtensions" selector="writeParcelInfoOn:">writeParcelInfoOn: aStream	"Write parcel information from filename to aStream."		| codeReader info timestamp prereqs |	aStream		cr;		cr.	codeReader := CodeReader new.	[info := codeReader readInfoFromFileNamed: fileName]		on: CodeReader fileFormatSignal		do:			[:ex | 			info := Dictionary new.			codeReader fileFormat notNil				ifTrue:					[info						at: #format						put: codeReader fileFormat]].	aStream		emphasis: #bold;		nextPutAll: (#parcelName &lt;&lt; #dialogs &gt;&gt; 'Parcel:	') asString;		emphasis: nil;		nextPutAll:				(info						at: #parcel						ifAbsent: ['?']) asString;		cr.	aStream		emphasis: #bold;		nextPutAll: (#parcelVersion1 &lt;&lt; #dialogs &gt;&gt; 'Version:	') asString;		emphasis: nil;		nextPutAll:				(info						at: #version						ifAbsent: ['?']) asString;		cr.	(timestamp := info at: #timestamp ifAbsent: nil) notNil		ifTrue:			[aStream				emphasis: #bold;				nextPutAll: (#parcelSavedDate &lt;&lt; #dialogs &gt;&gt; 'Written:	') asString;				emphasis: nil;				nextPutAll:						(self								formatTime:									(Array										with: timestamp asDate										with: timestamp asTime));				cr].	aStream		emphasis: #bold;		nextPutAll: (#parcelFormat &lt;&lt; #dialogs &gt;&gt; 'Format:	') asString;		emphasis: nil;		nextPutAll:				(info						at: #format						ifAbsent: ['?']) printString asString;		tab;		emphasis: #italic;		nextPutAll:				(#currentParcelFormat &lt;&lt; #dialogs &gt;&gt; '(current &lt;1p&gt;)'						expandMacrosWith: CodeWriter fileFormat);		emphasis: nil;		cr.	(info includesKey: #space)		ifTrue:			[aStream				emphasis: #bold;				nextPutAll: (#parcelNumberObjects &lt;&lt; #dialogs &gt;&gt; 'Objects:	') asString;				emphasis: nil;				nextPutAll: ((info at: #space) at: 1);				cr;				emphasis: #bold;				nextPutAll: (#parcelBytes &lt;&lt; #dialogs &gt;&gt; 'Bytes:	') asString;				emphasis: nil;				nextPutAll: ((info at: #space) at: 2);				cr].	aStream		emphasis: #bold;		nextPutAll: (#parcelPrereqs &lt;&lt; #dialogs &gt;&gt; 'Prerequisites:') asString;		emphasis: nil.	prereqs := info		at: #prerequisiteParcels		ifAbsent:			[Array				with:					(Array						with: (#unknown &lt;&lt; #dialogs &gt;&gt; 'unknown') asString						with: '')].	prereqs isEmpty		ifTrue:			[aStream				emphasis: #italic;				tab;				nextPutAll: (#noParcelPrereqs &lt;&lt; #dialogs &gt;&gt; 'none') asString;				emphasis: nil]		ifFalse:			[prereqs				do:					[:prereq | 					aStream						tab;						nextPutAll: prereq first.					(prereq at: 2) size &gt; 0						ifTrue:							[aStream								emphasis: #italic;								space;								nextPut: $V;								space;								nextPutAll: (prereq at: 2);								emphasis: nil]]].	aStream cr.	(info includesKey: #comment)		ifTrue:			[aStream				emphasis: #bold;				nextPutAll: (#parcelComment &lt;&lt; #dialogs &gt;&gt; 'Comment:	') asString;				emphasis: nil;				nextPutAll: ((info at: #comment) at: 1);				cr]</body><body package="FileBrowserExtensions" selector="writeSize:on:">writeSize: anInteger on: stream		stream		cr;		cr;		emphasis: #bold;		nextPutAll: (#fileSize &lt;&lt; #dialogs &gt;&gt; 'Size:     ') asString;		emphasis: nil;		nextPutAll: anInteger printString</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="FileBrowserExtensions" selector="goToDefaultFolder20x20">goToDefaultFolder20x20	^Filename separator = $: 		ifTrue: [self folderWithColon20x20]		ifFalse: [self folderWithDot20x20]</body><body package="FileBrowserExtensions" selector="goToDefaultFolder20x20mask">goToDefaultFolder20x20mask	^Filename separator = $: 		ifTrue: [self folderWithColon20x20mask]		ifFalse: [self folderWithDot20x20mask]</body></methods><methods><class-id>Tools.FileTools.FileBrowser class</class-id> <category>resources</category><body package="FileBrowserExtensions" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Directory 					#defaultString: '&amp;Directory' 					#catalogID: #menus ) 				#nameKey: #directory 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_NewDot 								#defaultString: '&amp;New...' 								#catalogID: #menus ) 							#value: #createSubdirectory 							#enablementSelector: #hasDirectoryInTreeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_RenameDot 								#defaultString: '&amp;Rename...' 								#catalogID: #menus ) 							#value: #renameDirectory 							#enablementSelector: #hasDirectoryInTreeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_moveDot 								#defaultString: 'Re&amp;move...' 								#catalogID: #menus ) 							#value: #removeDirectory 							#enablementSelector: #hasDirectoryInTreeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_fresh 								#defaultString: 'Re&amp;fresh' 								#catalogID: #menus ) 							#value: #refreshDirectory 							#enablementSelector: #hasDirectoryInTreeSelected 							#shortcutKeyCharacter: #F5 							#shortcutModifiers: 0 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #refreshFolder ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_CopyName 								#defaultString: '&amp;Copy Name' 								#catalogID: #menus ) 							#value: #copyDirectoryFilename 							#enablementSelector: #hasDirectoryInTreeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Inspect 								#defaultString: '&amp;Inspect' 								#catalogID: #menus ) 							#value: #inspectDirectoryFilename 							#enablementSelector: #hasDirectoryInTreeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #GoToVisualWorksDirectory 								#defaultString: 'Go to $(&amp;VISUALWOKRS) Directory' 								#catalogID: #menus ) 							#value: #selectVWHomeDirectory 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #folderVWHome ) 							#helpText: 							#(#{Kernel.UserMessage} 								#key: #GoToVisualWorksHomeDirectory 								#defaultString: 'Go to $(VISUALWOKRS) home directory' 								#catalogID: #menus ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #GoTo_DefaultDirectory 								#defaultString: 'Go to &amp;Default Directory' 								#catalogID: #menus ) 							#value: #selectDefaultDirectory 							#enablementSelector: #notDefaultDirectorySelected 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #goToDefaultFolder ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #GoToDot 								#defaultString: '&amp;Go to...' 								#catalogID: #menus ) 							#value: #goToDirectory 							#shortcutKeyCharacter: $G 							#shortcutModifiers: 8 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #goToFolder ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #InitialSelection 								#defaultString: '&amp;Initial Selection' 								#catalogID: #menus ) 							#nameKey: #initialSelection ) ) #(3 3 3 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_File 					#defaultString: '&amp;File' 					#catalogID: #menus ) 				#nameKey: #file 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_NewDot 								#defaultString: '&amp;New...' 								#catalogID: #menus ) 							#nameKey: #create 							#value: #createFile ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_RenameDot 								#defaultString: '&amp;Rename...' 								#catalogID: #menus ) 							#value: #renameFileOrDirectory 							#enablementSelector: #hasItemSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_moveDot 								#defaultString: 'Re&amp;move...' 								#catalogID: #menus ) 							#value: #removeFileOrDirectory 							#enablementSelector: #hasItemSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CopyDot 								#defaultString: '&amp;Copy...' 								#catalogID: #menus ) 							#nameKey: #copy 							#value: #copyFile 							#enablementSelector: #hasFileSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Encoding 								#defaultString: '&amp;Encoding' 								#catalogID: #menus ) 							#nameKey: #fileEncoding ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #C_opyName 								#defaultString: 'C&amp;opy Name' 								#catalogID: #menus ) 							#value: #copyFilename 							#enablementSelector: #hasItemSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Inspect 								#defaultString: '&amp;Inspect' 								#catalogID: #menus ) 							#value: #inspectFilename 							#enablementSelector: #hasItemSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Edit 								#defaultString: '&amp;Edit' 								#catalogID: #menus ) 							#nameKey: #fileEdit 							#value: #fileEdit 							#enablementSelector: #hasFileSelected 							#shortcutKeyCharacter: $E 							#shortcutModifiers: 8 							#labelImage: #(#{UI.ResourceRetriever} #{FileBrowser} #editIcon ) ) ) #(4 1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_View 					#defaultString: '&amp;View' 					#catalogID: #menus ) 				#nameKey: #view 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RefreshAll 								#defaultString: '&amp;Refresh All' 								#catalogID: #menus ) 							#value: #fullUpdate 							#shortcutKeyCharacter: #F5 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Zoom 								#defaultString: '&amp;Zoom' 								#catalogID: #menus ) 							#nameKey: #viewZoom 							#value: #toggleZoom 							#shortcutKeyCharacter: $Z 							#shortcutModifiers: 8 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #zoom ) ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Help 					#defaultString: '&amp;Help' 					#catalogID: #menus ) 				#nameKey: #help 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #FileBrowser 								#defaultString: 'File &amp;Browser' 								#catalogID: #menus ) 							#value: #helpFileBrowser 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #help ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AboutFiles 								#defaultString: '&amp;Files' 								#catalogID: #menus ) 							#value: #helpFiles ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_AboutVisualWorksDot 								#defaultString: '&amp;About VisualWorks...' 								#catalogID: #menus ) 							#value: #aboutVisualWorks ) ) #(2 1 ) nil ) ) ) #(4 ) nil ) decodeAsLiteralArray</body><body package="FileBrowserExtensions" selector="toolbarMenu">toolbarMenu	"Tools.MenuEditor new openOnClass: self andSelector: #toolbarMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #GoToHomeDirectory 					#defaultString: 'Go to $(HOME) Directory' 					#catalogID: #menus ) 				#nameKey: #goToHomeDirectory 				#value: #goToHomeDirectory 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #folderHome ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #GoToUsersHomeDirectory 					#defaultString: 'Go to user''s $(HOME) directory' ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #GoToVisualWorksDirectory 					#defaultString: 'Go to $(VISUALWOKRS) Directory' 					#catalogID: #menus ) 				#nameKey: #selectVWHomeDirectory 				#value: #selectVWHomeDirectory 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #folderVWHome ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #GoToVisualWorksHomeDirectory 					#defaultString: 'Go to $(VISUALWOKRS) home directory' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #GotoImageFileDirectory 					#defaultString: 'Go to Image File Directory' 					#catalogID: #menus ) 				#nameKey: #gotoImageFileDirectory 				#value: #gotoImageFileDirectory 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #folderDotIM ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #gotoImageFileDirectory 					#defaultString: 'Go to directory of image (.im) file' ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #GoToDefaultDirectory 					#defaultString: 'Go to Default Directory' 					#catalogID: #menus ) 				#nameKey: #selectDefaultDirectory 				#value: #selectDefaultDirectory 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #goToDefaultFolder ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #GoToDefaultWorkingDirectory 					#defaultString: 'Go to default (working) directory' ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #GoToDirectory 					#defaultString: 'Go to Directory...' 					#catalogID: #menus ) 				#nameKey: #goToDirectory 				#value: #goToDirectory 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #goToFolder ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #GoToDirectoryHelp 					#defaultString: 'Go to directory...' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #GotoParentDirectory 					#defaultString: 'Go to Parent Directory' 					#catalogID: #menus ) 				#nameKey: #selectParentDirectory 				#value: #selectParentDirectory 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #folderUp ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #goUpOneDirectory 					#defaultString: 'Go up one directory' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refresh 					#defaultString: 'Refresh' 					#catalogID: #menus ) 				#nameKey: #refreshDirectory 				#value: #refreshDirectory 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #refreshFolder ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #RefreshTheCurrentDirectory 					#defaultString: 'Refresh the current directory' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #OpenFile 					#defaultString: 'Open File' 					#catalogID: #menus ) 				#nameKey: #fileEdit 				#value: #fileEdit 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.FileTools.FileBrowser} #editIcon ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #OpenFileInAWorkspace 					#defaultString: 'Open file in a Workspace' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #OpenChanges 					#defaultString: 'Open Changes' 					#catalogID: #menus ) 				#nameKey: #openChanges 				#value: #openChanges 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.FileTools.FileBrowser} #changeListIcon ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #OpenFileInAChangeList 					#defaultString: 'Open file in a Change List' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #OpenConflicts 					#defaultString: 'Open Conflicts' 					#catalogID: #menus ) 				#nameKey: #openConflicts 				#value: #openConflicts 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.FileTools.FileBrowser} #changeListConflictsIcon ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #CompareFileUsingChangeList 					#defaultString: 'Compare file to the system in a Change List' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FileIn1 					#defaultString: 'File In' 					#catalogID: #menus ) 				#nameKey: #fileIn 				#value: #fileIn 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.FileTools.FileBrowser} #fileInIcon ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #FileIn 					#defaultString: 'File in' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ParcelIn 					#defaultString: 'Parcel In' 					#catalogID: #menus ) 				#nameKey: #loadParcel 				#value: #loadParcel 				#enablementSelector: #hasParcelFileSelected 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.FileTools.FileBrowser} #loadParcelIcon ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #LoadParcel 					#defaultString: 'Load parcel' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Zoom 					#defaultString: 'Zoom' 					#catalogID: #menus ) 				#value: #toggleZoom 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #zoom ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #ZoomOrUnzoom 					#defaultString: 'Zoom or unzoom' 					#catalogID: #menus ) ) ) #(7 3 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="FileBrowserExtensions" selector="folderDotIM20x20">folderDotIM20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #folderDotIM"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6617)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUT3L3AUUUUUUP@@UUL&amp;XQLEUUUUUP@@USQDQDP3L3MUUP@@USUUUUUUUUPEUP@@USTQDADQDQE@UP@@USTQDQDQDQE@UP@@USTQDA@@@QE@UP@@USTQDA@PDAE@UP@@USTQDA@PDAE@UP@@USTPDA@PDAE@UP@@USTQDQDQDQE@UP@@USQDQDQDQDQ@UP@@UU@@@@@@@@@EUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@'))</body><body package="FileBrowserExtensions" selector="folderDotIM20x20mask">folderDotIM20x20mask	"UIMaskEditor new openOnClass: self andSelector: #folderDotIM20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 15 192 0 0 31 224 0 0 63 255 0 0 63 255 128 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 31 255 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="FileBrowserExtensions" selector="folderVWHome20x20">folderVWHome20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #folderVWHome20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 5 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6070 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 3950 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4240 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4240 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 4240 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 8191 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 3180)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'APTEAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPDA@PDA@@TEAPTEAPTEAPTEAPTABADQC@0A@@TEAPTEAPTEAPTE@Q\WE1\WE1\A@PDA@PDEAPTEAPTAAPTEAPTEAPTEAPTEE0@EAPTEAPDEC@0LC@0LC@0LC@LW@@TEAPTE@PTLC@0LC@0LC@8NC 8WAPTEAPTAAP0LC@0LC@(JE ,KDAHRAPTEAPDEC@0LC@0JA &lt;JE ,B@ HRAPTE@PTLC@0LB XJB (J@!LS@ HRAPTAAP0LC@0JB (SCP4OB (S@ $EAPDEC@0LC@(JD04MAQPOC0(BBPTE@Q\WE1\WB (SCPTTE@POB!HIAPTE@@@@@@@WF@4MAQPTA@&lt;GBPTEAPTEAPTEAPTXCP4EEAPDB \IAPTEAPTEAPTEAPTUCQPTA@PJF@TEAPTEAPTEAPTEAPTRCPPDEQ EAPTEAPTEAPTEAPTEAPTIC 8XAPTEAPTEAPTEAPTEAPTEAPTLAPTEAPTEAP@a'))</body><body package="FileBrowserExtensions" selector="folderVWHome20x20mask">folderVWHome20x20mask	"UIMaskEditor new openOnClass: self andSelector: #folderVWHome20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 31 128 0 0 63 192 0 0 127 254 0 0 127 255 0 0 127 255 0 0 127 255 0 0 127 255 128 0 127 255 192 0 127 255 224 0 127 255 224 0 127 255 224 0 127 255 224 0 63 255 192 0 0 255 192 0 0 127 128 0 0 63 0 0 0 30 0 0 0 8 0 0])</body><body package="FileBrowserExtensions" selector="folderWithColon20x20">folderWithColon20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #folderWithColon20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6617)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUT3L3AUUUUUUP@@UUL&amp;XQLEUUUUUP@@USQDQDP3L3MUUP@@USUUUUUUUUPEUP@@USTQDQDQDQE@UP@@USTQDQ@ADQE@UP@@USTQDQ@ADQE@UP@@USTQDQDQDQE@UP@@USTQDQ@ADQE@UP@@USTQDQ@ADQE@UP@@USTQDQDQDQE@UP@@USQDQDQDQDQ@UP@@UU@@@@@@@@@EUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@'))</body><body package="FileBrowserExtensions" selector="folderWithColon20x20mask">folderWithColon20x20mask	"UIMaskEditor new openOnClass: self andSelector: #folderWithColon20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 128 0 0 31 192 0 0 63 255 0 0 63 255 128 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 31 255 192 0 15 255 128 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="FileBrowserExtensions" selector="folderWithDot20x20">folderWithDot20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #folderWithDot20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6617)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUT3L3AUUUUUUP@@UUL&amp;XQLEUUUUUP@@USQDQDP3L3MUUP@@USUUUUUUUUPEUP@@USTQDQDQDQE@UP@@USTQDQDQDQE@UP@@USTQDQDQDQE@UP@@USTQDQDQDQE@UP@@USTQDQ@ADQE@UP@@USTQDQ@ADQE@UP@@USTQDQDQDQE@UP@@USQDQDQDQDQ@UP@@UU@@@@@@@@@EUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@UUUUUUUUUUUUUP@@'))</body><body package="FileBrowserExtensions" selector="folderWithDot20x20mask">folderWithDot20x20mask	"UIMaskEditor new openOnClass: self andSelector: #folderWithDot20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 15 192 0 0 31 224 0 0 63 255 0 0 63 255 128 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 31 255 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>FileBrowser</name><environment>Tools.FileTools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>directoryTreeHolder patternChoices fileListHolder patternHolder fileSelectionChannel currentViewer statusTextRightHolder statusTextLeftHolder viewerListHolder menuBarHolder encodingChannel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-File Browser</category><attributes><package>Tools-File Browser</package></attributes></class><class><name>FileBrowser</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fileName list myPattern selectionState autoRead lastModified currentFileEncoding defaultEncodings patternAspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>