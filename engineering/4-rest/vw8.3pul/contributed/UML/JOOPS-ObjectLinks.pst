<?xml version="1.0"?><st-source><!-- Name: JOOPS-ObjectLinksNotice: Copyright © 1999 - 2002 JOOPS Informationstechnik GmbH.  All Rights Reserved.Comment: Is developed by JOOPS Informationstechnik GmbHOrlando-di-Lasso Str. 2D-85640 Putzbrunn, GermanyWeb: http://www.joops.comThe classes are the implementation of the UML Aggregation and Association behaviour and semanticDbIdentifier: nilDbTrace: nilHideSource: falsePackageName: JOOPS-ObjectLinksParcel: #('JOOPS-ObjectLinks')ParcelName: JOOPS-ObjectLinksPrerequisiteDescriptions: #()PrintStringCache: nilSaveSource: trueVersion: 1.0Date: 2:36:21 PM October 7, 2009 --><time-stamp>From VisualWorks®, Pre-Release 7.7 (sep09.4) of 25. September 2009 on 7. Oktober 2009 at 14:36:21</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Joops</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>JOOPS-Kernel</category><attributes><package>JOOPS-ObjectLinks</package></attributes></name-space><name-space><name>UML</name><environment>Joops</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></name-space><class><name>LinkDirection</name><environment>Joops.UML</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.LinkDirection</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The abstract baseclass for policies to realize the behaviour of all kind of linksClass variables:				Instance variables:</body></comment><class><name>UnidirectionalLink</name><environment>Joops.UML</environment><super>Joops.UML.LinkDirection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.UnidirectionalLink</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	Behavior for unidirectionale links for domainobjectsClass variables:				Instance variables:</body></comment><class><name>ContainerPolicy</name><environment>Joops.UML</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.ContainerPolicy</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	Abstract Baseclass for:- Supports the effective container for the domainobjects- Performs adding and removing of objects in the containerClass variables:				Instance variables:</body></comment><class><name>LinkContainer</name><environment>Joops.UML</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.LinkContainer</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The abstact baseclass for linked domainobjects Class variables:				Instance variables:	parent		&lt;UMLLink&gt;					The link to my container</body></comment><class><name>SingleLinkContainer</name><environment>Joops.UML</environment><super>Joops.UML.LinkContainer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>domain </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.SingleLinkContainer</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The constrains for a container with 'to one' linksClass variables:				Instance variables:	domain		&lt;Object&gt;							The linked domainobjekt</body></comment><class><name>ZeroOrOneContainer</name><environment>Joops.UML</environment><super>Joops.UML.SingleLinkContainer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.ZeroOrOneContainer</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The behaviour of 'to-one or zero' links of domaionobjectsClass variables:				Instance variables:</body></comment><class><name>BidirectionalLink</name><environment>Joops.UML</environment><super>Joops.UML.LinkDirection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.BidirectionalLink</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	Behavior for bidirectionale links for domainobjectsClass variables:				Instance variables:</body></comment><class><name>IndexedContainerPolicy</name><environment>Joops.UML</environment><super>Joops.UML.ContainerPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.IndexedContainerPolicy</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The Array-container for domainobjectsClass variables:				Instance variables:</body></comment><class><name>MultiLinkContainer</name><environment>Joops.UML</environment><super>Joops.UML.LinkContainer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container containerPolicy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.MultiLinkContainer</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The behaviour for contraints and container of 'to-many' links of domaionobjectsClass variables:				Instance variables:	container			&lt;Collection&gt;						The container ewith the linked domainobjects	containerPolicy	&lt;ContainerPolicy&gt;					Thje policy for adding and removing domainobjects</body></comment><class><name>ManyContainer</name><environment>Joops.UML</environment><super>Joops.UML.MultiLinkContainer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.ManyContainer</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The behaviour of 'to-many' links of domaionobjectsClass variables:				Instance variables:</body></comment><class><name>TestChildObject</name><environment>Joops.UML</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.TestChildObject</class-id><body>Copyright © 1998 JOOPS Springer JosefCreated:		Springer Josef October 12, 1998Changed:	Description:	Instance Variables:	parent	&lt;UMLAssociation&gt;		Link, in dem ich enthalten bin	name	&lt;String&gt;				Mein Name</body></comment><class><name>OneContainer</name><environment>Joops.UML</environment><super>Joops.UML.SingleLinkContainer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.OneContainer</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The behaviour of 'to-one' links of domaionobjectsClass variables:				Instance variables:</body></comment><class><name>UnorderedContainerPolicy</name><environment>Joops.UML</environment><super>Joops.UML.ContainerPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.UnorderedContainerPolicy</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The behaviour for links of domaionobjects based on List (unordered) as containerClass variables:				Instance variables:</body></comment><class><name>UMLLink</name><environment>Joops.UML</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>direction container parent </inst-vars><class-inst-vars></class-inst-vars><imports>			Joops.UML.*			</imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.UMLLink</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The abstract baseclass for UML-Links (Association and Aggregation)Class variables:				Instance variables:	container		&lt;LinkContainer&gt;						The container with the linked domainobjects	direction		&lt;LinkDirection&gt;					 	The Link-Policy (Uni-, Bidirectional)	parent			&lt;Object&gt;								The domainobject, whitch contains the link</body></comment><class><name>UMLAggregat</name><environment>Joops.UML</environment><super>Joops.UML.UMLLink</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.UMLAggregat</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The behavior for aggregates defined by UMLClass variables:				Instance variables:</body></comment><class><name>TestParentObject</name><environment>Joops.UML</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>childs name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.TestParentObject</class-id><body>Copyright © 1998 JOOPS Springer JosefCreated:		Springer Josef October 12, 1998Changed:	Description:	Instance Variables:	childs	&lt;UMLAggregat&gt;			Meine aggregierten Objekte	name	&lt;String&gt;				Mein Name</body></comment><class><name>NumberedContainer</name><environment>Joops.UML</environment><super>Joops.UML.MultiLinkContainer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.NumberedContainer</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The behaviour of 'numbered' links of domaionobjectsClass variables:				Instance variables:</body></comment><class><name>SortedContainerPolicy</name><environment>Joops.UML</environment><super>Joops.UML.ContainerPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.SortedContainerPolicy</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The behaviour for links of domaionobjects based on SortedCollection as containerClass variables:				Instance variables:</body></comment><class><name>OrderedContainerPolicy</name><environment>Joops.UML</environment><super>Joops.UML.ContainerPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.OrderedContainerPolicy</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The behaviour for links of domaionobjects based on OrderedCollection as containerClass variables:				Instance variables:</body></comment><class><name>ZeroToManyContainer</name><environment>Joops.UML</environment><super>Joops.UML.MultiLinkContainer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.ZeroToManyContainer</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The behaviour of 'zero.to-one or zero' links of domaionobjectsClass variables:				Instance variables:</body></comment><class><name>UMLAssociation</name><environment>Joops.UML</environment><super>Joops.UML.UMLLink</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JOOPS-ObjectLinks</category><attributes><package>JOOPS-ObjectLinks</package></attributes></class><comment><class-id>Joops.UML.UMLAssociation</class-id><body>Copyright © 1997 JOOPS Springer JosefCreated:		Springer Josef April 24, 1997Changed:	Description:	The behavior for associationes defined by UMLClass variables:				Instance variables:</body></comment><methods><class-id>Joops.UML.LinkDirection</class-id> <category>adding-removing</category><body package="JOOPS-ObjectLinks" selector="add:in:">add: anObject in: anUMLLink 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		anObject soll im Link anUMLLink eingefuegt werden. Konkrete Klassen muessen diesen Service entsprechend 	implementieren. 		Returns:		&lt;Object&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="remove:conditional:in:">remove: anObject conditional: aBoolean in: anUMLLink 	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 16. August 2003 Version 2.01	Changed: 				anObject soll bedingt aus dem Link anUMLLink entfernt werden. Konkrete Klassen muessen diesen Service 	entsprechend implementieren. 		Returns:		&lt;Object&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="remove:in:">remove: anObject in: anUMLLink 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		16. August 2003 Version 2.01					Delegate the request to #remove:conditional:in:		anObject soll aus dem Link anUMLLink entfernt werden. Konkrete Klassen muessen diesen Service 	entsprechend implementieren. 		Returns:		&lt;Object&gt;"	^self remove: anObject conditional: true in: anUMLLink</body></methods><methods><class-id>Joops.UML.LinkDirection</class-id> <category>accessing</category><body package="JOOPS-ObjectLinks" selector="attachTo:">attachTo: anUMLLink 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		anUMLLink ist mein Parent, fuer den ich als Direction-Policy agiere. Die Links zu den 	Domain-Objekten muessen hier entsprechend gesetzt werden. Konkrete Klassen muessen den 	Service entsprechend reimplementieren. 		Returns:		"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="detachFrom:">detachFrom: anUMLLink 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Mein Parent anUMLLink loest sich auf. Die Links zu den Domain-Objekten muessen hier entsprechend 	entfernt werden. Konkrete Klassen muessen den Service entsprechend reimplementieren. 		Returns:		"	^self subclassResponsibility</body></methods><methods><class-id>Joops.UML.UnidirectionalLink</class-id> <category>accessing</category><body package="JOOPS-ObjectLinks" selector="attachTo:">attachTo: anUMLLink	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Ich habe einen neuen UMLLink als Parent. Hier gibts nichts zu tun.	Returns:		"	^self</body><body package="JOOPS-ObjectLinks" selector="detachFrom:">detachFrom: anUMLLink	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Ich habe meinen anUMLLink verloren. Hier gibts nichts zu tun.	Returns:		"	^self</body></methods><methods><class-id>Joops.UML.UnidirectionalLink</class-id> <category>adding-removing</category><body package="JOOPS-ObjectLinks" selector="add:in:">add: anObject in: anUMLLink 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		anObject soll im Link eingefuegt werden 		Returns:		&lt;Object | nil&gt;"	^(anUMLLink container exist: anObject)		ifFalse: [anUMLLink container add: anObject]		ifTrue: [anObject]</body><body package="JOOPS-ObjectLinks" selector="remove:conditional:in:">remove: anObject conditional: aBoolean in: anUMLLink 	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 16. August 2003 Version 2.01	Changed: 		Remove anObject conditionaled from anUMLLink		Returns:		&lt;Object | nil&gt;"	^(anUMLLink container exist: anObject)		ifTrue: [anUMLLink container remove: anObject conditional: aBoolean]		ifFalse: [nil]</body></methods><methods><class-id>Joops.UML.ContainerPolicy</class-id> <category>defaults</category><body package="JOOPS-ObjectLinks" selector="defaultContainerSize">defaultContainerSize	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Liefert die Groesse des Containers (Array) Hier default 1. Abgeleitete Klassen koennen die Methode 	entsprechend reimplementieren. 		Returns:		&lt;Integer&gt;"	^1</body></methods><methods><class-id>Joops.UML.ContainerPolicy</class-id> <category>initialize-release</category><body package="JOOPS-ObjectLinks" selector="initializeContainer:">initializeContainer: aLinkContainer	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Initialisiert den LinkContainer aLinkContainer mit der entsprechenden Collection. Die Methode muss von	abgeleiteten Klassen reimplementiert werden	Returns:		"	^self subclassResponsibility</body></methods><methods><class-id>Joops.UML.ContainerPolicy</class-id> <category>accessing</category><body package="JOOPS-ObjectLinks" selector="find:in:">find: anObject in: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Suche das Objekt anObject in dem Container von aLinkContainer.		Returns:		&lt;Object | nil&gt;"	anObject isNil ifTrue: [^nil].	^aLinkContainer container detect: [:each | each = anObject] ifNone: [nil]</body><body package="JOOPS-ObjectLinks" selector="firstIn:">firstIn: aLinkContainer	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 9, 1997	Changed:	Liefere das erste Domain-Objekt aus der Collection in aLinkContainer	Returns:		&lt;Object | nil&gt;"	^aLinkContainer container isEmpty ifFalse: [aLinkContainer container first] ifTrue: [nil]</body><body package="JOOPS-ObjectLinks" selector="indexOf:in:">indexOf: anObject in: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 9, 1997 	Changed: 		Liefere den Index von anObject aus dem Container aLinkContainer 		Returns:		&lt;Integer&gt;"	^aLinkContainer container indexOf: anObject</body><body package="JOOPS-ObjectLinks" selector="lastIn:">lastIn: aLinkContainer	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 9, 1997	Changed:	Liefere das letzte Domain-Objekt aus der Collection in aLinkContainer	Returns:		&lt;Object | nil&gt;"	^aLinkContainer container isEmpty ifFalse: [aLinkContainer container last] ifTrue: [nil]</body><body package="JOOPS-ObjectLinks" selector="sizeOf:">sizeOf: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Liefere die Anzahl der eingetragenen Domain-Objekte	Returns:		&lt;Integer&gt;"	^aLinkContainer container size</body></methods><methods><class-id>Joops.UML.ContainerPolicy</class-id> <category>adding-removing</category><body package="JOOPS-ObjectLinks" selector="performAdd:in:">performAdd: anObject in: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Fuege das Objekt anObject in dem Container von aLinkContainer ein 		Returns:		&lt;Object&gt;"	^(aLinkContainer container identityIndexOf: anObject)		= 0		ifTrue: [aLinkContainer container add: anObject]		ifFalse: [nil]</body><body package="JOOPS-ObjectLinks" selector="performRemove:in:">performRemove: anObject in: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Entferne das Objekt anObject aus dem Container von aLinkContainer 		Returns:		&lt;Object&gt;"	| anIndex |	^(anIndex := aLinkContainer container identityIndexOf: anObject) &gt; 0		ifTrue: [aLinkContainer container removeAtIndex: anIndex]		ifFalse: [nil]</body></methods><methods><class-id>Joops.UML.ContainerPolicy</class-id> <category>testing</category><body package="JOOPS-ObjectLinks" selector="exist:in:">exist: anObject in: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Ist das Objekt anObject in dem Container von aLinkContainer enthalten 		Returns:		&lt;Boolean&gt;"	^(aLinkContainer container detect: [:each | each == anObject]		ifNone: [nil]) notNil</body><body package="JOOPS-ObjectLinks" selector="includes:in:">includes: anObject in: aLinkContainer	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Ist das Objekt anObject in dem Container von aLinkContainer enthalten	Returns:		&lt;Boolean&gt;"	^aLinkContainer container includes: anObject</body></methods><methods><class-id>Joops.UML.ContainerPolicy</class-id> <category>converting</category><body package="JOOPS-ObjectLinks" selector="asCollection:">asCollection: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Liefere eine Kopie des Domain-Objekt-Containers in aLinkContainer	Returns:		&lt;Collection of: Object&gt;"	^aLinkContainer container copy</body></methods><methods><class-id>Joops.UML.LinkContainer</class-id> <category>private</category><body package="JOOPS-ObjectLinks" selector="parent:">parent: anUMLLink	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Setzt meinen Parent (ein UMLLink)	Returns:		&lt;UMLLink&gt;"	^parent := anUMLLink</body></methods><methods><class-id>Joops.UML.LinkContainer</class-id> <category>adding-removing</category><body package="JOOPS-ObjectLinks" selector="add:">add: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Fuege das Domain-Objekt anObject in meinem Container ein. Die Methode ist ein Framework. Abgeleitete Klassen	muessen die hier benutzten Methoden bei Bedarf reimplementieren.		Returns:		&lt;Object&gt;"	^(self isAddable: anObject)		ifTrue: [self performAdd: anObject]		ifFalse: [nil]</body><body package="JOOPS-ObjectLinks" selector="performAdd:">performAdd: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Fuege das Domain-Objekt anObject in meinem Container ein. Abgeleitete Klassen muessen den 	Service reimplementieren 		Returns:		&lt;Object&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="performRemove:">performRemove: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Entferne das Domain-Objekt anObject aus meinem Container.  Abgleitete Klassen muessen die Methode	reimplementieren.		Returns:		&lt;Object&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="remove:">remove: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		21. September 2002 Version 2.01					Call #isRemovable: instead of removed #isRemoveable:					16. August 2003 Version 2.01					#remove:conditional: does the job		Entferne das Domain-Objekt anObject aus meinem Container. Die Methode ist ein Framework. Abgeleitete Klassen	muessen die hier benutzten Methoden bei Bedarf reimplementieren.		Returns:		&lt;Object&gt;"	^self remove: anObject conditional: true </body><body package="JOOPS-ObjectLinks" selector="remove:conditional:">remove: anObject conditional: aBoolean 	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 16. August 2003 Version 2.01	Changed:			Remove anObject from myself. Test removeable wether aBoolean is true	Returns: 		&lt;Object&gt;"	aBoolean ifTrue: [(self isRemovable: anObject) ifFalse: [^nil]].	^self performRemove: anObject</body></methods><methods><class-id>Joops.UML.LinkContainer</class-id> <category>converting</category><body package="JOOPS-ObjectLinks" selector="asCollection">asCollection	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Liefere die in mir enthaltenen Domain-Objekte als Collection. Abgeleitete Klassen muessen diese 	Methode reimplementieren 		Returns:		&lt;Collection of: Object&gt;"	^self subclassResponsibility</body></methods><methods><class-id>Joops.UML.LinkContainer</class-id> <category>accessing</category><body package="JOOPS-ObjectLinks" selector="attachTo:">attachTo: anUMLLink	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Verbinde mich mit meinem Parent anUMLLink	Returns:		"	self parent: anUMLLink</body><body package="JOOPS-ObjectLinks" selector="container">container	"Copyright © 2009 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 17. März 2009 Version 2.10	Changed:				Get my domains included a collection. Subclasses must implement a propper behaviour	Returns:		&lt;Collection of: &lt;Object&gt;&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="domain">domain	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Liefere die Domain-Objekte aus meinem Container. Die Methode muss von abgeleiteten Klassen 	reimplementiert werden. 		Returns:		&lt;Object&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="find:">find: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Suche das Domain-Objekt anObjekt in meinem Container. Abgeleitete Klassen muessen die Methode 	reimplementieren 		Returns:		"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="first">first	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Liefere mein erstes Domain-Objekt. Abgeleitete Klassen muessen den Service reimplementieren 		Returns:		&lt;Object | nil&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="indexOf:">indexOf: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 9, 1997 	Changed: 		Liefere den Index von anObject aus meinem Container. Abgeleitete Klassen muessen den Service 	reimplementieren 		Returns:		&lt;Integer&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="last">last	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Liefere mein letztes Domain-Objekt. Abgeleitete Klassen muessen den Service reimplementieren 		Returns:		&lt;Object | nil&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="parent">parent	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere meinen Parent (einen UMLLink)	Returns:		&lt;UMLLink&gt;"	^parent</body><body package="JOOPS-ObjectLinks" selector="size">size	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Liefere die Anzahl der eingetragenen Domain-Objekte. Abgeleitete Klassen muessen den Service reimplementieren 	Returns:		&lt;Integer&gt;"	^self subclassResponsibility</body></methods><methods><class-id>Joops.UML.LinkContainer</class-id> <category>copying</category><body package="JOOPS-ObjectLinks" selector="postCopy">postCopy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Abschlussbehandlung für deep-copy	Returns:		"	super postCopy.	self parent: nil</body><body package="JOOPS-ObjectLinks" selector="postSemiCopy">postSemiCopy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Abschlussbehandlung für deep-copy ohne Domain-Objekt-Container	Returns:		"	self parent: nil</body><body package="JOOPS-ObjectLinks" selector="semiCopy">semiCopy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Deep-Copy ohne den Domain-Objekt-Contaíner	Returns:		&lt;LinkContainer&gt;"	| myCopy |	myCopy := self shallowCopy.	myCopy postSemiCopy.	^myCopy</body></methods><methods><class-id>Joops.UML.LinkContainer</class-id> <category>initialize-release</category><body package="JOOPS-ObjectLinks" selector="initialize">initialize	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Hier gibts nichts zu tun	Returns:		"</body></methods><methods><class-id>Joops.UML.LinkContainer</class-id> <category>enumerating</category><body package="JOOPS-ObjectLinks" selector="do:">do: aBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		17. März 2009 Version 2.10					Use #container instead of #asCollection for better performance	Ennumeriere meine Domain-Ojekte mit den Block aBlock 		Returns:		"	self container do: aBlock</body></methods><methods><class-id>Joops.UML.LinkContainer</class-id> <category>testing</category><body package="JOOPS-ObjectLinks" selector="exist:">exist: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Enthalte ich das identische Domain-Objekt anObjekt ? Abgeleitete Klassen muessen die Methode 	reimplementieren 		Returns:		&lt;Boolean&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="includes:">includes: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Enthalte ich das Domain-Objekt anObjekt ? Abgeleitete Klassen muessen die Methode 	reimplementieren 		Returns:		&lt;Boolean&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="isAddable:">isAddable: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Pruefe, ob das Domain-Objekt anObject eingefuegt werden darf. Hier wird dies immer bejaht. 	Abgeleitete Klassen koennen die Methode entsprechend reimplementieren 		Returns:		&lt;Boolean&gt;"	^true</body><body package="JOOPS-ObjectLinks" selector="isEmpty">isEmpty	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Pruefe, ob ich Domain-Objekte enthalte. 	Returns:		&lt;Boolean&gt;"	^self size = 0</body><body package="JOOPS-ObjectLinks" selector="isRemovable:">isRemovable: anObject 	"Copyright © 2002 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 21. September 2002 Versionj 2.01	Changed: 				Was named #isRemoveable:	Pruefe, ob das Domain-Objekt anObject entfernt werden darf. Hier wird dies immer bejaht. 	Abgeleitete Klassen koennen die Methode entsprechend reimplementieren 		Returns:		&lt;Boolean&gt;"	^true</body><body package="JOOPS-ObjectLinks" selector="isValid">isValid	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Pruefe, ob meine Cardinalitaet stimmt. Für abgeleitete Klassen, die alles zulassen wird hier true als 	Defaultverhalten retourniert. Abgeleitete Klassen koennen die Methode entsprechend 	reimplementieren 		Returns:		&lt;Boolean&gt;"	^true</body></methods><methods><class-id>Joops.UML.LinkContainer class</class-id> <category>instance creation</category><body package="JOOPS-ObjectLinks" selector="new">new	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Returns:		"	^super new initialize</body></methods><methods><class-id>Joops.UML.SingleLinkContainer</class-id> <category>private</category><body package="JOOPS-ObjectLinks" selector="domain:">domain: anObject	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Setze mein Domain-Object	Returns:		&lt;Object&gt;"	^domain := anObject</body></methods><methods><class-id>Joops.UML.SingleLinkContainer</class-id> <category>testing</category><body package="JOOPS-ObjectLinks" selector="exist:">exist: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Melde, ob ich das Domain-Objekt anObject enthalte 		Returns:		&lt;Boolean&gt;"	^anObject notNil and: [self domain == anObject]</body><body package="JOOPS-ObjectLinks" selector="includes:">includes: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Melde, ob ich das Domain-Objekt anObject enthalte 		Returns:		&lt;Boolean&gt;"	^anObject notNil and: [self domain notNil and: [self domain = anObject]]</body></methods><methods><class-id>Joops.UML.SingleLinkContainer</class-id> <category>adding-removing</category><body package="JOOPS-ObjectLinks" selector="performAdd:">performAdd: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Trage das Domain-Object anObject bei mir ein. Falls ich bereits eines habe, wird dieses zuerst 	entfernt. 		Returns:		&lt;Object | nil&gt;"	(anObject isNil or: [self domain == anObject])		ifTrue: ["Domain-Objekt ist bereits eingetragen oder nil-Objekt"			^anObject].	self domain notNil ifTrue: ["anderes Domain-Objekt ist bereits eingetragen"		self parent remove: self domain].	self domain isNil ifTrue: [self domain: anObject].	^self domain</body><body package="JOOPS-ObjectLinks" selector="performRemove:">performRemove: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Trage das Domain-Object anObject bei mir aus. 		Returns:		&lt;Object | nil&gt;"	^self domain == anObject		ifTrue: 			[self domain: nil.			anObject]		ifFalse: [nil]</body></methods><methods><class-id>Joops.UML.SingleLinkContainer</class-id> <category>enumerating</category><body package="JOOPS-ObjectLinks" selector="do:">do: aBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Enumeriere meine Domain-Objekt mit den Block aBlock. Ist hier aus Performancegruenden 	reimplementiert. 		Returns:		"	self domain notNil ifTrue: [aBlock value: self domain]</body></methods><methods><class-id>Joops.UML.SingleLinkContainer</class-id> <category>copying</category><body package="JOOPS-ObjectLinks" selector="postCopy">postCopy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:		Abschlussbehandluung des Deep-Copy	Returns:		"	super postCopy.	self domain: self domain copy</body><body package="JOOPS-ObjectLinks" selector="postSemiCopy">postSemiCopy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:		Abschlussbehandluung des Semi-Copy	Returns:		"	super postSemiCopy.	self domain: nil</body></methods><methods><class-id>Joops.UML.SingleLinkContainer</class-id> <category>converting</category><body package="JOOPS-ObjectLinks" selector="asCollection">asCollection	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:		17. März 2009 Version 2.10					Use new #container, whitch creates a collection with my domain	Liefere mein Domain-Objekt in einer Collection	Returns:		&lt;OrderedCollection&gt;"	^self container</body></methods><methods><class-id>Joops.UML.SingleLinkContainer</class-id> <category>accessing</category><body package="JOOPS-ObjectLinks" selector="container">container	"Copyright © 2009 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 17. März 2009 Version 2.10	Changed:	Get my domain within a collection	Returns:		&lt;OrderedCollection of: &lt;Object&gt;&gt;"	| theCollection |	theCollection := OrderedCollection new.	self domain notNil ifTrue: [theCollection add: self domain].	^theCollection</body><body package="JOOPS-ObjectLinks" selector="domain">domain	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Liefere mein Domain-Objekt	Returns:		&lt;Object&gt;"	^domain</body><body package="JOOPS-ObjectLinks" selector="find:">find: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Liefere mein Domain-Objekt, wenn seine Key-Attribute mit anObject übereinstimmen 		Returns:		&lt;Object | nil&gt;"	^(anObject notNil and: [self domain notNil and: [self domain = anObject]])		ifTrue: [self domain]		ifFalse: [nil]</body><body package="JOOPS-ObjectLinks" selector="first">first	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Liefere mein erstes Domain-Objekt. Ich kann nur ein Domain-Objekt enthalten.		Returns:		&lt;Object | nil&gt;"	^self domain</body><body package="JOOPS-ObjectLinks" selector="indexOf:">indexOf: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 9, 1997 	Changed: 		Liefere den Index von anObject (hier 0 oder 1) 		Returns:		&lt;Integer&gt;"	^self domain == anObject		ifTrue: [1]		ifFalse: [0]</body><body package="JOOPS-ObjectLinks" selector="last">last	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Liefere mein letztes Domain-Objekt. Ich kann nur ein Domain-Objekt enthalten.		Returns:		&lt;Object | nil&gt;"	^self domain</body><body package="JOOPS-ObjectLinks" selector="size">size	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Liefere die Anzahl der eingetragenen Domain-Objekte (0 oder 1) 		Returns:		&lt;Integer&gt;"	^self domain notNil		ifTrue: [1]		ifFalse: [0]</body></methods><methods><class-id>Joops.UML.BidirectionalLink</class-id> <category>accessing</category><body package="JOOPS-ObjectLinks" selector="attachTo:">attachTo: anUMLLink 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Ich bin einem UMLLink zugeordnet worden. d.h. Die bidirektionalen Links muessen etabliert werden 		Returns:		"	anUMLLink do: [:each | self bidirectionalLink: each in: anUMLLink]</body><body package="JOOPS-ObjectLinks" selector="detachFrom:">detachFrom: anUMLLink 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Die Zuordnung zu meinem UMLLink wurde aufgehoben. d.h. Die bidirektionalen Links muessen auch 	aufgeloest werden 		Returns:		"	anUMLLink do: [:each | self bidirectionalUnlink: each in: anUMLLink]</body></methods><methods><class-id>Joops.UML.BidirectionalLink</class-id> <category>adding-removing</category><body package="JOOPS-ObjectLinks" selector="add:in:">add: anObject in: anUMLLink 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Fuege anObject im Link ein. Zusaetzlich wird auch der bidirektionale Link etabliert. 		Returns:		&lt;Object | nil&gt;"	(anUMLLink container exist: anObject)		ifTrue: [^anObject].	^(anUMLLink container add: anObject) notNil		ifTrue: 			[self bidirectionalLink: anObject in: anUMLLink.			anObject]		ifFalse: [nil]</body><body package="JOOPS-ObjectLinks" selector="bidirectionalLink:in:">bidirectionalLink: anObject in: anUMLLink 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Der bidirektionale Link von anObjekt zum Parent von anUMLLink wird etabliert. 		Returns:		&lt;Object | nil&gt;"	^anUMLLink parent notNil		ifTrue: [anUMLLink defaultBidirectionalLinkSelector isSymbol				ifTrue: [anObject perform: anUMLLink defaultBidirectionalLinkSelector with: anUMLLink parent]				ifFalse: [anUMLLink defaultBidirectionalLinkSelector value: anObject value: anUMLLink parent]]		ifFalse: [nil]</body><body package="JOOPS-ObjectLinks" selector="bidirectionalUnlink:in:">bidirectionalUnlink: anObject in: anUMLLink 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Der bidirektionale Link von anObjekt zum Parent von anUMLLink wird aufgeloest. 		Returns:		&lt;Object | nil&gt;"	^anUMLLink parent notNil		ifTrue: [anUMLLink defaultBidirectionalUnlinkSelector isSymbol				ifTrue: [anObject perform: anUMLLink defaultBidirectionalUnlinkSelector with: anUMLLink parent]				ifFalse: [anUMLLink defaultBidirectionalUnlinkSelector value: anObject value: anUMLLink parent]]		ifFalse: [nil]</body><body package="JOOPS-ObjectLinks" selector="remove:conditional:in:">remove: anObject conditional: aBoolean in: anUMLLink 	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 16. August 2003 Version 2.01	Changed: 		Remove anObject from my container. Test conditions wether aBoolean	Returns:		&lt;Object | nil"	(anUMLLink container exist: anObject)		ifFalse: [^nil].	^(anUMLLink container remove: anObject conditional: aBoolean) notNil		ifTrue: 			[self bidirectionalUnlink: anObject in: anUMLLink.			anObject]		ifFalse: [nil]</body></methods><methods><class-id>Joops.UML.IndexedContainerPolicy</class-id> <category>initialize-release</category><body package="JOOPS-ObjectLinks" selector="initializeContainer:">initializeContainer: aLinkContainer	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Initialisiert den LinkContainer aLinkContainer mit einem Array.	Returns:		"	aLinkContainer container: (Array new: self defaultContainerSize)</body></methods><methods><class-id>Joops.UML.IndexedContainerPolicy</class-id> <category>accessing</category><body package="JOOPS-ObjectLinks" selector="firstIn:">firstIn: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 9, 1997 	Changed: 		Liefere das erste Domain-Objekt aus aLinkContainer 		Returns:		&lt;Object | nil&gt;"	^aLinkContainer container detect: [:each | each notNil] ifNone: [nil]</body><body package="JOOPS-ObjectLinks" selector="indexOf:in:">indexOf: anObject in: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Liefere den Index von anObject aus der Array-Collection von aLinkContainer Es werden nur die 	belegten Slots gezaehlt. 		Returns:		&lt;Integer&gt;"	| count |	count := 1.	aLinkContainer container		do: 			[:each | 			each == anObject ifTrue: [^count].			each notNil ifTrue: [count := count + 1]].	^0</body><body package="JOOPS-ObjectLinks" selector="lastIn:">lastIn: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 9, 1997 	Changed: 		Liefere das letzte Domain-Objekt aus aLinkContainer 		Returns:		&lt;Object | nil&gt;"	| theObject |	aLinkContainer container do: [:each | each notNil ifTrue: [theObject := each]].	^theObject</body><body package="JOOPS-ObjectLinks" selector="sizeOf:">sizeOf: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Liefere die Anzahl der eingetragenen Domain-Objekte	Returns:		&lt;Integer&gt;"	^aLinkContainer container inject: 0 into: [:count :each | each notNil			ifTrue: [count + 1]			ifFalse: [count]]</body></methods><methods><class-id>Joops.UML.IndexedContainerPolicy</class-id> <category>adding-removing</category><body package="JOOPS-ObjectLinks" selector="performAdd:in:">performAdd: anObject in: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Das Domain-Objekt anObjekt wird im Container von aLinkContainer eingefuegt. 		Returns:		&lt;Object&gt;"	1 to: aLinkContainer container size do: [:index | (aLinkContainer container at: index) isNil			ifTrue: 				[aLinkContainer container at: index put: anObject.				^anObject]].	^nil</body><body package="JOOPS-ObjectLinks" selector="performRemove:in:">performRemove: anObject in: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Entferne das Domain-Objekt anObjekt im Container von aLinkContiner 		Returns:		&lt;Object&gt;"	1 to: aLinkContainer container size do: [:index | (aLinkContainer container at: index)			== anObject			ifTrue: 				[aLinkContainer container at: index put: nil.				^anObject]].	^nil</body></methods><methods><class-id>Joops.UML.IndexedContainerPolicy</class-id> <category>converting</category><body package="JOOPS-ObjectLinks" selector="asCollection:">asCollection: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Liefere eine Kopie des Array-Containers aus aLinkContainer mit den Domain-Objekten. Es werden 	nur die belegten Slots verwendet. 		Returns:		&lt;Array&gt;"	| theContainer theActualSize theArray theIndex |	theContainer := aLinkContainer container.	theActualSize := self sizeOf: aLinkContainer.	theArray := theContainer class withSize: theActualSize.	theIndex := 0.	theContainer do: [:each | each notNil ifTrue: [theArray at: (theIndex := theIndex + 1) put: each]].	^theArray</body></methods><methods><class-id>Joops.UML.MultiLinkContainer</class-id> <category>private</category><body package="JOOPS-ObjectLinks" selector="container:">container: aCollection	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Setze den Container, in dem Sich die Domain-Objekte befinden	Returns:		&lt;Collection&gt;"	^container := aCollection</body><body package="JOOPS-ObjectLinks" selector="containerPolicy">containerPolicy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere meine Container-Policy	Returns:		&lt;ContainerPolicy&gt;"	^containerPolicy</body><body package="JOOPS-ObjectLinks" selector="containerPolicy:">containerPolicy: aContainerPolicy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Setzt meine Container-Policy	Returns:		&lt;ContainerPolicy&gt;"	^containerPolicy := aContainerPolicy</body></methods><methods><class-id>Joops.UML.MultiLinkContainer</class-id> <category>converting</category><body package="JOOPS-ObjectLinks" selector="asCollection">asCollection	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere eine Kopie meines Domain-Objekt-Containers	Returns:		&lt;Collection of: Object&gt;"	^self containerPolicy asCollection: self</body></methods><methods><class-id>Joops.UML.MultiLinkContainer</class-id> <category>accessing</category><body package="JOOPS-ObjectLinks" selector="container">container	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere den Container, in dem Sich die Domain-Objekte befinden	Returns:		&lt;Collection of: Object&gt;"	^container</body><body package="JOOPS-ObjectLinks" selector="domain">domain	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere eine Kopie meiner Domain-Objekte	Returns:		&lt;Collection of: Object&gt;"	^self asCollection</body><body package="JOOPS-ObjectLinks" selector="find:">find: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 30, 1997 	Changed: 		Suche das Domain-Objekt welches mit anObject in den Key-Attributen uebereinstimmt 		Returns:		&lt;Object | nil&gt;"	^self containerPolicy find: anObject in: self</body><body package="JOOPS-ObjectLinks" selector="first">first	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 9, 1997 	Changed: 		Liefere das erste Domain-Objekt aus meinem Container 		Returns:		&lt;Object | nil&gt;"	^self containerPolicy firstIn: self</body><body package="JOOPS-ObjectLinks" selector="indexOf:">indexOf: anObject	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 9, 1997	Changed:	Liefere den Index von anObject aus meinem Container.	Returns:		&lt;Integer&gt;"	^self containerPolicy indexOf: anObject in: self</body><body package="JOOPS-ObjectLinks" selector="last">last	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 9, 1997 	Changed: 		Liefere das letzte Domain-Objekt aus meinem Container 		Returns:		&lt;Object | nil&gt;"	^self containerPolicy lastIn: self</body><body package="JOOPS-ObjectLinks" selector="size">size	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Liefere die Anzahl der eingetragenen Domain-Objekte	Returns:		&lt;Integer&gt;"	^self containerPolicy sizeOf: self</body></methods><methods><class-id>Joops.UML.MultiLinkContainer</class-id> <category>initialize-release</category><body package="JOOPS-ObjectLinks" selector="initialize">initialize	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Returns:		"	super initialize.	self newContainerPolicy</body><body package="JOOPS-ObjectLinks" selector="newContainerPolicy">newContainerPolicy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Hole mir meine Policy und beauftrage diese meinen Container zu initialisieren	Returns:		"	self containerPolicy: (self class defaultContainerPolicyClass new initializeContainer: self)</body></methods><methods><class-id>Joops.UML.MultiLinkContainer</class-id> <category>copying</category><body package="JOOPS-ObjectLinks" selector="postCopy">postCopy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Nachbehandlung des deep-copy	Returns:		"	| myContainer |	super postCopy.	self containerPolicy: self containerPolicy copy.	myContainer := self container.	self containerPolicy initializeContainer: self.	myContainer do: [:each | self containerPolicy performAdd: each copy in: self]</body><body package="JOOPS-ObjectLinks" selector="postSemiCopy">postSemiCopy	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Nachbehandlung des Semi-Copy 		Returns:		"	super postSemiCopy.	self containerPolicy: self containerPolicy copy.	self containerPolicy initializeContainer: self</body></methods><methods><class-id>Joops.UML.MultiLinkContainer</class-id> <category>adding-removing</category><body package="JOOPS-ObjectLinks" selector="performAdd:">performAdd: anObject	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Fuege anObjekt in meinem Domain-Objekt-Container ein	Returns:		&lt;Object | nil&gt;"	^self containerPolicy performAdd: anObject in: self</body><body package="JOOPS-ObjectLinks" selector="performRemove:">performRemove: anObject	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Entferne anObjekt aus meinem Domain-Objekt-Container 	Returns:		&lt;Object | nil&gt;"	^self containerPolicy performRemove: anObject in: self</body></methods><methods><class-id>Joops.UML.MultiLinkContainer</class-id> <category>database</category><body package="JOOPS-ObjectLinks" selector="postRead">postRead	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Nachbehandlung mein Lesen aus der DB	Returns:		"	self containerPolicy: self class defaultContainerPolicyClass new</body></methods><methods><class-id>Joops.UML.MultiLinkContainer</class-id> <category>testing</category><body package="JOOPS-ObjectLinks" selector="exist:">exist: anObject	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Melde, ob ich das Domain-Objekt anObject enthalte (Identität)	Returns:		&lt;Boolean&gt;"	^self containerPolicy exist: anObject in: self</body><body package="JOOPS-ObjectLinks" selector="includes:">includes: anObject	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Melde, ob ich das Domain-Objekt anObject enthalte	Returns:		&lt;Boolean&gt;"	^self containerPolicy includes: anObject in: self</body></methods><methods><class-id>Joops.UML.MultiLinkContainer class</class-id> <category>defaults</category><body package="JOOPS-ObjectLinks" selector="defaultContainerPolicyClass">defaultContainerPolicyClass	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere die default-Klasse meiner Policy. Abgeleitete Klassen können die Methode reimplementieren	Returns:		&lt;OrderedContainerPolicy&gt;"	^OrderedContainerPolicy</body></methods><methods><class-id>Joops.UML.ManyContainer</class-id> <category>testing</category><body package="JOOPS-ObjectLinks" selector="isValid">isValid	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Prüfe, ob meine Cardinalität stimmt. 		Returns:		&lt;Boolean&gt;"	^self isEmpty not</body></methods><methods><class-id>Joops.UML.TestChildObject</class-id> <category>initialize-release</category><body package="JOOPS-ObjectLinks" selector="initialize:">initialize: aName	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	name := aName.	parent := UMLAssociation new.	parent attachTo: self</body></methods><methods><class-id>Joops.UML.TestChildObject</class-id> <category>accessing</category><body package="JOOPS-ObjectLinks" selector="parent">parent	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	^parent</body></methods><methods><class-id>Joops.UML.TestChildObject</class-id> <category>adding-removing</category><body package="JOOPS-ObjectLinks" selector="link:">link: aParent	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	self parent add: aParent</body><body package="JOOPS-ObjectLinks" selector="unlink:">unlink: aParent	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	self parent remove: aParent</body></methods><methods><class-id>Joops.UML.TestChildObject</class-id> <category>copying</category><body package="JOOPS-ObjectLinks" selector="postCopy">postCopy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 7, 1997	Changed:	Returns:		"	super postCopy.	self breakDependents.	name := name copy.	parent := UMLAssociation new.	parent attachTo: self.</body></methods><methods><class-id>Joops.UML.TestChildObject</class-id> <category>printing</category><body package="JOOPS-ObjectLinks" selector="printOn:">printOn: aStream 	"Copyright © 1995 JOOPS Springer Josef 	Created:		Springer Josef November 28, 1995 	Changed: 		Returns:		"	super printOn: aStream.	(name isNil or: [name size = 0])		ifTrue: [aStream nextPutAll: '(ohne Namen)']		ifFalse: [aStream nextPutAll: '('; nextPutAll: name; nextPutAll: ')']</body></methods><methods><class-id>Joops.UML.TestChildObject class</class-id> <category>instance creation</category><body package="JOOPS-ObjectLinks" selector="new">new	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	^self newWithName: nil</body><body package="JOOPS-ObjectLinks" selector="newWithName:">newWithName: aName	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	^super new initialize: aName</body></methods><methods><class-id>Joops.UML.OneContainer</class-id> <category>testing</category><body package="JOOPS-ObjectLinks" selector="isValid">isValid	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Prüfe, ob meine Cardinalitaet stimmt. 	Returns:		&lt;Boolean&gt;"	^self domain notNil</body></methods><methods><class-id>Joops.UML.UnorderedContainerPolicy</class-id> <category>initialize-release</category><body package="JOOPS-ObjectLinks" selector="initializeContainer:">initializeContainer: aLinkContainer	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Initialisiert den LinkContainer aLinkContainer mit einer List.	Returns:		"	aLinkContainer container: List new</body></methods><methods><class-id>Joops.UML.UMLLink</class-id> <category>enumerating</category><body package="JOOPS-ObjectLinks" selector="collect:">collect: aBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		17. März 2009 Version 2.10					Use #container instead of #asCollection for better performance		Liefere eine OrderedCollection mit den Eval-Objekten von aBlock.		Returns:		&lt;OrderedCollection of: Object&gt;"	^self container container collect: aBlock</body><body package="JOOPS-ObjectLinks" selector="detect:">detect: aBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Suche ein Domain-Objekt, fuer welches aBlock true evaluiert. 		Returns:		&lt;Object&gt;"	^self detect: aBlock ifNone: [nil]</body><body package="JOOPS-ObjectLinks" selector="detect:ifNone:">detect: aBlock ifNone: anAbsentBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		17. März 2009 Version 2.10					Use #container instead of #asCollection for better performance		Suche ein Domain-Objekt, fuer welches aBlock true evaluiert. 		Returns:		&lt;Object&gt;"	^self container container detect: aBlock ifNone: anAbsentBlock</body><body package="JOOPS-ObjectLinks" selector="do:">do: aBlock	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	self container do: aBlock</body><body package="JOOPS-ObjectLinks" selector="inject:into:">inject: aValue into: aBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		17. März 2009 Version 2.10					Use #container instead of #asCollection for better performance		Evaluiere aBlock fuer alle meine Domain-Objekte, und uebergib dem Block als erstes Argument aValue. 		Returns:		&lt;Object&gt;								siehe inject:into: in Collection"	^self container container inject: aValue into: aBlock</body><body package="JOOPS-ObjectLinks" selector="keysAndValuesDo:">keysAndValuesDo: aBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Enummeriere all meine gelinkten Domain-Objekte mit ihrem laufenden Index innerhalb der Collection. 	aBlock ist ein 2-Argument-Block (1. Argument der Index, 2. Argument das Domain-Objekt) 		Returns:		"	self container asCollection keysAndValuesDo: aBlock</body><body package="JOOPS-ObjectLinks" selector="reject:">reject: aBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		17. März 2009 Version 2.10					Use #container instead of #asCollection for better performance		Liefere alle Domain-Objekte, fuer die aBlock false evaluiert.		Returns:		&lt;OrderedCollection of: Object&gt;"	^self container container reject: aBlock</body><body package="JOOPS-ObjectLinks" selector="select:">select: aBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		17. März 2009 Version 2.10					Use #container instead of #asCollection for better performance		Liefere alle Domain-Objekte, fuer die aBlock true evaluiert.		Returns:		&lt;OrderedCollection of: Object&gt;"	^self container container select: aBlock</body></methods><methods><class-id>Joops.UML.UMLLink</class-id> <category>accessing</category><body package="JOOPS-ObjectLinks" selector="addableDomains">addableDomains	"Copyright © 1996 JOOPS Springer Josef 	Created:		Springer Josef January 22, 1996 	Changed: 		Konkrete Klassen muessen diese Methode bei Bedarf reimplementieren. Sie retourniert die 	aufnehmbaren Objekte als Klassen. 		Returns:		&lt;Array of: Class&gt;"	^#()</body><body package="JOOPS-ObjectLinks" selector="addableDomainsAsSymbol">addableDomainsAsSymbol	"Copyright © 1996 JOOPS Springer Josef 	Created:		Springer Josef January 22, 1996 	Changed: 		Liefert die Klassen-Symbole der Klassen, die in dem Objekt aufgenommen werden koennen. Konkrete 	Klassen muessen dazu die Instance-Methode 'addableDomains' implementieren. 		Returns:		&lt;Array of: Symbol&gt;"	| keys addable |	addable := self addableDomains.	keys := Array withSize: addable size.	1 to: addable size do: [:i | keys at: i put: (addable at: i) asSymbol].	^keys</body><body package="JOOPS-ObjectLinks" selector="attachTo:">attachTo: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Binde mich an mein Parent-Domain-Objekt anObject. Falls ich bereicts an ein anderes 	Domain-Objekt gebunden bin, werden die Links zu diesem zuerst aufgeloest. 		Returns:		"	(self parent notNil and: [anObject ~~ self parent])		ifTrue: [self direction detachFrom: self].	self parent: anObject.	self direction attachTo: self</body><body package="JOOPS-ObjectLinks" selector="detach">detach	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Loese die Verbindung zu meinem Parent (Domain-Objekt) 		Returns:		"	self parent isNil ifFalse: [self direction detachFrom: self].	self parent: nil</body><body package="JOOPS-ObjectLinks" selector="domain">domain	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 7, 1997	Changed:	Liefere den/die Domain-Objekte meines Containers	Returns:		&lt;Object | Collection&gt;"	^self container domain</body><body package="JOOPS-ObjectLinks" selector="find:">find: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Suche und liefere das Domain-Objekt, welches mit den Attributen von anObject uebereinstimmt. 		Returns:		&lt;Object | nil&gt;"	^self find: anObject ifNone: [nil]</body><body package="JOOPS-ObjectLinks" selector="find:ifNone:">find: anObject ifNone: aBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Suche und liefere das Domain-Objekt, welches mit den Attributen von anObject uebereinstimmt. 		Returns:		&lt;Object&gt;"	| theObject |	theObject := self container find: anObject.	^theObject notNil		ifTrue: [theObject]		ifFalse: [aBlock value]</body><body package="JOOPS-ObjectLinks" selector="first">first	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 8, 1997 	Changed: 		Liefere das erste Domain-Objekt meines Containers 		Returns:		&lt;Object&gt;"	^self container first</body><body package="JOOPS-ObjectLinks" selector="indexOf:">indexOf: anObject	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Liefere den Index von anObject innerhalb der LinkCollection		Returns:		&lt;Integer&gt;"	^self container indexOf: anObject</body><body package="JOOPS-ObjectLinks" selector="last">last	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 8, 1997 	Changed: 		Liefere das letzte Domain-Objekt meines Containers 		Returns:		&lt;Object&gt;"	^self container last</body><body package="JOOPS-ObjectLinks" selector="parent">parent	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere meinen Parent (das Domain-Objekt)	Returns:		&lt;Object&gt;"	^parent</body><body package="JOOPS-ObjectLinks" selector="size">size	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Liefere die Anzahl meiner Domain-Objekte	Returns:		&lt;Integer&gt;"	^self container size</body></methods><methods><class-id>Joops.UML.UMLLink</class-id> <category>testing</category><body package="JOOPS-ObjectLinks" selector="contains:">contains: aBlock 	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 30. Januar 2003 Version 2.00	Changed:			Returns: 		&lt;Boolean&gt;"	self detect: aBlock ifNone: [^false].	^true</body><body package="JOOPS-ObjectLinks" selector="exist:">exist: anObject	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Pruefe, ob ich anObject bereits enthalte (Objektidentitaet)	Returns:		&lt;Boolean&gt;"	^self container exist: anObject</body><body package="JOOPS-ObjectLinks" selector="includes:">includes: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Pruefe, ob ich anObject bereits enthalte (Objektinhalt-Uebereinstimmung). Die exakte Strategie zum 	Vergleich zweier Domain-Objekte ist in der verwendeten Container-Policy festgelegt. 		Returns:		&lt;Boolean&gt;"	^self container includes: anObject</body><body package="JOOPS-ObjectLinks" selector="isAddable:">isAddable: anObject	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Pruefe, ob ich dieses Objekt aufnehmen kann.	Returns:		&lt;Boolean&gt;"	^self container isAddable: anObject</body><body package="JOOPS-ObjectLinks" selector="isDirty">isDirty	"Copyright © 1998 JOOPS Springer Josef	Created:		Springer Josef July 22, 1998	Changed:	Melde, ob ich dirty bin. Muss noch konkret implementiert werden	Returns:		&lt;Boolean&gt;"	^false</body><body package="JOOPS-ObjectLinks" selector="isEmpty">isEmpty	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Melde ob ich leer (keine Domain-Objekte) bin	Returns:		&lt;Boolean&gt;"	^self container isEmpty</body><body package="JOOPS-ObjectLinks" selector="isValid">isValid	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Pruefe, ob die Contrains meines Container eingehalten sind	Returns:		&lt;Boolean&gt;"	^self container isValid</body><body package="JOOPS-ObjectLinks" selector="notEmpty">notEmpty	"Copyright © 2002 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef Donnerstag, 22. August 2002 Version 2.01	Changed:	Returns:		&lt;Boolean&gt;"	^self isEmpty not</body></methods><methods><class-id>Joops.UML.UMLLink</class-id> <category>defaults</category><body package="JOOPS-ObjectLinks" selector="defaultBidirectionalLinkSelector">defaultBidirectionalLinkSelector	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere den Default-Selector (BlockClosure) für das bidirektionale Linken	Returns:		&lt;Symbol | BlockClosure&gt;"	^#link:</body><body package="JOOPS-ObjectLinks" selector="defaultBidirectionalUnlinkSelector">defaultBidirectionalUnlinkSelector	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere den Default-Selector (BlockClosure) für das bidirektionale Unlinken	Returns:		&lt;Symbol | BlockClosure&gt;"	^#unlink:</body></methods><methods><class-id>Joops.UML.UMLLink</class-id> <category>private</category><body package="JOOPS-ObjectLinks" selector="container">container	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere meinen Domain-Objekt-Container (ein LinkContainer)	Returns:		&lt;LinkContainer&gt;"	^container</body><body package="JOOPS-ObjectLinks" selector="container:">container: aLinkContainer	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:		Setze meinen Container aLinkContainer	Returns:		&lt;LinkContainer&gt;"	^container := aLinkContainer</body><body package="JOOPS-ObjectLinks" selector="direction">direction	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere mein LinkDirection-Policy	Returns:		&lt;LinkDirection&gt;"	^direction</body><body package="JOOPS-ObjectLinks" selector="direction:">direction: aLinkDirection	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:		Setze meine LinkDirection aLinkDirection	Returns:		&lt;LinkDirection&gt;"	^direction:= aLinkDirection</body><body package="JOOPS-ObjectLinks" selector="parent:">parent: anObject	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:		Setze meinen Parent anObject (das Domain-Objekt)	Returns:		&lt;Object&gt;"	^parent := anObject</body></methods><methods><class-id>Joops.UML.UMLLink</class-id> <category>initialize-release</category><body package="JOOPS-ObjectLinks" selector="initializeWithContainerClass:withDirectionClass:">initializeWithContainerClass: aContainerClass withDirectionClass: aDirectionClass	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Returns:		"	self container: aContainerClass new.	self container attachTo: self.	self direction: aDirectionClass new.</body><body package="JOOPS-ObjectLinks" selector="initializeWithContainerClass:withLinkDirectionClass:">initializeWithContainerClass: aLinkContainerClass withLinkDirectionClass: aLinkDirectionClass	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Returns:		"	self container: aLinkContainerClass new.	self container attachTo: self.	self direction: aLinkDirectionClass new.</body></methods><methods><class-id>Joops.UML.UMLLink</class-id> <category>adding-removing</category><body package="JOOPS-ObjectLinks" selector="add:">add: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		5. März 2003 Version 2.01					#silentAdd: does the real job		Fuege anObject in mir ein. Informiere meine Dependents davon. 		Returns:		&lt;Object | nil&gt;"	| addedObject |	addedObject := self silentAdd: anObject.	addedObject notNil ifTrue: [self changed: #componentAdded with: addedObject].	^addedObject</body><body package="JOOPS-ObjectLinks" selector="addAll:">addAll: aCollection	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		27. Mai 2009 Version 2.10					Optimized with use of #select:		Trage alle Domain-Objekte aus aCollection ein. Liefere eine neue Collection mit den Objekten, die 	eingetragen werden konnten. 		Returns:		&lt;Collection&gt;"		^aCollection select: [:each | (self add: each) notNil]</body><body package="JOOPS-ObjectLinks" selector="move:to:">move: anObject to: aDestination 	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 16. August 2003 Version 2.01	Changed: 				Move anObject from my container to aDestinations container	Returns:		&lt;Object | nil&gt;"	^(self silentMove: anObject to: aDestination) notNil 		ifTrue: 			[self changed: #componentRemoved with: anObject.			aDestination changed: #componentAdded with: anObject.			anObject]		ifFalse: [nil]</body><body package="JOOPS-ObjectLinks" selector="remove">remove	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		27. Mai 2009 Version 2.10					Objects must be taken from an extra collection not to get side-effects with my					connection while enumerating. Removing was done first inside the do:-block,					whitch may produce side-effects !!!					Optimized with use of #select:	Entferne alle Domain-Objekte. Liefere die entfernten Objekte in einer neuen Collection. 		Returns:		&lt;OrderedCollection of: Object&gt;"		^(self collect: [:each | each])		select: [:each | (self remove: each) notNil]</body><body package="JOOPS-ObjectLinks" selector="remove:">remove: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		4. März 2003 Version 2.01					#silentRemove: does the real job		Entferne anObject aus mir. Informiere meine Dependents davon 		Returns:		&lt;Object | nil&gt;"	^(self silentRemove: anObject) notNil 		ifTrue: 			[self changed: #componentRemoved with: anObject.			anObject]		ifFalse: [nil]</body><body package="JOOPS-ObjectLinks" selector="removeAll:">removeAll: aCollection	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		27. Mai 2009 Version 2.10					Optimized with use of #select:		Entferne alle Domain-Objekte aus aCollection ein. Liefere eine neue Collection mit den Objekten, die 	entfernt werden konnten. 		Returns:		&lt;Collection&gt;"		^aCollection select: [:each | (self remove: each) notNil]</body><body package="JOOPS-ObjectLinks" selector="removeAllSuchThat:">removeAllSuchThat: aBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Entferne alle Domain-Objekte fuer die aBlock true evaluiert. 		Returns:		&lt;OrderedCollection of: Object&gt;"	| objectsToRemove |	objectsToRemove := self select: [:each | (aBlock value: each)					== true].	^self removeAll: objectsToRemove</body><body package="JOOPS-ObjectLinks" selector="silentAdd:">silentAdd: anObject 	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 5. März 2003 Version 2.01	Changed: 		Returns:		&lt;Object | nil&gt;"	^self direction add: anObject in: self.</body><body package="JOOPS-ObjectLinks" selector="silentAddAll:">silentAddAll: aCollection	"Copyright © 2007 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 16. August 2007 Version 2.01	Changed: 		27. Mai 2009 Version 2.10					Optimized with use of #select:		Add all objects in aCollection silent and answer the added.	Returns:		&lt;Collection&gt;"		^aCollection select: [:each | (self silentAdd: each) notNil]</body><body package="JOOPS-ObjectLinks" selector="silentMove:to:">silentMove: anObject to: aDestination 	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 4. März 2003 Version 2.01	Changed: 		Move anObject silent from my container to aDestination	Returns:		&lt;Object | nil&gt;"	^(aDestination notNil and: 			[(self direction 				remove: anObject				conditional: false				in: self) notNil]) 		ifTrue: [aDestination direction add: anObject in: aDestination]		ifFalse: [nil]</body><body package="JOOPS-ObjectLinks" selector="silentRemove">silentRemove	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 4. März 2003 Version 2.01	Changed: 		27. Mai 2009 Version 2.10					Objects must be taken from an extra collection not to get side-effects with my					connection while enumerating. Removing was done first inside the do:-block,					whitch may produce side-effects !!!					Optimized with use of #select:	Remove all objects silent and answer the removed objects	Returns:		&lt;OrderedCollection of: Object&gt;"		^(self collect: [:each | each])		select: [:each | (self silentRemove: each) notNil]</body><body package="JOOPS-ObjectLinks" selector="silentRemove:">silentRemove: anObject 	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 4. März 2003 Version 2.01	Changed: 		Remove anObject silent	Returns:		&lt;Object | nil&gt;"	^self direction remove: anObject in: self</body><body package="JOOPS-ObjectLinks" selector="silentRemoveAll:">silentRemoveAll: aCollection	"Copyright © 2007 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 31. August 2007 Version 2.01	Changed: 		27. Mai 2009 Version 2.10					Optimized with use of #select:		Remove the objects in aCollection silent and answer the removed objects	Returns:		&lt;OrderedCollection of: Object&gt;"		^aCollection select: [:each | (self silentRemove: each) notNil]</body></methods><methods><class-id>Joops.UML.UMLLink</class-id> <category>copying</category><body package="JOOPS-ObjectLinks" selector="postCopy">postCopy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Returns:		"	super postCopy.	self breakDependents.	self parent: nil</body></methods><methods><class-id>Joops.UML.UMLLink</class-id> <category>database</category><body package="JOOPS-ObjectLinks" selector="delete">delete	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Alle meine Domain-Objekte werden bei mir ausgetragen und in der DB geloescht. Abgeleitete Klassen 	muessen den Service reimplementieren. 		Returns:		&lt;Boolean&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="delete:">delete: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		anObject wird bei mir ausgetragen und in der DB geloescht. Abgeleitete Klassen muessen den 	Service reimplementieren. 		Returns:		&lt;Boolean&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="deleteAllSuchThat:">deleteAllSuchThat: aBlock 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Entferne alle Domain-Objekte in mir und der Datenbank, fuer die aBlock true evaluiert. 		Returns:		&lt;Boolean&gt;"	self do: [:each | (aBlock value: each)			== true ifTrue: [(self delete: each)				ifFalse: [^false]]].	^true</body><body package="JOOPS-ObjectLinks" selector="postRead">postRead	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Abschlussbehandlung nach dem lesen aus der DB. 	Achtung: Falls der UMLLink mit einer konkreten LinkDirection-Klasse gebildet wurde, kann dies nicht 	funktionieren, da hier die defaultDirectionClass verwendet wird !!! 		Returns:		"	self direction: self class defaultDirectionClass new</body><body package="JOOPS-ObjectLinks" selector="store">store	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Alle meine Domain-Objekte werden in der DB persistent gemacht. Abgeleitete Klassen 	muessen den Service reimplementieren. 		Returns:		&lt;Boolean&gt;"	^self subclassResponsibility</body><body package="JOOPS-ObjectLinks" selector="store:">store: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		anObject wird bei mir eingetragen und in der DB persistent gemacht. Abgeleitete Klassen muessen den 	Service reimplementieren. 		Returns:		&lt;Boolean&gt;"	^self subclassResponsibility</body></methods><methods><class-id>Joops.UML.UMLLink</class-id> <category>converting</category><body package="JOOPS-ObjectLinks" selector="asCollection">asCollection	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 5. März 2003 Version 2.01	Changed:			Returns: 		&lt;Collection&gt;"	^self container asCollection</body><body package="JOOPS-ObjectLinks" selector="asOrderedCollection">asOrderedCollection	"Copyright © 2003 JOOPS Informationstechnik GmbH 	Created: 		Springer Josef 5. März 2003 Version 2.01	Changed:			Returns: 		&lt;Collection&gt;"	^self asCollection asOrderedCollection</body></methods><methods><class-id>Joops.UML.UMLLink class</class-id> <category>instance creation</category><body package="JOOPS-ObjectLinks" selector="new">new	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Returns:		"	^super new initializeWithContainerClass: self defaultContainerClass withDirectionClass: self defaultDirectionClass</body><body package="JOOPS-ObjectLinks" selector="newWithContainerClass:">newWithContainerClass: aContainerClass	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Returns:		"	^super new initializeWithContainerClass: aContainerClass withLinkDirectionClass: self defaultDirectionClass</body><body package="JOOPS-ObjectLinks" selector="newWithContainerClass:withDirectionClass:">newWithContainerClass: aContainerClass withDirectionClass: aDirectionClass	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 30, 1997	Changed:	Returns:		"	^super new initializeWithContainerClass: aContainerClass withLinkDirectionClass: aDirectionClass</body></methods><methods><class-id>Joops.UML.UMLAggregat</class-id> <category>testing</category><body package="JOOPS-ObjectLinks" selector="isValid">isValid	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Melde ob ich vavlid bin. 		Returns:		&lt;Boolean&gt;"	super isValid		ifTrue: [self do: [:each | each isValid ifFalse: [^false]]]		ifFalse: [^false].	^true</body></methods><methods><class-id>Joops.UML.UMLAggregat</class-id> <category>copying</category><body package="JOOPS-ObjectLinks" selector="postCopy">postCopy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Abschlussbehandlung des Deep-Copy. Mein LinkContainer wird ebenso vollstaendig kopiert.	Returns:		"	super postCopy.	container := self container copy.	container attachTo: self.	direction := self direction copy.</body></methods><methods><class-id>Joops.UML.UMLAggregat</class-id> <category>database</category><body package="JOOPS-ObjectLinks" selector="delete:in:">delete: anObject in: aSession 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Entferne anObject aus mir, und loesche es aus der DB. 		Returns:		&lt;Boolean&gt;"	^(self remove: anObject) notNil		ifTrue: [anObject deleteIn: aSession]		ifFalse: [false]</body><body package="JOOPS-ObjectLinks" selector="deleteIn:">deleteIn: aSession 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Entferne alle in mir eingetragenen Domain-Objekte und loesche sie aus der DB. 		Returns:		&lt;Boolean&gt;"	self do: [:each | (self delete: each in: aSession)			ifFalse: [^false]].	^true</body><body package="JOOPS-ObjectLinks" selector="store">store	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Mache alle in mir eingetragenen Domain-Objekte in der DB persistent. 		Returns:		&lt;Boolean&gt;"	self do: [:each | (self store: each)			ifFalse: [^false]].	^true</body><body package="JOOPS-ObjectLinks" selector="store:">store: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Trage anObject bei mir ein, und mache es in der DB persistent. 		Returns:		&lt;Boolean&gt;"	^(self add: anObject) notNil		ifTrue: [anObject store]		ifFalse: [false]</body><body package="JOOPS-ObjectLinks" selector="store:in:">store: anObject in: aSession 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Trage anObject bei mir ein, und mache es in der DB persistent. 		Returns:		&lt;Boolean&gt;"	^(self add: anObject) notNil		ifTrue: [anObject storeIn: aSession]		ifFalse: [false]</body></methods><methods><class-id>Joops.UML.UMLAggregat class</class-id> <category>defaults</category><body package="JOOPS-ObjectLinks" selector="defaultContainerClass">defaultContainerClass	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Liefere die default Klasse für meinen Domain-Container. Abgeleitete Klassen können die Methode reimplementieren	Returns:		&lt;class ZeroToManyContainer&gt;"	^ZeroToManyContainer</body><body package="JOOPS-ObjectLinks" selector="defaultDirectionClass">defaultDirectionClass	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Liefere die default Klasse für meinen LinkDirection-Policy. Abgeleitete Klassen koennen die Methode 	reimplementieren 		Returns:		&lt;class BidirectionalLink&gt;"	^BidirectionalLink</body></methods><methods><class-id>Joops.UML.TestParentObject</class-id> <category>accessing</category><body package="JOOPS-ObjectLinks" selector="children">children	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	^childs</body></methods><methods><class-id>Joops.UML.TestParentObject</class-id> <category>adding-removing</category><body package="JOOPS-ObjectLinks" selector="add:">add: aChild	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	^self children add: aChild</body><body package="JOOPS-ObjectLinks" selector="remove:">remove: aChild	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	^self children remove: aChild</body></methods><methods><class-id>Joops.UML.TestParentObject</class-id> <category>copying</category><body package="JOOPS-ObjectLinks" selector="postCopy">postCopy	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 7, 1997	Changed:	Returns:		"	super postCopy.	self breakDependents.	name := name copy.	childs := childs copy.	childs attachTo: self</body></methods><methods><class-id>Joops.UML.TestParentObject</class-id> <category>initialize-release</category><body package="JOOPS-ObjectLinks" selector="initialize:">initialize: aName	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	name := aName.	childs := UMLAggregat new.	childs attachTo: self</body></methods><methods><class-id>Joops.UML.TestParentObject</class-id> <category>printing</category><body package="JOOPS-ObjectLinks" selector="printOn:">printOn: aStream 	"Copyright © 1995 JOOPS Springer Josef 	Created:		Springer Josef November 28, 1995 	Changed: 		Returns:		"	super printOn: aStream.	(name isNil or: [name size = 0])		ifTrue: [aStream nextPutAll: '(ohne Namen)']		ifFalse: [aStream nextPutAll: '('; nextPutAll: name; nextPutAll: ')']</body></methods><methods><class-id>Joops.UML.TestParentObject class</class-id> <category>instance creation</category><body package="JOOPS-ObjectLinks" selector="new">new	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	^self newWithName: nil</body><body package="JOOPS-ObjectLinks" selector="newWithName:">newWithName: aName	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 5, 1997	Changed:	Returns:		"	^super new initialize: aName</body></methods><methods><class-id>Joops.UML.TestParentObject class</class-id> <category>examples</category><body package="JOOPS-ObjectLinks" selector="test">test	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 7, 1997 	Changed: 		TestParentObject test 		Returns:		"	| parent copyParent |	parent := self newWithName: 'Parent'.	self testAddChildsTo: parent count: 5 startNumber: 1.	Transcript show: '**************** Test Parent mit Childs';cr.	self testContent: parent.	copyParent := parent copy.	self testCopy: parent copiedParent: copyParent.	self testBackwardLink: parent.	self testBackwardLink: copyParent.	self testCopyBackwardLink: parent copiedParent: copyParent.	self testAccessChildsIn: parent.	self testRemoveChildsFrom: parent count: 10.	Transcript show: '**************** Test Parent ohne Childs';cr.	self testContent: parent.	copyParent := parent copy.	self testCopy: parent copiedParent: copyParent.	self testBackwardLink: parent.	self testBackwardLink: copyParent.	self testCopyBackwardLink: parent copiedParent: copyParent.	self testAccessChildsIn: parent.</body><body package="JOOPS-ObjectLinks" selector="testAccessChildsIn:">testAccessChildsIn: aParent 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 7, 1997 	Changed: 		Returns:		"	| firstChild |	Transcript show: 'Start Test-AccessChildren'; cr.	Transcript show: 'First child: ';print: (firstChild := aParent children first); cr; flush.	Transcript show: 'Last child: ';print: (aParent children last); cr; flush.	firstChild notNil ifTrue: [Transcript show: 'Index of first: '; show: (aParent children indexOf: firstChild) printString;cr]ifFalse: [Transcript show: 'Fehler indexOf'; cr].	Transcript show: 'End Test-AccessChildren'; cr.</body><body package="JOOPS-ObjectLinks" selector="testAddChildsTo:count:startNumber:">testAddChildsTo: aParent count: aCountNumber startNumber: aStartNumber 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 7, 1997 	Changed: 		Returns:		"	Transcript show: 'Start Test-Add '; print: aCountNumber; show: ' Childs'; cr; flush.	(1 to: aCountNumber)		do: 			[:number | 			| theChild |			theChild := TestChildObject newWithName: (aStartNumber + number - 1) printString , '. Child'.			(aParent add: theChild)				~~ theChild ifTrue: [Transcript show: 'Child: '; print: theChild; show: ' konnte nicht eingefuegt werden'; cr; flush]].	Transcript show: 'End Test-Add '; print: aCountNumber; show: ' Childs'; cr; flush.</body><body package="JOOPS-ObjectLinks" selector="testBackwardLink:">testBackwardLink: aParent 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 7, 1997 	Changed: 		Returns:		"	Transcript show: 'Start Test-BackwardLink'; cr.	aParent children do: [:each | each parent domain ~~ aParent ifTrue: [Transcript show: 'Backward Link von '; print: each; show: ' ist falsch'; cr]].	Transcript flush.	Transcript show: 'End Test-BackwardLink'; cr</body><body package="JOOPS-ObjectLinks" selector="testContent:">testContent: aParent	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 7, 1997 	Changed: 		Returns:		"	Transcript show: 'Start Test-Content'; cr.	Transcript print: aParent; show: ' hat '; show: aParent children size printString; show: ' Children'; cr.	Transcript show: 'Die Children sind: '; cr.	aParent children do: [:each | Transcript show: '   '; print: each; cr].	Transcript show: 'End Test-Content'; cr.	Transcript flush.</body><body package="JOOPS-ObjectLinks" selector="testCopy:copiedParent:">testCopy: aParent copiedParent: aCopyParent 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 7, 1997 	Changed: 		Returns:		"	Transcript show: 'Start Test-Copy'; cr.	aParent children do: [:each | (aCopyParent children detect: [:eachChild | eachChild == each]) notNil ifTrue: [Transcript print: each; show: ' ist nicht ordnungsgemaess copiert'; flush]].	Transcript show: 'End Test-Copy'; cr</body><body package="JOOPS-ObjectLinks" selector="testCopyBackwardLink:copiedParent:">testCopyBackwardLink: aParent copiedParent: aCopyParent 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 7, 1997 	Changed: 		Returns:		"	| parents copiedParents |	Transcript show: 'Start Test-CopyBackwardLink'; cr.	parents := aParent children collect: [:each | each parent domain].	copiedParents := aCopyParent children collect: [:each | each parent domain].	parents size = copiedParents size ifFalse: [Transcript show: 'Anzahl Backwardlinks von Orginal- und Copy stimmen nicht ueberein'; cr].	parents do: [:each | (copiedParents detect: [:eachParent | eachParent == each]			ifNone: [nil]) notNil ifTrue: [Transcript show: 'Orginal und Copy haben gleichen Backwardlink'; cr]].	Transcript show: 'End Test-CopyBackwardLink'; cr</body><body package="JOOPS-ObjectLinks" selector="testRemoveChildsFrom:count:">testRemoveChildsFrom: aParent count: aCountNumber 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 7, 1997 	Changed: 		Returns:		"	Transcript show: 'Start Test-Remove '; print: aCountNumber; show: ' Children'; cr; flush.	(1 to: aCountNumber)		do: 			[:number | 			| theChild |			theChild := aParent children first.			theChild notNil				ifTrue: [(aParent remove: theChild)						~~ theChild ifTrue: [Transcript print: theChild; show: ' konnte nicht geloescht werden'; cr; flush]]				ifFalse: [Transcript print: number; show: '. Child nicht vorhanden'; cr; flush]].	Transcript show: 'End Test-Remove '; print: aCountNumber; show: ' Children'; cr; flush</body></methods><methods><class-id>Joops.UML.NumberedContainer</class-id> <category>testing</category><body package="JOOPS-ObjectLinks" selector="isValid">isValid	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Prüfe, ob meine Cardinalität stimmt. 	Returns:		&lt;Boolean&gt;"	^self container isEmpty not</body></methods><methods><class-id>Joops.UML.SortedContainerPolicy</class-id> <category>initialize-release</category><body package="JOOPS-ObjectLinks" selector="initializeContainer:">initializeContainer: aLinkContainer	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Initialisiert den LinkContainer aLinkContainer mit einer SortedCollection.	Returns:		"	aLinkContainer container: (SortedCollection sortBlock: self class sortBlock)</body></methods><methods><class-id>Joops.UML.SortedContainerPolicy</class-id> <category>converting</category><body package="JOOPS-ObjectLinks" selector="asCollection:">asCollection: aLinkContainer 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Liefere eine Kopie des Domain-Objekt-Containers in aLinkContainer. Die Objekte werden dabei neu 	sortiert 		Returns:		&lt;Collection of: Object&gt;"	^aLinkContainer container asSortedCollection: aLinkContainer container sortBlock</body></methods><methods><class-id>Joops.UML.SortedContainerPolicy class</class-id> <category>defaults</category><body package="JOOPS-ObjectLinks" selector="sortBlock">sortBlock	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef May 8, 1997	Changed:		21. März 2009 Version 2.10					Sortrule changed from #&lt;= to #&lt;	Liefere den Default-Sortblock.		Returns:		&lt;BlockClosure&gt;"	^[:domain1 :domain2 | domain1 &lt; domain2]</body></methods><methods><class-id>Joops.UML.OrderedContainerPolicy</class-id> <category>initialize-release</category><body package="JOOPS-ObjectLinks" selector="initializeContainer:">initializeContainer: aLinkContainer	"Copyright © 1997 JOOPS Springer Josef	Created:		Springer Josef April 24, 1997	Changed:	Initialisiert den LinkContainer aLinkContainer mit einer OrderedCollection.	Returns:		"	aLinkContainer container: OrderedCollection new</body></methods><methods><class-id>Joops.UML.UMLAssociation</class-id> <category>copying</category><body package="JOOPS-ObjectLinks" selector="postCopy">postCopy	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Abschlussbehandlung des Deep-Copy. Der Link-Container wird ohne seine Domain-Objekte kopiert. 		Returns:		"	super postCopy.	container := self container semiCopy.	container attachTo: self.	direction := self direction copy</body></methods><methods><class-id>Joops.UML.UMLAssociation</class-id> <category>database</category><body package="JOOPS-ObjectLinks" selector="delete">delete	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Alle meine Domain-Objecte sollen in der DB geloescht werden. Da assoziierte Objekte 	eigenstaendige Entitaeten sind, werden hier die Domain-Objekte nur aus dem Link entfernt. 		Returns:		&lt;Boolean&gt;"	self do: [:each | (self remove: each) isNil ifTrue: [^false]].	^true</body><body package="JOOPS-ObjectLinks" selector="delete:">delete: anObject 	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		anObject wird nur aus mir ausgetragen, da associierte Domain-Objekte eigenstaeändige Entitaeten, 	und somit für ihr delete selbst verantwortlich sind. 		Returns:		&lt;Boolean&gt;"	^(self remove: anObject) notNil</body><body package="JOOPS-ObjectLinks" selector="store">store	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef May 5, 1997 	Changed: 		Alle meine Domain-Objecte sollen in der DB gespeichert werden. Da associierte Objekte 	eigenstaendige Entitaeten sind, wird hier nichts gemacht. 		Returns:		&lt;Boolean&gt;"	^true</body></methods><methods><class-id>Joops.UML.UMLAssociation class</class-id> <category>defaults</category><body package="JOOPS-ObjectLinks" selector="defaultContainerClass">defaultContainerClass	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Liefere die default Klasse für meinen Domain-Container. Abgeleitete Klassen koennen die Methode 	reimplementieren 		Returns:		&lt;class ZeroOrOneContainer&gt;"	^ZeroOrOneContainer</body><body package="JOOPS-ObjectLinks" selector="defaultDirectionClass">defaultDirectionClass	"Copyright © 1997 JOOPS Springer Josef 	Created:		Springer Josef April 24, 1997 	Changed: 		Liefere die default Klasse für meinen LinkDirection-Policy. Abgeleitete Klassen koennen die Methode 	reimplementieren 		Returns:		&lt;class UnidirectionalLink&gt;"	^UnidirectionalLink</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class></st-source>