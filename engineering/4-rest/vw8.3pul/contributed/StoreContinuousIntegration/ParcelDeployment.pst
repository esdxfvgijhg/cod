<?xml version="1.0"?><st-source><!-- Name: ParcelDeploymentNotice: The MIT LicenseCopyright (c) 2012 - 2013 , Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: # ParcelDeploymentParcelDeployment adds a menu item to the Package menu called "Deploy (w/ Prereqs)".  Selecting this option will prompt for a directory and then save the selected Pundle(s) and all of their deployment pre-requisites (that are in the current Store database) as parcels with source in the specified directory.  It doesn't re-deploy parcels that are already present and up-to-date.  Modified parcels are given a different version string so that they can be distinguished from published parcels.  It deploys the parcel in such a way that the source pointers stay where they are and don't move to the deployed sources file.This package is helpful if you deploy your system as a base image plus parcels.  You can deploy a parcel from your image to test a fix without going through an entire build process.  Also, the code for deploying parcels can be used as part of an automated build process (see StoreCI-Building, for example).ParcelDeployment is licensed under the MIT license.  See the Copyright tab in the RB or the 'notice' property of this package.# ContributingI'm happy to receive bug fixes and improvements to this package.  If you'd like to contribute, please publish your changes as a "branch" (non-integer) version in the Public Store Repository and contact me as outlined below to let me know.  I will merge your changes back into the "trunk" as soon as I can review them.# Contact InformationIf you have any questions about ParcelDeployment and how to use it, feel free to contact me.* Web site: http://randycoulman.com* Blog: Courageous Software (http://randycoulman.com/blog)* E-mail: randy _at_ randycoulman _dot_ com* Twitter: @randycoulman* GitHub: randycoulmanDbIdentifier: bear73DbTrace: 405883DbUsername: randyDbVersion: 8DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'StoreBase' '') #(#any 'Browser-BrowserUI' ''))PackageName: ParcelDeploymentParcel: #('ParcelDeployment')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'StoreBase' #componentType #bundle) #(#name 'Browser-BrowserUI' #componentType #package #applicability #store))PrerequisiteParcels: #(#('Base VisualWorks' '') #('StoreBase' ''))PrintStringCache: (8,randy)Version: 8Date: 1:14:16 PM May 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (may13.1) of May 3, 2013 on May 3, 2013 at 1:14:16 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ParcelDeployment</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pundle targetDirectory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StoreExtensionsApp</category><attributes><package>ParcelDeployment</package></attributes></class><shared-variable><name>LastDirectory</name><environment>ParcelDeployment</environment><private>false</private><constant>false</constant><category>shares</category><initializer>String new</initializer><attributes><package>ParcelDeployment</package></attributes></shared-variable><methods><class-id>ParcelDeployment</class-id> <category>deploy</category><body package="ParcelDeployment">basicDeploy	| versionTag |	versionTag := self parcelVersion.	self recursiveMakePathAndDirectory: targetDirectory.	pundle silentPropertyAt: #version put: versionTag.	pundle silentPropertyAt: (pundle isBundle				ifTrue: [#bundleName]				ifFalse: [#packageName])		put: pundle name.	pundle isBundle		ifTrue: 			[pundle				silentPropertyAt: #parcelName put: pundle parcelName;				silentPropertyAt: #bundleStructure					put: (Store.PundleForParcel from: pundle saveLinks: false)].		[pundle parcelOutTo: self parcelFileName asString		sourceFileName: self parcelSourceName asString]			ensure: 				[#(#packageName #bundleName #version #bundleStructure)					do: [:each | pundle silentRemovePropertyAt: each ifAbsent: nil]].	self fixPermissions</body><body package="ParcelDeployment">deploy	Transcript		nextPutAll: pundle parcelName;		space.	self shouldDeploy 		ifTrue: 			[self basicDeploy.			Transcript				nextPutAll: self parcelVersion;				nextPutAll: ' written']		ifFalse: [Transcript nextPutAll: 'up to date'].	Transcript		cr;		endEntry</body><body package="ParcelDeployment">fixPermissions	(self parcelFileName isKindOf: UnixFilename) 		ifTrue: 			[self parcelFileName setProtection: 8r666.			self parcelSourceName setProtection: 8r666]</body><body package="ParcelDeployment">shouldDeploy	| versionTag parcelFileName parcelTag |	pundle hasBeenModified ifTrue: [^true].	parcelFileName := self parcelFileName.	parcelFileName exists ifFalse: [^true].	versionTag := pundle parentRecord version.	parcelTag := (CodeReader new readInfoFromFileNamed: parcelFileName) 				at: #version				ifAbsent: [nil].	^versionTag ~= parcelTag</body></methods><methods><class-id>ParcelDeployment</class-id> <category>private</category><body package="ParcelDeployment">parcelFileName	^targetDirectory construct: pundle parcelName , Parcel fileExtension</body><body package="ParcelDeployment">parcelSourceName	^targetDirectory construct: pundle parcelName , Parcel sourceExtension</body><body package="ParcelDeployment">parcelVersion	| versionTag |	pundle parentRecord ifNil: [^''].	versionTag := pundle parentRecord version.	pundle hasBeenModified 		ifTrue: 			[versionTag := '&lt;1p&gt; [&lt;2s&gt;]' expandMacrosWith: Timestamp now						with: versionTag].	^versionTag</body><body package="ParcelDeployment">recursiveMakePathAndDirectory: aDirectory 	aDirectory exists ifTrue: [^self].	self recursiveMakePathAndDirectory: aDirectory directory.	aDirectory makeDirectory</body></methods><methods><class-id>ParcelDeployment</class-id> <category>initialize</category><body package="ParcelDeployment">pundle: aPundle directory: aDirectory 	pundle := aPundle.	targetDirectory := aDirectory asFilename.	LastDirectory := targetDirectory asString</body></methods><methods><class-id>ParcelDeployment class</class-id> <category>instance creation</category><body package="ParcelDeployment">pundle: aPundle directory: aDirectory 	^self new pundle: aPundle directory: aDirectory</body></methods><methods><class-id>Kernel.CodeComponent</class-id> <category>accessing</category><body package="ParcelDeployment">addAllDeploymentPrerequisitesSatisfying: aBlock into: aSequence	| toTraverse |	toTraverse := (self immediateDeploymentPrerequisitesSatisfying: aBlock)				reject: [:each | aSequence includes: each].	toTraverse		do: [:each | each addAllDeploymentPrerequisitesSatisfying: aBlock into: aSequence].	toTraverse		do: [:each | (aSequence includes: each) ifFalse: [aSequence add: each]]</body><body package="ParcelDeployment">immediateDeploymentPrerequisitesSatisfying: aBlock	^((self prerequisiteDescriptions reject: #isStoreOnly)		collect: #loadedCodeComponent)			select: [:each | each notNil and: [aBlock value: each]]</body></methods><methods><class-id>Kernel.CodeComponent</class-id> <category>properties</category><body package="ParcelDeployment">silentPropertyAt: symbol put: aValue 	properties at: symbol put: aValue</body><body package="ParcelDeployment">silentRemovePropertyAt: symbol ifAbsent: aBlock 	properties removeKey: symbol ifAbsent: aBlock</body></methods><methods><class-id>Kernel.CodeComponent</class-id> <category>accessing</category><body package="ParcelDeployment">withAllDeploymentPrerequisites	^self withAllDeploymentPrerequisitesSatisfying: [:ignored | true]</body><body package="ParcelDeployment">withAllDeploymentPrerequisitesSatisfying: aBlock	| list |	list := OrderedCollection new.	self addAllDeploymentPrerequisitesSatisfying: aBlock into: list.	list addLast: self.	^list</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>menus</category><body package="ParcelDeployment">deployParcelTree	&lt;	menuItem: 'Deploy (w/ Prereqs)...'	nameKey: nil	enablement: #isPundleSelected	indication: nil	menu: #(#pundleMenu)	position: 25.8&gt;	| path |	path := Dialog requestDirectoryName: 'Directory to deploy into?'				default: ParcelDeployment.LastDirectory.	path isEmpty ifTrue: [^self].	self pundles do: 			[:buckage |			buckage leafItems do: 					[:package |					(package						withAllDeploymentPrerequisitesSatisfying: [:each | each isInCurrentDatabase])							do: [:prereq | (ParcelDeployment pundle: prereq directory: path) deploy]]]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>CodeComponent</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Code Components</category><attributes><package>System-Code Components</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class></st-source>