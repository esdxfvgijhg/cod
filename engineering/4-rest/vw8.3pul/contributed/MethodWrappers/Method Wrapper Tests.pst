<?xml version="1.0"?><st-source><!-- Name: Method Wrapper TestsNotice: Copyright 2004 - 2013 Niall RossThis utility is made available to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: I wrote these tests to test my ConditionalMethodWrapper.  They also incidentally verify CalledMethodWrapper and basic wrapper behaviour.  They are thus an incomplete test of the Method Wrapper Base and Method Wrapper Example packages.  They do not test any other packages in the Method Wrappers bundle.DbIdentifier: bear73DbTrace: 401655DbUsername: nrossDbVersion: 1.5DevelopmentPrerequisites: #(#(#any 'Method Wrapper Examples' '') #(#any 'SUnit' ''))PackageName: Method Wrapper TestsParcel: #('Method Wrapper Tests')ParcelName: Method Wrapper TestsPrerequisiteDescriptions: #(#(#name 'Method Wrapper Examples' #componentType #package) #(#name 'SUnit' #componentType #package))PrerequisiteParcels: #(#('Method Wrapper Examples' '') #('SUnit' ''))PrintStringCache: (1.5,nross)Version: 1.5Date: 10:18:43 AM April 10, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (apr13.1) of April 10, 2013 on April 10, 2013 at 10:18:43 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Tests</name><environment>Refactory.Wrappers</environment><private>false</private><imports>			private XProgramming.SUnit.*			private Refactory.Wrappers.*			private Smalltalk.*			</imports><category>Refactory-Method Wrappers-Tests</category><attributes><package>Method Wrapper Tests</package></attributes></name-space><class><name>WrapperTest</name><environment>Refactory.Wrappers.Tests</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testWrapper testParamWrapper trivialWrapper </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Method Wrapper Tests</category><attributes><package>Method Wrapper Tests</package></attributes></class><methods><class-id>Refactory.Wrappers.Tests.WrapperTest</class-id> <category>running</category><body package="Method Wrapper Tests">setUp	MethodWrapper initialize.	trivialWrapper := MethodWrapper on: #toBeTriviallyWrapped inClass: self class.	trivialWrapper install.	testWrapper := CalledMethodWrapper on: #toBeWrapped inClass: self class.	testWrapper install.	testParamWrapper := CalledMethodWrapper on: #toBeWrapped: inClass: self class.	testParamWrapper install</body><body package="Method Wrapper Tests">tearDown	"Ensure nothing is left wrapped however the tests go."	trivialWrapper uninstall.	testWrapper uninstall.	testParamWrapper uninstall.	(self class&gt;&gt;#toBeWrapped) uninstall	"Should be trivial uninstall unless testConditionalWrapper fails""$QA Ignore:Direct state variable access(testWrapper, testParamWrapper, trivialWrapper)$"</body><body package="Method Wrapper Tests">testCalledWrapper	self deny: testWrapper isCalled.	self assert: self toBeWrapped.	self assert: testWrapper isCalled.	self deny: testParamWrapper isCalled.	self assert: (self toBeWrapped: true).	self assert: testParamWrapper isCalled.</body><body package="Method Wrapper Tests">testConditionalWrapper	"Default condition is always do alternative so we need not set it here."	| conditionalWrapper |	self		assert: self toBeWrapped;		assert: (self class&gt;&gt;#toBeWrapped) uninstall == (self class&gt;&gt;#toBeWrapped).	"trivial uninstall as not installed"	(conditionalWrapper := ConditionalMethodWrapper on: #toBeWrapped inClass: self class)		alternative: [:receiver :arguments | false];		install.	self		assert: (self class&gt;&gt;#toBeWrapped) methodWrapper == conditionalWrapper;		deny: self toBeWrapped;		deny: (self class&gt;&gt;#toBeWrapped) uninstall == (self class&gt;&gt;#toBeWrapped).	"uninstalls so second term is now original method""$QA Ignore:Unused arguments(receiver, arguments)$"</body><body package="Method Wrapper Tests">testTrivialWrapper	self deny: (self class&gt;&gt;#toBeTriviallyWrapped == trivialWrapper unwrappedMethod).	self assert: self toBeTriviallyWrapped.</body></methods><methods><class-id>Refactory.Wrappers.Tests.WrapperTest</class-id> <category>utilities</category><body package="Method Wrapper Tests">toBeTriviallyWrapped	"A simple method to wrap and unwrap for test purposes."	^true</body><body package="Method Wrapper Tests">toBeWrapped	"A simple method to wrap and unwrap for test purposes."	^true</body><body package="Method Wrapper Tests">toBeWrapped: aBoolean	"A simple method to wrap and unwrap for test purposes."	^aBoolean</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>private - tests</category><body package="Method Wrapper Tests">methodWrapper	"Allows compatibility between VA and VW tests, more generally between wrappers in systems that allow user subclasses of CompiledMethod and those that do not."	^self</body></methods><methods><class-id>Kernel.CompiledMethod</class-id> <category>method wrapping</category><body package="Method Wrapper Tests">uninstall	"Let's method wrapper test tearDown code be written to work whether a given test succeeded or failed."	^self</body></methods><methods><class-id>Core.Behavior</class-id> <category>accessing method dictionary</category><body package="Method Wrapper Tests">&gt;&gt; aSelector	"Simplifies accessing CompiledMethods to test"	^self compiledMethodAt: aSelector</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Behavior</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclass methodDict format subclasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class><class><name>CompiledMethod</name><environment>Kernel</environment><super>Kernel.CompiledMainBlock</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>mclass sourceCode </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>MethodWrapper</name><environment>Refactory.Wrappers</environment><super>Kernel.CompiledMethod</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>clientMethod selector </inst-vars><class-inst-vars>methods </class-inst-vars><imports></imports><category>Refactory-Method Wrappers</category><attributes><package>Method Wrapper Base</package></attributes></class></st-source>