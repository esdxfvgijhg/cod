<?xml version="1.0"?><st-source><!-- Name: OpenGLNotice: Copyright (c) 2007-2008 Michael Lucas-SmithPermission is hereby granted, free of charge, to any personobtaining a copy of this software and associated documentationfiles (the "Software"), to deal in the Software withoutrestriction, including without limitation the rights to use,copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom theSoftware is furnished to do so, subject to the followingconditions:The above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIESOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE ANDNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHTHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OROTHER DEALINGS IN THE SOFTWARE.Comment: OpenGL - Cross Platform 3D Graphicshttp://www.opengl.orgOpenGL is the premier environment for developing portable, interactive 2D and 3D graphics applications. Since its introduction in 1992, OpenGL has become the industry's most widely used and supported 2D and 3D graphics application programming interface (API), bringing thousands of applications to a wide variety of computer platforms. OpenGL fosters innovation and speeds application development by incorporating a broad set of rendering, texture mapping, special effects, and other powerful visualization functions. Developers can leverage the power of OpenGL across all popular desktop and workstation platforms, ensuring wide application deployment.DbIdentifier: bear73DbTrace: 436014DbUsername: smichaelDbVersion: 3.0 103DevelopmentPrerequisites: #(#(#any 'DLLCC' '') #(#any 'Graphics-Images-FixedPalettes' '') #(#any 'ImageReaders' ''))ExplicitPrerequisites: #()IgnoredPrerequisites: #()Namespace: Smalltalk.OpenGLPackageName: OpenGLParcel: #('OpenGL')ParcelName: OpenGLPrerequisiteDescriptions: #(#(#name 'DLLCC') #(#name 'Graphics-Images-FixedPalettes') #(#name 'ImageReaders'))PrerequisiteParcels: #(#('DLLCC' '') #('Graphics-Images-FixedPalettes' '') #('ImageReaders' ''))PrintStringCache: (3.0 103,smichael)Version: 3.0 103Date: 12:53:06 PM June 13, 2014 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.0 (jun14.2) of June 13, 2014 on June 13, 2014 at 12:53:06 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>OpenGL</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category></category><attributes><package>OpenGL</package></attributes></name-space><class><name>OpenGLInterface</name><environment>OpenGL</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private OpenGL.OpenGLInterfaceDictionary.*			</imports><category></category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.OpenGLInterface</class-id><body>OpenGLInterface provides the C interface to OpenGL and specific APIs for Windows (GDI and WGL), MacOSX (GD and AGL) and Linux (X11 and GLX).</body></comment><class><name>RenderState</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attributes uniforms properties mode indices varyings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.RenderState</class-id><body>RenderState represents a state we wish to place the GPU in and then operate on a set of indices over its active data set. We combine the buffer, program together with its uniforms and attributes and then render the indices.Instance Variables:	attributes	&lt;(Dictionary of: AttributeArray)&gt;	description of attributes	indices	&lt;Interval&gt;	description of indices	program	&lt;Program&gt;	description of program	properties	&lt;(Dictionary of: Object)&gt;	description of properties	uniforms	&lt;(Dictionary of: Object)&gt;	description of uniforms</body></comment><class><name>FloatArray</name><environment>OpenGL</environment><super>Core.IntegerArray</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.FloatArray</class-id><body>FloatArray is an array of floats that lives in byte form inside Smalltalk memory, instead of as individual float objects in a regular array. Accessing the array will create float objects and storing floats in to the array will convert them to byte form.</body></comment><class><name>Matrix</name><environment>OpenGL</environment><super>OpenGL.FloatArray</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Matrix</class-id><body>Matrix is an abtract matrix float array, don't use me - use my subclasses.</body></comment><class><name>Matrix4x3</name><environment>OpenGL</environment><super>OpenGL.Matrix</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Matrix4x3</class-id><body>Matrix4x3 is a 4x3 float matrix</body></comment><class><name>Matrix4</name><environment>OpenGL</environment><super>OpenGL.Matrix</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Matrix4</class-id><body>Matrix4 is a 4x4 float matrix</body></comment><class><name>Matrix2x4</name><environment>OpenGL</environment><super>OpenGL.Matrix</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Matrix2x4</class-id><body>Matrix2x4 is a 2x4 float matrix</body></comment><class><name>Color3</name><environment>OpenGL</environment><super>OpenGL.FloatArray</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Color3</class-id><body>Color3 is an r, g, b float array</body></comment><class><name>Color4</name><environment>OpenGL</environment><super>OpenGL.Color3</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Color4</class-id><body>Color4 is an r, g, b, a float array</body></comment><class><name>RenderBuffer</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.RenderBuffer</class-id><body>RenderBuffer represents a buffer which is attached to a framebuffer. You can use this if you need to feedback data in to a render scene without copying it from the GPU.</body></comment><class><name>FrameBuffer</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.FrameBuffer</class-id><body>FrameBuffer represents a place in GPU memory to render to instead of rendering to the screen or CPU memory.</body></comment><class><name>Matrix3x2</name><environment>OpenGL</environment><super>OpenGL.Matrix</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Matrix3x2</class-id><body>Matrix3x2 is a 3x2 float matrix</body></comment><class><name>Buffer</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Buffer</class-id><body>Buffer is an OpenGL buffer object, holding either arrays of elements, vertexes of fragments.</body></comment><class><name>Vector2</name><environment>OpenGL</environment><super>OpenGL.FloatArray</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Vector2</class-id><body>Vector2 is an x, y float array.</body></comment><class><name>Vector3</name><environment>OpenGL</environment><super>OpenGL.Vector2</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Vector3</class-id><body>Vector3 is an x, y, z float array</body></comment><class><name>Vector4</name><environment>OpenGL</environment><super>OpenGL.Vector3</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Vector4</class-id><body>Vector4 is an x, y, z, w float array</body></comment><class><name>Texture</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id target magnification minification wrap extent internalFormat </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Texture</class-id><body>Texture is an OpenGL texture object that can be set as a texture unit and applied during a render fragmentation.</body></comment><class><name>Cubemap</name><environment>OpenGL</environment><super>OpenGL.Texture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Cubemap</class-id><body>Cubemap is an OpenGL texture with six sides to it for environmental 3d mapping of texture coordinates.</body></comment><class><name>Animation</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>process outerSemaphore innerSemaphore initialized started stopped disabled runtime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Animation</class-id><body>Animation is a specialized process that is designed to pause/resume to do iterative steps of execution. The rate at which the animation is called is undefined, but the duty of the animation is to run in as small a time as it can by doing the smallest amount of work that it can.Sometimes an animation must iterate between 0% and 100%. It can do this if it knows how long it wants to run. It can compute how long it has run by comparing the started time with the disabled time to see how long it has been since the animation last ran. This can be used to compute a frame rate if so desired.While this class does not directly represent an OpenGL concept, it is a common enough function for most rendering engines that it has been included in this package.Instance Variables:	process	&lt;Process&gt;	the process	innerSemaphore	&lt;Semaphore&gt;	the semaphore for the process waits on	outerSemaphore	&lt;Semaphore&gt;	the semaphore the calling process waits on	initialized	&lt;Integer&gt;	the time the animation was initialized	started	&lt;Integer&gt;	the time the animation started running again (resume was called)	stopped	&lt;Integer&gt;	the time the animation stopped running again (pause was called)	runtime	&lt;Integer&gt;	the time the animation took to run last time it ran	disabled	&lt;Integer&gt;	the time the animation has been disabled for, eg: the time between the last time we said #pause and the next time #resume is sent to us</body></comment><class><name>RenderContext</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interface view vendor renderer version program textures texturesHistory extensions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.RenderContext</class-id><body>RenderContext represents the active rendering configuration for our application. Only one RenderContext is active at any time.Subclasses must implement the following messages:	private		activate		deactivate		flushInstance Variables:	handle	&lt;GraphicsMedium | Image&gt;	description of handle</body></comment><class><name>Matrix3x4</name><environment>OpenGL</environment><super>OpenGL.Matrix</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Matrix3x4</class-id><body>Matrix3x4 is a 3x4 float matrix</body></comment><class><name>Shader</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id type attributes uniforms varyings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Shader</class-id><body>Shader is a GLSL vertex or fragment shader.</body></comment><class><name>Matrix2x3</name><environment>OpenGL</environment><super>OpenGL.Matrix</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Matrix2x3</class-id><body>Matrix2x3 is a 2x3 float matrix</body></comment><class><name>AttributeArray</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>buffer stride offset components type normalized dataType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.AttributeArray</class-id><body>AttributeArray represents a cross section of a buffers data to be accessed by a GPU program.</body></comment><class><name>Matrix2</name><environment>OpenGL</environment><super>OpenGL.Matrix</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Matrix2</class-id><body>Matrix2 is a 2x2 float matrix</body></comment><class><name>Matrix4x2</name><environment>OpenGL</environment><super>OpenGL.Matrix</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Matrix4x2</class-id><body>Matrix4x2 is a 4x2 float matrix</body></comment><class><name>Program</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id enabledAttributes varyings attributes uniforms shaders </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Program</class-id><body>Program is a set of GLSL shaders linked together.</body></comment><class><name>Matrix3</name><environment>OpenGL</environment><super>OpenGL.Matrix</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Matrix3</class-id><body>Matrix3 is a 3x3 float matrix</body></comment><class><name>Mipmap</name><environment>OpenGL</environment><super>OpenGL.Texture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><comment><class-id>OpenGL.Mipmap</class-id><body>Mipmap is an OpenGL texture object that can be set as a texture unit and applied during a render fragmentation but applies itself with multiple levels of detail.</body></comment><shared-variable><name>ABGR_8888</name><environment>Graphics.Depth32Image</environment><private>false</private><constant>false</constant><category>opengl</category><initializer>FixedPalette ABGR_8888</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>RGBA_8888</name><environment>Graphics.Depth32Image</environment><private>false</private><constant>false</constant><category>opengl</category><initializer>FixedPalette RGBA_8888</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>BGR_888</name><environment>Graphics.Depth32Image</environment><private>false</private><constant>false</constant><category>opengl</category><initializer>FixedPalette BGR_888</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>RGB_888</name><environment>Graphics.Depth32Image</environment><private>false</private><constant>false</constant><category>opengl</category><initializer>FixedPalette RGB_888</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>BGRA_8888</name><environment>Graphics.Depth32Image</environment><private>false</private><constant>false</constant><category>opengl</category><initializer>FixedPalette BGRA_8888</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>ARGB_8888</name><environment>Graphics.Depth32Image</environment><private>false</private><constant>false</constant><category>opengl</category><initializer>FixedPalette ARGB_8888</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>BGR_888</name><environment>Graphics.Depth24Image</environment><private>false</private><constant>false</constant><category>opengl</category><initializer>FixedPalette BGR_888</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>RGB_888</name><environment>Graphics.Depth24Image</environment><private>false</private><constant>false</constant><category>opengl</category><initializer>FixedPalette RGB_888</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>A_8</name><environment>Graphics.Depth8Image</environment><private>false</private><constant>false</constant><category>opengl</category><initializer>FixedPalette A_8</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>Lock</name><environment>OpenGL.RenderContext</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>Semaphore forMutualExclusion</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>DataTypes</name><environment>OpenGL.OpenGLInterface</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>OpenGLInterface initializeDataTypes</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>OpenGLInterfaceDictionary</name><environment>OpenGL</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>gl</name><environment>OpenGL</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>nil</initializer><attributes><package>OpenGL</package></attributes></shared-variable><shared-variable><name>Context</name><environment>OpenGL</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>nil</initializer><attributes><package>OpenGL</package></attributes></shared-variable><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>types</category><body package="OpenGL">GLbitfield	&lt;C: typedef unsigned int GLbitfield&gt;</body><body package="OpenGL">GLboolean	&lt;C: typedef unsigned char GLboolean&gt;</body><body package="OpenGL">GLbyte	&lt;C: typedef char GLbyte&gt;</body><body package="OpenGL">GLchar	&lt;C: typedef char GLchar&gt;</body><body package="OpenGL">GLclampd	&lt;C: typedef double GLclampd&gt;</body><body package="OpenGL">GLclampf	&lt;C: typedef float GLclampf&gt;</body><body package="OpenGL">GLdouble	&lt;C: typedef double GLdouble&gt;</body><body package="OpenGL">GLenum	&lt;C: typedef unsigned int GLenum&gt;</body><body package="OpenGL">GLfloat	&lt;C: typedef float GLfloat&gt;</body><body package="OpenGL">GLint	&lt;C: typedef int GLint&gt;</body><body package="OpenGL">GLintptr	&lt;C: typedef long GLintptr&gt;</body><body package="OpenGL">GLshort	&lt;C: typedef short GLshort&gt;</body><body package="OpenGL">GLsizei	&lt;C: typedef int GLsizei&gt;</body><body package="OpenGL">GLsizeiptr	&lt;C: typedef long GLsizeiptr&gt;</body><body package="OpenGL">GLubyte	&lt;C: typedef unsigned char GLubyte&gt;</body><body package="OpenGL">GLuint	&lt;C: typedef unsigned int GLuint&gt;</body><body package="OpenGL">GLushort	&lt;C: typedef unsigned short GLushort&gt;</body><body package="OpenGL">GLvoid	&lt;C: typedef void GLvoid&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api query objects</category><body package="OpenGL">QueryDataType: aType	^DataTypes at: aType ifAbsent: [CLimitedPrecisionRealType float]</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api state requests</category><body package="OpenGL">CheckError	| error |	error := self GetError.	error isZero ifTrue: [^self].	self error: 'OpenGL Error: ', error printString, ' ',		(Dictionary new			at: self INVALID_ENUM put: 'INVALID_ENUM';			at: self INVALID_OPERATION put: 'INVALID_OPERATION';			at: self INVALID_VALUE put: 'INVALID_VALUE';			at: self NO_ERROR put: 'NO_ERROR';			at: self OUT_OF_MEMORY put: 'OUT_OF_MEMORY';			at: self STACK_OVERFLOW put: 'STACK_OVERFLOW';			at: self STACK_UNDERFLOW put: 'STACK_UNDERFLOW';			at: self TABLE_TOO_LARGE put: 'TABLE_TOO_LARGE';			at: self INVALID_FRAMEBUFFER_OPERATION_EXT put: 'INVALID_FRAMEBUFFER_OPERATION_EXT';			at: error ifAbsent: ['UNKNOWN_ERROR'])</body><body package="OpenGL">GetBooleanv: pname	| pointer value |	pointer := self GLboolean malloc.	self GetBooleanv: pname with: pointer.	value := pointer contents.	pointer free.	self CheckError.	^value = self TRUE</body><body package="OpenGL">GetDoublev: pname	| pointer value |	pointer := self GLdouble malloc.	self GetDoublev: pname with: pointer.	value := pointer contents.	pointer free.	self CheckError.	^value</body><body package="OpenGL">GetFloatv: pname	| pointer value |	pointer := self GLfloat malloc.	self GetFloatv: pname with: pointer.	value := pointer contents.	pointer free.	self CheckError.	^value</body><body package="OpenGL">GetIntegerv: pname	| pointer value |	pointer := self GLint malloc.	self GetIntegerv: pname with: pointer.	value := pointer contents.	pointer free.	self CheckError.	^value</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension NV_texture_shader</category><body package="OpenGL">CONST_EYE_NV	&lt;C: #define GL_CONST_EYE_NV 34533	&gt;</body><body package="OpenGL">CULL_FRAGMENT_NV	&lt;C: #define GL_CULL_FRAGMENT_NV 34535	&gt;</body><body package="OpenGL">CULL_MODES_NV	&lt;C: #define GL_CULL_MODES_NV 34528	&gt;</body><body package="OpenGL">DEPENDENT_AR_TEXTURE_2D_NV	&lt;C: #define GL_DEPENDENT_AR_TEXTURE_2D_NV 34537	&gt;</body><body package="OpenGL">DEPENDENT_GB_TEXTURE_2D_NV	&lt;C: #define GL_DEPENDENT_GB_TEXTURE_2D_NV 34538	&gt;</body><body package="OpenGL">DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV	&lt;C: #define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 34547	&gt;</body><body package="OpenGL">DOT_PRODUCT_DEPTH_REPLACE_NV	&lt;C: #define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 34541	&gt;</body><body package="OpenGL">DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV	&lt;C: #define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 34545	&gt;</body><body package="OpenGL">DOT_PRODUCT_NV	&lt;C: #define GL_DOT_PRODUCT_NV 34540	&gt;</body><body package="OpenGL">DOT_PRODUCT_REFLECT_CUBE_MAP_NV	&lt;C: #define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 34546	&gt;</body><body package="OpenGL">DOT_PRODUCT_TEXTURE_2D_NV	&lt;C: #define GL_DOT_PRODUCT_TEXTURE_2D_NV 34542	&gt;</body><body package="OpenGL">DOT_PRODUCT_TEXTURE_CUBE_MAP_NV	&lt;C: #define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 34544	&gt;</body><body package="OpenGL">DOT_PRODUCT_TEXTURE_RECTANGLE_NV	&lt;C: #define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 34382	&gt;</body><body package="OpenGL">DSDT8_MAG8_INTENSITY8_NV	&lt;C: #define GL_DSDT8_MAG8_INTENSITY8_NV 34571	&gt;</body><body package="OpenGL">DSDT8_MAG8_NV	&lt;C: #define GL_DSDT8_MAG8_NV 34570	&gt;</body><body package="OpenGL">DSDT8_NV	&lt;C: #define GL_DSDT8_NV 34569	&gt;</body><body package="OpenGL">DSDT_MAG_INTENSITY_NV	&lt;C: #define GL_DSDT_MAG_INTENSITY_NV 34524	&gt;</body><body package="OpenGL">DSDT_MAG_NV	&lt;C: #define GL_DSDT_MAG_NV 34550	&gt;</body><body package="OpenGL">DSDT_MAG_VIB_NV	&lt;C: #define GL_DSDT_MAG_VIB_NV 34551	&gt;</body><body package="OpenGL">DSDT_NV	&lt;C: #define GL_DSDT_NV 34549	&gt;</body><body package="OpenGL">DS_BIAS_NV	&lt;C: #define GL_DS_BIAS_NV 34582	&gt;</body><body package="OpenGL">DS_SCALE_NV	&lt;C: #define GL_DS_SCALE_NV 34576	&gt;</body><body package="OpenGL">DT_BIAS_NV	&lt;C: #define GL_DT_BIAS_NV 34583	&gt;</body><body package="OpenGL">DT_SCALE_NV	&lt;C: #define GL_DT_SCALE_NV 34577	&gt;</body><body package="OpenGL">HILO16_NV	&lt;C: #define GL_HILO16_NV 34552	&gt;</body><body package="OpenGL">HILO_NV	&lt;C: #define GL_HILO_NV 34548	&gt;</body><body package="OpenGL">HI_BIAS_NV	&lt;C: #define GL_HI_BIAS_NV 34580	&gt;</body><body package="OpenGL">HI_SCALE_NV	&lt;C: #define GL_HI_SCALE_NV 34574	&gt;</body><body package="OpenGL">LO_BIAS_NV	&lt;C: #define GL_LO_BIAS_NV 34581	&gt;</body><body package="OpenGL">LO_SCALE_NV	&lt;C: #define GL_LO_SCALE_NV 34575	&gt;</body><body package="OpenGL">MAGNITUDE_BIAS_NV	&lt;C: #define GL_MAGNITUDE_BIAS_NV 34584	&gt;</body><body package="OpenGL">MAGNITUDE_SCALE_NV	&lt;C: #define GL_MAGNITUDE_SCALE_NV 34578	&gt;</body><body package="OpenGL">OFFSET_TEXTURE_2D_BIAS_NV	&lt;C: #define GL_OFFSET_TEXTURE_2D_BIAS_NV GL_OFFSET_TEXTURE_BIAS_NV	&gt;</body><body package="OpenGL">OFFSET_TEXTURE_2D_MATRIX_NV	&lt;C: #define GL_OFFSET_TEXTURE_2D_MATRIX_NV GL_OFFSET_TEXTURE_MATRIX_NV	&gt;</body><body package="OpenGL">OFFSET_TEXTURE_2D_NV	&lt;C: #define GL_OFFSET_TEXTURE_2D_NV 34536	&gt;</body><body package="OpenGL">OFFSET_TEXTURE_2D_SCALE_NV	&lt;C: #define GL_OFFSET_TEXTURE_2D_SCALE_NV GL_OFFSET_TEXTURE_SCALE_NV	&gt;</body><body package="OpenGL">OFFSET_TEXTURE_BIAS_NV	&lt;C: #define GL_OFFSET_TEXTURE_BIAS_NV 34531	&gt;</body><body package="OpenGL">OFFSET_TEXTURE_MATRIX_NV	&lt;C: #define GL_OFFSET_TEXTURE_MATRIX_NV 34529	&gt;</body><body package="OpenGL">OFFSET_TEXTURE_RECTANGLE_NV	&lt;C: #define GL_OFFSET_TEXTURE_RECTANGLE_NV 34380	&gt;</body><body package="OpenGL">OFFSET_TEXTURE_RECTANGLE_SCALE_NV	&lt;C: #define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 34381	&gt;</body><body package="OpenGL">OFFSET_TEXTURE_SCALE_NV	&lt;C: #define GL_OFFSET_TEXTURE_SCALE_NV 34530	&gt;</body><body package="OpenGL">PASS_THROUGH_NV	&lt;C: #define GL_PASS_THROUGH_NV 34534	&gt;</body><body package="OpenGL">PREVIOUS_TEXTURE_INPUT_NV	&lt;C: #define GL_PREVIOUS_TEXTURE_INPUT_NV 34532	&gt;</body><body package="OpenGL">RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV	&lt;C: #define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 34521	&gt;</body><body package="OpenGL">SHADER_CONSISTENT_NV	&lt;C: #define GL_SHADER_CONSISTENT_NV 34525	&gt;</body><body package="OpenGL">SHADER_OPERATION_NV	&lt;C: #define GL_SHADER_OPERATION_NV 34527	&gt;</body><body package="OpenGL">SIGNED_ALPHA8_NV	&lt;C: #define GL_SIGNED_ALPHA8_NV 34566	&gt;</body><body package="OpenGL">SIGNED_ALPHA_NV	&lt;C: #define GL_SIGNED_ALPHA_NV 34565	&gt;</body><body package="OpenGL">SIGNED_HILO16_NV	&lt;C: #define GL_SIGNED_HILO16_NV 34554	&gt;</body><body package="OpenGL">SIGNED_HILO8_NV	&lt;C: #define GL_SIGNED_HILO8_NV 34911	&gt;</body><body package="OpenGL">SIGNED_RGB8_NV	&lt;C: #define GL_SIGNED_RGB8_NV 34559	&gt;</body><body package="OpenGL">SIGNED_RGB8_UNSIGNED_ALPHA8_NV	&lt;C: #define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 34573	&gt;</body><body package="OpenGL">SIGNED_RGBA8_NV	&lt;C: #define GL_SIGNED_RGBA8_NV 34556	&gt;</body><body package="OpenGL">SIGNED_RGBA_NV	&lt;C: #define GL_SIGNED_RGBA_NV 34555	&gt;</body><body package="OpenGL">SIGNED_RGB_NV	&lt;C: #define GL_SIGNED_RGB_NV 34558	&gt;</body><body package="OpenGL">SIGNED_RGB_UNSIGNED_ALPHA_NV	&lt;C: #define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 34572	&gt;</body><body package="OpenGL">TEXTURE_DS_SIZE_NV	&lt;C: #define GL_TEXTURE_DS_SIZE_NV 34589	&gt;</body><body package="OpenGL">TEXTURE_DT_SIZE_NV	&lt;C: #define GL_TEXTURE_DT_SIZE_NV 34590	&gt;</body><body package="OpenGL">TEXTURE_HI_SIZE_NV	&lt;C: #define GL_TEXTURE_HI_SIZE_NV 34587	&gt;</body><body package="OpenGL">TEXTURE_LO_SIZE_NV	&lt;C: #define GL_TEXTURE_LO_SIZE_NV 34588	&gt;</body><body package="OpenGL">TEXTURE_MAG_SIZE_NV	&lt;C: #define GL_TEXTURE_MAG_SIZE_NV 34591	&gt;</body><body package="OpenGL">TEXTURE_SHADER_NV	&lt;C: #define GL_TEXTURE_SHADER_NV 34526	&gt;</body><body package="OpenGL">UNSIGNED_INT_8_8_S8_S8_REV_NV	&lt;C: #define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 34523	&gt;</body><body package="OpenGL">UNSIGNED_INT_S8_S8_8_8_NV	&lt;C: #define GL_UNSIGNED_INT_S8_S8_8_8_NV 34522	&gt;</body><body package="OpenGL">VIBRANCE_BIAS_NV	&lt;C: #define GL_VIBRANCE_BIAS_NV 34585	&gt;</body><body package="OpenGL">VIBRANCE_SCALE_NV	&lt;C: #define GL_VIBRANCE_SCALE_NV 34579	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_geometry_shader4</category><body package="OpenGL">FRAMEBUFFER_ATTACHMENT_LAYERED_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 36263	&gt;</body><body package="OpenGL">FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 36052	&gt;</body><body package="OpenGL">FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 36265	&gt;</body><body package="OpenGL">FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 36264	&gt;</body><body package="OpenGL">GEOMETRY_INPUT_TYPE_EXT	&lt;C: #define GL_GEOMETRY_INPUT_TYPE_EXT 36315	&gt;</body><body package="OpenGL">GEOMETRY_OUTPUT_TYPE_EXT	&lt;C: #define GL_GEOMETRY_OUTPUT_TYPE_EXT 36316	&gt;</body><body package="OpenGL">GEOMETRY_SHADER_EXT	&lt;C: #define GL_GEOMETRY_SHADER_EXT 36313	&gt;</body><body package="OpenGL">GEOMETRY_VERTICES_OUT_EXT	&lt;C: #define GL_GEOMETRY_VERTICES_OUT_EXT 36314	&gt;</body><body package="OpenGL">LINES_ADJACENCY_EXT	&lt;C: #define GL_LINES_ADJACENCY_EXT 10	&gt;</body><body package="OpenGL">LINE_STRIP_ADJACENCY_EXT	&lt;C: #define GL_LINE_STRIP_ADJACENCY_EXT 11	&gt;</body><body package="OpenGL">MAX_GEOMETRY_OUTPUT_VERTICES_EXT	&lt;C: #define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 36320	&gt;</body><body package="OpenGL">MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT	&lt;C: #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 35881	&gt;</body><body package="OpenGL">MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT	&lt;C: #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 36321	&gt;</body><body package="OpenGL">MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT	&lt;C: #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 36319	&gt;</body><body package="OpenGL">MAX_GEOMETRY_VARYING_COMPONENTS_EXT	&lt;C: #define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 36317	&gt;</body><body package="OpenGL">MAX_VARYING_COMPONENTS_EXT	&lt;C: #define GL_MAX_VARYING_COMPONENTS_EXT 35659	&gt;</body><body package="OpenGL">MAX_VERTEX_VARYING_COMPONENTS_EXT	&lt;C: #define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 36318	&gt;</body><body package="OpenGL">PROGRAM_POINT_SIZE_EXT	&lt;C: #define GL_PROGRAM_POINT_SIZE_EXT 34370	&gt;</body><body package="OpenGL">TRIANGLES_ADJACENCY_EXT	&lt;C: #define GL_TRIANGLES_ADJACENCY_EXT 12	&gt;</body><body package="OpenGL">TRIANGLE_STRIP_ADJACENCY_EXT	&lt;C: #define GL_TRIANGLE_STRIP_ADJACENCY_EXT 13	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension ATI_texture_env_combine3</category><body package="OpenGL">MODULATE_ADD_ATI	&lt;C: #define GL_MODULATE_ADD_ATI 34628	&gt;</body><body package="OpenGL">MODULATE_SIGNED_ADD_ATI	&lt;C: #define GL_MODULATE_SIGNED_ADD_ATI 34629	&gt;</body><body package="OpenGL">MODULATE_SUBTRACT_ATI	&lt;C: #define GL_MODULATE_SUBTRACT_ATI 34630	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_flush_buffer_range</category><body package="OpenGL">BUFFER_FLUSHING_UNMAP_APPLE	&lt;C: #define GL_BUFFER_FLUSHING_UNMAP_APPLE 35347	&gt;</body><body package="OpenGL">BUFFER_SERIALIZED_MODIFY_APPLE	&lt;C: #define GL_BUFFER_SERIALIZED_MODIFY_APPLE 35346	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_texture_mirror_clamp</category><body package="OpenGL">MIRROR_CLAMP_EXT	&lt;C: #define GL_MIRROR_CLAMP_EXT 34626	&gt;</body><body package="OpenGL">MIRROR_CLAMP_TO_BORDER_EXT	&lt;C: #define GL_MIRROR_CLAMP_TO_BORDER_EXT 35090	&gt;</body><body package="OpenGL">MIRROR_CLAMP_TO_EDGE_EXT	&lt;C: #define GL_MIRROR_CLAMP_TO_EDGE_EXT 34627	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension ATI_texture_mirror_once</category><body package="OpenGL">MIRROR_CLAMP_ATI	&lt;C: #define GL_MIRROR_CLAMP_ATI 34626	&gt;</body><body package="OpenGL">MIRROR_CLAMP_TO_EDGE_ATI	&lt;C: #define GL_MIRROR_CLAMP_TO_EDGE_ATI 34627	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_fence</category><body package="OpenGL">BUFFER_OBJECT_APPLE	&lt;C: #define GL_BUFFER_OBJECT_APPLE 34227	&gt;</body><body package="OpenGL">DRAW_PIXELS_APPLE	&lt;C: #define GL_DRAW_PIXELS_APPLE 35338	&gt;</body><body package="OpenGL">FENCE_APPLE	&lt;C: #define GL_FENCE_APPLE 35339	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension ARB_texture_rectangle</category><body package="OpenGL">MAX_RECTANGLE_TEXTURE_SIZE_ARB	&lt;C: #define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 34040	&gt;</body><body package="OpenGL">PROXY_TEXTURE_RECTANGLE_ARB	&lt;C: #define GL_PROXY_TEXTURE_RECTANGLE_ARB 34039	&gt;</body><body package="OpenGL">TEXTURE_BINDING_RECTANGLE_ARB	&lt;C: #define GL_TEXTURE_BINDING_RECTANGLE_ARB 34038	&gt;</body><body package="OpenGL">TEXTURE_RECTANGLE_ARB	&lt;C: #define GL_TEXTURE_RECTANGLE_ARB 34037	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_texture_compression_s3tc</category><body package="OpenGL">COMPRESSED_RGBA_S3TC_DXT1_EXT	&lt;C: #define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 33777	&gt;</body><body package="OpenGL">COMPRESSED_RGBA_S3TC_DXT3_EXT	&lt;C: #define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 33778	&gt;</body><body package="OpenGL">COMPRESSED_RGBA_S3TC_DXT5_EXT	&lt;C: #define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 33779	&gt;</body><body package="OpenGL">COMPRESSED_RGB_S3TC_DXT1_EXT	&lt;C: #define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 33776	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension NV_texture_shader3</category><body package="OpenGL">DEPENDENT_HILO_TEXTURE_2D_NV	&lt;C: #define GL_DEPENDENT_HILO_TEXTURE_2D_NV 34904	&gt;</body><body package="OpenGL">DEPENDENT_RGB_TEXTURE_3D_NV	&lt;C: #define GL_DEPENDENT_RGB_TEXTURE_3D_NV 34905	&gt;</body><body package="OpenGL">DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV	&lt;C: #define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 34906	&gt;</body><body package="OpenGL">DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV	&lt;C: #define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 34909	&gt;</body><body package="OpenGL">DOT_PRODUCT_PASS_THROUGH_NV	&lt;C: #define GL_DOT_PRODUCT_PASS_THROUGH_NV 34907	&gt;</body><body package="OpenGL">DOT_PRODUCT_TEXTURE_1D_NV	&lt;C: #define GL_DOT_PRODUCT_TEXTURE_1D_NV 34908	&gt;</body><body package="OpenGL">FORCE_BLUE_TO_ONE_NV	&lt;C: #define GL_FORCE_BLUE_TO_ONE_NV 34912	&gt;</body><body package="OpenGL">HILO8_NV	&lt;C: #define GL_HILO8_NV 34910	&gt;</body><body package="OpenGL">OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV	&lt;C: #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 34902	&gt;</body><body package="OpenGL">OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV	&lt;C: #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 34903	&gt;</body><body package="OpenGL">OFFSET_HILO_TEXTURE_2D_NV	&lt;C: #define GL_OFFSET_HILO_TEXTURE_2D_NV 34900	&gt;</body><body package="OpenGL">OFFSET_HILO_TEXTURE_RECTANGLE_NV	&lt;C: #define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 34901	&gt;</body><body package="OpenGL">OFFSET_PROJECTIVE_TEXTURE_2D_NV	&lt;C: #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 34896	&gt;</body><body package="OpenGL">OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV	&lt;C: #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 34897	&gt;</body><body package="OpenGL">OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV	&lt;C: #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 34898	&gt;</body><body package="OpenGL">OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV	&lt;C: #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 34899	&gt;</body><body package="OpenGL">SIGNED_HILO_NV	&lt;C: #define GL_SIGNED_HILO_NV 34553	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_compiled_vertex_array</category><body package="OpenGL">ARRAY_ELEMENT_LOCK_COUNT_EXT	&lt;C: #define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 33193	&gt;</body><body package="OpenGL">ARRAY_ELEMENT_LOCK_FIRST_EXT	&lt;C: #define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 33192	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_object_purgeable</category><body package="OpenGL">PURGEABLE_APPLE	&lt;C: #define GL_PURGEABLE_APPLE 35357	&gt;</body><body package="OpenGL">RELEASED_APPLE	&lt;C: #define GL_RELEASED_APPLE 35353	&gt;</body><body package="OpenGL">RETAINED_APPLE	&lt;C: #define GL_RETAINED_APPLE 35355	&gt;</body><body package="OpenGL">UNDEFINED_APPLE	&lt;C: #define GL_UNDEFINED_APPLE 35356	&gt;</body><body package="OpenGL">VOLATILE_APPLE	&lt;C: #define GL_VOLATILE_APPLE 35354	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension ATI_pn_triangles</category><body package="OpenGL">MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI	&lt;C: #define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 24721	&gt;</body><body package="OpenGL">PN_TRIANGLES_ATI	&lt;C: #define GL_PN_TRIANGLES_ATI 24720	&gt;</body><body package="OpenGL">PN_TRIANGLES_NORMAL_MODE_ATI	&lt;C: #define GL_PN_TRIANGLES_NORMAL_MODE_ATI 24723	&gt;</body><body package="OpenGL">PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI	&lt;C: #define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 24727	&gt;</body><body package="OpenGL">PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI	&lt;C: #define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 24728	&gt;</body><body package="OpenGL">PN_TRIANGLES_POINT_MODE_ATI	&lt;C: #define GL_PN_TRIANGLES_POINT_MODE_ATI 24722	&gt;</body><body package="OpenGL">PN_TRIANGLES_POINT_MODE_CUBIC_ATI	&lt;C: #define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 24726	&gt;</body><body package="OpenGL">PN_TRIANGLES_POINT_MODE_LINEAR_ATI	&lt;C: #define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 24725	&gt;</body><body package="OpenGL">PN_TRIANGLES_TESSELATION_LEVEL_ATI	&lt;C: #define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 24724	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_vertex_program_evaluators</category><body package="OpenGL">VERTEX_ATTRIB_MAP1_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP1_APPLE 35328	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_MAP1_COEFF_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 35331	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_MAP1_DOMAIN_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 35333	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_MAP1_ORDER_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 35332	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_MAP1_SIZE_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 35330	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_MAP2_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP2_APPLE 35329	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_MAP2_COEFF_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 35335	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_MAP2_DOMAIN_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 35337	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_MAP2_ORDER_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 35336	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_MAP2_SIZE_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 35334	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_bindable_uniform</category><body package="OpenGL">MAX_BINDABLE_UNIFORM_SIZE_EXT	&lt;C: #define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 36333	&gt;</body><body package="OpenGL">MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT	&lt;C: #define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 36323	&gt;</body><body package="OpenGL">MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT	&lt;C: #define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 36324	&gt;</body><body package="OpenGL">MAX_VERTEX_BINDABLE_UNIFORMS_EXT	&lt;C: #define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 36322	&gt;</body><body package="OpenGL">UNIFORM_BUFFER_BINDING_EXT	&lt;C: #define GL_UNIFORM_BUFFER_BINDING_EXT 36335	&gt;</body><body package="OpenGL">UNIFORM_BUFFER_EXT	&lt;C: #define GL_UNIFORM_BUFFER_EXT 36334	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_texture_range</category><body package="OpenGL">TEXTURE_MINIMIZE_STORAGE_APPLE	&lt;C: #define GL_TEXTURE_MINIMIZE_STORAGE_APPLE 34230	&gt;</body><body package="OpenGL">TEXTURE_RANGE_LENGTH_APPLE	&lt;C: #define GL_TEXTURE_RANGE_LENGTH_APPLE 34231	&gt;</body><body package="OpenGL">TEXTURE_RANGE_POINTER_APPLE	&lt;C: #define GL_TEXTURE_RANGE_POINTER_APPLE 34232	&gt;</body><body package="OpenGL">TEXTURE_STORAGE_HINT_APPLE	&lt;C: #define GL_TEXTURE_STORAGE_HINT_APPLE 34236	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension NV_depth_clamp</category><body package="OpenGL">DEPTH_CLAMP_NV	&lt;C: #define GL_DEPTH_CLAMP_NV 34383	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_vertex_array_range</category><body package="OpenGL">MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE	&lt;C: #define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE 34080	&gt;</body><body package="OpenGL">STORAGE_CACHED_APPLE	&lt;C: #define GL_STORAGE_CACHED_APPLE 34238	&gt;</body><body package="OpenGL">STORAGE_CLIENT_APPLE	&lt;C: #define GL_STORAGE_CLIENT_APPLE 34228	&gt;</body><body package="OpenGL">STORAGE_PRIVATE_APPLE	&lt;C: #define GL_STORAGE_PRIVATE_APPLE 34237	&gt;</body><body package="OpenGL">STORAGE_SHARED_APPLE	&lt;C: #define GL_STORAGE_SHARED_APPLE 34239	&gt;</body><body package="OpenGL">VERTEX_ARRAY_RANGE_APPLE	&lt;C: #define GL_VERTEX_ARRAY_RANGE_APPLE 34077	&gt;</body><body package="OpenGL">VERTEX_ARRAY_RANGE_LENGTH_APPLE	&lt;C: #define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 34078	&gt;</body><body package="OpenGL">VERTEX_ARRAY_RANGE_POINTER_APPLE	&lt;C: #define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 34081	&gt;</body><body package="OpenGL">VERTEX_ARRAY_STORAGE_HINT_APPLE	&lt;C: #define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 34079	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension ATI_text_fragment_shader</category><body package="OpenGL">TEXT_FRAGMENT_SHADER_ATI	&lt;C: #define GL_TEXT_FRAGMENT_SHADER_ATI 33280	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_aux_depth_stencil</category><body package="OpenGL">AUX_DEPTH_STENCIL_APPLE	&lt;C: #define GL_AUX_DEPTH_STENCIL_APPLE 35348	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_depth_bounds_test</category><body package="OpenGL">DEPTH_BOUNDS_EXT	&lt;C: #define GL_DEPTH_BOUNDS_EXT 34961	&gt;</body><body package="OpenGL">DEPTH_BOUNDS_TEST_EXT	&lt;C: #define GL_DEPTH_BOUNDS_TEST_EXT 34960	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension ARB_shadow_ambient</category><body package="OpenGL">TEXTURE_COMPARE_FAIL_VALUE_ARB	&lt;C: #define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 32959	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension NV_multisample_filter_hint</category><body package="OpenGL">MULTISAMPLE_FILTER_HINT_NV	&lt;C: #define GL_MULTISAMPLE_FILTER_HINT_NV 34100	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension NV_texture_shader2</category><body package="OpenGL">DOT_PRODUCT_TEXTURE_3D_NV	&lt;C: #define GL_DOT_PRODUCT_TEXTURE_3D_NV 34543	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_abgr</category><body package="OpenGL">ABGR_EXT	&lt;C: #define GL_ABGR_EXT 32768	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_pixel_buffer</category><body package="OpenGL">MIN_PBUFFER_VIEWPORT_DIMS_APPLE	&lt;C: #define GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE 35344	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_row_bytes</category><body package="OpenGL">PACK_IMAGE_BYTES_APPLE	&lt;C: #define GL_PACK_IMAGE_BYTES_APPLE 35351	&gt;</body><body package="OpenGL">PACK_ROW_BYTES_APPLE	&lt;C: #define GL_PACK_ROW_BYTES_APPLE 35349	&gt;</body><body package="OpenGL">UNPACK_IMAGE_BYTES_APPLE	&lt;C: #define GL_UNPACK_IMAGE_BYTES_APPLE 35352	&gt;</body><body package="OpenGL">UNPACK_ROW_BYTES_APPLE	&lt;C: #define GL_UNPACK_ROW_BYTES_APPLE 35350	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_client_storage</category><body package="OpenGL">UNPACK_CLIENT_STORAGE_APPLE	&lt;C: #define GL_UNPACK_CLIENT_STORAGE_APPLE 34226	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension ATI_array_rev_comps_in_4_bytes</category><body package="OpenGL">ARRAY_REV_COMPS_IN_4_BYTES_ATI	&lt;C: #define GL_ARRAY_REV_COMPS_IN_4_BYTES_ATI 35196	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension ATI_point_cull_mode</category><body package="OpenGL">POINT_CULL_CENTER_ATI	&lt;C: #define GL_POINT_CULL_CENTER_ATI 24756	&gt;</body><body package="OpenGL">POINT_CULL_CLIP_ATI	&lt;C: #define GL_POINT_CULL_CLIP_ATI 24757	&gt;</body><body package="OpenGL">POINT_CULL_MODE_ATI	&lt;C: #define GL_POINT_CULL_MODE_ATI 24755	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_ycbcr_422</category><body package="OpenGL">UNSIGNED_SHORT_8_8_APPLE	&lt;C: #define GL_UNSIGNED_SHORT_8_8_APPLE 34234	&gt;</body><body package="OpenGL">UNSIGNED_SHORT_8_8_REV_APPLE	&lt;C: #define GL_UNSIGNED_SHORT_8_8_REV_APPLE 34235	&gt;</body><body package="OpenGL">YCBCR_422_APPLE	&lt;C: #define GL_YCBCR_422_APPLE 34233	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_texture_filter_anisotropic</category><body package="OpenGL">MAX_TEXTURE_MAX_ANISOTROPY_EXT	&lt;C: #define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 34047	&gt;</body><body package="OpenGL">TEXTURE_MAX_ANISOTROPY_EXT	&lt;C: #define GL_TEXTURE_MAX_ANISOTROPY_EXT 34046	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_clip_volume_hint</category><body package="OpenGL">CLIP_VOLUME_CLIPPING_HINT_EXT	&lt;C: #define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 33008	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define drawing control</category><body package="OpenGL">ALIASED_LINE_WIDTH_RANGE	&lt;C: #define GL_ALIASED_LINE_WIDTH_RANGE 33902	&gt;</body><body package="OpenGL">ALIASED_POINT_SIZE_RANGE	&lt;C: #define GL_ALIASED_POINT_SIZE_RANGE 33901	&gt;</body><body package="OpenGL">BACK	&lt;C: #define GL_BACK 1029	&gt;</body><body package="OpenGL">CCW	&lt;C: #define GL_CCW 2305	&gt;</body><body package="OpenGL">CLIP_DISTANCE0	&lt;C: #define GL_CLIP_DISTANCE0 12288	&gt;</body><body package="OpenGL">CLIP_DISTANCE1	&lt;C: #define GL_CLIP_DISTANCE1 12289	&gt;</body><body package="OpenGL">CLIP_DISTANCE2	&lt;C: #define GL_CLIP_DISTANCE2 12290	&gt;</body><body package="OpenGL">CLIP_DISTANCE3	&lt;C: #define GL_CLIP_DISTANCE3 12291	&gt;</body><body package="OpenGL">CLIP_DISTANCE4	&lt;C: #define GL_CLIP_DISTANCE4 12292	&gt;</body><body package="OpenGL">CLIP_DISTANCE5	&lt;C: #define GL_CLIP_DISTANCE5 12293	&gt;</body><body package="OpenGL">CULL_FACE	&lt;C: #define GL_CULL_FACE 2884	&gt;</body><body package="OpenGL">CULL_FACE_MODE	&lt;C: #define GL_CULL_FACE_MODE 2885	&gt;</body><body package="OpenGL">CW	&lt;C: #define GL_CW 2304	&gt;</body><body package="OpenGL">DONT_CARE	&lt;C: #define GL_DONT_CARE 4352	&gt;</body><body package="OpenGL">FASTEST	&lt;C: #define GL_FASTEST 4353	&gt;</body><body package="OpenGL">FILL	&lt;C: #define GL_FILL 6914	&gt;</body><body package="OpenGL">FLAT	&lt;C: #define GL_FLAT 7424	&gt;</body><body package="OpenGL">FRAGMENT_SHADER_DERIVATIVE_HINT	&lt;C: #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 35723	&gt;</body><body package="OpenGL">FRONT	&lt;C: #define GL_FRONT 1028	&gt;</body><body package="OpenGL">FRONT_AND_BACK	&lt;C: #define GL_FRONT_AND_BACK 1032	&gt;</body><body package="OpenGL">FRONT_FACE	&lt;C: #define GL_FRONT_FACE 2886	&gt;</body><body package="OpenGL">LINE	&lt;C: #define GL_LINE 6913	&gt;</body><body package="OpenGL">LINE_SMOOTH	&lt;C: #define GL_LINE_SMOOTH 2848	&gt;</body><body package="OpenGL">LINE_SMOOTH_HINT	&lt;C: #define GL_LINE_SMOOTH_HINT 3154	&gt;</body><body package="OpenGL">LINE_WIDTH	&lt;C: #define GL_LINE_WIDTH 2849	&gt;</body><body package="OpenGL">LOWER_LEFT	&lt;C: #define GL_LOWER_LEFT 36001	&gt;</body><body package="OpenGL">MAX_CLIP_DISTANCES	&lt;C: #define GL_MAX_CLIP_DISTANCES 3378	&gt;</body><body package="OpenGL">MAX_VIEWPORT_DIMS	&lt;C: #define GL_MAX_VIEWPORT_DIMS 3386	&gt;</body><body package="OpenGL">MULTISAMPLE	&lt;C: #define GL_MULTISAMPLE 32925	&gt;</body><body package="OpenGL">NICEST	&lt;C: #define GL_NICEST 4354	&gt;</body><body package="OpenGL">POINT	&lt;C: #define GL_POINT 6912	&gt;</body><body package="OpenGL">POINT_DISTANCE_ATTENUATION	&lt;C: #define GL_POINT_DISTANCE_ATTENUATION 33065	&gt;</body><body package="OpenGL">POINT_FADE_THRESHOLD_SIZE	&lt;C: #define GL_POINT_FADE_THRESHOLD_SIZE 33064	&gt;</body><body package="OpenGL">POINT_SIZE	&lt;C: #define GL_POINT_SIZE 2833	&gt;</body><body package="OpenGL">POINT_SIZE_GRANULARITY	&lt;C: #define GL_POINT_SIZE_GRANULARITY 2835	&gt;</body><body package="OpenGL">POINT_SIZE_MAX	&lt;C: #define GL_POINT_SIZE_MAX 33063	&gt;</body><body package="OpenGL">POINT_SIZE_MIN	&lt;C: #define GL_POINT_SIZE_MIN 33062	&gt;</body><body package="OpenGL">POINT_SIZE_RANGE	&lt;C: #define GL_POINT_SIZE_RANGE 2834	&gt;</body><body package="OpenGL">POLYGON_MODE	&lt;C: #define GL_POLYGON_MODE 2880	&gt;</body><body package="OpenGL">POLYGON_OFFSET_FACTOR	&lt;C: #define GL_POLYGON_OFFSET_FACTOR 32824	&gt;</body><body package="OpenGL">POLYGON_OFFSET_FILL	&lt;C: #define GL_POLYGON_OFFSET_FILL 32823	&gt;</body><body package="OpenGL">POLYGON_OFFSET_LINE	&lt;C: #define GL_POLYGON_OFFSET_LINE 10754	&gt;</body><body package="OpenGL">POLYGON_OFFSET_POINT	&lt;C: #define GL_POLYGON_OFFSET_POINT 10753	&gt;</body><body package="OpenGL">POLYGON_OFFSET_UNITS	&lt;C: #define GL_POLYGON_OFFSET_UNITS 10752	&gt;</body><body package="OpenGL">POLYGON_SMOOTH	&lt;C: #define GL_POLYGON_SMOOTH 2881	&gt;</body><body package="OpenGL">POLYGON_SMOOTH_HINT	&lt;C: #define GL_POLYGON_SMOOTH_HINT 3155	&gt;</body><body package="OpenGL">SAMPLES	&lt;C: #define GL_SAMPLES 32937	&gt;</body><body package="OpenGL">SAMPLE_ALPHA_TO_COVERAGE	&lt;C: #define GL_SAMPLE_ALPHA_TO_COVERAGE 32926	&gt;</body><body package="OpenGL">SAMPLE_ALPHA_TO_ONE	&lt;C: #define GL_SAMPLE_ALPHA_TO_ONE 32927	&gt;</body><body package="OpenGL">SAMPLE_BUFFERS	&lt;C: #define GL_SAMPLE_BUFFERS 32936	&gt;</body><body package="OpenGL">SAMPLE_COVERAGE	&lt;C: #define GL_SAMPLE_COVERAGE 32928	&gt;</body><body package="OpenGL">SAMPLE_COVERAGE_INVERT	&lt;C: #define GL_SAMPLE_COVERAGE_INVERT 32939	&gt;</body><body package="OpenGL">SAMPLE_COVERAGE_VALUE	&lt;C: #define GL_SAMPLE_COVERAGE_VALUE 32938	&gt;</body><body package="OpenGL">SCISSOR_BOX	&lt;C: #define GL_SCISSOR_BOX 3088	&gt;</body><body package="OpenGL">SCISSOR_TEST	&lt;C: #define GL_SCISSOR_TEST 3089	&gt;</body><body package="OpenGL">SHADE_MODEL	&lt;C: #define GL_SHADE_MODEL 2900	&gt;</body><body package="OpenGL">SMOOTH	&lt;C: #define GL_SMOOTH 7425	&gt;</body><body package="OpenGL">SMOOTH_LINE_WIDTH_GRANULARITY	&lt;C: #define GL_SMOOTH_LINE_WIDTH_GRANULARITY 2851	&gt;</body><body package="OpenGL">SMOOTH_LINE_WIDTH_RANGE	&lt;C: #define GL_SMOOTH_LINE_WIDTH_RANGE 2850	&gt;</body><body package="OpenGL">SMOOTH_POINT_SIZE_GRANULARITY	&lt;C: #define GL_SMOOTH_POINT_SIZE_GRANULARITY 2835	&gt;</body><body package="OpenGL">SMOOTH_POINT_SIZE_RANGE	&lt;C: #define GL_SMOOTH_POINT_SIZE_RANGE 2834	&gt;</body><body package="OpenGL">TEXTURE_COMPRESSION_HINT	&lt;C: #define GL_TEXTURE_COMPRESSION_HINT 34031	&gt;</body><body package="OpenGL">UPPER_LEFT	&lt;C: #define GL_UPPER_LEFT 36002	&gt;</body><body package="OpenGL">VERTEX_PROGRAM_POINT_SIZE	&lt;C: #define GL_VERTEX_PROGRAM_POINT_SIZE 34370	&gt;</body><body package="OpenGL">VIEWPORT	&lt;C: #define GL_VIEWPORT 2978	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define framebuffer</category><body package="OpenGL">ALPHA_INTEGER_EXT	&lt;C: #define GL_ALPHA_INTEGER_EXT 36247	&gt;</body><body package="OpenGL">AUX0	&lt;C: #define GL_AUX0 1033	&gt;</body><body package="OpenGL">AUX1	&lt;C: #define GL_AUX1 1034	&gt;</body><body package="OpenGL">AUX2	&lt;C: #define GL_AUX2 1035	&gt;</body><body package="OpenGL">AUX3	&lt;C: #define GL_AUX3 1036	&gt;</body><body package="OpenGL">AUX_BUFFERS	&lt;C: #define GL_AUX_BUFFERS 3072	&gt;</body><body package="OpenGL">BACK_LEFT	&lt;C: #define GL_BACK_LEFT 1026	&gt;</body><body package="OpenGL">BACK_RIGHT	&lt;C: #define GL_BACK_RIGHT 1027	&gt;</body><body package="OpenGL">BGRA_INTEGER_EXT	&lt;C: #define GL_BGRA_INTEGER_EXT 36251	&gt;</body><body package="OpenGL">BGR_INTEGER_EXT	&lt;C: #define GL_BGR_INTEGER_EXT 36250	&gt;</body><body package="OpenGL">BLUE_INTEGER_EXT	&lt;C: #define GL_BLUE_INTEGER_EXT 36246	&gt;</body><body package="OpenGL">COLOR	&lt;C: #define GL_COLOR 6144	&gt;</body><body package="OpenGL">COLOR_BUFFER_BIT	&lt;C: #define GL_COLOR_BUFFER_BIT 0x00004000	&gt;</body><body package="OpenGL">COLOR_CLEAR_VALUE	&lt;C: #define GL_COLOR_CLEAR_VALUE 3106	&gt;</body><body package="OpenGL">DEPTH	&lt;C: #define GL_DEPTH 6145	&gt;</body><body package="OpenGL">DEPTH_BUFFER_BIT	&lt;C: #define GL_DEPTH_BUFFER_BIT 0x00000100	&gt;</body><body package="OpenGL">DEPTH_CLEAR_VALUE	&lt;C: #define GL_DEPTH_CLEAR_VALUE 2931	&gt;</body><body package="OpenGL">DRAW_BUFFER	&lt;C: #define GL_DRAW_BUFFER 3073	&gt;</body><body package="OpenGL">DRAW_BUFFER0	&lt;C: #define GL_DRAW_BUFFER0 34853	&gt;</body><body package="OpenGL">DRAW_BUFFER1	&lt;C: #define GL_DRAW_BUFFER1 34854	&gt;</body><body package="OpenGL">DRAW_BUFFER10	&lt;C: #define GL_DRAW_BUFFER10 34863	&gt;</body><body package="OpenGL">DRAW_BUFFER11	&lt;C: #define GL_DRAW_BUFFER11 34864	&gt;</body><body package="OpenGL">DRAW_BUFFER12	&lt;C: #define GL_DRAW_BUFFER12 34865	&gt;</body><body package="OpenGL">DRAW_BUFFER13	&lt;C: #define GL_DRAW_BUFFER13 34866	&gt;</body><body package="OpenGL">DRAW_BUFFER14	&lt;C: #define GL_DRAW_BUFFER14 34867	&gt;</body><body package="OpenGL">DRAW_BUFFER15	&lt;C: #define GL_DRAW_BUFFER15 34868	&gt;</body><body package="OpenGL">DRAW_BUFFER2	&lt;C: #define GL_DRAW_BUFFER2 34855	&gt;</body><body package="OpenGL">DRAW_BUFFER3	&lt;C: #define GL_DRAW_BUFFER3 34856	&gt;</body><body package="OpenGL">DRAW_BUFFER4	&lt;C: #define GL_DRAW_BUFFER4 34857	&gt;</body><body package="OpenGL">DRAW_BUFFER5	&lt;C: #define GL_DRAW_BUFFER5 34858	&gt;</body><body package="OpenGL">DRAW_BUFFER6	&lt;C: #define GL_DRAW_BUFFER6 34859	&gt;</body><body package="OpenGL">DRAW_BUFFER7	&lt;C: #define GL_DRAW_BUFFER7 34860	&gt;</body><body package="OpenGL">DRAW_BUFFER8	&lt;C: #define GL_DRAW_BUFFER8 34861	&gt;</body><body package="OpenGL">DRAW_BUFFER9	&lt;C: #define GL_DRAW_BUFFER9 34862	&gt;</body><body package="OpenGL">FRONT_LEFT	&lt;C: #define GL_FRONT_LEFT 1024	&gt;</body><body package="OpenGL">FRONT_RIGHT	&lt;C: #define GL_FRONT_RIGHT 1025	&gt;</body><body package="OpenGL">GREEN_INTEGER_EXT	&lt;C: #define GL_GREEN_INTEGER_EXT 36245	&gt;</body><body package="OpenGL">LEFT	&lt;C: #define GL_LEFT 1030	&gt;</body><body package="OpenGL">MAX_DRAW_BUFFERS	&lt;C: #define GL_MAX_DRAW_BUFFERS 34852	&gt;</body><body package="OpenGL">PACK_ALIGNMENT	&lt;C: #define GL_PACK_ALIGNMENT 3333	&gt;</body><body package="OpenGL">PACK_IMAGE_HEIGHT	&lt;C: #define GL_PACK_IMAGE_HEIGHT 32876	&gt;</body><body package="OpenGL">PACK_LSB_FIRST	&lt;C: #define GL_PACK_LSB_FIRST 3329	&gt;</body><body package="OpenGL">PACK_ROW_LENGTH	&lt;C: #define GL_PACK_ROW_LENGTH 3330	&gt;</body><body package="OpenGL">PACK_SKIP_IMAGES	&lt;C: #define GL_PACK_SKIP_IMAGES 32875	&gt;</body><body package="OpenGL">PACK_SKIP_PIXELS	&lt;C: #define GL_PACK_SKIP_PIXELS 3332	&gt;</body><body package="OpenGL">PACK_SKIP_ROWS	&lt;C: #define GL_PACK_SKIP_ROWS 3331	&gt;</body><body package="OpenGL">PACK_SWAP_BYTES	&lt;C: #define GL_PACK_SWAP_BYTES 3328	&gt;</body><body package="OpenGL">READ_BUFFER	&lt;C: #define GL_READ_BUFFER 3074	&gt;</body><body package="OpenGL">RED_INTEGER_EXT	&lt;C: #define GL_RED_INTEGER_EXT 36244	&gt;</body><body package="OpenGL">RGBA_INTEGER_EXT	&lt;C: #define GL_RGBA_INTEGER_EXT 36249	&gt;</body><body package="OpenGL">RGBA_INTEGER_MODE_EXT	&lt;C: #define GL_RGBA_INTEGER_MODE_EXT 36254	&gt;</body><body package="OpenGL">RGB_INTEGER_EXT	&lt;C: #define GL_RGB_INTEGER_EXT 36248	&gt;</body><body package="OpenGL">RIGHT	&lt;C: #define GL_RIGHT 1031	&gt;</body><body package="OpenGL">STENCIL	&lt;C: #define GL_STENCIL 6146	&gt;</body><body package="OpenGL">STENCIL_BUFFER_BIT	&lt;C: #define GL_STENCIL_BUFFER_BIT 0x00000400	&gt;</body><body package="OpenGL">STENCIL_CLEAR_VALUE	&lt;C: #define GL_STENCIL_CLEAR_VALUE 2961	&gt;</body><body package="OpenGL">STENCIL_INDEX	&lt;C: #define GL_STENCIL_INDEX 6401	&gt;</body><body package="OpenGL">UNPACK_ALIGNMENT	&lt;C: #define GL_UNPACK_ALIGNMENT 3317	&gt;</body><body package="OpenGL">UNPACK_IMAGE_HEIGHT	&lt;C: #define GL_UNPACK_IMAGE_HEIGHT 32878	&gt;</body><body package="OpenGL">UNPACK_LSB_FIRST	&lt;C: #define GL_UNPACK_LSB_FIRST 3313	&gt;</body><body package="OpenGL">UNPACK_ROW_LENGTH	&lt;C: #define GL_UNPACK_ROW_LENGTH 3314	&gt;</body><body package="OpenGL">UNPACK_SKIP_IMAGES	&lt;C: #define GL_UNPACK_SKIP_IMAGES 32877	&gt;</body><body package="OpenGL">UNPACK_SKIP_PIXELS	&lt;C: #define GL_UNPACK_SKIP_PIXELS 3316	&gt;</body><body package="OpenGL">UNPACK_SKIP_ROWS	&lt;C: #define GL_UNPACK_SKIP_ROWS 3315	&gt;</body><body package="OpenGL">UNPACK_SWAP_BYTES	&lt;C: #define GL_UNPACK_SWAP_BYTES 3312	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define texture objects</category><body package="OpenGL">ACTIVE_TEXTURE	&lt;C: #define GL_ACTIVE_TEXTURE 34016	&gt;</body><body package="OpenGL">ADD	&lt;C: #define GL_ADD 260	&gt;</body><body package="OpenGL">ADD_SIGNED	&lt;C: #define GL_ADD_SIGNED 34164	&gt;</body><body package="OpenGL">BLUE	&lt;C: #define GL_BLUE 6405	&gt;</body><body package="OpenGL">CLAMP_TO_EDGE	&lt;C: #define GL_CLAMP_TO_EDGE 33071	&gt;</body><body package="OpenGL">COMBINE	&lt;C: #define GL_COMBINE 34160	&gt;</body><body package="OpenGL">COMBINE_ALPHA	&lt;C: #define GL_COMBINE_ALPHA 34162	&gt;</body><body package="OpenGL">COMBINE_RGB	&lt;C: #define GL_COMBINE_RGB 34161	&gt;</body><body package="OpenGL">COMPARE_REF_TO_TEXTURE	&lt;C: #define GL_COMPARE_REF_TO_TEXTURE 34894	&gt;</body><body package="OpenGL">CONSTANT	&lt;C: #define GL_CONSTANT 34166	&gt;</body><body package="OpenGL">COORD_REPLACE	&lt;C: #define GL_COORD_REPLACE 34914	&gt;</body><body package="OpenGL">DECAL	&lt;C: #define GL_DECAL 8449	&gt;</body><body package="OpenGL">DOT3_RGB	&lt;C: #define GL_DOT3_RGB 34478	&gt;</body><body package="OpenGL">DOT3_RGBA	&lt;C: #define GL_DOT3_RGBA 34479	&gt;</body><body package="OpenGL">GREEN	&lt;C: #define GL_GREEN 6404	&gt;</body><body package="OpenGL">INTERPOLATE	&lt;C: #define GL_INTERPOLATE 34165	&gt;</body><body package="OpenGL">LINEAR	&lt;C: #define GL_LINEAR 9729	&gt;</body><body package="OpenGL">LINEAR_MIPMAP_LINEAR	&lt;C: #define GL_LINEAR_MIPMAP_LINEAR 9987	&gt;</body><body package="OpenGL">LINEAR_MIPMAP_NEAREST	&lt;C: #define GL_LINEAR_MIPMAP_NEAREST 9985	&gt;</body><body package="OpenGL">MAX_3D_TEXTURE_SIZE	&lt;C: #define GL_MAX_3D_TEXTURE_SIZE 32883	&gt;</body><body package="OpenGL">MAX_COMBINED_TEXTURE_IMAGE_UNITS	&lt;C: #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 35661	&gt;</body><body package="OpenGL">MAX_CUBE_MAP_TEXTURE_SIZE	&lt;C: #define GL_MAX_CUBE_MAP_TEXTURE_SIZE 34076	&gt;</body><body package="OpenGL">MAX_TEXTURE_COORDS	&lt;C: #define GL_MAX_TEXTURE_COORDS 34929	&gt;</body><body package="OpenGL">MAX_TEXTURE_IMAGE_UNITS	&lt;C: #define GL_MAX_TEXTURE_IMAGE_UNITS 34930	&gt;</body><body package="OpenGL">MAX_TEXTURE_SIZE	&lt;C: #define GL_MAX_TEXTURE_SIZE 3379	&gt;</body><body package="OpenGL">MAX_TEXTURE_UNITS	&lt;C: #define GL_MAX_TEXTURE_UNITS 34018	&gt;</body><body package="OpenGL">MAX_VERTEX_TEXTURE_IMAGE_UNITS	&lt;C: #define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 35660	&gt;</body><body package="OpenGL">MIRRORED_REPEAT	&lt;C: #define GL_MIRRORED_REPEAT 33648	&gt;</body><body package="OpenGL">MODULATE	&lt;C: #define GL_MODULATE 8448	&gt;</body><body package="OpenGL">NEAREST	&lt;C: #define GL_NEAREST 9728	&gt;</body><body package="OpenGL">NEAREST_MIPMAP_LINEAR	&lt;C: #define GL_NEAREST_MIPMAP_LINEAR 9986	&gt;</body><body package="OpenGL">NEAREST_MIPMAP_NEAREST	&lt;C: #define GL_NEAREST_MIPMAP_NEAREST 9984	&gt;</body><body package="OpenGL">NONE	&lt;C: #define GL_NONE 0	&gt;</body><body package="OpenGL">OPERAND0_ALPHA	&lt;C: #define GL_OPERAND0_ALPHA 34200	&gt;</body><body package="OpenGL">OPERAND0_RGB	&lt;C: #define GL_OPERAND0_RGB 34192	&gt;</body><body package="OpenGL">OPERAND1_ALPHA	&lt;C: #define GL_OPERAND1_ALPHA 34201	&gt;</body><body package="OpenGL">OPERAND1_RGB	&lt;C: #define GL_OPERAND1_RGB 34193	&gt;</body><body package="OpenGL">OPERAND2_ALPHA	&lt;C: #define GL_OPERAND2_ALPHA 34202	&gt;</body><body package="OpenGL">OPERAND2_RGB	&lt;C: #define GL_OPERAND2_RGB 34194	&gt;</body><body package="OpenGL">OPERAND3_ALPHA	&lt;C: #define GL_OPERAND3_ALPHA 34203	&gt;</body><body package="OpenGL">OPERAND3_RGB	&lt;C: #define GL_OPERAND3_RGB 34195	&gt;</body><body package="OpenGL">OPERAND4_ALPHA	&lt;C: #define GL_OPERAND4_ALPHA 34204	&gt;</body><body package="OpenGL">OPERAND4_RGB	&lt;C: #define GL_OPERAND4_RGB 34196	&gt;</body><body package="OpenGL">OPERAND5_ALPHA	&lt;C: #define GL_OPERAND5_ALPHA 34205	&gt;</body><body package="OpenGL">OPERAND5_RGB	&lt;C: #define GL_OPERAND5_RGB 34197	&gt;</body><body package="OpenGL">OPERAND6_ALPHA	&lt;C: #define GL_OPERAND6_ALPHA 34206	&gt;</body><body package="OpenGL">OPERAND6_RGB	&lt;C: #define GL_OPERAND6_RGB 34198	&gt;</body><body package="OpenGL">OPERAND7_ALPHA	&lt;C: #define GL_OPERAND7_ALPHA 34207	&gt;</body><body package="OpenGL">OPERAND7_RGB	&lt;C: #define GL_OPERAND7_RGB 34199	&gt;</body><body package="OpenGL">PREVIOUS	&lt;C: #define GL_PREVIOUS 34168	&gt;</body><body package="OpenGL">PROXY_TEXTURE_1D	&lt;C: #define GL_PROXY_TEXTURE_1D 32867	&gt;</body><body package="OpenGL">PROXY_TEXTURE_2D	&lt;C: #define GL_PROXY_TEXTURE_2D 32868	&gt;</body><body package="OpenGL">PROXY_TEXTURE_3D	&lt;C: #define GL_PROXY_TEXTURE_3D 32880	&gt;</body><body package="OpenGL">PROXY_TEXTURE_CUBE_MAP	&lt;C: #define GL_PROXY_TEXTURE_CUBE_MAP 34075	&gt;</body><body package="OpenGL">RED	&lt;C: #define GL_RED 6403	&gt;</body><body package="OpenGL">REPEAT	&lt;C: #define GL_REPEAT 10497	&gt;</body><body package="OpenGL">RGB_SCALE	&lt;C: #define GL_RGB_SCALE 34163	&gt;</body><body package="OpenGL">SRC0_ALPHA	&lt;C: #define GL_SRC0_ALPHA 34184	&gt;</body><body package="OpenGL">SRC0_RGB	&lt;C: #define GL_SRC0_RGB 34176	&gt;</body><body package="OpenGL">SRC1_ALPHA	&lt;C: #define GL_SRC1_ALPHA 34185	&gt;</body><body package="OpenGL">SRC1_RGB	&lt;C: #define GL_SRC1_RGB 34177	&gt;</body><body package="OpenGL">SRC2_ALPHA	&lt;C: #define GL_SRC2_ALPHA 34186	&gt;</body><body package="OpenGL">SRC2_RGB	&lt;C: #define GL_SRC2_RGB 34178	&gt;</body><body package="OpenGL">SRC3_ALPHA	&lt;C: #define GL_SRC3_ALPHA 34187	&gt;</body><body package="OpenGL">SRC3_RGB	&lt;C: #define GL_SRC3_RGB 34179	&gt;</body><body package="OpenGL">SRC4_ALPHA	&lt;C: #define GL_SRC4_ALPHA 34188	&gt;</body><body package="OpenGL">SRC4_RGB	&lt;C: #define GL_SRC4_RGB 34180	&gt;</body><body package="OpenGL">SRC5_ALPHA	&lt;C: #define GL_SRC5_ALPHA 34189	&gt;</body><body package="OpenGL">SRC5_RGB	&lt;C: #define GL_SRC5_RGB 34181	&gt;</body><body package="OpenGL">SRC6_ALPHA	&lt;C: #define GL_SRC6_ALPHA 34190	&gt;</body><body package="OpenGL">SRC6_RGB	&lt;C: #define GL_SRC6_RGB 34182	&gt;</body><body package="OpenGL">SRC7_ALPHA	&lt;C: #define GL_SRC7_ALPHA 34191	&gt;</body><body package="OpenGL">SRC7_RGB	&lt;C: #define GL_SRC7_RGB 34183	&gt;</body><body package="OpenGL">SUBTRACT	&lt;C: #define GL_SUBTRACT 34023	&gt;</body><body package="OpenGL">TEXTURE	&lt;C: #define GL_TEXTURE 5890	&gt;</body><body package="OpenGL">TEXTURE0	&lt;C: #define GL_TEXTURE0 33984	&gt;</body><body package="OpenGL">TEXTURE_1D	&lt;C: #define GL_TEXTURE_1D 3552	&gt;</body><body package="OpenGL">TEXTURE_2D	&lt;C: #define GL_TEXTURE_2D 3553	&gt;</body><body package="OpenGL">TEXTURE_3D	&lt;C: #define GL_TEXTURE_3D 32879	&gt;</body><body package="OpenGL">TEXTURE_ALPHA_SIZE	&lt;C: #define GL_TEXTURE_ALPHA_SIZE 32863	&gt;</body><body package="OpenGL">TEXTURE_BASE_LEVEL	&lt;C: #define GL_TEXTURE_BASE_LEVEL 33084	&gt;</body><body package="OpenGL">TEXTURE_BINDING_1D	&lt;C: #define GL_TEXTURE_BINDING_1D 32872	&gt;</body><body package="OpenGL">TEXTURE_BINDING_2D	&lt;C: #define GL_TEXTURE_BINDING_2D 32873	&gt;</body><body package="OpenGL">TEXTURE_BINDING_3D	&lt;C: #define GL_TEXTURE_BINDING_3D 32874	&gt;</body><body package="OpenGL">TEXTURE_BINDING_CUBE_MAP	&lt;C: #define GL_TEXTURE_BINDING_CUBE_MAP 34068	&gt;</body><body package="OpenGL">TEXTURE_BLUE_SIZE	&lt;C: #define GL_TEXTURE_BLUE_SIZE 32862	&gt;</body><body package="OpenGL">TEXTURE_COMPARE_FUNC	&lt;C: #define GL_TEXTURE_COMPARE_FUNC 34893	&gt;</body><body package="OpenGL">TEXTURE_COMPARE_MODE	&lt;C: #define GL_TEXTURE_COMPARE_MODE 34892	&gt;</body><body package="OpenGL">TEXTURE_COMPONENTS	&lt;C: #define GL_TEXTURE_COMPONENTS GL_TEXTURE_INTERNAL_FORMAT	&gt;</body><body package="OpenGL">TEXTURE_COMPRESSED	&lt;C: #define GL_TEXTURE_COMPRESSED 34465	&gt;</body><body package="OpenGL">TEXTURE_COMPRESSED_IMAGE_SIZE	&lt;C: #define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 34464	&gt;</body><body package="OpenGL">TEXTURE_CUBE_MAP	&lt;C: #define GL_TEXTURE_CUBE_MAP 34067	&gt;</body><body package="OpenGL">TEXTURE_CUBE_MAP_NEGATIVE_X	&lt;C: #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 34070	&gt;</body><body package="OpenGL">TEXTURE_CUBE_MAP_NEGATIVE_Y	&lt;C: #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 34072	&gt;</body><body package="OpenGL">TEXTURE_CUBE_MAP_NEGATIVE_Z	&lt;C: #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 34074	&gt;</body><body package="OpenGL">TEXTURE_CUBE_MAP_POSITIVE_X	&lt;C: #define GL_TEXTURE_CUBE_MAP_POSITIVE_X 34069	&gt;</body><body package="OpenGL">TEXTURE_CUBE_MAP_POSITIVE_Y	&lt;C: #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 34071	&gt;</body><body package="OpenGL">TEXTURE_CUBE_MAP_POSITIVE_Z	&lt;C: #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 34073	&gt;</body><body package="OpenGL">TEXTURE_DEPTH	&lt;C: #define GL_TEXTURE_DEPTH 32881	&gt;</body><body package="OpenGL">TEXTURE_DEPTH_SIZE	&lt;C: #define GL_TEXTURE_DEPTH_SIZE 34890	&gt;</body><body package="OpenGL">TEXTURE_FILTER_CONTROL	&lt;C: #define GL_TEXTURE_FILTER_CONTROL 34048	&gt;</body><body package="OpenGL">TEXTURE_GREEN_SIZE	&lt;C: #define GL_TEXTURE_GREEN_SIZE 32861	&gt;</body><body package="OpenGL">TEXTURE_HEIGHT	&lt;C: #define GL_TEXTURE_HEIGHT 4097	&gt;</body><body package="OpenGL">TEXTURE_INTERNAL_FORMAT	&lt;C: #define GL_TEXTURE_INTERNAL_FORMAT 4099	&gt;</body><body package="OpenGL">TEXTURE_LOD_BIAS	&lt;C: #define GL_TEXTURE_LOD_BIAS 34049	&gt;</body><body package="OpenGL">TEXTURE_MAG_FILTER	&lt;C: #define GL_TEXTURE_MAG_FILTER 10240	&gt;</body><body package="OpenGL">TEXTURE_MAX_LEVEL	&lt;C: #define GL_TEXTURE_MAX_LEVEL 33085	&gt;</body><body package="OpenGL">TEXTURE_MAX_LOD	&lt;C: #define GL_TEXTURE_MAX_LOD 33083	&gt;</body><body package="OpenGL">TEXTURE_MIN_FILTER	&lt;C: #define GL_TEXTURE_MIN_FILTER 10241	&gt;</body><body package="OpenGL">TEXTURE_MIN_LOD	&lt;C: #define GL_TEXTURE_MIN_LOD 33082	&gt;</body><body package="OpenGL">TEXTURE_RED_SIZE	&lt;C: #define GL_TEXTURE_RED_SIZE 32860	&gt;</body><body package="OpenGL">TEXTURE_STENCIL_SIZE_EXT	&lt;C: #define GL_TEXTURE_STENCIL_SIZE_EXT 35057	&gt;</body><body package="OpenGL">TEXTURE_WIDTH	&lt;C: #define GL_TEXTURE_WIDTH 4096	&gt;</body><body package="OpenGL">TEXTURE_WRAP_R	&lt;C: #define GL_TEXTURE_WRAP_R 32882	&gt;</body><body package="OpenGL">TEXTURE_WRAP_S	&lt;C: #define GL_TEXTURE_WRAP_S 10242	&gt;</body><body package="OpenGL">TEXTURE_WRAP_T	&lt;C: #define GL_TEXTURE_WRAP_T 10243	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define pixel operations</category><body package="OpenGL">ALWAYS	&lt;C: #define GL_ALWAYS 519	&gt;</body><body package="OpenGL">AND	&lt;C: #define GL_AND 5377	&gt;</body><body package="OpenGL">AND_INVERTED	&lt;C: #define GL_AND_INVERTED 5380	&gt;</body><body package="OpenGL">AND_REVERSE	&lt;C: #define GL_AND_REVERSE 5378	&gt;</body><body package="OpenGL">BLEND	&lt;C: #define GL_BLEND 3042	&gt;</body><body package="OpenGL">BLEND_COLOR	&lt;C: #define GL_BLEND_COLOR 32773	&gt;</body><body package="OpenGL">BLEND_DST_ALPHA	&lt;C: #define GL_BLEND_DST_ALPHA 32970	&gt;</body><body package="OpenGL">BLEND_DST_RGB	&lt;C: #define GL_BLEND_DST_RGB 32968	&gt;</body><body package="OpenGL">BLEND_EQUATION_ALPHA	&lt;C: #define GL_BLEND_EQUATION_ALPHA 34877	&gt;</body><body package="OpenGL">BLEND_EQUATION_RGB	&lt;C: #define GL_BLEND_EQUATION_RGB 32777	&gt;</body><body package="OpenGL">BLEND_SRC_ALPHA	&lt;C: #define GL_BLEND_SRC_ALPHA 32971	&gt;</body><body package="OpenGL">BLEND_SRC_RGB	&lt;C: #define GL_BLEND_SRC_RGB 32969	&gt;</body><body package="OpenGL">CLEAR	&lt;C: #define GL_CLEAR 5376	&gt;</body><body package="OpenGL">COLOR_LOGIC_OP	&lt;C: #define GL_COLOR_LOGIC_OP 3058	&gt;</body><body package="OpenGL">COLOR_WRITEMASK	&lt;C: #define GL_COLOR_WRITEMASK 3107	&gt;</body><body package="OpenGL">CONSTANT_ALPHA	&lt;C: #define GL_CONSTANT_ALPHA 32771	&gt;</body><body package="OpenGL">CONSTANT_COLOR	&lt;C: #define GL_CONSTANT_COLOR 32769	&gt;</body><body package="OpenGL">COPY	&lt;C: #define GL_COPY 5379	&gt;</body><body package="OpenGL">COPY_INVERTED	&lt;C: #define GL_COPY_INVERTED 5388	&gt;</body><body package="OpenGL">DECR	&lt;C: #define GL_DECR 7683	&gt;</body><body package="OpenGL">DECR_WRAP	&lt;C: #define GL_DECR_WRAP 34056	&gt;</body><body package="OpenGL">DEPTH_FUNC	&lt;C: #define GL_DEPTH_FUNC 2932	&gt;</body><body package="OpenGL">DEPTH_RANGE	&lt;C: #define GL_DEPTH_RANGE 2928	&gt;</body><body package="OpenGL">DEPTH_TEST	&lt;C: #define GL_DEPTH_TEST 2929	&gt;</body><body package="OpenGL">DEPTH_WRITEMASK	&lt;C: #define GL_DEPTH_WRITEMASK 2930	&gt;</body><body package="OpenGL">DST_ALPHA	&lt;C: #define GL_DST_ALPHA 772	&gt;</body><body package="OpenGL">DST_COLOR	&lt;C: #define GL_DST_COLOR 774	&gt;</body><body package="OpenGL">EQUAL	&lt;C: #define GL_EQUAL 514	&gt;</body><body package="OpenGL">EQUIV	&lt;C: #define GL_EQUIV 5385	&gt;</body><body package="OpenGL">FUNC_ADD	&lt;C: #define GL_FUNC_ADD 32774	&gt;</body><body package="OpenGL">FUNC_REVERSE_SUBTRACT	&lt;C: #define GL_FUNC_REVERSE_SUBTRACT 32779	&gt;</body><body package="OpenGL">FUNC_SUBTRACT	&lt;C: #define GL_FUNC_SUBTRACT 32778	&gt;</body><body package="OpenGL">GEQUAL	&lt;C: #define GL_GEQUAL 518	&gt;</body><body package="OpenGL">GREATER	&lt;C: #define GL_GREATER 516	&gt;</body><body package="OpenGL">INCR	&lt;C: #define GL_INCR 7682	&gt;</body><body package="OpenGL">INCR_WRAP	&lt;C: #define GL_INCR_WRAP 34055	&gt;</body><body package="OpenGL">INVERT	&lt;C: #define GL_INVERT 5386	&gt;</body><body package="OpenGL">KEEP	&lt;C: #define GL_KEEP 7680	&gt;</body><body package="OpenGL">LEQUAL	&lt;C: #define GL_LEQUAL 515	&gt;</body><body package="OpenGL">LESS	&lt;C: #define GL_LESS 513	&gt;</body><body package="OpenGL">LOGIC_OP	&lt;C: #define GL_LOGIC_OP GL_INDEX_LOGIC_OP	&gt;</body><body package="OpenGL">LOGIC_OP_MODE	&lt;C: #define GL_LOGIC_OP_MODE 3056	&gt;</body><body package="OpenGL">MAX	&lt;C: #define GL_MAX 32776	&gt;</body><body package="OpenGL">MIN	&lt;C: #define GL_MIN 32775	&gt;</body><body package="OpenGL">NAND	&lt;C: #define GL_NAND 5390	&gt;</body><body package="OpenGL">NEVER	&lt;C: #define GL_NEVER 512	&gt;</body><body package="OpenGL">NOOP	&lt;C: #define GL_NOOP 5381	&gt;</body><body package="OpenGL">NOR	&lt;C: #define GL_NOR 5384	&gt;</body><body package="OpenGL">NOTEQUAL	&lt;C: #define GL_NOTEQUAL 517	&gt;</body><body package="OpenGL">ONE	&lt;C: #define GL_ONE 1	&gt;</body><body package="OpenGL">ONE_MINUS_CONSTANT_ALPHA	&lt;C: #define GL_ONE_MINUS_CONSTANT_ALPHA 32772	&gt;</body><body package="OpenGL">ONE_MINUS_CONSTANT_COLOR	&lt;C: #define GL_ONE_MINUS_CONSTANT_COLOR 32770	&gt;</body><body package="OpenGL">ONE_MINUS_DST_ALPHA	&lt;C: #define GL_ONE_MINUS_DST_ALPHA 773	&gt;</body><body package="OpenGL">ONE_MINUS_DST_COLOR	&lt;C: #define GL_ONE_MINUS_DST_COLOR 775	&gt;</body><body package="OpenGL">ONE_MINUS_SRC_ALPHA	&lt;C: #define GL_ONE_MINUS_SRC_ALPHA 771	&gt;</body><body package="OpenGL">ONE_MINUS_SRC_COLOR	&lt;C: #define GL_ONE_MINUS_SRC_COLOR 769	&gt;</body><body package="OpenGL">OR	&lt;C: #define GL_OR 5383	&gt;</body><body package="OpenGL">OR_INVERTED	&lt;C: #define GL_OR_INVERTED 5389	&gt;</body><body package="OpenGL">OR_REVERSE	&lt;C: #define GL_OR_REVERSE 5387	&gt;</body><body package="OpenGL">REPLACE	&lt;C: #define GL_REPLACE 7681	&gt;</body><body package="OpenGL">RGBA_MODE	&lt;C: #define GL_RGBA_MODE 3121	&gt;</body><body package="OpenGL">SET	&lt;C: #define GL_SET 5391	&gt;</body><body package="OpenGL">SRC_ALPHA	&lt;C: #define GL_SRC_ALPHA 770	&gt;</body><body package="OpenGL">SRC_ALPHA_SATURATE	&lt;C: #define GL_SRC_ALPHA_SATURATE 776	&gt;</body><body package="OpenGL">SRC_COLOR	&lt;C: #define GL_SRC_COLOR 768	&gt;</body><body package="OpenGL">STENCIL_BACK_FAIL	&lt;C: #define GL_STENCIL_BACK_FAIL 34817	&gt;</body><body package="OpenGL">STENCIL_BACK_FUNC	&lt;C: #define GL_STENCIL_BACK_FUNC 34816	&gt;</body><body package="OpenGL">STENCIL_BACK_PASS_DEPTH_FAIL	&lt;C: #define GL_STENCIL_BACK_PASS_DEPTH_FAIL 34818	&gt;</body><body package="OpenGL">STENCIL_BACK_PASS_DEPTH_PASS	&lt;C: #define GL_STENCIL_BACK_PASS_DEPTH_PASS 34819	&gt;</body><body package="OpenGL">STENCIL_BACK_REF	&lt;C: #define GL_STENCIL_BACK_REF 36003	&gt;</body><body package="OpenGL">STENCIL_BACK_VALUE_MASK	&lt;C: #define GL_STENCIL_BACK_VALUE_MASK 36004	&gt;</body><body package="OpenGL">STENCIL_BACK_WRITEMASK	&lt;C: #define GL_STENCIL_BACK_WRITEMASK 36005	&gt;</body><body package="OpenGL">STENCIL_FAIL	&lt;C: #define GL_STENCIL_FAIL 2964	&gt;</body><body package="OpenGL">STENCIL_FUNC	&lt;C: #define GL_STENCIL_FUNC 2962	&gt;</body><body package="OpenGL">STENCIL_PASS_DEPTH_FAIL	&lt;C: #define GL_STENCIL_PASS_DEPTH_FAIL 2965	&gt;</body><body package="OpenGL">STENCIL_PASS_DEPTH_PASS	&lt;C: #define GL_STENCIL_PASS_DEPTH_PASS 2966	&gt;</body><body package="OpenGL">STENCIL_REF	&lt;C: #define GL_STENCIL_REF 2967	&gt;</body><body package="OpenGL">STENCIL_TEST	&lt;C: #define GL_STENCIL_TEST 2960	&gt;</body><body package="OpenGL">STENCIL_VALUE_MASK	&lt;C: #define GL_STENCIL_VALUE_MASK 2963	&gt;</body><body package="OpenGL">STENCIL_WRITEMASK	&lt;C: #define GL_STENCIL_WRITEMASK 2968	&gt;</body><body package="OpenGL">XOR	&lt;C: #define GL_XOR 5382	&gt;</body><body package="OpenGL">ZERO	&lt;C: #define GL_ZERO 0	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define framebuffer object</category><body package="OpenGL">COLOR_ATTACHMENT0_EXT	&lt;C: #define GL_COLOR_ATTACHMENT0_EXT 36064	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT10_EXT	&lt;C: #define GL_COLOR_ATTACHMENT10_EXT 36074	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT11_EXT	&lt;C: #define GL_COLOR_ATTACHMENT11_EXT 36075	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT12_EXT	&lt;C: #define GL_COLOR_ATTACHMENT12_EXT 36076	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT13_EXT	&lt;C: #define GL_COLOR_ATTACHMENT13_EXT 36077	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT14_EXT	&lt;C: #define GL_COLOR_ATTACHMENT14_EXT 36078	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT15_EXT	&lt;C: #define GL_COLOR_ATTACHMENT15_EXT 36079	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT1_EXT	&lt;C: #define GL_COLOR_ATTACHMENT1_EXT 36065	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT2_EXT	&lt;C: #define GL_COLOR_ATTACHMENT2_EXT 36066	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT3_EXT	&lt;C: #define GL_COLOR_ATTACHMENT3_EXT 36067	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT4_EXT	&lt;C: #define GL_COLOR_ATTACHMENT4_EXT 36068	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT5_EXT	&lt;C: #define GL_COLOR_ATTACHMENT5_EXT 36069	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT6_EXT	&lt;C: #define GL_COLOR_ATTACHMENT6_EXT 36070	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT7_EXT	&lt;C: #define GL_COLOR_ATTACHMENT7_EXT 36071	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT8_EXT	&lt;C: #define GL_COLOR_ATTACHMENT8_EXT 36072	&gt;</body><body package="OpenGL">COLOR_ATTACHMENT9_EXT	&lt;C: #define GL_COLOR_ATTACHMENT9_EXT 36073	&gt;</body><body package="OpenGL">DEPTH_ATTACHMENT_EXT	&lt;C: #define GL_DEPTH_ATTACHMENT_EXT 36096	&gt;</body><body package="OpenGL">DRAW_FRAMEBUFFER_BINDING_EXT	&lt;C: #define GL_DRAW_FRAMEBUFFER_BINDING_EXT 36006	&gt;</body><body package="OpenGL">DRAW_FRAMEBUFFER_EXT	&lt;C: #define GL_DRAW_FRAMEBUFFER_EXT 36009	&gt;</body><body package="OpenGL">FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 36049	&gt;</body><body package="OpenGL">FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 36048	&gt;</body><body package="OpenGL">FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 36052	&gt;</body><body package="OpenGL">FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 36051	&gt;</body><body package="OpenGL">FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 36050	&gt;</body><body package="OpenGL">FRAMEBUFFER_BINDING_EXT	&lt;C: #define GL_FRAMEBUFFER_BINDING_EXT 36006	&gt;</body><body package="OpenGL">FRAMEBUFFER_COMPLETE_EXT	&lt;C: #define GL_FRAMEBUFFER_COMPLETE_EXT 36053	&gt;</body><body package="OpenGL">FRAMEBUFFER_EXT	&lt;C: #define GL_FRAMEBUFFER_EXT 36160	&gt;</body><body package="OpenGL">FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 36054	&gt;</body><body package="OpenGL">FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 36057	&gt;</body><body package="OpenGL">FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 36059	&gt;</body><body package="OpenGL">FRAMEBUFFER_INCOMPLETE_FORMATS_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 36058	&gt;</body><body package="OpenGL">FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 36055	&gt;</body><body package="OpenGL">FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 36182	&gt;</body><body package="OpenGL">FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 36060	&gt;</body><body package="OpenGL">FRAMEBUFFER_UNSUPPORTED_EXT	&lt;C: #define GL_FRAMEBUFFER_UNSUPPORTED_EXT 36061	&gt;</body><body package="OpenGL">INVALID_FRAMEBUFFER_OPERATION_EXT	&lt;C: #define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 1286	&gt;</body><body package="OpenGL">MAX_COLOR_ATTACHMENTS_EXT	&lt;C: #define GL_MAX_COLOR_ATTACHMENTS_EXT 36063	&gt;</body><body package="OpenGL">MAX_RENDERBUFFER_SIZE_EXT	&lt;C: #define GL_MAX_RENDERBUFFER_SIZE_EXT 34024	&gt;</body><body package="OpenGL">MAX_SAMPLES_EXT	&lt;C: #define GL_MAX_SAMPLES_EXT 36183	&gt;</body><body package="OpenGL">READ_FRAMEBUFFER_BINDING_EXT	&lt;C: #define GL_READ_FRAMEBUFFER_BINDING_EXT 36010	&gt;</body><body package="OpenGL">READ_FRAMEBUFFER_EXT	&lt;C: #define GL_READ_FRAMEBUFFER_EXT 36008	&gt;</body><body package="OpenGL">RENDERBUFFER_ALPHA_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_ALPHA_SIZE_EXT 36179	&gt;</body><body package="OpenGL">RENDERBUFFER_BINDING_EXT	&lt;C: #define GL_RENDERBUFFER_BINDING_EXT 36007	&gt;</body><body package="OpenGL">RENDERBUFFER_BLUE_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_BLUE_SIZE_EXT 36178	&gt;</body><body package="OpenGL">RENDERBUFFER_DEPTH_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_DEPTH_SIZE_EXT 36180	&gt;</body><body package="OpenGL">RENDERBUFFER_EXT	&lt;C: #define GL_RENDERBUFFER_EXT 36161	&gt;</body><body package="OpenGL">RENDERBUFFER_GREEN_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_GREEN_SIZE_EXT 36177	&gt;</body><body package="OpenGL">RENDERBUFFER_HEIGHT_EXT	&lt;C: #define GL_RENDERBUFFER_HEIGHT_EXT 36163	&gt;</body><body package="OpenGL">RENDERBUFFER_INTERNAL_FORMAT_EXT	&lt;C: #define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 36164	&gt;</body><body package="OpenGL">RENDERBUFFER_RED_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_RED_SIZE_EXT 36176	&gt;</body><body package="OpenGL">RENDERBUFFER_SAMPLES_EXT	&lt;C: #define GL_RENDERBUFFER_SAMPLES_EXT 36011	&gt;</body><body package="OpenGL">RENDERBUFFER_STENCIL_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_STENCIL_SIZE_EXT 36181	&gt;</body><body package="OpenGL">RENDERBUFFER_WIDTH_EXT	&lt;C: #define GL_RENDERBUFFER_WIDTH_EXT 36162	&gt;</body><body package="OpenGL">STENCIL_ATTACHMENT_EXT	&lt;C: #define GL_STENCIL_ATTACHMENT_EXT 36128	&gt;</body><body package="OpenGL">STENCIL_INDEX16_EXT	&lt;C: #define GL_STENCIL_INDEX16_EXT 36169	&gt;</body><body package="OpenGL">STENCIL_INDEX1_EXT	&lt;C: #define GL_STENCIL_INDEX1_EXT 36166	&gt;</body><body package="OpenGL">STENCIL_INDEX4_EXT	&lt;C: #define GL_STENCIL_INDEX4_EXT 36167	&gt;</body><body package="OpenGL">STENCIL_INDEX8_EXT	&lt;C: #define GL_STENCIL_INDEX8_EXT 36168	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define formats</category><body package="OpenGL">ALPHA	&lt;C: #define GL_ALPHA 6406	&gt;</body><body package="OpenGL">ALPHA12	&lt;C: #define GL_ALPHA12 32829	&gt;</body><body package="OpenGL">ALPHA16	&lt;C: #define GL_ALPHA16 32830	&gt;</body><body package="OpenGL">ALPHA16F_ARB	&lt;C: #define GL_ALPHA16F_ARB 34844	&gt;</body><body package="OpenGL">ALPHA16I_EXT	&lt;C: #define GL_ALPHA16I_EXT 36234	&gt;</body><body package="OpenGL">ALPHA16UI_EXT	&lt;C: #define GL_ALPHA16UI_EXT 36216	&gt;</body><body package="OpenGL">ALPHA32F_ARB	&lt;C: #define GL_ALPHA32F_ARB 34838	&gt;</body><body package="OpenGL">ALPHA32I_EXT	&lt;C: #define GL_ALPHA32I_EXT 36228	&gt;</body><body package="OpenGL">ALPHA32UI_EXT	&lt;C: #define GL_ALPHA32UI_EXT 36210	&gt;</body><body package="OpenGL">ALPHA4	&lt;C: #define GL_ALPHA4 32827	&gt;</body><body package="OpenGL">ALPHA8	&lt;C: #define GL_ALPHA8 32828	&gt;</body><body package="OpenGL">ALPHA8I_EXT	&lt;C: #define GL_ALPHA8I_EXT 36240	&gt;</body><body package="OpenGL">ALPHA8UI_EXT	&lt;C: #define GL_ALPHA8UI_EXT 36222	&gt;</body><body package="OpenGL">ALPHA_SCALE	&lt;C: #define GL_ALPHA_SCALE 3356	&gt;</body><body package="OpenGL">BGR	&lt;C: #define GL_BGR 32992	&gt;</body><body package="OpenGL">BGRA	&lt;C: #define GL_BGRA 32993	&gt;</body><body package="OpenGL">COMPRESSED_ALPHA	&lt;C: #define GL_COMPRESSED_ALPHA 34025	&gt;</body><body package="OpenGL">COMPRESSED_RGB	&lt;C: #define GL_COMPRESSED_RGB 34029	&gt;</body><body package="OpenGL">COMPRESSED_RGBA	&lt;C: #define GL_COMPRESSED_RGBA 34030	&gt;</body><body package="OpenGL">COMPRESSED_SRGB	&lt;C: #define GL_COMPRESSED_SRGB 35912	&gt;</body><body package="OpenGL">COMPRESSED_SRGB_ALPHA	&lt;C: #define GL_COMPRESSED_SRGB_ALPHA 35913	&gt;</body><body package="OpenGL">COMPRESSED_TEXTURE_FORMATS	&lt;C: #define GL_COMPRESSED_TEXTURE_FORMATS 34467	&gt;</body><body package="OpenGL">DEPTH24_STENCIL8_EXT	&lt;C: #define GL_DEPTH24_STENCIL8_EXT 35056	&gt;</body><body package="OpenGL">DEPTH_COMPONENT	&lt;C: #define GL_DEPTH_COMPONENT 6402	&gt;</body><body package="OpenGL">DEPTH_COMPONENT16	&lt;C: #define GL_DEPTH_COMPONENT16 33189	&gt;</body><body package="OpenGL">DEPTH_COMPONENT24	&lt;C: #define GL_DEPTH_COMPONENT24 33190	&gt;</body><body package="OpenGL">DEPTH_COMPONENT32	&lt;C: #define GL_DEPTH_COMPONENT32 33191	&gt;</body><body package="OpenGL">DEPTH_STENCIL_EXT	&lt;C: #define GL_DEPTH_STENCIL_EXT 34041	&gt;</body><body package="OpenGL">NUM_COMPRESSED_TEXTURE_FORMATS	&lt;C: #define GL_NUM_COMPRESSED_TEXTURE_FORMATS 34466	&gt;</body><body package="OpenGL">R3_G3_B2	&lt;C: #define GL_R3_G3_B2 10768	&gt;</body><body package="OpenGL">RGB	&lt;C: #define GL_RGB 6407	&gt;</body><body package="OpenGL">RGB10	&lt;C: #define GL_RGB10 32850	&gt;</body><body package="OpenGL">RGB10_A2	&lt;C: #define GL_RGB10_A2 32857	&gt;</body><body package="OpenGL">RGB12	&lt;C: #define GL_RGB12 32851	&gt;</body><body package="OpenGL">RGB16	&lt;C: #define GL_RGB16 32852	&gt;</body><body package="OpenGL">RGB16F_ARB	&lt;C: #define GL_RGB16F_ARB 34843	&gt;</body><body package="OpenGL">RGB16I_EXT	&lt;C: #define GL_RGB16I_EXT 36233	&gt;</body><body package="OpenGL">RGB16UI_EXT	&lt;C: #define GL_RGB16UI_EXT 36215	&gt;</body><body package="OpenGL">RGB32F_ARB	&lt;C: #define GL_RGB32F_ARB 34837	&gt;</body><body package="OpenGL">RGB32I_EXT	&lt;C: #define GL_RGB32I_EXT 36227	&gt;</body><body package="OpenGL">RGB32UI_EXT	&lt;C: #define GL_RGB32UI_EXT 36209	&gt;</body><body package="OpenGL">RGB4	&lt;C: #define GL_RGB4 32847	&gt;</body><body package="OpenGL">RGB5	&lt;C: #define GL_RGB5 32848	&gt;</body><body package="OpenGL">RGB5_A1	&lt;C: #define GL_RGB5_A1 32855	&gt;</body><body package="OpenGL">RGB8	&lt;C: #define GL_RGB8 32849	&gt;</body><body package="OpenGL">RGB8I_EXT	&lt;C: #define GL_RGB8I_EXT 36239	&gt;</body><body package="OpenGL">RGB8UI_EXT	&lt;C: #define GL_RGB8UI_EXT 36221	&gt;</body><body package="OpenGL">RGBA	&lt;C: #define GL_RGBA 6408	&gt;</body><body package="OpenGL">RGBA12	&lt;C: #define GL_RGBA12 32858	&gt;</body><body package="OpenGL">RGBA16	&lt;C: #define GL_RGBA16 32859	&gt;</body><body package="OpenGL">RGBA16F_ARB	&lt;C: #define GL_RGBA16F_ARB 34842	&gt;</body><body package="OpenGL">RGBA16I_EXT	&lt;C: #define GL_RGBA16I_EXT 36232	&gt;</body><body package="OpenGL">RGBA16UI_EXT	&lt;C: #define GL_RGBA16UI_EXT 36214	&gt;</body><body package="OpenGL">RGBA2	&lt;C: #define GL_RGBA2 32853	&gt;</body><body package="OpenGL">RGBA32F_ARB	&lt;C: #define GL_RGBA32F_ARB 34836	&gt;</body><body package="OpenGL">RGBA32I_EXT	&lt;C: #define GL_RGBA32I_EXT 36226	&gt;</body><body package="OpenGL">RGBA32UI_EXT	&lt;C: #define GL_RGBA32UI_EXT 36208	&gt;</body><body package="OpenGL">RGBA4	&lt;C: #define GL_RGBA4 32854	&gt;</body><body package="OpenGL">RGBA8	&lt;C: #define GL_RGBA8 32856	&gt;</body><body package="OpenGL">RGBA8I_EXT	&lt;C: #define GL_RGBA8I_EXT 36238	&gt;</body><body package="OpenGL">RGBA8UI_EXT	&lt;C: #define GL_RGBA8UI_EXT 36220	&gt;</body><body package="OpenGL">SRGB	&lt;C: #define GL_SRGB 35904	&gt;</body><body package="OpenGL">SRGB8	&lt;C: #define GL_SRGB8 35905	&gt;</body><body package="OpenGL">SRGB8_ALPHA8	&lt;C: #define GL_SRGB8_ALPHA8 35907	&gt;</body><body package="OpenGL">SRGB_ALPHA	&lt;C: #define GL_SRGB_ALPHA 35906	&gt;</body><body package="OpenGL">TEXTURE_ALPHA_TYPE_ARB	&lt;C: #define GL_TEXTURE_ALPHA_TYPE_ARB 35859	&gt;</body><body package="OpenGL">TEXTURE_BLUE_TYPE_ARB	&lt;C: #define GL_TEXTURE_BLUE_TYPE_ARB 35858	&gt;</body><body package="OpenGL">TEXTURE_DEPTH_TYPE_ARB	&lt;C: #define GL_TEXTURE_DEPTH_TYPE_ARB 35862	&gt;</body><body package="OpenGL">TEXTURE_GREEN_TYPE_ARB	&lt;C: #define GL_TEXTURE_GREEN_TYPE_ARB 35857	&gt;</body><body package="OpenGL">TEXTURE_RED_TYPE_ARB	&lt;C: #define GL_TEXTURE_RED_TYPE_ARB 35856	&gt;</body><body package="OpenGL">UNSIGNED_BYTE_2_3_3_REV	&lt;C: #define GL_UNSIGNED_BYTE_2_3_3_REV 33634	&gt;</body><body package="OpenGL">UNSIGNED_BYTE_3_3_2	&lt;C: #define GL_UNSIGNED_BYTE_3_3_2 32818	&gt;</body><body package="OpenGL">UNSIGNED_INT_10_10_10_2	&lt;C: #define GL_UNSIGNED_INT_10_10_10_2 32822	&gt;</body><body package="OpenGL">UNSIGNED_INT_2_10_10_10_REV	&lt;C: #define GL_UNSIGNED_INT_2_10_10_10_REV 33640	&gt;</body><body package="OpenGL">UNSIGNED_INT_8_8_8_8	&lt;C: #define GL_UNSIGNED_INT_8_8_8_8 32821	&gt;</body><body package="OpenGL">UNSIGNED_INT_8_8_8_8_REV	&lt;C: #define GL_UNSIGNED_INT_8_8_8_8_REV 33639	&gt;</body><body package="OpenGL">UNSIGNED_SHORT_1_5_5_5_REV	&lt;C: #define GL_UNSIGNED_SHORT_1_5_5_5_REV 33638	&gt;</body><body package="OpenGL">UNSIGNED_SHORT_4_4_4_4	&lt;C: #define GL_UNSIGNED_SHORT_4_4_4_4 32819	&gt;</body><body package="OpenGL">UNSIGNED_SHORT_4_4_4_4_REV	&lt;C: #define GL_UNSIGNED_SHORT_4_4_4_4_REV 33637	&gt;</body><body package="OpenGL">UNSIGNED_SHORT_5_5_5_1	&lt;C: #define GL_UNSIGNED_SHORT_5_5_5_1 32820	&gt;</body><body package="OpenGL">UNSIGNED_SHORT_5_6_5	&lt;C: #define GL_UNSIGNED_SHORT_5_6_5 33635	&gt;</body><body package="OpenGL">UNSIGNED_SHORT_5_6_5_REV	&lt;C: #define GL_UNSIGNED_SHORT_5_6_5_REV 33636	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define vertex attributes</category><body package="OpenGL">CURRENT_VERTEX_ATTRIB	&lt;C: #define GL_CURRENT_VERTEX_ATTRIB 34342	&gt;</body><body package="OpenGL">MAX_VERTEX_ATTRIBS	&lt;C: #define GL_MAX_VERTEX_ATTRIBS 34921	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 34975	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_ARRAY_ENABLED	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_ENABLED 34338	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_ARRAY_NORMALIZED	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 34922	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_ARRAY_SIZE	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_SIZE 34339	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_ARRAY_STRIDE	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_STRIDE 34340	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_ARRAY_TYPE	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_TYPE 34341	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define shader and program objects</category><body package="OpenGL">ACTIVE_ATTRIBUTES	&lt;C: #define GL_ACTIVE_ATTRIBUTES 35721	&gt;</body><body package="OpenGL">ACTIVE_ATTRIBUTE_MAX_LENGTH	&lt;C: #define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 35722	&gt;</body><body package="OpenGL">ACTIVE_UNIFORMS	&lt;C: #define GL_ACTIVE_UNIFORMS 35718	&gt;</body><body package="OpenGL">ACTIVE_UNIFORM_MAX_LENGTH	&lt;C: #define GL_ACTIVE_UNIFORM_MAX_LENGTH 35719	&gt;</body><body package="OpenGL">ATTACHED_SHADERS	&lt;C: #define GL_ATTACHED_SHADERS 35717	&gt;</body><body package="OpenGL">COMPILE_STATUS	&lt;C: #define GL_COMPILE_STATUS 35713	&gt;</body><body package="OpenGL">CURRENT_PROGRAM	&lt;C: #define GL_CURRENT_PROGRAM 35725	&gt;</body><body package="OpenGL">DELETE_STATUS	&lt;C: #define GL_DELETE_STATUS 35712	&gt;</body><body package="OpenGL">FRAGMENT_SHADER	&lt;C: #define GL_FRAGMENT_SHADER 35632	&gt;</body><body package="OpenGL">INFO_LOG_LENGTH	&lt;C: #define GL_INFO_LOG_LENGTH 35716	&gt;</body><body package="OpenGL">LINK_STATUS	&lt;C: #define GL_LINK_STATUS 35714	&gt;</body><body package="OpenGL">MAX_PROGRAM_TEXEL_OFFSET_EXT	&lt;C: #define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 35077	&gt;</body><body package="OpenGL">MIN_PROGRAM_TEXEL_OFFSET_EXT	&lt;C: #define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 35076	&gt;</body><body package="OpenGL">SHADER_SOURCE_LENGTH	&lt;C: #define GL_SHADER_SOURCE_LENGTH 35720	&gt;</body><body package="OpenGL">SHADER_TYPE	&lt;C: #define GL_SHADER_TYPE 35663	&gt;</body><body package="OpenGL">VALIDATE_STATUS	&lt;C: #define GL_VALIDATE_STATUS 35715	&gt;</body><body package="OpenGL">VERTEX_SHADER	&lt;C: #define GL_VERTEX_SHADER 35633	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define errors</category><body package="OpenGL">INVALID_ENUM	&lt;C: #define GL_INVALID_ENUM 1280	&gt;</body><body package="OpenGL">INVALID_OPERATION	&lt;C: #define GL_INVALID_OPERATION 1282	&gt;</body><body package="OpenGL">INVALID_VALUE	&lt;C: #define GL_INVALID_VALUE 1281	&gt;</body><body package="OpenGL">NO_ERROR	&lt;C: #define GL_NO_ERROR 0	&gt;</body><body package="OpenGL">OUT_OF_MEMORY	&lt;C: #define GL_OUT_OF_MEMORY 1285	&gt;</body><body package="OpenGL">STACK_OVERFLOW	&lt;C: #define GL_STACK_OVERFLOW 1283	&gt;</body><body package="OpenGL">STACK_UNDERFLOW	&lt;C: #define GL_STACK_UNDERFLOW 1284	&gt;</body><body package="OpenGL">TABLE_TOO_LARGE	&lt;C: #define GL_TABLE_TOO_LARGE 32817	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define transform feedback</category><body package="OpenGL">INTERLEAVED_ATTRIBS_EXT	&lt;C: #define GL_INTERLEAVED_ATTRIBS_EXT 35980	&gt;</body><body package="OpenGL">MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT	&lt;C: #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 35978	&gt;</body><body package="OpenGL">MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT	&lt;C: #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 35979	&gt;</body><body package="OpenGL">MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT	&lt;C: #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 35968	&gt;</body><body package="OpenGL">PRIMITIVES_GENERATED_EXT	&lt;C: #define GL_PRIMITIVES_GENERATED_EXT 35975	&gt;</body><body package="OpenGL">RASTERIZER_DISCARD_EXT	&lt;C: #define GL_RASTERIZER_DISCARD_EXT 35977	&gt;</body><body package="OpenGL">SEPARATE_ATTRIBS_EXT	&lt;C: #define GL_SEPARATE_ATTRIBS_EXT 35981	&gt;</body><body package="OpenGL">TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 35983	&gt;</body><body package="OpenGL">TRANSFORM_FEEDBACK_BUFFER_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 35982	&gt;</body><body package="OpenGL">TRANSFORM_FEEDBACK_BUFFER_MODE_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 35967	&gt;</body><body package="OpenGL">TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 35973	&gt;</body><body package="OpenGL">TRANSFORM_FEEDBACK_BUFFER_START_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 35972	&gt;</body><body package="OpenGL">TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 35976	&gt;</body><body package="OpenGL">TRANSFORM_FEEDBACK_VARYINGS_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 35971	&gt;</body><body package="OpenGL">TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 35958	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define vertex array object</category><body package="OpenGL">VERTEX_ARRAY_BINDING_APPLE	&lt;C: #define GL_VERTEX_ARRAY_BINDING_APPLE 34229	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define buffer objects</category><body package="OpenGL">ARRAY_BUFFER	&lt;C: #define GL_ARRAY_BUFFER 34962	&gt;</body><body package="OpenGL">BUFFER_ACCESS	&lt;C: #define GL_BUFFER_ACCESS 35003	&gt;</body><body package="OpenGL">BUFFER_MAPPED	&lt;C: #define GL_BUFFER_MAPPED 35004	&gt;</body><body package="OpenGL">BUFFER_MAP_POINTER	&lt;C: #define GL_BUFFER_MAP_POINTER 35005	&gt;</body><body package="OpenGL">BUFFER_SIZE	&lt;C: #define GL_BUFFER_SIZE 34660	&gt;</body><body package="OpenGL">BUFFER_USAGE	&lt;C: #define GL_BUFFER_USAGE 34661	&gt;</body><body package="OpenGL">DYNAMIC_COPY	&lt;C: #define GL_DYNAMIC_COPY 35050	&gt;</body><body package="OpenGL">DYNAMIC_DRAW	&lt;C: #define GL_DYNAMIC_DRAW 35048	&gt;</body><body package="OpenGL">DYNAMIC_READ	&lt;C: #define GL_DYNAMIC_READ 35049	&gt;</body><body package="OpenGL">ELEMENT_ARRAY_BUFFER	&lt;C: #define GL_ELEMENT_ARRAY_BUFFER 34963	&gt;</body><body package="OpenGL">PIXEL_PACK_BUFFER	&lt;C: #define GL_PIXEL_PACK_BUFFER 35051	&gt;</body><body package="OpenGL">PIXEL_UNPACK_BUFFER	&lt;C: #define GL_PIXEL_UNPACK_BUFFER 35052	&gt;</body><body package="OpenGL">READ_ONLY	&lt;C: #define GL_READ_ONLY 35000	&gt;</body><body package="OpenGL">READ_WRITE	&lt;C: #define GL_READ_WRITE 35002	&gt;</body><body package="OpenGL">STATIC_COPY	&lt;C: #define GL_STATIC_COPY 35046	&gt;</body><body package="OpenGL">STATIC_DRAW	&lt;C: #define GL_STATIC_DRAW 35044	&gt;</body><body package="OpenGL">STATIC_READ	&lt;C: #define GL_STATIC_READ 35045	&gt;</body><body package="OpenGL">STREAM_COPY	&lt;C: #define GL_STREAM_COPY 35042	&gt;</body><body package="OpenGL">STREAM_DRAW	&lt;C: #define GL_STREAM_DRAW 35040	&gt;</body><body package="OpenGL">STREAM_READ	&lt;C: #define GL_STREAM_READ 35041	&gt;</body><body package="OpenGL">WRITE_ONLY	&lt;C: #define GL_WRITE_ONLY 35001	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define query objects</category><body package="OpenGL">CURRENT_QUERY	&lt;C: #define GL_CURRENT_QUERY 34917	&gt;</body><body package="OpenGL">QUERY_COUNTER_BITS	&lt;C: #define GL_QUERY_COUNTER_BITS 34916	&gt;</body><body package="OpenGL">QUERY_RESULT	&lt;C: #define GL_QUERY_RESULT 34918	&gt;</body><body package="OpenGL">QUERY_RESULT_AVAILABLE	&lt;C: #define GL_QUERY_RESULT_AVAILABLE 34919	&gt;</body><body package="OpenGL">SAMPLES_PASSED	&lt;C: #define GL_SAMPLES_PASSED 35092	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define drawing</category><body package="OpenGL">LINES	&lt;C: #define GL_LINES 0x0001	&gt;</body><body package="OpenGL">LINE_LOOP	&lt;C: #define GL_LINE_LOOP 0x0002	&gt;</body><body package="OpenGL">LINE_STRIP	&lt;C: #define GL_LINE_STRIP 0x0003	&gt;</body><body package="OpenGL">MAX_ELEMENTS_INDICES	&lt;C: #define GL_MAX_ELEMENTS_INDICES 33001	&gt;</body><body package="OpenGL">MAX_ELEMENTS_VERTICES	&lt;C: #define GL_MAX_ELEMENTS_VERTICES 33000	&gt;</body><body package="OpenGL">POINTS	&lt;C: #define GL_POINTS 0x0000	&gt;</body><body package="OpenGL">TRIANGLES	&lt;C: #define GL_TRIANGLES 0x0004	&gt;</body><body package="OpenGL">TRIANGLE_FAN	&lt;C: #define GL_TRIANGLE_FAN 0x0006	&gt;</body><body package="OpenGL">TRIANGLE_STRIP	&lt;C: #define GL_TRIANGLE_STRIP 0x0005	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define state requests</category><body package="OpenGL">EXTENSIONS	&lt;C: #define GL_EXTENSIONS 7939	&gt;</body><body package="OpenGL">RENDERER	&lt;C: #define GL_RENDERER 7937	&gt;</body><body package="OpenGL">SHADING_LANGUAGE_VERSION	&lt;C: #define GL_SHADING_LANGUAGE_VERSION 35724	&gt;</body><body package="OpenGL">VENDOR	&lt;C: #define GL_VENDOR 7936	&gt;</body><body package="OpenGL">VERSION	&lt;C: #define GL_VERSION 7938	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define shader uniforms</category><body package="OpenGL">MAX_FRAGMENT_UNIFORM_COMPONENTS	&lt;C: #define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 35657	&gt;</body><body package="OpenGL">MAX_VERTEX_UNIFORM_COMPONENTS	&lt;C: #define GL_MAX_VERTEX_UNIFORM_COMPONENTS 35658	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define data types</category><body package="OpenGL">BOOL	&lt;C: #define GL_BOOL 35670	&gt;</body><body package="OpenGL">BOOL_VEC2	&lt;C: #define GL_BOOL_VEC2 35671	&gt;</body><body package="OpenGL">BOOL_VEC3	&lt;C: #define GL_BOOL_VEC3 35672	&gt;</body><body package="OpenGL">BOOL_VEC4	&lt;C: #define GL_BOOL_VEC4 35673	&gt;</body><body package="OpenGL">BYTE	&lt;C: #define GL_BYTE 5120	&gt;</body><body package="OpenGL">DOUBLE	&lt;C: #define GL_DOUBLE 5130	&gt;</body><body package="OpenGL">FLOAT	&lt;C: #define GL_FLOAT 5126	&gt;</body><body package="OpenGL">FLOAT_MAT2	&lt;C: #define GL_FLOAT_MAT2 35674	&gt;</body><body package="OpenGL">FLOAT_MAT2x3	&lt;C: #define GL_FLOAT_MAT2x3 35685	&gt;</body><body package="OpenGL">FLOAT_MAT2x4	&lt;C: #define GL_FLOAT_MAT2x4 35686	&gt;</body><body package="OpenGL">FLOAT_MAT3	&lt;C: #define GL_FLOAT_MAT3 35675	&gt;</body><body package="OpenGL">FLOAT_MAT3x2	&lt;C: #define GL_FLOAT_MAT3x2 35687	&gt;</body><body package="OpenGL">FLOAT_MAT3x4	&lt;C: #define GL_FLOAT_MAT3x4 35688	&gt;</body><body package="OpenGL">FLOAT_MAT4	&lt;C: #define GL_FLOAT_MAT4 35676	&gt;</body><body package="OpenGL">FLOAT_MAT4x2	&lt;C: #define GL_FLOAT_MAT4x2 35689	&gt;</body><body package="OpenGL">FLOAT_MAT4x3	&lt;C: #define GL_FLOAT_MAT4x3 35690	&gt;</body><body package="OpenGL">FLOAT_VEC2	&lt;C: #define GL_FLOAT_VEC2 35664	&gt;</body><body package="OpenGL">FLOAT_VEC3	&lt;C: #define GL_FLOAT_VEC3 35665	&gt;</body><body package="OpenGL">FLOAT_VEC4	&lt;C: #define GL_FLOAT_VEC4 35666	&gt;</body><body package="OpenGL">HALF_FLOAT_ARB	&lt;C: #define GL_HALF_FLOAT_ARB 5131	&gt;</body><body package="OpenGL">INT	&lt;C: #define GL_INT 5124	&gt;</body><body package="OpenGL">INT_SAMPLER_1D_ARRAY_EXT	&lt;C: #define GL_INT_SAMPLER_1D_ARRAY_EXT 36302	&gt;</body><body package="OpenGL">INT_SAMPLER_1D_EXT	&lt;C: #define GL_INT_SAMPLER_1D_EXT 36297	&gt;</body><body package="OpenGL">INT_SAMPLER_2D_ARRAY_EXT	&lt;C: #define GL_INT_SAMPLER_2D_ARRAY_EXT 36303	&gt;</body><body package="OpenGL">INT_SAMPLER_2D_EXT	&lt;C: #define GL_INT_SAMPLER_2D_EXT 36298	&gt;</body><body package="OpenGL">INT_SAMPLER_2D_RECT_EXT	&lt;C: #define GL_INT_SAMPLER_2D_RECT_EXT 36301	&gt;</body><body package="OpenGL">INT_SAMPLER_3D_EXT	&lt;C: #define GL_INT_SAMPLER_3D_EXT 36299	&gt;</body><body package="OpenGL">INT_SAMPLER_BUFFER_EXT	&lt;C: #define GL_INT_SAMPLER_BUFFER_EXT 36304	&gt;</body><body package="OpenGL">INT_SAMPLER_CUBE_EXT	&lt;C: #define GL_INT_SAMPLER_CUBE_EXT 36300	&gt;</body><body package="OpenGL">INT_VEC2	&lt;C: #define GL_INT_VEC2 35667	&gt;</body><body package="OpenGL">INT_VEC3	&lt;C: #define GL_INT_VEC3 35668	&gt;</body><body package="OpenGL">INT_VEC4	&lt;C: #define GL_INT_VEC4 35669	&gt;</body><body package="OpenGL">SAMPLER_1D	&lt;C: #define GL_SAMPLER_1D 35677	&gt;</body><body package="OpenGL">SAMPLER_1D_ARRAY_EXT	&lt;C: #define GL_SAMPLER_1D_ARRAY_EXT 36288	&gt;</body><body package="OpenGL">SAMPLER_1D_ARRAY_SHADOW_EXT	&lt;C: #define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 36291	&gt;</body><body package="OpenGL">SAMPLER_1D_SHADOW	&lt;C: #define GL_SAMPLER_1D_SHADOW 35681	&gt;</body><body package="OpenGL">SAMPLER_2D	&lt;C: #define GL_SAMPLER_2D 35678	&gt;</body><body package="OpenGL">SAMPLER_2D_ARRAY_EXT	&lt;C: #define GL_SAMPLER_2D_ARRAY_EXT 36289	&gt;</body><body package="OpenGL">SAMPLER_2D_ARRAY_SHADOW_EXT	&lt;C: #define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 36292	&gt;</body><body package="OpenGL">SAMPLER_2D_SHADOW	&lt;C: #define GL_SAMPLER_2D_SHADOW 35682	&gt;</body><body package="OpenGL">SAMPLER_3D	&lt;C: #define GL_SAMPLER_3D 35679	&gt;</body><body package="OpenGL">SAMPLER_BUFFER_EXT	&lt;C: #define GL_SAMPLER_BUFFER_EXT 36290	&gt;</body><body package="OpenGL">SAMPLER_CUBE	&lt;C: #define GL_SAMPLER_CUBE 35680	&gt;</body><body package="OpenGL">SAMPLER_CUBE_SHADOW_EXT	&lt;C: #define GL_SAMPLER_CUBE_SHADOW_EXT 36293	&gt;</body><body package="OpenGL">SHORT	&lt;C: #define GL_SHORT 5122	&gt;</body><body package="OpenGL">UNSIGNED_BYTE	&lt;C: #define GL_UNSIGNED_BYTE 5121	&gt;</body><body package="OpenGL">UNSIGNED_INT	&lt;C: #define GL_UNSIGNED_INT 5125	&gt;</body><body package="OpenGL">UNSIGNED_INT_24_8_EXT	&lt;C: #define GL_UNSIGNED_INT_24_8_EXT 34042	&gt;</body><body package="OpenGL">UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 36310	&gt;</body><body package="OpenGL">UNSIGNED_INT_SAMPLER_1D_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_1D_EXT 36305	&gt;</body><body package="OpenGL">UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 36311	&gt;</body><body package="OpenGL">UNSIGNED_INT_SAMPLER_2D_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_2D_EXT 36306	&gt;</body><body package="OpenGL">UNSIGNED_INT_SAMPLER_2D_RECT_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 36309	&gt;</body><body package="OpenGL">UNSIGNED_INT_SAMPLER_3D_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_3D_EXT 36307	&gt;</body><body package="OpenGL">UNSIGNED_INT_SAMPLER_BUFFER_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 36312	&gt;</body><body package="OpenGL">UNSIGNED_INT_SAMPLER_CUBE_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 36308	&gt;</body><body package="OpenGL">UNSIGNED_INT_VEC2_EXT	&lt;C: #define GL_UNSIGNED_INT_VEC2_EXT 36294	&gt;</body><body package="OpenGL">UNSIGNED_INT_VEC3_EXT	&lt;C: #define GL_UNSIGNED_INT_VEC3_EXT 36295	&gt;</body><body package="OpenGL">UNSIGNED_INT_VEC4_EXT	&lt;C: #define GL_UNSIGNED_INT_VEC4_EXT 36296	&gt;</body><body package="OpenGL">UNSIGNED_NORMALIZED_ARB	&lt;C: #define GL_UNSIGNED_NORMALIZED_ARB 35863	&gt;</body><body package="OpenGL">UNSIGNED_SHORT	&lt;C: #define GL_UNSIGNED_SHORT 5123	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define booleans</category><body package="OpenGL">FALSE	&lt;C: #define GL_FALSE 0	&gt;</body><body package="OpenGL">TRUE	&lt;C: #define GL_TRUE 1	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define miscellaneous</category><body package="OpenGL">DITHER	&lt;C: #define GL_DITHER 3024	&gt;</body><body package="OpenGL">DOUBLEBUFFER	&lt;C: #define GL_DOUBLEBUFFER 3122	&gt;</body><body package="OpenGL">MAX_TEXTURE_LOD_BIAS	&lt;C: #define GL_MAX_TEXTURE_LOD_BIAS 34045	&gt;</body><body package="OpenGL">MAX_VARYING_FLOATS	&lt;C: #define GL_MAX_VARYING_FLOATS 35659	&gt;</body><body package="OpenGL">STEREO	&lt;C: #define GL_STEREO 3123	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>define vertex arrays</category><body package="OpenGL">VERTEX_ATTRIB_ARRAY_INTEGER_EXT	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 35069	&gt;</body><body package="OpenGL">VERTEX_ATTRIB_ARRAY_POINTER	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_POINTER 34373	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>defines</category><body package="OpenGL">GL_ABGR_EXT	&lt;C: #define GL_ABGR_EXT 32768	&gt;</body><body package="OpenGL">GL_ACTIVE_ATTRIBUTES	&lt;C: #define GL_ACTIVE_ATTRIBUTES 35721	&gt;</body><body package="OpenGL">GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	&lt;C: #define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 35722	&gt;</body><body package="OpenGL">GL_ACTIVE_TEXTURE	&lt;C: #define GL_ACTIVE_TEXTURE 34016	&gt;</body><body package="OpenGL">GL_ACTIVE_UNIFORMS	&lt;C: #define GL_ACTIVE_UNIFORMS 35718	&gt;</body><body package="OpenGL">GL_ACTIVE_UNIFORM_MAX_LENGTH	&lt;C: #define GL_ACTIVE_UNIFORM_MAX_LENGTH 35719	&gt;</body><body package="OpenGL">GL_ADD	&lt;C: #define GL_ADD 260	&gt;</body><body package="OpenGL">GL_ADD_SIGNED	&lt;C: #define GL_ADD_SIGNED 34164	&gt;</body><body package="OpenGL">GL_ALIASED_LINE_WIDTH_RANGE	&lt;C: #define GL_ALIASED_LINE_WIDTH_RANGE 33902	&gt;</body><body package="OpenGL">GL_ALIASED_POINT_SIZE_RANGE	&lt;C: #define GL_ALIASED_POINT_SIZE_RANGE 33901	&gt;</body><body package="OpenGL">GL_ALPHA	&lt;C: #define GL_ALPHA 6406	&gt;</body><body package="OpenGL">GL_ALPHA12	&lt;C: #define GL_ALPHA12 32829	&gt;</body><body package="OpenGL">GL_ALPHA16	&lt;C: #define GL_ALPHA16 32830	&gt;</body><body package="OpenGL">GL_ALPHA16F_ARB	&lt;C: #define GL_ALPHA16F_ARB 34844	&gt;</body><body package="OpenGL">GL_ALPHA16I_EXT	&lt;C: #define GL_ALPHA16I_EXT 36234	&gt;</body><body package="OpenGL">GL_ALPHA16UI_EXT	&lt;C: #define GL_ALPHA16UI_EXT 36216	&gt;</body><body package="OpenGL">GL_ALPHA32F_ARB	&lt;C: #define GL_ALPHA32F_ARB 34838	&gt;</body><body package="OpenGL">GL_ALPHA32I_EXT	&lt;C: #define GL_ALPHA32I_EXT 36228	&gt;</body><body package="OpenGL">GL_ALPHA32UI_EXT	&lt;C: #define GL_ALPHA32UI_EXT 36210	&gt;</body><body package="OpenGL">GL_ALPHA4	&lt;C: #define GL_ALPHA4 32827	&gt;</body><body package="OpenGL">GL_ALPHA8	&lt;C: #define GL_ALPHA8 32828	&gt;</body><body package="OpenGL">GL_ALPHA8I_EXT	&lt;C: #define GL_ALPHA8I_EXT 36240	&gt;</body><body package="OpenGL">GL_ALPHA8UI_EXT	&lt;C: #define GL_ALPHA8UI_EXT 36222	&gt;</body><body package="OpenGL">GL_ALPHA_INTEGER_EXT	&lt;C: #define GL_ALPHA_INTEGER_EXT 36247	&gt;</body><body package="OpenGL">GL_ALPHA_SCALE	&lt;C: #define GL_ALPHA_SCALE 3356	&gt;</body><body package="OpenGL">GL_ALWAYS	&lt;C: #define GL_ALWAYS 519	&gt;</body><body package="OpenGL">GL_AND	&lt;C: #define GL_AND 5377	&gt;</body><body package="OpenGL">GL_AND_INVERTED	&lt;C: #define GL_AND_INVERTED 5380	&gt;</body><body package="OpenGL">GL_AND_REVERSE	&lt;C: #define GL_AND_REVERSE 5378	&gt;</body><body package="OpenGL">GL_ARRAY_BUFFER	&lt;C: #define GL_ARRAY_BUFFER 34962	&gt;</body><body package="OpenGL">GL_ARRAY_ELEMENT_LOCK_COUNT_EXT	&lt;C: #define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 33193	&gt;</body><body package="OpenGL">GL_ARRAY_ELEMENT_LOCK_FIRST_EXT	&lt;C: #define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 33192	&gt;</body><body package="OpenGL">GL_ARRAY_REV_COMPS_IN_4_BYTES_ATI	&lt;C: #define GL_ARRAY_REV_COMPS_IN_4_BYTES_ATI 35196	&gt;</body><body package="OpenGL">GL_ATTACHED_SHADERS	&lt;C: #define GL_ATTACHED_SHADERS 35717	&gt;</body><body package="OpenGL">GL_AUX0	&lt;C: #define GL_AUX0 1033	&gt;</body><body package="OpenGL">GL_AUX1	&lt;C: #define GL_AUX1 1034	&gt;</body><body package="OpenGL">GL_AUX2	&lt;C: #define GL_AUX2 1035	&gt;</body><body package="OpenGL">GL_AUX3	&lt;C: #define GL_AUX3 1036	&gt;</body><body package="OpenGL">GL_AUX_BUFFERS	&lt;C: #define GL_AUX_BUFFERS 3072	&gt;</body><body package="OpenGL">GL_AUX_DEPTH_STENCIL_APPLE	&lt;C: #define GL_AUX_DEPTH_STENCIL_APPLE 35348	&gt;</body><body package="OpenGL">GL_BACK	&lt;C: #define GL_BACK 1029	&gt;</body><body package="OpenGL">GL_BACK_LEFT	&lt;C: #define GL_BACK_LEFT 1026	&gt;</body><body package="OpenGL">GL_BACK_RIGHT	&lt;C: #define GL_BACK_RIGHT 1027	&gt;</body><body package="OpenGL">GL_BGR	&lt;C: #define GL_BGR 32992	&gt;</body><body package="OpenGL">GL_BGRA	&lt;C: #define GL_BGRA 32993	&gt;</body><body package="OpenGL">GL_BGRA_INTEGER_EXT	&lt;C: #define GL_BGRA_INTEGER_EXT 36251	&gt;</body><body package="OpenGL">GL_BGR_INTEGER_EXT	&lt;C: #define GL_BGR_INTEGER_EXT 36250	&gt;</body><body package="OpenGL">GL_BLEND	&lt;C: #define GL_BLEND 3042	&gt;</body><body package="OpenGL">GL_BLEND_COLOR	&lt;C: #define GL_BLEND_COLOR 32773	&gt;</body><body package="OpenGL">GL_BLEND_DST_ALPHA	&lt;C: #define GL_BLEND_DST_ALPHA 32970	&gt;</body><body package="OpenGL">GL_BLEND_DST_RGB	&lt;C: #define GL_BLEND_DST_RGB 32968	&gt;</body><body package="OpenGL">GL_BLEND_EQUATION_ALPHA	&lt;C: #define GL_BLEND_EQUATION_ALPHA 34877	&gt;</body><body package="OpenGL">GL_BLEND_EQUATION_RGB	&lt;C: #define GL_BLEND_EQUATION_RGB 32777	&gt;</body><body package="OpenGL">GL_BLEND_SRC_ALPHA	&lt;C: #define GL_BLEND_SRC_ALPHA 32971	&gt;</body><body package="OpenGL">GL_BLEND_SRC_RGB	&lt;C: #define GL_BLEND_SRC_RGB 32969	&gt;</body><body package="OpenGL">GL_BLUE	&lt;C: #define GL_BLUE 6405	&gt;</body><body package="OpenGL">GL_BLUE_INTEGER_EXT	&lt;C: #define GL_BLUE_INTEGER_EXT 36246	&gt;</body><body package="OpenGL">GL_BOOL	&lt;C: #define GL_BOOL 35670	&gt;</body><body package="OpenGL">GL_BOOL_VEC2	&lt;C: #define GL_BOOL_VEC2 35671	&gt;</body><body package="OpenGL">GL_BOOL_VEC3	&lt;C: #define GL_BOOL_VEC3 35672	&gt;</body><body package="OpenGL">GL_BOOL_VEC4	&lt;C: #define GL_BOOL_VEC4 35673	&gt;</body><body package="OpenGL">GL_BUFFER_ACCESS	&lt;C: #define GL_BUFFER_ACCESS 35003	&gt;</body><body package="OpenGL">GL_BUFFER_FLUSHING_UNMAP_APPLE	&lt;C: #define GL_BUFFER_FLUSHING_UNMAP_APPLE 35347	&gt;</body><body package="OpenGL">GL_BUFFER_MAPPED	&lt;C: #define GL_BUFFER_MAPPED 35004	&gt;</body><body package="OpenGL">GL_BUFFER_MAP_POINTER	&lt;C: #define GL_BUFFER_MAP_POINTER 35005	&gt;</body><body package="OpenGL">GL_BUFFER_OBJECT_APPLE	&lt;C: #define GL_BUFFER_OBJECT_APPLE 34227	&gt;</body><body package="OpenGL">GL_BUFFER_SERIALIZED_MODIFY_APPLE	&lt;C: #define GL_BUFFER_SERIALIZED_MODIFY_APPLE 35346	&gt;</body><body package="OpenGL">GL_BUFFER_SIZE	&lt;C: #define GL_BUFFER_SIZE 34660	&gt;</body><body package="OpenGL">GL_BUFFER_USAGE	&lt;C: #define GL_BUFFER_USAGE 34661	&gt;</body><body package="OpenGL">GL_BYTE	&lt;C: #define GL_BYTE 5120	&gt;</body><body package="OpenGL">GL_CCW	&lt;C: #define GL_CCW 2305	&gt;</body><body package="OpenGL">GL_CLAMP_TO_EDGE	&lt;C: #define GL_CLAMP_TO_EDGE 33071	&gt;</body><body package="OpenGL">GL_CLEAR	&lt;C: #define GL_CLEAR 5376	&gt;</body><body package="OpenGL">GL_CLIP_DISTANCE0	&lt;C: #define GL_CLIP_DISTANCE0 12288	&gt;</body><body package="OpenGL">GL_CLIP_DISTANCE1	&lt;C: #define GL_CLIP_DISTANCE1 12289	&gt;</body><body package="OpenGL">GL_CLIP_DISTANCE2	&lt;C: #define GL_CLIP_DISTANCE2 12290	&gt;</body><body package="OpenGL">GL_CLIP_DISTANCE3	&lt;C: #define GL_CLIP_DISTANCE3 12291	&gt;</body><body package="OpenGL">GL_CLIP_DISTANCE4	&lt;C: #define GL_CLIP_DISTANCE4 12292	&gt;</body><body package="OpenGL">GL_CLIP_DISTANCE5	&lt;C: #define GL_CLIP_DISTANCE5 12293	&gt;</body><body package="OpenGL">GL_CLIP_VOLUME_CLIPPING_HINT_EXT	&lt;C: #define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 33008	&gt;</body><body package="OpenGL">GL_COLOR	&lt;C: #define GL_COLOR 6144	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT0_EXT	&lt;C: #define GL_COLOR_ATTACHMENT0_EXT 36064	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT10_EXT	&lt;C: #define GL_COLOR_ATTACHMENT10_EXT 36074	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT11_EXT	&lt;C: #define GL_COLOR_ATTACHMENT11_EXT 36075	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT12_EXT	&lt;C: #define GL_COLOR_ATTACHMENT12_EXT 36076	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT13_EXT	&lt;C: #define GL_COLOR_ATTACHMENT13_EXT 36077	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT14_EXT	&lt;C: #define GL_COLOR_ATTACHMENT14_EXT 36078	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT15_EXT	&lt;C: #define GL_COLOR_ATTACHMENT15_EXT 36079	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT1_EXT	&lt;C: #define GL_COLOR_ATTACHMENT1_EXT 36065	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT2_EXT	&lt;C: #define GL_COLOR_ATTACHMENT2_EXT 36066	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT3_EXT	&lt;C: #define GL_COLOR_ATTACHMENT3_EXT 36067	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT4_EXT	&lt;C: #define GL_COLOR_ATTACHMENT4_EXT 36068	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT5_EXT	&lt;C: #define GL_COLOR_ATTACHMENT5_EXT 36069	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT6_EXT	&lt;C: #define GL_COLOR_ATTACHMENT6_EXT 36070	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT7_EXT	&lt;C: #define GL_COLOR_ATTACHMENT7_EXT 36071	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT8_EXT	&lt;C: #define GL_COLOR_ATTACHMENT8_EXT 36072	&gt;</body><body package="OpenGL">GL_COLOR_ATTACHMENT9_EXT	&lt;C: #define GL_COLOR_ATTACHMENT9_EXT 36073	&gt;</body><body package="OpenGL">GL_COLOR_BUFFER_BIT	&lt;C: #define GL_COLOR_BUFFER_BIT 0x00004000	&gt;</body><body package="OpenGL">GL_COLOR_CLEAR_VALUE	&lt;C: #define GL_COLOR_CLEAR_VALUE 3106	&gt;</body><body package="OpenGL">GL_COLOR_LOGIC_OP	&lt;C: #define GL_COLOR_LOGIC_OP 3058	&gt;</body><body package="OpenGL">GL_COLOR_WRITEMASK	&lt;C: #define GL_COLOR_WRITEMASK 3107	&gt;</body><body package="OpenGL">GL_COMBINE	&lt;C: #define GL_COMBINE 34160	&gt;</body><body package="OpenGL">GL_COMBINE_ALPHA	&lt;C: #define GL_COMBINE_ALPHA 34162	&gt;</body><body package="OpenGL">GL_COMBINE_RGB	&lt;C: #define GL_COMBINE_RGB 34161	&gt;</body><body package="OpenGL">GL_COMPARE_REF_TO_TEXTURE	&lt;C: #define GL_COMPARE_REF_TO_TEXTURE 34894	&gt;</body><body package="OpenGL">GL_COMPILE_STATUS	&lt;C: #define GL_COMPILE_STATUS 35713	&gt;</body><body package="OpenGL">GL_COMPRESSED_ALPHA	&lt;C: #define GL_COMPRESSED_ALPHA 34025	&gt;</body><body package="OpenGL">GL_COMPRESSED_RGB	&lt;C: #define GL_COMPRESSED_RGB 34029	&gt;</body><body package="OpenGL">GL_COMPRESSED_RGBA	&lt;C: #define GL_COMPRESSED_RGBA 34030	&gt;</body><body package="OpenGL">GL_COMPRESSED_RGBA_S3TC_DXT1_EXT	&lt;C: #define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 33777	&gt;</body><body package="OpenGL">GL_COMPRESSED_RGBA_S3TC_DXT3_EXT	&lt;C: #define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 33778	&gt;</body><body package="OpenGL">GL_COMPRESSED_RGBA_S3TC_DXT5_EXT	&lt;C: #define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 33779	&gt;</body><body package="OpenGL">GL_COMPRESSED_RGB_S3TC_DXT1_EXT	&lt;C: #define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 33776	&gt;</body><body package="OpenGL">GL_COMPRESSED_SRGB	&lt;C: #define GL_COMPRESSED_SRGB 35912	&gt;</body><body package="OpenGL">GL_COMPRESSED_SRGB_ALPHA	&lt;C: #define GL_COMPRESSED_SRGB_ALPHA 35913	&gt;</body><body package="OpenGL">GL_COMPRESSED_TEXTURE_FORMATS	&lt;C: #define GL_COMPRESSED_TEXTURE_FORMATS 34467	&gt;</body><body package="OpenGL">GL_CONSTANT	&lt;C: #define GL_CONSTANT 34166	&gt;</body><body package="OpenGL">GL_CONSTANT_ALPHA	&lt;C: #define GL_CONSTANT_ALPHA 32771	&gt;</body><body package="OpenGL">GL_CONSTANT_COLOR	&lt;C: #define GL_CONSTANT_COLOR 32769	&gt;</body><body package="OpenGL">GL_CONST_EYE_NV	&lt;C: #define GL_CONST_EYE_NV 34533	&gt;</body><body package="OpenGL">GL_COORD_REPLACE	&lt;C: #define GL_COORD_REPLACE 34914	&gt;</body><body package="OpenGL">GL_COPY	&lt;C: #define GL_COPY 5379	&gt;</body><body package="OpenGL">GL_COPY_INVERTED	&lt;C: #define GL_COPY_INVERTED 5388	&gt;</body><body package="OpenGL">GL_CULL_FACE	&lt;C: #define GL_CULL_FACE 2884	&gt;</body><body package="OpenGL">GL_CULL_FACE_MODE	&lt;C: #define GL_CULL_FACE_MODE 2885	&gt;</body><body package="OpenGL">GL_CULL_FRAGMENT_NV	&lt;C: #define GL_CULL_FRAGMENT_NV 34535	&gt;</body><body package="OpenGL">GL_CULL_MODES_NV	&lt;C: #define GL_CULL_MODES_NV 34528	&gt;</body><body package="OpenGL">GL_CURRENT_PROGRAM	&lt;C: #define GL_CURRENT_PROGRAM 35725	&gt;</body><body package="OpenGL">GL_CURRENT_QUERY	&lt;C: #define GL_CURRENT_QUERY 34917	&gt;</body><body package="OpenGL">GL_CURRENT_VERTEX_ATTRIB	&lt;C: #define GL_CURRENT_VERTEX_ATTRIB 34342	&gt;</body><body package="OpenGL">GL_CW	&lt;C: #define GL_CW 2304	&gt;</body><body package="OpenGL">GL_DECAL	&lt;C: #define GL_DECAL 8449	&gt;</body><body package="OpenGL">GL_DECR	&lt;C: #define GL_DECR 7683	&gt;</body><body package="OpenGL">GL_DECR_WRAP	&lt;C: #define GL_DECR_WRAP 34056	&gt;</body><body package="OpenGL">GL_DELETE_STATUS	&lt;C: #define GL_DELETE_STATUS 35712	&gt;</body><body package="OpenGL">GL_DEPENDENT_AR_TEXTURE_2D_NV	&lt;C: #define GL_DEPENDENT_AR_TEXTURE_2D_NV 34537	&gt;</body><body package="OpenGL">GL_DEPENDENT_GB_TEXTURE_2D_NV	&lt;C: #define GL_DEPENDENT_GB_TEXTURE_2D_NV 34538	&gt;</body><body package="OpenGL">GL_DEPENDENT_HILO_TEXTURE_2D_NV	&lt;C: #define GL_DEPENDENT_HILO_TEXTURE_2D_NV 34904	&gt;</body><body package="OpenGL">GL_DEPENDENT_RGB_TEXTURE_3D_NV	&lt;C: #define GL_DEPENDENT_RGB_TEXTURE_3D_NV 34905	&gt;</body><body package="OpenGL">GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV	&lt;C: #define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 34906	&gt;</body><body package="OpenGL">GL_DEPTH	&lt;C: #define GL_DEPTH 6145	&gt;</body><body package="OpenGL">GL_DEPTH24_STENCIL8_EXT	&lt;C: #define GL_DEPTH24_STENCIL8_EXT 35056	&gt;</body><body package="OpenGL">GL_DEPTH_ATTACHMENT_EXT	&lt;C: #define GL_DEPTH_ATTACHMENT_EXT 36096	&gt;</body><body package="OpenGL">GL_DEPTH_BOUNDS_EXT	&lt;C: #define GL_DEPTH_BOUNDS_EXT 34961	&gt;</body><body package="OpenGL">GL_DEPTH_BOUNDS_TEST_EXT	&lt;C: #define GL_DEPTH_BOUNDS_TEST_EXT 34960	&gt;</body><body package="OpenGL">GL_DEPTH_BUFFER_BIT	&lt;C: #define GL_DEPTH_BUFFER_BIT 0x00000100	&gt;</body><body package="OpenGL">GL_DEPTH_CLAMP_NV	&lt;C: #define GL_DEPTH_CLAMP_NV 34383	&gt;</body><body package="OpenGL">GL_DEPTH_CLEAR_VALUE	&lt;C: #define GL_DEPTH_CLEAR_VALUE 2931	&gt;</body><body package="OpenGL">GL_DEPTH_COMPONENT	&lt;C: #define GL_DEPTH_COMPONENT 6402	&gt;</body><body package="OpenGL">GL_DEPTH_COMPONENT16	&lt;C: #define GL_DEPTH_COMPONENT16 33189	&gt;</body><body package="OpenGL">GL_DEPTH_COMPONENT24	&lt;C: #define GL_DEPTH_COMPONENT24 33190	&gt;</body><body package="OpenGL">GL_DEPTH_COMPONENT32	&lt;C: #define GL_DEPTH_COMPONENT32 33191	&gt;</body><body package="OpenGL">GL_DEPTH_FUNC	&lt;C: #define GL_DEPTH_FUNC 2932	&gt;</body><body package="OpenGL">GL_DEPTH_RANGE	&lt;C: #define GL_DEPTH_RANGE 2928	&gt;</body><body package="OpenGL">GL_DEPTH_STENCIL_EXT	&lt;C: #define GL_DEPTH_STENCIL_EXT 34041	&gt;</body><body package="OpenGL">GL_DEPTH_TEST	&lt;C: #define GL_DEPTH_TEST 2929	&gt;</body><body package="OpenGL">GL_DEPTH_WRITEMASK	&lt;C: #define GL_DEPTH_WRITEMASK 2930	&gt;</body><body package="OpenGL">GL_DITHER	&lt;C: #define GL_DITHER 3024	&gt;</body><body package="OpenGL">GL_DONT_CARE	&lt;C: #define GL_DONT_CARE 4352	&gt;</body><body package="OpenGL">GL_DOT3_RGB	&lt;C: #define GL_DOT3_RGB 34478	&gt;</body><body package="OpenGL">GL_DOT3_RGBA	&lt;C: #define GL_DOT3_RGBA 34479	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV	&lt;C: #define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 34909	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV	&lt;C: #define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 34547	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_DEPTH_REPLACE_NV	&lt;C: #define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 34541	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV	&lt;C: #define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 34545	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_NV	&lt;C: #define GL_DOT_PRODUCT_NV 34540	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_PASS_THROUGH_NV	&lt;C: #define GL_DOT_PRODUCT_PASS_THROUGH_NV 34907	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV	&lt;C: #define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 34546	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_TEXTURE_1D_NV	&lt;C: #define GL_DOT_PRODUCT_TEXTURE_1D_NV 34908	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_TEXTURE_2D_NV	&lt;C: #define GL_DOT_PRODUCT_TEXTURE_2D_NV 34542	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_TEXTURE_3D_NV	&lt;C: #define GL_DOT_PRODUCT_TEXTURE_3D_NV 34543	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV	&lt;C: #define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 34544	&gt;</body><body package="OpenGL">GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV	&lt;C: #define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 34382	&gt;</body><body package="OpenGL">GL_DOUBLE	&lt;C: #define GL_DOUBLE 5130	&gt;</body><body package="OpenGL">GL_DOUBLEBUFFER	&lt;C: #define GL_DOUBLEBUFFER 3122	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER	&lt;C: #define GL_DRAW_BUFFER 3073	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER0	&lt;C: #define GL_DRAW_BUFFER0 34853	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER1	&lt;C: #define GL_DRAW_BUFFER1 34854	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER10	&lt;C: #define GL_DRAW_BUFFER10 34863	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER11	&lt;C: #define GL_DRAW_BUFFER11 34864	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER12	&lt;C: #define GL_DRAW_BUFFER12 34865	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER13	&lt;C: #define GL_DRAW_BUFFER13 34866	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER14	&lt;C: #define GL_DRAW_BUFFER14 34867	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER15	&lt;C: #define GL_DRAW_BUFFER15 34868	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER2	&lt;C: #define GL_DRAW_BUFFER2 34855	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER3	&lt;C: #define GL_DRAW_BUFFER3 34856	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER4	&lt;C: #define GL_DRAW_BUFFER4 34857	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER5	&lt;C: #define GL_DRAW_BUFFER5 34858	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER6	&lt;C: #define GL_DRAW_BUFFER6 34859	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER7	&lt;C: #define GL_DRAW_BUFFER7 34860	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER8	&lt;C: #define GL_DRAW_BUFFER8 34861	&gt;</body><body package="OpenGL">GL_DRAW_BUFFER9	&lt;C: #define GL_DRAW_BUFFER9 34862	&gt;</body><body package="OpenGL">GL_DRAW_FRAMEBUFFER_BINDING_EXT	&lt;C: #define GL_DRAW_FRAMEBUFFER_BINDING_EXT 36006	&gt;</body><body package="OpenGL">GL_DRAW_FRAMEBUFFER_EXT	&lt;C: #define GL_DRAW_FRAMEBUFFER_EXT 36009	&gt;</body><body package="OpenGL">GL_DRAW_PIXELS_APPLE	&lt;C: #define GL_DRAW_PIXELS_APPLE 35338	&gt;</body><body package="OpenGL">GL_DSDT8_MAG8_INTENSITY8_NV	&lt;C: #define GL_DSDT8_MAG8_INTENSITY8_NV 34571	&gt;</body><body package="OpenGL">GL_DSDT8_MAG8_NV	&lt;C: #define GL_DSDT8_MAG8_NV 34570	&gt;</body><body package="OpenGL">GL_DSDT8_NV	&lt;C: #define GL_DSDT8_NV 34569	&gt;</body><body package="OpenGL">GL_DSDT_MAG_INTENSITY_NV	&lt;C: #define GL_DSDT_MAG_INTENSITY_NV 34524	&gt;</body><body package="OpenGL">GL_DSDT_MAG_NV	&lt;C: #define GL_DSDT_MAG_NV 34550	&gt;</body><body package="OpenGL">GL_DSDT_MAG_VIB_NV	&lt;C: #define GL_DSDT_MAG_VIB_NV 34551	&gt;</body><body package="OpenGL">GL_DSDT_NV	&lt;C: #define GL_DSDT_NV 34549	&gt;</body><body package="OpenGL">GL_DST_ALPHA	&lt;C: #define GL_DST_ALPHA 772	&gt;</body><body package="OpenGL">GL_DST_COLOR	&lt;C: #define GL_DST_COLOR 774	&gt;</body><body package="OpenGL">GL_DS_BIAS_NV	&lt;C: #define GL_DS_BIAS_NV 34582	&gt;</body><body package="OpenGL">GL_DS_SCALE_NV	&lt;C: #define GL_DS_SCALE_NV 34576	&gt;</body><body package="OpenGL">GL_DT_BIAS_NV	&lt;C: #define GL_DT_BIAS_NV 34583	&gt;</body><body package="OpenGL">GL_DT_SCALE_NV	&lt;C: #define GL_DT_SCALE_NV 34577	&gt;</body><body package="OpenGL">GL_DYNAMIC_COPY	&lt;C: #define GL_DYNAMIC_COPY 35050	&gt;</body><body package="OpenGL">GL_DYNAMIC_DRAW	&lt;C: #define GL_DYNAMIC_DRAW 35048	&gt;</body><body package="OpenGL">GL_DYNAMIC_READ	&lt;C: #define GL_DYNAMIC_READ 35049	&gt;</body><body package="OpenGL">GL_ELEMENT_ARRAY_BUFFER	&lt;C: #define GL_ELEMENT_ARRAY_BUFFER 34963	&gt;</body><body package="OpenGL">GL_EQUAL	&lt;C: #define GL_EQUAL 514	&gt;</body><body package="OpenGL">GL_EQUIV	&lt;C: #define GL_EQUIV 5385	&gt;</body><body package="OpenGL">GL_EXTENSIONS	&lt;C: #define GL_EXTENSIONS 7939	&gt;</body><body package="OpenGL">GL_FALSE	&lt;C: #define GL_FALSE 0	&gt;</body><body package="OpenGL">GL_FASTEST	&lt;C: #define GL_FASTEST 4353	&gt;</body><body package="OpenGL">GL_FENCE_APPLE	&lt;C: #define GL_FENCE_APPLE 35339	&gt;</body><body package="OpenGL">GL_FILL	&lt;C: #define GL_FILL 6914	&gt;</body><body package="OpenGL">GL_FLAT	&lt;C: #define GL_FLAT 7424	&gt;</body><body package="OpenGL">GL_FLOAT	&lt;C: #define GL_FLOAT 5126	&gt;</body><body package="OpenGL">GL_FLOAT_MAT2	&lt;C: #define GL_FLOAT_MAT2 35674	&gt;</body><body package="OpenGL">GL_FLOAT_MAT2x3	&lt;C: #define GL_FLOAT_MAT2x3 35685	&gt;</body><body package="OpenGL">GL_FLOAT_MAT2x4	&lt;C: #define GL_FLOAT_MAT2x4 35686	&gt;</body><body package="OpenGL">GL_FLOAT_MAT3	&lt;C: #define GL_FLOAT_MAT3 35675	&gt;</body><body package="OpenGL">GL_FLOAT_MAT3x2	&lt;C: #define GL_FLOAT_MAT3x2 35687	&gt;</body><body package="OpenGL">GL_FLOAT_MAT3x4	&lt;C: #define GL_FLOAT_MAT3x4 35688	&gt;</body><body package="OpenGL">GL_FLOAT_MAT4	&lt;C: #define GL_FLOAT_MAT4 35676	&gt;</body><body package="OpenGL">GL_FLOAT_MAT4x2	&lt;C: #define GL_FLOAT_MAT4x2 35689	&gt;</body><body package="OpenGL">GL_FLOAT_MAT4x3	&lt;C: #define GL_FLOAT_MAT4x3 35690	&gt;</body><body package="OpenGL">GL_FLOAT_VEC2	&lt;C: #define GL_FLOAT_VEC2 35664	&gt;</body><body package="OpenGL">GL_FLOAT_VEC3	&lt;C: #define GL_FLOAT_VEC3 35665	&gt;</body><body package="OpenGL">GL_FLOAT_VEC4	&lt;C: #define GL_FLOAT_VEC4 35666	&gt;</body><body package="OpenGL">GL_FORCE_BLUE_TO_ONE_NV	&lt;C: #define GL_FORCE_BLUE_TO_ONE_NV 34912	&gt;</body><body package="OpenGL">GL_FRAGMENT_SHADER	&lt;C: #define GL_FRAGMENT_SHADER 35632	&gt;</body><body package="OpenGL">GL_FRAGMENT_SHADER_DERIVATIVE_HINT	&lt;C: #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 35723	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 36263	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 36049	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 36048	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 36052	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 36051	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 36052	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT	&lt;C: #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 36050	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_BINDING_EXT	&lt;C: #define GL_FRAMEBUFFER_BINDING_EXT 36006	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_COMPLETE_EXT	&lt;C: #define GL_FRAMEBUFFER_COMPLETE_EXT 36053	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_EXT	&lt;C: #define GL_FRAMEBUFFER_EXT 36160	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 36054	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 36057	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 36059	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 36058	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 36265	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 36264	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 36055	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 36182	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT	&lt;C: #define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 36060	&gt;</body><body package="OpenGL">GL_FRAMEBUFFER_UNSUPPORTED_EXT	&lt;C: #define GL_FRAMEBUFFER_UNSUPPORTED_EXT 36061	&gt;</body><body package="OpenGL">GL_FRONT	&lt;C: #define GL_FRONT 1028	&gt;</body><body package="OpenGL">GL_FRONT_AND_BACK	&lt;C: #define GL_FRONT_AND_BACK 1032	&gt;</body><body package="OpenGL">GL_FRONT_FACE	&lt;C: #define GL_FRONT_FACE 2886	&gt;</body><body package="OpenGL">GL_FRONT_LEFT	&lt;C: #define GL_FRONT_LEFT 1024	&gt;</body><body package="OpenGL">GL_FRONT_RIGHT	&lt;C: #define GL_FRONT_RIGHT 1025	&gt;</body><body package="OpenGL">GL_FUNC_ADD	&lt;C: #define GL_FUNC_ADD 32774	&gt;</body><body package="OpenGL">GL_FUNC_REVERSE_SUBTRACT	&lt;C: #define GL_FUNC_REVERSE_SUBTRACT 32779	&gt;</body><body package="OpenGL">GL_FUNC_SUBTRACT	&lt;C: #define GL_FUNC_SUBTRACT 32778	&gt;</body><body package="OpenGL">GL_GEOMETRY_INPUT_TYPE_EXT	&lt;C: #define GL_GEOMETRY_INPUT_TYPE_EXT 36315	&gt;</body><body package="OpenGL">GL_GEOMETRY_OUTPUT_TYPE_EXT	&lt;C: #define GL_GEOMETRY_OUTPUT_TYPE_EXT 36316	&gt;</body><body package="OpenGL">GL_GEOMETRY_SHADER_EXT	&lt;C: #define GL_GEOMETRY_SHADER_EXT 36313	&gt;</body><body package="OpenGL">GL_GEOMETRY_VERTICES_OUT_EXT	&lt;C: #define GL_GEOMETRY_VERTICES_OUT_EXT 36314	&gt;</body><body package="OpenGL">GL_GEQUAL	&lt;C: #define GL_GEQUAL 518	&gt;</body><body package="OpenGL">GL_GREATER	&lt;C: #define GL_GREATER 516	&gt;</body><body package="OpenGL">GL_GREEN	&lt;C: #define GL_GREEN 6404	&gt;</body><body package="OpenGL">GL_GREEN_INTEGER_EXT	&lt;C: #define GL_GREEN_INTEGER_EXT 36245	&gt;</body><body package="OpenGL">GL_HALF_FLOAT_ARB	&lt;C: #define GL_HALF_FLOAT_ARB 5131	&gt;</body><body package="OpenGL">GL_HILO16_NV	&lt;C: #define GL_HILO16_NV 34552	&gt;</body><body package="OpenGL">GL_HILO8_NV	&lt;C: #define GL_HILO8_NV 34910	&gt;</body><body package="OpenGL">GL_HILO_NV	&lt;C: #define GL_HILO_NV 34548	&gt;</body><body package="OpenGL">GL_HI_BIAS_NV	&lt;C: #define GL_HI_BIAS_NV 34580	&gt;</body><body package="OpenGL">GL_HI_SCALE_NV	&lt;C: #define GL_HI_SCALE_NV 34574	&gt;</body><body package="OpenGL">GL_INCR	&lt;C: #define GL_INCR 7682	&gt;</body><body package="OpenGL">GL_INCR_WRAP	&lt;C: #define GL_INCR_WRAP 34055	&gt;</body><body package="OpenGL">GL_INFO_LOG_LENGTH	&lt;C: #define GL_INFO_LOG_LENGTH 35716	&gt;</body><body package="OpenGL">GL_INT	&lt;C: #define GL_INT 5124	&gt;</body><body package="OpenGL">GL_INTERLEAVED_ATTRIBS_EXT	&lt;C: #define GL_INTERLEAVED_ATTRIBS_EXT 35980	&gt;</body><body package="OpenGL">GL_INTERPOLATE	&lt;C: #define GL_INTERPOLATE 34165	&gt;</body><body package="OpenGL">GL_INT_SAMPLER_1D_ARRAY_EXT	&lt;C: #define GL_INT_SAMPLER_1D_ARRAY_EXT 36302	&gt;</body><body package="OpenGL">GL_INT_SAMPLER_1D_EXT	&lt;C: #define GL_INT_SAMPLER_1D_EXT 36297	&gt;</body><body package="OpenGL">GL_INT_SAMPLER_2D_ARRAY_EXT	&lt;C: #define GL_INT_SAMPLER_2D_ARRAY_EXT 36303	&gt;</body><body package="OpenGL">GL_INT_SAMPLER_2D_EXT	&lt;C: #define GL_INT_SAMPLER_2D_EXT 36298	&gt;</body><body package="OpenGL">GL_INT_SAMPLER_2D_RECT_EXT	&lt;C: #define GL_INT_SAMPLER_2D_RECT_EXT 36301	&gt;</body><body package="OpenGL">GL_INT_SAMPLER_3D_EXT	&lt;C: #define GL_INT_SAMPLER_3D_EXT 36299	&gt;</body><body package="OpenGL">GL_INT_SAMPLER_BUFFER_EXT	&lt;C: #define GL_INT_SAMPLER_BUFFER_EXT 36304	&gt;</body><body package="OpenGL">GL_INT_SAMPLER_CUBE_EXT	&lt;C: #define GL_INT_SAMPLER_CUBE_EXT 36300	&gt;</body><body package="OpenGL">GL_INT_VEC2	&lt;C: #define GL_INT_VEC2 35667	&gt;</body><body package="OpenGL">GL_INT_VEC3	&lt;C: #define GL_INT_VEC3 35668	&gt;</body><body package="OpenGL">GL_INT_VEC4	&lt;C: #define GL_INT_VEC4 35669	&gt;</body><body package="OpenGL">GL_INVALID_ENUM	&lt;C: #define GL_INVALID_ENUM 1280	&gt;</body><body package="OpenGL">GL_INVALID_FRAMEBUFFER_OPERATION_EXT	&lt;C: #define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 1286	&gt;</body><body package="OpenGL">GL_INVALID_OPERATION	&lt;C: #define GL_INVALID_OPERATION 1282	&gt;</body><body package="OpenGL">GL_INVALID_VALUE	&lt;C: #define GL_INVALID_VALUE 1281	&gt;</body><body package="OpenGL">GL_INVERT	&lt;C: #define GL_INVERT 5386	&gt;</body><body package="OpenGL">GL_KEEP	&lt;C: #define GL_KEEP 7680	&gt;</body><body package="OpenGL">GL_LEFT	&lt;C: #define GL_LEFT 1030	&gt;</body><body package="OpenGL">GL_LEQUAL	&lt;C: #define GL_LEQUAL 515	&gt;</body><body package="OpenGL">GL_LESS	&lt;C: #define GL_LESS 513	&gt;</body><body package="OpenGL">GL_LINE	&lt;C: #define GL_LINE 6913	&gt;</body><body package="OpenGL">GL_LINEAR	&lt;C: #define GL_LINEAR 9729	&gt;</body><body package="OpenGL">GL_LINEAR_MIPMAP_LINEAR	&lt;C: #define GL_LINEAR_MIPMAP_LINEAR 9987	&gt;</body><body package="OpenGL">GL_LINEAR_MIPMAP_NEAREST	&lt;C: #define GL_LINEAR_MIPMAP_NEAREST 9985	&gt;</body><body package="OpenGL">GL_LINES	&lt;C: #define GL_LINES 0x0001	&gt;</body><body package="OpenGL">GL_LINES_ADJACENCY_EXT	&lt;C: #define GL_LINES_ADJACENCY_EXT 10	&gt;</body><body package="OpenGL">GL_LINE_LOOP	&lt;C: #define GL_LINE_LOOP 0x0002	&gt;</body><body package="OpenGL">GL_LINE_SMOOTH	&lt;C: #define GL_LINE_SMOOTH 2848	&gt;</body><body package="OpenGL">GL_LINE_SMOOTH_HINT	&lt;C: #define GL_LINE_SMOOTH_HINT 3154	&gt;</body><body package="OpenGL">GL_LINE_STRIP	&lt;C: #define GL_LINE_STRIP 0x0003	&gt;</body><body package="OpenGL">GL_LINE_STRIP_ADJACENCY_EXT	&lt;C: #define GL_LINE_STRIP_ADJACENCY_EXT 11	&gt;</body><body package="OpenGL">GL_LINE_WIDTH	&lt;C: #define GL_LINE_WIDTH 2849	&gt;</body><body package="OpenGL">GL_LINK_STATUS	&lt;C: #define GL_LINK_STATUS 35714	&gt;</body><body package="OpenGL">GL_LOGIC_OP	&lt;C: #define GL_LOGIC_OP GL_INDEX_LOGIC_OP	&gt;</body><body package="OpenGL">GL_LOGIC_OP_MODE	&lt;C: #define GL_LOGIC_OP_MODE 3056	&gt;</body><body package="OpenGL">GL_LOWER_LEFT	&lt;C: #define GL_LOWER_LEFT 36001	&gt;</body><body package="OpenGL">GL_LO_BIAS_NV	&lt;C: #define GL_LO_BIAS_NV 34581	&gt;</body><body package="OpenGL">GL_LO_SCALE_NV	&lt;C: #define GL_LO_SCALE_NV 34575	&gt;</body><body package="OpenGL">GL_MAGNITUDE_BIAS_NV	&lt;C: #define GL_MAGNITUDE_BIAS_NV 34584	&gt;</body><body package="OpenGL">GL_MAGNITUDE_SCALE_NV	&lt;C: #define GL_MAGNITUDE_SCALE_NV 34578	&gt;</body><body package="OpenGL">GL_MAX	&lt;C: #define GL_MAX 32776	&gt;</body><body package="OpenGL">GL_MAX_3D_TEXTURE_SIZE	&lt;C: #define GL_MAX_3D_TEXTURE_SIZE 32883	&gt;</body><body package="OpenGL">GL_MAX_BINDABLE_UNIFORM_SIZE_EXT	&lt;C: #define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 36333	&gt;</body><body package="OpenGL">GL_MAX_CLIP_DISTANCES	&lt;C: #define GL_MAX_CLIP_DISTANCES 3378	&gt;</body><body package="OpenGL">GL_MAX_COLOR_ATTACHMENTS_EXT	&lt;C: #define GL_MAX_COLOR_ATTACHMENTS_EXT 36063	&gt;</body><body package="OpenGL">GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	&lt;C: #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 35661	&gt;</body><body package="OpenGL">GL_MAX_CUBE_MAP_TEXTURE_SIZE	&lt;C: #define GL_MAX_CUBE_MAP_TEXTURE_SIZE 34076	&gt;</body><body package="OpenGL">GL_MAX_DRAW_BUFFERS	&lt;C: #define GL_MAX_DRAW_BUFFERS 34852	&gt;</body><body package="OpenGL">GL_MAX_ELEMENTS_INDICES	&lt;C: #define GL_MAX_ELEMENTS_INDICES 33001	&gt;</body><body package="OpenGL">GL_MAX_ELEMENTS_VERTICES	&lt;C: #define GL_MAX_ELEMENTS_VERTICES 33000	&gt;</body><body package="OpenGL">GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT	&lt;C: #define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 36323	&gt;</body><body package="OpenGL">GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	&lt;C: #define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 35657	&gt;</body><body package="OpenGL">GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT	&lt;C: #define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 36324	&gt;</body><body package="OpenGL">GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT	&lt;C: #define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 36320	&gt;</body><body package="OpenGL">GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT	&lt;C: #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 35881	&gt;</body><body package="OpenGL">GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT	&lt;C: #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 36321	&gt;</body><body package="OpenGL">GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT	&lt;C: #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 36319	&gt;</body><body package="OpenGL">GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT	&lt;C: #define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 36317	&gt;</body><body package="OpenGL">GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI	&lt;C: #define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 24721	&gt;</body><body package="OpenGL">GL_MAX_PROGRAM_TEXEL_OFFSET_EXT	&lt;C: #define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 35077	&gt;</body><body package="OpenGL">GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB	&lt;C: #define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 34040	&gt;</body><body package="OpenGL">GL_MAX_RENDERBUFFER_SIZE_EXT	&lt;C: #define GL_MAX_RENDERBUFFER_SIZE_EXT 34024	&gt;</body><body package="OpenGL">GL_MAX_SAMPLES_EXT	&lt;C: #define GL_MAX_SAMPLES_EXT 36183	&gt;</body><body package="OpenGL">GL_MAX_TEXTURE_COORDS	&lt;C: #define GL_MAX_TEXTURE_COORDS 34929	&gt;</body><body package="OpenGL">GL_MAX_TEXTURE_IMAGE_UNITS	&lt;C: #define GL_MAX_TEXTURE_IMAGE_UNITS 34930	&gt;</body><body package="OpenGL">GL_MAX_TEXTURE_LOD_BIAS	&lt;C: #define GL_MAX_TEXTURE_LOD_BIAS 34045	&gt;</body><body package="OpenGL">GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT	&lt;C: #define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 34047	&gt;</body><body package="OpenGL">GL_MAX_TEXTURE_SIZE	&lt;C: #define GL_MAX_TEXTURE_SIZE 3379	&gt;</body><body package="OpenGL">GL_MAX_TEXTURE_UNITS	&lt;C: #define GL_MAX_TEXTURE_UNITS 34018	&gt;</body><body package="OpenGL">GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT	&lt;C: #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 35978	&gt;</body><body package="OpenGL">GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT	&lt;C: #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 35979	&gt;</body><body package="OpenGL">GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT	&lt;C: #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 35968	&gt;</body><body package="OpenGL">GL_MAX_VARYING_COMPONENTS_EXT	&lt;C: #define GL_MAX_VARYING_COMPONENTS_EXT 35659	&gt;</body><body package="OpenGL">GL_MAX_VARYING_FLOATS	&lt;C: #define GL_MAX_VARYING_FLOATS 35659	&gt;</body><body package="OpenGL">GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE	&lt;C: #define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE 34080	&gt;</body><body package="OpenGL">GL_MAX_VERTEX_ATTRIBS	&lt;C: #define GL_MAX_VERTEX_ATTRIBS 34921	&gt;</body><body package="OpenGL">GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT	&lt;C: #define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 36322	&gt;</body><body package="OpenGL">GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	&lt;C: #define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 35660	&gt;</body><body package="OpenGL">GL_MAX_VERTEX_UNIFORM_COMPONENTS	&lt;C: #define GL_MAX_VERTEX_UNIFORM_COMPONENTS 35658	&gt;</body><body package="OpenGL">GL_MAX_VERTEX_VARYING_COMPONENTS_EXT	&lt;C: #define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 36318	&gt;</body><body package="OpenGL">GL_MAX_VIEWPORT_DIMS	&lt;C: #define GL_MAX_VIEWPORT_DIMS 3386	&gt;</body><body package="OpenGL">GL_MIN	&lt;C: #define GL_MIN 32775	&gt;</body><body package="OpenGL">GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE	&lt;C: #define GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE 35344	&gt;</body><body package="OpenGL">GL_MIN_PROGRAM_TEXEL_OFFSET_EXT	&lt;C: #define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 35076	&gt;</body><body package="OpenGL">GL_MIRRORED_REPEAT	&lt;C: #define GL_MIRRORED_REPEAT 33648	&gt;</body><body package="OpenGL">GL_MIRROR_CLAMP_ATI	&lt;C: #define GL_MIRROR_CLAMP_ATI 34626	&gt;</body><body package="OpenGL">GL_MIRROR_CLAMP_EXT	&lt;C: #define GL_MIRROR_CLAMP_EXT 34626	&gt;</body><body package="OpenGL">GL_MIRROR_CLAMP_TO_BORDER_EXT	&lt;C: #define GL_MIRROR_CLAMP_TO_BORDER_EXT 35090	&gt;</body><body package="OpenGL">GL_MIRROR_CLAMP_TO_EDGE_ATI	&lt;C: #define GL_MIRROR_CLAMP_TO_EDGE_ATI 34627	&gt;</body><body package="OpenGL">GL_MIRROR_CLAMP_TO_EDGE_EXT	&lt;C: #define GL_MIRROR_CLAMP_TO_EDGE_EXT 34627	&gt;</body><body package="OpenGL">GL_MODULATE	&lt;C: #define GL_MODULATE 8448	&gt;</body><body package="OpenGL">GL_MODULATE_ADD_ATI	&lt;C: #define GL_MODULATE_ADD_ATI 34628	&gt;</body><body package="OpenGL">GL_MODULATE_SIGNED_ADD_ATI	&lt;C: #define GL_MODULATE_SIGNED_ADD_ATI 34629	&gt;</body><body package="OpenGL">GL_MODULATE_SUBTRACT_ATI	&lt;C: #define GL_MODULATE_SUBTRACT_ATI 34630	&gt;</body><body package="OpenGL">GL_MULTISAMPLE	&lt;C: #define GL_MULTISAMPLE 32925	&gt;</body><body package="OpenGL">GL_MULTISAMPLE_FILTER_HINT_NV	&lt;C: #define GL_MULTISAMPLE_FILTER_HINT_NV 34100	&gt;</body><body package="OpenGL">GL_NAND	&lt;C: #define GL_NAND 5390	&gt;</body><body package="OpenGL">GL_NEAREST	&lt;C: #define GL_NEAREST 9728	&gt;</body><body package="OpenGL">GL_NEAREST_MIPMAP_LINEAR	&lt;C: #define GL_NEAREST_MIPMAP_LINEAR 9986	&gt;</body><body package="OpenGL">GL_NEAREST_MIPMAP_NEAREST	&lt;C: #define GL_NEAREST_MIPMAP_NEAREST 9984	&gt;</body><body package="OpenGL">GL_NEVER	&lt;C: #define GL_NEVER 512	&gt;</body><body package="OpenGL">GL_NICEST	&lt;C: #define GL_NICEST 4354	&gt;</body><body package="OpenGL">GL_NONE	&lt;C: #define GL_NONE 0	&gt;</body><body package="OpenGL">GL_NOOP	&lt;C: #define GL_NOOP 5381	&gt;</body><body package="OpenGL">GL_NOR	&lt;C: #define GL_NOR 5384	&gt;</body><body package="OpenGL">GL_NOTEQUAL	&lt;C: #define GL_NOTEQUAL 517	&gt;</body><body package="OpenGL">GL_NO_ERROR	&lt;C: #define GL_NO_ERROR 0	&gt;</body><body package="OpenGL">GL_NUM_COMPRESSED_TEXTURE_FORMATS	&lt;C: #define GL_NUM_COMPRESSED_TEXTURE_FORMATS 34466	&gt;</body><body package="OpenGL">GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV	&lt;C: #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 34902	&gt;</body><body package="OpenGL">GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV	&lt;C: #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 34903	&gt;</body><body package="OpenGL">GL_OFFSET_HILO_TEXTURE_2D_NV	&lt;C: #define GL_OFFSET_HILO_TEXTURE_2D_NV 34900	&gt;</body><body package="OpenGL">GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV	&lt;C: #define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 34901	&gt;</body><body package="OpenGL">GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV	&lt;C: #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 34896	&gt;</body><body package="OpenGL">GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV	&lt;C: #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 34897	&gt;</body><body package="OpenGL">GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV	&lt;C: #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 34898	&gt;</body><body package="OpenGL">GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV	&lt;C: #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 34899	&gt;</body><body package="OpenGL">GL_OFFSET_TEXTURE_2D_BIAS_NV	&lt;C: #define GL_OFFSET_TEXTURE_2D_BIAS_NV GL_OFFSET_TEXTURE_BIAS_NV	&gt;</body><body package="OpenGL">GL_OFFSET_TEXTURE_2D_MATRIX_NV	&lt;C: #define GL_OFFSET_TEXTURE_2D_MATRIX_NV GL_OFFSET_TEXTURE_MATRIX_NV	&gt;</body><body package="OpenGL">GL_OFFSET_TEXTURE_2D_NV	&lt;C: #define GL_OFFSET_TEXTURE_2D_NV 34536	&gt;</body><body package="OpenGL">GL_OFFSET_TEXTURE_2D_SCALE_NV	&lt;C: #define GL_OFFSET_TEXTURE_2D_SCALE_NV GL_OFFSET_TEXTURE_SCALE_NV	&gt;</body><body package="OpenGL">GL_OFFSET_TEXTURE_BIAS_NV	&lt;C: #define GL_OFFSET_TEXTURE_BIAS_NV 34531	&gt;</body><body package="OpenGL">GL_OFFSET_TEXTURE_MATRIX_NV	&lt;C: #define GL_OFFSET_TEXTURE_MATRIX_NV 34529	&gt;</body><body package="OpenGL">GL_OFFSET_TEXTURE_RECTANGLE_NV	&lt;C: #define GL_OFFSET_TEXTURE_RECTANGLE_NV 34380	&gt;</body><body package="OpenGL">GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV	&lt;C: #define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 34381	&gt;</body><body package="OpenGL">GL_OFFSET_TEXTURE_SCALE_NV	&lt;C: #define GL_OFFSET_TEXTURE_SCALE_NV 34530	&gt;</body><body package="OpenGL">GL_ONE	&lt;C: #define GL_ONE 1	&gt;</body><body package="OpenGL">GL_ONE_MINUS_CONSTANT_ALPHA	&lt;C: #define GL_ONE_MINUS_CONSTANT_ALPHA 32772	&gt;</body><body package="OpenGL">GL_ONE_MINUS_CONSTANT_COLOR	&lt;C: #define GL_ONE_MINUS_CONSTANT_COLOR 32770	&gt;</body><body package="OpenGL">GL_ONE_MINUS_DST_ALPHA	&lt;C: #define GL_ONE_MINUS_DST_ALPHA 773	&gt;</body><body package="OpenGL">GL_ONE_MINUS_DST_COLOR	&lt;C: #define GL_ONE_MINUS_DST_COLOR 775	&gt;</body><body package="OpenGL">GL_ONE_MINUS_SRC_ALPHA	&lt;C: #define GL_ONE_MINUS_SRC_ALPHA 771	&gt;</body><body package="OpenGL">GL_ONE_MINUS_SRC_COLOR	&lt;C: #define GL_ONE_MINUS_SRC_COLOR 769	&gt;</body><body package="OpenGL">GL_OPERAND0_ALPHA	&lt;C: #define GL_OPERAND0_ALPHA 34200	&gt;</body><body package="OpenGL">GL_OPERAND0_RGB	&lt;C: #define GL_OPERAND0_RGB 34192	&gt;</body><body package="OpenGL">GL_OPERAND1_ALPHA	&lt;C: #define GL_OPERAND1_ALPHA 34201	&gt;</body><body package="OpenGL">GL_OPERAND1_RGB	&lt;C: #define GL_OPERAND1_RGB 34193	&gt;</body><body package="OpenGL">GL_OPERAND2_ALPHA	&lt;C: #define GL_OPERAND2_ALPHA 34202	&gt;</body><body package="OpenGL">GL_OPERAND2_RGB	&lt;C: #define GL_OPERAND2_RGB 34194	&gt;</body><body package="OpenGL">GL_OPERAND3_ALPHA	&lt;C: #define GL_OPERAND3_ALPHA 34203	&gt;</body><body package="OpenGL">GL_OPERAND3_RGB	&lt;C: #define GL_OPERAND3_RGB 34195	&gt;</body><body package="OpenGL">GL_OPERAND4_ALPHA	&lt;C: #define GL_OPERAND4_ALPHA 34204	&gt;</body><body package="OpenGL">GL_OPERAND4_RGB	&lt;C: #define GL_OPERAND4_RGB 34196	&gt;</body><body package="OpenGL">GL_OPERAND5_ALPHA	&lt;C: #define GL_OPERAND5_ALPHA 34205	&gt;</body><body package="OpenGL">GL_OPERAND5_RGB	&lt;C: #define GL_OPERAND5_RGB 34197	&gt;</body><body package="OpenGL">GL_OPERAND6_ALPHA	&lt;C: #define GL_OPERAND6_ALPHA 34206	&gt;</body><body package="OpenGL">GL_OPERAND6_RGB	&lt;C: #define GL_OPERAND6_RGB 34198	&gt;</body><body package="OpenGL">GL_OPERAND7_ALPHA	&lt;C: #define GL_OPERAND7_ALPHA 34207	&gt;</body><body package="OpenGL">GL_OPERAND7_RGB	&lt;C: #define GL_OPERAND7_RGB 34199	&gt;</body><body package="OpenGL">GL_OR	&lt;C: #define GL_OR 5383	&gt;</body><body package="OpenGL">GL_OR_INVERTED	&lt;C: #define GL_OR_INVERTED 5389	&gt;</body><body package="OpenGL">GL_OR_REVERSE	&lt;C: #define GL_OR_REVERSE 5387	&gt;</body><body package="OpenGL">GL_OUT_OF_MEMORY	&lt;C: #define GL_OUT_OF_MEMORY 1285	&gt;</body><body package="OpenGL">GL_PACK_ALIGNMENT	&lt;C: #define GL_PACK_ALIGNMENT 3333	&gt;</body><body package="OpenGL">GL_PACK_IMAGE_BYTES_APPLE	&lt;C: #define GL_PACK_IMAGE_BYTES_APPLE 35351	&gt;</body><body package="OpenGL">GL_PACK_IMAGE_HEIGHT	&lt;C: #define GL_PACK_IMAGE_HEIGHT 32876	&gt;</body><body package="OpenGL">GL_PACK_LSB_FIRST	&lt;C: #define GL_PACK_LSB_FIRST 3329	&gt;</body><body package="OpenGL">GL_PACK_ROW_BYTES_APPLE	&lt;C: #define GL_PACK_ROW_BYTES_APPLE 35349	&gt;</body><body package="OpenGL">GL_PACK_ROW_LENGTH	&lt;C: #define GL_PACK_ROW_LENGTH 3330	&gt;</body><body package="OpenGL">GL_PACK_SKIP_IMAGES	&lt;C: #define GL_PACK_SKIP_IMAGES 32875	&gt;</body><body package="OpenGL">GL_PACK_SKIP_PIXELS	&lt;C: #define GL_PACK_SKIP_PIXELS 3332	&gt;</body><body package="OpenGL">GL_PACK_SKIP_ROWS	&lt;C: #define GL_PACK_SKIP_ROWS 3331	&gt;</body><body package="OpenGL">GL_PACK_SWAP_BYTES	&lt;C: #define GL_PACK_SWAP_BYTES 3328	&gt;</body><body package="OpenGL">GL_PASS_THROUGH_NV	&lt;C: #define GL_PASS_THROUGH_NV 34534	&gt;</body><body package="OpenGL">GL_PIXEL_PACK_BUFFER	&lt;C: #define GL_PIXEL_PACK_BUFFER 35051	&gt;</body><body package="OpenGL">GL_PIXEL_UNPACK_BUFFER	&lt;C: #define GL_PIXEL_UNPACK_BUFFER 35052	&gt;</body><body package="OpenGL">GL_PN_TRIANGLES_ATI	&lt;C: #define GL_PN_TRIANGLES_ATI 24720	&gt;</body><body package="OpenGL">GL_PN_TRIANGLES_NORMAL_MODE_ATI	&lt;C: #define GL_PN_TRIANGLES_NORMAL_MODE_ATI 24723	&gt;</body><body package="OpenGL">GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI	&lt;C: #define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 24727	&gt;</body><body package="OpenGL">GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI	&lt;C: #define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 24728	&gt;</body><body package="OpenGL">GL_PN_TRIANGLES_POINT_MODE_ATI	&lt;C: #define GL_PN_TRIANGLES_POINT_MODE_ATI 24722	&gt;</body><body package="OpenGL">GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI	&lt;C: #define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 24726	&gt;</body><body package="OpenGL">GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI	&lt;C: #define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 24725	&gt;</body><body package="OpenGL">GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI	&lt;C: #define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 24724	&gt;</body><body package="OpenGL">GL_POINT	&lt;C: #define GL_POINT 6912	&gt;</body><body package="OpenGL">GL_POINTS	&lt;C: #define GL_POINTS 0x0000	&gt;</body><body package="OpenGL">GL_POINT_CULL_CENTER_ATI	&lt;C: #define GL_POINT_CULL_CENTER_ATI 24756	&gt;</body><body package="OpenGL">GL_POINT_CULL_CLIP_ATI	&lt;C: #define GL_POINT_CULL_CLIP_ATI 24757	&gt;</body><body package="OpenGL">GL_POINT_CULL_MODE_ATI	&lt;C: #define GL_POINT_CULL_MODE_ATI 24755	&gt;</body><body package="OpenGL">GL_POINT_DISTANCE_ATTENUATION	&lt;C: #define GL_POINT_DISTANCE_ATTENUATION 33065	&gt;</body><body package="OpenGL">GL_POINT_FADE_THRESHOLD_SIZE	&lt;C: #define GL_POINT_FADE_THRESHOLD_SIZE 33064	&gt;</body><body package="OpenGL">GL_POINT_SIZE	&lt;C: #define GL_POINT_SIZE 2833	&gt;</body><body package="OpenGL">GL_POINT_SIZE_GRANULARITY	&lt;C: #define GL_POINT_SIZE_GRANULARITY 2835	&gt;</body><body package="OpenGL">GL_POINT_SIZE_MAX	&lt;C: #define GL_POINT_SIZE_MAX 33063	&gt;</body><body package="OpenGL">GL_POINT_SIZE_MIN	&lt;C: #define GL_POINT_SIZE_MIN 33062	&gt;</body><body package="OpenGL">GL_POINT_SIZE_RANGE	&lt;C: #define GL_POINT_SIZE_RANGE 2834	&gt;</body><body package="OpenGL">GL_POLYGON_MODE	&lt;C: #define GL_POLYGON_MODE 2880	&gt;</body><body package="OpenGL">GL_POLYGON_OFFSET_FACTOR	&lt;C: #define GL_POLYGON_OFFSET_FACTOR 32824	&gt;</body><body package="OpenGL">GL_POLYGON_OFFSET_FILL	&lt;C: #define GL_POLYGON_OFFSET_FILL 32823	&gt;</body><body package="OpenGL">GL_POLYGON_OFFSET_LINE	&lt;C: #define GL_POLYGON_OFFSET_LINE 10754	&gt;</body><body package="OpenGL">GL_POLYGON_OFFSET_POINT	&lt;C: #define GL_POLYGON_OFFSET_POINT 10753	&gt;</body><body package="OpenGL">GL_POLYGON_OFFSET_UNITS	&lt;C: #define GL_POLYGON_OFFSET_UNITS 10752	&gt;</body><body package="OpenGL">GL_POLYGON_SMOOTH	&lt;C: #define GL_POLYGON_SMOOTH 2881	&gt;</body><body package="OpenGL">GL_POLYGON_SMOOTH_HINT	&lt;C: #define GL_POLYGON_SMOOTH_HINT 3155	&gt;</body><body package="OpenGL">GL_PREVIOUS	&lt;C: #define GL_PREVIOUS 34168	&gt;</body><body package="OpenGL">GL_PREVIOUS_TEXTURE_INPUT_NV	&lt;C: #define GL_PREVIOUS_TEXTURE_INPUT_NV 34532	&gt;</body><body package="OpenGL">GL_PRIMITIVES_GENERATED_EXT	&lt;C: #define GL_PRIMITIVES_GENERATED_EXT 35975	&gt;</body><body package="OpenGL">GL_PROGRAM_POINT_SIZE_EXT	&lt;C: #define GL_PROGRAM_POINT_SIZE_EXT 34370	&gt;</body><body package="OpenGL">GL_PROXY_TEXTURE_1D	&lt;C: #define GL_PROXY_TEXTURE_1D 32867	&gt;</body><body package="OpenGL">GL_PROXY_TEXTURE_2D	&lt;C: #define GL_PROXY_TEXTURE_2D 32868	&gt;</body><body package="OpenGL">GL_PROXY_TEXTURE_3D	&lt;C: #define GL_PROXY_TEXTURE_3D 32880	&gt;</body><body package="OpenGL">GL_PROXY_TEXTURE_CUBE_MAP	&lt;C: #define GL_PROXY_TEXTURE_CUBE_MAP 34075	&gt;</body><body package="OpenGL">GL_PROXY_TEXTURE_RECTANGLE_ARB	&lt;C: #define GL_PROXY_TEXTURE_RECTANGLE_ARB 34039	&gt;</body><body package="OpenGL">GL_PURGEABLE_APPLE	&lt;C: #define GL_PURGEABLE_APPLE 35357	&gt;</body><body package="OpenGL">GL_QUERY_COUNTER_BITS	&lt;C: #define GL_QUERY_COUNTER_BITS 34916	&gt;</body><body package="OpenGL">GL_QUERY_RESULT	&lt;C: #define GL_QUERY_RESULT 34918	&gt;</body><body package="OpenGL">GL_QUERY_RESULT_AVAILABLE	&lt;C: #define GL_QUERY_RESULT_AVAILABLE 34919	&gt;</body><body package="OpenGL">GL_R3_G3_B2	&lt;C: #define GL_R3_G3_B2 10768	&gt;</body><body package="OpenGL">GL_RASTERIZER_DISCARD_EXT	&lt;C: #define GL_RASTERIZER_DISCARD_EXT 35977	&gt;</body><body package="OpenGL">GL_READ_BUFFER	&lt;C: #define GL_READ_BUFFER 3074	&gt;</body><body package="OpenGL">GL_READ_FRAMEBUFFER_BINDING_EXT	&lt;C: #define GL_READ_FRAMEBUFFER_BINDING_EXT 36010	&gt;</body><body package="OpenGL">GL_READ_FRAMEBUFFER_EXT	&lt;C: #define GL_READ_FRAMEBUFFER_EXT 36008	&gt;</body><body package="OpenGL">GL_READ_ONLY	&lt;C: #define GL_READ_ONLY 35000	&gt;</body><body package="OpenGL">GL_READ_WRITE	&lt;C: #define GL_READ_WRITE 35002	&gt;</body><body package="OpenGL">GL_RED	&lt;C: #define GL_RED 6403	&gt;</body><body package="OpenGL">GL_RED_INTEGER_EXT	&lt;C: #define GL_RED_INTEGER_EXT 36244	&gt;</body><body package="OpenGL">GL_RELEASED_APPLE	&lt;C: #define GL_RELEASED_APPLE 35353	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_ALPHA_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_ALPHA_SIZE_EXT 36179	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_BINDING_EXT	&lt;C: #define GL_RENDERBUFFER_BINDING_EXT 36007	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_BLUE_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_BLUE_SIZE_EXT 36178	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_DEPTH_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_DEPTH_SIZE_EXT 36180	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_EXT	&lt;C: #define GL_RENDERBUFFER_EXT 36161	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_GREEN_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_GREEN_SIZE_EXT 36177	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_HEIGHT_EXT	&lt;C: #define GL_RENDERBUFFER_HEIGHT_EXT 36163	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_INTERNAL_FORMAT_EXT	&lt;C: #define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 36164	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_RED_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_RED_SIZE_EXT 36176	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_SAMPLES_EXT	&lt;C: #define GL_RENDERBUFFER_SAMPLES_EXT 36011	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_STENCIL_SIZE_EXT	&lt;C: #define GL_RENDERBUFFER_STENCIL_SIZE_EXT 36181	&gt;</body><body package="OpenGL">GL_RENDERBUFFER_WIDTH_EXT	&lt;C: #define GL_RENDERBUFFER_WIDTH_EXT 36162	&gt;</body><body package="OpenGL">GL_RENDERER	&lt;C: #define GL_RENDERER 7937	&gt;</body><body package="OpenGL">GL_REPEAT	&lt;C: #define GL_REPEAT 10497	&gt;</body><body package="OpenGL">GL_REPLACE	&lt;C: #define GL_REPLACE 7681	&gt;</body><body package="OpenGL">GL_RETAINED_APPLE	&lt;C: #define GL_RETAINED_APPLE 35355	&gt;</body><body package="OpenGL">GL_RGB	&lt;C: #define GL_RGB 6407	&gt;</body><body package="OpenGL">GL_RGB10	&lt;C: #define GL_RGB10 32850	&gt;</body><body package="OpenGL">GL_RGB10_A2	&lt;C: #define GL_RGB10_A2 32857	&gt;</body><body package="OpenGL">GL_RGB12	&lt;C: #define GL_RGB12 32851	&gt;</body><body package="OpenGL">GL_RGB16	&lt;C: #define GL_RGB16 32852	&gt;</body><body package="OpenGL">GL_RGB16F_ARB	&lt;C: #define GL_RGB16F_ARB 34843	&gt;</body><body package="OpenGL">GL_RGB16I_EXT	&lt;C: #define GL_RGB16I_EXT 36233	&gt;</body><body package="OpenGL">GL_RGB16UI_EXT	&lt;C: #define GL_RGB16UI_EXT 36215	&gt;</body><body package="OpenGL">GL_RGB32F_ARB	&lt;C: #define GL_RGB32F_ARB 34837	&gt;</body><body package="OpenGL">GL_RGB32I_EXT	&lt;C: #define GL_RGB32I_EXT 36227	&gt;</body><body package="OpenGL">GL_RGB32UI_EXT	&lt;C: #define GL_RGB32UI_EXT 36209	&gt;</body><body package="OpenGL">GL_RGB4	&lt;C: #define GL_RGB4 32847	&gt;</body><body package="OpenGL">GL_RGB5	&lt;C: #define GL_RGB5 32848	&gt;</body><body package="OpenGL">GL_RGB5_A1	&lt;C: #define GL_RGB5_A1 32855	&gt;</body><body package="OpenGL">GL_RGB8	&lt;C: #define GL_RGB8 32849	&gt;</body><body package="OpenGL">GL_RGB8I_EXT	&lt;C: #define GL_RGB8I_EXT 36239	&gt;</body><body package="OpenGL">GL_RGB8UI_EXT	&lt;C: #define GL_RGB8UI_EXT 36221	&gt;</body><body package="OpenGL">GL_RGBA	&lt;C: #define GL_RGBA 6408	&gt;</body><body package="OpenGL">GL_RGBA12	&lt;C: #define GL_RGBA12 32858	&gt;</body><body package="OpenGL">GL_RGBA16	&lt;C: #define GL_RGBA16 32859	&gt;</body><body package="OpenGL">GL_RGBA16F_ARB	&lt;C: #define GL_RGBA16F_ARB 34842	&gt;</body><body package="OpenGL">GL_RGBA16I_EXT	&lt;C: #define GL_RGBA16I_EXT 36232	&gt;</body><body package="OpenGL">GL_RGBA16UI_EXT	&lt;C: #define GL_RGBA16UI_EXT 36214	&gt;</body><body package="OpenGL">GL_RGBA2	&lt;C: #define GL_RGBA2 32853	&gt;</body><body package="OpenGL">GL_RGBA32F_ARB	&lt;C: #define GL_RGBA32F_ARB 34836	&gt;</body><body package="OpenGL">GL_RGBA32I_EXT	&lt;C: #define GL_RGBA32I_EXT 36226	&gt;</body><body package="OpenGL">GL_RGBA32UI_EXT	&lt;C: #define GL_RGBA32UI_EXT 36208	&gt;</body><body package="OpenGL">GL_RGBA4	&lt;C: #define GL_RGBA4 32854	&gt;</body><body package="OpenGL">GL_RGBA8	&lt;C: #define GL_RGBA8 32856	&gt;</body><body package="OpenGL">GL_RGBA8I_EXT	&lt;C: #define GL_RGBA8I_EXT 36238	&gt;</body><body package="OpenGL">GL_RGBA8UI_EXT	&lt;C: #define GL_RGBA8UI_EXT 36220	&gt;</body><body package="OpenGL">GL_RGBA_INTEGER_EXT	&lt;C: #define GL_RGBA_INTEGER_EXT 36249	&gt;</body><body package="OpenGL">GL_RGBA_INTEGER_MODE_EXT	&lt;C: #define GL_RGBA_INTEGER_MODE_EXT 36254	&gt;</body><body package="OpenGL">GL_RGBA_MODE	&lt;C: #define GL_RGBA_MODE 3121	&gt;</body><body package="OpenGL">GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV	&lt;C: #define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 34521	&gt;</body><body package="OpenGL">GL_RGB_INTEGER_EXT	&lt;C: #define GL_RGB_INTEGER_EXT 36248	&gt;</body><body package="OpenGL">GL_RGB_SCALE	&lt;C: #define GL_RGB_SCALE 34163	&gt;</body><body package="OpenGL">GL_RIGHT	&lt;C: #define GL_RIGHT 1031	&gt;</body><body package="OpenGL">GL_SAMPLER_1D	&lt;C: #define GL_SAMPLER_1D 35677	&gt;</body><body package="OpenGL">GL_SAMPLER_1D_ARRAY_EXT	&lt;C: #define GL_SAMPLER_1D_ARRAY_EXT 36288	&gt;</body><body package="OpenGL">GL_SAMPLER_1D_ARRAY_SHADOW_EXT	&lt;C: #define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 36291	&gt;</body><body package="OpenGL">GL_SAMPLER_1D_SHADOW	&lt;C: #define GL_SAMPLER_1D_SHADOW 35681	&gt;</body><body package="OpenGL">GL_SAMPLER_2D	&lt;C: #define GL_SAMPLER_2D 35678	&gt;</body><body package="OpenGL">GL_SAMPLER_2D_ARRAY_EXT	&lt;C: #define GL_SAMPLER_2D_ARRAY_EXT 36289	&gt;</body><body package="OpenGL">GL_SAMPLER_2D_ARRAY_SHADOW_EXT	&lt;C: #define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 36292	&gt;</body><body package="OpenGL">GL_SAMPLER_2D_SHADOW	&lt;C: #define GL_SAMPLER_2D_SHADOW 35682	&gt;</body><body package="OpenGL">GL_SAMPLER_3D	&lt;C: #define GL_SAMPLER_3D 35679	&gt;</body><body package="OpenGL">GL_SAMPLER_BUFFER_EXT	&lt;C: #define GL_SAMPLER_BUFFER_EXT 36290	&gt;</body><body package="OpenGL">GL_SAMPLER_CUBE	&lt;C: #define GL_SAMPLER_CUBE 35680	&gt;</body><body package="OpenGL">GL_SAMPLER_CUBE_SHADOW_EXT	&lt;C: #define GL_SAMPLER_CUBE_SHADOW_EXT 36293	&gt;</body><body package="OpenGL">GL_SAMPLES	&lt;C: #define GL_SAMPLES 32937	&gt;</body><body package="OpenGL">GL_SAMPLES_PASSED	&lt;C: #define GL_SAMPLES_PASSED 35092	&gt;</body><body package="OpenGL">GL_SAMPLE_ALPHA_TO_COVERAGE	&lt;C: #define GL_SAMPLE_ALPHA_TO_COVERAGE 32926	&gt;</body><body package="OpenGL">GL_SAMPLE_ALPHA_TO_ONE	&lt;C: #define GL_SAMPLE_ALPHA_TO_ONE 32927	&gt;</body><body package="OpenGL">GL_SAMPLE_BUFFERS	&lt;C: #define GL_SAMPLE_BUFFERS 32936	&gt;</body><body package="OpenGL">GL_SAMPLE_COVERAGE	&lt;C: #define GL_SAMPLE_COVERAGE 32928	&gt;</body><body package="OpenGL">GL_SAMPLE_COVERAGE_INVERT	&lt;C: #define GL_SAMPLE_COVERAGE_INVERT 32939	&gt;</body><body package="OpenGL">GL_SAMPLE_COVERAGE_VALUE	&lt;C: #define GL_SAMPLE_COVERAGE_VALUE 32938	&gt;</body><body package="OpenGL">GL_SCISSOR_BOX	&lt;C: #define GL_SCISSOR_BOX 3088	&gt;</body><body package="OpenGL">GL_SCISSOR_TEST	&lt;C: #define GL_SCISSOR_TEST 3089	&gt;</body><body package="OpenGL">GL_SEPARATE_ATTRIBS_EXT	&lt;C: #define GL_SEPARATE_ATTRIBS_EXT 35981	&gt;</body><body package="OpenGL">GL_SET	&lt;C: #define GL_SET 5391	&gt;</body><body package="OpenGL">GL_SHADER_CONSISTENT_NV	&lt;C: #define GL_SHADER_CONSISTENT_NV 34525	&gt;</body><body package="OpenGL">GL_SHADER_OPERATION_NV	&lt;C: #define GL_SHADER_OPERATION_NV 34527	&gt;</body><body package="OpenGL">GL_SHADER_SOURCE_LENGTH	&lt;C: #define GL_SHADER_SOURCE_LENGTH 35720	&gt;</body><body package="OpenGL">GL_SHADER_TYPE	&lt;C: #define GL_SHADER_TYPE 35663	&gt;</body><body package="OpenGL">GL_SHADE_MODEL	&lt;C: #define GL_SHADE_MODEL 2900	&gt;</body><body package="OpenGL">GL_SHADING_LANGUAGE_VERSION	&lt;C: #define GL_SHADING_LANGUAGE_VERSION 35724	&gt;</body><body package="OpenGL">GL_SHORT	&lt;C: #define GL_SHORT 5122	&gt;</body><body package="OpenGL">GL_SIGNED_ALPHA8_NV	&lt;C: #define GL_SIGNED_ALPHA8_NV 34566	&gt;</body><body package="OpenGL">GL_SIGNED_ALPHA_NV	&lt;C: #define GL_SIGNED_ALPHA_NV 34565	&gt;</body><body package="OpenGL">GL_SIGNED_HILO16_NV	&lt;C: #define GL_SIGNED_HILO16_NV 34554	&gt;</body><body package="OpenGL">GL_SIGNED_HILO8_NV	&lt;C: #define GL_SIGNED_HILO8_NV 34911	&gt;</body><body package="OpenGL">GL_SIGNED_HILO_NV	&lt;C: #define GL_SIGNED_HILO_NV 34553	&gt;</body><body package="OpenGL">GL_SIGNED_RGB8_NV	&lt;C: #define GL_SIGNED_RGB8_NV 34559	&gt;</body><body package="OpenGL">GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV	&lt;C: #define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 34573	&gt;</body><body package="OpenGL">GL_SIGNED_RGBA8_NV	&lt;C: #define GL_SIGNED_RGBA8_NV 34556	&gt;</body><body package="OpenGL">GL_SIGNED_RGBA_NV	&lt;C: #define GL_SIGNED_RGBA_NV 34555	&gt;</body><body package="OpenGL">GL_SIGNED_RGB_NV	&lt;C: #define GL_SIGNED_RGB_NV 34558	&gt;</body><body package="OpenGL">GL_SIGNED_RGB_UNSIGNED_ALPHA_NV	&lt;C: #define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 34572	&gt;</body><body package="OpenGL">GL_SMOOTH	&lt;C: #define GL_SMOOTH 7425	&gt;</body><body package="OpenGL">GL_SMOOTH_LINE_WIDTH_GRANULARITY	&lt;C: #define GL_SMOOTH_LINE_WIDTH_GRANULARITY 2851	&gt;</body><body package="OpenGL">GL_SMOOTH_LINE_WIDTH_RANGE	&lt;C: #define GL_SMOOTH_LINE_WIDTH_RANGE 2850	&gt;</body><body package="OpenGL">GL_SMOOTH_POINT_SIZE_GRANULARITY	&lt;C: #define GL_SMOOTH_POINT_SIZE_GRANULARITY 2835	&gt;</body><body package="OpenGL">GL_SMOOTH_POINT_SIZE_RANGE	&lt;C: #define GL_SMOOTH_POINT_SIZE_RANGE 2834	&gt;</body><body package="OpenGL">GL_SRC0_ALPHA	&lt;C: #define GL_SRC0_ALPHA 34184	&gt;</body><body package="OpenGL">GL_SRC0_RGB	&lt;C: #define GL_SRC0_RGB 34176	&gt;</body><body package="OpenGL">GL_SRC1_ALPHA	&lt;C: #define GL_SRC1_ALPHA 34185	&gt;</body><body package="OpenGL">GL_SRC1_RGB	&lt;C: #define GL_SRC1_RGB 34177	&gt;</body><body package="OpenGL">GL_SRC2_ALPHA	&lt;C: #define GL_SRC2_ALPHA 34186	&gt;</body><body package="OpenGL">GL_SRC2_RGB	&lt;C: #define GL_SRC2_RGB 34178	&gt;</body><body package="OpenGL">GL_SRC3_ALPHA	&lt;C: #define GL_SRC3_ALPHA 34187	&gt;</body><body package="OpenGL">GL_SRC3_RGB	&lt;C: #define GL_SRC3_RGB 34179	&gt;</body><body package="OpenGL">GL_SRC4_ALPHA	&lt;C: #define GL_SRC4_ALPHA 34188	&gt;</body><body package="OpenGL">GL_SRC4_RGB	&lt;C: #define GL_SRC4_RGB 34180	&gt;</body><body package="OpenGL">GL_SRC5_ALPHA	&lt;C: #define GL_SRC5_ALPHA 34189	&gt;</body><body package="OpenGL">GL_SRC5_RGB	&lt;C: #define GL_SRC5_RGB 34181	&gt;</body><body package="OpenGL">GL_SRC6_ALPHA	&lt;C: #define GL_SRC6_ALPHA 34190	&gt;</body><body package="OpenGL">GL_SRC6_RGB	&lt;C: #define GL_SRC6_RGB 34182	&gt;</body><body package="OpenGL">GL_SRC7_ALPHA	&lt;C: #define GL_SRC7_ALPHA 34191	&gt;</body><body package="OpenGL">GL_SRC7_RGB	&lt;C: #define GL_SRC7_RGB 34183	&gt;</body><body package="OpenGL">GL_SRC_ALPHA	&lt;C: #define GL_SRC_ALPHA 770	&gt;</body><body package="OpenGL">GL_SRC_ALPHA_SATURATE	&lt;C: #define GL_SRC_ALPHA_SATURATE 776	&gt;</body><body package="OpenGL">GL_SRC_COLOR	&lt;C: #define GL_SRC_COLOR 768	&gt;</body><body package="OpenGL">GL_SRGB	&lt;C: #define GL_SRGB 35904	&gt;</body><body package="OpenGL">GL_SRGB8	&lt;C: #define GL_SRGB8 35905	&gt;</body><body package="OpenGL">GL_SRGB8_ALPHA8	&lt;C: #define GL_SRGB8_ALPHA8 35907	&gt;</body><body package="OpenGL">GL_SRGB_ALPHA	&lt;C: #define GL_SRGB_ALPHA 35906	&gt;</body><body package="OpenGL">GL_STACK_OVERFLOW	&lt;C: #define GL_STACK_OVERFLOW 1283	&gt;</body><body package="OpenGL">GL_STACK_UNDERFLOW	&lt;C: #define GL_STACK_UNDERFLOW 1284	&gt;</body><body package="OpenGL">GL_STATIC_COPY	&lt;C: #define GL_STATIC_COPY 35046	&gt;</body><body package="OpenGL">GL_STATIC_DRAW	&lt;C: #define GL_STATIC_DRAW 35044	&gt;</body><body package="OpenGL">GL_STATIC_READ	&lt;C: #define GL_STATIC_READ 35045	&gt;</body><body package="OpenGL">GL_STENCIL	&lt;C: #define GL_STENCIL 6146	&gt;</body><body package="OpenGL">GL_STENCIL_ATTACHMENT_EXT	&lt;C: #define GL_STENCIL_ATTACHMENT_EXT 36128	&gt;</body><body package="OpenGL">GL_STENCIL_BACK_FAIL	&lt;C: #define GL_STENCIL_BACK_FAIL 34817	&gt;</body><body package="OpenGL">GL_STENCIL_BACK_FUNC	&lt;C: #define GL_STENCIL_BACK_FUNC 34816	&gt;</body><body package="OpenGL">GL_STENCIL_BACK_PASS_DEPTH_FAIL	&lt;C: #define GL_STENCIL_BACK_PASS_DEPTH_FAIL 34818	&gt;</body><body package="OpenGL">GL_STENCIL_BACK_PASS_DEPTH_PASS	&lt;C: #define GL_STENCIL_BACK_PASS_DEPTH_PASS 34819	&gt;</body><body package="OpenGL">GL_STENCIL_BACK_REF	&lt;C: #define GL_STENCIL_BACK_REF 36003	&gt;</body><body package="OpenGL">GL_STENCIL_BACK_VALUE_MASK	&lt;C: #define GL_STENCIL_BACK_VALUE_MASK 36004	&gt;</body><body package="OpenGL">GL_STENCIL_BACK_WRITEMASK	&lt;C: #define GL_STENCIL_BACK_WRITEMASK 36005	&gt;</body><body package="OpenGL">GL_STENCIL_BUFFER_BIT	&lt;C: #define GL_STENCIL_BUFFER_BIT 0x00000400	&gt;</body><body package="OpenGL">GL_STENCIL_CLEAR_VALUE	&lt;C: #define GL_STENCIL_CLEAR_VALUE 2961	&gt;</body><body package="OpenGL">GL_STENCIL_FAIL	&lt;C: #define GL_STENCIL_FAIL 2964	&gt;</body><body package="OpenGL">GL_STENCIL_FUNC	&lt;C: #define GL_STENCIL_FUNC 2962	&gt;</body><body package="OpenGL">GL_STENCIL_INDEX	&lt;C: #define GL_STENCIL_INDEX 6401	&gt;</body><body package="OpenGL">GL_STENCIL_INDEX16_EXT	&lt;C: #define GL_STENCIL_INDEX16_EXT 36169	&gt;</body><body package="OpenGL">GL_STENCIL_INDEX1_EXT	&lt;C: #define GL_STENCIL_INDEX1_EXT 36166	&gt;</body><body package="OpenGL">GL_STENCIL_INDEX4_EXT	&lt;C: #define GL_STENCIL_INDEX4_EXT 36167	&gt;</body><body package="OpenGL">GL_STENCIL_INDEX8_EXT	&lt;C: #define GL_STENCIL_INDEX8_EXT 36168	&gt;</body><body package="OpenGL">GL_STENCIL_PASS_DEPTH_FAIL	&lt;C: #define GL_STENCIL_PASS_DEPTH_FAIL 2965	&gt;</body><body package="OpenGL">GL_STENCIL_PASS_DEPTH_PASS	&lt;C: #define GL_STENCIL_PASS_DEPTH_PASS 2966	&gt;</body><body package="OpenGL">GL_STENCIL_REF	&lt;C: #define GL_STENCIL_REF 2967	&gt;</body><body package="OpenGL">GL_STENCIL_TEST	&lt;C: #define GL_STENCIL_TEST 2960	&gt;</body><body package="OpenGL">GL_STENCIL_VALUE_MASK	&lt;C: #define GL_STENCIL_VALUE_MASK 2963	&gt;</body><body package="OpenGL">GL_STENCIL_WRITEMASK	&lt;C: #define GL_STENCIL_WRITEMASK 2968	&gt;</body><body package="OpenGL">GL_STEREO	&lt;C: #define GL_STEREO 3123	&gt;</body><body package="OpenGL">GL_STORAGE_CACHED_APPLE	&lt;C: #define GL_STORAGE_CACHED_APPLE 34238	&gt;</body><body package="OpenGL">GL_STORAGE_CLIENT_APPLE	&lt;C: #define GL_STORAGE_CLIENT_APPLE 34228	&gt;</body><body package="OpenGL">GL_STORAGE_PRIVATE_APPLE	&lt;C: #define GL_STORAGE_PRIVATE_APPLE 34237	&gt;</body><body package="OpenGL">GL_STORAGE_SHARED_APPLE	&lt;C: #define GL_STORAGE_SHARED_APPLE 34239	&gt;</body><body package="OpenGL">GL_STREAM_COPY	&lt;C: #define GL_STREAM_COPY 35042	&gt;</body><body package="OpenGL">GL_STREAM_DRAW	&lt;C: #define GL_STREAM_DRAW 35040	&gt;</body><body package="OpenGL">GL_STREAM_READ	&lt;C: #define GL_STREAM_READ 35041	&gt;</body><body package="OpenGL">GL_SUBTRACT	&lt;C: #define GL_SUBTRACT 34023	&gt;</body><body package="OpenGL">GL_TABLE_TOO_LARGE	&lt;C: #define GL_TABLE_TOO_LARGE 32817	&gt;</body><body package="OpenGL">GL_TEXTURE	&lt;C: #define GL_TEXTURE 5890	&gt;</body><body package="OpenGL">GL_TEXTURE0	&lt;C: #define GL_TEXTURE0 33984	&gt;</body><body package="OpenGL">GL_TEXTURE_1D	&lt;C: #define GL_TEXTURE_1D 3552	&gt;</body><body package="OpenGL">GL_TEXTURE_2D	&lt;C: #define GL_TEXTURE_2D 3553	&gt;</body><body package="OpenGL">GL_TEXTURE_3D	&lt;C: #define GL_TEXTURE_3D 32879	&gt;</body><body package="OpenGL">GL_TEXTURE_ALPHA_SIZE	&lt;C: #define GL_TEXTURE_ALPHA_SIZE 32863	&gt;</body><body package="OpenGL">GL_TEXTURE_ALPHA_TYPE_ARB	&lt;C: #define GL_TEXTURE_ALPHA_TYPE_ARB 35859	&gt;</body><body package="OpenGL">GL_TEXTURE_BASE_LEVEL	&lt;C: #define GL_TEXTURE_BASE_LEVEL 33084	&gt;</body><body package="OpenGL">GL_TEXTURE_BINDING_1D	&lt;C: #define GL_TEXTURE_BINDING_1D 32872	&gt;</body><body package="OpenGL">GL_TEXTURE_BINDING_2D	&lt;C: #define GL_TEXTURE_BINDING_2D 32873	&gt;</body><body package="OpenGL">GL_TEXTURE_BINDING_3D	&lt;C: #define GL_TEXTURE_BINDING_3D 32874	&gt;</body><body package="OpenGL">GL_TEXTURE_BINDING_CUBE_MAP	&lt;C: #define GL_TEXTURE_BINDING_CUBE_MAP 34068	&gt;</body><body package="OpenGL">GL_TEXTURE_BINDING_RECTANGLE_ARB	&lt;C: #define GL_TEXTURE_BINDING_RECTANGLE_ARB 34038	&gt;</body><body package="OpenGL">GL_TEXTURE_BLUE_SIZE	&lt;C: #define GL_TEXTURE_BLUE_SIZE 32862	&gt;</body><body package="OpenGL">GL_TEXTURE_BLUE_TYPE_ARB	&lt;C: #define GL_TEXTURE_BLUE_TYPE_ARB 35858	&gt;</body><body package="OpenGL">GL_TEXTURE_COMPARE_FAIL_VALUE_ARB	&lt;C: #define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 32959	&gt;</body><body package="OpenGL">GL_TEXTURE_COMPARE_FUNC	&lt;C: #define GL_TEXTURE_COMPARE_FUNC 34893	&gt;</body><body package="OpenGL">GL_TEXTURE_COMPARE_MODE	&lt;C: #define GL_TEXTURE_COMPARE_MODE 34892	&gt;</body><body package="OpenGL">GL_TEXTURE_COMPONENTS	&lt;C: #define GL_TEXTURE_COMPONENTS GL_TEXTURE_INTERNAL_FORMAT	&gt;</body><body package="OpenGL">GL_TEXTURE_COMPRESSED	&lt;C: #define GL_TEXTURE_COMPRESSED 34465	&gt;</body><body package="OpenGL">GL_TEXTURE_COMPRESSED_IMAGE_SIZE	&lt;C: #define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 34464	&gt;</body><body package="OpenGL">GL_TEXTURE_COMPRESSION_HINT	&lt;C: #define GL_TEXTURE_COMPRESSION_HINT 34031	&gt;</body><body package="OpenGL">GL_TEXTURE_CUBE_MAP	&lt;C: #define GL_TEXTURE_CUBE_MAP 34067	&gt;</body><body package="OpenGL">GL_TEXTURE_CUBE_MAP_NEGATIVE_X	&lt;C: #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 34070	&gt;</body><body package="OpenGL">GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	&lt;C: #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 34072	&gt;</body><body package="OpenGL">GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	&lt;C: #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 34074	&gt;</body><body package="OpenGL">GL_TEXTURE_CUBE_MAP_POSITIVE_X	&lt;C: #define GL_TEXTURE_CUBE_MAP_POSITIVE_X 34069	&gt;</body><body package="OpenGL">GL_TEXTURE_CUBE_MAP_POSITIVE_Y	&lt;C: #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 34071	&gt;</body><body package="OpenGL">GL_TEXTURE_CUBE_MAP_POSITIVE_Z	&lt;C: #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 34073	&gt;</body><body package="OpenGL">GL_TEXTURE_DEPTH	&lt;C: #define GL_TEXTURE_DEPTH 32881	&gt;</body><body package="OpenGL">GL_TEXTURE_DEPTH_SIZE	&lt;C: #define GL_TEXTURE_DEPTH_SIZE 34890	&gt;</body><body package="OpenGL">GL_TEXTURE_DEPTH_TYPE_ARB	&lt;C: #define GL_TEXTURE_DEPTH_TYPE_ARB 35862	&gt;</body><body package="OpenGL">GL_TEXTURE_DS_SIZE_NV	&lt;C: #define GL_TEXTURE_DS_SIZE_NV 34589	&gt;</body><body package="OpenGL">GL_TEXTURE_DT_SIZE_NV	&lt;C: #define GL_TEXTURE_DT_SIZE_NV 34590	&gt;</body><body package="OpenGL">GL_TEXTURE_FILTER_CONTROL	&lt;C: #define GL_TEXTURE_FILTER_CONTROL 34048	&gt;</body><body package="OpenGL">GL_TEXTURE_GREEN_SIZE	&lt;C: #define GL_TEXTURE_GREEN_SIZE 32861	&gt;</body><body package="OpenGL">GL_TEXTURE_GREEN_TYPE_ARB	&lt;C: #define GL_TEXTURE_GREEN_TYPE_ARB 35857	&gt;</body><body package="OpenGL">GL_TEXTURE_HEIGHT	&lt;C: #define GL_TEXTURE_HEIGHT 4097	&gt;</body><body package="OpenGL">GL_TEXTURE_HI_SIZE_NV	&lt;C: #define GL_TEXTURE_HI_SIZE_NV 34587	&gt;</body><body package="OpenGL">GL_TEXTURE_INTERNAL_FORMAT	&lt;C: #define GL_TEXTURE_INTERNAL_FORMAT 4099	&gt;</body><body package="OpenGL">GL_TEXTURE_LOD_BIAS	&lt;C: #define GL_TEXTURE_LOD_BIAS 34049	&gt;</body><body package="OpenGL">GL_TEXTURE_LO_SIZE_NV	&lt;C: #define GL_TEXTURE_LO_SIZE_NV 34588	&gt;</body><body package="OpenGL">GL_TEXTURE_MAG_FILTER	&lt;C: #define GL_TEXTURE_MAG_FILTER 10240	&gt;</body><body package="OpenGL">GL_TEXTURE_MAG_SIZE_NV	&lt;C: #define GL_TEXTURE_MAG_SIZE_NV 34591	&gt;</body><body package="OpenGL">GL_TEXTURE_MAX_ANISOTROPY_EXT	&lt;C: #define GL_TEXTURE_MAX_ANISOTROPY_EXT 34046	&gt;</body><body package="OpenGL">GL_TEXTURE_MAX_LEVEL	&lt;C: #define GL_TEXTURE_MAX_LEVEL 33085	&gt;</body><body package="OpenGL">GL_TEXTURE_MAX_LOD	&lt;C: #define GL_TEXTURE_MAX_LOD 33083	&gt;</body><body package="OpenGL">GL_TEXTURE_MINIMIZE_STORAGE_APPLE	&lt;C: #define GL_TEXTURE_MINIMIZE_STORAGE_APPLE 34230	&gt;</body><body package="OpenGL">GL_TEXTURE_MIN_FILTER	&lt;C: #define GL_TEXTURE_MIN_FILTER 10241	&gt;</body><body package="OpenGL">GL_TEXTURE_MIN_LOD	&lt;C: #define GL_TEXTURE_MIN_LOD 33082	&gt;</body><body package="OpenGL">GL_TEXTURE_RANGE_LENGTH_APPLE	&lt;C: #define GL_TEXTURE_RANGE_LENGTH_APPLE 34231	&gt;</body><body package="OpenGL">GL_TEXTURE_RANGE_POINTER_APPLE	&lt;C: #define GL_TEXTURE_RANGE_POINTER_APPLE 34232	&gt;</body><body package="OpenGL">GL_TEXTURE_RECTANGLE_ARB	&lt;C: #define GL_TEXTURE_RECTANGLE_ARB 34037	&gt;</body><body package="OpenGL">GL_TEXTURE_RED_SIZE	&lt;C: #define GL_TEXTURE_RED_SIZE 32860	&gt;</body><body package="OpenGL">GL_TEXTURE_RED_TYPE_ARB	&lt;C: #define GL_TEXTURE_RED_TYPE_ARB 35856	&gt;</body><body package="OpenGL">GL_TEXTURE_SHADER_NV	&lt;C: #define GL_TEXTURE_SHADER_NV 34526	&gt;</body><body package="OpenGL">GL_TEXTURE_STENCIL_SIZE_EXT	&lt;C: #define GL_TEXTURE_STENCIL_SIZE_EXT 35057	&gt;</body><body package="OpenGL">GL_TEXTURE_STORAGE_HINT_APPLE	&lt;C: #define GL_TEXTURE_STORAGE_HINT_APPLE 34236	&gt;</body><body package="OpenGL">GL_TEXTURE_WIDTH	&lt;C: #define GL_TEXTURE_WIDTH 4096	&gt;</body><body package="OpenGL">GL_TEXTURE_WRAP_R	&lt;C: #define GL_TEXTURE_WRAP_R 32882	&gt;</body><body package="OpenGL">GL_TEXTURE_WRAP_S	&lt;C: #define GL_TEXTURE_WRAP_S 10242	&gt;</body><body package="OpenGL">GL_TEXTURE_WRAP_T	&lt;C: #define GL_TEXTURE_WRAP_T 10243	&gt;</body><body package="OpenGL">GL_TEXT_FRAGMENT_SHADER_ATI	&lt;C: #define GL_TEXT_FRAGMENT_SHADER_ATI 33280	&gt;</body><body package="OpenGL">GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 35983	&gt;</body><body package="OpenGL">GL_TRANSFORM_FEEDBACK_BUFFER_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 35982	&gt;</body><body package="OpenGL">GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 35967	&gt;</body><body package="OpenGL">GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 35973	&gt;</body><body package="OpenGL">GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 35972	&gt;</body><body package="OpenGL">GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 35976	&gt;</body><body package="OpenGL">GL_TRANSFORM_FEEDBACK_VARYINGS_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 35971	&gt;</body><body package="OpenGL">GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT	&lt;C: #define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 35958	&gt;</body><body package="OpenGL">GL_TRIANGLES	&lt;C: #define GL_TRIANGLES 0x0004	&gt;</body><body package="OpenGL">GL_TRIANGLES_ADJACENCY_EXT	&lt;C: #define GL_TRIANGLES_ADJACENCY_EXT 12	&gt;</body><body package="OpenGL">GL_TRIANGLE_FAN	&lt;C: #define GL_TRIANGLE_FAN 0x0006	&gt;</body><body package="OpenGL">GL_TRIANGLE_STRIP	&lt;C: #define GL_TRIANGLE_STRIP 0x0005	&gt;</body><body package="OpenGL">GL_TRIANGLE_STRIP_ADJACENCY_EXT	&lt;C: #define GL_TRIANGLE_STRIP_ADJACENCY_EXT 13	&gt;</body><body package="OpenGL">GL_TRUE	&lt;C: #define GL_TRUE 1	&gt;</body><body package="OpenGL">GL_UNDEFINED_APPLE	&lt;C: #define GL_UNDEFINED_APPLE 35356	&gt;</body><body package="OpenGL">GL_UNIFORM_BUFFER_BINDING_EXT	&lt;C: #define GL_UNIFORM_BUFFER_BINDING_EXT 36335	&gt;</body><body package="OpenGL">GL_UNIFORM_BUFFER_EXT	&lt;C: #define GL_UNIFORM_BUFFER_EXT 36334	&gt;</body><body package="OpenGL">GL_UNPACK_ALIGNMENT	&lt;C: #define GL_UNPACK_ALIGNMENT 3317	&gt;</body><body package="OpenGL">GL_UNPACK_CLIENT_STORAGE_APPLE	&lt;C: #define GL_UNPACK_CLIENT_STORAGE_APPLE 34226	&gt;</body><body package="OpenGL">GL_UNPACK_IMAGE_BYTES_APPLE	&lt;C: #define GL_UNPACK_IMAGE_BYTES_APPLE 35352	&gt;</body><body package="OpenGL">GL_UNPACK_IMAGE_HEIGHT	&lt;C: #define GL_UNPACK_IMAGE_HEIGHT 32878	&gt;</body><body package="OpenGL">GL_UNPACK_LSB_FIRST	&lt;C: #define GL_UNPACK_LSB_FIRST 3313	&gt;</body><body package="OpenGL">GL_UNPACK_ROW_BYTES_APPLE	&lt;C: #define GL_UNPACK_ROW_BYTES_APPLE 35350	&gt;</body><body package="OpenGL">GL_UNPACK_ROW_LENGTH	&lt;C: #define GL_UNPACK_ROW_LENGTH 3314	&gt;</body><body package="OpenGL">GL_UNPACK_SKIP_IMAGES	&lt;C: #define GL_UNPACK_SKIP_IMAGES 32877	&gt;</body><body package="OpenGL">GL_UNPACK_SKIP_PIXELS	&lt;C: #define GL_UNPACK_SKIP_PIXELS 3316	&gt;</body><body package="OpenGL">GL_UNPACK_SKIP_ROWS	&lt;C: #define GL_UNPACK_SKIP_ROWS 3315	&gt;</body><body package="OpenGL">GL_UNPACK_SWAP_BYTES	&lt;C: #define GL_UNPACK_SWAP_BYTES 3312	&gt;</body><body package="OpenGL">GL_UNSIGNED_BYTE	&lt;C: #define GL_UNSIGNED_BYTE 5121	&gt;</body><body package="OpenGL">GL_UNSIGNED_BYTE_2_3_3_REV	&lt;C: #define GL_UNSIGNED_BYTE_2_3_3_REV 33634	&gt;</body><body package="OpenGL">GL_UNSIGNED_BYTE_3_3_2	&lt;C: #define GL_UNSIGNED_BYTE_3_3_2 32818	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT	&lt;C: #define GL_UNSIGNED_INT 5125	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_10_10_10_2	&lt;C: #define GL_UNSIGNED_INT_10_10_10_2 32822	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_24_8_EXT	&lt;C: #define GL_UNSIGNED_INT_24_8_EXT 34042	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_2_10_10_10_REV	&lt;C: #define GL_UNSIGNED_INT_2_10_10_10_REV 33640	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_8_8_8_8	&lt;C: #define GL_UNSIGNED_INT_8_8_8_8 32821	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_8_8_8_8_REV	&lt;C: #define GL_UNSIGNED_INT_8_8_8_8_REV 33639	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_8_8_S8_S8_REV_NV	&lt;C: #define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 34523	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_S8_S8_8_8_NV	&lt;C: #define GL_UNSIGNED_INT_S8_S8_8_8_NV 34522	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 36310	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_SAMPLER_1D_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_1D_EXT 36305	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 36311	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_SAMPLER_2D_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_2D_EXT 36306	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 36309	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_SAMPLER_3D_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_3D_EXT 36307	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 36312	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_SAMPLER_CUBE_EXT	&lt;C: #define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 36308	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_VEC2_EXT	&lt;C: #define GL_UNSIGNED_INT_VEC2_EXT 36294	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_VEC3_EXT	&lt;C: #define GL_UNSIGNED_INT_VEC3_EXT 36295	&gt;</body><body package="OpenGL">GL_UNSIGNED_INT_VEC4_EXT	&lt;C: #define GL_UNSIGNED_INT_VEC4_EXT 36296	&gt;</body><body package="OpenGL">GL_UNSIGNED_NORMALIZED_ARB	&lt;C: #define GL_UNSIGNED_NORMALIZED_ARB 35863	&gt;</body><body package="OpenGL">GL_UNSIGNED_SHORT	&lt;C: #define GL_UNSIGNED_SHORT 5123	&gt;</body><body package="OpenGL">GL_UNSIGNED_SHORT_1_5_5_5_REV	&lt;C: #define GL_UNSIGNED_SHORT_1_5_5_5_REV 33638	&gt;</body><body package="OpenGL">GL_UNSIGNED_SHORT_4_4_4_4	&lt;C: #define GL_UNSIGNED_SHORT_4_4_4_4 32819	&gt;</body><body package="OpenGL">GL_UNSIGNED_SHORT_4_4_4_4_REV	&lt;C: #define GL_UNSIGNED_SHORT_4_4_4_4_REV 33637	&gt;</body><body package="OpenGL">GL_UNSIGNED_SHORT_5_5_5_1	&lt;C: #define GL_UNSIGNED_SHORT_5_5_5_1 32820	&gt;</body><body package="OpenGL">GL_UNSIGNED_SHORT_5_6_5	&lt;C: #define GL_UNSIGNED_SHORT_5_6_5 33635	&gt;</body><body package="OpenGL">GL_UNSIGNED_SHORT_5_6_5_REV	&lt;C: #define GL_UNSIGNED_SHORT_5_6_5_REV 33636	&gt;</body><body package="OpenGL">GL_UNSIGNED_SHORT_8_8_APPLE	&lt;C: #define GL_UNSIGNED_SHORT_8_8_APPLE 34234	&gt;</body><body package="OpenGL">GL_UNSIGNED_SHORT_8_8_REV_APPLE	&lt;C: #define GL_UNSIGNED_SHORT_8_8_REV_APPLE 34235	&gt;</body><body package="OpenGL">GL_UPPER_LEFT	&lt;C: #define GL_UPPER_LEFT 36002	&gt;</body><body package="OpenGL">GL_VALIDATE_STATUS	&lt;C: #define GL_VALIDATE_STATUS 35715	&gt;</body><body package="OpenGL">GL_VENDOR	&lt;C: #define GL_VENDOR 7936	&gt;</body><body package="OpenGL">GL_VERSION	&lt;C: #define GL_VERSION 7938	&gt;</body><body package="OpenGL">GL_VERTEX_ARRAY_BINDING_APPLE	&lt;C: #define GL_VERTEX_ARRAY_BINDING_APPLE 34229	&gt;</body><body package="OpenGL">GL_VERTEX_ARRAY_RANGE_APPLE	&lt;C: #define GL_VERTEX_ARRAY_RANGE_APPLE 34077	&gt;</body><body package="OpenGL">GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE	&lt;C: #define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 34078	&gt;</body><body package="OpenGL">GL_VERTEX_ARRAY_RANGE_POINTER_APPLE	&lt;C: #define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 34081	&gt;</body><body package="OpenGL">GL_VERTEX_ARRAY_STORAGE_HINT_APPLE	&lt;C: #define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 34079	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 34975	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_ARRAY_ENABLED	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_ENABLED 34338	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 35069	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 34922	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_ARRAY_POINTER	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_POINTER 34373	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_ARRAY_SIZE	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_SIZE 34339	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_ARRAY_STRIDE	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_STRIDE 34340	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_ARRAY_TYPE	&lt;C: #define GL_VERTEX_ATTRIB_ARRAY_TYPE 34341	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_MAP1_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP1_APPLE 35328	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 35331	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 35333	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 35332	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 35330	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_MAP2_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP2_APPLE 35329	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 35335	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 35337	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 35336	&gt;</body><body package="OpenGL">GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE	&lt;C: #define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 35334	&gt;</body><body package="OpenGL">GL_VERTEX_PROGRAM_POINT_SIZE	&lt;C: #define GL_VERTEX_PROGRAM_POINT_SIZE 34370	&gt;</body><body package="OpenGL">GL_VERTEX_SHADER	&lt;C: #define GL_VERTEX_SHADER 35633	&gt;</body><body package="OpenGL">GL_VIBRANCE_BIAS_NV	&lt;C: #define GL_VIBRANCE_BIAS_NV 34585	&gt;</body><body package="OpenGL">GL_VIBRANCE_SCALE_NV	&lt;C: #define GL_VIBRANCE_SCALE_NV 34579	&gt;</body><body package="OpenGL">GL_VIEWPORT	&lt;C: #define GL_VIEWPORT 2978	&gt;</body><body package="OpenGL">GL_VOLATILE_APPLE	&lt;C: #define GL_VOLATILE_APPLE 35354	&gt;</body><body package="OpenGL">GL_WRITE_ONLY	&lt;C: #define GL_WRITE_ONLY 35001	&gt;</body><body package="OpenGL">GL_XOR	&lt;C: #define GL_XOR 5382	&gt;</body><body package="OpenGL">GL_YCBCR_422_APPLE	&lt;C: #define GL_YCBCR_422_APPLE 34233	&gt;</body><body package="OpenGL">GL_ZERO	&lt;C: #define GL_ZERO 0	&gt;</body></methods><methods><class-id>OpenGL.OpenGLInterface class</class-id> <category>misc scripts</category><body package="OpenGL">allSymbols	| allSymbols |	allSymbols := Set new.	self methodDictionary do: [:method | (self symbols: method) do: [:values | allSymbols addAll: values]].	^allSymbols</body><body package="OpenGL">categorySymbols	| categorySymbols |	categorySymbols := Dictionary new.	self symbolCategories keysAndValuesDo: [:category :symbols |		symbols do: [:symbol | (categorySymbols at: symbol ifAbsentPut: [Set new]) add: category]].	^categorySymbols</body><body package="OpenGL">missingSymbols	| missingSymbols |	missingSymbols := Dictionary new.	self methodDictionary keysAndValuesDo: [:selector :method |		(self symbols: method) do: [:symbols |			symbols do: [:symbol |				(self canUnderstand: symbol) ifFalse: [(missingSymbols at: symbol ifAbsentPut: [SortedCollection new]) add: selector].		]]].	^missingSymbols</body><body package="OpenGL">multiCategorySymbols	| multiCategorySymbols |	multiCategorySymbols := Dictionary new.	self categorySymbols keysAndValuesDo: [:key :values | values size &gt; 1 ifTrue: [multiCategorySymbols at: key put: values]].	^multiCategorySymbols</body><body package="OpenGL">rename_GL_prefixes	OpenGL.OpenGLInterface methodDictionary copy keysAndValuesDo: [:key :value |		(('GL_*' match: key ignoreCase: false) and: [(key at: 4) isDigit not]) ifTrue:			[(Refactory.Browser.RenameMethodRefactoring				renameMethod: key				in: OpenGL.OpenGLInterface				to: (key allButFirst: 3)				permutation: (1 to: key numArgs))					execute]]</body><body package="OpenGL">rename_gl_prefixes	OpenGL.OpenGLInterface methodDictionary copy keysAndValuesDo: [:key :value |		('gl*' match: key ignoreCase: false) ifTrue:			[(Refactory.Browser.RenameMethodRefactoring				renameMethod: key				in: OpenGL.OpenGLInterface				to: (key allButFirst: 2)				permutation: (1 to: key numArgs))					execute]]</body><body package="OpenGL">singleCategorySymbols	| singleCategorySymbols |	singleCategorySymbols := Dictionary new.	self categorySymbols keysAndValuesDo: [:key :values | values size = 1 ifTrue: [(singleCategorySymbols at: values asOrderedCollection first ifAbsentPut: [SortedCollection new]) add: key]].	^singleCategorySymbols</body><body package="OpenGL">suspectSymbols	| installedSymbols |	installedSymbols := (self organization listAtCategoryNamed: #'defines') asSet.	self allSymbols do: [:each | installedSymbols remove: each ifAbsent: []].	^installedSymbols</body><body package="OpenGL">symbolCategories	| symbolCategories |	symbolCategories := Dictionary new.	self methodDictionary keysAndValuesDo: [:selector :method |		(self symbols: method) do: [:symbols |			(symbolCategories at: (self organization categoryOfItem: selector) ifAbsentPut: [OrderedCollection new]) addAll: symbols]].	^symbolCategories</body><body package="OpenGL">symbols: method	| tree symbols comment |	symbols := Dictionary new.	tree := method compilerClass preferredParserClass new		parse: method getSource readStream		class: method mclass		environment: method mclass environment		noPattern: false		context: nil		notifying: (SilentCompilerErrorHandler new class: method mclass; failBlock: [^symbols])		builder: ProgramNodeBuilder new		saveComments: true		ifFail: [^symbols].	tree comment ifNil: [^symbols].	comment := tree comment first readStream.	[comment atEnd] whileFalse:		[ | key values |		comment skipSeparators.		key := comment upTo: $:.		comment skipSeparators.		values := ((comment upTo: Character cr) tokensBasedOn: Character space) collect: [:each | each asSymbol].		symbols at: key put: values asArray].	^symbols</body><body package="OpenGL">usesSymbol: aSymbol	| allUsers |	allUsers := Set new.	self methodDictionary keysAndValuesDo: [:selector :method | (self symbols: method) do: [:values | (values includes: aSymbol) ifTrue: [allUsers add: selector]]].	^allUsers</body></methods><methods><class-id>OpenGL.OpenGLInterface class</class-id> <category>private</category><body package="OpenGL">initializeDataTypes	| instance |	instance := self new.	^Dictionary new		at: instance BOOL put: instance GLboolean;		at: instance BYTE put: instance GLbyte;		at: instance DOUBLE put: instance GLdouble;		at: instance FLOAT put: instance GLfloat;		at: instance INT put: instance GLint;		at: instance SHORT put: instance GLshort;		at: instance UNSIGNED_BYTE put: instance GLubyte;		at: instance UNSIGNED_INT put: instance GLuint;		at: instance UNSIGNED_SHORT put: instance GLushort;		yourself</body><body package="OpenGL">postCopy	super postCopy.	self selectorsAndMethodsDo: [:selector :method | methodDict at: selector put: method copy].	self flushVMmethodCache</body></methods><methods><class-id>OpenGL.RenderState</class-id> <category>accessing</category><body package="OpenGL">attributeAt: aName	^attributes at: aName</body><body package="OpenGL">attributeAt: aName put: aValue	^attributes at: aName put: aValue</body><body package="OpenGL">attributes	^attributes</body><body package="OpenGL">indices	^indices</body><body package="OpenGL">indices: anObject	indices := anObject asDrawElementIndices</body><body package="OpenGL">mode	^mode</body><body package="OpenGL">mode: anObject	mode := anObject</body><body package="OpenGL">properties	^properties</body><body package="OpenGL">propertyAt: aName	^properties at: aName</body><body package="OpenGL">propertyAt: aName put: aValue	^properties at: aName put: aValue</body><body package="OpenGL">uniformAt: aName	^uniforms at: aName</body><body package="OpenGL">uniformAt: aName put: aValue	^uniforms at: aName put: aValue</body><body package="OpenGL">uniforms	^uniforms</body><body package="OpenGL">varyingAt: aName	^varyings at: aName</body><body package="OpenGL">varyingAt: aName put: aValue	^varyings at: aName put: aValue</body><body package="OpenGL">varyings	^varyings</body></methods><methods><class-id>OpenGL.RenderState</class-id> <category>initialize-release</category><body package="OpenGL">initialize	mode := gl TRIANGLES.	attributes := Dictionary new.	uniforms := Dictionary new.	varyings := Dictionary new.	properties := Dictionary new</body><body package="OpenGL">release	attributes do: [:each | each release].	uniforms do: [:each | each release].	super release</body></methods><methods><class-id>OpenGL.RenderState</class-id> <category>rendering</category><body package="OpenGL">feedback	| program |	program := Context program.	uniforms keysAndValuesDo: [:name :value | program uniform: name value: value].	attributes keysAndValuesDo: [:name :array | program attribute: name array: array].	varyings keysAndValuesDo: [:name :buffer | program feedback: name buffer: buffer].	gl BeginTransformFeedbackEXT: mode.	gl CheckError.	indices drawElements: mode.	gl EndTransformFeedbackEXT.	gl CheckError</body><body package="OpenGL">render	| program |	program := Context program.	uniforms keysAndValuesDo: [:name :value | program uniform: name value: value].	attributes keysAndValuesDo: [:name :array | program attribute: name array: array].	indices drawElements: mode</body></methods><methods><class-id>OpenGL.RenderState class</class-id> <category>instance creation</category><body package="OpenGL">new	^super new initialize</body></methods><methods><class-id>OpenGL.FloatArray</class-id> <category>private</category><body package="OpenGL">byteAt: index 	"Answer the byte at the given index."	^self basicAt: index</body><body package="OpenGL">byteAt: index put: aByte	"Store a byte at the given index."	^self basicAt: index put: aByte</body><body package="OpenGL">floatAt: byteIndex	"Answer a single-precision (32 bit) floating point quantity	starting at the given byteIndex."	&lt;primitive: 548&gt;	byteIndex isInteger ifTrue:		[^(byteIndex &lt; 1 or: [byteIndex + Float instanceByteSize - 1 &gt; self sizeInBytes])			ifTrue: [self subscriptBoundsErrorFor: #floatAt: index: byteIndex]			ifFalse: [Float domainErrorSignal						raiseRequestWith: byteIndex						errorString: (#errInvalidFloat &lt;&lt; #dialogs &gt;&gt; 'Invalid float at this index')]].	^byteIndex respondsToArithmetic		ifTrue: [self floatAt: byteIndex asSmallInteger]		ifFalse: [self nonIntegerIndexError: byteIndex]</body><body package="OpenGL">floatAt: byteIndex put: aFloat 	"Store a single-precision (32 bit) floating point quantity 	starting at the given byteIndex."	&lt;primitive: 549&gt;	| float |	byteIndex respondsToArithmetic		ifTrue:			[byteIndex isInteger ifTrue:				[(byteIndex &lt; 1 or: [byteIndex + Float instanceByteSize - 1 &gt; self sizeInBytes]) ifTrue: 					[^self subscriptBoundsErrorFor: #floatAt:put: index: byteIndex value: aFloat]]]		ifFalse:			[^self nonIntegerIndexError: byteIndex].	"The only way we can do this is by 	storing the Float byte-by-byte."	float := aFloat asFloat.	self byteAt: byteIndex put: (float basicAt: 1).	self byteAt: byteIndex + 1 put: (float basicAt: 2).	self byteAt: byteIndex + 2 put: (float basicAt: 3).	self byteAt: byteIndex + 3 put: (float basicAt: 4).	^float</body><body package="OpenGL">species	^FloatArray</body></methods><methods><class-id>OpenGL.FloatArray</class-id> <category>accessing</category><body package="OpenGL">as: aType at: anIndex	^aType new		replaceFrom: 1 to: aType size with: self startingAt: anIndex;		yourself</body><body package="OpenGL">as: aType do: aBlock	| instance |	instance := aType new.	1 to: self size by: aType components do: [:index |		instance replaceFrom: 1 to: instance size with: self startingAt: index.		aBlock value: instance.		self replaceFrom: index to: index + instance size - 1 with: instance startingAt: 1]</body><body package="OpenGL">as: aType keysAndValuesDo: aBlock	| key |	key := 1.	self as: aType do: [:each |		aBlock value: key value: each.		key := key + 1]</body><body package="OpenGL">at: index	"Answer the value of an indexable field in the receiver.  Fail if the  	argument index is not a SmallInteger, or is out of bounds."	^self floatAt: index * 4 - 3</body><body package="OpenGL">at: index put: aFloat	"Store the argument value in the indexable field of the receiver	indicated by index. Fail if the index is not a SmallInteger or	is out of bounds, or if the word is not an integer	between 0 and 2**32-1. Answer the value that was stored."	^self floatAt: index * 4 - 3 put: aFloat</body><body package="OpenGL">size	"Override this message to access 32-bit words."	^self basicSize // 4</body><body package="OpenGL">sizeInBytes	"Answer how many bytes the receiver contains."	^self basicSize</body></methods><methods><class-id>OpenGL.FloatArray</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl Uniform1fv: index with: self size with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.FloatArray</class-id> <category>user interface</category><body package="OpenGL">inspectorExtraAttributes	^Array with: (Tools.Trippy.DerivedAttribute label: 'floats' valueBlock: [self asArray])</body></methods><methods><class-id>OpenGL.FloatArray class</class-id> <category>instance creation</category><body package="OpenGL">components	^1</body><body package="OpenGL">new	^self new: self components</body><body package="OpenGL">new: anInteger	^super basicNew: anInteger * 4</body><body package="OpenGL">newInFixedSpace: anInteger	^super basicNew: anInteger * 4</body></methods><methods><class-id>OpenGL.FloatArray class</class-id> <category>external accessing</category><body package="OpenGL">baseCType	"Answer the receiver's base type with respect to the external interface C language type machinery."	^CLimitedPrecisionRealType float pointerType</body></methods><methods><class-id>OpenGL.Matrix</class-id> <category>accessing</category><body package="OpenGL">columns	^self class columns</body><body package="OpenGL">dimensions	^self columns, self rows</body><body package="OpenGL">indexAt: position	(position x between: 1 and: self columns) ifFalse: [self error: 'out of bounds'].	(position y between: 1 and: self rows) ifFalse: [self error: 'out of bounds'].	^(position x - 1) * self rows + position y</body><body package="OpenGL">rows	^self class rows</body><body package="OpenGL">valueAt: position	^self at: (self indexAt: position)</body><body package="OpenGL">valueAt: position put: aFloat	^self at: (self indexAt: position) put: aFloat</body></methods><methods><class-id>OpenGL.Matrix</class-id> <category>printing</category><body package="OpenGL">printOn: aStream	1 to: self rows do: [:row |		1 to: self columns do: [:column |			aStream print: (self valueAt: column @ row).			column &lt; self columns ifTrue: [aStream tab]].		row &lt; self rows ifTrue: [aStream cr]]</body></methods><methods><class-id>OpenGL.Matrix</class-id> <category>user interface</category><body package="OpenGL">inspectorClasses	^Array		with: Tools.Trippy.BasicInspector		with: Tools.Trippy.ArrayInspector</body></methods><methods><class-id>OpenGL.Matrix class</class-id> <category>instance creation</category><body package="OpenGL">columns	^self subclassResponsibility</body><body package="OpenGL">components	^self rows * self columns</body><body package="OpenGL">rows	^self subclassResponsibility</body></methods><methods><class-id>OpenGL.Matrix4x3</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl UniformMatrix4x3fv: index with: 1 with: gl FALSE with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Matrix4x3 class</class-id> <category>instance creation</category><body package="OpenGL">columns	^4</body><body package="OpenGL">rows	^3</body></methods><methods><class-id>OpenGL.Matrix4</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl UniformMatrix4fv: index with: 1 with: gl FALSE with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Matrix4 class</class-id> <category>instance creation</category><body package="OpenGL">columns	^4</body><body package="OpenGL">frustrum: bounds near: near far: far	| left right top bottom A B C D |	left := bounds left.	right := bounds right.	top := bounds top.	bottom := bounds bottom.	A := (right + left) / (right - left).	B := (top + bottom) / (top - bottom).	C := ((far + near) / (far - near)) negated.	D := ((2 * far * near) / (far - near)) negated.	^self withAll: (OrderedCollection new		add: (2 * near) / (right - left);	add: 0;						add: 0;	add: 0;		add: 0;						add: (2 * near) / (top - bottom);	add: 0;	add: 0;		add: A;						add: B;						add: C;	add: -1;		add: 0;						add: 0;						add: D;	add: 0;		yourself)</body><body package="OpenGL">identity	^self withAll:		#(	1 0 0 0			0 1 0 0			0 0 1 0			0 0 0 1	)</body><body package="OpenGL">orthogonal: bounds near: near far: far	| left right top bottom Tx Ty Tz |	left := bounds left.	right := bounds right.	top := bounds top.	bottom := bounds bottom.	Tx := ((right + left) / (right - left)) negated.	Ty := ((top + bottom) / (top - bottom)) negated.	Tz := ((far + near) / (far - near)) negated.	^self withAll: (OrderedCollection new		add: 2 / (right - left);	add: 0;					add: 0;				add: 0;		add: 0;				add: 2 / (top - bottom);		add: 0;				add: 0;		add: 0;				add: 0;					add: -2 / (far - near);	add: 0;		add: Tx;				add: Ty;					add: Tz;				add: 1;		yourself)</body><body package="OpenGL">perspective	^self withAll:		#(	1 0 0 0			0 1 0 0			0 0 1 0			0 0 1 0	)</body><body package="OpenGL">perspective: fieldOfViewRadians aspect: aspect near: near far: far	| f |	f := 1 / ((fieldOfViewRadians / 2) tan).	^self withAll: (OrderedCollection new		add: f / aspect;	add: 0;		add: 0;							add: 0;		add: 0;			add: f;		add: 0;							add: 0;		add: 0;			add: 0;		add: (far + near) / (near - far);		add: -1;		add: 0;			add: 0;		add: (2 * far * near) / (near - far);	add: 0;		yourself)</body><body package="OpenGL">rotationX: angle	^self withAll: (OrderedCollection new		add: 1;	add: 0;					add: 0;			add: 0;		add: 0;	add: angle cos;			add: angle sin;	add: 0;		add: 0;	add: angle sin negated;	add: angle cos;	add: 0;		add: 0;	add: 0;					add: 0;			add: 1;		yourself)</body><body package="OpenGL">rotationY: angle	^self withAll: (OrderedCollection new		add: angle cos;	add: 0;	add: angle sin negated;	add: 0;		add: 0;			add: 1;	add: 0;					add: 0;		add: angle sin;	add: 0;	add: angle cos;			add: 0;		add: 0;			add: 0;	add: 0;					add: 1;		yourself)</body><body package="OpenGL">rotationZ: angle	^self withAll: (OrderedCollection new		add: angle cos;			add: angle sin;	add: 0;	add: 0;		add: angle sin negated;	add: angle cos;	add: 0;	add: 0;		add: 0;					add: 0;			add: 1;	add: 0;		add: 0;					add: 0;			add: 0;	add: 1;		yourself)</body><body package="OpenGL">rows	^4</body><body package="OpenGL">scalingX: x y: y z: z	^self scalingX: x y: y z: z w: 1</body><body package="OpenGL">scalingX: x y: y z: z w: w	^self withAll: (OrderedCollection new		add: x; add: 0; add: 0; add: 0;		add: 0; add: y; add: 0; add: 0;		add: 0; add: 0; add: z; add: 0;		add: 0; add: 0; add: 0; add: w;		yourself)</body><body package="OpenGL">translationX: x y: y z: z	^self withAll: (OrderedCollection new		add: 1; add: 0; add: 0; add: 0;		add: 0; add: 1; add: 0; add: 0;		add: 0; add: 0; add: 1; add: 0;		add: x; add: y; add: z; add: 1;		yourself)</body></methods><methods><class-id>OpenGL.Matrix2x4</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl UniformMatrix2x4fv: index with: 1 with: gl FALSE with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Matrix2x4 class</class-id> <category>instance creation</category><body package="OpenGL">columns	^2</body><body package="OpenGL">components	^8</body><body package="OpenGL">rows	^4</body></methods><methods><class-id>OpenGL.Color3</class-id> <category>accessing</category><body package="OpenGL">b	^self at: 3</body><body package="OpenGL">b: aFloat	^self at: 3 put: aFloat</body><body package="OpenGL">g	^self at: 2</body><body package="OpenGL">g: aFloat	^self at: 2 put: aFloat</body><body package="OpenGL">r	^self at: 1</body><body package="OpenGL">r: aFloat	^self at: 1 put: aFloat</body></methods><methods><class-id>OpenGL.Color3</class-id> <category>user interface</category><body package="OpenGL">inspectorClasses	^Array with: Tools.Trippy.BasicInspector</body><body package="OpenGL">inspectorExtraAttributes	^super inspectorExtraAttributes,		(Array			with: (Tools.Trippy.DerivedAttribute label: 'r' valueBlock: [self r])			with: (Tools.Trippy.DerivedAttribute label: 'g' valueBlock: [self g])			with: (Tools.Trippy.DerivedAttribute label: 'b' valueBlock: [self b]))</body></methods><methods><class-id>OpenGL.Color3</class-id> <category>printing</category><body package="OpenGL">printCMYhexOn: aStream	| colorValue |	colorValue := self asColorValue.	aStream cr; nextPutAll: 'CMY hex:'; tab.	(colorValue cyan * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16.	(colorValue magenta * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16.	(colorValue yellow * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16</body><body package="OpenGL">printHSVhexOn: aStream	| colorValue |	colorValue := self asColorValue.	aStream cr; nextPutAll: 'HSV hex:'; tab.	(colorValue hue * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16.	(colorValue saturation * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16.	(colorValue brightness * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16</body><body package="OpenGL">printNamedOn: aStream	(ColorValue constantNameFor: self asColorValue) ifNotNil: [:constantName | aStream nextPutAll: 'Named:'; tab; tab; nextPutAll: constantName asString; cr]</body><body package="OpenGL">printOn: aStream	self printNamedOn: aStream.	self printRGBfloatOn: aStream.	self printRGBhexOn: aStream.	self printCMYhexOn: aStream.	self printHSVhexOn: aStream</body><body package="OpenGL">printRGBfloatOn: aStream	aStream nextPutAll: 'RGB float:'; tab; print: self r.	aStream nextPutAll: ', '; print: self g.	aStream nextPutAll: ', '; print: self b</body><body package="OpenGL">printRGBhexOn: aStream	aStream cr; nextPutAll: 'RGB hex:'; tab.	(self r * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16.	(self g * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16.	(self b * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16</body></methods><methods><class-id>OpenGL.Color3</class-id> <category>converting</category><body package="OpenGL">asColorValue	^ColorValue red: self r green: self g blue: self b</body></methods><methods><class-id>OpenGL.Color3</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl Uniform3fv: index with: 1 with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Color3 class</class-id> <category>instance creation</category><body package="OpenGL">components	^3</body></methods><methods><class-id>OpenGL.Color4</class-id> <category>accessing</category><body package="OpenGL">a	^self at: 4</body><body package="OpenGL">a: aFloat	^self at: 4 put: aFloat</body></methods><methods><class-id>OpenGL.Color4</class-id> <category>user interface</category><body package="OpenGL">inspectorExtraAttributes	^super inspectorExtraAttributes,		(Array with: (Tools.Trippy.DerivedAttribute label: 'a' valueBlock: [self a]))</body></methods><methods><class-id>OpenGL.Color4</class-id> <category>printing</category><body package="OpenGL">printCMYhexOn: aStream	super printCMYhexOn: aStream.	(self a * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16</body><body package="OpenGL">printHSVhexOn: aStream	super printHSVhexOn: aStream.	(self a * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16</body><body package="OpenGL">printRGBfloatOn: aStream	super printRGBfloatOn: aStream.	aStream nextPutAll: ', '; print: self a</body><body package="OpenGL">printRGBhexOn: aStream	super printRGBhexOn: aStream.	(self a * 255) floor printOn: aStream paddedWith: $0 to: 2 base: 16</body></methods><methods><class-id>OpenGL.Color4</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl Uniform4fv: index with: 1 with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Color4 class</class-id> <category>instance creation</category><body package="OpenGL">components	^4</body></methods><methods><class-id>OpenGL.RenderBuffer</class-id> <category>initialize-release</category><body package="OpenGL">initialize	| pointer |	pointer := gl GLuint malloc: 1.	gl GenRenderbuffersEXT: 1 with: pointer.	id := pointer contents.	pointer free</body><body package="OpenGL">release	id ifNotNil:		[ | pointer |		pointer := gl GLuint malloc: 1.		pointer contents: id.		gl DeleteRenderbuffersEXT: 1 with: pointer.		pointer free].	super release</body></methods><methods><class-id>OpenGL.RenderBuffer</class-id> <category>api</category><body package="OpenGL">bind	gl BindRenderbufferEXT: gl RENDERBUFFER_EXT with: id.	gl CheckError</body><body package="OpenGL">storage: format extent: extent	self storage: format width: extent x height: extent y</body><body package="OpenGL">storage: format width: width height: height	gl RenderbufferStorageEXT: gl RENDERBUFFER_EXT with: format with: width with: height.	gl CheckError</body><body package="OpenGL">storageMultisample: samples format: format extent: extent	self storageMultisample: samples format: format width: extent x height: extent y</body><body package="OpenGL">storageMultisample: samples format: format width: width height: height	gl RenderbufferStorageMultisampleEXT: gl RENDERBUFFER_EXT with: samples with: format with: width with: height.	gl CheckError</body><body package="OpenGL">unbind	gl BindRenderbufferEXT: gl RENDERBUFFER_EXT with: 0.	gl CheckError</body></methods><methods><class-id>OpenGL.RenderBuffer</class-id> <category>testing</category><body package="OpenGL">isValid	^(gl IsRenderbufferEXT: id) = gl TRUE</body></methods><methods><class-id>OpenGL.RenderBuffer</class-id> <category>private</category><body package="OpenGL">attachToFrameBuffer: attachment	gl FramebufferRenderbufferEXT: gl FRAMEBUFFER_EXT with: attachment with: gl RENDERBUFFER_EXT with: id.	gl CheckError</body></methods><methods><class-id>OpenGL.RenderBuffer class</class-id> <category>instance creation</category><body package="OpenGL">new	^super new initialize</body></methods><methods><class-id>OpenGL.FrameBuffer</class-id> <category>initialize-release</category><body package="OpenGL">initialize	| pointer |	pointer := gl GLuint malloc: 1.	gl GenFramebuffersEXT: 1 with: pointer.	id := pointer contents.	pointer free</body><body package="OpenGL">release	id ifNotNil:		[ | pointer |		pointer := gl GLuint malloc: 1.		pointer contents: id.		gl DeleteFramebuffersEXT: 1 with: pointer.		pointer free].	super release</body></methods><methods><class-id>OpenGL.FrameBuffer</class-id> <category>api - blitting</category><body package="OpenGL">blitFrom: sourceRectangle to: destinationRectangle mask: mask filter: filter	self blitOrigin: sourceRectangle origin corner: sourceRectangle corner toOrigin: destinationRectangle origin corner: destinationRectangle corner mask: mask filter: filter</body><body package="OpenGL">blitLeft: sourceLeft top: sourceTop right: sourceRight bottom: sourceBottom toLeft: destinationLeft top: destinationTop right: destinationRight bottom: destinationBottom mask: mask filter: filter	gl		BlitFramebufferEXT: sourceLeft with: sourceTop with: sourceRight with: sourceBottom		with: destinationLeft with: destinationTop with: destinationRight with: destinationBottom		with: mask with: filter.	gl CheckError</body><body package="OpenGL">blitOrigin: sourceOrigin corner: sourceCorner toOrigin: destinationOrigin corner: destinationCorner mask: mask filter: filter	self		blitLeft: sourceOrigin x top: sourceOrigin y right: sourceCorner x bottom: sourceCorner y		toLeft: destinationOrigin x top: destinationOrigin y right: destinationCorner x bottom: destinationCorner y		mask: mask filter: filter</body><body package="OpenGL">blitOrigin: sourceOrigin extent: sourceExtent toOrigin: destinationOrigin extent: destinationExtent mask: mask filter: filter	self blitOrigin: sourceOrigin corner: sourceOrigin + sourceExtent toOrigin: destinationOrigin corner: destinationOrigin + destinationExtent mask: mask filter: filter</body></methods><methods><class-id>OpenGL.FrameBuffer</class-id> <category>testing</category><body package="OpenGL">isComplete	^(gl CheckFramebufferStatusEXT: gl FRAMEBUFFER_EXT) = gl FRAMEBUFFER_COMPLETE_EXT</body><body package="OpenGL">isValid	^(gl IsFramebufferEXT: id) = gl TRUE</body></methods><methods><class-id>OpenGL.FrameBuffer</class-id> <category>api</category><body package="OpenGL">attach: aRenderBufferOrTexture attachment: attachment	aRenderBufferOrTexture attachToFrameBuffer: attachment</body><body package="OpenGL">bind	gl BindFramebufferEXT: gl FRAMEBUFFER_EXT with: id.	gl CheckError</body><body package="OpenGL">status	| status |	status := gl CheckFramebufferStatusEXT: gl FRAMEBUFFER_EXT.	^#(FRAMEBUFFER_COMPLETE_EXT FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT FRAMEBUFFER_INCOMPLETE_FORMATS_EXT FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT FRAMEBUFFER_UNSUPPORTED_EXT)		detect: [:each | (gl perform: each) = status] ifNone: ['UNKNOWN_STATUS']</body><body package="OpenGL">unbind	gl BindFramebufferEXT: gl FRAMEBUFFER_EXT with: 0.	gl CheckError</body></methods><methods><class-id>OpenGL.FrameBuffer class</class-id> <category>instance creation</category><body package="OpenGL">new	^super new initialize</body></methods><methods><class-id>OpenGL.Matrix3x2</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl UniformMatrix3x2fv: index with: 1 with: gl FALSE with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Matrix3x2 class</class-id> <category>instance creation</category><body package="OpenGL">columns	^3</body><body package="OpenGL">rows	^2</body></methods><methods><class-id>OpenGL.Buffer</class-id> <category>initialize-release</category><body package="OpenGL">initialize	| pointer |	pointer := gl GLuint malloc: 1.	gl GenBuffers: 1 with: pointer.	id := pointer contents.	pointer free</body><body package="OpenGL">initializeType: aType	self initialize.	type := aType</body><body package="OpenGL">release	id ifNotNil:		[ | pointer |		pointer := gl GLuint malloc: 1.		pointer contents: id.		gl DeleteBuffers: 1 with: pointer.		pointer free].	super release</body></methods><methods><class-id>OpenGL.Buffer</class-id> <category>api</category><body package="OpenGL">bind	gl BindBuffer: type with: id.	gl CheckError</body><body package="OpenGL">bindAsTransformFeedback: index	gl BindBufferBaseEXT: gl TRANSFORM_FEEDBACK_BUFFER_EXT with: index with: id.	gl CheckError</body><body package="OpenGL">copyInto: aFloatArray	| pointer |	self bind.	pointer := self mapReadOnly.	OSSystemSupport concreteClass new copyMemory: pointer to: aFloatArray length: aFloatArray sizeInBytes.	self unmap.	self unbind</body><body package="OpenGL">data: aFloatArray mode: mode	self bind.	gl BufferData: type with: aFloatArray sizeInBytes with: aFloatArray with: mode.	gl CheckError</body><body package="OpenGL">data: dataType size: size mode: mode	self bind.	gl BufferData: type with: size * dataType dataSize with: nil with: mode.	gl CheckError</body><body package="OpenGL">mapReadOnly	| pointer |	pointer := gl MapBuffer: type with: gl READ_ONLY.	gl CheckError.	^pointer</body><body package="OpenGL">mapReadWrite	| pointer |	pointer := gl MapBuffer: type with: gl READ_WRITE.	gl CheckError.	^pointer</body><body package="OpenGL">mapWriteOnly	| pointer |	pointer := gl MapBuffer: type with: gl WRITE_ONLY.	gl CheckError.	^pointer</body><body package="OpenGL">unbind	gl BindBuffer: type with: 0.	gl CheckError</body><body package="OpenGL">unmap	gl UnmapBuffer: type.	gl CheckError</body></methods><methods><class-id>OpenGL.Buffer</class-id> <category>testing</category><body package="OpenGL">isValid	^(gl IsBuffer: id) = gl TRUE</body></methods><methods><class-id>OpenGL.Buffer</class-id> <category>converting</category><body package="OpenGL">asAttributeArray: aType	^AttributeArray new		buffer: self;		components: aType components;		yourself</body><body package="OpenGL">asAttributeArray: aType offset: anOffset	^AttributeArray new		buffer: self;		components: aType components;		offset: anOffset;		yourself</body><body package="OpenGL">asAttributeArray: aType stride: aStride offset: anOffset	^AttributeArray new		buffer: self;		components: aType components;		stride: aStride;		offset: anOffset;		yourself</body></methods><methods><class-id>OpenGL.Buffer class</class-id> <category>instance creation</category><body package="OpenGL">newArrayBuffer	^self type: gl ARRAY_BUFFER</body><body package="OpenGL">newElementArrayBuffer	^self type: gl ELEMENT_ARRAY_BUFFER</body><body package="OpenGL">newPixelPackBuffer	^self type: gl PIXEL_PACK_BUFFER</body><body package="OpenGL">newPixelUnpackBuffer	^self type: gl PIXEL_UNPACK_BUFFER</body><body package="OpenGL">type: bufferType	^self new initializeType: bufferType</body></methods><methods><class-id>OpenGL.Vector2</class-id> <category>user interface</category><body package="OpenGL">inspectorClasses	^Array with: Tools.Trippy.BasicInspector</body><body package="OpenGL">inspectorExtraAttributes	^super inspectorExtraAttributes,		(Array			with: (Tools.Trippy.DerivedAttribute label: 'x' valueBlock: [self x])			with: (Tools.Trippy.DerivedAttribute label: 'y' valueBlock: [self y]))</body></methods><methods><class-id>OpenGL.Vector2</class-id> <category>accessing</category><body package="OpenGL">x	^self at: 1</body><body package="OpenGL">x: aFloat	^self at: 1 put: aFloat</body><body package="OpenGL">y	^self at: 2</body><body package="OpenGL">y: aFloat	^self at: 2 put: aFloat</body></methods><methods><class-id>OpenGL.Vector2</class-id> <category>printing</category><body package="OpenGL">printOn: aStream 	self do: [:each | aStream print: each] separatedBy: [aStream nextPutAll: ', '].</body></methods><methods><class-id>OpenGL.Vector2</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl Uniform2fv: index with: 1 with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Vector2 class</class-id> <category>instance creation</category><body package="OpenGL">components	^2</body></methods><methods><class-id>OpenGL.Vector3</class-id> <category>accessing</category><body package="OpenGL">z	^self at: 3</body><body package="OpenGL">z: aFloat	^self at: 3 put: aFloat</body></methods><methods><class-id>OpenGL.Vector3</class-id> <category>user interface</category><body package="OpenGL">inspectorExtraAttributes	^super inspectorExtraAttributes,		(Array with: (Tools.Trippy.DerivedAttribute label: 'z' valueBlock: [self z]))</body></methods><methods><class-id>OpenGL.Vector3</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl Uniform3fv: index with: 1 with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Vector3 class</class-id> <category>instance creation</category><body package="OpenGL">components	^3</body></methods><methods><class-id>OpenGL.Vector4</class-id> <category>accessing</category><body package="OpenGL">w	^self at: 4</body><body package="OpenGL">w: aFloat	^self at: 4 put: aFloat</body></methods><methods><class-id>OpenGL.Vector4</class-id> <category>user interface</category><body package="OpenGL">inspectorExtraAttributes	^super inspectorExtraAttributes,		(Array with: (Tools.Trippy.DerivedAttribute label: 'w' valueBlock: [self w]))</body></methods><methods><class-id>OpenGL.Vector4</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl Uniform4fv: index with: 1 with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Vector4 class</class-id> <category>instance creation</category><body package="OpenGL">components	^4</body></methods><methods><class-id>OpenGL.Texture</class-id> <category>accessing</category><body package="OpenGL">extent	^extent</body><body package="OpenGL">height	^extent y</body><body package="OpenGL">internalFormat	^internalFormat</body><body package="OpenGL">internalFormat: anObject	internalFormat := anObject</body><body package="OpenGL">magnification	^magnification</body><body package="OpenGL">magnification: anObject	magnification := anObject</body><body package="OpenGL">minification	^minification</body><body package="OpenGL">minification: anObject	minification := anObject</body><body package="OpenGL">target	^target</body><body package="OpenGL">target: anObject	target := anObject</body><body package="OpenGL">width	^extent x</body><body package="OpenGL">wrap	^wrap</body><body package="OpenGL">wrap: anObject	wrap := anObject</body></methods><methods><class-id>OpenGL.Texture</class-id> <category>testing</category><body package="OpenGL">isValid	^(gl IsTexture: id) = gl TRUE</body></methods><methods><class-id>OpenGL.Texture</class-id> <category>api</category><body package="OpenGL">active: textureUnit	gl ActiveTexture: gl TEXTURE0 + textureUnit.	gl CheckError.	self bind</body><body package="OpenGL">bind	gl BindTexture: target with: id.	gl CheckError</body><body package="OpenGL">bytes: aByteArray	self stream: aByteArray readStream</body><body package="OpenGL">empty: anExtent	self empty: anExtent levelOfDetail: 0</body><body package="OpenGL">empty: anExtent format: format dataType: dataType	self empty: anExtent levelOfDetail: 0 format: format dataType: dataType	" Normally, we would unbind it, but we deliberately leave the empty version bound because the developer may now want to upload data a different way, or attach a framebuffer, etc, all within the same parameters as would be done with #image: "</body><body package="OpenGL">empty: anExtent levelOfDetail: levelOfDetail	self empty: anExtent levelOfDetail: levelOfDetail format: gl RGBA dataType: gl UNSIGNED_BYTE	" Normally, we would unbind it, but we deliberately leave the empty version bound because the developer may now want to upload data a different way, or attach a framebuffer, etc, all within the same parameters as would be done with #image: "</body><body package="OpenGL">empty: anExtent levelOfDetail: levelOfDetail format: format dataType: dataType	self bind.	self setParameters.	extent := anExtent.	gl		TexImage2D: target with: levelOfDetail with: internalFormat		with: extent x with: extent y with: 0		with: format with: dataType with: nil.	gl CheckError	" Normally, we would unbind it, but we deliberately leave the empty version bound because the developer may now want to upload data a different way, or attach a framebuffer, etc, all within the same parameters as would be done with #image: "</body><body package="OpenGL">filename: aFilename	| stream |	stream := aFilename asFilename readStream binary.	[self stream: stream] ensure: [stream close]</body><body package="OpenGL">image: anImage		self bind.	self setParameters.	self setImage: anImage levelOfDetail: 0.	extent := anImage width, anImage height.	self unbind</body><body package="OpenGL">stream: aStream	self image: ((ImageReader readerClassFor: aStream) new from: aStream) image</body><body package="OpenGL">unbind	gl BindTexture: target with: 0.	gl CheckError</body></methods><methods><class-id>OpenGL.Texture</class-id> <category>initialize-release</category><body package="OpenGL">initialize	| pointer |	target := gl TEXTURE_2D.	minification := gl LINEAR.	magnification := gl LINEAR.	wrap := gl CLAMP_TO_EDGE, gl CLAMP_TO_EDGE, gl CLAMP_TO_EDGE.	extent := 0, 0.	internalFormat := gl RGBA.	pointer := gl GLuint malloc: 1.	gl GenTextures: 1 with: pointer.	id := pointer contents.	pointer free</body><body package="OpenGL">release	id ifNotNil:		[ | pointer |		pointer := gl GLuint malloc: 1.		pointer contents: id.		gl DeleteTextures: 1 with: pointer.		pointer free].	super release</body></methods><methods><class-id>OpenGL.Texture</class-id> <category>private</category><body package="OpenGL">attachToFrameBuffer: attachment	gl FramebufferTexture2DEXT: gl FRAMEBUFFER_EXT with: attachment with: target with: id with: 0.	gl CheckError</body><body package="OpenGL">setImage: anImage levelOfDetail: levelOfDetail		anImage textureParameters: [:format :datatype :data | 		gl			TexImage2D: target with: levelOfDetail with: internalFormat			with: anImage width with: anImage height with: 0			with: format with: datatype with: data].	gl CheckError</body><body package="OpenGL">setParameters	gl TexParameteri: target with: gl TEXTURE_MIN_FILTER with: minification.	gl TexParameteri: target with: gl TEXTURE_MAG_FILTER with: magnification.	gl TexParameteri: target with: gl TEXTURE_WRAP_S with: wrap x truncated.	gl TexParameteri: target with: gl TEXTURE_WRAP_T with: wrap y truncated.	gl TexParameteri: target with: gl TEXTURE_WRAP_R with: wrap z truncated</body><body package="OpenGL">setUniform: index	| unit |	unit := Context assignTextureUnitTo: self.	self active: unit.	unit setUniform: index</body></methods><methods><class-id>OpenGL.Texture class</class-id> <category>instance creation</category><body package="OpenGL">bytes: aByteArray	^self new bytes: aByteArray</body><body package="OpenGL">filename: aFilename	^self new filename: aFilename</body><body package="OpenGL">image: anImage	^self new image: anImage</body><body package="OpenGL">new	^super new initialize</body><body package="OpenGL">stream: aStream	^self new stream: aStream</body></methods><methods><class-id>OpenGL.Cubemap</class-id> <category>private</category><body package="OpenGL">setImage: anImage levelOfDetail: levelOfDetail		^self setImages: anImage levelOfDetail: levelOfDetail</body><body package="OpenGL">setImages: someImages levelOfDetail: levelOfDetail	someImages doWithIndex: [ :eachImage :index |		eachImage textureParameters: [:format :datatype :data | 			gl				TexImage2D: ((gl TEXTURE_CUBE_MAP_POSITIVE_X) + index - 1) with: levelOfDetail with: internalFormat				with: eachImage width with: eachImage height with: 0				with: format with: datatype with: data] ].	gl CheckError</body></methods><methods><class-id>OpenGL.Cubemap</class-id> <category>initialize-release</category><body package="OpenGL">initialize	super initialize.	target := gl TEXTURE_CUBE_MAP.</body></methods><methods><class-id>OpenGL.Animation</class-id> <category>controlling</category><body package="OpenGL">pause	outerSemaphore signal.	innerSemaphore wait</body><body package="OpenGL">resume	process ifNil: [^self].	started := Time millisecondClockValue.	disabled := started - stopped.	innerSemaphore signal.	outerSemaphore wait.	stopped := Time millisecondClockValue.	runtime := (runtime + stopped - started) // 2</body><body package="OpenGL">terminate	outerSemaphore signal.	process terminate.	process := nil</body></methods><methods><class-id>OpenGL.Animation</class-id> <category>initialize-release</category><body package="OpenGL">initialize: aBlock	innerSemaphore wait.	[aBlock value: self] ensure:		[outerSemaphore signal.		process := nil]</body><body package="OpenGL">initialize: aBlock named: aName	outerSemaphore := Semaphore new.	innerSemaphore := Semaphore new.	disabled := runtime := 0.	initialized := started := stopped := Time millisecondClockValue.	(process := [self initialize: aBlock] newProcess)		name: aName;		resume</body></methods><methods><class-id>OpenGL.Animation</class-id> <category>accessing</category><body package="OpenGL">disabled	^disabled</body><body package="OpenGL">initialized	^initialized</body><body package="OpenGL">runtime	^runtime</body><body package="OpenGL">started	^started</body><body package="OpenGL">stopped	^stopped</body></methods><methods><class-id>OpenGL.Animation</class-id> <category>printing</category><body package="OpenGL">printOn: aStream	aStream nextPutAll: process name</body></methods><methods><class-id>OpenGL.Animation class</class-id> <category>instance creation</category><body package="OpenGL">named: aName do: aBlock	^self new initialize: aBlock named: aName</body></methods><methods><class-id>OpenGL.RenderContext</class-id> <category>accessing</category><body package="OpenGL">bounds	^view bounds</body><body package="OpenGL">extensions	^extensions</body><body package="OpenGL">program	^program</body><body package="OpenGL">program: anObject	program := anObject</body><body package="OpenGL">renderer	^renderer</body><body package="OpenGL">vendor	^vendor</body><body package="OpenGL">version	^version</body><body package="OpenGL">view	^view</body></methods><methods><class-id>OpenGL.RenderContext</class-id> <category>private</category><body package="OpenGL">activateContext	self subclassResponsibility</body><body package="OpenGL">assignTextureUnitTo: aTexture	| unit |	(unit := textures indexOf: aTexture) isZero ifTrue:		[unit := self leastUsedTextureUnit.		textures at: unit put: aTexture].	texturesHistory at: unit put: (texturesHistory at: unit) + 1.	^unit - 1</body><body package="OpenGL">deactivateContext	self subclassResponsibility</body><body package="OpenGL">leastUsedTextureUnit	| unit least |	(unit := textures indexOf: nil) isZero ifFalse: [^unit].	least := SmallInteger maxVal.	texturesHistory keysAndValuesDo: [:each :count |		count &lt; least ifTrue: [least := count. unit := each]].	texturesHistory at: unit put: 0.	^unit</body><body package="OpenGL">resetProgram	program := nil</body><body package="OpenGL">resetTextures	1 to: textures size do: [:index |		textures at: index put: nil.		texturesHistory at: index put: 0].</body></methods><methods><class-id>OpenGL.RenderContext</class-id> <category>initialize-release</category><body package="OpenGL">initialize: aView	view := aView.	self initializeContext.	Lock critical:		[self activateContext.		self initializeInterface.		self initializeParameters.		self deactivateContext]</body><body package="OpenGL">initializeContext	self subclassResponsibility</body><body package="OpenGL">initializeInterface	self subclassResponsibility</body><body package="OpenGL">initializeParameters	vendor := (interface GetString: interface VENDOR) copyCStringFromHeap.	renderer := (interface GetString: interface RENDERER) copyCStringFromHeap.	version := (interface GetString: interface VERSION) copyCStringFromHeap.	extensions := (((interface GetString: interface EXTENSIONS) copyCStringFromHeap tokensBasedOn: Character space)		select: [:each | each notEmpty]) collect: [:each | (each allButFirst: 3) asSymbol].	version &lt; '2.0' ifTrue: [^self].	textures := Array new: (interface GetIntegerv: interface MAX_TEXTURE_UNITS).	texturesHistory := Array new: textures size</body><body package="OpenGL">on: aView	view := aView.	self setUp</body></methods><methods><class-id>OpenGL.RenderContext</class-id> <category>api</category><body package="OpenGL">activate	Lock wait.	OpenGL.Context := self.	OpenGL.gl := interface.	self resetTextures.	self resetProgram.	self activateContext</body><body package="OpenGL">deactivate	self deactivateContext.	OpenGL.gl := nil.	OpenGL.Context := nil.	Lock signal</body><body package="OpenGL">flush	self subclassResponsibility</body><body package="OpenGL">resize	self subclassResponsibility</body><body package="OpenGL">whileCurrentDo: aBlock	self activate.	^aBlock ensure: [self deactivate]</body></methods><methods><class-id>OpenGL.RenderContext class</class-id> <category>instance creation</category><body package="OpenGL">on: aView	^(self renderContextClassFor: aView) new initialize: aView</body></methods><methods><class-id>OpenGL.RenderContext class</class-id> <category>private</category><body package="OpenGL">platformName	^nil</body><body package="OpenGL">renderContextClassFor: aWindowOrPixmap	| platformName |	platformName := Screen default platformName.	^self allSubclasses		detect:	[:aClass | aClass platformName = platformName and: [aWindowOrPixmap isKindOf: aClass viewClass]]		ifNone:	[self error: 'unsupported platform: ', platformName]</body><body package="OpenGL">viewClass	^nil</body></methods><methods><class-id>OpenGL.Matrix3x4</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl UniformMatrix3x4fv: index with: 1 with: gl FALSE with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Matrix3x4 class</class-id> <category>instance creation</category><body package="OpenGL">columns	^3</body><body package="OpenGL">rows	^4</body></methods><methods><class-id>OpenGL.Shader</class-id> <category>accessing</category><body package="OpenGL">attributes	^attributes</body><body package="OpenGL">type	^type</body><body package="OpenGL">type: anObject	type := anObject</body><body package="OpenGL">uniforms	^uniforms</body><body package="OpenGL">varyings	^varyings</body></methods><methods><class-id>OpenGL.Shader</class-id> <category>initialize-release</category><body package="OpenGL">initialize: aType	type := aType.	id := gl CreateShader: type</body><body package="OpenGL">release	id ifNotNil: [gl DeleteShader: id].	super release</body></methods><methods><class-id>OpenGL.Shader</class-id> <category>api</category><body package="OpenGL">compile: aSource	| sourcePointer sourceLengthPointer |	self parse: aSource.	sourcePointer := aSource gcCopyToHeap.	sourceLengthPointer := aSource size gcCopyToHeap.	gl ShaderSource: id with: 1 with: sourcePointer gcCopyToHeap with: sourceLengthPointer.	gl CheckError.	gl CompileShader: id.	gl CheckError</body><body package="OpenGL">status	| infoLogLengthPointer infoLogPointer infoLog |	infoLogLengthPointer := gl GLint gcMalloc.	gl GetShaderiv: id with: gl INFO_LOG_LENGTH with: infoLogLengthPointer.	infoLogPointer := gl GLchar gcMalloc: infoLogLengthPointer contents.	gl GetShaderInfoLog: id with: infoLogLengthPointer contents with: infoLogLengthPointer with: infoLogPointer.	infoLog := ByteString new: infoLogLengthPointer contents.	infoLogPointer copyAt: 0 to: infoLog size: infoLogLengthPointer contents startingAt: 1.	^infoLog</body></methods><methods><class-id>OpenGL.Shader</class-id> <category>testing</category><body package="OpenGL">isCompiled	| statusPointer |	statusPointer := gl GLint gcMalloc.	gl GetShaderiv: id with: gl COMPILE_STATUS with: statusPointer.	^statusPointer contents = gl TRUE</body><body package="OpenGL">isValid	^(gl IsShader: id) = gl TRUE</body></methods><methods><class-id>OpenGL.Shader</class-id> <category>private</category><body package="OpenGL">attachTo: aProgramId	self isCompiled ifFalse: [self error: self status].	gl AttachShader: aProgramId with: id.	gl CheckError</body><body package="OpenGL">parse: aSource	| stream line first last |	attributes := OrderedCollection new.	uniforms := OrderedCollection new.	varyings := OrderedCollection new.	" The following code attempts to extract the attribute, uniform and varying declarations in the shader source. It really should have a proper parser, but for now this hack seems to do the job. "	stream := aSource readStream.	[stream atEnd] whileFalse:		[line := stream skipSeparators; upTo: Character cr.		(line tokensBasedOn: $;) do: [:statement |			first := statement readStream skipSeparators upToSeparator.			last := statement readStream skipSeparators upToEnd reverse readStream upToSeparator reverse.			(first first: 9) = 'attribute' ifTrue: [attributes add: last].			(first first: 7) = 'uniform' ifTrue: [uniforms add: last].			(first first: 7) = 'varying' ifTrue: [varyings add: last]]]</body></methods><methods><class-id>OpenGL.Shader class</class-id> <category>instance creation</category><body package="OpenGL">newFragmentShader	^self new initialize: gl FRAGMENT_SHADER</body><body package="OpenGL">newFragmentShader: aSource	^self newFragmentShader		compile: aSource;		yourself</body><body package="OpenGL">newVertexShader	^self new initialize: gl VERTEX_SHADER</body><body package="OpenGL">newVertexShader: aSource	^self newVertexShader		compile: aSource;		yourself</body></methods><methods><class-id>OpenGL.Matrix2x3</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl UniformMatrix2x3fv: index with: 1 with: gl FALSE with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Matrix2x3 class</class-id> <category>instance creation</category><body package="OpenGL">columns	^2</body><body package="OpenGL">rows	^3</body></methods><methods><class-id>OpenGL.AttributeArray</class-id> <category>accessing</category><body package="OpenGL">buffer	^buffer</body><body package="OpenGL">buffer: anObject	buffer := anObject</body><body package="OpenGL">components	^components</body><body package="OpenGL">components: anObject	components := anObject</body><body package="OpenGL">normalized	^normalized = gl TRUE</body><body package="OpenGL">normalized: anObject	normalized := anObject ifTrue: [gl TRUE] ifFalse: [gl FALSE]</body><body package="OpenGL">offset	^offset</body><body package="OpenGL">offset: anObject	offset := anObject</body><body package="OpenGL">stride	^stride</body><body package="OpenGL">stride: anObject	stride := anObject</body><body package="OpenGL">type	^type</body><body package="OpenGL">type: anObject	type := anObject.	dataType := gl QueryDataType: type</body></methods><methods><class-id>OpenGL.AttributeArray</class-id> <category>initialize-release</category><body package="OpenGL">initialize	offset := 0.	stride := 0.	type := gl FLOAT.	dataType := gl QueryDataType: type. 	normalized := gl FALSE</body><body package="OpenGL">release	buffer release.	super release</body></methods><methods><class-id>OpenGL.AttributeArray</class-id> <category>opengl</category><body package="OpenGL">setVertexAttributePointer: index	buffer bind.	gl VertexAttribPointer: index with: components with: type with: normalized with: stride * dataType dataSize with: offset * dataType dataSize.	gl CheckError</body></methods><methods><class-id>OpenGL.AttributeArray class</class-id> <category>instance creation</category><body package="OpenGL">new	^super new initialize</body></methods><methods><class-id>OpenGL.Matrix2</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl UniformMatrix2fv: index with: 1 with: gl FALSE with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Matrix2 class</class-id> <category>instance creation</category><body package="OpenGL">columns	^2</body><body package="OpenGL">identity	^self withAll:		#(	1 0			0 1	)</body><body package="OpenGL">rotation: angle	^self withAll: (OrderedCollection new		add: angle cos; add: angle sin;		add: angle sin negated; add: angle cos;		yourself)</body><body package="OpenGL">rows	^2</body><body package="OpenGL">scalingX: x y: y	^self withAll: (OrderedCollection new		add: x; add: 0;		add: 0; add: y;		yourself)</body></methods><methods><class-id>OpenGL.Matrix4x2</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl UniformMatrix4x2fv: index with: 1 with: gl FALSE with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Matrix4x2 class</class-id> <category>instance creation</category><body package="OpenGL">columns	^4</body><body package="OpenGL">rows	^2</body></methods><methods><class-id>OpenGL.Program</class-id> <category>testing</category><body package="OpenGL">isLinked	| statusPointer |	statusPointer := gl GLint gcMalloc.	gl GetProgramiv: id with: gl LINK_STATUS with: statusPointer.	^statusPointer contents = gl TRUE</body><body package="OpenGL">isValid	^(gl IsProgram: id) = gl TRUE</body></methods><methods><class-id>OpenGL.Program</class-id> <category>private</category><body package="OpenGL">disableVertexAttributeArray: index	(enabledAttributes at: index + 1) == true ifFalse: [^self].	gl DisableVertexAttribArray: index.	gl CheckError.	enabledAttributes at: index + 1 put: false</body><body package="OpenGL">enableVertexAttributeArray: index	(enabledAttributes at: index + 1) == true ifTrue: [^self].	gl EnableVertexAttribArray: index.	gl CheckError.	enabledAttributes at: index + 1 put: true.</body></methods><methods><class-id>OpenGL.Program</class-id> <category>api</category><body package="OpenGL">attach: aShader	aShader attachTo: id.	shaders add: aShader</body><body package="OpenGL">link	self initializeAttributes.	gl LinkProgram: id.	gl CheckError.	self isLinked ifFalse: [self error: self status].	self initializeUniforms</body><body package="OpenGL">status	| infoLogLengthPointer infoLogPointer infoLog |	infoLogLengthPointer := gl GLint gcMalloc.	gl GetProgramiv: id with: gl INFO_LOG_LENGTH with: infoLogLengthPointer.	infoLogPointer := gl GLchar gcMalloc: infoLogLengthPointer contents.	gl GetProgramInfoLog: id with: infoLogLengthPointer contents with: infoLogLengthPointer with: infoLogPointer.	infoLog := ByteString new: infoLogLengthPointer contents.	infoLogPointer copyAt: 0 to: infoLog size: infoLogLengthPointer contents startingAt: 1.	^infoLog</body><body package="OpenGL">unuse	0 to: enabledAttributes size - 1 do: [:index | self disableVertexAttributeArray: index].	gl UseProgram: 0.	Context program: nil</body><body package="OpenGL">use	Context program ifNotNil: [Context program unuse].	gl UseProgram: id.	gl CheckError.	Context program: self</body></methods><methods><class-id>OpenGL.Program</class-id> <category>accessing</category><body package="OpenGL">attributes	^attributes</body><body package="OpenGL">uniforms	^uniforms</body><body package="OpenGL">varyings	^varyings</body></methods><methods><class-id>OpenGL.Program</class-id> <category>api - variables</category><body package="OpenGL">attribute: name array: array	| index |	index := (attributes indexOf: name ifAbsent: [^self]) - 1 .	self enableVertexAttributeArray: index.	array setVertexAttributePointer: index</body><body package="OpenGL">attribute: name components: components type: type normalized: normalized stride: stride offset: offset	| index |	index := (attributes indexOf: name ifAbsent: [^self]) - 1 .	self enableVertexAttributeArray: index.	gl VertexAttribPointer: index with: components with: type with: (normalized ifTrue: [gl TRUE] ifFalse: [gl FALSE]) with: stride with: offset.	gl CheckError</body><body package="OpenGL">feedback: name buffer: buffer	| index |	index := (varyings indexOf: name) - 1.	index &lt; 0 ifTrue: [^self].	buffer bindAsTransformFeedback: index</body><body package="OpenGL">uniform: name value: value	| index |	index := (uniforms indexOf: name ifAbsent: [^self]) - 1.	value setUniform: index.	gl CheckError</body></methods><methods><class-id>OpenGL.Program</class-id> <category>initialize-release</category><body package="OpenGL">initialize	id := gl CreateProgram.	shaders := OrderedCollection new.	enabledAttributes := Array new: (gl GetIntegerv: gl MAX_VERTEX_ATTRIBS).	attributes := Array new: (gl GetIntegerv: gl MAX_VERTEX_ATTRIBS).	uniforms := Array new: (gl GetIntegerv: gl MAX_VERTEX_UNIFORM_COMPONENTS).	varyings := Array new: (gl GetIntegerv: gl MAX_VARYING_FLOATS)</body><body package="OpenGL">initializeAttributes	| index |	index := 0.	shaders do: [:shader |		shader attributes do: [:attribute |			(attributes includes: attribute) ifFalse:				[gl BindAttribLocation: id with: index with: attribute.				gl CheckError.				index := index + 1.				attributes at: index put: attribute]]]</body><body package="OpenGL">initializeUniforms	| index |	shaders do: [:shader |		shader uniforms do: [:uniform |			(uniforms includes: uniform) ifFalse:				[index := gl GetUniformLocation: id with:uniform.				gl CheckError.				index &gt;= 0 ifTrue: [uniforms at: index + 1 put: uniform]]]]</body><body package="OpenGL">release	id ifNotNil: [gl DeleteProgram: id].	super release</body><body package="OpenGL">varyings: aCollection mode: mode	| names namesPointer |	names := aCollection collect: [:each | each gcCopyToHeap].	namesPointer := (CPointerType defaultPointer referentType: gl GLchar) gcMalloc: names size.	names keysAndValuesDo: [:index :name | namesPointer at: index - 1 put: name].	gl TransformFeedbackVaryingsEXT: id with: aCollection size with: namesPointer with: mode.	gl CheckError.	varyings := aCollection</body></methods><methods><class-id>OpenGL.Program class</class-id> <category>instance creation</category><body package="OpenGL">new	^super new initialize</body><body package="OpenGL">type: bufferType	^self new initializeType: bufferType</body></methods><methods><class-id>OpenGL.Matrix3</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	gl UniformMatrix3fv: index with: 1 with: gl FALSE with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>OpenGL.Matrix3 class</class-id> <category>instance creation</category><body package="OpenGL">columns	^3</body><body package="OpenGL">identity	^self withAll:		#(	1 0 0			0 1 0			0 0 1	)</body><body package="OpenGL">perspective	^self withAll:		#(	1 0 0			0 1 0			0 1 0	)</body><body package="OpenGL">rotationX: angle	^self withAll: (OrderedCollection new		add: 1;	add: 0;					add: 0;		add: 0;	add: angle cos;			add: angle sin;		add: 0;	add: angle sin negated;	add: angle cos;		yourself)</body><body package="OpenGL">rotationY: angle	^self withAll: (OrderedCollection new		add: angle cos;	add: 0;	add: angle sin negated;		add: 0;			add: 1;	add: 0;		add: angle sin;	add: 0;	add: angle cos;		yourself)</body><body package="OpenGL">rotationZ: angle	^self withAll: (OrderedCollection new		add: angle cos;			add: angle sin;	add: 0;		add: angle sin negated;	add: angle cos;	add: 0;		add: 0;					add: 0;			add: 1;		yourself)</body><body package="OpenGL">rows	^3</body><body package="OpenGL">scalingX: x y: y	^self scalingX: x y: y z: 1</body><body package="OpenGL">scalingX: x y: y z: z	^self withAll: (OrderedCollection new		add: x; add: 0; add: 0;		add: 0; add: y; add: 0;		add: 0; add: 0; add: z;		yourself)</body><body package="OpenGL">translationX: x y: y	^self withAll: (OrderedCollection new		add: 1; add: 0; add: 0;		add: 0; add: 1; add: 0;		add: x; add: y; add: 1;		yourself)</body></methods><methods><class-id>OpenGL.Mipmap</class-id> <category>api</category><body package="OpenGL">image: anImage		| image levelOfDetail |	image := anImage.	extent := anImage width, anImage height.	levelOfDetail := 0.	self bind.	self setParameters.	gl TexParameteri: gl TEXTURE_2D with: gl TEXTURE_MIN_FILTER with: gl LINEAR_MIPMAP_LINEAR.	gl TexParameteri: gl TEXTURE_2D with: gl TEXTURE_BASE_LEVEL with: 0.	[self setImage: image levelOfDetail: levelOfDetail.	image := image half.	image width &lt;= 2 or: [image height &lt;= 2]] whileFalse: [levelOfDetail := levelOfDetail + 1].	gl TexParameteri: gl TEXTURE_2D with: gl TEXTURE_MAX_LEVEL with: levelOfDetail.	self unbind</body></methods><methods><class-id>Core.WordArray</class-id> <category>opengl</category><body package="OpenGL">drawElements: mode	OpenGL.gl DrawElements: mode with: self size with: OpenGL.gl UNSIGNED_SHORT with: self</body></methods><methods><class-id>Core.ByteArray</class-id> <category>opengl</category><body package="OpenGL">drawElements: mode	OpenGL.gl DrawElements: mode with: self size with: OpenGL.gl UNSIGNED_BYTE with: self</body></methods><methods><class-id>Core.SmallInteger</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	OpenGL.gl Uniform1i: index with: self.	OpenGL.gl CheckError</body></methods><methods><class-id>Core.Number</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	OpenGL.gl Uniform1f: index with: self asFloat.	OpenGL.gl CheckError</body></methods><methods><class-id>Core.IntegerArray</class-id> <category>converting</category><body package="OpenGL">asDrawElementIndices	^self</body></methods><methods><class-id>Core.Point</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	OpenGL.gl Uniform2f: index with: x with: y.	OpenGL.gl CheckError</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>converting</category><body package="OpenGL">asColor3	^OpenGL.Color3 new r: self red; g: self green; b: self blue; yourself</body><body package="OpenGL">asColor4	^OpenGL.Color4 new r: self red; g: self green; b: self blue; a: 1; yourself</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>opengl</category><body package="OpenGL">setUniform: index	OpenGL.gl Uniform3f: index with: self red with: self green with: self blue.	OpenGL.gl CheckError</body></methods><methods><class-id>Graphics.Depth1Image</class-id> <category>opengl</category><body package="OpenGL">textureParameters: aBlock	aBlock value: OpenGL.gl R value: OpenGL.gl UNSIGNED_BYTE value: bits</body></methods><methods><class-id>Graphics.Depth32Image</class-id> <category>opengl</category><body package="OpenGL">textureParameters: aBlock	| format datatype endian reverseEndian |	format := nil.	endian := UninterpretedBytes isBigEndian		ifTrue: [OpenGL.gl UNSIGNED_INT_8_8_8_8_REV]		ifFalse: [OpenGL.gl UNSIGNED_INT_8_8_8_8].	reverseEndian := UninterpretedBytes isBigEndian		ifTrue: [OpenGL.gl UNSIGNED_INT_8_8_8_8]		ifFalse: [OpenGL.gl UNSIGNED_INT_8_8_8_8_REV].	palette = ARGB_8888 ifTrue: [format := OpenGL.gl BGRA. datatype := endian].	palette = ABGR_8888 ifTrue: [format := OpenGL.gl RGBA. datatype := endian].	palette = BGRA_8888 ifTrue: [format := OpenGL.gl BGRA. datatype := reverseEndian].	palette = RGBA_8888 ifTrue: [format := OpenGL.gl RGBA. datatype := reverseEndian].	palette = RGB_888 ifTrue: [format := OpenGL.gl BGRA. datatype := endian].	palette = BGR_888 ifTrue: [format := OpenGL.gl RGBA. datatype := endian].	format ifNil: [^super textureParameters: aBlock].	aBlock value: format value: datatype value: bits</body></methods><methods><class-id>Graphics.Image</class-id> <category>converting</category><body package="OpenGL">half	^self shrunkenBy: 2 @ 2.</body></methods><methods><class-id>Graphics.Image</class-id> <category>opengl</category><body package="OpenGL">textureParameters: aBlock	| abgrImage |	abgrImage := self convertToPalette: FixedPalette ABGR_8888.	aBlock value: OpenGL.gl RGBA value: OpenGL.gl UNSIGNED_INT_8_8_8_8 value: abgrImage bitsInstVar</body></methods><methods><class-id>Core.Float class</class-id> <category>instance creation</category><body package="OpenGL">components	^1</body></methods><methods><class-id>Graphics.Depth8Image</class-id> <category>opengl</category><body package="OpenGL">textureParameters: aBlock	palette = A_8 ifTrue: [^aBlock value:  OpenGL.gl ALPHA value: OpenGL.gl UNSIGNED_BYTE value: bits].	super textureParameters: aBlock</body></methods><methods><class-id>Graphics.Depth24Image</class-id> <category>opengl</category><body package="OpenGL">textureParameters: aBlock	palette = RGB_888 ifTrue: [^aBlock value:  OpenGL.gl RGB value: OpenGL.gl UNSIGNED_BYTE value: bits].	palette = BGR_888 ifTrue: [^aBlock value: OpenGL.gl BGR value: OpenGL.gl UNSIGNED_BYTE value: bits].	super textureParameters: aBlock</body></methods><methods><class-id>Core.Array</class-id> <category>converting</category><body package="OpenGL">asDrawElementIndices	self reverseDo: [:each |		each &gt; 65536 ifTrue: [^DwordArray withAll: self].		each &gt; 256 ifTrue: [^WordArray withAll: self]].	^ByteArray withAll: self</body></methods><methods><class-id>Core.Interval</class-id> <category>converting</category><body package="OpenGL">asDrawElementIndices	^self</body></methods><methods><class-id>Core.Interval</class-id> <category>opengl</category><body package="OpenGL">drawElements: mode	OpenGL.gl DrawArrays: mode with: self first with: self size</body></methods><methods><class-id>Core.DwordArray</class-id> <category>opengl</category><body package="OpenGL">drawElements: mode	OpenGL.gl DrawElements: mode with: self size with: OpenGL.gl UNSIGNED_INT with: self</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api query objects</category><body package="OpenGL">BeginQuery: target with: id"	target:	SAMPLES_PASSED"	&lt;C: void glBeginQuery(GLenum target, GLuint id)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DeleteQueries: n with: ids	&lt;C: void glDeleteQueries(GLsizei n, const GLuint * ids)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">EndQuery: target"	target:	SAMPLES_PASSED"	&lt;C: void glEndQuery(GLenum target)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GenQueries: n with: ids	&lt;C: void glGenQueries(GLsizei n, GLuint * ids)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetQueryObjectiv: id with: pname with: params"	pname:	QUERY_RESULT QUERY_RESULT_AVAILABLE"	&lt;C: void glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetQueryObjectuiv: id with: pname with: params"	pname:	QUERY_RESULT QUERY_RESULT_AVAILABLE"	&lt;C: void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetQueryiv: target with: pname with: params"	target:	SAMPLES_PASSED	pname:	CURRENT_QUERY QUERY_COUNTER_BITS"	&lt;C: void glGetQueryiv(GLenum target, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">IsQuery: id	&lt;C: GLboolean glIsQuery(GLuint id)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api shader uniforms</category><body package="OpenGL">GetActiveUniform: program with: index with: bufSize with: length with: size with: type with: name"	type:	FLOAT FLOAT_VEC2 FLOAT_VEC3 FLOAT_VEC4 INT INT_VEC2 INT_VEC3 INT_VEC4 BOOL BOOL_VEC2 BOOL_VEC3 BOOL_VEC4 FLOAT_MAT2 FLOAT_MAT3 FLOAT_MAT4 FLOAT_MAT2x3 FLOAT_MAT2x4 FLOAT_MAT3x2 FLOAT_MAT3x4 FLOAT_MAT4x2 FLOAT_MAT4x3 SAMPLER_1D SAMPLER_2D SAMPLER_3D SAMPLER_CUBE SAMPLER_1D_SHADOW SAMPLER_2D_SHADOW"	&lt;C: void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetUniformLocation: program with: name	&lt;C: GLint glGetUniformLocation(GLuint program, const GLchar * name)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetUniformfv: program with: location with: params	&lt;C: void glGetUniformfv(GLuint program, GLint location, GLfloat * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetUniformiv: program with: location with: params	&lt;C: void glGetUniformiv(GLuint program, GLint location, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetUniformuivEXT: program with: location with: params	&lt;C: void glGetUniformuivEXT(GLuint program, GLint location, GLuint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform1f: location with: v0	&lt;C: void glUniform1f(GLint location, GLfloat v0)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform1fv: location with: count with: value	&lt;C: void glUniform1fv(GLint location, GLsizei count, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform1i: location with: v0	&lt;C: void glUniform1i(GLint location, GLint v0)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform1iv: location with: count with: value	&lt;C: void glUniform1iv(GLint location, GLsizei count, const GLint * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform1uiEXT: location with: v0	&lt;C: void glUniform1uiEXT(GLint location, GLuint v0)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform1uivEXT: location with: count with: value	&lt;C: void glUniform1uivEXT(GLint location, GLsizei count, const GLuint * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform2f: location with: v0 with: v1	&lt;C: void glUniform2f(GLint location, GLfloat v0, GLfloat v1)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform2fv: location with: count with: value	&lt;C: void glUniform2fv(GLint location, GLsizei count, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform2i: location with: v0 with: v1	&lt;C: void glUniform2i(GLint location, GLint v0, GLint v1)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform2iv: location with: count with: value	&lt;C: void glUniform2iv(GLint location, GLsizei count, const GLint * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform2uiEXT: location with: v0 with: v1	&lt;C: void glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform2uivEXT: location with: count with: value	&lt;C: void glUniform2uivEXT(GLint location, GLsizei count, const GLuint * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform3f: location with: v0 with: v1 with: v2	&lt;C: void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform3fv: location with: count with: value	&lt;C: void glUniform3fv(GLint location, GLsizei count, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform3i: location with: v0 with: v1 with: v2	&lt;C: void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform3iv: location with: count with: value	&lt;C: void glUniform3iv(GLint location, GLsizei count, const GLint * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform3uiEXT: location with: v0 with: v1 with: v2	&lt;C: void glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform3uivEXT: location with: count with: value	&lt;C: void glUniform3uivEXT(GLint location, GLsizei count, const GLuint * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform4f: location with: v0 with: v1 with: v2 with: v3	&lt;C: void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform4fv: location with: count with: value"	Status:	MAX_FRAGMENT_UNIFORM_COMPONENTS MAX_VERTEX_UNIFORM_COMPONENTS"	&lt;C: void glUniform4fv(GLint location, GLsizei count, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform4i: location with: v0 with: v1 with: v2 with: v3	&lt;C: void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform4iv: location with: count with: value	&lt;C: void glUniform4iv(GLint location, GLsizei count, const GLint * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform4uiEXT: location with: v0 with: v1 with: v2 with: v3	&lt;C: void glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Uniform4uivEXT: location with: count with: value	&lt;C: void glUniform4uivEXT(GLint location, GLsizei count, const GLuint * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UniformMatrix2fv: location with: count with: transpose with: value	&lt;C: void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UniformMatrix2x3fv: location with: count with: transpose with: value	&lt;C: void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UniformMatrix2x4fv: location with: count with: transpose with: value	&lt;C: void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UniformMatrix3fv: location with: count with: transpose with: value	&lt;C: void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UniformMatrix3x2fv: location with: count with: transpose with: value	&lt;C: void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UniformMatrix3x4fv: location with: count with: transpose with: value	&lt;C: void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UniformMatrix4fv: location with: count with: transpose with: value	&lt;C: void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UniformMatrix4x2fv: location with: count with: transpose with: value	&lt;C: void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UniformMatrix4x3fv: location with: count with: transpose with: value	&lt;C: void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api vertex attributes</category><body package="OpenGL">BindAttribLocation: program with: index with: name"	Status:	MAX_VERTEX_ATTRIBS"	&lt;C: void glBindAttribLocation(GLuint program, GLuint index, const GLchar * name)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BindFragDataLocationEXT: program with: colorNumber with: name	&lt;C: void glBindFragDataLocationEXT(GLuint program, GLuint colorNumber, const GLchar * name)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetActiveAttrib: program with: index with: bufSize with: length with: size with: type with: name"	type:	FLOAT FLOAT_VEC2 FLOAT_VEC3 FLOAT_VEC4 FLOAT_MAT2 FLOAT_MAT3 FLOAT_MAT4 FLOAT_MAT2x3 FLOAT_MAT2x4 FLOAT_MAT3x2 FLOAT_MAT3x4 FLOAT_MAT4x2 FLOAT_MAT4x3	Status:	MAX_VERTEX_ATTRIBS"	&lt;C: void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetAttribLocation: program with: name	&lt;C: GLint glGetAttribLocation(GLuint program, const GLchar * name)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetFragDataLocationEXT: program with: name	&lt;C: GLint glGetFragDataLocationEXT(GLuint program, const GLchar * name)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetVertexAttribIivEXT: index with: pname with: params	&lt;C: void glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetVertexAttribIuivEXT: index with: pname with: params	&lt;C: void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetVertexAttribdv: index with: pname with: params"	pname:	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING VERTEX_ATTRIB_ARRAY_ENABLED VERTEX_ATTRIB_ARRAY_SIZE VERTEX_ATTRIB_ARRAY_STRIDE VERTEX_ATTRIB_ARRAY_TYPE VERTEX_ATTRIB_ARRAY_NORMALIZED CURRENT_VERTEX_ATTRIB"	&lt;C: void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetVertexAttribfv: index with: pname with: params"	pname:	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING VERTEX_ATTRIB_ARRAY_ENABLED VERTEX_ATTRIB_ARRAY_SIZE VERTEX_ATTRIB_ARRAY_STRIDE VERTEX_ATTRIB_ARRAY_TYPE VERTEX_ATTRIB_ARRAY_NORMALIZED CURRENT_VERTEX_ATTRIB"	&lt;C: void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetVertexAttribiv: index with: pname with: params"	pname:	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING VERTEX_ATTRIB_ARRAY_ENABLED VERTEX_ATTRIB_ARRAY_SIZE VERTEX_ATTRIB_ARRAY_STRIDE VERTEX_ATTRIB_ARRAY_TYPE VERTEX_ATTRIB_ARRAY_NORMALIZED CURRENT_VERTEX_ATTRIB"	&lt;C: void glGetVertexAttribiv(GLuint index, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib1d: index with: x	&lt;C: void glVertexAttrib1d(GLuint index, GLdouble x)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib1dv: index with: v	&lt;C: void glVertexAttrib1dv(GLuint index, const GLdouble * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib1f: index with: x	&lt;C: void glVertexAttrib1f(GLuint index, GLfloat x)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib1fv: index with: v	&lt;C: void glVertexAttrib1fv(GLuint index, const GLfloat * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib1s: index with: x	&lt;C: void glVertexAttrib1s(GLuint index, GLshort x)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib1sv: index with: v	&lt;C: void glVertexAttrib1sv(GLuint index, GLshort const * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib2d: index with: x with: y	&lt;C: void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib2dv: index with: v	&lt;C: void glVertexAttrib2dv(GLuint index, const GLdouble * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib2f: index with: x with: y	&lt;C: void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib2fv: index with: v	&lt;C: void glVertexAttrib2fv(GLuint index, const GLfloat * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib2s: index with: x with: y	&lt;C: void glVertexAttrib2s(GLuint index, GLshort x, GLshort y)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib2sv: index with: v	&lt;C: void glVertexAttrib2sv(GLuint index, GLshort const * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib3d: index with: x with: y with: z	&lt;C: void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib3dv: index with: v	&lt;C: void glVertexAttrib3dv(GLuint index, const GLdouble * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib3f: index with: x with: y with: z	&lt;C: void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib3fv: index with: v	&lt;C: void glVertexAttrib3fv(GLuint index, const GLfloat * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib3s: index with: x with: y with: z	&lt;C: void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib3sv: index with: v	&lt;C: void glVertexAttrib3sv(GLuint index, GLshort const * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4Nbv: index with: v	&lt;C: void glVertexAttrib4Nbv(GLuint index, GLbyte const * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4Niv: index with: v	&lt;C: void glVertexAttrib4Niv(GLuint index, const GLint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4Nsv: index with: v	&lt;C: void glVertexAttrib4Nsv(GLuint index, GLshort const * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4Nub: index with: x with: y with: z with: w	&lt;C: void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4Nubv: index with: v	&lt;C: void glVertexAttrib4Nubv(GLuint index, const GLubyte * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4Nuiv: index with: v	&lt;C: void glVertexAttrib4Nuiv(GLuint index, const GLuint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4Nusv: index with: v	&lt;C: void glVertexAttrib4Nusv(GLuint index, GLushort const * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4bv: index with: v	&lt;C: void glVertexAttrib4bv(GLuint index, GLbyte const * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4d: index with: x with: y with: z with: w	&lt;C: void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4dv: index with: v	&lt;C: void glVertexAttrib4dv(GLuint index, const GLdouble * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4f: index with: x with: y with: z with: w	&lt;C: void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4fv: index with: v	&lt;C: void glVertexAttrib4fv(GLuint index, const GLfloat * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4iv: index with: v	&lt;C: void glVertexAttrib4iv(GLuint index, const GLint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4s: index with: x with: y with: z with: w	&lt;C: void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4sv: index with: v	&lt;C: void glVertexAttrib4sv(GLuint index, GLshort const * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4ubv: index with: v	&lt;C: void glVertexAttrib4ubv(GLuint index, const GLubyte * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4uiv: index with: v	&lt;C: void glVertexAttrib4uiv(GLuint index, const GLuint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttrib4usv: index with: v	&lt;C: void glVertexAttrib4usv(GLuint index, GLushort const * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI1iEXT: index with: x	&lt;C: void glVertexAttribI1iEXT(GLuint index, GLint x)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI1ivEXT: index with: v	&lt;C: void glVertexAttribI1ivEXT(GLuint index, const GLint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI1uiEXT: index with: x	&lt;C: void glVertexAttribI1uiEXT(GLuint index, GLuint x)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI1uivEXT: index with: v	&lt;C: void glVertexAttribI1uivEXT(GLuint index, const GLuint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI2iEXT: index with: x with: y	&lt;C: void glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI2ivEXT: index with: v	&lt;C: void glVertexAttribI2ivEXT(GLuint index, const GLint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI2uiEXT: index with: x with: y	&lt;C: void glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI2uivEXT: index with: v	&lt;C: void glVertexAttribI2uivEXT(GLuint index, const GLuint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI3iEXT: index with: x with: y with: z	&lt;C: void glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI3ivEXT: index with: v	&lt;C: void glVertexAttribI3ivEXT(GLuint index, const GLint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI3uiEXT: index with: x with: y with: z	&lt;C: void glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI3uivEXT: index with: v	&lt;C: void glVertexAttribI3uivEXT(GLuint index, const GLuint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI4bvEXT: index with: v	&lt;C: void glVertexAttribI4bvEXT(GLuint index, GLbyte const * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI4iEXT: index with: x with: y with: z with: w	&lt;C: void glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI4ivEXT: index with: v	&lt;C: void glVertexAttribI4ivEXT(GLuint index, const GLint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI4svEXT: index with: v	&lt;C: void glVertexAttribI4svEXT(GLuint index, GLshort const * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI4ubvEXT: index with: v	&lt;C: void glVertexAttribI4ubvEXT(GLuint index, const GLubyte * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI4uiEXT: index with: x with: y with: z with: w	&lt;C: void glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI4uivEXT: index with: v	&lt;C: void glVertexAttribI4uivEXT(GLuint index, const GLuint * v)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribI4usvEXT: index with: v	&lt;C: void glVertexAttribI4usvEXT(GLuint index, GLushort const * v)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api shader and program objects</category><body package="OpenGL">AttachShader: program with: shader	&lt;C: void glAttachShader(GLuint program, GLuint shader)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CompileShader: shader	&lt;C: void glCompileShader(GLuint shader)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CreateProgram	&lt;C: GLuint glCreateProgram(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CreateShader: type"	type:	VERTEX_SHADER FRAGMENT_SHADER"	&lt;C: GLuint glCreateShader(GLenum type)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DeleteProgram: program	&lt;C: void glDeleteProgram(GLuint program)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DeleteShader: shader	&lt;C: void glDeleteShader(GLuint shader)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DetachShader: program with: shader	&lt;C: void glDetachShader(GLuint program, GLuint shader)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetAttachedShaders: program with: maxCount with: count with: shaders	&lt;C: void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetProgramInfoLog: program with: bufSize with: length with: infoLog	&lt;C: void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetProgramiv: program with: pname with: params"	pname:	DELETE_STATUS LINK_STATUS VALIDATE_STATUS INFO_LOG_LENGTH ATTACHED_SHADERS ACTIVE_ATTRIBUTES ACTIVE_ATTRIBUTE_MAX_LENGTH ACTIVE_UNIFORMS ACTIVE_UNIFORM_MAX_LENGTH"	&lt;C: void glGetProgramiv(GLuint program, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetShaderInfoLog: shader with: bufSize with: length with: infoLog"	Status:	INFO_LOG_LENGTH"	&lt;C: void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetShaderSource: shader with: bufSize with: length with: source	&lt;C: void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetShaderiv: shader with: pname with: params"	pname:	SHADER_TYPE DELETE_STATUS COMPILE_STATUS INFO_LOG_LENGTH SHADER_SOURCE_LENGTH"	&lt;C: void glGetShaderiv(GLuint shader, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">IsProgram: program	&lt;C: GLboolean glIsProgram(GLuint program)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">IsShader: shader	&lt;C: GLboolean glIsShader(GLuint shader)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">LinkProgram: program	&lt;C: void glLinkProgram(GLuint program)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ShaderSource: shader with: count with: string with: length	&lt;C: void glShaderSource(GLuint shader, GLsizei count, const GLchar * * string, const GLint * length)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UseProgram: program"	Status:	CURRENT_PROGRAM"	&lt;C: void glUseProgram(GLuint program)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ValidateProgram: program	&lt;C: void glValidateProgram(GLuint program)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api buffer objects</category><body package="OpenGL">BindBuffer: target with: buffer"	target:	ARRAY_BUFFER ELEMENT_ARRAY_BUFFER PIXEL_PACK_BUFFER PIXEL_UNPACK_BUFFER"	&lt;C: void glBindBuffer(GLenum target, GLuint buffer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BufferData: target with: size with: data with: usage"	target:	ARRAY_BUFFER ELEMENT_ARRAY_BUFFER PIXEL_PACK_BUFFER PIXEL_UNPACK_BUFFER	usage:	STREAM_DRAW STREAM_READ STREAM_COPY STATIC_DRAW STATIC_READ STATIC_COPY DYNAMIC_DRAW DYNAMIC_READ DYNAMIC_COPY"	&lt;C: void glBufferData(GLenum target, GLsizeiptr size, const GLvoid * data, GLenum usage)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BufferSubData: target with: offset with: size with: data"	target:	ARRAY_BUFFER ELEMENT_ARRAY_BUFFER PIXEL_PACK_BUFFER PIXEL_UNPACK_BUFFER"	&lt;C: void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid * data)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DeleteBuffers: n with: buffers	&lt;C: void glDeleteBuffers(GLsizei n, const GLuint * buffers)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GenBuffers: n with: buffers	&lt;C: void glGenBuffers(GLsizei n, GLuint * buffers)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetBufferParameteriv: target with: pname with: params"	target:	ARRAY_BUFFER ELEMENT_ARRAY_BUFFER PIXEL_PACK_BUFFER PIXEL_UNPACK_BUFFER	pname:	BUFFER_ACCESS BUFFER_MAPPED BUFFER_SIZE BUFFER_USAGE"	&lt;C: void glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetBufferPointerv: target with: pname with: params"	target:	ARRAY_BUFFER ELEMENT_ARRAY_BUFFER PIXEL_PACK_BUFFER PIXEL_UNPACK_BUFFER	pname:	BUFFER_MAP_POINTER"	&lt;C: void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid * * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetBufferSubData: target with: offset with: size with: data"	target:	ARRAY_BUFFER ELEMENT_ARRAY_BUFFER PIXEL_PACK_BUFFER PIXEL_UNPACK_BUFFER"	&lt;C: void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid * data)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">IsBuffer: buffer	&lt;C: GLboolean glIsBuffer(GLuint buffer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">MapBuffer: target with: access"	target:	ARRAY_BUFFER ELEMENT_ARRAY_BUFFER PIXEL_PACK_BUFFER PIXEL_UNPACK_BUFFER	access:	READ_ONLY WRITE_ONLY READ_WRITE"	&lt;C: GLvoid *  glMapBuffer(GLenum target, GLenum access)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UnmapBuffer: target	&lt;C: GLboolean glUnmapBuffer(GLenum target)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api texture objects</category><body package="OpenGL">ActiveTexture: texture"	Status:	ACTIVE_TEXTURE MAX_TEXTURE_COORDS MAX_COMBINED_TEXTURE_IMAGE_UNITS MAX_TEXTURE_UNITS MAX_VERTEX_TEXTURE_IMAGE_UNITS MAX_TEXTURE_IMAGE_UNITS"	&lt;C: void glActiveTexture(GLenum texture)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BindTexture: target with: texture"	target:	TEXTURE_1D TEXTURE_2D TEXTURE_3D TEXTURE_CUBE_MAP	Status:	TEXTURE_BINDING_1D TEXTURE_BINDING_2D TEXTURE_BINDING_3D TEXTURE_BINDING_CUBE_MAP"	&lt;C: void glBindTexture(GLenum target, GLuint texture)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CompressedTexImage1D: target with: level with: internalformat with: width with: border with: imageSize with: data"	target:			TEXTURE_1D PROXY_TEXTURE_1D	internalformat:	COMPRESSED_ALPHA COMPRESSED_RGB COMPRESSED_RGBA COMPRESSED_SRGB COMPRESSED_SRGB_ALPHA"	&lt;C: void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * data)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CompressedTexImage2D: target with: level with: internalformat with: width with: height with: border with: imageSize with: data"	target:			TEXTURE_2D PROXY_TEXTURE_2D TEXTURE_CUBE_MAP_POSITIVE_X TEXTURE_CUBE_MAP_NEGATIVE_X TEXTURE_CUBE_MAP_POSITIVE_Y TEXTURE_CUBE_MAP_NEGATIVE_Y TEXTURE_CUBE_MAP_POSITIVE_Z TEXTURE_CUBE_MAP_NEGATIVE_Z PROXY_TEXTURE_CUBE_MAP	internalformat:	COMPRESSED_ALPHA COMPRESSED_RGB COMPRESSED_RGBA COMPRESSED_SRGB COMPRESSED_SRGB_ALPHA	Status:			COMPRESSED_TEXTURE_FORMATS NUM_COMPRESSED_TEXTURE_FORMATS"	&lt;C: void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * data)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CompressedTexImage3D: target with: level with: internalformat with: width with: height with: depth with: border with: imageSize with: data"	target:			TEXTURE_3D PROXY_TEXTURE_3D	internalformat:	COMPRESSED_ALPHA COMPRESSED_RGB COMPRESSED_RGBA COMPRESSED_SRGB COMPRESSED_SRGB_ALPHA"	&lt;C: void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * data)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CompressedTexSubImage1D: target with: level with: xoffset with: width with: format with: imageSize with: data"	target:	TEXTURE_1D	format:	RED GREEN BLUE ALPHA RGB BGR RGBA BGRA"	&lt;C: void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CompressedTexSubImage2D: target with: level with: xoffset with: yoffset with: width with: height with: format with: imageSize with: data"	target:	TEXTURE_2D TEXTURE_CUBE_MAP_POSITIVE_X TEXTURE_CUBE_MAP_NEGATIVE_X TEXTURE_CUBE_MAP_POSITIVE_Y TEXTURE_CUBE_MAP_NEGATIVE_Y TEXTURE_CUBE_MAP_POSITIVE_Z TEXTURE_CUBE_MAP_NEGATIVE_Z	format:	RED GREEN BLUE ALPHA RGB BGR RGBA BGRA"	&lt;C: void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CompressedTexSubImage3D: target with: level with: xoffset with: yoffset with: zoffset with: width with: height with: depth with: format with: imageSize with: data"	target:	TEXTURE_3D	format:	RED GREEN BLUE ALPHA RGB BGR RGBA BGRA"	&lt;C: void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CopyTexImage1D: target with: level with: internalformat with: x with: y with: width with: border"	target:			TEXTURE_1D	internalformat:	ALPHA ALPHA4 ALPHA8 ALPHA12 ALPHA16 COMPRESSED_ALPHA COMPRESSED_RGB COMPRESSED_RGBA DEPTH_COMPONENT DEPTH_COMPONENT16 DEPTH_COMPONENT24 DEPTH_COMPONENT32 R3_G3_B2 RGB RGB4 RGB5 RGB8 RGB10 RGB12 RGB16 RGBA RGBA2 RGBA4 RGB5_A1 RGBA8 RGB10_A2 RGBA12 RGBA16 SRGB SRGB8 SRGB_ALPHA SRGB8_ALPHA8"	&lt;C: void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CopyTexImage2D: target with: level with: internalformat with: x with: y with: width with: height with: border"	target:			TEXTURE_2D TEXTURE_CUBE_MAP_POSITIVE_X TEXTURE_CUBE_MAP_NEGATIVE_X TEXTURE_CUBE_MAP_POSITIVE_Y TEXTURE_CUBE_MAP_NEGATIVE_Y TEXTURE_CUBE_MAP_POSITIVE_Z TEXTURE_CUBE_MAP_NEGATIVE_Z	internalformat:	ALPHA ALPHA4 ALPHA8 ALPHA12 ALPHA16 COMPRESSED_ALPHA COMPRESSED_RGB COMPRESSED_RGBA DEPTH_COMPONENT DEPTH_COMPONENT16 DEPTH_COMPONENT24 DEPTH_COMPONENT32 R3_G3_B2 RGB RGB4 RGB5 RGB8 RGB10 RGB12 RGB16 RGBA RGBA2 RGBA4 RGB5_A1 RGBA8 RGB10_A2 RGBA12 RGBA16 SRGB SRGB8 SRGB_ALPHA SRGB8_ALPHA8"	&lt;C: void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CopyTexSubImage1D: target with: level with: xoffset with: x with: y with: width"	target:	TEXTURE_1D"	&lt;C: void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CopyTexSubImage2D: target with: level with: xoffset with: yoffset with: x with: y with: width with: height"	target:	TEXTURE_2D TEXTURE_CUBE_MAP_POSITIVE_X TEXTURE_CUBE_MAP_NEGATIVE_X TEXTURE_CUBE_MAP_POSITIVE_Y TEXTURE_CUBE_MAP_NEGATIVE_Y TEXTURE_CUBE_MAP_POSITIVE_Z TEXTURE_CUBE_MAP_NEGATIVE_Z"	&lt;C: void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CopyTexSubImage3D: target with: level with: xoffset with: yoffset with: zoffset with: x with: y with: width with: height"	target:	TEXTURE_3D"	&lt;C: void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DeleteTextures: n with: textures	&lt;C: void glDeleteTextures(GLsizei n, const GLuint * textures)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GenTextures: n with: textures	&lt;C: void glGenTextures(GLsizei n, GLuint * textures)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetCompressedTexImage: target with: lod with: img"	target:	TEXTURE_1D TEXTURE_2D TEXTURE_3D TEXTURE_CUBE_MAP TEXTURE_CUBE_MAP_POSITIVE_X TEXTURE_CUBE_MAP_NEGATIVE_X TEXTURE_CUBE_MAP_POSITIVE_Y TEXTURE_CUBE_MAP_NEGATIVE_Y TEXTURE_CUBE_MAP_POSITIVE_Z TEXTURE_CUBE_MAP_NEGATIVE_Z"	&lt;C: void glGetCompressedTexImage(GLenum target, GLint lod, GLvoid * img)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetTexEnvfv: target with: pname with: params"	target:	TEXTURE_FILTER_CONTROL	pname:	TEXTURE_LOD_BIAS COMBINE_RGB COMBINE_ALPHA SRC0_RGB SRC1_RGB SRC2_RGB SRC3_RGB SRC4_RGB SRC5_RGB SRC6_RGB SRC7_RGB SRC0_ALPHA SRC1_ALPHA SRC2_ALPHA SRC3_ALPHA SRC4_ALPHA SRC5_ALPHA SRC6_ALPHA SRC7_ALPHA OPERAND0_RGB OPERAND1_RGB OPERAND2_RGB OPERAND3_RGB OPERAND4_RGB OPERAND5_RGB OPERAND6_RGB OPERAND7_RGB OPERAND0_ALPHA OPERAND1_ALPHA OPERAND2_ALPHA OPERAND3_ALPHA OPERAND4_ALPHA OPERAND5_ALPHA OPERAND6_ALPHA OPERAND7_ALPHA RGB_SCALE ALPHA_SCALE COORD_REPLACE	param:	ADD ADD_SIGNED INTERPOLATE MODULATE DECAL BLEND REPLACE SUBTRACT COMBINE TEXTURE CONSTANT PREVIOUS SRC_COLOR ONE_MINUS_SRC_COLOR SRC_ALPHA ONE_MINUS_SRC_ALPHA"	&lt;C: void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetTexEnviv: target with: pname with: params"	target:	TEXTURE_FILTER_CONTROL	pname:	TEXTURE_LOD_BIAS COMBINE_RGB COMBINE_ALPHA SRC0_RGB SRC1_RGB SRC2_RGB SRC3_RGB SRC4_RGB SRC5_RGB SRC6_RGB SRC7_RGB SRC0_ALPHA SRC1_ALPHA SRC2_ALPHA SRC3_ALPHA SRC4_ALPHA SRC5_ALPHA SRC6_ALPHA SRC7_ALPHA OPERAND0_RGB OPERAND1_RGB OPERAND2_RGB OPERAND3_RGB OPERAND4_RGB OPERAND5_RGB OPERAND6_RGB OPERAND7_RGB OPERAND0_ALPHA OPERAND1_ALPHA OPERAND2_ALPHA OPERAND3_ALPHA OPERAND4_ALPHA OPERAND5_ALPHA OPERAND6_ALPHA OPERAND7_ALPHA RGB_SCALE ALPHA_SCALE COORD_REPLACE	param:	ADD ADD_SIGNED INTERPOLATE MODULATE DECAL BLEND REPLACE SUBTRACT COMBINE TEXTURE CONSTANT PREVIOUS SRC_COLOR ONE_MINUS_SRC_COLOR SRC_ALPHA ONE_MINUS_SRC_ALPHA"	&lt;C: void glGetTexEnviv(GLenum target, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetTexImage: target with: level with: format with: type with: pixels"	target:	TEXTURE_1D TEXTURE_2D TEXTURE_3D TEXTURE_CUBE_MAP TEXTURE_CUBE_MAP_POSITIVE_X TEXTURE_CUBE_MAP_NEGATIVE_X TEXTURE_CUBE_MAP_POSITIVE_Y TEXTURE_CUBE_MAP_NEGATIVE_Y TEXTURE_CUBE_MAP_POSITIVE_Z TEXTURE_CUBE_MAP_NEGATIVE_Z	format:	RED GREEN BLUE ALPHA RGB BGR RGBA BGRA	type:	UNSIGNED_BYTE BYTE UNSIGNED_SHORT SHORT UNSIGNED_INT INT FLOAT UNSIGNED_BYTE_3_3_2 UNSIGNED_BYTE_2_3_3_REV UNSIGNED_SHORT_5_6_5 UNSIGNED_SHORT_5_6_5_REV UNSIGNED_SHORT_4_4_4_4 UNSIGNED_SHORT_4_4_4_4_REV UNSIGNED_SHORT_5_5_5_1 UNSIGNED_SHORT_1_5_5_5_REV UNSIGNED_INT_8_8_8_8 UNSIGNED_INT_8_8_8_8_REV UNSIGNED_INT_10_10_10_2 UNSIGNED_INT_2_10_10_10_REV"	&lt;C: void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetTexLevelParameterfv: target with: level with: pname with: params"	target:	TEXTURE_1D TEXTURE_2D TEXTURE_3D PROXY_TEXTURE_1D PROXY_TEXTURE_2D PROXY_TEXTURE_3D TEXTURE_CUBE_MAP TEXTURE_CUBE_MAP_POSITIVE_X TEXTURE_CUBE_MAP_NEGATIVE_X TEXTURE_CUBE_MAP_POSITIVE_Y TEXTURE_CUBE_MAP_NEGATIVE_Y TEXTURE_CUBE_MAP_POSITIVE_Z TEXTURE_CUBE_MAP_NEGATIVE_Z PROXY_TEXTURE_CUBE_MAP	pname:	TEXTURE_WIDTH TEXTURE_HEIGHT TEXTURE_DEPTH TEXTURE_INTERNAL_FORMAT TEXTURE_RED_SIZE TEXTURE_GREEN_SIZE TEXTURE_BLUE_SIZE TEXTURE_ALPHA_SIZE TEXTURE_DEPTH_SIZE TEXTURE_COMPRESSED TEXTURE_COMPRESSED_IMAGE_SIZE TEXTURE_COMPONENTS"	&lt;C: void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetTexLevelParameteriv: target with: level with: pname with: params"	target:	TEXTURE_1D TEXTURE_2D TEXTURE_3D PROXY_TEXTURE_1D PROXY_TEXTURE_2D PROXY_TEXTURE_3D TEXTURE_CUBE_MAP TEXTURE_CUBE_MAP_POSITIVE_X TEXTURE_CUBE_MAP_NEGATIVE_X TEXTURE_CUBE_MAP_POSITIVE_Y TEXTURE_CUBE_MAP_NEGATIVE_Y TEXTURE_CUBE_MAP_POSITIVE_Z TEXTURE_CUBE_MAP_NEGATIVE_Z PROXY_TEXTURE_CUBE_MAP	pname:	TEXTURE_WIDTH TEXTURE_HEIGHT TEXTURE_DEPTH TEXTURE_INTERNAL_FORMAT TEXTURE_RED_SIZE TEXTURE_GREEN_SIZE TEXTURE_BLUE_SIZE TEXTURE_ALPHA_SIZE TEXTURE_DEPTH_SIZE TEXTURE_COMPRESSED TEXTURE_COMPRESSED_IMAGE_SIZE TEXTURE_COMPONENTS"	&lt;C: void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetTexParameterIiuvEXT: target with: pname with: params	&lt;C: void glGetTexParameterIiuvEXT(GLenum target, GLenum pname, GLuint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetTexParameterIivEXT: target with: pname with: params	&lt;C: void glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetTexParameterfv: target with: pname with: params"	target:	TEXTURE_1D TEXTURE_2D TEXTURE_3D TEXTURE_CUBE_MAP	pname:	TEXTURE_MAG_FILTER TEXTURE_MIN_FILTER TEXTURE_MIN_LOD TEXTURE_MAX_LOD TEXTURE_BASE_LEVEL TEXTURE_MAX_LEVEL TEXTURE_WRAP_S TEXTURE_WRAP_T TEXTURE_WRAP_R TEXTURE_COMPARE_MODE TEXTURE_COMPARE_FUNC	params:	NEAREST LINEAR NEAREST_MIPMAP_NEAREST LINEAR_MIPMAP_NEAREST NEAREST_MIPMAP_LINEAR LINEAR_MIPMAP_LINEAR COMPARE_REF_TO_TEXTURE NONE REPEAT MIRRORED_REPEAT CLAMP_TO_EDGE"	&lt;C: void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetTexParameteriv: target with: pname with: params"	target:	TEXTURE_1D TEXTURE_2D TEXTURE_3D TEXTURE_CUBE_MAP	pname:	TEXTURE_MAG_FILTER TEXTURE_MIN_FILTER TEXTURE_MIN_LOD TEXTURE_MAX_LOD TEXTURE_BASE_LEVEL TEXTURE_MAX_LEVEL TEXTURE_WRAP_S TEXTURE_WRAP_T TEXTURE_WRAP_R TEXTURE_COMPARE_MODE TEXTURE_COMPARE_FUNC	params:	NEAREST LINEAR NEAREST_MIPMAP_NEAREST LINEAR_MIPMAP_NEAREST NEAREST_MIPMAP_LINEAR LINEAR_MIPMAP_LINEAR COMPARE_REF_TO_TEXTURE NONE REPEAT MIRRORED_REPEAT CLAMP_TO_EDGE"	&lt;C: void glGetTexParameteriv(GLenum target, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">IsTexture: texture	&lt;C: GLboolean glIsTexture(GLuint texture)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexEnvf: target with: pname with: param"	target:	TEXTURE_FILTER_CONTROL	pname:	TEXTURE_LOD_BIAS COMBINE_RGB COMBINE_ALPHA SRC0_RGB SRC1_RGB SRC2_RGB SRC3_RGB SRC4_RGB SRC5_RGB SRC6_RGB SRC7_RGB SRC0_ALPHA SRC1_ALPHA SRC2_ALPHA SRC3_ALPHA SRC4_ALPHA SRC5_ALPHA SRC6_ALPHA SRC7_ALPHA OPERAND0_RGB OPERAND1_RGB OPERAND2_RGB OPERAND3_RGB OPERAND4_RGB OPERAND5_RGB OPERAND6_RGB OPERAND7_RGB OPERAND0_ALPHA OPERAND1_ALPHA OPERAND2_ALPHA OPERAND3_ALPHA OPERAND4_ALPHA OPERAND5_ALPHA OPERAND6_ALPHA OPERAND7_ALPHA RGB_SCALE ALPHA_SCALE COORD_REPLACE	param:	ADD ADD_SIGNED INTERPOLATE MODULATE DECAL BLEND REPLACE SUBTRACT COMBINE TEXTURE CONSTANT PREVIOUS SRC_COLOR ONE_MINUS_SRC_COLOR SRC_ALPHA ONE_MINUS_SRC_ALPHA DOT3_RGB DOT3_RGBA"	&lt;C: void glTexEnvf(GLenum target, GLenum pname, GLfloat param)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexEnvfv: target with: pname with: params"	target:	TEXTURE_FILTER_CONTROL	pname:	TEXTURE_LOD_BIAS	params:	ADD ADD_SIGNED INTERPOLATE MODULATE DECAL BLEND REPLACE SUBTRACT COMBINE TEXTURE CONSTANT PREVIOUS SRC_COLOR ONE_MINUS_SRC_COLOR SRC_ALPHA ONE_MINUS_SRC_ALPHA DOT3_RGB DOT3_RGBA"	&lt;C: void glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexEnvi: target with: pname with: param"	target:	TEXTURE_FILTER_CONTROL	pname:	TEXTURE_LOD_BIAS COMBINE_RGB COMBINE_ALPHA SRC0_RGB SRC1_RGB SRC2_RGB SRC3_RGB SRC4_RGB SRC5_RGB SRC6_RGB SRC7_RGB SRC0_ALPHA SRC1_ALPHA SRC2_ALPHA SRC3_ALPHA SRC4_ALPHA SRC5_ALPHA SRC6_ALPHA SRC7_ALPHA OPERAND0_RGB OPERAND1_RGB OPERAND2_RGB OPERAND3_RGB OPERAND4_RGB OPERAND5_RGB OPERAND6_RGB OPERAND7_RGB OPERAND0_ALPHA OPERAND1_ALPHA OPERAND2_ALPHA OPERAND3_ALPHA OPERAND4_ALPHA OPERAND5_ALPHA OPERAND6_ALPHA OPERAND7_ALPHA RGB_SCALE ALPHA_SCALE COORD_REPLACE	param:	ADD ADD_SIGNED INTERPOLATE MODULATE DECAL BLEND REPLACE SUBTRACT COMBINE TEXTURE CONSTANT PREVIOUS SRC_COLOR ONE_MINUS_SRC_COLOR SRC_ALPHA ONE_MINUS_SRC_ALPHA DOT3_RGB DOT3_RGBA"	&lt;C: void glTexEnvi(GLenum target, GLenum pname, GLint param)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexEnviv: target with: pname with: params"	target:	TEXTURE_FILTER_CONTROL	pname:	TEXTURE_LOD_BIAS	params:	ADD ADD_SIGNED INTERPOLATE MODULATE DECAL BLEND REPLACE SUBTRACT COMBINE TEXTURE CONSTANT PREVIOUS SRC_COLOR ONE_MINUS_SRC_COLOR SRC_ALPHA ONE_MINUS_SRC_ALPHA DOT3_RGB DOT3_RGBA"	&lt;C: void glTexEnviv(GLenum target, GLenum pname, const GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexImage1D: target with: level with: internalformat with: width with: border with: format with: type with: pixels"	target:			TEXTURE_1D PROXY_TEXTURE_1D	internalformat:	ALPHA ALPHA4 ALPHA8 ALPHA12 ALPHA16 COMPRESSED_ALPHA COMPRESSED_RGB COMPRESSED_RGBA DEPTH_COMPONENT DEPTH_COMPONENT16 DEPTH_COMPONENT24 DEPTH_COMPONENT32 R3_G3_B2 RGB RGB4 RGB5 RGB8 RGB10 RGB12 RGB16 RGBA RGBA2 RGBA4 RGB5_A1 RGBA8 RGB10_A2 RGBA12 RGBA16 SRGB SRGB8 SRGB_ALPHA SRGB8_ALPHA8	format:			RED GREEN BLUE ALPHA RGB BGR RGBA BGRA	type:			UNSIGNED_BYTE BYTE UNSIGNED_SHORT SHORT UNSIGNED_INT INT FLOAT UNSIGNED_BYTE_3_3_2 UNSIGNED_BYTE_2_3_3_REV UNSIGNED_SHORT_5_6_5 UNSIGNED_SHORT_5_6_5_REV UNSIGNED_SHORT_4_4_4_4 UNSIGNED_SHORT_4_4_4_4_REV UNSIGNED_SHORT_5_5_5_1 UNSIGNED_SHORT_1_5_5_5_REV UNSIGNED_INT_8_8_8_8 UNSIGNED_INT_8_8_8_8_REV UNSIGNED_INT_10_10_10_2 UNSIGNED_INT_2_10_10_10_REV	Status:			MAX_TEXTURE_SIZE"	&lt;C: void glTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexImage2D: target with: level with: internalformat with: width with: height with: border with: format with: type with: pixels"	target:			TEXTURE_2D PROXY_TEXTURE_2D TEXTURE_CUBE_MAP_POSITIVE_X TEXTURE_CUBE_MAP_NEGATIVE_X TEXTURE_CUBE_MAP_POSITIVE_Y TEXTURE_CUBE_MAP_NEGATIVE_Y TEXTURE_CUBE_MAP_POSITIVE_Z TEXTURE_CUBE_MAP_NEGATIVE_Z PROXY_TEXTURE_CUBE_MAP	internalformat:	ALPHA ALPHA4 ALPHA8 ALPHA12 ALPHA16 COMPRESSED_ALPHA COMPRESSED_RGB COMPRESSED_RGBA DEPTH_COMPONENT DEPTH_COMPONENT16 DEPTH_COMPONENT24 DEPTH_COMPONENT32 R3_G3_B2 RGB RGB4 RGB5 RGB8 RGB10 RGB12 RGB16 RGBA RGBA2 RGBA4 RGB5_A1 RGBA8 RGB10_A2 RGBA12 RGBA16 SRGB SRGB8 SRGB_ALPHA SRGB8_ALPHA8	format:			RED GREEN BLUE ALPHA RGB BGR RGBA BGRA	type:			UNSIGNED_BYTE BYTE UNSIGNED_SHORT SHORT UNSIGNED_INT INT FLOAT UNSIGNED_BYTE_3_3_2 UNSIGNED_BYTE_2_3_3_REV UNSIGNED_SHORT_5_6_5 UNSIGNED_SHORT_5_6_5_REV UNSIGNED_SHORT_4_4_4_4 UNSIGNED_SHORT_4_4_4_4_REV UNSIGNED_SHORT_5_5_5_1 UNSIGNED_SHORT_1_5_5_5_REV UNSIGNED_INT_8_8_8_8 UNSIGNED_INT_8_8_8_8_REV UNSIGNED_INT_10_10_10_2 UNSIGNED_INT_2_10_10_10_REV	Status:			MAX_CUBE_MAP_TEXTURE_SIZE"	&lt;C: void glTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexImage3D: target with: level with: internalformat with: width with: height with: depth with: border with: format with: type with: pixels"	target:			TEXTURE_3D PROXY_TEXTURE_3D	internalformat:	ALPHA ALPHA4 ALPHA8 ALPHA12 ALPHA16 COMPRESSED_ALPHA COMPRESSED_RGB COMPRESSED_RGBA DEPTH_COMPONENT DEPTH_COMPONENT16 DEPTH_COMPONENT24 DEPTH_COMPONENT32 R3_G3_B2 RGB RGB4 RGB5 RGB8 RGB10 RGB12 RGB16 RGBA RGBA2 RGBA4 RGB5_A1 RGBA8 RGB10_A2 RGBA12 RGBA16 SRGB SRGB8 SRGB_ALPHA SRGB8_ALPHA8	format:			RED GREEN BLUE ALPHA RGB BGR RGBA BGRA	type:			UNSIGNED_BYTE BYTE UNSIGNED_SHORT SHORT UNSIGNED_INT INT FLOAT UNSIGNED_BYTE_3_3_2 UNSIGNED_BYTE_2_3_3_REV UNSIGNED_SHORT_5_6_5 UNSIGNED_SHORT_5_6_5_REV UNSIGNED_SHORT_4_4_4_4 UNSIGNED_SHORT_4_4_4_4_REV UNSIGNED_SHORT_5_5_5_1 UNSIGNED_SHORT_1_5_5_5_REV UNSIGNED_INT_8_8_8_8 UNSIGNED_INT_8_8_8_8_REV UNSIGNED_INT_10_10_10_2 UNSIGNED_INT_2_10_10_10_REV	Status:			MAX_3D_TEXTURE_SIZE"	&lt;C: void glTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexParameterIivEXT: target with: pname with: params	&lt;C: void glTexParameterIivEXT(GLenum target, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexParameterIuivEXT: target with: pname with: params	&lt;C: void glTexParameterIuivEXT(GLenum target, GLenum pname, GLuint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexParameterf: target with: pname with: param"	target:	TEXTURE_1D TEXTURE_2D TEXTURE_3D TEXTURE_CUBE_MAP	pname:	TEXTURE_MAG_FILTER TEXTURE_MIN_FILTER TEXTURE_MIN_LOD TEXTURE_MAX_LOD TEXTURE_BASE_LEVEL TEXTURE_MAX_LEVEL TEXTURE_WRAP_S TEXTURE_WRAP_T TEXTURE_WRAP_R TEXTURE_COMPARE_MODE TEXTURE_COMPARE_FUNC	param:	NEAREST LINEAR NEAREST_MIPMAP_NEAREST LINEAR_MIPMAP_NEAREST NEAREST_MIPMAP_LINEAR LINEAR_MIPMAP_LINEAR COMPARE_REF_TO_TEXTURE NONE REPEAT MIRRORED_REPEAT CLAMP_TO_EDGE"	&lt;C: void glTexParameterf(GLenum target, GLenum pname, GLfloat param)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexParameterfv: target with: pname with: params"	target:	TEXTURE_1D TEXTURE_2D TEXTURE_3D	pname:	TEXTURE_MAG_FILTER TEXTURE_MIN_FILTER TEXTURE_MIN_LOD TEXTURE_MAX_LOD TEXTURE_BASE_LEVEL TEXTURE_MAX_LEVEL TEXTURE_WRAP_S TEXTURE_WRAP_T TEXTURE_WRAP_R TEXTURE_COMPARE_MODE TEXTURE_COMPARE_FUNC	params:	NEAREST LINEAR NEAREST_MIPMAP_NEAREST LINEAR_MIPMAP_NEAREST NEAREST_MIPMAP_LINEAR LINEAR_MIPMAP_LINEAR COMPARE_REF_TO_TEXTURE NONE REPEAT MIRRORED_REPEAT CLAMP_TO_EDGE"	&lt;C: void glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexParameteri: target with: pname with: param"	target:	TEXTURE_1D TEXTURE_2D TEXTURE_3D TEXTURE_CUBE_MAP	pname:	TEXTURE_MAG_FILTER TEXTURE_MIN_FILTER TEXTURE_MIN_LOD TEXTURE_MAX_LOD TEXTURE_BASE_LEVEL TEXTURE_MAX_LEVEL TEXTURE_WRAP_S TEXTURE_WRAP_T TEXTURE_WRAP_R TEXTURE_COMPARE_MODE TEXTURE_COMPARE_FUNC	param:	NEAREST LINEAR NEAREST_MIPMAP_NEAREST LINEAR_MIPMAP_NEAREST NEAREST_MIPMAP_LINEAR LINEAR_MIPMAP_LINEAR COMPARE_REF_TO_TEXTURE NONE REPEAT MIRRORED_REPEAT CLAMP_TO_EDGE"	&lt;C: void glTexParameteri(GLenum target, GLenum pname, GLint param)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexParameteriv: target with: pname with: params"	target:	TEXTURE_1D TEXTURE_2D TEXTURE_3D	pname:	TEXTURE_MAG_FILTER TEXTURE_MIN_FILTER TEXTURE_MIN_LOD TEXTURE_MAX_LOD TEXTURE_BASE_LEVEL TEXTURE_MAX_LEVEL TEXTURE_WRAP_S TEXTURE_WRAP_T TEXTURE_WRAP_R TEXTURE_COMPARE_MODE TEXTURE_COMPARE_FUNC	params:	NEAREST LINEAR NEAREST_MIPMAP_NEAREST LINEAR_MIPMAP_NEAREST NEAREST_MIPMAP_LINEAR LINEAR_MIPMAP_LINEAR COMPARE_REF_TO_TEXTURE NONE REPEAT MIRRORED_REPEAT CLAMP_TO_EDGE"	&lt;C: void glTexParameteriv(GLenum target, GLenum pname, const GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexSubImage1D: target with: level with: xoffset with: width with: format with: type with: pixels"	target:			TEXTURE_1D	format:			RED GREEN BLUE ALPHA RGB BGR RGBA BGRA	type:			UNSIGNED_BYTE BYTE UNSIGNED_SHORT SHORT UNSIGNED_INT INT FLOAT UNSIGNED_BYTE_3_3_2 UNSIGNED_BYTE_2_3_3_REV UNSIGNED_SHORT_5_6_5 UNSIGNED_SHORT_5_6_5_REV UNSIGNED_SHORT_4_4_4_4 UNSIGNED_SHORT_4_4_4_4_REV UNSIGNED_SHORT_5_5_5_1 UNSIGNED_SHORT_1_5_5_5_REV UNSIGNED_INT_8_8_8_8 UNSIGNED_INT_8_8_8_8_REV UNSIGNED_INT_10_10_10_2 UNSIGNED_INT_2_10_10_10_REV"	&lt;C: void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexSubImage2D: target with: level with: xoffset with: yoffset with: width with: height with: format with: type with: pixels"	target:			TEXTURE_2D TEXTURE_CUBE_MAP_POSITIVE_X TEXTURE_CUBE_MAP_NEGATIVE_X TEXTURE_CUBE_MAP_POSITIVE_Y TEXTURE_CUBE_MAP_NEGATIVE_Y TEXTURE_CUBE_MAP_POSITIVE_Z TEXTURE_CUBE_MAP_NEGATIVE_Z	format:			RED GREEN BLUE ALPHA RGB BGR RGBA BGRA	type:			UNSIGNED_BYTE BYTE UNSIGNED_SHORT SHORT UNSIGNED_INT INT FLOAT UNSIGNED_BYTE_3_3_2 UNSIGNED_BYTE_2_3_3_REV UNSIGNED_SHORT_5_6_5 UNSIGNED_SHORT_5_6_5_REV UNSIGNED_SHORT_4_4_4_4 UNSIGNED_SHORT_4_4_4_4_REV UNSIGNED_SHORT_5_5_5_1 UNSIGNED_SHORT_1_5_5_5_REV UNSIGNED_INT_8_8_8_8 UNSIGNED_INT_8_8_8_8_REV UNSIGNED_INT_10_10_10_2 UNSIGNED_INT_2_10_10_10_REV"	&lt;C: void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TexSubImage3D: target with: level with: xoffset with: yoffset with: zoffset with: width with: height with: depth with: format with: type with: pixels"	target:			TEXTURE_3D	format:			RED GREEN BLUE ALPHA RGB BGR RGBA BGRA	type:			UNSIGNED_BYTE BYTE UNSIGNED_SHORT SHORT UNSIGNED_INT INT FLOAT UNSIGNED_BYTE_3_3_2 UNSIGNED_BYTE_2_3_3_REV UNSIGNED_SHORT_5_6_5 UNSIGNED_SHORT_5_6_5_REV UNSIGNED_SHORT_4_4_4_4 UNSIGNED_SHORT_4_4_4_4_REV UNSIGNED_SHORT_5_5_5_1 UNSIGNED_SHORT_1_5_5_5_REV UNSIGNED_INT_8_8_8_8 UNSIGNED_INT_8_8_8_8_REV UNSIGNED_INT_10_10_10_2 UNSIGNED_INT_2_10_10_10_REV"	&lt;C: void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api vertex arrays</category><body package="OpenGL">DisableVertexAttribArray: index	&lt;C: void glDisableVertexAttribArray(GLuint index)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">EnableVertexAttribArray: index	&lt;C: void glEnableVertexAttribArray(GLuint index)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetVertexAttribPointerv: index with: pname with: pointer"	pname:	VERTEX_ATTRIB_ARRAY_POINTER"	&lt;C: void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid * * pointer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribIPointerEXT: index with: size with: type with: stride with: pointer	&lt;C: void glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexAttribPointer: index with: size with: type with: normalized with: stride with: pointer"	type:		BYTE UNSIGNED_BYTE SHORT UNSIGNED_SHORT INT UNSIGNED_INT FLOAT DOUBLE	normalized:	TRUE FALSE"	&lt;C: void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api miscellaneous</category><body package="OpenGL">Disable: cap	&lt;C: void glDisable(GLenum cap)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Enable: cap"	misc:	DITHER DOUBLEBUFFER MAX_TEXTURE_LOD_BIAS MAX_VARYING_FLOATS STEREO"	&lt;C: void glEnable(GLenum cap)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Finish	&lt;C: void glFinish(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Flush	&lt;C: void glFlush(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">IsEnabled: cap	&lt;C: GLboolean glIsEnabled(GLenum cap)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api drawing</category><body package="OpenGL">DrawArrays: mode with: first with: count"	mode:	POINTS LINE_STRIP LINE_LOOP LINES TRIANGLE_STRIP TRIANGLE_FAN TRIANGLES"	&lt;C: void glDrawArrays(GLenum mode, GLint first, GLsizei count)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DrawElements: mode with: count with: type with: indices"	mode:	POINTS LINE_STRIP LINE_LOOP LINES TRIANGLE_STRIP TRIANGLE_FAN TRIANGLES	type:	UNSIGNED_BYTE UNSIGNED_SHORT UNSIGNED_INT"	&lt;C: void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DrawRangeElements: mode with: start with: end with: count with: type with: indices"	mode:	POINTS LINE_STRIP LINE_LOOP LINES TRIANGLE_STRIP TRIANGLE_FAN TRIANGLES	type:	UNSIGNED_BYTE UNSIGNED_SHORT UNSIGNED_INT	Status:	MAX_ELEMENTS_INDICES MAX_ELEMENTS_VERTICES"	&lt;C: void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">MultiDrawArrays: mode with: first with: count with: primcount"	mode:	POINTS LINE_STRIP LINE_LOOP LINES TRIANGLE_STRIP TRIANGLE_FAN TRIANGLES"	&lt;C: void glMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">MultiDrawElements: mode with: count with: type with: indices with: primcount"	mode:	POINTS LINE_STRIP LINE_LOOP LINES TRIANGLE_STRIP TRIANGLE_FAN TRIANGLES	type:	UNSIGNED_BYTE UNSIGNED_SHORT UNSIGNED_INT"	&lt;C: void glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const GLvoid * * indices, GLsizei primcount)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">SamplePass: pass	&lt;C: void glSamplePass(GLenum pass)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api framebuffer</category><body package="OpenGL">Clear: mask"	mask:	COLOR_BUFFER_BIT DEPTH_BUFFER_BIT STENCIL_BUFFER_BIT"	&lt;C: void glClear(GLbitfield mask)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ClearColor: red with: green with: blue with: alpha"	Status:	COLOR_CLEAR_VALUE"	&lt;C: void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ClearColorIiEXT: r with: g with: b with: a	&lt;C: void glClearColorIiEXT(GLint r, GLint g, GLint b, GLint a)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ClearColorIuiEXT: r with: g with: b with: a	&lt;C: void glClearColorIuiEXT(GLuint r, GLuint g, GLuint b, GLuint a)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ClearDepth: depth"	Status:	DEPTH_CLEAR_VALUE"	&lt;C: void glClearDepth(GLclampd depth)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ClearStencil: s"	Status:	STENCIL_CLEAR_VALUE"	&lt;C: void glClearStencil(GLint s)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CopyPixels: x with: y with: width with: height with: type"	type:	COLOR DEPTH STENCIL"	&lt;C: void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DrawBuffer: mode"	mode:	NONE FRONT_LEFT FRONT_RIGHT BACK_LEFT BACK_RIGHT FRONT BACK LEFT RIGHT FRONT_AND_BACK AUX0 AUX1 AUX2 AUX3	Status:	DRAW_BUFFER AUX_BUFFERS"	&lt;C: void glDrawBuffer(GLenum mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DrawBuffers: n with: bufs"	bufs:	DRAW_BUFFER0 DRAW_BUFFER1 DRAW_BUFFER2 DRAW_BUFFER3 DRAW_BUFFER4 DRAW_BUFFER5 DRAW_BUFFER6 DRAW_BUFFER7 DRAW_BUFFER8 DRAW_BUFFER9 DRAW_BUFFER10 DRAW_BUFFER11 DRAW_BUFFER12 DRAW_BUFFER13 DRAW_BUFFER14 DRAW_BUFFER15	Status:	MAX_DRAW_BUFFERS"	&lt;C: void glDrawBuffers(GLsizei n, const GLenum * bufs)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">PixelStoref: pname with: param"	pname:	PACK_SWAP_BYTES PACK_LSB_FIRST PACK_ROW_LENGTH PACK_IMAGE_HEIGHT PACK_SKIP_PIXELS PACK_SKIP_ROWS PACK_SKIP_IMAGES PACK_ALIGNMENT UNPACK_SWAP_BYTES UNPACK_LSB_FIRST UNPACK_ROW_LENGTH UNPACK_IMAGE_HEIGHT UNPACK_SKIP_PIXELS UNPACK_SKIP_ROWS UNPACK_SKIP_IMAGES UNPACK_ALIGNMENT"	&lt;C: void glPixelStoref(GLenum pname, GLfloat param)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">PixelStorei: pname with: param"	pname:	PACK_SWAP_BYTES PACK_LSB_FIRST PACK_ROW_LENGTH PACK_IMAGE_HEIGHT PACK_SKIP_PIXELS PACK_SKIP_ROWS PACK_SKIP_IMAGES PACK_ALIGNMENT UNPACK_SWAP_BYTES UNPACK_LSB_FIRST UNPACK_ROW_LENGTH UNPACK_IMAGE_HEIGHT UNPACK_SKIP_PIXELS UNPACK_SKIP_ROWS UNPACK_SKIP_IMAGES UNPACK_ALIGNMENT"	&lt;C: void glPixelStorei(GLenum pname, GLint param)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ReadBuffer: mode"	mode:	FRONT_LEFT FRONT_RIGHT BACK_LEFT BACK_RIGHT FRONT BACK LEFT RIGHT AUX0 AUX1 AUX2 AUX3"	&lt;C: void glReadBuffer(GLenum mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ReadPixels: x with: y with: width with: height with: format with: type with: pixels"	format:	STENCIL_INDEX DEPTH_COMPONENT RED GREEN BLUE ALPHA RGB BGR RGBA BGRA	type:	UNSIGNED_BYTE BYTE UNSIGNED_SHORT SHORT UNSIGNED_INT INT FLOAT UNSIGNED_BYTE_3_3_2 UNSIGNED_BYTE_2_3_3_REV UNSIGNED_SHORT_5_6_5 UNSIGNED_SHORT_5_6_5_REV UNSIGNED_SHORT_4_4_4_4 UNSIGNED_SHORT_4_4_4_4_REV UNSIGNED_SHORT_5_5_5_1 UNSIGNED_SHORT_1_5_5_5_REV UNSIGNED_INT_8_8_8_8 UNSIGNED_INT_8_8_8_8_REV UNSIGNED_INT_10_10_10_2 UNSIGNED_INT_2_10_10_10_REV	Status:	READ_BUFFER"	&lt;C: void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api pixel operations</category><body package="OpenGL">BlendColor: red with: green with: blue with: alpha"	Status:	BLEND_COLOR"	&lt;C: void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BlendEquation: mode"	mode:	FUNC_ADD FUNC_SUBTRACT FUNC_REVERSE_SUBTRACT MIN MAX LOGIC_OP	Status:	BLEND_EQUATION_RGB BLEND_EQUATION_ALPHA"	&lt;C: void glBlendEquation(GLenum mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BlendEquationSeparate: modeRGB with: modeAlpha"	modeRGB:	FUNC_ADD FUNC_SUBTRACT FUNC_REVERSE_SUBTRACT MIN MAX LOGIC_OP	modeAlpha:	FUNC_ADD FUNC_SUBTRACT FUNC_REVERSE_SUBTRACT MIN MAX LOGIC_OP"	&lt;C: void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BlendFunc: sfactor with: dfactor"	sfactor:		ZERO ONE SRC_COLOR ONE_MINUS_SRC_COLOR DST_COLOR ONE_MINUS_DST_COLOR SRC_ALPHA ONE_MINUS_SRC_ALPHA DST_ALPHA ONE_MINUS_DST_ALPHA CONSTANT_COLOR ONE_MINUS_CONSTANT_COLOR CONSTANT_ALPHA ONE_MINUS_CONSTANT_ALPHA SRC_ALPHA_SATURATE	dfactor:		ZERO ONE SRC_COLOR ONE_MINUS_SRC_COLOR DST_COLOR ONE_MINUS_DST_COLOR SRC_ALPHA ONE_MINUS_SRC_ALPHA DST_ALPHA ONE_MINUS_DST_ALPHA CONSTANT_COLOR ONE_MINUS_CONSTANT_COLOR CONSTANT_ALPHA ONE_MINUS_CONSTANT_ALPHA	Status:		BLEND_DST_RGB BLEND_DST_ALPHA BLEND_SRC_RGB BLEND_SRC_ALPHA	Enable:		BLEND"	&lt;C: void glBlendFunc(GLenum sfactor, GLenum dfactor)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BlendFuncSeparate: srcRGB with: dstRGB with: srcAlpha with: dstAlpha"	srcRGB:		ZERO ONE SRC_COLOR ONE_MINUS_SRC_COLOR DST_COLOR ONE_MINUS_DST_COLOR SRC_ALPHA ONE_MINUS_SRC_ALPHA DST_ALPHA ONE_MINUS_DST_ALPHA CONSTANT_COLOR ONE_MINUS_CONSTANT_COLOR CONSTANT_ALPHA ONE_MINUS_CONSTANT_ALPHA SRC_ALPHA_SATURATE	dstRGB:		ZERO ONE SRC_COLOR ONE_MINUS_SRC_COLOR DST_COLOR ONE_MINUS_DST_COLOR SRC_ALPHA ONE_MINUS_SRC_ALPHA DST_ALPHA ONE_MINUS_DST_ALPHA CONSTANT_COLOR ONE_MINUS_CONSTANT_COLOR CONSTANT_ALPHA ONE_MINUS_CONSTANT_ALPHA"	&lt;C: void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ColorMask: red with: green with: blue with: alpha"	Status:	COLOR_WRITEMASK RGBA_MODE"	&lt;C: void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DepthFunc: func"	func:	NEVER LESS EQUAL LEQUAL GREATER NOTEQUAL GEQUAL ALWAYS	Status:	DEPTH_FUNC	Enable:	DEPTH_TEST"	&lt;C: void glDepthFunc(GLenum func)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DepthMask: flag"	flag:		TRUE FALSE	Status:	DEPTH_WRITEMASK"	&lt;C: void glDepthMask(GLboolean flag)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DepthRange: zNear with: zFar"	Status:	DEPTH_RANGE"	&lt;C: void glDepthRange(GLclampd zNear, GLclampd zFar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">LogicOp: opcode"	opcode:	CLEAR SET COPY COPY_INVERTED NOOP INVERT AND NAND OR NOR XOR EQUIV AND_REVERSE AND_INVERTED OR_REVERSE OR_INVERTED	Status:	LOGIC_OP_MODE	Enable:	COLOR_LOGIC_OP"	&lt;C: void glLogicOp(GLenum opcode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">StencilFunc: func with: ref with: mask"	func:	NEVER LESS LEQUAL GREATER GEQUAL EQUAL NOTEQUAL ALWAYS	Status:	STENCIL_FUNC STENCIL_VALUE_MASK STENCIL_REF STENCIL_BACK_FUNC STENCIL_BACK_VALUE_MASK STENCIL_BACK_REF"	&lt;C: void glStencilFunc(GLenum func, GLint ref, GLuint mask)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">StencilFuncSeparate: face with: func with: ref with: mask"	face:	FRONT BACK FRONT_AND_BACK	func:	NEVER LESS LEQUAL GREATER GEQUAL EQUAL NOTEQUAL ALWAYS"	&lt;C: void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">StencilMask: mask"	Status:	STENCIL_WRITEMASK STENCIL_BACK_WRITEMASK"	&lt;C: void glStencilMask(GLuint mask)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">StencilMaskSeparate: face with: mask"	face:	FRONT BACK FRONT_AND_BACK"	&lt;C: void glStencilMaskSeparate(GLenum face, GLuint mask)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">StencilOp: fail with: zfail with: zpass"	fail:		KEEP ZERO REPLACE INCR INCR_WRAP DECR DECR_WRAP INVERT	dpfail:	KEEP ZERO REPLACE INCR INCR_WRAP DECR DECR_WRAP INVERT	dppass:	KEEP ZERO REPLACE INCR INCR_WRAP DECR DECR_WRAP INVERT	Status:	STENCIL_FAIL STENCIL_PASS_DEPTH_PASS STENCIL_PASS_DEPTH_FAIL STENCIL_BACK_FAIL STENCIL_BACK_PASS_DEPTH_PASS STENCIL_BACK_PASS_DEPTH_FAIL	Enable:	STENCIL_TEST"	&lt;C: void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">StencilOpSeparate: face with: fail with: zfail with: zpass"	face:	FRONT BACK FRONT_AND_BACK	fail:		KEEP ZERO REPLACE INCR INCR_WRAP DECR DECR_WRAP INVERT	dpfail:	KEEP ZERO REPLACE INCR INCR_WRAP DECR DECR_WRAP INVERT	dppass:	KEEP ZERO REPLACE INCR INCR_WRAP DECR DECR_WRAP INVERT"	&lt;C: void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api state requests</category><body package="OpenGL">GetBooleanv: pname with: params	&lt;C: void glGetBooleanv(GLenum pname, GLboolean * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetDoublev: pname with: params	&lt;C: void glGetDoublev(GLenum pname, GLdouble * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetError"	Result:	INVALID_ENUM INVALID_FRAMEBUFFER_OPERATION_EXT INVALID_OPERATION INVALID_VALUE NO_ERROR OUT_OF_MEMORY STACK_OVERFLOW STACK_UNDERFLOW TABLE_TOO_LARGE"	&lt;C: GLenum glGetError(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetFloatv: pname with: params	&lt;C: void glGetFloatv(GLenum pname, GLfloat * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetIntegerv: pname with: params	&lt;C: void glGetIntegerv(GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetString: name"	name:	VENDOR RENDERER VERSION SHADING_LANGUAGE_VERSION"	&lt;C: const GLubyte *  glGetString(GLenum name)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api drawing control</category><body package="OpenGL">ClipPlane: plane with: equation"	Status:	MAX_CLIP_DISTANCES"	&lt;C: void glClipPlane(GLenum plane, const GLdouble * equation)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CullFace: mode"	mode:	FRONT BACK FRONT_AND_BACK	Status:	CULL_FACE_MODE	Enable:	CULL_FACE"	&lt;C: void glCullFace(GLenum mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FrontFace: mode"	mode:	CW CCW	Status:	FRONT_FACE"	&lt;C: void glFrontFace(GLenum mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetClipPlane: plane with: equation"	plane:	CLIP_DISTANCE0 CLIP_DISTANCE1 CLIP_DISTANCE2 CLIP_DISTANCE3 CLIP_DISTANCE4 CLIP_DISTANCE5"	&lt;C: void glGetClipPlane(GLenum plane, GLdouble * equation)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Hint: target with: mode"	target:	LINE_SMOOTH_HINT POLYGON_SMOOTH_HINT TEXTURE_COMPRESSION_HINT FRAGMENT_SHADER_DERIVATIVE_HINT	mode:	FASTEST NICEST DONT_CARE"	&lt;C: void glHint(GLenum target, GLenum mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">LineWidth: width"	Status:	LINE_WIDTH ALIASED_LINE_WIDTH_RANGE SMOOTH_LINE_WIDTH_RANGE SMOOTH_LINE_WIDTH_GRANULARITY	Enable:	LINE_SMOOTH"	&lt;C: void glLineWidth(GLfloat width)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">PointParameterf: pname with: param"	pname:	POINT_SIZE_MIN POINT_SIZE_MAX POINT_FADE_THRESHOLD_SIZE	Status:	POINT_DISTANCE_ATTENUATION POINT_FADE_THRESHOLD_SIZE POINT_SIZE_MAX POINT_SIZE_MIN"	&lt;C: void glPointParameterf(GLenum pname, GLfloat param)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">PointParameterfv: pname with: params"	pname:	POINT_SIZE_MIN POINT_SIZE_MAX POINT_DISTANCE_ATTENUATION POINT_FADE_THRESHOLD_SIZE	params:	UPPER_LEFT LOWER_LEFT"	&lt;C: void glPointParameterfv(GLenum pname, const GLfloat * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">PointParameteri: pname with: param"	pname:	POINT_SIZE_MIN POINT_SIZE_MAX POINT_FADE_THRESHOLD_SIZE"	&lt;C: void glPointParameteri(GLenum pname, GLint param)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">PointParameteriv: pname with: params"	pname:	POINT_SIZE_MIN POINT_SIZE_MAX POINT_DISTANCE_ATTENUATION POINT_FADE_THRESHOLD_SIZE	params:	UPPER_LEFT LOWER_LEFT"	&lt;C: void glPointParameteriv(GLenum pname, const GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">PointSize: size"	Status:	POINT_SIZE POINT_SIZE_GRANULARITY POINT_SIZE_RANGE SMOOTH_POINT_SIZE_RANGE SMOOTH_POINT_SIZE_GRANULARITY VERTEX_PROGRAM_POINT_SIZE ALIASED_POINT_SIZE_RANGE"	&lt;C: void glPointSize(GLfloat size)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">PolygonMode: face with: mode"	face:	FRONT_AND_BACK	mode:	POINT LINE FILL	Status:	POLYGON_MODE POLYGON_SMOOTH"	&lt;C: void glPolygonMode(GLenum face, GLenum mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">PolygonOffset: factor with: units"	Status:	POLYGON_OFFSET_FACTOR POLYGON_OFFSET_UNITS POLYGON_OFFSET_FILL POLYGON_OFFSET_LINE POLYGON_OFFSET_POINT"	&lt;C: void glPolygonOffset(GLfloat factor, GLfloat units)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">SampleCoverage: value with: invert"	invert:	TRUE FALSE	Status:	SAMPLE_BUFFERS SAMPLE_COVERAGE_VALUE SAMPLE_COVERAGE_INVERT SAMPLES	Enable:	MULTISAMPLE SAMPLE_ALPHA_TO_COVERAGE SAMPLE_ALPHA_TO_ONE SAMPLE_COVERAGE"	&lt;C: void glSampleCoverage(GLclampf value, GLboolean invert)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Scissor: x with: y with: width with: height"	Status:	SCISSOR_BOX	Enable:	SCISSOR_TEST"	&lt;C: void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ShadeModel: mode"	mode:	FLAT SMOOTH	Status:	SHADE_MODEL"	&lt;C: void glShadeModel(GLenum mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">Viewport: x with: y with: width with: height"	Status:	VIEWPORT MAX_VIEWPORT_DIMS"	&lt;C: void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_flush_buffer_range</category><body package="OpenGL">BufferParameteriAPPLE: target with: pname with: param	&lt;C: void glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FlushMappedBufferRangeAPPLE: target with: offset with: size	&lt;C: void glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_fence</category><body package="OpenGL">DeleteFencesAPPLE: n with: fences	&lt;C: void glDeleteFencesAPPLE(GLsizei n, const GLuint * fences)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FinishFenceAPPLE: fence	&lt;C: void glFinishFenceAPPLE(GLuint fence)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FinishObjectAPPLE: object with: name	&lt;C: void glFinishObjectAPPLE(GLenum object, GLuint name)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GenFencesAPPLE: n with: fences	&lt;C: void glGenFencesAPPLE(GLsizei n, GLuint * fences)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">IsFenceAPPLE: fence	&lt;C: GLboolean glIsFenceAPPLE(GLuint fence)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">SetFenceAPPLE: fence	&lt;C: void glSetFenceAPPLE(GLuint fence)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TestFenceAPPLE: fence	&lt;C: GLboolean glTestFenceAPPLE(GLuint fence)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TestObjectAPPLE: object with: name	&lt;C: GLboolean glTestObjectAPPLE(GLenum object, GLuint name)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_compiled_vertex_array</category><body package="OpenGL">LockArraysEXT: arg1 with: arg2	&lt;C: void glLockArraysEXT(GLint arg1, GLsizei arg2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UnlockArraysEXT	&lt;C: void glUnlockArraysEXT(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_object_purgeable</category><body package="OpenGL">GetObjectParameterivAPPLE: objectType with: name with: pname with: params	&lt;C: void glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ObjectPurgeableAPPLE: objectType with: name with: option	&lt;C: GLenum glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">ObjectUnpurgeableAPPLE: objectType with: name with: option	&lt;C: GLenum glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_flush_render</category><body package="OpenGL">FinishRenderAPPLE	&lt;C: void glFinishRenderAPPLE(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FlushRenderAPPLE	&lt;C: void glFlushRenderAPPLE(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">SwapAPPLE	&lt;C: void glSwapAPPLE(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension ATI_pn_triangles</category><body package="OpenGL">PNTrianglesfATI: pname with: param	&lt;C: void glPNTrianglesfATI(GLenum pname, GLfloat param)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">PNTrianglesiATI: pname with: param	&lt;C: void glPNTrianglesiATI(GLenum pname, GLint param)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_vertex_program_evaluators</category><body package="OpenGL">DisableVertexAttribAPPLE: index with: pname	&lt;C: void glDisableVertexAttribAPPLE(GLuint index, GLenum pname)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">EnableVertexAttribAPPLE: index with: pname	&lt;C: void glEnableVertexAttribAPPLE(GLuint index, GLenum pname)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">IsVertexAttribEnabledAPPLE: index with: pname	&lt;C: GLboolean glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">MapVertexAttrib1dAPPLE: index with: size with: u1 with: u2 with: stride with: order with: points	&lt;C: void glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">MapVertexAttrib1fAPPLE: index with: size with: u1 with: u2 with: stride with: order with: points	&lt;C: void glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">MapVertexAttrib2dAPPLE: index with: size with: u1 with: u2 with: ustride with: uorder with: v1 with: v2 with: vstride with: vorder with: points	&lt;C: void glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">MapVertexAttrib2fAPPLE: index with: size with: u1 with: u2 with: ustride with: uorder with: v1 with: v2 with: vstride with: vorder with: points	&lt;C: void glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_bindable_uniform</category><body package="OpenGL">GetUniformBufferSizeEXT: program with: location	&lt;C: GLint glGetUniformBufferSizeEXT(GLuint program, GLint location)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetUniformOffsetEXT: program with: location	&lt;C: GLintptr glGetUniformOffsetEXT(GLuint program, GLint location)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">UniformBufferEXT: program with: location with: buffer	&lt;C: void glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_texture_range</category><body package="OpenGL">GetTexParameterPointervAPPLE: target with: pname with: params	&lt;C: void glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid * * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TextureRangeAPPLE: target with: length with: pointer	&lt;C: void glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid * pointer)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension APPLE_vertex_array_range</category><body package="OpenGL">FlushVertexArrayRangeAPPLE: length with: pointer	&lt;C: void glFlushVertexArrayRangeAPPLE(GLsizei length, const GLvoid * pointer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexArrayParameteriAPPLE: pname with: param	&lt;C: void glVertexArrayParameteriAPPLE(GLenum pname, GLint param)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">VertexArrayRangeAPPLE: length with: pointer	&lt;C: void glVertexArrayRangeAPPLE(GLsizei length, const GLvoid * pointer)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>extension EXT_depth_bounds_test</category><body package="OpenGL">DepthBoundsEXT: zmin with: zmax	&lt;C: void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api framebuffer object</category><body package="OpenGL">BindFramebufferEXT: target with: framebuffer"	target:	FRAMEBUFFER_EXT"	&lt;C: void glBindFramebufferEXT(GLenum target, GLuint framebuffer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BindRenderbufferEXT: target with: renderbuffer"	target:	RENDERBUFFER_EXT"	&lt;C: void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BlitFramebufferEXT: srcX0 with: srcY0 with: srcX1 with: srcY1 with: dstX0 with: dstY0 with: dstX1 with: dstY1 with: mask with: filter	&lt;C: void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">CheckFramebufferStatusEXT: target"	target:	FRAMEBUFFER_EXT"	&lt;C: GLenum glCheckFramebufferStatusEXT(GLenum target)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DeleteFramebuffersEXT: n with: framebuffers	&lt;C: void glDeleteFramebuffersEXT(GLsizei n, const GLuint * framebuffers)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DeleteRenderbuffersEXT: n with: renderbuffers	&lt;C: void glDeleteRenderbuffersEXT(GLsizei n, const GLuint * renderbuffers)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FramebufferRenderbufferEXT: target with: attachment with: renderbuffertarget with: renderbuffer"	target:	FRAMEBUFFER_EXT"	&lt;C: void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FramebufferTexture1DEXT: target with: attachment with: textarget with: texture with: level"	target:		FRAMEBUFFER_EXT	attachments:	COLOR_ATTACHMENT0_EXT COLOR_ATTACHMENT1_EXT COLOR_ATTACHMENT2_EXT COLOR_ATTACHMENT3_EXT COLOR_ATTACHMENT4_EXT COLOR_ATTACHMENT5_EXT COLOR_ATTACHMENT6_EXT COLOR_ATTACHMENT7_EXT COLOR_ATTACHMENT8_EXT COLOR_ATTACHMENT9_EXT COLOR_ATTACHMENT10_EXT COLOR_ATTACHMENT11_EXT COLOR_ATTACHMENT12_EXT COLOR_ATTACHMENT13_EXT COLOR_ATTACHMENT14_EXT COLOR_ATTACHMENT15_EXT DEPTH_ATTACHMENT_EXT STENCIL_ATTACHMENT_EXT"	&lt;C: void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FramebufferTexture2DEXT: target with: attachment with: textarget with: texture with: level"	target:		FRAMEBUFFER_EXT	attachments:	COLOR_ATTACHMENT0_EXT COLOR_ATTACHMENT1_EXT COLOR_ATTACHMENT2_EXT COLOR_ATTACHMENT3_EXT COLOR_ATTACHMENT4_EXT COLOR_ATTACHMENT5_EXT COLOR_ATTACHMENT6_EXT COLOR_ATTACHMENT7_EXT COLOR_ATTACHMENT8_EXT COLOR_ATTACHMENT9_EXT COLOR_ATTACHMENT10_EXT COLOR_ATTACHMENT11_EXT COLOR_ATTACHMENT12_EXT COLOR_ATTACHMENT13_EXT COLOR_ATTACHMENT14_EXT COLOR_ATTACHMENT15_EXT DEPTH_ATTACHMENT_EXT STENCIL_ATTACHMENT_EXT"	&lt;C: void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FramebufferTexture3DEXT: target with: attachment with: textarget with: texture with: level with: zoffset"	target:		FRAMEBUFFER_EXT	attachments:	COLOR_ATTACHMENT0_EXT COLOR_ATTACHMENT1_EXT COLOR_ATTACHMENT2_EXT COLOR_ATTACHMENT3_EXT COLOR_ATTACHMENT4_EXT COLOR_ATTACHMENT5_EXT COLOR_ATTACHMENT6_EXT COLOR_ATTACHMENT7_EXT COLOR_ATTACHMENT8_EXT COLOR_ATTACHMENT9_EXT COLOR_ATTACHMENT10_EXT COLOR_ATTACHMENT11_EXT COLOR_ATTACHMENT12_EXT COLOR_ATTACHMENT13_EXT COLOR_ATTACHMENT14_EXT COLOR_ATTACHMENT15_EXT DEPTH_ATTACHMENT_EXT STENCIL_ATTACHMENT_EXT"	&lt;C: void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FramebufferTextureEXT: target with: attachment with: texture with: level"	target:		FRAMEBUFFER_EXT	attachments:	COLOR_ATTACHMENT0_EXT COLOR_ATTACHMENT1_EXT COLOR_ATTACHMENT2_EXT COLOR_ATTACHMENT3_EXT COLOR_ATTACHMENT4_EXT COLOR_ATTACHMENT5_EXT COLOR_ATTACHMENT6_EXT COLOR_ATTACHMENT7_EXT COLOR_ATTACHMENT8_EXT COLOR_ATTACHMENT9_EXT COLOR_ATTACHMENT10_EXT COLOR_ATTACHMENT11_EXT COLOR_ATTACHMENT12_EXT COLOR_ATTACHMENT13_EXT COLOR_ATTACHMENT14_EXT COLOR_ATTACHMENT15_EXT DEPTH_ATTACHMENT_EXT STENCIL_ATTACHMENT_EXT"	&lt;C: void glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FramebufferTextureFaceEXT: target with: attachment with: texture with: level with: face	&lt;C: void glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">FramebufferTextureLayerEXT: target with: attachment with: texture with: level with: layer	&lt;C: void glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GenFramebuffersEXT: n with: framebuffers	&lt;C: void glGenFramebuffersEXT(GLsizei n, GLuint * framebuffers)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GenRenderbuffersEXT: n with: renderbuffers	&lt;C: void glGenRenderbuffersEXT(GLsizei n, GLuint * renderbuffers)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetFramebufferAttachmentParameterivEXT: target with: attachment with: pname with: params"	target:		FRAMEBUFFER_EXT	attachments:	COLOR_ATTACHMENT0_EXT COLOR_ATTACHMENT1_EXT COLOR_ATTACHMENT2_EXT COLOR_ATTACHMENT3_EXT COLOR_ATTACHMENT4_EXT COLOR_ATTACHMENT5_EXT COLOR_ATTACHMENT6_EXT COLOR_ATTACHMENT7_EXT COLOR_ATTACHMENT8_EXT COLOR_ATTACHMENT9_EXT COLOR_ATTACHMENT10_EXT COLOR_ATTACHMENT11_EXT COLOR_ATTACHMENT12_EXT COLOR_ATTACHMENT13_EXT COLOR_ATTACHMENT14_EXT COLOR_ATTACHMENT15_EXT DEPTH_ATTACHMENT_EXT STENCIL_ATTACHMENT_EXT	pname:		FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT"	&lt;C: void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetRenderbufferParameterivEXT: target with: pname with: params"	target:	RENDERBUFFER_EXT	pname:	RENDERBUFFER_WIDTH_EXT RENDERBUFFER_HEIGHT_EXT RENDERBUFFER_INTERNAL_FORMAT_EXT RENDERBUFFER_RED_SIZE_EXT RENDERBUFFER_GREEN_SIZE_EXT RENDERBUFFER_BLUE_SIZE_EXT RENDERBUFFER_ALPHA_SIZE_EXT RENDERBUFFER_DEPTH_SIZE_EXT RENDERBUFFER_STENCIL_SIZE_EXT"	&lt;C: void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">IsFramebufferEXT: framebuffer	&lt;C: GLboolean glIsFramebufferEXT(GLuint framebuffer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">IsRenderbufferEXT: renderbuffer	&lt;C: GLboolean glIsRenderbufferEXT(GLuint renderbuffer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">RenderbufferStorageEXT: target with: internalformat with: width with: height"	target:			RENDERBUFFER_EXT	internalformat:	STENCIL_INDEX1_EXT STENCIL_INDEX4_EXT STENCIL_INDEX8_EXT STENCIL_INDEX16_EXT"	&lt;C: void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">RenderbufferStorageMultisampleEXT: target with: samples with: internalformat with: width with: height"	target:			RENDERBUFFER_EXT	internalformat:	STENCIL_INDEX1_EXT STENCIL_INDEX4_EXT STENCIL_INDEX8_EXT STENCIL_INDEX16_EXT"	&lt;C: void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api vertex array object</category><body package="OpenGL">BindVertexArrayAPPLE: id	&lt;C: void glBindVertexArrayAPPLE(GLuint id)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">DeleteVertexArraysAPPLE: n with: ids	&lt;C: void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint * ids)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GenVertexArraysAPPLE: n with: ids	&lt;C: void glGenVertexArraysAPPLE(GLsizei n, GLuint * ids)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">IsVertexArrayAPPLE: id	&lt;C: GLboolean glIsVertexArrayAPPLE(GLuint id)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OpenGL.OpenGLInterface</class-id> <category>api transform feedback</category><body package="OpenGL">BeginTransformFeedbackEXT: primitiveMode"	primitiveMode:	POINTS LINES TRIANGLES"	&lt;C: void glBeginTransformFeedbackEXT(GLenum primitiveMode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BindBufferBaseEXT: target with: index with: buffer"	target:	TRANSFORM_FEEDBACK_BUFFER_EXT"	&lt;C: void glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BindBufferOffsetEXT: target with: index with: buffer with: offset"	target:	TRANSFORM_FEEDBACK_BUFFER_EXT"	&lt;C: void glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">BindBufferRangeEXT: target with: index with: buffer with: offset with: size"	target:	TRANSFORM_FEEDBACK_BUFFER_EXT"	&lt;C: void glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">EndTransformFeedbackEXT	&lt;C: void glEndTransformFeedbackEXT(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetBooleanIndexedvEXT: param with: index with: values	&lt;C: void glGetBooleanIndexedvEXT(GLenum param, GLuint index, GLboolean * values)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetIntegerIndexedvEXT: param with: index with: values	&lt;C: void glGetIntegerIndexedvEXT(GLenum param, GLuint index, GLint * values)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">GetTransformFeedbackVaryingEXT: program with: index with: bufSize with: length with: size with: type with: name	&lt;C: void glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL">TransformFeedbackVaryingsEXT: program with: count with: varyings with: bufferMode"	bufferMode:	INTERLEAVED_ATTRIBS_EXT SEPARATE_ATTRIBS_EXT"	&lt;C: void glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar * * varyings, GLenum bufferMode)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ExternalInterface</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>includeFiles includeDirectories libraryFiles libraryDirectories virtual optimizationLevel </class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>External-Interface</category><attributes><package>External-Interface</package></attributes></class><class><name>Number</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>SmallInteger</name><environment>Core</environment><super>Core.Integer</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars>minVal maxVal maxBits maxBytes </class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Array</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class><class><name>Image</name><environment>Graphics</environment><super>Graphics.PixelArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bits width height depth bitsPerPixel palette maxPixelValue rowByteSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Images</category><attributes><package>Graphics-Images</package></attributes></class><class><name>Depth1Image</name><environment>Graphics</environment><super>Graphics.Image</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Images</category><attributes><package>Graphics-Images</package></attributes></class><class><name>IntegerArray</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class><class><name>DwordArray</name><environment>Core</environment><super>Core.IntegerArray</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class><class><name>Point</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>ByteArray</name><environment>Core</environment><super>Core.IntegerArray</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class><class><name>Interval</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>start stop step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class><class><name>Depth24Image</name><environment>Graphics</environment><super>Graphics.Image</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Images</category><attributes><package>Graphics-Images</package></attributes></class><class><name>Depth32Image</name><environment>Graphics</environment><super>Graphics.Image</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Images</category><attributes><package>Graphics-Images</package></attributes></class><class><name>ColorValue</name><environment>Graphics</environment><super>Graphics.SimplePaint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>red green blue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Support</category><attributes><package>Graphics-Support</package></attributes></class><class><name>Depth8Image</name><environment>Graphics</environment><super>Graphics.Image</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Images</category><attributes><package>Graphics-Images</package></attributes></class><class><name>WordArray</name><environment>Core</environment><super>Core.IntegerArray</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class></st-source>