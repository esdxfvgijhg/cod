<?xml version="1.0"?><st-source><!-- Name: RBBytecodeToolNotice: Copyright 2002 - 2015 Martin KobeticThis utility is made available to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: This is a simple bytecode viewing tool for RB. The actual bytecode view offers very little beyond what you see when you select '-bytecode' in a CompiledMethod inspector. The most useful thing is the list view on the method literals which allows to inspect individual literals conveniently.Ultimately it would be cool to allow editing bytecode in the tool, but that's many coding hours ahead in the future :-).DbIdentifier: bear73DbTrace: 454541DbUsername: nrossDbVersion: 15PackageName: RBBytecodeToolParcel: #('RBBytecodeTool')ParcelName: RBBytecodeToolPrintStringCache: (15,nross)Version: 15Date: 7:20:39 AM January 9, 2015 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.1 (jan15.1) of January 9, 2015 on January 9, 2015 at 7:20:39 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>BytecodeTool</name><environment>Refactory.Browser</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>compiledCode literals bytecodes selectedRow </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBBytecodeTool</category><attributes><package>RBBytecodeTool</package></attributes></class><comment><class-id>Refactory.Browser.BytecodeTool</class-id><body>Instance Variables:	compiledCode	&lt;CompiledCode&gt;	the CompiledMethod being viewed	literals	&lt;ValueHolder&gt;	the UI aspect for the collection of method literals	bytecodes	&lt;SelectionInList&gt;	the UI aspect for the list of BytecodeLines	selectedRow	&lt;Object&gt; the UI aspect for the selected BytecodeLine</body></comment><class><name>BrowserBytecodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bytecodeTool </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBBytecodeTool</category><attributes><package>RBBytecodeTool</package></attributes></class><comment><class-id>Refactory.Browser.BrowserBytecodeTool</class-id><body>Instance Variables:	bytecodeTool	&lt;BytecodeTool&gt;	the actual tool embedded as a subcanvas</body></comment><class><name>BytecodeLineProducer</name><environment>Refactory.Browser</environment><super>Kernel.InstructionPrinter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBBytecodeTool</category><attributes><package>RBBytecodeTool</package></attributes></class><class><name>BytecodeLine</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pc bytecode symbolic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBBytecodeTool</category><attributes><package>RBBytecodeTool</package></attributes></class><comment><class-id>Refactory.Browser.BytecodeLine</class-id><body>Instance Variables:	pc	&lt;SmallInteger&gt;	the program counter	bytecode	&lt;Collection of: SmallInteger&gt;	bytes of this instruction	symbolic	&lt;String&gt;	symbolic description of the bytecode instuction</body></comment><methods><class-id>Refactory.Browser.BytecodeTool</class-id> <category>accessing</category><body package="RBBytecodeTool">compiledCode	^compiledCode</body><body package="RBBytecodeTool">compiledCode: aCompiledCode	compiledCode := aCompiledCode.	(builder componentAt: #header) labelString: (self headerFrom: aCompiledCode).	bytecodes list: (self bytecodesFrom: aCompiledCode).	literals list: (self literalsFrom: aCompiledCode).</body></methods><methods><class-id>Refactory.Browser.BytecodeTool</class-id> <category>actions</category><body package="RBBytecodeTool">inspectSelectedBytecodeLine	bytecodes selection inspect</body><body package="RBBytecodeTool">inspectSelectedLiteral	literals selection inspect</body></methods><methods><class-id>Refactory.Browser.BytecodeTool</class-id> <category>private</category><body package="RBBytecodeTool">bytecodesFrom: aCompiledCode	| writeStream |	writeStream := List new writeStream.	aCompiledCode isNil ifFalse:		[			(BytecodeLineProducer on: aCompiledCode)				printInstructionsOn: writeStream		].	^writeStream contents</body><body package="RBBytecodeTool">headerFrom: aCompiledCode	| aStream |	aCompiledCode isNil ifTrue: [^''].	(aStream := (String new: 20) writeStream)		nextPutAll: (aCompiledCode isShort					ifTrue: ['short']					ifFalse: [aCompiledCode isLong								ifTrue: ['long']								ifFalse: ['normal']]);		space.	aCompiledCode class printOn: aStream.	aCompiledCode printAttributesOn: aStream.	^aStream contents</body><body package="RBBytecodeTool">literalsFrom: aCompiledCode	^aCompiledCode isNil		ifTrue: [ List new ]		ifFalse: [ aCompiledCode allLiterals asList ]</body><body package="RBBytecodeTool">postBuildWith: aBuilder	(aBuilder componentAt: #bytecodes) widget gridLineColor: ColorValue lightGray.	(aBuilder componentAt: #literals) widget displayStringSelector: #printString</body></methods><methods><class-id>Refactory.Browser.BytecodeTool</class-id> <category>aspects</category><body package="RBBytecodeTool">bytecodes	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^bytecodes isNil		ifTrue:			[bytecodes :=  SelectionInList new.			bytecodes selectionIndexHolder compute:				[:v |				self selectedRow value: bytecodes selection].			bytecodes]		ifFalse:			[bytecodes]</body><body package="RBBytecodeTool">literals	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^literals isNil		ifTrue: [literals := SelectionInList new ]		ifFalse: [literals]</body><body package="RBBytecodeTool">selectedRow	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^selectedRow isNil		ifTrue:			[selectedRow := nil asValue]		ifFalse:			[selectedRow]</body></methods><methods><class-id>Refactory.Browser.BrowserBytecodeTool</class-id> <category>accessing</category><body package="RBBytecodeTool">bytecodeTool	^bytecodeTool isNil		ifTrue: [ bytecodeTool := BytecodeTool new ]		ifFalse: [ bytecodeTool ]</body></methods><methods><class-id>Refactory.Browser.BrowserBytecodeTool</class-id> <category>updating</category><body package="RBBytecodeTool">isEditing	^false</body><body package="RBBytecodeTool">updateContents	| compiledMethod |	"self updateTextWidget."	(self selectors size ~= 1 or: [self selectedClass isNil])		 ifTrue: [^self bytecodeTool compiledCode: nil].	compiledMethod :=		self methodClass			compiledMethodAt: self selector			ifAbsent: [self warn: 'Method has been removed'.					^self bytecodeTool compiledCode: nil].	self bytecodeTool compiledCode: compiledMethod.	"self updateSelection"</body><body package="RBBytecodeTool">updateDisplay	super updateDisplay.	bytecodeTool notNil ifTrue: [		bytecodeTool builder: nil.		self 			installSubcanvasIn: #bytecodeTool			using: bytecodeTool			spec: #windowSpec]</body></methods><methods><class-id>Refactory.Browser.BrowserBytecodeTool</class-id> <category>tab APIs</category><body package="RBBytecodeTool">isActive		^codeModel state notNil		and:			[codeModel selector notNil				or: [codeModel protocol notNil and: [codeModel isData not]]]</body><body package="RBBytecodeTool">tabName	^#Bytecode &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.BytecodeLineProducer</class-id> <category>private</category><body package="RBBytecodeTool">printNextInstructionOn: aStream	| oldPC |	oldPC := inStream pc.	stream reset.	inStream interpretNextInstructionFor: self.	stream skip: -2.  "remove final ; "	aStream nextPut: (		BytecodeLine			pc: oldPC			bytecode: ((oldPC to: inStream pc - 1)  collect: [ :i | method byteAt: i ])			symbolic: stream contents)</body></methods><methods><class-id>Refactory.Browser.BytecodeLine</class-id> <category>accessing</category><body package="RBBytecodeTool">bytecode	^bytecode</body><body package="RBBytecodeTool">bytecode: anObject	bytecode := anObject</body><body package="RBBytecodeTool">pc	^pc</body><body package="RBBytecodeTool">pc: anObject	pc := anObject</body><body package="RBBytecodeTool">symbolic	^symbolic</body><body package="RBBytecodeTool">symbolic: anObject	symbolic := anObject</body></methods><methods><class-id>Refactory.Browser.BytecodeLine</class-id> <category>aspects</category><body package="RBBytecodeTool">bytecodeString	| stream |	stream := String new writeStream.	bytecode		do: [ :byte |			byte printOn: stream base: 16 digitsToPad: 2 highDigit: 2 ]		separatedBy: [ stream space ].	^stream contents</body></methods><methods><class-id>Refactory.Browser.BytecodeLine class</class-id> <category>instance creation</category><body package="RBBytecodeTool">pc: anInteger bytecode: aByteArray symbolic: aString	^self new		pc: anInteger;		bytecode: aByteArray;		symbolic: aString;		yourself</body></methods><methods><class-id>Refactory.Browser.BytecodeTool class</class-id> <category>resources</category><body package="RBBytecodeTool">bytecodeMenu	"Tools.MenuEditor new openOnClass: self andSelector: #bytecodeMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'inspect' 				#value: #inspectSelectedBytecodeLine ) ) #(1 ) nil ) decodeAsLiteralArray</body><body package="RBBytecodeTool">literalMenu	"Tools.MenuEditor new openOnClass: self andSelector: #literalMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'inspect' 				#value: #inspectSelectedLiteral ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.BytecodeTool class</class-id> <category>interface specs</category><body package="RBBytecodeTool">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Bytecode Tool' 			#bounds: #(#{Graphics.Rectangle} 800 600 1386 1016 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showVerticalLines true #allowColumnReordering false #rowSize 20 #allowColumnResizing true #allowSorting false #showHorizontalLines false ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 25 0 0 0.666666 0 1 ) 					#name: #bytecodes 					#flags: 13 					#model: #bytecodes 					#menu: #bytecodeMenu 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #allowSorting false ) 							#model: #'selectedRow pc' 							#label: 'PC' 							#labelIsImage: false 							#width: 40 							#rendererType: #Text 							#editorType: #None 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #allowSorting false ) 							#model: #'selectedRow bytecodeString' 							#label: 'Bytecode' 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #None 							#noScroll: false 							#formatString: '' ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #allowSorting false ) 							#model: #'selectedRow symbolic' 							#label: 'Symbolic' 							#labelIsImage: false 							#width: 300 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) ) 					#labelsAsButtons: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.666666 25 0 1 0.666666 0 1 ) 					#name: #bytecodeLiteralSplitter 					#horizontal: false 					#minAboveSize: 300 					#minBelowSize: 30 					#aboveWidgets: 'bytecodes' 					#belowWidgets: 'literals' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 24 0 ) 					#name: #header 					#label: 'Header' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.666666 25 0 0 1 0 1 ) 					#name: #literals 					#model: #literals 					#menu: #literalMenu 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserBytecodeTool class</class-id> <category>interface specs</category><body package="RBBytecodeTool">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 446 305 1024 768 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #bytecodeTool 					#flags: 0 					#clientKey: #bytecodeTool ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>tool registration</category><body package="RBBytecodeTool">bytecodeToolClass	&lt;tool: 1000&gt;	^BrowserBytecodeTool</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>CodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel menu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>InstructionPrinter</name><environment>Kernel</environment><super>Kernel.InstructionClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method stream inStream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class></st-source>