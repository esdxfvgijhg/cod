<?xml version="1.0"?><st-source><!-- Name: AppeX-Tests-AutomatedExamplesComment: Automated testing of AppeX web examples.  Uses AppeX-JS-AutomationDbIdentifier: bear73DbTrace: 502792DbUsername: vdegenDbVersion: 8.3 - 3DevelopmentPrerequisites: #(#(#any 'AppeX-JS-Automation' '') #(#any 'SUnitToo' '') #(#any 'AppeX-Examples' '') #(#any 'AppeX-Examples-Dart' '') #(#any 'AppeX-Examples-Mobile' '') #(#any 'AppeX-Examples-Scaffolding' '') #(#any 'AppeX-Examples-Amber' ''))PackageName: AppeX-Tests-AutomatedExamplesParcel: #('AppeX-Tests-AutomatedExamples')PrerequisiteDescriptions: #(#(#name 'AppeX-JS-Automation' #componentType #package) #(#name 'SUnitToo' #componentType #package) #(#name 'AppeX-Examples' #componentType #package) #(#name 'AppeX-Examples-Dart' #componentType #package) #(#name 'AppeX-Examples-Mobile' #componentType #package) #(#name 'AppeX-Examples-Scaffolding' #componentType #package) #(#name 'AppeX-Examples-Amber' #componentType #package))PrerequisiteParcels: #(#('AppeX-JS-Automation' '') #('SUnitToo' '') #('AppeX-Examples' '') #('AppeX-Examples-Dart' '') #('AppeX-Examples-Mobile' '') #('AppeX-Examples-Scaffolding' '') #('AppeX-Examples-Amber' ''))PrintStringCache: (8.3 - 3,vdegen)Version: 8.3 - 3Date: 3:30:54 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:30:54 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AutomatedExamplesTests</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>automationServer examplesServer flipBookServer portNumber responder examplesServerWasPresent automationServerWasPresent flipBookServerWasPresent automationServerWasRunning examplesServerWasRunning flipBookServerWasRunning </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Tests-AutomatedExamples</package></attributes></class><class><name>GenealogyAutomator</name><environment>AppeX</environment><super>AppeX.JSAutomatorClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Tests-AutomatedExamples</package></attributes></class><comment><class-id>AppeX.GenealogyAutomator</class-id><body>GenealogyClosure is for automated testing of GenealogyApplication example.</body></comment><class><name>FlipBookAutomator</name><environment>AppeX</environment><super>AppeX.JSAutomatorClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Tests-AutomatedExamples</package></attributes></class><comment><class-id>AppeX.FlipBookAutomator</class-id><body>FlipBookAutomator is for automated testing of the FlipBook example.</body></comment><class><name>CounterAutomator</name><environment>AppeX</environment><super>AppeX.JSAutomatorClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Tests-AutomatedExamples</package></attributes></class><comment><class-id>AppeX.CounterAutomator</class-id><body>CounterAutomator is for automated testing of the Counter example.</body></comment><class><name>D3BarAutomator</name><environment>AppeX</environment><super>AppeX.JSAutomatorClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Tests-AutomatedExamples</package></attributes></class><comment><class-id>AppeX.D3BarAutomator</class-id><body>D3BarAutomator is for automated testing of the D3Bar example.</body></comment><class><name>SearchAutomator</name><environment>AppeX</environment><super>AppeX.JSAutomatorClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Tests-AutomatedExamples</package></attributes></class><comment><class-id>AppeX.SearchAutomator</class-id><body>SearchAutomator is for automated testing of a website external to the current image.</body></comment><class><name>SeasideWelcomeAutomator</name><environment>AppeX</environment><super>AppeX.JSAutomatorClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Tests-AutomatedExamples</package></attributes></class><comment><class-id>AppeX.SeasideWelcomeAutomator</class-id><body>SeasideWelcomeAutomator is for automated testing of the AppeXSeaside example..</body></comment><class><name>D3ChartAutomator</name><environment>AppeX</environment><super>AppeX.JSAutomatorClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Tests-AutomatedExamples</package></attributes></class><comment><class-id>AppeX.D3ChartAutomator</class-id><body>D3ChartAutomator is for automated testing of the D3Chart example.</body></comment><class><name>CalculatorAutomator</name><environment>AppeX</environment><super>AppeX.JSAutomatorClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Tests-AutomatedExamples</package></attributes></class><comment><class-id>AppeX.CalculatorAutomator</class-id><body>CalculatorAutomator  is for automated testing of the JQueryMobileCalculator example.</body></comment><class><name>HelloLocalizedAutomator</name><environment>AppeX</environment><super>AppeX.JSAutomatorClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Tests-AutomatedExamples</package></attributes></class><comment><class-id>AppeX.HelloLocalizedAutomator</class-id><body>HelloLocalizedAutomator is for automated testing of the HelloLocalized example.</body></comment><methods><class-id>AutomatedExamplesTests</class-id> <category>initialize-release</category><body package="AppeX-Tests-AutomatedExamples">automatorClasses	^self class automatorClasses</body><body package="AppeX-Tests-AutomatedExamples">setUp	automationServerWasPresent := false.	examplesServerWasPresent := false.	flipBookServerWasPresent := false.	SiouX.Server registry at: 'JSAutomator' ifPresent: [ :s | automationServerWasPresent := true].	SiouX.Server registry at: 'AppeXExamples' ifPresent: [ :s | examplesServerWasPresent := true].	SiouX.Server registry at: 'DartFlipBook' ifPresent: [ :s | flipBookServerWasPresent := true].		automationServer := SiouX.Server id: 'JSAutomator'.	examplesServer := SiouX.Server id: 'AppeXExamples'.	flipBookServer := SiouX.Server id: 'DartFlipBook'.	automationServerWasRunning := automationServer isRunning.	examplesServerWasRunning := examplesServer isRunning.	flipBookServerWasRunning := flipBookServer isRunning.		examplesServer start.	automationServer start.	flipBookServer start.		responder := automationServer responders detect: [:e | e path = '/'] ifNone:[nil].	portNumber := automationServer listeners first address port.</body><body package="AppeX-Tests-AutomatedExamples">tearDown	automationServerWasRunning ifFalse: [automationServer stop].	examplesServerWasRunning ifFalse: [examplesServer stop].	flipBookServerWasRunning  ifFalse:[flipBookServer stop].		automationServerWasPresent ifFalse: [automationServer release].	examplesServerWasPresent ifFalse: [examplesServer release].	flipBookServerWasPresent ifFalse: [ flipBookServer release].</body></methods><methods><class-id>AutomatedExamplesTests</class-id> <category>tests</category><body package="AppeX-Tests-AutomatedExamples">automateApplication: automatedApplication automatorClient: automatorClient expectedResult: resultOrBlock allowingDelay: aDuration	| libraryClasses pragmas automatedServerId automatedServer parameters aResult queryAssociation |	libraryClasses := self automatorClasses 		add: automatorClient;		yourself.		pragmas := Pragma allNamed: #server:path: in: automatedApplication class.	pragmas notEmpty ifTrue: [			automatedServerId := pragmas first arguments first.		automatedServer := AppeX.Server id: automatedServerId.	].	"cannot use #in the queryValue, automation looks for search fragment"	queryAssociation := 'automatorClient' -&gt; automatorClient name asString.	"additional parameters is empty"	parameters := queryAssociation value -&gt; (OrderedCollection new asArray).	[									libraryClasses do: [:eClass | automatedApplication applicationLibrary addClass: eClass].							responder automatedApplication: automatedApplication.				responder automatedServer: automatedServer.			"aResult := aResponder getResultFromBrowser: parameters atPort: portNumber allowingMilliseconds: allowedMilliseconds."		aResult := responder getResultFromBrowserWithQuery: queryAssociation passingParameters: parameters atPort: portNumber allowingDelay: aDuration.		self assert: aResult notNil.		self assert: (resultOrBlock isString 			ifTrue:  [aResult = resultOrBlock]			ifFalse: [resultOrBlock value: aResult])	] ensure: [ 		"comment out all lines  for debugging purposes (to be able to resubmit request for original page from browser"		libraryClasses do: [:eClass | automatedApplication applicationLibrary removeClass: eClass].		"if you've removed the JSAutomatorClient from JSAutomator applicationLibrary, add it back"		AppeX.JSAutomator applicationLibrary addClass: AppeX.JSAutomatorClient.				"leave aResponder in a state where you can open a web page to run tests from the Web Servers tool "		responder automatedApplication: nil.			responder automatedServer: nil.		 ]</body><body package="AppeX-Tests-AutomatedExamples">testBar	| automatedApplication automatorClient expectedResult |			automatedApplication := AppeX.D3Bar.	automatorClient := AppeX.D3BarAutomator.	expectedResult :=  [:aResult | aResult asNumber &gt; 20 ].	self automateApplication: automatedApplication automatorClient: automatorClient expectedResult: expectedResult allowingDelay: 20 seconds</body><body package="AppeX-Tests-AutomatedExamples">testCalculator	| automatedApplication automatorClient expectedResult |			automatedApplication := AppeX.JQueryMobileCalculator.	automatorClient := AppeX.CalculatorAutomator.	expectedResult :=  '2,1,3'.	self automateApplication: automatedApplication automatorClient: automatorClient expectedResult: expectedResult allowingDelay: 30 seconds</body><body package="AppeX-Tests-AutomatedExamples">testChart	| automatedApplication automatorClient expectedResult |			automatedApplication := AppeX.D3Chart.	automatorClient := AppeX.D3ChartAutomator.	expectedResult :=  [:aResult | aResult asNumber &lt;= 24].	self automateApplication: automatedApplication automatorClient: automatorClient expectedResult: expectedResult allowingDelay: 6 seconds</body><body package="AppeX-Tests-AutomatedExamples">testCounter	| automatedApplication automatorClient expectedResult |			automatedApplication := AppeX.AppeXCounter.	automatorClient := AppeX.CounterAutomator.	expectedResult :=  '1,2,1'.	self automateApplication: automatedApplication automatorClient: automatorClient expectedResult: expectedResult allowingDelay: 40 seconds</body><body package="AppeX-Tests-AutomatedExamples">testFlipBook	| automatedApplication automatorClient expectedResult |			automatedApplication := AppeX.FlipBook.	automatorClient := AppeX.FlipBookAutomator.	expectedResult :=  'Forward: true,Forward: false'.		self automateApplication: automatedApplication automatorClient: automatorClient expectedResult: expectedResult allowingDelay: 12 seconds</body><body package="AppeX-Tests-AutomatedExamples">testGenealogy	| automatedApplication automatorClient expectedResult |			automatedApplication := AppeX.GenealogyApplication.	automatorClient := AppeX.GenealogyAutomator.	expectedResult :=  'Adam Smith Age: 82,Create a new familytree'.		self automateApplication: automatedApplication automatorClient: automatorClient expectedResult: expectedResult allowingDelay: 12 seconds</body><body package="AppeX-Tests-AutomatedExamples">testHelloLocalized	| automatedApplication automatorClient expectedResult mustDownloadCatalogFiles |			automatedApplication := AppeX.HelloLocalized.	automatorClient := AppeX.HelloLocalizedAutomator.	expectedResult :=  'G''day, mate!,ÐÐ´ÑÐ°Ð²ÑÑÐ²ÑÐ¹ Ð¼Ð¸Ñ! ÐÐ°Ðº ÑÑ Ð¶Ð¸Ð²ÑÑÑ?'.	mustDownloadCatalogFiles := AppeX.HelloLocalized getCatalogFileExists not.		[		mustDownloadCatalogFiles ifTrue: [			AppeX.HelloLocalized downloadCatalogFilesToServer.		].		self automateApplication: automatedApplication automatorClient: automatorClient expectedResult: expectedResult allowingDelay: 30 seconds	] ensure: [			mustDownloadCatalogFiles ifTrue: [			| eDirectory |			#('cs-cz'  'de-de'  'en' 'en-au' 'en-ca' 'en-gb' 'en-us' 'fr-fr' 'ru') do: [:eLang |				eDirectory := AppeX.HelloLocalized userMessagesRootDirectory / eLang.				"maybe delete the directories if empty also"				(eDirectory / 'HelloLocalized.lbl') exists					ifTrue: [ (eDirectory / 'HelloLocalized.lbl') delete ].			].		].	]</body><body package="AppeX-Tests-AutomatedExamples">testSearch	| automatedApplication automatorClient expectedResult |			automatedApplication := AppeX.JSAutomator.	automatorClient := AppeX.SearchAutomator.	expectedResult :=   [:aResult | aResult asNumber &gt;= 2].	(AppeX.Server id: 'JSAutomator') responders first externalApplicationPortPath: 'http://www.google.com'.	self automateApplication: automatedApplication automatorClient: automatorClient expectedResult: expectedResult allowingDelay: 6 seconds</body><body package="AppeX-Tests-AutomatedExamples">testSeasideWelcome	"Requires loading AppeX-Examples-Seaside (As opposed to AppeX-Seaside-Examples)"	"for executing on client hxxp://localhost:8896/welcome?hash=SeasideWelcomeAutomator"		| automatedApplication automatorClient expectedResult |			#{AppeX.SeasideWelcome} isDefined ifFalse: [^self]. "could throw an error here, or define a TestCase class and  test resource for this test only"	automatedApplication := #{AppeX.SeasideWelcome} asQualifiedReference value.		"automatedApplication := AppeX.SeasideWelcome."	automatorClient := AppeX.SeasideWelcomeAutomator.	expectedResult :=  '-1'.		self automateApplication: automatedApplication automatorClient: automatorClient expectedResult: expectedResult allowingDelay: 12 seconds</body></methods><methods><class-id>AutomatedExamplesTests class</class-id> <category>initialize-release</category><body package="AppeX-Tests-AutomatedExamples">automatorClasses	^OrderedCollection new 		add: AppeX.JSAutomatorClient;		add: AppeX.JSAutomatorScript;		yourself</body></methods><methods><class-id>AppeX.JSAutomator class</class-id> <category>services - tests</category><body package="AppeX-Tests-AutomatedExamples">runLogging: aTestCase toStream: aStream	SUnit.TestCase 		when: SUnit.Failure		do: [:failure | aStream cr; 				nextPutAll: failure definition selector;				nextPutAll: ': ', failure exception messageText]		for: self.	SUnit.TestCase 		when: SUnit.SomeError		do: [:error | aStream cr; 							nextPutAll: error definition selector;				nextPutAll: ': ', error exception messageText]		for: self.	[aTestCase run] ensure: [SUnit.TestCase unsubscribe: self. 		aStream cr; 			nextPutAll: 'Finished with: ', aTestCase selector]</body></methods><methods><class-id>AppeX.GenealogyAutomator</class-id> <category>javascript - initialization</category><body package="AppeX-Tests-AutomatedExamples">initialize() {	var self = this,		delayMillis = 1000;	this.isRecording = false;		setTimeout(function () {		self.clickOnSmithFamilyAnchor();			setTimeout(function () {				self.appendResultString([$('a.appex-a.rootPersonage')][0][0].text);				$('.close')[0].click();				setTimeout(function () {					$('#button-new')[0].click();					setTimeout(function () {						self.appendResultString($('h2.appex-h2.title')[0].innerText);						$('.cancel')[0].click();						self.sendResultStringToServer();						window.close();												},					delayMillis);					},				delayMillis);				},			delayMillis);		}, delayMillis * 2);					}</body></methods><methods><class-id>AppeX.GenealogyAutomator</class-id> <category>javascript </category><body package="AppeX-Tests-AutomatedExamples">clickOnSmithFamilyAnchor() {	this.clickOnAnchorWithText("Smith Family");}</body></methods><methods><class-id>AppeX.FlipBookAutomator</class-id> <category>javascript - initialization</category><body package="AppeX-Tests-AutomatedExamples">initialize() {	var self = this,		delayMillis = 1000;	this.isRecording = false;		setTimeout(function () {		//$t.application.installSession({"sessionKey": "sessionId","url": "js-automator"});		document.getElementById('walkingButton').click();			setTimeout(function () {				self.appendResultString('Forward: ' + $t.application.forward);				document.getElementById('forwardButton').click();				setTimeout(function () {					$t.application.getForwardSync();					self.appendResultString('Forward: ' + $t.application.forward);					self.sendResultStringToServer();					setTimeout(function () {						window.close();													},						delayMillis					);									},				delayMillis);				},			delayMillis);		}, delayMillis);					}</body></methods><methods><class-id>AppeX.CounterAutomator</class-id> <category>javascript - initialization</category><body package="AppeX-Tests-AutomatedExamples">afterBuildHtml() {	var self = this,		delayMillis = 1000;	setTimeout(function () {		$('button:contains("Increment")').click();		setTimeout(function () {			self.appendResultString($('#counterValue').text());			$('button:contains("Increment")').click();			setTimeout(function () {			self.appendResultString($('#counterValue').text());			$('button:contains("Decrement")').click();				setTimeout(function () {				self.appendResultString($('#counterValue').text());					self.sendResultStringToServer();					setTimeout(function () {						window.close();													},						delayMillis					);										},					delayMillis				);					},				delayMillis			);				},			delayMillis		);			}, delayMillis 	);	}</body><body package="AppeX-Tests-AutomatedExamples">initialize() {	if ($t.application.session) {		//presence of session means application has been installed an buildHTML already run.  So run the test code immediately.		return this.afterBuildHtml();	}	this.wrapAfter($t.application, 'buildHtml', this.afterBuildHtml);						}</body></methods><methods><class-id>AppeX.D3BarAutomator</class-id> <category>javascript - initialization</category><body package="AppeX-Tests-AutomatedExamples">initialize() {	var self = this,		anArray,		aRect,		numRects,		delayMillis = 2000;	setTimeout(function () {		//just for fun		anArray = document.getElementsByTagName("rect");			for (var i = 0; i &lt; anArray.length; i++) {			aRect = anArray[i];			aRect.height.baseVal.value = 10;  			console.log(aRect.top);			}		numRects = d3.select("body svg").selectAll("rect")[0].length;		self.appendResultString(numRects);		self.sendResultStringToServer();		setTimeout(function () {			//test will fail if close() without a delay in linux			window.close();									},		delayMillis);		},	delayMillis*4);			}</body></methods><methods><class-id>AppeX.SearchAutomator</class-id> <category>javascript - initialization</category><body package="AppeX-Tests-AutomatedExamples">initialize() {	var self = this,		delayMillis = 1000;	//initial search screen	if ($('input[title="Google Search"]')[0]) {		setTimeout(function () {			$('input[title="Google Search"]')[0].value = 'test';			setTimeout(function () {				 $('form')[0].submit();				},				delayMillis			);				}, 			delayMillis 		);		return;	}		//results screen	setTimeout(function () {		self.appendResultString($("a:contains('Test')").length);		setTimeout(function () {			self.sendResultStringToServer();				setTimeout(function () {					window.close();												},					delayMillis				);								},			delayMillis		);			},		delayMillis	);						}</body></methods><methods><class-id>AppeX.SeasideWelcomeAutomator</class-id> <category>utility - communication</category><body package="AppeX-Tests-AutomatedExamples">sendResultStringToServer() {		var response, 			result;		result = {};		//result[this.hashString] = this.getResultString();		//Seaside reloads the page and discards the original hashString we set for the test.		result[this.getClassName()] = this.getResultString();				response = this.asyncMessageToServer("acceptResultString", result)			.onSuccess(function (data) { 				console.log(data);							})			.onError(function (error) {				console.error("acceptResultString failed",  error)			});	}</body></methods><methods><class-id>AppeX.SeasideWelcomeAutomator</class-id> <category>javascript - initialization</category><body package="AppeX-Tests-AutomatedExamples">initialize() {	var self = this,		delayMillis = 1000;		//first time through there will be a counter anchor.	//next time page is loaded (seaside loads page on every click), counter will be missing and can toggle to AppeX.	if (self.anchorWithText('Counter')) {		setTimeout(function () {			self.anchorWithText('Counter').click();		},		delayMillis);			return;	}		//We reloaded the page with the toggle button visible. 	if (!$t.application.isAppeX) {		setTimeout(function () {			$('button:contains("Toggle")').click();			setTimeout(function () {				//Page is now reloaded in AppeX mode.  increment, send result to server				$('#decrease').click();				setTimeout(function () {					self.appendResultString($('#count').text());					self.sendResultStringToServer();					setTimeout(function () {						window.close();													},						delayMillis					);									},				delayMillis);				},			delayMillis);					},		delayMillis);	}				}</body></methods><methods><class-id>AppeX.D3ChartAutomator</class-id> <category>javascript - initialization</category><body package="AppeX-Tests-AutomatedExamples">initialize() {	var self = this,		anArray,		aRect,		numRects,		delayMillis = 1000;			setTimeout(function () {		var numElements;		numElements = $t.application.data.toString().split(',').length;		$t.application.data = 0;		self.appendResultString(numElements);		self.sendResultStringToServer();		//freeze the animation		$t.application.data = 0;		setTimeout(function () {			window.close();		},		delayMillis);											},	delayMillis*4);	/*	//just for fun	setTimeout(function () {		anArray = document.getElementsByTagName("rect");			for (var i = 0; i &lt; anArray.length; i++) {			aRect = anArray[i];			aRect.height.baseVal.value = 10;  			console.log(aRect.top);			}	},	delayMillis*4);			numRects = d3.select("body svg").selectAll("rect")[0].length;	setTimeout(function () {		self.appendResultString(numRects);		self.sendResultStringToServer();		window.close();								},	delayMillis*4.5);		*/	}</body></methods><methods><class-id>AppeX.CalculatorAutomator</class-id> <category>javascript - initialization</category><body package="AppeX-Tests-AutomatedExamples">afterBuildHtml() {	var self = this,		delayMillis = 1000;		setTimeout(function () {		$('#key2').click();		$('#keyAdd').click();		setTimeout(function () {			self.appendResultString($('#displayControl').val());			$('#key1').click();			setTimeout(function () {				self.appendResultString($('#displayControl').val());				$('#keyEquals').click();				setTimeout(function () {					self.appendResultString($('#displayControl').val());					self.sendResultStringToServer();					setTimeout(function () {						window.close();													},						delayMillis					);										},					delayMillis				);					},				delayMillis			);				},			delayMillis		);			}, delayMillis 	);					}</body><body package="AppeX-Tests-AutomatedExamples">initialize() {	if ($t.application.session) {		//presense of session means application has been installed an buildHTML already run.  So run the test code immediately.		return this.afterBuildHtml();	}	this.wrapAfter($t.application, 'buildHtml', this.afterBuildHtml);					}</body></methods><methods><class-id>AppeX.HelloLocalizedAutomator</class-id> <category>javascript - initialization</category><body package="AppeX-Tests-AutomatedExamples">initialize() {	this.isRecording = false;	this.wrapAfter($t.application, 'refreshScreen', this.afterRefreshScreen);	this.wrapAfter($t.application, 'buildLanguageLinks', this.afterBuildLanguageLinks);			}</body></methods><methods><class-id>AppeX.HelloLocalizedAutomator</class-id> <category>tests - HelloLocalized</category><body package="AppeX-Tests-AutomatedExamples">afterBuildLanguageLinks() {	var self = this,		delayMillis = 1000;	//wait 1 seconds, click on Australian anchor, wait, click on Russian anchor, wait, send result	setTimeout(function () {		self.clickOnAustralianAnchor();		setTimeout(function () {			self.clickOnRussianAnchor();			setTimeout(function () {				self.sendResultStringToServer();				setTimeout(function () {					window.close();												},					delayMillis				);								},			delayMillis);			},		delayMillis);	}, 	delayMillis);}</body><body package="AppeX-Tests-AutomatedExamples">afterRefreshScreen() {	var firstString = '';		//record result of a single click	if (this.isRecordingClickResult) {		this.appendResultString($('#greetingDiv').text());		this.isRecordingClickResult = false;			} else {		this.setResultString('');	}	}</body><body package="AppeX-Tests-AutomatedExamples">clickOnAustralianAnchor() {	this.clickOnAnchorWithText("en-au");}</body><body package="AppeX-Tests-AutomatedExamples">clickOnRussianAnchor() {	this.clickOnAnchorWithText("ru");}</body></methods><methods><class-id>AppeX.JSAutomatorClient</class-id> <category>js -html</category><body package="AppeX-Tests-AutomatedExamples">buildToolbar() {	var self = this,		toolbar,		left,		runTestsButton;			toolbar = $("#tools");  //from JSAutomator class&gt;&gt;bodyToolbar	left = $("&lt;div&gt;")		.addClass("float-left")		.appendTo(toolbar);	runTestsButton = $("&lt;button&gt;")		.button({label: "Run Tests", disabled: false})		.click(function () {			self.runTests();		})		.appendTo(left);}</body></methods><methods><class-id>AppeX.JSAutomatorClient</class-id> <category>initialize</category><body package="AppeX-Tests-AutomatedExamples">postInstall() {	$("#resultString").val("Ready to run tests in AppeX-Tests-AutomatedExamples."); 	this.buildToolbar();	this.callSuper("postInstall", []);	return this;	}</body></methods><methods><class-id>AppeX.JSAutomator class</class-id> <category>services - tests</category><body package="AppeX-Tests-AutomatedExamples">runTests	"self runTests"	&lt;plainText: 'runTests'&gt;		| suite aStream testsToSkip |		testsToSkip := OrderedCollection new.	testsToSkip addAll: #("testBar testCalculator testChart testCounter testFlipBook testGenealogy testHelloLocalized testSearch testSeasideWelcome").		suite := SUnit.TestSuite new.	aStream := ReadWriteStream on: String new.	AutomatedExamplesTests		testSelectorsDo: [:each |  | eTestCase |			eTestCase := AutomatedExamplesTests selector: each.			suite addTest:eTestCase]		skipping: testsToSkip.			"suite runTests."	suite runUsing: [:each | self runLogging: each toStream: aStream].		^aStream contents</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>JSAutomatorClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>examples</category><attributes><package>AppeX-JS-Automation</package></attributes></class></st-source>