<?xml version="1.0"?><st-source><!-- Name: SUnitUIComment: I hold the basic cross-dialect UI for running SUnit tests, built in Camp Smalltalk.  There are many dialect-specific SUnit UIs, such as RBSUnitExtensions in VisualWorks and SUnitBrowser in VASmalltalk, and these are usually more powerful and better-integrated with other tools of their dialect.  I exist so that there is also a very simple test-running UI that behaves the same in all dialects.Invoke	TestRunner opento see a UI on all tests in the image.  Select a TestCase subclass from the upper drop-down list to run its tests, or 'Run All'.  After a run, any failing and erroring tests appear in the lower drop-down list;  select one to debug it.DbIdentifier: bear73DbTrace: 237786DevelopmentPrerequisites: #(#(#any 'SUnit' ''))HideSource: falsePackageName: SUnitUIParcel: #('SUnitUI')ParcelName: SUnitUIPrerequisiteParcels: #(#('SUnit' ''))PrintStringCache: (Camp Smalltalk 3.2,nross)SaveSource: trueVersion: Camp Smalltalk 3.2Date: 9:54:46 AM January 22, 2010 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (jan10.3) of January 22, 2010 on January 22, 2010 at 9:54:46 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>TestRunner</name><environment>XProgramming.SUnit</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>result lastPass defect defectMenu details mode scriptModel script </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitUI</category><attributes><package>SUnitUI</package></attributes></class><comment><class-id>XProgramming.SUnit.TestRunner</class-id><body>A TestRunner is a simple graphical user interface to run SUnit test cases.</body></comment><methods><class-id>XProgramming.SUnit.TestRunner</class-id> <category>Updating</category><body package="SUnitUI" selector="displayColor:">displayColor: aColorValue	(builder componentAt: #colorRegion) widget insideColor: aColorValue</body><body package="SUnitUI" selector="displayDefault">displayDefault	self displayColor: nil</body><body package="SUnitUI" selector="displayDefects:">displayDefects: aCollection 	| components |	components := Array 		with: (self builder componentAt: #defects) 		with: (self builder componentAt: #debugFailedTest).	defect value: nil.	aCollection isEmpty ifTrue: [^components do: [:each | each disable]].	defectMenu value: (Menu 		labelArray: (aCollection collect: [:each | each printString])		values: aCollection).	components do: [:each | each enable].</body><body package="SUnitUI" selector="displayDetails:">displayDetails: aString 	details value: aString.	self workaroundForStupidVWRefreshBug</body><body package="SUnitUI" selector="displayFail">displayFail	self displayRed.	self displayMode: 'Fail'.	self displayDetails: result printString.</body><body package="SUnitUI" selector="displayGreen">displayGreen	self displayColor: ColorValue green</body><body package="SUnitUI" selector="displayMode:">displayMode: aString 	mode value: aString</body><body package="SUnitUI" selector="displayPass">displayPass	self displayGreen.	self displayMode: 'Pass'.	self displayDetails: result runCount printString , ' run' , self timeSinceLastPassAsString.	lastPass := Time now</body><body package="SUnitUI" selector="displayRed">displayRed	self displayColor: ColorValue red.</body><body package="SUnitUI" selector="displayReset">displayReset	self displayDefault.	self displayDefects: #().	self displayMode: 'N/A'.	self displayDetails: '...'.</body><body package="SUnitUI" selector="displayRunning">displayRunning	self displayYellow.	self displayMode: 'running'. 	self displayDetails: '...'.</body><body package="SUnitUI" selector="displayYellow">displayYellow	self displayColor: ColorValue yellow</body><body package="SUnitUI" selector="updateDefects">updateDefects	self displayDefects: result defects</body><body package="SUnitUI" selector="updateWindow">updateWindow	result hasPassed		ifTrue: [self displayPass]		ifFalse: [self displayFail].	self updateDefects</body></methods><methods><class-id>XProgramming.SUnit.TestRunner</class-id> <category>Private</category><body package="SUnitUI" selector="allTestCasesMenu">allTestCasesMenu	| testCaseClasses |	testCaseClasses := (TestCase allSubclasses select: 		[:each | each isAbstract not]) asSortedCollection: [:a :b | a printString &lt; b printString].	^Menu		labelArray: (testCaseClasses collect: [:each | each printString])		values: testCaseClasses</body><body package="SUnitUI" selector="allTestSuite">allTestSuite	^TestCase buildSuite</body><body package="SUnitUI" selector="formatTime:">formatTime: aTime 	aTime hours &gt; 0 ifTrue: [^aTime hours printString , 'h'].	aTime minutes &gt; 0 ifTrue: [^aTime minutes printString , 'min'].	^aTime seconds printString , ' sec'</body><body package="SUnitUI" selector="timeSinceLastPassAsString">timeSinceLastPassAsString	lastPass isNil ifTrue: [^''].	^', ' , (self formatTime: (Time now subtractTime: lastPass)) , ' since last Pass'</body><body package="SUnitUI" selector="update:">update: anObject 	(anObject isKindOf: TestCase)		ifTrue: [self displayDetails: anObject printString]		ifFalse: [super update: anObject]</body><body package="SUnitUI" selector="workaroundForStupidVWRefreshBug">workaroundForStupidVWRefreshBug	builder window refresh</body></methods><methods><class-id>XProgramming.SUnit.TestRunner</class-id> <category>Accessing</category><body package="SUnitUI" selector="defect">defect	^defect isNil		ifTrue: [defect := nil asValue]		ifFalse: [defect]</body><body package="SUnitUI" selector="defectMenu">defectMenu	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^defectMenu isNil 		ifTrue: [defectMenu := List new asValue]		ifFalse: [defectMenu]</body><body package="SUnitUI" selector="details">details	^details isNil		ifTrue: [details := '...' asValue]		ifFalse: [details]</body><body package="SUnitUI" selector="mode">mode	^mode isNil		ifTrue: [mode := 'N/A' asValue]		ifFalse: [mode]</body><body package="SUnitUI" selector="script">script	^script isNil		ifTrue: [script := nil asValue]		ifFalse: [script]</body><body package="SUnitUI" selector="scriptModel">scriptModel	^scriptModel isNil		ifTrue: [scriptModel := self allTestCasesMenu asValue]		ifFalse: [scriptModel]</body></methods><methods><class-id>XProgramming.SUnit.TestRunner</class-id> <category>Actions</category><body package="SUnitUI" selector="debugFailedTest">debugFailedTest	defect value isNil ifFalse: 		[self debugTest: defect value]</body><body package="SUnitUI" selector="debugTest">debugTest	self debugTest: defect value</body><body package="SUnitUI" selector="debugTest:">debugTest: aTestCase 	aTestCase isNil ifTrue: [^self].	self displayMode: 'Debugging'.	self workaroundForStupidVWRefreshBug.	aTestCase debug</body><body package="SUnitUI" selector="refreshTests">refreshTests	self scriptModel value: self allTestCasesMenu.	self script value: nil.	self displayReset.</body><body package="SUnitUI" selector="runAllTests">runAllTests	self runSuite: self allTestSuite</body><body package="SUnitUI" selector="runSuite:">runSuite: aTestSuite 	Cursor wait		showWhile: 			[self displayRunning.			aTestSuite addDependentToHierachy: self.			[result := aTestSuite run]				sunitEnsure: [aTestSuite removeDependentFromHierachy: self].			self updateWindow]</body><body package="SUnitUI" selector="runTests">runTests	self script value isNil ifFalse: 		[self runSuite: self script value suite]</body></methods><methods><class-id>XProgramming.SUnit.TestRunner class</class-id> <category>interface specs</category><body package="SUnitUI" selector="windowLabel">windowLabel	^'SUnit Camp Smalltalk ', TestCase sunitVersion, ' TestRunner'</body><body package="SUnitUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #windowLabel			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 512 384 907 532 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 24 0 0 1 -24 1 ) 					#name: #colorRegion ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -100 1 0 0 -50 1 24 0 ) 					#name: #runOneButton 					#model: #runTests 					#label: 'Run' 					#isDefault: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 1 0 0 0 1 24 0 ) 					#model: #runAllTests 					#label: 'RunAll' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 50 0 0 0 -100 1 24 0 ) 					#name: #tests 					#model: #script 					#menu: #scriptModel ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -24 1 -50 1 0 1 ) 					#name: #defects 					#flags: 40 					#isOpaque: true 					#model: #defect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #debugTest ) 					#menu: #defectMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 1 -24 1 0 1 0 1 ) 					#name: #debugFailedTest 					#flags: 40 					#model: #debugFailedTest 					#label: 'Debug' 					#isDefault: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 0 50 24 ) 					#model: #refreshTests 					#label: 'Refresh' 					#isDefault: false ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.508197 0 1 33 0.5 ) 					#name: #details 					#flags: 0 					#model: #details 					#tabable: false 					#alignment: #center 					#style: #systemDefault 					#isReadOnly: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -32 0.5 0 1 0 0.5 ) 					#name: #mode 					#flags: 0 					#model: #mode 					#tabable: false 					#alignment: #center 					#style: #large 					#isReadOnly: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>