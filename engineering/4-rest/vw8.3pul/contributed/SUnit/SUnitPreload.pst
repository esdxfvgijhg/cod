<?xml version="1.0"?><st-source><!-- Name: SUnitPreloadNotice: This software and documentation is provided as a service to the programming community. Distribute it free as you see fit. There is no warranty of any kind, express or implied.Comment: This package is the VisualWorks version of the preload for SUnit.  The preload holds all and only the code that cannot be the same across all dialects.As ANSI conformance increases, this preload may be retired in many dialects.  Using packages should therefore prereq SUnit, which prereqs this, not prereq it directly.DbIdentifier: bear73DbTrace: 404290DbUsername: nrossDbVersion: 4.1 RC1DisregardedPrerequisites: #(#(#name 'SUnit' #componentType #package))HideSource: falsePackageName: SUnitPreloadParcel: #('SUnitPreload')ParcelName: SUnitPreloadPrintStringCache: (4.1 RC1,nross)SaveSource: trueVersion: 4.1 RC1Date: 10:42:53 AM April 19, 2013 --><time-stamp>From VisualWorks®, Pre-Release 7.10 (apr13.3) of April 19, 2013 on April 19, 2013 at 10:42:53 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>XProgramming</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category></category><attributes><package>SUnitPreload</package></attributes></name-space><name-space><name>SUnit</name><environment>XProgramming</environment><private>false</private><imports>			private Smalltalk.*			</imports><category></category><attributes><package>SUnitPreload</package></attributes></name-space><class><name>TestFailure</name><environment>XProgramming.SUnit</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPreload</category><attributes><package>SUnitPreload</package></attributes></class><comment><class-id>XProgramming.SUnit.TestFailure</class-id><body>TestFailure is raised when the boolean parameter of an assert: ... or deny: ... call is the opposite of what the assertion claims.</body></comment><class><name>ResumableTestFailure</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestFailure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPreload</category><attributes><package>SUnitPreload</package></attributes></class><comment><class-id>XProgramming.SUnit.ResumableTestFailure</class-id><body>Sometimes it is useful to see when debugging (and/or to log when running) the results from several assertions in a test.  Example:	#(‘same’ ‘*’ ‘*.txt’ ‘a*c’) with: #(‘same’ ‘any’ ‘some.txt’ ‘abc’) do:		[:eachMeta :eachString |		self assert: (eachMeta match: eachString)			description: (‘&lt;1s&gt; does not match &lt;2s&gt;’ expandMacrosWith: eachMeta with: eachString)			resumable: true].Raising a ResumableTestFailure means that all the assertions will be run (if the test case is logging, this will print out a message to the log for each one that fails).  When debugging, the user can hit 'proceed' to continue the test and see which other expressions do not match.</body></comment><class><name>SUnitNameResolver</name><environment>XProgramming.SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPreload</category><attributes><package>SUnitPreload</package></attributes></class><class><name>SUnitDelay</name><environment>XProgramming.SUnit</environment><super>Core.Delay</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPreload</category><attributes><package>SUnitPreload</package></attributes></class><methods><class-id>XProgramming.SUnit.TestFailure</class-id> <category>Camp Smalltalk</category><body package="SUnitPreload">sunitAnnounce: aTestCase toResult: aTestResult	aTestResult addFailure: aTestCase.	self sunitExitWith: false.</body></methods><methods><class-id>XProgramming.SUnit.ResumableTestFailure</class-id> <category>Camp Smalltalk</category><body package="SUnitPreload">sunitExitWith: aValue	^self resume: aValue</body></methods><methods><class-id>XProgramming.SUnit.SUnitNameResolver class</class-id> <category>Camp Smalltalk</category><body package="SUnitPreload">classNamed: aSymbol	| strippedName possibles |	strippedName := (QualifiedName parseString: aSymbol) last asSymbol.	possibles := Smalltalk withAllNameSpacesAndAllClassesAndStatics 		select: [:each | each name = strippedName].	^possibles isEmpty		ifTrue: [nil]		ifFalse: [possibles first].</body><body package="SUnitPreload">defaultLogDevice	^ Transcript</body><body package="SUnitPreload">errorObject	^Error</body><body package="SUnitPreload">mnuExceptionObject	^MessageNotUnderstood</body><body package="SUnitPreload">notificationObject	^Notification</body></methods><methods><class-id>Core.Exception class</class-id> <category>Camp Smalltalk</category><body package="SUnitPreload">sunitSignalWith: aString	^self raiseSignal: aString</body></methods><methods><class-id>Core.Exception</class-id> <category>Camp Smalltalk</category><body package="SUnitPreload">sunitExitWith: aValue	^self return: aValue</body></methods><methods><class-id>Core.String</class-id> <category>Camp Smalltalk</category><body package="SUnitPreload">sunitAsSymbol	^self asSymbol</body><body package="SUnitPreload">sunitMatch: aString	^self match: aString</body></methods><methods><class-id>Core.String</class-id> <category>deprecation</category><body package="SUnitPreload">sunitSubStrings	| stream answer index |	answer := OrderedCollection new.	stream := ReadStream on: self.	[stream atEnd]		whileFalse: 			[[stream atEnd ifTrue: [^answer asArray].			stream peek &gt; (Core.TextConstants.Space)]				whileFalse: [stream next].			index := stream position + 1.			[stream atEnd or: [stream peek &lt;= (Core.TextConstants.Space)]]				whileFalse: [stream next].			answer add: (self copyFrom: index to: stream position)].	^answer asArray</body></methods><methods><class-id>Core.Behavior</class-id> <category>deprecation</category><body package="SUnitPreload">sunitAllSelectors	^self allSelectors</body></methods><methods><class-id>Core.Behavior</class-id> <category>Camp Smalltalk</category><body package="SUnitPreload">sunitSelectors	^self selectors</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>Camp Smalltalk</category><body package="SUnitPreload">sunitEnsure: aBlock 	^self ensure: aBlock</body><body package="SUnitPreload">sunitOn: aSignal do: anExceptionBlock 	^self on: aSignal do: anExceptionBlock</body></methods><methods><class-id>Core.Class</class-id> <category>Camp Smalltalk</category><body package="SUnitPreload">sunitName	^self name</body></methods><methods><class-id>Core.Error</class-id> <category>CampSmalltalk</category><body package="SUnitPreload">sunitAnnounce: aTestCase toResult: aTestResult	aTestResult addError: aTestCase.	self sunitExitWith: false.</body></methods><methods><class-id>Core.Object</class-id> <category>Camp Smalltalk</category><body package="SUnitPreload">sunitAddDependent: anObject	self addDependent: anObject</body><body package="SUnitPreload">sunitChanged: aspect	self changed: aspect</body><body package="SUnitPreload">sunitRemoveDependent: anObject	self removeDependent: anObject</body></methods><methods><class-id>Core.Symbol</class-id> <category>Camp Smalltalk</category><body package="SUnitPreload">sunitAsClass	^XProgramming.SUnit.SUnitNameResolver classNamed: self</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Behavior</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclass methodDict format subclasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>BlockClosure</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method outerContext copiedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>Exception</name><environment>Core</environment><super>Core.GenericException</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>Symbol</name><environment>Core</environment><super>Core.String</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>Delay</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>delaySemaphore timerSemaphore timer duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Processes</category><attributes><package>Kernel-Processes</package></attributes></class><class><name>Class</name><environment>Core</environment><super>Core.ClassDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name classPool environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>Error</name><environment>Core</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class></st-source>