<?xml version="1.0"?><st-source><!-- Name: SUnitXProcTestsComment: Each CrossProcessTCTest creates and runs the CrossProcessTCData superclass test with the same selector.  If a pass is expected, the subclass needs no test method (shouldInheritSelectors ensures its test suite has all the superclass' test selectors;  subclass setUp does all the checks needed);  otherwise, the subclass' test checks the cross-process test result returned by the superclass.Thanks to Michael Lucas-Smith for UI test suggestions.DbIdentifier: bear73DbTrace: 193402DevelopmentPrerequisites: #(#(#any 'SUnitXProcPatterns' ''))PackageName: SUnitXProcTestsParcel: #('SUnitXProcTests')PrerequisiteParcels: #(#('SUnitXProcPatterns' ''))PrintStringCache: (CS11.NFR.9,NiallRoss)Version: CS11.NFR.9Date: 8:38:48 AM September 18, 2009 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.7 (sep09.3) of September 18, 2009 on September 18, 2009 at 8:38:48 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>CrossProcessTCData</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.CrossProcessTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPatterns</category><attributes><package>SUnitXProcTests</package></attributes></class><comment><class-id>XProgramming.SUnit.CrossProcessTCData</class-id><body>I run code that spawns subprocesses and then raises errors and failures in both main test process and subprocesses.  I am an abstract test so that I will not show up in test browsers, since my role is only to be data for tests of my subclass.</body></comment><class><name>CrossProcessTCTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.CrossProcessTCData</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dataTestResult </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPatterns</category><attributes><package>SUnitXProcTests</package></attributes></class><comment><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id><body>My tests verify that errors and failures raised in subprocesses spawned by a CrossProcessTestCase are captured in its test result.Instance Variables:	dataTestResult	&lt;CrossProcessTestResult&gt;	holds result of running superclass' test</body></comment><class><name>CrossProcessTestWindow</name><environment>XProgramming.SUnit</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPatterns</category><attributes><package>SUnitXProcTests</package></attributes></class><comment><class-id>XProgramming.SUnit.CrossProcessTestWindow</class-id><body></body></comment><class><name>ProcrastinatingSemaphoreTests</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sem procs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitXProcTests</category><attributes><package>SUnitXProcTests</package></attributes></class><comment><class-id>XProgramming.SUnit.ProcrastinatingSemaphoreTests</class-id><body></body></comment><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>ui-passing</category><body package="SUnitXProcTests" selector="testPrematureTerminatedUISubprocess">testPrematureTerminatedUISubprocess	| model window subprocess |	[model := (window := CrossProcessTestWindow open window) model.	subprocess :=		[self deny: model isNil description: 'Subthread did not start when it should'.		window component invalidateNow.		(Delay forSeconds: 10) wait.		self assert: model isNil description: 'Subthread did not terminated when it should']			fork.	(Delay forMilliseconds: 500) wait.	subprocess terminate.	model closeAndUnschedule.	model := nil] fork.	[(Delay forMilliseconds: 500) wait] fork.</body><body package="SUnitXProcTests" selector="testWindowProcessForked">testWindowProcessForked	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] fork.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] fork.</body><body package="SUnitXProcTests" selector="testWindowProcessThreadsUIEvent">testWindowProcessThreadsUIEvent	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] uiEvent.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEvent</body><body package="SUnitXProcTests" selector="testWindowProcessThreadsUIEventNow">testWindowProcessThreadsUIEventNow	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] uiEventNow.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEventNow</body><body package="SUnitXProcTests" selector="testWindowProcessThreadsUIEventNowSentToWindow">testWindowProcessThreadsUIEventNowSentToWindow	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] uiEventNowFor: window.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEventNowFor: window</body><body package="SUnitXProcTests" selector="testWindowProcessThreadsUIEventNowSentToWindowWithOwnWindowManager">testWindowProcessThreadsUIEventNowSentToWindowWithOwnWindowManager	| model window |	[model := (window := [CrossProcessTestWindow open window] 						on: GetWindowManagerUsagePolicy						do: [:ex | ex resume: MakeNewWindowManagerUsagePolicy new]) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] 			uiEventNowFor: window.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] 			fork.	[(Delay forMilliseconds: 500) wait] uiEventNowFor: window.</body><body package="SUnitXProcTests" selector="testWindowProcessThreadsUIEventSentToWindow">testWindowProcessThreadsUIEventSentToWindow	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] uiEventFor: window.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEventFor: window</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testErrorInSubthread">testErrorInSubthread	"Force an error in a subthread launched by this test."	[3 zork] fork.</body><body package="SUnitXProcTests" selector="testFailureInSubthread">testFailureInSubthread	"Force a failure in a subthread launched by this test."	[self assert: false] fork.</body><body package="SUnitXProcTests" selector="testLowerPrioritySubthread">testLowerPrioritySubthread	"Failure in one subthread and main thread, error in sub-subthread."	[self testErrorInSubthread] forkAt: Processor systemRockBottomPriority.	self testFailureInSubthread.	self assert: false		description: 'A subthread''s error should have replaced both this failure and a subthread''s failure in the result'.</body><body package="SUnitXProcTests" selector="testMoreSeriousInSubthread">testMoreSeriousInSubthread	"Trump a failure in the main thread by an error in a subthread."	self testErrorInSubthread.	self testFailureInSubthread.</body><body package="SUnitXProcTests" selector="testNestedLongSubthread">testNestedLongSubthread	"Failure in one subthread and main thread, error in another long-running sub-subthread."	[(Delay forSeconds: 1) wait.	self testErrorInSubthread] forkAt: Processor systemRockBottomPriority.	self testFailureInSubthread.	self assert: false		description: 'A subthread''s error should have replaced both this failure and a subthread''s failure in the result'.</body><body package="SUnitXProcTests" selector="testPrematureTerminatedSubthread">testPrematureTerminatedSubthread	"Failure in one subthread and main thread, error in another long-running sub-subthread."	| subProc |	subProc :=		[(Delay forSeconds: 10) wait.		self assert: false		description: 'This subthread should have terminated before this call']			forkAt: Processor systemRockBottomPriority.	(Delay forMilliseconds: 100) wait.	subProc terminate.</body><body package="SUnitXProcTests" selector="testProcessRenamed">testProcessRenamed	"Some isUnderTest implementations renamed the process to know which had been spawned by the test."	| process |	process :=		[(Delay forMilliseconds: 500) wait.		self assert: true] fork			name: 'Testing..'			yourself.	self assert: process name = 'Testing..'.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>ui failing</category><body package="SUnitXProcTests" selector="testEventError">testEventError	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component components first component component controller pressAction] uiEventNowFor: window.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEventNowFor: window</body><body package="SUnitXProcTests" selector="testEventFailure">testEventFailure	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	(window component components at: 2) component component controller pressAction] uiEventNowFor: window.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEventNowFor: window</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>cross-process</category><body package="SUnitXProcTests" selector="crossProcessTestStrategy">crossProcessTestStrategy	| cpStrategy |	cpStrategy := super crossProcessTestStrategy.	(self class whichCategoryIncludesSelector: self selector) 		== (self class whichCategoryIncludesSelector: #testErrorInSubthread) 			ifFalse: [cpStrategy subwrapWindowUnscheduling].	cpStrategy subThreadCompletionWaitTime: self subthreadWaitTimeForTest.	^cpStrategy</body><body package="SUnitXProcTests" selector="subthreadWaitTimeForTest">subthreadWaitTimeForTest	^5000</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData class</class-id> <category>Testing</category><body package="SUnitXProcTests" selector="isAbstract">isAbstract	"I am data for another test and should only be run programmatically."	^true</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>ui failing</category><body package="SUnitXProcTests" selector="testEventError">testEventError	self testErrorInSubthread.</body><body package="SUnitXProcTests" selector="testEventFailure">testEventFailure	self testFailureInSubthread.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>running</category><body package="SUnitXProcTests" selector="run:">run: aResult	"Restore standard test behaviour as my purpose is only to check that the tests of my superclass (a cross-process test), returns the appropriate result."	aResult runCase: self.</body><body package="SUnitXProcTests" selector="setUp">setUp	"Get the result of running the corresponding data test, which my test will then verify.  (We omit any super setUp as if the superclass test adds it we probably don't want it.)  Ensure that a result was captured.  If I do not implement a specific test selector for it, verify that it passed.  	Check that the data test ran faster than the subthread wait time (noting that a test whose threads were _intended_ to take longer than the subthread wait time would fail this;  increase the wait time for such a test or find another measure)."	| crossProcessTest crossProcessDuration |	crossProcessTest := CrossProcessTCData selector: self selector.	crossProcessDuration := Time millisecondsToRun: [dataTestResult := crossProcessTest run].	self assert: dataTestResult runCount = 1		description: 'Captured too many test results'.	(self class sunitSelectors includes: self selector) ifFalse:		[self assert: dataTestResult hasPassed			description: 'CrossProcess test expected to pass but did not'].	self assert: crossProcessDuration &lt; crossProcessTest subthreadWaitTimeForTest			description: 'The cross-process test took longer than the subthread wait-time; did the test fail to signal completion of all subthreads?'.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testErrorInSubthread">testErrorInSubthread	self assert: dataTestResult hasErrors		description: 'The run did not capture an error in a subthread'.</body><body package="SUnitXProcTests" selector="testFailureInSubthread">testFailureInSubthread	self assert: dataTestResult hasFailures		description: 'The run did not capture a failure in a subthread'.</body><body package="SUnitXProcTests" selector="testLowerPrioritySubthread">testLowerPrioritySubthread	"Failure in both a subthread and the main thread, error in another."	self testMoreSeriousInSubthread.</body><body package="SUnitXProcTests" selector="testMoreSeriousInSubthread">testMoreSeriousInSubthread	self testErrorInSubthread.	self deny: dataTestResult hasFailures		description: 'The run captured a failure which the subthread error should have trumped'.</body><body package="SUnitXProcTests" selector="testNestedLongSubthread">testNestedLongSubthread	"Failure in both a subthread and the main thread, error in another."	self testMoreSeriousInSubthread.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest class</class-id> <category>Testing</category><body package="SUnitXProcTests" selector="isAbstract">isAbstract	"I am data for another test and should only be run programmatically."	^false</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestWindow</class-id> <category>actions</category><body package="SUnitXProcTests" selector="fakeError">fakeError	^self zork</body><body package="SUnitXProcTests" selector="fakeFailure">fakeFailure	^(TestCase selector: #zork) assert: false</body></methods><methods><class-id>XProgramming.SUnit.ProcrastinatingSemaphoreTests</class-id> <category>running</category><body package="SUnitXProcTests" selector="setUp">setUp	sem := ProcrastinatingSemaphore new.	procs := IdentitySet new</body><body package="SUnitXProcTests" selector="testProcrastinatingWithExcessSignals">testProcrastinatingWithExcessSignals	| finished1 finished2 |	finished1 := finished2 := false.	sem		signal;		signal.	sem		unsignal;		unsignal.	self addProc: 			[sem wait.			finished1 := true].	self addProc: 			[sem wait.			finished2 := true].	self deny: finished1 | finished2.	sem signal.	self assert: finished1.	self deny: finished2.	sem signal.	self assert: finished1 &amp; finished2.	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body><body package="SUnitXProcTests" selector="testSignallingAndWaitingOnce">testSignallingAndWaitingOnce	"normal semphore behavior"	sem signal.	self addProc: [sem wait].	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body><body package="SUnitXProcTests" selector="testStartingWithProcrastination">testStartingWithProcrastination	| finished |	finished := false.	sem		unsignal;		unsignal.	self addProc: 			[sem wait.			finished := true].	self deny: finished.	sem signal.	self deny: finished.	sem signal.	self deny: finished.	sem signal.	self assert: finished.	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body><body package="SUnitXProcTests" selector="testStartingWithProcrastination2">testStartingWithProcrastination2	| finished1 finished2 |	finished1 := finished2 := false.	sem		unsignal;		unsignal.	self addProc: 			[sem wait.			finished1 := true].	self addProc: 			[sem wait.			finished2 := true].	self deny: finished1 | finished2.	sem signal.	self deny: finished1 | finished2.	sem signal.	self deny: finished1 | finished2.	sem signal.	self assert: finished1.	self deny: finished2.	sem signal.	self assert: finished1 &amp; finished2.	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body><body package="SUnitXProcTests" selector="testStartingWithWaiting">testStartingWithWaiting	| finished |	finished := false.	self addProc: 			[sem wait.			finished := true].	self deny: finished.	sem unsignal.	sem signal.	self deny: finished.	sem unsignal.	sem signal.	self deny: finished.	sem signal.	self assert: finished.	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body><body package="SUnitXProcTests" selector="testStartingWithWaiting2">testStartingWithWaiting2	| finished1 finished2 |	finished1 := finished2 := false.	self addProc: 			[sem wait.			finished1 := true].	self addProc: 			[sem wait.			finished2 := true].	self deny: finished1 | finished2.	sem unsignal.	sem signal.	self deny: finished1 | finished2.	sem unsignal.	sem signal.	self deny: finished1 | finished2.	sem signal.	self assert: finished1.	self deny: finished2.	sem unsignal.	sem signal.	self deny: finished2.	sem signal.	self assert: finished2.	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body></methods><methods><class-id>XProgramming.SUnit.ProcrastinatingSemaphoreTests</class-id> <category>utility</category><body package="SUnitXProcTests" selector="addProc:">addProc: block 	procs add: (block forkAt: Processor activePriority + 1)</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestWindow class</class-id> <category>interface specs</category><body package="SUnitXProcTests" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Smile already..' 			#bounds: #(#{Graphics.Rectangle} 576 432 1041 825 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 83 66 164 89 ) 					#name: #ActionButton1 					#model: #fakeError 					#label: 'FakeError' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 261 65 342 88 ) 					#name: #ActionButton2 					#model: #fakeFailure 					#label: 'FakeFailure' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 207 180 ) 					#name: #CheckBox1 ) 				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.Rectangle} 141 254 316 281 ) 					#name: #TabControl1 					#labels: #('Why' 'WhyNot' ) ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class><class><name>CrossProcessTestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPatterns</category><attributes><package>SUnitXProcPatterns</package></attributes></class></st-source>