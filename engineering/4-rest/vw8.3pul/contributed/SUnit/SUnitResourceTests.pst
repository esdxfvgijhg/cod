<?xml version="1.0"?><st-source><!-- Name: SUnitResourceTestsNotice: Copyright 2005 - 2015 Niall RossThis utility is free to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: Tests for the SUnit competing resources pattern and test skip utility.  The Ex* classes are example resources, used to provide data for the tests and also as examples of the competing resource pattern.  The CompetingResource1TestData and CompetingResource2TestData provide test cases requiring competing resources.  The CompetingResourceTest runs a suite of both the tests, verifying that each had the resources it needed when it needed them.  Running all three tests therefore verifies that competing resources work both as individual resources and in suites of tests requiring clashing resources.The SkipResultTest tests the generic ClassificationResult class as well as the specific skip example that uses it.DbIdentifier: bear73DbTrace: 468659DbUsername: nrossDbVersion: 4.1 RC2DevelopmentPrerequisites: #(#(#any 'SUnitResourcePatterns' ''))PackageName: SUnitResourceTestsParcel: #('SUnitResourceTests')ParcelName: SUnitResourceTestsPrerequisiteParcels: #(#('SUnitResourcePatterns' ''))PrintStringCache: (4.1 RC2,nross)Version: 4.1 RC2Date: 1:28:51 PM July 10, 2015 --><time-stamp>From VisualWorksÂ®, 8.1 of July 10, 2015 on July 10, 2015 at 1:28:51 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ExAbstractCompetingResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.CompetingResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isCorrectlySetUp </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.ExAbstractCompetingResource</class-id><body>I am an example abstract competing test resource created for use in tests of the competing resource system.</body></comment><class><name>Ex1CompetingResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.ExAbstractCompetingResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitExtensions</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.Ex1CompetingResource</class-id><body>I am an example concrete competing test resource created for use in tests of the competing resource system.</body></comment><class><name>SkipResultTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourceTests</package></attributes></class><class><name>CompetingResourceTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.CompetingResourceTest</class-id><body>CompetingResourceTest creates a test suite whose tests require competing resources and runs it.  It itself declares no resources so that we can easily test	- running a suite needing competing resources	- running such a suite within a suite using no resource (this class' suite)	- running such a suite within a suite that also uses competing resources (this package's suite;  conveniently, the classes are added to the package's suite in random order so repeated tests will test the case where the outer and inner suite's resource list contains the same specific example of the competing resource and the case where they differ)</body></comment><class><name>CompetingResource2TestData</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.CompetingResource2TestData</class-id><body>I have three functions	- show that competing resources work like ordinary resources for a single test case	- act as data for the CompetingResourceTest	- act as one of several tests using competing resources in the whole package' test suite</body></comment><class><name>Ex2CompetingResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.ExAbstractCompetingResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitExtensions</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.Ex2CompetingResource</class-id><body>I am an example concrete competing test resource created for use in tests of the competing resource system.</body></comment><class><name>CompetingResource1TestData</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.CompetingResource1TestData</class-id><body>I have three functions	- show that competing resources work like ordinary resources for a single test case	- act as data for the CompetingResourceTest	- act as one of several tests using competing resources in the whole package' test suite</body></comment><methods><class-id>XProgramming.SUnit.ExAbstractCompetingResource</class-id> <category>initialise-release</category><body package="SUnitResourceTests">setUp	"In a real competing resource, some actual setUp work would be done here.  The 'isCorrectlySetUp' instvar mimics this to let the tests verify that the pattern is calling the right methods at the right times;  it is not part of the pattern.  We assume we can set up OK provided no rival resource is currently set up."	isCorrectlySetUp := (self rivalResourceClass isCorrectlySetUp ~~ true)</body><body package="SUnitResourceTests">tearDown	"In a real competing resource, some actual tearDown work would be done here.  The 'isCorrectlySetUp' instvar mimics this to let the tests verify that the pattern is calling the right methods at the right times;  it is not part of the pattern."	isCorrectlySetUp := false</body></methods><methods><class-id>XProgramming.SUnit.ExAbstractCompetingResource</class-id> <category>testing</category><body package="SUnitResourceTests">isAvailable	"In a real competing resource, some actual availability checking would be done here.  The 'isCorrectlySetUp' instvar mimics this to let the tests verify that the pattern is in the right state at the right times;  it is not part of the pattern."	^isCorrectlySetUp</body></methods><methods><class-id>XProgramming.SUnit.ExAbstractCompetingResource</class-id> <category>test data only, not CR pattern</category><body package="SUnitResourceTests">isCorrectlySetUp	"The tests use the 'isCorrectlySetUp' instvar to mimic the status of a real resource;  it is not part of the pattern."	^isCorrectlySetUp</body></methods><methods><class-id>XProgramming.SUnit.ExAbstractCompetingResource class</class-id> <category>private</category><body package="SUnitResourceTests">competingResourceTypes	^ExAbstractCompetingResource allSubclasses</body></methods><methods><class-id>XProgramming.SUnit.ExAbstractCompetingResource class</class-id> <category>test data only, not CR pattern</category><body package="SUnitResourceTests">isCorrectlySetUp	"Test method to let us verify the state of current."	^self isAlreadyAvailable and: [current isCorrectlySetUp]</body></methods><methods><class-id>XProgramming.SUnit.Ex1CompetingResource</class-id> <category>test data only, not CR pattern</category><body package="SUnitResourceTests">rivalResourceClass	^Ex2CompetingResource</body></methods><methods><class-id>XProgramming.SUnit.SkipResultTest</class-id> <category>running</category><body package="SUnitResourceTests">testSkipResult	"Raise a warning, then force a failure so that if the warning does not protect us, the test will fail."	| result test |	result := TestResult new.	self assert: result printString = '0 run, 0 passed, 0 failed, 0 errors'		description: 'Empty TestResult printString wrong'.	self assert: (result classifiedCount: TestSkip classificationTag) = 0		description: 'Skips present before we start run'.	test := self class selector: #testThatRaisesSkip.	test run: result.	self assert: (result classifiedCount: TestSkip classificationTag) = 1		description: 'We did not raise a skip or the exception did not make us skip the test'.	self assert: (result classified: TestSkip classificationTag) any == test		description: 'Skipped test is not our test'.	self assert: result failureCount = 0		description: 'We skipped the test but it still went on to fail'.	self assert: result errorCount = 0		description: test printString, ' raised an error'.	self assert: result runCount = 0		description: 'We ran the test despite skipping it'.	self assert: result printString = '0 run, 0 passed, 0 failed, 0 errors, 1 skip'		description: 'ClassifiedResult with skip has printString wrong'.</body><body package="SUnitResourceTests">testSkipping	"This test should pass, i.e. show green;  it should not be skipped nor fail."	self should: [self skip] raise: TestSkip.	self should: [self skipUnless: false] raise: TestSkip.	self should: [self skipIf: true] raise: TestSkip.	self should: [self skipUnless: false description: 'Skipping did not raise a TestSkip'] raise: TestSkip.	self should: [self skipIf: true description: 'Skipping did not raise a TestSkip'] raise: TestSkip.	self should: [self deny: true orSkip: 'Skipping did not raise a TestSkip'] raise: TestSkip.	self should: [self assert: false orSkip: 'Skipping did not raise a TestSkip'] raise: TestSkip.	self shouldnt: [self skipUnless: true] raise: TestSkip.	self shouldnt: [self skipIf: false] raise: TestSkip.	self shouldnt: [self skipUnless: true description: 'Skipping did not raise a TestSkip'] raise: TestSkip.	self shouldnt: [self skipIf: false description: 'Skipping did not raise a TestSkip'] raise: TestSkip.	self shouldnt: [self deny: false orSkip: 'Skipping did not raise a TestSkip'] raise: TestSkip.	self shouldnt: [self assert: true orSkip: 'Skipping did not raise a TestSkip'] raise: TestSkip.</body><body package="SUnitResourceTests">testThatRaisesSkip	"Raise a warning, then force a failure so that if the warning does not protect us, the test will fail."	self assert: false orSkip: self printString , ' raised TestSkip exception'.	self assert: false description: self printString , ' skip was not handled'.</body></methods><methods><class-id>XProgramming.SUnit.CompetingResourceTest</class-id> <category>running</category><body package="SUnitResourceTests">testCompetingResources	"Verify that a test suite containing tests using two competing resources will run."	| result |	self deny: (Ex1CompetingResource isCorrectlySetUp 			and: [Ex2CompetingResource isCorrectlySetUp])		description: 'Invalid start state:  two competing resources are simultaneously set up'.	result := (TestSuite named: 'Competing Resources Tests')		addTest: (CompetingResource1TestData selector: #testCompetingResource1not2);		addTest: (CompetingResource2TestData selector: #testCompetingResource2not1);		run.	self assert: result hasPassed		description:  'The suite of competing resource tests did not pass'.	self deny: Ex1CompetingResource isCorrectlySetUp		description: 'Test1''s resource is still set up although a test suite has run to its close'.	self deny: Ex2CompetingResource isCorrectlySetUp		description: 'Test2''s resource is still set up although a test suite has run to its close'.	self deny: ExAbstractCompetingResource isCorrectlySetUp		description: 'The abstract resource superclass is set up'.</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource2TestData</class-id> <category>running</category><body package="SUnitResourceTests">testCompetingResource2not1	"Verify that the 2 resource is available as this test requires and that its competing 1 resource is not, as their being competitors requires.  (Do not use isAvailable as that would set up the resource.)"	self assert: Ex2CompetingResource isCorrectlySetUp		description: 'Test 2''s resource is not set up'.	self deny: Ex1CompetingResource isCorrectlySetUp		description: 'Test1''s resource is set up at the same time as 2''s'.	self deny: ExAbstractCompetingResource isCorrectlySetUp		description: 'Abstract resource is set up, which it should not be under the new implementation of competing resources'.</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource2TestData class</class-id> <category>accessing</category><body package="SUnitResourceTests">resources	"This test case only exists to act as data for the main CompetingResourceTest, by being a test that uses this resource."	^Array with: Ex2CompetingResource</body></methods><methods><class-id>XProgramming.SUnit.Ex2CompetingResource</class-id> <category>test data only, not CR pattern</category><body package="SUnitResourceTests">rivalResourceClass	^Ex1CompetingResource</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource1TestData</class-id> <category>running</category><body package="SUnitResourceTests">testCompetingResource1not2	"Verify that the 1 resource is available as this test requires and that its competing 2 resource is not, as their being competitors requires.  (Do not use isAvailable as that would set up the resource.)"	self assert: Ex1CompetingResource isCorrectlySetUp		description: 'Test 1''s resource is not set up'.	self deny: Ex2CompetingResource isCorrectlySetUp		description: 'Test 2''s resource is set up at the same time as 1''s'.	self deny: ExAbstractCompetingResource isCorrectlySetUp		description: 'Abstract resource is set up, which it should not be under the new implementation of competing resources'.</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource1TestData class</class-id> <category>accessing</category><body package="SUnitResourceTests">resources	"This test case only exists to act as data for the main CompetingResourceTest, by being a test that uses this resource."	^Array with: Ex1CompetingResource</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>CompetingResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourcePatterns</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class></st-source>