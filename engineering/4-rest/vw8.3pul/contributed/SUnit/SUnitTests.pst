<?xml version="1.0"?><st-source><!-- Name: SUnitTestsComment: I contain those tests for the SUnit framework that apply in all dialects of Smalltalk.  These tests verify correct behaviour of the framework and, incidentally, that it has the same behaviour in all dialects.DbIdentifier: bear73DbTrace: 282635DevelopmentPrerequisites: #(#(#any 'SUnit' ''))PackageName: SUnitTestsParcel: #('SUnitTests')ParcelName: SUnitTestsPrerequisiteParcels: #(#('SUnit' ''))PrintStringCache: (4.0 RC2,nross)Version: 4.0 RC2Date: 11:51:16 AM May 7, 2010 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.7.1 (may10.1) of May 7, 2010 on May 7, 2010 at 11:51:16 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SimpleTestResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>runningState hasRun hasSetup </inst-vars><class-inst-vars>preventAvailability </class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>SimpleTestResourceCircular1</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.SimpleTestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>SUnitTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hasRun hasSetup hasRanOnce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><comment><class-id>XProgramming.SUnit.SUnitTest</class-id><body>This is both an example of writing tests and a self test for the SUnit. The tests here are pretty strange, since you want to make sure things blow up. You should not generally have to write tests this complicated in structure, although they will be far more complicated in terms of your own objects- more assertions, more complicated setup. Kent says: "Never forget, however, that if the tests are hard to write, something is probably wrong with the design".</body></comment><class><name>SimpleTestResourceTestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>resource </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>FailingTestResourceTestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.SimpleTestResourceTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>SimpleTestResourceCircular</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.SimpleTestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>SimpleTestResourceB</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.SimpleTestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>SimpleTestResourceB1</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.SimpleTestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>ManyTestResourceTestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.SimpleTestResourceTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>SimpleTestResourceA2</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.SimpleTestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>ExampleSetTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>full empty </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>SimpleTestResourceA1</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.SimpleTestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>CircularTestResourceTestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.ManyTestResourceTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitTests</package></attributes></class><class><name>SimpleTestResourceA</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.SimpleTestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><class><name>ResumableTestFailureTestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>duplicateFailureLog </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitTests</package></attributes></class><methods><class-id>XProgramming.SUnit.SimpleTestResource</class-id> <category>running</category><body package="SUnitTests" selector="setRun">setRun	hasRun := true</body><body package="SUnitTests" selector="setUp">setUp		self runningState: self startedStateSymbol.	hasSetup := true</body><body package="SUnitTests" selector="startedStateSymbol">startedStateSymbol	^#started</body><body package="SUnitTests" selector="stoppedStateSymbol">stoppedStateSymbol	^#stopped</body><body package="SUnitTests" selector="tearDown">tearDown	self runningState: self stoppedStateSymbol</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResource</class-id> <category>accessing</category><body package="SUnitTests" selector="runningState">runningState	^runningState</body><body package="SUnitTests" selector="runningState:">runningState: aSymbol	runningState := aSymbol</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResource</class-id> <category>testing</category><body package="SUnitTests" selector="hasRun">hasRun	^hasRun</body><body package="SUnitTests" selector="hasSetup">hasSetup	^hasSetup</body><body package="SUnitTests" selector="isAvailable">isAvailable	^self class allowAvailability and:		[self runningState == self startedStateSymbol]</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResource class</class-id> <category>accessing</category><body package="SUnitTests" selector="allowAvailability">allowAvailability	^preventAvailability isNil</body><body package="SUnitTests" selector="rawCurrentForTest">rawCurrentForTest	^current</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResource class</class-id> <category>utility</category><body package="SUnitTests" selector="preventAvailabilityDuring:">preventAvailabilityDuring: aBlock	"Only setter of preventAvailability."	preventAvailability := false.	^aBlock ensure: [preventAvailability := nil]</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResourceCircular1 class</class-id> <category>accessing</category><body package="SUnitTests" selector="resources">resources	"Circular prereq:  C wants C1 which wants C."	^Array with: SimpleTestResourceCircular</body></methods><methods><class-id>XProgramming.SUnit.SUnitTest</class-id> <category>testing</category><body package="SUnitTests" selector="errorShouldntRaise">errorShouldntRaise	self 		shouldnt: [self someMessageThatIsntUnderstood] 		raise: SUnitNameResolver notificationObject</body><body package="SUnitTests" selector="testAssert">testAssert	self assert: true.	self deny: false</body><body package="SUnitTests" selector="testDefects">testDefects	| result suite error failure |	suite := TestSuite new.	suite addTest: (error := self class selector: #error).	suite addTest: (failure := self class selector: #fail).	result := suite run.	self assert: result defects asArray = (Array with: error with: failure).	self		assertForTestResult: result		runCount: 2		passed: 0		failed: 1		errors: 1</body><body package="SUnitTests" selector="testDialectLocalizedException">testDialectLocalizedException	self		should: [TestResult signalFailureWith: 'Foo']		raise: TestResult failure.	self		should: [TestResult signalErrorWith: 'Foo']		raise: TestResult error.</body><body package="SUnitTests" selector="testError">testError	| case result |	case := self class selector: #error.	result := case run.	self		assertForTestResult: result		runCount: 1		passed: 0		failed: 0		errors: 1.	case := self class selector: #errorShouldntRaise.	result := case run.	self 		assertForTestResult: result		runCount: 1		passed: 0		failed: 0		errors: 1</body><body package="SUnitTests" selector="testException">testException	self		should: [self error: 'foo']		raise: TestResult error</body><body package="SUnitTests" selector="testFail">testFail	| case result |	case := self class selector: #fail.	result := case run.	self		assertForTestResult: result		runCount: 1		passed: 0		failed: 1		errors: 0</body><body package="SUnitTests" selector="testIsNotRerunOnDebug">testIsNotRerunOnDebug	| case |	case := self class selector: #testRanOnlyOnce.	case run.	case debug</body><body package="SUnitTests" selector="testRan">testRan	| case |	case := self class selector: #setRun.	case run.	self assert: case hasSetup.	self assert: case hasRun</body><body package="SUnitTests" selector="testRanOnlyOnce">testRanOnlyOnce	self assert: hasRanOnce ~= true.	hasRanOnce := true</body><body package="SUnitTests" selector="testResult">testResult	| case result |	case := self class selector: #noop.	result := case run.	self		assertForTestResult: result		runCount: 1		passed: 1		failed: 0		errors: 0</body><body package="SUnitTests" selector="testRunning">testRunning	(SUnitDelay forSeconds: 2) wait</body><body package="SUnitTests" selector="testShould">testShould	self		should: [true];		shouldnt: [false]</body><body package="SUnitTests" selector="testSuite">testSuite	| suite result |	suite := TestSuite new.	suite 		addTest: (self class selector: #noop);		addTest: (self class selector: #fail);		addTest: (self class selector: #error).	result := suite run.	self		assertForTestResult: result		runCount: 3		passed: 1		failed: 1		errors: 1</body></methods><methods><class-id>XProgramming.SUnit.SUnitTest</class-id> <category>private</category><body package="SUnitTests" selector="assertForTestResult:runCount:passed:failed:errors:">assertForTestResult: aResult runCount: aRunCount passed: aPassedCount failed: aFailureCount errors: anErrorCount	self		assert: aResult runCount = aRunCount;		assert: aResult passedCount = aPassedCount;		assert: aResult failureCount = aFailureCount;		assert: aResult errorCount = anErrorCount</body><body package="SUnitTests" selector="error">error	3 zork</body><body package="SUnitTests" selector="fail">fail	self assert: false</body><body package="SUnitTests" selector="noop">noop</body><body package="SUnitTests" selector="setRun">setRun	hasRun := true</body></methods><methods><class-id>XProgramming.SUnit.SUnitTest</class-id> <category>accessing</category><body package="SUnitTests" selector="hasRun">hasRun	^hasRun</body><body package="SUnitTests" selector="hasSetup">hasSetup	^hasSetup</body></methods><methods><class-id>XProgramming.SUnit.SUnitTest</class-id> <category>running</category><body package="SUnitTests" selector="setUp">setUp	hasSetup := true</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResourceTestCase</class-id> <category>private</category><body package="SUnitTests" selector="dummy">dummy	self assert: resource hasSetup		description: 'This test uses a resource but it was not set up'.	self setRun.	self assert: resource hasRun		description: 'This test uses a resource but we could not interact with it'.</body><body package="SUnitTests" selector="error">error	'foo' odd</body><body package="SUnitTests" selector="fail">fail	self assert: false</body><body package="SUnitTests" selector="setRun">setRun	resource setRun</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResourceTestCase</class-id> <category>running</category><body package="SUnitTests" selector="setUp">setUp	"Ensure that we error, not just fail, if resource is nil so that #should:raise: checks cannot mistake such an error for what they are trapping."	resource := SimpleTestResource rawCurrentForTest.	self deny: resource isNil		description: 'SimpleTestResource has no current value in test'.	self assert: resource class == SimpleTestResource		description: 'SimpleTestResource current is not an instance of itself'.	self assert: resource hasSetup		description: 'This test uses a resource but it was not set up'.</body><body package="SUnitTests" selector="testDebugTestWithResource">testDebugTestWithResource	"The debug will raise an error if the resource is not set up properly."	self clearOuterResourceStateDuring:		[(self class selector: #setRun) debug].</body><body package="SUnitTests" selector="testResourceCollection">testResourceCollection	self assert: self class buildSuiteFromSelectors resources size = self resources size		description: 'The suite should have the same number of resources as its test'.	self class buildSuiteFromSelectors resources do:		[:each |		self assert: (self resources includes: each)			description: each name, ':  I have this resource but my suite does not'].</body><body package="SUnitTests" selector="testRunSuiteWithResource">testRunSuiteWithResource	| suite |	suite := TestSuite new.	suite addTest: (SimpleTestResourceTestCase selector: #error).	suite addTest: (SimpleTestResourceTestCase selector: #fail).	suite addTest: (self class selector: #dummy).	self clearOuterResourceStateDuring:		[self assert: suite run printString = '3 run, 1 passed, 1 failed, 1 error'			description: 'A suite of tests needing SimpleTestResource did not run as expected'].</body><body package="SUnitTests" selector="testRunTestWithResource">testRunTestWithResource	self clearOuterResourceStateDuring:		[self assert: (self class selector: #dummy) run printString					= '1 run, 1 passed, 0 failed, 0 errors'			description: 'A dummy test that needed a resource did not pass'].</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResourceTestCase</class-id> <category>utility</category><body package="SUnitTests" selector="clearOuterResourceStateDuring:">clearOuterResourceStateDuring: aBlock	"This self-testing test must clear the outer state of its resources before starting and after finishing, so that it can construct test cases and suites of itself and test them."	self assert: SimpleTestResource isAlreadyAvailable		description: 'The resource was not set up for the test'.	SimpleTestResource reset.	self deny: SimpleTestResource isAlreadyAvailable		description: 'The resource was still set up before we began the run'.	^aBlock sunitEnsure:		[self deny: SimpleTestResource isAlreadyAvailable			description: 'The resource was still set up after we finished the run'.		SimpleTestResource isAvailable.		self assert: SimpleTestResource isAlreadyAvailable			description: 'The resource was not set up again after the test'].</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResourceTestCase class</class-id> <category>accessing</category><body package="SUnitTests" selector="resources">resources	^Array with: SimpleTestResource</body></methods><methods><class-id>XProgramming.SUnit.FailingTestResourceTestCase</class-id> <category>utility</category><body package="SUnitTests" selector="clearOuterResourceStateDuring:">clearOuterResourceStateDuring: aBlock	"Make the resource impossible to make available, then ensure that every test raises a failure but not an error (which its setUp would do if it reached it and the resource were nil)."	^super clearOuterResourceStateDuring:		[SimpleTestResource preventAvailabilityDuring:			[self should: aBlock raise: TestResult failure]]</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResourceCircular class</class-id> <category>accessing</category><body package="SUnitTests" selector="resources">resources	^preventAvailability isNil		ifTrue: [super resources, (Array with: SimpleTestResourceA1)]		ifFalse: [super resources, (Array with: SimpleTestResourceA1 with: SimpleTestResourceCircular1)]</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResourceB class</class-id> <category>accessing</category><body package="SUnitTests" selector="resources">resources	^Array with: SimpleTestResourceA1 with: SimpleTestResourceB1</body></methods><methods><class-id>XProgramming.SUnit.ManyTestResourceTestCase</class-id> <category>running</category><body package="SUnitTests" selector="testTearDownOrder">testTearDownOrder	| myResourceSetUpOrder myResourceReverseTearDownOrder |	myResourceReverseTearDownOrder := OrderedCollection new: 7.	myResourceSetUpOrder := (OrderedCollection new: 7)		add: SimpleTestResource;		add: SimpleTestResourceA1;		add: SimpleTestResourceA2;		add: SimpleTestResourceA;		add: SimpleTestResourceB1;		add: SimpleTestResourceB;		yourself.	self assert: (myResourceSetUpOrder allSatisfy: [:each | each isAvailable])		description: 'At test start, not all my resources were set up'.	self class resources do:		[:each | each resetOrAddResourcesTo: myResourceReverseTearDownOrder].	self assert: myResourceReverseTearDownOrder = myResourceSetUpOrder		description: 'Wrong order for tearDown'.	self assert: (myResourceSetUpOrder allSatisfy: [:each | each isAvailable])		description: 'At test start, not all my resources were set up'.</body></methods><methods><class-id>XProgramming.SUnit.ManyTestResourceTestCase</class-id> <category>utility</category><body package="SUnitTests" selector="clearOuterResourceStateDuring:">clearOuterResourceStateDuring: aBlock	"This self-testing test must clear the outer state of its resources before starting and after finishing, so that it can construct test cases and suites of itself and test them."	self assert: SimpleTestResourceA1 isAlreadyAvailable		description: 'The resource was not set up for the test'.	SimpleTestResourceA reset.	SimpleTestResourceB reset.	SimpleTestResourceA1 reset.	self deny: SimpleTestResourceA1 isAlreadyAvailable		description: 'The resource was still set up before we began the run'.	^[super clearOuterResourceStateDuring: aBlock] sunitEnsure:		[self deny: SimpleTestResourceA1 isAlreadyAvailable			description: 'The resource was still set up after we finished the run'.		self deny: SimpleTestResourceB1 isAlreadyAvailable			description: 'The resource was still set up after we finished the run'.		SimpleTestResourceA isAvailable.		self assert: SimpleTestResourceA1 isAlreadyAvailable			description: 'The resource was not set up again after the test'.		SimpleTestResourceB isAvailable.		self assert: SimpleTestResourceB1 isAlreadyAvailable			description: 'The resource was not set up again after the test'.].</body></methods><methods><class-id>XProgramming.SUnit.ManyTestResourceTestCase class</class-id> <category>accessing</category><body package="SUnitTests" selector="resources">resources	^super resources, (Array with: SimpleTestResourceA with: SimpleTestResourceB)</body></methods><methods><class-id>XProgramming.SUnit.ManyTestResourceTestCase class</class-id> <category>testing</category><body package="SUnitTests" selector="shouldInheritSelectors">shouldInheritSelectors	^true</body></methods><methods><class-id>XProgramming.SUnit.ExampleSetTest</class-id> <category>testing</category><body package="SUnitTests" selector="testAdd">testAdd	empty add: 5.	self assert: (empty includes: 5)</body><body package="SUnitTests" selector="testGrow">testGrow	empty addAll: (1 to: 100).	self assert: empty size = 100</body><body package="SUnitTests" selector="testIllegal">testIllegal	self 		should: [empty at: 5] 		raise: TestResult error.	self 		should: [empty at: 5 put: #abc] 		raise: TestResult error</body><body package="SUnitTests" selector="testIncludes">testIncludes	self assert: (full includes: 5).	self assert: (full includes: #abc)</body><body package="SUnitTests" selector="testOccurrences">testOccurrences	self assert: (empty occurrencesOf: 0) = 0.	self assert: (full occurrencesOf: 5) = 1.	full add: 5.	self assert: (full occurrencesOf: 5) = 1</body><body package="SUnitTests" selector="testRemove">testRemove	full remove: 5.	self assert: (full includes: #abc).	self deny: (full includes: 5)</body></methods><methods><class-id>XProgramming.SUnit.ExampleSetTest</class-id> <category>running</category><body package="SUnitTests" selector="setUp">setUp	empty := Set new.	full := Set with: 5 with: #abc</body></methods><methods><class-id>XProgramming.SUnit.CircularTestResourceTestCase</class-id> <category>running</category><body package="SUnitTests" selector="testTearDownOrder">testTearDownOrder	SimpleTestResourceCircular preventAvailabilityDuring:		[self should: [SimpleTestResourceCircular reset; isAvailable] raise: TestResult failure.		self assert: SimpleTestResourceCircular rawCurrentForTest == false			description: 'Circular resource not in failed setUp state'.		self assert: SimpleTestResourceCircular1 rawCurrentForTest == false			description: 'Circular resource not in failed setUp state'.		super testTearDownOrder.		self assert: SimpleTestResourceCircular1 rawCurrentForTest == nil			description: 'Circular resource not in failed setUp state'.		self assert: SimpleTestResourceCircular rawCurrentForTest == nil			description: 'Circular resource not reset after pre-tearDown iteration'].</body></methods><methods><class-id>XProgramming.SUnit.CircularTestResourceTestCase</class-id> <category>utility</category><body package="SUnitTests" selector="clearOuterResourceStateDuring:">clearOuterResourceStateDuring: aBlock	"To let the test run at all, we only make it circular when the preventAvailability instvar is set."	^super clearOuterResourceStateDuring:		[SimpleTestResourceCircular reset.		self deny: SimpleTestResourceCircular1 isAlreadyAvailable			description: 'SimpleTestResourceCircular1 should never be available'.		SimpleTestResourceCircular preventAvailabilityDuring:			[self should: aBlock raise: TestResult failure].		self deny: SimpleTestResourceCircular isAlreadyAvailable			description: 'SimpleTestResourceCircular was set up despite having circularity set'].</body></methods><methods><class-id>XProgramming.SUnit.CircularTestResourceTestCase class</class-id> <category>accessing</category><body package="SUnitTests" selector="resources">resources	^super resources, (Array with: SimpleTestResourceCircular)</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResourceA class</class-id> <category>accessing</category><body package="SUnitTests" selector="resources">resources	^Array with: SimpleTestResourceA1 with: SimpleTestResourceA2</body></methods><methods><class-id>XProgramming.SUnit.ResumableTestFailureTestCase</class-id> <category>test data</category><body package="SUnitTests" selector="errorTest">errorTest	1 zork</body><body package="SUnitTests" selector="failureTest">failureTest	self		assert: false description: 'You should see me' resumable: true; 		assert: false description: 'You should see me too' resumable: true; 		assert: false description: 'You should see me last' resumable: false; 		assert: false description: 'You should not see me' resumable: true</body><body package="SUnitTests" selector="okTest">okTest	self assert: true</body><body package="SUnitTests" selector="regularTestFailureTest">regularTestFailureTest	self assert: false description: 'You should see me'</body></methods><methods><class-id>XProgramming.SUnit.ResumableTestFailureTestCase</class-id> <category>running</category><body package="SUnitTests" selector="setUp">setUp	duplicateFailureLog := OrderedCollection with: 'In set up'.</body><body package="SUnitTests" selector="tearDown">tearDown	self deny: 'You should not see me' = duplicateFailureLog last			description: 'We saw the ''You should not see me'' failure'.	self deny: 'You should see more than me' = duplicateFailureLog last			description: 'We did not see more than a ''You should see more than me'' failure'.</body><body package="SUnitTests" selector="testResumable">testResumable	| result suite |	suite := TestSuite new.	suite addTest: (self class selector: #errorTest).	suite addTest: (self class selector: #regularTestFailureTest).	suite addTest: (self class selector: #resumableTestFailureTest).	suite addTest: (self class selector: #okTest).	result := suite run.	self assert: result failures size = 2;		assert: result errors size = 1</body></methods><methods><class-id>XProgramming.SUnit.ResumableTestFailureTestCase</class-id> <category>Not categorized</category><body package="SUnitTests" selector="resumableTestFailureTest">resumableTestFailureTest	self		assert: false description: 'You should see more than me' resumable: true; 		assert: false description: 'You should see more than me' resumable: true; 		assert: false description: 'You should see me last' resumable: false; 		assert: false description: 'You should not see me' resumable: true</body></methods><methods><class-id>XProgramming.SUnit.ResumableTestFailureTestCase</class-id> <category>logging</category><body package="SUnitTests" selector="logFailure:">logFailure: aString	duplicateFailureLog add: aString.	super logFailure: aString.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name description </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class></st-source>