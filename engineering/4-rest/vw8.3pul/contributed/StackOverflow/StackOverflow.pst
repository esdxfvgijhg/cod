<?xml version="1.0"?><st-source><!-- Name: StackOverflowNotice: Copyright 2003 - 2013 Michael Lucas-SmithThis utility is made available to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: This tool is used to monitor all processes in the system. If a process has jumped far beyond the stack depth of a normal process, it will halt the process with a message of 'stack overflow' to allow the developer to check if the code is correct or not.The current settings are: highest IO priority, 1 second delay and a stack depth of 100,000 method calls. I've found these to be very generous for even tree hungry systems.PackageName: StackOverflowParcel: #('StackOverflow')ParcelName: StackOverflowVersion: 8.2 - 1.5Post-Load Block: 	[:package | Process startStackOverflowWatcher]Date: 11:22:34 AM December 11, 2015 --><time-stamp>From VisualWorksÂ®, 8.1 of July 24, 2015 on December 11, 2015 at 11:22:34 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Core.Process class</class-id> <category>Stack Overflow</category><body package="StackOverflow">stackOverflowBlock	^	[Processor checkForStackOverflows.	(Delay forMilliseconds: self stackOverflowDelay) wait.	true]</body><body package="StackOverflow">stackOverflowDelay	^1000</body><body package="StackOverflow">stackOverflowLimit	^5000</body></methods><methods><class-id>Core.Process class</class-id> <category>Stack Overflow-API</category><body package="StackOverflow">startStackOverflowWatcher	self stopStackOverflowWatcher.	([self stackOverflowBlock whileTrue] forkAt: Processor highIOPriority)		name: 'Stack Overflow Watcher'</body><body package="StackOverflow">stopStackOverflowWatcher	(Process allInstances select: [:each | each name = 'Stack Overflow Watcher'])		do: [:each | each terminate]</body></methods><methods><class-id>Core.Process</class-id> <category>accessing</category><body package="StackOverflow">callDepth	| callDepth currentContext |	callDepth := 0.	currentContext := suspendedContext.	currentContext ifNil: [^0].	[callDepth := callDepth + 1.	currentContext := currentContext sender.	currentContext notNil] whileTrue.	^callDepth</body></methods><methods><class-id>Core.Process</class-id> <category>testing</category><body package="StackOverflow">checkForStackOverflow	self isUnderDebug ifTrue: [^false].	^self callDepth &gt; self stackOverflowLimit</body></methods><methods><class-id>Core.Process</class-id> <category>debugging</category><body package="StackOverflow">stackOverflow	self interruptWith: [self halt: 'stack overflow']</body></methods><methods><class-id>Core.Process</class-id> <category>accessing</category><body package="StackOverflow">stackOverflowLimit	^self environment at: #stackoverflowLimit ifAbsent: [self class stackOverflowLimit]</body><body package="StackOverflow">stackOverflowLimit: aLimit	^self environment at: #stackoverflowLimit put: aLimit</body></methods><methods><class-id>Kernel.ProcessorScheduler</class-id> <category>debugging</category><body package="StackOverflow">checkForStackOverflows	Process allInstances do: [:each | each checkForStackOverflow ifTrue: [each stackOverflow]]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Process</name><environment>Core</environment><super>Core.Link</super><private>false</private><indexed-type>none</indexed-type><inst-vars>suspendedContext priority myList depth hostThreadKey interruptProtect environment isSystem name debugger locale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Processes</category><attributes><package>Kernel-Processes</package></attributes></class><class><name>ProcessorScheduler</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>quiescentProcessLists activeProcess pausedProcesses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Processes</category><attributes><package>Kernel-Processes</package></attributes></class></st-source>