<?xml version="1.0"?><st-source><!-- Name: Internationalizer-TestsNotice: Copyright 2013-2016 Cincom Systems, Inc.  All rights reserved.BundleName: Internationalizer-TestsBundleStructure: a Store.BundleForParcelComment: I18n-Tests is a Bundle that contains code and tools to to test Bundle I18n:I18n-Core Tests	- tests for the I18n-Core packageI18n-Tools Tests	- tests for the I18n-Tools packageDevelopmentPrerequisites: #(#(#any 'Internationalizer' '') #(#any 'SUnitToo' ''))Parcel: nilParcelName: Internationalizer-TestsPrerequisiteDescriptions: #(#(#name 'Internationalizer' #componentType #bundle) #(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('Internationalizer' '') #('SUnitToo' '') #('I18n-Core' '') #('SUnitToo' '') #('I18n-Tools' ''))Version: 8.2 - 1Date: 1:21:48 PM May 6, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (may16.1) of May 6, 2016 on May 6, 2016 at 1:21:48 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>I18nTest</name><environment>I18nCore</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>I18n-Core Tests</package></attributes></class><class><name>UserMessageFilterTests</name><environment>I18nCore</environment><super>I18nCore.I18nTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>I18n-Core Tests</package></attributes></class><class><name>SourceFileCatalogWriterTests</name><environment>I18nCore</environment><super>I18nCore.I18nTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rootFolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>I18n-Core Tests</package></attributes></class><class><name>UserMessageExample</name><environment>I18nCore</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>I18n-Core Tests</package></attributes></class><comment><class-id>I18nCore.UserMessageExample</class-id><body>UserMessageExample contains methods that refer to user messages in the various ways that user messages can specified</body></comment><class><name>UserMessageExampleSubclass</name><environment>I18nCore</environment><super>I18nCore.UserMessageExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>I18n-Core Tests</package></attributes></class><comment><class-id>I18nCore.UserMessageExampleSubclass</class-id><body>UserMessageExampleSubclass is a subclass of UserMessageExample, which declares a method with &lt;i18nSelectorsToIgnore&gt; specifying that all methods matching 'special*' returns Strings that are not to be internationalized. This subclass defines some such methods to ensure that the I18n finder doesn't report these methods, too.</body></comment><class><name>NavigatorSelectionTests</name><environment>I18nTools</environment><super>I18nCore.I18nTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>I18n-Tools Tests</package></attributes></class><class><name>UserMessageNodeFinderTests</name><environment>I18nCore</environment><super>I18nCore.I18nTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>I18n-Core Tests</package></attributes></class><class><name>RewriterExamples</name><environment>I18nTools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>I18n-Tools Tests</package></attributes></class><comment><class-id>I18nTools.RewriterExamples</class-id><body>RewriterExamples contains example methods that are used by the RewriterTests. For each example method there're also reference methods that the tests are written against. The example methods are the source methods and the references are the result methods, when the rewriter was working on the methods.</body></comment><class><name>ContextMenuTests</name><environment>I18nCore</environment><super>I18nCore.I18nTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>I18n-Tools Tests</package></attributes></class><comment><class-id>I18nCore.ContextMenuTests</class-id><body>This test will create a RefactoringBrowser and place the cursor at predefined positions. Then it will test if the I18n Menu Items are either enabled or disabled.</body></comment><class><name>MacroBuilderTests</name><environment>I18nCore</environment><super>I18nCore.I18nTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>I18n-Tools Tests</package></attributes></class><class><name>RewriterTests</name><environment>I18nTools</environment><super>I18nCore.I18nTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>I18n-Tools Tests</package></attributes></class><methods><class-id>I18nCore.I18nTest</class-id> <category>tests</category><body package="I18n-Core Tests">missingI18nStringsInMethod: method	^(MethodFilterMissingI18n new shouldCheckSelector: method selector		inClass: method mclass)			ifTrue: [MissingI18nStringNodeFinder findInMethod: method]			ifFalse: [#()]</body><body package="I18n-Core Tests">userMessagesInMethod: method	^UserMessageNodeFinder findInMethod: method</body><body package="I18n-Core Tests">userMessagesInMethodDefinition: methodDefinition	^self userMessagesInMethod: methodDefinition method</body><body package="I18n-Core Tests">withExampleMethods: selectors do: block	self withExampleMethods: selectors inClass: UserMessageExample do: block</body><body package="I18n-Core Tests">withExampleMethods: selectors inClass: class do: block	selectors do: 			[:selector |			| method |			method := class compiledMethodAt: selector.			block value: method]</body></methods><methods><class-id>I18nCore.I18nTest</class-id> <category>initialize-release</category><body package="I18n-Tools Tests">codeOfBlock: sourceBlock	"converts a block: ['test' , 1 printString] to a string '''test'' , 1 printString'	the square brackets are omitted, because only the code inside the block is needed"	| blockNode |	blockNode := Decompiler new decompileBlock: sourceBlock method				in: self class.	^blockNode body formattedCode</body><body package="I18n-Tools Tests">parseTreeOfBlock: sourceBlock	| source |	source := self codeOfBlock: sourceBlock.	^Refactory.Browser.RBPatternParser parseExpression: source</body></methods><methods><class-id>I18nCore.UserMessageFilterTests</class-id> <category>tests</category><body package="I18n-Core Tests">messagesInMethodsMatchingTemplate: messageTemplate	| methods |	methods := self methodsWithMessagesMatching: messageTemplate.	^methods inject: Set new		into: 			[:set :each |			set				addAll: (self userMessagesInMethodDefinition: each);				yourself]</body><body package="I18n-Core Tests">methodsFilteredBy: aBlock	| collector |	collector := MethodCollector new.	^(collector select: (aBlock value: collector))		reject: #isForSharedVariable</body><body package="I18n-Core Tests">methodsWithMessagesMatching: aUserMessage	^self methodsFilteredBy: 			[:col |			(col searchClassHierarchy: UserMessageExample)				&amp; (col package: (Store.Registry packageForClass: UserMessageExample))					&amp; (col hasUserMessageLike: aUserMessage)]</body><body package="I18n-Core Tests">methodsWithMissingI18nStrings	^self methodsFilteredBy: 			[:col |			(col searchClassHierarchy: UserMessageExample)				&amp; (col package: (Store.Registry packageForClass: UserMessageExample))					&amp; (col hasMissingI18nStrings)]</body><body package="I18n-Core Tests">testFindAllUserMessageMethods	| allMethods invalidMethods |	allMethods := self methodsWithMessagesMatching: '*' asIs asSymbol &lt;&lt; #* &gt;&gt; '*'.	self assert: allMethods notEmpty.	self		deny: (allMethods contains: [:each | each selector = #exampleNoMessage]).	invalidMethods := allMethods reject: 					[:each |					each implementingClass = UserMessageExample						and: ['example*' match: each selector]].	self assert: invalidMethods isEmpty.</body><body package="I18n-Core Tests">testIgnoredMethods	| messages selectorsThatShouldBeIgnored selectorsThatAreNotIgnored selectorsThatShouldBeFound selectorsThatAreNotFound |	messages := self methodsWithMissingI18nStrings.	selectorsThatShouldBeIgnored := #(#specialString #specialString1 #specialString2 #exampleHiddenString #exampleHiddenString2 #exampleHiddenString3 #exampleHiddenString4).	selectorsThatAreNotIgnored := selectorsThatShouldBeIgnored				select: [:each | messages anySatisfy: [:message | message selector = each]].	self assert: selectorsThatAreNotIgnored isEmpty.	selectorsThatShouldBeFound := #(#exampleNoMessage #exampleNoMessageMultipleStrings #exampleMultiMessage2 #exampleLiteralMenu).	selectorsThatAreNotFound := selectorsThatShouldBeFound				reject: [:each | messages anySatisfy: [:message | message selector = each]].	self assert: selectorsThatAreNotFound isEmpty</body><body package="I18n-Core Tests">testMessagesWithoutDefaultString	| messages |	messages := self messagesInMethodsMatchingTemplate: #key &lt;&lt; '*' asSymbol &gt;&gt; nil.	self assert: messages size = 1.	self assert: (messages includes: #key &lt;&lt; #catalog)</body></methods><methods><class-id>I18nCore.SourceFileCatalogWriterTests</class-id> <category>accessing</category><body package="I18n-Core Tests">catalogReferenceFiles	^(Dictionary new)		at: 'catalog.lbl' put: self catalogLBL;		at: 'catalog2.lbl' put: self catalog2LBL;		at: 'catalog3.lbl' put: self catalog3LBL;		at: 'catalog4.lbl' put: self catalog4LBL;		at: 'the null catalog.lbl' put: self nullCatalogLBL;		yourself</body><body package="I18n-Core Tests">exampleFilePath	^(rootFolder / 'Files') ensureDirectory</body><body package="I18n-Core Tests">filesThatAreProcessed	"returns the files that the SourceFileCatalogWriter will process"	^(self newSourceFileCatalogWriter findFilesToParse		collect: [:each | each asAbsoluteFilename asString]) sorted</body><body package="I18n-Core Tests">filesThatShouldBeProcessed	"returns the files that the SourceFileCatalogWriter should process. (all pst and sou files)"	| paths |	paths := ((self pathsForFileSelectors: self selectorsOfTestFiles)				collect: [:each | each asAbsoluteFilename asString]) sorted.	^paths select: [:each | ('*.pst' match: each) or: ['*.sou' match: each]]</body><body package="I18n-Core Tests">newSourceFileCatalogWriter	^(SourceFileCatalogWriter new)		rootFolder: self exampleFilePath;		yourself</body><body package="I18n-Core Tests">referenceErrorChanges	| cl |	cl := ChangeList new.	cl scanFile: self oldErrorReport readStream.	^cl changes</body><body package="I18n-Core Tests">selectorsOfTestFiles	| pragmas |	pragmas := Pragma allNamed: #path: in: self class.	^pragmas collect: #selector</body><body package="I18n-Core Tests">userMessageFolder	^rootFolder directory / 'messages'</body></methods><methods><class-id>I18nCore.SourceFileCatalogWriterTests</class-id> <category>utility</category><body package="I18n-Core Tests">addTestFilesToRootFolder	| paths sources selectors |	selectors := self selectorsOfTestFiles.	paths := self pathsForFileSelectors: selectors.	sources := self sourcesForFileSelectors: selectors.	sources with: paths		do: [:source :filePath | self writeSource: source toFile: filePath]</body><body package="I18n-Core Tests">checkCollection: testCollection isSameAsReference: referenceCollection	"The comparison may seem a bit complicated but it makes debugging easier as the differences are obvious."	| tooManyObjects missingObjects |	tooManyObjects := testCollection				reject: [:each | referenceCollection includes: each].	missingObjects := referenceCollection				reject: [:each | testCollection includes: each].	self assert: tooManyObjects isEmpty.	self assert: missingObjects isEmpty.	self assert: referenceCollection asArray = testCollection asArray</body><body package="I18n-Core Tests">createRootFolder	"create an empty folder for testing. the folder will be emptied during setup, 	so that the files can be used for debugging, even if the testrun was stopped."	| file |	file := 'sourceFileCatalogWriterTestFiles' asFilename.	file ensureDirectory.	[self deleteFilesIn: file] on: OsError do: [:ex | ex].	^file</body><body package="I18n-Core Tests">deleteFilesIn: path	path isDirectory		ifTrue: 			[path directoryContents do: [:each | self deleteFilesIn: path / each].			path delete]		ifFalse: [path delete]</body><body package="I18n-Core Tests">pathsForFileSelectors: selectors	| method subPath pathString |	^selectors collect: 			[:selector |			| filePath |			method := self class compiledMethodAt: selector.			pathString := method attributeAt: #path ifAbsent: [selector].			subPath := UnixFilename named: pathString.			filePath := subPath components inject: self exampleFilePath						into: [:path :each | path / each].			filePath directory ensureDirectory.			filePath]</body><body package="I18n-Core Tests">sourcesForFileSelectors: selectors	^selectors collect: [:selector | self perform: selector]</body><body package="I18n-Core Tests">validateErrorChanges: changes	| referenceChanges errorChanges collectBlock sortFunction |	collectBlock := [:each | each class -&gt; each text asString].	sortFunction := [:each | each key name] ascending , #value ascending.	errorChanges := changes collect: collectBlock.	referenceChanges := self referenceErrorChanges collect: collectBlock.	self checkCollection: (errorChanges sorted: sortFunction)		isSameAsReference: (referenceChanges sorted: sortFunction)</body><body package="I18n-Core Tests">writeSource: source toFile: filePath	| ws |	ws := (filePath withEncoding: #source) writeStream.	[ws nextPutAll: source] ensure: [ws close]</body></methods><methods><class-id>I18nCore.SourceFileCatalogWriterTests</class-id> <category>testFiles</category><body package="I18n-Core Tests">catalog2LBL	^'encoding: #UTF_8catalog: #catalog2key1 = ''key1''key1234567890abcdefghij1234567890abcdefghij1234567890 = ''not too long key'''</body><body package="I18n-Core Tests">catalog3LBL	^'encoding: #UTF_8catalog: #catalog3key1 = ''m1'''</body><body package="I18n-Core Tests">catalog4LBL	^'encoding: #UTF_8catalog: #catalog4key1 = ''key1''key2 = ''key2'''</body><body package="I18n-Core Tests">catalogLBL	^'encoding: #UTF_8catalog: #catalogdeepKey = ''deep key''example2 = ''example2''key1 = ''message''key2 = ''message'''</body><body package="I18n-Core Tests">nullCatalogLBL	^'encoding: #UTF_8catalog: #''the null catalog''noCatalogKey = ''noCatalogKey'''</body><body package="I18n-Core Tests">oldErrorReport	"this method contains a change set that was created by the original tool. The new tool has to create the same report"	^'&lt;?xml version="1.0"?&gt;&lt;st-source&gt;&lt;!-- Key Collision: #key1 #catalog3 ''m1'' ''m2'' --&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass&lt;/class-id&gt; &lt;category&gt;initialize-release&lt;/category&gt;&lt;body package="(none)" selector="duplicateKey"&gt;duplicateKey		#key1 &amp;lt;&amp;lt; #catalog3 &amp;gt;&amp;gt; ''m1''.	#key1 &amp;lt;&amp;lt; #catalog3 &amp;gt;&amp;gt; ''m2''.&lt;/body&gt;&lt;/methods&gt;&lt;!-- No Catalog: #noCatalogKey &gt;&gt; ''noCatalogKey'' --&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass&lt;/class-id&gt; &lt;category&gt;initialize-release&lt;/category&gt;&lt;body package="(none)" selector="noCatalog"&gt;noCatalog	#noCatalogKey &amp;gt;&amp;gt; ''noCatalogKey''&lt;/body&gt;&lt;/methods&gt;&lt;!-- Illegal Key: #~~Illegal Key: #illegalKey:Illegal Key: #illegalKey:key:Too Long Key: #longKey1234567890abcdefghij1234567890abcdefghij1234567890 --&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass&lt;/class-id&gt; &lt;category&gt;initialize-release&lt;/category&gt;&lt;body package="(none)" selector="allIllegalKeys"&gt;allIllegalKeys	#illegalKey: &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''illegalKey''.	#~~ &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''tildetilde''.	#longKey1234567890abcdefghij1234567890abcdefghij1234567890 &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''too long key''.	#illegalKey:key: &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''illegalKeyKey''.	&lt;/body&gt;&lt;/methods&gt;&lt;!-- Illegal Key: #illegalKey: --&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass&lt;/class-id&gt; &lt;category&gt;initialize-release&lt;/category&gt;&lt;body package="(none)" selector="illegalKey"&gt;illegalKey	#illegalKey: &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''illegalKey''&lt;/body&gt;&lt;/methods&gt;&lt;!-- Illegal Key: #illegalKey:key: --&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass&lt;/class-id&gt; &lt;category&gt;initialize-release&lt;/category&gt;&lt;body package="(none)" selector="illegalKey2"&gt;illegalKey2	#illegalKey:key: &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''illegalKeyKey''&lt;/body&gt;&lt;/methods&gt;&lt;!-- Illegal Key: #~~ --&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass&lt;/class-id&gt; &lt;category&gt;initialize-release&lt;/category&gt;&lt;body package="(none)" selector="illegalKey3"&gt;illegalKey3	#~~ &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''tildetilde''&lt;/body&gt;&lt;/methods&gt;&lt;!-- Too Long Key: #longKey1234567890abcdefghij1234567890abcdefghij1234567890 --&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass&lt;/class-id&gt; &lt;category&gt;initialize-release&lt;/category&gt;&lt;body package="(none)" selector="tooLongKey"&gt;tooLongKey	#longKey1234567890abcdefghij1234567890abcdefghij1234567890 &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''too long key''&lt;/body&gt;&lt;/methods&gt;&lt;/st-source&gt;'</body></methods><methods><class-id>I18nCore.SourceFileCatalogWriterTests</class-id> <category>testing</category><body package="I18n-Core Tests">testCatalogWriting	| writer |	writer := self newSourceFileCatalogWriter.	writer createCatalogsInto: self userMessageFolder.	self validateErrorChanges: writer errorChanges.	self validateCatalogsInFolder: self userMessageFolder matchReferenceFiles: self catalogReferenceFiles</body><body package="I18n-Core Tests">testFileFinding		self checkCollection: self filesThatAreProcessed		isSameAsReference: self filesThatShouldBeProcessed</body><body package="I18n-Core Tests">validateCatalogFile: aFile hasContent: aString	| rs fileContent |	rs := (aFile withEncoding: #source) readStream.	fileContent := [rs upToEnd] ensure: [rs close].	self assert: fileContent = aString</body><body package="I18n-Core Tests">validateCatalogsInFolder: aFolder matchReferenceFiles: aDictionary	"aDictionary has the file names as keys and the file's contents as values.	we do not test IDX files because that's handled by the system and should work"	| lblFileNames |	lblFileNames := aFolder directoryContents				select: [:each | '*.lbl' match: each].	self checkCollection: lblFileNames sorted		isSameAsReference: aDictionary keys sorted.	lblFileNames do: 			[:each |			self validateCatalogFile: aFolder / each hasContent: (aDictionary at: each)]</body></methods><methods><class-id>I18nCore.SourceFileCatalogWriterTests</class-id> <category>initialize-release</category><body package="I18n-Core Tests">setUp	| rootComponents index each |	SourceFileManager default close.	rootFolder := self createRootFolder.	self addTestFilesToRootFolder.	rootComponents := rootFolder components.	SourceFileManager default fileIndicesDo: 			[:i |			each := SourceFileManager default nameAt: i.			(each components first: rootComponents size) = rootComponents				ifTrue: 					[index := SourceFileManager default fileIndexForFilename: each.					SourceFileManager default removeFileAt: index]]</body></methods><methods><class-id>I18nCore.SourceFileCatalogWriterTests class</class-id> <category>instance creation</category><body package="I18n-Core Tests">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>I18nCore.UserMessageExample</class-id> <category>examples</category><body package="I18n-Core Tests">class	"Answer the object which is the receiver's class."	&lt;primitive: 111&gt;	^nil</body><body package="I18n-Core Tests">doesNotUnderstand: aMessage	^(MessageNotUnderstood new)		parameter: aMessage;		messageText: 				[[aMessage selector printString] on: Error					do: [:ex | ex return: ex messageText]];		raiseSignal</body><body package="I18n-Core Tests">exampleArray	^#(#key #value #defaultString)</body><body package="I18n-Core Tests">exampleAsIsArray	^#('string1' 'string2') asIs</body><body package="I18n-Core Tests">exampleAsIsString	^'string' asIs</body><body package="I18n-Core Tests">exampleEmptyUserMessage	^#'' &lt;&lt; #'' &gt;&gt; ''</body><body package="I18n-Core Tests">exampleEvaluatedKeyCatalogMessage	20 timesRepeat: 			[1 = 3 ifTrue: [^UserMessage defaultString: 'message' key: #key catalogID: #catalog].			^Array new]</body><body package="I18n-Core Tests">exampleEvaluatedKeyMessage	20 timesRepeat: 			[1 = 3 ifTrue: [^UserMessage defaultString: 'message' key: #key].			^Array new]</body><body package="I18n-Core Tests">exampleFromDialog	"This is a copy of Dialog&gt;&gt;requestFileName:default:version:ifFail:.	It appeared to trigger a bug in the UserMessageNodeFinder and was copied here to create a testcase around it"	| fileName currentDir haveOne versionType default message failBlock aVisualOrNil |	versionType := nil.	default := nil.	message := nil.	failBlock := nil.	aVisualOrNil := nil.	(#(#new #old #mustBeNew #mustBeOld #any #multipleOld) includes: versionType)		ifFalse:	[self error: ((#errIllegalFileVersion &lt;&lt; #dialogs &gt;&gt; 'Illegal value for file version: &lt;1p&gt;')expandMacrosWith: versionType)].	fileName := default.	currentDir := Filename defaultDirectoryName copyWith: Filename separator.	[true] whileTrue: 		[fileName := Dialog request: message initialAnswer: fileName for: aVisualOrNil.		fileName isEmpty			ifTrue: [^failBlock value].		haveOne := true.		((fileName includes: $*) or: [fileName includes: $#])			ifTrue:	"Is a pattern, set up a menu"				[| list list2 choice |				list := (Filename filesMatching: fileName) asSortedStrings.				list2 := list collect:					[:fname |					(fname findString: currentDir startingAt: 1) = 1						ifTrue: [fname copyFrom: currentDir size + 1 to: fname size]						ifFalse: [fname asString]].				list isEmpty					ifTrue:						[choice := Dialog							choose: (#noMatch &lt;&lt; #dialogs &gt;&gt; 'No matching files')							labels: (Array with: (#tryAgain &lt;&lt; #labels &gt;&gt; 'Try again') with: (#Cancel &lt;&lt; #labels &gt;&gt; 'Cancel'))							values: #(#newPattern #abort)							default: #abort							for: aVisualOrNil]					ifFalse:						[versionType == #multipleOld							ifTrue:								[choice := Dialog									choose: (#chooseFiles &lt;&lt; #dialogs &gt;&gt; 'Choose file(s)')									fromList: list2									values: list2									buttons: (Array with: (#selectAll &lt;&lt; #labels &gt;&gt; 'Select all') with: (#tryAgain &lt;&lt; #labels &gt;&gt; 'Try again'))									values: #(#selectAll #newPattern)									lines: 20									cancel: [#abort]									for: aVisualOrNil]							ifFalse:								[choice := Dialog									choose: (#chooseFile &lt;&lt; #dialogs &gt;&gt; 'Choose a file')									fromList: list2									values: list2									buttons: (Array with: (#tryAgain &lt;&lt; #labels &gt;&gt; 'Try again'))									values: #(#newPattern)									lines: 20									cancel: [#abort]									for: aVisualOrNil]].				choice == #abort					ifTrue: [^failBlock value].				choice == #selectAll					ifTrue: [^list2].				choice == #newPattern					ifFalse: [fileName := choice]					ifTrue: [haveOne := false] "try again"].			"got a single file name or match code said 'try again'"		haveOne ifTrue:			[| err |			fileName asFilename directory definitelyExists				ifFalse:					[haveOne := false.					(Dialog confirm: ((#dirDoesNotExist &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt;''s directory does not exist. Try again?' ) expandMacrosWith: fileName) for: aVisualOrNil)						ifFalse: [^failBlock value]]				ifTrue:					[versionType = #any						ifTrue: [^fileName].					(versionType = #new or: [versionType = #mustBeNew])						ifTrue:							[fileName asFilename exists								ifFalse: [^fileName].							(versionType = #new and:								[Dialog confirm: ((#fileAlreadyExists &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt; already exists. Use anyway?') expandMacrosWith: fileName) for: aVisualOrNil])									ifTrue: [^fileName].							err := (#errFileExists &lt;&lt; #dialogs &gt;&gt; ' File already exists.&lt;n&gt;  ') expandMacros]						ifFalse:							["versionType must be either #old or #mustBeOld"							fileName asFilename exists								ifTrue: [^fileName].							(versionType = #old and:								[Dialog confirm: ((#noFileUseAnyway &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt; does not exist. Use anyway?') expandMacrosWith: fileName) for: aVisualOrNil])								ifTrue: [^fileName].							err := (fileName = fileName asFilename asString)								ifTrue: [(#fileNotFound &lt;&lt; #dialogs &gt;&gt; ' File not found: &lt;n&gt;  ') expandMacros]								ifFalse: [(#fileNameIllegal &lt;&lt; #dialogs &gt;&gt; ' Illegal file name: &lt;n&gt;  ') expandMacros]].					(Dialog						choose: ((#continue &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt;Would you like to continue?') expandMacrosWith: err)						labels: (Array with: (#OK &lt;&lt; #labels &gt;&gt; 'OK') 						with: (#Cancel &lt;&lt; #labels&gt;&gt; 'Cancel')) 						values: #(true false) default: false for: aVisualOrNil)							ifFalse: [^failBlock value]]]]</body><body package="I18n-Core Tests">exampleKeyDefaultStringMessage	20 timesRepeat: 			[1 = 3 ifTrue: [^#key &lt;&lt; #catalog &gt;&gt; 'message'].			^Array new]</body><body package="I18n-Core Tests">exampleKeyDefaultStringMessageReverse	20 timesRepeat: 			[1 = 3 ifTrue: [^#key &gt;&gt; 'message' &lt;&lt; #catalog].			^Array new]</body><body package="I18n-Core Tests">exampleKeyMessage	20 timesRepeat: 			[1 = 3 ifTrue: [^#key &lt;&lt; #catalog].			^Array new]</body><body package="I18n-Core Tests">exampleKeyMessage1	20 timesRepeat: 			[1 = 3 ifTrue: [^#key &gt;&gt; 'message'].			^Array new]</body><body package="I18n-Core Tests">exampleKeyMessage2	"this method is used to test that #key &lt;&lt; 'message' is found as a user Message like #key &lt;&lt; nil &gt;&gt; 'message'. 	#key &lt;&lt; 'message' actually returns a user message with 'message' as catalog, 	which is incorrect and would't properly lookup, because catalogs have to be symbols."	20 timesRepeat: 			[1 = 3 ifTrue: [^#key &lt;&lt; 'message'].			^Array new]</body><body package="I18n-Core Tests">exampleLiteralKeyCatalogMessage1	20 timesRepeat: 			[1 = 3				ifTrue: 					[^#(#{Kernel.UserMessage}						#defaultString: 'message'						#key: #key						#catalogID: #catalog)].			^Array new]</body><body package="I18n-Core Tests">exampleLiteralKeyCatalogMessage2	20 timesRepeat: 			[1 = 3				ifTrue: 					[^#(#{Kernel.UserMessage}						#defaultString: 'message'						#catalogID: #catalog						#key: #key)].			^Array new]</body><body package="I18n-Core Tests">exampleLiteralKeyCatalogMessage3	20 timesRepeat: 			[1 = 3				ifTrue: 					[^#(#{Kernel.UserMessage}						#catalogID: #catalog						#defaultString: 'message'						#key: #key)].			^Array new]</body><body package="I18n-Core Tests">exampleLiteralKeyCatalogMessage4	20 timesRepeat: 			[1 = 3				ifTrue: 					[^#(#{Kernel.UserMessage}						#catalogID: #catalog						#key: #key						#defaultString: 'message')].			^Array new]</body><body package="I18n-Core Tests">exampleLiteralKeyCatalogMessage5	20 timesRepeat: 			[1 = 3				ifTrue: 					[^#(#{Kernel.UserMessage}						#key: #key						#catalogID: #catalog						#defaultString: 'message')].			^Array new]</body><body package="I18n-Core Tests">exampleLiteralKeyCatalogMessage6	20 timesRepeat: 			[1 = 3				ifTrue: 					[^#(#{Kernel.UserMessage}						#key: #key						#defaultString: 'message'						#catalogID: #catalog)].			^Array new]</body><body package="I18n-Core Tests">exampleLiteralMenu	"should only find strings, no user messages"	"this doesn't look like a proper spec array but there's such a method in the examples cookbook"	^#(#Menu #(#(#MenuItem		#label: 'browse') #(#MenuItem		#label: 'list contents') #(#MenuItem		#label: 'list versions') #(#MenuItem		#label: 'compare with image') #(#MenuItem		#label: 'load') #(#MenuItem		#label: 'merge')) #(2 1 1 2) #(#browsePackageVersion #listBundleContents #browseVersions #diffPundleWithImage #loadPundle #mergePundleVersion))			decodeAsLiteralArray</body><body package="I18n-Core Tests">exampleLongMethod	"this method has like 80k characters, it should be is ignored"	^'a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a=a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&gt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a=a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a?a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a=a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&gt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a=a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a@a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a=a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&gt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a=a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a?a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a=a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&gt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a=a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a&lt;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a;a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a:a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a9a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a8a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a7a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a6a2a3a2a4a2a3a2a5a2a3a2a4a2a3a2a'</body><body package="I18n-Core Tests">exampleMessageWithString	20 timesRepeat: 			[1 = 3				ifTrue: 					[^#(#{Kernel.UserMessage}						#defaultString: 'message'						#catalogID: #catalog						#key: #key)].			^'string']</body><body package="I18n-Core Tests">exampleMultiDifferator	^#(#{UI.FullSpec}		#window: #(#{UI.WindowSpec}			#label: #(#{UserMessage}				#key: #MultiDifferator				#catalogID: #browser				#defaultString: 'Multi Differator')			#min: #(#{Core.Point} 20 20)			#bounds: #(#{Graphics.Rectangle} 512 384 965 696))		#component: #(#{UI.SpecCollection}			#collection: #(#(#{UI.ResizingSplitterSpec}				#layout: #(#{Graphics.LayoutFrame} -1 0.5 0 0 1 0.5 0 1)				#name: #ResizingSplitter1				#horizontal: false				#minAboveSize: 30				#minBelowSize: 30				#aboveWidgets: 'leftPane'				#belowWidgets: 'rightPane') #(#{UI.CompositeSpecCollection}				#collection: #(#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 24 0 0 1.0 0 1.0)					#name: #TextEditor1					#model: #text1					#tabRequiresControl: true) #(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 23 0)					#name: #ComboBox1					#model: #definition1					#type: #object					#comboList: #list1					#readSelector: #definitionFromString:					#printSelector: #definitionToString:))				#compositeSpec: #(#{UI.CompositeSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -1 0.5 0 1)					#name: #leftPane)) #(#{UI.CompositeSpecCollection}				#collection: #(#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 24 0 0 1 0 1)					#name: #TextEditor2					#model: #text2					#tabRequiresControl: true) #(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 23 0)					#name: #ComboBox2					#model: #definition2					#type: #object					#comboList: #list2					#readSelector: #definitionFromString:					#printSelector: #definitionToString:))				#compositeSpec: #(#{UI.CompositeSpec}					#layout: #(#{Graphics.LayoutFrame} 1 0.5 0 0 0 1 0 1)					#name: #rightPane)))))</body><body package="I18n-Core Tests">exampleMultiMessage1	20 timesRepeat: 			[1 = 3				ifTrue: 					[^#(#{Kernel.UserMessage}						#defaultString: 'message'						#catalogID: #catalog						#key: #key)].			^#key2 &lt;&lt; #catalog]</body><body package="I18n-Core Tests">exampleMultiMessage2	20 timesRepeat: 			[1 = 'no string' asIs				ifTrue: 					[^#(#{Kernel.UserMessage}						#defaultString: 'message'						#catalogID: #catalog						#key: #key)].			^#key2 &lt;&lt; #catalog].	^'string'</body><body package="I18n-Core Tests">exampleNestedLiteralKeyCatalogMessage	^#(#test #(#{Kernel.UserMessage}		#key: #key		#defaultString: 'message'		#catalogID: #catalog))</body><body package="I18n-Core Tests">exampleNoMessage	20 timesRepeat: 			[1 = 3 ifTrue: [5 &lt;&lt; 'string'].			5 &gt;&gt; 'string'.			#test &lt;&lt; 6.			#test &gt;&gt; 5.			^Array new]</body><body package="I18n-Core Tests">exampleNoMessageMultipleStrings	20 timesRepeat: 			[1 = 3 ifTrue: [5 &lt;&lt; 'string1'].			5 &gt;&gt; 'string2'.			#test &lt;&lt; 6.			#test &gt;&gt; 5.			Array new]</body><body package="I18n-Core Tests">examplePackedString	"this is a ByteArray with the gzipped utf8 representation of the string in #exampleLongMethod.	packed strings are also ignored"	^ByteArray		fromPackedString: 'XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS)!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D9XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!N6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS%!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D:XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS1!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D9XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!N&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS%!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D;XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS)!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D9XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!OVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS%!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D:XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS-!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D9XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!N&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS%!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D&lt;XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS)!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D9XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!N6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS%!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D:XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS9!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D9XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!N&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS%!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D;XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS)!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D9XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!OFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS%!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D:XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS-!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D9XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!N&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS%!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D=XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS)!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D9XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!N6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS%!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D:XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS1!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D9XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!N&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS%!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D;XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NVD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D8XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS)!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!NFD2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS]!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D9XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M6D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D6XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XS!!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!M&amp;D2XSM!L&amp;D4XSI!L6D2XSU!L&amp;D3XSI!MFD2XSM!L&amp;D7XSI!L6D2XSQ!L&amp;D3XSI!MVD2XSM!L&amp;D4XSI!L6D2XSY!L&amp;D3XSI!MFD2XSM!L&amp;D5XSI!L6D2XSQ!L&amp;D3XSI!'</body><body package="I18n-Core Tests">exampleSlarArray	^#(#text #( #slar #(0 0 1) #{SeaBreeze.SBUserMessageAccessor}		#( #hasDefaultKey true )		#( #supplied false )		#( #userMessage #( #slar #{Kernel.UserMessage}				#( #catalogID #catalog )				#( #defaultString 'message' )				#( #key #key )			 ) )	 ))</body><body package="I18n-Core Tests">exampleUserMessageNoCatalog	"This method describes a UserMessage in an invalid way. 	When the code is evaluated, the resulting UserMessage will not 	have a catalog and #catalog will be the default string. 	The problem is that #&gt;&gt; is sent both times"	#invalidCode &gt;&gt; 'invalidCode' &gt;&gt; #catalog</body><body package="I18n-Core Tests">exampleUserMessageNoCatalog1	"This method describes a UserMessage in an invalid way. 	When the code is evaluated, the resulting UserMessage will not 	have a default string and what's intented to be the default string will be the catalog. 	The problem is that #&lt;&lt; is sent both times"	#invalidCode &lt;&lt; #catalog &lt;&lt; 'invalidCode'</body></methods><methods><class-id>I18nCore.UserMessageExample</class-id> <category>ignored methods</category><body package="I18n-Core Tests">exampleHiddenString	"this method has no user message, but it should not be found using a method filter because there's a method with &lt;i18nSelectorsToIgnore&gt; that forbids that this method is found"	^'test'</body><body package="I18n-Core Tests">exampleHiddenString2	"this method has no user message, but it should not be found using a method filter because there's a method with &lt;i18nSelectorsToIgnore&gt; that forbids that this method is found"	^'test'</body><body package="I18n-Core Tests">specialString	"all specialString* methods should be ignored based on a wild-card selector"	^'test'</body><body package="I18n-Core Tests">specialString1	"all specialString* methods should be ignored based on a wild-card selector"	^'test'</body><body package="I18n-Core Tests">specialString2	"all specialString* methods should be ignored based on a wild-card selector"	^'test'</body></methods><methods><class-id>I18nCore.UserMessageExampleSubclass</class-id> <category>ignored methods</category><body package="I18n-Core Tests">normalMethod	^'testNormal'</body><body package="I18n-Core Tests">specialString2	"all specialString* methods should be ignored based on a wild-card selector"	^'test2'</body><body package="I18n-Core Tests">specialString3	"all specialString* methods should be ignored based on a wild-card selector. Also in subclasses"	^'test3'</body></methods><methods><class-id>I18nCore.UserMessageExampleSubclass class</class-id> <category>instance creation</category><body package="I18n-Core Tests">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>I18nTools.NavigatorSelectionTests</class-id> <category>initialize-release</category><body package="I18n-Tools Tests">checkUsesNavigator: navigatorClass for: aNumber problemsOfClass: problemClass	| problems |	problems := self create: aNumber problemsOfClass: problemClass.	self checkUsesNavigator: navigatorClass forProblems: problems</body><body package="I18n-Tools Tests">checkUsesNavigator: referenceClass forProblems: problems	| class |	class := ProblemViewer findNavigatorClassForProblems: problems.	self assert: class = referenceClass</body><body package="I18n-Tools Tests">checkUsesNavigatorClass: navigatorClass forProblemClass: problemClass	self checkUsesNavigator: navigatorClass for: 1 problemsOfClass: problemClass.	self checkUsesNavigator: navigatorClass for: 5 problemsOfClass: problemClass</body><body package="I18n-Tools Tests">create: aNumber problemsOfClass: problemClass	^(1 to: aNumber) collect: [:each | problemClass new]</body><body package="I18n-Tools Tests">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body><body package="I18n-Tools Tests">testCompositeNavigator	self checkUsesNavigator: CompositeProblemNavigator		forProblems: (self create: 4 problemsOfClass: DuplicateKeyUserMessage)				, (self create: 1 problemsOfClass: InvalidKeyMessage).	self checkUsesNavigator: CompositeProblemNavigator		forProblems: (self create: 1 problemsOfClass: UserMessageInCatalog)				, (self create: 1 problemsOfClass: TooLongKeyMessage)</body><body package="I18n-Tools Tests">testConcreteNavigator	self checkUsesNavigatorClass: DuplicateKeyProblemNavigator		forProblemClass: DuplicateKeyUserMessage.	self checkUsesNavigatorClass: InvalidKeyProblemNavigator		forProblemClass: InvalidKeyMessage.	self checkUsesNavigatorClass: TooLongKeyProblemNavigator		forProblemClass: TooLongKeyMessage.	self checkUsesNavigatorClass: UserMessageProblemNavigator		forProblemClass: UserMessageInCatalog.</body><body package="I18n-Tools Tests">testNoNavigator	self checkUsesNavigator: NoProblemNavigator forProblems: #()</body></methods><methods><class-id>I18nTools.NavigatorSelectionTests class</class-id> <category>instance creation</category><body package="I18n-Tools Tests">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>I18nCore.UserMessageNodeFinderTests</class-id> <category>tests</category><body package="I18n-Core Tests">checkMethod: method hasMissingI18nStrings: referenceStrings	| strings |	strings := self missingI18nStringsInMethod: method.	self assert: strings size = referenceStrings size.	^self assert: strings asArray sorted = referenceStrings asArray sorted</body><body package="I18n-Core Tests">checkMethods: selectors haveMissingI18nStrings: referenceStrings	self withExampleMethods: selectors		do: [:method | self checkMethod: method hasMissingI18nStrings: referenceStrings]</body><body package="I18n-Core Tests">checkMethods: selectors haveUserMessage: referenceMessage	self checkMethods: selectors		haveUserMessages: (Array with: referenceMessage)</body><body package="I18n-Core Tests">checkMethods: selectors haveUserMessages: referenceMessages	| messages function |	function := #catalogID ascending , #key ascending				, #defaultString ascending.	self withExampleMethods: selectors		do: 			[:method |			messages := self userMessagesInMethod: method.			self assert: messages size = referenceMessages size.			self assert: (messages asArray sorted: function)						= (referenceMessages asArray sorted: function)]</body><body package="I18n-Core Tests">checkMethods: selectors in: aClass haveMissingI18nStrings: referenceStrings	self		withExampleMethods: selectors		inClass: aClass		do: [:method | self checkMethod: method hasMissingI18nStrings: referenceStrings]</body><body package="I18n-Core Tests">testStringDetection	self checkMethods: #(#exampleNoMessage)		haveMissingI18nStrings: #('string' 'string').	self checkMethods: #(#exampleNoMessageMultipleStrings)		haveMissingI18nStrings: #('string1' 'string2').	self checkMethods: #(#exampleMultiMessage2)		haveMissingI18nStrings: #('string').	self checkMethods: #(#exampleLongMethod #examplePackedString)		haveMissingI18nStrings: #().	self checkMethods: #(#exampleLiteralMenu)		haveMissingI18nStrings: #('browse' 'list contents' 'list versions' 'compare with image' 'load' 'merge').	self		checkMethods: #(#exampleAsIsArray #exampleAsIsString #examplePragmaStringIgnore)		haveMissingI18nStrings: #().	self		checkMethods: #(#normalMethod)		in: UserMessageExampleSubclass		haveMissingI18nStrings: #('testNormal').	self		checkMethods: #(#specialString2 #specialString3)		in: UserMessageExampleSubclass		haveMissingI18nStrings: #()</body><body package="I18n-Core Tests">testStringDetectionFromDialog	"the exampleFromDialog method is a copy of SimpleDialog&gt;&gt;requestFileName:default:version:ifFail:for:.	This method has a lot of UserMessages but no standalone strings. 	This test makes sure that none of the strings inside the user messages are incorrectly identified as uninternationalized strings"	self checkMethods: #(#exampleFromDialog)		haveMissingI18nStrings: #().	self checkMethods: #(#exampleFromDialog)		haveUserMessages: ((OrderedCollection new)				add: #chooseFile &lt;&lt; #dialogs &gt;&gt; 'Choose a file';				add: #chooseFiles &lt;&lt; #dialogs &gt;&gt; 'Choose file(s)';				add: #continue &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt;Would you like to continue?';				add: #dirDoesNotExist &lt;&lt; #dialogs							&gt;&gt; '&lt;1s&gt;''s directory does not exist. Try again?';				add: #errFileExists &lt;&lt; #dialogs &gt;&gt; ' File already exists.&lt;n&gt;  ';				add: #errIllegalFileVersion &lt;&lt; #dialogs							&gt;&gt; 'Illegal value for file version: &lt;1p&gt;';				add: #fileAlreadyExists &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt; already exists. Use anyway?';				add: #fileNameIllegal &lt;&lt; #dialogs &gt;&gt; ' Illegal file name: &lt;n&gt;  ';				add: #fileNotFound &lt;&lt; #dialogs &gt;&gt; ' File not found: &lt;n&gt;  ';				add: #noFileUseAnyway &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt; does not exist. Use anyway?';				add: #noMatch &lt;&lt; #dialogs &gt;&gt; 'No matching files';				add: #Cancel &lt;&lt; #labels &gt;&gt; 'Cancel';				add: #Cancel &lt;&lt; #labels &gt;&gt; 'Cancel';				add: #OK &lt;&lt; #labels &gt;&gt; 'OK';				add: #selectAll &lt;&lt; #labels &gt;&gt; 'Select all';				add: #tryAgain &lt;&lt; #labels &gt;&gt; 'Try again';				add: #tryAgain &lt;&lt; #labels &gt;&gt; 'Try again';				add: #tryAgain &lt;&lt; #labels &gt;&gt; 'Try again';				yourself)</body><body package="I18n-Core Tests">testUserMessageDetection	self checkMethods: #(#exampleKeyMessage) haveUserMessage: #key &lt;&lt; #catalog.	self		checkMethods: #(#exampleEvaluatedKeyCatalogMessage #exampleKeyDefaultStringMessage #exampleLiteralKeyCatalogMessage6 #exampleLiteralKeyCatalogMessage1 #exampleLiteralKeyCatalogMessage2 #exampleLiteralKeyCatalogMessage3 #exampleLiteralKeyCatalogMessage4 #exampleLiteralKeyCatalogMessage5 #exampleKeyDefaultStringMessageReverse #examplePragmaUserMessage #exampleNestedLiteralKeyCatalogMessage #exampleSlarArray)		haveUserMessage: #key &lt;&lt; #catalog &gt;&gt; 'message'.	self		checkMethods: #(#exampleEvaluatedKeyMessage #exampleKeyMessage1 #exampleKeyMessage2)		haveUserMessage: #key &lt;&lt; nil &gt;&gt; 'message'.	self checkMethods: #(#exampleMultiMessage1 #exampleMultiMessage2)		haveUserMessages: (Array with: #key &lt;&lt; #catalog &gt;&gt; 'message'				with: #key2 &lt;&lt; #catalog).	self		checkMethods: #(#exampleNoMessage #exampleNoMessageMultipleStrings #exampleLiteralMenu #exampleArray #exampleOldWindowSpec)		haveUserMessages: #().	self checkMethods: #(#exampleMultiDifferator)		haveUserMessages: (Array				with: #MultiDifferator &lt;&lt; #browser &gt;&gt; 'Multi Differator').	self checkMethods: #(#exampleOldWindowSpec2)		haveUserMessages: (#(#(#{Kernel.UserMessage}				#key: #Window				#defaultString: 'Window'				#catalogID: #WaveUIPainterToolsLabels) #(#{Kernel.UserMessage}				#key: #Background				#defaultString: 'Background'				#catalogID: #WaveUIPainterToolsLabels) #(#{Kernel.UserMessage}				#key: #SubmitToSubcanvases				#defaultString: 'Submit to subcanvases'				#catalogID: #WaveUIPainterToolsLabels) #(#{Kernel.UserMessage}				#key: #RefreshEvery				#defaultString: 'Refresh every '				#catalogID: #WaveUIPainterToolsLabels) #(#{Kernel.UserMessage}				#key: #seconds				#defaultString: 'seconds'				#catalogID: #WaveUIPainterToolsLabels) #(#{Kernel.UserMessage}				#key: #Background				#defaultString: 'Background'				#catalogID: #WaveUIPainterToolsLabels) #(#{Kernel.UserMessage}				#key: #Loop				#defaultString: 'Loop:'				#catalogID: #WaveUIPainterToolsLabels) #(#{Kernel.UserMessage}				#key: #Sound				#defaultString: 'Sound:'				#catalogID: #WaveUIPainterToolsLabels) #(#{Kernel.UserMessage}				#key: #Pattern				#defaultString: 'Pattern:'				#catalogID: #WaveUIPainterToolsLabels)) collect: #decodeAsLiteralArray).	self		checkMethods: #(#exampleUserMessageNoCatalog #exampleUserMessageNoCatalog1)		haveUserMessages: (Array with: (InvalidUserMessage						defaultString: 'invalidCode'						key: #invalidCode						catalogID: #catalog)).	self checkMethods: #(#exampleEmptyUserMessage)		haveUserMessage: #'' &lt;&lt; #'' &gt;&gt; ''</body></methods><methods><class-id>I18nTools.RewriterExamples</class-id> <category>example 9</category><body package="I18n-Tools Tests">example9	'test &lt;1p&gt;' expandMacrosWith: 1</body><body package="I18n-Tools Tests">referenceUserMessage9	#test1p &lt;&lt; #i18n &gt;&gt; 'test &lt;1p&gt;' expandMacrosWith: 1</body></methods><methods><class-id>I18nTools.RewriterExamples</class-id> <category>example 4</category><body package="I18n-Tools Tests">example4	'test' , 'a' , 1 printString.	'test' , 'a' , 1 printString , 'test'.</body><body package="I18n-Tools Tests">referenceMacro4_1	"the first 'test' , 'a' , 1 printString was replaced"	'testa&lt;1p&gt;' expandMacrosWith: 1.	'test' , 'a' , 1 printString , 'test'</body><body package="I18n-Tools Tests">referenceMacro4_2	'test' , 'a' , 1 printString.	('testa&lt;1p&gt;' expandMacrosWith: 1) , 'test'</body></methods><methods><class-id>I18nTools.RewriterExamples</class-id> <category>example 8</category><body package="I18n-Tools Tests">example8	#('test') printString</body><body package="I18n-Tools Tests">referenceUserMessage8	#(#(#test #i18n 'test')) printString</body></methods><methods><class-id>I18nTools.RewriterExamples</class-id> <category>example 2</category><body package="I18n-Tools Tests">example2	'test' asString.	1 = 'test'.	'test' asIs.	#test &gt;&gt; 'test' &lt;&lt; #i18n.</body><body package="I18n-Tools Tests">referenceNonI18n2	'test' asIs asString.	1 = 'test' asIs.	'test' asIs.	#test &gt;&gt; 'test' &lt;&lt; #i18n.</body><body package="I18n-Tools Tests">referenceNonI18n_1	'test' asIs asString.	1 = 'test'.	'test' asIs.	#test &gt;&gt; 'test' &lt;&lt; #i18n.</body><body package="I18n-Tools Tests">referenceNonI18n_2	'test' asString.	1 = 'test' asIs.	'test' asIs.	#test &gt;&gt; 'test' &lt;&lt; #i18n.</body><body package="I18n-Tools Tests">referenceUserMessage2	(#test &lt;&lt; #i18n &gt;&gt; 'test') asString asString.	1 = (#test &lt;&lt; #i18n &gt;&gt; 'test') asString.	'test' asIs.	#test &gt;&gt; 'test' &lt;&lt; #i18n</body></methods><methods><class-id>I18nTools.RewriterExamples</class-id> <category>example 7</category><body package="I18n-Tools Tests">example7	^#(#{UI.FullSpec}		#window: #(#{UI.WindowSpec}			#label: 'Unlabeled Canvas'			#bounds: #(#{Graphics.Rectangle} 740 405 940 605))		#component: #(#{UI.SpecCollection}			#collection: #(#(#{UI.LabelSpec}				#layout: #(#{Core.Point} 11 12)				#name: #test1				#label: 'test') #(#{UI.LabelSpec}				#layout: #(#{Core.Point} 9 42)				#name: #test2				#label: #(#{Kernel.UserMessage}					#key: #test					#defaultString: 'test'					#catalogID: #i18n)))))</body><body package="I18n-Tools Tests">referenceUserMessage7	^#(#{UI.FullSpec}		#window: #(#{UI.WindowSpec}			#label: 'Unlabeled Canvas'			#bounds: #(#{Graphics.Rectangle} 740 405 940 605))		#component: #(#{UI.SpecCollection}			#collection: #(#(#{UI.LabelSpec}				#layout: #(#{Core.Point} 11 12)				#name: #test1				#label: #(#{Kernel.UserMessage}					#key: #test					#defaultString: 'test'					#catalogID: #i18n)) #(#{UI.LabelSpec}				#layout: #(#{Core.Point} 9 42)				#name: #test2				#label: #(#{Kernel.UserMessage}					#key: #test					#defaultString: 'test'					#catalogID: #i18n)))))</body></methods><methods><class-id>I18nTools.RewriterExamples</class-id> <category>example 5</category><body package="I18n-Tools Tests">example5	| a b |	a := 'erm'.	b := 0.	'test' , a , b.	'test' , a , b printString , 'test'</body><body package="I18n-Tools Tests">referenceUserMessage5_1	"the 1st 'test' was replaced by a UserMessage"	| a b |	a := 'erm'.	b := 0.	(#test &lt;&lt; #i18n &gt;&gt; 'test') asString , a , b.	'test' , a , b printString , 'test'</body><body package="I18n-Tools Tests">referenceUserMessage5_2	"the 2nd 'test' was replaced by a UserMessage"	| a b |	a := 'erm'.	b := 0.	'test' , a , b.	(#test &lt;&lt; #i18n &gt;&gt; 'test') asString , a , b printString , 'test'</body><body package="I18n-Tools Tests">referenceUserMessage5_3	"the 3rd 'test' was replaced by a UserMessage"	| a b |	a := 'erm'.	b := 0.	'test' , a , b.	'test' , a , b printString , (#test &lt;&lt; #i18n &gt;&gt; 'test') asString</body></methods><methods><class-id>I18nTools.RewriterExamples</class-id> <category>example 1</category><body package="I18n-Tools Tests">example1	'test' asString.	'test' asIs.	#test &gt;&gt; 'test' &lt;&lt; #i18n.</body><body package="I18n-Tools Tests">referenceNonI18n1	'test' asIs asString.	'test' asIs.	#test &gt;&gt; 'test' &lt;&lt; #i18n.</body><body package="I18n-Tools Tests">referenceUserMessage1	(#test &lt;&lt; #i18n &gt;&gt; 'test') asString asString.	'test' asIs.	#test &gt;&gt; 'test' &lt;&lt; #i18n</body></methods><methods><class-id>I18nTools.RewriterExamples</class-id> <category>example 3</category><body package="I18n-Tools Tests">example3	'test2' asString.	1 = 'test'.	'test' asIs.	#test &gt;&gt; 'test' &lt;&lt; #i18n.</body><body package="I18n-Tools Tests">referenceNonI18n3	'test2' asString.	1 = 'test' asIs.	'test' asIs.	#test &gt;&gt; 'test' &lt;&lt; #i18n.</body><body package="I18n-Tools Tests">referenceUserMessage3	'test2' asString.	1 = (#test &lt;&lt; #i18n &gt;&gt; 'test') asString.	'test' asIs.	#test &gt;&gt; 'test' &lt;&lt; #i18n</body></methods><methods><class-id>I18nTools.RewriterExamples class</class-id> <category>instance creation</category><body package="I18n-Tools Tests">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>I18nCore.ContextMenuTests</class-id> <category>tests</category><body package="I18n-Tools Tests">assertIn: exampleMethod at: cursorPoint hasActiveMenu: menuSelector	self		assertIn: exampleMethod		from: cursorPoint		to: cursorPoint		hasMenu: menuSelector		active: true</body><body package="I18n-Tools Tests">assertIn: exampleMethod at: cursorPoint hasInactiveMenu: menuSelector	self		assertIn: exampleMethod		from: cursorPoint		to: cursorPoint		hasMenu: menuSelector		active: false</body><body package="I18n-Tools Tests">assertIn: exampleMethod from: startPoint to: stopPoint hasActiveMenu: menuSelector	self		assertIn: exampleMethod		from: startPoint		to: stopPoint		hasMenu: menuSelector		active: true</body><body package="I18n-Tools Tests">assertIn: exampleMethod from: startPoint to: stopPoint hasInactiveMenu: menuSelector	self		assertIn: exampleMethod		from: startPoint		to: stopPoint		hasMenu: menuSelector		active: false</body><body package="I18n-Tools Tests">assertIn: exampleMethod from: startPoint to: endPoint hasMenu: menuSelector active: shouldBeActive	| menuItem |	self		withSourceCodeEditorInRefactoringBrowserOn: exampleMethod		selectionFrom: startPoint		to: endPoint		do: 			[:sce |			menuItem := sce perform: menuSelector.			self assert: menuItem isEnabled = shouldBeActive]</body><body package="I18n-Tools Tests">testMacroCreation	self yourself.	"place the cursor before the first 'test' string"	self		assertIn: #example1		at: 1 @ 2		hasInactiveMenu: #convertToMacro.	"place the cursor into the first 'test' string"	self		assertIn: #example1		at: 3 @ 2		hasInactiveMenu: #convertToMacro.	"place the cursor after the first 'test' string"	self		assertIn: #example1		at: 7 @ 2		hasInactiveMenu: #convertToMacro.	"place the cursor into the second 'test' string, which is a receiver of #asIs already"	self		assertIn: #example1		at: 4 @ 3		hasInactiveMenu: #convertToMacro.	"pace the cursor into the third 'test' string, which is the defaultString of a UserMessage"	self		assertIn: #example1		at: 12 @ 4		hasInactiveMenu: #convertToMacro</body><body package="I18n-Tools Tests">testMacroCreation2	self yourself.	"select most of the first line"	self		assertIn: #example4		from: 4 @ 3		to: 27 @ 3		hasActiveMenu: #convertToMacro.	"only select the first comma"	self		assertIn: #example4		from: 8 @ 3		to: 9 @ 3		hasActiveMenu: #convertToMacro.	"select most of first and second line. Effectively selecting two expressions"	self		assertIn: #example4		from: 4 @ 3		to: 21 @ 4		hasInactiveMenu: #convertToMacro</body><body package="I18n-Tools Tests">testNoI18n	"this test will place the cursor in a testMethod at certain character-coordinates and it will 	test if the desired menu-item is enabled or disabled."	self yourself.	"place the cursor before the first 'test' string"	self		assertIn: #example1		at: 1 @ 2		hasActiveMenu: #convertToNonI18nString.	"place the cursor into the first 'test' string"	self		assertIn: #example1		at: 3 @ 2		hasActiveMenu: #convertToNonI18nString.	"place the cursor after the first 'test' string"	self		assertIn: #example1		at: 7 @ 2		hasActiveMenu: #convertToNonI18nString.	"place the cursor into the second 'test' string, which is a receiver of #asIs already"	self		assertIn: #example1		at: 4 @ 3		hasInactiveMenu: #convertToNonI18nString.	"pace the cursor into the third 'test' string, which is the defaultString of a UserMessage"	self		assertIn: #example1		at: 12 @ 4		hasInactiveMenu: #convertToNonI18nString</body><body package="I18n-Tools Tests">testUserMessageCreation	self yourself.	"place the cursor before the first 'test' string"	self		assertIn: #example1		at: 1 @ 2		hasActiveMenu: #convertToUserMessage.	"place the cursor into the first 'test' string"	self		assertIn: #example1		at: 3 @ 2		hasActiveMenu: #convertToUserMessage.	"place the cursor after the first 'test' string"	self		assertIn: #example1		at: 7 @ 2		hasActiveMenu: #convertToUserMessage.	"place the cursor into the second 'test' string, which is a receiver of #asIs already"	self		assertIn: #example1		at: 4 @ 3		hasInactiveMenu: #convertToUserMessage.	"pace the cursor into the third 'test' string, which is the defaultString of a UserMessage"	self		assertIn: #example1		at: 12 @ 4		hasInactiveMenu: #convertToUserMessage</body><body package="I18n-Tools Tests">withSourceCodeEditorInRefactoringBrowserOn: exampleMethod selectionFrom: startPoint to: endPoint do: sceBlock	| tool browser sourceCodeEditor environment |	environment := SelectorEnvironment				onMethods: (Array with: (MethodDefinition class: I18nTools.RewriterExamples								selector: exampleMethod)).	browser := RefactoringBrowser onEnvironment: environment.	"opening the browser is necessary for two reasons:		1. the navigator is built and as a result will communicate its state properly to the code-model.			Without that the code-model wouldn't have the BrowserSourceCodeTool as tool.		2. the SourceCodeEditor will not be readOnly. SourceCodeEditor is readOnly based on its parent response to #isEnabled.			#isEnabled is propagated up to the Window, which only answers true if it is open.			As a result, the SourceCodeEditor has a #doItReceiver and can produe a Parse-Tree.			The parseTree is required by the tested menu items to figure out their enablement"	browser open.		[(browser navigator)		selectClass: I18nTools.RewriterExamples;		setSelector: exampleMethod.	tool := browser codeTool activeTools				detect: [:each | each class = BrowserSourceCodeTool]				ifNone: [nil].	self assert: tool notNil.	sourceCodeEditor := tool editorWidget.	self assert: sourceCodeEditor notNil.	sourceCodeEditor		inputCursor: startPoint;		anchorCursor: endPoint.	sceBlock value: sourceCodeEditor]			ensure: [browser closeAndUnschedule]</body></methods><methods><class-id>I18nCore.MacroBuilderTests</class-id> <category>initialize-release</category><body package="I18n-Tools Tests">checkSource: sourceBlock hasNumberOfParts: size 	"decompile both blocks because the transformation works on text, 	but blocks are easier to write than strings with smalltalk code. 	The macro code is generated smalltalk code that is not formatted, 	hence it is parsed and formated to match against the reference code"	| builder parts node |	node := self parseTreeOfBlock: sourceBlock.	builder := I18nTools.I18nRewriter new.	parts := builder partsOfConcatanation: node.	self assert: parts size = size.</body><body package="I18n-Tools Tests">checkSource: sourceBlock hasNumberOfParts: size andConvertsTo: referenceBlock	"decompile both blocks because the transformation works on text, 	but blocks are easier to write than strings with smalltalk code. 	The macro code is generated smalltalk code that is not formatted, 	hence it is parsed and formated to match against the reference code"	| macroNodes macroSource macro parts reference rewriter |	self checkSource: sourceBlock hasNumberOfParts: size.	reference := referenceBlock				ifNotNil: [(self parseTreeOfBlock: referenceBlock) formattedCode].	rewriter := I18nTools.I18nRewriter new.	parts := rewriter				partsOfConcatanation: (self parseTreeOfBlock: sourceBlock).	macro := rewriter convertPartsToMacro: parts.	self assert: macro isNil = reference isNil.	reference isNil ifTrue: [^self].	macroNodes := Refactory.Browser.RBParser parseExpression: macro.	macroSource := macroNodes formattedCode.	self assert: macroSource = reference</body><body package="I18n-Tools Tests">testMacroBuilderInvalid	self checkSource: [#this + #test] hasNumberOfParts: 0.	self checkSource: [^#this] hasNumberOfParts: 0.	self checkSource: [^#this , #test] hasNumberOfParts: 0.	self checkSource: [#this] hasNumberOfParts: 0.	self checkSource: [^'this' , 'this'] hasNumberOfParts: 0</body><body package="I18n-Tools Tests">testMacroBuilderLiteral	self		checkSource: ['this' , 'test']		hasNumberOfParts: 2		andConvertsTo: ['thistest'].	self		checkSource: [1 printString , 4 printString]		hasNumberOfParts: 2		andConvertsTo: ['&lt;1p&gt;&lt;2p&gt;' expandMacrosWith: 1 with: 4].	self		checkSource: [1 printString , 'test' , 4 printString]		hasNumberOfParts: 3		andConvertsTo: ['&lt;1p&gt;test&lt;2p&gt;' expandMacrosWith: 1 with: 4].	self		checkSource: [1 printString , 'test' , 'a ' , 'test' , 4 printString]		hasNumberOfParts: 5		andConvertsTo: ['&lt;1p&gt;testa test&lt;2p&gt;' expandMacrosWith: 1 with: 4].	self		checkSource: [#key , '&lt;&lt;' , 5 printString]		hasNumberOfParts: 3		andConvertsTo: ['key%&lt;%&lt;&lt;1p&gt;' expandMacrosWith: 5].	self		checkSource: ['&lt;%' , 5 printString , '%&gt;']		hasNumberOfParts: 3		andConvertsTo: ['%&lt;%%&lt;1p&gt;%%&gt;' expandMacrosWith: 5].	self		checkSource: [' test '' erm '' ' , 5 printString]		hasNumberOfParts: 2		andConvertsTo: [' test '' erm '' &lt;1p&gt;' expandMacrosWith: 5]</body><body package="I18n-Tools Tests">testMacroBuilderMany	| a b c d e f g |	a := b := c := d := e := f := g := 0.	self		checkSource: ['test' , a printString , b printString , c asString]		hasNumberOfParts: 4		andConvertsTo: 			['test&lt;1p&gt;&lt;2p&gt;&lt;3s&gt;'				expandMacrosWith: a				with: b				with: c asString].	self		checkSource: ['test' , a , b , c , d]		hasNumberOfParts: 5		andConvertsTo: 			['test&lt;1s&gt;&lt;2s&gt;&lt;3s&gt;&lt;4s&gt;'				expandMacrosWith: a				with: b				with: c				with: d].	self		checkSource: ['test' , a , b , c , d , e]		hasNumberOfParts: 6		andConvertsTo: 			['test&lt;1s&gt;&lt;2s&gt;&lt;3s&gt;&lt;4s&gt;&lt;5s&gt;'				expandMacrosWithArguments: ((OrderedCollection new)						add: a;						add: b;						add: c;						add: d;						add: e;						yourself)].	self		checkSource: 			['test' , a printString , b printString , c printString , d printString				, e printString , f printString				, g printString]		hasNumberOfParts: 8		andConvertsTo: 			['test&lt;1p&gt;&lt;2p&gt;&lt;3p&gt;&lt;4p&gt;&lt;5p&gt;&lt;6p&gt;&lt;7p&gt;'				expandMacrosWithArguments: ((OrderedCollection new)						add: a;						add: b;						add: c;						add: d;						add: e;						add: f;						add: g;						yourself)]</body><body package="I18n-Tools Tests">testMacroBuilderVariable	| t1 t2|	t1 := t2 := nil.	self		checkSource: ['this' , t1]		hasNumberOfParts: 2		andConvertsTo: ['this&lt;1s&gt;' expandMacrosWith: t1].	self		checkSource: [t1, t2]		hasNumberOfParts: 2		andConvertsTo: ['&lt;1s&gt;&lt;2s&gt;' expandMacrosWith: t1 with: t2].	self		checkSource: [t1 printString , 'test' , t2 printString]		hasNumberOfParts: 3		andConvertsTo: ['&lt;1p&gt;test&lt;2p&gt;' expandMacrosWith: t1 with: t2].</body><body package="I18n-Tools Tests">testMacroBuilderWhitespace	self		checkSource: ['this	test' , '	 	']		hasNumberOfParts: 2		andConvertsTo: ['this&lt;t&gt;test&lt;t&gt; &lt;t&gt;'].	self		checkSource: [1 printString ,'		' ,4 printString]		hasNumberOfParts: 3		andConvertsTo: ['&lt;1p&gt;&lt;n&gt;&lt;t&gt;&lt;t&gt;&lt;2p&gt;' expandMacrosWith: 1 with: 4].</body></methods><methods><class-id>I18nCore.MacroBuilderTests class</class-id> <category>instance creation</category><body package="I18n-Tools Tests">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>I18nTools.RewriterTests</class-id> <category>tests</category><body package="I18n-Tools Tests">testCodeToolExample2	self		convertStringNode: ['test']		toNonI18nStringAt: 1		inMethod: #example2		resultsIn: #referenceNonI18n_1.	self		convertStringNode: ['test']		toNonI18nStringAt: 2		inMethod: #example2		resultsIn: #referenceNonI18n_2</body><body package="I18n-Tools Tests">testCodeToolExample4	self		convertStringNode: [('test' , 'a') , 1 printString]		toMacroAt: 1		inMethod: #example4		resultsIn: #referenceMacro4_1.	self		convertStringNode: [('test' , 'a') , 1 printString]		toMacroAt: 2		inMethod: #example4		resultsIn: #referenceMacro4_2</body><body package="I18n-Tools Tests">testCodeToolExample5	self		convertStringNode: #example5		toUserMessage: ['test']		at: #test &lt;&lt; #i18n &gt;&gt; 'test'		in: 2		resultsIn: #referenceUserMessage5_2.	self		convertStringNode: #example5		toUserMessage: ['test']		at: #test &lt;&lt; #i18n &gt;&gt; 'test'		in: 1		resultsIn: #referenceUserMessage5_1.	self		convertStringNode: #example5		toUserMessage: ['test']		at: #test &lt;&lt; #i18n &gt;&gt; 'test'		in: 3		resultsIn: #referenceUserMessage5_3</body><body package="I18n-Tools Tests">testCodeToolExample6	self		convertStringNode: #example6		toUserMessage: ['test']		at: #test &lt;&lt; #i18n &gt;&gt; 'test'		in: 1		resultsIn: #referenceUserMessage6.</body><body package="I18n-Tools Tests">testCodeToolExample7	self		convertStringNode: #example7		toUserMessage: ['test']		at: #test &lt;&lt; #i18n &gt;&gt; 'test'		in: 1		resultsIn: #referenceUserMessage7.</body><body package="I18n-Tools Tests">testCodeToolExample8	self		convertStringNode: #example8		toUserMessage: ['test']		at: #test &lt;&lt; #i18n &gt;&gt; 'test'		in: 1		resultsIn: #referenceUserMessage8.</body><body package="I18n-Tools Tests">testCodeToolExample9	self		convertStringNode: #example9		toUserMessage: ['test &lt;1p&gt;']		at: #test1p &lt;&lt; #i18n &gt;&gt; 'test &lt;1p&gt;'		in: 1		resultsIn: #referenceUserMessage9.</body><body package="I18n-Tools Tests">testGeneralExample1	self convertAllStrings: 'test' toNonI18nIn: #example1 resultsIn: #referenceNonI18n1.	self		convertAllStrings: 'test'		toUserMessage: #test &lt;&lt; #i18n &gt;&gt; 'test'		in: #example1		resultsIn: #referenceUserMessage1</body><body package="I18n-Tools Tests">testGeneralExample2	self convertAllStrings: 'test' toNonI18nIn: #example2 resultsIn: #referenceNonI18n2.	self		convertAllStrings: 'test'		toUserMessage: #test &lt;&lt; #i18n &gt;&gt; 'test'		in: #example2		resultsIn: #referenceUserMessage2</body><body package="I18n-Tools Tests">testGeneralExample3	self convertAllStrings: 'test' toNonI18nIn: #example3 resultsIn: #referenceNonI18n3.	self		convertAllStrings: 'test'		toUserMessage: #test &lt;&lt; #i18n &gt;&gt; 'test'		in: #example3		resultsIn: #referenceUserMessage3</body><body package="I18n-Tools Tests">testGeneralExample6	self		convertAllStrings: 'test'		toNonI18nIn: #example6		resultsIn: #referenceAllNonI18n6.	self		convertAllStrings: 'test'		toUserMessage: #test &lt;&lt; #i18n &gt;&gt; 'test'		in: #example6		resultsIn: #referenceAllUserMessages6</body></methods><methods><class-id>I18nTools.RewriterTests</class-id> <category>accessing</category><body package="I18n-Tools Tests">checkIfChanges: compositeChange changeMethod: exampleSelector to: referenceSelector	| methodChanges addMethodChange referenceTree changedTree |	methodChanges := compositeChange changes.	self assert: methodChanges size = 1.	addMethodChange := methodChanges last.	self assert: addMethodChange selector = exampleSelector.	changedTree := addMethodChange parseTree.	referenceTree := Refactory.Browser.RBParser				parseMethod: (self exampleClass sourceCodeAt: referenceSelector).	self assert: changedTree body = referenceTree body.	self assert: changedTree tags = referenceTree tags</body><body package="I18n-Tools Tests">checkIfNode: aNode replacedAsMacroIn: exampleSelector resultsIn: referenceSelector	| rewriter |	rewriter := I18nRewriter new.	rewriter convertConcatanationToMacroInNode: aNode		inMethod: (self methodWithSelector: exampleSelector).	self		checkIfChanges: rewriter changes		changeMethod: exampleSelector		to: referenceSelector</body><body package="I18n-Tools Tests">checkIfStringNode: aNode convertedToNonI18nIn: exampleSelector resultsIn: referenceSelector	| rewriter |	rewriter := I18nRewriter new.	rewriter markStringNode: aNode		asNonI18nStringInMethod: (self methodWithSelector: exampleSelector).	self		checkIfChanges: rewriter changes		changeMethod: exampleSelector		to: referenceSelector</body><body package="I18n-Tools Tests">checkIfStringNode: aNode convertedToUserMessage: userMessage in: exampleSelector resultsIn: referenceSelector	| rewriter |	rewriter := I18nRewriter new.	rewriter		convertStringNode: aNode		toUserMessage: userMessage		inMethod: (self methodWithSelector: exampleSelector).	self		checkIfChanges: rewriter changes		changeMethod: exampleSelector		to: referenceSelector</body><body package="I18n-Tools Tests">convertAllStrings: string toNonI18nIn: exampleSelector resultsIn: referenceSelector	| rewriter |	rewriter := I18nRewriter new.	rewriter markString: string		asNonI18nInMethods: (self methodsWithSelector: exampleSelector).	self		checkIfChanges: rewriter changes		changeMethod: exampleSelector		to: referenceSelector</body><body package="I18n-Tools Tests">convertAllStrings: aString toUserMessage: aUserMessage in: exampleSelector resultsIn: referenceSelector	| rewriter |	rewriter := I18nRewriter new.	rewriter		convertString: aString		toUserMessage: aUserMessage		inMethods: (self methodsWithSelector: exampleSelector).	self		checkIfChanges: rewriter changes		changeMethod: exampleSelector		to: referenceSelector</body><body package="I18n-Tools Tests">convertStringNode: aBlock toMacroAt: anIndex inMethod: exampleSelector resultsIn: referenceSelector	| foundNodes |	foundNodes := self nodesInExampleMethod: exampleSelector matching: aBlock.	self		checkIfNode: (foundNodes at: anIndex)		replacedAsMacroIn: exampleSelector		resultsIn: referenceSelector</body><body package="I18n-Tools Tests">convertStringNode: aNodeBlock toNonI18nStringAt: index inMethod: exampleSelector resultsIn: referenceSelector	| foundNodes |	foundNodes := self nodesInExampleMethod: exampleSelector				matching: aNodeBlock.	self		checkIfStringNode: (foundNodes at: index)		convertedToNonI18nIn: exampleSelector		resultsIn: referenceSelector</body><body package="I18n-Tools Tests">convertStringNode: exampleSelector toUserMessage: aNodeBlock at: aUserMessage in: index resultsIn: referenceSelector	| foundNodes |	foundNodes := self nodesInExampleMethod: exampleSelector				matching: aNodeBlock.	self		checkIfStringNode: (foundNodes at: index)		convertedToUserMessage: aUserMessage		in: exampleSelector		resultsIn: referenceSelector</body><body package="I18n-Tools Tests">exampleClass	^RewriterExamples</body><body package="I18n-Tools Tests">methodWithSelector: exampleSelector	^MethodDefinition class: self exampleClass selector: exampleSelector</body><body package="I18n-Tools Tests">methodsWithSelector: exampleSelector	| methodDefinition |	methodDefinition := MethodDefinition class: self exampleClass selector: exampleSelector.	^Array with: methodDefinition</body><body package="I18n-Tools Tests">nodesInExampleMethod: exampleSelector matching: aBlock	| methodDefinition |	methodDefinition := self methodWithSelector: exampleSelector.	^self nodesMatching: (self parseTreeOfBlock: aBlock)		inTree: methodDefinition parseTree</body><body package="I18n-Tools Tests">nodesMatching: searchTree inTree: tree	| foundNodes |	foundNodes := OrderedCollection new.	(Refactory.Browser.ParseTreeSearcher new)		addRule: (Refactory.Browser.RBSearchRule searchForTree: searchTree					thenDo: 						[:aNode :answer |						foundNodes add: aNode.						nil]);		executeTree: tree.	^foundNodes</body></methods><methods><class-id>I18nCore.SourceFileCatalogWriterTests</class-id> <category>testFiles</category><body package="I18n-Core Tests">example2Pst	"example .pst file"	&lt;path: 'parcel/example2.pst'&gt;	^'&lt;?xml version="1.0"?&gt;&lt;st-source&gt;&lt;time-stamp&gt;From VisualWorksÂ®, 7.9.1 of October 18, 2012 on December 12, 2012 at 5:34:43 PM&lt;/time-stamp&gt;&lt;component-created&gt;&lt;name&gt;(none)&lt;/name&gt; &lt;type&gt;package&lt;/type&gt;&lt;/component-created&gt;&lt;!-- Package (none)* --&gt;&lt;component-property&gt;&lt;name&gt;(none)&lt;/name&gt; &lt;type&gt;package&lt;/type&gt;&lt;property&gt;comment&lt;/property&gt; &lt;value&gt;''This "package" is a special package that holds all code (classes, methods, shares, namespaces) that does not show up in a normal package. It is generated automatically. Removing it will remove the code contained in it, but the package itself never goes away. It can serve as a temporary "scratch space" to try quick throw away work before creating a normal package.''&lt;/value&gt;&lt;/component-property&gt;&lt;class&gt;&lt;name&gt;ExampleClass&lt;/name&gt;&lt;environment&gt;Smalltalk&lt;/environment&gt;&lt;super&gt;Core.Object&lt;/super&gt;&lt;private&gt;false&lt;/private&gt;&lt;indexed-type&gt;none&lt;/indexed-type&gt;&lt;inst-vars&gt;&lt;/inst-vars&gt;&lt;class-inst-vars&gt;&lt;/class-inst-vars&gt;&lt;imports&gt;&lt;/imports&gt;&lt;category&gt;&lt;/category&gt;&lt;attributes&gt;&lt;package&gt;(none)&lt;/package&gt;&lt;/attributes&gt;&lt;/class&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass&lt;/class-id&gt; &lt;category&gt;initialize-release&lt;/category&gt;&lt;body package="(none)" selector="example2"&gt;example2	"this is a message that is found in another file"	#example2 &amp;lt;&amp;lt; #catalog &amp;gt;&amp;gt; ''example2''&lt;/body&gt;&lt;/methods&gt;&lt;/st-source&gt;'</body><body package="I18n-Core Tests">exampleNonPst	"example .pst file"	&lt;path: 'parcel/example.psrt'&gt;	^'&lt;?xml version="1.0"?&gt;&lt;st-source&gt;&lt;time-stamp&gt;From VisualWorksÂ®, 7.9.1 of October 18, 2012 on December 12, 2012 at 5:34:43 PM&lt;/time-stamp&gt;&lt;component-created&gt;&lt;name&gt;(none)&lt;/name&gt; &lt;type&gt;package&lt;/type&gt;&lt;/component-created&gt;&lt;!-- Package (none)* --&gt;&lt;component-property&gt;&lt;name&gt;(none)&lt;/name&gt; &lt;type&gt;package&lt;/type&gt;&lt;property&gt;comment&lt;/property&gt; &lt;value&gt;''This "package" is a special package that holds all code (classes, methods, shares, namespaces) that does not show up in a normal package. It is generated automatically. Removing it will remove the code contained in it, but the package itself never goes away. It can serve as a temporary "scratch space" to try quick throw away work before creating a normal package.''&lt;/value&gt;&lt;/component-property&gt;&lt;class&gt;&lt;name&gt;ExampleClass&lt;/name&gt;&lt;environment&gt;Smalltalk&lt;/environment&gt;&lt;super&gt;Core.Object&lt;/super&gt;&lt;private&gt;false&lt;/private&gt;&lt;indexed-type&gt;none&lt;/indexed-type&gt;&lt;inst-vars&gt;&lt;/inst-vars&gt;&lt;class-inst-vars&gt;&lt;/class-inst-vars&gt;&lt;imports&gt;&lt;/imports&gt;&lt;category&gt;&lt;/category&gt;&lt;attributes&gt;&lt;package&gt;(none)&lt;/package&gt;&lt;/attributes&gt;&lt;/class&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass&lt;/class-id&gt; &lt;category&gt;initialize-release&lt;/category&gt;&lt;body package="(none)" selector="invalidFile"&gt;invalidFile	"This key should not be found because it is used in a file that should be ignored"	#invalidFile &amp;lt;&amp;lt; #catalog &amp;gt;&amp;gt; ''invalid file''&lt;/body&gt;&lt;/methods&gt;&lt;/st-source&gt;'</body><body package="I18n-Core Tests">parcelExample	"example .pst file"	&lt;path: 'parcel/example.pst'&gt;	^'&lt;?xml version="1.0"?&gt;&lt;st-source&gt;&lt;time-stamp&gt;From VisualWorksÂ®, 7.9.1 of October 18, 2012 on December 12, 2012 at 5:34:43 PM&lt;/time-stamp&gt;&lt;component-created&gt;&lt;name&gt;(none)&lt;/name&gt; &lt;type&gt;package&lt;/type&gt;&lt;/component-created&gt;&lt;!-- Package (none)* --&gt;&lt;component-property&gt;&lt;name&gt;(none)&lt;/name&gt; &lt;type&gt;package&lt;/type&gt;&lt;property&gt;comment&lt;/property&gt; &lt;value&gt;''This "package" is a special package that holds all code (classes, methods, shares, namespaces) that does not show up in a normal package. It is generated automatically. Removing it will remove the code contained in it, but the package itself never goes away. It can serve as a temporary "scratch space" to try quick throw away work before creating a normal package.''&lt;/value&gt;&lt;/component-property&gt;&lt;class&gt;&lt;name&gt;ExampleClass&lt;/name&gt;&lt;environment&gt;Smalltalk&lt;/environment&gt;&lt;super&gt;Core.Object&lt;/super&gt;&lt;private&gt;false&lt;/private&gt;&lt;indexed-type&gt;none&lt;/indexed-type&gt;&lt;inst-vars&gt;&lt;/inst-vars&gt;&lt;class-inst-vars&gt;&lt;/class-inst-vars&gt;&lt;imports&gt;&lt;/imports&gt;&lt;category&gt;&lt;/category&gt;&lt;attributes&gt;&lt;package&gt;(none)&lt;/package&gt;&lt;/attributes&gt;&lt;/class&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass class&lt;/class-id&gt; &lt;category&gt;instance creation&lt;/category&gt;&lt;body package="(none)" selector="new"&gt;new	"Answer a newly created and initialized instance."	^super new initialize&lt;/body&gt;&lt;/methods&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass&lt;/class-id&gt; &lt;category&gt;initialize-release&lt;/category&gt;&lt;body package="(none)" selector="key2"&gt;key2	"it''s absolutely valid to have multiple keys that translate to the same string.	In english they may have the same word, but not the same meaning. 	In other languages the same english word can have a different word for the different meaning.	Simple and stupid example is ''catalog''. The verb means something else than the noun, yet it''s the same word.	A button labeled ''catalog'' should have a different key than a label ''catalog''. "	#key2 &amp;lt;&amp;lt; #catalog &amp;gt;&amp;gt; ''message''&lt;/body&gt;&lt;body package="(none)" selector="noCatalog"&gt;noCatalog	#noCatalogKey &amp;gt;&amp;gt; ''noCatalogKey''&lt;/body&gt;&lt;body package="(none)" selector="key1Catalog2"&gt;key1Catalog2	#key1 &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''key1''&lt;/body&gt;&lt;body package="(none)" selector="illegalKey2"&gt;illegalKey2	#illegalKey:key: &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''illegalKeyKey''&lt;/body&gt;&lt;body package="(none)" selector="initialize"&gt;initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	#key1 &amp;lt;&amp;lt; #catalog &amp;gt;&amp;gt; ''message''.	^self&lt;/body&gt;&lt;body package="(none)" selector="notTooLongKey"&gt;notTooLongKey	#key1234567890abcdefghij1234567890abcdefghij1234567890 &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''not too long key''&lt;/body&gt;&lt;body package="(none)" selector="tooLongKey"&gt;tooLongKey	#longKey1234567890abcdefghij1234567890abcdefghij1234567890 &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''too long key''&lt;/body&gt;&lt;body package="(none)" selector="illegalKey3"&gt;illegalKey3	#~~ &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''tildetilde''&lt;/body&gt;&lt;body package="(none)" selector="illegalKey"&gt;illegalKey	#illegalKey: &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''illegalKey''&lt;/body&gt;&lt;body package="(none)" selector="allIllegalKeys"&gt;allIllegalKeys	#illegalKey: &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''illegalKey''.	#~~ &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''tildetilde''.	#longKey1234567890abcdefghij1234567890abcdefghij1234567890 &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''too long key''.	#illegalKey:key: &amp;lt;&amp;lt; #catalog2 &amp;gt;&amp;gt; ''illegalKeyKey''.	&lt;/body&gt;&lt;body package="(none)" selector="key1Again"&gt;key1Again	"use the same key and message again"	#key1 &amp;lt;&amp;lt; #catalog &amp;gt;&amp;gt; ''message''&lt;/body&gt;&lt;body package="(none)" selector="duplicateKey"&gt;duplicateKey		#key1 &amp;lt;&amp;lt; #catalog3 &amp;gt;&amp;gt; ''m1''.	#key1 &amp;lt;&amp;lt; #catalog3 &amp;gt;&amp;gt; ''m2''.&lt;/body&gt;&lt;body package="(none)" selector="missingDisplayString"&gt;missingDisplayString		#key1 &amp;lt;&amp;lt; #catalog4.	#key2 &amp;lt;&amp;lt; #catalog4.&lt;/body&gt;&lt;/methods&gt;&lt;/st-source&gt;'</body><body package="I18n-Core Tests">parcelExampleDeep	"deep path example .pst file"	&lt;path: 'this/is/a/deep/path/deep.pst'&gt;	^'&lt;?xml version="1.0"?&gt;&lt;st-source&gt;&lt;time-stamp&gt;From VisualWorksÂ®, 7.9.1 of October 18, 2012 on December 12, 2012 at 5:34:43 PM&lt;/time-stamp&gt;&lt;class&gt;&lt;name&gt;ExampleClass&lt;/name&gt;&lt;environment&gt;Smalltalk&lt;/environment&gt;&lt;super&gt;Core.Object&lt;/super&gt;&lt;private&gt;false&lt;/private&gt;&lt;indexed-type&gt;none&lt;/indexed-type&gt;&lt;inst-vars&gt;&lt;/inst-vars&gt;&lt;class-inst-vars&gt;&lt;/class-inst-vars&gt;&lt;imports&gt;&lt;/imports&gt;&lt;category&gt;&lt;/category&gt;&lt;attributes&gt;&lt;package&gt;(none)&lt;/package&gt;&lt;/attributes&gt;&lt;/class&gt;&lt;methods&gt;&lt;class-id&gt;ExampleClass&lt;/class-id&gt; &lt;category&gt;initialize-release&lt;/category&gt;&lt;body package="(none)" selector="deepKey"&gt;deepKey	"this key should be found if the pst in a deep folder is found"	#deepKey &amp;lt;&amp;lt; #catalog &amp;gt;&amp;gt; ''deep key''&lt;/body&gt;&lt;/methods&gt;&lt;/st-source&gt;'</body><body package="I18n-Core Tests">visualSou	"just the first some definitions in the visual.sou. Doesn't contain any UserMessages"	&lt;path: 'image/visual.sou'&gt;	^'&lt;?xml version="1.0"?&gt;&lt;st-source&gt;&lt;copyright&gt;Copyright Â© 1999-2012 Cincom Systems, Inc.  All Rights Reserved.This product contains copyrighted third-party software.Portions Â© 1999 AppNet Systems, Inc.Portions Â© 1995-2003 Crafted Smalltalk.Portions Â© 1999 IC&amp;amp;C GmbH Software Foundations.Portions Â© 1998-2002 The Refactory, Inc.&lt;/copyright&gt;&lt;time-stamp&gt;From VisualWorksÂ®, 7.9.1 of October 18, 2012 on October 18, 2012 at 7:53:22 AM&lt;/time-stamp&gt;&lt;name-space&gt;&lt;name&gt;Root&lt;/name&gt;&lt;environment&gt;&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;imports&gt;&lt;/imports&gt;&lt;category&gt;System-Name Spaces&lt;/category&gt;&lt;attributes&gt;&lt;package&gt;System-Name Spaces&lt;/package&gt;&lt;/attributes&gt;&lt;/name-space&gt;&lt;shared-variable&gt;&lt;name&gt;Root&lt;/name&gt;&lt;environment&gt;Root&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;System-Name Spaces&lt;/category&gt;&lt;attributes&gt;&lt;package&gt;System-Name Spaces&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;new-page/&gt;&lt;name-space&gt;&lt;name&gt;Smalltalk&lt;/name&gt;&lt;environment&gt;Root&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;imports&gt;			Core.*			Kernel.*			OS.*			External.*			Graphics.*			UI.*			Tools.*			&lt;/imports&gt;&lt;category&gt;System-Name Spaces&lt;/category&gt;&lt;attributes&gt;&lt;package&gt;System-Name Spaces&lt;/package&gt;&lt;/attributes&gt;&lt;/name-space&gt;&lt;shared-variable&gt;&lt;name&gt;Root&lt;/name&gt;&lt;environment&gt;Smalltalk&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;System-Name Spaces&lt;/category&gt;&lt;initializer&gt; "This static allows Smalltalk to refer to Root within the Smalltalk name-space.				Root cannot be redefined, but Root definition will show its current definition."				 Smalltalk environment &lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;System-Name Spaces&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;shared-variable&gt;&lt;name&gt;Smalltalk&lt;/name&gt;&lt;environment&gt;Smalltalk&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;System-Name Spaces&lt;/category&gt;&lt;initializer&gt; "This static allows Smalltalk to refer to itself within the Smalltalk name-space.				The definition of the Smalltalk name-space is in the Root name-space."				Root.Smalltalk &lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;System-Name Spaces&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;new-page/&gt;&lt;name-space&gt;&lt;name&gt;Core&lt;/name&gt;&lt;environment&gt;Smalltalk&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;imports&gt;			private Smalltalk.*			&lt;/imports&gt;&lt;category&gt;System-Name Spaces&lt;/category&gt;&lt;attributes&gt;&lt;package&gt;System-Name Spaces&lt;/package&gt;&lt;/attributes&gt;&lt;/name-space&gt;&lt;shared-variable&gt;&lt;name&gt;Processor&lt;/name&gt;&lt;environment&gt;Core&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;false&lt;/constant&gt;&lt;category&gt;Kernel-Processes&lt;/category&gt;&lt;attributes&gt;&lt;package&gt;System-Name Spaces&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;shared-variable&gt;&lt;name&gt;Transcript&lt;/name&gt;&lt;environment&gt;Core&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;false&lt;/constant&gt;&lt;category&gt;Interface-Text&lt;/category&gt;&lt;attributes&gt;&lt;package&gt;System-Name Spaces&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;new-page/&gt;&lt;name-space&gt;&lt;name&gt;CharacterEncoderPool&lt;/name&gt;&lt;environment&gt;Core&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;imports&gt;			private Smalltalk.*			&lt;/imports&gt;&lt;category&gt;Collections-Streams&lt;/category&gt;&lt;attributes&gt;&lt;package&gt;Collections-Streams&lt;/package&gt;&lt;/attributes&gt;&lt;/name-space&gt;&lt;comment&gt;&lt;name-space-id&gt;Core.CharacterEncoderPool&lt;/name-space-id&gt;&lt;body&gt;This is a dictionary which maps from our reference encoding names (symbols) to character encoder objects that implement those encodings. This only makes sense for direct byte encodings, so multi-byte encodings like UTF-8 will not be found here.&lt;/body&gt;&lt;/comment&gt;&lt;shared-variable&gt;&lt;name&gt;HPRoman8&lt;/name&gt;&lt;environment&gt;Core.CharacterEncoderPool&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;Other&lt;/category&gt;&lt;initializer&gt;" HPRoman8 "			| encoder map code |			encoder := ByteCharacterEncoder fromArray: (0 to: 255).			map := #( 16r00A0 16r00C0 16r00C2 16r00C8 16r00CA 16r00CB 16r00CE 16r00CF 				16r00B4 16r02CB 16r02C6 16r00A8 16r02DC 16r00D9 16r00DB 16r20A4 				16r00AF 16r00DD 16r00FD 16r00B0 16r00C7 16r00E7 16r00D1 16r00F1 				16r00A1 16r00BF 16r00A4 16r00A3 16r00A5 16r00A7 16r0192 16r00A2 				16r00E2 16r00EA 16r00F4 16r00FB 16r00E1 16r00E9 16r00F3 16r00FA 				16r00E0 16r00E8 16r00F2 16r00F9 16r00E4 16r00EB 16r00F6 16r00FC 				16r00C5 16r00EE 16r00D8 16r00C6 16r00E5 16r00ED 16r00F8 16r00E6 				16r00C4 16r00EC 16r00D6 16r00DC 16r00C9 16r00EF 16r00DF 16r00D4 				16r00C1 16r00C3 16r00E3 16r00D0 16r00F0 16r00CD 16r00CC 16r00D3 				16r00D2 16r00D5 16r00F5 16r0160 16r0161 16r00DA 16r0178 16r00FF 				16r00DE 16r00FE 16r00B7 16r00B5 16r00B6 16r00BE 16r2014 16r00BC 				16r00BD 16r00AA 16r00BA 16r00AB 16r25A0 16r00BB 16r00B1 nil ).			160 to: 255 do: [:i |				code := map at: i + 1 - 160.				code == nil					ifTrue: [encoder encode: 65535 asCharacter as: i]					ifFalse: [encoder encode: code asCharacter as: i]].			encoder name: #''hp-roman8''.			encoder streamEncodingType: #''HP-Roman8''.			encoder alternateNames: #(#''HP_Roman8'' #Roman8).			encoder&lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;Collections-Streams&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;shared-variable&gt;&lt;name&gt;ISO_8859_1&lt;/name&gt;&lt;environment&gt;Core.CharacterEncoderPool&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;ISO&lt;/category&gt;&lt;initializer&gt;| encoder |			encoder := ByteCharacterEncoder fromArray: (0 to: 255).			encoder name: #''iso8859-1''.			encoder streamEncodingType: #''ISO-8859-1''.			encoder alternateNames: #(#ISO8859_1 #''ISO8859-1'').			encoder definitionClass: ISO8859L1String.			encoder&lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;Collections-Streams&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;shared-variable&gt;&lt;name&gt;ISO_8859_10&lt;/name&gt;&lt;environment&gt;Core.CharacterEncoderPool&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;ISO&lt;/category&gt;&lt;initializer&gt;" ISO/IEC 8859-10:1998 to Unicode "			| encoder map code |			encoder := ByteCharacterEncoder fromArray: (0 to: 255).			map := #( 16r00A0 16r0104 16r0112 16r0122 16r012A 16r0128 16r0136 16r00A7 				16r013B 16r0110 16r0160 16r0166 16r017D 16r00AD 16r016A 16r014A 				16r00B0 16r0105 16r0113 16r0123 16r012B 16r0129 16r0137 16r00B7 				16r013C 16r0111 16r0161 16r0167 16r017E 16r2015 16r016B 16r014B 				16r0100 16r00C1 16r00C2 16r00C3 16r00C4 16r00C5 16r00C6 16r012E 				16r010C 16r00C9 16r0118 16r00CB 16r0116 16r00CD 16r00CE 16r00CF 				16r00D0 16r0145 16r014C 16r00D3 16r00D4 16r00D5 16r00D6 16r0168 				16r00D8 16r0172 16r00DA 16r00DB 16r00DC 16r00DD 16r00DE 16r00DF 				16r0101 16r00E1 16r00E2 16r00E3 16r00E4 16r00E5 16r00E6 16r012F 				16r010D 16r00E9 16r0119 16r00EB 16r0117 16r00ED 16r00EE 16r00EF 				16r00F0 16r0146 16r014D 16r00F3 16r00F4 16r00F5 16r00F6 16r0169 				16r00F8 16r0173 16r00FA 16r00FB 16r00FC 16r00FD 16r00FE 16r0138 ).			160 to: 255 do: [:i |				code := map at: i + 1 - 160.				code == nil					ifTrue: [encoder encode: 65535 asCharacter as: i]					ifFalse: [encoder encode: code asCharacter as: i]].			encoder name: #''iso8859-10''.			encoder streamEncodingType: #''ISO-8859-10''.			encoder alternateNames: #(#ISO8859_10 #''ISO8859-10'').			encoder&lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;Collections-Streams&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;shared-variable&gt;&lt;name&gt;ISO_8859_13&lt;/name&gt;&lt;environment&gt;Core.CharacterEncoderPool&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;ISO&lt;/category&gt;&lt;initializer&gt;" ISO/IEC 8859-13:1998  to Unicode "			| encoder map code |			encoder := ByteCharacterEncoder fromArray: (0 to: 255).			map := #( 16r00A0 16r201D 16r00A2 16r00A3 16r00A4 16r201E 16r00A6 16r00A7 				16r00D8 16r00A9 16r0156 16r00AB 16r00AC 16r00AD 16r00AE 16r00C6 				16r00B0 16r00B1 16r00B2 16r00B3 16r201C 16r00B5 16r00B6 16r00B7 				16r00F8 16r00B9 16r0157 16r00BB 16r00BC 16r00BD 16r00BE 16r00E6 				16r0104 16r012E 16r0100 16r0106 16r00C4 16r00C5 16r0118 16r0112 				16r010C 16r00C9 16r0179 16r0116 16r0122 16r0136 16r012A 16r013B 				16r0160 16r0143 16r0145 16r00D3 16r014C 16r00D5 16r00D6 16r00D7 				16r0172 16r0141 16r015A 16r016A 16r00DC 16r017B 16r017D 16r00DF 				16r0105 16r012F 16r0101 16r0107 16r00E4 16r00E5 16r0119 16r0113 				16r010D 16r00E9 16r017A 16r0117 16r0123 16r0137 16r012B 16r013C 				16r0161 16r0144 16r0146 16r00F3 16r014D 16r00F5 16r00F6 16r00F7 				16r0173 16r0142 16r015B 16r016B 16r00FC 16r017C 16r017E 16r2019 ).			160 to: 255 do: [:i |				code := map at: i + 1 - 160.				code == nil					ifTrue: [encoder encode: 65535 asCharacter as: i]					ifFalse: [encoder encode: code asCharacter as: i]].			encoder name: #''iso8859-13''.			encoder streamEncodingType: #''ISO-8859-13''.			encoder alternateNames: #(#ISO8859_13 #''ISO8859-13'').			encoder&lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;Collections-Streams&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;shared-variable&gt;&lt;name&gt;ISO_8859_14&lt;/name&gt;&lt;environment&gt;Core.CharacterEncoderPool&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;ISO&lt;/category&gt;&lt;initializer&gt;" ISO/IEC 8859-14:1998 to Unicode "			| encoder map code |			encoder := ByteCharacterEncoder fromArray: (0 to: 255).			map := #( 16r00A0 16r1E02 16r1E03 16r00A3 16r010A 16r010B 16r1E0A 16r00A7 				16r1E80 16r00A9 16r1E82 16r1E0B 16r1EF2 16r00AD 16r00AE 16r0178 				16r1E1E 16r1E1F 16r0120 16r0121 16r1E40 16r1E41 16r00B6 16r1E56 				16r1E81 16r1E57 16r1E83 16r1E60 16r1EF3 16r1E84 16r1E85 16r1E61 				16r00C0 16r00C1 16r00C2 16r00C3 16r00C4 16r00C5 16r00C6 16r00C7 				16r00C8 16r00C9 16r00CA 16r00CB 16r00CC 16r00CD 16r00CE 16r00CF 				16r0174 16r00D1 16r00D2 16r00D3 16r00D4 16r00D5 16r00D6 16r1E6A 				16r00D8 16r00D9 16r00DA 16r00DB 16r00DC 16r00DD 16r0176 16r00DF 				16r00E0 16r00E1 16r00E2 16r00E3 16r00E4 16r00E5 16r00E6 16r00E7 				16r00E8 16r00E9 16r00EA 16r00EB 16r00EC 16r00ED 16r00EE 16r00EF 				16r0175 16r00F1 16r00F2 16r00F3 16r00F4 16r00F5 16r00F6 16r1E6B 				16r00F8 16r00F9 16r00FA 16r00FB 16r00FC 16r00FD 16r0177 16r00FF ).			160 to: 255 do: [:i |				code := map at: i + 1 - 160.				code == nil					ifTrue: [encoder encode: 65535 asCharacter as: i]					ifFalse: [encoder encode: code asCharacter as: i]].			encoder name: #''iso8859-14''.			encoder streamEncodingType: #''ISO-8859-14''.			encoder alternateNames: #(#ISO8859_14 #''ISO8859-14'').			encoder&lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;Collections-Streams&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;shared-variable&gt;&lt;name&gt;ISO_8859_15&lt;/name&gt;&lt;environment&gt;Core.CharacterEncoderPool&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;ISO&lt;/category&gt;&lt;initializer&gt;" ISO/IEC 8859-15:1999 to Unicode "			| encoder map code |			encoder := ByteCharacterEncoder fromArray: (0 to: 255).			map := #( 16r00A0 16r00A1 16r00A2 16r00A3 16r20AC 16r00A5 16r0160 16r00A7 				16r0161 16r00A9 16r00AA 16r00AB 16r00AC 16r00AD 16r00AE 16r00AF 				16r00B0 16r00B1 16r00B2 16r00B3 16r017D 16r00B5 16r00B6 16r00B7 				16r017E 16r00B9 16r00BA 16r00BB 16r0152 16r0153 16r0178 16r00BF 				16r00C0 16r00C1 16r00C2 16r00C3 16r00C4 16r00C5 16r00C6 16r00C7 				16r00C8 16r00C9 16r00CA 16r00CB 16r00CC 16r00CD 16r00CE 16r00CF 				16r00D0 16r00D1 16r00D2 16r00D3 16r00D4 16r00D5 16r00D6 16r00D7 				16r00D8 16r00D9 16r00DA 16r00DB 16r00DC 16r00DD 16r00DE 16r00DF 				16r00E0 16r00E1 16r00E2 16r00E3 16r00E4 16r00E5 16r00E6 16r00E7 				16r00E8 16r00E9 16r00EA 16r00EB 16r00EC 16r00ED 16r00EE 16r00EF 				16r00F0 16r00F1 16r00F2 16r00F3 16r00F4 16r00F5 16r00F6 16r00F7 				16r00F8 16r00F9 16r00FA 16r00FB 16r00FC 16r00FD 16r00FE 16r00FF ).			160 to: 255 do: [:i |				code := map at: i + 1 - 160.				code == nil					ifTrue: [encoder encode: 65535 asCharacter as: i]					ifFalse: [encoder encode: code asCharacter as: i]].			encoder name: #''iso8859-15''.			encoder streamEncodingType: #''ISO-8859-15''.			encoder alternateNames: #(#ISO8859_15 #''ISO8859-15'').			encoder&lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;Collections-Streams&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;shared-variable&gt;&lt;name&gt;ISO_8859_2&lt;/name&gt;&lt;environment&gt;Core.CharacterEncoderPool&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;ISO&lt;/category&gt;&lt;initializer&gt;" ISO 8859-2:1999 to Unicode "			| encoder map code |			encoder := ByteCharacterEncoder fromArray: (0 to: 255).			map := #( 16r00A0 16r0104 16r02D8 16r0141 16r00A4 16r013D 16r015A 16r00A7 				16r00A8 16r0160 16r015E 16r0164 16r0179 16r00AD 16r017D 16r017B 				16r00B0 16r0105 16r02DB 16r0142 16r00B4 16r013E 16r015B 16r02C7 				16r00B8 16r0161 16r015F 16r0165 16r017A 16r02DD 16r017E 16r017C 				16r0154 16r00C1 16r00C2 16r0102 16r00C4 16r0139 16r0106 16r00C7 				16r010C 16r00C9 16r0118 16r00CB 16r011A 16r00CD 16r00CE 16r010E 				16r0110 16r0143 16r0147 16r00D3 16r00D4 16r0150 16r00D6 16r00D7 				16r0158 16r016E 16r00DA 16r0170 16r00DC 16r00DD 16r0162 16r00DF 				16r0155 16r00E1 16r00E2 16r0103 16r00E4 16r013A 16r0107 16r00E7 				16r010D 16r00E9 16r0119 16r00EB 16r011B 16r00ED 16r00EE 16r010F 				16r0111 16r0144 16r0148 16r00F3 16r00F4 16r0151 16r00F6 16r00F7 				16r0159 16r016F 16r00FA 16r0171 16r00FC 16r00FD 16r0163 16r02D9 ).			160 to: 255 do: [:i |				code := map at: i + 1 - 160.				code == nil					ifTrue: [encoder encode: 65535 asCharacter as: i]					ifFalse: [encoder encode: code asCharacter as: i]].			encoder name: #''iso8859-2''.			encoder streamEncodingType: #''ISO-8859-2''.			encoder alternateNames: #(#ISO8859_2 #''ISO8859-2'').			encoder&lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;Collections-Streams&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;shared-variable&gt;&lt;name&gt;ISO_8859_3&lt;/name&gt;&lt;environment&gt;Core.CharacterEncoderPool&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;ISO&lt;/category&gt;&lt;initializer&gt;" ISO/IEC 8859-3:1999 to Unicode "			| encoder map code |			encoder := ByteCharacterEncoder fromArray: (0 to: 255).			map := #( 16r00A0 16r0126 16r02D8 16r00A3 16r00A4 nil 16r0124 16r00A7 				16r00A8 16r0130 16r015E 16r011E 16r0134 16r00AD nil 16r017B 				16r00B0 16r0127 16r00B2 16r00B3 16r00B4 16r00B5 16r0125 16r00B7 				16r00B8 16r0131 16r015F 16r011F 16r0135 16r00BD nil 16r017C 				16r00C0 16r00C1 16r00C2 nil 16r00C4 16r010A 16r0108 16r00C7 				16r00C8 16r00C9 16r00CA 16r00CB 16r00CC 16r00CD 16r00CE 16r00CF 				nil 16r00D1 16r00D2 16r00D3 16r00D4 16r0120 16r00D6 16r00D7 				16r011C 16r00D9 16r00DA 16r00DB 16r00DC 16r016C 16r015C 16r00DF 				16r00E0 16r00E1 16r00E2 nil 16r00E4 16r010B 16r0109 16r00E7 				16r00E8 16r00E9 16r00EA 16r00EB 16r00EC 16r00ED 16r00EE 16r00EF 				nil 16r00F1 16r00F2 16r00F3 16r00F4 16r0121 16r00F6 16r00F7 				16r011D 16r00F9 16r00FA 16r00FB 16r00FC 16r016D 16r015D 16r02D9 ).			160 to: 255 do: [:i |				code := map at: i + 1 - 160.				code == nil					ifTrue: [encoder encode: 65535 asCharacter as: i]					ifFalse: [encoder encode: code asCharacter as: i]].			encoder name: #''iso8859-3''.			encoder streamEncodingType: #''ISO-8859-3''.			encoder alternateNames: #(#ISO8859_3 #''ISO8859-3'').			encoder&lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;Collections-Streams&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;shared-variable&gt;&lt;name&gt;ISO_8859_4&lt;/name&gt;&lt;environment&gt;Core.CharacterEncoderPool&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;ISO&lt;/category&gt;&lt;initializer&gt;" ISO/IEC 8859-4:1998 to Unicode "			| encoder map code |			encoder := ByteCharacterEncoder fromArray: (0 to: 255).			map := #( 16r00A0 16r0104 16r0138 16r0156 16r00A4 16r0128 16r013B 16r00A7 				16r00A8 16r0160 16r0112 16r0122 16r0166 16r00AD 16r017D 16r00AF 				16r00B0 16r0105 16r02DB 16r0157 16r00B4 16r0129 16r013C 16r02C7 				16r00B8 16r0161 16r0113 16r0123 16r0167 16r014A 16r017E 16r014B 				16r0100 16r00C1 16r00C2 16r00C3 16r00C4 16r00C5 16r00C6 16r012E 				16r010C 16r00C9 16r0118 16r00CB 16r0116 16r00CD 16r00CE 16r012A 				16r0110 16r0145 16r014C 16r0136 16r00D4 16r00D5 16r00D6 16r00D7 				16r00D8 16r0172 16r00DA 16r00DB 16r00DC 16r0168 16r016A 16r00DF 				16r0101 16r00E1 16r00E2 16r00E3 16r00E4 16r00E5 16r00E6 16r012F 				16r010D 16r00E9 16r0119 16r00EB 16r0117 16r00ED 16r00EE 16r012B 				16r0111 16r0146 16r014D 16r0137 16r00F4 16r00F5 16r00F6 16r00F7 				16r00F8 16r0173 16r00FA 16r00FB 16r00FC 16r0169 16r016B 16r02D9 ).			160 to: 255 do: [:i |				code := map at: i + 1 - 160.				code == nil					ifTrue: [encoder encode: 65535 asCharacter as: i]					ifFalse: [encoder encode: code asCharacter as: i]].			encoder name: #''iso8859-4''.			encoder streamEncodingType: #''ISO-8859-4''.			encoder alternateNames: #(#ISO8859_4 #''ISO8859-4'').			encoder&lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;Collections-Streams&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;&lt;shared-variable&gt;&lt;name&gt;ISO_8859_5&lt;/name&gt;&lt;environment&gt;Core.CharacterEncoderPool&lt;/environment&gt;&lt;private&gt;false&lt;/private&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;category&gt;ISO&lt;/category&gt;&lt;initializer&gt;" ISO 8859-5:1999 to Unicode "			| encoder map code |			encoder := ByteCharacterEncoder fromArray: (0 to: 255).			map := #( 16r00A0 16r0401 16r0402 16r0403 16r0404 16r0405 16r0406 16r0407 				16r0408 16r0409 16r040A 16r040B 16r040C 16r00AD 16r040E 16r040F 				16r0410 16r0411 16r0412 16r0413 16r0414 16r0415 16r0416 16r0417 				16r0418 16r0419 16r041A 16r041B 16r041C 16r041D 16r041E 16r041F 				16r0420 16r0421 16r0422 16r0423 16r0424 16r0425 16r0426 16r0427 				16r0428 16r0429 16r042A 16r042B 16r042C 16r042D 16r042E 16r042F 				16r0430 16r0431 16r0432 16r0433 16r0434 16r0435 16r0436 16r0437 				16r0438 16r0439 16r043A 16r043B 16r043C 16r043D 16r043E 16r043F 				16r0440 16r0441 16r0442 16r0443 16r0444 16r0445 16r0446 16r0447 				16r0448 16r0449 16r044A 16r044B 16r044C 16r044D 16r044E 16r044F 				16r2116 16r0451 16r0452 16r0453 16r0454 16r0455 16r0456 16r0457 				16r0458 16r0459 16r045A 16r045B 16r045C 16r00A7 16r045E 16r045F ).			160 to: 255 do: [:i |				code := map at: i + 1 - 160.				code == nil					ifTrue: [encoder encode: 65535 asCharacter as: i]					ifFalse: [encoder encode: code asCharacter as: i]].			encoder name: #''iso8859-5''.			encoder streamEncodingType: #''ISO-8859-5''.			encoder alternateNames: #(#ISO8859_5 #''ISO8859-5'').			encoder&lt;/initializer&gt;&lt;attributes&gt;&lt;package&gt;Collections-Streams&lt;/package&gt;&lt;/attributes&gt;&lt;/shared-variable&gt;'</body></methods><methods><class-id>I18nCore.SourceFileCatalogWriterTests class</class-id> <category>instance creation</category><body package="I18n-Core Tests">pathPragmas	&lt;pragmas: #instance&gt;	^#(#path:)</body></methods><methods><class-id>I18nCore.UserMessageExample</class-id> <category>examples</category><body package="I18n-Core Tests">examplePragmaString	&lt;testPragma: 'string'&gt;	20 timesRepeat: 			[1 = 3 ifTrue: [1 + 5].			^Array new]</body><body package="I18n-Core Tests">examplePragmaStringIgnore	&lt;ignoreString: 'string'&gt;	20 timesRepeat: 			[1 = 3 ifTrue: [1 + 5].			^Array new]</body><body package="I18n-Core Tests">examplePragmaUserMessage	&lt;testPragma: #( #key #catalog 'message')&gt;	20 timesRepeat: 			[1 = 3 ifTrue: [1 + 5].			^Array new]</body><body package="I18n-Core Tests">ignoreStringPragma	&lt;i18nPragmasToIgnore&gt;	^#(#ignoreString:)</body></methods><methods><class-id>I18nCore.UserMessageExample</class-id> <category>ignored methods</category><body package="I18n-Core Tests">exampleHiddenString3	"this method has no user message, but it should not be found using a method filter because there's a method with &lt;i18nSelectorsToIgnore&gt; that searches for the &lt;ignoreMe&gt; pragma."	&lt;ignoreMe&gt;	^'test'</body><body package="I18n-Core Tests">exampleOldWindowSpec	"LensEditor new openOnClass: self andSelector: #dataModelSpec"	&lt;resource: #dataModel&gt;	^#(#LensDataModel 		#setDatabaseContext: 		#(#Oracle7Context 			#username: '' 			#environment: '' ) 		#structureTypes: #(			#(#LensStructureType 				#memberClass: #'Examples.BookExample' 				#setVariables: #(					#(#LensStructureVariable 						#name: 'bookid' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#Oracle7TableColumn 							#name: 'BOOKID' 							#dataType: 'varchar2' 							#maxColumnConstraint: 15 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#LensStructureVariable 						#name: 'title' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#Oracle7TableColumn 							#name: 'TITLE' 							#dataType: 'varchar2' 							#maxColumnConstraint: 60 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#LensStructureVariable 						#name: 'author' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#Oracle7TableColumn 							#name: 'AUTHOR' 							#dataType: 'varchar2' 							#maxColumnConstraint: 30 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) ) 				#table: 				#(#Oracle7Table 					#name: 'BOOKEXAMPLE' ) 				#defersPostingUpdates: true 				#idVariable: #('bookid' ) 				#idGeneratorType: #userDefinedId 				#indexes: #() ) 			#(#LensStructureType 				#memberClass: #'Examples.BorrowerExample' 				#setVariables: #(					#(#LensStructureVariable 						#name: 'librarycard' 						#setValueType: #SerialNumber 						#fieldType: #SerialNumber 						#column: 						#(#Oracle7TableColumn 							#name: 'LIBRARYCARD' 							#dataType: 'number' 							#precision: 12 							#scale: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#LensStructureVariable 						#name: 'name' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#Oracle7TableColumn 							#name: 'NAME' 							#dataType: 'varchar2' 							#maxColumnConstraint: 30 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#LensStructureVariable 						#name: 'address' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#Oracle7TableColumn 							#name: 'ADDRESS' 							#dataType: 'varchar2' 							#maxColumnConstraint: 60 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) ) 				#table: 				#(#Oracle7Table 					#name: 'BORROWEREXAMPLE' ) 				#defersPostingUpdates: true 				#idVariable: #('librarycard' ) 				#idGeneratorType: #userDefinedId 				#indexes: #() ) 			#(#LensStructureType 				#memberClass: #'Examples.BookLoanExample' 				#setVariables: #(					#(#LensStructureVariable 						#name: 'borrower' 						#setValueType: #BorrowerExample 						#fieldType: #SerialNumber 						#column: 						#(#Oracle7TableColumn 							#name: 'BORROWER' 							#dataType: 'number' 							#precision: 12 							#scale: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#LensStructureVariable 						#name: 'datedue' 						#setValueType: #Timestamp 						#fieldType: #Timestamp 						#column: 						#(#Oracle7TableColumn 							#name: 'DATEDUE' 							#dataType: 'date' 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#LensStructureVariable 						#name: 'book' 						#setValueType: #BookExample 						#fieldType: #String 						#column: 						#(#Oracle7TableColumn 							#name: 'BOOK' 							#dataType: 'varchar2' 							#maxColumnConstraint: 15 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#LensStructureVariable 						#name: 'returned' 						#setValueType: #Timestamp 						#fieldType: #Timestamp 						#column: 						#(#Oracle7TableColumn 							#name: 'RETURNED' 							#dataType: 'date' ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) ) 				#table: 				#(#Oracle7Table 					#name: 'BOOKLOANEXAMPLE' ) 				#defersPostingUpdates: true 				#idVariable: #('borrower' 'datedue' 'book' ) 				#idGeneratorType: #userDefinedId 				#indexes: #() ) ) 		#lensPolicyName: #Mixed 		#lensTransactionPolicyName: #PessimisticRR 		#validity: #installed )</body><body package="I18n-Core Tests">exampleOldWindowSpec2	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#properties: #(#PropertyListDictionary #backgroundSound '' ) 			#label: ' ' 			#min: #(#Point 300 222 ) 			#max: #(#Point 300 222 ) 			#bounds: #(#Rectangle 379 437 679 659 ) 			#isEventDriven: true 			#backgroundPattern: '' ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 ) 					#label: #(#{Kernel.UserMessage} #key: #Window #defaultString: 'Window' #catalogID: #WaveUIPainterToolsLabels) ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 2 0 70 0 0 1 ) 					#label: #(#{Kernel.UserMessage} #key: #Background #defaultString: 'Background' #catalogID: #WaveUIPainterToolsLabels) ) 				#(#CheckBoxSpec 					#layout: #(#Point 16 201 ) 					#model: #submitMode 					#label: #(#{Kernel.UserMessage} #key: #SubmitToSubcanvases #defaultString: 'Submit to subcanvases' #catalogID: #WaveUIPainterToolsLabels) ) 				#(#LabelSpec 					#layout: #(#Point 18 236 ) 					#label: #(#{Kernel.UserMessage} #key: #RefreshEvery #defaultString: 'Refresh every ' #catalogID: #WaveUIPainterToolsLabels) ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 111 236 159 257 ) 					#model: #refreshSeconds 					#type: #number ) 				#(#LabelSpec 					#layout: #(#Point 166 236 ) 					#label: #(#{Kernel.UserMessage} #key: #seconds #defaultString: 'seconds' #catalogID: #WaveUIPainterToolsLabels) ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 2 0 119 0 0 1 ) 					#label: #(#{Kernel.UserMessage} #key: #Background #defaultString: 'Background' #catalogID: #WaveUIPainterToolsLabels) ) 				#(#ComboBoxSpec 					#properties: 					#(#PropertyListDictionary #dragExitSelector 						#dragLeaveSoundAspect: #dragEnterSelector 						#dragEnterSoundAspect: #dropSelector 						#dropInSoundAspect: #dragOverSelector 						#dragOverSoundAspect: ) 					#layout: #(#Rectangle 92 105 279 132 ) 					#name: #backgroundSound 					#model: #backgroundSound 					#isReadOnly: false 					#comboList: #recentURLs ) 				#(#LabelSpec 					#layout: #(#Point 42 151 ) 					#label: #(#{Kernel.UserMessage} #key: #Loop #defaultString: 'Loop:' #catalogID: #WaveUIPainterToolsLabels) ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 92 152 181 176 ) 					#model: #soundLoop 					#type: #string ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 33 0 135 0 0 1 ) 					#label: #(#{Kernel.UserMessage} #key: #Sound #defaultString: 'Sound:' #catalogID: #WaveUIPainterToolsLabels) ) 				#(#ComboBoxSpec 					#properties: 					#(#PropertyListDictionary #dragExitSelector 						#dragLeavePatternAspect: #dragEnterSelector 						#dragEnterPatternAspect: #dropSelector 						#dropInPatternAspect: #dragOverSelector 						#dragOverPatternAspect: ) 					#layout: #(#Rectangle 92 54 279 81 ) 					#name: #backgroundPattern 					#model: #backgroundPattern 					#isReadOnly: false 					#comboList: #recentURLs ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 28 0 88 0 0 1 ) 					#label: #(#{Kernel.UserMessage} #key: #Pattern #defaultString: 'Pattern:' #catalogID: #WaveUIPainterToolsLabels) ) ) ) )</body><body package="I18n-Core Tests">methodsToIgnore	&lt;i18nSelectorsToIgnore&gt;	^#(#exampleHiddenString #'specialString*')</body><body package="I18n-Core Tests">methodsToIgnore2	"a second method that uses the i18nSelectorsToIgnore pragma. This method tests that all methods with the #i18nSelectorsToIgnore pragma are combined properly"	&lt;i18nSelectorsToIgnore&gt;	| ignoreMeSelectors |	ignoreMeSelectors := (Pragma allNamed: #ignoreMe in: self class)				collect: #selector.	^#(#exampleHiddenString2) , ignoreMeSelectors</body></methods><methods><class-id>I18nCore.UserMessageExample class</class-id> <category>instance creation</category><body package="I18n-Core Tests">testPragmas	&lt;pragmas: #instance&gt;	^#(#testPragma: #ignoreString: #ignoreMe)</body></methods><methods><class-id>I18nTools.RewriterExamples</class-id> <category>example 6</category><body package="I18n-Tools Tests">example6	&lt;stringPragma: 'test'&gt;	| a b |	a := 'erm'.	b := 0.	'test' , a , b.	'test' , a , b printString , 'test'</body><body package="I18n-Tools Tests">referenceAllNonI18n6	&lt;stringPragma: 'test'&gt;	| a b |	a := 'erm'.	b := 0.	'test' asIs , a , b.	'test' asIs , a , b printString , 'test' asIs</body><body package="I18n-Tools Tests">referenceAllUserMessages6	&lt;stringPragma: #(#test #i18n 'test')&gt;	| a b |	a := 'erm'.	b := 0.	(#test &lt;&lt; #i18n &gt;&gt; 'test') asString , a , b.	(#test &lt;&lt; #i18n &gt;&gt; 'test') asString , a , b printString		, (#test &lt;&lt; #i18n &gt;&gt; 'test') asString</body><body package="I18n-Tools Tests">referenceUserMessage6	&lt;stringPragma: #(#test #i18n 'test')&gt;	| a b |	a := 'erm'.	b := 0.	'test' , a , b.	'test' , a , b printString , 'test'</body></methods><methods><class-id>I18nTools.RewriterExamples class</class-id> <category>instance creation</category><body package="I18n-Tools Tests">pragmas	&lt;pragmas: #instance&gt;	^#(#stringPragma:)</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>