<?xml version="1.0"?><st-source><!-- Name: FastCMethodPointersComment: Wraps C procedure pointers in order to make calling them faster.  Create by sending asPreparedCMethod to the pointer, then use callWith:with:with: etcDbIdentifier: bear73DbTrace: 220697PackageName: FastCMethodPointersParcel: #('FastCMethodPointers')PrintStringCache: (1.1,JoachimGeidel)Version: 1.1Date: 9:18:14 AM August 14, 2009 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.7 (aug09.2) of August 14, 2009 on August 14, 2009 at 9:18:14 AM </time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PreparedCMethod</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>cProcedurePointer kinds numArgs resultType structReturnSize procedureType specifierFlags structArgSize datumClass argumentArray </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>FastCMethodPointers</category><attributes><package>FastCMethodPointers</package></attributes></class><comment><class-id>External.PreparedCMethod</class-id><body>A wrapper around a CProcedurePointer that speeds up multiple calls to the procedure.</body></comment><methods><class-id>External.PreparedCMethod</class-id> <category>calling</category><body package="FastCMethodPointers" selector="call">call	argumentArray size ~= 0 ifTrue: [self error: 'Argument count mismatch'].	^self call: argumentArray</body><body package="FastCMethodPointers" selector="call:">call: arguments	^cProcedurePointer		callFrom: nil		specifierFlags: specifierFlags		arguments: arguments		argumentKinds: kinds		structArgSize: structArgSize		structReturnSize: structReturnSize		datumClass: datumClass		resultType: resultType</body><body package="FastCMethodPointers" selector="callWith:">callWith: a1	argumentArray size ~= 1 ifTrue: [self error: 'Argument count mismatch'].	argumentArray at: 1 put: a1.	^self call: argumentArray</body><body package="FastCMethodPointers" selector="callWith:with:">callWith: a1 with: a2	argumentArray size ~= 2 ifTrue: [self error: 'Argument count mismatch'].	argumentArray at: 1 put: a1; at: 2 put: a2.	^self call: argumentArray</body><body package="FastCMethodPointers" selector="callWith:with:with:">callWith: a1 with: a2 with: a3	argumentArray size ~= 3 ifTrue: [self error: 'Argument count mismatch'].	argumentArray		at: 1 put: a1;		at: 2 put: a2;		at: 3 put: a3.	^self call: argumentArray</body><body package="FastCMethodPointers" selector="callWith:with:with:with:">callWith: a1 with: a2 with: a3 with: a4	argumentArray size ~= 4 ifTrue: [self error: 'Argument count mismatch'].	argumentArray		at: 1 put: a1;		at: 2 put: a2;		at: 3 put: a3;		at: 4 put: a4.	^self call: argumentArray</body><body package="FastCMethodPointers" selector="callWith:with:with:with:with:">callWith: a1 with: a2 with: a3 with: a4 with: a5	argumentArray size ~= 5 ifTrue: [self error: 'Argument count mismatch'].	argumentArray		at: 1 put: a1;		at: 2 put: a2;		at: 3 put: a3;		at: 4 put: a4;		at: 5 put: a5.	^self call: argumentArray</body></methods><methods><class-id>External.PreparedCMethod</class-id> <category>accessing</category><body package="FastCMethodPointers" selector="datumClass">datumClass	^datumClass</body><body package="FastCMethodPointers" selector="kinds">kinds	^kinds</body><body package="FastCMethodPointers" selector="numArgs">numArgs	^numArgs</body><body package="FastCMethodPointers" selector="procedureType">procedureType	^procedureType</body><body package="FastCMethodPointers" selector="resultType">resultType	^resultType</body><body package="FastCMethodPointers" selector="specifierFlags">specifierFlags	^specifierFlags</body><body package="FastCMethodPointers" selector="structArgSize">structArgSize	^structArgSize</body><body package="FastCMethodPointers" selector="structReturnSize">structReturnSize	^structReturnSize</body></methods><methods><class-id>External.PreparedCMethod</class-id> <category>initialize-release</category><body package="FastCMethodPointers" selector="cProcedurePointer:">cProcedurePointer: aCProcedurePointer	cProcedurePointer := aCProcedurePointer.	procedureType := cProcedurePointer type baseReferentType.	kinds := procedureType argumentKinds.	numArgs := procedureType numArgs.	resultType := procedureType resultType.	structReturnSize := resultType isComposite ifTrue: [resultType dataSize] ifFalse: [0].	specifierFlags := procedureType specifierCallFlags.	structArgSize := procedureType structArgumentSize.	datumClass := resultType isPointer		ifTrue: [resultType referentType defaultPointerClass]		ifFalse: [resultType defaultDatumClass].	argumentArray := Array new: numArgs</body></methods><methods><class-id>External.PreparedCMethod class</class-id> <category>instance creation</category><body package="FastCMethodPointers" selector="cProcedurePointer:">cProcedurePointer: cProcedurePointer	^self new cProcedurePointer: cProcedurePointer; yourself</body></methods><methods><class-id>External.CProcedurePointer</class-id> <category>converting</category><body package="FastCMethodPointers" selector="asPreparedCMethod">asPreparedCMethod	^PreparedCMethod cProcedurePointer: self</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>CProcedurePointer</name><environment>External</environment><super>External.CDatum</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Data</category><attributes><package>External-Data</package></attributes></class></st-source>