<?xml version="1.0"?><st-source><!-- Name: MatriX-TestsNotice: Copyright 1999-2016 Cincom Systems, Inc.  All rights reserved.DbIdentifier: bear73DbTrace: 495092DbUsername: traabeDbVersion: 8.3 - 2DevelopmentPrerequisites: #(#(#any 'Xtreams-Core' '') #(#any 'Xtreams-Transforms' '') #(#any 'MatriX' '') #(#any 'SUnitToo' ''))PackageName: MatriX-TestsParcel: #('MatriX-Tests')PrerequisiteDescriptions: #(#(#name 'Xtreams-Core' #componentType #package) #(#name 'Xtreams-Transforms' #componentType #package) #(#name 'MatriX' #componentType #package) #(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('Xtreams-Core' '') #('Xtreams-Transforms' '') #('MatriX' '') #('SUnitToo' ''))PrintStringCache: (8.3 - 2,traabe)Version: 8.3 - 2Date: 12:58:39 PM October 14, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (oct16.2) of October 14, 2016 on October 14, 2016 at 12:58:39 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>StoreStringVirtualMachineTest</name><environment>MatriX</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>machine semaphore </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MatriX-Tests</package></attributes></class><class><name>VirtualMachineTest</name><environment>MatriX</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>machine semaphore </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MatriX-Tests</package></attributes></class><class><name>VirtualMachinesTest</name><environment>MatriX</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>machines semaphore result </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MatriX-Tests</package></attributes></class><methods><class-id>MatriX.StoreStringVirtualMachineTest</class-id> <category>tests</category><body package="MatriX-Tests">testDo	self assert: (machine do: '3 + 4') = 7</body><body package="MatriX-Tests">testDoWith	self assert: (machine				do: '[:a :b | a + b]'				with: 3				with: 4) = 7</body></methods><methods><class-id>MatriX.StoreStringVirtualMachineTest</class-id> <category>initialize-release</category><body package="MatriX-Tests">setUp	machine := VirtualMachine executable: VirtualMachine defaultExecutable arguments: #() image: self imageForTesting marshaler: StoreStringMarshaler.	semaphore := Semaphore new</body><body package="MatriX-Tests">tearDown	semaphore signal.	machine release</body></methods><methods><class-id>MatriX.StoreStringVirtualMachineTest</class-id> <category>private</category><body package="MatriX-Tests">imageForTesting	"Look for the specific pre-built test image. If it is not present, then use standard default."	| slash iName files |	slash := ('*win32*' match: Kernel.OSHandle currentPlatformID)		ifTrue: ['\\']		ifFalse: ['/'].	iName := Kernel.ObjectMemory is64Bit		ifTrue: [ slash,'buildMatriXTest64.im' ]		ifFalse: [ slash,'buildMatriXTest.im' ].	^(files := OS.Filename filesMatching: (Kernel.ObjectMemory imageFilename head, iName)) isEmpty		ifTrue: [ Kernel.ObjectMemory imageFilename asAbsoluteFilename ]		ifFalse: [ files first asFilename asAbsoluteFilename ]</body></methods><methods><class-id>MatriX.VirtualMachineTest</class-id> <category>tests</category><body package="MatriX-Tests">testDo	self assert: (machine do: '3 + 4') = 7.	self assert: (machine do: [3 + 4]) = 7</body><body package="MatriX-Tests">testDoByteStream	self assert: (machine do: '#[ 1 2 3 4 ] reading') rest = #[ 1 2 3 4 ]</body><body package="MatriX-Tests">testDoCharacterStream	self assert: (machine do: 'Object comment reading') rest = Object comment string</body><body package="MatriX-Tests">testDoObjectStream	self assert: (machine do: '(Array with: true with: false with: true) reading') rest = (Array with: true with: false with: true)</body><body package="MatriX-Tests">testDoTimeout	| result normalResult timeoutResult |	normalResult := 'something'.	timeoutResult := 'timeout'.	result := machine do: 					[					[3 seconds wait.					normalResult] onTimeout: 2 seconds do: [timeoutResult]].	self assert: result = timeoutResult</body><body package="MatriX-Tests">testDoWith	self assert: (machine				do: [:a :b | a + b]				with: 3				with: 4) = 7</body><body package="MatriX-Tests">testExecutionQueue	" Test scenario: Run two separate processes on another core. Make sure we can run a second process while a first process is waiting. Make sure we can order our returns so that the first process returns first, but prove that the second process recorded a time before the first process. "	| answerA answerB |	machine do: 'Smalltalk at: #semaphoreA put: Semaphore new'.	machine do: 'Smalltalk at: #semaphoreB put: Semaphore new'.	[answerA := machine do:		' | time |		(Smalltalk at: #semaphoreA) wait.		time := Time microsecondClock.		(Smalltalk at: #semaphoreB) signal.		time'.	semaphore signal] fork.	[answerB := machine do:		' | time |		time := Time microsecondClock.		(Smalltalk at: #semaphoreA) signal.		(Smalltalk at: #semaphoreB) wait.		time'.	semaphore signal] fork.	semaphore wait; wait.	self assert: answerA &gt; answerB</body><body package="MatriX-Tests">testRaiseException	" Test scenario: If an exception raises running the code on the drone core, the exception should be raised on the master core. "	self should: [machine do: [1 / 0]] raise: ZeroDivide</body><body package="MatriX-Tests">testSyntaxError	" Test scenario: If an exception raises compiling the code on the drone core, the exception should be raised on the master core. "	self should: [machine do: '['] raise: Kernel.SyntaxErrorException</body><body package="MatriX-Tests">testTerminate	" Test scenario: The green thread running on the master core is a representation for the green thread running on the drone core. If we terminate our master green thread, it should terminate the drone green thread. We need to prove this by making sure the client core never finishes its delay. "	| process response |	response := nil.		[machine do:			' | semaphore |			semaphore := Semaphore new.			Smalltalk at: #finished put: false.			Smalltalk at: #semaphore put: semaphore.			semaphore wait'.		semaphore signal] fork.	process :=		[[response := machine do: 			'(Smalltalk at: #semaphore) signal.			(Delay forSeconds: 60) wait.			Smalltalk at: #finished put: true']				ensure: [semaphore signal]] fork.	semaphore wait. " This tells us the remote delay has started. "	process terminate.	semaphore wait. " This tells us the remote delay finished or was terminated. "	self assert: response isNil.	self deny: (machine do: 'Smalltalk at: #finished')</body></methods><methods><class-id>MatriX.VirtualMachineTest</class-id> <category>initialize-release</category><body package="MatriX-Tests">setUp	machine := VirtualMachine image: self imageForTesting.	semaphore := Semaphore new</body><body package="MatriX-Tests">tearDown	semaphore signal; signal.	machine release</body></methods><methods><class-id>MatriX.VirtualMachineTest</class-id> <category>private</category><body package="MatriX-Tests">imageForTesting	"Look for the specific pre-built test image. If it is not present, then use standard default."		| slash iName files |	slash := ('*win32*' match: Kernel.OSHandle currentPlatformID)		ifTrue: ['\\']		ifFalse: ['/'].	iName := Kernel.ObjectMemory is64Bit		ifTrue: [ slash,'buildMatriXTest64.im' ]		ifFalse: [ slash,'buildMatriXTest.im' ].	^(files := OS.Filename filesMatching: (Kernel.ObjectMemory imageFilename head, iName)) isEmpty		ifTrue: [ Kernel.ObjectMemory imageFilename asAbsoluteFilename ]		ifFalse: [ files first asFilename asAbsoluteFilename ]</body></methods><methods><class-id>MatriX.VirtualMachinesTest</class-id> <category>tests</category><body package="MatriX-Tests">testDo	"Test running more jobs than we have virtual machines for."	result := machines do: #('1' '2' '3' '4' '5' '6' '7' '8' '9' '0').	self assert: result = #(1 2 3 4 5 6 7 8 9 0)</body><body package="MatriX-Tests">testDoWithArguments	result := machines do: [:a | a + 1] withArguments:  #(#(1) #(2) #(3)).	self assert: result = #(2 3 4).	result := machines			do: (Array with: [:a | a + 1] with: [:a | a + 2] with: [:a | a + 3])			withArguments: #(#(1) #(2) #(3)).	self assert: result = #(2 4 6)</body><body package="MatriX-Tests">testDoWithWith	result := machines do: '[:a :b | a + b]' with: #(1 2 3 4 5) with: #(5 4 3 2 1).	self assert: result = #(6 6 6 6 6)</body><body package="MatriX-Tests">testFirstDo	result := machines first: 2 do: #('1' '2' '3' '4').	self assert: result size = 2.	self assert: (result allSatisfy: [:e | e &gt;= 0 and: [e &lt;= 9]])</body><body package="MatriX-Tests">testFirstDoWithArguments	result := machines first: 2 do: [:a | a + 1] withArguments:  #(#(1) #(2) #(3)).	self assert: result size = 2.	result := machines			first: 2			do: (Array with: [:a | a + 1] with: [:a | a + 2] with: [:a | a + 3])			withArguments: #(#(1) #(2) #(3)).	self assert: result size = 2</body><body package="MatriX-Tests">testPromise	| promiseA promiseB promiseC promiseD promiseE |	promiseA := [machines do: '10000 factorial'] promise.	promiseB := [machines do: '1000 factorial'] promise.	promiseC := machines promise: '100 factorial'.	promiseD := machines promise: '10 factorial'.	promiseE := (machines do: '1 factorial') asValue.	self assert: promiseA value = 10000 factorial.	self assert: promiseB value = 1000 factorial.	self assert: promiseC value = 100 factorial.	self assert: promiseD value = 10 factorial.	self assert: promiseE value = 1</body><body package="MatriX-Tests">testRaiseExceptionDrone	result := machines do: [:a | [1 / a] on: ZeroDivide do: [:ex | ex resume: -1]] with: #(1 0 2 3).	self assert: result = (Array with: 1 with: -1 with: 1 / 2 with: 1 / 3)</body><body package="MatriX-Tests">testRaiseExceptionMaster	result := [machines do: [:a | 1 / a] with: #(1 0 2 3)] on: ZeroDivide do: [:ex | ex resume: -1].	self assert: result = (Array with: 1 with: -1 with: 1 / 2 with: 1 / 3)</body><body package="MatriX-Tests">testRaiseExceptionPromise	| promise |	promise := machines promise: [1 / 0].	result := [promise value] on: ZeroDivide do: [:ex | ex return: -1].	self assert: result = -1</body></methods><methods><class-id>MatriX.VirtualMachinesTest</class-id> <category>initialize-release</category><body package="MatriX-Tests">setUp	machines := VirtualMachines new: 4 image: self imageForTesting.	semaphore := Semaphore new.</body><body package="MatriX-Tests">tearDown	semaphore signal.	machines release</body></methods><methods><class-id>MatriX.VirtualMachinesTest</class-id> <category>private</category><body package="MatriX-Tests">imageForTesting	"Look for the specific pre-built test image. If it is not present, then use standard default."	| slash iName files |	slash := ('*win32*' match: Kernel.OSHandle currentPlatformID)		ifTrue: ['\\']		ifFalse: ['/'].	iName := Kernel.ObjectMemory is64Bit		ifTrue: [ slash,'buildMatriXTest64.im' ]		ifFalse: [ slash,'buildMatriXTest.im' ].	^(files := OS.Filename filesMatching: (Kernel.ObjectMemory imageFilename head, iName)) isEmpty		ifTrue: [ Kernel.ObjectMemory imageFilename asAbsoluteFilename ]		ifFalse: [ files first asFilename asAbsoluteFilename ]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>