<?xml version="1.0"?><st-source><!-- Name: Polycephaly-TestsNotice: Copyright © 2011-1999 Cincom Systems, Inc.  All Rights Reserved.DbIdentifier: bear73DbTrace: 336119DbUsername: mlucas-smithDbVersion: 7.9 - 1DevelopmentPrerequisites: #(#(#any 'Polycephaly' '') #(#any 'SUnitToo' ''))DialectVersion: VisualWorks®, Pre-Release 7.9 (jun11.1) of June 3, 2011ExplicitPrerequisites: #()IgnoredPrerequisites: #()PackageName: Polycephaly-TestsParcel: #('Polycephaly-Tests')PrerequisiteParcels: #(#('Polycephaly' '') #('SUnitToo' ''))PrintStringCache: (7.9 - 1,mlucas-smith)Version: 7.9 - 1Date: 1:16:03 PM May 3, 2013 --><time-stamp>From VisualWorks®, Pre-Release 7.10 (may13.1) of May 3, 2013 on May 3, 2013 at 1:16:03 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>VirtualMachineTest</name><environment>Polycephaly</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>machine semaphore </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Polycephaly-Tests</package></attributes></class><class><name>VirtualMachinesTest</name><environment>Polycephaly</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>virtualMachines semaphore </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Polycephaly-Tests</package></attributes></class><methods><class-id>Polycephaly.VirtualMachineTest</class-id> <category>initialize-release</category><body package="Polycephaly-Tests">setUp"	machine := DebugMachine new."	machine := VirtualMachine new.	semaphore := Semaphore new</body><body package="Polycephaly-Tests">tearDown	semaphore signal.	machine release</body></methods><methods><class-id>Polycephaly.VirtualMachineTest</class-id> <category>tests</category><body package="Polycephaly-Tests">testDo	self assert: (machine do: '3 + 4') = 7.	self assert: (machine do: [3 + 4]) = 7</body><body package="Polycephaly-Tests">testDoTimeout	self should: [machine timeout: 50 do: [machine do: [5 seconds wait]]] raise: TimeoutExceeded</body><body package="Polycephaly-Tests">testDoWith	self assert: (machine do: 'a + b' environment: (Dictionary new at: #a put: 3; at: #b put: 4; yourself)) = 7.	self assert: (machine do: [:a :b | a + b] with: 3 with: 4) = 7</body><body package="Polycephaly-Tests">testExecutionQueue	" Test scenario: Run two separate processes on another core. Make sure we can run a second process while a first process is waiting. Make sure we can order our returns so that the first process returns first, but prove that the second process recorded a time before the first process. "	| answerA answerB returnA returnB |	machine do: 'Smalltalk at: #semaphoreA put: Semaphore new'.	machine do: 'Smalltalk at: #semaphoreB put: Semaphore new'.	[answerA := machine do:		' | time |		(Smalltalk at: #semaphoreA) wait.		time := Time microsecondClock.		(Smalltalk at: #semaphoreB) signal.		time'.	returnA := Time microsecondClock.	semaphore signal] fork.	[answerB := machine do:		' | time |		time := Time microsecondClock.		(Smalltalk at: #semaphoreA) signal.		(Smalltalk at: #semaphoreB) wait.		time'.	returnB := Time microsecondClock.	semaphore signal] fork.	semaphore wait; wait.	self assert: returnA &lt; returnB.	self assert: answerA &gt; answerB</body><body package="Polycephaly-Tests">testRaiseException	" Test scenario: If an exception raises running the code on the drone core, the exception should be raised on the master core. "	self should: [machine do: [1 / 0]] raise: ZeroDivide</body><body package="Polycephaly-Tests">testSyntaxError	" Test scenario: If an exception raises compiling the code on the drone core, the exception should be raised on the master core. "	self should: [machine do: '['] raise: SyntaxErrorException</body><body package="Polycephaly-Tests">testTerminate	" Test scenario: The green thread running on the master core is a representation for the green thread running on the drone core. If we terminate our master green thread, it should terminate the drone green thread. We need to prove this by making sure the client core never finishes its delay. "	| process response |	response := nil.		[machine do:			' | semaphore |			semaphore := Semaphore new.			Smalltalk at: #finished put: false.			Smalltalk at: #semaphore put: semaphore.			semaphore wait'.		semaphore signal] fork.	process :=		[[response := machine do: 			'(Smalltalk at: #semaphore) signal.			(Delay forSeconds: 60) wait.			Smalltalk at: #finished put: true']				ensure: [semaphore signal]] fork.	semaphore wait. " This tells us the remote delay has started. "	process terminate.	semaphore wait. " This tells us the remote delay finished or was terminated. "	self assert: response isNil.	self deny: (machine do: 'Smalltalk at: #finished')</body></methods><methods><class-id>Polycephaly.VirtualMachinesTest</class-id> <category>initialize-release</category><body package="Polycephaly-Tests">setUp"	virtualMachines := VirtualMachines newDebug: 4."	virtualMachines := VirtualMachines new: 4.	semaphore := Semaphore new</body><body package="Polycephaly-Tests">tearDown	virtualMachines size timesRepeat: [semaphore signal].	virtualMachines release</body></methods><methods><class-id>Polycephaly.VirtualMachinesTest</class-id> <category>tests</category><body package="Polycephaly-Tests">testDo	self assert: (virtualMachines do: 'id + 3 + 4') = #( 8 9 10 11 ).	self assert: (virtualMachines do: [:id | id + 3 + 4]) = #( 8 9 10 11 )</body><body package="Polycephaly-Tests">testDoTimeout	self should: [virtualMachines timeout: 50 do: [virtualMachines do: [:id | id seconds wait]]] raise: TimeoutExceeded</body><body package="Polycephaly-Tests">testDoWith	| environments |	environments := Array		with: (Dictionary new at: #a put: 1; at: #b put: 100; yourself)		with: (Dictionary new at: #a put: 2; at: #b put: 102; yourself)		with: (Dictionary new at: #a put: 4; at: #b put: 104; yourself)		with: (Dictionary new at: #a put: 8; at: #b put: 108; yourself).	self assert: (virtualMachines do: 'id + a + b' environments: environments) = #( 102 106 111 120 ).	self assert: (virtualMachines do: [:a :b :id | id + a + b] environments: #((1 100) (2 102) (4 104) (8 108))) = #( 102 106 111 120 )</body><body package="Polycephaly-Tests">testFirstDo	" Test scenario: We're going to race the machines to see who wins.. to ensure that this works the way we expect, we have to detect whether the last two machines are terminated before they get their result versus the first two machines who should get their result. "	| victors |	virtualMachines do: 'Smalltalk at: #finished put: false'.	victors := virtualMachines first: 2 do:		'(id * 500) milliseconds wait.		Smalltalk at: #finished put: true'.	victors do: [:victor | self assert: (victor key do: 'Smalltalk at: #finished')].	virtualMachines machines asOrderedCollection		removeAll: (victors collect: [:each | each key]);		do: [:loser | self deny: (loser do: 'Smalltalk at: #finished')]</body><body package="Polycephaly-Tests">testFirstDoItWith	| environments result |	environments := Array		with: (Dictionary new at: #value put: 100; yourself)		with: (Dictionary new at: #value put: 2000; yourself)		with: (Dictionary new at: #value put: 4000; yourself)		with: (Dictionary new at: #value put: 6000; yourself).	result := virtualMachines first: 1 do: 'value milliseconds wait. value' environments: environments.	self assert: result first key = virtualMachines machines first.	self assert: result first value = 100</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>