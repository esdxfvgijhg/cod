<?xml version="1.0"?><st-source><!-- Name: GlorpVWGuiExamplesNotice: Copyright 2006-2013 Cincom Systems, Inc.  All rights reserved.Comment: This is a package for examples of Glorp usage with the VW GUI.Edit the ExampleSessionSource class>>login, then invoke 'GlorpDatasetExample open' in a workspace.  Read its class comments for more information.DbIdentifier: bear73DbTrace: 400825DbUsername: nrossDbVersion: 1.3DevelopmentPrerequisites: #(#(#any 'GlorpTest' ''))PackageName: GlorpVWGuiExamplesParcel: #('GlorpVWGuiExamples')ParcelName: GlorpVWGuiExamplesPrerequisiteDescriptions: #(#(#name 'GlorpTest' #componentType #bundle))PrerequisiteParcels: #(#('GlorpTest' ''))PrintStringCache: (1.3,nross)Version: 1.3Date: 7:16:29 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:16:29 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ExampleSessionSource</name><environment>Glorp</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpVWGuiExamples</category><attributes><package>GlorpVWGuiExamples</package></attributes></class><comment><class-id>Glorp.ExampleSessionSource</class-id><body>This class holds an example login for the UI examples to use. You'll probably want to modify the login to be for a database you have. The database should have the Glorp test schema set up. You can get this by running the Glorp tests against that database.</body></comment><class><name>GlorpDatasetExample</name><environment>Glorp</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>session selectedRow id name street newStreet newName newId people </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>GlorpVWGuiExamples</package></attributes></class><comment><class-id>Glorp.GlorpDatasetExample</class-id><body>This is a very (very) simple example of reading and editing Glorp objects in a dataset. It reads examples of GlorpPerson and their corresponding GlorpAddress instances from the database, and lets you create and edit them.Creating is done in the lower section, where you can fill in an ID and a name, and the street they live on. The last will be part of the address object, which will be created with the same ID as the person. The rest of the address will be left blank. (I said it was very simple). If you use an ID that's been used before, you'll get a database error (or not, depending on the database).There's also a logout button. It's probably a good idea to hit that before closing the window, as otherwise you may end up with database connection artifacts hanging around, again depending on the database and whether finalization is set up entirely correctly for it's structures.In the upper section we can view and edit the same data. The refresh button will cause it to be read from the database. In the data set itself, the ID column is read-only. The other two columns have validation and notification messages sent. These will start and commit a unit of work, respectively. So every field edit will immediately be written to the database, with no way to undo or back it out. But it shows nicely how to intercept changes.Note that all the SQL is logged to the Transcript.Instance Variables:	id	&lt;AspectAdaptor&gt;	Aspect adaptor for the person's id in the dataset.	name	&lt;AspectAdaptor&gt;	Aspect adaptor for the person's name in the dataset.	street	&lt;AspectAdaptor&gt;	Aspect adaptor for the person's address' street in the dataset.	selectedRow	&lt;ValueModel&gt;	The row selected in the dataset.	newId	&lt;ValueModel&gt;	The id entered in the lower section.	newName	&lt;ValueModel&gt;	The name entered in the lower section.	newStreet	&lt;ValueModel&gt;	The street entered in the lower section.	session	&lt;GlorpSession&gt;	description of session	people	&lt;SelectionInList&gt;	The model for the dataset.</body></comment><methods><class-id>Glorp.ExampleSessionSource class</class-id> <category>instance creation</category><body package="GlorpVWGuiExamples">login	^(Login new)		database: PostgreSQLPlatform new;		username: 'glorp';		password: '';		connectString: '192.168.1.99:5432_test'.</body><body package="GlorpVWGuiExamples">session	"Return a new, logged in, session we can use for our examples."	| newSession |	newSession := GlorpDemoDescriptorSystem sessionForLogin: self login.	newSession accessor logging: true.	newSession login.	^newSession.</body></methods><methods><class-id>Glorp.GlorpDatasetExample</class-id> <category>initialize-release</category><body package="GlorpVWGuiExamples">initialize	super initialize.	session := Glorp.ExampleSessionSource session.</body></methods><methods><class-id>Glorp.GlorpDatasetExample</class-id> <category>aspects</category><body package="GlorpVWGuiExamples">id	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^id isNil		ifTrue:			[id := AspectAdaptor forAspect: #id]		ifFalse:			[id]</body><body package="GlorpVWGuiExamples">name	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^name isNil		ifTrue:			[name := AspectAdaptor forAspect: #name ]		ifFalse:			[name]</body><body package="GlorpVWGuiExamples">newId	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^newId isNil		ifTrue:			[newId := 0 asValue]		ifFalse:			[newId]</body><body package="GlorpVWGuiExamples">newName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^newName isNil		ifTrue:			[newName := String new asValue]		ifFalse:			[newName]</body><body package="GlorpVWGuiExamples">newStreet	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^newStreet isNil		ifTrue:			[newStreet := String new asValue]		ifFalse:			[newStreet]</body><body package="GlorpVWGuiExamples">people	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^people isNil		ifTrue:			[people :=  SelectionInList new list: self data.			people selectionIndexHolder compute:				[:v |				self selectedRow value: people selection].			people]		ifFalse:			[people]</body><body package="GlorpVWGuiExamples">selectedRow	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^selectedRow isNil		ifTrue:			[selectedRow := nil asValue]		ifFalse:			[selectedRow]</body><body package="GlorpVWGuiExamples">street	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^street isNil		ifTrue:			[street := AspectAdaptor forAspect: #street ]		ifFalse:			[street]</body></methods><methods><class-id>Glorp.GlorpDatasetExample</class-id> <category>callbacks</category><body package="GlorpVWGuiExamples">entered	Transcript cr; show: 'entered'.</body><body package="GlorpVWGuiExamples">exited	Transcript cr; show: 'exited'.</body><body package="GlorpVWGuiExamples">notificationChanged	session commitUnitOfWork.</body><body package="GlorpVWGuiExamples">validationChanged	session beginUnitOfWork.	session register: self selectedRow value.	^true.</body><body package="GlorpVWGuiExamples">validationEntry	Transcript cr; show: 'validation entry'.	^true.</body><body package="GlorpVWGuiExamples">validationExited	Transcript cr; show: 'validation exit'.	^true.</body></methods><methods><class-id>Glorp.GlorpDatasetExample</class-id> <category>actions</category><body package="GlorpVWGuiExamples">createPerson	| person address |	(self newId value isNil or: [self newId value = 0]) 		ifTrue: [Dialog warn: 'Put in some data first.'. ^self].	person := GlorpPerson new.	person id: self newId value.	person name: self newName value.	address := GlorpAddress new.	address id: self newId value.	address street: self newStreet value.	person address: address.	session inUnitOfWorkDo: [		session register: person].	self refresh.</body><body package="GlorpVWGuiExamples">logout	session logout.</body><body package="GlorpVWGuiExamples">refresh	people list: self data.</body></methods><methods><class-id>Glorp.GlorpDatasetExample</class-id> <category>private</category><body package="GlorpVWGuiExamples">data	| query |	query := Query read: GlorpPerson.	query alsoFetch: [:each | each address].	^session execute: query.</body></methods><methods><class-id>Glorp.GlorpDatasetExample class</class-id> <category>interface specs</category><body package="GlorpVWGuiExamples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #cascade #openType #advanced ) 			#label: 'Example Dataset View on People' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1115 912 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering false ) 					#layout: #(#{Graphics.Rectangle} 28 8 366 190 ) 					#name: #Dataset1 					#model: #people 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow id' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#focusInSelector: #entered 								#focusOutSelector: #exited 								#valueChangeSelector: #notificationChanged 								#requestFocusInSelector: #validationEntry 								#requestFocusOutSelector: #validationExited 								#requestValueChangeSelector: #validationChanged ) 							#label: 'ID' 							#labelIsImage: false 							#width: 80 							#rendererType: #Text 							#editorType: #None 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow name' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #notificationChanged 								#requestValueChangeSelector: #validationChanged ) 							#label: 'Name' 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow address street' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #notificationChanged 								#requestValueChangeSelector: #validationChanged ) 							#label: 'Street' 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 152 224 252 247 ) 					#name: #InputField1 					#model: #newId 					#type: #number ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.Rectangle} 20 200 402 204 ) 					#name: #Divider1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 43 224 ) 					#name: #Label1 					#label: 'ID' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 43 263 ) 					#name: #Label2 					#label: 'Name' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 42 299 ) 					#name: #Label3 					#label: 'Street' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 153 262 253 285 ) 					#name: #InputField2 					#model: #newName ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 152 300 252 322 ) 					#name: #InputField3 					#model: #newStreet ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 99 342 180 365 ) 					#name: #ActionButton1 					#model: #createPerson 					#label: 'Create' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 371 235 452 258 ) 					#name: #ActionButton2 					#model: #logout 					#label: 'Logout' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 380 76 462 99 ) 					#name: #ActionButton3 					#model: #refresh 					#label: 'Refresh' 					#defaultable: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>