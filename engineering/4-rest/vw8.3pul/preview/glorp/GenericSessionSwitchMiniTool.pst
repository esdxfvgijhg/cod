<?xml version="1.0"?><st-source><!-- Name: GenericSessionSwitchMiniToolNotice: Copyright 2002-2013 Cincom Systems, Inc.  All rights reserved.DbIdentifier: bear73DbTrace: 400820DbUsername: nrossDbVersion: 1.16DevelopmentPrerequisites: #(#(#any 'Procedium Namespace' '') #(#any 'SUnitUI' '') #(#any 'GlorpTest' ''))PackageName: GenericSessionSwitchMiniToolParcel: #('GenericSessionSwitchMiniTool')ParcelName: GenericSessionSwitchMiniToolPrerequisiteParcels: #(#('Procedium Namespace' '') #('SUnitUI' '') #('Glorp' ''))PrintStringCache: (1.16,nross)Version: 1.16Date: 7:16:24 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:16:24 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>GenericSessionSwitchMiniTool</name><environment>Procedium</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>labelHolder </inst-vars><class-inst-vars></class-inst-vars><imports>			Glorp.*			</imports><category>GenericVisualLauncherTool</category><attributes><package>GenericSessionSwitchMiniTool</package></attributes></class><methods><class-id>Procedium.GenericSessionSwitchMiniTool</class-id> <category>private</category><body package="GenericSessionSwitchMiniTool">availableLogins	^self subclassResponsibility</body><body package="GenericSessionSwitchMiniTool">databaseLoginResource	^self subclassResponsibility</body><body package="GenericSessionSwitchMiniTool">defaultLoginLabel	^self databaseLoginResource defaultLogin		ifNil: [String new]		ifNotNil: [:value | value name]</body><body package="GenericSessionSwitchMiniTool">installLabelController	| controller |	controller := ControllerWithSelectMenu new.	controller		selectMenuHolder: [self mainMenu];		menuHolder: [self miscMenu];		performer: self.	(self widgetAt: #labelHolder) controller: controller</body><body package="GenericSessionSwitchMiniTool">openTestRunner	XProgramming.SUnit.TestRunner open.</body><body package="GenericSessionSwitchMiniTool">tablePopulatorResource	^self subclassResponsibility</body><body package="GenericSessionSwitchMiniTool">updateDefaultLoginLabel	self labelHolder value: self defaultLoginLabel</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool</class-id> <category>actions</category><body package="GenericSessionSwitchMiniTool">openTestRunnerOnClasses: classes	| testrunner menu filteredClasses |	testrunner := XProgramming.SUnit.TestRunner new.	filteredClasses := classes select: [:eachClass | eachClass inheritsFrom: XProgramming.SUnit.TestCase].	menu := Menu labelArray: (filteredClasses collect: [:each | each printString]) values: filteredClasses.	testrunner scriptModel value: menu.	testrunner open</body><body package="GenericSessionSwitchMiniTool">showHelp	ComposedTextView 		open: self class help asValue		label: ('&lt;1s&gt; Help' expandMacrosWith: self class name)		icon: nil		extent: 500 @ 300</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool</class-id> <category>interface opening</category><body package="GenericSessionSwitchMiniTool">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self installLabelController</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool</class-id> <category>aspects</category><body package="GenericSessionSwitchMiniTool">labelHolder	^labelHolder isNil 		ifTrue: [labelHolder := String new asValue]		ifFalse: [labelHolder]</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool</class-id> <category>initialize-release</category><body package="GenericSessionSwitchMiniTool">initialize	super initialize.	self databaseLoginResource ifNotNil: 			[:value | 			value 				when: #changedDefaultLogin				send: #defaultLoginChanged				to: self].	self defaultLoginChanged</body><body package="GenericSessionSwitchMiniTool">release	self databaseLoginResource ifNotNil: [:r | r removeAllActionsWithReceiver: self].	super release</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool</class-id> <category>events</category><body package="GenericSessionSwitchMiniTool">defaultLoginChanged	self updateDefaultLoginLabel</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool</class-id> <category>testing</category><body package="GenericSessionSwitchMiniTool">exdiTracingEnabled	^ExternalDatabaseFramework shouldTrace: 1.</body><body package="GenericSessionSwitchMiniTool">loggingEnabled	^DatabaseAccessor loggingEnabled.</body><body package="GenericSessionSwitchMiniTool">tablePopulatorNeedsSetup	^(self tablePopulatorResource ifNil: [^false]) needsSetup.</body><body package="GenericSessionSwitchMiniTool">useBindingIfSupported	^DatabasePlatform useBindingIfSupported.</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool</class-id> <category>private-menu</category><body package="GenericSessionSwitchMiniTool">createConnectOrDisconnectItemFor: aLogin 	| item |	item := MenuItem labeled: aLogin name.	self databaseLoginResource defaultLogin = aLogin ifTrue: [item labelImage: self class toolIcon].	item value: 			[:controller | 			(self databaseLoginResource)				defaultLogin: aLogin;				reset].	^item</body><body package="GenericSessionSwitchMiniTool">mainMenu	| menu |	menu := self class mainMenu.	self availableLogins do: [:each | menu addItem: (self createConnectOrDisconnectItemFor: each)].	menu		augmentFrom: self class		to: GenericSessionSwitchMiniTool		menuName: #mainMenu.	self postBuildMainMenu: menu.	^menu.</body><body package="GenericSessionSwitchMiniTool">miscMenu	| menu |	menu := self class miscMenu.	menu		augmentFrom: self class		to: GenericSessionSwitchMiniTool		menuName: #miscMenu.	self postBuildMiscMenu: menu.	^menu.</body><body package="GenericSessionSwitchMiniTool">postBuildMainMenu: aMenu</body><body package="GenericSessionSwitchMiniTool">postBuildMiscMenu: aMenu</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool class</class-id> <category>icons</category><body package="GenericSessionSwitchMiniTool">toolIcon	^ToolbarIconLibrary visualFor: #database</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool class</class-id> <category>help</category><body package="GenericSessionSwitchMiniTool">help	^self subclassResponsibility</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool class</class-id> <category>resources</category><body package="GenericSessionSwitchMiniTool">mainMenu	^Menu new</body><body package="GenericSessionSwitchMiniTool">miscMenu	^Menu new.</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool</class-id> <category>menu items</category><body package="GenericSessionSwitchMiniTool">openTestRunnerMenuItem	&lt;menuItem: 'Open test runner'		icon: nil		nameKey: #openTestRunner		enablement: nil		indication: nil		menu: #(#mainMenu)		position: 30.10&gt;	self openTestRunner.</body><body package="GenericSessionSwitchMiniTool">pleaseUseLeftClick	&lt;menuItem: 'Please use left-click menu'		icon: nil		nameKey: #pleaseuseleftclick		enablement: nil		indication: nil		menu: #(#miscMenu)		position: 10&gt;</body><body package="GenericSessionSwitchMiniTool">toggleDatabaseAccessorLoggingEnabled	&lt;menuItem: 'Enable logging'		icon: nil		nameKey: #enablelogging		enablement: nil		indication: #loggingEnabled		menu: #(#mainMenu)		position: 20.10&gt;	DatabaseAccessor loggingEnabled: self loggingEnabled not.</body><body package="GenericSessionSwitchMiniTool">toggleEXDITracingEnabled	&lt;menuItem: 'Enable EXDI tracing'		icon: nil		nameKey: #enableexditracing		enablement: nil		indication: #exdiTracingEnabled		menu: #(#mainMenu)		position: 20.20&gt;	self exdiTracingEnabled		ifTrue:			[ExternalDatabaseConnection traceLevel: 0.			ExternalDatabaseConnection traceCollector: nil.			ExternalDatabaseConnection allGeneralInstances do: [:each | each traceLevel: 0]]		ifFalse:			[ExternalDatabaseConnection traceLevel: 3.			ExternalDatabaseConnection traceCollector: Transcript.			ExternalDatabaseConnection allGeneralInstances do: [:each | each traceLevel: 3]].</body><body package="GenericSessionSwitchMiniTool">toggleTablePopulatorNeedsSetup	&lt;menuItem: 'Table populator resource needs setup'		icon: nil		nameKey: #tablepopulatorneedssetup		enablement: nil		indication: #tablePopulatorNeedsSetup		menu: #(#mainMenu)		position: 20.05&gt;	self tablePopulatorNeedsSetup		ifTrue: [self tablePopulatorResource ifNotNil: [:t | t needsSetup: false]]		ifFalse: [self tablePopulatorResource ifNotNil: [:t | t invalidateSetup]].</body><body package="GenericSessionSwitchMiniTool">toggleUseBindingIfSupported	&lt;menuItem: 'Use binding if supported by platform'		icon: nil		nameKey: #useBindingIfSupported		enablement: nil		indication: #useBindingIfSupported		menu: #(#mainMenu)		position: 20.50&gt;	DatabasePlatform useBindingIfSupported: self useBindingIfSupported not.</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool</class-id> <category>private-menuitems</category><body package="GenericSessionSwitchMiniTool">helpMenuItem	&lt;menuItem: 'Help'		icon: nil		nameKey: #help		enablement: nil		indication: nil		menu: #(#mainMenu)		position: 40.10&gt;	self showHelp.</body></methods><methods><class-id>Procedium.GenericSessionSwitchMiniTool class</class-id> <category>interface specs</category><body package="GenericSessionSwitchMiniTool">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Session Switch Mini Tool' 			#bounds: #(#{Graphics.Rectangle} 512 384 878 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 0 -1 21 23 ) 					#name: #toolIcon 					#label: #toolIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 0 0 0 1 21 0 ) 					#name: #labelHolder 					#flags: 0 					#model: #labelHolder 					#isReadOnly: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>