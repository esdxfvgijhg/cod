<?xml version="1.0"?><st-source><!-- Name: DiggyNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Comment: Diggy is a staging package for making changes which incorporate the Trippy Inspectors into the debugger, rather than the old inspectors. Doing it as a separate package, makes it so it can be loaded, played with, and unloaded if too many problems are discovered. Please report issues to tgriggs@cincom.com.DbIdentifier: bear73DbTrace: 400819DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'Tools-Trippy' '') #(#any 'Debugger-UI' ''))PackageName: DiggyParcel: #('Diggy')PrerequisiteParcels: #(#('Tools-Trippy' '') #('Debugger-UI' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 7:26:08 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:26:08 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ContextVariablesInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.PartListAbstractInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Diggy</package></attributes></class><comment><class-id>Tools.Trippy.ContextVariablesInspector</class-id><body>A special inspector that presents the synthesized slots of a context.</body></comment><methods><class-id>Tools.Trippy.ContextVariablesInspector</class-id> <category>properties</category><body package="Diggy">dragControllerClass	^ReplaceOnlyDragController</body></methods><methods><class-id>Tools.Trippy.ContextVariablesInspector</class-id> <category>decomposing</category><body package="Diggy">partAt: anIndex 	| pair |	pair := object pdpSlotAccessors at: anIndex.	^DerivedAttribute label: pair first		valueBlock: [object getTempVar: pair last]</body><body package="Diggy">partCount	^object == nil ifTrue: [0] ifFalse: [object pdpSlotAccessors size]</body></methods><methods><class-id>Tools.Trippy.ContextVariablesInspector class</class-id> <category>accessing</category><body package="Diggy">tabLabel	^(#contextVarsInspector &lt;&lt; #labels &gt;&gt; 'Variables') asString</body></methods><methods><class-id>Tools.Trippy.InspectorHolder</class-id> <category>debugger support</category><body package="Diggy">empty</body><body package="Diggy">resetFields	"The old inspector interface required this, not sure we need anything more than update"	self update</body><body package="Diggy">resetFieldsForDebugger	"The old inspector interface required this, not sure we need anything more than update"	self update</body><body package="Diggy">setObject: anObject 	inspector initialize: anObject</body><body package="Diggy">update	inspector refresh</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient</class-id> <category>private</category><body package="Diggy">betweenBlockAndHomeIcon	^VisualBlock block: 			[:gc :box |			gc				paint: SymbolicPaint hilite;				displayLineFrom: box topCenter + (1 @ 0) to: box bottomCenter + (1 @ 0);				paint: SymbolicPaint foreground;				displayLineFrom: box topCenter to: box bottomCenter]		extent: 10 @ 20</body><body package="Diggy">blockWithHomeIcon	^VisualBlock block: 			[:gc :box |			| cornerBox |			cornerBox := box topRight - box extent half extent: box extent.			gc				paint: SymbolicPaint hilite;				displayArcBoundedBy: (cornerBox translatedBy: 1 @ 1)					startAngle: 90					sweepAngle: 90;				paint: SymbolicPaint foreground;				displayArcBoundedBy: cornerBox startAngle: 90 sweepAngle: 90]		extent: 10 @ 20</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient</class-id> <category>aspects</category><body package="Diggy">contextList	^service contextListForUI collect: 			[:a |			| emp txt str |			str := a at: 1.			txt := str asText.			(service isTagged: (a at: 1)) ifTrue: [txt := txt allBold].			emp := a at: 3.			emp notNil				ifTrue: [txt emphasizeAllWith: #color -&gt; (stackEmphases at: emp)].			(LabelAndIcon with: txt) icon: (self stackLabelIconAt: (a at: 2))]</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient</class-id> <category>private</category><body package="Diggy">homeOfBlockIcon	^VisualBlock block: 			[:gc :box |			| circleBox |			circleBox := box bottomRight - box extent half extent: box extent.			gc				paint: SymbolicPaint hilite;				displayArcBoundedBy: (circleBox translatedBy: 1 @ 1)					startAngle: 180					sweepAngle: 90;				paint: SymbolicPaint foreground;				displayArcBoundedBy: circleBox startAngle: 180 sweepAngle: 90]		extent: 10 @ 20</body><body package="Diggy">stackLabelIconAt: anIndex	| context tmpClass icon homeIndex chainIcon blockIndex |	context := service contextForUIAt: anIndex.	tmpClass := service _objectClass: context receiver.	icon := [tmpClass toolListIcon] toolSafeIn: 100 milliseconds				else: [GeneralIcons inaccessibleToolIcon].	service context isBlockContext		ifTrue: 			[service context supposedHome				ifNotNil: 					[:homeContext |					homeIndex := service contextList indexOf: homeContext.					homeIndex isZero						ifFalse: 							[anIndex = homeIndex								ifTrue: [chainIcon := self blockWithHomeIcon]								ifFalse: 									[blockIndex := service contextList indexOf: service context.									anIndex = blockIndex										ifTrue: [chainIcon := self homeOfBlockIcon]										ifFalse: 											[(anIndex between: blockIndex and: homeIndex)												ifTrue: [chainIcon := self betweenBlockAndHomeIcon]]].							chainIcon ifNotNil: [^VisualRow with: chainIcon with: icon]]]].	^icon</body></methods><methods><class-id>CraftedSmalltalk.DebuggerService</class-id> <category>private-inspectors</category><body package="Diggy">contextForUIAt: anIndex	^contextStackPolicy contextSelectedAt: anIndex</body><body package="Diggy">openInspectors	"Further initialization when opening notify view to debug view"	receiverInspector := Tools.Trippy.Inspector forEmbeddingOn: nil.	contextInspector := (Tools.Trippy.InspectorHolder new)				initialize: (Tools.Trippy.ContextVariablesInspector on: nil);				yourself.	stackInspector := StackInspector inspect: nil</body></methods><methods><class-id>CraftedSmalltalk.DebuggerService</class-id> <category>context list</category><body package="Diggy">refreshInspectorsFromCurrentContext	| receiver |	receiver := currentContext isNil		ifTrue: [nil]		ifFalse: [currentContext intendedReceiver].	(self _object: receiver eqeq: nil)		ifTrue:			[receiverInspector setObject: nil.			receiverInspector empty]		ifFalse: [receiverInspector setObject: receiver].	contextInspector setObject: currentContext.	stackInspector context: currentContext isTop: currentContext == processHandle topContext.	self scheduleResetInspectorFields</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient class</class-id> <category>interface specs</category><body package="Diggy">toolbarInTheMiddleWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #toolbarInTheMiddleWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 720 312 1301 900 ) 			#flags: 4 			#menu: #menuBarMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0.3 0 1 -2 0.8 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#tabable: true 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0.8 -2 0.5 0 1 ) 					#name: #receiverInspector 					#flags: 0 					#majorKey: #{Tools.Trippy.InspectorHolder} 					#minorKey: #windowSpec 					#clientKey: #receiverInspector ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 2 0.8 0 1 0 1 ) 					#name: #contextInspector 					#flags: 0 					#majorKey: #{Tools.Trippy.InspectorHolder} 					#minorKey: #windowSpec 					#clientKey: #contextInspector ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.8 0 1 2 0.8 ) 					#name: #BottomResizer 					#horizontal: true 					#minAboveSize: 60 					#minBelowSize: 60 					#aboveWidgets: '#text' 					#belowWidgets: '#receiverInspector #contextInspector #BotInspectResizer' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.3 0 1 2 0.3 ) 					#name: #TopResizer 					#horizontal: true 					#minAboveSize: 60 					#minBelowSize: 60 					#aboveWidgets: 'TopComposite' 					#belowWidgets: 'text' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0.8 2 0.5 0 1 ) 					#name: #BotInspectResizer 					#horizontal: false 					#minAboveSize: 60 					#minBelowSize: 60 					#aboveWidgets: '#receiverInspector' 					#belowWidgets: 'contextInspector' ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.SequenceViewSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.6 -28 1 ) 							#name: #stackList 							#model: #stackList 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#doubleClickSelector: #browseMethod 								#requestValueChangeSelector: 								#canContextChange: ) 							#menu: #contextMenu 							#useModifierKeys: true 							#selectionType: #normalSelection ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 2 0.6 0 0 0 1 -28 1 ) 							#name: #stackInspector 							#flags: 0 							#majorKey: #{CraftedSmalltalk.StackInspector} 							#minorKey: #windowSpec 							#clientKey: #stackInspector ) 						#(#{UI.ResizingSplitterSpec} 							#layout: #(#{Graphics.LayoutFrame} -2 0.6 0 0 2 0.6 -28 1 ) 							#name: #ResizingSplitter1 							#horizontal: false 							#minAboveSize: 60 							#minBelowSize: 60 							#aboveWidgets: '#stackList' 							#belowWidgets: '#stackInspector' ) 						#(#{UI.ArbitraryComponentSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 -28 1 0 1 0 1 ) 							#name: #toolbarHolder 							#flags: 0 							#component: #toolbarView ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -2 0.3 ) 						#name: #TopComposite ) ) ) ) )</body><body package="Diggy">toolbarOnTopWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #toolbarOnTopWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 720 312 1301 900 ) 			#flags: 4 			#menu: #menuBarMenu 			#toolBar: #toolbarMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0.3 0 1 -2 0.8 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#tabable: true 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0.8 -2 0.5 0 1 ) 					#name: #receiverInspector 					#flags: 0 					#majorKey: #{Tools.Trippy.InspectorHolder} 					#minorKey: #windowSpec 					#clientKey: #receiverInspector ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 2 0.8 0 1 0 1 ) 					#name: #contextInspector 					#flags: 0 					#majorKey: #{Tools.Trippy.InspectorHolder} 					#minorKey: #windowSpec 					#clientKey: #contextInspector ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.8 0 1 2 0.8 ) 					#name: #BottomResizer 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: '#text' 					#belowWidgets: '#receiverInspector #contextInspector #BotInspectResizer' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.3 0 1 2 0.3 ) 					#name: #TopResizer 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'TopComposite' 					#belowWidgets: 'text' ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 2 0.6 0 0 0 1 0 1 ) 							#name: #stackInspector 							#flags: 0 							#majorKey: #{CraftedSmalltalk.StackInspector} 							#minorKey: #windowSpec 							#clientKey: #stackInspector ) 						#(#{UI.SequenceViewSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.6 0 1 ) 							#name: #stackList 							#model: #stackList 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#doubleClickSelector: #browseMethod 								#requestValueChangeSelector: 								#canContextChange: ) 							#menu: #contextMenu 							#useModifierKeys: true 							#selectionType: #normalSelection ) 						#(#{UI.ResizingSplitterSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.6 -2 0 2 0.6 0 1 ) 							#name: #ResizingSplitter1 							#horizontal: false 							#minAboveSize: 30 							#minBelowSize: 30 							#aboveWidgets: '#stackList' 							#belowWidgets: '#stackInspector' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -2 0.3 ) 						#name: #TopComposite ) ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0.8 2 0.5 0 1 ) 					#name: #BotInspectResizer 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: '#receiverInspector' 					#belowWidgets: 'contextInspector' ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>DebuggerClient</name><environment>CraftedSmalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>service contextIndex busy text parsedSource parseTree stackList stackEmphases enableStackFiltering closeAction terminated </inst-vars><class-inst-vars>menuHolder </class-inst-vars><imports>			Refactory.Browser.BrowserEnvironment			Refactory.Browser.RefactoringBrowser			Refactory.Browser.RBParser			</imports><category>Tools-Programming</category><attributes><package>Debugger-UI</package></attributes></class><class><name>PartListAbstractInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Inspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>driver segmentListHolder fieldListHolder textHolder dragController undoHistory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>InspectorHolder</name><environment>Tools.Trippy</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inspector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>DebuggerService</name><environment>CraftedSmalltalk</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>processHandle oldCursor receiverInspector contextInspector stackInspector sourceMap currentContext pendingEvents continueInDebuggerCtx finishBlock selector tags stepProbes label serviceProcess selectionRange contextStackPolicy dontUpdateInspectors doSend doSendLoop doStepIntoBlock debugOperationIsActive doItProcess </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Debugger-Support</package></attributes></class></st-source>