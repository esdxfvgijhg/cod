<?xml version="1.0"?><st-source><!-- Name: WriteBarriers-TestsNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Comment: Tests for the WriteBarriers package.DbIdentifier: bear73DbTrace: 400888DbUsername: nrossDbVersion: 6DevelopmentPrerequisites: #(#(#any 'SUnitToo' '') #(#any 'System-Announcements' '') #(#any 'WriteBarriers' ''))PackageName: WriteBarriers-TestsParcel: #('WriteBarriers-Tests')PrerequisiteParcels: #(#('SUnitToo' '') #('System-Announcements' '') #('WriteBarriers' ''))PrintStringCache: (6,nross)Version: 6Date: 7:26:06 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:26:06 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AnnouncingTracker</name><environment>WriteBarriers</environment><super>WriteBarriers.Tracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>WriteBarriers-Tests</package></attributes></class><comment><class-id>WriteBarriers.AnnouncingTracker</class-id><body>This is an example tracker that just announces which objects a modification has happened to.Instance Variables:	objects	&lt;IdentitySet&gt; tracks tracked objects</body></comment><class><name>RejectingTracker</name><environment>WriteBarriers</environment><super>WriteBarriers.AnnouncingTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>WriteBarriers-Tests</package></attributes></class><comment><class-id>WriteBarriers.RejectingTracker</class-id><body>A tracker that refuses to apply any changes.</body></comment><class><name>TrackerTest</name><environment>WriteBarriers</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tracker otherTracker </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ModificationManagementToo</category><attributes><package>WriteBarriers-Tests</package></attributes></class><class><name>Modified</name><environment>WriteBarriers</environment><super>Core.Announcement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subject </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>WriteBarriers-Tests</package></attributes></class><comment><class-id>WriteBarriers.Modified</class-id><body>Instance Variables:	subject	&lt;Object&gt;</body></comment><methods><class-id>WriteBarriers.AnnouncingTracker</class-id> <category>initialize-release</category><body package="WriteBarriers-Tests">initialize	super initialize.	objects := IdentitySet new</body></methods><methods><class-id>WriteBarriers.AnnouncingTracker</class-id> <category>API</category><body package="WriteBarriers-Tests">isTracking: anObject	^objects includes: anObject</body></methods><methods><class-id>WriteBarriers.AnnouncingTracker</class-id> <category>private</category><body package="WriteBarriers-Tests">announceModificationOf: anObject	self announce: (Modified new subject: anObject)</body><body package="WriteBarriers-Tests">applyModificationTo: anObject selector: selector index: index value: value		super applyModificationTo: anObject selector: selector index: index value: value.	self announceModificationOf: anObject</body><body package="WriteBarriers-Tests">privateTrack: anObject	objects add: anObject</body><body package="WriteBarriers-Tests">privateUntrack: anObject	objects remove: anObject ifAbsent: []</body></methods><methods><class-id>WriteBarriers.RejectingTracker</class-id> <category>private</category><body package="WriteBarriers-Tests">applyModificationTo: anObject selector: selector index: index value: value	self announceModificationOf: anObject</body></methods><methods><class-id>WriteBarriers.TrackerTest</class-id> <category>testing-untracked</category><body package="WriteBarriers-Tests">testUntrackedImmutableBytes	|  target happened |	happened := false.	target := #[1 2 3 4 5] copy.	target beImmutable.	tracker when: Modified do: [ :a | happened := a subject = target ].	self should: [	target at: 1 put: 255] raise: NoModificationError.	self deny: happened.</body><body package="WriteBarriers-Tests">testUntrackedImmutableString	|  target happened |	happened := false.	target := 'abcde' copy.	target beImmutable.	tracker when: Modified do: [ :a | happened := a subject = target ].	self should: [	target at: 1 put: $z] raise: NoModificationError.	self deny: happened.</body><body package="WriteBarriers-Tests">testUntrackedPoint	|  target happened |	happened := false.	target := 5@4.	target beImmutable.	tracker when: Modified do: [ :a | happened := a subject = target ].	self should: [	target x: 10] raise: NoModificationError.	self deny: happened.	self assert: target x = 5</body><body package="WriteBarriers-Tests">testUntrackedReturnValue	|  target returnValue |	target := 'abcde' copy.	target beImmutable.	[returnValue := target at: 1 put: $z] on: NoModificationError do: [:ex | ex resume].	self assert: returnValue == $z.</body></methods><methods><class-id>WriteBarriers.TrackerTest</class-id> <category>testing</category><body package="WriteBarriers-Tests">testAdoptInstance	| target happened |	happened := false.	target := 'testing' copy.	tracker track: target.	tracker when: Modified do: [ :a | happened := a subject = target ].	ByteArray adoptInstance: target.	self assert: target class = ByteArray.	self assert: happened</body><body package="WriteBarriers-Tests">testArray	|  target happened |	happened := false.	target := (Array with: 5 with: 4).	tracker track: target.	tracker when: Modified do: [ :a | happened := a subject = target ].	target at: 1 put: 7.	self assert: happened.</body><body package="WriteBarriers-Tests">testLifeCycle	self assert: (WriteBarriers.Tracker.Trackers includes: tracker).	tracker release.	self deny: (WriteBarriers.Tracker.Trackers includes: tracker).	tracker := nil.</body><body package="WriteBarriers-Tests">testPoint	| target happened |	happened := false.	target := 5 @ 4.	tracker track: target.	tracker when: Modified do: [ :a | happened := a subject = target ].	self assert: (target x: 10) == target.	self assert: happened.	self assert: target x = 10.</body><body package="WriteBarriers-Tests">testRejectingModificationOfPoint	| target happened |	happened := false.	target := 5 @ 4.	otherTracker track: target.	tracker when: Modified do: [ :a | happened := a subject = target ].	self assert: (target x: 10) == target.	self deny: happened.	self assert: target x = 5</body><body package="WriteBarriers-Tests">testTrackImmutable	| object |	object := Object new.	object beImmutable.	self should: [object trackWith: tracker] raise: CannotTrackError</body><body package="WriteBarriers-Tests">testTrackSymbol	self should: [#test trackWith: tracker] raise: CannotTrackError</body><body package="WriteBarriers-Tests">testTrackedByTwoTrackers	| target happened |	target := 5 @ 4.	tracker track: target.	otherTracker track: target.	tracker when: Modified do: [ :a | happened := a subject = target ].	self assert: (target x: 10) == target.	self assert: happened.	self assert: target x = 10</body><body package="WriteBarriers-Tests">testTrackedReturnValue	|  target happened |	happened := false.	target := (Array with: 5 with: 4).	tracker track: target.	tracker when: Modified do: [ :a | happened := a subject = target ].	self assert: (target at: 1 put: 7) = 7.	self assert: happened.</body><body package="WriteBarriers-Tests">testUntrackAfterTrackedByTwoTrackers	| target |	target := Object new.	self deny: target hasTrackers.	self assert: target trackers isEmpty.	self deny: target isImmutable.	tracker track: target.	self assert: target hasTrackers.	self assert: target trackers size = 1.	self assert: target isImmutable.	otherTracker track: target.	self assert: target hasTrackers.	self assert: target trackers size = 2.	self assert: target isImmutable.	tracker untrack: target.	self assert: target hasTrackers.	self assert: target trackers size = 1.	self assert: target isImmutable.	otherTracker untrack: target.	self deny: target hasTrackers.	self assert: target trackers isEmpty.	self deny: target isImmutable</body></methods><methods><class-id>WriteBarriers.TrackerTest</class-id> <category>initialize-release</category><body package="WriteBarriers-Tests">setUp 	super setUp.	tracker := AnnouncingTracker new.	otherTracker := RejectingTracker new</body><body package="WriteBarriers-Tests">tearDown	otherTracker ifNotNil: [otherTracker release].	tracker ifNotNil: [tracker release].	super tearDown</body></methods><methods><class-id>WriteBarriers.Modified</class-id> <category>accessing</category><body package="WriteBarriers-Tests">subject	^subject</body><body package="WriteBarriers-Tests">subject: anObject	subject := anObject</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Announcement</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Announcements</category><attributes><package>System-Announcements</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>Tracker</name><environment>WriteBarriers</environment><super>Core.Announcer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ModificationManagementToo</category><attributes><package>WriteBarriers</package></attributes></class></st-source>