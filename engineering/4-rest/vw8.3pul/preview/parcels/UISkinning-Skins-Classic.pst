<?xml version="1.0"?><st-source><!-- Name: UISkinning-Skins-ClassicNotice: Copyright 2016-2017 Cincom Systems, Inc.  All rights reserved.Comment: This package contains Classic skins that use the original text attributes expected by legacy applications using the pre-skinning look policies implemented by subclasses of UILookPolicy.DbIdentifier: bear73DbTrace: 503152DbUsername: smichaelDbVersion: 8.3 - 4PackageName: UISkinning-Skins-ClassicParcel: #('UISkinning-Skins-Classic')ParcelName: UISkinning-Skins-ClassicPrintStringCache: (8.3 - 4,smichael)Version: 8.3 - 4Pre-Unload Block: 	[:package | UI.Skins.Classic.ClassicSkin preUnloadAction]Date: 1:19:09 PM July 14, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jul17.2) of July 14, 2017 on July 14, 2017 at 1:19:09 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Classic</name><environment>UI.Skins</environment><private>false</private><imports>			private Smalltalk.*			private Smalltalk.UI.Skins.*			private Smalltalk.UI.Skins.Artists.*			</imports><category></category><attributes><package>UISkinning-Skins-Classic</package></attributes></name-space><class><name>ClassicSkin</name><environment>UI.Skins.Classic</environment><super>UI.Skins.Windows.WindowsEmulatedSkin</super><private>false</private><indexed-type>none</indexed-type><inst-vars>defaultTextStyle useSystemFontOnWidgets </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>UISkinning-Skins-Classic</package></attributes></class><comment><class-id>UI.Skins.Classic.ClassicSkin</class-id><body>The abstract superclass for Classic Skins.These skins use the more modern assets from the Windows Emulated Skin along with a special skinning font policy that preserves the text attributes and font sizes expected by applications developed in prior versions of VisualWorks.Each Classic Skin holds a default text style that is used in all its text views. This default can be changed using UI.Skins.SkinRegistry setDefaultTo:, which will ask existing views to redisplay with the new style. Instance Variables	defaultTextStyle		&lt;TextAttributes&gt;	The cached #default text style as defined in the textStyles dictionary	useSystemFontOnWidgets 	&lt;Boolean&gt;	Whether or not to use the defined system font on widgetsObject reference:The text attributes and font descriptions from the pre-skinning subclasses of UILook Policy are implemented here in the form of a selectable skin.</body></comment><class><name>ClassicMotifSkin</name><environment>UI.Skins.Classic</environment><super>UI.Skins.Classic.ClassicSkin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>UISkinning-Skins-Classic</package></attributes></class><comment><class-id>UI.Skins.Classic.ClassicMotifSkin</class-id><body>ClassicMotifSkin approximates the look provided by the pre-skinning UI.MotifLookPolicy.</body></comment><class><name>ClassicCharacterAttributes</name><environment>UI</environment><super>Graphics.VariableCharacterAttributes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>platformQuery platId queryCacheQuery </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UISkinning-Base</category><attributes><package>UISkinning-Skins-Classic</package></attributes></class><comment><class-id>UI.ClassicCharacterAttributes</class-id><body>ClassicCharacterAttributes tries to use a platform specific FontDescription unless the classic skin emulation is for a different platform, in which case ClassicCharacterAttributes uses a portable FontDescription.Instance Variables:	platformQuery &lt;FontDescription&gt; The platform specific font description	platId &lt;Symbol&gt; The platID to match against OSHandles	queryCacheQuery &lt;Symbol&gt; base query for which the cache is validObject Reference:ClassicCharacterAttributes has both a font description that is tailored to a specific operating system and portable font description. It enforces a preference for the platform-specific font when the application is running on that platform. This class is used exclusively by the VisualWorks Classic skins. </body></comment><class><name>ClassicWin95Skin</name><environment>UI.Skins.Classic</environment><super>UI.Skins.Classic.ClassicSkin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>UISkinning-Skins-Classic</package></attributes></class><comment><class-id>UI.Skins.Classic.ClassicWin95Skin</class-id><body>ClassicWin95Skin approximates the look provided by the pre-skinning UI.Win95LookPolicy.</body></comment><class><name>ClassicWin98Skin</name><environment>UI.Skins.Classic</environment><super>UI.Skins.Classic.ClassicWin95Skin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>UISkinning-Skins-Classic</package></attributes></class><comment><class-id>UI.Skins.Classic.ClassicWin98Skin</class-id><body>ClassicWin98Skin approximates the look provided by the pre-skinning UI.Win98LookPolicy.</body></comment><class><name>ClassicMacOSXSkin</name><environment>UI.Skins.Classic</environment><super>UI.Skins.Classic.ClassicSkin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>UISkinning-Skins-Classic</package></attributes></class><comment><class-id>UI.Skins.Classic.ClassicMacOSXSkin</class-id><body>ClassicMacOSXSkin approximates the look provided by the pre-skinning UI.MacOSXLookPolicy.</body></comment><class><name>ClassicWinXPSkin</name><environment>UI.Skins.Classic</environment><super>UI.Skins.Classic.ClassicWin95Skin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>UISkinning-Skins-Classic</package></attributes></class><comment><class-id>UI.Skins.Classic.ClassicWinXPSkin</class-id><body>ClassicWinXPSkin approximates the look provided by the pre-skinning UI.WinXPLookPolicy.</body></comment><methods><class-id>UI.Skins.Classic.ClassicSkin</class-id> <category>private - fonts</category><body package="UISkinning-Skins-Classic">getSystemAttributes	^self subclassResponsibility</body><body package="UISkinning-Skins-Classic">getSystemMenuAttributes	"For Classic Skins the TextAttributes for menus are the same as the basic system TextAttributes."	^self getSystemAttributes</body><body package="UISkinning-Skins-Classic">globalDPIScaleFactor	"Enforce the legacy behavior here."	^1</body></methods><methods><class-id>UI.Skins.Classic.ClassicSkin</class-id> <category>skinned control - tab</category><body package="UISkinning-Skins-Classic">tabArtistForView: view	| height |	^self newArtist: #tab forView: view usingPrototype: [		| extent |		extent := self openTheme: 'Tab' andDCDuring: [ :theme :hdc |			self extentOfPart: #TABP_TABITEMBOTHEDGE state: #TIBES_NORMAL theme: theme dc: hdc		].		height := ((extent y) * 1.5) rounded.		(TabArtist withSkin: self)			height: height;			baseline: (self baselineToCenterTextInHeight: height);			margin: (4 @ 4 corner: 4 @ 3);			itemLeftMargin: 8;			itemRightMargin: 8;			separatorWidth: 1;			lastItemRightPadding: 2;			yourself	]</body></methods><methods><class-id>UI.Skins.Classic.ClassicSkin</class-id> <category>initialize-release</category><body package="UISkinning-Skins-Classic">clearCaches	super clearCaches.	defaultTextStyle := nil</body></methods><methods><class-id>UI.Skins.Classic.ClassicSkin</class-id> <category>compatibility</category><body package="UISkinning-Skins-Classic">systemWidgetTextAttributes	"Obsolete - for compatibility only."	^self textAttributesForWidgets</body></methods><methods><class-id>UI.Skins.Classic.ClassicSkin</class-id> <category>delegation</category><body package="UISkinning-Skins-Classic">defaultTextStyle	"Answer a copy of the cached default TextAttributes"	^self defaultTextStyleNoCopy copy</body><body package="UISkinning-Skins-Classic">defaultTextStyleNoCopy	"The common text style used by a Classic Skin when a component specifies #default or does not set a style.	 This can be altered in the Settings Tool with Tools &gt; Text size, or with SkinRegistry class&gt;&gt;setDefaultTo:"	defaultTextStyle == nil ifTrue: [defaultTextStyle := self textStyles at: #default].	^defaultTextStyle</body></methods><methods><class-id>UI.Skins.Classic.ClassicSkin</class-id> <category>skinned control - menu</category><body package="UISkinning-Skins-Classic">menuArtistForView: view	"No need to copy TextAttributes here, since we only access its properties."	^self newArtist: #menu forView: view usingPrototype: [		(MenuArtist withSkin: self)			separatorHeight: 5;			itemHeight: (self textAttributesForMenubar lineGrid * 1.2) ceiling;			insets: (2 @ 2 corner: 2 @ 2);			yourself	]</body></methods><methods><class-id>UI.Skins.Classic.ClassicSkin</class-id> <category>private - text styles</category><body package="UISkinning-Skins-Classic">setDefaultTo: aTextStyleSymbol	"PRIVATE: For use by UI.Skins.SkinRegistry utilities only."	defaultTextStyle := self textStyles at: aTextStyleSymbol.</body><body package="UISkinning-Skins-Classic">standardVariableWidthFont	"The base font size for any of the Classic Skins is always 12."	^FontDescription new		family: #('helv' 'helvetica' 'arial' 'nimbus sans*' '*sans*' '*');		fixedWidth: false;		serif: false;		italic: false;		pixelSize: (self globalDPIScaleFactor * 12) floor;		boldness: 0.5;		setDefaultEncodings</body></methods><methods><class-id>UI.Skins.Classic.ClassicSkin</class-id> <category>accessing - fonts</category><body package="UISkinning-Skins-Classic">systemTextStyle	"If the flag is not set to true, we use the current defaultTextStyle which is controlled by the setting: Tools &gt; Text Size."	^self useSystemFontsOnWidgets		ifTrue: [self textAttributesForWidgets copy]		ifFalse: [self defaultTextStyle].</body><body package="UISkinning-Skins-Classic">textAttributesForLists	"Legacy SequenceView.ListStyle, and TextList.ListStyle"	textAttributesForLists ifNil: [			textAttributesForLists := self defaultTextStyle copy.		textAttributesForLists gridForFont: nil withLead: 0].	^textAttributesForLists</body><body package="UISkinning-Skins-Classic">textAttributesForMenubar	"Create and cache a unique object with TextAttributes for text labels on menus using this skin."	textAttributesForMenubar ifNil: [		textAttributesForMenubar := self getSystemMenuAttributes].	^textAttributesForMenubar</body><body package="UISkinning-Skins-Classic">textAttributesForWidgets	"Create and cache a unique object containing the TextAttributes for widgets using this skin."	textAttributesForWidgets ifNil: [			textAttributesForWidgets := self getSystemAttributes].	^textAttributesForWidgets</body><body package="UISkinning-Skins-Classic">useSystemFontsOnWidgets	^useSystemFontOnWidgets ~~ false</body></methods><methods><class-id>UI.Skins.Classic.ClassicSkin class</class-id> <category>private - actions</category><body package="UISkinning-Skins-Classic">preUnloadAction	"Cannot unload the package if a Classic skin is currently in use by the image."	self allGeneralInstances isEmpty ifFalse: [		('vwClassic*' match: SkinRegistry factoryMethodSelector) ifTrue: [			Dialog warn: (#ClassicSkinInUse &lt;&lt; #dialogs &gt;&gt; 'One of the Classic Skins is currently in use.&lt;n&gt;Switching to the platform Native skin before unloading the package.' expandMacros).			SkinRegistry factoryMethodSelector: #nativeSkin]]</body></methods><methods><class-id>UI.Skins.Classic.ClassicMotifSkin</class-id> <category>private - fonts</category><body package="UISkinning-Skins-Classic">getSystemAttributes	^self defaultTextStyle</body><body package="UISkinning-Skins-Classic">labelDisplayAsBold	"Display the Label (when provided as a String) in PassiveLabel or GroupBox with bold text."	^true</body></methods><methods><class-id>UI.ClassicCharacterAttributes</class-id> <category>initialize-release</category><body package="UISkinning-Skins-Classic">setPlatformId: aSymbol	"Set the platform specific id  to aSymbol.	 This is compaired against OSHandle platId."	platId := aSymbol</body><body package="UISkinning-Skins-Classic">setPlatformQuery: aFontDescription	"Set the platform specific FontDescription to aFontDescription."	platformQuery := aFontDescription</body><body package="UISkinning-Skins-Classic">setPortableQuery: aFontDescription	"Set the portable FontDescription to aFontDescription."	defaultQuery := aFontDescription</body></methods><methods><class-id>UI.ClassicCharacterAttributes</class-id> <category>private</category><body package="UISkinning-Skins-Classic">defaultQueryFor: aFontPolicy	"Answer the platformQuery if platId is OsHandle currentOS, otherwise answer defaultQuery."	^platId == aFontPolicy graphicsDevice rendererName		ifTrue: [platformQuery]		ifFalse: [defaultQuery]</body><body package="UISkinning-Skins-Classic">queryCacheAt: aStyle for: aFontPolicy ifAbsent: aBlock	"Assertion: if queryCache == nil (uninitialized), then		queryCacheQuery == nil and ~~ defaultQuery."	queryCacheQuery == (self defaultFontFor: aFontPolicy) ifFalse: [		queryCacheQuery := self defaultFontFor: aFontPolicy.		self invalidateOnlyQueryCache].	^super queryCacheAt: aStyle for: aFontPolicy ifAbsent: aBlock</body><body package="UISkinning-Skins-Classic">queryCacheAt: aStyle for: aFontPolicy put: query	"Assertion: if queryCache == nil (uninitialized), then		queryCacheQuery == nil and ~~ defaultQuery."	queryCacheQuery == (self defaultFontFor: aFontPolicy) ifFalse: [		queryCacheQuery := self defaultFontFor: aFontPolicy.		self invalidateOnlyQueryCache].	^super queryCacheAt: aStyle for: aFontPolicy put: query</body><body package="UISkinning-Skins-Classic">setDefaultQuery: aFontDescription for: aFontPolicy	"Set the default FontDescription query for this platform.	 NOTE: This message is sent by VariableSizeTextAttribues&gt;updateBasedOn: on image setup to set the correct pixel size."	updatedQuery := nil.	self invalidateQueryCache.	^platId == aFontPolicy graphicsDevice rendererName		ifTrue: [platformQuery := aFontDescription]		ifFalse: [defaultQuery := aFontDescription]</body></methods><methods><class-id>UI.Skins.Classic.ClassicWin95Skin</class-id> <category>private - fonts</category><body package="UISkinning-Skins-Classic">getSystemAttributes	| characterAttributes textAttributes |	characterAttributes := ClassicCharacterAttributes newWithDefaultAttributes.	characterAttributes		setPlatformId: #'MS-Windows';		setPlatformQuery: ((FontDescription new)				family: self platformQueryFontFamily;				boldness: 0.5);		setPortableQuery: ((FontDescription new)				family: self portableQueryFontFamily;				boldness: 0.5;				serif: false);		at: #bold put: [:query | query boldness: 0.8].	textAttributes := VariableSizeTextAttributes new.	textAttributes		setCharacterAttributes: characterAttributes;		scalingFactor: self systemFontScale;		install.	^textAttributes</body><body package="UISkinning-Skins-Classic">platformQueryFontFamily	^#('ms sans serif' 'arial' 'helv*' '*sans*' '*')</body><body package="UISkinning-Skins-Classic">portableQueryFontFamily	^#('helv*' '*sans*' '*')</body><body package="UISkinning-Skins-Classic">systemFontScale	^0.925</body></methods><methods><class-id>UI.Skins.Classic.ClassicWin98Skin</class-id> <category>private - fonts</category><body package="UISkinning-Skins-Classic">portableQueryBoldness	^0.7</body></methods><methods><class-id>UI.Skins.Classic.ClassicMacOSXSkin</class-id> <category>private - fonts</category><body package="UISkinning-Skins-Classic">getSystemAttributes	| characterAttributes textAttributes |	characterAttributes := ClassicCharacterAttributes newWithDefaultAttributes.	characterAttributes		setPlatformId: #MacOSX;		setPlatformQuery: ((FontDescription new)				family: self platformQueryFontFamily;				italic: false);		setPortableQuery: ((FontDescription new)				family: self portableQueryFontFamily;				serif: false;				italic: false).	textAttributes := VariableSizeTextAttributes new.	textAttributes 		setCharacterAttributes: characterAttributes;		fontAttributeForLeading: #normal;		install.	^textAttributes</body><body package="UISkinning-Skins-Classic">labelDisplayAsBold	"Display the Label (when provided as a String) in PassiveLabel or GroupBox with bold text."	^true</body><body package="UISkinning-Skins-Classic">platformQueryFontFamily	^#('Helvetica')</body><body package="UISkinning-Skins-Classic">portableQueryFontFamily	^#('lucida*' 'helv*' '*sans*' '*')</body></methods><methods><class-id>UI.Skins.Classic.ClassicWinXPSkin</class-id> <category>private - fonts</category><body package="UISkinning-Skins-Classic">platformQueryFontFamily	^#('tahoma' 'arial' 'helv*' '*sans*' '*')</body><body package="UISkinning-Skins-Classic">systemFontScale	^0.8</body></methods><methods><class-id>UI.Skins.Classic.ClassicMotifSkin</class-id> <category>private - text styles</category><body package="UISkinning-Skins-Classic">textStyleDefault	&lt;textStyleNamed: #systemDefault&gt;	&lt;textStyleNamed: #default&gt;	^self basicTextStyleDefault</body><body package="UISkinning-Skins-Classic">textStyleFixed	&lt;textStyleNamed: #fixed&gt;	^self basicTextStyleFixed</body><body package="UISkinning-Skins-Classic">textStyleLarge	&lt;textStyleNamed: #large&gt;	^self basicTextStyleLarge</body><body package="UISkinning-Skins-Classic">textStyleSmall	&lt;textStyleNamed: #small&gt;	^self basicTextStyleSmall</body></methods><methods><class-id>UI.Skins.Classic.ClassicWin95Skin</class-id> <category>private - text styles</category><body package="UISkinning-Skins-Classic">textStyleDefault	&lt;textStyleNamed: #systemDefault&gt;	&lt;textStyleNamed: #default&gt;	^self basicTextStyleDefault</body><body package="UISkinning-Skins-Classic">textStyleFixed	&lt;textStyleNamed: #fixed&gt;	^self basicTextStyleFixed</body><body package="UISkinning-Skins-Classic">textStyleLarge	&lt;textStyleNamed: #large&gt;	^self basicTextStyleLarge</body><body package="UISkinning-Skins-Classic">textStyleSmall	&lt;textStyleNamed: #small&gt;	^self basicTextStyleSmall</body></methods><methods><class-id>UI.Skins.Classic.ClassicWin98Skin</class-id> <category>private - text styles</category><body package="UISkinning-Skins-Classic">textStyleDefault	&lt;textStyleNamed: #systemDefault&gt;	&lt;textStyleNamed: #default&gt;	^self basicTextStyleDefault</body><body package="UISkinning-Skins-Classic">textStyleFixed	&lt;textStyleNamed: #fixed&gt;	^self basicTextStyleFixed</body><body package="UISkinning-Skins-Classic">textStyleLarge	&lt;textStyleNamed: #large&gt;	^self basicTextStyleLarge</body><body package="UISkinning-Skins-Classic">textStyleSmall	&lt;textStyleNamed: #small&gt;	^self basicTextStyleSmall</body></methods><methods><class-id>UI.Skins.Classic.ClassicMacOSXSkin</class-id> <category>private - text styles</category><body package="UISkinning-Skins-Classic">textStyleDefault	&lt;textStyleNamed: #systemDefault&gt;	&lt;textStyleNamed: #default&gt;	^self basicTextStyleDefault</body><body package="UISkinning-Skins-Classic">textStyleFixed	&lt;textStyleNamed: #fixed&gt;	^self basicTextStyleFixed</body><body package="UISkinning-Skins-Classic">textStyleLarge	&lt;textStyleNamed: #large&gt;	^self basicTextStyleLarge</body><body package="UISkinning-Skins-Classic">textStyleSmall	&lt;textStyleNamed: #small&gt;	^self basicTextStyleSmall</body></methods><methods><class-id>UI.Skins.Classic.ClassicWinXPSkin</class-id> <category>private - text styles</category><body package="UISkinning-Skins-Classic">textStyleDefault	&lt;textStyleNamed: #systemDefault&gt;	&lt;textStyleNamed: #default&gt;	^self basicTextStyleDefault</body><body package="UISkinning-Skins-Classic">textStyleFixed	&lt;textStyleNamed: #fixed&gt;	^self basicTextStyleFixed</body><body package="UISkinning-Skins-Classic">textStyleLarge	&lt;textStyleNamed: #large&gt;	^self basicTextStyleLarge</body><body package="UISkinning-Skins-Classic">textStyleSmall	&lt;textStyleNamed: #small&gt;	^self basicTextStyleSmall</body></methods><methods><class-id>UI.EmulatedComboBoxArtist class</class-id> <category>accessing</category><body package="UISkinning-Skins-Classic">classicConfiguration	&lt;view: #{ComboBoxWrapper} skin: #vwClassicMacOSX variant: #default&gt;	&lt;view: #{ComboBoxWrapper} skin: #vwClassicMotif variant: #default&gt;	&lt;view: #{ComboBoxWrapper} skin: #vwClassicWindows95 variant: #default&gt;	&lt;view: #{ComboBoxWrapper} skin: #vwClassicWindows98 variant: #default&gt;	&lt;view: #{ComboBoxWrapper} skin: #vwClassicWindowsXP variant: #default&gt;</body></methods><methods><class-id>UI.EmulatedStatusBarArtist class</class-id> <category>accessing</category><body package="UISkinning-Skins-Classic">classicConfiguration	&lt;view: #{ToolBarView} skin: #vwClassicMacOSX variant: #statusbar&gt;	&lt;view: #{ToolBarView} skin: #vwClassicMotif variant: #statusbar&gt;	&lt;view: #{ToolBarView} skin: #vwClassicWindows95 variant: #statusbar&gt;	&lt;view: #{ToolBarView} skin: #vwClassicWindows98 variant: #statusbar&gt;	&lt;view: #{ToolBarView} skin: #vwClassicWindowsXP variant: #statusbar&gt;	&lt;view: #{ToolBarDividerView} skin: #vwClassicMacOSX variant: #statusbar&gt;	&lt;view: #{ToolBarDividerView} skin: #vwClassicMotif variant: #statusbar&gt;	&lt;view: #{ToolBarDividerView} skin: #vwClassicWindows95 variant: #statusbar&gt;	&lt;view: #{ToolBarDividerView} skin: #vwClassicWindows98 variant: #statusbar&gt;	&lt;view: #{ToolBarDividerView} skin: #vwClassicWindowsXP variant: #statusbar&gt;</body></methods><methods><class-id>UI.EmulatedInputFieldArtist class</class-id> <category>accessing</category><body package="UISkinning-Skins-Classic">classicConfiguration	&lt;view: #{InputFieldWrapper} skin: #vwClassicMacOSX variant: #default&gt;	&lt;view: #{InputFieldWrapper} skin: #vwClassicMotif variant: #default&gt;	&lt;view: #{InputFieldWrapper} skin: #vwClassicWindows95 variant: #default&gt;	&lt;view: #{InputFieldWrapper} skin: #vwClassicWindows98 variant: #default&gt;	&lt;view: #{InputFieldWrapper} skin: #vwClassicWindowsXP variant: #default&gt;</body></methods><methods><class-id>UI.EmulatedToolBarArtist class</class-id> <category>accessing</category><body package="UISkinning-Skins-Classic">classicConfiguration	&lt;view: #{ToolBarView} skin: #vwClassicMacOSX variant: #default&gt;	&lt;view: #{ToolBarView} skin: #vwClassicMotif variant: #default&gt;	&lt;view: #{ToolBarView} skin: #vwClassicWindows95 variant: #default&gt;	&lt;view: #{ToolBarView} skin: #vwClassicWindows98 variant: #default&gt;	&lt;view: #{ToolBarView} skin: #vwClassicWindowsXP variant: #default&gt;	&lt;view: #{ToolBarDividerView} skin: #vwClassicMacOSX variant: #default&gt;	&lt;view: #{ToolBarDividerView} skin: #vwClassicMotif variant: #default&gt;	&lt;view: #{ToolBarDividerView} skin: #vwClassicWindows95 variant: #default&gt;	&lt;view: #{ToolBarDividerView} skin: #vwClassicWindows98 variant: #default&gt;	&lt;view: #{ToolBarDividerView} skin: #vwClassicWindowsXP variant: #default&gt;</body></methods><methods><class-id>UI.Skins.SkinRegistry class</class-id> <category>skins</category><body package="UISkinning-Skins-Classic">vwClassicMacOSXSkin	&lt;skin: 'VW Classic MacOS X'&gt;	^UI.Skins.Classic.ClassicMacOSXSkin current</body><body package="UISkinning-Skins-Classic">vwClassicMotifSkin	&lt;skin: 'VW Classic Motif'&gt;	^UI.Skins.Classic.ClassicMotifSkin current</body><body package="UISkinning-Skins-Classic">vwClassicWindows95Skin	&lt;skin: 'VW Classic Windows 95/NT'&gt;	^UI.Skins.Classic.ClassicWin95Skin current</body><body package="UISkinning-Skins-Classic">vwClassicWindows98Skin	&lt;skin: 'VW Classic Windows 98/2000'&gt;	^UI.Skins.Classic.ClassicWin98Skin current</body><body package="UISkinning-Skins-Classic">vwClassicWindowsXPSkin	&lt;skin: 'VW Classic Windows XP'&gt;	^UI.Skins.Classic.ClassicWinXPSkin current</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WindowsEmulatedSkin</name><environment>UI.Skins.Windows</environment><super>UI.Skins.Windows.UxThemeBasedSkin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>UISkinning-Skins-Windows</package></attributes></class><class><name>VariableCharacterAttributes</name><environment>Graphics</environment><super>Graphics.CharacterAttributes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>updatedQuery scale doScaling </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Internationalization</category><attributes><package>Internationalization</package></attributes></class></st-source>