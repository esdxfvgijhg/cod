<?xml version="1.0"?><st-source><!-- Name: OS-Sockets-IPv6-TestsNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.DbIdentifier: bear73DbTrace: 406416DbUsername: mkobeticDbVersion: 7.10 - 2DevelopmentPrerequisites: #(#(#any 'OS-Sockets-IPv6' '') #(#any 'SUnit' ''))PackageName: OS-Sockets-IPv6-TestsParcel: #('OS-Sockets-IPv6-Tests')PrerequisiteDescriptions: #(#(#name 'OS-Sockets-IPv6' #componentType #package) #(#name 'SUnit' #componentType #package))PrerequisiteParcels: #(#('OS-Sockets-IPv6' '') #('SUnit' ''))PrintStringCache: (7.10 - 2,mkobetic)Version: 7.10 - 2Date: 10:13:01 AM May 10, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (may13.2) of May 10, 2013 on May 10, 2013 at 10:13:01 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>IPv6SocketAccessorTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OS-Sockets-IPv6-Tests</package></attributes></class><class><name>IPv6SocketAddressTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OS-Sockets-IPv6-Tests</package></attributes></class><methods><class-id>IPv6SocketAccessorTest</class-id> <category>testing</category><body package="OS-Sockets-IPv6-Tests">testCreate	| sock |	self shouldnt: 			[sock := SocketAccessor						family: SocketAccessor AF_INET6						type: SocketAccessor SOCK_STREAM						protocol: SocketAccessor PF_UNSPEC]		raise: OSErrorHolder unsupportedOperationSignal.	self assert: sock getName hostAddress = IPv6SocketAddress thisHost.	self should: 			[sock := SocketAccessor						family: SocketAccessor AF_INET6						type: SocketAccessor SOCK_STREAM						protocol: SocketAccessor IPPROTO_IPV6]		raise: OSErrorHolder unsupportedOperationSignal</body><body package="OS-Sockets-IPv6-Tests">testGetSetOptions	| sock value |	self shouldnt: 			[sock := SocketAccessor						family: SocketAccessor AF_INET6						type: SocketAccessor SOCK_STREAM						protocol: SocketAccessor PF_UNSPEC]		raise: OSErrorHolder unsupportedOperationSignal.	value := sock getOptionsLevel: SocketAccessor IPPROTO_IPV6				name: SocketAccessor IPV6_V6ONLY.	self assert: value = #[0 0 0 0].	self shouldnt: 			[sock				setOptionsLevel: SocketAccessor IPPROTO_IPV6				name: SocketAccessor IPV6_V6ONLY				value: #[0 0 0 0]]		raise: OSErrorHolder unsupportedOperationSignal</body><body package="OS-Sockets-IPv6-Tests">testTcpConnection	| address listener server client |	address := IPv6SocketAddress hostName: '::1' port: 0.	listener := SocketAccessor family: SocketAccessor AF_INET6 type: SocketAccessor SOCK_STREAM.	[	listener bindTo: address; listenFor: 1.		address := listener getName.		self assert: (address isKindOf: IPv6SocketAddress) description: 'address class is not IPv6'.		self deny: address port isZero description: 'listening port is not set'.		client := SocketAccessor family: SocketAccessor AF_INET6 type: SocketAccessor SOCK_STREAM.		[	client connectTo: address.			self assert: client getPeer = address description: 'server address does not match'.			server := listener accept.			self assert: server getPeer = client getName description: 'client address does not match'.		] ifCurtailed: [ client close ].	] ensure: [ listener close ].	[	| wbuf rbuf |		wbuf := #[7 2 1 7 2 1].		self deny: (client writeWaitWithTimeoutMs: 100) description: 'timed out 1'.		self assert: (client writeFrom: wbuf startingAt: 1 for: 6) = 6 description: 'write size mismatch'.		rbuf := ByteArray new: 6.		self deny: (server readWaitWithTimeoutMs: 100) description: 'timed out 2'.		self assert: (server readInto: rbuf startingAt: 1 for: 3) = 3 description: 'read size mismatch 1'.		self deny: (server readWaitWithTimeoutMs: 100) description: 'timed out 3'.		self assert: (server readInto: rbuf startingAt: 4 for: 3) = 3 description: 'read size mismatch 2'.		self assert: rbuf = wbuf.	] ensure: [ client close. server close ].</body></methods><methods><class-id>IPv6SocketAddressTest</class-id> <category>testing</category><body package="OS-Sockets-IPv6-Tests">testBytesToName	| data |	data := Dictionary new.	data at: '::ffff:10.100.3.62' put: '::ffff:a64:33e'.	"IPv4-mapped"	data at: '::10.100.3.62' put: '::a64:33e'.	"IPv4-compat (deprecated)"	data at: '::1' put: '::1'.	"loopback address"	data at: '::' put: '::'.	"unspecified address"	data at: 'fe80::4687:fcff:fee9:d4fa' put: 'fe80::4687:fcff:fee9:d4fa'.	"link-local"	data at: '2001:470:1f01:1815::40' put: '2001:470:1f01:1815::40'.	"global unicast"	data keysAndValuesDo: 			[:in :out |			| bytes string |			bytes := IPv6SocketAddress stringToBytes: in.			string := IPv6SocketAddress bytesToName: bytes.			self should: out = string]</body><body package="OS-Sockets-IPv6-Tests">testPortLookup	self assert: (IPv6SocketAddress serviceNameByPort: 514)				= (IPv6SocketAddress serviceNameByPort: #[2 2]).	self assert: (IPv6SocketAddress servicePortByName: 'shell')				= (IPv6SocketAddress servicePortByName: 'syslog').	self assert: (IPv6SocketAddress serviceNameByPort: 513)				= (IPv6SocketAddress serviceNameByPort: #[2 1]).	self assert: (IPv6SocketAddress servicePortByName: 'login')				= (IPv6SocketAddress servicePortByName: 'who').	self assert: (IPv6SocketAddress serviceNameByPort: 512)				= (IPv6SocketAddress serviceNameByPort: #[2 0]).	self assert: (IPv6SocketAddress servicePortByName: 'exec')				= (IPv6SocketAddress servicePortByName: 'biff')</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class></st-source>