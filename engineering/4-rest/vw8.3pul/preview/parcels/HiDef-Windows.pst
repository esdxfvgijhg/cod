<?xml version="1.0"?><st-source><!-- Name: HiDef-WindowsComment: HiDef-Windows adds an expression to the startup code that causes a suitable Windows VM to become hi-dpi aware, and modifies various image-level code to the new behavior that is triggered by that change.The expression is in BasicGraphicsSystem, and to take effect it must happen before the Screen is opened. Loading the parcel and running BasicGraphicsSystem's setUp will not be enough. The image must be saved and then restarted.The code changes should be robust if run on an older VM that does not have the support needed, but the result in that case should be no different than if this parcel was not loaded.DbIdentifier: bear73DbTrace: 499994DbUsername: traabeDbVersion: 8.3 - 1PackageName: HiDef-WindowsParcel: #('HiDef-Windows')PrintStringCache: (8.3 - 1,traabe)Version: 8.3 - 1Date: 10:14:16 AM April 7, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (apr17.1) of April 7, 2017 on April 7, 2017 at 10:14:16 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>UI.ScheduledWindow</class-id> <category>private</category><body package="HiDef-Windows">getDisplayBox	"Go and ask the window manager for the location and size of the receiver. 	This method is provided because Window &gt; displayBox is not always 	reliable, especially where OpenWindows is concerned."	| goods scale |	goods := self getDimensions.	scale := goods size &gt;= 7 ifTrue: [goods at: 7] ifFalse: [1].	^(((goods at: 1) @ (goods at: 2) extent: (goods at: 3) @ (goods at: 4))		scaledBy: 1/scale) rounded</body></methods><methods><class-id>UI.Skins.Windows.UxThemeDLL</class-id> <category>constants</category><body package="HiDef-Windows">MM_ANISOTROPIC	^8</body></methods><methods><class-id>Graphics.Screen</class-id> <category>private</category><body package="HiDef-Windows">installBoundingBox	| rectList |	rectList := self getScreenDimensions.	subRegions := rectList collect:			[:rectAsArray | | rect |			rect := Rectangle					left: (rectAsArray at: 1)					right: (rectAsArray at: 3)					top: (rectAsArray at: 2)					bottom: (rectAsArray at: 4).			rectAsArray size &gt; 4				ifTrue: [rect := (rect scaledBy: 1/(rectAsArray at: 5)) rounded].			rect].	boundingBox := subRegions				inject: (0 @ 0 corner: 0 @ 0)				into: [:rect1 :rect2 | rect1 merge: rect2]</body></methods><methods><class-id>Graphics.GraphicsHandle</class-id> <category>accessing</category><body package="HiDef-Windows">windowsScaleX	^[self floatAt: 21]			on: Error			do: [:ex | ex return: 1.0]</body><body package="HiDef-Windows">windowsScaleY	^[self floatAt: 25]			on: Error			do: [:ex | ex return: 1.0]</body></methods><methods><class-id>Graphics.BasicGraphicsSystem</class-id> <category>actions</category><body package="HiDef-Windows">setUp	"Explicitly activate our subclasses here. We do this because we have two possible subclasses, one for headless and one for headfull. Only one should activate, but we still want this to count as activating us, so we can't just list both as prerequisites."	super setUp.	[ObjectMemory registerObject: true withEngineFor: 'useWindowsHiDPI']		on: Error do: [].	self class allSubclassesDo: [:each |		each activate].	NativeGUIPolicy resetCaches.	UI.Skins.SkinRegistry resetSkinCaches</body></methods><methods><class-id>Graphics.Graphics64BitHandle</class-id> <category>accessing</category><body package="HiDef-Windows">windowsScaleX	^[self floatAt: 33]			on: Error			do: [:ex | ex return: 1.0]</body><body package="HiDef-Windows">windowsScaleY	^[self floatAt: 37]			on: Error			do: [:ex | ex return: 1.0]</body></methods><methods><class-id>Graphics.NativeGUIPolicyForWindows</class-id> <category>accessing - metrics</category><body package="HiDef-Windows">globalDPIScaleFactor	| win32 hdc resx |	win32 := Win32SystemSupport new.	hdc := win32 GetDC: nil.	resx := win32 GetDeviceCaps: hdc for: win32 LOGPIXELSX.	win32 ReleaseDC: nil with: hdc.	^resx / resx</body></methods><methods><class-id>Graphics.Window</class-id> <category>updating</category><body package="HiDef-Windows">updateDimensions	| array scale |	array := self getDimensions.	scale := array size &gt;= 7 ifTrue: [array at: 7] ifFalse: [1].	self changeCreationOrigin: ((array at: 1) @ (array at: 2) / scale) rounded.	width := ((array at: 3) / scale) rounded.	height := ((array at: 4) / scale) rounded - statusLineHeight.	self setIconic: (array at: 6)</body></methods><methods><class-id>UI.Skins.Windows.WindowsNativeSkin</class-id> <category>private - win32 drawing</category><body package="HiDef-Windows">dcForSurface: aDisplaySurface while: aBlock	"Manual type dispatch because a) nil is a value and b) this is platform-specific code."	aDisplaySurface ifNil: [ ^self dcWhile: aBlock ].	aDisplaySurface isWindow ifTrue: [		| hdc window |		window := aDisplaySurface windowHandle.		hdc := dll GetDC: window.		self scaleDC: hdc for: aDisplaySurface.		^[ aBlock cull: hdc cull: WindowsGCSelector new ] ensure: [ dll ReleaseDC: window with: hdc ]	].	aDisplaySurface isPixmap ifTrue: [		| hdc gcBitmap dcBitmap |		"http://www.winprog.org/tutorial/bitmaps.html"		hdc := dll CreateCompatibleDC: 0.		self scaleDC: hdc for: aDisplaySurface.		dcBitmap := aDisplaySurface handle hBitmap.		gcBitmap := dll SelectObject: hdc with: dcBitmap.		^[			aBlock cull: hdc cull: (WindowsGCSelector dll: dll hdc: hdc gcBitmap: gcBitmap dcBitmap: dcBitmap)		] ensure: [			dll SelectObject: hdc with: gcBitmap.			dll DeleteDC: hdc		]	]</body><body package="HiDef-Windows">scaleDC: dc for: surface	| handle x y scaleX scaleY |	handle := surface handle.	x := surface bounds width.	y := surface bounds height.	scaleX := handle windowsScaleX.	scaleY := handle windowsScaleY.	dll SetMapMode: dc with: dll MM_ANISOTROPIC.	dll SetWindowExtEx: dc with: x with: y with: nil.	dll SetViewportExtEx: dc with: (x*scaleX) truncated with: (y*scaleY) truncated with: nil.</body></methods><methods><class-id>UI.Skins.Windows.UxThemeDLL</class-id> <category>constants</category><body package="HiDef-Windows">SetMapMode: arg1 with: arg2	&lt;C: int SetMapMode(HDC arg1, int arg2)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Window</name><environment>Graphics</environment><super>Graphics.DisplaySurface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputOrigin creationOrigin sensor iconic windowType effectiveWindowType statusLineHeight allowsStatusLine mapped eventHandlers windowManager </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>ScheduledWindow</name><environment>UI</environment><super>Graphics.Window</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label icon minimumSize maximumSize component lookPreferences paintPreferences edgeDecorationPolicy widgetPolicy controller model damageRepairPolicy masterWindow activationNotification application dragDropInProgress dragDropTracker dropTarget keyboardProcessor receiveWindowEvents sendWindowEvents toolbarVisible windowEventBlock layoutIsInvalid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>Screen</name><environment>Graphics</environment><super>Graphics.HostGraphicsDevice</super><private>false</private><indexed-type>none</indexed-type><inst-vars>boundingBox subRegions resolution rendererName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>NativeGUIPolicyForWindows</name><environment>Graphics</environment><super>Graphics.NativeGUIPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>focusedBackground unfocusedBackground </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OS-Window System</package></attributes></class><class><name>GraphicsHandle</name><environment>Graphics</environment><super>Core.UninterpretedBytes</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>Graphics64BitHandle</name><environment>Graphics</environment><super>Graphics.GraphicsHandle</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>WindowsNativeSkin</name><environment>UI.Skins.Windows</environment><super>UI.Skins.Windows.UxThemeBasedSkin</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dll </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>UISkinning-Skins-Windows</package></attributes></class><class><name>UxThemeDLL</name><environment>UI.Skins.Windows</environment><super>OS.WindowsGraphicsSupport</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private UI.Skins.Windows.UxThemeDLLDictionary.*			</imports><category></category><attributes><includeFiles><item>vsstyle.h</item></includeFiles><includeDirectories><item>C:\Program Files\Microsoft SDKs\Windows\v7.0A\Include</item></includeDirectories><libraryFiles><item>UxTheme.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>UISkinning-Skins-Windows</package></attributes></class><class><name>BasicGraphicsSystem</name><environment>Graphics</environment><super>Core.Subsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class></st-source>