<?xml version="1.0"?><st-source><!-- Name: Grid-UIPainterNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Comment: UIPainter support for Grid widgetDbIdentifier: bear73DbTrace: 400318DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'UIPainter' '') #(#any 'Grid' ''))PackageName: Grid-UIPainterParcel: #('Grid-UIPainter')PrerequisiteParcels: #(#('UIPainter' '') #('Grid' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Post-Load Block: 	[:package | UIPalette initialize]Post-Unload Block: 	[ UIPalette initialize]Date: 6:45:51 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 6:45:51 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ColumnColorToolModel</name><environment>Tools</environment><super>Tools.ColorToolModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter</category><attributes><package>Grid-UIPainter</package></attributes></class><comment><class-id>Tools.ColumnColorToolModel</class-id><body>ColumnColorToolModel is the model used to assign, display and edit a color policy governing the appearance of a Grid column cell.</body></comment><class><name>GridCallbacksSpecModel</name><environment>Tools</environment><super>Tools.IntegratedSpecModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentColumn trigger </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter</category><attributes><package>Grid-UIPainter</package></attributes></class><comment><class-id>Tools.GridCallbacksSpecModel</class-id><body>ColumnCallbacksSpecModel is the model behind the Grid Column Validation and Notification slices.  It is responsible for holding values of the column's callbacks until the values are either accepted or canceled.Instance Variables:	currentColumn	&lt;&lt;ValueHolder on: GridColumn&gt;	ValueHolder on the GridColumnSpec for which the callbacks are currently being edited.	trigger	&lt;ValueHolder on: Boolean&gt;	ValueHolder used to trigger all of the instance's BufferedValueHolders</body></comment><class><name>RowSelectorModel</name><environment>Tools</environment><super>Tools.IntegratedSpecModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Grid-UIPainter</package></attributes></class><comment><class-id>Tools.RowSelectorModel</class-id><body>RowSelectorModel is the model underlying the UIPainterTool Basics slice for a Grid Row Header under edit in the UIPainterTool.  It is responsible for holding entries for the Row Header until its values are either accepted or canceled.</body></comment><class><name>GridEditTracker</name><environment>Tools</environment><super>Tools.DrawingModeTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>oldMode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Modes</category><attributes><package>Grid-UIPainter</package></attributes></class><comment><class-id>Tools.GridEditTracker</class-id><body>GridEditTracker is a SelectionTracker that processes events on behalf of a selected column PaintedGridView in the UIPainter canvas.Instance Variables	oldMode	&lt;SelectModeTracker&gt;	UIPalette currentMode instance to be restored after the PaintedGridView column is unselected in the UPainter canvas.</body></comment><class><name>GridDependencyAgent</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view propertiesTool </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid-UIPainter</category><attributes><package>Grid-UIPainter</package></attributes></class><comment><class-id>Tools.GridDependencyAgent</class-id><body>GridDependencyAgent is a helper class used to manage interactive column selections and moves in a PaintedGridView. This class is private to the implementation of Grid in the UIPainter.  Other users should not interface to this class and should not subclass it.Instance Variables:	propertiesTool	&lt;UIPainterTool&gt;		The UIPainterTool this instance assists.	view	&lt;PaintedGridView&gt;	The Grid view under edit in the UIPainter.</body></comment><class><name>GridSpecModel</name><environment>Tools</environment><super>Tools.IntegratedSpecModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter</category><attributes><package>Grid-UIPainter</package></attributes></class><comment><class-id>Tools.GridSpecModel</class-id><body>GridSpecModel is the model underlying the UIPainterTool Basics slice of a Grid under edit in the UIPainterTool.  It is responsible for holding entries for the Grid spec attributes until the values are either accepted or canceled.</body></comment><class><name>ColumnBasicsModel</name><environment>Tools</environment><super>Tools.IntegratedSpecModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter</category><attributes><package>Grid-UIPainter</package></attributes></class><comment><class-id>Tools.ColumnBasicsModel</class-id><body>ColumnBasicsModel is the model behind the Column basics slice of a Grid.  It is responsible for holding values of the column's basic properties until the values are either accepted or canceled.</body></comment><class><name>GridColumnSpecTracker</name><environment>Tools</environment><super>Tools.DragModeTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visibleColumn </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter</category><attributes><package>Grid-UIPainter</package></attributes></class><comment><class-id>Tools.GridColumnSpecTracker</class-id><body>GridColumnSpecTracker  is a kind of UIPainter PlacementMode with which a component selection from the palette appears as the mouse cursor enters the UIPainterView, is dragged with all mouse buttons up, and then is assigned as component to the Grid column selected by the mouse.Instance Variables:	visibleColumn	&lt;GridVisualColumn&gt;	The GridVisualColumn the mouse is in, if any.</body></comment><class><name>PaintedGridController</name><environment>Tools</environment><super>UI.GridController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter</category><attributes><package>Grid-UIPainter</package></attributes></class><comment><class-id>Tools.PaintedGridController</class-id><body>PaintedGridController is the controller for a PaintedGridView displayed in a UIPainter canvas. </body></comment><class><name>PaintedGridView</name><environment>UI</environment><super>UI.Grid</super><private>false</private><indexed-type>none</indexed-type><inst-vars>editMode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid</category><attributes><package>Grid-UIPainter</package></attributes></class><comment><class-id>UI.PaintedGridView</class-id><body>PaintedGridView provides and displays the proper behavior of a Grid when it is being edited in a canvas.Instance Variables:	editMode	&lt;Boolean&gt;	If true, the receiver or its contents are selected.</body></comment><methods><class-id>Tools.ColumnColorToolModel</class-id> <category>actions</category><body package="Grid-UIPainter">postapply	propertiesTool postapply</body><body package="Grid-UIPainter">preapply		| lp painterController grid |	painterController := propertiesTool controller.	painterController ifNil: [^self].	lp := (lookPreferences backgroundColor isNil		and:			[lookPreferences foregroundColor isNil				and:					[lookPreferences selectionForegroundColor isNil						and: [lookPreferences selectionBackgroundColor isNil]]])		ifTrue: [nil]		ifFalse: [lookPreferences copy].	specChannel value colors: lp.	grid := self grid.	grid selectedColumns do: [:column | column spec colors: lp].	painterController canvasHasChanged: true.	self interruptedRead ifTrue: [self readMode value: true].	propertiesTool preapply</body><body package="Grid-UIPainter">precancel	| grid |	grid := self grid ifNil:[^false].	grid selectedColumns isEmpty ifTrue:[^false].	self reloadSelectionInformation.	^true</body></methods><methods><class-id>Tools.ColumnColorToolModel</class-id> <category>private</category><body package="Grid-UIPainter">reloadSelectionInformation		propertiesTool selectionKind == #multi		ifTrue: [self disableRead	"self enableApply."]		ifFalse:			[| selSpec |			selSpec := self grid selectedColumns first spec.			selSpec isNil ifTrue: [^self].			self enableRead.			self disableApply.			self showColorSettingsFor: selSpec colorSelections.			readMode value				ifTrue:					[lookPreferences := selSpec colors						ifNil: [LookPreferences new]						ifNotNil: [:value | value copy].					self showColors]				ifFalse: [self enableApply]]</body></methods><methods><class-id>Tools.GridCallbacksSpecModel</class-id> <category>aspects</category><body package="Grid-UIPainter">currentColumn	^currentColumn isNil		ifTrue:			[currentColumn := self selectedColumn asValue]		ifFalse:			[currentColumn]</body><body package="Grid-UIPainter">grid	^propertiesTool grid</body><body package="Grid-UIPainter">selectedColumn	| columns index |	columns := propertiesTool spec columns.	columns isEmpty ifTrue: [^GridSpec sampleColumn].	index := self selectedColumnIndex.	^index isZero ifTrue: [GridSpec sampleColumn] ifFalse: [columns at: index]</body><body package="Grid-UIPainter">selectedColumnIndex	^self grid ifNil: [0]		ifNotNil: 			[:grid | 			(grid columns detect: [:each | each isSelected] ifNone: [^0]) index]</body><body package="Grid-UIPainter">trigger	^trigger isNil		ifTrue:			[trigger := nil asValue]		ifFalse:			[trigger]</body></methods><methods><class-id>Tools.GridCallbacksSpecModel</class-id> <category>actions</category><body package="Grid-UIPainter">postapply	propertiesTool postapply.</body><body package="Grid-UIPainter">preapply	"'Apply' has been pressed, trigger the BufferedValueHolders	so that their values are stored into their subjects"	self trigger value: true.	propertiesTool preapply.</body><body package="Grid-UIPainter">precancel	"drop all buffered values"	self trigger value: false.	^false</body></methods><methods><class-id>Tools.RowSelectorModel</class-id> <category>testing</category><body package="Grid-UIPainter">usesConservativeReload	^true</body></methods><methods><class-id>Tools.RowSelectorModel</class-id> <category>notifcation</category><body package="Grid-UIPainter">rowNumbersChanged	self able: specChannel value showLineNumbers components:#(#offsetComposite)</body></methods><methods><class-id>Tools.RowSelectorModel</class-id> <category>accessing</category><body package="Grid-UIPainter">specChannel	^specChannel</body></methods><methods><class-id>Tools.RowSelectorModel</class-id> <category>actions</category><body package="Grid-UIPainter">deleteColumn	"Switch the canvas tree selection to the Grid and delete the selected columns"	| gridSpec client |	gridSpec := propertiesTool controller primarySelection spec.	propertiesTool canvasTree selection: gridSpec.	client := GridSpecModel new		propertiesTool: propertiesTool;		specChannel: propertiesTool spec asValue;		yourself.	propertiesTool client: client.	client deleteColumn.	propertiesTool reloadSelectionInformation.	propertiesTool setSpecChannel.</body><body package="Grid-UIPainter">postapply	propertiesTool postapply</body><body package="Grid-UIPainter">preapply	propertiesTool preapply</body><body package="Grid-UIPainter">precancel	"The spec has changed.  Update the specChannel"	^false</body></methods><methods><class-id>Tools.RowSelectorModel</class-id> <category>interface opening</category><body package="Grid-UIPainter">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self rowNumbersChanged</body></methods><methods><class-id>Tools.RowSelectorModel class</class-id> <category>private-interface building</category><body package="Grid-UIPainter">rowSelectorColumnSlice		^#(2 #(#(#{Kernel.UserMessage} #key: #Basics #defaultString: 'Basics' #catalogID: #UIPainter) #rowSelectorSpec #RowSelectorModel))</body></methods><methods><class-id>Tools.GridEditTracker</class-id> <category>events</category><body package="Grid-UIPainter">currentScrollWidgetsHandle: anEvent	^(self currentScrollWidgetsHandler: anEvent) notNil</body><body package="Grid-UIPainter">currentScrollWidgetsHandler: anEvent	^self currentScrollWidgets		detect: [:each | each notNil and: [(each handlerForMouseEvent: anEvent) notNil]] 		ifNone: [nil]</body><body package="Grid-UIPainter">redButtonPressedEvent: anEvent	| localPoint grid |	grid := self grid ifNil:[^self].	localPoint := grid globalPointToLocal: anEvent point.	((self currentScrollWidgetsHandle: anEvent) or: [grid bounds containsPoint: localPoint])		ifTrue: [self doSimpleSelectionFor: anEvent]		ifFalse: [self revertToPriorModeWith: anEvent]</body></methods><methods><class-id>Tools.GridEditTracker</class-id> <category>accessing</category><body package="Grid-UIPainter">currentScrollWidgets	^self grid container dependents asOrderedCollection collect: 		[:each | 		(each isKindOf: Scrollbar)			ifTrue: [each]			ifFalse: [each myDependents]]</body><body package="Grid-UIPainter">grid	^controller primarySelection 		ifNotNil: [:primarySelection | primarySelection widget]</body><body package="Grid-UIPainter">specClass	^nil</body></methods><methods><class-id>Tools.GridEditTracker</class-id> <category>actions</category><body package="Grid-UIPainter">doSimpleSelectionFor: anEvent 	| widget gridView |	gridView := self grid.	(gridView bounds 		containsPoint: (gridView globalPointToLocal: anEvent point)) 			ifTrue: [gridView controller handleEvent: anEvent]			ifFalse: 				[((widget := self currentScrollWidgetsHandler: anEvent) isKindOf: Scrollbar) 					ifTrue: [widget handleEvent: anEvent]					ifFalse: [widget controller selectEvent: anEvent]]</body><body package="Grid-UIPainter">revertToPriorModeWith: anEvent	controller currentMode setValue: oldMode.	self grid resetSelectionAndEdit.	oldMode := nil.	controller redButtonPressedEvent: anEvent.</body></methods><methods><class-id>Tools.GridEditTracker</class-id> <category>initialize-release</category><body package="Grid-UIPainter">on: aController with: anEvent 	controller := aController.	oldMode := aController currentMode value.	self grid 		ifNotNil: [:gridView | gridView controller handleEvent: anEvent]</body></methods><methods><class-id>Tools.GridEditTracker class</class-id> <category>instance creation</category><body package="Grid-UIPainter">on: aController with: anEvent 	^self new on: aController with: anEvent</body></methods><methods><class-id>Tools.GridDependencyAgent</class-id> <category>private</category><body package="Grid-UIPainter">moveColumnIndex: sourceIndex to: targetIndex forSpec: spec 	| columns |	columns := spec columns asOrderedCollection.	columns add: (columns removeAtIndex: sourceIndex) beforeIndex: targetIndex.	columns := columns asArray.	spec columns: columns</body><body package="Grid-UIPainter">moveColumnIndexArray: anArray 	| targetIndex sourceIndex |	targetIndex := anArray last.	sourceIndex := anArray first.	self 		moveColumnIndex: sourceIndex		to: targetIndex		forSpec: propertiesTool controller primarySelection spec.	self 		moveColumnIndex: sourceIndex		to: targetIndex		forSpec: propertiesTool spec.	propertiesTool fillCanvasTree.	self setPainterToolSelections</body><body package="Grid-UIPainter">setPainterToolSelections	| selectedColumns treeIndicies primarySelection selectionsInTree newSet oldSet |	primarySelection := propertiesTool controller primarySelection.	primarySelection ifNil: [^self].	selectedColumns := view selectedColumns.	selectedColumns isEmpty ifTrue: [^self].	treeIndicies := OrderedCollection new.	selectionsInTree := propertiesTool canvasTree.	selectedColumns do: 			[:each | 			(selectionsInTree list indexOf: each ifAbsent: nil) 				ifNotNil: [:index | treeIndicies add: index]].	newSet := treeIndicies asSet.	oldSet := selectionsInTree selectionIndexes asSet.	((newSet - oldSet) isEmpty and: [(oldSet - newSet) isEmpty]) 		ifFalse: 			[selectionsInTree selectionIndexes: treeIndicies.			propertiesTool updateTabs].	propertiesTool showUnmodifiedState.	view invalidate</body></methods><methods><class-id>Tools.GridDependencyAgent</class-id> <category>accessing</category><body package="Grid-UIPainter">propertiesTool	^propertiesTool</body><body package="Grid-UIPainter">propertiesTool: aUIPainterTool	propertiesTool := aUIPainterTool</body><body package="Grid-UIPainter">selectionChannel	^view 		ifNil: [Set new asValue onChangeSend: #setPainterToolSelections to: self]		ifNotNil: [view selectionChannel]</body><body package="Grid-UIPainter">view	^view</body><body package="Grid-UIPainter">view: aPaintedGridView 	view := aPaintedGridView selectionChannel: self selectionChannel.	view expressInterestIn: #columnMove for: self sendBack:#moveColumnIndexArray:</body></methods><methods><class-id>Tools.GridDependencyAgent</class-id> <category>initialize-release</category><body package="Grid-UIPainter">release	view selectionChannel retractAllInterestsFor: self.	view retractAllInterestsFor: self.	super release.</body></methods><methods><class-id>Tools.GridDependencyAgent class</class-id> <category>instance creation</category><body package="Grid-UIPainter">on: aPaintedGridView 	^self new view: aPaintedGridView</body></methods><methods><class-id>Tools.GridSpecModel</class-id> <category>actions</category><body package="Grid-UIPainter">addColumn	self spec addColumn: GridSpec sampleColumn.	propertiesTool apply.	propertiesTool updateSelectionInTree</body><body package="Grid-UIPainter">deleteColumn	self grid ifNotNil: 			[:grid | 			| removedColumns spec |			removedColumns := grid columns select: [:column | column isSelected].			removedColumns isEmpty ifTrue: [^self].			spec := self spec.			removedColumns reverse 				do: [:column | spec deleteColumnIndex: column index].			propertiesTool apply.			propertiesTool fillCanvasTree.			propertiesTool updateSelectionInTree]</body><body package="Grid-UIPainter">postapply	propertiesTool postapply</body><body package="Grid-UIPainter">postcancel	self readMode value: true</body><body package="Grid-UIPainter">preapply	propertiesTool preapply</body><body package="Grid-UIPainter">precancel	"Update slices upon any spec selection change"	self reloadSelectionInformation.	^false</body></methods><methods><class-id>Tools.GridSpecModel</class-id> <category>binding</category><body package="Grid-UIPainter">aspectFor: aKey 	^[self perform: aKey] on: MessageNotUnderstood		do: [:ex | propertiesTool aspectFor: aKey]</body></methods><methods><class-id>Tools.GridSpecModel</class-id> <category>private</category><body package="Grid-UIPainter">grid	^propertiesTool grid</body><body package="Grid-UIPainter">reloadSelectionInformation	readMode value ifTrue: [self disableApply]</body><body package="Grid-UIPainter">validAspectSelector: anInputBoxController	^propertiesTool validAspectSelector: anInputBoxController</body></methods><methods><class-id>Tools.GridSpecModel</class-id> <category>accessing</category><body package="Grid-UIPainter">spec	^specChannel value</body><body package="Grid-UIPainter">specChannel	^specChannel</body></methods><methods><class-id>Tools.GridSpecModel</class-id> <category>testing</category><body package="Grid-UIPainter">usesConservativeReload	^true</body></methods><methods><class-id>Tools.GridSpecModel</class-id> <category>interface opening</category><body package="Grid-UIPainter">postBuildWith: aBuilder	| gridSpec |	super postBuildWith: aBuilder.		gridSpec := specChannel value.	gridSpec columns: gridSpec columns asList.</body></methods><methods><class-id>Tools.GridSpecModel class</class-id> <category>private-interface building</category><body package="Grid-UIPainter">addBindingsTo: env for: inst channel: aChannel 	super addBindingsTo: env for: inst channel: aChannel.	^GridSpec		addBindingsTo: env		for: aChannel value		channel: aChannel.</body><body package="Grid-UIPainter">componentName	"Identification of component"	^(#Grid &lt;&lt; #UIPainter &gt;&gt; 'Grid') asString</body></methods><methods><class-id>Tools.ColumnBasicsModel</class-id> <category>accessing</category><body package="Grid-UIPainter">addSpecLabel	^(PluggableAdaptor on: specChannel)		getBlock:[:m| m value spec ifNil:[self addSpecMessage] ifNotNil:['']]		putBlock:[:m :v| ]		updateBlock:[:m :a :p| true]</body><body package="Grid-UIPainter">labelConstructor	^LabelConstructor new		on: specChannel;		parentBuilderBlock: [self builder] fieldMenuBlock: [propertiesTool fieldMenu]</body><body package="Grid-UIPainter">specChannel	^specChannel</body></methods><methods><class-id>Tools.ColumnBasicsModel</class-id> <category>private</category><body package="Grid-UIPainter">addSpecMessage	^#dndColumnLabel &lt;&lt; #UIPainter &gt;&gt;'Drop a widget from the palette onto this column to define its content.'</body><body package="Grid-UIPainter">grid	^propertiesTool grid</body><body package="Grid-UIPainter">selectedColumn	| columns index |	columns := specChannel value columns.	columns isEmpty ifTrue: [^GridSpec sampleColumn].	index := self selectedColumnIndex.	^index isZero ifTrue: [GridSpec sampleColumn] ifFalse: [columns at: index]</body><body package="Grid-UIPainter">selectedColumnIndex	^self grid ifNil: [0]		ifNotNil: 			[:grid | 			(grid columns detect: [:each | each isSelected] ifNone: [^0]) index]</body><body package="Grid-UIPainter">setPainterToolSelections	self grid ifNotNil: 			[:grid | 			| selectedColumns gridColumns treeIndicies |			gridColumns := grid columns.			selectedColumns := gridColumns select: [:each | each isSelected].			treeIndicies := OrderedCollection new.			selectedColumns do: 					[:each | 					(propertiesTool canvasTree list indexOf: each ifAbsent: nil) 						ifNotNil: [:index | treeIndicies add: index]].			treeIndicies isEmpty 				ifFalse: [propertiesTool canvasTree selectionIndexes: treeIndicies].			selectedColumns isEmpty 				ifFalse: 					[specChannel 						value: (propertiesTool spec columns at: selectedColumns first index)].			propertiesTool showUnmodifiedState]</body></methods><methods><class-id>Tools.ColumnBasicsModel</class-id> <category>actions</category><body package="Grid-UIPainter">deleteColumn	"Switch the canvas tree selection to the Grid and delete the selected columns"	| gridSpec client |	gridSpec := propertiesTool controller primarySelection spec.	propertiesTool canvasTree selection: gridSpec.	client := GridSpecModel new		propertiesTool: propertiesTool;		specChannel: propertiesTool spec asValue;		yourself.	propertiesTool client: client.	client deleteColumn.	propertiesTool reloadSelectionInformation.	propertiesTool setSpecChannel.</body><body package="Grid-UIPainter">postapply	propertiesTool postapply</body><body package="Grid-UIPainter">preapply	propertiesTool preapply</body><body package="Grid-UIPainter">precancel	"The spec has changed.  Update the specChannel"	^false</body></methods><methods><class-id>Tools.ColumnBasicsModel</class-id> <category>interface opening</category><body package="Grid-UIPainter">postBuildWith: aBuilder	super postBuildWith: aBuilder.	(self widgetAt:#helpMessage) controller: NoController new.</body><body package="Grid-UIPainter">preBuildWith: aBuilder	super preBuildWith: aBuilder.	aBuilder aspectAt: #labelFromApplication put: false asValue.</body></methods><methods><class-id>Tools.ColumnBasicsModel</class-id> <category>initialize-release</category><body package="Grid-UIPainter">release	super release.	self grid 		ifNotNil: [:grid | grid selectionChannel retractAllInterestsFor: self]</body></methods><methods><class-id>Tools.ColumnBasicsModel</class-id> <category>testing</category><body package="Grid-UIPainter">usesConservativeReload	^true</body></methods><methods><class-id>Tools.ColumnBasicsModel</class-id> <category>notification</category><body package="Grid-UIPainter">resetGridReference	specChannel value grid: nil.</body></methods><methods><class-id>Tools.ColumnBasicsModel class</class-id> <category>private-interface building</category><body package="Grid-UIPainter">columnBasicsSlice		^#(2 #(#(#{Kernel.UserMessage} #key: #Basics #defaultString: 'Basics' #catalogID: #UIPainter) #basicsEditSpec #ColumnBasicsModel #column))</body></methods><methods><class-id>Tools.GridColumnSpecTracker</class-id> <category>private</category><body package="Grid-UIPainter">cancelDragDrop	controller cancelDragDrop.	Cursor show normal.</body><body package="Grid-UIPainter">finishSelectionFor: aPoint 	"Insert the widget spec as content to the column dropped to.  Clear any name or layout for the spec"	| spec |	Cursor normal show.	spec := controller specFor: controller controller at: 0 @ 0.	spec		layout: nil;		name: nil.	visibleColumn column spec: spec.	visibleColumn releaseCells checkCells.	controller completePlacementAt: aPoint.	controller removeDragee.	controller controller model findPainterTool 		ifNotNil: [:win | win model updateColumnEditing: visibleColumn column].	super finishSelectionFor: aPoint</body><body package="Grid-UIPainter">overGridColumnAt: aPoint		| primarySelection grid |	primarySelection := self painterController primarySelection.	^primarySelection notNil		and:			[grid := primarySelection widget.			grid class == PaintedGridView				and:					[| gridBounds |					gridBounds := primarySelection bounds.					(gridBounds containsPoint: aPoint)						and:							[visibleColumn := grid visualColumnAtPosition: aPoint x - gridBounds left										+ primarySelection decorator scrollerComponent scrollOffset x.							visibleColumn notNil and: [visibleColumn column isHeader not]]]]</body><body package="Grid-UIPainter">painterController	^controller controller</body></methods><methods><class-id>Tools.GridColumnSpecTracker</class-id> <category>events</category><body package="Grid-UIPainter">dragOverWidgets: aDragDropContext	"Default, do nothing"</body></methods><methods><class-id>Tools.GridColumnSpecTracker</class-id> <category>event driven</category><body package="Grid-UIPainter">mouseMovedEvent: aMouseMovedEvent 	| currentPoint |	controller view isOpen ifFalse:[^nil].	currentPoint := self cursorPointFor: aMouseMovedEvent.	(self overGridColumnAt: currentPoint) 		ifFalse: 			[Cursor normal show.			^self shutdownBecauseOfError].	Cursor standardDrag show.	aMouseMovedEvent	initiator grabMouseEventFor: self.	controller trackDragTo: currentPoint from: aMouseMovedEvent</body></methods><methods><class-id>Tools.PaintedGridController</class-id> <category>accessing</category><body package="Grid-UIPainter">targetPoint	^0@0</body></methods><methods><class-id>Tools.PaintedGridController</class-id> <category>event driven</category><body package="Grid-UIPainter">redButtonPressedEvent: anEvent 	| index localPoint |	super redButtonPressedEvent: anEvent.	self selectEvent: anEvent.	localPoint := self view globalPointToLocal: anEvent point.	index := view columnIndexFor: localPoint.	index == 0 		ifTrue: 			[view editorFocusOut.			^self].	view replaceSelectionRange: (index @ 1 corner: index @ view numberOfRows).</body></methods><methods><class-id>UI.PaintedGridView</class-id> <category>testing</category><body package="Grid-UIPainter">allowColumnReordering	^true</body><body package="Grid-UIPainter">isEnabled	^true</body><body package="Grid-UIPainter">isPaintedView	^true</body><body package="Grid-UIPainter">selectByCell	^true</body></methods><methods><class-id>UI.PaintedGridView</class-id> <category>private</category><body package="Grid-UIPainter">boundsForColumn: aGridVisualColumn 	^aGridVisualColumn left @ self bounds top corner: aGridVisualColumn right @ self bounds bottom</body><body package="Grid-UIPainter">dragHandleBounds	| visualColumn |	visualColumn := self selectedColumn ifNil: [^0 @ 0 extent: 0 @ 0].	visualColumn column isHeader ifTrue: [^0 @ 0 extent: 0 @ 0].	^(self boundsForColumn: visualColumn) center - 3 extent: 6 @ 6</body><body package="Grid-UIPainter">invalidateColumn: anInteger	(firstVisibleColumn atIndex: anInteger)		ifNotNil: [:value | self invalidateRectangle: (self boundsForColumn: value)]</body><body package="Grid-UIPainter">persistentInformation	"When this is asked for, the assumption is made that this instance is about to be replaced so It should release it's dependencies now"	| array |	self selectionChannel removeDependent: self.	array := Array new: 5.	array		at: 1 put: self selectionChannel;		at: 2 put: self editMode;		at: 3 put: rows;		at: 4 put: scrollOffset value;		at: 5 put: controller.	^array</body><body package="Grid-UIPainter">persistentInformation: anArray	controller release.	self controller: (anArray at: 5).	self selectionChannel: (anArray at: 1).	columns size == 0 		ifTrue: [ ^self editMode: false ].	self rows: (anArray at: 3).	editMode := anArray at: 2.	scrollOffset value: (anArray at: 4).</body><body package="Grid-UIPainter">selectedColumn	self selectionRange do: [:first | ^firstVisibleColumn atIndex: first left].	^nil</body></methods><methods><class-id>UI.PaintedGridView</class-id> <category>controller accessing</category><body package="Grid-UIPainter">defaultControllerClass	^PaintedGridController</body></methods><methods><class-id>UI.PaintedGridView</class-id> <category>priviledged</category><body package="Grid-UIPainter">dependencyAgent	^GridDependencyAgent on: self</body></methods><methods><class-id>UI.PaintedGridView</class-id> <category>accessing</category><body package="Grid-UIPainter">editMode	editMode ifNil: [editMode := false].	^editMode and: [columns size &gt; 0]</body><body package="Grid-UIPainter">editMode: aBoolean 	aBoolean ifFalse: [self resetSelections].	^editMode := aBoolean</body><body package="Grid-UIPainter">layoutComponentsForBounds: newBounds	super layoutComponentsForBounds: newBounds.	self addSampleRows</body><body package="Grid-UIPainter">trackerClass	^GridEditTracker</body></methods><methods><class-id>UI.PaintedGridView</class-id> <category>selection</category><body package="Grid-UIPainter">addSelectionRange: aRectangle 	"Add aRectangle cell range to the selections merging with existing selections if any.  Answer the range added"	| rectangle |	rectangle := self selectByCell 				ifTrue: [aRectangle]				ifFalse: 					[(aRectangle copy)						left: 1;						right: self numberOfColumns;						yourself].	"self range: rectangle visualCellsDo: [:cell | cell showSelected]."	self selectionChannelChangeDuring: 			[self mergeSelections: self selectionRange with: rectangle].	^rectangle</body><body package="Grid-UIPainter">replaceSelectionRange: aRectangle 	"Replace the selections to aRectangle cell range.  Answer the overall range to invalidate"	| rectangle updateRange selections |	rectangle := self selectByCell 				ifTrue: [aRectangle]				ifFalse: 					[(aRectangle copy)						left: 1;						right: self numberOfColumns;						yourself].	selections := self selectionRange.	selections isEmpty 		ifTrue:[updateRange := rectangle]		ifFalse: 			[updateRange := selections inject: rectangle into:[:sofar :each| sofar merge: each].			selections := Set new].	selections add: rectangle.	self selectionRange: selections.	^updateRange</body><body package="Grid-UIPainter">resetSelectionAndEdit	self editMode: false</body></methods><methods><class-id>UI.PaintedGridView</class-id> <category>bounds accessing</category><body package="Grid-UIPainter">bounds: newBounds		newBounds corner &lt; newBounds origin ifFalse: [super bounds: newBounds]</body></methods><methods><class-id>UI.PaintedGridView</class-id> <category>accessing-properties</category><body package="Grid-UIPainter">allowRowResizing	^false</body></methods><methods><class-id>UI.PaintedGridView</class-id> <category>displaying</category><body package="Grid-UIPainter">displaySelectionHighlightOn: aGraphicsContext		| gc |	gc := aGraphicsContext copy.	gc paint: self selectionBackgroundColor.	columns isEmpty		ifFalse:			[self firstVisibleColumn				withSuccessorsDo:					[:visualColumn | 					visualColumn column isSelected						ifTrue:							[| columnBounds |							columnBounds := self boundsForColumn: visualColumn.							gc intersectClip: columnBounds.							gc displayRectangle: columnBounds]]]</body></methods><methods><class-id>UI.PaintedGridView</class-id> <category>initialize-release</category><body package="Grid-UIPainter">initialize	super initialize.	selectByCell := true.	builder isEditing: true.</body></methods><methods><class-id>UI.PaintedGridView</class-id> <category>rows</category><body package="Grid-UIPainter">addSampleRows	| bottom |	columns isEmpty ifTrue:[^self].	bottom := self bounds bottom.	[scrollableExtent y &lt; bottom] whileTrue: 			[self addRow: (GridSpec sampleRow height: defaultRowHeight)].	[scrollableExtent y &gt; self lastVisibleRow bottom]		whileTrue: [self removeRow: rows last]</body></methods><methods><class-id>Tools.SpecPlacementModeTracker</class-id> <category>private</category><body package="Grid-UIPainter">removeDragee</body><body package="Grid-UIPainter">trackDragTo: aPoint from: anEvent</body></methods><methods><class-id>Tools.UISpecificationTreeModel</class-id> <category>initialize-release</category><body package="Grid-UIPainter">setFullSpec: aSpec	fullSpec := aSpec.	self root: aSpec window.	self childrenBlock: [:each | (each isKindOf: WindowSpec)		ifTrue: [fullSpec component collection]		ifFalse: [each children]]</body></methods><methods><class-id>Core.Object</class-id> <category>testing</category><body package="Grid-UIPainter">isPaintedView	^false</body></methods><methods><class-id>Tools.DataSetEditTracker class</class-id> <category>initialize-release</category><body package="Grid-UIPainter">on: aController with: anEvent	^self new setDataSetOn: aController with: anEvent</body></methods><methods><class-id>Tools.DataSetEditTracker</class-id> <category>actions</category><body package="Grid-UIPainter">revertToPriorModeWith: anEvent	controller currentMode setValue: oldMode.	self dataSetView resetSelectionAndEdit.	oldMode := nil.	controller redButtonPressedEvent: anEvent.</body></methods><methods><class-id>Tools.SelectModeTracker</class-id> <category>selecting</category><body package="Grid-UIPainter">doesControllerHaveDataSetView	^controller primarySelection 		ifNotNil: [:primarySelection | primarySelection widget isPaintedView]		ifNil: [false]</body><body package="Grid-UIPainter">doSimpleSelectionFor: anEvent 	| hitObject |	hitObject := controller view 				hitDetect: (controller view globalPointToLocal: anEvent point).	hitObject isNil 		ifTrue: 			[anEvent shiftDown not ifTrue: [self removeSelections].			^self]		ifFalse: 			[(self processedDataSetViewSelection: hitObject from: anEvent) 				ifTrue: [^self]].	anEvent altDown 		ifTrue: [hitObject := self deepHitDetectIn: hitObject at: anEvent point].	self selectIfNotSelected: hitObject		at: (controller view globalPointToLocal: anEvent point)</body><body package="Grid-UIPainter">processedDataSetViewSelection: aWidget from: anEvent 	"If we are not selecting data set itself, or we are selecting it's handles, we don't do 	much. If we did select on the handles, make sure that it's no longer in edit mode before passing off to possible to drag mode"	| editor target result targetWidget |	target := aWidget.	result := false.	(self shouldUseDeepHitDetectOn: aWidget event: anEvent) 		ifTrue: [target := self deepHitDetectIn: aWidget at: anEvent point].	((target isKindOf: SpecWrapper) and: [target widget isPaintedView]) 		ifFalse: 			[self doesControllerHaveDataSetView 				ifTrue: [self setPrimarySelectionToNoSelectionIndexAndNoEdit].			^result].	targetWidget := target widget.	(self doesControllerHaveDataSetView and: 			[(anEvent ctrlDown or: [anEvent altDown]) and: [targetWidget editMode not]]) 		ifTrue: 			[result := true.			targetWidget editMode: true].	targetWidget editMode 		ifTrue: 			[editor := targetWidget trackerClass on: controller with: anEvent.			controller currentMode setValue: editor].	^result</body><body package="Grid-UIPainter">setPrimarySelectionToNoSelectionIndexAndNoEdit	controller primarySelection widget resetSelectionAndEdit</body><body package="Grid-UIPainter">shouldUseDeepHitDetectOn: aWidget event: anEvent 	^(aWidget isKindOf: SpecWrapper) 		and: [(aWidget widget isKindOf: CompositePart) and: [(self deepHitDetectIn: aWidget at: anEvent point) widget isPaintedView]]</body></methods><methods><class-id>Tools.UIPainterTool class</class-id> <category>slice utilities</category><body package="Grid-UIPainter">nameKey: aStringSymbolOrUserMessage 	aStringSymbolOrUserMessage isString ifTrue: [^aStringSymbolOrUserMessage asSymbol].	aStringSymbolOrUserMessage isSymbol ifTrue: [^aStringSymbolOrUserMessage].	^aStringSymbolOrUserMessage key</body><body package="Grid-UIPainter">sliceKey: anArray	^self nameKey: (self sliceName: anArray)</body><body package="Grid-UIPainter">sliceName: anArray 	| sliceName |	sliceName := anArray first.	sliceName class == Array 		ifTrue: [sliceName := sliceName decodeAsLiteralArray].	^sliceName</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>private-tree manipulation</category><body package="Grid-UIPainter">addWrapperFor: aUISpecification in: wrapperOrderedCollection to: aResultCollection 	| specCollection |	wrapperOrderedCollection isEmpty ifTrue: [^false].	specCollection := (SpecCollection new 				extractFromCollection: wrapperOrderedCollection) collection.	specCollection with: wrapperOrderedCollection		do: 			[:spec :wrapper | 			(aUISpecification isPropertyFor: spec) 				ifTrue: 					[wrapperOrderedCollection remove: wrapper.					aResultCollection add: wrapper.					^true].			(self 				addWrapperFor: aUISpecification				in: (spec childrenFor: wrapper) copy				to: aResultCollection) ifTrue: [^true]].	^false</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>private-tab manipulation</category><body package="Grid-UIPainter">clearSlices	slicesMenu setValue: Menu new.	sliceInfo := IdentityDictionary new</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>priviledged</category><body package="Grid-UIPainter">client	^client</body><body package="Grid-UIPainter">client: anApplicationModel	client := anApplicationModel.</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>private-tab manipulation</category><body package="Grid-UIPainter">computeSliceInfo	"Retrieve the slice information and build a menu based on it."	self clearSlices.	self parseSlices: (currentSpecCopy slicesForSelections: self selection).	self updateSlices</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>private-tree manipulation</category><body package="Grid-UIPainter">find: aSpec inSpecCollection: aCollection ifFoundDo: aMonadicBlock 	aCollection keysAndValuesDo: 			[:index :spec | 			(spec isPropertyFor: aSpec) ifTrue: [aMonadicBlock value: index]]</body><body package="Grid-UIPainter">findEmbeddedIn: aCollection using: aCollectionOfWrappers into: aCollectionOfFoundItems	"Collect the wrappers containing the spec selections in the canvas tree into aCollectionOfFoundItems.  Note that               aCollection should be equal to (aCollectionOfWrappers collect:[:each| each spec])"	| collectionSpecs sortedSelections |	aCollectionOfFoundItems size = canvasTree selections size ifTrue: [^self].	sortedSelections := canvasTree selectionIndexes asSortedCollection 		collect: [:each | canvasTree list at: each].	sortedSelections do:		[:each |		self 			find: each			inSpecCollection: aCollection 			ifFoundDo: [:index | aCollectionOfFoundItems add: (aCollectionOfWrappers at: index)]].	aCollectionOfFoundItems size = canvasTree selections size ifTrue: [^self].	collectionSpecs := Dictionary new.	aCollection keysAndValuesDo: 		[:index :each | 		(each isKindOf: CompositeSpecCollection) ifTrue: [collectionSpecs at: index put: each]].	collectionSpecs keysAndValuesDo:		[:key :value | 		self findEmbeddedIn: value collection using: (aCollectionOfWrappers at: key) widget components into: aCollectionOfFoundItems].</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>private-grid</category><body package="Grid-UIPainter">grid	^self controller primarySelection ifNotNil: 			[:wrapper | 			| widget |			widget := wrapper widget.			widget class == PaintedGridView ifTrue: [widget] ifFalse: [nil]]</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>private</category><body package="Grid-UIPainter">labelFor: labelName 	| source |	source := specChannel value.	^(source isSubSpec ifTrue: [currentSpecCopy] ifFalse: [source]) 		perform: labelName</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>changing</category><body package="Grid-UIPainter">notifyItemsOfSelectionChange	| selections |	selections := canvasTree selections.	canvasTree list asArray do: [:each | each selections: selections notifiedBy: self]</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>private-tab manipulation</category><body package="Grid-UIPainter">parseSlices: slicesArray 	slicesArray keysAndValuesDo: 			[:index :info | 			| sliceName key |			sliceName := self class sliceName: info.			key := self class nameKey: sliceName.			slicesMenu value addItemLabel: sliceName value: key.			sliceInfo at: key put: info]</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>actions</category><body package="Grid-UIPainter">postapply	controller primarySelection ifNotNil: 			[:primarySelection | 			primarySelection spec class == GridSpec 				ifTrue: 					[| grid |					grid := primarySelection widget.					(builder bindings at: #gridDependencyAgent						ifAbsentPut: [grid dependencyAgent propertiesTool: self]) view: grid.					self fillCanvasTree.					grid selectionChannel changed: #value]]</body><body package="Grid-UIPainter">preapply	controller primarySelection ifNotNil: 			[:primarySelection | 			primarySelection spec class == GridSpec 				ifTrue: 					[| grid |					grid := primarySelection widget.					grid selectionChannel removeDependent: grid]]</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>private-tab manipulation</category><body package="Grid-UIPainter">replaceTheTabList: newList index: foundIndex 	list		list: newList;		selectionIndex: foundIndex</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>private-tree manipulation</category><body package="Grid-UIPainter">selectedWrappers	"Answer the wrappers in the UIPainter for the specs selected in the UIPainterTool tree"	| sortedSelections unmatchedWrappers selectedWrappers |	sortedSelections := canvasTree selectionIndexes asSortedCollection 				collect: [:each | canvasTree list at: each].	unmatchedWrappers := controller model builderComponentWrappers copy.	selectedWrappers := OrderedCollection new.	sortedSelections do: 			[:each | 			self 				addWrapperFor: each				in: unmatchedWrappers				to: selectedWrappers].	^selectedWrappers</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>updating</category><body package="Grid-UIPainter">updateColumnEditing: aGridColumn 	(aGridColumn = self canvasTree selection 		and: [self validateChangeOfPage]) ifTrue: [self reloadSelectionInformation].</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>private-tree manipulation</category><body package="Grid-UIPainter">updateSelectionInTree	| treeIndexes |	controller isNil ifTrue: [^self].	controller view == currentView ifFalse: [self fillCanvasTree].	selection isNil ifTrue: [^self].	selection isEmpty 		ifTrue: 			[canvasTree selectionIndex: 1.			self notifyItemsOfSelectionChange.			^self].	treeIndexes := OrderedCollection new.	"canvasTree resetSelections."	selection do: 			[:each | 			((each widget respondsTo: #container) 				ifTrue: [currentSpecCopy extractedSelectionSpecFor: each widget]				ifFalse: [each]) 					ifNotNil: [:targetSpec | self addSelectionIndex: targetSpec to: treeIndexes]].	canvasTree selectionIndexes: treeIndexes.	self notifyItemsOfSelectionChange.	self mainWindow repairDamages.</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>private-tab manipulation</category><body package="Grid-UIPainter">updateSlices	| foundIndex |	foundIndex := slicesMenu value values indexOf: slice value ifAbsent: [0].	self replaceTheTabList: self masterList index: (foundIndex max: 1).	foundIndex isZero ifTrue: [slice setValue: #Basics].</body></methods><methods><class-id>Tools.UIPainterTool</class-id> <category>actions</category><body package="Grid-UIPainter">updateTabs	self computeSliceInfo.	self displayButtonsForUnmodifiedState.	slice value: slice value asSymbol.	self adjustMenu.	self lookSettingUpdate</body></methods><methods><class-id>UI.DataSetSpec class</class-id> <category>private-interface building</category><body package="Grid-UIPainter">addBindingsTo: env for: inst channel: aChannel 	super		addBindingsTo: env		for: inst		channel: aChannel.	env at: #multipleSelections put: (self adapt: inst forAspect: #multipleSelections channel: aChannel).	env at: #labelsAsButtons put: (self adapt: inst forAspect: #labelsAsButtons channel: aChannel).	env at: #rowLabelsAsButtons put: (self adapt: inst forAspect: #rowLabelsAsButtons channel: aChannel).	env at: #showHorizontalLines put: (self adapt: inst forAspect: #showHorizontalLines channel: aChannel).	env at: #showVerticalLines put: (self adapt: inst forAspect: #showVerticalLines channel: aChannel).	env at: #showLineNumbers put: (self adapt: inst forAspect: #showLineNumbers channel: aChannel).	env at: #allowSorting put: (self adapt: inst forAspect: #allowSorting channel: aChannel).	env at: #allowColumnResizing put: (self adapt: inst forAspect: #allowColumnResizing channel: aChannel).	env at: #allowColumnReordering put: (self adapt: inst forAspect: #allowColumnReordering channel: aChannel).	env at: #columns put: (TypeConverter onSymbolValue: (self				adapt: inst				forAspect: #columns				channel: aChannel)).	env at: #rowIndicator put: (self			adapt: inst			forAspect: #rowIndicator			channel: aChannel).	env at: #horizontalPolicy put: (self			adapt: inst			forAspect: #horizontalPolicy			channel: aChannel).	env at: #verticalPolicy put: (self			adapt: inst			forAspect: #verticalPolicy			channel: aChannel).	env at: #rowSize put: (self			adapt: inst			forAspect: #rowSize			channel: aChannel).	self 		addLocalBindingsTo: env		for: inst		channel: aChannel</body><body package="Grid-UIPainter">addLocalBindingsTo: env for: inst channel: aChannel 	| ra painterTool |	ra := DSVDependencyAgent new bindings: env.	painterTool := env at: #propertiesTool.	ra spec: inst.	ra notificationAspects: (Array new: 3).	ra validationAspects: (Array new: 3).	env at: #addColumn		put: 			[painterTool invalidateCurrentSelection.			inst addColumnFrom: painterTool].	env at: #deleteColumn put: [ra deleteColumn].	env at: #dsvSelectionChannel		put: (painterTool selection at: 1) widget selectionChannel.	env at: #releasingAgent put: ra.	(env at: #dsvSelectionChannel) onChangeSend: #validateComponents to: ra.	ra validateComponents</body></methods><methods><class-id>Tools.UIDefiner</class-id> <category>private</category><body package="Grid-UIPainter">initStringForGrid: gridSlot on: aStream	aStream nextPutAll: gridSlot value class name;		space; nextPutAll: 'new'</body><body package="Grid-UIPainter">writeDefinitions: bindings for: aController	"bindings includes all required bindings in the selection set	that the user has not specifically disallowed.  Test to see whether	instance variables are already there.  Must check to see whether	action methods are already there, and do not redefine them if they	exist.  Always redefine aspect methods against the possibility that	the type of the model has changed.	NB: aspect methods incorporate lazy instVar initialization."	| allnames actionSlots valueSlots listSlots tableSlots clientSlots dsvSlots dsvColSlots detailSlots ivNames detailVars codeStream allDetails treeViewSlots gridSlots |	allnames := aClass allInstVarNames asSet.	actionSlots := bindings select: [:e | e value isKindOf: BlockClosure].	valueSlots := bindings select: [:e | e value isKindOf: ValueModel].	listSlots := bindings select: [:e | e value isKindOf: SelectionInList].	tableSlots := bindings select: [:e | e value isKindOf: TableInterface].	clientSlots := bindings select: [:e | (e value isKindOf: Symbol) or: [e value isBindingReference]].	dsvSlots := bindings select: [:e | e value isKindOf: DataSetSpec].	treeViewSlots := bindings select: [:each | each value isKindOf: TreeViewSpec].	dsvColSlots := bindings select: [:e | e value isKindOf: DataSetColumnSpec].	detailSlots := bindings select:[:e | self isDataFormSpec: e value].	gridSlots := bindings select: [:e | e value isKindOf: GridInterface].	detailVars := self findDetailVars: detailSlots.	ivNames :=		(((valueSlots, listSlots, tableSlots, clientSlots, dsvSlots, gridSlots) collect: [:e | e key ]), detailVars			select: [:e | (allnames includes: e asString) not]) asSet.	codeStream := String new writeStream.	self writeClassDefiningMessageForIVs: ivNames on: codeStream.	self writeAccessorsForClients: clientSlots andDetails: detailSlots on: codeStream.	self		writeSimpleActions: actionSlots		andDetailActions: detailSlots		andDSVSortActions: dsvColSlots		on: codeStream.	self writeTreeViewActions: treeViewSlots on: codeStream.	self		writeSimpleAspects: valueSlots		andListAspects: listSlots		andTableAspects: tableSlots		andDSVAspects: dsvSlots		andGridAspects: gridSlots		on: codeStream.		allDetails := 		(self enumeratorClass new source: aController model builder source)			doSpec: aController model extractFullSpec; details.	(self does: aClass inheritFromClassNamed: #LensApplicationModel)		ifTrue:			[self				writeMixinQueryMethods: detailSlots on: codeStream.			"The private methods must be written to take into account all details			on the canvas, not just those currently selected."			self writePrivateMethods: allDetails for: aController on: codeStream]		ifFalse:			[allDetails isEmpty not				ifTrue:					[Dialog warn:(#GenKey60 &lt;&lt; #UIPainter &gt;&gt; 'A complete set of definitions could not be generatedto support the Data Form(s) being defined for, becausethis canvas is installed on a non-database class.  Youshould reinstall the canvas on a new class that is eithera Data Form or a Database Application, and try again.')]].			^codeStream contents</body><body package="Grid-UIPainter">writeSimpleAspects: valueSlots andListAspects: listSlots andTableAspects: tableSlots andDSVAspects: dsvSlots andGridAspects: gridSlots on: aStream	"Always redefine the more accessor-like methods"	| codeStream emptyPos |	(valueSlots, listSlots, tableSlots, dsvSlots, gridSlots) notEmpty		ifTrue:			[codeStream := String new writeStream.			codeStream				cr; cr;				nextPut: $!;				nextPutAll: aClass fullName;				nextPutAll: ' methodsFor: ''aspects''!'.			emptyPos := codeStream writePosition.			self writeAccessorsFor: valueSlots initGen: #initStringForValue:on: on: codeStream.			self				writeAccessorsFor: listSlots				initGen: #initStringForList:on:				on: codeStream.			self				writeAccessorsFor: tableSlots				initGen: #initStringForTable:on:				on: codeStream.			self				writeAccessorsFor: dsvSlots				initGen: #initStringForDSV:on:				on: codeStream.			self				writeAccessorsFor: gridSlots				initGen: #initStringForGrid:on:				on: codeStream.			emptyPos = codeStream writePosition				ifFalse:					[aStream						nextPutAll: codeStream contents;						nextPutAll: ' !']]</body></methods><methods><class-id>UI.NamedSpec</class-id> <category>private</category><body package="Grid-UIPainter">isPropertyFor: aSpec 	^(super isPropertyFor: aSpec) and: [aSpec name = name]</body></methods><methods><class-id>Tools.ColorToolModel</class-id> <category>private</category><body package="Grid-UIPainter">grid	^propertiesTool grid</body></methods><methods><class-id>Tools.ColorToolModel</class-id> <category>actions</category><body package="Grid-UIPainter">precancel	self grid ifNotNil:[:grid| grid selectedColumns notEmpty ifTrue:[^false]].	^super precancel</body></methods><methods><class-id>UI.GridHeaderColumn</class-id> <category>uipainter slices</category><body package="Grid-UIPainter">slice	^RowSelectorModel rowSelectorColumnSlice last</body></methods><methods><class-id>Tools.PaintedDataSetView</class-id> <category>testing</category><body package="Grid-UIPainter">isPaintedView	^true</body></methods><methods><class-id>Tools.PaintedDataSetView</class-id> <category>selection</category><body package="Grid-UIPainter">resetSelectionAndEdit	self  		selectionIndex: 0;		editMode: false.</body></methods><methods><class-id>Tools.PaintedDataSetView</class-id> <category>accessing</category><body package="Grid-UIPainter">trackerClass	^DataSetEditTracker</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="Grid-UIPainter">gridColumn20x20mask	^self gridWidget20x20mask</body></methods><methods><class-id>UI.CompositeSpecCollection</class-id> <category>comparing</category><body package="Grid-UIPainter">= anObject 	^self species = anObject species and: 			[properties = anObject properties and: 					[collection = anObject collection 						and: [compositeSpec = anObject compositeSpec]]]</body></methods><methods><class-id>UI.CompositeSpecCollection</class-id> <category>private</category><body package="Grid-UIPainter">childrenFor: aSpecWrapper	^aSpecWrapper widget components</body><body package="Grid-UIPainter">isPropertyFor: aUISpecification 	^(super isPropertyFor: aUISpecification) 		or: [compositeSpec = aUISpecification]</body></methods><methods><class-id>UI.SpecCollection</class-id> <category>private</category><body package="Grid-UIPainter">children	^collection</body></methods><methods><class-id>UI.ComponentSpec</class-id> <category>accessing</category><body package="Grid-UIPainter">extractedSelectionSpecFor: implementationComponent 	^self extractedSpecFor: implementationComponent</body></methods><methods><class-id>UI.ComponentSpec</class-id> <category>private</category><body package="Grid-UIPainter">isPropertyFor: aSpec 	^(super isPropertyFor: aSpec) and: [aSpec layout = layout]</body></methods><methods><class-id>UI.SubSpec</class-id> <category>testing</category><body package="Grid-UIPainter">isSubSpec	^true</body></methods><methods><class-id>UI.GridSpec class</class-id> <category>property slices</category><body package="Grid-UIPainter">basicSlice		^#(10 #(#(#{Kernel.UserMessage} #key: #Basics #defaultString: 'Basics' #catalogID: #UIPainter) #basicsEditSpec #GridSpecModel))</body><body package="Grid-UIPainter">columnSlice		^#(30 #())</body><body package="Grid-UIPainter">columnTypeSlice	^#(32 #())</body></methods><methods><class-id>UI.GridSpec class</class-id> <category>private-interface building</category><body package="Grid-UIPainter">componentName	"Identification of component"	^(#Grid &lt;&lt; #UIPainter &gt;&gt; 'Grid') asString</body></methods><methods><class-id>UI.GridSpec class</class-id> <category>resources</category><body package="Grid-UIPainter">iconForWidgetTree	^ToolbarIconLibrary visualFor: #gridWidget</body></methods><methods><class-id>UI.GridSpec class</class-id> <category>property slices</category><body package="Grid-UIPainter">notificationSlice	^#(36 #(#(#{Kernel.UserMessage} #key: #Notification #defaultString: 'Notification' #catalogID: #UIPainter) #notificationDCEditSpec  nil #callbacks))</body></methods><methods><class-id>UI.GridSpec class</class-id> <category>accessing</category><body package="Grid-UIPainter">sampleColumn	^GridColumn new width: 80</body><body package="Grid-UIPainter">sampleRow	^GridRow new height: 25</body></methods><methods><class-id>UI.GridSpec class</class-id> <category>property slices</category><body package="Grid-UIPainter">validationSlice	^#(34 #(#(#{Kernel.UserMessage} #key: #Validation #defaultString: 'Validation' #catalogID: #UIPainter) #validationDCEditSpec nil #callbacks))</body></methods><methods><class-id>UI.GridSpec</class-id> <category>private</category><body package="Grid-UIPainter">addRevisedSlice: anArray to: anOrderedCollection 	"Answer revised slices for componentSpec. Specifically, remove the #Position slice, rename the #Basics slice to #Component, and add target spec id #columnComponent."	| sliceKey |	sliceKey := UIPainterTool sliceKey: anArray.	sliceKey = #Basics 		ifTrue: 			[^self 				matchInfoArray: anArray				with: #(#(#{Kernel.UserMessage} #key: #Component #defaultString: 'Component' #catalogID: #UIPainter) nil nil #columnComponent)				into: anOrderedCollection].	sliceKey = #Details 		ifTrue: 			[^self 				matchInfoArray: anArray				with: #(nil nil nil #columnComponent)				into: anOrderedCollection].	sliceKey = #Validation 		ifTrue: 			[^self 				matchInfoArray: anArray				with: #(nil nil #GridCallbacksSpecModel #columnComponent)				into: anOrderedCollection].	sliceKey = #Notification 		ifTrue: 			[^self 				matchInfoArray: anArray				with: #(nil nil #GridCallbacksSpecModel #columnComponent)				into: anOrderedCollection].	sliceKey = #Color 		ifTrue: 			[^self 				matchInfoArray: anArray				with: #(nil nil #ColumnColorToolModel #columnComponent)				into: anOrderedCollection].	sliceKey = #DropTarget 		ifTrue: 			[^self 				matchInfoArray: anArray				with: #(nil nil nil #columnComponent)				into: anOrderedCollection].	sliceKey = #FlyByHelp 		ifTrue: 			[^self 				matchInfoArray: anArray				with: #(nil nil nil #columnComponent)				into: anOrderedCollection]</body><body package="Grid-UIPainter">children	^columns</body><body package="Grid-UIPainter">componentSpecDo: anEnumerator	^anEnumerator doLeafMenuComponentSpec: self</body><body package="Grid-UIPainter">defaultModel	^GridInterface new</body><body package="Grid-UIPainter">extractedSelectionSpecFor: implementationComponent 	^implementationComponent columns detect: [:each | each isSelected]		ifNone: [self]</body><body package="Grid-UIPainter">matchInfoArray: anArray with: anArrayTemplate into: anOrderedCollection 	| index |	index := 0.	anOrderedCollection 		add: (anArrayTemplate collect: 					[:value | 					index := index + 1.					value 						ifNil: [[anArray at: index] on: SubscriptOutOfBoundsError do: [:ex | nil]]						ifNotNil: [value]])</body><body package="Grid-UIPainter">selectedColumn	columns isEmpty 		ifFalse: 			[columns first grid ifNotNil: 					[:grid | 					| selections |					selections := grid selectionRange.					columns keysAndValuesDo: 							[:index :column | 							(selections 								contains: [:range | index between: range left and: range right]) 									ifTrue: [^column]]]].	^self class sampleColumn</body><body package="Grid-UIPainter">selections: aCollection notifiedBy: aUIPainterTool 	columns isEmpty 		ifFalse: 			[columns first grid ifNotNil: 					[:grid | 					((columns copyWith: self) contains: [:any | aCollection includes: any]) 						ifTrue: 							[aUIPainterTool builder bindings at: #gridDependencyAgent								ifAbsentPut: [grid dependencyAgent propertiesTool: aUIPainterTool]]						ifFalse: 							[(aUIPainterTool builder bindings removeKey: #gridDependencyAgent								ifAbsent: [^self]) release]]]</body><body package="Grid-UIPainter">slices	self columns do: 			[:column | 			column isSelected 				ifTrue: 					[| slices |					slices := OrderedCollection with: column slice.					column spec ifNotNil: 							[:spec | 							spec class slices do: [:slice | self addRevisedSlice: slice to: slices]].					^slices]].	^self class slices</body><body package="Grid-UIPainter">slicesForSelections: aCollection	aCollection isEmpty ifTrue:[^self slices].	^aCollection first spec slices</body><body package="Grid-UIPainter">specDo: anEnumerator	^anEnumerator doComponentSpec: self</body><body package="Grid-UIPainter">subSpecFor: aSlice	aSlice == #column		ifTrue:[^self selectedColumn].	aSlice == #columnComponent		ifTrue:[^self selectedColumn spec].	^super subSpecFor: aSlice</body><body package="Grid-UIPainter">targetSpecForSelection: anObject andKey: aSymbolOrNil 	aSymbolOrNil ifNotNil: 			[anObject class == GridColumn 				ifTrue: [^(columns at: anObject index) perform: aSymbolOrNil]].	^self</body></methods><methods><class-id>UI.FullSpec</class-id> <category>private</category><body package="Grid-UIPainter">children	^component collection</body></methods><methods><class-id>UI.GridColumn</class-id> <category>painter</category><body package="Grid-UIPainter">children	^#()</body><body package="Grid-UIPainter">iconForWidgetTree	^ToolbarIconLibrary visualFor: #gridColumn</body></methods><methods><class-id>UI.GridColumn</class-id> <category>private</category><body package="Grid-UIPainter">isPropertyFor: aGridSpec 	^self = aGridSpec or:[aGridSpec class == GridSpec and: [aGridSpec columns includes: self]]</body></methods><methods><class-id>UI.GridColumn</class-id> <category>accessing</category><body package="Grid-UIPainter">model	^spec ifNotNil:[spec model]</body></methods><methods><class-id>UI.GridColumn</class-id> <category>painter</category><body package="Grid-UIPainter">painterName	^id 		ifNil: [#Column1p &lt;&lt; #UIPainter &gt;&gt; 'Column&lt;1p&gt;' expandMacrosWith: self index]</body></methods><methods><class-id>UI.GridColumn</class-id> <category>private</category><body package="Grid-UIPainter">selections: aCollection notifiedBy: aUIPainterTool	self isSelected: (aCollection includes: self)</body></methods><methods><class-id>UI.GridColumn</class-id> <category>uipainter slices</category><body package="Grid-UIPainter">slice	^ColumnBasicsModel columnBasicsSlice last</body></methods><methods><class-id>Tools.DragPlacementModeTracker</class-id> <category>events</category><body package="Grid-UIPainter">completePlacementAt: point 	controller modeIsSticky 		ifTrue: 			[controller builder add: (self specFor: controller at: point).			dragee := controller builder wrapper]		ifFalse: [UIPalette currentMode: #{SelectModeTracker} value new]</body><body package="Grid-UIPainter">enterEvent: anEvent		dragee ifNotNil: [self removeDragee].	controller builder		add:			(self				specFor: controller				at:					(lastShowPoint := controller view						globalPointToLocal: (controller gridPoint: anEvent point))).	dragee := controller builder wrapper.	targetWindow := anEvent window.	^super enterEvent: anEvent</body><body package="Grid-UIPainter">mouseMovedEvent: anEvent 	targetWindow == anEvent window 		ifTrue: 			[| newPoint |			newPoint := controller view 						globalPointToLocal: (controller gridPoint: anEvent point).			lastShowPoint = newPoint ifTrue: [^nil].			controller view move: dragee to: newPoint.			lastShowPoint := newPoint.			(GridColumnSpecTracker on: self) mouseMovedEvent: anEvent]		ifFalse: [self enterEvent: anEvent]</body><body package="Grid-UIPainter">redButtonPressedEvent: anEvent 	| formerDragee handle |	controller quietlyRemoveSelections.	controller quietlySelect: dragee.	formerDragee := dragee.	dragee := nil.	(self class placementExtentBlockFor: formerDragee spec class) notNil 		ifTrue: 			[controller sensor cursorPoint: formerDragee component bounds corner.			dragee := nil.			handle := controller handles detect: [:h | h selector == #corner].			(controller dragModeFor: handle) 				dragObject: handle				startingAt: (controller view globalPointToLocal: anEvent point)				inController: controller]		ifFalse: [controller canvasHasChanged: true].	self completePlacementAt: (controller view globalPointToLocal: anEvent point)</body><body package="Grid-UIPainter">removeDragee	dragee container controller view removeComponent: dragee.	dragee release.</body></methods><methods><class-id>Tools.DragPlacementModeTracker</class-id> <category>private</category><body package="Grid-UIPainter">trackDragTo: aPoint from: anEvent 	targetWindow == anEvent window		ifTrue: 			[| newPoint |			newPoint := controller gridPoint: aPoint.			lastShowPoint = newPoint ifTrue: [^nil].			controller view move: dragee to: newPoint.			lastShowPoint := newPoint]		ifFalse: [self enterEvent: anEvent]</body></methods><methods><class-id>Tools.UIPalette class</class-id> <category>private</category><body package="Grid-UIPainter">standardSpecsForPalette	^#(#{UI.ActionButtonSpec} #{UI.CheckBoxSpec} #{UI.RadioButtonSpec} #{UI.SpinButtonSpec} #{UI.LabelSpec}	#{UI.InputFieldSpec} #{UI.TextEditorSpec} #{UI.MenuButtonSpec} #{UI.SequenceViewSpec} #{UI.ComboBoxSpec}	#{UI.HierarchicalViewSpec} #{UI.TreeViewSpec} #{UI.DividerSpec} #{UI.GroupBoxSpec} #{UI.ResizingSplitterSpec}	#{UI.RegionSpec} #{UI.ArbitraryComponentSpec} #{UI.SubCanvasSpec} #{UI.MappedClickWidgetSpec} #{UI.SliderSpec}	#{UI.ProgressWidgetSpec} #{UI.TableViewSpec} #{UI.DataSetSpec}  #{UI.GridSpec} #{UI.NoteBookSpec} #{UI.TabControlSpec})</body></methods><methods><class-id>UI.UISpecification</class-id> <category>private</category><body package="Grid-UIPainter">beSelected: aBoolean</body><body package="Grid-UIPainter">childrenFor: aSpecWrapper 	^#()</body><body package="Grid-UIPainter">isPropertyFor: aSpec 	^aSpec class = self class</body></methods><methods><class-id>UI.UISpecification</class-id> <category>testing</category><body package="Grid-UIPainter">isSubSpec	^false</body></methods><methods><class-id>UI.UISpecification</class-id> <category>private</category><body package="Grid-UIPainter">selections: aBoolean notifiedBy: aUIPainterTool 	self beSelected: aBoolean</body></methods><methods><class-id>UI.UISpecification</class-id> <category>private-interface building</category><body package="Grid-UIPainter">slices	^self class slices</body><body package="Grid-UIPainter">slicesForSelections: aCollection	^self class slices</body></methods><methods><class-id>UI.UISpecification</class-id> <category>private</category><body package="Grid-UIPainter">targetSpecForSelection: aUISpecification andKey: aSymbol	^self</body></methods><methods><class-id>Tools.SelectPlacementModeTracker</class-id> <category>events</category><body package="Grid-UIPainter">completePlacementAt: aPoint	controller modeIsSticky		ifFalse: 			[UIPalette currentMode: #{SelectModeTracker} value new]</body><body package="Grid-UIPainter">mouseMovedEvent: aMouseMovedEvent 				(GridColumnSpecTracker on: self) mouseMovedEvent: aMouseMovedEvent</body></methods><methods><class-id>Tools.GridCallbacksSpecModel class</class-id> <category>interface specs</category><body package="Grid-UIPainter">notificationDCEditSpec	"Tools.UIPainter new openOnClass: self andSelector: #notificationDCEditSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #UIPainter ) 			#bounds: #(#{Graphics.Rectangle} 640 512 840 712 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 4 0 0.5 0 ) 					#name: #label 					#label: 					#(#{Kernel.UserMessage} 						#key: #GridColumn 						#defaultString: 'Grid - Column' 						#catalogID: #UIPainter ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 139 0 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #ActionOn 								#defaultString: 'Action On' 								#catalogID: #UIPainter ) ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 5 0 47 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Entry 								#defaultString: 'Entry:' 								#catalogID: #UIPainter ) ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 75 0 22 0 0 0.97191 47 0 ) 							#model: #'currentColumn spec callbacksSpec focusInSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 75 0 50 0 0 0.97191 75 0 ) 							#model: #'currentColumn spec callbacksSpec valueChangeSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 5 0 75 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Change 								#defaultString: 'Change:' 								#catalogID: #UIPainter ) ) 						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 5 80 ) 							#name: #doubleClickLabel 							#label: 							#(#{Kernel.UserMessage} 								#key: #DClick 								#defaultString: 'D. Click:' 								#catalogID: #UIPainter ) ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 75 0 78 0 0 0.97191 103 0 ) 							#name: #doubleClickMessage 							#model: #'currentColumn spec callbacksSpec doubleClickSelector | trigger' 							#type: #symbol ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 5 0 129 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Exit 								#defaultString: 'Exit:' 								#catalogID: #UIPainter ) ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 75 0 106 0 0 0.97191 131 0 ) 							#model: #'currentColumn spec callbacksSpec focusOutSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 11 0 32 0 -11 1 171 0 ) 						#name: #fields ) ) ) ) )</body><body package="Grid-UIPainter">notificationEditSpec	"Tools.UIPainter new openOnClass: self andSelector: #notificationEditSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #UIPainter ) 			#bounds: #(#{Graphics.Rectangle} 463 427 663 627 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 4 0 0.5 0 ) 					#name: #label 					#label: 					#(#{Kernel.UserMessage} 						#key: #GridColumn 						#defaultString: 'Grid - Column' 						#catalogID: #UIPainter ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 110 0 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #ActionOn 								#defaultString: 'Action On' 								#catalogID: #UIPainter ) ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 76 0 25 0 0 0.966667 50 0 ) 							#model: #'currentColumn spec callbacksSpec focusInSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 76 0 53 0 0 0.966667 78 0 ) 							#model: #'currentColumn spec callbacksSpec valueChangeSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 76 0 81 0 0 0.966667 106 0 ) 							#model: #'currentColumn spec callbacksSpec focusOutSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 6 0 50 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Entry 								#defaultString: 'Entry:' 								#catalogID: #UIPainter ) ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 6 0 78 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Change 								#defaultString: 'Change:' 								#catalogID: #UIPainter ) ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 6 0 106 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Exit 								#defaultString: 'Exit:' 								#catalogID: #UIPainter ) ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 10 0 29 0 -10 1 139 0 ) 						#name: #fields ) ) ) ) )</body><body package="Grid-UIPainter">validationDCEditSpec	"Tools.UIPainter new openOnClass: self andSelector: #validationDCEditSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #Validation 				#defaultString: 'Validation' 				#catalogID: #UIPainter ) 			#bounds: #(#{Graphics.Rectangle} 640 512 876 745 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 4 0 0.5 0 ) 					#name: #label 					#label: 					#(#{Kernel.UserMessage} 						#key: #GridColumn 						#defaultString: 'Grid - Column' 						#catalogID: #UIPainter ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 6 0 78 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Change 								#defaultString: 'Change:' 								#catalogID: #UIPainter ) ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 76 0 25 0 0 0.958333 50 0 ) 							#model: #'currentColumn spec callbacksSpec requestFocusInSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 76 0 53 0 0 0.958333 78 0 ) 							#model: #'currentColumn spec callbacksSpec requestValueChangeSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 76 0 81 0 0 0.958333 106 0 ) 							#name: #doubleClickMessage 							#model: #'currentColumn spec callbacksSpec requestDoubleClickSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 76 0 109 0 0 0.958139 134 0 ) 							#model: #'currentColumn spec callbacksSpec requestFocusOutSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 6 0 50 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Entry 								#defaultString: 'Entry:' 								#catalogID: #UIPainter ) ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 6 0 132 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Exit 								#defaultString: 'Exit:' 								#catalogID: #UIPainter ) ) 						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.0 0 1.0 154 0 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #RequestValidationOn 								#defaultString: 'Request Validation On' 								#catalogID: #UIPainter ) ) 						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 6 83 ) 							#name: #doubleClickLabel 							#label: 							#(#{Kernel.UserMessage} 								#key: #DClick 								#defaultString: 'D. Click:' 								#catalogID: #UIPainter ) ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 10 0 29 0 -11 1 183 0 ) 						#name: #fields ) ) ) ) )</body><body package="Grid-UIPainter">validationEditSpec	"Tools.UIPainter new openOnClass: self andSelector: #validationEditSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #Validation 				#defaultString: 'Validation' 				#catalogID: #UIPainter ) 			#bounds: #(#{Graphics.Rectangle} 890 509 1126 742 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 4 0 0.5 0 ) 					#name: #label 					#label: 					#(#{Kernel.UserMessage} 						#key: #GridColumn 						#defaultString: 'Grid - Column' 						#catalogID: #UIPainter ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 76 0 25 0 0 0.972222 50 0 ) 							#model: #'currentColumn spec callbacksSpec requestFocusInSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 76 0 53 0 0 0.972222 78 0 ) 							#model: #'currentColumn spec callbacksSpec requestValueChangeSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 76 0 81 0 0 0.972222 106 0 ) 							#model: #'currentColumn spec callbacksSpec requestFocusOutSelector | trigger' 							#menu: #fieldMenu 							#type: #symbol ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 6 0 78 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Change 								#defaultString: 'Change:' 								#catalogID: #UIPainter ) ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 6 0 50 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Entry 								#defaultString: 'Entry:' 								#catalogID: #UIPainter ) ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 6 0 106 0 0 1 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Exit 								#defaultString: 'Exit:' 								#catalogID: #UIPainter ) ) 						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 110 0 ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #RequestValidationOn 								#defaultString: 'Request Validation On' 								#catalogID: #UIPainter ) ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 10 0 29 0 -10 1 139 0 ) 						#name: #fields ) ) ) ) )</body></methods><methods><class-id>Tools.RowSelectorModel class</class-id> <category>interface specs</category><body package="Grid-UIPainter">rowSelectorSpec	"Tools.UIPainter new openOnClass: self andSelector: #rowSelectorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 301 127 ) 			#max: #(#{Core.Point} 301 143 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 941 655 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 4 0 0.5 0 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #RowSelectorColumn 						#defaultString: 'Row Selector Column' 						#catalogID: #UIPainter ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 10 187 135 213 ) 					#name: #ActionButton1 					#model: #deleteColumn 					#label: 					#(#{Kernel.UserMessage} 						#key: #RemoveColumn 						#defaultString: 'Remove Column' 						#catalogID: #UIPainter ) 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 18 72 ) 					#name: #rowsNumbered 					#model: #'specChannel showLineNumbers' 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #rowNumbersChanged ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #Numbered 						#defaultString: 'Numbered' 						#catalogID: #UIPainter ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 0 0 ) 							#name: #Label1 							#label: 							#(#{Kernel.UserMessage} 								#key: #offset 								#defaultString: 'Offset :' 								#catalogID: #UIPainter ) ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.Rectangle} 47 0 93 24 ) 							#name: #InputField1 							#model: #'specChannel lineNumberOffset' 							#menu: #fieldMenu 							#type: #number 							#formatString: '#' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 106 69.5 199 93.5 ) 						#name: #offsetComposite ) ) ) ) )</body></methods><methods><class-id>Tools.GridSpecModel class</class-id> <category>interface specs</category><body package="Grid-UIPainter">basicsEditSpec	"Tools.UIPainter new openOnClass: self andSelector: #basicsEditSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 300 206 ) 			#max: #(#{Core.Point} 300 206 ) 			#bounds: #(#{Graphics.Rectangle} 490 354 790 637 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0 146 0 1 1 150 0 ) 					#name: #Divider1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 4 0 54 0 0 1 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #AspectC 						#defaultString: 'Aspect:' 						#catalogID: #UIPainter ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 4 0 108 0 0 1 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #IDC 						#defaultString: 'ID:' 						#catalogID: #UIPainter ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 4 0 81 0 0 1 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #Menu 						#defaultString: 'Menu:' 						#catalogID: #UIPainter ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 86 0 28 0 -6 1 53 0 ) 					#model: #model 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#validAspectSelector: ) 					#menu: #fieldMenu ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 86 0 55 0 -6 1 80 0 ) 					#model: #menu 					#menu: #fieldMenu ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 86 0 82 0 -6 1 107 0 ) 					#model: #name 					#menu: #fieldMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -127 0.5 114 0 -2 0.5 140 0 ) 					#name: #newColumn 					#model: #addColumn 					#label: 					#(#{Kernel.UserMessage} 						#key: #NewColumn 						#defaultString: 'New Column' 						#catalogID: #UIPainter ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 114 0 127 0.5 140 0 ) 					#name: #deleteButton 					#flags: 40 					#model: #deleteColumn 					#label: 					#(#{Kernel.UserMessage} 						#key: #RemoveColumn 						#defaultString: 'Remove Column' 						#catalogID: #UIPainter ) 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -40 0.5 3 0 ) 					#label: #componentName ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 10 166 ) 					#name: #addRowSelector 					#model: #'specChannel hasHeaderColumn' 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #AddHeader 						#defaultString: 'Add Header' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 8 0.5 166 0 ) 					#name: #CheckBox1 					#model: #'specChannel hasHeaderRow' 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #AddHeader 						#defaultString: 'Add Header' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 10 185 ) 					#name: #CheckBox2 					#model: #'specChannel allowRowResizing' 					#label: 					#(#{Kernel.UserMessage} 						#key: #AllowResizing 						#defaultString: 'Allow Resizing' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 8 0.5 185 0 ) 					#name: #CheckBox3 					#model: #'specChannel allowColumnResizing' 					#label: 					#(#{Kernel.UserMessage} 						#key: #AllowResizing 						#defaultString: 'Allow Resizing' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 10 205 ) 					#name: #CheckBox7 					#model: #showHorizontalLines 					#label: 					#(#{Kernel.UserMessage} 						#key: #ShowBorders 						#defaultString: 'Show Borders' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 8 0.5 205 0 ) 					#name: #CheckBox6 					#model: #showVerticalLines 					#label: 					#(#{Kernel.UserMessage} 						#key: #ShowBorders 						#defaultString: 'Show Borders' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 8 0.5 224 0 ) 					#name: #CheckBox4 					#model: #'specChannel allowColumnReordering' 					#label: 					#(#{Kernel.UserMessage} 						#key: #AllowReordering 						#defaultString: 'Allow Reordering' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 8 0.5 244 0 ) 					#name: #CheckBox5 					#model: #'specChannel labelsAsButtons' 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #AllowSorting 						#defaultString: 'Allow Sorting' 						#catalogID: #UIPainter ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 0 0 ) 							#name: #Label1 							#label: 							#(#{Kernel.UserMessage} 								#key: #HeightColon 								#defaultString: 'Height:' 								#catalogID: #UIPainter ) ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutSizedOrigin} -46 1.0 0 0 46 25 ) 							#name: #rowSize 							#model: #'specChannel rowSize' 							#menu: #fieldMenu 							#type: #number 							#formatString: '#' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 13 0 259 0 -10 0.5 284 0 ) 						#name: #Composite1 ) ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 147 0 -2 0.5 -5 1 ) 					#name: #GroupBox1 					#label: 					#(#{Kernel.UserMessage} 						#key: #rows 						#defaultString: 'Rows' 						#catalogID: #UIPainter ) ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 147 0 -5 1 -5 1 ) 					#name: #GroupBox2 					#label: 					#(#{Kernel.UserMessage} 						#key: #Columns 						#defaultString: 'Columns' 						#catalogID: #UIPainter ) ) ) ) )</body></methods><methods><class-id>Tools.ColumnBasicsModel class</class-id> <category>interface specs</category><body package="Grid-UIPainter">basicsEditSpec	"Tools.UIPainter new openOnClass: self andSelector: #basicsEditSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 301 127 ) 			#max: #(#{Core.Point} 301 143 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 941 655 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 4 0 0.5 0 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #ColumnLabel 						#defaultString: 'Grid Column Label ' 						#catalogID: #UIPainter ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 180 0 0 1 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #IDC 						#defaultString: 'ID:' 						#catalogID: #UIPainter ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0 -10 1 152 0 ) 					#flags: 0 					#majorKey: #{Tools.UIPainterTool} 					#minorKey: #labelConstructorSpec 					#clientKey: #labelConstructor ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 86 0 153 0 -10 1 178 0 ) 					#model: #'specChannel id' 					#type: #symbol ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 10 187 135 213 ) 					#name: #ActionButton1 					#model: #deleteColumn 					#label: 					#(#{Kernel.UserMessage} 						#key: #RemoveColumn 						#defaultString: 'Remove Column' 						#catalogID: #UIPainter ) 					#defaultable: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 229 0 -10 1 299 0 ) 					#name: #helpMessage 					#flags: 4 					#model: #addSpecLabel 					#tabable: false 					#style: #system 					#isReadOnly: true 					#tabRequiresControl: false 					#isWrapped: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -49 1 187 0 -10 1 212 0 ) 					#name: #InputField2 					#model: #'specChannel width' 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: #resetGridReference ) 					#menu: #fieldMenu 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} -55 1 189 0 1 0 ) 					#name: #Label1 					#label: 					#(#{Kernel.UserMessage} 						#key: #WidthC 						#defaultString: 'Width:' 						#catalogID: #UIPainter ) ) ) ) )</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="Grid-UIPainter">gridColumn20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #gridColumn20X20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@21 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4227 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 4227)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L3L0@@L3L3L3L3L3L3L0@@L@@@P@@@@@@@L0@@L3L3P3L3P3L3L0@@L3L3P1DSP3L3L0@@L3L3P3L3P3L3L0@@L3L3P3L3P3L3L0@@L3L3QDQDP3L3L0@@L3L3P"H"P3L3L0@@L3L3P"H"P3L3L0@@L3L3P"H"P3L3L0@@L3L3P"H"P3L3L0@@L3L3P"H"P3L3L0@@L3L3P"H"P3L3L0@@L3L3P"H"P3L3L0@@L3L3P"H"P3L3L0@@L3L3P"H"P3L3L0@@L3L3P"H"P3L3L0@@L@@@@@@@@@@@L0@@L3L3L3L3L3L3L0@@L3L3L3L3L3L3L0@@'))</body><body package="Grid-UIPainter">gridColumn20x20bw	"Tools.UIMaskEditor new openOnClass: self andSelector: #gridColumn20x20bw"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@21 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 127 255 192 0 2 8 0 0 2 232 0 0 2 8 0 0 2 8 0 0 3 248 0 0 3 248 0 0 3 248 0 0 3 248 0 0 3 248 0 0 3 248 0 0 3 248 0 0 3 248 0 0 3 248 0 0 3 248 0 0 3 248 0 0 127 255 192 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>UI.GridSpec class</class-id> <category>interface specs</category><body package="Grid-UIPainter">detailsEditSpec	"Tools.UIPainter new openOnClass: self andSelector: #detailsEditSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 204 83 ) 			#max: #(#{Core.Point} 278 257 ) 			#bounds: #(#{Graphics.Rectangle} 1079 180 1366 468 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 14 0 26 0 -14 1 70 0 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #ScrollBars 						#defaultString: 'Scroll Bars' 						#catalogID: #UIPainter ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -40 0.5 3 0 ) 					#label: #componentName ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 22 45 ) 					#model: #hasHorizontalScrollBar 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #Horizontal 						#defaultString: 'Horizontal' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.5 45 0 ) 					#model: #hasVerticalScrollBar 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #Vertical 						#defaultString: 'Vertical' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 14 77 ) 					#model: #hasBorder 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #Bordered 						#defaultString: 'Bordered' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 14 98 ) 					#model: #isOpaque 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #Opaque 						#defaultString: 'Opaque' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 14 119 ) 					#model: #tabable 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #CanTab 						#defaultString: 'Can Tab' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 14 140 ) 					#model: #initiallyDisabled 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #InitiallyDisabled 						#defaultString: 'Initially Disabled' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 14 161 ) 					#model: #initiallyInvisible 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #InitiallyInvisible 						#defaultString: 'Initially Invisible' 						#catalogID: #UIPainter ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 14 182 ) 					#model: #multipleSelections 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #MultipleSelections 						#defaultString: 'Multiple Selections' 						#catalogID: #UIPainter ) ) ) ) )</body></methods><methods><class-id>UI.GridSpec class</class-id> <category>resources</category><body package="Grid-UIPainter">paletteIcon	"Tools.UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 4491)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4491 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6605 6605 6605)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 4227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3699 3699 3699)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4227 0 0)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@L3L3L3L3L3L3L3L7@@@@@CQDQDQDQDQDQDQDQ0@@@@@4QDQDQDQDQDQDQD\@@@@@MDQDQDQDQDQDQDQG@@@@@CQ@@@@@@@@@@@@DQ0@@@@@4PCL3D3L1L3L3AD\@@@@@MD@2L1L3LSL3L0QG@@@@@CQ@L3LSL3D3L3LDQ0@@@@@4PADQDQDQDQDQAD\@@@@@MD@3L1UUU#L3L0QG@@@@@CQ@L3LUUUX3L3LDQ0@@@@@4PCL3EUUQL3L3AD\@@@@@MD@8L6UUU#L3L0QG@@@@@CQ@L3LUUUD3L3LDQ0@@@@@4PCL3EUUQL3L3AD\@@@@@MD@3L1UUTSL3L0QG@@@@@CQ@DQDQDQDQDQDDQ0@@@@@4PCL3D3L1UUUUAD\@@@@@MD@2L1L3LUUUUPQG@@@@@CQ@L3LSL3EUUUTDQ0@@@@@4P@@@@@@@@@@@AD\@@@@@MDQDQDQDQDQDQDQG@@@@@CQDQDQDQDQDQDQDQ0@@@@A7]7]7]7]7]7]7]7\@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="Grid-UIPainter">paletteMonoIcon	"Tools.UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[255 255 255 192 128 0 0 64 128 0 0 64 128 0 0 64 128 0 0 64 143 255 252 64 136 66 4 64 138 66 4 64 136 66 4 64 143 255 252 64 136 126 4 64 136 126 4 64 136 126 4 64 138 126 4 64 136 126 4 64 136 126 4 64 136 126 4 64 143 255 252 64 136 67 252 64 138 67 252 64 136 67 252 64 143 255 252 64 128 0 0 64 128 0 0 64 128 0 0 64 255 255 255 192])</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>UISpecificationTreeModel</name><environment>Tools</environment><super>UI.TreeModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fullSpec </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter</category><attributes><package>UIPainter</package></attributes></class><class><name>DrawingModeTracker</name><environment>Tools</environment><super>UI.SelectionTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Modes</category><attributes><package>UIPainter</package></attributes></class><class><name>DragModeTracker</name><environment>Tools</environment><super>Tools.DrawingModeTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lastShowPoint dragObject </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Modes</category><attributes><package>UIPainter</package></attributes></class><class><name>SpecPlacementModeTracker</name><environment>Tools</environment><super>Tools.DragModeTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>specGenBlock dragee specClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Modes</category><attributes><package>UIPainter</package></attributes></class><class><name>SelectPlacementModeTracker</name><environment>Tools</environment><super>Tools.SpecPlacementModeTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Modes</category><attributes><package>UIPainter</package></attributes></class><class><name>UISpecification</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>SpecCollection</name><environment>UI</environment><super>UI.UISpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>collection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>FullSpec</name><environment>UI</environment><super>UI.UISpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>window component </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>ComponentSpec</name><environment>UI</environment><super>UI.UISpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>layout vAlignment hAlignment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>NamedSpec</name><environment>UI</environment><super>UI.ComponentSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name flags isOpaque colors </inst-vars><class-inst-vars>paletteIcon </class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>GridController</name><environment>UI</environment><super>UI.DataSetController</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetPoint sweepOrigin multiSelect selectedCell </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Grids</category><attributes><package>Grid</package></attributes></class><class><name>DataSetEditTracker</name><environment>Tools</environment><super>Tools.DrawingModeTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>oldMode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Modes</category><attributes><package>UIPainter</package></attributes></class><class><name>GridColumn</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>grid width label defaultHeight showColumnLine allowResizing allowSorting sortConstraint id spec </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Grids</category><attributes><package>Grid</package></attributes></class><class><name>GridHeaderColumn</name><environment>UI</environment><super>UI.GridColumn</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lineNumbers offset gridBody </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Grids</category><attributes><package>Grid</package></attributes></class><class><name>CompositeSpecCollection</name><environment>UI</environment><super>UI.SpecCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>compositeSpec </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>SelectModeTracker</name><environment>Tools</environment><super>UI.ScrollingTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dragging </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Modes</category><attributes><package>UIPainter</package></attributes></class><class><name>UIPainterTool</name><environment>Tools</environment><super>Tools.UIPainterWatcher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selection selectionKind controller currentSpecCopy currentSpecBindings specChannel subBuilder lock slice lastSlice slicesMenu sliceInfo client statusBarText list sliceChanging sliceTabChanging canvasTree menuBar currentView </inst-vars><class-inst-vars></class-inst-vars><imports>			private Smalltalk.TextConstants.*			</imports><category>UIPainter-Tools</category><attributes><package>UIPainter</package></attributes></class><class><name>IntegratedSpecModel</name><environment>Tools</environment><super>Tools.SpecModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>propertiesTool readMode interruptedRead </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Tools</category><attributes><package>UIPainter</package></attributes></class><class><name>ColorToolModel</name><environment>Tools</environment><super>Tools.IntegratedSpecModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cubesBrightness cubeColors colorValue colorName lookPreferences </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Tools</category><attributes><package>UIPainter</package></attributes></class><class><name>DragPlacementModeTracker</name><environment>Tools</environment><super>Tools.SpecPlacementModeTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetWindow lock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Modes</category><attributes><package>UIPainter</package></attributes></class><class><name>SubSpec</name><environment>UI</environment><super>UI.UISpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>UIDefiner</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>aClass initializeModels excludedBindings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Support</category><attributes><package>UIPainter</package></attributes></class><class><name>Grid</name><environment>UI</environment><super>UI.CompositeView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scrollableExtent columns rows selectionChannel firstVisibleColumn firstVisibleRow builder scrollOffset gridLineColor showRowLines showColumnLines allowSorting allowColumnResizing allowRowResizing allowColumnReordering verticalPolicy horizontalPolicy selectByCell state defaultRowHeight targetIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Grids</category><attributes><package>Grid</package></attributes></class><class><name>GridSpec</name><environment>UI</environment><super>UI.DataSetSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>headerColumn headerRow allowRowResizing selectByCell </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>Grid</package></attributes></class><class><name>PaintedDataSetView</name><environment>Tools</environment><super>UI.DataSetView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>editMode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Support</category><attributes><package>UIPainter</package></attributes></class></st-source>