<?xml version="1.0"?><st-source><!-- Name: Grid SamplesNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Comment: Grid widget test and development example applications.  Some applications within are experimental.DbIdentifier: bear73DbTrace: 400317DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'Grid' '') #(#package 'Employee-Example' ''))PackageName: Grid SamplesParcel: #('Grid Samples')ParcelName: Grid SamplesPrerequisiteParcels: #(#('Grid' '') #('Employee-Example' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 6:45:48 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 6:45:48 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Task</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id start end description completed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Core.Task</class-id><body>Task is a sample object for tracking a job schedule.Instance Variables	description	&lt;String | nil&gt;	task description	end	&lt;Date&gt;	completion date	start	&lt;Date&gt;	task start date	id	&lt;Number&gt;	task id number	completed &lt;Boolean&gt; true if task is completed</body></comment><class><name>Congressman</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lastName firstName middle state district party website </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.Congressman</class-id><body>Congressman holds attributes of a US congressman Instance Variables:	district	&lt;String&gt;	Assigned district.	firstName	&lt;String&gt;	First name.	lastName	&lt;String&gt;	Last name.	middle	&lt;String&gt;	Middle name or initial.	party	&lt;String&gt;	Affiliation.	state	&lt;String&gt;	Assigned state	website	&lt;String | nil&gt;	Website (if any)</body></comment><class><name>UserLogin</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>userName environment requiresLogin password fullName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.UserLogin</class-id><body>UserLogin is a sample data object for LineHilightGridInstance Variables:	environment	&lt;String&gt;	Login environment	fullName	&lt;String&gt;	User name	password	&lt;String&gt;	User password	requiresLogin	&lt;Boolean&gt;	Requires login if true.	userName	&lt;String&gt;	User login</body></comment><class><name>Grid1Example</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gridInterface employees </inst-vars><class-inst-vars></class-inst-vars><imports>			private Examples.*			</imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.Grid1Example</class-id><body>Grid1Example is the Grid equivalent of the simple Dataset1Example class demo application.Instance Variables:	employees	&lt;List of: Employee&gt; 	Employee instances represent each row in my grid 	gridInterface	&lt;GridInterface&gt;			Interface model for my grid </body></comment><class><name>Congress</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>members </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.Congress</class-id><body>Congress is an example database of US Congressman statistics.Instance Variables	members	&lt;OrderedCollection of: Congressman&gt;	Sample Congressmen</body></comment><class><name>LineHilightGrid</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gridInterface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.LineHilightGrid</class-id><body>LineHilightGrid demonstrates use of alternating shaded rows in a Grid</body></comment><class><name>InterfaceGridApp</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gridInterface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.InterfaceGridApp</class-id><body>InterfaceGridApp utilizes a Grid defined with a GridInterface model.  A GridInterface instance is a common access point for defining and modifying Grid data and appearence.Instance Variables	gridInterface	&lt;GridInterface&gt;	interface model for Grid widget</body></comment><class><name>GridCallbacks</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>monitor gridInterface fieldMonitor cellMonitor rowWrapping columnWrapping afterField beforeField </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.GridCallbacks</class-id><body>GridCallbacks is a sample application that demonstrates firing of validation and notification callbacks between a Grid, its cells, and a peer widget. Instance Variables	cellMonitor	&lt;CallbacksMonitor&gt;	Grid cell callbacks subapplication	beforeField	&lt;ValueHolder&gt;	model for input field in tab chain prior grid	afterField	&lt;ValueHolder&gt;	model for input field in tab chain after grid	fieldMonitor	&lt;CallbacksMonitor&gt;	Input field callbacks subapplication	gridInterface	&lt;GridInterface&gt;	Grid interface model	monitor	&lt;CallbacksMonitor&gt;	Grid callbacks subapplication		rowWrapping	&lt;Symbol&gt;	#(#none #wrap #noWrap)	columnWrapping	&lt;Symbol&gt;	 #(#none #wrapNext #wrapSame #noWrap)</body></comment><class><name>TaskGrid</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interface taskIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.TaskGrid</class-id><body>TaskGrid is a demo application for scheduling and managing tasks in a Grid.Instance Variables	interface	&lt;GridInterface&gt;	Grid interface 	taskIndex	&lt;Integer&gt;	task ID number</body></comment><class><name>BasicGridApp</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rows grid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.BasicGridApp</class-id><body>BasicGridApp is an demo application window with an empty Grid widget whose content is intended to be built programmatically from the ground up.  --Example--test := BasicGridApp new.test open.rows := test rows."do-it"														"Update aspect"rows removeFrom: 5 to: 8.									"#removeFrom:to:"rows removeAtIndex: 2.										"#remove:"test addRowIndex: 2.										"#insert:'test addRow.												"#insert:'test addRowsFrom: 10 to: 15.								"#insertCollection:"rows at: 2 put: (rows at: 6).									"#at:"test addRowsNumbering: 2.									"#appendCollection:"rows replaceFrom: 10 to: 15 with: rows copy startingAt: 1. 	"#replace:"Instance Variables	rows	&lt;List of: GridRow&gt;	List of GridRow instances for grid content. 	grid		&lt;Grid&gt;				Grid widget appearing in the window.				</body></comment><class><name>GridMixedContentApp</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gridInterface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.GridMixedContentApp</class-id><body>GridMixedContentApp demonstrates a grid wihose columns are filled with widgets outside the norm for a Grid, such as sliders that interactively update values in other columns.In this example, column 1 and 2 share model '_row x' to display a slider and its value by an input field, respectfully.  Columns 3 and 4 similarly display a slider and its input field value for model  '_row y'.   The final column displays x@y as a point value updating anytime columns 1 through 4 change value.Instance Variables	gridInterface	&lt;GridInterface&gt;			Interface model for my grid </body></comment><class><name>CallbacksMonitor</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>enableEntry enableDClick enableChange enableExit host name logTranscript </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.CallbacksMonitor</class-id><body>CallbacksMonitor is an interface that logs and graphically alerts validation and notification firings for change, entry, exit, and double click events for a widget. To use, create methods in your application to redirect widget validation or notification messages to an instance of CallbacksMonitor then install validation and notification selectors for the relevant UIPainterTool widget properties.  Add a CallbacksMonitor as a subcavas to your application to monitor callbacks in the UI.Instance Variables	enableChange	&lt;ValueModel&gt;	if true, allow change validation to proceed.	enableDClick	&lt;ValueModel&gt;	if true, allow double click  validation to proceed.	enableEntry	&lt;ValueModel&gt;	if true, allow entry validation to proceed.	enableExit	&lt;ValueModel&gt;	if true, allow exit validation to proceed.	host	&lt;Model | nil &gt;	model to match controller to monitor or log.  If nil, monitor and log send by controller	name	&lt;Symbol | String&gt;	name to be logged in Transcript upon callback</body></comment><class><name>CongressGrid</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gridInterface removedColumns dropType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.CongressGrid</class-id><body>CongressGrid is an interactive example Grid containing contact information for US congressmen.</body></comment><class><name>DateSelectorDialog</name><environment>Examples</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gridInterface year dateHolder monthName table </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grid Sample Apps</category><attributes><package>Grid Samples</package></attributes></class><comment><class-id>Examples.DateSelectorDialog</class-id><body>DateSelectorDialog requests and answers a Date selection from the user within a calendar month grid.  Weekend columns in the month grid may be reordered by drag and drop.Instance Variables	dateHolder	&lt;ValueModel&gt;			model on date selection.	gridInterface	&lt;GridInterface&gt;			interface model for Grid	monthName	&lt;PluggableAdaptor&gt;		model to set or access month name from date. 	year	&lt;PluggableAdaptor&gt;	 		model to set or access year from date.	table	&lt;TwoDList&gt;					private--table of days in month.</body></comment><methods><class-id>Core.Task</class-id> <category>accessing</category><body package="Grid Samples">completed	^completed</body><body package="Grid Samples">completed: aBoolean	completed := aBoolean</body><body package="Grid Samples">description	^description</body><body package="Grid Samples">description: aString	description := aString</body><body package="Grid Samples">duration	^end ifNotNil:[end subtractDate: start]</body><body package="Grid Samples">duration: aNumberOrNil		self end: (aNumberOrNil ifNotNil: [start addDays: aNumberOrNil])</body><body package="Grid Samples">end	^end</body><body package="Grid Samples">end: aDateOrNil	end := aDateOrNil</body><body package="Grid Samples">id	^id</body><body package="Grid Samples">id: aNumber	id := aNumber</body><body package="Grid Samples">start	^start</body><body package="Grid Samples">start: aDate	start := aDate</body></methods><methods><class-id>Core.Task</class-id> <category>initialize-release</category><body package="Grid Samples">initialize	start := Date today.	completed := false.</body></methods><methods><class-id>Core.Task class</class-id> <category>instance creation</category><body package="Grid Samples">new	^super new initialize</body></methods><methods><class-id>Examples.Congressman</class-id> <category>accessing</category><body package="Grid Samples">district	^district</body><body package="Grid Samples">district: anObject	district := anObject</body><body package="Grid Samples">firstName	^firstName</body><body package="Grid Samples">firstName: anObject	firstName := anObject</body><body package="Grid Samples">lastName	^lastName</body><body package="Grid Samples">lastName: anObject	lastName := anObject</body><body package="Grid Samples">middle	^middle</body><body package="Grid Samples">middle: anObject	middle := anObject</body><body package="Grid Samples">party	^party</body><body package="Grid Samples">party: anObject	party := anObject</body><body package="Grid Samples">state	^state</body><body package="Grid Samples">state: anObject	state := anObject</body><body package="Grid Samples">website	^website</body><body package="Grid Samples">website: anObject	website := anObject</body></methods><methods><class-id>Examples.Congressman</class-id> <category>printing</category><body package="Grid Samples">printOn: aStream 	self class printOn: aStream.	lastName ifNotNil: [aStream space nextPutAll: lastName].	firstName ifNotNil: 			[aStream				nextPut: $,;				space;				nextPutAll: firstName].	aStream space nextPut: $(.	party ifNotNil: [aStream nextPutAll: party].	state ifNotNil: 			[aStream				nextPut: $-;				nextPutAll: state].	district ifNotNil: 			[aStream				nextPut: $-;				nextPutAll: district].	aStream nextPut: $)</body><body package="Grid Samples">storeOn: aStream	aStream nextPut: $(; store: self class; space; nextPutAll:'new'.	lastName ifNotNil:[:value| aStream space nextPutAll: 'lastName:'; store: value; nextPut:$;].	firstName ifNotNil:[:value| aStream space nextPutAll:'firstName:'; store: value; nextPut:$;].	middle ifNotNil:[:value| aStream space nextPutAll: 'middle:'; store: value; nextPut:$;].	state ifNotNil:[:value| aStream space nextPutAll: 'state:'; store: value; nextPut:$;].	district ifNotNil:[:value| aStream space nextPutAll: 'district:'; store: value; nextPut:$;].		party ifNotNil:[:value| aStream space nextPutAll: 'party:'; store: value; nextPut:$;].	website ifNotNil:[:value| aStream space nextPutAll: 'website:'; store: value; nextPut:$;].	aStream space nextPutAll: 'yourself'; nextPut: $).</body></methods><methods><class-id>Examples.UserLogin</class-id> <category>accessing</category><body package="Grid Samples">environment	^environment</body><body package="Grid Samples">environment: aString	environment := aString</body><body package="Grid Samples">fullName	^fullName</body><body package="Grid Samples">fullName: aString	fullName := aString</body><body package="Grid Samples">password	^password</body><body package="Grid Samples">password: aString	password := aString</body><body package="Grid Samples">requiresLogin	^requiresLogin</body><body package="Grid Samples">requiresLogin: aBoolean	requiresLogin := aBoolean</body><body package="Grid Samples">userName	^userName</body><body package="Grid Samples">userName: aString	userName := aString</body></methods><methods><class-id>Examples.UserLogin</class-id> <category>initialize-release</category><body package="Grid Samples">initialize	requiresLogin := true.</body></methods><methods><class-id>Examples.UserLogin class</class-id> <category>instance creation</category><body package="Grid Samples">new	^super new initialize</body></methods><methods><class-id>Examples.Grid1Example</class-id> <category>interface opening</category><body package="Grid Samples">postBuildWith: aBuilder	super postBuildWith: aBuilder.	gridInterface defaultRowHeight: 25.	gridInterface items: employees.	gridInterface setRowsFromItems.</body></methods><methods><class-id>Examples.Grid1Example</class-id> <category>accessing</category><body package="Grid Samples">gridInterface	^gridInterface ifNil:[gridInterface := GridInterface new]</body></methods><methods><class-id>Examples.Grid1Example</class-id> <category>initialize-release</category><body package="Grid Samples">initialize		| anEmp |	super initialize.	employees := List new.	"The aspect for the grid should be a list of Employee instances. Create an employee to put in the list."	anEmp := Employee new initialize.	anEmp 		name: 'Tami Hayes'; 		empNo: '341-2'; 		citizen: true.	employees add: anEmp.	"Create an employee to put in the list."	anEmp := Employee new initialize.	anEmp 		name: 'Leo Mazon'; 		empNo: '786-9'; 		citizen: false.	employees add: anEmp.</body></methods><methods><class-id>Examples.Congress</class-id> <category>fileIn/Out</category><body package="Grid Samples">congressFile	^'$(VISUALWORKS)\preview\grid\congress.str' asLogicalFileSpecification</body><body package="Grid Samples">readMembers	| readStream |	readStream := self congressFile readStream.	[members := OrderedCollection readFrom: readStream] 		ensure: [readStream close]</body><body package="Grid Samples">saveMembers	| writeStream |	writeStream := self congressFile writeStream.	[members storeOn: writeStream] ensure: [writeStream close]</body></methods><methods><class-id>Examples.Congress</class-id> <category>accessing</category><body package="Grid Samples">members	^members</body><body package="Grid Samples">members: aCollection	members := aCollection</body></methods><methods><class-id>Examples.Congress class</class-id> <category>sample</category><body package="Grid Samples">longExample	^[self new readMembers] on: OsInaccessibleError		do: [:ex | self shortExample]</body><body package="Grid Samples">shortExample	^self new members: self sampleData</body></methods><methods><class-id>Examples.Congress class</class-id> <category>private</category><body package="Grid Samples">sampleData	^(OrderedCollection new)		add: ((Examples.Congressman new)					lastName: 'Young';					firstName: 'Don';					state: 'AK';					district: 'At Large';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Aderholt';					firstName: 'Robert';					middle: 'B.';					state: 'AL';					district: '4th';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Bachus';					firstName: 'Spencer';					state: 'AL';					district: '6th';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Bonner';					firstName: 'Jo';					state: 'AL';					district: '1st';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Cramer';					firstName: 'Robert';					middle: 'E.';					state: 'AL';					district: '5th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Davis';					firstName: 'Artur';					state: 'AL';					district: '7th';					yourself);		add: ((Examples.Congressman new)					lastName: 'Everett';					firstName: 'Terry';					state: 'AL';					district: '2nd';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Rogers';					firstName: 'Mike';					state: 'AL';					district: '3rd';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Boozman';					firstName: 'John';					state: 'AR';					district: '3rd';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Berry';					firstName: 'Marion';					state: 'AR';					district: '1st';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Snyder';					firstName: 'Vic';					state: 'AR';					district: '2nd';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Ross';					firstName: 'Mike';					state: 'AR';					district: '4th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Faleomavaega';					firstName: 'Eni';					middle: 'F.H.';					state: 'AS';					district: 'Delegate';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Grijalva';					firstName: 'RaÃºl';					middle: 'M.';					state: 'AZ';					district: '7th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Giffords';					firstName: 'Gabrielle';					state: 'AZ';					district: '8th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Franks';					firstName: 'Trent';					state: 'AZ';					district: '2nd';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Flake';					firstName: 'Jeff';					state: 'AZ';					district: '6th';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Shadegg';					firstName: 'John';					middle: 'B.';					state: 'AZ';					district: '3rd';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Renzi';					firstName: 'Rick';					state: 'AZ';					district: '1st';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Pastor';					firstName: 'Ed';					state: 'AZ';					district: '4th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Mitchell';					firstName: 'Harry';					middle: 'E.';					state: 'AZ';					district: '5th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Herger';					firstName: 'Wally';					state: 'CA';					district: '2nd';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Harman';					firstName: 'Jane';					state: 'CA';					district: '36th';					yourself);		add: ((Examples.Congressman new)					lastName: 'Gallegly';					firstName: 'Elton';					state: 'CA';					district: '24th';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Filner';					firstName: 'Bob';					state: 'CA';					district: '51st';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Farr';					firstName: 'Sam';					state: 'CA';					district: '17th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Honda';					firstName: 'Michael';					middle: 'M.';					state: 'CA';					district: '15th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Issa';					firstName: 'Darrell';					middle: 'E.';					state: 'CA';					district: '49th';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Lewis';					firstName: 'Jerry';					state: 'CA';					district: '41st';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Lee';					firstName: 'Barbara';					state: 'CA';					district: '9th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Lantos';					firstName: 'Tom';					state: 'CA';					district: '12th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Eshoo';					firstName: 'Anna';					middle: 'G.';					state: 'CA';					district: '14th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Hunter';					firstName: 'Duncan';					state: 'CA';					district: '52nd';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Dreier';					firstName: 'David';					state: 'CA';					district: '26th';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Bono';					firstName: 'Mary';					state: 'CA';					district: '45th';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Bilbray';					firstName: 'Brian';					middle: 'P.';					state: 'CA';					district: '50th';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Lofgren';					firstName: 'Zoe';					state: 'CA';					district: '16th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Becerra';					firstName: 'Xavier';					state: 'CA';					district: '31st';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Baca';					firstName: 'Joe';					state: 'CA';					district: '43rd';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Calvert';					firstName: 'Ken';					state: 'CA';					district: '44th';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Berman';					firstName: 'Howard';					middle: 'L.';					state: 'CA';					district: '28th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Doolittle';					firstName: 'John';					middle: 'T.';					state: 'CA';					district: '4th';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Davis';					firstName: 'Susan';					middle: 'A.';					state: 'CA';					district: '53rd';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Costa';					firstName: 'Jim';					state: 'CA';					district: '20th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Cardoza';					firstName: 'Dennis';					middle: 'A.';					state: 'CA';					district: '18th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Capps';					firstName: 'Lois';					state: 'CA';					district: '23rd';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Campbell';					firstName: 'John';					state: 'CA';					district: '48th';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'Lungren';					firstName: 'Daniel';					middle: 'E.';					state: 'CA';					district: '3rd';					party: 'R';					yourself);		add: ((Examples.Congressman new)					lastName: 'SÃ¡nchez';					firstName: 'Linda';					middle: 'T.';					state: 'CA';					district: '39th';					party: 'D';					yourself);		add: ((Examples.Congressman new)					lastName: 'Stark';					firstName: 'Fortney';					middle: 'Pete';					state: 'CA';					district: '13th';					party: 'D';					yourself);		yourself</body></methods><methods><class-id>Examples.LineHilightGrid</class-id> <category>accessing</category><body package="Grid Samples">users	^OrderedCollection 		with: ((UserLogin new)				userName: 'scott';				password: 'tiger';				fullName: 'Scott Nealy';				environment: 'bear_b73';				yourself)		with: ((UserLogin new)				userName: 'rdalia';				password: 'zorba';				fullName: 'Rena Dalia';				environment: '78.169.169.31_store';				yourself)		with: ((UserLogin new)				userName: 'davec';				password: 'tea42';				fullName: 'David Carroll';				environment: 'store.cincomsmalltalk.com:5432_store_public';				yourself)		with: ((UserLogin new)				userName: 'dralke';				password: 'BONGOS';				fullName: 'Donald Ralke';				environment: 'store.cincomsmalltalk.com:5432_store_public';				yourself)</body></methods><methods><class-id>Examples.LineHilightGrid</class-id> <category>aspects</category><body package="Grid Samples">gridInterface	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^gridInterface isNil		ifTrue:			[gridInterface := GridInterface new]		ifFalse:			[gridInterface]</body></methods><methods><class-id>Examples.LineHilightGrid</class-id> <category>initialize-release</category><body package="Grid Samples">initialize	super initialize.	self gridInterface rows: (self users collect: [:each | GridHilightRow on: each height: 20]) asList</body></methods><methods><class-id>Examples.InterfaceGridApp</class-id> <category>initialize-release</category><body package="Grid Samples">initialize	| numRows numColumns entries grid |	super initialize.	numRows := 20.	numColumns := 20.	entries := (1 to: numRows)		collect: [:y | (1 to: numColumns) collect: [:x | x @ y ]].	self gridInterface 		defaultRowHeight: 25;		headerRow: (GridHeaderRow new height: 25);		headerColumn: (GridHeaderColumn new width: 20; lineNumbers: true);		items: entries asList;		setRowsFromItems.	grid := self gridInterface grid.	(1 to: numColumns)		do:			[:i | 			GridColumn				spec: (self columnInputSpecIndexedBy: i)				in: grid				width: 50				label: i printString].</body></methods><methods><class-id>Examples.InterfaceGridApp</class-id> <category>aspects</category><body package="Grid Samples">gridDecorator	^(GridDecorator on: self gridInterface grid interface: self gridInterface) useHorizontalScrollBar</body><body package="Grid Samples">gridInterface	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^gridInterface isNil		ifTrue:			[gridInterface := GridInterface new]		ifFalse:			[gridInterface]</body></methods><methods><class-id>Examples.InterfaceGridApp</class-id> <category>building</category><body package="Grid Samples">columnInputSpecIndexedBy: anInteger	^InputFieldSpec new 		name: anInteger;		model: ('_row ', anInteger printString) asSymbol;		type: #object;		yourself</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>notification-field</category><body package="Grid Samples">fieldChangeNotification: aController	self fieldMonitor changeNotification: aController.</body><body package="Grid Samples">fieldDClickNotification: aController	self fieldMonitor dClickNotification: aController.</body><body package="Grid Samples">fieldEntryNotification: aController 	self fieldMonitor entryNotification: aController.</body><body package="Grid Samples">fieldExitNotification: aController 	self fieldMonitor exitNotification: aController.</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>validation</category><body package="Grid Samples">changeValidation: aController	self monitor changeValidation: aController do:[:value| ^value].	^true</body><body package="Grid Samples">dClickValidation: aController	self monitor dClickValidation: aController do:[:value| ^value].	^true</body><body package="Grid Samples">entryValidation: aController 	self monitor entryValidation: aController do:[:value| ^value].	^true</body><body package="Grid Samples">exitValidation: aController 	self monitor exitValidation: aController do:[:value| ^value].	^true</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>private</category><body package="Grid Samples">horizontalPolicy: aSymbol		(self widgetAt: #Grid1) horizontalPolicy: aSymbol.	self columnWrapping value: aSymbol</body><body package="Grid Samples">verticalPolicy: aSymbol		(self widgetAt: #Grid1) verticalPolicy: aSymbol.	self rowWrapping value: aSymbol</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>validation-field</category><body package="Grid Samples">fieldChangeValidation: aController	self fieldMonitor changeValidation: aController do:[:value| ^value].	^true</body><body package="Grid Samples">fieldDClickValidation: aController	self fieldMonitor dClickValidation: aController do:[:value| ^value].	^true</body><body package="Grid Samples">fieldEntryValidation: aController 	self fieldMonitor entryValidation: aController do:[:value| ^value].	^true</body><body package="Grid Samples">fieldExitValidation: aController 	self fieldMonitor exitValidation: aController do:[:value| ^value].		^true</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>validation-cell</category><body package="Grid Samples">cellChangeValidation: aController	self cellMonitor changeValidation: aController do:[:value| ^value].	^true</body><body package="Grid Samples">cellDClickValidation: aController	self cellMonitor dClickValidation: aController do:[:value| ^value].	^true</body><body package="Grid Samples">cellEntryValidation: aController 	self cellMonitor entryValidation: aController do:[:value| ^value].	^true</body><body package="Grid Samples">cellExitValidation: aController 	self cellMonitor exitValidation: aController do:[:value| ^value].	^true</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>notification-cell</category><body package="Grid Samples">cellChangeNotification: aController	self cellMonitor changeNotification: aController.</body><body package="Grid Samples">cellDClickNotification: aController	self cellMonitor dClickNotification: aController.</body><body package="Grid Samples">cellEntryNotification: aController 	self cellMonitor entryNotification: aController.</body><body package="Grid Samples">cellExitNotification: aController 	self cellMonitor exitNotification: aController.</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>actions</category><body package="Grid Samples">inspectGridKP	self gridInterface grid keyboardProcessor inspect</body><body package="Grid Samples">inspectWindowKP	self mainWindow keyboardProcessor inspect</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>vertical policy</category><body package="Grid Samples">noVerticalWrap	self  verticalPolicy: #noWrap.</body><body package="Grid Samples">verticalWrap	self  verticalPolicy: #wrap.</body><body package="Grid Samples">verticalWrapOff	self verticalPolicy: #none.</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>accessing</category><body package="Grid Samples">cellMonitor	^cellMonitor isNil		ifTrue:			[cellMonitor := CallbacksMonitor new name: 'Cell']		ifFalse:			[cellMonitor]</body><body package="Grid Samples">fieldMonitor	^fieldMonitor isNil		ifTrue:			[fieldMonitor := CallbacksMonitor new name: 'Field']		ifFalse:			[fieldMonitor]</body><body package="Grid Samples">monitor	^monitor isNil		ifTrue:			[monitor := CallbacksMonitor new name: 'Grid']		ifFalse:			[monitor]</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>aspects</category><body package="Grid Samples">afterField	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^afterField isNil		ifTrue:			[afterField := 'After Grid' asValue]		ifFalse:			[afterField]</body><body package="Grid Samples">beforeField	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^beforeField isNil		ifTrue:			[beforeField :=  'Before Grid'  asValue]		ifFalse:			[beforeField]</body><body package="Grid Samples">columnWrapping		^columnWrapping ifNil: [columnWrapping := #wrapNext asValue]</body><body package="Grid Samples">gridInterface	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^gridInterface isNil		ifTrue:			[gridInterface := GridInterface new]		ifFalse:			[gridInterface]</body><body package="Grid Samples">rowWrapping		^rowWrapping ifNil: [rowWrapping := #noWrap asValue]</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>notification</category><body package="Grid Samples">changeNotification: aController	self monitor changeNotification: aController.</body><body package="Grid Samples">dClickNotification: aController	self monitor dClickNotification: aController.</body><body package="Grid Samples">entryNotification: aController 	self monitor entryNotification: aController.</body><body package="Grid Samples">exitNotification: aController 	self monitor exitNotification: aController.</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>horizontal policy</category><body package="Grid Samples">horizontalWrapOff		self horizontalPolicy: #none</body><body package="Grid Samples">noHorizontalWrap		self horizontalPolicy: #noWrap.</body><body package="Grid Samples">wrapNextRow		self horizontalPolicy: #wrapNext.</body><body package="Grid Samples">wrapSameRow		self horizontalPolicy: #wrapSame.</body></methods><methods><class-id>Examples.GridCallbacks</class-id> <category>interface opening</category><body package="Grid Samples">postBuildWith: aBuilder	| items |	super postBuildWith: aBuilder.	self monitor host: (self widgetAt: #Grid1).	items := (1 to: 10) collect: [:y | (1 to: 10) collect: [:x | y @ x]].	gridInterface items: items.	gridInterface setRowsFromItems.</body></methods><methods><class-id>Examples.TaskGrid</class-id> <category>private</category><body package="Grid Samples">setAspect: aSymbol forCell: aGridVisualCell with: aUIBuilder	"Create start and end column components as buttons labeled with the date"	| widget aspect aspectKey |	aspectKey := (aGridVisualCell rowBindingKey , ' ' , aSymbol) asSymbol.	aspect := (AspectAdaptor forAspect: aSymbol)				subjectChannel: (aUIBuilder aspectAt: aGridVisualCell rowBindingKey).	aUIBuilder aspectAt: aspectKey put: aspect.	widget := aGridVisualCell widget.	aspect compute: 			[:value |			value				ifNotNil: 					[widget setLabelString: value longPrintString.					widget invalidate]].	widget model compute: 			[(DateSelectorDialog requestFromDate: aspect value)				ifNotNil: [:value | aspect value: value]].	aspect changed</body></methods><methods><class-id>Examples.TaskGrid</class-id> <category>actions</category><body package="Grid Samples">addTask	self interface items add: self newTask.</body><body package="Grid Samples">newTask		^(Task new)		id: (taskIndex := taskIndex + 1);		description: 'Enter task description here';		start: Date today;		yourself</body></methods><methods><class-id>Examples.TaskGrid</class-id> <category>initialize-release</category><body package="Grid Samples">initialize		super initialize.	interface := (GridInterface new)		defaultRowHeight: 20;		defaultColumnWidth: 80.	taskIndex := 0</body></methods><methods><class-id>Examples.TaskGrid</class-id> <category>interface opening</category><body package="Grid Samples">postBuildCell: aGridVisualCell with: aUIBuilder	aGridVisualCell gridRow isHeader ifTrue:[^self].	aGridVisualCell gridColumn id = #start 		ifTrue:[ self setAspect: #start forCell: aGridVisualCell with: aUIBuilder].	aGridVisualCell gridColumn id = #end		ifTrue:[ self setAspect: #end forCell: aGridVisualCell with: aUIBuilder].</body><body package="Grid Samples">postBuildWith: aUIBuilder		super postBuildWith: aUIBuilder.	self addTask.</body></methods><methods><class-id>Examples.TaskGrid</class-id> <category>notification</category><body package="Grid Samples">updateDuration		self interface selection ifVisibleDo: [:visualCell | (visualCell peerForColumnID: #duration) widget invalidate]</body><body package="Grid Samples">updateEnd	self interface selection ifVisibleDo: 			[:visualCell |			(self interface grid builder aspectAt: (visualCell rowBindingKey , ' end') asSymbol)				ifNotNil: [:value | value changed]]</body></methods><methods><class-id>Examples.TaskGrid</class-id> <category>accessing</category><body package="Grid Samples">interface 	^interface</body></methods><methods><class-id>Examples.BasicGridApp</class-id> <category>accessing</category><body package="Grid Samples">grid	^grid</body><body package="Grid Samples">rows	^rows</body></methods><methods><class-id>Examples.BasicGridApp</class-id> <category>initialize-release</category><body package="Grid Samples">initialize	| numColumns numRows entries |	super initialize.	numRows := 20.	numColumns := 20.	entries := (1 to: numRows)		collect: [:y | (1 to: numColumns) collect: [:x | x @ y ]].	rows := entries asList collect:[:item| GridRow on: item height: 25].	grid := Grid new.	grid rows: rows.	(1 to: numColumns)		do:			[:i | 			GridColumn				spec: (self columnInputSpecIndexedBy: i)				in: grid				width: 80].</body></methods><methods><class-id>Examples.BasicGridApp</class-id> <category>building</category><body package="Grid Samples">addRow		GridRow		on: ((1 to: grid numberOfColumns) collect: [:x | x @ rows size])		height: 25		to: grid</body><body package="Grid Samples">addRowIndex: anInteger		| newRow |	newRow := GridRow		on: ((1 to: grid numberOfColumns) collect: [:x | x @ anInteger])		height: 25.	rows add: newRow beforeIndex: anInteger.	self resequenceRowsFrom: anInteger</body><body package="Grid Samples">addRowsFrom: start to: end		| newRows |	newRows := (start to: end)		collect:			[:index | 			GridRow				on: ((1 to: grid numberOfColumns) collect: [:x | x @ index])				height: 25].	rows addAll: newRows beforeIndex: start.	self resequenceRowsFrom: end.</body><body package="Grid Samples">addRowsNumbering: anInteger		| newRows startSize |	startSize := rows size.	newRows := (startSize + 1 to: startSize + anInteger)		collect:			[:index | 			GridRow				on: ((1 to: grid numberOfColumns) collect: [:x | x @ index])				height: 25].	rows addAll: newRows.</body><body package="Grid Samples">columnInputSpecIndexedBy: anInteger	^InputFieldSpec new 		name: anInteger;		model: ('_row ', anInteger printString) asSymbol;		type: #object;		yourself</body><body package="Grid Samples">removeRowIndex: anInteger		rows removeAtIndex: anInteger.	self resequenceRowsFrom: anInteger</body><body package="Grid Samples">removeRowsFrom: start to: stop		rows removeFrom: start to: stop.	self resequenceRowsFrom: start.</body><body package="Grid Samples">resequenceRowsFrom: anInteger		anInteger + 1		to: rows size		do:			[:index | 			| row |			row := rows at: index.			row item do: [:each | each y: index]]</body></methods><methods><class-id>Examples.BasicGridApp</class-id> <category>interface opening</category><body package="Grid Samples">postBuildWith: aBuilder	super postBuildWith: aBuilder.	grid builder source: aBuilder source.</body></methods><methods><class-id>Examples.GridMixedContentApp</class-id> <category>aspects</category><body package="Grid Samples">gridInterface	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^gridInterface isNil		ifTrue:			[gridInterface := GridInterface new]		ifFalse:			[gridInterface]</body></methods><methods><class-id>Examples.GridMixedContentApp</class-id> <category>initialize-release</category><body package="Grid Samples">initialize	super initialize.	self gridInterface items: (List with: 1@1 with:2@2 with:3@3 with:4@4).	self gridInterface defaultRowHeight: 25.	self gridInterface setRowsFromItems.</body></methods><methods><class-id>Examples.GridMixedContentApp</class-id> <category>interface opening</category><body package="Grid Samples">postBuildCell: aGridVisualCell with: aUIBuilder	"Add a dependency to update column id #pointValue with a value change in models #x or #y"	aGridVisualCell gridRow isHeader ifTrue:[^self].	aGridVisualCell gridColumn id = #pointValue		ifTrue: 			[(aGridVisualCell peerForColumnID: #x)				ifNotNil: [:visual | visual model addDependent: aGridVisualCell widget].			(aGridVisualCell peerForColumnID: #y)				ifNotNil: [:visual | visual model addDependent: aGridVisualCell widget]]</body></methods><methods><class-id>Examples.CallbacksMonitor</class-id> <category>accessing</category><body package="Grid Samples">host	^host</body><body package="Grid Samples">host: anObject	host := anObject</body><body package="Grid Samples">logTranscript	^logTranscript ifNil:[logTranscript := Transcript]</body><body package="Grid Samples">logTranscript: aTextCollector	logTranscript := aTextCollector</body><body package="Grid Samples">name	^name</body><body package="Grid Samples">name: aSymbol	name := aSymbol</body></methods><methods><class-id>Examples.CallbacksMonitor</class-id> <category>testing</category><body package="Grid Samples">validForController: aController	^host isNil or:[host controller = aController]</body></methods><methods><class-id>Examples.CallbacksMonitor</class-id> <category>validation</category><body package="Grid Samples">changeValidation: aController	self flash: #changeValidate controller: aController.	^self enableChange value</body><body package="Grid Samples">changeValidation: aController  do: aBlock	(self validForController: aController) ifFalse:[^true].	self flash: #changeValidate controller: aController.	aBlock value: self enableChange value</body><body package="Grid Samples">dClickValidation: aController	self flash: #dClickValidate controller: aController.	^self enableDClick value</body><body package="Grid Samples">dClickValidation: aController do: aBlock	(self validForController: aController) ifFalse:[^true].	self flash: #dClickValidate controller: aController.	aBlock value: self enableDClick value</body><body package="Grid Samples">entryValidation: aController 	self flash: #entryValidate controller: aController.	^self enableEntry value</body><body package="Grid Samples">entryValidation: aController do: aBlock	(self validForController: aController) ifFalse:[^true].	self flash: #entryValidate controller: aController.	aBlock value: self enableEntry value</body><body package="Grid Samples">exitValidation: aController 	self flash: #exitValidate controller: aController.	^self enableExit value</body><body package="Grid Samples">exitValidation: aController do: aBlock	(self validForController: aController) ifFalse:[^true].	self flash: #exitValidate controller: aController.	aBlock value: self enableExit value</body></methods><methods><class-id>Examples.CallbacksMonitor</class-id> <category>aspects</category><body package="Grid Samples">enableChange	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^enableChange isNil		ifTrue:			[enableChange := true asValue]		ifFalse:			[enableChange]</body><body package="Grid Samples">enableDClick	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^enableDClick isNil		ifTrue:			[enableDClick := true asValue]		ifFalse:			[enableDClick]</body><body package="Grid Samples">enableEntry	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^enableEntry isNil		ifTrue:			[enableEntry := true asValue]		ifFalse:			[enableEntry]</body><body package="Grid Samples">enableExit	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^enableExit isNil		ifTrue:			[enableExit := true asValue]		ifFalse:			[enableExit]</body></methods><methods><class-id>Examples.CallbacksMonitor</class-id> <category>notification</category><body package="Grid Samples">changeNotification: aController	self flash: #changeNotify controller: aController</body><body package="Grid Samples">dClickNotification: aController	self flash: #dClickNotify controller: aController</body><body package="Grid Samples">entryNotification: aController 	self flash: #entryNotify controller: aController</body><body package="Grid Samples">exitNotification: aController 	self flash: #exitNotify controller: aController</body></methods><methods><class-id>Examples.CallbacksMonitor</class-id> <category>private</category><body package="Grid Samples">flash: aSymbol controller: aController	(self validForController: aController) ifFalse:[^self].	(self builder componentAt: aSymbol) widget flash.	name ifNotNil:[self logTranscript show: name; space].	self logTranscript show: ('&lt;1s&gt;:&lt;2p&gt;' expandMacrosWith: aSymbol with: aController); cr.</body></methods><methods><class-id>Examples.CallbacksMonitor</class-id> <category>logging</category><body package="Grid Samples">clear	self logTranscript clear</body></methods><methods><class-id>Examples.CongressGrid</class-id> <category>accessing</category><body package="Grid Samples">gridInterface	^gridInterface ifNil:[gridInterface := GridInterface new]</body><body package="Grid Samples">items: aList	(self gridInterface)		items: aList;		setRowsFromItems</body><body package="Grid Samples">parties	^(List with: 'D' with: 'R' with: nil) asValue</body><body package="Grid Samples">partySelection		| partyList |	partyList := (self gridInterface items collect: [:item | item party]) asSet asOrderedCollection.	^Dialog 		choose: 'Select party' 		fromList: partyList 		values: partyList		lines: 3 		cancel: nil</body></methods><methods><class-id>Examples.CongressGrid</class-id> <category>menu actions</category><body package="Grid Samples">matchByDistrict		self districtSelection		ifNotNil:			[:entry | 			(self class new				items:					(self gridInterface items select: [:item | entry = item district]))				open]</body><body package="Grid Samples">matchByParty		self partySelection		ifNotNil:			[:entry | 			(self class new				items: (self gridInterface items select: [:item | entry = item party]))				open]</body><body package="Grid Samples">matchByState		self stateSelection		ifNotNil:			[:entry | 			(self class new				items: (self gridInterface items select: [:item | entry = item state]))				open]</body><body package="Grid Samples">matchFirstName		| entry |	entry := Dialog request: 'First name to match on'.	entry ifNil: [^self].	(self class new		items:			(self gridInterface items select: [:item | entry match: item firstName]))		open</body><body package="Grid Samples">matchLastName	| entry |	entry := Dialog request: 'Last name to match on'.	entry ifNil:[^self].	(self class new		items:			(self gridInterface items select: [:item | entry match: item lastName]))		open</body><body package="Grid Samples">selectByDistrict		self districtSelection		ifNotNil:			[:entry | self gridInterface rows do: [:row | row isSelected: entry = row item district]]</body><body package="Grid Samples">selectByParty		self partySelection		ifNotNil:			[:entry | self gridInterface rows do: [:row | row isSelected: entry = row item party]]</body><body package="Grid Samples">selectByState		self stateSelection		ifNotNil:			[:entry | self gridInterface rows do: [:row | row isSelected: entry = row item state]]</body></methods><methods><class-id>Examples.CongressGrid</class-id> <category>private</category><body package="Grid Samples">districtSelection	| districtList |	districtList := (self gridInterface items collect:[:item| item district trimBlanks]) asSet asOrderedCollection.	^Dialog 		choose: 'Select district' 		fromList: districtList		values:  districtList		lines: 8 		cancel: nil.</body><body package="Grid Samples">stateSelection	| stateList |	stateList := (self gridInterface items collect: [:item | item state]) asSet asOrderedCollection.	^Dialog 		choose: 'Select state' 		fromList: stateList		values:  stateList		lines: 8 		cancel: nil</body></methods><methods><class-id>Examples.CongressGrid</class-id> <category>testing</category><body package="Grid Samples">hasDistrict	^(self gridInterface columnAtNameKey: #district) notNil</body><body package="Grid Samples">hasMiddleName	^(self gridInterface columnAtNameKey: #middleName) notNil</body><body package="Grid Samples">hasParty	^(self gridInterface columnAtNameKey: #party) notNil</body></methods><methods><class-id>Examples.CongressGrid</class-id> <category>drag and drop</category><body package="Grid Samples">doDrag: aController 	"Drag the currently selected change. Include all available	 information so that the drop target can use whatever it needs."	| data |	data := DragDropData new.	data contextWindow: builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: self gridInterface items.	(DragDropManager			withDropSource: DropSource new			withData: data) doDragDrop</body><body package="Grid Samples">dragEnter: aDragContext 	"A drag has entered the list. If the receiver is	 happy to accept a drag then fill-in the appropriate data and answer that dragging should continue."	(aDragContext data contextApplication isKindOf: CongressGrid) ifFalse: [^#dropEffectNone].	aDragContext dropTarget 		clientData: (self initialDropState: (self widgetAt: #List1)).	^aDragContext shiftDown 		ifTrue: [#dropEffectCopy]		ifFalse: [#dropEffectMove]</body><body package="Grid Samples">dragExit: aDragContext	"A drag has left the list"	^#dropEffectNone</body><body package="Grid Samples">dragOver: aDragContext 	"A drag is over the list view.  Enable a drop if the drag originated in this application"	^(aDragContext data contextApplication isKindOf: CongressGrid)		ifTrue: 			[(self widgetAt: #Grid1) 				perform: self dropType value				with: aDragContext				with: true.			aDragContext shiftDown ifTrue: [#dropEffectCopy] ifFalse: [#dropEffectMove]]		ifFalse: [#dropEffectNone]</body><body package="Grid Samples">drop: aDragContext 	"A drop has occurred on the list.  Remove the object(s) dragged from its source and place it in the drop target at position targetIndex."	^aDragContext data clientData selectionIndex isInteger		ifTrue:[self dropSingle: aDragContext]		ifFalse:[self dropMultiple: aDragContext]</body><body package="Grid Samples">dropType	^dropType isNil		ifTrue:			[dropType := #showInsertDropFeedbackIn:allowScrolling: asValue]		ifFalse:			[dropType]</body><body package="Grid Samples">initialDropState: aGrid	"Answer the initial state of aGrid when a drag has begun within its 	bounds. The state will be used to re-establish the appearance of aGrid when 	a drag leaves."	| dict |	dict := IdentityDictionary new.	aGrid hasFocus: true.	^dict</body></methods><methods><class-id>Examples.CongressGrid</class-id> <category>initialize-release</category><body package="Grid Samples">initialize	super initialize.	removedColumns := Dictionary new.	(self gridInterface)		defaultRowHeight: 25;		selectByCell: false.	self items: Congress longExample members asList</body></methods><methods><class-id>Examples.CongressGrid</class-id> <category>columns</category><body package="Grid Samples">withDistrict	"Toggle remove/add the district column"	(self gridInterface columnAtNameKey: #district)		ifNotNil: [:col | removedColumns at: #district put: col remove]		ifNil: [self gridInterface columns add: (removedColumns at: #district)]</body><body package="Grid Samples">withMiddleName	"Toggle add/remove the middle name column. Ensure the name appears in column position 3"	(self gridInterface columnAtNameKey: #middleName)		ifNotNil: [:col | removedColumns at: #middleName put: col remove]		ifNil: [self gridInterface columns add: (removedColumns at: #middleName)]</body><body package="Grid Samples">withParty	"Toggle remove/add the party column"	(self gridInterface columnAtNameKey: #party)		ifNotNil: [:col | removedColumns at: #party put: col remove]		ifNil: [self gridInterface columns add: (removedColumns at: #party)]</body></methods><methods><class-id>Examples.DateSelectorDialog</class-id> <category>accessing</category><body package="Grid Samples">gridInterface	^gridInterface</body><body package="Grid Samples">selection	^self date</body><body package="Grid Samples">selection: aDate	self dateHolder value: aDate</body></methods><methods><class-id>Examples.DateSelectorDialog</class-id> <category>private</category><body package="Grid Samples">columnIndexOfDate: aDate	gridInterface columns keysAndValuesDo: [:i :column | column id = aDate weekday ifTrue: [^i]].	self error: 'One or more columns have invalid id'</body><body package="Grid Samples">monthChoices	^self monthNames asValue</body><body package="Grid Samples">monthNames	^Locale current timePolicy allMonthNames first</body><body package="Grid Samples">setCalendar	"Construct the month table for the current date and column configuration. Highlight the current day of month"	| date daysInMonth weeks week1Offset firstDayOfMonth firstColumnIndex selectedDayIndex weeksInMonth columnOffset |	date := self date.	daysInMonth := date daysInMonth.	firstDayOfMonth := Date newDay: date firstDayOfMonth year: date year.	firstColumnIndex := Date dayOfWeek: gridInterface columns first id.	week1Offset := (firstDayOfMonth weekdayIndex - firstColumnIndex + 7) \\ 7.	weeksInMonth := ((daysInMonth + week1Offset) / 7) ceiling.	table := TwoDList columns: 7 rows: weeksInMonth.	columnOffset := self columnIndexOfDate: firstDayOfMonth.	1 to: daysInMonth		do: 			[:day |			| irow icolumn |			irow := (columnOffset + day - 2) // 7 + 1.			icolumn := (columnOffset + day - 2) \\ 7 + 1.			table atPoint: icolumn @ irow put: day printString].	weeks := (1 to: weeksInMonth)				collect: [:irow | (1 to: 7) collect: [:icolumn | table atPoint: icolumn @ irow]].	gridInterface items: weeks.	gridInterface setRowsFromItems.	selectedDayIndex := date dayOfMonth - 1 + week1Offset.	gridInterface		selectPoint: (selectedDayIndex \\ 7 + 1) @ (selectedDayIndex // 7 + 1).	"Ensure grid lines refresh"	gridInterface grid invalidate.</body><body package="Grid Samples">updateDay	gridInterface grid selectionCellDo: 			[:cell |			(table atPoint: cell cellPoint)				ifNotNil: 					[:value |					| newDay currentDate |					newDay := Integer readFrom: value readStream.					currentDate := self date.					newDay = currentDate dayOfMonth						ifFalse: 							[self dateHolder value: (Date										newDay: newDay										monthNumber: currentDate monthIndex										year: currentDate year)]]]</body></methods><methods><class-id>Examples.DateSelectorDialog</class-id> <category>initialize-release</category><body package="Grid Samples">initialize	super initialize.	gridInterface := GridInterface new defaultRowHeight: 20.</body></methods><methods><class-id>Examples.DateSelectorDialog</class-id> <category>aspects</category><body package="Grid Samples">date	^self dateHolder value</body><body package="Grid Samples">dateHolder		dateHolder ifNil: [dateHolder := Date today asValue].	^dateHolder</body><body package="Grid Samples">monthName		monthName ifNil:[monthName := (PluggableAdaptor on: self dateHolder)		getBlock:[:m | self monthNames at: m value monthIndex]		putBlock:[:m :v | | currentDate monthDate monthIndex currentYear |			currentDate := m value.			currentYear := currentDate year.			monthIndex := self monthNames indexOf: v.			monthDate := Date newDay: 1 monthNumber: monthIndex year:  currentYear.			m value: (Date newDay: (currentDate dayOfMonth min: monthDate daysInMonth) monthNumber: monthIndex year:  currentYear)]		updateBlock:[:m :v :a | false]].	^monthName</body><body package="Grid Samples">year		year ifNil:[year := (PluggableAdaptor on: self dateHolder)		getBlock:[:m | m value year]		putBlock:[:m :v | | currentDate monthDate currentMonthIndex |			currentDate := m value.			currentMonthIndex := currentDate monthIndex.			monthDate := Date newDay: 1 monthNumber: currentMonthIndex year: v.			m value: (Date newDay: (currentDate dayOfMonth min: monthDate daysInMonth)  monthNumber: currentMonthIndex year: v)]		updateBlock:[:m :v :a | false]].	^year</body></methods><methods><class-id>Examples.DateSelectorDialog</class-id> <category>testing</category><body package="Grid Samples">allowColumnMoveFrom: columnIndex toIndex: destIndex	"Move columns only on either edge of the calendar table"	^(columnIndex = 7 and: [destIndex = 1])		or: [columnIndex = 1 and: [destIndex = 7]]</body></methods><methods><class-id>Examples.DateSelectorDialog</class-id> <category>interface opening</category><body package="Grid Samples">postBuildCell: aGridVisualCell with: aUIBuilder	"Disable blank day cells"	| value wrapper |	value := table atPoint: aGridVisualCell cellPoint.	aGridVisualCell component isEnabled: value notNil.	value ifNil: [^self].	wrapper := aGridVisualCell component.	wrapper labelString: value.	wrapper widget action: 			[gridInterface selectPoint: aGridVisualCell cellPoint.			self updateDay]</body><body package="Grid Samples">postBuildWith: aUIBuilder	super postBuildWith: aUIBuilder.	gridInterface selectionInGrid selectionRangeHolder onChangeSend: #updateDay to: self.	gridInterface headerRow grid expressInterestIn: #columnMove for: self sendBack: #setCalendar. 	self setCalendar.</body></methods><methods><class-id>Examples.DateSelectorDialog class</class-id> <category>instance creation</category><body package="Grid Samples">request		| inst |	inst := self new.	inst open.	^inst accept value		ifTrue: [inst selection]		ifFalse: [nil]</body><body package="Grid Samples">requestFromDate: aDate		| inst |	aDate ifNil: [^self request].	inst := self new selection: aDate.	inst open.	^inst accept value		ifTrue: [inst selection]		ifFalse: [nil]</body></methods><methods><class-id>Examples.Grid1Example class</class-id> <category>interface specs</category><body package="Grid Samples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Grid 1 Example' 			#bounds: #(#{Graphics.Rectangle} 417 387 863 604 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GridSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines false #allowColumnResizing true #showVerticalLines false #allowColumnReordering false ) 					#layout: #(#{Graphics.Rectangle} 9 6 438 200 ) 					#name: #Grid1 					#model: #gridInterface 					#columns: #(						#(#{UI.GridColumn} 							#width: 80 							#label: 'Name' 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 0 								#model: #'_row name' ) ) 						#(#{UI.GridColumn} 							#width: 116 							#label: 'Employee Number' 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 0 								#model: #'_row empNo' ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'US Citizen' 							#spec: 							#(#{UI.CheckBoxSpec} 								#model: #'_row citizen' ) ) ) 					#headerRow: 					#(#{UI.GridHeaderRow} 						#height: 30 ) 					#allowRowResizing: true 					#selectByCell: false ) ) ) )</body></methods><methods><class-id>Examples.LineHilightGrid class</class-id> <category>interface specs</category><body package="Grid Samples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Login Grid' 			#bounds: #(#{Graphics.Rectangle} 477 384 804 606 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GridSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines false #allowColumnResizing true #showVerticalLines false #allowColumnReordering false ) 					#layout: #(#{Graphics.LayoutFrame} 15 0 10 0 -15 1 -15 1 ) 					#name: #Grid1 					#flags: 11 					#model: #gridInterface 					#columns: #(						#(#{UI.GridColumn} 							#width: 80 							#label: 'Requires Login' 							#spec: 							#(#{UI.CheckBoxSpec} 								#model: #'_row requiresLogin' ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'Full Name' 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 0 								#model: #'_row fullName' ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'Username' 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 0 								#model: #'_row userName' ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'Password' 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 0 								#model: #'_row password' 								#type: #password ) ) 						#(#{UI.GridColumn} 							#width: 260 							#label: 'Environment' 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 0 								#model: #'_row environment' ) ) ) 					#verticalPolicy: #noWrap 					#allowRowResizing: true 					#selectByCell: true ) ) ) )</body></methods><methods><class-id>Examples.InterfaceGridApp class</class-id> <category>interface specs</category><body package="Grid Samples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 540 395 740 595 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -5 1 ) 					#name: #ViewHolder1 					#component: #gridDecorator ) ) ) )</body></methods><methods><class-id>Examples.GridCallbacks class</class-id> <category>interface specs</category><body package="Grid Samples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Grid Callbacks' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 443 322 838 668 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -164 1 9 0 ) 					#name: #Label6 					#label: 'Annunciators' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 9 0 -31 1 69 0 -8 1 ) 					#name: #InputField1 					#model: #beforeField 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: 						#fieldEntryNotification: 						#focusOutSelector: 						#fieldExitNotification: 						#valueChangeSelector: 						#fieldChangeNotification: 						#doubleClickSelector: 						#fieldDClickNotification: 						#requestFocusInSelector: 						#fieldEntryValidation: 						#requestFocusOutSelector: 						#fieldExitValidation: 						#requestValueChangeSelector: 						#fieldChangeValidation: 						#requestDoubleClickSelector: 						#fieldDClickValidation: ) ) 				#(#{UI.GridSpec} 					#properties: #(#{UI.PropertyListDictionary} #showVerticalLines false #allowColumnReordering false #rowSize 25 #allowColumnResizing true  #showHorizontalLines false ) 					#layout: #(#{Graphics.LayoutFrame} 9 0 40 0 -240 1 -35 1 ) 					#name: #Grid1 					#model: #gridInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: 						#entryNotification: 						#focusOutSelector: 						#exitNotification: 						#valueChangeSelector: 						#changeNotification: 						#doubleClickSelector: 						#dClickNotification: 						#requestFocusInSelector: 						#entryValidation: 						#requestFocusOutSelector: 						#exitValidation: 						#requestValueChangeSelector: 						#changeValidation: 						#requestDoubleClickSelector: 						#dClickValidation: ) 					#columns: #(						#(#{UI.GridHeaderColumn} 							#lineNumbers: true 							#offset: -1 ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'Column 1' 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row 1' 								#callbacksSpec: 								#(#{UI.UIEventCallbackSubSpec} 									#focusInSelector: 									#cellEntryNotification: 									#focusOutSelector: 									#cellExitNotification: 									#valueChangeSelector: 									#cellChangeNotification: 									#doubleClickSelector: 									#cellDClickNotification: 									#requestFocusInSelector: 									#cellEntryValidation: 									#requestFocusOutSelector: 									#cellExitValidation: 									#requestValueChangeSelector: 									#cellChangeValidation: 									#requestDoubleClickSelector: 									#cellDClickValidation: ) 								#type: #object ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'Column 2' 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row 2' 								#callbacksSpec: 								#(#{UI.UIEventCallbackSubSpec} 									#focusInSelector: 									#cellEntryNotification: 									#focusOutSelector: 									#cellExitNotification: 									#valueChangeSelector: 									#cellChangeNotification: 									#doubleClickSelector: 									#cellDClickNotification: 									#requestFocusInSelector: 									#cellEntryValidation: 									#requestFocusOutSelector: 									#cellExitValidation: 									#requestValueChangeSelector: 									#cellChangeValidation: 									#requestDoubleClickSelector: 									#cellDClickValidation: ) 								#type: #object ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'Column 3' 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row 3' 								#callbacksSpec: 								#(#{UI.UIEventCallbackSubSpec} 									#focusInSelector: 									#cellEntryNotification: 									#focusOutSelector: 									#cellExitNotification: 									#valueChangeSelector: 									#cellChangeNotification: 									#doubleClickSelector: 									#cellDClickNotification: 									#requestFocusInSelector: 									#cellEntryValidation: 									#requestFocusOutSelector: 									#cellExitValidation: 									#requestValueChangeSelector: 									#cellChangeValidation: 									#requestDoubleClickSelector: 									#cellDClickValidation: ) 								#type: #object ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'Column 4' 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row 4' 								#callbacksSpec: 								#(#{UI.UIEventCallbackSubSpec} 									#focusInSelector: 									#cellEntryNotification: 									#focusOutSelector: 									#cellExitNotification: 									#valueChangeSelector: 									#cellChangeNotification: 									#doubleClickSelector: 									#cellDClickNotification: 									#requestFocusInSelector: 									#cellEntryValidation: 									#requestFocusOutSelector: 									#cellExitValidation: 									#requestValueChangeSelector: 									#cellChangeValidation: 									#requestDoubleClickSelector: 									#cellDClickValidation: ) 								#type: #object ) ) ) 					#allowRowResizing: true 					#selectByCell: false ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} -299 1.0 -31 1 59 23 ) 					#name: #InputField2 					#model: #afterField 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: 						#fieldEntryNotification: 						#focusOutSelector: 						#fieldExitNotification: 						#valueChangeSelector: 						#fieldChangeNotification: 						#doubleClickSelector: 						#fieldDClickNotification: 						#requestFocusInSelector: 						#fieldEntryValidation: 						#requestFocusOutSelector: 						#fieldExitValidation: 						#requestValueChangeSelector: 						#fieldChangeValidation: 						#requestDoubleClickSelector: 						#fieldDClickValidation: ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -220 1 40 0 11 1 133 0 ) 					#name: #Subcanvas2 					#flags: 0 					#majorKey: #{Examples.CallbacksMonitor} 					#minorKey: #windowSpec 					#clientKey: #fieldMonitor ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -220 1 141 0 11 1 234 0 ) 					#name: #Subcanvas1 					#flags: 0 					#majorKey: #{Examples.CallbacksMonitor} 					#minorKey: #windowSpec 					#clientKey: #monitor ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -220 1 239 0 11 1 332 0 ) 					#name: #Subcanvas3 					#flags: 0 					#majorKey: #{Examples.CallbacksMonitor} 					#minorKey: #windowSpec 					#clientKey: #cellMonitor ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -230 1 34 0 -5 1 129 0 ) 					#name: #GroupBox1 					#label: 'Field' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -230 1 131 0 -5 1 226 0 ) 					#name: #GroupBox2 					#label: 'Grid' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -230 1 229 0 -5 1 324 0 ) 					#name: #GroupBox3 					#label: 'Cell' ) ) ) )</body></methods><methods><class-id>Examples.GridCallbacks class</class-id> <category>resources</category><body package="Grid Samples">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Traversal' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Vertical' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'No Wrapping' 										#nameKey: #noWrap 										#value: #noVerticalWrap 										#indicationSelector: #rowWrapping ) 									#(#{UI.MenuItem} 										#rawLabel: 'Wrap' 										#nameKey: #wrap 										#value: #verticalWrap 										#indicationSelector: #rowWrapping ) 									#(#{UI.MenuItem} 										#rawLabel: 'None' 										#nameKey: #none 										#value: #verticalWrapOff 										#indicationSelector: #rowWrapping ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Horizontal' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'No Wrapping' 										#nameKey: #noWrap 										#value: #noHorizontalWrap 										#indicationSelector: #columnWrapping ) 									#(#{UI.MenuItem} 										#rawLabel: 'Wrap to next row' 										#nameKey: #wrapNext 										#value: #wrapNextRow 										#indicationSelector: #columnWrapping ) 									#(#{UI.MenuItem} 										#rawLabel: 'Wrap on same row' 										#nameKey: #wrapSame 										#value: #wrapSameRow 										#indicationSelector: #columnWrapping ) 									#(#{UI.MenuItem} 										#rawLabel: 'None' 										#nameKey: #none 										#value: #horizontalWrapOff 										#indicationSelector: #columnWrapping ) ) #(4 ) nil ) ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Inspect' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'KeyboardProcessor' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Window' 										#value: #inspectWindowKP ) 									#(#{UI.MenuItem} 										#rawLabel: 'Grid' 										#value: #inspectGridKP ) ) #(2 ) nil ) ) ) #(1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.TaskGrid class</class-id> <category>interface specs</category><body package="Grid Samples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Task Manager' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 514 431 1035 653 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GridSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering false ) 					#layout: #(#{Graphics.LayoutFrame} 13 0 10 0 -17 1 -35 1 ) 					#name: #Grid1 					#flags: 11 					#model: #interface 					#columns: #(						#(#{UI.GridHeaderColumn} 							#lineNumbers: true 							#offset: -1 ) 						#(#{UI.GridColumn} 							#width: 50 							#label: 'Task ID' 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row id' 								#type: #number ) ) 						#(#{UI.GridColumn} 							#width: 140 							#label: 'Description' 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row description' ) ) 						#(#{UI.GridColumn} 							#width: 100 							#label: 'Start' 							#id: #start 							#spec: 							#(#{UI.ActionButtonSpec} 								#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 								#flags: 0 								#label: 'Start' 								#defaultable: true ) ) 						#(#{UI.GridColumn} 							#width: 100 							#label: 'End' 							#id: #end 							#spec: 							#(#{UI.ActionButtonSpec} 								#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 								#flags: 0 								#callbacksSpec: 								#(#{UI.UIEventCallbackSubSpec} 									#valueChangeSelector: #updateDuration ) 								#label: 'End' 								#defaultable: true ) ) 						#(#{UI.GridColumn} 							#width: 40 							#label: 'Duration' 							#id: #duration 							#spec: 							#(#{UI.SpinButtonSpec} 								#model: #'_row duration' 								#callbacksSpec: 								#(#{UI.UIEventCallbackSubSpec} 									#valueChangeSelector: #updateEnd ) 								#type: #number 								#formatString: '0' 								#low: 0 ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'Completed?' 							#id: #completed 							#spec: 							#(#{UI.CheckBoxSpec} 								#model: #'_row completed' ) ) ) 					#verticalPolicy: #noWrap 					#headerRow: 					#(#{UI.GridHeaderRow} 						#height: 30 ) 					#allowRowResizing: true 					#selectByCell: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 14 0 -29 1 ) 					#name: #ActionButton1 					#model: #addTask 					#label: 'Add Task' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Examples.BasicGridApp class</class-id> <category>interface specs</category><body package="Grid Samples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Grid Test Window' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 887 755 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0 12 0 -12 1 -12 1 ) 					#name: #grid					#flags: 11 					#component: #grid ) ) ) )</body></methods><methods><class-id>Examples.GridMixedContentApp class</class-id> <category>interface specs</category><body package="Grid Samples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Mixed Interactive Content' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 454 384 826 606 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GridSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering false #rowSize 20 ) 					#layout: #(#{Graphics.LayoutFrame} 15 0 11 0 -15 1 -15 1 ) 					#name: #Grid1 					#flags: 11 					#model: #gridInterface 					#columns: #(						#(#{UI.GridColumn} 							#width: 80 							#label: 'Adjust x' 							#spec: 							#(#{UI.SliderSpec} 								#model: #'_row x' 								#orientation: #horizontal 								#start: 1 								#stop: 100 								#step: 1 ) ) 						#(#{UI.GridColumn} 							#width: 35 							#label: 'x' 							#id: #x 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row x' 								#isReadOnly: false 								#type: #number 								#formatString: '0' ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'Adjust y' 							#spec: 							#(#{UI.SliderSpec} 								#model: #'_row y' 								#orientation: #horizontal 								#start: 1 								#stop: 100 								#step: 1 ) ) 						#(#{UI.GridColumn} 							#width: 35 							#label: 'y' 							#id: #y 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row y' 								#isReadOnly: false 								#type: #number 								#formatString: '0' ) ) 						#(#{UI.GridColumn} 							#width: 70 							#label: 'Position' 							#id: #pointValue 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #_row 								#type: #object ) ) ) 					#verticalPolicy: #noWrap 					#headerRow: 					#(#{UI.GridHeaderRow} 						#height: 20 ) 					#allowRowResizing: true 					#selectByCell: true ) ) ) )</body></methods><methods><class-id>Examples.CallbacksMonitor class</class-id> <category>interface specs</category><body package="Grid Samples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Callbacks Monitor' 			#bounds: #(#{Graphics.Rectangle} 510 385 771 606 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.CheckBoxSpec} 							#layout: #(#{Core.Point} 30 26 ) 							#name: #CheckBox5 							#model: #enableEntry 							#tabable: false ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Core.Point} 67 26 ) 							#name: #CheckBox1 							#model: #enableChange 							#tabable: false ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Core.Point} 106 26 ) 							#name: #CheckBox3 							#model: #enableExit 							#tabable: false ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Core.Point} 144 26 ) 							#name: #CheckBox2 							#model: #enableDClick 							#tabable: false ) 						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 169 24 ) 							#name: #Label7 							#label: 'Enabled' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 31 0 ) 							#name: #Label8 							#label: 'N' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 69 0 ) 							#name: #Label1 							#label: 'C' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 107 0 ) 							#name: #Label2 							#label: 'X' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 144 0 ) 							#name: #Label3 							#label: 'D' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 1 25 ) 							#name: #Label4 							#label: 'V' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 0 55 ) 							#name: #Label5 							#label: 'N' ) 						#(#{UI.RegionSpec} 							#layout: #(#{Graphics.Rectangle} 22 23 50 47 ) 							#name: #entryValidate 							#lineWidth: 1 ) 						#(#{UI.RegionSpec} 							#layout: #(#{Graphics.Rectangle} 60 23 88 47 ) 							#name: #changeValidate 							#lineWidth: 1 ) 						#(#{UI.RegionSpec} 							#layout: #(#{Graphics.Rectangle} 22 53 50 77 ) 							#name: #entryNotify 							#lineWidth: 1 ) 						#(#{UI.RegionSpec} 							#layout: #(#{Graphics.Rectangle} 60 53 88 77 ) 							#name: #changeNotify 							#lineWidth: 1 ) 						#(#{UI.RegionSpec} 							#layout: #(#{Graphics.Rectangle} 98 53 126 77 ) 							#name: #exitNotify 							#lineWidth: 1 ) 						#(#{UI.RegionSpec} 							#layout: #(#{Graphics.Rectangle} 98 23 126 47 ) 							#name: #exitValidate 							#lineWidth: 1 ) 						#(#{UI.RegionSpec} 							#layout: #(#{Graphics.Rectangle} 136 23 164 47 ) 							#name: #dClickValidate 							#lineWidth: 1 ) 						#(#{UI.RegionSpec} 							#layout: #(#{Graphics.Rectangle} 136 53 164 77 ) 							#name: #dClickNotify 							#lineWidth: 1 ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 0 0 215 86 ) 						#name: #Composite1 ) ) ) ) )</body></methods><methods><class-id>Examples.CongressGrid class</class-id> <category>resources</category><body package="Grid Samples">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Search' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Name' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'First' 										#value: #matchFirstName ) 									#(#{UI.MenuItem} 										#rawLabel: 'Last' 										#value: #matchLastName ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'State' 							#value: #matchByState ) 						#(#{UI.MenuItem} 							#rawLabel: 'Party' 							#value: #matchByParty ) 						#(#{UI.MenuItem} 							#rawLabel: 'District' 							#value: #matchByDistrict ) ) #(4 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Select' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'State' 							#value: #selectByState ) 						#(#{UI.MenuItem} 							#rawLabel: 'Party' 							#value: #selectByParty ) 						#(#{UI.MenuItem} 							#rawLabel: 'District' 							#value: #selectByDistrict ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Columns' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Middle Name' 							#nameKey: #middleName 							#value: #withMiddleName 							#indication: true 							#indicationSelector: #hasMiddleName ) 						#(#{UI.MenuItem} 							#rawLabel: 'Party' 							#nameKey: #party 							#value: #withParty 							#indication: true 							#indicationSelector: #hasParty ) 						#(#{UI.MenuItem} 							#rawLabel: 'District' 							#nameKey: #district 							#value: #withDistrict 							#indication: true 							#indicationSelector: #hasDistrict ) ) #(3 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.CongressGrid class</class-id> <category>interface specs</category><body package="Grid Samples">noBordersOrLines	"Tools.UIPainter new openOnClass: self andSelector: #noBordersOrLines"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'US Congressmen' 			#bounds: #(#{Graphics.Rectangle} 477 384 804 606 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GridSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragEnterSelector 						#dragEnter: #dragOkSelector 						#wantToDrag: #dragStartSelector 						#doDrag: #showHorizontalLines false #showVerticalLines false #dragOverSelector 						#dragOver: #allowColumnResizing true #dropSelector 						#drop: #dragExitSelector 						#dragExit: #allowColumnReordering true ) 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -5 1 ) 					#name: #Grid1 					#flags: 11 					#model: #gridInterface 					#columns: #(						#(#{UI.GridColumn} 							#width: 76 							#label: 'First Name' 							#id: #firstName 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 0 								#model: #'_row firstName' ) ) 						#(#{UI.GridColumn} 							#width: 69 							#label: 'Last Name' 							#id: #lastName 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 0 								#model: #'_row lastName' ) ) 						#(#{UI.GridColumn} 							#width: 67 							#label: 'Middle' 							#id: #middleName 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 32 								#model: #'_row middle' ) ) 						#(#{UI.GridColumn} 							#width: 39 							#label: 'State' 							#id: #state 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 0 								#model: #'_row state' ) ) 						#(#{UI.GridColumn} 							#width: 50 							#label: 'Party' 							#id: #party 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 0 								#model: #'_row party' 								#isReadOnly: true ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'District' 							#id: #district 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 0 								#model: #'_row district' ) ) ) 					#verticalPolicy: #noWrap 					#labelsAsButtons: true 					#headerColumn: 					#(#{UI.GridHeaderColumn} 						#lineNumbers: true ) 					#headerRow: 					#(#{UI.GridHeaderRow} 						#height: 20 ) 					#allowRowResizing: true 					#selectByCell: false ) ) ) )</body><body package="Grid Samples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'US Congressmen' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 477 384 935 606 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GridSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragEnterSelector 						#dragEnter: #dragOkSelector 						#wantToDrag: #dragStartSelector 						#doDrag: #showHorizontalLines true #showVerticalLines true #dragOverSelector 						#dragOver: #allowColumnResizing true #dropSelector 						#drop: #dragExitSelector 						#dragExit: #allowColumnReordering true ) 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -5 1 ) 					#name: #Grid1 					#flags: 11 					#model: #gridInterface 					#columns: #(						#(#{UI.GridColumn} 							#width: 76 							#label: 'First Name' 							#id: #firstName 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row firstName' ) ) 						#(#{UI.GridColumn} 							#width: 69 							#label: 'Last Name' 							#id: #lastName 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row lastName' ) ) 						#(#{UI.GridColumn} 							#width: 67 							#label: 'Middle' 							#id: #middleName 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 40 								#model: #'_row middle' ) ) 						#(#{UI.GridColumn} 							#width: 39 							#label: 'State' 							#id: #state 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row state' ) ) 						#(#{UI.GridColumn} 							#width: 50 							#label: 'Party' 							#id: #party 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row party' 								#isReadOnly: true ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'District' 							#id: #district 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row district' ) ) ) 					#verticalPolicy: #noWrap 					#labelsAsButtons: true 					#headerColumn: 					#(#{UI.GridHeaderColumn} 						#lineNumbers: true ) 					#headerRow: 					#(#{UI.GridHeaderRow} 						#height: 20 ) 					#allowRowResizing: true 					#selectByCell: false ) ) ) )</body><body package="Grid Samples">windowSpecReadOnly	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecReadOnly"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'US Congressmen' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 477 384 909 606 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GridSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing false #showVerticalLines true #allowColumnReordering true #rowSize 25 ) 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -5 1 ) 					#name: #Grid1 					#flags: 11 					#model: #gridInterface 					#columns: #(						#(#{UI.GridColumn} 							#width: 76 							#label: 'First Name' 							#id: #firstName 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row firstName' 								#isReadOnly: true ) ) 						#(#{UI.GridColumn} 							#width: 69 							#label: 'Last Name' 							#id: #lastName 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row lastName' 								#isReadOnly: true ) ) 						#(#{UI.GridColumn} 							#width: 67 							#label: 'Middle' 							#id: #middleName 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 40 								#model: #'_row middle' 								#isReadOnly: true ) ) 						#(#{UI.GridColumn} 							#width: 39 							#label: 'State' 							#id: #state 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row state' 								#isReadOnly: true ) ) 						#(#{UI.GridColumn} 							#width: 50 							#label: 'Party' 							#id: #party 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row party' 								#isReadOnly: true ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'District' 							#id: #district 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row district' 								#isReadOnly: true ) ) ) 					#verticalPolicy: #noWrap 					#headerRow: 					#(#{UI.GridHeaderRow} 						#height: 30 ) 					#allowRowResizing: false 					#selectByCell: true ) ) ) )</body><body package="Grid Samples">windowSpecWIthCombo	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecWIthCombo"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'US Congressmen' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 477 384 937 606 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GridSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering true ) 					#layout: #(#{Graphics.LayoutFrame} 4 0 2 0 -7 1 -11 1 ) 					#name: #Grid1 					#flags: 11 					#model: #gridInterface 					#columns: #(						#(#{UI.GridHeaderColumn} 							#width: 25 							#lineNumbers: true 							#offset: -1 ) 						#(#{UI.GridColumn} 							#width: 76 							#label: 'First Name' 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row firstName' ) ) 						#(#{UI.GridColumn} 							#width: 69 							#label: 'Last Name' 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row lastName' ) ) 						#(#{UI.GridColumn} 							#width: 67 							#label: 'Middle' 							#spec: 							#(#{UI.InputFieldSpec} 								#flags: 40 								#model: #'_row middle' ) ) 						#(#{UI.GridColumn} 							#width: 39 							#label: 'State' 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row state' ) ) 						#(#{UI.GridColumn} 							#width: 50 							#label: 'Party' 							#spec: 							#(#{UI.ComboBoxSpec} 								#model: #'_row party' 								#type: #string 								#comboList: #parties ) ) 						#(#{UI.GridColumn} 							#width: 80 							#label: 'District' 							#spec: 							#(#{UI.InputFieldSpec} 								#model: #'_row district' ) ) ) 					#verticalPolicy: #noWrap 					#allowRowResizing: true 					#selectByCell: true ) ) ) )</body></methods><methods><class-id>Examples.DateSelectorDialog class</class-id> <category>interface specs</category><body package="Grid Samples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec2"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Select Date' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 475 370 805 620 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GridSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing false #rowSize 20 #showVerticalLines true #allowColumnReordering true ) 					#layout: #(#{Graphics.LayoutFrame} 8 0 38 0 -7 1 -32 1 ) 					#name: #Grid1 					#flags: 12 					#model: #gridInterface 					#columns: #(						#(#{UI.GridColumn} 							#width: 40 							#label: 'Mon' 							#id: #Monday 							#spec: 							#(#{UI.ActionButtonSpec} 								#flags: 0 								#defaultable: true ) ) 						#(#{UI.GridColumn} 							#width: 40 							#label: 'Tue' 							#id: #Tuesday 							#spec: 							#(#{UI.ActionButtonSpec} 								#flags: 0 								#defaultable: true ) ) 						#(#{UI.GridColumn} 							#width: 40 							#label: 'Wed' 							#id: #Wednesday 							#spec: 							#(#{UI.ActionButtonSpec} 								#flags: 0 								#defaultable: true ) ) 						#(#{UI.GridColumn} 							#width: 40 							#label: 'Thu' 							#id: #Thursday 							#spec: 							#(#{UI.ActionButtonSpec} 								#flags: 0 								#defaultable: true ) ) 						#(#{UI.GridColumn} 							#width: 40 							#label: 'Fri' 							#id: #Friday 							#spec: 							#(#{UI.ActionButtonSpec} 								#flags: 0 								#defaultable: true ) ) 						#(#{UI.GridColumn} 							#width: 40 							#label: 'Sat' 							#id: #Saturday 							#spec: 							#(#{UI.ActionButtonSpec} 								#flags: 0 								#defaultable: true ) ) 						#(#{UI.GridColumn} 							#width: 40 							#label: 'Sun' 							#id: #Sunday 							#spec: 							#(#{UI.ActionButtonSpec} 								#flags: 0 								#defaultable: true ) ) ) 					#headerRow: 					#(#{UI.GridHeaderRow} 						#height: 20 ) 					#allowRowResizing: false 					#selectByCell: true ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} -108 1.0 10 0 100 23 ) 					#name: #SpinButton1 					#model: #year 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #setCalendar ) 					#type: #number ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 7 0 10 0 210 23 ) 					#name: #ComboBox1 					#model: #monthName 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #setCalendar ) 					#comboList: #monthChoices ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} -120 1 -27 1 ) 					#name: #ActionButton1 					#model: #accept 					#label: 'OK' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} -61 1 -27 1 ) 					#name: #ActionButton2 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView useParentColors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class></st-source>