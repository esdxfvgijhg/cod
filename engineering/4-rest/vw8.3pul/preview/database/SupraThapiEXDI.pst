<?xml version="1.0"?><st-source><!-- Name: SupraThapiEXDINotice: Copyright 2002-2013 Cincom Systems, Inc.  All rights reserved.Comment: This parcel extends the SupraEXDI parcel for THAPI database access.DbIdentifier: bear73DbTrace: 400492DbUsername: nrossDbVersion: 1.6DevelopmentPrerequisites: #(#(#any 'SupraEXDI' ''))PackageName: SupraThapiEXDIParcel: #('SupraThapiEXDI')ParcelName: SupraThapiEXDIPrerequisiteParcels: #(#('SupraEXDI' ''))PrintStringCache: (1.6,nross)Version: 1.6Date: 7:04:21 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:04:21 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SupraThreadedConnection</name><environment>Database</environment><super>Database.SupraConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessProtect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Supra</category><attributes><package>SupraThapiEXDI</package></attributes></class><comment><class-id>Database.SupraThreadedConnection</class-id><body>Class SupraThreadedConnectionis an extension of SupraConnection which introduces thread safe processingallowing the Supra CallInterface to be used in THAPI environments. See also SupraThreadedSession and SupraThreadedSqlca for additional information onprotected access to shared resources.Instance Variables:	accessProtect	&lt;RecursionLock&gt;			Controls access to shared connection resources, the Session and the SQLCA.		RecursionLock is used instead of Semaphore to allow potential nested entry into			the critical section.</body></comment><class><name>SupraThreadedSqlca</name><environment>Database</environment><super>Database.SupraSqlca</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessProtect </inst-vars><class-inst-vars>registryProtect </class-inst-vars><imports></imports><category>Database-Supra</category><attributes><package>SupraThapiEXDI</package></attributes></class><comment><class-id>Database.SupraThreadedSqlca</class-id><body>Class SupraThreadedSqlcais an extension of SupraSqlca which introduces thread safe processingallowing the Supra CallInterface to be used in THAPI environments. See also SupraThreadedConnection and SupraThreadedSession for additional information onprotected access to shared resources.Instance Variables:	accessProtect	&lt;RecursionLock&gt;			Controls access to shared SQLCA.		RecursionLock is used instead of Semaphore to allow potential nested entry into			the critical section.Class Variables:	registryProtect	&lt;RecursionLock&gt;			Controls access to SQLCA registry.		RecursionLock is used instead of Semaphore to allow potential nested entry into			the critical section.</body></comment><class><name>SupraThreadedSqlcaHolder</name><environment>Database</environment><super>Database.SupraSqlcaHolder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Supra</category><attributes><package>SupraThapiEXDI</package></attributes></class><comment><class-id>Database.SupraThreadedSqlcaHolder</class-id><body>Class SupraThreadedSqlcaHolderis an extension of SupraSqlcaHolder which introduces thread safe processingallowing the Supra CallInterface to be used in THAPI environments.The implementation is trivial. Instance Variables:	none</body></comment><class><name>SupraThreadedTransaction</name><environment>Database</environment><super>Database.SupraTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Supra</category><attributes><package>SupraThapiEXDI</package></attributes></class><comment><class-id>Database.SupraThreadedTransaction</class-id><body>Class SupraThreadedTransactionis an extension of SupraTransaction which introduces thread safe processingallowing the Supra CallInterface to be used in THAPI environments.The implementation is trivial. Instance Variables:	none</body></comment><class><name>SupraThreadedSession</name><environment>Database</environment><super>Database.SupraSession</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Supra</category><attributes><package>SupraThapiEXDI</package></attributes></class><comment><class-id>Database.SupraThreadedSession</class-id><body>Class SupraThreadedSessionis an extension of SupraSession which introduces thread safe processingallowing the Supra CallInterface to be used in THAPI environments.See also SupraThreadedConnection and SupraThreadedSqlca for additional information onprotected access to shared resources.</body></comment><shared-variable><name>ThreadedPlatformType</name><environment>Database.SupraThreadedConnection</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>SupraThapiEXDI</package></attributes></shared-variable><methods><class-id>Database.SupraThreadedConnection</class-id> <category>private-resources</category><body package="SupraThapiEXDI">acquireSqlca		accessProtect critical: [ super acquireSqlca ]</body><body package="SupraThapiEXDI">releaseSqlca		accessProtect critical: [ super releaseSqlca ]</body></methods><methods><class-id>Database.SupraThreadedConnection</class-id> <category>connections</category><body package="SupraThapiEXDI">getSession	"Answer an instance of the driver's subclass of ExternalDatabaseSession."	"This needs access protection when multiple processes contain sessions	which are obtained from a common connection"	accessProtect critical: [^super getSession].</body></methods><methods><class-id>Database.SupraThreadedConnection</class-id> <category>initialize-release</category><body package="SupraThapiEXDI">initialize	super initialize.	" RecursionLock instead of Semaphore allows nesting "	accessProtect := RecursionLock new.</body></methods><methods><class-id>Database.SupraThreadedConnection class</class-id> <category>testing</category><body package="SupraThapiEXDI">isThreaded	^ true</body></methods><methods><class-id>Database.SupraThreadedConnection class</class-id> <category>private-accessing</category><body package="SupraThapiEXDI">kind	"Suppress connection type name."	^ nil</body><body package="SupraThapiEXDI">platformType	"Answer the current platform type."	ThreadedPlatformType isNil		ifTrue: [ ThreadedPlatformType := self determinePlatformType ].	^ThreadedPlatformType</body><body package="SupraThapiEXDI">sessionClass	"Answer the class to use for session objects associated with receiver."	^SupraThreadedSession</body><body package="SupraThapiEXDI">sqlcaClass	"Answer the class to use for SQLCA objects associated with receiver."	^SupraThreadedSqlca</body><body package="SupraThapiEXDI">transactionClass	"Answer the class to use for transaction objects associated with receiver."	^SupraThreadedTransaction</body></methods><methods><class-id>Database.SupraThreadedConnection class</class-id> <category>class initialization</category><body package="SupraThapiEXDI">initialize	"SupraThreadedConnection initialize"	super initialize.		self initializeInterfaceMapping.</body></methods><methods><class-id>Database.SupraThreadedConnection class</class-id> <category>private-activation</category><body package="SupraThapiEXDI">install	ThreadedPlatformType := nil.	( TraceLevel &gt;= 1 ) ifTrue:		[ self trace: nil ].	self returnFromSnapshot.</body></methods><methods><class-id>Database.SupraThreadedSqlca</class-id> <category>initialize-release</category><body package="SupraThapiEXDI">initialize	super initialize.	" RecursionLock instead of Semaphore allows nesting "	accessProtect := RecursionLock new.</body></methods><methods><class-id>Database.SupraThreadedSqlca</class-id> <category>external API</category><body package="SupraThapiEXDI">sqlcaDo: aBlock 	" Critical Section protects threaded execution on shared SQLCA "	accessProtect critical: [ ^ super sqlcaDo: aBlock ]</body></methods><methods><class-id>Database.SupraThreadedSqlca class</class-id> <category>private-accessing</category><body package="SupraThapiEXDI">connectionClass	^SupraThreadedConnection</body><body package="SupraThapiEXDI">maxConnects	" To prevent contention, only allow a single connection per SQLCA "	^ 1</body></methods><methods><class-id>Database.SupraThreadedSqlca class</class-id> <category>external API</category><body package="SupraThapiEXDI">acquireSqlcaSlot	" Protect registry during SQLCA access		including potential instance creation. "	registryProtect critical: [ ^ super acquireSqlcaSlot ].</body><body package="SupraThapiEXDI">releaseSqlcaSlot: virtualSlot	" Protect registry during SQLCA access "	registryProtect critical: [ super releaseSqlcaSlot: virtualSlot ].</body></methods><methods><class-id>Database.SupraThreadedSqlca class</class-id> <category>class initialization</category><body package="SupraThapiEXDI">initialize	" SupraThreadedSqlca initialize "	super initialize.	registryProtect := Semaphore forMutualExclusion.</body></methods><methods><class-id>Database.SupraThreadedSqlcaHolder class</class-id> <category>private-accessing</category><body package="SupraThapiEXDI">sqlcaClass	"Answer the class to use for SQLCA objects associated with receiver."	^SupraThreadedSqlca</body></methods><methods><class-id>Database.SupraThreadedTransaction class</class-id> <category>accessing</category><body package="SupraThapiEXDI">connectionClass	^SupraThreadedConnection</body></methods><methods><class-id>Database.SupraThreadedSession class</class-id> <category>private-accessing</category><body package="SupraThapiEXDI">connectionClass	^SupraThreadedConnection</body></methods><methods><class-id>Database.SupraThreadedSession class</class-id> <category>class initialization</category><body package="SupraThapiEXDI">initialize	"SupraThreadedSession initialize"	super initialize.</body></methods><methods><class-id>Database.SupraConnection class</class-id> <category>As yet unclassified</category><body package="SupraThapiEXDI">isThreaded		^false</body><body package="SupraThapiEXDI">newBeThreaded	"return a new instance that will run under thapi"	^self threadedConnectionClass new</body><body package="SupraThapiEXDI">threadedConnectionClass	^SupraThreadedConnection</body></methods><initialize><class-id>Database.SupraThreadedConnection</class-id></initialize><initialize><class-id>Database.SupraThreadedSqlca</class-id></initialize><initialize><class-id>Database.SupraThreadedSession</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SupraTransaction</name><environment>Database</environment><super>Database.ExternalDatabaseTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Supra</category><attributes><package>SupraEXDI</package></attributes></class><class><name>SupraSqlca</name><environment>Database</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>index sqlcaPointer sqlcaSessions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Supra</category><attributes><package>SupraEXDI</package></attributes></class><class><name>SupraSession</name><environment>Database</environment><super>Database.ExternalDatabaseSession</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cursorName sqlType rowCount resultsCache paramDescriptions paramBuffersHolder preparedQuery sqlPointerHolder sqldaHolder parsidHolder preparedFetch fetchPointerHolder fetchSqldaHolder fetchParsidHolder maxLongBytes minSqlvarSize reUse </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Supra</category><attributes><package>SupraEXDI</package></attributes></class><class><name>SupraSqlcaHolder</name><environment>Database</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sqlcaHolder sqlcaSlotNumber dbNumber </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Supra</category><attributes><package>SupraEXDI</package></attributes></class><class><name>SupraConnection</name><environment>Database</environment><super>Database.ExternalDatabaseConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sqlcaHolder autocommit </inst-vars><class-inst-vars>signalMap </class-inst-vars><imports></imports><category>Database-Supra</category><attributes><package>SupraEXDI</package></attributes></class></st-source>