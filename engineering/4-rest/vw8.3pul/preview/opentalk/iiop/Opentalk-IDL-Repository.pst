<?xml version="1.0"?><st-source><!-- Name: Opentalk-IDL-RepositoryNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Comment: Repository is the developer interface for IDL compiler and IDL meta objects. It allows to use normal smalltalk browser to maintain IDL definitions.DbIdentifier: bear73DbTrace: 400727DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'Opentalk-IDL-MetaObjects' '') #(#any 'Opentalk-IDL-Compiler' ''))PackageName: Opentalk-IDL-RepositoryParcel: #('Opentalk-IDL-Repository')PrerequisiteParcels: #(#('Opentalk-IDL-MetaObjects' '') #('Opentalk-IDL-Compiler' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 11:27:08 AM April 12, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (apr13.2) of April 12, 2013 on April 12, 2013 at 11:27:08 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>DSTRepository</name><environment>Opentalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CORBA-Repository</category><attributes><package>Opentalk-IDL-Repository</package></attributes></class><comment><class-id>Opentalk.DSTRepository</class-id><body>This class is the sole repository of IDL source code.</body></comment><shared-variable><name>Mutex</name><environment>Opentalk.DSTRepository</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Opentalk-IDL-Repository</package></attributes></shared-variable><methods><class-id>Opentalk.DSTRepository class</class-id> <category>method dictionary</category><body package="Opentalk-IDL-Repository">addSelector: aSelector withMethod: aCompiledMethod  super addSelector: aSelector withMethod: aCompiledMethod.  DSTORBObject repositoryClass == DSTRepository   	ifTrue:	[ Cursor wait showWhile:				[ DSTORBObject replaceInRepository: ( aCompiledMethod at: 1 )				]			].</body><body package="Opentalk-IDL-Repository">removeSelector: aSymbol 	"Remove the message whose selector is aSymbol from the 	method dictionary of the receiver, if it is there. Answer nil 	otherwise."	self accessMutex		critical: 			[super removeSelector: aSymbol.			DSTORBObject removeInRepository: aSymbol]</body></methods><methods><class-id>Opentalk.DSTRepository class</class-id> <category>compiler</category><body package="Opentalk-IDL-Repository">compilerClass	^IDLCompiler</body><body package="Opentalk-IDL-Repository">sourceCodeForMethod: method at: messageSelector 	"If the source is not availabe, i.e. we parcel in a IDL selector (module), we have to generate the source	from the metaObject because the decompile is not working"	^method getSourceForUserIfNone:		[(self new perform: messageSelector) getIDLDefinition]</body><body package="Opentalk-IDL-Repository">sourceCodeTemplate	"Answer an expression to be edited and evaluated in order to 	define methods in this class."	^( #{DSTIDLGenerator} isDefined )		ifTrue:	[ #{DSTIDLGenerator} value newModuleStub: 'newModuleName' ]		ifFalse:	[ String new ]</body></methods><methods><class-id>Opentalk.DSTRepository class</class-id> <category>accessing</category><body package="Opentalk-IDL-Repository">accessMutex	"return the mutex controlling access"	Mutex == nil ifTrue: [Mutex := RecursionLock new].	^Mutex</body></methods><methods><class-id>Opentalk.DSTvalueNamed</class-id> <category>printing</category><body package="Opentalk-IDL-Repository">asIDLString	"return the IDLstring representation of the receiver"	^name</body></methods><methods><class-id>Opentalk.DSTinterface</class-id> <category>repository</category><body package="Opentalk-IDL-Repository">updateInheritance	"resolve missing inheritance references, if possible, to named 	interfaces in the repository"	| if |	"(name isMemberOf: ORBDeadObject)		ifTrue: [^nil]."	allOperations := myOperations := allSuperiors := nil.	self sunames asSet - (self superiors asSet collect: [:su | su printName])		do: 			[:na | 			if := self definingMetaObject interfaceOf: na.			if isNil ifTrue: [^nil].			if addSubordinate: self.			superiors add: if]</body></methods><methods><class-id>Core.FixedPoint</class-id> <category>opentalk</category><body package="Opentalk-IDL-Repository">asIDLString	"return an IDL format string representation of the receiver"	| str |	str := self printString.	^str copyFrom: 1 to: str size - 1</body></methods><methods><class-id>Core.String</class-id> <category>opentalk</category><body package="Opentalk-IDL-Repository">asIDLString	^self asString</body></methods><methods><class-id>Opentalk.IDLCompiler class</class-id> <category>public access</category><body package="Opentalk-IDL-Repository">importIDL: aString category: aCategory 	"Import IDL in the form of a string into the interface repository. 	The importation proceeds as follows: 	1) Create (if necessary) aCategory in DSTRepository 	2) Preprocess the incoming IDL file 	3) Format the incoming IDL source 	3) Compile the formatted IDL source."	| stream cs text |	cs := aCategory asSymbol.	stream := aString readStream.	(DSTRepository organization categories includes: cs)		ifFalse: [DSTRepository organization addCategory: cs].	stream := self preprocess: stream.	stream reset.	[stream atEnd]		whileFalse: 			[text := DSTRepository compilerClass new						format: stream						in: DSTRepository						notifying: nil.			DSTRepository				compile: text				classified: aCategory				notifying: nil]</body><body package="Opentalk-IDL-Repository">importIDLFile: aPathString category: aCategory 	"Import an IDL file into the interface repository. 	The importation proceeds as follows: 	1) Create (if necessary) aCategory in DSTRepository 	2) Preprocess the incoming IDL file 	3) Format the incoming IDL source 	3) Compile the formatted IDL source."	| stream cs text |	cs := aCategory asSymbol.	stream := aPathString asFilename readStream.		[(DSTRepository organization categories includes: cs)		ifFalse: [DSTRepository organization addCategory: cs].	stream := self preprocess: stream.	stream reset.	[stream atEnd]		whileFalse: 			[text := DSTRepository compilerClass new						format: stream						in: DSTRepository						notifying: nil.			DSTRepository				compile: text				classified: aCategory				notifying: nil]]		ensure: [stream close]</body></methods><methods><class-id>Opentalk.DSTvalueExpr</class-id> <category>printing</category><body package="Opentalk-IDL-Repository">asIDLString	"return the IDL string representation of the receiver"	opSel == #bool ifTrue: [^opString].	opSel == #nest ifTrue: [^'(' , right asIDLString , ')'].	opSel == #concat ifTrue: [^left asIDLString , ' ' , right asIDLString].	opSel == #floatLiteral ifTrue: [^left].	opSel == #fixedPointLiteral ifTrue: [^left].	opSel == #characterLiteral ifTrue: [^'''' , left , ''''].	opSel == #stringLiteral ifTrue: [^left asIDLString].	(#(#neg #complement #unaryPlus) includes: opSel)		ifTrue: [^opString , ' ' , right asIDLString].	^left asIDLString , ' ' , opString , ' ' , right asIDLString</body></methods><methods><class-id>Core.Double</class-id> <category>opentalk</category><body package="Opentalk-IDL-Repository">asIDLString	"return an IDL format string representation of the receiver"	| str |	str := self printString.	^str copyFrom: 1 to: str size - 1</body></methods><methods><class-id>Core.Object</class-id> <category>opentalk</category><body package="Opentalk-IDL-Repository">asIDLString	^self printString</body></methods><methods><class-id>Core.Character</class-id> <category>opentalk</category><body package="Opentalk-IDL-Repository">asIDLString	"return an IDL format string representation of the receiver"	^String with: $' with: self with: $'</body></methods><methods><class-id>Opentalk.DSTtypeNamed</class-id> <category>printing</category><body package="Opentalk-IDL-Repository">asIDLString	"return the IDLstring representation of the receiver"	^name</body></methods><methods><class-id>Opentalk.LongDouble</class-id> <category>DST</category><body package="Opentalk-IDL-Repository">asIDLString	"return an IDL format string representation of the receiver"	| str |	str := self printString.	^str copyFrom: 1 to: str size - 1</body></methods><methods><class-id>Opentalk.DSTORBObject class</class-id> <category>ORB-repository</category><body package="Opentalk-IDL-Repository">removeInRepository: aSelector 	"Remove the meta object in the repository linked to aSelector"	^self replaceInRepository: aSelector with: nil</body><body package="Opentalk-IDL-Repository">replaceInRepository: mo 	"replace the meta object in the repository"	DSTRepository accessMutex critical: [^self replaceInRepository: mo printName asSymbol with: mo]</body><body package="Opentalk-IDL-Repository">replaceInRepository: aSelector with: aMetaObject 	"Replace the meta object in the repository linked to aSelector with 	aMetaObject. If aMetaObject is nil, then the old meta object is just 	removed from the repository"	| old cmethod |	LocalRepository isNil ifTrue: [^nil].	old := LocalRepository metaObjectOf: aSelector.	old notNil ifTrue: [LocalRepository removeMetaObject: old].	aMetaObject notNil ifTrue: [	LocalRepository addMetaObject: aMetaObject].	DSTinterface withAllSubclasses do: [:cl | cl allInstances do: [:if | if name isSymbol ifTrue: [if updateInheritance]]].	"replace the old meta object with the new one in the DSTRepository method"	cmethod :=  DSTRepository compiledMethodAt: aSelector ifAbsent: [].	cmethod notNil ifTrue: [cmethod at: 1 put: aMetaObject]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>FixedPoint</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numerator denominator scale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Double</name><environment>Core</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>LongDouble</name><environment>Opentalk</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Opentalk-IDL-Base</package></attributes></class><class><name>DSTtypeNamed</name><environment>Opentalk</environment><super>Opentalk.DSTtypeSimple</super><private>false</private><indexed-type>none</indexed-type><inst-vars>equivalentType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CORBA-MetaObjects</category><attributes><package>Opentalk-IDL-MetaObjects</package></attributes></class><class><name>Character</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>DSTinterface</name><environment>Opentalk</environment><super>Opentalk.DSTMetaContainer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superiors subordinates sunames epv allSuperiors allOperations myOperations extent key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CORBA-MetaObjects</category><attributes><package>Opentalk-IDL-MetaObjects</package></attributes></class><class><name>DSTvalueExpr</name><environment>Opentalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>opString opSel left right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CORBA-MetaObjects</category><attributes><package>Opentalk-IDL-Compiler</package></attributes></class><class><name>DSTvalueNamed</name><environment>Opentalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>definedIn name value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CORBA-MetaObjects</category><attributes><package>Opentalk-IDL-MetaObjects</package></attributes></class></st-source>