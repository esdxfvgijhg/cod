<?xml version="1.0"?><st-source><!-- Name: Opentalk-IIOP-TestsNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Comment: This packages maintains the existing OpentalkIIOP test suite.This is the main test script we used to run the test suite in a fully loaded development image and also as a test script for build testing in an unmodified visual.im (with the Internal tarball installed). To run it as a build test script, just dump the code in this method into a file, e.g. test.st and then run it as follows:	./visual.im -fileIn test.st	| parcelPath testDir |	testDir := PortableFilename fromComponents: #('$(VISUALWORKS)' tests).	parcelPath := Parcel searchPathModel value.	(parcelPath includes: testDir) ifFalse: [ parcelPath addLast: testDir ].		Parcel ensureLoadedParcel: 'Opentalk-IIOP-Tests' withVersion: nil.	Opentalk.DSTORBObject initializeRepository.	Transcript cr; cr.	Protocols.TestCase runSuitesIn: 'Opentalk-IIOP-Tests'DbIdentifier: bear73DbTrace: 400731DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'Opentalk-CORBA' '') #(#any 'Opentalk-COS-Naming' '') #(#any 'Protocols-TestingExtensions' '') #(#any 'SUnitToo' '') #(#any 'Protocols-Common' ''))DisregardedPrerequisites: #(#(#name 'Opentalk-Prerequisites' #componentType #package) #(#name 'Opentalk-IIOP' #componentType #package) #(#name 'Opentalk-IDL-Repository' #componentType #package) #(#name 'Opentalk-IDL-MetaObjects' #componentType #package) #(#name 'Opentalk-IDL-Compiler' #componentType #package) #(#name 'Opentalk-IDL-Base' #componentType #package) #(#name 'Opentalk-Core-Support' #componentType #package) #(#name 'Opentalk-Core' #componentType #package) #(#name 'Opentalk-CDR' #componentType #package))PackageName: Opentalk-IIOP-TestsParcel: #('Opentalk-IIOP-Tests')PrerequisiteDescriptions: #(#(#name 'Opentalk-CORBA') #(#name 'Opentalk-COS-Naming' #componentType #package) #(#name 'Protocols-TestingExtensions' #componentType #package) #(#name 'SUnitToo' #componentType #package) #(#name 'Protocols-Common' #componentType #package))PrerequisiteParcels: #(#('Opentalk-CORBA' '') #('Opentalk-COS-Naming' '') #('Protocols-TestingExtensions' '') #('SUnitToo' '') #('Protocols-Common' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 7:17:11 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:17:11 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SmalltalkTypesTest</name><environment>Opentalk</environment><super>Protocols.SU2TestCaseWithResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><comment><class-id>Opentalk.SmalltalkTypesTest</class-id><body>Test our additional general purpose smalltalk types.</body></comment><class><name>IIOPTest</name><environment>Opentalk</environment><super>Protocols.SU2TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><comment><class-id>Opentalk.IIOPTest</class-id><body>IIOP tests requiring multiple brokers.</body></comment><class><name>IIOP1_1Test</name><environment>Opentalk</environment><super>Opentalk.IIOPTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><class><name>ArraySegmentTest</name><environment>Opentalk</environment><super>Protocols.SU2TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><class><name>StandardTypesResource</name><environment>Opentalk</environment><super>SUnit.SU2TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>broker remote </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><class><name>GIOPTest</name><environment>Opentalk</environment><super>Protocols.SU2TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><comment><class-id>Opentalk.GIOPTest</class-id><body>Test GIOP entities.</body></comment><class><name>GIOP1_2Test</name><environment>Opentalk</environment><super>Opentalk.GIOPTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><class><name>IOPTest</name><environment>Opentalk</environment><super>Protocols.SU2TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><comment><class-id>Opentalk.IOPTest</class-id><body>Test entities defined in the IOP modules, IORs, tagged profiles, service contexts, etc.</body></comment><class><name>StandardTypesTest</name><environment>Opentalk</environment><super>Protocols.SU2TestCaseWithResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><comment><class-id>Opentalk.StandardTypesTest</class-id><body>Test standard IDL types.</body></comment><class><name>GIOP1_0Test</name><environment>Opentalk</environment><super>Opentalk.GIOPTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><class><name>IIOP1_0Test</name><environment>Opentalk</environment><super>Opentalk.IIOPTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><class><name>GIOP1_1Test</name><environment>Opentalk</environment><super>Opentalk.GIOPTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><class><name>BasicIIOPTest</name><environment>Opentalk</environment><super>Protocols.SU2TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><comment><class-id>Opentalk.BasicIIOPTest</class-id><body>Basic IIOP functionality testing</body></comment><class><name>BasicIIOP1_2Test</name><environment>Opentalk</environment><super>Opentalk.BasicIIOPTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><class><name>BasicIIOP1_1Test</name><environment>Opentalk</environment><super>Opentalk.BasicIIOPTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><class><name>SampleComputeService</name><environment>Opentalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>random computeServers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DST-Demo-Interceptors</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><comment><class-id>Opentalk.SampleComputeService</class-id><body>This is a simple DST example.  MyComputeService has one useful method, slowComputationWith:And:, which performs a computation and returns the result.  The accessor method defaultService creates the instance if none already exists.  MyComputeService as written requires the Implicit Invocation Interface (I3) for remote use. Instance Variables:	None.Shared Variables: 	DefaultService	&lt;MyComputeService&gt;	holds the single instance of the compute service</body></comment><class><name>BasicIIOP1_0Test</name><environment>Opentalk</environment><super>Opentalk.BasicIIOPTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><class><name>IIOP1_2Test</name><environment>Opentalk</environment><super>Opentalk.IIOPTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><class><name>SmalltalkTypesResource</name><environment>Opentalk</environment><super>SUnit.SU2TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>broker remote </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-IIOP-Tests</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></class><shared-variable><name>DefaultService</name><environment>Opentalk.SampleComputeService</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Opentalk-IIOP-Tests</package></attributes></shared-variable><methods><class-id>Opentalk.SmalltalkTypesTest</class-id> <category>tests - x or nil</category><body package="Opentalk-IIOP-Tests">testBooleanOrNil	"((( DSTSmalltalkTypesTest run: #testBooleanOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testBooleanOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testBooleanOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testBooleanOrNil )))"	| to ro |	#( nil false true ) do:		[ :x |	to := x.				ro := resource echoBooleanOrNil: to.				self assert: ro == to		]</body><body package="Opentalk-IIOP-Tests">testCharacterOrNil	"((( DSTSmalltalkTypesTest run: #testCharacterOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testCharacterOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testCharacterOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testCharacterOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add: nil;			add: Character space;			add: $$;			add: $L;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoCharacterOrNil: to.				self assert: ro == to		]</body><body package="Opentalk-IIOP-Tests">testDateOrNil	"((( DSTSmalltalkTypesTest run: #testDateOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testDateOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testDateOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testDateOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add: Date today;			add: ( Date today addDays: 32 );			add: nil;			add: ( Date today addDays: 63 );			add: nil;			add: ( Date today addDays: 129 );			yourself.	oc do:		[ :x |	to := x.				ro := resource echoDateOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testDoubleOrNil	"((( DSTSmalltalkTypesTest run: #testDoubleOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testDoubleOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testDoubleOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testDoubleOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add: Double zero;			add: Double unity;			add: nil;			add: Double pi;			add: nil;			add: Double radiansPerDegree;			add: 2.0 ln asDouble;			add: 2.0 sqrt asDouble;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoDoubleOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testFloatOrNil	"((( DSTSmalltalkTypesTest run: #testFloatOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testFloatOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testFloatOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testFloatOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add: Float zero;			add: Float unity;			add: nil;			add: Float pi;			add: nil;			add: Float radiansPerDegree;			add: 2.0 ln asFloat;			add: 2.0 sqrt asFloat;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoFloatOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testLongLongOrNil	"((( DSTSmalltalkTypesTest run: #testLongLongOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testLongLongOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testLongLongOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testLongLongOrNil )))"	| oc to ro |	oc := OrderedCollection new.	0 to: 63 do:		[ :x |	oc add: ( 2 raisedTo: x ) negated.				oc add: ( 2 raisedTo: x ) - 1.				oc add: nil.		].	oc do:		[ :x |	to := x.				ro := resource echoLongLongOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testLongOrNil	"((( DSTSmalltalkTypesTest run: #testLongOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testLongOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testLongOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testLongOrNil )))"	| oc to ro |	oc := OrderedCollection new.	0 to: 31 do:		[ :x |	oc add: ( 2 raisedTo: x ) negated.				oc add: ( 2 raisedTo: x ) - 1.				oc add: nil.		].	oc do:		[ :x |	to := x.				ro := resource echoLongOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testShortOrNil	"((( DSTSmalltalkTypesTest run: #testShortOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testShortOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testShortOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testShortOrNil )))"	| oc to ro |	oc := OrderedCollection new.	0 to: 15 do:		[ :x |	oc add: ( 2 raisedTo: x ) negated.				oc add: ( 2 raisedTo: x ) - 1.				oc add: nil.		].	oc do:		[ :x |	to := x.				ro := resource echoShortOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testStringOrNil	"((( DSTSmalltalkTypesTest run: #testStringOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testStringOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testStringOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testStringOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add: ( String with: Character space with: Character tab );			add: '';			add: 'Cras amet qui nunquam amavit, quique amavit cras amet!';			add: nil;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoStringOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testStringsOrNil	"((( DSTSmalltalkTypesTest run: #testStringsOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testStringsOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testStringsOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testStringsOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add: 	( OrderedCollection						with:( String with: Character space with: Character tab );						with: ''					);			add: 	( OrderedCollection						with: 'Cras amet qui nunquam amavit, quique amavit cras amet!'					);			add: nil;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoStringsOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testSymbolOrNil	"((( DSTSmalltalkTypesTest run: #testSymbolOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testSymbolOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testSymbolOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testSymbolOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add: #'';			add: nil;			add: #'Cras amet qui nunquam amavit, quique amavit cras amet!';			add: #Sybaris;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoSymbolOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testSymbolsOrNil	"((( DSTSmalltalkTypesTest run: #testSymbolsOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testSymbolsOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testSymbolsOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testSymbolsOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add:	( OrderedCollection 						with: #''					);			add:	( OrderedCollection withAll: 						#( #Cras #amet #qui #nunquam #amavit #',' #quique #amavit #cras #amet #'!' ) );			add: nil;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoSymbolsOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testTimeOrNil	"((( DSTSmalltalkTypesTest run: #testTimeOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testTimeOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testTimeOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testTimeOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add: Time now;			add: nil;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoTimeOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testTimestampOrNil	"((( DSTSmalltalkTypesTest run: #testTimestampOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testTimestampOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testTimestampOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testTimestampOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add: Timestamp now;			add: nil;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoTimestampOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testUnsignedLongLongOrNil	"((( DSTSmalltalkTypesTest run: #testUnsignedLongLongOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testUnsignedLongLongOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testUnsignedLongLongOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testUnsignedLongLongOrNil )))"	| oc to ro |	oc := OrderedCollection new.	0 to: 64 do:		[ :x |	oc add: ( 2 raisedTo: x ) - 1.				oc add: nil.		].	oc do:		[ :x |	to := x.				ro := resource echoUnsignedLongLongOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testUnsignedLongOrNil	"((( DSTSmalltalkTypesTest run: #testUnsignedLongOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testUnsignedLongOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testUnsignedLongOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testUnsignedLongOrNil )))"	| oc to ro |	oc := OrderedCollection new.	0 to: 32 do:		[ :x |	oc add: ( 2 raisedTo: x ) - 1.				oc add: nil.		].	oc do:		[ :x |	to := x.				ro := resource echoUnsignedLongOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testUnsignedShortOrNil	"((( DSTSmalltalkTypesTest run: #testUnsignedShortOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testUnsignedShortOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testUnsignedShortOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testUnsignedShortOrNil )))"	| oc to ro |	oc := OrderedCollection new.	0 to: 16 do:		[ :x |	oc add: ( 2 raisedTo: x ) - 1.				oc add: nil.		].	oc do:		[ :x |	to := x.				ro := resource echoUnsignedShortOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testWideCharacterOrNil	"((( DSTSmalltalkTypesTest run: #testWideCharacterOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testWideCharacterOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testWideCharacterOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testWideCharacterOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add: ( Character value: 30033 );			add: nil;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoWideCharacterOrNil: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testWideStringOrNil	"((( DSTSmalltalkTypesTest run: #testWideStringOrNil )))"	"((( DSTSmalltalkTypesTest debug: #testWideStringOrNil )))"	"((( DSTSmalltalkRemoteTypesTest run: #testWideStringOrNil )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testWideStringOrNil )))"	| oc to ro |	oc := ( OrderedCollection new )			add: ( ( TwoByteString new: 2 ) 					at: 1 put: $A; 					at:2 put: ( Character value: 23455 );					yourself );			add: nil;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoWideStringOrNil: to.				self assert: ro = to		]</body></methods><methods><class-id>Opentalk.SmalltalkTypesTest</class-id> <category>tests - byte array</category><body package="Opentalk-IIOP-Tests">testByteArray00016	"((( DSTSmalltalkTypesTest run: #testByteArray00016 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray00016 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray00016 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray00016 )))"	| to ro |	to := ByteArray new: 16.	0 to: 15 do:		[ :x |	to at: ( x + 1 ) put: x 		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray00032	"((( DSTSmalltalkTypesTest run: #testByteArray00032 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray00032 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray00032 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray00032 )))"	| to ro |	to := ByteArray new: 32.	0 to: 31 do:		[ :x |	to at: ( x + 1 ) put: x		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray00064	"((( DSTSmalltalkTypesTest run: #testByteArray00064 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray00064 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray00064 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray00064 )))"	| to ro |	to := ByteArray new: 64.	0 to: 63 do: 		[ :x |	to at: ( x + 1 ) put: x		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray00128	"((( DSTSmalltalkTypesTest run: #testByteArray00128 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray00128 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray00128 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray00128 )))"	| to ro |	to := ByteArray new: 128.	0 to: 127 do:		[ :x |	to at: ( x + 1 ) put: x		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray00256	"((( DSTSmalltalkTypesTest run: #testByteArray00256 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray00256 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray00256 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray00256 )))"	| to ro |	to := ByteArray new: 256.	0 to: 255 do:		[ :x |	to at: ( x + 1 ) put: x.		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray00512	"((( DSTSmalltalkTypesTest run: #testByteArray00512 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray00512 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray00512 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray00512 )))"	| sz to ro |	sz := 512.	to := ByteArray new: sz.	0 to: ( sz - 256 )  by: 256 do:		[ :n | 0 to: 255 do:				[ :x | to at: ( x + 1+ n ) put: x ]		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray01024	"((( DSTSmalltalkTypesTest run: #testByteArray01024 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray01024 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray01024 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray01024 )))"	| sz to ro |	sz := 1024.	to := ByteArray new: sz.	0 to: ( sz - 256 )  by: 256 do:		[ :n | 0 to: 255 do:				[ :x | to at: ( x + 1+ n ) put: x ]		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray02048	"((( DSTSmalltalkTypesTest run: #testByteArray02048 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray02048 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray02048 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray02048 )))"	| sz to ro |	sz := 2048.	to := ByteArray new: sz.	0 to: ( sz - 256 )  by: 256 do:		[ :n | 0 to: 255 do:				[ :x | to at: ( x + 1+ n ) put: x ]		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray04096	"((( DSTSmalltalkTypesTest run: #testByteArray04096 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray04096 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray04096 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray04096 )))"	| sz to ro |	sz := 4096.	to := ByteArray new: sz.	0 to: ( sz - 256 )  by: 256 do:		[ :n | 0 to: 255 do:				[ :x | to at: ( x + 1+ n ) put: x ]		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray08192	"((( DSTSmalltalkTypesTest run: #testByteArray08192 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray08192 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray08192 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray08192 )))"	| sz to ro |	sz := 8192.	to := ByteArray new: sz.	0 to: ( sz - 256 )  by: 256 do:		[ :n | 0 to: 255 do:				[ :x | to at: ( x + 1+ n ) put: x ]		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray16384	"((( DSTSmalltalkTypesTest run: #testByteArray16384 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray16384 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray16384 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray16384 )))"	| sz to ro |	sz := 16384.	to := ByteArray new: sz.	0 to: ( sz - 256 )  by: 256 do:		[ :n | 0 to: 255 do:				[ :x | to at: ( x + 1+ n ) put: x ]		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray32768	"((( DSTSmalltalkTypesTest run: #testByteArray32768 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray32768 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray32768 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray32768 )))"	| sz to ro |	sz := 32768.	to := ByteArray new: sz.	0 to: ( sz - 256 )  by: 256 do:		[ :n | 0 to: 255 do:				[ :x | to at: ( x + 1+ n ) put: x ]		].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteArray65536	"((( DSTSmalltalkTypesTest run: #testByteArray65536 )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray65536 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray65536 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray65536 )))"	| sz to ro |	sz := 65536.	to := ByteArray new: sz.	0 to: ( sz - 256 )  by: 256 do:		[ :n | 0 to: 255 do:				[ :x | to at: ( x + 1+ n ) put: x ]		].	ro := resource echoByteArray: to.	self assert: ro = to</body></methods><methods><class-id>Opentalk.SmalltalkTypesTest</class-id> <category>tests</category><body package="Opentalk-IIOP-Tests">testAssociation	"((( DSTSmalltalkTypesTest run: #testAssociation )))"	"((( DSTSmalltalkTypesTest debug: #testAssociation )))"	"((( DSTSmalltalkRemoteTypesTest run: #testAssociation )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testAssociation )))"	| to ro |	to := #Tashkent -&gt; 'Dalandzadgad'.	ro := resource echoAssociation: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testBag	"((( DSTSmalltalkTypesTest run: #testBag )))"	"((( DSTSmalltalkTypesTest debug: #testBag )))"	"((( DSTSmalltalkRemoteTypesTest run: #testBag )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testBag )))"	| to ro |	to := ( Bag equalityNew: 5 )					add: 'Calliope';					add: 'Clio';					add: 'Euterpe';					add: 'Terpsichore';					add: 'Erato';					add: 'Melpomene';					add: 'Thalia';					add: 'Polyhymnia';					add: 'Urania';					add: 'Erato';					add: 'Urania';					add: 'Euterpe';					yourself.	ro := resource echoBag: to.	self assert: ( ro occurrencesOf:  'Calliope' ) = ( to occurrencesOf:  'Calliope' ).	self assert: ( ro occurrencesOf:  'Clio' ) = ( to occurrencesOf:  'Clio' ).	self assert: ( ro occurrencesOf:  'Euterpe' ) = ( to occurrencesOf:  'Euterpe' ).	self assert: ( ro occurrencesOf:  'Terpsichore' ) = ( to occurrencesOf:  'Terpsichore' ).	self assert: ( ro occurrencesOf:  'Erato' ) = ( to occurrencesOf:  'Erato' ).	self assert: ( ro occurrencesOf:  'Melpomene' ) = ( to occurrencesOf:  'Melpomene' ).	self assert: ( ro occurrencesOf:  'Thalia' ) = ( to occurrencesOf:  'Thalia' ).	self assert: ( ro occurrencesOf:  'Polyhymnia' ) = ( to occurrencesOf:  'Polyhymnia' ).	self assert: ( ro occurrencesOf:  'Urania' ) = ( to occurrencesOf:  'Urania' ).</body><body package="Opentalk-IIOP-Tests">testByteArray	"((( DSTSmalltalkTypesTest run: #testByteArray )))"	"((( DSTSmalltalkTypesTest debug: #testByteArray )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteArray )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteArray )))"	| to ro |	to := #[ 0 255 1 254 2 253 3].	ro := resource echoByteArray: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testByteString	"((( DSTSmalltalkTypesTest run: #testByteString )))"	"((( DSTSmalltalkTypesTest debug: #testByteString )))"	"((( DSTSmalltalkRemoteTypesTest run: #testByteString )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testByteString )))"	| to ro |	to := 'Odi et amo. quare id faciam, fortasse requiris.  nescio, sed fieri sentio et excrucior.'.	ro := resource echoByteString: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testColorValue	"((( DSTSmalltalkTypesTest run: #testColorValue )))"	"((( DSTSmalltalkTypesTest debug: #testColorValue )))"	"((( DSTSmalltalkRemoteTypesTest run: #testColorValue )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testColorValue )))"	| to ro |	to := ColorValue navy.	ro := resource echoColorValue: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testDate	"((( DSTSmalltalkTypesTest run: #testDate )))"	"((( DSTSmalltalkTypesTest debug: #testDate )))"	"((( DSTSmalltalkRemoteTypesTest run: #testDate )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testDate )))"	| to ro |	to := Date today.	ro := resource echoDate: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testDictionary	"((( DSTSmalltalkTypesTest run: #testDictionary )))"	"((( DSTSmalltalkTypesTest debug: #testDictionary )))"	"((( DSTSmalltalkRemoteTypesTest run: #testDictionary )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testDictionary )))"	| dict to ro |	dict := ( Dictionary new )			add: 1 -&gt; Date today;			add: 2 -&gt; 7 factorial;			add: 3 -&gt; nil;			add: 4 -&gt; $$;			add: 5 -&gt; #[ 2 3 5 7 11 13 17 ];			add: 6 -&gt; 'tergiversation';			yourself.	to := dict.	ro := resource echoDictionary: to.	self assert: ( to keys size ) = ( ro keys size ).	1 to: 6 do: [ :ndx | self assert: ( ro at: ndx ) = ( to at: ndx ) ]</body><body package="Opentalk-IIOP-Tests">testIdentityDictionary	"((( DSTSmalltalkTypesTest run: #testIdentityDictionary )))"	"((( DSTSmalltalkTypesTest debug: #testIdentityDictionary )))"	"((( DSTSmalltalkRemoteTypesTest run: #testIdentityDictionary )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testIdentityDictionary )))"	| keys vals dict kndx vndx to ro |	keys := #(	'buckwheat'				'wheat'				'rye'				'rice'				'millet'				'barley'				'oats'				'maize'				'spelt'				'chestnut' 				'acorn'				'chick-pea').	vals := #(	7				nil				1.61803				$$				#[ 2 3 5 7 11 13 17 ] 				'tergiversation'				1.6180340051651d			). 	dict := IdentityDictionary new.	kndx := 0.	vndx := 0.	33 timesRepeat:		[	kndx := kndx + 1.			( kndx &gt; keys size ) ifTrue: [ kndx := 1 ].			vndx := vndx + 1.			( vndx &gt; vals size ) ifTrue: [ vndx := 1 ].			"Transcript cr; show: ( keys at: kndx )."			dict add: ( ( keys at: kndx ) copy ) -&gt; ( vals at: vndx )	 			].	to := dict.	ro := resource echoIdentityDictionary: to.	self assert: ( to keys size ) = ( ro keys size ).</body><body package="Opentalk-IIOP-Tests">testOrderedCollection	"((( DSTSmalltalkTypesTest run: #testOrderedCollection )))"	"((( DSTSmalltalkTypesTest debug: #testOrderedCollection )))"	"((( DSTSmalltalkRemoteTypesTest run: #testOrderedCollection )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testOrderedCollection )))"	| to ro |	to := ( OrderedCollection new )			add: $5;			add: nil;			yourself.	ro := resource echoOrderedCollection: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testPoint	"((( DSTSmalltalkTypesTest run: #testPoint )))"	"((( DSTSmalltalkTypesTest debug: #testPoint )))"	"((( DSTSmalltalkRemoteTypesTest run: #testPoint )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testPoint )))"	| to ro |	to := 28 @ 12.	ro := resource echoPoint: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testRectangle	"((( DSTSmalltalkTypesTest run: #testRectangle )))"	"((( DSTSmalltalkTypesTest debug: #testRectangle )))"	"((( DSTSmalltalkRemoteTypesTest run: #testRectangle )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testRectangle )))"	| to ro |	to := Rectangle origin: 0@100 extent: 600@1024.	ro := resource echoRectangle: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testRun	"((( DSTSmalltalkTypesTest run: #testRun )))"	"((( DSTSmalltalkTypesTest debug: #testRun )))"	"((( DSTSmalltalkRemoteTypesTest run: #testRun )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testRun )))"	| oc to ro |	oc := ( OrderedCollection new )			add: nil;			add: #Thasos;			add: ( $4 -&gt; #black );			add: ( Array with: nil with: #Kephale with: ( #red -&gt; 17 ) );			yourself.	oc do:		[ :x |	to := x.				ro := resource echoRun: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testSet	"((( DSTSmalltalkTypesTest run: #testSet )))"	"((( DSTSmalltalkTypesTest debug: #testSet )))"	"((( DSTSmalltalkRemoteTypesTest run: #testSet )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testSet )))"	| to ro |	to := ( Set new )			add: nil;			add: #Thasos;			add: ( $4 -&gt; #black );			add: 25;			yourself.	ro := resource echoSet: to.	self assert: ( ro size ) = ( to size ).	to do: [ :x | self assert: ( ro includes: x ) ]</body><body package="Opentalk-IIOP-Tests">testSymbol	"((( DSTSmalltalkTypesTest run: #testSymbol )))"	"((( DSTSmalltalkTypesTest debug: #testSymbol )))"	"((( DSTSmalltalkRemoteTypesTest run: #testSymbol )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testSymbol )))"	| oc to ro |	oc := ( OrderedCollection new )			add: #'';			add: #'Cras amet qui nunquam amavit, quique amavit cras amet!';			add: #Sybaris;			yourself.	oc do:		[ :x |	to := x.				ro := resource echoSymbol: to.				self assert: ro = to		]</body><body package="Opentalk-IIOP-Tests">testTime	"((( DSTSmalltalkTypesTest run: #testTime )))"	"((( DSTSmalltalkTypesTest debug: #testTime )))"	"((( DSTSmalltalkRemoteTypesTest run: #testTime )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testTime )))"	| to ro |	to := Time now.	ro := resource echoTime: to.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testTimestamp	"((( DSTSmalltalkTypesTest run: #testTimestamp )))"	"((( DSTSmalltalkTypesTest debug: #testTimestamp )))"	"((( DSTSmalltalkRemoteTypesTest run: #testTimestamp )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testTimestamp )))"	| to ro |	to := Timestamp now.	ro := resource echoTimestamp: to.	self assert: ro = to</body></methods><methods><class-id>Opentalk.SmalltalkTypesTest</class-id> <category>setup/teardown</category><body package="Opentalk-IIOP-Tests">setUp	super setUp.	resource := resource asRemoteObject</body></methods><methods><class-id>Opentalk.SmalltalkTypesTest</class-id> <category>tests - constructed types</category><body package="Opentalk-IIOP-Tests">testTestStruct	"((( DSTSmalltalkTypesTest run: #testTestStruct )))"	"((( DSTSmalltalkTypesTest debug: #testTestStruct )))"	"((( DSTSmalltalkRemoteTypesTest run: #testTestStruct )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testTestStruct )))"	| dict to ro |	dict := ( Dictionary new )			add: #aSymbol -&gt; #'_hj78';			add: #aSet -&gt; ( ( Set new: 3 ) add: 345; add: '+=_-)*'; add: $4; yourself );			add: #aString -&gt; 'cvhIu78';			add: #aLong -&gt; ( 2 raisedTo: 29 );			add: #aDate -&gt; ( Date today );			add: #aTime -&gt; ( Time now );			add: #aTimestamp -&gt; (Timestamp now );			yourself. 	to := dict.	ro := resource echoTestStruct: to.	self assert: ro size = to size.	self assert: ( to at: #aSymbol ) = ( ro at: #aSymbol ).	self assert: ( to at: #aSet ) size = ( ro at: #aSet ) size.	self assert: ( to at: #aString ) = ( ro at: #aString ).	self assert: ( to at: #aLong ) = ( ro at: #aLong ).	self assert: ( to at: #aDate ) = ( ro at: #aDate ).	self assert: ( to at: #aTime ) = ( ro at: #aTime ).	self assert: ( to at: #aTimestamp ) = ( ro at: #aTimestamp ).</body><body package="Opentalk-IIOP-Tests">testTestStructOfUnion	"((( DSTSmalltalkTypesTest run: #testTestStructOfUnion )))"	"((( DSTSmalltalkTypesTest debug: #testTestStructOfUnion )))"	"((( DSTSmalltalkRemoteTypesTest run: #testTestStructOfUnion )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testTestStructOfUnion )))"	| oc to ro |	oc := ( OrderedCollection new )			add: #'_hj78';			add: ( ( Set new: 3 ) add: 345; add: '+=_-)*'; add: $4; yourself );			add: 'cvhIu78';			add: ( 2 raisedTo: 29 );			add: ( Date today );			add: ( Time now );			add: (Timestamp now );			yourself. 	oc do: [ :x |		to := Dictionary new add: #aTestUnion -&gt; x; yourself.		ro := resource echoTestStructOfUnion: to.		self assert: ( ( ( to at: #aTestUnion ) = ( ro at: #aTestUnion ) )					or: [ ( to at: #aTestUnion ) size = ( ro at: #aTestUnion ) size ] )	]</body><body package="Opentalk-IIOP-Tests">testTestUnion	"((( DSTSmalltalkTypesTest run: #testTestUnion )))"	"((( DSTSmalltalkTypesTest debug: #testTestUnion )))"	"((( DSTSmalltalkRemoteTypesTest run: #testTestUnion )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testTestUnion )))"	| oc to ro |	oc := ( OrderedCollection new )			add: #'_hj78';			add: ( ( Set new: 3 ) add: 345; add: '+=_-)*'; add: $4; yourself );			add: 'cvhIu78';			add: ( 2 raisedTo: 29 );			add: ( Date today );			add: ( Time now );			add: (Timestamp now );			yourself. 	oc do: [ :x |		to := x.		ro := resource echoTestUnion: to.		self assert: ( to = ro or: [ ro _isRemote or: [ to size = ro size ] ] )	]</body></methods><methods><class-id>Opentalk.SmalltalkTypesTest class</class-id> <category>accessing</category><body package="Opentalk-IIOP-Tests">resources	^Array with: SmalltalkTypesResource</body></methods><methods><class-id>Opentalk.IIOPTest</class-id> <category>attributes</category><body package="Opentalk-IIOP-Tests">keywords	^#(iiop)</body></methods><methods><class-id>Opentalk.IIOPTest</class-id> <category>tests</category><body package="Opentalk-IIOP-Tests">newBrokerAtPort: aPort	^(BrokerConfiguration standard		adaptor: (ConnectionAdaptorConfiguration new				isBiDirectional: false;				transport: (TransportConfiguration iiop						minorVersion: self minorVersion;						marshaler: (MarshalerConfiguration cdr));				soReuseAddr: true)	)	newAtPort: aPort</body><body package="Opentalk-IIOP-Tests">testClientConnectionClosing"	(((IIOP1_2Test debug: #testClientConnectionClosing)))	(((IIOP1_1Test debug: #testClientConnectionClosing)))	(((IIOP1_0Test debug: #testClientConnectionClosing)))"	| client server log |	log := EventCollector new.	server := self newBrokerAtPort: 4242.	server sendErrorEventsTo: log.	client := self newBrokerAtPort: 4243.	client sendErrorEventsTo: log.	debugging ifTrue: [ server passErrors. client passErrors ].	Log ifNotNil: [ :l |		server sendAllEventsTo: l.		client sendAllEventsTo: l ].	[	| oid stream proxy |		server start.		client start.		oid := 'stream' asByteArray.		stream := 'Hello World' asByteArray readStream.		server objectAdaptor export: stream oidBytes: oid.		proxy := client				remoteObjectAt: (IPSocketAddress hostName: 'localhost' port: 4242)				oid: oid				interfaceId: 'IDL:SmalltalkTypes/Stream:1.0'.		proxy next: 5.	] ensure: [ client stop.		"Apparently we need to give the server socket some time to notice the breakdown"		(Delay forMilliseconds: 100) wait.		server stop ].	self coolDownDelay.	self assert: (log events isEmpty)</body><body package="Opentalk-IIOP-Tests">testCodeSets"	(((IIOP1_2Test debug: #testCodeSets)))	(((IIOP1_1Test debug: #testCodeSets)))	(((IIOP1_0Test debug: #testCodeSets)))"	| client server cs |	server := self newBrokerAtPort: 4242.	client := self newBrokerAtPort: 4243.	server start.	client start.	"To suppress the default code UTF code sets"	server configuration adaptor transport marshaler codeSets: IOPCodeSets null.	client configuration adaptor transport marshaler codeSets: IOPCodeSets null.	debugging ifTrue: [ server passErrors. client passErrors ].	Log ifNotNil: [ :l | server sendAllEventsTo: l. client sendAllEventsTo: l ].	[	| name ns proxy string result encoded bytes |		"Setup"		name := 'resource' asDSTName.		server nameService contextBind: name to: StandardTypesResource basicNew.		ns := client nameServiceAt: server accessPoint.		proxy := ns contextResolve: name.		proxy _narrowTo: 'IDL:Testing/StandardTypesResource:1.0'.		encoded := ByteArray withAll: (0 to: 255).		string := encoded asString. "full ISO8859-1"		server objectAdaptor "capture the outgoing bytes and the negotiated code set"			when: #sendingPackage:size:in: do: [ :rq :sz :tr || end |				end := rq buffer msgSize + rq buffer headerSize. 				bytes := rq buffer copyFrom: (end - encoded size max: 1) to: end  - 1.				bytes changeClassTo: ByteArray.				cs := tr marshaler codeSet ].		"no code sets - defaults to ISO8859-1"		result := proxy echoString: string.		self assert: result = string.		self assert: cs = nil.		self assert: bytes = encoded.		"server has no code sets - defaults to ISO8859-1"		client configuration adaptor transport marshaler codeSets: IOPCodeSets UTF.		result := proxy echoString: string.		self assert: result = string.		self assert: cs = nil.		self assert: bytes = encoded.		"client has no code sets - defaults to ISO8859-1"		server configuration adaptor transport marshaler codeSets: IOPCodeSets UTF.		"server config changed, we have to regenerate the IOR to include new code sets"		proxy _release. "otherwise the old cached version from the remoteObjectRegistry on the client will be resurrected"		proxy := ns contextResolve: name. 		proxy _narrowTo: 'IDL:Testing/StandardTypesResource:1.0'.		client configuration adaptor transport marshaler codeSets: IOPCodeSets null.		result := proxy echoString: string.		self assert: result = string.		self assert: cs = nil.		self assert: bytes = encoded.		"both have code sets - does UTF8"		client configuration adaptor transport marshaler codeSets: IOPCodeSets UTF.		encoded := string asByteArrayEncoding: #utf8.		result := proxy echoString: string.		self assert: result = string.		self assert: cs notNil.		self assert: cs charData = (IOPCodeSets codeSetForName: 'UTF-8').		self assert: bytes = encoded.	] ensure: [ client stop. server stop ].	self coolDownDelay</body><body package="Opentalk-IIOP-Tests">testServerConnectionClosing"	(((IIOP1_2Test debug: #testServerConnectionClosing)))	(((IIOP1_1Test debug: #testServerConnectionClosing)))	(((IIOP1_0Test debug: #testServerConnectionClosing)))"	| broker2 broker1 log |	log := EventCollector new.	broker1 := self newBrokerAtPort: 4242.	broker1 sendErrorEventsTo: log.	broker2 := self newBrokerAtPort: 4243.	broker2 sendErrorEventsTo: log.	Log ifNotNil: [ :l |		broker1 sendAllEventsTo: l.		broker2 sendAllEventsTo: l ].	[	| oid stream proxy |		broker1 start.		broker2 start.		oid := 'stream' asByteArray.		stream := 'Hello World' asByteArray readStream.		broker1 objectAdaptor export: stream oidBytes: oid.		proxy := broker2				remoteObjectAt: (IPSocketAddress hostName: 'localhost' port: 4242)				oid: oid				interfaceId: 'IDL:SmalltalkTypes/Stream:1.0'.		proxy next: 5.	] ensure: [ broker1 stop.		"Apparently we need to give the client socket some time to notice the breakdown"		(Delay forMilliseconds: 100) wait.		broker2 stop ].	self coolDownDelay.	self assert: (log events isEmpty)</body><body package="Opentalk-IIOP-Tests">testWCodeSets"	(((IIOP1_2Test debug: #testWCodeSets)))	(((IIOP1_1Test debug: #testWCodeSets)))	(((IIOP1_0Test debug: #testWCodeSets)))"	| client server cs |	server := self newBrokerAtPort: 4242.	client := self newBrokerAtPort: 4243.	server start.	client start.	"To suppress the default code UTF code sets"	server configuration adaptor transport marshaler codeSets: IOPCodeSets null.	client configuration adaptor transport marshaler codeSets: IOPCodeSets null.	debugging ifTrue: [ server passErrors. client passErrors ].	Log ifNotNil: [ :l | server sendAllEventsTo: l. client sendAllEventsTo: l ].	[	| name ns proxy string result encoded bytes |		"Setup"		name := 'resource' asDSTName.		server nameService contextBind: name to: StandardTypesResource basicNew.		ns := client nameServiceAt: server accessPoint.		proxy := ns contextResolve: name.		proxy _narrowTo: 'IDL:Testing/StandardTypesResource:1.0'.		encoded := ByteArray withAll: (0 to: 255).		string := encoded asString. "full ISO8859-1"		server objectAdaptor "capture the outgoing bytes and the negotiated code set"			when: #sendingPackage:size:in: do: [ :rq :sz :tr || start end null |				end := rq buffer msgSize + rq buffer headerSize.				null := (client configuration adaptor transport minorVersion = 1) ifTrue: [1] ifFalse: [0].				start := end - encoded size + 1 - (null * 2) max: 1.				end := end - (null * 2).				bytes := rq buffer copyFrom: start to: end.				bytes changeClassTo: ByteArray.				cs := tr marshaler codeSet ].		"server has no code sets should yield INV_OBJREF/minor=2 on invocation"		self assert: (			[ 	proxy echoWString: string. false			] on: DSTORBObject invObjrefSignal do: [ :ex || sig |				sig := ex getSignal.				sig nameMessage = #INV_OBJREF and: [ (ex parameter at: #minor) = 2 ] ] ).		self assert: cs = nil.		"client has no code sets - defaults to ISO8859-1"		server configuration adaptor transport marshaler codeSets: IOPCodeSets UTF.		"server config changed, we have to regenerate the IOR to include new code sets"		proxy _release. "otherwise the old cached version from the remoteObjectRegistry on the client will be resurrected"		proxy := ns contextResolve: name. 		proxy _narrowTo: 'IDL:Testing/StandardTypesResource:1.0'.		"This is suboptimal, because the ObjRef is fine in this case, but the client is basically misconfigured. I'm not sure it's worth the effort trying to fix this."		self assert: (			[ 	proxy echoWString: string. false			] on: DSTORBObject invObjrefSignal do: [ :ex || sig |				sig := ex getSignal.				sig nameMessage = #INV_OBJREF and: [ (ex parameter at: #minor) = 2 ] ] ).		self assert: cs = nil.		"both have code sets - does UTF16"		client configuration adaptor transport marshaler codeSets: IOPCodeSets UTF.		encoded := ((ByteArray new: string size) withEncoding: #utf16) writeStream.		encoded encoder bigEndian: true.		encoded := encoded nextPutAll: string; encodedContents.		result := proxy echoWString: string.		self assert: result = string.		self assert: cs notNil.		self assert: cs wcharData = (IOPCodeSets codeSetForName: 'UTF-16').		self assert: bytes = encoded.	] ensure: [ client stop. server stop ].	self coolDownDelay</body><body package="Opentalk-IIOP-Tests">testWideCodeSets"	(((IIOP1_2Test debug: #testWideCodeSets)))	(((IIOP1_1Test debug: #testWideCodeSets)))	(((IIOP1_0Test debug: #testWideCodeSets)))"	| server client log |	log := EventCollector new.	client := self newBrokerAtPort: 4242.	client sendErrorEventsTo: log.	server := self newBrokerAtPort: 4243.	server sendErrorEventsTo: log.	Log ifNotNil: [ :l |		client sendAllEventsTo: l.		server sendAllEventsTo: l ].	[	| name proxy string result |		client start.		server start.		name := 'resource' asDSTName.		server nameService contextBind: name to: StandardTypesResource basicNew.		proxy := client nameServiceAt: server accessPoint.		proxy := proxy contextResolve: name.		proxy _narrowTo: 'IDL:Testing/StandardTypesResource:1.0'.		string := (0 to: 65535)	"Full UCS-2"				inject: (TwoByteString new: 65536)				into: [ :s :i | s at: i + 1 put: i asCharacter; yourself ].		result := proxy echoWString: string.		self assert: result = string	] ensure: [ server stop. client stop ].	self coolDownDelay.	self assert: (log events isEmpty)</body></methods><methods><class-id>Opentalk.IIOP1_1Test</class-id> <category>accessing</category><body package="Opentalk-IIOP-Tests">minorVersion	^1</body></methods><methods><class-id>Opentalk.ArraySegmentTest</class-id> <category>tests</category><body package="Opentalk-IIOP-Tests">testGrowing	| segment array |	array := #[1 2 3 4 5] copy.	segment := ArraySegment on: array from: 3 to: 5.	self assert: segment size = 3.	self assert: segment first = 3.	self assert: segment last = 5.	segment growToAtLeast: 7.	self assert: segment size &gt;= 7.	self assert: array size = (segment size + 2).	self assert: (segment at: 5) isZero</body><body package="Opentalk-IIOP-Tests">testNesting	| segment array segment2 |	array := #[1 2 3 4 5 6 7 8 9] copy.	segment := ArraySegment on: array from: 3 to: 7.	segment2 := ArraySegment on: segment from: 2 to: 4.	self assert: segment2 first = 4.	self assert: segment2 last = 6.	segment2 growToAtLeast: 7.	self assert: segment2 size &gt;= 7.	self assert: segment size = (segment2 size + 1).	self assert: (segment2 at: 5) = 8</body></methods><methods><class-id>Opentalk.StandardTypesResource</class-id> <category>testing operations</category><body package="Opentalk-IIOP-Tests">doubleLog: aDouble	^aDouble log</body><body package="Opentalk-IIOP-Tests">echoAny: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">echoArrayOfShort: anArrayOfShort	^anArrayOfShort</body><body package="Opentalk-IIOP-Tests">echoChar: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">echoEnum: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">echoFixed: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">echoString: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">echoTestStruct: aDictionary	^aDictionary</body><body package="Opentalk-IIOP-Tests">echoTestStructOfUnion: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">echoTestUnion: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">echoWChar: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">echoWString: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">floatLog: aFloat	^aFloat log</body></methods><methods><class-id>Opentalk.StandardTypesResource</class-id> <category>setup/teardown</category><body package="Opentalk-IIOP-Tests">CORBAName	^#'::Testing::StandardTypesResource'</body><body package="Opentalk-IIOP-Tests">asRemoteObject	^self remote</body><body package="Opentalk-IIOP-Tests">newBrokerAtPort: aPort	^(BrokerConfiguration standard		adaptor: (ConnectionAdaptorConfiguration new				isBiDirectional: false;				transport: (TransportConfiguration iiop						minorVersion: 2;						marshaler: (MarshalerConfiguration cdr));				soReuseAddr: true)	)	newAtPort: aPort</body><body package="Opentalk-IIOP-Tests">remote	^remote ifNil: [ | oid |		oid := #resource asByteArray.		broker objectAdaptor export: self oidBytes: oid.		broker passErrors.		remote := broker					remoteObjectAt: broker accessPoint					oid: oid					interfaceId: 'IDL:Testing/', self class name, ':1.0'.		remote _objRef profile components: (Array with: CDRMarshaler defaultCodeSets).		remote ]</body><body package="Opentalk-IIOP-Tests">resources	^Array with: SmalltalkTypesResource</body><body package="Opentalk-IIOP-Tests">setUp	broker := self newBrokerAtPort: 4242.	Log ifNotNil: [ :log | broker sendAllEventsTo: log ].	broker start</body><body package="Opentalk-IIOP-Tests">tearDown	broker stop</body></methods><methods><class-id>Opentalk.StandardTypesResource class</class-id> <category>repository</category><body package="Opentalk-IIOP-Tests">CORBAName	^#'::Testing::StandardTypesResourceClass'</body></methods><methods><class-id>Opentalk.GIOPTest</class-id> <category>tests-marshaling messages</category><body package="Opentalk-IIOP-Tests">newBuffer	^(TransportPackageBytes new: 100) initializeGIOPMinorVersion: self minorVersion</body><body package="Opentalk-IIOP-Tests">testCancelRequestMarshaling	| original copy |	original := 		(GIOPCancelRequest newOn: self newBuffer)			requestId: 42;			yourself.	original writeHeader;		updateSizeFromPosition.	copy := (GIOPCancelRequest newWith: original buffer)			readHeader;			yourself.	self 	assert: copy requestId = original requestId</body><body package="Opentalk-IIOP-Tests">testFragmentMarshaling	| original copy |	"fragments are not supported in IIOP 1.0"	self minorVersion = 0 ifTrue: [^self].	original := 		( GIOPFragment newOn: self newBuffer)			requestId: 42;			yourself.	original writeHeader;		updateSizeFromPosition.	copy := (GIOPFragment newWith: original buffer)			readHeader;			yourself.	self minorVersion = 1 ifFalse: [		self assert: copy requestId = original requestId ]</body><body package="Opentalk-IIOP-Tests">testIORTargetLocateRequestMarshaling"	(((GIOP1_2Test debug: #testIORTargetLocateRequestMarshaling)))"	| original copy |	original := 		(GIOPLocateRequest newOn: self newBuffer)			target: (IIOPObjRef						newOn: (IPSocketAddress hostName: 'localhost' port: 4242)						oid: 'hello' asByteArray						interfaceId: 'IDL:SmalltalkTypes/Stream:1.0');			requestId: 42;			yourself.	original writeHeader;		updateSizeFromPosition.	copy := (GIOPLocateRequest newWith: original buffer)			readHeader;			yourself.	self 	assert: copy msgType = GIOPLocateRequest msgType;		assert: copy requestId = original requestId;		assert: (			self minorVersion &lt; 2				ifTrue: [copy target = original target oidBytes]				ifFalse: [copy target = original target])</body><body package="Opentalk-IIOP-Tests">testIORTargetRequestMarshaling	| original copy |	original := 		(GIOPRequest newOn: self newBuffer)			responseExpected: true;			target: (IIOPObjRef						newOn: (IPSocketAddress hostName: 'localhost' port: 4242)						oid: 'hello' asByteArray						interfaceId: 'IDL:SmalltalkTypes/Stream:1.0');			operation: 'thisOrThat';			serviceContext: (Array with: IOPCodeSet default);			requestId: 42;			yourself.	original writeHeader;		updateSizeFromPosition.	copy := (GIOPRequest newWith: original buffer)			readHeader;			yourself.	self assert: copy minorVersion = original minorVersion;		assert: copy majorVersion = original majorVersion;		assert: copy responseExpected = original responseExpected;		assert: copy operation = original operation;		assert: copy requestId = original requestId;		assert: copy serviceContext = original serviceContext.	self assert: (		self minorVersion &lt; 2			ifTrue: [copy target = original target oidBytes]			ifFalse: [copy target = original target])</body><body package="Opentalk-IIOP-Tests">testKeyTargetLocateRequestMarshaling	| original copy |	original := 		(GIOPLocateRequest newOn: self newBuffer)			target: 'hello' asByteArray;			requestId: 42;			yourself.	original writeHeader;		updateSizeFromPosition.	copy := (GIOPLocateRequest newWith: original buffer)			readHeader;			yourself.	self	assert: copy target = original target;		assert: copy requestId = original requestId</body><body package="Opentalk-IIOP-Tests">testKeyTargetRequestMarshaling	| original copy |	original := 		(GIOPRequest newOn: self newBuffer)			responseExpected: true;			target: 'hello' asByteArray;			operation: 'thisOrThat';			serviceContext: (Array with: IOPCodeSet default);			requestId: 42;			yourself.	original writeHeader;		updateSizeFromPosition.	copy := (GIOPRequest newWith: original buffer)			readHeader;			yourself.	self assert: copy minorVersion = original minorVersion;		assert: copy majorVersion = original majorVersion;		assert: copy responseExpected = original responseExpected;		assert: copy target = original target;		assert: copy operation = original operation;		assert: copy requestId = original requestId;		assert: copy serviceContext = original serviceContext</body><body package="Opentalk-IIOP-Tests">testLocateReplyLOC_SYSTEM_EXCEPTION"	(((GIOP1_2Test debug: #testLocateReplyLOC_SYSTEM_EXCEPTION)))	(((GIOP1_1Test debug: #testLocateReplyLOC_SYSTEM_EXCEPTION)))	(((GIOP1_0Test debug: #testLocateReplyLOC_SYSTEM_EXCEPTION)))"	| original copy ex |	ex := SystemException INTERNAL			COMPLETED_YES;			yourself .	original := (GIOPLocateReply newOn: self newBuffer)				requestId: 42;				LOC_SYSTEM_EXCEPTION: ex;				yourself.	original marshalPayloadFrom: nil using: nil.	copy := (GIOPLocateReply newWith: original buffer)				readHeader;				unmarshalPayloadUsing: nil;				yourself.	self	assert: copy locateStatus = original locateStatus;		assert: copy requestId = original requestId;		assert: copy reply minorCode = original reply minorCode;		assert: copy reply repositoryId asString = original reply repositoryId asString;		assert: copy reply completionStatus = original reply completionStatus</body><body package="Opentalk-IIOP-Tests">testLocateReplyOBJECT_FORWARD"	(((GIOP1_2Test debug: #testLocateReplyOBJECT_FORWARD)))	(((GIOP1_1Test debug: #testLocateReplyOBJECT_FORWARD)))	(((GIOP1_0Test debug: #testLocateReplyOBJECT_FORWARD)))"	| original copy ref |	ref := IIOPObjRef			newOn: (IPSocketAddress hostName: 'localhost' port: 4242)			oid: 'stream' asByteArray			interfaceId: 'IDL:SmalltalkTypes/Stream:1.0'.	original := (GIOPLocateReply newOn: self newBuffer)				requestId: 42;				OBJECT_FORWARD: ref;				yourself.	original marshalPayloadFrom: nil using: nil.	copy := (GIOPLocateReply newWith: original buffer)				readHeader;				unmarshalPayloadUsing: nil;				yourself.	self	assert: copy locateStatus = original locateStatus;		assert: copy requestId = original requestId;		assert: copy reply = original reply</body><body package="Opentalk-IIOP-Tests">testLocateReplyOBJECT_HERE"	(((GIOP1_2Test debug: #testLocateReplyOBJECT_HERE)))	(((GIOP1_1Test debug: #testLocateReplyOBJECT_HERE)))	(((GIOP1_0Test debug: #testLocateReplyOBJECT_HERE)))"	| original copy |	original := (GIOPLocateReply newOn: self newBuffer)				requestId: 42;				OBJECT_HERE;				yourself.	original  marshalPayloadFrom: nil using: nil.	copy := (GIOPLocateReply newWith: original buffer)				readHeader;				unmarshalPayloadUsing: nil;				yourself.	self	assert: copy locateStatus = original locateStatus;		assert: copy requestId = original requestId</body><body package="Opentalk-IIOP-Tests">testLocateReplyUNKNOWN_OBJECT"	(((GIOP1_2Test debug: #testLocateReplyUNKNOWN_OBJECT)))	(((GIOP1_1Test debug: #testLocateReplyUNKNOWN_OBJECT)))	(((GIOP1_0Test debug: #testLocateReplyUNKNOWN_OBJECT)))"	| original copy |	original := (GIOPLocateReply newOn: self newBuffer)				requestId: 42;				UNKNOWN_OBJECT;				yourself.	original marshalPayloadFrom: nil using: nil.	copy := (GIOPLocateReply newWith: original buffer)				readHeader;				unmarshalPayloadUsing: nil;				yourself.	self	assert: copy locateStatus = original locateStatus;		assert: copy requestId = original requestId</body><body package="Opentalk-IIOP-Tests">testProfileTargetLocateRequestMarshaling	| original copy |	original := 		(GIOPLocateRequest newOn: self newBuffer)			target: (IIOPObjRef					newOn: (IPSocketAddress hostName: 'localhost' port: 4242)					oid: 'hello' asByteArray					interfaceId: 'IDL:SmalltalkTypes/Stream:1.0'				) profile;			requestId: 42;			yourself.	original writeHeader;		updateSizeFromPosition.	copy := (GIOPLocateRequest newWith: original buffer)			readHeader;			yourself.	self	assert: copy requestId = original requestId;		assert: (			self minorVersion &lt; 2				ifTrue: [copy target = original target objectKey]				ifFalse: [copy target = original target])</body><body package="Opentalk-IIOP-Tests">testProfileTargetRequestMarshaling	| original copy |	original := 		(GIOPRequest newOn: self newBuffer)			responseExpected: true;			target: (IIOPObjRef						newOn: (IPSocketAddress hostName: 'localhost' port: 4242)						oid: 'hello' asByteArray						interfaceId: 'IDL:SmalltalkTypes/Stream:1.0'				) profile;			operation: 'thisOrThat';			serviceContext: (Array with: IOPCodeSet default);			requestId: 42;			yourself.	original writeHeader;		updateSizeFromPosition.	copy := (GIOPRequest newWith: original buffer)			readHeader;			yourself.	self assert: copy minorVersion = original minorVersion;		assert: copy majorVersion = original majorVersion;		assert: copy responseExpected = original responseExpected;		assert: copy operation = original operation;		assert: copy requestId = original requestId;		assert: copy serviceContext = original serviceContext.	self assert: (		self minorVersion &lt; 2			ifTrue: [copy target = original target objectKey]			ifFalse: [copy target = original target])</body><body package="Opentalk-IIOP-Tests">testReplyMarshalingLOCATION_FORWARD"	(((GIOP1_2Test debug: #testReplyMarshalingLOCATION_FORWARD)))	(((GIOP1_1Test debug: #testReplyMarshalingLOCATION_FORWARD)))	(((GIOP1_0Test debug: #testReplyMarshalingLOCATION_FORWARD)))"	| original copy ref |	ref := IIOPObjRef			newOn: (IPSocketAddress hostName: 'localhost' port: 4242)			oid: 'stream' asByteArray			interfaceId: 'IDL:SmalltalkTypes/Stream:1.0'.	original := 		(GIOPReply newOn: self newBuffer)			serviceContext: (Array with: IOPCodeSet default);			requestId: 42;			replyStatus: 0;			LOCATION_FORWARD: ref;			yourself.	original marshalPayloadFrom: nil using: nil.	copy :=		[	(GIOPReply newWith: original buffer)				readHeader;				unmarshalPayloadUsing: nil;				yourself		] on: LocationForward do: [ :ex |			ex return: ex parameter ].	self	assert: copy minorVersion = original minorVersion;		assert: copy majorVersion = original majorVersion;		assert: copy replyStatus = original replyStatus;		assert: copy requestId = original requestId;		assert: copy serviceContext = original serviceContext;		assert: copy reply = original reply</body><body package="Opentalk-IIOP-Tests">testReplyMarshalingNO_EXCEPTION"	(((GIOP1_2Test debug: #testReplyMarshalingNO_EXCEPTION)))	(((GIOP1_1Test debug: #testReplyMarshalingNO_EXCEPTION)))	(((GIOP1_0Test debug: #testReplyMarshalingNO_EXCEPTION)))"	| original copy |	original := 		(GIOPReply newOn: self newBuffer)			serviceContext: (Array with: IOPCodeSet default);			requestId: 42;			replyStatus: 0;			yourself.	original writeHeader;		updateSizeFromPosition.	copy := (GIOPReply newWith: original buffer)			readHeader;			yourself.	self assert: copy minorVersion = original minorVersion;		assert: copy majorVersion = original majorVersion;		assert: copy replyStatus = original replyStatus;		assert: copy requestId = original requestId;		assert: copy serviceContext = original serviceContext</body><body package="Opentalk-IIOP-Tests">testReplyMarshalingSYSTEM_EXCEPTION"	(((GIOP1_2Test debug: #testReplyMarshalingSYSTEM_EXCEPTION)))	(((GIOP1_1Test debug: #testReplyMarshalingSYSTEM_EXCEPTION)))	(((GIOP1_0Test debug: #testReplyMarshalingSYSTEM_EXCEPTION)))"	| original copy ex |	ex := SystemException INTERNAL			messageText: 'LOC_NEEDS_ADDRESSING_MODE not supported';			COMPLETED_YES;			yourself.	original := 		(GIOPReply newOn: self newBuffer)			serviceContext: (Array with: IOPCodeSet default);			requestId: 42;			replyStatus: 0;			SYSTEM_EXCEPTION: ex;			yourself.	original marshalPayloadFrom: nil using: nil.	copy := (GIOPReply newWith: original buffer)			readHeader;			unmarshalPayloadUsing: self;			yourself.	self assert: copy minorVersion = original minorVersion;		assert: copy majorVersion = original majorVersion;		assert: copy replyStatus = original replyStatus;		assert: copy requestId = original requestId;		assert: copy serviceContext = original serviceContext;		assert: copy reply minorCode = original reply minorCode;		assert: copy reply repositoryId asString = original reply repositoryId asString;		assert: copy reply completionStatus = original reply completionStatus</body></methods><methods><class-id>Opentalk.GIOPTest</class-id> <category>support-marshaler emulation</category><body package="Opentalk-IIOP-Tests">processingPolicy	^self</body><body package="Opentalk-IIOP-Tests">provideInterceptorDispatcher	^nil</body><body package="Opentalk-IIOP-Tests">requestById: id	^nil</body><body package="Opentalk-IIOP-Tests">transport	^self</body></methods><methods><class-id>Opentalk.GIOP1_2Test</class-id> <category>accessing</category><body package="Opentalk-IIOP-Tests">minorVersion	^2</body></methods><methods><class-id>Opentalk.IOPTest</class-id> <category>tests-tagged profiles</category><body package="Opentalk-IIOP-Tests">testIIOPProfileMarshaling	| out in |	out := IIOPProfile new			majorVersion: 1;			minorVersion: 2;			host: 'localhost';			port: 4242;			objectKey: 'hello' asByteArray;			components: (				Array					with: (IIOPAlternateAddress host: 'hostname' port: 4242)					with: (IOPCodeSets charSets: #('UTF-8'	'iso8859-1') wcharSets: #('UTF-16'))					with: (IOPORBType id: 42));			yourself.	in := IIOPProfile new profileData: out profileData.	self assert: out majorVersion = in majorVersion.	self assert: out minorVersion = in minorVersion.	self assert: out host = in host.	self assert: out port = in port.	self assert: out objectKey = in objectKey.	self assert: out components = in components</body><body package="Opentalk-IIOP-Tests">testIOPMultipleComponentProfileMarshaling	| out in |	out := IOPMultipleComponentProfile new			components: (				Array					with: (IIOPAlternateAddress host: 'hostname' port: 4242)					with: (IOPCodeSets charSets: #('UTF-8'	'iso8859-1') wcharSets: #('UTF-16'))					with: (IOPORBType id: 42));			yourself.	in := IOPMultipleComponentProfile new profileData: out profileData.	self assert: out components = in components</body></methods><methods><class-id>Opentalk.IOPTest</class-id> <category>tests-service contexts</category><body package="Opentalk-IIOP-Tests">testCodeSetNegotiation"XNCS - native code set (X=client/server), XCCS - conversion code sets (X=client/server)"	| client server cs |	"CNCS = SNCS"	client := IOPCodeSets charSets: #('UTF-8' 'iso8859-1') wcharSets: #('UCS-2:L1' 'UTF-16').	server := client.	cs := client negotiateWith: server.	self assert: cs charData = client charNativeSet.	self assert: cs wcharData = client wcharNativeSet.	"CCCS includes: SNCS"	client := IOPCodeSets charSets: #('UTF-8' 'iso8859-1') wcharSets: #('UCS-2:L1' 'UTF-16').	server := IOPCodeSets charSets: #('iso8859-1' 'UTF-8') wcharSets: #('UTF-16' 'UCS-2:L1').	cs := client negotiateWith: server.	self assert: cs charData = server charNativeSet.	self assert: cs wcharData = server wcharNativeSet.	"SCCS includes: CNCS"	client := IOPCodeSets charSets: #('UTF-8' 'iso8859-1') wcharSets: #('UCS-2:L1' 'UTF-16').	server := IOPCodeSets charSets: #('iso8859-2' 'UTF-8') wcharSets: #('UTF-1' 'UCS-2:L1').	cs := client negotiateWith: server.	self assert: cs charData = client charNativeSet.	self assert: cs wcharData = client wcharNativeSet.	"(CCCS intersect: SCCS) notEmpty"	client := IOPCodeSets charSets: #('iso8859-1' 'iso8859-3' 'iso8859-4' 'iso8859-5') wcharSets: #('UCS-2:L1' 'UCS-2:L3').	server := IOPCodeSets charSets: #('iso8859-2' 'iso8859-5' 'iso8859-4') wcharSets: #('UCS-2:L2' 'UCS-2:L3').	cs := client negotiateWith: server.	self assert: cs charData =  (IOPCodeSets codeSetForName: 'iso8859-5').	self assert: cs wcharData = (IOPCodeSets codeSetForName: 'UCS-2:L3').	"SNCS compatible with CNCS =&gt; fallback"	client := IOPCodeSets charSets: #('iso8859-1') wcharSets: #('UCS-2:L1').	server := IOPCodeSets charSets: #('iso8859-2') wcharSets: #('UCS-2:L2').	cs := client negotiateWith: server.	self assert: cs charData =  (IOPCodeSets codeSetForName: 'UTF-8').	self assert: cs wcharData = (IOPCodeSets codeSetForName: 'UTF-16').	"incompatible code sets - can't test compatibility yet	client := IOPCodeSets charSets: #('iso8859-1') wcharSets: #('eucJP' 'eucKR').	server := IOPCodeSets charSets: #('iso8859-7') wcharSets: #('UCS-2:L2').	cs := client negotiateWith: server.	self assert: cs charData =  nil.	self assert: cs wcharData = nil."</body><body package="Opentalk-IIOP-Tests">testMarshalingCodeSet	| stream original copy |	stream := CDRStream on: (ByteArray new: 10).	original := IOPCodeSet default.	original cdrWriteOn: stream.	stream reset.	copy := IOPCodeSet cdrReadFrom: stream.	self assert: copy = original</body></methods><methods><class-id>Opentalk.StandardTypesTest</class-id> <category>tests - array of short</category><body package="Opentalk-IIOP-Tests">testArrayOfShort00016	"((( DSTSmalltalkTypesTest run: #testArrayOfShort00016 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort00016 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort00016 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort00016 )))"	| sz n to ro |	sz := 16.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort00032	"((( DSTSmalltalkTypesTest run: #testArrayOfShort00032 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort00032 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort00032 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort00032 )))"	| sz n to ro |	sz := 32.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort00064	"((( DSTSmalltalkTypesTest run: #testArrayOfShort00064 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort00064 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort00064 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort00064 )))"	| sz n to ro |	sz := 64.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort00128	"((( DSTSmalltalkTypesTest run: #testArrayOfShort00128 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort00128 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort00128 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort00128 )))"	| sz n to ro |	sz := 128.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort00256	"((( DSTSmalltalkTypesTest run: #testArrayOfShort00256 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort00256 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort00256 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort00256 )))"	| sz n to ro |	sz := 256.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort00512	"((( DSTSmalltalkTypesTest run: #testArrayOfShort00512 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort00512 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort00512 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort00512 )))"	| sz n to ro |	sz := 512.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort01024	"((( DSTSmalltalkTypesTest run: #testArrayOfShort01024 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort01024 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort01024 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort01024 )))"	| sz n to ro |	sz := 1024.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort02048	"((( DSTSmalltalkTypesTest run: #testArrayOfShort02048 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort02048 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort02048 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort02048 )))"	| sz n to ro |	sz := 2048.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort04096	"((( DSTSmalltalkTypesTest run: #testArrayOfShort04096 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort04096 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort04096 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort04096 )))"	| sz n to ro |	sz := 4096.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort08192	"((( DSTSmalltalkTypesTest run: #testArrayOfShort08192 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort08192 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort08192 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort08192 )))"	| sz n to ro |	sz := 8192.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort16384	"((( DSTSmalltalkTypesTest run: #testArrayOfShort16384 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort16384 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort16384 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort16384 )))"	| sz n to ro |	sz := 16384.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort32768	"((( DSTSmalltalkTypesTest run: #testArrayOfShort32768 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort32768 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort32768 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort32768 )))"	| sz n to ro |	sz := 32768.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body><body package="Opentalk-IIOP-Tests">testArrayOfShort65536	"((( DSTSmalltalkTypesTest run: #testArrayOfShort65536 )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort65536 )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort65536 )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort65536 )))"	| sz n to ro |	sz := 65536.	n := ( 2 raisedTo: 15 ) negated.	to := OrderedCollection new: sz.	to add: 0.	sz timesRepeat:		[	to add: n.			n := n + 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body></methods><methods><class-id>Opentalk.StandardTypesTest</class-id> <category>tests - any</category><body package="Opentalk-IIOP-Tests">testAnyDouble"	((( SmalltalkTypesTest run: #testAnyDouble)))	((( SmalltalkTypesTest debug: #testAnyDouble )))	((( SmalltalkRemoteTypesTest run: #testAnyDouble )))	((( SmalltalkRemoteTypesTest debug: #testAnyDouble )))"	| to ro |	OrderedCollection new		add: 0.0d;		add: 1.0d;		add: -1.0d;		add: Double pi;		add: Double pi negated;		do: [ :x |			to := x.				ro := resource echoAny: to.			self deny: ro _isRemote.			self assert: ro = to description: to printString ].</body><body package="Opentalk-IIOP-Tests">testAnyEnum"	((( SmalltalkTypesTest run: #testAnyEnum )))	((( SmalltalkTypesTest debug: #testAnyEnum )))	((( SmalltalkRemoteTypesTest run: #testAnyEnum )))	((( SmalltalkRemoteTypesTest debug: #testAnyEnum )))"	| to ro |	to := CORBAConstants at: #'::Testing::StandardTypesResource::WIND_INSTRUMENTS::oboe'.	ro := resource echoAny: to.	self assert: ro type = to type.	self assert: ro value = to value.	self assert: ro name = to name</body><body package="Opentalk-IIOP-Tests">testAnyFixed"	((( SmalltalkTypesTest run: #testAnyFixed)))	((( SmalltalkTypesTest debug: #testAnyFixed )))	((( SmalltalkRemoteTypesTest run: #testAnyFixed )))	((( SmalltalkRemoteTypesTest debug: #testAnyFixed )))"	| to ro |	OrderedCollection new		add: 0.0s;		add: 1.0s;		add: -1.0s;		add: (Double pi asFixedPoint: 14);		add: (Double pi asFixedPoint: 14) negated;		add: (10 ** -31 asFixedPoint: 31);		add: (10 ** -31 asFixedPoint: 31) negated;		add: (10 ** 30 asFixedPoint: 0);		add: (10 ** 30 asFixedPoint: 0) negated;		add: (Double pi asFixedPoint: 14);		do: [ :x |			to := x.				ro := resource echoAny: to.			self deny: ro _isRemote.			self assert: ro = to truncatedToScale description: to printString ].	"excessive integral places should yield a marshaling error"	self assert: (		[	resource echoAny: (10 ** 31 asFixedPoint: 0). false		] on: Error do: [ :ex | ex getSignal nameMessage = #MARSHAL ]).	"excessive decimal places should get rounded off"	to := 10 ** -32 * 55 asFixedPoint: 32.	ro := resource echoAny: to.	self assert: ro = (to asFixedPoint: 31) roundedToScale</body><body package="Opentalk-IIOP-Tests">testAnyLongDouble"	((( SmalltalkTypesTest run: #testAnyLongDouble)))	((( SmalltalkTypesTest debug: #testAnyLongDouble )))	((( SmalltalkRemoteTypesTest run: #testAnyLongDouble )))	((( SmalltalkRemoteTypesTest debug: #testAnyLongDouble )))"	| to ro |	to := 1.2333d asLongDouble.	ro := resource echoAny: to.	self deny: ro _isRemote.	self assert: (ro isKindOf: LongDouble).	self assert: ro = to.</body><body package="Opentalk-IIOP-Tests">testAnyLongLong"	((( SmalltalkTypesTest run: #testAnyLongLong)))	((( SmalltalkTypesTest debug: #testAnyLongLong )))	((( SmalltalkRemoteTypesTest run: #testAnyLongLong )))	((( SmalltalkRemoteTypesTest debug: #testAnyLongLong )))"	| to ro |	to := (2 raisedTo: 63) - 1.	ro := resource echoAny: to.	self deny: ro _isRemote.	self assert: ro = to.	to := (2 raisedTo: 63) negated.	ro := resource echoAny: to.	self deny: ro _isRemote.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testAnyStruct"	((( SmalltalkTypesTest run: #testAnyStruct )))	((( SmalltalkTypesTest debug: #testAnyStruct )))	((( SmalltalkRemoteTypesTest run: #testAnyStruct )))	((( SmalltalkRemoteTypesTest debug: #testAnyStruct )))"	| dict to ro mo |	dict := ( Dictionary new )			add: #aSymbol -&gt; #'_hj78';			add: #aSet -&gt; ( ( Set new: 3 ) add: 345; add: '+=_-)*'; add: $4; yourself );			add: #aString -&gt; 'cvhIu78';			add: #aLong -&gt; ( 2 raisedTo: 29 );			add: #aDate -&gt; ( Date today );			add: #aTime -&gt; ( Time now );			add: #aTimestamp -&gt; (Timestamp now );			yourself.	mo := DSTORBObject lookup: '::Testing::StandardTypesResource::TestStruct'.	dict overrideCORBAType: mo.	to := dict.	ro := resource echoAny: to.	self deny: ro _isRemote.	self assert: ro size = to size.	self assert: ( to at: #aSymbol ) = ( ro at: #aSymbol ).	self assert: ( to at: #aSet ) size = ( ro at: #aSet ) size.	self assert: ( to at: #aString ) = ( ro at: #aString ).	self assert: ( to at: #aLong ) = ( ro at: #aLong ).	self assert: ( to at: #aDate ) = ( ro at: #aDate ).	self assert: ( to at: #aTime ) = ( ro at: #aTime ).	self assert: ( ro at: #aTimestamp ) = ( ro at: #aTimestamp ).</body><body package="Opentalk-IIOP-Tests">testAnyULongLong"	((( SmalltalkTypesTest run: #testAnyULongLong)))	((( SmalltalkTypesTest debug: #testAnyULongLong )))	((( SmalltalkRemoteTypesTest run: #testAnyULongLong )))	((( SmalltalkRemoteTypesTest debug: #testAnyULongLong )))"	| to ro |	to := (2 raisedTo: 64) - 1.	ro := resource echoAny: to.	self deny: ro _isRemote.	self assert: ro = to</body><body package="Opentalk-IIOP-Tests">testAnyUnion"	((( SmalltalkTypesTest run: #testAnyUnion )))	((( SmalltalkTypesTest debug: #testAnyUnion )))	((( SmalltalkRemoteTypesTest run: #testAnyUnion )))	((( SmalltalkRemoteTypesTest debug: #testAnyUnion )))"	| cases mo |	cases := (Dictionary new )			add: 1 -&gt; #'_hj78';			add: 2 -&gt; ( ( Set new: 3 ) add: 345; add: '+=_-)*'; add: $4; yourself );			add: 3 -&gt; 'cvhIu78';			add: 4 -&gt; ( 2 raisedTo: 29 );			add: 5 -&gt; ( Date today );			add: 6 -&gt; ( Time now );			add: 7 -&gt; (Timestamp now );			yourself. 	mo := DSTORBObject lookup: '::Testing::StandardTypesResource::TestUnion2'.	cases keysAndValuesDo: [ :d :v || to ro |		to := Union discriminator: d value: v.		to overrideCORBAType: mo.		ro := resource echoAny: to.		self deny: ro _isRemote.		self assert: ( ( to value  = ro value ) or: [ ( to value - ro value ) isEmpty ] )	]</body><body package="Opentalk-IIOP-Tests">testAnyWChar"	((( SmalltalkTypesTest run: #testAnyWChar)))	((( SmalltalkTypesTest debug: #testAnyWChar )))	((( SmalltalkRemoteTypesTest run: #testAnyWChar )))	((( SmalltalkRemoteTypesTest debug: #testAnyWChar )))"	| to ro |	to := 256 asCharacter.	ro := resource echoAny: to.	self deny: ro _isRemote.	self assert: ro = to.</body><body package="Opentalk-IIOP-Tests">testAnyWString"	((( SmalltalkTypesTest run: #testAnyWString)))	((( SmalltalkTypesTest debug: #testAnyWString )))	((( SmalltalkRemoteTypesTest run: #testAnyWString )))	((( SmalltalkRemoteTypesTest debug: #testAnyWString )))"	| to ro |	to := String with: 256 asCharacter.	ro := resource echoAny: to.	self deny: ro _isRemote.	self assert: ro = to.</body></methods><methods><class-id>Opentalk.StandardTypesTest</class-id> <category>tests - constructed types</category><body package="Opentalk-IIOP-Tests">testEnum	"((( SmalltalkTypesTest run: #testEnum )))"	"((( SmalltalkTypesTest debug: #testEnum )))"	"((( SmalltalkRemoteTypesTest run: #testEnum )))"	"((( SmalltalkRemoteTypesTest debug: #testEnum )))"	| to ro |	to := CORBAConstants at: #'::Testing::StandardTypesResource::WIND_INSTRUMENTS::oboe'.	ro := resource echoEnum: to.	self assert: ro type = to type.	self assert: ro value = to value.	self assert: ro name = to name.	self assert: to = ro.	self assert: to class == Enumerator</body><body package="Opentalk-IIOP-Tests">testTestStruct	"((( DSTSmalltalkTypesTest run: #testTestStruct )))"	"((( DSTSmalltalkTypesTest debug: #testTestStruct )))"	"((( DSTSmalltalkRemoteTypesTest run: #testTestStruct )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testTestStruct )))"	| dict to ro |	dict := ( Dictionary new )			add: #aSymbol -&gt; #'_hj78';			add: #aSet -&gt; ( ( Set new: 3 ) add: 345; add: '+=_-)*'; add: $4; yourself );			add: #aString -&gt; 'cvhIu78';			add: #aLong -&gt; ( 2 raisedTo: 29 );			add: #aDate -&gt; ( Date today );			add: #aTime -&gt; ( Time now );			add: #aTimestamp -&gt; (Timestamp now );			yourself. 	to := dict.	ro := resource echoTestStruct: to.	self assert: ro size = to size.	self assert: ( to at: #aSymbol ) = ( ro at: #aSymbol ).	self assert: ( to at: #aSet ) size = ( ro at: #aSet ) size.	self assert: ( to at: #aString ) = ( ro at: #aString ).	self assert: ( to at: #aLong ) = ( ro at: #aLong ).	self assert: ( to at: #aDate ) = ( ro at: #aDate ).	self assert: ( to at: #aTime ) = ( ro at: #aTime ).	self assert: ( to at: #aTimestamp ) = ( ro at: #aTimestamp ).</body><body package="Opentalk-IIOP-Tests">testTestStructOfUnion	"((( DSTSmalltalkTypesTest run: #testTestStructOfUnion )))"	"((( DSTSmalltalkTypesTest debug: #testTestStructOfUnion )))"	"((( DSTSmalltalkRemoteTypesTest run: #testTestStructOfUnion )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testTestStructOfUnion )))"	| oc to ro |	oc := ( OrderedCollection new )			add: #'_hj78';			add: ( ( Set new: 3 ) add: 345; add: '+=_-)*'; add: $4; yourself );			add: 'cvhIu78';			add: ( 2 raisedTo: 29 );			add: ( Date today );			add: ( Time now );			add: (Timestamp now );			yourself. 	oc do: [ :x |		to := Dictionary new add: #aTestUnion -&gt; x; yourself.		ro := resource echoTestStructOfUnion: to.		self assert: ( ( ( to at: #aTestUnion ) = ( ro at: #aTestUnion ) )					or: [ ( to at: #aTestUnion ) size = ( ro at: #aTestUnion ) size ] )	]</body><body package="Opentalk-IIOP-Tests">testTestUnion	"((( DSTSmalltalkTypesTest run: #testTestUnion )))"	"((( DSTSmalltalkTypesTest debug: #testTestUnion )))"	"((( DSTSmalltalkRemoteTypesTest run: #testTestUnion )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testTestUnion )))"	| oc to ro |	oc := ( OrderedCollection new )			add: #'_hj78';			add: ( ( Set new: 3 ) add: 345; add: '+=_-)*'; add: $4; yourself );			add: 'cvhIu78';			add: ( 2 raisedTo: 29 );			add: ( Date today );			add: ( Time now );			add: (Timestamp now );			yourself. 	oc do: [ :x |		to := x.		ro := resource echoTestUnion: to.		self assert: ( to = ro or: [ ro _isRemote or: [ to size = ro size ] ] )	]</body></methods><methods><class-id>Opentalk.StandardTypesTest</class-id> <category>tests - template types</category><body package="Opentalk-IIOP-Tests">testFixed"The fixed is declared as fixed&lt;10,5&gt; so we're testing the behavior of the limiting cases as well	((( SmalltalkTypesTest run: #testFixed )))	((( SmalltalkTypesTest debug: #testFixed )))	((( SmalltalkRemoteTypesTest run: #testFixed )))	((( SmalltalkRemoteTypesTest debug: #testFixed )))"	| to ro |	#(5 5.5s 55555.55555s 5.555555s 55555.555555s) do: [ :n |		to := n.		ro := resource echoFixed: to.		self assert: (ro isKindOf: FixedPoint).		self assert: ro = (to asFixedPoint: 5) roundedToScale].	self assert: (		[	resource echoFixed: 555555.			false		] on: Error do: [ :ex |			ex getSignal = (CORBAConstants standardExceptions at: #MARSHAL) errorSignal ])</body><body package="Opentalk-IIOP-Tests">testString"	((( SmalltalkTypesTest run: #testString )))	((( SmalltalkTypesTest debug: #testString )))	((( SmalltalkRemoteTypesTest run: #testString )))	((( SmalltalkRemoteTypesTest debug: #testString )))"	| to ro |	to := (ByteArray withAll: (0 to: 255)) asString. "full ISO8859-1"	ro := resource echoString: to.	self assert: (ro isKindOf: ByteString).	self assert: ro = to.</body><body package="Opentalk-IIOP-Tests">testWString"	((( SmalltalkTypesTest run: #testWString )))	((( SmalltalkTypesTest debug: #testWString )))	((( SmalltalkRemoteTypesTest run: #testWString )))	((( SmalltalkRemoteTypesTest debug: #testWString )))"	| to ro |	to := (0 to: 65535)		inject: (TwoByteString new: 65536)		into: [ :s :i | s at: i + 1 put: i asCharacter; yourself ].	ro := resource echoWString: to.	self assert: (ro isKindOf: TwoByteString).	self assert: ro = to.</body></methods><methods><class-id>Opentalk.StandardTypesTest</class-id> <category>tests - basic types</category><body package="Opentalk-IIOP-Tests">testDoubleLog"	((( SmalltalkTypesTest run: #testDoubleLog )))	((( SmalltalkTypesTest debug: #testDoubleLog )))	((( SmalltalkRemoteTypesTest run: #testDoubleLog )))	((( SmalltalkRemoteTypesTest debug: #testDoubleLog )))"	| to ro |	to := 5.5d.	ro := resource doubleLog: to.	self assert: (ro isKindOf: Double).	self assert: ro = to log</body><body package="Opentalk-IIOP-Tests">testFloatLog"	((( SmalltalkTypesTest run: #testFloatLog )))	((( SmalltalkTypesTest debug: #testFloatLog )))	((( SmalltalkRemoteTypesTest run: #testFloatLog )))	((( SmalltalkRemoteTypesTest debug: #testFloatLog )))"	| to ro |	to := 5.5.	ro := resource floatLog: to.	self assert: (ro isKindOf: Float).	self assert: ro = to log</body></methods><methods><class-id>Opentalk.StandardTypesTest</class-id> <category>tests - array</category><body package="Opentalk-IIOP-Tests">testArrayOfShort	"((( DSTSmalltalkTypesTest run: #testArrayOfShort )))"	"((( DSTSmalltalkTypesTest debug: #testArrayOfShort )))"	"((( DSTSmalltalkRemoteTypesTest run: #testArrayOfShort )))"	"((( DSTSmalltalkRemoteTypesTest debug: #testArrayOfShort )))"	| to ro |	to := OrderedCollection new.	to add: 0.	0 to: 15 do:		[ :x |	to add: ( 2 raisedTo: x ) negated.				to add: ( 2 raisedTo: x ) - 1		].	to := to asArray.	ro := resource echoArrayOfShort: to.	self assert: to = ro.</body></methods><methods><class-id>Opentalk.StandardTypesTest</class-id> <category>setup/teardown</category><body package="Opentalk-IIOP-Tests">setUp	super setUp.	resource := resource asRemoteObject</body></methods><methods><class-id>Opentalk.StandardTypesTest class</class-id> <category>accessing</category><body package="Opentalk-IIOP-Tests">resources	^Array with: StandardTypesResource</body></methods><methods><class-id>Opentalk.GIOP1_0Test</class-id> <category>accessing</category><body package="Opentalk-IIOP-Tests">minorVersion	^0</body></methods><methods><class-id>Opentalk.IIOP1_0Test</class-id> <category>accessing</category><body package="Opentalk-IIOP-Tests">minorVersion	^0</body></methods><methods><class-id>Opentalk.GIOP1_1Test</class-id> <category>accessing</category><body package="Opentalk-IIOP-Tests">minorVersion	^1</body></methods><methods><class-id>Opentalk.BasicIIOPTest</class-id> <category>attributes</category><body package="Opentalk-IIOP-Tests">keywords	^#(basic iiop)</body></methods><methods><class-id>Opentalk.BasicIIOPTest</class-id> <category>tests</category><body package="Opentalk-IIOP-Tests">newBrokerAt: aPort	^BasicRequestBroker newCdrIiopAtPort: aPort</body><body package="Opentalk-IIOP-Tests">testBasicRemoteMessaging"	(((BasicIIOP1_2Test debug: #testBasicRemoteMessaging)))	(((BasicIIOP1_1Test debug: #testBasicRemoteMessaging)))	(((BasicIIOP1_0Test debug: #testBasicRemoteMessaging)))"	| broker stream proxy oid |	broker := self newBrokerAt: 4242.	debugging ifTrue: [ broker passErrors ].	broker start.	Log ifNotNil: [ broker sendAllEventsTo: Log ].	[	| result |		oid := 'stream' asByteArray.		stream := 'Hello World' asByteArray readStream.		broker objectAdaptor export: stream oidBytes: oid.		proxy := RemoteObject				newOn: (IIOPObjRef						newOn: (IPSocketAddress hostName: 'localhost' port: 4242)						oid: oid						interfaceId: 'IDL:SmalltalkTypes/Stream:1.0')				requestBroker: broker.		result := proxy next: 5.		self assert: result = 'Hello' asByteArray	] ensure: [ broker stop ]</body><body package="Opentalk-IIOP-Tests">testBasicSystemExceptions"	(((BasicIIOP1_2Test debug: #testBasicSystemExceptions)))	(((BasicIIOP1_1Test debug: #testBasicSystemExceptions)))	(((BasicIIOP1_0Test debug: #testBasicSystemExceptions)))"	| broker stream proxy oid |	broker := self newBrokerAt: 4242.	debugging ifTrue: [ broker passErrors ].	broker start.	Log ifNotNil: [ broker sendAllEventsTo: Log ].	[	| result |		oid := 'stream' asByteArray.		stream := '' asByteArray readStream.		broker objectAdaptor export: stream oidBytes: oid.		proxy := RemoteObject				newOn: (IIOPObjRef						newOn: (IPSocketAddress hostName: 'localhost' port: 4242)						oid: oid						interfaceId: 'IDL:SmalltalkTypes/Stream:1.0')				requestBroker: broker.		self should: [ result := proxy next: 5 ] raise: SystemException	] ensure: [ broker stop ]</body><body package="Opentalk-IIOP-Tests">testBasicUserExceptions"	(((BasicIIOP1_2Test debug: #testBasicUserExceptions)))	(((BasicIIOP1_1Test debug: #testBasicUserExceptions)))	(((BasicIIOP1_0Test debug: #testBasicUserExceptions)))"	| broker proxy |	broker := self newBrokerAt: 4242.	debugging ifTrue: [ broker passErrors ].	broker start.	Log ifNotNil: [ broker sendAllEventsTo: Log ].	[	broker nameService.		proxy := broker nameServiceAt: (IPSocketAddress hostName: 'localhost' port: 4242).		self should: [ proxy contextResolve: 'A' asDSTName ] raise: Error	] ensure: [ broker stop ]</body><body package="Opentalk-IIOP-Tests">testBrokerSetup"	(((BasicIIOP1_2Test debug: #testBrokerSetup)))	(((BasicIIOP1_1Test debug: #testBrokerSetup)))	(((BasicIIOP1_0Test debug: #testBrokerSetup)))"	| broker configuration |	broker := self newBrokerAt: 4242.	configuration := broker configuration.	self assert: configuration class = StandardBrokerConfiguration.	configuration := configuration adaptor.	self assert: configuration class = ConnectionAdaptorConfiguration.	configuration := configuration  transport.	self assert:  configuration class = IIOPTransportConfiguration.	configuration := configuration marshaler.	self assert: configuration class = CDRMarshalerConfiguration.		broker start.	broker stop</body><body package="Opentalk-IIOP-Tests">testLocateRequest"	(((BasicIIOP1_2Test debug: #testLocateRequest)))	(((BasicIIOP1_1Test debug: #testLocateRequest)))	(((BasicIIOP1_0Test debug: #testLocateRequest)))"	| broker |	broker := self newBrokerAt: 4242.	debugging ifTrue: [broker passErrors].	broker start.	Log ifNotNil: [ broker sendAllEventsTo: Log ].	[	| result stream oid proxy foid fproxy |		"Test locating nonexistent"		oid := 'stream' asByteArray.		proxy := broker				remoteObjectAt: (IPSocketAddress hostName: 'localhost' port: 4242)				oid: oid				interfaceId: 'IDL:SmalltalkTypes/Stream:1.0'.		result := proxy _locate.		self assert: result isNil.		"Test locating existent"		stream := 'Hello World' asByteArray readStream.		broker objectAdaptor export: stream oidBytes: oid.		result := proxy _locate.		self assert: result == proxy.		self assert: (result next: 5) = (stream reset; next: 5).		"Test location forwarding"		foid := 'forwarder' asByteArray.		broker objectAdaptor export: proxy oidBytes: foid.		fproxy := broker 				remoteObjectAt: (IPSocketAddress hostName: 'localhost' port: 4242)				oid: foid				interfaceId: 'IDL:SmalltalkTypes/Stream:1.0'.		result := fproxy _locate.		self assert: result _isRemote.		self assert: result _objRef oidBytes = oid.		stream reset.		self assert: (result next: 5) = (stream reset; next: 5).	] ensure: [ broker stop ]</body><body package="Opentalk-IIOP-Tests">testSampleComputeService"	(((BasicIIOP1_2Test debug: #testSampleComputeService)))	(((BasicIIOP1_1Test debug: #testSampleComputeService)))	(((BasicIIOP1_0Test debug: #testSampleComputeService)))"	| broker service proxy oid |	broker := self newBrokerAt: 4242.	debugging ifTrue: [ broker passErrors ].	broker start.	Log ifNotNil: [ broker sendAllEventsTo: Log ].	[	oid := 'sample' asByteArray.		service := SampleComputeService new.		broker objectAdaptor export: service oidBytes: oid.		proxy := broker				remoteObjectAt: (IPSocketAddress hostName: 'localhost' port: 4242)				oid: oid				interfaceId: 'IDL:DSTSampleComputeService/DSTSampleComputeServiceInterface:1.0'.		self assert: ( proxy carmichaelNumber: 2465 ).		self assert: ( proxy carmichaelNumber: 6601 ).		self assert: ( proxy carmichaelNumber: 6503 ) not.		self assert: ( proxy nthCarmichaelNumber: 3 ) == 1729.		self assert: ( proxy nthCarmichaelNumber: 5 ) == 2821.		self assert: ( proxy nthCalculativeFibonacciNumber: 7 ) = 13.		self assert: ( proxy nthIterativeFibonacciNumber: 7 ) = 13.		self assert: ( proxy nthRecursiveFibonacciNumber: 7 ) = 13.		self assert: ( proxy divisorFor: ( 103 * 281 ) between: 2 and: 102 ) isNil.		self assert: ( proxy divisorFor: ( 103 * 281 ) between: 99 and: 103 ) = 103.		self assert: ( proxy divisorFor: ( 103 * 281 ) between: 103 and: 280 ) = 103.		self assert: ( proxy exhaustivePrime: 251 ).		self assert: ( proxy exhaustivePrime: 143 ) not.		self assert: ( proxy fermatPrime: 239 ).		self assert: ( proxy fermatPrime: 243 ) not.		self assert: ( proxy fermatPrime: 263 withTrials: 7 ).		self assert: ( proxy nthExhaustivePrime: 40 ) = 173.		self assert: ( proxy nthFermatPrime: 50 ) = 229.  	] ensure: [ broker stop ]</body><body package="Opentalk-IIOP-Tests">testTransparentLocationForward"	(((BasicIIOP1_2Test debug: #testTransparentLocationForward)))	(((BasicIIOP1_1Test debug: #testTransparentLocationForward)))	(((BasicIIOP1_0Test debug: #testTransparentLocationForward)))"	| broker |	broker := self newBrokerAt: 4242.	debugging ifTrue: [ broker passErrors ].	broker start.	Log ifNotNil: [ broker sendAllEventsTo: Log ].	[	| result stream proxy oid fproxy foid|		oid := 'stream' asByteArray.		stream := 'Hello World' asByteArray readStream.		broker objectAdaptor export: stream oidBytes: oid.		proxy := broker				remoteObjectAt: (IPSocketAddress hostName: 'localhost' port: 4242)				oid: oid				interfaceId: 'IDL:SmalltalkTypes/Stream:1.0'.		foid := 'forwarder' asByteArray.		broker objectAdaptor export: proxy oidBytes: foid.		fproxy := broker				remoteObjectAt: (IPSocketAddress hostName: 'localhost' port: 4242)				oid: foid				interfaceId: 'IDL:SmalltalkTypes/Stream:1.0'.		result := fproxy next: 5.		self assert: result = (stream reset; next: 5)	] ensure: [ broker stop ]</body></methods><methods><class-id>Opentalk.BasicIIOP1_2Test</class-id> <category>tests</category><body package="Opentalk-IIOP-Tests">newBrokerAt: aPort	^(BrokerConfiguration standard		adaptor: (ConnectionAdaptorConfiguration new				isBiDirectional: false;				transport: (TransportConfiguration iiop						minorVersion: 2;						marshaler: (MarshalerConfiguration cdr));				soReuseAddr: true)	)	newAtPort: aPort</body></methods><methods><class-id>Opentalk.BasicIIOP1_1Test</class-id> <category>tests</category><body package="Opentalk-IIOP-Tests">newBrokerAt: aPort	^(BrokerConfiguration standard		adaptor: (ConnectionAdaptorConfiguration new				isBiDirectional: false;				transport: (TransportConfiguration iiop						minorVersion: 1;						marshaler: (MarshalerConfiguration cdr));				soReuseAddr: true)	)	newAtPort: aPort</body></methods><methods><class-id>Opentalk.SampleComputeService</class-id> <category>utility</category><body package="Opentalk-IIOP-Tests">base: base exponent: exponent modulo:modulo	| t |		( exponent == 0 )		ifTrue:	[ ^1 ].	^( exponent even )		ifTrue:	[	t := self base: base exponent: ( exponent / 2 ) modulo: modulo.					( t * t ) \\ modulo				]		ifFalse:	[	t := self base: base exponent: ( exponent - 1 ) modulo: modulo.					( base * t ) \\ modulo				]</body><body package="Opentalk-IIOP-Tests">randomIntegerLessThan: aPositiveInteger	^( self random next * aPositiveInteger ) truncated</body></methods><methods><class-id>Opentalk.SampleComputeService</class-id> <category>computing - primality tests</category><body package="Opentalk-IIOP-Tests">divisorFor: aPositiveInteger1 between: aPositiveInteger2 and: aPositiveInteger3	"... a toy utility for spreading the search for divisors over several computation servers."	aPositiveInteger2 to: aPositiveInteger3 do: 		[ :d |  ( 0 == ( aPositiveInteger1 \\ d  ) ) 			ifTrue: [ ^d ] ].	^nil</body><body package="Opentalk-IIOP-Tests">exhaustivePrime: aPositiveInteger	"... the expensive primality test."	( aPositiveInteger &lt; 2 )		 ifTrue: [ ^false ].	2 to: ( aPositiveInteger sqrt rounded ) do: 		[ :d |  ( 0 == ( aPositiveInteger \\ d  ) ) 			ifTrue: [ ^false ] ].	^true</body><body package="Opentalk-IIOP-Tests">fermatPrime: aPositiveInteger	"Do not invoke this method to test for primality using the Fermat test.  Use 'fermatPrime:withTrials:'."	| testNumber expmod |	testNumber := self randomIntegerLessThan: aPositiveInteger.	expmod := self 				base: testNumber				exponent: aPositiveInteger 				modulo: aPositiveInteger.	^testNumber = expmod</body><body package="Opentalk-IIOP-Tests">fermatPrime: aPositiveInteger1 withTrials: aPositiveInteger2	"Increasing the number of trials increases the reliability of the Fermat test for primality.  One pass gives better than 50% odds that the number tested is prime; two passes gives better than 75% odds; and so on."	"((( DSTSampleComputeService new fermatPrime: 101 withTrials: 11 )))"		| number trials |	( aPositiveInteger1 == 1 )		ifTrue:	[ ^false ].	number := aPositiveInteger1.	trials := aPositiveInteger2.	( trials == 0 )		ifTrue:	[ ^true ].	^( self fermatPrime: number )		ifTrue:	[ self fermatPrime: number withTrials: ( trials - 1 ) ]		ifFalse:	[ false ]</body><body package="Opentalk-IIOP-Tests">nthExhaustivePrime: aPositiveInteger	"Answers the nth prime number."	| s n p |		s := n := p := 0.	[ n == aPositiveInteger ]		whileFalse:			[	s := s + 1.				( self exhaustivePrime: s )					ifTrue:	[	n := n + 1.								p := s.							]			].	^p</body><body package="Opentalk-IIOP-Tests">nthFermatPrime: aPositiveInteger	"... correctly answers the nth prime number, until it reaches the first Carmichael number."	"... some non-primes, know as Carmichael numbers, fool the Fermat test."	| s n p |	s := n := p := 0.	[ n == aPositiveInteger ]		whileFalse:			[	s := s + 1.				( self fermatPrime: s withTrials: 11 )					ifTrue:	[	n := n + 1.								p := s.							]			].	^p</body></methods><methods><class-id>Opentalk.SampleComputeService</class-id> <category>computing - carmichael numbers</category><body package="Opentalk-IIOP-Tests">carmichaelNumber: aPositiveInteger	"Carmichael numbers are non-primes that fool the Fermat test."	^( self fermatPrime: aPositiveInteger withTrials: 11 )		and: [ ( self exhaustivePrime: aPositiveInteger ) not ]</body><body package="Opentalk-IIOP-Tests">nthCarmichaelNumber: aPositiveInteger	"Answers the nth Carmichael number."	"((( DSTSampleComputeService new nthCarmichaelNumber: 5 )))"	| s n p |		s := n := p := 0.	[ n == aPositiveInteger ]		whileFalse:			[	s := s + 1.				( self carmichaelNumber: s )					ifTrue:	[	n := n + 1.								p := s.							]			].	^p</body></methods><methods><class-id>Opentalk.SampleComputeService</class-id> <category>repository</category><body package="Opentalk-IIOP-Tests">CORBAName	"Answer the name of the receiver's CORBA interface in the IDL repository."	"Completion of the exercise in the DST ADG will result in a method like this one."	^#'::DSTSampleComputeService::DSTSampleComputeServiceInterface'</body><body package="Opentalk-IIOP-Tests">abstractClassId0	"Answer the abstract class id of the receiver."	"Completion of the exercise in the DST ADG will result in a method like this one."	^'c815c088-4901-0000-02d8-2421ae000000' asUUID</body></methods><methods><class-id>Opentalk.SampleComputeService</class-id> <category>computing - documentation</category><body package="Opentalk-IIOP-Tests">slowComputationWith: aPositiveInteger1 and: aPositiveInteger2 	"... finds the first Carmichael number detected between the two positive integers supplied as arguments.  Carmichael numbers are non-primes that deceive the Fermat test for primality.  The IDL for this function places some limitations on its remote invocation.  Any argument over (2^32)-1 will exceed the range of an unsigned long, and any returned result over (2^64)-1 will exceed the range of an unsigned long long.  Futhermore, when invoking this or any other potentially long-running method remotely, care must be taken either not to exceed the IIOP message and receive timeouts, or to adjust those timeouts, now set to 5 minutes and 10 minutes respectively.  Also note that the implementation returns 0 if no Carmichael number is found in the specified range.  If you wished the return value to be a 'nil' in that case, in the IDL you would have to specify the return type using the UnssgnedLongLongOrNil union shown in 'DSTRepository&gt;&gt;DSTSampleComputeService'.  All of the examples below should have a running time well below the timeouts.  The last example below has a running time about ten times greater than the first."	"(((	| s |		s := ORBObject namingService contextResolve: DSTSampleComputeService serviceName.		s slowComputationWith: 5100000 and: 5200000.		s slowComputationWith: 4770000 and: 4910000.		s slowComputationWith: 3830000 and: 4340000."	aPositiveInteger1 to: aPositiveInteger2 do:		[ :n | ( self carmichaelNumber: n ) ifTrue: [ ^n ] ].	^0</body></methods><methods><class-id>Opentalk.SampleComputeService</class-id> <category>initialize-release</category><body package="Opentalk-IIOP-Tests">initialize	random := MinimumStandardRandom new.	computeServers := OrderedCollection with: self.	self registerInstance</body><body package="Opentalk-IIOP-Tests">registerInstance	"Register instance with lifecycle service."	"DSTObjRef registerObject: self"</body><body package="Opentalk-IIOP-Tests">release	self unregisterInstance.	super release</body><body package="Opentalk-IIOP-Tests">unregisterInstance	"Remove the reference to self from the lifecycle service."	"DSTObjRef unRegisterObject: self"</body></methods><methods><class-id>Opentalk.SampleComputeService</class-id> <category>computing - fibonacci numbers</category><body package="Opentalk-IIOP-Tests">nthCalculativeFibonacciNumber: aPositiveInteger	"... *usually* answers the nth Fibonacci number."	"... is sometimes one off."	"... trades on the relationship between the Fibonacci numbers and the golden ratio."	"... overflows the range of a Double with fairly small values of aPositiveInteger, that is, any over 604."	| f n |	f := 5 sqrt asDouble.	n := aPositiveInteger asDouble.	^( ( ( ( 1.0 asDouble + f ) ** n ) - ( ( 1.0 asDouble - f ) ** n ) )				/ ( ( 2.0 asDouble ** n ) * f ) ) rounded</body><body package="Opentalk-IIOP-Tests">nthIterativeFibonacciNumber: aPositiveInteger	"... answers the nth Fibonacci number, at comparatively small expense."	| n fa fb fc |	n := aPositiveInteger.	fa := 1.	fb := 0.	fc := 0.	[ n == 0 ]		whileFalse:			[	fc := fa + fb.				fb := fa.				fa := fc.				n := n - 1.			].	^fb</body><body package="Opentalk-IIOP-Tests">nthRecursiveFibonacciNumber: aPositiveInteger	"... answers the nth Fibonacci number."	"... begins to exceed remote request timeout limits with values of an Integer &gt; 30."	"... begins to take a very, very long time -- sure to exceed the message timeout limit -- with values of aPositiveInteger &gt; 40."		^( ( aPositiveInteger == 0 ) or: [ aPositiveInteger == 1 ] )			ifTrue:	[ aPositiveInteger ]			ifFalse:	[ ( self nthRecursiveFibonacciNumber: ( aPositiveInteger - 1 ) ) + 						( self nthRecursiveFibonacciNumber: ( aPositiveInteger - 2 ) ) ]</body></methods><methods><class-id>Opentalk.SampleComputeService</class-id> <category>accessing</category><body package="Opentalk-IIOP-Tests">random	^random</body></methods><methods><class-id>Opentalk.SampleComputeService class</class-id> <category>instance creation</category><body package="Opentalk-IIOP-Tests">new	^super new initialize</body></methods><methods><class-id>Opentalk.BasicIIOP1_0Test</class-id> <category>tests</category><body package="Opentalk-IIOP-Tests">newBrokerAt: aPort	^(BrokerConfiguration standard		adaptor: (ConnectionAdaptorConfiguration new				isBiDirectional: false;				transport: (TransportConfiguration iiop						minorVersion: 0;						marshaler: (MarshalerConfiguration cdr));				soReuseAddr: true)	)	newAtPort: aPort</body></methods><methods><class-id>Opentalk.IIOP1_2Test</class-id> <category>accessing</category><body package="Opentalk-IIOP-Tests">minorVersion	^2</body></methods><methods><class-id>Opentalk.SmalltalkTypesResource</class-id> <category>setup/teardown</category><body package="Opentalk-IIOP-Tests">asRemoteObject	^self remote</body><body package="Opentalk-IIOP-Tests">newBrokerAtPort: aPort	^(BrokerConfiguration standard		adaptor: (ConnectionAdaptorConfiguration new				isBiDirectional: false;				transport: (TransportConfiguration iiop						minorVersion: 2;						marshaler: (MarshalerConfiguration cdr));				soReuseAddr: true)	)	newAtPort: aPort</body><body package="Opentalk-IIOP-Tests">remote	^remote ifNil: [ | oid |		oid := #resource asByteArray.		broker objectAdaptor export: self oidBytes: oid.		broker passErrors.		remote := broker					remoteObjectAt: broker accessPoint					oid: oid					interfaceId: 'IDL:Testing/SmalltalkTypesResource:1.0'.		remote _objRef profile components: (Array with: CDRMarshaler defaultCodeSets).		remote ]</body><body package="Opentalk-IIOP-Tests">setUp	broker := self newBrokerAtPort: 4242.	Log ifNotNil: [ :log | broker sendAllEventsTo: log ].	broker start</body><body package="Opentalk-IIOP-Tests">tearDown	broker stop</body></methods><methods><class-id>Opentalk.SmalltalkTypesResource</class-id> <category>test api - SmalltalkTypes</category><body package="Opentalk-IIOP-Tests">echoAny: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">echoAssociation: anAssociation	^anAssociation</body><body package="Opentalk-IIOP-Tests">echoBag: aBag	^aBag</body><body package="Opentalk-IIOP-Tests">echoBooleanOrNil: aBooleanOrNil	^aBooleanOrNil</body><body package="Opentalk-IIOP-Tests">echoByteArray: aByteArray	^aByteArray</body><body package="Opentalk-IIOP-Tests">echoByteString: aByteString	^aByteString</body><body package="Opentalk-IIOP-Tests">echoCharacterOrNil: aCharacterOrNil	^aCharacterOrNil</body><body package="Opentalk-IIOP-Tests">echoColorValue: aColorValue	^aColorValue</body><body package="Opentalk-IIOP-Tests">echoDate: aDate	^aDate</body><body package="Opentalk-IIOP-Tests">echoDateOrNil: aDateOrNil	^aDateOrNil</body><body package="Opentalk-IIOP-Tests">echoDictionary: aDictionary	^aDictionary</body><body package="Opentalk-IIOP-Tests">echoDoubleOrNil: aDoubleOrNil	^aDoubleOrNil</body><body package="Opentalk-IIOP-Tests">echoFloatOrNil: aFloatOrNil	^aFloatOrNil</body><body package="Opentalk-IIOP-Tests">echoIdentityDictionary: anIdentityDictionary	^anIdentityDictionary</body><body package="Opentalk-IIOP-Tests">echoLongDoubleOrNil: aLongDoubleOrNil	^aLongDoubleOrNil</body><body package="Opentalk-IIOP-Tests">echoLongLongOrNil: aLongLongOrNil	^aLongLongOrNil</body><body package="Opentalk-IIOP-Tests">echoLongOrNil: aLongOrNil	^aLongOrNil</body><body package="Opentalk-IIOP-Tests">echoOrderedCollection: anOrderedCollection	^anOrderedCollection</body><body package="Opentalk-IIOP-Tests">echoPoint: aPoint	^aPoint</body><body package="Opentalk-IIOP-Tests">echoRectangle: aRectangle	^aRectangle</body><body package="Opentalk-IIOP-Tests">echoRun: aRun	^aRun</body><body package="Opentalk-IIOP-Tests">echoRunArray: aRunArray	^aRunArray</body><body package="Opentalk-IIOP-Tests">echoRuns: aRuns	^aRuns</body><body package="Opentalk-IIOP-Tests">echoSet: aSet	^aSet</body><body package="Opentalk-IIOP-Tests">echoShortOrNil: aShortOrNil	^aShortOrNil</body><body package="Opentalk-IIOP-Tests">echoStringOrNil: aStringOrNil	^aStringOrNil</body><body package="Opentalk-IIOP-Tests">echoStringsOrNil: aStringsOrNil	^aStringsOrNil</body><body package="Opentalk-IIOP-Tests">echoSymbol: aSymbol	^aSymbol</body><body package="Opentalk-IIOP-Tests">echoSymbolOrNil: aSymbolOrNil	^aSymbolOrNil</body><body package="Opentalk-IIOP-Tests">echoSymbolsOrNil: aSymbolsOrNil	^aSymbolsOrNil</body><body package="Opentalk-IIOP-Tests">echoTestStruct: aDictionary	^aDictionary</body><body package="Opentalk-IIOP-Tests">echoTestStructOfUnion: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">echoTestUnion: anObject	^anObject</body><body package="Opentalk-IIOP-Tests">echoText: aText	^aText</body><body package="Opentalk-IIOP-Tests">echoTime: aTime	^aTime</body><body package="Opentalk-IIOP-Tests">echoTimeOrNil: aTimeOrNil	^aTimeOrNil</body><body package="Opentalk-IIOP-Tests">echoTimestamp: aTimestamp	^aTimestamp</body><body package="Opentalk-IIOP-Tests">echoTimestampOrNil: aTimestampOrNil	^aTimestampOrNil</body><body package="Opentalk-IIOP-Tests">echoUnsignedLongLongOrNil: aUnsignedLongLongOrNil	^aUnsignedLongLongOrNil</body><body package="Opentalk-IIOP-Tests">echoUnsignedLongOrNil: aUnsignedLongOrNil	^aUnsignedLongOrNil</body><body package="Opentalk-IIOP-Tests">echoUnsignedShortOrNil: aUnsignedShortOrNil	^aUnsignedShortOrNil</body><body package="Opentalk-IIOP-Tests">echoWideCharacterOrNil: aWideCharacterOrNil	^aWideCharacterOrNil</body><body package="Opentalk-IIOP-Tests">echoWideStringOrNil: aWideStringOrNil	^aWideStringOrNil</body><body package="Opentalk-IIOP-Tests">echoWideStringsOrNil: aWideStringsOrNil	^aWideStringsOrNil</body></methods><methods><class-id>Opentalk.SmalltalkTypesResource</class-id> <category>repository</category><body package="Opentalk-IIOP-Tests">CORBAName	^#'::Testing::SmalltalkTypesResource'</body></methods><methods><class-id>Opentalk.SmalltalkTypesResource class</class-id> <category>repository</category><body package="Opentalk-IIOP-Tests">CORBAName	^#'::Testing::SmalltalkTypesResourceClass'</body></methods><methods><class-id>Opentalk.DSTRepository</class-id> <category>DEMO</category><body package="Opentalk-IIOP-Tests">// DSTSampleComputeService//// This snippet below all the IDL you need for the exercise in the current documentation.// Change both the uncommented module name below and the commented name above if you elect to use all the IDL provided below. ////module DSTSampleComputeService  {////	interface DSTSampleComputeServiceInterface {//		#pragma selector slowComputationWithAnd slowComputationWith:and://		unsigned long long slowComputationWithAnd ( in unsigned long a, in unsigned long b );//	};//};module DSTSampleComputeService  {	union UnsignedLongLongOrNil switch (boolean) {		case TRUE: unsigned long long ull;		case FALSE: Object nil;	};	interface DSTSampleComputeServiceInterface {		boolean carmichaelNumber ( in unsigned long long a );		unsigned long long nthCarmichaelNumber ( in unsigned short a );		#pragma selector slowComputationWithAnd slowComputationWith:and:		unsigned long long slowComputationWithAnd ( in unsigned long a, in unsigned long b );		unsigned long long nthCalculativeFibonacciNumber ( in unsigned short a );		unsigned long long nthIterativeFibonacciNumber ( in unsigned short a );		unsigned long long nthRecursiveFibonacciNumber ( in unsigned short a );		#pragma selector divisorForBewteenAnd divisorFor:between:and:		UnsignedLongLongOrNil divisorForBewteenAnd (				in unsigned long long a,				in unsigned long long b,				in unsigned long long c			);		boolean exhaustivePrime ( in unsigned long long a );		boolean fermatPrime ( in unsigned long long a );		#pragma selector fermatPrimeWithTrials fermatPrime:withTrials:		boolean fermatPrimeWithTrials ( in unsigned long long a, in unsigned short b );		unsigned long long nthExhaustivePrime ( in unsigned short a );		unsigned long long nthFermatPrime ( in unsigned short a );			};};</body></methods><methods><class-id>Opentalk.DSTRepository</class-id> <category>TEST</category><body package="Opentalk-IIOP-Tests">// Testing// This module defines the types and interfaces used to test marshaling.////module Testing {	// The types and interfaces used in support of remote SUNit testing.	interface RemoteTestResource {		boolean isAvailable ();		boolean isUnavailable ();		void setUp ();		void tearDown ();		void initialize ();	};	interface RemoteTestResourceClass {		boolean isAbstract ();		boolean isAvailable ();		boolean isUnavailable ();		void reset ();	};	interface StandardTypesResource : RemoteTestResource {		// basic type echos: integers, floats, chars, booleans		float floatLog (in float aFloat);		double doubleLog (in double aDouble);		char echoChar ( in char aChar);		wchar echoWChar ( in wchar aWChar );		// template type echos: sequences, strings, fixed		typedef fixed&lt;10,5&gt; Fixed105;		Fixed105 echoFixed ( in Fixed105 aFixed );		string echoString ( in string aString );		wstring echoWString ( in wstring aString );			// array echos		SmalltalkTypes::ArrayOfShort echoArrayOfShort ( in SmalltalkTypes::ArrayOfShort anArrayOfShort );		// any echos		any echoAny ( in any anAny );		// constructed type echos: structs, unions, enums		struct TestStruct {			SmalltalkTypes::Symbol aSymbol;			SmalltalkTypes::Set aSet;			string &lt;25&gt; aString;			long aLong;			SmalltalkTypes::Date aDate;			SmalltalkTypes::Time aTime;			SmalltalkTypes::Timestamp aTimestamp;		};		TestStruct echoTestStruct ( in TestStruct aTestStruct );		union TestUnion switch (short) {			case 1: SmalltalkTypes::Symbol aSymbol;			case 2: SmalltalkTypes::Set aSet;			case 3: string &lt;25&gt; aString;			case 4: long aLong;			case 5: SmalltalkTypes::Date aDate;			case 6: SmalltalkTypes::Time aTime;			case 7: SmalltalkTypes::Timestamp aTimestamp;		};		TestUnion echoTestUnion ( in TestUnion aTestUnion );		// This one enforces explicit case binding via Union		#pragma CLASS TestUnion2 Union		union TestUnion2 switch (short) {			case 1: SmalltalkTypes::Symbol aSymbol;			case 2: SmalltalkTypes::Set aSet;			case 3: string &lt;25&gt; aString;			case 4: long aLong;			case 5: SmalltalkTypes::Date aDate;			case 6: SmalltalkTypes::Time aTime;			case 7: SmalltalkTypes::Timestamp aTimestamp;		};		struct TestStructOfUnion {			TestUnion aTestUnion;		};		TestStructOfUnion echoTestStructOfUnion (in TestStructOfUnion aTestStructOfUnion );		enum WIND_INSTRUMENTS { oboe, recorder, clarinet, flute, french_horn, saxophone };		WIND_INSTRUMENTS echoEnum ( in WIND_INSTRUMENTS windInstrument );	};	interface StandardTypesResourceClass : RemoteTestResourceClass {		StandardTypesResource current ();	};	interface SmalltalkTypesResource : RemoteTestResource {		// smalltalk type echos		SmalltalkTypes::Symbol echoSymbol ( in SmalltalkTypes::Symbol aSymbol );		SmalltalkTypes::ByteArray echoByteArray ( in SmalltalkTypes::ByteArray aByteArray );		SmalltalkTypes::ByteString echoByteString ( in SmalltalkTypes::ByteString aByteString );		SmalltalkTypes::OrderedCollection echoOrderedCollection ( in SmalltalkTypes::OrderedCollection anOrderedCollection );		SmalltalkTypes::Set echoSet ( in SmalltalkTypes::Set aSet );		SmalltalkTypes::Bag echoBag ( in SmalltalkTypes::Bag aBag );		SmalltalkTypes::Association echoAssociation ( in SmalltalkTypes::Association anAssociation );		SmalltalkTypes::Dictionary echoDictionary ( in SmalltalkTypes::Dictionary aDictionary );		SmalltalkTypes::IdentityDictionary echoIdentityDictionary ( in SmalltalkTypes::IdentityDictionary anIdentityDictionary );		SmalltalkTypes::Point echoPoint ( in SmalltalkTypes::Point aPoint );		SmalltalkTypes::Rectangle echoRectangle ( in SmalltalkTypes::Rectangle aRectangle );		SmalltalkTypes::Date echoDate ( in SmalltalkTypes::Date aDate );		SmalltalkTypes::Time echoTime ( in SmalltalkTypes::Time aTime );		SmalltalkTypes::ColorValue echoColorValue ( in SmalltalkTypes::ColorValue aColorValue );		SmalltalkTypes::Runs echoRuns ( in SmalltalkTypes::Runs aRuns );		SmalltalkTypes::Run echoRun ( in SmalltalkTypes::Run aRun );		SmalltalkTypes::RunArray echoRunArray ( in SmalltalkTypes::RunArray aRunArray );		SmalltalkTypes::Text echoText ( in SmalltalkTypes::Text aText );		// x or nil echos		SmalltalkTypes::SymbolOrNil echoSymbolOrNil ( in SmalltalkTypes::SymbolOrNil aSymbolOrNil );		SmalltalkTypes::SymbolsOrNil echoSymbolsOrNil ( in SmalltalkTypes::SymbolsOrNil aSymbolsOrNil );		SmalltalkTypes::StringOrNil echoStringOrNil ( in SmalltalkTypes::StringOrNil aStringOrNil );		SmalltalkTypes::StringsOrNil echoStringsOrNil ( in SmalltalkTypes::StringsOrNil aStringsOrNil );		SmalltalkTypes::WideStringOrNil echoWideStringOrNil ( in SmalltalkTypes::WideStringOrNil aWideStringOrNil );		SmalltalkTypes::WideStringsOrNil echoWideStringsOrNil ( in SmalltalkTypes::WideStringsOrNil aWideStringsOrNil );		SmalltalkTypes::BooleanOrNil echoBooleanOrNil ( in SmalltalkTypes::BooleanOrNil aBooleanOrNil );		SmalltalkTypes::ShortOrNil echoShortOrNil ( in SmalltalkTypes::ShortOrNil aShortOrNil );		SmalltalkTypes::UnsignedShortOrNil echoUnsignedShortOrNil ( in SmalltalkTypes::UnsignedShortOrNil aUnsignedShortOrNil );		SmalltalkTypes::LongOrNil echoLongOrNil ( in SmalltalkTypes::LongOrNil aLongOrNil );		SmalltalkTypes::UnsignedLongOrNil echoUnsignedLongOrNil ( in SmalltalkTypes::UnsignedLongOrNil aUnsignedLongOrNil );		SmalltalkTypes::LongLongOrNil echoLongLongOrNil ( in SmalltalkTypes::LongLongOrNil aLongLongOrNil );		SmalltalkTypes::UnsignedLongLongOrNil echoUnsignedLongLongOrNil ( in SmalltalkTypes::UnsignedLongLongOrNil aUnsignedLongLongOrNil );		SmalltalkTypes::FloatOrNil echoFloatOrNil ( in SmalltalkTypes::FloatOrNil aFloatOrNil );		SmalltalkTypes::DoubleOrNil echoDoubleOrNil ( in SmalltalkTypes::DoubleOrNil aDoubleOrNil );		SmalltalkTypes::LongDoubleOrNil echoLongDoubleOrNil ( in SmalltalkTypes::LongDoubleOrNil aLongDoubleOrNil );		SmalltalkTypes::CharacterOrNil echoCharacterOrNil ( in CharacterOrNil aCharacterOrNil );		WideCharacterOrNil echoWideCharacterOrNil ( in SmalltalkTypes::WideCharacterOrNil aWideCharacterOrNil );		SmalltalkTypes::DateOrNil echoDateOrNil ( in SmalltalkTypes::DateOrNil aDateOrNil );		SmalltalkTypes::TimeOrNil echoTimeOrNil ( in SmalltalkTypes::TimeOrNil aTimeOrNil );		SmalltalkTypes::Timestamp echoTimestamp ( in SmalltalkTypes::Timestamp aTimestamp );		SmalltalkTypes::TimestampOrNil echoTimestampOrNil ( in SmalltalkTypes::TimestampOrNil aTimestamp );		// any echos		any echoAny ( in any anAny );		// constructs with smalltalk types		struct TestStruct {			SmalltalkTypes::Symbol aSymbol;			SmalltalkTypes::Set aSet;			string &lt;25&gt; aString;			long aLong;			SmalltalkTypes::Date aDate;			SmalltalkTypes::Time aTime;			SmalltalkTypes::Timestamp aTimestamp;		};		TestStruct echoTestStruct ( in TestStruct aTestStruct );		union TestUnion switch (short) {			case 1: SmalltalkTypes::Symbol aSymbol;			case 2: SmalltalkTypes::Set aSet;			case 3: string &lt;25&gt; aString;			case 4: long aLong;			case 5: SmalltalkTypes::Date aDate;			case 6: SmalltalkTypes::Time aTime;			case 7: SmalltalkTypes::Timestamp aTimestamp;		};		TestUnion echoTestUnion ( in TestUnion aTestUnion );		// This one enforces explicit case binding via Union		#pragma CLASS TestUnion2 Union		union TestUnion2 switch (short) {			case 1: SmalltalkTypes::Symbol aSymbol;			case 2: SmalltalkTypes::Set aSet;			case 3: string &lt;25&gt; aString;			case 4: long aLong;			case 5: SmalltalkTypes::Date aDate;			case 6: SmalltalkTypes::Time aTime;			case 7: SmalltalkTypes::Timestamp aTimestamp;		};		struct TestStructOfUnion {			TestUnion aTestUnion;		};		TestStructOfUnion echoTestStructOfUnion (in TestStructOfUnion aTestStructOfUnion );	};	interface SmalltalkTypesResourceClass : RemoteTestResourceClass {		SmalltalkTypesResource current ();	};};</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>SU2TestCase</name><environment>Protocols</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>debugging </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Protocols-TestingExtensions</package></attributes></class><class><name>SU2TestResource</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Protocols-TestingExtensions</package></attributes></class><class><name>DSTRepository</name><environment>Opentalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CORBA-Repository</category><attributes><package>Opentalk-IDL-Repository</package></attributes></class><class><name>SU2TestCaseWithResource</name><environment>Protocols</environment><super>Protocols.SU2TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>resource </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Protocols-TestingExtensions</package></attributes></class></st-source>