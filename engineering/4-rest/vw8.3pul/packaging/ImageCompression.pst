<?xml version="1.0"?><st-source><!-- Name: ImageCompressionNotice: Copyright 2002-2013 Cincom Systems, Inc.  All rights reserved.Comment: Contains an extension to ObjectMemory to allow a user to save the image in a compressed format.Also, contains an extension to invoke the saving from the VisualLauncher that can be found on the File menu (Compress image file).  This package requires the Compression-ZLib package.DbIdentifier: bear73DbTrace: 400473DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'Compression-ZLib' ''))PackageName: ImageCompressionParcel: #('ImageCompression')ParcelName: ImageCompressionPrerequisiteParcels: #(#('Compression-ZLib' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 6:45:07 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 6:45:07 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Kernel.ObjectMemory class</class-id> <category>system backup/exit</category><body package="ImageCompression">compressImageFile: inputName to: outputName resultsTo: aBlock	"Compress the file named by inputFilename to a file named outputFilename in the	 fortmat expected by the engine for compressed images.  Evaluate aBlock	 with four arguments, the size of the input image, the size of the output image,	 the compression time and the decompression time (in milliseconds), respectively."	| inputFilename outputFilename input output compressedOutput compTime decompTime headerSize |	inputFilename := inputName asFilename.	(self isUncompressedImageFile: inputFilename) ifFalse:		[			self error:				(#ImageFileNotUncompressed &lt;&lt; #dialogs &gt;&gt; 'image file &lt;1s&gt; is not uncompressed'					expandMacrosWith: inputFilename asString)		].	headerSize := self headerSizeForImageFile: inputFilename.	outputFilename := outputName asFilename.	input := inputFilename readStream.	input binary.	[		| header |		header := input next: headerSize.		header at: self fileFormatOffset put: self fileFormatZLibCompressed.		output := outputFilename writeStream.		output binary.		output nextPutAll: header.		compressedOutput := OS.ZLib.GZipWriteStream bestCompressionOn: output.		Cursor write showWhile:			[				compTime := Time millisecondsToRun:					[						[input atEnd] whileFalse:							[compressedOutput nextPutBufferFrom: input]					]			]	] ensure: [input close. compressedOutput close].	Cursor read showWhile:		[			output := outputFilename readStream binary.			[				decompTime := Time millisecondsToRun:					[						output skip: headerSize.						(OS.ZLib.GZipReadStream on: output)							skip: outputFilename fileSize - headerSize					]			] ensure: [output close]		].	aBlock isNil ifTrue: [^nil].	^aBlock valueWithArguments:		(Array			with: inputFilename fileSize			with: outputFilename fileSize			with: compTime			with: decompTime)</body></methods><methods><class-id>Kernel.ObjectMemory class</class-id> <category>private - system backup/exit</category><body package="ImageCompression">fileFormatNormal	^0</body><body package="ImageCompression">fileFormatOffset	^43 + 1</body><body package="ImageCompression">fileFormatZLibCompressed	^1</body><body package="ImageCompression">headerSizeForImageFile: aFilename	| input header |	input := aFilename readStream.	input binary.	[header := input next: self imageTypeOffset] ensure: [input close].	^(header at: self imageTypeOffset) &gt;= self imageType64Bits		ifTrue: [self imageHeaderSize64Bits]		ifFalse: [self imageHeaderSize32Bits]</body><body package="ImageCompression">imageHeaderSize32Bits	^512</body><body package="ImageCompression">imageHeaderSize64Bits	^1024</body><body package="ImageCompression">imageType64Bits	^10</body><body package="ImageCompression">imageTypeOffset	^40 + 1</body><body package="ImageCompression">isUncompressedImageFile: aFilename	| input header |	input := aFilename readStream.	input binary.	[header := input next: self fileFormatOffset] ensure: [input close].	^(header at: self fileFormatOffset) = self fileFormatNormal</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="ImageCompression">fileCompressImage	&lt;menuItem: #(#CompressImageFile #dialogs 'Compress image file')		nameKey: nil		menu: #(#menuBar #file)		position: 12.5&gt;	| dialog inputName outputName |	(dialog := SimpleDialog initializedFor: builder window)		setInitialGap;		addMessage: #InputImageFileName &lt;&lt; #dialogs &gt;&gt; 'Compress which image file?' centered: true;		addGap: 4;		addTextLine: (inputName := ValueHolder with: 'visual');		addMessage: #OutputImageFileName &lt;&lt; #dialogs &gt;&gt; 'Output file name?' centered: true;		addGap: 4;		addTextLine: (outputName := ValueHolder with: 'visualgz');		addDivider;		addOK: [true];		openDialog.	dialog cancel value ifTrue: [^false].	ObjectMemory		compressImageFile: ((inputName value indexOfSubCollection: '.im' startingAt: 1) = 0								ifTrue: [inputName value, '.im']								ifFalse: [inputName value])		to: ((outputName value indexOfSubCollection: '.im' startingAt: 1) = 0								ifTrue: [outputName value, '.im']								ifFalse: [outputName value])		resultsTo:			[:inFileSize :outFileSize :compTime :decompTime|			 Transcript				cr;				nextPutAll: 'Image compressed to ';				print: (outFileSize * 10000 / inFileSize) rounded / 100.0;				nextPutAll: '% of original (';				print: inFileSize-&gt;outFileSize;				nextPut: $);				cr;				nextPutAll: 'Decompression + read time ';				print: decompTime // 10 / 100.0;				nextPutAll: ' seconds (compressed in ';				print: compTime // 10 / 100.0;				nextPutAll: ' seconds)';				flush]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>