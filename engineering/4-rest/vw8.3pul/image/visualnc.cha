<?xml version="1.0"?><st-source><component-created><name>AT Parser Compiler</name> <type>package</type></component-created><parcel-loaded><name>AT Parser Compiler</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATParserCompiler.pcl'))</filename></parcel-loaded><component-created><name>AT Parser Example</name> <type>package</type></component-created><parcel-loaded><name>AT Parser Example</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATParserExample.pcl'))</filename></parcel-loaded><component-created><name>AT MetaNumerics</name> <type>package</type></component-created><parcel-loaded><name>AT MetaNumerics</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATMetaNumerics.pcl'))</filename></parcel-loaded><component-created><name>AT Menu Support</name> <type>package</type></component-created><parcel-loaded><name>AT Menu Support</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATMenuSupport.pcl'))</filename></parcel-loaded><component-created><name>AT Support</name> <type>package</type></component-created><parcel-loaded><name>AT Support</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATSupport.pcl'))</filename></parcel-loaded><component-created><name>AT Benchmarks</name> <type>package</type></component-created><parcel-loaded><name>AT Benchmarks</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATBenchmarks.pcl'))</filename></parcel-loaded><component-created><name>AT System Analysis</name> <type>package</type></component-created><parcel-loaded><name>AT System Analysis</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATSystemAnalysis.pcl'))</filename></parcel-loaded><component-created><name>AT Profiling Core</name> <type>package</type></component-created><parcel-loaded><name>AT Profiling Core</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATProfilingCore.pcl'))</filename></parcel-loaded><component-created><name>AT Profiling UI</name> <type>package</type></component-created><parcel-loaded><name>AT Profiling UI</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATProfilingUI.pcl'))</filename></parcel-loaded><component-created><name>AT Integer Extensions</name> <type>package</type></component-created><parcel-loaded><name>AT Integer Extensions</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATIntegerExtensions.pcl'))</filename></parcel-loaded><component-created><name>All Advanced Tools</name> <type>package</type></component-created><parcel-loaded><name>All Advanced Tools</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'AllAdvancedTools.pcl'))</filename></parcel-loaded><component-created><name>Regex11</name> <type>package</type></component-created><parcel-loaded><name>Regex11</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'Regex11.pcl'))</filename></parcel-loaded><component-created><name>DLLCC</name> <type>package</type></component-created><parcel-loaded><name>DLLCC</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'dllcc' 'DLLCC.pcl'))</filename></parcel-loaded><component-created><name>HotDraw Framework</name> <type>package</type></component-created><parcel-loaded><name>HotDraw Framework</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'HotDraw' 'HotDraw Framework.pcl'))</filename></parcel-loaded><component-created><name>HotDraw Animation Framework</name> <type>package</type></component-created><parcel-loaded><name>HotDraw Animation Framework</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'HotDraw' 'HotDraw Animation Framework.pcl'))</filename></parcel-loaded><component-created><name>HotDraw Animated Examples</name> <type>package</type></component-created><parcel-loaded><name>HotDraw Animated Examples</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'HotDraw' 'HotDraw Animated Examples.pcl'))</filename></parcel-loaded><component-created><name>HotDraw PERT Chart</name> <type>package</type></component-created><parcel-loaded><name>HotDraw PERT Chart</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'HotDraw' 'HotDraw PERT Chart.pcl'))</filename></parcel-loaded><component-created><name>HotDraw HotPaint</name> <type>package</type></component-created><parcel-loaded><name>HotDraw HotPaint</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'HotDraw' 'HotDraw HotPaint.pcl'))</filename></parcel-loaded><component-created><name>HotDraw Drawing Inspector</name> <type>package</type></component-created><parcel-loaded><name>HotDraw Drawing Inspector</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'HotDraw' 'HotDraw Drawing Inspector.pcl'))</filename></parcel-loaded><component-created><name>HotDraw Tool Development</name> <type>package</type></component-created><parcel-loaded><name>HotDraw Tool Development</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'HotDraw' 'HotDraw Tool Development.pcl'))</filename></parcel-loaded><component-created><name>HotDraw Slides</name> <type>package</type></component-created><parcel-loaded><name>HotDraw Slides</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'HotDraw' 'HotDraw Slides.pcl'))</filename></parcel-loaded><component-created><name>HotDraw</name> <type>package</type></component-created><parcel-loaded><name>HotDraw</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'HotDraw' 'HotDraw.pcl'))</filename></parcel-loaded><component-created><name>DistributedModeling</name> <type>bundle</type></component-created><component-created><name>DistributedModeling</name> <type>package</type></component-created><component-created><name>DistributedModeling-Compiler</name> <type>package</type></component-created><name-space><name>AlgoDis</name><environment>Root.Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>Distrib-Algos</category></name-space><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NetworkTopologies</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NetworkTopologies</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ProcessGraphBuilder</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ProcessGraphBuilder</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CudaBuilder</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CudaBuilder</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NetworkGeometry</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NetworkGeometry</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CudaInterface</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CudaInterface</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LinkCreation</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LinkCreation</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LinkDestruction</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LinkDestruction</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OCCOccamPrinterVisitor</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OCCOccamPrinterVisitor</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIPickNodesMobile</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIPickNodesMobile</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIGeoreferencer</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIGeoreferencer</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UINetworkGeometry</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UINetworkGeometry</staticKey> <definitionChange>added</definitionChange></component_static_change><name-space><name>AlgoDis</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></name-space><shared-variable><name>RepulsionForce</name><environment>AlgoDis</environment><private>false</private><constant>false</constant><category>Distrib-Algos</category><initializer>400000</initializer><attributes><package>DistributedModeling</package></attributes></shared-variable><class><name>NetworkLink</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>source target </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></class><class><name>UIPickNodes</name><environment>AlgoDis</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>laVue pickModel percent portee </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetworkNode</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name outputLinks inputLinks processName networkGraph </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></class><class><name>PickModel</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>points filename bounds portee lastGraph pointDictionary zones connectivity colNodes originOffset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetworkStatistics</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>range points diameterMax networks processes minFanout maxFanout channels timeGen timeKroc timeRun timeNvcc timeCuda coverageArea percentCoverage loopOk </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling</package></attributes></class><class><name>RandomModel</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>image composite rayon height width nbNoeuds network </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling</package></attributes></class><class><name>UINetworkGeometryController</name><environment>AlgoDis</environment><super>UI.TextEditorController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Algodis</category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetworkDot</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dotFile channels hierarchy closedHierarchy states </inst-vars><class-inst-vars>Types NodesColor DPolicy AliasAsDot </class-inst-vars><imports></imports><category>AlgoDis</category><attributes><package>DistributedModeling</package></attributes></class><class><name>UIRandomNodes</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rayon nbNoeuds view boundsX boundsY </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetworkGraph</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>initialConnectivity nodes roots networkName table maxProcessName statistics nodeDictionary sharedVariables includeFilename includeData </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></class><class><name>DrawingParameters</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>drawCircle drawNetwork drawName outerCircleColor innerCircleColor nameColor networkColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetEditDrawing</name><environment>AlgoDis</environment><super>Refactory.HotDraw.AnimatedDrawing</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nodes edgeWeights forces doAnimate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></class><comment><class-id>AlgoDis.NetEditDrawing</class-id><body>Cette classe représente le comportement de la sous fenetre de NetEditprésentant effectivement le réseau de noeuds. Elle est construite enutilisant le parcel HotDraw.Instance Variables:	nodes	&lt;List | OrderedCollection&gt;  comment	edgeWeights	&lt;Collection&gt;  comment	forces	&lt;Collection&gt;  comment	doAnimate	&lt;Boolean&gt;  comment</body></comment><class><name>NetworkGeometry</name><environment>Graphics</environment><super>Graphics.Geometric</super><private>false</private><indexed-type>none</indexed-type><inst-vars>portee points windowSize windowBounds lines networkCon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>DistributedModeling</package></attributes></class><comment><class-id>Graphics.NetworkGeometry</class-id><body>NetworkGeometry is created in Geometry and is perfectely useless. Much work to be done to allow these graphs to be used there.BP. December 2006.Instance Variables:	points	&lt;Collection of: Point&gt;	  points du reseau	portee	&lt;Integer&gt;	 portee d'un emetteur</body></comment><class><name>PickView</name><environment>AlgoDis</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>image </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling</package></attributes></class><class><name>ExecManager</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mobilePath networkGraph connectionList aPickModel process cudaInterface tempsTotal nbCalc nbCalcDone averageStepTime uiExecManager </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>AlgoDis</category><attributes><package>DistributedModeling</package></attributes></class><comment><class-id>AlgoDis.ExecManager</class-id><body>Permet de récuperer toutes les informations nécessaire à la simulationInstance Variables	aPickModel	&lt;Geometric | GraphicsMedium | ObjectWorldFigureModel | PickModel | RenderContext | Screen | VisualComponent | WindowSpec&gt;	description of aPickModel	connectionList	&lt;AHSOutline | ByteFieldDescriptor | Cache | CCompoundType | (Collection of: NetworkEvent) | GlorpExpression | MC_FileBTree | MessageTally | Path | PostgreSQLQueryResultList | RBProgramNode | Stream&gt;	description of connectionList	cudaInterface	&lt;CudaInterface&gt;	description of cudaInterface	mobilePath	&lt;MobilePath&gt;	description of mobilePath	networkGraph	&lt;NetworkGraph&gt;	description of networkGraph	process	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of process</body></comment><class><name>PickController</name><environment>AlgoDis</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>points position keyboardProcessor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetEditModel</name><environment>AlgoDis</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>node links </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></class><comment><class-id>AlgoDis.NetEditModel</class-id><body>Ici on représente la vue associée à un noeud à l'intérieur d'un noeudNetEditNode affilié à HotDraw. Il est facile de changer ou créer d'autresclasses similaires en utilisant le Canvas. NetEditModel est un exemple peu significatif de ce que l'on voudraitmontrer lors d'un algorithme distribué.Instance Variables:	node	&lt;?type?&gt;  comment	links	&lt;?type?&gt;  comment</body></comment><class><name>NetEditNode</name><environment>AlgoDis</environment><super>Refactory.HotDraw.ViewAdapterFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name node color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></class><comment><class-id>AlgoDis.NetEditNode</class-id><body>Cette classe est construite sur HotDraw (ViewAdapterFigure). Elle encapsule une vue compatible avec le Canvas.Instance Variables:	name	&lt;CharacterArray | ComposedText&gt;  comment	node	&lt;SequenceableCollection&gt;  comment	color	&lt;?type?&gt;  comment</body></comment><class><name>RandomView</name><environment>AlgoDis</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pixmap </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetEdit</name><environment>AlgoDis</environment><super>Refactory.HotDraw.DrawingEditor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nodes animate doAnimate program programName processPid processSmalltalk </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></class><comment><class-id>AlgoDis.NetEdit</class-id><body>Cette classe représente l'interface graphique de présentation de réseau.Son but est de faciliter la mise au point des algorithmes et leurprésentation.  Instance Variables:	nodes	&lt;?type?&gt;  comment	animate	&lt;?type?&gt;  comment	doAnimate	&lt;?type?&gt;  comment	program	&lt;?type?&gt;  comment	programName	&lt;?type?&gt;  comment	processPid	&lt;?type?&gt;  comment	processSmalltalk	&lt;ProcessHandle | Context | Process&gt;  comment</body></comment><class><name>UINetworkGeometry</name><environment>AlgoDis</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>theNbSystems theRadius forSensors commands doDotFile doGraphic forAnimatedView doOccam forRandom leStyle laConsole hasDot hasEvince hasps2png hasKroc leCodeView leCode network lesModeles doBuildDotFile forChannelModel theSize includeFilename loopRange loopNodes displaySourceChoice forDisplayCode forSmalltalk forCuda forMobile generateDir logAndStatsDir execManager includeData forExpress </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetworkNodeAttributes</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nodeName fanOutNodes procedureName point range </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetworkConnectivity</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name communications nodeDictionary </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetworkCompiler</name><environment>AlgoDis</environment><super>Kernel.ExternalLanguageParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>messageList networkName network </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling-Compiler</package></attributes></class><class><name>NetworkNodeAsync</name><environment>AlgoDis</environment><super>AlgoDis.NetworkNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>requestLinks </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></class><class><name>UIPickNodesRandom</name><environment>AlgoDis</environment><super>AlgoDis.UIPickNodes</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetworkGraphSimplified</name><environment>AlgoDis</environment><super>AlgoDis.NetworkGraph</super><private>false</private><indexed-type>none</indexed-type><inst-vars>steps </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetworkNodeLocalized</name><environment>AlgoDis</environment><super>AlgoDis.NetworkNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pos range sym radius center cmt time desc </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling</package></attributes></class><class><name>NetworkGraphAsync</name><environment>AlgoDis</environment><super>AlgoDis.NetworkGraph</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling</package></attributes></class><methods><class-id>AlgoDis.NetworkNode class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="new">new	^self basicNew initialize</body></methods><methods><class-id>AlgoDis.NetworkNode class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="name:outputLinks:">name: aName outputLinks: links	| n |	n := self basicNew initialize.	n name: aName.	n outputLinks: (OrderedCollection withAll: links).	^ n</body></methods><methods><class-id>AlgoDis.UIPickNodes class</class-id> <category>resources</category><body package="DistributedModeling" selector="leMenu">leMenu	"Tools.MenuEditor new openOnClass: self andSelector: #leMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'load image' 							#value: #loadImage ) 						#(#{UI.MenuItem} 							#rawLabel: 'save postscript' 							#value: #savePostscript ) 						#(#{UI.MenuItem} 							#rawLabel: 'build net' 							#value: #buildNet ) 						#(#{UI.MenuItem} 							#rawLabel: 'load points' 							#value: #loadPoints ) 						#(#{UI.MenuItem} 							#rawLabel: 'save points' 							#value: #savePoints ) ) #(5 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Edit' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Load Rectangles' 							#value: #loadRectangles ) 						#(#{UI.MenuItem} 							#rawLabel: 'Reset' 							#value: #resetPoints ) ) #(2 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>AlgoDis.UIPickNodes class</class-id> <category>interface specs</category><body package="DistributedModeling" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Pick points' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1256 937 ) 			#flags: 4 			#menu: #leMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 29 0 0 1.00251 0 0.997118 ) 					#name: #ViewHolder1 					#flags: 11 					#component: #laVue ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 3 3 218 26 ) 					#name: #Slider1 					#flags: 40 					#model: #percent 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 224 3 326 26 ) 					#name: #InputField1 					#flags: 40 					#model: #portee 					#type: #number ) ) ) )</body></methods><methods><class-id>AlgoDis.NetworkGraph class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="with:">with: nodes	| graph |	graph := self basicNew.	graph nodes: (OrderedCollection withAll: nodes).	^ graph</body></methods><methods><class-id>AlgoDis.NetworkGraph class</class-id> <category>private</category><body package="DistributedModeling" selector="sortBlockNumeric">sortBlockNumeric	^	[:p1 :p2 | 	| n1 n2 |	n1 := (p1 copyFrom: 2 to: p1 size) asNumber.	n2 := (p2 copyFrom: 2 to: p2 size) asNumber.	n1 &lt;= n2]</body></methods><methods><class-id>AlgoDis.NetworkGraph class</class-id> <category>private</category><body package="DistributedModeling" selector="sortBlock">sortBlock	^	[:p1 :p2 |	| n1 n2 |	n1 := p1 name copyFrom: 2 to: p1 name size.	n2 := p2 name copyFrom: 2 to: p2 name size.	n1 &lt;= n2]</body></methods><methods><class-id>AlgoDis.NetworkStatistics class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.RandomModel class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>UIRandomNodes class</class-id> <category>interface specs</category><body package="DistributedModeling" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Réseau aléatoire de capteurs' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 960 600 1725 1183 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 203 0 10 0 -10 1 -10 1 ) 					#name: #ViewHolder1 					#flags: 11 					#component: #view ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 26 31 190 67 ) 					#name: #ActionButton1 					#model: #chargerImage 					#label: 'Charger une image...' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 86 86 186 109 ) 					#name: #InputField1 					#model: #rayon 					#alignment: #right 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 30 86 ) 					#name: #Label1 					#label: 'Rayon' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 86 121 186 144 ) 					#name: #InputField2 					#model: #nbNoeuds 					#alignment: #right 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 121 ) 					#name: #Label2 					#label: 'Nb nœuds' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 26 159 190 195 ) 					#name: #ActionButton2 					#model: #generer 					#label: 'Construire le réseau' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 21 522 183 571 ) 					#name: #ActionButton3 					#model: #inspect 					#label: 'Inspect it!' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 86 260 186 283 ) 					#name: #InputField3 					#model: #boundsX 					#alignment: #right 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 68 257 ) 					#name: #Label3 					#label: 'x' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 86 293 186 316 ) 					#name: #InputField4 					#model: #boundsY 					#alignment: #right 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 67 295 ) 					#name: #Label4 					#label: 'y' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 26 204 190 240 ) 					#name: #ActionButton4 					#model: #ecrireReseau 					#label: 'Ecrire le réseau' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Graphics.DrawingParameters class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.NetEditDrawing class</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	" self initialize "	RepulsionForce := 400000</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="knownNetwork:drawing:title:">knownNetwork: aPickModel drawing: doDraw title: title	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"	| win comp ng stream image |	ng := self new.	ng portee: aPickModel portee. 	ng windowSize: aPickModel bounds width. 	win := ScheduledWindow				model: nil				label: aPickModel filename				minimumSize: aPickModel bounds corner.	comp := CompositePart new.	ng points: aPickModel points.	stream := Random new.	doDraw		ifTrue: 			[ng drawCirclesOnComposite: comp.			ng drawColorsOnComposite: comp randomStream: stream.			win component: (BoundedWrapper on: comp).			win open].	^ng</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomNetworkDialog">randomNetworkDialog	"self randomNetworkDialog"	| range nb net text file graph |	range := Dialog request: 'range' initialAnswer: '200'.	nb := Dialog request: 'number of sensors' initialAnswer: '18'.	range := range asNumber.	nb := nb asNumber.	net := (self randomNetwork: range nbPoints: nb) networkCon.	graph := net buildGraph.	text := graph programMain.	file := 'generatedNet.occ' asFilename writeStream.	file		nextPutAll: text;		close.	net buildHotDrawNetworkOn: 'generatedNet'.	net inspect</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="rangeNetwork:windowSize:nbPoints:drawing:title:">rangeNetwork: range windowSize: windowSize nbPoints: nb drawing: doDraw title: title	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"		| win comp ng randomStream |	ng := self new.	ng portee: range.	ng windowSize: windowSize.	win := ScheduledWindow		model: nil		label: #circles &lt;&lt; #examples &gt;&gt; title		minimumSize: windowSize rounded @ windowSize rounded.	comp := CompositePart new.	randomStream := Random new.	" set upan object"	ng randomPointsInWindow: nb stream: randomStream.	doDraw		ifTrue:			[ng drawCirclesOnComposite: comp.			ng drawColorsOnComposite: comp randomStream: randomStream.			win component: (BoundedWrapper on: comp).			win open].	^ng</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomLoopWidth:start:end:">randomLoopWidth: range start: nbStart end: nbEnd	"self randomLoop "		| results time network net graph |	results := OrderedCollection new: nbEnd - nbStart + 1.	nbStart		to: nbEnd		do:			[:i | 			time := Time				millisecondsToRun:					[network := self randomNetwork: range nbPoints: i drawing: false.					net := network networkCon.					graph := net buildGraph].			results add: network statisticNumbers , (Array with: time / 1000.0)].	^results</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="drawNetworkMobile:onComp:">drawNetworkMobile: aPickModel onComp: comp	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"	| ng stream netGeoAndPointDico |	ng := self new.	ng portee: aPickModel portee.	ng windowSize: aPickModel bounds width.	ng points: aPickModel points.	stream := Random new.	netGeoAndPointDico := ng doNetworkForPickModel: aPickModel filename.	ng drawCirclesOnComposite: comp filled: false.	ng drawColorsOnComposite: comp.	ng		drawNames: netGeoAndPointDico last		onComposite: comp		randomStream: stream.</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="knownNetwork:drawingOnlyOn:title:">knownNetwork: aPickModel drawingOnlyOn: aGC title: title	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"	| comp ng stream netGeoAndPointDico pmp |	ng := self new.	ng portee: aPickModel portee.	ng windowSize: aPickModel bounds width.	comp := CompositePart new.	pmp := aPickModel points.	(pmp isKindOf: ValueHolder )ifTrue: [pmp := pmp value].	ng points: pmp .	stream := Random new.	netGeoAndPointDico := ng doNetworkForPickModel: aPickModel filename.	ng drawCirclesOnComposite: comp filled: false.	ng drawColorsOnComposite: comp randomStream: stream.	ng		drawNames: netGeoAndPointDico last		onComposite: comp		randomStream: stream.	^Array		with: ng		with: netGeoAndPointDico last		with: comp</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomLoopGraphOn:">randomLoopGraphOn: aname	"self randomLoop "		| ws results |	results := self randomLoop.	ws := 'time.jgraph' asFilename writeStream.	self randomLoopGraphTime: ws for: results.	ws		commit;		close.	ws := 'minmax.jgraph' asFilename writeStream.	self randomLoopGraphMinMaxFanout: ws for: results.	ws		commit;		close.	ws := 'channels.jgraph' asFilename writeStream.	self randomLoopGraphChannels: ws for: results.	ws		commit;		close.	UnixProcess cshOne: 'make -i'</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomLoopGraphChannels:for:">randomLoopGraphChannels: ws for: results	"self randomLoop "		|   processus sumChan | 	processus := results collect: [:a | a first].	sumChan := results collect: [:a | a at: 2].	ws		nextPutAll: 'newgraph';		cr.	ws nextPutAll: 'newcurve linetype solid marktype none    pts '.	processus		with: sumChan		do:			[:proc :chan | 			proc printOn: ws.			ws space.			chan printOn: ws.			ws space].	ws cr.	ws nextPutAll:			' xaxis label  : "nb process"  yaxis label  : ''nb channels''   '</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomLoop">randomLoop	"self randomLoop "		| range nbStart nbEnd |	range := Dialog request: 'range' initialAnswer: '640'.	nbStart := Dialog request: 'initial number of sensors' initialAnswer: '20'.	range := range asNumber.	nbStart := nbStart asNumber.	nbEnd := Dialog request: 'final number of sensors' initialAnswer: '100'.	range := range asNumber.	nbEnd := nbEnd asNumber.	^self randomLoopWidth: range start: nbStart end: nbEnd</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomLoopGraphMaxFanout:for:">randomLoopGraphMaxFanout: ws for: results	"self randomLoop "		|   processus max | 	processus := results collect: [:a | a first].	max := results collect: [:a | a at: 4].	ws		nextPutAll: 'newgraph';		cr.	ws nextPutAll: 'newcurve linetype solid marktype none   pts '.	processus		with: max		do:			[:proc :chan | 			proc printOn: ws.			ws space.			chan printOn: ws.			ws space].	ws cr.	ws nextPutAll:			' xaxis label  : ''nb process''   yaxis label  : ''max fanout'''</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="new">new	"Answer a newly created and initialized instance."	^self  basicNew initialize</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomLoopGraphMinFanout:for:">randomLoopGraphMinFanout: ws for: results	"self randomLoop "		|   processus min |	processus := results collect: [:a | a first].	min := results collect: [:a | a at: 3].	ws		nextPutAll: 'newgraph';		cr.	ws nextPutAll: 'newcurve linetype solid marktype none   pts '.	processus		with: min		do:			[:proc :chan | 			proc printOn: ws.			ws space.			chan printOn: ws.			ws space].	ws cr.	ws nextPutAll:			' xaxis label  : ''nb process''   yaxis label  : ''min fanout'''</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="knownNetworkMobile:drawingOn:title:">knownNetworkMobile: aPickModel drawingOn: aGC title: title	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"	| win comp ng stream netGeoAndPointDico m mp |	ng := self new.	ng portee: aPickModel portee.	ng windowSize: aPickModel bounds width.	win := ScheduledWindow				model: nil				label: aPickModel filename				minimumSize: aPickModel bounds corner.	comp := CompositePart new.	ng points: aPickModel points.	stream := Random new.	netGeoAndPointDico := ng doNetworkForPickModel: aPickModel filename.	ng drawCirclesOnComposite: comp filled: false.	ng drawColorsOnComposite: comp randomStream: stream.	ng		drawNames: netGeoAndPointDico last		onComposite: comp		randomStream: stream.		m := AlgoDis.Mobile trajectory: (AlgoDis.Trajectory position: (Point x: 10 y: 10) movement: (Point x: 10 y: 10)) range: ng portee.	mp := AlgoDis.MobilePath mobile: m steps: aPickModel steps.	mp draw: comp sensors: ng points.	win component: (BoundedWrapper on: comp).	win open.	^Array		with: ng		with: netGeoAndPointDico last		with: comp</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="knownNetwork:drawingOn:title:">knownNetwork: aPickModel drawingOn: aGC title: title	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"	| win comp ng stream netGeoAndPointDico |	ng := self new.	ng portee: aPickModel portee.	ng windowSize: aPickModel bounds width.	win := ScheduledWindow				model: nil				label: aPickModel filename				minimumSize: aPickModel bounds corner.	comp := CompositePart new.	ng points: aPickModel points.	stream := Random new.	netGeoAndPointDico := ng doNetworkForPickModel: aPickModel filename.	ng drawCirclesOnComposite: comp filled: false.	ng drawColorsOnComposite: comp randomStream: stream.	ng		drawNames: netGeoAndPointDico last		onComposite: comp		randomStream: stream.	win component: (BoundedWrapper on: comp).	win open.	^Array		with: ng		with: netGeoAndPointDico last		with: comp</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples-grid</category><body package="DistributedModeling" selector="gridNetwork:by:drawing:title:">gridNetwork: cols by: lines drawing: doDraw title: title	"self gridNetwork: 10  by: 8  drawing: true title: 'gridSample' "		| win comp ng randomStream windowSize theTitle |	ng := self new.	windowSize := ng windowSize.	ng portee: 120.	theTitle := title.	win := ScheduledWindow		model: nil		label: #circles &lt;&lt; #examples &gt;&gt; theTitle		minimumSize: windowSize.	comp := CompositePart new.	randomStream := Random new.	" set upan object"	ng gridOfPoints: cols with: lines.	doDraw		ifTrue:			[ng drawCirclesOnComposite: comp.			ng drawColorsOnComposite: comp randomStream: randomStream by: cols.			win component: (BoundedWrapper on: comp).			win open].	^ng</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomLoopGraphTime:for:">randomLoopGraphTime: ws  for: results	"self randomLoop "		|   processus time | 	processus := results collect: [:a | a first].	time := results collect: [:a | a at: 6].	ws		nextPutAll: 'newgraph';		cr.	ws nextPutAll: 'newcurve linetype solid marktype none   pts '.	processus		with: time		do:			[:proc :chan | 			proc printOn: ws.			ws space.			chan printOn: ws.			ws space].	ws cr.	ws nextPutAll:			' xaxis label  : "nb process"  yaxis label  : ''time en ms '''</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples-grid</category><body package="DistributedModeling" selector="gridNetwork:nbPoints:drawing:title:">gridNetwork: range nbPoints: nb drawing: doDraw title: title	"self gridNetwork: 150  nbPoints: 160  drawing: true title: 'gridSample' "		| win comp ng randomStream windowSize theTitle |	ng := self new.	windowSize := ng windowSize.	ng portee: range.	theTitle := title.	win := ScheduledWindow		model: nil		label: #circles &lt;&lt; #examples &gt;&gt; theTitle		minimumSize: windowSize.	comp := CompositePart new.	randomStream := Random new.	" set upan object"	ng gridOfPoints: nb.	doDraw		ifTrue:			[ng drawCirclesOnComposite: comp.			ng drawColorsOnComposite: comp randomStream: randomStream.			win component: (BoundedWrapper on: comp).			win open].	^ng</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomNetworkDialogNoGUI">randomNetworkDialogNoGUI	"self randomNetworkDialogNoGUI"		| range nb net text file graph title network time |	time := Time		millisecondsToRun:			[range := Dialog request: 'range' initialAnswer: '640'.			nb := Dialog request: 'number of sensors' initialAnswer: '200'.			range := range asNumber.			nb := nb asNumber.			network := self randomNetwork: range nbPoints: nb.			net := network networkCon.			graph := net buildGraph.			title := 'genRange' , range printString , 'Points' , nb printString.			text := graph programMain.			net printDotOn: title , '.dot' labeling: true.			title := title , '.occ'.			file := title asFilename writeStream.			file				nextPutAll: text;				close].	Transcript		cr;		show: network statistics;		cr.	Transcript		cr;		show: 'in ' , (time / 1000.0) printString , ' seconds';		cr</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="pickNetwork:nbPoints:drawing:title:">pickNetwork: range nbPoints: nb drawing: doDraw title: title	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"		| win comp ng randomStream |	ng := self new.	ng portee: range.	win := ScheduledWindow		model: nil		label: #circles &lt;&lt; #examples &gt;&gt; title		minimumSize: ng portee rounded @ ng portee rounded.	comp := CompositePart new.	randomStream := Random new.	" set upan object"	ng randomPoints: nb stream: randomStream.	doDraw		ifTrue:			[ng drawCirclesOnComposite: comp.			ng drawColorsOnComposite: comp randomStream: randomStream.			win component: (BoundedWrapper on: comp).			win open].	^ng</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="knownNetworkMobile:drawingOnlyOn:title:">knownNetworkMobile: aPickModel drawingOnlyOn: aGC title: title	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"	| comp networkGeometry stream netGeoAndPointDico m mp |	networkGeometry := self new.	networkGeometry portee: aPickModel portee.	networkGeometry windowSize: aPickModel bounds width.	comp := CompositePart new.	networkGeometry points: aPickModel points.	stream := Random new.	netGeoAndPointDico := networkGeometry doNetworkForPickModel: aPickModel filename.	networkGeometry drawCirclesOnComposite: comp filled: false.	networkGeometry drawColorsOnComposite: comp randomStream: stream.	networkGeometry		drawNames: netGeoAndPointDico last		onComposite: comp		randomStream: stream.	m := AlgoDis.Mobile trajectory: (AlgoDis.Trajectory position: 10 @ 10 movement: 10 @ 10) range: networkGeometry portee.	mp := AlgoDis.MobilePath mobile: m steps: aPickModel steps.	mp draw: comp sensors: networkGeometry points.	"self halt."	^Array		with: networkGeometry		with: netGeoAndPointDico last		with: comp</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="knownNetwork:drawingOnlyOn:title:parameters:">knownNetwork: aPickModel drawingOnlyOn: aGC title: title parameters: drawingParameters	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"	| comp ng netGeoAndPointDico colNodes |	ng := self new.	ng portee: aPickModel portee.	colNodes := aPickModel colNodes.	ng windowSize: aPickModel bounds width.	comp := CompositePart new.	ng points: aPickModel points.	netGeoAndPointDico := ng doNetworkForPickModel: aPickModel filename.	drawingParameters drawCircle ifTrue: [ng drawCirclesOnComposite: comp filled: false attributes: drawingParameters].	drawingParameters drawNetwork ifTrue: [ng drawColorsOnComposite: comp withColor: drawingParameters networkColor].	drawingParameters drawName		ifTrue: 			[ng				drawNames: netGeoAndPointDico last				onComposite: comp				withColor: drawingParameters nameColor].	aPickModel connectivity: netGeoAndPointDico first.	"self halt."	^Array		with: ng		with: netGeoAndPointDico last		with: comp</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomLoopGraphWidth:start:end:">randomLoopGraphWidth: range start: nbStart end: nbEnd	"self randomLoop "		 	| results |	results := self randomLoopWidth: range start: nbStart end: nbEnd.</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomLoopGraph:">randomLoopGraph: ws	"self randomLoop "		| results processus sumChan min max isolated time |	results := self randomLoop.	processus := results collect: [:a | a first].	sumChan := results collect: [:a | a at: 2].	min := results collect: [:a | a at: 3].	max := results collect: [:a | a at: 4].	isolated := results collect: [:a | a at: 5].	time := results collect: [:a | a at: 6].		ws		nextPutAll: 'newgraph';		cr.	ws nextPutAll: 'newcurve linetype marktype none solid  pts '.	processus		with: sumChan		do:			[:proc :chan | 			proc printOn: ws.			ws space.			chan printOn: ws.			ws space].	ws cr.	ws nextPutAll: 'newcurve linetype marktype none solid pts '.	processus		with: min		do:			[:proc :chan | 			proc printOn: ws.			ws space.			chan printOn: ws.			ws space].	ws cr.	ws nextPutAll: 'newcurve linetype marktype none solid pts '.	processus		with: max		do:			[:proc :chan | 			proc printOn: ws.			ws space.			chan printOn: ws.			ws space].	ws cr.	ws nextPutAll: 'newcurve linetype marktype none solid pts '.	processus		with: time		do:			[:proc :chan | 			proc printOn: ws.			ws space.			chan printOn: ws.			ws space].	ws cr.	ws nextPutAll:			' xaxis label  : ''nb process''             title : ''random network'''</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomLoopGraphMinMaxFanout:for:">randomLoopGraphMinMaxFanout: ws for: results	"self randomLoop "		| processus min max |	processus := results collect: [:a | a first].	min := results collect: [:a | a at: 3].	max := results collect: [:a | a at: 4].	ws		nextPutAll: 'newgraph';		cr.	ws nextPutAll: 'newcurve linetype solid marktype none   pts '.	processus		with: min		do:			[:proc :chan | 			proc printOn: ws.			ws space.			chan printOn: ws.			ws space].	ws cr.	ws nextPutAll: 'newcurve linetype solid marktype none   pts '.	processus		with: max		do:			[:proc :chan | 			proc printOn: ws.			ws space.			chan printOn: ws.			ws space].	ws cr.	ws nextPutAll:			' xaxis label  : "nb process"  yaxis label  : ''min fanout'''</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomLoopGraph">randomLoopGraph	"self randomLoop "		 	| results |	results := self randomLoop.</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomNetwork:nbPoints:drawing:">randomNetwork: range nbPoints: nb drawing: doDraw	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"		| win comp ng randomStream |	ng := self new.	ng portee: range.	win := ScheduledWindow		model: nil		label: #circles &lt;&lt; #examples &gt;&gt; 'Random networks'		minimumSize: ng portee rounded @ ng portee rounded.	comp := CompositePart new.	randomStream := Random new.	" set upan object"	ng randomPoints: nb stream: randomStream.	doDraw		ifTrue:			[ng drawCirclesOnComposite: comp.			ng drawColorsOnComposite: comp randomStream: randomStream.			win component: (BoundedWrapper on: comp).			win open].	^ng</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="nodes18occ">nodes18occ^'--generated  at December 14, 2006 5:09:18 am--generic synchronous network model--Bernard Pottier. UBO--someNetwork----messages none, defined. --P1 { P15} Node--P2 { P12} Node--P3 { P6, P7, P8} Node--P5 { P11, P15} Node--P6 { P3, P7, P8} Node--P7 { P3, P6, P16} Node--P8 { P3, P6} Node--P10 { P17} Node--P11 { P5} Node--P12 { P2} Node--P13 { P14, P17} Node--P14 { P13, P17} Node--P15 { P1, P5} Node--P16 { P7, P18} Node--P17 { P10, P13, P14} Node--P18 { P16} NodePROTOCOL someNetwork.proto IS  BYTE:-- Procedure definitions PROC Node( []CHAN OF someNetwork.proto in ,[]CHAN OF someNetwork.proto out)   -- messages declaration Node  [4]BYTE inMessages:   [4]BYTE outMessages:    -- Code of procedure Node  SEQ    WHILE TRUE      SEQ        PAR          PAR i=0 FOR SIZE in            in[i] ? inMessages[i]           PAR j=0 FOR SIZE out            out[j] ! outMessages[j] :PROC someNetwork()   -- Channel declarations   CHAN OF someNetwork.proto P1.P2,P1.P13,P1.P15:  CHAN OF someNetwork.proto P2.P1,P2.P13,P2.P15:  CHAN OF someNetwork.proto P3.P4,P3.P10,P3.P14:  CHAN OF someNetwork.proto P4.P3,P4.P7,P4.P12,P4.P14:  CHAN OF someNetwork.proto P5.P9:  CHAN OF someNetwork.proto P6.P10,P6.P18:  CHAN OF someNetwork.proto P7.P4,P7.P12,P7.P17:  CHAN OF someNetwork.proto P8.P11,P8.P12:  CHAN OF someNetwork.proto P9.P5,P9.P15:  CHAN OF someNetwork.proto P10.P3,P10.P6,P10.P14:  CHAN OF someNetwork.proto P11.P8,P11.P16:  CHAN OF someNetwork.proto P12.P4,P12.P7,P12.P8:  CHAN OF someNetwork.proto P13.P1,P13.P2,P13.P15:  CHAN OF someNetwork.proto P14.P3,P14.P4,P14.P10,P14.P18:  CHAN OF someNetwork.proto P15.P1,P15.P2,P15.P9,P15.P13:  CHAN OF someNetwork.proto P16.P11:  CHAN OF someNetwork.proto P17.P7:  CHAN OF someNetwork.proto P18.P6,P18.P14:  -- Channel table declaration for nodes   P1.out IS [ P1.P2,P1.P13,P1.P15 ]:  P1.in IS [ P2.P1,P13.P1,P15.P1 ]:  P2.out IS [ P2.P1,P2.P13,P2.P15 ]:  P2.in IS [ P1.P2,P13.P2,P15.P2 ]:  P3.out IS [ P3.P4,P3.P10,P3.P14 ]:  P3.in IS [ P4.P3,P10.P3,P14.P3 ]:  P4.out IS [ P4.P3,P4.P7,P4.P12,P4.P14 ]:  P4.in IS [ P3.P4,P7.P4,P12.P4,P14.P4 ]:  P5.out IS [ P5.P9 ]:  P5.in IS [ P9.P5 ]:  P6.out IS [ P6.P10,P6.P18 ]:  P6.in IS [ P10.P6,P18.P6 ]:  P7.out IS [ P7.P4,P7.P12,P7.P17 ]:  P7.in IS [ P4.P7,P12.P7,P17.P7 ]:  P8.out IS [ P8.P11,P8.P12 ]:  P8.in IS [ P11.P8,P12.P8 ]:  P9.out IS [ P9.P5,P9.P15 ]:  P9.in IS [ P5.P9,P15.P9 ]:  P10.out IS [ P10.P3,P10.P6,P10.P14 ]:  P10.in IS [ P3.P10,P6.P10,P14.P10 ]:  P11.out IS [ P11.P8,P11.P16 ]:  P11.in IS [ P8.P11,P16.P11 ]:  P12.out IS [ P12.P4,P12.P7,P12.P8 ]:  P12.in IS [ P4.P12,P7.P12,P8.P12 ]:  P13.out IS [ P13.P1,P13.P2,P13.P15 ]:  P13.in IS [ P1.P13,P2.P13,P15.P13 ]:  P14.out IS [ P14.P3,P14.P4,P14.P10,P14.P18 ]:  P14.in IS [ P3.P14,P4.P14,P10.P14,P18.P14 ]:  P15.out IS [ P15.P1,P15.P2,P15.P9,P15.P13 ]:  P15.in IS [ P1.P15,P2.P15,P9.P15,P13.P15 ]:  P16.out IS [ P16.P11 ]:  P16.in IS [ P11.P16 ]:  P17.out IS [ P17.P7 ]:  P17.in IS [ P7.P17 ]:  P18.out IS [ P18.P6,P18.P14 ]:  P18.in IS [ P6.P18,P14.P18 ]:  -- Program Body   PAR    Node(P1.in, P1.out)    Node(P2.in, P2.out)    Node(P3.in, P3.out)    Node(P4.in, P4.out)    Node(P5.in, P5.out)    Node(P6.in, P6.out)    Node(P7.in, P7.out)    Node(P8.in, P8.out)    Node(P9.in, P9.out)    Node(P10.in, P10.out)    Node(P11.in, P11.out)    Node(P12.in, P12.out)    Node(P13.in, P13.out)    Node(P14.in, P14.out)    Node(P15.in, P15.out)    Node(P16.in, P16.out)    Node(P17.in, P17.out)    Node(P18.in, P18.out)     -- End of program body :'</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomNetwork:nbPoints:">randomNetwork: range nbPoints: nb 	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"	| win comp ng randomStream |	ng := self new.	ng portee: range.	win := ScheduledWindow 				model: nil				label: #circles &lt;&lt; #examples &gt;&gt; 'Random networks'				minimumSize: ng portee rounded @ ng portee rounded.	comp := CompositePart new.	randomStream := Random new.	" set upan object"	ng randomPoints: nb stream: randomStream.	ng drawCirclesOnComposite: comp.	ng drawColorsOnComposite: comp randomStream: randomStream.	win component: (BoundedWrapper on: comp).	win open.	^ng</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="rangeNetworkMobile:windowSize:nbPoints:drawing:title:">rangeNetworkMobile: range windowSize: windowSize nbPoints: nb drawing: doDraw title: title	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"		| win comp ng randomStream m sw |	ng := self new.	ng portee: range.	ng windowSize: windowSize.	win := ScheduledWindow		model: nil		label: #circles &lt;&lt; #examples &gt;&gt; title		minimumSize: windowSize rounded @ windowSize rounded.	comp := CompositePart new.	randomStream := Random new.	" set upan object"	ng randomPointsInWindow: nb stream: randomStream.	doDraw		ifTrue:			[ng drawCirclesOnComposite: comp.			ng drawColorsOnComposite: comp randomStream: randomStream.			m := AlgoDis.Mobile trajectory: (AlgoDis.Trajectory position: (Point x: 10 y: 10) movement: (Point x: 10 y: 10)) range: ng portee.			sw := AlgoDis.SystematicWalk mobile: m sensors: ng points width: windowSize height: windowSize.			sw mobilePath draw: comp sensors: ng points.			win component: (BoundedWrapper on: comp).			win open].	^ng</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="knownNetworkMobile:drawing:title:">knownNetworkMobile: aPickModel drawing: doDraw title: title	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"	| win comp ng stream m mp |	ng := self new.	ng portee: aPickModel portee. 	ng windowSize: aPickModel bounds width. 	win := ScheduledWindow				model: nil				label: aPickModel filename				minimumSize: aPickModel bounds corner.	comp := CompositePart new.	ng points: aPickModel points.	stream := Random new.	doDraw		ifTrue: 			[ng drawCirclesOnComposite: comp.			ng drawColorsOnComposite: comp randomStream: stream.			m := AlgoDis.Mobile trajectory: (AlgoDis.Trajectory position: (Point x:10 y: 10) movement: (Point x: 10y: 10)) range: ng portee.			mp := AlgoDis.MobilePath mobile: m steps: ng points.			mp draw: comp sensors: ng points.			win component: (BoundedWrapper on: comp).			win open].	^ng</body></methods><methods><class-id>Graphics.NetworkGeometry class</class-id> <category>examples</category><body package="DistributedModeling" selector="randomNetwork:nbPoints:drawing:title:">randomNetwork: range nbPoints: nb drawing: doDraw title: title	"Demonstrates drawing filled and stroked circles in various colors."	" set up a window to display points"		| win comp ng randomStream |	ng := self new.	ng portee: range.	win := ScheduledWindow		model: nil		label: #circles &lt;&lt; #examples &gt;&gt; title		minimumSize: ng portee rounded @ ng portee rounded.	comp := CompositePart new.	randomStream := Random new.	" set upan object"	ng randomPoints: nb stream: randomStream.	doDraw		ifTrue:			[ng drawCirclesOnComposite: comp.			ng drawColorsOnComposite: comp randomStream: randomStream.			win component: (BoundedWrapper on: comp).			win open].	^ng</body></methods><methods><class-id>AlgoDis.NetEditModel class</class-id> <category>interface specs</category><body package="DistributedModeling" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#min: #(#{Core.Point} 40 20 ) 			#max: #(#{Core.Point} 149 90 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 949 690 ) 			#flags: 8 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 7044 7044 7044 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} #black ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00689655 0 -0.0116279 0 1.0 0 0.232558 ) 					#name: #nodeName 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 4096 0 8191 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 5734 5734 5734 ) ) 					#label: 'aName' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00689655 0 0.22093 0 1.0069 0 0.976744 ) 					#name: #links 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #black ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7044 7044 7044 ) ) 					#model: #links 					#menu: #linkMenu 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>AlgoDis.NetEditModel class</class-id> <category>resources</category><body package="DistributedModeling" selector="linkMenu">linkMenu	"MenuEditor new openOnClass: self andSelector: #linkMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'inspect' 				#value: #inspectLink ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>AlgoDis.NetEditNode class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="name:color:node:">name: aName color: color node: netNode 	| newNode |	newNode := self basicNew.	newNode name: aName; color: color; node: netNode.	newNode initialize.	^newNode</body></methods><methods><class-id>AlgoDis.NetEditNode class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="name:">name: aName	^self new name: aName</body></methods><methods><class-id>AlgoDis.NetEdit class</class-id> <category>resources</category><body package="DistributedModeling" selector="programMenu">programMenu	"MenuEditor new openOnClass: self andSelector: #programMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'start execution' 				#value: #startExec ) 			#(#{UI.MenuItem} 				#rawLabel: 'stop execution' 				#value: #stopExec ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>AlgoDis.NetEdit class</class-id> <category>testing</category><body package="DistributedModeling" selector="test1">test1	| editor |	editor := self open source.	editor addNode: 'P1'</body></methods><methods><class-id>AlgoDis.NetEdit class</class-id> <category>interface specs</category><body package="DistributedModeling" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 800 600 1246 951 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.0 0 0.993274 0 0.88604 ) 					#name: #drawing 					#flags: 11 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #black ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 6553 6553 6553 ) ) 					#component: #drawing ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.226457 0 0.911681 0 0.569507 0 0.980057 ) 					#name: #program 					#model: #programName 					#menu: #programMenu ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0134529 0 0.91453 0 0.190583 0 0.980057 ) 					#name: #CheckBox1 					#model: #doAnimate 					#label: 'Animate' ) ) ) )</body></methods><methods><class-id>AlgoDis.UINetworkGeometry class</class-id> <category>interface specs</category><body package="DistributedModeling" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 'A Quick Network Generator' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 605 390 1316 747 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00984529 0 0.00892857 0 0.213783 0 0.473214 ) 					#name: #GroupBox1 					#label: 'Mode' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.219409 0 0.184524 0 0.40225 0 0.702381 ) 					#name: #GroupBox2 					#label: 'Outputs' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.410689 0 0.00595238 0 0.978903 0 0.982143 ) 					#name: #TextEditor2 					#model: #leCode 					#menu: #leCodeMenu 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0140647 0 0.529762 0 0.0436006 0 0.574405 ) 					#name: #Label1 					#label: 'Size' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0140647 0 0.654762 0 0.0998593 0 0.699405 ) 					#name: #Label2 					#label: 'Nb systems' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.102672 0 0.511905 0 0.203938 0 0.592262 ) 					#name: #SizeField 					#model: #theSize 					#type: #number 					#formatString: '0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.102672 0 0.639881 0 0.203938 0 0.720238 ) 					#name: #NodesField 					#model: #theNbSystems 					#type: #number 					#formatString: '0' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.213783 0 0.0208333 0 0.410689 0 0.10119 ) 					#name: #ActionButton1 					#model: #doGenerate 					#label: 'Generate' 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0196906 0 0.077381 0 0.137834 0 0.139881 ) 					#name: #RadioButton2 					#model: #leStyle 					#label: '2D random' 					#select: #forSensors ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0196906 0 0.133929 0 0.0872011 0 0.196429 ) 					#name: #RadioButton3 					#model: #leStyle 					#label: 'Grid' 					#select: #forGrid ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00703235 0 0.732143 0 0.405063 0 0.982143 ) 					#name: #TextEditor1 					#model: #laConsole 					#tabRequiresControl: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.213783 0 0.0892857 0 0.410689 0 0.169643 ) 					#name: #ActionButton2 					#model: #doGenerateCompile 					#label: 'Generate/Compile' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0168776 0 0.261905 0 0.201125 0 0.46131 ) 					#name: #List1 					#model: #lesModeles 					#menu: #lesModelesMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.229255 0 0.261905 0 0.371308 0 0.324405 ) 					#name: #doGraphic 					#model: #doGraphic 					#label: 'Graphic layout' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.229255 0 0.309524 0 0.351617 0 0.372024 ) 					#name: #CheckBox4 					#model: #doOccam 					#label: 'Occam code' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.229255 0 0.357143 0 0.319269 0 0.419643 ) 					#name: #doBuildDotFile 					#model: #doBuildDotFile 					#label: 'Dot File' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.229255 0 0.404762 0 0.337553 0 0.467262 ) 					#name: #doDotFile 					#model: #doDotFile 					#label: 'Dot graph' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.229255 0 0.452381 0 0.374121 0 0.514881 ) 					#name: #CheckBox3 					#model: #forExpress 					#label: 'Express files' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.229255 0 0.547619 0 0.375527 0 0.610119 ) 					#name: #CheckBox1 					#model: #forChannelModel 					#label: 'Channel model' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0140647 0 0.595238 0 0.0675105 0 0.639881 ) 					#name: #Label3 					#label: 'Radius' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.102672 0 0.577381 0 0.203938 0 0.657738 ) 					#name: #RadiusField 					#model: #theRadius 					#type: #number 					#formatString: '0' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.229255 0 0.5 0 0.355837 0 0.5625 ) 					#name: #CheckBox2 					#flags: 32 					#model: #forDisplayCode 					#label: 'Display code' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0196906 0 0.190476 0 0.137834 0 0.252976 ) 					#name: #RadioButton1 					#model: #leStyle 					#label: 'FFT sample' 					#select: #forFFT ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.229255 0 0.595238 0 0.341772 0 0.657738 ) 					#name: #CheckBox5 					#model: #forCuda 					#label: 'Cuda code' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.229255 0 0.642857 0 0.312236 0 0.705357 ) 					#name: #CheckBox6 					#model: #forMobile 					#label: 'Mobile' ) ) ) )</body></methods><methods><class-id>AlgoDis.UINetworkGeometry class</class-id> <category>resources</category><body package="DistributedModeling" selector="lesModelesMenu">lesModelesMenu	"Tools.MenuEditor new openOnClass: self andSelector: #lesModelesMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'update' 				#value: #updateModeles ) 			#(#{UI.MenuItem} 				#rawLabel: 'delete' 				#value: #deleteModele ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>AlgoDis.UINetworkGeometry class</class-id> <category>resources</category><body package="DistributedModeling" selector="leCodeMenu">leCodeMenu	"Tools.MenuEditor new openOnClass: self andSelector: #leCodeMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'accept' 				#value: #doAccept ) 			#(#{UI.MenuItem} 				#rawLabel: 'accept and save' 				#value: #doAcceptAndSave ) 			#(#{UI.MenuItem} 				#rawLabel: 'cut' 				#value: #cut ) 			#(#{UI.MenuItem} 				#rawLabel: 'copy' 				#value: #copy ) 			#(#{UI.MenuItem} 				#rawLabel: 'paste' 				#value: #paste ) ) #(2 3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>AlgoDis.UINetworkGeometry class</class-id> <category>resources</category><body package="DistributedModeling" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Load' 							#value: #doLoad ) 						#(#{UI.MenuItem} 							#rawLabel: 'Save' 							#value: #doSave ) 						#(#{UI.MenuItem} 							#rawLabel: 'Quit' 							#value: #doQuit ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Actions' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Algo file choice' 							#value: #defineInclude ) 						#(#{UI.MenuItem} 							#rawLabel: 'Data file choice' 							#value: #defineDataInclude ) 						#(#{UI.MenuItem} 							#rawLabel: 'Data file clear' 							#value: #clearDataInclude ) 						#(#{UI.MenuItem} 							#rawLabel: 'Loop' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Loop range' 										#value: #defineLoopRange ) 									#(#{UI.MenuItem} 										#rawLabel: 'Do loop range' 										#value: #doLoop ) 									#(#{UI.MenuItem} 										#rawLabel: 'Loop nodes' 										#value: #defineLoopNodes ) 									#(#{UI.MenuItem} 										#rawLabel: 'Do loop nodes' 										#value: #doLoopNodes ) 									#(#{UI.MenuItem} 										#rawLabel: 'Loop range and nodes' 										#value: #defineLoopRangeAndNodes ) 									#(#{UI.MenuItem} 										#rawLabel: 'Do loop range and nodes' 										#value: #doLoopRangeAndNodes ) ) #(6 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'debug' 							#value: #halt ) 						#(#{UI.MenuItem} 							#rawLabel: 'Simulate' 							#value: #simulate ) 						#(#{UI.MenuItem} 							#rawLabel: 'Simulate map' 							#value: #doSimulateMap ) 						#(#{UI.MenuItem} 							#rawLabel: 'SimulateBench' 							#value: #simulateBench ) 						#(#{UI.MenuItem} 							#rawLabel: 'Inspect' 							#value: #inspect ) ) #(9 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Options' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Map specific' 							#nameKey: #displayCode 							#value: #mapEdit ) 						#(#{UI.MenuItem} 							#rawLabel: 'Map Specific Mobile' 							#nameKey: #displayCodeMobile 							#value: #mapEditMobile ) 						#(#{UI.MenuItem} 							#rawLabel: 'Map GPS' 							#value: #mapGPS ) ) #(3 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="nodeName:fanOutNodes:procedureName:">nodeName: aString fanOutNodes: anArray procedureName: procName	^self		nodeName: aString		fanOutNodes: anArray		procedureName: procName		point: nil		range: nil</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="nodeName:fanOutNodes:procedureName:point:range:">nodeName: aString fanOutNodes: anArray procedureName: procName point: localization range: aRange	| nnAttributes |	nnAttributes := self new.	nnAttributes		nodeName: aString;		fanOutNodes: anArray;		procedureName: procName;		point: localization;		range: aRange.	^nnAttributes</body></methods><methods><class-id>AlgoDis.NetworkConnectivity class</class-id> <category>private</category><body package="DistributedModeling" selector="sortBlock">sortBlock	^	[:p1 :p2 |	| n1 n2 |	n1 := p1 copyFrom: 2 to: p1 size.	n2 := p2 copyFrom: 2 to: p2 size.	n1 &lt;= n2]</body></methods><methods><class-id>AlgoDis.NetworkConnectivity class</class-id> <category>private</category><body package="DistributedModeling" selector="sortBlockNumber">sortBlockNumber	^	[:p1 :p2 | 	| n1 n2 |	n1 := (p1 copyFrom: 2 to: p1 size) asNumber.	n2 := (p2 copyFrom: 2 to: p2 size) asNumber.	n1 &lt;= n2]</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized class</class-id> <category>instance creation</category><body package="DistributedModeling" selector="pos:">pos: aPosition	^self new pos: aPosition</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareOutputChannelTableOn:indent:">declareOutputChannelTableOn: aStream indent: indent	"Declare aliasing of a channel table as needed when launching a process. "	self outputChannelNames size &gt; 0		ifTrue: 			[self spaceOn: aStream indent: indent.			aStream nextPutAll: self name , '.out IS [ '.			self outputChannelNames do: [:linkName | aStream nextPutAll: linkName] separatedBy: [aStream nextPutAll: ','].			aStream				nextPutAll: ' ]:';				cr]</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>occam-production</category><body package="DistributedModeling" selector="oldCallProcedureOn:indent:">oldCallProcedureOn: aStream indent: indent		| in out table index |	table := networkGraph table.	index := (table detect: [:array | (array at: 4) = self]) first.	in := self inputChannelNames size.	out := self outputChannelNames size.	self spaceOn: aStream indent: indent.	aStream nextPutAll: self processName , '('.	in &gt; 0 ifTrue: [aStream nextPutAll: self name , '.in'].	(in &gt; 0 and: [out &gt; 0]) ifTrue: [aStream nextPutAll: ', '].	out &gt; 0 ifTrue: [aStream nextPutAll: self name , '.out'].	aStream nextPut: $,.	index - 1 printOn: aStream.	aStream		nextPutAll: ')';		cr</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareOn:indent:protoName:">declareOn: aStream indent: indent protoName: pName	self declareOutputChannelsOn: aStream indent: indent protoName: pName.	self declareOutputChannelTableOn: aStream indent: indent.	self declareInputChannelTableOn: aStream indent: indent.	aStream cr</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="processName">processName	^processName</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareOutputChannelsOn:indent:">declareOutputChannelsOn: aStream indent: indent 	self spaceOn: aStream indent: indent.	aStream nextPutAll: 'CHAN OF BYTE '.	self outputChannelNames do: [:linkName | aStream nextPutAll: linkName]		separatedBy: [aStream nextPutAll: ','].	aStream nextPut: $:; cr</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>occam-production</category><body package="DistributedModeling" selector="callProcedureOn:indent:">callProcedureOn: aStream indent: indent	"This is used to print a procedure call for a program activity inside the global PAR construct        see NetworkGraph "	| in out table index |	table := networkGraph table.	index := (table detect: [:array | (array at: 4) = self]) first.	in := self inputChannelNames size.	out := self outputChannelNames size.	self spaceOn: aStream indent: indent.	aStream nextPutAll: self processName , '('.	in &gt; 0 ifTrue: [aStream nextPutAll: self name , '.in'].	(in &gt; 0 and: [out &gt; 0]) ifTrue: [aStream nextPutAll: ', '].	out &gt; 0 ifTrue: [aStream nextPutAll: self name , '.out'].	aStream nextPut: $,.	index - 1 printOn: aStream.	aStream nextPutAll: ', toMux ['.	index - 1 printOn: aStream.	aStream		nextPutAll: '])';		cr</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>building</category><body package="DistributedModeling" selector="inputChannels">inputChannels</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="processName:">processName: aValue	processName := aValue</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>building</category><body package="DistributedModeling" selector="outputChannelNames">outputChannelNames	^self outputLinks collect: [:link | link channelName]</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="name">name	^name</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>initializing</category><body package="DistributedModeling" selector="initialize">initialize	"super initialize."	name := '&lt;undefined&gt;'.	inputLinks := OrderedCollection new.	outputLinks := OrderedCollection new</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>comparing</category><body package="DistributedModeling" selector="&lt;=">&lt;= aNode 	| p1 p2 |	p1 := self name copyFrom: 2 to: self name size.	p2 := aNode name copyFrom: 2 to: aNode name size.	^p1 asNumber &lt;= p2 asNumber</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>printing</category><body package="DistributedModeling" selector="printOn:">printOn: aStream 	aStream nextPutAll: self name.	aStream nextPutAll: ' ( '.	self outputLinks do: [:l | aStream nextPutAll: l target name; space].	aStream nextPutAll: ' ) '; cr</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>occam-production</category><body package="DistributedModeling" selector="spaceOn:indent:">spaceOn: aStream indent: indent 	indent timesRepeat: [aStream nextPutAll: '  ']</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="inputLinks:">inputLinks: aValue	inputLinks := aValue</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="networkGraph">networkGraph	^networkGraph</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="outputLinks">outputLinks	^outputLinks</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareIndent:">declareIndent: indent 	| aStream |	aStream := String new writeStream.	self declareOn: aStream indent: indent.	^aStream contents</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareOn:indent:">declareOn: aStream indent: indent 	self declareOutputChannelsOn: aStream indent: indent.	self declareOutputChannelTableOn: aStream indent: indent.	self declareInputChannelTableOn: aStream indent: indent.	aStream cr</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>building</category><body package="DistributedModeling" selector="inputChannelNames">inputChannelNames	^self inputLinks collect: [:link | link channelName]</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="name:">name: aValue	name := aValue</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="outputLinks:">outputLinks: aValue	outputLinks := aValue</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareOutputChannelsOn:indent:protoName:">declareOutputChannelsOn: aStream indent: indent protoName: pName 	self outputChannelNames size &gt; 0 		ifTrue: 			[self spaceOn: aStream indent: indent.			aStream				nextPutAll: 'CHAN OF ' , pName;				space.			self outputChannelNames do: [:linkName | aStream nextPutAll: linkName]				separatedBy: [aStream nextPutAll: ','].			aStream				nextPut: $:;				cr]</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareInputChannelTableOn:indent:">declareInputChannelTableOn: aStream indent: indent	"Declare aliasing of a channel table as needed when launching a process. "	self inputChannelNames size &gt; 0		ifTrue: 			[self spaceOn: aStream indent: indent.			aStream nextPutAll: self name , '.in IS [ '.			self inputChannelNames do: [:linkName | aStream nextPutAll: linkName] separatedBy: [aStream nextPutAll: ','].			aStream				nextPutAll: ' ]:';				cr]</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="networkGraph:">networkGraph: aValue	networkGraph := aValue</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="inputLinks">inputLinks	^inputLinks</body></methods><methods><class-id>AlgoDis.NetworkNode</class-id> <category>graphing</category><body package="DistributedModeling" selector="graphNode">graphNode	| node |	node := Smalltalk.FinalSmallGraph.Node new.	node name: self name.	^node</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="savePoints">savePoints	| filename pm dico stream name points |	pm := self pickModel value.	pm buildNet.	dico := pm pointDictionary.	points := pm points.	filename := Dialog requestNewFileName: 'Name a point system  file'				default: '*.txt'.	filename isEmpty		ifFalse: 			[stream := filename asFilename writeStream.			points do: 					[:eachPoint |					eachPoint printOn: stream.					stream space.					name := dico at: eachPoint.					name printOn: stream.					stream cr].			stream close]</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="savePostscript">savePostscript	| box image filename drawingBounds file gc |	box := self builder window displayBox.	image := Screen default completeContentsOfArea: box.	filename := Dialog requestNewFileName: 'Enter filename for output:'				default: 'drawing.ps'.	filename isEmpty ifTrue: [^self].	drawingBounds := image bounds.	file := PostScriptFile named: filename.	file setLandscape: drawingBounds extent x &gt; drawingBounds extent y.	gc := file graphicsContext. 	gc scaleBy: 1.	image displayOn: gc.	file close</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>changes</category><body package="DistributedModeling" selector="changePortee">changePortee		| boundWidth laPortee |	self   pickModel value bounds isNil ifTrue: [^nil].	laPortee := self portee value.	self pickModel value portee: laPortee.	self percent value.	boundWidth := self pickModel value bounds width.	laPortee := ((laPortee / boundWidth) * 100) asInteger.	self percent retractInterestsFor: self.	self percent value: laPortee.	self percent onChangeSend: #changePercent to: self.	self updateGraph</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>aspects</category><body package="DistributedModeling" selector="portee">portee	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^portee isNil		ifTrue:			[portee :=0 asValue]		ifFalse:			[portee]</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>changes</category><body package="DistributedModeling" selector="changePercent">changePercent		| boundWidth percentage laPortee |	self pickModel value bounds isNil ifTrue: [^nil].	percentage := self percent value.	boundWidth := self pickModel value bounds width.	laPortee := (percentage * boundWidth / 100) asInteger.	self pickModel value portee: laPortee.	self portee retractInterestsFor: self.	self portee value: laPortee.	self portee onChangeSend: #changePortee to: self.	self updateGraph</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>accessing</category><body package="DistributedModeling" selector="laVue">laVue	^laVue</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize		super initialize.	laVue := PickView new.	pickModel := PickModel new asValue.	self laVue model: self pickModel.	laVue controller: PickController new.	self portee onChangeSend: #changePortee to: self.	self percent onChangeSend: #changePercent to: self.	self portee value: 20.	self percent value: ((20 / 398) * 100) asInteger.	self pickModel value portee: 20</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="updateGeneratorsWith:">updateGeneratorsWith: net		| uiGenerators connectivity |	uiGenerators := UINetworkGeometry allInstances.	uiGenerators isEmpty		ifTrue:			[UINetworkGeometry open.			uiGenerators := UINetworkGeometry allInstances].	uiGenerators		do:			[:aGenerator | 			connectivity := net buildNetworkLocalized.			aGenerator leStyle value: #forSensors.			aGenerator theNbSystems value: net points size.			aGenerator theRadius value: self portee value.			aGenerator theSize value: self pickModel value bounds width.			aGenerator doGraphic value: true.			aGenerator leCode value: connectivity printString]</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="buildNet">buildNet	| model view gc netAndDicoAndComposite |	model := self pickModel value.	view := self laVue.	gc := view graphicsContext.	netAndDicoAndComposite := model buildNetAndDisplayOn: gc.	self updateGeneratorsWith: netAndDicoAndComposite first.	model lastGraph: netAndDicoAndComposite last.	model pointDictionary: (netAndDicoAndComposite at: 2).	self pickModel value: model</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="loadImage">loadImage 	| filename reader image pm bounds button |	filename := Dialog requestFileName: 'Name a file' default: '.png .jpg .tiff .gif'.	filename isEmpty		ifFalse: 			[reader := ImageReader fromFile: filename.			image := reader image.			bounds := image bounds.			pm := self pickModel value.			pm filename: filename.			pm points: OrderedCollection new.			pm bounds: bounds.			self pickModel value: pm.			self laVue image: image.			button := self builder componentAt: #Slider1.			button enable.			button widget invalidate.			button := self builder componentAt: #InputField1.			button enable.			button widget invalidate]</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="buildNetOld">buildNetOld	| pm net model |	pm := self pickModel value.	net := pm buildNet.	self updateGeneratorsWith: net.	model := self pickModel value.	model lastGraph: net.	self pickModel value: model.	self halt</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="saveImage">saveImage	| box image filename drawingBounds file gc scale |	box := self builder window displayBox.	image := Screen default completeContentsOfArea: box.	filename := Dialog requestNewFileName: 'Enter filename for output:'				default: 'drawing.ps'.	filename isEmpty ifTrue: [^self].	drawingBounds := image bounds.	file := PostScriptFile named: filename.	file setLandscape: drawingBounds extent x &gt; drawingBounds extent y.	gc := file graphicsContext.	scale := gc clippingBounds extent x / drawingBounds extent x				min: gc clippingBounds extent y / drawingBounds extent y.	gc scaleBy: 1 "(scale min: 1)".	image displayOn: gc.	file close</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="loadRectangles">loadRectangles	| filename rs scanner eachLine line rect model |	filename := Dialog requestFileName: 'Name a file' default: '.rect'.	filename isEmpty		ifFalse: 			[rs := filename asFilename readStream.			scanner := Scanner new.			rect := Set new.			[rs atEnd] whileFalse: 					[eachLine := rs upTo: Character cr.					line := scanner scanTokens: eachLine.					rect add: (Rectangle origin: (line at: 1) @ (line at: 2) corner: (line at: 3) @ (line at: 4))].			model := self pickModel value.			model zones: rect.			self pickModel value: model]</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>accessing</category><body package="DistributedModeling" selector="pickModel">pickModel	^pickModel</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="resetPoints">resetPoints	| pm model |	pm := self pickModel value.	model := self pickModel value.	pm points isNil ifFalse: [pm points value: OrderedCollection new].	self pickModel value: pm.	model lastGraph: nil</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>aspects</category><body package="DistributedModeling" selector="percent">percent	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^percent isNil		ifTrue:			[percent := 0 asValue]		ifFalse:			[percent]</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="buildNetDrawingOnView">buildNetDrawingOnView	| net model view gc |	model := self pickModel value.	view := self laVue.	gc := view graphicsContext.	net := model buildNetAndDisplayOn: gc.	self halt.	self updateGeneratorsWith: net.	model lastGraph: net.	self pickModel value: model.	self halt</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>changes</category><body package="DistributedModeling" selector="updateGraph">updateGraph	| gc |	gc := self laVue graphicsContext.	self pickModel value buildGraph: gc.	self laVue invalidate.</body></methods><methods><class-id>AlgoDis.UIPickNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="loadPoints">loadPoints	| filename pm dico stream line ls pointX pointY point name points |	dico := Dictionary new.	points := OrderedCollection new.	filename := Dialog requestFileName: 'Name a point system  file' default: '*.txt'.	filename isEmpty		ifFalse: 			[stream := filename asFilename readStream.			[stream atEnd] whileFalse: 					[line := stream upTo: Character cr.					line isEmpty						ifFalse: 							[ls := line readStream.							pointX := ls upTo: $@.							pointY := ls upTo: $'.							point := pointX asNumber @ pointY asNumber.							name := ls upTo: $'.							points add: point.							dico at: point put: name]].			pm := self pickModel value.			pm pointDictionary: dico.			pm points value: points.			self pickModel value: pm]</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="networkName">networkName	^networkName</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>building</category><body package="DistributedModeling" selector="buildInputs">buildInputs	"setup inputLinks in the graph nodes."	| outLinks targetNode |	self nodes asSortedCollection		do: 			[:eachNode | 			outLinks := eachNode outputLinks.			outLinks				do: 					[:link | 					targetNode := link target.					targetNode inputLinks add: link]]</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="includeFilename">includeFilename	^includeFilename</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="statistics">statistics	^statistics</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="diameterProtocolName">diameterProtocolName      "utility to name the protocol for links (data type used in communications)"	^   'diam' , '.proto'</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="maxProcessName">maxProcessName	^maxProcessName</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>building</category><body package="DistributedModeling" selector="channelNames">channelNames	"setup inputLinks in the graph nodes."	| outLinks names |	names := Set new.	self nodes		do: 			[:eachNode | 			outLinks := eachNode outputLinks.			outLinks do: [:link | names add: link channelName]].	^names asSortedCollection asArray</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="nodes">nodes	^nodes</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="includeFilename:">includeFilename: anObject	includeFilename := anObject</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>displaying</category><body package="DistributedModeling" selector="statisticNumbers">statisticNumbers	| max isolated min fanout sumChan keys |	keys := self nodeDictionary keys.	max := 0.	isolated := 0.	min := 100000.	sumChan := 0.	self nodeDictionary keysAndValuesDo: 			[:keyx :attributes |			fanout := attributes fanOutNodes.			sumChan := sumChan + fanout size.			min := min min: fanout size.			max := max max: fanout size.			fanout isEmpty ifTrue: [isolated := isolated + 1]].	self		statistics: (Array				with: keys size				with: sumChan				with: min) , (Array with: max with: isolated).	^self statistics</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>private</category><body package="DistributedModeling" selector="inputChannelArrayName">inputChannelArrayName	^'in'</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="initialConnectivity">initialConnectivity	^initialConnectivity</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>displaying</category><body package="DistributedModeling" selector="maxFanOut">maxFanOut		| array |	array := self statistics.	array isNil		ifTrue:			[self error: 'statistics should have been generated before this call'.			^0]		ifFalse: [^array at: 4]</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="includeData">includeData	^includeData</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>building</category><body package="DistributedModeling" selector="buildTable">buildTable	"setup inputLinks in the graph nodes."	| index stream sort |	index := 0. 	sort := SortedCollection sortBlock: [ :nod1 :nod2 | nod1  name &lt;= nod2 name ].	sort addAll: self nodes.	table := sort collect: 					[:eachNode |					index := index + 1.					stream := (Array new: 6) writeStream.					stream nextPut: index.					stream nextPut: eachNode name.					stream nextPut: eachNode processName.					stream nextPut: eachNode.					stream contents].	^table</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="initialConnectivity:">initialConnectivity: anObject	initialConnectivity := anObject</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>displaying</category><body package="DistributedModeling" selector="statisticsOn:">statisticsOn: ws		| array | 	array := self statisticNumbers.	ws		nextPutAll: '-- processus : ' , array first printString;		cr.	ws		nextPutAll: '-- min fanout : ' , (array at: 3) printString;		cr.	ws		nextPutAll: '-- max fanout : ' , (array at: 4) printString;		cr. 	ws		nextPutAll: '-- channels   : ' , (array at: 2) printString;		cr</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="table">table		^table</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="typeChannelSize">typeChannelSize	^false</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareOn:indent:">declareOn: aStream indent: indent       "This method writes a declaration of all communication channels appearing in the system."	| sortedNodes |	sortedNodes := self nodes asSortedCollection.	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: ' -- Channel declarations '; cr.	sortedNodes do: [:aNode | aNode declareOutputChannelsOn: aStream indent: indent protoName: self diameterProtocolName].	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: '-- Channel table declaration for nodes '; cr.	sortedNodes		do: 			[:aNode | 			aNode declareOutputChannelTableOn: aStream indent: indent.			aNode declareInputChannelTableOn: aStream indent: indent].	aStream cr</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="dataLocationOn:">dataLocationOn: aStream	aStream		nextPutAll: 'DATA TYPE Location  RECORD    INT xLoc:    INT yLoc:    INT elevation:    INT range::'</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="maxProcessName:">maxProcessName: anObject	maxProcessName := anObject</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="processTableOn:indent:">processTableOn: aStream indent: indent	"This dumps 2 tables of global data that can be used by nodes to obtain       name of the procedure, and name of the process, for debug and configuration purposes "	| max nom | 	self buildTable.	max := self table		inject: 0		into: [:sz :array | sz max: (array at: 2) size].	self maxProcessName: max.	aStream		nextPutAll:			'VAL [' , self table size printString , '][' , max printString ,					']BYTE NetProcess IS [ '.	self table		keysAndValuesDo:			[:i :array | 			nom := array at: 2.			self spaceOn: aStream indent: 1.			aStream nextPut: $".			aStream nextPutAll: nom.			max - nom size timesRepeat: [aStream nextPut: $ ].			aStream nextPut: $".			i = self table size				ifTrue: [aStream nextPutAll: ']:']				ifFalse:					[aStream						nextPut: $,;						nextPutAll: ' -- id: '.					array first printOn: aStream].			aStream cr].	aStream cr.	max := self table		inject: 0		into: [:sz :array | sz max: (array at: 3) size].	aStream		nextPutAll:			'VAL [' , self table size printString , '][' , max printString ,					']BYTE NetProcedure IS [ '.	self table		keysAndValuesDo:			[:i :array | 			nom := array at: 3.			self spaceOn: aStream indent: 1.			aStream nextPut: $".			aStream nextPutAll: nom.			max - nom size timesRepeat: [aStream nextPut: $ ].			aStream nextPut: $".			i = self table size				ifTrue: [aStream nextPutAll: ']:']				ifFalse:					[aStream						nextPut: $,;						nextPutAll: ' -- id: '.					array first printOn: aStream].			aStream cr].	aStream cr</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="networkName:">networkName: aValue	networkName := aValue</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="processTableLocationsOn:indent:">processTableLocationsOn: aStream indent: indent	"This dumps 2 tables of global data that can be used by nodes to obtain       name of the procedure, and name of the process, for debug and configuration purposes "	"dirty, we are still waiting for better object support for nodes "	| nodeLocalized entry itsNode |	entry := self table first.	itsNode := entry last.	itsNode class = NetworkNodeLocalized		ifTrue: 			[self dataLocationOn: aStream.			aStream nextPutAll: 'VAL [' , self table size printString						, '] Location  NetLocation IS [ '.			self table keysAndValuesDo: 					[:i :array |					nodeLocalized := array at: 4.					self spaceOn: aStream indent: 1.					aStream nextPut: $[.					nodeLocalized pos x printOn: aStream.					aStream nextPutAll: ' , '.					nodeLocalized pos y printOn: aStream.					aStream nextPutAll: ' , '.					0 printOn: aStream.					aStream nextPutAll: ' , '.					nodeLocalized range printOn: aStream.					aStream nextPutAll: ' ] '.					i = self table size						ifTrue: [aStream nextPutAll: ']:']						ifFalse: 							[aStream								nextPut: $,;								nextPutAll: ' -- id: '.							array first printOn: aStream].					aStream cr].			aStream cr]</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>old-occam-production</category><body package="DistributedModeling" selector="procedureDefinitionOn:indent:">procedureDefinitionOn: aStream indent: indent	"Was used to produce procedure header as implemented by hand in the behaviour file "	| procedures inputSize outputSize in out |	procedures := self procedureCalled.	aStream cr.	self spaceOn: aStream indent: indent.	aStream		nextPutAll: '-- Procedure definitions ';		cr.	procedures		keysAndValuesDo:			[:key :dims | 			in := dims first printString.			out := dims last printString.			self typeChannelSize				ifTrue:					[inputSize := in.					outputSize := out]				ifFalse:					[inputSize := ''.					outputSize := ''].			self spaceOn: aStream indent: indent.			aStream				nextPutAll:					'PROC ' , key , '( [' , inputSize , ']CHAN OF ' , self protocolName , ' '						, self inputChannelArrayName , ' ,'.			aStream				nextPutAll:					'[' , outputSize , ']CHAN OF ' , self protocolName , ' '						, self outputChannelArrayName , ', VAL INT  identity' , ')'.			aStream cr.			self				spaceOn: aStream				indent: indent + 1.			aStream				nextPutAll: ' -- messages declaration ' , key;				cr.			self				spaceOn: aStream				indent: indent + 1.			aStream				nextPutAll: '[' , in , ']' , 'BYTE' , ' inMessages: ';				cr.			self				spaceOn: aStream				indent: indent + 1.			aStream				nextPutAll: '[' , out , ']' , 'BYTE' , ' outMessages: ';				cr.			self				spaceOn: aStream				indent: indent + 1.			aStream				nextPutAll:						'[' , self maxProcessName printString , ']' , 'BYTE' , ' MyName: ';				cr.			self				spaceOn: aStream				indent: indent + 1.			aStream				nextPutAll: ' -- Code of procedure ' , key;				cr.			self				spaceOn: aStream				indent: indent + 1.			aStream				nextPutAll: 'SEQ';				cr.			self				spaceOn: aStream				indent: indent + 2.			aStream				nextPutAll: 'SEQ index = 0 FOR SIZE MyName';				cr.			self				spaceOn: aStream				indent: indent + 3.			aStream				nextPutAll: 'MyName[index] := NetProcess[identity][index]';				cr.			self				spaceOn: aStream				indent: indent + 2.			aStream				nextPutAll: 'SEQ tours = 0 FOR 10';				cr.			self				spaceOn: aStream				indent: indent + 3.			aStream				nextPutAll: 'SEQ';				cr.			self				spaceOn: aStream				indent: indent + 4.			aStream				nextPutAll: 'PAR';				cr.			self				spaceOn: aStream				indent: indent + 5.			aStream				nextPutAll: 'PAR i=0 FOR SIZE ' , self inputChannelArrayName;				cr.			self				spaceOn: aStream				indent: indent + 6.			aStream				nextPutAll: 'in[i] ? inMessages[i] ';				cr.			self				spaceOn: aStream				indent: indent + 5.			aStream				nextPutAll: 'PAR j=0 FOR SIZE ' , self outputChannelArrayName;				cr.			self				spaceOn: aStream				indent: indent + 6.			aStream				nextPutAll: 'out[j] ! outMessages[j] ';				cr.			self spaceOn: aStream indent: indent.			aStream				nextPut: $:;				cr]</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>displaying</category><body package="DistributedModeling" selector="maxNodeNumber">maxNodeNumber		| array |	array := self statistics.	array isNil		ifTrue:			[self error: 'statistics should have been generated before this call'.			^0]		ifFalse: [^array first]</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="constantsOn:indent:">constantsOn: aStream indent: indent	"This call provides the Occam progrm with useful information on        graph characteristics, such as maximum fan out and number of nodes.       Constants are used to provide static dimensions in a number of places,       as example message buffers inside behaviour procedures"	| maxFanOut line maxNodeNumber |	maxFanOut := self maxFanOut.	maxNodeNumber := self maxNodeNumber.	aStream cr.	line := 'VAL INT MaxFanOut IS ' , maxFanOut printString , ':'.	self spaceOn: aStream indent: indent.	aStream		nextPutAll: line;		cr.	aStream cr.	line := 'VAL INT MaxNodes IS ' , maxNodeNumber printString , ':'.	self spaceOn: aStream indent: indent.	aStream		nextPutAll: line;		cr</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="includeData:">includeData: anObject	includeData := anObject</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="source">source		| textLines |	(NetworkTopologies methodDictionary keys		includes: self networkName asSymbol)		ifTrue:			[textLines := NetworkTopologies sourceCodeAt: self networkName asSymbol]		ifFalse: [textLines := NetworkTopologies sourceCodeAt: #graph1]. 	textLines isEmpty		ifTrue: [textLines := self initialConnectivity printString].	^textLines</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="nodeDictionary">nodeDictionary	^nodeDictionary</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="spaceOn:indent:">spaceOn: aStream indent: indent 	indent timesRepeat: [aStream nextPutAll: '  ']</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="authorDefinitionOn:indent:">authorDefinitionOn: aStream indent: indent	"produces a header for the Occam program. textlines is the textual       formulation of the graph "	| textLines |	textLines := self source.	textLines := textLines tokensBasedOn: Character cr.	aStream cr.	self spaceOn: aStream indent: indent.	aStream		nextPutAll:				'--generated  at ' , Date today printString , ' ' , Time now printString;		cr.	self spaceOn: aStream indent: indent.	aStream		nextPutAll: '--generic synchronous network model';		cr.	aStream		nextPutAll: '--Bernard Pottier. UBO';		cr	"	textLines do: 			[:line | 			self spaceOn: aStream indent: indent.			aStream				nextPutAll: '--' , line;				cr]"</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="protocolDefinitionOn:indent:">protocolDefinitionOn: aStream indent: indent      "Protocol used for the link "	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: 'PROTOCOL ' , self protocolName , ' IS  BYTE:'; cr</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="nodeDictionary:">nodeDictionary: anObject	nodeDictionary := anObject</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>smalltalk-production</category><body package="DistributedModeling" selector="smalltalkSystem">smalltalkSystem	self error: 'implement me please, i am smalltalkSystem in NetworkGraph, with the table below available'.	^ProcessGraphBuilder fromGraph: self</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>private</category><body package="DistributedModeling" selector="sortBlock">sortBlock	^	[:p1 :p2 | 	| n1 n2 |	n1 := (p1 copyFrom: 2 to: p1 size) asNumber.	n2 := (p2 copyFrom: 2 to: p2 size) asNumber.	n1 &lt;= n2]</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="programBodyOn:indent:">programBodyOn: aStream indent: indent	" 1. define a table for channels from process to the mux observer        2. start the system in a global PAR incluing the mux process"	| sortedNodes |	sortedNodes := SortedCollection sortBlock: self class sortBlock.	sortedNodes addAll: self nodes.	aStream cr.	self spaceOn: aStream indent: indent.	aStream		nextPutAll: '-- Program Body ';		cr.	aStream cr.	self spaceOn: aStream indent: indent.	aStream		nextPutAll: '[MaxNodes]CHAN OF BYTE toMux:';		cr.	self spaceOn: aStream indent: indent.	aStream		nextPutAll: 'PAR';		cr.	sortedNodes do: [:aNode | aNode callProcedureOn: aStream indent: indent + 1].	self spaceOn: aStream indent: indent + 1.	aStream		nextPutAll: 'Mux(toMux,stdout)';		cr.	self spaceOn: aStream indent: indent + 1.	aStream		nextPutAll: ' -- End of program body ';		cr</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="roots">roots	^roots</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="roots:">roots: aValue	roots := aValue</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="dataIncludeOn:indent:">dataIncludeOn: aStream indent: indent	"produces a header for the Occam program. textlines is the textual       formulation of the graph "	self includeData isNil		ifFalse: 			[aStream				nextPutAll: '-- include data file for physical simulation   ';				cr.			aStream				nextPutAll: '#INCLUDE   ';				nextPut: $";				nextPutAll: self includeData;				nextPut: $";				cr;				cr]</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="nodes:">nodes: aValue	nodes := aValue</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>smalltalk-production</category><body package="DistributedModeling" selector="cudaSystem">cudaSystem	| cb |	cb := CudaBuilder fromGraph: self.	^cb</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>old-occam-production</category><body package="DistributedModeling" selector="procedureCalled">procedureCalled	"was used by procedure Definition skeleton. this is now replaced by hand coding       in the include file "	| nodeDictionary nbInLinks nbOutLinks lastNode |	nodeDictionary := Dictionary new.	self nodes do: 			[:aNode |			nbInLinks := aNode inputLinks size.			nbOutLinks := aNode outputLinks size.			lastNode := nodeDictionary at: aNode processName ifAbsent: [nil].			lastNode isNil				ifFalse: 					[nbInLinks := nbInLinks max: lastNode first.					nbOutLinks := nbOutLinks max: lastNode last.					nodeDictionary at: aNode processName put: aNode].			nodeDictionary at: aNode processName put: (Array with: nbInLinks with: nbOutLinks)].	^nodeDictionary</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="protocolName">protocolName	^self networkName , '.proto'</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="programMain">programMain	"Entry point for code generation. Also defines the Occam code structure. "	| aStream |	sharedVariables := true.	aStream := String new writeStream.	aStream cr.	self statisticsOn: aStream.	aStream cr.	self authorDefinitionOn: aStream indent: 0.	self dataIncludeOn: aStream indent: 0.	sharedVariables		ifTrue: 			[aStream cr.			self processTableOn: aStream indent: 0.			self processTableLocationsOn: aStream indent: 0]		ifFalse: 			[aStream cr.			self processTableNoPrintOn: aStream indent: 0].	aStream cr.	self includesOn: aStream indent: 0.	"Was used to produce skeleton for a node process	aStream cr.	self procedureDefinitionOn: aStream indent: 0."	"System declaration with i/os for Unix "	aStream		cr;		nextPutAll: 'PROC ' , self networkName					, '(CHAN OF BYTE stdin, stdout, stderr)';		cr;		cr.	self declareOn: aStream indent: 1.	self programBodyOn: aStream indent: 1.	aStream		nextPutAll: ':';		cr.	^aStream contents</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="includesOn:indent:">includesOn: aStream indent: indent      "This insert library declaration and include of the behaviour code.       The place where the actual process program is developped.       The trick provides clean isolation of behavks "	self spaceOn: aStream indent: indent.	aStream		nextPutAll: '#USE "course.lib"';		cr;		cr.	self constantsOn: aStream indent: indent.	aStream		cr;		nextPutAll: '#INCLUDE "'.	aStream nextPutAll: self includeFilename.	aStream		nextPut: $";		cr</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>private</category><body package="DistributedModeling" selector="outputChannelArrayName">outputChannelArrayName	^'out'</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>accessing</category><body package="DistributedModeling" selector="statistics:">statistics: anObject	statistics := anObject</body></methods><methods><class-id>AlgoDis.NetworkGraph</class-id> <category>occam-production</category><body package="DistributedModeling" selector="processTableNoPrintOn:indent:">processTableNoPrintOn: aStream indent: indent		| max |	self buildTable.	max := self table		inject: 0		into: [:sz :array | sz max: (array at: 2) size].	self maxProcessName: max</body></methods><methods><class-id>AlgoDis.NetworkLink</class-id> <category>accessing</category><body package="DistributedModeling" selector="source">source	^source</body></methods><methods><class-id>AlgoDis.NetworkLink</class-id> <category>building</category><body package="DistributedModeling" selector="channelName">channelName	^ self source name, '.' , self target name</body></methods><methods><class-id>AlgoDis.NetworkLink</class-id> <category>accessing</category><body package="DistributedModeling" selector="source:">source: aValue	source := aValue</body></methods><methods><class-id>AlgoDis.NetworkLink</class-id> <category>accessing</category><body package="DistributedModeling" selector="target">target	^target</body></methods><methods><class-id>AlgoDis.NetworkLink</class-id> <category>accessing</category><body package="DistributedModeling" selector="target:">target: aValue	target := aValue</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>building</category><body package="DistributedModeling" selector="buildNetAndDisplayOn:">buildNetAndDisplayOn: aGC	| graphAndComposite |	self filename isNil ifTrue: [self filename: (Dialog requestFileName: 'name for this net' default: 'aMap')].	graphAndComposite := NetworkGeometry				knownNetwork: self				drawingOnlyOn: aGC				title: self filename , 'Range' , self portee printString , 'Points' , self points size printString.	^graphAndComposite</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="bounds:">bounds: anObject	bounds := anObject</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="points:">points: anObject	points := anObject</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="zones">zones	^zones</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="bounds">bounds	^bounds</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="pointDictionary">pointDictionary	^pointDictionary</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="colNodes:">colNodes: anObject	colNodes := anObject</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="portee:">portee: anObject	portee := anObject</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="filename">filename	^filename</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="connectivity">connectivity	^connectivity</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="portee">portee	^portee</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="points">points	^points</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>building</category><body package="DistributedModeling" selector="buildGraph:">buildGraph: gc	| netAndDicoAndComposite |	"self halt."	netAndDicoAndComposite := self buildNetAndDisplayOn: gc.	self lastGraph: netAndDicoAndComposite last</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="connectivity:">connectivity: anObject	connectivity := anObject</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>building</category><body package="DistributedModeling" selector="buildNet">buildNet	| networkGraph |	self filename isNil ifTrue: [self filename: (Dialog requestFileName: 'name for this net' default: 'aMap')].	networkGraph := NetworkGeometry				knownNetwork: self				drawing: true				title: self filename , 'Range' , self portee printString , 'Points' , self points size printString.	self halt.	^networkGraph</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="originOffset:">originOffset: anObject	originOffset := anObject</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="filename:">filename: anObject	filename := anObject</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="zones:">zones: anObject	zones := anObject</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="pointDictionary:">pointDictionary: anObject	pointDictionary := anObject</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="colNodes">colNodes	^colNodes</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="lastGraph:">lastGraph: anObject	lastGraph := anObject</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="originOffset">originOffset	^originOffset</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="lastGraph">lastGraph	^lastGraph</body></methods><methods><class-id>AlgoDis.PickModel</class-id> <category>building</category><body package="DistributedModeling" selector="buildNetAndDisplayOn:graphicParameters:">buildNetAndDisplayOn: aGC graphicParameters: graphicParameters	| graphAndComposite |	self filename isNil ifTrue: [self filename: (Dialog requestFileName: 'name for this net' default: 'aMap')].	graphAndComposite := NetworkGeometry				knownNetwork: self				drawingOnlyOn: aGC				title: self filename , 'Range' , self portee printString , 'Points' , self points size printString				parameters: graphicParameters.	^graphAndComposite</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="diameterMax:">diameterMax: anObject	diameterMax := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="networks">networks	^networks</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="processes">processes	^processes</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="timeGen">timeGen	^timeGen</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>printing</category><body package="DistributedModeling" selector="printOn:">printOn: aStream		self range printOn: aStream.	aStream tab.	self points printOn: aStream.	aStream tab.	self diameterMax printOn: aStream.	aStream tab.	self networks printOn: aStream.	aStream tab.	self processes printOn: aStream.	aStream tab.	self minFanout printOn: aStream.	aStream tab.	self maxFanout printOn: aStream.	aStream tab.	self channels printOn: aStream.	aStream tab.	self timeGen printOn: aStream.	aStream tab.	self timeKroc printOn: aStream.	aStream tab.	self timeRun printOn: aStream.	aStream tab.	self coverageArea rounded printOn: aStream.	aStream tab.	self percentCoverage printOn: aStream.	aStream tab.</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="range">range	^range</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="points">points	^points</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>printing</category><body package="DistributedModeling" selector="topoPrintJgraph">topoPrintJgraph	"self new topoPrintJgraph  "		| dataArray aStream statFile rs |	statFile := Dialog requestFileName: 'stats files ?' default: '*stats*'.	statFile isEmpty		ifTrue: [^nil]		ifFalse:			[rs := statFile asFilename readStream.			dataArray := #(#range #diameterMax #networks #processes #minFanout #maxFanout).			aStream := (statFile , 'topos.j') asFilename writeStream.			self printJgraphOn: aStream title: statFile data: dataArray from: rs].	aStream close</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>printing</category><body package="DistributedModeling" selector="printJgraphOn:title:data:from:">printJgraphOn: aStream title: title data: dataArray from: rStream		| preamble postamble line tokens ns iv sel dico ranges values ord colors colorIndex color |	colors := #(#red #green #blue #purple #yellow #magenta #cyan)		collect: [:name | ColorValue perform: name].	colorIndex := 1.	dico := Dictionary new.	dataArray		do:			[:key | 			dico				at: key				put: OrderedCollection new].	preamble := 'newgraph             '.	aStream nextPutAll: preamble.	iv := self class instVarNames.	[rStream atEnd]		whileFalse:			[line := rStream upTo: Character cr.			line isEmpty				ifFalse:					[tokens := Scanner new scanTokens: line.					ns := self class new.					iv						with: tokens						do:							[:ivn :tokenx | 							sel := (ivn , ':') asSymbol.							ns perform: sel with: tokenx.							(dataArray includes: ivn asSymbol)								ifTrue: [(dico at: ivn asSymbol) add: tokenx]]]].	ord := dataArray		copyFrom: 2		to: dataArray size.	ord		do:			[:data | 			aStream nextPutAll: 'newcurve pts '.			color := colors at: colorIndex.			colorIndex := colorIndex + 1.			ranges := dico at: #range.			values := dico at: data.			ranges				with: values				do:					[:x :y | 					x printOn: aStream.					aStream space.					y printOn: aStream.					aStream space].			aStream nextPutAll: ' color '.			aStream				nextPutAll: color green printString;				space.			aStream				nextPutAll: color red printString;				space.			aStream				nextPutAll: color blue printString;				space.			aStream				nextPutAll: ' linetype solid marktype none label : ';				nextPutAll: data asString;				space;				cr].	postamble := '            xaxis min  ' , (dico at: #range) first printString , ' max  '		, (dico at: #range) last printString ,			' draw_hash_marks label : range             title  :  ' , title.	aStream nextPutAll: postamble.	aStream cr.	rStream close</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>converting</category><body package="DistributedModeling" selector="asArray">asArray		| array |	array := self class instVarNames collect: [:w | self perform: w asSymbol].	^array</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="timeCuda">timeCuda	^timeCuda</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="points:">points: anObject	points := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="timeRun">timeRun	^timeRun</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="minFanout">minFanout	^minFanout</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="loopOk:">loopOk: anObject	loopOk := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="coverageArea:">coverageArea: anObject	coverageArea := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="timeNvcc">timeNvcc	^timeNvcc</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="timeGen:">timeGen: anObject	timeGen := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>printing</category><body package="DistributedModeling" selector="testPrintJgraph">testPrintJgraph	"NetworkStatistics  new testPrintJgraph  "		| dataArray aStream statFile rs filename |	statFile := Dialog requestFileName: 'stats files ?' default: '*stats*'.	statFile isEmpty		ifTrue: [^nil]		ifFalse:			[rs := statFile asFilename readStream.			dataArray := #(#range #diameterMax #networks #processes #minFanout #maxFanout).			aStream := (filename := statFile , '-topo.j') asFilename writeStream.			self printJgraphOn: aStream title: statFile data: dataArray from: rs.			aStream close.			 			rs := statFile asFilename readStream.			filename := statFile , '-time.j'.			dataArray := #(#range #channels #timeGen #timeKroc #timeRun).			aStream := filename asFilename writeStream.			self printJgraphOn: aStream title: statFile data: dataArray from: rs.			aStream close.			 ]</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="timeRun:">timeRun: anObject	timeRun := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="maxFanout">maxFanout	^maxFanout</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="minFanout:">minFanout: anObject	minFanout := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="coverageArea">coverageArea	^coverageArea</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="processes:">processes: anObject	processes := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="range:">range: anObject	range := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="timeCuda:">timeCuda: anObject	timeCuda := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="timeKroc:">timeKroc: anObject	timeKroc := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="timeNvcc:">timeNvcc: anObject	timeNvcc := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="loopOk">loopOk	^loopOk</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	" *** Edit the following to properly initialize instance variables ***"	"super initialize."	range := nil.	points := nil.	diameterMax := nil.	networks := nil.	processes := nil.	minFanout := nil.	maxFanout := nil.	channels := nil.	timeGen := nil.	timeKroc := nil.	timeRun := nil.	loopOk := true.	coverageArea := 0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="channels">channels	^channels</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="channels:">channels: anObject	channels := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="percentCoverage:">percentCoverage: anObject	percentCoverage := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="maxFanout:">maxFanout: anObject	maxFanout := anObject</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="timeKroc">timeKroc	^timeKroc</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>printing</category><body package="DistributedModeling" selector="timePrintJgraph">timePrintJgraph	"self new timePrintJgraph  "		| dataArray aStream statFile rs |	statFile := Dialog requestFileName: 'stats files ?' default: '*stats*'.	statFile isEmpty		ifTrue: [^nil]		ifFalse:			[rs := statFile asFilename readStream.			dataArray := #(#range #channels #timeGen #timeKroc #timeRun #timeNvcc #timeCuda).			aStream := (statFile , 'times.j') asFilename writeStream.			self printJgraphOn: aStream title: statFile data: dataArray from: rs].	aStream close</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="diameterMax">diameterMax	^diameterMax</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="percentCoverage">percentCoverage	^percentCoverage</body></methods><methods><class-id>AlgoDis.NetworkStatistics</class-id> <category>accessing</category><body package="DistributedModeling" selector="networks:">networks: anObject	networks := anObject</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="width">width	^width</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="nbNoeuds">nbNoeuds	^nbNoeuds</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="network">network	^network</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>computing</category><body package="DistributedModeling" selector="updateGeneratorsWith:">updateGeneratorsWith: net	| uiGenerators connectivity |	uiGenerators := AlgoDis.UINetworkGeometry allInstances.	uiGenerators isEmpty		ifTrue: 			[AlgoDis.UINetworkGeometry open.			uiGenerators := AlgoDis.UINetworkGeometry allInstances].	uiGenerators do: 			[:aGenerator |			connectivity := net buildNetworkLocalized.			aGenerator leStyle value: #forSensors.			aGenerator theNbSystems value: net points size.			aGenerator theRadius value: net portee.			aGenerator theSize value: net windowSize.			aGenerator doGraphic value: true.			aGenerator leCode value: connectivity printString]</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="rayon">rayon	^rayon</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>computing</category><body package="DistributedModeling" selector="construireReseau">construireReseau	| comp ng randomStream x y |	ng := NetworkGeometry new.	ng portee: rayon value.	x := width value.	y := height value.	ng windowSize: (x min: y).	ng windowBounds: x @ y.	comp := CompositePart new.	randomStream := Random new.	" set upan object"	ng randomPointsInBounds: nbNoeuds value stream: randomStream.	ng drawCirclesOnComposite: comp filled: false.	ng drawColorsOnComposite: comp randomStream: randomStream.	composite := comp.	network := ng</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="height">height	^height</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="composite:">composite: anObject	composite := anObject</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="nbNoeuds:">nbNoeuds: anObject	nbNoeuds := anObject</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="rayon:">rayon: anObject	rayon := anObject</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="network:">network: anObject	network := anObject</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="height:">height: anObject	height := anObject</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="composite">composite	^composite</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="image">image	^image</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="width:">width: anObject	width := anObject</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	image := nil.	composite := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="image:">image: anObject	image := anObject</body></methods><methods><class-id>AlgoDis.RandomModel</class-id> <category>computing</category><body package="DistributedModeling" selector="ecrireReseau">ecrireReseau	self updateGeneratorsWith: network</body></methods><methods><class-id>AlgoDis.UINetworkGeometryController</class-id> <category>menu messages</category><body package="DistributedModeling" selector="accept">accept	Dialog warn: 'kiki!'</body></methods><methods><class-id>UIRandomNodes</class-id> <category>accessing</category><body package="DistributedModeling" selector="view">view	^view</body></methods><methods><class-id>UIRandomNodes</class-id> <category>aspects</category><body package="DistributedModeling" selector="boundsX">boundsX	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	view model value width isNil ifTrue: [view model value width: 0 asValue].	^view model value width</body></methods><methods><class-id>UIRandomNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="generer">generer	"This stub method was generated by UIDefiner"	view model value construireReseau.	view model changed: #value</body></methods><methods><class-id>UIRandomNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="chargerImage">chargerImage	"This stub method was generated by UIDefiner"	| fichier image imageReader |	fichier := Dialog				requestFileName: 'Ouvrir un fichier image'				default: '*.png'				version: #mustBeOld				ifFail: [^self].	"Dialog warn: fichier."	imageReader := ImageReader fromFile: fichier.	image := imageReader image.	self boundsY value: image height.	self boundsX value: image width.	view model value image: image.	view model changed: #value.	^self</body></methods><methods><class-id>UIRandomNodes</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	view := AlgoDis.RandomView new.	view model: AlgoDis.RandomModel new asValue.	view model onChangeSend: #invalidate to: view</body></methods><methods><class-id>UIRandomNodes</class-id> <category>aspects</category><body package="DistributedModeling" selector="boundsY">boundsY	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	view model value height isNil ifTrue: [view model value height: 0 asValue].	^view model value height</body></methods><methods><class-id>UIRandomNodes</class-id> <category>accessing</category><body package="DistributedModeling" selector="view:">view: anObject	view := anObject</body></methods><methods><class-id>UIRandomNodes</class-id> <category>aspects</category><body package="DistributedModeling" selector="rayon">rayon	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	view model value rayon isNil ifTrue: [view model value rayon: 0 asValue].	^view model value rayon</body></methods><methods><class-id>UIRandomNodes</class-id> <category>aspects</category><body package="DistributedModeling" selector="nbNoeuds">nbNoeuds	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	view model value nbNoeuds isNil ifTrue: [view model value nbNoeuds: 0 asValue].	^view model value nbNoeuds</body></methods><methods><class-id>UIRandomNodes</class-id> <category>actions</category><body package="DistributedModeling" selector="ecrireReseau">ecrireReseau	"This stub method was generated by UIDefiner"	view model value ecrireReseau</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="nameColor:">nameColor: anObject	nameColor := anObject</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="innerCircleColor">innerCircleColor	^innerCircleColor</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="networkColor">networkColor	^networkColor</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="drawNetwork:">drawNetwork: anObject	drawNetwork := anObject</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="drawNetwork">drawNetwork	^drawNetwork</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="outerCircleColor">outerCircleColor	^outerCircleColor</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="drawName">drawName	^drawName</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="outerCircleColor:">outerCircleColor: anObject	outerCircleColor := anObject</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="drawCircle:">drawCircle: anObject	drawCircle := anObject</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="innerCircleColor:">innerCircleColor: anObject	innerCircleColor := anObject</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	drawCircle := true.	drawNetwork := true.	drawName := false.	outerCircleColor := ColorValue perform: #black.	innerCircleColor := ColorValue perform: #blue.	nameColor := ColorValue perform: #blue.	networkColor := ColorValue perform: #red.	^self</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="drawCircle">drawCircle	^drawCircle</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="networkColor:">networkColor: anObject	networkColor := anObject</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="nameColor">nameColor	^nameColor</body></methods><methods><class-id>Graphics.DrawingParameters</class-id> <category>accessing</category><body package="DistributedModeling" selector="drawName:">drawName: anObject	drawName := anObject</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>accessing</category><body package="DistributedModeling" selector="nodesAt:">nodesAt: i 	^nodes at: i</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>accessing</category><body package="DistributedModeling" selector="addNode:">addNode: aName 	| aNode anOC |	aNode := NetEditNode name: aName.	aNode origin: self center.	nodes add: aNode.	self add: aNode.	edgeWeights do: [:oc | oc add: 0].	anOC := OrderedCollection new: nodes size.	nodes size timesRepeat: [anOC add: 0].	edgeWeights add: anOC.	forces add: 0</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	super initialize.	nodes := OrderedCollection new.	forces := OrderedCollection new.	edgeWeights := OrderedCollection new</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>accessing</category><body package="DistributedModeling" selector="doAnimate:">doAnimate: anime 	doAnimate := anime.	doAnimate		ifTrue: [self startAnimation]		ifFalse: [self stopAnimation]</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>deleting</category><body package="DistributedModeling" selector="remove:">remove: aFigure 	| index |	super remove: aFigure.	aFigure class = NetworkNode ifFalse: [^self].	self changed: #removeNode with: aFigure name.	index := self indexOfNode: aFigure name.	nodes removeAtIndex: index.	edgeWeights do: [:each | each removeAtIndex: index]</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>accessing</category><body package="DistributedModeling" selector="indexOfNode:">indexOfNode: name1 	1 to: nodes size do: [:i | (nodes at: i) name = name1 ifTrue: [^i]].	self error: name1 , ' is not a node'</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>accessing</category><body package="DistributedModeling" selector="removeNode:">removeNode: aName 	| index |	index := self indexOfNode: aName.	self remove: (nodes at: index)</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>accessing</category><body package="DistributedModeling" selector="edgeWeight:from:to:color:">edgeWeight: aNum from: name1 to: name2 color: color 	| i j figure |	i := self indexOfNode: name1.	j := self indexOfNode: name2.	aNum ~~ 0		ifTrue: 			["( directional code 			(edgeWeights at: i) at: j) 			== 0 and: [aNum ~~ 0]"			"Add an edge in the drawing"			figure := (nodes at: i)						connectFromPoint: (nodes at: i) center						to: (nodes at: j)						at: (nodes at: j) center.			figure addStopArrow; lineColor: color. 			self add: figure].	aNum == 0 ifTrue: [self error: 'Need code to delete edge'].	(edgeWeights at: i)		at: j put: aNum.	^(edgeWeights at: j)		at: i put: aNum</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>accessing</category><body package="DistributedModeling" selector="addNode:forNetworkNode:">addNode: aName forNetworkNode: netNode 	| aNode anOC |	aNode := NetEditNode name: aName.	aNode origin: self center.	aNode node: netNode.	nodes add: aNode.	self add: aNode.	edgeWeights do: [:oc | oc add: 0].	anOC := OrderedCollection new: nodes size.	nodes size timesRepeat: [anOC add: 0].	edgeWeights add: anOC.	forces add: 0</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>animation</category><body package="DistributedModeling" selector="step">step	"Move nodes. Each node repulses others with a force that 	is inverse to their distance. Some nodes have springs, and 	the spring force is constant. Not realistic, but it works."	| center repulsiveConstant stepSize |	nodes isEmpty ifTrue: [^self].	center := self bounds center.	repulsiveConstant := (RepulsionForce / nodes size sqrt) truncated.	1 to: forces size do: [:i | forces at: i put: 0 @ 0].	1 to: nodes size		do: 			[:i | 			| n1 sum center1 |			n1 := nodes at: i.			center1 := n1 center.	"Make all nodes attracted to the center of the picture"			sum := forces at: i.			center ~= center1 ifTrue: [sum := sum + ((center - center1) unitVector * 10)].			i + 1 to: nodes size				do: 					[:j | 					| n2 delta |					n2 := nodes at: j.					delta := center1 - n2 center.					delta = (0 @ 0)						ifFalse: 							[| spring pairForce distance |							distance := delta x * delta x + (delta y * delta y).							pairForce := delta unitVector * repulsiveConstant / distance.							spring := (edgeWeights at: i)										at: j.							spring ~~ 0 ifTrue: [pairForce := pairForce - (delta unitVector * spring) truncated].							sum := sum + pairForce.							forces at: j put: (forces at: j)									- pairForce]].			forces at: i put: sum].	stepSize := forces inject: 0 into: [:max :elem | (elem x abs max: elem y abs)					max: max].	stepSize &lt; 1 ifTrue: [^self].	nodes with: forces do: [:node :force | node translateBy: force / 10]</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>accessing</category><body package="DistributedModeling" selector="addNode:forNetworkNode:color:">addNode: aName forNetworkNode: netNode color: aColor 	| aNode anOC windowCenter |	windowCenter := self bounds center.	aNode := NetEditNode				name: aName				color: aColor				node: netNode.	aNode origin: 0 @ 0.	aNode translateBy: windowCenter /2.	nodes add: aNode.	self add: aNode.	edgeWeights do: [:oc | oc add: 0].	anOC := OrderedCollection new: nodes size.	nodes size timesRepeat: [anOC add: 0].	edgeWeights add: anOC.	forces add: 0</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>accessing</category><body package="DistributedModeling" selector="edgeWeight:from:to:">edgeWeight: aNum from: name1 to: name2 	| i j figure |	i := self indexOfNode: name1.	j := self indexOfNode: name2.	(((edgeWeights at: i) at: j) == 0 and: [aNum ~~ 0]) 		ifTrue: 			["Add an edge in the drawing"			figure := (nodes at: i) 						connectFromPoint: (nodes at: i) center						to: (nodes at: j)						at: (nodes at: j) center.			self add: figure].	aNum == 0 ifTrue: [self error: 'Need code to delete edge'].	(edgeWeights at: i) at: j put: aNum.	^(edgeWeights at: j) at: i put: aNum</body></methods><methods><class-id>AlgoDis.NetEditDrawing</class-id> <category>accessing</category><body package="DistributedModeling" selector="nodeNamed:">nodeNamed: name1 	1 to: nodes size do: [:i | (nodes at: i) name = name1 ifTrue: [^nodes at: i]].	self error: name1 , ' is not a node'</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="points">points	^points</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="windowSize:">windowSize: anObject	windowSize := anObject</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="randomPoints:stream:">randomPoints: nb stream: stream 	| x y |	self 		points: ((1 to: nb) collect: 					[:i | 					x := (stream next * self portee) rounded.					y := (stream next * self portee) rounded.					x @ y])</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="networkCon:">networkCon: anObject	networkCon := anObject</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>computing</category><body package="DistributedModeling" selector="areaIntersect:with:">areaIntersect: circle1 with: circle2	"Aire de l'intersection des deux disques délimités respectivement par circle1 et circle2"	| r1 r2 rMin rMax c1 c2 d a |	r1 := circle1 radius.	r2 := circle2 radius.	rMin := r1 min: r2.	rMax := r1 max: r2.	c1 := circle1 center.	c2 := circle2 center.	d := c1 dist: c2.	d = 0		ifTrue: 			["les deux disques sont confondus"			^rMin * rMin * Double pi].	a := rMin squared				* ((d squared + rMin squared - rMax squared) / (2 * d * rMin)) arcCos					+ (rMax squared							* ((d squared + rMax squared - rMin squared) / (2 * d * rMax)) arcCos)					- (((rMin + rMax - d) * (d + rMin - rMax) * (d - rMin + rMax)							* (d + rMin + rMax)) sqrt							/ 2).	^a</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>building</category><body package="DistributedModeling" selector="doNetwork:by:">doNetwork: aName by: xValue	| key accessibles networkConnectivity nodeDic attributes |	nodeDic := Dictionary new.	networkConnectivity := AlgoDis.NetworkConnectivity new.	networkConnectivity name: aName.	networkConnectivity communications: #('none' 'defined').	self points keysAndValuesDo: 			[:index :eachPoint |			accessibles := self pointsAccessibleFrom: index by: xValue.			accessibles := accessibles collect: [:acc | self makeNameFromIndex: acc].			key := self makeNameFromIndex: index.			attributes := AlgoDis.NetworkNodeAttributes						nodeName: key asString						fanOutNodes: accessibles						procedureName: 'Node'.			accessibles isEmpty ifFalse: [nodeDic at: key put: attributes]].	networkConnectivity nodeDictionary: nodeDic.	self networkCon: networkConnectivity.	^networkConnectivity</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>building</category><body package="DistributedModeling" selector="buildNetworkLocalized">buildNetworkLocalized	| key accessibles nw nodeDic attributes |	nodeDic := Dictionary new.	nw := AlgoDis.NetworkConnectivity new.	nw name: 'someNetwork'.	nw communications: #('none' 'defined').	self points keysAndValuesDo: 			[:index :eachPoint |			accessibles := self pointsAccessibleFrom: eachPoint.			accessibles := accessibles collect: [:acc | self makeNameFromIndex: acc].			key := self makeNameFromIndex: index.			attributes := AlgoDis.NetworkNodeAttributes						nodeName: key asString						fanOutNodes: accessibles						procedureName: 'Node'						point: eachPoint						range: self portee.			accessibles isEmpty ifFalse: [nodeDic at: key put: attributes]].	nw nodeDictionary: nodeDic.	self networkCon: nw.	^nw</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="drawNames:onComposite:withColor:">drawNames: pointDico onComposite: comp withColor: colorValue	| text gaw offset |	offset := 5 @ -5.	self points do: 			[:point |			text := ComposedText withText: (pointDico at: point).			gaw := (GraphicsAttributesWrapper on: text)						attributes: (GraphicsAttributes new paint: colorValue).			comp add: gaw at: point + offset]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="drawNames:onComposite:randomStream:">drawNames: pointDico onComposite: comp randomStream: stream	| text gaw offset |	offset := 5 @ -5.	self points do: 			[:point |			text := ComposedText withText: (pointDico at: point).			gaw := (GraphicsAttributesWrapper on: text)						attributes: (GraphicsAttributes new paint: (ColorValue perform: #blue)).			comp add: gaw at: point + offset]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="randomPointsInBounds:stream:">randomPointsInBounds: nb stream: stream		| x y |	self		points:			((1 to: nb)				collect:					[:i | 					x := (stream next * self windowBounds x) rounded.					y := (stream next * self windowBounds y) rounded.					x @ y])</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="drawCirclesOnComposite:filled:attributes:">drawCirclesOnComposite: comp filled: isFilled attributes: graphicsNodesAttributes	| circle filledCircle n thisRadius colorOuterCircle colorInnerCircle |	n := 0.	"select color"	colorOuterCircle := graphicsNodesAttributes outerCircleColor.	colorInnerCircle := graphicsNodesAttributes innerCircleColor.	self points do: 			[:point |			| c |			circle := Circle center: point radius: self radius.			isFilled ifTrue: [filledCircle := circle asFiller] ifFalse: [filledCircle := circle asStroker].			comp add: ((GraphicsAttributesWrapper on: filledCircle) attributes: (GraphicsAttributes new paint: colorOuterCircle)).			n := n + 1.			thisRadius := n &lt; 3 ifTrue: [10] ifFalse: [2].			c := Circle center: point radius: thisRadius.			isFilled ifTrue: [filledCircle := c asFiller] ifFalse: [filledCircle := c asStroker].			comp add: ((GraphicsAttributesWrapper on: filledCircle) attributes: (GraphicsAttributes new paint: colorInnerCircle))]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="drawColorsOnComposite:randomStream:by:">drawColorsOnComposite: comp randomStream: stream by: xValue	| line paint newSegment paintIndex colorNames noColor |	colorNames := ColorValue constantNames.	noColor := ColorValue white.	1 to: self points size		do: 			[:index |			| point   block |			point := self points at: index.			paint := noColor.			[paint = noColor] whileTrue: 					[paintIndex := (stream next * colorNames size) ceiling.					paint := ColorValue perform: (colorNames at: paintIndex)].			block :=					[:other |					newSegment := LineSegment from: point to: other.					(self lines includes: newSegment)						ifFalse: 							[self lines add: newSegment.							line := LineSegment from: point to: other.							comp add: ((GraphicsAttributesWrapper on: line asStroker) attributes: (GraphicsAttributes new paint: paint))]].			(index - xValue - 1 &gt;= 1 and: [(index - xValue - 1 rem: xValue) ~= 0])				ifTrue: [block value: (self points at: index - xValue - 1)].			index - xValue &gt;= 1 ifTrue: [block value: (self points at: index - xValue)].			(index - xValue + 1 &gt;= 1 and: [(index - xValue rem: xValue) ~= 0])				ifTrue: [block value: (self points at: index - xValue + 1)].			(index - 1 &gt;= 1 and: [(index - 1 rem: xValue) ~= 0]) ifTrue: [block value: (self points at: index - 1)].			(index + 1 &lt;= self points size and: [(index rem: xValue) ~= 0])				ifTrue: [block value: (self points at: index + 1)].			(index + xValue - 1 &lt;= self points size and: [(index + xValue - 1 rem: xValue) ~= 0])				ifTrue: [block value: (self points at: index + xValue - 1)].			index + xValue &lt;= self points size ifTrue: [block value: (self points at: index + xValue)].			(index + xValue + 1 &lt;= self points size and: [(index + xValue rem: xValue) ~= 0])				ifTrue: [block value: (self points at: index + xValue + 1)]]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="points:">points: anObject	points := anObject</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>statistics</category><body package="DistributedModeling" selector="statisticsTo:">statisticsTo: stats	| array |	array := self statisticNumbers.	stats processes: array first.	stats minFanout: (array at: 3).	stats maxFanout: (array at: 4).	stats channels: (array at: 2).	stats coverageArea: (array at: 6).	stats percentCoverage: (array at: 7)."self halt."</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>private</category><body package="DistributedModeling" selector="makeNameFromIndex:">makeNameFromIndex: index 	^'P' , index printString</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="drawColorsOnComposite:randomStream:">drawColorsOnComposite: comp randomStream: stream		| lenth line paint newSegment paintIndex |	self points		do:			[:point | 			| noColor |			noColor := ColorValue white.			paint := noColor.			[paint = noColor]				whileTrue:					[paintIndex := (stream next * ColorValue constantNames size) ceiling.					paint := ColorValue perform: (ColorValue constantNames at: paintIndex)].paint := ColorValue black.			self points				do:					[:other | 					other = point						ifFalse:							[newSegment := LineSegment from: point to: other.							(self lines includes: newSegment)								ifFalse:									[self lines add: newSegment.									lenth := (LineSegment from: point to: other) length.									lenth &lt; self radius										ifTrue:											[line := LineSegment from: point to: other.											comp												add:													((GraphicsAttributesWrapper on: line asStroker)														attributes: (GraphicsAttributes new paint: paint))]]]]]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>computing</category><body package="DistributedModeling" selector="isInRange:with:">isInRange: circle1 with: circle2	"Vrai si la distance entre le centre des deux est inférieur au minimum du rayon des deux cercles, faux sinon"	| r1 r2 c1 c2 d r |	r1 := circle1 radius.	r2 := circle2 radius.	r := r1 min: r2.	c1 := circle1 center.	c2 := circle2 center.	d := c1 dist: c2.	^d &lt;= r</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="drawCirclesOnComposite:">drawCirclesOnComposite: comp 	| circle filledCircle n paint thisRadius |	n := 0.	self points do: 			[:point | 			| c |			circle := Circle center: point radius: self radius.			filledCircle := circle asFiller.			comp add: ((GraphicsAttributesWrapper on: filledCircle) 						attributes: (GraphicsAttributes new 								paint: (ColorValue perform: #white))).			n := n + 1.			thisRadius := n &lt; 3 ifTrue: [10] ifFalse: [2].			c := Circle center: point radius: thisRadius.			filledCircle := c asFiller.			paint := ColorValue perform: #black.			comp add: ((GraphicsAttributesWrapper on: filledCircle) 						attributes: (GraphicsAttributes new paint: paint))]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="gridOfPoints:">gridOfPoints: nb		| horizontalSize verticalSize factor pointsByLine numberOfRows yPos xPos hGap vGap |	horizontalSize := self windowSize x.	verticalSize := self windowSize y.	factor := (nb / (horizontalSize * verticalSize)) sqrt.	pointsByLine := (factor * horizontalSize) rounded.	numberOfRows := (factor * verticalSize) rounded.	hGap := (horizontalSize / (pointsByLine + 1)) rounded.	vGap := (verticalSize / (numberOfRows + 1)) rounded.	points := OrderedCollection new.	1		to: numberOfRows		do:			[:row | 			yPos := vGap * row.			1				to: pointsByLine				do:					[:column | 					xPos := hGap * column.					points add: xPos @ yPos]]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>building</category><body package="DistributedModeling" selector="doNetworkLocalized:">doNetworkLocalized: aName	| key accessibles networkConnectivity nodeDic attributes |	nodeDic := Dictionary new.	networkConnectivity := AlgoDis.NetworkConnectivity new.	networkConnectivity name: aName.	networkConnectivity communications: #('none' 'defined').	self points keysAndValuesDo: 			[:index :eachPoint |			accessibles := self pointsAccessibleFrom: eachPoint.			accessibles := accessibles collect: [:acc | self makeNameFromIndex: acc].			key := self makeNameFromIndex: index.			attributes := AlgoDis.NetworkNodeAttributes						nodeName: key asString						fanOutNodes: accessibles						procedureName: 'Node'						point: eachPoint						range: self portee.			accessibles isEmpty ifFalse: [nodeDic at: key put: attributes]].	networkConnectivity nodeDictionary: nodeDic.	self networkCon: networkConnectivity.	^networkConnectivity</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="drawLinesOnComposite:randomStream:">drawLinesOnComposite: comp randomStream: stream		| lenth line paint newSegment paintIndex lineSet |	lineSet := Set new.	self points		do:			[:point | 			self points				do:					[:other | 					other = point						ifFalse:							[newSegment := LineSegment from: point to: other.							(lineSet includes: newSegment)								ifFalse:									[lineSet add: newSegment.									lenth := (LineSegment from: point to: other) length.									lenth &lt; self radius										ifTrue:											[line := LineSegment from: point to: other.											paintIndex := (stream next * ColorValue constantNames size)												ceiling.											paint := ColorValue												perform: (ColorValue constantNames at: paintIndex).											comp												add:													((GraphicsAttributesWrapper on: line asStroker)														attributes: (GraphicsAttributes new paint: paint))]]]]].	self lines addAll: lineSet</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>building</category><body package="DistributedModeling" selector="doNetworkAutomataCellular:">doNetworkAutomataCellular: aName	| key accessibles networkConnectivity nodeDic attributes |	nodeDic := Dictionary new.	networkConnectivity := AlgoDis.NetworkConnectivity new.	networkConnectivity name: aName.	networkConnectivity communications: #('none' 'defined').	self points keysAndValuesDo: 			[:index :eachPoint |			accessibles := self pointsAccessibleFrom: eachPoint.			accessibles := accessibles collect: [:acc | self makeNameFromIndex: acc].			key := self makeNameFromIndex: index.			attributes := AlgoDis.NetworkNodeAttributes						nodeName: key asString						fanOutNodes: accessibles						procedureName: 'Node'.			accessibles isEmpty ifFalse: [nodeDic at: key put: attributes]].	networkConnectivity nodeDictionary: nodeDic.	self networkCon: networkConnectivity.	^networkConnectivity</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="drawCirclesOnComposite:filled:">drawCirclesOnComposite: comp filled: isFilled	| circle filledCircle n thisRadius colorOuterCircle colorInnerCircle |	n := 0.	"select color"	colorOuterCircle := ColorValue perform: #black.	colorInnerCircle := ColorValue perform: #blue.	self points do: 			[:point |			| c |			circle := Circle center: point radius: self radius.			isFilled ifTrue: [filledCircle := circle asFiller] ifFalse: [filledCircle := circle asStroker].			comp add: ((GraphicsAttributesWrapper on: filledCircle) attributes: (GraphicsAttributes new paint: colorOuterCircle)).			n := n + 1.			thisRadius := n &lt; 3 ifTrue: [10] ifFalse: [2].			c := Circle center: point radius: thisRadius.			isFilled ifTrue: [filledCircle := c asFiller] ifFalse: [filledCircle := c asStroker].			comp add: ((GraphicsAttributesWrapper on: filledCircle) attributes: (GraphicsAttributes new paint: colorInnerCircle))]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>transforming</category><body package="DistributedModeling" selector="scaledBy:">scaledBy: amount	" *** This method was defined by Geometric as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>transforming</category><body package="DistributedModeling" selector="translatedBy:">translatedBy: amount	" *** This method was defined by Geometric as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>private</category><body package="DistributedModeling" selector="pointsAccessibleFrom:">pointsAccessibleFrom: point		| newSegment others length another |	others := Set new.	self points		keysAndValuesDo:			[:index :other | 			another := other ~= point.			newSegment := LineSegment from: point to: other.			length := (LineSegment from: point to: other) length.			(length &lt; self radius and: [another]) ifTrue: [others add: index]].	^others asSortedCollection asArray</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="displayStrokedOn:">displayStrokedOn: aGraphicsContext	" *** This method was defined by Geometric as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="displayFilledOn:">displayFilledOn: aGraphicsContext	" *** This method was defined by Geometric as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>transforming</category><body package="DistributedModeling" selector="radius">radius		self windowSize isNil		ifTrue: [^(self portee / 4) rounded]		ifFalse: [^self portee]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>computing</category><body package="DistributedModeling" selector="circleFromArray:">circleFromArray: a	^Circle center: (a point ) radius: (a range)</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>computing</category><body package="DistributedModeling" selector="checkSize:with:">checkSize: t1 with: t2	"	***This is decompiled code.*** 	No source was available"	"self halt."	| freePos aPoint foundCircle len nonCouverts totalPoints diff |	freePos := OrderedCollection new.	1 to: windowSize		do: 			[:y |			1 to: windowSize				do: 					[:x |					aPoint := x @ y.					foundCircle := false.					points do: 							[:eachSensorPos |							len := (LineSegment from: aPoint to: eachSensorPos) length.							len &lt; self portee ifTrue: [foundCircle := true]].					foundCircle ifFalse: [freePos add: aPoint]]].	nonCouverts := freePos size.	"self halt."	totalPoints := self windowSize squared.	diff := totalPoints - nonCouverts.	Transcript		show: t2 printString;		tab;		show: diff printString;		cr.	^diff</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="randomPointsInWindow:stream:">randomPointsInWindow: nb stream: stream		| x y |	self		points:			((1 to: nb)				collect:					[:i | 					x := (stream next * self windowSize) rounded.					y := (stream next * self windowSize) rounded.					x @ y])</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="drawColorsOnComposite:withColor:">drawColorsOnComposite: comp withColor: aColorName	| lenth line paint newSegment |	paint := aColorName.	self points do: 			[:point |			self points do: 					[:other |					other = point						ifFalse: 							[newSegment := LineSegment from: point to: other.							(self lines includes: newSegment)								ifFalse: 									[self lines add: newSegment.									lenth := (LineSegment from: point to: other) length.									lenth &lt; self radius										ifTrue: 											[line := LineSegment from: point to: other.											comp add: ((GraphicsAttributesWrapper on: line asStroker) attributes: (GraphicsAttributes new paint: paint))]]]]]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="drawColorsOnComposite:">drawColorsOnComposite: comp	| lenth line paint newSegment |	self points do: 			[:point |			paint := ColorValue perform: #yellow.			self points do: 					[:other |					other = point						ifFalse: 							[newSegment := LineSegment from: point to: other.							(self lines includes: newSegment)								ifFalse: 									[self lines add: newSegment.									lenth := (LineSegment from: point to: other) length.									lenth &lt; self radius										ifTrue: 											[line := LineSegment from: point to: other.											comp add: ((GraphicsAttributesWrapper on: line asStroker) attributes: (GraphicsAttributes new paint: paint))]]]]]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>building</category><body package="DistributedModeling" selector="doNetwork:">doNetwork: aName	| key accessibles nw nodeDic attributes |	nodeDic := Dictionary new.	nw := AlgoDis.NetworkConnectivity new.	nw name: aName.	nw communications: #('none' 'defined').	self points keysAndValuesDo: 			[:index :eachPoint |			accessibles := self pointsAccessibleFrom: eachPoint.			accessibles := accessibles collect: [:acc | self makeNameFromIndex: acc].			key := self makeNameFromIndex: index.			attributes := AlgoDis.NetworkNodeAttributes						nodeName: key asString						fanOutNodes: accessibles						procedureName: 'Node'.			accessibles isEmpty ifFalse: [nodeDic at: key put: attributes]].	nw nodeDictionary: nodeDic.	self networkCon: nw.	^nw</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	" *** Edit the following to properly initialize instance variables ***"	super initialize.	points := nil.	lines := Set new: 10000.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="networkCon">networkCon	^networkCon</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>statistics</category><body package="DistributedModeling" selector="statistics">statistics		| ws |	ws := WriteStream on: String new.	self statisticsOn: ws.	^ws contents</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>private</category><body package="DistributedModeling" selector="pointsAccessibleFrom:by:">pointsAccessibleFrom: ptIndex by: xValue	| others |	others := Set new.	self points keysAndValuesDo: 			[:index :other |			(index = (ptIndex + 1) and: [(ptIndex rem: xValue) ~= 0])				| (index = (ptIndex - 1) and: [(ptIndex - 1 rem: xValue) ~= 0])					| (index = (ptIndex + xValue + 1) and: [(ptIndex + xValue rem: xValue) ~= 0])					| (index = (ptIndex + xValue - 1) and: [(ptIndex + xValue - 1 rem: xValue) ~= 0])					| (index = (ptIndex + xValue)) | (index = (ptIndex - xValue + 1) and: [(ptIndex - xValue rem: xValue) ~= 0])				| (index = (ptIndex - xValue - 1) and: [(ptIndex - xValue - 1 rem: xValue) ~= 0])					| (index = (ptIndex - xValue)) ifTrue: [others add: index]].	^others asSortedCollection asArray</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>private</category><body package="DistributedModeling" selector="computeBounds">computeBounds	" *** This method was defined by Geometric as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="lines:">lines: anObject 	lines := anObject</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>displaying</category><body package="DistributedModeling" selector="gridOfPoints:with:">gridOfPoints: pointsByLine with: numberOfRows		| horizontalSize verticalSize yPos xPos hGap vGap |	horizontalSize := self windowSize x.	verticalSize := self windowSize y.	hGap := (horizontalSize / (pointsByLine + 1)) rounded.	vGap := (verticalSize / (numberOfRows + 1)) rounded.	points := OrderedCollection new.	1		to: numberOfRows		do:			[:row | 			yPos := vGap * row.			1				to: pointsByLine				do:					[:column | 					xPos := hGap * column.					points add: xPos @ yPos]]</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="lines">lines	^lines</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>building</category><body package="DistributedModeling" selector="buildNetwork">buildNetwork	| key accessibles networkConnectivity nodeDic attributes |	nodeDic := Dictionary new.	networkConnectivity := AlgoDis.NetworkConnectivity new.	networkConnectivity name: 'someNetwork'.	networkConnectivity communications: #('none' 'defined').	self points keysAndValuesDo: 			[:index :eachPoint |			accessibles := self pointsAccessibleFrom: eachPoint.			accessibles := accessibles collect: [:acc | self makeNameFromIndex: acc].			key := self makeNameFromIndex: index.			attributes := AlgoDis.NetworkNodeAttributes						nodeName: key asString						fanOutNodes: accessibles						procedureName: 'Node'.			accessibles isEmpty ifFalse: [nodeDic at: key put: attributes]].	networkConnectivity nodeDictionary: nodeDic.	self networkCon: networkConnectivity.	^networkConnectivity</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="portee:">portee: anObject	portee := anObject</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>statistics</category><body package="DistributedModeling" selector="statisticNumbers">statisticNumbers	"self halt."	| max isolated min fanout sumChan keys nodeCol aireTotale aireBernard pourcentageCouverture |	keys := self networkCon nodeDictionary keys.	"max := 0.	isolated := 0.	min := 100000.		sumChan := 0."	"initialisation des variables"	nodeCol := self networkCon nodeDictionary asOrderedCollection.	nodeCol isEmpty		ifFalse: 			[fanout := nodeCol first fanOutNodes size.			sumChan := fanout.			min := fanout.			max := fanout.			fanout = 0 ifTrue: [isolated := 1] ifFalse: [isolated := 0]]		ifTrue: 			[fanout := 0.			sumChan := 0.			min := 0.			max := 0].	aireTotale := 0.	"on calcule la surface couverte par tous les réseaux de deux noeuds ou plus."	nodeCol isEmpty		ifFalse: 			[| circleCol circleColSize |			circleCol := nodeCol						collect: [:nodeArray | self circleFromArray: nodeArray].			circleColSize := circleCol size.			circleCol keysAndValuesDo: 					[:index :circle |					aireTotale := aireTotale + (self aire: circle).					index &lt; circleColSize						ifTrue: 							[index + 1 to: circleColSize								do: 									[:i |									| c |									c := circleCol at: i.									(self isInRange: circle with: c)										ifTrue: [aireTotale := aireTotale - (self areaIntersect: circle with: c)]]]]].	aireBernard := self checkSize: nodeCol with: aireTotale.	pourcentageCouverture := (aireBernard / self windowSize squared * 100)				rounded.	self networkCon nodeDictionary keysAndValuesDo: 			[:keyx :reachable |			fanout := reachable fanOutNodes.			sumChan := sumChan + fanout size.			min := min min: fanout size.			max := max max: fanout size.			fanout isEmpty ifTrue: [isolated := isolated + 1]].	"self halt."	^(Array		with: keys size		with: sumChan		with: min		with: max)			, (Array with: isolated with: aireBernard with: pourcentageCouverture)</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>computing</category><body package="DistributedModeling" selector="aire:">aire: circle	"Aire du disque délimité par circle"	| r |	r := circle radius.	^Double pi * r * r</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="windowBounds:">windowBounds: anObject	windowBounds := anObject</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="portee">portee	^portee</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>statistics</category><body package="DistributedModeling" selector="statisticsOn:">statisticsOn: ws	| array |	ws		nextPutAll: self networkCon name;		cr.	array := self statisticNumbers.	ws		nextPutAll: 'processus : ' , array first printString;		cr.	ws		nextPutAll: 'min fanout : ' , (array at: 3) printString;		cr.	ws		nextPutAll: 'max fanout : ' , (array at: 4) printString;		cr.	ws		nextPutAll: 'isolated   : ' , (array at: 5) printString;		cr.	ws		nextPutAll: 'channels   : ' , (array at: 2) printString;		cr.	ws		nextPutAll: 'coverageArea   : ' , (array at: 6) printString;		cr.	ws		nextPutAll: 'percentArea   : ' , (array at: 7) printString;		cr</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="windowSize">windowSize		windowSize isNil ifTrue: [self windowSize: 640 @ 480].	^windowSize</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="windowBounds">windowBounds	^windowBounds</body></methods><methods><class-id>Graphics.NetworkGeometry</class-id> <category>building</category><body package="DistributedModeling" selector="doNetworkForPickModel:">doNetworkForPickModel: aName	| key accessibles connectivity pointsToSymbolDictionary nodeDic attributes thesePoints |	nodeDic := Dictionary new. 	pointsToSymbolDictionary := Dictionary new.	connectivity := AlgoDis.NetworkConnectivity new.	connectivity name: aName.	connectivity communications: #('none' 'defined').	thesePoints := self points .	thesePoints keysAndValuesDo: 			[:index :eachPoint |			accessibles := self pointsAccessibleFrom: eachPoint.			accessibles := accessibles collect: [:acc | self makeNameFromIndex: acc].			key := self makeNameFromIndex: index.			pointsToSymbolDictionary at: eachPoint put: key.			attributes := AlgoDis.NetworkNodeAttributes						nodeName: key asString						fanOutNodes: accessibles						procedureName: 'Node'.			accessibles isEmpty ifFalse: [nodeDic at: key put: attributes]].	connectivity nodeDictionary: nodeDic.	self networkCon: connectivity.	^Array with: connectivity with: pointsToSymbolDictionary</body></methods><methods><class-id>AlgoDis.PickView</class-id> <category>accessing</category><body package="DistributedModeling" selector="image:">image: anObject	image := anObject</body></methods><methods><class-id>AlgoDis.PickView</class-id> <category>accessing</category><body package="DistributedModeling" selector="image">image	^image</body></methods><methods><class-id>AlgoDis.PickView</class-id> <category>controller accessing</category><body package="DistributedModeling" selector="defaultControllerClass">defaultControllerClass		^PickController</body></methods><methods><class-id>AlgoDis.PickView</class-id> <category>displaying</category><body package="DistributedModeling" selector="displayOn:">displayOn: aGC	| graph gaw |	self image isNil ifFalse: [self image displayOn: aGC].	graph := self model value lastGraph.	graph isNil ifFalse: [graph displayOn: aGC].	self model value zones isNil		ifFalse: 			[self model value zones do: 					[:rect |					gaw := GraphicsAttributesWrapper on: rect asStroker.					gaw attributes: (GraphicsAttributes new paint: ColorValue yellow).					gaw displayOn: aGC]]</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="tempsTotal:">tempsTotal: anObject	tempsTotal := anObject</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="mobilePath">mobilePath	^mobilePath</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="uiExecManager">uiExecManager	^uiExecManager</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="connectionList:">connectionList: anObject	connectionList := anObject</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="handleMobilePath:comp:">handleMobilePath: curTime comp: comp	| end |	end := nil.	self mobilePath straightWays do: 			[:sw |			sw startTime &lt; curTime				ifTrue: 					[| start dist coef line |					start := sw mobile trajectory position.					end := sw endPoint.					dist := 0 @ 0.					dist x: end x - start x.					dist y: end y - start y.					coef := (curTime - sw startTime) / 1 "sw duration".					coef &gt; 1 ifTrue: [coef := 1].					end x: (start x + (dist x * coef)) asInteger.					end y: (start y + (dist y * coef)) asInteger.					line := LineSegment from: start to: end.					comp isNil ifFalse:[comp add: (GraphicsAttributesWrapper on: line asStroker)]]].	^end</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="simulationBench">simulationBench	| cu tmpnbCalc total totalTime |	self connectionList isNil ifTrue: [^self].	process := 			[| timeToRun |			timeToRun := Time millisecondsToRun: 							[cu := CudaInterface new.							self cudaInterface: cu.							tmpnbCalc := 0.							total := 0.							totalTime := 0.							cu start.							self calcNbNetwork.							1 to: self mobilePath duration								do: 									[:i |									| updated |									updated := self handleConnection: i comp: nil.									updated = 0										ifFalse: 											[totalTime := totalTime + (Time millisecondsToRun: [tmpnbCalc := tmpnbCalc + self doCalcBench]) asInteger.											total := total + 1]].							cu stop.							self nbCalc: tmpnbCalc.							self nbCalcDone: total.							tmpnbCalc = 0 ifFalse:[							self averageStepTime: (totalTime / tmpnbCalc) asInteger]].			Transcript				show: 'End simulation';				cr.				self tempsTotal: timeToRun.]					value</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="simulationV2">simulationV2	| scale win comp cu connection curPos delayString originOffset translatedComp d |	self connectionList isNil ifTrue: [^self].	self aPickModel isNil ifTrue: [^self].	originOffset := self aPickModel originOffset. "511000 @ 362000."	scale := 1000 / 2.	delayString := Dialog request: 'enter delays (ms) between steps'.	delayString isNil ifTrue: [^nil] ifFalse: [scale := delayString asNumber].	win := ScheduledWindow				model: nil				label: 'Simulation'				minimumSize: self aPickModel bounds corner.	process := 			[cu := CudaInterface new.			CudaInterface unloadLibraries.			self cudaInterface: cu.			cu start.			"self halt."			win open.			connection := 0.			cu startDiameterFrom: -1.			cu doStep: cu getN * 4 + 10.			cu startLeaderFrom: -1.			cu doStep: cu getDiameter * 2 + 1.			self calcNbNetwork.			"self mobilePath inspect."			d := self mobilePath duration.			"d inspect.			self halt.			d := "			"TimeProfiler profile: ["			1 to: d "self mobilePath duration"				do: 					[:i |					| updated |					comp := CompositePart new.					NetworkGeometry drawNetworkMobile: aPickModel onComp: comp.					"self halt."					updated := self handleConnection: i comp: comp.					connection := connection + updated.					curPos := self handleMobilePath: i comp: comp.					self doCalcBB: curPos comp: comp.					translatedComp := TranslatingWrapper on: comp at: originOffset * -1.					win component: (BoundedWrapper on: translatedComp).					win refresh.					(Delay forMilliseconds: scale) wait]."]."			cu stop]					fork.		[| ending |	ending := win windowManager class.	[ending = NullWindowManager] whileFalse: 			[(Delay forMilliseconds: 200) wait.			ending := win windowManager class].	process terminate.	cu stop]			fork</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="simulation">simulation	| scale win comp cu connection curPos delayString |	self connectionList isNil ifTrue: [^self].	self aPickModel isNil ifTrue: [^self].	scale := 1000 / 2.	delayString := Dialog request: 'enter delays (ms) between steps'.	delayString isNil ifTrue: [^nil] ifFalse: [scale := delayString asNumber].	win := ScheduledWindow				model: nil				label: 'Simulation'				minimumSize: self aPickModel bounds corner.	process := 			[cu := CudaInterface new.			self cudaInterface: cu.			cu start.			win open.			connection := 0.			cu startDiameterFrom: -1.			cu doStep: cu getN * 4 + 10.			cu startLeaderFrom: -1.			cu doStep: cu getDiameter * 2 + 1.			self calcNbNetwork.			TimeProfiler profile: [			1 to: self mobilePath duration				do: 					[:i |					| updated |					comp := CompositePart new.					NetworkGeometry drawNetworkMobile: aPickModel onComp: comp.					updated := self handleConnection: i comp: comp.					connection := connection + updated.					curPos := self handleMobilePath: i comp: comp.					self doCalcBB: curPos comp: comp.					win component: (BoundedWrapper on: comp).					win refresh.					(Delay forMilliseconds: scale) wait].].			cu stop]					fork.		[| ending |	ending := win windowManager class.	[ending = NullWindowManager] whileFalse: 			[(Delay forMilliseconds: 200) wait.			ending := win windowManager class].	process terminate.	cu stop]			fork</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="aPickModel:">aPickModel: anObject	aPickModel := anObject</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="nbCalc">nbCalc	^nbCalc</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="doConnection:">doConnection: nodeId		self cudaInterface connect: 0 to: nodeId</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="doCalcBB:comp:">doCalcBB: pos comp: comp	| cu res tmp circle gaw mobileZone diameter di dp uiems myMobile mobilePosition mobileRange |	cu := self cudaInterface.	res := cu getNodes.	"uiems := (1 to: res size) collect: [:id | UIExecManager sensorId: id].""	self halt."	tmp := res at: cu getSensorsNb + 1.	tmp pos: pos x asInteger @ pos y asInteger.	tmp range: (res at: 1) range.	"Transcript show: 	tmp range printString ; cr."	res at: cu getSensorsNb + 1 put: tmp.	cu updateNodes: res.	"res with: uiems		do: 			[:nodeState :uiem |			nodeState assert.			uiem updateFrom: nodeState]."	cu startDiameterFrom: -1.	"res with: uiems		do: 			[:nodeState :uiem |			nodeState assert.			uiem updateFrom: nodeState]."	cu doStep: cu getN * 4 + 10.	"res with: uiems		do: 			[:nodeState :uiem |			nodeState assert.			uiem updateFrom: nodeState]."	cu startZoneFrom: -1 "cu getSensorsNb".	"res with: uiems		do: 			[:nodeState :uiem |			nodeState assert.			uiem updateFrom: nodeState]."	diameter := cu getDiameter.	cu doStep: diameter * 2.	res := cu getNodes.	"res with: uiems do: [:nodeState :uiem | nodeState assert.  uiem updateFrom: nodeState]."	di := self displayInitial: res.	dp := self displayPos: res.	"Transcript cr ; cr ; show: 'Itération:'.	res do: [:node | Transcript show: 'Node ', node initial printString, ' zone : ' , node zone printString ; cr]."	"self halt."	myMobile := (res at: cu getSensorsNb + 1).		mobileZone := myMobile zone.	mobilePosition := myMobile pos.	mobileRange := myMobile range.	Transcript show: 'mobileBbox= ' , mobileZone printString , '  | mobilePos= ', mobilePosition printString , ' mobileRange= ' , mobileRange printString ; cr.	"res inspect."	"Bounding box of each sensor node"	res do: 			[:node |			comp add: ((GraphicsAttributesWrapper on: node zone asStroker)						attributes: (GraphicsAttributes new paint: (ColorValue perform: #orange)))].		circle := Circle center: pos radius: tmp range.		"it's the mobile ! "	gaw := (GraphicsAttributesWrapper on: circle asStroker)				attributes: (GraphicsAttributes new paint: (ColorValue perform: #red)).	comp add: gaw.	comp add: (GraphicsAttributesWrapper				on: "(res at: cu getSensorsNb + 1) zone" mobileZone asStroker).	^Array with: di with: dp</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>debug</category><body package="DistributedModeling" selector="displayInitial:">displayInitial: resArray	| lineArrayStream |	lineArrayStream := WriteStream on: Array new.	resArray		keysAndValuesDo: [:index :node | lineArrayStream nextPut: node initial].	^lineArrayStream contents</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="nbCalcDone:">nbCalcDone: anObject	nbCalcDone := anObject</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="doCalcBench">doCalcBench	| cu sens mobile |	cu := self cudaInterface.	sens := cu getSensorsNb.	cu startAskInfoFrom: sens.	cu doStep: 3.	mobile := cu getNode: sens.	mobile startLead = 1		ifTrue: 			["cu startDiameterFrom: sens.			cu doStep: cu getN * 4 + 10."			cu startZoneFrom: cu getDiameter * 4+1.			cu doStep: cu getDiameter.			^1]		ifFalse: [^0]</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="calcNbNetwork">calcNbNetwork	| cu res leaders |	cu := self cudaInterface.	cu startDiameterFrom: -1.	cu doStep: cu getN * 4 + 10.	cu startLeaderFrom: -1.	cu doStep: cu getDiameter * 2 + 1.	res := cu getNodes.	leaders := res select: [:node | node leader = 1].	Transcript		show: 'Nombre de réseaux : ' , leaders size printString;		cr.	1 to: leaders size		do: 			[:i |			Transcript				show: 'Réseau : ' , i printString , ' Node : ' , (leaders at: i) netNodes printString;				cr]</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="nbCalcDone">nbCalcDone	^nbCalcDone</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="connectionList">connectionList	^connectionList</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="doCalc:comp:">doCalc: pos comp: comp	| cu res tmp circle gaw |	cu := self cudaInterface.	res := cu getNodes.	tmp := res at: cu getSensorsNb + 1.	tmp pos: pos x asInteger @ pos y asInteger.	tmp range: (res at: 1) range.	res at: cu getSensorsNb + 1 put: tmp.	cu updateNodes: res.	cu startDiameterFrom: -1.	cu doStep: cu getN * 4 + 10.	cu startZoneFrom: cu getSensorsNb.	cu doStep: cu getDiameter * 2.	res := cu getNodes.	"res do: [:node | comp add: (GraphicsAttributesWrapper on: node zone asStroker)]."	circle := Circle center: pos radius: tmp range.	gaw := (GraphicsAttributesWrapper on: circle asStroker) attributes: (GraphicsAttributes new paint: (ColorValue perform: #blue)).	comp add: gaw.	comp add: (GraphicsAttributesWrapper on: (res at: cu getSensorsNb + 1) zone asStroker)</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="tempsTotal">tempsTotal	^tempsTotal</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="createConnection">createConnection	"Récupère les ID des noeuds suivant leur positions"	| table points |	"self halt."	self mobilePath isNil ifTrue: [^self].	self networkGraph isNil ifTrue: [^self].	table := networkGraph table.	points := OrderedCollection new.	self networkGraph nodeDictionary do: [:node | points add: (node at: 2)]. "adding the position for each node in the collection points"	self connectionList: (self mobilePath events: points).	self connectionList do: [:link | link findId: table]</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="cudaInterface">cudaInterface	^cudaInterface</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="mobilePath:">mobilePath: anObject	mobilePath := anObject</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="doDisconnection:">doDisconnection: nodeId		self cudaInterface disconnect: 0 to: nodeId</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>actions</category><body package="DistributedModeling" selector="handleConnection:comp:">handleConnection: curTime comp: comp	| connection |	connection := 0.	self connectionList do: 			[:link |			link nodeId = -1				ifFalse: 					[link eventTime &lt; curTime						ifTrue: 							[| gaw start line |							comp isNil								ifFalse: 									[start := link eventPosition x @ link eventPosition y.									line := LineSegment from: start to: link sensor.									gaw := (GraphicsAttributesWrapper on: line asStroker) attributes: (GraphicsAttributes new paint: (ColorValue perform: link color)).									comp add: gaw].							link eventTime + 1 &gt;= curTime								ifTrue: 									[link class = LinkCreation										ifTrue: 											[self doConnection: link nodeId.											connection := connection + 1].									link class = LinkDestruction										ifTrue: 											[self doDisconnection: link nodeId.											connection := connection - 1]]]]].	^connection</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="nbCalc:">nbCalc: anObject	nbCalc := anObject</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="aPickModel">aPickModel	^aPickModel</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="uiExecManager:">uiExecManager: anObject	uiExecManager := anObject</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="averageStepTime:">averageStepTime: anObject	averageStepTime := anObject</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>debug</category><body package="DistributedModeling" selector="displayPos:">displayPos: resArray	| lineArrayStream |	lineArrayStream := WriteStream on: Array new.	resArray		keysAndValuesDo: [:index :node | lineArrayStream nextPut: node pos].	^lineArrayStream contents</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="networkGraph">networkGraph	^networkGraph</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="averageStepTime">averageStepTime	^averageStepTime</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="networkGraph:">networkGraph: anObject	networkGraph := anObject</body></methods><methods><class-id>AlgoDis.ExecManager</class-id> <category>accessing</category><body package="DistributedModeling" selector="cudaInterface:">cudaInterface: anObject	cudaInterface := anObject</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>event driven</category><body package="DistributedModeling" selector="redButtonPressedEvent:">redButtonPressedEvent: aRedButtonPressedEvent	"Start drawing a new line when the &lt;Select&gt; button is pressed.	Keep showing the crosshair when pressed."		| point gc |	Cursor crossHair show.	point := self sensor cursorPointFor: aRedButtonPressedEvent.	self points isNil ifFalse:[self points add: point].	gc := self view graphicsContext.	self model value buildGraph: gc.	self view invalidate.</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>event driven</category><body package="DistributedModeling" selector="desiresFocus">desiresFocus	^true</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>events</category><body package="DistributedModeling" selector="mouseMovedEvent:">mouseMovedEvent: aMouseMovedEvent	"Set the cursor when moving in the SketchView.	Add a new point for every mouse movement when drawing is in progress."		Cursor crossHair show.	position := self sensor cursorPointFor: aMouseMovedEvent</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="keyboardProcessor:">keyboardProcessor: kp	keyboardProcessor := kp</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>events</category><body package="DistributedModeling" selector="keyPressedEvent:">keyPressedEvent: event		| mikado |	event keyValue = $x		ifTrue:			[mikado := self model value. 			self model value: mikado].	event keyValue = #Up ifTrue: [Dialog warn: 'Up']</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."		super initialize.	points := OrderedCollection new.	^self</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>events</category><body package="DistributedModeling" selector="enterEvent:">enterEvent: anEnterEvent	"Request keyboard focus."</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>accessing</category><body package="DistributedModeling" selector="points">points	^self model value points</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>events</category><body package="DistributedModeling" selector="closeEvent:">closeEvent: anExitEvent	"Change the cursor shape back to normal.	Also end current stroke in case red button is still being pressed."		Cursor normal show</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="release">release	"Upon release, change the cursor shape back to normal."		super release.	Cursor normal show</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="keyboardProcessor">keyboardProcessor	^keyboardProcessor</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>event driven</category><body package="DistributedModeling" selector="handlerForMouseEvent:">handlerForMouseEvent: event	^((self viewHasCursorWithEvent: event)		and: [self model notNil])			ifTrue: [self]			ifFalse: [nil]</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>events</category><body package="DistributedModeling" selector="closeNoTerminate">closeNoTerminateself view close</body></methods><methods><class-id>AlgoDis.PickController</class-id> <category>events</category><body package="DistributedModeling" selector="exitEvent:">exitEvent: anExitEvent	"Change the cursor shape back to normal.	Also end current stroke in case red button is still being pressed."		Cursor normal show</body></methods><methods><class-id>AlgoDis.NetEditModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="node">node	^node</body></methods><methods><class-id>AlgoDis.NetEditModel</class-id> <category>aspects</category><body package="DistributedModeling" selector="links">links	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^links isNil		ifTrue:			[links := SelectionInList new]		ifFalse:			[links]</body></methods><methods><class-id>AlgoDis.NetEditModel</class-id> <category>accessing</category><body package="DistributedModeling" selector="node:">node: aValue	node := aValue</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>printing</category><body package="DistributedModeling" selector="printOn:">printOn: aStream	aStream		nextPutAll: name;		nextPutAll: ' at: ';		print: self origin</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>private</category><body package="DistributedModeling" selector="buildFigureFor:withName:">buildFigureFor: aNode withName: string 	| theText |	theText := string , '(' , aNode last , ')'.	^theText asComposedText</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	| paragraph theWindow theBounds wrapper lookPref |	super initialize.	paragraph := self buildFigureFor: node withName: name.	model := NetEditModel new.	theWindow := model allButOpenInterface: #windowSpec.	theBounds := 0 @ 0 extent: theWindow window maximumSize.	self view: theWindow window component in: theBounds.	self opaque.	model node: self node.	wrapper := self model builder componentAt: #nodeName.	wrapper labelString: paragraph asString.	lookPref := wrapper lookPreferences foregroundColor: self color.	wrapper lookPreferences: lookPref.	model links list: node first</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>connection</category><body package="DistributedModeling" selector="connectionFigureClass">connectionFigureClass	^Refactory.HotDraw.LineFigure</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="color:">color: aValue	color := aValue</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="node:">node: aValue	node := aValue</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>displaying</category><body package="DistributedModeling" selector="addText:">addText: figure 	bounds := figure bounds.	self bounds: bounds</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="name:">name: aName 	name := aName</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>displaying</category><body package="DistributedModeling" selector="fillCache">fillCache	| title aGC rect cache|	title := name asComposedText.	cache := Pixmap extent: title extent + (2 @ 4).	aGC := cache graphicsContext.	aGC medium background: LookPreferences defaultForWindows backgroundColor.	aGC paint: ColorValue white.	rect := 0 @ 0 extent: cache extent - (2 @ 2).	aGC displayRectangle: rect.	aGC paint: ColorValue black.	title displayOn: aGC at: 0 @ 2.	aGC displayRectangularBorder: rect.	^cache asImage</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="name">name	^name</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>displaying</category><body package="DistributedModeling" selector="displayFigureOn:">displayFigureOn: aGraphicsContext 	super displayFigureOn: aGraphicsContext copy.	aGraphicsContext		paint: self lineColor;		lineWidth: self lineWidth.	self bounds displayStrokedOn: aGraphicsContext</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>inspecting</category><body package="DistributedModeling" selector="inspect2">inspect2	^self node inspect</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="node">node	^node</body></methods><methods><class-id>AlgoDis.NetEditNode</class-id> <category>accessing</category><body package="DistributedModeling" selector="color">color	^color</body></methods><methods><class-id>AlgoDis.RandomView</class-id> <category>displaying</category><body package="DistributedModeling" selector="displayOn:">displayOn: aGraphicsContext	| comp |	pixmap isNil ifFalse: [pixmap displayOn: aGraphicsContext].	comp := self model value composite.	comp isNil ifFalse: [comp displayOn: aGraphicsContext]</body></methods><methods><class-id>AlgoDis.RandomView</class-id> <category>display box accessing</category><body package="DistributedModeling" selector="preferredBounds">preferredBounds	^pixmap isNil		ifFalse: [pixmap preferredBounds]		ifTrue: [super preferredBounds]</body></methods><methods><class-id>AlgoDis.RandomView</class-id> <category>exporting</category><body package="DistributedModeling" selector="asImage">asImage|p comp |p := Pixmap new.	comp := self model value composite.comp displayOn:  p graphicsContext .p</body></methods><methods><class-id>AlgoDis.RandomView</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.RandomView</class-id> <category>displaying</category><body package="DistributedModeling" selector="invalidate">invalidate	pixmap := self model value image asRetainedMedium.	super invalidate</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>aspects</category><body package="DistributedModeling" selector="doAnimate">doAnimate	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doAnimate isNil		ifTrue:			[doAnimate := false asValue]		ifFalse:			[doAnimate]</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>nodes</category><body package="DistributedModeling" selector="addNode:forNetworkNode:color:">addNode: aName forNetworkNode: netNode color: color 	"Get name of node from user."	drawing addNode: aName forNetworkNode: netNode color: color</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>accessing</category><body package="DistributedModeling" selector="processPid">processPid	^processPid</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>changes</category><body package="DistributedModeling" selector="changedProgram">changedProgram	self program: self programName value</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>menu-actions</category><body package="DistributedModeling" selector="stopExec">stopExec	processSmalltalk isNil		ifFalse: 			[processSmalltalk terminate.			processSmalltalk := nil]</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>nodes</category><body package="DistributedModeling" selector="nodeNamed:">nodeNamed: aName 	^drawing nodeNamed: aName</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	super initialize.	self doAnimate value: true.	nodes := SortedCollection new.	self doAnimate onChangeSend: #changedAnimate to: self.	self programName value: program.	self programName onChangeSend: #changedProgram to: self.</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>menu-actions</category><body package="DistributedModeling" selector="startExec">startExec	| cmd proc connection   |	connection := UnixProcess				pipeConnectionFor: 'sh'				arguments: (Array with: program)				setProcessDescriptor: [:pd | proc := pd].	cmd := connection readStream.	processSmalltalk := [			[[cmd atEnd]				whileFalse: 					[self dispatchLine: (cmd upTo: Character cr).					(Delay forSeconds: 1) wait].			proc wait]				ensure: [cmd close]] fork</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>accessing</category><body package="DistributedModeling" selector="processPid:">processPid: aValue	processPid := aValue</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>nodes</category><body package="DistributedModeling" selector="addNode:forNetworkNode:">addNode: aName forNetworkNode: netNode 	"Get name of node from user."	drawing addNode: aName forNetworkNode: netNode</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>drawing description</category><body package="DistributedModeling" selector="windowName">windowName	^'Network Editor'</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>changes</category><body package="DistributedModeling" selector="componentNodeAt:">componentNodeAt: nb 	^drawing nodesAt: nb</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>changes</category><body package="DistributedModeling" selector="changedAnimate">changedAnimate	| anime |	anime := self doAnimate value.	drawing doAnimate: anime</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>accessing</category><body package="DistributedModeling" selector="program">program	^program</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>nodes</category><body package="DistributedModeling" selector="addEdgeFrom:to:color:">addEdgeFrom: source to: target color: color 	drawing		edgeWeight: 1		from: source		to: target		color: color</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>accessing</category><body package="DistributedModeling" selector="program:">program: aValue	program := aValue</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>aspects</category><body package="DistributedModeling" selector="doAnimate:">doAnimate: aValue	doAnimate := aValue</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>aspects</category><body package="DistributedModeling" selector="programName">programName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^programName isNil		ifTrue:			[programName := String new asValue]		ifFalse:			[programName]</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>nodes</category><body package="DistributedModeling" selector="addNode:">addNode: aName	"Get name of node from user." 	drawing addNode: aName.</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>changes</category><body package="DistributedModeling" selector="dispatchLine:">dispatchLine: aLine 	| rs nb node linkNb listHolder |	rs := aLine readStream.	nb := (rs upTo: $ ) asNumber.	nb := nb + 1.	node := self componentNodeAt: nb.	linkNb := rs upToEnd asNumber.	listHolder := node model links.	listHolder selectionIndex: linkNb \\ listHolder list size + 1</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>drawing description</category><body package="DistributedModeling" selector="drawingClass">drawingClass	^NetEditDrawing</body></methods><methods><class-id>AlgoDis.NetEdit</class-id> <category>nodes</category><body package="DistributedModeling" selector="adEdgeFrom:to:">adEdgeFrom: source to: target 	drawing		edgeWeight: 1		from: source		to: target.</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="hasKroc:">hasKroc: anObject	hasKroc := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>utilities</category><body package="DistributedModeling" selector="dotCommand">dotCommand		^self commands first</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="loopRange">loopRange	^loopRange</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="genExpress:">genExpress: titleOccam	| stepFileName extension title gd readFile rs occamText stepObject visitor |	readFile := titleOccam asFilename.	readFile isReadable		ifFalse: 			[readFile := (self generateDir , titleOccam) asFilename.			readFile isReadable ifFalse: [^Dialog warn: titleOccam , ' cannot open']].	extension := titleOccam asFilename extension.	title := titleOccam copyFrom: 1 to: titleOccam size - extension size.	gd := self generateDir.	gd asFilename ensureDirectory.	stepFileName := title , '.step'.	rs := readFile readStream.	occamText := rs contents.	rs close.	stepObject := Pharo.Occam.PPOccamParser parse: occamText.	visitor := OCCOccamPrinterVisitor new.	self halt.	^stepObject accept: visitor</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>changing</category><body package="DistributedModeling" selector="changedStyle">changedStyle	self leStyle value = #forFFT		ifTrue: 			[self lesModeles selection: nil.			(self builder componentAt: #ActionButton1) enable.			(self builder componentAt: #ActionButton2) enable.			self graphicEnabled.			^self leCode				value: (AlgoDis.NetworkTopologies methodSourcesAt: #fftDIT8Points) source].	(#(#forSensors #forGrid) includes: self leStyle value)		ifTrue: 			[self lesModeles selection: nil.			self graphicEnabled.			(self builder componentAt: #ActionButton1) enable.			(self builder componentAt: #ActionButton2) enable.			^self leCode value: Text new]."	self leStyle value isNil ifTrue: [self graphicEnabled]"</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="defineLoopRange">defineLoopRange	| text items start args it int startLoop stepLoop stopLoop initialAnswerWs initialAnswer |	int := self loopRange.	startLoop := int first.	stepLoop := int increment.	stopLoop := int last.	initialAnswerWs := WriteStream on: String new.	startLoop printOn: initialAnswerWs.	initialAnswerWs nextPutAll: ' to: '.	stopLoop printOn: initialAnswerWs.	initialAnswerWs nextPutAll: ' by: '.	stepLoop printOn: initialAnswerWs.	initialAnswer := initialAnswerWs contents.	"int := int		copyFrom: 2		to: int size - 1."	text := Dialog request: 'Type range interval such as: x to: y by: step'				initialAnswer: initialAnswer.	text isEmpty		ifFalse: 			[items := Scanner new scanTokens: text.			start := items first.			items size &lt; 5 ifTrue: [self error: 'Type range interval such as: x to: y by: step'].			args := Array with: (items at: 3) with: (items at: 5).			it := start perform: #to:by: withArguments: args.			self loopRange: it]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="ensureDirectory:">ensureDirectory: fileName	fileName ensureDirectory</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="mapEdit">mapEdit		UIPickNodes open</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="displaySourceChoice:">displaySourceChoice: anObject	displaySourceChoice := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="loopNodes:">loopNodes: anObject	loopNodes := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="forDisplayCode">forDisplayCode	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^forDisplayCode isNil		ifTrue:			[forDisplayCode := false asValue]		ifFalse:			[forDisplayCode]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="logAndStatsDir:">logAndStatsDir: anObject	logAndStatsDir := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doGenerate">doGenerate	self doGenerate: false.</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="hasEvince">hasEvince	^hasEvince</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="forSmalltalk">forSmalltalk	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^forSmalltalk isNil		ifTrue:			[forSmalltalk := false asValue]		ifFalse:			[forSmalltalk]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="forCuda">forCuda	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^forCuda isNil		ifTrue:			[forCuda := false asValue]		ifFalse:			[forCuda]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doSimulateMap">doSimulateMap	self execManager createConnection.	"self execManager simulation."	self execManager simulationV2.</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="hasps2png">hasps2png	^hasps2png</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>changing</category><body package="DistributedModeling" selector="dotFinished">dotFinished		| label |	label := self builder componentAt: #doDotFile.	label enable</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="generateForStyle:range:points:wSize:drawing:">generateForStyle: aStyle range: range points: nb wSize: windowSize drawing: graphic	| theTitle |	aStyle = #forSensors		ifTrue: 			[theTitle := 'genRange' , range printString , 'Points' , nb printString.			network := NetworkGeometry						rangeNetwork: range						windowSize: windowSize						nbPoints: nb						drawing: graphic						title: theTitle.			^theTitle -&gt; network].	aStyle = #forGrid		ifTrue: 			[theTitle := 'gridRange' , range printString , 'Points' , nb printString.			network := NetworkGeometry						gridNetwork: range						nbPoints: nb						drawing: graphic						title: theTitle.			^theTitle -&gt; network]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doGenExpress:">doGenExpress: titleOccam	| occam | 	occam := self generateDir , titleOccam.	self genExpress: occam.	self genExpress: self includeFilename.	self genExpress: self includeData</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>utilities</category><body package="DistributedModeling" selector="processTrace">processTrace	" UINetworkGeometry new processTrace "		| scan filename rs ws line lineTokens last now |	scan := Scanner new.	filename := Dialog requestFileName: 'trace file ?'.	rs := filename asFilename readStream.	ws := 'this.trace' asFilename writeStream.	last := 0.	[rs atEnd]		whileFalse:			[line := rs upTo: Character cr.			lineTokens := scan scanTokens: line.			now := lineTokens at: 2.			last = 0				ifTrue: [lineTokens at: 2 put: 0]				ifFalse:					[lineTokens						at: 2						put: now - last].			last := now.			lineTokens				do:					[:word | 					word isSymbol						ifTrue: [ws nextPutAll: word]						ifFalse: [word printOn: ws].					ws tab].			ws cr].	ws close.	rs close</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="doOccam">doOccam	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doOccam isNil		ifTrue:			[doOccam := false asValue]		ifFalse:			[doOccam]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="commands:">commands: anObject	commands := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="clearDataInclude">clearDataInclude	  self includeData: nil</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="lesModeles">lesModeles	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lesModeles isNil		ifTrue:			[lesModeles := SelectionInList new]		ifFalse:			[lesModeles]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>changing</category><body package="DistributedModeling" selector="sourceUpdated">sourceUpdated	self lesModeles selection: nil.	(self builder componentAt: #ActionButton1) disable.	(self builder componentAt: #ActionButton2) disable.</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="network:">network: anObject	network := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="laConsole">laConsole	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^laConsole isNil		ifTrue:			[laConsole := String new asValue]		ifFalse:			[laConsole]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="displaySourceChoice">displaySourceChoice	^displaySourceChoice</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="genDotFile:">genDotFile: title	| dotFileName cmd |	dotFileName := self generateDir , title , '.dot'.		[self dotRunning.	UnixProcess cshOne: self dotCommand , ' -Tps -o' , self generateDir , title , '.ps ' , dotFileName.	self hasps2png		ifTrue: 			[cmd := self ps2pngCommand , ' ' , self generateDir , title , '.ps ' , self generateDir , title , '.png'.			UnixProcess cshOne: cmd].	self hasEvince		ifTrue: 			[cmd := self evinceCommand , ' ' , self generateDir , title , '.ps'.			UnixProcess cshOne: cmd].	self dotFinished]			fork</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="includeFilename">includeFilename	^includeFilename</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>utilities</category><body package="DistributedModeling" selector="parsable:">parsable: lineTokens		| index parsable checking |	index := 1.	parsable := lineTokens		inject: true		into:			[:boolean :token  | 			checking := false.			(#(1 2 3 4 6 7) includes: index) ifTrue: [checking := token isInteger].			5 = index ifTrue: [checking := token isSymbol].			index := index + 1.			boolean and: [checking]].	^index = 8 and: [parsable]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="evinceCommand">evinceCommand		^self commands at:2</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doProcessStatNumbers:">doProcessStatNumbers: logStats	| text titleStats file title loopTitle |	text := String new writeStream.	text		nextPutAll: 'range';		tab;		nextPutAll: 'points';		tab;		nextPutAll: 'diameterMax';		tab;		nextPutAll: 'networks';		tab;		nextPutAll: 'processes';		tab;		nextPutAll: 'minFanout';		tab;		nextPutAll: 'maxFanout';		tab;		nextPutAll: 'channels';		tab;		nextPutAll: 'timeGen';		tab;		nextPutAll: 'timeKroc';		tab;		nextPutAll: 'timeRun';		tab;		nextPutAll: 'timeNvcc';		tab;		nextPutAll: 'timeCuda';		cr.	logStats do: 			[:stats |			stats do: 					[:w |					w printOn: text.					text tab].			text cr].	loopTitle := self loopRange asArray.	title := 'LoopRange' , loopTitle first printString , '-' , (loopTitle at: 2) printString.	titleStats := self logAndStatsDir , title , '.stats'.	file := titleStats asFilename writeStream.	file		nextPutAll: text contents;		close.	Smalltalk.Tools.FileBrowser openOnFileNamed: titleStats.	^text contents</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="includeFilename:">includeFilename: anObject	includeFilename := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doProcessStats:">doProcessStats: logStats		| text titleStats file data title |	text := String new writeStream.	logStats		do:			[:stats | 			stats class instVarNames				do:					[:w | 					data := stats perform: w asSymbol.					data printOn: text.					text tab].			text cr].	title := self leCode value readStream upTo: Character cr.	titleStats := self logAndStatsDir, title , '.stats'.	file := titleStats asFilename writeStream.	file		nextPutAll: text contents;		close.	Smalltalk.Tools.FileBrowser openOnFileNamed: titleStats.	^text contents</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doProcessStatNumbers:withName:">doProcessStatNumbers: logStats withName: aString	| text titleStats file title loopTitle |	text := String new writeStream.	text		nextPutAll: 'range';		tab;		nextPutAll: 'points';		tab;		nextPutAll: 'diameterMax';		tab;		nextPutAll: 'networks';		tab;		nextPutAll: 'processes';		tab;		nextPutAll: 'minFanout';		tab;		nextPutAll: 'maxFanout';		tab;		nextPutAll: 'channels';		tab;		nextPutAll: 'timeGen';		tab;		nextPutAll: 'timeKroc';		tab;		nextPutAll: 'timeRun';		tab;		nextPutAll: 'timeNvcc';		tab;		nextPutAll: 'timeCuda';		tab;		nextPutAll: 'CoverageArea';		cr.	logStats do: 			[:stats |			stats do: 					[:w |					w printOn: text.					text tab].			text cr].	loopTitle := self loopRange asArray.	title := aString , loopTitle first printString , '-' , (self loopRange last) printString.	titleStats := self logAndStatsDir , title , '.stats'.	file := titleStats asFilename writeStream.	file		nextPutAll: text contents;		close.	Smalltalk.Tools.FileBrowser openOnFileNamed: titleStats.	^text contents</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="loopRange:">loopRange: anObject	loopRange := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="defineLoopRangeAndNodes">defineLoopRangeAndNodes	self defineLoopRange.	self defineLoopNodes</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="doSource">doSource		SourceFileManager install</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doQuit">doQuit		ObjectMemory quitDialog</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>changing</category><body package="DistributedModeling" selector="deleteModele">deleteModele		| sel yes |	sel := self lesModeles selection.	sel isNil		ifFalse:			[yes := Dialog confirm: 'remove ' , sel asString , '?'.			yes ifTrue: [AlgoDis.NetworkTopologies removeSelector: sel]].	self lesModeles list: self getModeles.	self lesModeles selection: nil</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="commands">commands	^commands</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="leCodeView:">leCodeView: anObject	leCodeView := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>changing</category><body package="DistributedModeling" selector="graphicEnabled">graphicEnabled		(self builder componentAt: #doGraphic) enable.	(self builder componentAt: #RadiusField) enable.	(self builder componentAt: #SizeField) enable.	(self builder componentAt: #NodesField) enable</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="mapEditMobile">mapEditMobile		UIPickNodesMobile open</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="theNbSystems">theNbSystems	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^theNbSystems isNil		ifTrue:			[theNbSystems := 20 asValue]		ifFalse:			[theNbSystems]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="hasKroc">hasKroc	^hasKroc</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="hasEvince:">hasEvince: anObject	hasEvince := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="leCode">leCode	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method." 	^leCode isNil		ifTrue:			[leCode := Text new asValue]		ifFalse:			[leCode]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="hasps2png:">hasps2png: anObject	hasps2png := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="execManager">execManager	^execManager</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="forExpress">forExpress	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^forExpress isNil		ifTrue:			[forExpress := false asValue]		ifFalse:			[forExpress]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>changing</category><body package="DistributedModeling" selector="dotRunning">dotRunning		| label |	label := self builder componentAt: #doDotFile.	label disable</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="forAnimatedView">forAnimatedView	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^forAnimatedView isNil		ifTrue:			[forAnimatedView := false asValue]		ifFalse:			[forAnimatedView]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="genOccam:stats:doCompile:text:">genOccam: title stats: stats doCompile: doCompile text: text	| titleOccam file cmd time returnKroc filename |	titleOccam := self generateDir , title , '.occ'.	file := titleOccam asFilename writeStream.	file		nextPutAll: text;		close.	self displayCode ifTrue: [FileBrowser openOnFileNamed: titleOccam].	(self hasKroc and: [doCompile])		ifTrue: 			[cmd := 'kroc ' , titleOccam , ' -lcourse' , ' -o ' , self generateDir , title.			time := Time millisecondsToRun: [returnKroc := UnixProcess cshOne: cmd].			stats timeKroc: time.			filename := self generateDir , title , '.trace'.			cmd := ' time ./' , self generateDir , title , ' &gt; ' , filename.			time := Time millisecondsToRun: [returnKroc := UnixProcess cshOne: cmd].			stats timeRun: time.			self processTrace4: filename with: stats.			stats loopOk: true]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="mapGPS">mapGPS	"GPSInterpreter package"	UIGeoreferencer open</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="logAndStatsDir">logAndStatsDir	^logAndStatsDir</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="hasDot:">hasDot: anObject	hasDot := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doLoad">doLoad		| fn rs itsName |	itsName := Dialog requestFileName: 'file name?' default: '*.net'.	fn := itsName asFilename.	fn exists		ifTrue:			[rs := fn asFilename readStream.			self leCode value: rs contents.			rs close]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doGenerate:">doGenerate: doCompile	"self halt."	| range nb net text graph title ws methodName windowSize stats log time1 time2 keys |	stats := NetworkStatistics new.	(self leStyle value isNil and: [self leCode value = '']) ifTrue: [^stats].	stats timeGen: 0.	(#(#forSensors #forGrid) includes: self leStyle value)		ifTrue: 			[nb := self theNbSystems value.			range := self theRadius value.			stats				range: range;				points: nb;				timeGen: 0.			windowSize := self theSize value.			time1 := Time millisecondsToRun: 							[| association |							association := self										generateForStyle: self leStyle value										range: range										points: nb										wSize: windowSize										drawing: self doGraphic value										mobile: self forMobile value.							title := association key.							network := association value.							net := network doNetworkLocalized: title.							self forChannelModel value								ifTrue: [graph := net buildGraphAsync]								ifFalse: [graph := net buildGraph].							keys := network networkCon nodeDictionary keys.							keys isEmpty ifTrue: [^Dialog warn: 'no links, no node in this network']].			stats timeGen: time1].	self leStyle value = #forFFT		ifTrue: 			[net := NetworkTopologies new fftDIT8Points.			graph := net buildFFTGraph.			title := 'fftDIT8Points'].	self leStyle value isNil		ifTrue: 			[methodName := NetworkTopologies compile: self leCode value.			title := methodName asString.			network := NetworkTopologies new perform: methodName.			keys := network nodeDictionary keys.			keys isEmpty ifTrue: [^Dialog warn: 'no links, no node in this network'].			self forChannelModel value				ifTrue: [graph := network buildGraphAsync]				ifFalse: [graph := network buildGraph].			ws := Text new writeStream.			network statisticsOn: ws.			net := network.			self laConsole value: ws contents].	graph includeFilename: self includeFilename.	graph includeData: self includeData.	"to be updated to asynchronous channels "	time2 := Time millisecondsToRun: 					[self forChannelModel value						ifTrue: [text := graph programMain]						ifFalse: [text := graph programMain]	" invalide, a revoir"].	stats timeGen: stats timeGen + time2.	self forCuda value		ifTrue: 			[self forChannelModel value not				ifTrue: 					[self						genCuda: graph						title: title						doCompile: doCompile						stats: stats]				ifFalse: [self error: 'we will see this later']].	self doBuildDotFile value ifTrue: [net printDotOn: title labeling: true].	self doDotFile value		ifTrue: [self hasDot ifTrue: [self genDotFile: title]].	self forAnimatedView value		ifTrue: [net buildHotDrawNetworkOn: 'generatedNet'].	self doOccam value		ifTrue: 			[self				genOccam: title				stats: stats				doCompile: doCompile				text: text].	self forExpress value ifTrue:  [ self doGenExpress: title, '.occ'].	(#(#forSensors #forGrid) includes: self leStyle value)		ifTrue: 			[ws := WriteStream on: String new.			ws				cr;				nextPutAll: network statistics;				cr.			ws				cr;				nextPutAll: 'in ' , (stats timeGen / 1000.0) printString , ' seconds';				cr.			self laConsole value: ws contents.			text := net printString.			self leCode value: text].	Transcript		cr;		show: stats printString;		cr.	log := (self logAndStatsDir , 'log.' , stats range printString) asFilename				writeStream.	stats printOn: log.	log close.	self execManager networkGraph: graph copy.	"self halt."	^stats</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doAccept">doAccept		self leStyle value: nil.	self doGenerate: false</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doLoopRangeAndNodes">doLoopRangeAndNodes	| logStats stats n logStatsLoc statsi vj |	(self forCuda value = false and: [self doOccam value = false]) ifTrue: [^nil].	logStats := OrderedCollection new.	n := 3.	self loopRange do: 			[:range |			self theRadius value: range.			self loopNodes do: 					[:node |					self theNbSystems value: node.					logStatsLoc := OrderedCollection new.					n timesRepeat: 							[stats := self doGenerateCompile.							[stats loopOk] whileFalse: [stats := self doGenerateCompile].							logStatsLoc add: stats asArray].					stats := stats asArray.					stats := stats copyFrom: 1 to: stats size - 1.					1 to: n - 1						do: 							[:i |							statsi := logStatsLoc at: i.							stats keysAndValuesDo: 									[:j :v |									| v0 |									v0 := v isNil ifTrue: [0] ifFalse: [v].									vj := (statsi at: j) isNil ifTrue: [0] ifFalse: [statsi at: j].									stats at: j put: v0 + vj]].					stats keysAndValuesDo: [:j :v | stats at: j put: (v / n) asFloat rounded].					logStats add: stats]].	self doProcessStatNumbers: logStats withName: 'LoopRangeAndNodes'.	Transcript show: '========================'.	Transcript cr	"ObjectMemory snapshot"</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="defineInclude">defineInclude		| fn |	fn := Dialog requestFileName: 'Choose include file' default:  '*include*.occ'.	fn isEmpty		ifFalse:			[fn asFilename isReadable				ifTrue: [self includeFilename: fn]				ifFalse: [Dialog warn: 'not readable']]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="leCodeView">leCodeView	^leCodeView</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="execManager:">execManager: anObject	execManager := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="forSensors">forSensors	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^forSensors isNil		ifTrue:			[forSensors := true asValue]		ifFalse:			[forSensors]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="krocCommand">krocCommand		^self commands at: 4</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="genCuda:title:doCompile:stats:">genCuda: graph title: title doCompile: doCompile stats: stats	| titleCuda file nvccTime str cudaTime system directory |	system := graph cudaSystem.	directory := self generateDir.	directory asFilename ensureDirectory.	doCompile		ifFalse: 			[titleCuda := directory , title , '.cu'.			file := titleCuda asFilename writeStream.			system cudaGenOn: file.			file close]		ifTrue: 			[titleCuda := 'CudaInterface/generated.cu'.				'CudaInterface' asFilename ensureDirectory.			file := titleCuda asFilename writeStream.			system cudaGenOn: file.			file close.			"Using -B to force make because sometimes make doesn't compile when the filetime changed dont know why"			nvccTime := Time millisecondsToRun: [str := UnixProcess cshOne: 'cd CudaInterface/ ; time make -B'].			Transcript				show: str;				cr.			"(Delay forMilliseconds: 1000) wait."			cudaTime := Time millisecondsToRun: [str := UnixProcess cshOne: 'cd Cuda/ ; ./GenericStatic '].			Transcript				show: 'Cuda';				tab;				show: self theNbSystems value printString;				tab;				show: self theRadius value printString;				tab;				show: cudaTime printString;				cr.			"show: str;				cr."			(str matchesRegex: '.*unspecified launch failure.*')				ifFalse: 					[stats timeCuda: cudaTime.					stats timeNvcc: nvccTime]				ifTrue: 					[stats timeCuda: -1.					stats timeNvcc: -1.					stats loopOk: false]]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="forMobile">forMobile	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^forMobile isNil		ifTrue:			[forMobile := false asValue]		ifFalse:			[forMobile]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="ps2pngCommand">ps2pngCommand		^self commands at:3</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="simulateBench">simulateBench	| em |	50 to: 120 by: 10 do:[ :range |	Transcript show: 'Starting simulation : ', range printString;cr.	em := self execManager.	self doGraphic value: false.	self doBuildDotFile value: false.	self doOccam value: false.	self doDotFile value: false.	self forAnimatedView value: false.	self forDisplayCode value: false.	self forChannelModel value: false.	self forCuda value: true.	self forMobile value: true.	self leStyle value: #forSensors.	self theSize value: 2000.	self theRadius value: range.	self theNbSystems value: 1500.	self doGenerateCompile.	em createConnection.	em simulationBench.	Transcript		show: 'Temps total: ' , em tempsTotal printString;		cr;		show: 'Nombre de calcul effectué: ' , em nbCalc printString, '/' , em nbCalcDone printString;		cr;		show: 'Temps moyen d''une étape: ' , em averageStepTime printString;		cr;show: self laConsole value printString.]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="forChannelModel">forChannelModel	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^forChannelModel isNil		ifTrue:			[forChannelModel := false asValue]		ifFalse:			[forChannelModel]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doLoopNodes">doLoopNodes	| logStats stats n logStatsLoc statsi vj |	(self forCuda value = false and: [self doOccam value = false]) ifTrue: [^nil].	logStats := OrderedCollection new.	n := 3.	self loopNodes do: 			[:node |			self theNbSystems value: node.			logStatsLoc := OrderedCollection new.			n timesRepeat: 					[stats := self doGenerateCompile.					[stats loopOk] whileFalse: [stats := self doGenerateCompile].					logStatsLoc add: stats asArray].			stats := stats asArray.			stats := stats copyFrom: 1 to: stats size - 1.			1 to: n - 1				do: 					[:i |					statsi := logStatsLoc at: i.					stats keysAndValuesDo: 							[:j :v |							| v0 |							v0 := v isNil ifTrue: [0] ifFalse: [v].							vj := (statsi at: j) isNil ifTrue: [0] ifFalse: [statsi at: j].							stats at: j put: v0 + vj]].			stats keysAndValuesDo: [:j :v | stats at: j put: (v / n) asFloat rounded].			logStats add: stats].	self doProcessStatNumbers: logStats withName: 'LoopNodes'.	Transcript show: '========================'.	Transcript cr	"ObjectMemory snapshot"</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="getModeles">getModeles		^NetworkTopologies selectors asSortedCollection asOrderedCollection</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="generateForStyle:range:points:wSize:drawing:mobile:">generateForStyle: aStyle range: range points: nb wSize: windowSize drawing: graphic mobile: aMobile	| theTitle m sw |	aStyle = #forSensors		ifTrue: 			[theTitle := 'genRange' , range printString , 'Points' , nb printString.			aMobile				ifTrue: 					[network := NetworkGeometry								rangeNetworkMobile: range								windowSize: windowSize								nbPoints: nb								drawing: graphic								title: theTitle.					m := AlgoDis.Mobile trajectory: (AlgoDis.Trajectory position: (Point x: 10 y: 10) movement: (Point x: 10 y: 10)) range: network portee.					sw := AlgoDis.SystematicWalk								mobile: m								sensors: network points								width: windowSize								height: windowSize.					self execManager mobilePath: sw mobilePath]				ifFalse: 					[network := NetworkGeometry								rangeNetwork: range								windowSize: windowSize								nbPoints: nb								drawing: graphic								title: theTitle].			^theTitle -&gt; network].	aStyle = #forGrid		ifTrue: 			[theTitle := 'gridRange' , range printString , 'Points' , nb printString.			network := NetworkGeometry						gridNetwork: range						nbPoints: nb						drawing: graphic						title: theTitle.			^theTitle -&gt; network]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doAcceptAndSave">doAcceptAndSave	| itsName methodName fn ws rs |	rs := self leCode value readStream.	methodName := rs upTo: Character cr.	self leStyle value: nil.	self doGenerate: false.	itsName := Dialog requestNewFileName: 'file name?'				default: methodName asString , '.net'.	itsName isEmpty		ifFalse: 			[fn := itsName asFilename.			fn exists				ifTrue: [fn isWritable ifFalse: [^Dialog warn: 'cannot write ' , itsName]].			ws := fn asFilename writeStream.			ws nextPutAll: self leCode value.			ws close]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="forRandom">forRandom	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^forRandom isNil		ifTrue:			[forRandom := false asValue]		ifFalse:			[forRandom]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="includeData:">includeData: anObject	includeData := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>utilities</category><body package="DistributedModeling" selector="processTrace4">processTrace4	" UINetworkGeometry new processTrace4 "		| scan filename rs ws line lineTokens last now leaderDico diamDico leader diameter val |	scan := Scanner new.	filename := Dialog requestFileName: 'trace file ?'.	rs := filename asFilename readStream.	ws := (filename , '.stat') asFilename writeStream. 	last := 0.	leaderDico := Dictionary new.	diamDico := Dictionary new.	[rs atEnd]		whileFalse:			[line := rs upTo: Character cr.			lineTokens := scan scanTokens: line.			now := lineTokens at: 2.			leader := lineTokens at: 4.			diameter := lineTokens at: 3.			val := leaderDico				at: leader				ifAbsent: [0].			val := val + 1.			diamDico at: leader put: diameter.			leaderDico at: leader put: val.			last = 0				ifTrue: [lineTokens at: 2 put: 0]				ifFalse:					[lineTokens						at: 2						put: now - last].			last := now.			lineTokens				do:					[:word | 					word isSymbol						ifTrue: [ws nextPutAll: word]						ifFalse: [word printOn: ws].					ws tab].			ws cr].	leaderDico		keysAndValuesDo:			[:key :valx | 			key printOn: ws.			ws tab.			valx printOn: ws.			ws tab.			(diamDico at: key) printOn: ws.			ws cr].	ws close.	rs close</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="doGraphic">doGraphic	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doGraphic isNil		ifTrue:			[doGraphic := false asValue]		ifFalse:			[doGraphic]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doGenerateCompile">doGenerateCompile	"This stub method was generated by UIDefiner"	^self doGenerate: true</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="includeData">includeData	^includeData</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>changing</category><body package="DistributedModeling" selector="displayCode">displayCode		| tag |	tag := self forDisplayCode value.	^tag</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="doDotFile">doDotFile	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doDotFile isNil		ifTrue:			[doDotFile := false asValue]		ifFalse:			[doDotFile]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="defineDataInclude">defineDataInclude	| fn |	fn := Dialog requestFileName: 'Choose data  include file'				default: '*data*.occ'.	fn isEmpty		ifFalse: 			[fn asFilename isReadable				ifTrue: [self includeData: fn]				ifFalse: 					[Dialog warn: 'sorry, not readable. data file cleared'.					self includeData: nil]]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="defineLoopNodes">defineLoopNodes	"int := self loopRange printString."	| text items start args it int startLoop stepLoop stopLoop initialAnswerWs initialAnswer |	int := self loopNodes.	startLoop := int first.	stepLoop := int increment.	stopLoop := int last.	initialAnswerWs := WriteStream on: String new.	startLoop printOn: initialAnswerWs.	initialAnswerWs nextPutAll: ' to: '.	stopLoop printOn: initialAnswerWs.	initialAnswerWs nextPutAll: ' by: '.	stepLoop printOn: initialAnswerWs.	initialAnswer := initialAnswerWs contents.	"int := int		copyFrom: 2		to: int size - 1."	text := Dialog request: 'Type nodes interval such as: x to: y by: step' initialAnswer: initialAnswer.	text isEmpty		ifFalse: 			[items := Scanner new scanTokens: text.			start := items first.			items size &lt; 5 ifTrue: [self error: 'Type range interval such as: x to: y by: step'].			args := Array with: (items at: 3) with: (items at: 5).			it := start perform: #to:by: withArguments: args.			self loopNodes: it]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doSave">doSave	| fn ws itsName |	itsName := Dialog requestNewFileName: 'Name a file' default: '*.net'.	"	itsName := Dialog requestFileName: 'file name?' default: '*.net'."	fn := itsName asFilename.	fn exists ifTrue: [fn isWritable ifFalse: [^Dialog warn: 'cannot write ' , itsName]].	ws := fn asFilename writeStream.	ws nextPutAll: self leCode value.	ws close</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="doLoop">doLoop	| logStats stats n logStatsLoc statsi vj |	(self forCuda value = false and: [self doOccam value = false]) ifTrue: [^nil].	logStats := OrderedCollection new.	n := 5.	"nombre de tirages aléatoires"	self loopRange do: 			[:range |			self theRadius value: range.			logStatsLoc := OrderedCollection new.			n timesRepeat: 					[stats := self doGenerateCompile.					[stats loopOk] whileFalse: [stats := self doGenerateCompile].					logStatsLoc add: stats asArray].			stats := stats asArray.			stats := stats copyFrom: 1 to: stats size - 1.			1 to: n - 1				do: 					[:i |					statsi := logStatsLoc at: i.					stats keysAndValuesDo: 							[:j :v |							| v0 |							v0 := v isNil ifTrue: [0] ifFalse: [v].							vj := (statsi at: j) isNil ifTrue: [0] ifFalse: [statsi at: j].							stats at: j put: v0 + vj]].			"self halt."			stats keysAndValuesDo: [:j :v | stats at: j put: (v / n) rounded].			logStats add: stats].	"self doProcessStatNumbers: logStats."	self doProcessStatNumbers: logStats withName: 'LoopRange'.	Transcript show: '========================'.	Transcript cr	"ObjectMemory snapshot"</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="getMenu">getMenu		(self builder componentAt: #leCodeSpec)  widget controller: UINetworkGeometryController new</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>changing</category><body package="DistributedModeling" selector="updateModeles">updateModeles		| sel |	sel := self lesModeles selection.	self lesModeles list: self getModeles.	self lesModeles selection: sel</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>changing</category><body package="DistributedModeling" selector="changedDot">changedDot		self doDotFile value ifTrue: [self doBuildDotFile value: true]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="generateDir:">generateDir: anObject	generateDir := anObject</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="hasDot">hasDot	^hasDot</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>utilities</category><body package="DistributedModeling" selector="processTrace4:">processTrace4: filename	" UINetworkGeometry new processTrace4: 'kiki' "		| scan rs ws line lineTokens last now leaderDico diamDico leader diameter val maxDiam diam |	scan := Scanner new.	rs := filename asFilename readStream.	ws := (filename , '.stat') asFilename writeStream.	last := 0.	leaderDico := Dictionary new.	diamDico := Dictionary new.	[rs atEnd]		whileFalse:			[line := rs upTo: Character cr.			lineTokens := scan scanTokens: line.			now := lineTokens at: 2.			leader := lineTokens at: 4.			diameter := lineTokens at: 3.			val := leaderDico				at: leader				ifAbsent: [0].			val := val + 1.			diamDico at: leader put: diameter.			leaderDico at: leader put: val.			last = 0				ifTrue: [lineTokens at: 2 put: 0]				ifFalse:					[lineTokens						at: 2						put: now - last].			last := now.			lineTokens				do:					[:word | 					word isSymbol						ifTrue: [ws nextPutAll: word]						ifFalse: [word printOn: ws].					ws tab].			ws cr].	maxDiam := 0.	leaderDico		keysAndValuesDo:			[:key :valx | 			key printOn: ws.			ws tab.			valx printOn: ws.			diam := diamDico at: key.			diam &gt; maxDiam ifTrue: [maxDiam := diam].			ws tab.			diam printOn: ws.			ws cr]. 	ws cr.	ws nextPutAll: 'portee : '.	network portee printOn: ws.	ws cr.	ws nextPutAll: 'points : '.	network points size printOn: ws.	ws cr.	ws nextPutAll: 'diametre max :'.	maxDiam printOn: ws.	ws cr.	ws nextPutAll: 'nb networks :'.	diamDico size printOn: ws.	ws cr.	ws nextPutAll: network statistics.	ws close.	rs close</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="leStyle">leStyle	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leStyle isNil		ifTrue:			[leStyle := nil asValue]		ifFalse:			[leStyle]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="postOpenWith:">postOpenWith: windowSpec		super postOpenWith: windowSpec.	self graphicDisabled.	hasDot ifFalse: [(self builder componentAt: #doDotFile) disable].	^Array with: hasEvince with: hasps2png with: hasKroc</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>actions</category><body package="DistributedModeling" selector="simulate">simulate	self execManager createConnection.	self execManager simulation.	"self execManager simulationV2."</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>changing</category><body package="DistributedModeling" selector="lesModelesChanged">lesModelesChanged		| selected text |	selected := self lesModeles selection.	selected isNil		ifTrue: [self leCode value: String new]		ifFalse:			[text := NetworkTopologies sourceMethodAt: selected.			self leStyle value: nil.			text isNil ifFalse: [self leCode value: text]]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="loopNodes">loopNodes	^loopNodes</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="doBuildDotFile">doBuildDotFile	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doBuildDotFile isNil		ifTrue:			[doBuildDotFile := false asValue]		ifFalse:			[doBuildDotFile]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="theSize">theSize	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^theSize isNil		ifTrue:			[theSize := 640 asValue]		ifFalse:			[theSize]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="network">network	^network</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>accessing</category><body package="DistributedModeling" selector="generateDir">generateDir	^generateDir</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>utilities</category><body package="DistributedModeling" selector="processTrace4:with:">processTrace4: filename with: statistics	" UINetworkGeometry new processTrace4: 'kiki' "		| scan rs ws line lineTokens last now leaderDico diamDico leader diameter val maxDiam diam parsable |	"self halt."	scan := Scanner new.	rs := filename asFilename readStream.	ws := (filename , '.stat') asFilename writeStream.	last := 0.	leaderDico := Dictionary new.	diamDico := Dictionary new.	[rs atEnd]		whileFalse:			[line := rs upTo: Character cr.			lineTokens := scan scanTokens: line.			parsable := self parsable: lineTokens.			parsable				ifTrue:					[now := lineTokens at: 2.					leader := lineTokens at: 4.					diameter := lineTokens at: 3.					val := leaderDico						at: leader						ifAbsent: [0].					val := val + 1.					diamDico at: leader put: diameter.					leaderDico at: leader put: val.					last = 0						ifTrue: [lineTokens at: 2 put: 0]						ifFalse:							[lineTokens								at: 2								put: now - last].					last := now.					lineTokens						do:							[:word | 							word isSymbol								ifTrue: [ws nextPutAll: word]								ifFalse: [word printOn: ws].							ws tab].					ws cr]].	maxDiam := 0.	leaderDico		keysAndValuesDo:			[:key :valx | 			key printOn: ws.			ws tab.			valx printOn: ws.			diam := diamDico at: key.			diam &gt; maxDiam ifTrue: [maxDiam := diam].			ws tab.			diam printOn: ws.			ws cr].	ws cr.	ws nextPutAll: 'diametre max :'.	maxDiam printOn: ws.	statistics diameterMax: maxDiam.	ws cr.	ws nextPutAll: 'nb networks :'.	diamDico size printOn: ws.	statistics networks: diamDico size.	ws cr.	ws nextPutAll: 'network statistics'.	"self halt.""	network statisticsTo: statistics."	ws close.	rs close</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>aspects</category><body package="DistributedModeling" selector="theRadius">theRadius	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^theRadius isNil		ifTrue:			[theRadius := 100 asValue]		ifFalse:			[theRadius]</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>changing</category><body package="DistributedModeling" selector="graphicDisabled">graphicDisabled		(self builder componentAt: #doGraphic) disable.	(self builder componentAt: #RadiusField) disable.	(self builder componentAt: #SizeField) disable.	(self builder componentAt: #NodesField) disable</body></methods><methods><class-id>AlgoDis.UINetworkGeometry</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	| coll text rs uname collBool |		uname := (UnixProcess cshOne: 'uname -a') tokensBasedOn: $ .	uname first = 'Darwin'		ifTrue: 			[hasDot := UnixProcess cshOne: 'which /opt/local/bin/dot'.			hasEvince := UnixProcess cshOne: 'which /opt/local/bin/xpdf'.			hasps2png := UnixProcess cshOne: 'which /opt/local/bin/ps2png'.			hasKroc := UnixProcess cshOne: 'which /opt/local/bin/kroc']		ifFalse: 			[hasDot := UnixProcess cshOne: 'which dot'.			hasEvince := UnixProcess cshOne: 'which evince'.			hasps2png := UnixProcess cshOne: 'which ps2png'.			hasKroc := UnixProcess cshOne: 'which kroc'].	coll := OrderedCollection new.	coll		add: hasDot;		add: hasEvince;		add: hasps2png;		add: hasKroc.	coll := coll collect: [:command | text := (command tokensBasedOn: Character cr) first].	self commands: coll.	collBool := coll collect: [:command | command asFilename exists].	rs := collBool readStream.	hasDot := rs next.	hasEvince := rs next.	hasps2png := rs next.	hasKroc := rs next.	self leCodeView: TextEditorView new.	self leCodeView model: Text new asValue.	self leCodeView controller: UINetworkGeometryController new.	self leStyle onChangeSend: #changedStyle to: self.	self doSource.	self lesModeles list: self getModeles.	self lesModeles selectionIndexHolder onChangeSend: #lesModelesChanged to: self.	self doDotFile onChangeSend: #changedDot to: self.	self includeFilename: 'nodes-test-include.occ'.	self loopRange: (20 to: 50 by: 10).	self displaySourceChoice: false.	self generateDir: 'Generated/'.	self logAndStatsDir: 'LogAndStats/'.	self ensureDirectory: self logAndStatsDir asFilename.	self ensureDirectory: self generateDir asFilename.	self ensureDirectory: 'Cuda/' asFilename.	self ensureDirectory: 'Generated/' asFilename.	self ensureDirectory: 'Library/' asFilename.	self execManager: ExecManager new.	super initialize</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>building</category><body package="DistributedModeling" selector="buildNetworkNode">buildNetworkNode	| newNode |	(self point isNil or: [self range isNil])		ifTrue: [newNode := NetworkNode new]		ifFalse: [newNode := NetworkNodeLocalized new].	^newNode</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>accessing</category><body package="DistributedModeling" selector="fanOutNodes:">fanOutNodes: anObject	fanOutNodes := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>accessing</category><body package="DistributedModeling" selector="nodeName">nodeName	^nodeName</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>accessing</category><body package="DistributedModeling" selector="procedureName:">procedureName: anObject	procedureName := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>accessing</category><body package="DistributedModeling" selector="point">point	^point</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	nodeName := nil.	fanOutNodes := nil.	procedureName := nil.	point := nil.	range := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>accessing</category><body package="DistributedModeling" selector="procedureName">procedureName	^procedureName</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>accessing</category><body package="DistributedModeling" selector="point:">point: anObject	point := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>accessing</category><body package="DistributedModeling" selector="range">range	^range</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>accessing</category><body package="DistributedModeling" selector="range:">range: anObject	range := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>accessing</category><body package="DistributedModeling" selector="nodeName:">nodeName: anObject	nodeName := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeAttributes</class-id> <category>accessing</category><body package="DistributedModeling" selector="fanOutNodes">fanOutNodes	^fanOutNodes</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>accessing</category><body package="DistributedModeling" selector="communications">communications	^communications</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>building</category><body package="DistributedModeling" selector="buildHotDrawNetwork">buildHotDrawNetwork	| netEditor links source target colors sourceNode |	colors := ((ColorValue constantNames reject: [:c | c = #black])				collect: [:c | ColorValue perform: c]) readStream.	4 timesRepeat: [colors next].	Dictionary new.	netEditor := AlgoDis.NetEdit open source.	netEditor drawing attributes lineWidth: 1.	self nodeDictionary keys do: 			[:key |			"add the node into the editor"			netEditor				addNode: key				forNetworkNode: (self nodeDictionary at: key)				color: colors next].	self nodeDictionary keys do: 			[:key |			links := (self nodeDictionary at: key) first do: 							[:aLink |							source := key.							sourceNode := netEditor nodeNamed: key.							target := aLink.							netEditor								addEdgeFrom: source								to: target								color: sourceNode color]].	^netEditor</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>testing</category><body package="DistributedModeling" selector="sampleConnectivity">sampleConnectivity	"self new sampleConnectivity."	| connectivity netNodesDico graph |	connectivity := NetworkConnectivity new.	netNodesDico := connectivity sampleDictionary.	graph := NetworkGraph with: netNodesDico values.	graph		buildInputs;		buildTable;		networkName: 'sample'.	^graph</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>building</category><body package="DistributedModeling" selector="printDotOn:">printDotOn: aFileName	| links source target colors fn ws networkNodeAttributes |	fn := aFileName asFilename.	ws := fn writeStream.	ws		nextPutAll: 'digraph finite_state_machine {	rankdir=LR;	size="8,5" 	node [shape = circle];'.	colors := ((ColorValue constantNames reject: [:c | c = #black])				collect: [:c | ColorValue perform: c]) readStream.	4 timesRepeat: [colors next].	self nodeDictionary keys do: 			[:key |			networkNodeAttributes := self nodeDictionary at: key.			links := networkNodeAttributes fanOutNodes do: 							[:aLink |							source := key.							target := aLink.							ws								nextPutAll: key;								space;								nextPut: $-;								nextPut: $&gt;;								space;								nextPutAll: target;								nextPut: $;;								cr]].	ws		nextPut: $};		cr.	ws close</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>accessing</category><body package="DistributedModeling" selector="nodeDictionary:">nodeDictionary: aValue	nodeDictionary := aValue</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>printing</category><body package="DistributedModeling" selector="printOn:">printOn: aStream	" we should obtain something like:messages M1 , M2 .P1 { P2, P3} PimP2 { P1, P3  } PamP3 { P1, P2  } Poumormessages M1 , M2 .P1 { P2, P3} Pim 2@2"	| allNodeNames fanOutNodes procedureName attributes |	aStream nextPutAll: self name.	" network name"	aStream		cr;		cr.	aStream nextPutAll: 'messages '.	self communications keysAndValuesDo: 			[:index :key |			aStream nextPutAll: key asString.			index = self communications size				ifTrue: [aStream nextPut: $.]				ifFalse: [aStream nextPut: $ ].			aStream space].	aStream cr.	allNodeNames := SortedCollection sortBlock: self class sortBlock.	allNodeNames addAll: self nodeDictionary keys.	allNodeNames do: 			[:key |			| point range |			attributes := self nodeDictionary at: key.			fanOutNodes := attributes fanOutNodes.			procedureName := attributes procedureName.			point := attributes point.			range := attributes range.			aStream nextPutAll: key asString.			aStream nextPutAll: ' { '.			fanOutNodes keysAndValuesDo: 					[:nodeIndex :nodeName |					aStream nextPutAll: nodeName asString.					nodeIndex = fanOutNodes size ifFalse: [aStream nextPut: $,].					aStream space].			aStream				nextPut: $};				nextPut: $ .			aStream nextPutAll: procedureName asString.			point isNil ifFalse: [aStream nextPutAll: ' (' , point printString , ')'].			range isNil ifFalse: [aStream nextPutAll: ' (' , range printString , ')'].			aStream cr]</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>building</category><body package="DistributedModeling" selector="buildGraphAsync">buildGraphAsync	| nodes netNodesDico targetName targetNode networkGraph networkNodeAttributes |	netNodesDico := Dictionary new.	networkGraph := NetworkGraphAsync new.	networkGraph nodeDictionary: self nodeDictionary.	nodes := self nodeDictionary keys collect: 					[:key |					| links newNode |					networkNodeAttributes := self nodeDictionary at: key.					newNode := NetworkNodeAsync new.					newNode networkGraph: networkGraph.					newNode processName: networkNodeAttributes procedureName.					netNodesDico at: key put: newNode.					links := (self nodeDictionary at: key) first collect: 									[:aLink |									"tmp structure"									| link |									link := NetworkLink new.									link source: newNode.									link target: aLink.	"to early to allocate the node"									link].					newNode						name: key;						outputLinks: links.					newNode].	netNodesDico keysAndValuesDo: 			[:key :node |			node outputLinks do: 					[:aLink |					targetName := aLink target.					targetNode := netNodesDico at: targetName.					aLink target: targetNode]].	networkGraph nodes: nodes.	networkGraph buildInputs.	networkGraph networkName: name.	^networkGraph</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>accessing</category><body package="DistributedModeling" selector="name">name	^name</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>building</category><body package="DistributedModeling" selector="printDotOn:labeling:">printDotOn: aFileName labeling: doLabel	| links source target colors fn ws networkNodeAttributes |	fn := ('Generated/' , aFileName , '.dot') asFilename.	ws := fn writeStream.	ws nextPutAll: 'digraph ' , aFileName				, ' {	rankdir=LR;	size="8,5" 	node [shape = circle];'.	colors := ((ColorValue constantNames reject: [:c | c = #black])				collect: [:c | ColorValue perform: c]) readStream.	4 timesRepeat: [colors next].	self nodeDictionary keys do: 			[:key |			networkNodeAttributes := self nodeDictionary at: key.			links := networkNodeAttributes fanOutNodes do: 							[:aLink |							source := key.							target := aLink.							ws								nextPutAll: key;								space;								nextPut: $-;								nextPut: $&gt;;								space;								nextPutAll: target.							doLabel								ifTrue: 									[ws										nextPutAll: ' [ label = "';										nextPutAll: key;										nextPut: $.;										nextPutAll: target;										nextPutAll: '" color = "blue"  ] '].							ws								nextPut: $;;								cr]].	ws		nextPut: $};		cr.	ws close</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>building</category><body package="DistributedModeling" selector="sampleGraph">sampleGraph	"self halt."	| nodes netNodesDico targetName targetNode networkGraph networkNodeAttributes attributes |	netNodesDico := Dictionary new.	networkGraph := NetworkGraph new.	networkGraph nodeDictionary: self nodeDictionary.	networkGraph initialConnectivity: self.	nodes := self nodeDictionary keys collect: 					[:key |					| links newNode |					networkNodeAttributes := self nodeDictionary at: key.					newNode := networkNodeAttributes buildNetworkNode.					newNode networkGraph: networkGraph.					newNode processName: networkNodeAttributes procedureName.					newNode pos: networkNodeAttributes point.					newNode range: networkNodeAttributes range.					netNodesDico at: key put: newNode.					attributes := self nodeDictionary at: key.					links := attributes fanOutNodes.					links := links collect: 							[:aLink |							"tmp structure"							| link |							link := NetworkLink new.							link source: newNode.							link target: aLink.	"to early to allocate the node"							link].					newNode						name: key;						outputLinks: links.					newNode].	netNodesDico keysAndValuesDo: 			[:key :node |			node outputLinks do: 					[:aLink |					targetName := aLink target.					targetNode := netNodesDico at: targetName.					aLink target: targetNode]].	networkGraph nodes: nodes.	networkGraph buildInputs.	networkGraph networkName: name.	^networkGraph</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>building</category><body package="DistributedModeling" selector="buildGraph">buildGraph	"self halt."	| nodes netNodesDico targetName targetNode networkGraph networkNodeAttributes attributes |	netNodesDico := Dictionary new.	networkGraph := NetworkGraph new.	networkGraph nodeDictionary: self nodeDictionary.	networkGraph initialConnectivity: self.	nodes := self nodeDictionary keys collect: 					[:key |					| links newNode |					networkNodeAttributes := self nodeDictionary at: key.					newNode := networkNodeAttributes buildNetworkNode.					newNode networkGraph: networkGraph.					newNode processName: networkNodeAttributes procedureName.					newNode pos: networkNodeAttributes point.					newNode range: networkNodeAttributes range.					netNodesDico at: key put: newNode.					attributes := self nodeDictionary at: key.					links := attributes fanOutNodes.					links := links collect: 							[:aLink |							"tmp structure"							| link |							link := NetworkLink new.							link source: newNode.							link target: aLink.	"to early to allocate the node"							link].					newNode						name: key;						outputLinks: links.					newNode].	netNodesDico keysAndValuesDo: 			[:key :node |			node outputLinks do: 					[:aLink |					targetName := aLink target.					targetNode := netNodesDico at: targetName.					aLink target: targetNode]].	networkGraph nodes: nodes.	networkGraph buildInputs.	networkGraph networkName: name.	^networkGraph</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>building</category><body package="DistributedModeling" selector="buildFFTGraph">buildFFTGraph	| nodes netNodesDico targetName targetNode networkGraph |	netNodesDico := Dictionary new.	networkGraph := NetworkGraphSimplified new.	networkGraph initialConnectivity: self.	nodes := self nodeDictionary keys collect: 					[:key | 					| links newNode |					newNode := NetworkNode new.					newNode networkGraph: networkGraph.					newNode processName: (self nodeDictionary at: key) last.					netNodesDico at: key put: newNode.					links := (self nodeDictionary at: key) first collect: 									[:aLink | 									"tmp structure"									| link |									link := NetworkLink new.									link source: newNode.									link target: aLink.	"to early to allocate the node"									link].					newNode						name: key;						outputLinks: links.					newNode].	netNodesDico keysAndValuesDo: 			[:key :node | 			node outputLinks do: 					[:aLink | 					targetName := aLink target.					targetNode := netNodesDico at: targetName.					aLink target: targetNode]].	networkGraph nodes: nodes.	networkGraph buildInputs.	networkGraph networkName: name.	^networkGraph</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>testing</category><body package="DistributedModeling" selector="sampleDictionary">sampleDictionary	"self new sampleDictionary."	| netNodesDico n1 outLink1 n2 outLink2 a1 a2 |	netNodesDico := Dictionary new.	n1 := NetworkNode name: 'P1'				outputLinks: (outLink1 := Array with: NetworkLink new).	n2 := NetworkNode name: 'P2'				outputLinks: (outLink2 := Array with: NetworkLink new).	outLink1 first target: n2.	outLink2 first target: n1.	a1 := AlgoDis.NetworkNodeAttributes				nodeName: n1 name				fanOutNodes: n1 outputLinks				procedureName: 'Node'.	a2 := AlgoDis.NetworkNodeAttributes				nodeName: n2 name				fanOutNodes: n2 outputLinks				procedureName: 'Node'.	netNodesDico at: n1 name put: a1.	netNodesDico at: n2 name put: a2.	^netNodesDico</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>accessing</category><body package="DistributedModeling" selector="communications:">communications: aValue	communications := aValue</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>accessing</category><body package="DistributedModeling" selector="nodeDictionary">nodeDictionary	^nodeDictionary</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>displaying</category><body package="DistributedModeling" selector="statisticsOn:">statisticsOn: ws		| array |	ws		nextPutAll: self   name;		cr.	array := self statisticNumbers.	ws		nextPutAll: 'processus : ' , array first printString;		cr.	ws		nextPutAll: 'min fanout : ' , (array at: 3) printString;		cr.	ws		nextPutAll: 'max fanout : ' , (array at: 4) printString;		cr.	ws		nextPutAll: 'isolated   : ' , (array at: 5) printString;		cr.	ws		nextPutAll: 'channels   : ' , (array at: 2) printString;		cr</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>accessing</category><body package="DistributedModeling" selector="name:">name: aValue	name := aValue</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>building</category><body package="DistributedModeling" selector="buildHotDrawNetworkOn:">buildHotDrawNetworkOn: program 	| netEditor links source target colors sourceNode |	colors := ((ColorValue constantNames reject: [:c | c = #black])				collect: [:c | ColorValue perform: c]) readStream.	6 timesRepeat: [ colors next].	Dictionary new.	netEditor := AlgoDis.NetEdit open source.	netEditor drawing attributes lineWidth: 1.	self nodeDictionary keys collect: [:key | "add the node into the editor"		netEditor			addNode: key			forNetworkNode: (self nodeDictionary at: key)			color: colors next].	self nodeDictionary keys do: [:key | links := (self nodeDictionary at: key) first					do: 						[:aLink | 						source := key.						sourceNode := netEditor nodeNamed: key.						target := aLink.						netEditor							addEdgeFrom: source							to: target							color: sourceNode color]].	netEditor programName value:  program.	^netEditor</body></methods><methods><class-id>AlgoDis.NetworkConnectivity</class-id> <category>displaying</category><body package="DistributedModeling" selector="statisticNumbers">statisticNumbers		| max isolated min fanout sumChan keys |	keys := self nodeDictionary keys.	max := 0.	isolated := 0.	min := 100000.	sumChan := 0.	self nodeDictionary		keysAndValuesDo:			[:keyx :reachable | 			fanout := reachable fanOutNodes.			sumChan := sumChan + fanout size.			min := min min: fanout size.			max := max max: fanout size.			fanout isEmpty ifTrue: [isolated := isolated + 1]].	^(Array		with: keys size		with: sumChan		with: min) , (Array with: max with: isolated)</body></methods><methods><class-id>AlgoDis.NetworkCompiler</class-id> <category>utilities</category><body package="DistributedModeling-Compiler" selector="network">network	| nodes key processName point nb nb2 nb3 range |	network isNil ifTrue: [network := Dictionary new].	point := nil.	nb := stack removeLast.	nb isInteger		ifTrue: 			[nb2 := stack removeLast.			nb3 := stack removeLast.			nb3 isInteger				ifTrue: 					[range := nb.					point := nb3 @ nb2.					processName := stack removeLast]				ifFalse: 					[point := nb2 @ nb.					processName := nb3]]		ifFalse: [processName := nb].	nodes := stack removeLast.	key := stack removeLast.	point isNil		ifTrue: [network at: key put: (Array with: nodes with: processName)]		ifFalse: 			[range isNil				ifTrue: [network at: key put: (Array with: nodes with: point with: processName)]				ifFalse: [network at: key put: (Array with: nodes with: point with: range with: processName)]]</body></methods><methods><class-id>AlgoDis.NetworkCompiler</class-id> <category>general-parsing</category><body package="DistributedModeling-Compiler" selector="message">message=	word</body></methods><methods><class-id>AlgoDis.NetworkCompiler</class-id> <category>general-parsing</category><body package="DistributedModeling-Compiler" selector="networkNode">networkNode=	word       ${ 	(	@( word $, ) 	|  word 	) *	$}       word	(	( $( number $@ number $) ( $( number $) | ))	|	)      [self network] .</body></methods><methods><class-id>AlgoDis.NetworkCompiler</class-id> <category>utilities</category><body package="DistributedModeling-Compiler" selector="result">result	| networkConnectivity attributesDictionary nodeName attributes |	[stack isEmpty] whileFalse: [stack removeLast].	"very dirty stack management !"	networkConnectivity := NetworkConnectivity new.	networkConnectivity name: networkName.	networkConnectivity communications: messageList.	attributesDictionary := Dictionary new.	network keysAndValuesDo: 			[:key :value |			nodeName := key asString. 			value size = 4				ifTrue: 					[attributes := NetworkNodeAttributes								nodeName: nodeName								fanOutNodes: value first								procedureName: (value at: 4)								point: (value at: 2)								range: (value at: 3)].			value size = 2				ifTrue: 					[attributes := NetworkNodeAttributes								nodeName: nodeName								fanOutNodes: value first								procedureName: (value at: 2)].			attributesDictionary at: key put: attributes].	networkConnectivity nodeDictionary: attributesDictionary.	stack addLast: networkName -&gt; networkConnectivity</body></methods><methods><class-id>AlgoDis.NetworkCompiler</class-id> <category>general-parsing</category><body package="DistributedModeling-Compiler" selector="method">method= 	nom 	communications	topologie		[ self result ] .</body></methods><methods><class-id>AlgoDis.NetworkCompiler</class-id> <category>utilities</category><body package="DistributedModeling-Compiler" selector="doMessage">doMessage 	messageList := stack asOrderedCollection.	messageList removeFirst</body></methods><methods><class-id>AlgoDis.NetworkCompiler</class-id> <category>utilities</category><body package="DistributedModeling-Compiler" selector="networkName">networkName 	networkName := stack last</body></methods><methods><class-id>AlgoDis.NetworkCompiler</class-id> <category>general-parsing</category><body package="DistributedModeling-Compiler" selector="nom">nom=	word [ self networkName ] .</body></methods><methods><class-id>AlgoDis.NetworkCompiler</class-id> <category>general-parsing</category><body package="DistributedModeling-Compiler" selector="topologie">topologie=	networkNode +</body></methods><methods><class-id>AlgoDis.NetworkCompiler</class-id> <category>general-parsing</category><body package="DistributedModeling-Compiler" selector="communications">communications=#Messages | #messages(@( message $, ) | message) +$. [  self doMessage  ] .</body></methods><methods><class-id>AlgoDis.NetworkNodeAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareOn:indent:protoName:">declareOn: aStream indent: indent protoName: pName	self declareOutputChannelsOn: aStream indent: indent protoName: pName.	self declareInputChannelsOn: aStream indent: indent protoName: pName.	self declareRequestChannelsOn: aStream indent: indent protoName: pName.	self declareOutputChannelTableOn: aStream indent: indent.	self declareInputChannelTableOn: aStream indent: indent.	self declareRequestChannelTableOn: aStream indent: indent.	aStream cr</body></methods><methods><class-id>AlgoDis.NetworkNodeAsync</class-id> <category>accessing</category><body package="DistributedModeling" selector="requestLinks">requestLinks	^requestLinks</body></methods><methods><class-id>AlgoDis.NetworkNodeAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareRequestChannelsOn:indent:protoName:">declareRequestChannelsOn: aStream indent: indent protoName: pName 	self spaceOn: aStream indent: indent.	aStream nextPutAll: 'CHAN OF ' , pName; space.	self inputChannelNames do: [:linkName | aStream nextPutAll: linkName , '.req']		separatedBy: [aStream nextPutAll: ','].	aStream nextPut: $:; cr</body></methods><methods><class-id>AlgoDis.NetworkNodeAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="callPrintingProcedureOn:indent:">callPrintingProcedureOn: aStream indent: indent 	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: '--Node ' , self name , ' and its output channels'; cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: self processName, '0' , '(' , self name , '.in, ' , self name , '.req, ' , self name , '.out, stdout)'; cr.	self outputChannelNames		do: 			[:channelName | 			self spaceOn: aStream indent: indent.			aStream nextPutAll: 'graph1.queue' , '(' , channelName , '.in, ' , channelName , '.req, ' , channelName , ')'; cr]</body></methods><methods><class-id>AlgoDis.NetworkNodeAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="processChannelName">processChannelName	^self networkGraph processChannelName</body></methods><methods><class-id>AlgoDis.NetworkNodeAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareRequestChannelTableOn:indent:">declareRequestChannelTableOn: aStream indent: indent 	self spaceOn: aStream indent: indent.	aStream nextPutAll: self name , '.req IS [ '.	self inputChannelNames do: [:linkName | aStream nextPutAll: linkName, '.req']		separatedBy: [aStream nextPutAll: ','].	aStream nextPutAll: ' ]:'; cr</body></methods><methods><class-id>AlgoDis.NetworkNodeAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="callProcedureOn:indent:">callProcedureOn: aStream indent: indent 	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: '--Node ' , self name , ' and its output channels'; cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: self processName , '(' , self name , '.in, ' , self name , '.req, ' , self name , '.out)'; cr.	self outputChannelNames		do: 			[:channelName | 			self spaceOn: aStream indent: indent.			aStream nextPutAll: 'graph1.queue' , '(' , channelName , '.in, ' , channelName , '.req, ' , channelName , ')'; cr]</body></methods><methods><class-id>AlgoDis.NetworkNodeAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="oldCallProcedureOn:indent:">oldCallProcedureOn: aStream indent: indent 	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: '--Node ' , self name , ' and its output channels'; cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: self processName , '(' , self name , '.in, ' , self name , '.req, ' , self name , '.out)'; cr.	self outputChannelNames		do: 			[:channelName | 			self spaceOn: aStream indent: indent.			aStream nextPutAll: self processChannelName , '(' , channelName , '.in, ' , channelName , '.req, ' , channelName , ')'; cr]</body></methods><methods><class-id>AlgoDis.NetworkNodeAsync</class-id> <category>accessing</category><body package="DistributedModeling" selector="requestLinks:">requestLinks: aValue	requestLinks := aValue</body></methods><methods><class-id>AlgoDis.NetworkNodeAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareInputChannelsOn:indent:protoName:">declareInputChannelsOn: aStream indent: indent protoName: pName	self spaceOn: aStream indent: indent.	aStream nextPutAll: 'CHAN OF ' , pName ; space.	self outputChannelNames do: [:linkName | aStream nextPutAll: linkName, '.in']		separatedBy: [aStream nextPutAll: ','].	aStream nextPut: $:; cr</body></methods><methods><class-id>AlgoDis.NetworkNodeAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareInputChannelTableOn:indent:">declareInputChannelTableOn: aStream indent: indent 	self spaceOn: aStream indent: indent.	aStream nextPutAll: self name , '.in IS [ '.	self inputChannelNames do: [:linkName | aStream nextPutAll: linkName, '.in']		separatedBy: [aStream nextPutAll: ','].	aStream nextPutAll: ' ]:'; cr</body></methods><methods><class-id>AlgoDis.UIPickNodesRandom</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>displaying</category><body package="DistributedModeling" selector="displayOn:">displayOn: aGraphicsContext	| x y r d centre |	centre := pos pixel.	r := 50.	x := centre x rounded.	y := centre y rounded.	d := r + r.	aGraphicsContext		displayWedgeBBoxOrigin: (x - r) @ (y - r)		extent: d @ d		startAngle: 0.0		sweepAngle: 360.0</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="pos:">pos: anObject	pos := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="range">range	^range</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>exporting</category><body package="DistributedModeling" selector="asXmlElement">asXmlElement	| xaLat xaLon x1 x4 a |	xaLat := XML.Attribute name: 'lat' value: pos latitude printString.	xaLon := XML.Attribute name: 'lon' value: pos longitude printString.	a := Array new: 5.	x1 := XML.Element tag: 'sym' elements: (Array with: (XML.Text text: sym)).	x4 := XML.Element tag: 'name' elements: (Array with: (XML.Text text: name)).	a		at: 1 put: x1;		at: 2 put: cmt;		at: 3 put: time;		at: 4 put: x4;		at: 5 put: desc.	^XML.Element		tag: 'wpt'		attributes: (Array with: xaLat with: xaLon)		elements: a</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>exporting</category><body package="DistributedModeling" selector="asKmlElement">asKmlElement	| xaLat xaLon x1 x4 a |	xaLat := XML.Attribute name: 'lat' value: pos latitude printString.	xaLon := XML.Attribute name: 'lon' value: pos longitude printString.	a := Array new: 5.	x1 := XML.Element tag: 'sym' elements: (Array with: (XML.Text text: sym)).	x4 := XML.Element tag: 'name' elements: (Array with: (XML.Text text: name)).	a		at: 1 put: x1;		at: 2 put: cmt;		at: 3 put: time;		at: 4 put: x4;		at: 5 put: desc.	^XML.Element		tag: 'wpt'		attributes: (Array with: xaLat with: xaLon)		elements: a</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>initialize-release</category><body package="DistributedModeling" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	pos := 0@0.	range := 0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="time:">time: anObject	time := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="time">time	^time</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="radius">radius	^radius</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="radius:">radius: anObject	radius := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>displaying</category><body package="DistributedModeling" selector="displayOn:origin:">displayOn: aGraphicsContext origin: aPoint	| x y r d centre |	centre := pos pixel.	centre := centre - aPoint.	r := pos model value pixelRange.	x := centre x rounded.	y := centre y rounded.	d := r + r.	"aGraphicsContext		displayWedgeBBoxOrigin: (x - 2) @ (y - 2)		extent: 4 @ 4		startAngle: 0.0		sweepAngle: 360.0."	aGraphicsContext paint: ColorValue red.	aGraphicsContext displayRectangle: ((x - 2) @ (y - 2) extent: 4 @ 4).	aGraphicsContext paint: ColorValue black.	aGraphicsContext		displayArcBBoxOrigin: (x - r) @ (y - r)		extent: d @ d		startAngle: 0.0		sweepAngle: 360.0</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>printing</category><body package="DistributedModeling" selector="printOn:">printOn: aStream 	aStream nextPutAll: self name.	aStream nextPutAll: ' ( '.	self outputLinks do: [:l | aStream nextPutAll: l target name; space].	aStream nextPutAll: ' ) '.	aStream nextPutAll: self pos printString ; cr</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="sym:">sym: anObject	sym := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="range:">range: anObject	range := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>computing</category><body package="DistributedModeling" selector="dist:">dist: aNetworkNodeLocalized	^pos dist: aNetworkNodeLocalized pos</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="desc:">desc: anObject	desc := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="cmt">cmt	^cmt</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="desc">desc	^desc</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="pos">pos	^pos</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="cmt:">cmt: anObject	cmt := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="center:">center: anObject	center := anObject</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="sym">sym	^sym</body></methods><methods><class-id>AlgoDis.NetworkNodeLocalized</class-id> <category>accessing</category><body package="DistributedModeling" selector="center">center	^center</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="includesOn:indent:">includesOn: aStream indent: indent		| textLines |	self spaceOn: aStream indent: indent.	aStream		nextPutAll: '#USE "course.lib"';		cr;		cr.	self constantsOn: aStream indent: indent.	textLines := '#INCLUDE "Canal2.occ"#INCLUDE "nodes.occ"' tokensBasedOn: Character cr.	aStream cr.	textLines		do:			[:line | 			self spaceOn: aStream indent: indent.			aStream				nextPutAll: line;				cr]</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="programMain">programMain		| aStream |	aStream := String new writeStream.	self statisticsOn: aStream.	aStream cr.	self authorDefinitionOn: aStream indent: 0.	aStream cr.	self includesOn: aStream indent: 0.	aStream		cr;		nextPutAll:				'PROC ' , self networkName , '(CHAN OF BYTE stdin,stdout,stderr)';		cr;		cr.	self declareOn: aStream indent: 1.	self programAsyncBodyOn: aStream indent: 1.	aStream		nextPutAll: ':';		cr.	^aStream contents</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="authorDefinitionOn:indent:">authorDefinitionOn: aStream indent: indent 	| | 	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: '--generated  at ' , Date today printString , Time now printString; cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: '-- network with channel model'; cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: '-- Bernard Pottier'; cr.</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="protocolName">protocolName	^ 'graph1' , '.proto'</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="protocolDefinitionOn:indent:">protocolDefinitionOn: aStream indent: indent 	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: 'PROTOCOL ' , self protocolName , ' IS  BYTE:'; cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: 'PROTOCOL ' , self requestProtocolName , ' IS  BYTE:'; cr; cr.</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="oldProgramMain">oldProgramMain	| aStream |	aStream := String new writeStream.	aStream cr.	self authorDefinitionOn: aStream indent: 0.	aStream cr.	self protocolDefinitionOn: aStream indent: 0.	aStream cr.	self processQueueDefinitionOn: aStream indent: 0.	aStream cr.	self procedureDefinitionOn: aStream indent: 0.	aStream cr; nextPutAll: 'PROC ', self networkName, '()'; cr; cr.	self declareOn: aStream indent: 1.	self programBodyOn: aStream indent: 1.	aStream nextPutAll: ':'; cr.	^aStream contents</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="declareOn:indent:">declareOn: aStream indent: indent 	| sortedNodes |	sortedNodes := self nodes asSortedCollection.	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: ' -- Channel declarations '; cr.	sortedNodes		do: 			[:aNode | 			aNode				declareOutputChannelsOn: aStream				indent: indent				protoName: self protocolName.			aNode				declareInputChannelsOn: aStream				indent: indent				protoName: self protocolName.			aNode				declareRequestChannelsOn: aStream				indent: indent				protoName: self requestProtocolName].	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: '-- Channel table declaration for nodes '; cr.	sortedNodes		do: 			[:aNode | 			aNode declareOutputChannelTableOn: aStream indent: indent.			aNode declareInputChannelTableOn: aStream indent: indent.			aNode declareRequestChannelTableOn: aStream indent: indent].	aStream cr</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="constantsOn:indent:">constantsOn: aStream indent: indent		| maxFanOut line |	maxFanOut := self maxFanOut.	aStream cr.	line := 'VAL INT MaxFanOut IS ' , maxFanOut printString , ':'.	self spaceOn: aStream indent: indent.	aStream		nextPutAll: line;		cr</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="oldProcedureDefinitionOn:indent:">oldProcedureDefinitionOn: aStream indent: indent 	| procedures inputSize outputSize |	procedures := self procedureCalled.	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: '-- Procedure definitions '; cr.	procedures		keysAndValuesDo: 			[:key :dims | 			self typeChannelSize				ifTrue: 					[inputSize := dims first printString.					outputSize := dims last printString]				ifFalse: 					[inputSize := ''.					outputSize := ''].			self spaceOn: aStream indent: indent.			aStream nextPutAll: 'PROC ' , key , '( [' , inputSize , ']CHAN OF ' , self protocolName , ' in,'.			aStream nextPutAll: '[' , inputSize , ']CHAN OF ' , self requestProtocolName , ' req,'.			aStream nextPutAll: '[' , outputSize , ']CHAN OF ' , self protocolName , ' out)'.			aStream cr.			self spaceOn: aStream indent: indent + 1.			aStream nextPutAll: ' -- Code of procedure ' , key; cr.			self spaceOn: aStream indent: indent + 1.			aStream nextPutAll: 'SEQ'; cr.			self spaceOn: aStream indent: indent + 2.			aStream nextPutAll: 'WHILE TRUE'; cr.			self spaceOn: aStream indent: indent + 3.			aStream nextPutAll: '--ALT on the i/o channels and process'; cr.			self spaceOn: aStream indent: indent + 3.			aStream nextPutAll: 'SKIP'; cr.			self spaceOn: aStream indent: indent.			aStream nextPut: $:; cr]</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="processChannelName">processChannelName	^ self networkName, '.queue'</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="processQueueDefinitionOn:indent:">processQueueDefinitionOn: aStream indent: indent 	self spaceOn: aStream indent: indent.	aStream nextPutAll: '--queue process for the channels'; cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: 'PROC ' , self processChannelName , '('.	aStream nextPutAll: 'CHAN OF ' , self protocolName , ' ' , 'chanOut, '.	aStream nextPutAll: 'CHAN OF ' , self requestProtocolName , ' ' , 'chanReq, '.	aStream nextPutAll: 'CHAN OF ' , self protocolName , ' ' , 'chanIn)'; cr.	self spaceOn: aStream indent: indent + 1.	aStream nextPutAll: ' -- Code of procedure ' , self processChannelName; cr.	self spaceOn: aStream indent: indent + 1.	aStream nextPutAll: ' -- Replace by your own code' ; cr.	self spaceOn: aStream indent: indent + 1.	aStream nextPutAll: 'SEQ'; cr.	self spaceOn: aStream indent: indent + 2.	aStream nextPutAll: 'WHILE TRUE'; cr.	self spaceOn: aStream indent: indent + 3.	aStream nextPutAll: 'SKIP'; cr.	self spaceOn: aStream indent: indent.	aStream nextPut: $:; cr</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="procedureDefinitionOn:indent:">procedureDefinitionOn: aStream indent: indent 	| procedures inputSize outputSize |	procedures := self procedureCalled.	aStream cr.	self spaceOn: aStream indent: indent.	aStream nextPutAll: '-- Procedure definitions '; cr.	procedures		keysAndValuesDo: 			[:key :dims | 			self typeChannelSize				ifTrue: 					[inputSize := dims first printString.					outputSize := dims last printString]				ifFalse: 					[inputSize := ''.					outputSize := ''].			self spaceOn: aStream indent: indent.			aStream nextPutAll: 'PROC ' , key , '( [' , inputSize , ']CHAN OF ' , self protocolName , ' in,'.			aStream nextPutAll: '[' , inputSize , ']CHAN OF ' , self requestProtocolName , ' req,'.			aStream nextPutAll: '[' , outputSize , ']CHAN OF ' , self protocolName , ' out)'.			aStream cr.			self spaceOn: aStream indent: indent + 1.			aStream nextPutAll: ' -- Code of procedure ' , key; cr.			self spaceOn: aStream indent: indent + 1.			aStream nextPutAll: 'SEQ'; cr.			self spaceOn: aStream indent: indent + 2.			aStream nextPutAll: 'WHILE TRUE'; cr.			self spaceOn: aStream indent: indent + 3.			aStream nextPutAll: '--ALT on the i/o channels and process'; cr.			self spaceOn: aStream indent: indent + 3.			aStream nextPutAll: 'SKIP'; cr.			self spaceOn: aStream indent: indent.			aStream nextPut: $:; cr]</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="requestProtocolName">requestProtocolName	^ 'graph1' , '.req'</body></methods><methods><class-id>AlgoDis.NetworkGraphAsync</class-id> <category>occam-production</category><body package="DistributedModeling" selector="programAsyncBodyOn:indent:">programAsyncBodyOn: aStream indent: indent		| sortedNodes lastNodeIndex index |	sortedNodes := SortedCollection new.	sortedNodes addAll: self nodes.	aStream cr.	self spaceOn: aStream indent: indent.	aStream		nextPutAll: '-- Program Body ';		cr.	self spaceOn: aStream indent: indent.	aStream		nextPutAll: 'PAR';		cr.	lastNodeIndex := sortedNodes size.	index := 1.	sortedNodes		do:			[:aNode | 			index &lt; lastNodeIndex				ifTrue:					[aNode						callProcedureOn: aStream						indent: indent + 1]				ifFalse:					[aNode						callPrintingProcedureOn: aStream						indent: indent + 1].			index := index + 1].	self		spaceOn: aStream		indent: indent + 1.	aStream		nextPutAll: ' -- End of program body ';		cr</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="DistributedModeling" selector="toolsNetGen">toolsNetGen	"Open UINetworkGeometry."	&lt;menuItem: 'NetGen'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.9698&gt;	UINetworkGeometry open</body></methods><component-property><name>DistributedModeling</name> <type>package</type><property>namespace</property> <value>'Smalltalk.AlgoDis'</value></component-property><component-property><name>DistributedModeling</name> <type>package</type><property>parcelName</property> <value>'DistributedModeling'</value></component-property><component-property><name>DistributedModeling</name> <type>package</type><property>packageName</property> <value>'DistributedModeling'</value></component-property><component-property><name>DistributedModeling</name> <type>package</type><property>namespace</property> <value>'Smalltalk.AlgoDis'</value></component-property><pundle-loaded><name>DistributedModeling</name><type>package</type><primaryKey>38</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><component-property><name>DistributedModeling-Compiler</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#package 'DistributedModeling' '') #(#parcel 'AT Parser Compiler' ''))</value></component-property><component-property><name>DistributedModeling-Compiler</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('DistributedModeling' '') #('AT Parser Compiler' ''))</value></component-property><pundle-loaded><name>DistributedModeling-Compiler</name><type>package</type><primaryKey>8</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><component-created><name>DistributedModeling-samples</name> <type>package</type></component-created><component-created><name>DistributedModeling-Processes</name> <type>package</type></component-created><component-created><name>DistributedModeling-CellularAutomata</name> <type>package</type></component-created><component-created><name>DistributedModeling-Cuda</name> <type>package</type></component-created><component-created><name>DistributedModeling-Mobile</name> <type>package</type></component-created><component-created><name>MobileTrackInterface</name> <type>package</type></component-created><component-created><name>TimeAnalysis</name> <type>package</type></component-created><shared-variable><name>CACudaInterfaceDictionary</name><environment>Root.Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category></shared-variable><shared-variable><name>CudaInterfaceDictionary</name><environment>Root.Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category></shared-variable><shared-variable><name>SgpSdpInterfaceDictionary</name><environment>Root.Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category></shared-variable><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>longNguyen</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>longNguyen</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>GlobalMercator</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>GlobalMercator</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NetworkNodeLocalized</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NetworkNodeLocalized</staticKey> <definitionChange>added</definitionChange></component_static_change><shared-variable><name>CACudaInterfaceDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DistributedModeling-CellularAutomata</package></attributes></shared-variable><shared-variable><name>CudaInterfaceDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DistributedModeling-Cuda</package></attributes></shared-variable><shared-variable><name>ChannelDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DistributedModeling-Cuda</package></attributes></shared-variable><shared-variable><name>SgpSdpInterfaceDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>MobileTrackInterface</package></attributes></shared-variable><class><name>NetworkTopologies</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling-samples</package></attributes></class><comment><class-id>AlgoDis.NetworkTopologies</class-id><body>Description de topologies de réseau dans un langage ad-hoc,et implantation d'exemples d'utilisation dans les méthodes de classes </body></comment><class><name>SynchronousBlock</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputs outputs block barrier </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Processes</package></attributes></class><class><name>SynchronousBehaviour</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state messageIn messageOut block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Processes</package></attributes></class><class><name>SynchronousProcess</name><environment>AlgoDis</environment><super>Core.Process</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputs outputs block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Processes</package></attributes></class><class><name>SynchronousMemoryLink</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>source target </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Processes</package></attributes></class><class><name>SynchronousModel</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputs outputs states startStates alphabet messageGeneration transitionFunction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Distrib-Algos</category><attributes><package>DistributedModeling-Processes</package></attributes></class><class><name>ProcessGraphBuilder</name><environment>AlgoDis</environment><super>AlgoDis.NetworkGraph</super><private>false</private><indexed-type>none</indexed-type><inst-vars>processTable linkTable outLinksTable inLinksTable barrierTable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Processes</package></attributes></class><class><name>UIMCell</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mcellText mcellView filename step running started scaleField cudaInterface startSema startedProcess speedField process1 process2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>DistributedModeling-CellularAutomata</package></attributes></class><comment><class-id>UIMCell</class-id><body>Interface permettant d'ouvrir un fichier mcl ou lif et d'afficher une image. Puis ensuite de l'exécuter pas à pas ou en continue sur cuda.Instance Variables	cudaInterface	&lt;CudaInterface&gt;	description of cudaInterface	filename	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of filename	mcellText	&lt;ValueModel&gt;	description of mcellText	mcellView	&lt;DependentComposite | DependentPart | Figure | LDMBroomConnection&gt;	description of mcellView	process	&lt;Animation | Context | DebuggerIcons | DebuggerService | Delay | NonBlockingPipeInterface | Process | ProcessHandle | WindowManager&gt;	description of process	running	&lt;Boolean&gt;	description of running	scaleField	&lt;ValueModel&gt;	description of scaleField	started	&lt;Boolean&gt;	description of started	startedProcess	&lt;Animation | Context | DebuggerIcons | DebuggerService | Delay | NonBlockingPipeInterface | Process | ProcessHandle | WindowManager&gt;	description of startedProcess	startSema	&lt;Delay | Semaphore&gt;	description of startSema	step	&lt;Integer&gt;	description of step</body></comment><class><name>MCellView</name><environment>Smalltalk</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-CellularAutomata</package></attributes></class><comment><class-id>MCellView</class-id><body>Vue de Mcell</body></comment><class><name>ConnectivityModel</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>grid board connectivity maxFanOut </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-CellularAutomata</package></attributes></class><comment><class-id>ConnectivityModel</class-id><body>Permet de définir une connectivitée et de créer un réseau d'automate cellulaire associé à cette connectivitéeInstance Variables	board	&lt;BG_ChartGrid | Point | Vector2&gt;	description of board	connectivity	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of connectivity	grid	&lt;Object&gt;	description of grid	maxFanOut	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of maxFanOut</body></comment><class><name>Mcell</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mFiletype mVersion mGame mRules mSpeed mBoard mCcolors mColoring mWrap mPalette mLines mDiv mIndex mLine mImage mBorn mSurvive curBlock grid mScale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-CellularAutomata</package></attributes></class><comment><class-id>AlgoDis.Mcell</class-id><body>Mcell est une classe permettant de parser un fichier mcl ou lif et de creer des données exploitable par smalltalkInstance Variables	curBlock	&lt;LifeBlock&gt;	description of curBlock	grid	&lt;(Array of: Object)&gt;	description of grid	mBoard	&lt;BG_ChartGrid | Point | Vector2&gt;	description of mBoard	mBorn	&lt;Object&gt;	description of mBorn	mCcolors	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of mCcolors	mColoring	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of mColoring	mDiv	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of mDiv	mFiletype	&lt;AbstractProxy | MessageArchiver | Object | ObjectiveCObject | WeakProxy&gt;	description of mFiletype	mGame	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of mGame	mImage	&lt;Image&gt;	description of mImage	mIndex	&lt;ArithmeticValue&gt;	description of mIndex	mLine	&lt;ArithmeticValue&gt;	description of mLine	mLines	&lt;(Collection of: LifeBlock)&gt;	description of mLines	mPalette	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of mPalette	mRules	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of mRules	mSpeed	&lt;AbstractProxy | MessageArchiver | Object | ObjectiveCObject | WeakProxy&gt;	description of mSpeed	mSurvive	&lt;Object&gt;	description of mSurvive	mVersion	&lt;AbstractProxy | MessageArchiver | Object | ObjectiveCObject | WeakProxy&gt;	description of mVersion	mWrap	&lt;AbstractProxy | MessageArchiver | Object | ObjectiveCObject | WeakProxy&gt;	description of mWrap</body></comment><shared-variable><name>CACudaInterfaceDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DistributedModeling-CellularAutomata</package></attributes></shared-variable><class><name>CACudaInterface</name><environment>Smalltalk</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private CACudaInterfaceDictionary.*			</imports><category>ExternalInterface-New</category><attributes><includeFiles><item>Mcell.h</item></includeFiles><includeDirectories><item>./Library</item></includeDirectories><libraryFiles><item>Mcell.so</item></libraryFiles><libraryDirectories><item>./Library</item></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DistributedModeling-CellularAutomata</package></attributes></class><comment><class-id>CACudaInterface</class-id><body>Classe pour l'utilisation de la librairie cuda.Attention: Les noms doivent des fonctions doivent correspondent aux symboles crées par nvcc (exemple : _Z6doStepv pour doStep)</body></comment><class><name>MCellController</name><environment>Smalltalk</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-CellularAutomata</package></attributes></class><comment><class-id>MCellController</class-id><body>Controlleur de Mcell</body></comment><class><name>LifeBlock</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>start taille data </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-CellularAutomata</package></attributes></class><comment><class-id>AlgoDis.LifeBlock</class-id><body>Classe contenant lisant un bloc dans un fichier .lif.Instance Variables	data	&lt;Collection&gt;	données du bloc	start	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	Coordonnée du début du bloc	taille	&lt;BG_ChartGrid | Point | Vector2&gt;	Taille du bloc en x et y</body></comment><class><name>CudaProcessModel</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>index initProcedure stepProcedure processName chanInMap chanOutMap pos range </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Cuda</package></attributes></class><comment><class-id>AlgoDis.CudaProcessModel</class-id><body>ProcessModel pour Cuda</body></comment><class><name>UIExecManager</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cellContents tableInterface sightingsTable nodeStateModel sensorId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Cuda</package></attributes></class><class><name>NodeState</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>initial current leader diameter zone closer distToPoint range pos enabled startLead netNodes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Cuda</package></attributes></class><comment><class-id>NodeState</class-id><body>Contient l'état des variables d'un noeudInstance Variables	closer	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of closer	current	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of current	diameter	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of diameter	distToPoint	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of distToPoint	initial	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of initial	leader	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of leader	zone	&lt;Object | ObjectiveCObject | ProtoObject | WeakProxy&gt;	description of zone</body></comment><class><name>Mapped</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>node canal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Cuda</package></attributes></class><class><name>Channel</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nbOut nbIn nbDyn write read writeDyn readDyn </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Cuda</package></attributes></class><class><name>CudaBuilder</name><environment>AlgoDis</environment><super>AlgoDis.NetworkGraph</super><private>false</private><indexed-type>none</indexed-type><inst-vars>processTable maxFanOut dynamicChan maxMobile </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Cuda</package></attributes></class><comment><class-id>AlgoDis.CudaBuilder</class-id><body>Génèrateur de code cuda</body></comment><class><name>CudaDebugger</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tableInterface sightingsTable cu getN doStepField getDiameterField doStepLeader doStepDiameter doStepDiameterField doStepLeaderField getSensorsNbField doStartZoneFromField mobilePosition mobile nodes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Cuda</package></attributes></class><shared-variable><name>CudaInterfaceDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DistributedModeling-Cuda</package></attributes></shared-variable><class><name>CudaInterface</name><environment>Smalltalk</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isInit nbNodes nbSensors diameterMax curLoop </inst-vars><class-inst-vars></class-inst-vars><imports>			private CudaInterfaceDictionary.*			</imports><category>ExternalInterface-New</category><attributes><includeFiles><item>NetGen.h</item></includeFiles><includeDirectories><item>./CudaInterface</item></includeDirectories><libraryFiles><item>NetGen.so</item></libraryFiles><libraryDirectories><item>./CudaInterface</item></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DistributedModeling-Cuda</package></attributes></class><comment><class-id>CudaInterface</class-id><body>Cuda librairie for NetGen</body></comment><class><name>NetworkEvent</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mobile sensor position time timeReference nodeId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>AlgoDis</category><attributes><package>DistributedModeling-Mobile</package></attributes></class><comment><class-id>AlgoDis.NetworkEvent</class-id><body>This class is an interface for all network events modelised in mobility (Link creation event and Link destruction event). It provides generic methods such as the calculation of an event's position depending on mobile's position and movement vector as well as the time when this event takes place".Instance Variables	mobile	&lt;Mobile&gt;	Mobile involved in this event.	sensor	&lt;Point&gt;		Sedentary sensor the mobile meet in this event.	timeReference	&lt;Number&gt;	Time of reference when calculating the time of occurence of this event. This is the time when the mobile is in its position before it begins to cover its straight way.</body></comment><class><name>MobilePath</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>steps mobile events duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><comment><class-id>AlgoDis.MobilePath</class-id><body>MobilePath represents the path a mobile can take. It is created with as an ordered collection of points which first element is the start point and the last element is the last point. A Mobile path can provide a collection of StraightWays which make easy to catch all network events while the mobile is moving alog this path.Instance Variables	steps	&lt;Array of Point&gt;	all points the mobile has to meet	mobile	&lt;Mobile&gt;	mobile which has to move along this path</body></comment><class><name>Mobile</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>range trajectory color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><comment><class-id>AlgoDis.Mobile</class-id><body>"A mobile is probably with sensors, one of the core elements of the mobility model. Everything depends on bothmobile and sensors. The class ``Mobile'' provides a set of information about its location, movement and rangefrom which it is possible to make calculation. This class provides also calculation methods useful to thecalculation process of network events.The mobile class is mostly qualified by its instance variable trajectory. This variable, an instance ofthe class Trajectory handles both a location and a movement vector."Instance Variables	color		&lt;Symbol&gt;	Color to be used when drawing this mobile	range		&lt;Number&gt;	Distance below which the mobile is able to communicate	trajectory	&lt;Trajectory&gt;	Position, direction and speed of this mobile</body></comment><class><name>ExplorationStrategy</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mobilePath </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><comment><class-id>AlgoDis.ExplorationStrategy</class-id><body>ExplorationStrategy class provides an interface to manipulate all exploration strategies available for a mobile.</body></comment><class><name>UIPickNodesMobile</name><environment>AlgoDis</environment><super>AlgoDis.UIPickNodes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>destination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>DistributedModeling-Mobile</package></attributes></class><class><name>PickMobileView</name><environment>AlgoDis</environment><super>AlgoDis.PickView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><class><name>PickMobileModel</name><environment>AlgoDis</environment><super>AlgoDis.PickModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>steps clickForNetwork </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><class><name>PickMobileController</name><environment>AlgoDis</environment><super>AlgoDis.PickController</super><private>false</private><indexed-type>none</indexed-type><inst-vars>points position steps pointDestination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><class><name>Trajectory</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position movement color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><comment><class-id>AlgoDis.Trajectory</class-id><body>Trajectory class is almost as important as Mobile class since a trajectory instance is almost enough to qualify amobile instance. Trajectory provides a location and a movement vector thanks to two instances of Point. The firstone gives its location and the second one provides both its direction and sens (theta) and speed (r).Instance Variables	position		&lt;Point&gt;		Start point of this trajectory.	movement	&lt;Point&gt;		Movement vector of this point.	color		&lt;Symbol&gt;	Color of this trajectory when drawn</body></comment><class><name>StraightWay</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mobile duration startTime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><comment><class-id>AlgoDis.StraightWay</class-id><body>I am a short distance taken by a mobile, defined either by a lenght or a durationInstance Variables	mobile	&lt;Mobile&gt;	The mobile moving in this way</body></comment><class><name>Arrow</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><comment><class-id>AlgoDis.Arrow</class-id><body>When instanciated, this class returns a polyLine which draws an arrow from a point to another.</body></comment><class><name>GPredictTraceReader</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>file fieldDictionary pathLonLat mercator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MobileTrackInterface</package></attributes></class><class><name>GpredictReader</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mobileInterface field3 field2 field4 field1 field5 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MobileTrackInterface</package></attributes></class><class><name>GpredictInterface</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>programName mercator fieldDictionary model activated zoom meter pixel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MobileTrackInterface</package></attributes></class><shared-variable><name>SgpSdpInterfaceDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>MobileTrackInterface</package></attributes></shared-variable><class><name>SgpSdpInterface</name><environment>Smalltalk</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>satellite </inst-vars><class-inst-vars></class-inst-vars><imports>			private SgpSdpInterfaceDictionary.*			</imports><category>ExternalInterface-New</category><attributes><includeFiles><item>sgp4sdp4.st.h</item></includeFiles><includeDirectories><item>Source/sgpsdp</item></includeDirectories><libraryFiles><item>libsgp4sdp4.so</item></libraryFiles><libraryDirectories><item>Library</item></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>MobileTrackInterface</package></attributes></class><class><name>TimedEvent</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>timestamp event </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TimeAnalysis</package></attributes></class><comment><class-id>TimedEvent</class-id><body>TimedEvent has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables	event	&lt;Object&gt;	something related to a problem domain	timestamp	&lt;Timestamp&gt;	a timestamp</body></comment><class><name>UITimedEventTable</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>timedEventTable theTimeView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TimeAnalysis</package></attributes></class><class><name>TimedEventTable</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>eventTable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TimeAnalysis</package></attributes></class><class><name>TimeView</name><environment>Smalltalk</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TimeAnalysis</package></attributes></class><class><name>LinkCreation</name><environment>AlgoDis</environment><super>AlgoDis.NetworkEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><comment><class-id>AlgoDis.LinkCreation</class-id><body>LinkCreation class is a network event where a new link between a mobile and a link is created. If instanciated with a mobile and a sensor which cannot meet each other, it returns nil.</body></comment><class><name>LinkDestruction</name><environment>AlgoDis</environment><super>AlgoDis.NetworkEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><comment><class-id>AlgoDis.LinkDestruction</class-id><body>LinkCreation class is a network event where a new link between a mobile and a link is created. If instanciated with a mobile and a sensor which cannot meet each other, it returns nil.</body></comment><class><name>RandomWalk</name><environment>AlgoDis</environment><super>AlgoDis.ExplorationStrategy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mobile sensors width height </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><comment><class-id>AlgoDis.RandomWalk</class-id><body>The most basic exploration strategy. A random walk strategy makes the mobile to move throught a random number of straight lines, which length and orientation are also random.Instance Variables	height		&lt;Number&gt;	Height of the surface to explore.	width		&lt;Number&gt;	Width of the surface to explore.	mobile		&lt;Mobile&gt;	Mobile to pilot using this exploration strategy.	sensors		&lt;Array of points&gt;	Sensors which can be met while covering the path generated by this strategy. Here sensors are usefull to detect and draw networks events and not generate the walking strategy.</body></comment><class><name>UIPickNodesMobileFromGPS</name><environment>AlgoDis</environment><super>AlgoDis.UIPickNodesMobile</super><private>false</private><indexed-type>none</indexed-type><inst-vars>geoReferencer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><class><name>SystematicWalk</name><environment>AlgoDis</environment><super>AlgoDis.ExplorationStrategy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mobile sensors width height </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DistributedModeling-Mobile</package></attributes></class><comment><class-id>AlgoDis.SystematicWalk</class-id><body>The reference exploration strategy. Systematic walk strategy garantees the mobile to cover the whole area and meet every sensors in it.Instance Variables	height		&lt;Number&gt;	Height of the surface to explore.	width		&lt;Number&gt;	Width of the surface to explore.	mobile		&lt;Mobile&gt;	Mobile to pilot using this exploration strategy.	sensors		&lt;Array of points&gt;	Sensors which can be met while covering the path generated by this strategy. Here sensors are usefull to detect and draw networks events and not generate the walking strategy.</body></comment><shared-variable><name>Ideas</name><environment>AlgoDis.SynchronousBehaviour</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DistributedModeling-Processes</package></attributes></shared-variable><methods><class-id>CACudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-CellularAutomata" selector="readFromSt80:with:with:with:">readFromSt80: a with: pData with: rules_a with: rules_b	&lt;C: void _Z12readFromSt80P11s_nodeStateP5pdataPiS3_(nodeState * a, pdata * pData, int * rules_a, int * rules_b)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CACudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-CellularAutomata" selector="cleanUp">cleanUp	&lt;C: void _Z7cleanUpv(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CACudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-CellularAutomata" selector="doStep">doStep	&lt;C: void _Z6doStepv(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CACudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-CellularAutomata" selector="writeToSt80:">writeToSt80: a	&lt;C: void _Z11writeToSt80P11s_nodeState(nodeState * a)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__FILE__</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__FILE__</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>defines</category><body package="DistributedModeling-Cuda" selector="__FILE__">__FILE__	&lt;C: #define __FILE__ CudaInterface/NetGen.h	&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="getLoop1">getLoop1	&lt;C: int _Z7getLoopv(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="getNode:with:">getNode: a with: ind	&lt;C: void getNode(mNodeState * a, int ind)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="setNodes1:">setNodes1: a	&lt;C: void _Z8setNodesP10mNodeState(mNodeState * a)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_DIAMETER</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_DIAMETER</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>defines</category><body package="DistributedModeling-Cuda" selector="MSG_DIAMETER">MSG_DIAMETER	&lt;C: #define MSG_DIAMETER 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_ASK_INFO</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_ASK_INFO</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>defines</category><body package="DistributedModeling-Cuda" selector="MSG_ASK_INFO">MSG_ASK_INFO	&lt;C: #define MSG_ASK_INFO 6	&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="getNodes:">getNodes: a	&lt;C: void getNodes(mNodeState * a)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="connectTo:with:">connectTo: idm with: idf	&lt;C: int connectTo(int idm, int idf)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="init">init	&lt;C: void init(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>DYNAMIC_CHAN</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>DYNAMIC_CHAN</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>defines</category><body package="DistributedModeling-Cuda" selector="MAX_FANOUT">MAX_FANOUT	&lt;C: #define DYNAMIC_CHAN 5	&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="getDiameter1">getDiameter1	&lt;C: int _Z11getDiameterv(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="setNode1:with:">setNode1: a with: ind	&lt;C: void _Z7setNodeP10mNodeStatei(mNodeState * a, int ind)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__LINE__</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__LINE__</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>defines</category><body package="DistributedModeling-Cuda" selector="__LINE__">__LINE__	&lt;C: #define __LINE__ 0	&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="getOneChannel:whichOne:">getOneChannel: c whichOne: whichOne	&lt;C: void getOneChannel (canaux * c, int whichOne)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_ZONE</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_ZONE</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>defines</category><body package="DistributedModeling-Cuda" selector="MSG_ZONE">MSG_ZONE	&lt;C: #define MSG_ZONE 4	&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="getSensorsNb">getSensorsNb	&lt;C: int getSensorsNb(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="getSensorsNb1">getSensorsNb1	&lt;C: int _Z12getSensorsNbv(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="connectTo1:with:">connectTo1: idm with: idf	&lt;C: int _Z9connectToii(int idm, int idf)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="doStep1:">doStep1: steps	&lt;C: void _Z6doStepi(int steps)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_CLOSER</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_CLOSER</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>defines</category><body package="DistributedModeling-Cuda" selector="MSG_CLOSER">MSG_CLOSER	&lt;C: #define MSG_CLOSER 5	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_NULL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_NULL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>defines</category><body package="DistributedModeling-Cuda" selector="MSG_NULL">MSG_NULL	&lt;C: #define MSG_NULL 0	&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="doStep:">doStep: steps	&lt;C: void doStep(int steps)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="startFunction:with:">startFunction: node with: msg	&lt;C: void startFunction(int node, int msg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="cleanUp1">cleanUp1	&lt;C: void _Z7cleanUpv(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="getStatus">getStatus	&lt;C: void getStatus(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>defines</category><body package="DistributedModeling-Cuda" selector="DYNAMIC_CHAN">DYNAMIC_CHAN	&lt;C: #define DYNAMIC_CHAN 5	&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="getNodes1:">getNodes1: a	&lt;C: void _Z8getNodesP10mNodeState(mNodeState * a)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="disconnectTo1:with:">disconnectTo1: idm with: idf	&lt;C: int _Z12disconnectToii(int idm, int idf)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="setNodes:">setNodes: a	&lt;C: void setNodes(mNodeState * a)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="init1">init1	&lt;C: void _Z4initv(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="disconnectTo:with:">disconnectTo: idm with: idf	&lt;C: int disconnectTo(int idm, int idf)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="getN1">getN1	&lt;C: int _Z4getNv(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_DIAMETERMAX</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_DIAMETERMAX</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>defines</category><body package="DistributedModeling-Cuda" selector="MSG_DIAMETERMAX">MSG_DIAMETERMAX	&lt;C: #define MSG_DIAMETERMAX 2	&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="setNode:with:">setNode: a with: ind	&lt;C: void setNode(mNodeState * a, int ind)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="getLoop">getLoop	&lt;C: int getLoop(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="getNode1:with:">getNode1: a with: ind	&lt;C: void _Z7getNodeP10mNodeStatei(mNodeState * a, int ind)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_LEADER</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MSG_LEADER</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>defines</category><body package="DistributedModeling-Cuda" selector="MSG_LEADER">MSG_LEADER	&lt;C: #define MSG_LEADER 3	&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="getN">getN	&lt;C: int getN(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="cleanUp">cleanUp	&lt;C: void cleanUp(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="getDiameter">getDiameter	&lt;C: int getDiameter(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="getStatus1">getStatus1	&lt;C: void _Z9getStatusv(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>deprecated procedures</category><body package="DistributedModeling-Cuda" selector="startFunction1:with:">startFunction1: node with: msg	&lt;C: void _Z13startFunctionii(int node, int msg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>CudaInterface</class-id> <category>procedures</category><body package="DistributedModeling-Cuda" selector="getAllChannels:">getAllChannels: c	&lt;C: void getAllChannels (canaux * c)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="predict_calc_simple:with:">predict_calc_simple: sat with: t	&lt;C: void predict_calc_simple(sat_t * sat, double t)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Good_Elements:">Good_Elements: tle_set	&lt;C: int Good_Elements(char * tle_set)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Deep:with:">Deep: ientry with: sat	&lt;C: void Deep(int ientry, sat_t * sat)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Angle:with:">Angle: v1 with: v2	&lt;C: double Angle(vector_t * v1, vector_t * v2)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Fraction_of_Day:with:with:">Fraction_of_Day: hr with: mi with: se	&lt;C: double Fraction_of_Day(int hr, int mi, int se)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Julian_Date_of_Year:">Julian_Date_of_Year: year	&lt;C: double Julian_Date_of_Year(double year)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Calculate_Obs:with:with:with:with:">Calculate_Obs: _time with: pos with: vel with: geodetic with: obs_set	&lt;C: void Calculate_Obs(double _time, vector_t * pos, vector_t * vel, geodetic_t * geodetic, obs_set_t * obs_set)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Convert_Sat_State:with:">Convert_Sat_State: pos with: vel	&lt;C: void Convert_Sat_State(vector_t * pos, vector_t * vel)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="isFlagClear:">isFlagClear: flag	&lt;C: int isFlagClear(int flag)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Time_of_Day:with:">Time_of_Day: jd with: cdate	&lt;C: void Time_of_Day(double jd, struct tm * cdate)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="SetFlag:">SetFlag: flag	&lt;C: void SetFlag(int flag)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Magnitude:">Magnitude: v	&lt;C: void Magnitude(vector_t * v)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Vec_Sub:with:with:">Vec_Sub: v1 with: v2 with: v3	&lt;C: void Vec_Sub(vector_t * v1, vector_t * v2, vector_t * v3)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Degrees:">Degrees: arg	&lt;C: double Degrees(double arg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="jdFromYMDHMS:with:with:with:with:with:">jdFromYMDHMS: y with: m with: d with: h with: min with: s	&lt;C: double jdFromYMDHMS(int y, int m, int d, int h, int min, int s)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Cross:with:with:">Cross: v1 with: v2 with: v3	&lt;C: void Cross(vector_t * v1, vector_t * v2, vector_t * v3)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Time_from_UTC:">Time_from_UTC: cdate	&lt;C: struct tm Time_from_UTC(struct tm * cdate)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Time_to_UTC:">Time_to_UTC: cdate	&lt;C: struct tm Time_to_UTC(struct tm * cdate)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Normalize:">Normalize: v	&lt;C: void Normalize(vector_t * v)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="isFlagSet:">isFlagSet: flag	&lt;C: int isFlagSet(int flag)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="AcTan:with:">AcTan: sinx with: cosx	&lt;C: double AcTan(double sinx, double cosx)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="jdFromEpoch:">jdFromEpoch: t	&lt;C: double jdFromEpoch(double t)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="UTC_Calendar_Now:">UTC_Calendar_Now: cdate	&lt;C: void UTC_Calendar_Now(struct tm * cdate)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Julian_Date_of_Epoch:">Julian_Date_of_Epoch: epoch	&lt;C: double Julian_Date_of_Epoch(double epoch)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Modulus:with:">Modulus: arg1 with: arg2	&lt;C: double Modulus(double arg1, double arg2)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="JD_to_UTC:">JD_to_UTC: jt	&lt;C: double JD_to_UTC(double jt)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Calendar_Date:with:">Calendar_Date: jd with: cdate	&lt;C: void Calendar_Date(double jd, struct tm * cdate)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>DEEP_SPACE_EPHEM_FLAG</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>DEEP_SPACE_EPHEM_FLAG</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>defines</category><body package="MobileTrackInterface" selector="DEEP_SPACE_EPHEM_FLAG">DEEP_SPACE_EPHEM_FLAG	&lt;C: #define DEEP_SPACE_EPHEM_FLAG 0x000040	&gt;</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Scalar_Multiply:with:with:">Scalar_Multiply: k with: v1 with: v2	&lt;C: void Scalar_Multiply(double k, vector_t * v1, vector_t * v2)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="ThetaG:with:">ThetaG: epoch with: deep_arg	&lt;C: double ThetaG(double epoch, deep_arg_t * deep_arg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Radians:">Radians: arg	&lt;C: double Radians(double arg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="init_sat_data:with:">init_sat_data: sat with: _tle_str	&lt;C: void init_sat_data(sat_t * sat, char _tle_str[3][80])&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="FMod2p:">FMod2p: x	&lt;C: double FMod2p(double x)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="SGP4:with:">SGP4: sat with: tsince	&lt;C: void SGP4(sat_t * sat, double tsince)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Frac:">Frac: arg	&lt;C: double Frac(double arg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Sqr:">Sqr: arg	&lt;C: double Sqr(double arg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Sign:">Sign: arg	&lt;C: int Sign(double arg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Check_Date:">Check_Date: cdate	&lt;C: int Check_Date(struct tm * cdate)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Dot:with:">Dot: v1 with: v2	&lt;C: double Dot(vector_t * v1, vector_t * v2)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="SDP4:with:">SDP4: sat with: tsince	&lt;C: void SDP4(sat_t * sat, double tsince)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="init_tle_str:with:with:with:">init_tle_str: _tle_str with: str0 with: str1 with: str2	&lt;C: void init_tle_str(char _tle_str[3][80], char * str0, char * str1, char * str2)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="ArcCos:">ArcCos: arg	&lt;C: double ArcCos(double arg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Scale_Vector:with:">Scale_Vector: k with: v	&lt;C: void Scale_Vector(double k, vector_t * v)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Epoch_Time:">Epoch_Time: jd	&lt;C: double Epoch_Time(double jd)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Julian_Date:">Julian_Date: cdate	&lt;C: double Julian_Date(struct tm * cdate)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Calculate_User_PosVel:with:with:with:">Calculate_User_PosVel: _time with: geodetic with: obs_pos with: obs_vel	&lt;C: void Calculate_User_PosVel(double _time, geodetic_t * geodetic, vector_t * obs_pos, vector_t * obs_vel)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="DOY:with:with:">DOY: yr with: mo with: dy	&lt;C: int DOY(int yr, int mo, int dy)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Sat_Eclipsed:with:with:">Sat_Eclipsed: pos with: sol with: depth	&lt;C: int Sat_Eclipsed(vector_t * pos, vector_t * sol, double * depth)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Checksum_Good:">Checksum_Good: tle_set	&lt;C: int Checksum_Good(char * tle_set)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Cube:">Cube: arg	&lt;C: double Cube(double arg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Delta_ET:">Delta_ET: year	&lt;C: double Delta_ET(double year)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Calculate_RADec_and_Obs:with:with:with:with:">Calculate_RADec_and_Obs: _time with: pos with: vel with: geodetic with: obs_set	&lt;C: void Calculate_RADec_and_Obs(double _time, vector_t * pos, vector_t * vel, geodetic_t * geodetic, obs_astro_t * obs_set)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Vec_Add:with:with:">Vec_Add: v1 with: v2 with: v3	&lt;C: void Vec_Add(vector_t * v1, vector_t * v2, vector_t * v3)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Get_Next_Tle_Set:with:">Get_Next_Tle_Set: lines with: tle	&lt;C: int Get_Next_Tle_Set(char lines[3][80], tle_t * tle)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Round:">Round: arg	&lt;C: int Round(double arg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Int:">Int: arg	&lt;C: double Int(double arg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="ThetaG_JD:">ThetaG_JD: jd	&lt;C: double ThetaG_JD(double jd)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="ClearFlag:">ClearFlag: flag	&lt;C: void ClearFlag(int flag)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Convert_Satellite_Data:with:">Convert_Satellite_Data: tle_set with: tle	&lt;C: void Convert_Satellite_Data(char * tle_set, tle_t * tle)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="ArcSin:">ArcSin: arg	&lt;C: double ArcSin(double arg)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="select_ephemeris:">select_ephemeris: sat	&lt;C: void select_ephemeris(sat_t * sat)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="JD_from_UTC:">JD_from_UTC: jt	&lt;C: double JD_from_UTC(double jt)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Calculate_Solar_Position:with:">Calculate_Solar_Position: _time with: solar_vector	&lt;C: void Calculate_Solar_Position(double _time, vector_t * solar_vector)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Calculate_LatLonAlt:with:with:">Calculate_LatLonAlt: _time with: pos with: geodetic	&lt;C: void Calculate_LatLonAlt(double _time, vector_t * pos, geodetic_t * geodetic)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="Date_Time:with:">Date_Time: jd with: cdate	&lt;C: void Date_Time(double jd, struct tm * cdate)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>procedures</category><body package="MobileTrackInterface" selector="jdToTimestamp:">jdToTimestamp: julian_date	&lt;C: double jdToTimestamp(double julian_date)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>pdata</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>pdata</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CACudaInterface</class-id> <category>types</category><body package="DistributedModeling-CellularAutomata" selector="pdata">pdata	&lt;C: typedef struct {			int N, boardX, boardY, rulesAlive, rulesBorn;		} pdata&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>s_nodeState</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>s_nodeState</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CACudaInterface</class-id> <category>structs</category><body package="DistributedModeling-CellularAutomata" selector="s_nodeState">s_nodeState	&lt;C: struct s_nodeState {			short current;		}&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>nodeState</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>nodeState</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CACudaInterface</class-id> <category>types</category><body package="DistributedModeling-CellularAutomata" selector="nodeState">nodeState	&lt;C: typedef struct s_nodeState nodeState&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>s_canaux_new</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>s_canaux_new</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>structs</category><body package="DistributedModeling-Cuda" selector="s_canaux">s_canaux	&lt;C: struct s_canaux_new	{		int nbOut;		int nbIn;		int nbDyn;		mapped  * write;		mapped  * read;		mapped  * writeDyn;		mapped  * readDyn;	}&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>structs</category><body package="DistributedModeling-Cuda" selector="s_nodeState">s_nodeState	&lt;C: struct s_nodeState {			int enabled, initial, current;			char leader;			int startLead;			int leaders[100];			int netNodes, diameter, diameter_max;			int pos[2];			int range;			int zone[4];			int seed, start, starter, closer, distToPoint;		}&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>canaux</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>canaux</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>types</category><body package="DistributedModeling-Cuda" selector="canaux">canaux	&lt;C: typedef struct s_canaux canaux&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>mNodeState</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>mNodeState</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>types</category><body package="DistributedModeling-Cuda" selector="mNodeState">mNodeState	&lt;C: typedef struct {			int enabled, initial, current;			char leader;			int startLead, diameter, netNodes;			int pos[2];			int range;			int zone[4];			int closer, distToPoint;		} mNodeState&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>message</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>message</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>types</category><body package="DistributedModeling-Cuda" selector="message">message	&lt;C: typedef struct {			int type, start;			msg_data data;		} message&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>id</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>id</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>types</category><body package="DistributedModeling-Cuda" selector="id">id	&lt;C: typedef int id&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>mapped</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>mapped</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>types</category><body package="DistributedModeling-Cuda" selector="mapped">mapped	&lt;C: typedef struct s_mapped mapped&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>msg_data</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>msg_data</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>types</category><body package="DistributedModeling-Cuda" selector="msg_data">msg_data	&lt;C: typedef union {			int val;			mesg_buff buff[10];			int zone[4];			s_closer closer;		} msg_data&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>canaux_new</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>canaux_new</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>types</category><body package="DistributedModeling-Cuda" selector="canaux_new">canaux_new	&lt;C: typedef struct s_canaux_new canaux_new&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>route_tab</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>route_tab</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>types</category><body package="DistributedModeling-Cuda" selector="route_tab">route_tab	&lt;C: typedef struct {			int dist;			char sent;		} route_tab&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>s_closer</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>s_closer</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>types</category><body package="DistributedModeling-Cuda" selector="s_closer">s_closer	&lt;C: typedef struct {			int closer, dist;			int point[2];		} s_closer&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>s_mapped</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>s_mapped</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>structs</category><body package="DistributedModeling-Cuda" selector="s_mapped">s_mapped	&lt;C: struct s_mapped{	int node;	int canal;}&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>mesg_buff</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>mesg_buff</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CudaInterface</class-id> <category>types</category><body package="DistributedModeling-Cuda" selector="mesg_buff">mesg_buff	&lt;C: typedef struct {			int node, dist;		} mesg_buff&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>structs</category><body package="DistributedModeling-Cuda" selector="s_canaux_new">s_canaux_new	&lt;C: struct s_canaux_new	{		int nbOut;		int nbIn;		int nbDyn;		mapped  * write;		mapped  * read;		mapped  * writeDyn;		mapped  * readDyn;	}&gt;</body></methods><methods><class-id>CudaInterface</class-id> <category>types</category><body package="DistributedModeling-Cuda" selector="nodeState">nodeState	&lt;C: typedef struct s_nodeState nodeState&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>obs_set_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>obs_set_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="obs_set_t">obs_set_t	&lt;C: typedef struct {			double az, el, range, range_rate;		} obs_set_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>orbit_type_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>orbit_type_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="orbit_type_t">orbit_type_t	&lt;C: typedef enum {			ORBIT_TYPE_UNKNOWN, 			ORBIT_TYPE_LEO, 			ORBIT_TYPE_ICO, 			ORBIT_TYPE_GEO, 			ORBIT_TYPE_GSO, 			ORBIT_TYPE_MOLNIYA, 			ORBIT_TYPE_TUNDRA, 			ORBIT_TYPE_POLAR, 			ORBIT_TYPE_SUNSYNC, 			ORBIT_TYPE_DECAYED		} orbit_type_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>deep_arg_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>deep_arg_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="deep_arg_t">deep_arg_t	&lt;C: typedef struct {			double eosq, sinio, cosio, betao, aodp, theta2, sing, cosg, betao2, xmdot, omgdot, xnodot, xnodp, xll, omgadf, xnode, em, xinc, xn, t, ds50;		} deep_arg_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>op_stat_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>op_stat_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="op_stat_t">op_stat_t	&lt;C: typedef enum {			OP_STAT_UNKNOWN, 			OP_STAT_OPERATIONAL, 			OP_STAT_NONOP, 			OP_STAT_PARTIAL, 			OP_STAT_STDBY, 			OP_STAT_SPARE, 			OP_STAT_EXTENDED		} op_stat_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>obs_astro_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>obs_astro_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="obs_astro_t">obs_astro_t	&lt;C: typedef struct {			double ra, dec;		} obs_astro_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tle_str</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tle_str</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="tle_str">tle_str	&lt;C: typedef char tle_str[3][80]&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>deep_static_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>deep_static_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="deep_static_t">deep_static_t	&lt;C: typedef struct {			double thgr, xnq, xqncl, omegaq, zmol, zmos, savtsn, ee2, e3, xi2, xl2, xl3, xl4, xgh2, xgh3, xgh4, xh2, xh3, sse, ssi, ssg, xi3, se2, si2, sl2, sgh2, sh2, se3, si3, sl3, sgh3, sh3, sl4, sgh4, ssl, ssh, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433, del1, del2, del3, fasx2, fasx4, fasx6, xlamo, xfact, xni, atime, stepp, stepn, step2, preep, pl, sghs, xli, d2201, d2211, sghl, sh1, pinc, pe, shs, zsingl, zcosgl, zsinhl, zcoshl, zsinil, zcosil;		} deep_static_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>sgpsdp_static_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>sgpsdp_static_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="sgpsdp_static_t">sgpsdp_static_t	&lt;C: typedef struct {			double aodp, aycof, c1, c4, c5, cosio, d2, d3, d4, delmo, omgcof, eta, omgdot, sinio, xnodp, sinmo, t2cof, t3cof, t4cof, t5cof, x1mth2, x3thm1, x7thm1, xmcof, xmdot, xnodcf, xnodot, xlcof;		} sgpsdp_static_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tm</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tm</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>structs</category><body package="MobileTrackInterface" selector="tm">tm	&lt;C: struct tm {			int tm_sec, tm_min, tm_hour, tm_mday, tm_mon, tm_year, tm_wday, tm_yday, tm_isdst;			long tm_gmtoff;			char * tm_zone;		}&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tle_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tle_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="tle_t">tle_t	&lt;C: typedef struct {			double epoch;			unsigned int epoch_year, epoch_day;			double epoch_fod, xndt2o, xndd6o, bstar, xincl, xnodeo, eo, omegao, xmo, xno;			int catnr, elset, revnum;			char sat_name[25];			char idesg[9];			op_stat_t status;			double xincl1, xnodeo1, omegao1;		} tle_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>geodetic_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>geodetic_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="geodetic_t">geodetic_t	&lt;C: typedef struct {			double lat, lon, alt, theta;		} geodetic_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>sat_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>sat_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="sat_t">sat_t	&lt;C: typedef struct {			char * name;			char * nickname;			char * website;			tle_t tle;			int flags;			sgpsdp_static_t sgps;			deep_static_t dps;			deep_arg_t deep_arg;			vector_t pos, vel;			obs_set_t bearing;			obs_astro_t astro;			double jul_epoch, jul_utc, tsince, aos, los, az, el, range, range_rate, ra, dec, ssplat, ssplon, alt, velo, ma, footprint, phase, meanmo;			unsigned long orbit;			orbit_type_t otype;		} sat_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>vector_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>vector_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>SgpSdpInterface</class-id> <category>types</category><body package="MobileTrackInterface" selector="vector_t">vector_t	&lt;C: typedef struct {			double x, y, z, w;		} vector_t&gt;</body></methods><methods><class-id>AlgoDis.NetworkEvent class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="collision2">collision2	| m s |	m := Mobile mobile1.	s := Mobile point2.	^NetworkEvent mobile: m sensor: s.</body></methods><methods><class-id>AlgoDis.NetworkEvent class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.NetworkEvent class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="collision1">collision1	| m s |	m := Mobile mobile1.	s := Mobile point1.	^NetworkEvent mobile: m sensor: s.</body></methods><methods><class-id>AlgoDis.NetworkEvent class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:sensor:timeReference:">mobile: m sensor: s timeReference: tr	^self subclassResponsibility.</body></methods><methods><class-id>AlgoDis.NetworkEvent class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:sensor:">mobile: m sensor: s	^self subclassResponsibility.</body></methods><methods><class-id>AlgoDis.ExplorationStrategy class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.UIPickNodesMobile class</class-id> <category>interface specs</category><body package="DistributedModeling-Mobile" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Pick points Mobile' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1361 1005 ) 			#flags: 4 			#menu: #leMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 29 0 0 1.00251 0 0.997118 ) 					#name: #ViewHolder1 					#flags: 11 					#component: #laVue ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 3 3 218 26 ) 					#name: #Slider1 					#flags: 40 					#model: #percent 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 224 3 326 26 ) 					#name: #InputField1 					#flags: 40 					#model: #portee 					#type: #number ) 				#(#{UI.RadioButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Core.Point} 329 3 ) 					#name: #toSensors 					#model: #destination 					#label: 'Sensors' 					#select: #toSensors ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 430 2 ) 					#name: #toMobile 					#model: #destination 					#label: 'Mobile step' 					#select: #toMobiles ) ) ) )</body></methods><methods><class-id>AlgoDis.UIPickNodesMobile class</class-id> <category>resources</category><body package="DistributedModeling-Mobile" selector="leMenu">leMenu	"Tools.MenuEditor new openOnClass: self andSelector: #leMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'load image' 							#value: #loadImage ) 						#(#{UI.MenuItem} 							#rawLabel: 'save postscript' 							#value: #savePostscript ) 						#(#{UI.MenuItem} 							#rawLabel: 'build net' 							#value: #buildNet ) 						#(#{UI.MenuItem} 							#rawLabel: 'load points' 							#value: #loadPoints ) 						#(#{UI.MenuItem} 							#rawLabel: 'save points' 							#value: #savePoints ) 						#(#{UI.MenuItem} 							#rawLabel: 'Inspect' 							#value: #inspect ) ) #(6 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Edit' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Reset' 							#value: #resetPoints ) ) #(1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>testing-instances</category><body package="DistributedModeling-samples" selector="fftDIT8Points">fftDIT8Points "fftDIT8Pointsmessages null complex.X0 { Butterfly1Stage1 } SourceX4 { Butterfly1Stage1 } SourceX2 { Butterfly2Stage1 } SourceX6 { Butterfly2Stage1 } SourceX1 { Butterfly3Stage1 } SourceX5 { Butterfly3Stage1 } SourceX3 { Butterfly4Stage1 } SourceX7 { Butterfly4Stage1 } SourceButterfly1Stage1 {Butterfly1Stage2 Butterfly2Stage2 } ButterflyButterfly2Stage1 {Butterfly1Stage2 Butterfly2Stage2 } ButterflyButterfly3Stage1 {Butterfly3Stage2 Butterfly4Stage2 } ButterflyButterfly4Stage1 {Butterfly3Stage2 Butterfly4Stage2 } ButterflyButterfly1Stage2 {Butterfly1Stage3 Butterfly3Stage3 } ButterflyButterfly2Stage2 {Butterfly2Stage3 Butterfly4Stage3 } ButterflyButterfly3Stage2 {Butterfly1Stage3 Butterfly3Stage3 } ButterflyButterfly4Stage2 {Butterfly2Stage3 Butterfly4Stage3 } ButterflyButterfly1Stage3 { Drain0 Drain1 } ButterflyButterfly2Stage3 { Drain2 Drain3 } ButterflyButterfly3Stage3 { Drain4 Drain5 } ButterflyButterfly4Stage3 { Drain6 Drain7 } ButterflyDrain0 {} DrainDrain1 {} DrainDrain2 {} DrainDrain3 {} DrainDrain4 {} DrainDrain5 {} DrainDrain6 {} DrainDrain7 {} Drain"</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>testing</category><body package="DistributedModeling-samples" selector="com2">com2" recompiler ceci ds les methodes d'insatnces""messages M1 , M2 .P1 { P2, P3} PimP2 { P1, P3  } PamP3 { P1, P2  } Poum"</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>testing</category><body package="DistributedModeling-samples" selector="test6">test6	"Open a HotDraw window presenting a view on the network. 	Elements are instances of NetEditModel"	| net graph text file |	net := self new graph1.self halt.	graph := net buildGraph.	text := graph programMain.	file := 'syncModel.occ' asFilename writeStream.	file nextPutAll: text; close.	net buildHotDrawNetwork</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>testing</category><body package="DistributedModeling-samples" selector="test5">test5	"build an asynchronous program"	| net graph text file |	net := self new graph1.	graph := net buildGraphAsync.	text := graph programMain.	file := 'asyncModel.occ' asFilename writeStream.	file nextPutAll: text; close</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>testing</category><body package="DistributedModeling-samples" selector="test3">test3	| net graph |	net := self new com2.	graph := net buildGraph.	^graph programMain</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>compiling</category><body package="DistributedModeling-samples" selector="compilerClass">compilerClass	^AlgoDis.NetworkCompiler</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>testing</category><body package="DistributedModeling-samples" selector="test8">test8	"check correctness of an synchronous Occam program"	| net graph text file |	net := self new someNetwork.	graph := net buildGraph.	text := graph programMain.	file := 'syncModel.occ' asFilename writeStream.	file		nextPutAll: text;		close</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>fileIn/Out</category><body package="DistributedModeling-samples" selector="fromFile:">fromFile: file		| fn rs method contents |	fn := file asFilename.	fn exists ifFalse: [self error: file , ' does not exists'].	rs := fn readStream.	contents := rs contents.	rs close. 	method := self compile: contents classified: 'examples'.	self halt.	^method</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>testing</category><body package="DistributedModeling-samples" selector="testFftDIT8Points">testFftDIT8Points	"NetworkTopologies testFftDIT8Points"	| net graph text file |	net := self new fftDIT8Points.	graph := net buildFFTGraph.	text := graph programMain.	file := 'fftDIT8Points.occ' asFilename writeStream.	file nextPutAll: text; close.	net buildHotDrawNetworkOn: 'fftDIT8Points'</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>fileIn/Out</category><body package="DistributedModeling-samples" selector="chooseFile">chooseFile		| file method |	file := Dialog requestFileName: 'choose a network file'.	file isEmpty ifFalse: [method := self fromFile: file].	^method</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>testing</category><body package="DistributedModeling-samples" selector="test4">test4"build a synchronous Occam program"	| net graph text file |	net := self new graph1.	graph := net buildGraph.self halt.	text := graph programMain.	file := 'syncModel.occ' asFilename writeStream.	file nextPutAll: text; close.</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>testing</category><body package="DistributedModeling-samples" selector="test7">test7	"execute a sh program producing identical lines 	in the format :	node link 	node is the node number 	link is the link to select in the interface.       Example of file is:#!/bin/sh	for i in 1 2 3 4 	do	echo  0 0$i	echo  1 1$i	echo  2 2$i	echo  3 3$i 	done"	| net graph text file |	net := self new graph1.	graph := net buildGraph.	text := graph programMain.	file := 'syncModel.occ' asFilename writeStream.	file nextPutAll: text; close.	net buildHotDrawNetworkOn: 'syncModel'</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>testing</category><body package="DistributedModeling-samples" selector="graph1">graph1" recompiler ceci ds les methodes d'instances""messages M1 , M2, M3 .P1 { P2, P3, P4} PimP2 { P1, P3  } PamP3 { P1, P2  } PoumP4 { P1, P2 ,P3  } Poum"</body></methods><methods><class-id>AlgoDis.NetworkTopologies class</class-id> <category>testing</category><body package="DistributedModeling-samples" selector="testabGraph">testabGraph	"check correctness of an synchronous Occam program"		| net graph text file |	net := self new abGraph.	graph := net buildGraph.	net		printDotOn: net name		labeling: true.	text := graph programMain.	file := 'syncModel.occ' asFilename writeStream.	file		nextPutAll: text;		close</body></methods><methods><class-id>AlgoDis.SynchronousBlock class</class-id> <category>testing</category><body package="DistributedModeling-Processes" selector="testRingTranscript:">testRingTranscript: n	" self testRing: 3"	| processes block0 linksPrev links0 blockNext linksNext syncBlock barrier item |	processes := OrderedCollection new.	SynchronousBehaviour makeIds: n.	block0 := SynchronousBehaviour maxTranscript.	barrier := SharedQueue new: 1.	linksPrev := links0 := Array with: (SharedQueue new: 1).	n - 1 timesRepeat: 			[blockNext := SynchronousBehaviour maxTranscript.			linksNext := Array with: (SharedQueue new: 1).			syncBlock := SynchronousProcess						block: blockNext						inputs: linksPrev						outputs: linksNext						steps: n						barrier: barrier.			processes add: syncBlock.			linksPrev := linksNext].	syncBlock := SynchronousProcess				block: block0				inputs: linksPrev				outputs: links0				steps: n				barrier: barrier.	processes add: syncBlock.	processes do: [:sb | sb resume].	Transcript		show: 'after resume';		cr.	1 to: n		do: 			[:i |			Transcript				show: 'waiting  ' , i printString;				cr.			item := barrier next.			Transcript				show: 'released ' , item printString;				cr].	Transcript		show: 'end';		cr</body></methods><methods><class-id>AlgoDis.SynchronousBlock class</class-id> <category>testing</category><body package="DistributedModeling-Processes" selector="benchRingShort">benchRingShort	| time |	Transcript cr.	1000 to: 2000		by: 100		do: 			[:nodes |			time := Time millisecondsToRun: [self testRing: nodes].			Transcript				show: nodes printString;				tab;				show: time printString;				cr]</body></methods><methods><class-id>AlgoDis.SynchronousBlock class</class-id> <category>testing</category><body package="DistributedModeling-Processes" selector="testRing:">testRing: n	" self testRing: 1000"	| processes block0 linksPrev links0 blockNext linksNext syncBlock barrier item |	processes := OrderedCollection new.	SynchronousBehaviour makeIds: n.	block0 := SynchronousBehaviour max.	barrier := SharedQueue new: 1.	linksPrev := links0 := Array with: (SharedQueue new: 1).	n - 1 timesRepeat: 			[blockNext := SynchronousBehaviour max.			linksNext := Array with: (SharedQueue new: 1).			syncBlock := SynchronousProcess						block: blockNext						inputs: linksPrev						outputs: linksNext						steps: n						barrier: barrier.			processes add: syncBlock.			linksPrev := linksNext].	syncBlock := SynchronousProcess				block: block0				inputs: linksPrev				outputs: links0				steps: n				barrier: barrier.	processes add: syncBlock.	processes do: [:sb | sb resume].	1 to: n do: [:i | item := barrier next]</body></methods><methods><class-id>AlgoDis.SynchronousBlock class</class-id> <category>testing</category><body package="DistributedModeling-Processes" selector="benchRing">benchRing	| time |	Transcript cr.	1000 to: 1200		by: 200		do: 			[:nodes |			time := Time millisecondsToRun: [self testRing: nodes].			Transcript				show: nodes printString;				tab;				show: time printString;				cr]</body></methods><methods><class-id>AlgoDis.SynchronousBlock class</class-id> <category>testing</category><body package="DistributedModeling-Processes" selector="testRing">testRing	" unidirecional channel of depth 1"	| processes block0 linksPrev links0 blockNext linksNext syncBlock finished exclusion semaEnd |	processes := OrderedCollection new.	SynchronousBehaviour makeIds: 6.	block0 := SynchronousBehaviour maxTranscript.	exclusion := Semaphore forMutualExclusion.	semaEnd := Semaphore forMutualExclusion.	semaEnd wait.	linksPrev := links0 := Array with: (SharedQueue new: 0).	5 timesRepeat: 			[blockNext := SynchronousBehaviour maxTranscript.			linksNext := Array with: (SharedQueue new: 1).			syncBlock := SynchronousProcess block: blockNext inputs: linksPrev outputs: linksNext.			processes add: syncBlock.			linksPrev := linksNext].	syncBlock := SynchronousProcess block: block0 inputs: linksPrev outputs: links0.	processes add: syncBlock.	finished := 0.	processes do: 			[:sb |			sb resume.			exclusion critical: 					[finished := finished + 1.					finished = 6 ifTrue: [semaEnd signal]]].	semaEnd wait.	Transcript		show: 'end';		cr</body></methods><methods><class-id>AlgoDis.SynchronousBlock class</class-id> <category>instance creation</category><body package="DistributedModeling-Processes" selector="block:inputs:outputs:steps:">block: aBlock inputs: inputs outputs: outputs steps: steps	| syncBlock |	syncBlock := self basicNew.	syncBlock		inputs: inputs;		outputs: outputs;		block: aBlock.	syncBlock synchronousBehaviour: steps.	^syncBlock</body></methods><methods><class-id>AlgoDis.SynchronousBlock class</class-id> <category>testing</category><body package="DistributedModeling-Processes" selector="testPair">testPair		| block1 block2 links1to2 links2to1 syncBlock1 syncBlock2 | 	block1 := SynchronousBehaviour max.	block2 := SynchronousBehaviour max.	links1to2 := Array with: SharedQueue new.	links2to1 := Array with: SharedQueue new.	syncBlock1 := SynchronousProcess block: block1 inputs: links2to1 outputs:			links1to2.	syncBlock2 := SynchronousProcess block: block2 inputs: links1to2 outputs:			links2to1.	syncBlock1 resume.	syncBlock2 resume</body></methods><methods><class-id>AlgoDis.SynchronousBlock class</class-id> <category>instance creation</category><body package="DistributedModeling-Processes" selector="block:inputs:outputs:">block: aBlock inputs: inputs outputs: outputs		| syncBlock |	syncBlock := self basicNew.	syncBlock		inputs: inputs;		outputs: outputs;		block: aBlock.	syncBlock synchronousBehaviour.	^syncBlock</body></methods><methods><class-id>AlgoDis.SynchronousBlock class</class-id> <category>instance creation</category><body package="DistributedModeling-Processes" selector="block:inputs:outputs:steps:barrier:">block: aBlock inputs: inputs outputs: outputs steps: steps barrier: barrier	| syncBlock |	syncBlock := self basicNew.	syncBlock		inputs: inputs;		outputs: outputs;		block: aBlock.	syncBlock barrier: barrier.	syncBlock synchronousBehaviour: steps.	^syncBlock</body></methods><methods><class-id>AlgoDis.SynchronousBehaviour class</class-id> <category>utilities</category><body package="DistributedModeling-Processes" selector="makeIds:">makeIds: n		| ids ran found alea |	ids := Set new: n.	ran := Random new.	[ids size &lt; n]		whileTrue:			[found := false.			[found]				whileFalse:					[alea := (ran next * n * 10) truncated.					found := (ids includes: alea) not].			ids add: alea].	^Ideas := ids asArray readStream</body></methods><methods><class-id>AlgoDis.SynchronousBehaviour class</class-id> <category>instance creation</category><body package="DistributedModeling-Processes" selector="maxTranscript">maxTranscript	| max transition initial id ws |	max := 0.	id := self nextIdea.	max := id.	transition :=			[:in :out |			in do: [:val | max := max max: val].			ws := String new writeStream.			ws				nextPutAll: id printString;				tab;				nextPutAll: max printString;				cr.			Transcript show: ws contents.			1 to: out size do: [:i | out at: i put: max]].	initial :=			[:sb :out |			Transcript				cr;				show: 'starting ' , id printString;				cr.			1 to: out size do: [:index | out at: index put: id]].	^Array with: initial with: transition</body></methods><methods><class-id>AlgoDis.SynchronousBehaviour class</class-id> <category>instance creation</category><body package="DistributedModeling-Processes" selector="Node">Node	| max transition initial id |	max := 0.	id := self nextIdea.	max := id.	transition :=			[:in :out |			in do: [:val | max := max max: val].			1 to: out size do: [:i | out at: i put: max]	"Processor yield"].	initial := [:sb :out | 1 to: out size do: [:index | out at: index put: id]	"Processor yield"].	^Array with: initial with: transition</body></methods><methods><class-id>AlgoDis.SynchronousBehaviour class</class-id> <category>utilities</category><body package="DistributedModeling-Processes" selector="nextIdea">nextIdea	^Ideas next</body></methods><methods><class-id>AlgoDis.SynchronousBehaviour class</class-id> <category>instance creation</category><body package="DistributedModeling-Processes" selector="max">max	| max transition initial id |	max := 0.	id := self nextIdea.	max := id.	transition :=			[:in :out |			in do: [:val | max := max max: val].			1 to: out size do: [:i | out at: i put: max]	"Processor yield"].	initial := [:sb :out | 1 to: out size do: [:index | out at: index put: id]	"Processor yield"].	^Array with: initial with: transition</body></methods><methods><class-id>AlgoDis.SynchronousProcess class</class-id> <category>testing</category><body package="DistributedModeling-Processes" selector="test1">test1		| process aBlock | 	aBlock := [Transcript		show: 'kiki';		cr.	(Delay forSeconds: 12) wait.	Transcript		show: 'lolo';		cr].	process := self forBlock: aBlock priority: 10.	process resume</body></methods><methods><class-id>AlgoDis.SynchronousProcess class</class-id> <category>instance creation</category><body package="DistributedModeling-Processes" selector="block:inputs:outputs:steps:barrier:">block: aBlock inputs: inputs outputs: outputs steps: steps barrier: barrier	| syncProcess syncBlock behaviour |	syncBlock := SynchronousBlock				block: aBlock				inputs: inputs				outputs: outputs				steps: steps				barrier: barrier.	behaviour := syncBlock synchronousBehaviour: steps.	syncProcess := self forBlock: behaviour priority: 10.	^syncProcess</body></methods><methods><class-id>AlgoDis.SynchronousProcess class</class-id> <category>instance creation</category><body package="DistributedModeling-Processes" selector="block:inputs:outputs:">block: aBlock inputs: inputs outputs: outputs		| syncProcess syncBlock behaviour |	syncBlock := SynchronousBlock block: aBlock inputs: inputs outputs:			outputs.	behaviour := syncBlock synchronousBehaviour.	syncProcess := self forBlock: behaviour priority: 10.	^syncProcess</body></methods><methods><class-id>AlgoDis.SynchronousProcess class</class-id> <category>testing</category><body package="DistributedModeling-Processes" selector="test2">test2		| process aBlock | 	aBlock := SynchronousBlock max.	process := self forBlock: aBlock priority: 10.	process resume</body></methods><methods><class-id>UIMCell class</class-id> <category>interface specs</category><body package="DistributedModeling-CellularAutomata" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'MCellViewer' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1221 1000 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.0 0 0.997625 0 0.584906 ) 					#name: #ViewHolder1 					#flags: 11 					#component: #mcellView ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00475059 0 0.584906 0 0.995249 0 0.851752 ) 					#name: #TextEditor1 					#model: #mcellText 					#isReadOnly: true 					#tabRequiresControl: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00950119 0 0.884097 0 0.204276 0 0.967655 ) 					#name: #ActionButton2 					#model: #startStop 					#label: 'Start' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.220903 0 0.886792 0 0.382423 0 0.97035 ) 					#name: #ActionButton3 					#flags: 40 					#model: #doStep 					#label: 'Do Step' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.413302 0 0.897574 0 0.524941 0 0.959569 ) 					#name: #Label1 					#label: 'Scale:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.529691 0 0.894879 0 0.617577 0 0.956873 ) 					#name: #InputField1 					#model: #scaleField 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.631829 0 0.897574 0 0.83848 0 0.959569 ) 					#name: #Label2 					#label: 'Speed (ms):' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.840855 0 0.892183 0 0.971496 0 0.959569 ) 					#name: #InputField2 					#model: #speedField 					#type: #number ) ) ) )</body></methods><methods><class-id>UIMCell class</class-id> <category>resources</category><body package="DistributedModeling-CellularAutomata" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'open' 							#value: #fileOpen ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'ExecutionLoop' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Start' 							#value: #doStart ) 						#(#{UI.MenuItem} 							#rawLabel: 'Stop' 							#value: #doStop ) ) #(2 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ConnectivityModel class</class-id> <category>testing</category><body package="DistributedModeling-CellularAutomata" selector="test">test	| conn a b file ws |	conn := OrderedCollection new.	conn		add: 0 @ 1;		add: 1 @ 0;		add: 1 @ 1;		add: -1 @ 0;		add: 0 @ -1;		add: -1 @ -1;		add: -1 @ 1;		add: 1 @ -1.	a := self new.	a		genConnectivity: 10 @ 10		with: conn		edges: #(false false).	a displayGrid.	a inspect.	b := AlgoDis.CudaBuilder new.	b setUpFromAC: a.	file := 'generated.cu' asFilename.	ws := file writeStream.	b cudaGenOn: ws.	ws close</body></methods><methods><class-id>AlgoDis.Mcell class</class-id> <category>instance creation</category><body package="DistributedModeling-CellularAutomata" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>CACudaInterface class</class-id> <category>testing</category><body package="DistributedModeling-CellularAutomata" selector="testAlgo">testAlgo	"self testAlgo"	| test pData nodes ptr nodes2 N rules_a rules_b |	N := 80.	self unloadLibraries.	test := self new.	nodes := test nodeState gcMalloc: N.	pData := test pdata gcMalloc.	pData memberAt: #N put: N.	pData memberAt: #boardX put: 2.	pData memberAt: #boardY put: 5.	pData memberAt: #rulesAlive put: 2.	pData memberAt: #rulesBorn put: 1.	rules_a := CIntegerType int gcMalloc: 2.	ptr := rules_a copy.	ptr contents: 3.	ptr += 1.	ptr contents: 2.	ptr := nodes copy.	rules_b := CIntegerType int gcMalloc: 1.	ptr := rules_b copy.	ptr contents: 3.	ptr := nodes copy.	1 to: N		do: 			[:i |			ptr memberAt: #current put: 1.			ptr += 1].	test readFromSt80: nodes with: pData with: rules_a with: rules_b.	test doStep.	nodes2 := test nodeState gcMalloc: N.	test writeToSt80: nodes2.	test cleanUp.	ptr := nodes2 copy.	1 to: 3 do: [:ind | ptr inspect. ptr += 1].</body></methods><methods><class-id>AlgoDis.LifeBlock class</class-id> <category>instance creation</category><body package="DistributedModeling-CellularAutomata" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.CudaProcessModel class</class-id> <category>instance creation</category><body package="DistributedModeling-Cuda" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.CudaProcessModel class</class-id> <category>instance creation</category><body package="DistributedModeling-Cuda" selector="procedureName:">procedureName: string	"Answer a newly created and initialized instance."	| proc |	proc := self new.	proc stepProcedure: 'step' , string.	proc initProcedure: 'init' , string.	^proc</body></methods><methods><class-id>UIExecManager class</class-id> <category>interface specs</category><body package="DistributedModeling-Cuda" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 384 330 1536 870 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.Rectangle} 107 3 1147 502 ) 					#name: #Table1 					#model: #tableInterface 					#showHGrid: true 					#showVGrid: true 					#selectionStyle: #column ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00520833 0 0.890741 0 0.0920139 0 0.92963 ) 					#name: #InputField1 					#model: #cellContents ) ) ) )</body></methods><methods><class-id>UIExecManager class</class-id> <category>instance creation</category><body package="DistributedModeling-Cuda" selector="sensorId:">sensorId: sid	| uiem builder win |	uiem := self new.	uiem sensorId: sid.	builder := uiem open.	win := builder window.	win label: 'Sensor ' , sid printString.	^uiem</body></methods><methods><class-id>UIExecManager class</class-id> <category>testing</category><body package="DistributedModeling-Cuda" selector="test1">test1	^self sensorId: 55</body></methods><methods><class-id>NodeState class</class-id> <category>instance creation</category><body package="DistributedModeling-Cuda" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Mapped class</class-id> <category>instance creation</category><body package="DistributedModeling-Cuda" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Mapped class</class-id> <category>instance creation</category><body package="DistributedModeling-Cuda" selector="fromMemory:">fromMemory: ptr	"Answer a newly created and initialized instance."	| m |	m := self new.	m node: (ptr memberAt: #node).	m canal: (ptr memberAt: #canal).	^m</body></methods><methods><class-id>Channel class</class-id> <category>instance creation</category><body package="DistributedModeling-Cuda" selector="fromMemory:fanOut:dynamic:">fromMemory: ptr fanOut: f dynamic: d	"Answer a newly created and initialized instance."	| c mptr mappedWrite mappedRead mappedWriteDyn mappedReadDyn |	c := self new.	c nbOut: (ptr memberAt: #nbOut).	c nbIn: (ptr memberAt: #nbIn).	c nbDyn: (ptr memberAt: #nbDyn).	mptr := ptr memberAt: #write.	mappedWrite := OrderedCollection new.	1 to: f		do: 			[:n |			| index m |			index := mptr at: (n - 1).			m := Mapped fromMemory: index.			mappedWrite add: m].	c write: mappedWrite.	" "	mptr := ptr memberAt: #read.	mappedRead := OrderedCollection new.	1 to: f		do: 			[:n |			| index m |			index := mptr + (n - 1).			m := Mapped fromMemory: index.			mappedRead add: m].	c read: mappedRead.	" "	mptr := ptr memberAt: #writeDyn.	mappedWriteDyn := OrderedCollection new.	1 to: f		do: 			[:n |			| index m |			index := mptr + (n - 1).			m := Mapped fromMemory: index.			mappedWriteDyn add: m].	c read: mappedWriteDyn.	" "	mptr := ptr memberAt: #readDyn.	mappedReadDyn := OrderedCollection new.	1 to: f		do: 			[:n |			| index m |			index := mptr + (n - 1).			m := Mapped fromMemory: index.			mappedReadDyn add: m].	c read: mappedReadDyn.	^c</body></methods><methods><class-id>Channel class</class-id> <category>instance creation</category><body package="DistributedModeling-Cuda" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>CudaDebugger class</class-id> <category>interface specs</category><body package="DistributedModeling-Cuda" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Cuda Debugger' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 462 84 2382 666 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 316 0 ) 					#name: #Table1 					#model: #tableInterface 					#showHGrid: true 					#showVGrid: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 320 138 360 ) 					#name: #ActionButton2 					#model: #doStart 					#label: 'Start' 					#defaultable: true ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 1 364 339 434 ) 					#name: #GroupBox1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 10 376 148 416 ) 					#name: #ActionButton4 					#model: #doStartDiameterFromMinusOne 					#label: 'startDiameterFrom: -1' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 146 376 244 416 ) 					#name: #ActionButton6 					#model: #doStepDiameter 					#label: 'doStep:' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 247 380 327 414 ) 					#name: #InputField2 					#model: #doStepDiameterField 					#type: #number ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 3 440 341 519 ) 					#name: #GroupBox2 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 13 457 151 497 ) 					#name: #ActionButton7 					#model: #doStartLeaderFromMinusOne 					#label: 'startLeaderFrom: -1' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 153 457 247 498 ) 					#name: #ActionButton10 					#model: #doStepLeader 					#label: 'doStep:' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 249 458 330 492 ) 					#name: #InputField4 					#model: #doStepLeaderField 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 397 370 484 411 ) 					#name: #ActionButton8 					#model: #doGetDiameter 					#label: 'getDiameter' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 485 381 ) 					#name: #Label2 					#label: '=' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 501 374 560 408 ) 					#name: #InputField3 					#model: #getDiameterField 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 614 388 669 418 ) 					#name: #ActionButton1 					#model: #testAdd 					#label: 'Action' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 456 319 524 356 ) 					#name: #ActionButton5 					#model: #doGetN 					#label: 'getN' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 531 324 589 353 ) 					#name: #InputField1 					#model: #getN 					#type: #number 					#formatString: '0' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 611 329 666 359 ) 					#name: #ActionButton3 					#model: #doStop 					#label: 'Stop' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 521 330 ) 					#name: #Label1 					#label: '=' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 10 524 142 565 ) 					#name: #ActionButton9 					#model: #doUnloadLibrary 					#label: 'unloadLibrary' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 398 426 502 465 ) 					#name: #ActionButton11 					#model: #doGetSensorsNb 					#label: 'getSensorsNb' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 511 438 ) 					#name: #Label3 					#label: '=' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 524 428 631 463 ) 					#name: #InputField5 					#model: #getSensorsNbField 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 400 479 507 528 ) 					#name: #ActionButton12 					#model: #doStartZoneFrom 					#label: 'startZoneFrom:' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 524 480 636 523 ) 					#name: #InputField6 					#model: #doStartZoneFromField 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 807 487 923 517 ) 					#name: #InputField7 					#model: #mobilePosition 					#type: #object ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 926 482 1055 524 ) 					#name: #ActionButton13 					#model: #doUpdateMobilePos 					#label: 'updateMobilePos' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 812 460 ) 					#name: #Label4 					#label: 'Mobile Position:' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 717 481 807 525 ) 					#name: #ActionButton14 					#model: #doGetMobilePos 					#label: 'getMobilePos' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 1012 336 1067 366 ) 					#name: #ActionButton15 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>CudaInterface class</class-id> <category>testing</category><body package="DistributedModeling-Cuda" selector="testDebug">testDebug	"self testDebug"	| a |	a := CudaInterface new.	a start.	a startDiameterFrom: -1.	a doStep: a nbNodes * 4.	a startLeaderFrom: -1.	a doStep: a getDiameter*2.	a getNodes inspect.	a stop</body></methods><methods><class-id>CudaInterface class</class-id> <category>testing</category><body package="DistributedModeling-Cuda" selector="testState">testState	"self testClass "	| a state |	a := CudaInterface new.	state := a s_nodeState.	a range inspect.	state inspect</body></methods><methods><class-id>CudaInterface class</class-id> <category>testing</category><body package="DistributedModeling-Cuda" selector="testBenchRedo">testBenchRedo	"self testBenchRedo"	| a t1 files |	files := 'genRange30Points500.cugenRange30Points1000.cugenRange30Points1500.cugenRange30Points2000.cugenRange30Points2500.cugenRange30Points3000.cu'				tokensBasedOn: Character cr.	Smalltalk.AlgoDis.UINetworkGeometry allInstances first.	files do: 			[:aCuFile |			UnixProcess cshOne: 'cd CudaInterface ; cp ' , aCuFile , ' generated.cu ; make '.			Transcript cr.			a := CudaInterface new.			a start.			a startDiameterFrom: -1.			t1 := Time millisecondsToRun: [a doStep: a nbNodes * 4].			Transcript				show: t1 printString;				tab.			a startDiameterFrom: -1.			t1 := Time millisecondsToRun: [a doStep: a nbNodes * 4].			Transcript				show: t1 printString;				cr.			a startLeaderFrom: -1.			t1 := Time millisecondsToRun: [a doStep: a getDiameter * 2].			Transcript				show: t1 printString;				tab.			a startLeaderFrom: -1.			t1 := Time millisecondsToRun: [a doStep: a getDiameter * 2].			Transcript				show: t1 printString;				cr.			a stop.			ObjectMemory compactMemory ;  snapshot]</body></methods><methods><class-id>CudaInterface class</class-id> <category>testing</category><body package="DistributedModeling-Cuda" selector="testAlgo">testAlgo	"self testAlgo"	| test N res res2 |	self unloadLibraries.	test := self new.	test start.	N := test getN.	test startFunction: -1 with: test MSG_DIAMETER.	test doStep: N * 4 + 10.	test startFunction: -1 with: test MSG_LEADER.	test doStep: N.	test startFunction: -1 with: test MSG_ZONE.	test doStep: N.	res := test getNodes.	res inspect.	test connect: 0 to: 0.	test connect: 0 to: 1.	test startFunction: -1 with: test MSG_DIAMETER.	test doStep: N * 4 + 10.	test startFunction: -1 with: test MSG_LEADER.	test doStep: N.	test startFunction: -1 with: test MSG_ZONE.	test doStep: N.	res2 := test getNodes.	res2 inspect.	test disconnect: 0 to: 0.	test disconnect: 0 to: 1.	test stop</body></methods><methods><class-id>CudaInterface class</class-id> <category>testing</category><body package="DistributedModeling-Cuda" selector="testClass">testClass	"self testClass"	| a res tmp |	a := CudaInterface new.	a start.	a startDiameterFrom: -1.	a doStep: a nbNodes * 4+10.	a startLeaderFrom: -1.	res := a getNodes.	(a getNode: 0) inspect.	tmp := res at: 1.	tmp initial: 100000.	tmp current: tmp initial.	res at: 1 put: tmp.	tmp := res at: 2.	tmp enabled: 0.	res at: 2 put: tmp.	a updateNodes: res.	a doStep: a getDiameter*2.	res := a getNodes.	res inspect.	(res select:[:node | node leader = 1]) inspect.	a stop</body></methods><methods><class-id>CudaInterface class</class-id> <category>testing</category><body package="DistributedModeling-Cuda" selector="forceStop">forceStop	"self forceStop"	| cu |	cu := self new.	cu cleanUp.	CudaInterface unloadLibraries</body></methods><methods><class-id>AlgoDis.MobilePath class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:steps:">mobile: m steps: p	"Instanciate a mobile path for m and make it to cross sequentially all points in the ordered collection of points p. m's speed is kept but it's direction and position may be affected."	| mp |	mp := self new.	mp steps: p.	mp mobile: m.	^mp.</body></methods><methods><class-id>AlgoDis.MobilePath class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.Mobile class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="mobile1">mobile1^Mobile trajectory: (Trajectory trajectory1) range:(5 sqrt / 2).</body></methods><methods><class-id>AlgoDis.Mobile class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="point1">point1	^Point x:9 y:5.</body></methods><methods><class-id>AlgoDis.Mobile class</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="distanceToProjectedPoint:sensor:">distanceToProjectedPoint: m sensor: s"Returns the distance between the mobile and the projection of s' location on the infinite line qualified withm's position and movement."	| res |	res := ((m trajectory position dist: s) * (((m trajectory movement theta) - (s - m trajectory position) theta) cos)).	^res.</body></methods><methods><class-id>AlgoDis.Mobile class</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="canMeet:sensor:">canMeet: m sensor: s"Returns true if the mobile m is able meet the sensor s, depending on m and s' location and m's movement's sens.The method consider an infinite line on which are m's location and movement, and checks if it crosses s' areaof communication. Be aware that canMeet returns TRUE even if the sensor is behind the mobile: in thiscase the mobile CAN meet the sensor but it WON'T."	"how can I find the range ?"	| range dist |	range := m range.		"angle must be lower than 90° and distance from s to m's trajectory below m range""		positionToSensor := (s - (m trajectory position)).		angleToSensor := positionToSensor theta - (m trajectory movement theta).		Transcript show: (positionToSensor theta radiansToDegrees printString); cr.		^(((m trajectory distance: s) abs) &lt;= m range) &amp; (((angleToSensor abs) &lt;= (Double pi / 2)) | ((angleToSensor abs) &gt;= (3 * Double pi / 2)))."	dist := (m trajectory distance: s) abs.	^(dist &lt; range).</body></methods><methods><class-id>AlgoDis.Mobile class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="point2">point2	^Point x:9 y:8.</body></methods><methods><class-id>AlgoDis.Mobile class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="points">points"10	|  ..   ..   x   x   x   ..   ..   ..   x   x	|  ..   x   x   ..   x   ..   ..   x   ..   x	|  ..   ..   ..   ..   ..   x   ..   ..   ..   x	|  ..   ..   x   x   ..   x   ..   ..   ..   x	|  x   ..   ..   x   ..   x   ..   ..   x   ..5	|  x   ..   ..   x   ..   x   ..   ..   x   ..	|  x   ..   ..   ..   ..   x   ..   ..   x   ..	|  ..   ..   ..   ..   ..   ..   ..   ..   ..   ..	|  ..   ..   ..   x   ..   x   x   x   x   ..1	|  ..   ..   x   x   ..   ..   ..   ..   ..   ..0	|------------------------------------	0 1  2   3   4   5   6  7   8   9  10"| a |	a := OrderedCollection new.a add: 3@1.a add: 4@1.a add: 4@2.a add: 6@2.a add: 7@2.a add: 8@2.a add: 9@2.a add: 1@4.a add: 6@4.a add: 9@4.a add: 1@5.a add: 4@5.a add: 6@5.a add: 9@5.a add: 1@6.a add: 4@6.a add: 6@6.a add: 9@6.a add: 3@7.a add: 4@7.a add: 6@7.a add: 10@7.a add: 6@8.a add: 10@8.a add: 2@9.a add: 3@9.a add: 5@9.a add: 8@9.a add: 10@9.a add: 3@10.a add: 4@10.a add: 5@10.a add: 9@10.a add: 10@10.^a asArray.</body></methods><methods><class-id>AlgoDis.Mobile class</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="halfLengthInRangeCircle:sensor:">halfLengthInRangeCircle: m sensor: s"Returns half of the distance the mobile will stride in s' area of communication. This value is used to specifywhere the mobile enters s' area of communication (distanceToProjectedPoint - halfLengthInRangeCircle) and whereit leaves it (distanceToProjectedPoint + halfLengthInRangeCircle)."	| radius d |	(m canMeet: s) ifTrue: [		d := (m trajectory distance: s).		radius := m range.		^(radius ** 2 - (d ** 2)) sqrt.	] ifFalse: [		^nil.	].</body></methods><methods><class-id>AlgoDis.Mobile class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="mobile2">mobile2^Mobile trajectory: (Trajectory position: (Point x:1 y:1) movement: (Point x: 2 y: 2)) range:1.</body></methods><methods><class-id>AlgoDis.Mobile class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="trajectory:range:">trajectory: t range: r	| m |	m := Mobile new.	m trajectory: t.	m range: r.	^m.</body></methods><methods><class-id>AlgoDis.Mobile class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="leftPoint:point:">leftPoint: t point: p	"Gives a new trajectory similar to the one given t but which start on the left of t."	"t is the original trajectory"	"p contains dx and dy values to apply to t"	"All calculations are made in radians"	| dy dx pi theta newt |	pi := Double pi.	theta := t movement theta.	dy := p x.	dx := p y.	(theta &gt;= 0 &amp; theta &lt;= (pi / 2)) ifTrue: [		dx := (-1) * dx.	] ifFalse: [		(theta &gt; (pi / 2) &amp; theta &lt;= pi) ifTrue: [			dy := (-1) * dy.			dx := (-1) * dx.		] ifFalse: [			(theta &gt; pi &amp; theta &lt;= (3 * pi / 2)) ifTrue: [				dy := (-1) * dy.			] ifFalse: [				"both dx and dy must be positive"			]		]	].	newt := t copy.	newt position: (newt position + (Point x:dx y:dy)).	^newt.</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="surroundingPoint:radius:">surroundingPoint: t radius: r| theta |	theta := t movement theta.	^Point x: (theta cos * r) y: (theta sin * r).</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="rightPoint:point:">rightPoint: t point: p	"Gives t's the left point t' where the angle between vectors (t:t') and t.movement is 90 degrees or pi/2 radians"	"All calculations are made in radians"	| dy dx pi theta newt |	pi := Double pi.	theta := t movement theta.	dy := p x.	dx := p y.	(theta &gt;= 0 &amp; theta &lt;= (pi / 2)) ifTrue: [		dy := (-1) * dy.	] ifFalse: [		(theta &gt; (pi / 2) &amp; theta &lt;= pi) ifTrue: [			dx := (-1) * dx.		] ifFalse: [			(theta &gt; pi &amp; theta &lt;= (3 * pi / 2)) ifTrue: [				dx := (-1) * dx.			] ifFalse: [				(theta &gt; (3 * pi / 2) &amp; theta &lt;= 2 ) ifTrue: [					dx := (-1) * dx.					dy := (-1) * dy.				] ifFalse: [					"both dx and dy must be positive"				]			]		]	].	newt := t copy.	newt position: (newt position + (Point x:dx y:dy)).	^newt.</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="trajectory1">trajectory1	"Trajectory from point in (2@4) through direction (2:1)"	^Trajectory position:(Point x:2 y:4) movement:(Point x:2 y:1).</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="point1">point1^Point x:9 y:5.</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="leftPoint1">leftPoint1	| t |	t := Trajectory trajectory1.	^Trajectory leftPoint: t point: (Trajectory surroundingPoint: t radius: (5 sqrt / 2)).</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>copying</category><body package="DistributedModeling-Mobile" selector="shallowCopy">shallowCopy	| newTraj |	newTraj := Trajectory new.	newTraj position: (self position copy).	newTraj movement: (self movement copy).	newTraj color: (self color copy).	^newTraj.</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="rightPoint1">rightPoint1	| t |	t := Trajectory trajectory1.	^Trajectory rightPoint: t point: (Trajectory surroundingPoint: t radius: (5 sqrt / 2)).</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="position:movement:">position: p movement:m	| t |	t := Trajectory new.	t position: p.	t movement: m.	^t.</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="distance1">distance1	^Trajectory distance: (Trajectory trajectory1) point: (Trajectory point1).</body></methods><methods><class-id>AlgoDis.Trajectory class</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="distance:point:">distance: trajectory point: p	"returns the distance between the point p and the line described by trajectory's position and movement."	^((trajectory position dist: p) * (((trajectory movement theta) - ((p - trajectory position) theta)) sin)).</body></methods><methods><class-id>AlgoDis.StraightWay class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:length:startTime:">mobile: m length: l startTime: st	| sw |	sw := self new.	sw mobile: m.	sw length: l.	sw startTime: st.	^sw.</body></methods><methods><class-id>AlgoDis.StraightWay class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:duration:startTime:">mobile: m duration: d startTime: st	| sw |	sw := self new.	sw mobile: m.	sw duration: d.	sw startTime: st.		^sw.</body></methods><methods><class-id>AlgoDis.StraightWay class</class-id> <category>examples</category><body package="DistributedModeling-Mobile" selector="straightWay1">straightWay1	^StraightWay mobile: (Mobile mobile2) endPoint: (Point x: 300 y: 000).</body></methods><methods><class-id>AlgoDis.StraightWay class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:endPoint:startTime:">mobile: m endPoint: p startTime: st	| sw |	sw := self new.	sw mobile: m.	sw endPoint: p.	sw startTime: st.	^sw.</body></methods><methods><class-id>AlgoDis.StraightWay class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.Arrow class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="start:end:">start: s end: e	"Returns a polyline of an arrow from point s to point e with the followin characteristics"	"s is the start point of this arrow"	"e is the point pointed by this arrow"	"v is the angle wished between maine line and lines forming an arrow"	"l is the length of lines which make the arrow to be an arrow"	| theta al a v l ar arrow r b |		v := 25 degreesToRadians.	theta := (e - s) theta.	r := (e - s) r.	l := r / 5.	a := (Double pi  / 2) - theta - v.	b := theta -v.	"I need to compute 3 more points : ArrowLeft (al), ArrowRight (ar) and arrowMiddle (am)"	arrow := OrderedCollection new.	al := (Point x: (e x - (l * a sin)) y: (e y - (l * a cos))).	ar := (Point x: (e x - (l * b cos)) y: (e y - (l * b sin))).	arrow add: s.	arrow add: (Point x: (al x + ar x /2) y: (al y +  ar y / 2)).	arrow add: ar.	arrow add: e.	arrow add: al.	arrow add: (Point x: (al x + ar x /2) y: (al y +  ar y / 2)).	^Polyline vertices: (arrow asArray).</body></methods><methods><class-id>GPredictTraceReader class</class-id> <category>interface specs</category><body package="MobileTrackInterface" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'GPredict trace reader' 			#min: #(#{Core.Point} 317 112 ) 			#max: #(#{Core.Point} 317 112 ) 			#bounds: #(#{Graphics.Rectangle} 585 415 902 527 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 230 20 307 55 ) 					#name: #ActionButton1 					#model: #doOpenFile 					#label: 'Open...' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 14 24 230 52 ) 					#name: #InputField1 					#model: #file 					#type: #string ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 14 61 91 96 ) 					#name: #ActionButton2 					#model: #doReadFile 					#label: 'Read file' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 122 61 199 96 ) 					#name: #ActionButton3 					#model: #inspect 					#label: 'Inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 230 61 307 96 ) 					#name: #ActionButton4 					#model: #doClose 					#label: 'close' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>GpredictReader class</class-id> <category>interface specs</category><body package="MobileTrackInterface" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'GPredict reader' 			#bounds: #(#{Graphics.Rectangle} 874 510 1302 722 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 11 9 418 37 ) 					#name: #InputField1 					#model: #field1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 11 41 418 69 ) 					#name: #InputField2 					#model: #field2 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 11 73 418 101 ) 					#name: #InputField3 					#model: #field3 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 11 104 418 132 ) 					#name: #InputField4 					#model: #field4 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 11 135 418 163 ) 					#name: #InputField5 					#model: #field5 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 10 174 73 204 ) 					#name: #ActionButton1 					#model: #doStart 					#label: 'start' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 74 174 137 204 ) 					#name: #ActionButton2 					#model: #doStop 					#label: 'stop' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>GpredictInterface class</class-id> <category>instance creation</category><body package="MobileTrackInterface" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>GpredictInterface class</class-id> <category>testing</category><body package="MobileTrackInterface" selector="test1">test1	self new open</body></methods><methods><class-id>GpredictInterface class</class-id> <category>testing</category><body package="MobileTrackInterface" selector="test2">test2	self new openAndRead</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing</category><body package="MobileTrackInterface" selector="testTimestamp">testTimestamp	"self testTimestamp"	"self unloadLibraries"	| ssi nowUTC julianDate timestamp epoch duration y m d h min s |	ssi := self new.	nowUTC := Timestamp nowUTC.	y := nowUTC year.	m := nowUTC month.	d := nowUTC day.	h := nowUTC hour.	min := nowUTC minute.	s := nowUTC second.	julianDate := ssi				jdFromYMDHMS: y				with: m				with: d				with: h				with: min				with: s.	timestamp := ssi jdToTimestamp: julianDate.	epoch := Timestamp readFromDateAndTime: '1/1/1970 12:00am' readStream.	duration := nowUTC - epoch.	^Array with: duration asSeconds truncated with: timestamp truncated with: ((julianDate - 2440587.5) * 86400.0)</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing</category><body package="MobileTrackInterface" selector="testPredictCalcSimple">testPredictCalcSimple	"self testPredictCalcSimple"	| ssi sat res satPos x y z |	ssi := self new.	sat := self testInitSatData.	res := (sat memberAt: #flags) bitAnd: ssi DEEP_SPACE_EPHEM_FLAG.	res = 0 ifFalse: [self error: 'Expected 0'].	ssi predict_calc_simple: sat with: 0.0.	"ssi predict_calc_simple: sat with: 360.0.	ssi predict_calc_simple: sat with: 720.0.	ssi predict_calc_simple: sat with: 1080.0.	ssi predict_calc_simple: sat with: 1440.0."	satPos := sat memberAt: #pos.	x := satPos memberAt: #x.	y := satPos memberAt: #y.	z := satPos memberAt: #z.	sat inspect.	^Array with: x with: y with: z</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing</category><body package="MobileTrackInterface" selector="testInitSatAAUCubeSat">testInitSatAAUCubeSat	"self testInitSatAAUCubeSat"	| ssi tleStr sat firstLine secondLine thirdLine |	ssi := self new.	tleStr := ssi tle_str gcMalloc.	firstLine := 'AAU CUBESAT'.	secondLine := '1 27846U 03031G   11058.71129019  .00000063  00000-0  49282-4 0  9515'.	thirdLine := '2 27846  98.7004  69.7453 0008955 124.7236 235.4807 14.21084682397478'.	ssi init_tle_str: tleStr with: firstLine with: secondLine with: thirdLine.	sat := ssi sat_t gcMalloc.	ssi init_sat_data: sat with: tleStr.	^sat.</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing2</category><body package="MobileTrackInterface" selector="testAAUCubeSat2">testAAUCubeSat2	"self testAAUCubeSat2"	"TimeProfiler profile: [1000 timesRepeat: [self testAAUCubeSat2]]"	| firstLine secondLine thirdLine sat ocEpoch |	firstLine := 'AAU CUBESAT'.	secondLine := '1 27846U 03031G   11058.71129019  .00000063  00000-0  49282-4 0  9515'.	thirdLine := '2 27846  98.7004  69.7453 0008955 124.7236 235.4807 14.21084682397478'.	sat := self firstLine: firstLine secondLine: secondLine thirdLine: thirdLine.	ocEpoch := OrderedCollection new.	ocEpoch		add: 1407325752.2231474d;		add: 1407325752.7238085d;		add: 1407325753.2249525d;		add: 1407325753.7255332d;		add: 1407325754.2269185d;		add: 1407325754.7284245d;		add: 1407325755.2296491d;		add: 1407325755.7301090d;		add: 1407325756.2308505d;		add: 1407325756.7313910d.	^ocEpoch collect: 			[:e |			| a |			sat predictFromEpoch: e.			a := Array						with: sat getEpoch						with: sat getLat						with: sat getLon						with: sat getAlt.			a]	"utc 1407325752,2231474	lat 57,8732421	lon -71,5715635	alt 824,3885981	dis 4670	utc 1407325752,7238085	lat 57,8447998	lon -71,5894162	alt 824,3834495	dis 4672	utc 1407325753,2249525	lat 57,8163280	lon -71,6072613	alt 824,3782948	dis 4674	utc 1407325753,7255332	lat 57,7878861	lon -71,6250615	alt 824,3731447	dis 4676	utc 1407325754,2269185	lat 57,7593963	lon -71,6428656	alt 824,3679853	dis 4678	utc 1407325754,7284245	lat 57,7308977	lon -71,6606493	alt 824,3628235	dis 4679	utc 1407325755,2296491	lat 57,7024130	lon -71,6783985	alt 824,3576634	dis 4681	utc 1407325755,7301090	lat 57,6739697	lon -71,6960960	alt 824,3525102	dis 4683	utc 1407325756,2308505	lat 57,6455083	lon -71,7137791	alt 824,3473529	dis 4685	utc 1407325756,7313910	lat 57,6170563	lon -71,7314308	alt 824,3421967	dis 4687"</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testTimestamp</category><body package="MobileTrackInterface" selector="testTimestamp1">testTimestamp1	"self testTimestamp1"	| sat fromTime duration toTime path fromSec toSec |	sat := self AAUCubeSat.	fromTime := Timestamp nowUTC.	duration := Duration fromHours: 1.	toTime := fromTime + duration.	path := OrderedCollection new: duration asSeconds + 1.	fromSec := fromTime asSeconds.	toSec := toTime asSeconds.	fromSec to: toSec		do: 			[:s |			| t |			t := Timestamp fromSeconds: s.			sat predictFromTimestamp: t.			path add: sat getLon @ sat getLat].	^path</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing</category><body package="MobileTrackInterface" selector="testTimestamp2">testTimestamp2	"self testTimestamp2"	"self unloadLibraries"	| ssi nowUTC julianDate timestamp epoch duration |	ssi := self new.	nowUTC := Timestamp nowUTC.	julianDate := ssi timestampToJulianDate: nowUTC.	timestamp := ssi jdToTimestamp: julianDate.	epoch := Timestamp readFromDateAndTime: '1/1/1970 12:00am' readStream.	duration := nowUTC - epoch.	^Array with: duration asSeconds truncated with: timestamp truncated with: ((julianDate - 2440587.5) * 86400.0)</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>instance creation</category><body package="MobileTrackInterface" selector="firstLine:secondLine:thirdLine:">firstLine: firstLine secondLine: secondLine thirdLine: thirdLine	| ssi tleStr sat |	ssi := self new.	tleStr := ssi tle_str gcMalloc.	ssi		init_tle_str: tleStr		with: firstLine		with: secondLine		with: thirdLine.	sat := ssi sat_t gcMalloc.	ssi init_sat_data: sat with: tleStr.	ssi satellite: sat.	^ssi</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing</category><body package="MobileTrackInterface" selector="testSat">testSat	"self testSat"	| ssi tleStr sat satTle res satPos x y z |	ssi := self new.	sat := ssi sat_t gcMalloc.	satTle := sat refMemberAt: #tle.	tleStr := self testTleStr.	res := ssi Get_Next_Tle_Set: tleStr with: satTle.	res = 1		ifFalse: 			[self error: 'Get_Next_Tle_Set'.			^nil].	ssi select_ephemeris: sat.	res := (sat memberAt: #flags) bitAnd: ssi DEEP_SPACE_EPHEM_FLAG.	res = 0 ifFalse: [self error: 'Expected 0'].	ssi SGP4: sat with: 0.0.	ssi Convert_Sat_State: (sat refMemberAt: #pos)		with: (sat refMemberAt: #vel).	satPos := sat memberAt: #pos.	x := satPos memberAt: #x.	y := satPos memberAt: #y.	z := satPos memberAt: #z.	sat inspect.	^Array with: x with: y with: z</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing</category><body package="MobileTrackInterface" selector="testInitSatData">testInitSatData	"self testInitSatData"	| ssi tleStr sat satTle res satPos x y z firstLine secondLine thirdLine |	ssi := self new.	tleStr := ssi tle_str gcMalloc.	firstLine := 'TEST SAT SGP 001'.	secondLine := '1 88888U          80275.98708465  .00073094  13844-3  66816-4 0     9'.	thirdLine := '2 88888  72.8435 115.9689 0086731  52.6988 110.5714 16.05824518   103'.	ssi init_tle_str: tleStr with: firstLine with: secondLine with: thirdLine.	sat := ssi sat_t gcMalloc.	ssi init_sat_data: sat with: tleStr.	^sat.	"satTle := sat refMemberAt: #tle.	tleStr := self testTleStr.	res := ssi Get_Next_Tle_Set: tleStr with: satTle.	res = 1		ifFalse: 			[self error: 'Get_Next_Tle_Set'.			^nil].	ssi select_ephemeris: sat.	res := (sat memberAt: #flags) bitAnd: ssi DEEP_SPACE_EPHEM_FLAG.	res = 0 ifFalse: [self error: 'Expected 0'].	ssi SGP4: sat with: 0.0.	ssi Convert_Sat_State: (sat refMemberAt: #pos)		with: (sat refMemberAt: #vel).	satPos := sat memberAt: #pos.	x := satPos memberAt: #x.	y := satPos memberAt: #y.	z := satPos memberAt: #z.	sat inspect.	^Array with: x with: y with: z"</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing</category><body package="MobileTrackInterface" selector="testPredictTimestamp">testPredictTimestamp	"self testPredictTimestamp"	| ssi sat satPos x y z julianDate ssplat ssplon alt utc |	ssi := self new.	sat := self testInitSatAAUCubeSat.	julianDate := ssi timestampToJulianDate: Timestamp nowUTC.	ssi predict_calc_simple: sat with: julianDate.	satPos := sat memberAt: #pos.	x := satPos memberAt: #x.	y := satPos memberAt: #y.	z := satPos memberAt: #z.	ssplat := sat memberAt: #ssplat.	ssplon := sat memberAt: #ssplon.	alt := sat memberAt: #alt.	utc := ssi jdToTimestamp: (sat memberAt: #jul_utc).	sat inspect.	"^Array with: x with: y with: z"	^Array with: utc with: ssplat with: ssplon with: alt</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing2</category><body package="MobileTrackInterface" selector="AAUCubeSat">AAUCubeSat	| firstLine secondLine thirdLine sat |	firstLine := 'AAU CUBESAT'.	secondLine := '1 27846U 03031G   11058.71129019  .00000063  00000-0  49282-4 0  9515'.	thirdLine := '2 27846  98.7004  69.7453 0008955 124.7236 235.4807 14.21084682397478'.	sat := self firstLine: firstLine secondLine: secondLine thirdLine: thirdLine.	^sat</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing2</category><body package="MobileTrackInterface" selector="testAAUCubeSat">testAAUCubeSat	"self testAAUCubeSat"	| firstLine secondLine thirdLine sat |	firstLine := 'AAU CUBESAT'.	secondLine := '1 27846U 03031G   11058.71129019  .00000063  00000-0  49282-4 0  9515'.	thirdLine := '2 27846  98.7004  69.7453 0008955 124.7236 235.4807 14.21084682397478'.	sat := self firstLine: firstLine secondLine: secondLine thirdLine: thirdLine.	sat predictFromEpoch: 1407325756.7313910d.	^Array		with: sat getEpoch		with: sat getLat		with: sat getLon		with: sat getAlt</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing</category><body package="MobileTrackInterface" selector="testTleStr">testTleStr	"self testTleStr"	| ssi tleStr firstLine secondLine thirdLine max |	ssi := self new.	tleStr := ssi tle_str gcMalloc.	firstLine := 'TEST SAT SGP 001'.	secondLine := '1 88888U          80275.98708465  .00073094  13844-3  66816-4 0     9'.	thirdLine := '2 88888  72.8435 115.9689 0086731  52.6988 110.5714 16.05824518   103'.	max := firstLine size - 1.	0 to: max do: [:i | tleStr at: i put: (firstLine at: i + 1)].	tleStr at: firstLine size put: 0.	max := secondLine size - 1.	0 to: max do: [:i | tleStr at: i + 80 put: (secondLine at: i + 1)].	tleStr at: secondLine size put: 0.	max := thirdLine size - 1.	0 to: max do: [:i | tleStr at: i + 160 put: (thirdLine at: i + 1)].	tleStr at: thirdLine size put: 0.	^tleStr</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testTimestamp</category><body package="MobileTrackInterface" selector="pathAAUCubeSatNextHours:">pathAAUCubeSatNextHours: hours	"self pathAAUCubeSatNextHours: 2"	| sat fromTime duration toTime path fromSec toSec |	sat := self AAUCubeSat.	fromTime := Timestamp nowUTC.	duration := Duration fromSeconds: ((Duration fromHours: hours) asSeconds truncated).	toTime := fromTime + duration.	path := OrderedCollection new: (duration asSeconds truncated) + 1.	fromSec := fromTime asSeconds.	toSec := toTime asSeconds + 1.	fromSec to: toSec		do: 			[:s |			| t |			t := Timestamp fromSeconds: s.			sat predictFromTimestamp: t.			path add: sat getLon @ sat getLat].	^path</body></methods><methods><class-id>SgpSdpInterface class</class-id> <category>testing</category><body package="MobileTrackInterface" selector="testPredictEpochTimestamp:">testPredictEpochTimestamp: aDouble	"self testPredictEpochTimestamp: 1407325756.7313910d"	| ssi sat satPos x y z julianDate ssplat ssplon alt utc |	ssi := self new.	sat := self testInitSatAAUCubeSat.	julianDate := ssi jdFromEpoch: aDouble.	ssi predict_calc_simple: sat with: julianDate.	satPos := sat memberAt: #pos.	x := satPos memberAt: #x.	y := satPos memberAt: #y.	z := satPos memberAt: #z.	ssplat := sat memberAt: #ssplat.	ssplon := sat memberAt: #ssplon.	alt := sat memberAt: #alt.	utc := ssi jdToTimestamp: (sat memberAt: #jul_utc).	sat inspect.	"^Array with: x with: y with: z"	^Array with: utc with: ssplat with: ssplon with: alt</body></methods><methods><class-id>TimedEvent class</class-id> <category>instance creation</category><body package="TimeAnalysis" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>TimedEvent class</class-id> <category>testing</category><body package="TimeAnalysis" selector="testRand1">testRand1	"TimedEvent testRand1 "	| r alea ts time td string index |	r := Random new.	alea := (r next * 10) truncated.	time := Time now addSeconds: alea.	td := Date today.	ts := Timestamp fromDate: td andTime: time.	string := 'azertyuio'.	index := (r next * string size) truncated + 1.	^(self new)		timestamp: ts;		event: (string at: index)</body></methods><methods><class-id>UITimedEventTable class</class-id> <category>interface specs</category><body package="TimeAnalysis" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 737 467 1183 733 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.Rectangle} 48 2 441 263 ) 					#name: #ViewHolder1 					#component: #theTimeView ) ) ) )</body></methods><methods><class-id>TimedEventTable class</class-id> <category>testing</category><body package="TimeAnalysis" selector="testAddRandom">testAddRandom	" TimedEventTable testAddRandom "	| tet te |	tet := self new.	5 timesRepeat: 			[te := TimedEvent testRand1.			tet addEvent: te].	^tet</body></methods><methods><class-id>TimedEventTable class</class-id> <category>testing</category><body package="TimeAnalysis" selector="testAddRandomSorted">testAddRandomSorted	" TimedEventTable testAddRandom "	| tet te |	tet := self new.	5 timesRepeat: 			[te := TimedEvent testRand1.			tet addEvent: te].	^tet resort</body></methods><methods><class-id>TimedEventTable class</class-id> <category>instance creation</category><body package="TimeAnalysis" selector="new">new	^self basicNew initialize</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder class</class-id> <category>instance creation</category><body package="DistributedModeling-Processes" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder class</class-id> <category>instance creation</category><body package="DistributedModeling-Processes" selector="fromGraph:">fromGraph: ng	| pgb |	pgb := self new.	pgb setUpFrom: ng.	^pgb</body></methods><methods><class-id>AlgoDis.CudaBuilder class</class-id> <category>instance creation</category><body package="DistributedModeling-Cuda" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.CudaBuilder class</class-id> <category>instance creation</category><body package="DistributedModeling-Cuda" selector="fromGraph:">fromGraph: ng	| pgb |	pgb := self new.	pgb setUpFrom: ng.	^pgb</body></methods><methods><class-id>AlgoDis.LinkCreation class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:sensor:">mobile: m sensor: s	"Instanciate a link creation event. If the mobile m and the sensor s cannot meet, then this event nil."	| lc |	(m canMeet: s) ifTrue: [		lc := LinkCreation new.		lc mobile: m.		lc sensor: s.		lc timeReference: 0.				^lc.	] ifFalse: [		^nil.	].</body></methods><methods><class-id>AlgoDis.LinkCreation class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:sensor:timeReference:">mobile: m sensor: s timeReference: tr	"Instanciate a link creation event. If the mobile m and the sensor s cannot meet, then this event nil."	| lc |	(m canMeet: s) ifTrue: [		lc := LinkCreation new.		lc mobile: m.		lc sensor: s.		lc timeReference: tr.				^lc.	] ifFalse: [		^nil.	].</body></methods><methods><class-id>AlgoDis.LinkDestruction class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:sensor:">mobile: m sensor: s	"Instanciate a link destruction event. If the mobile m and the sensor s cannot meet, then this event nil."	| ld |	(m canMeet: s) ifTrue: [		ld := LinkDestruction new.		ld mobile: m.		ld sensor: s.		ld timeReference: 0.		^ld.	] ifFalse: [		^nil.	].</body></methods><methods><class-id>AlgoDis.LinkDestruction class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:sensor:timeReference:">mobile: m sensor: s timeReference: tr	"Instanciate a link destruction event. If the mobile m and the sensor s cannot meet, then this event nil."	| ld |	(m canMeet: s) ifTrue: [		ld := LinkDestruction new.		ld mobile: m.		ld sensor: s.		ld timeReference: tr.		^ld.	] ifFalse: [		^nil.	].</body></methods><methods><class-id>AlgoDis.RandomWalk class</class-id> <category>constants</category><body package="DistributedModeling-Mobile" selector="maxPoints">maxPoints	"Maximum steps a random walk strategy can take to corver an area."	^100.</body></methods><methods><class-id>AlgoDis.RandomWalk class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:sensors:width:height:">mobile: m sensors: s width: w height: h	| rw |	rw := self new.	rw mobile: m.	rw sensors: s.	rw width: w.	rw height: h.	^rw.</body></methods><methods><class-id>AlgoDis.SystematicWalk class</class-id> <category>instance creation</category><body package="DistributedModeling-Mobile" selector="mobile:sensors:width:height:">mobile: m sensors: s width: w height: h	| rw |	rw := self new.	rw mobile: m.	rw sensors: s.	rw width: w.	rw height: h.	^rw.</body></methods><methods><class-id>AlgoDis.UIPickNodesMobileFromGPS class</class-id> <category>interface opening</category><body package="DistributedModeling-Mobile" selector="openOn:">openOn: aGeoReferencer	| win |	win := self basicNew.	win geoReferencer: aGeoReferencer.	win initialize.	^self openOn: win withSpec: #windowSpec</body></methods><methods><class-id>AlgoDis.UIPickNodesMobileFromGPS class</class-id> <category>interface opening</category><body package="DistributedModeling-Mobile" selector="openOn:with:">openOn: aGeoReferencer with: aNetworkGraph	| win |	win := self basicNew.	win geoReferencer: aGeoReferencer.	win initialize.	^self openOn: win withSpec: #windowSpec</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="sensor:">sensor: anObject	"Affects a new mobile to this event and reset time and position so that they are recomputed on their next access. This prevents inconsistents information when sensor is changed"	sensor := anObject.	position := nil.	time := nil.</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="timeReference:">timeReference: anObject	timeReference := anObject</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="findId:">findId: table	self nodeId: -1.	table do:[ :index | (index at: 4) pos = sensor ifTrue:[ self nodeId: (index at:1)-1]].</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="position:">position: anObject	position := anObject</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="eventTime">eventTime	^self subclassResponsibility</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="time:">time: anObject	time := anObject</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="color">color	^self subclassResponsibility.</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="time">time	"^self error: 'Should not call time'"	^self eventTime</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobile:">mobile: anObject	"Affects a new mobile to this event and reset time and position so that they are recomputed on their next access. This prevents inconsistents information when mobile is changed"	mobile := anObject.	position := nil.	time := nil.</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>displaying</category><body package="DistributedModeling-Mobile" selector="graphicSymbol">graphicSymbol	^self subclassResponsibility.</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	mobile := nil.	sensor := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="sensor">sensor	^sensor</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>displaying</category><body package="DistributedModeling-Mobile" selector="draw:">draw: comp	"Draws this event on comp. Colors and graphic symbol are provided by subclasses."| paint c line |	c := self graphicSymbol.	paint := ColorValue perform: self color.	comp add: ((GraphicsAttributesWrapper on: c) attributes: (GraphicsAttributes new paint: paint)).	line := LineSegment from: self eventPosition to: self sensor.	comp add: ((GraphicsAttributesWrapper on: line asStroker) attributes: (GraphicsAttributes new paint: paint)).</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobile">mobile	^mobile</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="position">position	"^self error: 'Should not call position'."	^self eventPosition</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="eventPosition">eventPosition	"Give this event's position thanks to this events' time occurence, computed in subclasses LinkCreation or LinkDestruction."	position = nil		ifTrue: 			[(self mobile halfLengthInRangeCircle: self sensor) = nil				ifFalse: 					[position := self mobile trajectory position + (self mobile trajectory movement * (self eventTime - self timeReference)).					position x: position x asInteger.					position y: position y asInteger]				ifTrue: [position := nil]].	^position</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>printing</category><body package="DistributedModeling-Mobile" selector="printString">printString	^'when: ' , self eventTime printString , ' at: ' , self eventPosition printString, ' with: ' , self sensor printString.</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="nodeId:">nodeId: anObject	nodeId := anObject</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="nodeId">nodeId	^nodeId</body></methods><methods><class-id>AlgoDis.NetworkEvent</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="timeReference">timeReference	^timeReference</body></methods><methods><class-id>AlgoDis.ExplorationStrategy</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobilePath">mobilePath	^self subclassResponsibility.</body></methods><methods><class-id>AlgoDis.ExplorationStrategy</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="draw:">draw: comp	self mobilePath draw: comp sensors: (self sensors).</body></methods><methods><class-id>AlgoDis.ExplorationStrategy</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.ExplorationStrategy</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobilePath:">mobilePath: anObject	^self subclassResponsibility.</body></methods><methods><class-id>AlgoDis.UIPickNodesMobile</class-id> <category>aspects</category><body package="DistributedModeling-Mobile" selector="destination">destination	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^destination isNil		ifTrue:			[destination := nil asValue]		ifFalse:			[destination]</body></methods><methods><class-id>AlgoDis.UIPickNodesMobile</class-id> <category>changes</category><body package="DistributedModeling-Mobile" selector="changeDestination">changeDestination	self destination value = #toSensors		ifTrue: [^self pickModel value clickForNetwork: true].	self destination value = #toMobiles		ifTrue: [^self pickModel value clickForNetwork: false]</body></methods><methods><class-id>AlgoDis.UIPickNodesMobile</class-id> <category>actions</category><body package="DistributedModeling-Mobile" selector="buildNetDrawingOnView">buildNetDrawingOnView	| net model view gc |	model := self pickModel value.	view := self laVue.	gc := view graphicsContext.	net := model buildNetAndDisplayOn: gc.	self updateGeneratorsWith: net.	model lastGraph: net.	self pickModel value: model.</body></methods><methods><class-id>AlgoDis.UIPickNodesMobile</class-id> <category>actions</category><body package="DistributedModeling-Mobile" selector="resetPoints">resetPoints	| pm model |	pm := self pickModel value.	model := self pickModel value.	pm points isNil ifFalse: [pm points value: OrderedCollection new].	pm steps isNil ifFalse: [pm steps: OrderedCollection new].	self pickModel value: pm.	model lastGraph: nil.</body></methods><methods><class-id>AlgoDis.UIPickNodesMobile</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	super initialize.	laVue := PickMobileView new.	pickModel := PickMobileModel new initialize asValue.	self laVue model: self pickModel.	laVue controller: PickMobileController new.	self destination onChangeSend: #changeDestination to: self.	self destination value: #toSensors.	self portee onChangeSend: #changePortee to: self.	self percent onChangeSend: #changePercent to: self.	self portee value: 20.	self percent value: ((20 / 398) * 100) asInteger.	self pickModel value portee: 20</body></methods><methods><class-id>AlgoDis.UIPickNodesMobile</class-id> <category>actions</category><body package="DistributedModeling-Mobile" selector="updateGeneratorsWith:">updateGeneratorsWith: net		| uiGenerators connectivity pm m mp |	uiGenerators := UINetworkGeometry allInstances.	pm := self pickModel value.	m := AlgoDis.Mobile trajectory: (AlgoDis.Trajectory position: (Point x: 10 y: 10) movement: (Point x: 10 y: 10)) range: self portee value.	mp := AlgoDis.MobilePath mobile: m steps: pm steps.	uiGenerators isEmpty		ifTrue:			[UINetworkGeometry open.			uiGenerators := UINetworkGeometry allInstances].	uiGenerators		do:			[:aGenerator | 			connectivity := net buildNetworkLocalized.			aGenerator leStyle value: #forSensors.			aGenerator theNbSystems value: net points size.			aGenerator theRadius value: self portee value.			aGenerator theSize value: self pickModel value bounds width.			aGenerator doGraphic value: true.			aGenerator execManager mobilePath: mp copy.			aGenerator execManager aPickModel: pm copy.			aGenerator leCode value: connectivity printString]</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="testNetwork">testNetworkmessages none  defined. P1 { P20 } Node (211 @ 318) (100)P2 { P3, P9, P14, P16 } Node (177 @ 561) (100)P3 { P2, P9, P14 } Node (219 @ 616) (100)P5 { P18 } Node (376 @ 483) (100)P6 { P16 } Node (148 @ 439) (100)P7 { P13 } Node (433 @ 213) (100)P9 { P2, P3, P14 } Node (264 @ 533) (100)P12 { P18 } Node (265 @ 425) (100)P13 { P7 } Node (382 @ 152) (100)P14 { P2, P3, P9, P16 } Node (184 @ 576) (100)P16 { P2, P6, P14 } Node (135 @ 496) (100)P18 { P5, P12, P19 } Node (344 @ 429) (100)P19 { P18 } Node (321 @ 335) (100)P20 { P1 } Node (124 @ 274) (100)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="sansBoucle">sansBouclemessages null search.N1 { N2 N3 N4 N5} PN2 { N1 N6 N7 N8} PN3 { N9 N10 N11 N12} PN4 { N13 N14 N15 N16} PN5 { N17 N18 N19 N20} PN6 { N21 N22 N23 N24} PN7 { N25 N26 N27 N28} PN8 { N29 N30 N31 N32} PN9 { N33 N34 N35 N36} PN10 { N37 N38 N39 N40} PN11 { N41 N42 N43 N44} PN12 { N45 N46 N47 N48} PN13 { N49 N50 N51 N52} PN14 { N53 N54 N55 N56} PN15 { N57 N58 N59 N60} PN16 { N61 N62 N63 N64} PN17 { N65 N66 N67 N68} PN18 { N69 N70 N71 N72} PN19 { N73 N74 N75 N76} PN20 { N77 N78 N79 N80} PN21 { N81 N82 N83 N84} PN22 { N85 N86 N87 N88} PN23 { N89 N90 N91 N92} PN24 { N93 N94 N95 N96} PN25 { N97 N98 N99 N100} PN26 { N101 N102 N103 N104} PN27 { N105 N106 N107 N108} PN28 { N109 N110 N111 N112} PN29 { N113 N114 N115 N116} PN30 { N117 N118 N119 N120} PN31 { N121 N122 N123 N124} PN32 { N125 N126 N127 N128} PN33 { N129 N130 N131 N132} PN34 { N133 N134 N135 N136} PN35 { N137 N138 N139 N140} PN36 { N141 N142 N143 N144} PN37 { N145 N146 N147 N148} PN38 { N149 N150 N151 N152} PN39 { N153 N154 N155 N156} PN40 { N157 N158 N159 N160} PN41 { N161 N162 N163 N164} PN42 { N165 N166 N167 N168} PN43 { N169 N170 N171 N172} PN44 { N173 N174 N175 N176} PN45 { N177 N178 N179 N180} PN46 { N181 N182 N183 N184} PN47 { N185 N186 N187 N188} PN48 { N189 N190 N191 N192} PN49 { N193 N194 N195 N196} PN50 { N197 N198 N1 N2} PN51 { N3 N4 N5 N6} PN52 { N7 N8 N9 N10} PN53 { N11 N12 N13 N14} PN54 { N15 N16 N17 N18} PN55 { N19 N20 N21 N22} PN56 { N23 N24 N25 N26} PN57 { N27 N28 N29 N30} PN58 { N31 N32 N33 N34} PN59 { N35 N36 N37 N38} PN60 { N39 N40 N41 N42} PN61 { N43 N44 N45 N46} PN62 { N47 N48 N49 N50} PN63 { N51 N52 N53 N54} PN64 { N55 N56 N57 N58} PN65 { N59 N60 N61 N62} PN66 { N63 N64 N65 N67} PN67 { N66 N68 N69 N70} PN68 { N71 N72 N73 N74} PN69 { N75 N76 N77 N78} PN70 { N79 N80 N81 N82} PN71 { N83 N84 N85 N86} PN72 { N87 N88 N89 N90} PN73 { N91 N92 N93 N94} PN74 { N95 N96 N97 N98} PN75 { N99 N100 N101 N102} PN76 { N103 N104 N105 N106} PN77 { N107 N108 N109 N110} PN78 { N111 N112 N113 N114} PN79 { N115 N116 N117 N118} PN80 { N119 N120 N121 N122} PN81 { N123 N124 N125 N126} PN82 { N127 N128 N129 N130} PN83 { N131 N132 N133 N134} PN84 { N135 N136 N137 N138} PN85 { N139 N140 N141 N142} PN86 { N143 N144 N145 N146} PN87 { N147 N148 N149 N150} PN88 { N151 N152 N153 N154} PN89 { N155 N156 N157 N158} PN90 { N159 N160 N161 N162} PN91 { N163 N164 N165 N166} PN92 { N167 N168 N169 N170} PN93 { N171 N172 N173 N174} PN94 { N175 N176 N177 N178} PN95 { N179 N180 N181 N182} PN96 { N183 N184 N185 N186} PN97 { N187 N188 N189 N190} PN98 { N191 N192 N193 N194} PN99 { N195 N196 N197 N198} PN100 { N1 N2 N3 N4} PN101 { N5 N6 N7 N8} PN102 { N9 N10 N11 N12} PN103 { N13 N14 N15 N16} PN104 { N17 N18 N19 N20} PN105 { N21 N22 N23 N24} PN106 { N25 N26 N27 N28} PN107 { N29 N30 N31 N32} PN108 { N33 N34 N35 N36} PN109 { N37 N38 N39 N40} PN110 { N41 N42 N43 N44} PN111 { N45 N46 N47 N48} PN112 { N49 N50 N51 N52} PN113 { N53 N54 N55 N56} PN114 { N57 N58 N59 N60} PN115 { N61 N62 N63 N64} PN116 { N65 N66 N67 N68} PN117 { N69 N70 N71 N72} PN118 { N73 N74 N75 N76} PN119 { N77 N78 N79 N80} PN120 { N81 N82 N83 N84} PN121 { N85 N86 N87 N88} PN122 { N89 N90 N91 N92} PN123 { N93 N94 N95 N96} PN124 { N97 N98 N99 N100} PN125 { N101 N102 N103 N104} PN126 { N105 N106 N107 N108} PN127 { N109 N110 N111 N112} PN128 { N113 N114 N115 N116} PN129 { N117 N118 N119 N120} PN130 { N121 N122 N123 N124} PN131 { N125 N126 N127 N128} PN132 { N129 N130 N131 N133} PN133 { N132 N134 N135 N136} PN134 { N137 N138 N139 N140} PN135 { N141 N142 N143 N144} PN136 { N145 N146 N147 N148} PN137 { N149 N150 N151 N152} PN138 { N153 N154 N155 N156} PN139 { N157 N158 N159 N160} PN140 { N161 N162 N163 N164} PN141 { N165 N166 N167 N168} PN142 { N169 N170 N171 N172} PN143 { N173 N174 N175 N176} PN144 { N177 N178 N179 N180} PN145 { N181 N182 N183 N184} PN146 { N185 N186 N187 N188} PN147 { N189 N190 N191 N192} PN148 { N193 N194 N195 N196} PN149 { N197 N198 N1 N2} PN150 { N3 N4 N5 N6} PN151 { N7 N8 N9 N10} PN152 { N11 N12 N13 N14} PN153 { N15 N16 N17 N18} PN154 { N19 N20 N21 N22} PN155 { N23 N24 N25 N26} PN156 { N27 N28 N29 N30} PN157 { N31 N32 N33 N34} PN158 { N35 N36 N37 N38} PN159 { N39 N40 N41 N42} PN160 { N43 N44 N45 N46} PN161 { N47 N48 N49 N50} PN162 { N51 N52 N53 N54} PN163 { N55 N56 N57 N58} PN164 { N59 N60 N61 N62} PN165 { N63 N64 N65 N66} PN166 { N67 N68 N69 N70} PN167 { N71 N72 N73 N74} PN168 { N75 N76 N77 N78} PN169 { N79 N80 N81 N82} PN170 { N83 N84 N85 N86} PN171 { N87 N88 N89 N90} PN172 { N91 N92 N93 N94} PN173 { N95 N96 N97 N98} PN174 { N99 N100 N101 N102} PN175 { N103 N104 N105 N106} PN176 { N107 N108 N109 N110} PN177 { N111 N112 N113 N114} PN178 { N115 N116 N117 N118} PN179 { N119 N120 N121 N122} PN180 { N123 N124 N125 N126} PN181 { N127 N128 N129 N130} PN182 { N131 N132 N133 N134} PN183 { N135 N136 N137 N138} PN184 { N139 N140 N141 N142} PN185 { N143 N144 N145 N146} PN186 { N147 N148 N149 N150} PN187 { N151 N152 N153 N154} PN188 { N155 N156 N157 N158} PN189 { N159 N160 N161 N162} PN190 { N163 N164 N165 N166} PN191 { N167 N168 N169 N170} PN192 { N171 N172 N173 N174} PN193 { N175 N176 N177 N178} PN194 { N179 N180 N181 N182} PN195 { N183 N184 N185 N186} PN196 { N187 N188 N189 N190} PN197 { N191 N192 N193 N194} PN198 { N195 N196 N197 N1} P</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="ring3">ring3messages none  defined. P1 { P2 } Node (22 @ 243) (78)P2{ P3} Node (310 @ 247) (78)P3 { P1, } Node (76 @ 233) (78)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cellNetwork63">cellNetwork63messages none  defined. Px73y82 { Px72y82, Px73y81, Px74y82, Px73y83 } CellNode (73 @ 82) (20)Px65y33 { Px64y33, Px65y32, Px65y34 } CellNode (65 @ 33) (20)Px50y23 { Px51y23, Px50y22 } CellNode (50 @ 23) (20)Px64y32 { Px64y33, Px65y32, Px63y32, Px64y31 } CellNode (64 @ 32) (20)Px3y81 { Px3y82, Px4y81, Px2y81, Px3y80 } CellNode (3 @ 81) (20)Px42y82 { Px42y83, Px43y82, Px41y82, Px42y81 } CellNode (42 @ 82) (20)Px2y80 { Px1y80, Px2y79, Px2y81, Px3y80 } CellNode (2 @ 80) (20)Px41y81 { Px41y82, Px42y81, Px40y81, Px41y80 } CellNode (41 @ 81) (20)Px28y71 { Px28y72, Px27y71, Px29y71, Px28y70 } CellNode (28 @ 71) (20)Px10y81 { Px10y80, Px9y81, Px10y82, Px11y81 } CellNode (10 @ 81) (20)Px27y70 { Px28y70, Px26y70, Px27y71 } CellNode (27 @ 70) (20)Px65y76 { Px66y76, Px65y77, Px65y75, Px64y76 } CellNode (65 @ 76) (20)Px57y27 { Px58y27, Px57y26, Px57y28 } CellNode (57 @ 27) (20)Px42y17 { Px41y17, Px42y18, Px43y17 } CellNode (42 @ 17) (20)Px68y56 { Px69y56, Px68y57 } CellNode (68 @ 56) (20)Px34y76 { Px35y76, Px34y77, Px33y76, Px34y75 } CellNode (34 @ 76) (20)Px9y84 { Px10y84, Px8y84, Px9y83 } CellNode (9 @ 84) (20)Px33y75 { Px33y74, Px32y75, Px33y76, Px34y75 } CellNode (33 @ 75) (20)Px36y55 { Px36y54, Px35y55, Px36y56, Px37y55 } CellNode (36 @ 55) (20)Px39y35 { Px38y35, Px39y34, Px39y36, Px40y35 } CellNode (39 @ 35) (20)Px37y56 { Px37y57, Px38y56, Px36y56, Px37y55 } CellNode (37 @ 56) (20)Px16y84 { Px15y84, Px16y83, Px17y84 } CellNode (16 @ 84) (20)Px75y80 { Px76y80, Px74y80, Px75y81, Px75y79 } CellNode (75 @ 80) (20)Px66y30 { Px66y29, Px66y31, Px67y30, Px65y30 } CellNode (66 @ 30) (20)Px47y60 { Px47y59, Px48y60, Px46y60, Px47y61 } CellNode (47 @ 60) (20)Px32y50 { Px31y50, Px32y49, Px32y51, Px33y50 } CellNode (32 @ 50) (20)Px35y30 { Px36y30, Px35y29, Px35y31, Px34y30 } CellNode (35 @ 30) (20)Px80y84 { Px79y84, Px80y83, Px81y84 } CellNode (80 @ 84) (20)Px67y74 { Px68y74, Px66y74, Px67y75, Px67y73 } CellNode (67 @ 74) (20)Px55y44 { Px54y44, Px55y43, Px56y44 } CellNode (55 @ 44) (20)Px58y24 { Px58y23, Px59y24, Px57y24 } CellNode (58 @ 24) (20)Px40y34 { Px39y34, Px41y34, Px40y33, Px40y35 } CellNode (40 @ 34) (20)Px66y73 { Px66y72, Px66y74, Px67y73, Px65y73 } CellNode (66 @ 73) (20)Px35y73 { Px35y74, Px35y72, Px34y73, Px36y73 } CellNode (35 @ 73) (20)Px38y53 { Px39y53, Px38y52, Px37y53, Px38y54 } CellNode (38 @ 53) (20)Px49y82 { Px50y82, Px48y82, Px49y81, Px49y83 } CellNode (49 @ 82) (20)Px72y78 { Px71y78, Px72y79, Px73y78, Px72y77 } CellNode (72 @ 78) (20)Px18y82 { Px18y83, Px19y82, Px18y81, Px17y82 } CellNode (18 @ 82) (20)Px64y29 { Px64y28, Px64y30, Px65y29, Px63y29 } CellNode (64 @ 29) (20)Px63y28 { Px63y29, Px64y28, Px62y28 } CellNode (63 @ 28) (20)Px2y77 { Px3y77, Px1y77, Px2y78, Px2y76 } CellNode (2 @ 77) (20)Px41y78 { Px40y78, Px41y79, Px41y77, Px42y78 } CellNode (41 @ 78) (20)Px47y38 { Px47y37, Px46y38 } CellNode (47 @ 38) (20)Px40y77 { Px40y78, Px41y77, Px40y76, Px39y77 } CellNode (40 @ 77) (20)Px46y37 { Px46y38, Px47y37, Px46y36, Px45y37 } CellNode (46 @ 37) (20)Px1y76 { Px2y76, Px1y77, Px1y75 } CellNode (1 @ 76) (20)Px27y67 { Px26y67, Px27y66, Px28y67 } CellNode (27 @ 67) (20)Px32y28 { Px33y28, Px32y29, Px32y27, Px31y28 } CellNode (32 @ 28) (20)Px26y66 { Px26y67, Px27y66, Px25y66, Px26y65 } CellNode (26 @ 66) (20)Px49y6 { Px48y6, Px49y5, Px50y6 } CellNode (49 @ 6) (20)Px82y82 { Px81y82, Px83y82, Px82y83, Px82y81 } CellNode (82 @ 82) (20)Px69y72 { Px69y71, Px70y72, Px68y72, Px69y73 } CellNode (69 @ 72) (20)Px51y82 { Px50y82, Px52y82, Px51y81, Px51y83 } CellNode (51 @ 82) (20)Px57y42 { Px56y42, Px58y42, Px57y41, Px57y43 } CellNode (57 @ 42) (20)Px68y71 { Px69y71, Px67y71, Px68y70, Px68y72 } CellNode (68 @ 71) (20)Px50y81 { Px50y82, Px49y81, Px51y81, Px50y80 } CellNode (50 @ 81) (20)Px41y31 { Px41y32, Px40y31 } CellNode (41 @ 31) (20)Px37y71 { Px38y71, Px36y71, Px37y72, Px37y70 } CellNode (37 @ 71) (20)Px56y41 { Px56y42, Px57y41, Px55y41, Px56y40 } CellNode (56 @ 41) (20)Px36y70 { Px36y69, Px36y71, Px37y70, Px35y70 } CellNode (36 @ 70) (20)Px39y50 { Px39y49, Px39y51, Px40y50, Px38y50 } CellNode (39 @ 50) (20)Px74y76 { Px74y77, Px74y75, Px75y76, Px73y76 } CellNode (74 @ 76) (20)Px48y9 { Px47y9, Px49y9, Px48y10 } CellNode (48 @ 9) (20)Px73y75 { Px74y75, Px72y75, Px73y74, Px73y76 } CellNode (73 @ 75) (20)Px42y32 { Px41y32, Px42y33 } CellNode (42 @ 32) (20)Px50y16 { Px50y17, Px51y16, Px50y15, Px49y16 } CellNode (50 @ 16) (20)Px46y56 { Px45y56, Px47y56, Px46y57 } CellNode (46 @ 56) (20)Px42y75 { Px42y76, Px43y75, Px42y74, Px41y75 } CellNode (42 @ 75) (20)Px3y74 { Px2y74, Px3y75, Px4y74 } CellNode (3 @ 74) (20)Px48y35 { Px48y36, Px49y35, Px48y34, Px47y35 } CellNode (48 @ 35) (20)Px33y25 { Px32y25, Px34y25, Px33y26 } CellNode (33 @ 25) (20)Px34y26 { Px34y25, Px33y26 } CellNode (34 @ 26) (20)Px22y61 { Px22y62, Px21y61, Px23y61 } CellNode (22 @ 61) (20)Px28y64 { Px28y63, Px27y64, Px28y65, Px29y64 } CellNode (28 @ 64) (20)Px10y74 { Px9y74, Px11y74, Px10y73, Px10y75 } CellNode (10 @ 74) (20)Px65y26 { Px64y26, Px65y25, Px65y27 } CellNode (65 @ 26) (20)Px45y55 { Px45y56 } CellNode (45 @ 55) (20)Px49y36 { Px50y36, Px48y36, Px49y37, Px49y35 } CellNode (49 @ 36) (20)Px25y84 { Px24y84, Px25y83, Px26y84 } CellNode (25 @ 84) (20)Px53y3 { Px52y3 } CellNode (53 @ 3) (20)Px49y79 { Px48y79, Px50y79, Px49y78, Px49y80 } CellNode (49 @ 79) (20)Px34y69 { Px34y68, Px33y69, Px34y70, Px35y69 } CellNode (34 @ 69) (20)Px37y49 { Px37y48, Px36y49, Px37y50, Px38y49 } CellNode (37 @ 49) (20)Px29y65 { Px29y66, Px28y65, Px30y65, Px29y64 } CellNode (29 @ 65) (20)Px48y78 { Px47y78, Px48y79, Px49y78, Px48y77 } CellNode (48 @ 78) (20)Px51y17 { Px50y17, Px51y18, Px51y16 } CellNode (51 @ 17) (20)Px17y78 { Px17y79, Px16y78, Px17y77, Px18y78 } CellNode (17 @ 78) (20)Px11y75 { Px11y76, Px11y74, Px12y75, Px10y75 } CellNode (11 @ 75) (20)Px50y59 { Px50y58, Px50y60, Px51y59, Px49y59 } CellNode (50 @ 59) (20)Px59y40 { Px59y41, Px58y40, Px60y40, Px59y39 } CellNode (59 @ 40) (20)Px41y50 { Px41y49, Px41y51, Px42y50, Px40y50 } CellNode (41 @ 50) (20)Px52y6 { Px52y5 } CellNode (52 @ 6) (20)Px76y74 { Px77y74, Px76y75, Px75y74, Px76y73 } CellNode (76 @ 74) (20)Px75y73 { Px75y74, Px76y73, Px75y72, Px74y73 } CellNode (75 @ 73) (20)Px52y14 { Px52y13, Px51y14, Px52y15, Px53y14 } CellNode (52 @ 14) (20)Px44y73 { Px44y72, Px45y73, Px43y73, Px44y74 } CellNode (44 @ 73) (20)Px58y82 { Px58y81, Px57y82, Px58y83 } CellNode (58 @ 82) (20)Px43y72 { Px44y72, Px42y72, Px43y71, Px43y73 } CellNode (43 @ 72) (20)Px81y78 { Px82y78, Px81y79, Px80y78, Px81y77 } CellNode (81 @ 78) (20)Px27y82 { Px27y83, Px27y81, Px26y82, Px28y82 } CellNode (27 @ 82) (20)Px12y72 { Px12y73, Px13y72, Px11y72, Px12y71 } CellNode (12 @ 72) (20)Px50y78 { Px50y77, Px51y78, Px49y78, Px50y79 } CellNode (50 @ 78) (20)Px53y58 { Px53y57, Px52y58 } CellNode (53 @ 58) (20)Px56y38 { Px56y37, Px57y38, Px55y38, Px56y39 } CellNode (56 @ 38) (20)Px59y18 { Px59y19, Px59y17, Px60y18 } CellNode (59 @ 18) (20)Px57y9 { Px58y9, Px57y10, Px56y9, Px57y8 } CellNode (57 @ 9) (20)Px55y37 { Px54y37, Px56y37, Px55y38 } CellNode (55 @ 37) (20)Px52y57 { Px53y57, Px52y56, Px51y57, Px52y58 } CellNode (52 @ 57) (20)Px39y47 { Px38y47, Px40y47, Px39y46, Px39y48 } CellNode (39 @ 47) (20)Px35y66 { Px35y67, Px36y66, Px34y66, Px35y65 } CellNode (35 @ 66) (20)Px38y46 { Px38y47, Px39y46, Px37y46, Px38y45 } CellNode (38 @ 46) (20)Px36y67 { Px35y67, Px36y68, Px36y66, Px37y67 } CellNode (36 @ 67) (20)Px19y76 { Px19y77, Px18y76, Px20y76, Px19y75 } CellNode (19 @ 76) (20)Px18y75 { Px18y76, Px19y75, Px18y74, Px17y75 } CellNode (18 @ 75) (20)Px91y82 { Px92y82, Px90y82, Px91y83, Px91y81 } CellNode (91 @ 82) (20)Px90y81 { Px90y82, Px91y81, Px90y80, Px89y81 } CellNode (90 @ 81) (20)Px78y72 { Px77y72, Px78y71, Px78y73 } CellNode (78 @ 72) (20)Px66y42 { Px66y43, Px67y42, Px66y41 } CellNode (66 @ 42) (20)Px51y32 { Px52y32, Px50y32, Px51y31, Px51y33 } CellNode (51 @ 32) (20)Px54y12 { Px55y12, Px54y11, Px53y12, Px54y13 } CellNode (54 @ 12) (20)Px50y31 { Px50y32, Px51y31, Px49y31, Px50y30 } CellNode (50 @ 31) (20)Px7y70 { Px7y69, Px8y70 } CellNode (7 @ 70) (20)Px65y41 { Px64y41, Px66y41, Px65y40 } CellNode (65 @ 41) (20)Px45y70 { Px46y70 } CellNode (45 @ 70) (20)Px31y61 { Px32y61, Px31y60, Px31y62 } CellNode (31 @ 61) (20)Px77y71 { Px77y70, Px77y72, Px78y71, Px76y71 } CellNode (77 @ 71) (20)Px29y80 { Px30y80, Px28y80, Px29y81, Px29y79 } CellNode (29 @ 80) (20)Px14y70 { Px14y69, Px15y70, Px14y71, Px13y70 } CellNode (14 @ 70) (20)Px58y36 { Px57y36, Px59y36, Px58y35, Px58y37 } CellNode (58 @ 36) (20)Px40y46 { Px41y46, Px39y46, Px40y47, Px40y45 } CellNode (40 @ 46) (20)Px57y35 { Px57y36, Px58y35, Px56y35, Px57y34 } CellNode (57 @ 35) (20)Px42y25 { Px42y24, Px43y25 } CellNode (42 @ 25) (20)Px38y65 { Px38y64 } CellNode (38 @ 65) (20)Px34y84 { Px33y84, Px34y83, Px35y84 } CellNode (34 @ 84) (20)Px20y75 { Px21y75, Px19y75, Px20y76, Px20y74 } CellNode (20 @ 75) (20)Px65y84 { Px65y83, Px64y84, Px66y84 } CellNode (65 @ 84) (20)Px51y75 { Px51y76, Px52y75, Px50y75, Px51y74 } CellNode (51 @ 75) (20)Px74y69 { Px75y69, Px73y69, Px74y68, Px74y70 } CellNode (74 @ 69) (20)Px62y39 { Px62y40, Px63y39, Px62y38, Px61y39 } CellNode (62 @ 39) (20)Px46y49 { Px46y48 } CellNode (46 @ 49) (20)Px49y29 { Px49y30, Px50y29, Px49y28, Px48y29 } CellNode (49 @ 29) (20)Px93y80 { Px93y79, Px94y80, Px93y81, Px92y80 } CellNode (93 @ 80) (20)Px57y78 { Px56y78, Px57y77, Px57y79 } CellNode (57 @ 78) (20)Px26y78 { Px26y77, Px25y78, Px26y79, Px27y78 } CellNode (26 @ 78) (20)Px53y30 { Px54y30, Px52y30, Px53y31, Px53y29 } CellNode (53 @ 30) (20)Px56y10 { Px56y11, Px55y10, Px56y9, Px57y10 } CellNode (56 @ 10) (20)Px70y64 { Px70y65, Px71y64 } CellNode (70 @ 64) (20)Px68y83 { Px69y83, Px68y84, Px67y83, Px68y82 } CellNode (68 @ 83) (20)Px53y73 { Px54y73, Px52y73, Px53y74, Px53y72 } CellNode (53 @ 73) (20)Px67y82 { Px67y83, Px68y82, Px67y81, Px66y82 } CellNode (67 @ 82) (20)Px59y33 { Px59y34, Px60y33, Px58y33, Px59y32 } CellNode (59 @ 33) (20)Px41y43 { Px40y43, Px41y42, Px42y43, Px41y44 } CellNode (41 @ 43) (20)Px52y72 { Px51y72, Px52y73, Px53y72 } CellNode (52 @ 72) (20)Px36y82 { Px36y81, Px37y82, Px36y83, Px35y82 } CellNode (36 @ 82) (20)Px39y62 { Px39y61 } CellNode (39 @ 62) (20)Px35y81 { Px36y81, Px34y81, Px35y80, Px35y82 } CellNode (35 @ 81) (20)Px21y72 { Px22y72, Px20y72, Px21y71, Px21y73 } CellNode (21 @ 72) (20)Px77y68 { Px77y69, Px76y68, Px78y68, Px77y67 } CellNode (77 @ 68) (20)Px65y38 { Px64y38, Px65y37, Px65y39 } CellNode (65 @ 38) (20)Px50y28 { Px50y27, Px50y29, Px49y28, Px51y28 } CellNode (50 @ 28) (20)Px64y37 { Px63y37, Px64y38, Px65y37, Px64y36 } CellNode (64 @ 37) (20)Px76y67 { Px76y68, Px77y67, Px75y67, Px76y66 } CellNode (76 @ 67) (20)Px44y23 { Px44y22, Px43y23, Px44y24, Px45y23 } CellNode (44 @ 23) (20)Px59y76 { Px59y75, Px60y76 } CellNode (59 @ 76) (20)Px32y36 { Px32y35 } CellNode (32 @ 36) (20)Px28y76 { Px29y76, Px27y76, Px28y75, Px28y77 } CellNode (28 @ 76) (20)Px27y75 { Px27y76, Px28y75, Px27y74, Px26y75 } CellNode (27 @ 75) (20)Px60y32 { Px60y31, Px61y32, Px59y32, Px60y33 } CellNode (60 @ 32) (20)Px71y61 { Px71y60, Px70y61, Px72y61 } CellNode (71 @ 61) (20)Px69y80 { Px69y79, Px69y81, Px70y80, Px68y80 } CellNode (69 @ 80) (20)Px43y41 { Px42y41, Px43y42, Px43y40 } CellNode (43 @ 41) (20)Px42y40 { Px42y41, Px43y40, Px41y40, Px42y39 } CellNode (42 @ 40) (20)Px38y80 { Px37y80, Px39y80, Px38y79, Px38y81 } CellNode (38 @ 80) (20)Px23y70 { Px22y70, Px23y71, Px24y70 } CellNode (23 @ 70) (20)Px60y75 { Px60y76, Px60y74, Px61y75, Px59y75 } CellNode (60 @ 75) (20)Px74y84 { Px73y84, Px74y83, Px75y84 } CellNode (74 @ 84) (20)Px51y25 { Px50y25, Px51y24 } CellNode (51 @ 25) (20)Px43y84 { Px42y84, Px43y83, Px44y84 } CellNode (43 @ 84) (20)Px4y83 { Px4y84, Px5y83, Px4y82, Px3y83 } CellNode (4 @ 83) (20)Px12y84 { Px11y84, Px13y84, Px12y83 } CellNode (12 @ 84) (20)Px29y73 { Px29y74, Px30y73, Px29y72, Px28y73 } CellNode (29 @ 73) (20)Px11y83 { Px10y83, Px11y82, Px11y84, Px12y83 } CellNode (11 @ 83) (20)Px67y79 { Px67y78, Px67y80, Px68y79, Px66y79 } CellNode (67 @ 79) (20)Px52y69 { Px53y69, Px51y69, Px52y68, Px52y70 } CellNode (52 @ 69) (20)Px66y78 { Px67y78, Px65y78, Px66y77, Px66y79 } CellNode (66 @ 78) (20)Px51y68 { Px51y69, Px52y68, Px50y68 } CellNode (51 @ 68) (20)Px43y19 { Px42y19, Px43y18 } CellNode (43 @ 19) (20)Px58y29 { Px59y29, Px58y28, Px57y29, Px58y30 } CellNode (58 @ 29) (20)Px35y78 { Px36y78, Px34y78, Px35y79, Px35y77 } CellNode (35 @ 78) (20)Px27y29 { Px26y29, Px27y28, Px28y29 } CellNode (27 @ 29) (20)Px38y58 { Px38y59, Px39y58, Px38y57, Px37y58 } CellNode (38 @ 58) (20)Px26y28 { Px25y28, Px26y27, Px26y29, Px27y28 } CellNode (26 @ 28) (20)Px40y39 { Px41y39, Px40y40 } CellNode (40 @ 39) (20)Px62y30 { Px62y31, Px61y30, Px62y29, Px63y30 } CellNode (62 @ 30) (20)Px69y58 { Px70y58, Px68y58, Px69y57, Px69y59 } CellNode (69 @ 58) (20)Px77y83 { Px78y83, Px77y82, Px77y84, Px76y83 } CellNode (77 @ 83) (20)Px62y73 { Px63y73, Px61y73, Px62y74, Px62y72 } CellNode (62 @ 73) (20)Px76y82 { Px77y82, Px75y82, Px76y81, Px76y83 } CellNode (76 @ 82) (20)Px61y72 { Px61y73, Px60y72, Px62y72 } CellNode (61 @ 72) (20)Px53y23 { Px53y24, Px54y23, Px52y23, Px53y22 } CellNode (53 @ 23) (20)Px6y81 { Px6y80, Px7y81, Px5y81, Px6y82 } CellNode (6 @ 81) (20)Px37y33 { Px37y34, Px36y33, Px38y33, Px37y32 } CellNode (37 @ 33) (20)Px5y80 { Px6y80, Px4y80, Px5y79, Px5y81 } CellNode (5 @ 80) (20)Px36y32 { Px36y31, Px35y32, Px36y33, Px37y32 } CellNode (36 @ 32) (20)Px71y58 { Px71y59, Px70y58, Px72y58, Px71y57 } CellNode (71 @ 58) (20)Px33y52 { Px33y51, Px34y52, Px33y53 } CellNode (33 @ 52) (20)Px70y57 { Px70y58, Px69y57, Px71y57, Px70y56 } CellNode (70 @ 57) (20)Px13y81 { Px13y82, Px13y80, Px12y81, Px14y81 } CellNode (13 @ 81) (20)Px69y77 { Px70y77, Px68y77, Px69y78, Px69y76 } CellNode (69 @ 77) (20)Px54y67 { Px53y67, Px54y68, Px55y67 } CellNode (54 @ 67) (20)Px44y81 { Px43y81, Px44y82, Px45y81, Px44y80 } CellNode (44 @ 81) (20)Px42y37 { Px42y36, Px43y37, Px41y37, Px42y38 } CellNode (42 @ 37) (20)Px45y17 { Px46y17, Px45y18 } CellNode (45 @ 17) (20)Px59y26 { Px59y25 } CellNode (59 @ 26) (20)Px41y36 { Px42y36, Px41y35, Px40y36, Px41y37 } CellNode (41 @ 36) (20)Px22y66 { Px21y66, Px23y66, Px22y65, Px22y67 } CellNode (22 @ 66) (20)Px36y75 { Px37y75, Px36y74, Px35y75, Px36y76 } CellNode (36 @ 75) (20)Px39y55 { Px40y55, Px39y54, Px38y55, Px39y56 } CellNode (39 @ 55) (20)Px48y62 { Px48y63, Px49y62, Px47y62, Px48y61 } CellNode (48 @ 62) (20)Px30y72 { Px30y71, Px31y72, Px29y72, Px30y73 } CellNode (30 @ 72) (20)Px37y76 { Px37y75, Px38y76, Px37y77, Px36y76 } CellNode (37 @ 76) (20)Px19y84 { Px20y84, Px19y83, Px18y84 } CellNode (19 @ 84) (20)Px45y82 { Px45y83, Px46y82, Px44y82, Px45y81 } CellNode (45 @ 82) (20)Px68y76 { Px68y77, Px69y76, Px67y76, Px68y75 } CellNode (68 @ 76) (20)Px3y79 { Px4y79, Px2y79, Px3y78, Px3y80 } CellNode (3 @ 79) (20)Px10y79 { Px10y80, Px9y79, Px11y79, Px10y78 } CellNode (10 @ 79) (20)Px64y71 { Px65y71, Px63y71, Px64y72, Px64y70 } CellNode (64 @ 71) (20)Px78y80 { Px79y80, Px78y81, Px77y80, Px78y79 } CellNode (78 @ 80) (20)Px52y41 { Px53y41, Px52y40 } CellNode (52 @ 41) (20)Px40y11 { Px40y12 } CellNode (40 @ 11) (20)Px54y20 { Px53y20, Px54y19 } CellNode (54 @ 20) (20)Px32y70 { Px31y70, Px32y71, Px32y69, Px33y70 } CellNode (32 @ 70) (20)Px35y50 { Px34y50, Px36y50, Px35y49, Px35y51 } CellNode (35 @ 50) (20)Px47y80 { Px47y79, Px48y80, Px47y81, Px46y80 } CellNode (47 @ 80) (20)Px61y26 { Px62y26, Px61y27, Px61y25 } CellNode (61 @ 26) (20)Px83y84 { Px84y84, Px83y83, Px82y84 } CellNode (83 @ 84) (20)Px60y25 { Px60y24, Px61y25, Px59y25 } CellNode (60 @ 25) (20)Px52y84 { Px53y84, Px52y83, Px51y84 } CellNode (52 @ 84) (20)Px44y35 { Px43y35, Px44y36, Px44y34, Px45y35 } CellNode (44 @ 35) (20)Px47y15 { Px47y16, Px48y15, Px47y14 } CellNode (47 @ 15) (20)Px43y34 { Px43y35, Px44y34, Px42y34, Px43y33 } CellNode (43 @ 34) (20)Px40y54 { Px40y55, Px39y54, Px41y54, Px40y53 } CellNode (40 @ 54) (20)Px24y64 { Px25y64, Px24y65, Px23y64, Px24y63 } CellNode (24 @ 64) (20)Px38y73 { Px38y74, Px39y73, Px37y73, Px38y72 } CellNode (38 @ 73) (20)Px23y63 { Px23y64, Px24y63, Px23y62, Px22y63 } CellNode (23 @ 63) (20)Px76y79 { Px76y80, Px77y79, Px75y79, Px76y78 } CellNode (76 @ 79) (20)Px20y83 { Px20y84, Px19y83, Px21y83, Px20y82 } CellNode (20 @ 83) (20)Px39y74 { Px38y74, Px40y74, Px39y73, Px39y75 } CellNode (39 @ 74) (20)Px67y29 { Px66y29, Px67y30 } CellNode (67 @ 29) (20)Px52y19 { Px53y19, Px52y18, Px51y19 } CellNode (52 @ 19) (20)Px21y84 { Px20y84, Px21y83, Px22y84 } CellNode (21 @ 84) (20)Px5y77 { Px6y77, Px4y77, Px5y78, Px5y76 } CellNode (5 @ 77) (20)Px36y29 { Px36y30, Px35y29, Px37y29 } CellNode (36 @ 29) (20)Px32y48 { Px33y48, Px32y49 } CellNode (32 @ 48) (20)Px43y77 { Px43y78, Px44y77, Px42y77, Px43y76 } CellNode (43 @ 77) (20)Px47y58 { Px48y58, Px47y59, Px47y57, Px46y58 } CellNode (47 @ 58) (20)Px44y78 { Px45y78, Px43y78, Px44y79, Px44y77 } CellNode (44 @ 78) (20)Px12y77 { Px11y77, Px12y76, Px13y77, Px12y78 } CellNode (12 @ 77) (20)Px75y78 { Px74y78, Px75y77, Px75y79, Px76y78 } CellNode (75 @ 78) (20)Px46y14 { Px47y14, Px46y13 } CellNode (46 @ 14) (20)Px4y76 { Px4y75, Px4y77, Px5y76, Px3y76 } CellNode (4 @ 76) (20)Px35y28 { Px34y28, Px35y29 } CellNode (35 @ 28) (20)Px86y83 { Px87y83, Px85y83, Px86y84, Px86y82 } CellNode (86 @ 83) (20)Px71y73 { Px72y73, Px71y72, Px71y74, Px70y73 } CellNode (71 @ 73) (20)Px70y72 { Px71y72, Px69y72, Px70y71, Px70y73 } CellNode (70 @ 72) (20)Px62y23 { Px63y23, Px62y24, Px61y23 } CellNode (62 @ 23) (20)Px54y82 { Px54y83, Px53y82, Px55y82, Px54y81 } CellNode (54 @ 82) (20)Px57y62 { Px57y61 } CellNode (57 @ 62) (20)Px42y52 { Px42y53, Px41y52, Px42y51 } CellNode (42 @ 52) (20)Px53y81 { Px53y82, Px54y81, Px53y80, Px52y81 } CellNode (53 @ 81) (20)Px48y12 { Px49y12, Px48y13, Px48y11 } CellNode (48 @ 12) (20)Px45y32 { Px45y33, Px46y32, Px45y31 } CellNode (45 @ 32) (20)Px22y81 { Px22y80, Px21y81, Px22y82, Px23y81 } CellNode (22 @ 81) (20)Px49y13 { Px49y14, Px48y13, Px50y13, Px49y12 } CellNode (49 @ 13) (20)Px25y61 { Px26y61, Px24y61, Px25y62 } CellNode (25 @ 61) (20)Px31y23 { Px31y24 } CellNode (31 @ 23) (20)Px77y76 { Px78y76, Px77y75, Px76y76, Px77y77 } CellNode (77 @ 76) (20)Px51y37 { Px52y37, Px50y37, Px51y36 } CellNode (51 @ 37) (20)Px54y17 { Px54y18, Px53y17, Px55y17, Px54y16 } CellNode (54 @ 17) (20)Px50y36 { Px49y36, Px50y37, Px51y36, Px50y35 } CellNode (50 @ 36) (20)Px46y76 { Px47y76, Px45y76, Px46y77, Px46y75 } CellNode (46 @ 76) (20)Px49y56 { Px50y56, Px48y56, Px49y57 } CellNode (49 @ 56) (20)Px45y75 { Px45y74, Px45y76, Px46y75, Px44y75 } CellNode (45 @ 75) (20)Px31y66 { Px31y65, Px32y66, Px30y66, Px31y67 } CellNode (31 @ 66) (20)Px6y74 { Px7y74, Px6y75 } CellNode (6 @ 74) (20)Px53y16 { Px52y16, Px54y16, Px53y17 } CellNode (53 @ 16) (20)Px7y75 { Px7y74, Px8y75, Px6y75, Px7y76 } CellNode (7 @ 75) (20)Px28y84 { Px27y84, Px28y83, Px29y84 } CellNode (28 @ 84) (20)Px13y74 { Px13y75, Px14y74, Px13y73, Px12y74 } CellNode (13 @ 74) (20)Px30y65 { Px31y65, Px29y65, Px30y64, Px30y66 } CellNode (30 @ 65) (20)Px34y46 { Px35y46, Px34y47, Px34y45 } CellNode (34 @ 46) (20)Px14y75 { Px13y75, Px15y75, Px14y74, Px14y76 } CellNode (14 @ 75) (20)Px37y69 { Px38y69, Px37y68, Px36y69, Px37y70 } CellNode (37 @ 69) (20)Px72y70 { Px72y71, Px73y70, Px71y70, Px72y69 } CellNode (72 @ 70) (20)Px60y40 { Px59y40, Px61y40, Px60y39 } CellNode (60 @ 40) (20)Px56y80 { Px56y81, Px57y80, Px55y80, Px56y79 } CellNode (56 @ 80) (20)Px41y70 { Px40y70, Px41y69 } CellNode (41 @ 70) (20)Px47y30 { Px46y30, Px47y29, Px47y31, Px48y30 } CellNode (47 @ 30) (20)Px92y84 { Px91y84, Px92y83, Px93y84 } CellNode (92 @ 84) (20)Px68y45 { Px67y45, Px68y44, Px68y46 } CellNode (68 @ 45) (20)Px53y35 { Px53y34, Px53y36, Px54y35, Px52y35 } CellNode (53 @ 35) (20)Px60y83 { Px60y84 } CellNode (60 @ 83) (20)Px52y34 { Px53y34, Px52y33, Px51y34, Px52y35 } CellNode (52 @ 34) (20)Px55y14 { Px55y15, Px56y14 } CellNode (55 @ 14) (20)Px9y73 { Px8y73, Px10y73, Px9y72, Px9y74 } CellNode (9 @ 73) (20)Px8y72 { Px8y73, Px8y71, Px9y72 } CellNode (8 @ 72) (20)Px56y15 { Px56y14, Px57y15, Px56y16, Px55y15 } CellNode (56 @ 15) (20)Px35y43 { Px35y44, Px36y43 } CellNode (35 @ 43) (20)Px70y69 { Px70y70, Px71y69, Px69y69, Px70y68 } CellNode (70 @ 69) (20)Px32y63 { Px32y64, Px33y63, Px31y63, Px32y62 } CellNode (32 @ 63) (20)Px36y44 { Px35y44, Px37y44, Px36y43, Px36y45 } CellNode (36 @ 44) (20)Px15y72 { Px15y73, Px16y72, Px14y72, Px15y71 } CellNode (15 @ 72) (20)Px16y73 { Px17y73, Px15y73, Px16y74, Px16y72 } CellNode (16 @ 73) (20)Px53y78 { Px52y78, Px53y77, Px53y79, Px54y78 } CellNode (53 @ 78) (20)Px67y44 { Px66y44, Px67y45, Px68y44, Px67y43 } CellNode (67 @ 44) (20)Px52y77 { Px53y77, Px51y77, Px52y76, Px52y78 } CellNode (52 @ 77) (20)Px44y28 { Px45y28, Px44y27, Px44y29 } CellNode (44 @ 28) (20)Px59y38 { Px60y38, Px58y38, Px59y37, Px59y39 } CellNode (59 @ 38) (20)Px41y48 { Px42y48, Px41y49, Px41y47, Px40y48 } CellNode (41 @ 48) (20)Px21y77 { Px22y77, Px21y78, Px20y77, Px21y76 } CellNode (21 @ 77) (20)Px47y73 { Px46y73, Px47y72, Px47y74, Px48y73 } CellNode (47 @ 73) (20)Px33y64 { Px32y64, Px34y64, Px33y63, Px33y65 } CellNode (33 @ 64) (20)Px95y83 { Px96y83, Px94y83, Px95y82, Px95y84 } CellNode (95 @ 83) (20)Px94y82 { Px94y83, Px95y82, Px94y81, Px93y82 } CellNode (94 @ 82) (20)Px63y82 { Px64y82, Px63y81, Px63y83, Px62y82 } CellNode (63 @ 82) (20)Px62y81 { Px63y81, Px62y80, Px61y81, Px62y82 } CellNode (62 @ 81) (20)Px54y32 { Px54y33, Px55y32, Px54y31, Px53y32 } CellNode (54 @ 32) (20)Px57y12 { Px57y13, Px58y12 } CellNode (57 @ 12) (20)Px31y81 { Px31y82, Px30y81, Px32y81, Px31y80 } CellNode (31 @ 81) (20)Px34y61 { Px34y62, Px35y61, Px34y60, Px33y61 } CellNode (34 @ 61) (20)Px30y80 { Px30y79, Px30y81, Px31y80, Px29y80 } CellNode (30 @ 80) (20)Px71y66 { Px71y67, Px71y65, Px70y66, Px72y66 } CellNode (71 @ 66) (20)Px17y70 { Px18y70, Px16y70, Px17y71 } CellNode (17 @ 70) (20)Px60y37 { Px61y37, Px59y37, Px60y38, Px60y36 } CellNode (60 @ 37) (20)Px55y76 { Px55y77, Px56y76, Px54y76, Px55y75 } CellNode (55 @ 76) (20)Px43y46 { Px44y46, Px42y46, Px43y47, Px43y45 } CellNode (43 @ 46) (20)Px46y26 { Px47y26, Px46y27, Px46y25, Px45y26 } CellNode (46 @ 26) (20)Px42y45 { Px41y45, Px42y46, Px43y45, Px42y44 } CellNode (42 @ 45) (20)Px54y75 { Px54y76, Px55y75, Px54y74, Px53y75 } CellNode (54 @ 75) (20)Px23y75 { Px23y74, Px24y75, Px22y75, Px23y76 } CellNode (23 @ 75) (20)Px37y84 { Px37y83, Px36y84, Px38y84 } CellNode (37 @ 84) (20)Px22y74 { Px23y74, Px22y73, Px21y74, Px22y75 } CellNode (22 @ 74) (20)Px8y69 { Px8y70, Px7y69, Px9y69 } CellNode (8 @ 69) (20)Px46y69 { Px46y70, Px47y69 } CellNode (46 @ 69) (20)Px96y80 { Px95y80, Px96y79, Px96y81, Px97y80 } CellNode (96 @ 80) (20)Px29y78 { Px30y78, Px28y78, Px29y77, Px29y79 } CellNode (29 @ 78) (20)Px65y80 { Px66y80, Px64y80, Px65y81, Px65y79 } CellNode (65 @ 80) (20)Px68y60 { Px69y60, Px68y59 } CellNode (68 @ 60) (20)Px50y70 { Px49y70, Px51y70, Px50y69 } CellNode (50 @ 70) (20)Px56y30 { Px57y30, Px55y30, Px56y31, Px56y29 } CellNode (56 @ 30) (20)Px70y84 { Px69y84, Px70y83, Px71y84 } CellNode (70 @ 84) (20)Px62y35 { Px63y35, Px61y35, Px62y36, Px62y34 } CellNode (62 @ 35) (20)Px73y64 { Px74y64, Px73y65, Px72y64, Px73y63 } CellNode (73 @ 64) (20)Px61y34 { Px61y33, Px61y35, Px62y34, Px60y34 } CellNode (61 @ 34) (20)Px50y4 { Px50y5, Px51y4, Px50y3, Px49y4 } CellNode (50 @ 4) (20)Px56y73 { Px56y72, Px56y74, Px57y73, Px55y73 } CellNode (56 @ 73) (20)Px48y24 { Px48y23, Px49y24, Px48y25, Px47y24 } CellNode (48 @ 24) (20)Px94y79 { Px93y79, Px95y79, Px94y80 } CellNode (94 @ 79) (20)Px47y23 { Px48y23, Px47y22, Px46y23, Px47y24 } CellNode (47 @ 23) (20)Px93y78 { Px92y78, Px93y79 } CellNode (93 @ 78) (20)Px39y82 { Px40y82, Px39y81, Px38y82, Px39y83 } CellNode (39 @ 82) (20)Px24y72 { Px24y73, Px25y72, Px24y71, Px23y72 } CellNode (24 @ 72) (20)Px25y73 { Px24y73, Px26y73, Px25y72, Px25y74 } CellNode (25 @ 73) (20)Px62y78 { Px62y79, Px61y78, Px63y78, Px62y77 } CellNode (62 @ 78) (20)Px61y77 { Px61y76, Px60y77, Px61y78, Px62y77 } CellNode (61 @ 77) (20)Px53y28 { Px53y27, Px52y28, Px54y28, Px53y29 } CellNode (53 @ 28) (20)Px30y77 { Px30y78, Px29y77, Px31y77, Px30y76 } CellNode (30 @ 77) (20)Px33y57 { Px33y56, Px33y58, Px34y57 } CellNode (33 @ 57) (20)Px39y17 { Px40y17, Px38y17 } CellNode (39 @ 17) (20)Px55y7 { Px56y7, Px55y8, Px54y7, Px55y6 } CellNode (55 @ 7) (20)Px72y82 { Px73y82, Px72y83, Px71y82, Px72y81 } CellNode (72 @ 82) (20)Px71y81 { Px71y80, Px70y81, Px71y82, Px72y81 } CellNode (71 @ 81) (20)Px63y32 { Px63y31, Px62y32, Px63y33, Px64y32 } CellNode (63 @ 32) (20)Px40y81 { Px40y82, Px41y81, Px39y81, Px40y80 } CellNode (40 @ 81) (20)Px1y80 { Px1y79, Px2y80, Px1y81 } CellNode (1 @ 80) (20)Px26y70 { Px27y70, Px26y71, Px25y70 } CellNode (26 @ 70) (20)Px64y76 { Px63y76, Px64y75, Px64y77, Px65y76 } CellNode (64 @ 76) (20)Px63y75 { Px64y75, Px63y74, Px62y75, Px63y76 } CellNode (63 @ 75) (20)Px55y26 { Px55y25, Px54y26 } CellNode (55 @ 26) (20)Px54y25 { Px54y26, Px55y25, Px54y24, Px53y25 } CellNode (54 @ 25) (20)Px32y75 { Px32y76, Px33y75, Px31y75, Px32y74 } CellNode (32 @ 75) (20)Px46y84 { Px45y84, Px46y83, Px47y84 } CellNode (46 @ 84) (20)Px7y83 { Px6y83, Px7y84, Px8y83, Px7y82 } CellNode (7 @ 83) (20)Px34y54 { Px33y54, Px34y55, Px35y54, Px34y53 } CellNode (34 @ 54) (20)Px38y35 { Px39y35, Px38y36, Px38y34, Px37y35 } CellNode (38 @ 35) (20)Px8y84 { Px7y84, Px9y84, Px8y83 } CellNode (8 @ 84) (20)Px31y74 { Px30y74, Px31y75, Px32y74, Px31y73 } CellNode (31 @ 74) (20)Px14y83 { Px15y83, Px13y83, Px14y82, Px14y84 } CellNode (14 @ 83) (20)Px35y55 { Px35y56, Px34y55, Px36y55, Px35y54 } CellNode (35 @ 55) (20)Px15y84 { Px14y84, Px15y83, Px16y84 } CellNode (15 @ 84) (20)Px55y69 { Px54y69, Px55y68 } CellNode (55 @ 69) (20)Px43y39 { Px43y38, Px43y40, Px44y39, Px42y39 } CellNode (43 @ 39) (20)Px39y79 { Px40y79, Px38y79, Px39y78, Px39y80 } CellNode (39 @ 79) (20)Px46y19 { Px46y18, Px45y19, Px47y19 } CellNode (46 @ 19) (20)Px38y78 { Px37y78, Px38y79, Px39y78, Px38y77 } CellNode (38 @ 78) (20)Px29y28 { Px29y27, Px28y28, Px30y28 } CellNode (29 @ 28) (20)Px65y30 { Px65y31, Px64y30, Px66y30, Px65y29 } CellNode (65 @ 30) (20)Px65y73 { Px65y74, Px66y73, Px65y72, Px64y73 } CellNode (65 @ 73) (20)Px79y82 { Px79y83, Px80y82, Px78y82, Px79y81 } CellNode (79 @ 82) (20)Px53y43 { Px52y43, Px53y42, Px54y43 } CellNode (53 @ 43) (20)Px56y23 { Px56y22, Px56y24, Px57y23, Px55y23 } CellNode (56 @ 23) (20)Px57y24 { Px58y24, Px56y24, Px57y25, Px57y23 } CellNode (57 @ 24) (20)Px9y81 { Px9y80, Px8y81, Px10y81, Px9y82 } CellNode (9 @ 81) (20)Px33y72 { Px34y72, Px33y71, Px32y72, Px33y73 } CellNode (33 @ 72) (20)Px36y52 { Px37y52, Px36y51, Px35y52, Px36y53 } CellNode (36 @ 52) (20)Px71y78 { Px72y78, Px70y78, Px71y79, Px71y77 } CellNode (71 @ 78) (20)Px37y53 { Px37y52, Px38y53, Px36y53, Px37y54 } CellNode (37 @ 53) (20)Px70y77 { Px70y78, Px71y77, Px69y77, Px70y76 } CellNode (70 @ 77) (20)Px16y81 { Px16y82, Px17y81, Px16y80, Px15y81 } CellNode (16 @ 81) (20)Px17y82 { Px16y82, Px17y83, Px17y81, Px18y82 } CellNode (17 @ 82) (20)Px62y28 { Px61y28, Px63y28, Px62y29, Px62y27 } CellNode (62 @ 28) (20)Px48y82 { Px48y81, Px48y83, Px49y82, Px47y82 } CellNode (48 @ 82) (20)Px49y18 { Px49y17, Px50y18, Px48y18, Px49y19 } CellNode (49 @ 18) (20)Px45y37 { Px45y36, Px44y37, Px46y37, Px45y38 } CellNode (45 @ 37) (20)Px48y17 { Px49y17, Px48y18, Px48y16 } CellNode (48 @ 17) (20)Px30y27 { Px31y27, Px29y27, Px30y28 } CellNode (30 @ 27) (20)Px31y28 { Px30y28, Px31y29, Px31y27, Px32y28 } CellNode (31 @ 28) (20)Px25y66 { Px26y66, Px25y67, Px24y66, Px25y65 } CellNode (25 @ 66) (20)Px54y44 { Px55y44, Px54y43 } CellNode (54 @ 44) (20)Px34y73 { Px34y72, Px34y74, Px33y73, Px35y73 } CellNode (34 @ 73) (20)Px6y79 { Px6y80, Px7y79, Px5y79, Px6y78 } CellNode (6 @ 79) (20)Px81y82 { Px81y83, Px80y82, Px82y82, Px81y81 } CellNode (81 @ 82) (20)Px80y81 { Px80y82, Px79y81, Px81y81, Px80y80 } CellNode (80 @ 81) (20)Px13y79 { Px13y78, Px13y80, Px14y79, Px12y79 } CellNode (13 @ 79) (20)Px67y71 { Px68y71, Px66y71, Px67y72, Px67y70 } CellNode (67 @ 71) (20)Px52y61 { Px51y61, Px52y60 } CellNode (52 @ 61) (20)Px55y41 { Px55y40, Px54y41, Px55y42, Px56y41 } CellNode (55 @ 41) (20)Px40y31 { Px40y32, Px41y31 } CellNode (40 @ 31) (20)Px51y60 { Px52y60, Px50y60, Px51y59, Px51y61 } CellNode (51 @ 60) (20)Px66y70 { Px65y70, Px66y69, Px66y71, Px67y70 } CellNode (66 @ 70) (20)Px35y70 { Px35y71, Px36y70, Px34y70, Px35y69 } CellNode (35 @ 70) (20)Px38y50 { Px39y50, Px38y51, Px37y50, Px38y49 } CellNode (38 @ 50) (20)Px72y75 { Px72y74, Px71y75, Px72y76, Px73y75 } CellNode (72 @ 75) (20)Px64y26 { Px63y26, Px65y26, Px64y25 } CellNode (64 @ 26) (20)Px63y25 { Px64y25, Px63y24, Px62y25, Px63y26 } CellNode (63 @ 25) (20)Px2y74 { Px2y75, Px3y74, Px1y74 } CellNode (2 @ 74) (20)Px55y84 { Px54y84, Px55y83, Px56y84 } CellNode (55 @ 84) (20)Px47y35 { Px47y36, Px46y35, Px48y35, Px47y34 } CellNode (47 @ 35) (20)Px32y25 { Px33y25, Px32y26, Px32y24, Px31y25 } CellNode (32 @ 25) (20)Px46y34 { Px46y35, Px47y34, Px45y34, Px46y33 } CellNode (46 @ 34) (20)Px40y74 { Px40y75, Px41y74, Px39y74, Px40y73 } CellNode (40 @ 74) (20)Px27y64 { Px27y65, Px26y64, Px28y64, Px27y63 } CellNode (27 @ 64) (20)Px23y83 { Px23y82, Px23y84, Px24y83, Px22y83 } CellNode (23 @ 83) (20)Px26y63 { Px25y63, Px26y64, Px27y63, Px26y62 } CellNode (26 @ 63) (20)Px79y79 { Px79y78, Px79y80, Px78y79, Px80y79 } CellNode (79 @ 79) (20)Px24y84 { Px23y84, Px24y83, Px25y84 } CellNode (24 @ 84) (20)Px78y78 { Px79y78, Px77y78, Px78y77, Px78y79 } CellNode (78 @ 78) (20)Px52y39 { Px53y39, Px52y40, Px52y38 } CellNode (52 @ 39) (20)Px55y19 { Px55y18, Px54y19, Px56y19 } CellNode (55 @ 19) (20)Px9y78 { Px9y79, Px8y78, Px10y78, Px9y77 } CellNode (9 @ 78) (20)Px8y77 { Px8y76, Px8y78, Px9y77, Px7y77 } CellNode (8 @ 77) (20)Px32y68 { Px32y67, Px32y69, Px33y68, Px31y68 } CellNode (32 @ 68) (20)Px35y48 { Px34y48, Px35y49, Px36y48, Px35y47 } CellNode (35 @ 48) (20)Px36y49 { Px37y49, Px35y49, Px36y48, Px36y50 } CellNode (36 @ 49) (20)Px16y78 { Px16y77, Px17y78, Px15y78, Px16y79 } CellNode (16 @ 78) (20)Px49y3 { Px50y3, Px49y4 } CellNode (49 @ 3) (20)Px15y77 { Px16y77, Px14y77, Px15y76, Px15y78 } CellNode (15 @ 77) (20)Px47y78 { Px48y78, Px47y79, Px46y78, Px47y77 } CellNode (47 @ 78) (20)Px33y69 { Px34y69, Px32y69, Px33y68, Px33y70 } CellNode (33 @ 69) (20)Px41y75 { Px42y75, Px41y76, Px40y75, Px41y74 } CellNode (41 @ 75) (20)Px89y83 { Px89y82, Px90y83, Px88y83, Px89y84 } CellNode (89 @ 83) (20)Px74y73 { Px73y73, Px74y74, Px74y72, Px75y73 } CellNode (74 @ 73) (20)Px48y6 { Px47y6, Px48y5, Px49y6 } CellNode (48 @ 6) (20)Px51y14 { Px52y14, Px50y14, Px51y15, Px51y13 } CellNode (51 @ 14) (20)Px65y23 { Px64y23 } CellNode (65 @ 23) (20)Px73y72 { Px73y73, Px74y72, Px73y71, Px72y72 } CellNode (73 @ 72) (20)Px57y82 { Px57y83, Px58y82, Px56y82, Px57y81 } CellNode (57 @ 82) (20)Px49y33 { Px50y33, Px48y33, Px49y34, Px49y32 } CellNode (49 @ 33) (20)Px42y72 { Px42y73, Px41y72, Px43y72 } CellNode (42 @ 72) (20)Px80y78 { Px79y78, Px81y78, Px80y77, Px80y79 } CellNode (80 @ 78) (20)Px26y82 { Px26y81, Px27y82, Px25y82, Px26y83 } CellNode (26 @ 82) (20)Px29y62 { Px28y62, Px29y63, Px30y62 } CellNode (29 @ 62) (20)Px25y81 { Px26y81, Px25y80, Px24y81, Px25y82 } CellNode (25 @ 81) (20)Px11y72 { Px10y72, Px12y72, Px11y71, Px11y73 } CellNode (11 @ 72) (20)Px88y82 { Px89y82, Px87y82, Px88y81, Px88y83 } CellNode (88 @ 82) (20)Px48y32 { Px47y32, Px48y33, Px49y32, Px48y31 } CellNode (48 @ 32) (20)Px69y47 { Px68y47, Px69y48 } CellNode (69 @ 47) (20)Px47y9 { Px48y9, Px47y8 } CellNode (47 @ 9) (20)Px50y56 { Px50y57, Px51y56, Px49y56 } CellNode (50 @ 56) (20)Px54y37 { Px54y36, Px54y38, Px55y37, Px53y37 } CellNode (54 @ 37) (20)Px49y76 { Px49y77, Px48y76, Px50y76, Px49y75 } CellNode (49 @ 76) (20)Px34y66 { Px34y65, Px33y66, Px35y66, Px34y67 } CellNode (34 @ 66) (20)Px48y75 { Px48y74, Px47y75, Px48y76, Px49y75 } CellNode (48 @ 75) (20)Px51y57 { Px51y58, Px50y57, Px52y57, Px51y56 } CellNode (51 @ 57) (20)Px50y13 { Px50y12, Px50y14, Px51y13, Px49y13 } CellNode (50 @ 13) (20)Px10y71 { Px9y71, Px10y72, Px11y71, Px10y70 } CellNode (10 @ 71) (20)Px57y17 { Px58y17, Px56y17, Px57y16 } CellNode (57 @ 17) (20)Px37y46 { Px37y45, Px36y46, Px38y46, Px37y47 } CellNode (37 @ 46) (20)Px17y75 { Px17y76, Px18y75, Px16y75, Px17y74 } CellNode (17 @ 75) (20)Px52y3 { Px52y4, Px53y3 } CellNode (52 @ 3) (20)Px22y79 { Px22y80, Px23y79, Px21y79, Px22y78 } CellNode (22 @ 79) (20)Px76y71 { Px77y71, Px75y71, Px76y72, Px76y70 } CellNode (76 @ 71) (20)Px64y41 { Px65y41, Px63y41 } CellNode (64 @ 41) (20)Px75y70 { Px75y69, Px75y71, Px76y70, Px74y70 } CellNode (75 @ 70) (20)Px52y11 { Px53y11, Px52y10, Px51y11, Px52y12 } CellNode (52 @ 11) (20)Px53y12 { Px53y11, Px53y13, Px54y12, Px52y12 } CellNode (53 @ 12) (20)Px95y84 { Px96y84, Px95y83, Px94y84 } CellNode (95 @ 84) (20)Px50y75 { Px49y75, Px50y74, Px50y76, Px51y75 } CellNode (50 @ 75) (20)Px64y84 { Px65y84, Px64y83 } CellNode (64 @ 84) (20)Px56y35 { Px56y36, Px56y34, Px57y35, Px55y35 } CellNode (56 @ 35) (20)Px59y15 { Px60y15, Px58y15 } CellNode (59 @ 15) (20)Px57y6 { Px57y7, Px56y6 } CellNode (57 @ 6) (20)Px33y84 { Px32y84, Px33y83, Px34y84 } CellNode (33 @ 84) (20)Px36y64 { Px35y64, Px36y65, Px36y63 } CellNode (36 @ 64) (20)Px39y44 { Px39y45, Px40y44, Px39y43, Px38y44 } CellNode (39 @ 44) (20)Px35y63 { Px35y64, Px36y63, Px34y63, Px35y62 } CellNode (35 @ 63) (20)Px32y83 { Px32y84, Px33y83, Px31y83, Px32y82 } CellNode (32 @ 83) (20)Px73y69 { Px73y68, Px73y70, Px74y69, Px72y69 } CellNode (73 @ 69) (20)Px19y73 { Px19y74, Px18y73, Px20y73, Px19y72 } CellNode (19 @ 73) (20)Px61y39 { Px60y39, Px61y38, Px61y40, Px62y39 } CellNode (61 @ 39) (20)Px72y68 { Px73y68, Px71y68, Px72y67, Px72y69 } CellNode (72 @ 68) (20)Px18y72 { Px18y71, Px18y73, Px19y72, Px17y72 } CellNode (18 @ 72) (20)Px56y78 { Px56y79, Px56y77, Px55y78, Px57y78 } CellNode (56 @ 78) (20)Px48y29 { Px49y29, Px47y29, Px48y28, Px48y30 } CellNode (48 @ 29) (20)Px44y48 { Px44y49, Px43y48, Px44y47 } CellNode (44 @ 48) (20)Px47y28 { Px47y29, Px48y28, Px47y27, Px46y28 } CellNode (47 @ 28) (20)Px25y78 { Px25y79, Px26y78, Px24y78, Px25y77 } CellNode (25 @ 78) (20)Px56y9 { Px57y9, Px56y8, Px55y9, Px56y10 } CellNode (56 @ 9) (20)Px24y77 { Px24y76, Px24y78, Px25y77, Px23y77 } CellNode (24 @ 77) (20)Px97y82 { Px97y83, Px97y81, Px96y82 } CellNode (97 @ 82) (20)Px60y14 { Px60y15, Px60y13 } CellNode (60 @ 14) (20)Px66y82 { Px65y82, Px66y83, Px66y81, Px67y82 } CellNode (66 @ 82) (20)Px58y33 { Px59y33, Px57y33, Px58y34, Px58y32 } CellNode (58 @ 33) (20)Px43y23 { Px44y23, Px43y24, Px42y23, Px43y22 } CellNode (43 @ 23) (20)Px40y43 { Px40y44, Px39y43, Px41y43, Px40y42 } CellNode (40 @ 43) (20)Px42y22 { Px41y22, Px43y22, Px42y23 } CellNode (42 @ 22) (20)Px20y72 { Px20y71, Px20y73, Px21y72, Px19y72 } CellNode (20 @ 72) (20)Px34y81 { Px33y81, Px35y81, Px34y82, Px34y80 } CellNode (34 @ 81) (20)Px37y61 { Px37y60, Px36y61, Px37y62 } CellNode (37 @ 61) (20)Px51y72 { Px51y73, Px52y72, Px50y72 } CellNode (51 @ 72) (20)Px75y67 { Px75y68, Px74y67, Px75y66, Px76y67 } CellNode (75 @ 67) (20)Px74y66 { Px74y67, Px75y66, Px74y65, Px73y66 } CellNode (74 @ 66) (20)Px63y37 { Px64y37, Px63y38, Px63y36, Px62y37 } CellNode (63 @ 37) (20)Px57y75 { Px56y75, Px57y74, Px57y76 } CellNode (57 @ 75) (20)Px49y26 { Px48y26, Px49y27, Px50y26, Px49y25 } CellNode (49 @ 26) (20)Px26y75 { Px26y74, Px25y75, Px27y75, Px26y76 } CellNode (26 @ 75) (20)Px49y69 { Px49y68, Px48y69, Px49y70, Px50y69 } CellNode (49 @ 69) (20)Px34y59 { Px35y59, Px33y59, Px34y58, Px34y60 } CellNode (34 @ 59) (20)Px31y79 { Px32y79, Px30y79, Px31y78, Px31y80 } CellNode (31 @ 79) (20)Px70y61 { Px70y62, Px70y60, Px71y61 } CellNode (70 @ 61) (20)Px68y80 { Px69y80, Px67y80, Px68y81, Px68y79 } CellNode (68 @ 80) (20)Px59y30 { Px59y29, Px59y31, Px60y30, Px58y30 } CellNode (59 @ 30) (20)Px41y40 { Px40y40, Px41y39, Px41y41, Px42y40 } CellNode (41 @ 40) (20)Px73y84 { Px73y83, Px74y84, Px72y84 } CellNode (73 @ 84) (20)Px65y35 { Px64y35, Px65y34, Px65y36 } CellNode (65 @ 35) (20)Px50y25 { Px50y26, Px51y25, Px49y25 } CellNode (50 @ 25) (20)Px64y34 { Px64y33, Px63y34, Px64y35, Px65y34 } CellNode (64 @ 34) (20)Px3y83 { Px4y83, Px2y83, Px3y84, Px3y82 } CellNode (3 @ 83) (20)Px42y84 { Px41y84, Px43y84, Px42y83 } CellNode (42 @ 84) (20)Px2y82 { Px2y83, Px3y82, Px1y82, Px2y81 } CellNode (2 @ 82) (20)Px59y73 { Px59y74, Px59y72, Px60y73 } CellNode (59 @ 73) (20)Px97y79 { Px97y80, Px96y79 } CellNode (97 @ 79) (20)Px41y83 { Px42y83, Px40y83, Px41y82, Px41y84 } CellNode (41 @ 83) (20)Px28y73 { Px28y74, Px27y73, Px29y73, Px28y72 } CellNode (28 @ 73) (20)Px10y83 { Px9y83, Px11y83, Px10y84, Px10y82 } CellNode (10 @ 83) (20)Px27y72 { Px27y73, Px28y72, Px26y72, Px27y71 } CellNode (27 @ 72) (20)Px65y78 { Px64y78, Px65y77, Px65y79, Px66y78 } CellNode (65 @ 78) (20)Px57y29 { Px57y28, Px57y30, Px58y29, Px56y29 } CellNode (57 @ 29) (20)Px42y19 { Px41y19, Px42y18, Px43y19 } CellNode (42 @ 19) (20)Px56y28 { Px56y29, Px57y28, Px55y28 } CellNode (56 @ 28) (20)Px68y58 { Px68y59, Px68y57, Px69y58 } CellNode (68 @ 58) (20)Px37y58 { Px38y58, Px36y58, Px37y59, Px37y57 } CellNode (37 @ 58) (20)Px33y77 { Px33y78, Px34y77, Px32y77, Px33y76 } CellNode (33 @ 77) (20)Px36y57 { Px36y58, Px37y57, Px36y56, Px35y57 } CellNode (36 @ 57) (20)Px50y68 { Px50y69, Px49y68, Px51y68 } CellNode (50 @ 68) (20)Px24y27 { Px24y28, Px23y27, Px25y27 } CellNode (24 @ 27) (20)Px41y18 { Px41y17, Px42y18, Px41y19 } CellNode (41 @ 18) (20)Px25y28 { Px25y29, Px24y28, Px26y28, Px25y27 } CellNode (25 @ 28) (20)Px75y82 { Px75y81, Px75y83, Px74y82, Px76y82 } CellNode (75 @ 82) (20)Px60y72 { Px59y72, Px60y73, Px61y72 } CellNode (60 @ 72) (20)Px52y23 { Px51y23, Px53y23, Px52y22 } CellNode (52 @ 23) (20)Px74y81 { Px75y81, Px74y80, Px73y81, Px74y82 } CellNode (74 @ 81) (20)Px51y22 { Px51y23, Px52y22, Px50y22 } CellNode (51 @ 22) (20)Px47y62 { Px47y61, Px48y62 } CellNode (47 @ 62) (20)Px43y81 { Px43y82, Px44y81, Px42y81, Px43y80 } CellNode (43 @ 81) (20)Px4y80 { Px4y79, Px4y81, Px5y80, Px3y80 } CellNode (4 @ 80) (20)Px35y32 { Px35y33, Px34y32, Px36y32, Px35y31 } CellNode (35 @ 32) (20)Px34y31 { Px34y30, Px34y32, Px35y31, Px33y31 } CellNode (34 @ 31) (20)Px12y81 { Px12y80, Px13y81, Px11y81, Px12y82 } CellNode (12 @ 81) (20)Px29y70 { Px28y70, Px29y71, Px30y70 } CellNode (29 @ 70) (20)Px11y80 { Px12y80, Px10y80, Px11y79, Px11y81 } CellNode (11 @ 80) (20)Px67y76 { Px66y76, Px68y76, Px67y75, Px67y77 } CellNode (67 @ 76) (20)Px66y75 { Px66y76, Px67y75, Px66y74, Px65y75 } CellNode (66 @ 75) (20)Px69y55 { Px69y56 } CellNode (69 @ 55) (20)Px43y16 { Px43y17 } CellNode (43 @ 16) (20)Px40y36 { Px39y36, Px40y35, Px41y36 } CellNode (40 @ 36) (20)Px35y75 { Px35y74, Px35y76, Px36y75, Px34y75 } CellNode (35 @ 75) (20)Px49y84 { Px48y84, Px50y84, Px49y83 } CellNode (49 @ 84) (20)Px27y26 { Px27y27 } CellNode (27 @ 26) (20)Px38y55 { Px38y54, Px39y55, Px38y56, Px37y55 } CellNode (38 @ 55) (20)Px18y84 { Px17y84, Px18y83, Px19y84 } CellNode (18 @ 84) (20)Px2y79 { Px2y78, Px2y80, Px3y79, Px1y79 } CellNode (2 @ 79) (20)Px40y79 { Px39y79, Px40y78, Px40y80, Px41y79 } CellNode (40 @ 79) (20)Px1y78 { Px2y78, Px1y79, Px1y77 } CellNode (1 @ 78) (20)Px46y39 { Px46y38, Px45y39, Px46y40 } CellNode (46 @ 39) (20)Px77y80 { Px76y80, Px78y80, Px77y79, Px77y81 } CellNode (77 @ 80) (20)Px68y30 { Px67y30 } CellNode (68 @ 30) (20)Px53y20 { Px53y21, Px53y19, Px54y20 } CellNode (53 @ 20) (20)Px37y30 { Px36y30, Px37y31, Px37y29 } CellNode (37 @ 30) (20)Px82y84 { Px82y83, Px83y84, Px81y84 } CellNode (82 @ 84) (20)Px69y74 { Px70y74, Px69y75, Px68y74, Px69y73 } CellNode (69 @ 74) (20)Px51y84 { Px50y84, Px51y83, Px52y84 } CellNode (51 @ 84) (20)Px68y73 { Px68y74, Px69y73, Px67y73, Px68y72 } CellNode (68 @ 73) (20)Px50y83 { Px50y82, Px50y84, Px49y83, Px51y83 } CellNode (50 @ 83) (20)Px56y43 { Px56y42, Px55y43, Px56y44, Px57y43 } CellNode (56 @ 43) (20)Px41y33 { Px42y33, Px40y33, Px41y32, Px41y34 } CellNode (41 @ 33) (20)Px42y34 { Px41y34, Px42y33, Px42y35, Px43y34 } CellNode (42 @ 34) (20)Px22y63 { Px22y64, Px22y62, Px23y63 } CellNode (22 @ 63) (20)Px36y72 { Px37y72, Px36y71, Px35y72, Px36y73 } CellNode (36 @ 72) (20)Px39y52 { Px40y52, Px39y51, Px38y52, Px39y53 } CellNode (39 @ 52) (20)Px74y78 { Px75y78, Px74y79, Px73y78, Px74y77 } CellNode (74 @ 78) (20)Px66y29 { Px66y30, Px67y29, Px65y29, Px66y28 } CellNode (66 @ 29) (20)Px73y77 { Px73y76, Px73y78, Px74y77, Px72y77 } CellNode (73 @ 77) (20)Px19y81 { Px19y82, Px20y81, Px19y80, Px18y81 } CellNode (19 @ 81) (20)Px21y62 { Px22y62, Px21y61 } CellNode (21 @ 62) (20)Px46y58 { Px46y57, Px47y58, Px46y59 } CellNode (46 @ 58) (20)Px42y77 { Px42y78, Px41y77, Px42y76, Px43y77 } CellNode (42 @ 77) (20)Px3y76 { Px3y77, Px4y76, Px2y76, Px3y75 } CellNode (3 @ 76) (20)Px48y37 { Px47y37, Px48y36, Px49y37 } CellNode (48 @ 37) (20)Px33y27 { Px33y28, Px32y27, Px33y26 } CellNode (33 @ 27) (20)Px50y18 { Px51y18, Px49y18, Px50y17, Px50y19 } CellNode (50 @ 18) (20)Px34y28 { Px33y28, Px34y29, Px35y28 } CellNode (34 @ 28) (20)Px28y66 { Px28y67, Px29y66, Px28y65, Px27y66 } CellNode (28 @ 66) (20)Px10y76 { Px9y76, Px10y77, Px11y76, Px10y75 } CellNode (10 @ 76) (20)Px65y28 { Px64y28, Px65y27, Px65y29, Px66y28 } CellNode (65 @ 28) (20)Px45y57 { Px46y57, Px45y56 } CellNode (45 @ 57) (20)Px29y67 { Px28y67, Px29y66, Px30y67 } CellNode (29 @ 67) (20)Px51y19 { Px50y19, Px51y18, Px52y19 } CellNode (51 @ 19) (20)Px11y77 { Px12y77, Px11y78, Px10y77, Px11y76 } CellNode (11 @ 77) (20)Px57y44 { Px57y43, Px57y45, Px56y44 } CellNode (57 @ 44) (20)Px37y73 { Px37y74, Px37y72, Px38y73, Px36y73 } CellNode (37 @ 73) (20)Px83y81 { Px83y80, Px82y81, Px83y82 } CellNode (83 @ 81) (20)Px61y23 { Px62y23, Px61y24 } CellNode (61 @ 23) (20)Px41y52 { Px42y52, Px41y53, Px40y52, Px41y51 } CellNode (41 @ 52) (20)Px52y81 { Px53y81, Px52y80, Px51y81, Px52y82 } CellNode (52 @ 81) (20)Px58y41 { Px59y41, Px58y40, Px57y41, Px58y42 } CellNode (58 @ 41) (20)Px40y51 { Px40y52, Px39y51, Px41y51, Px40y50 } CellNode (40 @ 51) (20)Px21y81 { Px21y82, Px22y81, Px20y81, Px21y80 } CellNode (21 @ 81) (20)Px24y61 { Px25y61, Px23y61, Px24y62, Px24y60 } CellNode (24 @ 61) (20)Px20y80 { Px20y79, Px20y81, Px19y80, Px21y80 } CellNode (20 @ 80) (20)Px76y76 { Px76y75, Px76y77, Px77y76, Px75y76 } CellNode (76 @ 76) (20)Px75y75 { Px76y75, Px74y75, Px75y74, Px75y76 } CellNode (75 @ 75) (20)Px58y8 { Px58y9, Px57y8 } CellNode (58 @ 8) (20)Px52y16 { Px52y15, Px51y16, Px53y16 } CellNode (52 @ 16) (20)Px44y75 { Px44y76, Px43y75, Px45y75, Px44y74 } CellNode (44 @ 75) (20)Px58y84 { Px58y83, Px57y84 } CellNode (58 @ 84) (20)Px43y74 { Px43y75, Px44y74, Px42y74, Px43y73 } CellNode (43 @ 74) (20)Px27y84 { Px27y83, Px26y84, Px28y84 } CellNode (27 @ 84) (20)Px12y74 { Px12y73, Px11y74, Px13y74, Px12y75 } CellNode (12 @ 74) (20)Px67y69 { Px67y70, Px66y69, Px68y69 } CellNode (67 @ 69) (20)Px52y59 { Px52y60, Px52y58, Px51y59 } CellNode (52 @ 59) (20)Px55y39 { Px55y40, Px56y39, Px54y39, Px55y38 } CellNode (55 @ 39) (20)Px36y69 { Px36y70, Px37y69, Px35y69, Px36y68 } CellNode (36 @ 69) (20)Px39y49 { Px39y50, Px38y49, Px40y49, Px39y48 } CellNode (39 @ 49) (20)Px35y68 { Px35y67, Px34y68, Px35y69, Px36y68 } CellNode (35 @ 68) (20)Px38y48 { Px37y48, Px38y47, Px38y49, Px39y48 } CellNode (38 @ 48) (20)Px71y70 { Px70y70, Px71y71, Px71y69, Px72y70 } CellNode (71 @ 70) (20)Px19y78 { Px20y78, Px19y77, Px19y79, Px18y78 } CellNode (19 @ 78) (20)Px18y77 { Px19y77, Px18y76, Px17y77, Px18y78 } CellNode (18 @ 77) (20)Px46y30 { Px46y31, Px47y30, Px45y30, Px46y29 } CellNode (46 @ 30) (20)Px91y84 { Px90y84, Px92y84, Px91y83 } CellNode (91 @ 84) (20)Px90y83 { Px91y83, Px89y83, Px90y82, Px90y84 } CellNode (90 @ 83) (20)Px66y44 { Px67y44, Px66y43 } CellNode (66 @ 44) (20)Px51y34 { Px52y34, Px50y34, Px51y35, Px51y33 } CellNode (51 @ 34) (20)Px77y73 { Px77y74, Px78y73, Px76y73, Px77y72 } CellNode (77 @ 73) (20)Px50y33 { Px49y33, Px50y32, Px50y34, Px51y33 } CellNode (50 @ 33) (20)Px46y73 { Px47y73, Px45y73, Px46y74, Px46y72 } CellNode (46 @ 73) (20)Px31y63 { Px30y63, Px31y62, Px32y63, Px31y64 } CellNode (31 @ 63) (20)Px45y72 { Px46y72, Px44y72, Px45y73 } CellNode (45 @ 72) (20)Px30y62 { Px29y62, Px30y63, Px31y62 } CellNode (30 @ 62) (20)Px83y78 { Px83y79, Px83y77, Px82y78 } CellNode (83 @ 78) (20)Px29y82 { Px30y82, Px29y81, Px29y83, Px28y82 } CellNode (29 @ 82) (20)Px14y72 { Px15y72, Px14y73, Px13y72, Px14y71 } CellNode (14 @ 72) (20)Px28y81 { Px29y81, Px27y81, Px28y80, Px28y82 } CellNode (28 @ 81) (20)Px60y19 { Px59y19, Px60y18 } CellNode (60 @ 19) (20)Px82y77 { Px82y78, Px83y77, Px82y76, Px81y77 } CellNode (82 @ 77) (20)Px58y38 { Px59y38, Px57y38, Px58y39, Px58y37 } CellNode (58 @ 38) (20)Px54y57 { Px54y56, Px53y57 } CellNode (54 @ 57) (20)Px57y37 { Px57y36, Px56y37, Px57y38, Px58y37 } CellNode (57 @ 37) (20)Px40y48 { Px40y49, Px40y47, Px41y48, Px39y48 } CellNode (40 @ 48) (20)Px20y77 { Px20y78, Px21y77, Px19y77, Px20y76 } CellNode (20 @ 77) (20)Px51y77 { Px50y77, Px51y76, Px51y78, Px52y77 } CellNode (51 @ 77) (20)Px37y66 { Px36y66, Px37y67 } CellNode (37 @ 66) (20)Px53y13 { Px52y13, Px53y12, Px53y14, Px54y13 } CellNode (53 @ 13) (20)Px13y71 { Px13y72, Px14y71, Px12y71, Px13y70 } CellNode (13 @ 71) (20)Px93y82 { Px93y83, Px92y82, Px94y82, Px93y81 } CellNode (93 @ 82) (20)Px92y81 { Px92y82, Px93y81, Px92y80, Px91y81 } CellNode (92 @ 81) (20)Px68y42 { Px68y43, Px67y42 } CellNode (68 @ 42) (20)Px53y32 { Px54y32, Px53y31, Px53y33, Px52y32 } CellNode (53 @ 32) (20)Px67y41 { Px67y42, Px66y41, Px67y40 } CellNode (67 @ 41) (20)Px60y80 { Px61y80, Px60y79 } CellNode (60 @ 80) (20)Px61y81 { Px62y81, Px61y80 } CellNode (61 @ 81) (20)Px33y61 { Px34y61, Px32y61, Px33y62, Px33y60 } CellNode (33 @ 61) (20)Px47y70 { Px46y70, Px48y70, Px47y69 } CellNode (47 @ 70) (20)Px55y11 { Px56y11, Px54y11, Px55y10, Px55y12 } CellNode (55 @ 11) (20)Px9y70 { Px9y71, Px8y70, Px10y70, Px9y69 } CellNode (9 @ 70) (20)Px20y30 { Px21y30 } CellNode (20 @ 30) (20)Px70y66 { Px70y67, Px71y66, Px70y65 } CellNode (70 @ 66) (20)Px52y31 { Px53y31, Px52y30, Px51y31, Px52y32 } CellNode (52 @ 31) (20)Px32y60 { Px32y59, Px32y61, Px33y60, Px31y60 } CellNode (32 @ 60) (20)Px16y70 { Px17y70, Px15y70, Px16y71 } CellNode (16 @ 70) (20)Px53y75 { Px54y75, Px52y75, Px53y74, Px53y76 } CellNode (53 @ 75) (20)Px45y26 { Px45y27, Px44y26, Px46y26, Px45y25 } CellNode (45 @ 26) (20)Px41y45 { Px41y46, Px42y45, Px40y45, Px41y44 } CellNode (41 @ 45) (20)Px52y74 { Px52y75, Px53y74, Px52y73, Px51y74 } CellNode (52 @ 74) (20)Px67y84 { Px68y84, Px67y83, Px66y84 } CellNode (67 @ 84) (20)Px36y84 { Px35y84, Px37y84, Px36y83 } CellNode (36 @ 84) (20)Px21y74 { Px20y74, Px22y74, Px21y75, Px21y73 } CellNode (21 @ 74) (20)Px44y25 { Px44y26, Px45y25, Px44y24, Px43y25 } CellNode (44 @ 25) (20)Px59y35 { Px60y35, Px59y34, Px58y35, Px59y36 } CellNode (59 @ 35) (20)Px35y83 { Px35y84, Px36y83, Px34y83, Px35y82 } CellNode (35 @ 83) (20)Px76y69 { Px77y69, Px76y68, Px75y69, Px76y70 } CellNode (76 @ 69) (20)Px64y39 { Px63y39, Px65y39, Px64y38 } CellNode (64 @ 39) (20)Px47y48 { Px47y47, Px46y48 } CellNode (47 @ 48) (20)Px95y80 { Px96y80, Px94y80, Px95y81, Px95y79 } CellNode (95 @ 80) (20)Px28y78 { Px28y79, Px27y78, Px29y78, Px28y77 } CellNode (28 @ 78) (20)Px13y68 { Px13y69, Px12y68, Px13y67 } CellNode (13 @ 68) (20)Px27y77 { Px26y77, Px27y76, Px27y78, Px28y77 } CellNode (27 @ 77) (20)Px12y67 { Px12y68, Px13y67 } CellNode (12 @ 67) (20)Px72y64 { Px71y64, Px72y63, Px72y65, Px73y64 } CellNode (72 @ 64) (20)Px60y34 { Px60y35, Px59y34, Px61y34, Px60y33 } CellNode (60 @ 34) (20)Px55y73 { Px55y74, Px54y73, Px56y73, Px55y72 } CellNode (55 @ 73) (20)Px69y82 { Px69y83, Px70y82, Px69y81, Px68y82 } CellNode (69 @ 82) (20)Px43y43 { Px42y43, Px43y44, Px43y42 } CellNode (43 @ 43) (20)Px46y23 { Px46y22, Px46y24, Px47y23, Px45y23 } CellNode (46 @ 23) (20)Px42y42 { Px42y41, Px41y42, Px42y43, Px43y42 } CellNode (42 @ 42) (20)Px92y78 { Px92y79, Px93y78, Px91y78 } CellNode (92 @ 78) (20)Px23y72 { Px23y73, Px23y71, Px24y72, Px22y72 } CellNode (23 @ 72) (20)Px37y81 { Px36y81, Px37y80, Px37y82, Px38y81 } CellNode (37 @ 81) (20)Px22y71 { Px23y71, Px21y71, Px22y70, Px22y72 } CellNode (22 @ 71) (20)Px54y72 { Px54y73, Px55y72, Px53y72 } CellNode (54 @ 72) (20)Px60y77 { Px60y78, Px61y77, Px60y76 } CellNode (60 @ 77) (20)Px52y28 { Px51y28, Px52y29, Px53y28 } CellNode (52 @ 28) (20)Px38y82 { Px39y82, Px37y82, Px38y83, Px38y81 } CellNode (38 @ 82) (20)Px51y27 { Px51y28, Px50y27 } CellNode (51 @ 27) (20)Px47y67 { Px47y68 } CellNode (47 @ 67) (20)Px38y17 { Px37y17, Px38y16, Px38y18, Px39y17 } CellNode (38 @ 17) (20)Px29y75 { Px30y75, Px28y75, Px29y74, Px29y76 } CellNode (29 @ 75) (20)Px34y79 { Px35y79, Px34y78, Px33y79, Px34y80 } CellNode (34 @ 79) (20)Px70y81 { Px71y81, Px69y81, Px70y82, Px70y80 } CellNode (70 @ 81) (20)Px62y32 { Px62y33, Px61y32, Px63y32, Px62y31 } CellNode (62 @ 32) (20)Px73y61 { Px73y60, Px72y61 } CellNode (73 @ 61) (20)Px61y31 { Px60y31, Px61y30, Px61y32, Px62y31 } CellNode (61 @ 31) (20)Px44y40 { Px43y40, Px44y39 } CellNode (44 @ 40) (20)Px25y70 { Px26y70, Px24y70, Px25y71 } CellNode (25 @ 70) (20)Px62y75 { Px62y74, Px62y76, Px61y75, Px63y75 } CellNode (62 @ 75) (20)Px76y84 { Px77y84, Px76y83, Px75y84 } CellNode (76 @ 84) (20)Px61y74 { Px62y74, Px61y73, Px60y74, Px61y75 } CellNode (61 @ 74) (20)Px53y25 { Px53y24, Px54y25 } CellNode (53 @ 25) (20)Px6y83 { Px7y83, Px6y84, Px5y83, Px6y82 } CellNode (6 @ 83) (20)Px37y35 { Px38y35, Px37y34 } CellNode (37 @ 35) (20)Px5y82 { Px5y83, Px6y82, Px4y82, Px5y81 } CellNode (5 @ 82) (20)Px33y54 { Px34y54, Px33y53, Px33y55 } CellNode (33 @ 54) (20)Px44y83 { Px44y84, Px45y83, Px43y83, Px44y82 } CellNode (44 @ 83) (20)Px30y74 { Px30y75, Px29y74, Px31y74, Px30y73 } CellNode (30 @ 74) (20)Px13y83 { Px12y83, Px13y84, Px14y83, Px13y82 } CellNode (13 @ 83) (20)Px45y84 { Px44y84, Px45y83, Px46y84 } CellNode (45 @ 84) (20)Px69y79 { Px69y78, Px69y80, Px70y79, Px68y79 } CellNode (69 @ 79) (20)Px70y59 { Px71y59, Px70y58, Px70y60, Px69y59 } CellNode (70 @ 59) (20)Px68y78 { Px69y78, Px68y77, Px67y78, Px68y79 } CellNode (68 @ 78) (20)Px42y39 { Px43y39, Px41y39, Px42y38, Px42y40 } CellNode (42 @ 39) (20)Px45y19 { Px45y18, Px46y19 } CellNode (45 @ 19) (20)Px59y28 { Px60y28, Px58y28, Px59y29 } CellNode (59 @ 28) (20)Px41y38 { Px41y39, Px41y37, Px42y38 } CellNode (41 @ 38) (20)Px22y68 { Px22y67, Px21y68, Px22y69 } CellNode (22 @ 68) (20)Px36y77 { Px36y78, Px37y77, Px35y77, Px36y76 } CellNode (36 @ 77) (20)Px39y57 { Px39y58, Px40y57, Px39y56, Px38y57 } CellNode (39 @ 57) (20)Px21y67 { Px21y68, Px21y66, Px22y67 } CellNode (21 @ 67) (20)Px53y68 { Px53y69, Px54y68, Px53y67, Px52y68 } CellNode (53 @ 68) (20)Px37y78 { Px37y79, Px36y78, Px38y78, Px37y77 } CellNode (37 @ 78) (20)Px54y7 { Px55y7, Px54y6 } CellNode (54 @ 7) (20)Px54y69 { Px53y69, Px54y68, Px55y69 } CellNode (54 @ 69) (20)Px28y28 { Px27y28, Px29y28, Px28y29, Px28y27 } CellNode (28 @ 28) (20)Px64y73 { Px63y73, Px64y74, Px64y72, Px65y73 } CellNode (64 @ 73) (20)Px78y82 { Px78y81, Px77y82, Px79y82, Px78y83 } CellNode (78 @ 82) (20)Px52y43 { Px53y43 } CellNode (52 @ 43) (20)Px55y23 { Px54y23, Px56y23, Px55y24 } CellNode (55 @ 23) (20)Px63y72 { Px63y73, Px64y72, Px62y72, Px63y71 } CellNode (63 @ 72) (20)Px8y81 { Px9y81, Px7y81, Px8y82, Px8y80 } CellNode (8 @ 81) (20)Px32y72 { Px33y72, Px31y72, Px32y73, Px32y71 } CellNode (32 @ 72) (20)Px35y52 { Px36y52, Px35y53, Px34y52, Px35y51 } CellNode (35 @ 52) (20)Px49y61 { Px49y62, Px50y61, Px49y60, Px48y61 } CellNode (49 @ 61) (20)Px31y71 { Px30y71, Px31y70, Px31y72, Px32y71 } CellNode (31 @ 71) (20)Px46y81 { Px46y82, Px47y81, Px46y80, Px45y81 } CellNode (46 @ 81) (20)Px15y81 { Px16y81, Px15y80, Px15y82, Px14y81 } CellNode (15 @ 81) (20)Px61y28 { Px61y29, Px62y28, Px60y28, Px61y27 } CellNode (61 @ 28) (20)Px60y27 { Px60y28, Px61y27 } CellNode (60 @ 27) (20)Px47y82 { Px47y83, Px46y82, Px48y82, Px47y81 } CellNode (47 @ 82) (20)Px72y57 { Px72y56, Px71y57, Px72y58 } CellNode (72 @ 57) (20)Px44y37 { Px44y38, Px43y37, Px45y37, Px44y36 } CellNode (44 @ 37) (20)Px40y56 { Px40y55, Px40y57, Px39y56 } CellNode (40 @ 56) (20)Px7y80 { Px6y80, Px7y79, Px7y81, Px8y80 } CellNode (7 @ 80) (20)Px39y76 { Px40y76, Px38y76, Px39y77, Px39y75 } CellNode (39 @ 76) (20)Px24y66 { Px24y67, Px24y65, Px25y66, Px23y66 } CellNode (24 @ 66) (20)Px38y75 { Px38y74, Px37y75, Px38y76, Px39y75 } CellNode (38 @ 75) (20)Px46y16 { Px46y17, Px47y16 } CellNode (46 @ 16) (20)Px54y22 { Px53y22, Px54y23 } CellNode (54 @ 22) (20)Px34y51 { Px33y51, Px34y50, Px34y52, Px35y51 } CellNode (34 @ 51) (20)Px14y80 { Px15y80, Px13y80, Px14y79, Px14y81 } CellNode (14 @ 80) (20)Px40y13 { Px40y12 } CellNode (40 @ 13) (20)Px43y36 { Px42y36, Px43y35, Px43y37, Px44y36 } CellNode (43 @ 36) (20)Px23y65 { Px24y65, Px22y65, Px23y64, Px23y66 } CellNode (23 @ 65) (20)Px5y79 { Px4y79, Px5y78, Px5y80, Px6y79 } CellNode (5 @ 79) (20)Px43y79 { Px44y79, Px43y78, Px42y79, Px43y80 } CellNode (43 @ 79) (20)Px4y78 { Px4y79, Px5y78, Px4y77, Px3y78 } CellNode (4 @ 78) (20)Px12y79 { Px12y80, Px13y79, Px12y78, Px11y79 } CellNode (12 @ 79) (20)Px54y41 { Px55y41, Px54y42, Px53y41, Px54y40 } CellNode (54 @ 41) (20)Px50y60 { Px50y59, Px51y60, Px49y60, Px50y61 } CellNode (50 @ 60) (20)Px65y70 { Px65y71, Px66y70, Px64y70 } CellNode (65 @ 70) (20)Px53y40 { Px52y40, Px53y39, Px53y41, Px54y40 } CellNode (53 @ 40) (20)Px34y70 { Px34y71, Px34y69, Px35y70, Px33y70 } CellNode (34 @ 70) (20)Px37y50 { Px36y50, Px37y49, Px38y50, Px37y51 } CellNode (37 @ 50) (20)Px71y75 { Px72y75, Px71y76, Px70y75, Px71y74 } CellNode (71 @ 75) (20)Px85y84 { Px86y84, Px84y84, Px85y83 } CellNode (85 @ 84) (20)Px70y74 { Px69y74, Px70y75, Px71y74, Px70y73 } CellNode (70 @ 74) (20)Px62y25 { Px62y24, Px61y25, Px62y26, Px63y25 } CellNode (62 @ 25) (20)Px54y84 { Px53y84, Px54y83, Px55y84 } CellNode (54 @ 84) (20)Px53y83 { Px54y83, Px53y82, Px52y83, Px53y84 } CellNode (53 @ 83) (20)Px45y34 { Px45y35, Px45y33, Px44y34, Px46y34 } CellNode (45 @ 34) (20)Px48y14 { Px49y14, Px48y13, Px47y14, Px48y15 } CellNode (48 @ 14) (20)Px49y15 { Px48y15, Px49y14, Px49y16, Px50y15 } CellNode (49 @ 15) (20)Px22y83 { Px23y83, Px22y84, Px21y83, Px22y82 } CellNode (22 @ 83) (20)Px25y63 { Px25y64, Px26y63, Px24y63, Px25y62 } CellNode (25 @ 63) (20)Px31y25 { Px31y26, Px31y24, Px32y25 } CellNode (31 @ 25) (20)Px77y78 { Px77y77, Px78y78, Px77y79, Px76y78 } CellNode (77 @ 78) (20)Px54y19 { Px53y19, Px54y18, Px54y20, Px55y19 } CellNode (54 @ 19) (20)Px46y78 { Px45y78, Px47y78, Px46y77, Px46y79 } CellNode (46 @ 78) (20)Px49y58 { Px48y58, Px50y58, Px49y57, Px49y59 } CellNode (49 @ 58) (20)Px45y77 { Px45y78, Px46y77, Px44y77, Px45y76 } CellNode (45 @ 77) (20)Px31y68 { Px31y69, Px30y68, Px32y68, Px31y67 } CellNode (31 @ 68) (20)Px6y76 { Px6y77, Px7y76, Px5y76, Px6y75 } CellNode (6 @ 76) (20)Px53y18 { Px53y19, Px54y18, Px52y18, Px53y17 } CellNode (53 @ 18) (20)Px48y57 { Px48y58, Px49y57, Px48y56, Px47y57 } CellNode (48 @ 57) (20)Px7y77 { Px7y78, Px6y77, Px8y77, Px7y76 } CellNode (7 @ 77) (20)Px13y76 { Px13y75, Px12y76, Px13y77, Px14y76 } CellNode (13 @ 76) (20)Px30y67 { Px30y68, Px31y67, Px29y67, Px30y66 } CellNode (30 @ 67) (20)Px34y48 { Px34y49, Px33y48, Px35y48, Px34y47 } CellNode (34 @ 48) (20)Px14y77 { Px14y78, Px13y77, Px15y77, Px14y76 } CellNode (14 @ 77) (20)Px87y82 { Px86y82, Px88y82, Px87y83, Px87y81 } CellNode (87 @ 82) (20)Px72y72 { Px71y72, Px72y71, Px73y72, Px72y73 } CellNode (72 @ 72) (20)Px64y23 { Px63y23, Px65y23, Px64y24 } CellNode (64 @ 23) (20)Px56y82 { Px55y82, Px57y82, Px56y81, Px56y83 } CellNode (56 @ 82) (20)Px41y72 { Px40y72, Px42y72, Px41y73 } CellNode (41 @ 72) (20)Px55y81 { Px55y82, Px56y81, Px54y81, Px55y80 } CellNode (55 @ 81) (20)Px47y32 { Px48y32, Px46y32, Px47y33, Px47y31 } CellNode (47 @ 32) (20)Px43y51 { Px42y51, Px43y50 } CellNode (43 @ 51) (20)Px46y31 { Px46y30, Px46y32, Px47y31, Px45y31 } CellNode (46 @ 31) (20)Px24y81 { Px24y82, Px25y81, Px23y81, Px24y80 } CellNode (24 @ 81) (20)Px27y61 { Px26y61, Px27y62 } CellNode (27 @ 61) (20)Px23y80 { Px22y80, Px23y79, Px23y81, Px24y80 } CellNode (23 @ 80) (20)Px79y76 { Px80y76, Px79y75, Px79y77, Px78y76 } CellNode (79 @ 76) (20)Px53y37 { Px54y37, Px53y38, Px52y37, Px53y36 } CellNode (53 @ 37) (20)Px56y17 { Px56y18, Px57y17, Px55y17, Px56y16 } CellNode (56 @ 17) (20)Px52y36 { Px52y37, Px53y36, Px51y36, Px52y35 } CellNode (52 @ 36) (20)Px55y16 { Px55y17, Px56y16, Px54y16, Px55y15 } CellNode (55 @ 16) (20)Px9y75 { Px9y74, Px9y76, Px8y75, Px10y75 } CellNode (9 @ 75) (20)Px8y74 { Px8y73, Px7y74, Px8y75, Px9y74 } CellNode (8 @ 74) (20)Px32y65 { Px32y64, Px31y65, Px32y66, Px33y65 } CellNode (32 @ 65) (20)Px35y45 { Px35y44, Px34y45, Px35y46, Px36y45 } CellNode (35 @ 45) (20)Px36y46 { Px37y46, Px36y47, Px35y46, Px36y45 } CellNode (36 @ 46) (20)Px16y75 { Px17y75, Px16y74, Px16y76, Px15y75 } CellNode (16 @ 75) (20)Px47y75 { Px48y75, Px47y76, Px46y75, Px47y74 } CellNode (47 @ 75) (20)Px15y74 { Px16y74, Px14y74, Px15y73, Px15y75 } CellNode (15 @ 74) (20)Px33y66 { Px34y66, Px32y66, Px33y67, Px33y65 } CellNode (33 @ 66) (20)Px78y75 { Px79y75, Px78y74, Px77y75, Px78y76 } CellNode (78 @ 75) (20)Px52y79 { Px52y78, Px52y80, Px53y79, Px51y79 } CellNode (52 @ 79) (20)Px39y69 { Px38y69, Px39y68, Px39y70, Px40y69 } CellNode (39 @ 69) (20)Px21y79 { Px21y78, Px20y79, Px21y80, Px22y79 } CellNode (21 @ 79) (20)Px89y80 { Px88y80, Px89y81, Px90y80 } CellNode (89 @ 80) (20)Px74y70 { Px75y70, Px74y71, Px73y70, Px74y69 } CellNode (74 @ 70) (20)Px51y11 { Px50y11, Px51y12, Px52y11 } CellNode (51 @ 11) (20)Px62y40 { Px63y40, Px61y40, Px62y39 } CellNode (62 @ 40) (20)Px50y10 { Px50y11 } CellNode (50 @ 10) (20)Px49y30 { Px49y29, Px49y31, Px48y30, Px50y30 } CellNode (49 @ 30) (20)Px94y84 { Px95y84, Px94y83, Px93y84 } CellNode (94 @ 84) (20)Px58y15 { Px58y16, Px57y15, Px59y15, Px58y14 } CellNode (58 @ 15) (20)Px47y6 { Px48y6 } CellNode (47 @ 6) (20)Px57y14 { Px57y13, Px56y14, Px57y15, Px58y14 } CellNode (57 @ 14) (20)Px54y34 { Px54y33, Px54y35, Px53y34 } CellNode (54 @ 34) (20)Px38y44 { Px39y44, Px38y45, Px37y44 } CellNode (38 @ 44) (20)Px34y63 { Px34y64, Px34y62, Px33y63, Px35y63 } CellNode (34 @ 63) (20)Px30y82 { Px30y83, Px31y82, Px29y82, Px30y81 } CellNode (30 @ 82) (20)Px49y73 { Px49y72, Px49y74, Px48y73, Px50y73 } CellNode (49 @ 73) (20)Px31y83 { Px31y84, Px30y83, Px31y82, Px32y83 } CellNode (31 @ 83) (20)Px60y39 { Px60y38, Px60y40, Px61y39, Px59y39 } CellNode (60 @ 39) (20)Px17y72 { Px17y73, Px18y72, Px17y71, Px16y72 } CellNode (17 @ 72) (20)Px71y68 { Px70y68, Px72y68, Px71y69, Px71y67 } CellNode (71 @ 68) (20)Px55y78 { Px55y77, Px55y79, Px56y78, Px54y78 } CellNode (55 @ 78) (20)Px40y68 { Px39y68, Px40y69 } CellNode (40 @ 68) (20)Px43y48 { Px44y48, Px42y48, Px43y47, Px43y49 } CellNode (43 @ 48) (20)Px46y28 { Px45y28, Px46y29, Px46y27, Px47y28 } CellNode (46 @ 28) (20)Px42y47 { Px42y48, Px43y47, Px41y47, Px42y46 } CellNode (42 @ 47) (20)Px54y77 { Px55y77, Px53y77, Px54y76, Px54y78 } CellNode (54 @ 77) (20)Px23y77 { Px23y78, Px24y77, Px22y77, Px23y76 } CellNode (23 @ 77) (20)Px22y76 { Px22y77, Px23y76, Px22y75, Px21y76 } CellNode (22 @ 76) (20)Px96y82 { Px96y83, Px97y82, Px95y82, Px96y81 } CellNode (96 @ 82) (20)Px50y72 { Px49y72, Px50y73, Px51y72 } CellNode (50 @ 72) (20)Px64y81 { Px65y81, Px64y80, Px63y81, Px64y82 } CellNode (64 @ 81) (20)Px56y32 { Px55y32, Px56y31, Px56y33 } CellNode (56 @ 32) (20)Px41y22 { Px42y22, Px41y23 } CellNode (41 @ 22) (20)Px55y31 { Px55y32, Px56y31, Px55y30, Px54y31 } CellNode (55 @ 31) (20)Px33y81 { Px33y82, Px34y81, Px32y81, Px33y80 } CellNode (33 @ 81) (20)Px36y61 { Px36y62, Px35y61, Px37y61, Px36y60 } CellNode (36 @ 61) (20)Px32y80 { Px32y79, Px32y81, Px33y80, Px31y80 } CellNode (32 @ 80) (20)Px35y60 { Px35y59, Px35y61, Px36y60, Px34y60 } CellNode (35 @ 60) (20)Px62y37 { Px61y37, Px62y36, Px62y38, Px63y37 } CellNode (62 @ 37) (20)Px73y66 { Px74y66, Px73y65, Px73y67, Px72y66 } CellNode (73 @ 66) (20)Px61y36 { Px61y37, Px62y36, Px61y35, Px60y36 } CellNode (61 @ 36) (20)Px50y6 { Px49y6, Px50y5 } CellNode (50 @ 6) (20)Px72y65 { Px73y65, Px71y65, Px72y64, Px72y66 } CellNode (72 @ 65) (20)Px56y75 { Px56y76, Px57y75, Px55y75, Px56y74 } CellNode (56 @ 75) (20)Px19y70 { Px18y70, Px19y71, Px20y70 } CellNode (19 @ 70) (20)Px48y26 { Px48y27, Px47y26, Px49y26, Px48y25 } CellNode (48 @ 26) (20)Px25y75 { Px26y75, Px24y75, Px25y76, Px25y74 } CellNode (25 @ 75) (20)Px39y84 { Px38y84, Px40y84, Px39y83 } CellNode (39 @ 84) (20)Px56y6 { Px56y7, Px57y6, Px55y6 } CellNode (56 @ 6) (20)Px24y74 { Px24y73, Px23y74, Px24y75, Px25y74 } CellNode (24 @ 74) (20)Px61y79 { Px61y80, Px62y79, Px60y79, Px61y78 } CellNode (61 @ 79) (20)Px48y69 { Px48y70, Px49y69, Px48y68, Px47y69 } CellNode (48 @ 69) (20)Px33y59 { Px33y58, Px32y59, Px33y60, Px34y59 } CellNode (33 @ 59) (20)Px30y79 { Px30y78, Px30y80, Px31y79, Px29y79 } CellNode (30 @ 79) (20)Px55y9 { Px54y9, Px55y10, Px56y9, Px55y8 } CellNode (55 @ 9) (20)Px58y30 { Px59y30, Px57y30, Px58y31, Px58y29 } CellNode (58 @ 30) (20)Px40y40 { Px40y39, Px40y41, Px39y40, Px41y40 } CellNode (40 @ 40) (20)Px72y84 { Px71y84, Px73y84, Px72y83 } CellNode (72 @ 84) (20)Px75y64 { Px74y64, Px75y63, Px75y65 } CellNode (75 @ 64) (20)Px71y83 { Px71y84, Px72y83, Px70y83, Px71y82 } CellNode (71 @ 83) (20)Px63y34 { Px63y35, Px64y34, Px63y33, Px62y34 } CellNode (63 @ 34) (20)Px74y63 { Px74y64, Px75y63, Px73y63 } CellNode (74 @ 63) (20)Px40y83 { Px40y82, Px40y84, Px39y83, Px41y83 } CellNode (40 @ 83) (20)Px1y82 { Px1y83, Px2y82, Px1y81 } CellNode (1 @ 82) (20)Px57y72 { Px57y73, Px56y72 } CellNode (57 @ 72) (20)Px26y72 { Px26y73, Px25y72, Px26y71, Px27y72 } CellNode (26 @ 72) (20)Px64y78 { Px64y79, Px65y78, Px63y78, Px64y77 } CellNode (64 @ 78) (20)Px63y77 { Px63y76, Px63y78, Px64y77, Px62y77 } CellNode (63 @ 77) (20)Px55y28 { Px54y28, Px56y28, Px55y29 } CellNode (55 @ 28) (20)Px54y27 { Px53y27, Px54y28, Px54y26 } CellNode (54 @ 27) (20)Px32y77 { Px31y77, Px33y77, Px32y76, Px32y78 } CellNode (32 @ 77) (20)Px35y57 { Px35y58, Px34y57, Px35y56, Px36y57 } CellNode (35 @ 57) (20)Px31y76 { Px31y77, Px32y76, Px30y76, Px31y75 } CellNode (31 @ 76) (20)Px23y27 { Px23y28, Px24y27 } CellNode (23 @ 27) (20)Px34y56 { Px34y57, Px35y56, Px33y56, Px34y55 } CellNode (34 @ 56) (20)Px73y81 { Px73y80, Px73y82, Px74y81, Px72y81 } CellNode (73 @ 81) (20)Px65y32 { Px64y32, Px65y33, Px65y31 } CellNode (65 @ 32) (20)Px50y22 { Px51y22, Px50y23 } CellNode (50 @ 22) (20)Px64y31 { Px65y31, Px63y31, Px64y30, Px64y32 } CellNode (64 @ 31) (20)Px42y81 { Px41y81, Px43y81, Px42y80, Px42y82 } CellNode (42 @ 81) (20)Px3y80 { Px4y80, Px3y81, Px2y80, Px3y79 } CellNode (3 @ 80) (20)Px41y80 { Px41y81, Px42y80, Px40y80, Px41y79 } CellNode (41 @ 80) (20)Px33y31 { Px32y31, Px34y31, Px33y30 } CellNode (33 @ 31) (20)Px28y70 { Px29y70, Px28y71, Px27y70 } CellNode (28 @ 70) (20)Px10y80 { Px10y79, Px9y80, Px10y81, Px11y80 } CellNode (10 @ 80) (20)Px65y75 { Px65y74, Px64y75, Px66y75, Px65y76 } CellNode (65 @ 75) (20)Px57y26 { Px57y25, Px57y27 } CellNode (57 @ 26) (20)Px79y84 { Px78y84, Px79y83, Px80y84 } CellNode (79 @ 84) (20)Px56y25 { Px56y24, Px55y25, Px57y25 } CellNode (56 @ 25) (20)Px34y75 { Px34y76, Px33y75, Px35y75, Px34y74 } CellNode (34 @ 75) (20)Px9y83 { Px10y83, Px9y84, Px9y82, Px8y83 } CellNode (9 @ 83) (20)Px33y74 { Px33y75, Px34y74, Px33y73, Px32y74 } CellNode (33 @ 74) (20)Px36y54 { Px36y55, Px37y54, Px35y54, Px36y53 } CellNode (36 @ 54) (20)Px39y34 { Px39y35, Px40y34, Px38y34, Px39y33 } CellNode (39 @ 34) (20)Px37y55 { Px37y56, Px36y55, Px38y55, Px37y54 } CellNode (37 @ 55) (20)Px70y79 { Px71y79, Px70y78, Px69y79, Px70y80 } CellNode (70 @ 79) (20)Px16y83 { Px15y83, Px16y82, Px16y84, Px17y83 } CellNode (16 @ 83) (20)Px17y84 { Px16y84, Px17y83, Px18y84 } CellNode (17 @ 84) (20)Px48y84 { Px47y84, Px48y83, Px49y84 } CellNode (48 @ 84) (20)Px73y59 { Px73y60, Px73y58, Px72y59 } CellNode (73 @ 59) (20)Px45y39 { Px46y39, Px45y38, Px44y39 } CellNode (45 @ 39) (20)Px48y19 { Px48y18, Px49y19, Px47y19 } CellNode (48 @ 19) (20)Px67y30 { Px66y30, Px68y30, Px67y29 } CellNode (67 @ 30) (20)Px81y84 { Px80y84, Px81y83, Px82y84 } CellNode (81 @ 84) (20)Px80y83 { Px79y83, Px81y83, Px80y82, Px80y84 } CellNode (80 @ 83) (20)Px67y73 { Px68y73, Px66y73, Px67y74, Px67y72 } CellNode (67 @ 73) (20)Px55y43 { Px56y43, Px55y44, Px54y43, Px55y42 } CellNode (55 @ 43) (20)Px58y23 { Px58y22, Px57y23, Px58y24 } CellNode (58 @ 23) (20)Px40y33 { Px40y32, Px41y33, Px40y34, Px39y33 } CellNode (40 @ 33) (20)Px66y72 { Px66y73, Px67y72, Px65y72, Px66y71 } CellNode (66 @ 72) (20)Px35y72 { Px34y72, Px35y71, Px35y73, Px36y72 } CellNode (35 @ 72) (20)Px38y52 { Px37y52, Px38y51, Px38y53, Px39y52 } CellNode (38 @ 52) (20)Px49y81 { Px49y80, Px49y82, Px50y81, Px48y81 } CellNode (49 @ 81) (20)Px72y77 { Px73y77, Px72y78, Px72y76, Px71y77 } CellNode (72 @ 77) (20)Px18y81 { Px19y81, Px18y80, Px17y81, Px18y82 } CellNode (18 @ 81) (20)Px64y28 { Px63y28, Px65y28, Px64y29 } CellNode (64 @ 28) (20)Px2y76 { Px3y76, Px1y76, Px2y75, Px2y77 } CellNode (2 @ 76) (20)Px41y77 { Px41y76, Px42y77, Px40y77, Px41y78 } CellNode (41 @ 77) (20)Px47y37 { Px47y36, Px47y38, Px46y37, Px48y37 } CellNode (47 @ 37) (20)Px32y27 { Px33y27, Px31y27, Px32y26, Px32y28 } CellNode (32 @ 27) (20)Px40y76 { Px41y76, Px39y76, Px40y75, Px40y77 } CellNode (40 @ 76) (20)Px46y36 { Px47y36, Px45y36, Px46y35, Px46y37 } CellNode (46 @ 36) (20)Px27y66 { Px26y66, Px27y67, Px27y65, Px28y66 } CellNode (27 @ 66) (20)Px1y75 { Px2y75, Px1y76, Px1y74 } CellNode (1 @ 75) (20)Px26y65 { Px26y66, Px27y65, Px26y64, Px25y65 } CellNode (26 @ 65) (20)Px8y79 { Px9y79, Px8y78, Px7y79, Px8y80 } CellNode (8 @ 79) (20)Px49y5 { Px50y5, Px48y5, Px49y6, Px49y4 } CellNode (49 @ 5) (20)Px82y81 { Px83y81, Px82y82, Px81y81, Px82y80 } CellNode (82 @ 81) (20)Px15y79 { Px15y80, Px16y79, Px15y78, Px14y79 } CellNode (15 @ 79) (20)Px69y71 { Px69y72, Px68y71, Px70y71, Px69y70 } CellNode (69 @ 71) (20)Px51y81 { Px51y80, Px51y82, Px52y81, Px50y81 } CellNode (51 @ 81) (20)Px57y41 { Px57y40, Px57y42, Px58y41, Px56y41 } CellNode (57 @ 41) (20)Px68y70 { Px68y69, Px68y71, Px69y70, Px67y70 } CellNode (68 @ 70) (20)Px50y80 { Px51y80, Px50y79, Px50y81, Px49y80 } CellNode (50 @ 80) (20)Px56y40 { Px57y40, Px55y40, Px56y39, Px56y41 } CellNode (56 @ 40) (20)Px37y70 { Px37y71, Px37y69, Px36y70 } CellNode (37 @ 70) (20)Px74y75 { Px74y76, Px73y75, Px75y75, Px74y74 } CellNode (74 @ 75) (20)Px88y84 { Px88y83, Px89y84, Px87y84 } CellNode (88 @ 84) (20)Px51y16 { Px51y17, Px50y16, Px51y15, Px52y16 } CellNode (51 @ 16) (20)Px73y74 { Px72y74, Px73y73, Px73y75, Px74y74 } CellNode (73 @ 74) (20)Px50y15 { Px50y16, Px51y15, Px49y15, Px50y14 } CellNode (50 @ 15) (20)Px57y84 { Px57y83, Px58y84, Px56y84 } CellNode (57 @ 84) (20)Px42y74 { Px43y74, Px42y75, Px41y74, Px42y73 } CellNode (42 @ 74) (20)Px34y25 { Px34y26, Px33y25 } CellNode (34 @ 25) (20)Px48y34 { Px48y35, Px49y34, Px48y33, Px47y34 } CellNode (48 @ 34) (20)Px26y84 { Px25y84, Px26y83, Px27y84 } CellNode (26 @ 84) (20)Px11y74 { Px11y75, Px12y74, Px10y74, Px11y73 } CellNode (11 @ 74) (20)Px65y25 { Px65y26, Px64y25 } CellNode (65 @ 25) (20)Px28y63 { Px28y64, Px29y63, Px28y62, Px27y63 } CellNode (28 @ 63) (20)Px10y73 { Px10y72, Px9y73, Px10y74, Px11y73 } CellNode (10 @ 73) (20)Px66y69 { Px67y69, Px66y70 } CellNode (66 @ 69) (20)Px51y59 { Px52y59, Px50y59, Px51y58, Px51y60 } CellNode (51 @ 59) (20)Px54y39 { Px55y39, Px54y38, Px53y39, Px54y40 } CellNode (54 @ 39) (20)Px50y58 { Px50y59, Px51y58, Px50y57, Px49y58 } CellNode (50 @ 58) (20)Px57y19 { Px58y19, Px56y19 } CellNode (57 @ 19) (20)Px49y78 { Px49y79, Px48y78, Px50y78, Px49y77 } CellNode (49 @ 78) (20)Px34y68 { Px35y68, Px34y69, Px33y68, Px34y67 } CellNode (34 @ 68) (20)Px48y77 { Px48y78, Px49y77, Px48y76, Px47y77 } CellNode (48 @ 77) (20)Px37y48 { Px37y49, Px38y48, Px36y48, Px37y47 } CellNode (37 @ 48) (20)Px49y35 { Px48y35, Px50y35, Px49y34, Px49y36 } CellNode (49 @ 35) (20)Px25y83 { Px25y84, Px26y83, Px24y83, Px25y82 } CellNode (25 @ 83) (20)Px17y77 { Px17y76, Px16y77, Px17y78, Px18y77 } CellNode (17 @ 77) (20)Px29y64 { Px29y65, Px30y64, Px28y64, Px29y63 } CellNode (29 @ 64) (20)Px4y74 { Px3y74, Px4y75 } CellNode (4 @ 74) (20)Px52y5 { Px51y5, Px52y4, Px52y6 } CellNode (52 @ 5) (20)Px76y73 { Px76y74, Px76y72, Px77y73, Px75y73 } CellNode (76 @ 73) (20)Px75y72 { Px76y72, Px74y72, Px75y71, Px75y73 } CellNode (75 @ 72) (20)Px52y13 { Px53y13, Px52y14, Px51y13, Px52y12 } CellNode (52 @ 13) (20)Px44y72 { Px44y73, Px43y72, Px45y72 } CellNode (44 @ 72) (20)Px58y81 { Px57y81, Px58y82, Px58y80 } CellNode (58 @ 81) (20)Px43y71 { Px43y72 } CellNode (43 @ 71) (20)Px81y77 { Px82y77, Px81y76, Px80y77, Px81y78 } CellNode (81 @ 77) (20)Px27y81 { Px26y81, Px27y80, Px27y82, Px28y81 } CellNode (27 @ 81) (20)Px12y71 { Px12y72, Px12y70, Px11y71, Px13y71 } CellNode (12 @ 71) (20)Px50y77 { Px51y77, Px49y77, Px50y78, Px50y76 } CellNode (50 @ 77) (20)Px53y57 { Px54y57, Px53y58, Px52y57, Px53y56 } CellNode (53 @ 57) (20)Px56y37 { Px57y37, Px56y38, Px55y37, Px56y36 } CellNode (56 @ 37) (20)Px59y17 { Px59y18, Px58y17 } CellNode (59 @ 17) (20)Px57y8 { Px56y8, Px57y9, Px58y8, Px57y7 } CellNode (57 @ 8) (20)Px52y56 { Px51y56, Px53y56, Px52y57 } CellNode (52 @ 56) (20)Px36y66 { Px36y65, Px37y66, Px35y66, Px36y67 } CellNode (36 @ 66) (20)Px39y46 { Px39y45, Px39y47, Px38y46, Px40y46 } CellNode (39 @ 46) (20)Px35y65 { Px36y65, Px34y65, Px35y64, Px35y66 } CellNode (35 @ 65) (20)Px38y45 { Px39y45, Px37y45, Px38y44, Px38y46 } CellNode (38 @ 45) (20)Px19y75 { Px18y75, Px20y75, Px19y74, Px19y76 } CellNode (19 @ 75) (20)Px18y74 { Px18y75, Px19y74, Px18y73, Px17y74 } CellNode (18 @ 74) (20)Px91y81 { Px91y82, Px90y81, Px91y80, Px92y81 } CellNode (91 @ 81) (20)Px90y80 { Px90y81, Px91y80, Px89y80, Px90y79 } CellNode (90 @ 80) (20)Px24y79 { Px25y79, Px24y78, Px23y79, Px24y80 } CellNode (24 @ 79) (20)Px78y71 { Px77y71, Px78y72 } CellNode (78 @ 71) (20)Px66y41 { Px66y42, Px67y41, Px65y41, Px66y40 } CellNode (66 @ 41) (20)Px51y31 { Px51y30, Px52y31, Px51y32, Px50y31 } CellNode (51 @ 31) (20)Px54y11 { Px54y12, Px55y11, Px53y11 } CellNode (54 @ 11) (20)Px50y30 { Px51y30, Px49y30, Px50y29, Px50y31 } CellNode (50 @ 30) (20)Px65y40 { Px66y40, Px65y39, Px65y41 } CellNode (65 @ 40) (20)Px31y60 { Px32y60, Px31y61 } CellNode (31 @ 60) (20)Px46y70 { Px47y70, Px46y69, Px45y70 } CellNode (46 @ 70) (20)Px77y70 { Px76y70, Px77y71, Px77y69 } CellNode (77 @ 70) (20)Px97y84 { Px97y83, Px96y84 } CellNode (97 @ 84) (20)Px60y16 { Px60y15 } CellNode (60 @ 16) (20)Px66y84 { Px67y84, Px65y84, Px66y83 } CellNode (66 @ 84) (20)Px58y35 { Px58y34, Px59y35, Px58y36, Px57y35 } CellNode (58 @ 35) (20)Px43y25 { Px42y25, Px44y25, Px43y24 } CellNode (43 @ 25) (20)Px57y34 { Px58y34, Px57y33, Px56y34, Px57y35 } CellNode (57 @ 34) (20)Px42y24 { Px42y25, Px43y24, Px42y23 } CellNode (42 @ 24) (20)Px38y64 { Px38y65 } CellNode (38 @ 64) (20)Px34y83 { Px34y84, Px35y83, Px33y83, Px34y82 } CellNode (34 @ 83) (20)Px40y45 { Px41y45, Px39y45, Px40y44, Px40y46 } CellNode (40 @ 45) (20)Px20y74 { Px20y75, Px19y74, Px21y74, Px20y73 } CellNode (20 @ 74) (20)Px75y69 { Px75y70, Px76y69, Px74y69, Px75y68 } CellNode (75 @ 69) (20)Px65y83 { Px65y82, Px64y83, Px65y84, Px66y83 } CellNode (65 @ 83) (20)Px63y39 { Px63y38, Px63y40, Px64y39, Px62y39 } CellNode (63 @ 39) (20)Px51y74 { Px50y74, Px51y73, Px52y74, Px51y75 } CellNode (51 @ 74) (20)Px62y38 { Px63y38, Px61y38, Px62y37, Px62y39 } CellNode (62 @ 38) (20)Px74y68 { Px73y68, Px74y67, Px74y69, Px75y68 } CellNode (74 @ 68) (20)Px46y48 { Px47y48, Px46y49 } CellNode (46 @ 48) (20)Px49y28 { Px49y29, Px50y28, Px48y28, Px49y27 } CellNode (49 @ 28) (20)Px57y77 { Px57y78, Px56y77, Px57y76 } CellNode (57 @ 77) (20)Px26y77 { Px27y77, Px26y78, Px26y76, Px25y77 } CellNode (26 @ 77) (20)Px68y82 { Px68y83, Px68y81, Px69y82, Px67y82 } CellNode (68 @ 82) (20)Px53y72 { Px54y72, Px52y72, Px53y73 } CellNode (53 @ 72) (20)Px45y23 { Px44y23, Px45y22, Px46y23 } CellNode (45 @ 23) (20)Px59y32 { Px59y33, Px60y32, Px58y32, Px59y31 } CellNode (59 @ 32) (20)Px41y42 { Px42y42, Px41y43, Px40y42, Px41y41 } CellNode (41 @ 42) (20)Px67y81 { Px68y81, Px67y80, Px66y81, Px67y82 } CellNode (67 @ 81) (20)Px36y81 { Px36y82, Px35y81, Px37y81, Px36y80 } CellNode (36 @ 81) (20)Px39y61 { Px39y62 } CellNode (39 @ 61) (20)Px21y71 { Px21y70, Px20y71, Px21y72, Px22y71 } CellNode (21 @ 71) (20)Px77y67 { Px76y67, Px77y68 } CellNode (77 @ 67) (20)Px44y22 { Px44y23, Px45y22, Px43y22 } CellNode (44 @ 22) (20)Px65y37 { Px64y37, Px65y36, Px65y38 } CellNode (65 @ 37) (20)Px50y27 { Px51y27, Px50y28, Px49y27, Px50y26 } CellNode (50 @ 27) (20)Px64y36 { Px64y37, Px65y36, Px63y36, Px64y35 } CellNode (64 @ 36) (20)Px76y66 { Px75y66, Px76y67 } CellNode (76 @ 66) (20)Px59y75 { Px59y76, Px59y74, Px60y75 } CellNode (59 @ 75) (20)Px2y84 { Px3y84, Px1y84, Px2y83 } CellNode (2 @ 84) (20)Px28y75 { Px28y74, Px29y75, Px27y75, Px28y76 } CellNode (28 @ 75) (20)Px27y74 { Px28y74, Px26y74, Px27y73, Px27y75 } CellNode (27 @ 74) (20)Px64y79 { Px64y78, Px64y80, Px65y79, Px63y79 } CellNode (64 @ 79) (20)Px33y79 { Px33y78, Px32y79, Px33y80, Px34y79 } CellNode (33 @ 79) (20)Px36y59 { Px37y59, Px36y58, Px35y59, Px36y60 } CellNode (36 @ 59) (20)Px24y29 { Px25y29, Px24y28, Px23y29, Px24y30 } CellNode (24 @ 29) (20)Px72y61 { Px71y61, Px73y61, Px72y60 } CellNode (72 @ 61) (20)Px60y31 { Px61y31, Px59y31, Px60y32, Px60y30 } CellNode (60 @ 31) (20)Px71y60 { Px71y59, Px71y61, Px72y60, Px70y60 } CellNode (71 @ 60) (20)Px43y40 { Px43y39, Px43y41, Px42y40, Px44y40 } CellNode (43 @ 40) (20)Px75y84 { Px76y84, Px74y84, Px75y83 } CellNode (75 @ 84) (20)Px60y74 { Px60y75, Px59y74, Px61y74, Px60y73 } CellNode (60 @ 74) (20)Px74y83 { Px74y84, Px75y83, Px74y82, Px73y83 } CellNode (74 @ 83) (20)Px51y24 { Px51y23, Px51y25 } CellNode (51 @ 24) (20)Px43y83 { Px42y83, Px43y82, Px43y84, Px44y83 } CellNode (43 @ 83) (20)Px4y82 { Px4y83, Px5y82, Px3y82, Px4y81 } CellNode (4 @ 82) (20)Px12y83 { Px13y83, Px11y83, Px12y84, Px12y82 } CellNode (12 @ 83) (20)Px29y72 { Px29y73, Px30y72, Px29y71, Px28y72 } CellNode (29 @ 72) (20)Px11y82 { Px11y83, Px12y82, Px10y82, Px11y81 } CellNode (11 @ 82) (20)Px67y78 { Px68y78, Px67y79, Px66y78, Px67y77 } CellNode (67 @ 78) (20)Px52y68 { Px53y68, Px52y67, Px52y69, Px51y68 } CellNode (52 @ 68) (20)Px66y77 { Px66y76, Px65y77, Px66y78, Px67y77 } CellNode (66 @ 77) (20)Px69y57 { Px68y57, Px69y56, Px69y58, Px70y57 } CellNode (69 @ 57) (20)Px43y18 { Px43y19, Px44y18, Px42y18, Px43y17 } CellNode (43 @ 18) (20)Px58y28 { Px57y28, Px58y27, Px58y29, Px59y28 } CellNode (58 @ 28) (20)Px35y77 { Px35y78, Px36y77, Px34y77, Px35y76 } CellNode (35 @ 77) (20)Px27y28 { Px28y28, Px27y29, Px26y28, Px27y27 } CellNode (27 @ 28) (20)Px38y57 { Px39y57, Px38y58, Px37y57, Px38y56 } CellNode (38 @ 57) (20)Px26y27 { Px26y28, Px25y27, Px27y27 } CellNode (26 @ 27) (20)Px77y82 { Px77y83, Px76y82, Px78y82, Px77y81 } CellNode (77 @ 82) (20)Px62y72 { Px63y72, Px61y72, Px62y73 } CellNode (62 @ 72) (20)Px76y81 { Px76y80, Px75y81, Px76y82, Px77y81 } CellNode (76 @ 81) (20)Px53y22 { Px54y22, Px53y23, Px53y21, Px52y22 } CellNode (53 @ 22) (20)Px45y81 { Px45y82, Px44y81, Px46y81, Px45y80 } CellNode (45 @ 81) (20)Px6y80 { Px6y81, Px7y80, Px5y80, Px6y79 } CellNode (6 @ 80) (20)Px33y51 { Px33y52, Px34y51, Px32y51, Px33y50 } CellNode (33 @ 51) (20)Px36y31 { Px36y32, Px37y31, Px35y31, Px36y30 } CellNode (36 @ 31) (20)Px71y57 { Px70y57, Px71y56, Px71y58, Px72y57 } CellNode (71 @ 57) (20)Px37y32 { Px36y32, Px37y31, Px37y33 } CellNode (37 @ 32) (20)Px70y56 { Px70y57, Px71y56, Px69y56 } CellNode (70 @ 56) (20)Px13y80 { Px12y80, Px13y79, Px13y81, Px14y80 } CellNode (13 @ 80) (20)Px69y76 { Px68y76, Px69y75, Px70y76, Px69y77 } CellNode (69 @ 76) (20)Px44y80 { Px44y79, Px44y81, Px45y80, Px43y80 } CellNode (44 @ 80) (20)Px68y75 { Px69y75, Px67y75, Px68y74, Px68y76 } CellNode (68 @ 75) (20)Px42y36 { Px43y36, Px42y37, Px41y36, Px42y35 } CellNode (42 @ 36) (20)Px48y61 { Px49y61, Px48y62, Px48y60, Px47y61 } CellNode (48 @ 61) (20)Px59y25 { Px60y25, Px59y26, Px59y24 } CellNode (59 @ 25) (20)Px41y35 { Px41y34, Px41y36, Px42y35, Px40y35 } CellNode (41 @ 35) (20)Px22y65 { Px22y64, Px23y65, Px22y66 } CellNode (22 @ 65) (20)Px36y74 { Px35y74, Px36y75, Px37y74, Px36y73 } CellNode (36 @ 74) (20)Px39y54 { Px39y53, Px39y55, Px40y54, Px38y54 } CellNode (39 @ 54) (20)Px30y71 { Px31y71, Px29y71, Px30y72, Px30y70 } CellNode (30 @ 71) (20)Px37y75 { Px37y76, Px38y75, Px36y75, Px37y74 } CellNode (37 @ 75) (20)Px73y79 { Px74y79, Px72y79, Px73y78, Px73y80 } CellNode (73 @ 79) (20)Px19y83 { Px20y83, Px18y83, Px19y82, Px19y84 } CellNode (19 @ 83) (20)Px3y78 { Px3y77, Px2y78, Px4y78, Px3y79 } CellNode (3 @ 78) (20)Px42y79 { Px42y78, Px42y80, Px43y79, Px41y79 } CellNode (42 @ 79) (20)Px33y29 { Px34y29, Px33y28, Px32y29, Px33y30 } CellNode (33 @ 29) (20)Px11y79 { Px10y79, Px11y78, Px11y80, Px12y79 } CellNode (11 @ 79) (20)Px10y78 { Px9y78, Px10y79, Px11y78, Px10y77 } CellNode (10 @ 78) (20)Px64y70 { Px65y70, Px64y71 } CellNode (64 @ 70) (20)Px52y40 { Px53y40, Px52y41, Px52y39 } CellNode (52 @ 40) (20)Px84y84 { Px84y83, Px83y84, Px85y84 } CellNode (84 @ 84) (20)Px83y83 { Px83y84, Px84y83, Px83y82, Px82y83 } CellNode (83 @ 83) (20)Px61y25 { Px62y25, Px60y25, Px61y26, Px61y24 } CellNode (61 @ 25) (20)Px60y24 { Px60y25, Px61y24, Px59y24 } CellNode (60 @ 24) (20)Px41y54 { Px41y53, Px40y54 } CellNode (41 @ 54) (20)Px44y34 { Px44y33, Px44y35, Px43y34, Px45y34 } CellNode (44 @ 34) (20)Px47y14 { Px47y13, Px48y14, Px46y14, Px47y15 } CellNode (47 @ 14) (20)Px43y33 { Px44y33, Px42y33, Px43y34 } CellNode (43 @ 33) (20)Px40y53 { Px41y53, Px40y52, Px40y54, Px39y53 } CellNode (40 @ 53) (20)Px24y63 { Px23y63, Px25y63, Px24y62, Px24y64 } CellNode (24 @ 63) (20)Px38y72 { Px39y72, Px38y71, Px37y72, Px38y73 } CellNode (38 @ 72) (20)Px23y62 { Px23y63, Px24y62, Px23y61, Px22y62 } CellNode (23 @ 62) (20)Px76y78 { Px76y79, Px75y78, Px77y78, Px76y77 } CellNode (76 @ 78) (20)Px20y82 { Px20y83, Px19y82, Px21y82, Px20y81 } CellNode (20 @ 82) (20)Px39y73 { Px39y72, Px39y74, Px40y73, Px38y73 } CellNode (39 @ 73) (20)Px21y83 { Px21y84, Px20y83, Px21y82, Px22y83 } CellNode (21 @ 83) (20)Px52y18 { Px51y18, Px53y18, Px52y19 } CellNode (52 @ 18) (20)Px52y83 { Px52y82, Px53y83, Px52y84, Px51y83 } CellNode (52 @ 83) (20)Px5y76 { Px6y76, Px5y77, Px4y76, Px5y75 } CellNode (5 @ 76) (20)Px47y57 { Px47y56, Px46y57, Px47y58, Px48y57 } CellNode (47 @ 57) (20)Px43y76 { Px44y76, Px42y76, Px43y75, Px43y77 } CellNode (43 @ 76) (20)Px44y77 { Px43y77, Px44y76, Px45y77, Px44y78 } CellNode (44 @ 77) (20)Px75y77 { Px75y78, Px76y77, Px75y76, Px74y77 } CellNode (75 @ 77) (20)Px46y13 { Px47y13, Px46y14 } CellNode (46 @ 13) (20)Px12y76 { Px12y77, Px13y76, Px11y76, Px12y75 } CellNode (12 @ 76) (20)Px4y75 { Px4y76, Px5y75, Px3y75, Px4y74 } CellNode (4 @ 75) (20)Px86y82 { Px86y83, Px87y82 } CellNode (86 @ 82) (20)Px71y72 { Px71y73, Px70y72, Px72y72, Px71y71 } CellNode (71 @ 72) (20)Px70y71 { Px70y70, Px69y71, Px70y72, Px71y71 } CellNode (70 @ 71) (20)Px18y79 { Px17y79, Px18y80, Px19y79, Px18y78 } CellNode (18 @ 79) (20)Px54y81 { Px53y81, Px54y80, Px54y82, Px55y81 } CellNode (54 @ 81) (20)Px57y61 { Px57y62 } CellNode (57 @ 61) (20)Px42y51 { Px42y52, Px43y51, Px41y51, Px42y50 } CellNode (42 @ 51) (20)Px53y80 { Px54y80, Px52y80, Px53y79, Px53y81 } CellNode (53 @ 80) (20)Px48y11 { Px49y11, Px48y12, Px48y10 } CellNode (48 @ 11) (20)Px45y31 { Px46y31, Px45y32, Px45y30 } CellNode (45 @ 31) (20)Px22y80 { Px23y80, Px22y81, Px21y80, Px22y79 } CellNode (22 @ 80) (20)Px49y12 { Px48y12, Px50y12, Px49y11, Px49y13 } CellNode (49 @ 12) (20)Px77y75 { Px77y74, Px76y75, Px78y75, Px77y76 } CellNode (77 @ 75) (20)Px51y36 { Px51y37, Px50y36, Px52y36, Px51y35 } CellNode (51 @ 36) (20)Px54y16 { Px55y16, Px54y17, Px53y16, Px54y15 } CellNode (54 @ 16) (20)Px50y35 { Px50y36, Px51y35, Px50y34, Px49y35 } CellNode (50 @ 35) (20)Px46y75 { Px47y75, Px46y76, Px45y75, Px46y74 } CellNode (46 @ 75) (20)Px31y65 { Px32y65, Px31y66, Px30y65, Px31y64 } CellNode (31 @ 65) (20)Px34y45 { Px34y44, Px35y45, Px34y46 } CellNode (34 @ 45) (20)Px30y64 { Px30y63, Px30y65, Px31y64, Px29y64 } CellNode (30 @ 64) (20)Px45y74 { Px45y75, Px46y74, Px44y74, Px45y73 } CellNode (45 @ 74) (20)Px29y84 { Px30y84, Px28y84, Px29y83 } CellNode (29 @ 84) (20)Px14y74 { Px14y73, Px15y74, Px13y74, Px14y75 } CellNode (14 @ 74) (20)Px82y79 { Px83y79, Px82y78, Px81y79, Px82y80 } CellNode (82 @ 79) (20)Px13y73 { Px14y73, Px12y73, Px13y72, Px13y74 } CellNode (13 @ 73) (20)Px28y83 { Px27y83, Px28y84, Px29y83, Px28y82 } CellNode (28 @ 83) (20)Px69y69 { Px70y69, Px69y68, Px68y69, Px69y70 } CellNode (69 @ 69) (20)Px51y79 { Px51y80, Px52y79, Px51y78, Px50y79 } CellNode (51 @ 79) (20)Px57y39 { Px57y40, Px58y39, Px56y39, Px57y38 } CellNode (57 @ 39) (20)Px7y74 { Px6y74, Px8y74, Px7y75 } CellNode (7 @ 74) (20)Px38y69 { Px39y69, Px37y69 } CellNode (38 @ 69) (20)Px20y79 { Px20y78, Px20y80, Px21y79, Px19y79 } CellNode (20 @ 79) (20)Px37y68 { Px36y68, Px37y67, Px37y69 } CellNode (37 @ 68) (20)Px61y40 { Px60y40, Px62y40, Px61y39 } CellNode (61 @ 40) (20)Px93y84 { Px93y83, Px92y84, Px94y84 } CellNode (93 @ 84) (20)Px92y83 { Px93y83, Px92y82, Px91y83, Px92y84 } CellNode (92 @ 83) (20)Px68y44 { Px67y44, Px68y43, Px68y45 } CellNode (68 @ 44) (20)Px53y34 { Px54y34, Px52y34, Px53y35, Px53y33 } CellNode (53 @ 34) (20)Px56y14 { Px56y15, Px57y14, Px55y14, Px56y13 } CellNode (56 @ 14) (20)Px52y33 { Px52y32, Px52y34, Px53y33, Px51y33 } CellNode (52 @ 33) (20)Px9y72 { Px9y71, Px10y72, Px9y73, Px8y72 } CellNode (9 @ 72) (20)Px33y63 { Px33y62, Px34y63, Px32y63, Px33y64 } CellNode (33 @ 63) (20)Px8y71 { Px8y70, Px8y72, Px9y71 } CellNode (8 @ 71) (20)Px32y62 { Px33y62, Px31y62, Px32y61, Px32y63 } CellNode (32 @ 62) (20)Px36y43 { Px35y43, Px36y44 } CellNode (36 @ 43) (20)Px70y68 { Px71y68, Px69y68, Px70y69, Px70y67 } CellNode (70 @ 68) (20)Px16y72 { Px15y72, Px16y73, Px16y71, Px17y72 } CellNode (16 @ 72) (20)Px67y43 { Px67y44, Px68y43, Px66y43, Px67y42 } CellNode (67 @ 43) (20)Px15y71 { Px15y72, Px16y71, Px14y71, Px15y70 } CellNode (15 @ 71) (20)Px61y18 { Px60y18 } CellNode (61 @ 18) (20)Px53y77 { Px54y77, Px53y78, Px52y77, Px53y76 } CellNode (53 @ 77) (20)Px47y72 { Px46y72, Px47y73, Px48y72 } CellNode (47 @ 72) (20)Px52y76 { Px51y76, Px52y75, Px52y77, Px53y76 } CellNode (52 @ 76) (20)Px44y27 { Px44y26, Px45y27, Px44y28 } CellNode (44 @ 27) (20)Px59y37 { Px58y37, Px59y38, Px60y37, Px59y36 } CellNode (59 @ 37) (20)Px41y47 { Px41y46, Px40y47, Px42y47, Px41y48 } CellNode (41 @ 47) (20)Px21y76 { Px22y76, Px21y77, Px20y76, Px21y75 } CellNode (21 @ 76) (20)Px95y82 { Px94y82, Px96y82, Px95y81, Px95y83 } CellNode (95 @ 82) (20)Px94y81 { Px94y82, Px95y81, Px94y80, Px93y81 } CellNode (94 @ 81) (20)Px27y79 { Px27y80, Px28y79, Px27y78, Px26y79 } CellNode (27 @ 79) (20)Px12y69 { Px11y69, Px12y70, Px13y69, Px12y68 } CellNode (12 @ 69) (20)Px63y81 { Px64y81, Px62y81, Px63y82, Px63y80 } CellNode (63 @ 81) (20)Px62y80 { Px61y80, Px62y79, Px62y81, Px63y80 } CellNode (62 @ 80) (20)Px54y31 { Px54y30, Px53y31, Px55y31, Px54y32 } CellNode (54 @ 31) (20)Px58y12 { Px57y12 } CellNode (58 @ 12) (20)Px49y70 { Px48y70, Px49y69, Px50y70 } CellNode (49 @ 70) (20)Px34y60 { Px35y60, Px34y61, Px33y60, Px34y59 } CellNode (34 @ 60) (20)Px31y80 { Px32y80, Px30y80, Px31y81, Px31y79 } CellNode (31 @ 80) (20)Px22y30 { Px22y29, Px21y30, Px23y30 } CellNode (22 @ 30) (20)Px18y70 { Px17y70, Px19y70, Px18y71 } CellNode (18 @ 70) (20)Px71y65 { Px70y65, Px71y64, Px71y66, Px72y65 } CellNode (71 @ 65) (20)Px60y36 { Px59y36, Px60y35, Px60y37, Px61y36 } CellNode (60 @ 36) (20)Px55y75 { Px56y75, Px55y74, Px55y76, Px54y75 } CellNode (55 @ 75) (20)Px69y84 { Px69y83, Px68y84, Px70y84 } CellNode (69 @ 84) (20)Px43y45 { Px42y45, Px43y44, Px43y46 } CellNode (43 @ 45) (20)Px46y25 { Px46y24, Px46y26, Px45y25 } CellNode (46 @ 25) (20)Px42y44 { Px42y45, Px43y44, Px42y43, Px41y44 } CellNode (42 @ 44) (20)Px54y74 { Px55y74, Px54y73, Px53y74, Px54y75 } CellNode (54 @ 74) (20)Px91y79 { Px90y79, Px91y80, Px92y79, Px91y78 } CellNode (91 @ 79) (20)Px37y83 { Px37y84, Px38y83, Px37y82, Px36y83 } CellNode (37 @ 83) (20)Px22y73 { Px22y72, Px22y74, Px23y73, Px21y73 } CellNode (22 @ 73) (20)Px23y74 { Px24y74, Px22y74, Px23y75, Px23y73 } CellNode (23 @ 74) (20)Px60y79 { Px60y80, Px61y79, Px60y78 } CellNode (60 @ 79) (20)Px38y84 { Px38y83, Px37y84, Px39y84 } CellNode (38 @ 84) (20)Px66y39 { Px66y40, Px65y39 } CellNode (66 @ 39) (20)Px51y29 { Px51y30, Px52y29, Px50y29, Px51y28 } CellNode (51 @ 29) (20)Px47y69 { Px48y69, Px46y69, Px47y68, Px47y70 } CellNode (47 @ 69) (20)Px32y59 { Px33y59, Px32y58, Px32y60 } CellNode (32 @ 59) (20)Px37y18 { Px37y17, Px38y18 } CellNode (37 @ 18) (20)Px29y77 { Px29y76, Px29y78, Px30y77, Px28y77 } CellNode (29 @ 77) (20)Px70y83 { Px69y83, Px70y84, Px70y82, Px71y83 } CellNode (70 @ 83) (20)Px62y34 { Px62y35, Px63y34, Px61y34, Px62y33 } CellNode (62 @ 34) (20)Px73y63 { Px73y64, Px72y63, Px74y63 } CellNode (73 @ 63) (20)Px61y33 { Px61y34, Px62y33, Px61y32, Px60y33 } CellNode (61 @ 33) (20)Px50y3 { Px49y3, Px50y4 } CellNode (50 @ 3) (20)Px56y72 { Px57y72, Px55y72, Px56y73 } CellNode (56 @ 72) (20)Px48y23 { Px47y23, Px48y22, Px48y24 } CellNode (48 @ 23) (20)Px47y22 { Px46y22, Px48y22, Px47y23 } CellNode (47 @ 22) (20)Px25y72 { Px25y71, Px25y73, Px26y72, Px24y72 } CellNode (25 @ 72) (20)Px39y81 { Px39y80, Px39y82, Px40y81, Px38y81 } CellNode (39 @ 81) (20)Px24y71 { Px25y71, Px24y70, Px23y71, Px24y72 } CellNode (24 @ 71) (20)Px62y77 { Px62y78, Px63y77, Px61y77, Px62y76 } CellNode (62 @ 77) (20)Px61y76 { Px61y77, Px62y76, Px60y76, Px61y75 } CellNode (61 @ 76) (20)Px53y27 { Px54y27, Px53y28 } CellNode (53 @ 27) (20)Px30y76 { Px31y76, Px30y75, Px30y77, Px29y76 } CellNode (30 @ 76) (20)Px33y56 { Px33y55, Px34y56, Px33y57 } CellNode (33 @ 56) (20)Px5y84 { Px6y84, Px5y83, Px4y84 } CellNode (5 @ 84) (20)Px55y6 { Px56y6, Px54y6, Px55y7 } CellNode (55 @ 6) (20)Px36y79 { Px37y79, Px36y78, Px35y79, Px36y80 } CellNode (36 @ 79) (20)Px21y69 { Px21y70, Px22y69, Px20y69, Px21y68 } CellNode (21 @ 69) (20)Px72y81 { Px72y82, Px71y81, Px73y81, Px72y80 } CellNode (72 @ 81) (20)Px71y80 { Px71y79, Px71y81, Px72y80, Px70y80 } CellNode (71 @ 80) (20)Px63y31 { Px62y31, Px63y32, Px64y31, Px63y30 } CellNode (63 @ 31) (20)Px54y9 { Px55y9 } CellNode (54 @ 9) (20)Px40y80 { Px39y80, Px40y79, Px40y81, Px41y80 } CellNode (40 @ 80) (20)Px32y31 { Px32y30, Px33y31 } CellNode (32 @ 31) (20)Px46y40 { Px46y39 } CellNode (46 @ 40) (20)Px64y75 { Px64y76, Px65y75, Px63y75, Px64y74 } CellNode (64 @ 75) (20)Px78y84 { Px79y84, Px77y84, Px78y83 } CellNode (78 @ 84) (20)Px63y74 { Px63y73, Px62y74, Px63y75, Px64y74 } CellNode (63 @ 74) (20)Px55y25 { Px56y25, Px55y24, Px55y26, Px54y25 } CellNode (55 @ 25) (20)Px47y84 { Px48y84, Px46y84, Px47y83 } CellNode (47 @ 84) (20)Px32y74 { Px32y75, Px33y74, Px31y74, Px32y73 } CellNode (32 @ 74) (20)Px35y54 { Px36y54, Px34y54, Px35y55, Px35y53 } CellNode (35 @ 54) (20)Px31y73 { Px31y74, Px32y73, Px30y73, Px31y72 } CellNode (31 @ 73) (20)Px46y83 { Px47y83, Px45y83, Px46y82, Px46y84 } CellNode (46 @ 83) (20)Px7y82 { Px7y83, Px8y82, Px7y81, Px6y82 } CellNode (7 @ 82) (20)Px15y83 { Px15y84, Px16y83, Px14y83, Px15y82 } CellNode (15 @ 83) (20)Px72y59 { Px71y59, Px72y58, Px72y60, Px73y59 } CellNode (72 @ 59) (20)Px60y29 { Px59y29, Px61y29, Px60y28, Px60y30 } CellNode (60 @ 29) (20)Px54y24 { Px55y24, Px53y24, Px54y23, Px54y25 } CellNode (54 @ 24) (20)Px34y53 { Px34y54, Px35y53, Px33y53, Px34y52 } CellNode (34 @ 53) (20)Px44y39 { Px45y39, Px43y39, Px44y38, Px44y40 } CellNode (44 @ 39) (20)Px55y68 { Px54y68, Px55y67, Px55y69 } CellNode (55 @ 68) (20)Px38y34 { Px38y35, Px39y34, Px38y33, Px37y34 } CellNode (38 @ 34) (20)Px39y78 { Px39y79, Px40y78, Px38y78, Px39y77 } CellNode (39 @ 78) (20)Px46y18 { Px46y19, Px47y18, Px46y17, Px45y18 } CellNode (46 @ 18) (20)Px38y77 { Px38y78, Px39y77, Px37y77, Px38y76 } CellNode (38 @ 77) (20)Px14y82 { Px13y82, Px14y83, Px15y82, Px14y81 } CellNode (14 @ 82) (20)Px43y38 { Px43y39, Px44y38, Px43y37, Px42y38 } CellNode (43 @ 38) (20)Px29y27 { Px29y28, Px28y27, Px30y27 } CellNode (29 @ 27) (20)Px47y19 { Px48y19, Px46y19, Px47y18 } CellNode (47 @ 19) (20)Px23y67 { Px23y66, Px24y67, Px22y67 } CellNode (23 @ 67) (20)Px49y63 { Px48y63, Px49y62 } CellNode (49 @ 63) (20)Px8y83 { Px8y84, Px7y83, Px9y83, Px8y82 } CellNode (8 @ 83) (20)Px54y43 { Px54y44, Px55y43, Px53y43, Px54y42 } CellNode (54 @ 43) (20)Px50y62 { Px50y61, Px49y62 } CellNode (50 @ 62) (20)Px79y81 { Px80y81, Px79y80, Px78y81, Px79y82 } CellNode (79 @ 81) (20)Px65y72 { Px66y72, Px65y71, Px64y72, Px65y73 } CellNode (65 @ 72) (20)Px34y72 { Px35y72, Px33y72, Px34y73, Px34y71 } CellNode (34 @ 72) (20)Px41y12 { Px40y12 } CellNode (41 @ 12) (20)Px9y80 { Px10y80, Px9y79, Px9y81, Px8y80 } CellNode (9 @ 80) (20)Px56y22 { Px56y23, Px57y22 } CellNode (56 @ 22) (20)Px36y51 { Px36y50, Px36y52, Px37y51, Px35y51 } CellNode (36 @ 51) (20)Px71y77 { Px70y77, Px71y78, Px71y76, Px72y77 } CellNode (71 @ 77) (20)Px70y76 { Px70y77, Px71y76, Px69y76, Px70y75 } CellNode (70 @ 76) (20)Px16y80 { Px17y80, Px15y80, Px16y79, Px16y81 } CellNode (16 @ 80) (20)Px53y42 { Px53y43, Px53y41, Px54y42 } CellNode (53 @ 42) (20)Px57y23 { Px57y24, Px58y23, Px56y23, Px57y22 } CellNode (57 @ 23) (20)Px33y71 { Px33y70, Px33y72, Px34y71, Px32y71 } CellNode (33 @ 71) (20)Px49y17 { Px49y18, Px48y17, Px50y17, Px49y16 } CellNode (49 @ 17) (20)Px45y36 { Px45y35, Px46y36, Px45y37, Px44y36 } CellNode (45 @ 36) (20)Px48y16 { Px48y15, Px48y17, Px49y16, Px47y16 } CellNode (48 @ 16) (20)Px31y27 { Px31y26, Px32y27, Px31y28, Px30y27 } CellNode (31 @ 27) (20)Px37y52 { Px38y52, Px36y52, Px37y53, Px37y51 } CellNode (37 @ 52) (20)Px25y65 { Px25y64, Px24y65, Px25y66, Px26y65 } CellNode (25 @ 65) (20)Px17y81 { Px17y80, Px18y81, Px16y81, Px17y82 } CellNode (17 @ 81) (20)Px56y65 { Px55y65 } CellNode (56 @ 65) (20)Px62y27 { Px61y27, Px62y28, Px62y26 } CellNode (62 @ 27) (20)Px48y81 { Px49y81, Px48y82, Px48y80, Px47y81 } CellNode (48 @ 81) (20)Px7y79 { Px7y78, Px7y80, Px8y79, Px6y79 } CellNode (7 @ 79) (20)Px6y78 { Px7y78, Px6y77, Px5y78, Px6y79 } CellNode (6 @ 78) (20)Px48y59 { Px48y58, Px47y59, Px48y60, Px49y59 } CellNode (48 @ 59) (20)Px33y49 { Px34y49, Px32y49, Px33y48, Px33y50 } CellNode (33 @ 49) (20)Px81y81 { Px81y82, Px80y81, Px81y80, Px82y81 } CellNode (81 @ 81) (20)Px80y80 { Px80y81, Px79y80, Px81y80, Px80y79 } CellNode (80 @ 80) (20)Px30y69 { Px30y70, Px30y68, Px31y69 } CellNode (30 @ 69) (20)Px13y78 { Px13y79, Px14y78, Px12y78, Px13y77 } CellNode (13 @ 78) (20)Px14y79 { Px15y79, Px13y79, Px14y78, Px14y80 } CellNode (14 @ 79) (20)Px67y70 { Px68y70, Px66y70, Px67y71, Px67y69 } CellNode (67 @ 70) (20)Px52y60 { Px52y61, Px52y59, Px51y60 } CellNode (52 @ 60) (20)Px55y40 { Px55y39, Px55y41, Px56y40, Px54y40 } CellNode (55 @ 40) (20)Px45y79 { Px45y78, Px44y79, Px45y80, Px46y79 } CellNode (45 @ 79) (20)Px87y84 { Px88y84, Px87y83, Px86y84 } CellNode (87 @ 84) (20)Px72y74 { Px72y75, Px73y74, Px71y74, Px72y73 } CellNode (72 @ 74) (20)Px64y25 { Px64y26, Px65y25, Px63y25, Px64y24 } CellNode (64 @ 25) (20)Px56y84 { Px57y84, Px55y84, Px56y83 } CellNode (56 @ 84) (20)Px63y24 { Px62y24, Px63y23, Px63y25, Px64y24 } CellNode (63 @ 24) (20)Px55y83 { Px54y83, Px55y82, Px55y84, Px56y83 } CellNode (55 @ 83) (20)Px47y34 { Px47y35, Px47y33, Px48y34, Px46y34 } CellNode (47 @ 34) (20)Px32y24 { Px31y24, Px32y25 } CellNode (32 @ 24) (20)Px46y33 { Px47y33, Px45y33, Px46y32, Px46y34 } CellNode (46 @ 33) (20)Px40y73 { Px41y73, Px40y72, Px39y73, Px40y74 } CellNode (40 @ 73) (20)Px27y63 { Px28y63, Px26y63, Px27y64, Px27y62 } CellNode (27 @ 63) (20)Px23y82 { Px23y83, Px24y82, Px23y81, Px22y82 } CellNode (23 @ 82) (20)Px26y62 { Px26y63, Px27y62, Px26y61, Px25y62 } CellNode (26 @ 62) (20)Px79y78 { Px79y79, Px78y78, Px80y78, Px79y77 } CellNode (79 @ 78) (20)Px24y83 { Px24y84, Px25y83, Px23y83, Px24y82 } CellNode (24 @ 83) (20)Px56y19 { Px57y19, Px55y19, Px56y18 } CellNode (56 @ 19) (20)Px52y38 { Px53y38, Px52y37, Px52y39 } CellNode (52 @ 38) (20)Px55y18 { Px56y18, Px55y17, Px54y18, Px55y19 } CellNode (55 @ 18) (20)Px9y77 { Px9y78, Px8y77, Px9y76, Px10y77 } CellNode (9 @ 77) (20)Px8y76 { Px8y77, Px9y76, Px7y76, Px8y75 } CellNode (8 @ 76) (20)Px32y67 { Px32y68, Px33y67, Px31y67, Px32y66 } CellNode (32 @ 67) (20)Px35y47 { Px35y48, Px36y47, Px35y46, Px34y47 } CellNode (35 @ 47) (20)Px36y48 { Px37y48, Px35y48, Px36y49, Px36y47 } CellNode (36 @ 48) (20)Px16y77 { Px16y78, Px15y77, Px17y77, Px16y76 } CellNode (16 @ 77) (20)Px47y77 { Px47y78, Px47y76, Px46y77, Px48y77 } CellNode (47 @ 77) (20)Px15y76 { Px15y75, Px15y77, Px16y76, Px14y76 } CellNode (15 @ 76) (20)Px53y39 { Px53y38, Px53y40, Px54y39, Px52y39 } CellNode (53 @ 39) (20)Px33y68 { Px33y69, Px34y68, Px32y68, Px33y67 } CellNode (33 @ 68) (20)Px78y77 { Px78y76, Px78y78, Px79y77, Px77y77 } CellNode (78 @ 77) (20)Px41y74 { Px40y74, Px41y73, Px42y74, Px41y75 } CellNode (41 @ 74) (20)Px89y82 { Px89y83, Px88y82, Px90y82, Px89y81 } CellNode (89 @ 82) (20)Px74y72 { Px74y71, Px75y72, Px73y72, Px74y73 } CellNode (74 @ 72) (20)Px48y5 { Px48y4, Px49y5, Px48y6 } CellNode (48 @ 5) (20)Px51y13 { Px51y14, Px52y13, Px50y13, Px51y12 } CellNode (51 @ 13) (20)Px73y71 { Px74y71, Px73y70, Px72y71, Px73y72 } CellNode (73 @ 71) (20)Px88y81 { Px87y81, Px88y82, Px89y81, Px88y80 } CellNode (88 @ 81) (20)Px57y81 { Px57y82, Px57y80, Px56y81, Px58y81 } CellNode (57 @ 81) (20)Px49y32 { Px49y33, Px48y32, Px50y32, Px49y31 } CellNode (49 @ 32) (20)Px50y12 { Px50y13, Px51y12, Px50y11, Px49y12 } CellNode (50 @ 12) (20)Px80y77 { Px80y76, Px80y78, Px79y77, Px81y77 } CellNode (80 @ 77) (20)Px26y81 { Px27y81, Px25y81, Px26y82, Px26y80 } CellNode (26 @ 81) (20)Px11y71 { Px11y70, Px11y72, Px12y71, Px10y71 } CellNode (11 @ 71) (20)Px25y80 { Px25y79, Px25y81, Px26y80, Px24y80 } CellNode (25 @ 80) (20)Px48y31 { Px48y32, Px49y31, Px47y31, Px48y30 } CellNode (48 @ 31) (20)Px10y70 { Px11y70, Px10y69, Px9y70, Px10y71 } CellNode (10 @ 70) (20)Px58y17 { Px58y16, Px59y17, Px57y17 } CellNode (58 @ 17) (20)Px47y8 { Px47y9 } CellNode (47 @ 8) (20)Px54y36 { Px53y36, Px54y37, Px54y35 } CellNode (54 @ 36) (20)Px51y56 { Px50y56, Px52y56, Px51y57 } CellNode (51 @ 56) (20)Px49y75 { Px49y76, Px48y75, Px50y75, Px49y74 } CellNode (49 @ 75) (20)Px34y65 { Px34y64, Px34y66, Px35y65, Px33y65 } CellNode (34 @ 65) (20)Px48y74 { Px48y75, Px49y74, Px47y74, Px48y73 } CellNode (48 @ 74) (20)Px30y84 { Px30y83, Px31y84, Px29y84 } CellNode (30 @ 84) (20)Px57y16 { Px57y17, Px58y16, Px57y15, Px56y16 } CellNode (57 @ 16) (20)Px37y45 { Px37y44, Px37y46, Px38y45, Px36y45 } CellNode (37 @ 45) (20)Px17y74 { Px17y73, Px16y74, Px18y74, Px17y75 } CellNode (17 @ 74) (20)Px54y79 { Px54y80, Px55y79, Px53y79, Px54y78 } CellNode (54 @ 79) (20)Px42y49 { Px41y49, Px42y48, Px42y50, Px43y49 } CellNode (42 @ 49) (20)Px45y29 { Px44y29, Px45y28, Px45y30, Px46y29 } CellNode (45 @ 29) (20)Px23y79 { Px23y78, Px23y80, Px24y79, Px22y79 } CellNode (23 @ 79) (20)Px22y78 { Px23y78, Px21y78, Px22y77, Px22y79 } CellNode (22 @ 78) (20)Px76y70 { Px75y70, Px77y70, Px76y69, Px76y71 } CellNode (76 @ 70) (20)Px53y11 { Px54y11, Px52y11, Px53y12, Px53y10 } CellNode (53 @ 11) (20)Px52y10 { Px52y11, Px53y10 } CellNode (52 @ 10) (20)Px96y84 { Px96y83, Px97y84, Px95y84 } CellNode (96 @ 84) (20)Px51y5 { Px51y4, Px52y5, Px50y5 } CellNode (51 @ 5) (20)Px50y74 { Px50y75, Px49y74, Px51y74, Px50y73 } CellNode (50 @ 74) (20)Px64y83 { Px64y84, Px65y83, Px63y83, Px64y82 } CellNode (64 @ 83) (20)Px56y34 { Px57y34, Px56y35, Px56y33 } CellNode (56 @ 34) (20)Px55y33 { Px54y33, Px55y32, Px56y33 } CellNode (55 @ 33) (20)Px33y83 { Px34y83, Px33y82, Px33y84, Px32y83 } CellNode (33 @ 83) (20)Px36y63 { Px35y63, Px36y64, Px36y62 } CellNode (36 @ 63) (20)Px32y82 { Px33y82, Px31y82, Px32y81, Px32y83 } CellNode (32 @ 82) (20)Px40y23 { Px41y23 } CellNode (40 @ 23) (20)Px35y62 { Px36y62, Px34y62, Px35y61, Px35y63 } CellNode (35 @ 62) (20)Px73y68 { Px73y69, Px72y68, Px74y68, Px73y67 } CellNode (73 @ 68) (20)Px39y43 { Px40y43, Px39y44 } CellNode (39 @ 43) (20)Px61y38 { Px60y38, Px61y37, Px62y38, Px61y39 } CellNode (61 @ 38) (20)Px72y67 { Px71y67, Px72y68, Px73y67, Px72y66 } CellNode (72 @ 67) (20)Px18y71 { Px18y72, Px19y71, Px17y71, Px18y70 } CellNode (18 @ 71) (20)Px56y77 { Px56y76, Px55y77, Px57y77, Px56y78 } CellNode (56 @ 77) (20)Px19y72 { Px19y73, Px18y72, Px20y72, Px19y71 } CellNode (19 @ 72) (20)Px44y47 { Px44y48, Px43y47, Px44y46 } CellNode (44 @ 47) (20)Px47y27 { Px48y27, Px47y26, Px46y27, Px47y28 } CellNode (47 @ 27) (20)Px25y77 { Px26y77, Px24y77, Px25y78, Px25y76 } CellNode (25 @ 77) (20)Px56y8 { Px57y8, Px56y9, Px55y8, Px56y7 } CellNode (56 @ 8) (20)Px48y28 { Px47y28, Px48y27, Px49y28, Px48y29 } CellNode (48 @ 28) (20)Px24y76 { Px24y77, Px25y76, Px23y76, Px24y75 } CellNode (24 @ 76) (20)Px97y81 { Px97y82, Px96y81, Px97y80 } CellNode (97 @ 81) (20)Px60y13 { Px59y13, Px60y12, Px60y14 } CellNode (60 @ 13) (20)Px66y81 { Px66y80, Px65y81, Px67y81, Px66y82 } CellNode (66 @ 81) (20)Px58y32 { Px58y33, Px59y32, Px58y31 } CellNode (58 @ 32) (20)Px43y22 { Px42y22, Px44y22, Px43y23 } CellNode (43 @ 22) (20)Px57y31 { Px57y30, Px56y31, Px58y31 } CellNode (57 @ 31) (20)Px40y42 { Px40y41, Px40y43, Px41y42 } CellNode (40 @ 42) (20)Px20y71 { Px20y72, Px19y71, Px21y71, Px20y70 } CellNode (20 @ 71) (20)Px34y80 { Px34y81, Px35y80, Px33y80, Px34y79 } CellNode (34 @ 80) (20)Px37y60 { Px37y59, Px37y61, Px38y60, Px36y60 } CellNode (37 @ 60) (20)Px25y30 { Px26y30, Px25y29, Px24y30 } CellNode (25 @ 30) (20)Px75y66 { Px75y65, Px75y67, Px74y66, Px76y66 } CellNode (75 @ 66) (20)Px74y65 { Px75y65, Px74y64, Px73y65, Px74y66 } CellNode (74 @ 65) (20)Px63y36 { Px63y37, Px63y35, Px62y36, Px64y36 } CellNode (63 @ 36) (20)Px1y84 { Px1y83, Px2y84 } CellNode (1 @ 84) (20)Px57y74 { Px56y74, Px57y73, Px57y75 } CellNode (57 @ 74) (20)Px49y25 { Px49y26, Px50y25, Px49y24, Px48y25 } CellNode (49 @ 25) (20)Px26y74 { Px26y73, Px27y74, Px26y75, Px25y74 } CellNode (26 @ 74) (20)Px63y79 { Px64y79, Px62y79, Px63y78, Px63y80 } CellNode (63 @ 79) (20)Px54y29 { Px54y30, Px55y29, Px54y28, Px53y29 } CellNode (54 @ 29) (20)Px32y79 { Px32y80, Px33y79, Px31y79, Px32y78 } CellNode (32 @ 79) (20)Px35y59 { Px35y60, Px36y59, Px34y59, Px35y58 } CellNode (35 @ 59) (20)Px49y68 { Px48y68, Px49y69, Px50y68 } CellNode (49 @ 68) (20)Px23y29 { Px23y28, Px22y29, Px23y30, Px24y29 } CellNode (23 @ 29) (20)Px34y58 { Px33y58, Px34y57, Px34y59, Px35y58 } CellNode (34 @ 58) (20)Px70y60 { Px69y60, Px70y61, Px70y59, Px71y60 } CellNode (70 @ 60) (20)Px31y78 { Px30y78, Px31y77, Px31y79, Px32y78 } CellNode (31 @ 78) (20)Px73y83 { Px74y83, Px73y84, Px73y82, Px72y83 } CellNode (73 @ 83) (20)Px65y34 { Px64y34, Px65y33, Px65y35 } CellNode (65 @ 34) (20)Px64y33 { Px64y34, Px65y33, Px63y33, Px64y32 } CellNode (64 @ 33) (20)Px3y82 { Px3y83, Px3y81, Px4y82, Px2y82 } CellNode (3 @ 82) (20)Px42y83 { Px42y84, Px43y83, Px41y83, Px42y82 } CellNode (42 @ 83) (20)Px2y81 { Px3y81, Px2y80, Px1y81, Px2y82 } CellNode (2 @ 81) (20)Px59y72 { Px59y73, Px60y72 } CellNode (59 @ 72) (20)Px41y82 { Px40y82, Px41y81, Px41y83, Px42y82 } CellNode (41 @ 82) (20)Px28y72 { Px28y73, Px28y71, Px29y72, Px27y72 } CellNode (28 @ 72) (20)Px10y82 { Px10y83, Px11y82, Px10y81, Px9y82 } CellNode (10 @ 82) (20)Px27y71 { Px28y71, Px27y70, Px26y71, Px27y72 } CellNode (27 @ 71) (20)Px65y77 { Px65y78, Px66y77, Px64y77, Px65y76 } CellNode (65 @ 77) (20)Px57y28 { Px58y28, Px56y28, Px57y29, Px57y27 } CellNode (57 @ 28) (20)Px42y18 { Px41y18, Px42y17, Px42y19, Px43y18 } CellNode (42 @ 18) (20)Px68y57 { Px69y57, Px68y56, Px68y58 } CellNode (68 @ 57) (20)Px41y17 { Px41y18, Px42y17, Px40y17 } CellNode (41 @ 17) (20)Px37y57 { Px36y57, Px37y56, Px38y57, Px37y58 } CellNode (37 @ 57) (20)Px33y76 { Px34y76, Px32y76, Px33y75, Px33y77 } CellNode (33 @ 76) (20)Px25y27 { Px24y27, Px25y28, Px26y27 } CellNode (25 @ 27) (20)Px36y56 { Px37y56, Px35y56, Px36y55, Px36y57 } CellNode (36 @ 56) (20)Px34y77 { Px34y76, Px34y78, Px35y77, Px33y77 } CellNode (34 @ 77) (20)Px39y36 { Px39y35, Px38y36, Px40y36 } CellNode (39 @ 36) (20)Px75y81 { Px75y82, Px76y81, Px74y81, Px75y80 } CellNode (75 @ 81) (20)Px52y22 { Px51y22, Px52y23, Px53y22 } CellNode (52 @ 22) (20)Px66y31 { Px66y30, Px65y31 } CellNode (66 @ 31) (20)Px74y80 { Px74y79, Px74y81, Px75y80, Px73y80 } CellNode (74 @ 80) (20)Px47y61 { Px47y62, Px48y61, Px47y60 } CellNode (47 @ 61) (20)Px32y51 { Px32y50, Px33y51 } CellNode (32 @ 51) (20)Px46y60 { Px46y59, Px47y60 } CellNode (46 @ 60) (20)Px43y80 { Px43y81, Px42y80, Px43y79, Px44y80 } CellNode (43 @ 80) (20)Px34y30 { Px34y29, Px34y31, Px35y30, Px33y30 } CellNode (34 @ 30) (20)Px12y80 { Px13y80, Px12y81, Px11y80, Px12y79 } CellNode (12 @ 80) (20)Px31y50 { Px32y50 } CellNode (31 @ 50) (20)Px35y31 { Px36y31, Px34y31, Px35y32, Px35y30 } CellNode (35 @ 31) (20)Px67y75 { Px67y74, Px68y75, Px66y75, Px67y76 } CellNode (67 @ 75) (20)Px66y74 { Px67y74, Px65y74, Px66y73, Px66y75 } CellNode (66 @ 74) (20)Px40y35 { Px41y35, Px39y35, Px40y36, Px40y34 } CellNode (40 @ 35) (20)Px35y74 { Px36y74, Px35y75, Px34y74, Px35y73 } CellNode (35 @ 74) (20)Px38y54 { Px39y54, Px38y55, Px38y53, Px37y54 } CellNode (38 @ 54) (20)Px49y83 { Px49y84, Px50y83, Px48y83, Px49y82 } CellNode (49 @ 83) (20)Px72y79 { Px72y78, Px71y79, Px72y80, Px73y79 } CellNode (72 @ 79) (20)Px18y83 { Px17y83, Px19y83, Px18y84, Px18y82 } CellNode (18 @ 83) (20)Px63y29 { Px64y29, Px63y28, Px62y29, Px63y30 } CellNode (63 @ 29) (20)Px2y78 { Px2y79, Px1y78, Px3y78, Px2y77 } CellNode (2 @ 78) (20)Px41y79 { Px42y79, Px40y79, Px41y78, Px41y80 } CellNode (41 @ 79) (20)Px40y78 { Px40y79, Px41y78, Px39y78, Px40y77 } CellNode (40 @ 78) (20)Px1y77 { Px2y77, Px1y76, Px1y78 } CellNode (1 @ 77) (20)Px46y38 { Px46y39, Px47y38, Px46y37, Px45y38 } CellNode (46 @ 38) (20)Px32y29 { Px32y28, Px32y30, Px33y29, Px31y29 } CellNode (32 @ 29) (20)Px26y67 { Px26y66, Px27y67, Px25y67 } CellNode (26 @ 67) (20)Px82y83 { Px81y83, Px82y82, Px83y83, Px82y84 } CellNode (82 @ 83) (20)Px69y73 { Px69y74, Px68y73, Px69y72, Px70y73 } CellNode (69 @ 73) (20)Px51y83 { Px52y83, Px50y83, Px51y84, Px51y82 } CellNode (51 @ 83) (20)Px57y43 { Px57y42, Px57y44, Px56y43 } CellNode (57 @ 43) (20)Px68y72 { Px68y73, Px69y72, Px67y72, Px68y71 } CellNode (68 @ 72) (20)Px50y82 { Px50y83, Px49y82, Px51y82, Px50y81 } CellNode (50 @ 82) (20)Px41y32 { Px40y32, Px41y31, Px41y33, Px42y32 } CellNode (41 @ 32) (20)Px37y72 { Px37y73, Px36y72, Px38y72, Px37y71 } CellNode (37 @ 72) (20)Px56y42 { Px56y43, Px57y42, Px56y41, Px55y42 } CellNode (56 @ 42) (20)Px36y71 { Px35y71, Px36y70, Px36y72, Px37y71 } CellNode (36 @ 71) (20)Px39y51 { Px39y50, Px38y51, Px39y52, Px40y51 } CellNode (39 @ 51) (20)Px74y77 { Px75y77, Px73y77, Px74y78, Px74y76 } CellNode (74 @ 77) (20)Px66y28 { Px65y28, Px66y29 } CellNode (66 @ 28) (20)Px73y76 { Px73y77, Px74y76, Px72y76, Px73y75 } CellNode (73 @ 76) (20)Px19y80 { Px20y80, Px18y80, Px19y79, Px19y81 } CellNode (19 @ 80) (20)Px21y61 { Px21y62, Px22y61 } CellNode (21 @ 61) (20)Px46y57 { Px47y57, Px46y58, Px45y57, Px46y56 } CellNode (46 @ 57) (20)Px42y76 { Px42y75, Px41y76, Px42y77, Px43y76 } CellNode (42 @ 76) (20)Px3y75 { Px4y75, Px3y74, Px2y75, Px3y76 } CellNode (3 @ 75) (20)Px48y36 { Px47y36, Px48y35, Px48y37, Px49y36 } CellNode (48 @ 36) (20)Px33y26 { Px34y26, Px33y25, Px32y26, Px33y27 } CellNode (33 @ 26) (20)Px50y17 { Px49y17, Px50y16, Px50y18, Px51y17 } CellNode (50 @ 17) (20)Px42y33 { Px42y34, Px41y33, Px43y33, Px42y32 } CellNode (42 @ 33) (20)Px28y65 { Px29y65, Px27y65, Px28y64, Px28y66 } CellNode (28 @ 65) (20)Px10y75 { Px9y75, Px10y76, Px11y75, Px10y74 } CellNode (10 @ 75) (20)Px22y62 { Px22y63, Px22y61, Px23y62, Px21y62 } CellNode (22 @ 62) (20)Px65y27 { Px65y28, Px65y26 } CellNode (65 @ 27) (20)Px45y56 { Px45y55, Px45y57, Px46y56 } CellNode (45 @ 56) (20)Px49y37 { Px48y37, Px49y36, Px50y37 } CellNode (49 @ 37) (20)Px29y66 { Px30y66, Px29y65, Px29y67, Px28y66 } CellNode (29 @ 66) (20)Px51y18 { Px52y18, Px50y18, Px51y19, Px51y17 } CellNode (51 @ 18) (20)Px11y76 { Px11y77, Px10y76, Px12y76, Px11y75 } CellNode (11 @ 76) (20)Px48y79 { Px49y79, Px47y79, Px48y78, Px48y80 } CellNode (48 @ 79) (20)Px83y80 { Px83y79, Px83y81, Px82y80 } CellNode (83 @ 80) (20)Px17y79 { Px17y80, Px18y79, Px17y78, Px16y79 } CellNode (17 @ 79) (20)Px52y80 { Px51y80, Px52y79, Px53y80, Px52y81 } CellNode (52 @ 80) (20)Px59y41 { Px59y40, Px58y41 } CellNode (59 @ 41) (20)Px58y40 { Px57y40, Px58y39, Px58y41, Px59y40 } CellNode (58 @ 40) (20)Px40y50 { Px39y50, Px41y50, Px40y49, Px40y51 } CellNode (40 @ 50) (20)Px39y70 { Px40y70, Px39y69 } CellNode (39 @ 70) (20)Px24y60 { Px24y61 } CellNode (24 @ 60) (20)Px41y51 { Px40y51, Px41y50, Px41y52, Px42y51 } CellNode (41 @ 51) (20)Px21y80 { Px22y80, Px20y80, Px21y81, Px21y79 } CellNode (21 @ 80) (20)Px76y75 { Px77y75, Px76y76, Px75y75, Px76y74 } CellNode (76 @ 75) (20)Px75y74 { Px74y74, Px75y75, Px76y74, Px75y73 } CellNode (75 @ 74) (20)Px52y15 { Px52y16, Px51y15, Px52y14 } CellNode (52 @ 15) (20)Px44y74 { Px43y74, Px45y74, Px44y73, Px44y75 } CellNode (44 @ 74) (20)Px58y83 { Px58y84, Px58y82, Px57y83 } CellNode (58 @ 83) (20)Px43y73 { Px43y74, Px44y73, Px43y72, Px42y73 } CellNode (43 @ 73) (20)Px81y79 { Px81y78, Px81y80, Px82y79, Px80y79 } CellNode (81 @ 79) (20)Px27y83 { Px28y83, Px27y84, Px27y82, Px26y83 } CellNode (27 @ 83) (20)Px12y73 { Px12y72, Px13y73, Px12y74, Px11y73 } CellNode (12 @ 73) (20)Px68y69 { Px68y70, Px67y69, Px69y69 } CellNode (68 @ 69) (20)Px50y79 { Px49y79, Px50y78, Px50y80, Px51y79 } CellNode (50 @ 79) (20)Px56y39 { Px55y39, Px56y38, Px56y40, Px57y39 } CellNode (56 @ 39) (20)Px59y19 { Px58y19, Px59y18, Px60y19 } CellNode (59 @ 19) (20)Px55y38 { Px55y39, Px56y38, Px54y38, Px55y37 } CellNode (55 @ 38) (20)Px52y58 { Px52y59, Px53y58, Px51y58, Px52y57 } CellNode (52 @ 58) (20)Px36y68 { Px37y68, Px35y68, Px36y69, Px36y67 } CellNode (36 @ 68) (20)Px39y48 { Px39y49, Px38y48, Px40y48, Px39y47 } CellNode (39 @ 48) (20)Px35y67 { Px35y68, Px36y67, Px35y66, Px34y67 } CellNode (35 @ 67) (20)Px38y47 { Px38y48, Px39y47, Px38y46, Px37y47 } CellNode (38 @ 47) (20)Px19y77 { Px19y78, Px18y77, Px20y77, Px19y76 } CellNode (19 @ 77) (20)Px18y76 { Px17y76, Px18y75, Px18y77, Px19y76 } CellNode (18 @ 76) (20)Px91y83 { Px92y83, Px91y84, Px90y83, Px91y82 } CellNode (91 @ 83) (20)Px90y82 { Px89y82, Px90y81, Px90y83, Px91y82 } CellNode (90 @ 82) (20)Px78y73 { Px78y74, Px78y72, Px77y73 } CellNode (78 @ 73) (20)Px66y43 { Px66y42, Px67y43, Px66y44 } CellNode (66 @ 43) (20)Px51y33 { Px52y33, Px50y33, Px51y34, Px51y32 } CellNode (51 @ 33) (20)Px54y13 { Px53y13, Px54y12 } CellNode (54 @ 13) (20)Px50y32 { Px50y33, Px51y32, Px49y32, Px50y31 } CellNode (50 @ 32) (20)Px46y72 { Px46y73, Px47y72, Px45y72 } CellNode (46 @ 72) (20)Px31y62 { Px31y63, Px30y62, Px32y62, Px31y61 } CellNode (31 @ 62) (20)Px77y72 { Px78y72, Px76y72, Px77y71, Px77y73 } CellNode (77 @ 72) (20)Px83y77 { Px83y78, Px82y77 } CellNode (83 @ 77) (20)Px29y81 { Px30y81, Px28y81, Px29y82, Px29y80 } CellNode (29 @ 81) (20)Px14y71 { Px14y72, Px14y70, Px15y71, Px13y71 } CellNode (14 @ 71) (20)Px28y80 { Px27y80, Px28y79, Px28y81, Px29y80 } CellNode (28 @ 80) (20)Px60y18 { Px59y18, Px61y18, Px60y19 } CellNode (60 @ 18) (20)Px82y76 { Px81y76, Px82y77 } CellNode (82 @ 76) (20)Px58y37 { Px58y38, Px57y37, Px59y37, Px58y36 } CellNode (58 @ 37) (20)Px54y56 { Px54y57, Px53y56 } CellNode (54 @ 56) (20)Px57y36 { Px57y37, Px58y36, Px56y36, Px57y35 } CellNode (57 @ 36) (20)Px40y47 { Px41y47, Px40y48, Px39y47, Px40y46 } CellNode (40 @ 47) (20)Px20y76 { Px21y76, Px20y75, Px20y77, Px19y76 } CellNode (20 @ 76) (20)Px51y76 { Px51y77, Px52y76, Px51y75, Px50y76 } CellNode (51 @ 76) (20)Px13y70 { Px14y70, Px12y70, Px13y69, Px13y71 } CellNode (13 @ 70) (20)Px57y79 { Px57y78, Px56y79, Px57y80 } CellNode (57 @ 79) (20)Px93y81 { Px92y81, Px93y80, Px94y81, Px93y82 } CellNode (93 @ 81) (20)Px26y79 { Px25y79, Px26y78, Px26y80, Px27y79 } CellNode (26 @ 79) (20)Px11y69 { Px11y70, Px12y69, Px10y69 } CellNode (11 @ 69) (20)Px92y80 { Px93y80, Px91y80, Px92y79, Px92y81 } CellNode (92 @ 80) (20)Px61y80 { Px62y80, Px61y81, Px60y80, Px61y79 } CellNode (61 @ 80) (20)Px53y31 { Px54y31, Px52y31, Px53y32, Px53y30 } CellNode (53 @ 31) (20)Px67y40 { Px66y40, Px67y41 } CellNode (67 @ 40) (20)Px52y30 { Px51y30, Px52y29, Px52y31, Px53y30 } CellNode (52 @ 30) (20)Px48y70 { Px47y70, Px49y70, Px48y69 } CellNode (48 @ 70) (20)Px33y60 { Px32y60, Px33y59, Px34y60, Px33y61 } CellNode (33 @ 60) (20)Px55y10 { Px55y9, Px55y11, Px56y10 } CellNode (55 @ 10) (20)Px21y30 { Px20y30, Px22y30 } CellNode (21 @ 30) (20)Px56y11 { Px56y10, Px55y11 } CellNode (56 @ 11) (20)Px70y65 { Px70y64, Px71y65, Px70y66 } CellNode (70 @ 65) (20)Px68y84 { Px68y83, Px69y84, Px67y84 } CellNode (68 @ 84) (20)Px53y74 { Px53y73, Px54y74, Px52y74, Px53y75 } CellNode (53 @ 74) (20)Px45y25 { Px44y25, Px46y25, Px45y26 } CellNode (45 @ 25) (20)Px59y34 { Px59y33, Px58y34, Px59y35, Px60y34 } CellNode (59 @ 34) (20)Px41y44 { Px41y45, Px40y44, Px41y43, Px42y44 } CellNode (41 @ 44) (20)Px90y79 { Px91y79, Px90y80 } CellNode (90 @ 79) (20)Px52y73 { Px53y73, Px52y72, Px51y73, Px52y74 } CellNode (52 @ 73) (20)Px21y73 { Px22y73, Px21y74, Px20y73, Px21y72 } CellNode (21 @ 73) (20)Px35y82 { Px35y83, Px36y82, Px35y81, Px34y82 } CellNode (35 @ 82) (20)Px36y83 { Px35y83, Px37y83, Px36y82, Px36y84 } CellNode (36 @ 83) (20)Px67y83 { Px66y83, Px67y84, Px68y83, Px67y82 } CellNode (67 @ 83) (20)Px65y39 { Px65y38, Px65y40, Px66y39, Px64y39 } CellNode (65 @ 39) (20)Px50y29 { Px49y29, Px50y28, Px50y30, Px51y29 } CellNode (50 @ 29) (20)Px64y38 { Px65y38, Px64y37, Px63y38, Px64y39 } CellNode (64 @ 38) (20)Px76y68 { Px75y68, Px76y69, Px77y68, Px76y67 } CellNode (76 @ 68) (20)Px77y69 { Px77y70, Px76y69, Px77y68 } CellNode (77 @ 69) (20)Px44y24 { Px44y23, Px44y25, Px43y24 } CellNode (44 @ 24) (20)Px47y47 { Px47y48 } CellNode (47 @ 47) (20)Px28y77 { Px29y77, Px28y78, Px27y77, Px28y76 } CellNode (28 @ 77) (20)Px13y67 { Px12y67, Px13y68 } CellNode (13 @ 67) (20)Px27y76 { Px27y77, Px28y76, Px26y76, Px27y75 } CellNode (27 @ 76) (20)Px72y63 { Px73y63, Px72y64 } CellNode (72 @ 63) (20)Px60y33 { Px59y33, Px61y33, Px60y32, Px60y34 } CellNode (60 @ 33) (20)Px55y72 { Px55y73, Px56y72, Px54y72 } CellNode (55 @ 72) (20)Px69y81 { Px70y81, Px68y81, Px69y80, Px69y82 } CellNode (69 @ 81) (20)Px43y42 { Px42y42, Px43y43, Px43y41 } CellNode (43 @ 42) (20)Px46y22 { Px47y22, Px46y23, Px45y22 } CellNode (46 @ 22) (20)Px42y41 { Px42y42, Px43y41, Px41y41, Px42y40 } CellNode (42 @ 41) (20)Px38y81 { Px39y81, Px37y81, Px38y82, Px38y80 } CellNode (38 @ 81) (20)Px23y71 { Px24y71, Px23y72, Px22y71, Px23y70 } CellNode (23 @ 71) (20)Px37y80 { Px37y79, Px37y81, Px38y80, Px36y80 } CellNode (37 @ 80) (20)Px22y70 { Px21y70, Px22y69, Px22y71, Px23y70 } CellNode (22 @ 70) (20)Px60y76 { Px61y76, Px59y76, Px60y77, Px60y75 } CellNode (60 @ 76) (20)Px4y84 { Px4y83, Px3y84, Px5y84 } CellNode (4 @ 84) (20)Px38y16 { Px38y17 } CellNode (38 @ 16) (20)Px29y74 { Px28y74, Px29y73, Px29y75, Px30y74 } CellNode (29 @ 74) (20)Px11y84 { Px11y83, Px12y84, Px10y84 } CellNode (11 @ 84) (20)Px66y79 { Px66y80, Px67y79, Px65y79, Px66y78 } CellNode (66 @ 79) (20)Px69y59 { Px69y60, Px70y59, Px69y58, Px68y59 } CellNode (69 @ 59) (20)Px51y69 { Px51y68, Px51y70, Px52y69, Px50y69 } CellNode (51 @ 69) (20)Px35y79 { Px35y78, Px35y80, Px36y79, Px34y79 } CellNode (35 @ 79) (20)Px38y59 { Px38y60, Px38y58, Px37y59 } CellNode (38 @ 59) (20)Px34y78 { Px35y78, Px33y78, Px34y77, Px34y79 } CellNode (34 @ 78) (20)Px26y29 { Px27y29, Px26y28, Px25y29, Px26y30 } CellNode (26 @ 29) (20)Px70y80 { Px71y80, Px69y80, Px70y81, Px70y79 } CellNode (70 @ 80) (20)Px73y60 { Px73y61, Px73y59, Px72y60 } CellNode (73 @ 60) (20)Px20y69 { Px21y69, Px20y70 } CellNode (20 @ 69) (20)Px61y30 { Px61y29, Px61y31, Px62y30, Px60y30 } CellNode (61 @ 30) (20)Px62y31 { Px63y31, Px62y32, Px61y31, Px62y30 } CellNode (62 @ 31) (20)Px77y84 { Px78y84, Px77y83, Px76y84 } CellNode (77 @ 84) (20)Px62y74 { Px63y74, Px61y74, Px62y75, Px62y73 } CellNode (62 @ 74) (20)Px76y83 { Px76y84, Px77y83, Px75y83, Px76y82 } CellNode (76 @ 83) (20)Px61y73 { Px61y72, Px61y74, Px62y73, Px60y73 } CellNode (61 @ 73) (20)Px53y24 { Px54y24, Px53y23, Px53y25 } CellNode (53 @ 24) (20)Px6y82 { Px6y83, Px5y82, Px6y81, Px7y82 } CellNode (6 @ 82) (20)Px37y34 { Px38y34, Px37y35, Px37y33 } CellNode (37 @ 34) (20)Px5y81 { Px5y82, Px6y81, Px4y81, Px5y80 } CellNode (5 @ 81) (20)Px36y33 { Px35y33, Px37y33, Px36y32 } CellNode (36 @ 33) (20)Px71y59 { Px72y59, Px70y59, Px71y58, Px71y60 } CellNode (71 @ 59) (20)Px33y53 { Px34y53, Px33y52, Px33y54 } CellNode (33 @ 53) (20)Px13y82 { Px13y83, Px14y82, Px13y81, Px12y82 } CellNode (13 @ 82) (20)Px44y82 { Px45y82, Px43y82, Px44y81, Px44y83 } CellNode (44 @ 82) (20)Px69y78 { Px70y78, Px68y78, Px69y79, Px69y77 } CellNode (69 @ 78) (20)Px48y63 { Px49y63, Px48y62 } CellNode (48 @ 63) (20)Px30y73 { Px30y74, Px29y73, Px30y72, Px31y73 } CellNode (30 @ 73) (20)Px42y38 { Px41y38, Px43y38, Px42y37, Px42y39 } CellNode (42 @ 38) (20)Px45y18 { Px46y18, Px45y17, Px44y18, Px45y19 } CellNode (45 @ 18) (20)Px41y37 { Px41y36, Px41y38, Px42y37 } CellNode (41 @ 37) (20)Px53y67 { Px52y67, Px54y67, Px53y68 } CellNode (53 @ 67) (20)Px22y67 { Px23y67, Px21y67, Px22y68, Px22y66 } CellNode (22 @ 67) (20)Px36y76 { Px36y77, Px37y76, Px35y76, Px36y75 } CellNode (36 @ 76) (20)Px28y27 { Px29y27, Px28y28, Px27y27 } CellNode (28 @ 27) (20)Px39y56 { Px39y57, Px40y56, Px38y56, Px39y55 } CellNode (39 @ 56) (20)Px21y66 { Px21y67, Px22y66 } CellNode (21 @ 66) (20)Px37y77 { Px37y78, Px36y77, Px37y76, Px38y77 } CellNode (37 @ 77) (20)Px54y6 { Px54y7, Px55y6 } CellNode (54 @ 6) (20)Px45y83 { Px45y82, Px46y83, Px45y84, Px44y83 } CellNode (45 @ 83) (20)Px68y77 { Px68y76, Px68y78, Px69y77, Px67y77 } CellNode (68 @ 77) (20)Px70y58 { Px70y59, Px69y58, Px71y58, Px70y57 } CellNode (70 @ 58) (20)Px54y68 { Px54y67, Px55y68, Px54y69, Px53y68 } CellNode (54 @ 68) (20)Px64y72 { Px64y71, Px65y72, Px63y72, Px64y73 } CellNode (64 @ 72) (20)Px78y81 { Px78y80, Px78y82, Px79y81, Px77y81 } CellNode (78 @ 81) (20)Px63y71 { Px63y72, Px64y71 } CellNode (63 @ 71) (20)Px40y12 { Px40y13, Px41y12, Px40y11 } CellNode (40 @ 12) (20)Px8y80 { Px9y80, Px7y80, Px8y81, Px8y79 } CellNode (8 @ 80) (20)Px32y71 { Px33y71, Px31y71, Px32y72, Px32y70 } CellNode (32 @ 71) (20)Px35y51 { Px36y51, Px35y52, Px34y51, Px35y50 } CellNode (35 @ 51) (20)Px49y60 { Px49y61, Px50y60, Px48y60, Px49y59 } CellNode (49 @ 60) (20)Px31y70 { Px31y69, Px31y71, Px32y70, Px30y70 } CellNode (31 @ 70) (20)Px46y80 { Px46y81, Px47y80, Px45y80, Px46y79 } CellNode (46 @ 80) (20)Px15y80 { Px15y79, Px16y80, Px15y81, Px14y80 } CellNode (15 @ 80) (20)Px61y27 { Px61y28, Px60y27, Px61y26, Px62y27 } CellNode (61 @ 27) (20)Px47y81 { Px48y81, Px46y81, Px47y80, Px47y82 } CellNode (47 @ 81) (20)Px72y56 { Px71y56, Px72y57 } CellNode (72 @ 56) (20)Px34y50 { Px34y49, Px34y51, Px35y50, Px33y50 } CellNode (34 @ 50) (20)Px44y36 { Px45y36, Px43y36, Px44y37, Px44y35 } CellNode (44 @ 36) (20)Px47y16 { Px47y15, Px46y16, Px48y16 } CellNode (47 @ 16) (20)Px43y35 { Px43y36, Px44y35, Px42y35, Px43y34 } CellNode (43 @ 35) (20)Px40y55 { Px40y56, Px40y54, Px39y55 } CellNode (40 @ 55) (20)Px24y65 { Px24y66, Px23y65, Px25y65, Px24y64 } CellNode (24 @ 65) (20)Px38y74 { Px38y75, Px39y74, Px38y73, Px37y74 } CellNode (38 @ 74) (20)Px23y64 { Px23y63, Px22y64, Px23y65, Px24y64 } CellNode (23 @ 64) (20)Px20y84 { Px20y83, Px21y84, Px19y84 } CellNode (20 @ 84) (20)Px55y65 { Px56y65 } CellNode (55 @ 65) (20)Px39y75 { Px39y76, Px38y75, Px40y75, Px39y74 } CellNode (39 @ 75) (20)Px75y79 { Px76y79, Px75y78, Px74y79, Px75y80 } CellNode (75 @ 79) (20)Px5y78 { Px5y77, Px5y79, Px4y78, Px6y78 } CellNode (5 @ 78) (20)Px47y59 { Px47y60, Px48y59, Px47y58, Px46y59 } CellNode (47 @ 59) (20)Px32y49 { Px32y50, Px33y49, Px32y48 } CellNode (32 @ 49) (20)Px43y78 { Px42y78, Px43y79, Px44y78, Px43y77 } CellNode (43 @ 78) (20)Px44y79 { Px45y79, Px43y79, Px44y78, Px44y80 } CellNode (44 @ 79) (20)Px4y77 { Px5y77, Px3y77, Px4y76, Px4y78 } CellNode (4 @ 77) (20)Px12y78 { Px13y78, Px12y77, Px11y78, Px12y79 } CellNode (12 @ 78) (20)Px35y29 { Px34y29, Px35y28, Px35y30, Px36y29 } CellNode (35 @ 29) (20)Px54y40 { Px55y40, Px53y40, Px54y41, Px54y39 } CellNode (54 @ 40) (20)Px86y84 { Px86y83, Px87y84, Px85y84 } CellNode (86 @ 84) (20)Px71y74 { Px71y75, Px70y74, Px72y74, Px71y73 } CellNode (71 @ 74) (20)Px85y83 { Px86y83, Px84y83, Px85y84 } CellNode (85 @ 83) (20)Px70y73 { Px70y74, Px71y73, Px70y72, Px69y73 } CellNode (70 @ 73) (20)Px62y24 { Px62y25, Px63y24, Px61y24, Px62y23 } CellNode (62 @ 24) (20)Px54y83 { Px55y83, Px53y83, Px54y84, Px54y82 } CellNode (54 @ 83) (20)Px42y53 { Px41y53, Px42y52 } CellNode (42 @ 53) (20)Px53y82 { Px53y81, Px53y83, Px54y82, Px52y82 } CellNode (53 @ 82) (20)Px48y13 { Px47y13, Px48y12, Px48y14, Px49y13 } CellNode (48 @ 13) (20)Px45y33 { Px44y33, Px45y32, Px45y34, Px46y33 } CellNode (45 @ 33) (20)Px22y82 { Px23y82, Px21y82, Px22y81, Px22y83 } CellNode (22 @ 82) (20)Px49y14 { Px50y14, Px49y15, Px48y14, Px49y13 } CellNode (49 @ 14) (20)Px25y62 { Px25y63, Px25y61, Px24y62, Px26y62 } CellNode (25 @ 62) (20)Px31y24 { Px31y25, Px32y24, Px31y23 } CellNode (31 @ 24) (20)Px77y77 { Px77y78, Px78y77, Px76y77, Px77y76 } CellNode (77 @ 77) (20)Px54y18 { Px54y17, Px54y19, Px53y18, Px55y18 } CellNode (54 @ 18) (20)Px50y37 { Px49y37, Px50y36, Px51y37 } CellNode (50 @ 37) (20)Px46y77 { Px46y76, Px46y78, Px45y77, Px47y77 } CellNode (46 @ 77) (20)Px49y57 { Px49y56, Px50y57, Px48y57, Px49y58 } CellNode (49 @ 57) (20)Px45y76 { Px46y76, Px44y76, Px45y75, Px45y77 } CellNode (45 @ 76) (20)Px31y67 { Px30y67, Px32y67, Px31y66, Px31y68 } CellNode (31 @ 67) (20)Px6y75 { Px6y76, Px7y75, Px6y74, Px5y75 } CellNode (6 @ 75) (20)Px53y17 { Px53y18, Px54y17, Px53y16 } CellNode (53 @ 17) (20)Px48y56 { Px47y56, Px48y57, Px49y56 } CellNode (48 @ 56) (20)Px7y76 { Px8y76, Px6y76, Px7y75, Px7y77 } CellNode (7 @ 76) (20)Px13y75 { Px13y76, Px14y75, Px13y74, Px12y75 } CellNode (13 @ 75) (20)Px30y66 { Px30y67, Px31y66, Px29y66, Px30y65 } CellNode (30 @ 66) (20)Px34y47 { Px34y48, Px34y46, Px35y47 } CellNode (34 @ 47) (20)Px14y76 { Px14y77, Px13y76, Px15y76, Px14y75 } CellNode (14 @ 76) (20)Px87y81 { Px88y81, Px87y82 } CellNode (87 @ 81) (20)Px72y71 { Px72y70, Px72y72, Px73y71, Px71y71 } CellNode (72 @ 71) (20)Px56y81 { Px56y80, Px57y81, Px55y81, Px56y82 } CellNode (56 @ 81) (20)Px55y80 { Px56y80, Px54y80, Px55y79, Px55y81 } CellNode (55 @ 80) (20)Px47y31 { Px46y31, Px47y32, Px47y30, Px48y31 } CellNode (47 @ 31) (20)Px43y50 { Px42y50, Px43y51, Px43y49 } CellNode (43 @ 50) (20)Px40y70 { Px39y70, Px41y70, Px40y69 } CellNode (40 @ 70) (20)Px24y80 { Px24y81, Px23y80, Px25y80, Px24y79 } CellNode (24 @ 80) (20)Px68y46 { Px68y47, Px68y45 } CellNode (68 @ 46) (20)Px79y75 { Px78y75, Px79y76 } CellNode (79 @ 75) (20)Px78y74 { Px77y74, Px78y75, Px78y73 } CellNode (78 @ 74) (20)Px60y84 { Px60y83 } CellNode (60 @ 84) (20)Px55y15 { Px55y16, Px56y15, Px55y14, Px54y15 } CellNode (55 @ 15) (20)Px9y74 { Px9y75, Px8y74, Px9y73, Px10y74 } CellNode (9 @ 74) (20)Px8y73 { Px8y72, Px8y74, Px9y73 } CellNode (8 @ 73) (20)Px52y35 { Px52y36, Px53y35, Px52y34, Px51y35 } CellNode (52 @ 35) (20)Px35y44 { Px35y45, Px36y44, Px35y43, Px34y44 } CellNode (35 @ 44) (20)Px56y16 { Px55y16, Px57y16, Px56y15, Px56y17 } CellNode (56 @ 16) (20)Px32y64 { Px32y65, Px33y64, Px31y64, Px32y63 } CellNode (32 @ 64) (20)Px36y45 { Px37y45, Px35y45, Px36y46, Px36y44 } CellNode (36 @ 45) (20)Px15y73 { Px15y72, Px14y73, Px15y74, Px16y73 } CellNode (15 @ 73) (20)Px16y74 { Px16y75, Px15y74, Px17y74, Px16y73 } CellNode (16 @ 74) (20)Px53y79 { Px54y79, Px52y79, Px53y78, Px53y80 } CellNode (53 @ 79) (20)Px67y45 { Px67y44, Px68y45 } CellNode (67 @ 45) (20)Px59y39 { Px60y39, Px58y39, Px59y38, Px59y40 } CellNode (59 @ 39) (20)Px44y29 { Px44y28, Px45y29 } CellNode (44 @ 29) (20)Px41y49 { Px41y50, Px42y49, Px41y48, Px40y49 } CellNode (41 @ 49) (20)Px47y74 { Px48y74, Px47y75, Px47y73, Px46y74 } CellNode (47 @ 74) (20)Px39y68 { Px39y69, Px40y68 } CellNode (39 @ 68) (20)Px21y78 { Px21y77, Px20y78, Px21y79, Px22y78 } CellNode (21 @ 78) (20)Px53y36 { Px54y36, Px52y36, Px53y35, Px53y37 } CellNode (53 @ 36) (20)Px33y65 { Px34y65, Px32y65, Px33y66, Px33y64 } CellNode (33 @ 65) (20)Px63y40 { Px63y39, Px62y40, Px63y41 } CellNode (63 @ 40) (20)Px52y78 { Px52y79, Px53y78, Px51y78, Px52y77 } CellNode (52 @ 78) (20)Px94y83 { Px93y83, Px94y82, Px94y84, Px95y83 } CellNode (94 @ 83) (20)Px63y83 { Px63y82, Px64y83 } CellNode (63 @ 83) (20)Px58y14 { Px58y15, Px57y14 } CellNode (58 @ 14) (20)Px54y33 { Px55y33, Px54y34, Px53y33, Px54y32 } CellNode (54 @ 33) (20)Px57y13 { Px56y13, Px57y12, Px57y14 } CellNode (57 @ 13) (20)Px62y82 { Px62y81, Px63y82 } CellNode (62 @ 82) (20)Px49y72 { Px49y73, Px48y72, Px50y72 } CellNode (49 @ 72) (20)Px34y62 { Px34y61, Px33y62, Px35y62, Px34y63 } CellNode (34 @ 62) (20)Px30y81 { Px31y81, Px30y80, Px29y81, Px30y82 } CellNode (30 @ 81) (20)Px31y82 { Px31y81, Px31y83, Px30y82, Px32y82 } CellNode (31 @ 82) (20)Px60y38 { Px60y39, Px59y38, Px61y38, Px60y37 } CellNode (60 @ 38) (20)Px17y71 { Px17y72, Px17y70, Px16y71, Px18y71 } CellNode (17 @ 71) (20)Px71y67 { Px72y67, Px71y68, Px70y67, Px71y66 } CellNode (71 @ 67) (20)Px55y77 { Px56y77, Px54y77, Px55y78, Px55y76 } CellNode (55 @ 77) (20)Px43y47 { Px43y46, Px43y48, Px42y47, Px44y47 } CellNode (43 @ 47) (20)Px46y27 { Px45y27, Px46y26, Px47y27, Px46y28 } CellNode (46 @ 27) (20)Px42y46 { Px43y46, Px41y46, Px42y45, Px42y47 } CellNode (42 @ 46) (20)Px54y76 { Px54y75, Px54y77, Px55y76, Px53y76 } CellNode (54 @ 76) (20)Px23y76 { Px24y76, Px22y76, Px23y75, Px23y77 } CellNode (23 @ 76) (20)Px22y75 { Px22y76, Px23y75, Px22y74, Px21y75 } CellNode (22 @ 75) (20)Px7y69 { Px8y69, Px7y70 } CellNode (7 @ 69) (20)Px96y81 { Px97y81, Px96y80, Px95y81, Px96y82 } CellNode (96 @ 81) (20)Px29y79 { Px30y79, Px28y79, Px29y78, Px29y80 } CellNode (29 @ 79) (20)Px14y69 { Px13y69, Px14y70 } CellNode (14 @ 69) (20)Px65y81 { Px65y82, Px66y81, Px64y81, Px65y80 } CellNode (65 @ 81) (20)Px64y80 { Px64y79, Px64y81, Px65y80, Px63y80 } CellNode (64 @ 80) (20)Px56y31 { Px56y30, Px57y31, Px55y31, Px56y32 } CellNode (56 @ 31) (20)Px55y30 { Px56y30, Px54y30, Px55y29, Px55y31 } CellNode (55 @ 30) (20)Px33y80 { Px32y80, Px33y81, Px33y79, Px34y80 } CellNode (33 @ 80) (20)Px36y60 { Px36y61, Px35y60, Px36y59, Px37y60 } CellNode (36 @ 60) (20)Px39y40 { Px40y40 } CellNode (39 @ 40) (20)Px24y30 { Px24y29, Px25y30, Px23y30 } CellNode (24 @ 30) (20)Px62y36 { Px62y35, Px63y36, Px61y36, Px62y37 } CellNode (62 @ 36) (20)Px73y65 { Px74y65, Px73y66, Px72y65, Px73y64 } CellNode (73 @ 65) (20)Px61y35 { Px62y35, Px60y35, Px61y34, Px61y36 } CellNode (61 @ 35) (20)Px50y5 { Px49y5, Px50y6, Px50y4, Px51y5 } CellNode (50 @ 5) (20)Px56y74 { Px55y74, Px56y73, Px56y75, Px57y74 } CellNode (56 @ 74) (20)Px48y25 { Px48y26, Px49y25, Px48y24 } CellNode (48 @ 25) (20)Px47y24 { Px46y24, Px48y24, Px47y23 } CellNode (47 @ 24) (20)Px93y79 { Px93y80, Px94y79, Px92y79, Px93y78 } CellNode (93 @ 79) (20)Px39y83 { Px39y84, Px40y83, Px39y82, Px38y83 } CellNode (39 @ 83) (20)Px24y73 { Px24y74, Px25y73, Px23y73, Px24y72 } CellNode (24 @ 73) (20)Px25y74 { Px26y74, Px24y74, Px25y75, Px25y73 } CellNode (25 @ 74) (20)Px62y79 { Px62y78, Px62y80, Px63y79, Px61y79 } CellNode (62 @ 79) (20)Px61y78 { Px62y78, Px61y77, Px60y78, Px61y79 } CellNode (61 @ 78) (20)Px53y29 { Px54y29, Px53y28, Px52y29, Px53y30 } CellNode (53 @ 29) (20)Px48y68 { Px49y68, Px48y69, Px47y68 } CellNode (48 @ 68) (20)Px33y58 { Px33y59, Px34y58, Px32y58, Px33y57 } CellNode (33 @ 58) (20)Px30y78 { Px30y79, Px31y78, Px29y78, Px30y77 } CellNode (30 @ 78) (20)Px22y29 { Px22y30, Px23y29 } CellNode (22 @ 29) (20)Px55y8 { Px56y8, Px55y7, Px55y9 } CellNode (55 @ 8) (20)Px72y83 { Px73y83, Px72y82, Px72y84, Px71y83 } CellNode (72 @ 83) (20)Px75y63 { Px74y63, Px75y64 } CellNode (75 @ 63) (20)Px71y82 { Px72y82, Px71y81, Px70y82, Px71y83 } CellNode (71 @ 82) (20)Px63y33 { Px64y33, Px63y34, Px62y33, Px63y32 } CellNode (63 @ 33) (20)Px40y82 { Px40y83, Px39y82, Px41y82, Px40y81 } CellNode (40 @ 82) (20)Px1y81 { Px1y80, Px1y82, Px2y81 } CellNode (1 @ 81) (20)Px26y71 { Px26y70, Px25y71, Px26y72, Px27y71 } CellNode (26 @ 71) (20)Px64y77 { Px64y78, Px65y77, Px63y77, Px64y76 } CellNode (64 @ 77) (20)Px63y76 { Px63y77, Px64y76, Px63y75, Px62y76 } CellNode (63 @ 76) (20)Px40y17 { Px39y17, Px41y17 } CellNode (40 @ 17) (20)Px54y26 { Px54y25, Px55y26, Px54y27 } CellNode (54 @ 26) (20)Px32y76 { Px32y75, Px32y77, Px31y76, Px33y76 } CellNode (32 @ 76) (20)Px7y84 { Px7y83, Px8y84, Px6y84 } CellNode (7 @ 84) (20)Px38y36 { Px38y35, Px39y36 } CellNode (38 @ 36) (20)Px34y55 { Px35y55, Px34y54, Px33y55, Px34y56 } CellNode (34 @ 55) (20)Px31y75 { Px32y75, Px30y75, Px31y74, Px31y76 } CellNode (31 @ 75) (20)Px35y56 { Px35y55, Px35y57, Px34y56, Px36y56 } CellNode (35 @ 56) (20)Px14y84 { Px14y83, Px15y84, Px13y84 } CellNode (14 @ 84) (20)Px38y79 { Px39y79, Px37y79, Px38y78, Px38y80 } CellNode (38 @ 79) (20)Px73y80 { Px74y80, Px73y81, Px72y80, Px73y79 } CellNode (73 @ 80) (20)Px65y31 { Px65y32, Px64y31, Px66y31, Px65y30 } CellNode (65 @ 31) (20)Px64y30 { Px64y29, Px64y31, Px65y30, Px63y30 } CellNode (64 @ 30) (20)Px42y80 { Px42y79, Px42y81, Px41y80, Px43y80 } CellNode (42 @ 80) (20)Px33y30 { Px34y30, Px32y30, Px33y29, Px33y31 } CellNode (33 @ 30) (20)Px65y74 { Px64y74, Px66y74, Px65y75, Px65y73 } CellNode (65 @ 74) (20)Px79y83 { Px79y84, Px80y83, Px78y83, Px79y82 } CellNode (79 @ 83) (20)Px57y25 { Px56y25, Px57y26, Px57y24 } CellNode (57 @ 25) (20)Px56y24 { Px57y24, Px56y23, Px55y24, Px56y25 } CellNode (56 @ 24) (20)Px34y74 { Px35y74, Px33y74, Px34y73, Px34y75 } CellNode (34 @ 74) (20)Px9y82 { Px9y83, Px9y81, Px8y82, Px10y82 } CellNode (9 @ 82) (20)Px33y73 { Px33y74, Px34y73, Px33y72, Px32y73 } CellNode (33 @ 73) (20)Px36y53 { Px36y54, Px37y53, Px36y52, Px35y53 } CellNode (36 @ 53) (20)Px39y33 { Px39y34, Px38y33, Px40y33 } CellNode (39 @ 33) (20)Px71y79 { Px71y80, Px72y79, Px70y79, Px71y78 } CellNode (71 @ 79) (20)Px70y78 { Px70y77, Px69y78, Px70y79, Px71y78 } CellNode (70 @ 78) (20)Px16y82 { Px16y83, Px17y82, Px15y82, Px16y81 } CellNode (16 @ 82) (20)Px37y54 { Px36y54, Px38y54, Px37y53, Px37y55 } CellNode (37 @ 54) (20)Px17y83 { Px18y83, Px16y83, Px17y84, Px17y82 } CellNode (17 @ 83) (20)Px62y29 { Px61y29, Px62y28, Px62y30, Px63y29 } CellNode (62 @ 29) (20)Px49y19 { Px49y18, Px50y19, Px48y19 } CellNode (49 @ 19) (20)Px45y38 { Px45y39, Px46y38, Px45y37, Px44y38 } CellNode (45 @ 38) (20)Px48y18 { Px48y19, Px49y18, Px47y18, Px48y17 } CellNode (48 @ 18) (20)Px30y28 { Px31y28, Px29y28, Px30y27 } CellNode (30 @ 28) (20)Px31y29 { Px32y29, Px31y28 } CellNode (31 @ 29) (20)Px25y67 { Px26y67, Px25y66, Px24y67 } CellNode (25 @ 67) (20)Px48y83 { Px47y83, Px48y82, Px49y83, Px48y84 } CellNode (48 @ 83) (20)Px73y58 { Px73y59, Px72y58 } CellNode (73 @ 58) (20)Px81y83 { Px81y84, Px80y83, Px82y83, Px81y82 } CellNode (81 @ 83) (20)Px80y82 { Px80y81, Px80y83, Px79y82, Px81y82 } CellNode (80 @ 82) (20)Px67y72 { Px66y72, Px67y71, Px67y73, Px68y72 } CellNode (67 @ 72) (20)Px55y42 { Px56y42, Px55y43, Px55y41, Px54y42 } CellNode (55 @ 42) (20)Px58y22 { Px58y23, Px57y22 } CellNode (58 @ 22) (20)Px40y32 { Px40y31, Px40y33, Px41y32 } CellNode (40 @ 32) (20)Px51y61 { Px52y61, Px50y61, Px51y60 } CellNode (51 @ 61) (20)Px35y71 { Px36y71, Px35y72, Px35y70, Px34y71 } CellNode (35 @ 71) (20)Px38y51 { Px38y52, Px39y51, Px38y50, Px37y51 } CellNode (38 @ 51) (20)Px49y80 { Px49y79, Px49y81, Px50y80, Px48y80 } CellNode (49 @ 80) (20)Px66y71 { Px67y71, Px65y71, Px66y70, Px66y72 } CellNode (66 @ 71) (20)Px72y76 { Px73y76, Px72y75, Px71y76, Px72y77 } CellNode (72 @ 76) (20)Px18y80 { Px17y80, Px18y79, Px19y80, Px18y81 } CellNode (18 @ 80) (20)Px63y26 { Px63y25, Px64y26, Px62y26 } CellNode (63 @ 26) (20)Px2y75 { Px2y74, Px2y76, Px1y75, Px3y75 } CellNode (2 @ 75) (20)Px41y76 { Px41y77, Px40y76, Px42y76, Px41y75 } CellNode (41 @ 76) (20)Px1y74 { Px1y75, Px2y74 } CellNode (1 @ 74) (20)Px32y26 { Px31y26, Px32y25, Px32y27, Px33y26 } CellNode (32 @ 26) (20)Px46y35 { Px45y35, Px46y36, Px47y35, Px46y34 } CellNode (46 @ 35) (20)Px47y36 { Px47y37, Px46y36, Px48y36, Px47y35 } CellNode (47 @ 36) (20)Px27y65 { Px27y64, Px28y65, Px27y66, Px26y65 } CellNode (27 @ 65) (20)Px23y84 { Px23y83, Px24y84, Px22y84 } CellNode (23 @ 84) (20)Px26y64 { Px27y64, Px25y64, Px26y63, Px26y65 } CellNode (26 @ 64) (20)Px40y75 { Px40y74, Px40y76, Px41y75, Px39y75 } CellNode (40 @ 75) (20)Px78y79 { Px79y79, Px77y79, Px78y78, Px78y80 } CellNode (78 @ 79) (20)Px9y79 { Px9y78, Px9y80, Px10y79, Px8y79 } CellNode (9 @ 79) (20)Px8y78 { Px9y78, Px7y78, Px8y77, Px8y79 } CellNode (8 @ 78) (20)Px32y69 { Px33y69, Px31y69, Px32y68, Px32y70 } CellNode (32 @ 69) (20)Px35y49 { Px36y49, Px34y49, Px35y48, Px35y50 } CellNode (35 @ 49) (20)Px47y79 { Px47y78, Px47y80, Px48y79, Px46y79 } CellNode (47 @ 79) (20)Px16y79 { Px15y79, Px16y78, Px16y80, Px17y79 } CellNode (16 @ 79) (20)Px49y4 { Px48y4, Px49y5, Px49y3, Px50y4 } CellNode (49 @ 4) (20)Px15y78 { Px15y79, Px16y78, Px14y78, Px15y77 } CellNode (15 @ 78) (20)Px82y80 { Px83y80, Px81y80, Px82y79, Px82y81 } CellNode (82 @ 80) (20)Px69y70 { Px70y70, Px68y70, Px69y71, Px69y69 } CellNode (69 @ 70) (20)Px51y80 { Px52y80, Px51y81, Px50y80, Px51y79 } CellNode (51 @ 80) (20)Px57y40 { Px58y40, Px56y40, Px57y41, Px57y39 } CellNode (57 @ 40) (20)Px89y84 { Px88y84, Px89y83, Px90y84 } CellNode (89 @ 84) (20)Px74y74 { Px74y75, Px73y74, Px75y74, Px74y73 } CellNode (74 @ 74) (20)Px88y83 { Px88y84, Px89y83, Px88y82, Px87y83 } CellNode (88 @ 83) (20)Px51y15 { Px51y14, Px51y16, Px50y15, Px52y15 } CellNode (51 @ 15) (20)Px73y73 { Px73y74, Px74y73, Px73y72, Px72y73 } CellNode (73 @ 73) (20)Px50y14 { Px51y14, Px49y14, Px50y13, Px50y15 } CellNode (50 @ 14) (20)Px57y83 { Px57y82, Px58y83, Px57y84, Px56y83 } CellNode (57 @ 83) (20)Px49y34 { Px49y33, Px50y34, Px48y34, Px49y35 } CellNode (49 @ 34) (20)Px42y73 { Px42y72, Px41y73, Px42y74, Px43y73 } CellNode (42 @ 73) (20)Px80y79 { Px81y79, Px79y79, Px80y78, Px80y80 } CellNode (80 @ 79) (20)Px26y83 { Px25y83, Px27y83, Px26y82, Px26y84 } CellNode (26 @ 83) (20)Px29y63 { Px28y63, Px30y63, Px29y62, Px29y64 } CellNode (29 @ 63) (20)Px25y82 { Px25y83, Px26y82, Px24y82, Px25y81 } CellNode (25 @ 82) (20)Px11y73 { Px12y73, Px10y73, Px11y74, Px11y72 } CellNode (11 @ 73) (20)Px48y33 { Px49y33, Px48y32, Px47y33, Px48y34 } CellNode (48 @ 33) (20)Px28y62 { Px27y62, Px29y62, Px28y63 } CellNode (28 @ 62) (20)Px58y19 { Px59y19, Px57y19 } CellNode (58 @ 19) (20)Px54y38 { Px54y37, Px53y38, Px54y39, Px55y38 } CellNode (54 @ 38) (20)Px68y47 { Px69y47, Px68y46 } CellNode (68 @ 47) (20)Px50y57 { Px51y57, Px50y56, Px49y57, Px50y58 } CellNode (50 @ 57) (20)Px69y48 { Px69y47 } CellNode (69 @ 48) (20)Px34y67 { Px35y67, Px34y68, Px34y66, Px33y67 } CellNode (34 @ 67) (20)Px48y76 { Px49y76, Px47y76, Px48y75, Px48y77 } CellNode (48 @ 76) (20)Px49y77 { Px50y77, Px49y76, Px49y78, Px48y77 } CellNode (49 @ 77) (20)Px51y58 { Px50y58, Px51y57, Px52y58, Px51y59 } CellNode (51 @ 58) (20)Px10y72 { Px10y73, Px9y72, Px11y72, Px10y71 } CellNode (10 @ 72) (20)Px37y47 { Px37y48, Px38y47, Px37y46, Px36y47 } CellNode (37 @ 47) (20)Px17y76 { Px18y76, Px17y77, Px16y76, Px17y75 } CellNode (17 @ 76) (20)Px52y4 { Px51y4, Px52y3, Px52y5 } CellNode (52 @ 4) (20)Px76y72 { Px76y73, Px75y72, Px77y72, Px76y71 } CellNode (76 @ 72) (20)Px75y71 { Px74y71, Px75y70, Px75y72, Px76y71 } CellNode (75 @ 71) (20)Px52y12 { Px52y13, Px53y12, Px51y12, Px52y11 } CellNode (52 @ 12) (20)Px63y41 { Px64y41, Px63y40 } CellNode (63 @ 41) (20)Px58y80 { Px57y80, Px58y81 } CellNode (58 @ 80) (20)Px81y76 { Px81y77, Px80y76, Px82y76 } CellNode (81 @ 76) (20)Px27y80 { Px28y80, Px27y81, Px26y80, Px27y79 } CellNode (27 @ 80) (20)Px12y70 { Px11y70, Px12y69, Px12y71, Px13y70 } CellNode (12 @ 70) (20)Px50y76 { Px50y77, Px49y76, Px51y76, Px50y75 } CellNode (50 @ 76) (20)Px53y56 { Px52y56, Px53y57, Px54y56 } CellNode (53 @ 56) (20)Px56y36 { Px56y35, Px57y36, Px56y37 } CellNode (56 @ 36) (20)Px57y7 { Px56y7, Px57y6, Px57y8 } CellNode (57 @ 7) (20)Px55y35 { Px56y35, Px54y35 } CellNode (55 @ 35) (20)Px36y65 { Px35y65, Px36y64, Px36y66 } CellNode (36 @ 65) (20)Px39y45 { Px39y46, Px38y45, Px40y45, Px39y44 } CellNode (39 @ 45) (20)Px35y64 { Px34y64, Px35y65, Px36y64, Px35y63 } CellNode (35 @ 64) (20)Px32y84 { Px32y83, Px31y84, Px33y84 } CellNode (32 @ 84) (20)Px19y74 { Px19y73, Px19y75, Px18y74, Px20y74 } CellNode (19 @ 74) (20)Px72y69 { Px73y69, Px72y68, Px71y69, Px72y70 } CellNode (72 @ 69) (20)Px18y73 { Px19y73, Px17y73, Px18y72, Px18y74 } CellNode (18 @ 73) (20)Px56y79 { Px56y80, Px57y79, Px55y79, Px56y78 } CellNode (56 @ 79) (20)Px41y69 { Px40y69, Px41y70 } CellNode (41 @ 69) (20)Px44y49 { Px43y49, Px44y48 } CellNode (44 @ 49) (20)Px47y29 { Px46y29, Px47y30, Px48y29, Px47y28 } CellNode (47 @ 29) (20)Px91y80 { Px91y79, Px92y80, Px90y80, Px91y81 } CellNode (91 @ 80) (20)Px10y69 { Px10y70, Px11y69, Px9y69 } CellNode (10 @ 69) (20)Px24y78 { Px25y78, Px23y78, Px24y77, Px24y79 } CellNode (24 @ 78) (20)Px25y79 { Px25y78, Px25y80, Px26y79, Px24y79 } CellNode (25 @ 79) (20)Px66y40 { Px66y41, Px65y40, Px67y40, Px66y39 } CellNode (66 @ 40) (20)Px51y30 { Px52y30, Px51y31, Px50y30, Px51y29 } CellNode (51 @ 30) (20)Px97y83 { Px96y83, Px97y82, Px97y84 } CellNode (97 @ 83) (20)Px60y15 { Px59y15, Px60y16, Px60y14 } CellNode (60 @ 15) (20)Px66y83 { Px67y83, Px66y84, Px65y83, Px66y82 } CellNode (66 @ 83) (20)Px58y34 { Px59y34, Px57y34, Px58y35, Px58y33 } CellNode (58 @ 34) (20)Px43y24 { Px43y23, Px44y24, Px43y25, Px42y24 } CellNode (43 @ 24) (20)Px57y33 { Px57y34, Px58y33, Px56y33 } CellNode (57 @ 33) (20)Px42y23 { Px43y23, Px41y23, Px42y22, Px42y24 } CellNode (42 @ 23) (20)Px40y44 { Px40y43, Px40y45, Px39y44, Px41y44 } CellNode (40 @ 44) (20)Px34y82 { Px33y82, Px34y81, Px34y83, Px35y82 } CellNode (34 @ 82) (20)Px37y62 { Px37y61, Px36y62 } CellNode (37 @ 62) (20)Px20y73 { Px19y73, Px20y74, Px20y72, Px21y73 } CellNode (20 @ 73) (20)Px75y68 { Px76y68, Px74y68, Px75y69, Px75y67 } CellNode (75 @ 68) (20)Px65y82 { Px65y81, Px65y83, Px66y82, Px64y82 } CellNode (65 @ 82) (20)Px63y38 { Px63y39, Px62y38, Px64y38, Px63y37 } CellNode (63 @ 38) (20)Px51y73 { Px51y72, Px52y73, Px51y74, Px50y73 } CellNode (51 @ 73) (20)Px74y67 { Px74y68, Px75y67, Px73y67, Px74y66 } CellNode (74 @ 67) (20)Px57y76 { Px56y76, Px57y75, Px57y77 } CellNode (57 @ 76) (20)Px49y27 { Px50y27, Px48y27, Px49y26, Px49y28 } CellNode (49 @ 27) (20)Px26y76 { Px26y77, Px27y76, Px26y75, Px25y76 } CellNode (26 @ 76) (20)Px70y62 { Px70y61 } CellNode (70 @ 62) (20)Px68y81 { Px69y81, Px67y81, Px68y82, Px68y80 } CellNode (68 @ 81) (20)Px45y22 { Px44y22, Px46y22, Px45y23 } CellNode (45 @ 22) (20)Px59y31 { Px60y31, Px59y30, Px58y31, Px59y32 } CellNode (59 @ 31) (20)Px41y41 { Px42y41, Px41y42, Px40y41, Px41y40 } CellNode (41 @ 41) (20)Px52y70 { Px52y69, Px51y70 } CellNode (52 @ 70) (20)Px36y80 { Px36y81, Px37y80, Px35y80, Px36y79 } CellNode (36 @ 80) (20)Px21y70 { Px21y71, Px22y70, Px20y70, Px21y69 } CellNode (21 @ 70) (20)Px67y80 { Px66y80, Px67y79, Px67y81, Px68y80 } CellNode (67 @ 80) (20)Px65y36 { Px64y36, Px65y35, Px65y37 } CellNode (65 @ 36) (20)Px50y26 { Px50y27, Px50y25, Px49y26 } CellNode (50 @ 26) (20)Px64y35 { Px65y35, Px63y35, Px64y34, Px64y36 } CellNode (64 @ 35) (20)Px3y84 { Px3y83, Px2y84, Px4y84 } CellNode (3 @ 84) (20)Px2y83 { Px1y83, Px2y84, Px3y83, Px2y82 } CellNode (2 @ 83) (20)Px59y74 { Px59y75, Px59y73, Px60y74 } CellNode (59 @ 74) (20)Px41y84 { Px40y84, Px42y84, Px41y83 } CellNode (41 @ 84) (20)Px28y74 { Px29y74, Px27y74, Px28y75, Px28y73 } CellNode (28 @ 74) (20)Px10y84 { Px11y84, Px10y83, Px9y84 } CellNode (10 @ 84) (20)Px27y73 { Px26y73, Px27y74, Px28y73, Px27y72 } CellNode (27 @ 73) (20)Px96y79 { Px96y80, Px95y79, Px97y79 } CellNode (96 @ 79) (20)Px65y79 { Px64y79, Px65y78, Px65y80, Px66y79 } CellNode (65 @ 79) (20)Px68y59 { Px69y59, Px68y60, Px68y58 } CellNode (68 @ 59) (20)Px50y69 { Px50y70, Px51y69, Px49y69, Px50y68 } CellNode (50 @ 69) (20)Px56y29 { Px56y30, Px57y29, Px56y28, Px55y29 } CellNode (56 @ 29) (20)Px41y19 { Px42y19, Px41y18 } CellNode (41 @ 19) (20)Px37y59 { Px38y59, Px36y59, Px37y58, Px37y60 } CellNode (37 @ 59) (20)Px33y78 { Px33y77, Px34y78, Px33y79, Px32y78 } CellNode (33 @ 78) (20)Px36y58 { Px36y57, Px36y59, Px37y58, Px35y58 } CellNode (36 @ 58) (20)Px25y29 { Px25y28, Px25y30, Px26y29, Px24y29 } CellNode (25 @ 29) (20)Px24y28 { Px25y28, Px23y28, Px24y27, Px24y29 } CellNode (24 @ 28) (20)Px72y60 { Px72y61, Px72y59, Px73y60, Px71y60 } CellNode (72 @ 60) (20)Px60y30 { Px61y30, Px60y31, Px59y30, Px60y29 } CellNode (60 @ 30) (20)Px75y83 { Px74y83, Px76y83, Px75y82, Px75y84 } CellNode (75 @ 83) (20)Px60y73 { Px61y73, Px59y73, Px60y74, Px60y72 } CellNode (60 @ 73) (20)Px74y82 { Px74y83, Px75y82, Px73y82, Px74y81 } CellNode (74 @ 82) (20)Px51y23 { Px51y22, Px51y24, Px52y23, Px50y23 } CellNode (51 @ 23) (20)Px43y82 { Px43y81, Px43y83, Px44y82, Px42y82 } CellNode (43 @ 82) (20)Px4y81 { Px4y80, Px3y81, Px4y82, Px5y81 } CellNode (4 @ 81) (20)Px35y33 { Px35y32, Px36y33 } CellNode (35 @ 33) (20)Px34y32 { Px34y31, Px35y32 } CellNode (34 @ 32) (20)Px12y82 { Px11y82, Px12y83, Px12y81, Px13y82 } CellNode (12 @ 82) (20)Px29y71 { Px30y71, Px29y70, Px28y71, Px29y72 } CellNode (29 @ 71) (20)Px11y81 { Px11y82, Px12y81, Px11y80, Px10y81 } CellNode (11 @ 81) (20)Px67y77 { Px68y77, Px66y77, Px67y78, Px67y76 } CellNode (67 @ 77) (20)Px52y67 { Px53y67, Px52y68 } CellNode (52 @ 67) (20)Px66y76 { Px66y77, Px67y76, Px66y75, Px65y76 } CellNode (66 @ 76) (20)Px69y56 { Px69y57, Px70y56, Px69y55, Px68y56 } CellNode (69 @ 56) (20)Px43y17 { Px43y18, Px42y17, Px43y16 } CellNode (43 @ 17) (20)Px58y27 { Px58y28, Px57y27 } CellNode (58 @ 27) (20)Px35y76 { Px34y76, Px35y75, Px35y77, Px36y76 } CellNode (35 @ 76) (20)Px27y27 { Px26y27, Px27y28, Px27y26, Px28y27 } CellNode (27 @ 27) (20)Px38y56 { Px37y56, Px38y55, Px39y56, Px38y57 } CellNode (38 @ 56) (20)Px44y18 { Px43y18, Px45y18 } CellNode (44 @ 18) (20)Px1y79 { Px2y79, Px1y80, Px1y78 } CellNode (1 @ 79) (20)Px77y81 { Px78y81, Px76y81, Px77y82, Px77y80 } CellNode (77 @ 81) (20)Px76y80 { Px76y79, Px76y81, Px77y80, Px75y80 } CellNode (76 @ 80) (20)Px53y21 { Px53y20, Px53y22 } CellNode (53 @ 21) (20)Px45y80 { Px45y81, Px45y79, Px46y80, Px44y80 } CellNode (45 @ 80) (20)Px37y31 { Px36y31, Px37y32, Px37y30 } CellNode (37 @ 31) (20)Px33y50 { Px33y51, Px34y50, Px32y50, Px33y49 } CellNode (33 @ 50) (20)Px36y30 { Px36y31, Px37y30, Px35y30, Px36y29 } CellNode (36 @ 30) (20)Px49y9 { Px48y9 } CellNode (49 @ 9) (20)Px71y56 { Px70y56, Px72y56, Px71y57 } CellNode (71 @ 56) (20)Px48y60 { Px47y60, Px48y59, Px49y60, Px48y61 } CellNode (48 @ 60) (20)Px30y70 { Px30y71, Px29y70, Px31y70, Px30y69 } CellNode (30 @ 70) (20)Px69y75 { Px69y76, Px68y75, Px70y75, Px69y74 } CellNode (69 @ 75) (20)Px68y74 { Px68y73, Px67y74, Px68y75, Px69y74 } CellNode (68 @ 74) (20)Px50y84 { Px50y83, Px51y84, Px49y84 } CellNode (50 @ 84) (20)Px56y44 { Px57y44, Px56y43, Px55y44 } CellNode (56 @ 44) (20)Px59y24 { Px60y24, Px59y25, Px58y24 } CellNode (59 @ 24) (20)Px41y34 { Px41y35, Px42y34, Px41y33, Px40y34 } CellNode (41 @ 34) (20)Px42y35 { Px42y36, Px43y35, Px41y35, Px42y34 } CellNode (42 @ 35) (20)Px36y73 { Px36y74, Px37y73, Px36y72, Px35y73 } CellNode (36 @ 73) (20)Px39y53 { Px39y54, Px40y53, Px38y53, Px39y52 } CellNode (39 @ 53) (20)Px74y79 { Px74y78, Px74y80, Px75y79, Px73y79 } CellNode (74 @ 79) (20)Px22y64 { Px22y63, Px23y64, Px22y65 } CellNode (22 @ 64) (20)Px73y78 { Px74y78, Px73y77, Px72y78, Px73y79 } CellNode (73 @ 78) (20)Px19y82 { Px19y81, Px19y83, Px20y82, Px18y82 } CellNode (19 @ 82) (20)Px50y19 { Px49y19, Px50y18, Px51y19 } CellNode (50 @ 19) (20)Px65y29 { Px66y29, Px65y28, Px64y29, Px65y30 } CellNode (65 @ 29) (20)Px3y77 { Px3y76, Px4y77, Px3y78, Px2y77 } CellNode (3 @ 77) (20)Px34y29 { Px35y29, Px33y29, Px34y28, Px34y30 } CellNode (34 @ 29) (20)Px57y45 { Px57y44 } CellNode (57 @ 45) (20)Px33y28 { Px33y27, Px33y29, Px34y28, Px32y28 } CellNode (33 @ 28) (20)Px11y78 { Px11y77, Px12y78, Px11y79, Px10y78 } CellNode (11 @ 78) (20)Px37y74 { Px38y74, Px36y74, Px37y75, Px37y73 } CellNode (37 @ 74) (20)Px28y67 { Px28y66, Px29y67, Px27y67 } CellNode (28 @ 67) (20)Px10y77 { Px11y77, Px10y76, Px10y78, Px9y77 } CellNode (10 @ 77) (20)Px42y78 { Px43y78, Px42y79, Px42y77, Px41y78 } CellNode (42 @ 78) (20)Px46y59 { Px46y60, Px46y58, Px47y59 } CellNode (46 @ 59) (20)Px84y83 { Px84y84, Px83y83, Px85y83 } CellNode (84 @ 83) (20)Px83y82 { Px82y82, Px83y83, Px83y81 } CellNode (83 @ 82) (20)Px61y24 { Px61y25, Px62y24, Px60y24, Px61y23 } CellNode (61 @ 24) (20)Px41y53 { Px42y53, Px40y53, Px41y54, Px41y52 } CellNode (41 @ 53) (20)Px44y33 { Px44y34, Px45y33, Px43y33 } CellNode (44 @ 33) (20)Px47y13 { Px47y14, Px46y13, Px48y13 } CellNode (47 @ 13) (20)Px58y42 { Px57y42, Px58y41 } CellNode (58 @ 42) (20)Px40y52 { Px40y53, Px39y52, Px41y52, Px40y51 } CellNode (40 @ 52) (20)Px24y62 { Px24y61, Px24y63, Px23y62, Px25y62 } CellNode (24 @ 62) (20)Px38y71 { Px37y71, Px38y72 } CellNode (38 @ 71) (20)Px23y61 { Px23y62, Px24y61, Px22y61 } CellNode (23 @ 61) (20)Px76y77 { Px76y78, Px75y77, Px76y76, Px77y77 } CellNode (76 @ 77) (20)Px20y81 { Px21y81, Px20y80, Px20y82, Px19y81 } CellNode (20 @ 81) (20)Px39y72 { Px38y72, Px39y73, Px40y72 } CellNode (39 @ 72) (20)Px58y9 { Px57y9, Px58y8 } CellNode (58 @ 9) (20)Px21y82 { Px21y81, Px21y83, Px20y82, Px22y82 } CellNode (21 @ 82) (20)Px52y82 { Px53y82, Px52y83, Px51y82, Px52y81 } CellNode (52 @ 82) (20)Px5y75 { Px4y75, Px5y76, Px6y75 } CellNode (5 @ 75) (20)Px47y56 { Px46y56, Px48y56, Px47y57 } CellNode (47 @ 56) (20)Px43y75 { Px43y74, Px42y75, Px43y76, Px44y75 } CellNode (43 @ 75) (20)Px44y76 { Px45y76, Px44y77, Px43y76, Px44y75 } CellNode (44 @ 76) (20)Px75y76 { Px75y77, Px76y76, Px75y75, Px74y76 } CellNode (75 @ 76) (20)Px12y75 { Px13y75, Px12y76, Px11y75, Px12y74 } CellNode (12 @ 75) (20)Px35y69 { Px36y69, Px35y68, Px34y69, Px35y70 } CellNode (35 @ 69) (20)Px38y49 { Px39y49, Px37y49, Px38y48, Px38y50 } CellNode (38 @ 49) (20)Px71y71 { Px71y72, Px70y71, Px72y71, Px71y70 } CellNode (71 @ 71) (20)Px19y79 { Px18y79, Px20y79, Px19y78, Px19y80 } CellNode (19 @ 79) (20)Px70y70 { Px70y69, Px70y71, Px71y70, Px69y70 } CellNode (70 @ 70) (20)Px18y78 { Px18y79, Px19y78, Px17y78, Px18y77 } CellNode (18 @ 78) (20)Px54y80 { Px54y79, Px54y81, Px53y80, Px55y80 } CellNode (54 @ 80) (20)Px49y11 { Px49y12, Px50y11, Px48y11 } CellNode (49 @ 11) (20)Px42y50 { Px41y50, Px42y49, Px42y51, Px43y50 } CellNode (42 @ 50) (20)Px48y10 { Px48y9, Px48y11 } CellNode (48 @ 10) (20)Px45y30 { Px45y31, Px46y30, Px45y29 } CellNode (45 @ 30) (20)Px90y84 { Px89y84, Px90y83, Px91y84 } CellNode (90 @ 84) (20)Px77y74 { Px78y74, Px77y75, Px77y73, Px76y74 } CellNode (77 @ 74) (20)Px51y35 { Px52y35, Px51y34, Px51y36, Px50y35 } CellNode (51 @ 35) (20)Px54y15 { Px55y15, Px54y16 } CellNode (54 @ 15) (20)Px50y34 { Px51y34, Px50y33, Px49y34, Px50y35 } CellNode (50 @ 34) (20)Px46y74 { Px45y74, Px46y73, Px46y75, Px47y74 } CellNode (46 @ 74) (20)Px31y64 { Px32y64, Px30y64, Px31y65, Px31y63 } CellNode (31 @ 64) (20)Px34y44 { Px34y45, Px35y44 } CellNode (34 @ 44) (20)Px30y63 { Px30y64, Px31y63, Px29y63, Px30y62 } CellNode (30 @ 63) (20)Px83y79 { Px83y78, Px83y80, Px82y79 } CellNode (83 @ 79) (20)Px45y73 { Px46y73, Px45y72, Px44y73, Px45y74 } CellNode (45 @ 73) (20)Px14y73 { Px14y74, Px15y73, Px13y73, Px14y72 } CellNode (14 @ 73) (20)Px28y82 { Px28y83, Px29y82, Px27y82, Px28y81 } CellNode (28 @ 82) (20)Px29y83 { Px29y84, Px28y83, Px30y83, Px29y82 } CellNode (29 @ 83) (20)Px82y78 { Px81y78, Px82y79, Px83y78, Px82y77 } CellNode (82 @ 78) (20)Px58y39 { Px58y38, Px58y40, Px59y39, Px57y39 } CellNode (58 @ 39) (20)Px40y49 { Px41y49, Px39y49, Px40y48, Px40y50 } CellNode (40 @ 49) (20)Px57y38 { Px58y38, Px57y37, Px56y38, Px57y39 } CellNode (57 @ 38) (20)Px69y68 { Px69y69, Px70y68 } CellNode (69 @ 68) (20)Px20y78 { Px21y78, Px19y78, Px20y79, Px20y77 } CellNode (20 @ 78) (20)Px51y78 { Px52y78, Px51y77, Px50y78, Px51y79 } CellNode (51 @ 78) (20)Px37y67 { Px37y68, Px36y67, Px37y66 } CellNode (37 @ 67) (20)Px53y14 { Px53y13, Px52y14 } CellNode (53 @ 14) (20)Px13y72 { Px13y71, Px13y73, Px14y72, Px12y72 } CellNode (13 @ 72) (20)Px93y83 { Px93y84, Px92y83, Px94y83, Px93y82 } CellNode (93 @ 83) (20)Px92y82 { Px92y81, Px92y83, Px93y82, Px91y82 } CellNode (92 @ 82) (20)Px68y43 { Px67y43, Px68y42, Px68y44 } CellNode (68 @ 43) (20)Px53y33 { Px54y33, Px52y33, Px53y34, Px53y32 } CellNode (53 @ 33) (20)Px67y42 { Px68y42, Px66y42, Px67y41, Px67y43 } CellNode (67 @ 42) (20)Px52y32 { Px52y33, Px53y32, Px51y32, Px52y31 } CellNode (52 @ 32) (20)Px48y72 { Px47y72, Px49y72, Px48y73 } CellNode (48 @ 72) (20)Px33y62 { Px34y62, Px33y63, Px32y62, Px33y61 } CellNode (33 @ 62) (20)Px8y70 { Px8y69, Px8y71, Px9y70, Px7y70 } CellNode (8 @ 70) (20)Px55y12 { Px54y12, Px55y11 } CellNode (55 @ 12) (20)Px9y71 { Px9y72, Px8y71, Px9y70, Px10y71 } CellNode (9 @ 71) (20)Px70y67 { Px71y67, Px70y68, Px70y66 } CellNode (70 @ 67) (20)Px56y13 { Px57y13, Px56y14 } CellNode (56 @ 13) (20)Px32y61 { Px31y61, Px32y62, Px33y61, Px32y60 } CellNode (32 @ 61) (20)Px15y70 { Px14y70, Px15y71, Px16y70 } CellNode (15 @ 70) (20)Px16y71 { Px16y70, Px17y71, Px15y71, Px16y72 } CellNode (16 @ 71) (20)Px53y76 { Px53y77, Px52y76, Px54y76, Px53y75 } CellNode (53 @ 76) (20)Px45y27 { Px45y28, Px46y27, Px44y27, Px45y26 } CellNode (45 @ 27) (20)Px52y75 { Px52y76, Px53y75, Px51y75, Px52y74 } CellNode (52 @ 75) (20)Px44y26 { Px44y25, Px45y26, Px44y27 } CellNode (44 @ 26) (20)Px59y36 { Px59y37, Px60y36, Px58y36, Px59y35 } CellNode (59 @ 36) (20)Px41y46 { Px41y45, Px41y47, Px42y46, Px40y46 } CellNode (41 @ 46) (20)Px21y75 { Px20y75, Px21y74, Px22y75, Px21y76 } CellNode (21 @ 75) (20)Px35y84 { Px34y84, Px36y84, Px35y83 } CellNode (35 @ 84) (20)Px95y81 { Px95y80, Px95y82, Px94y81, Px96y81 } CellNode (95 @ 81) (20)Px94y80 { Px95y80, Px93y80, Px94y79, Px94y81 } CellNode (94 @ 80) (20)Px13y69 { Px14y69, Px12y69, Px13y68, Px13y70 } CellNode (13 @ 69) (20)Px27y78 { Px28y78, Px26y78, Px27y77, Px27y79 } CellNode (27 @ 78) (20)Px12y68 { Px13y68, Px12y67, Px12y69 } CellNode (12 @ 68) (20)Px63y80 { Px64y80, Px62y80, Px63y81, Px63y79 } CellNode (63 @ 80) (20)Px28y79 { Px28y78, Px28y80, Px29y79, Px27y79 } CellNode (28 @ 79) (20)Px54y30 { Px54y29, Px55y30, Px54y31, Px53y30 } CellNode (54 @ 30) (20)Px57y10 { Px57y9, Px56y10 } CellNode (57 @ 10) (20)Px23y30 { Px23y29, Px22y30, Px24y30 } CellNode (23 @ 30) (20)Px71y64 { Px70y64, Px71y65, Px72y64 } CellNode (71 @ 64) (20)Px60y35 { Px61y35, Px60y36, Px59y35, Px60y34 } CellNode (60 @ 35) (20)Px55y74 { Px56y74, Px54y74, Px55y75, Px55y73 } CellNode (55 @ 74) (20)Px69y83 { Px69y84, Px70y83, Px69y82, Px68y83 } CellNode (69 @ 83) (20)Px43y44 { Px42y44, Px43y43, Px43y45 } CellNode (43 @ 44) (20)Px46y24 { Px46y25, Px46y23, Px47y24 } CellNode (46 @ 24) (20)Px42y43 { Px43y43, Px42y42, Px41y43, Px42y44 } CellNode (42 @ 43) (20)Px92y79 { Px93y79, Px91y79, Px92y78, Px92y80 } CellNode (92 @ 79) (20)Px91y78 { Px91y79, Px92y78 } CellNode (91 @ 78) (20)Px37y82 { Px38y82, Px36y82, Px37y81, Px37y83 } CellNode (37 @ 82) (20)Px22y72 { Px22y73, Px23y72, Px21y72, Px22y71 } CellNode (22 @ 72) (20)Px23y73 { Px24y73, Px23y74, Px22y73, Px23y72 } CellNode (23 @ 73) (20)Px78y68 { Px77y68 } CellNode (78 @ 68) (20)Px60y78 { Px60y77, Px60y79, Px61y78 } CellNode (60 @ 78) (20)Px52y29 { Px52y28, Px52y30, Px53y29, Px51y29 } CellNode (52 @ 29) (20)Px51y28 { Px52y28, Px51y27, Px50y28, Px51y29 } CellNode (51 @ 28) (20)Px54y73 { Px53y73, Px54y72, Px54y74, Px55y73 } CellNode (54 @ 73) (20)Px32y58 { Px33y58, Px32y59 } CellNode (32 @ 58) (20)Px38y83 { Px37y83, Px38y82, Px39y83, Px38y84 } CellNode (38 @ 83) (20)Px38y18 { Px37y18, Px38y17 } CellNode (38 @ 18) (20)Px47y68 { Px48y68, Px47y69, Px47y67 } CellNode (47 @ 68) (20)Px37y17 { Px37y18, Px38y17 } CellNode (37 @ 17) (20)Px29y76 { Px29y77, Px30y76, Px29y75, Px28y76 } CellNode (29 @ 76) (20)Px70y82 { Px70y81, Px70y83, Px69y82, Px71y82 } CellNode (70 @ 82) (20)Px62y33 { Px61y33, Px62y32, Px62y34, Px63y33 } CellNode (62 @ 33) (20)Px61y32 { Px62y32, Px61y31, Px60y32, Px61y33 } CellNode (61 @ 32) (20)Px48y22 { Px47y22, Px48y23 } CellNode (48 @ 22) (20)Px25y71 { Px25y72, Px24y71, Px26y71, Px25y70 } CellNode (25 @ 71) (20)Px39y80 { Px39y79, Px39y81, Px40y80, Px38y80 } CellNode (39 @ 80) (20)Px24y70 { Px25y70, Px24y71, Px23y70 } CellNode (24 @ 70) (20)Px62y76 { Px61y76, Px62y77, Px62y75, Px63y76 } CellNode (62 @ 76) (20)Px61y75 { Px61y76, Px62y75, Px60y75, Px61y74 } CellNode (61 @ 75) (20)Px6y84 { Px7y84, Px6y83, Px5y84 } CellNode (6 @ 84) (20)Px30y75 { Px30y76, Px29y75, Px31y75, Px30y74 } CellNode (30 @ 75) (20)Px33y55 { Px33y56, Px34y55, Px33y54 } CellNode (33 @ 55) (20)Px44y84 { Px43y84, Px45y84, Px44y83 } CellNode (44 @ 84) (20)Px5y83 { Px4y83, Px5y82, Px5y84, Px6y83 } CellNode (5 @ 83) (20)Px13y84 { Px14y84, Px13y83, Px12y84 } CellNode (13 @ 84) (20)Px68y79 { Px69y79, Px68y78, Px67y79, Px68y80 } CellNode (68 @ 79) (20)Px53y69 { Px52y69, Px54y69, Px53y68 } CellNode (53 @ 69) (20)Px59y29 { Px59y30, Px60y29, Px59y28, Px58y29 } CellNode (59 @ 29) (20)Px41y39 { Px41y38, Px40y39, Px41y40, Px42y39 } CellNode (41 @ 39) (20)Px22y69 { Px22y70, Px21y69, Px22y68 } CellNode (22 @ 69) (20)Px36y78 { Px35y78, Px36y77, Px36y79, Px37y78 } CellNode (36 @ 78) (20)Px39y58 { Px39y57, Px38y58 } CellNode (39 @ 58) (20)Px21y68 { Px22y68, Px21y67, Px21y69 } CellNode (21 @ 68) (20)Px37y79 { Px37y80, Px38y79, Px36y79, Px37y78 } CellNode (37 @ 79) (20)Px28y29 { Px28y28, Px27y29 } CellNode (28 @ 29) (20)Px63y30 { Px63y31, Px64y30, Px62y30, Px63y29 } CellNode (63 @ 30) (20)Px72y80 { Px71y80, Px73y80, Px72y79, Px72y81 } CellNode (72 @ 80) (20)Px32y30 { Px32y29, Px32y31, Px33y30 } CellNode (32 @ 30) (20)Px64y74 { Px65y74, Px63y74, Px64y75, Px64y73 } CellNode (64 @ 74) (20)Px78y83 { Px78y84, Px79y83, Px77y83, Px78y82 } CellNode (78 @ 83) (20)Px63y73 { Px63y74, Px64y73, Px62y73, Px63y72 } CellNode (63 @ 73) (20)Px55y24 { Px56y24, Px54y24, Px55y25, Px55y23 } CellNode (55 @ 24) (20)Px8y82 { Px8y83, Px8y81, Px9y82, Px7y82 } CellNode (8 @ 82) (20)Px32y73 { Px32y74, Px32y72, Px33y73, Px31y73 } CellNode (32 @ 73) (20)Px35y53 { Px34y53, Px35y52, Px35y54, Px36y53 } CellNode (35 @ 53) (20)Px49y62 { Px49y61, Px48y62, Px49y63, Px50y62 } CellNode (49 @ 62) (20)Px31y72 { Px32y72, Px31y71, Px30y72, Px31y73 } CellNode (31 @ 72) (20)Px46y82 { Px45y82, Px46y81, Px46y83, Px47y82 } CellNode (46 @ 82) (20)Px15y82 { Px15y83, Px16y82, Px14y82, Px15y81 } CellNode (15 @ 82) (20)Px61y29 { Px61y30, Px62y29, Px60y29, Px61y28 } CellNode (61 @ 29) (20)Px60y28 { Px60y27, Px60y29, Px59y28, Px61y28 } CellNode (60 @ 28) (20)Px47y83 { Px47y84, Px46y83, Px48y83, Px47y82 } CellNode (47 @ 83) (20)Px72y58 { Px73y58, Px72y59, Px71y58, Px72y57 } CellNode (72 @ 58) (20)Px44y38 { Px43y38, Px44y37, Px44y39, Px45y38 } CellNode (44 @ 38) (20)Px40y57 { Px39y57, Px40y56 } CellNode (40 @ 57) (20)Px55y67 { Px55y68, Px54y67 } CellNode (55 @ 67) (20)Px39y77 { Px39y78, Px39y76, Px40y77, Px38y77 } CellNode (39 @ 77) (20)Px24y67 { Px25y67, Px24y66, Px23y67 } CellNode (24 @ 67) (20)Px38y76 { Px39y76, Px37y76, Px38y75, Px38y77 } CellNode (38 @ 76) (20)Px46y17 { Px46y16, Px45y17, Px46y18 } CellNode (46 @ 17) (20)Px7y81 { Px8y81, Px6y81, Px7y80, Px7y82 } CellNode (7 @ 81) (20)Px54y23 { Px54y22, Px53y23, Px54y24, Px55y23 } CellNode (54 @ 23) (20)Px34y52 { Px35y52, Px33y52, Px34y51, Px34y53 } CellNode (34 @ 52) (20)Px38y33 { Px38y34, Px39y33, Px37y33 } CellNode (38 @ 33) (20)Px14y81 { Px14y82, Px15y81, Px13y81, Px14y80 } CellNode (14 @ 81) (20)Px43y37 { Px44y37, Px42y37, Px43y36, Px43y38 } CellNode (43 @ 37) (20)Px47y18 { Px48y18, Px46y18, Px47y19 } CellNode (47 @ 18) (20)Px23y66 { Px23y67, Px24y66, Px22y66, Px23y65 } CellNode (23 @ 66) (20)Px4y79 { Px4y80, Px5y79, Px4y78, Px3y79 } CellNode (4 @ 79) (20)Px54y42 { Px55y42, Px54y41, Px54y43, Px53y42 } CellNode (54 @ 42) (20)Px50y61 { Px49y61, Px50y62, Px50y60, Px51y61 } CellNode (50 @ 61) (20)Px79y80 { Px79y79, Px79y81, Px80y80, Px78y80 } CellNode (79 @ 80) (20)Px65y71 { Px65y70, Px64y71, Px66y71, Px65y72 } CellNode (65 @ 71) (20)Px34y71 { Px34y72, Px33y71, Px35y71, Px34y70 } CellNode (34 @ 71) (20)Px48y80 { Px49y80, Px47y80, Px48y79, Px48y81 } CellNode (48 @ 80) (20)Px53y41 { Px54y41, Px52y41, Px53y40, Px53y42 } CellNode (53 @ 41) (20)Px36y50 { Px36y49, Px36y51, Px37y50, Px35y50 } CellNode (36 @ 50) (20)Px71y76 { Px71y75, Px72y76, Px70y76, Px71y77 } CellNode (71 @ 76) (20)Px57y22 { Px56y22, Px57y23, Px58y22 } CellNode (57 @ 22) (20)Px70y75 { Px71y75, Px69y75, Px70y74, Px70y76 } CellNode (70 @ 75) (20)Px33y70 { Px33y69, Px33y71, Px34y70, Px32y70 } CellNode (33 @ 70) (20)Px37y51 { Px38y51, Px36y51, Px37y52, Px37y50 } CellNode (37 @ 51) (20)Px17y80 { Px18y80, Px16y80, Px17y81, Px17y79 } CellNode (17 @ 80) (20)Px62y26 { Px63y26, Px62y25, Px61y26, Px62y27 } CellNode (62 @ 26) (20)Px53y84 { Px53y83, Px52y84, Px54y84 } CellNode (53 @ 84) (20)Px45y35 { Px45y36, Px46y35, Px44y35, Px45y34 } CellNode (45 @ 35) (20)Px48y15 { Px48y16, Px49y15, Px47y15, Px48y14 } CellNode (48 @ 15) (20)Px49y16 { Px50y16, Px48y16, Px49y17, Px49y15 } CellNode (49 @ 16) (20)Px31y26 { Px31y27, Px31y25, Px32y26 } CellNode (31 @ 26) (20)Px25y64 { Px25y63, Px26y64, Px25y65, Px24y64 } CellNode (25 @ 64) (20)Px22y84 { Px22y83, Px21y84, Px23y84 } CellNode (22 @ 84) (20)Px77y79 { Px76y79, Px77y78, Px77y80, Px78y79 } CellNode (77 @ 79) (20)Px46y79 { Px47y79, Px45y79, Px46y78, Px46y80 } CellNode (46 @ 79) (20)Px31y69 { Px31y70, Px32y69, Px30y69, Px31y68 } CellNode (31 @ 69) (20)Px6y77 { Px5y77, Px6y76, Px6y78, Px7y77 } CellNode (6 @ 77) (20)Px53y19 { Px53y20, Px54y19, Px53y18, Px52y19 } CellNode (53 @ 19) (20)Px33y48 { Px33y49, Px34y48, Px32y48 } CellNode (33 @ 48) (20)Px37y29 { Px36y29, Px37y30 } CellNode (37 @ 29) (20)Px81y80 { Px81y79, Px82y80, Px81y81, Px80y80 } CellNode (81 @ 80) (20)Px48y58 { Px48y59, Px49y58, Px47y58, Px48y57 } CellNode (48 @ 58) (20)Px13y77 { Px14y77, Px12y77, Px13y76, Px13y78 } CellNode (13 @ 77) (20)Px7y78 { Px7y79, Px6y78, Px8y78, Px7y77 } CellNode (7 @ 78) (20)Px30y68 { Px31y68, Px30y69, Px30y67 } CellNode (30 @ 68) (20)Px34y49 { Px34y50, Px35y49, Px33y49, Px34y48 } CellNode (34 @ 49) (20)Px14y78 { Px13y78, Px14y77, Px14y79, Px15y78 } CellNode (14 @ 78) (20)Px45y78 { Px45y79, Px46y78, Px45y77, Px44y78 } CellNode (45 @ 78) (20)Px49y59 { Px50y59, Px48y59, Px49y58, Px49y60 } CellNode (49 @ 59) (20)Px87y83 { Px86y83, Px87y82, Px88y83, Px87y84 } CellNode (87 @ 83) (20)Px72y73 { Px73y73, Px72y74, Px71y73, Px72y72 } CellNode (72 @ 73) (20)Px64y24 { Px63y24, Px64y23, Px64y25 } CellNode (64 @ 24) (20)Px56y83 { Px56y84, Px55y83, Px57y83, Px56y82 } CellNode (56 @ 83) (20)Px63y23 { Px62y23, Px64y23, Px63y24 } CellNode (63 @ 23) (20)Px55y82 { Px55y83, Px56y82, Px54y82, Px55y81 } CellNode (55 @ 82) (20)Px47y33 { Px48y33, Px47y34, Px46y33, Px47y32 } CellNode (47 @ 33) (20)Px40y72 { Px39y72, Px40y73, Px41y72 } CellNode (40 @ 72) (20)Px46y32 { Px46y31, Px45y32, Px46y33, Px47y32 } CellNode (46 @ 32) (20)Px24y82 { Px23y82, Px24y81, Px24y83, Px25y82 } CellNode (24 @ 82) (20)Px27y62 { Px27y63, Px27y61, Px28y62, Px26y62 } CellNode (27 @ 62) (20)Px23y81 { Px24y81, Px23y80, Px22y81, Px23y82 } CellNode (23 @ 81) (20)Px26y61 { Px26y62, Px27y61, Px25y61 } CellNode (26 @ 61) (20)Px79y77 { Px79y78, Px78y77, Px80y77, Px79y76 } CellNode (79 @ 77) (20)Px53y38 { Px54y38, Px52y38, Px53y39, Px53y37 } CellNode (53 @ 38) (20)Px56y18 { Px56y17, Px55y18, Px56y19 } CellNode (56 @ 18) (20)Px52y37 { Px51y37, Px52y36, Px52y38, Px53y37 } CellNode (52 @ 37) (20)Px55y17 { Px55y16, Px54y17, Px55y18, Px56y17 } CellNode (55 @ 17) (20)Px9y76 { Px10y76, Px9y75, Px9y77, Px8y76 } CellNode (9 @ 76) (20)Px8y75 { Px9y75, Px7y75, Px8y74, Px8y76 } CellNode (8 @ 75) (20)Px32y66 { Px33y66, Px32y65, Px31y66, Px32y67 } CellNode (32 @ 66) (20)Px35y46 { Px36y46, Px35y45, Px34y46, Px35y47 } CellNode (35 @ 46) (20)Px36y47 { Px37y47, Px36y46, Px36y48, Px35y47 } CellNode (36 @ 47) (20)Px16y76 { Px17y76, Px16y77, Px15y76, Px16y75 } CellNode (16 @ 76) (20)Px47y76 { Px47y75, Px46y76, Px48y76, Px47y77 } CellNode (47 @ 76) (20)Px15y75 { Px15y76, Px16y75, Px14y75, Px15y74 } CellNode (15 @ 75) (20)Px33y67 { Px34y67, Px33y66, Px33y68, Px32y67 } CellNode (33 @ 67) (20)Px78y76 { Px78y77, Px79y76, Px78y75, Px77y76 } CellNode (78 @ 76) (20)Px41y73 { Px41y74, Px42y73, Px40y73, Px41y72 } CellNode (41 @ 73) (20)Px89y81 { Px89y82, Px88y81, Px90y81, Px89y80 } CellNode (89 @ 81) (20)Px74y71 { Px74y72, Px75y71, Px73y71, Px74y70 } CellNode (74 @ 71) (20)Px48y4 { Px48y5, Px49y4 } CellNode (48 @ 4) (20)Px51y12 { Px50y12, Px51y11, Px51y13, Px52y12 } CellNode (51 @ 12) (20)Px73y70 { Px73y69, Px73y71, Px74y70, Px72y70 } CellNode (73 @ 70) (20)Px50y11 { Px51y11, Px49y11, Px50y10, Px50y12 } CellNode (50 @ 11) (20)Px57y80 { Px56y80, Px57y79, Px58y80, Px57y81 } CellNode (57 @ 80) (20)Px49y31 { Px50y31, Px49y30, Px49y32, Px48y31 } CellNode (49 @ 31) (20)Px88y80 { Px89y80, Px88y81 } CellNode (88 @ 80) (20)Px80y76 { Px80y77, Px79y76, Px81y76 } CellNode (80 @ 76) (20)Px26y80 { Px26y81, Px27y80, Px25y80, Px26y79 } CellNode (26 @ 80) (20)Px11y70 { Px12y70, Px10y70, Px11y71, Px11y69 } CellNode (11 @ 70) (20)Px48y30 { Px49y30, Px47y30, Px48y29, Px48y31 } CellNode (48 @ 30) (20)Px58y16 { Px58y15, Px58y17, Px57y16 } CellNode (58 @ 16) (20)Px54y35 { Px55y35, Px54y34, Px53y35, Px54y36 } CellNode (54 @ 35) (20)Px57y15 { Px58y15, Px57y14, Px56y15, Px57y16 } CellNode (57 @ 15) (20)Px49y74 { Px48y74, Px50y74, Px49y73, Px49y75 } CellNode (49 @ 74) (20)Px34y64 { Px34y65, Px35y64, Px34y63, Px33y64 } CellNode (34 @ 64) (20)Px37y44 { Px37y45, Px38y44, Px36y44 } CellNode (37 @ 44) (20)Px48y73 { Px48y74, Px49y73, Px47y73, Px48y72 } CellNode (48 @ 73) (20)Px30y83 { Px30y84, Px31y83, Px29y83, Px30y82 } CellNode (30 @ 83) (20)Px31y84 { Px30y84, Px32y84, Px31y83 } CellNode (31 @ 84) (20)Px17y73 { Px16y73, Px18y73, Px17y74, Px17y72 } CellNode (17 @ 73) (20)Px71y69 { Px71y68, Px70y69, Px71y70, Px72y69 } CellNode (71 @ 69) (20)Px55y79 { Px54y79, Px55y78, Px55y80, Px56y79 } CellNode (55 @ 79) (20)Px40y69 { Px41y69, Px39y69, Px40y68, Px40y70 } CellNode (40 @ 69) (20)Px43y49 { Px44y49, Px42y49, Px43y48, Px43y50 } CellNode (43 @ 49) (20)Px46y29 { Px46y30, Px47y29, Px45y29, Px46y28 } CellNode (46 @ 29) (20)Px42y48 { Px42y49, Px43y48, Px42y47, Px41y48 } CellNode (42 @ 48) (20)Px54y78 { Px54y79, Px55y78, Px54y77, Px53y78 } CellNode (54 @ 78) (20)Px23y78 { Px24y78, Px22y78, Px23y79, Px23y77 } CellNode (23 @ 78) (20)Px45y28 { Px45y27, Px45y29, Px46y28, Px44y28 } CellNode (45 @ 28) (20)Px22y77 { Px21y77, Px22y76, Px22y78, Px23y77 } CellNode (22 @ 77) (20)Px53y10 { Px53y11, Px52y10 } CellNode (53 @ 10) (20)Px96y83 { Px96y82, Px97y83, Px96y84, Px95y83 } CellNode (96 @ 83) (20)Px51y4 { Px51y5, Px52y4, Px50y4 } CellNode (51 @ 4) (20)Px50y73 { Px50y74, Px49y73, Px51y73, Px50y72 } CellNode (50 @ 73) (20)Px64y82 { Px65y82, Px64y83, Px63y82, Px64y81 } CellNode (64 @ 82) (20)Px56y33 { Px57y33, Px55y33, Px56y34, Px56y32 } CellNode (56 @ 33) (20)Px59y13 { Px60y13 } CellNode (59 @ 13) (20)Px55y32 { Px55y33, Px56y32, Px55y31, Px54y32 } CellNode (55 @ 32) (20)Px33y82 { Px33y83, Px34y82, Px32y82, Px33y81 } CellNode (33 @ 82) (20)Px36y62 { Px37y62, Px35y62, Px36y63, Px36y61 } CellNode (36 @ 62) (20)Px32y81 { Px32y80, Px31y81, Px32y82, Px33y81 } CellNode (32 @ 81) (20)Px35y61 { Px35y60, Px34y61, Px35y62, Px36y61 } CellNode (35 @ 61) (20)Px41y23 { Px41y22, Px42y23, Px40y23 } CellNode (41 @ 23) (20)Px73y67 { Px73y68, Px72y67, Px74y67, Px73y66 } CellNode (73 @ 67) (20)Px19y71 { Px20y71, Px19y70, Px19y72, Px18y71 } CellNode (19 @ 71) (20)Px61y37 { Px61y38, Px62y37, Px60y37, Px61y36 } CellNode (61 @ 37) (20)Px72y66 { Px72y67, Px73y66, Px71y66, Px72y65 } CellNode (72 @ 66) (20)Px56y76 { Px56y77, Px57y76, Px55y76, Px56y75 } CellNode (56 @ 76) (20)Px48y27 { Px48y28, Px47y27, Px49y27, Px48y26 } CellNode (48 @ 27) (20)Px44y46 { Px43y46, Px44y47 } CellNode (44 @ 46) (20)Px47y26 { Px47y27, Px46y26, Px48y26 } CellNode (47 @ 26) (20)Px25y76 { Px25y77, Px25y75, Px26y76, Px24y76 } CellNode (25 @ 76) (20)Px56y7 { Px55y7, Px56y8, Px56y6, Px57y7 } CellNode (56 @ 7) (20)Px24y75 { Px25y75, Px23y75, Px24y74, Px24y76 } CellNode (24 @ 75) (20)Px9y69 { Px8y69, Px9y70, Px10y69 } CellNode (9 @ 69) (20)Px97y80 { Px96y80, Px97y81, Px97y79 } CellNode (97 @ 80) (20)Px60y12 { Px60y13 } CellNode (60 @ 12) (20)Px66y80 { Px67y80, Px66y81, Px65y80, Px66y79 } CellNode (66 @ 80) (20)Px69y60 { Px70y60, Px68y60, Px69y59 } CellNode (69 @ 60) (20)Px51y70 { Px50y70, Px52y70, Px51y69 } CellNode (51 @ 70) (20)Px57y30 { Px56y30, Px57y29, Px57y31, Px58y30 } CellNode (57 @ 30) (20)Px35y80 { Px35y79, Px35y81, Px36y80, Px34y80 } CellNode (35 @ 80) (20)Px58y31 { Px58y32, Px57y31, Px59y31, Px58y30 } CellNode (58 @ 31) (20)Px38y60 { Px38y59, Px37y60 } CellNode (38 @ 60) (20)Px26y30 { Px26y29, Px25y30 } CellNode (26 @ 30) (20)Px40y41 { Px40y42, Px41y41, Px40y40 } CellNode (40 @ 41) (20)Px75y65 { Px74y65, Px75y66, Px75y64 } CellNode (75 @ 65) (20)Px71y84 { Px71y83, Px72y84, Px70y84 } CellNode (71 @ 84) (20)Px74y64 { Px74y63, Px74y65, Px75y64, Px73y64 } CellNode (74 @ 64) (20)Px20y70 { Px21y70, Px19y70, Px20y71, Px20y69 } CellNode (20 @ 70) (20)Px63y35 { Px62y35, Px63y34, Px64y35, Px63y36 } CellNode (63 @ 35) (20)Px40y84 { Px41y84, Px40y83, Px39y84 } CellNode (40 @ 84) (20)Px1y83 { Px2y83, Px1y82, Px1y84 } CellNode (1 @ 83) (20)Px32y35 { Px32y36 } CellNode (32 @ 35) (20)Px49y24 { Px48y24, Px49y25 } CellNode (49 @ 24) (20)Px95y79 { Px95y80, Px94y79, Px96y79 } CellNode (95 @ 79) (20)Px57y73 { Px57y72, Px57y74, Px56y73 } CellNode (57 @ 73) (20)Px26y73 { Px26y74, Px27y73, Px25y73, Px26y72 } CellNode (26 @ 73) (20)Px63y78 { Px64y78, Px62y78, Px63y77, Px63y79 } CellNode (63 @ 78) (20)Px55y29 { Px54y29, Px55y28, Px55y30, Px56y29 } CellNode (55 @ 29) (20)Px54y28 { Px54y29, Px55y28, Px53y28, Px54y27 } CellNode (54 @ 28) (20)Px32y78 { Px33y78, Px31y78, Px32y79, Px32y77 } CellNode (32 @ 78) (20)Px35y58 { Px36y58, Px34y58, Px35y59, Px35y57 } CellNode (35 @ 58) (20)Px31y77 { Px31y78, Px32y77, Px30y77, Px31y76 } CellNode (31 @ 77) (20)Px23y28 { Px24y28, Px23y29, Px23y27 } CellNode (23 @ 28) (20)Px34y57 { Px34y58, Px35y57, Px33y57, Px34y56 } CellNode (34 @ 57) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange100Points20">genRange100Points20messages none  defined. P1 { P9 } Node (531 @ 355) (100) P9 { P1  } Node (553 @ 429) (100)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange401Points3">genRange401Points3messages none  defined. P2 { P3 } Node (163 @ 137) (401)P3 { P2 } Node (163 @ 82) (401)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="sample">samplemessages none  defined. P1 { P2 P3 } NodeP2 { P1 } NodeP3 { P1 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="aCellSystem0">aCellSystem0messages none  defined. Px10y1 { Px9y1, Px11y1, Px10y2 } CellNode (10 @ 1) (20)Px10y10 { Px9y10, Px11y10, Px10y9, Px10y11 } CellNode (10 @ 10) (20)Px10y11 { Px10y10, Px9y11, Px10y12, Px11y11 } CellNode (10 @ 11) (20)Px10y12 { Px10y13, Px10y11, Px9y12, Px11y12 } CellNode (10 @ 12) (20)Px10y13 { Px11y13, Px10y14, Px10y12, Px9y13 } CellNode (10 @ 13) (20)Px10y14 { Px9y14, Px11y14, Px10y15, Px10y13 } CellNode (10 @ 14) (20)Px10y15 { Px10y14, Px9y15, Px11y15, Px10y16 } CellNode (10 @ 15) (20)Px10y16 { Px10y15, Px9y16, Px11y16 } CellNode (10 @ 16) (20)Px10y2 { Px10y1, Px9y2, Px11y2, Px10y3 } CellNode (10 @ 2) (20)Px10y25 { Px9y25, Px10y26 } CellNode (10 @ 25) (20)Px10y26 { Px9y26, Px10y27, Px10y25 } CellNode (10 @ 26) (20)Px10y27 { Px10y26, Px9y27 } CellNode (10 @ 27) (20)Px10y3 { Px10y4, Px10y2, Px11y3, Px9y3 } CellNode (10 @ 3) (20)Px10y4 { Px10y3, Px10y5, Px9y4, Px11y4 } CellNode (10 @ 4) (20)Px10y5 { Px10y4, Px11y5, Px9y5, Px10y6 } CellNode (10 @ 5) (20)Px10y6 { Px11y6, Px9y6, Px10y5, Px10y7 } CellNode (10 @ 6) (20)Px10y7 { Px10y8, Px11y7, Px9y7, Px10y6 } CellNode (10 @ 7) (20)Px10y8 { Px10y7, Px9y8, Px10y9, Px11y8 } CellNode (10 @ 8) (20)Px10y9 { Px10y10, Px10y8, Px9y9, Px11y9 } CellNode (10 @ 9) (20)Px11y1 { Px10y1, Px11y2, Px12y1 } CellNode (11 @ 1) (20)Px11y10 { Px10y10, Px11y9, Px11y11, Px12y10 } CellNode (11 @ 10) (20)Px11y11 { Px12y11, Px11y10, Px10y11, Px11y12 } CellNode (11 @ 11) (20)Px11y12 { Px11y13, Px12y12, Px11y11, Px10y12 } CellNode (11 @ 12) (20)Px11y13 { Px10y13, Px11y14, Px12y13, Px11y12 } CellNode (11 @ 13) (20)Px11y14 { Px12y14, Px10y14, Px11y13, Px11y15 } CellNode (11 @ 14) (20)Px11y15 { Px11y16, Px12y15, Px11y14, Px10y15 } CellNode (11 @ 15) (20)Px11y16 { Px11y15, Px10y16, Px12y16 } CellNode (11 @ 16) (20)Px11y2 { Px12y2, Px10y2, Px11y3, Px11y1 } CellNode (11 @ 2) (20)Px11y3 { Px11y2, Px12y3, Px11y4, Px10y3 } CellNode (11 @ 3) (20)Px11y4 { Px10y4, Px11y5, Px11y3, Px12y4 } CellNode (11 @ 4) (20)Px11y5 { Px11y6, Px10y5, Px12y5, Px11y4 } CellNode (11 @ 5) (20)Px11y6 { Px12y6, Px11y5, Px10y6, Px11y7 } CellNode (11 @ 6) (20)Px11y7 { Px10y7, Px12y7, Px11y6, Px11y8 } CellNode (11 @ 7) (20)Px11y8 { Px10y8, Px11y9, Px11y7, Px12y8 } CellNode (11 @ 8) (20)Px11y9 { Px12y9, Px11y10, Px10y9, Px11y8 } CellNode (11 @ 9) (20)Px12y1 { Px13y1, Px11y1, Px12y2 } CellNode (12 @ 1) (20)Px12y10 { Px12y11, Px11y10, Px13y10, Px12y9 } CellNode (12 @ 10) (20)Px12y11 { Px12y12, Px13y11, Px11y11, Px12y10 } CellNode (12 @ 11) (20)Px12y12 { Px12y13, Px12y11, Px13y12, Px11y12 } CellNode (12 @ 12) (20)Px12y13 { Px13y13, Px12y14, Px11y13, Px12y12 } CellNode (12 @ 13) (20)Px12y14 { Px12y15, Px11y14, Px13y14, Px12y13 } CellNode (12 @ 14) (20)Px12y15 { Px12y14, Px13y15, Px11y15, Px12y16 } CellNode (12 @ 15) (20)Px12y16 { Px11y16, Px13y16, Px12y15 } CellNode (12 @ 16) (20)Px12y2 { Px12y3, Px11y2, Px13y2, Px12y1 } CellNode (12 @ 2) (20)Px12y22 { Px13y22, Px12y23 } CellNode (12 @ 22) (20)Px12y23 { Px13y23, Px12y22, Px12y24 } CellNode (12 @ 23) (20)Px12y24 { Px12y25, Px13y24, Px12y23 } CellNode (12 @ 24) (20)Px12y25 { Px12y24, Px13y25 } CellNode (12 @ 25) (20)Px12y3 { Px13y3, Px12y4, Px11y3, Px12y2 } CellNode (12 @ 3) (20)Px12y4 { Px13y4, Px12y3, Px12y5, Px11y4 } CellNode (12 @ 4) (20)Px12y5 { Px12y6, Px11y5, Px13y5, Px12y4 } CellNode (12 @ 5) (20)Px12y6 { Px11y6, Px12y7, Px12y5, Px13y6 } CellNode (12 @ 6) (20)Px12y7 { Px12y6, Px13y7, Px11y7, Px12y8 } CellNode (12 @ 7) (20)Px12y8 { Px12y9, Px12y7, Px13y8, Px11y8 } CellNode (12 @ 8) (20)Px12y9 { Px11y9, Px12y8, Px13y9, Px12y10 } CellNode (12 @ 9) (20)Px13y1 { Px13y2, Px14y1, Px12y1 } CellNode (13 @ 1) (20)Px13y10 { Px13y11, Px13y9, Px14y10, Px12y10 } CellNode (13 @ 10) (20)Px13y11 { Px14y11, Px12y11, Px13y10, Px13y12 } CellNode (13 @ 11) (20)Px13y12 { Px13y13, Px14y12, Px12y12, Px13y11 } CellNode (13 @ 12) (20)Px13y13 { Px13y14, Px14y13, Px13y12, Px12y13 } CellNode (13 @ 13) (20)Px13y14 { Px13y13, Px12y14, Px13y15, Px14y14 } CellNode (13 @ 14) (20)Px13y15 { Px14y15, Px12y15, Px13y14, Px13y16 } CellNode (13 @ 15) (20)Px13y16 { Px13y15, Px12y16 } CellNode (13 @ 16) (20)Px13y2 { Px12y2, Px13y1, Px14y2, Px13y3 } CellNode (13 @ 2) (20)Px13y21 { Px14y21, Px13y22 } CellNode (13 @ 21) (20)Px13y22 { Px12y22, Px13y21, Px14y22, Px13y23 } CellNode (13 @ 22) (20)Px13y23 { Px14y23, Px12y23, Px13y24, Px13y22 } CellNode (13 @ 23) (20)Px13y24 { Px13y25, Px12y24, Px14y24, Px13y23 } CellNode (13 @ 24) (20)Px13y25 { Px14y25, Px13y24, Px12y25 } CellNode (13 @ 25) (20)Px13y3 { Px12y3, Px13y4, Px13y2, Px14y3 } CellNode (13 @ 3) (20)Px13y4 { Px13y3, Px12y4, Px13y5, Px14y4 } CellNode (13 @ 4) (20)Px13y5 { Px13y4, Px14y5, Px12y5, Px13y6 } CellNode (13 @ 5) (20)Px13y6 { Px12y6, Px13y7, Px13y5, Px14y6 } CellNode (13 @ 6) (20)Px13y7 { Px12y7, Px13y8, Px14y7, Px13y6 } CellNode (13 @ 7) (20)Px13y8 { Px14y8, Px13y7, Px12y8, Px13y9 } CellNode (13 @ 8) (20)Px13y9 { Px13y10, Px14y9, Px13y8, Px12y9 } CellNode (13 @ 9) (20)Px14y1 { Px13y1, Px14y2, Px15y1 } CellNode (14 @ 1) (20)Px14y10 { Px14y11, Px15y10, Px14y9, Px13y10 } CellNode (14 @ 10) (20)Px14y11 { Px15y11, Px14y12, Px13y11, Px14y10 } CellNode (14 @ 11) (20)Px14y12 { Px14y11, Px15y12, Px13y12, Px14y13 } CellNode (14 @ 12) (20)Px14y13 { Px13y13, Px15y13, Px14y12, Px14y14 } CellNode (14 @ 13) (20)Px14y14 { Px14y15, Px13y14, Px15y14, Px14y13 } CellNode (14 @ 14) (20)Px14y15 { Px13y15, Px14y14, Px15y15 } CellNode (14 @ 15) (20)Px14y18 { Px15y18, Px14y19 } CellNode (14 @ 18) (20)Px14y19 { Px14y20, Px15y19, Px14y18 } CellNode (14 @ 19) (20)Px14y2 { Px15y2, Px14y1, Px13y2, Px14y3 } CellNode (14 @ 2) (20)Px14y20 { Px14y21, Px15y20, Px14y19 } CellNode (14 @ 20) (20)Px14y21 { Px15y21, Px14y20, Px13y21, Px14y22 } CellNode (14 @ 21) (20)Px14y22 { Px14y23, Px15y22, Px14y21, Px13y22 } CellNode (14 @ 22) (20)Px14y23 { Px14y24, Px15y23, Px13y23, Px14y22 } CellNode (14 @ 23) (20)Px14y24 { Px14y23, Px13y24, Px14y25, Px15y24 } CellNode (14 @ 24) (20)Px14y25 { Px13y25, Px15y25, Px14y24 } CellNode (14 @ 25) (20)Px14y3 { Px14y4, Px14y2, Px15y3, Px13y3 } CellNode (14 @ 3) (20)Px14y4 { Px13y4, Px14y5, Px14y3, Px15y4 } CellNode (14 @ 4) (20)Px14y5 { Px15y5, Px13y5, Px14y6, Px14y4 } CellNode (14 @ 5) (20)Px14y6 { Px15y6, Px14y5, Px14y7, Px13y6 } CellNode (14 @ 6) (20)Px14y7 { Px14y8, Px13y7, Px14y6, Px15y7 } CellNode (14 @ 7) (20)Px14y8 { Px13y8, Px14y9, Px14y7, Px15y8 } CellNode (14 @ 8) (20)Px14y9 { Px14y8, Px15y9, Px13y9, Px14y10 } CellNode (14 @ 9) (20)Px15y1 { Px14y1, Px15y2, Px16y1 } CellNode (15 @ 1) (20)Px15y10 { Px15y9, Px16y10, Px15y11, Px14y10 } CellNode (15 @ 10) (20)Px15y11 { Px14y11, Px15y10, Px16y11, Px15y12 } CellNode (15 @ 11) (20)Px15y12 { Px15y13, Px15y11, Px14y12, Px16y12 } CellNode (15 @ 12) (20)Px15y13 { Px16y13, Px15y14, Px15y12, Px14y13 } CellNode (15 @ 13) (20)Px15y14 { Px15y13, Px16y14, Px15y15, Px14y14 } CellNode (15 @ 14) (20)Px15y15 { Px14y15, Px15y14, Px15y16, Px16y15 } CellNode (15 @ 15) (20)Px15y16 { Px16y16, Px15y17, Px15y15 } CellNode (15 @ 16) (20)Px15y17 { Px15y18, Px16y17, Px15y16 } CellNode (15 @ 17) (20)Px15y18 { Px14y18, Px15y17, Px15y19, Px16y18 } CellNode (15 @ 18) (20)Px15y19 { Px15y18, Px14y19, Px15y20, Px16y19 } CellNode (15 @ 19) (20)Px15y2 { Px16y2, Px15y3, Px14y2, Px15y1 } CellNode (15 @ 2) (20)Px15y20 { Px15y21, Px14y20, Px16y20, Px15y19 } CellNode (15 @ 20) (20)Px15y21 { Px16y21, Px14y21, Px15y22, Px15y20 } CellNode (15 @ 21) (20)Px15y22 { Px15y21, Px16y22, Px15y23, Px14y22 } CellNode (15 @ 22) (20)Px15y23 { Px14y23, Px15y24, Px15y22, Px16y23 } CellNode (15 @ 23) (20)Px15y24 { Px16y24, Px15y25, Px14y24, Px15y23 } CellNode (15 @ 24) (20)Px15y25 { Px14y25, Px16y25, Px15y24 } CellNode (15 @ 25) (20)Px15y3 { Px15y2, Px16y3, Px15y4, Px14y3 } CellNode (15 @ 3) (20)Px15y4 { Px15y5, Px15y3, Px16y4, Px14y4 } CellNode (15 @ 4) (20)Px15y5 { Px14y5, Px15y6, Px16y5, Px15y4 } CellNode (15 @ 5) (20)Px15y6 { Px15y5, Px14y6, Px15y7, Px16y6 } CellNode (15 @ 6) (20)Px15y7 { Px16y7, Px15y6, Px14y7, Px15y8 } CellNode (15 @ 7) (20)Px15y8 { Px14y8, Px15y9, Px15y7, Px16y8 } CellNode (15 @ 8) (20)Px15y9 { Px15y10, Px14y9, Px15y8, Px16y9 } CellNode (15 @ 9) (20)Px16y1 { Px17y1, Px15y1, Px16y2 } CellNode (16 @ 1) (20)Px16y10 { Px15y10, Px16y11, Px16y9, Px17y10 } CellNode (16 @ 10) (20)Px16y11 { Px17y11, Px16y10, Px15y11, Px16y12 } CellNode (16 @ 11) (20)Px16y12 { Px16y13, Px17y12, Px15y12, Px16y11 } CellNode (16 @ 12) (20)Px16y13 { Px15y13, Px16y14, Px17y13, Px16y12 } CellNode (16 @ 13) (20)Px16y14 { Px17y14, Px16y13, Px15y14, Px16y15 } CellNode (16 @ 14) (20)Px16y15 { Px16y16, Px17y15, Px15y15, Px16y14 } CellNode (16 @ 15) (20)Px16y16 { Px16y17, Px17y16, Px15y16, Px16y15 } CellNode (16 @ 16) (20)Px16y17 { Px16y16, Px15y17, Px16y18, Px17y17 } CellNode (16 @ 17) (20)Px16y18 { Px17y18, Px15y18, Px16y17, Px16y19 } CellNode (16 @ 18) (20)Px16y19 { Px16y20, Px17y19, Px15y19, Px16y18 } CellNode (16 @ 19) (20)Px16y2 { Px15y2, Px16y3, Px17y2, Px16y1 } CellNode (16 @ 2) (20)Px16y20 { Px17y20, Px16y21, Px15y20, Px16y19 } CellNode (16 @ 20) (20)Px16y21 { Px15y21, Px16y20, Px17y21, Px16y22 } CellNode (16 @ 21) (20)Px16y22 { Px16y23, Px16y21, Px15y22, Px17y22 } CellNode (16 @ 22) (20)Px16y23 { Px17y23, Px16y24, Px16y22, Px15y23 } CellNode (16 @ 23) (20)Px16y24 { Px15y24, Px17y24, Px16y25, Px16y23 } CellNode (16 @ 24) (20)Px16y25 { Px17y25, Px16y24, Px15y25 } CellNode (16 @ 25) (20)Px16y3 { Px16y2, Px17y3, Px15y3, Px16y4 } CellNode (16 @ 3) (20)Px16y4 { Px16y3, Px17y4, Px16y5, Px15y4 } CellNode (16 @ 4) (20)Px16y5 { Px15y5, Px16y4, Px17y5, Px16y6 } CellNode (16 @ 5) (20)Px16y6 { Px15y6, Px16y7, Px16y5, Px17y6 } CellNode (16 @ 6) (20)Px16y7 { Px17y7, Px15y7, Px16y8, Px16y6 } CellNode (16 @ 7) (20)Px16y8 { Px16y7, Px17y8, Px15y8, Px16y9 } CellNode (16 @ 8) (20)Px16y9 { Px15y9, Px16y10, Px16y8, Px17y9 } CellNode (16 @ 9) (20)Px17y1 { Px17y2, Px18y1, Px16y1 } CellNode (17 @ 1) (20)Px17y10 { Px18y10, Px16y10, Px17y11, Px17y9 } CellNode (17 @ 10) (20)Px17y11 { Px17y12, Px16y11, Px18y11, Px17y10 } CellNode (17 @ 11) (20)Px17y12 { Px18y12, Px17y11, Px17y13, Px16y12 } CellNode (17 @ 12) (20)Px17y13 { Px17y14, Px16y13, Px18y13, Px17y12 } CellNode (17 @ 13) (20)Px17y14 { Px18y14, Px17y15, Px16y14, Px17y13 } CellNode (17 @ 14) (20)Px17y15 { Px17y14, Px18y15, Px16y15, Px17y16 } CellNode (17 @ 15) (20)Px17y16 { Px16y16, Px17y17, Px17y15, Px18y16 } CellNode (17 @ 16) (20)Px17y17 { Px18y17, Px16y17, Px17y18, Px17y16 } CellNode (17 @ 17) (20)Px17y18 { Px18y18, Px16y18, Px17y19, Px17y17 } CellNode (17 @ 18) (20)Px17y19 { Px17y18, Px17y20, Px18y19, Px16y19 } CellNode (17 @ 19) (20)Px17y2 { Px17y3, Px16y2, Px18y2, Px17y1 } CellNode (17 @ 2) (20)Px17y20 { Px16y20, Px17y19, Px17y21, Px18y20 } CellNode (17 @ 20) (20)Px17y21 { Px18y21, Px16y21, Px17y20, Px17y22 } CellNode (17 @ 21) (20)Px17y22 { Px17y23, Px18y22, Px16y22, Px17y21 } CellNode (17 @ 22) (20)Px17y23 { Px16y23, Px17y24, Px18y23, Px17y22 } CellNode (17 @ 23) (20)Px17y24 { Px18y24, Px17y23, Px16y24, Px17y25 } CellNode (17 @ 24) (20)Px17y25 { Px16y25, Px18y25, Px17y24 } CellNode (17 @ 25) (20)Px17y3 { Px16y3, Px17y4, Px17y2, Px18y3 } CellNode (17 @ 3) (20)Px17y4 { Px17y3, Px18y4, Px16y4, Px17y5 } CellNode (17 @ 4) (20)Px17y5 { Px17y4, Px18y5, Px16y5, Px17y6 } CellNode (17 @ 5) (20)Px17y6 { Px17y7, Px17y5, Px18y6, Px16y6 } CellNode (17 @ 6) (20)Px17y7 { Px17y6, Px16y7, Px17y8, Px18y7 } CellNode (17 @ 7) (20)Px17y8 { Px18y8, Px17y7, Px16y8, Px17y9 } CellNode (17 @ 8) (20)Px17y9 { Px18y9, Px17y8, Px16y9, Px17y10 } CellNode (17 @ 9) (20)Px18y1 { Px17y1, Px18y2, Px19y1 } CellNode (18 @ 1) (20)Px18y10 { Px18y9, Px18y11, Px19y10, Px17y10 } CellNode (18 @ 10) (20)Px18y11 { Px19y11, Px18y10, Px17y11, Px18y12 } CellNode (18 @ 11) (20)Px18y12 { Px18y13, Px19y12, Px17y12, Px18y11 } CellNode (18 @ 12) (20)Px18y13 { Px18y14, Px19y13, Px17y13, Px18y12 } CellNode (18 @ 13) (20)Px18y14 { Px17y14, Px18y13, Px18y15, Px19y14 } CellNode (18 @ 14) (20)Px18y15 { Px19y15, Px18y14, Px17y15, Px18y16 } CellNode (18 @ 15) (20)Px18y16 { Px18y17, Px19y16, Px18y15, Px17y16 } CellNode (18 @ 16) (20)Px18y17 { Px17y17, Px18y18, Px19y17, Px18y16 } CellNode (18 @ 17) (20)Px18y18 { Px19y18, Px18y17, Px17y18, Px18y19 } CellNode (18 @ 18) (20)Px18y19 { Px19y19, Px18y18, Px17y19, Px18y20 } CellNode (18 @ 19) (20)Px18y2 { Px19y2, Px18y1, Px18y3, Px17y2 } CellNode (18 @ 2) (20)Px18y20 { Px18y21, Px17y20, Px19y20, Px18y19 } CellNode (18 @ 20) (20)Px18y21 { Px19y21, Px18y22, Px17y21, Px18y20 } CellNode (18 @ 21) (20)Px18y22 { Px18y23, Px18y21, Px19y22, Px17y22 } CellNode (18 @ 22) (20)Px18y23 { Px19y23, Px17y23, Px18y24, Px18y22 } CellNode (18 @ 23) (20)Px18y24 { Px19y24, Px17y24, Px18y25, Px18y23 } CellNode (18 @ 24) (20)Px18y25 { Px17y25, Px19y25, Px18y24 } CellNode (18 @ 25) (20)Px18y3 { Px17y3, Px18y4, Px19y3, Px18y2 } CellNode (18 @ 3) (20)Px18y4 { Px18y5, Px17y4, Px18y3, Px19y4 } CellNode (18 @ 4) (20)Px18y5 { Px19y5, Px18y4, Px17y5, Px18y6 } CellNode (18 @ 5) (20)Px18y6 { Px17y6, Px19y6, Px18y5, Px18y7 } CellNode (18 @ 6) (20)Px18y7 { Px18y8, Px17y7, Px18y6, Px19y7 } CellNode (18 @ 7) (20)Px18y8 { Px19y8, Px18y9, Px17y8, Px18y7 } CellNode (18 @ 8) (20)Px18y9 { Px18y8, Px19y9, Px18y10, Px17y9 } CellNode (18 @ 9) (20)Px19y1 { Px18y1, Px19y2, Px20y1 } CellNode (19 @ 1) (20)Px19y10 { Px20y10, Px19y11, Px19y9, Px18y10 } CellNode (19 @ 10) (20)Px19y11 { Px19y12, Px20y11, Px18y11, Px19y10 } CellNode (19 @ 11) (20)Px19y12 { Px19y11, Px20y12, Px18y12, Px19y13 } CellNode (19 @ 12) (20)Px19y13 { Px18y13, Px19y14, Px19y12, Px20y13 } CellNode (19 @ 13) (20)Px19y14 { Px20y14, Px18y14, Px19y15, Px19y13 } CellNode (19 @ 14) (20)Px19y15 { Px19y16, Px18y15, Px20y15, Px19y14 } CellNode (19 @ 15) (20)Px19y16 { Px18y16, Px19y15, Px20y16, Px19y17 } CellNode (19 @ 16) (20)Px19y17 { Px20y17, Px18y17, Px19y18, Px19y16 } CellNode (19 @ 17) (20)Px19y18 { Px20y18, Px18y18, Px19y19, Px19y17 } CellNode (19 @ 18) (20)Px19y19 { Px19y18, Px19y20, Px20y19, Px18y19 } CellNode (19 @ 19) (20)Px19y2 { Px20y2, Px19y3, Px18y2, Px19y1 } CellNode (19 @ 2) (20)Px19y20 { Px19y19, Px19y21, Px20y20, Px18y20 } CellNode (19 @ 20) (20)Px19y21 { Px20y21, Px18y21, Px19y20, Px19y22 } CellNode (19 @ 21) (20)Px19y22 { Px19y23, Px20y22, Px19y21, Px18y22 } CellNode (19 @ 22) (20)Px19y23 { Px19y24, Px20y23, Px19y22, Px18y23 } CellNode (19 @ 23) (20)Px19y24 { Px19y23, Px18y24, Px19y25, Px20y24 } CellNode (19 @ 24) (20)Px19y25 { Px19y24, Px18y25, Px20y25 } CellNode (19 @ 25) (20)Px19y3 { Px19y2, Px20y3, Px18y3, Px19y4 } CellNode (19 @ 3) (20)Px19y4 { Px18y4, Px19y5, Px19y3, Px20y4 } CellNode (19 @ 4) (20)Px19y5 { Px18y5, Px19y6, Px19y4, Px20y5 } CellNode (19 @ 5) (20)Px19y6 { Px19y5, Px20y6, Px18y6, Px19y7 } CellNode (19 @ 6) (20)Px19y7 { Px18y7, Px19y6, Px20y7, Px19y8 } CellNode (19 @ 7) (20)Px19y8 { Px18y8, Px19y9, Px19y7, Px20y8 } CellNode (19 @ 8) (20)Px19y9 { Px20y9, Px18y9, Px19y10, Px19y8 } CellNode (19 @ 9) (20)Px1y1 { Px1y2, Px2y1 } CellNode (1 @ 1) (20)Px1y10 { Px1y11, Px1y9, Px2y10 } CellNode (1 @ 10) (20)Px1y11 { Px1y12, Px2y11, Px1y10 } CellNode (1 @ 11) (20)Px1y12 { Px1y13, Px2y12, Px1y11 } CellNode (1 @ 12) (20)Px1y13 { Px1y14, Px2y13, Px1y12 } CellNode (1 @ 13) (20)Px1y14 { Px2y14, Px1y13, Px1y15 } CellNode (1 @ 14) (20)Px1y15 { Px1y14, Px2y15, Px1y16 } CellNode (1 @ 15) (20)Px1y16 { Px1y15, Px2y16, Px1y17 } CellNode (1 @ 16) (20)Px1y17 { Px1y18, Px2y17, Px1y16 } CellNode (1 @ 17) (20)Px1y18 { Px1y19, Px2y18, Px1y17 } CellNode (1 @ 18) (20)Px1y19 { Px1y20, Px2y19, Px1y18 } CellNode (1 @ 19) (20)Px1y2 { Px1y3, Px1y1, Px2y2 } CellNode (1 @ 2) (20)Px1y20 { Px2y20, Px1y19, Px1y21 } CellNode (1 @ 20) (20)Px1y21 { Px1y20, Px2y21, Px1y22 } CellNode (1 @ 21) (20)Px1y22 { Px1y23, Px2y22, Px1y21 } CellNode (1 @ 22) (20)Px1y23 { Px1y22, Px1y24, Px2y23 } CellNode (1 @ 23) (20)Px1y24 { Px1y23, Px2y24, Px1y25 } CellNode (1 @ 24) (20)Px1y25 { Px2y25, Px1y24, Px1y26 } CellNode (1 @ 25) (20)Px1y26 { Px1y25, Px1y27, Px2y26 } CellNode (1 @ 26) (20)Px1y27 { Px2y27, Px1y26 } CellNode (1 @ 27) (20)Px1y3 { Px1y4, Px1y2, Px2y3 } CellNode (1 @ 3) (20)Px1y4 { Px1y5, Px1y3, Px2y4 } CellNode (1 @ 4) (20)Px1y5 { Px1y4, Px1y6, Px2y5 } CellNode (1 @ 5) (20)Px1y6 { Px2y6, Px1y7, Px1y5 } CellNode (1 @ 6) (20)Px1y7 { Px1y8, Px1y6, Px2y7 } CellNode (1 @ 7) (20)Px1y8 { Px1y7, Px1y9, Px2y8 } CellNode (1 @ 8) (20)Px1y9 { Px2y9, Px1y8, Px1y10 } CellNode (1 @ 9) (20)Px20y1 { Px19y1, Px20y2, Px21y1 } CellNode (20 @ 1) (20)Px20y10 { Px20y9, Px20y11, Px21y10, Px19y10 } CellNode (20 @ 10) (20)Px20y11 { Px19y11, Px20y10, Px20y12, Px21y11 } CellNode (20 @ 11) (20)Px20y12 { Px21y12, Px19y12, Px20y11, Px20y13 } CellNode (20 @ 12) (20)Px20y13 { Px20y14, Px21y13, Px20y12, Px19y13 } CellNode (20 @ 13) (20)Px20y14 { Px19y14, Px20y15, Px21y14, Px20y13 } CellNode (20 @ 14) (20)Px20y15 { Px21y15, Px19y15, Px20y14, Px20y16 } CellNode (20 @ 15) (20)Px20y16 { Px20y17, Px21y16, Px19y16, Px20y15 } CellNode (20 @ 16) (20)Px20y17 { Px20y18, Px21y17, Px19y17, Px20y16 } CellNode (20 @ 17) (20)Px20y18 { Px20y17, Px19y18, Px20y19, Px21y18 } CellNode (20 @ 18) (20)Px20y19 { Px21y19, Px20y18, Px19y19, Px20y20 } CellNode (20 @ 19) (20)Px20y2 { Px19y2, Px20y3, Px21y2, Px20y1 } CellNode (20 @ 2) (20)Px20y20 { Px21y20, Px19y20, Px20y21, Px20y19 } CellNode (20 @ 20) (20)Px20y21 { Px21y21, Px19y21, Px20y22, Px20y20 } CellNode (20 @ 21) (20)Px20y22 { Px20y21, Px21y22, Px19y22, Px20y23 } CellNode (20 @ 22) (20)Px20y23 { Px19y23, Px21y23, Px20y22, Px20y24 } CellNode (20 @ 23) (20)Px20y24 { Px20y25, Px19y24, Px21y24, Px20y23 } CellNode (20 @ 24) (20)Px20y25 { Px21y25, Px19y25, Px20y24 } CellNode (20 @ 25) (20)Px20y3 { Px20y2, Px21y3, Px19y3, Px20y4 } CellNode (20 @ 3) (20)Px20y4 { Px20y3, Px21y4, Px19y4, Px20y5 } CellNode (20 @ 4) (20)Px20y5 { Px19y5, Px20y6, Px20y4, Px21y5 } CellNode (20 @ 5) (20)Px20y6 { Px21y6, Px19y6, Px20y7, Px20y5 } CellNode (20 @ 6) (20)Px20y7 { Px20y6, Px21y7, Px19y7, Px20y8 } CellNode (20 @ 7) (20)Px20y8 { Px20y9, Px21y8, Px20y7, Px19y8 } CellNode (20 @ 8) (20)Px20y9 { Px20y10, Px19y9, Px21y9, Px20y8 } CellNode (20 @ 9) (20)Px21y1 { Px22y1, Px20y1, Px21y2 } CellNode (21 @ 1) (20)Px21y10 { Px20y10, Px22y10, Px21y9, Px21y11 } CellNode (21 @ 10) (20)Px21y11 { Px22y11, Px20y11, Px21y12, Px21y10 } CellNode (21 @ 11) (20)Px21y12 { Px22y12, Px20y12, Px21y13, Px21y11 } CellNode (21 @ 12) (20)Px21y13 { Px22y13, Px21y12, Px21y14, Px20y13 } CellNode (21 @ 13) (20)Px21y14 { Px22y14, Px20y14, Px21y15, Px21y13 } CellNode (21 @ 14) (20)Px21y15 { Px22y15, Px20y15, Px21y16, Px21y14 } CellNode (21 @ 15) (20)Px21y16 { Px21y15, Px22y16, Px20y16, Px21y17 } CellNode (21 @ 16) (20)Px21y17 { Px20y17, Px22y17, Px21y16, Px21y18 } CellNode (21 @ 17) (20)Px21y18 { Px22y18, Px20y18, Px21y19, Px21y17 } CellNode (21 @ 18) (20)Px21y19 { Px21y20, Px22y19, Px20y19, Px21y18 } CellNode (21 @ 19) (20)Px21y2 { Px20y2, Px21y3, Px22y2, Px21y1 } CellNode (21 @ 2) (20)Px21y20 { Px21y19, Px21y21, Px22y20, Px20y20 } CellNode (21 @ 20) (20)Px21y21 { Px21y20, Px20y21, Px21y22, Px22y21 } CellNode (21 @ 21) (20)Px21y22 { Px22y22, Px21y21, Px20y22, Px21y23 } CellNode (21 @ 22) (20)Px21y23 { Px21y24, Px22y23, Px21y22, Px20y23 } CellNode (21 @ 23) (20)Px21y24 { Px21y23, Px21y25, Px22y24, Px20y24 } CellNode (21 @ 24) (20)Px21y25 { Px22y25, Px21y24, Px20y25 } CellNode (21 @ 25) (20)Px21y3 { Px20y3, Px21y4, Px22y3, Px21y2 } CellNode (21 @ 3) (20)Px21y4 { Px21y3, Px22y4, Px20y4, Px21y5 } CellNode (21 @ 4) (20)Px21y5 { Px20y5, Px21y4, Px22y5, Px21y6 } CellNode (21 @ 5) (20)Px21y6 { Px20y6, Px21y7, Px22y6, Px21y5 } CellNode (21 @ 6) (20)Px21y7 { Px21y6, Px21y8, Px20y7, Px22y7 } CellNode (21 @ 7) (20)Px21y8 { Px22y8, Px21y7, Px21y9, Px20y8 } CellNode (21 @ 8) (20)Px21y9 { Px20y9, Px21y8, Px22y9, Px21y10 } CellNode (21 @ 9) (20)Px22y1 { Px22y2, Px23y1, Px21y1 } CellNode (22 @ 1) (20)Px22y10 { Px22y11, Px23y10, Px22y9, Px21y10 } CellNode (22 @ 10) (20)Px22y11 { Px22y10, Px22y12, Px23y11, Px21y11 } CellNode (22 @ 11) (20)Px22y12 { Px22y11, Px21y12, Px23y12, Px22y13 } CellNode (22 @ 12) (20)Px22y13 { Px22y14, Px23y13, Px22y12, Px21y13 } CellNode (22 @ 13) (20)Px22y14 { Px22y15, Px23y14, Px21y14, Px22y13 } CellNode (22 @ 14) (20)Px22y15 { Px22y14, Px21y15, Px22y16, Px23y15 } CellNode (22 @ 15) (20)Px22y16 { Px23y16, Px22y15, Px21y16, Px22y17 } CellNode (22 @ 16) (20)Px22y17 { Px23y17, Px22y18, Px22y16, Px21y17 } CellNode (22 @ 17) (20)Px22y18 { Px22y17, Px23y18, Px22y19, Px21y18 } CellNode (22 @ 18) (20)Px22y19 { Px22y18, Px21y19, Px22y20, Px23y19 } CellNode (22 @ 19) (20)Px22y2 { Px23y2, Px22y1, Px22y3, Px21y2 } CellNode (22 @ 2) (20)Px22y20 { Px21y20, Px22y21, Px22y19, Px23y20 } CellNode (22 @ 20) (20)Px22y21 { Px23y21, Px21y21, Px22y22, Px22y20 } CellNode (22 @ 21) (20)Px22y22 { Px23y22, Px22y23, Px21y22, Px22y21 } CellNode (22 @ 22) (20)Px22y23 { Px22y24, Px22y22, Px23y23, Px21y23 } CellNode (22 @ 23) (20)Px22y24 { Px22y25, Px23y24, Px21y24, Px22y23 } CellNode (22 @ 24) (20)Px22y25 { Px23y25, Px22y24, Px21y25 } CellNode (22 @ 25) (20)Px22y3 { Px21y3, Px22y4, Px22y2, Px23y3 } CellNode (22 @ 3) (20)Px22y4 { Px21y4, Px22y5, Px22y3, Px23y4 } CellNode (22 @ 4) (20)Px22y5 { Px23y5, Px22y4, Px21y5, Px22y6 } CellNode (22 @ 5) (20)Px22y6 { Px22y7, Px22y5, Px23y6, Px21y6 } CellNode (22 @ 6) (20)Px22y7 { Px22y8, Px21y7, Px22y6, Px23y7 } CellNode (22 @ 7) (20)Px22y8 { Px22y7, Px21y8, Px22y9, Px23y8 } CellNode (22 @ 8) (20)Px22y9 { Px22y8, Px23y9, Px21y9, Px22y10 } CellNode (22 @ 9) (20)Px23y1 { Px22y1, Px23y2, Px24y1 } CellNode (23 @ 1) (20)Px23y10 { Px22y10, Px23y9, Px24y10, Px23y11 } CellNode (23 @ 10) (20)Px23y11 { Px24y11, Px22y11, Px23y10, Px23y12 } CellNode (23 @ 11) (20)Px23y12 { Px23y13, Px24y12, Px22y12, Px23y11 } CellNode (23 @ 12) (20)Px23y13 { Px23y14, Px24y13, Px23y12, Px22y13 } CellNode (23 @ 13) (20)Px23y14 { Px22y14, Px23y13, Px23y15, Px24y14 } CellNode (23 @ 14) (20)Px23y15 { Px24y15, Px22y15, Px23y14, Px23y16 } CellNode (23 @ 15) (20)Px23y16 { Px23y17, Px24y16, Px22y16, Px23y15 } CellNode (23 @ 16) (20)Px23y17 { Px23y16, Px23y18, Px24y17, Px22y17 } CellNode (23 @ 17) (20)Px23y18 { Px24y18, Px22y18, Px23y17, Px23y19 } CellNode (23 @ 18) (20)Px23y19 { Px24y19, Px23y18, Px22y19, Px23y20 } CellNode (23 @ 19) (20)Px23y2 { Px23y1, Px22y2, Px23y3, Px24y2 } CellNode (23 @ 2) (20)Px23y20 { Px24y20, Px23y21, Px22y20, Px23y19 } CellNode (23 @ 20) (20)Px23y21 { Px22y21, Px23y22, Px24y21, Px23y20 } CellNode (23 @ 21) (20)Px23y22 { Px22y22, Px23y21, Px23y23, Px24y22 } CellNode (23 @ 22) (20)Px23y23 { Px24y23, Px23y24, Px23y22, Px22y23 } CellNode (23 @ 23) (20)Px23y24 { Px24y24, Px23y25, Px23y23, Px22y24 } CellNode (23 @ 24) (20)Px23y25 { Px22y25, Px24y25, Px23y24 } CellNode (23 @ 25) (20)Px23y3 { Px24y3, Px23y2, Px22y3, Px23y4 } CellNode (23 @ 3) (20)Px23y4 { Px23y5, Px22y4, Px23y3, Px24y4 } CellNode (23 @ 4) (20)Px23y5 { Px23y6, Px22y5, Px23y4, Px24y5 } CellNode (23 @ 5) (20)Px23y6 { Px23y5, Px24y6, Px22y6, Px23y7 } CellNode (23 @ 6) (20)Px23y7 { Px22y7, Px23y6, Px24y7, Px23y8 } CellNode (23 @ 7) (20)Px23y8 { Px22y8, Px23y9, Px24y8, Px23y7 } CellNode (23 @ 8) (20)Px23y9 { Px24y9, Px23y10, Px22y9, Px23y8 } CellNode (23 @ 9) (20)Px24y1 { Px23y1, Px24y2, Px25y1 } CellNode (24 @ 1) (20)Px24y10 { Px24y11, Px25y10, Px23y10, Px24y9 } CellNode (24 @ 10) (20)Px24y11 { Px24y12, Px25y11, Px23y11, Px24y10 } CellNode (24 @ 11) (20)Px24y12 { Px24y11, Px24y13, Px23y12, Px25y12 } CellNode (24 @ 12) (20)Px24y13 { Px24y14, Px23y13, Px24y12, Px25y13 } CellNode (24 @ 13) (20)Px24y14 { Px25y14, Px23y14, Px24y15, Px24y13 } CellNode (24 @ 14) (20)Px24y15 { Px24y16, Px23y15, Px25y15, Px24y14 } CellNode (24 @ 15) (20)Px24y16 { Px23y16, Px24y15, Px24y17, Px25y16 } CellNode (24 @ 16) (20)Px24y17 { Px25y17, Px23y17, Px24y18, Px24y16 } CellNode (24 @ 17) (20)Px24y18 { Px24y19, Px23y18, Px25y18, Px24y17 } CellNode (24 @ 18) (20)Px24y19 { Px24y18, Px24y20, Px25y19, Px23y19 } CellNode (24 @ 19) (20)Px24y2 { Px23y2, Px24y3, Px24y1, Px25y2 } CellNode (24 @ 2) (20)Px24y20 { Px24y19, Px24y21, Px25y20, Px23y20 } CellNode (24 @ 20) (20)Px24y21 { Px25y21, Px24y20, Px23y21, Px24y22 } CellNode (24 @ 21) (20)Px24y22 { Px24y23, Px25y22, Px23y22, Px24y21 } CellNode (24 @ 22) (20)Px24y23 { Px24y24, Px25y23, Px23y23, Px24y22 } CellNode (24 @ 23) (20)Px24y24 { Px24y23, Px23y24, Px24y25, Px25y24 } CellNode (24 @ 24) (20)Px24y25 { Px24y24, Px25y25, Px23y25 } CellNode (24 @ 25) (20)Px24y3 { Px24y2, Px23y3, Px24y4, Px25y3 } CellNode (24 @ 3) (20)Px24y4 { Px24y3, Px25y4, Px23y4, Px24y5 } CellNode (24 @ 4) (20)Px24y5 { Px23y5, Px24y6, Px25y5, Px24y4 } CellNode (24 @ 5) (20)Px24y6 { Px23y6, Px24y7, Px24y5, Px25y6 } CellNode (24 @ 6) (20)Px24y7 { Px25y7, Px24y6, Px23y7, Px24y8 } CellNode (24 @ 7) (20)Px24y8 { Px23y8, Px25y8, Px24y7, Px24y9 } CellNode (24 @ 8) (20)Px24y9 { Px23y9, Px25y9, Px24y10, Px24y8 } CellNode (24 @ 9) (20)Px25y1 { Px24y1, Px25y2, Px26y1 } CellNode (25 @ 1) (20)Px25y10 { Px25y11, Px25y9, Px24y10, Px26y10 } CellNode (25 @ 10) (20)Px25y11 { Px24y11, Px25y10, Px25y12, Px26y11 } CellNode (25 @ 11) (20)Px25y12 { Px26y12, Px24y12, Px25y11, Px25y13 } CellNode (25 @ 12) (20)Px25y13 { Px25y14, Px26y13, Px24y13, Px25y12 } CellNode (25 @ 13) (20)Px25y14 { Px24y14, Px25y15, Px26y14, Px25y13 } CellNode (25 @ 14) (20)Px25y15 { Px26y15, Px25y14, Px24y15, Px25y16 } CellNode (25 @ 15) (20)Px25y16 { Px25y17, Px26y16, Px24y16, Px25y15 } CellNode (25 @ 16) (20)Px25y17 { Px25y18, Px26y17, Px25y16, Px24y17 } CellNode (25 @ 17) (20)Px25y18 { Px25y17, Px24y18, Px25y19, Px26y18 } CellNode (25 @ 18) (20)Px25y19 { Px26y19, Px24y19, Px25y18, Px25y20 } CellNode (25 @ 19) (20)Px25y2 { Px25y3, Px25y1, Px26y2, Px24y2 } CellNode (25 @ 2) (20)Px25y20 { Px26y20, Px24y20, Px25y21, Px25y19 } CellNode (25 @ 20) (20)Px25y21 { Px26y21, Px25y22, Px24y21, Px25y20 } CellNode (25 @ 21) (20)Px25y22 { Px25y21, Px25y23, Px24y22, Px26y22 } CellNode (25 @ 22) (20)Px25y23 { Px24y23, Px25y22, Px25y24 } CellNode (25 @ 23) (20)Px25y24 { Px24y24, Px25y23, Px25y25 } CellNode (25 @ 24) (20)Px25y25 { Px24y25, Px26y25, Px25y24 } CellNode (25 @ 25) (20)Px25y3 { Px24y3, Px25y4, Px26y3, Px25y2 } CellNode (25 @ 3) (20)Px25y4 { Px25y3, Px24y4, Px25y5, Px26y4 } CellNode (25 @ 4) (20)Px25y5 { Px26y5, Px25y4, Px24y5, Px25y6 } CellNode (25 @ 5) (20)Px25y6 { Px25y7, Px24y6, Px25y5, Px26y6 } CellNode (25 @ 6) (20)Px25y7 { Px24y7, Px25y8, Px26y7, Px25y6 } CellNode (25 @ 7) (20)Px25y8 { Px26y8, Px25y7, Px25y9, Px24y8 } CellNode (25 @ 8) (20)Px25y9 { Px25y10, Px25y8, Px26y9, Px24y9 } CellNode (25 @ 9) (20)Px26y1 { Px27y1, Px25y1, Px26y2 } CellNode (26 @ 1) (20)Px26y10 { Px26y11, Px25y10, Px26y9, Px27y10 } CellNode (26 @ 10) (20)Px26y11 { Px27y11, Px25y11, Px26y12, Px26y10 } CellNode (26 @ 11) (20)Px26y12 { Px27y12, Px26y13, Px25y12, Px26y11 } CellNode (26 @ 12) (20)Px26y13 { Px27y13, Px26y12, Px26y14, Px25y13 } CellNode (26 @ 13) (20)Px26y14 { Px26y15, Px25y14, Px27y14, Px26y13 } CellNode (26 @ 14) (20)Px26y15 { Px26y16, Px27y15, Px25y15, Px26y14 } CellNode (26 @ 15) (20)Px26y16 { Px26y15, Px26y17, Px25y16, Px27y16 } CellNode (26 @ 16) (20)Px26y17 { Px25y17, Px26y18, Px26y16, Px27y17 } CellNode (26 @ 17) (20)Px26y18 { Px26y19, Px27y18, Px25y18, Px26y17 } CellNode (26 @ 18) (20)Px26y19 { Px26y20, Px27y19, Px25y19, Px26y18 } CellNode (26 @ 19) (20)Px26y2 { Px27y2, Px26y1, Px26y3, Px25y2 } CellNode (26 @ 2) (20)Px26y20 { Px26y19, Px26y21, Px27y20, Px25y20 } CellNode (26 @ 20) (20)Px26y21 { Px26y20, Px25y21, Px26y22, Px27y21 } CellNode (26 @ 21) (20)Px26y22 { Px25y22, Px27y22, Px26y21 } CellNode (26 @ 22) (20)Px26y25 { Px26y26, Px27y25, Px25y25 } CellNode (26 @ 25) (20)Px26y26 { Px26y27, Px27y26, Px26y25 } CellNode (26 @ 26) (20)Px26y27 { Px26y26, Px27y27 } CellNode (26 @ 27) (20)Px26y3 { Px25y3, Px26y2, Px27y3, Px26y4 } CellNode (26 @ 3) (20)Px26y4 { Px26y5, Px25y4, Px27y4, Px26y3 } CellNode (26 @ 4) (20)Px26y5 { Px26y4, Px25y5, Px26y6, Px27y5 } CellNode (26 @ 5) (20)Px26y6 { Px26y5, Px27y6, Px25y6, Px26y7 } CellNode (26 @ 6) (20)Px26y7 { Px25y7, Px26y8, Px27y7, Px26y6 } CellNode (26 @ 7) (20)Px26y8 { Px25y8, Px26y9, Px27y8, Px26y7 } CellNode (26 @ 8) (20)Px26y9 { Px27y9, Px26y8, Px25y9, Px26y10 } CellNode (26 @ 9) (20)Px27y1 { Px27y2, Px28y1, Px26y1 } CellNode (27 @ 1) (20)Px27y10 { Px27y9, Px27y11, Px28y10, Px26y10 } CellNode (27 @ 10) (20)Px27y11 { Px26y11, Px27y12, Px28y11, Px27y10 } CellNode (27 @ 11) (20)Px27y12 { Px28y12, Px27y11, Px26y12, Px27y13 } CellNode (27 @ 12) (20)Px27y13 { Px27y14, Px28y13, Px27y12, Px26y13 } CellNode (27 @ 13) (20)Px27y14 { Px27y15, Px28y14, Px26y14, Px27y13 } CellNode (27 @ 14) (20)Px27y15 { Px26y15, Px27y14, Px27y16, Px28y15 } CellNode (27 @ 15) (20)Px27y16 { Px28y16, Px26y16, Px27y15, Px27y17 } CellNode (27 @ 16) (20)Px27y17 { Px27y18, Px28y17, Px26y17, Px27y16 } CellNode (27 @ 17) (20)Px27y18 { Px26y18, Px27y19, Px28y18, Px27y17 } CellNode (27 @ 18) (20)Px27y19 { Px26y19, Px27y18, Px27y20, Px28y19 } CellNode (27 @ 19) (20)Px27y2 { Px26y2, Px27y3, Px28y2, Px27y1 } CellNode (27 @ 2) (20)Px27y20 { Px26y20, Px28y20, Px27y19, Px27y21 } CellNode (27 @ 20) (20)Px27y21 { Px27y22, Px26y21, Px28y21, Px27y20 } CellNode (27 @ 21) (20)Px27y22 { Px28y22, Px26y22, Px27y23, Px27y21 } CellNode (27 @ 22) (20)Px27y23 { Px28y23, Px27y24, Px27y22 } CellNode (27 @ 23) (20)Px27y24 { Px27y25, Px28y24, Px27y23 } CellNode (27 @ 24) (20)Px27y25 { Px27y26, Px26y25, Px28y25, Px27y24 } CellNode (27 @ 25) (20)Px27y26 { Px27y25, Px28y26, Px26y26, Px27y27 } CellNode (27 @ 26) (20)Px27y27 { Px26y27, Px27y26, Px28y27 } CellNode (27 @ 27) (20)Px27y3 { Px27y2, Px28y3, Px27y4, Px26y3 } CellNode (27 @ 3) (20)Px27y4 { Px27y5, Px27y3, Px28y4, Px26y4 } CellNode (27 @ 4) (20)Px27y5 { Px26y5, Px27y6, Px27y4, Px28y5 } CellNode (27 @ 5) (20)Px27y6 { Px28y6, Px27y7, Px26y6, Px27y5 } CellNode (27 @ 6) (20)Px27y7 { Px28y7, Px27y6, Px26y7, Px27y8 } CellNode (27 @ 7) (20)Px27y8 { Px27y9, Px26y8, Px27y7, Px28y8 } CellNode (27 @ 8) (20)Px27y9 { Px27y8, Px26y9, Px28y9, Px27y10 } CellNode (27 @ 9) (20)Px28y1 { Px27y1, Px28y2, Px29y1 } CellNode (28 @ 1) (20)Px28y10 { Px29y10, Px28y11, Px28y9, Px27y10 } CellNode (28 @ 10) (20)Px28y11 { Px29y11, Px27y11, Px28y12, Px28y10 } CellNode (28 @ 11) (20)Px28y12 { Px28y13, Px27y12, Px29y12, Px28y11 } CellNode (28 @ 12) (20)Px28y13 { Px28y12, Px29y13, Px28y14, Px27y13 } CellNode (28 @ 13) (20)Px28y14 { Px27y14, Px28y15, Px28y13, Px29y14 } CellNode (28 @ 14) (20)Px28y15 { Px28y16, Px27y15, Px29y15, Px28y14 } CellNode (28 @ 15) (20)Px28y16 { Px29y16, Px27y16, Px28y17, Px28y15 } CellNode (28 @ 16) (20)Px28y17 { Px28y16, Px28y18, Px29y17, Px27y17 } CellNode (28 @ 17) (20)Px28y18 { Px29y18, Px27y18, Px28y17, Px28y19 } CellNode (28 @ 18) (20)Px28y19 { Px29y19, Px27y19, Px28y18, Px28y20 } CellNode (28 @ 19) (20)Px28y2 { Px27y2, Px28y3, Px28y1, Px29y2 } CellNode (28 @ 2) (20)Px28y20 { Px28y21, Px29y20, Px27y20, Px28y19 } CellNode (28 @ 20) (20)Px28y21 { Px28y20, Px28y22, Px29y21, Px27y21 } CellNode (28 @ 21) (20)Px28y22 { Px28y21, Px27y22, Px28y23, Px29y22 } CellNode (28 @ 22) (20)Px28y23 { Px28y24, Px29y23, Px28y22, Px27y23 } CellNode (28 @ 23) (20)Px28y24 { Px28y25, Px29y24, Px28y23, Px27y24 } CellNode (28 @ 24) (20)Px28y25 { Px28y24, Px27y25, Px28y26, Px29y25 } CellNode (28 @ 25) (20)Px28y26 { Px28y27, Px27y26, Px28y25, Px29y26 } CellNode (28 @ 26) (20)Px28y27 { Px29y27, Px28y26, Px27y27 } CellNode (28 @ 27) (20)Px28y3 { Px27y3, Px28y4, Px28y2, Px29y3 } CellNode (28 @ 3) (20)Px28y4 { Px28y3, Px29y4, Px27y4, Px28y5 } CellNode (28 @ 4) (20)Px28y5 { Px28y6, Px28y4, Px29y5, Px27y5 } CellNode (28 @ 5) (20)Px28y6 { Px28y7, Px27y6, Px29y6, Px28y5 } CellNode (28 @ 6) (20)Px28y7 { Px28y6, Px28y8, Px27y7, Px29y7 } CellNode (28 @ 7) (20)Px28y8 { Px29y8, Px28y7, Px28y9, Px27y8 } CellNode (28 @ 8) (20)Px28y9 { Px27y9, Px29y9, Px28y10, Px28y8 } CellNode (28 @ 9) (20)Px29y1 { Px28y1, Px29y2, Px30y1 } CellNode (29 @ 1) (20)Px29y10 { Px29y11, Px30y10, Px29y9, Px28y10 } CellNode (29 @ 10) (20)Px29y11 { Px29y12, Px30y11, Px28y11, Px29y10 } CellNode (29 @ 11) (20)Px29y12 { Px29y11, Px28y12, Px29y13, Px30y12 } CellNode (29 @ 12) (20)Px29y13 { Px30y13, Px28y13, Px29y12, Px29y14 } CellNode (29 @ 13) (20)Px29y14 { Px29y15, Px30y14, Px29y13, Px28y14 } CellNode (29 @ 14) (20)Px29y15 { Px28y15, Px29y16, Px30y15, Px29y14 } CellNode (29 @ 15) (20)Px29y16 { Px30y16, Px29y15, Px28y16, Px29y17 } CellNode (29 @ 16) (20)Px29y17 { Px29y18, Px30y17, Px29y16, Px28y17 } CellNode (29 @ 17) (20)Px29y18 { Px29y19, Px28y18, Px30y18, Px29y17 } CellNode (29 @ 18) (20)Px29y19 { Px29y18, Px29y20, Px28y19, Px30y19 } CellNode (29 @ 19) (20)Px29y2 { Px29y1, Px30y2, Px28y2, Px29y3 } CellNode (29 @ 2) (20)Px29y20 { Px29y19, Px29y21, Px30y20, Px28y20 } CellNode (29 @ 20) (20)Px29y21 { Px30y21, Px28y21, Px29y20, Px29y22 } CellNode (29 @ 21) (20)Px29y22 { Px29y23, Px30y22, Px28y22, Px29y21 } CellNode (29 @ 22) (20)Px29y23 { Px29y24, Px30y23, Px28y23, Px29y22 } CellNode (29 @ 23) (20)Px29y24 { Px28y24, Px29y23, Px29y25, Px30y24 } CellNode (29 @ 24) (20)Px29y25 { Px30y25, Px28y25, Px29y24, Px29y26 } CellNode (29 @ 25) (20)Px29y26 { Px29y27, Px30y26, Px28y26, Px29y25 } CellNode (29 @ 26) (20)Px29y27 { Px29y26, Px28y27, Px30y27 } CellNode (29 @ 27) (20)Px29y3 { Px28y3, Px29y4, Px29y2, Px30y3 } CellNode (29 @ 3) (20)Px29y4 { Px28y4, Px29y5, Px29y3, Px30y4 } CellNode (29 @ 4) (20)Px29y5 { Px29y4, Px30y5, Px29y6, Px28y5 } CellNode (29 @ 5) (20)Px29y6 { Px28y6, Px29y5, Px30y6, Px29y7 } CellNode (29 @ 6) (20)Px29y7 { Px28y7, Px29y8, Px29y6, Px30y7 } CellNode (29 @ 7) (20)Px29y8 { Px30y8, Px29y9, Px28y8, Px29y7 } CellNode (29 @ 8) (20)Px29y9 { Px29y8, Px30y9, Px28y9, Px29y10 } CellNode (29 @ 9) (20)Px2y1 { Px3y1, Px1y1, Px2y2 } CellNode (2 @ 1) (20)Px2y10 { Px2y9, Px2y11, Px3y10, Px1y10 } CellNode (2 @ 10) (20)Px2y11 { Px3y11, Px2y10, Px1y11, Px2y12 } CellNode (2 @ 11) (20)Px2y12 { Px2y13, Px3y12, Px2y11, Px1y12 } CellNode (2 @ 12) (20)Px2y13 { Px2y14, Px3y13, Px2y12, Px1y13 } CellNode (2 @ 13) (20)Px2y14 { Px2y13, Px1y14, Px2y15, Px3y14 } CellNode (2 @ 14) (20)Px2y15 { Px3y15, Px1y15, Px2y14, Px2y16 } CellNode (2 @ 15) (20)Px2y16 { Px2y17, Px3y16, Px1y16, Px2y15 } CellNode (2 @ 16) (20)Px2y17 { Px1y17, Px2y18, Px3y17, Px2y16 } CellNode (2 @ 17) (20)Px2y18 { Px3y18, Px2y17, Px1y18, Px2y19 } CellNode (2 @ 18) (20)Px2y19 { Px3y19, Px2y18, Px1y19, Px2y20 } CellNode (2 @ 19) (20)Px2y2 { Px2y3, Px1y2, Px3y2, Px2y1 } CellNode (2 @ 2) (20)Px2y20 { Px2y21, Px3y20, Px1y20, Px2y19 } CellNode (2 @ 20) (20)Px2y21 { Px2y20, Px3y21, Px2y22, Px1y21 } CellNode (2 @ 21) (20)Px2y22 { Px2y21, Px1y22, Px3y22, Px2y23 } CellNode (2 @ 22) (20)Px2y23 { Px3y23, Px2y24, Px1y23, Px2y22 } CellNode (2 @ 23) (20)Px2y24 { Px3y24, Px2y25, Px1y24, Px2y23 } CellNode (2 @ 24) (20)Px2y25 { Px2y24, Px1y25, Px3y25, Px2y26 } CellNode (2 @ 25) (20)Px2y26 { Px2y27, Px2y25, Px1y26, Px3y26 } CellNode (2 @ 26) (20)Px2y27 { Px2y26, Px1y27, Px3y27 } CellNode (2 @ 27) (20)Px2y3 { Px3y3, Px2y4, Px1y3, Px2y2 } CellNode (2 @ 3) (20)Px2y4 { Px3y4, Px2y3, Px2y5, Px1y4 } CellNode (2 @ 4) (20)Px2y5 { Px1y5, Px2y6, Px3y5, Px2y4 } CellNode (2 @ 5) (20)Px2y6 { Px1y6, Px2y7, Px3y6, Px2y5 } CellNode (2 @ 6) (20)Px2y7 { Px2y6, Px3y7, Px1y7, Px2y8 } CellNode (2 @ 7) (20)Px2y8 { Px2y9, Px2y7, Px3y8, Px1y8 } CellNode (2 @ 8) (20)Px2y9 { Px1y9, Px2y10, Px2y8, Px3y9 } CellNode (2 @ 9) (20)Px30y1 { Px29y1, Px30y2, Px31y1 } CellNode (30 @ 1) (20)Px30y10 { Px30y9, Px30y11, Px29y10, Px31y10 } CellNode (30 @ 10) (20)Px30y11 { Px29y11, Px31y11, Px30y10, Px30y12 } CellNode (30 @ 11) (20)Px30y12 { Px30y13, Px29y12, Px31y12, Px30y11 } CellNode (30 @ 12) (20)Px30y13 { Px31y13, Px29y13, Px30y14, Px30y12 } CellNode (30 @ 13) (20)Px30y14 { Px31y14, Px30y13, Px30y15, Px29y14 } CellNode (30 @ 14) (20)Px30y15 { Px31y15, Px29y15, Px30y16, Px30y14 } CellNode (30 @ 15) (20)Px30y16 { Px30y17, Px29y16, Px31y16, Px30y15 } CellNode (30 @ 16) (20)Px30y17 { Px30y16, Px31y17, Px29y17, Px30y18 } CellNode (30 @ 17) (20)Px30y18 { Px29y18, Px30y19, Px30y17, Px31y18 } CellNode (30 @ 18) (20)Px30y19 { Px31y19, Px29y19, Px30y18, Px30y20 } CellNode (30 @ 19) (20)Px30y2 { Px31y2, Px30y1, Px29y2, Px30y3 } CellNode (30 @ 2) (20)Px30y20 { Px30y21, Px31y20, Px29y20, Px30y19 } CellNode (30 @ 20) (20)Px30y21 { Px30y22, Px29y21, Px31y21, Px30y20 } CellNode (30 @ 21) (20)Px30y22 { Px30y21, Px30y23, Px29y22, Px31y22 } CellNode (30 @ 22) (20)Px30y23 { Px29y23, Px31y23, Px30y22, Px30y24 } CellNode (30 @ 23) (20)Px30y24 { Px30y25, Px29y24, Px31y24, Px30y23 } CellNode (30 @ 24) (20)Px30y25 { Px30y26, Px29y25, Px31y25, Px30y24 } CellNode (30 @ 25) (20)Px30y26 { Px31y26, Px30y25, Px30y27, Px29y26 } CellNode (30 @ 26) (20)Px30y27 { Px31y27, Px29y27, Px30y26 } CellNode (30 @ 27) (20)Px30y3 { Px30y2, Px31y3, Px29y3, Px30y4 } CellNode (30 @ 3) (20)Px30y4 { Px29y4, Px30y5, Px31y4, Px30y3 } CellNode (30 @ 4) (20)Px30y5 { Px31y5, Px29y5, Px30y6, Px30y4 } CellNode (30 @ 5) (20)Px30y6 { Px30y5, Px31y6, Px29y6, Px30y7 } CellNode (30 @ 6) (20)Px30y7 { Px30y8, Px31y7, Px30y6, Px29y7 } CellNode (30 @ 7) (20)Px30y8 { Px29y8, Px30y9, Px31y8, Px30y7 } CellNode (30 @ 8) (20)Px30y9 { Px30y8, Px31y9, Px30y10, Px29y9 } CellNode (30 @ 9) (20)Px31y1 { Px30y1, Px31y2 } CellNode (31 @ 1) (20)Px31y10 { Px30y10, Px31y11, Px31y9 } CellNode (31 @ 10) (20)Px31y11 { Px31y12, Px30y11, Px31y10 } CellNode (31 @ 11) (20)Px31y12 { Px30y12, Px31y13, Px31y11 } CellNode (31 @ 12) (20)Px31y13 { Px31y14, Px30y13, Px31y12 } CellNode (31 @ 13) (20)Px31y14 { Px31y15, Px31y13, Px30y14 } CellNode (31 @ 14) (20)Px31y15 { Px30y15, Px31y14, Px31y16 } CellNode (31 @ 15) (20)Px31y16 { Px31y15, Px31y17, Px30y16 } CellNode (31 @ 16) (20)Px31y17 { Px30y17, Px31y18, Px31y16 } CellNode (31 @ 17) (20)Px31y18 { Px31y19, Px31y17, Px30y18 } CellNode (31 @ 18) (20)Px31y19 { Px31y20, Px31y18, Px30y19 } CellNode (31 @ 19) (20)Px31y2 { Px31y1, Px30y2, Px31y3 } CellNode (31 @ 2) (20)Px31y20 { Px31y21, Px31y19, Px30y20 } CellNode (31 @ 20) (20)Px31y21 { Px31y20, Px31y22, Px30y21 } CellNode (31 @ 21) (20)Px31y22 { Px31y21, Px31y23, Px30y22 } CellNode (31 @ 22) (20)Px31y23 { Px31y24, Px31y22, Px30y23 } CellNode (31 @ 23) (20)Px31y24 { Px31y25, Px31y23, Px30y24 } CellNode (31 @ 24) (20)Px31y25 { Px31y26, Px31y24, Px30y25 } CellNode (31 @ 25) (20)Px31y26 { Px31y27, Px31y25, Px30y26 } CellNode (31 @ 26) (20)Px31y27 { Px30y27, Px31y26 } CellNode (31 @ 27) (20)Px31y3 { Px31y2, Px30y3, Px31y4 } CellNode (31 @ 3) (20)Px31y4 { Px31y3, Px30y4, Px31y5 } CellNode (31 @ 4) (20)Px31y5 { Px31y4, Px30y5, Px31y6 } CellNode (31 @ 5) (20)Px31y6 { Px31y5, Px30y6, Px31y7 } CellNode (31 @ 6) (20)Px31y7 { Px31y6, Px30y7, Px31y8 } CellNode (31 @ 7) (20)Px31y8 { Px31y9, Px30y8, Px31y7 } CellNode (31 @ 8) (20)Px31y9 { Px31y10, Px30y9, Px31y8 } CellNode (31 @ 9) (20)Px3y1 { Px3y2, Px4y1, Px2y1 } CellNode (3 @ 1) (20)Px3y10 { Px4y10, Px2y10, Px3y11, Px3y9 } CellNode (3 @ 10) (20)Px3y11 { Px3y12, Px2y11, Px4y11, Px3y10 } CellNode (3 @ 11) (20)Px3y12 { Px3y11, Px3y13, Px2y12, Px4y12 } CellNode (3 @ 12) (20)Px3y13 { Px2y13, Px4y13, Px3y12, Px3y14 } CellNode (3 @ 13) (20)Px3y14 { Px4y14, Px3y15, Px2y14, Px3y13 } CellNode (3 @ 14) (20)Px3y15 { Px4y15, Px3y16, Px2y15, Px3y14 } CellNode (3 @ 15) (20)Px3y16 { Px4y16, Px3y15, Px3y17, Px2y16 } CellNode (3 @ 16) (20)Px3y17 { Px4y17, Px2y17, Px3y18, Px3y16 } CellNode (3 @ 17) (20)Px3y18 { Px4y18, Px2y18, Px3y19, Px3y17 } CellNode (3 @ 18) (20)Px3y19 { Px3y18, Px3y20, Px4y19, Px2y19 } CellNode (3 @ 19) (20)Px3y2 { Px3y3, Px4y2, Px3y1, Px2y2 } CellNode (3 @ 2) (20)Px3y20 { Px3y19, Px3y21, Px4y20, Px2y20 } CellNode (3 @ 20) (20)Px3y21 { Px4y21, Px2y21, Px3y20, Px3y22 } CellNode (3 @ 21) (20)Px3y22 { Px3y23, Px4y22, Px3y21, Px2y22 } CellNode (3 @ 22) (20)Px3y23 { Px3y24, Px4y23, Px3y22, Px2y23 } CellNode (3 @ 23) (20)Px3y24 { Px2y24, Px3y23, Px3y25, Px4y24 } CellNode (3 @ 24) (20)Px3y25 { Px4y25, Px3y24, Px2y25, Px3y26 } CellNode (3 @ 25) (20)Px3y26 { Px3y27, Px4y26, Px3y25, Px2y26 } CellNode (3 @ 26) (20)Px3y27 { Px2y27, Px3y26, Px4y27 } CellNode (3 @ 27) (20)Px3y3 { Px3y4, Px2y3, Px3y2, Px4y3 } CellNode (3 @ 3) (20)Px3y4 { Px4y4, Px2y4, Px3y5, Px3y3 } CellNode (3 @ 4) (20)Px3y5 { Px3y4, Px4y5, Px3y6, Px2y5 } CellNode (3 @ 5) (20)Px3y6 { Px2y6, Px3y7, Px3y5, Px4y6 } CellNode (3 @ 6) (20)Px3y7 { Px2y7, Px3y8, Px3y6, Px4y7 } CellNode (3 @ 7) (20)Px3y8 { Px4y8, Px3y7, Px3y9, Px2y8 } CellNode (3 @ 8) (20)Px3y9 { Px3y8, Px4y9, Px3y10, Px2y9 } CellNode (3 @ 9) (20)Px4y1 { Px3y1, Px4y2, Px5y1 } CellNode (4 @ 1) (20)Px4y10 { Px4y11, Px4y9, Px5y10, Px3y10 } CellNode (4 @ 10) (20)Px4y11 { Px4y10, Px3y11, Px4y12, Px5y11 } CellNode (4 @ 11) (20)Px4y12 { Px5y12, Px3y12, Px4y11, Px4y13 } CellNode (4 @ 12) (20)Px4y13 { Px4y14, Px5y13, Px3y13, Px4y12 } CellNode (4 @ 13) (20)Px4y14 { Px4y13, Px4y15, Px5y14, Px3y14 } CellNode (4 @ 14) (20)Px4y15 { Px5y15, Px4y14, Px3y15, Px4y16 } CellNode (4 @ 15) (20)Px4y16 { Px4y17, Px5y16, Px4y15, Px3y16 } CellNode (4 @ 16) (20)Px4y17 { Px4y18, Px5y17, Px3y17, Px4y16 } CellNode (4 @ 17) (20)Px4y18 { Px4y17, Px3y18, Px4y19, Px5y18 } CellNode (4 @ 18) (20)Px4y19 { Px5y19, Px4y18, Px3y19, Px4y20 } CellNode (4 @ 19) (20)Px4y2 { Px4y1, Px5y2, Px3y2, Px4y3 } CellNode (4 @ 2) (20)Px4y20 { Px5y20, Px3y20, Px4y21, Px4y19 } CellNode (4 @ 20) (20)Px4y21 { Px5y21, Px3y21, Px4y22, Px4y20 } CellNode (4 @ 21) (20)Px4y22 { Px4y21, Px5y22, Px3y22, Px4y23 } CellNode (4 @ 22) (20)Px4y23 { Px3y23, Px5y23, Px4y22, Px4y24 } CellNode (4 @ 23) (20)Px4y24 { Px4y25, Px3y24, Px5y24, Px4y23 } CellNode (4 @ 24) (20)Px4y25 { Px4y26, Px3y25, Px5y25, Px4y24 } CellNode (4 @ 25) (20)Px4y26 { Px4y27, Px4y25, Px5y26, Px3y26 } CellNode (4 @ 26) (20)Px4y27 { Px3y27, Px5y27, Px4y26 } CellNode (4 @ 27) (20)Px4y3 { Px4y4, Px4y2, Px5y3, Px3y3 } CellNode (4 @ 3) (20)Px4y4 { Px3y4, Px4y5, Px5y4, Px4y3 } CellNode (4 @ 4) (20)Px4y5 { Px5y5, Px4y6, Px3y5, Px4y4 } CellNode (4 @ 5) (20)Px4y6 { Px5y6, Px4y5, Px3y6, Px4y7 } CellNode (4 @ 6) (20)Px4y7 { Px3y7, Px4y8, Px5y7, Px4y6 } CellNode (4 @ 7) (20)Px4y8 { Px3y8, Px4y9, Px4y7, Px5y8 } CellNode (4 @ 8) (20)Px4y9 { Px4y8, Px5y9, Px4y10, Px3y9 } CellNode (4 @ 9) (20)Px5y1 { Px4y1, Px5y2, Px6y1 } CellNode (5 @ 1) (20)Px5y10 { Px5y9, Px4y10, Px5y11, Px6y10 } CellNode (5 @ 10) (20)Px5y11 { Px5y12, Px6y11, Px4y11, Px5y10 } CellNode (5 @ 11) (20)Px5y12 { Px6y12, Px5y13, Px4y12, Px5y11 } CellNode (5 @ 12) (20)Px5y13 { Px4y13, Px5y12, Px6y13, Px5y14 } CellNode (5 @ 13) (20)Px5y14 { Px5y15, Px4y14, Px6y14, Px5y13 } CellNode (5 @ 14) (20)Px5y15 { Px5y16, Px4y15, Px6y15, Px5y14 } CellNode (5 @ 15) (20)Px5y16 { Px5y15, Px6y16, Px5y17, Px4y16 } CellNode (5 @ 16) (20)Px5y17 { Px4y17, Px5y18, Px5y16, Px6y17 } CellNode (5 @ 17) (20)Px5y18 { Px6y18, Px4y18, Px5y19, Px5y17 } CellNode (5 @ 18) (20)Px5y19 { Px5y20, Px6y19, Px4y19, Px5y18 } CellNode (5 @ 19) (20)Px5y2 { Px6y2, Px4y2, Px5y3, Px5y1 } CellNode (5 @ 2) (20)Px5y20 { Px5y19, Px5y21, Px6y20, Px4y20 } CellNode (5 @ 20) (20)Px5y21 { Px5y20, Px4y21, Px5y22, Px6y21 } CellNode (5 @ 21) (20)Px5y22 { Px6y22, Px5y21, Px4y22, Px5y23 } CellNode (5 @ 22) (20)Px5y23 { Px5y24, Px6y23, Px5y22, Px4y23 } CellNode (5 @ 23) (20)Px5y24 { Px5y23, Px5y25, Px6y24, Px4y24 } CellNode (5 @ 24) (20)Px5y25 { Px6y25, Px4y25, Px5y24, Px5y26 } CellNode (5 @ 25) (20)Px5y26 { Px5y27, Px6y26, Px4y26, Px5y25 } CellNode (5 @ 26) (20)Px5y27 { Px6y27, Px5y26, Px4y27 } CellNode (5 @ 27) (20)Px5y3 { Px5y2, Px6y3, Px5y4, Px4y3 } CellNode (5 @ 3) (20)Px5y4 { Px5y5, Px5y3, Px6y4, Px4y4 } CellNode (5 @ 4) (20)Px5y5 { Px5y6, Px4y5, Px5y4, Px6y5 } CellNode (5 @ 5) (20)Px5y6 { Px6y6, Px4y6, Px5y7, Px5y5 } CellNode (5 @ 6) (20)Px5y7 { Px5y6, Px6y7, Px4y7, Px5y8 } CellNode (5 @ 7) (20)Px5y8 { Px4y8, Px5y9, Px5y7, Px6y8 } CellNode (5 @ 8) (20)Px5y9 { Px4y9, Px5y10, Px5y8, Px6y9 } CellNode (5 @ 9) (20)Px6y1 { Px7y1, Px5y1, Px6y2 } CellNode (6 @ 1) (20)Px6y10 { Px6y11, Px7y10, Px5y10, Px6y9 } CellNode (6 @ 10) (20)Px6y11 { Px5y11, Px6y12, Px7y11, Px6y10 } CellNode (6 @ 11) (20)Px6y12 { Px5y12, Px6y11, Px6y13, Px7y12 } CellNode (6 @ 12) (20)Px6y13 { Px7y13, Px6y14, Px5y13, Px6y12 } CellNode (6 @ 13) (20)Px6y14 { Px7y14, Px6y15, Px6y13, Px5y14 } CellNode (6 @ 14) (20)Px6y15 { Px5y15, Px6y14, Px7y15, Px6y16 } CellNode (6 @ 15) (20)Px6y16 { Px7y16, Px5y16, Px6y15, Px6y17 } CellNode (6 @ 16) (20)Px6y17 { Px7y17, Px6y18, Px6y16, Px5y17 } CellNode (6 @ 17) (20)Px6y18 { Px6y17, Px7y18, Px6y19, Px5y18 } CellNode (6 @ 18) (20)Px6y19 { Px6y18, Px5y19, Px6y20 } CellNode (6 @ 19) (20)Px6y2 { Px5y2, Px6y3, Px6y1, Px7y2 } CellNode (6 @ 2) (20)Px6y20 { Px6y19, Px5y20, Px6y21 } CellNode (6 @ 20) (20)Px6y21 { Px6y20, Px5y21, Px6y22 } CellNode (6 @ 21) (20)Px6y22 { Px6y21, Px5y22, Px6y23 } CellNode (6 @ 22) (20)Px6y23 { Px6y24, Px5y23, Px6y22 } CellNode (6 @ 23) (20)Px6y24 { Px6y23, Px5y24, Px6y25 } CellNode (6 @ 24) (20)Px6y25 { Px7y25, Px6y26, Px5y25, Px6y24 } CellNode (6 @ 25) (20)Px6y26 { Px6y25, Px7y26, Px5y26, Px6y27 } CellNode (6 @ 26) (20)Px6y27 { Px6y26, Px5y27, Px7y27 } CellNode (6 @ 27) (20)Px6y3 { Px6y2, Px7y3, Px5y3, Px6y4 } CellNode (6 @ 3) (20)Px6y4 { Px7y4, Px6y3, Px5y4, Px6y5 } CellNode (6 @ 4) (20)Px6y5 { Px6y6, Px6y4, Px7y5, Px5y5 } CellNode (6 @ 5) (20)Px6y6 { Px7y6, Px5y6, Px6y7, Px6y5 } CellNode (6 @ 6) (20)Px6y7 { Px7y7, Px6y6, Px5y7, Px6y8 } CellNode (6 @ 7) (20)Px6y8 { Px6y7, Px7y8, Px5y8, Px6y9 } CellNode (6 @ 8) (20)Px6y9 { Px5y9, Px6y8, Px7y9, Px6y10 } CellNode (6 @ 9) (20)Px7y1 { Px7y2, Px8y1, Px6y1 } CellNode (7 @ 1) (20)Px7y10 { Px7y9, Px7y11, Px8y10, Px6y10 } CellNode (7 @ 10) (20)Px7y11 { Px8y11, Px6y11, Px7y10, Px7y12 } CellNode (7 @ 11) (20)Px7y12 { Px7y13, Px8y12, Px6y12, Px7y11 } CellNode (7 @ 12) (20)Px7y13 { Px7y14, Px8y13, Px6y13, Px7y12 } CellNode (7 @ 13) (20)Px7y14 { Px7y13, Px6y14, Px7y15, Px8y14 } CellNode (7 @ 14) (20)Px7y15 { Px8y15, Px7y14, Px6y15, Px7y16 } CellNode (7 @ 15) (20)Px7y16 { Px7y17, Px8y16, Px7y15, Px6y16 } CellNode (7 @ 16) (20)Px7y17 { Px7y16, Px7y18, Px8y17, Px6y17 } CellNode (7 @ 17) (20)Px7y18 { Px7y17, Px6y18, Px8y18 } CellNode (7 @ 18) (20)Px7y2 { Px6y2, Px7y3, Px8y2, Px7y1 } CellNode (7 @ 2) (20)Px7y25 { Px7y26, Px8y25, Px6y25 } CellNode (7 @ 25) (20)Px7y26 { Px8y26, Px7y25, Px6y26, Px7y27 } CellNode (7 @ 26) (20)Px7y27 { Px6y27, Px8y27, Px7y26 } CellNode (7 @ 27) (20)Px7y3 { Px7y4, Px6y3, Px7y2, Px8y3 } CellNode (7 @ 3) (20)Px7y4 { Px7y3, Px8y4, Px6y4, Px7y5 } CellNode (7 @ 4) (20)Px7y5 { Px7y6, Px8y5, Px7y4, Px6y5 } CellNode (7 @ 5) (20)Px7y6 { Px7y7, Px6y6, Px8y6, Px7y5 } CellNode (7 @ 6) (20)Px7y7 { Px8y7, Px6y7, Px7y8, Px7y6 } CellNode (7 @ 7) (20)Px7y8 { Px7y7, Px8y8, Px6y8, Px7y9 } CellNode (7 @ 8) (20)Px7y9 { Px7y10, Px8y9, Px7y8, Px6y9 } CellNode (7 @ 9) (20)Px8y1 { Px7y1, Px8y2, Px9y1 } CellNode (8 @ 1) (20)Px8y10 { Px9y10, Px7y10, Px8y11, Px8y9 } CellNode (8 @ 10) (20)Px8y11 { Px8y12, Px7y11, Px9y11, Px8y10 } CellNode (8 @ 11) (20)Px8y12 { Px8y11, Px9y12, Px7y12, Px8y13 } CellNode (8 @ 12) (20)Px8y13 { Px8y14, Px7y13, Px8y12, Px9y13 } CellNode (8 @ 13) (20)Px8y14 { Px8y15, Px7y14, Px9y14, Px8y13 } CellNode (8 @ 14) (20)Px8y15 { Px9y15, Px7y15, Px8y16, Px8y14 } CellNode (8 @ 15) (20)Px8y16 { Px8y17, Px8y15, Px9y16, Px7y16 } CellNode (8 @ 16) (20)Px8y17 { Px9y17, Px7y17, Px8y18, Px8y16 } CellNode (8 @ 17) (20)Px8y18 { Px8y17, Px7y18 } CellNode (8 @ 18) (20)Px8y2 { Px8y1, Px9y2, Px8y3, Px7y2 } CellNode (8 @ 2) (20)Px8y25 { Px9y25, Px8y26, Px7y25 } CellNode (8 @ 25) (20)Px8y26 { Px8y27, Px9y26, Px7y26, Px8y25 } CellNode (8 @ 26) (20)Px8y27 { Px9y27, Px8y26, Px7y27 } CellNode (8 @ 27) (20)Px8y3 { Px8y4, Px7y3, Px8y2, Px9y3 } CellNode (8 @ 3) (20)Px8y4 { Px8y5, Px7y4, Px9y4, Px8y3 } CellNode (8 @ 4) (20)Px8y5 { Px9y5, Px8y4, Px8y6, Px7y5 } CellNode (8 @ 5) (20)Px8y6 { Px8y7, Px8y5, Px9y6, Px7y6 } CellNode (8 @ 6) (20)Px8y7 { Px7y7, Px8y8, Px9y7, Px8y6 } CellNode (8 @ 7) (20)Px8y8 { Px9y8, Px8y9, Px7y8, Px8y7 } CellNode (8 @ 8) (20)Px8y9 { Px8y8, Px9y9, Px8y10, Px7y9 } CellNode (8 @ 9) (20)Px9y1 { Px8y1, Px10y1, Px9y2 } CellNode (9 @ 1) (20)Px9y10 { Px10y10, Px9y9, Px9y11, Px8y10 } CellNode (9 @ 10) (20)Px9y11 { Px9y10, Px8y11, Px10y11, Px9y12 } CellNode (9 @ 11) (20)Px9y12 { Px8y12, Px9y11, Px10y12, Px9y13 } CellNode (9 @ 12) (20)Px9y13 { Px9y14, Px9y12, Px8y13, Px10y13 } CellNode (9 @ 13) (20)Px9y14 { Px8y14, Px10y14, Px9y15, Px9y13 } CellNode (9 @ 14) (20)Px9y15 { Px8y15, Px9y14, Px10y15, Px9y16 } CellNode (9 @ 15) (20)Px9y16 { Px9y17, Px9y15, Px8y16, Px10y16 } CellNode (9 @ 16) (20)Px9y17 { Px9y16, Px8y17 } CellNode (9 @ 17) (20)Px9y2 { Px10y2, Px8y2, Px9y3, Px9y1 } CellNode (9 @ 2) (20)Px9y25 { Px9y26, Px10y25, Px8y25 } CellNode (9 @ 25) (20)Px9y26 { Px10y26, Px9y25, Px9y27, Px8y26 } CellNode (9 @ 26) (20)Px9y27 { Px9y26, Px10y27, Px8y27 } CellNode (9 @ 27) (20)Px9y3 { Px10y3, Px9y2, Px8y3, Px9y4 } CellNode (9 @ 3) (20)Px9y4 { Px9y5, Px10y4, Px8y4, Px9y3 } CellNode (9 @ 4) (20)Px9y5 { Px8y5, Px9y6, Px10y5, Px9y4 } CellNode (9 @ 5) (20)Px9y6 { Px9y5, Px10y6, Px8y6, Px9y7 } CellNode (9 @ 6) (20)Px9y7 { Px8y7, Px9y8, Px9y6, Px10y7 } CellNode (9 @ 7) (20)Px9y8 { Px10y8, Px8y8, Px9y9, Px9y7 } CellNode (9 @ 8) (20)Px9y9 { Px9y10, Px10y9, Px8y9, Px9y8 } CellNode (9 @ 9) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="someVeryGoodNetwork">someVeryGoodNetworkmessages none  defined. P1 { P2, P3, P4, P5, P6, P7 } Node (4104 @ 2150) (70)P2 { P1, P3, P4, P5, P6, P7 } Node (4130 @ 2128) (70)P3 { P1, P2, P4, P5, P6, P7 } Node (4141 @ 2108) (70)P4 { P1, P2, P3, P5, P6, P7 } Node (4124 @ 2089) (70)P5 { P1, P2, P3, P4, P6, P7 } Node (4086 @ 2084) (70)P6 { P1, P2, P3, P4, P5, P7 } Node (4076 @ 2110) (70)P7 { P1, P2, P3, P4, P5, P6 } Node (4076 @ 2132) (70)P8 { P9, P10, P11, P12, P13, P14, P15, P16 } Node (4055 @ 1941) (70)P9 { P8, P10, P11, P12, P13, P14, P15, P16 } Node (4033 @ 1948) (70)P10 { P8, P9, P11, P12, P13, P14, P15, P16 } Node (4017 @ 1960) (70)P11 { P8, P9, P10, P12, P13, P14, P15, P16 } Node (3993 @ 1967) (70)P12 { P8, P9, P10, P11, P13, P14, P15, P16 } Node (3987 @ 1946) (70)P13 { P8, P9, P10, P11, P12, P14, P15, P16 } Node (3998 @ 1938) (70)P14 { P8, P9, P10, P11, P12, P13, P15, P16 } Node (4017 @ 1929) (70)P15 { P8, P9, P10, P11, P12, P13, P14, P16 } Node (4021 @ 1914) (70)P16 { P8, P9, P10, P11, P12, P13, P14, P15 } Node (4001 @ 1912) (70)P17 { P18 } Node (3850 @ 2053) (70)P18 { P17, P19 } Node (3834 @ 2012) (70)P19 { P18, P20, P21 } Node (3813 @ 1948) (70)P20 { P19, P21 } Node (3810 @ 1913) (70)P21 { P19, P20, P23 } Node (3829 @ 1880) (70)P22 { P23 } Node (3919 @ 1792) (70)P23 { P21, P22 } Node (3864 @ 1835) (70)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>examples</category><body package="DistributedModeling-samples" selector="programNet">programNetmessages m1 m2 m3.baba { au rhum } nodeau { baba } noderhum { baba au } node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="Toumbos0">Toumbos0messages none  defined. Px10y1 { Px9y1, Px11y1, Px10y2 } CellNode (10 @ 1) (20)Px10y10 { Px9y10, Px11y10, Px10y9, Px10y11 } CellNode (10 @ 10) (20)Px10y11 { Px10y10, Px9y11, Px10y12, Px11y11 } CellNode (10 @ 11) (20)Px10y12 { Px10y13, Px10y11, Px9y12, Px11y12 } CellNode (10 @ 12) (20)Px10y13 { Px11y13, Px10y14, Px10y12, Px9y13 } CellNode (10 @ 13) (20)Px10y14 { Px9y14, Px11y14, Px10y15, Px10y13 } CellNode (10 @ 14) (20)Px10y15 { Px10y14, Px9y15, Px11y15, Px10y16 } CellNode (10 @ 15) (20)Px10y16 { Px11y16, Px10y17, Px10y15, Px9y16 } CellNode (10 @ 16) (20)Px10y17 { Px9y17, Px11y17, Px10y18, Px10y16 } CellNode (10 @ 17) (20)Px10y18 { Px10y17, Px9y18, Px10y19, Px11y18 } CellNode (10 @ 18) (20)Px10y19 { Px10y18, Px10y20, Px9y19, Px11y19 } CellNode (10 @ 19) (20)Px10y2 { Px10y1, Px11y2, Px9y2, Px10y3 } CellNode (10 @ 2) (20)Px10y20 { Px11y20, Px10y19, Px10y21, Px9y20 } CellNode (10 @ 20) (20)Px10y21 { Px10y22, Px9y21, Px11y21, Px10y20 } CellNode (10 @ 21) (20)Px10y22 { Px9y22, Px10y23, Px11y22, Px10y21 } CellNode (10 @ 22) (20)Px10y23 { Px10y22, Px10y24, Px9y23, Px11y23 } CellNode (10 @ 23) (20)Px10y24 { Px10y25, Px11y24, Px10y23, Px9y24 } CellNode (10 @ 24) (20)Px10y25 { Px10y26, Px9y25, Px11y25, Px10y24 } CellNode (10 @ 25) (20)Px10y26 { Px10y27, Px9y26, Px11y26, Px10y25 } CellNode (10 @ 26) (20)Px10y27 { Px11y27, Px10y26, Px10y28, Px9y27 } CellNode (10 @ 27) (20)Px10y28 { Px10y29, Px9y28, Px11y28, Px10y27 } CellNode (10 @ 28) (20)Px10y29 { Px10y30, Px9y29, Px11y29, Px10y28 } CellNode (10 @ 29) (20)Px10y3 { Px10y4, Px10y2, Px9y3, Px11y3 } CellNode (10 @ 3) (20)Px10y30 { Px10y29, Px9y30, Px11y30, Px10y31 } CellNode (10 @ 30) (20)Px10y31 { Px10y30, Px9y31, Px11y31, Px10y32 } CellNode (10 @ 31) (20)Px10y32 { Px10y33, Px11y32, Px10y31, Px9y32 } CellNode (10 @ 32) (20)Px10y33 { Px9y33, Px10y34, Px11y33, Px10y32 } CellNode (10 @ 33) (20)Px10y34 { Px10y33, Px9y34, Px11y34, Px10y35 } CellNode (10 @ 34) (20)Px10y35 { Px11y35, Px10y34, Px9y35, Px10y36 } CellNode (10 @ 35) (20)Px10y36 { Px11y36, Px10y37, Px10y35, Px9y36 } CellNode (10 @ 36) (20)Px10y37 { Px9y37, Px11y37, Px10y38, Px10y36 } CellNode (10 @ 37) (20)Px10y38 { Px10y37, Px9y38, Px10y39, Px11y38 } CellNode (10 @ 38) (20)Px10y39 { Px11y39, Px10y38, Px9y39, Px10y40 } CellNode (10 @ 39) (20)Px10y4 { Px10y3, Px10y5, Px9y4, Px11y4 } CellNode (10 @ 4) (20)Px10y40 { Px11y40, Px10y41, Px10y39, Px9y40 } CellNode (10 @ 40) (20)Px10y41 { Px9y41, Px10y42, Px11y41, Px10y40 } CellNode (10 @ 41) (20)Px10y42 { Px10y41, Px9y42, Px11y42, Px10y43 } CellNode (10 @ 42) (20)Px10y43 { Px11y43, Px10y44, Px10y42, Px9y43 } CellNode (10 @ 43) (20)Px10y44 { Px9y44, Px11y44, Px10y45, Px10y43 } CellNode (10 @ 44) (20)Px10y45 { Px10y44, Px9y45, Px10y46, Px11y45 } CellNode (10 @ 45) (20)Px10y46 { Px11y46, Px10y45, Px9y46, Px10y47 } CellNode (10 @ 46) (20)Px10y47 { Px10y48, Px11y47, Px10y46, Px9y47 } CellNode (10 @ 47) (20)Px10y48 { Px9y48, Px11y48, Px10y49, Px10y47 } CellNode (10 @ 48) (20)Px10y49 { Px10y48, Px10y50, Px9y49, Px11y49 } CellNode (10 @ 49) (20)Px10y5 { Px10y4, Px11y5, Px9y5, Px10y6 } CellNode (10 @ 5) (20)Px10y50 { Px9y50, Px10y49, Px10y51, Px11y50 } CellNode (10 @ 50) (20)Px10y51 { Px11y51, Px10y50, Px9y51, Px10y52 } CellNode (10 @ 51) (20)Px10y52 { Px10y53, Px11y52, Px10y51, Px9y52 } CellNode (10 @ 52) (20)Px10y53 { Px9y53, Px10y54, Px11y53, Px10y52 } CellNode (10 @ 53) (20)Px10y54 { Px11y54, Px10y53, Px9y54, Px10y55 } CellNode (10 @ 54) (20)Px10y55 { Px10y56, Px11y55, Px10y54, Px9y55 } CellNode (10 @ 55) (20)Px10y56 { Px9y56, Px10y57, Px11y56, Px10y55 } CellNode (10 @ 56) (20)Px10y57 { Px10y56, Px9y57, Px10y58, Px11y57 } CellNode (10 @ 57) (20)Px10y58 { Px11y58, Px10y57, Px9y58, Px10y59 } CellNode (10 @ 58) (20)Px10y59 { Px10y60, Px11y59, Px10y58, Px9y59 } CellNode (10 @ 59) (20)Px10y6 { Px9y6, Px11y6, Px10y5, Px10y7 } CellNode (10 @ 6) (20)Px10y60 { Px9y60, Px11y60, Px10y61, Px10y59 } CellNode (10 @ 60) (20)Px10y61 { Px10y60, Px9y61, Px11y61, Px10y62 } CellNode (10 @ 61) (20)Px10y62 { Px10y63, Px10y61, Px9y62, Px11y62 } CellNode (10 @ 62) (20)Px10y63 { Px10y64, Px11y63, Px10y62, Px9y63 } CellNode (10 @ 63) (20)Px10y64 { Px9y64, Px10y65, Px11y64, Px10y63 } CellNode (10 @ 64) (20)Px10y65 { Px10y64, Px9y65, Px11y65, Px10y66 } CellNode (10 @ 65) (20)Px10y66 { Px11y66, Px10y67, Px10y65, Px9y66 } CellNode (10 @ 66) (20)Px10y67 { Px11y67, Px10y66, Px9y67 } CellNode (10 @ 67) (20)Px10y7 { Px10y8, Px9y7, Px11y7, Px10y6 } CellNode (10 @ 7) (20)Px10y8 { Px10y7, Px9y8, Px10y9, Px11y8 } CellNode (10 @ 8) (20)Px10y9 { Px10y10, Px10y8, Px9y9, Px11y9 } CellNode (10 @ 9) (20)Px11y1 { Px10y1, Px11y2, Px12y1 } CellNode (11 @ 1) (20)Px11y10 { Px10y10, Px11y9, Px11y11, Px12y10 } CellNode (11 @ 10) (20)Px11y11 { Px12y11, Px11y10, Px10y11, Px11y12 } CellNode (11 @ 11) (20)Px11y12 { Px11y13, Px12y12, Px11y11, Px10y12 } CellNode (11 @ 12) (20)Px11y13 { Px10y13, Px11y14, Px12y13, Px11y12 } CellNode (11 @ 13) (20)Px11y14 { Px12y14, Px10y14, Px11y13, Px11y15 } CellNode (11 @ 14) (20)Px11y15 { Px11y16, Px12y15, Px11y14, Px10y15 } CellNode (11 @ 15) (20)Px11y16 { Px11y17, Px12y16, Px11y15, Px10y16 } CellNode (11 @ 16) (20)Px11y17 { Px10y17, Px11y16, Px11y18, Px12y17 } CellNode (11 @ 17) (20)Px11y18 { Px12y18, Px11y17, Px10y18, Px11y19 } CellNode (11 @ 18) (20)Px11y19 { Px11y20, Px12y19, Px10y19, Px11y18 } CellNode (11 @ 19) (20)Px11y2 { Px12y2, Px10y2, Px11y3, Px11y1 } CellNode (11 @ 2) (20)Px11y20 { Px12y20, Px10y20, Px11y21, Px11y19 } CellNode (11 @ 20) (20)Px11y21 { Px11y20, Px11y22, Px12y21, Px10y21 } CellNode (11 @ 21) (20)Px11y22 { Px10y22, Px12y22, Px11y21, Px11y23 } CellNode (11 @ 22) (20)Px11y23 { Px12y23, Px11y24, Px10y23, Px11y22 } CellNode (11 @ 23) (20)Px11y24 { Px12y24, Px11y25, Px10y24, Px11y23 } CellNode (11 @ 24) (20)Px11y25 { Px10y25, Px11y24, Px11y26, Px12y25 } CellNode (11 @ 25) (20)Px11y26 { Px12y26, Px10y26, Px11y27, Px11y25 } CellNode (11 @ 26) (20)Px11y27 { Px12y27, Px10y27, Px11y28, Px11y26 } CellNode (11 @ 27) (20)Px11y28 { Px11y27, Px12y28, Px11y29, Px10y28 } CellNode (11 @ 28) (20)Px11y29 { Px10y29, Px11y28, Px11y30, Px12y29 } CellNode (11 @ 29) (20)Px11y3 { Px11y2, Px12y3, Px11y4, Px10y3 } CellNode (11 @ 3) (20)Px11y30 { Px12y30, Px10y30, Px11y29, Px11y31 } CellNode (11 @ 30) (20)Px11y31 { Px11y32, Px12y31, Px11y30, Px10y31 } CellNode (11 @ 31) (20)Px11y32 { Px11y33, Px12y32, Px11y31, Px10y32 } CellNode (11 @ 32) (20)Px11y33 { Px10y33, Px11y32, Px11y34, Px12y33 } CellNode (11 @ 33) (20)Px11y34 { Px12y34, Px10y34, Px11y33, Px11y35 } CellNode (11 @ 34) (20)Px11y35 { Px11y36, Px12y35, Px10y35, Px11y34 } CellNode (11 @ 35) (20)Px11y36 { Px11y35, Px11y37, Px12y36, Px10y36 } CellNode (11 @ 36) (20)Px11y37 { Px12y37, Px10y37, Px11y36, Px11y38 } CellNode (11 @ 37) (20)Px11y38 { Px11y39, Px12y38, Px11y37, Px10y38 } CellNode (11 @ 38) (20)Px11y39 { Px11y40, Px12y39, Px10y39, Px11y38 } CellNode (11 @ 39) (20)Px11y4 { Px10y4, Px11y5, Px11y3, Px12y4 } CellNode (11 @ 4) (20)Px11y40 { Px11y39, Px11y41, Px12y40, Px10y40 } CellNode (11 @ 40) (20)Px11y41 { Px11y40, Px10y41, Px12y41, Px11y42 } CellNode (11 @ 41) (20)Px11y42 { Px12y42, Px11y43, Px10y42, Px11y41 } CellNode (11 @ 42) (20)Px11y43 { Px11y44, Px12y43, Px11y42, Px10y43 } CellNode (11 @ 43) (20)Px11y44 { Px11y43, Px10y44, Px12y44, Px11y45 } CellNode (11 @ 44) (20)Px11y45 { Px11y46, Px11y44, Px10y45, Px12y45 } CellNode (11 @ 45) (20)Px11y46 { Px12y46, Px11y47, Px10y46, Px11y45 } CellNode (11 @ 46) (20)Px11y47 { Px11y46, Px11y48, Px12y47, Px10y47 } CellNode (11 @ 47) (20)Px11y48 { Px11y47, Px10y48, Px11y49, Px12y48 } CellNode (11 @ 48) (20)Px11y49 { Px12y49, Px11y48, Px10y49, Px11y50 } CellNode (11 @ 49) (20)Px11y5 { Px11y6, Px10y5, Px12y5, Px11y4 } CellNode (11 @ 5) (20)Px11y50 { Px12y50, Px10y50, Px11y51, Px11y49 } CellNode (11 @ 50) (20)Px11y51 { Px12y51, Px11y52, Px10y51, Px11y50 } CellNode (11 @ 51) (20)Px11y52 { Px11y53, Px11y51, Px12y52, Px10y52 } CellNode (11 @ 52) (20)Px11y53 { Px11y54, Px12y53, Px10y53, Px11y52 } CellNode (11 @ 53) (20)Px11y54 { Px11y55, Px10y54, Px12y54, Px11y53 } CellNode (11 @ 54) (20)Px11y55 { Px11y54, Px12y55, Px10y55, Px11y56 } CellNode (11 @ 55) (20)Px11y56 { Px11y57, Px10y56, Px11y55, Px12y56 } CellNode (11 @ 56) (20)Px11y57 { Px11y58, Px10y57, Px12y57, Px11y56 } CellNode (11 @ 57) (20)Px11y58 { Px11y59, Px12y58, Px10y58, Px11y57 } CellNode (11 @ 58) (20)Px11y59 { Px11y58, Px11y60, Px12y59, Px10y59 } CellNode (11 @ 59) (20)Px11y6 { Px12y6, Px11y5, Px10y6, Px11y7 } CellNode (11 @ 6) (20)Px11y60 { Px10y60, Px11y59, Px11y61, Px12y60 } CellNode (11 @ 60) (20)Px11y61 { Px12y61, Px11y60, Px10y61, Px11y62 } CellNode (11 @ 61) (20)Px11y62 { Px12y62, Px11y63, Px10y62, Px11y61 } CellNode (11 @ 62) (20)Px11y63 { Px10y63, Px12y63, Px11y64, Px11y62 } CellNode (11 @ 63) (20)Px11y64 { Px10y64, Px11y63, Px11y65, Px12y64 } CellNode (11 @ 64) (20)Px11y65 { Px11y66, Px12y65, Px10y65, Px11y64 } CellNode (11 @ 65) (20)Px11y66 { Px11y67, Px12y66, Px11y65, Px10y66 } CellNode (11 @ 66) (20)Px11y67 { Px10y67, Px11y66, Px12y67 } CellNode (11 @ 67) (20)Px11y7 { Px10y7, Px11y6, Px12y7, Px11y8 } CellNode (11 @ 7) (20)Px11y8 { Px10y8, Px11y9, Px11y7, Px12y8 } CellNode (11 @ 8) (20)Px11y9 { Px12y9, Px11y10, Px10y9, Px11y8 } CellNode (11 @ 9) (20)Px12y1 { Px13y1, Px11y1, Px12y2 } CellNode (12 @ 1) (20)Px12y10 { Px12y11, Px11y10, Px13y10, Px12y9 } CellNode (12 @ 10) (20)Px12y11 { Px12y12, Px13y11, Px11y11, Px12y10 } CellNode (12 @ 11) (20)Px12y12 { Px12y13, Px12y11, Px13y12, Px11y12 } CellNode (12 @ 12) (20)Px12y13 { Px13y13, Px12y14, Px11y13, Px12y12 } CellNode (12 @ 13) (20)Px12y14 { Px12y15, Px11y14, Px13y14, Px12y13 } CellNode (12 @ 14) (20)Px12y15 { Px12y14, Px13y15, Px11y15, Px12y16 } CellNode (12 @ 15) (20)Px12y16 { Px12y17, Px11y16, Px12y15, Px13y16 } CellNode (12 @ 16) (20)Px12y17 { Px12y18, Px11y17, Px13y17, Px12y16 } CellNode (12 @ 17) (20)Px12y18 { Px13y18, Px11y18, Px12y19, Px12y17 } CellNode (12 @ 18) (20)Px12y19 { Px12y18, Px12y20, Px13y19, Px11y19 } CellNode (12 @ 19) (20)Px12y2 { Px12y3, Px11y2, Px13y2, Px12y1 } CellNode (12 @ 2) (20)Px12y20 { Px11y20, Px12y19, Px12y21, Px13y20 } CellNode (12 @ 20) (20)Px12y21 { Px13y21, Px12y20, Px11y21, Px12y22 } CellNode (12 @ 21) (20)Px12y22 { Px12y23, Px13y22, Px11y22, Px12y21 } CellNode (12 @ 22) (20)Px12y23 { Px12y22, Px12y24, Px13y23, Px11y23 } CellNode (12 @ 23) (20)Px12y24 { Px13y24, Px12y23, Px11y24, Px12y25 } CellNode (12 @ 24) (20)Px12y25 { Px12y26, Px13y25, Px12y24, Px11y25 } CellNode (12 @ 25) (20)Px12y26 { Px12y27, Px13y26, Px11y26, Px12y25 } CellNode (12 @ 26) (20)Px12y27 { Px12y26, Px11y27, Px12y28, Px13y27 } CellNode (12 @ 27) (20)Px12y28 { Px13y28, Px12y27, Px11y28, Px12y29 } CellNode (12 @ 28) (20)Px12y29 { Px12y30, Px13y29, Px12y28, Px11y29 } CellNode (12 @ 29) (20)Px12y3 { Px13y3, Px12y4, Px11y3, Px12y2 } CellNode (12 @ 3) (20)Px12y30 { Px13y30, Px11y30, Px12y31, Px12y29 } CellNode (12 @ 30) (20)Px12y31 { Px12y30, Px12y32, Px11y31, Px13y31 } CellNode (12 @ 31) (20)Px12y32 { Px12y33, Px11y32, Px12y31, Px13y32 } CellNode (12 @ 32) (20)Px12y33 { Px13y33, Px12y34, Px11y33, Px12y32 } CellNode (12 @ 33) (20)Px12y34 { Px13y34, Px11y34, Px12y35, Px12y33 } CellNode (12 @ 34) (20)Px12y35 { Px12y36, Px12y34, Px13y35, Px11y35 } CellNode (12 @ 35) (20)Px12y36 { Px12y37, Px11y36, Px13y36, Px12y35 } CellNode (12 @ 36) (20)Px12y37 { Px13y37, Px11y37, Px12y38, Px12y36 } CellNode (12 @ 37) (20)Px12y38 { Px12y37, Px13y38, Px12y39, Px11y38 } CellNode (12 @ 38) (20)Px12y39 { Px11y39, Px12y38, Px12y40, Px13y39 } CellNode (12 @ 39) (20)Px12y4 { Px13y4, Px12y3, Px12y5, Px11y4 } CellNode (12 @ 4) (20)Px12y40 { Px13y40, Px11y40, Px12y39, Px12y41 } CellNode (12 @ 40) (20)Px12y41 { Px12y42, Px13y41, Px12y40, Px11y41 } CellNode (12 @ 41) (20)Px12y42 { Px12y43, Px13y42, Px12y41, Px11y42 } CellNode (12 @ 42) (20)Px12y43 { Px12y42, Px11y43, Px12y44, Px13y43 } CellNode (12 @ 43) (20)Px12y44 { Px13y44, Px11y44, Px12y43, Px12y45 } CellNode (12 @ 44) (20)Px12y45 { Px12y46, Px13y45, Px12y44, Px11y45 } CellNode (12 @ 45) (20)Px12y46 { Px11y46, Px12y47, Px13y46, Px12y45 } CellNode (12 @ 46) (20)Px12y47 { Px13y47, Px11y47, Px12y46, Px12y48 } CellNode (12 @ 47) (20)Px12y48 { Px12y49, Px13y48, Px11y48, Px12y47 } CellNode (12 @ 48) (20)Px12y49 { Px12y50, Px13y49, Px12y48, Px11y49 } CellNode (12 @ 49) (20)Px12y5 { Px12y6, Px11y5, Px13y5, Px12y4 } CellNode (12 @ 5) (20)Px12y50 { Px12y49, Px12y51, Px13y50, Px11y50 } CellNode (12 @ 50) (20)Px12y51 { Px12y50, Px11y51, Px12y52, Px13y51 } CellNode (12 @ 51) (20)Px12y52 { Px13y52, Px12y53, Px12y51, Px11y52 } CellNode (12 @ 52) (20)Px12y53 { Px12y54, Px13y53, Px12y52, Px11y53 } CellNode (12 @ 53) (20)Px12y54 { Px11y54, Px12y53, Px13y54, Px12y55 } CellNode (12 @ 54) (20)Px12y55 { Px12y56, Px11y55, Px12y54, Px13y55 } CellNode (12 @ 55) (20)Px12y56 { Px13y56, Px12y57, Px12y55, Px11y56 } CellNode (12 @ 56) (20)Px12y57 { Px11y57, Px13y57, Px12y58, Px12y56 } CellNode (12 @ 57) (20)Px12y58 { Px11y58, Px12y57, Px12y59, Px13y58 } CellNode (12 @ 58) (20)Px12y59 { Px13y59, Px11y59, Px12y58, Px12y60 } CellNode (12 @ 59) (20)Px12y6 { Px11y6, Px12y7, Px12y5, Px13y6 } CellNode (12 @ 6) (20)Px12y60 { Px12y61, Px11y60, Px13y60, Px12y59 } CellNode (12 @ 60) (20)Px12y61 { Px12y62, Px13y61, Px11y61, Px12y60 } CellNode (12 @ 61) (20)Px12y62 { Px12y61, Px12y63, Px13y62, Px11y62 } CellNode (12 @ 62) (20)Px12y63 { Px13y63, Px12y62, Px11y63, Px12y64 } CellNode (12 @ 63) (20)Px12y64 { Px12y65, Px13y64, Px11y64, Px12y63 } CellNode (12 @ 64) (20)Px12y65 { Px12y66, Px13y65, Px11y65, Px12y64 } CellNode (12 @ 65) (20)Px12y66 { Px11y66, Px12y65, Px12y67, Px13y66 } CellNode (12 @ 66) (20)Px12y67 { Px12y66, Px11y67, Px13y67 } CellNode (12 @ 67) (20)Px12y7 { Px12y6, Px13y7, Px11y7, Px12y8 } CellNode (12 @ 7) (20)Px12y8 { Px12y9, Px12y7, Px13y8, Px11y8 } CellNode (12 @ 8) (20)Px12y9 { Px11y9, Px12y8, Px13y9, Px12y10 } CellNode (12 @ 9) (20)Px13y1 { Px13y2, Px14y1, Px12y1 } CellNode (13 @ 1) (20)Px13y10 { Px13y11, Px13y9, Px14y10, Px12y10 } CellNode (13 @ 10) (20)Px13y11 { Px14y11, Px12y11, Px13y10, Px13y12 } CellNode (13 @ 11) (20)Px13y12 { Px13y13, Px14y12, Px12y12, Px13y11 } CellNode (13 @ 12) (20)Px13y13 { Px13y14, Px14y13, Px13y12, Px12y13 } CellNode (13 @ 13) (20)Px13y14 { Px13y13, Px12y14, Px13y15, Px14y14 } CellNode (13 @ 14) (20)Px13y15 { Px14y15, Px12y15, Px13y14, Px13y16 } CellNode (13 @ 15) (20)Px13y16 { Px13y17, Px14y16, Px12y16, Px13y15 } CellNode (13 @ 16) (20)Px13y17 { Px12y17, Px13y18, Px14y17, Px13y16 } CellNode (13 @ 17) (20)Px13y18 { Px14y18, Px12y18, Px13y17, Px13y19 } CellNode (13 @ 18) (20)Px13y19 { Px14y19, Px13y18, Px12y19, Px13y20 } CellNode (13 @ 19) (20)Px13y2 { Px12y2, Px13y1, Px14y2, Px13y3 } CellNode (13 @ 2) (20)Px13y20 { Px14y20, Px13y21, Px12y20, Px13y19 } CellNode (13 @ 20) (20)Px13y21 { Px14y21, Px12y21, Px13y22, Px13y20 } CellNode (13 @ 21) (20)Px13y22 { Px14y22, Px13y21, Px13y23, Px12y22 } CellNode (13 @ 22) (20)Px13y23 { Px14y23, Px12y23, Px13y24, Px13y22 } CellNode (13 @ 23) (20)Px13y24 { Px13y25, Px12y24, Px14y24, Px13y23 } CellNode (13 @ 24) (20)Px13y25 { Px13y24, Px14y25, Px12y25, Px13y26 } CellNode (13 @ 25) (20)Px13y26 { Px12y26, Px14y26, Px13y25, Px13y27 } CellNode (13 @ 26) (20)Px13y27 { Px13y28, Px12y27, Px14y27, Px13y26 } CellNode (13 @ 27) (20)Px13y28 { Px14y28, Px12y28, Px13y29, Px13y27 } CellNode (13 @ 28) (20)Px13y29 { Px13y28, Px13y30, Px14y29, Px12y29 } CellNode (13 @ 29) (20)Px13y3 { Px12y3, Px13y4, Px13y2, Px14y3 } CellNode (13 @ 3) (20)Px13y30 { Px12y30, Px13y29, Px13y31, Px14y30 } CellNode (13 @ 30) (20)Px13y31 { Px14y31, Px13y30, Px12y31, Px13y32 } CellNode (13 @ 31) (20)Px13y32 { Px13y33, Px14y32, Px12y32, Px13y31 } CellNode (13 @ 32) (20)Px13y33 { Px13y32, Px13y34, Px14y33, Px12y33 } CellNode (13 @ 33) (20)Px13y34 { Px14y34, Px13y33, Px12y34, Px13y35 } CellNode (13 @ 34) (20)Px13y35 { Px13y36, Px14y35, Px13y34, Px12y35 } CellNode (13 @ 35) (20)Px13y36 { Px13y37, Px14y36, Px13y35, Px12y36 } CellNode (13 @ 36) (20)Px13y37 { Px12y37, Px13y36, Px13y38, Px14y37 } CellNode (13 @ 37) (20)Px13y38 { Px14y38, Px13y37, Px12y38, Px13y39 } CellNode (13 @ 38) (20)Px13y39 { Px13y40, Px14y39, Px13y38, Px12y39 } CellNode (13 @ 39) (20)Px13y4 { Px13y3, Px12y4, Px13y5, Px14y4 } CellNode (13 @ 4) (20)Px13y40 { Px13y41, Px14y40, Px12y40, Px13y39 } CellNode (13 @ 40) (20)Px13y41 { Px13y40, Px13y42, Px12y41, Px14y41 } CellNode (13 @ 41) (20)Px13y42 { Px12y42, Px13y43, Px13y41, Px14y42 } CellNode (13 @ 42) (20)Px13y43 { Px14y43, Px12y43, Px13y44, Px13y42 } CellNode (13 @ 43) (20)Px13y44 { Px14y44, Px12y44, Px13y45, Px13y43 } CellNode (13 @ 44) (20)Px13y45 { Px13y46, Px13y44, Px14y45, Px12y45 } CellNode (13 @ 45) (20)Px13y46 { Px14y46, Px12y46, Px13y47, Px13y45 } CellNode (13 @ 46) (20)Px13y47 { Px13y48, Px12y47, Px14y47, Px13y46 } CellNode (13 @ 47) (20)Px13y48 { Px13y47, Px14y48, Px13y49, Px12y48 } CellNode (13 @ 48) (20)Px13y49 { Px12y49, Px13y48, Px13y50, Px14y49 } CellNode (13 @ 49) (20)Px13y5 { Px13y4, Px14y5, Px12y5, Px13y6 } CellNode (13 @ 5) (20)Px13y50 { Px14y50, Px12y50, Px13y49, Px13y51 } CellNode (13 @ 50) (20)Px13y51 { Px13y52, Px14y51, Px12y51, Px13y50 } CellNode (13 @ 51) (20)Px13y52 { Px13y53, Px14y52, Px12y52, Px13y51 } CellNode (13 @ 52) (20)Px13y53 { Px13y52, Px12y53, Px13y54, Px14y53 } CellNode (13 @ 53) (20)Px13y54 { Px14y54, Px12y54, Px13y53, Px13y55 } CellNode (13 @ 54) (20)Px13y55 { Px13y56, Px14y55, Px13y54, Px12y55 } CellNode (13 @ 55) (20)Px13y56 { Px12y56, Px13y57, Px14y56, Px13y55 } CellNode (13 @ 56) (20)Px13y57 { Px14y57, Px13y56, Px12y57, Px13y58 } CellNode (13 @ 57) (20)Px13y58 { Px13y59, Px14y58, Px13y57, Px12y58 } CellNode (13 @ 58) (20)Px13y59 { Px13y60, Px14y59, Px12y59, Px13y58 } CellNode (13 @ 59) (20)Px13y6 { Px12y6, Px13y7, Px13y5, Px14y6 } CellNode (13 @ 6) (20)Px13y60 { Px13y59, Px14y60, Px13y61, Px12y60 } CellNode (13 @ 60) (20)Px13y61 { Px13y60, Px12y61, Px13y62, Px14y61 } CellNode (13 @ 61) (20)Px13y62 { Px13y63, Px12y62, Px14y62, Px13y61 } CellNode (13 @ 62) (20)Px13y63 { Px14y63, Px12y63, Px13y64, Px13y62 } CellNode (13 @ 63) (20)Px13y64 { Px13y63, Px14y64, Px12y64, Px13y65 } CellNode (13 @ 64) (20)Px13y65 { Px14y65, Px12y65, Px13y64, Px13y66 } CellNode (13 @ 65) (20)Px13y66 { Px14y66, Px13y67, Px12y66, Px13y65 } CellNode (13 @ 66) (20)Px13y67 { Px14y67, Px12y67, Px13y66 } CellNode (13 @ 67) (20)Px13y7 { Px12y7, Px13y8, Px14y7, Px13y6 } CellNode (13 @ 7) (20)Px13y8 { Px14y8, Px13y7, Px12y8, Px13y9 } CellNode (13 @ 8) (20)Px13y9 { Px13y10, Px14y9, Px13y8, Px12y9 } CellNode (13 @ 9) (20)Px14y1 { Px13y1, Px14y2, Px15y1 } CellNode (14 @ 1) (20)Px14y10 { Px14y11, Px15y10, Px14y9, Px13y10 } CellNode (14 @ 10) (20)Px14y11 { Px15y11, Px14y12, Px13y11, Px14y10 } CellNode (14 @ 11) (20)Px14y12 { Px14y11, Px15y12, Px13y12, Px14y13 } CellNode (14 @ 12) (20)Px14y13 { Px13y13, Px15y13, Px14y12, Px14y14 } CellNode (14 @ 13) (20)Px14y14 { Px14y15, Px13y14, Px15y14, Px14y13 } CellNode (14 @ 14) (20)Px14y15 { Px15y15, Px13y15, Px14y16, Px14y14 } CellNode (14 @ 15) (20)Px14y16 { Px14y17, Px14y15, Px15y16, Px13y16 } CellNode (14 @ 16) (20)Px14y17 { Px15y17, Px14y18, Px13y17, Px14y16 } CellNode (14 @ 17) (20)Px14y18 { Px15y18, Px13y18, Px14y19, Px14y17 } CellNode (14 @ 18) (20)Px14y19 { Px14y18, Px14y20, Px15y19, Px13y19 } CellNode (14 @ 19) (20)Px14y2 { Px15y2, Px14y1, Px13y2, Px14y3 } CellNode (14 @ 2) (20)Px14y20 { Px14y19, Px14y21, Px15y20, Px13y20 } CellNode (14 @ 20) (20)Px14y21 { Px15y21, Px14y20, Px13y21, Px14y22 } CellNode (14 @ 21) (20)Px14y22 { Px14y23, Px15y22, Px13y22, Px14y21 } CellNode (14 @ 22) (20)Px14y23 { Px14y24, Px15y23, Px13y23, Px14y22 } CellNode (14 @ 23) (20)Px14y24 { Px14y23, Px13y24, Px14y25, Px15y24 } CellNode (14 @ 24) (20)Px14y25 { Px15y25, Px13y25, Px14y24, Px14y26 } CellNode (14 @ 25) (20)Px14y26 { Px15y26, Px14y27, Px14y25, Px13y26 } CellNode (14 @ 26) (20)Px14y27 { Px14y26, Px15y27, Px14y28, Px13y27 } CellNode (14 @ 27) (20)Px14y28 { Px13y28, Px14y27, Px15y28, Px14y29 } CellNode (14 @ 28) (20)Px14y29 { Px15y29, Px13y29, Px14y28, Px14y30 } CellNode (14 @ 29) (20)Px14y3 { Px14y4, Px14y2, Px15y3, Px13y3 } CellNode (14 @ 3) (20)Px14y30 { Px15y30, Px14y31, Px13y30, Px14y29 } CellNode (14 @ 30) (20)Px14y31 { Px14y32, Px13y31, Px15y31, Px14y30 } CellNode (14 @ 31) (20)Px14y32 { Px15y32, Px14y31, Px14y33, Px13y32 } CellNode (14 @ 32) (20)Px14y33 { Px14y34, Px13y33, Px15y33, Px14y32 } CellNode (14 @ 33) (20)Px14y34 { Px14y35, Px13y34, Px15y34, Px14y33 } CellNode (14 @ 34) (20)Px14y35 { Px14y34, Px15y35, Px13y35, Px14y36 } CellNode (14 @ 35) (20)Px14y36 { Px15y36, Px13y36, Px14y35, Px14y37 } CellNode (14 @ 36) (20)Px14y37 { Px15y37, Px13y37, Px14y38, Px14y36 } CellNode (14 @ 37) (20)Px14y38 { Px15y38, Px13y38, Px14y39, Px14y37 } CellNode (14 @ 38) (20)Px14y39 { Px14y38, Px14y40, Px15y39, Px13y39 } CellNode (14 @ 39) (20)Px14y4 { Px13y4, Px14y5, Px14y3, Px15y4 } CellNode (14 @ 4) (20)Px14y40 { Px13y40, Px14y39, Px14y41, Px15y40 } CellNode (14 @ 40) (20)Px14y41 { Px15y41, Px14y40, Px13y41, Px14y42 } CellNode (14 @ 41) (20)Px14y42 { Px14y43, Px15y42, Px13y42, Px14y41 } CellNode (14 @ 42) (20)Px14y43 { Px14y42, Px14y44, Px15y43, Px13y43 } CellNode (14 @ 43) (20)Px14y44 { Px15y44, Px14y43, Px13y44, Px14y45 } CellNode (14 @ 44) (20)Px14y45 { Px14y46, Px15y45, Px14y44, Px13y45 } CellNode (14 @ 45) (20)Px14y46 { Px14y47, Px15y46, Px14y45, Px13y46 } CellNode (14 @ 46) (20)Px14y47 { Px13y47, Px14y46, Px14y48, Px15y47 } CellNode (14 @ 47) (20)Px14y48 { Px15y48, Px13y48, Px14y47, Px14y49 } CellNode (14 @ 48) (20)Px14y49 { Px14y50, Px15y49, Px14y48, Px13y49 } CellNode (14 @ 49) (20)Px14y5 { Px15y5, Px13y5, Px14y6, Px14y4 } CellNode (14 @ 5) (20)Px14y50 { Px14y51, Px13y50, Px15y50, Px14y49 } CellNode (14 @ 50) (20)Px14y51 { Px14y50, Px14y52, Px13y51, Px15y51 } CellNode (14 @ 51) (20)Px14y52 { Px13y52, Px14y53, Px14y51, Px15y52 } CellNode (14 @ 52) (20)Px14y53 { Px14y54, Px15y53, Px13y53, Px14y52 } CellNode (14 @ 53) (20)Px14y54 { Px15y54, Px13y54, Px14y55, Px14y53 } CellNode (14 @ 54) (20)Px14y55 { Px14y56, Px14y54, Px15y55, Px13y55 } CellNode (14 @ 55) (20)Px14y56 { Px15y56, Px13y56, Px14y57, Px14y55 } CellNode (14 @ 56) (20)Px14y57 { Px14y58, Px13y57, Px15y57, Px14y56 } CellNode (14 @ 57) (20)Px14y58 { Px14y57, Px15y58, Px14y59, Px13y58 } CellNode (14 @ 58) (20)Px14y59 { Px13y59, Px14y58, Px14y60, Px15y59 } CellNode (14 @ 59) (20)Px14y6 { Px15y6, Px14y5, Px14y7, Px13y6 } CellNode (14 @ 6) (20)Px14y60 { Px15y60, Px13y60, Px14y59, Px14y61 } CellNode (14 @ 60) (20)Px14y61 { Px14y62, Px15y61, Px13y61, Px14y60 } CellNode (14 @ 61) (20)Px14y62 { Px14y63, Px15y62, Px13y62, Px14y61 } CellNode (14 @ 62) (20)Px14y63 { Px13y63, Px14y62, Px14y64, Px15y63 } CellNode (14 @ 63) (20)Px14y64 { Px15y64, Px14y63, Px13y64, Px14y65 } CellNode (14 @ 64) (20)Px14y65 { Px14y66, Px15y65, Px14y64, Px13y65 } CellNode (14 @ 65) (20)Px14y66 { Px14y65, Px14y67, Px15y66, Px13y66 } CellNode (14 @ 66) (20)Px14y67 { Px15y67, Px14y66, Px13y67 } CellNode (14 @ 67) (20)Px14y7 { Px14y8, Px13y7, Px14y6, Px15y7 } CellNode (14 @ 7) (20)Px14y8 { Px13y8, Px14y9, Px14y7, Px15y8 } CellNode (14 @ 8) (20)Px14y9 { Px14y8, Px15y9, Px13y9, Px14y10 } CellNode (14 @ 9) (20)Px15y1 { Px14y1, Px15y2, Px16y1 } CellNode (15 @ 1) (20)Px15y10 { Px15y9, Px16y10, Px15y11, Px14y10 } CellNode (15 @ 10) (20)Px15y11 { Px14y11, Px15y10, Px16y11, Px15y12 } CellNode (15 @ 11) (20)Px15y12 { Px15y13, Px15y11, Px14y12, Px16y12 } CellNode (15 @ 12) (20)Px15y13 { Px16y13, Px15y14, Px15y12, Px14y13 } CellNode (15 @ 13) (20)Px15y14 { Px15y13, Px16y14, Px15y15, Px14y14 } CellNode (15 @ 14) (20)Px15y15 { Px14y15, Px15y14, Px15y16, Px16y15 } CellNode (15 @ 15) (20)Px15y16 { Px16y16, Px15y17, Px15y15, Px14y16 } CellNode (15 @ 16) (20)Px15y17 { Px15y18, Px16y17, Px15y16, Px14y17 } CellNode (15 @ 17) (20)Px15y18 { Px14y18, Px15y17, Px15y19, Px16y18 } CellNode (15 @ 18) (20)Px15y19 { Px15y18, Px14y19, Px15y20, Px16y19 } CellNode (15 @ 19) (20)Px15y2 { Px16y2, Px15y3, Px14y2, Px15y1 } CellNode (15 @ 2) (20)Px15y20 { Px15y21, Px14y20, Px16y20, Px15y19 } CellNode (15 @ 20) (20)Px15y21 { Px16y21, Px14y21, Px15y22, Px15y20 } CellNode (15 @ 21) (20)Px15y22 { Px15y21, Px16y22, Px15y23, Px14y22 } CellNode (15 @ 22) (20)Px15y23 { Px14y23, Px15y24, Px15y22, Px16y23 } CellNode (15 @ 23) (20)Px15y24 { Px16y24, Px15y25, Px14y24, Px15y23 } CellNode (15 @ 24) (20)Px15y25 { Px15y26, Px16y25, Px14y25, Px15y24 } CellNode (15 @ 25) (20)Px15y26 { Px15y25, Px15y27, Px16y26, Px14y26 } CellNode (15 @ 26) (20)Px15y27 { Px16y27, Px15y26, Px14y27, Px15y28 } CellNode (15 @ 27) (20)Px15y28 { Px15y29, Px16y28, Px15y27, Px14y28 } CellNode (15 @ 28) (20)Px15y29 { Px15y30, Px16y29, Px15y28, Px14y29 } CellNode (15 @ 29) (20)Px15y3 { Px15y2, Px16y3, Px15y4, Px14y3 } CellNode (15 @ 3) (20)Px15y30 { Px15y29, Px16y30, Px15y31, Px14y30 } CellNode (15 @ 30) (20)Px15y31 { Px15y30, Px14y31, Px16y31, Px15y32 } CellNode (15 @ 31) (20)Px15y32 { Px16y32, Px15y33, Px14y32, Px15y31 } CellNode (15 @ 32) (20)Px15y33 { Px16y33, Px15y34, Px14y33, Px15y32 } CellNode (15 @ 33) (20)Px15y34 { Px14y34, Px15y33, Px16y34, Px15y35 } CellNode (15 @ 34) (20)Px15y35 { Px16y35, Px14y35, Px15y34, Px15y36 } CellNode (15 @ 35) (20)Px15y36 { Px15y37, Px16y36, Px15y35, Px14y36 } CellNode (15 @ 36) (20)Px15y37 { Px15y36, Px15y38, Px16y37, Px14y37 } CellNode (15 @ 37) (20)Px15y38 { Px15y37, Px14y38, Px16y38, Px15y39 } CellNode (15 @ 38) (20)Px15y39 { Px16y39, Px15y38, Px14y39, Px15y40 } CellNode (15 @ 39) (20)Px15y4 { Px15y5, Px15y3, Px16y4, Px14y4 } CellNode (15 @ 4) (20)Px15y40 { Px16y40, Px14y40, Px15y41, Px15y39 } CellNode (15 @ 40) (20)Px15y41 { Px16y41, Px14y41, Px15y42, Px15y40 } CellNode (15 @ 41) (20)Px15y42 { Px15y43, Px15y41, Px16y42, Px14y42 } CellNode (15 @ 42) (20)Px15y43 { Px15y44, Px14y43, Px16y43, Px15y42 } CellNode (15 @ 43) (20)Px15y44 { Px15y45, Px14y44, Px16y44, Px15y43 } CellNode (15 @ 44) (20)Px15y45 { Px15y44, Px16y45, Px14y45, Px15y46 } CellNode (15 @ 45) (20)Px15y46 { Px15y47, Px14y46, Px15y45, Px16y46 } CellNode (15 @ 46) (20)Px15y47 { Px15y48, Px16y47, Px14y47, Px15y46 } CellNode (15 @ 47) (20)Px15y48 { Px15y49, Px14y48, Px16y48, Px15y47 } CellNode (15 @ 48) (20)Px15y49 { Px15y48, Px15y50, Px16y49, Px14y49 } CellNode (15 @ 49) (20)Px15y5 { Px14y5, Px15y6, Px16y5, Px15y4 } CellNode (15 @ 5) (20)Px15y50 { Px14y50, Px15y49, Px15y51, Px16y50 } CellNode (15 @ 50) (20)Px15y51 { Px16y51, Px14y51, Px15y50, Px15y52 } CellNode (15 @ 51) (20)Px15y52 { Px15y53, Px16y52, Px14y52, Px15y51 } CellNode (15 @ 52) (20)Px15y53 { Px14y53, Px15y54, Px16y53, Px15y52 } CellNode (15 @ 53) (20)Px15y54 { Px16y54, Px14y54, Px15y53, Px15y55 } CellNode (15 @ 54) (20)Px15y55 { Px15y56, Px16y55, Px15y54, Px14y55 } CellNode (15 @ 55) (20)Px15y56 { Px15y57, Px16y56, Px14y56, Px15y55 } CellNode (15 @ 56) (20)Px15y57 { Px15y56, Px14y57, Px15y58, Px16y57 } CellNode (15 @ 57) (20)Px15y58 { Px16y58, Px14y58, Px15y57, Px15y59 } CellNode (15 @ 58) (20)Px15y59 { Px15y60, Px16y59, Px15y58, Px14y59 } CellNode (15 @ 59) (20)Px15y6 { Px15y5, Px14y6, Px15y7, Px16y6 } CellNode (15 @ 6) (20)Px15y60 { Px15y61, Px16y60, Px14y60, Px15y59 } CellNode (15 @ 60) (20)Px15y61 { Px15y60, Px15y62, Px16y61, Px14y61 } CellNode (15 @ 61) (20)Px15y62 { Px14y62, Px16y62, Px15y61, Px15y63 } CellNode (15 @ 62) (20)Px15y63 { Px16y63, Px15y64, Px14y63, Px15y62 } CellNode (15 @ 63) (20)Px15y64 { Px15y65, Px14y64, Px16y64, Px15y63 } CellNode (15 @ 64) (20)Px15y65 { Px15y66, Px15y64, Px16y65, Px14y65 } CellNode (15 @ 65) (20)Px15y66 { Px15y67, Px16y66, Px14y66, Px15y65 } CellNode (15 @ 66) (20)Px15y67 { Px16y67, Px15y66, Px14y67 } CellNode (15 @ 67) (20)Px15y7 { Px16y7, Px15y6, Px14y7, Px15y8 } CellNode (15 @ 7) (20)Px15y8 { Px14y8, Px15y9, Px15y7, Px16y8 } CellNode (15 @ 8) (20)Px15y9 { Px15y10, Px14y9, Px15y8, Px16y9 } CellNode (15 @ 9) (20)Px16y1 { Px17y1, Px15y1, Px16y2 } CellNode (16 @ 1) (20)Px16y10 { Px15y10, Px16y11, Px16y9, Px17y10 } CellNode (16 @ 10) (20)Px16y11 { Px17y11, Px16y10, Px15y11, Px16y12 } CellNode (16 @ 11) (20)Px16y12 { Px16y13, Px17y12, Px15y12, Px16y11 } CellNode (16 @ 12) (20)Px16y13 { Px15y13, Px16y14, Px17y13, Px16y12 } CellNode (16 @ 13) (20)Px16y14 { Px17y14, Px16y13, Px15y14, Px16y15 } CellNode (16 @ 14) (20)Px16y15 { Px16y16, Px17y15, Px15y15, Px16y14 } CellNode (16 @ 15) (20)Px16y16 { Px16y17, Px17y16, Px15y16, Px16y15 } CellNode (16 @ 16) (20)Px16y17 { Px16y16, Px15y17, Px16y18, Px17y17 } CellNode (16 @ 17) (20)Px16y18 { Px17y18, Px15y18, Px16y17, Px16y19 } CellNode (16 @ 18) (20)Px16y19 { Px16y20, Px17y19, Px15y19, Px16y18 } CellNode (16 @ 19) (20)Px16y2 { Px15y2, Px16y3, Px17y2, Px16y1 } CellNode (16 @ 2) (20)Px16y20 { Px17y20, Px16y21, Px15y20, Px16y19 } CellNode (16 @ 20) (20)Px16y21 { Px15y21, Px16y20, Px17y21, Px16y22 } CellNode (16 @ 21) (20)Px16y22 { Px16y23, Px16y21, Px15y22, Px17y22 } CellNode (16 @ 22) (20)Px16y23 { Px17y23, Px16y24, Px16y22, Px15y23 } CellNode (16 @ 23) (20)Px16y24 { Px15y24, Px17y24, Px16y25, Px16y23 } CellNode (16 @ 24) (20)Px16y25 { Px16y24, Px15y25, Px17y25, Px16y26 } CellNode (16 @ 25) (20)Px16y26 { Px17y26, Px15y26, Px16y27, Px16y25 } CellNode (16 @ 26) (20)Px16y27 { Px16y28, Px15y27, Px17y27, Px16y26 } CellNode (16 @ 27) (20)Px16y28 { Px16y27, Px16y29, Px15y28, Px17y28 } CellNode (16 @ 28) (20)Px16y29 { Px15y29, Px16y28, Px16y30, Px17y29 } CellNode (16 @ 29) (20)Px16y3 { Px16y2, Px17y3, Px15y3, Px16y4 } CellNode (16 @ 3) (20)Px16y30 { Px17y30, Px15y30, Px16y29, Px16y31 } CellNode (16 @ 30) (20)Px16y31 { Px16y32, Px17y31, Px16y30, Px15y31 } CellNode (16 @ 31) (20)Px16y32 { Px16y33, Px17y32, Px16y31, Px15y32 } CellNode (16 @ 32) (20)Px16y33 { Px16y32, Px15y33, Px16y34, Px17y33 } CellNode (16 @ 33) (20)Px16y34 { Px17y34, Px16y33, Px15y34, Px16y35 } CellNode (16 @ 34) (20)Px16y35 { Px16y36, Px17y35, Px16y34, Px15y35 } CellNode (16 @ 35) (20)Px16y36 { Px16y35, Px16y37, Px17y36, Px15y36 } CellNode (16 @ 36) (20)Px16y37 { Px17y37, Px15y37, Px16y36, Px16y38 } CellNode (16 @ 37) (20)Px16y38 { Px16y39, Px17y38, Px15y38, Px16y37 } CellNode (16 @ 38) (20)Px16y39 { Px16y40, Px17y39, Px15y39, Px16y38 } CellNode (16 @ 39) (20)Px16y4 { Px16y3, Px17y4, Px16y5, Px15y4 } CellNode (16 @ 4) (20)Px16y40 { Px16y39, Px17y40, Px16y41, Px15y40 } CellNode (16 @ 40) (20)Px16y41 { Px16y40, Px15y41, Px17y41, Px16y42 } CellNode (16 @ 41) (20)Px16y42 { Px17y42, Px16y43, Px16y41, Px15y42 } CellNode (16 @ 42) (20)Px16y43 { Px17y43, Px16y44, Px16y42, Px15y43 } CellNode (16 @ 43) (20)Px16y44 { Px15y44, Px16y43, Px16y45, Px17y44 } CellNode (16 @ 44) (20)Px16y45 { Px17y45, Px15y45, Px16y44, Px16y46 } CellNode (16 @ 45) (20)Px16y46 { Px17y46, Px16y47, Px16y45, Px15y46 } CellNode (16 @ 46) (20)Px16y47 { Px15y47, Px16y48, Px17y47, Px16y46 } CellNode (16 @ 47) (20)Px16y48 { Px15y48, Px16y47, Px16y49, Px17y48 } CellNode (16 @ 48) (20)Px16y49 { Px17y49, Px15y49, Px16y48, Px16y50 } CellNode (16 @ 49) (20)Px16y5 { Px15y5, Px16y4, Px17y5, Px16y6 } CellNode (16 @ 5) (20)Px16y50 { Px16y51, Px17y50, Px15y50, Px16y49 } CellNode (16 @ 50) (20)Px16y51 { Px17y51, Px16y52, Px15y51, Px16y50 } CellNode (16 @ 51) (20)Px16y52 { Px16y53, Px16y51, Px17y52, Px15y52 } CellNode (16 @ 52) (20)Px16y53 { Px17y53, Px15y53, Px16y54, Px16y52 } CellNode (16 @ 53) (20)Px16y54 { Px16y55, Px15y54, Px17y54, Px16y53 } CellNode (16 @ 54) (20)Px16y55 { Px16y54, Px16y56, Px15y55, Px17y55 } CellNode (16 @ 55) (20)Px16y56 { Px16y57, Px15y56, Px16y55, Px17y56 } CellNode (16 @ 56) (20)Px16y57 { Px16y58, Px15y57, Px17y57, Px16y56 } CellNode (16 @ 57) (20)Px16y58 { Px17y58, Px15y58, Px16y59, Px16y57 } CellNode (16 @ 58) (20)Px16y59 { Px16y58, Px16y60, Px17y59, Px15y59 } CellNode (16 @ 59) (20)Px16y6 { Px15y6, Px16y7, Px16y5, Px17y6 } CellNode (16 @ 6) (20)Px16y60 { Px15y60, Px16y59, Px16y61, Px17y60 } CellNode (16 @ 60) (20)Px16y61 { Px17y61, Px16y60, Px15y61, Px16y62 } CellNode (16 @ 61) (20)Px16y62 { Px16y63, Px17y62, Px15y62, Px16y61 } CellNode (16 @ 62) (20)Px16y63 { Px16y62, Px16y64, Px17y63, Px15y63 } CellNode (16 @ 63) (20)Px16y64 { Px17y64, Px16y63, Px15y64, Px16y65 } CellNode (16 @ 64) (20)Px16y65 { Px16y66, Px17y65, Px15y65, Px16y64 } CellNode (16 @ 65) (20)Px16y66 { Px16y67, Px17y66, Px16y65, Px15y66 } CellNode (16 @ 66) (20)Px16y67 { Px15y67, Px16y66, Px17y67 } CellNode (16 @ 67) (20)Px16y7 { Px17y7, Px15y7, Px16y8, Px16y6 } CellNode (16 @ 7) (20)Px16y8 { Px16y7, Px17y8, Px15y8, Px16y9 } CellNode (16 @ 8) (20)Px16y9 { Px15y9, Px16y10, Px16y8, Px17y9 } CellNode (16 @ 9) (20)Px17y1 { Px17y2, Px18y1, Px16y1 } CellNode (17 @ 1) (20)Px17y10 { Px18y10, Px16y10, Px17y11, Px17y9 } CellNode (17 @ 10) (20)Px17y11 { Px17y12, Px16y11, Px18y11, Px17y10 } CellNode (17 @ 11) (20)Px17y12 { Px18y12, Px17y11, Px17y13, Px16y12 } CellNode (17 @ 12) (20)Px17y13 { Px17y14, Px16y13, Px18y13, Px17y12 } CellNode (17 @ 13) (20)Px17y14 { Px18y14, Px17y15, Px16y14, Px17y13 } CellNode (17 @ 14) (20)Px17y15 { Px17y14, Px18y15, Px16y15, Px17y16 } CellNode (17 @ 15) (20)Px17y16 { Px16y16, Px17y17, Px17y15, Px18y16 } CellNode (17 @ 16) (20)Px17y17 { Px18y17, Px16y17, Px17y18, Px17y16 } CellNode (17 @ 17) (20)Px17y18 { Px18y18, Px16y18, Px17y19, Px17y17 } CellNode (17 @ 18) (20)Px17y19 { Px17y18, Px17y20, Px18y19, Px16y19 } CellNode (17 @ 19) (20)Px17y2 { Px16y2, Px17y3, Px17y1, Px18y2 } CellNode (17 @ 2) (20)Px17y20 { Px16y20, Px17y19, Px17y21, Px18y20 } CellNode (17 @ 20) (20)Px17y21 { Px18y21, Px16y21, Px17y20, Px17y22 } CellNode (17 @ 21) (20)Px17y22 { Px17y23, Px18y22, Px16y22, Px17y21 } CellNode (17 @ 22) (20)Px17y23 { Px16y23, Px17y24, Px18y23, Px17y22 } CellNode (17 @ 23) (20)Px17y24 { Px18y24, Px17y23, Px16y24, Px17y25 } CellNode (17 @ 24) (20)Px17y25 { Px17y26, Px18y25, Px16y25, Px17y24 } CellNode (17 @ 25) (20)Px17y26 { Px17y27, Px18y26, Px17y25, Px16y26 } CellNode (17 @ 26) (20)Px17y27 { Px17y26, Px16y27, Px17y28, Px18y27 } CellNode (17 @ 27) (20)Px17y28 { Px18y28, Px16y28, Px17y27, Px17y29 } CellNode (17 @ 28) (20)Px17y29 { Px17y30, Px18y29, Px16y29, Px17y28 } CellNode (17 @ 29) (20)Px17y3 { Px16y3, Px17y4, Px18y3, Px17y2 } CellNode (17 @ 3) (20)Px17y30 { Px17y31, Px16y30, Px18y30, Px17y29 } CellNode (17 @ 30) (20)Px17y31 { Px17y30, Px17y32, Px16y31, Px18y31 } CellNode (17 @ 31) (20)Px17y32 { Px16y32, Px18y32, Px17y31, Px17y33 } CellNode (17 @ 32) (20)Px17y33 { Px18y33, Px16y33, Px17y34, Px17y32 } CellNode (17 @ 33) (20)Px17y34 { Px18y34, Px16y34, Px17y35, Px17y33 } CellNode (17 @ 34) (20)Px17y35 { Px17y36, Px17y34, Px18y35, Px16y35 } CellNode (17 @ 35) (20)Px17y36 { Px18y36, Px16y36, Px17y37, Px17y35 } CellNode (17 @ 36) (20)Px17y37 { Px17y38, Px18y37, Px16y37, Px17y36 } CellNode (17 @ 37) (20)Px17y38 { Px17y37, Px17y39, Px16y38, Px18y38 } CellNode (17 @ 38) (20)Px17y39 { Px16y39, Px17y38, Px17y40, Px18y39 } CellNode (17 @ 39) (20)Px17y4 { Px17y3, Px18y4, Px16y4, Px17y5 } CellNode (17 @ 4) (20)Px17y40 { Px18y40, Px16y40, Px17y39, Px17y41 } CellNode (17 @ 40) (20)Px17y41 { Px17y42, Px18y41, Px17y40, Px16y41 } CellNode (17 @ 41) (20)Px17y42 { Px17y43, Px18y42, Px17y41, Px16y42 } CellNode (17 @ 42) (20)Px17y43 { Px17y42, Px16y43, Px17y44, Px18y43 } CellNode (17 @ 43) (20)Px17y44 { Px18y44, Px17y43, Px16y44, Px17y45 } CellNode (17 @ 44) (20)Px17y45 { Px17y46, Px18y45, Px16y45, Px17y44 } CellNode (17 @ 45) (20)Px17y46 { Px17y45, Px17y47, Px18y46, Px16y46 } CellNode (17 @ 46) (20)Px17y47 { Px18y47, Px17y46, Px16y47, Px17y48 } CellNode (17 @ 47) (20)Px17y48 { Px17y49, Px18y48, Px17y47, Px16y48 } CellNode (17 @ 48) (20)Px17y49 { Px17y50, Px18y49, Px16y49, Px17y48 } CellNode (17 @ 49) (20)Px17y5 { Px17y4, Px18y5, Px16y5, Px17y6 } CellNode (17 @ 5) (20)Px17y50 { Px17y49, Px17y51, Px18y50, Px16y50 } CellNode (17 @ 50) (20)Px17y51 { Px16y51, Px17y50, Px17y52, Px18y51 } CellNode (17 @ 51) (20)Px17y52 { Px18y52, Px17y53, Px17y51, Px16y52 } CellNode (17 @ 52) (20)Px17y53 { Px17y54, Px18y53, Px17y52, Px16y53 } CellNode (17 @ 53) (20)Px17y54 { Px17y53, Px16y54, Px18y54, Px17y55 } CellNode (17 @ 54) (20)Px17y55 { Px18y55, Px16y55, Px17y54, Px17y56 } CellNode (17 @ 55) (20)Px17y56 { Px17y57, Px18y56, Px16y56, Px17y55 } CellNode (17 @ 56) (20)Px17y57 { Px16y57, Px17y58, Px18y57, Px17y56 } CellNode (17 @ 57) (20)Px17y58 { Px16y58, Px17y57, Px17y59, Px18y58 } CellNode (17 @ 58) (20)Px17y59 { Px18y59, Px17y58, Px16y59, Px17y60 } CellNode (17 @ 59) (20)Px17y6 { Px17y7, Px17y5, Px18y6, Px16y6 } CellNode (17 @ 6) (20)Px17y60 { Px18y60, Px17y61, Px16y60, Px17y59 } CellNode (17 @ 60) (20)Px17y61 { Px18y61, Px16y61, Px17y62, Px17y60 } CellNode (17 @ 61) (20)Px17y62 { Px16y62, Px17y61, Px18y62, Px17y63 } CellNode (17 @ 62) (20)Px17y63 { Px18y63, Px16y63, Px17y64, Px17y62 } CellNode (17 @ 63) (20)Px17y64 { Px18y64, Px16y64, Px17y65, Px17y63 } CellNode (17 @ 64) (20)Px17y65 { Px17y64, Px17y66, Px18y65, Px16y65 } CellNode (17 @ 65) (20)Px17y66 { Px18y66, Px16y66, Px17y65, Px17y67 } CellNode (17 @ 66) (20)Px17y67 { Px16y67, Px17y66, Px18y67 } CellNode (17 @ 67) (20)Px17y7 { Px17y6, Px16y7, Px17y8, Px18y7 } CellNode (17 @ 7) (20)Px17y8 { Px18y8, Px17y7, Px16y8, Px17y9 } CellNode (17 @ 8) (20)Px17y9 { Px18y9, Px17y8, Px16y9, Px17y10 } CellNode (17 @ 9) (20)Px18y1 { Px17y1, Px18y2, Px19y1 } CellNode (18 @ 1) (20)Px18y10 { Px18y9, Px18y11, Px19y10, Px17y10 } CellNode (18 @ 10) (20)Px18y11 { Px19y11, Px18y10, Px17y11, Px18y12 } CellNode (18 @ 11) (20)Px18y12 { Px18y13, Px19y12, Px17y12, Px18y11 } CellNode (18 @ 12) (20)Px18y13 { Px18y14, Px19y13, Px17y13, Px18y12 } CellNode (18 @ 13) (20)Px18y14 { Px17y14, Px18y13, Px18y15, Px19y14 } CellNode (18 @ 14) (20)Px18y15 { Px19y15, Px18y14, Px17y15, Px18y16 } CellNode (18 @ 15) (20)Px18y16 { Px18y17, Px19y16, Px18y15, Px17y16 } CellNode (18 @ 16) (20)Px18y17 { Px17y17, Px18y18, Px19y17, Px18y16 } CellNode (18 @ 17) (20)Px18y18 { Px19y18, Px17y18, Px18y17, Px18y19 } CellNode (18 @ 18) (20)Px18y19 { Px19y19, Px18y18, Px17y19, Px18y20 } CellNode (18 @ 19) (20)Px18y2 { Px19y2, Px18y1, Px18y3, Px17y2 } CellNode (18 @ 2) (20)Px18y20 { Px18y21, Px17y20, Px19y20, Px18y19 } CellNode (18 @ 20) (20)Px18y21 { Px19y21, Px18y22, Px17y21, Px18y20 } CellNode (18 @ 21) (20)Px18y22 { Px18y23, Px18y21, Px19y22, Px17y22 } CellNode (18 @ 22) (20)Px18y23 { Px19y23, Px17y23, Px18y24, Px18y22 } CellNode (18 @ 23) (20)Px18y24 { Px19y24, Px17y24, Px18y25, Px18y23 } CellNode (18 @ 24) (20)Px18y25 { Px18y24, Px18y26, Px19y25, Px17y25 } CellNode (18 @ 25) (20)Px18y26 { Px18y27, Px17y26, Px18y25, Px19y26 } CellNode (18 @ 26) (20)Px18y27 { Px18y28, Px17y27, Px19y27, Px18y26 } CellNode (18 @ 27) (20)Px18y28 { Px18y29, Px19y28, Px17y28, Px18y27 } CellNode (18 @ 28) (20)Px18y29 { Px18y28, Px18y30, Px19y29, Px17y29 } CellNode (18 @ 29) (20)Px18y3 { Px17y3, Px18y4, Px19y3, Px18y2 } CellNode (18 @ 3) (20)Px18y30 { Px17y30, Px18y29, Px18y31, Px19y30 } CellNode (18 @ 30) (20)Px18y31 { Px19y31, Px17y31, Px18y30, Px18y32 } CellNode (18 @ 31) (20)Px18y32 { Px18y33, Px19y32, Px17y32, Px18y31 } CellNode (18 @ 32) (20)Px18y33 { Px18y32, Px18y34, Px19y33, Px17y33 } CellNode (18 @ 33) (20)Px18y34 { Px19y34, Px18y33, Px17y34, Px18y35 } CellNode (18 @ 34) (20)Px18y35 { Px18y36, Px19y35, Px18y34, Px17y35 } CellNode (18 @ 35) (20)Px18y36 { Px18y37, Px19y36, Px18y35, Px17y36 } CellNode (18 @ 36) (20)Px18y37 { Px18y36, Px17y37, Px18y38, Px19y37 } CellNode (18 @ 37) (20)Px18y38 { Px19y38, Px17y38, Px18y37, Px18y39 } CellNode (18 @ 38) (20)Px18y39 { Px18y40, Px19y39, Px17y39, Px18y38 } CellNode (18 @ 39) (20)Px18y4 { Px18y5, Px17y4, Px18y3, Px19y4 } CellNode (18 @ 4) (20)Px18y40 { Px19y40, Px17y40, Px18y41, Px18y39 } CellNode (18 @ 40) (20)Px18y41 { Px18y40, Px18y42, Px17y41, Px19y41 } CellNode (18 @ 41) (20)Px18y42 { Px17y42, Px19y42, Px18y41, Px18y43 } CellNode (18 @ 42) (20)Px18y43 { Px18y44, Px17y43, Px19y43, Px18y42 } CellNode (18 @ 43) (20)Px18y44 { Px18y45, Px19y44, Px17y44, Px18y43 } CellNode (18 @ 44) (20)Px18y45 { Px18y46, Px18y44, Px19y45, Px17y45 } CellNode (18 @ 45) (20)Px18y46 { Px19y46, Px17y46, Px18y47, Px18y45 } CellNode (18 @ 46) (20)Px18y47 { Px19y47, Px18y48, Px17y47, Px18y46 } CellNode (18 @ 47) (20)Px18y48 { Px18y47, Px18y49, Px17y48, Px19y48 } CellNode (18 @ 48) (20)Px18y49 { Px17y49, Px18y48, Px18y50, Px19y49 } CellNode (18 @ 49) (20)Px18y5 { Px19y5, Px18y4, Px17y5, Px18y6 } CellNode (18 @ 5) (20)Px18y50 { Px19y50, Px17y50, Px18y49, Px18y51 } CellNode (18 @ 50) (20)Px18y51 { Px18y52, Px19y51, Px17y51, Px18y50 } CellNode (18 @ 51) (20)Px18y52 { Px18y53, Px19y52, Px17y52, Px18y51 } CellNode (18 @ 52) (20)Px18y53 { Px17y53, Px18y52, Px18y54, Px19y53 } CellNode (18 @ 53) (20)Px18y54 { Px19y54, Px18y53, Px17y54, Px18y55 } CellNode (18 @ 54) (20)Px18y55 { Px18y56, Px19y55, Px18y54, Px17y55 } CellNode (18 @ 55) (20)Px18y56 { Px18y55, Px18y57, Px19y56, Px17y56 } CellNode (18 @ 56) (20)Px18y57 { Px19y57, Px18y56, Px17y57, Px18y58 } CellNode (18 @ 57) (20)Px18y58 { Px18y59, Px19y58, Px17y58, Px18y57 } CellNode (18 @ 58) (20)Px18y59 { Px18y60, Px19y59, Px17y59, Px18y58 } CellNode (18 @ 59) (20)Px18y6 { Px17y6, Px19y6, Px18y5, Px18y7 } CellNode (18 @ 6) (20)Px18y60 { Px18y59, Px19y60, Px18y61, Px17y60 } CellNode (18 @ 60) (20)Px18y61 { Px18y60, Px17y61, Px19y61, Px18y62 } CellNode (18 @ 61) (20)Px18y62 { Px18y63, Px19y62, Px18y61, Px17y62 } CellNode (18 @ 62) (20)Px18y63 { Px18y64, Px19y63, Px18y62, Px17y63 } CellNode (18 @ 63) (20)Px18y64 { Px18y63, Px17y64, Px19y64, Px18y65 } CellNode (18 @ 64) (20)Px18y65 { Px18y66, Px18y64, Px17y65, Px19y65 } CellNode (18 @ 65) (20)Px18y66 { Px19y66, Px18y67, Px17y66, Px18y65 } CellNode (18 @ 66) (20)Px18y67 { Px19y67, Px18y66, Px17y67 } CellNode (18 @ 67) (20)Px18y7 { Px18y8, Px17y7, Px18y6, Px19y7 } CellNode (18 @ 7) (20)Px18y8 { Px19y8, Px18y9, Px17y8, Px18y7 } CellNode (18 @ 8) (20)Px18y9 { Px18y8, Px19y9, Px18y10, Px17y9 } CellNode (18 @ 9) (20)Px19y1 { Px18y1, Px19y2, Px20y1 } CellNode (19 @ 1) (20)Px19y10 { Px20y10, Px19y11, Px19y9, Px18y10 } CellNode (19 @ 10) (20)Px19y11 { Px19y12, Px20y11, Px18y11, Px19y10 } CellNode (19 @ 11) (20)Px19y12 { Px19y11, Px20y12, Px18y12, Px19y13 } CellNode (19 @ 12) (20)Px19y13 { Px18y13, Px19y14, Px19y12, Px20y13 } CellNode (19 @ 13) (20)Px19y14 { Px20y14, Px18y14, Px19y15, Px19y13 } CellNode (19 @ 14) (20)Px19y15 { Px19y16, Px18y15, Px20y15, Px19y14 } CellNode (19 @ 15) (20)Px19y16 { Px18y16, Px19y15, Px20y16, Px19y17 } CellNode (19 @ 16) (20)Px19y17 { Px20y17, Px18y17, Px19y18, Px19y16 } CellNode (19 @ 17) (20)Px19y18 { Px20y18, Px18y18, Px19y19, Px19y17 } CellNode (19 @ 18) (20)Px19y19 { Px19y18, Px19y20, Px20y19, Px18y19 } CellNode (19 @ 19) (20)Px19y2 { Px20y2, Px19y3, Px18y2, Px19y1 } CellNode (19 @ 2) (20)Px19y20 { Px19y19, Px19y21, Px20y20, Px18y20 } CellNode (19 @ 20) (20)Px19y21 { Px20y21, Px18y21, Px19y20, Px19y22 } CellNode (19 @ 21) (20)Px19y22 { Px19y23, Px20y22, Px19y21, Px18y22 } CellNode (19 @ 22) (20)Px19y23 { Px19y24, Px20y23, Px18y23, Px19y22 } CellNode (19 @ 23) (20)Px19y24 { Px19y23, Px18y24, Px19y25, Px20y24 } CellNode (19 @ 24) (20)Px19y25 { Px20y25, Px19y24, Px18y25, Px19y26 } CellNode (19 @ 25) (20)Px19y26 { Px19y27, Px20y26, Px18y26, Px19y25 } CellNode (19 @ 26) (20)Px19y27 { Px18y27, Px19y28, Px20y27, Px19y26 } CellNode (19 @ 27) (20)Px19y28 { Px20y28, Px19y27, Px18y28, Px19y29 } CellNode (19 @ 28) (20)Px19y29 { Px20y29, Px18y29, Px19y28, Px19y30 } CellNode (19 @ 29) (20)Px19y3 { Px19y2, Px20y3, Px18y3, Px19y4 } CellNode (19 @ 3) (20)Px19y30 { Px19y31, Px18y30, Px20y30, Px19y29 } CellNode (19 @ 30) (20)Px19y31 { Px20y31, Px18y31, Px19y32, Px19y30 } CellNode (19 @ 31) (20)Px19y32 { Px19y33, Px19y31, Px20y32, Px18y32 } CellNode (19 @ 32) (20)Px19y33 { Px20y33, Px19y34, Px18y33, Px19y32 } CellNode (19 @ 33) (20)Px19y34 { Px19y35, Px18y34, Px20y34, Px19y33 } CellNode (19 @ 34) (20)Px19y35 { Px19y34, Px19y36, Px18y35, Px20y35 } CellNode (19 @ 35) (20)Px19y36 { Px18y36, Px20y36, Px19y35, Px19y37 } CellNode (19 @ 36) (20)Px19y37 { Px19y38, Px18y37, Px20y37, Px19y36 } CellNode (19 @ 37) (20)Px19y38 { Px20y38, Px19y39, Px18y38, Px19y37 } CellNode (19 @ 38) (20)Px19y39 { Px19y38, Px19y40, Px20y39, Px18y39 } CellNode (19 @ 39) (20)Px19y4 { Px18y4, Px19y5, Px19y3, Px20y4 } CellNode (19 @ 4) (20)Px19y40 { Px18y40, Px19y39, Px19y41, Px20y40 } CellNode (19 @ 40) (20)Px19y41 { Px20y41, Px19y40, Px18y41, Px19y42 } CellNode (19 @ 41) (20)Px19y42 { Px19y43, Px20y42, Px18y42, Px19y41 } CellNode (19 @ 42) (20)Px19y43 { Px19y42, Px19y44, Px20y43, Px18y43 } CellNode (19 @ 43) (20)Px19y44 { Px20y44, Px18y44, Px19y43, Px19y45 } CellNode (19 @ 44) (20)Px19y45 { Px19y46, Px20y45, Px18y45, Px19y44 } CellNode (19 @ 45) (20)Px19y46 { Px19y47, Px20y46, Px19y45, Px18y46 } CellNode (19 @ 46) (20)Px19y47 { Px19y46, Px18y47, Px19y48, Px20y47 } CellNode (19 @ 47) (20)Px19y48 { Px20y48, Px19y47, Px18y48, Px19y49 } CellNode (19 @ 48) (20)Px19y49 { Px19y50, Px20y49, Px18y49, Px19y48 } CellNode (19 @ 49) (20)Px19y5 { Px18y5, Px19y6, Px19y4, Px20y5 } CellNode (19 @ 5) (20)Px19y50 { Px19y51, Px18y50, Px20y50, Px19y49 } CellNode (19 @ 50) (20)Px19y51 { Px19y50, Px20y51, Px19y52, Px18y51 } CellNode (19 @ 51) (20)Px19y52 { Px18y52, Px19y53, Px19y51, Px20y52 } CellNode (19 @ 52) (20)Px19y53 { Px20y53, Px18y53, Px19y54, Px19y52 } CellNode (19 @ 53) (20)Px19y54 { Px20y54, Px18y54, Px19y55, Px19y53 } CellNode (19 @ 54) (20)Px19y55 { Px19y56, Px19y54, Px20y55, Px18y55 } CellNode (19 @ 55) (20)Px19y56 { Px19y57, Px18y56, Px20y56, Px19y55 } CellNode (19 @ 56) (20)Px19y57 { Px20y57, Px19y58, Px18y57, Px19y56 } CellNode (19 @ 57) (20)Px19y58 { Px19y57, Px20y58, Px19y59, Px18y58 } CellNode (19 @ 58) (20)Px19y59 { Px18y59, Px19y58, Px19y60, Px20y59 } CellNode (19 @ 59) (20)Px19y6 { Px19y5, Px20y6, Px18y6, Px19y7 } CellNode (19 @ 6) (20)Px19y60 { Px20y60, Px18y60, Px19y59, Px19y61 } CellNode (19 @ 60) (20)Px19y61 { Px19y62, Px20y61, Px19y60, Px18y61 } CellNode (19 @ 61) (20)Px19y62 { Px19y63, Px20y62, Px19y61, Px18y62 } CellNode (19 @ 62) (20)Px19y63 { Px18y63, Px19y62, Px19y64, Px20y63 } CellNode (19 @ 63) (20)Px19y64 { Px20y64, Px18y64, Px19y63, Px19y65 } CellNode (19 @ 64) (20)Px19y65 { Px19y66, Px20y65, Px18y65, Px19y64 } CellNode (19 @ 65) (20)Px19y66 { Px18y66, Px19y67, Px20y66, Px19y65 } CellNode (19 @ 66) (20)Px19y67 { Px19y66, Px18y67, Px20y67 } CellNode (19 @ 67) (20)Px19y7 { Px18y7, Px19y6, Px20y7, Px19y8 } CellNode (19 @ 7) (20)Px19y8 { Px18y8, Px19y9, Px19y7, Px20y8 } CellNode (19 @ 8) (20)Px19y9 { Px20y9, Px18y9, Px19y10, Px19y8 } CellNode (19 @ 9) (20)Px1y1 { Px1y2, Px2y1 } CellNode (1 @ 1) (20)Px1y10 { Px1y11, Px1y9, Px2y10 } CellNode (1 @ 10) (20)Px1y11 { Px1y12, Px2y11, Px1y10 } CellNode (1 @ 11) (20)Px1y12 { Px1y13, Px2y12, Px1y11 } CellNode (1 @ 12) (20)Px1y13 { Px1y14, Px2y13, Px1y12 } CellNode (1 @ 13) (20)Px1y14 { Px2y14, Px1y13, Px1y15 } CellNode (1 @ 14) (20)Px1y15 { Px1y14, Px2y15, Px1y16 } CellNode (1 @ 15) (20)Px1y16 { Px1y15, Px2y16, Px1y17 } CellNode (1 @ 16) (20)Px1y17 { Px1y18, Px2y17, Px1y16 } CellNode (1 @ 17) (20)Px1y18 { Px1y19, Px2y18, Px1y17 } CellNode (1 @ 18) (20)Px1y19 { Px1y20, Px2y19, Px1y18 } CellNode (1 @ 19) (20)Px1y2 { Px1y3, Px1y1, Px2y2 } CellNode (1 @ 2) (20)Px1y20 { Px2y20, Px1y19, Px1y21 } CellNode (1 @ 20) (20)Px1y21 { Px1y20, Px2y21, Px1y22 } CellNode (1 @ 21) (20)Px1y22 { Px1y23, Px2y22, Px1y21 } CellNode (1 @ 22) (20)Px1y23 { Px1y22, Px1y24, Px2y23 } CellNode (1 @ 23) (20)Px1y24 { Px1y23, Px2y24, Px1y25 } CellNode (1 @ 24) (20)Px1y25 { Px2y25, Px1y24, Px1y26 } CellNode (1 @ 25) (20)Px1y26 { Px1y25, Px1y27, Px2y26 } CellNode (1 @ 26) (20)Px1y27 { Px2y27, Px1y26, Px1y28 } CellNode (1 @ 27) (20)Px1y28 { Px1y27, Px1y29, Px2y28 } CellNode (1 @ 28) (20)Px1y29 { Px1y30, Px1y28, Px2y29 } CellNode (1 @ 29) (20)Px1y3 { Px1y4, Px1y2, Px2y3 } CellNode (1 @ 3) (20)Px1y30 { Px1y31, Px2y30, Px1y29 } CellNode (1 @ 30) (20)Px1y31 { Px1y30, Px2y31, Px1y32 } CellNode (1 @ 31) (20)Px1y32 { Px1y31, Px2y32, Px1y33 } CellNode (1 @ 32) (20)Px1y33 { Px1y34, Px2y33, Px1y32 } CellNode (1 @ 33) (20)Px1y34 { Px1y35, Px1y33, Px2y34 } CellNode (1 @ 34) (20)Px1y35 { Px2y35, Px1y34, Px1y36 } CellNode (1 @ 35) (20)Px1y36 { Px1y35, Px1y37, Px2y36 } CellNode (1 @ 36) (20)Px1y37 { Px1y36, Px1y38, Px2y37 } CellNode (1 @ 37) (20)Px1y38 { Px1y37, Px1y39, Px2y38 } CellNode (1 @ 38) (20)Px1y39 { Px2y39, Px1y38, Px1y40 } CellNode (1 @ 39) (20)Px1y4 { Px1y5, Px1y3, Px2y4 } CellNode (1 @ 4) (20)Px1y40 { Px1y39, Px1y41, Px2y40 } CellNode (1 @ 40) (20)Px1y41 { Px2y41, Px1y40, Px1y42 } CellNode (1 @ 41) (20)Px1y42 { Px2y42, Px1y43, Px1y41 } CellNode (1 @ 42) (20)Px1y43 { Px1y44, Px2y43, Px1y42 } CellNode (1 @ 43) (20)Px1y44 { Px2y44, Px1y43, Px1y45 } CellNode (1 @ 44) (20)Px1y45 { Px1y46, Px2y45, Px1y44 } CellNode (1 @ 45) (20)Px1y46 { Px2y46, Px1y47, Px1y45 } CellNode (1 @ 46) (20)Px1y47 { Px1y46, Px2y47, Px1y48 } CellNode (1 @ 47) (20)Px1y48 { Px1y47, Px2y48, Px1y49 } CellNode (1 @ 48) (20)Px1y49 { Px1y48, Px1y50, Px2y49 } CellNode (1 @ 49) (20)Px1y5 { Px1y4, Px1y6, Px2y5 } CellNode (1 @ 5) (20)Px1y50 { Px1y51, Px2y50, Px1y49 } CellNode (1 @ 50) (20)Px1y51 { Px1y50, Px1y52, Px2y51 } CellNode (1 @ 51) (20)Px1y52 { Px1y51, Px2y52, Px1y53 } CellNode (1 @ 52) (20)Px1y53 { Px1y52, Px2y53, Px1y54 } CellNode (1 @ 53) (20)Px1y54 { Px1y53, Px2y54, Px1y55 } CellNode (1 @ 54) (20)Px1y55 { Px1y56, Px2y55, Px1y54 } CellNode (1 @ 55) (20)Px1y56 { Px1y55, Px2y56, Px1y57 } CellNode (1 @ 56) (20)Px1y57 { Px1y56, Px1y58, Px2y57 } CellNode (1 @ 57) (20)Px1y58 { Px1y59, Px2y58, Px1y57 } CellNode (1 @ 58) (20)Px1y59 { Px1y60, Px1y58, Px2y59 } CellNode (1 @ 59) (20)Px1y6 { Px2y6, Px1y7, Px1y5 } CellNode (1 @ 6) (20)Px1y60 { Px1y61, Px1y59, Px2y60 } CellNode (1 @ 60) (20)Px1y61 { Px1y60, Px2y61, Px1y62 } CellNode (1 @ 61) (20)Px1y62 { Px2y62, Px1y61, Px1y63 } CellNode (1 @ 62) (20)Px1y63 { Px2y63, Px1y64, Px1y62 } CellNode (1 @ 63) (20)Px1y64 { Px1y65, Px1y63, Px2y64 } CellNode (1 @ 64) (20)Px1y65 { Px1y64, Px1y66, Px2y65 } CellNode (1 @ 65) (20)Px1y66 { Px1y65, Px2y66, Px1y67 } CellNode (1 @ 66) (20)Px1y67 { Px1y66, Px2y67 } CellNode (1 @ 67) (20)Px1y7 { Px1y8, Px1y6, Px2y7 } CellNode (1 @ 7) (20)Px1y8 { Px1y7, Px1y9, Px2y8 } CellNode (1 @ 8) (20)Px1y9 { Px2y9, Px1y8, Px1y10 } CellNode (1 @ 9) (20)Px20y1 { Px19y1, Px20y2, Px21y1 } CellNode (20 @ 1) (20)Px20y10 { Px20y9, Px20y11, Px21y10, Px19y10 } CellNode (20 @ 10) (20)Px20y11 { Px19y11, Px20y10, Px20y12, Px21y11 } CellNode (20 @ 11) (20)Px20y12 { Px21y12, Px19y12, Px20y11, Px20y13 } CellNode (20 @ 12) (20)Px20y13 { Px20y14, Px21y13, Px20y12, Px19y13 } CellNode (20 @ 13) (20)Px20y14 { Px19y14, Px20y15, Px21y14, Px20y13 } CellNode (20 @ 14) (20)Px20y15 { Px21y15, Px19y15, Px20y14, Px20y16 } CellNode (20 @ 15) (20)Px20y16 { Px20y17, Px21y16, Px19y16, Px20y15 } CellNode (20 @ 16) (20)Px20y17 { Px20y18, Px21y17, Px19y17, Px20y16 } CellNode (20 @ 17) (20)Px20y18 { Px20y17, Px19y18, Px20y19, Px21y18 } CellNode (20 @ 18) (20)Px20y19 { Px21y19, Px20y18, Px19y19, Px20y20 } CellNode (20 @ 19) (20)Px20y2 { Px19y2, Px20y3, Px21y2, Px20y1 } CellNode (20 @ 2) (20)Px20y20 { Px21y20, Px19y20, Px20y21, Px20y19 } CellNode (20 @ 20) (20)Px20y21 { Px21y21, Px19y21, Px20y22, Px20y20 } CellNode (20 @ 21) (20)Px20y22 { Px20y21, Px21y22, Px19y22, Px20y23 } CellNode (20 @ 22) (20)Px20y23 { Px19y23, Px21y23, Px20y22, Px20y24 } CellNode (20 @ 23) (20)Px20y24 { Px20y25, Px19y24, Px21y24, Px20y23 } CellNode (20 @ 24) (20)Px20y25 { Px20y26, Px19y25, Px21y25, Px20y24 } CellNode (20 @ 25) (20)Px20y26 { Px20y27, Px20y25, Px21y26, Px19y26 } CellNode (20 @ 26) (20)Px20y27 { Px21y27, Px20y28, Px19y27, Px20y26 } CellNode (20 @ 27) (20)Px20y28 { Px21y28, Px19y28, Px20y29, Px20y27 } CellNode (20 @ 28) (20)Px20y29 { Px20y28, Px20y30, Px21y29, Px19y29 } CellNode (20 @ 29) (20)Px20y3 { Px20y2, Px21y3, Px19y3, Px20y4 } CellNode (20 @ 3) (20)Px20y30 { Px20y29, Px20y31, Px21y30, Px19y30 } CellNode (20 @ 30) (20)Px20y31 { Px21y31, Px19y31, Px20y30, Px20y32 } CellNode (20 @ 31) (20)Px20y32 { Px20y33, Px21y32, Px20y31, Px19y32 } CellNode (20 @ 32) (20)Px20y33 { Px20y34, Px21y33, Px20y32, Px19y33 } CellNode (20 @ 33) (20)Px20y34 { Px20y33, Px19y34, Px20y35, Px21y34 } CellNode (20 @ 34) (20)Px20y35 { Px21y35, Px19y35, Px20y34, Px20y36 } CellNode (20 @ 35) (20)Px20y36 { Px20y37, Px21y36, Px19y36, Px20y35 } CellNode (20 @ 36) (20)Px20y37 { Px20y36, Px20y38, Px21y37, Px19y37 } CellNode (20 @ 37) (20)Px20y38 { Px21y38, Px19y38, Px20y37, Px20y39 } CellNode (20 @ 38) (20)Px20y39 { Px21y39, Px20y38, Px19y39, Px20y40 } CellNode (20 @ 39) (20)Px20y4 { Px20y3, Px21y4, Px19y4, Px20y5 } CellNode (20 @ 4) (20)Px20y40 { Px20y41, Px19y40, Px21y40, Px20y39 } CellNode (20 @ 40) (20)Px20y41 { Px21y41, Px20y42, Px19y41, Px20y40 } CellNode (20 @ 41) (20)Px20y42 { Px20y43, Px20y41, Px21y42, Px19y42 } CellNode (20 @ 42) (20)Px20y43 { Px20y44, Px19y43, Px21y43, Px20y42 } CellNode (20 @ 43) (20)Px20y44 { Px20y45, Px21y44, Px19y44, Px20y43 } CellNode (20 @ 44) (20)Px20y45 { Px20y44, Px21y45, Px19y45, Px20y46 } CellNode (20 @ 45) (20)Px20y46 { Px19y46, Px21y46, Px20y45, Px20y47 } CellNode (20 @ 46) (20)Px20y47 { Px21y47, Px19y47, Px20y48, Px20y46 } CellNode (20 @ 47) (20)Px20y48 { Px21y48, Px19y48, Px20y49, Px20y47 } CellNode (20 @ 48) (20)Px20y49 { Px20y48, Px20y50, Px21y49, Px19y49 } CellNode (20 @ 49) (20)Px20y5 { Px19y5, Px20y6, Px20y4, Px21y5 } CellNode (20 @ 5) (20)Px20y50 { Px19y50, Px20y49, Px20y51, Px21y50 } CellNode (20 @ 50) (20)Px20y51 { Px21y51, Px19y51, Px20y50, Px20y52 } CellNode (20 @ 51) (20)Px20y52 { Px20y53, Px21y52, Px20y51, Px19y52 } CellNode (20 @ 52) (20)Px20y53 { Px19y53, Px20y54, Px21y53, Px20y52 } CellNode (20 @ 53) (20)Px20y54 { Px21y54, Px20y53, Px19y54, Px20y55 } CellNode (20 @ 54) (20)Px20y55 { Px20y56, Px21y55, Px20y54, Px19y55 } CellNode (20 @ 55) (20)Px20y56 { Px20y57, Px21y56, Px20y55, Px19y56 } CellNode (20 @ 56) (20)Px20y57 { Px19y57, Px20y56, Px20y58, Px21y57 } CellNode (20 @ 57) (20)Px20y58 { Px21y58, Px19y58, Px20y57, Px20y59 } CellNode (20 @ 58) (20)Px20y59 { Px20y60, Px21y59, Px20y58, Px19y59 } CellNode (20 @ 59) (20)Px20y6 { Px21y6, Px19y6, Px20y7, Px20y5 } CellNode (20 @ 6) (20)Px20y60 { Px21y60, Px19y60, Px20y61, Px20y59 } CellNode (20 @ 60) (20)Px20y61 { Px20y60, Px20y62, Px19y61, Px21y61 } CellNode (20 @ 61) (20)Px20y62 { Px20y63, Px19y62, Px20y61, Px21y62 } CellNode (20 @ 62) (20)Px20y63 { Px21y63, Px19y63, Px20y64, Px20y62 } CellNode (20 @ 63) (20)Px20y64 { Px20y65, Px21y64, Px19y64, Px20y63 } CellNode (20 @ 64) (20)Px20y65 { Px20y66, Px20y64, Px21y65, Px19y65 } CellNode (20 @ 65) (20)Px20y66 { Px20y67, Px19y66, Px21y66, Px20y65 } CellNode (20 @ 66) (20)Px20y67 { Px19y67, Px20y66, Px21y67 } CellNode (20 @ 67) (20)Px20y7 { Px20y6, Px21y7, Px19y7, Px20y8 } CellNode (20 @ 7) (20)Px20y8 { Px20y9, Px21y8, Px20y7, Px19y8 } CellNode (20 @ 8) (20)Px20y9 { Px20y10, Px19y9, Px21y9, Px20y8 } CellNode (20 @ 9) (20)Px21y1 { Px22y1, Px20y1, Px21y2 } CellNode (21 @ 1) (20)Px21y10 { Px20y10, Px22y10, Px21y9, Px21y11 } CellNode (21 @ 10) (20)Px21y11 { Px22y11, Px20y11, Px21y12, Px21y10 } CellNode (21 @ 11) (20)Px21y12 { Px22y12, Px20y12, Px21y13, Px21y11 } CellNode (21 @ 12) (20)Px21y13 { Px22y13, Px21y12, Px21y14, Px20y13 } CellNode (21 @ 13) (20)Px21y14 { Px22y14, Px20y14, Px21y15, Px21y13 } CellNode (21 @ 14) (20)Px21y15 { Px22y15, Px20y15, Px21y16, Px21y14 } CellNode (21 @ 15) (20)Px21y16 { Px21y15, Px22y16, Px20y16, Px21y17 } CellNode (21 @ 16) (20)Px21y17 { Px20y17, Px22y17, Px21y16, Px21y18 } CellNode (21 @ 17) (20)Px21y18 { Px22y18, Px20y18, Px21y19, Px21y17 } CellNode (21 @ 18) (20)Px21y19 { Px21y20, Px22y19, Px20y19, Px21y18 } CellNode (21 @ 19) (20)Px21y2 { Px20y2, Px21y3, Px22y2, Px21y1 } CellNode (21 @ 2) (20)Px21y20 { Px21y19, Px21y21, Px22y20, Px20y20 } CellNode (21 @ 20) (20)Px21y21 { Px21y20, Px20y21, Px21y22, Px22y21 } CellNode (21 @ 21) (20)Px21y22 { Px22y22, Px21y21, Px20y22, Px21y23 } CellNode (21 @ 22) (20)Px21y23 { Px21y24, Px22y23, Px21y22, Px20y23 } CellNode (21 @ 23) (20)Px21y24 { Px21y23, Px21y25, Px22y24, Px20y24 } CellNode (21 @ 24) (20)Px21y25 { Px22y25, Px20y25, Px21y24, Px21y26 } CellNode (21 @ 25) (20)Px21y26 { Px21y27, Px22y26, Px20y26, Px21y25 } CellNode (21 @ 26) (20)Px21y27 { Px21y28, Px22y27, Px21y26, Px20y27 } CellNode (21 @ 27) (20)Px21y28 { Px21y27, Px20y28, Px21y29, Px22y28 } CellNode (21 @ 28) (20)Px21y29 { Px22y29, Px21y28, Px20y29, Px21y30 } CellNode (21 @ 29) (20)Px21y3 { Px20y3, Px21y4, Px21y2, Px22y3 } CellNode (21 @ 3) (20)Px21y30 { Px22y30, Px21y31, Px20y30, Px21y29 } CellNode (21 @ 30) (20)Px21y31 { Px22y31, Px20y31, Px21y32, Px21y30 } CellNode (21 @ 31) (20)Px21y32 { Px21y31, Px21y33, Px20y32, Px22y32 } CellNode (21 @ 32) (20)Px21y33 { Px20y33, Px21y34, Px21y32, Px22y33 } CellNode (21 @ 33) (20)Px21y34 { Px22y34, Px20y34, Px21y35, Px21y33 } CellNode (21 @ 34) (20)Px21y35 { Px21y36, Px22y35, Px20y35, Px21y34 } CellNode (21 @ 35) (20)Px21y36 { Px20y36, Px21y35, Px21y37, Px22y36 } CellNode (21 @ 36) (20)Px21y37 { Px22y37, Px21y38, Px20y37, Px21y36 } CellNode (21 @ 37) (20)Px21y38 { Px22y38, Px20y38, Px21y39, Px21y37 } CellNode (21 @ 38) (20)Px21y39 { Px21y38, Px21y40, Px22y39, Px20y39 } CellNode (21 @ 39) (20)Px21y4 { Px21y3, Px22y4, Px20y4, Px21y5 } CellNode (21 @ 4) (20)Px21y40 { Px21y39, Px21y41, Px22y40, Px20y40 } CellNode (21 @ 40) (20)Px21y41 { Px22y41, Px20y41, Px21y40, Px21y42 } CellNode (21 @ 41) (20)Px21y42 { Px21y43, Px22y42, Px21y41, Px20y42 } CellNode (21 @ 42) (20)Px21y43 { Px21y44, Px22y43, Px21y42, Px20y43 } CellNode (21 @ 43) (20)Px21y44 { Px20y44, Px21y43, Px21y45, Px22y44 } CellNode (21 @ 44) (20)Px21y45 { Px22y45, Px20y45, Px21y44, Px21y46 } CellNode (21 @ 45) (20)Px21y46 { Px21y47, Px22y46, Px20y46, Px21y45 } CellNode (21 @ 46) (20)Px21y47 { Px21y46, Px21y48, Px22y47, Px20y47 } CellNode (21 @ 47) (20)Px21y48 { Px22y48, Px21y47, Px20y48, Px21y49 } CellNode (21 @ 48) (20)Px21y49 { Px22y49, Px21y48, Px20y49, Px21y50 } CellNode (21 @ 49) (20)Px21y5 { Px20y5, Px21y4, Px22y5, Px21y6 } CellNode (21 @ 5) (20)Px21y50 { Px22y50, Px21y51, Px20y50, Px21y49 } CellNode (21 @ 50) (20)Px21y51 { Px22y51, Px20y51, Px21y52, Px21y50 } CellNode (21 @ 51) (20)Px21y52 { Px21y53, Px21y51, Px22y52, Px20y52 } CellNode (21 @ 52) (20)Px21y53 { Px22y53, Px20y53, Px21y54, Px21y52 } CellNode (21 @ 53) (20)Px21y54 { Px21y55, Px20y54, Px22y54, Px21y53 } CellNode (21 @ 54) (20)Px21y55 { Px21y54, Px21y56, Px20y55, Px22y55 } CellNode (21 @ 55) (20)Px21y56 { Px22y56, Px20y56, Px21y55, Px21y57 } CellNode (21 @ 56) (20)Px21y57 { Px22y57, Px21y58, Px20y57, Px21y56 } CellNode (21 @ 57) (20)Px21y58 { Px22y58, Px20y58, Px21y59, Px21y57 } CellNode (21 @ 58) (20)Px21y59 { Px21y58, Px21y60, Px22y59, Px20y59 } CellNode (21 @ 59) (20)Px21y6 { Px20y6, Px21y7, Px21y5, Px22y6 } CellNode (21 @ 6) (20)Px21y60 { Px20y60, Px21y59, Px21y61, Px22y60 } CellNode (21 @ 60) (20)Px21y61 { Px22y61, Px21y60, Px20y61, Px21y62 } CellNode (21 @ 61) (20)Px21y62 { Px21y63, Px22y62, Px20y62, Px21y61 } CellNode (21 @ 62) (20)Px21y63 { Px20y63, Px21y64, Px22y63, Px21y62 } CellNode (21 @ 63) (20)Px21y64 { Px22y64, Px21y63, Px20y64, Px21y65 } CellNode (21 @ 64) (20)Px21y65 { Px21y66, Px22y65, Px20y65, Px21y64 } CellNode (21 @ 65) (20)Px21y66 { Px21y67, Px22y66, Px21y65, Px20y66 } CellNode (21 @ 66) (20)Px21y67 { Px20y67, Px21y66, Px22y67 } CellNode (21 @ 67) (20)Px21y7 { Px21y6, Px21y8, Px20y7, Px22y7 } CellNode (21 @ 7) (20)Px21y8 { Px22y8, Px21y7, Px21y9, Px20y8 } CellNode (21 @ 8) (20)Px21y9 { Px20y9, Px21y8, Px22y9, Px21y10 } CellNode (21 @ 9) (20)Px22y1 { Px22y2, Px23y1, Px21y1 } CellNode (22 @ 1) (20)Px22y10 { Px22y11, Px23y10, Px22y9, Px21y10 } CellNode (22 @ 10) (20)Px22y11 { Px22y10, Px22y12, Px23y11, Px21y11 } CellNode (22 @ 11) (20)Px22y12 { Px22y11, Px21y12, Px23y12, Px22y13 } CellNode (22 @ 12) (20)Px22y13 { Px22y14, Px23y13, Px21y13, Px22y12 } CellNode (22 @ 13) (20)Px22y14 { Px22y15, Px23y14, Px21y14, Px22y13 } CellNode (22 @ 14) (20)Px22y15 { Px22y14, Px21y15, Px22y16, Px23y15 } CellNode (22 @ 15) (20)Px22y16 { Px23y16, Px22y15, Px21y16, Px22y17 } CellNode (22 @ 16) (20)Px22y17 { Px23y17, Px22y18, Px22y16, Px21y17 } CellNode (22 @ 17) (20)Px22y18 { Px22y17, Px23y18, Px22y19, Px21y18 } CellNode (22 @ 18) (20)Px22y19 { Px22y18, Px21y19, Px22y20, Px23y19 } CellNode (22 @ 19) (20)Px22y2 { Px22y1, Px23y2, Px22y3, Px21y2 } CellNode (22 @ 2) (20)Px22y20 { Px21y20, Px22y21, Px22y19, Px23y20 } CellNode (22 @ 20) (20)Px22y21 { Px23y21, Px21y21, Px22y22, Px22y20 } CellNode (22 @ 21) (20)Px22y22 { Px23y22, Px22y23, Px21y22, Px22y21 } CellNode (22 @ 22) (20)Px22y23 { Px22y24, Px22y22, Px23y23, Px21y23 } CellNode (22 @ 23) (20)Px22y24 { Px22y25, Px23y24, Px21y24, Px22y23 } CellNode (22 @ 24) (20)Px22y25 { Px22y26, Px23y25, Px21y25, Px22y24 } CellNode (22 @ 25) (20)Px22y26 { Px22y25, Px23y26, Px21y26, Px22y27 } CellNode (22 @ 26) (20)Px22y27 { Px21y27, Px22y28, Px22y26, Px23y27 } CellNode (22 @ 27) (20)Px22y28 { Px23y28, Px21y28, Px22y29, Px22y27 } CellNode (22 @ 28) (20)Px22y29 { Px22y30, Px23y29, Px21y29, Px22y28 } CellNode (22 @ 29) (20)Px22y3 { Px21y3, Px22y4, Px22y2, Px23y3 } CellNode (22 @ 3) (20)Px22y30 { Px22y29, Px22y31, Px23y30, Px21y30 } CellNode (22 @ 30) (20)Px22y31 { Px22y30, Px21y31, Px22y32, Px23y31 } CellNode (22 @ 31) (20)Px22y32 { Px23y32, Px22y31, Px21y32, Px22y33 } CellNode (22 @ 32) (20)Px22y33 { Px22y34, Px23y33, Px21y33, Px22y32 } CellNode (22 @ 33) (20)Px22y34 { Px21y34, Px22y35, Px23y34, Px22y33 } CellNode (22 @ 34) (20)Px22y35 { Px23y35, Px22y34, Px21y35, Px22y36 } CellNode (22 @ 35) (20)Px22y36 { Px22y37, Px23y36, Px21y36, Px22y35 } CellNode (22 @ 36) (20)Px22y37 { Px22y38, Px23y37, Px21y37, Px22y36 } CellNode (22 @ 37) (20)Px22y38 { Px22y37, Px21y38, Px22y39, Px23y38 } CellNode (22 @ 38) (20)Px22y39 { Px23y39, Px22y38, Px21y39, Px22y40 } CellNode (22 @ 39) (20)Px22y4 { Px21y4, Px22y5, Px22y3, Px23y4 } CellNode (22 @ 4) (20)Px22y40 { Px22y41, Px21y40, Px23y40, Px22y39 } CellNode (22 @ 40) (20)Px22y41 { Px22y42, Px21y41, Px23y41, Px22y40 } CellNode (22 @ 41) (20)Px22y42 { Px22y41, Px23y42, Px21y42, Px22y43 } CellNode (22 @ 42) (20)Px22y43 { Px23y43, Px21y43, Px22y42, Px22y44 } CellNode (22 @ 43) (20)Px22y44 { Px23y44, Px21y44, Px22y45, Px22y43 } CellNode (22 @ 44) (20)Px22y45 { Px23y45, Px21y45, Px22y46, Px22y44 } CellNode (22 @ 45) (20)Px22y46 { Px21y46, Px22y45, Px22y47, Px23y46 } CellNode (22 @ 46) (20)Px22y47 { Px23y47, Px21y47, Px22y48, Px22y46 } CellNode (22 @ 47) (20)Px22y48 { Px23y48, Px21y48, Px22y49, Px22y47 } CellNode (22 @ 48) (20)Px22y49 { Px22y48, Px22y50, Px23y49, Px21y49 } CellNode (22 @ 49) (20)Px22y5 { Px23y5, Px22y4, Px21y5, Px22y6 } CellNode (22 @ 5) (20)Px22y50 { Px22y49, Px22y51, Px23y50, Px21y50 } CellNode (22 @ 50) (20)Px22y51 { Px23y51, Px22y50, Px21y51, Px22y52 } CellNode (22 @ 51) (20)Px22y52 { Px22y53, Px23y52, Px21y52, Px22y51 } CellNode (22 @ 52) (20)Px22y53 { Px22y54, Px23y53, Px22y52, Px21y53 } CellNode (22 @ 53) (20)Px22y54 { Px22y53, Px21y54, Px22y55, Px23y54 } CellNode (22 @ 54) (20)Px22y55 { Px23y55, Px21y55, Px22y54, Px22y56 } CellNode (22 @ 55) (20)Px22y56 { Px22y57, Px23y56, Px21y56, Px22y55 } CellNode (22 @ 56) (20)Px22y57 { Px22y56, Px22y58, Px23y57, Px21y57 } CellNode (22 @ 57) (20)Px22y58 { Px23y58, Px22y57, Px21y58, Px22y59 } CellNode (22 @ 58) (20)Px22y59 { Px23y59, Px22y58, Px21y59, Px22y60 } CellNode (22 @ 59) (20)Px22y6 { Px21y6, Px23y6, Px22y5, Px22y7 } CellNode (22 @ 6) (20)Px22y60 { Px22y61, Px21y60, Px23y60, Px22y59 } CellNode (22 @ 60) (20)Px22y61 { Px23y61, Px22y62, Px21y61, Px22y60 } CellNode (22 @ 61) (20)Px22y62 { Px22y63, Px22y61, Px23y62, Px21y62 } CellNode (22 @ 62) (20)Px22y63 { Px23y63, Px21y63, Px22y64, Px22y62 } CellNode (22 @ 63) (20)Px22y64 { Px22y65, Px21y64, Px23y64, Px22y63 } CellNode (22 @ 64) (20)Px22y65 { Px22y64, Px22y66, Px21y65, Px23y65 } CellNode (22 @ 65) (20)Px22y66 { Px23y66, Px21y66, Px22y65, Px22y67 } CellNode (22 @ 66) (20)Px22y67 { Px23y67, Px21y67, Px22y66 } CellNode (22 @ 67) (20)Px22y7 { Px22y8, Px21y7, Px22y6, Px23y7 } CellNode (22 @ 7) (20)Px22y8 { Px22y7, Px21y8, Px22y9, Px23y8 } CellNode (22 @ 8) (20)Px22y9 { Px22y8, Px23y9, Px21y9, Px22y10 } CellNode (22 @ 9) (20)Px23y1 { Px22y1, Px23y2, Px24y1 } CellNode (23 @ 1) (20)Px23y10 { Px22y10, Px23y9, Px24y10, Px23y11 } CellNode (23 @ 10) (20)Px23y11 { Px24y11, Px22y11, Px23y10, Px23y12 } CellNode (23 @ 11) (20)Px23y12 { Px23y13, Px24y12, Px22y12, Px23y11 } CellNode (23 @ 12) (20)Px23y13 { Px23y14, Px24y13, Px23y12, Px22y13 } CellNode (23 @ 13) (20)Px23y14 { Px22y14, Px23y13, Px23y15, Px24y14 } CellNode (23 @ 14) (20)Px23y15 { Px24y15, Px22y15, Px23y14, Px23y16 } CellNode (23 @ 15) (20)Px23y16 { Px23y17, Px24y16, Px22y16, Px23y15 } CellNode (23 @ 16) (20)Px23y17 { Px23y16, Px23y18, Px24y17, Px22y17 } CellNode (23 @ 17) (20)Px23y18 { Px24y18, Px22y18, Px23y17, Px23y19 } CellNode (23 @ 18) (20)Px23y19 { Px24y19, Px23y18, Px22y19, Px23y20 } CellNode (23 @ 19) (20)Px23y2 { Px23y1, Px22y2, Px23y3, Px24y2 } CellNode (23 @ 2) (20)Px23y20 { Px24y20, Px23y21, Px22y20, Px23y19 } CellNode (23 @ 20) (20)Px23y21 { Px22y21, Px23y22, Px24y21, Px23y20 } CellNode (23 @ 21) (20)Px23y22 { Px22y22, Px23y21, Px23y23, Px24y22 } CellNode (23 @ 22) (20)Px23y23 { Px24y23, Px23y24, Px23y22, Px22y23 } CellNode (23 @ 23) (20)Px23y24 { Px24y24, Px23y25, Px23y23, Px22y24 } CellNode (23 @ 24) (20)Px23y25 { Px22y25, Px23y24, Px23y26, Px24y25 } CellNode (23 @ 25) (20)Px23y26 { Px24y26, Px22y26, Px23y25, Px23y27 } CellNode (23 @ 26) (20)Px23y27 { Px23y28, Px24y27, Px23y26, Px22y27 } CellNode (23 @ 27) (20)Px23y28 { Px22y28, Px24y28, Px23y29, Px23y27 } CellNode (23 @ 28) (20)Px23y29 { Px23y28, Px22y29, Px23y30, Px24y29 } CellNode (23 @ 29) (20)Px23y3 { Px24y3, Px23y2, Px22y3, Px23y4 } CellNode (23 @ 3) (20)Px23y30 { Px22y30, Px23y31, Px23y29, Px24y30 } CellNode (23 @ 30) (20)Px23y31 { Px23y32, Px22y31, Px24y31, Px23y30 } CellNode (23 @ 31) (20)Px23y32 { Px23y33, Px22y32, Px24y32, Px23y31 } CellNode (23 @ 32) (20)Px23y33 { Px23y34, Px23y32, Px24y33, Px22y33 } CellNode (23 @ 33) (20)Px23y34 { Px23y35, Px24y34, Px22y34, Px23y33 } CellNode (23 @ 34) (20)Px23y35 { Px23y36, Px22y35, Px24y35, Px23y34 } CellNode (23 @ 35) (20)Px23y36 { Px23y35, Px23y37, Px22y36, Px24y36 } CellNode (23 @ 36) (20)Px23y37 { Px23y38, Px22y37, Px23y36, Px24y37 } CellNode (23 @ 37) (20)Px23y38 { Px24y38, Px22y38, Px23y39, Px23y37 } CellNode (23 @ 38) (20)Px23y39 { Px23y40, Px24y39, Px22y39, Px23y38 } CellNode (23 @ 39) (20)Px23y4 { Px23y5, Px22y4, Px23y3, Px24y4 } CellNode (23 @ 4) (20)Px23y40 { Px23y39, Px23y41, Px24y40, Px22y40 } CellNode (23 @ 40) (20)Px23y41 { Px23y40, Px22y41, Px23y42, Px24y41 } CellNode (23 @ 41) (20)Px23y42 { Px24y42, Px22y42, Px23y41, Px23y43 } CellNode (23 @ 42) (20)Px23y43 { Px23y44, Px24y43, Px23y42, Px22y43 } CellNode (23 @ 43) (20)Px23y44 { Px23y43, Px23y45, Px24y44, Px22y44 } CellNode (23 @ 44) (20)Px23y45 { Px24y45, Px22y45, Px23y44, Px23y46 } CellNode (23 @ 45) (20)Px23y46 { Px23y47, Px24y46, Px23y45, Px22y46 } CellNode (23 @ 46) (20)Px23y47 { Px23y48, Px24y47, Px22y47, Px23y46 } CellNode (23 @ 47) (20)Px23y48 { Px23y47, Px22y48, Px23y49, Px24y48 } CellNode (23 @ 48) (20)Px23y49 { Px24y49, Px23y48, Px22y49, Px23y50 } CellNode (23 @ 49) (20)Px23y5 { Px23y6, Px22y5, Px23y4, Px24y5 } CellNode (23 @ 5) (20)Px23y50 { Px24y50, Px22y50, Px23y51, Px23y49 } CellNode (23 @ 50) (20)Px23y51 { Px24y51, Px22y51, Px23y52, Px23y50 } CellNode (23 @ 51) (20)Px23y52 { Px23y51, Px24y52, Px22y52, Px23y53 } CellNode (23 @ 52) (20)Px23y53 { Px22y53, Px24y53, Px23y52, Px23y54 } CellNode (23 @ 53) (20)Px23y54 { Px23y55, Px22y54, Px24y54, Px23y53 } CellNode (23 @ 54) (20)Px23y55 { Px24y55, Px23y56, Px22y55, Px23y54 } CellNode (23 @ 55) (20)Px23y56 { Px24y56, Px23y55, Px23y57, Px22y56 } CellNode (23 @ 56) (20)Px23y57 { Px24y57, Px22y57, Px23y58, Px23y56 } CellNode (23 @ 57) (20)Px23y58 { Px24y58, Px22y58, Px23y59, Px23y57 } CellNode (23 @ 58) (20)Px23y59 { Px23y58, Px23y60, Px24y59, Px22y59 } CellNode (23 @ 59) (20)Px23y6 { Px23y5, Px24y6, Px22y6, Px23y7 } CellNode (23 @ 6) (20)Px23y60 { Px23y59, Px23y61, Px24y60, Px22y60 } CellNode (23 @ 60) (20)Px23y61 { Px24y61, Px22y61, Px23y60, Px23y62 } CellNode (23 @ 61) (20)Px23y62 { Px23y63, Px24y62, Px23y61, Px22y62 } CellNode (23 @ 62) (20)Px23y63 { Px23y64, Px24y63, Px23y62, Px22y63 } CellNode (23 @ 63) (20)Px23y64 { Px23y63, Px22y64, Px23y65, Px24y64 } CellNode (23 @ 64) (20)Px23y65 { Px24y65, Px22y65, Px23y64, Px23y66 } CellNode (23 @ 65) (20)Px23y66 { Px23y67, Px24y66, Px22y66, Px23y65 } CellNode (23 @ 66) (20)Px23y67 { Px23y66, Px24y67, Px22y67 } CellNode (23 @ 67) (20)Px23y7 { Px22y7, Px23y6, Px24y7, Px23y8 } CellNode (23 @ 7) (20)Px23y8 { Px22y8, Px23y9, Px24y8, Px23y7 } CellNode (23 @ 8) (20)Px23y9 { Px24y9, Px23y10, Px22y9, Px23y8 } CellNode (23 @ 9) (20)Px24y1 { Px23y1, Px24y2, Px25y1 } CellNode (24 @ 1) (20)Px24y10 { Px24y11, Px25y10, Px23y10, Px24y9 } CellNode (24 @ 10) (20)Px24y11 { Px24y12, Px25y11, Px24y10, Px23y11 } CellNode (24 @ 11) (20)Px24y12 { Px24y11, Px24y13, Px23y12, Px25y12 } CellNode (24 @ 12) (20)Px24y13 { Px24y14, Px23y13, Px24y12, Px25y13 } CellNode (24 @ 13) (20)Px24y14 { Px25y14, Px23y14, Px24y15, Px24y13 } CellNode (24 @ 14) (20)Px24y15 { Px24y16, Px23y15, Px25y15, Px24y14 } CellNode (24 @ 15) (20)Px24y16 { Px23y16, Px24y15, Px24y17, Px25y16 } CellNode (24 @ 16) (20)Px24y17 { Px25y17, Px23y17, Px24y18, Px24y16 } CellNode (24 @ 17) (20)Px24y18 { Px24y19, Px23y18, Px25y18, Px24y17 } CellNode (24 @ 18) (20)Px24y19 { Px24y18, Px24y20, Px25y19, Px23y19 } CellNode (24 @ 19) (20)Px24y2 { Px23y2, Px24y3, Px24y1, Px25y2 } CellNode (24 @ 2) (20)Px24y20 { Px24y19, Px24y21, Px25y20, Px23y20 } CellNode (24 @ 20) (20)Px24y21 { Px25y21, Px24y20, Px23y21, Px24y22 } CellNode (24 @ 21) (20)Px24y22 { Px24y23, Px25y22, Px24y21, Px23y22 } CellNode (24 @ 22) (20)Px24y23 { Px24y24, Px25y23, Px23y23, Px24y22 } CellNode (24 @ 23) (20)Px24y24 { Px24y23, Px23y24, Px24y25, Px25y24 } CellNode (24 @ 24) (20)Px24y25 { Px25y25, Px24y24, Px23y25, Px24y26 } CellNode (24 @ 25) (20)Px24y26 { Px24y27, Px25y26, Px23y26, Px24y25 } CellNode (24 @ 26) (20)Px24y27 { Px24y26, Px24y28, Px25y27, Px23y27 } CellNode (24 @ 27) (20)Px24y28 { Px25y28, Px23y28, Px24y27, Px24y29 } CellNode (24 @ 28) (20)Px24y29 { Px25y29, Px24y28, Px23y29, Px24y30 } CellNode (24 @ 29) (20)Px24y3 { Px24y2, Px23y3, Px24y4, Px25y3 } CellNode (24 @ 3) (20)Px24y30 { Px25y30, Px24y31, Px23y30, Px24y29 } CellNode (24 @ 30) (20)Px24y31 { Px23y31, Px25y31, Px24y32, Px24y30 } CellNode (24 @ 31) (20)Px24y32 { Px23y32, Px24y31, Px24y33, Px25y32 } CellNode (24 @ 32) (20)Px24y33 { Px25y33, Px24y34, Px24y32, Px23y33 } CellNode (24 @ 33) (20)Px24y34 { Px25y34, Px24y35, Px24y33, Px23y34 } CellNode (24 @ 34) (20)Px24y35 { Px23y35, Px24y34, Px24y36, Px25y35 } CellNode (24 @ 35) (20)Px24y36 { Px25y36, Px23y36, Px24y35, Px24y37 } CellNode (24 @ 36) (20)Px24y37 { Px25y37, Px24y38, Px23y37, Px24y36 } CellNode (24 @ 37) (20)Px24y38 { Px23y38, Px25y38, Px24y39, Px24y37 } CellNode (24 @ 38) (20)Px24y39 { Px23y39, Px24y38, Px24y40, Px25y39 } CellNode (24 @ 39) (20)Px24y4 { Px24y3, Px25y4, Px23y4, Px24y5 } CellNode (24 @ 4) (20)Px24y40 { Px24y41, Px23y40, Px24y39, Px25y40 } CellNode (24 @ 40) (20)Px24y41 { Px24y42, Px23y41, Px25y41, Px24y40 } CellNode (24 @ 41) (20)Px24y42 { Px25y42, Px23y42, Px24y43, Px24y41 } CellNode (24 @ 42) (20)Px24y43 { Px24y44, Px24y42, Px25y43, Px23y43 } CellNode (24 @ 43) (20)Px24y44 { Px25y44, Px23y44, Px24y45, Px24y43 } CellNode (24 @ 44) (20)Px24y45 { Px24y46, Px25y45, Px23y45, Px24y44 } CellNode (24 @ 45) (20)Px24y46 { Px24y45, Px24y47, Px23y46, Px25y46 } CellNode (24 @ 46) (20)Px24y47 { Px23y47, Px25y47, Px24y46, Px24y48 } CellNode (24 @ 47) (20)Px24y48 { Px25y48, Px23y48, Px24y49, Px24y47 } CellNode (24 @ 48) (20)Px24y49 { Px24y50, Px25y49, Px23y49, Px24y48 } CellNode (24 @ 49) (20)Px24y5 { Px23y5, Px24y6, Px25y5, Px24y4 } CellNode (24 @ 5) (20)Px24y50 { Px24y49, Px24y51, Px25y50, Px23y50 } CellNode (24 @ 50) (20)Px24y51 { Px24y50, Px23y51, Px24y52, Px25y51 } CellNode (24 @ 51) (20)Px24y52 { Px25y52, Px24y51, Px23y52, Px24y53 } CellNode (24 @ 52) (20)Px24y53 { Px24y54, Px25y53, Px24y52, Px23y53 } CellNode (24 @ 53) (20)Px24y54 { Px24y53, Px24y55, Px25y54, Px23y54 } CellNode (24 @ 54) (20)Px24y55 { Px23y55, Px24y54, Px24y56, Px25y55 } CellNode (24 @ 55) (20)Px24y56 { Px25y56, Px24y57, Px24y55, Px23y56 } CellNode (24 @ 56) (20)Px24y57 { Px25y57, Px24y58, Px23y57, Px24y56 } CellNode (24 @ 57) (20)Px24y58 { Px24y57, Px23y58, Px24y59, Px25y58 } CellNode (24 @ 58) (20)Px24y59 { Px24y58, Px23y59, Px24y60, Px25y59 } CellNode (24 @ 59) (20)Px24y6 { Px23y6, Px24y7, Px24y5, Px25y6 } CellNode (24 @ 6) (20)Px24y60 { Px25y60, Px23y60, Px24y61, Px24y59 } CellNode (24 @ 60) (20)Px24y61 { Px25y61, Px23y61, Px24y62, Px24y60 } CellNode (24 @ 61) (20)Px24y62 { Px24y61, Px24y63, Px23y62, Px25y62 } CellNode (24 @ 62) (20)Px24y63 { Px23y63, Px25y63, Px24y62, Px24y64 } CellNode (24 @ 63) (20)Px24y64 { Px25y64, Px24y65, Px23y64, Px24y63 } CellNode (24 @ 64) (20)Px24y65 { Px24y66, Px23y65, Px25y65, Px24y64 } CellNode (24 @ 65) (20)Px24y66 { Px24y67, Px24y65, Px25y66, Px23y66 } CellNode (24 @ 66) (20)Px24y67 { Px25y67, Px24y66, Px23y67 } CellNode (24 @ 67) (20)Px24y7 { Px25y7, Px24y6, Px23y7, Px24y8 } CellNode (24 @ 7) (20)Px24y8 { Px23y8, Px25y8, Px24y7, Px24y9 } CellNode (24 @ 8) (20)Px24y9 { Px23y9, Px25y9, Px24y10, Px24y8 } CellNode (24 @ 9) (20)Px25y1 { Px24y1, Px25y2, Px26y1 } CellNode (25 @ 1) (20)Px25y10 { Px25y11, Px25y9, Px24y10, Px26y10 } CellNode (25 @ 10) (20)Px25y11 { Px24y11, Px25y10, Px25y12, Px26y11 } CellNode (25 @ 11) (20)Px25y12 { Px26y12, Px24y12, Px25y11, Px25y13 } CellNode (25 @ 12) (20)Px25y13 { Px25y14, Px26y13, Px24y13, Px25y12 } CellNode (25 @ 13) (20)Px25y14 { Px24y14, Px25y15, Px26y14, Px25y13 } CellNode (25 @ 14) (20)Px25y15 { Px26y15, Px25y14, Px24y15, Px25y16 } CellNode (25 @ 15) (20)Px25y16 { Px25y17, Px26y16, Px24y16, Px25y15 } CellNode (25 @ 16) (20)Px25y17 { Px25y18, Px26y17, Px25y16, Px24y17 } CellNode (25 @ 17) (20)Px25y18 { Px25y17, Px24y18, Px25y19, Px26y18 } CellNode (25 @ 18) (20)Px25y19 { Px26y19, Px24y19, Px25y18, Px25y20 } CellNode (25 @ 19) (20)Px25y2 { Px25y3, Px25y1, Px26y2, Px24y2 } CellNode (25 @ 2) (20)Px25y20 { Px26y20, Px24y20, Px25y21, Px25y19 } CellNode (25 @ 20) (20)Px25y21 { Px26y21, Px25y22, Px24y21, Px25y20 } CellNode (25 @ 21) (20)Px25y22 { Px25y21, Px25y23, Px24y22, Px26y22 } CellNode (25 @ 22) (20)Px25y23 { Px24y23, Px25y24, Px25y22, Px26y23 } CellNode (25 @ 23) (20)Px25y24 { Px26y24, Px24y24, Px25y25, Px25y23 } CellNode (25 @ 24) (20)Px25y25 { Px26y25, Px24y25, Px25y26, Px25y24 } CellNode (25 @ 25) (20)Px25y26 { Px25y27, Px25y25, Px26y26, Px24y26 } CellNode (25 @ 26) (20)Px25y27 { Px26y27, Px25y28, Px24y27, Px25y26 } CellNode (25 @ 27) (20)Px25y28 { Px25y29, Px24y28, Px26y28, Px25y27 } CellNode (25 @ 28) (20)Px25y29 { Px25y28, Px25y30, Px26y29, Px24y29 } CellNode (25 @ 29) (20)Px25y3 { Px24y3, Px25y4, Px26y3, Px25y2 } CellNode (25 @ 3) (20)Px25y30 { Px25y29, Px25y31, Px26y30, Px24y30 } CellNode (25 @ 30) (20)Px25y31 { Px26y31, Px25y30, Px24y31, Px25y32 } CellNode (25 @ 31) (20)Px25y32 { Px25y33, Px26y32, Px25y31, Px24y32 } CellNode (25 @ 32) (20)Px25y33 { Px25y34, Px26y33, Px24y33, Px25y32 } CellNode (25 @ 33) (20)Px25y34 { Px24y34, Px25y33, Px25y35, Px26y34 } CellNode (25 @ 34) (20)Px25y35 { Px26y35, Px25y34, Px24y35, Px25y36 } CellNode (25 @ 35) (20)Px25y36 { Px25y37, Px26y36, Px24y36, Px25y35 } CellNode (25 @ 36) (20)Px25y37 { Px25y36, Px25y38, Px26y37, Px24y37 } CellNode (25 @ 37) (20)Px25y38 { Px26y38, Px25y37, Px24y38, Px25y39 } CellNode (25 @ 38) (20)Px25y39 { Px26y39, Px24y39, Px25y38, Px25y40 } CellNode (25 @ 39) (20)Px25y4 { Px25y3, Px24y4, Px25y5, Px26y4 } CellNode (25 @ 4) (20)Px25y40 { Px26y40, Px25y41, Px24y40, Px25y39 } CellNode (25 @ 40) (20)Px25y41 { Px25y40, Px25y42, Px26y41, Px24y41 } CellNode (25 @ 41) (20)Px25y42 { Px24y42, Px25y41, Px25y43, Px26y42 } CellNode (25 @ 42) (20)Px25y43 { Px26y43, Px25y44, Px25y42, Px24y43 } CellNode (25 @ 43) (20)Px25y44 { Px25y45, Px26y44, Px25y43, Px24y44 } CellNode (25 @ 44) (20)Px25y45 { Px25y44, Px24y45, Px26y45, Px25y46 } CellNode (25 @ 45) (20)Px25y46 { Px25y47, Px24y46, Px25y45, Px26y46 } CellNode (25 @ 46) (20)Px25y47 { Px25y48, Px26y47, Px24y47, Px25y46 } CellNode (25 @ 47) (20)Px25y48 { Px25y47, Px26y48, Px25y49, Px24y48 } CellNode (25 @ 48) (20)Px25y49 { Px25y48, Px24y49, Px25y50, Px26y49 } CellNode (25 @ 49) (20)Px25y5 { Px26y5, Px25y4, Px24y5, Px25y6 } CellNode (25 @ 5) (20)Px25y50 { Px24y50, Px26y50, Px25y49, Px25y51 } CellNode (25 @ 50) (20)Px25y51 { Px26y51, Px24y51, Px25y52, Px25y50 } CellNode (25 @ 51) (20)Px25y52 { Px26y52, Px25y53, Px24y52, Px25y51 } CellNode (25 @ 52) (20)Px25y53 { Px25y52, Px25y54, Px26y53, Px24y53 } CellNode (25 @ 53) (20)Px25y54 { Px26y54, Px24y54, Px25y53, Px25y55 } CellNode (25 @ 54) (20)Px25y55 { Px25y56, Px26y55, Px24y55, Px25y54 } CellNode (25 @ 55) (20)Px25y56 { Px25y57, Px26y56, Px25y55, Px24y56 } CellNode (25 @ 56) (20)Px25y57 { Px24y57, Px25y56, Px25y58, Px26y57 } CellNode (25 @ 57) (20)Px25y58 { Px26y58, Px25y57, Px24y58, Px25y59 } CellNode (25 @ 58) (20)Px25y59 { Px25y60, Px26y59, Px24y59, Px25y58 } CellNode (25 @ 59) (20)Px25y6 { Px25y7, Px24y6, Px25y5, Px26y6 } CellNode (25 @ 6) (20)Px25y60 { Px26y60, Px25y61, Px24y60, Px25y59 } CellNode (25 @ 60) (20)Px25y61 { Px24y61, Px25y60, Px25y62, Px26y61 } CellNode (25 @ 61) (20)Px25y62 { Px25y63, Px25y61, Px24y62, Px26y62 } CellNode (25 @ 62) (20)Px25y63 { Px25y64, Px26y63, Px24y63, Px25y62 } CellNode (25 @ 63) (20)Px25y64 { Px25y63, Px26y64, Px25y65, Px24y64 } CellNode (25 @ 64) (20)Px25y65 { Px25y64, Px24y65, Px25y66, Px26y65 } CellNode (25 @ 65) (20)Px25y66 { Px26y66, Px25y67, Px24y66, Px25y65 } CellNode (25 @ 66) (20)Px25y67 { Px26y67, Px25y66, Px24y67 } CellNode (25 @ 67) (20)Px25y7 { Px24y7, Px25y8, Px26y7, Px25y6 } CellNode (25 @ 7) (20)Px25y8 { Px26y8, Px25y7, Px25y9, Px24y8 } CellNode (25 @ 8) (20)Px25y9 { Px25y10, Px25y8, Px26y9, Px24y9 } CellNode (25 @ 9) (20)Px26y1 { Px27y1, Px25y1, Px26y2 } CellNode (26 @ 1) (20)Px26y10 { Px26y11, Px25y10, Px26y9, Px27y10 } CellNode (26 @ 10) (20)Px26y11 { Px27y11, Px25y11, Px26y12, Px26y10 } CellNode (26 @ 11) (20)Px26y12 { Px27y12, Px26y13, Px25y12, Px26y11 } CellNode (26 @ 12) (20)Px26y13 { Px27y13, Px26y12, Px26y14, Px25y13 } CellNode (26 @ 13) (20)Px26y14 { Px26y15, Px25y14, Px27y14, Px26y13 } CellNode (26 @ 14) (20)Px26y15 { Px26y16, Px27y15, Px25y15, Px26y14 } CellNode (26 @ 15) (20)Px26y16 { Px26y15, Px26y17, Px25y16, Px27y16 } CellNode (26 @ 16) (20)Px26y17 { Px25y17, Px26y18, Px26y16, Px27y17 } CellNode (26 @ 17) (20)Px26y18 { Px26y19, Px27y18, Px25y18, Px26y17 } CellNode (26 @ 18) (20)Px26y19 { Px26y20, Px27y19, Px25y19, Px26y18 } CellNode (26 @ 19) (20)Px26y2 { Px26y1, Px27y2, Px26y3, Px25y2 } CellNode (26 @ 2) (20)Px26y20 { Px26y19, Px26y21, Px27y20, Px25y20 } CellNode (26 @ 20) (20)Px26y21 { Px26y20, Px25y21, Px26y22, Px27y21 } CellNode (26 @ 21) (20)Px26y22 { Px27y22, Px25y22, Px26y21, Px26y23 } CellNode (26 @ 22) (20)Px26y23 { Px26y24, Px27y23, Px25y23, Px26y22 } CellNode (26 @ 23) (20)Px26y24 { Px25y24, Px26y25, Px27y24, Px26y23 } CellNode (26 @ 24) (20)Px26y25 { Px27y25, Px26y24, Px25y25, Px26y26 } CellNode (26 @ 25) (20)Px26y26 { Px26y27, Px27y26, Px26y25, Px25y26 } CellNode (26 @ 26) (20)Px26y27 { Px26y28, Px27y27, Px26y26, Px25y27 } CellNode (26 @ 27) (20)Px26y28 { Px25y28, Px26y27, Px26y29, Px27y28 } CellNode (26 @ 28) (20)Px26y29 { Px27y29, Px26y28, Px25y29, Px26y30 } CellNode (26 @ 29) (20)Px26y3 { Px25y3, Px26y2, Px27y3, Px26y4 } CellNode (26 @ 3) (20)Px26y30 { Px27y30, Px25y30, Px26y31, Px26y29 } CellNode (26 @ 30) (20)Px26y31 { Px26y32, Px25y31, Px27y31, Px26y30 } CellNode (26 @ 31) (20)Px26y32 { Px26y31, Px26y33, Px27y32, Px25y32 } CellNode (26 @ 32) (20)Px26y33 { Px25y33, Px26y34, Px26y32, Px27y33 } CellNode (26 @ 33) (20)Px26y34 { Px27y34, Px25y34, Px26y35, Px26y33 } CellNode (26 @ 34) (20)Px26y35 { Px26y36, Px25y35, Px27y35, Px26y34 } CellNode (26 @ 35) (20)Px26y36 { Px27y36, Px26y35, Px26y37, Px25y36 } CellNode (26 @ 36) (20)Px26y37 { Px26y38, Px25y37, Px27y37, Px26y36 } CellNode (26 @ 37) (20)Px26y38 { Px27y38, Px25y38, Px26y39, Px26y37 } CellNode (26 @ 38) (20)Px26y39 { Px26y38, Px26y40, Px27y39, Px25y39 } CellNode (26 @ 39) (20)Px26y4 { Px26y5, Px25y4, Px27y4, Px26y3 } CellNode (26 @ 4) (20)Px26y40 { Px26y39, Px26y41, Px27y40, Px25y40 } CellNode (26 @ 40) (20)Px26y41 { Px27y41, Px26y40, Px25y41, Px26y42 } CellNode (26 @ 41) (20)Px26y42 { Px26y43, Px27y42, Px25y42, Px26y41 } CellNode (26 @ 42) (20)Px26y43 { Px26y44, Px27y43, Px25y43, Px26y42 } CellNode (26 @ 43) (20)Px26y44 { Px26y43, Px25y44, Px26y45, Px27y44 } CellNode (26 @ 44) (20)Px26y45 { Px27y45, Px25y45, Px26y44, Px26y46 } CellNode (26 @ 45) (20)Px26y46 { Px26y47, Px27y46, Px25y46, Px26y45 } CellNode (26 @ 46) (20)Px26y47 { Px26y46, Px26y48, Px27y47, Px25y47 } CellNode (26 @ 47) (20)Px26y48 { Px27y48, Px25y48, Px26y47, Px26y49 } CellNode (26 @ 48) (20)Px26y49 { Px27y49, Px25y49, Px26y48, Px26y50 } CellNode (26 @ 49) (20)Px26y5 { Px26y4, Px25y5, Px26y6, Px27y5 } CellNode (26 @ 5) (20)Px26y50 { Px26y51, Px27y50, Px25y50, Px26y49 } CellNode (26 @ 50) (20)Px26y51 { Px26y50, Px26y52, Px27y51, Px25y51 } CellNode (26 @ 51) (20)Px26y52 { Px25y52, Px26y51, Px27y52, Px26y53 } CellNode (26 @ 52) (20)Px26y53 { Px26y54, Px27y53, Px25y53, Px26y52 } CellNode (26 @ 53) (20)Px26y54 { Px27y54, Px26y55, Px25y54, Px26y53 } CellNode (26 @ 54) (20)Px26y55 { Px26y54, Px27y55, Px25y55, Px26y56 } CellNode (26 @ 55) (20)Px26y56 { Px25y56, Px27y56, Px26y55, Px26y57 } CellNode (26 @ 56) (20)Px26y57 { Px26y58, Px25y57, Px27y57, Px26y56 } CellNode (26 @ 57) (20)Px26y58 { Px27y58, Px25y58, Px26y59, Px26y57 } CellNode (26 @ 58) (20)Px26y59 { Px26y58, Px26y60, Px27y59, Px25y59 } CellNode (26 @ 59) (20)Px26y6 { Px27y6, Px26y5, Px26y7, Px25y6 } CellNode (26 @ 6) (20)Px26y60 { Px25y60, Px26y59, Px26y61, Px27y60 } CellNode (26 @ 60) (20)Px26y61 { Px27y61, Px26y60, Px25y61, Px26y62 } CellNode (26 @ 61) (20)Px26y62 { Px26y63, Px27y62, Px26y61, Px25y62 } CellNode (26 @ 62) (20)Px26y63 { Px25y63, Px26y64, Px27y63, Px26y62 } CellNode (26 @ 63) (20)Px26y64 { Px27y64, Px25y64, Px26y63, Px26y65 } CellNode (26 @ 64) (20)Px26y65 { Px26y66, Px27y65, Px26y64, Px25y65 } CellNode (26 @ 65) (20)Px26y66 { Px26y67, Px27y66, Px25y66, Px26y65 } CellNode (26 @ 66) (20)Px26y67 { Px26y66, Px27y67, Px25y67 } CellNode (26 @ 67) (20)Px26y7 { Px26y8, Px25y7, Px27y7, Px26y6 } CellNode (26 @ 7) (20)Px26y8 { Px25y8, Px26y9, Px27y8, Px26y7 } CellNode (26 @ 8) (20)Px26y9 { Px27y9, Px26y8, Px25y9, Px26y10 } CellNode (26 @ 9) (20)Px27y1 { Px27y2, Px28y1, Px26y1 } CellNode (27 @ 1) (20)Px27y10 { Px27y9, Px27y11, Px28y10, Px26y10 } CellNode (27 @ 10) (20)Px27y11 { Px26y11, Px27y12, Px28y11, Px27y10 } CellNode (27 @ 11) (20)Px27y12 { Px28y12, Px27y11, Px26y12, Px27y13 } CellNode (27 @ 12) (20)Px27y13 { Px27y14, Px28y13, Px27y12, Px26y13 } CellNode (27 @ 13) (20)Px27y14 { Px27y15, Px28y14, Px26y14, Px27y13 } CellNode (27 @ 14) (20)Px27y15 { Px26y15, Px27y14, Px27y16, Px28y15 } CellNode (27 @ 15) (20)Px27y16 { Px28y16, Px26y16, Px27y15, Px27y17 } CellNode (27 @ 16) (20)Px27y17 { Px27y18, Px28y17, Px26y17, Px27y16 } CellNode (27 @ 17) (20)Px27y18 { Px26y18, Px27y19, Px28y18, Px27y17 } CellNode (27 @ 18) (20)Px27y19 { Px26y19, Px27y18, Px27y20, Px28y19 } CellNode (27 @ 19) (20)Px27y2 { Px26y2, Px27y3, Px28y2, Px27y1 } CellNode (27 @ 2) (20)Px27y20 { Px26y20, Px28y20, Px27y19, Px27y21 } CellNode (27 @ 20) (20)Px27y21 { Px27y22, Px26y21, Px28y21, Px27y20 } CellNode (27 @ 21) (20)Px27y22 { Px28y22, Px26y22, Px27y23, Px27y21 } CellNode (27 @ 22) (20)Px27y23 { Px26y23, Px27y22, Px28y23, Px27y24 } CellNode (27 @ 23) (20)Px27y24 { Px28y24, Px26y24, Px27y25, Px27y23 } CellNode (27 @ 24) (20)Px27y25 { Px27y26, Px26y25, Px28y25, Px27y24 } CellNode (27 @ 25) (20)Px27y26 { Px27y25, Px28y26, Px26y26, Px27y27 } CellNode (27 @ 26) (20)Px27y27 { Px26y27, Px27y28, Px27y26, Px28y27 } CellNode (27 @ 27) (20)Px27y28 { Px28y28, Px27y29, Px26y28, Px27y27 } CellNode (27 @ 28) (20)Px27y29 { Px27y30, Px28y29, Px26y29, Px27y28 } CellNode (27 @ 29) (20)Px27y3 { Px27y2, Px28y3, Px27y4, Px26y3 } CellNode (27 @ 3) (20)Px27y30 { Px27y29, Px27y31, Px28y30, Px26y30 } CellNode (27 @ 30) (20)Px27y31 { Px27y30, Px26y31, Px27y32, Px28y31 } CellNode (27 @ 31) (20)Px27y32 { Px28y32, Px26y32, Px27y31, Px27y33 } CellNode (27 @ 32) (20)Px27y33 { Px27y34, Px28y33, Px26y33, Px27y32 } CellNode (27 @ 33) (20)Px27y34 { Px26y34, Px27y35, Px28y34, Px27y33 } CellNode (27 @ 34) (20)Px27y35 { Px28y35, Px27y34, Px26y35, Px27y36 } CellNode (27 @ 35) (20)Px27y36 { Px27y37, Px28y36, Px26y36, Px27y35 } CellNode (27 @ 36) (20)Px27y37 { Px27y38, Px28y37, Px27y36, Px26y37 } CellNode (27 @ 37) (20)Px27y38 { Px26y38, Px27y37, Px27y39, Px28y38 } CellNode (27 @ 38) (20)Px27y39 { Px28y39, Px26y39, Px27y38, Px27y40 } CellNode (27 @ 39) (20)Px27y4 { Px27y5, Px27y3, Px28y4, Px26y4 } CellNode (27 @ 4) (20)Px27y40 { Px27y41, Px26y40, Px28y40, Px27y39 } CellNode (27 @ 40) (20)Px27y41 { Px28y41, Px26y41, Px27y42, Px27y40 } CellNode (27 @ 41) (20)Px27y42 { Px27y41, Px28y42, Px27y43, Px26y42 } CellNode (27 @ 42) (20)Px27y43 { Px26y43, Px28y43, Px27y42, Px27y44 } CellNode (27 @ 43) (20)Px27y44 { Px27y45, Px26y44, Px28y44, Px27y43 } CellNode (27 @ 44) (20)Px27y45 { Px28y45, Px27y46, Px26y45, Px27y44 } CellNode (27 @ 45) (20)Px27y46 { Px26y46, Px27y45, Px28y46, Px27y47 } CellNode (27 @ 46) (20)Px27y47 { Px27y48, Px28y47, Px26y47, Px27y46 } CellNode (27 @ 47) (20)Px27y48 { Px27y49, Px28y48, Px26y48, Px27y47 } CellNode (27 @ 48) (20)Px27y49 { Px27y48, Px27y50, Px28y49, Px26y49 } CellNode (27 @ 49) (20)Px27y5 { Px26y5, Px27y6, Px27y4, Px28y5 } CellNode (27 @ 5) (20)Px27y50 { Px27y49, Px27y51, Px28y50, Px26y50 } CellNode (27 @ 50) (20)Px27y51 { Px28y51, Px26y51, Px27y50, Px27y52 } CellNode (27 @ 51) (20)Px27y52 { Px27y53, Px28y52, Px26y52, Px27y51 } CellNode (27 @ 52) (20)Px27y53 { Px27y54, Px28y53, Px27y52, Px26y53 } CellNode (27 @ 53) (20)Px27y54 { Px26y54, Px27y53, Px27y55, Px28y54 } CellNode (27 @ 54) (20)Px27y55 { Px28y55, Px27y54, Px26y55, Px27y56 } CellNode (27 @ 55) (20)Px27y56 { Px27y57, Px28y56, Px27y55, Px26y56 } CellNode (27 @ 56) (20)Px27y57 { Px27y56, Px27y58, Px28y57, Px26y57 } CellNode (27 @ 57) (20)Px27y58 { Px28y58, Px26y58, Px27y57, Px27y59 } CellNode (27 @ 58) (20)Px27y59 { Px28y59, Px27y58, Px26y59, Px27y60 } CellNode (27 @ 59) (20)Px27y6 { Px28y6, Px27y7, Px26y6, Px27y5 } CellNode (27 @ 6) (20)Px27y60 { Px28y60, Px27y61, Px26y60, Px27y59 } CellNode (27 @ 60) (20)Px27y61 { Px27y62, Px28y61, Px26y61, Px27y60 } CellNode (27 @ 61) (20)Px27y62 { Px27y63, Px27y61, Px28y62, Px26y62 } CellNode (27 @ 62) (20)Px27y63 { Px28y63, Px26y63, Px27y64, Px27y62 } CellNode (27 @ 63) (20)Px27y64 { Px27y65, Px26y64, Px28y64, Px27y63 } CellNode (27 @ 64) (20)Px27y65 { Px27y64, Px28y65, Px27y66, Px26y65 } CellNode (27 @ 65) (20)Px27y66 { Px26y66, Px27y67, Px27y65, Px28y66 } CellNode (27 @ 66) (20)Px27y67 { Px26y67, Px27y66, Px28y67 } CellNode (27 @ 67) (20)Px27y7 { Px28y7, Px27y6, Px26y7, Px27y8 } CellNode (27 @ 7) (20)Px27y8 { Px27y9, Px26y8, Px27y7, Px28y8 } CellNode (27 @ 8) (20)Px27y9 { Px27y8, Px26y9, Px28y9, Px27y10 } CellNode (27 @ 9) (20)Px28y1 { Px27y1, Px28y2, Px29y1 } CellNode (28 @ 1) (20)Px28y10 { Px29y10, Px28y11, Px28y9, Px27y10 } CellNode (28 @ 10) (20)Px28y11 { Px29y11, Px27y11, Px28y12, Px28y10 } CellNode (28 @ 11) (20)Px28y12 { Px28y13, Px27y12, Px29y12, Px28y11 } CellNode (28 @ 12) (20)Px28y13 { Px28y12, Px29y13, Px28y14, Px27y13 } CellNode (28 @ 13) (20)Px28y14 { Px27y14, Px28y15, Px28y13, Px29y14 } CellNode (28 @ 14) (20)Px28y15 { Px28y16, Px27y15, Px29y15, Px28y14 } CellNode (28 @ 15) (20)Px28y16 { Px29y16, Px27y16, Px28y17, Px28y15 } CellNode (28 @ 16) (20)Px28y17 { Px28y16, Px28y18, Px29y17, Px27y17 } CellNode (28 @ 17) (20)Px28y18 { Px29y18, Px27y18, Px28y17, Px28y19 } CellNode (28 @ 18) (20)Px28y19 { Px29y19, Px27y19, Px28y18, Px28y20 } CellNode (28 @ 19) (20)Px28y2 { Px27y2, Px28y3, Px28y1, Px29y2 } CellNode (28 @ 2) (20)Px28y20 { Px28y21, Px29y20, Px27y20, Px28y19 } CellNode (28 @ 20) (20)Px28y21 { Px28y20, Px28y22, Px29y21, Px27y21 } CellNode (28 @ 21) (20)Px28y22 { Px28y21, Px27y22, Px28y23, Px29y22 } CellNode (28 @ 22) (20)Px28y23 { Px28y24, Px29y23, Px28y22, Px27y23 } CellNode (28 @ 23) (20)Px28y24 { Px28y25, Px29y24, Px28y23, Px27y24 } CellNode (28 @ 24) (20)Px28y25 { Px28y24, Px27y25, Px28y26, Px29y25 } CellNode (28 @ 25) (20)Px28y26 { Px28y27, Px27y26, Px28y25, Px29y26 } CellNode (28 @ 26) (20)Px28y27 { Px29y27, Px28y28, Px28y26, Px27y27 } CellNode (28 @ 27) (20)Px28y28 { Px27y28, Px29y28, Px28y29, Px28y27 } CellNode (28 @ 28) (20)Px28y29 { Px28y28, Px27y29, Px28y30, Px29y29 } CellNode (28 @ 29) (20)Px28y3 { Px27y3, Px28y4, Px28y2, Px29y3 } CellNode (28 @ 3) (20)Px28y30 { Px27y30, Px29y30, Px28y29, Px28y31 } CellNode (28 @ 30) (20)Px28y31 { Px28y32, Px27y31, Px29y31, Px28y30 } CellNode (28 @ 31) (20)Px28y32 { Px28y33, Px27y32, Px29y32, Px28y31 } CellNode (28 @ 32) (20)Px28y33 { Px28y34, Px28y32, Px29y33, Px27y33 } CellNode (28 @ 33) (20)Px28y34 { Px29y34, Px27y34, Px28y35, Px28y33 } CellNode (28 @ 34) (20)Px28y35 { Px28y36, Px27y35, Px29y35, Px28y34 } CellNode (28 @ 35) (20)Px28y36 { Px28y35, Px28y37, Px29y36, Px27y36 } CellNode (28 @ 36) (20)Px28y37 { Px28y38, Px27y37, Px28y36, Px29y37 } CellNode (28 @ 37) (20)Px28y38 { Px28y39, Px27y38, Px29y38, Px28y37 } CellNode (28 @ 38) (20)Px28y39 { Px28y40, Px29y39, Px27y39, Px28y38 } CellNode (28 @ 39) (20)Px28y4 { Px28y3, Px29y4, Px27y4, Px28y5 } CellNode (28 @ 4) (20)Px28y40 { Px28y39, Px28y41, Px29y40, Px27y40 } CellNode (28 @ 40) (20)Px28y41 { Px27y41, Px28y40, Px28y42, Px29y41 } CellNode (28 @ 41) (20)Px28y42 { Px29y42, Px28y41, Px27y42, Px28y43 } CellNode (28 @ 42) (20)Px28y43 { Px28y44, Px29y43, Px28y42, Px27y43 } CellNode (28 @ 43) (20)Px28y44 { Px28y43, Px28y45, Px29y44, Px27y44 } CellNode (28 @ 44) (20)Px28y45 { Px29y45, Px27y45, Px28y44, Px28y46 } CellNode (28 @ 45) (20)Px28y46 { Px28y47, Px29y46, Px27y46, Px28y45 } CellNode (28 @ 46) (20)Px28y47 { Px28y48, Px29y47, Px28y46, Px27y47 } CellNode (28 @ 47) (20)Px28y48 { Px27y48, Px28y47, Px28y49, Px29y48 } CellNode (28 @ 48) (20)Px28y49 { Px29y49, Px28y48, Px27y49, Px28y50 } CellNode (28 @ 49) (20)Px28y5 { Px28y6, Px28y4, Px29y5, Px27y5 } CellNode (28 @ 5) (20)Px28y50 { Px28y51, Px27y50, Px29y50, Px28y49 } CellNode (28 @ 50) (20)Px28y51 { Px28y52, Px27y51, Px29y51, Px28y50 } CellNode (28 @ 51) (20)Px28y52 { Px28y51, Px29y52, Px28y53, Px27y52 } CellNode (28 @ 52) (20)Px28y53 { Px27y53, Px29y53, Px28y52, Px28y54 } CellNode (28 @ 53) (20)Px28y54 { Px29y54, Px27y54, Px28y55, Px28y53 } CellNode (28 @ 54) (20)Px28y55 { Px29y55, Px27y55, Px28y56, Px28y54 } CellNode (28 @ 55) (20)Px28y56 { Px27y56, Px28y55, Px29y56, Px28y57 } CellNode (28 @ 56) (20)Px28y57 { Px29y57, Px27y57, Px28y58, Px28y56 } CellNode (28 @ 57) (20)Px28y58 { Px28y59, Px27y58, Px29y58, Px28y57 } CellNode (28 @ 58) (20)Px28y59 { Px28y58, Px28y60, Px29y59, Px27y59 } CellNode (28 @ 59) (20)Px28y6 { Px28y7, Px27y6, Px29y6, Px28y5 } CellNode (28 @ 6) (20)Px28y60 { Px28y59, Px28y61, Px29y60, Px27y60 } CellNode (28 @ 60) (20)Px28y61 { Px29y61, Px28y60, Px27y61, Px28y62 } CellNode (28 @ 61) (20)Px28y62 { Px28y63, Px29y62, Px27y62, Px28y61 } CellNode (28 @ 62) (20)Px28y63 { Px28y64, Px29y63, Px28y62, Px27y63 } CellNode (28 @ 63) (20)Px28y64 { Px28y63, Px27y64, Px28y65, Px29y64 } CellNode (28 @ 64) (20)Px28y65 { Px29y65, Px27y65, Px28y64, Px28y66 } CellNode (28 @ 65) (20)Px28y66 { Px28y67, Px29y66, Px28y65, Px27y66 } CellNode (28 @ 66) (20)Px28y67 { Px28y66, Px29y67, Px27y67 } CellNode (28 @ 67) (20)Px28y7 { Px28y6, Px28y8, Px27y7, Px29y7 } CellNode (28 @ 7) (20)Px28y8 { Px29y8, Px28y7, Px28y9, Px27y8 } CellNode (28 @ 8) (20)Px28y9 { Px27y9, Px29y9, Px28y10, Px28y8 } CellNode (28 @ 9) (20)Px29y1 { Px28y1, Px29y2, Px30y1 } CellNode (29 @ 1) (20)Px29y10 { Px29y11, Px30y10, Px29y9, Px28y10 } CellNode (29 @ 10) (20)Px29y11 { Px29y12, Px30y11, Px28y11, Px29y10 } CellNode (29 @ 11) (20)Px29y12 { Px29y11, Px28y12, Px29y13, Px30y12 } CellNode (29 @ 12) (20)Px29y13 { Px30y13, Px28y13, Px29y12, Px29y14 } CellNode (29 @ 13) (20)Px29y14 { Px29y15, Px30y14, Px29y13, Px28y14 } CellNode (29 @ 14) (20)Px29y15 { Px28y15, Px29y16, Px30y15, Px29y14 } CellNode (29 @ 15) (20)Px29y16 { Px30y16, Px29y15, Px28y16, Px29y17 } CellNode (29 @ 16) (20)Px29y17 { Px29y18, Px30y17, Px29y16, Px28y17 } CellNode (29 @ 17) (20)Px29y18 { Px29y19, Px28y18, Px30y18, Px29y17 } CellNode (29 @ 18) (20)Px29y19 { Px29y18, Px29y20, Px28y19, Px30y19 } CellNode (29 @ 19) (20)Px29y2 { Px29y1, Px30y2, Px28y2, Px29y3 } CellNode (29 @ 2) (20)Px29y20 { Px29y19, Px29y21, Px30y20, Px28y20 } CellNode (29 @ 20) (20)Px29y21 { Px30y21, Px28y21, Px29y20, Px29y22 } CellNode (29 @ 21) (20)Px29y22 { Px29y23, Px30y22, Px28y22, Px29y21 } CellNode (29 @ 22) (20)Px29y23 { Px29y24, Px30y23, Px28y23, Px29y22 } CellNode (29 @ 23) (20)Px29y24 { Px28y24, Px29y23, Px29y25, Px30y24 } CellNode (29 @ 24) (20)Px29y25 { Px30y25, Px28y25, Px29y24, Px29y26 } CellNode (29 @ 25) (20)Px29y26 { Px29y27, Px30y26, Px28y26, Px29y25 } CellNode (29 @ 26) (20)Px29y27 { Px28y27, Px29y28, Px30y27, Px29y26 } CellNode (29 @ 27) (20)Px29y28 { Px30y28, Px29y27, Px28y28, Px29y29 } CellNode (29 @ 28) (20)Px29y29 { Px30y29, Px29y28, Px28y29, Px29y30 } CellNode (29 @ 29) (20)Px29y3 { Px28y3, Px29y4, Px29y2, Px30y3 } CellNode (29 @ 3) (20)Px29y30 { Px29y31, Px30y30, Px28y30, Px29y29 } CellNode (29 @ 30) (20)Px29y31 { Px29y30, Px29y32, Px30y31, Px28y31 } CellNode (29 @ 31) (20)Px29y32 { Px30y32, Px28y32, Px29y31, Px29y33 } CellNode (29 @ 32) (20)Px29y33 { Px29y34, Px30y33, Px28y33, Px29y32 } CellNode (29 @ 33) (20)Px29y34 { Px29y35, Px30y34, Px29y33, Px28y34 } CellNode (29 @ 34) (20)Px29y35 { Px29y34, Px28y35, Px29y36, Px30y35 } CellNode (29 @ 35) (20)Px29y36 { Px30y36, Px28y36, Px29y35, Px29y37 } CellNode (29 @ 36) (20)Px29y37 { Px29y38, Px30y37, Px28y37, Px29y36 } CellNode (29 @ 37) (20)Px29y38 { Px28y38, Px29y39, Px30y38, Px29y37 } CellNode (29 @ 38) (20)Px29y39 { Px30y39, Px28y39, Px29y38, Px29y40 } CellNode (29 @ 39) (20)Px29y4 { Px28y4, Px29y5, Px29y3, Px30y4 } CellNode (29 @ 4) (20)Px29y40 { Px28y40, Px29y41, Px29y39, Px30y40 } CellNode (29 @ 40) (20)Px29y41 { Px30y41, Px28y41, Px29y42, Px29y40 } CellNode (29 @ 41) (20)Px29y42 { Px30y42, Px28y42, Px29y43, Px29y41 } CellNode (29 @ 42) (20)Px29y43 { Px28y43, Px29y42, Px30y43, Px29y44 } CellNode (29 @ 43) (20)Px29y44 { Px29y45, Px28y44, Px30y44, Px29y43 } CellNode (29 @ 44) (20)Px29y45 { Px30y45, Px29y46, Px28y45, Px29y44 } CellNode (29 @ 45) (20)Px29y46 { Px29y45, Px29y47, Px28y46, Px30y46 } CellNode (29 @ 46) (20)Px29y47 { Px28y47, Px29y48, Px29y46, Px30y47 } CellNode (29 @ 47) (20)Px29y48 { Px30y48, Px29y49, Px28y48, Px29y47 } CellNode (29 @ 48) (20)Px29y49 { Px29y50, Px30y49, Px28y49, Px29y48 } CellNode (29 @ 49) (20)Px29y5 { Px29y4, Px30y5, Px29y6, Px28y5 } CellNode (29 @ 5) (20)Px29y50 { Px29y49, Px29y51, Px30y50, Px28y50 } CellNode (29 @ 50) (20)Px29y51 { Px28y51, Px29y50, Px29y52, Px30y51 } CellNode (29 @ 51) (20)Px29y52 { Px30y52, Px28y52, Px29y51, Px29y53 } CellNode (29 @ 52) (20)Px29y53 { Px29y54, Px30y53, Px29y52, Px28y53 } CellNode (29 @ 53) (20)Px29y54 { Px29y53, Px29y55, Px30y54, Px28y54 } CellNode (29 @ 54) (20)Px29y55 { Px30y55, Px29y54, Px28y55, Px29y56 } CellNode (29 @ 55) (20)Px29y56 { Px29y57, Px30y56, Px29y55, Px28y56 } CellNode (29 @ 56) (20)Px29y57 { Px29y58, Px30y57, Px29y56, Px28y57 } CellNode (29 @ 57) (20)Px29y58 { Px29y57, Px28y58, Px29y59, Px30y58 } CellNode (29 @ 58) (20)Px29y59 { Px30y59, Px28y59, Px29y58, Px29y60 } CellNode (29 @ 59) (20)Px29y6 { Px28y6, Px29y5, Px30y6, Px29y7 } CellNode (29 @ 6) (20)Px29y60 { Px30y60, Px28y60, Px29y61, Px29y59 } CellNode (29 @ 60) (20)Px29y61 { Px30y61, Px28y61, Px29y62, Px29y60 } CellNode (29 @ 61) (20)Px29y62 { Px29y61, Px29y63, Px28y62, Px30y62 } CellNode (29 @ 62) (20)Px29y63 { Px28y63, Px30y63, Px29y62, Px29y64 } CellNode (29 @ 63) (20)Px29y64 { Px29y65, Px30y64, Px28y64, Px29y63 } CellNode (29 @ 64) (20)Px29y65 { Px29y66, Px28y65, Px30y65, Px29y64 } CellNode (29 @ 65) (20)Px29y66 { Px30y66, Px29y65, Px29y67, Px28y66 } CellNode (29 @ 66) (20)Px29y67 { Px28y67, Px29y66, Px30y67 } CellNode (29 @ 67) (20)Px29y7 { Px28y7, Px29y8, Px29y6, Px30y7 } CellNode (29 @ 7) (20)Px29y8 { Px30y8, Px29y9, Px28y8, Px29y7 } CellNode (29 @ 8) (20)Px29y9 { Px29y8, Px30y9, Px28y9, Px29y10 } CellNode (29 @ 9) (20)Px2y1 { Px3y1, Px1y1, Px2y2 } CellNode (2 @ 1) (20)Px2y10 { Px2y9, Px2y11, Px3y10, Px1y10 } CellNode (2 @ 10) (20)Px2y11 { Px3y11, Px2y10, Px1y11, Px2y12 } CellNode (2 @ 11) (20)Px2y12 { Px2y13, Px3y12, Px2y11, Px1y12 } CellNode (2 @ 12) (20)Px2y13 { Px2y14, Px3y13, Px2y12, Px1y13 } CellNode (2 @ 13) (20)Px2y14 { Px2y13, Px1y14, Px2y15, Px3y14 } CellNode (2 @ 14) (20)Px2y15 { Px3y15, Px1y15, Px2y14, Px2y16 } CellNode (2 @ 15) (20)Px2y16 { Px2y17, Px3y16, Px1y16, Px2y15 } CellNode (2 @ 16) (20)Px2y17 { Px1y17, Px2y18, Px3y17, Px2y16 } CellNode (2 @ 17) (20)Px2y18 { Px3y18, Px1y18, Px2y17, Px2y19 } CellNode (2 @ 18) (20)Px2y19 { Px3y19, Px2y18, Px1y19, Px2y20 } CellNode (2 @ 19) (20)Px2y2 { Px2y3, Px1y2, Px3y2, Px2y1 } CellNode (2 @ 2) (20)Px2y20 { Px2y21, Px3y20, Px1y20, Px2y19 } CellNode (2 @ 20) (20)Px2y21 { Px2y20, Px3y21, Px2y22, Px1y21 } CellNode (2 @ 21) (20)Px2y22 { Px2y21, Px1y22, Px3y22, Px2y23 } CellNode (2 @ 22) (20)Px2y23 { Px3y23, Px2y24, Px1y23, Px2y22 } CellNode (2 @ 23) (20)Px2y24 { Px3y24, Px2y25, Px1y24, Px2y23 } CellNode (2 @ 24) (20)Px2y25 { Px2y24, Px1y25, Px3y25, Px2y26 } CellNode (2 @ 25) (20)Px2y26 { Px2y27, Px2y25, Px1y26, Px3y26 } CellNode (2 @ 26) (20)Px2y27 { Px2y28, Px3y27, Px2y26, Px1y27 } CellNode (2 @ 27) (20)Px2y28 { Px1y28, Px2y29, Px3y28, Px2y27 } CellNode (2 @ 28) (20)Px2y29 { Px2y28, Px1y29, Px2y30, Px3y29 } CellNode (2 @ 29) (20)Px2y3 { Px3y3, Px2y4, Px1y3, Px2y2 } CellNode (2 @ 3) (20)Px2y30 { Px1y30, Px2y31, Px2y29, Px3y30 } CellNode (2 @ 30) (20)Px2y31 { Px2y32, Px1y31, Px3y31, Px2y30 } CellNode (2 @ 31) (20)Px2y32 { Px2y33, Px3y32, Px1y32, Px2y31 } CellNode (2 @ 32) (20)Px2y33 { Px2y32, Px2y34, Px3y33, Px1y33 } CellNode (2 @ 33) (20)Px2y34 { Px3y34, Px1y34, Px2y33, Px2y35 } CellNode (2 @ 34) (20)Px2y35 { Px2y36, Px3y35, Px1y35, Px2y34 } CellNode (2 @ 35) (20)Px2y36 { Px2y37, Px3y36, Px2y35, Px1y36 } CellNode (2 @ 36) (20)Px2y37 { Px1y37, Px2y36, Px2y38, Px3y37 } CellNode (2 @ 37) (20)Px2y38 { Px3y38, Px1y38, Px2y37, Px2y39 } CellNode (2 @ 38) (20)Px2y39 { Px2y40, Px3y39, Px1y39, Px2y38 } CellNode (2 @ 39) (20)Px2y4 { Px3y4, Px2y3, Px2y5, Px1y4 } CellNode (2 @ 4) (20)Px2y40 { Px2y41, Px3y40, Px1y40, Px2y39 } CellNode (2 @ 40) (20)Px2y41 { Px2y40, Px1y41, Px3y41, Px2y42 } CellNode (2 @ 41) (20)Px2y42 { Px2y43, Px1y42, Px2y41, Px3y42 } CellNode (2 @ 42) (20)Px2y43 { Px3y43, Px2y44, Px2y42, Px1y43 } CellNode (2 @ 43) (20)Px2y44 { Px2y43, Px3y44, Px2y45, Px1y44 } CellNode (2 @ 44) (20)Px2y45 { Px1y45, Px2y44, Px2y46, Px3y45 } CellNode (2 @ 45) (20)Px2y46 { Px3y46, Px2y47, Px1y46, Px2y45 } CellNode (2 @ 46) (20)Px2y47 { Px3y47, Px2y48, Px2y46, Px1y47 } CellNode (2 @ 47) (20)Px2y48 { Px1y48, Px2y47, Px2y49, Px3y48 } CellNode (2 @ 48) (20)Px2y49 { Px1y49, Px2y48, Px2y50, Px3y49 } CellNode (2 @ 49) (20)Px2y5 { Px1y5, Px2y6, Px3y5, Px2y4 } CellNode (2 @ 5) (20)Px2y50 { Px3y50, Px1y50, Px2y51, Px2y49 } CellNode (2 @ 50) (20)Px2y51 { Px3y51, Px1y51, Px2y52, Px2y50 } CellNode (2 @ 51) (20)Px2y52 { Px2y51, Px3y52, Px1y52, Px2y53 } CellNode (2 @ 52) (20)Px2y53 { Px1y53, Px3y53, Px2y52, Px2y54 } CellNode (2 @ 53) (20)Px2y54 { Px2y55, Px3y54, Px1y54, Px2y53 } CellNode (2 @ 54) (20)Px2y55 { Px3y55, Px1y55, Px2y56, Px2y54 } CellNode (2 @ 55) (20)Px2y56 { Px2y57, Px2y55, Px3y56, Px1y56 } CellNode (2 @ 56) (20)Px2y57 { Px2y58, Px3y57, Px1y57, Px2y56 } CellNode (2 @ 57) (20)Px2y58 { Px3y58, Px1y58, Px2y59, Px2y57 } CellNode (2 @ 58) (20)Px2y59 { Px2y58, Px2y60, Px3y59, Px1y59 } CellNode (2 @ 59) (20)Px2y6 { Px1y6, Px2y7, Px3y6, Px2y5 } CellNode (2 @ 6) (20)Px2y60 { Px2y59, Px2y61, Px3y60, Px1y60 } CellNode (2 @ 60) (20)Px2y61 { Px3y61, Px2y60, Px1y61, Px2y62 } CellNode (2 @ 61) (20)Px2y62 { Px2y63, Px3y62, Px2y61, Px1y62 } CellNode (2 @ 62) (20)Px2y63 { Px2y64, Px3y63, Px2y62, Px1y63 } CellNode (2 @ 63) (20)Px2y64 { Px2y63, Px1y64, Px2y65, Px3y64 } CellNode (2 @ 64) (20)Px2y65 { Px3y65, Px1y65, Px2y64, Px2y66 } CellNode (2 @ 65) (20)Px2y66 { Px2y67, Px3y66, Px1y66, Px2y65 } CellNode (2 @ 66) (20)Px2y67 { Px2y66, Px1y67, Px3y67 } CellNode (2 @ 67) (20)Px2y7 { Px2y6, Px3y7, Px1y7, Px2y8 } CellNode (2 @ 7) (20)Px2y8 { Px2y9, Px2y7, Px3y8, Px1y8 } CellNode (2 @ 8) (20)Px2y9 { Px1y9, Px2y10, Px2y8, Px3y9 } CellNode (2 @ 9) (20)Px30y1 { Px29y1, Px30y2, Px31y1 } CellNode (30 @ 1) (20)Px30y10 { Px30y9, Px30y11, Px29y10, Px31y10 } CellNode (30 @ 10) (20)Px30y11 { Px29y11, Px31y11, Px30y10, Px30y12 } CellNode (30 @ 11) (20)Px30y12 { Px30y13, Px29y12, Px31y12, Px30y11 } CellNode (30 @ 12) (20)Px30y13 { Px31y13, Px29y13, Px30y14, Px30y12 } CellNode (30 @ 13) (20)Px30y14 { Px31y14, Px30y13, Px30y15, Px29y14 } CellNode (30 @ 14) (20)Px30y15 { Px31y15, Px29y15, Px30y16, Px30y14 } CellNode (30 @ 15) (20)Px30y16 { Px30y17, Px29y16, Px31y16, Px30y15 } CellNode (30 @ 16) (20)Px30y17 { Px30y16, Px31y17, Px29y17, Px30y18 } CellNode (30 @ 17) (20)Px30y18 { Px29y18, Px30y19, Px30y17, Px31y18 } CellNode (30 @ 18) (20)Px30y19 { Px31y19, Px29y19, Px30y18, Px30y20 } CellNode (30 @ 19) (20)Px30y2 { Px31y2, Px30y1, Px29y2, Px30y3 } CellNode (30 @ 2) (20)Px30y20 { Px30y21, Px31y20, Px29y20, Px30y19 } CellNode (30 @ 20) (20)Px30y21 { Px30y22, Px29y21, Px31y21, Px30y20 } CellNode (30 @ 21) (20)Px30y22 { Px30y21, Px30y23, Px29y22, Px31y22 } CellNode (30 @ 22) (20)Px30y23 { Px29y23, Px31y23, Px30y22, Px30y24 } CellNode (30 @ 23) (20)Px30y24 { Px30y25, Px29y24, Px31y24, Px30y23 } CellNode (30 @ 24) (20)Px30y25 { Px30y26, Px29y25, Px31y25, Px30y24 } CellNode (30 @ 25) (20)Px30y26 { Px31y26, Px30y25, Px30y27, Px29y26 } CellNode (30 @ 26) (20)Px30y27 { Px30y28, Px29y27, Px31y27, Px30y26 } CellNode (30 @ 27) (20)Px30y28 { Px30y29, Px29y28, Px31y28, Px30y27 } CellNode (30 @ 28) (20)Px30y29 { Px30y28, Px30y30, Px29y29, Px31y29 } CellNode (30 @ 29) (20)Px30y3 { Px30y2, Px31y3, Px29y3, Px30y4 } CellNode (30 @ 3) (20)Px30y30 { Px29y30, Px30y29, Px31y30, Px30y31 } CellNode (30 @ 30) (20)Px30y31 { Px30y32, Px29y31, Px31y31, Px30y30 } CellNode (30 @ 31) (20)Px30y32 { Px31y32, Px30y33, Px29y32, Px30y31 } CellNode (30 @ 32) (20)Px30y33 { Px30y32, Px31y33, Px29y33, Px30y34 } CellNode (30 @ 33) (20)Px30y34 { Px29y34, Px30y35, Px30y33, Px31y34 } CellNode (30 @ 34) (20)Px30y35 { Px31y35, Px30y36, Px29y35, Px30y34 } CellNode (30 @ 35) (20)Px30y36 { Px31y36, Px29y36, Px30y37, Px30y35 } CellNode (30 @ 36) (20)Px30y37 { Px31y37, Px30y36, Px30y38, Px29y37 } CellNode (30 @ 37) (20)Px30y38 { Px30y39, Px29y38, Px31y38, Px30y37 } CellNode (30 @ 38) (20)Px30y39 { Px31y39, Px29y39, Px30y38, Px30y40 } CellNode (30 @ 39) (20)Px30y4 { Px29y4, Px30y5, Px31y4, Px30y3 } CellNode (30 @ 4) (20)Px30y40 { Px30y39, Px30y41, Px31y40, Px29y40 } CellNode (30 @ 40) (20)Px30y41 { Px29y41, Px30y42, Px31y41, Px30y40 } CellNode (30 @ 41) (20)Px30y42 { Px31y42, Px30y41, Px29y42, Px30y43 } CellNode (30 @ 42) (20)Px30y43 { Px30y44, Px31y43, Px30y42, Px29y43 } CellNode (30 @ 43) (20)Px30y44 { Px30y45, Px31y44, Px30y43, Px29y44 } CellNode (30 @ 44) (20)Px30y45 { Px29y45, Px30y44, Px30y46, Px31y45 } CellNode (30 @ 45) (20)Px30y46 { Px31y46, Px29y46, Px30y45, Px30y47 } CellNode (30 @ 46) (20)Px30y47 { Px30y48, Px31y47, Px29y47, Px30y46 } CellNode (30 @ 47) (20)Px30y48 { Px30y47, Px30y49, Px31y48, Px29y48 } CellNode (30 @ 48) (20)Px30y49 { Px31y49, Px29y49, Px30y48, Px30y50 } CellNode (30 @ 49) (20)Px30y5 { Px31y5, Px29y5, Px30y6, Px30y4 } CellNode (30 @ 5) (20)Px30y50 { Px29y50, Px31y50, Px30y49, Px30y51 } CellNode (30 @ 50) (20)Px30y51 { Px31y51, Px29y51, Px30y52, Px30y50 } CellNode (30 @ 51) (20)Px30y52 { Px30y53, Px29y52, Px31y52, Px30y51 } CellNode (30 @ 52) (20)Px30y53 { Px29y53, Px30y52, Px31y53, Px30y54 } CellNode (30 @ 53) (20)Px30y54 { Px31y54, Px29y54, Px30y55, Px30y53 } CellNode (30 @ 54) (20)Px30y55 { Px31y55, Px29y55, Px30y56, Px30y54 } CellNode (30 @ 55) (20)Px30y56 { Px30y55, Px31y56, Px29y56, Px30y57 } CellNode (30 @ 56) (20)Px30y57 { Px29y57, Px30y58, Px30y56, Px31y57 } CellNode (30 @ 57) (20)Px30y58 { Px31y58, Px30y59, Px29y58, Px30y57 } CellNode (30 @ 58) (20)Px30y59 { Px30y60, Px31y59, Px29y59, Px30y58 } CellNode (30 @ 59) (20)Px30y6 { Px30y5, Px31y6, Px29y6, Px30y7 } CellNode (30 @ 6) (20)Px30y60 { Px30y59, Px30y61, Px31y60, Px29y60 } CellNode (30 @ 60) (20)Px30y61 { Px30y60, Px29y61, Px30y62, Px31y61 } CellNode (30 @ 61) (20)Px30y62 { Px31y62, Px30y61, Px29y62, Px30y63 } CellNode (30 @ 62) (20)Px30y63 { Px30y64, Px31y63, Px29y63, Px30y62 } CellNode (30 @ 63) (20)Px30y64 { Px30y63, Px30y65, Px31y64, Px29y64 } CellNode (30 @ 64) (20)Px30y65 { Px31y65, Px29y65, Px30y64, Px30y66 } CellNode (30 @ 65) (20)Px30y66 { Px30y67, Px31y66, Px29y66, Px30y65 } CellNode (30 @ 66) (20)Px30y67 { Px29y67, Px30y66, Px31y67 } CellNode (30 @ 67) (20)Px30y7 { Px30y8, Px31y7, Px30y6, Px29y7 } CellNode (30 @ 7) (20)Px30y8 { Px29y8, Px30y9, Px31y8, Px30y7 } CellNode (30 @ 8) (20)Px30y9 { Px30y8, Px31y9, Px30y10, Px29y9 } CellNode (30 @ 9) (20)Px31y1 { Px32y1, Px30y1, Px31y2 } CellNode (31 @ 1) (20)Px31y10 { Px31y11, Px31y9, Px30y10, Px32y10 } CellNode (31 @ 10) (20)Px31y11 { Px31y12, Px32y11, Px30y11, Px31y10 } CellNode (31 @ 11) (20)Px31y12 { Px31y11, Px31y13, Px32y12, Px30y12 } CellNode (31 @ 12) (20)Px31y13 { Px30y13, Px31y12, Px32y13, Px31y14 } CellNode (31 @ 13) (20)Px31y14 { Px32y14, Px31y15, Px31y13, Px30y14 } CellNode (31 @ 14) (20)Px31y15 { Px32y15, Px31y16, Px30y15, Px31y14 } CellNode (31 @ 15) (20)Px31y16 { Px31y15, Px30y16, Px32y16, Px31y17 } CellNode (31 @ 16) (20)Px31y17 { Px32y17, Px30y17, Px31y16, Px31y18 } CellNode (31 @ 17) (20)Px31y18 { Px31y19, Px32y18, Px31y17, Px30y18 } CellNode (31 @ 18) (20)Px31y19 { Px30y19, Px31y20, Px32y19, Px31y18 } CellNode (31 @ 19) (20)Px31y2 { Px30y2, Px31y3, Px32y2, Px31y1 } CellNode (31 @ 2) (20)Px31y20 { Px31y19, Px32y20, Px30y20, Px31y21 } CellNode (31 @ 20) (20)Px31y21 { Px30y21, Px31y22, Px31y20, Px32y21 } CellNode (31 @ 21) (20)Px31y22 { Px32y22, Px30y22, Px31y23, Px31y21 } CellNode (31 @ 22) (20)Px31y23 { Px32y23, Px30y23, Px31y24, Px31y22 } CellNode (31 @ 23) (20)Px31y24 { Px31y25, Px31y23, Px32y24, Px30y24 } CellNode (31 @ 24) (20)Px31y25 { Px31y26, Px30y25, Px32y25, Px31y24 } CellNode (31 @ 25) (20)Px31y26 { Px31y27, Px30y26, Px32y26, Px31y25 } CellNode (31 @ 26) (20)Px31y27 { Px31y26, Px32y27, Px31y28, Px30y27 } CellNode (31 @ 27) (20)Px31y28 { Px30y28, Px31y29, Px31y27, Px32y28 } CellNode (31 @ 28) (20)Px31y29 { Px32y29, Px30y29, Px31y28, Px31y30 } CellNode (31 @ 29) (20)Px31y3 { Px31y2, Px32y3, Px30y3, Px31y4 } CellNode (31 @ 3) (20)Px31y30 { Px31y31, Px32y30, Px30y30, Px31y29 } CellNode (31 @ 30) (20)Px31y31 { Px31y32, Px32y31, Px31y30, Px30y31 } CellNode (31 @ 31) (20)Px31y32 { Px30y32, Px31y31, Px31y33, Px32y32 } CellNode (31 @ 32) (20)Px31y33 { Px32y33, Px30y33, Px31y32, Px31y34 } CellNode (31 @ 33) (20)Px31y34 { Px31y35, Px32y34, Px31y33, Px30y34 } CellNode (31 @ 34) (20)Px31y35 { Px31y34, Px31y36, Px32y35, Px30y35 } CellNode (31 @ 35) (20)Px31y36 { Px31y35, Px30y36, Px32y36, Px31y37 } CellNode (31 @ 36) (20)Px31y37 { Px32y37, Px31y38, Px31y36, Px30y37 } CellNode (31 @ 37) (20)Px31y38 { Px32y38, Px31y39, Px30y38, Px31y37 } CellNode (31 @ 38) (20)Px31y39 { Px30y39, Px31y38, Px31y40, Px32y39 } CellNode (31 @ 39) (20)Px31y4 { Px31y5, Px31y3, Px32y4, Px30y4 } CellNode (31 @ 4) (20)Px31y40 { Px32y40, Px31y39, Px31y41, Px30y40 } CellNode (31 @ 40) (20)Px31y41 { Px31y42, Px30y41, Px32y41, Px31y40 } CellNode (31 @ 41) (20)Px31y42 { Px32y42, Px30y42, Px31y43, Px31y41 } CellNode (31 @ 42) (20)Px31y43 { Px31y42, Px32y43, Px30y43, Px31y44 } CellNode (31 @ 43) (20)Px31y44 { Px32y44, Px30y44, Px31y43, Px31y45 } CellNode (31 @ 44) (20)Px31y45 { Px31y46, Px32y45, Px30y45, Px31y44 } CellNode (31 @ 45) (20)Px31y46 { Px32y46, Px30y46, Px31y47, Px31y45 } CellNode (31 @ 46) (20)Px31y47 { Px32y47, Px31y46, Px31y48, Px30y47 } CellNode (31 @ 47) (20)Px31y48 { Px31y49, Px30y48, Px32y48, Px31y47 } CellNode (31 @ 48) (20)Px31y49 { Px32y49, Px30y49, Px31y48, Px31y50 } CellNode (31 @ 49) (20)Px31y5 { Px30y5, Px31y6, Px31y4, Px32y5 } CellNode (31 @ 5) (20)Px31y50 { Px31y49, Px31y51, Px32y50, Px30y50 } CellNode (31 @ 50) (20)Px31y51 { Px31y50, Px31y52, Px32y51, Px30y51 } CellNode (31 @ 51) (20)Px31y52 { Px32y52, Px31y51, Px30y52, Px31y53 } CellNode (31 @ 52) (20)Px31y53 { Px31y54, Px32y53, Px30y53, Px31y52 } CellNode (31 @ 53) (20)Px31y54 { Px31y55, Px32y54, Px30y54, Px31y53 } CellNode (31 @ 54) (20)Px31y55 { Px31y54, Px30y55, Px31y56, Px32y55 } CellNode (31 @ 55) (20)Px31y56 { Px32y56, Px31y55, Px30y56, Px31y57 } CellNode (31 @ 56) (20)Px31y57 { Px31y58, Px32y57, Px31y56, Px30y57 } CellNode (31 @ 57) (20)Px31y58 { Px30y58, Px31y59, Px32y58, Px31y57 } CellNode (31 @ 58) (20)Px31y59 { Px32y59, Px31y58, Px30y59, Px31y60 } CellNode (31 @ 59) (20)Px31y6 { Px31y5, Px31y7, Px30y6, Px32y6 } CellNode (31 @ 6) (20)Px31y60 { Px30y60, Px31y61, Px31y59, Px32y60 } CellNode (31 @ 60) (20)Px31y61 { Px31y62, Px30y61, Px32y61, Px31y60 } CellNode (31 @ 61) (20)Px31y62 { Px32y62, Px31y63, Px30y62, Px31y61 } CellNode (31 @ 62) (20)Px31y63 { Px30y63, Px31y62, Px32y63, Px31y64 } CellNode (31 @ 63) (20)Px31y64 { Px32y64, Px30y64, Px31y65, Px31y63 } CellNode (31 @ 64) (20)Px31y65 { Px32y65, Px31y66, Px30y65, Px31y64 } CellNode (31 @ 65) (20)Px31y66 { Px31y65, Px32y66, Px30y66, Px31y67 } CellNode (31 @ 66) (20)Px31y67 { Px32y67, Px30y67, Px31y66 } CellNode (31 @ 67) (20)Px31y7 { Px31y6, Px32y7, Px31y8, Px30y7 } CellNode (31 @ 7) (20)Px31y8 { Px30y8, Px31y9, Px31y7, Px32y8 } CellNode (31 @ 8) (20)Px31y9 { Px30y9, Px31y10, Px31y8, Px32y9 } CellNode (31 @ 9) (20)Px32y1 { Px32y2, Px33y1, Px31y1 } CellNode (32 @ 1) (20)Px32y10 { Px32y11, Px33y10, Px31y10, Px32y9 } CellNode (32 @ 10) (20)Px32y11 { Px31y11, Px32y12, Px33y11, Px32y10 } CellNode (32 @ 11) (20)Px32y12 { Px33y12, Px31y12, Px32y11, Px32y13 } CellNode (32 @ 12) (20)Px32y13 { Px32y14, Px33y13, Px31y13, Px32y12 } CellNode (32 @ 13) (20)Px32y14 { Px32y15, Px33y14, Px32y13, Px31y14 } CellNode (32 @ 14) (20)Px32y15 { Px32y14, Px31y15, Px32y16, Px33y15 } CellNode (32 @ 15) (20)Px32y16 { Px33y16, Px32y15, Px31y16, Px32y17 } CellNode (32 @ 16) (20)Px32y17 { Px32y18, Px33y17, Px31y17, Px32y16 } CellNode (32 @ 17) (20)Px32y18 { Px32y17, Px32y19, Px33y18, Px31y18 } CellNode (32 @ 18) (20)Px32y19 { Px33y19, Px31y19, Px32y18, Px32y20 } CellNode (32 @ 19) (20)Px32y2 { Px31y2, Px32y3, Px32y1, Px33y2 } CellNode (32 @ 2) (20)Px32y20 { Px32y21, Px31y20, Px32y19, Px33y20 } CellNode (32 @ 20) (20)Px32y21 { Px33y21, Px32y22, Px32y20, Px31y21 } CellNode (32 @ 21) (20)Px32y22 { Px31y22, Px33y22, Px32y23, Px32y21 } CellNode (32 @ 22) (20)Px32y23 { Px32y22, Px31y23, Px33y23, Px32y24 } CellNode (32 @ 23) (20)Px32y24 { Px33y24, Px32y25, Px32y23, Px31y24 } CellNode (32 @ 24) (20)Px32y25 { Px33y25, Px32y26, Px32y24, Px31y25 } CellNode (32 @ 25) (20)Px32y26 { Px31y26, Px32y25, Px32y27, Px33y26 } CellNode (32 @ 26) (20)Px32y27 { Px33y27, Px31y27, Px32y26, Px32y28 } CellNode (32 @ 27) (20)Px32y28 { Px33y28, Px32y29, Px32y27, Px31y28 } CellNode (32 @ 28) (20)Px32y29 { Px32y28, Px32y30, Px33y29, Px31y29 } CellNode (32 @ 29) (20)Px32y3 { Px31y3, Px32y4, Px32y2, Px33y3 } CellNode (32 @ 3) (20)Px32y30 { Px32y29, Px33y30, Px31y30, Px32y31 } CellNode (32 @ 30) (20)Px32y31 { Px32y32, Px31y31, Px32y30, Px33y31 } CellNode (32 @ 31) (20)Px32y32 { Px32y33, Px31y32, Px33y32, Px32y31 } CellNode (32 @ 32) (20)Px32y33 { Px33y33, Px31y33, Px32y34, Px32y32 } CellNode (32 @ 33) (20)Px32y34 { Px31y34, Px32y33, Px32y35, Px33y34 } CellNode (32 @ 34) (20)Px32y35 { Px33y35, Px31y35, Px32y34, Px32y36 } CellNode (32 @ 35) (20)Px32y36 { Px32y37, Px33y36, Px31y36, Px32y35 } CellNode (32 @ 36) (20)Px32y37 { Px32y38, Px33y37, Px32y36, Px31y37 } CellNode (32 @ 37) (20)Px32y38 { Px32y37, Px31y38, Px32y39, Px33y38 } CellNode (32 @ 38) (20)Px32y39 { Px33y39, Px32y38, Px31y39, Px32y40 } CellNode (32 @ 39) (20)Px32y4 { Px32y3, Px33y4, Px32y5, Px31y4 } CellNode (32 @ 4) (20)Px32y40 { Px32y41, Px33y40, Px31y40, Px32y39 } CellNode (32 @ 40) (20)Px32y41 { Px32y42, Px33y41, Px31y41, Px32y40 } CellNode (32 @ 41) (20)Px32y42 { Px31y42, Px32y41, Px33y42, Px32y43 } CellNode (32 @ 42) (20)Px32y43 { Px33y43, Px32y42, Px31y43, Px32y44 } CellNode (32 @ 43) (20)Px32y44 { Px33y44, Px32y45, Px32y43, Px31y44 } CellNode (32 @ 44) (20)Px32y45 { Px32y44, Px33y45, Px32y46, Px31y45 } CellNode (32 @ 45) (20)Px32y46 { Px32y45, Px31y46, Px33y46, Px32y47 } CellNode (32 @ 46) (20)Px32y47 { Px33y47, Px32y48, Px32y46, Px31y47 } CellNode (32 @ 47) (20)Px32y48 { Px32y49, Px33y48, Px31y48, Px32y47 } CellNode (32 @ 48) (20)Px32y49 { Px31y49, Px32y48, Px32y50, Px33y49 } CellNode (32 @ 49) (20)Px32y5 { Px31y5, Px32y4, Px33y5, Px32y6 } CellNode (32 @ 5) (20)Px32y50 { Px31y50, Px32y49, Px32y51, Px33y50 } CellNode (32 @ 50) (20)Px32y51 { Px33y51, Px32y52, Px31y51, Px32y50 } CellNode (32 @ 51) (20)Px32y52 { Px33y52, Px31y52, Px32y53, Px32y51 } CellNode (32 @ 52) (20)Px32y53 { Px32y52, Px33y53, Px31y53, Px32y54 } CellNode (32 @ 53) (20)Px32y54 { Px31y54, Px33y54, Px32y53, Px32y55 } CellNode (32 @ 54) (20)Px32y55 { Px32y56, Px31y55, Px33y55, Px32y54 } CellNode (32 @ 55) (20)Px32y56 { Px33y56, Px32y57, Px31y56, Px32y55 } CellNode (32 @ 56) (20)Px32y57 { Px33y57, Px32y56, Px32y58, Px31y57 } CellNode (32 @ 57) (20)Px32y58 { Px33y58, Px31y58, Px32y59, Px32y57 } CellNode (32 @ 58) (20)Px32y59 { Px33y59, Px31y59, Px32y58, Px32y60 } CellNode (32 @ 59) (20)Px32y6 { Px31y6, Px32y7, Px33y6, Px32y5 } CellNode (32 @ 6) (20)Px32y60 { Px32y59, Px32y61, Px33y60, Px31y60 } CellNode (32 @ 60) (20)Px32y61 { Px31y61, Px32y62, Px33y61, Px32y60 } CellNode (32 @ 61) (20)Px32y62 { Px33y62, Px31y62, Px32y61, Px32y63 } CellNode (32 @ 62) (20)Px32y63 { Px32y64, Px33y63, Px31y63, Px32y62 } CellNode (32 @ 63) (20)Px32y64 { Px32y65, Px33y64, Px31y64, Px32y63 } CellNode (32 @ 64) (20)Px32y65 { Px32y64, Px31y65, Px32y66, Px33y65 } CellNode (32 @ 65) (20)Px32y66 { Px33y66, Px32y65, Px31y66, Px32y67 } CellNode (32 @ 66) (20)Px32y67 { Px32y66, Px33y67, Px31y67 } CellNode (32 @ 67) (20)Px32y7 { Px32y6, Px31y7, Px32y8, Px33y7 } CellNode (32 @ 7) (20)Px32y8 { Px32y7, Px33y8, Px31y8, Px32y9 } CellNode (32 @ 8) (20)Px32y9 { Px31y9, Px33y9, Px32y8, Px32y10 } CellNode (32 @ 9) (20)Px33y1 { Px32y1, Px33y2, Px34y1 } CellNode (33 @ 1) (20)Px33y10 { Px32y10, Px33y9, Px34y10, Px33y11 } CellNode (33 @ 10) (20)Px33y11 { Px34y11, Px32y11, Px33y12, Px33y10 } CellNode (33 @ 11) (20)Px33y12 { Px34y12, Px33y13, Px32y12, Px33y11 } CellNode (33 @ 12) (20)Px33y13 { Px33y12, Px33y14, Px32y13, Px34y13 } CellNode (33 @ 13) (20)Px33y14 { Px32y14, Px34y14, Px33y13, Px33y15 } CellNode (33 @ 14) (20)Px33y15 { Px34y15, Px32y15, Px33y16, Px33y14 } CellNode (33 @ 15) (20)Px33y16 { Px34y16, Px32y16, Px33y17, Px33y15 } CellNode (33 @ 16) (20)Px33y17 { Px34y17, Px33y16, Px33y18, Px32y17 } CellNode (33 @ 17) (20)Px33y18 { Px34y18, Px32y18, Px33y19, Px33y17 } CellNode (33 @ 18) (20)Px33y19 { Px34y19, Px32y19, Px33y18, Px33y20 } CellNode (33 @ 19) (20)Px33y2 { Px33y1, Px34y2, Px32y2, Px33y3 } CellNode (33 @ 2) (20)Px33y20 { Px33y19, Px33y21, Px34y20, Px32y20 } CellNode (33 @ 20) (20)Px33y21 { Px33y20, Px33y22, Px34y21, Px32y21 } CellNode (33 @ 21) (20)Px33y22 { Px34y22, Px33y21, Px32y22, Px33y23 } CellNode (33 @ 22) (20)Px33y23 { Px33y24, Px34y23, Px32y23, Px33y22 } CellNode (33 @ 23) (20)Px33y24 { Px33y25, Px34y24, Px33y23, Px32y24 } CellNode (33 @ 24) (20)Px33y25 { Px33y24, Px32y25, Px33y26, Px34y25 } CellNode (33 @ 25) (20)Px33y26 { Px34y26, Px33y25, Px32y26, Px33y27 } CellNode (33 @ 26) (20)Px33y27 { Px33y28, Px34y27, Px32y27, Px33y26 } CellNode (33 @ 27) (20)Px33y28 { Px33y27, Px33y29, Px34y28, Px32y28 } CellNode (33 @ 28) (20)Px33y29 { Px34y29, Px33y28, Px32y29, Px33y30 } CellNode (33 @ 29) (20)Px33y3 { Px33y4, Px32y3, Px34y3, Px33y2 } CellNode (33 @ 3) (20)Px33y30 { Px34y30, Px32y30, Px33y29, Px33y31 } CellNode (33 @ 30) (20)Px33y31 { Px34y31, Px33y32, Px33y30, Px32y31 } CellNode (33 @ 31) (20)Px33y32 { Px32y32, Px34y32, Px33y33, Px33y31 } CellNode (33 @ 32) (20)Px33y33 { Px32y33, Px33y32, Px33y34, Px34y33 } CellNode (33 @ 33) (20)Px33y34 { Px33y35, Px34y34, Px32y34, Px33y33 } CellNode (33 @ 34) (20)Px33y35 { Px34y35, Px33y36, Px33y34, Px32y35 } CellNode (33 @ 35) (20)Px33y36 { Px33y35, Px33y37, Px32y36, Px34y36 } CellNode (33 @ 36) (20)Px33y37 { Px32y37, Px34y37, Px33y36, Px33y38 } CellNode (33 @ 37) (20)Px33y38 { Px34y38, Px32y38, Px33y39, Px33y37 } CellNode (33 @ 38) (20)Px33y39 { Px33y40, Px34y39, Px32y39, Px33y38 } CellNode (33 @ 39) (20)Px33y4 { Px32y4, Px33y5, Px34y4, Px33y3 } CellNode (33 @ 4) (20)Px33y40 { Px33y39, Px33y41, Px34y40, Px32y40 } CellNode (33 @ 40) (20)Px33y41 { Px33y40, Px32y41, Px33y42, Px34y41 } CellNode (33 @ 41) (20)Px33y42 { Px34y42, Px32y42, Px33y41, Px33y43 } CellNode (33 @ 42) (20)Px33y43 { Px33y44, Px34y43, Px33y42, Px32y43 } CellNode (33 @ 43) (20)Px33y44 { Px33y43, Px33y45, Px34y44, Px32y44 } CellNode (33 @ 44) (20)Px33y45 { Px34y45, Px33y44, Px32y45, Px33y46 } CellNode (33 @ 45) (20)Px33y46 { Px33y47, Px34y46, Px33y45, Px32y46 } CellNode (33 @ 46) (20)Px33y47 { Px33y48, Px34y47, Px33y46, Px32y47 } CellNode (33 @ 47) (20)Px33y48 { Px33y47, Px32y48, Px33y49, Px34y48 } CellNode (33 @ 48) (20)Px33y49 { Px34y49, Px32y49, Px33y48, Px33y50 } CellNode (33 @ 49) (20)Px33y5 { Px33y4, Px34y5, Px33y6, Px32y5 } CellNode (33 @ 5) (20)Px33y50 { Px33y51, Px34y50, Px32y50, Px33y49 } CellNode (33 @ 50) (20)Px33y51 { Px33y52, Px34y51, Px32y51, Px33y50 } CellNode (33 @ 51) (20)Px33y52 { Px33y51, Px32y52, Px34y52, Px33y53 } CellNode (33 @ 52) (20)Px33y53 { Px34y53, Px33y52, Px32y53, Px33y54 } CellNode (33 @ 53) (20)Px33y54 { Px34y54, Px33y55, Px33y53, Px32y54 } CellNode (33 @ 54) (20)Px33y55 { Px33y54, Px33y56, Px34y55, Px32y55 } CellNode (33 @ 55) (20)Px33y56 { Px32y56, Px33y55, Px33y57, Px34y56 } CellNode (33 @ 56) (20)Px33y57 { Px33y58, Px34y57, Px33y56, Px32y57 } CellNode (33 @ 57) (20)Px33y58 { Px33y59, Px34y58, Px32y58, Px33y57 } CellNode (33 @ 58) (20)Px33y59 { Px33y58, Px32y59, Px33y60, Px34y59 } CellNode (33 @ 59) (20)Px33y6 { Px33y7, Px34y6, Px33y5, Px32y6 } CellNode (33 @ 6) (20)Px33y60 { Px32y60, Px33y59, Px34y60, Px33y61 } CellNode (33 @ 60) (20)Px33y61 { Px34y61, Px32y61, Px33y62, Px33y60 } CellNode (33 @ 61) (20)Px33y62 { Px34y62, Px33y63, Px32y62, Px33y61 } CellNode (33 @ 62) (20)Px33y63 { Px33y62, Px34y63, Px32y63, Px33y64 } CellNode (33 @ 63) (20)Px33y64 { Px32y64, Px34y64, Px33y63, Px33y65 } CellNode (33 @ 64) (20)Px33y65 { Px34y65, Px32y65, Px33y66, Px33y64 } CellNode (33 @ 65) (20)Px33y66 { Px34y66, Px32y66, Px33y67, Px33y65 } CellNode (33 @ 66) (20)Px33y67 { Px34y67, Px33y66, Px32y67 } CellNode (33 @ 67) (20)Px33y7 { Px32y7, Px33y8, Px34y7, Px33y6 } CellNode (33 @ 7) (20)Px33y8 { Px34y8, Px33y9, Px32y8, Px33y7 } CellNode (33 @ 8) (20)Px33y9 { Px33y8, Px34y9, Px33y10, Px32y9 } CellNode (33 @ 9) (20)Px34y1 { Px33y1, Px34y2, Px35y1 } CellNode (34 @ 1) (20)Px34y10 { Px34y11, Px34y9, Px35y10, Px33y10 } CellNode (34 @ 10) (20)Px34y11 { Px34y12, Px35y11, Px34y10, Px33y11 } CellNode (34 @ 11) (20)Px34y12 { Px34y11, Px33y12, Px34y13, Px35y12 } CellNode (34 @ 12) (20)Px34y13 { Px35y13, Px34y12, Px33y13, Px34y14 } CellNode (34 @ 13) (20)Px34y14 { Px34y15, Px35y14, Px33y14, Px34y13 } CellNode (34 @ 14) (20)Px34y15 { Px34y14, Px34y16, Px35y15, Px33y15 } CellNode (34 @ 15) (20)Px34y16 { Px35y16, Px34y15, Px33y16, Px34y17 } CellNode (34 @ 16) (20)Px34y17 { Px34y18, Px35y17, Px34y16, Px33y17 } CellNode (34 @ 17) (20)Px34y18 { Px34y19, Px35y18, Px33y18, Px34y17 } CellNode (34 @ 18) (20)Px34y19 { Px33y19, Px34y18, Px34y20, Px35y19 } CellNode (34 @ 19) (20)Px34y2 { Px34y1, Px33y2, Px34y3, Px35y2 } CellNode (34 @ 2) (20)Px34y20 { Px35y20, Px34y19, Px34y21, Px33y20 } CellNode (34 @ 20) (20)Px34y21 { Px35y21, Px33y21, Px34y22, Px34y20 } CellNode (34 @ 21) (20)Px34y22 { Px35y22, Px33y22, Px34y23, Px34y21 } CellNode (34 @ 22) (20)Px34y23 { Px34y22, Px35y23, Px33y23, Px34y24 } CellNode (34 @ 23) (20)Px34y24 { Px33y24, Px34y25, Px34y23, Px35y24 } CellNode (34 @ 24) (20)Px34y25 { Px34y26, Px35y25, Px33y25, Px34y24 } CellNode (34 @ 25) (20)Px34y26 { Px35y26, Px34y27, Px33y26, Px34y25 } CellNode (34 @ 26) (20)Px34y27 { Px34y28, Px34y26, Px35y27, Px33y27 } CellNode (34 @ 27) (20)Px34y28 { Px34y29, Px33y28, Px35y28, Px34y27 } CellNode (34 @ 28) (20)Px34y29 { Px35y29, Px33y29, Px34y28, Px34y30 } CellNode (34 @ 29) (20)Px34y3 { Px34y2, Px35y3, Px34y4, Px33y3 } CellNode (34 @ 3) (20)Px34y30 { Px34y29, Px34y31, Px35y30, Px33y30 } CellNode (34 @ 30) (20)Px34y31 { Px34y30, Px34y32, Px35y31, Px33y31 } CellNode (34 @ 31) (20)Px34y32 { Px35y32, Px34y31, Px33y32, Px34y33 } CellNode (34 @ 32) (20)Px34y33 { Px34y34, Px35y33, Px34y32, Px33y33 } CellNode (34 @ 33) (20)Px34y34 { Px34y35, Px35y34, Px33y34, Px34y33 } CellNode (34 @ 34) (20)Px34y35 { Px33y35, Px34y34, Px34y36, Px35y35 } CellNode (34 @ 35) (20)Px34y36 { Px35y36, Px34y35, Px33y36, Px34y37 } CellNode (34 @ 36) (20)Px34y37 { Px34y38, Px35y37, Px33y37, Px34y36 } CellNode (34 @ 37) (20)Px34y38 { Px34y37, Px34y39, Px35y38, Px33y38 } CellNode (34 @ 38) (20)Px34y39 { Px35y39, Px34y38, Px33y39, Px34y40 } CellNode (34 @ 39) (20)Px34y4 { Px34y5, Px33y4, Px35y4, Px34y3 } CellNode (34 @ 4) (20)Px34y40 { Px33y40, Px35y40, Px34y39, Px34y41 } CellNode (34 @ 40) (20)Px34y41 { Px35y41, Px33y41, Px34y42, Px34y40 } CellNode (34 @ 41) (20)Px34y42 { Px35y42, Px33y42, Px34y43, Px34y41 } CellNode (34 @ 42) (20)Px34y43 { Px33y43, Px34y42, Px35y43, Px34y44 } CellNode (34 @ 43) (20)Px34y44 { Px35y44, Px33y44, Px34y45, Px34y43 } CellNode (34 @ 44) (20)Px34y45 { Px35y45, Px33y45, Px34y46, Px34y44 } CellNode (34 @ 45) (20)Px34y46 { Px34y45, Px34y47, Px33y46, Px35y46 } CellNode (34 @ 46) (20)Px34y47 { Px33y47, Px34y48, Px34y46, Px35y47 } CellNode (34 @ 47) (20)Px34y48 { Px34y49, Px33y48, Px35y48, Px34y47 } CellNode (34 @ 48) (20)Px34y49 { Px34y50, Px35y49, Px33y49, Px34y48 } CellNode (34 @ 49) (20)Px34y5 { Px34y6, Px33y5, Px34y4, Px35y5 } CellNode (34 @ 5) (20)Px34y50 { Px34y49, Px34y51, Px35y50, Px33y50 } CellNode (34 @ 50) (20)Px34y51 { Px33y51, Px34y50, Px34y52, Px35y51 } CellNode (34 @ 51) (20)Px34y52 { Px35y52, Px33y52, Px34y51, Px34y53 } CellNode (34 @ 52) (20)Px34y53 { Px34y54, Px35y53, Px33y53, Px34y52 } CellNode (34 @ 53) (20)Px34y54 { Px33y54, Px34y55, Px35y54, Px34y53 } CellNode (34 @ 54) (20)Px34y55 { Px35y55, Px34y54, Px33y55, Px34y56 } CellNode (34 @ 55) (20)Px34y56 { Px34y57, Px35y56, Px33y56, Px34y55 } CellNode (34 @ 56) (20)Px34y57 { Px34y58, Px35y57, Px34y56, Px33y57 } CellNode (34 @ 57) (20)Px34y58 { Px33y58, Px34y57, Px34y59, Px35y58 } CellNode (34 @ 58) (20)Px34y59 { Px35y59, Px33y59, Px34y58, Px34y60 } CellNode (34 @ 59) (20)Px34y6 { Px35y6, Px34y5, Px33y6, Px34y7 } CellNode (34 @ 6) (20)Px34y60 { Px35y60, Px34y61, Px33y60, Px34y59 } CellNode (34 @ 60) (20)Px34y61 { Px34y62, Px35y61, Px34y60, Px33y61 } CellNode (34 @ 61) (20)Px34y62 { Px34y61, Px33y62, Px35y62, Px34y63 } CellNode (34 @ 62) (20)Px34y63 { Px34y64, Px34y62, Px33y63, Px35y63 } CellNode (34 @ 63) (20)Px34y64 { Px34y65, Px35y64, Px34y63, Px33y64 } CellNode (34 @ 64) (20)Px34y65 { Px34y64, Px34y66, Px35y65, Px33y65 } CellNode (34 @ 65) (20)Px34y66 { Px34y65, Px33y66, Px35y66, Px34y67 } CellNode (34 @ 66) (20)Px34y67 { Px35y67, Px34y66, Px33y67 } CellNode (34 @ 67) (20)Px34y7 { Px34y8, Px35y7, Px34y6, Px33y7 } CellNode (34 @ 7) (20)Px34y8 { Px33y8, Px34y9, Px35y8, Px34y7 } CellNode (34 @ 8) (20)Px34y9 { Px34y8, Px33y9, Px34y10, Px35y9 } CellNode (34 @ 9) (20)Px35y1 { Px34y1, Px35y2, Px36y1 } CellNode (35 @ 1) (20)Px35y10 { Px35y11, Px36y10, Px34y10, Px35y9 } CellNode (35 @ 10) (20)Px35y11 { Px34y11, Px36y11, Px35y10, Px35y12 } CellNode (35 @ 11) (20)Px35y12 { Px35y13, Px34y12, Px36y12, Px35y11 } CellNode (35 @ 12) (20)Px35y13 { Px36y13, Px34y13, Px35y14, Px35y12 } CellNode (35 @ 13) (20)Px35y14 { Px34y14, Px35y13, Px36y14, Px35y15 } CellNode (35 @ 14) (20)Px35y15 { Px36y15, Px34y15, Px35y16, Px35y14 } CellNode (35 @ 15) (20)Px35y16 { Px36y16, Px35y17, Px34y16, Px35y15 } CellNode (35 @ 16) (20)Px35y17 { Px35y16, Px35y18, Px36y17, Px34y17 } CellNode (35 @ 17) (20)Px35y18 { Px34y18, Px35y19, Px35y17, Px36y18 } CellNode (35 @ 18) (20)Px35y19 { Px36y19, Px34y19, Px35y18, Px35y20 } CellNode (35 @ 19) (20)Px35y2 { Px34y2, Px35y3, Px36y2, Px35y1 } CellNode (35 @ 2) (20)Px35y20 { Px35y21, Px36y20, Px34y20, Px35y19 } CellNode (35 @ 20) (20)Px35y21 { Px35y22, Px36y21, Px34y21, Px35y20 } CellNode (35 @ 21) (20)Px35y22 { Px35y21, Px34y22, Px35y23, Px36y22 } CellNode (35 @ 22) (20)Px35y23 { Px36y23, Px34y23, Px35y22, Px35y24 } CellNode (35 @ 23) (20)Px35y24 { Px35y25, Px36y24, Px35y23, Px34y24 } CellNode (35 @ 24) (20)Px35y25 { Px35y24, Px35y26, Px36y25, Px34y25 } CellNode (35 @ 25) (20)Px35y26 { Px36y26, Px34y26, Px35y25, Px35y27 } CellNode (35 @ 26) (20)Px35y27 { Px35y28, Px36y27, Px35y26, Px34y27 } CellNode (35 @ 27) (20)Px35y28 { Px35y29, Px36y28, Px35y27, Px34y28 } CellNode (35 @ 28) (20)Px35y29 { Px34y29, Px35y28, Px35y30, Px36y29 } CellNode (35 @ 29) (20)Px35y3 { Px35y2, Px35y4, Px34y3, Px36y3 } CellNode (35 @ 3) (20)Px35y30 { Px36y30, Px35y29, Px35y31, Px34y30 } CellNode (35 @ 30) (20)Px35y31 { Px36y31, Px34y31, Px35y32, Px35y30 } CellNode (35 @ 31) (20)Px35y32 { Px35y33, Px34y32, Px36y32, Px35y31 } CellNode (35 @ 32) (20)Px35y33 { Px35y32, Px36y33, Px34y33, Px35y34 } CellNode (35 @ 33) (20)Px35y34 { Px35y35, Px34y34, Px35y33, Px36y34 } CellNode (35 @ 34) (20)Px35y35 { Px35y36, Px34y35, Px36y35, Px35y34 } CellNode (35 @ 35) (20)Px35y36 { Px36y36, Px34y36, Px35y37, Px35y35 } CellNode (35 @ 36) (20)Px35y37 { Px34y37, Px35y36, Px36y37, Px35y38 } CellNode (35 @ 37) (20)Px35y38 { Px36y38, Px34y38, Px35y39, Px35y37 } CellNode (35 @ 38) (20)Px35y39 { Px36y39, Px34y39, Px35y38, Px35y40 } CellNode (35 @ 39) (20)Px35y4 { Px35y3, Px36y4, Px34y4, Px35y5 } CellNode (35 @ 4) (20)Px35y40 { Px35y39, Px35y41, Px36y40, Px34y40 } CellNode (35 @ 40) (20)Px35y41 { Px35y40, Px35y42, Px36y41, Px34y41 } CellNode (35 @ 41) (20)Px35y42 { Px36y42, Px35y41, Px34y42, Px35y43 } CellNode (35 @ 42) (20)Px35y43 { Px35y44, Px36y43, Px35y42, Px34y43 } CellNode (35 @ 43) (20)Px35y44 { Px35y45, Px36y44, Px35y43, Px34y44 } CellNode (35 @ 44) (20)Px35y45 { Px35y44, Px34y45, Px35y46, Px36y45 } CellNode (35 @ 45) (20)Px35y46 { Px36y46, Px35y45, Px34y46, Px35y47 } CellNode (35 @ 46) (20)Px35y47 { Px35y48, Px36y47, Px35y46, Px34y47 } CellNode (35 @ 47) (20)Px35y48 { Px34y48, Px35y49, Px36y48, Px35y47 } CellNode (35 @ 48) (20)Px35y49 { Px36y49, Px34y49, Px35y48, Px35y50 } CellNode (35 @ 49) (20)Px35y5 { Px35y6, Px34y5, Px35y4, Px36y5 } CellNode (35 @ 5) (20)Px35y50 { Px34y50, Px36y50, Px35y49, Px35y51 } CellNode (35 @ 50) (20)Px35y51 { Px36y51, Px35y52, Px34y51, Px35y50 } CellNode (35 @ 51) (20)Px35y52 { Px36y52, Px35y53, Px34y52, Px35y51 } CellNode (35 @ 52) (20)Px35y53 { Px34y53, Px35y52, Px35y54, Px36y53 } CellNode (35 @ 53) (20)Px35y54 { Px36y54, Px34y54, Px35y55, Px35y53 } CellNode (35 @ 54) (20)Px35y55 { Px35y56, Px34y55, Px36y55, Px35y54 } CellNode (35 @ 55) (20)Px35y56 { Px35y55, Px35y57, Px34y56, Px36y56 } CellNode (35 @ 56) (20)Px35y57 { Px35y58, Px34y57, Px35y56, Px36y57 } CellNode (35 @ 57) (20)Px35y58 { Px36y58, Px34y58, Px35y59, Px35y57 } CellNode (35 @ 58) (20)Px35y59 { Px35y60, Px36y59, Px34y59, Px35y58 } CellNode (35 @ 59) (20)Px35y6 { Px34y6, Px35y7, Px36y6, Px35y5 } CellNode (35 @ 6) (20)Px35y60 { Px35y59, Px35y61, Px36y60, Px34y60 } CellNode (35 @ 60) (20)Px35y61 { Px35y60, Px34y61, Px35y62, Px36y61 } CellNode (35 @ 61) (20)Px35y62 { Px36y62, Px34y62, Px35y61, Px35y63 } CellNode (35 @ 62) (20)Px35y63 { Px35y64, Px36y63, Px34y63, Px35y62 } CellNode (35 @ 63) (20)Px35y64 { Px34y64, Px35y65, Px36y64, Px35y63 } CellNode (35 @ 64) (20)Px35y65 { Px36y65, Px34y65, Px35y64, Px35y66 } CellNode (35 @ 65) (20)Px35y66 { Px35y67, Px36y66, Px34y66, Px35y65 } CellNode (35 @ 66) (20)Px35y67 { Px35y66, Px36y67, Px34y67 } CellNode (35 @ 67) (20)Px35y7 { Px36y7, Px35y6, Px34y7, Px35y8 } CellNode (35 @ 7) (20)Px35y8 { Px34y8, Px35y7, Px36y8, Px35y9 } CellNode (35 @ 8) (20)Px35y9 { Px34y9, Px35y10, Px35y8, Px36y9 } CellNode (35 @ 9) (20)Px36y1 { Px37y1, Px35y1, Px36y2 } CellNode (36 @ 1) (20)Px36y10 { Px36y11, Px35y10, Px36y9, Px37y10 } CellNode (36 @ 10) (20)Px36y11 { Px37y11, Px36y12, Px35y11, Px36y10 } CellNode (36 @ 11) (20)Px36y12 { Px36y11, Px36y13, Px37y12, Px35y12 } CellNode (36 @ 12) (20)Px36y13 { Px35y13, Px36y12, Px37y13, Px36y14 } CellNode (36 @ 13) (20)Px36y14 { Px36y15, Px37y14, Px36y13, Px35y14 } CellNode (36 @ 14) (20)Px36y15 { Px36y16, Px37y15, Px36y14, Px35y15 } CellNode (36 @ 15) (20)Px36y16 { Px36y15, Px35y16, Px36y17, Px37y16 } CellNode (36 @ 16) (20)Px36y17 { Px37y17, Px36y16, Px35y17, Px36y18 } CellNode (36 @ 17) (20)Px36y18 { Px37y18, Px36y19, Px35y18, Px36y17 } CellNode (36 @ 18) (20)Px36y19 { Px35y19, Px36y20, Px37y19, Px36y18 } CellNode (36 @ 19) (20)Px36y2 { Px35y2, Px36y1, Px37y2, Px36y3 } CellNode (36 @ 2) (20)Px36y20 { Px36y19, Px37y20, Px35y20, Px36y21 } CellNode (36 @ 20) (20)Px36y21 { Px35y21, Px36y22, Px36y20, Px37y21 } CellNode (36 @ 21) (20)Px36y22 { Px37y22, Px35y22, Px36y23, Px36y21 } CellNode (36 @ 22) (20)Px36y23 { Px36y24, Px35y23, Px37y23, Px36y22 } CellNode (36 @ 23) (20)Px36y24 { Px35y24, Px36y23, Px37y24, Px36y25 } CellNode (36 @ 24) (20)Px36y25 { Px36y26, Px35y25, Px37y25, Px36y24 } CellNode (36 @ 25) (20)Px36y26 { Px37y26, Px35y26, Px36y27, Px36y25 } CellNode (36 @ 26) (20)Px36y27 { Px36y26, Px37y27, Px35y27, Px36y28 } CellNode (36 @ 27) (20)Px36y28 { Px37y28, Px35y28, Px36y27, Px36y29 } CellNode (36 @ 28) (20)Px36y29 { Px37y29, Px35y29, Px36y28, Px36y30 } CellNode (36 @ 29) (20)Px36y3 { Px36y4, Px35y3, Px37y3, Px36y2 } CellNode (36 @ 3) (20)Px36y30 { Px36y31, Px37y30, Px35y30, Px36y29 } CellNode (36 @ 30) (20)Px36y31 { Px36y32, Px37y31, Px35y31, Px36y30 } CellNode (36 @ 31) (20)Px36y32 { Px36y31, Px35y32, Px36y33, Px37y32 } CellNode (36 @ 32) (20)Px36y33 { Px37y33, Px35y33, Px36y32, Px36y34 } CellNode (36 @ 33) (20)Px36y34 { Px36y35, Px37y34, Px36y33, Px35y34 } CellNode (36 @ 34) (20)Px36y35 { Px36y34, Px36y36, Px37y35, Px35y35 } CellNode (36 @ 35) (20)Px36y36 { Px37y36, Px35y36, Px36y35, Px36y37 } CellNode (36 @ 36) (20)Px36y37 { Px36y38, Px37y37, Px36y36, Px35y37 } CellNode (36 @ 37) (20)Px36y38 { Px36y39, Px37y38, Px36y37, Px35y38 } CellNode (36 @ 38) (20)Px36y39 { Px35y39, Px36y38, Px36y40, Px37y39 } CellNode (36 @ 39) (20)Px36y4 { Px36y3, Px35y4, Px36y5, Px37y4 } CellNode (36 @ 4) (20)Px36y40 { Px35y40, Px36y39, Px37y40, Px36y41 } CellNode (36 @ 40) (20)Px36y41 { Px37y41, Px36y42, Px35y41, Px36y40 } CellNode (36 @ 41) (20)Px36y42 { Px37y42, Px35y42, Px36y43, Px36y41 } CellNode (36 @ 42) (20)Px36y43 { Px36y42, Px37y43, Px35y43, Px36y44 } CellNode (36 @ 43) (20)Px36y44 { Px35y44, Px37y44, Px36y43, Px36y45 } CellNode (36 @ 44) (20)Px36y45 { Px37y45, Px35y45, Px36y46, Px36y44 } CellNode (36 @ 45) (20)Px36y46 { Px37y46, Px36y47, Px35y46, Px36y45 } CellNode (36 @ 46) (20)Px36y47 { Px35y47, Px36y46, Px37y47, Px36y48 } CellNode (36 @ 47) (20)Px36y48 { Px37y48, Px35y48, Px36y49, Px36y47 } CellNode (36 @ 48) (20)Px36y49 { Px37y49, Px35y49, Px36y48, Px36y50 } CellNode (36 @ 49) (20)Px36y5 { Px37y5, Px36y4, Px36y6, Px35y5 } CellNode (36 @ 5) (20)Px36y50 { Px36y49, Px36y51, Px37y50, Px35y50 } CellNode (36 @ 50) (20)Px36y51 { Px36y50, Px36y52, Px37y51, Px35y51 } CellNode (36 @ 51) (20)Px36y52 { Px37y52, Px36y51, Px35y52, Px36y53 } CellNode (36 @ 52) (20)Px36y53 { Px36y54, Px37y53, Px36y52, Px35y53 } CellNode (36 @ 53) (20)Px36y54 { Px36y55, Px37y54, Px35y54, Px36y53 } CellNode (36 @ 54) (20)Px36y55 { Px36y54, Px35y55, Px36y56, Px37y55 } CellNode (36 @ 55) (20)Px36y56 { Px37y56, Px35y56, Px36y55, Px36y57 } CellNode (36 @ 56) (20)Px36y57 { Px36y58, Px37y57, Px36y56, Px35y57 } CellNode (36 @ 57) (20)Px36y58 { Px36y57, Px36y59, Px37y58, Px35y58 } CellNode (36 @ 58) (20)Px36y59 { Px37y59, Px36y58, Px35y59, Px36y60 } CellNode (36 @ 59) (20)Px36y6 { Px35y6, Px36y7, Px37y6, Px36y5 } CellNode (36 @ 6) (20)Px36y60 { Px36y61, Px35y60, Px36y59, Px37y60 } CellNode (36 @ 60) (20)Px36y61 { Px36y62, Px35y61, Px37y61, Px36y60 } CellNode (36 @ 61) (20)Px36y62 { Px37y62, Px35y62, Px36y63, Px36y61 } CellNode (36 @ 62) (20)Px36y63 { Px36y64, Px36y62, Px37y63, Px35y63 } CellNode (36 @ 63) (20)Px36y64 { Px36y65, Px37y64, Px35y64, Px36y63 } CellNode (36 @ 64) (20)Px36y65 { Px37y65, Px36y66, Px35y65, Px36y64 } CellNode (36 @ 65) (20)Px36y66 { Px36y65, Px37y66, Px35y66, Px36y67 } CellNode (36 @ 66) (20)Px36y67 { Px35y67, Px36y66, Px37y67 } CellNode (36 @ 67) (20)Px36y7 { Px35y7, Px36y8, Px36y6, Px37y7 } CellNode (36 @ 7) (20)Px36y8 { Px36y7, Px37y8, Px35y8, Px36y9 } CellNode (36 @ 8) (20)Px36y9 { Px36y8, Px37y9, Px36y10, Px35y9 } CellNode (36 @ 9) (20)Px37y1 { Px37y2, Px38y1, Px36y1 } CellNode (37 @ 1) (20)Px37y10 { Px37y11, Px37y9, Px38y10, Px36y10 } CellNode (37 @ 10) (20)Px37y11 { Px36y11, Px37y12, Px38y11, Px37y10 } CellNode (37 @ 11) (20)Px37y12 { Px38y12, Px36y12, Px37y11, Px37y13 } CellNode (37 @ 12) (20)Px37y13 { Px37y14, Px38y13, Px36y13, Px37y12 } CellNode (37 @ 13) (20)Px37y14 { Px37y15, Px38y14, Px36y14, Px37y13 } CellNode (37 @ 14) (20)Px37y15 { Px36y15, Px37y14, Px37y16, Px38y15 } CellNode (37 @ 15) (20)Px37y16 { Px38y16, Px36y16, Px37y15, Px37y17 } CellNode (37 @ 16) (20)Px37y17 { Px37y18, Px38y17, Px36y17, Px37y16 } CellNode (37 @ 17) (20)Px37y18 { Px37y17, Px37y19, Px38y18, Px36y18 } CellNode (37 @ 18) (20)Px37y19 { Px38y19, Px37y18, Px36y19, Px37y20 } CellNode (37 @ 19) (20)Px37y2 { Px37y1, Px38y2, Px36y2, Px37y3 } CellNode (37 @ 2) (20)Px37y20 { Px38y20, Px36y20, Px37y19, Px37y21 } CellNode (37 @ 20) (20)Px37y21 { Px38y21, Px37y22, Px37y20, Px36y21 } CellNode (37 @ 21) (20)Px37y22 { Px36y22, Px38y22, Px37y23, Px37y21 } CellNode (37 @ 22) (20)Px37y23 { Px37y22, Px36y23, Px37y24, Px38y23 } CellNode (37 @ 23) (20)Px37y24 { Px38y24, Px37y25, Px36y24, Px37y23 } CellNode (37 @ 24) (20)Px37y25 { Px38y25, Px37y26, Px37y24, Px36y25 } CellNode (37 @ 25) (20)Px37y26 { Px36y26, Px37y25, Px37y27, Px38y26 } CellNode (37 @ 26) (20)Px37y27 { Px38y27, Px37y26, Px36y27, Px37y28 } CellNode (37 @ 27) (20)Px37y28 { Px38y28, Px37y29, Px37y27, Px36y28 } CellNode (37 @ 28) (20)Px37y29 { Px37y28, Px37y30, Px38y29, Px36y29 } CellNode (37 @ 29) (20)Px37y3 { Px36y3, Px37y2, Px38y3, Px37y4 } CellNode (37 @ 3) (20)Px37y30 { Px37y29, Px38y30, Px37y31, Px36y30 } CellNode (37 @ 30) (20)Px37y31 { Px36y31, Px38y31, Px37y30, Px37y32 } CellNode (37 @ 31) (20)Px37y32 { Px37y33, Px38y32, Px36y32, Px37y31 } CellNode (37 @ 32) (20)Px37y33 { Px37y34, Px36y33, Px38y33, Px37y32 } CellNode (37 @ 33) (20)Px37y34 { Px37y35, Px37y33, Px38y34, Px36y34 } CellNode (37 @ 34) (20)Px37y35 { Px38y35, Px36y35, Px37y36, Px37y34 } CellNode (37 @ 35) (20)Px37y36 { Px37y37, Px36y36, Px38y36, Px37y35 } CellNode (37 @ 36) (20)Px37y37 { Px37y36, Px37y38, Px36y37, Px38y37 } CellNode (37 @ 37) (20)Px37y38 { Px36y38, Px37y39, Px37y37, Px38y38 } CellNode (37 @ 38) (20)Px37y39 { Px38y39, Px36y39, Px37y38, Px37y40 } CellNode (37 @ 39) (20)Px37y4 { Px37y5, Px36y4, Px38y4, Px37y3 } CellNode (37 @ 4) (20)Px37y40 { Px37y41, Px38y40, Px36y40, Px37y39 } CellNode (37 @ 40) (20)Px37y41 { Px37y42, Px38y41, Px37y40, Px36y41 } CellNode (37 @ 41) (20)Px37y42 { Px37y41, Px36y42, Px37y43, Px38y42 } CellNode (37 @ 42) (20)Px37y43 { Px38y43, Px37y42, Px36y43, Px37y44 } CellNode (37 @ 43) (20)Px37y44 { Px37y45, Px38y44, Px37y43, Px36y44 } CellNode (37 @ 44) (20)Px37y45 { Px37y44, Px37y46, Px38y45, Px36y45 } CellNode (37 @ 45) (20)Px37y46 { Px37y45, Px36y46, Px38y46, Px37y47 } CellNode (37 @ 46) (20)Px37y47 { Px37y48, Px38y47, Px37y46, Px36y47 } CellNode (37 @ 47) (20)Px37y48 { Px37y49, Px38y48, Px36y48, Px37y47 } CellNode (37 @ 48) (20)Px37y49 { Px37y48, Px36y49, Px37y50, Px38y49 } CellNode (37 @ 49) (20)Px37y5 { Px38y5, Px37y6, Px36y5, Px37y4 } CellNode (37 @ 5) (20)Px37y50 { Px36y50, Px37y49, Px38y50, Px37y51 } CellNode (37 @ 50) (20)Px37y51 { Px38y51, Px36y51, Px37y52, Px37y50 } CellNode (37 @ 51) (20)Px37y52 { Px38y52, Px36y52, Px37y53, Px37y51 } CellNode (37 @ 52) (20)Px37y53 { Px37y52, Px38y53, Px36y53, Px37y54 } CellNode (37 @ 53) (20)Px37y54 { Px36y54, Px38y54, Px37y53, Px37y55 } CellNode (37 @ 54) (20)Px37y55 { Px37y56, Px36y55, Px38y55, Px37y54 } CellNode (37 @ 55) (20)Px37y56 { Px37y57, Px38y56, Px36y56, Px37y55 } CellNode (37 @ 56) (20)Px37y57 { Px36y57, Px37y56, Px38y57, Px37y58 } CellNode (37 @ 57) (20)Px37y58 { Px38y58, Px36y58, Px37y59, Px37y57 } CellNode (37 @ 58) (20)Px37y59 { Px38y59, Px36y59, Px37y58, Px37y60 } CellNode (37 @ 59) (20)Px37y6 { Px37y5, Px38y6, Px36y6, Px37y7 } CellNode (37 @ 6) (20)Px37y60 { Px37y59, Px37y61, Px38y60, Px36y60 } CellNode (37 @ 60) (20)Px37y61 { Px36y61, Px37y62, Px38y61, Px37y60 } CellNode (37 @ 61) (20)Px37y62 { Px38y62, Px36y62, Px37y61, Px37y63 } CellNode (37 @ 62) (20)Px37y63 { Px37y64, Px38y63, Px37y62, Px36y63 } CellNode (37 @ 63) (20)Px37y64 { Px37y65, Px38y64, Px37y63, Px36y64 } CellNode (37 @ 64) (20)Px37y65 { Px36y65, Px37y64, Px37y66, Px38y65 } CellNode (37 @ 65) (20)Px37y66 { Px38y66, Px37y65, Px36y66, Px37y67 } CellNode (37 @ 66) (20)Px37y67 { Px37y66, Px38y67, Px36y67 } CellNode (37 @ 67) (20)Px37y7 { Px36y7, Px37y8, Px38y7, Px37y6 } CellNode (37 @ 7) (20)Px37y8 { Px36y8, Px37y9, Px37y7, Px38y8 } CellNode (37 @ 8) (20)Px37y9 { Px37y8, Px38y9, Px36y9, Px37y10 } CellNode (37 @ 9) (20)Px38y1 { Px37y1, Px38y2, Px39y1 } CellNode (38 @ 1) (20)Px38y10 { Px39y10, Px38y9, Px38y11, Px37y10 } CellNode (38 @ 10) (20)Px38y11 { Px38y12, Px39y11, Px37y11, Px38y10 } CellNode (38 @ 11) (20)Px38y12 { Px38y13, Px37y12, Px39y12, Px38y11 } CellNode (38 @ 12) (20)Px38y13 { Px38y12, Px39y13, Px37y13, Px38y14 } CellNode (38 @ 13) (20)Px38y14 { Px39y14, Px37y14, Px38y13, Px38y15 } CellNode (38 @ 14) (20)Px38y15 { Px39y15, Px38y16, Px37y15, Px38y14 } CellNode (38 @ 15) (20)Px38y16 { Px39y16, Px38y17, Px37y16, Px38y15 } CellNode (38 @ 16) (20)Px38y17 { Px37y17, Px38y16, Px38y18, Px39y17 } CellNode (38 @ 17) (20)Px38y18 { Px38y19, Px37y18, Px39y18, Px38y17 } CellNode (38 @ 18) (20)Px38y19 { Px39y19, Px37y19, Px38y18, Px38y20 } CellNode (38 @ 19) (20)Px38y2 { Px37y2, Px38y3, Px38y1, Px39y2 } CellNode (38 @ 2) (20)Px38y20 { Px38y19, Px38y21, Px39y20, Px37y20 } CellNode (38 @ 20) (20)Px38y21 { Px38y20, Px38y22, Px39y21, Px37y21 } CellNode (38 @ 21) (20)Px38y22 { Px39y22, Px37y22, Px38y21, Px38y23 } CellNode (38 @ 22) (20)Px38y23 { Px38y24, Px39y23, Px38y22, Px37y23 } CellNode (38 @ 23) (20)Px38y24 { Px38y25, Px39y24, Px37y24, Px38y23 } CellNode (38 @ 24) (20)Px38y25 { Px38y24, Px37y25, Px38y26, Px39y25 } CellNode (38 @ 25) (20)Px38y26 { Px39y26, Px38y25, Px37y26, Px38y27 } CellNode (38 @ 26) (20)Px38y27 { Px38y28, Px39y27, Px37y27, Px38y26 } CellNode (38 @ 27) (20)Px38y28 { Px38y27, Px38y29, Px39y28, Px37y28 } CellNode (38 @ 28) (20)Px38y29 { Px39y29, Px38y28, Px37y29, Px38y30 } CellNode (38 @ 29) (20)Px38y3 { Px38y2, Px39y3, Px38y4, Px37y3 } CellNode (38 @ 3) (20)Px38y30 { Px38y31, Px37y30, Px38y29, Px39y30 } CellNode (38 @ 30) (20)Px38y31 { Px38y32, Px39y31, Px38y30, Px37y31 } CellNode (38 @ 31) (20)Px38y32 { Px38y31, Px38y33, Px39y32, Px37y32 } CellNode (38 @ 32) (20)Px38y33 { Px38y32, Px37y33, Px38y34, Px39y33 } CellNode (38 @ 33) (20)Px38y34 { Px38y35, Px39y34, Px38y33, Px37y34 } CellNode (38 @ 34) (20)Px38y35 { Px39y35, Px38y36, Px38y34, Px37y35 } CellNode (38 @ 35) (20)Px38y36 { Px38y35, Px37y36, Px39y36, Px38y37 } CellNode (38 @ 36) (20)Px38y37 { Px38y38, Px37y37, Px38y36, Px39y37 } CellNode (38 @ 37) (20)Px38y38 { Px38y39, Px39y38, Px37y38, Px38y37 } CellNode (38 @ 38) (20)Px38y39 { Px37y39, Px38y40, Px39y39, Px38y38 } CellNode (38 @ 39) (20)Px38y4 { Px38y5, Px39y4, Px38y3, Px37y4 } CellNode (38 @ 4) (20)Px38y40 { Px38y39, Px38y41, Px37y40, Px39y40 } CellNode (38 @ 40) (20)Px38y41 { Px37y41, Px38y42, Px38y40, Px39y41 } CellNode (38 @ 41) (20)Px38y42 { Px38y43, Px39y42, Px37y42, Px38y41 } CellNode (38 @ 42) (20)Px38y43 { Px39y43, Px37y43, Px38y44, Px38y42 } CellNode (38 @ 43) (20)Px38y44 { Px38y43, Px38y45, Px39y44, Px37y44 } CellNode (38 @ 44) (20)Px38y45 { Px39y45, Px37y45, Px38y44, Px38y46 } CellNode (38 @ 45) (20)Px38y46 { Px38y47, Px39y46, Px37y46, Px38y45 } CellNode (38 @ 46) (20)Px38y47 { Px38y48, Px39y47, Px38y46, Px37y47 } CellNode (38 @ 47) (20)Px38y48 { Px37y48, Px38y47, Px38y49, Px39y48 } CellNode (38 @ 48) (20)Px38y49 { Px39y49, Px37y49, Px38y48, Px38y50 } CellNode (38 @ 49) (20)Px38y5 { Px37y5, Px38y6, Px38y4, Px39y5 } CellNode (38 @ 5) (20)Px38y50 { Px39y50, Px38y51, Px37y50, Px38y49 } CellNode (38 @ 50) (20)Px38y51 { Px38y52, Px39y51, Px38y50, Px37y51 } CellNode (38 @ 51) (20)Px38y52 { Px37y52, Px38y51, Px38y53, Px39y52 } CellNode (38 @ 52) (20)Px38y53 { Px39y53, Px38y52, Px37y53, Px38y54 } CellNode (38 @ 53) (20)Px38y54 { Px39y54, Px38y55, Px38y53, Px37y54 } CellNode (38 @ 54) (20)Px38y55 { Px38y54, Px39y55, Px38y56, Px37y55 } CellNode (38 @ 55) (20)Px38y56 { Px37y56, Px38y55, Px39y56, Px38y57 } CellNode (38 @ 56) (20)Px38y57 { Px39y57, Px38y58, Px37y57, Px38y56 } CellNode (38 @ 57) (20)Px38y58 { Px38y59, Px39y58, Px38y57, Px37y58 } CellNode (38 @ 58) (20)Px38y59 { Px38y58, Px37y59, Px38y60, Px39y59 } CellNode (38 @ 59) (20)Px38y6 { Px39y6, Px38y7, Px37y6, Px38y5 } CellNode (38 @ 6) (20)Px38y60 { Px39y60, Px38y59, Px38y61, Px37y60 } CellNode (38 @ 60) (20)Px38y61 { Px39y61, Px38y62, Px37y61, Px38y60 } CellNode (38 @ 61) (20)Px38y62 { Px39y62, Px37y62, Px38y63, Px38y61 } CellNode (38 @ 62) (20)Px38y63 { Px38y62, Px39y63, Px37y63, Px38y64 } CellNode (38 @ 63) (20)Px38y64 { Px37y64, Px38y65, Px38y63, Px39y64 } CellNode (38 @ 64) (20)Px38y65 { Px38y66, Px37y65, Px39y65, Px38y64 } CellNode (38 @ 65) (20)Px38y66 { Px38y67, Px39y66, Px37y66, Px38y65 } CellNode (38 @ 66) (20)Px38y67 { Px37y67, Px38y66, Px39y67 } CellNode (38 @ 67) (20)Px38y7 { Px38y6, Px39y7, Px37y7, Px38y8 } CellNode (38 @ 7) (20)Px38y8 { Px37y8, Px38y9, Px39y8, Px38y7 } CellNode (38 @ 8) (20)Px38y9 { Px37y9, Px38y10, Px38y8, Px39y9 } CellNode (38 @ 9) (20)Px39y1 { Px38y1, Px39y2, Px40y1 } CellNode (39 @ 1) (20)Px39y10 { Px39y11, Px40y10, Px38y10, Px39y9 } CellNode (39 @ 10) (20)Px39y11 { Px39y12, Px40y11, Px38y11, Px39y10 } CellNode (39 @ 11) (20)Px39y12 { Px38y12, Px39y11, Px39y13, Px40y12 } CellNode (39 @ 12) (20)Px39y13 { Px40y13, Px38y13, Px39y12, Px39y14 } CellNode (39 @ 13) (20)Px39y14 { Px39y15, Px40y14, Px39y13, Px38y14 } CellNode (39 @ 14) (20)Px39y15 { Px39y14, Px39y16, Px40y15, Px38y15 } CellNode (39 @ 15) (20)Px39y16 { Px40y16, Px39y15, Px38y16, Px39y17 } CellNode (39 @ 16) (20)Px39y17 { Px39y18, Px40y17, Px39y16, Px38y17 } CellNode (39 @ 17) (20)Px39y18 { Px39y19, Px40y18, Px39y17, Px38y18 } CellNode (39 @ 18) (20)Px39y19 { Px38y19, Px39y18, Px39y20, Px40y19 } CellNode (39 @ 19) (20)Px39y2 { Px38y2, Px39y3, Px39y1, Px40y2 } CellNode (39 @ 2) (20)Px39y20 { Px40y20, Px39y19, Px39y21, Px38y20 } CellNode (39 @ 20) (20)Px39y21 { Px39y22, Px38y21, Px40y21, Px39y20 } CellNode (39 @ 21) (20)Px39y22 { Px39y23, Px38y22, Px40y22, Px39y21 } CellNode (39 @ 22) (20)Px39y23 { Px39y22, Px40y23, Px38y23, Px39y24 } CellNode (39 @ 23) (20)Px39y24 { Px38y24, Px39y25, Px39y23, Px40y24 } CellNode (39 @ 24) (20)Px39y25 { Px39y26, Px38y25, Px40y25, Px39y24 } CellNode (39 @ 25) (20)Px39y26 { Px39y27, Px38y26, Px40y26, Px39y25 } CellNode (39 @ 26) (20)Px39y27 { Px38y27, Px39y26, Px40y27, Px39y28 } CellNode (39 @ 27) (20)Px39y28 { Px40y28, Px38y28, Px39y29, Px39y27 } CellNode (39 @ 28) (20)Px39y29 { Px40y29, Px38y29, Px39y28, Px39y30 } CellNode (39 @ 29) (20)Px39y3 { Px39y4, Px38y3, Px39y2, Px40y3 } CellNode (39 @ 3) (20)Px39y30 { Px39y29, Px39y31, Px40y30, Px38y30 } CellNode (39 @ 30) (20)Px39y31 { Px38y31, Px39y32, Px40y31, Px39y30 } CellNode (39 @ 31) (20)Px39y32 { Px40y32, Px38y32, Px39y31, Px39y33 } CellNode (39 @ 32) (20)Px39y33 { Px39y34, Px40y33, Px38y33, Px39y32 } CellNode (39 @ 33) (20)Px39y34 { Px39y35, Px40y34, Px38y34, Px39y33 } CellNode (39 @ 34) (20)Px39y35 { Px38y35, Px39y34, Px39y36, Px40y35 } CellNode (39 @ 35) (20)Px39y36 { Px40y36, Px39y35, Px38y36, Px39y37 } CellNode (39 @ 36) (20)Px39y37 { Px39y38, Px40y37, Px39y36, Px38y37 } CellNode (39 @ 37) (20)Px39y38 { Px38y38, Px39y39, Px40y38, Px39y37 } CellNode (39 @ 38) (20)Px39y39 { Px40y39, Px38y39, Px39y38, Px39y40 } CellNode (39 @ 39) (20)Px39y4 { Px39y3, Px40y4, Px38y4, Px39y5 } CellNode (39 @ 4) (20)Px39y40 { Px40y40, Px38y40, Px39y39, Px39y41 } CellNode (39 @ 40) (20)Px39y41 { Px39y42, Px40y41, Px38y41, Px39y40 } CellNode (39 @ 41) (20)Px39y42 { Px38y42, Px39y43, Px40y42, Px39y41 } CellNode (39 @ 42) (20)Px39y43 { Px40y43, Px38y43, Px39y42, Px39y44 } CellNode (39 @ 43) (20)Px39y44 { Px39y45, Px40y44, Px39y43, Px38y44 } CellNode (39 @ 44) (20)Px39y45 { Px39y46, Px38y45, Px40y45, Px39y44 } CellNode (39 @ 45) (20)Px39y46 { Px39y45, Px39y47, Px38y46, Px40y46 } CellNode (39 @ 46) (20)Px39y47 { Px38y47, Px40y47, Px39y46, Px39y48 } CellNode (39 @ 47) (20)Px39y48 { Px39y49, Px38y48, Px40y48, Px39y47 } CellNode (39 @ 48) (20)Px39y49 { Px39y50, Px38y49, Px40y49, Px39y48 } CellNode (39 @ 49) (20)Px39y5 { Px39y6, Px39y4, Px40y5, Px38y5 } CellNode (39 @ 5) (20)Px39y50 { Px39y49, Px39y51, Px40y50, Px38y50 } CellNode (39 @ 50) (20)Px39y51 { Px39y50, Px38y51, Px39y52, Px40y51 } CellNode (39 @ 51) (20)Px39y52 { Px40y52, Px39y51, Px38y52, Px39y53 } CellNode (39 @ 52) (20)Px39y53 { Px39y54, Px40y53, Px38y53, Px39y52 } CellNode (39 @ 53) (20)Px39y54 { Px39y53, Px39y55, Px40y54, Px38y54 } CellNode (39 @ 54) (20)Px39y55 { Px40y55, Px39y54, Px38y55, Px39y56 } CellNode (39 @ 55) (20)Px39y56 { Px39y57, Px40y56, Px38y56, Px39y55 } CellNode (39 @ 56) (20)Px39y57 { Px39y58, Px40y57, Px39y56, Px38y57 } CellNode (39 @ 57) (20)Px39y58 { Px39y57, Px38y58, Px39y59, Px40y58 } CellNode (39 @ 58) (20)Px39y59 { Px40y59, Px38y59, Px39y58, Px39y60 } CellNode (39 @ 59) (20)Px39y6 { Px38y6, Px39y7, Px39y5, Px40y6 } CellNode (39 @ 6) (20)Px39y60 { Px39y61, Px40y60, Px38y60, Px39y59 } CellNode (39 @ 60) (20)Px39y61 { Px39y62, Px40y61, Px38y61, Px39y60 } CellNode (39 @ 61) (20)Px39y62 { Px38y62, Px39y61, Px39y63, Px40y62 } CellNode (39 @ 62) (20)Px39y63 { Px40y63, Px39y62, Px38y63, Px39y64 } CellNode (39 @ 63) (20)Px39y64 { Px39y65, Px40y64, Px39y63, Px38y64 } CellNode (39 @ 64) (20)Px39y65 { Px38y65, Px39y66, Px40y65, Px39y64 } CellNode (39 @ 65) (20)Px39y66 { Px40y66, Px38y66, Px39y65, Px39y67 } CellNode (39 @ 66) (20)Px39y67 { Px38y67, Px39y66, Px40y67 } CellNode (39 @ 67) (20)Px39y7 { Px40y7, Px39y8, Px38y7, Px39y6 } CellNode (39 @ 7) (20)Px39y8 { Px39y7, Px40y8, Px38y8, Px39y9 } CellNode (39 @ 8) (20)Px39y9 { Px38y9, Px39y8, Px40y9, Px39y10 } CellNode (39 @ 9) (20)Px3y1 { Px3y2, Px4y1, Px2y1 } CellNode (3 @ 1) (20)Px3y10 { Px4y10, Px2y10, Px3y11, Px3y9 } CellNode (3 @ 10) (20)Px3y11 { Px3y12, Px2y11, Px4y11, Px3y10 } CellNode (3 @ 11) (20)Px3y12 { Px3y11, Px3y13, Px2y12, Px4y12 } CellNode (3 @ 12) (20)Px3y13 { Px2y13, Px4y13, Px3y12, Px3y14 } CellNode (3 @ 13) (20)Px3y14 { Px4y14, Px3y15, Px2y14, Px3y13 } CellNode (3 @ 14) (20)Px3y15 { Px4y15, Px3y16, Px2y15, Px3y14 } CellNode (3 @ 15) (20)Px3y16 { Px4y16, Px3y15, Px3y17, Px2y16 } CellNode (3 @ 16) (20)Px3y17 { Px4y17, Px2y17, Px3y18, Px3y16 } CellNode (3 @ 17) (20)Px3y18 { Px4y18, Px2y18, Px3y19, Px3y17 } CellNode (3 @ 18) (20)Px3y19 { Px3y18, Px3y20, Px4y19, Px2y19 } CellNode (3 @ 19) (20)Px3y2 { Px3y3, Px4y2, Px3y1, Px2y2 } CellNode (3 @ 2) (20)Px3y20 { Px3y19, Px3y21, Px4y20, Px2y20 } CellNode (3 @ 20) (20)Px3y21 { Px4y21, Px2y21, Px3y20, Px3y22 } CellNode (3 @ 21) (20)Px3y22 { Px3y23, Px4y22, Px3y21, Px2y22 } CellNode (3 @ 22) (20)Px3y23 { Px3y24, Px4y23, Px3y22, Px2y23 } CellNode (3 @ 23) (20)Px3y24 { Px2y24, Px3y23, Px3y25, Px4y24 } CellNode (3 @ 24) (20)Px3y25 { Px4y25, Px3y24, Px2y25, Px3y26 } CellNode (3 @ 25) (20)Px3y26 { Px3y27, Px4y26, Px3y25, Px2y26 } CellNode (3 @ 26) (20)Px3y27 { Px3y26, Px3y28, Px4y27, Px2y27 } CellNode (3 @ 27) (20)Px3y28 { Px4y28, Px2y28, Px3y27, Px3y29 } CellNode (3 @ 28) (20)Px3y29 { Px4y29, Px3y28, Px2y29, Px3y30 } CellNode (3 @ 29) (20)Px3y3 { Px3y4, Px2y3, Px3y2, Px4y3 } CellNode (3 @ 3) (20)Px3y30 { Px3y31, Px4y30, Px2y30, Px3y29 } CellNode (3 @ 30) (20)Px3y31 { Px2y31, Px3y32, Px4y31, Px3y30 } CellNode (3 @ 31) (20)Px3y32 { Px2y32, Px3y31, Px3y33, Px4y32 } CellNode (3 @ 32) (20)Px3y33 { Px3y34, Px2y33, Px4y33, Px3y32 } CellNode (3 @ 33) (20)Px3y34 { Px4y34, Px3y35, Px2y34, Px3y33 } CellNode (3 @ 34) (20)Px3y35 { Px3y34, Px4y35, Px2y35, Px3y36 } CellNode (3 @ 35) (20)Px3y36 { Px3y37, Px2y36, Px3y35, Px4y36 } CellNode (3 @ 36) (20)Px3y37 { Px4y37, Px3y38, Px2y37, Px3y36 } CellNode (3 @ 37) (20)Px3y38 { Px4y38, Px2y38, Px3y39, Px3y37 } CellNode (3 @ 38) (20)Px3y39 { Px3y38, Px3y40, Px4y39, Px2y39 } CellNode (3 @ 39) (20)Px3y4 { Px4y4, Px2y4, Px3y5, Px3y3 } CellNode (3 @ 4) (20)Px3y40 { Px2y40, Px3y39, Px3y41, Px4y40 } CellNode (3 @ 40) (20)Px3y41 { Px4y41, Px2y41, Px3y40, Px3y42 } CellNode (3 @ 41) (20)Px3y42 { Px3y43, Px4y42, Px3y41, Px2y42 } CellNode (3 @ 42) (20)Px3y43 { Px2y43, Px3y44, Px4y43, Px3y42 } CellNode (3 @ 43) (20)Px3y44 { Px4y44, Px3y43, Px2y44, Px3y45 } CellNode (3 @ 44) (20)Px3y45 { Px3y46, Px4y45, Px2y45, Px3y44 } CellNode (3 @ 45) (20)Px3y46 { Px3y47, Px4y46, Px2y46, Px3y45 } CellNode (3 @ 46) (20)Px3y47 { Px2y47, Px3y46, Px3y48, Px4y47 } CellNode (3 @ 47) (20)Px3y48 { Px4y48, Px3y47, Px2y48, Px3y49 } CellNode (3 @ 48) (20)Px3y49 { Px3y50, Px4y49, Px2y49, Px3y48 } CellNode (3 @ 49) (20)Px3y5 { Px3y4, Px4y5, Px3y6, Px2y5 } CellNode (3 @ 5) (20)Px3y50 { Px3y51, Px4y50, Px2y50, Px3y49 } CellNode (3 @ 50) (20)Px3y51 { Px3y50, Px2y51, Px3y52, Px4y51 } CellNode (3 @ 51) (20)Px3y52 { Px3y53, Px3y51, Px2y52, Px4y52 } CellNode (3 @ 52) (20)Px3y53 { Px3y54, Px4y53, Px3y52, Px2y53 } CellNode (3 @ 53) (20)Px3y54 { Px3y53, Px4y54, Px3y55, Px2y54 } CellNode (3 @ 54) (20)Px3y55 { Px2y55, Px3y54, Px4y55, Px3y56 } CellNode (3 @ 55) (20)Px3y56 { Px4y56, Px3y57, Px3y55, Px2y56 } CellNode (3 @ 56) (20)Px3y57 { Px3y58, Px4y57, Px3y56, Px2y57 } CellNode (3 @ 57) (20)Px3y58 { Px2y58, Px3y57, Px3y59, Px4y58 } CellNode (3 @ 58) (20)Px3y59 { Px3y58, Px2y59, Px3y60, Px4y59 } CellNode (3 @ 59) (20)Px3y6 { Px2y6, Px3y7, Px3y5, Px4y6 } CellNode (3 @ 6) (20)Px3y60 { Px3y61, Px2y60, Px4y60, Px3y59 } CellNode (3 @ 60) (20)Px3y61 { Px4y61, Px2y61, Px3y62, Px3y60 } CellNode (3 @ 61) (20)Px3y62 { Px3y61, Px4y62, Px2y62, Px3y63 } CellNode (3 @ 62) (20)Px3y63 { Px2y63, Px4y63, Px3y62, Px3y64 } CellNode (3 @ 63) (20)Px3y64 { Px3y65, Px4y64, Px2y64, Px3y63 } CellNode (3 @ 64) (20)Px3y65 { Px4y65, Px3y66, Px2y65, Px3y64 } CellNode (3 @ 65) (20)Px3y66 { Px3y67, Px3y65, Px4y66, Px2y66 } CellNode (3 @ 66) (20)Px3y67 { Px2y67, Px4y67, Px3y66 } CellNode (3 @ 67) (20)Px3y7 { Px2y7, Px3y8, Px3y6, Px4y7 } CellNode (3 @ 7) (20)Px3y8 { Px4y8, Px3y7, Px3y9, Px2y8 } CellNode (3 @ 8) (20)Px3y9 { Px3y8, Px4y9, Px3y10, Px2y9 } CellNode (3 @ 9) (20)Px40y1 { Px41y1, Px39y1, Px40y2 } CellNode (40 @ 1) (20)Px40y10 { Px40y11, Px41y10, Px40y9, Px39y10 } CellNode (40 @ 10) (20)Px40y11 { Px39y11, Px40y12, Px40y10, Px41y11 } CellNode (40 @ 11) (20)Px40y12 { Px40y13, Px41y12, Px39y12, Px40y11 } CellNode (40 @ 12) (20)Px40y13 { Px41y13, Px40y14, Px39y13, Px40y12 } CellNode (40 @ 13) (20)Px40y14 { Px41y14, Px40y13, Px40y15, Px39y14 } CellNode (40 @ 14) (20)Px40y15 { Px41y15, Px39y15, Px40y16, Px40y14 } CellNode (40 @ 15) (20)Px40y16 { Px40y17, Px41y16, Px39y16, Px40y15 } CellNode (40 @ 16) (20)Px40y17 { Px40y16, Px40y18, Px41y17, Px39y17 } CellNode (40 @ 17) (20)Px40y18 { Px39y18, Px41y18, Px40y17, Px40y19 } CellNode (40 @ 18) (20)Px40y19 { Px40y20, Px41y19, Px39y19, Px40y18 } CellNode (40 @ 19) (20)Px40y2 { Px40y1, Px41y2, Px39y2, Px40y3 } CellNode (40 @ 2) (20)Px40y20 { Px40y21, Px39y20, Px41y20, Px40y19 } CellNode (40 @ 20) (20)Px40y21 { Px40y20, Px40y22, Px41y21, Px39y21 } CellNode (40 @ 21) (20)Px40y22 { Px39y22, Px40y21, Px40y23, Px41y22 } CellNode (40 @ 22) (20)Px40y23 { Px41y23, Px39y23, Px40y22, Px40y24 } CellNode (40 @ 23) (20)Px40y24 { Px40y25, Px41y24, Px39y24, Px40y23 } CellNode (40 @ 24) (20)Px40y25 { Px39y25, Px40y26, Px41y25, Px40y24 } CellNode (40 @ 25) (20)Px40y26 { Px41y26, Px39y26, Px40y25, Px40y27 } CellNode (40 @ 26) (20)Px40y27 { Px40y28, Px41y27, Px39y27, Px40y26 } CellNode (40 @ 27) (20)Px40y28 { Px40y29, Px41y28, Px40y27, Px39y28 } CellNode (40 @ 28) (20)Px40y29 { Px39y29, Px40y28, Px40y30, Px41y29 } CellNode (40 @ 29) (20)Px40y3 { Px39y3, Px40y4, Px40y2, Px41y3 } CellNode (40 @ 3) (20)Px40y30 { Px40y31, Px40y29, Px41y30, Px39y30 } CellNode (40 @ 30) (20)Px40y31 { Px40y32, Px41y31, Px39y31, Px40y30 } CellNode (40 @ 31) (20)Px40y32 { Px40y33, Px41y32, Px39y32, Px40y31 } CellNode (40 @ 32) (20)Px40y33 { Px40y32, Px41y33, Px40y34, Px39y33 } CellNode (40 @ 33) (20)Px40y34 { Px39y34, Px41y34, Px40y33, Px40y35 } CellNode (40 @ 34) (20)Px40y35 { Px41y35, Px39y35, Px40y36, Px40y34 } CellNode (40 @ 35) (20)Px40y36 { Px41y36, Px39y36, Px40y37, Px40y35 } CellNode (40 @ 36) (20)Px40y37 { Px40y38, Px40y36, Px41y37, Px39y37 } CellNode (40 @ 37) (20)Px40y38 { Px41y38, Px40y39, Px39y38, Px40y37 } CellNode (40 @ 38) (20)Px40y39 { Px40y40, Px41y39, Px39y39, Px40y38 } CellNode (40 @ 39) (20)Px40y4 { Px41y4, Px39y4, Px40y5, Px40y3 } CellNode (40 @ 4) (20)Px40y40 { Px40y39, Px40y41, Px39y40, Px41y40 } CellNode (40 @ 40) (20)Px40y41 { Px41y41, Px40y40, Px40y42, Px39y41 } CellNode (40 @ 41) (20)Px40y42 { Px40y43, Px39y42, Px41y42, Px40y41 } CellNode (40 @ 42) (20)Px40y43 { Px40y44, Px39y43, Px41y43, Px40y42 } CellNode (40 @ 43) (20)Px40y44 { Px40y43, Px40y45, Px39y44, Px41y44 } CellNode (40 @ 44) (20)Px40y45 { Px41y45, Px39y45, Px40y44, Px40y46 } CellNode (40 @ 45) (20)Px40y46 { Px41y46, Px39y46, Px40y47, Px40y45 } CellNode (40 @ 46) (20)Px40y47 { Px41y47, Px40y48, Px39y47, Px40y46 } CellNode (40 @ 47) (20)Px40y48 { Px40y49, Px40y47, Px41y48, Px39y48 } CellNode (40 @ 48) (20)Px40y49 { Px41y49, Px39y49, Px40y48, Px40y50 } CellNode (40 @ 49) (20)Px40y5 { Px40y4, Px41y5, Px39y5, Px40y6 } CellNode (40 @ 5) (20)Px40y50 { Px39y50, Px41y50, Px40y49, Px40y51 } CellNode (40 @ 50) (20)Px40y51 { Px40y52, Px39y51, Px41y51, Px40y50 } CellNode (40 @ 51) (20)Px40y52 { Px40y53, Px39y52, Px41y52, Px40y51 } CellNode (40 @ 52) (20)Px40y53 { Px41y53, Px40y52, Px40y54, Px39y53 } CellNode (40 @ 53) (20)Px40y54 { Px40y55, Px39y54, Px41y54, Px40y53 } CellNode (40 @ 54) (20)Px40y55 { Px40y56, Px39y55, Px41y55, Px40y54 } CellNode (40 @ 55) (20)Px40y56 { Px40y55, Px40y57, Px39y56, Px41y56 } CellNode (40 @ 56) (20)Px40y57 { Px39y57, Px41y57, Px40y56, Px40y58 } CellNode (40 @ 57) (20)Px40y58 { Px40y59, Px39y58, Px41y58, Px40y57 } CellNode (40 @ 58) (20)Px40y59 { Px40y60, Px39y59, Px41y59, Px40y58 } CellNode (40 @ 59) (20)Px40y6 { Px40y7, Px40y5, Px41y6, Px39y6 } CellNode (40 @ 6) (20)Px40y60 { Px40y59, Px40y61, Px41y60, Px39y60 } CellNode (40 @ 60) (20)Px40y61 { Px41y61, Px39y61, Px40y60, Px40y62 } CellNode (40 @ 61) (20)Px40y62 { Px41y62, Px40y63, Px39y62, Px40y61 } CellNode (40 @ 62) (20)Px40y63 { Px40y64, Px39y63, Px41y63, Px40y62 } CellNode (40 @ 63) (20)Px40y64 { Px41y64, Px40y63, Px40y65, Px39y64 } CellNode (40 @ 64) (20)Px40y65 { Px40y66, Px41y65, Px39y65, Px40y64 } CellNode (40 @ 65) (20)Px40y66 { Px40y67, Px41y66, Px39y66, Px40y65 } CellNode (40 @ 66) (20)Px40y67 { Px40y66, Px39y67, Px41y67 } CellNode (40 @ 67) (20)Px40y7 { Px39y7, Px40y8, Px40y6, Px41y7 } CellNode (40 @ 7) (20)Px40y8 { Px40y7, Px41y8, Px39y8, Px40y9 } CellNode (40 @ 8) (20)Px40y9 { Px40y8, Px40y10, Px41y9, Px39y9 } CellNode (40 @ 9) (20)Px41y1 { Px41y2, Px42y1, Px40y1 } CellNode (41 @ 1) (20)Px41y10 { Px42y10, Px40y10, Px41y9, Px41y11 } CellNode (41 @ 10) (20)Px41y11 { Px41y12, Px42y11, Px41y10, Px40y11 } CellNode (41 @ 11) (20)Px41y12 { Px40y12, Px41y13, Px42y12, Px41y11 } CellNode (41 @ 12) (20)Px41y13 { Px42y13, Px40y13, Px41y12, Px41y14 } CellNode (41 @ 13) (20)Px41y14 { Px41y15, Px42y14, Px40y14, Px41y13 } CellNode (41 @ 14) (20)Px41y15 { Px41y16, Px42y15, Px40y15, Px41y14 } CellNode (41 @ 15) (20)Px41y16 { Px41y15, Px40y16, Px41y17, Px42y16 } CellNode (41 @ 16) (20)Px41y17 { Px42y17, Px41y16, Px40y17, Px41y18 } CellNode (41 @ 17) (20)Px41y18 { Px41y19, Px42y18, Px40y18, Px41y17 } CellNode (41 @ 18) (20)Px41y19 { Px41y18, Px41y20, Px42y19, Px40y19 } CellNode (41 @ 19) (20)Px41y2 { Px41y1, Px42y2, Px40y2, Px41y3 } CellNode (41 @ 2) (20)Px41y20 { Px40y20, Px41y19, Px41y21, Px42y20 } CellNode (41 @ 20) (20)Px41y21 { Px41y22, Px40y21, Px41y20, Px42y21 } CellNode (41 @ 21) (20)Px41y22 { Px41y23, Px42y22, Px40y22, Px41y21 } CellNode (41 @ 22) (20)Px41y23 { Px41y24, Px42y23, Px40y23, Px41y22 } CellNode (41 @ 23) (20)Px41y24 { Px41y25, Px41y23, Px42y24, Px40y24 } CellNode (41 @ 24) (20)Px41y25 { Px41y26, Px42y25, Px40y25, Px41y24 } CellNode (41 @ 25) (20)Px41y26 { Px42y26, Px41y27, Px40y26, Px41y25 } CellNode (41 @ 26) (20)Px41y27 { Px41y26, Px41y28, Px40y27, Px42y27 } CellNode (41 @ 27) (20)Px41y28 { Px40y28, Px41y29, Px41y27, Px42y28 } CellNode (41 @ 28) (20)Px41y29 { Px42y29, Px40y29, Px41y28, Px41y30 } CellNode (41 @ 29) (20)Px41y3 { Px41y4, Px41y2, Px42y3, Px40y3 } CellNode (41 @ 3) (20)Px41y30 { Px41y31, Px42y30, Px40y30, Px41y29 } CellNode (41 @ 30) (20)Px41y31 { Px41y32, Px42y31, Px41y30, Px40y31 } CellNode (41 @ 31) (20)Px41y32 { Px40y32, Px41y31, Px41y33, Px42y32 } CellNode (41 @ 32) (20)Px41y33 { Px42y33, Px40y33, Px41y32, Px41y34 } CellNode (41 @ 33) (20)Px41y34 { Px41y35, Px42y34, Px41y33, Px40y34 } CellNode (41 @ 34) (20)Px41y35 { Px41y34, Px41y36, Px42y35, Px40y35 } CellNode (41 @ 35) (20)Px41y36 { Px42y36, Px41y35, Px40y36, Px41y37 } CellNode (41 @ 36) (20)Px41y37 { Px41y38, Px42y37, Px40y37, Px41y36 } CellNode (41 @ 37) (20)Px41y38 { Px41y39, Px42y38, Px41y37, Px40y38 } CellNode (41 @ 38) (20)Px41y39 { Px41y38, Px40y39, Px41y40, Px42y39 } CellNode (41 @ 39) (20)Px41y4 { Px41y3, Px40y4, Px41y5, Px42y4 } CellNode (41 @ 4) (20)Px41y40 { Px40y40, Px41y39, Px41y41, Px42y40 } CellNode (41 @ 40) (20)Px41y41 { Px42y41, Px41y42, Px40y41, Px41y40 } CellNode (41 @ 41) (20)Px41y42 { Px42y42, Px41y43, Px40y42, Px41y41 } CellNode (41 @ 42) (20)Px41y43 { Px40y43, Px41y42, Px42y43, Px41y44 } CellNode (41 @ 43) (20)Px41y44 { Px41y45, Px40y44, Px41y43, Px42y44 } CellNode (41 @ 44) (20)Px41y45 { Px41y46, Px42y45, Px40y45, Px41y44 } CellNode (41 @ 45) (20)Px41y46 { Px41y45, Px42y46, Px41y47, Px40y46 } CellNode (41 @ 46) (20)Px41y47 { Px41y46, Px40y47, Px42y47, Px41y48 } CellNode (41 @ 47) (20)Px41y48 { Px42y48, Px41y49, Px41y47, Px40y48 } CellNode (41 @ 48) (20)Px41y49 { Px41y50, Px42y49, Px41y48, Px40y49 } CellNode (41 @ 49) (20)Px41y5 { Px41y4, Px42y5, Px40y5, Px41y6 } CellNode (41 @ 5) (20)Px41y50 { Px41y49, Px41y51, Px42y50, Px40y50 } CellNode (41 @ 50) (20)Px41y51 { Px40y51, Px41y50, Px41y52, Px42y51 } CellNode (41 @ 51) (20)Px41y52 { Px42y52, Px41y53, Px40y52, Px41y51 } CellNode (41 @ 52) (20)Px41y53 { Px42y53, Px40y53, Px41y54, Px41y52 } CellNode (41 @ 53) (20)Px41y54 { Px41y53, Px42y54, Px40y54, Px41y55 } CellNode (41 @ 54) (20)Px41y55 { Px40y55, Px41y56, Px41y54, Px42y55 } CellNode (41 @ 55) (20)Px41y56 { Px41y57, Px40y56, Px42y56, Px41y55 } CellNode (41 @ 56) (20)Px41y57 { Px42y57, Px40y57, Px41y58, Px41y56 } CellNode (41 @ 57) (20)Px41y58 { Px42y58, Px41y57, Px41y59, Px40y58 } CellNode (41 @ 58) (20)Px41y59 { Px42y59, Px40y59, Px41y58, Px41y60 } CellNode (41 @ 59) (20)Px41y6 { Px41y5, Px42y6, Px40y6, Px41y7 } CellNode (41 @ 6) (20)Px41y60 { Px42y60, Px40y60, Px41y59, Px41y61 } CellNode (41 @ 60) (20)Px41y61 { Px41y62, Px42y61, Px41y60, Px40y61 } CellNode (41 @ 61) (20)Px41y62 { Px41y61, Px41y63, Px42y62, Px40y62 } CellNode (41 @ 62) (20)Px41y63 { Px40y63, Px41y62, Px41y64, Px42y63 } CellNode (41 @ 63) (20)Px41y64 { Px42y64, Px41y65, Px40y64, Px41y63 } CellNode (41 @ 64) (20)Px41y65 { Px41y66, Px42y65, Px40y65, Px41y64 } CellNode (41 @ 65) (20)Px41y66 { Px40y66, Px41y65, Px41y67, Px42y66 } CellNode (41 @ 66) (20)Px41y67 { Px40y67, Px41y66, Px42y67 } CellNode (41 @ 67) (20)Px41y7 { Px40y7, Px41y8, Px41y6, Px42y7 } CellNode (41 @ 7) (20)Px41y8 { Px42y8, Px40y8, Px41y9, Px41y7 } CellNode (41 @ 8) (20)Px41y9 { Px41y8, Px42y9, Px41y10, Px40y9 } CellNode (41 @ 9) (20)Px42y1 { Px41y1, Px42y2, Px43y1 } CellNode (42 @ 1) (20)Px42y10 { Px42y9, Px42y11, Px41y10, Px43y10 } CellNode (42 @ 10) (20)Px42y11 { Px43y11, Px42y10, Px42y12, Px41y11 } CellNode (42 @ 11) (20)Px42y12 { Px43y12, Px41y12, Px42y13, Px42y11 } CellNode (42 @ 12) (20)Px42y13 { Px43y13, Px41y13, Px42y14, Px42y12 } CellNode (42 @ 13) (20)Px42y14 { Px42y13, Px43y14, Px41y14, Px42y15 } CellNode (42 @ 14) (20)Px42y15 { Px42y16, Px41y15, Px42y14, Px43y15 } CellNode (42 @ 15) (20)Px42y16 { Px43y16, Px41y16, Px42y17, Px42y15 } CellNode (42 @ 16) (20)Px42y17 { Px42y18, Px41y17, Px43y17, Px42y16 } CellNode (42 @ 17) (20)Px42y18 { Px41y18, Px42y17, Px42y19, Px43y18 } CellNode (42 @ 18) (20)Px42y19 { Px43y19, Px41y19, Px42y18, Px42y20 } CellNode (42 @ 19) (20)Px42y2 { Px43y2, Px42y1, Px41y2, Px42y3 } CellNode (42 @ 2) (20)Px42y20 { Px43y20, Px41y20, Px42y19, Px42y21 } CellNode (42 @ 20) (20)Px42y21 { Px42y22, Px43y21, Px41y21, Px42y20 } CellNode (42 @ 21) (20)Px42y22 { Px41y22, Px42y23, Px43y22, Px42y21 } CellNode (42 @ 22) (20)Px42y23 { Px43y23, Px41y23, Px42y22, Px42y24 } CellNode (42 @ 23) (20)Px42y24 { Px42y25, Px43y24, Px41y24, Px42y23 } CellNode (42 @ 24) (20)Px42y25 { Px42y26, Px43y25, Px41y25, Px42y24 } CellNode (42 @ 25) (20)Px42y26 { Px42y25, Px41y26, Px42y27, Px43y26 } CellNode (42 @ 26) (20)Px42y27 { Px43y27, Px42y26, Px41y27, Px42y28 } CellNode (42 @ 27) (20)Px42y28 { Px42y29, Px43y28, Px41y28, Px42y27 } CellNode (42 @ 28) (20)Px42y29 { Px41y29, Px42y30, Px43y29, Px42y28 } CellNode (42 @ 29) (20)Px42y3 { Px41y3, Px43y3, Px42y2, Px42y4 } CellNode (42 @ 3) (20)Px42y30 { Px42y29, Px43y30, Px41y30, Px42y31 } CellNode (42 @ 30) (20)Px42y31 { Px41y31, Px42y32, Px42y30, Px43y31 } CellNode (42 @ 31) (20)Px42y32 { Px42y33, Px41y32, Px43y32, Px42y31 } CellNode (42 @ 32) (20)Px42y33 { Px42y34, Px41y33, Px43y33, Px42y32 } CellNode (42 @ 33) (20)Px42y34 { Px41y34, Px42y33, Px42y35, Px43y34 } CellNode (42 @ 34) (20)Px42y35 { Px42y36, Px43y35, Px41y35, Px42y34 } CellNode (42 @ 35) (20)Px42y36 { Px43y36, Px42y37, Px41y36, Px42y35 } CellNode (42 @ 36) (20)Px42y37 { Px42y36, Px43y37, Px41y37, Px42y38 } CellNode (42 @ 37) (20)Px42y38 { Px41y38, Px43y38, Px42y37, Px42y39 } CellNode (42 @ 38) (20)Px42y39 { Px43y39, Px41y39, Px42y38, Px42y40 } CellNode (42 @ 39) (20)Px42y4 { Px42y5, Px41y4, Px43y4, Px42y3 } CellNode (42 @ 4) (20)Px42y40 { Px42y41, Px43y40, Px41y40, Px42y39 } CellNode (42 @ 40) (20)Px42y41 { Px42y42, Px43y41, Px41y41, Px42y40 } CellNode (42 @ 41) (20)Px42y42 { Px42y41, Px41y42, Px42y43, Px43y42 } CellNode (42 @ 42) (20)Px42y43 { Px43y43, Px42y42, Px41y43, Px42y44 } CellNode (42 @ 43) (20)Px42y44 { Px42y45, Px43y44, Px42y43, Px41y44 } CellNode (42 @ 44) (20)Px42y45 { Px41y45, Px42y46, Px43y45, Px42y44 } CellNode (42 @ 45) (20)Px42y46 { Px43y46, Px41y46, Px42y45, Px42y47 } CellNode (42 @ 46) (20)Px42y47 { Px42y48, Px43y47, Px41y47, Px42y46 } CellNode (42 @ 47) (20)Px42y48 { Px42y49, Px43y48, Px42y47, Px41y48 } CellNode (42 @ 48) (20)Px42y49 { Px41y49, Px42y48, Px42y50, Px43y49 } CellNode (42 @ 49) (20)Px42y5 { Px42y4, Px41y5, Px42y6, Px43y5 } CellNode (42 @ 5) (20)Px42y50 { Px41y50, Px42y49, Px42y51, Px43y50 } CellNode (42 @ 50) (20)Px42y51 { Px42y52, Px43y51, Px41y51, Px42y50 } CellNode (42 @ 51) (20)Px42y52 { Px43y52, Px42y53, Px41y52, Px42y51 } CellNode (42 @ 52) (20)Px42y53 { Px41y53, Px42y52, Px42y54, Px43y53 } CellNode (42 @ 53) (20)Px42y54 { Px42y55, Px42y53, Px41y54, Px43y54 } CellNode (42 @ 54) (20)Px42y55 { Px43y55, Px42y56, Px42y54, Px41y55 } CellNode (42 @ 55) (20)Px42y56 { Px41y56, Px42y57, Px43y56, Px42y55 } CellNode (42 @ 56) (20)Px42y57 { Px41y57, Px42y56, Px42y58, Px43y57 } CellNode (42 @ 57) (20)Px42y58 { Px43y58, Px42y59, Px42y57, Px41y58 } CellNode (42 @ 58) (20)Px42y59 { Px42y60, Px43y59, Px41y59, Px42y58 } CellNode (42 @ 59) (20)Px42y6 { Px43y6, Px42y5, Px41y6, Px42y7 } CellNode (42 @ 6) (20)Px42y60 { Px42y59, Px43y60, Px41y60, Px42y61 } CellNode (42 @ 60) (20)Px42y61 { Px41y61, Px42y60, Px43y61, Px42y62 } CellNode (42 @ 61) (20)Px42y62 { Px43y62, Px41y62, Px42y61, Px42y63 } CellNode (42 @ 62) (20)Px42y63 { Px42y64, Px43y63, Px41y63, Px42y62 } CellNode (42 @ 63) (20)Px42y64 { Px42y65, Px43y64, Px42y63, Px41y64 } CellNode (42 @ 64) (20)Px42y65 { Px42y64, Px41y65, Px42y66, Px43y65 } CellNode (42 @ 65) (20)Px42y66 { Px43y66, Px42y65, Px41y66, Px42y67 } CellNode (42 @ 66) (20)Px42y67 { Px43y67, Px42y66, Px41y67 } CellNode (42 @ 67) (20)Px42y7 { Px42y8, Px42y6, Px43y7, Px41y7 } CellNode (42 @ 7) (20)Px42y8 { Px41y8, Px42y9, Px43y8, Px42y7 } CellNode (42 @ 8) (20)Px42y9 { Px43y9, Px42y8, Px41y9, Px42y10 } CellNode (42 @ 9) (20)Px43y1 { Px42y1, Px43y2, Px44y1 } CellNode (43 @ 1) (20)Px43y10 { Px43y9, Px44y10, Px42y10, Px43y11 } CellNode (43 @ 10) (20)Px43y11 { Px43y12, Px44y11, Px42y11, Px43y10 } CellNode (43 @ 11) (20)Px43y12 { Px43y13, Px44y12, Px43y11, Px42y12 } CellNode (43 @ 12) (20)Px43y13 { Px43y12, Px42y13, Px43y14, Px44y13 } CellNode (43 @ 13) (20)Px43y14 { Px44y14, Px42y14, Px43y13, Px43y15 } CellNode (43 @ 14) (20)Px43y15 { Px43y16, Px44y15, Px43y14, Px42y15 } CellNode (43 @ 15) (20)Px43y16 { Px42y16, Px43y17, Px44y16, Px43y15 } CellNode (43 @ 16) (20)Px43y17 { Px44y17, Px43y16, Px42y17, Px43y18 } CellNode (43 @ 17) (20)Px43y18 { Px43y19, Px44y18, Px42y18, Px43y17 } CellNode (43 @ 18) (20)Px43y19 { Px43y20, Px44y19, Px42y19, Px43y18 } CellNode (43 @ 19) (20)Px43y2 { Px43y3, Px42y2, Px43y1, Px44y2 } CellNode (43 @ 2) (20)Px43y20 { Px43y19, Px43y21, Px44y20, Px42y20 } CellNode (43 @ 20) (20)Px43y21 { Px44y21, Px43y20, Px43y22, Px42y21 } CellNode (43 @ 21) (20)Px43y22 { Px44y22, Px42y22, Px43y23, Px43y21 } CellNode (43 @ 22) (20)Px43y23 { Px44y23, Px43y24, Px42y23, Px43y22 } CellNode (43 @ 23) (20)Px43y24 { Px43y23, Px44y24, Px43y25, Px42y24 } CellNode (43 @ 24) (20)Px43y25 { Px44y25, Px42y25, Px43y24, Px43y26 } CellNode (43 @ 25) (20)Px43y26 { Px43y27, Px42y26, Px44y26, Px43y25 } CellNode (43 @ 26) (20)Px43y27 { Px44y27, Px42y27, Px43y28, Px43y26 } CellNode (43 @ 27) (20)Px43y28 { Px43y29, Px43y27, Px44y28, Px42y28 } CellNode (43 @ 28) (20)Px43y29 { Px44y29, Px42y29, Px43y28, Px43y30 } CellNode (43 @ 29) (20)Px43y3 { Px43y2, Px44y3, Px43y4, Px42y3 } CellNode (43 @ 3) (20)Px43y30 { Px44y30, Px42y30, Px43y29, Px43y31 } CellNode (43 @ 30) (20)Px43y31 { Px43y32, Px44y31, Px43y30, Px42y31 } CellNode (43 @ 31) (20)Px43y32 { Px42y32, Px43y33, Px44y32, Px43y31 } CellNode (43 @ 32) (20)Px43y33 { Px44y33, Px42y33, Px43y32, Px43y34 } CellNode (43 @ 33) (20)Px43y34 { Px43y35, Px44y34, Px42y34, Px43y33 } CellNode (43 @ 34) (20)Px43y35 { Px43y36, Px44y35, Px42y35, Px43y34 } CellNode (43 @ 35) (20)Px43y36 { Px42y36, Px43y35, Px43y37, Px44y36 } CellNode (43 @ 36) (20)Px43y37 { Px44y37, Px42y37, Px43y36, Px43y38 } CellNode (43 @ 37) (20)Px43y38 { Px43y39, Px44y38, Px43y37, Px42y38 } CellNode (43 @ 38) (20)Px43y39 { Px43y38, Px43y40, Px44y39, Px42y39 } CellNode (43 @ 39) (20)Px43y4 { Px43y5, Px44y4, Px43y3, Px42y4 } CellNode (43 @ 4) (20)Px43y40 { Px43y39, Px43y41, Px42y40, Px44y40 } CellNode (43 @ 40) (20)Px43y41 { Px43y42, Px42y41, Px43y40, Px44y41 } CellNode (43 @ 41) (20)Px43y42 { Px44y42, Px42y42, Px43y43, Px43y41 } CellNode (43 @ 42) (20)Px43y43 { Px43y44, Px44y43, Px42y43, Px43y42 } CellNode (43 @ 43) (20)Px43y44 { Px43y45, Px43y43, Px44y44, Px42y44 } CellNode (43 @ 44) (20)Px43y45 { Px44y45, Px42y45, Px43y46, Px43y44 } CellNode (43 @ 45) (20)Px43y46 { Px44y46, Px42y46, Px43y47, Px43y45 } CellNode (43 @ 46) (20)Px43y47 { Px43y46, Px43y48, Px42y47, Px44y47 } CellNode (43 @ 47) (20)Px43y48 { Px44y48, Px42y48, Px43y47, Px43y49 } CellNode (43 @ 48) (20)Px43y49 { Px44y49, Px42y49, Px43y48, Px43y50 } CellNode (43 @ 49) (20)Px43y5 { Px43y6, Px42y5, Px44y5, Px43y4 } CellNode (43 @ 5) (20)Px43y50 { Px43y51, Px44y50, Px42y50, Px43y49 } CellNode (43 @ 50) (20)Px43y51 { Px43y52, Px44y51, Px42y51, Px43y50 } CellNode (43 @ 51) (20)Px43y52 { Px42y52, Px43y51, Px43y53, Px44y52 } CellNode (43 @ 52) (20)Px43y53 { Px44y53, Px43y52, Px42y53, Px43y54 } CellNode (43 @ 53) (20)Px43y54 { Px43y55, Px44y54, Px42y54, Px43y53 } CellNode (43 @ 54) (20)Px43y55 { Px42y55, Px43y56, Px44y55, Px43y54 } CellNode (43 @ 55) (20)Px43y56 { Px44y56, Px43y55, Px42y56, Px43y57 } CellNode (43 @ 56) (20)Px43y57 { Px43y58, Px44y57, Px42y57, Px43y56 } CellNode (43 @ 57) (20)Px43y58 { Px43y59, Px44y58, Px42y58, Px43y57 } CellNode (43 @ 58) (20)Px43y59 { Px43y58, Px42y59, Px43y60, Px44y59 } CellNode (43 @ 59) (20)Px43y6 { Px43y5, Px42y6, Px43y7, Px44y6 } CellNode (43 @ 6) (20)Px43y60 { Px42y60, Px43y59, Px44y60, Px43y61 } CellNode (43 @ 60) (20)Px43y61 { Px43y62, Px44y61, Px43y60, Px42y61 } CellNode (43 @ 61) (20)Px43y62 { Px44y62, Px43y63, Px42y62, Px43y61 } CellNode (43 @ 62) (20)Px43y63 { Px43y62, Px44y63, Px42y63, Px43y64 } CellNode (43 @ 63) (20)Px43y64 { Px42y64, Px44y64, Px43y63, Px43y65 } CellNode (43 @ 64) (20)Px43y65 { Px43y66, Px42y65, Px44y65, Px43y64 } CellNode (43 @ 65) (20)Px43y66 { Px44y66, Px43y67, Px42y66, Px43y65 } CellNode (43 @ 66) (20)Px43y67 { Px43y66, Px44y67, Px42y67 } CellNode (43 @ 67) (20)Px43y7 { Px44y7, Px43y6, Px43y8, Px42y7 } CellNode (43 @ 7) (20)Px43y8 { Px43y9, Px42y8, Px43y7, Px44y8 } CellNode (43 @ 8) (20)Px43y9 { Px42y9, Px43y10, Px43y8, Px44y9 } CellNode (43 @ 9) (20)Px44y1 { Px43y1, Px44y2, Px45y1 } CellNode (44 @ 1) (20)Px44y10 { Px45y10, Px44y11, Px43y10, Px44y9 } CellNode (44 @ 10) (20)Px44y11 { Px44y10, Px45y11, Px44y12, Px43y11 } CellNode (44 @ 11) (20)Px44y12 { Px45y12, Px43y12, Px44y11, Px44y13 } CellNode (44 @ 12) (20)Px44y13 { Px45y13, Px44y14, Px43y13, Px44y12 } CellNode (44 @ 13) (20)Px44y14 { Px44y15, Px43y14, Px45y14, Px44y13 } CellNode (44 @ 14) (20)Px44y15 { Px44y16, Px44y14, Px45y15, Px43y15 } CellNode (44 @ 15) (20)Px44y16 { Px45y16, Px44y17, Px43y16, Px44y15 } CellNode (44 @ 16) (20)Px44y17 { Px45y17, Px43y17, Px44y18, Px44y16 } CellNode (44 @ 17) (20)Px44y18 { Px44y17, Px45y18, Px43y18, Px44y19 } CellNode (44 @ 18) (20)Px44y19 { Px43y19, Px44y18, Px44y20, Px45y19 } CellNode (44 @ 19) (20)Px44y2 { Px43y2, Px44y3, Px45y2, Px44y1 } CellNode (44 @ 2) (20)Px44y20 { Px45y20, Px43y20, Px44y19, Px44y21 } CellNode (44 @ 20) (20)Px44y21 { Px44y22, Px45y21, Px44y20, Px43y21 } CellNode (44 @ 21) (20)Px44y22 { Px44y23, Px45y22, Px43y22, Px44y21 } CellNode (44 @ 22) (20)Px44y23 { Px44y22, Px43y23, Px44y24, Px45y23 } CellNode (44 @ 23) (20)Px44y24 { Px45y24, Px44y23, Px43y24, Px44y25 } CellNode (44 @ 24) (20)Px44y25 { Px44y26, Px45y25, Px44y24, Px43y25 } CellNode (44 @ 25) (20)Px44y26 { Px44y25, Px44y27, Px45y26, Px43y26 } CellNode (44 @ 26) (20)Px44y27 { Px45y27, Px43y27, Px44y26, Px44y28 } CellNode (44 @ 27) (20)Px44y28 { Px44y29, Px45y28, Px44y27, Px43y28 } CellNode (44 @ 28) (20)Px44y29 { Px44y30, Px45y29, Px44y28, Px43y29 } CellNode (44 @ 29) (20)Px44y3 { Px43y3, Px44y4, Px45y3, Px44y2 } CellNode (44 @ 3) (20)Px44y30 { Px44y29, Px44y31, Px43y30, Px45y30 } CellNode (44 @ 30) (20)Px44y31 { Px45y31, Px44y30, Px44y32, Px43y31 } CellNode (44 @ 31) (20)Px44y32 { Px44y33, Px45y32, Px43y32, Px44y31 } CellNode (44 @ 32) (20)Px44y33 { Px45y33, Px44y34, Px43y33, Px44y32 } CellNode (44 @ 33) (20)Px44y34 { Px44y33, Px44y35, Px43y34, Px45y34 } CellNode (44 @ 34) (20)Px44y35 { Px43y35, Px44y36, Px44y34, Px45y35 } CellNode (44 @ 35) (20)Px44y36 { Px45y36, Px43y36, Px44y37, Px44y35 } CellNode (44 @ 36) (20)Px44y37 { Px44y38, Px43y37, Px45y37, Px44y36 } CellNode (44 @ 37) (20)Px44y38 { Px43y38, Px44y37, Px44y39, Px45y38 } CellNode (44 @ 38) (20)Px44y39 { Px45y39, Px43y39, Px44y38, Px44y40 } CellNode (44 @ 39) (20)Px44y4 { Px44y3, Px45y4, Px44y5, Px43y4 } CellNode (44 @ 4) (20)Px44y40 { Px45y40, Px43y40, Px44y39, Px44y41 } CellNode (44 @ 40) (20)Px44y41 { Px44y42, Px45y41, Px43y41, Px44y40 } CellNode (44 @ 41) (20)Px44y42 { Px43y42, Px44y43, Px45y42, Px44y41 } CellNode (44 @ 42) (20)Px44y43 { Px45y43, Px44y42, Px43y43, Px44y44 } CellNode (44 @ 43) (20)Px44y44 { Px44y45, Px45y44, Px43y44, Px44y43 } CellNode (44 @ 44) (20)Px44y45 { Px44y46, Px45y45, Px44y44, Px43y45 } CellNode (44 @ 45) (20)Px44y46 { Px44y45, Px43y46, Px44y47, Px45y46 } CellNode (44 @ 46) (20)Px44y47 { Px45y47, Px43y47, Px44y46, Px44y48 } CellNode (44 @ 47) (20)Px44y48 { Px44y49, Px45y48, Px43y48, Px44y47 } CellNode (44 @ 48) (20)Px44y49 { Px43y49, Px44y50, Px45y49, Px44y48 } CellNode (44 @ 49) (20)Px44y5 { Px43y5, Px44y4, Px45y5, Px44y6 } CellNode (44 @ 5) (20)Px44y50 { Px44y49, Px45y50, Px44y51, Px43y50 } CellNode (44 @ 50) (20)Px44y51 { Px43y51, Px45y51, Px44y50, Px44y52 } CellNode (44 @ 51) (20)Px44y52 { Px45y52, Px43y52, Px44y53, Px44y51 } CellNode (44 @ 52) (20)Px44y53 { Px45y53, Px43y53, Px44y54, Px44y52 } CellNode (44 @ 53) (20)Px44y54 { Px44y55, Px44y53, Px45y54, Px43y54 } CellNode (44 @ 54) (20)Px44y55 { Px45y55, Px43y55, Px44y56, Px44y54 } CellNode (44 @ 55) (20)Px44y56 { Px44y57, Px45y56, Px43y56, Px44y55 } CellNode (44 @ 56) (20)Px44y57 { Px44y56, Px45y57, Px43y57, Px44y58 } CellNode (44 @ 57) (20)Px44y58 { Px43y58, Px45y58, Px44y57, Px44y59 } CellNode (44 @ 58) (20)Px44y59 { Px45y59, Px43y59, Px44y58, Px44y60 } CellNode (44 @ 59) (20)Px44y6 { Px43y6, Px44y7, Px44y5, Px45y6 } CellNode (44 @ 6) (20)Px44y60 { Px44y61, Px45y60, Px43y60, Px44y59 } CellNode (44 @ 60) (20)Px44y61 { Px44y62, Px45y61, Px43y61, Px44y60 } CellNode (44 @ 61) (20)Px44y62 { Px43y62, Px44y61, Px44y63, Px45y62 } CellNode (44 @ 62) (20)Px44y63 { Px45y63, Px44y62, Px43y63, Px44y64 } CellNode (44 @ 63) (20)Px44y64 { Px44y65, Px45y64, Px43y64, Px44y63 } CellNode (44 @ 64) (20)Px44y65 { Px44y64, Px44y66, Px45y65, Px43y65 } CellNode (44 @ 65) (20)Px44y66 { Px45y66, Px43y66, Px44y65, Px44y67 } CellNode (44 @ 66) (20)Px44y67 { Px43y67, Px44y66, Px45y67 } CellNode (44 @ 67) (20)Px44y7 { Px45y7, Px43y7, Px44y8, Px44y6 } CellNode (44 @ 7) (20)Px44y8 { Px44y7, Px45y8, Px43y8, Px44y9 } CellNode (44 @ 8) (20)Px44y9 { Px43y9, Px44y10, Px44y8, Px45y9 } CellNode (44 @ 9) (20)Px45y1 { Px46y1, Px44y1, Px45y2 } CellNode (45 @ 1) (20)Px45y10 { Px44y10, Px45y9, Px46y10, Px45y11 } CellNode (45 @ 10) (20)Px45y11 { Px45y12, Px45y10, Px44y11, Px46y11 } CellNode (45 @ 11) (20)Px45y12 { Px45y13, Px46y12, Px45y11, Px44y12 } CellNode (45 @ 12) (20)Px45y13 { Px45y12, Px45y14, Px46y13, Px44y13 } CellNode (45 @ 13) (20)Px45y14 { Px44y14, Px45y13, Px46y14, Px45y15 } CellNode (45 @ 14) (20)Px45y15 { Px45y16, Px46y15, Px44y15, Px45y14 } CellNode (45 @ 15) (20)Px45y16 { Px45y17, Px46y16, Px44y16, Px45y15 } CellNode (45 @ 16) (20)Px45y17 { Px45y16, Px44y17, Px46y17, Px45y18 } CellNode (45 @ 17) (20)Px45y18 { Px46y18, Px45y17, Px44y18, Px45y19 } CellNode (45 @ 18) (20)Px45y19 { Px45y20, Px46y19, Px45y18, Px44y19 } CellNode (45 @ 19) (20)Px45y2 { Px45y1, Px46y2, Px44y2, Px45y3 } CellNode (45 @ 2) (20)Px45y20 { Px46y20, Px45y21, Px44y20, Px45y19 } CellNode (45 @ 20) (20)Px45y21 { Px45y20, Px45y22, Px46y21, Px44y21 } CellNode (45 @ 21) (20)Px45y22 { Px44y22, Px45y23, Px45y21, Px46y22 } CellNode (45 @ 22) (20)Px45y23 { Px46y23, Px44y23, Px45y24, Px45y22 } CellNode (45 @ 23) (20)Px45y24 { Px46y24, Px44y24, Px45y25, Px45y23 } CellNode (45 @ 24) (20)Px45y25 { Px45y26, Px45y24, Px46y25, Px44y25 } CellNode (45 @ 25) (20)Px45y26 { Px45y27, Px44y26, Px46y26, Px45y25 } CellNode (45 @ 26) (20)Px45y27 { Px45y28, Px46y27, Px44y27, Px45y26 } CellNode (45 @ 27) (20)Px45y28 { Px45y27, Px45y29, Px46y28, Px44y28 } CellNode (45 @ 28) (20)Px45y29 { Px44y29, Px45y28, Px45y30, Px46y29 } CellNode (45 @ 29) (20)Px45y3 { Px44y3, Px45y4, Px46y3, Px45y2 } CellNode (45 @ 3) (20)Px45y30 { Px46y30, Px44y30, Px45y29, Px45y31 } CellNode (45 @ 30) (20)Px45y31 { Px46y31, Px45y32, Px44y31, Px45y30 } CellNode (45 @ 31) (20)Px45y32 { Px45y33, Px46y32, Px44y32, Px45y31 } CellNode (45 @ 32) (20)Px45y33 { Px44y33, Px45y32, Px45y34, Px46y33 } CellNode (45 @ 33) (20)Px45y34 { Px45y35, Px45y33, Px44y34, Px46y34 } CellNode (45 @ 34) (20)Px45y35 { Px45y36, Px46y35, Px44y35, Px45y34 } CellNode (45 @ 35) (20)Px45y36 { Px45y35, Px46y36, Px45y37, Px44y36 } CellNode (45 @ 36) (20)Px45y37 { Px45y36, Px44y37, Px46y37, Px45y38 } CellNode (45 @ 37) (20)Px45y38 { Px45y39, Px46y38, Px45y37, Px44y38 } CellNode (45 @ 38) (20)Px45y39 { Px45y40, Px46y39, Px45y38, Px44y39 } CellNode (45 @ 39) (20)Px45y4 { Px44y4, Px45y5, Px45y3, Px46y4 } CellNode (45 @ 4) (20)Px45y40 { Px45y39, Px46y40, Px45y41, Px44y40 } CellNode (45 @ 40) (20)Px45y41 { Px45y42, Px45y40, Px46y41, Px44y41 } CellNode (45 @ 41) (20)Px45y42 { Px45y43, Px44y42, Px46y42, Px45y41 } CellNode (45 @ 42) (20)Px45y43 { Px46y43, Px44y43, Px45y44, Px45y42 } CellNode (45 @ 43) (20)Px45y44 { Px45y43, Px46y44, Px44y44, Px45y45 } CellNode (45 @ 44) (20)Px45y45 { Px44y45, Px46y45, Px45y44, Px45y46 } CellNode (45 @ 45) (20)Px45y46 { Px46y46, Px45y47, Px44y46, Px45y45 } CellNode (45 @ 46) (20)Px45y47 { Px46y47, Px44y47, Px45y48, Px45y46 } CellNode (45 @ 47) (20)Px45y48 { Px44y48, Px45y47, Px46y48, Px45y49 } CellNode (45 @ 48) (20)Px45y49 { Px46y49, Px44y49, Px45y48, Px45y50 } CellNode (45 @ 49) (20)Px45y5 { Px45y4, Px46y5, Px44y5, Px45y6 } CellNode (45 @ 5) (20)Px45y50 { Px46y50, Px44y50, Px45y49, Px45y51 } CellNode (45 @ 50) (20)Px45y51 { Px45y52, Px46y51, Px45y50, Px44y51 } CellNode (45 @ 51) (20)Px45y52 { Px45y51, Px45y53, Px46y52, Px44y52 } CellNode (45 @ 52) (20)Px45y53 { Px46y53, Px44y53, Px45y52, Px45y54 } CellNode (45 @ 53) (20)Px45y54 { Px45y55, Px46y54, Px45y53, Px44y54 } CellNode (45 @ 54) (20)Px45y55 { Px45y56, Px46y55, Px44y55, Px45y54 } CellNode (45 @ 55) (20)Px45y56 { Px45y55, Px44y56, Px45y57, Px46y56 } CellNode (45 @ 56) (20)Px45y57 { Px46y57, Px45y56, Px44y57, Px45y58 } CellNode (45 @ 57) (20)Px45y58 { Px45y59, Px46y58, Px45y57, Px44y58 } CellNode (45 @ 58) (20)Px45y59 { Px45y58, Px45y60, Px46y59, Px44y59 } CellNode (45 @ 59) (20)Px45y6 { Px45y7, Px46y6, Px45y5, Px44y6 } CellNode (45 @ 6) (20)Px45y60 { Px45y59, Px46y60, Px44y60, Px45y61 } CellNode (45 @ 60) (20)Px45y61 { Px44y61, Px45y62, Px45y60, Px46y61 } CellNode (45 @ 61) (20)Px45y62 { Px45y63, Px44y62, Px46y62, Px45y61 } CellNode (45 @ 62) (20)Px45y63 { Px45y64, Px44y63, Px46y63, Px45y62 } CellNode (45 @ 63) (20)Px45y64 { Px44y64, Px45y63, Px46y64, Px45y65 } CellNode (45 @ 64) (20)Px45y65 { Px45y66, Px46y65, Px44y65, Px45y64 } CellNode (45 @ 65) (20)Px45y66 { Px46y66, Px44y66, Px45y67, Px45y65 } CellNode (45 @ 66) (20)Px45y67 { Px44y67, Px45y66, Px46y67 } CellNode (45 @ 67) (20)Px45y7 { Px44y7, Px45y8, Px46y7, Px45y6 } CellNode (45 @ 7) (20)Px45y8 { Px45y7, Px44y8, Px45y9, Px46y8 } CellNode (45 @ 8) (20)Px45y9 { Px46y9, Px45y10, Px45y8, Px44y9 } CellNode (45 @ 9) (20)Px46y1 { Px46y2, Px47y1, Px45y1 } CellNode (46 @ 1) (20)Px46y10 { Px47y10, Px45y10, Px46y9, Px46y11 } CellNode (46 @ 10) (20)Px46y11 { Px46y12, Px47y11, Px46y10, Px45y11 } CellNode (46 @ 11) (20)Px46y12 { Px45y12, Px46y13, Px47y12, Px46y11 } CellNode (46 @ 12) (20)Px46y13 { Px47y13, Px45y13, Px46y12, Px46y14 } CellNode (46 @ 13) (20)Px46y14 { Px46y15, Px47y14, Px45y14, Px46y13 } CellNode (46 @ 14) (20)Px46y15 { Px46y16, Px47y15, Px45y15, Px46y14 } CellNode (46 @ 15) (20)Px46y16 { Px45y16, Px46y15, Px46y17, Px47y16 } CellNode (46 @ 16) (20)Px46y17 { Px47y17, Px45y17, Px46y16, Px46y18 } CellNode (46 @ 17) (20)Px46y18 { Px46y19, Px47y18, Px46y17, Px45y18 } CellNode (46 @ 18) (20)Px46y19 { Px46y18, Px46y20, Px47y19, Px45y19 } CellNode (46 @ 19) (20)Px46y2 { Px46y1, Px46y3, Px45y2, Px47y2 } CellNode (46 @ 2) (20)Px46y20 { Px45y20, Px46y19, Px47y20, Px46y21 } CellNode (46 @ 20) (20)Px46y21 { Px47y21, Px46y20, Px45y21, Px46y22 } CellNode (46 @ 21) (20)Px46y22 { Px47y22, Px46y23, Px45y22, Px46y21 } CellNode (46 @ 22) (20)Px46y23 { Px46y22, Px46y24, Px47y23, Px45y23 } CellNode (46 @ 23) (20)Px46y24 { Px45y24, Px46y23, Px46y25, Px47y24 } CellNode (46 @ 24) (20)Px46y25 { Px46y26, Px47y25, Px46y24, Px45y25 } CellNode (46 @ 25) (20)Px46y26 { Px47y26, Px46y27, Px46y25, Px45y26 } CellNode (46 @ 26) (20)Px46y27 { Px45y27, Px46y26, Px47y27, Px46y28 } CellNode (46 @ 27) (20)Px46y28 { Px45y28, Px46y29, Px46y27, Px47y28 } CellNode (46 @ 28) (20)Px46y29 { Px46y30, Px47y29, Px45y29, Px46y28 } CellNode (46 @ 29) (20)Px46y3 { Px47y3, Px46y2, Px45y3, Px46y4 } CellNode (46 @ 3) (20)Px46y30 { Px46y31, Px47y30, Px45y30, Px46y29 } CellNode (46 @ 30) (20)Px46y31 { Px46y30, Px46y32, Px47y31, Px45y31 } CellNode (46 @ 31) (20)Px46y32 { Px46y31, Px45y32, Px46y33, Px47y32 } CellNode (46 @ 32) (20)Px46y33 { Px47y33, Px45y33, Px46y32, Px46y34 } CellNode (46 @ 33) (20)Px46y34 { Px46y35, Px47y34, Px45y34, Px46y33 } CellNode (46 @ 34) (20)Px46y35 { Px45y35, Px46y36, Px47y35, Px46y34 } CellNode (46 @ 35) (20)Px46y36 { Px47y36, Px45y36, Px46y35, Px46y37 } CellNode (46 @ 36) (20)Px46y37 { Px46y38, Px47y37, Px46y36, Px45y37 } CellNode (46 @ 37) (20)Px46y38 { Px46y39, Px47y38, Px46y37, Px45y38 } CellNode (46 @ 38) (20)Px46y39 { Px45y39, Px46y38, Px46y40, Px47y39 } CellNode (46 @ 39) (20)Px46y4 { Px45y4, Px46y5, Px46y3, Px47y4 } CellNode (46 @ 4) (20)Px46y40 { Px45y40, Px46y39, Px47y40, Px46y41 } CellNode (46 @ 40) (20)Px46y41 { Px46y42, Px47y41, Px46y40, Px45y41 } CellNode (46 @ 41) (20)Px46y42 { Px47y42, Px46y43, Px46y41, Px45y42 } CellNode (46 @ 42) (20)Px46y43 { Px45y43, Px46y42, Px46y44, Px47y43 } CellNode (46 @ 43) (20)Px46y44 { Px47y44, Px46y43, Px45y44, Px46y45 } CellNode (46 @ 44) (20)Px46y45 { Px46y46, Px47y45, Px46y44, Px45y45 } CellNode (46 @ 45) (20)Px46y46 { Px46y45, Px47y46, Px46y47, Px45y46 } CellNode (46 @ 46) (20)Px46y47 { Px45y47, Px46y46, Px47y47, Px46y48 } CellNode (46 @ 47) (20)Px46y48 { Px47y48, Px46y49, Px46y47, Px45y48 } CellNode (46 @ 48) (20)Px46y49 { Px46y50, Px47y49, Px46y48, Px45y49 } CellNode (46 @ 49) (20)Px46y5 { Px45y5, Px46y6, Px46y4, Px47y5 } CellNode (46 @ 5) (20)Px46y50 { Px46y49, Px46y51, Px45y50, Px47y50 } CellNode (46 @ 50) (20)Px46y51 { Px45y51, Px46y50, Px46y52, Px47y51 } CellNode (46 @ 51) (20)Px46y52 { Px46y53, Px45y52, Px47y52, Px46y51 } CellNode (46 @ 52) (20)Px46y53 { Px47y53, Px45y53, Px46y54, Px46y52 } CellNode (46 @ 53) (20)Px46y54 { Px46y53, Px47y54, Px45y54, Px46y55 } CellNode (46 @ 54) (20)Px46y55 { Px45y55, Px46y56, Px46y54, Px47y55 } CellNode (46 @ 55) (20)Px46y56 { Px47y56, Px45y56, Px46y57, Px46y55 } CellNode (46 @ 56) (20)Px46y57 { Px47y57, Px46y58, Px45y57, Px46y56 } CellNode (46 @ 57) (20)Px46y58 { Px45y58, Px46y57, Px47y58, Px46y59 } CellNode (46 @ 58) (20)Px46y59 { Px47y59, Px45y59, Px46y58, Px46y60 } CellNode (46 @ 59) (20)Px46y6 { Px46y5, Px47y6, Px46y7, Px45y6 } CellNode (46 @ 6) (20)Px46y60 { Px47y60, Px45y60, Px46y59, Px46y61 } CellNode (46 @ 60) (20)Px46y61 { Px46y62, Px47y61, Px46y60, Px45y61 } CellNode (46 @ 61) (20)Px46y62 { Px45y62, Px46y63, Px47y62, Px46y61 } CellNode (46 @ 62) (20)Px46y63 { Px47y63, Px45y63, Px46y62, Px46y64 } CellNode (46 @ 63) (20)Px46y64 { Px46y65, Px47y64, Px45y64, Px46y63 } CellNode (46 @ 64) (20)Px46y65 { Px46y66, Px47y65, Px46y64, Px45y65 } CellNode (46 @ 65) (20)Px46y66 { Px45y66, Px46y65, Px46y67, Px47y66 } CellNode (46 @ 66) (20)Px46y67 { Px46y66, Px47y67, Px45y67 } CellNode (46 @ 67) (20)Px46y7 { Px45y7, Px46y6, Px47y7, Px46y8 } CellNode (46 @ 7) (20)Px46y8 { Px45y8, Px46y9, Px46y7, Px47y8 } CellNode (46 @ 8) (20)Px46y9 { Px47y9, Px45y9, Px46y10, Px46y8 } CellNode (46 @ 9) (20)Px47y1 { Px46y1, Px47y2, Px48y1 } CellNode (47 @ 1) (20)Px47y10 { Px48y10, Px46y10, Px47y11, Px47y9 } CellNode (47 @ 10) (20)Px47y11 { Px47y12, Px47y10, Px48y11, Px46y11 } CellNode (47 @ 11) (20)Px47y12 { Px47y13, Px48y12, Px46y12, Px47y11 } CellNode (47 @ 12) (20)Px47y13 { Px47y14, Px48y13, Px46y13, Px47y12 } CellNode (47 @ 13) (20)Px47y14 { Px47y13, Px48y14, Px46y14, Px47y15 } CellNode (47 @ 14) (20)Px47y15 { Px46y15, Px48y15, Px47y14, Px47y16 } CellNode (47 @ 15) (20)Px47y16 { Px48y16, Px47y17, Px46y16, Px47y15 } CellNode (47 @ 16) (20)Px47y17 { Px47y18, Px46y17, Px48y17, Px47y16 } CellNode (47 @ 17) (20)Px47y18 { Px46y18, Px47y17, Px47y19, Px48y18 } CellNode (47 @ 18) (20)Px47y19 { Px48y19, Px46y19, Px47y18, Px47y20 } CellNode (47 @ 19) (20)Px47y2 { Px47y3, Px46y2, Px48y2, Px47y1 } CellNode (47 @ 2) (20)Px47y20 { Px48y20, Px46y20, Px47y19, Px47y21 } CellNode (47 @ 20) (20)Px47y21 { Px47y22, Px48y21, Px47y20, Px46y21 } CellNode (47 @ 21) (20)Px47y22 { Px47y21, Px47y23, Px48y22, Px46y22 } CellNode (47 @ 22) (20)Px47y23 { Px48y23, Px47y22, Px46y23, Px47y24 } CellNode (47 @ 23) (20)Px47y24 { Px47y25, Px48y24, Px46y24, Px47y23 } CellNode (47 @ 24) (20)Px47y25 { Px47y26, Px48y25, Px46y25, Px47y24 } CellNode (47 @ 25) (20)Px47y26 { Px47y25, Px46y26, Px47y27, Px48y26 } CellNode (47 @ 26) (20)Px47y27 { Px48y27, Px47y26, Px46y27, Px47y28 } CellNode (47 @ 27) (20)Px47y28 { Px47y29, Px48y28, Px46y28, Px47y27 } CellNode (47 @ 28) (20)Px47y29 { Px46y29, Px47y30, Px48y29, Px47y28 } CellNode (47 @ 29) (20)Px47y3 { Px47y2, Px46y3, Px47y4, Px48y3 } CellNode (47 @ 3) (20)Px47y30 { Px46y30, Px47y29, Px47y31, Px48y30 } CellNode (47 @ 30) (20)Px47y31 { Px46y31, Px47y32, Px47y30, Px48y31 } CellNode (47 @ 31) (20)Px47y32 { Px48y32, Px46y32, Px47y33, Px47y31 } CellNode (47 @ 32) (20)Px47y33 { Px48y33, Px47y34, Px46y33, Px47y32 } CellNode (47 @ 33) (20)Px47y34 { Px47y35, Px47y33, Px48y34, Px46y34 } CellNode (47 @ 34) (20)Px47y35 { Px47y36, Px46y35, Px48y35, Px47y34 } CellNode (47 @ 35) (20)Px47y36 { Px47y37, Px46y36, Px48y36, Px47y35 } CellNode (47 @ 36) (20)Px47y37 { Px47y36, Px47y38, Px46y37, Px48y37 } CellNode (47 @ 37) (20)Px47y38 { Px47y39, Px46y38, Px47y37, Px48y38 } CellNode (47 @ 38) (20)Px47y39 { Px48y39, Px46y39, Px47y38, Px47y40 } CellNode (47 @ 39) (20)Px47y4 { Px47y3, Px48y4, Px46y4, Px47y5 } CellNode (47 @ 4) (20)Px47y40 { Px47y41, Px48y40, Px46y40, Px47y39 } CellNode (47 @ 40) (20)Px47y41 { Px47y42, Px48y41, Px47y40, Px46y41 } CellNode (47 @ 41) (20)Px47y42 { Px46y42, Px47y41, Px47y43, Px48y42 } CellNode (47 @ 42) (20)Px47y43 { Px48y43, Px46y43, Px47y42, Px47y44 } CellNode (47 @ 43) (20)Px47y44 { Px47y45, Px48y44, Px46y44, Px47y43 } CellNode (47 @ 44) (20)Px47y45 { Px47y44, Px47y46, Px48y45, Px46y45 } CellNode (47 @ 45) (20)Px47y46 { Px48y46, Px46y46, Px47y45, Px47y47 } CellNode (47 @ 46) (20)Px47y47 { Px47y48, Px48y47, Px46y47, Px47y46 } CellNode (47 @ 47) (20)Px47y48 { Px47y49, Px48y48, Px47y47, Px46y48 } CellNode (47 @ 48) (20)Px47y49 { Px47y48, Px46y49, Px47y50, Px48y49 } CellNode (47 @ 49) (20)Px47y5 { Px46y5, Px47y6, Px47y4, Px48y5 } CellNode (47 @ 5) (20)Px47y50 { Px46y50, Px47y49, Px48y50, Px47y51 } CellNode (47 @ 50) (20)Px47y51 { Px48y51, Px47y52, Px46y51, Px47y50 } CellNode (47 @ 51) (20)Px47y52 { Px48y52, Px47y53, Px47y51, Px46y52 } CellNode (47 @ 52) (20)Px47y53 { Px46y53, Px47y52, Px47y54, Px48y53 } CellNode (47 @ 53) (20)Px47y54 { Px48y54, Px46y54, Px47y53, Px47y55 } CellNode (47 @ 54) (20)Px47y55 { Px47y56, Px48y55, Px47y54, Px46y55 } CellNode (47 @ 55) (20)Px47y56 { Px46y56, Px48y56, Px47y57, Px47y55 } CellNode (47 @ 56) (20)Px47y57 { Px47y56, Px46y57, Px47y58, Px48y57 } CellNode (47 @ 57) (20)Px47y58 { Px48y58, Px47y59, Px47y57, Px46y58 } CellNode (47 @ 58) (20)Px47y59 { Px47y60, Px48y59, Px47y58, Px46y59 } CellNode (47 @ 59) (20)Px47y6 { Px46y6, Px47y7, Px48y6, Px47y5 } CellNode (47 @ 6) (20)Px47y60 { Px47y59, Px48y60, Px46y60, Px47y61 } CellNode (47 @ 60) (20)Px47y61 { Px48y61, Px47y60, Px47y62, Px46y61 } CellNode (47 @ 61) (20)Px47y62 { Px48y62, Px47y63, Px46y62, Px47y61 } CellNode (47 @ 62) (20)Px47y63 { Px48y63, Px47y64, Px46y63, Px47y62 } CellNode (47 @ 63) (20)Px47y64 { Px47y63, Px47y65, Px46y64, Px48y64 } CellNode (47 @ 64) (20)Px47y65 { Px46y65, Px48y65, Px47y64, Px47y66 } CellNode (47 @ 65) (20)Px47y66 { Px47y67, Px46y66, Px48y66, Px47y65 } CellNode (47 @ 66) (20)Px47y67 { Px46y67, Px47y66, Px48y67 } CellNode (47 @ 67) (20)Px47y7 { Px48y7, Px47y6, Px46y7, Px47y8 } CellNode (47 @ 7) (20)Px47y8 { Px47y9, Px47y7, Px48y8, Px46y8 } CellNode (47 @ 8) (20)Px47y9 { Px47y10, Px46y9, Px48y9, Px47y8 } CellNode (47 @ 9) (20)Px48y1 { Px47y1, Px48y2, Px49y1 } CellNode (48 @ 1) (20)Px48y10 { Px49y10, Px47y10, Px48y9, Px48y11 } CellNode (48 @ 10) (20)Px48y11 { Px48y12, Px49y11, Px47y11, Px48y10 } CellNode (48 @ 11) (20)Px48y12 { Px48y13, Px49y12, Px47y12, Px48y11 } CellNode (48 @ 12) (20)Px48y13 { Px47y13, Px48y12, Px48y14, Px49y13 } CellNode (48 @ 13) (20)Px48y14 { Px49y14, Px48y13, Px47y14, Px48y15 } CellNode (48 @ 14) (20)Px48y15 { Px48y16, Px49y15, Px47y15, Px48y14 } CellNode (48 @ 15) (20)Px48y16 { Px48y15, Px48y17, Px49y16, Px47y16 } CellNode (48 @ 16) (20)Px48y17 { Px49y17, Px48y16, Px47y17, Px48y18 } CellNode (48 @ 17) (20)Px48y18 { Px48y19, Px49y18, Px47y18, Px48y17 } CellNode (48 @ 18) (20)Px48y19 { Px48y20, Px49y19, Px47y19, Px48y18 } CellNode (48 @ 19) (20)Px48y2 { Px48y3, Px49y2, Px48y1, Px47y2 } CellNode (48 @ 2) (20)Px48y20 { Px48y19, Px49y20, Px47y20, Px48y21 } CellNode (48 @ 20) (20)Px48y21 { Px48y22, Px48y20, Px49y21, Px47y21 } CellNode (48 @ 21) (20)Px48y22 { Px49y22, Px47y22, Px48y23, Px48y21 } CellNode (48 @ 22) (20)Px48y23 { Px49y23, Px48y24, Px47y23, Px48y22 } CellNode (48 @ 23) (20)Px48y24 { Px48y23, Px49y24, Px48y25, Px47y24 } CellNode (48 @ 24) (20)Px48y25 { Px47y25, Px48y26, Px48y24, Px49y25 } CellNode (48 @ 25) (20)Px48y26 { Px48y27, Px47y26, Px49y26, Px48y25 } CellNode (48 @ 26) (20)Px48y27 { Px48y28, Px47y27, Px49y27, Px48y26 } CellNode (48 @ 27) (20)Px48y28 { Px47y28, Px48y27, Px49y28, Px48y29 } CellNode (48 @ 28) (20)Px48y29 { Px49y29, Px47y29, Px48y28, Px48y30 } CellNode (48 @ 29) (20)Px48y3 { Px47y3, Px48y4, Px49y3, Px48y2 } CellNode (48 @ 3) (20)Px48y30 { Px49y30, Px47y30, Px48y29, Px48y31 } CellNode (48 @ 30) (20)Px48y31 { Px48y32, Px49y31, Px47y31, Px48y30 } CellNode (48 @ 31) (20)Px48y32 { Px47y32, Px48y33, Px49y32, Px48y31 } CellNode (48 @ 32) (20)Px48y33 { Px49y33, Px48y32, Px47y33, Px48y34 } CellNode (48 @ 33) (20)Px48y34 { Px48y35, Px49y34, Px48y33, Px47y34 } CellNode (48 @ 34) (20)Px48y35 { Px48y36, Px49y35, Px48y34, Px47y35 } CellNode (48 @ 35) (20)Px48y36 { Px47y36, Px48y35, Px48y37, Px49y36 } CellNode (48 @ 36) (20)Px48y37 { Px49y37, Px47y37, Px48y36, Px48y38 } CellNode (48 @ 37) (20)Px48y38 { Px48y39, Px49y38, Px47y38, Px48y37 } CellNode (48 @ 38) (20)Px48y39 { Px48y38, Px48y40, Px49y39, Px47y39 } CellNode (48 @ 39) (20)Px48y4 { Px49y4, Px47y4, Px48y5, Px48y3 } CellNode (48 @ 4) (20)Px48y40 { Px48y39, Px49y40, Px47y40, Px48y41 } CellNode (48 @ 40) (20)Px48y41 { Px48y42, Px47y41, Px48y40, Px49y41 } CellNode (48 @ 41) (20)Px48y42 { Px49y42, Px47y42, Px48y43, Px48y41 } CellNode (48 @ 42) (20)Px48y43 { Px49y43, Px47y43, Px48y44, Px48y42 } CellNode (48 @ 43) (20)Px48y44 { Px49y44, Px48y43, Px48y45, Px47y44 } CellNode (48 @ 44) (20)Px48y45 { Px48y46, Px47y45, Px49y45, Px48y44 } CellNode (48 @ 45) (20)Px48y46 { Px49y46, Px47y46, Px48y47, Px48y45 } CellNode (48 @ 46) (20)Px48y47 { Px48y46, Px48y48, Px47y47, Px49y47 } CellNode (48 @ 47) (20)Px48y48 { Px47y48, Px49y48, Px48y47, Px48y49 } CellNode (48 @ 48) (20)Px48y49 { Px49y49, Px47y49, Px48y48, Px48y50 } CellNode (48 @ 49) (20)Px48y5 { Px49y5, Px48y4, Px48y6, Px47y5 } CellNode (48 @ 5) (20)Px48y50 { Px48y51, Px49y50, Px47y50, Px48y49 } CellNode (48 @ 50) (20)Px48y51 { Px48y52, Px49y51, Px48y50, Px47y51 } CellNode (48 @ 51) (20)Px48y52 { Px48y51, Px47y52, Px48y53, Px49y52 } CellNode (48 @ 52) (20)Px48y53 { Px49y53, Px47y53, Px48y52, Px48y54 } CellNode (48 @ 53) (20)Px48y54 { Px48y55, Px49y54, Px47y54, Px48y53 } CellNode (48 @ 54) (20)Px48y55 { Px48y54, Px48y56, Px49y55, Px47y55 } CellNode (48 @ 55) (20)Px48y56 { Px49y56, Px47y56, Px48y55, Px48y57 } CellNode (48 @ 56) (20)Px48y57 { Px48y58, Px49y57, Px48y56, Px47y57 } CellNode (48 @ 57) (20)Px48y58 { Px48y59, Px49y58, Px47y58, Px48y57 } CellNode (48 @ 58) (20)Px48y59 { Px48y58, Px47y59, Px48y60, Px49y59 } CellNode (48 @ 59) (20)Px48y6 { Px48y7, Px47y6, Px48y5, Px49y6 } CellNode (48 @ 6) (20)Px48y60 { Px47y60, Px48y59, Px49y60, Px48y61 } CellNode (48 @ 60) (20)Px48y61 { Px49y61, Px48y62, Px48y60, Px47y61 } CellNode (48 @ 61) (20)Px48y62 { Px48y63, Px49y62, Px47y62, Px48y61 } CellNode (48 @ 62) (20)Px48y63 { Px47y63, Px48y62, Px49y63, Px48y64 } CellNode (48 @ 63) (20)Px48y64 { Px49y64, Px48y63, Px47y64, Px48y65 } CellNode (48 @ 64) (20)Px48y65 { Px49y65, Px48y66, Px47y65, Px48y64 } CellNode (48 @ 65) (20)Px48y66 { Px48y65, Px49y66, Px48y67, Px47y66 } CellNode (48 @ 66) (20)Px48y67 { Px48y66, Px49y67, Px47y67 } CellNode (48 @ 67) (20)Px48y7 { Px48y8, Px47y7, Px48y6, Px49y7 } CellNode (48 @ 7) (20)Px48y8 { Px48y7, Px49y8, Px48y9, Px47y8 } CellNode (48 @ 8) (20)Px48y9 { Px49y9, Px48y10, Px48y8, Px47y9 } CellNode (48 @ 9) (20)Px49y1 { Px48y1, Px49y2, Px50y1 } CellNode (49 @ 1) (20)Px49y10 { Px49y11, Px48y10, Px49y9, Px50y10 } CellNode (49 @ 10) (20)Px49y11 { Px49y10, Px50y11, Px48y11, Px49y12 } CellNode (49 @ 11) (20)Px49y12 { Px48y12, Px50y12, Px49y11, Px49y13 } CellNode (49 @ 12) (20)Px49y13 { Px49y14, Px48y13, Px50y13, Px49y12 } CellNode (49 @ 13) (20)Px49y14 { Px50y14, Px49y15, Px48y14, Px49y13 } CellNode (49 @ 14) (20)Px49y15 { Px48y15, Px49y14, Px49y16, Px50y15 } CellNode (49 @ 15) (20)Px49y16 { Px50y16, Px48y16, Px49y17, Px49y15 } CellNode (49 @ 16) (20)Px49y17 { Px49y18, Px48y17, Px50y17, Px49y16 } CellNode (49 @ 17) (20)Px49y18 { Px49y17, Px50y18, Px48y18, Px49y19 } CellNode (49 @ 18) (20)Px49y19 { Px48y19, Px49y18, Px49y20, Px50y19 } CellNode (49 @ 19) (20)Px49y2 { Px49y1, Px50y2, Px48y2, Px49y3 } CellNode (49 @ 2) (20)Px49y20 { Px50y20, Px48y20, Px49y19, Px49y21 } CellNode (49 @ 20) (20)Px49y21 { Px49y22, Px50y21, Px49y20, Px48y21 } CellNode (49 @ 21) (20)Px49y22 { Px49y23, Px50y22, Px49y21, Px48y22 } CellNode (49 @ 22) (20)Px49y23 { Px48y23, Px49y22, Px49y24, Px50y23 } CellNode (49 @ 23) (20)Px49y24 { Px50y24, Px49y23, Px48y24, Px49y25 } CellNode (49 @ 24) (20)Px49y25 { Px49y26, Px50y25, Px49y24, Px48y25 } CellNode (49 @ 25) (20)Px49y26 { Px48y26, Px49y27, Px50y26, Px49y25 } CellNode (49 @ 26) (20)Px49y27 { Px50y27, Px48y27, Px49y26, Px49y28 } CellNode (49 @ 27) (20)Px49y28 { Px49y29, Px50y28, Px48y28, Px49y27 } CellNode (49 @ 28) (20)Px49y29 { Px49y30, Px50y29, Px49y28, Px48y29 } CellNode (49 @ 29) (20)Px49y3 { Px49y4, Px49y2, Px50y3, Px48y3 } CellNode (49 @ 3) (20)Px49y30 { Px49y29, Px49y31, Px48y30, Px50y30 } CellNode (49 @ 30) (20)Px49y31 { Px50y31, Px49y30, Px49y32, Px48y31 } CellNode (49 @ 31) (20)Px49y32 { Px49y33, Px48y32, Px50y32, Px49y31 } CellNode (49 @ 32) (20)Px49y33 { Px50y33, Px48y33, Px49y34, Px49y32 } CellNode (49 @ 33) (20)Px49y34 { Px49y33, Px50y34, Px48y34, Px49y35 } CellNode (49 @ 34) (20)Px49y35 { Px48y35, Px50y35, Px49y34, Px49y36 } CellNode (49 @ 35) (20)Px49y36 { Px50y36, Px48y36, Px49y37, Px49y35 } CellNode (49 @ 36) (20)Px49y37 { Px49y38, Px50y37, Px48y37, Px49y36 } CellNode (49 @ 37) (20)Px49y38 { Px49y39, Px49y37, Px50y38, Px48y38 } CellNode (49 @ 38) (20)Px49y39 { Px50y39, Px48y39, Px49y38, Px49y40 } CellNode (49 @ 39) (20)Px49y4 { Px48y4, Px49y5, Px49y3, Px50y4 } CellNode (49 @ 4) (20)Px49y40 { Px50y40, Px48y40, Px49y39, Px49y41 } CellNode (49 @ 40) (20)Px49y41 { Px49y42, Px50y41, Px49y40, Px48y41 } CellNode (49 @ 41) (20)Px49y42 { Px48y42, Px49y43, Px50y42, Px49y41 } CellNode (49 @ 42) (20)Px49y43 { Px50y43, Px48y43, Px49y42, Px49y44 } CellNode (49 @ 43) (20)Px49y44 { Px49y45, Px50y44, Px49y43, Px48y44 } CellNode (49 @ 44) (20)Px49y45 { Px49y46, Px50y45, Px48y45, Px49y44 } CellNode (49 @ 45) (20)Px49y46 { Px48y46, Px49y45, Px49y47, Px50y46 } CellNode (49 @ 46) (20)Px49y47 { Px50y47, Px49y46, Px48y47, Px49y48 } CellNode (49 @ 47) (20)Px49y48 { Px49y49, Px50y48, Px49y47, Px48y48 } CellNode (49 @ 48) (20)Px49y49 { Px49y48, Px49y50, Px50y49, Px48y49 } CellNode (49 @ 49) (20)Px49y5 { Px50y5, Px48y5, Px49y6, Px49y4 } CellNode (49 @ 5) (20)Px49y50 { Px49y49, Px49y51, Px48y50, Px50y50 } CellNode (49 @ 50) (20)Px49y51 { Px48y51, Px49y52, Px49y50, Px50y51 } CellNode (49 @ 51) (20)Px49y52 { Px49y53, Px48y52, Px50y52, Px49y51 } CellNode (49 @ 52) (20)Px49y53 { Px49y54, Px48y53, Px50y53, Px49y52 } CellNode (49 @ 53) (20)Px49y54 { Px49y55, Px49y53, Px50y54, Px48y54 } CellNode (49 @ 54) (20)Px49y55 { Px49y56, Px48y55, Px50y55, Px49y54 } CellNode (49 @ 55) (20)Px49y56 { Px50y56, Px48y56, Px49y57, Px49y55 } CellNode (49 @ 56) (20)Px49y57 { Px49y56, Px50y57, Px48y57, Px49y58 } CellNode (49 @ 57) (20)Px49y58 { Px48y58, Px50y58, Px49y57, Px49y59 } CellNode (49 @ 58) (20)Px49y59 { Px50y59, Px48y59, Px49y58, Px49y60 } CellNode (49 @ 59) (20)Px49y6 { Px49y5, Px50y6, Px48y6, Px49y7 } CellNode (49 @ 6) (20)Px49y60 { Px49y61, Px50y60, Px48y60, Px49y59 } CellNode (49 @ 60) (20)Px49y61 { Px49y62, Px50y61, Px49y60, Px48y61 } CellNode (49 @ 61) (20)Px49y62 { Px49y61, Px48y62, Px49y63, Px50y62 } CellNode (49 @ 62) (20)Px49y63 { Px50y63, Px48y63, Px49y62, Px49y64 } CellNode (49 @ 63) (20)Px49y64 { Px49y65, Px50y64, Px48y64, Px49y63 } CellNode (49 @ 64) (20)Px49y65 { Px49y64, Px49y66, Px50y65, Px48y65 } CellNode (49 @ 65) (20)Px49y66 { Px50y66, Px49y65, Px48y66, Px49y67 } CellNode (49 @ 66) (20)Px49y67 { Px48y67, Px49y66, Px50y67 } CellNode (49 @ 67) (20)Px49y7 { Px48y7, Px49y8, Px49y6, Px50y7 } CellNode (49 @ 7) (20)Px49y8 { Px49y9, Px48y8, Px49y7, Px50y8 } CellNode (49 @ 8) (20)Px49y9 { Px49y10, Px50y9, Px49y8, Px48y9 } CellNode (49 @ 9) (20)Px4y1 { Px3y1, Px4y2, Px5y1 } CellNode (4 @ 1) (20)Px4y10 { Px4y11, Px4y9, Px5y10, Px3y10 } CellNode (4 @ 10) (20)Px4y11 { Px4y10, Px3y11, Px4y12, Px5y11 } CellNode (4 @ 11) (20)Px4y12 { Px5y12, Px3y12, Px4y11, Px4y13 } CellNode (4 @ 12) (20)Px4y13 { Px4y14, Px5y13, Px3y13, Px4y12 } CellNode (4 @ 13) (20)Px4y14 { Px4y13, Px4y15, Px5y14, Px3y14 } CellNode (4 @ 14) (20)Px4y15 { Px5y15, Px4y14, Px3y15, Px4y16 } CellNode (4 @ 15) (20)Px4y16 { Px4y17, Px5y16, Px4y15, Px3y16 } CellNode (4 @ 16) (20)Px4y17 { Px4y18, Px5y17, Px3y17, Px4y16 } CellNode (4 @ 17) (20)Px4y18 { Px4y17, Px3y18, Px4y19, Px5y18 } CellNode (4 @ 18) (20)Px4y19 { Px5y19, Px4y18, Px3y19, Px4y20 } CellNode (4 @ 19) (20)Px4y2 { Px4y1, Px5y2, Px3y2, Px4y3 } CellNode (4 @ 2) (20)Px4y20 { Px5y20, Px3y20, Px4y21, Px4y19 } CellNode (4 @ 20) (20)Px4y21 { Px5y21, Px3y21, Px4y22, Px4y20 } CellNode (4 @ 21) (20)Px4y22 { Px4y21, Px5y22, Px3y22, Px4y23 } CellNode (4 @ 22) (20)Px4y23 { Px3y23, Px5y23, Px4y22, Px4y24 } CellNode (4 @ 23) (20)Px4y24 { Px4y25, Px3y24, Px5y24, Px4y23 } CellNode (4 @ 24) (20)Px4y25 { Px4y26, Px3y25, Px5y25, Px4y24 } CellNode (4 @ 25) (20)Px4y26 { Px4y27, Px4y25, Px5y26, Px3y26 } CellNode (4 @ 26) (20)Px4y27 { Px5y27, Px4y28, Px3y27, Px4y26 } CellNode (4 @ 27) (20)Px4y28 { Px5y28, Px3y28, Px4y29, Px4y27 } CellNode (4 @ 28) (20)Px4y29 { Px4y28, Px4y30, Px5y29, Px3y29 } CellNode (4 @ 29) (20)Px4y3 { Px4y4, Px4y2, Px5y3, Px3y3 } CellNode (4 @ 3) (20)Px4y30 { Px4y29, Px4y31, Px5y30, Px3y30 } CellNode (4 @ 30) (20)Px4y31 { Px5y31, Px3y31, Px4y30, Px4y32 } CellNode (4 @ 31) (20)Px4y32 { Px4y33, Px5y32, Px3y32, Px4y31 } CellNode (4 @ 32) (20)Px4y33 { Px4y34, Px5y33, Px3y33, Px4y32 } CellNode (4 @ 33) (20)Px4y34 { Px3y34, Px4y33, Px4y35, Px5y34 } CellNode (4 @ 34) (20)Px4y35 { Px5y35, Px3y35, Px4y34, Px4y36 } CellNode (4 @ 35) (20)Px4y36 { Px4y37, Px5y36, Px4y35, Px3y36 } CellNode (4 @ 36) (20)Px4y37 { Px3y37, Px4y38, Px5y37, Px4y36 } CellNode (4 @ 37) (20)Px4y38 { Px5y38, Px4y37, Px3y38, Px4y39 } CellNode (4 @ 38) (20)Px4y39 { Px5y39, Px3y39, Px4y38, Px4y40 } CellNode (4 @ 39) (20)Px4y4 { Px3y4, Px4y5, Px5y4, Px4y3 } CellNode (4 @ 4) (20)Px4y40 { Px5y40, Px3y40, Px4y41, Px4y39 } CellNode (4 @ 40) (20)Px4y41 { Px5y41, Px4y42, Px3y41, Px4y40 } CellNode (4 @ 41) (20)Px4y42 { Px5y42, Px4y41, Px4y43, Px3y42 } CellNode (4 @ 42) (20)Px4y43 { Px5y43, Px3y43, Px4y44, Px4y42 } CellNode (4 @ 43) (20)Px4y44 { Px4y45, Px5y44, Px3y44, Px4y43 } CellNode (4 @ 44) (20)Px4y45 { Px4y44, Px4y46, Px5y45, Px3y45 } CellNode (4 @ 45) (20)Px4y46 { Px3y46, Px4y47, Px4y45, Px5y46 } CellNode (4 @ 46) (20)Px4y47 { Px4y48, Px3y47, Px5y47, Px4y46 } CellNode (4 @ 47) (20)Px4y48 { Px5y48, Px4y49, Px3y48, Px4y47 } CellNode (4 @ 48) (20)Px4y49 { Px4y48, Px4y50, Px5y49, Px3y49 } CellNode (4 @ 49) (20)Px4y5 { Px5y5, Px4y6, Px3y5, Px4y4 } CellNode (4 @ 5) (20)Px4y50 { Px3y50, Px4y49, Px4y51, Px5y50 } CellNode (4 @ 50) (20)Px4y51 { Px5y51, Px3y51, Px4y50, Px4y52 } CellNode (4 @ 51) (20)Px4y52 { Px4y53, Px5y52, Px3y52, Px4y51 } CellNode (4 @ 52) (20)Px4y53 { Px3y53, Px4y54, Px5y53, Px4y52 } CellNode (4 @ 53) (20)Px4y54 { Px5y54, Px3y54, Px4y53, Px4y55 } CellNode (4 @ 54) (20)Px4y55 { Px4y56, Px5y55, Px4y54, Px3y55 } CellNode (4 @ 55) (20)Px4y56 { Px4y57, Px5y56, Px4y55, Px3y56 } CellNode (4 @ 56) (20)Px4y57 { Px4y56, Px3y57, Px4y58, Px5y57 } CellNode (4 @ 57) (20)Px4y58 { Px5y58, Px3y58, Px4y57, Px4y59 } CellNode (4 @ 58) (20)Px4y59 { Px4y60, Px5y59, Px3y59, Px4y58 } CellNode (4 @ 59) (20)Px4y6 { Px5y6, Px4y5, Px3y6, Px4y7 } CellNode (4 @ 6) (20)Px4y60 { Px5y60, Px4y61, Px3y60, Px4y59 } CellNode (4 @ 60) (20)Px4y61 { Px4y60, Px3y61, Px4y62, Px5y61 } CellNode (4 @ 61) (20)Px4y62 { Px4y63, Px4y61, Px3y62, Px5y62 } CellNode (4 @ 62) (20)Px4y63 { Px5y63, Px4y64, Px4y62, Px3y63 } CellNode (4 @ 63) (20)Px4y64 { Px4y63, Px5y64, Px4y65, Px3y64 } CellNode (4 @ 64) (20)Px4y65 { Px4y64, Px3y65, Px5y65, Px4y66 } CellNode (4 @ 65) (20)Px4y66 { Px5y66, Px4y67, Px4y65, Px3y66 } CellNode (4 @ 66) (20)Px4y67 { Px5y67, Px4y66, Px3y67 } CellNode (4 @ 67) (20)Px4y7 { Px3y7, Px4y8, Px5y7, Px4y6 } CellNode (4 @ 7) (20)Px4y8 { Px3y8, Px4y9, Px4y7, Px5y8 } CellNode (4 @ 8) (20)Px4y9 { Px4y8, Px5y9, Px4y10, Px3y9 } CellNode (4 @ 9) (20)Px50y1 { Px51y1, Px49y1, Px50y2 } CellNode (50 @ 1) (20)Px50y10 { Px49y10, Px50y9, Px50y11, Px51y10 } CellNode (50 @ 10) (20)Px50y11 { Px51y11, Px49y11, Px50y10, Px50y12 } CellNode (50 @ 11) (20)Px50y12 { Px50y13, Px51y12, Px50y11, Px49y12 } CellNode (50 @ 12) (20)Px50y13 { Px50y12, Px50y14, Px51y13, Px49y13 } CellNode (50 @ 13) (20)Px50y14 { Px51y14, Px49y14, Px50y13, Px50y15 } CellNode (50 @ 14) (20)Px50y15 { Px50y16, Px51y15, Px49y15, Px50y14 } CellNode (50 @ 15) (20)Px50y16 { Px50y17, Px51y16, Px50y15, Px49y16 } CellNode (50 @ 16) (20)Px50y17 { Px49y17, Px50y16, Px50y18, Px51y17 } CellNode (50 @ 17) (20)Px50y18 { Px51y18, Px49y18, Px50y17, Px50y19 } CellNode (50 @ 18) (20)Px50y19 { Px50y20, Px51y19, Px49y19, Px50y18 } CellNode (50 @ 19) (20)Px50y2 { Px50y1, Px49y2, Px50y3, Px51y2 } CellNode (50 @ 2) (20)Px50y20 { Px50y21, Px49y20, Px51y20, Px50y19 } CellNode (50 @ 20) (20)Px50y21 { Px50y20, Px51y21, Px49y21, Px50y22 } CellNode (50 @ 21) (20)Px50y22 { Px51y22, Px49y22, Px50y21, Px50y23 } CellNode (50 @ 22) (20)Px50y23 { Px51y23, Px49y23, Px50y24, Px50y22 } CellNode (50 @ 23) (20)Px50y24 { Px51y24, Px49y24, Px50y25, Px50y23 } CellNode (50 @ 24) (20)Px50y25 { Px49y25, Px50y24, Px50y26, Px51y25 } CellNode (50 @ 25) (20)Px50y26 { Px51y26, Px50y27, Px49y26, Px50y25 } CellNode (50 @ 26) (20)Px50y27 { Px51y27, Px50y28, Px49y27, Px50y26 } CellNode (50 @ 27) (20)Px50y28 { Px50y27, Px50y29, Px49y28, Px51y28 } CellNode (50 @ 28) (20)Px50y29 { Px49y29, Px50y28, Px50y30, Px51y29 } CellNode (50 @ 29) (20)Px50y3 { Px50y2, Px51y3, Px49y3, Px50y4 } CellNode (50 @ 3) (20)Px50y30 { Px51y30, Px49y30, Px50y29, Px50y31 } CellNode (50 @ 30) (20)Px50y31 { Px50y32, Px51y31, Px49y31, Px50y30 } CellNode (50 @ 31) (20)Px50y32 { Px50y33, Px51y32, Px49y32, Px50y31 } CellNode (50 @ 32) (20)Px50y33 { Px49y33, Px50y32, Px50y34, Px51y33 } CellNode (50 @ 33) (20)Px50y34 { Px51y34, Px50y33, Px49y34, Px50y35 } CellNode (50 @ 34) (20)Px50y35 { Px50y36, Px51y35, Px50y34, Px49y35 } CellNode (50 @ 35) (20)Px50y36 { Px49y36, Px50y37, Px51y36, Px50y35 } CellNode (50 @ 36) (20)Px50y37 { Px51y37, Px50y36, Px49y37, Px50y38 } CellNode (50 @ 37) (20)Px50y38 { Px50y39, Px51y38, Px49y38, Px50y37 } CellNode (50 @ 38) (20)Px50y39 { Px50y40, Px51y39, Px49y39, Px50y38 } CellNode (50 @ 39) (20)Px50y4 { Px50y5, Px51y4, Px50y3, Px49y4 } CellNode (50 @ 4) (20)Px50y40 { Px50y39, Px51y40, Px49y40, Px50y41 } CellNode (50 @ 40) (20)Px50y41 { Px50y42, Px50y40, Px51y41, Px49y41 } CellNode (50 @ 41) (20)Px50y42 { Px51y42, Px49y42, Px50y43, Px50y41 } CellNode (50 @ 42) (20)Px50y43 { Px50y44, Px49y43, Px51y43, Px50y42 } CellNode (50 @ 43) (20)Px50y44 { Px50y43, Px50y45, Px49y44, Px51y44 } CellNode (50 @ 44) (20)Px50y45 { Px49y45, Px51y45, Px50y44, Px50y46 } CellNode (50 @ 45) (20)Px50y46 { Px50y47, Px49y46, Px51y46, Px50y45 } CellNode (50 @ 46) (20)Px50y47 { Px50y48, Px51y47, Px49y47, Px50y46 } CellNode (50 @ 47) (20)Px50y48 { Px51y48, Px50y47, Px50y49, Px49y48 } CellNode (50 @ 48) (20)Px50y49 { Px51y49, Px49y49, Px50y48, Px50y50 } CellNode (50 @ 49) (20)Px50y5 { Px49y5, Px50y6, Px50y4, Px51y5 } CellNode (50 @ 5) (20)Px50y50 { Px51y50, Px49y50, Px50y49, Px50y51 } CellNode (50 @ 50) (20)Px50y51 { Px50y52, Px51y51, Px49y51, Px50y50 } CellNode (50 @ 51) (20)Px50y52 { Px49y52, Px50y53, Px51y52, Px50y51 } CellNode (50 @ 52) (20)Px50y53 { Px51y53, Px49y53, Px50y52, Px50y54 } CellNode (50 @ 53) (20)Px50y54 { Px50y55, Px51y54, Px50y53, Px49y54 } CellNode (50 @ 54) (20)Px50y55 { Px50y56, Px51y55, Px50y54, Px49y55 } CellNode (50 @ 55) (20)Px50y56 { Px49y56, Px50y55, Px50y57, Px51y56 } CellNode (50 @ 56) (20)Px50y57 { Px51y57, Px50y56, Px49y57, Px50y58 } CellNode (50 @ 57) (20)Px50y58 { Px50y59, Px51y58, Px50y57, Px49y58 } CellNode (50 @ 58) (20)Px50y59 { Px50y58, Px50y60, Px51y59, Px49y59 } CellNode (50 @ 59) (20)Px50y6 { Px50y5, Px51y6, Px49y6, Px50y7 } CellNode (50 @ 6) (20)Px50y60 { Px50y59, Px51y60, Px49y60, Px50y61 } CellNode (50 @ 60) (20)Px50y61 { Px49y61, Px50y62, Px50y60, Px51y61 } CellNode (50 @ 61) (20)Px50y62 { Px51y62, Px50y63, Px49y62, Px50y61 } CellNode (50 @ 62) (20)Px50y63 { Px51y63, Px50y64, Px49y63, Px50y62 } CellNode (50 @ 63) (20)Px50y64 { Px49y64, Px50y63, Px50y65, Px51y64 } CellNode (50 @ 64) (20)Px50y65 { Px50y66, Px51y65, Px49y65, Px50y64 } CellNode (50 @ 65) (20)Px50y66 { Px50y67, Px49y66, Px51y66, Px50y65 } CellNode (50 @ 66) (20)Px50y67 { Px51y67, Px49y67, Px50y66 } CellNode (50 @ 67) (20)Px50y7 { Px51y7, Px50y6, Px49y7, Px50y8 } CellNode (50 @ 7) (20)Px50y8 { Px49y8, Px50y9, Px51y8, Px50y7 } CellNode (50 @ 8) (20)Px50y9 { Px51y9, Px49y9, Px50y10, Px50y8 } CellNode (50 @ 9) (20)Px51y1 { Px51y2, Px52y1, Px50y1 } CellNode (51 @ 1) (20)Px51y10 { Px52y10, Px51y11, Px50y10, Px51y9 } CellNode (51 @ 10) (20)Px51y11 { Px51y12, Px50y11, Px52y11, Px51y10 } CellNode (51 @ 11) (20)Px51y12 { Px50y12, Px51y11, Px51y13, Px52y12 } CellNode (51 @ 12) (20)Px51y13 { Px51y14, Px52y13, Px50y13, Px51y12 } CellNode (51 @ 13) (20)Px51y14 { Px52y14, Px50y14, Px51y15, Px51y13 } CellNode (51 @ 14) (20)Px51y15 { Px51y14, Px51y16, Px50y15, Px52y15 } CellNode (51 @ 15) (20)Px51y16 { Px51y17, Px50y16, Px51y15, Px52y16 } CellNode (51 @ 16) (20)Px51y17 { Px51y18, Px52y17, Px50y17, Px51y16 } CellNode (51 @ 17) (20)Px51y18 { Px52y18, Px50y18, Px51y19, Px51y17 } CellNode (51 @ 18) (20)Px51y19 { Px51y18, Px51y20, Px52y19, Px50y19 } CellNode (51 @ 19) (20)Px51y2 { Px50y2, Px51y3, Px52y2, Px51y1 } CellNode (51 @ 2) (20)Px51y20 { Px50y20, Px51y19, Px51y21, Px52y20 } CellNode (51 @ 20) (20)Px51y21 { Px52y21, Px50y21, Px51y20, Px51y22 } CellNode (51 @ 21) (20)Px51y22 { Px51y23, Px52y22, Px50y22, Px51y21 } CellNode (51 @ 22) (20)Px51y23 { Px51y22, Px51y24, Px52y23, Px50y23 } CellNode (51 @ 23) (20)Px51y24 { Px52y24, Px51y23, Px50y24, Px51y25 } CellNode (51 @ 24) (20)Px51y25 { Px51y26, Px52y25, Px50y25, Px51y24 } CellNode (51 @ 25) (20)Px51y26 { Px51y27, Px52y26, Px50y26, Px51y25 } CellNode (51 @ 26) (20)Px51y27 { Px51y26, Px50y27, Px51y28, Px52y27 } CellNode (51 @ 27) (20)Px51y28 { Px52y28, Px51y27, Px50y28, Px51y29 } CellNode (51 @ 28) (20)Px51y29 { Px51y30, Px52y29, Px51y28, Px50y29 } CellNode (51 @ 29) (20)Px51y3 { Px52y3, Px51y4, Px50y3, Px51y2 } CellNode (51 @ 3) (20)Px51y30 { Px52y30, Px51y31, Px50y30, Px51y29 } CellNode (51 @ 30) (20)Px51y31 { Px51y30, Px52y31, Px51y32, Px50y31 } CellNode (51 @ 31) (20)Px51y32 { Px52y32, Px50y32, Px51y31, Px51y33 } CellNode (51 @ 32) (20)Px51y33 { Px52y33, Px50y33, Px51y34, Px51y32 } CellNode (51 @ 33) (20)Px51y34 { Px52y34, Px50y34, Px51y35, Px51y33 } CellNode (51 @ 34) (20)Px51y35 { Px52y35, Px51y34, Px51y36, Px50y35 } CellNode (51 @ 35) (20)Px51y36 { Px51y37, Px50y36, Px52y36, Px51y35 } CellNode (51 @ 36) (20)Px51y37 { Px51y38, Px50y37, Px52y37, Px51y36 } CellNode (51 @ 37) (20)Px51y38 { Px51y37, Px52y38, Px50y38, Px51y39 } CellNode (51 @ 38) (20)Px51y39 { Px50y39, Px51y38, Px51y40, Px52y39 } CellNode (51 @ 39) (20)Px51y4 { Px51y3, Px52y4, Px51y5, Px50y4 } CellNode (51 @ 4) (20)Px51y40 { Px52y40, Px50y40, Px51y39, Px51y41 } CellNode (51 @ 40) (20)Px51y41 { Px51y42, Px52y41, Px51y40, Px50y41 } CellNode (51 @ 41) (20)Px51y42 { Px51y43, Px52y42, Px51y41, Px50y42 } CellNode (51 @ 42) (20)Px51y43 { Px51y42, Px50y43, Px51y44, Px52y43 } CellNode (51 @ 43) (20)Px51y44 { Px52y44, Px50y44, Px51y43, Px51y45 } CellNode (51 @ 44) (20)Px51y45 { Px51y46, Px52y45, Px50y45, Px51y44 } CellNode (51 @ 45) (20)Px51y46 { Px51y45, Px51y47, Px52y46, Px50y46 } CellNode (51 @ 46) (20)Px51y47 { Px52y47, Px50y47, Px51y46, Px51y48 } CellNode (51 @ 47) (20)Px51y48 { Px51y49, Px52y48, Px50y48, Px51y47 } CellNode (51 @ 48) (20)Px51y49 { Px51y50, Px52y49, Px50y49, Px51y48 } CellNode (51 @ 49) (20)Px51y5 { Px50y5, Px51y6, Px51y4, Px52y5 } CellNode (51 @ 5) (20)Px51y50 { Px51y49, Px51y51, Px50y50, Px52y50 } CellNode (51 @ 50) (20)Px51y51 { Px51y52, Px51y50, Px52y51, Px50y51 } CellNode (51 @ 51) (20)Px51y52 { Px52y52, Px51y53, Px50y52, Px51y51 } CellNode (51 @ 52) (20)Px51y53 { Px51y54, Px52y53, Px50y53, Px51y52 } CellNode (51 @ 53) (20)Px51y54 { Px51y53, Px52y54, Px50y54, Px51y55 } CellNode (51 @ 54) (20)Px51y55 { Px52y55, Px50y55, Px51y54, Px51y56 } CellNode (51 @ 55) (20)Px51y56 { Px51y57, Px50y56, Px52y56, Px51y55 } CellNode (51 @ 56) (20)Px51y57 { Px51y58, Px50y57, Px52y57, Px51y56 } CellNode (51 @ 57) (20)Px51y58 { Px50y58, Px51y57, Px52y58, Px51y59 } CellNode (51 @ 58) (20)Px51y59 { Px52y59, Px50y59, Px51y58, Px51y60 } CellNode (51 @ 59) (20)Px51y6 { Px51y7, Px50y6, Px52y6, Px51y5 } CellNode (51 @ 6) (20)Px51y60 { Px52y60, Px50y60, Px51y59, Px51y61 } CellNode (51 @ 60) (20)Px51y61 { Px51y62, Px52y61, Px51y60, Px50y61 } CellNode (51 @ 61) (20)Px51y62 { Px50y62, Px51y63, Px52y62, Px51y61 } CellNode (51 @ 62) (20)Px51y63 { Px52y63, Px51y62, Px50y63, Px51y64 } CellNode (51 @ 63) (20)Px51y64 { Px51y65, Px52y64, Px51y63, Px50y64 } CellNode (51 @ 64) (20)Px51y65 { Px51y66, Px52y65, Px50y65, Px51y64 } CellNode (51 @ 65) (20)Px51y66 { Px50y66, Px51y65, Px51y67, Px52y66 } CellNode (51 @ 66) (20)Px51y67 { Px52y67, Px51y66, Px50y67 } CellNode (51 @ 67) (20)Px51y7 { Px51y6, Px52y7, Px50y7, Px51y8 } CellNode (51 @ 7) (20)Px51y8 { Px51y9, Px52y8, Px51y7, Px50y8 } CellNode (51 @ 8) (20)Px51y9 { Px50y9, Px52y9, Px51y8, Px51y10 } CellNode (51 @ 9) (20)Px52y1 { Px51y1, Px52y2, Px53y1 } CellNode (52 @ 1) (20)Px52y10 { Px52y11, Px52y9, Px53y10, Px51y10 } CellNode (52 @ 10) (20)Px52y11 { Px53y11, Px52y10, Px51y11, Px52y12 } CellNode (52 @ 11) (20)Px52y12 { Px52y13, Px53y12, Px51y12, Px52y11 } CellNode (52 @ 12) (20)Px52y13 { Px53y13, Px52y14, Px51y13, Px52y12 } CellNode (52 @ 13) (20)Px52y14 { Px52y13, Px51y14, Px52y15, Px53y14 } CellNode (52 @ 14) (20)Px52y15 { Px52y16, Px52y14, Px51y15, Px53y15 } CellNode (52 @ 15) (20)Px52y16 { Px52y17, Px53y16, Px52y15, Px51y16 } CellNode (52 @ 16) (20)Px52y17 { Px51y17, Px52y18, Px53y17, Px52y16 } CellNode (52 @ 17) (20)Px52y18 { Px51y18, Px52y17, Px53y18, Px52y19 } CellNode (52 @ 18) (20)Px52y19 { Px53y19, Px52y18, Px51y19, Px52y20 } CellNode (52 @ 19) (20)Px52y2 { Px52y3, Px52y1, Px53y2, Px51y2 } CellNode (52 @ 2) (20)Px52y20 { Px53y20, Px51y20, Px52y21, Px52y19 } CellNode (52 @ 20) (20)Px52y21 { Px53y21, Px51y21, Px52y22, Px52y20 } CellNode (52 @ 21) (20)Px52y22 { Px53y22, Px52y21, Px52y23, Px51y22 } CellNode (52 @ 22) (20)Px52y23 { Px52y24, Px51y23, Px53y23, Px52y22 } CellNode (52 @ 23) (20)Px52y24 { Px53y24, Px51y24, Px52y25, Px52y23 } CellNode (52 @ 24) (20)Px52y25 { Px52y24, Px52y26, Px51y25, Px53y25 } CellNode (52 @ 25) (20)Px52y26 { Px51y26, Px52y27, Px52y25, Px53y26 } CellNode (52 @ 26) (20)Px52y27 { Px53y27, Px51y27, Px52y28, Px52y26 } CellNode (52 @ 27) (20)Px52y28 { Px52y29, Px53y28, Px51y28, Px52y27 } CellNode (52 @ 28) (20)Px52y29 { Px52y28, Px52y30, Px53y29, Px51y29 } CellNode (52 @ 29) (20)Px52y3 { Px51y3, Px52y4, Px52y2, Px53y3 } CellNode (52 @ 3) (20)Px52y30 { Px51y30, Px52y29, Px52y31, Px53y30 } CellNode (52 @ 30) (20)Px52y31 { Px53y31, Px52y30, Px51y31, Px52y32 } CellNode (52 @ 31) (20)Px52y32 { Px52y33, Px53y32, Px51y32, Px52y31 } CellNode (52 @ 32) (20)Px52y33 { Px52y32, Px52y34, Px53y33, Px51y33 } CellNode (52 @ 33) (20)Px52y34 { Px53y34, Px52y33, Px51y34, Px52y35 } CellNode (52 @ 34) (20)Px52y35 { Px52y36, Px53y35, Px52y34, Px51y35 } CellNode (52 @ 35) (20)Px52y36 { Px52y37, Px53y36, Px51y36, Px52y35 } CellNode (52 @ 36) (20)Px52y37 { Px51y37, Px52y36, Px52y38, Px53y37 } CellNode (52 @ 37) (20)Px52y38 { Px53y38, Px51y38, Px52y37, Px52y39 } CellNode (52 @ 38) (20)Px52y39 { Px52y40, Px53y39, Px52y38, Px51y39 } CellNode (52 @ 39) (20)Px52y4 { Px53y4, Px51y4, Px52y5, Px52y3 } CellNode (52 @ 4) (20)Px52y40 { Px52y41, Px51y40, Px53y40, Px52y39 } CellNode (52 @ 40) (20)Px52y41 { Px52y40, Px53y41, Px51y41, Px52y42 } CellNode (52 @ 41) (20)Px52y42 { Px51y42, Px52y43, Px52y41, Px53y42 } CellNode (52 @ 42) (20)Px52y43 { Px53y43, Px52y44, Px51y43, Px52y42 } CellNode (52 @ 43) (20)Px52y44 { Px52y45, Px53y44, Px51y44, Px52y43 } CellNode (52 @ 44) (20)Px52y45 { Px51y45, Px52y44, Px53y45, Px52y46 } CellNode (52 @ 45) (20)Px52y46 { Px52y47, Px51y46, Px53y46, Px52y45 } CellNode (52 @ 46) (20)Px52y47 { Px53y47, Px51y47, Px52y48, Px52y46 } CellNode (52 @ 47) (20)Px52y48 { Px52y47, Px53y48, Px52y49, Px51y48 } CellNode (52 @ 48) (20)Px52y49 { Px51y49, Px52y48, Px52y50, Px53y49 } CellNode (52 @ 49) (20)Px52y5 { Px52y4, Px53y5, Px52y6, Px51y5 } CellNode (52 @ 5) (20)Px52y50 { Px53y50, Px51y50, Px52y49, Px52y51 } CellNode (52 @ 50) (20)Px52y51 { Px52y52, Px53y51, Px51y51, Px52y50 } CellNode (52 @ 51) (20)Px52y52 { Px52y53, Px53y52, Px52y51, Px51y52 } CellNode (52 @ 52) (20)Px52y53 { Px52y52, Px51y53, Px52y54, Px53y53 } CellNode (52 @ 53) (20)Px52y54 { Px53y54, Px51y54, Px52y53, Px52y55 } CellNode (52 @ 54) (20)Px52y55 { Px52y56, Px53y55, Px52y54, Px51y55 } CellNode (52 @ 55) (20)Px52y56 { Px52y55, Px52y57, Px53y56, Px51y56 } CellNode (52 @ 56) (20)Px52y57 { Px53y57, Px52y56, Px51y57, Px52y58 } CellNode (52 @ 57) (20)Px52y58 { Px52y59, Px53y58, Px51y58, Px52y57 } CellNode (52 @ 58) (20)Px52y59 { Px52y60, Px53y59, Px52y58, Px51y59 } CellNode (52 @ 59) (20)Px52y6 { Px51y6, Px52y7, Px53y6, Px52y5 } CellNode (52 @ 6) (20)Px52y60 { Px52y59, Px53y60, Px52y61, Px51y60 } CellNode (52 @ 60) (20)Px52y61 { Px53y61, Px52y60, Px52y62, Px51y61 } CellNode (52 @ 61) (20)Px52y62 { Px53y62, Px51y62, Px52y63, Px52y61 } CellNode (52 @ 62) (20)Px52y63 { Px53y63, Px51y63, Px52y64, Px52y62 } CellNode (52 @ 63) (20)Px52y64 { Px52y63, Px52y65, Px53y64, Px51y64 } CellNode (52 @ 64) (20)Px52y65 { Px52y66, Px51y65, Px52y64, Px53y65 } CellNode (52 @ 65) (20)Px52y66 { Px53y66, Px51y66, Px52y67, Px52y65 } CellNode (52 @ 66) (20)Px52y67 { Px53y67, Px52y66, Px51y67 } CellNode (52 @ 67) (20)Px52y7 { Px52y8, Px51y7, Px52y6, Px53y7 } CellNode (52 @ 7) (20)Px52y8 { Px53y8, Px52y7, Px52y9, Px51y8 } CellNode (52 @ 8) (20)Px52y9 { Px52y10, Px52y8, Px53y9, Px51y9 } CellNode (52 @ 9) (20)Px53y1 { Px52y1, Px53y2, Px54y1 } CellNode (53 @ 1) (20)Px53y10 { Px54y10, Px52y10, Px53y9, Px53y11 } CellNode (53 @ 10) (20)Px53y11 { Px54y11, Px52y11, Px53y12, Px53y10 } CellNode (53 @ 11) (20)Px53y12 { Px53y11, Px53y13, Px54y12, Px52y12 } CellNode (53 @ 12) (20)Px53y13 { Px52y13, Px53y12, Px53y14, Px54y13 } CellNode (53 @ 13) (20)Px53y14 { Px54y14, Px53y13, Px52y14, Px53y15 } CellNode (53 @ 14) (20)Px53y15 { Px53y16, Px54y15, Px53y14, Px52y15 } CellNode (53 @ 15) (20)Px53y16 { Px52y16, Px53y17, Px54y16, Px53y15 } CellNode (53 @ 16) (20)Px53y17 { Px54y17, Px52y17, Px53y16, Px53y18 } CellNode (53 @ 17) (20)Px53y18 { Px53y19, Px54y18, Px52y18, Px53y17 } CellNode (53 @ 18) (20)Px53y19 { Px53y20, Px54y19, Px53y18, Px52y19 } CellNode (53 @ 19) (20)Px53y2 { Px53y1, Px54y2, Px52y2, Px53y3 } CellNode (53 @ 2) (20)Px53y20 { Px53y19, Px53y21, Px54y20, Px52y20 } CellNode (53 @ 20) (20)Px53y21 { Px53y20, Px52y21, Px53y22, Px54y21 } CellNode (53 @ 21) (20)Px53y22 { Px54y22, Px53y23, Px53y21, Px52y22 } CellNode (53 @ 22) (20)Px53y23 { Px53y24, Px54y23, Px52y23, Px53y22 } CellNode (53 @ 23) (20)Px53y24 { Px52y24, Px53y23, Px54y24, Px53y25 } CellNode (53 @ 24) (20)Px53y25 { Px53y26, Px53y24, Px52y25, Px54y25 } CellNode (53 @ 25) (20)Px53y26 { Px53y27, Px54y26, Px52y26, Px53y25 } CellNode (53 @ 26) (20)Px53y27 { Px52y27, Px53y28, Px54y27, Px53y26 } CellNode (53 @ 27) (20)Px53y28 { Px53y27, Px52y28, Px54y28, Px53y29 } CellNode (53 @ 28) (20)Px53y29 { Px54y29, Px53y28, Px52y29, Px53y30 } CellNode (53 @ 29) (20)Px53y3 { Px53y4, Px53y2, Px54y3, Px52y3 } CellNode (53 @ 3) (20)Px53y30 { Px54y30, Px52y30, Px53y31, Px53y29 } CellNode (53 @ 30) (20)Px53y31 { Px54y31, Px52y31, Px53y32, Px53y30 } CellNode (53 @ 31) (20)Px53y32 { Px54y32, Px53y31, Px53y33, Px52y32 } CellNode (53 @ 32) (20)Px53y33 { Px54y33, Px52y33, Px53y34, Px53y32 } CellNode (53 @ 33) (20)Px53y34 { Px54y34, Px52y34, Px53y35, Px53y33 } CellNode (53 @ 34) (20)Px53y35 { Px53y34, Px53y36, Px54y35, Px52y35 } CellNode (53 @ 35) (20)Px53y36 { Px54y36, Px52y36, Px53y35, Px53y37 } CellNode (53 @ 36) (20)Px53y37 { Px54y37, Px53y38, Px52y37, Px53y36 } CellNode (53 @ 37) (20)Px53y38 { Px54y38, Px52y38, Px53y39, Px53y37 } CellNode (53 @ 38) (20)Px53y39 { Px53y38, Px53y40, Px54y39, Px52y39 } CellNode (53 @ 39) (20)Px53y4 { Px52y4, Px53y5, Px53y3, Px54y4 } CellNode (53 @ 4) (20)Px53y40 { Px52y40, Px53y39, Px53y41, Px54y40 } CellNode (53 @ 40) (20)Px53y41 { Px54y41, Px52y41, Px53y40, Px53y42 } CellNode (53 @ 41) (20)Px53y42 { Px53y43, Px54y42, Px53y41, Px52y42 } CellNode (53 @ 42) (20)Px53y43 { Px52y43, Px53y44, Px54y43, Px53y42 } CellNode (53 @ 43) (20)Px53y44 { Px54y44, Px52y44, Px53y43, Px53y45 } CellNode (53 @ 44) (20)Px53y45 { Px53y46, Px54y45, Px52y45, Px53y44 } CellNode (53 @ 45) (20)Px53y46 { Px53y47, Px54y46, Px52y46, Px53y45 } CellNode (53 @ 46) (20)Px53y47 { Px52y47, Px53y46, Px53y48, Px54y47 } CellNode (53 @ 47) (20)Px53y48 { Px54y48, Px53y47, Px52y48, Px53y49 } CellNode (53 @ 48) (20)Px53y49 { Px53y50, Px54y49, Px53y48, Px52y49 } CellNode (53 @ 49) (20)Px53y5 { Px53y4, Px53y6, Px52y5, Px54y5 } CellNode (53 @ 5) (20)Px53y50 { Px54y50, Px53y51, Px52y50, Px53y49 } CellNode (53 @ 50) (20)Px53y51 { Px53y50, Px54y51, Px52y51, Px53y52 } CellNode (53 @ 51) (20)Px53y52 { Px52y52, Px53y53, Px53y51, Px54y52 } CellNode (53 @ 52) (20)Px53y53 { Px54y53, Px52y53, Px53y54, Px53y52 } CellNode (53 @ 53) (20)Px53y54 { Px53y55, Px52y54, Px54y54, Px53y53 } CellNode (53 @ 54) (20)Px53y55 { Px54y55, Px53y54, Px53y56, Px52y55 } CellNode (53 @ 55) (20)Px53y56 { Px53y57, Px54y56, Px52y56, Px53y55 } CellNode (53 @ 56) (20)Px53y57 { Px54y57, Px53y58, Px52y57, Px53y56 } CellNode (53 @ 57) (20)Px53y58 { Px53y57, Px54y58, Px52y58, Px53y59 } CellNode (53 @ 58) (20)Px53y59 { Px52y59, Px53y58, Px53y60, Px54y59 } CellNode (53 @ 59) (20)Px53y6 { Px54y6, Px53y5, Px53y7, Px52y6 } CellNode (53 @ 6) (20)Px53y60 { Px54y60, Px52y60, Px53y59, Px53y61 } CellNode (53 @ 60) (20)Px53y61 { Px53y62, Px54y61, Px53y60, Px52y61 } CellNode (53 @ 61) (20)Px53y62 { Px53y63, Px54y62, Px52y62, Px53y61 } CellNode (53 @ 62) (20)Px53y63 { Px53y62, Px52y63, Px53y64, Px54y63 } CellNode (53 @ 63) (20)Px53y64 { Px54y64, Px52y64, Px53y63, Px53y65 } CellNode (53 @ 64) (20)Px53y65 { Px53y66, Px54y65, Px52y65, Px53y64 } CellNode (53 @ 65) (20)Px53y66 { Px52y66, Px53y67, Px54y66, Px53y65 } CellNode (53 @ 66) (20)Px53y67 { Px52y67, Px54y67, Px53y66 } CellNode (53 @ 67) (20)Px53y7 { Px53y8, Px52y7, Px53y6, Px54y7 } CellNode (53 @ 7) (20)Px53y8 { Px52y8, Px53y9, Px54y8, Px53y7 } CellNode (53 @ 8) (20)Px53y9 { Px53y8, Px54y9, Px52y9, Px53y10 } CellNode (53 @ 9) (20)Px54y1 { Px53y1, Px54y2, Px55y1 } CellNode (54 @ 1) (20)Px54y10 { Px54y9, Px54y11, Px55y10, Px53y10 } CellNode (54 @ 10) (20)Px54y11 { Px54y10, Px53y11, Px55y11, Px54y12 } CellNode (54 @ 11) (20)Px54y12 { Px55y12, Px54y11, Px53y12, Px54y13 } CellNode (54 @ 12) (20)Px54y13 { Px55y13, Px54y14, Px53y13, Px54y12 } CellNode (54 @ 13) (20)Px54y14 { Px55y14, Px53y14, Px54y15, Px54y13 } CellNode (54 @ 14) (20)Px54y15 { Px55y15, Px54y14, Px54y16, Px53y15 } CellNode (54 @ 15) (20)Px54y16 { Px55y16, Px54y17, Px53y16, Px54y15 } CellNode (54 @ 16) (20)Px54y17 { Px54y18, Px53y17, Px55y17, Px54y16 } CellNode (54 @ 17) (20)Px54y18 { Px54y17, Px54y19, Px53y18, Px55y18 } CellNode (54 @ 18) (20)Px54y19 { Px53y19, Px54y18, Px54y20, Px55y19 } CellNode (54 @ 19) (20)Px54y2 { Px54y3, Px53y2, Px55y2, Px54y1 } CellNode (54 @ 2) (20)Px54y20 { Px55y20, Px53y20, Px54y19, Px54y21 } CellNode (54 @ 20) (20)Px54y21 { Px54y22, Px55y21, Px53y21, Px54y20 } CellNode (54 @ 21) (20)Px54y22 { Px54y23, Px55y22, Px53y22, Px54y21 } CellNode (54 @ 22) (20)Px54y23 { Px54y22, Px53y23, Px54y24, Px55y23 } CellNode (54 @ 23) (20)Px54y24 { Px55y24, Px53y24, Px54y23, Px54y25 } CellNode (54 @ 24) (20)Px54y25 { Px54y26, Px55y25, Px54y24, Px53y25 } CellNode (54 @ 25) (20)Px54y26 { Px53y26, Px54y27, Px55y26, Px54y25 } CellNode (54 @ 26) (20)Px54y27 { Px55y27, Px53y27, Px54y26, Px54y28 } CellNode (54 @ 27) (20)Px54y28 { Px54y29, Px55y28, Px53y28, Px54y27 } CellNode (54 @ 28) (20)Px54y29 { Px54y30, Px55y29, Px54y28, Px53y29 } CellNode (54 @ 29) (20)Px54y3 { Px54y2, Px55y3, Px53y3, Px54y4 } CellNode (54 @ 3) (20)Px54y30 { Px54y29, Px55y30, Px54y31, Px53y30 } CellNode (54 @ 30) (20)Px54y31 { Px54y30, Px53y31, Px55y31, Px54y32 } CellNode (54 @ 31) (20)Px54y32 { Px54y33, Px55y32, Px54y31, Px53y32 } CellNode (54 @ 32) (20)Px54y33 { Px55y33, Px54y34, Px53y33, Px54y32 } CellNode (54 @ 33) (20)Px54y34 { Px54y33, Px53y34, Px55y34, Px54y35 } CellNode (54 @ 34) (20)Px54y35 { Px55y35, Px54y34, Px53y35, Px54y36 } CellNode (54 @ 35) (20)Px54y36 { Px54y37, Px55y36, Px53y36, Px54y35 } CellNode (54 @ 36) (20)Px54y37 { Px54y36, Px54y38, Px55y37, Px53y37 } CellNode (54 @ 37) (20)Px54y38 { Px54y37, Px53y38, Px54y39, Px55y38 } CellNode (54 @ 38) (20)Px54y39 { Px55y39, Px54y38, Px53y39, Px54y40 } CellNode (54 @ 39) (20)Px54y4 { Px53y4, Px55y4, Px54y3, Px54y5 } CellNode (54 @ 4) (20)Px54y40 { Px55y40, Px53y40, Px54y41, Px54y39 } CellNode (54 @ 40) (20)Px54y41 { Px55y41, Px54y42, Px53y41, Px54y40 } CellNode (54 @ 41) (20)Px54y42 { Px55y42, Px54y41, Px54y43, Px53y42 } CellNode (54 @ 42) (20)Px54y43 { Px54y44, Px55y43, Px53y43, Px54y42 } CellNode (54 @ 43) (20)Px54y44 { Px54y45, Px53y44, Px55y44, Px54y43 } CellNode (54 @ 44) (20)Px54y45 { Px54y44, Px55y45, Px53y45, Px54y46 } CellNode (54 @ 45) (20)Px54y46 { Px55y46, Px53y46, Px54y45, Px54y47 } CellNode (54 @ 46) (20)Px54y47 { Px55y47, Px53y47, Px54y48, Px54y46 } CellNode (54 @ 47) (20)Px54y48 { Px55y48, Px53y48, Px54y49, Px54y47 } CellNode (54 @ 48) (20)Px54y49 { Px54y48, Px54y50, Px55y49, Px53y49 } CellNode (54 @ 49) (20)Px54y5 { Px53y5, Px54y6, Px55y5, Px54y4 } CellNode (54 @ 5) (20)Px54y50 { Px53y50, Px54y49, Px54y51, Px55y50 } CellNode (54 @ 50) (20)Px54y51 { Px55y51, Px54y50, Px53y51, Px54y52 } CellNode (54 @ 51) (20)Px54y52 { Px54y53, Px55y52, Px54y51, Px53y52 } CellNode (54 @ 52) (20)Px54y53 { Px53y53, Px54y54, Px55y53, Px54y52 } CellNode (54 @ 53) (20)Px54y54 { Px55y54, Px54y53, Px53y54, Px54y55 } CellNode (54 @ 54) (20)Px54y55 { Px54y56, Px55y55, Px53y55, Px54y54 } CellNode (54 @ 55) (20)Px54y56 { Px55y56, Px54y57, Px53y56, Px54y55 } CellNode (54 @ 56) (20)Px54y57 { Px53y57, Px54y56, Px54y58, Px55y57 } CellNode (54 @ 57) (20)Px54y58 { Px54y59, Px54y57, Px53y58, Px55y58 } CellNode (54 @ 58) (20)Px54y59 { Px54y60, Px55y59, Px54y58, Px53y59 } CellNode (54 @ 59) (20)Px54y6 { Px55y6, Px53y6, Px54y7, Px54y5 } CellNode (54 @ 6) (20)Px54y60 { Px55y60, Px53y60, Px54y61, Px54y59 } CellNode (54 @ 60) (20)Px54y61 { Px54y60, Px55y61, Px54y62, Px53y61 } CellNode (54 @ 61) (20)Px54y62 { Px53y62, Px54y63, Px54y61, Px55y62 } CellNode (54 @ 62) (20)Px54y63 { Px55y63, Px53y63, Px54y64, Px54y62 } CellNode (54 @ 63) (20)Px54y64 { Px55y64, Px53y64, Px54y65, Px54y63 } CellNode (54 @ 64) (20)Px54y65 { Px55y65, Px54y64, Px54y66, Px53y65 } CellNode (54 @ 65) (20)Px54y66 { Px55y66, Px54y67, Px53y66, Px54y65 } CellNode (54 @ 66) (20)Px54y67 { Px53y67, Px55y67, Px54y66 } CellNode (54 @ 67) (20)Px54y7 { Px54y6, Px55y7, Px53y7, Px54y8 } CellNode (54 @ 7) (20)Px54y8 { Px53y8, Px54y9, Px55y8, Px54y7 } CellNode (54 @ 8) (20)Px54y9 { Px54y10, Px53y9, Px54y8, Px55y9 } CellNode (54 @ 9) (20)Px55y1 { Px56y1, Px54y1, Px55y2 } CellNode (55 @ 1) (20)Px55y10 { Px54y10, Px55y11, Px55y9, Px56y10 } CellNode (55 @ 10) (20)Px55y11 { Px56y11, Px54y11, Px55y10, Px55y12 } CellNode (55 @ 11) (20)Px55y12 { Px55y13, Px56y12, Px55y11, Px54y12 } CellNode (55 @ 12) (20)Px55y13 { Px54y13, Px55y14, Px56y13, Px55y12 } CellNode (55 @ 13) (20)Px55y14 { Px56y14, Px55y13, Px54y14, Px55y15 } CellNode (55 @ 14) (20)Px55y15 { Px55y16, Px56y15, Px55y14, Px54y15 } CellNode (55 @ 15) (20)Px55y16 { Px55y17, Px56y16, Px54y16, Px55y15 } CellNode (55 @ 16) (20)Px55y17 { Px55y16, Px54y17, Px55y18, Px56y17 } CellNode (55 @ 17) (20)Px55y18 { Px56y18, Px55y17, Px54y18, Px55y19 } CellNode (55 @ 18) (20)Px55y19 { Px55y20, Px56y19, Px54y19, Px55y18 } CellNode (55 @ 19) (20)Px55y2 { Px54y2, Px55y3, Px56y2, Px55y1 } CellNode (55 @ 2) (20)Px55y20 { Px56y20, Px55y21, Px54y20, Px55y19 } CellNode (55 @ 20) (20)Px55y21 { Px55y20, Px55y22, Px56y21, Px54y21 } CellNode (55 @ 21) (20)Px55y22 { Px54y22, Px56y22, Px55y21, Px55y23 } CellNode (55 @ 22) (20)Px55y23 { Px56y23, Px54y23, Px55y24, Px55y22 } CellNode (55 @ 23) (20)Px55y24 { Px56y24, Px54y24, Px55y25, Px55y23 } CellNode (55 @ 24) (20)Px55y25 { Px56y25, Px55y24, Px55y26, Px54y25 } CellNode (55 @ 25) (20)Px55y26 { Px55y27, Px54y26, Px56y26, Px55y25 } CellNode (55 @ 26) (20)Px55y27 { Px56y27, Px55y28, Px54y27, Px55y26 } CellNode (55 @ 27) (20)Px55y28 { Px55y27, Px56y28, Px55y29, Px54y28 } CellNode (55 @ 28) (20)Px55y29 { Px54y29, Px55y28, Px55y30, Px56y29 } CellNode (55 @ 29) (20)Px55y3 { Px54y3, Px55y4, Px55y2, Px56y3 } CellNode (55 @ 3) (20)Px55y30 { Px56y30, Px54y30, Px55y29, Px55y31 } CellNode (55 @ 30) (20)Px55y31 { Px55y32, Px56y31, Px55y30, Px54y31 } CellNode (55 @ 31) (20)Px55y32 { Px55y33, Px56y32, Px55y31, Px54y32 } CellNode (55 @ 32) (20)Px55y33 { Px54y33, Px55y32, Px55y34, Px56y33 } CellNode (55 @ 33) (20)Px55y34 { Px56y34, Px55y33, Px54y34, Px55y35 } CellNode (55 @ 34) (20)Px55y35 { Px55y36, Px56y35, Px55y34, Px54y35 } CellNode (55 @ 35) (20)Px55y36 { Px55y35, Px55y37, Px56y36, Px54y36 } CellNode (55 @ 36) (20)Px55y37 { Px56y37, Px54y37, Px55y36, Px55y38 } CellNode (55 @ 37) (20)Px55y38 { Px55y39, Px56y38, Px54y38, Px55y37 } CellNode (55 @ 38) (20)Px55y39 { Px55y40, Px56y39, Px54y39, Px55y38 } CellNode (55 @ 39) (20)Px55y4 { Px55y3, Px56y4, Px55y5, Px54y4 } CellNode (55 @ 4) (20)Px55y40 { Px55y39, Px55y41, Px56y40, Px54y40 } CellNode (55 @ 40) (20)Px55y41 { Px55y40, Px54y41, Px55y42, Px56y41 } CellNode (55 @ 41) (20)Px55y42 { Px56y42, Px55y43, Px55y41, Px54y42 } CellNode (55 @ 42) (20)Px55y43 { Px56y43, Px55y44, Px54y43, Px55y42 } CellNode (55 @ 43) (20)Px55y44 { Px54y44, Px55y43, Px56y44, Px55y45 } CellNode (55 @ 44) (20)Px55y45 { Px55y46, Px54y45, Px55y44, Px56y45 } CellNode (55 @ 45) (20)Px55y46 { Px56y46, Px55y47, Px55y45, Px54y46 } CellNode (55 @ 46) (20)Px55y47 { Px55y46, Px56y47, Px55y48, Px54y47 } CellNode (55 @ 47) (20)Px55y48 { Px55y47, Px54y48, Px56y48, Px55y49 } CellNode (55 @ 48) (20)Px55y49 { Px56y49, Px55y48, Px54y49, Px55y50 } CellNode (55 @ 49) (20)Px55y5 { Px55y6, Px55y4, Px56y5, Px54y5 } CellNode (55 @ 5) (20)Px55y50 { Px55y51, Px54y50, Px56y50, Px55y49 } CellNode (55 @ 50) (20)Px55y51 { Px55y52, Px54y51, Px56y51, Px55y50 } CellNode (55 @ 51) (20)Px55y52 { Px56y52, Px55y51, Px55y53, Px54y52 } CellNode (55 @ 52) (20)Px55y53 { Px56y53, Px54y53, Px55y54, Px55y52 } CellNode (55 @ 53) (20)Px55y54 { Px55y55, Px56y54, Px54y54, Px55y53 } CellNode (55 @ 54) (20)Px55y55 { Px55y54, Px55y56, Px56y55, Px54y55 } CellNode (55 @ 55) (20)Px55y56 { Px54y56, Px55y55, Px55y57, Px56y56 } CellNode (55 @ 56) (20)Px55y57 { Px56y57, Px55y56, Px54y57, Px55y58 } CellNode (55 @ 57) (20)Px55y58 { Px55y59, Px56y58, Px54y58, Px55y57 } CellNode (55 @ 58) (20)Px55y59 { Px54y59, Px55y60, Px56y59, Px55y58 } CellNode (55 @ 59) (20)Px55y6 { Px55y7, Px54y6, Px55y5, Px56y6 } CellNode (55 @ 6) (20)Px55y60 { Px54y60, Px55y59, Px55y61, Px56y60 } CellNode (55 @ 60) (20)Px55y61 { Px56y61, Px55y60, Px54y61, Px55y62 } CellNode (55 @ 61) (20)Px55y62 { Px56y62, Px55y63, Px54y62, Px55y61 } CellNode (55 @ 62) (20)Px55y63 { Px54y63, Px56y63, Px55y64, Px55y62 } CellNode (55 @ 63) (20)Px55y64 { Px54y64, Px55y63, Px55y65, Px56y64 } CellNode (55 @ 64) (20)Px55y65 { Px56y65, Px55y66, Px55y64, Px54y65 } CellNode (55 @ 65) (20)Px55y66 { Px56y66, Px55y67, Px54y66, Px55y65 } CellNode (55 @ 66) (20)Px55y67 { Px56y67, Px54y67, Px55y66 } CellNode (55 @ 67) (20)Px55y7 { Px56y7, Px55y8, Px54y7, Px55y6 } CellNode (55 @ 7) (20)Px55y8 { Px56y8, Px55y7, Px54y8, Px55y9 } CellNode (55 @ 8) (20)Px55y9 { Px54y9, Px55y10, Px56y9, Px55y8 } CellNode (55 @ 9) (20)Px56y1 { Px56y2, Px57y1, Px55y1 } CellNode (56 @ 1) (20)Px56y10 { Px56y11, Px55y10, Px56y9, Px57y10 } CellNode (56 @ 10) (20)Px56y11 { Px56y12, Px55y11, Px57y11, Px56y10 } CellNode (56 @ 11) (20)Px56y12 { Px57y12, Px56y11, Px56y13, Px55y12 } CellNode (56 @ 12) (20)Px56y13 { Px57y13, Px55y13, Px56y14, Px56y12 } CellNode (56 @ 13) (20)Px56y14 { Px56y15, Px57y14, Px55y14, Px56y13 } CellNode (56 @ 14) (20)Px56y15 { Px56y14, Px57y15, Px56y16, Px55y15 } CellNode (56 @ 15) (20)Px56y16 { Px55y16, Px57y16, Px56y15, Px56y17 } CellNode (56 @ 16) (20)Px56y17 { Px56y18, Px57y17, Px55y17, Px56y16 } CellNode (56 @ 17) (20)Px56y18 { Px56y19, Px55y18, Px57y18, Px56y17 } CellNode (56 @ 18) (20)Px56y19 { Px56y18, Px56y20, Px57y19, Px55y19 } CellNode (56 @ 19) (20)Px56y2 { Px56y1, Px57y2, Px55y2, Px56y3 } CellNode (56 @ 2) (20)Px56y20 { Px55y20, Px56y19, Px56y21, Px57y20 } CellNode (56 @ 20) (20)Px56y21 { Px57y21, Px56y20, Px55y21, Px56y22 } CellNode (56 @ 21) (20)Px56y22 { Px56y23, Px57y22, Px56y21, Px55y22 } CellNode (56 @ 22) (20)Px56y23 { Px56y22, Px56y24, Px57y23, Px55y23 } CellNode (56 @ 23) (20)Px56y24 { Px57y24, Px56y23, Px55y24, Px56y25 } CellNode (56 @ 24) (20)Px56y25 { Px56y26, Px57y25, Px56y24, Px55y25 } CellNode (56 @ 25) (20)Px56y26 { Px56y27, Px57y26, Px55y26, Px56y25 } CellNode (56 @ 26) (20)Px56y27 { Px55y27, Px56y26, Px56y28, Px57y27 } CellNode (56 @ 27) (20)Px56y28 { Px57y28, Px56y27, Px55y28, Px56y29 } CellNode (56 @ 28) (20)Px56y29 { Px56y30, Px57y29, Px56y28, Px55y29 } CellNode (56 @ 29) (20)Px56y3 { Px55y3, Px56y4, Px56y2, Px57y3 } CellNode (56 @ 3) (20)Px56y30 { Px57y30, Px55y30, Px56y31, Px56y29 } CellNode (56 @ 30) (20)Px56y31 { Px56y30, Px57y31, Px55y31, Px56y32 } CellNode (56 @ 31) (20)Px56y32 { Px55y32, Px56y33, Px56y31, Px57y32 } CellNode (56 @ 32) (20)Px56y33 { Px57y33, Px55y33, Px56y34, Px56y32 } CellNode (56 @ 33) (20)Px56y34 { Px57y34, Px55y34, Px56y35, Px56y33 } CellNode (56 @ 34) (20)Px56y35 { Px56y36, Px56y34, Px57y35, Px55y35 } CellNode (56 @ 35) (20)Px56y36 { Px57y36, Px56y37, Px55y36, Px56y35 } CellNode (56 @ 36) (20)Px56y37 { Px57y37, Px56y38, Px55y37, Px56y36 } CellNode (56 @ 37) (20)Px56y38 { Px56y37, Px57y38, Px55y38, Px56y39 } CellNode (56 @ 38) (20)Px56y39 { Px55y39, Px56y38, Px56y40, Px57y39 } CellNode (56 @ 39) (20)Px56y4 { Px55y4, Px56y5, Px56y3, Px57y4 } CellNode (56 @ 4) (20)Px56y40 { Px57y40, Px55y40, Px56y39, Px56y41 } CellNode (56 @ 40) (20)Px56y41 { Px56y42, Px57y41, Px55y41, Px56y40 } CellNode (56 @ 41) (20)Px56y42 { Px56y43, Px57y42, Px56y41, Px55y42 } CellNode (56 @ 42) (20)Px56y43 { Px56y42, Px55y43, Px56y44, Px57y43 } CellNode (56 @ 43) (20)Px56y44 { Px57y44, Px55y44, Px56y43, Px56y45 } CellNode (56 @ 44) (20)Px56y45 { Px56y46, Px57y45, Px56y44, Px55y45 } CellNode (56 @ 45) (20)Px56y46 { Px55y46, Px56y47, Px57y46, Px56y45 } CellNode (56 @ 46) (20)Px56y47 { Px57y47, Px55y47, Px56y46, Px56y48 } CellNode (56 @ 47) (20)Px56y48 { Px56y49, Px57y48, Px56y47, Px55y48 } CellNode (56 @ 48) (20)Px56y49 { Px56y50, Px57y49, Px56y48, Px55y49 } CellNode (56 @ 49) (20)Px56y5 { Px56y4, Px57y5, Px55y5, Px56y6 } CellNode (56 @ 5) (20)Px56y50 { Px56y49, Px57y50, Px56y51, Px55y50 } CellNode (56 @ 50) (20)Px56y51 { Px55y51, Px56y50, Px57y51, Px56y52 } CellNode (56 @ 51) (20)Px56y52 { Px56y53, Px57y52, Px55y52, Px56y51 } CellNode (56 @ 52) (20)Px56y53 { Px56y54, Px57y53, Px55y53, Px56y52 } CellNode (56 @ 53) (20)Px56y54 { Px56y53, Px55y54, Px56y55, Px57y54 } CellNode (56 @ 54) (20)Px56y55 { Px57y55, Px55y55, Px56y54, Px56y56 } CellNode (56 @ 55) (20)Px56y56 { Px57y56, Px55y56, Px56y57, Px56y55 } CellNode (56 @ 56) (20)Px56y57 { Px57y57, Px55y57, Px56y58, Px56y56 } CellNode (56 @ 57) (20)Px56y58 { Px56y59, Px56y57, Px57y58, Px55y58 } CellNode (56 @ 58) (20)Px56y59 { Px57y59, Px55y59, Px56y58, Px56y60 } CellNode (56 @ 59) (20)Px56y6 { Px56y7, Px57y6, Px56y5, Px55y6 } CellNode (56 @ 6) (20)Px56y60 { Px57y60, Px55y60, Px56y59, Px56y61 } CellNode (56 @ 60) (20)Px56y61 { Px56y62, Px57y61, Px56y60, Px55y61 } CellNode (56 @ 61) (20)Px56y62 { Px55y62, Px56y63, Px57y62, Px56y61 } CellNode (56 @ 62) (20)Px56y63 { Px57y63, Px56y62, Px55y63, Px56y64 } CellNode (56 @ 63) (20)Px56y64 { Px56y65, Px57y64, Px56y63, Px55y64 } CellNode (56 @ 64) (20)Px56y65 { Px56y66, Px57y65, Px55y65, Px56y64 } CellNode (56 @ 65) (20)Px56y66 { Px56y65, Px55y66, Px56y67, Px57y66 } CellNode (56 @ 66) (20)Px56y67 { Px55y67, Px57y67, Px56y66 } CellNode (56 @ 67) (20)Px56y7 { Px55y7, Px56y8, Px56y6, Px57y7 } CellNode (56 @ 7) (20)Px56y8 { Px57y8, Px56y9, Px55y8, Px56y7 } CellNode (56 @ 8) (20)Px56y9 { Px57y9, Px56y8, Px55y9, Px56y10 } CellNode (56 @ 9) (20)Px57y1 { Px56y1, Px57y2, Px58y1 } CellNode (57 @ 1) (20)Px57y10 { Px57y9, Px57y11, Px58y10, Px56y10 } CellNode (57 @ 10) (20)Px57y11 { Px58y11, Px56y11, Px57y10, Px57y12 } CellNode (57 @ 11) (20)Px57y12 { Px57y13, Px58y12, Px56y12, Px57y11 } CellNode (57 @ 12) (20)Px57y13 { Px57y14, Px58y13, Px56y13, Px57y12 } CellNode (57 @ 13) (20)Px57y14 { Px57y13, Px56y14, Px57y15, Px58y14 } CellNode (57 @ 14) (20)Px57y15 { Px58y15, Px57y14, Px56y15, Px57y16 } CellNode (57 @ 15) (20)Px57y16 { Px57y17, Px58y16, Px57y15, Px56y16 } CellNode (57 @ 16) (20)Px57y17 { Px56y17, Px57y18, Px58y17, Px57y16 } CellNode (57 @ 17) (20)Px57y18 { Px58y18, Px56y18, Px57y17, Px57y19 } CellNode (57 @ 18) (20)Px57y19 { Px58y19, Px56y19, Px57y18, Px57y20 } CellNode (57 @ 19) (20)Px57y2 { Px58y2, Px56y2, Px57y3, Px57y1 } CellNode (57 @ 2) (20)Px57y20 { Px57y21, Px56y20, Px58y20, Px57y19 } CellNode (57 @ 20) (20)Px57y21 { Px58y21, Px57y22, Px56y21, Px57y20 } CellNode (57 @ 21) (20)Px57y22 { Px58y22, Px57y21, Px57y23, Px56y22 } CellNode (57 @ 22) (20)Px57y23 { Px57y24, Px56y23, Px58y23, Px57y22 } CellNode (57 @ 23) (20)Px57y24 { Px58y24, Px56y24, Px57y25, Px57y23 } CellNode (57 @ 24) (20)Px57y25 { Px57y24, Px57y26, Px58y25, Px56y25 } CellNode (57 @ 25) (20)Px57y26 { Px58y26, Px56y26, Px57y25, Px57y27 } CellNode (57 @ 26) (20)Px57y27 { Px58y27, Px56y27, Px57y28, Px57y26 } CellNode (57 @ 27) (20)Px57y28 { Px58y28, Px56y28, Px57y29, Px57y27 } CellNode (57 @ 28) (20)Px57y29 { Px57y28, Px57y30, Px58y29, Px56y29 } CellNode (57 @ 29) (20)Px57y3 { Px57y2, Px58y3, Px56y3, Px57y4 } CellNode (57 @ 3) (20)Px57y30 { Px56y30, Px57y29, Px57y31, Px58y30 } CellNode (57 @ 30) (20)Px57y31 { Px58y31, Px57y30, Px56y31, Px57y32 } CellNode (57 @ 31) (20)Px57y32 { Px57y33, Px58y32, Px57y31, Px56y32 } CellNode (57 @ 32) (20)Px57y33 { Px56y33, Px57y34, Px58y33, Px57y32 } CellNode (57 @ 33) (20)Px57y34 { Px58y34, Px57y33, Px56y34, Px57y35 } CellNode (57 @ 34) (20)Px57y35 { Px57y36, Px58y35, Px56y35, Px57y34 } CellNode (57 @ 35) (20)Px57y36 { Px57y37, Px58y36, Px56y36, Px57y35 } CellNode (57 @ 36) (20)Px57y37 { Px57y36, Px56y37, Px57y38, Px58y37 } CellNode (57 @ 37) (20)Px57y38 { Px58y38, Px57y37, Px56y38, Px57y39 } CellNode (57 @ 38) (20)Px57y39 { Px57y40, Px58y39, Px56y39, Px57y38 } CellNode (57 @ 39) (20)Px57y4 { Px56y4, Px57y5, Px58y4, Px57y3 } CellNode (57 @ 4) (20)Px57y40 { Px58y40, Px56y40, Px57y41, Px57y39 } CellNode (57 @ 40) (20)Px57y41 { Px57y40, Px57y42, Px58y41, Px56y41 } CellNode (57 @ 41) (20)Px57y42 { Px56y42, Px58y42, Px57y41, Px57y43 } CellNode (57 @ 42) (20)Px57y43 { Px58y43, Px57y44, Px56y43, Px57y42 } CellNode (57 @ 43) (20)Px57y44 { Px57y45, Px56y44, Px58y44, Px57y43 } CellNode (57 @ 44) (20)Px57y45 { Px58y45, Px57y44, Px57y46, Px56y45 } CellNode (57 @ 45) (20)Px57y46 { Px58y46, Px56y46, Px57y47, Px57y45 } CellNode (57 @ 46) (20)Px57y47 { Px57y48, Px56y47, Px58y47, Px57y46 } CellNode (57 @ 47) (20)Px57y48 { Px57y47, Px58y48, Px56y48, Px57y49 } CellNode (57 @ 48) (20)Px57y49 { Px56y49, Px57y48, Px57y50, Px58y49 } CellNode (57 @ 49) (20)Px57y5 { Px57y6, Px56y5, Px58y5, Px57y4 } CellNode (57 @ 5) (20)Px57y50 { Px58y50, Px56y50, Px57y49, Px57y51 } CellNode (57 @ 50) (20)Px57y51 { Px57y52, Px58y51, Px57y50, Px56y51 } CellNode (57 @ 51) (20)Px57y52 { Px57y53, Px58y52, Px57y51, Px56y52 } CellNode (57 @ 52) (20)Px57y53 { Px56y53, Px57y52, Px57y54, Px58y53 } CellNode (57 @ 53) (20)Px57y54 { Px58y54, Px56y54, Px57y53, Px57y55 } CellNode (57 @ 54) (20)Px57y55 { Px57y56, Px58y55, Px56y55, Px57y54 } CellNode (57 @ 55) (20)Px57y56 { Px57y55, Px57y57, Px58y56, Px56y56 } CellNode (57 @ 56) (20)Px57y57 { Px58y57, Px57y56, Px56y57, Px57y58 } CellNode (57 @ 57) (20)Px57y58 { Px57y59, Px58y58, Px57y57, Px56y58 } CellNode (57 @ 58) (20)Px57y59 { Px57y60, Px58y59, Px57y58, Px56y59 } CellNode (57 @ 59) (20)Px57y6 { Px58y6, Px57y5, Px57y7, Px56y6 } CellNode (57 @ 6) (20)Px57y60 { Px57y59, Px58y60, Px57y61, Px56y60 } CellNode (57 @ 60) (20)Px57y61 { Px56y61, Px57y60, Px57y62, Px58y61 } CellNode (57 @ 61) (20)Px57y62 { Px58y62, Px56y62, Px57y63, Px57y61 } CellNode (57 @ 62) (20)Px57y63 { Px58y63, Px56y63, Px57y64, Px57y62 } CellNode (57 @ 63) (20)Px57y64 { Px57y63, Px57y65, Px58y64, Px56y64 } CellNode (57 @ 64) (20)Px57y65 { Px56y65, Px58y65, Px57y64, Px57y66 } CellNode (57 @ 65) (20)Px57y66 { Px58y66, Px56y66, Px57y67, Px57y65 } CellNode (57 @ 66) (20)Px57y67 { Px56y67, Px58y67, Px57y66 } CellNode (57 @ 67) (20)Px57y7 { Px57y8, Px57y6, Px58y7, Px56y7 } CellNode (57 @ 7) (20)Px57y8 { Px56y8, Px57y9, Px58y8, Px57y7 } CellNode (57 @ 8) (20)Px57y9 { Px58y9, Px57y10, Px56y9, Px57y8 } CellNode (57 @ 9) (20)Px58y1 { Px57y1, Px58y2, Px59y1 } CellNode (58 @ 1) (20)Px58y10 { Px59y10, Px58y11, Px57y10, Px58y9 } CellNode (58 @ 10) (20)Px58y11 { Px59y11, Px57y11, Px58y12, Px58y10 } CellNode (58 @ 11) (20)Px58y12 { Px58y11, Px59y12, Px58y13, Px57y12 } CellNode (58 @ 12) (20)Px58y13 { Px58y14, Px57y13, Px58y12, Px59y13 } CellNode (58 @ 13) (20)Px58y14 { Px58y15, Px57y14, Px59y14, Px58y13 } CellNode (58 @ 14) (20)Px58y15 { Px58y16, Px57y15, Px59y15, Px58y14 } CellNode (58 @ 15) (20)Px58y16 { Px57y16, Px58y15, Px58y17, Px59y16 } CellNode (58 @ 16) (20)Px58y17 { Px58y18, Px57y17, Px59y17, Px58y16 } CellNode (58 @ 17) (20)Px58y18 { Px58y19, Px59y18, Px57y18, Px58y17 } CellNode (58 @ 18) (20)Px58y19 { Px58y18, Px58y20, Px59y19, Px57y19 } CellNode (58 @ 19) (20)Px58y2 { Px58y3, Px57y2, Px58y1, Px59y2 } CellNode (58 @ 2) (20)Px58y20 { Px58y19, Px58y21, Px59y20, Px57y20 } CellNode (58 @ 20) (20)Px58y21 { Px59y21, Px57y21, Px58y20, Px58y22 } CellNode (58 @ 21) (20)Px58y22 { Px58y23, Px59y22, Px58y21, Px57y22 } CellNode (58 @ 22) (20)Px58y23 { Px58y24, Px59y23, Px57y23, Px58y22 } CellNode (58 @ 23) (20)Px58y24 { Px57y24, Px58y23, Px59y24, Px58y25 } CellNode (58 @ 24) (20)Px58y25 { Px59y25, Px58y24, Px57y25, Px58y26 } CellNode (58 @ 25) (20)Px58y26 { Px59y26, Px58y27, Px57y26, Px58y25 } CellNode (58 @ 26) (20)Px58y27 { Px57y27, Px59y27, Px58y28, Px58y26 } CellNode (58 @ 27) (20)Px58y28 { Px57y28, Px58y27, Px58y29, Px59y28 } CellNode (58 @ 28) (20)Px58y29 { Px59y29, Px58y28, Px57y29, Px58y30 } CellNode (58 @ 29) (20)Px58y3 { Px59y3, Px58y4, Px57y3, Px58y2 } CellNode (58 @ 3) (20)Px58y30 { Px59y30, Px57y30, Px58y31, Px58y29 } CellNode (58 @ 30) (20)Px58y31 { Px58y32, Px57y31, Px59y31, Px58y30 } CellNode (58 @ 31) (20)Px58y32 { Px57y32, Px58y31, Px58y33, Px59y32 } CellNode (58 @ 32) (20)Px58y33 { Px59y33, Px57y33, Px58y34, Px58y32 } CellNode (58 @ 33) (20)Px58y34 { Px59y34, Px57y34, Px58y35, Px58y33 } CellNode (58 @ 34) (20)Px58y35 { Px58y34, Px58y36, Px57y35, Px59y35 } CellNode (58 @ 35) (20)Px58y36 { Px57y36, Px59y36, Px58y35, Px58y37 } CellNode (58 @ 36) (20)Px58y37 { Px58y38, Px57y37, Px59y37, Px58y36 } CellNode (58 @ 37) (20)Px58y38 { Px59y38, Px57y38, Px58y39, Px58y37 } CellNode (58 @ 38) (20)Px58y39 { Px58y38, Px58y40, Px59y39, Px57y39 } CellNode (58 @ 39) (20)Px58y4 { Px59y4, Px58y3, Px58y5, Px57y4 } CellNode (58 @ 4) (20)Px58y40 { Px57y40, Px58y39, Px58y41, Px59y40 } CellNode (58 @ 40) (20)Px58y41 { Px59y41, Px58y40, Px57y41, Px58y42 } CellNode (58 @ 41) (20)Px58y42 { Px58y43, Px59y42, Px57y42, Px58y41 } CellNode (58 @ 42) (20)Px58y43 { Px58y42, Px58y44, Px59y43, Px57y43 } CellNode (58 @ 43) (20)Px58y44 { Px59y44, Px58y43, Px57y44, Px58y45 } CellNode (58 @ 44) (20)Px58y45 { Px58y46, Px59y45, Px57y45, Px58y44 } CellNode (58 @ 45) (20)Px58y46 { Px58y47, Px59y46, Px57y46, Px58y45 } CellNode (58 @ 46) (20)Px58y47 { Px57y47, Px58y46, Px58y48, Px59y47 } CellNode (58 @ 47) (20)Px58y48 { Px59y48, Px57y48, Px58y47, Px58y49 } CellNode (58 @ 48) (20)Px58y49 { Px58y50, Px59y49, Px57y49, Px58y48 } CellNode (58 @ 49) (20)Px58y5 { Px57y5, Px58y6, Px58y4, Px59y5 } CellNode (58 @ 5) (20)Px58y50 { Px58y51, Px57y50, Px59y50, Px58y49 } CellNode (58 @ 50) (20)Px58y51 { Px58y50, Px58y52, Px57y51, Px59y51 } CellNode (58 @ 51) (20)Px58y52 { Px57y52, Px58y53, Px58y51, Px59y52 } CellNode (58 @ 52) (20)Px58y53 { Px58y54, Px57y53, Px59y53, Px58y52 } CellNode (58 @ 53) (20)Px58y54 { Px59y54, Px58y55, Px57y54, Px58y53 } CellNode (58 @ 54) (20)Px58y55 { Px58y56, Px58y54, Px59y55, Px57y55 } CellNode (58 @ 55) (20)Px58y56 { Px58y57, Px57y56, Px59y56, Px58y55 } CellNode (58 @ 56) (20)Px58y57 { Px58y58, Px57y57, Px59y57, Px58y56 } CellNode (58 @ 57) (20)Px58y58 { Px58y57, Px59y58, Px57y58, Px58y59 } CellNode (58 @ 58) (20)Px58y59 { Px57y59, Px58y58, Px58y60, Px59y59 } CellNode (58 @ 59) (20)Px58y6 { Px57y6, Px58y7, Px59y6, Px58y5 } CellNode (58 @ 6) (20)Px58y60 { Px59y60, Px57y60, Px58y59, Px58y61 } CellNode (58 @ 60) (20)Px58y61 { Px58y62, Px59y61, Px58y60, Px57y61 } CellNode (58 @ 61) (20)Px58y62 { Px58y63, Px59y62, Px58y61, Px57y62 } CellNode (58 @ 62) (20)Px58y63 { Px58y62, Px57y63, Px58y64, Px59y63 } CellNode (58 @ 63) (20)Px58y64 { Px59y64, Px57y64, Px58y63, Px58y65 } CellNode (58 @ 64) (20)Px58y65 { Px58y66, Px59y65, Px57y65, Px58y64 } CellNode (58 @ 65) (20)Px58y66 { Px57y66, Px58y67, Px59y66, Px58y65 } CellNode (58 @ 66) (20)Px58y67 { Px58y66, Px59y67, Px57y67 } CellNode (58 @ 67) (20)Px58y7 { Px59y7, Px58y6, Px58y8, Px57y7 } CellNode (58 @ 7) (20)Px58y8 { Px58y9, Px58y7, Px59y8, Px57y8 } CellNode (58 @ 8) (20)Px58y9 { Px57y9, Px59y9, Px58y10, Px58y8 } CellNode (58 @ 9) (20)Px59y1 { Px58y1, Px59y2, Px60y1 } CellNode (59 @ 1) (20)Px59y10 { Px59y11, Px60y10, Px58y10, Px59y9 } CellNode (59 @ 10) (20)Px59y11 { Px58y11, Px59y10, Px59y12, Px60y11 } CellNode (59 @ 11) (20)Px59y12 { Px60y12, Px59y11, Px58y12, Px59y13 } CellNode (59 @ 12) (20)Px59y13 { Px59y14, Px60y13, Px59y12, Px58y13 } CellNode (59 @ 13) (20)Px59y14 { Px59y13, Px59y15, Px60y14, Px58y14 } CellNode (59 @ 14) (20)Px59y15 { Px60y15, Px59y14, Px58y15, Px59y16 } CellNode (59 @ 15) (20)Px59y16 { Px59y17, Px60y16, Px58y16, Px59y15 } CellNode (59 @ 16) (20)Px59y17 { Px59y18, Px60y17, Px58y17, Px59y16 } CellNode (59 @ 17) (20)Px59y18 { Px58y18, Px59y17, Px59y19, Px60y18 } CellNode (59 @ 18) (20)Px59y19 { Px60y19, Px58y19, Px59y18, Px59y20 } CellNode (59 @ 19) (20)Px59y2 { Px59y3, Px59y1, Px60y2, Px58y2 } CellNode (59 @ 2) (20)Px59y20 { Px59y21, Px58y20, Px60y20, Px59y19 } CellNode (59 @ 20) (20)Px59y21 { Px60y21, Px58y21, Px59y22, Px59y20 } CellNode (59 @ 21) (20)Px59y22 { Px59y21, Px59y23, Px60y22, Px58y22 } CellNode (59 @ 22) (20)Px59y23 { Px58y23, Px59y22, Px59y24, Px60y23 } CellNode (59 @ 23) (20)Px59y24 { Px60y24, Px58y24, Px59y23, Px59y25 } CellNode (59 @ 24) (20)Px59y25 { Px59y26, Px60y25, Px58y25, Px59y24 } CellNode (59 @ 25) (20)Px59y26 { Px59y25, Px59y27, Px60y26, Px58y26 } CellNode (59 @ 26) (20)Px59y27 { Px60y27, Px59y26, Px58y27, Px59y28 } CellNode (59 @ 27) (20)Px59y28 { Px59y29, Px60y28, Px59y27, Px58y28 } CellNode (59 @ 28) (20)Px59y29 { Px59y30, Px60y29, Px59y28, Px58y29 } CellNode (59 @ 29) (20)Px59y3 { Px59y4, Px58y3, Px59y2, Px60y3 } CellNode (59 @ 3) (20)Px59y30 { Px59y29, Px59y31, Px60y30, Px58y30 } CellNode (59 @ 30) (20)Px59y31 { Px60y31, Px59y30, Px58y31, Px59y32 } CellNode (59 @ 31) (20)Px59y32 { Px59y33, Px60y32, Px58y32, Px59y31 } CellNode (59 @ 32) (20)Px59y33 { Px59y34, Px60y33, Px58y33, Px59y32 } CellNode (59 @ 33) (20)Px59y34 { Px59y33, Px58y34, Px59y35, Px60y34 } CellNode (59 @ 34) (20)Px59y35 { Px60y35, Px59y34, Px58y35, Px59y36 } CellNode (59 @ 35) (20)Px59y36 { Px59y37, Px60y36, Px58y36, Px59y35 } CellNode (59 @ 36) (20)Px59y37 { Px58y37, Px59y38, Px60y37, Px59y36 } CellNode (59 @ 37) (20)Px59y38 { Px60y38, Px58y38, Px59y37, Px59y39 } CellNode (59 @ 38) (20)Px59y39 { Px60y39, Px58y39, Px59y38, Px59y40 } CellNode (59 @ 39) (20)Px59y4 { Px60y4, Px58y4, Px59y5, Px59y3 } CellNode (59 @ 4) (20)Px59y40 { Px59y41, Px58y40, Px60y40, Px59y39 } CellNode (59 @ 40) (20)Px59y41 { Px60y41, Px58y41, Px59y42, Px59y40 } CellNode (59 @ 41) (20)Px59y42 { Px58y42, Px59y41, Px60y42, Px59y43 } CellNode (59 @ 42) (20)Px59y43 { Px60y43, Px58y43, Px59y44, Px59y42 } CellNode (59 @ 43) (20)Px59y44 { Px60y44, Px59y45, Px58y44, Px59y43 } CellNode (59 @ 44) (20)Px59y45 { Px59y44, Px60y45, Px59y46, Px58y45 } CellNode (59 @ 45) (20)Px59y46 { Px60y46, Px58y46, Px59y45, Px59y47 } CellNode (59 @ 46) (20)Px59y47 { Px59y48, Px60y47, Px58y47, Px59y46 } CellNode (59 @ 47) (20)Px59y48 { Px60y48, Px58y48, Px59y49, Px59y47 } CellNode (59 @ 48) (20)Px59y49 { Px59y48, Px59y50, Px60y49, Px58y49 } CellNode (59 @ 49) (20)Px59y5 { Px59y4, Px60y5, Px59y6, Px58y5 } CellNode (59 @ 5) (20)Px59y50 { Px58y50, Px59y49, Px59y51, Px60y50 } CellNode (59 @ 50) (20)Px59y51 { Px60y51, Px58y51, Px59y50, Px59y52 } CellNode (59 @ 51) (20)Px59y52 { Px59y53, Px60y52, Px58y52, Px59y51 } CellNode (59 @ 52) (20)Px59y53 { Px59y52, Px59y54, Px60y53, Px58y53 } CellNode (59 @ 53) (20)Px59y54 { Px60y54, Px58y54, Px59y53, Px59y55 } CellNode (59 @ 54) (20)Px59y55 { Px59y56, Px60y55, Px58y55, Px59y54 } CellNode (59 @ 55) (20)Px59y56 { Px59y57, Px60y56, Px59y55, Px58y56 } CellNode (59 @ 56) (20)Px59y57 { Px58y57, Px59y56, Px59y58, Px60y57 } CellNode (59 @ 57) (20)Px59y58 { Px60y58, Px58y58, Px59y57, Px59y59 } CellNode (59 @ 58) (20)Px59y59 { Px59y60, Px60y59, Px59y58, Px58y59 } CellNode (59 @ 59) (20)Px59y6 { Px58y6, Px59y7, Px59y5, Px60y6 } CellNode (59 @ 6) (20)Px59y60 { Px59y61, Px60y60, Px58y60, Px59y59 } CellNode (59 @ 60) (20)Px59y61 { Px59y60, Px59y62, Px60y61, Px58y61 } CellNode (59 @ 61) (20)Px59y62 { Px58y62, Px59y63, Px59y61, Px60y62 } CellNode (59 @ 62) (20)Px59y63 { Px60y63, Px58y63, Px59y64, Px59y62 } CellNode (59 @ 63) (20)Px59y64 { Px60y64, Px58y64, Px59y65, Px59y63 } CellNode (59 @ 64) (20)Px59y65 { Px59y66, Px59y64, Px60y65, Px58y65 } CellNode (59 @ 65) (20)Px59y66 { Px59y67, Px58y66, Px60y66, Px59y65 } CellNode (59 @ 66) (20)Px59y67 { Px58y67, Px59y66, Px60y67 } CellNode (59 @ 67) (20)Px59y7 { Px58y7, Px59y8, Px59y6, Px60y7 } CellNode (59 @ 7) (20)Px59y8 { Px59y7, Px60y8, Px59y9, Px58y8 } CellNode (59 @ 8) (20)Px59y9 { Px59y10, Px59y8, Px60y9, Px58y9 } CellNode (59 @ 9) (20)Px5y1 { Px4y1, Px5y2, Px6y1 } CellNode (5 @ 1) (20)Px5y10 { Px5y9, Px4y10, Px5y11, Px6y10 } CellNode (5 @ 10) (20)Px5y11 { Px5y12, Px6y11, Px4y11, Px5y10 } CellNode (5 @ 11) (20)Px5y12 { Px6y12, Px5y13, Px4y12, Px5y11 } CellNode (5 @ 12) (20)Px5y13 { Px4y13, Px5y12, Px6y13, Px5y14 } CellNode (5 @ 13) (20)Px5y14 { Px5y15, Px4y14, Px6y14, Px5y13 } CellNode (5 @ 14) (20)Px5y15 { Px5y16, Px4y15, Px6y15, Px5y14 } CellNode (5 @ 15) (20)Px5y16 { Px5y15, Px6y16, Px5y17, Px4y16 } CellNode (5 @ 16) (20)Px5y17 { Px4y17, Px5y18, Px5y16, Px6y17 } CellNode (5 @ 17) (20)Px5y18 { Px6y18, Px4y18, Px5y19, Px5y17 } CellNode (5 @ 18) (20)Px5y19 { Px5y20, Px6y19, Px4y19, Px5y18 } CellNode (5 @ 19) (20)Px5y2 { Px6y2, Px4y2, Px5y3, Px5y1 } CellNode (5 @ 2) (20)Px5y20 { Px5y19, Px5y21, Px6y20, Px4y20 } CellNode (5 @ 20) (20)Px5y21 { Px5y20, Px4y21, Px5y22, Px6y21 } CellNode (5 @ 21) (20)Px5y22 { Px6y22, Px5y21, Px4y22, Px5y23 } CellNode (5 @ 22) (20)Px5y23 { Px5y24, Px6y23, Px5y22, Px4y23 } CellNode (5 @ 23) (20)Px5y24 { Px5y23, Px5y25, Px6y24, Px4y24 } CellNode (5 @ 24) (20)Px5y25 { Px6y25, Px4y25, Px5y24, Px5y26 } CellNode (5 @ 25) (20)Px5y26 { Px5y27, Px6y26, Px4y26, Px5y25 } CellNode (5 @ 26) (20)Px5y27 { Px5y28, Px6y27, Px5y26, Px4y27 } CellNode (5 @ 27) (20)Px5y28 { Px5y27, Px4y28, Px5y29, Px6y28 } CellNode (5 @ 28) (20)Px5y29 { Px6y29, Px5y28, Px4y29, Px5y30 } CellNode (5 @ 29) (20)Px5y3 { Px5y2, Px6y3, Px5y4, Px4y3 } CellNode (5 @ 3) (20)Px5y30 { Px6y30, Px5y31, Px4y30, Px5y29 } CellNode (5 @ 30) (20)Px5y31 { Px5y32, Px6y31, Px4y31, Px5y30 } CellNode (5 @ 31) (20)Px5y32 { Px5y31, Px6y32, Px4y32, Px5y33 } CellNode (5 @ 32) (20)Px5y33 { Px6y33, Px4y33, Px5y32, Px5y34 } CellNode (5 @ 33) (20)Px5y34 { Px6y34, Px4y34, Px5y35, Px5y33 } CellNode (5 @ 34) (20)Px5y35 { Px6y35, Px4y35, Px5y36, Px5y34 } CellNode (5 @ 35) (20)Px5y36 { Px6y36, Px5y35, Px5y37, Px4y36 } CellNode (5 @ 36) (20)Px5y37 { Px5y38, Px4y37, Px6y37, Px5y36 } CellNode (5 @ 37) (20)Px5y38 { Px6y38, Px4y38, Px5y39, Px5y37 } CellNode (5 @ 38) (20)Px5y39 { Px5y38, Px5y40, Px6y39, Px4y39 } CellNode (5 @ 39) (20)Px5y4 { Px5y5, Px5y3, Px6y4, Px4y4 } CellNode (5 @ 4) (20)Px5y40 { Px5y39, Px5y41, Px6y40, Px4y40 } CellNode (5 @ 40) (20)Px5y41 { Px6y41, Px5y40, Px4y41, Px5y42 } CellNode (5 @ 41) (20)Px5y42 { Px5y43, Px6y42, Px5y41, Px4y42 } CellNode (5 @ 42) (20)Px5y43 { Px5y44, Px6y43, Px4y43, Px5y42 } CellNode (5 @ 43) (20)Px5y44 { Px4y44, Px5y43, Px5y45, Px6y44 } CellNode (5 @ 44) (20)Px5y45 { Px6y45, Px4y45, Px5y44, Px5y46 } CellNode (5 @ 45) (20)Px5y46 { Px5y47, Px6y46, Px4y46, Px5y45 } CellNode (5 @ 46) (20)Px5y47 { Px4y47, Px5y48, Px6y47, Px5y46 } CellNode (5 @ 47) (20)Px5y48 { Px6y48, Px4y48, Px5y47, Px5y49 } CellNode (5 @ 48) (20)Px5y49 { Px6y49, Px5y48, Px4y49, Px5y50 } CellNode (5 @ 49) (20)Px5y5 { Px5y6, Px4y5, Px5y4, Px6y5 } CellNode (5 @ 5) (20)Px5y50 { Px6y50, Px5y51, Px4y50, Px5y49 } CellNode (5 @ 50) (20)Px5y51 { Px6y51, Px4y51, Px5y52, Px5y50 } CellNode (5 @ 51) (20)Px5y52 { Px5y53, Px5y51, Px6y52, Px4y52 } CellNode (5 @ 52) (20)Px5y53 { Px6y53, Px4y53, Px5y54, Px5y52 } CellNode (5 @ 53) (20)Px5y54 { Px5y55, Px4y54, Px6y54, Px5y53 } CellNode (5 @ 54) (20)Px5y55 { Px5y54, Px5y56, Px4y55, Px6y55 } CellNode (5 @ 55) (20)Px5y56 { Px6y56, Px4y56, Px5y55, Px5y57 } CellNode (5 @ 56) (20)Px5y57 { Px6y57, Px4y57, Px5y58, Px5y56 } CellNode (5 @ 57) (20)Px5y58 { Px6y58, Px5y59, Px4y58, Px5y57 } CellNode (5 @ 58) (20)Px5y59 { Px5y58, Px5y60, Px6y59, Px4y59 } CellNode (5 @ 59) (20)Px5y6 { Px6y6, Px5y7, Px4y6, Px5y5 } CellNode (5 @ 6) (20)Px5y60 { Px4y60, Px5y59, Px5y61, Px6y60 } CellNode (5 @ 60) (20)Px5y61 { Px6y61, Px5y60, Px4y61, Px5y62 } CellNode (5 @ 61) (20)Px5y62 { Px5y63, Px6y62, Px4y62, Px5y61 } CellNode (5 @ 62) (20)Px5y63 { Px5y62, Px5y64, Px6y63, Px4y63 } CellNode (5 @ 63) (20)Px5y64 { Px6y64, Px5y63, Px4y64, Px5y65 } CellNode (5 @ 64) (20)Px5y65 { Px5y66, Px6y65, Px5y64, Px4y65 } CellNode (5 @ 65) (20)Px5y66 { Px5y67, Px6y66, Px5y65, Px4y66 } CellNode (5 @ 66) (20)Px5y67 { Px5y66, Px6y67, Px4y67 } CellNode (5 @ 67) (20)Px5y7 { Px5y6, Px6y7, Px4y7, Px5y8 } CellNode (5 @ 7) (20)Px5y8 { Px4y8, Px5y9, Px5y7, Px6y8 } CellNode (5 @ 8) (20)Px5y9 { Px4y9, Px5y10, Px5y8, Px6y9 } CellNode (5 @ 9) (20)Px60y1 { Px61y1, Px59y1, Px60y2 } CellNode (60 @ 1) (20)Px60y10 { Px59y10, Px60y11, Px60y9, Px61y10 } CellNode (60 @ 10) (20)Px60y11 { Px61y11, Px59y11, Px60y12, Px60y10 } CellNode (60 @ 11) (20)Px60y12 { Px60y13, Px59y12, Px61y12, Px60y11 } CellNode (60 @ 12) (20)Px60y13 { Px60y14, Px60y12, Px61y13, Px59y13 } CellNode (60 @ 13) (20)Px60y14 { Px60y15, Px61y14, Px59y14, Px60y13 } CellNode (60 @ 14) (20)Px60y15 { Px61y15, Px60y16, Px59y15, Px60y14 } CellNode (60 @ 15) (20)Px60y16 { Px60y15, Px61y16, Px59y16, Px60y17 } CellNode (60 @ 16) (20)Px60y17 { Px59y17, Px60y18, Px60y16, Px61y17 } CellNode (60 @ 17) (20)Px60y18 { Px61y18, Px59y18, Px60y19, Px60y17 } CellNode (60 @ 18) (20)Px60y19 { Px60y20, Px61y19, Px59y19, Px60y18 } CellNode (60 @ 19) (20)Px60y2 { Px60y1, Px61y2, Px59y2, Px60y3 } CellNode (60 @ 2) (20)Px60y20 { Px60y19, Px60y21, Px61y20, Px59y20 } CellNode (60 @ 20) (20)Px60y21 { Px59y21, Px60y20, Px60y22, Px61y21 } CellNode (60 @ 21) (20)Px60y22 { Px61y22, Px60y21, Px59y22, Px60y23 } CellNode (60 @ 22) (20)Px60y23 { Px60y24, Px59y23, Px61y23, Px60y22 } CellNode (60 @ 23) (20)Px60y24 { Px60y25, Px59y24, Px61y24, Px60y23 } CellNode (60 @ 24) (20)Px60y25 { Px61y25, Px60y24, Px60y26, Px59y25 } CellNode (60 @ 25) (20)Px60y26 { Px60y27, Px59y26, Px61y26, Px60y25 } CellNode (60 @ 26) (20)Px60y27 { Px60y28, Px59y27, Px61y27, Px60y26 } CellNode (60 @ 27) (20)Px60y28 { Px60y27, Px60y29, Px59y28, Px61y28 } CellNode (60 @ 28) (20)Px60y29 { Px59y29, Px61y29, Px60y28, Px60y30 } CellNode (60 @ 29) (20)Px60y3 { Px60y4, Px61y3, Px60y2, Px59y3 } CellNode (60 @ 3) (20)Px60y30 { Px61y30, Px60y31, Px59y30, Px60y29 } CellNode (60 @ 30) (20)Px60y31 { Px61y31, Px59y31, Px60y32, Px60y30 } CellNode (60 @ 31) (20)Px60y32 { Px60y31, Px61y32, Px59y32, Px60y33 } CellNode (60 @ 32) (20)Px60y33 { Px59y33, Px61y33, Px60y32, Px60y34 } CellNode (60 @ 33) (20)Px60y34 { Px60y35, Px59y34, Px61y34, Px60y33 } CellNode (60 @ 34) (20)Px60y35 { Px61y35, Px60y36, Px59y35, Px60y34 } CellNode (60 @ 35) (20)Px60y36 { Px59y36, Px60y35, Px60y37, Px61y36 } CellNode (60 @ 36) (20)Px60y37 { Px61y37, Px59y37, Px60y38, Px60y36 } CellNode (60 @ 37) (20)Px60y38 { Px60y39, Px59y38, Px61y38, Px60y37 } CellNode (60 @ 38) (20)Px60y39 { Px60y38, Px60y40, Px61y39, Px59y39 } CellNode (60 @ 39) (20)Px60y4 { Px59y4, Px60y5, Px61y4, Px60y3 } CellNode (60 @ 4) (20)Px60y40 { Px60y39, Px60y41, Px61y40, Px59y40 } CellNode (60 @ 40) (20)Px60y41 { Px61y41, Px59y41, Px60y40, Px60y42 } CellNode (60 @ 41) (20)Px60y42 { Px60y43, Px61y42, Px60y41, Px59y42 } CellNode (60 @ 42) (20)Px60y43 { Px60y44, Px61y43, Px59y43, Px60y42 } CellNode (60 @ 43) (20)Px60y44 { Px60y43, Px59y44, Px60y45, Px61y44 } CellNode (60 @ 44) (20)Px60y45 { Px61y45, Px60y44, Px59y45, Px60y46 } CellNode (60 @ 45) (20)Px60y46 { Px60y47, Px61y46, Px60y45, Px59y46 } CellNode (60 @ 46) (20)Px60y47 { Px60y46, Px60y48, Px61y47, Px59y47 } CellNode (60 @ 47) (20)Px60y48 { Px61y48, Px59y48, Px60y47, Px60y49 } CellNode (60 @ 48) (20)Px60y49 { Px61y49, Px60y48, Px59y49, Px60y50 } CellNode (60 @ 49) (20)Px60y5 { Px60y4, Px61y5, Px59y5, Px60y6 } CellNode (60 @ 5) (20)Px60y50 { Px61y50, Px60y51, Px59y50, Px60y49 } CellNode (60 @ 50) (20)Px60y51 { Px60y52, Px59y51, Px61y51, Px60y50 } CellNode (60 @ 51) (20)Px60y52 { Px60y53, Px60y51, Px61y52, Px59y52 } CellNode (60 @ 52) (20)Px60y53 { Px61y53, Px59y53, Px60y54, Px60y52 } CellNode (60 @ 53) (20)Px60y54 { Px61y54, Px59y54, Px60y55, Px60y53 } CellNode (60 @ 54) (20)Px60y55 { Px60y54, Px61y55, Px59y55, Px60y56 } CellNode (60 @ 55) (20)Px60y56 { Px59y56, Px61y56, Px60y55, Px60y57 } CellNode (60 @ 56) (20)Px60y57 { Px60y58, Px61y57, Px59y57, Px60y56 } CellNode (60 @ 57) (20)Px60y58 { Px60y59, Px59y58, Px61y58, Px60y57 } CellNode (60 @ 58) (20)Px60y59 { Px60y58, Px60y60, Px61y59, Px59y59 } CellNode (60 @ 59) (20)Px60y6 { Px61y6, Px60y5, Px59y6, Px60y7 } CellNode (60 @ 6) (20)Px60y60 { Px59y60, Px60y59, Px60y61, Px61y60 } CellNode (60 @ 60) (20)Px60y61 { Px61y61, Px59y61, Px60y60, Px60y62 } CellNode (60 @ 61) (20)Px60y62 { Px60y63, Px61y62, Px59y62, Px60y61 } CellNode (60 @ 62) (20)Px60y63 { Px59y63, Px60y64, Px61y63, Px60y62 } CellNode (60 @ 63) (20)Px60y64 { Px61y64, Px59y64, Px60y63, Px60y65 } CellNode (60 @ 64) (20)Px60y65 { Px60y66, Px61y65, Px60y64, Px59y65 } CellNode (60 @ 65) (20)Px60y66 { Px60y67, Px61y66, Px60y65, Px59y66 } CellNode (60 @ 66) (20)Px60y67 { Px61y67, Px59y67, Px60y66 } CellNode (60 @ 67) (20)Px60y7 { Px59y7, Px60y8, Px60y6, Px61y7 } CellNode (60 @ 7) (20)Px60y8 { Px61y8, Px59y8, Px60y9, Px60y7 } CellNode (60 @ 8) (20)Px60y9 { Px60y8, Px61y9, Px60y10, Px59y9 } CellNode (60 @ 9) (20)Px61y1 { Px61y2, Px62y1, Px60y1 } CellNode (61 @ 1) (20)Px61y10 { Px61y9, Px61y11, Px62y10, Px60y10 } CellNode (61 @ 10) (20)Px61y11 { Px61y10, Px62y11, Px61y12, Px60y11 } CellNode (61 @ 11) (20)Px61y12 { Px60y12, Px61y11, Px62y12, Px61y13 } CellNode (61 @ 12) (20)Px61y13 { Px61y14, Px62y13, Px60y13, Px61y12 } CellNode (61 @ 13) (20)Px61y14 { Px62y14, Px61y15, Px61y13, Px60y14 } CellNode (61 @ 14) (20)Px61y15 { Px61y14, Px60y15, Px62y15, Px61y16 } CellNode (61 @ 15) (20)Px61y16 { Px61y17, Px61y15, Px60y16, Px62y16 } CellNode (61 @ 16) (20)Px61y17 { Px62y17, Px61y18, Px61y16, Px60y17 } CellNode (61 @ 17) (20)Px61y18 { Px60y18, Px61y19, Px62y18, Px61y17 } CellNode (61 @ 18) (20)Px61y19 { Px60y19, Px61y18, Px61y20, Px62y19 } CellNode (61 @ 19) (20)Px61y2 { Px62y2, Px60y2, Px61y3, Px61y1 } CellNode (61 @ 2) (20)Px61y20 { Px61y21, Px60y20, Px61y19, Px62y20 } CellNode (61 @ 20) (20)Px61y21 { Px61y22, Px60y21, Px62y21, Px61y20 } CellNode (61 @ 21) (20)Px61y22 { Px62y22, Px60y22, Px61y23, Px61y21 } CellNode (61 @ 22) (20)Px61y23 { Px60y23, Px61y22, Px61y24, Px62y23 } CellNode (61 @ 23) (20)Px61y24 { Px61y25, Px62y24, Px60y24, Px61y23 } CellNode (61 @ 24) (20)Px61y25 { Px62y25, Px60y25, Px61y26, Px61y24 } CellNode (61 @ 25) (20)Px61y26 { Px61y25, Px62y26, Px61y27, Px60y26 } CellNode (61 @ 26) (20)Px61y27 { Px61y28, Px60y27, Px61y26, Px62y27 } CellNode (61 @ 27) (20)Px61y28 { Px61y29, Px62y28, Px60y28, Px61y27 } CellNode (61 @ 28) (20)Px61y29 { Px61y30, Px62y29, Px60y29, Px61y28 } CellNode (61 @ 29) (20)Px61y3 { Px62y3, Px61y2, Px61y4, Px60y3 } CellNode (61 @ 3) (20)Px61y30 { Px61y29, Px61y31, Px62y30, Px60y30 } CellNode (61 @ 30) (20)Px61y31 { Px60y31, Px61y30, Px61y32, Px62y31 } CellNode (61 @ 31) (20)Px61y32 { Px62y32, Px61y31, Px60y32, Px61y33 } CellNode (61 @ 32) (20)Px61y33 { Px61y34, Px62y33, Px61y32, Px60y33 } CellNode (61 @ 33) (20)Px61y34 { Px61y33, Px61y35, Px62y34, Px60y34 } CellNode (61 @ 34) (20)Px61y35 { Px62y35, Px60y35, Px61y34, Px61y36 } CellNode (61 @ 35) (20)Px61y36 { Px61y37, Px62y36, Px61y35, Px60y36 } CellNode (61 @ 36) (20)Px61y37 { Px61y38, Px62y37, Px60y37, Px61y36 } CellNode (61 @ 37) (20)Px61y38 { Px60y38, Px61y37, Px62y38, Px61y39 } CellNode (61 @ 38) (20)Px61y39 { Px60y39, Px61y38, Px61y40, Px62y39 } CellNode (61 @ 39) (20)Px61y4 { Px60y4, Px61y5, Px62y4, Px61y3 } CellNode (61 @ 4) (20)Px61y40 { Px62y40, Px60y40, Px61y41, Px61y39 } CellNode (61 @ 40) (20)Px61y41 { Px61y42, Px62y41, Px60y41, Px61y40 } CellNode (61 @ 41) (20)Px61y42 { Px61y41, Px62y42, Px61y43, Px60y42 } CellNode (61 @ 42) (20)Px61y43 { Px60y43, Px61y44, Px61y42, Px62y43 } CellNode (61 @ 43) (20)Px61y44 { Px61y45, Px60y44, Px62y44, Px61y43 } CellNode (61 @ 44) (20)Px61y45 { Px61y46, Px60y45, Px62y45, Px61y44 } CellNode (61 @ 45) (20)Px61y46 { Px61y47, Px61y45, Px62y46, Px60y46 } CellNode (61 @ 46) (20)Px61y47 { Px62y47, Px60y47, Px61y48, Px61y46 } CellNode (61 @ 47) (20)Px61y48 { Px62y48, Px60y48, Px61y49, Px61y47 } CellNode (61 @ 48) (20)Px61y49 { Px61y48, Px61y50, Px62y49, Px60y49 } CellNode (61 @ 49) (20)Px61y5 { Px61y6, Px60y5, Px61y4, Px62y5 } CellNode (61 @ 5) (20)Px61y50 { Px61y49, Px61y51, Px62y50, Px60y50 } CellNode (61 @ 50) (20)Px61y51 { Px62y51, Px61y50, Px60y51, Px61y52 } CellNode (61 @ 51) (20)Px61y52 { Px61y53, Px62y52, Px61y51, Px60y52 } CellNode (61 @ 52) (20)Px61y53 { Px61y54, Px62y53, Px61y52, Px60y53 } CellNode (61 @ 53) (20)Px61y54 { Px61y53, Px60y54, Px61y55, Px62y54 } CellNode (61 @ 54) (20)Px61y55 { Px62y55, Px61y54, Px60y55, Px61y56 } CellNode (61 @ 55) (20)Px61y56 { Px61y57, Px62y56, Px61y55, Px60y56 } CellNode (61 @ 56) (20)Px61y57 { Px61y56, Px61y58, Px62y57, Px60y57 } CellNode (61 @ 57) (20)Px61y58 { Px62y58, Px60y58, Px61y57, Px61y59 } CellNode (61 @ 58) (20)Px61y59 { Px62y59, Px60y59, Px61y58, Px61y60 } CellNode (61 @ 59) (20)Px61y6 { Px62y6, Px61y5, Px60y6, Px61y7 } CellNode (61 @ 6) (20)Px61y60 { Px62y60, Px61y61, Px60y60, Px61y59 } CellNode (61 @ 60) (20)Px61y61 { Px62y61, Px60y61, Px61y62, Px61y60 } CellNode (61 @ 61) (20)Px61y62 { Px62y62, Px61y61, Px61y63, Px60y62 } CellNode (61 @ 62) (20)Px61y63 { Px61y64, Px60y63, Px62y63, Px61y62 } CellNode (61 @ 63) (20)Px61y64 { Px61y65, Px60y64, Px62y64, Px61y63 } CellNode (61 @ 64) (20)Px61y65 { Px61y64, Px62y65, Px60y65, Px61y66 } CellNode (61 @ 65) (20)Px61y66 { Px60y66, Px61y67, Px61y65, Px62y66 } CellNode (61 @ 66) (20)Px61y67 { Px62y67, Px61y66, Px60y67 } CellNode (61 @ 67) (20)Px61y7 { Px61y8, Px62y7, Px61y6, Px60y7 } CellNode (61 @ 7) (20)Px61y8 { Px60y8, Px61y9, Px61y7, Px62y8 } CellNode (61 @ 8) (20)Px61y9 { Px61y8, Px61y10, Px60y9, Px62y9 } CellNode (61 @ 9) (20)Px62y1 { Px61y1, Px62y2, Px63y1 } CellNode (62 @ 1) (20)Px62y10 { Px61y10, Px62y11, Px63y10, Px62y9 } CellNode (62 @ 10) (20)Px62y11 { Px63y11, Px61y11, Px62y10, Px62y12 } CellNode (62 @ 11) (20)Px62y12 { Px62y13, Px63y12, Px62y11, Px61y12 } CellNode (62 @ 12) (20)Px62y13 { Px62y14, Px63y13, Px62y12, Px61y13 } CellNode (62 @ 13) (20)Px62y14 { Px61y14, Px62y13, Px62y15, Px63y14 } CellNode (62 @ 14) (20)Px62y15 { Px63y15, Px62y14, Px61y15, Px62y16 } CellNode (62 @ 15) (20)Px62y16 { Px62y17, Px63y16, Px62y15, Px61y16 } CellNode (62 @ 16) (20)Px62y17 { Px62y16, Px62y18, Px63y17, Px61y17 } CellNode (62 @ 17) (20)Px62y18 { Px63y18, Px62y17, Px61y18, Px62y19 } CellNode (62 @ 18) (20)Px62y19 { Px63y19, Px61y19, Px62y18, Px62y20 } CellNode (62 @ 19) (20)Px62y2 { Px61y2, Px62y3, Px63y2, Px62y1 } CellNode (62 @ 2) (20)Px62y20 { Px63y20, Px62y21, Px61y20, Px62y19 } CellNode (62 @ 20) (20)Px62y21 { Px61y21, Px63y21, Px62y22, Px62y20 } CellNode (62 @ 21) (20)Px62y22 { Px61y22, Px62y21, Px63y22, Px62y23 } CellNode (62 @ 22) (20)Px62y23 { Px63y23, Px62y24, Px62y22, Px61y23 } CellNode (62 @ 23) (20)Px62y24 { Px62y25, Px63y24, Px61y24, Px62y23 } CellNode (62 @ 24) (20)Px62y25 { Px62y24, Px61y25, Px62y26, Px63y25 } CellNode (62 @ 25) (20)Px62y26 { Px63y26, Px62y25, Px61y26, Px62y27 } CellNode (62 @ 26) (20)Px62y27 { Px63y27, Px62y28, Px61y27, Px62y26 } CellNode (62 @ 27) (20)Px62y28 { Px61y28, Px63y28, Px62y29, Px62y27 } CellNode (62 @ 28) (20)Px62y29 { Px61y29, Px62y28, Px62y30, Px63y29 } CellNode (62 @ 29) (20)Px62y3 { Px63y3, Px62y4, Px61y3, Px62y2 } CellNode (62 @ 3) (20)Px62y30 { Px62y31, Px61y30, Px62y29, Px63y30 } CellNode (62 @ 30) (20)Px62y31 { Px63y31, Px62y32, Px61y31, Px62y30 } CellNode (62 @ 31) (20)Px62y32 { Px62y33, Px61y32, Px63y32, Px62y31 } CellNode (62 @ 32) (20)Px62y33 { Px61y33, Px62y32, Px62y34, Px63y33 } CellNode (62 @ 33) (20)Px62y34 { Px62y35, Px63y34, Px61y34, Px62y33 } CellNode (62 @ 34) (20)Px62y35 { Px63y35, Px61y35, Px62y36, Px62y34 } CellNode (62 @ 35) (20)Px62y36 { Px62y35, Px63y36, Px61y36, Px62y37 } CellNode (62 @ 36) (20)Px62y37 { Px61y37, Px62y36, Px62y38, Px63y37 } CellNode (62 @ 37) (20)Px62y38 { Px63y38, Px61y38, Px62y37, Px62y39 } CellNode (62 @ 38) (20)Px62y39 { Px62y40, Px63y39, Px62y38, Px61y39 } CellNode (62 @ 39) (20)Px62y4 { Px63y4, Px62y3, Px61y4, Px62y5 } CellNode (62 @ 4) (20)Px62y40 { Px62y41, Px63y40, Px61y40, Px62y39 } CellNode (62 @ 40) (20)Px62y41 { Px62y40, Px61y41, Px62y42, Px63y41 } CellNode (62 @ 41) (20)Px62y42 { Px62y43, Px61y42, Px62y41, Px63y42 } CellNode (62 @ 42) (20)Px62y43 { Px63y43, Px62y44, Px61y43, Px62y42 } CellNode (62 @ 43) (20)Px62y44 { Px61y44, Px63y44, Px62y45, Px62y43 } CellNode (62 @ 44) (20)Px62y45 { Px61y45, Px62y44, Px63y45, Px62y46 } CellNode (62 @ 45) (20)Px62y46 { Px63y46, Px62y47, Px61y46, Px62y45 } CellNode (62 @ 46) (20)Px62y47 { Px63y47, Px62y48, Px62y46, Px61y47 } CellNode (62 @ 47) (20)Px62y48 { Px62y47, Px61y48, Px63y48, Px62y49 } CellNode (62 @ 48) (20)Px62y49 { Px62y48, Px61y49, Px62y50, Px63y49 } CellNode (62 @ 49) (20)Px62y5 { Px62y6, Px61y5, Px62y4, Px63y5 } CellNode (62 @ 5) (20)Px62y50 { Px62y51, Px61y50, Px63y50, Px62y49 } CellNode (62 @ 50) (20)Px62y51 { Px62y52, Px63y51, Px61y51, Px62y50 } CellNode (62 @ 51) (20)Px62y52 { Px62y51, Px62y53, Px61y52, Px63y52 } CellNode (62 @ 52) (20)Px62y53 { Px61y53, Px62y54, Px62y52, Px63y53 } CellNode (62 @ 53) (20)Px62y54 { Px63y54, Px61y54, Px62y55, Px62y53 } CellNode (62 @ 54) (20)Px62y55 { Px63y55, Px61y55, Px62y56, Px62y54 } CellNode (62 @ 55) (20)Px62y56 { Px62y57, Px62y55, Px63y56, Px61y56 } CellNode (62 @ 56) (20)Px62y57 { Px63y57, Px62y58, Px61y57, Px62y56 } CellNode (62 @ 57) (20)Px62y58 { Px63y58, Px62y59, Px61y58, Px62y57 } CellNode (62 @ 58) (20)Px62y59 { Px62y58, Px62y60, Px63y59, Px61y59 } CellNode (62 @ 59) (20)Px62y6 { Px62y7, Px61y6, Px63y6, Px62y5 } CellNode (62 @ 6) (20)Px62y60 { Px62y59, Px62y61, Px63y60, Px61y60 } CellNode (62 @ 60) (20)Px62y61 { Px63y61, Px62y60, Px61y61, Px62y62 } CellNode (62 @ 61) (20)Px62y62 { Px62y63, Px63y62, Px62y61, Px61y62 } CellNode (62 @ 62) (20)Px62y63 { Px62y64, Px63y63, Px61y63, Px62y62 } CellNode (62 @ 63) (20)Px62y64 { Px61y64, Px62y63, Px62y65, Px63y64 } CellNode (62 @ 64) (20)Px62y65 { Px63y65, Px61y65, Px62y64, Px62y66 } CellNode (62 @ 65) (20)Px62y66 { Px62y67, Px63y66, Px62y65, Px61y66 } CellNode (62 @ 66) (20)Px62y67 { Px62y66, Px63y67, Px61y67 } CellNode (62 @ 67) (20)Px62y7 { Px63y7, Px62y6, Px62y8, Px61y7 } CellNode (62 @ 7) (20)Px62y8 { Px62y9, Px62y7, Px63y8, Px61y8 } CellNode (62 @ 8) (20)Px62y9 { Px61y9, Px62y10, Px63y9, Px62y8 } CellNode (62 @ 9) (20)Px63y1 { Px62y1, Px63y2, Px64y1 } CellNode (63 @ 1) (20)Px63y10 { Px64y10, Px62y10, Px63y11, Px63y9 } CellNode (63 @ 10) (20)Px63y11 { Px64y11, Px63y12, Px62y11, Px63y10 } CellNode (63 @ 11) (20)Px63y12 { Px63y11, Px64y12, Px62y12, Px63y13 } CellNode (63 @ 12) (20)Px63y13 { Px62y13, Px63y14, Px63y12, Px64y13 } CellNode (63 @ 13) (20)Px63y14 { Px64y14, Px62y14, Px63y15, Px63y13 } CellNode (63 @ 14) (20)Px63y15 { Px64y15, Px62y15, Px63y16, Px63y14 } CellNode (63 @ 15) (20)Px63y16 { Px63y17, Px63y15, Px64y16, Px62y16 } CellNode (63 @ 16) (20)Px63y17 { Px63y18, Px62y17, Px64y17, Px63y16 } CellNode (63 @ 17) (20)Px63y18 { Px63y19, Px62y18, Px64y18, Px63y17 } CellNode (63 @ 18) (20)Px63y19 { Px63y18, Px63y20, Px64y19, Px62y19 } CellNode (63 @ 19) (20)Px63y2 { Px63y3, Px64y2, Px63y1, Px62y2 } CellNode (63 @ 2) (20)Px63y20 { Px63y19, Px63y21, Px64y20, Px62y20 } CellNode (63 @ 20) (20)Px63y21 { Px64y21, Px63y20, Px62y21, Px63y22 } CellNode (63 @ 21) (20)Px63y22 { Px63y23, Px64y22, Px63y21, Px62y22 } CellNode (63 @ 22) (20)Px63y23 { Px63y24, Px64y23, Px63y22, Px62y23 } CellNode (63 @ 23) (20)Px63y24 { Px62y24, Px63y23, Px63y25, Px64y24 } CellNode (63 @ 24) (20)Px63y25 { Px64y25, Px63y24, Px62y25, Px63y26 } CellNode (63 @ 25) (20)Px63y26 { Px63y27, Px64y26, Px63y25, Px62y26 } CellNode (63 @ 26) (20)Px63y27 { Px63y26, Px63y28, Px64y27, Px62y27 } CellNode (63 @ 27) (20)Px63y28 { Px64y28, Px63y27, Px62y28, Px63y29 } CellNode (63 @ 28) (20)Px63y29 { Px64y29, Px63y28, Px62y29, Px63y30 } CellNode (63 @ 29) (20)Px63y3 { Px63y4, Px62y3, Px63y2, Px64y3 } CellNode (63 @ 3) (20)Px63y30 { Px63y31, Px64y30, Px62y30, Px63y29 } CellNode (63 @ 30) (20)Px63y31 { Px62y31, Px63y32, Px64y31, Px63y30 } CellNode (63 @ 31) (20)Px63y32 { Px63y31, Px62y32, Px63y33, Px64y32 } CellNode (63 @ 32) (20)Px63y33 { Px64y33, Px63y34, Px62y33, Px63y32 } CellNode (63 @ 33) (20)Px63y34 { Px63y35, Px64y34, Px63y33, Px62y34 } CellNode (63 @ 34) (20)Px63y35 { Px62y35, Px63y34, Px64y35, Px63y36 } CellNode (63 @ 35) (20)Px63y36 { Px63y37, Px63y35, Px62y36, Px64y36 } CellNode (63 @ 36) (20)Px63y37 { Px64y37, Px63y38, Px63y36, Px62y37 } CellNode (63 @ 37) (20)Px63y38 { Px63y39, Px62y38, Px64y38, Px63y37 } CellNode (63 @ 38) (20)Px63y39 { Px63y38, Px63y40, Px64y39, Px62y39 } CellNode (63 @ 39) (20)Px63y4 { Px64y4, Px62y4, Px63y5, Px63y3 } CellNode (63 @ 4) (20)Px63y40 { Px62y40, Px63y39, Px63y41, Px64y40 } CellNode (63 @ 40) (20)Px63y41 { Px64y41, Px62y41, Px63y40, Px63y42 } CellNode (63 @ 41) (20)Px63y42 { Px63y43, Px64y42, Px62y42, Px63y41 } CellNode (63 @ 42) (20)Px63y43 { Px63y42, Px63y44, Px64y43, Px62y43 } CellNode (63 @ 43) (20)Px63y44 { Px64y44, Px63y43, Px62y44, Px63y45 } CellNode (63 @ 44) (20)Px63y45 { Px63y46, Px64y45, Px63y44, Px62y45 } CellNode (63 @ 45) (20)Px63y46 { Px63y47, Px64y46, Px63y45, Px62y46 } CellNode (63 @ 46) (20)Px63y47 { Px62y47, Px63y46, Px63y48, Px64y47 } CellNode (63 @ 47) (20)Px63y48 { Px64y48, Px62y48, Px63y47, Px63y49 } CellNode (63 @ 48) (20)Px63y49 { Px63y50, Px64y49, Px63y48, Px62y49 } CellNode (63 @ 49) (20)Px63y5 { Px64y5, Px63y4, Px62y5, Px63y6 } CellNode (63 @ 5) (20)Px63y50 { Px64y50, Px63y51, Px62y50, Px63y49 } CellNode (63 @ 50) (20)Px63y51 { Px62y51, Px63y50, Px64y51, Px63y52 } CellNode (63 @ 51) (20)Px63y52 { Px64y52, Px62y52, Px63y51, Px63y53 } CellNode (63 @ 52) (20)Px63y53 { Px63y54, Px64y53, Px62y53, Px63y52 } CellNode (63 @ 53) (20)Px63y54 { Px63y53, Px64y54, Px63y55, Px62y54 } CellNode (63 @ 54) (20)Px63y55 { Px63y54, Px62y55, Px64y55, Px63y56 } CellNode (63 @ 55) (20)Px63y56 { Px63y57, Px64y56, Px63y55, Px62y56 } CellNode (63 @ 56) (20)Px63y57 { Px63y58, Px64y57, Px63y56, Px62y57 } CellNode (63 @ 57) (20)Px63y58 { Px63y57, Px62y58, Px64y58, Px63y59 } CellNode (63 @ 58) (20)Px63y59 { Px63y58, Px62y59, Px63y60, Px64y59 } CellNode (63 @ 59) (20)Px63y6 { Px63y7, Px62y6, Px64y6, Px63y5 } CellNode (63 @ 6) (20)Px63y60 { Px64y60, Px62y60, Px63y61, Px63y59 } CellNode (63 @ 60) (20)Px63y61 { Px64y61, Px62y61, Px63y62, Px63y60 } CellNode (63 @ 61) (20)Px63y62 { Px63y61, Px64y62, Px63y63, Px62y62 } CellNode (63 @ 62) (20)Px63y63 { Px64y63, Px62y63, Px63y62, Px63y64 } CellNode (63 @ 63) (20)Px63y64 { Px63y65, Px64y64, Px62y64, Px63y63 } CellNode (63 @ 64) (20)Px63y65 { Px64y65, Px62y65, Px63y66, Px63y64 } CellNode (63 @ 65) (20)Px63y66 { Px63y67, Px63y65, Px64y66, Px62y66 } CellNode (63 @ 66) (20)Px63y67 { Px62y67, Px64y67, Px63y66 } CellNode (63 @ 67) (20)Px63y7 { Px62y7, Px63y8, Px64y7, Px63y6 } CellNode (63 @ 7) (20)Px63y8 { Px63y7, Px64y8, Px63y9, Px62y8 } CellNode (63 @ 8) (20)Px63y9 { Px63y8, Px64y9, Px63y10, Px62y9 } CellNode (63 @ 9) (20)Px64y1 { Px65y1, Px63y1, Px64y2 } CellNode (64 @ 1) (20)Px64y10 { Px64y11, Px64y9, Px65y10, Px63y10 } CellNode (64 @ 10) (20)Px64y11 { Px64y10, Px63y11, Px64y12, Px65y11 } CellNode (64 @ 11) (20)Px64y12 { Px65y12, Px64y11, Px63y12, Px64y13 } CellNode (64 @ 12) (20)Px64y13 { Px64y14, Px65y13, Px64y12, Px63y13 } CellNode (64 @ 13) (20)Px64y14 { Px63y14, Px64y15, Px65y14, Px64y13 } CellNode (64 @ 14) (20)Px64y15 { Px65y15, Px63y15, Px64y14, Px64y16 } CellNode (64 @ 15) (20)Px64y16 { Px64y17, Px65y16, Px64y15, Px63y16 } CellNode (64 @ 16) (20)Px64y17 { Px64y18, Px65y17, Px64y16, Px63y17 } CellNode (64 @ 17) (20)Px64y18 { Px63y18, Px64y17, Px64y19, Px65y18 } CellNode (64 @ 18) (20)Px64y19 { Px65y19, Px63y19, Px64y18, Px64y20 } CellNode (64 @ 19) (20)Px64y2 { Px64y1, Px65y2, Px64y3, Px63y2 } CellNode (64 @ 2) (20)Px64y20 { Px65y20, Px63y20, Px64y21, Px64y19 } CellNode (64 @ 20) (20)Px64y21 { Px65y21, Px63y21, Px64y22, Px64y20 } CellNode (64 @ 21) (20)Px64y22 { Px64y21, Px65y22, Px63y22, Px64y23 } CellNode (64 @ 22) (20)Px64y23 { Px64y24, Px63y23, Px64y22, Px65y23 } CellNode (64 @ 23) (20)Px64y24 { Px64y25, Px65y24, Px63y24, Px64y23 } CellNode (64 @ 24) (20)Px64y25 { Px64y26, Px65y25, Px63y25, Px64y24 } CellNode (64 @ 25) (20)Px64y26 { Px63y26, Px64y25, Px65y26, Px64y27 } CellNode (64 @ 26) (20)Px64y27 { Px64y28, Px63y27, Px65y27, Px64y26 } CellNode (64 @ 27) (20)Px64y28 { Px65y28, Px63y28, Px64y29, Px64y27 } CellNode (64 @ 28) (20)Px64y29 { Px64y28, Px64y30, Px65y29, Px63y29 } CellNode (64 @ 29) (20)Px64y3 { Px63y3, Px64y2, Px65y3, Px64y4 } CellNode (64 @ 3) (20)Px64y30 { Px64y29, Px64y31, Px65y30, Px63y30 } CellNode (64 @ 30) (20)Px64y31 { Px65y31, Px63y31, Px64y30, Px64y32 } CellNode (64 @ 31) (20)Px64y32 { Px64y33, Px65y32, Px63y32, Px64y31 } CellNode (64 @ 32) (20)Px64y33 { Px64y34, Px65y33, Px63y33, Px64y32 } CellNode (64 @ 33) (20)Px64y34 { Px64y33, Px63y34, Px64y35, Px65y34 } CellNode (64 @ 34) (20)Px64y35 { Px65y35, Px63y35, Px64y34, Px64y36 } CellNode (64 @ 35) (20)Px64y36 { Px64y37, Px65y36, Px63y36, Px64y35 } CellNode (64 @ 36) (20)Px64y37 { Px63y37, Px64y38, Px65y37, Px64y36 } CellNode (64 @ 37) (20)Px64y38 { Px65y38, Px64y37, Px63y38, Px64y39 } CellNode (64 @ 38) (20)Px64y39 { Px65y39, Px63y39, Px64y38, Px64y40 } CellNode (64 @ 39) (20)Px64y4 { Px64y5, Px63y4, Px65y4, Px64y3 } CellNode (64 @ 4) (20)Px64y40 { Px65y40, Px64y41, Px63y40, Px64y39 } CellNode (64 @ 40) (20)Px64y41 { Px64y42, Px63y41, Px65y41, Px64y40 } CellNode (64 @ 41) (20)Px64y42 { Px64y43, Px64y41, Px65y42, Px63y42 } CellNode (64 @ 42) (20)Px64y43 { Px65y43, Px63y43, Px64y44, Px64y42 } CellNode (64 @ 43) (20)Px64y44 { Px65y44, Px63y44, Px64y45, Px64y43 } CellNode (64 @ 44) (20)Px64y45 { Px64y44, Px65y45, Px63y45, Px64y46 } CellNode (64 @ 45) (20)Px64y46 { Px63y46, Px65y46, Px64y45, Px64y47 } CellNode (64 @ 46) (20)Px64y47 { Px64y48, Px65y47, Px63y47, Px64y46 } CellNode (64 @ 47) (20)Px64y48 { Px64y49, Px63y48, Px65y48, Px64y47 } CellNode (64 @ 48) (20)Px64y49 { Px64y48, Px64y50, Px65y49, Px63y49 } CellNode (64 @ 49) (20)Px64y5 { Px64y4, Px64y6, Px63y5, Px65y5 } CellNode (64 @ 5) (20)Px64y50 { Px63y50, Px64y49, Px64y51, Px65y50 } CellNode (64 @ 50) (20)Px64y51 { Px65y51, Px64y50, Px63y51, Px64y52 } CellNode (64 @ 51) (20)Px64y52 { Px64y53, Px65y52, Px64y51, Px63y52 } CellNode (64 @ 52) (20)Px64y53 { Px64y52, Px64y54, Px65y53, Px63y53 } CellNode (64 @ 53) (20)Px64y54 { Px65y54, Px63y54, Px64y53, Px64y55 } CellNode (64 @ 54) (20)Px64y55 { Px64y56, Px65y55, Px64y54, Px63y55 } CellNode (64 @ 55) (20)Px64y56 { Px64y57, Px65y56, Px64y55, Px63y56 } CellNode (64 @ 56) (20)Px64y57 { Px63y57, Px64y56, Px64y58, Px65y57 } CellNode (64 @ 57) (20)Px64y58 { Px65y58, Px63y58, Px64y57, Px64y59 } CellNode (64 @ 58) (20)Px64y59 { Px64y60, Px65y59, Px64y58, Px63y59 } CellNode (64 @ 59) (20)Px64y6 { Px64y5, Px65y6, Px63y6, Px64y7 } CellNode (64 @ 6) (20)Px64y60 { Px64y61, Px65y60, Px63y60, Px64y59 } CellNode (64 @ 60) (20)Px64y61 { Px63y61, Px64y60, Px64y62, Px65y61 } CellNode (64 @ 61) (20)Px64y62 { Px64y63, Px64y61, Px63y62, Px65y62 } CellNode (64 @ 62) (20)Px64y63 { Px64y64, Px65y63, Px64y62, Px63y63 } CellNode (64 @ 63) (20)Px64y64 { Px64y63, Px65y64, Px64y65, Px63y64 } CellNode (64 @ 64) (20)Px64y65 { Px63y65, Px64y64, Px65y65, Px64y66 } CellNode (64 @ 65) (20)Px64y66 { Px64y67, Px65y66, Px64y65, Px63y66 } CellNode (64 @ 66) (20)Px64y67 { Px64y66, Px65y67, Px63y67 } CellNode (64 @ 67) (20)Px64y7 { Px63y7, Px64y8, Px64y6, Px65y7 } CellNode (64 @ 7) (20)Px64y8 { Px63y8, Px64y9, Px64y7, Px65y8 } CellNode (64 @ 8) (20)Px64y9 { Px65y9, Px64y8, Px64y10, Px63y9 } CellNode (64 @ 9) (20)Px65y1 { Px65y2, Px66y1, Px64y1 } CellNode (65 @ 1) (20)Px65y10 { Px65y9, Px65y11, Px64y10, Px66y10 } CellNode (65 @ 10) (20)Px65y11 { Px65y12, Px66y11, Px64y11, Px65y10 } CellNode (65 @ 11) (20)Px65y12 { Px66y12, Px64y12, Px65y13, Px65y11 } CellNode (65 @ 12) (20)Px65y13 { Px66y13, Px65y12, Px65y14, Px64y13 } CellNode (65 @ 13) (20)Px65y14 { Px66y14, Px65y15, Px64y14, Px65y13 } CellNode (65 @ 14) (20)Px65y15 { Px66y15, Px64y15, Px65y16, Px65y14 } CellNode (65 @ 15) (20)Px65y16 { Px65y15, Px66y16, Px64y16, Px65y17 } CellNode (65 @ 16) (20)Px65y17 { Px66y17, Px64y17, Px65y16, Px65y18 } CellNode (65 @ 17) (20)Px65y18 { Px65y19, Px66y18, Px64y18, Px65y17 } CellNode (65 @ 18) (20)Px65y19 { Px65y20, Px66y19, Px64y19, Px65y18 } CellNode (65 @ 19) (20)Px65y2 { Px65y1, Px66y2, Px64y2, Px65y3 } CellNode (65 @ 2) (20)Px65y20 { Px65y19, Px65y21, Px66y20, Px64y20 } CellNode (65 @ 20) (20)Px65y21 { Px65y20, Px64y21, Px65y22, Px66y21 } CellNode (65 @ 21) (20)Px65y22 { Px66y22, Px65y21, Px64y22, Px65y23 } CellNode (65 @ 22) (20)Px65y23 { Px65y24, Px66y23, Px65y22, Px64y23 } CellNode (65 @ 23) (20)Px65y24 { Px64y24, Px65y25, Px66y24, Px65y23 } CellNode (65 @ 24) (20)Px65y25 { Px66y25, Px65y24, Px64y25, Px65y26 } CellNode (65 @ 25) (20)Px65y26 { Px65y27, Px66y26, Px64y26, Px65y25 } CellNode (65 @ 26) (20)Px65y27 { Px65y28, Px66y27, Px65y26, Px64y27 } CellNode (65 @ 27) (20)Px65y28 { Px64y28, Px65y27, Px65y29, Px66y28 } CellNode (65 @ 28) (20)Px65y29 { Px66y29, Px65y28, Px64y29, Px65y30 } CellNode (65 @ 29) (20)Px65y3 { Px66y3, Px65y2, Px64y3, Px65y4 } CellNode (65 @ 3) (20)Px65y30 { Px65y31, Px64y30, Px66y30, Px65y29 } CellNode (65 @ 30) (20)Px65y31 { Px65y32, Px64y31, Px66y31, Px65y30 } CellNode (65 @ 31) (20)Px65y32 { Px65y31, Px65y33, Px66y32, Px64y32 } CellNode (65 @ 32) (20)Px65y33 { Px64y33, Px66y33, Px65y32, Px65y34 } CellNode (65 @ 33) (20)Px65y34 { Px66y34, Px64y34, Px65y35, Px65y33 } CellNode (65 @ 34) (20)Px65y35 { Px66y35, Px64y35, Px65y36, Px65y34 } CellNode (65 @ 35) (20)Px65y36 { Px65y37, Px65y35, Px66y36, Px64y36 } CellNode (65 @ 36) (20)Px65y37 { Px66y37, Px64y37, Px65y38, Px65y36 } CellNode (65 @ 37) (20)Px65y38 { Px65y39, Px64y38, Px66y38, Px65y37 } CellNode (65 @ 38) (20)Px65y39 { Px65y38, Px65y40, Px66y39, Px64y39 } CellNode (65 @ 39) (20)Px65y4 { Px64y4, Px66y4, Px65y3, Px65y5 } CellNode (65 @ 4) (20)Px65y40 { Px65y39, Px65y41, Px66y40, Px64y40 } CellNode (65 @ 40) (20)Px65y41 { Px66y41, Px65y40, Px64y41, Px65y42 } CellNode (65 @ 41) (20)Px65y42 { Px65y43, Px66y42, Px64y42, Px65y41 } CellNode (65 @ 42) (20)Px65y43 { Px65y44, Px66y43, Px65y42, Px64y43 } CellNode (65 @ 43) (20)Px65y44 { Px65y43, Px64y44, Px65y45, Px66y44 } CellNode (65 @ 44) (20)Px65y45 { Px66y45, Px65y44, Px64y45, Px65y46 } CellNode (65 @ 45) (20)Px65y46 { Px65y47, Px66y46, Px65y45, Px64y46 } CellNode (65 @ 46) (20)Px65y47 { Px65y46, Px65y48, Px66y47, Px64y47 } CellNode (65 @ 47) (20)Px65y48 { Px66y48, Px64y48, Px65y47, Px65y49 } CellNode (65 @ 48) (20)Px65y49 { Px66y49, Px64y49, Px65y48, Px65y50 } CellNode (65 @ 49) (20)Px65y5 { Px64y5, Px65y6, Px65y4, Px66y5 } CellNode (65 @ 5) (20)Px65y50 { Px65y51, Px64y50, Px66y50, Px65y49 } CellNode (65 @ 50) (20)Px65y51 { Px66y51, Px64y51, Px65y52, Px65y50 } CellNode (65 @ 51) (20)Px65y52 { Px66y52, Px65y51, Px65y53, Px64y52 } CellNode (65 @ 52) (20)Px65y53 { Px65y54, Px64y53, Px66y53, Px65y52 } CellNode (65 @ 53) (20)Px65y54 { Px65y55, Px64y54, Px66y54, Px65y53 } CellNode (65 @ 54) (20)Px65y55 { Px65y54, Px65y56, Px64y55, Px66y55 } CellNode (65 @ 55) (20)Px65y56 { Px64y56, Px65y57, Px65y55, Px66y56 } CellNode (65 @ 56) (20)Px65y57 { Px66y57, Px64y57, Px65y58, Px65y56 } CellNode (65 @ 57) (20)Px65y58 { Px65y59, Px64y58, Px66y58, Px65y57 } CellNode (65 @ 58) (20)Px65y59 { Px65y58, Px65y60, Px66y59, Px64y59 } CellNode (65 @ 59) (20)Px65y6 { Px66y6, Px64y6, Px65y7, Px65y5 } CellNode (65 @ 6) (20)Px65y60 { Px64y60, Px65y59, Px65y61, Px66y60 } CellNode (65 @ 60) (20)Px65y61 { Px66y61, Px64y61, Px65y60, Px65y62 } CellNode (65 @ 61) (20)Px65y62 { Px65y63, Px66y62, Px64y62, Px65y61 } CellNode (65 @ 62) (20)Px65y63 { Px64y63, Px65y64, Px66y63, Px65y62 } CellNode (65 @ 63) (20)Px65y64 { Px66y64, Px64y64, Px65y63, Px65y65 } CellNode (65 @ 64) (20)Px65y65 { Px65y66, Px66y65, Px64y65, Px65y64 } CellNode (65 @ 65) (20)Px65y66 { Px65y67, Px66y66, Px65y65, Px64y66 } CellNode (65 @ 66) (20)Px65y67 { Px65y66, Px66y67, Px64y67 } CellNode (65 @ 67) (20)Px65y7 { Px65y6, Px66y7, Px64y7, Px65y8 } CellNode (65 @ 7) (20)Px65y8 { Px65y9, Px64y8, Px65y7, Px66y8 } CellNode (65 @ 8) (20)Px65y9 { Px66y9, Px64y9, Px65y10, Px65y8 } CellNode (65 @ 9) (20)Px66y1 { Px65y1, Px66y2, Px67y1 } CellNode (66 @ 1) (20)Px66y10 { Px66y9, Px67y10, Px66y11, Px65y10 } CellNode (66 @ 10) (20)Px66y11 { Px65y11, Px66y12, Px67y11, Px66y10 } CellNode (66 @ 11) (20)Px66y12 { Px66y11, Px65y12, Px66y13, Px67y12 } CellNode (66 @ 12) (20)Px66y13 { Px66y14, Px67y13, Px66y12, Px65y13 } CellNode (66 @ 13) (20)Px66y14 { Px66y15, Px67y14, Px65y14, Px66y13 } CellNode (66 @ 14) (20)Px66y15 { Px66y14, Px65y15, Px67y15, Px66y16 } CellNode (66 @ 15) (20)Px66y16 { Px66y17, Px66y15, Px65y16, Px67y16 } CellNode (66 @ 16) (20)Px66y17 { Px67y17, Px66y18, Px66y16, Px65y17 } CellNode (66 @ 17) (20)Px66y18 { Px66y17, Px67y18, Px66y19, Px65y18 } CellNode (66 @ 18) (20)Px66y19 { Px65y19, Px66y18, Px66y20, Px67y19 } CellNode (66 @ 19) (20)Px66y2 { Px65y2, Px66y3, Px66y1, Px67y2 } CellNode (66 @ 2) (20)Px66y20 { Px65y20, Px67y20, Px66y19, Px66y21 } CellNode (66 @ 20) (20)Px66y21 { Px67y21, Px65y21, Px66y22, Px66y20 } CellNode (66 @ 21) (20)Px66y22 { Px66y23, Px67y22, Px65y22, Px66y21 } CellNode (66 @ 22) (20)Px66y23 { Px66y24, Px66y22, Px67y23, Px65y23 } CellNode (66 @ 23) (20)Px66y24 { Px67y24, Px65y24, Px66y25, Px66y23 } CellNode (66 @ 24) (20)Px66y25 { Px66y26, Px67y25, Px65y25, Px66y24 } CellNode (66 @ 25) (20)Px66y26 { Px66y25, Px67y26, Px65y26, Px66y27 } CellNode (66 @ 26) (20)Px66y27 { Px67y27, Px65y27, Px66y26, Px66y28 } CellNode (66 @ 27) (20)Px66y28 { Px67y28, Px65y28, Px66y29, Px66y27 } CellNode (66 @ 28) (20)Px66y29 { Px66y30, Px67y29, Px65y29, Px66y28 } CellNode (66 @ 29) (20)Px66y3 { Px66y2, Px67y3, Px66y4, Px65y3 } CellNode (66 @ 3) (20)Px66y30 { Px66y29, Px66y31, Px67y30, Px65y30 } CellNode (66 @ 30) (20)Px66y31 { Px65y31, Px66y30, Px66y32, Px67y31 } CellNode (66 @ 31) (20)Px66y32 { Px67y32, Px65y32, Px66y31, Px66y33 } CellNode (66 @ 32) (20)Px66y33 { Px66y34, Px67y33, Px65y33, Px66y32 } CellNode (66 @ 33) (20)Px66y34 { Px66y33, Px66y35, Px67y34, Px65y34 } CellNode (66 @ 34) (20)Px66y35 { Px67y35, Px65y35, Px66y34, Px66y36 } CellNode (66 @ 35) (20)Px66y36 { Px66y37, Px67y36, Px66y35, Px65y36 } CellNode (66 @ 36) (20)Px66y37 { Px66y38, Px67y37, Px66y36, Px65y37 } CellNode (66 @ 37) (20)Px66y38 { Px66y37, Px65y38, Px66y39, Px67y38 } CellNode (66 @ 38) (20)Px66y39 { Px67y39, Px65y39, Px66y38, Px66y40 } CellNode (66 @ 39) (20)Px66y4 { Px67y4, Px66y3, Px65y4, Px66y5 } CellNode (66 @ 4) (20)Px66y40 { Px66y41, Px65y40, Px67y40, Px66y39 } CellNode (66 @ 40) (20)Px66y41 { Px66y42, Px67y41, Px65y41, Px66y40 } CellNode (66 @ 41) (20)Px66y42 { Px66y41, Px66y43, Px65y42, Px67y42 } CellNode (66 @ 42) (20)Px66y43 { Px65y43, Px66y44, Px66y42, Px67y43 } CellNode (66 @ 43) (20)Px66y44 { Px66y45, Px67y44, Px65y44, Px66y43 } CellNode (66 @ 44) (20)Px66y45 { Px67y45, Px65y45, Px66y46, Px66y44 } CellNode (66 @ 45) (20)Px66y46 { Px67y46, Px66y45, Px66y47, Px65y46 } CellNode (66 @ 46) (20)Px66y47 { Px66y48, Px67y47, Px65y47, Px66y46 } CellNode (66 @ 47) (20)Px66y48 { Px66y49, Px65y48, Px67y48, Px66y47 } CellNode (66 @ 48) (20)Px66y49 { Px66y48, Px66y50, Px67y49, Px65y49 } CellNode (66 @ 49) (20)Px66y5 { Px66y6, Px67y5, Px66y4, Px65y5 } CellNode (66 @ 5) (20)Px66y50 { Px66y49, Px66y51, Px67y50, Px65y50 } CellNode (66 @ 50) (20)Px66y51 { Px67y51, Px65y51, Px66y50, Px66y52 } CellNode (66 @ 51) (20)Px66y52 { Px66y53, Px67y52, Px66y51, Px65y52 } CellNode (66 @ 52) (20)Px66y53 { Px66y54, Px67y53, Px66y52, Px65y53 } CellNode (66 @ 53) (20)Px66y54 { Px65y54, Px66y53, Px66y55, Px67y54 } CellNode (66 @ 54) (20)Px66y55 { Px67y55, Px65y55, Px66y54, Px66y56 } CellNode (66 @ 55) (20)Px66y56 { Px66y57, Px67y56, Px65y56, Px66y55 } CellNode (66 @ 56) (20)Px66y57 { Px65y57, Px66y58, Px67y57, Px66y56 } CellNode (66 @ 57) (20)Px66y58 { Px67y58, Px66y57, Px65y58, Px66y59 } CellNode (66 @ 58) (20)Px66y59 { Px67y59, Px65y59, Px66y58, Px66y60 } CellNode (66 @ 59) (20)Px66y6 { Px66y5, Px65y6, Px66y7, Px67y6 } CellNode (66 @ 6) (20)Px66y60 { Px66y61, Px67y60, Px65y60, Px66y59 } CellNode (66 @ 60) (20)Px66y61 { Px67y61, Px66y62, Px65y61, Px66y60 } CellNode (66 @ 61) (20)Px66y62 { Px66y63, Px66y61, Px67y62, Px65y62 } CellNode (66 @ 62) (20)Px66y63 { Px67y63, Px66y64, Px65y63, Px66y62 } CellNode (66 @ 63) (20)Px66y64 { Px67y64, Px65y64, Px66y65, Px66y63 } CellNode (66 @ 64) (20)Px66y65 { Px66y64, Px66y66, Px65y65, Px67y65 } CellNode (66 @ 65) (20)Px66y66 { Px66y67, Px65y66, Px66y65, Px67y66 } CellNode (66 @ 66) (20)Px66y67 { Px65y67, Px66y66, Px67y67 } CellNode (66 @ 67) (20)Px66y7 { Px66y6, Px67y7, Px65y7, Px66y8 } CellNode (66 @ 7) (20)Px66y8 { Px66y9, Px66y7, Px67y8, Px65y8 } CellNode (66 @ 8) (20)Px66y9 { Px65y9, Px66y8, Px67y9, Px66y10 } CellNode (66 @ 9) (20)Px67y1 { Px66y1, Px67y2, Px68y1 } CellNode (67 @ 1) (20)Px67y10 { Px68y10, Px67y11, Px67y9, Px66y10 } CellNode (67 @ 10) (20)Px67y11 { Px68y11, Px67y10, Px66y11, Px67y12 } CellNode (67 @ 11) (20)Px67y12 { Px67y13, Px68y12, Px66y12, Px67y11 } CellNode (67 @ 12) (20)Px67y13 { Px67y14, Px68y13, Px66y13, Px67y12 } CellNode (67 @ 13) (20)Px67y14 { Px66y14, Px67y13, Px67y15, Px68y14 } CellNode (67 @ 14) (20)Px67y15 { Px68y15, Px66y15, Px67y14, Px67y16 } CellNode (67 @ 15) (20)Px67y16 { Px67y17, Px68y16, Px67y15, Px66y16 } CellNode (67 @ 16) (20)Px67y17 { Px66y17, Px67y18, Px68y17, Px67y16 } CellNode (67 @ 17) (20)Px67y18 { Px68y18, Px66y18, Px67y17, Px67y19 } CellNode (67 @ 18) (20)Px67y19 { Px68y19, Px67y18, Px66y19, Px67y20 } CellNode (67 @ 19) (20)Px67y2 { Px66y2, Px67y3, Px67y1, Px68y2 } CellNode (67 @ 2) (20)Px67y20 { Px68y20, Px67y21, Px66y20, Px67y19 } CellNode (67 @ 20) (20)Px67y21 { Px67y20, Px67y22, Px68y21, Px66y21 } CellNode (67 @ 21) (20)Px67y22 { Px67y21, Px66y22, Px68y22, Px67y23 } CellNode (67 @ 22) (20)Px67y23 { Px68y23, Px67y24, Px66y23, Px67y22 } CellNode (67 @ 23) (20)Px67y24 { Px68y24, Px67y25, Px66y24, Px67y23 } CellNode (67 @ 24) (20)Px67y25 { Px66y25, Px67y24, Px67y26, Px68y25 } CellNode (67 @ 25) (20)Px67y26 { Px68y26, Px66y26, Px67y25, Px67y27 } CellNode (67 @ 26) (20)Px67y27 { Px67y28, Px68y27, Px67y26, Px66y27 } CellNode (67 @ 27) (20)Px67y28 { Px67y27, Px68y28, Px67y29, Px66y28 } CellNode (67 @ 28) (20)Px67y29 { Px67y28, Px66y29, Px67y30, Px68y29 } CellNode (67 @ 29) (20)Px67y3 { Px67y4, Px66y3, Px68y3, Px67y2 } CellNode (67 @ 3) (20)Px67y30 { Px67y31, Px66y30, Px67y29, Px68y30 } CellNode (67 @ 30) (20)Px67y31 { Px68y31, Px67y32, Px66y31, Px67y30 } CellNode (67 @ 31) (20)Px67y32 { Px67y33, Px66y32, Px68y32, Px67y31 } CellNode (67 @ 32) (20)Px67y33 { Px66y33, Px67y32, Px68y33, Px67y34 } CellNode (67 @ 33) (20)Px67y34 { Px68y34, Px66y34, Px67y35, Px67y33 } CellNode (67 @ 34) (20)Px67y35 { Px67y36, Px66y35, Px68y35, Px67y34 } CellNode (67 @ 35) (20)Px67y36 { Px67y35, Px68y36, Px66y36, Px67y37 } CellNode (67 @ 36) (20)Px67y37 { Px66y37, Px67y38, Px67y36, Px68y37 } CellNode (67 @ 37) (20)Px67y38 { Px67y39, Px68y38, Px66y38, Px67y37 } CellNode (67 @ 38) (20)Px67y39 { Px67y40, Px68y39, Px66y39, Px67y38 } CellNode (67 @ 39) (20)Px67y4 { Px67y3, Px68y4, Px66y4, Px67y5 } CellNode (67 @ 4) (20)Px67y40 { Px67y39, Px67y41, Px68y40, Px66y40 } CellNode (67 @ 40) (20)Px67y41 { Px66y41, Px67y40, Px67y42, Px68y41 } CellNode (67 @ 41) (20)Px67y42 { Px68y42, Px66y42, Px67y41, Px67y43 } CellNode (67 @ 42) (20)Px67y43 { Px67y44, Px68y43, Px66y43, Px67y42 } CellNode (67 @ 43) (20)Px67y44 { Px66y44, Px67y45, Px68y44, Px67y43 } CellNode (67 @ 44) (20)Px67y45 { Px68y45, Px66y45, Px67y44, Px67y46 } CellNode (67 @ 45) (20)Px67y46 { Px67y47, Px68y46, Px67y45, Px66y46 } CellNode (67 @ 46) (20)Px67y47 { Px67y48, Px68y47, Px67y46, Px66y47 } CellNode (67 @ 47) (20)Px67y48 { Px66y48, Px67y47, Px68y48, Px67y49 } CellNode (67 @ 48) (20)Px67y49 { Px66y49, Px67y48, Px67y50, Px68y49 } CellNode (67 @ 49) (20)Px67y5 { Px66y5, Px68y5, Px67y4, Px67y6 } CellNode (67 @ 5) (20)Px67y50 { Px67y51, Px66y50, Px68y50, Px67y49 } CellNode (67 @ 50) (20)Px67y51 { Px68y51, Px66y51, Px67y52, Px67y50 } CellNode (67 @ 51) (20)Px67y52 { Px67y51, Px68y52, Px67y53, Px66y52 } CellNode (67 @ 52) (20)Px67y53 { Px68y53, Px66y53, Px67y52, Px67y54 } CellNode (67 @ 53) (20)Px67y54 { Px68y54, Px66y54, Px67y55, Px67y53 } CellNode (67 @ 54) (20)Px67y55 { Px67y56, Px68y55, Px66y55, Px67y54 } CellNode (67 @ 55) (20)Px67y56 { Px68y56, Px67y55, Px67y57, Px66y56 } CellNode (67 @ 56) (20)Px67y57 { Px67y58, Px66y57, Px68y57, Px67y56 } CellNode (67 @ 57) (20)Px67y58 { Px68y58, Px67y59, Px66y58, Px67y57 } CellNode (67 @ 58) (20)Px67y59 { Px67y58, Px67y60, Px68y59, Px66y59 } CellNode (67 @ 59) (20)Px67y6 { Px66y6, Px67y7, Px68y6, Px67y5 } CellNode (67 @ 6) (20)Px67y60 { Px67y59, Px67y61, Px68y60, Px66y60 } CellNode (67 @ 60) (20)Px67y61 { Px68y61, Px67y60, Px66y61, Px67y62 } CellNode (67 @ 61) (20)Px67y62 { Px67y63, Px68y62, Px67y61, Px66y62 } CellNode (67 @ 62) (20)Px67y63 { Px67y64, Px68y63, Px67y62, Px66y63 } CellNode (67 @ 63) (20)Px67y64 { Px67y63, Px66y64, Px67y65, Px68y64 } CellNode (67 @ 64) (20)Px67y65 { Px68y65, Px67y64, Px66y65, Px67y66 } CellNode (67 @ 65) (20)Px67y66 { Px67y67, Px68y66, Px66y66, Px67y65 } CellNode (67 @ 66) (20)Px67y67 { Px66y67, Px68y67, Px67y66 } CellNode (67 @ 67) (20)Px67y7 { Px67y6, Px66y7, Px67y8, Px68y7 } CellNode (67 @ 7) (20)Px67y8 { Px67y7, Px68y8, Px67y9, Px66y8 } CellNode (67 @ 8) (20)Px67y9 { Px66y9, Px67y10, Px67y8, Px68y9 } CellNode (67 @ 9) (20)Px68y1 { Px67y1, Px68y2, Px69y1 } CellNode (68 @ 1) (20)Px68y10 { Px69y10, Px67y10, Px68y11, Px68y9 } CellNode (68 @ 10) (20)Px68y11 { Px69y11, Px68y12, Px67y11, Px68y10 } CellNode (68 @ 11) (20)Px68y12 { Px68y11, Px68y13, Px69y12, Px67y12 } CellNode (68 @ 12) (20)Px68y13 { Px68y14, Px67y13, Px68y12, Px69y13 } CellNode (68 @ 13) (20)Px68y14 { Px68y15, Px67y14, Px69y14, Px68y13 } CellNode (68 @ 14) (20)Px68y15 { Px68y16, Px67y15, Px69y15, Px68y14 } CellNode (68 @ 15) (20)Px68y16 { Px67y16, Px68y15, Px69y16, Px68y17 } CellNode (68 @ 16) (20)Px68y17 { Px68y18, Px67y17, Px69y17, Px68y16 } CellNode (68 @ 17) (20)Px68y18 { Px69y18, Px67y18, Px68y19, Px68y17 } CellNode (68 @ 18) (20)Px68y19 { Px68y18, Px68y20, Px69y19, Px67y19 } CellNode (68 @ 19) (20)Px68y2 { Px69y2, Px68y1, Px68y3, Px67y2 } CellNode (68 @ 2) (20)Px68y20 { Px68y19, Px68y21, Px69y20, Px67y20 } CellNode (68 @ 20) (20)Px68y21 { Px69y21, Px68y20, Px67y21, Px68y22 } CellNode (68 @ 21) (20)Px68y22 { Px68y23, Px69y22, Px67y22, Px68y21 } CellNode (68 @ 22) (20)Px68y23 { Px68y24, Px69y23, Px67y23, Px68y22 } CellNode (68 @ 23) (20)Px68y24 { Px68y23, Px67y24, Px68y25, Px69y24 } CellNode (68 @ 24) (20)Px68y25 { Px69y25, Px68y24, Px67y25, Px68y26 } CellNode (68 @ 25) (20)Px68y26 { Px68y27, Px69y26, Px67y26, Px68y25 } CellNode (68 @ 26) (20)Px68y27 { Px68y26, Px68y28, Px69y27, Px67y27 } CellNode (68 @ 27) (20)Px68y28 { Px69y28, Px67y28, Px68y27, Px68y29 } CellNode (68 @ 28) (20)Px68y29 { Px69y29, Px68y28, Px67y29, Px68y30 } CellNode (68 @ 29) (20)Px68y3 { Px67y3, Px68y4, Px68y2, Px69y3 } CellNode (68 @ 3) (20)Px68y30 { Px69y30, Px68y31, Px67y30, Px68y29 } CellNode (68 @ 30) (20)Px68y31 { Px67y31, Px68y32, Px69y31, Px68y30 } CellNode (68 @ 31) (20)Px68y32 { Px68y31, Px67y32, Px68y33, Px69y32 } CellNode (68 @ 32) (20)Px68y33 { Px69y33, Px68y34, Px67y33, Px68y32 } CellNode (68 @ 33) (20)Px68y34 { Px68y35, Px69y34, Px68y33, Px67y34 } CellNode (68 @ 34) (20)Px68y35 { Px67y35, Px68y34, Px69y35, Px68y36 } CellNode (68 @ 35) (20)Px68y36 { Px69y36, Px67y36, Px68y35, Px68y37 } CellNode (68 @ 36) (20)Px68y37 { Px68y38, Px69y37, Px68y36, Px67y37 } CellNode (68 @ 37) (20)Px68y38 { Px67y38, Px69y38, Px68y39, Px68y37 } CellNode (68 @ 38) (20)Px68y39 { Px68y38, Px67y39, Px68y40, Px69y39 } CellNode (68 @ 39) (20)Px68y4 { Px68y5, Px67y4, Px69y4, Px68y3 } CellNode (68 @ 4) (20)Px68y40 { Px69y40, Px67y40, Px68y39, Px68y41 } CellNode (68 @ 40) (20)Px68y41 { Px69y41, Px68y42, Px67y41, Px68y40 } CellNode (68 @ 41) (20)Px68y42 { Px68y43, Px67y42, Px69y42, Px68y41 } CellNode (68 @ 42) (20)Px68y43 { Px68y44, Px68y42, Px69y43, Px67y43 } CellNode (68 @ 43) (20)Px68y44 { Px69y44, Px67y44, Px68y45, Px68y43 } CellNode (68 @ 44) (20)Px68y45 { Px68y46, Px67y45, Px69y45, Px68y44 } CellNode (68 @ 45) (20)Px68y46 { Px68y45, Px68y47, Px69y46, Px67y46 } CellNode (68 @ 46) (20)Px68y47 { Px67y47, Px68y46, Px68y48, Px69y47 } CellNode (68 @ 47) (20)Px68y48 { Px69y48, Px68y47, Px67y48, Px68y49 } CellNode (68 @ 48) (20)Px68y49 { Px68y50, Px69y49, Px68y48, Px67y49 } CellNode (68 @ 49) (20)Px68y5 { Px69y5, Px68y4, Px68y6, Px67y5 } CellNode (68 @ 5) (20)Px68y50 { Px68y51, Px69y50, Px67y50, Px68y49 } CellNode (68 @ 50) (20)Px68y51 { Px67y51, Px68y50, Px68y52, Px69y51 } CellNode (68 @ 51) (20)Px68y52 { Px68y53, Px68y51, Px67y52, Px69y52 } CellNode (68 @ 52) (20)Px68y53 { Px69y53, Px68y54, Px68y52, Px67y53 } CellNode (68 @ 53) (20)Px68y54 { Px68y53, Px69y54, Px68y55, Px67y54 } CellNode (68 @ 54) (20)Px68y55 { Px68y54, Px67y55, Px69y55, Px68y56 } CellNode (68 @ 55) (20)Px68y56 { Px69y56, Px68y57, Px67y56, Px68y55 } CellNode (68 @ 56) (20)Px68y57 { Px68y58, Px69y57, Px68y56, Px67y57 } CellNode (68 @ 57) (20)Px68y58 { Px67y58, Px68y57, Px69y58, Px68y59 } CellNode (68 @ 58) (20)Px68y59 { Px68y58, Px67y59, Px68y60, Px69y59 } CellNode (68 @ 59) (20)Px68y6 { Px68y7, Px68y5, Px69y6, Px67y6 } CellNode (68 @ 6) (20)Px68y60 { Px69y60, Px67y60, Px68y61, Px68y59 } CellNode (68 @ 60) (20)Px68y61 { Px69y61, Px67y61, Px68y62, Px68y60 } CellNode (68 @ 61) (20)Px68y62 { Px68y61, Px69y62, Px67y62, Px68y63 } CellNode (68 @ 62) (20)Px68y63 { Px67y63, Px69y63, Px68y62, Px68y64 } CellNode (68 @ 63) (20)Px68y64 { Px68y65, Px67y64, Px69y64, Px68y63 } CellNode (68 @ 64) (20)Px68y65 { Px68y66, Px69y65, Px67y65, Px68y64 } CellNode (68 @ 65) (20)Px68y66 { Px68y67, Px68y65, Px69y66, Px67y66 } CellNode (68 @ 66) (20)Px68y67 { Px67y67, Px69y67, Px68y66 } CellNode (68 @ 67) (20)Px68y7 { Px67y7, Px68y8, Px68y6, Px69y7 } CellNode (68 @ 7) (20)Px68y8 { Px69y8, Px67y8, Px68y9, Px68y7 } CellNode (68 @ 8) (20)Px68y9 { Px68y8, Px69y9, Px67y9, Px68y10 } CellNode (68 @ 9) (20)Px69y1 { Px70y1, Px68y1, Px69y2 } CellNode (69 @ 1) (20)Px69y10 { Px69y9, Px69y11, Px70y10, Px68y10 } CellNode (69 @ 10) (20)Px69y11 { Px68y11, Px69y10, Px69y12, Px70y11 } CellNode (69 @ 11) (20)Px69y12 { Px70y12, Px68y12, Px69y11, Px69y13 } CellNode (69 @ 12) (20)Px69y13 { Px69y14, Px70y13, Px68y13, Px69y12 } CellNode (69 @ 13) (20)Px69y14 { Px69y13, Px69y15, Px70y14, Px68y14 } CellNode (69 @ 14) (20)Px69y15 { Px70y15, Px68y15, Px69y14, Px69y16 } CellNode (69 @ 15) (20)Px69y16 { Px69y17, Px70y16, Px68y16, Px69y15 } CellNode (69 @ 16) (20)Px69y17 { Px69y18, Px70y17, Px69y16, Px68y17 } CellNode (69 @ 17) (20)Px69y18 { Px68y18, Px69y17, Px69y19, Px70y18 } CellNode (69 @ 18) (20)Px69y19 { Px70y19, Px69y18, Px68y19, Px69y20 } CellNode (69 @ 19) (20)Px69y2 { Px70y2, Px69y3, Px68y2, Px69y1 } CellNode (69 @ 2) (20)Px69y20 { Px69y21, Px68y20, Px70y20, Px69y19 } CellNode (69 @ 20) (20)Px69y21 { Px69y22, Px68y21, Px70y21, Px69y20 } CellNode (69 @ 21) (20)Px69y22 { Px69y21, Px69y23, Px68y22, Px70y22 } CellNode (69 @ 22) (20)Px69y23 { Px68y23, Px70y23, Px69y22, Px69y24 } CellNode (69 @ 23) (20)Px69y24 { Px69y25, Px70y24, Px68y24, Px69y23 } CellNode (69 @ 24) (20)Px69y25 { Px70y25, Px68y25, Px69y26, Px69y24 } CellNode (69 @ 25) (20)Px69y26 { Px70y26, Px69y25, Px69y27, Px68y26 } CellNode (69 @ 26) (20)Px69y27 { Px70y27, Px68y27, Px69y28, Px69y26 } CellNode (69 @ 27) (20)Px69y28 { Px70y28, Px68y28, Px69y29, Px69y27 } CellNode (69 @ 28) (20)Px69y29 { Px69y28, Px69y30, Px70y29, Px68y29 } CellNode (69 @ 29) (20)Px69y3 { Px69y2, Px70y3, Px69y4, Px68y3 } CellNode (69 @ 3) (20)Px69y30 { Px69y29, Px69y31, Px70y30, Px68y30 } CellNode (69 @ 30) (20)Px69y31 { Px70y31, Px69y30, Px68y31, Px69y32 } CellNode (69 @ 31) (20)Px69y32 { Px69y33, Px70y32, Px68y32, Px69y31 } CellNode (69 @ 32) (20)Px69y33 { Px69y34, Px70y33, Px68y33, Px69y32 } CellNode (69 @ 33) (20)Px69y34 { Px69y33, Px68y34, Px69y35, Px70y34 } CellNode (69 @ 34) (20)Px69y35 { Px70y35, Px68y35, Px69y34, Px69y36 } CellNode (69 @ 35) (20)Px69y36 { Px69y37, Px70y36, Px68y36, Px69y35 } CellNode (69 @ 36) (20)Px69y37 { Px69y36, Px69y38, Px70y37, Px68y37 } CellNode (69 @ 37) (20)Px69y38 { Px70y38, Px68y38, Px69y37, Px69y39 } CellNode (69 @ 38) (20)Px69y39 { Px70y39, Px69y38, Px68y39, Px69y40 } CellNode (69 @ 39) (20)Px69y4 { Px69y5, Px68y4, Px69y3, Px70y4 } CellNode (69 @ 4) (20)Px69y40 { Px69y41, Px70y40, Px68y40, Px69y39 } CellNode (69 @ 40) (20)Px69y41 { Px69y40, Px69y42, Px70y41, Px68y41 } CellNode (69 @ 41) (20)Px69y42 { Px70y42, Px68y42, Px69y41, Px69y43 } CellNode (69 @ 42) (20)Px69y43 { Px69y44, Px70y43, Px68y43, Px69y42 } CellNode (69 @ 43) (20)Px69y44 { Px69y45, Px70y44, Px68y44, Px69y43 } CellNode (69 @ 44) (20)Px69y45 { Px69y44, Px68y45, Px69y46, Px70y45 } CellNode (69 @ 45) (20)Px69y46 { Px70y46, Px68y46, Px69y45, Px69y47 } CellNode (69 @ 46) (20)Px69y47 { Px69y48, Px68y47, Px70y47, Px69y46 } CellNode (69 @ 47) (20)Px69y48 { Px69y49, Px68y48, Px70y48, Px69y47 } CellNode (69 @ 48) (20)Px69y49 { Px70y49, Px69y48, Px69y50, Px68y49 } CellNode (69 @ 49) (20)Px69y5 { Px68y5, Px69y6, Px69y4, Px70y5 } CellNode (69 @ 5) (20)Px69y50 { Px68y50, Px69y49, Px69y51, Px70y50 } CellNode (69 @ 50) (20)Px69y51 { Px70y51, Px68y51, Px69y50, Px69y52 } CellNode (69 @ 51) (20)Px69y52 { Px69y53, Px70y52, Px68y52, Px69y51 } CellNode (69 @ 52) (20)Px69y53 { Px68y53, Px69y54, Px70y53, Px69y52 } CellNode (69 @ 53) (20)Px69y54 { Px70y54, Px69y53, Px68y54, Px69y55 } CellNode (69 @ 54) (20)Px69y55 { Px69y56, Px70y55, Px68y55, Px69y54 } CellNode (69 @ 55) (20)Px69y56 { Px69y57, Px70y56, Px69y55, Px68y56 } CellNode (69 @ 56) (20)Px69y57 { Px69y56, Px68y57, Px69y58, Px70y57 } CellNode (69 @ 57) (20)Px69y58 { Px70y58, Px68y58, Px69y57, Px69y59 } CellNode (69 @ 58) (20)Px69y59 { Px69y60, Px70y59, Px69y58, Px68y59 } CellNode (69 @ 59) (20)Px69y6 { Px69y5, Px70y6, Px68y6, Px69y7 } CellNode (69 @ 6) (20)Px69y60 { Px69y61, Px70y60, Px68y60, Px69y59 } CellNode (69 @ 60) (20)Px69y61 { Px68y61, Px69y60, Px69y62, Px70y61 } CellNode (69 @ 61) (20)Px69y62 { Px70y62, Px69y61, Px68y62, Px69y63 } CellNode (69 @ 62) (20)Px69y63 { Px69y64, Px70y63, Px69y62, Px68y63 } CellNode (69 @ 63) (20)Px69y64 { Px69y63, Px69y65, Px70y64, Px68y64 } CellNode (69 @ 64) (20)Px69y65 { Px70y65, Px68y65, Px69y64, Px69y66 } CellNode (69 @ 65) (20)Px69y66 { Px69y67, Px70y66, Px68y66, Px69y65 } CellNode (69 @ 66) (20)Px69y67 { Px70y67, Px69y66, Px68y67 } CellNode (69 @ 67) (20)Px69y7 { Px69y8, Px69y6, Px70y7, Px68y7 } CellNode (69 @ 7) (20)Px69y8 { Px68y8, Px69y9, Px69y7, Px70y8 } CellNode (69 @ 8) (20)Px69y9 { Px70y9, Px69y10, Px68y9, Px69y8 } CellNode (69 @ 9) (20)Px6y1 { Px7y1, Px5y1, Px6y2 } CellNode (6 @ 1) (20)Px6y10 { Px6y11, Px7y10, Px5y10, Px6y9 } CellNode (6 @ 10) (20)Px6y11 { Px5y11, Px6y12, Px7y11, Px6y10 } CellNode (6 @ 11) (20)Px6y12 { Px5y12, Px6y11, Px6y13, Px7y12 } CellNode (6 @ 12) (20)Px6y13 { Px7y13, Px6y14, Px5y13, Px6y12 } CellNode (6 @ 13) (20)Px6y14 { Px7y14, Px6y15, Px6y13, Px5y14 } CellNode (6 @ 14) (20)Px6y15 { Px5y15, Px6y14, Px7y15, Px6y16 } CellNode (6 @ 15) (20)Px6y16 { Px7y16, Px5y16, Px6y15, Px6y17 } CellNode (6 @ 16) (20)Px6y17 { Px7y17, Px6y18, Px6y16, Px5y17 } CellNode (6 @ 17) (20)Px6y18 { Px6y17, Px7y18, Px6y19, Px5y18 } CellNode (6 @ 18) (20)Px6y19 { Px6y18, Px5y19, Px6y20, Px7y19 } CellNode (6 @ 19) (20)Px6y2 { Px5y2, Px6y3, Px6y1, Px7y2 } CellNode (6 @ 2) (20)Px6y20 { Px5y20, Px6y21, Px6y19, Px7y20 } CellNode (6 @ 20) (20)Px6y21 { Px7y21, Px5y21, Px6y22, Px6y20 } CellNode (6 @ 21) (20)Px6y22 { Px7y22, Px6y23, Px5y22, Px6y21 } CellNode (6 @ 22) (20)Px6y23 { Px7y23, Px6y22, Px6y24, Px5y23 } CellNode (6 @ 23) (20)Px6y24 { Px6y25, Px7y24, Px5y24, Px6y23 } CellNode (6 @ 24) (20)Px6y25 { Px7y25, Px6y26, Px5y25, Px6y24 } CellNode (6 @ 25) (20)Px6y26 { Px6y25, Px7y26, Px5y26, Px6y27 } CellNode (6 @ 26) (20)Px6y27 { Px5y27, Px6y28, Px6y26, Px7y27 } CellNode (6 @ 27) (20)Px6y28 { Px7y28, Px5y28, Px6y29, Px6y27 } CellNode (6 @ 28) (20)Px6y29 { Px6y30, Px7y29, Px5y29, Px6y28 } CellNode (6 @ 29) (20)Px6y3 { Px6y2, Px7y3, Px5y3, Px6y4 } CellNode (6 @ 3) (20)Px6y30 { Px6y29, Px6y31, Px7y30, Px5y30 } CellNode (6 @ 30) (20)Px6y31 { Px6y30, Px5y31, Px6y32, Px7y31 } CellNode (6 @ 31) (20)Px6y32 { Px7y32, Px5y32, Px6y31, Px6y33 } CellNode (6 @ 32) (20)Px6y33 { Px6y34, Px7y33, Px6y32, Px5y33 } CellNode (6 @ 33) (20)Px6y34 { Px6y33, Px6y35, Px7y34, Px5y34 } CellNode (6 @ 34) (20)Px6y35 { Px7y35, Px6y34, Px5y35, Px6y36 } CellNode (6 @ 35) (20)Px6y36 { Px6y37, Px7y36, Px6y35, Px5y36 } CellNode (6 @ 36) (20)Px6y37 { Px6y38, Px7y37, Px5y37, Px6y36 } CellNode (6 @ 37) (20)Px6y38 { Px6y37, Px5y38, Px6y39, Px7y38 } CellNode (6 @ 38) (20)Px6y39 { Px6y38, Px5y39, Px6y40, Px7y39 } CellNode (6 @ 39) (20)Px6y4 { Px7y4, Px6y3, Px5y4, Px6y5 } CellNode (6 @ 4) (20)Px6y40 { Px6y41, Px5y40, Px7y40, Px6y39 } CellNode (6 @ 40) (20)Px6y41 { Px7y41, Px5y41, Px6y42, Px6y40 } CellNode (6 @ 41) (20)Px6y42 { Px6y41, Px6y43, Px7y42, Px5y42 } CellNode (6 @ 42) (20)Px6y43 { Px5y43, Px6y44, Px6y42, Px7y43 } CellNode (6 @ 43) (20)Px6y44 { Px7y44, Px5y44, Px6y45, Px6y43 } CellNode (6 @ 44) (20)Px6y45 { Px6y46, Px5y45, Px7y45, Px6y44 } CellNode (6 @ 45) (20)Px6y46 { Px7y46, Px6y45, Px6y47, Px5y46 } CellNode (6 @ 46) (20)Px6y47 { Px7y47, Px6y48, Px5y47, Px6y46 } CellNode (6 @ 47) (20)Px6y48 { Px7y48, Px5y48, Px6y49, Px6y47 } CellNode (6 @ 48) (20)Px6y49 { Px6y48, Px6y50, Px7y49, Px5y49 } CellNode (6 @ 49) (20)Px6y5 { Px6y6, Px6y4, Px7y5, Px5y5 } CellNode (6 @ 5) (20)Px6y50 { Px6y49, Px6y51, Px7y50, Px5y50 } CellNode (6 @ 50) (20)Px6y51 { Px7y51, Px6y50, Px5y51, Px6y52 } CellNode (6 @ 51) (20)Px6y52 { Px6y53, Px7y52, Px5y52, Px6y51 } CellNode (6 @ 52) (20)Px6y53 { Px6y54, Px7y53, Px6y52, Px5y53 } CellNode (6 @ 53) (20)Px6y54 { Px6y53, Px5y54, Px6y55, Px7y54 } CellNode (6 @ 54) (20)Px6y55 { Px7y55, Px5y55, Px6y54, Px6y56 } CellNode (6 @ 55) (20)Px6y56 { Px6y57, Px7y56, Px5y56, Px6y55 } CellNode (6 @ 56) (20)Px6y57 { Px6y56, Px6y58, Px7y57, Px5y57 } CellNode (6 @ 57) (20)Px6y58 { Px7y58, Px6y57, Px5y58, Px6y59 } CellNode (6 @ 58) (20)Px6y59 { Px7y59, Px6y58, Px5y59, Px6y60 } CellNode (6 @ 59) (20)Px6y6 { Px7y6, Px5y6, Px6y7, Px6y5 } CellNode (6 @ 6) (20)Px6y60 { Px6y61, Px5y60, Px7y60, Px6y59 } CellNode (6 @ 60) (20)Px6y61 { Px7y61, Px6y62, Px5y61, Px6y60 } CellNode (6 @ 61) (20)Px6y62 { Px6y63, Px6y61, Px7y62, Px5y62 } CellNode (6 @ 62) (20)Px6y63 { Px7y63, Px5y63, Px6y64, Px6y62 } CellNode (6 @ 63) (20)Px6y64 { Px6y65, Px5y64, Px7y64, Px6y63 } CellNode (6 @ 64) (20)Px6y65 { Px6y64, Px6y66, Px5y65, Px7y65 } CellNode (6 @ 65) (20)Px6y66 { Px7y66, Px5y66, Px6y65, Px6y67 } CellNode (6 @ 66) (20)Px6y67 { Px5y67, Px6y66, Px7y67 } CellNode (6 @ 67) (20)Px6y7 { Px7y7, Px6y6, Px5y7, Px6y8 } CellNode (6 @ 7) (20)Px6y8 { Px6y7, Px7y8, Px5y8, Px6y9 } CellNode (6 @ 8) (20)Px6y9 { Px5y9, Px6y8, Px7y9, Px6y10 } CellNode (6 @ 9) (20)Px70y1 { Px70y2, Px71y1, Px69y1 } CellNode (70 @ 1) (20)Px70y10 { Px70y9, Px69y10, Px71y10, Px70y11 } CellNode (70 @ 10) (20)Px70y11 { Px70y12, Px69y11, Px71y11, Px70y10 } CellNode (70 @ 11) (20)Px70y12 { Px70y13, Px69y12, Px71y12, Px70y11 } CellNode (70 @ 12) (20)Px70y13 { Px71y13, Px70y12, Px70y14, Px69y13 } CellNode (70 @ 13) (20)Px70y14 { Px70y15, Px71y14, Px69y14, Px70y13 } CellNode (70 @ 14) (20)Px70y15 { Px71y15, Px70y16, Px69y15, Px70y14 } CellNode (70 @ 15) (20)Px70y16 { Px70y15, Px71y16, Px69y16, Px70y17 } CellNode (70 @ 16) (20)Px70y17 { Px70y18, Px69y17, Px70y16, Px71y17 } CellNode (70 @ 17) (20)Px70y18 { Px70y19, Px69y18, Px71y18, Px70y17 } CellNode (70 @ 18) (20)Px70y19 { Px70y20, Px71y19, Px69y19, Px70y18 } CellNode (70 @ 19) (20)Px70y2 { Px69y2, Px70y3, Px71y2, Px70y1 } CellNode (70 @ 2) (20)Px70y20 { Px70y19, Px71y20, Px69y20, Px70y21 } CellNode (70 @ 20) (20)Px70y21 { Px69y21, Px70y22, Px70y20, Px71y21 } CellNode (70 @ 21) (20)Px70y22 { Px71y22, Px69y22, Px70y21, Px70y23 } CellNode (70 @ 22) (20)Px70y23 { Px70y24, Px71y23, Px69y23, Px70y22 } CellNode (70 @ 23) (20)Px70y24 { Px70y23, Px70y25, Px71y24, Px69y24 } CellNode (70 @ 24) (20)Px70y25 { Px71y25, Px69y25, Px70y24, Px70y26 } CellNode (70 @ 25) (20)Px70y26 { Px70y27, Px71y26, Px70y25, Px69y26 } CellNode (70 @ 26) (20)Px70y27 { Px70y28, Px71y27, Px69y27, Px70y26 } CellNode (70 @ 27) (20)Px70y28 { Px70y27, Px69y28, Px70y29, Px71y28 } CellNode (70 @ 28) (20)Px70y29 { Px71y29, Px69y29, Px70y28, Px70y30 } CellNode (70 @ 29) (20)Px70y3 { Px70y2, Px71y3, Px69y3, Px70y4 } CellNode (70 @ 3) (20)Px70y30 { Px71y30, Px69y30, Px70y31, Px70y29 } CellNode (70 @ 30) (20)Px70y31 { Px71y31, Px70y32, Px69y31, Px70y30 } CellNode (70 @ 31) (20)Px70y32 { Px70y31, Px70y33, Px69y32, Px71y32 } CellNode (70 @ 32) (20)Px70y33 { Px69y33, Px71y33, Px70y32, Px70y34 } CellNode (70 @ 33) (20)Px70y34 { Px70y35, Px69y34, Px71y34, Px70y33 } CellNode (70 @ 34) (20)Px70y35 { Px70y36, Px69y35, Px71y35, Px70y34 } CellNode (70 @ 35) (20)Px70y36 { Px69y36, Px70y35, Px70y37, Px71y36 } CellNode (70 @ 36) (20)Px70y37 { Px71y37, Px69y37, Px70y38, Px70y36 } CellNode (70 @ 37) (20)Px70y38 { Px71y38, Px69y38, Px70y39, Px70y37 } CellNode (70 @ 38) (20)Px70y39 { Px70y38, Px70y40, Px71y39, Px69y39 } CellNode (70 @ 39) (20)Px70y4 { Px71y4, Px70y3, Px69y4, Px70y5 } CellNode (70 @ 4) (20)Px70y40 { Px71y40, Px70y39, Px70y41, Px69y40 } CellNode (70 @ 40) (20)Px70y41 { Px70y42, Px69y41, Px71y41, Px70y40 } CellNode (70 @ 41) (20)Px70y42 { Px70y43, Px71y42, Px69y42, Px70y41 } CellNode (70 @ 42) (20)Px70y43 { Px70y42, Px71y43, Px69y43, Px70y44 } CellNode (70 @ 43) (20)Px70y44 { Px69y44, Px71y44, Px70y43, Px70y45 } CellNode (70 @ 44) (20)Px70y45 { Px71y45, Px69y45, Px70y46, Px70y44 } CellNode (70 @ 45) (20)Px70y46 { Px71y46, Px69y46, Px70y47, Px70y45 } CellNode (70 @ 46) (20)Px70y47 { Px71y47, Px70y46, Px70y48, Px69y47 } CellNode (70 @ 47) (20)Px70y48 { Px70y49, Px69y48, Px71y48, Px70y47 } CellNode (70 @ 48) (20)Px70y49 { Px71y49, Px69y49, Px70y48, Px70y50 } CellNode (70 @ 49) (20)Px70y5 { Px69y5, Px70y6, Px70y4, Px71y5 } CellNode (70 @ 5) (20)Px70y50 { Px70y49, Px70y51, Px69y50, Px71y50 } CellNode (70 @ 50) (20)Px70y51 { Px70y52, Px69y51, Px71y51, Px70y50 } CellNode (70 @ 51) (20)Px70y52 { Px71y52, Px70y51, Px70y53, Px69y52 } CellNode (70 @ 52) (20)Px70y53 { Px70y54, Px69y53, Px71y53, Px70y52 } CellNode (70 @ 53) (20)Px70y54 { Px70y55, Px69y54, Px71y54, Px70y53 } CellNode (70 @ 54) (20)Px70y55 { Px70y54, Px70y56, Px69y55, Px71y55 } CellNode (70 @ 55) (20)Px70y56 { Px69y56, Px71y56, Px70y55, Px70y57 } CellNode (70 @ 56) (20)Px70y57 { Px70y58, Px69y57, Px71y57, Px70y56 } CellNode (70 @ 57) (20)Px70y58 { Px70y59, Px69y58, Px71y58, Px70y57 } CellNode (70 @ 58) (20)Px70y59 { Px71y59, Px70y58, Px70y60, Px69y59 } CellNode (70 @ 59) (20)Px70y6 { Px70y5, Px69y6, Px70y7, Px71y6 } CellNode (70 @ 6) (20)Px70y60 { Px69y60, Px70y61, Px70y59, Px71y60 } CellNode (70 @ 60) (20)Px70y61 { Px70y62, Px69y61, Px71y61, Px70y60 } CellNode (70 @ 61) (20)Px70y62 { Px70y63, Px69y62, Px71y62, Px70y61 } CellNode (70 @ 62) (20)Px70y63 { Px71y63, Px70y62, Px70y64, Px69y63 } CellNode (70 @ 63) (20)Px70y64 { Px70y65, Px71y64, Px69y64, Px70y63 } CellNode (70 @ 64) (20)Px70y65 { Px71y65, Px69y65, Px70y66, Px70y64 } CellNode (70 @ 65) (20)Px70y66 { Px70y65, Px70y67, Px69y66, Px71y66 } CellNode (70 @ 66) (20)Px70y67 { Px71y67, Px70y66, Px69y67 } CellNode (70 @ 67) (20)Px70y7 { Px70y6, Px71y7, Px69y7, Px70y8 } CellNode (70 @ 7) (20)Px70y8 { Px70y9, Px71y8, Px70y7, Px69y8 } CellNode (70 @ 8) (20)Px70y9 { Px69y9, Px70y10, Px71y9, Px70y8 } CellNode (70 @ 9) (20)Px71y1 { Px70y1, Px71y2, Px72y1 } CellNode (71 @ 1) (20)Px71y10 { Px71y11, Px72y10, Px70y10, Px71y9 } CellNode (71 @ 10) (20)Px71y11 { Px71y10, Px71y12, Px72y11, Px70y11 } CellNode (71 @ 11) (20)Px71y12 { Px72y12, Px70y12, Px71y11, Px71y13 } CellNode (71 @ 12) (20)Px71y13 { Px71y14, Px72y13, Px70y13, Px71y12 } CellNode (71 @ 13) (20)Px71y14 { Px71y15, Px72y14, Px70y14, Px71y13 } CellNode (71 @ 14) (20)Px71y15 { Px70y15, Px71y14, Px71y16, Px72y15 } CellNode (71 @ 15) (20)Px71y16 { Px72y16, Px70y16, Px71y15, Px71y17 } CellNode (71 @ 16) (20)Px71y17 { Px71y18, Px72y17, Px71y16, Px70y17 } CellNode (71 @ 17) (20)Px71y18 { Px71y17, Px71y19, Px72y18, Px70y18 } CellNode (71 @ 18) (20)Px71y19 { Px72y19, Px70y19, Px71y18, Px71y20 } CellNode (71 @ 19) (20)Px71y2 { Px71y3, Px70y2, Px71y1, Px72y2 } CellNode (71 @ 2) (20)Px71y20 { Px71y21, Px70y20, Px71y19, Px72y20 } CellNode (71 @ 20) (20)Px71y21 { Px71y22, Px72y21, Px71y20, Px70y21 } CellNode (71 @ 21) (20)Px71y22 { Px71y21, Px71y23, Px72y22, Px70y22 } CellNode (71 @ 22) (20)Px71y23 { Px72y23, Px71y22, Px71y24, Px70y23 } CellNode (71 @ 23) (20)Px71y24 { Px72y24, Px70y24, Px71y25, Px71y23 } CellNode (71 @ 24) (20)Px71y25 { Px71y26, Px70y25, Px72y25, Px71y24 } CellNode (71 @ 25) (20)Px71y26 { Px71y25, Px72y26, Px71y27, Px70y26 } CellNode (71 @ 26) (20)Px71y27 { Px70y27, Px71y28, Px71y26, Px72y27 } CellNode (71 @ 27) (20)Px71y28 { Px72y28, Px70y28, Px71y29, Px71y27 } CellNode (71 @ 28) (20)Px71y29 { Px71y30, Px72y29, Px70y29, Px71y28 } CellNode (71 @ 29) (20)Px71y3 { Px71y4, Px70y3, Px72y3, Px71y2 } CellNode (71 @ 3) (20)Px71y30 { Px71y29, Px71y31, Px72y30, Px70y30 } CellNode (71 @ 30) (20)Px71y31 { Px71y30, Px70y31, Px71y32, Px72y31 } CellNode (71 @ 31) (20)Px71y32 { Px72y32, Px71y31, Px70y32, Px71y33 } CellNode (71 @ 32) (20)Px71y33 { Px71y34, Px72y33, Px70y33, Px71y32 } CellNode (71 @ 33) (20)Px71y34 { Px71y33, Px71y35, Px72y34, Px70y34 } CellNode (71 @ 34) (20)Px71y35 { Px72y35, Px70y35, Px71y34, Px71y36 } CellNode (71 @ 35) (20)Px71y36 { Px71y37, Px72y36, Px70y36, Px71y35 } CellNode (71 @ 36) (20)Px71y37 { Px71y38, Px72y37, Px70y37, Px71y36 } CellNode (71 @ 37) (20)Px71y38 { Px71y37, Px70y38, Px71y39, Px72y38 } CellNode (71 @ 38) (20)Px71y39 { Px72y39, Px71y38, Px70y39, Px71y40 } CellNode (71 @ 39) (20)Px71y4 { Px72y4, Px71y3, Px70y4, Px71y5 } CellNode (71 @ 4) (20)Px71y40 { Px71y41, Px72y40, Px70y40, Px71y39 } CellNode (71 @ 40) (20)Px71y41 { Px72y41, Px71y42, Px70y41, Px71y40 } CellNode (71 @ 41) (20)Px71y42 { Px70y42, Px71y41, Px72y42, Px71y43 } CellNode (71 @ 42) (20)Px71y43 { Px71y44, Px70y43, Px71y42, Px72y43 } CellNode (71 @ 43) (20)Px71y44 { Px71y45, Px72y44, Px71y43, Px70y44 } CellNode (71 @ 44) (20)Px71y45 { Px71y44, Px71y46, Px72y45, Px70y45 } CellNode (71 @ 45) (20)Px71y46 { Px71y45, Px70y46, Px72y46, Px71y47 } CellNode (71 @ 46) (20)Px71y47 { Px71y48, Px72y47, Px71y46, Px70y47 } CellNode (71 @ 47) (20)Px71y48 { Px72y48, Px71y49, Px70y48, Px71y47 } CellNode (71 @ 48) (20)Px71y49 { Px70y49, Px71y48, Px71y50, Px72y49 } CellNode (71 @ 49) (20)Px71y5 { Px71y6, Px72y5, Px71y4, Px70y5 } CellNode (71 @ 5) (20)Px71y50 { Px72y50, Px71y49, Px71y51, Px70y50 } CellNode (71 @ 50) (20)Px71y51 { Px71y52, Px70y51, Px72y51, Px71y50 } CellNode (71 @ 51) (20)Px71y52 { Px71y53, Px70y52, Px72y52, Px71y51 } CellNode (71 @ 52) (20)Px71y53 { Px71y52, Px72y53, Px70y53, Px71y54 } CellNode (71 @ 53) (20)Px71y54 { Px70y54, Px71y55, Px71y53, Px72y54 } CellNode (71 @ 54) (20)Px71y55 { Px72y55, Px70y55, Px71y56, Px71y54 } CellNode (71 @ 55) (20)Px71y56 { Px72y56, Px71y57, Px70y56, Px71y55 } CellNode (71 @ 56) (20)Px71y57 { Px70y57, Px71y56, Px71y58, Px72y57 } CellNode (71 @ 57) (20)Px71y58 { Px71y59, Px70y58, Px72y58, Px71y57 } CellNode (71 @ 58) (20)Px71y59 { Px72y59, Px70y59, Px71y58, Px71y60 } CellNode (71 @ 59) (20)Px71y6 { Px70y6, Px71y7, Px72y6, Px71y5 } CellNode (71 @ 6) (20)Px71y60 { Px71y59, Px71y61, Px72y60, Px70y60 } CellNode (71 @ 60) (20)Px71y61 { Px70y61, Px71y62, Px72y61, Px71y60 } CellNode (71 @ 61) (20)Px71y62 { Px72y62, Px71y61, Px70y62, Px71y63 } CellNode (71 @ 62) (20)Px71y63 { Px71y64, Px72y63, Px70y63, Px71y62 } CellNode (71 @ 63) (20)Px71y64 { Px71y65, Px72y64, Px70y64, Px71y63 } CellNode (71 @ 64) (20)Px71y65 { Px70y65, Px71y64, Px71y66, Px72y65 } CellNode (71 @ 65) (20)Px71y66 { Px71y67, Px71y65, Px70y66, Px72y66 } CellNode (71 @ 66) (20)Px71y67 { Px70y67, Px71y66, Px72y67 } CellNode (71 @ 67) (20)Px71y7 { Px71y6, Px71y8, Px70y7, Px72y7 } CellNode (71 @ 7) (20)Px71y8 { Px72y8, Px71y7, Px71y9, Px70y8 } CellNode (71 @ 8) (20)Px71y9 { Px70y9, Px71y8, Px72y9, Px71y10 } CellNode (71 @ 9) (20)Px72y1 { Px71y1, Px72y2, Px73y1 } CellNode (72 @ 1) (20)Px72y10 { Px71y10, Px72y9, Px72y11, Px73y10 } CellNode (72 @ 10) (20)Px72y11 { Px72y12, Px73y11, Px71y11, Px72y10 } CellNode (72 @ 11) (20)Px72y12 { Px72y13, Px73y12, Px71y12, Px72y11 } CellNode (72 @ 12) (20)Px72y13 { Px72y12, Px73y13, Px72y14, Px71y13 } CellNode (72 @ 13) (20)Px72y14 { Px71y14, Px73y14, Px72y13, Px72y15 } CellNode (72 @ 14) (20)Px72y15 { Px73y15, Px71y15, Px72y16, Px72y14 } CellNode (72 @ 15) (20)Px72y16 { Px72y17, Px71y16, Px73y16, Px72y15 } CellNode (72 @ 16) (20)Px72y17 { Px73y17, Px72y16, Px72y18, Px71y17 } CellNode (72 @ 17) (20)Px72y18 { Px72y19, Px71y18, Px73y18, Px72y17 } CellNode (72 @ 18) (20)Px72y19 { Px73y19, Px71y19, Px72y18, Px72y20 } CellNode (72 @ 19) (20)Px72y2 { Px73y2, Px72y1, Px71y2, Px72y3 } CellNode (72 @ 2) (20)Px72y20 { Px72y19, Px72y21, Px73y20, Px71y20 } CellNode (72 @ 20) (20)Px72y21 { Px72y20, Px72y22, Px73y21, Px71y21 } CellNode (72 @ 21) (20)Px72y22 { Px73y22, Px71y22, Px72y21, Px72y23 } CellNode (72 @ 22) (20)Px72y23 { Px72y24, Px73y23, Px71y23, Px72y22 } CellNode (72 @ 23) (20)Px72y24 { Px72y25, Px73y24, Px72y23, Px71y24 } CellNode (72 @ 24) (20)Px72y25 { Px71y25, Px72y24, Px72y26, Px73y25 } CellNode (72 @ 25) (20)Px72y26 { Px73y26, Px71y26, Px72y25, Px72y27 } CellNode (72 @ 26) (20)Px72y27 { Px72y28, Px73y27, Px72y26, Px71y27 } CellNode (72 @ 27) (20)Px72y28 { Px71y28, Px72y29, Px73y28, Px72y27 } CellNode (72 @ 28) (20)Px72y29 { Px73y29, Px72y28, Px71y29, Px72y30 } CellNode (72 @ 29) (20)Px72y3 { Px72y4, Px71y3, Px73y3, Px72y2 } CellNode (72 @ 3) (20)Px72y30 { Px71y30, Px72y31, Px72y29, Px73y30 } CellNode (72 @ 30) (20)Px72y31 { Px72y32, Px71y31, Px73y31, Px72y30 } CellNode (72 @ 31) (20)Px72y32 { Px72y33, Px73y32, Px71y32, Px72y31 } CellNode (72 @ 32) (20)Px72y33 { Px71y33, Px72y32, Px73y33, Px72y34 } CellNode (72 @ 33) (20)Px72y34 { Px72y35, Px71y34, Px73y34, Px72y33 } CellNode (72 @ 34) (20)Px72y35 { Px73y35, Px71y35, Px72y36, Px72y34 } CellNode (72 @ 35) (20)Px72y36 { Px72y35, Px73y36, Px71y36, Px72y37 } CellNode (72 @ 36) (20)Px72y37 { Px71y37, Px72y38, Px72y36, Px73y37 } CellNode (72 @ 37) (20)Px72y38 { Px73y38, Px71y38, Px72y39, Px72y37 } CellNode (72 @ 38) (20)Px72y39 { Px72y40, Px73y39, Px71y39, Px72y38 } CellNode (72 @ 39) (20)Px72y4 { Px72y5, Px71y4, Px72y3, Px73y4 } CellNode (72 @ 4) (20)Px72y40 { Px72y39, Px72y41, Px73y40, Px71y40 } CellNode (72 @ 40) (20)Px72y41 { Px71y41, Px72y40, Px72y42, Px73y41 } CellNode (72 @ 41) (20)Px72y42 { Px73y42, Px72y41, Px71y42, Px72y43 } CellNode (72 @ 42) (20)Px72y43 { Px72y44, Px73y43, Px72y42, Px71y43 } CellNode (72 @ 43) (20)Px72y44 { Px71y44, Px72y45, Px73y44, Px72y43 } CellNode (72 @ 44) (20)Px72y45 { Px73y45, Px71y45, Px72y44, Px72y46 } CellNode (72 @ 45) (20)Px72y46 { Px72y47, Px73y46, Px71y46, Px72y45 } CellNode (72 @ 46) (20)Px72y47 { Px72y48, Px73y47, Px72y46, Px71y47 } CellNode (72 @ 47) (20)Px72y48 { Px71y48, Px72y47, Px72y49, Px73y48 } CellNode (72 @ 48) (20)Px72y49 { Px73y49, Px72y48, Px71y49, Px72y50 } CellNode (72 @ 49) (20)Px72y5 { Px73y5, Px72y4, Px72y6, Px71y5 } CellNode (72 @ 5) (20)Px72y50 { Px73y50, Px72y51, Px71y50, Px72y49 } CellNode (72 @ 50) (20)Px72y51 { Px73y51, Px72y52, Px71y51, Px72y50 } CellNode (72 @ 51) (20)Px72y52 { Px71y52, Px72y51, Px72y53, Px73y52 } CellNode (72 @ 52) (20)Px72y53 { Px73y53, Px71y53, Px72y52, Px72y54 } CellNode (72 @ 53) (20)Px72y54 { Px72y55, Px73y54, Px72y53, Px71y54 } CellNode (72 @ 54) (20)Px72y55 { Px71y55, Px72y56, Px73y55, Px72y54 } CellNode (72 @ 55) (20)Px72y56 { Px72y55, Px71y56, Px73y56, Px72y57 } CellNode (72 @ 56) (20)Px72y57 { Px73y57, Px72y58, Px72y56, Px71y57 } CellNode (72 @ 57) (20)Px72y58 { Px73y58, Px72y59, Px71y58, Px72y57 } CellNode (72 @ 58) (20)Px72y59 { Px71y59, Px72y58, Px72y60, Px73y59 } CellNode (72 @ 59) (20)Px72y6 { Px72y7, Px72y5, Px73y6, Px71y6 } CellNode (72 @ 6) (20)Px72y60 { Px72y61, Px72y59, Px73y60, Px71y60 } CellNode (72 @ 60) (20)Px72y61 { Px72y62, Px73y61, Px71y61, Px72y60 } CellNode (72 @ 61) (20)Px72y62 { Px73y62, Px72y63, Px71y62, Px72y61 } CellNode (72 @ 62) (20)Px72y63 { Px72y62, Px73y63, Px71y63, Px72y64 } CellNode (72 @ 63) (20)Px72y64 { Px71y64, Px72y63, Px72y65, Px73y64 } CellNode (72 @ 64) (20)Px72y65 { Px73y65, Px71y65, Px72y64, Px72y66 } CellNode (72 @ 65) (20)Px72y66 { Px72y67, Px73y66, Px71y66, Px72y65 } CellNode (72 @ 66) (20)Px72y67 { Px72y66, Px73y67, Px71y67 } CellNode (72 @ 67) (20)Px72y7 { Px71y7, Px72y8, Px73y7, Px72y6 } CellNode (72 @ 7) (20)Px72y8 { Px72y7, Px71y8, Px72y9, Px73y8 } CellNode (72 @ 8) (20)Px72y9 { Px72y8, Px73y9, Px72y10, Px71y9 } CellNode (72 @ 9) (20)Px73y1 { Px72y1, Px73y2, Px74y1 } CellNode (73 @ 1) (20)Px73y10 { Px73y11, Px73y9, Px74y10, Px72y10 } CellNode (73 @ 10) (20)Px73y11 { Px73y12, Px74y11, Px73y10, Px72y11 } CellNode (73 @ 11) (20)Px73y12 { Px72y12, Px73y11, Px73y13, Px74y12 } CellNode (73 @ 12) (20)Px73y13 { Px74y13, Px72y13, Px73y12, Px73y14 } CellNode (73 @ 13) (20)Px73y14 { Px73y15, Px74y14, Px73y13, Px72y14 } CellNode (73 @ 14) (20)Px73y15 { Px73y14, Px73y16, Px74y15, Px72y15 } CellNode (73 @ 15) (20)Px73y16 { Px74y16, Px73y15, Px72y16, Px73y17 } CellNode (73 @ 16) (20)Px73y17 { Px73y18, Px74y17, Px72y17, Px73y16 } CellNode (73 @ 17) (20)Px73y18 { Px73y19, Px74y18, Px72y18, Px73y17 } CellNode (73 @ 18) (20)Px73y19 { Px72y19, Px73y18, Px73y20, Px74y19 } CellNode (73 @ 19) (20)Px73y2 { Px73y1, Px73y3, Px72y2, Px74y2 } CellNode (73 @ 2) (20)Px73y20 { Px73y21, Px73y19, Px74y20, Px72y20 } CellNode (73 @ 20) (20)Px73y21 { Px74y21, Px73y22, Px72y21, Px73y20 } CellNode (73 @ 21) (20)Px73y22 { Px73y23, Px72y22, Px74y22, Px73y21 } CellNode (73 @ 22) (20)Px73y23 { Px73y22, Px73y24, Px72y23, Px74y23 } CellNode (73 @ 23) (20)Px73y24 { Px72y24, Px73y25, Px73y23, Px74y24 } CellNode (73 @ 24) (20)Px73y25 { Px74y25, Px73y26, Px72y25, Px73y24 } CellNode (73 @ 25) (20)Px73y26 { Px74y26, Px72y26, Px73y27, Px73y25 } CellNode (73 @ 26) (20)Px73y27 { Px74y27, Px73y26, Px73y28, Px72y27 } CellNode (73 @ 27) (20)Px73y28 { Px73y29, Px74y28, Px72y28, Px73y27 } CellNode (73 @ 28) (20)Px73y29 { Px74y29, Px72y29, Px73y28, Px73y30 } CellNode (73 @ 29) (20)Px73y3 { Px74y3, Px73y2, Px72y3, Px73y4 } CellNode (73 @ 3) (20)Px73y30 { Px73y29, Px73y31, Px74y30, Px72y30 } CellNode (73 @ 30) (20)Px73y31 { Px72y31, Px73y32, Px74y31, Px73y30 } CellNode (73 @ 31) (20)Px73y32 { Px74y32, Px72y32, Px73y31, Px73y33 } CellNode (73 @ 32) (20)Px73y33 { Px73y34, Px74y33, Px72y33, Px73y32 } CellNode (73 @ 33) (20)Px73y34 { Px73y35, Px74y34, Px73y33, Px72y34 } CellNode (73 @ 34) (20)Px73y35 { Px72y35, Px73y34, Px73y36, Px74y35 } CellNode (73 @ 35) (20)Px73y36 { Px74y36, Px73y35, Px72y36, Px73y37 } CellNode (73 @ 36) (20)Px73y37 { Px73y38, Px74y37, Px72y37, Px73y36 } CellNode (73 @ 37) (20)Px73y38 { Px72y38, Px73y39, Px74y38, Px73y37 } CellNode (73 @ 38) (20)Px73y39 { Px74y39, Px73y38, Px72y39, Px73y40 } CellNode (73 @ 39) (20)Px73y4 { Px72y4, Px73y5, Px73y3, Px74y4 } CellNode (73 @ 4) (20)Px73y40 { Px73y41, Px72y40, Px73y39, Px74y40 } CellNode (73 @ 40) (20)Px73y41 { Px74y41, Px72y41, Px73y42, Px73y40 } CellNode (73 @ 41) (20)Px73y42 { Px74y42, Px72y42, Px73y43, Px73y41 } CellNode (73 @ 42) (20)Px73y43 { Px74y43, Px73y42, Px73y44, Px72y43 } CellNode (73 @ 43) (20)Px73y44 { Px74y44, Px72y44, Px73y45, Px73y43 } CellNode (73 @ 44) (20)Px73y45 { Px73y46, Px72y45, Px74y45, Px73y44 } CellNode (73 @ 45) (20)Px73y46 { Px73y45, Px73y47, Px74y46, Px72y46 } CellNode (73 @ 46) (20)Px73y47 { Px74y47, Px72y47, Px73y46, Px73y48 } CellNode (73 @ 47) (20)Px73y48 { Px74y48, Px72y48, Px73y49, Px73y47 } CellNode (73 @ 48) (20)Px73y49 { Px73y50, Px74y49, Px72y49, Px73y48 } CellNode (73 @ 49) (20)Px73y5 { Px72y5, Px73y6, Px73y4, Px74y5 } CellNode (73 @ 5) (20)Px73y50 { Px73y49, Px73y51, Px74y50, Px72y50 } CellNode (73 @ 50) (20)Px73y51 { Px73y50, Px72y51, Px73y52, Px74y51 } CellNode (73 @ 51) (20)Px73y52 { Px74y52, Px73y51, Px72y52, Px73y53 } CellNode (73 @ 52) (20)Px73y53 { Px73y54, Px74y53, Px72y53, Px73y52 } CellNode (73 @ 53) (20)Px73y54 { Px73y53, Px73y55, Px74y54, Px72y54 } CellNode (73 @ 54) (20)Px73y55 { Px74y55, Px72y55, Px73y54, Px73y56 } CellNode (73 @ 55) (20)Px73y56 { Px73y57, Px74y56, Px72y56, Px73y55 } CellNode (73 @ 56) (20)Px73y57 { Px73y58, Px74y57, Px73y56, Px72y57 } CellNode (73 @ 57) (20)Px73y58 { Px73y57, Px72y58, Px73y59, Px74y58 } CellNode (73 @ 58) (20)Px73y59 { Px74y59, Px73y58, Px72y59, Px73y60 } CellNode (73 @ 59) (20)Px73y6 { Px73y5, Px74y6, Px72y6, Px73y7 } CellNode (73 @ 6) (20)Px73y60 { Px73y61, Px74y60, Px72y60, Px73y59 } CellNode (73 @ 60) (20)Px73y61 { Px74y61, Px73y62, Px73y60, Px72y61 } CellNode (73 @ 61) (20)Px73y62 { Px72y62, Px73y61, Px74y62, Px73y63 } CellNode (73 @ 62) (20)Px73y63 { Px74y63, Px72y63, Px73y62, Px73y64 } CellNode (73 @ 63) (20)Px73y64 { Px74y64, Px73y65, Px72y64, Px73y63 } CellNode (73 @ 64) (20)Px73y65 { Px74y65, Px73y66, Px72y65, Px73y64 } CellNode (73 @ 65) (20)Px73y66 { Px74y66, Px73y65, Px73y67, Px72y66 } CellNode (73 @ 66) (20)Px73y67 { Px72y67, Px73y66, Px74y67 } CellNode (73 @ 67) (20)Px73y7 { Px72y7, Px73y6, Px74y7, Px73y8 } CellNode (73 @ 7) (20)Px73y8 { Px72y8, Px73y9, Px74y8, Px73y7 } CellNode (73 @ 8) (20)Px73y9 { Px74y9, Px72y9, Px73y10, Px73y8 } CellNode (73 @ 9) (20)Px74y1 { Px75y1, Px73y1, Px74y2 } CellNode (74 @ 1) (20)Px74y10 { Px74y9, Px75y10, Px74y11, Px73y10 } CellNode (74 @ 10) (20)Px74y11 { Px73y11, Px75y11, Px74y10, Px74y12 } CellNode (74 @ 11) (20)Px74y12 { Px74y13, Px73y12, Px75y12, Px74y11 } CellNode (74 @ 12) (20)Px74y13 { Px75y13, Px73y13, Px74y14, Px74y12 } CellNode (74 @ 13) (20)Px74y14 { Px74y15, Px74y13, Px75y14, Px73y14 } CellNode (74 @ 14) (20)Px74y15 { Px75y15, Px74y16, Px73y15, Px74y14 } CellNode (74 @ 15) (20)Px74y16 { Px74y17, Px73y16, Px75y16, Px74y15 } CellNode (74 @ 16) (20)Px74y17 { Px74y16, Px74y18, Px73y17, Px75y17 } CellNode (74 @ 17) (20)Px74y18 { Px75y18, Px73y18, Px74y17, Px74y19 } CellNode (74 @ 18) (20)Px74y19 { Px75y19, Px73y19, Px74y18, Px74y20 } CellNode (74 @ 19) (20)Px74y2 { Px74y3, Px73y2, Px74y1, Px75y2 } CellNode (74 @ 2) (20)Px74y20 { Px74y21, Px75y20, Px73y20, Px74y19 } CellNode (74 @ 20) (20)Px74y21 { Px74y22, Px75y21, Px74y20, Px73y21 } CellNode (74 @ 21) (20)Px74y22 { Px74y21, Px73y22, Px74y23, Px75y22 } CellNode (74 @ 22) (20)Px74y23 { Px75y23, Px73y23, Px74y22, Px74y24 } CellNode (74 @ 23) (20)Px74y24 { Px74y25, Px75y24, Px73y24, Px74y23 } CellNode (74 @ 24) (20)Px74y25 { Px73y25, Px74y26, Px75y25, Px74y24 } CellNode (74 @ 25) (20)Px74y26 { Px75y26, Px73y26, Px74y25, Px74y27 } CellNode (74 @ 26) (20)Px74y27 { Px74y28, Px75y27, Px74y26, Px73y27 } CellNode (74 @ 27) (20)Px74y28 { Px74y29, Px75y28, Px73y28, Px74y27 } CellNode (74 @ 28) (20)Px74y29 { Px73y29, Px74y28, Px74y30, Px75y29 } CellNode (74 @ 29) (20)Px74y3 { Px74y2, Px73y3, Px74y4, Px75y3 } CellNode (74 @ 3) (20)Px74y30 { Px75y30, Px74y29, Px74y31, Px73y30 } CellNode (74 @ 30) (20)Px74y31 { Px75y31, Px73y31, Px74y32, Px74y30 } CellNode (74 @ 31) (20)Px74y32 { Px75y32, Px73y32, Px74y33, Px74y31 } CellNode (74 @ 32) (20)Px74y33 { Px74y32, Px74y34, Px73y33, Px75y33 } CellNode (74 @ 33) (20)Px74y34 { Px73y34, Px75y34, Px74y33, Px74y35 } CellNode (74 @ 34) (20)Px74y35 { Px74y36, Px73y35, Px75y35, Px74y34 } CellNode (74 @ 35) (20)Px74y36 { Px75y36, Px73y36, Px74y37, Px74y35 } CellNode (74 @ 36) (20)Px74y37 { Px73y37, Px74y36, Px74y38, Px75y37 } CellNode (74 @ 37) (20)Px74y38 { Px75y38, Px73y38, Px74y39, Px74y37 } CellNode (74 @ 38) (20)Px74y39 { Px75y39, Px73y39, Px74y38, Px74y40 } CellNode (74 @ 39) (20)Px74y4 { Px74y3, Px75y4, Px74y5, Px73y4 } CellNode (74 @ 4) (20)Px74y40 { Px74y39, Px74y41, Px75y40, Px73y40 } CellNode (74 @ 40) (20)Px74y41 { Px74y40, Px74y42, Px75y41, Px73y41 } CellNode (74 @ 41) (20)Px74y42 { Px75y42, Px74y41, Px73y42, Px74y43 } CellNode (74 @ 42) (20)Px74y43 { Px74y44, Px75y43, Px73y43, Px74y42 } CellNode (74 @ 43) (20)Px74y44 { Px74y45, Px75y44, Px74y43, Px73y44 } CellNode (74 @ 44) (20)Px74y45 { Px74y44, Px73y45, Px74y46, Px75y45 } CellNode (74 @ 45) (20)Px74y46 { Px75y46, Px73y46, Px74y45, Px74y47 } CellNode (74 @ 46) (20)Px74y47 { Px74y48, Px75y47, Px73y47, Px74y46 } CellNode (74 @ 47) (20)Px74y48 { Px74y47, Px74y49, Px75y48, Px73y48 } CellNode (74 @ 48) (20)Px74y49 { Px75y49, Px74y48, Px73y49, Px74y50 } CellNode (74 @ 49) (20)Px74y5 { Px73y5, Px74y6, Px75y5, Px74y4 } CellNode (74 @ 5) (20)Px74y50 { Px73y50, Px74y51, Px74y49, Px75y50 } CellNode (74 @ 50) (20)Px74y51 { Px74y52, Px73y51, Px75y51, Px74y50 } CellNode (74 @ 51) (20)Px74y52 { Px74y53, Px73y52, Px75y52, Px74y51 } CellNode (74 @ 52) (20)Px74y53 { Px75y53, Px74y52, Px74y54, Px73y53 } CellNode (74 @ 53) (20)Px74y54 { Px75y54, Px74y55, Px73y54, Px74y53 } CellNode (74 @ 54) (20)Px74y55 { Px74y56, Px75y55, Px73y55, Px74y54 } CellNode (74 @ 55) (20)Px74y56 { Px74y55, Px75y56, Px73y56, Px74y57 } CellNode (74 @ 56) (20)Px74y57 { Px73y57, Px74y58, Px74y56, Px75y57 } CellNode (74 @ 57) (20)Px74y58 { Px74y59, Px73y58, Px75y58, Px74y57 } CellNode (74 @ 58) (20)Px74y59 { Px74y60, Px75y59, Px73y59, Px74y58 } CellNode (74 @ 59) (20)Px74y6 { Px74y7, Px73y6, Px75y6, Px74y5 } CellNode (74 @ 6) (20)Px74y60 { Px74y59, Px74y61, Px75y60, Px73y60 } CellNode (74 @ 60) (20)Px74y61 { Px73y61, Px74y60, Px74y62, Px75y61 } CellNode (74 @ 61) (20)Px74y62 { Px75y62, Px73y62, Px74y61, Px74y63 } CellNode (74 @ 62) (20)Px74y63 { Px74y64, Px75y63, Px74y62, Px73y63 } CellNode (74 @ 63) (20)Px74y64 { Px74y63, Px74y65, Px75y64, Px73y64 } CellNode (74 @ 64) (20)Px74y65 { Px75y65, Px74y64, Px73y65, Px74y66 } CellNode (74 @ 65) (20)Px74y66 { Px74y67, Px75y66, Px74y65, Px73y66 } CellNode (74 @ 66) (20)Px74y67 { Px73y67, Px74y66, Px75y67 } CellNode (74 @ 67) (20)Px74y7 { Px74y6, Px75y7, Px74y8, Px73y7 } CellNode (74 @ 7) (20)Px74y8 { Px74y9, Px75y8, Px74y7, Px73y8 } CellNode (74 @ 8) (20)Px74y9 { Px73y9, Px74y10, Px75y9, Px74y8 } CellNode (74 @ 9) (20)Px75y1 { Px75y2, Px76y1, Px74y1 } CellNode (75 @ 1) (20)Px75y10 { Px76y10, Px74y10, Px75y9, Px75y11 } CellNode (75 @ 10) (20)Px75y11 { Px76y11, Px75y12, Px75y10, Px74y11 } CellNode (75 @ 11) (20)Px75y12 { Px75y11, Px76y12, Px75y13, Px74y12 } CellNode (75 @ 12) (20)Px75y13 { Px74y13, Px75y12, Px76y13, Px75y14 } CellNode (75 @ 13) (20)Px75y14 { Px76y14, Px75y15, Px75y13, Px74y14 } CellNode (75 @ 14) (20)Px75y15 { Px76y15, Px75y16, Px75y14, Px74y15 } CellNode (75 @ 15) (20)Px75y16 { Px75y15, Px74y16, Px76y16, Px75y17 } CellNode (75 @ 16) (20)Px75y17 { Px76y17, Px74y17, Px75y16, Px75y18 } CellNode (75 @ 17) (20)Px75y18 { Px75y19, Px76y18, Px74y18, Px75y17 } CellNode (75 @ 18) (20)Px75y19 { Px75y18, Px75y20, Px76y19, Px74y19 } CellNode (75 @ 19) (20)Px75y2 { Px74y2, Px76y2, Px75y1, Px75y3 } CellNode (75 @ 2) (20)Px75y20 { Px75y19, Px75y21, Px74y20, Px76y20 } CellNode (75 @ 20) (20)Px75y21 { Px74y21, Px75y22, Px75y20, Px76y21 } CellNode (75 @ 21) (20)Px75y22 { Px76y22, Px74y22, Px75y23, Px75y21 } CellNode (75 @ 22) (20)Px75y23 { Px76y23, Px74y23, Px75y24, Px75y22 } CellNode (75 @ 23) (20)Px75y24 { Px74y24, Px75y23, Px76y24, Px75y25 } CellNode (75 @ 24) (20)Px75y25 { Px75y26, Px76y25, Px74y25, Px75y24 } CellNode (75 @ 25) (20)Px75y26 { Px75y27, Px74y26, Px76y26, Px75y25 } CellNode (75 @ 26) (20)Px75y27 { Px75y26, Px75y28, Px74y27, Px76y27 } CellNode (75 @ 27) (20)Px75y28 { Px74y28, Px75y27, Px75y29, Px76y28 } CellNode (75 @ 28) (20)Px75y29 { Px76y29, Px74y29, Px75y28, Px75y30 } CellNode (75 @ 29) (20)Px75y3 { Px74y3, Px75y4, Px75y2, Px76y3 } CellNode (75 @ 3) (20)Px75y30 { Px75y31, Px76y30, Px74y30, Px75y29 } CellNode (75 @ 30) (20)Px75y31 { Px75y32, Px76y31, Px74y31, Px75y30 } CellNode (75 @ 31) (20)Px75y32 { Px75y31, Px74y32, Px76y32, Px75y33 } CellNode (75 @ 32) (20)Px75y33 { Px75y34, Px75y32, Px74y33, Px76y33 } CellNode (75 @ 33) (20)Px75y34 { Px76y34, Px75y35, Px74y34, Px75y33 } CellNode (75 @ 34) (20)Px75y35 { Px75y34, Px75y36, Px76y35, Px74y35 } CellNode (75 @ 35) (20)Px75y36 { Px74y36, Px75y35, Px75y37, Px76y36 } CellNode (75 @ 36) (20)Px75y37 { Px75y38, Px76y37, Px75y36, Px74y37 } CellNode (75 @ 37) (20)Px75y38 { Px76y38, Px75y39, Px74y38, Px75y37 } CellNode (75 @ 38) (20)Px75y39 { Px74y39, Px75y38, Px75y40, Px76y39 } CellNode (75 @ 39) (20)Px75y4 { Px76y4, Px74y4, Px75y5, Px75y3 } CellNode (75 @ 4) (20)Px75y40 { Px74y40, Px75y39, Px76y40, Px75y41 } CellNode (75 @ 40) (20)Px75y41 { Px76y41, Px74y41, Px75y42, Px75y40 } CellNode (75 @ 41) (20)Px75y42 { Px76y42, Px74y42, Px75y43, Px75y41 } CellNode (75 @ 42) (20)Px75y43 { Px75y42, Px75y44, Px74y43, Px76y43 } CellNode (75 @ 43) (20)Px75y44 { Px74y44, Px76y44, Px75y43, Px75y45 } CellNode (75 @ 44) (20)Px75y45 { Px75y46, Px74y45, Px76y45, Px75y44 } CellNode (75 @ 45) (20)Px75y46 { Px75y47, Px74y46, Px76y46, Px75y45 } CellNode (75 @ 46) (20)Px75y47 { Px75y48, Px75y46, Px76y47, Px74y47 } CellNode (75 @ 47) (20)Px75y48 { Px76y48, Px74y48, Px75y49, Px75y47 } CellNode (75 @ 48) (20)Px75y49 { Px76y49, Px74y49, Px75y48, Px75y50 } CellNode (75 @ 49) (20)Px75y5 { Px75y4, Px76y5, Px75y6, Px74y5 } CellNode (75 @ 5) (20)Px75y50 { Px75y49, Px75y51, Px76y50, Px74y50 } CellNode (75 @ 50) (20)Px75y51 { Px74y51, Px75y52, Px76y51, Px75y50 } CellNode (75 @ 51) (20)Px75y52 { Px76y52, Px74y52, Px75y51, Px75y53 } CellNode (75 @ 52) (20)Px75y53 { Px75y54, Px76y53, Px74y53, Px75y52 } CellNode (75 @ 53) (20)Px75y54 { Px75y55, Px76y54, Px74y54, Px75y53 } CellNode (75 @ 54) (20)Px75y55 { Px75y54, Px74y55, Px75y56, Px76y55 } CellNode (75 @ 55) (20)Px75y56 { Px76y56, Px74y56, Px75y55, Px75y57 } CellNode (75 @ 56) (20)Px75y57 { Px75y58, Px76y57, Px75y56, Px74y57 } CellNode (75 @ 57) (20)Px75y58 { Px74y58, Px75y59, Px76y58, Px75y57 } CellNode (75 @ 58) (20)Px75y59 { Px76y59, Px74y59, Px75y58, Px75y60 } CellNode (75 @ 59) (20)Px75y6 { Px74y6, Px75y7, Px76y6, Px75y5 } CellNode (75 @ 6) (20)Px75y60 { Px75y61, Px74y60, Px75y59, Px76y60 } CellNode (75 @ 60) (20)Px75y61 { Px75y62, Px76y61, Px74y61, Px75y60 } CellNode (75 @ 61) (20)Px75y62 { Px75y63, Px74y62, Px76y62, Px75y61 } CellNode (75 @ 62) (20)Px75y63 { Px76y63, Px75y62, Px75y64, Px74y63 } CellNode (75 @ 63) (20)Px75y64 { Px75y65, Px74y64, Px76y64, Px75y63 } CellNode (75 @ 64) (20)Px75y65 { Px75y66, Px74y65, Px76y65, Px75y64 } CellNode (75 @ 65) (20)Px75y66 { Px75y65, Px75y67, Px74y66, Px76y66 } CellNode (75 @ 66) (20)Px75y67 { Px74y67, Px75y66, Px76y67 } CellNode (75 @ 67) (20)Px75y7 { Px75y8, Px74y7, Px75y6, Px76y7 } CellNode (75 @ 7) (20)Px75y8 { Px75y7, Px76y8, Px75y9, Px74y8 } CellNode (75 @ 8) (20)Px75y9 { Px75y8, Px76y9, Px75y10, Px74y9 } CellNode (75 @ 9) (20)Px76y1 { Px75y1, Px76y2, Px77y1 } CellNode (76 @ 1) (20)Px76y10 { Px76y11, Px76y9, Px77y10, Px75y10 } CellNode (76 @ 10) (20)Px76y11 { Px75y11, Px76y12, Px77y11, Px76y10 } CellNode (76 @ 11) (20)Px76y12 { Px77y12, Px76y11, Px75y12, Px76y13 } CellNode (76 @ 12) (20)Px76y13 { Px76y14, Px77y13, Px76y12, Px75y13 } CellNode (76 @ 13) (20)Px76y14 { Px76y15, Px77y14, Px76y13, Px75y14 } CellNode (76 @ 14) (20)Px76y15 { Px75y15, Px76y14, Px76y16, Px77y15 } CellNode (76 @ 15) (20)Px76y16 { Px77y16, Px76y15, Px75y16, Px76y17 } CellNode (76 @ 16) (20)Px76y17 { Px76y18, Px77y17, Px76y16, Px75y17 } CellNode (76 @ 17) (20)Px76y18 { Px76y17, Px76y19, Px77y18, Px75y18 } CellNode (76 @ 18) (20)Px76y19 { Px77y19, Px75y19, Px76y18, Px76y20 } CellNode (76 @ 19) (20)Px76y2 { Px77y2, Px76y1, Px75y2, Px76y3 } CellNode (76 @ 2) (20)Px76y20 { Px77y20, Px75y20, Px76y19, Px76y21 } CellNode (76 @ 20) (20)Px76y21 { Px76y22, Px77y21, Px75y21, Px76y20 } CellNode (76 @ 21) (20)Px76y22 { Px75y22, Px77y22, Px76y23, Px76y21 } CellNode (76 @ 22) (20)Px76y23 { Px76y22, Px75y23, Px77y23, Px76y24 } CellNode (76 @ 23) (20)Px76y24 { Px77y24, Px76y25, Px76y23, Px75y24 } CellNode (76 @ 24) (20)Px76y25 { Px77y25, Px76y26, Px76y24, Px75y25 } CellNode (76 @ 25) (20)Px76y26 { Px75y26, Px76y25, Px77y26, Px76y27 } CellNode (76 @ 26) (20)Px76y27 { Px76y28, Px75y27, Px76y26, Px77y27 } CellNode (76 @ 27) (20)Px76y28 { Px76y29, Px77y28, Px75y28, Px76y27 } CellNode (76 @ 28) (20)Px76y29 { Px76y30, Px77y29, Px75y29, Px76y28 } CellNode (76 @ 29) (20)Px76y3 { Px76y4, Px76y2, Px77y3, Px75y3 } CellNode (76 @ 3) (20)Px76y30 { Px76y29, Px77y30, Px76y31, Px75y30 } CellNode (76 @ 30) (20)Px76y31 { Px75y31, Px76y30, Px76y32, Px77y31 } CellNode (76 @ 31) (20)Px76y32 { Px77y32, Px75y32, Px76y31, Px76y33 } CellNode (76 @ 32) (20)Px76y33 { Px76y34, Px77y33, Px76y32, Px75y33 } CellNode (76 @ 33) (20)Px76y34 { Px75y34, Px76y35, Px77y34, Px76y33 } CellNode (76 @ 34) (20)Px76y35 { Px77y35, Px76y34, Px75y35, Px76y36 } CellNode (76 @ 35) (20)Px76y36 { Px76y37, Px77y36, Px75y36, Px76y35 } CellNode (76 @ 36) (20)Px76y37 { Px76y38, Px77y37, Px75y37, Px76y36 } CellNode (76 @ 37) (20)Px76y38 { Px75y38, Px76y37, Px76y39, Px77y38 } CellNode (76 @ 38) (20)Px76y39 { Px77y39, Px76y38, Px75y39, Px76y40 } CellNode (76 @ 39) (20)Px76y4 { Px76y5, Px75y4, Px76y3, Px77y4 } CellNode (76 @ 4) (20)Px76y40 { Px77y40, Px76y41, Px75y40, Px76y39 } CellNode (76 @ 40) (20)Px76y41 { Px77y41, Px76y42, Px76y40, Px75y41 } CellNode (76 @ 41) (20)Px76y42 { Px76y41, Px75y42, Px77y42, Px76y43 } CellNode (76 @ 42) (20)Px76y43 { Px76y44, Px75y43, Px76y42, Px77y43 } CellNode (76 @ 43) (20)Px76y44 { Px76y45, Px77y44, Px75y44, Px76y43 } CellNode (76 @ 44) (20)Px76y45 { Px76y44, Px77y45, Px76y46, Px75y45 } CellNode (76 @ 45) (20)Px76y46 { Px75y46, Px76y45, Px77y46, Px76y47 } CellNode (76 @ 46) (20)Px76y47 { Px77y47, Px76y48, Px75y47, Px76y46 } CellNode (76 @ 47) (20)Px76y48 { Px76y49, Px77y48, Px76y47, Px75y48 } CellNode (76 @ 48) (20)Px76y49 { Px76y48, Px75y49, Px76y50, Px77y49 } CellNode (76 @ 49) (20)Px76y5 { Px77y5, Px76y6, Px75y5, Px76y4 } CellNode (76 @ 5) (20)Px76y50 { Px76y51, Px76y49, Px77y50, Px75y50 } CellNode (76 @ 50) (20)Px76y51 { Px77y51, Px76y52, Px75y51, Px76y50 } CellNode (76 @ 51) (20)Px76y52 { Px77y52, Px76y53, Px75y52, Px76y51 } CellNode (76 @ 52) (20)Px76y53 { Px76y52, Px77y53, Px75y53, Px76y54 } CellNode (76 @ 53) (20)Px76y54 { Px75y54, Px76y55, Px76y53, Px77y54 } CellNode (76 @ 54) (20)Px76y55 { Px77y55, Px75y55, Px76y56, Px76y54 } CellNode (76 @ 55) (20)Px76y56 { Px76y57, Px75y56, Px77y56, Px76y55 } CellNode (76 @ 56) (20)Px76y57 { Px77y57, Px76y56, Px76y58, Px75y57 } CellNode (76 @ 57) (20)Px76y58 { Px76y59, Px75y58, Px77y58, Px76y57 } CellNode (76 @ 58) (20)Px76y59 { Px77y59, Px75y59, Px76y58, Px76y60 } CellNode (76 @ 59) (20)Px76y6 { Px76y5, Px77y6, Px75y6, Px76y7 } CellNode (76 @ 6) (20)Px76y60 { Px76y59, Px76y61, Px77y60, Px75y60 } CellNode (76 @ 60) (20)Px76y61 { Px75y61, Px76y62, Px77y61, Px76y60 } CellNode (76 @ 61) (20)Px76y62 { Px77y62, Px75y62, Px76y61, Px76y63 } CellNode (76 @ 62) (20)Px76y63 { Px76y64, Px77y63, Px75y63, Px76y62 } CellNode (76 @ 63) (20)Px76y64 { Px76y65, Px77y64, Px75y64, Px76y63 } CellNode (76 @ 64) (20)Px76y65 { Px75y65, Px76y64, Px76y66, Px77y65 } CellNode (76 @ 65) (20)Px76y66 { Px77y66, Px75y66, Px76y65, Px76y67 } CellNode (76 @ 66) (20)Px76y67 { Px75y67, Px77y67, Px76y66 } CellNode (76 @ 67) (20)Px76y7 { Px75y7, Px76y8, Px76y6, Px77y7 } CellNode (76 @ 7) (20)Px76y8 { Px75y8, Px76y9, Px76y7, Px77y8 } CellNode (76 @ 8) (20)Px76y9 { Px76y8, Px77y9, Px75y9, Px76y10 } CellNode (76 @ 9) (20)Px77y1 { Px76y1, Px77y2, Px78y1 } CellNode (77 @ 1) (20)Px77y10 { Px77y9, Px76y10, Px77y11, Px78y10 } CellNode (77 @ 10) (20)Px77y11 { Px78y11, Px76y11, Px77y12, Px77y10 } CellNode (77 @ 11) (20)Px77y12 { Px77y13, Px76y12, Px78y12, Px77y11 } CellNode (77 @ 12) (20)Px77y13 { Px77y12, Px78y13, Px76y13, Px77y14 } CellNode (77 @ 13) (20)Px77y14 { Px76y14, Px77y15, Px77y13, Px78y14 } CellNode (77 @ 14) (20)Px77y15 { Px77y16, Px76y15, Px78y15, Px77y14 } CellNode (77 @ 15) (20)Px77y16 { Px78y16, Px77y17, Px76y16, Px77y15 } CellNode (77 @ 16) (20)Px77y17 { Px77y18, Px77y16, Px78y17, Px76y17 } CellNode (77 @ 17) (20)Px77y18 { Px77y19, Px78y18, Px76y18, Px77y17 } CellNode (77 @ 18) (20)Px77y19 { Px78y19, Px76y19, Px77y18, Px77y20 } CellNode (77 @ 19) (20)Px77y2 { Px76y2, Px77y3, Px78y2, Px77y1 } CellNode (77 @ 2) (20)Px77y20 { Px77y19, Px77y21, Px78y20, Px76y20 } CellNode (77 @ 20) (20)Px77y21 { Px77y20, Px77y22, Px78y21, Px76y21 } CellNode (77 @ 21) (20)Px77y22 { Px78y22, Px76y22, Px77y21, Px77y23 } CellNode (77 @ 22) (20)Px77y23 { Px77y24, Px78y23, Px77y22, Px76y23 } CellNode (77 @ 23) (20)Px77y24 { Px77y25, Px78y24, Px77y23, Px76y24 } CellNode (77 @ 24) (20)Px77y25 { Px77y24, Px76y25, Px77y26, Px78y25 } CellNode (77 @ 25) (20)Px77y26 { Px78y26, Px77y25, Px76y26, Px77y27 } CellNode (77 @ 26) (20)Px77y27 { Px77y28, Px78y27, Px77y26, Px76y27 } CellNode (77 @ 27) (20)Px77y28 { Px76y28, Px77y29, Px78y28, Px77y27 } CellNode (77 @ 28) (20)Px77y29 { Px78y29, Px76y29, Px77y28, Px77y30 } CellNode (77 @ 29) (20)Px77y3 { Px78y3, Px77y2, Px76y3, Px77y4 } CellNode (77 @ 3) (20)Px77y30 { Px77y31, Px76y30, Px77y29, Px78y30 } CellNode (77 @ 30) (20)Px77y31 { Px78y31, Px77y32, Px77y30, Px76y31 } CellNode (77 @ 31) (20)Px77y32 { Px77y33, Px76y32, Px78y32, Px77y31 } CellNode (77 @ 32) (20)Px77y33 { Px78y33, Px77y32, Px77y34, Px76y33 } CellNode (77 @ 33) (20)Px77y34 { Px78y34, Px76y34, Px77y35, Px77y33 } CellNode (77 @ 34) (20)Px77y35 { Px77y36, Px78y35, Px76y35, Px77y34 } CellNode (77 @ 35) (20)Px77y36 { Px77y35, Px78y36, Px76y36, Px77y37 } CellNode (77 @ 36) (20)Px77y37 { Px77y38, Px76y37, Px77y36, Px78y37 } CellNode (77 @ 37) (20)Px77y38 { Px78y38, Px76y38, Px77y39, Px77y37 } CellNode (77 @ 38) (20)Px77y39 { Px77y40, Px78y39, Px76y39, Px77y38 } CellNode (77 @ 39) (20)Px77y4 { Px77y5, Px77y3, Px78y4, Px76y4 } CellNode (77 @ 4) (20)Px77y40 { Px77y39, Px77y41, Px78y40, Px76y40 } CellNode (77 @ 40) (20)Px77y41 { Px76y41, Px77y40, Px77y42, Px78y41 } CellNode (77 @ 41) (20)Px77y42 { Px78y42, Px77y41, Px76y42, Px77y43 } CellNode (77 @ 42) (20)Px77y43 { Px77y44, Px78y43, Px77y42, Px76y43 } CellNode (77 @ 43) (20)Px77y44 { Px76y44, Px77y45, Px78y44, Px77y43 } CellNode (77 @ 44) (20)Px77y45 { Px78y45, Px76y45, Px77y44, Px77y46 } CellNode (77 @ 45) (20)Px77y46 { Px77y47, Px78y46, Px77y45, Px76y46 } CellNode (77 @ 46) (20)Px77y47 { Px77y48, Px78y47, Px76y47, Px77y46 } CellNode (77 @ 47) (20)Px77y48 { Px76y48, Px77y47, Px77y49, Px78y48 } CellNode (77 @ 48) (20)Px77y49 { Px78y49, Px76y49, Px77y48, Px77y50 } CellNode (77 @ 49) (20)Px77y5 { Px77y6, Px76y5, Px77y4, Px78y5 } CellNode (77 @ 5) (20)Px77y50 { Px78y50, Px77y51, Px76y50, Px77y49 } CellNode (77 @ 50) (20)Px77y51 { Px78y51, Px77y52, Px77y50, Px76y51 } CellNode (77 @ 51) (20)Px77y52 { Px76y52, Px77y51, Px78y52, Px77y53 } CellNode (77 @ 52) (20)Px77y53 { Px77y54, Px77y52, Px76y53, Px78y53 } CellNode (77 @ 53) (20)Px77y54 { Px77y55, Px78y54, Px77y53, Px76y54 } CellNode (77 @ 54) (20)Px77y55 { Px76y55, Px77y56, Px78y55, Px77y54 } CellNode (77 @ 55) (20)Px77y56 { Px77y55, Px76y56, Px78y56, Px77y57 } CellNode (77 @ 56) (20)Px77y57 { Px78y57, Px77y58, Px76y57, Px77y56 } CellNode (77 @ 57) (20)Px77y58 { Px78y58, Px77y59, Px76y58, Px77y57 } CellNode (77 @ 58) (20)Px77y59 { Px76y59, Px77y58, Px77y60, Px78y59 } CellNode (77 @ 59) (20)Px77y6 { Px77y5, Px76y6, Px77y7, Px78y6 } CellNode (77 @ 6) (20)Px77y60 { Px76y60, Px77y59, Px78y60, Px77y61 } CellNode (77 @ 60) (20)Px77y61 { Px78y61, Px76y61, Px77y62, Px77y60 } CellNode (77 @ 61) (20)Px77y62 { Px77y63, Px76y62, Px78y62, Px77y61 } CellNode (77 @ 62) (20)Px77y63 { Px77y62, Px77y64, Px76y63, Px78y63 } CellNode (77 @ 63) (20)Px77y64 { Px76y64, Px77y65, Px77y63, Px78y64 } CellNode (77 @ 64) (20)Px77y65 { Px77y66, Px78y65, Px76y65, Px77y64 } CellNode (77 @ 65) (20)Px77y66 { Px78y66, Px77y67, Px76y66, Px77y65 } CellNode (77 @ 66) (20)Px77y67 { Px76y67, Px77y66, Px78y67 } CellNode (77 @ 67) (20)Px77y7 { Px78y7, Px77y6, Px77y8, Px76y7 } CellNode (77 @ 7) (20)Px77y8 { Px76y8, Px77y9, Px78y8, Px77y7 } CellNode (77 @ 8) (20)Px77y9 { Px76y9, Px77y10, Px78y9, Px77y8 } CellNode (77 @ 9) (20)Px78y1 { Px77y1, Px78y2 } CellNode (78 @ 1) (20)Px78y10 { Px77y10, Px78y11, Px78y9 } CellNode (78 @ 10) (20)Px78y11 { Px77y11, Px78y10, Px78y12 } CellNode (78 @ 11) (20)Px78y12 { Px78y13, Px78y11, Px77y12 } CellNode (78 @ 12) (20)Px78y13 { Px77y13, Px78y14, Px78y12 } CellNode (78 @ 13) (20)Px78y14 { Px78y13, Px78y15, Px77y14 } CellNode (78 @ 14) (20)Px78y15 { Px78y16, Px77y15, Px78y14 } CellNode (78 @ 15) (20)Px78y16 { Px78y17, Px77y16, Px78y15 } CellNode (78 @ 16) (20)Px78y17 { Px78y16, Px77y17, Px78y18 } CellNode (78 @ 17) (20)Px78y18 { Px78y17, Px77y18, Px78y19 } CellNode (78 @ 18) (20)Px78y19 { Px77y19, Px78y18, Px78y20 } CellNode (78 @ 19) (20)Px78y2 { Px77y2, Px78y3, Px78y1 } CellNode (78 @ 2) (20)Px78y20 { Px78y19, Px77y20, Px78y21 } CellNode (78 @ 20) (20)Px78y21 { Px78y20, Px77y21, Px78y22 } CellNode (78 @ 21) (20)Px78y22 { Px78y21, Px77y22, Px78y23 } CellNode (78 @ 22) (20)Px78y23 { Px78y22, Px77y23, Px78y24 } CellNode (78 @ 23) (20)Px78y24 { Px78y25, Px77y24, Px78y23 } CellNode (78 @ 24) (20)Px78y25 { Px78y26, Px77y25, Px78y24 } CellNode (78 @ 25) (20)Px78y26 { Px78y25, Px77y26, Px78y27 } CellNode (78 @ 26) (20)Px78y27 { Px78y26, Px77y27, Px78y28 } CellNode (78 @ 27) (20)Px78y28 { Px78y29, Px77y28, Px78y27 } CellNode (78 @ 28) (20)Px78y29 { Px78y30, Px77y29, Px78y28 } CellNode (78 @ 29) (20)Px78y3 { Px77y3, Px78y2, Px78y4 } CellNode (78 @ 3) (20)Px78y30 { Px77y30, Px78y31, Px78y29 } CellNode (78 @ 30) (20)Px78y31 { Px78y30, Px78y32, Px77y31 } CellNode (78 @ 31) (20)Px78y32 { Px78y31, Px77y32, Px78y33 } CellNode (78 @ 32) (20)Px78y33 { Px77y33, Px78y34, Px78y32 } CellNode (78 @ 33) (20)Px78y34 { Px78y35, Px77y34, Px78y33 } CellNode (78 @ 34) (20)Px78y35 { Px78y36, Px78y34, Px77y35 } CellNode (78 @ 35) (20)Px78y36 { Px77y36, Px78y37, Px78y35 } CellNode (78 @ 36) (20)Px78y37 { Px77y37, Px78y36, Px78y38 } CellNode (78 @ 37) (20)Px78y38 { Px78y39, Px78y37, Px77y38 } CellNode (78 @ 38) (20)Px78y39 { Px78y40, Px78y38, Px77y39 } CellNode (78 @ 39) (20)Px78y4 { Px77y4, Px78y3, Px78y5 } CellNode (78 @ 4) (20)Px78y40 { Px77y40, Px78y41, Px78y39 } CellNode (78 @ 40) (20)Px78y41 { Px77y41, Px78y42, Px78y40 } CellNode (78 @ 41) (20)Px78y42 { Px77y42, Px78y41, Px78y43 } CellNode (78 @ 42) (20)Px78y43 { Px77y43, Px78y44, Px78y42 } CellNode (78 @ 43) (20)Px78y44 { Px77y44, Px78y45, Px78y43 } CellNode (78 @ 44) (20)Px78y45 { Px77y45, Px78y46, Px78y44 } CellNode (78 @ 45) (20)Px78y46 { Px77y46, Px78y47, Px78y45 } CellNode (78 @ 46) (20)Px78y47 { Px77y47, Px78y46, Px78y48 } CellNode (78 @ 47) (20)Px78y48 { Px77y48, Px78y47, Px78y49 } CellNode (78 @ 48) (20)Px78y49 { Px77y49, Px78y48, Px78y50 } CellNode (78 @ 49) (20)Px78y5 { Px77y5, Px78y6, Px78y4 } CellNode (78 @ 5) (20)Px78y50 { Px78y51, Px78y49, Px77y50 } CellNode (78 @ 50) (20)Px78y51 { Px78y50, Px78y52, Px77y51 } CellNode (78 @ 51) (20)Px78y52 { Px77y52, Px78y51, Px78y53 } CellNode (78 @ 52) (20)Px78y53 { Px78y54, Px78y52, Px77y53 } CellNode (78 @ 53) (20)Px78y54 { Px77y54, Px78y55, Px78y53 } CellNode (78 @ 54) (20)Px78y55 { Px78y54, Px78y56, Px77y55 } CellNode (78 @ 55) (20)Px78y56 { Px78y57, Px78y55, Px77y56 } CellNode (78 @ 56) (20)Px78y57 { Px77y57, Px78y56, Px78y58 } CellNode (78 @ 57) (20)Px78y58 { Px78y57, Px77y58, Px78y59 } CellNode (78 @ 58) (20)Px78y59 { Px77y59, Px78y60, Px78y58 } CellNode (78 @ 59) (20)Px78y6 { Px77y6, Px78y7, Px78y5 } CellNode (78 @ 6) (20)Px78y60 { Px78y59, Px78y61, Px77y60 } CellNode (78 @ 60) (20)Px78y61 { Px78y62, Px77y61, Px78y60 } CellNode (78 @ 61) (20)Px78y62 { Px78y63, Px78y61, Px77y62 } CellNode (78 @ 62) (20)Px78y63 { Px78y62, Px78y64, Px77y63 } CellNode (78 @ 63) (20)Px78y64 { Px77y64, Px78y63, Px78y65 } CellNode (78 @ 64) (20)Px78y65 { Px78y66, Px78y64, Px77y65 } CellNode (78 @ 65) (20)Px78y66 { Px78y65, Px78y67, Px77y66 } CellNode (78 @ 66) (20)Px78y67 { Px78y66, Px77y67 } CellNode (78 @ 67) (20)Px78y7 { Px77y7, Px78y6, Px78y8 } CellNode (78 @ 7) (20)Px78y8 { Px77y8, Px78y9, Px78y7 } CellNode (78 @ 8) (20)Px78y9 { Px78y10, Px77y9, Px78y8 } CellNode (78 @ 9) (20)Px7y1 { Px7y2, Px8y1, Px6y1 } CellNode (7 @ 1) (20)Px7y10 { Px7y9, Px7y11, Px8y10, Px6y10 } CellNode (7 @ 10) (20)Px7y11 { Px8y11, Px6y11, Px7y10, Px7y12 } CellNode (7 @ 11) (20)Px7y12 { Px7y13, Px8y12, Px6y12, Px7y11 } CellNode (7 @ 12) (20)Px7y13 { Px7y14, Px8y13, Px6y13, Px7y12 } CellNode (7 @ 13) (20)Px7y14 { Px7y13, Px6y14, Px7y15, Px8y14 } CellNode (7 @ 14) (20)Px7y15 { Px8y15, Px7y14, Px6y15, Px7y16 } CellNode (7 @ 15) (20)Px7y16 { Px7y17, Px8y16, Px7y15, Px6y16 } CellNode (7 @ 16) (20)Px7y17 { Px7y16, Px7y18, Px8y17, Px6y17 } CellNode (7 @ 17) (20)Px7y18 { Px8y18, Px7y17, Px6y18, Px7y19 } CellNode (7 @ 18) (20)Px7y19 { Px8y19, Px7y18, Px6y19, Px7y20 } CellNode (7 @ 19) (20)Px7y2 { Px6y2, Px7y3, Px8y2, Px7y1 } CellNode (7 @ 2) (20)Px7y20 { Px8y20, Px7y21, Px6y20, Px7y19 } CellNode (7 @ 20) (20)Px7y21 { Px6y21, Px7y22, Px8y21, Px7y20 } CellNode (7 @ 21) (20)Px7y22 { Px7y21, Px6y22, Px8y22, Px7y23 } CellNode (7 @ 22) (20)Px7y23 { Px8y23, Px7y24, Px7y22, Px6y23 } CellNode (7 @ 23) (20)Px7y24 { Px8y24, Px7y25, Px6y24, Px7y23 } CellNode (7 @ 24) (20)Px7y25 { Px6y25, Px7y24, Px7y26, Px8y25 } CellNode (7 @ 25) (20)Px7y26 { Px8y26, Px7y25, Px6y26, Px7y27 } CellNode (7 @ 26) (20)Px7y27 { Px7y28, Px8y27, Px7y26, Px6y27 } CellNode (7 @ 27) (20)Px7y28 { Px6y28, Px8y28, Px7y29, Px7y27 } CellNode (7 @ 28) (20)Px7y29 { Px7y28, Px6y29, Px7y30, Px8y29 } CellNode (7 @ 29) (20)Px7y3 { Px7y4, Px6y3, Px7y2, Px8y3 } CellNode (7 @ 3) (20)Px7y30 { Px6y30, Px7y31, Px7y29, Px8y30 } CellNode (7 @ 30) (20)Px7y31 { Px8y31, Px6y31, Px7y32, Px7y30 } CellNode (7 @ 31) (20)Px7y32 { Px7y33, Px6y32, Px8y32, Px7y31 } CellNode (7 @ 32) (20)Px7y33 { Px8y33, Px7y32, Px7y34, Px6y33 } CellNode (7 @ 33) (20)Px7y34 { Px8y34, Px6y34, Px7y35, Px7y33 } CellNode (7 @ 34) (20)Px7y35 { Px8y35, Px6y35, Px7y36, Px7y34 } CellNode (7 @ 35) (20)Px7y36 { Px7y35, Px7y37, Px8y36, Px6y36 } CellNode (7 @ 36) (20)Px7y37 { Px8y37, Px6y37, Px7y36, Px7y38 } CellNode (7 @ 37) (20)Px7y38 { Px8y38, Px6y38, Px7y37, Px7y39 } CellNode (7 @ 38) (20)Px7y39 { Px7y40, Px8y39, Px6y39, Px7y38 } CellNode (7 @ 39) (20)Px7y4 { Px7y3, Px8y4, Px6y4, Px7y5 } CellNode (7 @ 4) (20)Px7y40 { Px7y41, Px8y40, Px6y40, Px7y39 } CellNode (7 @ 40) (20)Px7y41 { Px6y41, Px7y40, Px7y42, Px8y41 } CellNode (7 @ 41) (20)Px7y42 { Px7y43, Px7y41, Px6y42, Px8y42 } CellNode (7 @ 42) (20)Px7y43 { Px8y43, Px7y44, Px7y42, Px6y43 } CellNode (7 @ 43) (20)Px7y44 { Px6y44, Px8y44, Px7y45, Px7y43 } CellNode (7 @ 44) (20)Px7y45 { Px7y44, Px6y45, Px8y45, Px7y46 } CellNode (7 @ 45) (20)Px7y46 { Px8y46, Px7y47, Px6y46, Px7y45 } CellNode (7 @ 46) (20)Px7y47 { Px7y48, Px8y47, Px6y47, Px7y46 } CellNode (7 @ 47) (20)Px7y48 { Px6y48, Px7y47, Px8y48, Px7y49 } CellNode (7 @ 48) (20)Px7y49 { Px7y48, Px6y49, Px7y50, Px8y49 } CellNode (7 @ 49) (20)Px7y5 { Px7y6, Px8y5, Px7y4, Px6y5 } CellNode (7 @ 5) (20)Px7y50 { Px8y50, Px6y50, Px7y51, Px7y49 } CellNode (7 @ 50) (20)Px7y51 { Px8y51, Px6y51, Px7y52, Px7y50 } CellNode (7 @ 51) (20)Px7y52 { Px7y51, Px8y52, Px6y52, Px7y53 } CellNode (7 @ 52) (20)Px7y53 { Px6y53, Px8y53, Px7y52, Px7y54 } CellNode (7 @ 53) (20)Px7y54 { Px7y55, Px6y54, Px8y54, Px7y53 } CellNode (7 @ 54) (20)Px7y55 { Px8y55, Px7y56, Px6y55, Px7y54 } CellNode (7 @ 55) (20)Px7y56 { Px8y56, Px7y55, Px7y57, Px6y56 } CellNode (7 @ 56) (20)Px7y57 { Px8y57, Px6y57, Px7y58, Px7y56 } CellNode (7 @ 57) (20)Px7y58 { Px8y58, Px6y58, Px7y59, Px7y57 } CellNode (7 @ 58) (20)Px7y59 { Px7y58, Px7y60, Px8y59, Px6y59 } CellNode (7 @ 59) (20)Px7y6 { Px7y7, Px6y6, Px8y6, Px7y5 } CellNode (7 @ 6) (20)Px7y60 { Px7y59, Px7y61, Px8y60, Px6y60 } CellNode (7 @ 60) (20)Px7y61 { Px8y61, Px6y61, Px7y60, Px7y62 } CellNode (7 @ 61) (20)Px7y62 { Px7y63, Px8y62, Px7y61, Px6y62 } CellNode (7 @ 62) (20)Px7y63 { Px7y64, Px8y63, Px7y62, Px6y63 } CellNode (7 @ 63) (20)Px7y64 { Px7y63, Px6y64, Px7y65, Px8y64 } CellNode (7 @ 64) (20)Px7y65 { Px8y65, Px6y65, Px7y64, Px7y66 } CellNode (7 @ 65) (20)Px7y66 { Px7y67, Px8y66, Px6y66, Px7y65 } CellNode (7 @ 66) (20)Px7y67 { Px7y66, Px6y67, Px8y67 } CellNode (7 @ 67) (20)Px7y7 { Px8y7, Px6y7, Px7y8, Px7y6 } CellNode (7 @ 7) (20)Px7y8 { Px7y7, Px8y8, Px6y8, Px7y9 } CellNode (7 @ 8) (20)Px7y9 { Px7y10, Px8y9, Px7y8, Px6y9 } CellNode (7 @ 9) (20)Px8y1 { Px7y1, Px8y2, Px9y1 } CellNode (8 @ 1) (20)Px8y10 { Px9y10, Px7y10, Px8y11, Px8y9 } CellNode (8 @ 10) (20)Px8y11 { Px8y12, Px7y11, Px9y11, Px8y10 } CellNode (8 @ 11) (20)Px8y12 { Px8y11, Px9y12, Px7y12, Px8y13 } CellNode (8 @ 12) (20)Px8y13 { Px8y14, Px7y13, Px8y12, Px9y13 } CellNode (8 @ 13) (20)Px8y14 { Px8y15, Px7y14, Px9y14, Px8y13 } CellNode (8 @ 14) (20)Px8y15 { Px9y15, Px7y15, Px8y16, Px8y14 } CellNode (8 @ 15) (20)Px8y16 { Px8y17, Px8y15, Px9y16, Px7y16 } CellNode (8 @ 16) (20)Px8y17 { Px9y17, Px7y17, Px8y18, Px8y16 } CellNode (8 @ 17) (20)Px8y18 { Px8y19, Px7y18, Px9y18, Px8y17 } CellNode (8 @ 18) (20)Px8y19 { Px8y18, Px8y20, Px9y19, Px7y19 } CellNode (8 @ 19) (20)Px8y2 { Px8y1, Px9y2, Px8y3, Px7y2 } CellNode (8 @ 2) (20)Px8y20 { Px8y19, Px8y21, Px9y20, Px7y20 } CellNode (8 @ 20) (20)Px8y21 { Px9y21, Px7y21, Px8y20, Px8y22 } CellNode (8 @ 21) (20)Px8y22 { Px8y23, Px9y22, Px7y22, Px8y21 } CellNode (8 @ 22) (20)Px8y23 { Px8y24, Px9y23, Px7y23, Px8y22 } CellNode (8 @ 23) (20)Px8y24 { Px8y23, Px7y24, Px8y25, Px9y24 } CellNode (8 @ 24) (20)Px8y25 { Px9y25, Px7y25, Px8y24, Px8y26 } CellNode (8 @ 25) (20)Px8y26 { Px8y27, Px9y26, Px7y26, Px8y25 } CellNode (8 @ 26) (20)Px8y27 { Px8y26, Px8y28, Px9y27, Px7y27 } CellNode (8 @ 27) (20)Px8y28 { Px9y28, Px8y27, Px7y28, Px8y29 } CellNode (8 @ 28) (20)Px8y29 { Px9y29, Px8y28, Px7y29, Px8y30 } CellNode (8 @ 29) (20)Px8y3 { Px8y4, Px7y3, Px8y2, Px9y3 } CellNode (8 @ 3) (20)Px8y30 { Px9y30, Px8y31, Px7y30, Px8y29 } CellNode (8 @ 30) (20)Px8y31 { Px7y31, Px9y31, Px8y32, Px8y30 } CellNode (8 @ 31) (20)Px8y32 { Px8y31, Px7y32, Px9y32, Px8y33 } CellNode (8 @ 32) (20)Px8y33 { Px8y34, Px9y33, Px7y33, Px8y32 } CellNode (8 @ 33) (20)Px8y34 { Px8y35, Px9y34, Px7y34, Px8y33 } CellNode (8 @ 34) (20)Px8y35 { Px8y34, Px7y35, Px9y35, Px8y36 } CellNode (8 @ 35) (20)Px8y36 { Px8y37, Px8y35, Px7y36, Px9y36 } CellNode (8 @ 36) (20)Px8y37 { Px9y37, Px8y38, Px7y37, Px8y36 } CellNode (8 @ 37) (20)Px8y38 { Px7y38, Px8y39, Px9y38, Px8y37 } CellNode (8 @ 38) (20)Px8y39 { Px8y38, Px8y40, Px9y39, Px7y39 } CellNode (8 @ 39) (20)Px8y4 { Px8y5, Px7y4, Px9y4, Px8y3 } CellNode (8 @ 4) (20)Px8y40 { Px7y40, Px8y41, Px8y39, Px9y40 } CellNode (8 @ 40) (20)Px8y41 { Px9y41, Px7y41, Px8y40, Px8y42 } CellNode (8 @ 41) (20)Px8y42 { Px8y43, Px9y42, Px7y42, Px8y41 } CellNode (8 @ 42) (20)Px8y43 { Px8y42, Px8y44, Px9y43, Px7y43 } CellNode (8 @ 43) (20)Px8y44 { Px9y44, Px7y44, Px8y43, Px8y45 } CellNode (8 @ 44) (20)Px8y45 { Px8y46, Px9y45, Px8y44, Px7y45 } CellNode (8 @ 45) (20)Px8y46 { Px8y47, Px9y46, Px8y45, Px7y46 } CellNode (8 @ 46) (20)Px8y47 { Px8y46, Px7y47, Px8y48, Px9y47 } CellNode (8 @ 47) (20)Px8y48 { Px9y48, Px7y48, Px8y47, Px8y49 } CellNode (8 @ 48) (20)Px8y49 { Px8y50, Px9y49, Px8y48, Px7y49 } CellNode (8 @ 49) (20)Px8y5 { Px9y5, Px8y4, Px8y6, Px7y5 } CellNode (8 @ 5) (20)Px8y50 { Px9y50, Px8y51, Px7y50, Px8y49 } CellNode (8 @ 50) (20)Px8y51 { Px8y50, Px7y51, Px9y51, Px8y52 } CellNode (8 @ 51) (20)Px8y52 { Px8y53, Px8y51, Px7y52, Px9y52 } CellNode (8 @ 52) (20)Px8y53 { Px9y53, Px8y54, Px8y52, Px7y53 } CellNode (8 @ 53) (20)Px8y54 { Px8y53, Px8y55, Px9y54, Px7y54 } CellNode (8 @ 54) (20)Px8y55 { Px7y55, Px8y54, Px8y56, Px9y55 } CellNode (8 @ 55) (20)Px8y56 { Px8y57, Px9y56, Px8y55, Px7y56 } CellNode (8 @ 56) (20)Px8y57 { Px8y58, Px9y57, Px7y57, Px8y56 } CellNode (8 @ 57) (20)Px8y58 { Px8y57, Px7y58, Px9y58, Px8y59 } CellNode (8 @ 58) (20)Px8y59 { Px8y58, Px7y59, Px8y60, Px9y59 } CellNode (8 @ 59) (20)Px8y6 { Px8y7, Px8y5, Px9y6, Px7y6 } CellNode (8 @ 6) (20)Px8y60 { Px9y60, Px8y61, Px7y60, Px8y59 } CellNode (8 @ 60) (20)Px8y61 { Px9y61, Px7y61, Px8y62, Px8y60 } CellNode (8 @ 61) (20)Px8y62 { Px8y61, Px9y62, Px7y62, Px8y63 } CellNode (8 @ 62) (20)Px8y63 { Px7y63, Px9y63, Px8y62, Px8y64 } CellNode (8 @ 63) (20)Px8y64 { Px8y65, Px7y64, Px9y64, Px8y63 } CellNode (8 @ 64) (20)Px8y65 { Px9y65, Px8y66, Px7y65, Px8y64 } CellNode (8 @ 65) (20)Px8y66 { Px8y67, Px8y65, Px9y66, Px7y66 } CellNode (8 @ 66) (20)Px8y67 { Px8y66, Px7y67, Px9y67 } CellNode (8 @ 67) (20)Px8y7 { Px7y7, Px8y8, Px9y7, Px8y6 } CellNode (8 @ 7) (20)Px8y8 { Px9y8, Px8y9, Px7y8, Px8y7 } CellNode (8 @ 8) (20)Px8y9 { Px8y8, Px9y9, Px8y10, Px7y9 } CellNode (8 @ 9) (20)Px9y1 { Px8y1, Px10y1, Px9y2 } CellNode (9 @ 1) (20)Px9y10 { Px10y10, Px9y9, Px9y11, Px8y10 } CellNode (9 @ 10) (20)Px9y11 { Px9y10, Px8y11, Px10y11, Px9y12 } CellNode (9 @ 11) (20)Px9y12 { Px8y12, Px9y11, Px10y12, Px9y13 } CellNode (9 @ 12) (20)Px9y13 { Px9y14, Px9y12, Px8y13, Px10y13 } CellNode (9 @ 13) (20)Px9y14 { Px8y14, Px10y14, Px9y15, Px9y13 } CellNode (9 @ 14) (20)Px9y15 { Px8y15, Px9y14, Px10y15, Px9y16 } CellNode (9 @ 15) (20)Px9y16 { Px9y17, Px9y15, Px8y16, Px10y16 } CellNode (9 @ 16) (20)Px9y17 { Px10y17, Px9y18, Px9y16, Px8y17 } CellNode (9 @ 17) (20)Px9y18 { Px8y18, Px9y17, Px10y18, Px9y19 } CellNode (9 @ 18) (20)Px9y19 { Px8y19, Px9y18, Px10y19, Px9y20 } CellNode (9 @ 19) (20)Px9y2 { Px10y2, Px8y2, Px9y3, Px9y1 } CellNode (9 @ 2) (20)Px9y20 { Px9y21, Px8y20, Px10y20, Px9y19 } CellNode (9 @ 20) (20)Px9y21 { Px9y22, Px8y21, Px9y20, Px10y21 } CellNode (9 @ 21) (20)Px9y22 { Px10y22, Px9y21, Px9y23, Px8y22 } CellNode (9 @ 22) (20)Px9y23 { Px8y23, Px9y22, Px10y23, Px9y24 } CellNode (9 @ 23) (20)Px9y24 { Px9y25, Px8y24, Px10y24, Px9y23 } CellNode (9 @ 24) (20)Px9y25 { Px9y24, Px9y26, Px8y25, Px10y25 } CellNode (9 @ 25) (20)Px9y26 { Px10y26, Px9y25, Px9y27, Px8y26 } CellNode (9 @ 26) (20)Px9y27 { Px9y28, Px8y27, Px10y27, Px9y26 } CellNode (9 @ 27) (20)Px9y28 { Px9y29, Px8y28, Px9y27, Px10y28 } CellNode (9 @ 28) (20)Px9y29 { Px10y29, Px9y30, Px9y28, Px8y29 } CellNode (9 @ 29) (20)Px9y3 { Px10y3, Px9y2, Px8y3, Px9y4 } CellNode (9 @ 3) (20)Px9y30 { Px10y30, Px9y29, Px9y31, Px8y30 } CellNode (9 @ 30) (20)Px9y31 { Px9y30, Px8y31, Px10y31, Px9y32 } CellNode (9 @ 31) (20)Px9y32 { Px9y33, Px9y31, Px8y32, Px10y32 } CellNode (9 @ 32) (20)Px9y33 { Px10y33, Px9y34, Px9y32, Px8y33 } CellNode (9 @ 33) (20)Px9y34 { Px8y34, Px9y33, Px10y34, Px9y35 } CellNode (9 @ 34) (20)Px9y35 { Px8y35, Px9y34, Px10y35, Px9y36 } CellNode (9 @ 35) (20)Px9y36 { Px9y37, Px9y35, Px8y36, Px10y36 } CellNode (9 @ 36) (20)Px9y37 { Px9y36, Px10y37, Px9y38, Px8y37 } CellNode (9 @ 37) (20)Px9y38 { Px9y37, Px8y38, Px10y38, Px9y39 } CellNode (9 @ 38) (20)Px9y39 { Px9y38, Px8y39, Px10y39, Px9y40 } CellNode (9 @ 39) (20)Px9y4 { Px9y5, Px10y4, Px8y4, Px9y3 } CellNode (9 @ 4) (20)Px9y40 { Px9y41, Px8y40, Px9y39, Px10y40 } CellNode (9 @ 40) (20)Px9y41 { Px8y41, Px10y41, Px9y42, Px9y40 } CellNode (9 @ 41) (20)Px9y42 { Px9y41, Px10y42, Px9y43, Px8y42 } CellNode (9 @ 42) (20)Px9y43 { Px9y44, Px8y43, Px9y42, Px10y43 } CellNode (9 @ 43) (20)Px9y44 { Px10y44, Px9y45, Px8y44, Px9y43 } CellNode (9 @ 44) (20)Px9y45 { Px9y44, Px10y45, Px9y46, Px8y45 } CellNode (9 @ 45) (20)Px9y46 { Px8y46, Px9y45, Px10y46, Px9y47 } CellNode (9 @ 46) (20)Px9y47 { Px9y48, Px8y47, Px9y46, Px10y47 } CellNode (9 @ 47) (20)Px9y48 { Px10y48, Px9y49, Px8y48, Px9y47 } CellNode (9 @ 48) (20)Px9y49 { Px9y48, Px9y50, Px10y49, Px8y49 } CellNode (9 @ 49) (20)Px9y5 { Px8y5, Px9y6, Px10y5, Px9y4 } CellNode (9 @ 5) (20)Px9y50 { Px8y50, Px10y50, Px9y49, Px9y51 } CellNode (9 @ 50) (20)Px9y51 { Px9y50, Px8y51, Px10y51, Px9y52 } CellNode (9 @ 51) (20)Px9y52 { Px9y53, Px8y52, Px9y51, Px10y52 } CellNode (9 @ 52) (20)Px9y53 { Px8y53, Px10y53, Px9y54, Px9y52 } CellNode (9 @ 53) (20)Px9y54 { Px9y53, Px8y54, Px10y54, Px9y55 } CellNode (9 @ 54) (20)Px9y55 { Px9y56, Px8y55, Px9y54, Px10y55 } CellNode (9 @ 55) (20)Px9y56 { Px10y56, Px9y57, Px9y55, Px8y56 } CellNode (9 @ 56) (20)Px9y57 { Px8y57, Px9y56, Px10y57, Px9y58 } CellNode (9 @ 57) (20)Px9y58 { Px8y58, Px9y57, Px10y58, Px9y59 } CellNode (9 @ 58) (20)Px9y59 { Px9y60, Px9y58, Px8y59, Px10y59 } CellNode (9 @ 59) (20)Px9y6 { Px9y5, Px10y6, Px8y6, Px9y7 } CellNode (9 @ 6) (20)Px9y60 { Px10y60, Px9y61, Px8y60, Px9y59 } CellNode (9 @ 60) (20)Px9y61 { Px9y60, Px8y61, Px10y61, Px9y62 } CellNode (9 @ 61) (20)Px9y62 { Px9y61, Px8y62, Px10y62, Px9y63 } CellNode (9 @ 62) (20)Px9y63 { Px9y64, Px9y62, Px8y63, Px10y63 } CellNode (9 @ 63) (20)Px9y64 { Px9y63, Px10y64, Px9y65, Px8y64 } CellNode (9 @ 64) (20)Px9y65 { Px8y65, Px9y64, Px10y65, Px9y66 } CellNode (9 @ 65) (20)Px9y66 { Px9y67, Px9y65, Px8y66, Px10y66 } CellNode (9 @ 66) (20)Px9y67 { Px9y66, Px10y67, Px8y67 } CellNode (9 @ 67) (20)Px9y7 { Px8y7, Px9y8, Px9y6, Px10y7 } CellNode (9 @ 7) (20)Px9y8 { Px10y8, Px8y8, Px9y9, Px9y7 } CellNode (9 @ 8) (20)Px9y9 { Px9y10, Px10y9, Px8y9, Px9y8 } CellNode (9 @ 9) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange50Points400">genRange50Points400messages none  defined. P1 { P76, P89, P93, P101, P146, P172, P174, P272, P279, P367, P383, P388 } NodeP2 { P33, P176, P179, P199, P210, P235, P334, P341 } NodeP3 { P125, P218, P252 } NodeP4 { P19, P49, P107, P139, P281, P285 } NodeP5 { P37, P55, P142, P189, P200, P335, P339, P360, P375, P392 } NodeP6 { P145, P185, P227 } NodeP7 { P26, P100, P178, P226, P243, P322, P333, P369 } NodeP8 { P66, P126, P216, P234, P255, P270, P363, P365, P398 } NodeP9 { P30, P41, P46, P149, P169, P206, P298, P399 } NodeP10 { P31, P82, P181, P250, P257, P271, P328 } NodeP11 { P107, P223, P247, P281 } NodeP12 { P25, P44, P133, P208 } NodeP13 { P88, P167, P198, P324 } NodeP14 { P66, P103, P143, P154, P160, P219, P229, P234, P253, P301, P342, P358, P398 } NodeP15 { P76, P162, P172, P272, P296, P367 } NodeP16 { P60, P101, P146, P162, P174, P205, P272, P296, P351, P367, P383, P388 } NodeP17 { P29, P82, P97, P158, P257, P323 } NodeP18 { P44, P166, P265, P371 } NodeP19 { P4, P40, P49, P99, P122, P139, P209, P281, P285, P366 } NodeP20 { P152, P178, P226, P252 } NodeP21 { P268, P294, P300, P316 } NodeP22 { P75, P162, P205, P213, P228, P273 } NodeP23 { P38, P230, P247, P256, P352 } NodeP24 { P68, P212, P313, P362 } NodeP25 { P12, P133, P208, P217, P317 } NodeP26 { P7, P81, P100, P121, P177, P240, P333, P369 } NodeP27 { P28, P111, P153, P263, P278, P332, P340 } NodeP28 { P27, P111, P153, P332, P340 } NodeP29 { P17, P82, P97, P239, P257, P323 } NodeP30 { P9, P149, P169, P206, P298, P399 } NodeP31 { P10, P82, P250, P257, P271, P328 } NodeP32 { P47, P79, P258, P327, P353 } NodeP33 { P2, P166, P179, P199, P210, P265, P329, P357, P371 } NodeP34 { P67, P131, P168, P184, P269, P327, P377 } NodeP35 { P346, P364, P385, P396 } NodeP36 { P48, P50, P54, P61, P108, P116, P187, P251, P262, P284, P312, P321 } NodeP37 { P5, P55, P122, P142, P189, P190, P335, P339, P360, P375, P392 } NodeP38 { P23, P131, P184, P230, P269, P352, P377 } NodeP39 { P171, P291, P307, P331 } NodeP40 { P19, P49, P99, P122, P139, P209, P285, P366 } NodeP41 { P9, P46, P125, P149, P156, P169, P274 } NodeP42 { P56, P78, P97, P239, P295, P297, P304, P318, P343, P384 } NodeP43 { P56, P97, P115, P158, P271, P293, P354 } NodeP44 { P12, P18, P166, P265, P371 } NodeP45 { P148 } NodeP46 { P9, P41, P149, P156, P169, P274, P298, P330 } NodeP47 { P32, P79, P196, P258, P327, P353 } NodeP48 { P36, P50, P61, P108, P187, P214, P284, P312, P321 } NodeP49 { P4, P19, P40, P99, P122, P139, P281, P285 } NodeP50 { P36, P48, P54, P61, P187, P251, P259, P284, P312, P321 } NodeP51 { P71, P98, P123, P130, P157, P161, P347 } NodeP52 { P59, P124, P163, P222, P237, P254, P303 } NodeP53 { P193, P277, P376 } NodeP54 { P36, P50, P61, P116, P187, P251, P262, P312 } NodeP55 { P5, P37, P122, P142, P189, P200, P335, P339, P360, P375, P392 } NodeP56 { P42, P43, P97, P158, P271, P293, P295, P304 } NodeP57 { P78, P105, P204, P295, P304, P318, P343 } NodeP58 { P182, P183, P201, P207, P292, P315, P348 } NodeP59 { P52, P124, P127, P163, P222, P254, P303, P309, P396 } NodeP60 { P16, P101, P146, P174, P181, P328, P351 } NodeP61 { P36, P48, P50, P54, P187, P251, P259, P262, P284, P312 } NodeP62 { P83, P87, P127, P209, P220, P260, P366, P385, P391, P396 } NodeP63 { P117, P150, P188 } NodeP64 { P170, P278, P314, P332, P350, P354, P397 } NodeP65 { P75, P221, P273 } NodeP66 { P8, P14, P154, P160, P234, P253, P255, P342, P363, P398 } NodeP67 { P34, P131, P168, P184, P269, P327 } NodeP68 { P24, P69, P70, P88, P212, P245, P313, P356 } NodeP69 { P68, P70, P88, P147, P240, P245, P313, P356 } NodeP70 { P68, P69, P88, P147, P243, P245, P313, P322 } NodeP71 { P51, P98, P123, P130, P157, P161, P182, P183, P287, P292, P315, P347, P348, P361 } NodeP72 { P200, P335, P398 } NodeP73 { P159, P211, P248, P355, P372 } NodeP74 { P109, P176, P288, P334 } NodeP75 { P22, P65, P162, P205, P221, P273, P323 } NodeP76 { P1, P15, P89, P93, P146, P172, P272, P296, P367, P383, P388 } NodeP77 { P94, P104, P136, P289, P325, P344 } NodeP78 { P42, P57, P105, P204, P295, P304, P318, P343 } NodeP79 { P32, P47, P135, P196, P258, P353 } NodeP80 { P119, P152, P203, P218, P252, P267, P345 } NodeP81 { P26, P119, P121, P152, P177, P203, P267, P333 } NodeP82 { P10, P17, P29, P31, P158, P250, P257, P271, P323, P328 } NodeP83 { P62, P87, P127, P209, P220, P260, P309, P366, P385, P396 } NodeP84 { P194, P195, P316, P372 } NodeP85 { P153, P263, P305, P340 } NodeP86 { P129, P151, P241, P283, P302 } NodeP87 { P62, P83, P220, P260, P379, P385, P390, P391 } NodeP88 { P13, P68, P69, P70, P147, P198, P243, P322 } NodeP89 { P1, P76, P172, P190 } NodeP90 { P126, P197, P365 } NodeP91 { P104, P132, P151, P164, P231, P302 } NodeP92 { P144, P196, P237, P326, P338 } NodeP93 { P1, P76, P279 } NodeP94 { P77, P136, P283, P289, P325, P344 } NodeP95 { P291, P349 } NodeP96 { P118, P170, P214, P261, P306, P336, P397 } NodeP97 { P17, P29, P42, P43, P56, P158, P271, P293, P295, P297, P304 } NodeP98 { P51, P71, P123, P130, P157, P161, P191, P337, P347, P387 } NodeP99 { P19, P40, P49, P122, P285 } NodeP100 { P7, P26, P147, P243, P322, P333, P369 } NodeP101 { P1, P16, P60, P128, P146, P174, P272, P296, P351, P367, P383, P388 } NodeP102 { P266, P310, P362 } NodeP103 { P14, P143, P202, P229, P342, P363 } NodeP104 { P77, P91, P132, P164, P231, P289, P344 } NodeP105 { P57, P78, P115, P204, P293, P370 } NodeP106 { P191, P282, P337, P387 } NodeP107 { P4, P11, P223, P247, P281 } NodeP108 { P36, P48, P187, P321 } NodeP109 { P74, P173, P286, P288, P311, P379, P386, P390, P391 } NodeP110 { P138, P222, P287, P378 } NodeP111 { P27, P28, P153, P263, P278, P332, P340 } NodeP112 { P211, P212, P240, P248, P320, P355, P356, P372, P374 } NodeP113 { P148, P186, P225, P368 } NodeP114 { P202, P216, P232, P363 } NodeP115 { P43, P105, P293, P314, P354, P370 } NodeP116 { P36, P54, P251, P262, P394 } NodeP117 { P63, P236, P290 } NodeP118 { P96, P141, P170, P192, P214, P261, P306, P336 } NodeP119 { P80, P81, P152, P203, P252, P267, P345, P399 } NodeP120 { P130, P161, P235, P346, P382 } NodeP121 { P26, P81, P177, P203, P267, P333 } NodeP122 { P19, P37, P40, P49, P55, P99, P139, P142, P189, P285, P339, P375 } NodeP123 { P51, P71, P98, P157, P191, P280, P299, P337, P347, P361, P387 } NodeP124 { P52, P59, P163, P222, P254, P303, P309, P396 } NodeP125 { P3, P41, P156, P218, P252, P274 } NodeP126 { P8, P90, P197, P216, P232, P255, P270, P363, P365 } NodeP127 { P59, P62, P83, P163, P209, P220, P260, P281, P309, P385, P396 } NodeP128 { P101, P174 } NodeP129 { P86, P151, P241, P302 } NodeP130 { P51, P71, P98, P120, P138, P157, P161, P287, P346, P347, P382 } NodeP131 { P34, P38, P67, P184, P269, P377 } NodeP132 { P91, P104, P164, P241, P289, P302, P344 } NodeP133 { P12, P25, P208, P217, P286, P317 } NodeP134 { P349, P380 } NodeP135 { P79 } NodeP136 { P77, P94, P289, P325, P344, P380 } NodeP137 { P191, P246, P249, P337, P341, P357, P368, P395 } NodeP138 { P110, P130, P182, P183, P287, P292, P315, P348, P378 } NodeP139 { P4, P19, P40, P49, P122, P281, P285 } NodeP140 { P155, P180, P224, P238 } NodeP141 { P118, P181, P250, P259, P284, P306, P328 } NodeP142 { P5, P37, P55, P122, P189, P200, P285, P335, P339, P360, P375, P392 } NodeP143 { P14, P103, P154, P202, P229, P253, P342, P358, P363 } NodeP144 { P92, P196, P237, P303, P326, P338 } NodeP145 { P6, P185, P227 } NodeP146 { P1, P16, P60, P76, P101, P162, P172, P174, P272, P296, P351, P367, P383, P388 } NodeP147 { P69, P70, P88, P100, P243, P322 } NodeP148 { P45, P113 } NodeP149 { P9, P30, P41, P46, P156, P169, P206, P274, P298 } NodeP150 { P63, P188 } NodeP151 { P86, P91, P129, P302 } NodeP152 { P20, P80, P81, P119, P203, P252, P267, P345 } NodeP153 { P27, P28, P85, P111, P305, P340 } NodeP154 { P14, P66, P143, P160, P219, P229, P234, P253, P301, P342, P358 } NodeP155 { P140, P180, P213, P224, P228, P233, P373 } NodeP156 { P41, P46, P125, P149, P169, P274 } NodeP157 { P51, P71, P98, P123, P130, P161, P191, P337, P347 } NodeP158 { P17, P43, P56, P82, P97, P271, P293 } NodeP159 { P73, P266, P301, P355, P358, P393 } NodeP160 { P14, P66, P154, P219, P229, P234, P253, P301, P398 } NodeP161 { P51, P71, P98, P120, P130, P157, P287, P346, P347, P382 } NodeP162 { P15, P16, P22, P75, P146, P172, P205, P272, P296, P351, P367 } NodeP163 { P52, P59, P124, P127, P222, P254, P303, P309, P396 } NodeP164 { P91, P104, P132, P175, P231 } NodeP165 { P190, P213, P228, P233, P373 } NodeP166 { P18, P33, P44, P179, P265, P371 } NodeP167 { P13, P198, P324 } NodeP168 { P34, P67, P184, P269, P359 } NodeP169 { P9, P30, P41, P46, P149, P156, P206, P274, P298, P330 } NodeP170 { P64, P96, P118, P261, P306, P314, P336, P397 } NodeP171 { P39, P244, P307, P359 } NodeP172 { P1, P15, P76, P89, P146, P162, P272, P296, P367, P383, P388 } NodeP173 { P109, P217, P286, P288, P311, P317, P379, P386 } NodeP174 { P1, P16, P60, P101, P128, P146, P272, P296, P351, P367, P383, P388 } NodeP175 { P164, P231, P244, P359, P381, P400 } NodeP176 { P2, P74, P199, P235, P334 } NodeP177 { P26, P81, P121, P240, P333, P374 } NodeP178 { P7, P20, P226, P369 } NodeP179 { P2, P33, P166, P199, P210, P265, P329, P357, P371 } NodeP180 { P140, P155, P238, P399 } NodeP181 { P10, P60, P141, P250, P328, P351 } NodeP182 { P58, P71, P138, P183, P287, P292, P315, P348, P378 } NodeP183 { P58, P71, P138, P182, P201, P207, P287, P292, P315, P348, P361 } NodeP184 { P34, P38, P67, P131, P168, P269, P327, P377 } NodeP185 { P6, P145, P227 } NodeP186 { P113, P225, P368 } NodeP187 { P36, P48, P50, P54, P61, P108, P251, P259, P284, P312, P321 } NodeP188 { P63, P150 } NodeP189 { P5, P37, P55, P122, P142, P200, P285, P339, P360, P375, P392 } NodeP190 { P37, P89, P165 } NodeP191 { P98, P106, P123, P137, P157, P246, P337, P387 } NodeP192 { P118, P214, P236, P261, P290, P308, P336 } NodeP193 { P53, P327, P376 } NodeP194 { P84, P195, P211, P248, P372 } NodeP195 { P84, P194, P268, P316 } NodeP196 { P47, P79, P92, P144, P326, P353 } NodeP197 { P90, P126, P270, P365 } NodeP198 { P13, P88, P167, P324 } NodeP199 { P2, P33, P176, P179, P235, P334 } NodeP200 { P5, P55, P72, P142, P189, P294, P335, P339, P360, P375, P392 } NodeP201 { P58, P183, P207, P326 } NodeP202 { P103, P114, P143, P216, P232, P342, P363 } NodeP203 { P80, P81, P119, P121, P152, P267, P345 } NodeP204 { P57, P78, P105, P343 } NodeP205 { P16, P22, P75, P162, P273, P296, P323, P351 } NodeP206 { P9, P30, P149, P169, P298, P330 } NodeP207 { P58, P183, P201, P326, P348 } NodeP208 { P12, P25, P133, P217 } NodeP209 { P19, P40, P62, P83, P127, P220, P281, P366 } NodeP210 { P2, P33, P179, P329, P341, P357, P371 } NodeP211 { P73, P112, P194, P240, P248, P320, P355, P372, P374 } NodeP212 { P24, P68, P112, P245, P313, P320, P356, P362 } NodeP213 { P22, P155, P165, P224, P228, P233, P373 } NodeP214 { P48, P96, P118, P192, P261, P290, P306, P308, P336 } NodeP215 { P242 } NodeP216 { P8, P114, P126, P202, P232, P255, P270, P363 } NodeP217 { P25, P133, P173, P208, P286, P311, P317, P386 } NodeP218 { P3, P80, P125, P252 } NodeP219 { P14, P154, P160, P234, P253 } NodeP220 { P62, P83, P87, P127, P209, P260, P366, P385, P390, P391 } NodeP221 { P65, P75, P273 } NodeP222 { P52, P59, P110, P124, P163, P237, P254, P303 } NodeP223 { P11, P107, P230, P247, P254, P275 } NodeP224 { P140, P155, P213, P228, P233, P300, P373 } NodeP225 { P113, P186, P246, P249, P368, P395 } NodeP226 { P7, P20, P178, P369 } NodeP227 { P6, P145, P185 } NodeP228 { P22, P155, P165, P213, P224, P233, P373 } NodeP229 { P14, P103, P143, P154, P160, P253, P301, P342, P358, P393 } NodeP230 { P23, P38, P223, P247, P275, P338 } NodeP231 { P91, P104, P164, P175, P400 } NodeP232 { P114, P126, P202, P216, P363 } NodeP233 { P155, P165, P213, P224, P228, P300, P373 } NodeP234 { P8, P14, P66, P154, P160, P219, P253, P255, P342, P398 } NodeP235 { P2, P120, P176, P199, P334, P346 } NodeP236 { P117, P192, P290, P308 } NodeP237 { P52, P92, P144, P222, P254, P275, P303, P338 } NodeP238 { P140, P180, P267, P319 } NodeP239 { P29, P42, P297, P298, P330 } NodeP240 { P26, P69, P112, P177, P211, P245, P320, P356, P374 } NodeP241 { P86, P129, P132, P283, P289, P302, P325, P344 } NodeP242 { P215 } NodeP243 { P7, P70, P88, P100, P147, P322, P333, P369 } NodeP244 { P171, P175, P307, P359, P381 } NodeP245 { P68, P69, P70, P212, P240, P313, P320, P356 } NodeP246 { P137, P191, P225, P249, P337, P387, P395 } NodeP247 { P11, P23, P107, P223, P230, P275 } NodeP248 { P73, P112, P194, P211, P320, P355, P372, P374 } NodeP249 { P137, P225, P246, P337, P341, P357, P368, P395 } NodeP250 { P10, P31, P82, P141, P181, P257, P328 } NodeP251 { P36, P50, P54, P61, P116, P187, P262, P284, P312, P394 } NodeP252 { P3, P20, P80, P119, P125, P152, P218, P345 } NodeP253 { P14, P66, P143, P154, P160, P219, P229, P234, P255, P342, P398 } NodeP254 { P52, P59, P124, P163, P222, P223, P237, P275, P303, P338 } NodeP255 { P8, P66, P126, P216, P234, P253, P270, P342, P363, P398 } NodeP256 { P23 } NodeP257 { P10, P17, P29, P31, P82, P250, P271, P323, P328 } NodeP258 { P32, P47, P79, P353 } NodeP259 { P50, P61, P141, P187, P284, P306, P312 } NodeP260 { P62, P83, P87, P127, P220, P385, P396 } NodeP261 { P96, P118, P170, P192, P214, P306, P308, P336 } NodeP262 { P36, P54, P61, P116, P251 } NodeP263 { P27, P85, P111, P278, P305, P340 } NodeP264 { P279, P386, P394 } NodeP265 { P18, P33, P44, P166, P179, P371 } NodeP266 { P102, P159, P310, P355, P362, P393 } NodeP267 { P80, P81, P119, P121, P152, P203, P238, P345, P399 } NodeP268 { P21, P195, P294, P300, P316 } NodeP269 { P34, P38, P67, P131, P168, P184, P377 } NodeP270 { P8, P126, P197, P216, P255, P363, P365 } NodeP271 { P10, P31, P43, P56, P82, P97, P158, P257, P293 } NodeP272 { P1, P15, P16, P76, P101, P146, P162, P172, P174, P296, P351, P367, P383, P388 } NodeP273 { P22, P65, P75, P205, P221, P323 } NodeP274 { P41, P46, P125, P149, P156, P169 } NodeP275 { P223, P230, P237, P247, P254, P338 } NodeP277 { P53, P376 } NodeP278 { P27, P64, P111, P263, P397 } NodeP279 { P1, P93, P264, P383, P388 } NodeP280 { P123, P282, P299, P361 } NodeP281 { P4, P11, P19, P49, P107, P127, P139, P209, P309 } NodeP282 { P106, P280, P299 } NodeP283 { P86, P94, P241, P289, P302, P325, P344 } NodeP284 { P36, P48, P50, P61, P141, P187, P251, P259, P312 } NodeP285 { P4, P19, P40, P49, P99, P122, P139, P142, P189, P375 } NodeP286 { P109, P133, P173, P217, P288, P311, P317, P386 } NodeP287 { P71, P110, P130, P138, P161, P182, P183, P292, P315, P348, P378 } NodeP288 { P74, P109, P173, P286, P311, P317, P379 } NodeP289 { P77, P94, P104, P132, P136, P241, P283, P302, P325, P344 } NodeP290 { P117, P192, P214, P236, P308 } NodeP291 { P39, P95, P331, P349, P389 } NodeP292 { P58, P71, P138, P182, P183, P287, P315, P348, P378 } NodeP293 { P43, P56, P97, P105, P115, P158, P271, P354 } NodeP294 { P21, P200, P268, P300, P335, P339, P360, P392 } NodeP295 { P42, P56, P57, P78, P97, P297, P304, P318, P343, P384 } NodeP296 { P15, P16, P76, P101, P146, P162, P172, P174, P205, P272, P351, P367, P383, P388 } NodeP297 { P42, P97, P239, P295, P304, P318, P343, P384 } NodeP298 { P9, P30, P46, P149, P169, P206, P239, P330 } NodeP299 { P123, P280, P282, P361, P387 } NodeP300 { P21, P224, P233, P268, P294, P316, P373 } NodeP301 { P14, P154, P159, P160, P229, P358, P393 } NodeP302 { P86, P91, P129, P132, P151, P241, P283, P289, P325 } NodeP303 { P52, P59, P124, P144, P163, P222, P237, P254 } NodeP304 { P42, P56, P57, P78, P97, P295, P297, P318, P343, P384 } NodeP305 { P85, P153, P263, P340 } NodeP306 { P96, P118, P141, P170, P214, P259, P261, P336 } NodeP307 { P39, P171, P244, P331, P359 } NodeP308 { P192, P214, P236, P261, P290, P336 } NodeP309 { P59, P83, P124, P127, P163, P281, P396 } NodeP310 { P102, P266, P362 } NodeP311 { P109, P173, P217, P286, P288, P379, P386 } NodeP312 { P36, P48, P50, P54, P61, P187, P251, P259, P284 } NodeP313 { P24, P68, P69, P70, P212, P245, P356 } NodeP314 { P64, P115, P170, P350, P354, P397 } NodeP315 { P58, P71, P138, P182, P183, P287, P292, P348, P361 } NodeP316 { P21, P84, P195, P268, P300 } NodeP317 { P25, P133, P173, P217, P286, P288 } NodeP318 { P42, P57, P78, P295, P297, P304, P343, P384 } NodeP319 { P238 } NodeP320 { P112, P211, P212, P240, P245, P248, P355, P356, P372, P374 } NodeP321 { P36, P48, P50, P108, P187 } NodeP322 { P7, P70, P88, P100, P147, P243, P369 } NodeP323 { P17, P29, P75, P82, P205, P257, P273 } NodeP324 { P13, P167, P198 } NodeP325 { P77, P94, P136, P241, P283, P289, P302, P344 } NodeP326 { P92, P144, P196, P201, P207, P378 } NodeP327 { P32, P34, P47, P67, P184, P193 } NodeP328 { P10, P31, P60, P82, P141, P181, P250, P257 } NodeP329 { P33, P179, P210, P357, P368, P371 } NodeP330 { P46, P169, P206, P239, P298 } NodeP331 { P39, P291, P307, P349 } NodeP332 { P27, P28, P64, P111, P350 } NodeP333 { P7, P26, P81, P100, P121, P177, P243, P369 } NodeP334 { P2, P74, P176, P199, P235 } NodeP335 { P5, P37, P55, P72, P142, P200, P294, P339, P360, P375, P392 } NodeP336 { P96, P118, P170, P192, P214, P261, P306, P308 } NodeP337 { P98, P106, P123, P137, P157, P191, P246, P249, P387, P395 } NodeP338 { P92, P144, P230, P237, P254, P275 } NodeP339 { P5, P37, P55, P122, P142, P189, P200, P294, P335, P360, P375, P392 } NodeP340 { P27, P28, P85, P111, P153, P263, P305 } NodeP341 { P2, P137, P210, P249, P357, P395 } NodeP342 { P14, P66, P103, P143, P154, P202, P229, P234, P253, P255, P358, P363 } NodeP343 { P42, P57, P78, P204, P295, P297, P304, P318, P384 } NodeP344 { P77, P94, P104, P132, P136, P241, P283, P289, P325 } NodeP345 { P80, P119, P152, P203, P252, P267, P399 } NodeP346 { P35, P120, P130, P161, P235, P382 } NodeP347 { P51, P71, P98, P123, P130, P157, P161 } NodeP348 { P58, P71, P138, P182, P183, P207, P287, P292, P315, P361 } NodeP349 { P95, P134, P291, P331, P380 } NodeP350 { P64, P314, P332, P354, P397 } NodeP351 { P16, P60, P101, P146, P162, P174, P181, P205, P272, P296, P367, P388 } NodeP352 { P23, P38, P377, P381 } NodeP353 { P32, P47, P79, P196, P258 } NodeP354 { P43, P64, P115, P293, P314, P350 } NodeP355 { P73, P112, P159, P211, P248, P266, P320, P362, P372 } NodeP356 { P68, P69, P112, P212, P240, P245, P313, P320, P374 } NodeP357 { P33, P137, P179, P210, P249, P329, P341, P368, P395 } NodeP358 { P14, P143, P154, P159, P229, P301, P342, P393 } NodeP359 { P168, P171, P175, P244, P307, P381 } NodeP360 { P5, P37, P55, P142, P189, P200, P294, P335, P339, P375, P392 } NodeP361 { P71, P123, P183, P280, P299, P315, P348 } NodeP362 { P24, P102, P212, P266, P310, P355 } NodeP363 { P8, P66, P103, P114, P126, P143, P202, P216, P232, P255, P270, P342 } NodeP364 { P35, P385, P396 } NodeP365 { P8, P90, P126, P197, P270 } NodeP366 { P19, P40, P62, P83, P209, P220, P391 } NodeP367 { P1, P15, P16, P76, P101, P146, P162, P172, P174, P272, P296, P351, P383, P388 } NodeP368 { P113, P137, P186, P225, P249, P329, P357, P395 } NodeP369 { P7, P26, P100, P178, P226, P243, P322, P333 } NodeP370 { P105, P115 } NodeP371 { P18, P33, P44, P166, P179, P210, P265, P329 } NodeP372 { P73, P84, P112, P194, P211, P248, P320, P355, P374 } NodeP373 { P155, P165, P213, P224, P228, P233, P300 } NodeP374 { P112, P177, P211, P240, P248, P320, P356, P372 } NodeP375 { P5, P37, P55, P122, P142, P189, P200, P285, P335, P339, P360, P392 } NodeP376 { P53, P193, P277 } NodeP377 { P34, P38, P131, P184, P269, P352, P381 } NodeP378 { P110, P138, P182, P287, P292, P326 } NodeP379 { P87, P109, P173, P288, P311, P390, P391 } NodeP380 { P134, P136, P349 } NodeP381 { P175, P244, P352, P359, P377, P400 } NodeP382 { P120, P130, P161, P346 } NodeP383 { P1, P16, P76, P101, P146, P172, P174, P272, P279, P296, P367, P388 } NodeP384 { P42, P295, P297, P304, P318, P343 } NodeP385 { P35, P62, P83, P87, P127, P220, P260, P364, P396 } NodeP386 { P109, P173, P217, P264, P286, P311, P394 } NodeP387 { P98, P106, P123, P191, P246, P299, P337 } NodeP388 { P1, P16, P76, P101, P146, P172, P174, P272, P279, P296, P351, P367, P383 } NodeP389 { P291 } NodeP390 { P87, P109, P220, P379, P391 } NodeP391 { P62, P87, P109, P220, P366, P379, P390 } NodeP392 { P5, P37, P55, P142, P189, P200, P294, P335, P339, P360, P375 } NodeP393 { P159, P229, P266, P301, P358 } NodeP394 { P116, P251, P264, P386 } NodeP395 { P137, P225, P246, P249, P337, P341, P357, P368 } NodeP396 { P35, P59, P62, P83, P124, P127, P163, P260, P309, P364, P385 } NodeP397 { P64, P96, P170, P278, P314, P350 } NodeP398 { P8, P14, P66, P72, P160, P234, P253, P255 } NodeP399 { P9, P30, P119, P180, P267, P345 } NodeP400 { P175, P231, P381 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="TaghiFFTMux">TaghiFFTMuxmessages complex null.X0 { Butterfly1Stage1 } SourceX4 { Butterfly1Stage1 } SourceX1 { Butterfly2Stage1 } SourceX5 { Butterfly2Stage1 } SourceX2 { Butterfly3Stage1 } SourceX6 { Butterfly3Stage1 } SourceX3 { Butterfly4Stage1 } SourceX7 { Butterfly4Stage1 } SourceButterfly1Stage1 {Butterfly1Stage2 Butterfly3Stage2 X0 X4 } ButterflyButterfly2Stage1 {Butterfly2Stage2 Butterfly4Stage2 X1 X5 } ButterflyButterfly3Stage1 {Butterfly1Stage2 Butterfly3Stage2 X2 X6 } ButterflyButterfly4Stage1 {Butterfly2Stage2 Butterfly4Stage2 X3 X7 } ButterflyButterfly1Stage2 {Butterfly1Stage3 Butterfly2Stage3 } ButterflyButterfly2Stage2 {Butterfly1Stage3 Butterfly2Stage3 } ButterflyButterfly3Stage2 {Butterfly3Stage3 Butterfly4Stage3 } ButterflyButterfly4Stage2 {Butterfly3Stage3 Butterfly4Stage3 } ButterflyButterfly1Stage3 { Mux } ButterflyButterfly2Stage3 { Mux } ButterflyButterfly3Stage3 { Mux } ButterflyButterfly4Stage3 { Mux } ButterflyMux {Butterfly1Stage3  Butterfly2Stage3 Butterfly3Stage3 Butterfly4Stage3} Drain</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cellNetwork">cellNetworkmessages none  defined. Px10y51 { Px9y51 } NodePx18y4 { Px17y4, Px19y4 } NodePx88y23 { Px88y24, Px89y23 } NodePx15y3 { Px14y3, Px16y4 } NodePx21y2 { Px20y3, Px21y1 } NodePx19y4 { Px20y3, Px18y4 } NodePx89y23 { Px88y24, Px88y23 } NodePx21y1 { Px21y2 } NodePx20y3 { Px19y4, Px21y2 } NodePx9y51 { Px10y51 } NodePx88y24 { Px89y23, Px88y23 } NodePx16y4 { Px17y4, Px15y3 } NodePx17y4 { Px16y4, Px18y4 } NodePx14y3 { Px15y3 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="aTriangle">aTrianglemessages none  defined. P1 { P2, P3 } Node (106 @ 74) (60)P2 { P1, P3 } Node (167 @ 91) (60)P3 { P1, P2  } Node (142 @ 118) (60)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="biPoint">biPointmessages none  defined. P1 { P9 } Node (531 @ 355) (100) P9 { P1  } Node (553 @ 429) (100)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange300Points20">genRange300Points20messages none  defined. P1 { P10, P12, P14, P15, P16 } NodeP2 { P8, P14, P17, P18, P20 } NodeP3 { P4, P6, P7, P19 } NodeP4 { P3, P6, P19 } NodeP5 { P6, P7, P8, P9, P11, P13, P14, P17, P18, P19, P20 } NodeP6 { P3, P4, P5, P7, P9, P13, P19 } NodeP7 { P3, P5, P6, P9, P11, P13, P18, P19, P20 } NodeP8 { P2, P5, P14, P17, P18, P20 } NodeP9 { P5, P6, P7, P11, P13 } NodeP10 { P1, P12, P15, P16, P19 } NodeP11 { P5, P7, P9, P13, P20 } NodeP12 { P1, P10, P15, P16 } NodeP13 { P5, P6, P7, P9, P11, P20 } NodeP14 { P1, P2, P5, P8, P17, P18, P20 } NodeP15 { P1, P10, P12, P16 } NodeP16 { P1, P10, P12, P15 } NodeP17 { P2, P5, P8, P14, P18, P20 } NodeP18 { P2, P5, P7, P8, P14, P17, P20 } NodeP19 { P3, P4, P5, P6, P7, P10 } NodeP20 { P2, P5, P7, P8, P11, P13, P14, P17, P18 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>compiling</category><body package="DistributedModeling-samples" selector="fftDIT8Points">fftDIT8Pointsmessages null complex.X0 { Butterfly1Stage1 } SourceX4 { Butterfly1Stage1 } SourceX2 { Butterfly2Stage1 } SourceX6 { Butterfly2Stage1 } SourceX1 { Butterfly3Stage1 } SourceX5 { Butterfly3Stage1 } SourceX3 { Butterfly4Stage1 } SourceX7 { Butterfly4Stage1 } SourceButterfly1Stage1 {Butterfly1Stage2 Butterfly2Stage2 } ButterflyButterfly2Stage1 {Butterfly1Stage2 Butterfly2Stage2 } ButterflyButterfly3Stage1 {Butterfly3Stage2 Butterfly4Stage2 } ButterflyButterfly4Stage1 {Butterfly3Stage2 Butterfly4Stage2 } ButterflyButterfly1Stage2 {Butterfly1Stage3 Butterfly3Stage3 } ButterflyButterfly2Stage2 {Butterfly2Stage3 Butterfly4Stage3 } ButterflyButterfly3Stage2 {Butterfly1Stage3 Butterfly3Stage3 } ButterflyButterfly4Stage2 {Butterfly2Stage3 Butterfly4Stage3 } ButterflyButterfly1Stage3 { Drain0 Drain1 } ButterflyButterfly2Stage3 { Drain2 Drain3 } ButterflyButterfly3Stage3 { Drain4 Drain5 } ButterflyButterfly4Stage3 { Drain6 Drain7 } ButterflyDrain0 {} DrainDrain1 {} DrainDrain2 {} DrainDrain3 {} DrainDrain4 {} DrainDrain5 {} DrainDrain6 {} DrainDrain7 {} Drain</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="promenadeEnRade">promenadeEnRademessages none  defined. P1 { P2, P3, P4, P5, P6, P9, P10, P11, P12, P14, P15 } Node (644 @ 85) (92)P2 { P1, P3, P4, P5, P6, P9, P10, P11, P12, P14, P15 } Node (653 @ 85) (92)P3 { P1, P2, P4, P5, P6, P9, P10, P11, P12, P14 } Node (652 @ 56) (92)P4 { P1, P2, P3, P5, P9, P10, P11, P14, P15, P17 } Node (622 @ 109) (92)P5 { P1, P2, P3, P4, P6, P9, P10, P11, P14, P15 } Node (629 @ 74) (92)P6 { P1, P2, P3, P5, P7, P8, P9, P10, P11, P12, P13, P14, P20, P21, P22, P29, P30, P31 } Node (716 @ 100) (92)P7 { P6, P8, P9, P10, P11, P12, P13, P20, P21, P22, P23, P24, P29 } Node (748 @ 70) (92)P8 { P6, P7, P10, P12, P13, P20, P21, P22, P23, P24, P25 } Node (783 @ 72) (92)P9 { P1, P2, P3, P4, P5, P6, P7, P10, P11, P12, P13, P14, P29, P30 } Node (681 @ 92) (92)P10 { P1, P2, P3, P4, P5, P6, P7, P8, P9, P11, P12, P13, P14, P20 } Node (692 @ 65) (92)P11 { P1, P2, P3, P4, P5, P6, P7, P9, P10, P12, P13 } Node (687 @ 54) (92)P12 { P1, P2, P3, P6, P7, P8, P9, P10, P11, P13, P20, P21, P22 } Node (721 @ 55) (92)P13 { P6, P7, P8, P9, P10, P11, P12, P20, P21, P22, P23, P29, P30, P31 } Node (742 @ 123) (92)P14 { P1, P2, P3, P4, P5, P6, P9, P10, P15, P17 } Node (633 @ 135) (92)P15 { P1, P2, P4, P5, P14, P16, P17 } Node (589 @ 147) (92)P16 { P15, P17, P18, P19, P34 } Node (528 @ 173) (92)P17 { P4, P14, P15, P16, P19 } Node (548 @ 136) (92)P18 { P16, P19, P58, P59, P60 } Node (467 @ 202) (92)P19 { P16, P17, P18, P58, P59 } Node (473 @ 167) (92)P20 { P6, P7, P8, P10, P12, P13, P21, P22, P23, P24, P29, P30 } Node (772 @ 109) (92)P21 { P6, P7, P8, P12, P13, P20, P22, P23, P24, P25, P29 } Node (793 @ 84) (92)P22 { P6, P7, P8, P12, P13, P20, P21, P23, P24, P25 } Node (792 @ 66) (92)P23 { P7, P8, P13, P20, P21, P22, P24, P25, P26, P27 } Node (810 @ 90) (92)P24 { P7, P8, P20, P21, P22, P23, P25, P26, P27 } Node (818 @ 64) (92)P25 { P8, P21, P22, P23, P24, P26, P27, P28 } Node (856 @ 42) (92)P26 { P23, P24, P25, P27, P28 } Node (875 @ 25) (92)P27 { P23, P24, P25, P26, P28 } Node (882 @ 42) (92)P28 { P25, P26, P27 } Node (925 @ 16) (92)P29 { P6, P7, P9, P13, P20, P21, P30, P31, P32 } Node (737 @ 152) (92)P30 { P6, P9, P13, P20, P29, P31, P32, P36 } Node (725 @ 171) (92)P31 { P6, P13, P29, P30, P32, P36 } Node (716 @ 183) (92)P32 { P29, P30, P31, P35, P36 } Node (704 @ 208) (92)P33 { P34, P35, P36, P37, P38, P39 } Node (610 @ 274) (92)P34 { P16, P33, P35, P37, P38 } Node (567 @ 250) (92)P35 { P32, P33, P34, P36, P37, P38 } Node (628 @ 248) (92)P36 { P30, P31, P32, P33, P35, P37 } Node (664 @ 225) (92)P37 { P33, P34, P35, P36, P38, P39, P40, P41 } Node (610 @ 299) (92)P38 { P33, P34, P35, P37, P39, P40, P41, P42 } Node (592 @ 315) (92)P39 { P33, P37, P38, P40, P41, P42, P43 } Node (575 @ 345) (92)P40 { P37, P38, P39, P41, P42, P43, P44 } Node (565 @ 359) (92)P41 { P37, P38, P39, P40, P42, P43, P44, P45 } Node (580 @ 380) (92)P42 { P38, P39, P40, P41, P43, P44, P45 } Node (590 @ 391) (92)P43 { P39, P40, P41, P42, P44, P45, P46 } Node (581 @ 411) (92)P44 { P40, P41, P42, P43, P45, P46, P47, P48, P49, P55, P56 } Node (546 @ 435) (92)P45 { P41, P42, P43, P44, P46, P47, P48, P49, P51, P53, P54, P55, P56, P81 } Node (558 @ 459) (92)P46 { P43, P44, P45, P47, P48, P49, P50, P51, P52, P53, P54, P55, P56, P81 } Node (549 @ 482) (92)P47 { P44, P45, P46, P48, P49, P50, P51, P52, P53, P54, P55, P56 } Node (519 @ 489) (92)P48 { P44, P45, P46, P47, P49, P50, P51, P52, P53, P54, P55, P91 } Node (502 @ 510) (92)P49 { P44, P45, P46, P47, P48, P50, P51, P52, P53, P54, P55, P56 } Node (538 @ 518) (92)P50 { P46, P47, P48, P49, P51, P52, P53, P54, P55, P90, P91, P123, P124 } Node (485 @ 520) (92)P51 { P45, P46, P47, P48, P49, P50, P52, P53, P54, P55, P91, P124 } Node (503 @ 530) (92)P52 { P46, P47, P48, P49, P50, P51, P53, P54, P55, P90, P91, P123, P124 } Node (491 @ 537) (92)P53 { P45, P46, P47, P48, P49, P50, P51, P52, P54, P55, P56 } Node (531 @ 538) (92)P54 { P45, P46, P47, P48, P49, P50, P51, P52, P53, P55, P56 } Node (536 @ 534) (92)P55 { P44, P45, P46, P47, P48, P49, P50, P51, P52, P53, P54, P56, P81 } Node (563 @ 519) (92)P56 { P44, P45, P46, P47, P49, P53, P54, P55, P81 } Node (599 @ 507) (92)P57 { P90, P91, P92, P123 } Node (387 @ 487) (92)P58 { P18, P19, P59, P60, P61, P62, P63 } Node (413 @ 226) (92)P59 { P18, P19, P58, P60 } Node (451 @ 248) (92)P60 { P18, P58, P59, P61, P62, P63, P64, P65, P66, P72 } Node (376 @ 211) (92)P61 { P58, P60, P62, P63, P64, P65, P66, P71, P72 } Node (355 @ 216) (92)P62 { P58, P60, P61, P63, P64, P65, P66 } Node (379 @ 159) (92)P63 { P58, P60, P61, P62, P64, P65, P66 } Node (381 @ 148) (92)P64 { P60, P61, P62, P63, P65, P66, P72 } Node (350 @ 145) (92)P65 { P60, P61, P62, P63, P64, P66, P72 } Node (337 @ 151) (92)P66 { P60, P61, P62, P63, P64, P65, P72 } Node (329 @ 162) (92)P67 { P70, P71, P72, P73 } Node (271 @ 292) (92)P68 { P75, P76, P79, P97 } Node (173 @ 386) (92)P69 { P70, P73, P74, P120, P122 } Node (152 @ 294) (92)P70 { P67, P69, P71, P73, P74 } Node (222 @ 259) (92)P71 { P61, P67, P70, P72, P73 } Node (273 @ 244) (92)P72 { P60, P61, P64, P65, P66, P67, P71 } Node (318 @ 230) (92)P73 { P67, P69, P70, P71, P74 } Node (197 @ 239) (92)P74 { P69, P70, P73 } Node (175 @ 256) (92)P75 { P68, P76, P78, P79, P97 } Node (149 @ 391) (92)P76 { P68, P75, P77, P78, P79, P96, P97, P98, P118 } Node (162 @ 449) (92)P77 { P76, P78, P79, P96, P97, P98, P99, P116, P117, P118 } Node (161 @ 502) (92)P78 { P75, P76, P77, P79, P96, P97, P98, P116, P117, P118 } Node (143 @ 476) (92)P79 { P68, P75, P76, P77, P78, P96, P97, P98, P117, P118 } Node (160 @ 460) (92)P80 { P81, P82, P83, P85, P86, P87, P88 } Node (701 @ 526) (92)P81 { P45, P46, P55, P56, P80, P82, P87 } Node (636 @ 491) (92)P82 { P80, P81, P83, P84, P85, P86, P87, P88 } Node (684 @ 468) (92)P83 { P80, P82, P84, P85, P86, P87, P88 } Node (720 @ 441) (92)P84 { P82, P83, P85, P86, P87, P88 } Node (741 @ 443) (92)P85 { P80, P82, P83, P84, P86, P87, P88 } Node (745 @ 458) (92)P86 { P80, P82, P83, P84, P85, P87, P88 } Node (731 @ 481) (92)P87 { P80, P81, P82, P83, P84, P85, P86, P88 } Node (716 @ 504) (92)P88 { P80, P82, P83, P84, P85, P86, P87, P89 } Node (739 @ 527) (92)P89 { P88 } Node (812 @ 530) (92)P90 { P50, P52, P57, P91, P92, P93, P123, P124, P125 } Node (419 @ 568) (92)P91 { P48, P50, P51, P52, P57, P90, P92, P93, P123, P124, P125 } Node (432 @ 563) (92)P92 { P57, P90, P91, P93, P94, P123, P124, P125 } Node (388 @ 565) (92)P93 { P90, P91, P92, P94, P95, P123 } Node (344 @ 570) (92)P94 { P92, P93, P95, P100, P101 } Node (303 @ 575) (92)P95 { P93, P94, P99, P100, P101, P102, P103 } Node (259 @ 584) (92)P96 { P76, P77, P78, P79, P97, P98, P118 } Node (186 @ 478) (92)P97 { P68, P75, P76, P77, P78, P79, P96, P98 } Node (206 @ 436) (92)P98 { P76, P77, P78, P79, P96, P97, P99, P100, P101 } Node (212 @ 503) (92)P99 { P77, P95, P98, P100, P101, P102, P103, P104 } Node (206 @ 573) (92)P100 { P94, P95, P98, P99, P101, P102, P103, P104 } Node (241 @ 582) (92)P101 { P94, P95, P98, P99, P100, P102, P103, P104, P106, P107 } Node (215 @ 594) (92)P102 { P95, P99, P100, P101, P103, P104, P105, P106, P107, P108, P109, P110, P111, P115 } Node (186 @ 620) (92)P103 { P95, P99, P100, P101, P102, P104, P105, P106, P107, P108, P109, P110 } Node (214 @ 632) (92)P104 { P99, P100, P101, P102, P103, P105, P106, P107, P108, P109, P110, P111, P112, P114, P115 } Node (176 @ 641) (92)P105 { P102, P103, P104, P106, P107, P108, P109, P110, P111, P112, P113, P114, P115 } Node (155 @ 667) (92)P106 { P101, P102, P103, P104, P105, P107, P108, P109, P110, P111, P112 } Node (173 @ 673) (92)P107 { P101, P102, P103, P104, P105, P106, P108, P109, P110, P111 } Node (192 @ 679) (92)P108 { P102, P103, P104, P105, P106, P107, P109, P110, P111 } Node (183 @ 686) (92)P109 { P102, P103, P104, P105, P106, P107, P108, P110, P111, P112, P113, P114 } Node (151 @ 672) (92)P110 { P102, P103, P104, P105, P106, P107, P108, P109, P111, P112, P113, P114, P115 } Node (135 @ 659) (92)P111 { P102, P104, P105, P106, P107, P108, P109, P110, P112, P113, P114 } Node (131 @ 682) (92)P112 { P104, P105, P106, P109, P110, P111, P113, P114, P115 } Node (91 @ 658) (92)P113 { P105, P109, P110, P111, P112, P114, P115 } Node (76 @ 654) (92)P114 { P104, P105, P109, P110, P111, P112, P113, P115, P116 } Node (91 @ 623) (92)P115 { P102, P104, P105, P110, P112, P113, P114, P116, P117, P118 } Node (103 @ 593) (92)P116 { P77, P78, P114, P115, P117, P118 } Node (105 @ 554) (92)P117 { P77, P78, P79, P115, P116, P118 } Node (94 @ 522) (92)P118 { P76, P77, P78, P79, P96, P115, P116, P117 } Node (112 @ 503) (92)P119 { P120, P121, P122 } Node (32 @ 318) (92)P120 { P69, P119, P121, P122 } Node (72 @ 284) (92)P121 { P119, P120, P122 } Node (53 @ 292) (92)P122 { P69, P119, P120, P121 } Node (81 @ 275) (92)P123 { P50, P52, P57, P90, P91, P92, P93, P124, P125 } Node (418 @ 569) (92)P124 { P50, P51, P52, P90, P91, P92, P123, P125 } Node (444 @ 597) (92)P125 { P90, P91, P92, P123, P124, P126 } Node (430 @ 636) (92)P126 { P125 } Node (433 @ 699) (92)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cellNetwork2">cellNetwork2messages none  defined. Px49y38 { Px48y39, Px50y38 } CellNode (49 @ 38) (165)Px81y11 { Px82y10, Px82y11 } CellNode (81 @ 11) (165)Px110y59 { Px109y60, Px110y60 } CellNode (110 @ 59) (165)Px81y9 { Px82y10 } CellNode (81 @ 9) (165)Px79y12 { Px79y13 } CellNode (79 @ 12) (165)Px56y44 { Px56y43, Px57y44 } CellNode (56 @ 44) (165)Px55y34 { Px55y33, Px56y35, Px54y33 } CellNode (55 @ 34) (165)Px54y37 { Px53y36, Px54y36 } CellNode (54 @ 37) (165)Px50y35 { Px51y36, Px51y35 } CellNode (50 @ 35) (165)Px59y40 { Px59y39 } CellNode (59 @ 40) (165)Px67y22 { Px66y22 } CellNode (67 @ 22) (165)Px70y23 { Px71y22, Px69y22, Px71y23, Px70y22 } CellNode (70 @ 23) (165)Px109y61 { Px109y60, Px110y60 } CellNode (109 @ 61) (165)Px100y7 { Px99y7, Px101y7, Px101y6 } CellNode (100 @ 7) (165)Px82y11 { Px83y10, Px82y10, Px81y11 } CellNode (82 @ 11) (165)Px69y22 { Px70y23, Px70y22 } CellNode (69 @ 22) (165)Px70y22 { Px71y22, Px69y22, Px71y23, Px70y23 } CellNode (70 @ 22) (165)Px49y46 { Px50y47, Px50y46 } CellNode (49 @ 46) (165)Px50y46 { Px50y47, Px49y46 } CellNode (50 @ 46) (165)Px59y20 { Px60y20 } CellNode (59 @ 20) (165)Px101y6 { Px101y7, Px100y7 } CellNode (101 @ 6) (165)Px56y35 { Px56y36, Px55y34 } CellNode (56 @ 35) (165)Px48y40 { Px48y39, Px49y40 } CellNode (48 @ 40) (165)Px51y36 { Px51y35, Px50y35, Px52y36 } CellNode (51 @ 36) (165)Px98y6 { Px98y7, Px99y7 } CellNode (98 @ 6) (165)Px76y10 { Px75y11, Px76y11 } CellNode (76 @ 10) (165)Px49y44 { Px48y43 } CellNode (49 @ 44) (165)Px56y47 { Px55y46 } CellNode (56 @ 47) (165)Px99y7 { Px98y7, Px100y7, Px98y6 } CellNode (99 @ 7) (165)Px53y36 { Px54y36, Px54y37, Px52y36 } CellNode (53 @ 36) (165)Px59y39 { Px59y40 } CellNode (59 @ 39) (165)Px54y33 { Px55y34, Px55y33 } CellNode (54 @ 33) (165)Px50y38 { Px51y39, Px49y38 } CellNode (50 @ 38) (165)Px79y13 { Px79y12 } CellNode (79 @ 13) (165)Px75y11 { Px75y12, Px76y10, Px76y11 } CellNode (75 @ 11) (165)Px71y22 { Px70y23, Px71y23, Px70y22 } CellNode (71 @ 22) (165)Px83y10 { Px84y10, Px82y10, Px82y11 } CellNode (83 @ 10) (165)Px46y43 { Px45y44, Px47y43 } CellNode (46 @ 43) (165)Px48y39 { Px48y40, Px49y40, Px49y38 } CellNode (48 @ 39) (165)Px49y40 { Px48y40, Px48y39 } CellNode (49 @ 40) (165)Px56y43 { Px57y44, Px56y44 } CellNode (56 @ 43) (165)Px48y43 { Px49y44, Px47y43 } CellNode (48 @ 43) (165)Px55y46 { Px54y45, Px56y47 } CellNode (55 @ 46) (165)Px52y36 { Px53y36, Px51y35, Px51y36 } CellNode (52 @ 36) (165)Px51y39 { Px50y38, Px51y40 } CellNode (51 @ 39) (165)Px50y47 { Px50y46, Px49y46 } CellNode (50 @ 47) (165)Px54y36 { Px53y36, Px54y37 } CellNode (54 @ 36) (165)Px55y33 { Px55y34, Px54y33 } CellNode (55 @ 33) (165)Px45y44 { Px46y43 } CellNode (45 @ 44) (165)Px40y28 { Px39y27 } CellNode (40 @ 28) (165)Px109y60 { Px109y61, Px110y60, Px110y59 } CellNode (109 @ 60) (165)Px110y60 { Px109y61, Px109y60, Px110y59 } CellNode (110 @ 60) (165)Px82y10 { Px83y10, Px81y9, Px81y11, Px82y11 } CellNode (82 @ 10) (165)Px98y7 { Px99y7, Px98y6 } CellNode (98 @ 7) (165)Px39y27 { Px40y28 } CellNode (39 @ 27) (165)Px76y11 { Px75y12, Px75y11, Px76y10 } CellNode (76 @ 11) (165)Px60y20 { Px59y20 } CellNode (60 @ 20) (165)Px56y36 { Px56y35 } CellNode (56 @ 36) (165)Px84y10 { Px83y10 } CellNode (84 @ 10) (165)Px57y44 { Px56y43, Px56y44 } CellNode (57 @ 44) (165)Px101y7 { Px100y7, Px101y6 } CellNode (101 @ 7) (165)Px66y22 { Px67y22 } CellNode (66 @ 22) (165)Px47y43 { Px48y43, Px46y43 } CellNode (47 @ 43) (165)Px51y35 { Px52y36, Px50y35, Px51y36 } CellNode (51 @ 35) (165)Px51y40 { Px51y39 } CellNode (51 @ 40) (165)Px54y45 { Px55y46 } CellNode (54 @ 45) (165)Px71y23 { Px70y23, Px71y22, Px70y22 } CellNode (71 @ 23) (165)Px75y12 { Px75y11, Px76y11 } CellNode (75 @ 12) (165)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cellNetwork4">cellNetwork4messages none  defined. Px44y90 { Px45y90, Px44y89 } CellNode (44 @ 90) (20)Px20y67 { Px21y67 } CellNode (20 @ 67) (20)Px45y89 { Px45y90, Px44y89 } CellNode (45 @ 89) (20)Px95y6 { Px96y6 } CellNode (95 @ 6) (20)Px44y89 { Px44y90, Px43y89, Px45y89 } CellNode (44 @ 89) (20)Px96y6 { Px95y6 } CellNode (96 @ 6) (20)Px45y90 { Px45y89, Px44y90 } CellNode (45 @ 90) (20)Px21y67 { Px20y67 } CellNode (21 @ 67) (20)Px43y89 { Px44y89 } CellNode (43 @ 89) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="stangAlar">stangAlarmessages none  defined. P1 { P2 } NodeP2 { P1, P3 } NodeP3 { P2, P4, P5 } NodeP4 { P3, P5 } NodeP5 { P3, P4, P6 } NodeP6 { P5, P7 } NodeP7 { P6, P8, P9 } NodeP8 { P7, P9 } NodeP9 { P7, P8, P10 } NodeP10 { P9, P11 } NodeP11 { P10, P12 } NodeP12 { P11, P13 } NodeP13 { P12 } NodeP14 { P15 } NodeP15 { P14 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="diegoSquale">diegoSqualemessages none  defined. Px50y46 { Px50y47, Px51y46 } CellNode (50 @ 46) (150)Px59y56 { Px60y56, Px59y55 } CellNode (59 @ 56) (150)Px46y58 { Px45y58, Px47y58, Px46y57 } CellNode (46 @ 58) (150)Px18y28 { Px17y28, Px18y27, Px19y28 } CellNode (18 @ 28) (150)Px42y46 { Px41y46, Px42y47 } CellNode (42 @ 46) (150)Px60y53 { Px60y52, Px60y54, Px59y53 } CellNode (60 @ 53) (150)Px69y63 { Px69y64, Px70y63 } CellNode (69 @ 63) (150)Px21y48 { Px22y48, Px21y49 } CellNode (21 @ 48) (150)Px47y15 { Px46y15, Px48y15, Px47y14, Px47y16 } CellNode (47 @ 15) (150)Px52y53 { Px52y52, Px51y53, Px52y54, Px53y53 } CellNode (52 @ 53) (150)Px2y47 { Px3y47, Px2y48, Px2y46 } CellNode (2 @ 47) (150)Px32y23 { Px31y23, Px32y24 } CellNode (32 @ 23) (150)Px26y17 { Px25y17, Px26y16, Px26y18 } CellNode (26 @ 17) (150)Px52y29 { Px52y28, Px52y30, Px53y29, Px51y29 } CellNode (52 @ 29) (150)Px31y55 { Px31y56, Px31y54, Px30y55 } CellNode (31 @ 55) (150)Px28y35 { Px27y35, Px28y34, Px28y36 } CellNode (28 @ 35) (150)Px62y60 { Px62y59, Px62y61, Px63y60, Px61y60 } CellNode (62 @ 60) (150)Px38y47 { Px38y46, Px39y47 } CellNode (38 @ 47) (150)Px10y57 { Px10y56, Px9y57, Px10y58, Px11y57 } CellNode (10 @ 57) (150)Px15y50 { Px14y50, Px15y49, Px15y51, Px16y50 } CellNode (15 @ 50) (150)Px32y12 { Px33y12, Px31y12, Px32y11, Px32y13 } CellNode (32 @ 12) (150)Px17y49 { Px18y49, Px16y49 } CellNode (17 @ 49) (150)Px35y56 { Px34y56, Px35y55, Px36y56 } CellNode (35 @ 56) (150)Px46y36 { Px47y36, Px45y36, Px46y35, Px46y37 } CellNode (46 @ 36) (150)Px33y38 { Px33y39, Px34y38, Px33y37 } CellNode (33 @ 38) (150)Px8y55 { Px9y55, Px7y55, Px8y54 } CellNode (8 @ 55) (150)Px21y21 { Px21y22, Px20y21, Px21y20 } CellNode (21 @ 21) (150)Px19y51 { Px18y51, Px19y50, Px20y51 } CellNode (19 @ 51) (150)Px35y45 { Px35y44, Px34y45, Px35y46, Px36y45 } CellNode (35 @ 45) (150)Px61y57 { Px61y56, Px61y58, Px62y57, Px60y57 } CellNode (61 @ 57) (150)Px46y20 { Px45y20, Px46y19, Px47y20, Px46y21 } CellNode (46 @ 20) (150)Px48y19 { Px48y20, Px49y19, Px47y19, Px48y18 } CellNode (48 @ 19) (150)Px33y27 { Px33y28, Px32y27, Px33y26 } CellNode (33 @ 27) (150)Px25y22 { Px25y21, Px25y23, Px24y22, Px26y22 } CellNode (25 @ 22) (150)Px51y34 { Px51y33, Px52y34 } CellNode (51 @ 34) (150)Px22y47 { Px23y47, Px22y48, Px22y46 } CellNode (22 @ 47) (150)Px71y64 { Px71y63, Px70y64 } CellNode (71 @ 64) (150)Px45y52 { Px44y52, Px46y52, Px45y51 } CellNode (45 @ 52) (150)Px17y22 { Px16y22, Px17y23, Px18y22 } CellNode (17 @ 22) (150)Px39y46 { Px39y45, Px39y47, Px38y46, Px40y46 } CellNode (39 @ 46) (150)Px11y56 { Px12y56, Px11y57, Px10y56 } CellNode (11 @ 56) (150)Px33y11 { Px34y11, Px32y11, Px33y12, Px33y10 } CellNode (33 @ 11) (150)Px29y28 { Px29y27, Px28y28 } CellNode (29 @ 28) (150)Px51y23 { Px51y22, Px52y23, Px51y24 } CellNode (51 @ 23) (150)Px47y35 { Px47y36, Px46y35 } CellNode (47 @ 35) (150)Px28y55 { Px29y55 } CellNode (28 @ 55) (150)Px30y25 { Px31y25, Px30y26, Px30y24 } CellNode (30 @ 25) (150)Px67y65 { Px66y65, Px68y65 } CellNode (67 @ 65) (150)Px22y20 { Px23y20, Px22y19, Px21y20 } CellNode (22 @ 20) (150)Px50y55 { Px51y55, Px50y56 } CellNode (50 @ 55) (150)Px42y50 { Px41y50, Px42y49, Px42y51, Px43y50 } CellNode (42 @ 50) (150)Px33y5 { Px33y6, Px34y5 } CellNode (33 @ 5) (150)Px34y50 { Px33y50, Px34y51 } CellNode (34 @ 50) (150)Px49y18 { Px49y17, Px49y19, Px48y18 } CellNode (49 @ 18) (150)Px13y52 { Px12y52, Px13y51, Px13y53 } CellNode (13 @ 52) (150)Px44y7 { Px45y7, Px43y7, Px44y8, Px44y6 } CellNode (44 @ 7) (150)Px46y51 { Px45y51, Px46y52 } CellNode (46 @ 51) (150)Px13y28 { Px13y27, Px14y28 } CellNode (13 @ 28) (150)Px52y38 { Px52y37, Px53y38 } CellNode (52 @ 38) (150)Px33y58 { Px33y59, Px32y58, Px33y57 } CellNode (33 @ 58) (150)Px64y63 { Px64y64, Px64y62, Px65y63 } CellNode (64 @ 63) (150)Px36y33 { Px36y34, Px37y33 } CellNode (36 @ 33) (150)Px21y41 { Px21y42, Px21y40, Px22y41 } CellNode (21 @ 41) (150)Px6y57 { Px6y56, Px5y57 } CellNode (6 @ 57) (150)Px54y40 { Px55y40, Px53y40, Px54y41, Px54y39 } CellNode (54 @ 40) (150)Px41y47 { Px42y47, Px41y46, Px40y47 } CellNode (41 @ 47) (150)Px46y40 { Px45y40, Px46y39 } CellNode (46 @ 40) (150)Px52y22 { Px51y22, Px52y23 } CellNode (52 @ 22) (150)Px68y64 { Px68y65, Px69y64 } CellNode (68 @ 64) (150)Px20y49 { Px20y50, Px21y49, Px19y49 } CellNode (20 @ 49) (150)Px31y24 { Px31y25, Px31y23, Px32y24, Px30y24 } CellNode (31 @ 24) (150)Px51y54 { Px51y53, Px52y54, Px51y55 } CellNode (51 @ 54) (150)Px35y4 { Px34y4, Px35y5, Px36y4 } CellNode (35 @ 4) (150)Px33y47 { Px33y48, Px33y46, Px32y47 } CellNode (33 @ 47) (150)Px30y56 { Px30y55, Px31y56, Px29y56, Px30y57 } CellNode (30 @ 56) (150)Px61y61 { Px61y60, Px62y61, Px61y62 } CellNode (61 @ 61) (150)Px31y13 { Px30y13, Px31y12, Px32y13, Px31y14 } CellNode (31 @ 13) (150)Px25y31 { Px26y31, Px25y30, Px24y31, Px25y32 } CellNode (25 @ 31) (150)Px27y25 { Px26y25, Px27y24 } CellNode (27 @ 25) (150)Px53y37 { Px53y36, Px53y38, Px52y37 } CellNode (53 @ 37) (150)Px47y55 { Px46y55, Px47y56, Px47y54 } CellNode (47 @ 55) (150)Px45y37 { Px45y36, Px44y37, Px46y37, Px45y38 } CellNode (45 @ 37) (150)Px39y55 { Px40y55, Px39y54, Px38y55, Px39y56 } CellNode (39 @ 55) (150)Px22y40 { Px22y41, Px21y40, Px23y40, Px22y39 } CellNode (22 @ 40) (150)Px43y19 { Px43y20, Px42y19, Px44y19 } CellNode (43 @ 19) (150)Px7y56 { Px6y56, Px7y55 } CellNode (7 @ 56) (150)Px24y39 { Px24y38, Px24y40, Px23y39 } CellNode (24 @ 39) (150)Px29y32 { Px28y32, Px29y33, Px30y32 } CellNode (29 @ 32) (150)Px20y22 { Px20y21, Px21y22, Px19y22, Px20y23 } CellNode (20 @ 22) (150)Px40y52 { Px40y53, Px39y52, Px41y52, Px40y51 } CellNode (40 @ 52) (150)Px37y3 { Px37y4, Px38y3, Px36y3 } CellNode (37 @ 3) (150)Px53y26 { Px53y27, Px52y26, Px53y25 } CellNode (53 @ 26) (150)Px27y14 { Px27y15, Px28y14, Px26y14, Px27y13 } CellNode (27 @ 14) (150)Px45y21 { Px46y21, Px45y20 } CellNode (45 @ 21) (150)Px60y58 { Px60y57, Px60y59, Px61y58 } CellNode (60 @ 58) (150)Px49y38 { Px49y39, Px49y37, Px50y38, Px48y38 } CellNode (49 @ 38) (150)Px32y28 { Px32y27, Px33y28, Px31y28 } CellNode (32 @ 28) (150)Px34y46 { Px33y46, Px34y45, Px35y46 } CellNode (34 @ 46) (150)Px29y21 { Px29y22, Px29y20, Px28y21 } CellNode (29 @ 21) (150)Px70y65 { Px69y65, Px70y64 } CellNode (70 @ 65) (150)Px16y23 { Px17y23, Px16y24, Px16y22, Px15y23 } CellNode (16 @ 23) (150)Px2y60 { Px2y61, Px3y60, Px2y59 } CellNode (2 @ 60) (150)Px45y10 { Px44y10, Px45y9, Px46y10, Px45y11 } CellNode (45 @ 10) (150)Px26y30 { Px26y31, Px26y29, Px25y30 } CellNode (26 @ 30) (150)Px52y42 { Px51y42, Px52y43, Px52y41, Px53y42 } CellNode (52 @ 42) (150)Px38y36 { Px38y35, Px37y36, Px39y36, Px38y37 } CellNode (38 @ 36) (150)Px23y44 { Px22y44, Px23y45 } CellNode (23 @ 44) (150)Px41y51 { Px40y51, Px41y50, Px41y52, Px42y51 } CellNode (41 @ 51) (150)Px21y26 { Px21y27 } CellNode (21 @ 26) (150)Px28y13 { Px28y12, Px29y13, Px28y14, Px27y13 } CellNode (28 @ 13) (150)Px52y31 { Px51y31, Px53y31, Px52y30 } CellNode (52 @ 31) (150)Px28y18 { Px29y18, Px27y18, Px28y17, Px28y19 } CellNode (28 @ 18) (150)Px33y51 { Px33y52, Px34y51, Px32y51, Px33y50 } CellNode (33 @ 51) (150)Px12y53 { Px12y52, Px12y54, Px13y53 } CellNode (12 @ 53) (150)Px58y50 { Px59y50, Px58y49, Px58y51 } CellNode (58 @ 50) (150)Px51y39 { Px50y39, Px51y40 } CellNode (51 @ 39) (150)Px41y40 { Px40y40, Px42y40, Px41y39 } CellNode (41 @ 40) (150)Px32y59 { Px31y59, Px33y59, Px32y58 } CellNode (32 @ 59) (150)Px17y27 { Px17y28, Px18y27, Px16y27 } CellNode (17 @ 27) (150)Px43y39 { Px44y39, Px43y40, Px42y39 } CellNode (43 @ 39) (150)Px45y57 { Px45y56, Px46y57, Px45y58 } CellNode (45 @ 57) (150)Px35y34 { Px36y34, Px35y35 } CellNode (35 @ 34) (150)Px46y14 { Px46y13, Px46y15, Px47y14 } CellNode (46 @ 14) (150)Px27y34 { Px26y34, Px27y35, Px28y34, Px27y33 } CellNode (27 @ 34) (150)Px49y58 { Px48y58, Px49y57 } CellNode (49 @ 58) (150)Px51y28 { Px51y27, Px51y29, Px52y28 } CellNode (51 @ 28) (150)Px25y16 { Px25y17, Px26y16, Px25y15 } CellNode (25 @ 16) (150)Px32y48 { Px32y49, Px33y48, Px31y48, Px32y47 } CellNode (32 @ 48) (150)Px37y41 { Px37y40, Px36y41 } CellNode (37 @ 41) (150)Px45y41 { Px45y40, Px44y41 } CellNode (45 @ 41) (150)Px30y8 { Px30y9, Px31y8 } CellNode (30 @ 8) (150)Px57y47 { Px57y48, Px56y47, Px58y47, Px57y46 } CellNode (57 @ 47) (150)Px53y30 { Px53y31, Px53y29, Px52y30 } CellNode (53 @ 30) (150)Px29y17 { Px29y18, Px28y17, Px29y16 } CellNode (29 @ 17) (150)Px14y25 { Px15y25, Px13y25, Px14y24, Px14y26 } CellNode (14 @ 25) (150)Px34y55 { Px34y54, Px34y56, Px35y55 } CellNode (34 @ 55) (150)Px30y14 { Px31y14, Px30y13, Px30y15, Px29y14 } CellNode (30 @ 14) (150)Px24y32 { Px24y31, Px25y32, Px23y32 } CellNode (24 @ 32) (150)Px18y50 { Px18y51, Px19y50, Px18y49 } CellNode (18 @ 50) (150)Px59y54 { Px60y54, Px58y54, Px59y53, Px59y55 } CellNode (59 @ 54) (150)Px46y56 { Px47y56, Px45y56, Px46y57, Px46y55 } CellNode (46 @ 56) (150)Px13y57 { Px13y56, Px13y58, Px12y57 } CellNode (13 @ 57) (150)Px44y38 { Px45y38, Px44y37, Px44y39 } CellNode (44 @ 38) (150)Px38y56 { Px38y55, Px39y56, Px37y56 } CellNode (38 @ 56) (150)Px60y51 { Px59y51, Px60y52 } CellNode (60 @ 51) (150)Px36y38 { Px36y39, Px35y38 } CellNode (36 @ 38) (150)Px47y13 { Px47y14, Px46y13, Px47y12 } CellNode (47 @ 13) (150)Px2y45 { Px3y45, Px2y46 } CellNode (2 @ 45) (150)Px54y45 { Px54y44, Px55y45, Px53y45, Px54y46 } CellNode (54 @ 45) (150)Px24y21 { Px23y21, Px24y22, Px25y21 } CellNode (24 @ 21) (150)Px50y33 { Px51y33, Px50y32 } CellNode (50 @ 33) (150)Px52y27 { Px53y27, Px51y27, Px52y28, Px52y26 } CellNode (52 @ 27) (150)Px31y53 { Px30y53, Px31y54, Px31y52 } CellNode (31 @ 53) (150)Px26y15 { Px26y16, Px27y15, Px25y15, Px26y14 } CellNode (26 @ 15) (150)Px32y7 { Px32y6, Px31y7, Px32y8, Px33y7 } CellNode (32 @ 7) (150)Px28y33 { Px28y34, Px28y32, Px29y33, Px27y33 } CellNode (28 @ 33) (150)Px38y45 { Px37y45, Px39y45, Px38y46 } CellNode (38 @ 45) (150)Px10y55 { Px10y56, Px9y55 } CellNode (10 @ 55) (150)Px49y20 { Px50y20, Px49y19, Px48y20 } CellNode (49 @ 20) (150)Px32y10 { Px32y11, Px33y10, Px31y10 } CellNode (32 @ 10) (150)Px23y29 { Px23y28, Px22y29, Px23y30, Px24y29 } CellNode (23 @ 29) (150)Px15y24 { Px16y24, Px15y25, Px14y24, Px15y23 } CellNode (15 @ 24) (150)Px15y29 { Px15y28, Px16y29 } CellNode (15 @ 29) (150)Px35y54 { Px36y54, Px34y54, Px35y55, Px35y53 } CellNode (35 @ 54) (150)Px44y11 { Px44y10, Px45y11 } CellNode (44 @ 11) (150)Px25y36 { Px25y37, Px26y36, Px24y36, Px25y35 } CellNode (25 @ 36) (150)Px51y48 { Px51y47, Px50y48 } CellNode (51 @ 48) (150)Px35y43 { Px35y44, Px36y43, Px35y42, Px34y43 } CellNode (35 @ 43) (150)Px20y51 { Px21y51, Px19y51, Px20y50 } CellNode (20 @ 51) (150)Px37y37 { Px37y36, Px38y37 } CellNode (37 @ 37) (150)Px22y45 { Px23y45, Px21y45, Px22y46, Px22y44 } CellNode (22 @ 45) (150)Px20y27 { Px20y28, Px19y27, Px21y27 } CellNode (20 @ 27) (150)Px34y6 { Px35y6, Px34y5, Px33y6, Px34y7 } CellNode (34 @ 6) (150)Px51y32 { Px51y31, Px50y32, Px51y33 } CellNode (51 @ 32) (150)Px3y49 { Px3y48, Px2y49 } CellNode (3 @ 49) (150)Px27y19 { Px27y20, Px27y18, Px28y19 } CellNode (27 @ 19) (150)Px45y50 { Px44y50, Px45y51 } CellNode (45 @ 50) (150)Px42y6 { Px42y5, Px43y6, Px41y6 } CellNode (42 @ 6) (150)Px61y55 { Px61y56, Px60y55 } CellNode (61 @ 55) (150)Px48y17 { Px49y17, Px48y16, Px47y17, Px48y18 } CellNode (48 @ 17) (150)Px45y8 { Px45y9, Px44y8, Px45y7 } CellNode (45 @ 8) (150)Px29y26 { Px29y27, Px28y26, Px30y26 } CellNode (29 @ 26) (150)Px51y21 { Px50y21, Px51y22, Px51y20 } CellNode (51 @ 21) (150)Px16y28 { Px16y27, Px16y29, Px15y28, Px17y28 } CellNode (16 @ 28) (150)Px30y23 { Px30y22, Px31y23, Px30y24 } CellNode (30 @ 23) (150)Px26y35 { Px26y36, Px25y35, Px27y35, Px26y34 } CellNode (26 @ 35) (150)Px9y57 { Px9y58, Px9y56, Px10y57 } CellNode (9 @ 57) (150)Px29y10 { Px29y11, Px30y10, Px29y9, Px28y10 } CellNode (29 @ 10) (150)Px50y29 { Px51y29 } CellNode (50 @ 29) (150)Px31y49 { Px31y50, Px32y49, Px31y48 } CellNode (31 @ 49) (150)Px36y42 { Px36y43, Px35y42, Px36y41 } CellNode (36 @ 42) (150)Px21y50 { Px22y50, Px21y51, Px20y50, Px21y49 } CellNode (21 @ 50) (150)Px49y40 { Px49y39, Px50y40 } CellNode (49 @ 40) (150)Px36y5 { Px36y4, Px35y5 } CellNode (36 @ 5) (150)Px13y50 { Px13y51, Px14y50 } CellNode (13 @ 50) (150)Px4y48 { Px4y47, Px3y48 } CellNode (4 @ 48) (150)Px26y24 { Px25y24, Px26y25, Px27y24, Px26y23 } CellNode (26 @ 24) (150)Px13y26 { Px13y27, Px14y26, Px13y25 } CellNode (13 @ 26) (150)Px52y36 { Px53y36, Px52y37, Px52y35 } CellNode (52 @ 36) (150)Px33y56 { Px32y56, Px34y56, Px33y57 } CellNode (33 @ 56) (150)Px64y61 { Px64y62, Px63y61 } CellNode (64 @ 61) (150)Px12y58 { Px11y58, Px13y58, Px12y57 } CellNode (12 @ 58) (150)Px6y55 { Px7y55, Px6y56, Px5y55 } CellNode (6 @ 55) (150)Px34y13 { Px34y12, Px33y13 } CellNode (34 @ 13) (150)Px23y33 { Px23y32 } CellNode (23 @ 33) (150)Px44y20 { Px43y20, Px45y20, Px44y19 } CellNode (44 @ 20) (150)Px35y39 { Px36y39, Px34y39, Px35y38, Px35y40 } CellNode (35 @ 39) (150)Px48y37 { Px49y37, Px47y37, Px48y36, Px48y38 } CellNode (48 @ 37) (150)Px51y52 { Px52y52, Px51y53, Px50y52, Px51y51 } CellNode (51 @ 52) (150)Px46y19 { Px46y18, Px46y20, Px47y19, Px45y19 } CellNode (46 @ 19) (150)Px38y4 { Px37y4, Px38y3, Px39y4 } CellNode (38 @ 4) (150)Px33y45 { Px34y45, Px33y44, Px32y45, Px33y46 } CellNode (33 @ 45) (150)Px30y54 { Px31y54, Px29y54, Px30y55, Px30y53 } CellNode (30 @ 54) (150)Px37y46 { Px37y45, Px36y46, Px38y46 } CellNode (37 @ 46) (150)Px31y11 { Px31y12, Px32y11, Px30y11, Px31y10 } CellNode (31 @ 11) (150)Px51y41 { Px51y42, Px52y41, Px51y40, Px50y41 } CellNode (51 @ 41) (150)Px27y23 { Px26y23, Px27y24 } CellNode (27 @ 23) (150)Px47y53 { Px47y52, Px46y53, Px47y54 } CellNode (47 @ 53) (150)Px19y23 { Px19y22, Px18y23, Px20y23 } CellNode (19 @ 23) (150)Px39y53 { Px39y54, Px40y53, Px38y53, Px39y52 } CellNode (39 @ 53) (150)Px65y65 { Px66y65, Px65y64 } CellNode (65 @ 65) (150)Px7y54 { Px7y55, Px8y54 } CellNode (7 @ 54) (150)Px24y37 { Px25y37, Px24y38, Px23y37, Px24y36 } CellNode (24 @ 37) (150)Px50y49 { Px49y49, Px50y50, Px50y48 } CellNode (50 @ 49) (150)Px35y12 { Px35y11, Px34y12 } CellNode (35 @ 12) (150)Px22y19 { Px22y20, Px23y19 } CellNode (22 @ 19) (150)Px20y20 { Px20y21, Px21y20 } CellNode (20 @ 20) (150)Px42y49 { Px41y49, Px42y48, Px42y50, Px43y49 } CellNode (42 @ 49) (150)Px53y24 { Px53y25, Px52y24 } CellNode (53 @ 24) (150)Px49y36 { Px48y36, Px49y37 } CellNode (49 @ 36) (150)Px60y56 { Px59y56, Px61y56, Px60y55, Px60y57 } CellNode (60 @ 56) (150)Px40y50 { Px40y51, Px41y50, Px40y49 } CellNode (40 @ 50) (150)Px32y26 { Px31y26, Px32y25, Px32y27, Px33y26 } CellNode (32 @ 26) (150)Px34y44 { Px35y44, Px33y44, Px34y45, Px34y43 } CellNode (34 @ 44) (150)Px52y56 { Px52y55, Px51y56 } CellNode (52 @ 56) (150)Px27y12 { Px28y12, Px27y13 } CellNode (27 @ 12) (150)Px44y51 { Px43y51, Px45y51, Px44y50, Px44y52 } CellNode (44 @ 51) (150)Px50y38 { Px50y39, Px49y38 } CellNode (50 @ 38) (150)Px70y63 { Px70y64, Px71y63, Px69y63 } CellNode (70 @ 63) (150)Px31y58 { Px31y57, Px32y58, Px31y59 } CellNode (31 @ 58) (150)Px4y57 { Px3y57, Px4y56, Px5y57 } CellNode (4 @ 57) (150)Px32y15 { Px32y14, Px31y15, Px33y15 } CellNode (32 @ 15) (150)Px28y27 { Px29y27, Px28y26, Px28y28 } CellNode (28 @ 27) (150)Px50y22 { Px50y21, Px51y22 } CellNode (50 @ 22) (150)Px48y57 { Px48y58, Px49y57, Px48y56, Px47y57 } CellNode (48 @ 57) (150)Px44y40 { Px45y40, Px43y40, Px44y39, Px44y41 } CellNode (44 @ 40) (150)Px54y39 { Px54y38, Px53y39, Px54y40 } CellNode (54 @ 39) (150)Px46y39 { Px46y38, Px45y39, Px46y40 } CellNode (46 @ 39) (150)Px66y64 { Px66y65, Px65y64 } CellNode (66 @ 64) (150)Px38y34 { Px38y35, Px37y34, Px38y33 } CellNode (38 @ 34) (150)Px21y24 { Px21y23 } CellNode (21 @ 24) (150)Px28y11 { Px29y11, Px28y12, Px28y10 } CellNode (28 @ 11) (150)Px56y46 { Px55y46, Px56y47, Px57y46, Px56y45 } CellNode (56 @ 46) (150)Px43y48 { Px42y48, Px43y47, Px43y49 } CellNode (43 @ 48) (150)Px12y51 { Px13y51, Px12y52 } CellNode (12 @ 51) (150)Px31y9 { Px31y10, Px30y9, Px31y8 } CellNode (31 @ 9) (150)Px45y55 { Px45y54, Px46y55, Px45y56 } CellNode (45 @ 55) (150)Px32y57 { Px33y57, Px32y56, Px32y58, Px31y57 } CellNode (32 @ 57) (150)Px63y62 { Px62y62, Px64y62, Px63y61 } CellNode (63 @ 62) (150)Px29y50 { Px29y51, Px30y50 } CellNode (29 @ 50) (150)Px46y12 { Px45y12, Px46y13, Px47y12, Px46y11 } CellNode (46 @ 12) (150)Px33y14 { Px32y14, Px33y13, Px33y15 } CellNode (33 @ 14) (150)Px27y32 { Px28y32, Px26y32, Px27y31, Px27y33 } CellNode (27 @ 32) (150)Px53y44 { Px54y44, Px52y44, Px53y43, Px53y45 } CellNode (53 @ 44) (150)Px40y46 { Px41y46, Px39y46, Px40y47, Px40y45 } CellNode (40 @ 46) (150)Px49y56 { Px50y56, Px48y56, Px49y57 } CellNode (49 @ 56) (150)Px22y39 { Px22y40, Px23y39 } CellNode (22 @ 39) (150)Px5y56 { Px6y56, Px4y56, Px5y55, Px5y57 } CellNode (5 @ 56) (150)Px32y46 { Px33y46, Px32y45, Px32y47 } CellNode (32 @ 46) (150)Px39y38 { Px38y38, Px39y39, Px40y38, Px39y37 } CellNode (39 @ 38) (150)Px22y23 { Px21y23 } CellNode (22 @ 23) (150)Px42y53 { Px41y53, Px42y52 } CellNode (42 @ 53) (150)Px29y15 { Px28y15, Px29y16, Px30y15, Px29y14 } CellNode (29 @ 15) (150)Px14y23 { Px14y24, Px15y23 } CellNode (14 @ 23) (150)Px34y53 { Px34y54, Px35y53, Px33y53, Px34y52 } CellNode (34 @ 53) (150)Px62y59 { Px62y60, Px61y59, Px62y58 } CellNode (62 @ 59) (150)Px24y30 { Px25y30, Px24y31, Px23y30, Px24y29 } CellNode (24 @ 30) (150)Px15y49 { Px15y50, Px14y49, Px16y49 } CellNode (15 @ 49) (150)Px59y52 { Px59y53, Px60y52, Px58y52, Px59y51 } CellNode (59 @ 52) (150)Px46y54 { Px46y53, Px47y54, Px45y54, Px46y55 } CellNode (46 @ 54) (150)Px26y29 { Px26y30 } CellNode (26 @ 29) (150)Px13y55 { Px13y56, Px14y55, Px13y54, Px12y55 } CellNode (13 @ 55) (150)Px38y54 { Px39y54, Px38y55, Px38y53, Px37y54 } CellNode (38 @ 54) (150)Px36y36 { Px35y36, Px36y35, Px37y36 } CellNode (36 @ 36) (150)Px23y38 { Px24y38, Px23y37, Px23y39 } CellNode (23 @ 38) (150)Px21y44 { Px21y45, Px22y44, Px21y43 } CellNode (21 @ 44) (150)Px47y11 { Px46y11, Px47y12 } CellNode (47 @ 11) (150)Px50y31 { Px50y32, Px51y31 } CellNode (50 @ 31) (150)Px52y25 { Px52y24, Px52y26, Px51y25, Px53y25 } CellNode (52 @ 25) (150)Px31y51 { Px31y50, Px31y52, Px32y51, Px30y51 } CellNode (31 @ 51) (150)Px26y13 { Px26y14, Px27y13 } CellNode (26 @ 13) (150)Px31y27 { Px32y27, Px31y28, Px31y26 } CellNode (31 @ 27) (150)Px51y57 { Px51y56, Px50y57 } CellNode (51 @ 57) (150)Px28y20 { Px28y21, Px29y20, Px27y20, Px28y19 } CellNode (28 @ 20) (150)Px58y49 { Px58y48, Px59y49, Px58y50 } CellNode (58 @ 49) (150)Px43y7 { Px43y6, Px44y7 } CellNode (43 @ 7) (150)Px15y27 { Px16y27, Px15y28 } CellNode (15 @ 27) (150)Px41y39 { Px41y40, Px40y39, Px42y39 } CellNode (41 @ 39) (150)Px46y9 { Px45y9, Px46y10 } CellNode (46 @ 9) (150)Px14y54 { Px13y54, Px14y55, Px14y53 } CellNode (14 @ 54) (150)Px3y58 { Px3y57, Px3y59, Px2y58 } CellNode (3 @ 58) (150)Px51y46 { Px51y45, Px51y47, Px52y46, Px50y46 } CellNode (51 @ 46) (150)Px47y58 { Px48y58, Px47y57, Px46y58 } CellNode (47 @ 58) (150)Px43y41 { Px42y41, Px44y41, Px43y40 } CellNode (43 @ 41) (150)Px19y28 { Px19y27, Px18y28, Px20y28 } CellNode (19 @ 28) (150)Px37y35 { Px38y35, Px36y35, Px37y36, Px37y34 } CellNode (37 @ 35) (150)Px22y43 { Px21y43, Px22y44, Px22y42 } CellNode (22 @ 43) (150)Px48y15 { Px47y15, Px48y14, Px48y16 } CellNode (48 @ 15) (150)Px34y4 { Px35y4, Px34y5 } CellNode (34 @ 4) (150)Px40y55 { Px40y56, Px39y55, Px41y55, Px40y54 } CellNode (40 @ 55) (150)Px51y30 { Px51y31, Px51y29, Px52y30 } CellNode (51 @ 30) (150)Px32y50 { Px31y50, Px32y49, Px32y51, Px33y50 } CellNode (32 @ 50) (150)Px3y47 { Px2y47, Px3y46, Px3y48, Px4y47 } CellNode (3 @ 47) (150)Px42y4 { Px42y5, Px41y4 } CellNode (42 @ 4) (150)Px30y32 { Px30y33, Px29y32 } CellNode (30 @ 32) (150)Px53y29 { Px53y30, Px52y29, Px53y28 } CellNode (53 @ 29) (150)Px55y47 { Px56y47, Px55y46 } CellNode (55 @ 47) (150)Px22y32 { Px23y32, Px22y31 } CellNode (22 @ 32) (150)Px59y48 { Px58y48, Px59y49 } CellNode (59 @ 48) (150)Px36y56 { Px35y56, Px37y56, Px36y55 } CellNode (36 @ 56) (150)Px34y38 { Px34y37, Px34y39, Px35y38, Px33y38 } CellNode (34 @ 38) (150)Px26y33 { Px26y32, Px27y33, Px26y34 } CellNode (26 @ 33) (150)Px52y45 { Px51y45, Px52y44, Px53y45, Px52y46 } CellNode (52 @ 45) (150)Px9y55 { Px8y55, Px9y56, Px10y55 } CellNode (9 @ 55) (150)Px50y51 { Px50y52, Px51y51, Px50y50 } CellNode (50 @ 51) (150)Px31y47 { Px32y47, Px31y48 } CellNode (31 @ 47) (150)Px36y40 { Px35y40, Px36y39, Px37y40, Px36y41 } CellNode (36 @ 40) (150)Px36y3 { Px36y4, Px37y3 } CellNode (36 @ 3) (150)Px47y20 { Px46y20, Px48y20, Px47y19 } CellNode (47 @ 20) (150)Px38y39 { Px38y38, Px39y39 } CellNode (38 @ 39) (150)Px41y6 { Px41y5, Px42y6, Px40y6, Px41y7 } CellNode (41 @ 6) (150)Px4y46 { Px4y47, Px3y46 } CellNode (4 @ 46) (150)Px41y54 { Px40y54, Px41y53, Px41y55 } CellNode (41 @ 54) (150)Px26y22 { Px26y23, Px25y22 } CellNode (26 @ 22) (150)Px13y24 { Px14y24, Px13y25 } CellNode (13 @ 24) (150)Px52y34 { Px52y35, Px51y34 } CellNode (52 @ 34) (150)Px21y29 { Px21y28, Px22y29 } CellNode (21 @ 29) (150)Px23y47 { Px22y47, Px23y46, Px23y48 } CellNode (23 @ 47) (150)Px12y56 { Px13y56, Px12y57, Px12y55, Px11y56 } CellNode (12 @ 56) (150)Px58y53 { Px58y52, Px59y53, Px58y54 } CellNode (58 @ 53) (150)Px34y11 { Px34y12, Px35y11, Px34y10, Px33y11 } CellNode (34 @ 11) (150)Px37y55 { Px37y56, Px36y55, Px38y55, Px37y54 } CellNode (37 @ 55) (150)Px33y43 { Px33y44, Px34y43 } CellNode (33 @ 43) (150)Px35y37 { Px35y36, Px35y38, Px34y37 } CellNode (35 @ 37) (150)Px29y55 { Px30y55, Px29y54, Px28y55, Px29y56 } CellNode (29 @ 55) (150)Px51y50 { Px50y50, Px51y51 } CellNode (51 @ 50) (150)Px23y20 { Px23y21, Px22y20, Px23y19 } CellNode (23 @ 20) (150)Px27y37 { Px27y36, Px28y37 } CellNode (27 @ 37) (150)Px43y50 { Px43y51, Px44y50, Px42y50, Px43y49 } CellNode (43 @ 50) (150)Px30y52 { Px30y53, Px30y51, Px31y52 } CellNode (30 @ 52) (150)Px40y3 { Px39y3, Px40y4 } CellNode (40 @ 3) (150)Px22y28 { Px23y28, Px21y28, Px22y29, Px22y27 } CellNode (22 @ 28) (150)Px14y28 { Px15y28, Px13y28 } CellNode (14 @ 28) (150)Px19y21 { Px19y22, Px20y21 } CellNode (19 @ 21) (150)Px65y63 { Px65y62, Px64y63, Px65y64 } CellNode (65 @ 63) (150)Px2y59 { Px2y60, Px3y59, Px2y58 } CellNode (2 @ 59) (150)Px24y35 { Px24y36, Px25y35 } CellNode (24 @ 35) (150)Px50y47 { Px50y46, Px50y48, Px51y47 } CellNode (50 @ 47) (150)Px55y40 { Px56y40, Px54y40 } CellNode (55 @ 40) (150)Px42y47 { Px42y48, Px43y47, Px41y47, Px42y46 } CellNode (42 @ 47) (150)Px34y42 { Px35y42, Px34y43 } CellNode (34 @ 42) (150)Px60y54 { Px60y53, Px60y55, Px59y54 } CellNode (60 @ 54) (150)Px69y64 { Px69y63, Px69y65, Px70y64, Px68y64 } CellNode (69 @ 64) (150)Px21y49 { Px22y49, Px21y48, Px20y49, Px21y50 } CellNode (21 @ 49) (150)Px47y16 { Px48y16, Px47y17, Px46y16, Px47y15 } CellNode (47 @ 16) (150)Px52y54 { Px51y54, Px52y53, Px52y55 } CellNode (52 @ 54) (150)Px2y48 { Px2y47, Px3y48, Px2y49 } CellNode (2 @ 48) (150)Px32y24 { Px32y23, Px31y24, Px32y25 } CellNode (32 @ 24) (150)Px26y18 { Px25y18, Px27y18, Px26y17 } CellNode (26 @ 18) (150)Px28y36 { Px27y36, Px28y37, Px28y35 } CellNode (28 @ 36) (150)Px31y56 { Px32y56, Px31y55, Px30y56, Px31y57 } CellNode (31 @ 56) (150)Px62y61 { Px63y61, Px62y60, Px61y61, Px62y62 } CellNode (62 @ 61) (150)Px10y58 { Px9y58, Px11y58, Px10y57 } CellNode (10 @ 58) (150)Px15y51 { Px15y50 } CellNode (15 @ 51) (150)Px32y13 { Px32y14, Px33y13, Px31y13, Px32y12 } CellNode (32 @ 13) (150)Px50y20 { Px50y21, Px49y20, Px51y20, Px50y19 } CellNode (50 @ 20) (150)Px46y37 { Px46y38, Px47y37, Px46y36, Px45y37 } CellNode (46 @ 37) (150)Px42y20 { Px42y19, Px43y20 } CellNode (42 @ 20) (150)Px23y40 { Px22y40, Px24y40, Px23y39 } CellNode (23 @ 40) (150)Px33y39 { Px33y38, Px34y39 } CellNode (33 @ 39) (150)Px21y22 { Px21y23, Px20y22, Px21y21 } CellNode (21 @ 22) (150)Px35y46 { Px36y46, Px35y45, Px34y46 } CellNode (35 @ 46) (150)Px61y58 { Px62y58, Px60y58, Px61y57, Px61y59 } CellNode (61 @ 58) (150)Px46y21 { Px45y21, Px46y20 } CellNode (46 @ 21) (150)Px33y28 { Px33y27, Px32y28 } CellNode (33 @ 28) (150)Px53y53 { Px52y53 } CellNode (53 @ 53) (150)Px25y23 { Px25y22, Px26y23, Px25y24 } CellNode (25 @ 23) (150)Px31y7 { Px32y7, Px31y8 } CellNode (31 @ 7) (150)Px22y48 { Px23y48, Px21y48, Px22y49, Px22y47 } CellNode (22 @ 48) (150)Px34y9 { Px34y10, Px33y9 } CellNode (34 @ 9) (150)Px17y23 { Px17y22, Px16y23, Px18y23 } CellNode (17 @ 23) (150)Px63y60 { Px63y61, Px62y60 } CellNode (63 @ 60) (150)Px39y47 { Px39y46, Px40y47, Px38y47 } CellNode (39 @ 47) (150)Px11y57 { Px11y58, Px10y57, Px12y57, Px11y56 } CellNode (11 @ 57) (150)Px16y50 { Px16y49, Px15y50 } CellNode (16 @ 50) (150)Px33y12 { Px34y12, Px33y13, Px32y12, Px33y11 } CellNode (33 @ 12) (150)Px46y10 { Px46y9, Px45y10, Px46y11 } CellNode (46 @ 10) (150)Px53y42 { Px53y43, Px52y42, Px54y42 } CellNode (53 @ 42) (150)Px18y49 { Px18y50, Px17y49, Px19y49 } CellNode (18 @ 49) (150)Px51y24 { Px51y25, Px51y23, Px52y24 } CellNode (51 @ 24) (150)Px47y36 { Px47y37, Px46y36, Px48y36, Px47y35 } CellNode (47 @ 36) (150)Px32y44 { Px32y45, Px33y44 } CellNode (32 @ 44) (150)Px45y18 { Px46y18, Px45y19 } CellNode (45 @ 18) (150)Px30y26 { Px31y26, Px29y26, Px30y25 } CellNode (30 @ 26) (150)Px50y56 { Px49y56, Px50y55, Px50y57, Px51y56 } CellNode (50 @ 56) (150)Px39y36 { Px39y37, Px38y36 } CellNode (39 @ 36) (150)Px42y51 { Px42y52, Px43y51, Px41y51, Px42y50 } CellNode (42 @ 51) (150)Px29y13 { Px28y13, Px30y13, Px29y14 } CellNode (29 @ 13) (150)Px33y6 { Px33y7, Px34y6, Px33y5, Px32y6 } CellNode (33 @ 6) (150)Px34y51 { Px33y51, Px34y52, Px34y50 } CellNode (34 @ 51) (150)Px36y45 { Px36y46, Px35y45, Px37y45 } CellNode (36 @ 45) (150)Px62y57 { Px61y57, Px62y58 } CellNode (62 @ 57) (150)Px49y19 { Px48y19, Px49y18, Px49y20, Px50y19 } CellNode (49 @ 19) (150)Px30y10 { Px30y9, Px30y11, Px29y10, Px31y10 } CellNode (30 @ 10) (150)Px13y53 { Px13y52, Px12y53, Px13y54, Px14y53 } CellNode (13 @ 53) (150)Px59y50 { Px59y51, Px59y49, Px58y50 } CellNode (59 @ 50) (150)Px46y52 { Px46y53, Px45y52, Px47y52, Px46y51 } CellNode (46 @ 52) (150)Px44y8 { Px45y8, Px44y7, Px44y9 } CellNode (44 @ 8) (150)Px18y22 { Px17y22, Px19y22, Px18y23 } CellNode (18 @ 22) (150)Px42y40 { Px42y41, Px43y40, Px41y40, Px42y39 } CellNode (42 @ 40) (150)Px33y59 { Px33y58, Px32y59 } CellNode (33 @ 59) (150)Px64y64 { Px64y63, Px65y64 } CellNode (64 @ 64) (150)Px50y40 { Px50y39, Px51y40, Px49y40, Px50y41 } CellNode (50 @ 40) (150)Px36y34 { Px36y35, Px37y34, Px36y33, Px35y34 } CellNode (36 @ 34) (150)Px23y36 { Px24y36, Px23y37 } CellNode (23 @ 36) (150)Px21y42 { Px21y41, Px22y42, Px21y43 } CellNode (21 @ 42) (150)Px54y41 { Px54y40, Px54y42 } CellNode (54 @ 41) (150)Px52y23 { Px51y23, Px52y24, Px52y22 } CellNode (52 @ 23) (150)Px68y65 { Px67y65, Px68y64, Px69y65 } CellNode (68 @ 65) (150)Px31y25 { Px31y26, Px30y25, Px32y25, Px31y24 } CellNode (31 @ 25) (150)Px35y5 { Px35y6, Px34y5, Px35y4, Px36y5 } CellNode (35 @ 5) (150)Px51y55 { Px52y55, Px50y55, Px51y54, Px51y56 } CellNode (51 @ 55) (150)Px33y48 { Px33y49, Px33y47, Px32y48 } CellNode (33 @ 48) (150)Px58y47 { Px57y47, Px58y48 } CellNode (58 @ 47) (150)Px30y57 { Px30y56, Px31y57 } CellNode (30 @ 57) (150)Px43y5 { Px43y6, Px42y5 } CellNode (43 @ 5) (150)Px61y62 { Px61y61, Px62y62 } CellNode (61 @ 62) (150)Px3y56 { Px4y56, Px3y57 } CellNode (3 @ 56) (150)Px31y14 { Px32y14, Px31y15, Px31y13, Px30y14 } CellNode (31 @ 14) (150)Px25y32 { Px26y32, Px24y32, Px25y31 } CellNode (25 @ 32) (150)Px53y38 { Px54y38, Px52y38, Px53y39, Px53y37 } CellNode (53 @ 38) (150)Px47y56 { Px46y56, Px48y56, Px47y57, Px47y55 } CellNode (47 @ 56) (150)Px45y38 { Px45y39, Px46y38, Px45y37, Px44y38 } CellNode (45 @ 38) (150)Px39y56 { Px40y56, Px38y56, Px39y55 } CellNode (39 @ 56) (150)Px37y33 { Px36y33, Px37y34, Px38y33 } CellNode (37 @ 33) (150)Px22y41 { Px21y41, Px22y42, Px22y40 } CellNode (22 @ 41) (150)Px20y23 { Px20y22, Px19y23, Px21y23 } CellNode (20 @ 23) (150)Px29y33 { Px29y34, Px30y33, Px28y33, Px29y32 } CellNode (29 @ 33) (150)Px3y45 { Px3y46, Px2y45 } CellNode (3 @ 45) (150)Px55y45 { Px54y45, Px55y46, Px56y45 } CellNode (55 @ 45) (150)Px37y4 { Px37y3, Px38y4, Px36y4 } CellNode (37 @ 4) (150)Px53y27 { Px53y26, Px53y28, Px52y27 } CellNode (53 @ 27) (150)Px40y53 { Px41y53, Px40y52, Px40y54, Px39y53 } CellNode (40 @ 53) (150)Px49y39 { Px49y40, Px49y38, Px50y39 } CellNode (49 @ 39) (150)Px60y59 { Px60y58, Px61y59 } CellNode (60 @ 59) (150)Px27y15 { Px26y15, Px27y14, Px27y16, Px28y15 } CellNode (27 @ 15) (150)Px22y30 { Px22y29, Px22y31, Px23y30 } CellNode (22 @ 30) (150)Px24y29 { Px24y30, Px23y29 } CellNode (24 @ 29) (150)Px29y22 { Px29y21, Px30y22 } CellNode (29 @ 22) (150)Px16y24 { Px16y23, Px15y24 } CellNode (16 @ 24) (150)Px36y54 { Px35y54, Px37y54, Px36y55 } CellNode (36 @ 54) (150)Px2y61 { Px2y60, Px3y61 } CellNode (2 @ 61) (150)Px34y36 { Px34y37, Px35y36 } CellNode (34 @ 36) (150)Px45y11 { Px45y12, Px45y10, Px44y11, Px46y11 } CellNode (45 @ 11) (150)Px26y31 { Px26y32, Px25y31, Px27y31, Px26y30 } CellNode (26 @ 31) (150)Px52y43 { Px52y44, Px53y43, Px52y42 } CellNode (52 @ 43) (150)Px44y19 { Px44y20, Px43y19, Px45y19 } CellNode (44 @ 19) (150)Px39y3 { Px38y3, Px39y4, Px40y3 } CellNode (39 @ 3) (150)Px38y37 { Px38y38, Px37y37, Px38y36, Px39y37 } CellNode (38 @ 37) (150)Px23y45 { Px23y46, Px22y45, Px23y44 } CellNode (23 @ 45) (150)Px41y52 { Px42y52, Px41y53, Px40y52, Px41y51 } CellNode (41 @ 52) (150)Px21y27 { Px21y28, Px22y27, Px21y26, Px20y27 } CellNode (21 @ 27) (150)Px28y14 { Px27y14, Px28y15, Px28y13, Px29y14 } CellNode (28 @ 14) (150)Px28y19 { Px28y20, Px27y19, Px28y18 } CellNode (28 @ 19) (150)Px33y52 { Px33y51, Px34y52, Px33y53 } CellNode (33 @ 52) (150)Px12y54 { Px13y54, Px12y53, Px12y55 } CellNode (12 @ 54) (150)Px58y51 { Px58y50, Px59y51, Px58y52 } CellNode (58 @ 51) (150)Px45y58 { Px45y57, Px46y58 } CellNode (45 @ 58) (150)Px17y28 { Px18y28, Px16y28, Px17y27, Px17y29 } CellNode (17 @ 28) (150)Px3y60 { Px2y60, Px3y61, Px3y59 } CellNode (3 @ 60) (150)Px35y35 { Px35y36, Px35y34, Px36y35 } CellNode (35 @ 35) (150)Px29y53 { Px29y54, Px30y53 } CellNode (29 @ 53) (150)Px46y15 { Px46y16, Px46y14, Px47y15 } CellNode (46 @ 15) (150)Px27y35 { Px28y35, Px27y34, Px26y35, Px27y36 } CellNode (27 @ 35) (150)Px40y49 { Px41y49, Px40y50 } CellNode (40 @ 49) (150)Px30y50 { Px30y51, Px31y50, Px29y50 } CellNode (30 @ 50) (150)Px51y29 { Px51y30, Px52y29, Px51y28, Px50y29 } CellNode (51 @ 29) (150)Px25y17 { Px25y16, Px26y17, Px25y18 } CellNode (25 @ 17) (150)Px32y49 { Px31y49, Px32y48, Px32y50, Px33y49 } CellNode (32 @ 49) (150)Px22y50 { Px22y51, Px21y50, Px22y49 } CellNode (22 @ 50) (150)Px30y9 { Px30y8, Px31y9, Px30y10, Px29y9 } CellNode (30 @ 9) (150)Px57y48 { Px57y47, Px58y48 } CellNode (57 @ 48) (150)Px53y31 { Px52y31, Px53y30 } CellNode (53 @ 31) (150)Px29y18 { Px30y18, Px28y18, Px29y17 } CellNode (29 @ 18) (150)Px40y38 { Px39y38, Px40y39 } CellNode (40 @ 38) (150)Px14y26 { Px13y26, Px14y25 } CellNode (14 @ 26) (150)Px49y48 { Px49y49, Px50y48 } CellNode (49 @ 48) (150)Px34y56 { Px34y57, Px35y56, Px33y56, Px34y55 } CellNode (34 @ 56) (150)Px2y57 { Px3y57, Px2y58 } CellNode (2 @ 57) (150)Px30y15 { Px31y15, Px30y14, Px29y15 } CellNode (30 @ 15) (150)Px13y58 { Px13y57, Px12y58 } CellNode (13 @ 58) (150)Px18y51 { Px19y51, Px18y50 } CellNode (18 @ 51) (150)Px59y55 { Px59y56, Px60y55, Px59y54 } CellNode (59 @ 55) (150)Px46y57 { Px47y57, Px46y58, Px45y57, Px46y56 } CellNode (46 @ 57) (150)Px18y27 { Px17y27, Px18y28, Px19y27 } CellNode (18 @ 27) (150)Px44y39 { Px45y39, Px43y39, Px44y38, Px44y40 } CellNode (44 @ 39) (150)Px34y40 { Px35y40, Px34y39 } CellNode (34 @ 40) (150)Px60y52 { Px60y51, Px60y53, Px59y52 } CellNode (60 @ 52) (150)Px36y39 { Px36y38, Px35y39, Px36y40 } CellNode (36 @ 39) (150)Px47y14 { Px47y13, Px48y14, Px46y14, Px47y15 } CellNode (47 @ 14) (150)Px52y52 { Px51y52, Px52y53 } CellNode (52 @ 52) (150)Px2y46 { Px3y46, Px2y45, Px2y47 } CellNode (2 @ 46) (150)Px24y22 { Px25y22, Px24y21 } CellNode (24 @ 22) (150)Px54y46 { Px54y45, Px55y46 } CellNode (54 @ 46) (150)Px52y28 { Px52y29, Px53y28, Px51y28, Px52y27 } CellNode (52 @ 28) (150)Px31y54 { Px31y55, Px30y54, Px31y53 } CellNode (31 @ 54) (150)Px26y16 { Px26y15, Px26y17, Px25y16, Px27y16 } CellNode (26 @ 16) (150)Px32y8 { Px32y7, Px31y8 } CellNode (32 @ 8) (150)Px28y34 { Px29y34, Px27y34, Px28y35, Px28y33 } CellNode (28 @ 34) (150)Px38y46 { Px38y47, Px39y46, Px37y46, Px38y45 } CellNode (38 @ 46) (150)Px10y56 { Px9y56, Px10y57, Px11y56, Px10y55 } CellNode (10 @ 56) (150)Px32y11 { Px31y11, Px32y12, Px33y11, Px32y10 } CellNode (32 @ 11) (150)Px15y25 { Px15y24, Px14y25 } CellNode (15 @ 25) (150)Px35y55 { Px35y56, Px34y55, Px36y55, Px35y54 } CellNode (35 @ 55) (150)Px46y35 { Px46y36, Px47y35 } CellNode (46 @ 35) (150)Px33y37 { Px34y37, Px33y38 } CellNode (33 @ 37) (150)Px8y54 { Px8y55, Px7y54 } CellNode (8 @ 54) (150)Px25y37 { Px25y36, Px24y37 } CellNode (25 @ 37) (150)Px21y20 { Px22y20, Px20y20, Px21y21 } CellNode (21 @ 20) (150)Px19y50 { Px19y51, Px18y50, Px20y50, Px19y49 } CellNode (19 @ 50) (150)Px23y19 { Px22y19, Px23y20 } CellNode (23 @ 19) (150)Px35y44 { Px34y44, Px35y45, Px35y43 } CellNode (35 @ 44) (150)Px22y46 { Px22y47, Px23y46, Px22y45 } CellNode (22 @ 46) (150)Px61y56 { Px61y57, Px61y55, Px60y56 } CellNode (61 @ 56) (150)Px48y18 { Px49y18, Px48y19, Px48y17 } CellNode (48 @ 18) (150)Px33y26 { Px32y26, Px33y27 } CellNode (33 @ 26) (150)Px25y21 { Px25y22, Px24y21 } CellNode (25 @ 21) (150)Px51y33 { Px51y34, Px50y33, Px51y32 } CellNode (51 @ 33) (150)Px20y28 { Px20y27, Px19y28, Px21y28 } CellNode (20 @ 28) (150)Px71y63 { Px71y64, Px70y63 } CellNode (71 @ 63) (150)Px34y7 { Px33y7, Px34y6 } CellNode (34 @ 7) (150)Px45y51 { Px45y52, Px46y51, Px45y50, Px44y51 } CellNode (45 @ 51) (150)Px39y45 { Px39y46, Px40y45, Px38y45 } CellNode (39 @ 45) (150)Px45y9 { Px46y9, Px45y10, Px45y8, Px44y9 } CellNode (45 @ 9) (150)Px33y10 { Px32y10, Px33y9, Px34y10, Px33y11 } CellNode (33 @ 10) (150)Px53y40 { Px53y39, Px54y40 } CellNode (53 @ 40) (150)Px29y27 { Px29y26, Px29y28, Px28y27 } CellNode (29 @ 27) (150)Px51y22 { Px51y23, Px52y22, Px51y21, Px50y22 } CellNode (51 @ 22) (150)Px16y29 { Px15y29, Px16y28, Px17y29 } CellNode (16 @ 29) (150)Px45y16 { Px46y16 } CellNode (45 @ 16) (150)Px30y24 { Px30y23, Px31y24, Px30y25 } CellNode (30 @ 24) (150)Px26y36 { Px27y36, Px26y35, Px25y36 } CellNode (26 @ 36) (150)Px9y58 { Px9y57, Px10y58 } CellNode (9 @ 58) (150)Px29y11 { Px29y10, Px30y11, Px28y11 } CellNode (29 @ 11) (150)Px36y43 { Px36y42, Px35y43 } CellNode (36 @ 43) (150)Px21y51 { Px22y51, Px21y50, Px20y51 } CellNode (21 @ 51) (150)Px41y4 { Px42y4, Px40y4, Px41y5 } CellNode (41 @ 4) (150)Px49y17 { Px48y17, Px49y18 } CellNode (49 @ 17) (150)Px13y51 { Px13y52, Px12y51, Px13y50 } CellNode (13 @ 51) (150)Px44y6 { Px43y6, Px44y7 } CellNode (44 @ 6) (150)Px26y25 { Px27y25, Px26y24 } CellNode (26 @ 25) (150)Px13y27 { Px13y26, Px13y28 } CellNode (13 @ 27) (150)Px52y37 { Px53y37, Px52y36, Px52y38 } CellNode (52 @ 37) (150)Px33y57 { Px33y58, Px34y57, Px33y56, Px32y57 } CellNode (33 @ 57) (150)Px50y19 { Px49y19, Px50y20 } CellNode (50 @ 19) (150)Px64y62 { Px64y63, Px64y61, Px63y62, Px65y62 } CellNode (64 @ 62) (150)Px21y40 { Px21y41, Px22y40 } CellNode (21 @ 40) (150)Px6y56 { Px6y57, Px7y56, Px5y56, Px6y55 } CellNode (6 @ 56) (150)Px41y46 { Px41y47, Px40y46, Px42y46 } CellNode (41 @ 46) (150)Px48y38 { Px48y37, Px49y38 } CellNode (48 @ 38) (150)Px31y23 { Px32y23, Px31y24, Px30y23 } CellNode (31 @ 23) (150)Px33y46 { Px33y47, Px34y46, Px33y45, Px32y46 } CellNode (33 @ 46) (150)Px51y53 { Px51y54, Px52y53, Px51y52 } CellNode (51 @ 53) (150)Px40y6 { Px41y6 } CellNode (40 @ 6) (150)Px30y55 { Px31y55, Px29y55, Px30y56, Px30y54 } CellNode (30 @ 55) (150)Px61y60 { Px61y61, Px62y60, Px61y59 } CellNode (61 @ 60) (150)Px14y50 { Px13y50, Px15y50, Px14y49 } CellNode (14 @ 50) (150)Px31y12 { Px31y13, Px31y11, Px32y12 } CellNode (31 @ 12) (150)Px25y30 { Px24y30, Px26y30, Px25y31 } CellNode (25 @ 30) (150)Px51y42 { Px51y41, Px52y42 } CellNode (51 @ 42) (150)Px16y49 { Px16y50, Px17y49, Px15y49 } CellNode (16 @ 49) (150)Px47y54 { Px47y53, Px47y55, Px46y54 } CellNode (47 @ 54) (150)Px53y36 { Px52y36, Px53y37 } CellNode (53 @ 36) (150)Px27y24 { Px26y24, Px27y25, Px27y23 } CellNode (27 @ 24) (150)Px45y36 { Px46y36, Px45y37 } CellNode (45 @ 36) (150)Px39y54 { Px39y53, Px39y55, Px40y54, Px38y54 } CellNode (39 @ 54) (150)Px7y55 { Px8y55, Px7y56, Px6y55, Px7y54 } CellNode (7 @ 55) (150)Px24y38 { Px23y38, Px24y39, Px24y37 } CellNode (24 @ 38) (150)Px20y21 { Px21y21, Px19y21, Px20y22, Px20y20 } CellNode (20 @ 21) (150)Px40y51 { Px40y50, Px41y51, Px40y52 } CellNode (40 @ 51) (150)Px27y13 { Px27y14, Px28y13, Px27y12, Px26y13 } CellNode (27 @ 13) (150)Px53y25 { Px53y24, Px53y26, Px52y25 } CellNode (53 @ 25) (150)Px45y20 { Px46y20, Px45y21, Px44y20, Px45y19 } CellNode (45 @ 20) (150)Px60y57 { Px60y58, Px61y57, Px60y56 } CellNode (60 @ 57) (150)Px49y37 { Px48y37, Px49y36, Px49y38 } CellNode (49 @ 37) (150)Px47y19 { Px47y20, Px46y19, Px48y19 } CellNode (47 @ 19) (150)Px32y27 { Px33y27, Px31y27, Px32y26, Px32y28 } CellNode (32 @ 27) (150)Px34y45 { Px35y45, Px33y45, Px34y46, Px34y44 } CellNode (34 @ 45) (150)Px44y52 { Px45y52, Px44y51 } CellNode (44 @ 52) (150)Px50y39 { Px50y40, Px51y39, Px49y39, Px50y38 } CellNode (50 @ 39) (150)Px70y64 { Px70y65, Px71y64, Px69y64, Px70y63 } CellNode (70 @ 64) (150)Px31y59 { Px31y58, Px32y59 } CellNode (31 @ 59) (150)Px16y22 { Px17y22, Px16y23 } CellNode (16 @ 22) (150)Px52y41 { Px51y41, Px52y42 } CellNode (52 @ 41) (150)Px28y28 { Px29y28, Px28y27 } CellNode (28 @ 28) (150)Px48y58 { Px49y58, Px47y58, Px48y57 } CellNode (48 @ 58) (150)Px44y41 { Px44y40, Px43y41, Px45y41 } CellNode (44 @ 41) (150)Px66y65 { Px65y65, Px66y64, Px67y65 } CellNode (66 @ 65) (150)Px38y35 { Px38y34, Px37y35, Px38y36 } CellNode (38 @ 35) (150)Px41y50 { Px41y49, Px41y51, Px42y50, Px40y50 } CellNode (41 @ 50) (150)Px28y12 { Px28y13, Px27y12, Px28y11 } CellNode (28 @ 12) (150)Px56y47 { Px57y47, Px56y46, Px55y47 } CellNode (56 @ 47) (150)Px52y30 { Px51y30, Px52y29, Px52y31, Px53y30 } CellNode (52 @ 30) (150)Px33y50 { Px33y51, Px34y50, Px32y50, Px33y49 } CellNode (33 @ 50) (150)Px43y49 { Px43y50, Px42y49, Px43y48 } CellNode (43 @ 49) (150)Px29y9 { Px30y9, Px29y10 } CellNode (29 @ 9) (150)Px12y52 { Px13y52, Px12y51, Px12y53 } CellNode (12 @ 52) (150)Px45y56 { Px45y55, Px45y57, Px46y56 } CellNode (45 @ 56) (150)Px32y58 { Px33y58, Px31y58, Px32y59, Px32y57 } CellNode (32 @ 58) (150)Px29y51 { Px29y50, Px30y51 } CellNode (29 @ 51) (150)Px46y13 { Px46y12, Px46y14, Px47y13 } CellNode (46 @ 13) (150)Px33y15 { Px32y15, Px33y14 } CellNode (33 @ 15) (150)Px27y33 { Px27y34, Px28y33, Px26y33, Px27y32 } CellNode (27 @ 33) (150)Px53y45 { Px53y44, Px52y45, Px54y45 } CellNode (53 @ 45) (150)Px40y47 { Px39y47, Px41y47, Px40y46 } CellNode (40 @ 47) (150)Px49y57 { Px49y56, Px50y57, Px48y57, Px49y58 } CellNode (49 @ 57) (150)Px51y27 { Px51y28, Px52y27 } CellNode (51 @ 27) (150)Px25y15 { Px25y16, Px26y15 } CellNode (25 @ 15) (150)Px32y47 { Px33y47, Px32y48, Px32y46, Px31y47 } CellNode (32 @ 47) (150)Px37y40 { Px37y41, Px36y40 } CellNode (37 @ 40) (150)Px45y40 { Px45y39, Px46y40, Px45y41, Px44y40 } CellNode (45 @ 40) (150)Px5y57 { Px6y57, Px4y57, Px5y56 } CellNode (5 @ 57) (150)Px39y39 { Px38y39, Px39y38, Px40y39 } CellNode (39 @ 39) (150)Px57y46 { Px56y46, Px57y47 } CellNode (57 @ 46) (150)Px29y16 { Px29y15, Px29y17 } CellNode (29 @ 16) (150)Px14y24 { Px14y23, Px13y24, Px14y25, Px15y24 } CellNode (14 @ 24) (150)Px33y9 { Px34y9, Px33y10 } CellNode (33 @ 9) (150)Px34y54 { Px34y55, Px35y54, Px34y53 } CellNode (34 @ 54) (150)Px30y13 { Px31y13, Px30y14, Px29y13 } CellNode (30 @ 13) (150)Px24y31 { Px24y30, Px24y32, Px25y31 } CellNode (24 @ 31) (150)Px13y56 { Px13y55, Px13y57, Px12y56 } CellNode (13 @ 56) (150)Px59y53 { Px59y52, Px59y54, Px60y53, Px58y53 } CellNode (59 @ 53) (150)Px46y55 { Px45y55, Px46y56, Px46y54, Px47y55 } CellNode (46 @ 55) (150)Px44y37 { Px44y38, Px45y37 } CellNode (44 @ 37) (150)Px38y55 { Px38y54, Px39y55, Px38y56, Px37y55 } CellNode (38 @ 55) (150)Px42y19 { Px43y19, Px42y20 } CellNode (42 @ 19) (150)Px21y45 { Px21y44, Px22y45 } CellNode (21 @ 45) (150)Px23y39 { Px23y40, Px24y39, Px22y39, Px23y38 } CellNode (23 @ 39) (150)Px47y12 { Px47y11, Px46y12, Px47y13 } CellNode (47 @ 12) (150)Px54y44 { Px53y44, Px54y45 } CellNode (54 @ 44) (150)Px28y32 { Px27y32, Px28y33, Px29y32 } CellNode (28 @ 32) (150)Px50y32 { Px50y31, Px50y33, Px51y32 } CellNode (50 @ 32) (150)Px52y26 { Px53y26, Px52y25, Px52y27 } CellNode (52 @ 26) (150)Px31y52 { Px31y53, Px31y51, Px30y52 } CellNode (31 @ 52) (150)Px26y14 { Px27y14, Px26y15, Px26y13 } CellNode (26 @ 14) (150)Px32y6 { Px32y7, Px33y6 } CellNode (32 @ 6) (150)Px31y28 { Px31y27, Px32y28 } CellNode (31 @ 28) (150)Px23y28 { Px22y28, Px23y29 } CellNode (23 @ 28) (150)Px28y21 { Px29y21, Px28y20 } CellNode (28 @ 21) (150)Px15y23 { Px14y23, Px16y23, Px15y24 } CellNode (15 @ 23) (150)Px15y28 { Px15y29, Px16y28, Px15y27, Px14y28 } CellNode (15 @ 28) (150)Px35y53 { Px34y53, Px35y54 } CellNode (35 @ 53) (150)Px44y10 { Px44y11, Px45y10, Px44y9 } CellNode (44 @ 10) (150)Px14y55 { Px14y54, Px13y55 } CellNode (14 @ 55) (150)Px3y59 { Px3y60, Px3y58, Px2y59 } CellNode (3 @ 59) (150)Px25y35 { Px24y35, Px26y35, Px25y36 } CellNode (25 @ 35) (150)Px51y47 { Px50y47, Px51y46, Px51y48 } CellNode (51 @ 47) (150)Px56y40 { Px55y40 } CellNode (56 @ 40) (150)Px35y42 { Px34y42, Px35y43, Px36y42 } CellNode (35 @ 42) (150)Px20y50 { Px19y50, Px20y49, Px20y51, Px21y50 } CellNode (20 @ 50) (150)Px37y36 { Px37y37, Px36y36, Px38y36, Px37y35 } CellNode (37 @ 36) (150)Px22y44 { Px23y44, Px21y44, Px22y45, Px22y43 } CellNode (22 @ 44) (150)Px48y16 { Px47y16, Px48y15, Px48y17 } CellNode (48 @ 16) (150)Px34y5 { Px34y6, Px33y5, Px34y4, Px35y5 } CellNode (34 @ 5) (150)Px40y56 { Px39y56, Px40y55 } CellNode (40 @ 56) (150)Px51y31 { Px51y30, Px52y31, Px51y32, Px50y31 } CellNode (51 @ 31) (150)Px27y18 { Px26y18, Px27y19, Px28y18 } CellNode (27 @ 18) (150)Px32y51 { Px31y51, Px32y50, Px33y51 } CellNode (32 @ 51) (150)Px3y48 { Px4y48, Px3y47, Px2y48, Px3y49 } CellNode (3 @ 48) (150)Px30y33 { Px29y33, Px30y32 } CellNode (30 @ 33) (150)Px42y5 { Px42y4, Px41y5, Px42y6, Px43y5 } CellNode (42 @ 5) (150)Px45y7 { Px45y8, Px44y7 } CellNode (45 @ 7) (150)Px29y20 { Px29y21, Px28y20 } CellNode (29 @ 20) (150)Px40y40 { Px41y40, Px40y39 } CellNode (40 @ 40) (150)Px49y50 { Px50y50, Px49y49 } CellNode (49 @ 50) (150)Px51y20 { Px51y21, Px50y20 } CellNode (51 @ 20) (150)Px59y49 { Px58y49, Px59y48, Px59y50 } CellNode (59 @ 49) (150)Px42y39 { Px42y40, Px41y39, Px43y39 } CellNode (42 @ 39) (150)Px16y27 { Px15y27, Px16y28, Px17y27 } CellNode (16 @ 27) (150)Px34y39 { Px35y39, Px34y38, Px33y39, Px34y40 } CellNode (34 @ 39) (150)Px30y22 { Px30y23, Px29y22 } CellNode (30 @ 22) (150)Px26y34 { Px27y34, Px26y33, Px26y35 } CellNode (26 @ 34) (150)Px52y46 { Px52y45, Px51y46 } CellNode (52 @ 46) (150)Px9y56 { Px9y55, Px9y57, Px10y56 } CellNode (9 @ 56) (150)Px50y52 { Px51y52, Px50y51 } CellNode (50 @ 52) (150)Px31y48 { Px31y49, Px31y47, Px32y48 } CellNode (31 @ 48) (150)Px36y41 { Px36y40, Px36y42, Px37y41 } CellNode (36 @ 41) (150)Px36y4 { Px36y3, Px35y4, Px36y5, Px37y4 } CellNode (36 @ 4) (150)Px23y48 { Px23y47, Px22y48 } CellNode (23 @ 48) (150)Px41y7 { Px41y6 } CellNode (41 @ 7) (150)Px4y47 { Px4y48, Px4y46, Px3y47 } CellNode (4 @ 47) (150)Px41y55 { Px41y54, Px40y55 } CellNode (41 @ 55) (150)Px26y23 { Px26y24, Px27y23, Px25y23, Px26y22 } CellNode (26 @ 23) (150)Px28y17 { Px28y18, Px29y17 } CellNode (28 @ 17) (150)Px13y25 { Px14y25, Px13y26, Px13y24 } CellNode (13 @ 25) (150)Px52y35 { Px52y34, Px52y36 } CellNode (52 @ 35) (150)Px12y57 { Px11y57, Px13y57, Px12y58, Px12y56 } CellNode (12 @ 57) (150)Px23y32 { Px23y33, Px22y32, Px24y32 } CellNode (23 @ 32) (150)Px58y54 { Px59y54, Px58y53 } CellNode (58 @ 54) (150)Px34y12 { Px34y11, Px33y12, Px34y13, Px35y12 } CellNode (34 @ 12) (150)Px19y49 { Px20y49, Px19y50, Px18y49 } CellNode (19 @ 49) (150)Px37y56 { Px36y56, Px37y55, Px38y56 } CellNode (37 @ 56) (150)Px48y36 { Px47y36, Px49y36, Px48y37 } CellNode (48 @ 36) (150)Px35y38 { Px36y38, Px34y38, Px35y39, Px35y37 } CellNode (35 @ 38) (150)Px33y44 { Px33y43, Px33y45, Px34y44, Px32y44 } CellNode (33 @ 44) (150)Px51y51 { Px50y51, Px51y52, Px51y50 } CellNode (51 @ 51) (150)Px46y18 { Px46y19, Px45y18 } CellNode (46 @ 18) (150)Px23y21 { Px24y21, Px23y20 } CellNode (23 @ 21) (150)Px38y3 { Px37y3, Px38y4, Px39y3 } CellNode (38 @ 3) (150)Px43y51 { Px42y51, Px44y51, Px43y50 } CellNode (43 @ 51) (150)Px30y53 { Px29y53, Px30y52, Px31y53, Px30y54 } CellNode (30 @ 53) (150)Px40y4 { Px41y4, Px39y4, Px40y3 } CellNode (40 @ 4) (150)Px29y56 { Px29y55, Px30y56 } CellNode (29 @ 56) (150)Px37y45 { Px36y45, Px38y45, Px37y46 } CellNode (37 @ 45) (150)Px48y20 { Px47y20, Px49y20, Px48y19 } CellNode (48 @ 20) (150)Px31y10 { Px31y11, Px31y9, Px30y10, Px32y10 } CellNode (31 @ 10) (150)Px22y29 { Px22y30, Px23y29, Px21y29, Px22y28 } CellNode (22 @ 29) (150)Px51y40 { Px51y41, Px50y40, Px51y39 } CellNode (51 @ 40) (150)Px47y52 { Px46y52, Px47y53 } CellNode (47 @ 52) (150)Px19y22 { Px19y23, Px20y22, Px19y21, Px18y22 } CellNode (19 @ 22) (150)Px39y52 { Px39y53, Px40y52 } CellNode (39 @ 52) (150)Px65y64 { Px66y64, Px64y64, Px65y63, Px65y65 } CellNode (65 @ 64) (150)Px30y18 { Px29y18 } CellNode (30 @ 18) (150)Px24y36 { Px25y36, Px23y36, Px24y35, Px24y37 } CellNode (24 @ 36) (150)Px50y48 { Px51y48, Px50y47, Px50y49, Px49y48 } CellNode (50 @ 48) (150)Px35y11 { Px35y12, Px34y11 } CellNode (35 @ 11) (150)Px42y48 { Px42y47, Px43y48, Px42y49 } CellNode (42 @ 48) (150)Px34y43 { Px33y43, Px34y42, Px35y43, Px34y44 } CellNode (34 @ 43) (150)Px60y55 { Px60y54, Px61y55, Px59y55, Px60y56 } CellNode (60 @ 55) (150)Px69y65 { Px70y65, Px68y65, Px69y64 } CellNode (69 @ 65) (150)Px47y17 { Px48y17, Px47y16 } CellNode (47 @ 17) (150)Px32y25 { Px32y24, Px31y25, Px32y26 } CellNode (32 @ 25) (150)Px52y55 { Px52y54, Px52y56, Px51y55 } CellNode (52 @ 55) (150)Px2y49 { Px2y48, Px3y49 } CellNode (2 @ 49) (150)Px44y50 { Px43y50, Px45y50, Px44y51 } CellNode (44 @ 50) (150)Px28y37 { Px27y37, Px28y36 } CellNode (28 @ 37) (150)Px31y57 { Px31y58, Px32y57, Px31y56, Px30y57 } CellNode (31 @ 57) (150)Px62y62 { Px62y61, Px61y62, Px63y62 } CellNode (62 @ 62) (150)Px4y56 { Px3y56, Px4y57, Px5y56 } CellNode (4 @ 56) (150)Px32y14 { Px32y15, Px33y14, Px32y13, Px31y14 } CellNode (32 @ 14) (150)Px28y26 { Px29y26, Px28y27 } CellNode (28 @ 26) (150)Px50y21 { Px50y20, Px51y21, Px50y22 } CellNode (50 @ 21) (150)Px48y56 { Px47y56, Px48y57, Px49y56 } CellNode (48 @ 56) (150)Px54y38 { Px54y39, Px53y38 } CellNode (54 @ 38) (150)Px46y38 { Px46y39, Px46y37, Px45y38 } CellNode (46 @ 38) (150)Px38y33 { Px38y34, Px37y33 } CellNode (38 @ 33) (150)Px21y23 { Px21y24, Px22y23, Px21y22, Px20y23 } CellNode (21 @ 23) (150)Px28y10 { Px28y11, Px29y10 } CellNode (28 @ 10) (150)Px56y45 { Px56y46, Px55y45 } CellNode (56 @ 45) (150)Px43y47 { Px42y47, Px43y48 } CellNode (43 @ 47) (150)Px61y59 { Px62y59, Px60y59, Px61y58, Px61y60 } CellNode (61 @ 59) (150)Px31y8 { Px30y8, Px31y9, Px31y7, Px32y8 } CellNode (31 @ 8) (150)Px22y49 { Px22y50, Px21y49, Px22y48 } CellNode (22 @ 49) (150)Px14y49 { Px14y50, Px15y49 } CellNode (14 @ 49) (150)Px25y24 { Px26y24, Px25y23 } CellNode (25 @ 24) (150)Px45y54 { Px46y54, Px45y55 } CellNode (45 @ 54) (150)Px32y56 { Px31y56, Px33y56, Px32y57 } CellNode (32 @ 56) (150)Px63y61 { Px64y61, Px62y61, Px63y62, Px63y60 } CellNode (63 @ 61) (150)Px11y58 { Px11y57, Px12y58, Px10y58 } CellNode (11 @ 58) (150)Px46y11 { Px46y12, Px47y11, Px46y10, Px45y11 } CellNode (46 @ 11) (150)Px33y13 { Px33y12, Px33y14, Px32y13, Px34y13 } CellNode (33 @ 13) (150)Px27y31 { Px26y31, Px27y32 } CellNode (27 @ 31) (150)Px53y43 { Px52y43, Px53y42, Px53y44 } CellNode (53 @ 43) (150)Px40y45 { Px39y45, Px40y46 } CellNode (40 @ 45) (150)Px5y55 { Px6y55, Px5y56 } CellNode (5 @ 55) (150)Px51y25 { Px52y25, Px51y24 } CellNode (51 @ 25) (150)Px47y37 { Px46y37, Px47y36, Px48y37 } CellNode (47 @ 37) (150)Px32y45 { Px33y45, Px32y44, Px32y46 } CellNode (32 @ 45) (150)Px43y20 { Px42y20, Px44y20, Px43y19 } CellNode (43 @ 20) (150)Px45y19 { Px45y20, Px46y19, Px45y18, Px44y19 } CellNode (45 @ 19) (150)Px39y37 { Px38y37, Px39y36, Px39y38 } CellNode (39 @ 37) (150)Px50y57 { Px50y56, Px51y57, Px49y57 } CellNode (50 @ 57) (150)Px24y40 { Px24y39, Px23y40 } CellNode (24 @ 40) (150)Px42y52 { Px42y53, Px41y52, Px42y51 } CellNode (42 @ 52) (150)Px29y14 { Px29y15, Px30y14, Px29y13, Px28y14 } CellNode (29 @ 14) (150)Px33y7 { Px32y7, Px33y6, Px34y7 } CellNode (33 @ 7) (150)Px34y52 { Px34y53, Px33y52, Px34y51 } CellNode (34 @ 52) (150)Px36y46 { Px36y45, Px35y46, Px37y46 } CellNode (36 @ 46) (150)Px62y58 { Px61y58, Px62y59, Px62y57 } CellNode (62 @ 58) (150)Px30y11 { Px30y10, Px31y11, Px29y11 } CellNode (30 @ 11) (150)Px13y54 { Px14y54, Px12y54, Px13y53, Px13y55 } CellNode (13 @ 54) (150)Px44y9 { Px44y10, Px44y8, Px45y9 } CellNode (44 @ 9) (150)Px59y51 { Px60y51, Px58y51, Px59y50, Px59y52 } CellNode (59 @ 51) (150)Px46y53 { Px46y52, Px47y53, Px46y54 } CellNode (46 @ 53) (150)Px50y41 { Px51y41, Px50y40 } CellNode (50 @ 41) (150)Px18y23 { Px17y23, Px19y23, Px18y22 } CellNode (18 @ 23) (150)Px42y41 { Px42y40, Px43y41 } CellNode (42 @ 41) (150)Px38y53 { Px38y54, Px39y53 } CellNode (38 @ 53) (150)Px36y35 { Px36y34, Px36y36, Px37y35, Px35y35 } CellNode (36 @ 35) (150)Px23y37 { Px23y38, Px23y36, Px24y37 } CellNode (23 @ 37) (150)Px21y43 { Px21y42, Px21y44, Px22y43 } CellNode (21 @ 43) (150)Px54y42 { Px53y42, Px54y41 } CellNode (54 @ 42) (150)Px41y49 { Px41y50, Px40y49, Px42y49 } CellNode (41 @ 49) (150)Px31y50 { Px31y49, Px31y51, Px32y50, Px30y50 } CellNode (31 @ 50) (150)Px52y24 { Px53y24, Px51y24, Px52y25, Px52y23 } CellNode (52 @ 24) (150)Px33y49 { Px33y50, Px32y49, Px33y48 } CellNode (33 @ 49) (150)Px31y26 { Px31y27, Px30y26, Px32y26, Px31y25 } CellNode (31 @ 26) (150)Px35y6 { Px34y6, Px35y5 } CellNode (35 @ 6) (150)Px51y56 { Px51y57, Px50y56, Px52y56, Px51y55 } CellNode (51 @ 56) (150)Px58y48 { Px59y48, Px57y48, Px58y47, Px58y49 } CellNode (58 @ 48) (150)Px43y6 { Px43y5, Px42y6, Px43y7, Px44y6 } CellNode (43 @ 6) (150)Px3y57 { Px3y58, Px4y57, Px3y56, Px2y57 } CellNode (3 @ 57) (150)Px31y15 { Px30y15, Px32y15, Px31y14 } CellNode (31 @ 15) (150)Px14y53 { Px13y53, Px14y54 } CellNode (14 @ 53) (150)Px51y45 { Px52y45, Px51y46 } CellNode (51 @ 45) (150)Px53y39 { Px54y39, Px53y38, Px53y40 } CellNode (53 @ 39) (150)Px47y57 { Px47y56, Px46y57, Px47y58, Px48y57 } CellNode (47 @ 57) (150)Px43y40 { Px43y39, Px43y41, Px42y40, Px44y40 } CellNode (43 @ 40) (150)Px19y27 { Px18y27, Px19y28, Px20y27 } CellNode (19 @ 27) (150)Px45y39 { Px45y40, Px46y39, Px45y38, Px44y39 } CellNode (45 @ 39) (150)Px35y40 { Px35y39, Px34y40, Px36y40 } CellNode (35 @ 40) (150)Px37y34 { Px37y35, Px37y33, Px38y34, Px36y34 } CellNode (37 @ 34) (150)Px22y42 { Px21y42, Px22y43, Px22y41 } CellNode (22 @ 42) (150)Px48y14 { Px48y15, Px47y14 } CellNode (48 @ 14) (150)Px29y34 { Px29y33, Px28y34 } CellNode (29 @ 34) (150)Px40y54 { Px40y55, Px39y54, Px41y54, Px40y53 } CellNode (40 @ 54) (150)Px3y46 { Px3y47, Px4y46, Px2y46, Px3y45 } CellNode (3 @ 46) (150)Px27y16 { Px27y15, Px26y16 } CellNode (27 @ 16) (150)Px53y28 { Px53y27, Px53y29, Px52y28 } CellNode (53 @ 28) (150)Px55y46 { Px56y46, Px55y47, Px55y45, Px54y46 } CellNode (55 @ 46) (150)Px22y31 { Px22y30, Px22y32 } CellNode (22 @ 31) (150)Px36y55 { Px36y54, Px35y55, Px36y56, Px37y55 } CellNode (36 @ 55) (150)Px34y37 { Px34y38, Px35y37, Px33y37, Px34y36 } CellNode (34 @ 37) (150)Px45y12 { Px46y12, Px45y11 } CellNode (45 @ 12) (150)Px26y32 { Px26y31, Px26y33, Px27y32, Px25y32 } CellNode (26 @ 32) (150)Px52y44 { Px52y43, Px52y45, Px53y44 } CellNode (52 @ 44) (150)Px50y50 { Px51y50, Px49y50, Px50y49, Px50y51 } CellNode (50 @ 50) (150)Px39y4 { Px38y4, Px39y3, Px40y4 } CellNode (39 @ 4) (150)Px41y5 { Px41y4, Px42y5, Px41y6 } CellNode (41 @ 5) (150)Px38y38 { Px38y37, Px38y39, Px39y38 } CellNode (38 @ 38) (150)Px41y53 { Px42y53, Px40y53, Px41y54, Px41y52 } CellNode (41 @ 53) (150)Px21y28 { Px21y27, Px20y28, Px21y29, Px22y28 } CellNode (21 @ 28) (150)Px28y15 { Px29y15, Px27y15, Px28y14 } CellNode (28 @ 15) (150)Px23y46 { Px23y47, Px23y45, Px22y46 } CellNode (23 @ 46) (150)Px33y53 { Px34y53, Px33y52 } CellNode (33 @ 53) (150)Px12y55 { Px13y55, Px12y54, Px12y56 } CellNode (12 @ 55) (150)Px23y30 { Px23y29, Px22y30, Px24y30 } CellNode (23 @ 30) (150)Px58y52 { Px58y51, Px58y53, Px59y52 } CellNode (58 @ 52) (150)Px34y10 { Px34y11, Px33y10, Px34y9 } CellNode (34 @ 10) (150)Px17y29 { Px17y28, Px16y29 } CellNode (17 @ 29) (150)Px37y54 { Px36y54, Px37y55, Px38y54 } CellNode (37 @ 54) (150)Px3y61 { Px2y61, Px3y60 } CellNode (3 @ 61) (150)Px35y36 { Px36y36, Px34y36, Px35y37, Px35y35 } CellNode (35 @ 36) (150)Px29y54 { Px30y54, Px29y55, Px29y53 } CellNode (29 @ 54) (150)Px46y16 { Px47y16, Px45y16, Px46y15 } CellNode (46 @ 16) (150)Px27y36 { Px27y37, Px28y36, Px26y36, Px27y35 } CellNode (27 @ 36) (150)Px30y51 { Px31y51, Px29y51, Px30y52, Px30y50 } CellNode (30 @ 51) (150)Px25y18 { Px25y17, Px26y18 } CellNode (25 @ 18) (150)Px22y51 { Px21y51, Px22y50 } CellNode (22 @ 51) (150)Px22y27 { Px21y27, Px22y28 } CellNode (22 @ 27) (150)Px27y20 { Px28y20, Px27y19 } CellNode (27 @ 20) (150)Px40y39 { Px40y40, Px41y39, Px39y39, Px40y38 } CellNode (40 @ 39) (150)Px49y49 { Px49y48, Px50y49, Px49y50 } CellNode (49 @ 49) (150)Px34y57 { Px34y56, Px33y57 } CellNode (34 @ 57) (150)Px65y62 { Px64y62, Px65y63 } CellNode (65 @ 62) (150)Px2y58 { Px2y57, Px3y58, Px2y59 } CellNode (2 @ 58) (150)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange160Points20">genRange160Points20messages none  defined. P1 { P4, P8, P9, P12, P14 } NodeP2 { P3, P17, P18 } NodeP3 { P2, P17, P18 } NodeP4 { P1, P9, P11 } NodeP5 { P7, P11 } NodeP6 { P7, P20 } NodeP7 { P5, P6, P9, P11, P20 } NodeP8 { P1, P10, P12, P14 } NodeP9 { P1, P4, P7, P11, P17 } NodeP10 { P8, P12, P14 } NodeP11 { P4, P5, P7, P9 } NodeP12 { P1, P8, P10, P14, P15 } NodeP13 { P15 } NodeP14 { P1, P8, P10, P12, P15 } NodeP15 { P12, P13, P14 } NodeP17 { P2, P3, P9,  P18 } NodeP18 { P2, P3, P17 } NodeP20 { P6, P7 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cellNetwork7">cellNetwork7messages none  defined. Px9y59 { Px9y60, Px9y58, Px8y59, Px10y59 } CellNode (9 @ 59) (20)Px28y57 { Px29y57, Px27y57, Px28y58, Px28y56 } CellNode (28 @ 57) (20)Px65y45 { Px66y45, Px65y44, Px64y45, Px65y46 } CellNode (65 @ 45) (20)Px16y58 { Px16y57, Px17y58, Px16y59 } CellNode (16 @ 58) (20)Px79y56 { Px79y55, Px80y56, Px79y57, Px78y56 } CellNode (79 @ 56) (20)Px53y46 { Px53y47, Px54y46, Px52y46, Px53y45 } CellNode (53 @ 46) (20)Px67y57 { Px67y58, Px66y57, Px68y57, Px67y56 } CellNode (67 @ 57) (20)Px41y47 { Px41y46, Px40y47, Px42y47, Px41y48 } CellNode (41 @ 47) (20)Px46y50 { Px46y49, Px46y51, Px45y50, Px47y50 } CellNode (46 @ 50) (20)Px49y82 { Px50y82, Px48y82, Px49y81, Px49y83 } CellNode (49 @ 82) (20)Px37y83 { Px37y84, Px38y83, Px37y82, Px36y83 } CellNode (37 @ 83) (20)Px3y54 { Px3y53, Px4y54, Px3y55, Px2y54 } CellNode (3 @ 54) (20)Px25y84 { Px24y84, Px25y83, Px26y84 } CellNode (25 @ 84) (20)Px88y82 { Px89y82, Px87y82, Px88y81, Px88y83 } CellNode (88 @ 82) (20)Px76y83 { Px76y84, Px77y83, Px75y83, Px76y82 } CellNode (76 @ 83) (20)Px59y37 { Px58y37, Px59y38, Px60y37, Px59y36 } CellNode (59 @ 37) (20)Px38y30 { Px38y31, Px37y30, Px38y29, Px39y30 } CellNode (38 @ 30) (20)Px64y84 { Px65y84, Px64y83 } CellNode (64 @ 84) (20)Px47y38 { Px47y39, Px46y38, Px47y37, Px48y38 } CellNode (47 @ 38) (20)Px33y27 { Px33y28, Px34y27, Px32y27, Px33y26 } CellNode (33 @ 27) (20)Px21y28 { Px21y27, Px20y28, Px21y29, Px22y28 } CellNode (21 @ 28) (20)Px26y31 { Px26y32, Px25y31, Px27y31, Px26y30 } CellNode (26 @ 31) (20)Px35y39 { Px36y39, Px34y39, Px35y38, Px35y40 } CellNode (35 @ 39) (20)Px72y27 { Px72y28, Px73y27, Px72y26, Px71y27 } CellNode (72 @ 27) (20)Px60y28 { Px60y27, Px60y29, Px59y28, Px61y28 } CellNode (60 @ 28) (20)Px65y31 { Px65y32, Px64y31, Px66y31, Px65y30 } CellNode (65 @ 31) (20)Px74y39 { Px75y39, Px73y39, Px74y38, Px74y40 } CellNode (74 @ 39) (20)Px19y76 { Px19y77, Px18y76, Px20y76, Px19y75 } CellNode (19 @ 76) (20)Px53y32 { Px54y32, Px53y31, Px53y33, Px52y32 } CellNode (53 @ 32) (20)Px56y64 { Px56y65, Px56y63, Px55y64 } CellNode (56 @ 64) (20)Px39y18 { Px39y19, Px40y18, Px39y17, Px38y18 } CellNode (39 @ 18) (20)Px44y65 { Px44y64, Px44y66, Px45y65, Px43y65 } CellNode (44 @ 65) (20)Px27y19 { Px26y19, Px27y18, Px27y20, Px28y19 } CellNode (27 @ 19) (20)Px32y66 { Px33y66, Px32y65, Px31y66, Px32y67 } CellNode (32 @ 66) (20)Px46y77 { Px46y76, Px46y78, Px45y77, Px47y77 } CellNode (46 @ 77) (20)Px20y67 { Px21y67, Px20y68, Px19y67, Px20y66 } CellNode (20 @ 67) (20)Px83y65 { Px83y66, Px82y65, Px83y64 } CellNode (83 @ 65) (20)Px6y72 { Px6y73, Px7y72, Px5y72, Px6y71 } CellNode (6 @ 72) (20)Px25y70 { Px26y70, Px24y70, Px25y71 } CellNode (25 @ 70) (20)Px71y66 { Px71y67, Px71y65, Px70y66, Px72y66 } CellNode (71 @ 66) (20)Px45y12 { Px45y13, Px46y12, Px45y11, Px44y12 } CellNode (45 @ 12) (20)Px57y11 { Px57y10, Px58y11 } CellNode (57 @ 11) (20)Px85y77 { Px85y76, Px86y77, Px85y78, Px84y77 } CellNode (85 @ 77) (20)Px64y70 { Px65y70, Px64y71, Px63y70, Px64y69 } CellNode (64 @ 70) (20)Px33y13 { Px33y12, Px33y14, Px32y13, Px34y13 } CellNode (33 @ 13) (20)Px97y76 { Px96y76, Px97y75, Px97y77 } CellNode (97 @ 76) (20)Px66y19 { Px65y19, Px66y18, Px66y20, Px67y19 } CellNode (66 @ 19) (20)Px8y84 { Px7y84, Px9y84, Px8y83 } CellNode (8 @ 84) (20)Px38y57 { Px39y57, Px38y58, Px37y57, Px38y56 } CellNode (38 @ 57) (20)Px26y58 { Px27y58, Px25y58, Px26y59, Px26y57 } CellNode (26 @ 58) (20)Px63y46 { Px63y47, Px64y46, Px63y45, Px62y46 } CellNode (63 @ 46) (20)Px50y5 { Px51y5, Px49y5, Px50y4 } CellNode (50 @ 5) (20)Px77y57 { Px78y57, Px77y58, Px76y57, Px77y56 } CellNode (77 @ 57) (20)Px51y47 { Px52y47, Px50y47, Px51y46, Px51y48 } CellNode (51 @ 47) (20)Px56y50 { Px56y49, Px57y50, Px56y51, Px55y50 } CellNode (56 @ 50) (20)Px30y40 { Px30y39, Px30y41, Px31y40, Px29y40 } CellNode (30 @ 40) (20)Px65y58 { Px65y59, Px64y58, Px66y58, Px65y57 } CellNode (65 @ 58) (20)Px44y51 { Px43y51, Px45y51, Px44y50, Px44y52 } CellNode (44 @ 51) (20)Px53y59 { Px52y59, Px53y58, Px53y60, Px54y59 } CellNode (53 @ 59) (20)Px32y52 { Px33y52, Px31y52, Px32y53, Px32y51 } CellNode (32 @ 52) (20)Px35y84 { Px34y84, Px36y84, Px35y83 } CellNode (35 @ 84) (20)Px1y55 { Px1y56, Px2y55, Px1y54 } CellNode (1 @ 55) (20)Px71y52 { Px71y53, Px70y52, Px72y52, Px71y51 } CellNode (71 @ 52) (20)Px74y84 { Px73y84, Px74y83, Px75y84 } CellNode (74 @ 84) (20)Px3y67 { Px3y68, Px2y67, Px4y67, Px3y66 } CellNode (3 @ 67) (20)Px57y38 { Px58y38, Px57y37, Px56y38, Px57y39 } CellNode (57 @ 38) (20)Px48y30 { Px49y30, Px47y30, Px48y29, Px48y31 } CellNode (48 @ 30) (20)Px36y31 { Px36y32, Px37y31, Px35y31, Px36y30 } CellNode (36 @ 31) (20)Px45y39 { Px45y40, Px46y39, Px45y38, Px44y39 } CellNode (45 @ 39) (20)Px24y32 { Px23y32, Px24y31, Px24y33, Px25y32 } CellNode (24 @ 32) (20)Px38y43 { Px39y43, Px37y43, Px38y44, Px38y42 } CellNode (38 @ 43) (20)Px70y28 { Px70y27, Px69y28, Px70y29, Px71y28 } CellNode (70 @ 28) (20)Px75y31 { Px75y32, Px74y31, Px75y30 } CellNode (75 @ 31) (20)Px45y5 { Px45y4, Px46y5, Px44y5, Px45y6 } CellNode (45 @ 5) (20)Px63y32 { Px63y31, Px62y32, Px63y33, Px64y32 } CellNode (63 @ 32) (20)Px29y76 { Px29y77, Px30y76, Px29y75, Px28y76 } CellNode (29 @ 76) (20)Px17y77 { Px17y76, Px16y77, Px17y78, Px18y77 } CellNode (17 @ 77) (20)Px51y33 { Px52y33, Px50y33, Px51y34, Px51y32 } CellNode (51 @ 33) (20)Px42y2 { Px43y2, Px42y1, Px41y2, Px42y3 } CellNode (42 @ 2) (20)Px68y76 { Px68y77, Px69y76, Px67y76, Px68y75 } CellNode (68 @ 76) (20)Px37y19 { Px38y19, Px37y18, Px36y19, Px37y20 } CellNode (37 @ 19) (20)Px42y66 { Px43y66, Px42y65, Px41y66, Px42y67 } CellNode (42 @ 66) (20)Px56y77 { Px56y76, Px55y77, Px57y77, Px56y78 } CellNode (56 @ 77) (20)Px30y67 { Px30y68, Px31y67, Px29y67, Px30y66 } CellNode (30 @ 67) (20)Px35y70 { Px35y71, Px36y70, Px34y70, Px35y69 } CellNode (35 @ 70) (20)Px44y78 { Px45y78, Px43y78, Px44y79, Px44y77 } CellNode (44 @ 78) (20)Px18y24 { Px19y24, Px17y24, Px18y25, Px18y23 } CellNode (18 @ 24) (20)Px81y66 { Px82y66, Px81y65, Px80y66, Px81y67 } CellNode (81 @ 66) (20)Px23y71 { Px24y71, Px23y72, Px22y71, Px23y70 } CellNode (23 @ 71) (20)Px32y79 { Px32y80, Px33y79, Px31y79, Px32y78 } CellNode (32 @ 79) (20)Px95y77 { Px94y77, Px95y76, Px96y77, Px95y78 } CellNode (95 @ 77) (20)Px69y23 { Px68y23, Px70y23, Px69y22, Px69y24 } CellNode (69 @ 23) (20)Px11y72 { Px10y72, Px12y72, Px11y71, Px11y73 } CellNode (11 @ 72) (20)Px83y78 { Px83y79, Px82y78, Px84y78, Px83y77 } CellNode (83 @ 78) (20)Px57y24 { Px57y25, Px57y23, Px58y24 } CellNode (57 @ 24) (20)Px74y70 { Px75y70, Px74y71, Px73y70, Px74y69 } CellNode (74 @ 70) (20)Px31y14 { Px32y14, Px31y15, Px30y14 } CellNode (31 @ 14) (20)Px71y79 { Px71y80, Px72y79, Px70y79, Px71y78 } CellNode (71 @ 79) (20)Px48y57 { Px48y58, Px49y57, Px48y56, Px47y57 } CellNode (48 @ 57) (20)Px45y25 { Px45y24, Px46y25, Px45y26 } CellNode (45 @ 25) (20)Px27y50 { Px27y49, Px27y51, Px28y50, Px26y50 } CellNode (27 @ 50) (20)Px50y72 { Px49y72, Px51y72, Px50y71, Px50y73 } CellNode (50 @ 72) (20)Px43y13 { Px43y12, Px42y13, Px43y14, Px44y13 } CellNode (43 @ 13) (20)Px55y12 { Px55y13, Px56y12, Px55y11, Px54y12 } CellNode (55 @ 12) (20)Px33y9 { Px34y9, Px33y10 } CellNode (33 @ 9) (20)Px36y58 { Px36y57, Px36y59, Px37y58, Px35y58 } CellNode (36 @ 58) (20)Px29y62 { Px29y61, Px29y63, Px28y62, Px30y62 } CellNode (29 @ 62) (20)Px24y59 { Px24y58, Px23y59, Px24y60, Px25y59 } CellNode (24 @ 59) (20)Px66y50 { Px66y49, Px66y51, Px67y50, Px65y50 } CellNode (66 @ 50) (20)Px17y63 { Px18y63, Px16y63, Px17y64, Px17y62 } CellNode (17 @ 63) (20)Px75y58 { Px74y58, Px75y59, Px76y58, Px75y57 } CellNode (75 @ 58) (20)Px54y51 { Px55y51, Px54y50, Px53y51, Px54y52 } CellNode (54 @ 51) (20)Px68y62 { Px68y61, Px69y62, Px67y62, Px68y63 } CellNode (68 @ 62) (20)Px63y59 { Px63y58, Px62y59, Px63y60, Px64y59 } CellNode (63 @ 59) (20)Px42y52 { Px43y52, Px42y53, Px41y52, Px42y51 } CellNode (42 @ 52) (20)Px30y53 { Px29y53, Px30y52, Px31y53, Px30y54 } CellNode (30 @ 53) (20)Px46y31 { Px46y30, Px46y32, Px47y31, Px45y31 } CellNode (46 @ 31) (20)Px1y68 { Px2y68, Px1y69 } CellNode (1 @ 68) (20)Px55y39 { Px55y40, Px56y39, Px54y39, Px55y38 } CellNode (55 @ 39) (20)Px34y32 { Px35y32, Px34y31, Px33y32, Px34y33 } CellNode (34 @ 32) (20)Px48y43 { Px49y43, Px47y43, Px48y44, Px48y42 } CellNode (48 @ 43) (20)Px22y33 { Px22y34, Px23y33, Px21y33, Px22y32 } CellNode (22 @ 33) (20)Px36y44 { Px35y44, Px37y44, Px36y43, Px36y45 } CellNode (36 @ 44) (20)Px73y32 { Px74y32, Px72y32, Px73y31, Px73y33 } CellNode (73 @ 32) (20)Px27y77 { Px26y77, Px27y76, Px27y78, Px28y77 } CellNode (27 @ 77) (20)Px61y33 { Px61y34, Px62y33, Px61y32, Px60y33 } CellNode (61 @ 33) (20)Px78y76 { Px78y77, Px79y76, Px78y75, Px77y76 } CellNode (78 @ 76) (20)Px7y59 { Px7y58, Px7y60, Px8y59, Px6y59 } CellNode (7 @ 59) (20)Px15y78 { Px15y79, Px16y78, Px14y78, Px15y77 } CellNode (15 @ 78) (20)Px66y77 { Px66y76, Px65y77, Px66y78, Px67y77 } CellNode (66 @ 77) (20)Px45y70 { Px45y71, Px46y70, Px44y70, Px45y69 } CellNode (45 @ 70) (20)Px28y24 { Px28y25, Px29y24, Px28y23, Px27y24 } CellNode (28 @ 24) (20)Px54y78 { Px54y79, Px55y78, Px54y77, Px53y78 } CellNode (54 @ 78) (20)Px33y71 { Px33y70, Px33y72, Px34y71, Px32y71 } CellNode (33 @ 71) (20)Px47y82 { Px47y83, Px46y82, Px48y82, Px47y81 } CellNode (47 @ 82) (20)Px16y25 { Px17y25, Px16y26 } CellNode (16 @ 25) (20)Px21y72 { Px22y72, Px20y72, Px21y71, Px21y73 } CellNode (21 @ 72) (20)Px84y70 { Px83y70, Px85y70, Px84y71 } CellNode (84 @ 70) (20)Px67y24 { Px68y24, Px67y25, Px66y24, Px67y23 } CellNode (67 @ 24) (20)Px53y13 { Px52y13, Px53y12, Px53y14, Px54y13 } CellNode (53 @ 13) (20)Px72y71 { Px72y70, Px72y72, Px73y71, Px71y71 } CellNode (72 @ 71) (20)Px41y14 { Px41y15, Px42y14, Px40y14, Px41y13 } CellNode (41 @ 14) (20)Px86y82 { Px86y83, Px85y82, Px87y82, Px86y81 } CellNode (86 @ 82) (20)Px55y25 { Px54y25, Px56y25, Px55y24 } CellNode (55 @ 25) (20)Px60y72 { Px59y72, Px60y73, Px61y72 } CellNode (60 @ 72) (20)Px81y79 { Px81y78, Px81y80, Px82y79, Px80y79 } CellNode (81 @ 79) (20)Px43y26 { Px42y26, Px43y27, Px43y25 } CellNode (43 @ 26) (20)Px93y78 { Px93y79, Px94y78, Px92y78, Px93y77 } CellNode (93 @ 78) (20)Px42y79 { Px42y78, Px42y80, Px43y79, Px41y79 } CellNode (42 @ 79) (20)Px31y27 { Px31y26, Px32y27, Px31y28, Px30y27 } CellNode (31 @ 27) (20)Px34y59 { Px35y59, Px33y59, Px34y58, Px34y60 } CellNode (34 @ 59) (20)Px39y62 { Px38y62, Px39y61, Px39y63, Px40y62 } CellNode (39 @ 62) (20)Px27y63 { Px28y63, Px26y63, Px27y64, Px27y62 } CellNode (27 @ 63) (20)Px64y51 { Px65y51, Px64y50, Px63y51, Px64y52 } CellNode (64 @ 51) (20)Px73y59 { Px74y59, Px73y58, Px72y59, Px73y60 } CellNode (73 @ 59) (20)Px15y64 { Px15y65, Px14y64, Px16y64, Px15y63 } CellNode (15 @ 64) (20)Px78y62 { Px78y61, Px77y62, Px78y63, Px79y62 } CellNode (78 @ 62) (20)Px52y52 { Px52y53, Px53y52, Px52y51, Px51y52 } CellNode (52 @ 52) (20)Px66y63 { Px67y63, Px66y64, Px65y63, Px66y62 } CellNode (66 @ 63) (20)Px49y17 { Px49y18, Px48y17, Px50y17, Px49y16 } CellNode (49 @ 17) (20)Px40y53 { Px41y53, Px40y52, Px40y54, Px39y53 } CellNode (40 @ 53) (20)Px54y64 { Px55y64, Px53y64, Px54y65, Px54y63 } CellNode (54 @ 64) (20)Px2y60 { Px2y59, Px2y61, Px3y60, Px1y60 } CellNode (2 @ 60) (20)Px4y72 { Px4y71, Px5y72, Px3y72, Px4y73 } CellNode (4 @ 72) (20)Px58y43 { Px58y42, Px58y44, Px59y43, Px57y43 } CellNode (58 @ 43) (20)Px62y9 { Px61y9, Px62y10, Px63y9, Px62y8 } CellNode (62 @ 9) (20)Px46y44 { Px47y44, Px46y43, Px45y44, Px46y45 } CellNode (46 @ 44) (20)Px20y34 { Px20y33, Px19y34, Px20y35, Px21y34 } CellNode (20 @ 34) (20)Px34y45 { Px35y45, Px33y45, Px34y46, Px34y44 } CellNode (34 @ 45) (20)Px71y33 { Px71y34, Px72y33, Px70y33, Px71y32 } CellNode (71 @ 33) (20)Px8y51 { Px8y50, Px7y51, Px9y51, Px8y52 } CellNode (8 @ 51) (20)Px13y79 { Px13y78, Px13y80, Px14y79, Px12y79 } CellNode (13 @ 79) (20)Px18y82 { Px18y83, Px19y82, Px18y81, Px17y82 } CellNode (18 @ 82) (20)Px61y46 { Px61y47, Px61y45, Px62y46, Px60y46 } CellNode (61 @ 46) (20)Px69y81 { Px70y81, Px68y81, Px69y80, Px69y82 } CellNode (69 @ 81) (20)Px43y71 { Px42y71, Px43y72, Px44y71, Px43y70 } CellNode (43 @ 71) (20)Px52y79 { Px52y78, Px52y80, Px53y79, Px51y79 } CellNode (52 @ 79) (20)Px57y82 { Px57y83, Px58y82, Px56y82, Px57y81 } CellNode (57 @ 82) (20)Px26y25 { Px27y25, Px26y24, Px25y25, Px26y26 } CellNode (26 @ 25) (20)Px31y72 { Px32y72, Px31y71, Px30y72, Px31y73 } CellNode (31 @ 72) (20)Px45y83 { Px45y82, Px46y83, Px45y84, Px44y83 } CellNode (45 @ 83) (20)Px28y37 { Px28y38, Px27y37, Px28y36, Px29y37 } CellNode (28 @ 37) (20)Px82y71 { Px82y70, Px82y72, Px83y71, Px81y71 } CellNode (82 @ 71) (20)Px91y79 { Px90y79, Px91y80, Px92y79, Px91y78 } CellNode (91 @ 79) (20)Px33y84 { Px32y84, Px33y83, Px34y84 } CellNode (33 @ 84) (20)Px96y82 { Px96y83, Px97y82, Px95y82, Px96y81 } CellNode (96 @ 82) (20)Px57y9 { Px58y9, Px57y10, Px56y9, Px57y8 } CellNode (57 @ 9) (20)Px84y83 { Px84y82, Px85y83, Px83y83, Px84y84 } CellNode (84 @ 83) (20)Px53y26 { Px52y26, Px53y27 } CellNode (53 @ 26) (20)Px67y37 { Px66y37, Px67y36, Px67y38 } CellNode (67 @ 37) (20)Px54y6 { Px55y6, Px53y6, Px54y7, Px54y5 } CellNode (54 @ 6) (20)Px72y84 { Px71y84, Px73y84, Px72y83 } CellNode (72 @ 84) (20)Px49y62 { Px49y61, Px48y62, Px49y63, Px50y62 } CellNode (49 @ 62) (20)Px41y27 { Px41y26, Px41y28, Px40y27, Px42y27 } CellNode (41 @ 27) (20)Px65y25 { Px66y25, Px65y24, Px64y25, Px65y26 } CellNode (65 @ 25) (20)Px70y72 { Px71y72, Px69y72, Px70y71, Px70y73 } CellNode (70 @ 72) (20)Px37y63 { Px37y64, Px38y63, Px37y62, Px36y63 } CellNode (37 @ 63) (20)Px51y3 { Px52y3, Px51y4, Px50y3, Px51y2 } CellNode (51 @ 3) (20)Px46y30 { Px46y31, Px47y30, Px45y30, Px46y29 } CellNode (46 @ 30) (20)Px25y64 { Px25y63, Px26y64, Px25y65, Px24y64 } CellNode (25 @ 64) (20)Px39y75 { Px39y76, Px38y75, Px40y75, Px39y74 } CellNode (39 @ 75) (20)Px13y65 { Px14y65, Px12y65, Px13y64, Px13y66 } CellNode (13 @ 65) (20)Px76y63 { Px76y64, Px77y63, Px75y63, Px76y62 } CellNode (76 @ 63) (20)Px50y53 { Px51y53, Px49y53, Px50y52, Px50y54 } CellNode (50 @ 53) (20)Px8y78 { Px9y78, Px7y78, Px8y77, Px8y79 } CellNode (8 @ 78) (20)Px64y64 { Px64y63, Px65y64, Px64y65, Px63y64 } CellNode (64 @ 64) (20)Px38y10 { Px39y10, Px38y9, Px38y11, Px37y10 } CellNode (38 @ 10) (20)Px47y18 { Px46y18, Px47y17, Px47y19, Px48y18 } CellNode (47 @ 18) (20)Px52y65 { Px52y66, Px51y65, Px52y64, Px53y65 } CellNode (52 @ 65) (20)Px35y19 { Px36y19, Px34y19, Px35y18, Px35y20 } CellNode (35 @ 19) (20)Px40y66 { Px40y67, Px41y66, Px39y66, Px40y65 } CellNode (40 @ 66) (20)Px65y11 { Px65y12, Px64y11, Px65y10 } CellNode (65 @ 11) (20)Px19y56 { Px19y57, Px18y56, Px20y56, Px19y55 } CellNode (19 @ 56) (20)Px2y73 { Px3y73, Px1y73, Px2y74, Px2y72 } CellNode (2 @ 73) (20)Px49y6 { Px48y6, Px49y5, Px49y7 } CellNode (49 @ 6) (20)Px53y12 { Px53y11, Px53y13, Px54y12, Px52y12 } CellNode (53 @ 12) (20)Px56y44 { Px57y44, Px55y44, Px56y43, Px56y45 } CellNode (56 @ 44) (20)Px44y45 { Px44y46, Px45y45, Px44y44, Px43y45 } CellNode (44 @ 45) (20)Px46y3 { Px47y3, Px46y2, Px45y3, Px46y4 } CellNode (46 @ 3) (20)Px58y56 { Px58y57, Px57y56, Px59y56, Px58y55 } CellNode (58 @ 56) (20)Px32y46 { Px32y45, Px31y46, Px33y46, Px32y47 } CellNode (32 @ 46) (20)Px46y57 { Px47y57, Px46y58, Px45y57, Px46y56 } CellNode (46 @ 57) (20)Px6y52 { Px6y53, Px7y52, Px5y52, Px6y51 } CellNode (6 @ 52) (20)Px28y82 { Px28y83, Px29y82, Px27y82, Px28y81 } CellNode (28 @ 82) (20)Px71y46 { Px71y47, Px71y45, Px70y46 } CellNode (71 @ 46) (20)Px16y83 { Px15y83, Px16y82, Px16y84, Px17y83 } CellNode (16 @ 83) (20)Px79y81 { Px80y81, Px79y80, Px78y81, Px79y82 } CellNode (79 @ 81) (20)Px8y64 { Px8y65, Px7y64, Px9y64, Px8y63 } CellNode (8 @ 64) (20)Px67y82 { Px67y83, Px68y82, Px67y81, Px66y82 } CellNode (67 @ 82) (20)Px55y83 { Px54y83, Px55y82, Px55y84, Px56y83 } CellNode (55 @ 83) (20)Px24y26 { Px24y27, Px25y26, Px23y26, Px24y25 } CellNode (24 @ 26) (20)Px38y37 { Px38y38, Px37y37, Px38y36, Px39y37 } CellNode (38 @ 37) (20)Px43y84 { Px42y84, Px43y83, Px44y84 } CellNode (43 @ 84) (20)Px17y30 { Px17y31, Px16y30, Px18y30, Px17y29 } CellNode (17 @ 30) (20)Px94y83 { Px93y83, Px94y82, Px94y84, Px95y83 } CellNode (94 @ 83) (20)Px63y26 { Px63y27, Px64y26, Px63y25 } CellNode (63 @ 26) (20)Px82y84 { Px82y83, Px83y84, Px81y84 } CellNode (82 @ 84) (20)Px51y27 { Px51y26, Px50y27, Px51y28, Px52y27 } CellNode (51 @ 27) (20)Px56y30 { Px57y30, Px55y30, Px56y31, Px56y29 } CellNode (56 @ 30) (20)Px30y20 { Px30y21, Px31y20, Px29y20, Px30y19 } CellNode (30 @ 20) (20)Px44y31 { Px45y31, Px44y30, Px44y32, Px43y31 } CellNode (44 @ 31) (20)Px65y38 { Px65y39, Px66y38, Px64y38, Px65y37 } CellNode (65 @ 38) (20)Px53y39 { Px53y38, Px53y40, Px54y39, Px52y39 } CellNode (53 @ 39) (20)Px32y32 { Px32y33, Px31y32, Px33y32, Px32y31 } CellNode (32 @ 32) (20)Px35y64 { Px34y64, Px35y65, Px36y64, Px35y63 } CellNode (35 @ 64) (20)Px49y75 { Px49y76, Px48y75, Px50y75, Px49y74 } CellNode (49 @ 75) (20)Px23y65 { Px24y65, Px22y65, Px23y64, Px23y66 } CellNode (23 @ 65) (20)Px37y76 { Px37y75, Px38y76, Px37y77, Px36y76 } CellNode (37 @ 76) (20)Px48y10 { Px48y11, Px49y10 } CellNode (48 @ 10) (20)Px11y66 { Px11y67, Px12y66, Px11y65, Px10y66 } CellNode (11 @ 66) (20)Px6y79 { Px6y80, Px7y79, Px5y79, Px6y78 } CellNode (6 @ 79) (20)Px25y77 { Px26y77, Px24y77, Px25y78, Px25y76 } CellNode (25 @ 77) (20)Px88y75 { Px88y76, Px87y75, Px89y75, Px88y74 } CellNode (88 @ 75) (20)Px57y18 { Px57y17 } CellNode (57 @ 18) (20)Px76y76 { Px76y75, Px76y77, Px77y76, Px75y76 } CellNode (76 @ 76) (20)Px62y65 { Px63y65, Px61y65, Px62y64, Px62y66 } CellNode (62 @ 65) (20)Px50y66 { Px50y67, Px49y66, Px51y66, Px50y65 } CellNode (50 @ 66) (20)Px74y64 { Px74y63, Px74y65, Px75y64, Px73y64 } CellNode (74 @ 64) (20)Px64y77 { Px64y78, Px65y77, Px63y77, Px64y76 } CellNode (64 @ 77) (20)Px36y11 { Px37y11, Px36y12, Px35y11, Px36y10 } CellNode (36 @ 11) (20)Px29y56 { Px29y57, Px30y56, Px29y55, Px28y56 } CellNode (29 @ 56) (20)Px63y12 { Px63y11, Px64y12, Px62y12, Px63y13 } CellNode (63 @ 12) (20)Px17y57 { Px16y57, Px17y58, Px18y57, Px17y56 } CellNode (17 @ 57) (20)Px51y13 { Px51y14, Px52y13, Px50y13, Px51y12 } CellNode (51 @ 13) (20)Px68y56 { Px69y56, Px68y57, Px67y56, Px68y55 } CellNode (68 @ 56) (20)Px42y46 { Px43y46, Px41y46, Px42y45, Px42y47 } CellNode (42 @ 46) (20)Px56y57 { Px57y57, Px55y57, Px56y58, Px56y56 } CellNode (56 @ 57) (20)Px30y47 { Px30y48, Px31y47, Px29y47, Px30y46 } CellNode (30 @ 47) (20)Px35y50 { Px34y50, Px36y50, Px35y49, Px35y51 } CellNode (35 @ 50) (20)Px44y58 { Px43y58, Px45y58, Px44y57, Px44y59 } CellNode (44 @ 58) (20)Px4y53 { Px3y53, Px4y54, Px5y53, Px4y52 } CellNode (4 @ 53) (20)Px32y59 { Px33y59, Px31y59, Px32y58, Px32y60 } CellNode (32 @ 59) (20)Px11y52 { Px11y53, Px11y51, Px10y52 } CellNode (11 @ 52) (20)Px74y50 { Px73y50, Px74y51, Px74y49, Px75y50 } CellNode (74 @ 50) (20)Px14y84 { Px14y83, Px15y84, Px13y84 } CellNode (14 @ 84) (20)Px6y65 { Px6y64, Px6y66, Px5y65, Px7y65 } CellNode (6 @ 65) (20)Px62y51 { Px62y52, Px63y51, Px61y51, Px62y50 } CellNode (62 @ 51) (20)Px65y83 { Px65y82, Px64y83, Px65y84, Px66y83 } CellNode (65 @ 83) (20)Px71y59 { Px72y59, Px70y59, Px71y58, Px71y60 } CellNode (71 @ 59) (20)Px48y37 { Px49y37, Px47y37, Px48y36, Px48y38 } CellNode (48 @ 37) (20)Px27y30 { Px27y29, Px27y31, Px28y30, Px26y30 } CellNode (27 @ 30) (20)Px53y84 { Px53y83, Px52y84, Px54y84 } CellNode (53 @ 84) (20)Px36y38 { Px36y39, Px37y38, Px36y37, Px35y38 } CellNode (36 @ 38) (20)Px15y31 { Px16y31, Px15y32, Px15y30 } CellNode (15 @ 31) (20)Px29y42 { Px29y41, Px30y42, Px29y43 } CellNode (29 @ 42) (20)Px92y84 { Px91y84, Px92y83, Px93y84 } CellNode (92 @ 84) (20)Px66y30 { Px66y29, Px66y31, Px67y30, Px65y30 } CellNode (66 @ 30) (20)Px75y38 { Px76y38, Px75y39, Px74y38, Px75y37 } CellNode (75 @ 38) (20)Px54y31 { Px54y30, Px53y31, Px55y31, Px54y32 } CellNode (54 @ 31) (20)Px63y39 { Px63y38, Px63y40, Px64y39, Px62y39 } CellNode (63 @ 39) (20)Px68y42 { Px68y43, Px67y42, Px69y42, Px68y41 } CellNode (68 @ 42) (20)Px42y32 { Px42y33, Px41y32, Px43y32, Px42y31 } CellNode (42 @ 32) (20)Px42y9 { Px43y9, Px42y8, Px41y9, Px42y10 } CellNode (42 @ 9) (20)Px59y75 { Px59y76, Px59y74, Px60y75 } CellNode (59 @ 75) (20)Px28y18 { Px29y18, Px27y18, Px28y17, Px28y19 } CellNode (28 @ 18) (20)Px30y33 { Px30y32, Px31y33, Px29y33, Px30y34 } CellNode (30 @ 33) (20)Px47y76 { Px47y75, Px46y76, Px48y76, Px47y77 } CellNode (47 @ 76) (20)Px21y66 { Px21y67, Px22y66, Px21y65, Px20y66 } CellNode (21 @ 66) (20)Px67y18 { Px68y18, Px66y18, Px67y17, Px67y19 } CellNode (67 @ 18) (20)Px35y77 { Px35y78, Px36y77, Px34y77, Px35y76 } CellNode (35 @ 77) (20)Px72y65 { Px73y65, Px71y65, Px72y64, Px72y66 } CellNode (72 @ 65) (20)Px14y70 { Px14y69, Px15y70, Px14y71, Px13y70 } CellNode (14 @ 70) (20)Px9y83 { Px10y83, Px9y84, Px9y82, Px8y83 } CellNode (9 @ 83) (20)Px46y11 { Px46y12, Px47y11, Px46y10, Px45y11 } CellNode (46 @ 11) (20)Px60y66 { Px60y67, Px61y66, Px60y65, Px59y66 } CellNode (60 @ 66) (20)Px34y12 { Px34y11, Px33y12, Px34y13, Px35y12 } CellNode (34 @ 12) (20)Px48y23 { Px49y23, Px48y24, Px47y23, Px48y22 } CellNode (48 @ 23) (20)Px11y79 { Px10y79, Px11y78, Px11y80, Px12y79 } CellNode (11 @ 79) (20)Px74y77 { Px75y77, Px73y77, Px74y78, Px74y76 } CellNode (74 @ 77) (20)Px23y78 { Px24y78, Px22y78, Px23y79, Px23y77 } CellNode (23 @ 78) (20)Px62y78 { Px62y79, Px61y78, Px63y78, Px62y77 } CellNode (62 @ 78) (20)Px39y56 { Px39y57, Px40y56, Px38y56, Px39y55 } CellNode (39 @ 56) (20)Px41y71 { Px42y71, Px40y71, Px41y70, Px41y72 } CellNode (41 @ 71) (20)Px86y76 { Px86y75, Px85y76, Px86y77, Px87y76 } CellNode (86 @ 76) (20)Px50y79 { Px49y79, Px50y78, Px50y80, Px51y79 } CellNode (50 @ 79) (20)Px27y57 { Px27y56, Px27y58, Px28y57, Px26y57 } CellNode (27 @ 57) (20)Px61y13 { Px61y14, Px62y13, Px60y13, Px61y12 } CellNode (61 @ 13) (20)Px63y7 { Px62y7, Px63y8, Px64y7, Px63y6 } CellNode (63 @ 7) (20)Px60y4 { Px59y4, Px60y5, Px61y4, Px60y3 } CellNode (60 @ 4) (20)Px78y56 { Px78y57, Px79y56, Px77y56, Px78y55 } CellNode (78 @ 56) (20)Px80y71 { Px79y71, Px80y72, Px80y70, Px81y71 } CellNode (80 @ 71) (20)Px66y57 { Px65y57, Px66y58, Px67y57, Px66y56 } CellNode (66 @ 57) (20)Px45y50 { Px46y50, Px44y50, Px45y49, Px45y51 } CellNode (45 @ 50) (20)Px54y58 { Px54y59, Px54y57, Px53y58, Px55y58 } CellNode (54 @ 58) (20)Px59y61 { Px59y60, Px59y62, Px60y61, Px58y61 } CellNode (59 @ 61) (20)Px68y69 { Px68y68, Px68y70, Px69y69, Px67y69 } CellNode (68 @ 69) (20)Px33y51 { Px33y52, Px34y51, Px32y51, Px33y50 } CellNode (33 @ 51) (20)Px42y59 { Px42y60, Px43y59, Px41y59, Px42y58 } CellNode (42 @ 59) (20)Px47y62 { Px48y62, Px47y63, Px46y62, Px47y61 } CellNode (47 @ 62) (20)Px72y51 { Px73y51, Px72y52, Px71y51, Px72y50 } CellNode (72 @ 51) (20)Px81y59 { Px81y60, Px80y59, Px81y58 } CellNode (81 @ 59) (20)Px4y66 { Px5y66, Px4y67, Px4y65, Px3y66 } CellNode (4 @ 66) (20)Px60y52 { Px60y53, Px60y51, Px61y52, Px59y52 } CellNode (60 @ 52) (20)Px46y38 { Px46y39, Px47y38, Px46y37, Px45y38 } CellNode (46 @ 38) (20)Px25y31 { Px26y31, Px25y30, Px24y31, Px25y32 } CellNode (25 @ 31) (20)Px39y42 { Px38y42, Px39y43, Px40y42, Px39y41 } CellNode (39 @ 42) (20)Px58y7 { Px59y7, Px58y6, Px58y8, Px57y7 } CellNode (58 @ 7) (20)Px34y39 { Px35y39, Px34y38, Px33y39, Px34y40 } CellNode (34 @ 39) (20)Px55y4 { Px55y3, Px56y4, Px55y5, Px54y4 } CellNode (55 @ 4) (20)Px64y31 { Px65y31, Px63y31, Px64y30, Px64y32 } CellNode (64 @ 31) (20)Px73y39 { Px74y39, Px73y38, Px72y39, Px73y40 } CellNode (73 @ 39) (20)Px18y76 { Px17y76, Px18y75, Px18y77, Px19y76 } CellNode (18 @ 76) (20)Px52y1 { Px51y1, Px52y2, Px53y1 } CellNode (52 @ 1) (20)Px52y32 { Px52y33, Px53y32, Px51y32, Px52y31 } CellNode (52 @ 32) (20)Px66y43 { Px65y43, Px66y44, Px66y42, Px67y43 } CellNode (66 @ 43) (20)Px40y33 { Px40y32, Px41y33, Px40y34, Px39y33 } CellNode (40 @ 33) (20)Px54y44 { Px54y45, Px53y44, Px55y44, Px54y43 } CellNode (54 @ 44) (20)Px57y76 { Px56y76, Px57y75, Px57y77 } CellNode (57 @ 76) (20)Px45y77 { Px45y78, Px46y77, Px44y77, Px45y76 } CellNode (45 @ 77) (20)Px19y23 { Px19y24, Px20y23, Px19y22, Px18y23 } CellNode (19 @ 23) (20)Px24y70 { Px25y70, Px24y71, Px23y70 } CellNode (24 @ 70) (20)Px33y78 { Px33y77, Px34y78, Px33y79, Px32y78 } CellNode (33 @ 78) (20)Px96y76 { Px96y75, Px95y76, Px96y77, Px97y76 } CellNode (96 @ 76) (20)Px38y81 { Px39y81, Px37y81, Px38y82, Px38y80 } CellNode (38 @ 81) (20)Px12y71 { Px12y72, Px12y70, Px11y71, Px13y71 } CellNode (12 @ 71) (20)Px21y79 { Px21y78, Px20y79, Px21y80, Px22y79 } CellNode (21 @ 79) (20)Px84y77 { Px84y78, Px85y77, Px83y77, Px84y76 } CellNode (84 @ 77) (20)Px7y84 { Px7y83, Px8y84, Px6y84 } CellNode (7 @ 84) (20)Px26y82 { Px26y81, Px27y82, Px25y82, Px26y83 } CellNode (26 @ 82) (20)Px72y78 { Px71y78, Px72y79, Px73y78, Px72y77 } CellNode (72 @ 78) (20)Px77y81 { Px78y81, Px76y81, Px77y82, Px77y80 } CellNode (77 @ 81) (20)Px89y80 { Px89y81, Px89y79, Px90y80, Px88y80 } CellNode (89 @ 80) (20)Px46y24 { Px45y24, Px46y23, Px46y25, Px47y24 } CellNode (46 @ 24) (20)Px60y79 { Px60y80, Px61y79, Px60y78 } CellNode (60 @ 79) (20)Px34y25 { Px34y26, Px35y25, Px33y25, Px34y24 } CellNode (34 @ 25) (20)Px58y23 { Px58y24, Px59y23, Px57y23, Px58y22 } CellNode (58 @ 23) (20)Px51y71 { Px52y71, Px51y70, Px50y71, Px51y72 } CellNode (51 @ 71) (20)Px22y26 { Px22y25, Px23y26, Px21y26, Px22y27 } CellNode (22 @ 26) (20)Px63y70 { Px64y70, Px63y69, Px63y71 } CellNode (63 @ 70) (20)Px32y13 { Px33y13, Px32y14 } CellNode (32 @ 13) (20)Px39y69 { Px38y69, Px39y68, Px39y70, Px40y69 } CellNode (39 @ 69) (20)Px40y5 { Px40y4, Px41y5, Px39y5, Px40y6 } CellNode (40 @ 5) (20)Px47y1 { Px46y1, Px47y2, Px48y1 } CellNode (47 @ 1) (20)Px18y62 { Px18y63, Px19y62, Px18y61, Px17y62 } CellNode (18 @ 62) (20)Px25y58 { Px26y58, Px25y57, Px24y58, Px25y59 } CellNode (25 @ 58) (20)Px61y26 { Px60y26, Px61y27, Px61y25 } CellNode (61 @ 26) (20)Px69y61 { Px68y61, Px69y60, Px69y62, Px70y61 } CellNode (69 @ 61) (20)Px64y58 { Px65y58, Px63y58, Px64y57, Px64y59 } CellNode (64 @ 58) (20)Px43y51 { Px43y52, Px44y51, Px42y51, Px43y50 } CellNode (43 @ 51) (20)Px78y69 { Px77y69, Px78y68, Px78y70, Px79y69 } CellNode (78 @ 69) (20)Px57y62 { Px56y62, Px58y62, Px57y61 } CellNode (57 @ 62) (20)Px52y59 { Px52y60, Px53y59, Px52y58, Px51y59 } CellNode (52 @ 59) (20)Px31y52 { Px32y52, Px31y51, Px30y52, Px31y53 } CellNode (31 @ 52) (20)Px45y63 { Px45y64, Px44y63, Px46y63, Px45y62 } CellNode (45 @ 63) (20)Px28y17 { Px29y17, Px27y17, Px28y18 } CellNode (28 @ 17) (20)Px33y64 { Px32y64, Px34y64, Px33y63, Px33y65 } CellNode (33 @ 64) (20)Px70y52 { Px71y52, Px70y51, Px70y53, Px69y52 } CellNode (70 @ 52) (20)Px7y70 { Px8y70, Px7y71, Px6y70, Px7y69 } CellNode (7 @ 70) (20)Px2y67 { Px2y68, Px2y66, Px3y67 } CellNode (2 @ 67) (20)Px72y64 { Px71y64, Px72y63, Px72y65, Px73y64 } CellNode (72 @ 64) (20)Px49y42 { Px48y42, Px49y43, Px50y42, Px49y41 } CellNode (49 @ 42) (20)Px38y8 { Px37y8, Px38y9, Px39y8, Px38y7 } CellNode (38 @ 8) (20)Px37y43 { Px38y43, Px37y42, Px36y43, Px37y44 } CellNode (37 @ 43) (20)Px8y58 { Px8y57, Px7y58, Px9y58, Px8y59 } CellNode (8 @ 58) (20)Px50y33 { Px49y33, Px50y32, Px50y34, Px51y33 } CellNode (50 @ 33) (20)Px64y44 { Px65y44, Px63y44, Px64y45, Px64y43 } CellNode (64 @ 44) (20)Px52y45 { Px51y45, Px52y44, Px53y45, Px52y46 } CellNode (52 @ 45) (20)Px29y23 { Px29y24, Px30y23, Px28y23, Px29y22 } CellNode (29 @ 23) (20)Px40y46 { Px41y46, Px39y46, Px40y47, Px40y45 } CellNode (40 @ 46) (20)Px48y81 { Px49y81, Px48y82, Px48y80, Px47y81 } CellNode (48 @ 81) (20)Px17y24 { Px17y25, Px18y24 } CellNode (17 @ 24) (20)Px22y71 { Px23y71, Px21y71, Px22y70, Px22y72 } CellNode (22 @ 71) (20)Px43y78 { Px42y78, Px43y79, Px44y78, Px43y77 } CellNode (43 @ 78) (20)Px36y82 { Px36y81, Px37y82, Px36y83, Px35y82 } CellNode (36 @ 82) (20)Px68y23 { Px68y24, Px69y23, Px67y23, Px68y22 } CellNode (68 @ 23) (20)Px10y72 { Px10y73, Px9y72, Px11y72, Px10y71 } CellNode (10 @ 72) (20)Px73y70 { Px73y69, Px73y71, Px74y70, Px72y70 } CellNode (73 @ 70) (20)Px24y83 { Px24y84, Px25y83, Px23y83, Px24y82 } CellNode (24 @ 83) (20)Px87y81 { Px87y82, Px88y81, Px87y80, Px86y81 } CellNode (87 @ 81) (20)Px2y53 { Px1y53, Px3y53, Px2y52, Px2y54 } CellNode (2 @ 53) (20)Px82y78 { Px81y78, Px82y79, Px83y78, Px82y77 } CellNode (82 @ 78) (20)Px12y84 { Px11y84, Px13y84, Px12y83 } CellNode (12 @ 84) (20)Px75y82 { Px75y81, Px75y83, Px74y82, Px76y82 } CellNode (75 @ 82) (20)Px70y79 { Px71y79, Px70y78, Px69y79, Px70y80 } CellNode (70 @ 79) (20)Px31y79 { Px32y79, Px30y79, Px31y78, Px31y80 } CellNode (31 @ 79) (20)Px32y26 { Px31y26, Px32y25, Px32y27, Px33y26 } CellNode (32 @ 26) (20)Px58y36 { Px57y36, Px59y36, Px58y35, Px58y37 } CellNode (58 @ 36) (20)Px63y83 { Px63y82, Px64y83 } CellNode (63 @ 83) (20)Px49y69 { Px49y68, Px48y69, Px49y70, Px50y69 } CellNode (49 @ 69) (20)Px20y27 { Px21y27, Px20y28, Px19y27, Px20y26 } CellNode (20 @ 27) (20)Px28y62 { Px28y63, Px29y62, Px27y62, Px28y61 } CellNode (28 @ 62) (20)Px51y84 { Px50y84, Px51y83, Px52y84 } CellNode (51 @ 84) (20)Px71y26 { Px71y25, Px72y26, Px71y27, Px70y26 } CellNode (71 @ 26) (20)Px16y63 { Px16y62, Px16y64, Px17y63, Px15y63 } CellNode (16 @ 63) (20)Px79y61 { Px79y60, Px78y61, Px79y62, Px80y61 } CellNode (79 @ 61) (20)Px67y62 { Px67y63, Px68y62, Px67y61, Px66y62 } CellNode (67 @ 62) (20)Px55y63 { Px54y63, Px56y63, Px55y64, Px55y62 } CellNode (55 @ 63) (20)Px69y74 { Px70y74, Px69y75, Px68y74, Px69y73 } CellNode (69 @ 74) (20)Px38y17 { Px37y17, Px38y16, Px38y18, Px39y17 } CellNode (38 @ 17) (20)Px43y64 { Px42y64, Px44y64, Px43y63, Px43y65 } CellNode (43 @ 64) (20)Px26y18 { Px27y18, Px26y19 } CellNode (26 @ 18) (20)Px31y65 { Px32y65, Px31y66, Px30y65, Px31y64 } CellNode (31 @ 65) (20)Px82y64 { Px81y64, Px83y64, Px82y63, Px82y65 } CellNode (82 @ 64) (20)Px5y71 { Px5y70, Px4y71, Px5y72, Px6y71 } CellNode (5 @ 71) (20)Px65y18 { Px65y19, Px66y18, Px64y18, Px65y17 } CellNode (65 @ 18) (20)Px56y10 { Px56y9, Px55y10, Px57y10 } CellNode (56 @ 10) (20)Px70y65 { Px71y65, Px69y65, Px70y66, Px70y64 } CellNode (70 @ 65) (20)Px47y43 { Px48y43, Px46y43, Px47y42, Px47y44 } CellNode (47 @ 43) (20)Px44y11 { Px44y10, Px45y11, Px44y12, Px43y11 } CellNode (44 @ 11) (20)Px35y44 { Px35y45, Px36y44, Px35y43, Px34y44 } CellNode (35 @ 44) (20)Px49y55 { Px49y56, Px48y55, Px50y55, Px49y54 } CellNode (49 @ 55) (20)Px9y50 { Px8y50, Px10y50, Px9y49, Px9y51 } CellNode (9 @ 50) (20)Px37y56 { Px37y57, Px38y56, Px36y56, Px37y55 } CellNode (37 @ 56) (20)Px74y44 { Px74y43, Px73y44, Px74y45 } CellNode (74 @ 44) (20)Px43y7 { Px44y7, Px43y6, Px43y8, Px42y7 } CellNode (43 @ 7) (20)Px6y59 { Px7y59, Px6y58, Px5y59, Px6y60 } CellNode (6 @ 59) (20)Px19y81 { Px19y82, Px20y81, Px19y80, Px18y81 } CellNode (19 @ 81) (20)Px62y45 { Px61y45, Px62y44, Px63y45, Px62y46 } CellNode (62 @ 45) (20)Px76y56 { Px76y57, Px75y56, Px77y56, Px76y55 } CellNode (76 @ 56) (20)Px50y46 { Px50y47, Px49y46, Px51y46, Px50y45 } CellNode (50 @ 46) (20)Px58y81 { Px57y81, Px58y82, Px58y80 } CellNode (58 @ 81) (20)Px46y82 { Px45y82, Px46y81, Px46y83, Px47y82 } CellNode (46 @ 82) (20)Px29y36 { Px30y36, Px28y36, Px29y35, Px29y37 } CellNode (29 @ 36) (20)Px34y83 { Px34y84, Px35y83, Px33y83, Px34y82 } CellNode (34 @ 83) (20)Px97y81 { Px97y82, Px96y81, Px97y80 } CellNode (97 @ 81) (20)Px22y84 { Px22y83, Px21y84, Px23y84 } CellNode (22 @ 84) (20)Px85y82 { Px84y82, Px85y81, Px85y83, Px86y82 } CellNode (85 @ 82) (20)Px68y36 { Px67y36, Px68y35, Px69y36 } CellNode (68 @ 36) (20)Px64y5 { Px63y5, Px64y6, Px64y4 } CellNode (64 @ 5) (20)Px73y83 { Px74y83, Px73y84, Px73y82, Px72y83 } CellNode (73 @ 83) (20)Px42y26 { Px42y25, Px41y26, Px42y27, Px43y26 } CellNode (42 @ 26) (20)Px56y37 { Px55y37, Px57y37, Px56y38 } CellNode (56 @ 37) (20)Px54y25 { Px54y24, Px55y25 } CellNode (54 @ 25) (20)Px30y27 { Px30y28, Px29y27, Px31y27, Px30y26 } CellNode (30 @ 27) (20)Px61y2 { Px62y2, Px60y2, Px61y3, Px61y1 } CellNode (61 @ 2) (20)Px44y38 { Px43y38, Px44y37, Px44y39, Px45y38 } CellNode (44 @ 38) (20)Px35y30 { Px36y30, Px35y29, Px35y31, Px34y30 } CellNode (35 @ 30) (20)Px23y31 { Px23y32, Px22y31, Px24y31, Px23y30 } CellNode (23 @ 31) (20)Px26y63 { Px25y63, Px26y64, Px27y63, Px26y62 } CellNode (26 @ 63) (20)Px74y30 { Px73y30, Px74y31, Px75y30 } CellNode (74 @ 30) (20)Px14y64 { Px15y64, Px14y63, Px13y64, Px14y65 } CellNode (14 @ 64) (20)Px28y75 { Px28y74, Px29y75, Px27y75, Px28y76 } CellNode (28 @ 75) (20)Px62y31 { Px63y31, Px62y32, Px61y31, Px62y30 } CellNode (62 @ 31) (20)Px65y63 { Px64y63, Px65y64, Px66y63, Px65y62 } CellNode (65 @ 63) (20)Px48y17 { Px49y17, Px48y16, Px47y17, Px48y18 } CellNode (48 @ 17) (20)Px16y76 { Px17y76, Px16y77, Px15y76, Px16y75 } CellNode (16 @ 76) (20)Px53y64 { Px54y64, Px52y64, Px53y63, Px53y65 } CellNode (53 @ 64) (20)Px79y74 { Px79y75, Px78y74, Px80y74, Px79y73 } CellNode (79 @ 74) (20)Px67y75 { Px67y74, Px68y75, Px66y75, Px67y76 } CellNode (67 @ 75) (20)Px36y18 { Px37y18, Px36y19, Px35y18, Px36y17 } CellNode (36 @ 18) (20)Px41y65 { Px41y66, Px42y65, Px40y65, Px41y64 } CellNode (41 @ 65) (20)Px55y76 { Px55y77, Px56y76, Px54y76, Px55y75 } CellNode (55 @ 76) (20)Px3y72 { Px3y73, Px4y72, Px3y71, Px2y72 } CellNode (3 @ 72) (20)Px59y5 { Px59y4, Px60y5, Px59y6, Px58y5 } CellNode (59 @ 5) (20)Px54y11 { Px54y10, Px53y11, Px55y11, Px54y12 } CellNode (54 @ 11) (20)Px94y76 { Px94y77, Px93y76, Px95y76, Px94y75 } CellNode (94 @ 76) (20)Px42y12 { Px43y12, Px41y12, Px42y13, Px42y11 } CellNode (42 @ 12) (20)Px63y19 { Px63y20, Px64y19, Px63y18 } CellNode (63 @ 19) (20)Px56y2 { Px56y1, Px57y2, Px55y2, Px56y3 } CellNode (56 @ 2) (20)Px59y55 { Px58y55, Px59y56, Px59y54 } CellNode (59 @ 55) (20)Px80y65 { Px81y65, Px80y66, Px79y65, Px80y64 } CellNode (80 @ 65) (20)Px33y45 { Px34y45, Px33y44, Px32y45, Px33y46 } CellNode (33 @ 45) (20)Px47y56 { Px46y56, Px48y56, Px47y57, Px47y55 } CellNode (47 @ 56) (20)Px35y57 { Px35y58, Px34y57, Px35y56, Px36y57 } CellNode (35 @ 57) (20)Px23y58 { Px24y58, Px22y58, Px23y59, Px23y57 } CellNode (23 @ 58) (20)Px9y63 { Px9y64, Px9y62, Px8y63, Px10y63 } CellNode (9 @ 63) (20)Px60y46 { Px60y47, Px61y46, Px60y45, Px59y46 } CellNode (60 @ 46) (20)Px74y57 { Px73y57, Px74y58, Px74y56, Px75y57 } CellNode (74 @ 57) (20)Px53y50 { Px54y50, Px53y51, Px52y50, Px53y49 } CellNode (53 @ 50) (20)Px62y58 { Px63y58, Px62y59, Px61y58, Px62y57 } CellNode (62 @ 58) (20)Px39y36 { Px40y36, Px39y35, Px38y36, Px39y37 } CellNode (39 @ 36) (20)Px41y51 { Px40y51, Px41y50, Px41y52, Px42y51 } CellNode (41 @ 51) (20)Px44y83 { Px44y84, Px45y83, Px43y83, Px44y82 } CellNode (44 @ 83) (20)Px27y37 { Px27y38, Px28y37, Px27y36 } CellNode (27 @ 37) (20)Px32y84 { Px32y83, Px31y84, Px33y84 } CellNode (32 @ 84) (20)Px83y83 { Px83y84, Px84y83, Px83y82, Px82y83 } CellNode (83 @ 83) (20)Px29y49 { Px29y50, Px30y49, Px28y49, Px29y48 } CellNode (29 @ 49) (20)Px66y37 { Px66y38, Px67y37, Px66y36, Px65y37 } CellNode (66 @ 37) (20)Px71y84 { Px71y83, Px72y84, Px70y84 } CellNode (71 @ 84) (20)Px40y27 { Px41y27, Px40y26, Px40y28 } CellNode (40 @ 27) (20)Px59y41 { Px60y41, Px58y41, Px59y42, Px59y40 } CellNode (59 @ 41) (20)Px45y30 { Px46y30, Px44y30, Px45y29, Px45y31 } CellNode (45 @ 30) (20)Px33y31 { Px34y31, Px33y32, Px33y30, Px32y31 } CellNode (33 @ 31) (20)Px54y38 { Px54y37, Px53y38, Px54y39, Px55y38 } CellNode (54 @ 38) (20)Px42y39 { Px43y39, Px41y39, Px42y38, Px42y40 } CellNode (42 @ 39) (20)Px21y32 { Px21y31, Px21y33, Px20y32, Px22y32 } CellNode (21 @ 32) (20)Px38y75 { Px38y74, Px37y75, Px38y76, Px39y75 } CellNode (38 @ 75) (20)Px72y31 { Px72y32, Px71y31, Px73y31, Px72y30 } CellNode (72 @ 31) (20)Px12y65 { Px12y66, Px13y65, Px11y65, Px12y64 } CellNode (12 @ 65) (20)Px26y76 { Px26y77, Px27y76, Px26y75, Px25y76 } CellNode (26 @ 76) (20)Px60y32 { Px60y31, Px61y32, Px59y32, Px60y33 } CellNode (60 @ 32) (20)Px37y10 { Px37y11, Px37y9, Px38y10, Px36y10 } CellNode (37 @ 10) (20)Px89y74 { Px89y75, Px90y74, Px88y74, Px89y73 } CellNode (89 @ 74) (20)Px14y77 { Px14y78, Px13y77, Px15y77, Px14y76 } CellNode (14 @ 77) (20)Px77y75 { Px77y74, Px76y75, Px78y75, Px77y76 } CellNode (77 @ 75) (20)Px46y18 { Px46y19, Px46y17, Px47y18 } CellNode (46 @ 18) (20)Px51y65 { Px51y66, Px52y65, Px50y65, Px51y64 } CellNode (51 @ 65) (20)Px65y76 { Px66y76, Px65y77, Px65y75, Px64y76 } CellNode (65 @ 76) (20)Px34y19 { Px34y18, Px33y19, Px34y20, Px35y19 } CellNode (34 @ 19) (20)Px39y22 { Px39y23, Px38y22, Px40y22, Px39y21 } CellNode (39 @ 22) (20)Px53y77 { Px54y77, Px53y78, Px52y77, Px53y76 } CellNode (53 @ 77) (20)Px27y23 { Px26y23, Px27y22, Px28y23, Px27y24 } CellNode (27 @ 23) (20)Px32y70 { Px31y70, Px32y71, Px32y69, Px33y70 } CellNode (32 @ 70) (20)Px64y11 { Px64y10, Px63y11, Px64y12, Px65y11 } CellNode (64 @ 11) (20)Px41y78 { Px40y78, Px41y79, Px41y77, Px42y78 } CellNode (41 @ 78) (20)Px18y56 { Px18y55, Px18y57, Px19y56, Px17y56 } CellNode (18 @ 56) (20)Px1y73 { Px1y74, Px2y73, Px1y72 } CellNode (1 @ 73) (20)Px39y6 { Px38y6, Px39y7, Px39y5, Px40y6 } CellNode (39 @ 6) (20)Px92y77 { Px93y77, Px92y78, Px91y77, Px92y76 } CellNode (92 @ 77) (20)Px69y55 { Px69y56, Px70y55, Px68y55, Px69y54 } CellNode (69 @ 55) (20)Px66y23 { Px66y24, Px66y22, Px67y23, Px65y23 } CellNode (66 @ 23) (20)Px71y70 { Px70y70, Px71y71, Px71y69, Px72y70 } CellNode (71 @ 70) (20)Px80y78 { Px79y78, Px81y78, Px80y77, Px80y79 } CellNode (80 @ 78) (20)Px20y71 { Px20y72, Px19y71, Px21y71, Px20y70 } CellNode (20 @ 71) (20)Px40y13 { Px41y13, Px40y14, Px39y13, Px40y12 } CellNode (40 @ 13) (20)Px52y12 { Px52y13, Px53y12, Px51y12, Px52y11 } CellNode (52 @ 12) (20)Px57y56 { Px57y55, Px57y57, Px58y56, Px56y56 } CellNode (57 @ 56) (20)Px45y57 { Px46y57, Px45y56, Px44y57, Px45y58 } CellNode (45 @ 57) (20)Px59y68 { Px60y68, Px59y69, Px59y67 } CellNode (59 @ 68) (20)Px38y61 { Px39y61, Px38y62, Px37y61, Px38y60 } CellNode (38 @ 61) (20)Px33y58 { Px33y59, Px34y58, Px32y58, Px33y57 } CellNode (33 @ 58) (20)Px47y69 { Px48y69, Px46y69, Px47y68, Px47y70 } CellNode (47 @ 69) (20)Px21y59 { Px21y58, Px21y60, Px22y59, Px20y59 } CellNode (21 @ 59) (20)Px7y64 { Px7y63, Px6y64, Px7y65, Px8y64 } CellNode (7 @ 64) (20)Px63y50 { Px64y50, Px63y51, Px62y50, Px63y49 } CellNode (63 @ 50) (20)Px77y61 { Px78y61, Px76y61, Px77y62, Px77y60 } CellNode (77 @ 61) (20)Px72y58 { Px73y58, Px72y59, Px71y58, Px72y57 } CellNode (72 @ 58) (20)Px51y51 { Px51y52, Px51y50, Px52y51, Px50y51 } CellNode (51 @ 51) (20)Px9y76 { Px10y76, Px9y75, Px9y77, Px8y76 } CellNode (9 @ 76) (20)Px60y59 { Px60y58, Px60y60, Px61y59, Px59y59 } CellNode (60 @ 59) (20)Px16y30 { Px17y30, Px15y30, Px16y29, Px16y31 } CellNode (16 @ 30) (20)Px39y49 { Px39y50, Px38y49, Px40y49, Px39y48 } CellNode (39 @ 49) (20)Px76y37 { Px76y38, Px75y37, Px76y36 } CellNode (76 @ 37) (20)Px55y30 { Px56y30, Px54y30, Px55y29, Px55y31 } CellNode (55 @ 30) (20)Px64y38 { Px65y38, Px64y37, Px63y38, Px64y39 } CellNode (64 @ 38) (20)Px69y41 { Px68y41, Px69y40, Px69y42 } CellNode (69 @ 41) (20)Px43y31 { Px43y32, Px44y31, Px43y30, Px42y31 } CellNode (43 @ 31) (20)Px52y39 { Px52y40, Px53y39, Px52y38, Px51y39 } CellNode (52 @ 39) (20)Px57y42 { Px56y42, Px58y42, Px57y41, Px57y43 } CellNode (57 @ 42) (20)Px31y32 { Px30y32, Px31y31, Px31y33, Px32y32 } CellNode (31 @ 32) (20)Px45y43 { Px46y43, Px44y43, Px45y44, Px45y42 } CellNode (45 @ 43) (20)Px48y75 { Px48y74, Px47y75, Px48y76, Px49y75 } CellNode (48 @ 75) (20)Px36y76 { Px36y77, Px37y76, Px35y76, Px36y75 } CellNode (36 @ 76) (20)Px70y32 { Px70y31, Px70y33, Px69y32, Px71y32 } CellNode (70 @ 32) (20)Px7y50 { Px8y50, Px6y50, Px7y51, Px7y49 } CellNode (7 @ 50) (20)Px29y80 { Px30y80, Px28y80, Px29y81, Px29y79 } CellNode (29 @ 80) (20)Px24y77 { Px24y76, Px24y78, Px25y77, Px23y77 } CellNode (24 @ 77) (20)Px87y75 { Px86y75, Px87y74, Px87y76, Px88y75 } CellNode (87 @ 75) (20)Px17y81 { Px17y80, Px18y81, Px16y81, Px17y82 } CellNode (17 @ 81) (20)Px49y22 { Px49y23, Px48y22 } CellNode (49 @ 22) (20)Px12y78 { Px13y78, Px12y77, Px11y78, Px12y79 } CellNode (12 @ 78) (20)Px75y76 { Px75y77, Px76y76, Px75y75, Px74y76 } CellNode (75 @ 76) (20)Px68y80 { Px69y80, Px67y80, Px68y81, Px68y79 } CellNode (68 @ 80) (20)Px63y77 { Px63y76, Px63y78, Px64y77, Px62y77 } CellNode (63 @ 77) (20)Px42y70 { Px43y70, Px41y70, Px42y69, Px42y71 } CellNode (42 @ 70) (20)Px56y81 { Px56y80, Px57y81, Px55y81, Px56y82 } CellNode (56 @ 81) (20)Px25y24 { Px26y24, Px24y24, Px25y25, Px25y23 } CellNode (25 @ 24) (20)Px30y71 { Px31y71, Px29y71, Px30y72, Px30y70 } CellNode (30 @ 71) (20)Px62y12 { Px62y13, Px63y12, Px62y11, Px61y12 } CellNode (62 @ 12) (20)Px51y78 { Px52y78, Px51y77, Px50y78, Px51y79 } CellNode (51 @ 78) (20)Px81y70 { Px81y71, Px80y70, Px81y69, Px82y70 } CellNode (81 @ 70) (20)Px50y13 { Px50y12, Px50y14, Px51y13, Px49y13 } CellNode (50 @ 13) (20)Px64y24 { Px64y25, Px65y24, Px63y24, Px64y23 } CellNode (64 @ 24) (20)Px90y78 { Px89y78, Px90y79, Px90y77, Px91y78 } CellNode (90 @ 78) (20)Px95y81 { Px95y80, Px95y82, Px94y81, Px96y81 } CellNode (95 @ 81) (20)Px18y69 { Px19y69, Px17y69, Px18y68, Px18y70 } CellNode (18 @ 69) (20)Px52y25 { Px51y25, Px52y24, Px52y26 } CellNode (52 @ 25) (20)Px55y57 { Px56y57, Px55y56, Px54y57, Px55y58 } CellNode (55 @ 57) (20)Px69y68 { Px69y67, Px68y68, Px69y69, Px70y68 } CellNode (69 @ 68) (20)Px44y5 { Px43y5, Px44y4, Px45y5, Px44y6 } CellNode (44 @ 5) (20)Px43y58 { Px43y59, Px44y58, Px42y58, Px43y57 } CellNode (43 @ 58) (20)Px48y61 { Px49y61, Px48y62, Px48y60, Px47y61 } CellNode (48 @ 61) (20)Px34y50 { Px34y49, Px34y51, Px35y50, Px33y50 } CellNode (34 @ 50) (20)Px41y2 { Px41y1, Px42y2, Px40y2, Px41y3 } CellNode (41 @ 2) (20)Px31y59 { Px32y59, Px31y58, Px30y59, Px31y60 } CellNode (31 @ 59) (20)Px36y62 { Px37y62, Px35y62, Px36y63, Px36y61 } CellNode (36 @ 62) (20)Px10y52 { Px10y53, Px11y52, Px10y51, Px9y52 } CellNode (10 @ 52) (20)Px73y50 { Px73y49, Px73y51, Px74y50, Px72y50 } CellNode (73 @ 50) (20)Px5y65 { Px5y66, Px6y65, Px5y64, Px4y65 } CellNode (5 @ 65) (20)Px24y63 { Px23y63, Px25y63, Px24y62, Px24y64 } CellNode (24 @ 63) (20)Px61y51 { Px62y51, Px61y50, Px60y51, Px61y52 } CellNode (61 @ 51) (20)Px70y59 { Px71y59, Px70y58, Px70y60, Px69y59 } CellNode (70 @ 59) (20)Px75y62 { Px75y63, Px74y62, Px76y62, Px75y61 } CellNode (75 @ 62) (20)Px7y77 { Px7y78, Px6y77, Px8y77, Px7y76 } CellNode (7 @ 77) (20)Px63y63 { Px64y63, Px62y63, Px63y62, Px63y64 } CellNode (63 @ 63) (20)Px49y49 { Px49y48, Px49y50, Px50y49, Px48y49 } CellNode (49 @ 49) (20)Px67y42 { Px68y42, Px66y42, Px67y41, Px67y43 } CellNode (67 @ 42) (20)Px62y39 { Px62y40, Px63y39, Px62y38, Px61y39 } CellNode (62 @ 39) (20)Px41y32 { Px40y32, Px41y31, Px41y33, Px42y32 } CellNode (41 @ 32) (20)Px55y43 { Px56y43, Px55y44, Px54y43, Px55y42 } CellNode (55 @ 43) (20)Px43y44 { Px43y45, Px43y43, Px44y44, Px42y44 } CellNode (43 @ 44) (20)Px31y45 { Px31y46, Px32y45, Px30y45, Px31y44 } CellNode (31 @ 45) (20)Px39y80 { Px39y79, Px39y81, Px40y80, Px38y80 } CellNode (39 @ 80) (20)Px13y70 { Px14y70, Px12y70, Px13y69, Px13y71 } CellNode (13 @ 70) (20)Px5y51 { Px6y51, Px4y51, Px5y52, Px5y50 } CellNode (5 @ 51) (20)Px22y78 { Px23y78, Px21y78, Px22y77, Px22y79 } CellNode (22 @ 78) (20)Px27y81 { Px26y81, Px27y80, Px27y82, Px28y81 } CellNode (27 @ 81) (20)Px70y45 { Px71y45, Px69y45, Px70y46, Px70y44 } CellNode (70 @ 45) (20)Px10y79 { Px10y80, Px9y79, Px11y79, Px10y78 } CellNode (10 @ 79) (20)Px73y77 { Px73y76, Px73y78, Px74y77, Px72y77 } CellNode (73 @ 77) (20)Px15y82 { Px15y83, Px16y82, Px14y82, Px15y81 } CellNode (15 @ 82) (20)Px78y80 { Px79y80, Px78y81, Px77y80, Px78y79 } CellNode (78 @ 80) (20)Px61y78 { Px62y78, Px61y77, Px60y78, Px61y79 } CellNode (61 @ 78) (20)Px66y81 { Px66y80, Px65y81, Px67y81, Px66y82 } CellNode (66 @ 81) (20)Px49y35 { Px48y35, Px50y35, Px49y34, Px49y36 } CellNode (49 @ 35) (20)Px35y24 { Px35y25, Px35y23, Px34y24 } CellNode (35 @ 24) (20)Px54y82 { Px54y83, Px53y82, Px55y82, Px54y81 } CellNode (54 @ 82) (20)Px23y25 { Px22y25, Px23y24, Px23y26, Px24y25 } CellNode (23 @ 25) (20)Px37y36 { Px37y37, Px36y36, Px38y36, Px37y35 } CellNode (37 @ 36) (20)Px47y23 { Px48y23, Px47y22, Px46y23, Px47y24 } CellNode (47 @ 23) (20)Px42y83 { Px42y84, Px43y83, Px41y83, Px42y82 } CellNode (42 @ 83) (20)Px19y61 { Px19y62, Px20y61, Px19y60, Px18y61 } CellNode (19 @ 61) (20)Px40y71 { Px40y72, Px41y71, Px39y71, Px40y70 } CellNode (40 @ 71) (20)Px52y70 { Px52y69, Px52y71, Px51y70 } CellNode (52 @ 70) (20)Px93y82 { Px93y83, Px92y82, Px94y82, Px93y81 } CellNode (93 @ 82) (20)Px62y25 { Px62y24, Px63y25, Px61y25 } CellNode (62 @ 25) (20)Px79y68 { Px79y67, Px78y68, Px79y69, Px80y68 } CellNode (79 @ 68) (20)Px81y83 { Px81y84, Px80y83, Px82y83, Px81y82 } CellNode (81 @ 83) (20)Px58y61 { Px58y62, Px59y61, Px58y60, Px57y61 } CellNode (58 @ 61) (20)Px50y26 { Px51y26, Px50y27 } CellNode (50 @ 26) (20)Px67y69 { Px68y69, Px66y69, Px67y68, Px67y70 } CellNode (67 @ 69) (20)Px46y62 { Px45y62, Px46y63, Px47y62, Px46y61 } CellNode (46 @ 62) (20)Px34y63 { Px34y64, Px34y62, Px33y63, Px35y63 } CellNode (34 @ 63) (20)Px22y64 { Px22y65, Px21y64, Px23y64, Px22y63 } CellNode (22 @ 64) (20)Px80y59 { Px81y59, Px79y59, Px80y58, Px80y60 } CellNode (80 @ 59) (20)Px73y63 { Px74y63, Px72y63, Px73y62, Px73y64 } CellNode (73 @ 63) (20)Px10y65 { Px10y64, Px9y65, Px11y65, Px10y66 } CellNode (10 @ 65) (20)Px5y78 { Px5y77, Px5y79, Px4y78, Px6y78 } CellNode (5 @ 78) (20)Px56y17 { Px56y16, Px55y17, Px57y17 } CellNode (56 @ 17) (20)Px35y10 { Px35y11, Px36y10, Px34y10, Px35y9 } CellNode (35 @ 10) (20)Px61y64 { Px61y65, Px60y64, Px62y64, Px61y63 } CellNode (61 @ 64) (20)Px44y18 { Px43y18, Px44y17, Px44y19 } CellNode (44 @ 18) (20)Px9y57 { Px8y57, Px9y56, Px10y57, Px9y58 } CellNode (9 @ 57) (20)Px28y55 { Px29y55, Px27y55, Px28y56, Px28y54 } CellNode (28 @ 55) (20)Px65y43 { Px65y44, Px66y43, Px65y42, Px64y43 } CellNode (65 @ 43) (20)Px16y56 { Px17y56, Px16y57, Px16y55 } CellNode (16 @ 56) (20)Px79y54 { Px80y54, Px78y54, Px79y55, Px79y53 } CellNode (79 @ 54) (20)Px53y44 { Px54y44, Px52y44, Px53y43, Px53y45 } CellNode (53 @ 44) (20)Px67y55 { Px67y56, Px68y55, Px66y55, Px67y54 } CellNode (67 @ 55) (20)Px41y45 { Px41y46, Px42y45, Px40y45, Px41y44 } CellNode (41 @ 45) (20)Px49y80 { Px49y79, Px49y81, Px50y80, Px48y80 } CellNode (49 @ 80) (20)Px37y81 { Px36y81, Px37y80, Px37y82, Px38y81 } CellNode (37 @ 81) (20)Px3y52 { Px3y53, Px3y51, Px2y52, Px4y52 } CellNode (3 @ 52) (20)Px25y82 { Px25y83, Px26y82, Px24y82, Px25y81 } CellNode (25 @ 82) (20)Px88y80 { Px88y79, Px88y81, Px89y80, Px87y80 } CellNode (88 @ 80) (20)Px13y83 { Px12y83, Px13y84, Px14y83, Px13y82 } CellNode (13 @ 83) (20)Px76y81 { Px76y80, Px75y81, Px76y82, Px77y81 } CellNode (76 @ 81) (20)Px59y35 { Px60y35, Px59y34, Px58y35, Px59y36 } CellNode (59 @ 35) (20)Px64y82 { Px65y82, Px64y83, Px63y82, Px64y81 } CellNode (64 @ 82) (20)Px33y25 { Px33y24, Px32y25, Px33y26, Px34y25 } CellNode (33 @ 25) (20)Px47y36 { Px47y37, Px46y36, Px48y36, Px47y35 } CellNode (47 @ 36) (20)Px21y26 { Px21y27, Px22y26, Px20y26, Px21y25 } CellNode (21 @ 26) (20)Px52y83 { Px52y82, Px53y83, Px52y84, Px51y83 } CellNode (52 @ 83) (20)Px61y9 { Px61y8, Px61y10, Px60y9, Px62y9 } CellNode (61 @ 9) (20)Px35y37 { Px34y37, Px35y36, Px36y37, Px35y38 } CellNode (35 @ 37) (20)Px72y25 { Px72y26, Px71y25, Px72y24 } CellNode (72 @ 25) (20)Px40y84 { Px41y84, Px40y83, Px39y84 } CellNode (40 @ 84) (20)Px91y83 { Px92y83, Px91y84, Px90y83, Px91y82 } CellNode (91 @ 83) (20)Px60y26 { Px60y27, Px59y26, Px61y26, Px60y25 } CellNode (60 @ 26) (20)Px74y37 { Px73y37, Px74y36, Px74y38, Px75y37 } CellNode (74 @ 37) (20)Px19y74 { Px19y73, Px19y75, Px18y74, Px20y74 } CellNode (19 @ 74) (20)Px53y30 { Px54y30, Px52y30, Px53y31, Px53y29 } CellNode (53 @ 30) (20)Px56y62 { Px55y62, Px56y63, Px57y62, Px56y61 } CellNode (56 @ 62) (20)Px39y16 { Px40y16, Px39y15, Px38y16, Px39y17 } CellNode (39 @ 16) (20)Px44y63 { Px45y63, Px44y62, Px43y63, Px44y64 } CellNode (44 @ 63) (20)Px27y17 { Px27y18, Px28y17 } CellNode (27 @ 17) (20)Px32y64 { Px32y65, Px33y64, Px31y64, Px32y63 } CellNode (32 @ 64) (20)Px46y75 { Px47y75, Px46y76, Px45y75, Px46y74 } CellNode (46 @ 75) (20)Px20y65 { Px20y66, Px20y64, Px21y65, Px19y65 } CellNode (20 @ 65) (20)Px6y70 { Px5y70, Px6y69, Px6y71, Px7y70 } CellNode (6 @ 70) (20)Px34y76 { Px35y76, Px34y77, Px33y76, Px34y75 } CellNode (34 @ 76) (20)Px97y74 { Px96y74, Px97y73, Px97y75 } CellNode (97 @ 74) (20)Px66y17 { Px67y17, Px66y18, Px66y16, Px65y17 } CellNode (66 @ 17) (20)Px71y64 { Px71y65, Px72y64, Px70y64, Px71y63 } CellNode (71 @ 64) (20)Px3y79 { Px4y79, Px2y79, Px3y78, Px3y80 } CellNode (3 @ 79) (20)Px85y75 { Px86y75, Px84y75, Px85y76, Px85y74 } CellNode (85 @ 75) (20)Px54y18 { Px54y17, Px54y19, Px53y18, Px55y18 } CellNode (54 @ 18) (20)Px8y82 { Px8y83, Px8y81, Px9y82, Px7y82 } CellNode (8 @ 82) (20)Px42y19 { Px41y19, Px42y18, Px43y19 } CellNode (42 @ 19) (20)Px59y21 { Px60y21, Px58y21, Px59y22, Px59y20 } CellNode (59 @ 21) (20)Px56y9 { Px57y9, Px56y8, Px55y9, Px56y10 } CellNode (56 @ 9) (20)Px33y11 { Px34y11, Px33y10, Px33y12 } CellNode (33 @ 11) (20)Px45y10 { Px44y10, Px45y9, Px46y10, Px45y11 } CellNode (45 @ 10) (20)Px38y55 { Px38y54, Px39y55, Px38y56, Px37y55 } CellNode (38 @ 55) (20)Px53y6 { Px54y6, Px53y5 } CellNode (53 @ 6) (20)Px26y56 { Px25y56, Px27y56, Px26y55, Px26y57 } CellNode (26 @ 56) (20)Px60y12 { Px60y13, Px59y12, Px61y12, Px60y11 } CellNode (60 @ 12) (20)Px63y44 { Px64y44, Px63y43, Px62y44, Px63y45 } CellNode (63 @ 44) (20)Px50y3 { Px50y2, Px51y3, Px49y3, Px50y4 } CellNode (50 @ 3) (20)Px77y55 { Px76y55, Px77y56, Px78y55, Px77y54 } CellNode (77 @ 55) (20)Px51y45 { Px51y46, Px52y45, Px50y45, Px51y44 } CellNode (51 @ 45) (20)Px65y56 { Px64y56, Px65y57, Px65y55, Px66y56 } CellNode (65 @ 56) (20)Px53y57 { Px54y57, Px53y58, Px52y57, Px53y56 } CellNode (53 @ 57) (20)Px32y50 { Px31y50, Px32y49, Px32y51, Px33y50 } CellNode (32 @ 50) (20)Px35y82 { Px35y83, Px36y82, Px35y81, Px34y82 } CellNode (35 @ 82) (20)Px41y58 { Px42y58, Px41y57, Px41y59, Px40y58 } CellNode (41 @ 58) (20)Px1y53 { Px1y52, Px2y53, Px1y54 } CellNode (1 @ 53) (20)Px23y83 { Px23y82, Px23y84, Px24y83, Px22y83 } CellNode (23 @ 83) (20)Px69y35 { Px70y35, Px68y35, Px69y34, Px69y36 } CellNode (69 @ 35) (20)Px71y50 { Px72y50, Px71y49, Px71y51, Px70y50 } CellNode (71 @ 50) (20)Px11y84 { Px11y83, Px12y84, Px10y84 } CellNode (11 @ 84) (20)Px74y82 { Px74y83, Px75y82, Px73y82, Px74y81 } CellNode (74 @ 82) (20)Px57y36 { Px57y37, Px58y36, Px57y35 } CellNode (57 @ 36) (20)Px3y65 { Px3y64, Px4y65, Px3y66 } CellNode (3 @ 65) (20)Px45y37 { Px45y36, Px44y37, Px46y37, Px45y38 } CellNode (45 @ 37) (20)Px59y48 { Px60y48, Px58y48, Px59y49, Px59y47 } CellNode (59 @ 48) (20)Px50y84 { Px50y83, Px51y84, Px49y84 } CellNode (50 @ 84) (20)Px48y6 { Px49y6, Px48y5 } CellNode (48 @ 6) (20)Px33y38 { Px34y38, Px32y38, Px33y39, Px33y37 } CellNode (33 @ 38) (20)Px70y26 { Px70y27, Px71y26, Px70y25, Px69y26 } CellNode (70 @ 26) (20)Px38y41 { Px37y41, Px38y42, Px38y40, Px39y41 } CellNode (38 @ 41) (20)Px24y30 { Px25y30, Px24y31, Px23y30, Px24y29 } CellNode (24 @ 30) (20)Px29y74 { Px28y74, Px29y73, Px29y75, Px30y74 } CellNode (29 @ 74) (20)Px63y30 { Px63y31, Px64y30, Px62y30, Px63y29 } CellNode (63 @ 30) (20)Px45y3 { Px44y3, Px45y4, Px45y2, Px46y3 } CellNode (45 @ 3) (20)Px72y38 { Px73y38, Px71y38, Px72y39, Px72y37 } CellNode (72 @ 38) (20)Px17y75 { Px17y76, Px18y75, Px16y75, Px17y74 } CellNode (17 @ 75) (20)Px51y31 { Px51y30, Px52y31, Px51y32, Px50y31 } CellNode (51 @ 31) (20)Px60y39 { Px60y38, Px60y40, Px61y39, Px59y39 } CellNode (60 @ 39) (20)Px37y17 { Px37y18, Px38y17, Px36y17, Px37y16 } CellNode (37 @ 17) (20)Px68y74 { Px68y73, Px67y74, Px68y75, Px69y74 } CellNode (68 @ 74) (20)Px42y64 { Px42y65, Px43y64, Px42y63, Px41y64 } CellNode (42 @ 64) (20)Px56y75 { Px56y76, Px57y75, Px55y75, Px56y74 } CellNode (56 @ 75) (20)Px30y65 { Px31y65, Px29y65, Px30y64, Px30y66 } CellNode (30 @ 65) (20)Px39y29 { Px39y30, Px38y29, Px40y29 } CellNode (39 @ 29) (20)Px44y76 { Px45y76, Px44y77, Px43y76, Px44y75 } CellNode (44 @ 76) (20)Px81y64 { Px81y65, Px82y64, Px80y64, Px81y63 } CellNode (81 @ 64) (20)Px55y10 { Px54y10, Px55y11, Px55y9, Px56y10 } CellNode (55 @ 10) (20)Px69y21 { Px69y22, Px68y21, Px70y21, Px69y20 } CellNode (69 @ 21) (20)Px32y77 { Px31y77, Px33y77, Px32y76, Px32y78 } CellNode (32 @ 77) (20)Px11y70 { Px12y70, Px10y70, Px11y71, Px11y69 } CellNode (11 @ 70) (20)Px43y11 { Px43y12, Px44y11, Px42y11, Px43y10 } CellNode (43 @ 11) (20)Px57y22 { Px56y22, Px57y21, Px57y23, Px58y22 } CellNode (57 @ 22) (20)Px20y78 { Px21y78, Px19y78, Px20y79, Px20y77 } CellNode (20 @ 78) (20)Px83y76 { Px83y77, Px82y76, Px84y76, Px83y75 } CellNode (83 @ 76) (20)Px95y75 { Px96y75, Px95y76, Px94y75, Px95y74 } CellNode (95 @ 75) (20)Px45y23 { Px46y23, Px44y23, Px45y24, Px45y22 } CellNode (45 @ 23) (20)Px48y55 { Px48y54, Px48y56, Px49y55, Px47y55 } CellNode (48 @ 55) (20)Px50y70 { Px50y71, Px49y70, Px51y70, Px50y69 } CellNode (50 @ 70) (20)Px71y77 { Px70y77, Px71y78, Px71y76, Px72y77 } CellNode (71 @ 77) (20)Px52y19 { Px53y19, Px52y18, Px51y19 } CellNode (52 @ 19) (20)Px36y56 { Px37y56, Px35y56, Px36y55, Px36y57 } CellNode (36 @ 56) (20)Px64y18 { Px63y18, Px64y17, Px64y19, Px65y18 } CellNode (64 @ 18) (20)Px6y83 { Px7y83, Px6y84, Px5y83, Px6y82 } CellNode (6 @ 83) (20)Px24y57 { Px25y57, Px24y58, Px23y57, Px24y56 } CellNode (24 @ 57) (20)Px29y60 { Px30y60, Px28y60, Px29y61, Px29y59 } CellNode (29 @ 60) (20)Px38y68 { Px38y69, Px37y68, Px39y68, Px38y67 } CellNode (38 @ 68) (20)Px75y56 { Px76y56, Px74y56, Px75y55, Px75y57 } CellNode (75 @ 56) (20)Px17y61 { Px18y61, Px16y61, Px17y62, Px17y60 } CellNode (17 @ 61) (20)Px63y57 { Px63y58, Px64y57, Px63y56, Px62y57 } CellNode (63 @ 57) (20)Px68y60 { Px69y60, Px67y60, Px68y61, Px68y59 } CellNode (68 @ 60) (20)Px77y68 { Px77y69, Px76y68, Px78y68, Px77y67 } CellNode (77 @ 68) (20)Px42y50 { Px41y50, Px42y49, Px42y51, Px43y50 } CellNode (42 @ 50) (20)Px51y58 { Px50y58, Px51y57, Px52y58, Px51y59 } CellNode (51 @ 58) (20)Px30y51 { Px31y51, Px29y51, Px30y52, Px30y50 } CellNode (30 @ 51) (20)Px55y37 { Px56y37, Px54y37, Px55y36, Px55y38 } CellNode (55 @ 37) (20)Px60y84 { Px60y83, Px59y84 } CellNode (60 @ 84) (20)Px34y30 { Px34y29, Px34y31, Px35y30, Px33y30 } CellNode (34 @ 30) (20)Px48y41 { Px48y42, Px47y41, Px48y40, Px49y41 } CellNode (48 @ 41) (20)Px69y48 { Px69y49, Px68y48, Px70y48, Px69y47 } CellNode (69 @ 48) (20)Px22y31 { Px22y30, Px21y31, Px22y32, Px23y31 } CellNode (22 @ 31) (20)Px57y49 { Px56y49, Px57y48, Px57y50, Px58y49 } CellNode (57 @ 49) (20)Px36y42 { Px37y42, Px35y42, Px36y43, Px36y41 } CellNode (36 @ 42) (20)Px31y39 { Px30y39, Px31y38, Px31y40, Px32y39 } CellNode (31 @ 39) (20)Px73y30 { Px73y29, Px73y31, Px74y30, Px72y30 } CellNode (73 @ 30) (20)Px43y38 { Px43y39, Px44y38, Px43y37, Px42y38 } CellNode (43 @ 38) (20)Px27y75 { Px27y76, Px28y75, Px27y74, Px26y75 } CellNode (27 @ 75) (20)Px61y31 { Px60y31, Px61y30, Px61y32, Px62y31 } CellNode (61 @ 31) (20)Px15y76 { Px15y75, Px15y77, Px16y76, Px14y76 } CellNode (15 @ 76) (20)Px78y74 { Px77y74, Px78y73, Px78y75, Px79y74 } CellNode (78 @ 74) (20)Px7y57 { Px8y57, Px6y57, Px7y58, Px7y56 } CellNode (7 @ 57) (20)Px66y75 { Px66y76, Px67y75, Px66y74, Px65y75 } CellNode (66 @ 75) (20)Px49y29 { Px49y30, Px50y29, Px49y28, Px48y29 } CellNode (49 @ 29) (20)Px54y76 { Px54y75, Px54y77, Px55y76, Px53y76 } CellNode (54 @ 76) (20)Px28y22 { Px28y21, Px27y22, Px28y23, Px29y22 } CellNode (28 @ 22) (20)Px42y77 { Px42y78, Px41y77, Px42y76, Px43y77 } CellNode (42 @ 77) (20)Px47y80 { Px47y79, Px48y80, Px47y81, Px46y80 } CellNode (47 @ 80) (20)Px21y70 { Px21y71, Px22y70, Px20y70, Px21y69 } CellNode (21 @ 70) (20)Px30y78 { Px30y79, Px31y78, Px29y78, Px30y77 } CellNode (30 @ 78) (20)Px93y76 { Px92y76, Px93y77, Px94y76, Px93y75 } CellNode (93 @ 76) (20)Px67y22 { Px66y22, Px67y21, Px67y23, Px68y22 } CellNode (67 @ 22) (20)Px41y12 { Px40y12, Px41y13, Px42y12, Px41y11 } CellNode (41 @ 12) (20)Px81y77 { Px82y77, Px81y76, Px80y77, Px81y78 } CellNode (81 @ 77) (20)Px4y84 { Px4y83, Px3y84, Px5y84 } CellNode (4 @ 84) (20)Px86y80 { Px86y79, Px87y80, Px86y81, Px85y80 } CellNode (86 @ 80) (20)Px55y23 { Px54y23, Px56y23, Px55y24 } CellNode (55 @ 23) (20)Px43y24 { Px43y23, Px44y24, Px43y25, Px42y24 } CellNode (43 @ 24) (20)Px31y25 { Px31y26, Px30y25, Px32y25, Px31y24 } CellNode (31 @ 25) (20)Px39y60 { Px39y61, Px40y60, Px38y60, Px39y59 } CellNode (39 @ 60) (20)Px34y57 { Px34y58, Px35y57, Px34y56, Px33y57 } CellNode (34 @ 57) (20)Px48y68 { Px49y68, Px48y69, Px48y67, Px47y68 } CellNode (48 @ 68) (20)Px27y61 { Px27y62, Px28y61, Px26y61, Px27y60 } CellNode (27 @ 61) (20)Px22y58 { Px23y58, Px22y57, Px21y58, Px22y59 } CellNode (22 @ 58) (20)Px36y69 { Px36y70, Px37y69, Px35y69, Px36y68 } CellNode (36 @ 69) (20)Px15y62 { Px14y62, Px16y62, Px15y61, Px15y63 } CellNode (15 @ 62) (20)Px78y60 { Px79y60, Px78y61, Px77y60, Px78y59 } CellNode (78 @ 60) (20)Px52y50 { Px53y50, Px51y50, Px52y49, Px52y51 } CellNode (52 @ 50) (20)Px10y59 { Px10y60, Px11y59, Px10y58, Px9y59 } CellNode (10 @ 59) (20)Px66y61 { Px67y61, Px66y62, Px65y61, Px66y60 } CellNode (66 @ 61) (20)Px61y58 { Px62y58, Px60y58, Px61y57, Px61y59 } CellNode (61 @ 58) (20)Px40y51 { Px40y52, Px39y51, Px41y51, Px40y50 } CellNode (40 @ 51) (20)Px75y69 { Px75y70, Px76y69, Px74y69, Px75y68 } CellNode (75 @ 69) (20)Px73y57 { Px73y58, Px74y57, Px73y56, Px72y57 } CellNode (73 @ 57) (20)Px49y15 { Px49y14, Px49y16, Px50y15 } CellNode (49 @ 15) (20)Px54y62 { Px53y62, Px54y63, Px54y61, Px55y62 } CellNode (54 @ 62) (20)Px28y49 { Px29y49, Px28y48, Px27y49, Px28y50 } CellNode (28 @ 49) (20)Px4y70 { Px5y70, Px3y70, Px4y71, Px4y69 } CellNode (4 @ 70) (20)Px62y7 { Px63y7, Px62y6, Px62y8, Px61y7 } CellNode (62 @ 7) (20)Px58y41 { Px59y41, Px58y40, Px57y41, Px58y42 } CellNode (58 @ 41) (20)Px67y49 { Px66y49, Px67y48, Px67y50, Px68y49 } CellNode (67 @ 49) (20)Px41y39 { Px41y38, Px40y39, Px41y40, Px42y39 } CellNode (41 @ 39) (20)Px46y42 { Px47y42, Px46y43, Px46y41, Px45y42 } CellNode (46 @ 42) (20)Px20y32 { Px20y33, Px21y32, Px20y31, Px19y32 } CellNode (20 @ 32) (20)Px34y43 { Px33y43, Px34y42, Px35y43, Px34y44 } CellNode (34 @ 43) (20)Px71y31 { Px71y30, Px70y31, Px71y32, Px72y31 } CellNode (71 @ 31) (20)Px73y43 { Px74y43, Px73y44, Px73y42 } CellNode (73 @ 43) (20)Px18y80 { Px17y80, Px18y79, Px19y80, Px18y81 } CellNode (18 @ 80) (20)Px5y58 { Px6y58, Px5y59, Px4y58, Px5y57 } CellNode (5 @ 58) (20)Px59y29 { Px59y30, Px60y29, Px59y28, Px58y29 } CellNode (59 @ 29) (20)Px61y44 { Px61y45, Px60y44, Px62y44, Px61y43 } CellNode (61 @ 44) (20)Px38y22 { Px39y22, Px37y22, Px38y21, Px38y23 } CellNode (38 @ 22) (20)Px13y77 { Px14y77, Px12y77, Px13y76, Px13y78 } CellNode (13 @ 77) (20)Px57y80 { Px56y80, Px57y79, Px58y80, Px57y81 } CellNode (57 @ 80) (20)Px26y23 { Px26y24, Px27y23, Px25y23, Px26y22 } CellNode (26 @ 23) (20)Px31y70 { Px31y69, Px31y71, Px32y70, Px30y70 } CellNode (31 @ 70) (20)Px52y77 { Px53y77, Px51y77, Px52y76, Px52y78 } CellNode (52 @ 77) (20)Px45y81 { Px45y82, Px44y81, Px46y81, Px45y80 } CellNode (45 @ 81) (20)Px40y78 { Px40y79, Px41y78, Px39y78, Px40y77 } CellNode (40 @ 78) (20)Px28y35 { Px28y36, Px27y35, Px29y35, Px28y34 } CellNode (28 @ 35) (20)Px96y80 { Px95y80, Px96y79, Px96y81, Px97y80 } CellNode (96 @ 80) (20)Px65y23 { Px65y24, Px66y23, Px65y22, Px64y23 } CellNode (65 @ 23) (20)Px57y7 { Px57y8, Px57y6, Px58y7, Px56y7 } CellNode (57 @ 7) (20)Px70y70 { Px70y69, Px70y71, Px71y70, Px69y70 } CellNode (70 @ 70) (20)Px53y24 { Px54y24, Px52y24, Px53y23 } CellNode (53 @ 24) (20)Px19y68 { Px19y69, Px20y68, Px18y68, Px19y67 } CellNode (19 @ 68) (20)Px91y77 { Px92y77, Px91y76, Px90y77, Px91y78 } CellNode (91 @ 77) (20)Px54y4 { Px53y4, Px55y4, Px54y3, Px54y5 } CellNode (54 @ 4) (20)Px67y35 { Px67y36, Px66y35, Px68y35, Px67y34 } CellNode (67 @ 35) (20)Px49y60 { Px49y61, Px50y60, Px48y60, Px49y59 } CellNode (49 @ 60) (20)Px72y82 { Px73y82, Px72y83, Px71y82, Px72y81 } CellNode (72 @ 82) (20)Px21y83 { Px21y84, Px20y83, Px21y82, Px22y83 } CellNode (21 @ 83) (20)Px51y1 { Px51y2, Px52y1, Px50y1 } CellNode (51 @ 1) (20)Px37y61 { Px36y61, Px37y62, Px38y61, Px37y60 } CellNode (37 @ 61) (20)Px84y81 { Px84y82, Px83y81, Px85y81, Px84y80 } CellNode (84 @ 81) (20)Px46y69 { Px46y68, Px46y70, Px47y69, Px45y69 } CellNode (46 @ 69) (20)Px41y25 { Px41y26, Px42y25, Px40y25, Px41y24 } CellNode (41 @ 25) (20)Px20y59 { Px20y60, Px21y59, Px20y58, Px19y59 } CellNode (20 @ 59) (20)Px25y62 { Px25y63, Px25y61, Px24y62, Px26y62 } CellNode (25 @ 62) (20)Px39y73 { Px39y72, Px39y74, Px40y73, Px38y73 } CellNode (39 @ 73) (20)Px33y82 { Px33y83, Px34y82, Px32y82, Px33y81 } CellNode (33 @ 82) (20)Px13y63 { Px14y63, Px12y63, Px13y64, Px13y62 } CellNode (13 @ 63) (20)Px76y61 { Px75y61, Px76y62, Px77y61, Px76y60 } CellNode (76 @ 61) (20)Px8y76 { Px8y77, Px9y76, Px7y76, Px8y75 } CellNode (8 @ 76) (20)Px50y51 { Px50y52, Px51y51, Px49y51, Px50y50 } CellNode (50 @ 51) (20)Px64y62 { Px64y63, Px64y61, Px63y62, Px65y62 } CellNode (64 @ 62) (20)Px78y73 { Px78y72, Px78y74, Px79y73, Px77y73 } CellNode (78 @ 73) (20)Px47y16 { Px48y16, Px47y17, Px46y16, Px47y15 } CellNode (47 @ 16) (20)Px52y63 { Px53y63, Px51y63, Px52y64, Px52y62 } CellNode (52 @ 63) (20)Px35y17 { Px35y16, Px35y18, Px36y17, Px34y17 } CellNode (35 @ 17) (20)Px38y49 { Px39y49, Px37y49, Px38y48, Px38y50 } CellNode (38 @ 49) (20)Px40y64 { Px41y64, Px40y63, Px40y65, Px39y64 } CellNode (40 @ 64) (20)Px2y71 { Px3y71, Px1y71, Px2y72, Px2y70 } CellNode (2 @ 71) (20)Px56y42 { Px56y43, Px57y42, Px56y41, Px55y42 } CellNode (56 @ 42) (20)Px49y4 { Px48y4, Px49y5, Px49y3, Px50y4 } CellNode (49 @ 4) (20)Px53y10 { Px53y11, Px54y10 } CellNode (53 @ 10) (20)Px44y43 { Px45y43, Px44y42, Px43y43, Px44y44 } CellNode (44 @ 43) (20)Px46y1 { Px46y2, Px47y1, Px45y1 } CellNode (46 @ 1) (20)Px58y54 { Px59y54, Px58y55, Px57y54, Px58y53 } CellNode (58 @ 54) (20)Px32y44 { Px33y44, Px32y45, Px32y43, Px31y44 } CellNode (32 @ 44) (20)Px46y55 { Px45y55, Px46y56, Px46y54, Px47y55 } CellNode (46 @ 55) (20)Px6y50 { Px6y49, Px6y51, Px7y50, Px5y50 } CellNode (6 @ 50) (20)Px28y80 { Px27y80, Px28y79, Px28y81, Px29y80 } CellNode (28 @ 80) (20)Px16y81 { Px16y82, Px17y81, Px16y80, Px15y81 } CellNode (16 @ 81) (20)Px3y59 { Px3y58, Px2y59, Px3y60, Px4y59 } CellNode (3 @ 59) (20)Px8y62 { Px8y61, Px9y62, Px7y62, Px8y63 } CellNode (8 @ 62) (20)Px67y80 { Px66y80, Px67y79, Px67y81, Px68y80 } CellNode (67 @ 80) (20)Px55y81 { Px55y82, Px56y81, Px54y81, Px55y80 } CellNode (55 @ 81) (20)Px24y24 { Px24y23, Px23y24, Px24y25, Px25y24 } CellNode (24 @ 24) (20)Px38y35 { Px39y35, Px38y36, Px38y34, Px37y35 } CellNode (38 @ 35) (20)Px43y82 { Px43y81, Px43y83, Px44y82, Px42y82 } CellNode (43 @ 82) (20)Px31y83 { Px31y84, Px30y83, Px31y82, Px32y83 } CellNode (31 @ 83) (20)Px94y81 { Px94y82, Px95y81, Px94y80, Px93y81 } CellNode (94 @ 81) (20)Px37y8 { Px36y8, Px37y9, Px37y7, Px38y8 } CellNode (37 @ 8) (20)Px63y24 { Px62y24, Px63y23, Px63y25, Px64y24 } CellNode (63 @ 24) (20)Px82y82 { Px81y82, Px83y82, Px82y83, Px82y81 } CellNode (82 @ 82) (20)Px51y25 { Px51y26, Px52y25, Px51y24 } CellNode (51 @ 25) (20)Px65y36 { Px65y37, Px65y35, Px66y36, Px64y36 } CellNode (65 @ 36) (20)Px17y69 { Px17y68, Px17y70, Px18y69, Px16y69 } CellNode (17 @ 69) (20)Px70y83 { Px69y83, Px70y84, Px70y82, Px71y83 } CellNode (70 @ 83) (20)Px53y37 { Px54y37, Px53y38, Px52y37, Px53y36 } CellNode (53 @ 37) (20)Px56y69 { Px56y68, Px55y69 } CellNode (56 @ 69) (20)Px32y30 { Px32y29, Px33y30, Px31y30, Px32y31 } CellNode (32 @ 30) (20)Px35y62 { Px36y62, Px34y62, Px35y61, Px35y63 } CellNode (35 @ 62) (20)Px49y73 { Px49y72, Px49y74, Px48y73, Px50y73 } CellNode (49 @ 73) (20)Px23y63 { Px23y64, Px24y63, Px23y62, Px22y63 } CellNode (23 @ 63) (20)Px37y74 { Px38y74, Px36y74, Px37y75, Px37y73 } CellNode (37 @ 74) (20)Px11y64 { Px10y64, Px11y63, Px11y65, Px12y64 } CellNode (11 @ 64) (20)Px74y62 { Px75y62, Px73y62, Px74y61, Px74y63 } CellNode (74 @ 62) (20)Px6y77 { Px5y77, Px6y76, Px6y78, Px7y77 } CellNode (6 @ 77) (20)Px25y75 { Px26y75, Px24y75, Px25y76, Px25y74 } CellNode (25 @ 75) (20)Px62y63 { Px62y64, Px63y63, Px61y63, Px62y62 } CellNode (62 @ 63) (20)Px88y73 { Px87y73, Px88y74, Px89y73 } CellNode (88 @ 73) (20)Px76y74 { Px77y74, Px76y75, Px75y74, Px76y73 } CellNode (76 @ 74) (20)Px45y17 { Px44y17, Px46y17, Px45y16 } CellNode (45 @ 17) (20)Px57y16 { Px57y17, Px56y16, Px57y15 } CellNode (57 @ 16) (20)Px50y64 { Px49y64, Px50y63, Px50y65, Px51y64 } CellNode (50 @ 64) (20)Px64y75 { Px64y76, Px65y75, Px63y75, Px64y74 } CellNode (64 @ 75) (20)Px33y18 { Px34y18, Px32y18, Px33y19, Px33y17 } CellNode (33 @ 18) (20)Px29y54 { Px29y53, Px29y55, Px30y54, Px28y54 } CellNode (29 @ 54) (20)Px63y10 { Px64y10, Px62y10, Px63y11, Px63y9 } CellNode (63 @ 10) (20)Px17y55 { Px17y56, Px18y55, Px16y55 } CellNode (17 @ 55) (20)Px51y11 { Px51y12, Px50y11, Px52y11, Px51y10 } CellNode (51 @ 11) (20)Px60y19 { Px60y20, Px61y19, Px59y19, Px60y18 } CellNode (60 @ 19) (20)Px68y54 { Px68y53, Px69y54, Px68y55, Px67y54 } CellNode (68 @ 54) (20)Px42y44 { Px42y45, Px43y44, Px42y43, Px41y44 } CellNode (42 @ 44) (20)Px56y55 { Px57y55, Px55y55, Px56y54, Px56y56 } CellNode (56 @ 55) (20)Px30y45 { Px29y45, Px30y44, Px30y46, Px31y45 } CellNode (30 @ 45) (20)Px44y56 { Px44y57, Px45y56, Px43y56, Px44y55 } CellNode (44 @ 56) (20)Px4y51 { Px5y51, Px3y51, Px4y50, Px4y52 } CellNode (4 @ 51) (20)Px32y57 { Px33y57, Px32y56, Px32y58, Px31y57 } CellNode (32 @ 57) (20)Px11y50 { Px11y51, Px11y49, Px10y50 } CellNode (11 @ 50) (20)Px14y82 { Px13y82, Px14y83, Px15y82, Px14y81 } CellNode (14 @ 82) (20)Px71y57 { Px70y57, Px71y56, Px71y58, Px72y57 } CellNode (71 @ 57) (20)Px48y35 { Px48y36, Px49y35, Px48y34, Px47y35 } CellNode (48 @ 35) (20)Px53y82 { Px53y81, Px53y83, Px54y82, Px52y82 } CellNode (53 @ 82) (20)Px36y36 { Px37y36, Px35y36, Px36y35, Px36y37 } CellNode (36 @ 36) (20)Px41y83 { Px42y83, Px40y83, Px41y82, Px41y84 } CellNode (41 @ 83) (20)Px29y40 { Px28y40, Px29y41, Px29y39, Px30y40 } CellNode (29 @ 40) (20)Px92y82 { Px92y81, Px92y83, Px93y82, Px91y82 } CellNode (92 @ 82) (20)Px75y36 { Px74y36, Px75y35, Px75y37, Px76y36 } CellNode (75 @ 36) (20)Px80y83 { Px79y83, Px81y83, Px80y82, Px80y84 } CellNode (80 @ 83) (20)Px68y40 { Px69y40, Px67y40, Px68y39, Px68y41 } CellNode (68 @ 40) (20)Px63y37 { Px64y37, Px63y38, Px63y36, Px62y37 } CellNode (63 @ 37) (20)Px42y30 { Px42y29, Px43y30, Px41y30, Px42y31 } CellNode (42 @ 30) (20)Px42y7 { Px42y8, Px42y6, Px43y7, Px41y7 } CellNode (42 @ 7) (20)Px59y73 { Px59y74, Px59y72, Px60y73 } CellNode (59 @ 73) (20)Px30y31 { Px30y32, Px29y31, Px31y31, Px30y30 } CellNode (30 @ 31) (20)Px51y38 { Px51y37, Px52y38, Px50y38, Px51y39 } CellNode (51 @ 38) (20)Px47y74 { Px48y74, Px47y75, Px47y73, Px46y74 } CellNode (47 @ 74) (20)Px21y64 { Px22y64, Px21y63, Px20y64, Px21y65 } CellNode (21 @ 64) (20)Px35y75 { Px35y74, Px35y76, Px36y75, Px34y75 } CellNode (35 @ 75) (20)Px67y16 { Px67y17, Px66y16, Px67y15 } CellNode (67 @ 16) (20)Px18y29 { Px18y28, Px18y30, Px19y29, Px17y29 } CellNode (18 @ 29) (20)Px4y78 { Px4y79, Px5y78, Px4y77, Px3y78 } CellNode (4 @ 78) (20)Px23y76 { Px24y76, Px22y76, Px23y75, Px23y77 } CellNode (23 @ 76) (20)Px69y28 { Px70y28, Px68y28, Px69y29, Px69y27 } CellNode (69 @ 28) (20)Px86y74 { Px86y75, Px87y74, Px86y73, Px85y74 } CellNode (86 @ 74) (20)Px11y77 { Px12y77, Px11y78, Px10y77, Px11y76 } CellNode (11 @ 77) (20)Px74y75 { Px74y76, Px73y75, Px75y75, Px74y74 } CellNode (74 @ 75) (20)Px57y29 { Px57y28, Px57y30, Px58y29, Px56y29 } CellNode (57 @ 29) (20)Px43y18 { Px43y19, Px44y18, Px42y18, Px43y17 } CellNode (43 @ 18) (20)Px62y76 { Px61y76, Px62y77, Px62y75, Px63y76 } CellNode (62 @ 76) (20)Px39y54 { Px39y53, Px39y55, Px40y54, Px38y54 } CellNode (39 @ 54) (20)Px31y19 { Px30y19, Px31y20, Px32y19, Px31y18 } CellNode (31 @ 19) (20)Px55y17 { Px55y16, Px54y17, Px55y18, Px56y17 } CellNode (55 @ 17) (20)Px50y77 { Px51y77, Px49y77, Px50y78, Px50y76 } CellNode (50 @ 77) (20)Px63y5 { Px64y5, Px63y4, Px62y5, Px63y6 } CellNode (63 @ 5) (20)Px9y81 { Px9y80, Px8y81, Px10y81, Px9y82 } CellNode (9 @ 81) (20)Px60y64 { Px61y64, Px59y64, Px60y63, Px60y65 } CellNode (60 @ 64) (20)Px70y19 { Px69y19, Px70y20, Px70y18 } CellNode (70 @ 19) (20)Px61y11 { Px61y10, Px62y11, Px61y12, Px60y11 } CellNode (61 @ 11) (20)Px34y10 { Px34y11, Px34y9, Px35y10, Px33y10 } CellNode (34 @ 10) (20)Px29y67 { Px28y67, Px29y66, Px30y67 } CellNode (29 @ 67) (20)Px78y54 { Px77y54, Px78y55, Px79y54, Px78y53 } CellNode (78 @ 54) (20)Px66y55 { Px67y55, Px65y55, Px66y54, Px66y56 } CellNode (66 @ 55) (20)Px27y55 { Px28y55, Px27y54, Px26y55, Px27y56 } CellNode (27 @ 55) (20)Px60y2 { Px60y1, Px61y2, Px59y2, Px60y3 } CellNode (60 @ 2) (20)Px54y56 { Px55y56, Px54y57, Px53y56, Px54y55 } CellNode (54 @ 56) (20)Px68y67 { Px69y67, Px67y67, Px68y68, Px68y66 } CellNode (68 @ 67) (20)Px47y60 { Px47y59, Px48y60, Px46y60, Px47y61 } CellNode (47 @ 60) (20)Px42y57 { Px41y57, Px42y56, Px42y58, Px43y57 } CellNode (42 @ 57) (20)Px30y58 { Px31y58, Px30y59, Px29y58, Px30y57 } CellNode (30 @ 58) (20)Px4y64 { Px3y64, Px5y64, Px4y65 } CellNode (4 @ 64) (20)Px60y50 { Px61y50, Px60y51, Px59y50, Px60y49 } CellNode (60 @ 50) (20)Px46y36 { Px47y36, Px45y36, Px46y35, Px46y37 } CellNode (46 @ 36) (20)Px58y5 { Px57y5, Px58y6, Px58y4, Px59y5 } CellNode (58 @ 5) (20)Px34y37 { Px34y38, Px35y37, Px33y37, Px34y36 } CellNode (34 @ 37) (20)Px48y48 { Px47y48, Px49y48, Px48y47, Px48y49 } CellNode (48 @ 48) (20)Px39y40 { Px40y40, Px38y40, Px39y39, Px39y41 } CellNode (39 @ 40) (20)Px27y41 { Px27y40, Px28y41 } CellNode (27 @ 41) (20)Px55y2 { Px54y2, Px55y3, Px56y2, Px55y1 } CellNode (55 @ 2) (20)Px36y49 { Px37y49, Px35y49, Px36y48, Px36y50 } CellNode (36 @ 49) (20)Px90y83 { Px91y83, Px89y83, Px90y82, Px90y84 } CellNode (90 @ 83) (20)Px73y37 { Px73y38, Px74y37, Px72y37, Px73y36 } CellNode (73 @ 37) (20)Px18y74 { Px18y75, Px19y74, Px18y73, Px17y74 } CellNode (18 @ 74) (20)Px52y30 { Px51y30, Px52y29, Px52y31, Px53y30 } CellNode (52 @ 30) (20)Px61y38 { Px60y38, Px61y37, Px62y38, Px61y39 } CellNode (61 @ 38) (20)Px66y41 { Px66y42, Px67y41, Px65y41, Px66y40 } CellNode (66 @ 41) (20)Px40y31 { Px40y32, Px41y31, Px39y31, Px40y30 } CellNode (40 @ 31) (20)Px75y49 { Px75y48, Px75y50, Px74y49 } CellNode (75 @ 49) (20)Px54y42 { Px55y42, Px54y41, Px54y43, Px53y42 } CellNode (54 @ 42) (20)Px57y74 { Px56y74, Px57y73, Px57y75 } CellNode (57 @ 74) (20)Px45y75 { Px45y74, Px45y76, Px46y75, Px44y75 } CellNode (45 @ 75) (20)Px28y29 { Px28y28, Px27y29, Px28y30, Px29y29 } CellNode (28 @ 29) (20)Px33y76 { Px34y76, Px32y76, Px33y75, Px33y77 } CellNode (33 @ 76) (20)Px96y74 { Px96y75, Px97y74, Px96y73, Px95y74 } CellNode (96 @ 74) (20)Px26y80 { Px26y81, Px27y80, Px25y80, Px26y79 } CellNode (26 @ 80) (20)Px58y21 { Px59y21, Px57y21, Px58y20, Px58y22 } CellNode (58 @ 21) (20)Px67y29 { Px67y28, Px66y29, Px67y30, Px68y29 } CellNode (67 @ 29) (20)Px21y77 { Px22y77, Px21y78, Px20y77, Px21y76 } CellNode (21 @ 77) (20)Px46y22 { Px47y22, Px46y23, Px45y22 } CellNode (46 @ 22) (20)Px72y76 { Px73y76, Px72y75, Px71y76, Px72y77 } CellNode (72 @ 76) (20)Px84y75 { Px83y75, Px84y76, Px85y75, Px84y74 } CellNode (84 @ 75) (20)Px41y19 { Px40y19, Px42y19, Px41y18 } CellNode (41 @ 19) (20)Px34y23 { Px33y23, Px34y24, Px35y23 } CellNode (34 @ 23) (20)Px60y77 { Px60y78, Px61y77, Px60y76 } CellNode (60 @ 77) (20)Px53y18 { Px53y19, Px54y18, Px52y18, Px53y17 } CellNode (53 @ 18) (20)Px7y82 { Px7y83, Px8y82, Px7y81, Px6y82 } CellNode (7 @ 82) (20)Px65y80 { Px66y80, Px64y80, Px65y81, Px65y79 } CellNode (65 @ 80) (20)Px25y56 { Px25y57, Px26y56, Px25y55, Px24y56 } CellNode (25 @ 56) (20)Px22y24 { Px22y25, Px23y24, Px21y24, Px22y23 } CellNode (22 @ 24) (20)Px39y67 { Px39y68, Px40y67, Px38y67, Px39y66 } CellNode (39 @ 67) (20)Px40y3 { Px39y3, Px40y4, Px40y2, Px41y3 } CellNode (40 @ 3) (20)Px18y60 { Px18y59, Px19y60, Px18y61, Px17y60 } CellNode (18 @ 60) (20)Px61y24 { Px61y25, Px62y24, Px60y24, Px61y23 } CellNode (61 @ 24) (20)Px64y56 { Px64y57, Px65y56, Px64y55, Px63y56 } CellNode (64 @ 56) (20)Px15y69 { Px14y69, Px15y68, Px15y70, Px16y69 } CellNode (15 @ 69) (20)Px78y67 { Px79y67, Px78y68, Px77y67, Px78y66 } CellNode (78 @ 67) (20)Px52y57 { Px53y57, Px52y56, Px51y57, Px52y58 } CellNode (52 @ 57) (20)Px57y60 { Px57y59, Px58y60, Px57y61, Px56y60 } CellNode (57 @ 60) (20)Px66y68 { Px67y68, Px66y69, Px65y68, Px66y67 } CellNode (66 @ 68) (20)Px31y50 { Px31y49, Px31y51, Px32y50, Px30y50 } CellNode (31 @ 50) (20)Px40y58 { Px40y59, Px39y58, Px41y58, Px40y57 } CellNode (40 @ 58) (20)Px45y61 { Px44y61, Px45y62, Px45y60, Px46y61 } CellNode (45 @ 61) (20)Px54y69 { Px53y69, Px54y68, Px55y69 } CellNode (54 @ 69) (20)Px33y62 { Px34y62, Px33y63, Px32y62, Px33y61 } CellNode (33 @ 62) (20)Px70y50 { Px70y49, Px70y51, Px69y50, Px71y50 } CellNode (70 @ 50) (20)Px72y62 { Px73y62, Px72y63, Px71y62, Px72y61 } CellNode (72 @ 62) (20)Px49y40 { Px50y40, Px48y40, Px49y39, Px49y41 } CellNode (49 @ 40) (20)Px58y48 { Px59y48, Px57y48, Px58y47, Px58y49 } CellNode (58 @ 48) (20)Px37y41 { Px37y42, Px38y41, Px37y40, Px36y41 } CellNode (37 @ 41) (20)Px38y6 { Px39y6, Px38y7, Px37y6, Px38y5 } CellNode (38 @ 6) (20)Px46y49 { Px46y50, Px47y49, Px46y48, Px45y49 } CellNode (46 @ 49) (20)Px32y38 { Px32y37, Px31y38, Px32y39, Px33y38 } CellNode (32 @ 38) (20)Px76y41 { Px75y41, Px76y40 } CellNode (76 @ 41) (20)Px71y38 { Px71y37, Px70y38, Px71y39, Px72y38 } CellNode (71 @ 38) (20)Px50y31 { Px50y32, Px51y31, Px49y31, Px50y30 } CellNode (50 @ 31) (20)Px8y56 { Px8y57, Px9y56, Px8y55, Px7y56 } CellNode (8 @ 56) (20)Px64y42 { Px64y43, Px64y41, Px65y42, Px63y42 } CellNode (64 @ 42) (20)Px52y43 { Px53y43, Px52y44, Px51y43, Px52y42 } CellNode (52 @ 43) (20)Px29y21 { Px30y21, Px28y21, Px29y20, Px29y22 } CellNode (29 @ 21) (20)Px38y29 { Px38y30, Px37y29, Px39y29 } CellNode (38 @ 29) (20)Px40y44 { Px40y43, Px40y45, Px39y44, Px41y44 } CellNode (40 @ 44) (20)Px43y76 { Px44y76, Px42y76, Px43y75, Px43y77 } CellNode (43 @ 76) (20)Px31y77 { Px31y78, Px32y77, Px30y77, Px31y76 } CellNode (31 @ 77) (20)Px36y80 { Px36y81, Px37y80, Px35y80, Px36y79 } CellNode (36 @ 80) (20)Px19y34 { Px19y35, Px18y34, Px20y34, Px19y33 } CellNode (19 @ 34) (20)Px68y21 { Px69y21, Px68y20, Px67y21, Px68y22 } CellNode (68 @ 21) (20)Px82y76 { Px83y76, Px82y75, Px81y76, Px82y77 } CellNode (82 @ 76) (20)Px5y83 { Px4y83, Px5y82, Px5y84, Px6y83 } CellNode (5 @ 83) (20)Px24y81 { Px24y82, Px25y81, Px23y81, Px24y80 } CellNode (24 @ 81) (20)Px56y22 { Px56y21, Px57y22, Px56y23 } CellNode (56 @ 22) (20)Px70y77 { Px70y78, Px71y77, Px69y77, Px70y76 } CellNode (70 @ 77) (20)Px12y82 { Px11y82, Px12y83, Px12y81, Px13y82 } CellNode (12 @ 82) (20)Px58y34 { Px59y34, Px57y34, Px58y35, Px58y33 } CellNode (58 @ 34) (20)Px75y80 { Px76y80, Px74y80, Px75y81, Px75y79 } CellNode (75 @ 80) (20)Px63y81 { Px64y81, Px62y81, Px63y82, Px63y80 } CellNode (63 @ 81) (20)Px32y24 { Px33y24, Px32y25, Px32y23, Px31y24 } CellNode (32 @ 24) (20)Px44y23 { Px44y22, Px43y23, Px44y24, Px45y23 } CellNode (44 @ 23) (20)Px49y67 { Px49y68, Px50y67, Px48y67, Px49y66 } CellNode (49 @ 67) (20)Px51y82 { Px50y82, Px52y82, Px51y81, Px51y83 } CellNode (51 @ 82) (20)Px28y60 { Px28y59, Px28y61, Px29y60, Px27y60 } CellNode (28 @ 60) (20)Px51y8 { Px51y9 } CellNode (51 @ 8) (20)Px20y25 { Px20y26, Px19y25, Px21y25, Px20y24 } CellNode (20 @ 25) (20)Px71y24 { Px70y24, Px71y25, Px72y24 } CellNode (71 @ 24) (20)Px16y61 { Px17y61, Px16y60, Px15y61, Px16y62 } CellNode (16 @ 61) (20)Px37y68 { Px36y68, Px37y69, Px38y68, Px37y67 } CellNode (37 @ 68) (20)Px10y70 { Px11y70, Px10y69, Px9y70, Px10y71 } CellNode (10 @ 70) (20)Px2y51 { Px3y51, Px1y51, Px2y52, Px2y50 } CellNode (2 @ 51) (20)Px67y60 { Px67y59, Px67y61, Px68y60, Px66y60 } CellNode (67 @ 60) (20)Px76y68 { Px75y68, Px76y69, Px77y68, Px76y67 } CellNode (76 @ 68) (20)Px55y61 { Px56y61, Px55y60, Px54y61, Px55y62 } CellNode (55 @ 61) (20)Px50y58 { Px50y59, Px51y58, Px50y57, Px49y58 } CellNode (50 @ 58) (20)Px64y69 { Px63y69, Px64y68, Px64y70, Px65y69 } CellNode (64 @ 69) (20)Px69y72 { Px69y71, Px70y72, Px68y72, Px69y73 } CellNode (69 @ 72) (20)Px38y15 { Px39y15, Px38y16, Px37y15, Px38y14 } CellNode (38 @ 15) (20)Px43y62 { Px44y62, Px43y63, Px42y62, Px43y61 } CellNode (43 @ 62) (20)Px31y63 { Px30y63, Px31y62, Px32y63, Px31y64 } CellNode (31 @ 63) (20)Px65y16 { Px65y15, Px66y16, Px64y16, Px65y17 } CellNode (65 @ 16) (20)Px68y48 { Px69y48, Px68y47, Px67y48, Px68y49 } CellNode (68 @ 48) (20)Px70y63 { Px71y63, Px70y62, Px70y64, Px69y63 } CellNode (70 @ 63) (20)Px47y41 { Px47y42, Px48y41, Px47y40, Px46y41 } CellNode (47 @ 41) (20)Px2y78 { Px2y79, Px1y78, Px3y78, Px2y77 } CellNode (2 @ 78) (20)Px56y49 { Px56y50, Px57y49, Px56y48, Px55y49 } CellNode (56 @ 49) (20)Px35y42 { Px36y42, Px35y41, Px34y42, Px35y43 } CellNode (35 @ 42) (20)Px49y53 { Px49y54, Px48y53, Px50y53, Px49y52 } CellNode (49 @ 53) (20)Px46y8 { Px46y7, Px46y9, Px45y8 } CellNode (46 @ 8) (20)Px37y54 { Px36y54, Px38y54, Px37y53, Px37y55 } CellNode (37 @ 54) (20)Px43y5 { Px43y6, Px42y5, Px44y5, Px43y4 } CellNode (43 @ 5) (20)Px6y57 { Px6y56, Px6y58, Px7y57, Px5y57 } CellNode (6 @ 57) (20)Px62y43 { Px63y43, Px62y44, Px61y43, Px62y42 } CellNode (62 @ 43) (20)Px76y54 { Px75y54, Px76y55, Px76y53, Px77y54 } CellNode (76 @ 54) (20)Px50y44 { Px50y43, Px50y45, Px51y44, Px49y44 } CellNode (50 @ 44) (20)Px8y69 { Px8y68, Px8y70, Px9y69, Px7y69 } CellNode (8 @ 69) (20)Px46y80 { Px46y81, Px47y80, Px45y80, Px46y79 } CellNode (46 @ 80) (20)Px29y34 { Px29y35, Px30y34, Px29y33, Px28y34 } CellNode (29 @ 34) (20)Px34y81 { Px33y81, Px35y81, Px34y82, Px34y80 } CellNode (34 @ 81) (20)Px17y35 { Px18y35, Px17y34, Px16y35 } CellNode (17 @ 35) (20)Px85y80 { Px85y81, Px86y80, Px84y80, Px85y79 } CellNode (85 @ 80) (20)Px54y23 { Px54y24, Px55y23, Px53y23 } CellNode (54 @ 23) (20)Px68y34 { Px68y35, Px69y34, Px68y33, Px67y34 } CellNode (68 @ 34) (20)Px22y82 { Px23y82, Px21y82, Px22y81, Px22y83 } CellNode (22 @ 82) (20)Px42y24 { Px42y25, Px43y24, Px41y24, Px42y23 } CellNode (42 @ 24) (20)Px10y83 { Px9y83, Px11y83, Px10y84, Px10y82 } CellNode (10 @ 83) (20)Px56y35 { Px55y35, Px57y35, Px56y34 } CellNode (56 @ 35) (20)Px73y81 { Px73y80, Px73y82, Px74y81, Px72y81 } CellNode (73 @ 81) (20)Px30y25 { Px30y26, Px29y25, Px31y25, Px30y24 } CellNode (30 @ 25) (20)Px44y36 { Px45y36, Px43y36, Px44y37, Px44y35 } CellNode (44 @ 36) (20)Px26y61 { Px27y61, Px26y60, Px25y61, Px26y62 } CellNode (26 @ 61) (20)Px35y69 { Px36y69, Px35y68, Px34y69, Px35y70 } CellNode (35 @ 69) (20)Px14y62 { Px14y63, Px15y62, Px13y62, Px14y61 } CellNode (14 @ 62) (20)Px28y73 { Px28y74, Px27y73, Px29y73, Px28y72 } CellNode (28 @ 73) (20)Px65y61 { Px66y61, Px64y61, Px65y60, Px65y62 } CellNode (65 @ 61) (20)Px74y69 { Px75y69, Px73y69, Px74y68, Px74y70 } CellNode (74 @ 69) (20)Px16y74 { Px16y75, Px15y74, Px17y74, Px16y73 } CellNode (16 @ 74) (20)Px79y72 { Px78y72, Px79y71, Px79y73, Px80y72 } CellNode (79 @ 72) (20)Px53y62 { Px53y63, Px54y62, Px52y62, Px53y61 } CellNode (53 @ 62) (20)Px67y73 { Px68y73, Px66y73, Px67y74, Px67y72 } CellNode (67 @ 73) (20)Px36y16 { Px36y15, Px35y16, Px36y17, Px37y16 } CellNode (36 @ 16) (20)Px41y63 { Px40y63, Px41y62, Px41y64, Px42y63 } CellNode (41 @ 63) (20)Px55y74 { Px56y74, Px54y74, Px55y75, Px55y73 } CellNode (55 @ 74) (20)Px29y20 { Px29y19, Px29y21, Px30y20, Px28y20 } CellNode (29 @ 20) (20)Px80y63 { Px81y63, Px80y62, Px80y64, Px79y63 } CellNode (80 @ 63) (20)Px3y70 { Px3y69, Px3y71, Px4y70, Px2y70 } CellNode (3 @ 70) (20)Px94y74 { Px94y75, Px93y74, Px95y74, Px94y73 } CellNode (94 @ 74) (20)Px63y17 { Px63y18, Px62y17, Px64y17, Px63y16 } CellNode (63 @ 17) (20)Px59y3 { Px59y4, Px58y3, Px59y2, Px60y3 } CellNode (59 @ 3) (20)Px42y10 { Px42y9, Px42y11, Px41y10, Px43y10 } CellNode (42 @ 10) (20)Px51y18 { Px52y18, Px50y18, Px51y19, Px51y17 } CellNode (51 @ 18) (20)Px59y53 { Px59y52, Px59y54, Px60y53, Px58y53 } CellNode (59 @ 53) (20)Px33y43 { Px33y44, Px34y43, Px33y42, Px32y43 } CellNode (33 @ 43) (20)Px47y54 { Px48y54, Px46y54, Px47y53, Px47y55 } CellNode (47 @ 54) (20)Px35y55 { Px35y56, Px34y55, Px36y55, Px35y54 } CellNode (35 @ 55) (20)Px4y58 { Px5y58, Px3y58, Px4y57, Px4y59 } CellNode (4 @ 58) (20)Px23y56 { Px24y56, Px23y55, Px23y57, Px22y56 } CellNode (23 @ 56) (20)Px9y61 { Px9y60, Px8y61, Px10y61, Px9y62 } CellNode (9 @ 61) (20)Px60y44 { Px60y43, Px59y44, Px60y45, Px61y44 } CellNode (60 @ 44) (20)Px11y57 { Px11y58, Px11y56, Px10y57 } CellNode (11 @ 57) (20)Px74y55 { Px74y56, Px75y55, Px73y55, Px74y54 } CellNode (74 @ 55) (20)Px62y56 { Px62y57, Px62y55, Px63y56, Px61y56 } CellNode (62 @ 56) (20)Px39y34 { Px39y35, Px40y34, Px38y34, Px39y33 } CellNode (39 @ 34) (20)Px44y81 { Px43y81, Px44y82, Px45y81, Px44y80 } CellNode (44 @ 81) (20)Px27y35 { Px28y35, Px27y34, Px26y35, Px27y36 } CellNode (27 @ 35) (20)Px32y82 { Px33y82, Px31y82, Px32y81, Px32y83 } CellNode (32 @ 82) (20)Px29y47 { Px28y47, Px29y48, Px29y46, Px30y47 } CellNode (29 @ 47) (20)Px20y83 { Px20y84, Px19y83, Px21y83, Px20y82 } CellNode (20 @ 83) (20)Px66y35 { Px67y35, Px65y35, Px66y34, Px66y36 } CellNode (66 @ 35) (20)Px83y81 { Px83y80, Px83y82, Px84y81, Px82y81 } CellNode (83 @ 81) (20)Px71y82 { Px72y82, Px71y81, Px70y82, Px71y83 } CellNode (71 @ 82) (20)Px40y25 { Px39y25, Px40y26, Px41y25, Px40y24 } CellNode (40 @ 25) (20)Px54y36 { Px54y37, Px55y36, Px53y36, Px54y35 } CellNode (54 @ 36) (20)Px42y37 { Px42y36, Px43y37, Px41y37, Px42y38 } CellNode (42 @ 37) (20)Px21y30 { Px22y30, Px21y31, Px20y30, Px21y29 } CellNode (21 @ 30) (20)Px30y38 { Px30y39, Px29y38, Px31y38, Px30y37 } CellNode (30 @ 38) (20)Px38y73 { Px38y74, Px39y73, Px37y73, Px38y72 } CellNode (38 @ 73) (20)Px12y63 { Px13y63, Px12y62, Px11y63, Px12y64 } CellNode (12 @ 63) (20)Px26y74 { Px26y73, Px27y74, Px26y75, Px25y74 } CellNode (26 @ 74) (20)Px60y30 { Px61y30, Px60y31, Px59y30, Px60y29 } CellNode (60 @ 30) (20)Px14y75 { Px13y75, Px15y75, Px14y74, Px14y76 } CellNode (14 @ 75) (20)Px77y73 { Px77y74, Px78y73, Px76y73, Px77y72 } CellNode (77 @ 73) (20)Px51y63 { Px52y63, Px51y62, Px50y63, Px51y64 } CellNode (51 @ 63) (20)Px46y16 { Px45y16, Px46y15, Px46y17, Px47y16 } CellNode (46 @ 16) (20)Px39y20 { Px38y20, Px39y21, Px39y19 } CellNode (39 @ 20) (20)Px65y74 { Px64y74, Px66y74, Px65y75, Px65y73 } CellNode (65 @ 74) (20)Px48y28 { Px47y28, Px49y28, Px48y29 } CellNode (48 @ 28) (20)Px34y17 { Px34y18, Px35y17, Px34y16, Px33y17 } CellNode (34 @ 17) (20)Px27y21 { Px27y22, Px26y21, Px28y21, Px27y20 } CellNode (27 @ 21) (20)Px53y75 { Px54y75, Px52y75, Px53y74, Px53y76 } CellNode (53 @ 75) (20)Px36y29 { Px37y29, Px35y29, Px36y28, Px36y30 } CellNode (36 @ 29) (20)Px41y76 { Px41y77, Px40y76, Px42y76, Px41y75 } CellNode (41 @ 76) (20)Px1y71 { Px1y72, Px2y71, Px1y70 } CellNode (1 @ 71) (20)Px39y4 { Px39y3, Px40y4, Px38y4, Px39y5 } CellNode (39 @ 4) (20)Px66y21 { Px67y21, Px65y21, Px66y22, Px66y20 } CellNode (66 @ 21) (20)Px69y53 { Px68y53, Px69y54, Px70y53, Px69y52 } CellNode (69 @ 53) (20)Px40y11 { Px39y11, Px40y12, Px40y10, Px41y11 } CellNode (40 @ 11) (20)Px92y75 { Px91y75, Px93y75, Px92y74, Px92y76 } CellNode (92 @ 75) (20)Px80y76 { Px81y76, Px79y76, Px80y77, Px80y75 } CellNode (80 @ 76) (20)Px57y54 { Px58y54, Px56y54, Px57y53, Px57y55 } CellNode (57 @ 54) (20)Px3y83 { Px4y83, Px2y83, Px3y84, Px3y82 } CellNode (3 @ 83) (20)Px60y9 { Px60y8, Px61y9, Px60y10, Px59y9 } CellNode (60 @ 9) (20)Px45y55 { Px45y56, Px46y55, Px44y55, Px45y54 } CellNode (45 @ 55) (20)Px59y66 { Px59y65, Px59y67, Px60y66 } CellNode (59 @ 66) (20)Px33y56 { Px32y56, Px33y55, Px33y57, Px34y56 } CellNode (33 @ 56) (20)Px47y67 { Px48y67, Px47y68, Px46y67, Px47y66 } CellNode (47 @ 67) (20)Px21y57 { Px22y57, Px21y58, Px20y57, Px21y56 } CellNode (21 @ 57) (20)Px7y62 { Px7y63, Px8y62, Px7y61, Px6y62 } CellNode (7 @ 62) (20)Px72y56 { Px72y55, Px71y56, Px73y56, Px72y57 } CellNode (72 @ 56) (20)Px9y74 { Px9y75, Px8y74, Px9y73, Px10y74 } CellNode (9 @ 74) (20)Px60y57 { Px60y58, Px61y57, Px59y57, Px60y56 } CellNode (60 @ 57) (20)Px39y47 { Px38y47, Px40y47, Px39y46, Px39y48 } CellNode (39 @ 47) (20)Px30y83 { Px30y84, Px31y83, Px29y83, Px30y82 } CellNode (30 @ 83) (20)Px76y35 { Px76y34, Px76y36, Px75y35 } CellNode (76 @ 35) (20)Px27y48 { Px27y49, Px28y48, Px26y48, Px27y47 } CellNode (27 @ 48) (20)Px55y9 { Px56y9, Px55y10, Px55y8 } CellNode (55 @ 9) (20)Px64y36 { Px64y37, Px65y36, Px63y36, Px64y35 } CellNode (64 @ 36) (20)Px57y40 { Px58y40, Px56y40, Px57y41, Px57y39 } CellNode (57 @ 40) (20)Px52y37 { Px51y37, Px52y36, Px52y38, Px53y37 } CellNode (52 @ 37) (20)Px31y30 { Px31y31, Px32y30, Px30y30, Px31y29 } CellNode (31 @ 30) (20)Px66y48 { Px66y49, Px65y48, Px67y48, Px66y47 } CellNode (66 @ 48) (20)Px40y38 { Px41y38, Px40y39, Px39y38, Px40y37 } CellNode (40 @ 38) (20)Px48y73 { Px48y74, Px49y73, Px47y73, Px48y72 } CellNode (48 @ 73) (20)Px54y49 { Px54y48, Px54y50, Px55y49, Px53y49 } CellNode (54 @ 49) (20)Px45y41 { Px45y42, Px45y40, Px46y41, Px44y41 } CellNode (45 @ 41) (20)Px36y74 { Px35y74, Px36y75, Px37y74, Px36y73 } CellNode (36 @ 74) (20)Px70y30 { Px71y30, Px69y30, Px70y31, Px70y29 } CellNode (70 @ 30) (20)Px19y28 { Px20y28, Px19y27, Px18y28, Px19y29 } CellNode (19 @ 28) (20)Px24y75 { Px25y75, Px23y75, Px24y74, Px24y76 } CellNode (24 @ 75) (20)Px87y73 { Px87y74, Px88y73, Px86y73, Px87y72 } CellNode (87 @ 73) (20)Px12y76 { Px12y77, Px13y76, Px11y76, Px12y75 } CellNode (12 @ 76) (20)Px75y74 { Px74y74, Px75y75, Px76y74, Px75y73 } CellNode (75 @ 74) (20)Px58y28 { Px57y28, Px58y27, Px58y29, Px59y28 } CellNode (58 @ 28) (20)Px63y75 { Px64y75, Px63y74, Px62y75, Px63y76 } CellNode (63 @ 75) (20)Px32y18 { Px32y17, Px32y19, Px33y18, Px31y18 } CellNode (32 @ 18) (20)Px46y29 { Px46y30, Px47y29, Px45y29, Px46y28 } CellNode (46 @ 29) (20)Px37y21 { Px38y21, Px37y22, Px37y20, Px36y21 } CellNode (37 @ 21) (20)Px51y76 { Px51y77, Px52y76, Px51y75, Px50y76 } CellNode (51 @ 76) (20)Px25y22 { Px25y21, Px25y23, Px26y22, Px24y22 } CellNode (25 @ 22) (20)Px62y10 { Px61y10, Px62y11, Px63y10, Px62y9 } CellNode (62 @ 10) (20)Px50y11 { Px49y11, Px50y12, Px51y11 } CellNode (50 @ 11) (20)Px90y76 { Px91y76, Px89y76, Px90y77, Px90y75 } CellNode (90 @ 76) (20)Px64y22 { Px64y21, Px65y22, Px63y22, Px64y23 } CellNode (64 @ 22) (20)Px18y67 { Px17y67, Px19y67, Px18y68, Px18y66 } CellNode (18 @ 67) (20)Px1y84 { Px1y83, Px2y84 } CellNode (1 @ 84) (20)Px52y23 { Px52y24, Px51y23, Px53y23, Px52y22 } CellNode (52 @ 23) (20)Px55y55 { Px55y54, Px55y56, Px56y55, Px54y55 } CellNode (55 @ 55) (20)Px44y3 { Px43y3, Px44y4, Px45y3, Px44y2 } CellNode (44 @ 3) (20)Px69y66 { Px69y67, Px70y66, Px68y66, Px69y65 } CellNode (69 @ 66) (20)Px43y56 { Px44y56, Px43y55, Px42y56, Px43y57 } CellNode (43 @ 56) (20)Px36y60 { Px36y61, Px35y60, Px36y59, Px37y60 } CellNode (36 @ 60) (20)Px31y57 { Px31y58, Px32y57, Px31y56, Px30y57 } CellNode (31 @ 57) (20)Px10y50 { Px9y50, Px10y49, Px10y51, Px11y50 } CellNode (10 @ 50) (20)Px45y68 { Px44y68, Px46y68, Px45y67, Px45y69 } CellNode (45 @ 68) (20)Px24y61 { Px25y61, Px23y61, Px24y62, Px24y60 } CellNode (24 @ 61) (20)Px33y69 { Px34y69, Px32y69, Px33y68, Px33y70 } CellNode (33 @ 69) (20)Px70y57 { Px70y58, Px69y57, Px71y57, Px70y56 } CellNode (70 @ 57) (20)Px75y60 { Px75y61, Px74y60, Px75y59, Px76y60 } CellNode (75 @ 60) (20)Px7y75 { Px7y74, Px8y75, Px6y75, Px7y76 } CellNode (7 @ 75) (20)Px58y14 { Px58y15, Px57y14, Px59y14, Px58y13 } CellNode (58 @ 14) (20)Px63y61 { Px64y61, Px62y61, Px63y62, Px63y60 } CellNode (63 @ 61) (20)Px49y47 { Px50y47, Px49y46, Px48y47, Px49y48 } CellNode (49 @ 47) (20)Px28y40 { Px28y39, Px28y41, Px29y40, Px27y40 } CellNode (28 @ 40) (20)Px37y48 { Px37y49, Px38y48, Px36y48, Px37y47 } CellNode (37 @ 48) (20)Px67y40 { Px67y39, Px67y41, Px68y40, Px66y40 } CellNode (67 @ 40) (20)Px41y30 { Px41y31, Px42y30, Px40y30, Px41y29 } CellNode (41 @ 30) (20)Px50y38 { Px50y39, Px51y38, Px49y38, Px50y37 } CellNode (50 @ 38) (20)Px55y41 { Px55y40, Px54y41, Px55y42, Px56y41 } CellNode (55 @ 41) (20)Px64y49 { Px64y48, Px64y50, Px65y49, Px63y49 } CellNode (64 @ 49) (20)Px43y42 { Px44y42, Px42y42, Px43y43, Px43y41 } CellNode (43 @ 42) (20)Px29y28 { Px30y28, Px29y27, Px28y28, Px29y29 } CellNode (29 @ 28) (20)Px31y43 { Px31y42, Px32y43, Px30y43, Px31y44 } CellNode (31 @ 43) (20)Px17y29 { Px17y30, Px18y29, Px16y29, Px17y28 } CellNode (17 @ 29) (20)Px22y76 { Px22y77, Px23y76, Px22y75, Px21y76 } CellNode (22 @ 76) (20)Px68y28 { Px69y28, Px67y28, Px68y27, Px68y29 } CellNode (68 @ 28) (20)Px70y43 { Px69y43, Px70y42, Px70y44 } CellNode (70 @ 43) (20)Px15y80 { Px15y79, Px16y80, Px15y81, Px14y80 } CellNode (15 @ 80) (20)Px10y77 { Px11y77, Px10y76, Px10y78, Px9y77 } CellNode (10 @ 77) (20)Px56y29 { Px56y30, Px57y29, Px56y28, Px55y29 } CellNode (56 @ 29) (20)Px73y75 { Px74y75, Px72y75, Px73y74, Px73y76 } CellNode (73 @ 75) (20)Px61y76 { Px61y77, Px62y76, Px60y76, Px61y75 } CellNode (61 @ 76) (20)Px2y58 { Px3y58, Px1y58, Px2y59, Px2y57 } CellNode (2 @ 58) (20)Px49y33 { Px50y33, Px48y33, Px49y34, Px49y32 } CellNode (49 @ 33) (20)Px23y23 { Px24y23, Px23y24, Px23y22, Px22y23 } CellNode (23 @ 23) (20)Px54y80 { Px54y79, Px54y81, Px53y80, Px55y80 } CellNode (54 @ 80) (20)Px37y34 { Px37y35, Px37y33, Px38y34, Px36y34 } CellNode (37 @ 34) (20)Px42y81 { Px41y81, Px43y81, Px42y80, Px42y82 } CellNode (42 @ 81) (20)Px28y67 { Px28y66, Px29y67, Px27y67 } CellNode (28 @ 67) (20)Px93y80 { Px93y79, Px94y80, Px93y81, Px92y80 } CellNode (93 @ 80) (20)Px62y23 { Px63y23, Px62y24, Px62y22, Px61y23 } CellNode (62 @ 23) (20)Px16y68 { Px16y69, Px15y68, Px16y67, Px17y68 } CellNode (16 @ 68) (20)Px79y66 { Px79y67, Px80y66, Px79y65, Px78y66 } CellNode (79 @ 66) (20)Px81y81 { Px81y82, Px80y81, Px81y80, Px82y81 } CellNode (81 @ 81) (20)Px50y24 { Px50y23, Px51y24, Px49y24 } CellNode (50 @ 24) (20)Px67y67 { Px67y66, Px67y68, Px68y67, Px66y67 } CellNode (67 @ 67) (20)Px46y60 { Px47y60, Px45y60, Px46y59, Px46y61 } CellNode (46 @ 60) (20)Px55y68 { Px56y68, Px54y68, Px55y67, Px55y69 } CellNode (55 @ 68) (20)Px34y61 { Px34y62, Px35y61, Px34y60, Px33y61 } CellNode (34 @ 61) (20)Px69y79 { Px69y78, Px69y80, Px70y79, Px68y79 } CellNode (69 @ 79) (20)Px48y72 { Px49y72, Px47y72, Px48y71, Px48y73 } CellNode (48 @ 72) (20)Px43y69 { Px44y69, Px42y69, Px43y68, Px43y70 } CellNode (43 @ 69) (20)Px80y57 { Px79y57, Px80y56, Px80y58 } CellNode (80 @ 57) (20)Px22y62 { Px22y63, Px22y61, Px23y62, Px21y62 } CellNode (22 @ 62) (20)Px10y63 { Px10y64, Px11y63, Px10y62, Px9y63 } CellNode (10 @ 63) (20)Px73y61 { Px74y61, Px73y62, Px73y60, Px72y61 } CellNode (73 @ 61) (20)Px5y76 { Px6y76, Px5y77, Px4y76, Px5y75 } CellNode (5 @ 76) (20)Px56y15 { Px56y14, Px57y15, Px56y16, Px55y15 } CellNode (56 @ 15) (20)Px61y62 { Px62y62, Px61y61, Px61y63, Px60y62 } CellNode (61 @ 62) (20)Px82y69 { Px83y69, Px81y69, Px82y68, Px82y70 } CellNode (82 @ 69) (20)Px44y16 { Px45y16, Px44y17, Px43y16, Px44y15 } CellNode (44 @ 16) (20)Px47y48 { Px47y49, Px48y48, Px47y47, Px46y48 } CellNode (47 @ 48) (20)Px35y49 { Px36y49, Px34y49, Px35y48, Px35y50 } CellNode (35 @ 49) (20)Px9y55 { Px9y56, Px8y55, Px9y54, Px10y55 } CellNode (9 @ 55) (20)Px28y53 { Px27y53, Px29y53, Px28y52, Px28y54 } CellNode (28 @ 53) (20)Px65y41 { Px66y41, Px65y40, Px64y41, Px65y42 } CellNode (65 @ 41) (20)Px74y49 { Px75y49, Px74y48, Px73y49, Px74y50 } CellNode (74 @ 49) (20)Px53y42 { Px53y43, Px54y42, Px53y41, Px52y42 } CellNode (53 @ 42) (20)Px67y53 { Px68y53, Px66y53, Px67y52, Px67y54 } CellNode (67 @ 53) (20)Px41y43 { Px40y43, Px41y42, Px42y43, Px41y44 } CellNode (41 @ 43) (20)Px55y54 { Px55y55, Px56y54, Px54y54, Px55y53 } CellNode (55 @ 54) (20)Px3y50 { Px3y51, Px4y50, Px2y50, Px3y49 } CellNode (3 @ 50) (20)Px25y80 { Px25y79, Px25y81, Px26y80, Px24y80 } CellNode (25 @ 80) (20)Px13y81 { Px13y82, Px13y80, Px12y81, Px14y81 } CellNode (13 @ 81) (20)Px59y33 { Px59y34, Px60y33, Px58y33, Px59y32 } CellNode (59 @ 33) (20)Px64y80 { Px64y79, Px64y81, Px65y80, Px63y80 } CellNode (64 @ 80) (20)Px33y23 { Px33y24, Px34y23, Px32y23, Px33y22 } CellNode (33 @ 23) (20)Px47y34 { Px47y35, Px47y33, Px48y34, Px46y34 } CellNode (47 @ 34) (20)Px52y81 { Px53y81, Px52y80, Px51y81, Px52y82 } CellNode (52 @ 81) (20)Px21y24 { Px21y23, Px21y25, Px22y24, Px20y24 } CellNode (21 @ 24) (20)Px61y7 { Px61y8, Px62y7, Px61y6, Px60y7 } CellNode (61 @ 7) (20)Px35y35 { Px35y36, Px34y35, Px36y35, Px35y34 } CellNode (35 @ 35) (20)Px40y82 { Px40y83, Px39y82, Px41y82, Px40y81 } CellNode (40 @ 82) (20)Px91y81 { Px91y82, Px90y81, Px91y80, Px92y81 } CellNode (91 @ 81) (20)Px60y24 { Px60y25, Px59y24, Px61y24, Px60y23 } CellNode (60 @ 24) (20)Px74y35 { Px74y36, Px73y35, Px75y35, Px74y34 } CellNode (74 @ 35) (20)Px14y69 { Px14y70, Px15y69, Px13y69, Px14y68 } CellNode (14 @ 69) (20)Px19y72 { Px19y73, Px18y72, Px20y72, Px19y71 } CellNode (19 @ 72) (20)Px56y60 { Px57y60, Px55y60, Px56y59, Px56y61 } CellNode (56 @ 60) (20)Px62y36 { Px62y35, Px63y36, Px61y36, Px62y37 } CellNode (62 @ 36) (20)Px65y68 { Px66y68, Px65y67, Px64y68, Px65y69 } CellNode (65 @ 68) (20)Px39y14 { Px39y15, Px40y14, Px39y13, Px38y14 } CellNode (39 @ 14) (20)Px44y61 { Px44y62, Px45y61, Px43y61, Px44y60 } CellNode (44 @ 61) (20)Px79y79 { Px79y78, Px79y80, Px78y79, Px80y79 } CellNode (79 @ 79) (20)Px53y69 { Px52y69, Px54y69, Px53y68 } CellNode (53 @ 69) (20)Px32y62 { Px33y62, Px31y62, Px32y61, Px32y63 } CellNode (32 @ 62) (20)Px46y73 { Px47y73, Px45y73, Px46y74, Px46y72 } CellNode (46 @ 73) (20)Px20y63 { Px21y63, Px19y63, Px20y64, Px20y62 } CellNode (20 @ 63) (20)Px34y74 { Px35y74, Px33y74, Px34y73, Px34y75 } CellNode (34 @ 74) (20)Px66y15 { Px66y14, Px65y15, Px67y15, Px66y16 } CellNode (66 @ 15) (20)Px71y62 { Px72y62, Px71y61, Px70y62, Px71y63 } CellNode (71 @ 62) (20)Px3y77 { Px3y76, Px4y77, Px3y78, Px2y77 } CellNode (3 @ 77) (20)Px85y73 { Px86y73, Px84y73, Px85y74, Px85y72 } CellNode (85 @ 73) (20)Px54y16 { Px55y16, Px54y17, Px53y16, Px54y15 } CellNode (54 @ 16) (20)Px8y80 { Px9y80, Px7y80, Px8y81, Px8y79 } CellNode (8 @ 80) (20)Px56y7 { Px55y7, Px56y8, Px56y6, Px57y7 } CellNode (56 @ 7) (20)Px30y18 { Px29y18, Px30y19, Px30y17, Px31y18 } CellNode (30 @ 18) (20)Px38y53 { Px39y53, Px38y52, Px37y53, Px38y54 } CellNode (38 @ 53) (20)Px53y4 { Px52y4, Px53y5, Px53y3, Px54y4 } CellNode (53 @ 4) (20)Px26y54 { Px27y54, Px26y55, Px25y54, Px26y53 } CellNode (26 @ 54) (20)Px60y10 { Px59y10, Px60y11, Px60y9, Px61y10 } CellNode (60 @ 10) (20)Px63y42 { Px63y43, Px64y42, Px62y42, Px63y41 } CellNode (63 @ 42) (20)Px50y1 { Px51y1, Px49y1, Px50y2 } CellNode (50 @ 1) (20)Px77y53 { Px77y54, Px77y52, Px76y53, Px78y53 } CellNode (77 @ 53) (20)Px51y43 { Px51y42, Px50y43, Px51y44, Px52y43 } CellNode (51 @ 43) (20)Px9y68 { Px9y67, Px8y68, Px10y68, Px9y69 } CellNode (9 @ 68) (20)Px65y54 { Px65y55, Px64y54, Px66y54, Px65y53 } CellNode (65 @ 54) (20)Px53y55 { Px54y55, Px53y54, Px53y56, Px52y55 } CellNode (53 @ 55) (20)Px41y56 { Px41y57, Px40y56, Px42y56, Px41y55 } CellNode (41 @ 56) (20)Px18y34 { Px19y34, Px18y33, Px17y34, Px18y35 } CellNode (18 @ 34) (20)Px1y51 { Px1y50, Px1y52, Px2y51 } CellNode (1 @ 51) (20)Px23y81 { Px24y81, Px23y80, Px22y81, Px23y82 } CellNode (23 @ 81) (20)Px69y33 { Px69y34, Px70y33, Px68y33, Px69y32 } CellNode (69 @ 33) (20)Px74y80 { Px74y79, Px74y81, Px75y80, Px73y80 } CellNode (74 @ 80) (20)Px11y82 { Px11y83, Px12y82, Px10y82, Px11y81 } CellNode (11 @ 82) (20)Px57y34 { Px58y34, Px57y33, Px56y34, Px57y35 } CellNode (57 @ 34) (20)Px62y81 { Px63y81, Px62y80, Px61y81, Px62y82 } CellNode (62 @ 81) (20)Px45y35 { Px45y36, Px46y35, Px44y35, Px45y34 } CellNode (45 @ 35) (20)Px59y46 { Px60y46, Px58y46, Px59y45, Px59y47 } CellNode (59 @ 46) (20)Px50y82 { Px50y83, Px49y82, Px51y82, Px50y81 } CellNode (50 @ 82) (20)Px41y8 { Px42y8, Px40y8, Px41y9, Px41y7 } CellNode (41 @ 8) (20)Px48y4 { Px49y4, Px47y4, Px48y5, Px48y3 } CellNode (48 @ 4) (20)Px33y36 { Px33y35, Px33y37, Px32y36, Px34y36 } CellNode (33 @ 36) (20)Px70y24 { Px70y23, Px70y25, Px71y24, Px69y24 } CellNode (70 @ 24) (20)Px45y1 { Px46y1, Px44y1, Px45y2 } CellNode (45 @ 1) (20)Px29y72 { Px29y73, Px30y72, Px29y71, Px28y72 } CellNode (29 @ 72) (20)Px72y36 { Px72y35, Px73y36, Px71y36, Px72y37 } CellNode (72 @ 36) (20)Px17y73 { Px16y73, Px18y73, Px17y74, Px17y72 } CellNode (17 @ 73) (20)Px89y79 { Px89y78, Px88y79, Px89y80, Px90y79 } CellNode (89 @ 79) (20)Px60y37 { Px61y37, Px59y37, Px60y38, Px60y36 } CellNode (60 @ 37) (20)Px68y72 { Px68y73, Px69y72, Px67y72, Px68y71 } CellNode (68 @ 72) (20)Px37y15 { Px36y15, Px37y14, Px37y16, Px38y15 } CellNode (37 @ 15) (20)Px56y73 { Px56y72, Px56y74, Px57y73, Px55y73 } CellNode (56 @ 73) (20)Px30y63 { Px30y64, Px31y63, Px29y63, Px30y62 } CellNode (30 @ 63) (20)Px44y74 { Px43y74, Px45y74, Px44y73, Px44y75 } CellNode (44 @ 74) (20)Px27y28 { Px28y28, Px27y29, Px26y28, Px27y27 } CellNode (27 @ 28) (20)Px81y62 { Px80y62, Px81y61, Px81y63 } CellNode (81 @ 62) (20)Px32y75 { Px32y76, Px33y75, Px31y75, Px32y74 } CellNode (32 @ 75) (20)Px95y73 { Px94y73, Px96y73, Px95y74 } CellNode (95 @ 73) (20)Px64y16 { Px64y17, Px65y16, Px64y15, Px63y16 } CellNode (64 @ 16) (20)Px20y76 { Px21y76, Px20y75, Px20y77, Px19y76 } CellNode (20 @ 76) (20)Px83y74 { Px82y74, Px83y75, Px83y73, Px84y74 } CellNode (83 @ 74) (20)Px52y17 { Px51y17, Px52y18, Px53y17, Px52y16 } CellNode (52 @ 17) (20)Px6y81 { Px6y80, Px7y81, Px5y81, Px6y82 } CellNode (6 @ 81) (20)Px71y75 { Px72y75, Px71y76, Px70y75, Px71y74 } CellNode (71 @ 75) (20)Px40y18 { Px39y18, Px41y18, Px40y17, Px40y19 } CellNode (40 @ 18) (20)Px57y20 { Px56y20, Px58y20, Px57y21 } CellNode (57 @ 20) (20)Px36y8 { Px36y7, Px37y8, Px35y8, Px36y9 } CellNode (36 @ 8) (20)Px48y53 { Px49y53, Px47y53, Px48y52, Px48y54 } CellNode (48 @ 53) (20)Px36y54 { Px36y55, Px37y54, Px35y54, Px36y53 } CellNode (36 @ 54) (20)Px1y78 { Px2y78, Px1y79, Px1y77 } CellNode (1 @ 78) (20)Px66y28 { Px67y28, Px65y28, Px66y29, Px66y27 } CellNode (66 @ 28) (20)Px24y55 { Px23y55, Px24y54, Px24y56, Px25y55 } CellNode (24 @ 55) (20)Px38y66 { Px38y67, Px39y66, Px37y66, Px38y65 } CellNode (38 @ 66) (20)Px75y54 { Px75y55, Px76y54, Px74y54, Px75y53 } CellNode (75 @ 54) (20)Px7y69 { Px8y69, Px6y69, Px7y68, Px7y70 } CellNode (7 @ 69) (20)Px63y55 { Px63y54, Px62y55, Px64y55, Px63y56 } CellNode (63 @ 55) (20)Px77y66 { Px78y66, Px77y67, Px76y66, Px77y65 } CellNode (77 @ 66) (20)Px51y56 { Px51y57, Px50y56, Px52y56, Px51y55 } CellNode (51 @ 56) (20)Px16y35 { Px17y35, Px15y35, Px16y34 } CellNode (16 @ 35) (20)Px55y35 { Px55y36, Px56y35, Px55y34, Px54y35 } CellNode (55 @ 35) (20)Px69y46 { Px70y46, Px68y46, Px69y45, Px69y47 } CellNode (69 @ 46) (20)Px43y36 { Px42y36, Px43y35, Px43y37, Px44y36 } CellNode (43 @ 36) (20)Px57y47 { Px57y48, Px56y47, Px58y47, Px57y46 } CellNode (57 @ 47) (20)Px31y37 { Px32y37, Px31y38, Px31y36, Px30y37 } CellNode (31 @ 37) (20)Px36y40 { Px35y40, Px36y39, Px37y40, Px36y41 } CellNode (36 @ 40) (20)Px45y48 { Px44y48, Px45y47, Px46y48, Px45y49 } CellNode (45 @ 48) (20)Px27y73 { Px26y73, Px27y74, Px28y73, Px27y72 } CellNode (27 @ 73) (20)Px70y37 { Px71y37, Px70y38, Px70y36 } CellNode (70 @ 37) (20)Px75y40 { Px74y40, Px75y39, Px76y40, Px75y41 } CellNode (75 @ 40) (20)Px7y55 { Px8y55, Px7y56, Px6y55, Px7y54 } CellNode (7 @ 55) (20)Px15y74 { Px16y74, Px14y74, Px15y73, Px15y75 } CellNode (15 @ 74) (20)Px66y73 { Px66y72, Px66y74, Px67y73, Px65y73 } CellNode (66 @ 73) (20)Px49y27 { Px49y28, Px50y27 } CellNode (49 @ 27) (20)Px28y20 { Px28y21, Px29y20, Px27y20, Px28y19 } CellNode (28 @ 20) (20)Px54y74 { Px55y74, Px54y73, Px53y74, Px54y75 } CellNode (54 @ 74) (20)Px37y28 { Px37y27, Px37y29, Px36y28 } CellNode (37 @ 28) (20)Px42y75 { Px42y76, Px43y75, Px42y74, Px41y75 } CellNode (42 @ 75) (20)Px25y29 { Px25y28, Px25y30, Px26y29, Px24y29 } CellNode (25 @ 29) (20)Px67y20 { Px68y20, Px67y21, Px66y20, Px67y19 } CellNode (67 @ 20) (20)Px30y76 { Px31y76, Px30y75, Px30y77, Px29y76 } CellNode (30 @ 76) (20)Px41y10 { Px42y10, Px40y10, Px41y9, Px41y11 } CellNode (41 @ 10) (20)Px93y74 { Px94y74, Px93y73, Px92y74, Px93y75 } CellNode (93 @ 74) (20)Px81y75 { Px82y75, Px81y76, Px81y74, Px80y75 } CellNode (81 @ 75) (20)Px50y18 { Px51y18, Px49y18, Px50y17, Px50y19 } CellNode (50 @ 18) (20)Px64y29 { Px64y28, Px64y30, Px65y29, Px63y29 } CellNode (64 @ 29) (20)Px62y17 { Px62y16, Px62y18, Px63y17, Px61y17 } CellNode (62 @ 17) (20)Px4y82 { Px4y83, Px5y82, Px3y82, Px4y81 } CellNode (4 @ 82) (20)Px43y22 { Px42y22, Px44y22, Px43y23 } CellNode (43 @ 22) (20)Px31y23 { Px32y23, Px30y23, Px31y24, Px31y22 } CellNode (31 @ 23) (20)Px34y55 { Px35y55, Px34y54, Px33y55, Px34y56 } CellNode (34 @ 55) (20)Px48y66 { Px48y65, Px49y66, Px48y67, Px47y66 } CellNode (48 @ 66) (20)Px22y56 { Px22y57, Px23y56, Px21y56, Px22y55 } CellNode (22 @ 56) (20)Px36y67 { Px35y67, Px36y68, Px36y66, Px37y67 } CellNode (36 @ 67) (20)Px10y57 { Px10y56, Px9y57, Px10y58, Px11y57 } CellNode (10 @ 57) (20)Px73y55 { Px74y55, Px72y55, Px73y54, Px73y56 } CellNode (73 @ 55) (20)Px61y56 { Px61y57, Px62y56, Px60y56 } CellNode (61 @ 56) (20)Px49y13 { Px49y14, Px48y13, Px50y13, Px49y12 } CellNode (49 @ 13) (20)Px75y67 { Px75y68, Px74y67, Px75y66, Px76y67 } CellNode (75 @ 67) (20)Px54y60 { Px55y60, Px53y60, Px54y61, Px54y59 } CellNode (54 @ 60) (20)Px63y68 { Px63y69, Px62y68, Px64y68, Px63y67 } CellNode (63 @ 68) (20)Px42y61 { Px41y61, Px42y60, Px43y61, Px42y62 } CellNode (42 @ 61) (20)Px28y47 { Px28y48, Px29y47, Px28y46, Px27y47 } CellNode (28 @ 47) (20)Px65y8 { Px64y8, Px65y9 } CellNode (65 @ 8) (20)Px62y5 { Px62y6, Px61y5, Px62y4, Px63y5 } CellNode (62 @ 5) (20)Px67y47 { Px67y48, Px68y47, Px67y46, Px66y47 } CellNode (67 @ 47) (20)Px46y40 { Px45y40, Px46y39, Px47y40, Px46y41 } CellNode (46 @ 40) (20)Px41y37 { Px41y38, Px42y37, Px40y37, Px41y36 } CellNode (41 @ 37) (20)Px20y30 { Px20y29, Px20y31, Px21y30, Px19y30 } CellNode (20 @ 30) (20)Px55y48 { Px55y47, Px54y48, Px56y48, Px55y49 } CellNode (55 @ 48) (20)Px34y41 { Px35y41, Px33y41, Px34y42, Px34y40 } CellNode (34 @ 41) (20)Px43y49 { Px44y49, Px42y49, Px43y48, Px43y50 } CellNode (43 @ 49) (20)Px73y41 { Px74y41, Px72y41, Px73y42, Px73y40 } CellNode (73 @ 41) (20)Px13y75 { Px13y76, Px14y75, Px13y74, Px12y75 } CellNode (13 @ 75) (20)Px5y56 { Px6y56, Px4y56, Px5y55, Px5y57 } CellNode (5 @ 56) (20)Px59y27 { Px60y27, Px59y26, Px58y27, Px59y28 } CellNode (59 @ 27) (20)Px61y42 { Px61y41, Px62y42, Px61y43, Px60y42 } CellNode (61 @ 42) (20)Px38y20 { Px38y19, Px38y21, Px39y20, Px37y20 } CellNode (38 @ 20) (20)Px47y28 { Px47y29, Px48y28, Px47y27, Px46y28 } CellNode (47 @ 28) (20)Px52y75 { Px52y76, Px53y75, Px51y75, Px52y74 } CellNode (52 @ 75) (20)Px26y21 { Px26y20, Px25y21, Px26y22, Px27y21 } CellNode (26 @ 21) (20)Px35y29 { Px34y29, Px35y28, Px35y30, Px36y29 } CellNode (35 @ 29) (20)Px40y76 { Px41y76, Px39y76, Px40y75, Px40y77 } CellNode (40 @ 76) (20)Px28y33 { Px28y34, Px28y32, Px29y33, Px27y33 } CellNode (28 @ 33) (20)Px91y75 { Px91y76, Px92y75, Px90y75, Px91y74 } CellNode (91 @ 75) (20)Px33y80 { Px32y80, Px33y81, Px33y79, Px34y80 } CellNode (33 @ 80) (20)Px57y5 { Px57y6, Px56y5, Px58y5, Px57y4 } CellNode (57 @ 5) (20)Px65y21 { Px65y20, Px64y21, Px65y22, Px66y21 } CellNode (65 @ 21) (20)Px2y83 { Px1y83, Px2y84, Px3y83, Px2y82 } CellNode (2 @ 83) (20)Px21y81 { Px21y82, Px22y81, Px20y81, Px21y80 } CellNode (21 @ 81) (20)Px67y33 { Px66y33, Px67y32, Px68y33, Px67y34 } CellNode (67 @ 33) (20)Px54y2 { Px54y3, Px53y2, Px55y2, Px54y1 } CellNode (54 @ 2) (20)Px72y80 { Px71y80, Px73y80, Px72y79, Px72y81 } CellNode (72 @ 80) (20)Px41y23 { Px41y24, Px42y23, Px40y23, Px41y22 } CellNode (41 @ 23) (20)Px53y22 { Px53y21, Px53y23, Px52y22 } CellNode (53 @ 22) (20)Px19y66 { Px18y66, Px19y67, Px20y66, Px19y65 } CellNode (19 @ 66) (20)Px46y67 { Px47y67, Px46y66, Px45y67, Px46y68 } CellNode (46 @ 67) (20)Px25y60 { Px26y60, Px25y61, Px24y60, Px25y59 } CellNode (25 @ 60) (20)Px20y57 { Px19y57, Px20y56, Px20y58, Px21y57 } CellNode (20 @ 57) (20)Px34y68 { Px35y68, Px34y69, Px33y68, Px34y67 } CellNode (34 @ 68) (20)Px39y71 { Px40y71, Px38y71, Px39y72, Px39y70 } CellNode (39 @ 71) (20)Px13y61 { Px12y61, Px14y61, Px13y62 } CellNode (13 @ 61) (20)Px22y69 { Px22y70, Px21y69, Px22y68 } CellNode (22 @ 69) (20)Px8y74 { Px8y73, Px7y74, Px8y75, Px9y74 } CellNode (8 @ 74) (20)Px59y13 { Px59y14, Px60y13, Px59y12, Px58y13 } CellNode (59 @ 13) (20)Px64y60 { Px64y61, Px65y60, Px63y60, Px64y59 } CellNode (64 @ 60) (20)Px73y68 { Px73y69, Px72y68, Px74y68, Px73y67 } CellNode (73 @ 68) (20)Px78y71 { Px78y72, Px77y71, Px79y71, Px78y70 } CellNode (78 @ 71) (20)Px47y14 { Px47y13, Px48y14, Px46y14, Px47y15 } CellNode (47 @ 14) (20)Px52y61 { Px53y61, Px52y60, Px52y62, Px51y61 } CellNode (52 @ 61) (20)Px61y69 { Px61y68, Px62y69, Px60y69 } CellNode (61 @ 69) (20)Px38y47 { Px38y48, Px39y47, Px38y46, Px37y47 } CellNode (38 @ 47) (20)Px35y15 { Px36y15, Px34y15, Px35y16, Px35y14 } CellNode (35 @ 15) (20)Px40y62 { Px41y62, Px40y63, Px39y62, Px40y61 } CellNode (40 @ 62) (20)Px26y48 { Px26y49, Px26y47, Px27y48 } CellNode (26 @ 48) (20)Px49y2 { Px49y1, Px50y2, Px48y2, Px49y3 } CellNode (49 @ 2) (20)Px56y40 { Px57y40, Px55y40, Px56y39, Px56y41 } CellNode (56 @ 40) (20)Px65y48 { Px66y48, Px64y48, Px65y47, Px65y49 } CellNode (65 @ 48) (20)Px44y41 { Px44y42, Px45y41, Px43y41, Px44y40 } CellNode (44 @ 41) (20)Px79y59 { Px79y60, Px80y59, Px78y59, Px79y58 } CellNode (79 @ 59) (20)Px58y52 { Px57y52, Px58y53, Px58y51, Px59y52 } CellNode (58 @ 52) (20)Px53y49 { Px53y50, Px54y49, Px53y48, Px52y49 } CellNode (53 @ 49) (20)Px32y42 { Px31y42, Px32y41, Px33y42, Px32y43 } CellNode (32 @ 42) (20)Px46y53 { Px47y53, Px45y53, Px46y54, Px46y52 } CellNode (46 @ 53) (20)Px8y60 { Px9y60, Px8y61, Px7y60, Px8y59 } CellNode (8 @ 60) (20)Px3y57 { Px3y58, Px4y57, Px3y56, Px2y57 } CellNode (3 @ 57) (20)Px45y29 { Px44y29, Px45y28, Px45y30, Px46y29 } CellNode (45 @ 29) (20)Px24y22 { Px24y23, Px25y22, Px24y21, Px23y22 } CellNode (24 @ 22) (20)Px38y33 { Px38y32, Px37y33, Px38y34, Px39y33 } CellNode (38 @ 33) (20)Px43y80 { Px43y81, Px42y80, Px43y79, Px44y80 } CellNode (43 @ 80) (20)Px26y34 { Px27y34, Px25y34, Px26y35, Px26y33 } CellNode (26 @ 34) (20)Px63y22 { Px63y23, Px64y22, Px63y21, Px62y22 } CellNode (63 @ 22) (20)Px31y81 { Px31y82, Px30y81, Px32y81, Px31y80 } CellNode (31 @ 81) (20)Px37y6 { Px37y7, Px38y6, Px36y6 } CellNode (37 @ 6) (20)Px82y80 { Px83y80, Px81y80, Px82y79, Px82y81 } CellNode (82 @ 80) (20)Px51y23 { Px51y22, Px51y24, Px52y23, Px50y23 } CellNode (51 @ 23) (20)Px65y34 { Px66y34, Px64y34, Px65y35, Px65y33 } CellNode (65 @ 34) (20)Px70y81 { Px71y81, Px69y81, Px70y82, Px70y80 } CellNode (70 @ 81) (20)Px19y79 { Px18y79, Px20y79, Px19y78, Px19y80 } CellNode (19 @ 79) (20)Px53y35 { Px53y36, Px54y35, Px52y35 } CellNode (53 @ 35) (20)Px56y67 { Px55y67, Px56y66, Px56y68 } CellNode (56 @ 67) (20)Px35y60 { Px35y59, Px35y61, Px36y60, Px34y60 } CellNode (35 @ 60) (20)Px44y68 { Px44y69, Px45y68, Px44y67, Px43y68 } CellNode (44 @ 68) (20)Px49y71 { Px49y72, Px50y71, Px48y71, Px49y70 } CellNode (49 @ 71) (20)Px23y61 { Px24y61, Px22y61, Px23y60, Px23y62 } CellNode (23 @ 61) (20)Px37y72 { Px37y73, Px36y72, Px38y72, Px37y71 } CellNode (37 @ 72) (20)Px32y69 { Px33y69, Px31y69, Px32y68, Px32y70 } CellNode (32 @ 69) (20)Px11y62 { Px12y62, Px11y63, Px10y62, Px11y61 } CellNode (11 @ 62) (20)Px74y60 { Px74y59, Px74y61, Px75y60, Px73y60 } CellNode (74 @ 60) (20)Px6y75 { Px6y76, Px7y75, Px6y74, Px5y75 } CellNode (6 @ 75) (20)Px25y73 { Px24y73, Px26y73, Px25y72, Px25y74 } CellNode (25 @ 73) (20)Px57y14 { Px57y13, Px56y14, Px57y15, Px58y14 } CellNode (57 @ 14) (20)Px62y61 { Px63y61, Px62y60, Px61y61, Px62y62 } CellNode (62 @ 61) (20)Px76y72 { Px76y73, Px75y72, Px77y72, Px76y71 } CellNode (76 @ 72) (20)Px45y15 { Px45y16, Px46y15, Px44y15, Px45y14 } CellNode (45 @ 15) (20)Px50y62 { Px51y62, Px50y63, Px49y62, Px50y61 } CellNode (50 @ 62) (20)Px97y79 { Px97y80, Px96y79, Px97y78 } CellNode (97 @ 79) (20)Px64y73 { Px63y73, Px64y74, Px64y72, Px65y73 } CellNode (64 @ 73) (20)Px33y16 { Px34y16, Px32y16, Px33y17, Px33y15 } CellNode (33 @ 16) (20)Px71y69 { Px71y68, Px70y69, Px71y70, Px72y69 } CellNode (71 @ 69) (20)Px83y68 { Px83y69, Px82y68, Px83y67 } CellNode (83 @ 68) (20)Px29y52 { Px30y52, Px28y52, Px29y51, Px29y53 } CellNode (29 @ 52) (20)Px60y17 { Px61y17, Px60y16, Px60y18 } CellNode (60 @ 17) (20)Px63y49 { Px63y50, Px64y49, Px63y48, Px62y49 } CellNode (63 @ 49) (20)Px68y52 { Px68y53, Px68y51, Px67y52, Px69y52 } CellNode (68 @ 52) (20)Px42y42 { Px42y41, Px41y42, Px42y43, Px43y42 } CellNode (42 @ 42) (20)Px56y53 { Px56y54, Px57y53, Px55y53, Px56y52 } CellNode (56 @ 53) (20)Px30y43 { Px30y44, Px31y43, Px30y42, Px29y43 } CellNode (30 @ 43) (20)Px44y54 { Px44y55, Px44y53, Px45y54, Px43y54 } CellNode (44 @ 54) (20)Px32y55 { Px32y56, Px31y55, Px33y55, Px32y54 } CellNode (32 @ 55) (20)Px14y80 { Px15y80, Px13y80, Px14y79, Px14y81 } CellNode (14 @ 80) (20)Px1y58 { Px1y59, Px2y58, Px1y57 } CellNode (1 @ 58) (20)Px6y61 { Px7y61, Px6y62, Px5y61, Px6y60 } CellNode (6 @ 61) (20)Px71y55 { Px72y55, Px70y55, Px71y56, Px71y54 } CellNode (71 @ 55) (20)Px48y33 { Px49y33, Px48y32, Px47y33, Px48y34 } CellNode (48 @ 33) (20)Px53y80 { Px54y80, Px52y80, Px53y79, Px53y81 } CellNode (53 @ 80) (20)Px36y34 { Px36y35, Px37y34, Px36y33, Px35y34 } CellNode (36 @ 34) (20)Px41y81 { Px41y82, Px42y81, Px40y81, Px41y80 } CellNode (41 @ 81) (20)Px24y35 { Px24y34, Px25y35, Px23y35 } CellNode (24 @ 35) (20)Px92y80 { Px93y80, Px91y80, Px92y79, Px92y81 } CellNode (92 @ 80) (20)Px75y34 { Px76y34, Px75y35, Px74y34, Px75y33 } CellNode (75 @ 34) (20)Px80y81 { Px80y82, Px79y81, Px81y81, Px80y80 } CellNode (80 @ 81) (20)Px45y8 { Px46y8, Px45y7, Px45y9 } CellNode (45 @ 8) (20)Px63y35 { Px62y35, Px63y34, Px64y35, Px63y36 } CellNode (63 @ 35) (20)Px29y79 { Px30y79, Px28y79, Px29y78, Px29y80 } CellNode (29 @ 79) (20)Px7y49 { Px7y50, Px8y49, Px6y49 } CellNode (7 @ 49) (20)Px51y36 { Px51y37, Px50y36, Px52y36, Px51y35 } CellNode (51 @ 36) (20)Px42y5 { Px42y4, Px41y5, Px42y6, Px43y5 } CellNode (42 @ 5) (20)Px68y79 { Px69y79, Px68y78, Px67y79, Px68y80 } CellNode (68 @ 79) (20)Px42y69 { Px43y69, Px41y69, Px42y68, Px42y70 } CellNode (42 @ 69) (20)Px47y72 { Px47y71, Px47y73, Px48y72, Px46y72 } CellNode (47 @ 72) (20)Px21y62 { Px21y63, Px22y62, Px20y62, Px21y61 } CellNode (21 @ 62) (20)Px35y73 { Px35y74, Px35y72, Px34y73, Px36y73 } CellNode (35 @ 73) (20)Px18y27 { Px18y28, Px17y27, Px19y27, Px18y26 } CellNode (18 @ 27) (20)Px81y69 { Px82y69, Px81y68, Px80y69, Px81y70 } CellNode (81 @ 69) (20)Px4y76 { Px4y75, Px4y77, Px5y76, Px3y76 } CellNode (4 @ 76) (20)Px69y26 { Px70y26, Px69y25, Px69y27, Px68y26 } CellNode (69 @ 26) (20)Px23y74 { Px24y74, Px22y74, Px23y75, Px23y73 } CellNode (23 @ 74) (20)Px11y75 { Px11y76, Px11y74, Px12y75, Px10y75 } CellNode (11 @ 75) (20)Px74y73 { Px73y73, Px74y74, Px74y72, Px75y73 } CellNode (74 @ 73) (20)Px86y72 { Px86y71, Px86y73, Px87y72, Px85y72 } CellNode (86 @ 72) (20)Px43y16 { Px42y16, Px43y17, Px44y16, Px43y15 } CellNode (43 @ 16) (20)Px62y74 { Px63y74, Px61y74, Px62y75, Px62y73 } CellNode (62 @ 74) (20)Px39y52 { Px40y52, Px39y51, Px38y52, Px39y53 } CellNode (39 @ 52) (20)Px31y17 { Px32y17, Px30y17, Px31y16, Px31y18 } CellNode (31 @ 17) (20)Px55y15 { Px56y15, Px55y16, Px54y15 } CellNode (55 @ 15) (20)Px50y75 { Px49y75, Px50y74, Px50y76, Px51y75 } CellNode (50 @ 75) (20)Px27y53 { Px27y54, Px28y53, Px27y52, Px26y53 } CellNode (27 @ 53) (20)Px60y62 { Px60y63, Px61y62, Px59y62, Px60y61 } CellNode (60 @ 62) (20)Px36y20 { Px36y19, Px37y20, Px35y20, Px36y21 } CellNode (36 @ 20) (20)Px78y52 { Px78y53, Px77y52 } CellNode (78 @ 52) (20)Px29y65 { Px29y66, Px28y65, Px30y65, Px29y64 } CellNode (29 @ 65) (20)Px66y53 { Px66y54, Px67y53, Px66y52, Px65y53 } CellNode (66 @ 53) (20)Px17y66 { Px18y66, Px16y66, Px17y65, Px17y67 } CellNode (17 @ 66) (20)Px54y54 { Px55y54, Px54y53, Px53y54, Px54y55 } CellNode (54 @ 54) (20)Px68y65 { Px68y66, Px69y65, Px67y65, Px68y64 } CellNode (68 @ 65) (20)Px42y55 { Px43y55, Px42y56, Px42y54, Px41y55 } CellNode (42 @ 55) (20)Px30y56 { Px30y55, Px31y56, Px29y56, Px30y57 } CellNode (30 @ 56) (20)Px4y62 { Px4y61, Px5y62, Px3y62 } CellNode (4 @ 62) (20)Px46y34 { Px46y35, Px47y34, Px45y34, Px46y33 } CellNode (46 @ 34) (20)Px58y3 { Px59y3, Px58y4, Px57y3, Px58y2 } CellNode (58 @ 3) (20)Px34y35 { Px33y35, Px34y34, Px34y36, Px35y35 } CellNode (34 @ 35) (20)Px48y46 { Px49y46, Px47y46, Px48y47, Px48y45 } CellNode (48 @ 46) (20)Px36y47 { Px35y47, Px36y46, Px37y47, Px36y48 } CellNode (36 @ 47) (20)Px90y81 { Px90y82, Px91y81, Px90y80, Px89y81 } CellNode (90 @ 81) (20)Px73y35 { Px72y35, Px73y34, Px73y36, Px74y35 } CellNode (73 @ 35) (20)Px18y72 { Px18y71, Px18y73, Px19y72, Px17y72 } CellNode (18 @ 72) (20)Px61y36 { Px61y37, Px62y36, Px61y35, Px60y36 } CellNode (61 @ 36) (20)Px75y47 { Px75y46, Px75y48, Px74y47 } CellNode (75 @ 47) (20)Px78y79 { Px79y79, Px77y79, Px78y78, Px78y80 } CellNode (78 @ 79) (20)Px54y40 { Px55y40, Px53y40, Px54y41, Px54y39 } CellNode (54 @ 40) (20)Px57y72 { Px57y73, Px56y72 } CellNode (57 @ 72) (20)Px45y73 { Px46y73, Px45y72, Px44y73, Px45y74 } CellNode (45 @ 73) (20)Px59y84 { Px59y83, Px60y84, Px58y84 } CellNode (59 @ 84) (20)Px28y27 { Px29y27, Px28y28, Px28y26, Px27y27 } CellNode (28 @ 27) (20)Px33y74 { Px33y75, Px34y74, Px33y73, Px32y74 } CellNode (33 @ 74) (20)Px16y28 { Px16y27, Px16y29, Px15y28, Px17y28 } CellNode (16 @ 28) (20)Px21y75 { Px20y75, Px21y74, Px22y75, Px21y76 } CellNode (21 @ 75) (20)Px84y73 { Px85y73, Px84y72, Px83y73, Px84y74 } CellNode (84 @ 73) (20)Px67y27 { Px67y28, Px68y27, Px66y27, Px67y26 } CellNode (67 @ 27) (20)Px53y16 { Px52y16, Px53y17, Px54y16, Px53y15 } CellNode (53 @ 16) (20)Px72y74 { Px72y75, Px73y74, Px71y74, Px72y73 } CellNode (72 @ 74) (20)Px41y17 { Px41y16, Px41y18, Px40y17 } CellNode (41 @ 17) (20)Px7y80 { Px6y80, Px7y79, Px7y81, Px8y80 } CellNode (7 @ 80) (20)Px55y28 { Px55y27, Px56y28, Px55y29, Px54y28 } CellNode (55 @ 28) (20)Px60y75 { Px60y76, Px60y74, Px61y75, Px59y75 } CellNode (60 @ 75) (20)Px43y29 { Px44y29, Px42y29, Px43y28, Px43y30 } CellNode (43 @ 29) (20)Px22y22 { Px23y22, Px22y23, Px21y22 } CellNode (22 @ 22) (20)Px25y54 { Px26y54, Px24y54, Px25y53, Px25y55 } CellNode (25 @ 54) (20)Px39y65 { Px38y65, Px39y66, Px40y65, Px39y64 } CellNode (39 @ 65) (20)Px40y1 { Px40y2, Px41y1 } CellNode (40 @ 1) (20)Px27y66 { Px26y66, Px27y67, Px27y65, Px28y66 } CellNode (27 @ 66) (20)Px61y22 { Px62y22, Px60y22, Px61y23, Px61y21 } CellNode (61 @ 22) (20)Px64y54 { Px65y54, Px63y54, Px64y53, Px64y55 } CellNode (64 @ 54) (20)Px15y67 { Px16y67, Px14y67, Px15y68, Px15y66 } CellNode (15 @ 67) (20)Px78y65 { Px77y65, Px79y65, Px78y66, Px78y64 } CellNode (78 @ 65) (20)Px52y55 { Px52y56, Px53y55, Px52y54, Px51y55 } CellNode (52 @ 55) (20)Px66y66 { Px66y67, Px65y66, Px66y65, Px67y66 } CellNode (66 @ 66) (20)Px40y56 { Px40y55, Px40y57, Px39y56, Px41y56 } CellNode (40 @ 56) (20)Px54y67 { Px54y68, Px55y67, Px53y67, Px54y66 } CellNode (54 @ 67) (20)Px33y60 { Px32y60, Px33y59, Px34y60, Px33y61 } CellNode (33 @ 60) (20)Px72y60 { Px72y61, Px72y59, Px73y60, Px71y60 } CellNode (72 @ 60) (20)Px58y46 { Px58y47, Px59y46, Px57y46, Px58y45 } CellNode (58 @ 46) (20)Px38y4 { Px39y4, Px38y5 } CellNode (38 @ 4) (20)Px32y36 { Px32y37, Px33y36, Px31y36, Px32y35 } CellNode (32 @ 36) (20)Px46y47 { Px45y47, Px46y46, Px47y47, Px46y48 } CellNode (46 @ 47) (20)Px34y48 { Px34y49, Px33y48, Px35y48, Px34y47 } CellNode (34 @ 48) (20)Px71y36 { Px71y37, Px72y36, Px70y36, Px71y35 } CellNode (71 @ 36) (20)Px8y54 { Px8y53, Px8y55, Px9y54, Px7y54 } CellNode (8 @ 54) (20)Px64y40 { Px65y40, Px64y41, Px63y40, Px64y39 } CellNode (64 @ 40) (20)Px73y48 { Px74y48, Px72y48, Px73y49, Px73y47 } CellNode (73 @ 48) (20)Px52y41 { Px52y40, Px53y41, Px51y41, Px52y42 } CellNode (52 @ 41) (20)Px61y49 { Px61y48, Px61y50, Px62y49, Px60y49 } CellNode (61 @ 49) (20)Px69y84 { Px69y83, Px68y84, Px70y84 } CellNode (69 @ 84) (20)Px40y42 { Px40y43, Px39y42, Px41y42, Px40y41 } CellNode (40 @ 42) (20)Px43y74 { Px43y75, Px44y74, Px42y74, Px43y73 } CellNode (43 @ 74) (20)Px26y28 { Px25y28, Px26y27, Px26y29, Px27y28 } CellNode (26 @ 28) (20)Px31y75 { Px32y75, Px30y75, Px31y74, Px31y76 } CellNode (31 @ 75) (20)Px19y32 { Px19y33, Px19y31, Px20y32, Px18y32 } CellNode (19 @ 32) (20)Px56y20 { Px55y20, Px56y19, Px56y21, Px57y20 } CellNode (56 @ 20) (20)Px82y74 { Px82y75, Px83y74, Px81y74, Px82y73 } CellNode (82 @ 74) (20)Px65y28 { Px65y29, Px66y28, Px64y28 } CellNode (65 @ 28) (20)Px5y81 { Px5y82, Px6y81, Px4y81, Px5y80 } CellNode (5 @ 81) (20)Px70y75 { Px71y75, Px69y75, Px70y74, Px70y76 } CellNode (70 @ 75) (20)Px12y80 { Px13y80, Px12y81, Px11y80, Px12y79 } CellNode (12 @ 80) (20)Px53y29 { Px54y29, Px53y28, Px52y29, Px53y30 } CellNode (53 @ 29) (20)Px58y32 { Px57y32, Px58y31, Px58y33, Px59y32 } CellNode (58 @ 32) (20)Px32y22 { Px31y22, Px33y22, Px32y23, Px32y21 } CellNode (32 @ 22) (20)Px49y65 { Px49y64, Px49y66, Px50y65, Px48y65 } CellNode (49 @ 65) (20)Px51y80 { Px52y80, Px51y81, Px50y80, Px51y79 } CellNode (51 @ 80) (20)Px20y23 { Px19y23, Px21y23, Px20y22, Px20y24 } CellNode (20 @ 23) (20)Px51y6 { Px51y5 } CellNode (51 @ 6) (20)Px37y66 { Px38y66, Px37y65, Px36y66, Px37y67 } CellNode (37 @ 66) (20)Px25y67 { Px26y67, Px25y66, Px24y67 } CellNode (25 @ 67) (20)Px39y78 { Px39y79, Px40y78, Px38y78, Px39y77 } CellNode (39 @ 78) (20)Px76y66 { Px77y66, Px75y66, Px76y65, Px76y67 } CellNode (76 @ 66) (20)Px13y68 { Px14y68, Px13y67, Px13y69, Px12y68 } CellNode (13 @ 68) (20)Px50y56 { Px49y56, Px50y55, Px50y57, Px51y56 } CellNode (50 @ 56) (20)Px69y70 { Px70y70, Px68y70, Px69y71, Px69y69 } CellNode (69 @ 70) (20)Px38y13 { Px38y12, Px39y13, Px37y13, Px38y14 } CellNode (38 @ 13) (20)Px43y60 { Px42y60, Px43y59, Px44y60, Px43y61 } CellNode (43 @ 60) (20)Px64y67 { Px65y67, Px64y68, Px64y66, Px63y67 } CellNode (64 @ 67) (20)Px52y68 { Px53y68, Px52y67, Px52y69, Px51y68 } CellNode (52 @ 68) (20)Px31y61 { Px31y62, Px30y61, Px32y61, Px31y60 } CellNode (31 @ 61) (20)Px40y69 { Px41y69, Px39y69, Px40y68, Px40y70 } CellNode (40 @ 69) (20)Px65y14 { Px66y14, Px65y15, Px64y14, Px65y13 } CellNode (65 @ 14) (20)Px70y61 { Px70y62, Px69y61, Px71y61, Px70y60 } CellNode (70 @ 61) (20)Px19y59 { Px18y59, Px19y58, Px19y60, Px20y59 } CellNode (19 @ 59) (20)Px2y76 { Px3y76, Px1y76, Px2y75, Px2y77 } CellNode (2 @ 76) (20)Px56y47 { Px57y47, Px55y47, Px56y46, Px56y48 } CellNode (56 @ 47) (20)Px49y9 { Px50y9, Px49y10 } CellNode (49 @ 9) (20)Px35y40 { Px35y39, Px35y41, Px36y40, Px34y40 } CellNode (35 @ 40) (20)Px44y48 { Px44y49, Px45y48, Px43y48, Px44y47 } CellNode (44 @ 48) (20)Px49y51 { Px48y51, Px49y52, Px49y50, Px50y51 } CellNode (49 @ 51) (20)Px58y59 { Px57y59, Px58y58, Px58y60, Px59y59 } CellNode (58 @ 59) (20)Px32y49 { Px31y49, Px32y48, Px32y50, Px33y49 } CellNode (32 @ 49) (20)Px37y52 { Px38y52, Px36y52, Px37y53, Px37y51 } CellNode (37 @ 52) (20)Px43y3 { Px43y2, Px44y3, Px43y4, Px42y3 } CellNode (43 @ 3) (20)Px74y40 { Px74y39, Px74y41, Px75y40, Px73y40 } CellNode (74 @ 40) (20)Px6y55 { Px7y55, Px5y55, Px6y54, Px6y56 } CellNode (6 @ 55) (20)Px25y53 { Px25y54, Px26y53, Px24y53 } CellNode (25 @ 53) (20)Px62y41 { Px62y40, Px61y41, Px62y42, Px63y41 } CellNode (62 @ 41) (20)Px71y49 { Px70y49, Px71y48, Px71y50, Px72y49 } CellNode (71 @ 49) (20)Px79y84 { Px78y84, Px79y83, Px80y84 } CellNode (79 @ 84) (20)Px8y67 { Px9y67, Px7y67, Px8y68, Px8y66 } CellNode (8 @ 67) (20)Px76y52 { Px77y52, Px76y53, Px75y52, Px76y51 } CellNode (76 @ 52) (20)Px50y42 { Px51y42, Px49y42, Px50y43, Px50y41 } CellNode (50 @ 42) (20)Px24y29 { Px25y29, Px24y28, Px23y29, Px24y30 } CellNode (24 @ 29) (20)Px29y32 { Px30y32, Px28y32, Px29y31, Px29y33 } CellNode (29 @ 32) (20)Px17y33 { Px18y33, Px16y33, Px17y34, Px17y32 } CellNode (17 @ 33) (20)Px22y80 { Px23y80, Px22y81, Px21y80, Px22y79 } CellNode (22 @ 80) (20)Px54y21 { Px54y20, Px53y21 } CellNode (54 @ 21) (20)Px68y32 { Px68y31, Px67y32, Px68y33, Px69y32 } CellNode (68 @ 32) (20)Px63y29 { Px64y29, Px63y28, Px62y29, Px63y30 } CellNode (63 @ 29) (20)Px10y81 { Px10y80, Px9y81, Px10y82, Px11y81 } CellNode (10 @ 81) (20)Px42y22 { Px41y22, Px43y22, Px42y23 } CellNode (42 @ 22) (20)Px56y33 { Px57y33, Px55y33, Px56y34, Px56y32 } CellNode (56 @ 33) (20)Px61y80 { Px62y80, Px61y81, Px60y80, Px61y79 } CellNode (61 @ 80) (20)Px30y23 { Px29y23, Px31y23, Px30y22, Px30y24 } CellNode (30 @ 23) (20)Px44y34 { Px44y33, Px44y35, Px43y34, Px45y34 } CellNode (44 @ 34) (20)Px32y35 { Px33y35, Px31y35, Px32y34, Px32y36 } CellNode (32 @ 35) (20)Px35y67 { Px35y68, Px36y67, Px35y66, Px34y67 } CellNode (35 @ 67) (20)Px49y78 { Px49y79, Px48y78, Px50y78, Px49y77 } CellNode (49 @ 78) (20)Px28y71 { Px28y72, Px27y71, Px29y71, Px28y70 } CellNode (28 @ 71) (20)Px37y79 { Px37y80, Px38y79, Px36y79, Px37y78 } CellNode (37 @ 79) (20)Px11y69 { Px11y70, Px12y69, Px11y68, Px10y69 } CellNode (11 @ 69) (20)Px74y67 { Px74y68, Px75y67, Px73y67, Px74y66 } CellNode (74 @ 67) (20)Px88y78 { Px88y79, Px89y78, Px87y78, Px88y77 } CellNode (88 @ 78) (20)Px16y72 { Px15y72, Px16y73, Px16y71, Px17y72 } CellNode (16 @ 72) (20)Px62y68 { Px63y68, Px61y68, Px62y67, Px62y69 } CellNode (62 @ 68) (20)Px67y71 { Px68y71, Px66y71, Px67y72, Px67y70 } CellNode (67 @ 71) (20)Px76y79 { Px76y80, Px77y79, Px75y79, Px76y78 } CellNode (76 @ 79) (20)Px79y70 { Px79y71, Px80y70, Px78y70, Px79y69 } CellNode (79 @ 70) (20)Px50y69 { Px50y70, Px51y69, Px49y69, Px50y68 } CellNode (50 @ 69) (20)Px55y72 { Px55y73, Px56y72, Px54y72 } CellNode (55 @ 72) (20)Px36y14 { Px36y15, Px37y14, Px36y13, Px35y14 } CellNode (36 @ 14) (20)Px48y13 { Px47y13, Px48y12, Px48y14, Px49y13 } CellNode (48 @ 13) (20)Px41y61 { Px41y62, Px42y61, Px41y60, Px40y61 } CellNode (41 @ 61) (20)Px53y60 { Px54y60, Px52y60, Px53y59, Px53y61 } CellNode (53 @ 60) (20)Px80y61 { Px80y62, Px79y61, Px81y61, Px80y60 } CellNode (80 @ 61) (20)Px59y1 { Px58y1, Px59y2, Px60y1 } CellNode (59 @ 1) (20)Px63y15 { Px64y15, Px62y15, Px63y16, Px63y14 } CellNode (63 @ 15) (20)Px29y59 { Px30y59, Px28y59, Px29y58, Px29y60 } CellNode (29 @ 59) (20)Px51y16 { Px51y17, Px50y16, Px51y15, Px52y16 } CellNode (51 @ 16) (20)Px59y51 { Px60y51, Px58y51, Px59y50, Px59y52 } CellNode (59 @ 51) (20)Px33y41 { Px33y40, Px32y41, Px33y42, Px34y41 } CellNode (33 @ 41) (20)Px68y59 { Px68y58, Px67y59, Px68y60, Px69y59 } CellNode (68 @ 59) (20)Px47y52 { Px48y52, Px47y53, Px47y51, Px46y52 } CellNode (47 @ 52) (20)Px42y49 { Px41y49, Px42y48, Px42y50, Px43y49 } CellNode (42 @ 49) (20)Px35y53 { Px34y53, Px35y52, Px35y54, Px36y53 } CellNode (35 @ 53) (20)Px72y41 { Px72y40, Px72y42, Px73y41 } CellNode (72 @ 41) (20)Px4y56 { Px4y57, Px5y56, Px4y55, Px3y56 } CellNode (4 @ 56) (20)Px23y54 { Px23y55, Px22y54, Px24y54, Px23y53 } CellNode (23 @ 54) (20)Px60y42 { Px60y43, Px61y42, Px60y41, Px59y42 } CellNode (60 @ 42) (20)Px11y55 { Px11y54, Px11y56, Px10y55 } CellNode (11 @ 55) (20)Px74y53 { Px75y53, Px74y52, Px74y54, Px73y53 } CellNode (74 @ 53) (20)Px6y68 { Px6y69, Px7y68, Px5y68, Px6y67 } CellNode (6 @ 68) (20)Px62y54 { Px63y54, Px61y54, Px62y55, Px62y53 } CellNode (62 @ 54) (20)Px39y32 { Px40y32, Px38y32, Px39y31, Px39y33 } CellNode (39 @ 32) (20)Px27y33 { Px27y34, Px28y33, Px26y33, Px27y32 } CellNode (27 @ 33) (20)Px32y80 { Px32y79, Px32y81, Px33y80, Px31y80 } CellNode (32 @ 80) (20)Px15y34 { Px15y35, Px15y33, Px16y34 } CellNode (15 @ 34) (20)Px29y45 { Px29y46, Px28y45, Px30y45, Px29y44 } CellNode (29 @ 45) (20)Px20y81 { Px21y81, Px20y80, Px20y82, Px19y81 } CellNode (20 @ 81) (20)Px66y33 { Px66y34, Px67y33, Px65y33, Px66y32 } CellNode (66 @ 33) (20)Px71y80 { Px71y79, Px71y81, Px72y80, Px70y80 } CellNode (71 @ 80) (20)Px40y23 { Px41y23, Px39y23, Px40y22, Px40y24 } CellNode (40 @ 23) (20)Px54y34 { Px54y33, Px55y34, Px54y35 } CellNode (54 @ 34) (20)Px68y45 { Px68y46, Px67y45, Px69y45, Px68y44 } CellNode (68 @ 45) (20)Px42y35 { Px42y36, Px43y35, Px41y35, Px42y34 } CellNode (42 @ 35) (20)Px30y36 { Px31y36, Px29y36, Px30y37, Px30y35 } CellNode (30 @ 36) (20)Px38y71 { Px38y70, Px38y72, Px39y71, Px37y71 } CellNode (38 @ 71) (20)Px47y79 { Px47y78, Px47y80, Px48y79, Px46y79 } CellNode (47 @ 79) (20)Px26y72 { Px26y73, Px25y72, Px26y71, Px27y72 } CellNode (26 @ 72) (20)Px21y69 { Px21y70, Px22y69, Px20y69, Px21y68 } CellNode (21 @ 69) (20)Px14y73 { Px14y74, Px15y73, Px13y73, Px14y72 } CellNode (14 @ 73) (20)Px77y71 { Px77y70, Px77y72, Px78y71, Px76y71 } CellNode (77 @ 71) (20)Px46y14 { Px46y15, Px47y14, Px45y14, Px46y13 } CellNode (46 @ 14) (20)Px51y61 { Px51y62, Px52y61, Px51y60, Px50y61 } CellNode (51 @ 61) (20)Px65y72 { Px66y72, Px65y71, Px64y72, Px65y73 } CellNode (65 @ 72) (20)Px34y15 { Px34y14, Px34y16, Px35y15, Px33y15 } CellNode (34 @ 15) (20)Px48y26 { Px48y25, Px47y26 } CellNode (48 @ 26) (20)Px86y79 { Px86y78, Px86y80, Px87y79, Px85y79 } CellNode (86 @ 79) (20)Px53y73 { Px54y73, Px52y73, Px53y74, Px53y72 } CellNode (53 @ 73) (20)Px60y69 { Px61y69, Px59y69, Px60y68 } CellNode (60 @ 69) (20)Px72y68 { Px73y68, Px71y68, Px72y67, Px72y69 } CellNode (72 @ 68) (20)Px39y59 { Px40y59, Px38y59, Px39y58, Px39y60 } CellNode (39 @ 59) (20)Px41y74 { Px40y74, Px41y73, Px42y74, Px41y75 } CellNode (41 @ 74) (20)Px36y27 { Px36y26, Px37y27, Px35y27, Px36y28 } CellNode (36 @ 27) (20)Px92y73 { Px93y73, Px92y74, Px91y73 } CellNode (92 @ 73) (20)Px61y16 { Px61y17, Px61y15, Px60y16, Px62y16 } CellNode (61 @ 16) (20)Px60y7 { Px59y7, Px60y8, Px60y6, Px61y7 } CellNode (60 @ 7) (20)Px78y59 { Px79y59, Px78y58, Px77y59, Px78y60 } CellNode (78 @ 59) (20)Px3y81 { Px3y82, Px4y81, Px2y81, Px3y80 } CellNode (3 @ 81) (20)Px57y52 { Px57y53, Px58y52, Px57y51, Px56y52 } CellNode (57 @ 52) (20)Px69y51 { Px70y51, Px68y51, Px69y50, Px69y52 } CellNode (69 @ 51) (20)Px80y74 { Px80y75, Px80y73, Px81y74, Px79y74 } CellNode (80 @ 74) (20)Px45y53 { Px46y53, Px44y53, Px45y52, Px45y54 } CellNode (45 @ 53) (20)Px59y64 { Px59y63, Px59y65, Px60y64 } CellNode (59 @ 64) (20)Px33y54 { Px34y54, Px33y55, Px33y53, Px32y54 } CellNode (33 @ 54) (20)Px47y65 { Px46y65, Px48y65, Px47y64, Px47y66 } CellNode (47 @ 65) (20)Px21y55 { Px21y54, Px21y56, Px20y55, Px22y55 } CellNode (21 @ 55) (20)Px7y60 { Px7y59, Px7y61, Px8y60, Px6y60 } CellNode (7 @ 60) (20)Px72y54 { Px72y55, Px73y54, Px72y53, Px71y54 } CellNode (72 @ 54) (20)Px4y69 { Px3y69, Px4y68, Px4y70, Px5y69 } CellNode (4 @ 69) (20)Px9y72 { Px9y71, Px10y72, Px9y73, Px8y72 } CellNode (9 @ 72) (20)Px25y34 { Px24y34, Px25y33, Px25y35, Px26y34 } CellNode (25 @ 34) (20)Px39y45 { Px39y46, Px38y45, Px40y45, Px39y44 } CellNode (39 @ 45) (20)Px30y81 { Px31y81, Px30y80, Px29y81, Px30y82 } CellNode (30 @ 81) (20)Px76y33 { Px76y32, Px76y34, Px75y33 } CellNode (76 @ 33) (20)Px27y46 { Px26y46, Px27y45, Px28y46, Px27y47 } CellNode (27 @ 46) (20)Px55y7 { Px56y7, Px55y8, Px54y7, Px55y6 } CellNode (55 @ 7) (20)Px64y34 { Px64y33, Px63y34, Px64y35, Px65y34 } CellNode (64 @ 34) (20)Px18y79 { Px17y79, Px18y80, Px19y79, Px18y78 } CellNode (18 @ 79) (20)Px52y35 { Px52y36, Px53y35, Px52y34, Px51y35 } CellNode (52 @ 35) (20)Px52y4 { Px53y4, Px51y4, Px52y5, Px52y3 } CellNode (52 @ 4) (20)Px66y46 { Px67y46, Px66y45, Px66y47, Px65y46 } CellNode (66 @ 46) (20)Px40y36 { Px41y36, Px39y36, Px40y37, Px40y35 } CellNode (40 @ 36) (20)Px54y47 { Px55y47, Px53y47, Px54y48, Px54y46 } CellNode (54 @ 47) (20)Px57y79 { Px57y78, Px56y79, Px57y80 } CellNode (57 @ 79) (20)Px36y72 { Px37y72, Px36y71, Px35y72, Px36y73 } CellNode (36 @ 72) (20)Px19y26 { Px19y27, Px20y26, Px18y26, Px19y25 } CellNode (19 @ 26) (20)Px24y73 { Px24y74, Px25y73, Px23y73, Px24y72 } CellNode (24 @ 73) (20)Px87y71 { Px86y71, Px87y72 } CellNode (87 @ 71) (20)Px96y79 { Px96y78, Px96y80, Px97y79, Px95y79 } CellNode (96 @ 79) (20)Px38y84 { Px38y83, Px37y84, Px39y84 } CellNode (38 @ 84) (20)Px12y74 { Px12y73, Px11y74, Px13y74, Px12y75 } CellNode (12 @ 74) (20)Px75y72 { Px76y72, Px74y72, Px75y71, Px75y73 } CellNode (75 @ 72) (20)Px89y83 { Px89y82, Px90y83, Px88y83, Px89y84 } CellNode (89 @ 83) (20)Px63y73 { Px63y74, Px64y73, Px62y73, Px63y72 } CellNode (63 @ 73) (20)Px32y16 { Px33y16, Px32y15, Px31y16, Px32y17 } CellNode (32 @ 16) (20)Px77y84 { Px78y84, Px77y83, Px76y84 } CellNode (77 @ 84) (20)Px46y27 { Px45y27, Px46y26, Px47y27, Px46y28 } CellNode (46 @ 27) (20)Px51y74 { Px50y74, Px51y73, Px52y74, Px51y75 } CellNode (51 @ 74) (20)Px34y28 { Px34y29, Px33y28, Px35y28, Px34y27 } CellNode (34 @ 28) (20)Px22y29 { Px22y30, Px23y29, Px21y29, Px22y28 } CellNode (22 @ 29) (20)Px90y74 { Px90y75, Px90y73, Px91y74, Px89y74 } CellNode (90 @ 74) (20)Px64y20 { Px65y20, Px63y20, Px64y21, Px64y19 } CellNode (64 @ 20) (20)Px73y28 { Px72y28, Px73y29, Px73y27 } CellNode (73 @ 28) (20)Px18y65 { Px18y66, Px18y64, Px17y65, Px19y65 } CellNode (18 @ 65) (20)Px1y82 { Px1y83, Px2y82, Px1y81 } CellNode (1 @ 82) (20)Px40y8 { Px40y7, Px41y8, Px39y8, Px40y9 } CellNode (40 @ 8) (20)Px61y29 { Px61y30, Px62y29, Px60y29, Px61y28 } CellNode (61 @ 29) (20)Px69y64 { Px69y63, Px69y65, Px70y64, Px68y64 } CellNode (69 @ 64) (20)Px44y1 { Px43y1, Px44y2, Px45y1 } CellNode (44 @ 1) (20)Px43y54 { Px43y55, Px44y54, Px42y54, Px43y53 } CellNode (43 @ 54) (20)Px47y4 { Px46y4, Px47y3, Px48y4 } CellNode (47 @ 4) (20)Px31y55 { Px31y54, Px30y55, Px31y56, Px32y55 } CellNode (31 @ 55) (20)Px45y66 { Px46y66, Px44y66, Px45y67, Px45y65 } CellNode (45 @ 66) (20)Px5y61 { Px6y61, Px5y60, Px4y61, Px5y62 } CellNode (5 @ 61) (20)Px33y67 { Px32y67, Px33y66, Px34y67, Px33y68 } CellNode (33 @ 67) (20)Px70y55 { Px70y54, Px70y56, Px69y55, Px71y55 } CellNode (70 @ 55) (20)Px58y12 { Px59y12, Px58y13, Px58y11 } CellNode (58 @ 12) (20)Px7y73 { Px8y73, Px7y74, Px6y73, Px7y72 } CellNode (7 @ 73) (20)Px49y45 { Px49y46, Px50y45, Px48y45, Px49y44 } CellNode (49 @ 45) (20)Px37y46 { Px37y45, Px36y46, Px38y46, Px37y47 } CellNode (37 @ 46) (20)Px35y8 { Px36y8, Px35y7, Px35y9 } CellNode (35 @ 8) (20)Px50y36 { Px49y36, Px50y37, Px51y36, Px50y35 } CellNode (50 @ 36) (20)Px64y47 { Px64y48, Px65y47, Px63y47, Px64y46 } CellNode (64 @ 47) (20)Px43y40 { Px43y39, Px43y41, Px42y40, Px44y40 } CellNode (43 @ 40) (20)Px52y48 { Px52y47, Px53y48, Px52y49, Px51y48 } CellNode (52 @ 48) (20)Px29y26 { Px29y27, Px30y26, Px28y26, Px29y25 } CellNode (29 @ 26) (20)Px31y41 { Px31y42, Px30y41, Px32y41, Px31y40 } CellNode (31 @ 41) (20)Px40y49 { Px41y49, Px39y49, Px40y48, Px40y50 } CellNode (40 @ 49) (20)Px48y84 { Px47y84, Px48y83, Px49y84 } CellNode (48 @ 84) (20)Px17y27 { Px17y26, Px16y27, Px17y28, Px18y27 } CellNode (17 @ 27) (20)Px22y74 { Px23y74, Px22y73, Px21y74, Px22y75 } CellNode (22 @ 74) (20)Px68y26 { Px68y27, Px69y26, Px67y26, Px68y25 } CellNode (68 @ 26) (20)Px10y75 { Px9y75, Px10y76, Px11y75, Px10y74 } CellNode (10 @ 75) (20)Px73y73 { Px73y74, Px74y73, Px73y72, Px72y73 } CellNode (73 @ 73) (20)Px2y56 { Px2y57, Px2y55, Px3y56, Px1y56 } CellNode (2 @ 56) (20)Px87y84 { Px88y84, Px87y83, Px86y84 } CellNode (87 @ 84) (20)Px61y74 { Px62y74, Px61y73, Px60y74, Px61y75 } CellNode (61 @ 74) (20)Px35y20 { Px34y20, Px36y20, Px35y19 } CellNode (35 @ 20) (20)Px49y31 { Px50y31, Px49y30, Px49y32, Px48y31 } CellNode (49 @ 31) (20)Px44y28 { Px44y29, Px45y28, Px44y27, Px43y28 } CellNode (44 @ 28) (20)Px23y21 { Px23y22, Px24y21 } CellNode (23 @ 21) (20)Px58y39 { Px58y38, Px58y40, Px59y39, Px57y39 } CellNode (58 @ 39) (20)Px37y32 { Px37y33, Px38y32, Px36y32, Px37y31 } CellNode (37 @ 32) (20)Px32y29 { Px32y28, Px32y30, Px33y29, Px31y29 } CellNode (32 @ 29) (20)Px28y65 { Px29y65, Px27y65, Px28y64, Px28y66 } CellNode (28 @ 65) (20)Px62y21 { Px61y21, Px63y21, Px62y22, Px62y20 } CellNode (62 @ 21) (20)Px71y29 { Px71y30, Px72y29, Px70y29, Px71y28 } CellNode (71 @ 29) (20)Px16y66 { Px16y67, Px17y66, Px16y65, Px15y66 } CellNode (16 @ 66) (20)Px79y64 { Px79y63, Px79y65, Px80y64, Px78y64 } CellNode (79 @ 64) (20)Px67y65 { Px68y65, Px67y64, Px66y65, Px67y66 } CellNode (67 @ 65) (20)Px55y66 { Px56y66, Px55y67, Px54y66, Px55y65 } CellNode (55 @ 66) (20)Px69y77 { Px70y77, Px68y77, Px69y78, Px69y76 } CellNode (69 @ 77) (20)Px43y67 { Px43y68, Px43y66, Px44y67, Px42y67 } CellNode (43 @ 67) (20)Px48y70 { Px48y69, Px49y70, Px47y70, Px48y71 } CellNode (48 @ 70) (20)Px80y55 { Px79y55, Px80y54, Px80y56 } CellNode (80 @ 55) (20)Px22y60 { Px22y61, Px21y60, Px23y60, Px22y59 } CellNode (22 @ 60) (20)Px31y68 { Px31y69, Px30y68, Px32y68, Px31y67 } CellNode (31 @ 68) (20)Px10y61 { Px10y60, Px9y61, Px11y61, Px10y62 } CellNode (10 @ 61) (20)Px82y67 { Px81y67, Px82y66, Px82y68, Px83y67 } CellNode (82 @ 67) (20)Px5y74 { Px4y74, Px6y74, Px5y75, Px5y73 } CellNode (5 @ 74) (20)Px61y60 { Px62y60, Px61y61, Px60y60, Px61y59 } CellNode (61 @ 60) (20)Px70y68 { Px71y68, Px69y68, Px70y69, Px70y67 } CellNode (70 @ 68) (20)Px47y46 { Px48y46, Px46y46, Px47y45, Px47y47 } CellNode (47 @ 46) (20)Px44y14 { Px44y15, Px43y14, Px45y14, Px44y13 } CellNode (44 @ 14) (20)Px35y47 { Px35y48, Px36y47, Px35y46, Px34y47 } CellNode (35 @ 47) (20)Px49y58 { Px48y58, Px50y58, Px49y57, Px49y59 } CellNode (49 @ 58) (20)Px9y53 { Px8y53, Px10y53, Px9y54, Px9y52 } CellNode (9 @ 53) (20)Px28y51 { Px28y52, Px27y51, Px29y51, Px28y50 } CellNode (28 @ 51) (20)Px37y59 { Px38y59, Px36y59, Px37y58, Px37y60 } CellNode (37 @ 59) (20)Px11y49 { Px10y49, Px11y50 } CellNode (11 @ 49) (20)Px19y84 { Px20y84, Px19y83, Px18y84 } CellNode (19 @ 84) (20)Px53y40 { Px52y40, Px53y39, Px53y41, Px54y40 } CellNode (53 @ 40) (20)Px74y47 { Px74y48, Px75y47, Px73y47, Px74y46 } CellNode (74 @ 47) (20)Px67y51 { Px68y51, Px66y51, Px67y52, Px67y50 } CellNode (67 @ 51) (20)Px62y48 { Px62y47, Px61y48, Px63y48, Px62y49 } CellNode (62 @ 48) (20)Px41y41 { Px42y41, Px41y42, Px40y41, Px41y40 } CellNode (41 @ 41) (20)Px76y59 { Px77y59, Px75y59, Px76y58, Px76y60 } CellNode (76 @ 59) (20)Px55y52 { Px56y52, Px55y51, Px55y53, Px54y52 } CellNode (55 @ 52) (20)Px58y84 { Px57y84, Px59y84, Px58y83 } CellNode (58 @ 84) (20)Px50y49 { Px51y49, Px49y49, Px50y48, Px50y50 } CellNode (50 @ 49) (20)Px15y28 { Px15y29, Px16y28, Px15y27 } CellNode (15 @ 28) (20)Px29y39 { Px30y39, Px28y39, Px29y38, Px29y40 } CellNode (29 @ 39) (20)Px97y84 { Px97y83, Px96y84 } CellNode (97 @ 84) (20)Px54y28 { Px54y29, Px55y28, Px53y28, Px54y27 } CellNode (54 @ 28) (20)Px59y31 { Px60y31, Px59y30, Px58y31, Px59y32 } CellNode (59 @ 31) (20)Px68y39 { Px68y40, Px67y39 } CellNode (68 @ 39) (20)Px64y8 { Px63y8, Px64y9, Px64y7, Px65y8 } CellNode (64 @ 8) (20)Px42y29 { Px41y29, Px42y30, Px43y29, Px42y28 } CellNode (42 @ 29) (20)Px47y32 { Px48y32, Px46y32, Px47y33, Px47y31 } CellNode (47 @ 32) (20)Px21y22 { Px22y22, Px20y22, Px21y23 } CellNode (21 @ 22) (20)Px61y5 { Px61y6, Px60y5, Px61y4, Px62y5 } CellNode (61 @ 5) (20)Px35y33 { Px35y32, Px36y33, Px34y33, Px35y34 } CellNode (35 @ 33) (20)Px40y80 { Px39y80, Px40y79, Px40y81, Px41y80 } CellNode (40 @ 80) (20)Px23y34 { Px23y35, Px24y34, Px22y34, Px23y33 } CellNode (23 @ 34) (20)Px26y66 { Px26y67, Px27y66, Px25y66, Px26y65 } CellNode (26 @ 66) (20)Px60y22 { Px61y22, Px60y21, Px59y22, Px60y23 } CellNode (60 @ 22) (20)Px74y33 { Px74y32, Px74y34, Px73y33, Px75y33 } CellNode (74 @ 33) (20)Px14y67 { Px15y67, Px13y67, Px14y66, Px14y68 } CellNode (14 @ 67) (20)Px19y70 { Px19y69, Px19y71, Px20y70, Px18y70 } CellNode (19 @ 70) (20)Px28y78 { Px28y79, Px27y78, Px29y78, Px28y77 } CellNode (28 @ 78) (20)Px62y34 { Px62y35, Px63y34, Px61y34, Px62y33 } CellNode (62 @ 34) (20)Px65y66 { Px65y67, Px66y66, Px65y65, Px64y66 } CellNode (65 @ 66) (20)Px39y12 { Px38y12, Px39y11, Px39y13, Px40y12 } CellNode (39 @ 12) (20)Px16y79 { Px15y79, Px16y78, Px16y80, Px17y79 } CellNode (16 @ 79) (20)Px79y77 { Px79y78, Px78y77, Px80y77, Px79y76 } CellNode (79 @ 77) (20)Px53y67 { Px54y67, Px52y67, Px53y66, Px53y68 } CellNode (53 @ 67) (20)Px32y60 { Px32y59, Px32y61, Px33y60, Px31y60 } CellNode (32 @ 60) (20)Px67y78 { Px68y78, Px67y79, Px66y78, Px67y77 } CellNode (67 @ 78) (20)Px46y71 { Px45y71, Px47y71, Px46y70, Px46y72 } CellNode (46 @ 71) (20)Px41y68 { Px41y69, Px42y68, Px41y67, Px40y68 } CellNode (41 @ 68) (20)Px20y61 { Px20y60, Px20y62, Px19y61, Px21y61 } CellNode (20 @ 61) (20)Px55y79 { Px54y79, Px55y78, Px55y80, Px56y79 } CellNode (55 @ 79) (20)Px34y72 { Px35y72, Px33y72, Px34y73, Px34y71 } CellNode (34 @ 72) (20)Px66y13 { Px65y13, Px66y14 } CellNode (66 @ 13) (20)Px71y60 { Px71y59, Px71y61, Px72y60, Px70y60 } CellNode (71 @ 60) (20)Px85y71 { Px86y71, Px84y71, Px85y70, Px85y72 } CellNode (85 @ 71) (20)Px59y8 { Px59y7, Px60y8, Px59y9, Px58y8 } CellNode (59 @ 8) (20)Px54y14 { Px53y14, Px54y15, Px54y13 } CellNode (54 @ 14) (20)Px94y79 { Px93y79, Px94y78, Px94y80, Px95y79 } CellNode (94 @ 79) (20)Px42y15 { Px42y16, Px41y15, Px42y14, Px43y15 } CellNode (42 @ 15) (20)Px80y68 { Px81y68, Px79y68, Px80y69, Px80y67 } CellNode (80 @ 68) (20)Px56y5 { Px56y4, Px57y5, Px55y5, Px56y6 } CellNode (56 @ 5) (20)Px59y58 { Px60y58, Px58y58, Px59y57, Px59y59 } CellNode (59 @ 58) (20)Px30y16 { Px30y15, Px30y17, Px31y16 } CellNode (30 @ 16) (20)Px33y48 { Px33y47, Px32y48, Px33y49, Px34y48 } CellNode (33 @ 48) (20)Px38y51 { Px38y52, Px39y51, Px38y50, Px37y51 } CellNode (38 @ 51) (20)Px53y2 { Px53y1, Px54y2, Px52y2, Px53y3 } CellNode (53 @ 2) (20)Px47y59 { Px47y60, Px48y59, Px47y58, Px46y59 } CellNode (47 @ 59) (20)Px26y52 { Px27y52, Px26y51, Px26y53 } CellNode (26 @ 52) (20)Px3y75 { Px4y75, Px3y74, Px2y75, Px3y76 } CellNode (3 @ 75) (20)Px72y48 { Px71y48, Px72y47, Px72y49, Px73y48 } CellNode (72 @ 48) (20)Px77y51 { Px76y51, Px77y52 } CellNode (77 @ 51) (20)Px9y66 { Px9y67, Px9y65, Px8y66, Px10y66 } CellNode (9 @ 66) (20)Px51y41 { Px51y42, Px52y41, Px51y40, Px50y41 } CellNode (51 @ 41) (20)Px60y49 { Px61y49, Px60y48, Px59y49, Px60y50 } CellNode (60 @ 49) (20)Px65y52 { Px66y52, Px65y51, Px65y53, Px64y52 } CellNode (65 @ 52) (20)Px53y53 { Px54y53, Px52y53, Px53y54, Px53y52 } CellNode (53 @ 53) (20)Px39y39 { Px40y39, Px38y39, Px39y38, Px39y40 } CellNode (39 @ 39) (20)Px41y54 { Px41y53, Px42y54, Px40y54, Px41y55 } CellNode (41 @ 54) (20)Px18y32 { Px18y33, Px19y32, Px17y32, Px18y31 } CellNode (18 @ 32) (20)Px69y31 { Px70y31, Px69y30, Px68y31, Px69y32 } CellNode (69 @ 31) (20)Px11y80 { Px12y80, Px10y80, Px11y79, Px11y81 } CellNode (11 @ 80) (20)Px3y61 { Px4y61, Px2y61, Px3y62, Px3y60 } CellNode (3 @ 61) (20)Px57y32 { Px57y33, Px58y32, Px57y31, Px56y32 } CellNode (57 @ 32) (20)Px45y33 { Px44y33, Px45y32, Px45y34, Px46y33 } CellNode (45 @ 33) (20)Px59y44 { Px60y44, Px59y45, Px58y44, Px59y43 } CellNode (59 @ 44) (20)Px50y80 { Px51y80, Px50y79, Px50y81, Px49y80 } CellNode (50 @ 80) (20)Px41y6 { Px41y5, Px42y6, Px40y6, Px41y7 } CellNode (41 @ 6) (20)Px48y2 { Px48y3, Px49y2, Px48y1, Px47y2 } CellNode (48 @ 2) (20)Px33y34 { Px33y35, Px34y34, Px32y34, Px33y33 } CellNode (33 @ 34) (20)Px21y35 { Px20y35, Px21y34, Px22y35 } CellNode (21 @ 35) (20)Px29y70 { Px28y70, Px29y71, Px30y70 } CellNode (29 @ 70) (20)Px38y78 { Px37y78, Px38y79, Px39y78, Px38y77 } CellNode (38 @ 78) (20)Px72y34 { Px72y35, Px71y34, Px73y34, Px72y33 } CellNode (72 @ 34) (20)Px12y68 { Px12y69, Px13y68, Px12y67, Px11y68 } CellNode (12 @ 68) (20)Px4y49 { Px5y49, Px4y50, Px3y49 } CellNode (4 @ 49) (20)Px26y79 { Px25y79, Px26y78, Px26y80, Px27y79 } CellNode (26 @ 79) (20)Px60y35 { Px61y35, Px60y36, Px59y35, Px60y34 } CellNode (60 @ 35) (20)Px89y77 { Px89y78, Px90y77, Px89y76, Px88y77 } CellNode (89 @ 77) (20)Px68y70 { Px68y69, Px68y71, Px69y70, Px67y70 } CellNode (68 @ 70) (20)Px77y78 { Px77y77, Px78y78, Px77y79, Px76y78 } CellNode (77 @ 78) (20)Px17y71 { Px17y72, Px17y70, Px16y71, Px18y71 } CellNode (17 @ 71) (20)Px51y68 { Px51y69, Px52y68, Px50y68, Px51y67 } CellNode (51 @ 68) (20)Px37y13 { Px37y14, Px38y13, Px36y13, Px37y12 } CellNode (37 @ 13) (20)Px65y79 { Px64y79, Px65y78, Px65y80, Px66y79 } CellNode (65 @ 79) (20)Px39y25 { Px39y24, Px40y25 } CellNode (39 @ 25) (20)Px44y72 { Px45y72, Px43y72, Px44y73, Px44y71 } CellNode (44 @ 72) (20)Px30y61 { Px30y60, Px29y61, Px30y62, Px31y61 } CellNode (30 @ 61) (20)Px27y26 { Px27y25, Px28y26, Px26y26, Px27y27 } CellNode (27 @ 26) (20)Px81y60 { Px81y61, Px80y60, Px81y59 } CellNode (81 @ 60) (20)Px32y73 { Px32y74, Px32y72, Px33y73, Px31y73 } CellNode (32 @ 73) (20)Px64y14 { Px63y14, Px64y15, Px65y14, Px64y13 } CellNode (64 @ 14) (20)Px18y59 { Px18y60, Px19y59, Px17y59, Px18y58 } CellNode (18 @ 59) (20)Px1y76 { Px2y76, Px1y77, Px1y75 } CellNode (1 @ 76) (20)Px39y9 { Px38y9, Px39y8, Px40y9, Px39y10 } CellNode (39 @ 9) (20)Px66y26 { Px66y25, Px67y26, Px65y26, Px66y27 } CellNode (66 @ 26) (20)Px20y74 { Px20y75, Px19y74, Px21y74, Px20y73 } CellNode (20 @ 74) (20)Px71y73 { Px72y73, Px71y72, Px71y74, Px70y73 } CellNode (71 @ 73) (20)Px48y51 { Px48y52, Px49y51, Px48y50, Px47y51 } CellNode (48 @ 51) (20)Px36y6 { Px36y7, Px37y6 } CellNode (36 @ 6) (20)Px83y72 { Px84y72, Px83y73, Px82y72, Px83y71 } CellNode (83 @ 72) (20)Px40y16 { Px40y17, Px41y16, Px39y16, Px40y15 } CellNode (40 @ 16) (20)Px36y52 { Px37y52, Px36y51, Px35y52, Px36y53 } CellNode (36 @ 52) (20)Px52y15 { Px53y15, Px52y16, Px51y15 } CellNode (52 @ 15) (20)Px57y59 { Px57y60, Px58y59, Px57y58, Px56y59 } CellNode (57 @ 59) (20)Px69y58 { Px70y58, Px68y58, Px69y57, Px69y59 } CellNode (69 @ 58) (20)Px24y53 { Px23y53, Px25y53, Px24y54 } CellNode (24 @ 53) (20)Px38y64 { Px37y64, Px38y65, Px38y63, Px39y64 } CellNode (38 @ 64) (20)Px75y52 { Px76y52, Px74y52, Px75y51, Px75y53 } CellNode (75 @ 52) (20)Px7y67 { Px7y66, Px7y68, Px8y67, Px6y67 } CellNode (7 @ 67) (20)Px63y53 { Px63y54, Px64y53, Px62y53, Px63y52 } CellNode (63 @ 53) (20)Px77y64 { Px76y64, Px77y65, Px77y63, Px78y64 } CellNode (77 @ 64) (20)Px51y54 { Px51y53, Px52y54, Px50y54, Px51y55 } CellNode (51 @ 54) (20)Px9y79 { Px9y78, Px9y80, Px10y79, Px8y79 } CellNode (9 @ 79) (20)Px16y33 { Px16y32, Px15y33, Px16y34, Px17y33 } CellNode (16 @ 33) (20)Px1y62 { Px1y61, Px2y62 } CellNode (1 @ 62) (20)Px55y33 { Px54y33, Px55y32, Px55y34, Px56y33 } CellNode (55 @ 33) (20)Px69y44 { Px69y45, Px70y44, Px68y44, Px69y43 } CellNode (69 @ 44) (20)Px60y80 { Px61y80, Px60y79 } CellNode (60 @ 80) (20)Px43y34 { Px43y35, Px44y34, Px42y34, Px43y33 } CellNode (43 @ 34) (20)Px57y45 { Px58y45, Px57y44, Px57y46, Px56y45 } CellNode (57 @ 45) (20)Px31y35 { Px31y34, Px31y36, Px32y35, Px30y35 } CellNode (31 @ 35) (20)Px45y46 { Px46y46, Px45y47, Px44y46, Px45y45 } CellNode (45 @ 46) (20)Px48y78 { Px47y78, Px48y79, Px49y78, Px48y77 } CellNode (48 @ 78) (20)Px27y71 { Px28y71, Px27y70, Px26y71, Px27y72 } CellNode (27 @ 71) (20)Px36y79 { Px37y79, Px36y78, Px35y79, Px36y80 } CellNode (36 @ 79) (20)Px70y35 { Px70y36, Px69y35, Px71y35, Px70y34 } CellNode (70 @ 35) (20)Px15y72 { Px15y73, Px16y72, Px14y72, Px15y71 } CellNode (15 @ 72) (20)Px7y53 { Px6y53, Px8y53, Px7y52, Px7y54 } CellNode (7 @ 53) (20)Px29y83 { Px29y84, Px28y83, Px30y83, Px29y82 } CellNode (29 @ 83) (20)Px87y78 { Px86y78, Px87y79, Px88y78, Px87y77 } CellNode (87 @ 78) (20)Px66y71 { Px67y71, Px65y71, Px66y70, Px66y72 } CellNode (66 @ 71) (20)Px17y84 { Px16y84, Px17y83, Px18y84 } CellNode (17 @ 84) (20)Px49y25 { Px48y25, Px49y24 } CellNode (49 @ 25) (20)Px54y72 { Px54y73, Px55y72, Px53y72 } CellNode (54 @ 72) (20)Px75y79 { Px76y79, Px75y78, Px74y79, Px75y80 } CellNode (75 @ 79) (20)Px37y26 { Px36y26, Px37y27 } CellNode (37 @ 26) (20)Px68y83 { Px69y83, Px68y84, Px67y83, Px68y82 } CellNode (68 @ 83) (20)Px42y73 { Px42y72, Px41y73, Px42y74, Px43y73 } CellNode (42 @ 73) (20)Px56y84 { Px57y84, Px55y84, Px56y83 } CellNode (56 @ 84) (20)Px25y27 { Px26y27, Px25y28, Px24y27, Px25y26 } CellNode (25 @ 27) (20)Px30y74 { Px30y75, Px29y74, Px31y74, Px30y73 } CellNode (30 @ 74) (20)Px62y15 { Px63y15, Px62y14, Px61y15, Px62y16 } CellNode (62 @ 15) (20)Px81y73 { Px81y72, Px80y73, Px81y74, Px82y73 } CellNode (81 @ 73) (20)Px50y16 { Px50y17, Px51y16, Px50y15, Px49y16 } CellNode (50 @ 16) (20)Px4y80 { Px4y79, Px4y81, Px5y80, Px3y80 } CellNode (4 @ 80) (20)Px52y28 { Px52y29, Px53y28, Px51y28, Px52y27 } CellNode (52 @ 28) (20)Px31y21 { Px30y21, Px31y22, Px31y20, Px32y21 } CellNode (31 @ 21) (20)Px34y53 { Px34y54, Px35y53, Px33y53, Px34y52 } CellNode (34 @ 53) (20)Px48y64 { Px49y64, Px48y63, Px47y64, Px48y65 } CellNode (48 @ 64) (20)Px22y54 { Px22y53, Px21y54, Px22y55, Px23y54 } CellNode (22 @ 54) (20)Px36y65 { Px37y65, Px36y66, Px35y65, Px36y64 } CellNode (36 @ 65) (20)Px70y21 { Px70y22, Px70y20, Px69y21 } CellNode (70 @ 21) (20)Px10y55 { Px10y56, Px11y55, Px10y54, Px9y55 } CellNode (10 @ 55) (20)Px73y53 { Px73y54, Px74y53, Px72y53, Px73y52 } CellNode (73 @ 53) (20)Px5y68 { Px6y68, Px5y67, Px4y68, Px5y69 } CellNode (5 @ 68) (20)Px24y66 { Px24y67, Px24y65, Px25y66, Px23y66 } CellNode (24 @ 66) (20)Px61y54 { Px61y53, Px62y54, Px60y54 } CellNode (61 @ 54) (20)Px75y65 { Px75y66, Px74y65, Px76y65, Px75y64 } CellNode (75 @ 65) (20)Px49y11 { Px49y10, Px50y11, Px48y11, Px49y12 } CellNode (49 @ 11) (20)Px58y19 { Px59y19, Px58y20 } CellNode (58 @ 19) (20)Px63y66 { Px63y67, Px63y65, Px64y66, Px62y66 } CellNode (63 @ 66) (20)Px28y45 { Px29y45, Px27y45, Px28y44, Px28y46 } CellNode (28 @ 45) (20)Px62y3 { Px61y3, Px62y4, Px62y2 } CellNode (62 @ 3) (20)Px67y45 { Px68y45, Px66y45, Px67y44, Px67y46 } CellNode (67 @ 45) (20)Px41y35 { Px41y34, Px41y36, Px42y35, Px40y35 } CellNode (41 @ 35) (20)Px55y46 { Px56y46, Px55y47, Px55y45, Px54y46 } CellNode (55 @ 46) (20)Px43y47 { Px43y46, Px43y48, Px42y47, Px44y47 } CellNode (43 @ 47) (20)Px31y48 { Px31y49, Px30y48, Px32y48, Px31y47 } CellNode (31 @ 48) (20)Px39y83 { Px39y84, Px40y83, Px39y82, Px38y83 } CellNode (39 @ 83) (20)Px13y73 { Px14y73, Px12y73, Px13y72, Px13y74 } CellNode (13 @ 73) (20)Px5y54 { Px5y55, Px4y54, Px6y54, Px5y53 } CellNode (5 @ 54) (20)Px27y84 { Px27y83, Px26y84, Px28y84 } CellNode (27 @ 84) (20)Px61y40 { Px62y40, Px60y40, Px61y41, Px61y39 } CellNode (61 @ 40) (20)Px59y25 { Px59y26, Px60y25, Px58y25, Px59y24 } CellNode (59 @ 25) (20)Px70y48 { Px70y49, Px69y48, Px71y48, Px70y47 } CellNode (70 @ 48) (20)Px78y83 { Px78y84, Px79y83, Px77y83, Px78y82 } CellNode (78 @ 83) (20)Px47y26 { Px47y25, Px46y26, Px47y27, Px48y26 } CellNode (47 @ 26) (20)Px52y73 { Px53y73, Px52y72, Px51y73, Px52y74 } CellNode (52 @ 73) (20)Px66y84 { Px67y84, Px65y84, Px66y83 } CellNode (66 @ 84) (20)Px35y27 { Px35y28, Px36y27, Px35y26, Px34y27 } CellNode (35 @ 27) (20)Px49y38 { Px49y39, Px49y37, Px50y38, Px48y38 } CellNode (49 @ 38) (20)Px40y74 { Px40y75, Px41y74, Px39y74, Px40y73 } CellNode (40 @ 74) (20)Px23y28 { Px22y28, Px24y28, Px23y29, Px23y27 } CellNode (23 @ 28) (20)Px28y31 { Px28y32, Px27y31, Px29y31, Px28y30 } CellNode (28 @ 31) (20)Px37y39 { Px38y39, Px36y39, Px37y38, Px37y40 } CellNode (37 @ 39) (20)Px91y73 { Px92y73, Px91y74, Px90y73 } CellNode (91 @ 73) (20)Px57y3 { Px57y2, Px58y3, Px56y3, Px57y4 } CellNode (57 @ 3) (20)Px19y64 { Px20y64, Px18y64, Px19y63, Px19y65 } CellNode (19 @ 64) (20)Px2y81 { Px3y81, Px2y80, Px1y81, Px2y82 } CellNode (2 @ 81) (20)Px53y20 { Px53y21, Px53y19, Px54y20 } CellNode (53 @ 20) (20)Px62y28 { Px61y28, Px63y28, Px62y29, Px62y27 } CellNode (62 @ 28) (20)Px67y31 { Px68y31, Px67y32, Px66y31, Px67y30 } CellNode (67 @ 31) (20)Px50y29 { Px49y29, Px50y28, Px50y30, Px51y29 } CellNode (50 @ 29) (20)Px46y65 { Px46y66, Px47y65, Px46y64, Px45y65 } CellNode (46 @ 65) (20)Px20y55 { Px20y56, Px21y55, Px20y54, Px19y55 } CellNode (20 @ 55) (20)Px29y19 { Px29y18, Px29y20, Px28y19, Px30y19 } CellNode (29 @ 19) (20)Px34y66 { Px34y65, Px33y66, Px35y66, Px34y67 } CellNode (34 @ 66) (20)Px8y72 { Px8y73, Px9y72, Px8y71, Px7y72 } CellNode (8 @ 72) (20)Px59y11 { Px58y11, Px59y10, Px59y12, Px60y11 } CellNode (59 @ 11) (20)Px68y19 { Px68y18, Px68y20, Px69y19, Px67y19 } CellNode (68 @ 19) (20)Px22y67 { Px23y67, Px21y67, Px22y68, Px22y66 } CellNode (22 @ 67) (20)Px47y12 { Px47y13, Px48y12, Px46y12, Px47y11 } CellNode (47 @ 12) (20)Px10y68 { Px10y67, Px9y68, Px10y69, Px11y68 } CellNode (10 @ 68) (20)Px73y66 { Px74y66, Px73y65, Px73y67, Px72y66 } CellNode (73 @ 66) (20)Px35y13 { Px36y13, Px34y13, Px35y14, Px35y12 } CellNode (35 @ 13) (20)Px38y45 { Px39y45, Px37y45, Px38y44, Px38y46 } CellNode (38 @ 45) (20)Px40y60 { Px40y59, Px40y61, Px41y60, Px39y60 } CellNode (40 @ 60) (20)Px61y67 { Px62y67, Px61y68, Px60y67, Px61y66 } CellNode (61 @ 67) (20)Px26y46 { Px26y45, Px26y47, Px27y46 } CellNode (26 @ 46) (20)Px28y58 { Px28y59, Px27y58, Px29y58, Px28y57 } CellNode (28 @ 58) (20)Px65y46 { Px65y47, Px66y46, Px65y45, Px64y46 } CellNode (65 @ 46) (20)Px16y59 { Px16y60, Px17y59, Px16y58 } CellNode (16 @ 59) (20)Px79y57 { Px80y57, Px78y57, Px79y56, Px79y58 } CellNode (79 @ 57) (20)Px53y47 { Px52y47, Px53y46, Px53y48, Px54y47 } CellNode (53 @ 47) (20)Px58y50 { Px58y51, Px57y50, Px59y50, Px58y49 } CellNode (58 @ 50) (20)Px67y58 { Px68y58, Px67y59, Px66y58, Px67y57 } CellNode (67 @ 58) (20)Px32y40 { Px32y41, Px33y40, Px31y40, Px32y39 } CellNode (32 @ 40) (20)Px41y48 { Px42y48, Px41y49, Px41y47, Px40y48 } CellNode (41 @ 48) (20)Px49y83 { Px49y84, Px50y83, Px48y83, Px49y82 } CellNode (49 @ 83) (20)Px46y51 { Px45y51, Px46y50, Px46y52, Px47y51 } CellNode (46 @ 51) (20)Px37y84 { Px37y83, Px36y84, Px38y84 } CellNode (37 @ 84) (20)Px3y55 { Px2y55, Px3y54, Px4y55, Px3y56 } CellNode (3 @ 55) (20)Px88y83 { Px88y84, Px89y83, Px88y82, Px87y83 } CellNode (88 @ 83) (20)Px76y84 { Px77y84, Px76y83, Px75y84 } CellNode (76 @ 84) (20)Px59y38 { Px60y38, Px58y38, Px59y37, Px59y39 } CellNode (59 @ 38) (20)Px38y31 { Px38y32, Px39y31, Px38y30, Px37y31 } CellNode (38 @ 31) (20)Px33y28 { Px33y27, Px33y29, Px34y28, Px32y28 } CellNode (33 @ 28) (20)Px47y39 { Px48y39, Px46y39, Px47y38, Px47y40 } CellNode (47 @ 39) (20)Px26y32 { Px26y31, Px26y33, Px27y32, Px25y32 } CellNode (26 @ 32) (20)Px21y29 { Px22y29, Px21y28, Px20y29, Px21y30 } CellNode (21 @ 29) (20)Px63y20 { Px63y19, Px63y21, Px64y20, Px62y20 } CellNode (63 @ 20) (20)Px72y28 { Px71y28, Px72y29, Px73y28, Px72y27 } CellNode (72 @ 28) (20)Px65y32 { Px65y31, Px65y33, Px66y32, Px64y32 } CellNode (65 @ 32) (20)Px60y29 { Px59y29, Px61y29, Px60y28, Px60y30 } CellNode (60 @ 29) (20)Px19y77 { Px19y78, Px18y77, Px20y77, Px19y76 } CellNode (19 @ 77) (20)Px53y33 { Px54y33, Px53y32, Px52y33 } CellNode (53 @ 33) (20)Px56y65 { Px56y66, Px55y65, Px56y64 } CellNode (56 @ 65) (20)Px39y19 { Px38y19, Px39y18, Px39y20, Px40y19 } CellNode (39 @ 19) (20)Px44y66 { Px45y66, Px43y66, Px44y65, Px44y67 } CellNode (44 @ 66) (20)Px32y67 { Px32y68, Px33y67, Px31y67, Px32y66 } CellNode (32 @ 67) (20)Px37y70 { Px36y70, Px38y70, Px37y69, Px37y71 } CellNode (37 @ 70) (20)Px46y78 { Px45y78, Px47y78, Px46y77, Px46y79 } CellNode (46 @ 78) (20)Px11y60 { Px10y60, Px11y61, Px11y59 } CellNode (11 @ 60) (20)Px20y68 { Px20y67, Px20y69, Px19y68, Px21y68 } CellNode (20 @ 68) (20)Px83y66 { Px82y66, Px83y67, Px83y65 } CellNode (83 @ 66) (20)Px97y77 { Px96y77, Px97y78, Px97y76 } CellNode (97 @ 77) (20)Px6y73 { Px6y72, Px6y74, Px7y73, Px5y73 } CellNode (6 @ 73) (20)Px71y67 { Px72y67, Px71y68, Px70y67, Px71y66 } CellNode (71 @ 67) (20)Px76y70 { Px75y70, Px77y70, Px76y69, Px76y71 } CellNode (76 @ 70) (20)Px85y78 { Px86y78, Px84y78, Px85y77, Px85y79 } CellNode (85 @ 78) (20)Px25y71 { Px25y72, Px24y71, Px26y71, Px25y70 } CellNode (25 @ 71) (20)Px64y71 { Px65y71, Px63y71, Px64y72, Px64y70 } CellNode (64 @ 71) (20)Px33y14 { Px32y14, Px34y14, Px33y13, Px33y15 } CellNode (33 @ 14) (20)Px45y13 { Px45y12, Px45y14, Px46y13, Px44y13 } CellNode (45 @ 13) (20)Px50y60 { Px50y59, Px51y60, Px49y60, Px50y61 } CellNode (50 @ 60) (20)Px29y50 { Px29y49, Px29y51, Px30y50, Px28y50 } CellNode (29 @ 50) (20)Px38y58 { Px38y59, Px39y58, Px38y57, Px37y58 } CellNode (38 @ 58) (20)Px26y59 { Px26y58, Px26y60, Px27y59, Px25y59 } CellNode (26 @ 59) (20)Px60y15 { Px61y15, Px60y16 } CellNode (60 @ 15) (20)Px68y50 { Px68y51, Px69y50, Px67y50, Px68y49 } CellNode (68 @ 50) (20)Px63y47 { Px62y47, Px63y46, Px63y48, Px64y47 } CellNode (63 @ 47) (20)Px42y40 { Px42y41, Px43y40, Px41y40, Px42y39 } CellNode (42 @ 40) (20)Px77y58 { Px78y58, Px77y59, Px76y58, Px77y57 } CellNode (77 @ 58) (20)Px56y51 { Px55y51, Px56y50, Px57y51, Px56y52 } CellNode (56 @ 51) (20)Px51y48 { Px51y49, Px52y48, Px50y48, Px51y47 } CellNode (51 @ 48) (20)Px30y41 { Px29y41, Px30y42, Px31y41, Px30y40 } CellNode (30 @ 41) (20)Px65y59 { Px65y58, Px65y60, Px66y59, Px64y59 } CellNode (65 @ 59) (20)Px44y52 { Px45y52, Px43y52, Px44y53, Px44y51 } CellNode (44 @ 52) (20)Px32y53 { Px32y52, Px33y53, Px31y53, Px32y54 } CellNode (32 @ 53) (20)Px1y56 { Px1y55, Px2y56, Px1y57 } CellNode (1 @ 56) (20)Px71y53 { Px71y52, Px72y53, Px70y53, Px71y54 } CellNode (71 @ 53) (20)Px48y31 { Px48y32, Px49y31, Px47y31, Px48y30 } CellNode (48 @ 31) (20)Px3y68 { Px3y69, Px2y68, Px4y68, Px3y67 } CellNode (3 @ 68) (20)Px57y39 { Px57y40, Px58y39, Px56y39, Px57y38 } CellNode (57 @ 39) (20)Px36y32 { Px36y31, Px35y32, Px36y33, Px37y32 } CellNode (36 @ 32) (20)Px24y33 { Px25y33, Px24y34, Px24y32, Px23y33 } CellNode (24 @ 33) (20)Px38y44 { Px38y43, Px38y45, Px39y44, Px37y44 } CellNode (38 @ 44) (20)Px70y29 { Px71y29, Px69y29, Px70y28, Px70y30 } CellNode (70 @ 29) (20)Px75y32 { Px75y31, Px74y32, Px76y32, Px75y33 } CellNode (75 @ 32) (20)Px45y6 { Px45y7, Px44y6, Px45y5 } CellNode (45 @ 6) (20)Px63y33 { Px64y33, Px63y34, Px62y33, Px63y32 } CellNode (63 @ 33) (20)Px29y77 { Px29y76, Px29y78, Px30y77, Px28y77 } CellNode (29 @ 77) (20)Px17y78 { Px17y79, Px16y78, Px17y77, Px18y78 } CellNode (17 @ 78) (20)Px42y3 { Px41y3, Px43y3, Px42y2, Px42y4 } CellNode (42 @ 3) (20)Px51y34 { Px52y34, Px50y34, Px51y35, Px51y33 } CellNode (51 @ 34) (20)Px68y77 { Px68y76, Px68y78, Px69y77, Px67y77 } CellNode (68 @ 77) (20)Px47y70 { Px48y70, Px46y70, Px47y69, Px47y71 } CellNode (47 @ 70) (20)Px42y67 { Px42y68, Px43y67, Px41y67, Px42y66 } CellNode (42 @ 67) (20)Px21y60 { Px20y60, Px21y59, Px21y61, Px22y60 } CellNode (21 @ 60) (20)Px56y78 { Px56y79, Px56y77, Px55y78, Px57y78 } CellNode (56 @ 78) (20)Px35y71 { Px36y71, Px35y72, Px35y70, Px34y71 } CellNode (35 @ 71) (20)Px30y68 { Px31y68, Px30y69, Px30y67 } CellNode (30 @ 68) (20)Px18y25 { Px18y24, Px18y26, Px19y25, Px17y25 } CellNode (18 @ 25) (20)Px44y79 { Px45y79, Px43y79, Px44y78, Px44y80 } CellNode (44 @ 79) (20)Px23y72 { Px23y73, Px23y71, Px24y72, Px22y72 } CellNode (23 @ 72) (20)Px86y70 { Px86y71, Px85y70 } CellNode (86 @ 70) (20)Px69y24 { Px69y25, Px70y24, Px68y24, Px69y23 } CellNode (69 @ 24) (20)Px55y13 { Px55y12, Px54y13 } CellNode (55 @ 13) (20)Px11y73 { Px12y73, Px10y73, Px11y74, Px11y72 } CellNode (11 @ 73) (20)Px74y71 { Px74y72, Px75y71, Px73y71, Px74y70 } CellNode (74 @ 71) (20)Px43y14 { Px44y14, Px42y14, Px43y13, Px43y15 } CellNode (43 @ 14) (20)Px60y60 { Px59y60, Px60y59, Px60y61, Px61y60 } CellNode (60 @ 60) (20)Px62y72 { Px63y72, Px61y72, Px62y73 } CellNode (62 @ 72) (20)Px31y15 { Px32y15, Px31y16, Px30y15, Px31y14 } CellNode (31 @ 15) (20)Px83y79 { Px84y79, Px82y79, Px83y78, Px83y80 } CellNode (83 @ 79) (20)Px48y58 { Px48y59, Px49y58, Px47y58, Px48y57 } CellNode (48 @ 58) (20)Px95y78 { Px95y79, Px94y78, Px95y77, Px96y78 } CellNode (95 @ 78) (20)Px27y51 { Px28y51, Px26y51, Px27y50, Px27y52 } CellNode (27 @ 51) (20)Px81y67 { Px81y68, Px82y67, Px80y67, Px81y66 } CellNode (81 @ 67) (20)Px36y59 { Px37y59, Px36y58, Px35y59, Px36y60 } CellNode (36 @ 59) (20)Px39y50 { Px39y49, Px39y51, Px40y50, Px38y50 } CellNode (39 @ 50) (20)Px45y26 { Px45y27, Px46y26, Px45y25 } CellNode (45 @ 26) (20)Px57y25 { Px57y24, Px57y26, Px58y25, Px56y25 } CellNode (57 @ 25) (20)Px29y63 { Px28y63, Px30y63, Px29y62, Px29y64 } CellNode (29 @ 63) (20)Px50y73 { Px50y74, Px49y73, Px51y73, Px50y72 } CellNode (50 @ 73) (20)Px66y51 { Px67y51, Px65y51, Px66y50, Px66y52 } CellNode (66 @ 51) (20)Px75y59 { Px76y59, Px74y59, Px75y58, Px75y60 } CellNode (75 @ 59) (20)Px17y64 { Px18y64, Px16y64, Px17y65, Px17y63 } CellNode (17 @ 64) (20)Px54y52 { Px54y53, Px55y52, Px54y51, Px53y52 } CellNode (54 @ 52) (20)Px68y63 { Px67y63, Px69y63, Px68y62, Px68y64 } CellNode (68 @ 63) (20)Px42y53 { Px41y53, Px42y52, Px42y54, Px43y53 } CellNode (42 @ 53) (20)Px30y54 { Px31y54, Px29y54, Px30y55, Px30y53 } CellNode (30 @ 54) (20)Px4y60 { Px5y60, Px4y61, Px3y60, Px4y59 } CellNode (4 @ 60) (20)Px46y32 { Px46y31, Px45y32, Px46y33, Px47y32 } CellNode (46 @ 32) (20)Px1y69 { Px2y69, Px1y68, Px1y70 } CellNode (1 @ 69) (20)Px58y1 { Px57y1, Px58y2, Px59y1 } CellNode (58 @ 1) (20)Px34y33 { Px34y34, Px35y33, Px34y32, Px33y33 } CellNode (34 @ 33) (20)Px48y44 { Px49y44, Px48y43, Px48y45, Px47y44 } CellNode (48 @ 44) (20)Px22y34 { Px21y34, Px22y35, Px23y34, Px22y33 } CellNode (22 @ 34) (20)Px36y45 { Px37y45, Px35y45, Px36y46, Px36y44 } CellNode (36 @ 45) (20)Px73y33 { Px73y34, Px74y33, Px72y33, Px73y32 } CellNode (73 @ 33) (20)Px27y78 { Px28y78, Px26y78, Px27y77, Px27y79 } CellNode (27 @ 78) (20)Px61y34 { Px61y33, Px61y35, Px62y34, Px60y34 } CellNode (61 @ 34) (20)Px15y79 { Px15y80, Px16y79, Px15y78, Px14y79 } CellNode (15 @ 79) (20)Px78y77 { Px78y76, Px78y78, Px79y77, Px77y77 } CellNode (78 @ 77) (20)Px66y78 { Px67y78, Px65y78, Px66y77, Px66y79 } CellNode (66 @ 78) (20)Px45y71 { Px45y72, Px46y71, Px45y70, Px44y71 } CellNode (45 @ 71) (20)Px54y79 { Px54y80, Px55y79, Px53y79, Px54y78 } CellNode (54 @ 79) (20)Px59y82 { Px59y83, Px58y82 } CellNode (59 @ 82) (20)Px28y25 { Px28y24, Px27y25, Px28y26, Px29y25 } CellNode (28 @ 25) (20)Px33y72 { Px34y72, Px33y71, Px32y72, Px33y73 } CellNode (33 @ 72) (20)Px47y83 { Px47y84, Px46y83, Px48y83, Px47y82 } CellNode (47 @ 83) (20)Px16y26 { Px16y25, Px17y26, Px16y27 } CellNode (16 @ 26) (20)Px21y73 { Px22y73, Px21y74, Px20y73, Px21y72 } CellNode (21 @ 73) (20)Px84y71 { Px84y72, Px85y71, Px83y71, Px84y70 } CellNode (84 @ 71) (20)Px93y79 { Px93y80, Px94y79, Px92y79, Px93y78 } CellNode (93 @ 79) (20)Px67y25 { Px66y25, Px67y24, Px67y26, Px68y25 } CellNode (67 @ 25) (20)Px72y72 { Px71y72, Px72y71, Px73y72, Px72y73 } CellNode (72 @ 72) (20)Px41y15 { Px41y16, Px42y15, Px40y15, Px41y14 } CellNode (41 @ 15) (20)Px86y83 { Px87y83, Px85y83, Px86y84, Px86y82 } CellNode (86 @ 83) (20)Px53y14 { Px53y15, Px54y14, Px53y13 } CellNode (53 @ 14) (20)Px60y73 { Px61y73, Px59y73, Px60y74, Px60y72 } CellNode (60 @ 73) (20)Px43y27 { Px44y27, Px42y27, Px43y28, Px43y26 } CellNode (43 @ 27) (20)Px31y28 { Px30y28, Px31y29, Px31y27, Px32y28 } CellNode (31 @ 28) (20)Px39y63 { Px40y63, Px39y62, Px38y63, Px39y64 } CellNode (39 @ 63) (20)Px27y64 { Px27y65, Px26y64, Px28y64, Px27y63 } CellNode (27 @ 64) (20)Px61y20 { Px61y21, Px60y20, Px61y19, Px62y20 } CellNode (61 @ 20) (20)Px64y52 { Px64y53, Px65y52, Px64y51, Px63y52 } CellNode (64 @ 52) (20)Px15y65 { Px15y66, Px15y64, Px16y65, Px14y65 } CellNode (15 @ 65) (20)Px78y63 { Px79y63, Px77y63, Px78y62, Px78y64 } CellNode (78 @ 63) (20)Px52y53 { Px52y52, Px51y53, Px52y54, Px53y53 } CellNode (52 @ 53) (20)Px66y64 { Px67y64, Px65y64, Px66y65, Px66y63 } CellNode (66 @ 64) (20)Px40y54 { Px40y55, Px39y54, Px41y54, Px40y53 } CellNode (40 @ 54) (20)Px49y18 { Px49y17, Px50y18, Px48y18, Px49y19 } CellNode (49 @ 18) (20)Px54y65 { Px55y65, Px54y64, Px54y66, Px53y65 } CellNode (54 @ 65) (20)Px2y61 { Px3y61, Px2y60, Px1y61, Px2y62 } CellNode (2 @ 61) (20)Px4y73 { Px3y73, Px4y74, Px4y72, Px5y73 } CellNode (4 @ 73) (20)Px58y44 { Px59y44, Px58y43, Px57y44, Px58y45 } CellNode (58 @ 44) (20)Px46y45 { Px46y46, Px47y45, Px46y44, Px45y45 } CellNode (46 @ 45) (20)Px20y35 { Px19y35, Px20y34, Px21y35 } CellNode (20 @ 35) (20)Px34y46 { Px34y45, Px34y47, Px33y46, Px35y46 } CellNode (34 @ 46) (20)Px71y34 { Px71y33, Px71y35, Px72y34, Px70y34 } CellNode (71 @ 34) (20)Px3y49 { Px4y49, Px3y50, Px2y49 } CellNode (3 @ 49) (20)Px8y52 { Px8y53, Px8y51, Px7y52, Px9y52 } CellNode (8 @ 52) (20)Px18y83 { Px17y83, Px19y83, Px18y84, Px18y82 } CellNode (18 @ 83) (20)Px61y47 { Px62y47, Px60y47, Px61y48, Px61y46 } CellNode (61 @ 47) (20)Px69y82 { Px69y83, Px70y82, Px69y81, Px68y82 } CellNode (69 @ 82) (20)Px64y79 { Px64y78, Px64y80, Px65y79, Px63y79 } CellNode (64 @ 79) (20)Px43y72 { Px44y72, Px42y72, Px43y71, Px43y73 } CellNode (43 @ 72) (20)Px40y40 { Px40y39, Px40y41, Px39y40, Px41y40 } CellNode (40 @ 40) (20)Px26y26 { Px26y27, Px27y26, Px26y25, Px25y26 } CellNode (26 @ 26) (20)Px57y83 { Px57y82, Px58y83, Px57y84, Px56y83 } CellNode (57 @ 83) (20)Px31y73 { Px31y74, Px32y73, Px30y73, Px31y72 } CellNode (31 @ 73) (20)Px19y30 { Px19y31, Px18y30, Px20y30, Px19y29 } CellNode (19 @ 30) (20)Px45y84 { Px44y84, Px45y83, Px46y84 } CellNode (45 @ 84) (20)Px82y72 { Px83y72, Px82y71, Px81y72, Px82y73 } CellNode (82 @ 72) (20)Px28y38 { Px28y39, Px27y38, Px29y38, Px28y37 } CellNode (28 @ 38) (20)Px96y83 { Px96y82, Px97y83, Px96y84, Px95y83 } CellNode (96 @ 83) (20)Px65y26 { Px64y26, Px66y26, Px65y25 } CellNode (65 @ 26) (20)Px70y73 { Px70y74, Px71y73, Px70y72, Px69y73 } CellNode (70 @ 73) (20)Px58y30 { Px59y30, Px57y30, Px58y31, Px58y29 } CellNode (58 @ 30) (20)Px84y84 { Px84y83, Px83y84, Px85y84 } CellNode (84 @ 84) (20)Px32y20 { Px32y21, Px31y20, Px32y19 } CellNode (32 @ 20) (20)Px54y7 { Px55y7, Px54y6 } CellNode (54 @ 7) (20)Px67y38 { Px66y38, Px67y39, Px67y37 } CellNode (67 @ 38) (20)Px49y63 { Px50y63, Px48y63, Px49y62, Px49y64 } CellNode (49 @ 63) (20)Px41y28 { Px40y28, Px41y29, Px41y27, Px42y28 } CellNode (41 @ 28) (20)Px53y27 { Px52y27, Px53y28, Px54y27, Px53y26 } CellNode (53 @ 27) (20)Px51y4 { Px51y3, Px52y4, Px51y5, Px50y4 } CellNode (51 @ 4) (20)Px37y64 { Px37y65, Px38y64, Px37y63, Px36y64 } CellNode (37 @ 64) (20)Px25y65 { Px25y64, Px24y65, Px25y66, Px26y65 } CellNode (25 @ 65) (20)Px39y76 { Px40y76, Px38y76, Px39y77, Px39y75 } CellNode (39 @ 76) (20)Px13y66 { Px14y66, Px13y67, Px12y66, Px13y65 } CellNode (13 @ 66) (20)Px76y64 { Px76y65, Px77y64, Px75y64, Px76y63 } CellNode (76 @ 64) (20)Px8y79 { Px9y79, Px8y78, Px7y79, Px8y80 } CellNode (8 @ 79) (20)Px59y18 { Px60y18, Px59y19 } CellNode (59 @ 18) (20)Px64y65 { Px63y65, Px64y64, Px65y65, Px64y66 } CellNode (64 @ 65) (20)Px50y54 { Px50y55, Px51y54, Px50y53, Px49y54 } CellNode (50 @ 54) (20)Px47y19 { Px47y18, Px46y19 } CellNode (47 @ 19) (20)Px38y11 { Px38y12, Px39y11, Px37y11, Px38y10 } CellNode (38 @ 11) (20)Px52y66 { Px53y66, Px51y66, Px52y67, Px52y65 } CellNode (52 @ 66) (20)Px40y67 { Px40y66, Px41y67, Px40y68, Px39y67 } CellNode (40 @ 67) (20)Px65y12 { Px65y13, Px64y12, Px65y11 } CellNode (65 @ 12) (20)Px19y57 { Px20y57, Px19y58, Px18y57, Px19y56 } CellNode (19 @ 57) (20)Px2y74 { Px2y75, Px1y74, Px3y74, Px2y73 } CellNode (2 @ 74) (20)Px56y45 { Px56y46, Px57y45, Px56y44, Px55y45 } CellNode (56 @ 45) (20)Px49y7 { Px49y6 } CellNode (49 @ 7) (20)Px44y46 { Px44y45, Px43y46, Px44y47, Px45y46 } CellNode (44 @ 46) (20)Px46y4 { Px45y4, Px46y5, Px46y3, Px47y4 } CellNode (46 @ 4) (20)Px58y57 { Px58y58, Px57y57, Px59y57, Px58y56 } CellNode (58 @ 57) (20)Px37y50 { Px36y50, Px37y49, Px38y50, Px37y51 } CellNode (37 @ 50) (20)Px32y47 { Px33y47, Px32y48, Px32y46, Px31y47 } CellNode (32 @ 47) (20)Px43y1 { Px42y1, Px43y2, Px44y1 } CellNode (43 @ 1) (20)Px46y58 { Px45y58, Px46y57, Px47y58, Px46y59 } CellNode (46 @ 58) (20)Px6y53 { Px6y54, Px7y53, Px6y52, Px5y53 } CellNode (6 @ 53) (20)Px28y83 { Px27y83, Px28y84, Px29y83, Px28y82 } CellNode (28 @ 83) (20)Px71y47 { Px71y48, Px72y47, Px71y46, Px70y47 } CellNode (71 @ 47) (20)Px16y84 { Px15y84, Px16y83, Px17y84 } CellNode (16 @ 84) (20)Px50y40 { Px50y39, Px51y40, Px49y40, Px50y41 } CellNode (50 @ 40) (20)Px79y82 { Px79y83, Px80y82, Px78y82, Px79y81 } CellNode (79 @ 82) (20)Px8y65 { Px9y65, Px8y66, Px7y65, Px8y64 } CellNode (8 @ 65) (20)Px67y83 { Px66y83, Px67y84, Px68y83, Px67y82 } CellNode (67 @ 83) (20)Px55y84 { Px54y84, Px55y83, Px56y84 } CellNode (55 @ 84) (20)Px24y27 { Px24y26, Px24y28, Px25y27, Px23y27 } CellNode (24 @ 27) (20)Px38y38 { Px38y39, Px39y38, Px37y38, Px38y37 } CellNode (38 @ 38) (20)Px29y30 { Px29y31, Px30y30, Px28y30, Px29y29 } CellNode (29 @ 30) (20)Px17y31 { Px17y30, Px17y32, Px16y31, Px18y31 } CellNode (17 @ 31) (20)Px94y84 { Px95y84, Px94y83, Px93y84 } CellNode (94 @ 84) (20)Px63y27 { Px62y27, Px63y28, Px63y26 } CellNode (63 @ 27) (20)Px68y30 { Px69y30, Px68y31, Px67y30, Px68y29 } CellNode (68 @ 30) (20)Px51y28 { Px52y28, Px51y27, Px50y28, Px51y29 } CellNode (51 @ 28) (20)Px56y31 { Px56y30, Px57y31, Px55y31, Px56y32 } CellNode (56 @ 31) (20)Px65y39 { Px65y38, Px65y40, Px66y39, Px64y39 } CellNode (65 @ 39) (20)Px30y21 { Px30y22, Px29y21, Px31y21, Px30y20 } CellNode (30 @ 21) (20)Px44y32 { Px44y33, Px45y32, Px43y32, Px44y31 } CellNode (44 @ 32) (20)Px32y33 { Px33y33, Px31y33, Px32y34, Px32y32 } CellNode (32 @ 33) (20)Px35y65 { Px36y65, Px34y65, Px35y64, Px35y66 } CellNode (35 @ 65) (20)Px49y76 { Px49y77, Px48y76, Px50y76, Px49y75 } CellNode (49 @ 76) (20)Px23y66 { Px23y67, Px24y66, Px22y66, Px23y65 } CellNode (23 @ 66) (20)Px37y77 { Px37y78, Px36y77, Px37y76, Px38y77 } CellNode (37 @ 77) (20)Px69y18 { Px69y19, Px68y18, Px70y18 } CellNode (69 @ 18) (20)Px16y70 { Px17y70, Px15y70, Px16y71, Px16y69 } CellNode (16 @ 70) (20)Px48y11 { Px48y12, Px49y11, Px47y11, Px48y10 } CellNode (48 @ 11) (20)Px25y78 { Px25y79, Px26y78, Px24y78, Px25y77 } CellNode (25 @ 78) (20)Px88y76 { Px89y76, Px87y76, Px88y77, Px88y75 } CellNode (88 @ 76) (20)Px36y12 { Px36y11, Px36y13, Px37y12, Px35y12 } CellNode (36 @ 12) (20)Px62y66 { Px62y67, Px63y66, Px62y65, Px61y66 } CellNode (62 @ 66) (20)Px76y77 { Px76y78, Px75y77, Px76y76, Px77y77 } CellNode (76 @ 77) (20)Px11y67 { Px11y66, Px10y67, Px12y67, Px11y68 } CellNode (11 @ 67) (20)Px50y67 { Px50y66, Px51y67, Px49y67, Px50y68 } CellNode (50 @ 67) (20)Px74y65 { Px75y65, Px74y64, Px73y65, Px74y66 } CellNode (74 @ 65) (20)Px64y78 { Px64y79, Px65y78, Px63y78, Px64y77 } CellNode (64 @ 78) (20)Px29y57 { Px29y58, Px30y57, Px29y56, Px28y57 } CellNode (29 @ 57) (20)Px63y13 { Px62y13, Px63y14, Px63y12, Px64y13 } CellNode (63 @ 13) (20)Px17y58 { Px16y58, Px17y57, Px17y59, Px18y58 } CellNode (17 @ 58) (20)Px51y14 { Px50y14, Px51y13, Px51y15 } CellNode (51 @ 14) (20)Px68y57 { Px68y58, Px69y57, Px68y56, Px67y57 } CellNode (68 @ 57) (20)Px42y47 { Px42y48, Px43y47, Px41y47, Px42y46 } CellNode (42 @ 47) (20)Px47y50 { Px46y50, Px47y49, Px48y50, Px47y51 } CellNode (47 @ 50) (20)Px56y58 { Px56y59, Px56y57, Px57y58, Px55y58 } CellNode (56 @ 58) (20)Px30y48 { Px30y47, Px30y49, Px31y48, Px29y48 } CellNode (30 @ 48) (20)Px35y51 { Px36y51, Px35y52, Px34y51, Px35y50 } CellNode (35 @ 51) (20)Px44y59 { Px45y59, Px43y59, Px44y58, Px44y60 } CellNode (44 @ 59) (20)Px4y54 { Px5y54, Px3y54, Px4y53, Px4y55 } CellNode (4 @ 54) (20)Px60y40 { Px60y39, Px60y41, Px61y40, Px59y40 } CellNode (60 @ 40) (20)Px11y53 { Px11y54, Px11y52, Px10y53 } CellNode (11 @ 53) (20)Px74y51 { Px74y52, Px73y51, Px75y51, Px74y50 } CellNode (74 @ 51) (20)Px6y66 { Px7y66, Px5y66, Px6y65, Px6y67 } CellNode (6 @ 66) (20)Px62y52 { Px62y51, Px62y53, Px61y52, Px63y52 } CellNode (62 @ 52) (20)Px39y30 { Px39y29, Px39y31, Px40y30, Px38y30 } CellNode (39 @ 30) (20)Px65y84 { Px65y83, Px64y84, Px66y84 } CellNode (65 @ 84) (20)Px48y38 { Px48y39, Px49y38, Px47y38, Px48y37 } CellNode (48 @ 38) (20)Px27y31 { Px27y30, Px26y31, Px27y32, Px28y31 } CellNode (27 @ 31) (20)Px36y39 { Px35y39, Px36y38, Px36y40, Px37y39 } CellNode (36 @ 39) (20)Px15y32 { Px15y33, Px15y31, Px16y32 } CellNode (15 @ 32) (20)Px29y43 { Px28y43, Px29y42, Px30y43, Px29y44 } CellNode (29 @ 43) (20)Px66y31 { Px65y31, Px66y30, Px66y32, Px67y31 } CellNode (66 @ 31) (20)Px75y39 { Px74y39, Px75y38, Px75y40, Px76y39 } CellNode (75 @ 39) (20)Px54y32 { Px54y33, Px55y32, Px54y31, Px53y32 } CellNode (54 @ 32) (20)Px68y43 { Px68y44, Px68y42, Px69y43, Px67y43 } CellNode (68 @ 43) (20)Px42y33 { Px42y34, Px41y33, Px43y33, Px42y32 } CellNode (42 @ 33) (20)Px59y76 { Px59y75, Px60y76 } CellNode (59 @ 76) (20)Px30y34 { Px29y34, Px30y35, Px30y33, Px31y34 } CellNode (30 @ 34) (20)Px28y19 { Px29y19, Px27y19, Px28y18, Px28y20 } CellNode (28 @ 19) (20)Px47y77 { Px47y78, Px47y76, Px46y77, Px48y77 } CellNode (47 @ 77) (20)Px21y67 { Px21y66, Px20y67, Px21y68, Px22y67 } CellNode (21 @ 67) (20)Px26y70 { Px27y70, Px26y71, Px25y70 } CellNode (26 @ 70) (20)Px35y78 { Px36y78, Px34y78, Px35y79, Px35y77 } CellNode (35 @ 78) (20)Px67y19 { Px68y19, Px67y18, Px66y19, Px67y20 } CellNode (67 @ 19) (20)Px72y66 { Px72y67, Px73y66, Px71y66, Px72y65 } CellNode (72 @ 66) (20)Px14y71 { Px14y72, Px14y70, Px15y71, Px13y71 } CellNode (14 @ 71) (20)Px23y79 { Px23y78, Px23y80, Px24y79, Px22y79 } CellNode (23 @ 79) (20)Px86y77 { Px86y78, Px85y77, Px86y76, Px87y77 } CellNode (86 @ 77) (20)Px9y84 { Px10y84, Px8y84, Px9y83 } CellNode (9 @ 84) (20)Px60y67 { Px59y67, Px60y66, Px60y68, Px61y67 } CellNode (60 @ 67) (20)Px74y78 { Px75y78, Px74y79, Px73y78, Px74y77 } CellNode (74 @ 78) (20)Px48y24 { Px48y23, Px49y24, Px48y25, Px47y24 } CellNode (48 @ 24) (20)Px65y70 { Px66y70, Px65y71, Px64y70, Px65y69 } CellNode (65 @ 70) (20)Px34y13 { Px35y13, Px34y12, Px33y13, Px34y14 } CellNode (34 @ 13) (20)Px62y79 { Px62y78, Px62y80, Px63y79, Px61y79 } CellNode (62 @ 79) (20)Px36y25 { Px36y26, Px35y25 } CellNode (36 @ 25) (20)Px41y72 { Px42y72, Px40y72, Px41y73, Px41y71 } CellNode (41 @ 72) (20)Px63y8 { Px63y7, Px64y8, Px63y9, Px62y8 } CellNode (63 @ 8) (20)Px46y12 { Px45y12, Px46y13, Px47y12, Px46y11 } CellNode (46 @ 12) (20)Px27y58 { Px28y58, Px26y58, Px27y57, Px27y59 } CellNode (27 @ 58) (20)Px61y14 { Px62y14, Px61y15, Px61y13 } CellNode (61 @ 14) (20)Px39y57 { Px39y58, Px40y57, Px39y56, Px38y57 } CellNode (39 @ 57) (20)Px60y5 { Px60y4, Px61y5, Px59y5, Px60y6 } CellNode (60 @ 5) (20)Px78y57 { Px78y58, Px79y57, Px77y57, Px78y56 } CellNode (78 @ 57) (20)Px80y72 { Px81y72, Px80y73, Px79y72, Px80y71 } CellNode (80 @ 72) (20)Px57y50 { Px58y50, Px56y50, Px57y49, Px57y51 } CellNode (57 @ 50) (20)Px66y58 { Px67y58, Px66y57, Px65y58, Px66y59 } CellNode (66 @ 58) (20)Px45y51 { Px45y52, Px46y51, Px45y50, Px44y51 } CellNode (45 @ 51) (20)Px54y59 { Px54y60, Px55y59, Px54y58, Px53y59 } CellNode (54 @ 59) (20)Px59y62 { Px58y62, Px59y63, Px59y61, Px60y62 } CellNode (59 @ 62) (20)Px33y52 { Px33y51, Px32y52, Px34y52, Px33y53 } CellNode (33 @ 52) (20)Px47y63 { Px48y63, Px47y64, Px46y63, Px47y62 } CellNode (47 @ 63) (20)Px21y53 { Px21y54, Px22y53 } CellNode (21 @ 53) (20)Px72y52 { Px71y52, Px72y51, Px72y53, Px73y52 } CellNode (72 @ 52) (20)Px4y67 { Px5y67, Px4y68, Px4y66, Px3y67 } CellNode (4 @ 67) (20)Px9y70 { Px9y71, Px8y70, Px10y70, Px9y69 } CellNode (9 @ 70) (20)Px60y53 { Px61y53, Px59y53, Px60y54, Px60y52 } CellNode (60 @ 53) (20)Px46y39 { Px45y39, Px46y38, Px46y40, Px47y39 } CellNode (46 @ 39) (20)Px25y32 { Px25y33, Px26y32, Px25y31, Px24y32 } CellNode (25 @ 32) (20)Px58y8 { Px58y9, Px58y7, Px59y8, Px57y8 } CellNode (58 @ 8) (20)Px39y43 { Px40y43, Px38y43, Px39y42, Px39y44 } CellNode (39 @ 43) (20)Px27y44 { Px28y44, Px27y45 } CellNode (27 @ 44) (20)Px55y5 { Px55y6, Px55y4, Px56y5, Px54y5 } CellNode (55 @ 5) (20)Px64y32 { Px64y33, Px65y32, Px63y32, Px64y31 } CellNode (64 @ 32) (20)Px18y77 { Px19y77, Px18y76, Px17y77, Px18y78 } CellNode (18 @ 77) (20)Px52y2 { Px52y3, Px52y1, Px53y2, Px51y2 } CellNode (52 @ 2) (20)Px52y33 { Px52y32, Px52y34, Px53y33, Px51y33 } CellNode (52 @ 33) (20)Px66y44 { Px66y45, Px67y44, Px65y44, Px66y43 } CellNode (66 @ 44) (20)Px40y34 { Px39y34, Px41y34, Px40y33, Px40y35 } CellNode (40 @ 34) (20)Px54y45 { Px54y44, Px55y45, Px53y45, Px54y46 } CellNode (54 @ 45) (20)Px57y77 { Px57y78, Px56y77, Px57y76 } CellNode (57 @ 77) (20)Px36y70 { Px36y69, Px36y71, Px37y70, Px35y70 } CellNode (36 @ 70) (20)Px19y24 { Px19y23, Px18y24, Px19y25, Px20y24 } CellNode (19 @ 24) (20)Px45y78 { Px45y79, Px46y78, Px45y77, Px44y78 } CellNode (45 @ 78) (20)Px24y71 { Px25y71, Px24y70, Px23y71, Px24y72 } CellNode (24 @ 71) (20)Px33y79 { Px33y78, Px32y79, Px33y80, Px34y79 } CellNode (33 @ 79) (20)Px96y77 { Px97y77, Px96y76, Px95y77, Px96y78 } CellNode (96 @ 77) (20)Px12y72 { Px12y73, Px13y72, Px11y72, Px12y71 } CellNode (12 @ 72) (20)Px75y70 { Px75y69, Px75y71, Px76y70, Px74y70 } CellNode (75 @ 70) (20)Px58y24 { Px57y24, Px58y23, Px59y24, Px58y25 } CellNode (58 @ 24) (20)Px84y78 { Px84y79, Px85y78, Px83y78, Px84y77 } CellNode (84 @ 78) (20)Px63y71 { Px64y71, Px63y70, Px63y72 } CellNode (63 @ 71) (20)Px32y14 { Px32y15, Px33y14, Px32y13, Px31y14 } CellNode (32 @ 14) (20)Px72y79 { Px72y78, Px71y79, Px72y80, Px73y79 } CellNode (72 @ 79) (20)Px77y82 { Px77y83, Px76y82, Px78y82, Px77y81 } CellNode (77 @ 82) (20)Px51y72 { Px52y72, Px51y73, Px50y72, Px51y71 } CellNode (51 @ 72) (20)Px26y83 { Px25y83, Px27y83, Px26y82, Px26y84 } CellNode (26 @ 83) (20)Px34y26 { Px35y26, Px34y27, Px33y26, Px34y25 } CellNode (34 @ 26) (20)Px89y81 { Px89y82, Px88y81, Px90y81, Px89y80 } CellNode (89 @ 81) (20)Px46y25 { Px46y26, Px47y25, Px46y24, Px45y25 } CellNode (46 @ 25) (20)Px38y82 { Px39y82, Px37y82, Px38y83, Px38y81 } CellNode (38 @ 82) (20)Px22y27 { Px21y27, Px22y28, Px22y26, Px23y27 } CellNode (22 @ 27) (20)Px25y59 { Px25y60, Px26y59, Px24y59, Px25y58 } CellNode (25 @ 59) (20)Px40y6 { Px40y7, Px40y5, Px41y6, Px39y6 } CellNode (40 @ 6) (20)Px47y2 { Px47y3, Px46y2, Px48y2, Px47y1 } CellNode (47 @ 2) (20)Px1y80 { Px1y79, Px2y80, Px1y81 } CellNode (1 @ 80) (20)Px18y63 { Px18y64, Px19y63, Px18y62, Px17y63 } CellNode (18 @ 63) (20)Px61y27 { Px61y28, Px60y27, Px61y26, Px62y27 } CellNode (61 @ 27) (20)Px64y59 { Px64y60, Px65y59, Px64y58, Px63y59 } CellNode (64 @ 59) (20)Px69y62 { Px70y62, Px69y61, Px68y62, Px69y63 } CellNode (69 @ 62) (20)Px43y52 { Px42y52, Px43y51, Px43y53, Px44y52 } CellNode (43 @ 52) (20)Px73y26 { Px72y26, Px73y27 } CellNode (73 @ 26) (20)Px31y53 { Px31y54, Px32y53, Px30y53, Px31y52 } CellNode (31 @ 53) (20)Px45y64 { Px44y64, Px45y63, Px46y64, Px45y65 } CellNode (45 @ 64) (20)Px33y65 { Px34y65, Px32y65, Px33y66, Px33y64 } CellNode (33 @ 65) (20)Px70y53 { Px70y54, Px69y53, Px71y53, Px70y52 } CellNode (70 @ 53) (20)Px2y68 { Px3y68, Px2y67, Px1y68, Px2y69 } CellNode (2 @ 68) (20)Px7y71 { Px8y71, Px7y72, Px6y71, Px7y70 } CellNode (7 @ 71) (20)Px58y10 { Px59y10, Px58y11, Px57y10, Px58y9 } CellNode (58 @ 10) (20)Px49y43 { Px50y43, Px48y43, Px49y42, Px49y44 } CellNode (49 @ 43) (20)Px37y44 { Px37y45, Px38y44, Px37y43, Px36y44 } CellNode (37 @ 44) (20)Px38y9 { Px37y9, Px38y10, Px38y8, Px39y9 } CellNode (38 @ 9) (20)Px50y34 { Px51y34, Px50y33, Px49y34, Px50y35 } CellNode (50 @ 34) (20)Px8y59 { Px8y58, Px7y59, Px8y60, Px9y59 } CellNode (8 @ 59) (20)Px64y45 { Px64y44, Px65y45, Px63y45, Px64y46 } CellNode (64 @ 45) (20)Px52y46 { Px52y47, Px51y46, Px53y46, Px52y45 } CellNode (52 @ 46) (20)Px29y24 { Px28y24, Px29y23, Px29y25, Px30y24 } CellNode (29 @ 24) (20)Px40y47 { Px41y47, Px40y48, Px39y47, Px40y46 } CellNode (40 @ 47) (20)Px43y79 { Px44y79, Px43y78, Px42y79, Px43y80 } CellNode (43 @ 79) (20)Px48y82 { Px48y81, Px48y83, Px49y82, Px47y82 } CellNode (48 @ 82) (20)Px17y25 { Px17y26, Px18y25, Px16y25, Px17y24 } CellNode (17 @ 25) (20)Px22y72 { Px22y73, Px23y72, Px21y72, Px22y71 } CellNode (22 @ 72) (20)Px36y83 { Px35y83, Px37y83, Px36y82, Px36y84 } CellNode (36 @ 83) (20)Px68y24 { Px68y23, Px67y24, Px68y25, Px69y24 } CellNode (68 @ 24) (20)Px10y73 { Px10y72, Px9y73, Px10y74, Px11y73 } CellNode (10 @ 73) (20)Px73y71 { Px74y71, Px73y70, Px72y71, Px73y72 } CellNode (73 @ 71) (20)Px82y79 { Px83y79, Px82y78, Px81y79, Px82y80 } CellNode (82 @ 79) (20)Px24y84 { Px23y84, Px24y83, Px25y84 } CellNode (24 @ 84) (20)Px87y82 { Px86y82, Px88y82, Px87y83, Px87y81 } CellNode (87 @ 82) (20)Px56y25 { Px55y25, Px57y25, Px56y26 } CellNode (56 @ 25) (20)Px75y83 { Px74y83, Px76y83, Px75y82, Px75y84 } CellNode (75 @ 83) (20)Px61y72 { Px61y73, Px60y72, Px62y72 } CellNode (61 @ 72) (20)Px58y37 { Px58y38, Px57y37, Px59y37, Px58y36 } CellNode (58 @ 37) (20)Px2y54 { Px2y55, Px3y54, Px1y54, Px2y53 } CellNode (2 @ 54) (20)Px32y27 { Px33y27, Px31y27, Px32y26, Px32y28 } CellNode (32 @ 27) (20)Px37y30 { Px37y29, Px38y30, Px37y31, Px36y30 } CellNode (37 @ 30) (20)Px20y28 { Px21y28, Px19y28, Px20y29, Px20y27 } CellNode (20 @ 28) (20)Px28y63 { Px28y64, Px29y63, Px28y62, Px27y63 } CellNode (28 @ 63) (20)Px71y27 { Px70y27, Px71y28, Px71y26, Px72y27 } CellNode (71 @ 27) (20)Px16y64 { Px17y64, Px16y63, Px15y64, Px16y65 } CellNode (16 @ 64) (20)Px79y62 { Px80y62, Px79y61, Px78y62, Px79y63 } CellNode (79 @ 62) (20)Px67y63 { Px67y64, Px68y63, Px67y62, Px66y63 } CellNode (67 @ 63) (20)Px55y64 { Px54y64, Px55y63, Px55y65, Px56y64 } CellNode (55 @ 64) (20)Px69y75 { Px69y76, Px68y75, Px70y75, Px69y74 } CellNode (69 @ 75) (20)Px38y18 { Px38y19, Px37y18, Px39y18, Px38y17 } CellNode (38 @ 18) (20)Px43y65 { Px43y66, Px42y65, Px44y65, Px43y64 } CellNode (43 @ 65) (20)Px26y19 { Px26y20, Px27y19, Px26y18 } CellNode (26 @ 19) (20)Px31y66 { Px31y65, Px32y66, Px30y66, Px31y67 } CellNode (31 @ 66) (20)Px82y65 { Px82y66, Px81y65, Px83y65, Px82y64 } CellNode (82 @ 65) (20)Px5y72 { Px6y72, Px5y71, Px4y72, Px5y73 } CellNode (5 @ 72) (20)Px65y19 { Px65y20, Px66y19, Px64y19, Px65y18 } CellNode (65 @ 19) (20)Px44y12 { Px45y12, Px43y12, Px44y11, Px44y13 } CellNode (44 @ 12) (20)Px47y44 { Px47y45, Px48y44, Px46y44, Px47y43 } CellNode (47 @ 44) (20)Px70y66 { Px70y65, Px70y67, Px69y66, Px71y66 } CellNode (70 @ 66) (20)Px35y45 { Px35y44, Px34y45, Px35y46, Px36y45 } CellNode (35 @ 45) (20)Px49y56 { Px50y56, Px48y56, Px49y57, Px49y55 } CellNode (49 @ 56) (20)Px9y51 { Px9y50, Px8y51, Px10y51, Px9y52 } CellNode (9 @ 51) (20)Px37y57 { Px36y57, Px37y56, Px38y57, Px37y58 } CellNode (37 @ 57) (20)Px74y45 { Px74y44, Px74y46 } CellNode (74 @ 45) (20)Px19y82 { Px19y81, Px19y83, Px20y82, Px18y82 } CellNode (19 @ 82) (20)Px43y8 { Px42y8, Px43y9, Px43y7 } CellNode (43 @ 8) (20)Px62y46 { Px63y46, Px62y47, Px61y46, Px62y45 } CellNode (62 @ 46) (20)Px76y57 { Px77y57, Px76y56, Px76y58, Px75y57 } CellNode (76 @ 57) (20)Px50y47 { Px50y48, Px51y47, Px49y47, Px50y46 } CellNode (50 @ 47) (20)Px58y82 { Px57y82, Px58y83, Px59y82, Px58y81 } CellNode (58 @ 82) (20)Px55y50 { Px55y51, Px54y50, Px56y50, Px55y49 } CellNode (55 @ 50) (20)Px46y83 { Px47y83, Px45y83, Px46y82, Px46y84 } CellNode (46 @ 83) (20)Px29y37 { Px29y38, Px30y37, Px28y37, Px29y36 } CellNode (29 @ 37) (20)Px34y84 { Px33y84, Px34y83, Px35y84 } CellNode (34 @ 84) (20)Px97y82 { Px97y83, Px97y81, Px96y82 } CellNode (97 @ 82) (20)Px85y83 { Px86y83, Px85y82, Px84y83, Px85y84 } CellNode (85 @ 83) (20)Px64y6 { Px63y6, Px64y5, Px64y7 } CellNode (64 @ 6) (20)Px47y30 { Px46y30, Px47y29, Px47y31, Px48y30 } CellNode (47 @ 30) (20)Px73y84 { Px73y83, Px74y84, Px72y84 } CellNode (73 @ 84) (20)Px56y38 { Px56y37, Px57y38, Px55y38, Px56y39 } CellNode (56 @ 38) (20)Px42y27 { Px43y27, Px42y26, Px41y27, Px42y28 } CellNode (42 @ 27) (20)Px61y3 { Px62y3, Px61y2, Px61y4, Px60y3 } CellNode (61 @ 3) (20)Px35y31 { Px36y31, Px34y31, Px35y32, Px35y30 } CellNode (35 @ 31) (20)Px44y39 { Px45y39, Px43y39, Px44y38, Px44y40 } CellNode (44 @ 39) (20)Px30y28 { Px30y29, Px29y28, Px31y28, Px30y27 } CellNode (30 @ 28) (20)Px23y32 { Px23y33, Px22y32, Px24y32, Px23y31 } CellNode (23 @ 32) (20)Px26y64 { Px27y64, Px25y64, Px26y63, Px26y65 } CellNode (26 @ 64) (20)Px60y20 { Px60y19, Px60y21, Px61y20, Px59y20 } CellNode (60 @ 20) (20)Px74y31 { Px75y31, Px73y31, Px74y32, Px74y30 } CellNode (74 @ 31) (20)Px14y65 { Px14y66, Px15y65, Px14y64, Px13y65 } CellNode (14 @ 65) (20)Px28y76 { Px29y76, Px27y76, Px28y75, Px28y77 } CellNode (28 @ 76) (20)Px62y32 { Px62y33, Px61y32, Px63y32, Px62y31 } CellNode (62 @ 32) (20)Px65y64 { Px66y64, Px64y64, Px65y63, Px65y65 } CellNode (65 @ 64) (20)Px39y10 { Px39y11, Px40y10, Px38y10, Px39y9 } CellNode (39 @ 10) (20)Px16y77 { Px16y78, Px15y77, Px17y77, Px16y76 } CellNode (16 @ 77) (20)Px79y75 { Px79y76, Px78y75, Px80y75, Px79y74 } CellNode (79 @ 75) (20)Px48y18 { Px49y18, Px48y17, Px47y18 } CellNode (48 @ 18) (20)Px53y65 { Px53y66, Px54y65, Px52y65, Px53y64 } CellNode (53 @ 65) (20)Px67y76 { Px66y76, Px68y76, Px67y75, Px67y77 } CellNode (67 @ 76) (20)Px36y19 { Px35y19, Px36y20, Px37y19, Px36y18 } CellNode (36 @ 19) (20)Px41y66 { Px40y66, Px41y65, Px41y67, Px42y66 } CellNode (41 @ 66) (20)Px55y77 { Px56y77, Px54y77, Px55y78, Px55y76 } CellNode (55 @ 77) (20)Px34y70 { Px34y71, Px34y69, Px35y70, Px33y70 } CellNode (34 @ 70) (20)Px80y66 { Px80y65, Px81y66, Px79y66, Px80y67 } CellNode (80 @ 66) (20)Px3y73 { Px3y74, Px4y73, Px3y72, Px2y73 } CellNode (3 @ 73) (20)Px59y6 { Px59y7, Px58y6, Px59y5, Px60y6 } CellNode (59 @ 6) (20)Px54y12 { Px55y12, Px54y11, Px53y12, Px54y13 } CellNode (54 @ 12) (20)Px42y13 { Px43y13, Px41y13, Px42y14, Px42y12 } CellNode (42 @ 13) (20)Px94y77 { Px94y78, Px93y77, Px95y77, Px94y76 } CellNode (94 @ 77) (20)Px56y3 { Px55y3, Px56y4, Px56y2, Px57y3 } CellNode (56 @ 3) (20)Px59y56 { Px59y57, Px60y56, Px59y55, Px58y56 } CellNode (59 @ 56) (20)Px30y14 { Px31y14, Px30y15 } CellNode (30 @ 14) (20)Px33y46 { Px33y47, Px34y46, Px33y45, Px32y46 } CellNode (33 @ 46) (20)Px47y57 { Px47y56, Px46y57, Px47y58, Px48y57 } CellNode (47 @ 57) (20)Px26y50 { Px26y51, Px27y50, Px26y49 } CellNode (26 @ 50) (20)Px35y58 { Px36y58, Px34y58, Px35y59, Px35y57 } CellNode (35 @ 58) (20)Px23y59 { Px23y58, Px23y60, Px24y59, Px22y59 } CellNode (23 @ 59) (20)Px9y64 { Px9y63, Px10y64, Px9y65, Px8y64 } CellNode (9 @ 64) (20)Px65y50 { Px65y51, Px64y50, Px66y50, Px65y49 } CellNode (65 @ 50) (20)Px60y47 { Px60y46, Px60y48, Px61y47, Px59y47 } CellNode (60 @ 47) (20)Px74y58 { Px74y59, Px73y58, Px75y58, Px74y57 } CellNode (74 @ 58) (20)Px53y51 { Px53y50, Px54y51, Px52y51, Px53y52 } CellNode (53 @ 51) (20)Px62y59 { Px62y58, Px62y60, Px63y59, Px61y59 } CellNode (62 @ 59) (20)Px39y37 { Px39y38, Px40y37, Px39y36, Px38y37 } CellNode (39 @ 37) (20)Px41y52 { Px42y52, Px41y53, Px40y52, Px41y51 } CellNode (41 @ 52) (20)Px44y84 { Px43y84, Px45y84, Px44y83 } CellNode (44 @ 84) (20)Px18y30 { Px17y30, Px18y29, Px18y31, Px19y30 } CellNode (18 @ 30) (20)Px27y38 { Px27y39, Px28y38, Px27y37 } CellNode (27 @ 38) (20)Px83y84 { Px84y84, Px83y83, Px82y84 } CellNode (83 @ 84) (20)Px57y30 { Px56y30, Px57y29, Px57y31, Px58y30 } CellNode (57 @ 30) (20)Px66y38 { Px66y37, Px65y38, Px66y39, Px67y38 } CellNode (66 @ 38) (20)Px40y28 { Px41y28, Px40y29, Px40y27 } CellNode (40 @ 28) (20)Px45y31 { Px46y31, Px45y32, Px44y31, Px45y30 } CellNode (45 @ 31) (20)Px54y39 { Px55y39, Px54y38, Px53y39, Px54y40 } CellNode (54 @ 39) (20)Px59y42 { Px58y42, Px59y41, Px60y42, Px59y43 } CellNode (59 @ 42) (20)Px33y32 { Px32y32, Px34y32, Px33y33, Px33y31 } CellNode (33 @ 32) (20)Px21y33 { Px20y33, Px21y34, Px21y32, Px22y33 } CellNode (21 @ 33) (20)Px38y76 { Px39y76, Px37y76, Px38y75, Px38y77 } CellNode (38 @ 76) (20)Px72y32 { Px72y33, Px73y32, Px71y32, Px72y31 } CellNode (72 @ 32) (20)Px12y66 { Px11y66, Px12y65, Px12y67, Px13y66 } CellNode (12 @ 66) (20)Px26y77 { Px27y77, Px26y78, Px26y76, Px25y77 } CellNode (26 @ 77) (20)Px60y33 { Px59y33, Px61y33, Px60y32, Px60y34 } CellNode (60 @ 33) (20)Px37y11 { Px36y11, Px37y12, Px38y11, Px37y10 } CellNode (37 @ 11) (20)Px89y75 { Px88y75, Px89y76, Px90y75, Px89y74 } CellNode (89 @ 75) (20)Px14y78 { Px13y78, Px14y77, Px14y79, Px15y78 } CellNode (14 @ 78) (20)Px77y76 { Px78y76, Px77y75, Px76y76, Px77y77 } CellNode (77 @ 76) (20)Px46y19 { Px46y18, Px47y19 } CellNode (46 @ 19) (20)Px51y66 { Px50y66, Px51y65, Px51y67, Px52y66 } CellNode (51 @ 66) (20)Px39y23 { Px39y22, Px40y23, Px38y23, Px39y24 } CellNode (39 @ 23) (20)Px65y77 { Px65y78, Px66y77, Px64y77, Px65y76 } CellNode (65 @ 77) (20)Px44y70 { Px44y71, Px44y69, Px45y70, Px43y70 } CellNode (44 @ 70) (20)Px53y78 { Px52y78, Px53y77, Px53y79, Px54y78 } CellNode (53 @ 78) (20)Px27y24 { Px28y24, Px26y24, Px27y25, Px27y23 } CellNode (27 @ 24) (20)Px32y71 { Px33y71, Px31y71, Px32y72, Px32y70 } CellNode (32 @ 71) (20)Px64y12 { Px65y12, Px64y11, Px63y12, Px64y13 } CellNode (64 @ 12) (20)Px41y79 { Px42y79, Px40y79, Px41y78, Px41y80 } CellNode (41 @ 79) (20)Px18y57 { Px19y57, Px18y56, Px17y57, Px18y58 } CellNode (18 @ 57) (20)Px83y70 { Px82y70, Px83y69, Px83y71, Px84y70 } CellNode (83 @ 70) (20)Px52y13 { Px51y13, Px52y12, Px53y13 } CellNode (52 @ 13) (20)Px92y78 { Px93y78, Px92y77, Px92y79, Px91y78 } CellNode (92 @ 78) (20)Px69y56 { Px69y57, Px70y56, Px69y55, Px68y56 } CellNode (69 @ 56) (20)Px40y14 { Px41y14, Px40y13, Px40y15, Px39y14 } CellNode (40 @ 14) (20)Px1y74 { Px2y74, Px1y75, Px1y73 } CellNode (1 @ 74) (20)Px80y79 { Px81y79, Px79y79, Px80y78, Px80y80 } CellNode (80 @ 79) (20)Px57y57 { Px58y57, Px57y56, Px56y57, Px57y58 } CellNode (57 @ 57) (20)Px66y24 { Px67y24, Px65y24, Px66y25, Px66y23 } CellNode (66 @ 24) (20)Px36y50 { Px36y49, Px36y51, Px37y50, Px35y50 } CellNode (36 @ 50) (20)Px71y71 { Px71y72, Px70y71, Px72y71, Px71y70 } CellNode (71 @ 71) (20)Px45y58 { Px45y59, Px46y58, Px45y57, Px44y58 } CellNode (45 @ 58) (20)Px39y7 { Px40y7, Px39y8, Px38y7, Px39y6 } CellNode (39 @ 7) (20)Px59y69 { Px59y68, Px60y69 } CellNode (59 @ 69) (20)Px20y72 { Px20y71, Px20y73, Px21y72, Px19y72 } CellNode (20 @ 72) (20)Px33y59 { Px33y58, Px32y59, Px33y60, Px34y59 } CellNode (33 @ 59) (20)Px38y62 { Px39y62, Px37y62, Px38y63, Px38y61 } CellNode (38 @ 62) (20)Px75y50 { Px75y49, Px74y50, Px75y51 } CellNode (75 @ 50) (20)Px7y65 { Px8y65, Px6y65, Px7y64, Px7y66 } CellNode (7 @ 65) (20)Px63y51 { Px62y51, Px63y50, Px64y51, Px63y52 } CellNode (63 @ 51) (20)Px72y59 { Px71y59, Px72y58, Px72y60, Px73y59 } CellNode (72 @ 59) (20)Px77y62 { Px77y63, Px76y62, Px78y62, Px77y61 } CellNode (77 @ 62) (20)Px51y52 { Px52y52, Px51y53, Px50y52, Px51y51 } CellNode (51 @ 52) (20)Px9y77 { Px9y78, Px8y77, Px9y76, Px10y77 } CellNode (9 @ 77) (20)Px16y31 { Px16y32, Px17y31, Px16y30, Px15y31 } CellNode (16 @ 31) (20)Px76y38 { Px76y39, Px75y38, Px76y37 } CellNode (76 @ 38) (20)Px1y60 { Px1y61, Px1y59, Px2y60 } CellNode (1 @ 60) (20)Px55y31 { Px55y32, Px56y31, Px55y30, Px54y31 } CellNode (55 @ 31) (20)Px64y39 { Px65y39, Px63y39, Px64y38, Px64y40 } CellNode (64 @ 39) (20)Px69y42 { Px70y42, Px68y42, Px69y41, Px69y43 } CellNode (69 @ 42) (20)Px43y32 { Px42y32, Px43y33, Px44y32, Px43y31 } CellNode (43 @ 32) (20)Px52y9 { Px51y9 } CellNode (52 @ 9) (20)Px57y43 { Px58y43, Px57y44, Px56y43, Px57y42 } CellNode (57 @ 43) (20)Px31y33 { Px32y33, Px30y33, Px31y32, Px31y34 } CellNode (31 @ 33) (20)Px45y44 { Px45y43, Px46y44, Px44y44, Px45y45 } CellNode (45 @ 44) (20)Px48y76 { Px49y76, Px47y76, Px48y75, Px48y77 } CellNode (48 @ 76) (20)Px36y77 { Px36y78, Px37y77, Px35y77, Px36y76 } CellNode (36 @ 77) (20)Px70y33 { Px69y33, Px71y33, Px70y32, Px70y34 } CellNode (70 @ 33) (20)Px15y70 { Px16y70, Px14y70, Px15y69, Px15y71 } CellNode (15 @ 70) (20)Px7y51 { Px8y51, Px6y51, Px7y52, Px7y50 } CellNode (7 @ 51) (20)Px24y78 { Px25y78, Px23y78, Px24y77, Px24y79 } CellNode (24 @ 78) (20)Px87y76 { Px88y76, Px87y75, Px86y76, Px87y77 } CellNode (87 @ 76) (20)Px29y81 { Px30y81, Px28y81, Px29y82, Px29y80 } CellNode (29 @ 81) (20)Px12y79 { Px12y80, Px13y79, Px12y78, Px11y79 } CellNode (12 @ 79) (20)Px75y77 { Px75y78, Px76y77, Px75y76, Px74y77 } CellNode (75 @ 77) (20)Px17y82 { Px16y82, Px17y83, Px17y81, Px18y82 } CellNode (17 @ 82) (20)Px49y23 { Px48y23, Px49y22, Px49y24, Px50y23 } CellNode (49 @ 23) (20)Px63y78 { Px64y78, Px62y78, Px63y77, Px63y79 } CellNode (63 @ 78) (20)Px68y81 { Px69y81, Px67y81, Px68y82, Px68y80 } CellNode (68 @ 81) (20)Px42y71 { Px42y72, Px43y71, Px42y70, Px41y71 } CellNode (42 @ 71) (20)Px51y79 { Px51y80, Px52y79, Px51y78, Px50y79 } CellNode (51 @ 79) (20)Px56y82 { Px55y82, Px57y82, Px56y81, Px56y83 } CellNode (56 @ 82) (20)Px25y25 { Px26y25, Px24y25, Px25y26, Px25y24 } CellNode (25 @ 25) (20)Px30y72 { Px30y71, Px31y72, Px29y72, Px30y73 } CellNode (30 @ 72) (20)Px62y13 { Px62y14, Px63y13, Px62y12, Px61y13 } CellNode (62 @ 13) (20)Px81y71 { Px82y71, Px81y72, Px80y71, Px81y70 } CellNode (81 @ 71) (20)Px50y14 { Px51y14, Px49y14, Px50y13, Px50y15 } CellNode (50 @ 14) (20)Px95y82 { Px94y82, Px96y82, Px95y81, Px95y83 } CellNode (95 @ 82) (20)Px64y25 { Px64y26, Px65y25, Px63y25, Px64y24 } CellNode (64 @ 25) (20)Px47y9 { Px46y9 } CellNode (47 @ 9) (20)Px90y79 { Px91y79, Px89y79, Px90y78, Px90y80 } CellNode (90 @ 79) (20)Px52y26 { Px51y26, Px52y27, Px52y25, Px53y26 } CellNode (52 @ 26) (20)Px55y58 { Px55y59, Px56y58, Px54y58, Px55y57 } CellNode (55 @ 58) (20)Px34y51 { Px33y51, Px34y50, Px34y52, Px35y51 } CellNode (34 @ 51) (20)Px69y69 { Px70y69, Px69y68, Px68y69, Px69y70 } CellNode (69 @ 69) (20)Px43y59 { Px43y58, Px42y59, Px43y60, Px44y59 } CellNode (43 @ 59) (20)Px44y6 { Px43y6, Px44y7, Px44y5, Px45y6 } CellNode (44 @ 6) (20)Px48y62 { Px48y63, Px49y62, Px47y62, Px48y61 } CellNode (48 @ 62) (20)Px41y3 { Px41y4, Px41y2, Px42y3, Px40y3 } CellNode (41 @ 3) (20)Px36y63 { Px36y64, Px36y62, Px37y63, Px35y63 } CellNode (36 @ 63) (20)Px10y53 { Px9y53, Px10y54, Px11y53, Px10y52 } CellNode (10 @ 53) (20)Px73y51 { Px73y50, Px72y51, Px73y52, Px74y51 } CellNode (73 @ 51) (20)Px5y66 { Px5y67, Px6y66, Px5y65, Px4y66 } CellNode (5 @ 66) (20)Px24y64 { Px25y64, Px24y65, Px23y64, Px24y63 } CellNode (24 @ 64) (20)Px61y52 { Px61y53, Px62y52, Px61y51, Px60y52 } CellNode (61 @ 52) (20)Px75y63 { Px76y63, Px75y62, Px75y64, Px74y63 } CellNode (75 @ 63) (20)Px7y78 { Px7y79, Px6y78, Px8y78, Px7y77 } CellNode (7 @ 78) (20)Px58y17 { Px57y17 } CellNode (58 @ 17) (20)Px63y64 { Px63y65, Px64y64, Px62y64, Px63y63 } CellNode (63 @ 64) (20)Px28y43 { Px28y44, Px29y43 } CellNode (28 @ 43) (20)Px67y43 { Px67y44, Px68y43, Px66y43, Px67y42 } CellNode (67 @ 43) (20)Px41y33 { Px42y33, Px40y33, Px41y32, Px41y34 } CellNode (41 @ 33) (20)Px55y44 { Px54y44, Px55y43, Px56y44, Px55y45 } CellNode (55 @ 44) (20)Px43y45 { Px44y45, Px42y45, Px43y46, Px43y44 } CellNode (43 @ 45) (20)Px31y46 { Px32y46, Px30y46, Px31y47, Px31y45 } CellNode (31 @ 46) (20)Px39y81 { Px39y80, Px39y82, Px40y81, Px38y81 } CellNode (39 @ 81) (20)Px34y78 { Px35y78, Px33y78, Px34y77, Px34y79 } CellNode (34 @ 78) (20)Px13y71 { Px13y72, Px14y71, Px12y71, Px13y70 } CellNode (13 @ 71) (20)Px5y52 { Px5y53, Px5y51, Px6y52, Px4y52 } CellNode (5 @ 52) (20)Px59y23 { Px58y23, Px59y22, Px59y24, Px60y23 } CellNode (59 @ 23) (20)Px22y79 { Px22y80, Px23y79, Px21y79, Px22y78 } CellNode (22 @ 79) (20)Px27y82 { Px27y83, Px27y81, Px26y82, Px28y82 } CellNode (27 @ 82) (20)Px70y46 { Px71y46, Px69y46, Px70y47, Px70y45 } CellNode (70 @ 46) (20)Px47y24 { Px47y25, Px48y24, Px46y24, Px47y23 } CellNode (47 @ 24) (20)Px73y78 { Px74y78, Px73y77, Px72y78, Px73y79 } CellNode (73 @ 78) (20)Px52y71 { Px52y70, Px52y72, Px51y71 } CellNode (52 @ 71) (20)Px15y83 { Px15y84, Px16y83, Px14y83, Px15y82 } CellNode (15 @ 83) (20)Px61y79 { Px61y80, Px62y79, Px60y79, Px61y78 } CellNode (61 @ 79) (20)Px66y82 { Px65y82, Px66y83, Px66y81, Px67y82 } CellNode (66 @ 82) (20)Px40y72 { Px40y71, Px39y72, Px40y73, Px41y72 } CellNode (40 @ 72) (20)Px49y36 { Px50y36, Px48y36, Px49y37, Px49y35 } CellNode (49 @ 36) (20)Px54y83 { Px55y83, Px53y83, Px54y84, Px54y82 } CellNode (54 @ 83) (20)Px23y26 { Px24y26, Px22y26, Px23y25, Px23y27 } CellNode (23 @ 26) (20)Px37y37 { Px37y36, Px37y38, Px36y37, Px38y37 } CellNode (37 @ 37) (20)Px78y81 { Px78y80, Px78y82, Px79y81, Px77y81 } CellNode (78 @ 81) (20)Px57y1 { Px56y1, Px57y2, Px58y1 } CellNode (57 @ 1) (20)Px19y62 { Px19y63, Px20y62, Px19y61, Px18y62 } CellNode (19 @ 62) (20)Px42y84 { Px41y84, Px43y84, Px42y83 } CellNode (42 @ 84) (20)Px35y25 { Px35y24, Px35y26, Px36y25, Px34y25 } CellNode (35 @ 25) (20)Px93y83 { Px93y84, Px92y83, Px94y83, Px93y82 } CellNode (93 @ 83) (20)Px79y69 { Px80y69, Px79y68, Px78y69, Px79y70 } CellNode (79 @ 69) (20)Px81y84 { Px80y84, Px81y83, Px82y84 } CellNode (81 @ 84) (20)Px58y62 { Px58y61, Px59y62, Px57y62 } CellNode (58 @ 62) (20)Px50y27 { Px51y27, Px50y28, Px49y27, Px50y26 } CellNode (50 @ 27) (20)Px46y63 { Px47y63, Px45y63, Px46y62, Px46y64 } CellNode (46 @ 63) (20)Px29y17 { Px28y17, Px30y17, Px29y18 } CellNode (29 @ 17) (20)Px34y64 { Px34y65, Px35y64, Px34y63, Px33y64 } CellNode (34 @ 64) (20)Px22y65 { Px22y64, Px22y66, Px21y65, Px23y65 } CellNode (22 @ 65) (20)Px8y70 { Px8y69, Px8y71, Px9y70, Px7y70 } CellNode (8 @ 70) (20)Px10y66 { Px11y66, Px10y67, Px10y65, Px9y66 } CellNode (10 @ 66) (20)Px73y64 { Px74y64, Px73y65, Px72y64, Px73y63 } CellNode (73 @ 64) (20)Px5y79 { Px4y79, Px5y78, Px5y80, Px6y79 } CellNode (5 @ 79) (20)Px61y65 { Px61y64, Px62y65, Px60y65, Px61y66 } CellNode (61 @ 65) (20)Px35y11 { Px34y11, Px35y12, Px35y10, Px36y11 } CellNode (35 @ 11) (20)Px44y19 { Px43y19, Px44y18 } CellNode (44 @ 19) (20)Px9y58 { Px8y58, Px9y57, Px10y58, Px9y59 } CellNode (9 @ 58) (20)Px28y56 { Px27y56, Px28y55, Px29y56, Px28y57 } CellNode (28 @ 56) (20)Px65y44 { Px65y43, Px64y44, Px65y45, Px66y44 } CellNode (65 @ 44) (20)Px16y57 { Px16y56, Px16y58, Px17y57 } CellNode (16 @ 57) (20)Px79y55 { Px80y55, Px79y56, Px78y55, Px79y54 } CellNode (79 @ 55) (20)Px53y45 { Px53y46, Px54y45, Px52y45, Px53y44 } CellNode (53 @ 45) (20)Px67y56 { Px68y56, Px67y55, Px67y57, Px66y56 } CellNode (67 @ 56) (20)Px41y46 { Px41y45, Px41y47, Px42y46, Px40y46 } CellNode (41 @ 46) (20)Px49y81 { Px49y80, Px49y82, Px50y81, Px48y81 } CellNode (49 @ 81) (20)Px37y82 { Px38y82, Px36y82, Px37y81, Px37y83 } CellNode (37 @ 82) (20)Px3y53 { Px3y54, Px4y53, Px3y52, Px2y53 } CellNode (3 @ 53) (20)Px25y83 { Px25y84, Px26y83, Px24y83, Px25y82 } CellNode (25 @ 83) (20)Px88y81 { Px87y81, Px88y82, Px89y81, Px88y80 } CellNode (88 @ 81) (20)Px13y84 { Px14y84, Px13y83, Px12y84 } CellNode (13 @ 84) (20)Px76y82 { Px77y82, Px75y82, Px76y81, Px76y83 } CellNode (76 @ 82) (20)Px59y36 { Px59y37, Px60y36, Px58y36, Px59y35 } CellNode (59 @ 36) (20)Px64y83 { Px64y84, Px65y83, Px63y83, Px64y82 } CellNode (64 @ 83) (20)Px33y26 { Px34y26, Px33y25, Px32y26, Px33y27 } CellNode (33 @ 26) (20)Px47y37 { Px47y36, Px47y38, Px46y37, Px48y37 } CellNode (47 @ 37) (20)Px52y84 { Px53y84, Px52y83, Px51y84 } CellNode (52 @ 84) (20)Px21y27 { Px21y28, Px22y27, Px21y26, Px20y27 } CellNode (21 @ 27) (20)Px35y38 { Px36y38, Px34y38, Px35y39, Px35y37 } CellNode (35 @ 38) (20)Px26y30 { Px27y30, Px25y30, Px26y31, Px26y29 } CellNode (26 @ 30) (20)Px72y26 { Px73y26, Px71y26, Px72y25, Px72y27 } CellNode (72 @ 26) (20)Px91y84 { Px90y84, Px92y84, Px91y83 } CellNode (91 @ 84) (20)Px60y27 { Px60y28, Px59y27, Px61y27, Px60y26 } CellNode (60 @ 27) (20)Px74y38 { Px75y38, Px73y38, Px74y39, Px74y37 } CellNode (74 @ 38) (20)Px65y30 { Px65y31, Px64y30, Px66y30, Px65y29 } CellNode (65 @ 30) (20)Px53y31 { Px54y31, Px52y31, Px53y32, Px53y30 } CellNode (53 @ 31) (20)Px19y75 { Px18y75, Px20y75, Px19y74, Px19y76 } CellNode (19 @ 75) (20)Px56y63 { Px56y62, Px55y63, Px56y64 } CellNode (56 @ 63) (20)Px39y17 { Px39y18, Px40y17, Px39y16, Px38y17 } CellNode (39 @ 17) (20)Px44y64 { Px44y65, Px45y64, Px43y64, Px44y63 } CellNode (44 @ 64) (20)Px27y18 { Px26y18, Px27y19, Px28y18, Px27y17 } CellNode (27 @ 18) (20)Px32y65 { Px32y64, Px31y65, Px32y66, Px33y65 } CellNode (32 @ 65) (20)Px46y76 { Px47y76, Px45y76, Px46y77, Px46y75 } CellNode (46 @ 76) (20)Px57y10 { Px57y9, Px57y11, Px58y10, Px56y10 } CellNode (57 @ 10) (20)Px20y66 { Px20y67, Px19y66, Px21y66, Px20y65 } CellNode (20 @ 66) (20)Px34y77 { Px34y76, Px34y78, Px35y77, Px33y77 } CellNode (34 @ 77) (20)Px97y75 { Px96y75, Px97y74, Px97y76 } CellNode (97 @ 75) (20)Px45y11 { Px45y12, Px45y10, Px44y11, Px46y11 } CellNode (45 @ 11) (20)Px66y18 { Px66y17, Px67y18, Px66y19, Px65y18 } CellNode (66 @ 18) (20)Px85y76 { Px86y76, Px84y76, Px85y77, Px85y75 } CellNode (85 @ 76) (20)Px54y19 { Px54y20, Px53y19, Px54y18 } CellNode (54 @ 19) (20)Px33y12 { Px34y12, Px33y11, Px33y13 } CellNode (33 @ 12) (20)Px8y83 { Px8y84, Px7y83, Px9y83, Px8y82 } CellNode (8 @ 83) (20)Px71y65 { Px70y65, Px71y64, Px71y66, Px72y65 } CellNode (71 @ 65) (20)Px83y64 { Px82y64, Px83y65 } CellNode (83 @ 64) (20)Px59y22 { Px59y21, Px59y23, Px60y22, Px58y22 } CellNode (59 @ 22) (20)Px6y71 { Px7y71, Px5y71, Px6y70, Px6y72 } CellNode (6 @ 71) (20)Px38y56 { Px37y56, Px38y55, Px39y56, Px38y57 } CellNode (38 @ 56) (20)Px26y57 { Px26y58, Px25y57, Px27y57, Px26y56 } CellNode (26 @ 57) (20)Px60y13 { Px59y13, Px60y12, Px61y13 } CellNode (60 @ 13) (20)Px63y45 { Px63y46, Px64y45, Px63y44, Px62y45 } CellNode (63 @ 45) (20)Px50y4 { Px50y5, Px51y4, Px50y3, Px49y4 } CellNode (50 @ 4) (20)Px77y56 { Px77y55, Px76y56, Px78y56, Px77y57 } CellNode (77 @ 56) (20)Px51y46 { Px51y45, Px51y47, Px52y46, Px50y46 } CellNode (51 @ 46) (20)Px65y57 { Px66y57, Px64y57, Px65y58, Px65y56 } CellNode (65 @ 57) (20)Px44y50 { Px44y49, Px45y50, Px44y51, Px43y50 } CellNode (44 @ 50) (20)Px53y58 { Px53y57, Px54y58, Px52y58, Px53y59 } CellNode (53 @ 58) (20)Px32y51 { Px33y51, Px32y52, Px31y51, Px32y50 } CellNode (32 @ 51) (20)Px35y83 { Px35y84, Px36y83, Px34y83, Px35y82 } CellNode (35 @ 83) (20)Px41y59 { Px42y59, Px40y59, Px41y58, Px41y60 } CellNode (41 @ 59) (20)Px1y54 { Px1y53, Px2y54, Px1y55 } CellNode (1 @ 54) (20)Px23y84 { Px23y83, Px24y84, Px22y84 } CellNode (23 @ 84) (20)Px69y36 { Px68y36, Px69y35, Px70y36 } CellNode (69 @ 36) (20)Px71y51 { Px71y52, Px70y51, Px72y51, Px71y50 } CellNode (71 @ 51) (20)Px74y83 { Px74y84, Px75y83, Px74y82, Px73y83 } CellNode (74 @ 83) (20)Px3y66 { Px3y67, Px3y65, Px4y66, Px2y66 } CellNode (3 @ 66) (20)Px57y37 { Px57y36, Px56y37, Px57y38, Px58y37 } CellNode (57 @ 37) (20)Px36y30 { Px36y31, Px37y30, Px35y30, Px36y29 } CellNode (36 @ 30) (20)Px45y38 { Px45y39, Px46y38, Px45y37, Px44y38 } CellNode (45 @ 38) (20)Px24y31 { Px23y31, Px25y31, Px24y32, Px24y30 } CellNode (24 @ 31) (20)Px59y49 { Px59y48, Px59y50, Px60y49, Px58y49 } CellNode (59 @ 49) (20)Px33y39 { Px33y40, Px34y39, Px32y39, Px33y38 } CellNode (33 @ 39) (20)Px38y42 { Px38y43, Px39y42, Px37y42, Px38y41 } CellNode (38 @ 42) (20)Px75y30 { Px74y30, Px75y31 } CellNode (75 @ 30) (20)Px70y27 { Px70y28, Px71y27, Px69y27, Px70y26 } CellNode (70 @ 27) (20)Px45y4 { Px44y4, Px45y5, Px45y3, Px46y4 } CellNode (45 @ 4) (20)Px63y31 { Px62y31, Px63y32, Px64y31, Px63y30 } CellNode (63 @ 31) (20)Px29y75 { Px30y75, Px28y75, Px29y74, Px29y76 } CellNode (29 @ 75) (20)Px72y39 { Px72y40, Px73y39, Px71y39, Px72y38 } CellNode (72 @ 39) (20)Px17y76 { Px18y76, Px17y77, Px16y76, Px17y75 } CellNode (17 @ 76) (20)Px42y1 { Px41y1, Px42y2, Px43y1 } CellNode (42 @ 1) (20)Px51y32 { Px52y32, Px50y32, Px51y31, Px51y33 } CellNode (51 @ 32) (20)Px68y75 { Px69y75, Px67y75, Px68y74, Px68y76 } CellNode (68 @ 75) (20)Px37y18 { Px37y17, Px37y19, Px38y18, Px36y18 } CellNode (37 @ 18) (20)Px42y65 { Px42y64, Px41y65, Px42y66, Px43y65 } CellNode (42 @ 65) (20)Px56y76 { Px56y77, Px57y76, Px55y76, Px56y75 } CellNode (56 @ 76) (20)Px30y66 { Px30y67, Px31y66, Px29y66, Px30y65 } CellNode (30 @ 66) (20)Px44y77 { Px43y77, Px44y76, Px45y77, Px44y78 } CellNode (44 @ 77) (20)Px18y23 { Px18y24, Px19y23 } CellNode (18 @ 23) (20)Px81y65 { Px80y65, Px81y64, Px81y66, Px82y65 } CellNode (81 @ 65) (20)Px23y70 { Px22y70, Px23y71, Px24y70 } CellNode (23 @ 70) (20)Px32y78 { Px33y78, Px31y78, Px32y79, Px32y77 } CellNode (32 @ 78) (20)Px95y76 { Px96y76, Px95y77, Px94y76, Px95y75 } CellNode (95 @ 76) (20)Px64y19 { Px65y19, Px63y19, Px64y18, Px64y20 } CellNode (64 @ 19) (20)Px69y22 { Px69y21, Px69y23, Px68y22, Px70y22 } CellNode (69 @ 22) (20)Px6y84 { Px7y84, Px6y83, Px5y84 } CellNode (6 @ 84) (20)Px57y23 { Px57y24, Px58y23, Px56y23, Px57y22 } CellNode (57 @ 23) (20)Px11y71 { Px11y70, Px11y72, Px12y71, Px10y71 } CellNode (11 @ 71) (20)Px43y12 { Px43y13, Px44y12, Px43y11, Px42y12 } CellNode (43 @ 12) (20)Px45y24 { Px46y24, Px44y24, Px45y25, Px45y23 } CellNode (45 @ 24) (20)Px55y11 { Px55y12, Px54y11, Px55y10 } CellNode (55 @ 11) (20)Px50y71 { Px50y70, Px50y72, Px49y71, Px51y71 } CellNode (50 @ 71) (20)Px48y56 { Px49y56, Px47y56, Px48y55, Px48y57 } CellNode (48 @ 56) (20)Px71y78 { Px72y78, Px70y78, Px71y79, Px71y77 } CellNode (71 @ 78) (20)Px36y57 { Px36y58, Px37y57, Px36y56, Px35y57 } CellNode (36 @ 57) (20)Px20y79 { Px20y78, Px20y80, Px21y79, Px19y79 } CellNode (20 @ 79) (20)Px83y77 { Px84y77, Px83y76, Px83y78, Px82y77 } CellNode (83 @ 77) (20)Px24y58 { Px24y57, Px23y58, Px24y59, Px25y58 } CellNode (24 @ 58) (20)Px29y61 { Px30y61, Px28y61, Px29y62, Px29y60 } CellNode (29 @ 61) (20)Px38y69 { Px39y69, Px37y69, Px38y68, Px38y70 } CellNode (38 @ 69) (20)Px75y57 { Px75y58, Px76y57, Px75y56, Px74y57 } CellNode (75 @ 57) (20)Px17y62 { Px16y62, Px17y61, Px18y62, Px17y63 } CellNode (17 @ 62) (20)Px54y50 { Px53y50, Px54y49, Px54y51, Px55y50 } CellNode (54 @ 50) (20)Px63y58 { Px63y57, Px62y58, Px64y58, Px63y59 } CellNode (63 @ 58) (20)Px68y61 { Px69y61, Px67y61, Px68y62, Px68y60 } CellNode (68 @ 61) (20)Px42y51 { Px42y52, Px43y51, Px41y51, Px42y50 } CellNode (42 @ 51) (20)Px77y69 { Px78y69, Px76y69, Px77y68, Px77y70 } CellNode (77 @ 69) (20)Px51y59 { Px52y59, Px50y59, Px51y58, Px51y60 } CellNode (51 @ 59) (20)Px30y52 { Px30y53, Px29y52, Px31y52, Px30y51 } CellNode (30 @ 52) (20)Px55y38 { Px55y39, Px56y38, Px54y38, Px55y37 } CellNode (55 @ 38) (20)Px34y31 { Px34y30, Px34y32, Px35y31, Px33y31 } CellNode (34 @ 31) (20)Px69y49 { Px70y49, Px69y48, Px69y50, Px68y49 } CellNode (69 @ 49) (20)Px43y39 { Px43y38, Px43y40, Px44y39, Px42y39 } CellNode (43 @ 39) (20)Px48y42 { Px49y42, Px47y42, Px48y43, Px48y41 } CellNode (48 @ 42) (20)Px22y32 { Px23y32, Px22y31, Px21y32, Px22y33 } CellNode (22 @ 32) (20)Px36y43 { Px36y42, Px37y43, Px35y43, Px36y44 } CellNode (36 @ 43) (20)Px73y31 { Px72y31, Px73y32, Px74y31, Px73y30 } CellNode (73 @ 31) (20)Px27y76 { Px27y77, Px28y76, Px26y76, Px27y75 } CellNode (27 @ 76) (20)Px61y32 { Px62y32, Px61y31, Px60y32, Px61y33 } CellNode (61 @ 32) (20)Px15y77 { Px16y77, Px14y77, Px15y76, Px15y78 } CellNode (15 @ 77) (20)Px78y75 { Px79y75, Px78y74, Px77y75, Px78y76 } CellNode (78 @ 75) (20)Px7y58 { Px8y58, Px6y58, Px7y59, Px7y57 } CellNode (7 @ 58) (20)Px66y76 { Px66y77, Px67y76, Px66y75, Px65y76 } CellNode (66 @ 76) (20)Px28y23 { Px28y24, Px29y23, Px28y22, Px27y23 } CellNode (28 @ 23) (20)Px54y77 { Px55y77, Px53y77, Px54y76, Px54y78 } CellNode (54 @ 77) (20)Px33y70 { Px33y69, Px33y71, Px34y70, Px32y70 } CellNode (33 @ 70) (20)Px42y78 { Px43y78, Px42y79, Px42y77, Px41y78 } CellNode (42 @ 78) (20)Px47y81 { Px48y81, Px46y81, Px47y80, Px47y82 } CellNode (47 @ 81) (20)Px21y71 { Px21y70, Px20y71, Px21y72, Px22y71 } CellNode (21 @ 71) (20)Px30y79 { Px30y78, Px30y80, Px31y79, Px29y79 } CellNode (30 @ 79) (20)Px93y77 { Px94y77, Px93y76, Px92y77, Px93y78 } CellNode (93 @ 77) (20)Px72y70 { Px72y71, Px73y70, Px71y70, Px72y69 } CellNode (72 @ 70) (20)Px41y13 { Px42y13, Px40y13, Px41y12, Px41y14 } CellNode (41 @ 13) (20)Px81y78 { Px82y78, Px81y79, Px80y78, Px81y77 } CellNode (81 @ 78) (20)Px86y81 { Px85y81, Px87y81, Px86y80, Px86y82 } CellNode (86 @ 81) (20)Px55y24 { Px54y24, Px55y23, Px55y25 } CellNode (55 @ 24) (20)Px67y23 { Px68y23, Px67y24, Px66y23, Px67y22 } CellNode (67 @ 23) (20)Px43y25 { Px42y25, Px43y26, Px43y24 } CellNode (43 @ 25) (20)Px31y26 { Px31y27, Px30y26, Px32y26, Px31y25 } CellNode (31 @ 26) (20)Px34y58 { Px33y58, Px34y57, Px34y59, Px35y58 } CellNode (34 @ 58) (20)Px39y61 { Px39y62, Px40y61, Px38y61, Px39y60 } CellNode (39 @ 61) (20)Px48y69 { Px48y70, Px49y69, Px48y68, Px47y69 } CellNode (48 @ 69) (20)Px22y59 { Px23y59, Px22y58, Px21y59, Px22y60 } CellNode (22 @ 59) (20)Px27y62 { Px27y63, Px27y61, Px28y62, Px26y62 } CellNode (27 @ 62) (20)Px64y50 { Px63y50, Px64y49, Px64y51, Px65y50 } CellNode (64 @ 50) (20)Px73y58 { Px73y57, Px72y58, Px73y59, Px74y58 } CellNode (73 @ 58) (20)Px15y63 { Px16y63, Px15y64, Px14y63, Px15y62 } CellNode (15 @ 63) (20)Px78y61 { Px79y61, Px78y62, Px78y60, Px77y61 } CellNode (78 @ 61) (20)Px52y51 { Px52y52, Px53y51, Px51y51, Px52y50 } CellNode (52 @ 51) (20)Px61y59 { Px62y59, Px60y59, Px61y58, Px61y60 } CellNode (61 @ 59) (20)Px66y62 { Px66y63, Px66y61, Px67y62, Px65y62 } CellNode (66 @ 62) (20)Px49y16 { Px50y16, Px48y16, Px49y17, Px49y15 } CellNode (49 @ 16) (20)Px40y52 { Px40y53, Px39y52, Px41y52, Px40y51 } CellNode (40 @ 52) (20)Px54y63 { Px55y63, Px53y63, Px54y64, Px54y62 } CellNode (54 @ 63) (20)Px4y71 { Px5y71, Px3y71, Px4y72, Px4y70 } CellNode (4 @ 71) (20)Px62y8 { Px62y9, Px62y7, Px63y8, Px61y8 } CellNode (62 @ 8) (20)Px58y42 { Px58y43, Px59y42, Px57y42, Px58y41 } CellNode (58 @ 42) (20)Px46y43 { Px45y43, Px46y42, Px46y44, Px47y43 } CellNode (46 @ 43) (20)Px20y33 { Px20y34, Px21y33, Px20y32, Px19y33 } CellNode (20 @ 33) (20)Px34y44 { Px35y44, Px33y44, Px34y45, Px34y43 } CellNode (34 @ 44) (20)Px71y32 { Px72y32, Px71y31, Px70y32, Px71y33 } CellNode (71 @ 32) (20)Px8y50 { Px9y50, Px8y51, Px7y50, Px8y49 } CellNode (8 @ 50) (20)Px73y44 { Px74y44, Px73y43 } CellNode (73 @ 44) (20)Px13y78 { Px13y79, Px14y78, Px12y78, Px13y77 } CellNode (13 @ 78) (20)Px5y59 { Px5y58, Px5y60, Px6y59, Px4y59 } CellNode (5 @ 59) (20)Px18y81 { Px19y81, Px18y80, Px17y81, Px18y82 } CellNode (18 @ 81) (20)Px61y45 { Px61y46, Px60y45, Px62y45, Px61y44 } CellNode (61 @ 45) (20)Px69y80 { Px69y79, Px69y81, Px70y80, Px68y80 } CellNode (69 @ 80) (20)Px38y23 { Px38y22, Px39y23 } CellNode (38 @ 23) (20)Px43y70 { Px43y69, Px43y71, Px44y70, Px42y70 } CellNode (43 @ 70) (20)Px52y78 { Px52y79, Px53y78, Px51y78, Px52y77 } CellNode (52 @ 78) (20)Px57y81 { Px57y82, Px57y80, Px56y81, Px58y81 } CellNode (57 @ 81) (20)Px26y24 { Px25y24, Px26y25, Px27y24, Px26y23 } CellNode (26 @ 24) (20)Px31y71 { Px30y71, Px31y70, Px31y72, Px32y71 } CellNode (31 @ 71) (20)Px40y79 { Px39y79, Px40y78, Px40y80, Px41y79 } CellNode (40 @ 79) (20)Px45y82 { Px45y83, Px46y82, Px44y82, Px45y81 } CellNode (45 @ 82) (20)Px28y36 { Px28y35, Px28y37, Px29y36, Px27y36 } CellNode (28 @ 36) (20)Px82y70 { Px82y69, Px82y71, Px83y70, Px81y70 } CellNode (82 @ 70) (20)Px33y83 { Px34y83, Px33y82, Px33y84, Px32y83 } CellNode (33 @ 83) (20)Px96y81 { Px97y81, Px96y80, Px95y81, Px96y82 } CellNode (96 @ 81) (20)Px57y8 { Px56y8, Px57y9, Px58y8, Px57y7 } CellNode (57 @ 8) (20)Px65y24 { Px64y24, Px65y25, Px66y24, Px65y23 } CellNode (65 @ 24) (20)Px21y84 { Px20y84, Px21y83, Px22y84 } CellNode (21 @ 84) (20)Px84y82 { Px85y82, Px83y82, Px84y83, Px84y81 } CellNode (84 @ 82) (20)Px67y36 { Px67y35, Px68y36, Px66y36, Px67y37 } CellNode (67 @ 36) (20)Px70y71 { Px70y70, Px69y71, Px70y72, Px71y71 } CellNode (70 @ 71) (20)Px72y83 { Px73y83, Px72y82, Px72y84, Px71y83 } CellNode (72 @ 83) (20)Px49y61 { Px49y62, Px50y61, Px49y60, Px48y61 } CellNode (49 @ 61) (20)Px41y26 { Px42y26, Px41y27, Px40y26, Px41y25 } CellNode (41 @ 26) (20)Px19y69 { Px19y70, Px20y69, Px19y68, Px18y69 } CellNode (19 @ 69) (20)Px51y2 { Px50y2, Px51y3, Px52y2, Px51y1 } CellNode (51 @ 2) (20)Px54y5 { Px53y5, Px54y6, Px55y5, Px54y4 } CellNode (54 @ 5) (20)Px37y62 { Px38y62, Px36y62, Px37y61, Px37y63 } CellNode (37 @ 62) (20)Px91y78 { Px91y79, Px92y78, Px91y77, Px90y78 } CellNode (91 @ 78) (20)Px25y63 { Px25y64, Px26y63, Px24y63, Px25y62 } CellNode (25 @ 63) (20)Px39y74 { Px38y74, Px40y74, Px39y73, Px39y75 } CellNode (39 @ 74) (20)Px13y64 { Px13y63, Px14y64, Px12y64, Px13y65 } CellNode (13 @ 64) (20)Px76y62 { Px77y62, Px75y62, Px76y61, Px76y63 } CellNode (76 @ 62) (20)Px50y52 { Px49y52, Px50y53, Px51y52, Px50y51 } CellNode (50 @ 52) (20)Px8y77 { Px8y76, Px8y78, Px9y77, Px7y77 } CellNode (8 @ 77) (20)Px59y16 { Px60y16 } CellNode (59 @ 16) (20)Px64y63 { Px64y64, Px65y63, Px64y62, Px63y63 } CellNode (64 @ 63) (20)Px47y17 { Px47y18, Px46y17, Px48y17, Px47y16 } CellNode (47 @ 17) (20)Px52y64 { Px52y63, Px52y65, Px53y64, Px51y64 } CellNode (52 @ 64) (20)Px35y18 { Px34y18, Px35y19, Px35y17, Px36y18 } CellNode (35 @ 18) (20)Px40y65 { Px40y66, Px41y65, Px39y65, Px40y64 } CellNode (40 @ 65) (20)Px65y10 { Px65y11, Px64y10, Px65y9 } CellNode (65 @ 10) (20)Px19y55 { Px18y55, Px19y56, Px20y55 } CellNode (19 @ 55) (20)Px2y72 { Px2y73, Px2y71, Px3y72, Px1y72 } CellNode (2 @ 72) (20)Px56y43 { Px56y42, Px55y43, Px56y44, Px57y43 } CellNode (56 @ 43) (20)Px49y5 { Px50y5, Px48y5, Px49y6, Px49y4 } CellNode (49 @ 5) (20)Px53y11 { Px54y11, Px52y11, Px53y12, Px53y10 } CellNode (53 @ 11) (20)Px44y44 { Px44y45, Px45y44, Px43y44, Px44y43 } CellNode (44 @ 44) (20)Px46y2 { Px47y2, Px46y3, Px45y2, Px46y1 } CellNode (46 @ 2) (20)Px58y55 { Px58y56, Px58y54, Px59y55, Px57y55 } CellNode (58 @ 55) (20)Px32y45 { Px32y44, Px33y45, Px32y46, Px31y45 } CellNode (32 @ 45) (20)Px46y56 { Px47y56, Px45y56, Px46y57, Px46y55 } CellNode (46 @ 56) (20)Px6y51 { Px7y51, Px6y50, Px5y51, Px6y52 } CellNode (6 @ 51) (20)Px28y81 { Px29y81, Px27y81, Px28y80, Px28y82 } CellNode (28 @ 81) (20)Px71y45 { Px71y46, Px70y45 } CellNode (71 @ 45) (20)Px16y82 { Px16y83, Px17y82, Px15y82, Px16y81 } CellNode (16 @ 82) (20)Px8y63 { Px7y63, Px9y63, Px8y62, Px8y64 } CellNode (8 @ 63) (20)Px79y80 { Px79y79, Px79y81, Px80y80, Px78y80 } CellNode (79 @ 80) (20)Px67y81 { Px68y81, Px67y80, Px66y81, Px67y82 } CellNode (67 @ 81) (20)Px55y82 { Px55y83, Px56y82, Px54y82, Px55y81 } CellNode (55 @ 82) (20)Px24y25 { Px25y25, Px24y24, Px23y25, Px24y26 } CellNode (24 @ 25) (20)Px38y36 { Px38y35, Px37y36, Px39y36, Px38y37 } CellNode (38 @ 36) (20)Px43y83 { Px42y83, Px43y82, Px43y84, Px44y83 } CellNode (43 @ 83) (20)Px31y84 { Px30y84, Px32y84, Px31y83 } CellNode (31 @ 84) (20)Px94y82 { Px94y83, Px95y82, Px94y81, Px93y82 } CellNode (94 @ 82) (20)Px37y9 { Px37y8, Px38y9, Px36y9, Px37y10 } CellNode (37 @ 9) (20)Px63y25 { Px64y25, Px63y24, Px62y25, Px63y26 } CellNode (63 @ 25) (20)Px82y83 { Px81y83, Px82y82, Px83y83, Px82y84 } CellNode (82 @ 83) (20)Px51y26 { Px51y27, Px52y26, Px50y26, Px51y25 } CellNode (51 @ 26) (20)Px65y37 { Px66y37, Px64y37, Px65y38, Px65y36 } CellNode (65 @ 37) (20)Px44y30 { Px44y29, Px44y31, Px43y30, Px45y30 } CellNode (44 @ 30) (20)Px70y84 { Px69y84, Px70y83, Px71y84 } CellNode (70 @ 84) (20)Px53y38 { Px54y38, Px52y38, Px53y39, Px53y37 } CellNode (53 @ 38) (20)Px32y31 { Px32y32, Px31y31, Px32y30, Px33y31 } CellNode (32 @ 31) (20)Px35y63 { Px35y64, Px36y63, Px34y63, Px35y62 } CellNode (35 @ 63) (20)Px49y74 { Px48y74, Px50y74, Px49y73, Px49y75 } CellNode (49 @ 74) (20)Px23y64 { Px23y63, Px22y64, Px23y65, Px24y64 } CellNode (23 @ 64) (20)Px37y75 { Px37y76, Px38y75, Px36y75, Px37y74 } CellNode (37 @ 75) (20)Px11y65 { Px11y66, Px12y65, Px10y65, Px11y64 } CellNode (11 @ 65) (20)Px74y63 { Px74y64, Px75y63, Px74y62, Px73y63 } CellNode (74 @ 63) (20)Px25y76 { Px25y77, Px25y75, Px26y76, Px24y76 } CellNode (25 @ 76) (20)Px88y74 { Px87y74, Px88y75, Px88y73, Px89y74 } CellNode (88 @ 74) (20)Px57y17 { Px56y17, Px57y18, Px58y17, Px57y16 } CellNode (57 @ 17) (20)Px62y64 { Px61y64, Px62y63, Px62y65, Px63y64 } CellNode (62 @ 64) (20)Px76y75 { Px77y75, Px76y76, Px75y75, Px76y74 } CellNode (76 @ 75) (20)Px36y10 { Px36y11, Px35y10, Px36y9, Px37y10 } CellNode (36 @ 10) (20)Px50y65 { Px50y66, Px51y65, Px49y65, Px50y64 } CellNode (50 @ 65) (20)Px6y78 { Px7y78, Px6y77, Px5y78, Px6y79 } CellNode (6 @ 78) (20)Px33y19 { Px32y19, Px33y18, Px34y19 } CellNode (33 @ 19) (20)Px64y76 { Px63y76, Px64y75, Px64y77, Px65y76 } CellNode (64 @ 76) (20)Px29y55 { Px30y55, Px29y54, Px28y55, Px29y56 } CellNode (29 @ 55) (20)Px63y11 { Px64y11, Px63y12, Px62y11, Px63y10 } CellNode (63 @ 11) (20)Px17y56 { Px17y57, Px18y56, Px16y56, Px17y55 } CellNode (17 @ 56) (20)Px51y12 { Px50y12, Px51y11, Px51y13, Px52y12 } CellNode (51 @ 12) (20)Px68y55 { Px68y54, Px67y55, Px69y55, Px68y56 } CellNode (68 @ 55) (20)Px42y45 { Px41y45, Px42y46, Px43y45, Px42y44 } CellNode (42 @ 45) (20)Px56y56 { Px57y56, Px55y56, Px56y57, Px56y55 } CellNode (56 @ 56) (20)Px30y46 { Px31y46, Px29y46, Px30y45, Px30y47 } CellNode (30 @ 46) (20)Px44y57 { Px44y56, Px45y57, Px43y57, Px44y58 } CellNode (44 @ 57) (20)Px4y52 { Px4y53, Px5y52, Px3y52, Px4y51 } CellNode (4 @ 52) (20)Px32y58 { Px33y58, Px31y58, Px32y59, Px32y57 } CellNode (32 @ 58) (20)Px11y51 { Px11y52, Px11y50, Px10y51 } CellNode (11 @ 51) (20)Px14y83 { Px15y83, Px13y83, Px14y82, Px14y84 } CellNode (14 @ 83) (20)Px6y64 { Px5y64, Px6y65, Px7y64 } CellNode (6 @ 64) (20)Px62y50 { Px62y51, Px61y50, Px63y50, Px62y49 } CellNode (62 @ 50) (20)Px65y82 { Px65y81, Px65y83, Px66y82, Px64y82 } CellNode (65 @ 82) (20)Px71y58 { Px71y59, Px70y58, Px72y58, Px71y57 } CellNode (71 @ 58) (20)Px48y36 { Px47y36, Px48y35, Px48y37, Px49y36 } CellNode (48 @ 36) (20)Px53y83 { Px54y83, Px53y82, Px52y83, Px53y84 } CellNode (53 @ 83) (20)Px36y37 { Px36y38, Px37y37, Px36y36, Px35y37 } CellNode (36 @ 37) (20)Px41y84 { Px40y84, Px42y84, Px41y83 } CellNode (41 @ 84) (20)Px15y30 { Px15y29, Px15y31, Px16y30 } CellNode (15 @ 30) (20)Px29y41 { Px30y41, Px28y41, Px29y42, Px29y40 } CellNode (29 @ 41) (20)Px92y83 { Px93y83, Px92y82, Px91y83, Px92y84 } CellNode (92 @ 83) (20)Px75y37 { Px75y38, Px76y37, Px75y36, Px74y37 } CellNode (75 @ 37) (20)Px80y84 { Px79y84, Px80y83, Px81y84 } CellNode (80 @ 84) (20)Px54y30 { Px54y29, Px55y30, Px54y31, Px53y30 } CellNode (54 @ 30) (20)Px63y38 { Px63y39, Px62y38, Px64y38, Px63y37 } CellNode (63 @ 38) (20)Px68y41 { Px69y41, Px68y42, Px67y41, Px68y40 } CellNode (68 @ 41) (20)Px42y31 { Px41y31, Px42y32, Px42y30, Px43y31 } CellNode (42 @ 31) (20)Px42y8 { Px41y8, Px42y9, Px43y8, Px42y7 } CellNode (42 @ 8) (20)Px59y74 { Px59y75, Px59y73, Px60y74 } CellNode (59 @ 74) (20)Px30y32 { Px31y32, Px30y33, Px29y32, Px30y31 } CellNode (30 @ 32) (20)Px51y39 { Px50y39, Px51y38, Px51y40, Px52y39 } CellNode (51 @ 39) (20)Px47y75 { Px48y75, Px47y76, Px46y75, Px47y74 } CellNode (47 @ 75) (20)Px21y65 { Px21y66, Px22y65, Px20y65, Px21y64 } CellNode (21 @ 65) (20)Px35y76 { Px34y76, Px35y75, Px35y77, Px36y76 } CellNode (35 @ 76) (20)Px67y17 { Px67y16, Px66y17, Px67y18 } CellNode (67 @ 17) (20)Px46y10 { Px46y9, Px45y10, Px46y11 } CellNode (46 @ 10) (20)Px4y79 { Px4y80, Px5y79, Px4y78, Px3y79 } CellNode (4 @ 79) (20)Px23y77 { Px23y78, Px24y77, Px22y77, Px23y76 } CellNode (23 @ 77) (20)Px34y11 { Px34y12, Px35y11, Px34y10, Px33y11 } CellNode (34 @ 11) (20)Px69y29 { Px69y28, Px69y30, Px70y29, Px68y29 } CellNode (69 @ 29) (20)Px11y78 { Px11y77, Px12y78, Px11y79, Px10y78 } CellNode (11 @ 78) (20)Px74y76 { Px74y77, Px74y75, Px75y76, Px73y76 } CellNode (74 @ 76) (20)Px86y75 { Px87y75, Px86y76, Px86y74, Px85y75 } CellNode (86 @ 75) (20)Px43y19 { Px42y19, Px43y18, Px44y19 } CellNode (43 @ 19) (20)Px62y77 { Px62y78, Px63y77, Px61y77, Px62y76 } CellNode (62 @ 77) (20)Px39y55 { Px40y55, Px39y54, Px38y55, Px39y56 } CellNode (39 @ 55) (20)Px55y18 { Px54y18, Px55y17 } CellNode (55 @ 18) (20)Px63y6 { Px63y7, Px62y6, Px64y6, Px63y5 } CellNode (63 @ 6) (20)Px50y78 { Px50y77, Px51y78, Px49y78, Px50y79 } CellNode (50 @ 78) (20)Px27y56 { Px27y57, Px28y56, Px27y55, Px26y56 } CellNode (27 @ 56) (20)Px9y82 { Px9y83, Px9y81, Px8y82, Px10y82 } CellNode (9 @ 82) (20)Px60y65 { Px60y66, Px61y65, Px60y64, Px59y65 } CellNode (60 @ 65) (20)Px60y3 { Px60y4, Px61y3, Px60y2, Px59y3 } CellNode (60 @ 3) (20)Px78y55 { Px79y55, Px77y55, Px78y54, Px78y56 } CellNode (78 @ 55) (20)Px80y70 { Px80y69, Px81y70, Px79y70, Px80y71 } CellNode (80 @ 70) (20)Px48y22 { Px47y22, Px48y23, Px49y22 } CellNode (48 @ 22) (20)Px41y70 { Px41y69, Px42y70, Px40y70, Px41y71 } CellNode (41 @ 70) (20)Px66y56 { Px66y57, Px67y56, Px65y56, Px66y55 } CellNode (66 @ 56) (20)Px61y12 { Px60y12, Px61y11, Px62y12, Px61y13 } CellNode (61 @ 12) (20)Px54y57 { Px53y57, Px54y56, Px54y58, Px55y57 } CellNode (54 @ 57) (20)Px59y60 { Px59y61, Px60y60, Px58y60, Px59y59 } CellNode (59 @ 60) (20)Px33y50 { Px33y51, Px34y50, Px32y50, Px33y49 } CellNode (33 @ 50) (20)Px68y68 { Px69y68, Px67y68, Px68y69, Px68y67 } CellNode (68 @ 68) (20)Px42y58 { Px43y58, Px42y59, Px42y57, Px41y58 } CellNode (42 @ 58) (20)Px47y61 { Px48y61, Px47y60, Px47y62, Px46y61 } CellNode (47 @ 61) (20)Px30y59 { Px30y60, Px31y59, Px29y59, Px30y58 } CellNode (30 @ 59) (20)Px72y50 { Px73y50, Px72y51, Px71y50, Px72y49 } CellNode (72 @ 50) (20)Px4y65 { Px4y64, Px3y65, Px5y65, Px4y66 } CellNode (4 @ 65) (20)Px81y58 { Px81y59, Px80y58 } CellNode (81 @ 58) (20)Px60y51 { Px60y52, Px59y51, Px61y51, Px60y50 } CellNode (60 @ 51) (20)Px46y37 { Px46y38, Px47y37, Px46y36, Px45y37 } CellNode (46 @ 37) (20)Px25y30 { Px25y29, Px25y31, Px26y30, Px24y30 } CellNode (25 @ 30) (20)Px58y6 { Px57y6, Px58y7, Px59y6, Px58y5 } CellNode (58 @ 6) (20)Px34y38 { Px34y37, Px34y39, Px35y38, Px33y38 } CellNode (34 @ 38) (20)Px48y49 { Px49y49, Px47y49, Px48y48, Px48y50 } CellNode (48 @ 49) (20)Px39y41 { Px39y42, Px40y41, Px38y41, Px39y40 } CellNode (39 @ 41) (20)Px55y3 { Px54y3, Px55y4, Px55y2, Px56y3 } CellNode (55 @ 3) (20)Px64y30 { Px64y29, Px64y31, Px65y30, Px63y30 } CellNode (64 @ 30) (20)Px90y84 { Px89y84, Px90y83, Px91y84 } CellNode (90 @ 84) (20)Px73y38 { Px72y38, Px73y39, Px74y38, Px73y37 } CellNode (73 @ 38) (20)Px18y75 { Px18y76, Px19y75, Px18y74, Px17y75 } CellNode (18 @ 75) (20)Px52y31 { Px53y31, Px52y30, Px51y31, Px52y32 } CellNode (52 @ 31) (20)Px61y39 { Px60y39, Px61y38, Px61y40, Px62y39 } CellNode (61 @ 39) (20)Px66y42 { Px66y41, Px66y43, Px65y42, Px67y42 } CellNode (66 @ 42) (20)Px40y32 { Px40y33, Px41y32, Px39y32, Px40y31 } CellNode (40 @ 32) (20)Px54y43 { Px54y44, Px55y43, Px53y43, Px54y42 } CellNode (54 @ 43) (20)Px57y75 { Px56y75, Px57y74, Px57y76 } CellNode (57 @ 75) (20)Px45y76 { Px46y76, Px44y76, Px45y75, Px45y77 } CellNode (45 @ 76) (20)Px19y22 { Px19y23, Px20y22 } CellNode (19 @ 22) (20)Px33y77 { Px33y78, Px34y77, Px32y77, Px33y76 } CellNode (33 @ 77) (20)Px96y75 { Px96y76, Px97y75, Px96y74, Px95y75 } CellNode (96 @ 75) (20)Px38y80 { Px37y80, Px39y80, Px38y79, Px38y81 } CellNode (38 @ 80) (20)Px12y70 { Px11y70, Px12y69, Px12y71, Px13y70 } CellNode (12 @ 70) (20)Px21y78 { Px21y77, Px20y78, Px21y79, Px22y78 } CellNode (21 @ 78) (20)Px84y76 { Px85y76, Px83y76, Px84y75, Px84y77 } CellNode (84 @ 76) (20)Px53y19 { Px53y20, Px54y19, Px53y18, Px52y19 } CellNode (53 @ 19) (20)Px7y83 { Px6y83, Px7y84, Px8y83, Px7y82 } CellNode (7 @ 83) (20)Px77y80 { Px76y80, Px78y80, Px77y79, Px77y81 } CellNode (77 @ 80) (20)Px26y81 { Px27y81, Px25y81, Px26y82, Px26y80 } CellNode (26 @ 81) (20)Px46y23 { Px46y22, Px46y24, Px47y23, Px45y23 } CellNode (46 @ 23) (20)Px58y22 { Px58y23, Px59y22, Px58y21, Px57y22 } CellNode (58 @ 22) (20)Px65y81 { Px65y82, Px66y81, Px64y81, Px65y80 } CellNode (65 @ 81) (20)Px34y24 { Px33y24, Px34y25, Px34y23, Px35y24 } CellNode (34 @ 24) (20)Px51y70 { Px50y70, Px51y69, Px51y71, Px52y70 } CellNode (51 @ 70) (20)Px60y78 { Px60y77, Px60y79, Px61y78 } CellNode (60 @ 78) (20)Px22y25 { Px22y26, Px23y25, Px21y25, Px22y24 } CellNode (22 @ 25) (20)Px25y57 { Px24y57, Px25y56, Px25y58, Px26y57 } CellNode (25 @ 57) (20)Px72y77 { Px73y77, Px72y78, Px72y76, Px71y77 } CellNode (72 @ 77) (20)Px39y68 { Px39y69, Px40y68, Px38y68, Px39y67 } CellNode (39 @ 68) (20)Px40y4 { Px41y4, Px39y4, Px40y5, Px40y3 } CellNode (40 @ 4) (20)Px18y61 { Px18y60, Px17y61, Px19y61, Px18y62 } CellNode (18 @ 61) (20)Px61y25 { Px62y25, Px60y25, Px61y26, Px61y24 } CellNode (61 @ 25) (20)Px64y57 { Px63y57, Px64y56, Px64y58, Px65y57 } CellNode (64 @ 57) (20)Px69y60 { Px69y61, Px70y60, Px68y60, Px69y59 } CellNode (69 @ 60) (20)Px43y50 { Px43y51, Px44y50, Px42y50, Px43y49 } CellNode (43 @ 50) (20)Px78y68 { Px79y68, Px78y69, Px78y67, Px77y68 } CellNode (78 @ 68) (20)Px52y58 { Px52y59, Px53y58, Px51y58, Px52y57 } CellNode (52 @ 58) (20)Px57y61 { Px56y61, Px57y60, Px57y62, Px58y61 } CellNode (57 @ 61) (20)Px31y51 { Px31y50, Px31y52, Px32y51, Px30y51 } CellNode (31 @ 51) (20)Px66y69 { Px66y68, Px66y70, Px67y69, Px65y69 } CellNode (66 @ 69) (20)Px40y59 { Px40y60, Px39y59, Px41y59, Px40y58 } CellNode (40 @ 59) (20)Px45y62 { Px45y63, Px44y62, Px46y62, Px45y61 } CellNode (45 @ 62) (20)Px33y63 { Px33y62, Px34y63, Px32y63, Px33y64 } CellNode (33 @ 63) (20)Px70y51 { Px70y52, Px69y51, Px71y51, Px70y50 } CellNode (70 @ 51) (20)Px2y66 { Px3y66, Px2y67 } CellNode (2 @ 66) (20)Px72y63 { Px72y62, Px73y63, Px71y63, Px72y64 } CellNode (72 @ 63) (20)Px49y41 { Px49y42, Px50y41, Px49y40, Px48y41 } CellNode (49 @ 41) (20)Px58y49 { Px58y50, Px59y49, Px57y49, Px58y48 } CellNode (58 @ 49) (20)Px38y7 { Px38y6, Px39y7, Px37y7, Px38y8 } CellNode (38 @ 7) (20)Px32y39 { Px33y39, Px32y38, Px31y39, Px32y40 } CellNode (32 @ 39) (20)Px37y42 { Px37y41, Px36y42, Px37y43, Px38y42 } CellNode (37 @ 42) (20)Px71y39 { Px72y39, Px71y38 } CellNode (71 @ 39) (20)Px50y32 { Px50y33, Px51y32, Px49y32, Px50y31 } CellNode (50 @ 32) (20)Px8y57 { Px8y58, Px9y57, Px7y57, Px8y56 } CellNode (8 @ 57) (20)Px64y43 { Px65y43, Px63y43, Px64y44, Px64y42 } CellNode (64 @ 43) (20)Px52y44 { Px52y45, Px53y44, Px51y44, Px52y43 } CellNode (52 @ 44) (20)Px29y22 { Px29y23, Px30y22, Px28y22, Px29y21 } CellNode (29 @ 22) (20)Px40y45 { Px41y45, Px39y45, Px40y44, Px40y46 } CellNode (40 @ 45) (20)Px43y77 { Px43y78, Px44y77, Px42y77, Px43y76 } CellNode (43 @ 77) (20)Px48y80 { Px49y80, Px47y80, Px48y79, Px48y81 } CellNode (48 @ 80) (20)Px22y70 { Px21y70, Px22y69, Px22y71, Px23y70 } CellNode (22 @ 70) (20)Px31y78 { Px30y78, Px31y77, Px31y79, Px32y78 } CellNode (31 @ 78) (20)Px36y81 { Px36y82, Px35y81, Px37y81, Px36y80 } CellNode (36 @ 81) (20)Px10y71 { Px9y71, Px10y72, Px11y71, Px10y70 } CellNode (10 @ 71) (20)Px2y52 { Px2y51, Px3y52, Px1y52, Px2y53 } CellNode (2 @ 52) (20)Px82y77 { Px82y78, Px83y77, Px82y76, Px81y77 } CellNode (82 @ 77) (20)Px5y84 { Px6y84, Px5y83, Px4y84 } CellNode (5 @ 84) (20)Px19y35 { Px18y35, Px19y34, Px20y35 } CellNode (19 @ 35) (20)Px24y82 { Px23y82, Px24y81, Px24y83, Px25y82 } CellNode (24 @ 82) (20)Px70y78 { Px70y77, Px69y78, Px70y79, Px71y78 } CellNode (70 @ 78) (20)Px12y83 { Px13y83, Px11y83, Px12y84, Px12y82 } CellNode (12 @ 83) (20)Px58y35 { Px58y34, Px58y36, Px57y35, Px59y35 } CellNode (58 @ 35) (20)Px75y81 { Px75y82, Px76y81, Px74y81, Px75y80 } CellNode (75 @ 81) (20)Px63y82 { Px64y82, Px63y81, Px63y83, Px62y82 } CellNode (63 @ 82) (20)Px32y25 { Px33y25, Px32y26, Px32y24, Px31y25 } CellNode (32 @ 25) (20)Px87y80 { Px88y80, Px86y80, Px87y79, Px87y81 } CellNode (87 @ 80) (20)Px49y68 { Px49y69, Px50y68, Px48y68, Px49y67 } CellNode (49 @ 68) (20)Px51y83 { Px52y83, Px50y83, Px51y84, Px51y82 } CellNode (51 @ 83) (20)Px28y61 { Px29y61, Px28y60, Px27y61, Px28y62 } CellNode (28 @ 61) (20)Px51y9 { Px50y9, Px52y9, Px51y8, Px51y10 } CellNode (51 @ 9) (20)Px20y26 { Px20y27, Px20y25, Px21y26, Px19y26 } CellNode (20 @ 26) (20)Px71y25 { Px71y26, Px70y25, Px72y25, Px71y24 } CellNode (71 @ 25) (20)Px11y59 { Px11y58, Px11y60, Px10y59 } CellNode (11 @ 59) (20)Px16y62 { Px16y63, Px17y62, Px15y62, Px16y61 } CellNode (16 @ 62) (20)Px79y60 { Px79y59, Px79y61, Px80y60, Px78y60 } CellNode (79 @ 60) (20)Px44y24 { Px44y23, Px45y24, Px43y24 } CellNode (44 @ 24) (20)Px67y61 { Px68y61, Px67y60, Px66y61, Px67y62 } CellNode (67 @ 61) (20)Px56y23 { Px55y23, Px57y23, Px56y22 } CellNode (56 @ 23) (20)Px76y69 { Px77y69, Px76y68, Px75y69, Px76y70 } CellNode (76 @ 69) (20)Px37y69 { Px38y69, Px37y68, Px36y69, Px37y70 } CellNode (37 @ 69) (20)Px50y59 { Px50y58, Px50y60, Px51y59, Px49y59 } CellNode (50 @ 59) (20)Px55y62 { Px56y62, Px55y63, Px54y62, Px55y61 } CellNode (55 @ 62) (20)Px69y73 { Px69y74, Px68y73, Px69y72, Px70y73 } CellNode (69 @ 73) (20)Px38y16 { Px39y16, Px38y17, Px37y16, Px38y15 } CellNode (38 @ 16) (20)Px43y63 { Px43y62, Px44y63, Px42y63, Px43y64 } CellNode (43 @ 63) (20)Px68y22 { Px68y23, Px69y22, Px67y22, Px68y21 } CellNode (68 @ 22) (20)Px31y64 { Px32y64, Px30y64, Px31y65, Px31y63 } CellNode (31 @ 64) (20)Px82y63 { Px82y64, Px81y63 } CellNode (82 @ 63) (20)Px5y70 { Px5y71, Px6y70, Px4y70, Px5y69 } CellNode (5 @ 70) (20)Px65y17 { Px66y17, Px64y17, Px65y16, Px65y18 } CellNode (65 @ 17) (20)Px68y49 { Px68y50, Px69y49, Px68y48, Px67y49 } CellNode (68 @ 49) (20)Px70y64 { Px70y65, Px71y64, Px69y64, Px70y63 } CellNode (70 @ 64) (20)Px44y10 { Px45y10, Px44y11, Px43y10, Px44y9 } CellNode (44 @ 10) (20)Px2y79 { Px2y78, Px2y80, Px3y79, Px1y79 } CellNode (2 @ 79) (20)Px47y42 { Px46y42, Px47y41, Px47y43, Px48y42 } CellNode (47 @ 42) (20)Px35y43 { Px35y44, Px36y43, Px35y42, Px34y43 } CellNode (35 @ 43) (20)Px49y54 { Px49y55, Px49y53, Px50y54, Px48y54 } CellNode (49 @ 54) (20)Px46y9 { Px47y9, Px45y9, Px46y10, Px46y8 } CellNode (46 @ 9) (20)Px37y55 { Px37y56, Px36y55, Px38y55, Px37y54 } CellNode (37 @ 55) (20)Px74y43 { Px73y43, Px74y44 } CellNode (74 @ 43) (20)Px19y80 { Px20y80, Px18y80, Px19y79, Px19y81 } CellNode (19 @ 80) (20)Px6y58 { Px7y58, Px6y57, Px5y58, Px6y59 } CellNode (6 @ 58) (20)Px43y6 { Px43y5, Px42y6, Px43y7, Px44y6 } CellNode (43 @ 6) (20)Px62y44 { Px61y44, Px63y44, Px62y45, Px62y43 } CellNode (62 @ 44) (20)Px76y55 { Px77y55, Px75y55, Px76y56, Px76y54 } CellNode (76 @ 55) (20)Px50y45 { Px51y45, Px49y45, Px50y44, Px50y46 } CellNode (50 @ 45) (20)Px58y80 { Px57y80, Px58y81 } CellNode (58 @ 80) (20)Px46y81 { Px46y82, Px47y81, Px46y80, Px45y81 } CellNode (46 @ 81) (20)Px29y35 { Px29y34, Px28y35, Px29y36, Px30y35 } CellNode (29 @ 35) (20)Px34y82 { Px33y82, Px34y81, Px34y83, Px35y82 } CellNode (34 @ 82) (20)Px97y80 { Px96y80, Px97y81, Px97y79 } CellNode (97 @ 80) (20)Px22y83 { Px23y83, Px22y84, Px21y83, Px22y82 } CellNode (22 @ 83) (20)Px85y81 { Px85y82, Px86y81, Px84y81, Px85y80 } CellNode (85 @ 81) (20)Px68y35 { Px67y35, Px68y34, Px69y35, Px68y36 } CellNode (68 @ 35) (20)Px54y24 { Px55y24, Px53y24, Px54y23, Px54y25 } CellNode (54 @ 24) (20)Px10y84 { Px11y84, Px10y83, Px9y84 } CellNode (10 @ 84) (20)Px73y82 { Px72y82, Px73y81, Px74y82, Px73y83 } CellNode (73 @ 82) (20)Px42y25 { Px42y26, Px43y25, Px41y25, Px42y24 } CellNode (42 @ 25) (20)Px64y4 { Px64y5, Px63y4 } CellNode (64 @ 4) (20)Px30y26 { Px31y26, Px30y25, Px30y27, Px29y26 } CellNode (30 @ 26) (20)Px61y1 { Px61y2, Px60y1 } CellNode (61 @ 1) (20)Px44y37 { Px44y38, Px43y37, Px45y37, Px44y36 } CellNode (44 @ 37) (20)Px23y30 { Px22y30, Px23y31, Px23y29, Px24y30 } CellNode (23 @ 30) (20)Px26y62 { Px26y63, Px27y62, Px26y61, Px25y62 } CellNode (26 @ 62) (20)Px14y63 { Px13y63, Px14y62, Px14y64, Px15y63 } CellNode (14 @ 63) (20)Px28y74 { Px29y74, Px27y74, Px28y75, Px28y73 } CellNode (28 @ 74) (20)Px62y30 { Px62y31, Px61y30, Px62y29, Px63y30 } CellNode (62 @ 30) (20)Px65y62 { Px65y63, Px66y62, Px64y62, Px65y61 } CellNode (65 @ 62) (20)Px16y75 { Px17y75, Px16y74, Px16y76, Px15y75 } CellNode (16 @ 75) (20)Px79y73 { Px80y73, Px78y73, Px79y72, Px79y74 } CellNode (79 @ 73) (20)Px48y16 { Px49y16, Px47y16, Px48y17 } CellNode (48 @ 16) (20)Px53y63 { Px53y62, Px52y63, Px53y64, Px54y63 } CellNode (53 @ 63) (20)Px67y74 { Px68y74, Px66y74, Px67y75, Px67y73 } CellNode (67 @ 74) (20)Px36y17 { Px37y17, Px36y16, Px35y17, Px36y18 } CellNode (36 @ 17) (20)Px41y64 { Px42y64, Px41y65, Px40y64, Px41y63 } CellNode (41 @ 64) (20)Px55y75 { Px56y75, Px55y74, Px55y76, Px54y75 } CellNode (55 @ 75) (20)Px54y10 { Px53y10, Px54y11, Px55y10 } CellNode (54 @ 10) (20)Px80y64 { Px80y65, Px81y64, Px79y64, Px80y63 } CellNode (80 @ 64) (20)Px94y75 { Px95y75, Px94y74, Px94y76, Px93y75 } CellNode (94 @ 75) (20)Px63y18 { Px63y19, Px62y18, Px64y18, Px63y17 } CellNode (63 @ 18) (20)Px3y71 { Px4y71, Px2y71, Px3y70, Px3y72 } CellNode (3 @ 71) (20)Px59y4 { Px60y4, Px58y4, Px59y5, Px59y3 } CellNode (59 @ 4) (20)Px51y19 { Px50y19, Px51y18, Px52y19 } CellNode (51 @ 19) (20)Px59y54 { Px60y54, Px58y54, Px59y53, Px59y55 } CellNode (59 @ 54) (20)Px56y1 { Px56y2, Px57y1, Px55y1 } CellNode (56 @ 1) (20)Px33y44 { Px33y43, Px33y45, Px34y44, Px32y44 } CellNode (33 @ 44) (20)Px42y11 { Px43y11, Px42y10, Px42y12, Px41y11 } CellNode (42 @ 11) (20)Px47y55 { Px47y56, Px48y55, Px47y54, Px46y55 } CellNode (47 @ 55) (20)Px35y56 { Px35y55, Px35y57, Px34y56, Px36y56 } CellNode (35 @ 56) (20)Px23y57 { Px24y57, Px22y57, Px23y58, Px23y56 } CellNode (23 @ 57) (20)Px9y62 { Px9y61, Px8y62, Px10y62, Px9y63 } CellNode (9 @ 62) (20)Px60y45 { Px61y45, Px60y44, Px59y45, Px60y46 } CellNode (60 @ 45) (20)Px4y59 { Px4y60, Px5y59, Px3y59, Px4y58 } CellNode (4 @ 59) (20)Px11y58 { Px10y58, Px11y57, Px11y59 } CellNode (11 @ 58) (20)Px74y56 { Px74y55, Px75y56, Px73y56, Px74y57 } CellNode (74 @ 56) (20)Px62y57 { Px63y57, Px62y58, Px61y57, Px62y56 } CellNode (62 @ 57) (20)Px39y35 { Px38y35, Px39y34, Px39y36, Px40y35 } CellNode (39 @ 35) (20)Px41y50 { Px41y49, Px41y51, Px42y50, Px40y50 } CellNode (41 @ 50) (20)Px44y82 { Px45y82, Px43y82, Px44y81, Px44y83 } CellNode (44 @ 82) (20)Px27y36 { Px27y37, Px28y36, Px27y35 } CellNode (27 @ 36) (20)Px32y83 { Px32y84, Px33y83, Px31y83, Px32y82 } CellNode (32 @ 83) (20)Px29y48 { Px30y48, Px29y49, Px28y48, Px29y47 } CellNode (29 @ 48) (20)Px20y84 { Px20y83, Px21y84, Px19y84 } CellNode (20 @ 84) (20)Px66y36 { Px66y37, Px67y36, Px66y35, Px65y36 } CellNode (66 @ 36) (20)Px83y82 { Px84y82, Px83y81, Px82y82, Px83y83 } CellNode (83 @ 82) (20)Px71y83 { Px71y84, Px72y83, Px70y83, Px71y82 } CellNode (71 @ 83) (20)Px40y26 { Px40y25, Px41y26, Px40y27 } CellNode (40 @ 26) (20)Px54y37 { Px54y36, Px54y38, Px55y37, Px53y37 } CellNode (54 @ 37) (20)Px59y40 { Px59y41, Px58y40, Px60y40, Px59y39 } CellNode (59 @ 40) (20)Px33y30 { Px34y30, Px32y30, Px33y29, Px33y31 } CellNode (33 @ 30) (20)Px42y38 { Px41y38, Px43y38, Px42y37, Px42y39 } CellNode (42 @ 38) (20)Px21y31 { Px22y31, Px20y31, Px21y32, Px21y30 } CellNode (21 @ 31) (20)Px30y39 { Px31y39, Px29y39, Px30y38, Px30y40 } CellNode (30 @ 39) (20)Px38y74 { Px38y75, Px39y74, Px38y73, Px37y74 } CellNode (38 @ 74) (20)Px72y30 { Px71y30, Px72y31, Px72y29, Px73y30 } CellNode (72 @ 30) (20)Px12y64 { Px12y65, Px13y64, Px11y64, Px12y63 } CellNode (12 @ 64) (20)Px26y75 { Px26y74, Px25y75, Px27y75, Px26y76 } CellNode (26 @ 75) (20)Px89y73 { Px88y73, Px89y74, Px90y73 } CellNode (89 @ 73) (20)Px60y31 { Px61y31, Px59y31, Px60y32, Px60y30 } CellNode (60 @ 31) (20)Px14y76 { Px14y77, Px13y76, Px15y76, Px14y75 } CellNode (14 @ 76) (20)Px77y74 { Px78y74, Px77y75, Px77y73, Px76y74 } CellNode (77 @ 74) (20)Px46y17 { Px47y17, Px45y17, Px46y16, Px46y18 } CellNode (46 @ 17) (20)Px51y64 { Px51y65, Px52y64, Px51y63, Px50y64 } CellNode (51 @ 64) (20)Px65y75 { Px65y74, Px64y75, Px66y75, Px65y76 } CellNode (65 @ 75) (20)Px34y18 { Px34y19, Px35y18, Px33y18, Px34y17 } CellNode (34 @ 18) (20)Px39y21 { Px38y21, Px39y22, Px39y20 } CellNode (39 @ 21) (20)Px48y29 { Px49y29, Px47y29, Px48y28, Px48y30 } CellNode (48 @ 29) (20)Px27y22 { Px28y22, Px26y22, Px27y23, Px27y21 } CellNode (27 @ 22) (20)Px53y76 { Px53y77, Px52y76, Px54y76, Px53y75 } CellNode (53 @ 76) (20)Px64y10 { Px64y11, Px64y9, Px65y10, Px63y10 } CellNode (64 @ 10) (20)Px41y77 { Px41y76, Px42y77, Px40y77, Px41y78 } CellNode (41 @ 77) (20)Px18y55 { Px18y56, Px19y55, Px17y55 } CellNode (18 @ 55) (20)Px1y72 { Px1y73, Px2y72, Px1y71 } CellNode (1 @ 72) (20)Px39y5 { Px39y6, Px39y4, Px40y5, Px38y5 } CellNode (39 @ 5) (20)Px66y22 { Px66y23, Px65y22, Px67y22, Px66y21 } CellNode (66 @ 22) (20)Px20y70 { Px21y70, Px19y70, Px20y71, Px20y69 } CellNode (20 @ 70) (20)Px40y12 { Px40y13, Px41y12, Px39y12, Px40y11 } CellNode (40 @ 12) (20)Px52y11 { Px51y11, Px52y12, Px53y11 } CellNode (52 @ 11) (20)Px69y54 { Px70y54, Px69y53, Px68y54, Px69y55 } CellNode (69 @ 54) (20)Px57y55 { Px57y56, Px58y55, Px56y55, Px57y54 } CellNode (57 @ 55) (20)Px80y77 { Px80y76, Px80y78, Px79y77, Px81y77 } CellNode (80 @ 77) (20)Px92y76 { Px93y76, Px91y76, Px92y77, Px92y75 } CellNode (92 @ 76) (20)Px61y19 { Px61y20, Px60y19 } CellNode (61 @ 19) (20)Px45y56 { Px45y55, Px44y56, Px45y57, Px46y56 } CellNode (45 @ 56) (20)Px3y84 { Px3y83, Px2y84, Px4y84 } CellNode (3 @ 84) (20)Px59y67 { Px60y67, Px59y68, Px59y66 } CellNode (59 @ 67) (20)Px33y57 { Px33y58, Px34y57, Px33y56, Px32y57 } CellNode (33 @ 57) (20)Px38y60 { Px39y60, Px38y59, Px38y61, Px37y60 } CellNode (38 @ 60) (20)Px47y68 { Px47y69, Px47y67, Px48y68, Px46y68 } CellNode (47 @ 68) (20)Px21y58 { Px22y58, Px20y58, Px21y59, Px21y57 } CellNode (21 @ 58) (20)Px7y63 { Px7y64, Px7y62, Px8y63 } CellNode (7 @ 63) (20)Px72y57 { Px73y57, Px72y58, Px72y56, Px71y57 } CellNode (72 @ 57) (20)Px77y60 { Px76y60, Px77y59, Px78y60, Px77y61 } CellNode (77 @ 60) (20)Px9y75 { Px9y74, Px9y76, Px8y75, Px10y75 } CellNode (9 @ 75) (20)Px51y50 { Px51y49, Px51y51, Px50y50, Px52y50 } CellNode (51 @ 50) (20)Px60y58 { Px60y59, Px59y58, Px61y58, Px60y57 } CellNode (60 @ 58) (20)Px30y84 { Px30y83, Px31y84, Px29y84 } CellNode (30 @ 84) (20)Px39y48 { Px39y49, Px38y48, Px40y48, Px39y47 } CellNode (39 @ 48) (20)Px76y36 { Px75y36, Px76y35, Px76y37 } CellNode (76 @ 36) (20)Px27y49 { Px27y48, Px27y50, Px28y49, Px26y49 } CellNode (27 @ 49) (20)Px64y37 { Px63y37, Px64y38, Px65y37, Px64y36 } CellNode (64 @ 37) (20)Px69y40 { Px69y41, Px68y40 } CellNode (69 @ 40) (20)Px43y30 { Px44y30, Px42y30, Px43y29, Px43y31 } CellNode (43 @ 30) (20)Px52y38 { Px53y38, Px51y38, Px52y37, Px52y39 } CellNode (52 @ 38) (20)Px57y41 { Px57y40, Px57y42, Px58y41, Px56y41 } CellNode (57 @ 41) (20)Px31y31 { Px31y32, Px32y31, Px31y30, Px30y31 } CellNode (31 @ 31) (20)Px66y49 { Px66y48, Px66y50, Px67y49, Px65y49 } CellNode (66 @ 49) (20)Px45y42 { Px45y43, Px44y42, Px46y42, Px45y41 } CellNode (45 @ 42) (20)Px48y74 { Px48y75, Px49y74, Px47y74, Px48y73 } CellNode (48 @ 74) (20)Px40y39 { Px40y40, Px41y39, Px39y39, Px40y38 } CellNode (40 @ 39) (20)Px36y75 { Px37y75, Px36y74, Px35y75, Px36y76 } CellNode (36 @ 75) (20)Px70y31 { Px71y31, Px70y32, Px69y31, Px70y30 } CellNode (70 @ 31) (20)Px19y29 { Px20y29, Px18y29, Px19y28, Px19y30 } CellNode (19 @ 29) (20)Px24y76 { Px24y77, Px25y76, Px23y76, Px24y75 } CellNode (24 @ 76) (20)Px87y74 { Px87y75, Px88y74, Px86y74, Px87y73 } CellNode (87 @ 74) (20)Px12y77 { Px11y77, Px12y76, Px13y77, Px12y78 } CellNode (12 @ 77) (20)Px75y75 { Px76y75, Px74y75, Px75y74, Px75y76 } CellNode (75 @ 75) (20)Px58y29 { Px59y29, Px58y28, Px57y29, Px58y30 } CellNode (58 @ 29) (20)Px17y80 { Px18y80, Px16y80, Px17y81, Px17y79 } CellNode (17 @ 80) (20)Px63y76 { Px63y77, Px64y76, Px63y75, Px62y76 } CellNode (63 @ 76) (20)Px32y19 { Px33y19, Px31y19, Px32y18, Px32y20 } CellNode (32 @ 19) (20)Px37y22 { Px37y21, Px38y22 } CellNode (37 @ 22) (20)Px51y77 { Px50y77, Px51y76, Px51y78, Px52y77 } CellNode (51 @ 77) (20)Px56y80 { Px56y81, Px57y80, Px55y80, Px56y79 } CellNode (56 @ 80) (20)Px62y11 { Px63y11, Px61y11, Px62y10, Px62y12 } CellNode (62 @ 11) (20)Px25y23 { Px24y23, Px25y24, Px25y22, Px26y23 } CellNode (25 @ 23) (20)Px30y70 { Px30y71, Px29y70, Px31y70, Px30y69 } CellNode (30 @ 70) (20)Px50y12 { Px50y13, Px51y12, Px50y11, Px49y12 } CellNode (50 @ 12) (20)Px90y77 { Px90y76, Px91y77, Px89y77, Px90y78 } CellNode (90 @ 77) (20)Px95y80 { Px96y80, Px94y80, Px95y81, Px95y79 } CellNode (95 @ 80) (20)Px47y7 { Px46y7 } CellNode (47 @ 7) (20)Px64y23 { Px64y24, Px63y23, Px64y22, Px65y23 } CellNode (64 @ 23) (20)Px52y24 { Px53y24, Px51y24, Px52y25, Px52y23 } CellNode (52 @ 24) (20)Px55y56 { Px54y56, Px55y55, Px55y57, Px56y56 } CellNode (55 @ 56) (20)Px18y68 { Px19y68, Px18y67, Px18y69, Px17y68 } CellNode (18 @ 68) (20)Px44y4 { Px44y3, Px45y4, Px44y5, Px43y4 } CellNode (44 @ 4) (20)Px69y67 { Px69y68, Px70y67, Px69y66, Px68y67 } CellNode (69 @ 67) (20)Px43y57 { Px43y58, Px44y57, Px42y57, Px43y56 } CellNode (43 @ 57) (20)Px48y60 { Px47y60, Px48y59, Px49y60, Px48y61 } CellNode (48 @ 60) (20)Px41y1 { Px41y2, Px42y1, Px40y1 } CellNode (41 @ 1) (20)Px31y58 { Px30y58, Px31y59, Px32y58, Px31y57 } CellNode (31 @ 58) (20)Px36y61 { Px36y62, Px35y61, Px37y61, Px36y60 } CellNode (36 @ 61) (20)Px10y51 { Px11y51, Px10y50, Px9y51, Px10y52 } CellNode (10 @ 51) (20)Px45y69 { Px46y69, Px44y69, Px45y68, Px45y70 } CellNode (45 @ 69) (20)Px5y64 { Px5y65, Px4y64, Px6y64 } CellNode (5 @ 64) (20)Px24y62 { Px24y61, Px24y63, Px23y62, Px25y62 } CellNode (24 @ 62) (20)Px61y50 { Px61y49, Px61y51, Px62y50, Px60y50 } CellNode (61 @ 50) (20)Px75y61 { Px75y62, Px76y61, Px74y61, Px75y60 } CellNode (75 @ 61) (20)Px70y58 { Px70y59, Px69y58, Px71y58, Px70y57 } CellNode (70 @ 58) (20)Px58y15 { Px58y14, Px57y15 } CellNode (58 @ 15) (20)Px7y76 { Px8y76, Px6y76, Px7y75, Px7y77 } CellNode (7 @ 76) (20)Px63y62 { Px63y61, Px64y62, Px63y63, Px62y62 } CellNode (63 @ 62) (20)Px49y48 { Px49y49, Px50y48, Px49y47, Px48y48 } CellNode (49 @ 48) (20)Px28y41 { Px28y40, Px29y41, Px27y41 } CellNode (28 @ 41) (20)Px37y49 { Px37y48, Px36y49, Px37y50, Px38y49 } CellNode (37 @ 49) (20)Px62y38 { Px63y38, Px61y38, Px62y37, Px62y39 } CellNode (62 @ 38) (20)Px67y41 { Px66y41, Px67y40, Px67y42, Px68y41 } CellNode (67 @ 41) (20)Px41y31 { Px41y32, Px42y31, Px41y30, Px40y31 } CellNode (41 @ 31) (20)Px50y39 { Px50y40, Px51y39, Px49y39, Px50y38 } CellNode (50 @ 39) (20)Px55y42 { Px56y42, Px55y43, Px55y41, Px54y42 } CellNode (55 @ 42) (20)Px43y43 { Px43y44, Px44y43, Px42y43, Px43y42 } CellNode (43 @ 43) (20)Px29y29 { Px30y29, Px29y28, Px28y29, Px29y30 } CellNode (29 @ 29) (20)Px31y44 { Px32y44, Px30y44, Px31y43, Px31y45 } CellNode (31 @ 44) (20)Px5y50 { Px6y50, Px5y51, Px4y50, Px5y49 } CellNode (5 @ 50) (20)Px22y77 { Px21y77, Px22y76, Px22y78, Px23y77 } CellNode (22 @ 77) (20)Px27y80 { Px28y80, Px27y81, Px26y80, Px27y79 } CellNode (27 @ 80) (20)Px68y29 { Px69y29, Px68y28, Px67y29, Px68y30 } CellNode (68 @ 29) (20)Px70y44 { Px69y44, Px70y45, Px70y43 } CellNode (70 @ 44) (20)Px10y78 { Px9y78, Px10y79, Px11y78, Px10y77 } CellNode (10 @ 78) (20)Px73y76 { Px73y77, Px74y76, Px72y76, Px73y75 } CellNode (73 @ 76) (20)Px2y59 { Px2y58, Px2y60, Px3y59, Px1y59 } CellNode (2 @ 59) (20)Px15y81 { Px16y81, Px15y80, Px15y82, Px14y81 } CellNode (15 @ 81) (20)Px66y80 { Px67y80, Px66y81, Px65y80, Px66y79 } CellNode (66 @ 80) (20)Px35y23 { Px34y23, Px35y24 } CellNode (35 @ 23) (20)Px49y34 { Px49y33, Px50y34, Px48y34, Px49y35 } CellNode (49 @ 34) (20)Px47y22 { Px46y22, Px48y22, Px47y23 } CellNode (47 @ 22) (20)Px54y81 { Px53y81, Px54y80, Px54y82, Px55y81 } CellNode (54 @ 81) (20)Px23y24 { Px24y24, Px23y25, Px23y23, Px22y24 } CellNode (23 @ 24) (20)Px37y35 { Px38y35, Px36y35, Px37y36, Px37y34 } CellNode (37 @ 35) (20)Px40y70 { Px40y71, Px41y70, Px39y70, Px40y69 } CellNode (40 @ 70) (20)Px42y82 { Px42y83, Px43y82, Px41y82, Px42y81 } CellNode (42 @ 82) (20)Px19y60 { Px20y60, Px18y60, Px19y59, Px19y61 } CellNode (19 @ 60) (20)Px61y77 { Px61y76, Px60y77, Px61y78, Px62y77 } CellNode (61 @ 77) (20)Px93y81 { Px92y81, Px93y80, Px94y81, Px93y82 } CellNode (93 @ 81) (20)Px62y24 { Px62y25, Px63y24, Px61y24, Px62y23 } CellNode (62 @ 24) (20)Px16y69 { Px16y70, Px17y69, Px16y68, Px15y69 } CellNode (16 @ 69) (20)Px81y82 { Px81y83, Px80y82, Px82y82, Px81y81 } CellNode (81 @ 82) (20)Px79y67 { Px79y68, Px80y67, Px78y67, Px79y66 } CellNode (79 @ 67) (20)Px58y60 { Px59y60, Px57y60, Px58y59, Px58y61 } CellNode (58 @ 60) (20)Px67y68 { Px68y68, Px66y68, Px67y67, Px67y69 } CellNode (67 @ 68) (20)Px46y61 { Px46y62, Px47y61, Px46y60, Px45y61 } CellNode (46 @ 61) (20)Px55y69 { Px55y68, Px54y69, Px56y69 } CellNode (55 @ 69) (20)Px34y62 { Px34y61, Px33y62, Px35y62, Px34y63 } CellNode (34 @ 62) (20)Px80y58 { Px80y57, Px80y59, Px81y58, Px79y58 } CellNode (80 @ 58) (20)Px22y63 { Px23y63, Px21y63, Px22y64, Px22y62 } CellNode (22 @ 63) (20)Px10y64 { Px9y64, Px10y65, Px11y64, Px10y63 } CellNode (10 @ 64) (20)Px73y62 { Px72y62, Px73y61, Px74y62, Px73y63 } CellNode (73 @ 62) (20)Px5y77 { Px6y77, Px4y77, Px5y78, Px5y76 } CellNode (5 @ 77) (20)Px56y16 { Px55y16, Px57y16, Px56y15, Px56y17 } CellNode (56 @ 16) (20)Px61y63 { Px61y64, Px60y63, Px62y63, Px61y62 } CellNode (61 @ 63) (20)Px44y17 { Px45y17, Px43y17, Px44y18, Px44y16 } CellNode (44 @ 17) (20)Px47y49 { Px47y48, Px46y49, Px47y50, Px48y49 } CellNode (47 @ 49) (20)Px9y56 { Px10y56, Px9y57, Px9y55, Px8y56 } CellNode (9 @ 56) (20)Px28y54 { Px29y54, Px27y54, Px28y55, Px28y53 } CellNode (28 @ 54) (20)Px65y42 { Px65y43, Px66y42, Px64y42, Px65y41 } CellNode (65 @ 42) (20)Px16y55 { Px16y56, Px17y55 } CellNode (16 @ 55) (20)Px79y53 { Px78y53, Px79y54 } CellNode (79 @ 53) (20)Px53y43 { Px52y43, Px53y44, Px54y43, Px53y42 } CellNode (53 @ 43) (20)Px67y54 { Px68y54, Px66y54, Px67y55, Px67y53 } CellNode (67 @ 54) (20)Px41y44 { Px41y45, Px40y44, Px41y43, Px42y44 } CellNode (41 @ 44) (20)Px37y80 { Px37y79, Px37y81, Px38y80, Px36y80 } CellNode (37 @ 80) (20)Px3y51 { Px3y50, Px2y51, Px3y52, Px4y51 } CellNode (3 @ 51) (20)Px25y81 { Px26y81, Px25y80, Px24y81, Px25y82 } CellNode (25 @ 81) (20)Px13y82 { Px13y83, Px14y82, Px13y81, Px12y82 } CellNode (13 @ 82) (20)Px76y80 { Px76y79, Px76y81, Px77y80, Px75y80 } CellNode (76 @ 80) (20)Px59y34 { Px59y33, Px58y34, Px59y35, Px60y34 } CellNode (59 @ 34) (20)Px64y81 { Px65y81, Px64y80, Px63y81, Px64y82 } CellNode (64 @ 81) (20)Px33y24 { Px33y25, Px34y24, Px33y23, Px32y24 } CellNode (33 @ 24) (20)Px47y35 { Px47y36, Px46y35, Px48y35, Px47y34 } CellNode (47 @ 35) (20)Px52y82 { Px53y82, Px52y83, Px51y82, Px52y81 } CellNode (52 @ 82) (20)Px21y25 { Px22y25, Px20y25, Px21y24, Px21y26 } CellNode (21 @ 25) (20)Px61y8 { Px60y8, Px61y9, Px61y7, Px62y8 } CellNode (61 @ 8) (20)Px35y36 { Px36y36, Px34y36, Px35y37, Px35y35 } CellNode (35 @ 36) (20)Px40y83 { Px40y82, Px40y84, Px39y83, Px41y83 } CellNode (40 @ 83) (20)Px72y24 { Px72y25, Px71y24 } CellNode (72 @ 24) (20)Px91y82 { Px92y82, Px90y82, Px91y83, Px91y81 } CellNode (91 @ 82) (20)Px60y25 { Px61y25, Px60y24, Px60y26, Px59y25 } CellNode (60 @ 25) (20)Px74y36 { Px75y36, Px73y36, Px74y37, Px74y35 } CellNode (74 @ 36) (20)Px19y73 { Px19y74, Px18y73, Px20y73, Px19y72 } CellNode (19 @ 73) (20)Px56y61 { Px56y62, Px57y61, Px56y60, Px55y61 } CellNode (56 @ 61) (20)Px62y37 { Px61y37, Px62y36, Px62y38, Px63y37 } CellNode (62 @ 37) (20)Px39y15 { Px39y14, Px39y16, Px40y15, Px38y15 } CellNode (39 @ 15) (20)Px65y69 { Px65y70, Px66y69, Px65y68, Px64y69 } CellNode (65 @ 69) (20)Px44y62 { Px43y62, Px44y61, Px44y63, Px45y62 } CellNode (44 @ 62) (20)Px32y63 { Px32y64, Px33y63, Px31y63, Px32y62 } CellNode (32 @ 63) (20)Px46y74 { Px45y74, Px46y73, Px46y75, Px47y74 } CellNode (46 @ 74) (20)Px20y64 { Px20y65, Px21y64, Px19y64, Px20y63 } CellNode (20 @ 64) (20)Px97y73 { Px97y74, Px96y73 } CellNode (97 @ 73) (20)Px66y16 { Px66y17, Px66y15, Px65y16, Px67y16 } CellNode (66 @ 16) (20)Px71y63 { Px71y64, Px72y63, Px70y63, Px71y62 } CellNode (71 @ 63) (20)Px34y75 { Px34y76, Px33y75, Px35y75, Px34y74 } CellNode (34 @ 75) (20)Px54y17 { Px54y18, Px53y17, Px55y17, Px54y16 } CellNode (54 @ 17) (20)Px8y81 { Px9y81, Px7y81, Px8y82, Px8y80 } CellNode (8 @ 81) (20)Px59y20 { Px59y21, Px58y20, Px60y20, Px59y19 } CellNode (59 @ 20) (20)Px33y10 { Px33y9, Px34y10, Px33y11 } CellNode (33 @ 10) (20)Px3y78 { Px3y77, Px2y78, Px4y78, Px3y79 } CellNode (3 @ 78) (20)Px85y74 { Px85y75, Px85y73, Px86y74, Px84y74 } CellNode (85 @ 74) (20)Px56y8 { Px57y8, Px56y9, Px55y8, Px56y7 } CellNode (56 @ 8) (20)Px42y18 { Px41y18, Px42y19, Px43y18 } CellNode (42 @ 18) (20)Px30y19 { Px31y19, Px29y19, Px30y18, Px30y20 } CellNode (30 @ 19) (20)Px38y54 { Px39y54, Px38y55, Px38y53, Px37y54 } CellNode (38 @ 54) (20)Px53y5 { Px53y4, Px53y6, Px52y5, Px54y5 } CellNode (53 @ 5) (20)Px26y55 { Px26y54, Px27y55, Px25y55, Px26y56 } CellNode (26 @ 55) (20)Px60y11 { Px61y11, Px59y11, Px60y12, Px60y10 } CellNode (60 @ 11) (20)Px63y43 { Px63y42, Px63y44, Px64y43, Px62y43 } CellNode (63 @ 43) (20)Px50y2 { Px51y2, Px49y2, Px50y3, Px50y1 } CellNode (50 @ 2) (20)Px77y54 { Px77y55, Px78y54, Px77y53, Px76y54 } CellNode (77 @ 54) (20)Px9y69 { Px9y68, Px8y69, Px10y69, Px9y70 } CellNode (9 @ 69) (20)Px51y44 { Px52y44, Px50y44, Px51y43, Px51y45 } CellNode (51 @ 44) (20)Px65y55 { Px65y54, Px65y56, Px64y55, Px66y55 } CellNode (65 @ 55) (20)Px53y56 { Px53y57, Px54y56, Px52y56, Px53y55 } CellNode (53 @ 56) (20)Px35y81 { Px36y81, Px34y81, Px35y80, Px35y82 } CellNode (35 @ 81) (20)Px41y57 { Px42y57, Px40y57, Px41y58, Px41y56 } CellNode (41 @ 57) (20)Px18y35 { Px18y34, Px19y35, Px17y35 } CellNode (18 @ 35) (20)Px1y52 { Px1y51, Px2y52, Px1y53 } CellNode (1 @ 52) (20)Px23y82 { Px23y83, Px24y82, Px23y81, Px22y82 } CellNode (23 @ 82) (20)Px69y34 { Px69y33, Px68y34, Px69y35, Px70y34 } CellNode (69 @ 34) (20)Px11y83 { Px10y83, Px11y82, Px11y84, Px12y83 } CellNode (11 @ 83) (20)Px74y81 { Px75y81, Px74y80, Px73y81, Px74y82 } CellNode (74 @ 81) (20)Px57y35 { Px57y36, Px58y35, Px56y35, Px57y34 } CellNode (57 @ 35) (20)Px3y64 { Px3y65, Px4y64 } CellNode (3 @ 64) (20)Px62y82 { Px62y81, Px63y82 } CellNode (62 @ 82) (20)Px45y36 { Px45y35, Px46y36, Px45y37, Px44y36 } CellNode (45 @ 36) (20)Px50y83 { Px50y82, Px50y84, Px49y83, Px51y83 } CellNode (50 @ 83) (20)Px59y47 { Px59y48, Px60y47, Px58y47, Px59y46 } CellNode (59 @ 47) (20)Px41y9 { Px41y8, Px42y9, Px41y10, Px40y9 } CellNode (41 @ 9) (20)Px48y5 { Px48y4, Px49y5, Px48y6 } CellNode (48 @ 5) (20)Px33y37 { Px32y37, Px34y37, Px33y36, Px33y38 } CellNode (33 @ 37) (20)Px70y25 { Px71y25, Px69y25, Px70y24, Px70y26 } CellNode (70 @ 25) (20)Px38y40 { Px38y39, Px38y41, Px37y40, Px39y40 } CellNode (38 @ 40) (20)Px45y2 { Px46y2, Px45y1, Px45y3, Px44y2 } CellNode (45 @ 2) (20)Px29y73 { Px29y74, Px30y73, Px29y72, Px28y73 } CellNode (29 @ 73) (20)Px72y37 { Px71y37, Px72y38, Px72y36, Px73y37 } CellNode (72 @ 37) (20)Px17y74 { Px17y73, Px16y74, Px18y74, Px17y75 } CellNode (17 @ 74) (20)Px51y30 { Px52y30, Px51y31, Px50y30, Px51y29 } CellNode (51 @ 30) (20)Px60y38 { Px60y39, Px59y38, Px61y38, Px60y37 } CellNode (60 @ 38) (20)Px68y73 { Px68y74, Px69y73, Px67y73, Px68y72 } CellNode (68 @ 73) (20)Px37y16 { Px38y16, Px36y16, Px37y15, Px37y17 } CellNode (37 @ 16) (20)Px42y63 { Px42y64, Px43y63, Px41y63, Px42y62 } CellNode (42 @ 63) (20)Px56y74 { Px55y74, Px56y73, Px56y75, Px57y74 } CellNode (56 @ 74) (20)Px30y64 { Px30y63, Px30y65, Px31y64, Px29y64 } CellNode (30 @ 64) (20)Px44y75 { Px44y76, Px43y75, Px45y75, Px44y74 } CellNode (44 @ 75) (20)Px27y29 { Px27y30, Px28y29, Px26y29, Px27y28 } CellNode (27 @ 29) (20)Px81y63 { Px81y64, Px82y63, Px81y62, Px80y63 } CellNode (81 @ 63) (20)Px32y76 { Px32y75, Px32y77, Px31y76, Px33y76 } CellNode (32 @ 76) (20)Px95y74 { Px95y73, Px94y74, Px96y74, Px95y75 } CellNode (95 @ 74) (20)Px43y10 { Px43y9, Px44y10, Px42y10, Px43y11 } CellNode (43 @ 10) (20)Px64y17 { Px64y18, Px65y17, Px64y16, Px63y17 } CellNode (64 @ 17) (20)Px1y79 { Px2y79, Px1y80, Px1y78 } CellNode (1 @ 79) (20)Px20y77 { Px20y78, Px21y77, Px19y77, Px20y76 } CellNode (20 @ 77) (20)Px66y29 { Px66y30, Px67y29, Px65y29, Px66y28 } CellNode (66 @ 29) (20)Px83y75 { Px84y75, Px82y75, Px83y76, Px83y74 } CellNode (83 @ 75) (20)Px71y76 { Px71y75, Px72y76, Px70y76, Px71y77 } CellNode (71 @ 76) (20)Px48y54 { Px48y55, Px49y54, Px47y54, Px48y53 } CellNode (48 @ 54) (20)Px40y19 { Px40y18, Px41y19, Px39y19 } CellNode (40 @ 19) (20)Px52y18 { Px51y18, Px52y17, Px53y18, Px52y19 } CellNode (52 @ 18) (20)Px6y82 { Px6y83, Px5y82, Px6y81, Px7y82 } CellNode (6 @ 82) (20)Px36y55 { Px36y54, Px35y55, Px36y56, Px37y55 } CellNode (36 @ 55) (20)Px45y22 { Px44y22, Px46y22, Px45y23 } CellNode (45 @ 22) (20)Px57y21 { Px58y21, Px57y22, Px56y21, Px57y20 } CellNode (57 @ 21) (20)Px69y20 { Px69y21, Px68y20, Px70y20, Px69y19 } CellNode (69 @ 20) (20)Px24y56 { Px25y56, Px24y57, Px24y55, Px23y56 } CellNode (24 @ 56) (20)Px36y9 { Px36y8, Px37y9, Px36y10, Px35y9 } CellNode (36 @ 9) (20)Px38y67 { Px37y67, Px38y66, Px38y68, Px39y67 } CellNode (38 @ 67) (20)Px75y55 { Px75y54, Px74y55, Px75y56, Px76y55 } CellNode (75 @ 55) (20)Px17y60 { Px18y60, Px17y61, Px16y60, Px17y59 } CellNode (17 @ 60) (20)Px63y56 { Px63y57, Px64y56, Px63y55, Px62y56 } CellNode (63 @ 56) (20)Px77y67 { Px77y68, Px77y66, Px78y67, Px76y67 } CellNode (77 @ 67) (20)Px51y57 { Px51y58, Px50y57, Px52y57, Px51y56 } CellNode (51 @ 57) (20)Px30y50 { Px29y50, Px31y50, Px30y49, Px30y51 } CellNode (30 @ 50) (20)Px55y36 { Px54y36, Px55y37, Px55y35 } CellNode (55 @ 36) (20)Px69y47 { Px69y48, Px68y47, Px70y47, Px69y46 } CellNode (69 @ 47) (20)Px60y83 { Px60y84, Px59y83 } CellNode (60 @ 83) (20)Px43y37 { Px44y37, Px42y37, Px43y36, Px43y38 } CellNode (43 @ 37) (20)Px48y40 { Px48y39, Px49y40, Px47y40, Px48y41 } CellNode (48 @ 40) (20)Px22y30 { Px22y29, Px22y31, Px23y30, Px21y30 } CellNode (22 @ 30) (20)Px57y48 { Px57y47, Px58y48, Px56y48, Px57y49 } CellNode (57 @ 48) (20)Px31y38 { Px32y38, Px31y39, Px30y38, Px31y37 } CellNode (31 @ 38) (20)Px36y41 { Px37y41, Px36y42, Px35y41, Px36y40 } CellNode (36 @ 41) (20)Px45y49 { Px46y49, Px44y49, Px45y48, Px45y50 } CellNode (45 @ 49) (20)Px27y74 { Px28y74, Px26y74, Px27y73, Px27y75 } CellNode (27 @ 74) (20)Px61y30 { Px61y29, Px61y31, Px62y30, Px60y30 } CellNode (61 @ 30) (20)Px70y38 { Px71y38, Px70y37 } CellNode (70 @ 38) (20)Px15y75 { Px15y76, Px16y75, Px14y75, Px15y74 } CellNode (15 @ 75) (20)Px7y56 { Px8y56, Px7y55, Px7y57, Px6y56 } CellNode (7 @ 56) (20)Px75y41 { Px76y41, Px75y40, Px74y41 } CellNode (75 @ 41) (20)Px66y74 { Px67y74, Px65y74, Px66y73, Px66y75 } CellNode (66 @ 74) (20)Px49y28 { Px49y29, Px50y28, Px48y28, Px49y27 } CellNode (49 @ 28) (20)Px54y75 { Px54y76, Px55y75, Px54y74, Px53y75 } CellNode (54 @ 75) (20)Px28y21 { Px28y20, Px28y22, Px29y21, Px27y21 } CellNode (28 @ 21) (20)Px37y29 { Px37y28, Px37y30, Px38y29, Px36y29 } CellNode (37 @ 29) (20)Px42y76 { Px42y75, Px41y76, Px42y77, Px43y76 } CellNode (42 @ 76) (20)Px62y18 { Px62y17, Px63y18 } CellNode (62 @ 18) (20)Px35y80 { Px35y79, Px35y81, Px36y80, Px34y80 } CellNode (35 @ 80) (20)Px67y21 { Px67y20, Px67y22, Px68y21, Px66y21 } CellNode (67 @ 21) (20)Px41y11 { Px41y12, Px42y11, Px41y10, Px40y11 } CellNode (41 @ 11) (20)Px4y83 { Px4y84, Px5y83, Px4y82, Px3y83 } CellNode (4 @ 83) (20)Px81y76 { Px81y75, Px80y76, Px82y76, Px81y77 } CellNode (81 @ 76) (20)Px30y77 { Px30y78, Px29y77, Px31y77, Px30y76 } CellNode (30 @ 77) (20)Px93y75 { Px93y76, Px94y75, Px92y75, Px93y74 } CellNode (93 @ 75) (20)Px43y23 { Px44y23, Px43y24, Px42y23, Px43y22 } CellNode (43 @ 23) (20)Px50y19 { Px49y19, Px50y18, Px51y19 } CellNode (50 @ 19) (20)Px31y24 { Px31y25, Px31y23, Px32y24, Px30y24 } CellNode (31 @ 24) (20)Px34y56 { Px34y57, Px35y56, Px33y56, Px34y55 } CellNode (34 @ 56) (20)Px48y67 { Px48y66, Px47y67, Px49y67, Px48y68 } CellNode (48 @ 67) (20)Px22y57 { Px22y56, Px22y58, Px23y57, Px21y57 } CellNode (22 @ 57) (20)Px27y60 { Px28y60, Px27y61, Px26y60, Px27y59 } CellNode (27 @ 60) (20)Px36y68 { Px37y68, Px35y68, Px36y69, Px36y67 } CellNode (36 @ 68) (20)Px10y58 { Px11y58, Px10y57, Px9y58, Px10y59 } CellNode (10 @ 58) (20)Px73y56 { Px73y57, Px74y56, Px72y56, Px73y55 } CellNode (73 @ 56) (20)Px15y61 { Px15y62, Px16y61, Px14y61 } CellNode (15 @ 61) (20)Px61y57 { Px61y56, Px61y58, Px62y57, Px60y57 } CellNode (61 @ 57) (20)Px66y60 { Px66y61, Px67y60, Px65y60, Px66y59 } CellNode (66 @ 60) (20)Px75y68 { Px76y68, Px74y68, Px75y69, Px75y67 } CellNode (75 @ 68) (20)Px49y14 { Px50y14, Px49y15, Px48y14, Px49y13 } CellNode (49 @ 14) (20)Px54y61 { Px54y60, Px55y61, Px54y62, Px53y61 } CellNode (54 @ 61) (20)Px40y50 { Px39y50, Px41y50, Px40y49, Px40y51 } CellNode (40 @ 50) (20)Px63y69 { Px63y68, Px63y70, Px64y69, Px62y69 } CellNode (63 @ 69) (20)Px42y62 { Px43y62, Px41y62, Px42y61, Px42y63 } CellNode (42 @ 62) (20)Px28y48 { Px27y48, Px28y47, Px28y49, Px29y48 } CellNode (28 @ 48) (20)Px65y9 { Px65y10, Px64y9, Px65y8 } CellNode (65 @ 9) (20)Px58y40 { Px57y40, Px58y39, Px58y41, Px59y40 } CellNode (58 @ 40) (20)Px62y6 { Px62y7, Px61y6, Px62y5, Px63y6 } CellNode (62 @ 6) (20)Px67y48 { Px66y48, Px67y47, Px68y48, Px67y49 } CellNode (67 @ 48) (20)Px41y38 { Px41y39, Px42y38, Px41y37, Px40y38 } CellNode (41 @ 38) (20)Px46y41 { Px46y42, Px47y41, Px46y40, Px45y41 } CellNode (46 @ 41) (20)Px20y31 { Px21y31, Px19y31, Px20y30, Px20y32 } CellNode (20 @ 31) (20)Px55y49 { Px56y49, Px55y48, Px54y49, Px55y50 } CellNode (55 @ 49) (20)Px34y42 { Px35y42, Px33y42, Px34y43, Px34y41 } CellNode (34 @ 42) (20)Px71y30 { Px71y29, Px71y31, Px72y30, Px70y30 } CellNode (71 @ 30) (20)Px73y42 { Px73y43, Px72y42, Px73y41 } CellNode (73 @ 42) (20)Px13y76 { Px13y75, Px12y76, Px13y77, Px14y76 } CellNode (13 @ 76) (20)Px5y57 { Px6y57, Px4y57, Px5y58, Px5y56 } CellNode (5 @ 57) (20)Px59y28 { Px59y29, Px60y28, Px59y27, Px58y28 } CellNode (59 @ 28) (20)Px61y43 { Px60y43, Px61y44, Px61y42, Px62y43 } CellNode (61 @ 43) (20)Px38y21 { Px38y20, Px38y22, Px39y21, Px37y21 } CellNode (38 @ 21) (20)Px47y29 { Px46y29, Px47y30, Px48y29, Px47y28 } CellNode (47 @ 29) (20)Px52y76 { Px51y76, Px52y75, Px52y77, Px53y76 } CellNode (52 @ 76) (20)Px26y22 { Px27y22, Px25y22, Px26y21, Px26y23 } CellNode (26 @ 22) (20)Px40y77 { Px40y78, Px41y77, Px40y76, Px39y77 } CellNode (40 @ 77) (20)Px45y80 { Px45y81, Px45y79, Px46y80, Px44y80 } CellNode (45 @ 80) (20)Px28y34 { Px29y34, Px27y34, Px28y35, Px28y33 } CellNode (28 @ 34) (20)Px91y76 { Px91y75, Px90y76, Px91y77, Px92y76 } CellNode (91 @ 76) (20)Px33y81 { Px33y82, Px34y81, Px32y81, Px33y80 } CellNode (33 @ 81) (20)Px57y6 { Px58y6, Px57y5, Px57y7, Px56y6 } CellNode (57 @ 6) (20)Px19y67 { Px20y67, Px19y66, Px18y67, Px19y68 } CellNode (19 @ 67) (20)Px2y84 { Px3y84, Px1y84, Px2y83 } CellNode (2 @ 84) (20)Px21y82 { Px21y81, Px21y83, Px20y82, Px22y82 } CellNode (21 @ 82) (20)Px67y34 { Px68y34, Px66y34, Px67y35, Px67y33 } CellNode (67 @ 34) (20)Px54y3 { Px54y2, Px55y3, Px53y3, Px54y4 } CellNode (54 @ 3) (20)Px72y81 { Px72y82, Px71y81, Px73y81, Px72y80 } CellNode (72 @ 81) (20)Px84y80 { Px85y80, Px84y79, Px84y81, Px83y80 } CellNode (84 @ 80) (20)Px41y24 { Px41y25, Px41y23, Px42y24, Px40y24 } CellNode (41 @ 24) (20)Px53y23 { Px53y24, Px54y23, Px52y23, Px53y22 } CellNode (53 @ 23) (20)Px65y22 { Px66y22, Px65y21, Px64y22, Px65y23 } CellNode (65 @ 22) (20)Px37y60 { Px37y59, Px37y61, Px38y60, Px36y60 } CellNode (37 @ 60) (20)Px46y68 { Px46y69, Px47y68, Px46y67, Px45y68 } CellNode (46 @ 68) (20)Px20y58 { Px21y58, Px19y58, Px20y57, Px20y59 } CellNode (20 @ 58) (20)Px25y61 { Px24y61, Px25y60, Px25y62, Px26y61 } CellNode (25 @ 61) (20)Px39y72 { Px40y72, Px38y72, Px39y73, Px39y71 } CellNode (39 @ 72) (20)Px34y69 { Px34y68, Px33y69, Px34y70, Px35y69 } CellNode (34 @ 69) (20)Px13y62 { Px13y63, Px12y62, Px14y62, Px13y61 } CellNode (13 @ 62) (20)Px76y60 { Px76y59, Px76y61, Px77y60, Px75y60 } CellNode (76 @ 60) (20)Px59y14 { Px59y13, Px58y14 } CellNode (59 @ 14) (20)Px50y50 { Px51y50, Px49y50, Px50y49, Px50y51 } CellNode (50 @ 50) (20)Px64y61 { Px63y61, Px64y60, Px64y62, Px65y61 } CellNode (64 @ 61) (20)Px8y75 { Px9y75, Px7y75, Px8y74, Px8y76 } CellNode (8 @ 75) (20)Px78y72 { Px78y73, Px77y72, Px79y72, Px78y71 } CellNode (78 @ 72) (20)Px47y15 { Px47y14, Px46y15, Px47y16 } CellNode (47 @ 15) (20)Px52y62 { Px53y62, Px51y62, Px52y63, Px52y61 } CellNode (52 @ 62) (20)Px73y69 { Px73y68, Px73y70, Px74y69, Px72y69 } CellNode (73 @ 69) (20)Px35y16 { Px36y16, Px35y17, Px34y16, Px35y15 } CellNode (35 @ 16) (20)Px38y48 { Px37y48, Px38y47, Px38y49, Px39y48 } CellNode (38 @ 48) (20)Px40y63 { Px40y64, Px39y63, Px41y63, Px40y62 } CellNode (40 @ 63) (20)Px26y49 { Px26y50, Px26y48, Px27y49 } CellNode (26 @ 49) (20)Px2y70 { Px3y70, Px1y70, Px2y71, Px2y69 } CellNode (2 @ 70) (20)Px49y3 { Px49y4, Px49y2, Px50y3, Px48y3 } CellNode (49 @ 3) (20)Px56y41 { Px56y42, Px57y41, Px55y41, Px56y40 } CellNode (56 @ 41) (20)Px65y49 { Px66y49, Px64y49, Px65y48, Px65y50 } CellNode (65 @ 49) (20)Px44y42 { Px43y42, Px44y43, Px45y42, Px44y41 } CellNode (44 @ 42) (20)Px58y53 { Px58y54, Px57y53, Px59y53, Px58y52 } CellNode (58 @ 53) (20)Px32y43 { Px33y43, Px32y42, Px31y43, Px32y44 } CellNode (32 @ 43) (20)Px46y54 { Px46y53, Px47y54, Px45y54, Px46y55 } CellNode (46 @ 54) (20)Px16y80 { Px17y80, Px15y80, Px16y79, Px16y81 } CellNode (16 @ 80) (20)Px3y58 { Px2y58, Px3y57, Px3y59, Px4y58 } CellNode (3 @ 58) (20)Px8y61 { Px9y61, Px7y61, Px8y62, Px8y60 } CellNode (8 @ 61) (20)Px55y80 { Px56y80, Px54y80, Px55y79, Px55y81 } CellNode (55 @ 80) (20)Px24y23 { Px24y24, Px25y23, Px23y23, Px24y22 } CellNode (24 @ 23) (20)Px38y34 { Px38y35, Px39y34, Px38y33, Px37y34 } CellNode (38 @ 34) (20)Px43y81 { Px43y82, Px44y81, Px42y81, Px43y80 } CellNode (43 @ 81) (20)Px26y35 { Px26y34, Px27y35, Px25y35 } CellNode (26 @ 35) (20)Px31y82 { Px31y81, Px31y83, Px30y82, Px32y82 } CellNode (31 @ 82) (20)Px94y80 { Px95y80, Px93y80, Px94y79, Px94y81 } CellNode (94 @ 80) (20)Px37y7 { Px36y7, Px37y8, Px38y7, Px37y6 } CellNode (37 @ 7) (20)Px63y23 { Px63y24, Px64y23, Px63y22, Px62y23 } CellNode (63 @ 23) (20)Px82y81 { Px83y81, Px82y82, Px81y81, Px82y80 } CellNode (82 @ 81) (20)Px51y24 { Px52y24, Px51y23, Px50y24, Px51y25 } CellNode (51 @ 24) (20)Px17y68 { Px17y69, Px18y68, Px16y68, Px17y67 } CellNode (17 @ 68) (20)Px9y49 { Px9y50, Px8y49, Px10y49 } CellNode (9 @ 49) (20)Px70y82 { Px70y81, Px70y83, Px69y82, Px71y82 } CellNode (70 @ 82) (20)Px65y35 { Px66y35, Px64y35, Px65y36, Px65y34 } CellNode (65 @ 35) (20)Px53y36 { Px54y36, Px52y36, Px53y35, Px53y37 } CellNode (53 @ 36) (20)Px56y68 { Px55y68, Px56y67, Px56y69 } CellNode (56 @ 68) (20)Px35y61 { Px35y60, Px34y61, Px35y62, Px36y61 } CellNode (35 @ 61) (20)Px44y69 { Px44y68, Px43y69, Px44y70, Px45y69 } CellNode (44 @ 69) (20)Px49y72 { Px49y73, Px50y72, Px49y71, Px48y72 } CellNode (49 @ 72) (20)Px23y62 { Px23y63, Px24y62, Px23y61, Px22y62 } CellNode (23 @ 62) (20)Px37y73 { Px37y74, Px37y72, Px38y73, Px36y73 } CellNode (37 @ 73) (20)Px11y63 { Px10y63, Px12y63, Px11y64, Px11y62 } CellNode (11 @ 63) (20)Px74y61 { Px73y61, Px74y60, Px74y62, Px75y61 } CellNode (74 @ 61) (20)Px83y69 { Px83y70, Px83y68, Px82y69 } CellNode (83 @ 69) (20)Px6y76 { Px6y77, Px7y76, Px5y76, Px6y75 } CellNode (6 @ 76) (20)Px25y74 { Px26y74, Px24y74, Px25y75, Px25y73 } CellNode (25 @ 74) (20)Px57y15 { Px58y15, Px57y14, Px56y15, Px57y16 } CellNode (57 @ 15) (20)Px76y73 { Px76y74, Px76y72, Px77y73, Px75y73 } CellNode (76 @ 73) (20)Px45y16 { Px45y17, Px46y16, Px44y16, Px45y15 } CellNode (45 @ 16) (20)Px50y63 { Px51y63, Px50y64, Px49y63, Px50y62 } CellNode (50 @ 63) (20)Px62y62 { Px62y63, Px63y62, Px62y61, Px61y62 } CellNode (62 @ 62) (20)Px64y74 { Px65y74, Px63y74, Px64y75, Px64y73 } CellNode (64 @ 74) (20)Px33y17 { Px34y17, Px33y16, Px33y18, Px32y17 } CellNode (33 @ 17) (20)Px29y53 { Px29y54, Px30y53, Px29y52, Px28y53 } CellNode (29 @ 53) (20)Px51y10 { Px51y11, Px51y9 } CellNode (51 @ 10) (20)Px60y18 { Px59y18, Px60y17, Px60y19 } CellNode (60 @ 18) (20)Px68y53 { Px69y53, Px68y54, Px68y52, Px67y53 } CellNode (68 @ 53) (20)Px50y9 { Px49y9, Px51y9 } CellNode (50 @ 9) (20)Px42y43 { Px43y43, Px42y42, Px41y43, Px42y44 } CellNode (42 @ 43) (20)Px56y54 { Px56y53, Px55y54, Px56y55, Px57y54 } CellNode (56 @ 54) (20)Px30y44 { Px30y45, Px31y44, Px30y43, Px29y44 } CellNode (30 @ 44) (20)Px44y55 { Px45y55, Px43y55, Px44y56, Px44y54 } CellNode (44 @ 55) (20)Px4y50 { Px3y50, Px4y49, Px4y51, Px5y50 } CellNode (4 @ 50) (20)Px32y56 { Px33y56, Px32y57, Px31y56, Px32y55 } CellNode (32 @ 56) (20)Px14y81 { Px14y82, Px15y81, Px13y81, Px14y80 } CellNode (14 @ 81) (20)Px6y62 { Px5y62, Px6y61, Px7y62 } CellNode (6 @ 62) (20)Px1y59 { Px1y60, Px1y58, Px2y59 } CellNode (1 @ 59) (20)Px71y56 { Px72y56, Px71y57, Px70y56, Px71y55 } CellNode (71 @ 56) (20)Px48y34 { Px48y35, Px49y34, Px48y33, Px47y34 } CellNode (48 @ 34) (20)Px53y81 { Px53y82, Px54y81, Px53y80, Px52y81 } CellNode (53 @ 81) (20)Px36y35 { Px36y34, Px36y36, Px37y35, Px35y35 } CellNode (36 @ 35) (20)Px41y82 { Px40y82, Px41y81, Px41y83, Px42y82 } CellNode (41 @ 82) (20)Px92y81 { Px92y82, Px93y81, Px92y80, Px91y81 } CellNode (92 @ 81) (20)Px75y35 { Px75y34, Px75y36, Px76y35, Px74y35 } CellNode (75 @ 35) (20)Px80y82 { Px80y81, Px80y83, Px79y82, Px81y82 } CellNode (80 @ 82) (20)Px45y9 { Px46y9, Px45y10, Px45y8, Px44y9 } CellNode (45 @ 9) (20)Px63y36 { Px63y37, Px63y35, Px62y36, Px64y36 } CellNode (63 @ 36) (20)Px42y6 { Px43y6, Px42y5, Px41y6, Px42y7 } CellNode (42 @ 6) (20)Px59y72 { Px59y73, Px60y72 } CellNode (59 @ 72) (20)Px51y37 { Px51y38, Px50y37, Px52y37, Px51y36 } CellNode (51 @ 37) (20)Px30y30 { Px29y30, Px30y29, Px31y30, Px30y31 } CellNode (30 @ 30) (20)Px47y73 { Px46y73, Px47y72, Px47y74, Px48y73 } CellNode (47 @ 73) (20)Px21y63 { Px20y63, Px21y64, Px22y63, Px21y62 } CellNode (21 @ 63) (20)Px35y74 { Px36y74, Px35y75, Px34y74, Px35y73 } CellNode (35 @ 74) (20)Px67y15 { Px66y15, Px67y16 } CellNode (67 @ 15) (20)Px18y28 { Px18y29, Px19y28, Px17y28, Px18y27 } CellNode (18 @ 28) (20)Px86y73 { Px85y73, Px86y72, Px86y74, Px87y73 } CellNode (86 @ 73) (20)Px55y16 { Px55y17, Px56y16, Px54y16, Px55y15 } CellNode (55 @ 16) (20)Px9y80 { Px10y80, Px9y79, Px9y81, Px8y80 } CellNode (9 @ 80) (20)Px60y63 { Px59y63, Px60y64, Px61y63, Px60y62 } CellNode (60 @ 63) (20)Px43y17 { Px43y18, Px44y17, Px43y16 } CellNode (43 @ 17) (20)Px4y77 { Px5y77, Px3y77, Px4y76, Px4y78 } CellNode (4 @ 77) (20)Px57y28 { Px56y28, Px57y29, Px58y28 } CellNode (57 @ 28) (20)Px69y27 { Px70y27, Px68y27, Px69y28, Px69y26 } CellNode (69 @ 27) (20)Px36y21 { Px37y21, Px36y20 } CellNode (36 @ 21) (20)Px39y53 { Px39y54, Px40y53, Px38y53, Px39y52 } CellNode (39 @ 53) (20)Px62y75 { Px62y74, Px62y76, Px61y75, Px63y75 } CellNode (62 @ 75) (20)Px63y4 { Px62y4, Px63y5, Px64y4 } CellNode (63 @ 4) (20)Px50y76 { Px50y77, Px49y76, Px51y76, Px50y75 } CellNode (50 @ 76) (20)Px27y54 { Px26y54, Px27y53, Px27y55, Px28y54 } CellNode (27 @ 54) (20)Px61y10 { Px61y9, Px61y11, Px62y10, Px60y10 } CellNode (61 @ 10) (20)Px11y76 { Px11y77, Px10y76, Px12y76, Px11y75 } CellNode (11 @ 76) (20)Px60y1 { Px61y1, Px59y1, Px60y2 } CellNode (60 @ 1) (20)Px78y53 { Px78y54, Px79y53, Px77y53, Px78y52 } CellNode (78 @ 53) (20)Px70y18 { Px69y18, Px70y19 } CellNode (70 @ 18) (20)Px29y66 { Px30y66, Px29y65, Px29y67, Px28y66 } CellNode (29 @ 66) (20)Px74y74 { Px74y75, Px73y74, Px75y74, Px74y73 } CellNode (74 @ 74) (20)Px66y54 { Px65y54, Px66y53, Px66y55, Px67y54 } CellNode (66 @ 54) (20)Px31y18 { Px31y19, Px32y18, Px31y17, Px30y18 } CellNode (31 @ 18) (20)Px17y67 { Px18y67, Px16y67, Px17y66, Px17y68 } CellNode (17 @ 67) (20)Px23y75 { Px23y74, Px24y75, Px22y75, Px23y76 } CellNode (23 @ 75) (20)Px54y55 { Px54y56, Px55y55, Px53y55, Px54y54 } CellNode (54 @ 55) (20)Px68y66 { Px68y67, Px68y65, Px69y66, Px67y66 } CellNode (68 @ 66) (20)Px42y56 { Px41y56, Px42y57, Px43y56, Px42y55 } CellNode (42 @ 56) (20)Px30y57 { Px29y57, Px30y58, Px30y56, Px31y57 } CellNode (30 @ 57) (20)Px46y35 { Px45y35, Px46y36, Px47y35, Px46y34 } CellNode (46 @ 35) (20)Px58y4 { Px59y4, Px58y3, Px58y5, Px57y4 } CellNode (58 @ 4) (20)Px34y36 { Px35y36, Px34y35, Px33y36, Px34y37 } CellNode (34 @ 36) (20)Px48y47 { Px48y46, Px48y48, Px47y47, Px49y47 } CellNode (48 @ 47) (20)Px27y40 { Px28y40, Px27y39, Px27y41 } CellNode (27 @ 40) (20)Px55y1 { Px56y1, Px54y1, Px55y2 } CellNode (55 @ 1) (20)Px90y82 { Px89y82, Px90y81, Px90y83, Px91y82 } CellNode (90 @ 82) (20)Px36y48 { Px37y48, Px35y48, Px36y49, Px36y47 } CellNode (36 @ 48) (20)Px73y36 { Px74y36, Px73y35, Px72y36, Px73y37 } CellNode (73 @ 36) (20)Px18y73 { Px19y73, Px17y73, Px18y72, Px18y74 } CellNode (18 @ 73) (20)Px66y40 { Px66y41, Px65y40, Px67y40, Px66y39 } CellNode (66 @ 40) (20)Px61y37 { Px61y38, Px62y37, Px60y37, Px61y36 } CellNode (61 @ 37) (20)Px40y30 { Px40y31, Px40y29, Px41y30, Px39y30 } CellNode (40 @ 30) (20)Px75y48 { Px75y49, Px75y47, Px74y48 } CellNode (75 @ 48) (20)Px54y41 { Px55y41, Px54y42, Px53y41, Px54y40 } CellNode (54 @ 41) (20)Px57y73 { Px57y72, Px57y74, Px56y73 } CellNode (57 @ 73) (20)Px45y74 { Px45y75, Px46y74, Px44y74, Px45y73 } CellNode (45 @ 74) (20)Px28y28 { Px27y28, Px29y28, Px28y29, Px28y27 } CellNode (28 @ 28) (20)Px33y75 { Px33y74, Px32y75, Px33y76, Px34y75 } CellNode (33 @ 75) (20)Px96y73 { Px95y73, Px97y73, Px96y74 } CellNode (96 @ 73) (20)Px16y29 { Px15y29, Px16y28, Px16y30, Px17y29 } CellNode (16 @ 29) (20)Px21y76 { Px22y76, Px21y77, Px20y76, Px21y75 } CellNode (21 @ 76) (20)Px84y74 { Px84y75, Px85y74, Px84y73, Px83y74 } CellNode (84 @ 74) (20)Px67y28 { Px67y27, Px68y28, Px67y29, Px66y28 } CellNode (67 @ 28) (20)Px53y17 { Px54y17, Px52y17, Px53y16, Px53y18 } CellNode (53 @ 17) (20)Px72y75 { Px72y74, Px71y75, Px72y76, Px73y75 } CellNode (72 @ 75) (20)Px41y18 { Px41y19, Px42y18, Px40y18, Px41y17 } CellNode (41 @ 18) (20)Px55y29 { Px54y29, Px55y28, Px55y30, Px56y29 } CellNode (55 @ 29) (20)Px7y81 { Px8y81, Px6y81, Px7y80, Px7y82 } CellNode (7 @ 81) (20)Px60y76 { Px61y76, Px59y76, Px60y77, Px60y75 } CellNode (60 @ 76) (20)Px58y20 { Px58y19, Px58y21, Px59y20, Px57y20 } CellNode (58 @ 20) (20)Px22y23 { Px22y24, Px22y22, Px23y23, Px21y23 } CellNode (22 @ 23) (20)Px25y55 { Px25y56, Px26y55, Px24y55, Px25y54 } CellNode (25 @ 55) (20)Px39y66 { Px40y66, Px38y66, Px39y65, Px39y67 } CellNode (39 @ 66) (20)Px40y2 { Px41y2, Px40y1, Px40y3 } CellNode (40 @ 2) (20)Px27y67 { Px26y67, Px27y66, Px28y67 } CellNode (27 @ 67) (20)Px61y23 { Px60y23, Px61y22, Px61y24, Px62y23 } CellNode (61 @ 23) (20)Px64y55 { Px64y56, Px65y55, Px64y54, Px63y55 } CellNode (64 @ 55) (20)Px15y68 { Px15y67, Px16y68, Px14y68, Px15y69 } CellNode (15 @ 68) (20)Px78y66 { Px77y66, Px78y65, Px78y67, Px79y66 } CellNode (78 @ 66) (20)Px52y56 { Px52y55, Px52y57, Px53y56, Px51y56 } CellNode (52 @ 56) (20)Px66y67 { Px66y68, Px65y67, Px67y67, Px66y66 } CellNode (66 @ 67) (20)Px45y60 { Px45y59, Px46y60, Px44y60, Px45y61 } CellNode (45 @ 60) (20)Px40y57 { Px39y57, Px41y57, Px40y56, Px40y58 } CellNode (40 @ 57) (20)Px54y68 { Px54y67, Px55y68, Px54y69, Px53y68 } CellNode (54 @ 68) (20)Px33y61 { Px34y61, Px32y61, Px33y62, Px33y60 } CellNode (33 @ 61) (20)Px72y61 { Px72y62, Px73y61, Px71y61, Px72y60 } CellNode (72 @ 61) (20)Px58y47 { Px57y47, Px58y46, Px58y48, Px59y47 } CellNode (58 @ 47) (20)Px38y5 { Px38y6, Px38y4, Px39y5 } CellNode (38 @ 5) (20)Px32y37 { Px32y38, Px33y37, Px32y36, Px31y37 } CellNode (32 @ 37) (20)Px46y48 { Px47y48, Px46y49, Px46y47, Px45y48 } CellNode (46 @ 48) (20)Px37y40 { Px37y41, Px38y40, Px36y40, Px37y39 } CellNode (37 @ 40) (20)Px34y49 { Px34y50, Px35y49, Px33y49, Px34y48 } CellNode (34 @ 49) (20)Px71y37 { Px71y38, Px72y37, Px70y37, Px71y36 } CellNode (71 @ 37) (20)Px76y40 { Px76y41, Px76y39, Px75y40 } CellNode (76 @ 40) (20)Px8y55 { Px7y55, Px8y54, Px8y56, Px9y55 } CellNode (8 @ 55) (20)Px50y30 { Px51y30, Px49y30, Px50y29, Px50y31 } CellNode (50 @ 30) (20)Px64y41 { Px64y42, Px63y41, Px65y41, Px64y40 } CellNode (64 @ 41) (20)Px73y49 { Px73y50, Px74y49, Px72y49, Px73y48 } CellNode (73 @ 49) (20)Px52y42 { Px51y42, Px52y43, Px52y41, Px53y42 } CellNode (52 @ 42) (20)Px40y43 { Px40y44, Px39y43, Px41y43, Px40y42 } CellNode (40 @ 43) (20)Px43y75 { Px43y74, Px42y75, Px43y76, Px44y75 } CellNode (43 @ 75) (20)Px26y29 { Px27y29, Px26y28, Px25y29, Px26y30 } CellNode (26 @ 29) (20)Px68y20 { Px68y19, Px68y21, Px69y20, Px67y20 } CellNode (68 @ 20) (20)Px31y76 { Px31y77, Px32y76, Px30y76, Px31y75 } CellNode (31 @ 76) (20)Px19y33 { Px20y33, Px19y34, Px18y33, Px19y32 } CellNode (19 @ 33) (20)Px2y50 { Px3y50, Px1y50, Px2y51, Px2y49 } CellNode (2 @ 50) (20)Px5y82 { Px5y83, Px6y82, Px4y82, Px5y81 } CellNode (5 @ 82) (20)Px24y80 { Px24y81, Px23y80, Px25y80, Px24y79 } CellNode (24 @ 80) (20)Px56y21 { Px56y20, Px56y22, Px57y21 } CellNode (56 @ 21) (20)Px65y29 { Px66y29, Px65y28, Px64y29, Px65y30 } CellNode (65 @ 29) (20)Px12y81 { Px12y80, Px13y81, Px11y81, Px12y82 } CellNode (12 @ 81) (20)Px44y22 { Px44y23, Px45y22, Px43y22 } CellNode (44 @ 22) (20)Px58y33 { Px59y33, Px57y33, Px58y34, Px58y32 } CellNode (58 @ 33) (20)Px70y76 { Px70y77, Px71y76, Px69y76, Px70y75 } CellNode (70 @ 76) (20)Px63y80 { Px64y80, Px62y80, Px63y81, Px63y79 } CellNode (63 @ 80) (20)Px32y23 { Px32y22, Px31y23, Px33y23, Px32y24 } CellNode (32 @ 23) (20)Px82y75 { Px82y74, Px81y75, Px82y76, Px83y75 } CellNode (82 @ 75) (20)Px49y66 { Px50y66, Px49y65, Px48y66, Px49y67 } CellNode (49 @ 66) (20)Px51y81 { Px51y80, Px51y82, Px52y81, Px50y81 } CellNode (51 @ 81) (20)Px20y24 { Px20y25, Px19y24, Px21y24, Px20y23 } CellNode (20 @ 24) (20)Px37y67 { Px37y68, Px38y67, Px37y66, Px36y67 } CellNode (37 @ 67) (20)Px16y60 { Px16y61, Px17y60, Px16y59 } CellNode (16 @ 60) (20)Px39y79 { Px40y79, Px38y79, Px39y78, Px39y80 } CellNode (39 @ 79) (20)Px13y69 { Px14y69, Px12y69, Px13y68, Px13y70 } CellNode (13 @ 69) (20)Px76y67 { Px76y68, Px77y67, Px75y67, Px76y66 } CellNode (76 @ 67) (20)Px50y57 { Px51y57, Px50y56, Px49y57, Px50y58 } CellNode (50 @ 57) (20)Px55y60 { Px54y60, Px55y59, Px55y61, Px56y60 } CellNode (55 @ 60) (20)Px64y68 { Px64y67, Px63y68, Px64y69, Px65y68 } CellNode (64 @ 68) (20)Px69y71 { Px69y72, Px68y71, Px70y71, Px69y70 } CellNode (69 @ 71) (20)Px38y14 { Px39y14, Px37y14, Px38y13, Px38y15 } CellNode (38 @ 14) (20)Px43y61 { Px43y62, Px44y61, Px43y60, Px42y61 } CellNode (43 @ 61) (20)Px52y69 { Px53y69, Px51y69, Px52y68, Px52y70 } CellNode (52 @ 69) (20)Px31y62 { Px32y62, Px31y63, Px30y62, Px31y61 } CellNode (31 @ 62) (20)Px65y15 { Px66y15, Px64y15, Px65y16, Px65y14 } CellNode (65 @ 15) (20)Px68y47 { Px67y47, Px68y46, Px68y48, Px69y47 } CellNode (68 @ 47) (20)Px70y62 { Px70y63, Px69y62, Px71y62, Px70y61 } CellNode (70 @ 62) (20)Px47y40 { Px47y41, Px48y40, Px46y40, Px47y39 } CellNode (47 @ 40) (20)Px2y77 { Px3y77, Px1y77, Px2y78, Px2y76 } CellNode (2 @ 77) (20)Px56y48 { Px56y49, Px57y48, Px56y47, Px55y48 } CellNode (56 @ 48) (20)Px35y41 { Px35y40, Px35y42, Px36y41, Px34y41 } CellNode (35 @ 41) (20)Px49y52 { Px49y53, Px48y52, Px50y52, Px49y51 } CellNode (49 @ 52) (20)Px44y49 { Px43y49, Px44y50, Px45y49, Px44y48 } CellNode (44 @ 49) (20)Px46y7 { Px46y8, Px47y7, Px45y7 } CellNode (46 @ 7) (20)Px37y53 { Px37y52, Px38y53, Px36y53, Px37y54 } CellNode (37 @ 53) (20)Px74y41 { Px75y41, Px74y40, Px73y41 } CellNode (74 @ 41) (20)Px43y4 { Px43y5, Px44y4, Px43y3, Px42y4 } CellNode (43 @ 4) (20)Px6y56 { Px6y57, Px7y56, Px5y56, Px6y55 } CellNode (6 @ 56) (20)Px62y42 { Px62y43, Px61y42, Px62y41, Px63y42 } CellNode (62 @ 42) (20)Px76y53 { Px76y52, Px77y53, Px75y53, Px76y54 } CellNode (76 @ 53) (20)Px50y43 { Px50y44, Px49y43, Px51y43, Px50y42 } CellNode (50 @ 43) (20)Px8y68 { Px8y69, Px7y68, Px9y68, Px8y67 } CellNode (8 @ 68) (20)Px29y33 { Px29y34, Px30y33, Px28y33, Px29y32 } CellNode (29 @ 33) (20)Px34y80 { Px34y81, Px35y80, Px33y80, Px34y79 } CellNode (34 @ 80) (20)Px17y34 { Px18y34, Px16y34, Px17y35, Px17y33 } CellNode (17 @ 34) (20)Px22y81 { Px22y80, Px21y81, Px22y82, Px23y81 } CellNode (22 @ 81) (20)Px68y33 { Px69y33, Px68y34, Px67y33, Px68y32 } CellNode (68 @ 33) (20)Px10y82 { Px10y83, Px11y82, Px10y81, Px9y82 } CellNode (10 @ 82) (20)Px73y80 { Px74y80, Px73y81, Px72y80, Px73y79 } CellNode (73 @ 80) (20)Px56y34 { Px57y34, Px55y34, Px56y35, Px56y33 } CellNode (56 @ 34) (20)Px42y23 { Px43y23, Px41y23, Px42y22, Px42y24 } CellNode (42 @ 23) (20)Px61y81 { Px62y81, Px61y80 } CellNode (61 @ 81) (20)Px30y24 { Px30y25, Px29y24, Px31y24, Px30y23 } CellNode (30 @ 24) (20)Px44y35 { Px43y35, Px44y36, Px44y34, Px45y35 } CellNode (44 @ 35) (20)Px26y60 { Px25y60, Px26y59, Px26y61, Px27y60 } CellNode (26 @ 60) (20)Px35y68 { Px35y67, Px34y68, Px35y69, Px36y68 } CellNode (35 @ 68) (20)Px14y61 { Px13y61, Px15y61, Px14y62 } CellNode (14 @ 61) (20)Px49y79 { Px48y79, Px50y79, Px49y78, Px49y80 } CellNode (49 @ 79) (20)Px28y72 { Px28y73, Px28y71, Px29y72, Px27y72 } CellNode (28 @ 72) (20)Px65y60 { Px64y60, Px65y59, Px65y61, Px66y60 } CellNode (65 @ 60) (20)Px16y73 { Px17y73, Px15y73, Px16y74, Px16y72 } CellNode (16 @ 73) (20)Px79y71 { Px79y72, Px80y71, Px79y70, Px78y71 } CellNode (79 @ 71) (20)Px48y14 { Px49y14, Px47y14, Px48y13 } CellNode (48 @ 14) (20)Px53y61 { Px53y62, Px54y61, Px53y60, Px52y61 } CellNode (53 @ 61) (20)Px67y72 { Px66y72, Px67y71, Px67y73, Px68y72 } CellNode (67 @ 72) (20)Px36y15 { Px36y16, Px37y15, Px36y14, Px35y15 } CellNode (36 @ 15) (20)Px41y62 { Px41y61, Px41y63, Px42y62, Px40y62 } CellNode (41 @ 62) (20)Px88y79 { Px89y79, Px87y79, Px88y78, Px88y80 } CellNode (88 @ 79) (20)Px62y69 { Px61y69, Px62y68, Px63y69 } CellNode (62 @ 69) (20)Px74y68 { Px73y68, Px74y67, Px74y69, Px75y68 } CellNode (74 @ 68) (20)Px55y73 { Px55y74, Px54y73, Px56y73, Px55y72 } CellNode (55 @ 73) (20)Px80y62 { Px81y62, Px80y63, Px79y62, Px80y61 } CellNode (80 @ 62) (20)Px59y2 { Px59y3, Px59y1, Px60y2, Px58y2 } CellNode (59 @ 2) (20)Px94y73 { Px93y73, Px95y73, Px94y74 } CellNode (94 @ 73) (20)Px63y16 { Px63y17, Px63y15, Px64y16, Px62y16 } CellNode (63 @ 16) (20)Px51y17 { Px51y18, Px52y17, Px50y17, Px51y16 } CellNode (51 @ 17) (20)Px59y52 { Px59y53, Px60y52, Px58y52, Px59y51 } CellNode (59 @ 52) (20)Px33y42 { Px34y42, Px32y42, Px33y41, Px33y43 } CellNode (33 @ 42) (20)Px47y53 { Px46y53, Px47y52, Px47y54, Px48y53 } CellNode (47 @ 53) (20)Px35y54 { Px36y54, Px34y54, Px35y55, Px35y53 } CellNode (35 @ 54) (20)Px72y42 { Px72y41, Px73y42 } CellNode (72 @ 42) (20)Px4y57 { Px4y56, Px3y57, Px4y58, Px5y57 } CellNode (4 @ 57) (20)Px23y55 { Px24y55, Px23y56, Px22y55, Px23y54 } CellNode (23 @ 55) (20)Px9y60 { Px10y60, Px9y61, Px8y60, Px9y59 } CellNode (9 @ 60) (20)Px60y43 { Px60y44, Px61y43, Px59y43, Px60y42 } CellNode (60 @ 43) (20)Px11y56 { Px11y55, Px11y57, Px10y56 } CellNode (11 @ 56) (20)Px74y54 { Px75y54, Px74y55, Px73y54, Px74y53 } CellNode (74 @ 54) (20)Px6y69 { Px6y68, Px6y70, Px7y69, Px5y69 } CellNode (6 @ 69) (20)Px62y55 { Px63y55, Px62y54, Px62y56 } CellNode (62 @ 55) (20)Px39y33 { Px39y34, Px40y33, Px38y33, Px39y32 } CellNode (39 @ 33) (20)Px44y80 { Px44y79, Px44y81, Px45y80, Px43y80 } CellNode (44 @ 80) (20)Px27y34 { Px26y34, Px27y35, Px28y34, Px27y33 } CellNode (27 @ 34) (20)Px32y81 { Px32y80, Px31y81, Px32y82, Px33y81 } CellNode (32 @ 81) (20)Px15y35 { Px15y34, Px16y35 } CellNode (15 @ 35) (20)Px20y82 { Px20y83, Px19y82, Px21y82, Px20y81 } CellNode (20 @ 82) (20)Px83y80 { Px83y79, Px83y81, Px84y80, Px82y80 } CellNode (83 @ 80) (20)Px66y34 { Px66y33, Px66y35, Px67y34, Px65y34 } CellNode (66 @ 34) (20)Px29y46 { Px29y45, Px29y47, Px28y46, Px30y46 } CellNode (29 @ 46) (20)Px71y81 { Px71y80, Px70y81, Px71y82, Px72y81 } CellNode (71 @ 81) (20)Px40y24 { Px40y25, Px41y24, Px39y24, Px40y23 } CellNode (40 @ 24) (20)Px54y35 { Px55y35, Px54y34, Px53y35, Px54y36 } CellNode (54 @ 35) (20)Px68y46 { Px68y45, Px68y47, Px69y46, Px67y46 } CellNode (68 @ 46) (20)Px42y36 { Px43y36, Px42y37, Px41y36, Px42y35 } CellNode (42 @ 36) (20)Px30y37 { Px31y37, Px30y36, Px30y38, Px29y37 } CellNode (30 @ 37) (20)Px38y72 { Px39y72, Px38y71, Px37y72, Px38y73 } CellNode (38 @ 72) (20)Px12y62 { Px12y61, Px12y63, Px13y62, Px11y62 } CellNode (12 @ 62) (20)Px26y73 { Px26y74, Px27y73, Px25y73, Px26y72 } CellNode (26 @ 73) (20)Px72y69 { Px73y69, Px72y68, Px71y69, Px72y70 } CellNode (72 @ 69) (20)Px14y74 { Px14y73, Px15y74, Px13y74, Px14y75 } CellNode (14 @ 74) (20)Px77y72 { Px78y72, Px76y72, Px77y71, Px77y73 } CellNode (77 @ 72) (20)Px46y15 { Px46y16, Px47y15, Px45y15, Px46y14 } CellNode (46 @ 15) (20)Px65y73 { Px65y74, Px66y73, Px65y72, Px64y73 } CellNode (65 @ 73) (20)Px34y16 { Px35y16, Px34y15, Px33y16, Px34y17 } CellNode (34 @ 16) (20)Px51y62 { Px50y62, Px51y63, Px52y62, Px51y61 } CellNode (51 @ 62) (20)Px53y74 { Px53y73, Px54y74, Px52y74, Px53y75 } CellNode (53 @ 74) (20)Px27y20 { Px26y20, Px28y20, Px27y19, Px27y21 } CellNode (27 @ 20) (20)Px36y28 { Px37y28, Px35y28, Px36y27, Px36y29 } CellNode (36 @ 28) (20)Px41y75 { Px42y75, Px41y76, Px40y75, Px41y74 } CellNode (41 @ 75) (20)Px1y70 { Px2y70, Px1y69, Px1y71 } CellNode (1 @ 70) (20)Px39y3 { Px39y4, Px40y3 } CellNode (39 @ 3) (20)Px92y74 { Px92y73, Px92y75, Px91y74, Px93y74 } CellNode (92 @ 74) (20)Px69y52 { Px69y53, Px70y52, Px68y52, Px69y51 } CellNode (69 @ 52) (20)Px61y17 { Px62y17, Px61y16, Px60y17 } CellNode (61 @ 17) (20)Px60y8 { Px61y8, Px59y8, Px60y9, Px60y7 } CellNode (60 @ 8) (20)Px80y75 { Px81y75, Px79y75, Px80y76, Px80y74 } CellNode (80 @ 75) (20)Px57y53 { Px56y53, Px57y52, Px57y54, Px58y53 } CellNode (57 @ 53) (20)Px3y82 { Px3y83, Px3y81, Px4y82, Px2y82 } CellNode (3 @ 82) (20)Px66y20 { Px65y20, Px67y20, Px66y19, Px66y21 } CellNode (66 @ 20) (20)Px40y10 { Px40y11, Px41y10, Px40y9, Px39y10 } CellNode (40 @ 10) (20)Px45y54 { Px45y55, Px46y54, Px45y53, Px44y54 } CellNode (45 @ 54) (20)Px59y65 { Px59y66, Px59y64, Px60y65, Px58y65 } CellNode (59 @ 65) (20)Px33y55 { Px33y54, Px33y56, Px34y55, Px32y55 } CellNode (33 @ 55) (20)Px47y66 { Px47y67, Px46y66, Px48y66, Px47y65 } CellNode (47 @ 66) (20)Px7y61 { Px8y61, Px6y61, Px7y60, Px7y62 } CellNode (7 @ 61) (20)Px21y56 { Px22y56, Px20y56, Px21y55, Px21y57 } CellNode (21 @ 56) (20)Px72y55 { Px71y55, Px72y56, Px73y55, Px72y54 } CellNode (72 @ 55) (20)Px9y73 { Px8y73, Px10y73, Px9y72, Px9y74 } CellNode (9 @ 73) (20)Px60y56 { Px60y57, Px61y56, Px59y56 } CellNode (60 @ 56) (20)Px25y35 { Px24y35, Px26y35, Px25y34 } CellNode (25 @ 35) (20)Px39y46 { Px39y45, Px39y47, Px38y46, Px40y46 } CellNode (39 @ 46) (20)Px30y82 { Px30y83, Px31y82, Px29y82, Px30y81 } CellNode (30 @ 82) (20)Px76y34 { Px76y33, Px75y34, Px76y35 } CellNode (76 @ 34) (20)Px8y49 { Px8y50, Px7y49, Px9y49 } CellNode (8 @ 49) (20)Px27y47 { Px27y48, Px28y47, Px26y47, Px27y46 } CellNode (27 @ 47) (20)Px64y35 { Px65y35, Px63y35, Px64y34, Px64y36 } CellNode (64 @ 35) (20)Px55y8 { Px56y8, Px55y7, Px55y9 } CellNode (55 @ 8) (20)Px52y5 { Px51y5, Px52y4, Px53y5 } CellNode (52 @ 5) (20)Px52y36 { Px52y37, Px53y36, Px51y36, Px52y35 } CellNode (52 @ 36) (20)Px66y47 { Px66y48, Px65y47, Px67y47, Px66y46 } CellNode (66 @ 47) (20)Px40y37 { Px40y38, Px40y36, Px41y37, Px39y37 } CellNode (40 @ 37) (20)Px45y40 { Px45y39, Px45y41, Px44y40, Px46y40 } CellNode (45 @ 40) (20)Px54y48 { Px55y48, Px53y48, Px54y49, Px54y47 } CellNode (54 @ 48) (20)Px36y73 { Px36y74, Px37y73, Px36y72, Px35y73 } CellNode (36 @ 73) (20)Px19y27 { Px18y27, Px19y28, Px20y27, Px19y26 } CellNode (19 @ 27) (20)Px24y74 { Px24y73, Px23y74, Px24y75, Px25y74 } CellNode (24 @ 74) (20)Px87y72 { Px86y72, Px87y73, Px87y71 } CellNode (87 @ 72) (20)Px75y73 { Px75y74, Px76y73, Px75y72, Px74y73 } CellNode (75 @ 73) (20)Px12y75 { Px13y75, Px12y76, Px11y75, Px12y74 } CellNode (12 @ 75) (20)Px89y84 { Px88y84, Px89y83, Px90y84 } CellNode (89 @ 84) (20)Px58y27 { Px59y27, Px58y28 } CellNode (58 @ 27) (20)Px32y17 { Px32y18, Px33y17, Px31y17, Px32y16 } CellNode (32 @ 17) (20)Px37y20 { Px38y20, Px36y20, Px37y19, Px37y21 } CellNode (37 @ 20) (20)Px46y28 { Px45y28, Px46y29, Px46y27, Px47y28 } CellNode (46 @ 28) (20)Px63y74 { Px63y73, Px62y74, Px63y75, Px64y74 } CellNode (63 @ 74) (20)Px25y21 { Px24y21, Px25y22, Px26y21 } CellNode (25 @ 21) (20)Px51y75 { Px51y76, Px52y75, Px50y75, Px51y74 } CellNode (51 @ 75) (20)Px34y29 { Px35y29, Px33y29, Px34y28, Px34y30 } CellNode (34 @ 29) (20)Px64y21 { Px65y21, Px63y21, Px64y22, Px64y20 } CellNode (64 @ 21) (20)Px90y75 { Px90y76, Px91y75, Px89y75, Px90y74 } CellNode (90 @ 75) (20)Px40y9 { Px40y8, Px40y10, Px41y9, Px39y9 } CellNode (40 @ 9) (20)Px18y66 { Px19y66, Px18y67, Px17y66, Px18y65 } CellNode (18 @ 66) (20)Px52y22 { Px51y22, Px52y23, Px53y22 } CellNode (52 @ 22) (20)Px73y29 { Px73y30, Px72y29, Px73y28 } CellNode (73 @ 29) (20)Px1y83 { Px2y83, Px1y82, Px1y84 } CellNode (1 @ 83) (20)Px69y65 { Px70y65, Px68y65, Px69y64, Px69y66 } CellNode (69 @ 65) (20)Px44y2 { Px43y2, Px44y3, Px45y2, Px44y1 } CellNode (44 @ 2) (20)Px43y55 { Px42y55, Px43y56, Px44y55, Px43y54 } CellNode (43 @ 55) (20)Px31y56 { Px32y56, Px31y55, Px30y56, Px31y57 } CellNode (31 @ 56) (20)Px45y67 { Px45y66, Px45y68, Px44y67, Px46y67 } CellNode (45 @ 67) (20)Px5y62 { Px4y62, Px6y62, Px5y61 } CellNode (5 @ 62) (20)Px24y60 { Px25y60, Px23y60, Px24y61, Px24y59 } CellNode (24 @ 60) (20)Px33y68 { Px33y69, Px34y68, Px32y68, Px33y67 } CellNode (33 @ 68) (20)Px70y56 { Px69y56, Px71y56, Px70y55, Px70y57 } CellNode (70 @ 56) (20)Px12y61 { Px13y61, Px11y61, Px12y62 } CellNode (12 @ 61) (20)Px7y74 { Px8y74, Px6y74, Px7y75, Px7y73 } CellNode (7 @ 74) (20)Px58y13 { Px58y14, Px57y13, Px58y12, Px59y13 } CellNode (58 @ 13) (20)Px63y60 { Px64y60, Px62y60, Px63y61, Px63y59 } CellNode (63 @ 60) (20)Px49y46 { Px48y46, Px49y45, Px49y47, Px50y46 } CellNode (49 @ 46) (20)Px37y47 { Px37y48, Px38y47, Px37y46, Px36y47 } CellNode (37 @ 47) (20)Px35y9 { Px34y9, Px35y10, Px35y8, Px36y9 } CellNode (35 @ 9) (20)Px55y40 { Px55y39, Px55y41, Px56y40, Px54y40 } CellNode (55 @ 40) (20)Px50y37 { Px51y37, Px50y36, Px49y37, Px50y38 } CellNode (50 @ 37) (20)Px64y48 { Px64y49, Px63y48, Px65y48, Px64y47 } CellNode (64 @ 48) (20)Px43y41 { Px43y42, Px42y41, Px43y40, Px44y41 } CellNode (43 @ 41) (20)Px52y49 { Px51y49, Px52y48, Px52y50, Px53y49 } CellNode (52 @ 49) (20)Px29y27 { Px28y27, Px29y28, Px30y27, Px29y26 } CellNode (29 @ 27) (20)Px31y42 { Px32y42, Px30y42, Px31y43, Px31y41 } CellNode (31 @ 42) (20)Px17y28 { Px18y28, Px16y28, Px17y27, Px17y29 } CellNode (17 @ 28) (20)Px22y75 { Px22y76, Px23y75, Px22y74, Px21y75 } CellNode (22 @ 75) (20)Px68y27 { Px68y26, Px68y28, Px69y27, Px67y27 } CellNode (68 @ 27) (20)Px70y42 { Px70y43, Px69y42 } CellNode (70 @ 42) (20)Px10y76 { Px9y76, Px10y77, Px11y76, Px10y75 } CellNode (10 @ 76) (20)Px73y74 { Px72y74, Px73y73, Px73y75, Px74y74 } CellNode (73 @ 74) (20)Px56y28 { Px56y29, Px57y28, Px55y28 } CellNode (56 @ 28) (20)Px2y57 { Px2y58, Px3y57, Px1y57, Px2y56 } CellNode (2 @ 57) (20)Px61y75 { Px61y76, Px62y75, Px60y75, Px61y74 } CellNode (61 @ 75) (20)Px44y29 { Px44y30, Px45y29, Px44y28, Px43y29 } CellNode (44 @ 29) (20)Px49y32 { Px49y33, Px48y32, Px50y32, Px49y31 } CellNode (49 @ 32) (20)Px23y22 { Px22y22, Px23y21, Px23y23, Px24y22 } CellNode (23 @ 22) (20)Px37y33 { Px37y34, Px36y33, Px38y33, Px37y32 } CellNode (37 @ 33) (20)Px42y80 { Px42y79, Px42y81, Px41y80, Px43y80 } CellNode (42 @ 80) (20)Px28y66 { Px28y67, Px29y66, Px28y65, Px27y66 } CellNode (28 @ 66) (20)Px62y22 { Px61y22, Px62y21, Px63y22, Px62y23 } CellNode (62 @ 22) (20)Px16y67 { Px15y67, Px16y66, Px16y68, Px17y67 } CellNode (16 @ 67) (20)Px81y80 { Px81y79, Px82y80, Px81y81, Px80y80 } CellNode (81 @ 80) (20)Px50y23 { Px51y23, Px50y24, Px49y23 } CellNode (50 @ 23) (20)Px79y65 { Px80y65, Px78y65, Px79y64, Px79y66 } CellNode (79 @ 65) (20)Px67y66 { Px67y67, Px68y66, Px66y66, Px67y65 } CellNode (67 @ 66) (20)Px55y67 { Px54y67, Px55y66, Px55y68, Px56y67 } CellNode (55 @ 67) (20)Px34y60 { Px35y60, Px34y61, Px33y60, Px34y59 } CellNode (34 @ 60) (20)Px69y78 { Px70y78, Px68y78, Px69y79, Px69y77 } CellNode (69 @ 78) (20)Px48y71 { Px48y72, Px48y70, Px49y71, Px47y71 } CellNode (48 @ 71) (20)Px43y68 { Px44y68, Px42y68, Px43y69, Px43y67 } CellNode (43 @ 68) (20)Px22y61 { Px23y61, Px22y62, Px21y61, Px22y60 } CellNode (22 @ 61) (20)Px80y56 { Px79y56, Px80y55, Px80y57 } CellNode (80 @ 56) (20)Px31y69 { Px31y70, Px32y69, Px30y69, Px31y68 } CellNode (31 @ 69) (20)Px10y62 { Px10y63, Px10y61, Px9y62, Px11y62 } CellNode (10 @ 62) (20)Px73y60 { Px73y61, Px74y60, Px72y60, Px73y59 } CellNode (73 @ 60) (20)Px82y68 { Px83y68, Px82y69, Px81y68, Px82y67 } CellNode (82 @ 68) (20)Px5y75 { Px4y75, Px5y74, Px5y76, Px6y75 } CellNode (5 @ 75) (20)Px61y61 { Px62y61, Px60y61, Px61y62, Px61y60 } CellNode (61 @ 61) (20)Px56y14 { Px56y15, Px57y14 } CellNode (56 @ 14) (20)Px70y69 { Px70y70, Px71y69, Px69y69, Px70y68 } CellNode (70 @ 69) (20)Px47y47 { Px47y48, Px48y47, Px46y47, Px47y46 } CellNode (47 @ 47) (20)Px44y15 { Px44y16, Px44y14, Px45y15, Px43y15 } CellNode (44 @ 15) (20)Px35y48 { Px34y48, Px35y49, Px36y48, Px35y47 } CellNode (35 @ 48) (20)Px49y59 { Px50y59, Px48y59, Px49y58, Px49y60 } CellNode (49 @ 59) (20)Px9y54 { Px9y53, Px8y54, Px10y54, Px9y55 } CellNode (9 @ 54) (20)Px28y52 { Px28y51, Px29y52, Px28y53, Px27y52 } CellNode (28 @ 52) (20)Px65y40 { Px65y39, Px65y41, Px66y40, Px64y40 } CellNode (65 @ 40) (20)Px74y48 { Px74y47, Px74y49, Px75y48, Px73y48 } CellNode (74 @ 48) (20)Px53y41 { Px54y41, Px52y41, Px53y40, Px53y42 } CellNode (53 @ 41) (20)Px62y49 { Px62y48, Px61y49, Px62y50, Px63y49 } CellNode (62 @ 49) (20)Px67y52 { Px67y51, Px68y52, Px67y53, Px66y52 } CellNode (67 @ 52) (20)Px41y42 { Px42y42, Px41y43, Px40y42, Px41y41 } CellNode (41 @ 42) (20)Px55y53 { Px56y53, Px54y53, Px55y54, Px55y52 } CellNode (55 @ 53) (20)Px15y29 { Px15y28, Px16y29, Px15y30 } CellNode (15 @ 29) (20)Px13y80 { Px12y80, Px13y79, Px13y81, Px14y80 } CellNode (13 @ 80) (20)Px59y32 { Px59y33, Px60y32, Px58y32, Px59y31 } CellNode (59 @ 32) (20)Px54y29 { Px54y30, Px55y29, Px54y28, Px53y29 } CellNode (54 @ 29) (20)Px33y22 { Px33y23, Px32y22 } CellNode (33 @ 22) (20)Px64y9 { Px65y9, Px64y8, Px64y10, Px63y9 } CellNode (64 @ 9) (20)Px47y33 { Px48y33, Px47y34, Px46y33, Px47y32 } CellNode (47 @ 33) (20)Px52y80 { Px51y80, Px52y79, Px53y80, Px52y81 } CellNode (52 @ 80) (20)Px21y23 { Px21y24, Px22y23, Px21y22, Px20y23 } CellNode (21 @ 23) (20)Px61y6 { Px62y6, Px61y5, Px60y6, Px61y7 } CellNode (61 @ 6) (20)Px35y34 { Px35y35, Px34y34, Px35y33, Px36y34 } CellNode (35 @ 34) (20)Px40y81 { Px40y82, Px41y81, Px39y81, Px40y80 } CellNode (40 @ 81) (20)Px23y35 { Px24y35, Px22y35, Px23y34 } CellNode (23 @ 35) (20)Px26y67 { Px26y66, Px27y67, Px25y67 } CellNode (26 @ 67) (20)Px91y80 { Px91y79, Px92y80, Px90y80, Px91y81 } CellNode (91 @ 80) (20)Px60y23 { Px60y24, Px59y23, Px61y23, Px60y22 } CellNode (60 @ 23) (20)Px74y34 { Px73y34, Px75y34, Px74y33, Px74y35 } CellNode (74 @ 34) (20)Px14y68 { Px14y69, Px15y68, Px14y67, Px13y68 } CellNode (14 @ 68) (20)Px6y49 { Px5y49, Px7y49, Px6y50 } CellNode (6 @ 49) (20)Px28y79 { Px28y78, Px28y80, Px29y79, Px27y79 } CellNode (28 @ 79) (20)Px19y71 { Px20y71, Px19y70, Px19y72, Px18y71 } CellNode (19 @ 71) (20)Px65y67 { Px65y66, Px64y67, Px65y68, Px66y67 } CellNode (65 @ 67) (20)Px39y13 { Px40y13, Px38y13, Px39y12, Px39y14 } CellNode (39 @ 13) (20)Px79y78 { Px79y79, Px78y78, Px80y78, Px79y77 } CellNode (79 @ 78) (20)Px44y60 { Px44y61, Px45y60, Px43y60, Px44y59 } CellNode (44 @ 60) (20)Px53y68 { Px53y69, Px54y68, Px53y67, Px52y68 } CellNode (53 @ 68) (20)Px62y35 { Px63y35, Px61y35, Px62y36, Px62y34 } CellNode (62 @ 35) (20)Px32y61 { Px31y61, Px32y62, Px33y61, Px32y60 } CellNode (32 @ 61) (20)Px67y79 { Px67y78, Px67y80, Px68y79, Px66y79 } CellNode (67 @ 79) (20)Px41y69 { Px40y69, Px41y70, Px42y69, Px41y68 } CellNode (41 @ 69) (20)Px46y72 { Px47y72, Px45y72, Px46y73, Px46y71 } CellNode (46 @ 72) (20)Px20y62 { Px20y63, Px19y62, Px20y61, Px21y62 } CellNode (20 @ 62) (20)Px34y73 { Px34y72, Px34y74, Px33y73, Px35y73 } CellNode (34 @ 73) (20)Px66y14 { Px66y15, Px66y13, Px65y14 } CellNode (66 @ 14) (20)Px71y61 { Px70y61, Px71y62, Px72y61, Px71y60 } CellNode (71 @ 61) (20)Px80y69 { Px80y70, Px81y69, Px79y69, Px80y68 } CellNode (80 @ 69) (20)Px3y76 { Px3y77, Px4y76, Px2y76, Px3y75 } CellNode (3 @ 76) (20)Px59y9 { Px59y10, Px59y8, Px60y9, Px58y9 } CellNode (59 @ 9) (20)Px85y72 { Px85y73, Px84y72, Px86y72, Px85y71 } CellNode (85 @ 72) (20)Px42y16 { Px41y16, Px43y16, Px42y15 } CellNode (42 @ 16) (20)Px54y15 { Px55y15, Px54y14, Px54y16, Px53y15 } CellNode (54 @ 15) (20)Px56y6 { Px56y7, Px57y6, Px56y5, Px55y6 } CellNode (56 @ 6) (20)Px59y59 { Px59y60, Px60y59, Px59y58, Px58y59 } CellNode (59 @ 59) (20)Px30y17 { Px30y16, Px31y17, Px29y17, Px30y18 } CellNode (30 @ 17) (20)Px38y52 { Px37y52, Px38y51, Px38y53, Px39y52 } CellNode (38 @ 52) (20)Px33y49 { Px34y49, Px32y49, Px33y48, Px33y50 } CellNode (33 @ 49) (20)Px53y3 { Px53y4, Px53y2, Px54y3, Px52y3 } CellNode (53 @ 3) (20)Px26y53 { Px26y54, Px27y53, Px25y53, Px26y52 } CellNode (26 @ 53) (20)Px63y41 { Px64y41, Px62y41, Px63y40, Px63y42 } CellNode (63 @ 41) (20)Px77y52 { Px76y52, Px77y51, Px78y52, Px77y53 } CellNode (77 @ 52) (20)Px72y49 { Px73y49, Px72y48, Px71y49, Px72y50 } CellNode (72 @ 49) (20)Px51y42 { Px51y43, Px52y42, Px51y41, Px50y42 } CellNode (51 @ 42) (20)Px9y67 { Px10y67, Px9y68, Px8y67, Px9y66 } CellNode (9 @ 67) (20)Px65y53 { Px65y54, Px64y53, Px66y53, Px65y52 } CellNode (65 @ 53) (20)Px53y54 { Px53y55, Px52y54, Px54y54, Px53y53 } CellNode (53 @ 54) (20)Px41y55 { Px40y55, Px41y56, Px41y54, Px42y55 } CellNode (41 @ 55) (20)Px18y33 { Px18y32, Px18y34, Px19y33, Px17y33 } CellNode (18 @ 33) (20)Px1y50 { Px2y50, Px1y51 } CellNode (1 @ 50) (20)Px23y80 { Px22y80, Px23y79, Px23y81, Px24y80 } CellNode (23 @ 80) (20)Px69y32 { Px69y33, Px70y32, Px68y32, Px69y31 } CellNode (69 @ 32) (20)Px11y81 { Px11y82, Px12y81, Px11y80, Px10y81 } CellNode (11 @ 81) (20)Px3y62 { Px2y62, Px3y61, Px4y62 } CellNode (3 @ 62) (20)Px57y33 { Px56y33, Px57y34, Px58y33, Px57y32 } CellNode (57 @ 33) (20)Px62y80 { Px61y80, Px62y79, Px62y81, Px63y80 } CellNode (62 @ 80) (20)Px45y34 { Px45y35, Px45y33, Px44y34, Px46y34 } CellNode (45 @ 34) (20)Px59y45 { Px59y44, Px60y45, Px59y46, Px58y45 } CellNode (59 @ 45) (20)Px50y81 { Px50y82, Px49y81, Px51y81, Px50y80 } CellNode (50 @ 81) (20)Px41y7 { Px40y7, Px41y8, Px41y6, Px42y7 } CellNode (41 @ 7) (20)Px48y3 { Px47y3, Px48y4, Px49y3, Px48y2 } CellNode (48 @ 3) (20)Px33y35 { Px34y35, Px33y36, Px33y34, Px32y35 } CellNode (33 @ 35) (20)Px70y23 { Px70y24, Px70y22, Px69y23 } CellNode (70 @ 23) (20)Px29y71 { Px30y71, Px29y70, Px28y71, Px29y72 } CellNode (29 @ 71) (20)Px38y79 { Px39y79, Px37y79, Px38y78, Px38y80 } CellNode (38 @ 79) (20)Px72y35 { Px73y35, Px71y35, Px72y36, Px72y34 } CellNode (72 @ 35) (20)Px17y72 { Px17y73, Px18y72, Px17y71, Px16y72 } CellNode (17 @ 72) (20)Px12y69 { Px11y69, Px12y70, Px13y69, Px12y68 } CellNode (12 @ 69) (20)Px89y78 { Px89y79, Px90y78, Px89y77, Px88y78 } CellNode (89 @ 78) (20)Px60y36 { Px59y36, Px60y35, Px60y37, Px61y36 } CellNode (60 @ 36) (20)Px68y71 { Px69y71, Px67y71, Px68y70, Px68y72 } CellNode (68 @ 71) (20)Px37y14 { Px37y15, Px38y14, Px36y14, Px37y13 } CellNode (37 @ 14) (20)Px77y79 { Px76y79, Px77y78, Px77y80, Px78y79 } CellNode (77 @ 79) (20)Px56y72 { Px57y72, Px55y72, Px56y73 } CellNode (56 @ 72) (20)Px51y69 { Px51y68, Px51y70, Px52y69, Px50y69 } CellNode (51 @ 69) (20)Px30y62 { Px31y62, Px30y61, Px29y62, Px30y63 } CellNode (30 @ 62) (20)Px44y73 { Px44y72, Px45y73, Px43y73, Px44y74 } CellNode (44 @ 73) (20)Px81y61 { Px80y61, Px81y62, Px81y60 } CellNode (81 @ 61) (20)Px27y27 { Px26y27, Px27y28, Px27y26, Px28y27 } CellNode (27 @ 27) (20)Px32y74 { Px32y75, Px33y74, Px31y74, Px32y73 } CellNode (32 @ 74) (20)Px64y15 { Px65y15, Px63y15, Px64y14, Px64y16 } CellNode (64 @ 15) (20)Px6y80 { Px6y81, Px7y80, Px5y80, Px6y79 } CellNode (6 @ 80) (20)Px1y77 { Px2y77, Px1y76, Px1y78 } CellNode (1 @ 77) (20)Px66y27 { Px67y27, Px66y28, Px66y26 } CellNode (66 @ 27) (20)Px69y59 { Px69y60, Px70y59, Px69y58, Px68y59 } CellNode (69 @ 59) (20)Px71y74 { Px71y75, Px70y74, Px72y74, Px71y73 } CellNode (71 @ 74) (20)Px48y52 { Px48y51, Px47y52, Px48y53, Px49y52 } CellNode (48 @ 52) (20)Px36y7 { Px35y7, Px36y8, Px36y6, Px37y7 } CellNode (36 @ 7) (20)Px20y75 { Px21y75, Px19y75, Px20y76, Px20y74 } CellNode (20 @ 75) (20)Px83y73 { Px83y72, Px84y73, Px82y73, Px83y74 } CellNode (83 @ 73) (20)Px36y53 { Px36y54, Px37y53, Px36y52, Px35y53 } CellNode (36 @ 53) (20)Px40y17 { Px40y16, Px40y18, Px41y17, Px39y17 } CellNode (40 @ 17) (20)Px52y16 { Px52y17, Px53y16, Px52y15, Px51y16 } CellNode (52 @ 16) (20)Px24y54 { Px24y53, Px24y55, Px25y54, Px23y54 } CellNode (24 @ 54) (20)Px38y65 { Px38y66, Px37y65, Px39y65, Px38y64 } CellNode (38 @ 65) (20)Px75y53 { Px75y54, Px76y53, Px74y53, Px75y52 } CellNode (75 @ 53) (20)Px7y68 { Px8y68, Px6y68, Px7y67, Px7y69 } CellNode (7 @ 68) (20)Px63y54 { Px63y53, Px64y54, Px63y55, Px62y54 } CellNode (63 @ 54) (20)Px77y65 { Px77y66, Px78y65, Px76y65, Px77y64 } CellNode (77 @ 65) (20)Px51y55 { Px52y55, Px50y55, Px51y54, Px51y56 } CellNode (51 @ 55) (20)Px16y34 { Px17y34, Px16y33, Px15y34, Px16y35 } CellNode (16 @ 34) (20)Px55y34 { Px56y34, Px55y33, Px54y34, Px55y35 } CellNode (55 @ 34) (20)Px69y45 { Px69y44, Px68y45, Px69y46, Px70y45 } CellNode (69 @ 45) (20)Px43y35 { Px43y36, Px44y35, Px42y35, Px43y34 } CellNode (43 @ 35) (20)Px57y46 { Px58y46, Px56y46, Px57y47, Px57y45 } CellNode (57 @ 46) (20)Px31y36 { Px31y35, Px30y36, Px32y36, Px31y37 } CellNode (31 @ 36) (20)Px45y47 { Px46y47, Px44y47, Px45y48, Px45y46 } CellNode (45 @ 47) (20)Px48y79 { Px49y79, Px47y79, Px48y78, Px48y80 } CellNode (48 @ 79) (20)Px27y72 { Px27y73, Px28y72, Px26y72, Px27y71 } CellNode (27 @ 72) (20)Px70y36 { Px69y36, Px70y35, Px70y37, Px71y36 } CellNode (70 @ 36) (20)Px15y73 { Px15y72, Px14y73, Px15y74, Px16y73 } CellNode (15 @ 73) (20)Px7y54 { Px7y55, Px6y54, Px8y54, Px7y53 } CellNode (7 @ 54) (20)Px87y79 { Px88y79, Px87y78, Px86y79, Px87y80 } CellNode (87 @ 79) (20)Px63y40 { Px62y40, Px63y39, Px63y41, Px64y40 } CellNode (63 @ 40) (20)Px29y84 { Px30y84, Px28y84, Px29y83 } CellNode (29 @ 84) (20)Px66y72 { Px66y73, Px67y72, Px65y72, Px66y71 } CellNode (66 @ 72) (20)Px54y73 { Px53y73, Px54y72, Px54y74, Px55y73 } CellNode (54 @ 73) (20)Px68y84 { Px68y83, Px69y84, Px67y84 } CellNode (68 @ 84) (20)Px37y27 { Px37y26, Px37y28, Px36y27 } CellNode (37 @ 27) (20)Px42y74 { Px43y74, Px42y75, Px41y74, Px42y73 } CellNode (42 @ 74) (20)Px25y28 { Px25y29, Px24y28, Px26y28, Px25y27 } CellNode (25 @ 28) (20)Px30y75 { Px30y76, Px29y75, Px31y75, Px30y74 } CellNode (30 @ 75) (20)Px93y73 { Px92y73, Px94y73, Px93y74 } CellNode (93 @ 73) (20)Px62y16 { Px62y17, Px63y16, Px62y15, Px61y16 } CellNode (62 @ 16) (20)Px81y74 { Px82y74, Px81y75, Px81y73, Px80y74 } CellNode (81 @ 74) (20)Px50y17 { Px49y17, Px50y16, Px50y18, Px51y17 } CellNode (50 @ 17) (20)Px64y28 { Px63y28, Px65y28, Px64y29 } CellNode (64 @ 28) (20)Px4y81 { Px4y80, Px3y81, Px4y82, Px5y81 } CellNode (4 @ 81) (20)Px55y20 { Px56y20, Px54y20 } CellNode (55 @ 20) (20)Px52y29 { Px52y28, Px52y30, Px53y29, Px51y29 } CellNode (52 @ 29) (20)Px31y22 { Px32y22, Px30y22, Px31y23, Px31y21 } CellNode (31 @ 22) (20)Px34y54 { Px33y54, Px34y55, Px35y54, Px34y53 } CellNode (34 @ 54) (20)Px44y9 { Px43y9, Px44y10, Px45y9 } CellNode (44 @ 9) (20)Px48y65 { Px49y65, Px48y66, Px47y65, Px48y64 } CellNode (48 @ 65) (20)Px22y55 { Px23y55, Px21y55, Px22y54, Px22y56 } CellNode (22 @ 55) (20)Px36y66 { Px36y65, Px37y66, Px35y66, Px36y67 } CellNode (36 @ 66) (20)Px70y22 { Px70y23, Px70y21, Px69y22 } CellNode (70 @ 22) (20)Px10y56 { Px9y56, Px10y57, Px11y56, Px10y55 } CellNode (10 @ 56) (20)Px73y54 { Px73y53, Px73y55, Px74y54, Px72y54 } CellNode (73 @ 54) (20)Px5y69 { Px5y70, Px6y69, Px5y68, Px4y69 } CellNode (5 @ 69) (20)Px24y67 { Px25y67, Px24y66, Px23y67 } CellNode (24 @ 67) (20)Px49y12 { Px48y12, Px50y12, Px49y11, Px49y13 } CellNode (49 @ 12) (20)Px75y66 { Px75y65, Px75y67, Px74y66, Px76y66 } CellNode (75 @ 66) (20)Px63y67 { Px63y68, Px64y67, Px62y67, Px63y66 } CellNode (63 @ 67) (20)Px42y60 { Px42y59, Px43y60, Px41y60, Px42y61 } CellNode (42 @ 60) (20)Px28y46 { Px28y47, Px29y46, Px27y46, Px28y45 } CellNode (28 @ 46) (20)Px62y4 { Px63y4, Px62y3, Px61y4, Px62y5 } CellNode (62 @ 4) (20)Px67y46 { Px67y47, Px68y46, Px67y45, Px66y46 } CellNode (67 @ 46) (20)Px41y36 { Px42y36, Px41y35, Px40y36, Px41y37 } CellNode (41 @ 36) (20)Px55y47 { Px55y46, Px56y47, Px55y48, Px54y47 } CellNode (55 @ 47) (20)Px34y40 { Px35y40, Px33y40, Px34y39, Px34y41 } CellNode (34 @ 40) (20)Px43y48 { Px44y48, Px42y48, Px43y47, Px43y49 } CellNode (43 @ 48) (20)Px31y49 { Px32y49, Px30y49, Px31y48, Px31y50 } CellNode (31 @ 49) (20)Px39y84 { Px38y84, Px40y84, Px39y83 } CellNode (39 @ 84) (20)Px73y40 { Px72y40, Px74y40, Px73y39, Px73y41 } CellNode (73 @ 40) (20)Px13y74 { Px13y75, Px14y74, Px13y73, Px12y74 } CellNode (13 @ 74) (20)Px5y55 { Px5y54, Px5y56, Px4y55, Px6y55 } CellNode (5 @ 55) (20)Px59y26 { Px60y26, Px59y27, Px59y25 } CellNode (59 @ 26) (20)Px61y41 { Px61y42, Px62y41, Px60y41, Px61y40 } CellNode (61 @ 41) (20)Px70y49 { Px71y49, Px69y49, Px70y48, Px70y50 } CellNode (70 @ 49) (20)Px78y84 { Px79y84, Px77y84, Px78y83 } CellNode (78 @ 84) (20)Px47y27 { Px47y28, Px47y26, Px46y27 } CellNode (47 @ 27) (20)Px26y20 { Px26y21, Px27y20, Px26y19 } CellNode (26 @ 20) (20)Px52y74 { Px52y75, Px53y74, Px52y73, Px51y74 } CellNode (52 @ 74) (20)Px35y28 { Px35y29, Px36y28, Px35y27, Px34y28 } CellNode (35 @ 28) (20)Px49y39 { Px50y39, Px48y39, Px49y38, Px49y40 } CellNode (49 @ 39) (20)Px40y75 { Px40y74, Px40y76, Px41y75, Px39y75 } CellNode (40 @ 75) (20)Px28y32 { Px28y33, Px27y32, Px29y32, Px28y31 } CellNode (28 @ 32) (20)Px23y29 { Px23y28, Px22y29, Px23y30, Px24y29 } CellNode (23 @ 29) (20)Px65y20 { Px65y19, Px65y21, Px66y20, Px64y20 } CellNode (65 @ 20) (20)Px91y74 { Px91y75, Px92y74, Px90y74, Px91y73 } CellNode (91 @ 74) (20)Px57y4 { Px56y4, Px57y5, Px58y4, Px57y3 } CellNode (57 @ 4) (20)Px19y65 { Px19y66, Px20y65, Px18y65, Px19y64 } CellNode (19 @ 65) (20)Px21y80 { Px22y80, Px20y80, Px21y81, Px21y79 } CellNode (21 @ 80) (20)Px53y21 { Px53y20, Px53y22, Px54y21 } CellNode (53 @ 21) (20)Px62y29 { Px61y29, Px62y28, Px62y30, Px63y29 } CellNode (62 @ 29) (20)Px54y1 { Px53y1, Px54y2, Px55y1 } CellNode (54 @ 1) (20)Px41y22 { Px41y23, Px42y22, Px40y22 } CellNode (41 @ 22) (20)Px2y82 { Px2y83, Px3y82, Px1y82, Px2y81 } CellNode (2 @ 82) (20)Px67y32 { Px67y33, Px66y32, Px68y32, Px67y31 } CellNode (67 @ 32) (20)Px58y65 { Px59y65 } CellNode (58 @ 65) (20)Px46y66 { Px45y66, Px46y65, Px46y67, Px47y66 } CellNode (46 @ 66) (20)Px20y56 { Px20y57, Px21y56, Px20y55, Px19y56 } CellNode (20 @ 56) (20)Px34y67 { Px35y67, Px34y68, Px34y66, Px33y67 } CellNode (34 @ 67) (20)Px39y70 { Px38y70, Px39y69, Px39y71, Px40y70 } CellNode (39 @ 70) (20)Px22y68 { Px22y67, Px21y68, Px22y69 } CellNode (22 @ 68) (20)Px8y73 { Px8y74, Px9y73, Px8y72, Px7y73 } CellNode (8 @ 73) (20)Px59y12 { Px60y12, Px59y11, Px58y12, Px59y13 } CellNode (59 @ 12) (20)Px10y69 { Px10y68, Px10y70, Px9y69, Px11y69 } CellNode (10 @ 69) (20)Px73y67 { Px73y68, Px72y67, Px74y67, Px73y66 } CellNode (73 @ 67) (20)Px78y70 { Px77y70, Px78y69, Px79y70, Px78y71 } CellNode (78 @ 70) (20)Px47y13 { Px47y14, Px48y13, Px46y13, Px47y12 } CellNode (47 @ 13) (20)Px61y68 { Px61y69, Px62y68, Px60y68, Px61y67 } CellNode (61 @ 68) (20)Px35y14 { Px34y14, Px35y13, Px36y14, Px35y15 } CellNode (35 @ 14) (20)Px40y61 { Px41y61, Px39y61, Px40y60, Px40y62 } CellNode (40 @ 61) (20)Px52y60 { Px52y59, Px53y60, Px52y61, Px51y60 } CellNode (52 @ 60) (20)Px38y46 { Px38y47, Px39y46, Px37y46, Px38y45 } CellNode (38 @ 46) (20)Px26y47 { Px26y48, Px26y46, Px27y47 } CellNode (26 @ 47) (20)Px28y59 { Px28y58, Px28y60, Px29y59, Px27y59 } CellNode (28 @ 59) (20)Px49y1 { Px48y1, Px49y2, Px50y1 } CellNode (49 @ 1) (20)Px65y47 { Px65y46, Px65y48, Px66y47, Px64y47 } CellNode (65 @ 47) (20)Px44y40 { Px45y40, Px43y40, Px44y39, Px44y41 } CellNode (44 @ 40) (20)Px79y58 { Px79y59, Px78y58, Px80y58, Px79y57 } CellNode (79 @ 58) (20)Px58y51 { Px58y50, Px58y52, Px57y51, Px59y51 } CellNode (58 @ 51) (20)Px53y48 { Px54y48, Px53y47, Px52y48, Px53y49 } CellNode (53 @ 48) (20)Px32y41 { Px32y42, Px33y41, Px31y41, Px32y40 } CellNode (32 @ 41) (20)Px67y59 { Px67y58, Px67y60, Px68y59, Px66y59 } CellNode (67 @ 59) (20)Px41y49 { Px41y50, Px42y49, Px41y48, Px40y49 } CellNode (41 @ 49) (20)Px49y84 { Px48y84, Px50y84, Px49y83 } CellNode (49 @ 84) (20)Px46y52 { Px46y53, Px45y52, Px47y52, Px46y51 } CellNode (46 @ 52) (20)Px3y56 { Px4y56, Px3y57, Px3y55, Px2y56 } CellNode (3 @ 56) (20)Px88y84 { Px88y83, Px89y84, Px87y84 } CellNode (88 @ 84) (20)Px45y28 { Px45y27, Px45y29, Px46y28, Px44y28 } CellNode (45 @ 28) (20)Px59y39 { Px60y39, Px58y39, Px59y38, Px59y40 } CellNode (59 @ 39) (20)Px24y21 { Px23y21, Px24y22, Px25y21 } CellNode (24 @ 21) (20)Px33y29 { Px34y29, Px33y28, Px32y29, Px33y30 } CellNode (33 @ 29) (20)Px38y32 { Px38y31, Px38y33, Px39y32, Px37y32 } CellNode (38 @ 32) (20)Px26y33 { Px25y33, Px26y34, Px26y32, Px27y33 } CellNode (26 @ 33) (20)Px31y80 { Px32y80, Px30y80, Px31y81, Px31y79 } CellNode (31 @ 80) (20)Px63y21 { Px64y21, Px63y20, Px62y21, Px63y22 } CellNode (63 @ 21) (20)Px72y29 { Px73y29, Px72y28, Px71y29, Px72y30 } CellNode (72 @ 29) (20)Px51y22 { Px52y22, Px51y23 } CellNode (51 @ 22) (20)Px65y33 { Px64y33, Px66y33, Px65y32, Px65y34 } CellNode (65 @ 33) (20)Px70y80 { Px71y80, Px69y80, Px70y81, Px70y79 } CellNode (70 @ 80) (20)Px19y78 { Px20y78, Px19y77, Px19y79, Px18y78 } CellNode (19 @ 78) (20)Px56y66 { Px56y65, Px56y67, Px55y66 } CellNode (56 @ 66) (20)Px49y70 { Px50y70, Px48y70, Px49y69, Px49y71 } CellNode (49 @ 70) (20)Px44y67 { Px44y68, Px45y67, Px43y67, Px44y66 } CellNode (44 @ 67) (20)Px23y60 { Px23y59, Px23y61, Px24y60, Px22y60 } CellNode (23 @ 60) (20)Px37y71 { Px38y71, Px36y71, Px37y72, Px37y70 } CellNode (37 @ 71) (20)Px32y68 { Px32y67, Px32y69, Px33y68, Px31y68 } CellNode (32 @ 68) (20)Px11y61 { Px12y61, Px11y60, Px10y61, Px11y62 } CellNode (11 @ 61) (20)Px46y79 { Px47y79, Px45y79, Px46y78, Px46y80 } CellNode (46 @ 79) (20)Px57y13 { Px57y14, Px58y13 } CellNode (57 @ 13) (20)Px20y69 { Px19y69, Px20y68, Px20y70, Px21y69 } CellNode (20 @ 69) (20)Px62y60 { Px62y59, Px62y61, Px63y60, Px61y60 } CellNode (62 @ 60) (20)Px97y78 { Px96y78, Px97y79, Px97y77 } CellNode (97 @ 78) (20)Px71y68 { Px70y68, Px72y68, Px71y69, Px71y67 } CellNode (71 @ 68) (20)Px83y67 { Px83y68, Px82y67, Px83y66 } CellNode (83 @ 67) (20)Px50y61 { Px49y61, Px50y62, Px50y60, Px51y61 } CellNode (50 @ 61) (20)Px85y79 { Px86y79, Px84y79, Px85y78, Px85y80 } CellNode (85 @ 79) (20)Px6y74 { Px7y74, Px6y73, Px5y74, Px6y75 } CellNode (6 @ 74) (20)Px64y72 { Px64y71, Px65y72, Px63y72, Px64y73 } CellNode (64 @ 72) (20)Px76y71 { Px77y71, Px75y71, Px76y72, Px76y70 } CellNode (76 @ 71) (20)Px33y15 { Px34y15, Px32y15, Px33y16, Px33y14 } CellNode (33 @ 15) (20)Px25y72 { Px25y71, Px25y73, Px26y72, Px24y72 } CellNode (25 @ 72) (20)Px29y51 { Px28y51, Px29y50, Px29y52, Px30y51 } CellNode (29 @ 51) (20)Px45y14 { Px44y14, Px45y13, Px46y14, Px45y15 } CellNode (45 @ 14) (20)Px38y59 { Px38y58, Px37y59, Px38y60, Px39y59 } CellNode (38 @ 59) (20)Px60y16 { Px60y15, Px61y16, Px59y16, Px60y17 } CellNode (60 @ 16) (20)Px63y48 { Px64y48, Px62y48, Px63y47, Px63y49 } CellNode (63 @ 48) (20)Px68y51 { Px67y51, Px68y50, Px68y52, Px69y51 } CellNode (68 @ 51) (20)Px42y41 { Px42y42, Px43y41, Px41y41, Px42y40 } CellNode (42 @ 41) (20)Px77y59 { Px76y59, Px77y58, Px77y60, Px78y59 } CellNode (77 @ 59) (20)Px51y49 { Px51y50, Px52y49, Px50y49, Px51y48 } CellNode (51 @ 49) (20)Px56y52 { Px56y53, Px57y52, Px55y52, Px56y51 } CellNode (56 @ 52) (20)Px30y42 { Px31y42, Px30y41, Px29y42, Px30y43 } CellNode (30 @ 42) (20)Px44y53 { Px45y53, Px43y53, Px44y54, Px44y52 } CellNode (44 @ 53) (20)Px32y54 { Px31y54, Px33y54, Px32y53, Px32y55 } CellNode (32 @ 54) (20)Px1y57 { Px1y56, Px1y58, Px2y57 } CellNode (1 @ 57) (20)Px6y60 { Px6y61, Px5y60, Px7y60, Px6y59 } CellNode (6 @ 60) (20)Px71y54 { Px70y54, Px71y55, Px71y53, Px72y54 } CellNode (71 @ 54) (20)Px48y32 { Px47y32, Px48y33, Px49y32, Px48y31 } CellNode (48 @ 32) (20)Px3y69 { Px3y68, Px3y70, Px4y69, Px2y69 } CellNode (3 @ 69) (20)Px36y33 { Px37y33, Px35y33, Px36y32, Px36y34 } CellNode (36 @ 33) (20)Px41y80 { Px41y81, Px42y80, Px40y80, Px41y79 } CellNode (41 @ 80) (20)Px24y34 { Px25y34, Px24y35, Px24y33, Px23y34 } CellNode (24 @ 34) (20)Px75y33 { Px75y34, Px75y32, Px74y33, Px76y33 } CellNode (75 @ 33) (20)Px80y80 { Px80y81, Px79y80, Px81y80, Px80y79 } CellNode (80 @ 80) (20)Px29y78 { Px30y78, Px28y78, Px29y77, Px29y79 } CellNode (29 @ 78) (20)Px63y34 { Px63y35, Px64y34, Px63y33, Px62y34 } CellNode (63 @ 34) (20)Px45y7 { Px44y7, Px45y8, Px46y7, Px45y6 } CellNode (45 @ 7) (20)Px17y79 { Px17y80, Px18y79, Px17y78, Px16y79 } CellNode (17 @ 79) (20)Px42y4 { Px42y5, Px41y4, Px43y4, Px42y3 } CellNode (42 @ 4) (20)Px51y35 { Px52y35, Px51y34, Px51y36, Px50y35 } CellNode (51 @ 35) (20)Px68y78 { Px69y78, Px68y77, Px67y78, Px68y79 } CellNode (68 @ 78) (20)Px42y68 { Px41y68, Px42y69, Px43y68, Px42y67 } CellNode (42 @ 68) (20)Px47y71 { Px47y72, Px48y71, Px46y71, Px47y70 } CellNode (47 @ 71) (20)Px21y61 { Px22y61, Px21y60, Px20y61, Px21y62 } CellNode (21 @ 61) (20)Px56y79 { Px56y80, Px57y79, Px55y79, Px56y78 } CellNode (56 @ 79) (20)Px30y69 { Px30y70, Px30y68, Px31y69 } CellNode (30 @ 69) (20)Px35y72 { Px34y72, Px35y71, Px35y73, Px36y72 } CellNode (35 @ 72) (20)Px18y26 { Px18y27, Px17y26, Px18y25, Px19y26 } CellNode (18 @ 26) (20)Px81y68 { Px80y68, Px81y69, Px82y68, Px81y67 } CellNode (81 @ 68) (20)Px4y75 { Px4y76, Px5y75, Px3y75, Px4y74 } CellNode (4 @ 75) (20)Px69y25 { Px70y25, Px68y25, Px69y26, Px69y24 } CellNode (69 @ 25) (20)Px23y73 { Px24y73, Px23y74, Px22y73, Px23y72 } CellNode (23 @ 73) (20)Px11y74 { Px11y75, Px12y74, Px10y74, Px11y73 } CellNode (11 @ 74) (20)Px74y72 { Px74y71, Px75y72, Px73y72, Px74y73 } CellNode (74 @ 72) (20)Px57y26 { Px56y26, Px57y25 } CellNode (57 @ 26) (20)Px86y71 { Px86y72, Px87y71, Px85y71, Px86y70 } CellNode (86 @ 71) (20)Px62y73 { Px63y73, Px61y73, Px62y74, Px62y72 } CellNode (62 @ 73) (20)Px39y51 { Px39y50, Px38y51, Px39y52, Px40y51 } CellNode (39 @ 51) (20)Px45y27 { Px45y28, Px46y27, Px44y27, Px45y26 } CellNode (45 @ 27) (20)Px31y16 { Px31y15, Px30y16, Px32y16, Px31y17 } CellNode (31 @ 16) (20)Px50y74 { Px50y75, Px49y74, Px51y74, Px50y73 } CellNode (50 @ 74) (20)Px27y52 { Px27y53, Px28y52, Px26y52, Px27y51 } CellNode (27 @ 52) (20)Px43y15 { Px43y16, Px44y15, Px43y14, Px42y15 } CellNode (43 @ 15) (20)Px60y61 { Px61y61, Px59y61, Px60y60, Px60y62 } CellNode (60 @ 61) (20)Px48y59 { Px48y58, Px47y59, Px48y60, Px49y59 } CellNode (48 @ 59) (20)Px95y79 { Px95y80, Px96y79, Px94y79, Px95y78 } CellNode (95 @ 79) (20)Px29y64 { Px29y65, Px30y64, Px28y64, Px29y63 } CellNode (29 @ 64) (20)Px66y52 { Px66y53, Px67y52, Px66y51, Px65y52 } CellNode (66 @ 52) (20)Px17y65 { Px17y64, Px17y66, Px18y65, Px16y65 } CellNode (17 @ 65) (20)Px54y53 { Px53y53, Px54y54, Px55y53, Px54y52 } CellNode (54 @ 53) (20)Px68y64 { Px68y65, Px67y64, Px69y64, Px68y63 } CellNode (68 @ 64) (20)Px42y54 { Px42y55, Px42y53, Px41y54, Px43y54 } CellNode (42 @ 54) (20)Px30y55 { Px31y55, Px29y55, Px30y56, Px30y54 } CellNode (30 @ 55) (20)Px4y61 { Px4y60, Px3y61, Px4y62, Px5y61 } CellNode (4 @ 61) (20)Px46y33 { Px47y33, Px45y33, Px46y32, Px46y34 } CellNode (46 @ 33) (20)Px58y2 { Px58y3, Px57y2, Px58y1, Px59y2 } CellNode (58 @ 2) (20)Px34y34 { Px34y35, Px35y34, Px33y34, Px34y33 } CellNode (34 @ 34) (20)Px48y45 { Px48y46, Px47y45, Px49y45, Px48y44 } CellNode (48 @ 45) (20)Px22y35 { Px23y35, Px22y34, Px21y35 } CellNode (22 @ 35) (20)Px36y46 { Px37y46, Px36y47, Px35y46, Px36y45 } CellNode (36 @ 46) (20)Px90y80 { Px90y81, Px91y80, Px89y80, Px90y79 } CellNode (90 @ 80) (20)Px73y34 { Px73y35, Px74y34, Px73y33, Px72y34 } CellNode (73 @ 34) (20)Px18y71 { Px18y72, Px19y71, Px17y71, Px18y70 } CellNode (18 @ 71) (20)Px5y49 { Px4y49, Px6y49, Px5y50 } CellNode (5 @ 49) (20)Px27y79 { Px27y80, Px28y79, Px27y78, Px26y79 } CellNode (27 @ 79) (20)Px61y35 { Px62y35, Px60y35, Px61y34, Px61y36 } CellNode (61 @ 35) (20)Px75y46 { Px75y47, Px74y46 } CellNode (75 @ 46) (20)Px78y78 { Px79y78, Px77y78, Px78y77, Px78y79 } CellNode (78 @ 78) (20)Px66y79 { Px66y80, Px67y79, Px65y79, Px66y78 } CellNode (66 @ 79) (20)Px45y72 { Px45y71, Px44y72, Px45y73, Px46y72 } CellNode (45 @ 72) (20)Px59y83 { Px60y83, Px58y83, Px59y84, Px59y82 } CellNode (59 @ 83) (20)Px28y26 { Px28y27, Px27y26, Px28y25, Px29y26 } CellNode (28 @ 26) (20)Px33y73 { Px33y74, Px34y73, Px33y72, Px32y73 } CellNode (33 @ 73) (20)Px47y84 { Px48y84, Px46y84, Px47y83 } CellNode (47 @ 84) (20)Px16y27 { Px16y28, Px15y27, Px17y27, Px16y26 } CellNode (16 @ 27) (20)Px21y74 { Px20y74, Px22y74, Px21y75, Px21y73 } CellNode (21 @ 74) (20)Px84y72 { Px83y72, Px84y71, Px84y73, Px85y72 } CellNode (84 @ 72) (20)Px67y26 { Px68y26, Px66y26, Px67y25, Px67y27 } CellNode (67 @ 26) (20)Px53y15 { Px53y16, Px54y15, Px53y14, Px52y15 } CellNode (53 @ 15) (20)Px72y73 { Px73y73, Px72y74, Px71y73, Px72y72 } CellNode (72 @ 73) (20)Px41y16 { Px41y15, Px40y16, Px41y17, Px42y16 } CellNode (41 @ 16) (20)Px86y84 { Px86y83, Px87y84, Px85y84 } CellNode (86 @ 84) (20)Px55y27 { Px54y27, Px55y28 } CellNode (55 @ 27) (20)Px34y20 { Px34y19, Px35y20 } CellNode (34 @ 20) (20)Px60y74 { Px60y75, Px59y74, Px61y74, Px60y73 } CellNode (60 @ 74) (20)Px43y28 { Px43y29, Px43y27, Px44y28, Px42y28 } CellNode (43 @ 28) (20)Px31y29 { Px32y29, Px30y29, Px31y28, Px31y30 } CellNode (31 @ 29) (20)Px39y64 { Px39y65, Px40y64, Px39y63, Px38y64 } CellNode (39 @ 64) (20)Px27y65 { Px27y64, Px28y65, Px27y66, Px26y65 } CellNode (27 @ 65) (20)Px61y21 { Px61y22, Px60y21, Px62y21, Px61y20 } CellNode (61 @ 21) (20)Px64y53 { Px64y52, Px64y54, Px65y53, Px63y53 } CellNode (64 @ 53) (20)Px15y66 { Px15y67, Px16y66, Px14y66, Px15y65 } CellNode (15 @ 66) (20)Px78y64 { Px78y65, Px79y64, Px78y63, Px77y64 } CellNode (78 @ 64) (20)Px52y54 { Px53y54, Px51y54, Px52y53, Px52y55 } CellNode (52 @ 54) (20)Px66y65 { Px66y64, Px66y66, Px65y65, Px67y65 } CellNode (66 @ 65) (20)Px49y19 { Px50y19, Px49y18 } CellNode (49 @ 19) (20)Px40y55 { Px40y56, Px39y55, Px41y55, Px40y54 } CellNode (40 @ 55) (20)Px54y66 { Px55y66, Px54y67, Px53y66, Px54y65 } CellNode (54 @ 66) (20)Px2y62 { Px2y61, Px1y62, Px3y62 } CellNode (2 @ 62) (20)Px4y74 { Px5y74, Px3y74, Px4y73, Px4y75 } CellNode (4 @ 74) (20)Px58y45 { Px58y46, Px59y45, Px57y45, Px58y44 } CellNode (58 @ 45) (20)Px46y46 { Px46y45, Px47y46, Px46y47, Px45y46 } CellNode (46 @ 46) (20)Px34y47 { Px33y47, Px34y48, Px34y46, Px35y47 } CellNode (34 @ 47) (20)Px71y35 { Px72y35, Px70y35, Px71y34, Px71y36 } CellNode (71 @ 35) (20)Px8y53 { Px9y53, Px8y54, Px8y52, Px7y53 } CellNode (8 @ 53) (20)Px10y49 { Px11y49, Px9y49, Px10y50 } CellNode (10 @ 49) (20)Px18y84 { Px17y84, Px18y83, Px19y84 } CellNode (18 @ 84) (20)Px52y40 { Px52y41, Px51y40, Px53y40, Px52y39 } CellNode (52 @ 40) (20)Px73y47 { Px74y47, Px72y47, Px73y48 } CellNode (73 @ 47) (20)Px61y48 { Px62y48, Px60y48, Px61y49, Px61y47 } CellNode (61 @ 48) (20)Px69y83 { Px69y84, Px70y83, Px69y82, Px68y83 } CellNode (69 @ 83) (20)Px40y41 { Px41y41, Px40y40, Px40y42, Px39y41 } CellNode (40 @ 41) (20)Px43y73 { Px43y74, Px44y73, Px43y72, Px42y73 } CellNode (43 @ 73) (20)Px57y84 { Px57y83, Px58y84, Px56y84 } CellNode (57 @ 84) (20)Px26y27 { Px26y28, Px27y27, Px26y26, Px25y27 } CellNode (26 @ 27) (20)Px31y74 { Px30y74, Px31y75, Px32y74, Px31y73 } CellNode (31 @ 74) (20)Px19y31 { Px20y31, Px18y31, Px19y32, Px19y30 } CellNode (19 @ 31) (20)Px28y39 { Px28y40, Px29y39, Px27y39, Px28y38 } CellNode (28 @ 39) (20)Px82y73 { Px82y74, Px83y73, Px81y73, Px82y72 } CellNode (82 @ 73) (20)Px96y84 { Px96y83, Px97y84, Px95y84 } CellNode (96 @ 84) (20)Px5y80 { Px6y80, Px4y80, Px5y79, Px5y81 } CellNode (5 @ 80) (20)Px70y74 { Px69y74, Px70y75, Px71y74, Px70y73 } CellNode (70 @ 74) (20)Px53y28 { Px53y27, Px52y28, Px54y28, Px53y29 } CellNode (53 @ 28) (20)Px58y31 { Px58y32, Px57y31, Px59y31, Px58y30 } CellNode (58 @ 31) (20)Px32y21 { Px32y20, Px31y21, Px32y22 } CellNode (32 @ 21) (20)Px67y39 { Px67y40, Px68y39, Px66y39, Px67y38 } CellNode (67 @ 39) (20)Px41y29 { Px42y29, Px40y29, Px41y28, Px41y30 } CellNode (41 @ 29) (20)Px49y64 { Px49y65, Px50y64, Px48y64, Px49y63 } CellNode (49 @ 64) (20)Px20y22 { Px20y23, Px19y22, Px21y22 } CellNode (20 @ 22) (20)Px51y5 { Px50y5, Px51y6, Px51y4, Px52y5 } CellNode (51 @ 5) (20)Px37y65 { Px36y65, Px37y64, Px37y66, Px38y65 } CellNode (37 @ 65) (20)Px25y66 { Px26y66, Px25y67, Px24y66, Px25y65 } CellNode (25 @ 66) (20)Px39y77 { Px39y78, Px39y76, Px40y77, Px38y77 } CellNode (39 @ 77) (20)Px18y70 { Px19y70, Px17y70, Px18y69, Px18y71 } CellNode (18 @ 70) (20)Px13y67 { Px14y67, Px12y67, Px13y68, Px13y66 } CellNode (13 @ 67) (20)Px59y19 { Px60y19, Px58y19, Px59y18, Px59y20 } CellNode (59 @ 19) (20)Px76y65 { Px75y65, Px76y64, Px76y66, Px77y65 } CellNode (76 @ 65) (20)Px38y12 { Px38y13, Px37y12, Px39y12, Px38y11 } CellNode (38 @ 12) (20)Px64y66 { Px64y67, Px65y66, Px64y65, Px63y66 } CellNode (64 @ 66) (20)Px50y55 { Px50y56, Px51y55, Px50y54, Px49y55 } CellNode (50 @ 55) (20)Px52y67 { Px53y67, Px51y67, Px52y68, Px52y66 } CellNode (52 @ 67) (20)Px31y60 { Px30y60, Px31y61, Px31y59, Px32y60 } CellNode (31 @ 60) (20)Px40y68 { Px40y69, Px39y68, Px40y67, Px41y68 } CellNode (40 @ 68) (20)Px65y13 { Px66y13, Px65y12, Px65y14, Px64y13 } CellNode (65 @ 13) (20)Px70y60 { Px69y60, Px70y61, Px70y59, Px71y60 } CellNode (70 @ 60) (20)Px19y58 { Px19y57, Px20y58, Px19y59, Px18y58 } CellNode (19 @ 58) (20)Px2y75 { Px2y74, Px2y76, Px1y75, Px3y75 } CellNode (2 @ 75) (20)Px56y46 { Px55y46, Px56y47, Px57y46, Px56y45 } CellNode (56 @ 46) (20)Px44y47 { Px45y47, Px43y47, Px44y46, Px44y48 } CellNode (44 @ 47) (20)Px46y5 { Px45y5, Px46y4 } CellNode (46 @ 5) (20)Px49y50 { Px49y49, Px49y51, Px48y50, Px50y50 } CellNode (49 @ 50) (20)Px58y58 { Px58y57, Px59y58, Px57y58, Px58y59 } CellNode (58 @ 58) (20)Px32y48 { Px32y49, Px33y48, Px31y48, Px32y47 } CellNode (32 @ 48) (20)Px37y51 { Px38y51, Px36y51, Px37y52, Px37y50 } CellNode (37 @ 51) (20)Px43y2 { Px43y3, Px42y2, Px43y1, Px44y2 } CellNode (43 @ 2) (20)Px46y59 { Px47y59, Px45y59, Px46y58, Px46y60 } CellNode (46 @ 59) (20)Px6y54 { Px6y53, Px5y54, Px6y55, Px7y54 } CellNode (6 @ 54) (20)Px28y84 { Px27y84, Px28y83, Px29y84 } CellNode (28 @ 84) (20)Px62y40 { Px62y41, Px63y40, Px61y40, Px62y39 } CellNode (62 @ 40) (20)Px71y48 { Px72y48, Px71y49, Px71y47, Px70y48 } CellNode (71 @ 48) (20)Px76y51 { Px76y52, Px75y51, Px77y51 } CellNode (76 @ 51) (20)Px50y41 { Px50y42, Px50y40, Px51y41, Px49y41 } CellNode (50 @ 41) (20)Px79y83 { Px79y84, Px80y83, Px78y83, Px79y82 } CellNode (79 @ 83) (20)Px8y66 { Px8y67, Px8y65, Px9y66, Px7y66 } CellNode (8 @ 66) (20)Px67y84 { Px68y84, Px67y83, Px66y84 } CellNode (67 @ 84) (20)Px29y31 { Px29y30, Px29y32, Px30y31, Px28y31 } CellNode (29 @ 31) (20)Px24y28 { Px25y28, Px23y28, Px24y27, Px24y29 } CellNode (24 @ 28) (20)Px38y39 { Px37y39, Px38y40, Px39y39, Px38y38 } CellNode (38 @ 39) (20)Px17y32 { Px16y32, Px18y32, Px17y31, Px17y33 } CellNode (17 @ 32) (20)Px54y20 { Px55y20, Px53y20, Px54y19, Px54y21 } CellNode (54 @ 20) (20)Px68y31 { Px67y31, Px68y32, Px69y31, Px68y30 } CellNode (68 @ 31) (20)Px63y28 { Px64y28, Px63y27, Px62y28, Px63y29 } CellNode (63 @ 28) (20)Px10y80 { Px10y79, Px9y80, Px10y81, Px11y80 } CellNode (10 @ 80) (20)Px51y29 { Px51y30, Px52y29, Px51y28, Px50y29 } CellNode (51 @ 29) (20)Px56y32 { Px55y32, Px56y33, Px56y31, Px57y32 } CellNode (56 @ 32) (20)Px30y22 { Px30y21, Px30y23, Px29y22, Px31y22 } CellNode (30 @ 22) (20)Px34y9 { Px33y9, Px34y10, Px35y9 } CellNode (34 @ 9) (20)Px44y33 { Px45y33, Px44y34, Px43y33, Px44y32 } CellNode (44 @ 33) (20)Px32y34 { Px31y34, Px32y33, Px32y35, Px33y34 } CellNode (32 @ 34) (20)Px35y66 { Px35y67, Px36y66, Px34y66, Px35y65 } CellNode (35 @ 66) (20)Px49y77 { Px50y77, Px49y76, Px49y78, Px48y77 } CellNode (49 @ 77) (20)Px23y67 { Px23y66, Px24y67, Px22y67 } CellNode (23 @ 67) (20)Px28y70 { Px29y70, Px28y71, Px27y70 } CellNode (28 @ 70) (20)Px69y19 { Px70y19, Px69y18, Px68y19, Px69y20 } CellNode (69 @ 19) (20)Px37y78 { Px37y79, Px36y78, Px38y78, Px37y77 } CellNode (37 @ 78) (20)Px11y68 { Px11y69, Px10y68, Px11y67, Px12y68 } CellNode (11 @ 68) (20)Px74y66 { Px74y67, Px75y66, Px74y65, Px73y66 } CellNode (74 @ 66) (20)Px16y71 { Px16y70, Px17y71, Px15y71, Px16y72 } CellNode (16 @ 71) (20)Px48y12 { Px48y13, Px49y12, Px47y12, Px48y11 } CellNode (48 @ 12) (20)Px62y67 { Px61y67, Px62y68, Px63y67, Px62y66 } CellNode (62 @ 67) (20)Px67y70 { Px68y70, Px66y70, Px67y71, Px67y69 } CellNode (67 @ 70) (20)Px36y13 { Px35y13, Px36y12, Px37y13, Px36y14 } CellNode (36 @ 13) (20)Px41y60 { Px42y60, Px40y60, Px41y59, Px41y61 } CellNode (41 @ 60) (20)Px50y68 { Px49y68, Px50y69, Px50y67, Px51y68 } CellNode (50 @ 68) (20)Px76y78 { Px76y79, Px75y78, Px77y78, Px76y77 } CellNode (76 @ 78) (20)Px25y79 { Px25y78, Px25y80, Px26y79, Px24y79 } CellNode (25 @ 79) (20)Px88y77 { Px88y78, Px88y76, Px89y77, Px87y77 } CellNode (88 @ 77) (20)Px80y60 { Px79y60, Px81y60, Px80y59, Px80y61 } CellNode (80 @ 60) (20)Px29y58 { Px29y57, Px28y58, Px29y59, Px30y58 } CellNode (29 @ 58) (20)Px63y14 { Px64y14, Px62y14, Px63y15, Px63y13 } CellNode (63 @ 14) (20)Px17y59 { Px18y59, Px17y58, Px16y59, Px17y60 } CellNode (17 @ 59) (20)Px51y15 { Px51y14, Px51y16, Px50y15, Px52y15 } CellNode (51 @ 15) (20)Px59y50 { Px58y50, Px59y49, Px59y51, Px60y50 } CellNode (59 @ 50) (20)Px33y40 { Px33y39, Px33y41, Px34y40, Px32y40 } CellNode (33 @ 40) (20)Px68y58 { Px67y58, Px68y57, Px69y58, Px68y59 } CellNode (68 @ 58) (20)Px47y51 { Px48y51, Px47y52, Px46y51, Px47y50 } CellNode (47 @ 51) (20)Px42y48 { Px42y49, Px43y48, Px42y47, Px41y48 } CellNode (42 @ 48) (20)Px56y59 { Px57y59, Px55y59, Px56y58, Px56y60 } CellNode (56 @ 59) (20)Px30y49 { Px31y49, Px29y49, Px30y48, Px30y50 } CellNode (30 @ 49) (20)Px35y52 { Px36y52, Px35y53, Px34y52, Px35y51 } CellNode (35 @ 52) (20)Px72y40 { Px72y39, Px72y41, Px73y40 } CellNode (72 @ 40) (20)Px4y55 { Px4y56, Px5y55, Px4y54, Px3y55 } CellNode (4 @ 55) (20)Px23y53 { Px22y53, Px23y54, Px24y53 } CellNode (23 @ 53) (20)Px60y41 { Px61y41, Px59y41, Px60y40, Px60y42 } CellNode (60 @ 41) (20)Px11y54 { Px11y55, Px11y53, Px10y54 } CellNode (11 @ 54) (20)Px74y52 { Px74y53, Px73y52, Px75y52, Px74y51 } CellNode (74 @ 52) (20)Px6y67 { Px6y68, Px7y67, Px5y67, Px6y66 } CellNode (6 @ 67) (20)Px62y53 { Px61y53, Px62y54, Px62y52, Px63y53 } CellNode (62 @ 53) (20)Px39y31 { Px38y31, Px39y32, Px40y31, Px39y30 } CellNode (39 @ 31) (20)Px48y39 { Px48y38, Px48y40, Px49y39, Px47y39 } CellNode (48 @ 39) (20)Px27y32 { Px28y32, Px26y32, Px27y31, Px27y33 } CellNode (27 @ 32) (20)Px15y33 { Px15y34, Px15y32, Px16y33 } CellNode (15 @ 33) (20)Px29y44 { Px29y45, Px30y44, Px28y44, Px29y43 } CellNode (29 @ 44) (20)Px20y80 { Px20y79, Px20y81, Px19y80, Px21y80 } CellNode (20 @ 80) (20)Px66y32 { Px67y32, Px65y32, Px66y31, Px66y33 } CellNode (66 @ 32) (20)Px40y22 { Px41y22, Px39y22, Px40y23 } CellNode (40 @ 22) (20)Px54y33 { Px55y33, Px54y34, Px53y33, Px54y32 } CellNode (54 @ 33) (20)Px68y44 { Px69y44, Px67y44, Px68y45, Px68y43 } CellNode (68 @ 44) (20)Px42y34 { Px41y34, Px42y33, Px42y35, Px43y34 } CellNode (42 @ 34) (20)Px30y35 { Px31y35, Px30y36, Px29y35, Px30y34 } CellNode (30 @ 35) (20)Px38y70 { Px38y69, Px38y71, Px39y70, Px37y70 } CellNode (38 @ 70) (20)Px47y78 { Px48y78, Px47y79, Px46y78, Px47y77 } CellNode (47 @ 78) (20)Px26y71 { Px26y70, Px25y71, Px26y72, Px27y71 } CellNode (26 @ 71) (20)Px21y68 { Px22y68, Px21y67, Px20y68, Px21y69 } CellNode (21 @ 68) (20)Px35y79 { Px35y78, Px35y80, Px36y79, Px34y79 } CellNode (35 @ 79) (20)Px46y13 { Px47y13, Px45y13, Px46y12, Px46y14 } CellNode (46 @ 13) (20)Px72y67 { Px71y67, Px72y68, Px73y67, Px72y66 } CellNode (72 @ 67) (20)Px51y60 { Px52y60, Px50y60, Px51y59, Px51y61 } CellNode (51 @ 60) (20)Px86y78 { Px87y78, Px86y79, Px85y78, Px86y77 } CellNode (86 @ 78) (20)Px60y68 { Px61y68, Px59y68, Px60y67, Px60y69 } CellNode (60 @ 68) (20)Px65y71 { Px65y70, Px64y71, Px66y71, Px65y72 } CellNode (65 @ 71) (20)Px74y79 { Px74y78, Px74y80, Px75y79, Px73y79 } CellNode (74 @ 79) (20)Px48y25 { Px47y25, Px48y26, Px48y24, Px49y25 } CellNode (48 @ 25) (20)Px53y72 { Px54y72, Px52y72, Px53y73 } CellNode (53 @ 72) (20)Px14y72 { Px15y72, Px14y73, Px13y72, Px14y71 } CellNode (14 @ 72) (20)Px36y26 { Px37y26, Px35y26, Px36y27, Px36y25 } CellNode (36 @ 26) (20)Px39y58 { Px39y57, Px38y58, Px39y59, Px40y58 } CellNode (39 @ 58) (20)Px41y73 { Px41y74, Px42y73, Px40y73, Px41y72 } CellNode (41 @ 73) (20)Px63y9 { Px63y8, Px64y9, Px63y10, Px62y9 } CellNode (63 @ 9) (20)Px77y70 { Px77y69, Px77y71, Px78y70, Px76y70 } CellNode (77 @ 70) (20)Px27y59 { Px28y59, Px27y58, Px26y59, Px27y60 } CellNode (27 @ 59) (20)Px61y15 { Px61y14, Px60y15, Px62y15, Px61y16 } CellNode (61 @ 15) (20)Px69y50 { Px68y50, Px69y49, Px69y51, Px70y50 } CellNode (69 @ 50) (20)Px60y6 { Px61y6, Px60y5, Px59y6, Px60y7 } CellNode (60 @ 6) (20)Px78y58 { Px78y57, Px77y58, Px78y59, Px79y58 } CellNode (78 @ 58) (20)Px80y73 { Px81y73, Px80y74, Px79y73, Px80y72 } CellNode (80 @ 73) (20)Px57y51 { Px57y52, Px58y51, Px57y50, Px56y51 } CellNode (57 @ 51) (20)Px3y80 { Px4y80, Px3y81, Px2y80, Px3y79 } CellNode (3 @ 80) (20)Px66y59 { Px67y59, Px65y59, Px66y58, Px66y60 } CellNode (66 @ 59) (20)Px34y14 { Px34y15, Px35y14, Px33y14, Px34y13 } CellNode (34 @ 14) (20)Px45y52 { Px45y51, Px45y53, Px46y52, Px44y52 } CellNode (45 @ 52) (20)Px59y63 { Px59y64, Px59y62, Px60y63 } CellNode (59 @ 63) (20)Px33y53 { Px34y53, Px33y52, Px32y53, Px33y54 } CellNode (33 @ 53) (20)Px47y64 { Px47y63, Px47y65, Px46y64, Px48y64 } CellNode (47 @ 64) (20)Px21y54 { Px21y55, Px20y54, Px22y54, Px21y53 } CellNode (21 @ 54) (20)Px72y53 { Px73y53, Px71y53, Px72y52, Px72y54 } CellNode (72 @ 53) (20)Px9y71 { Px9y72, Px8y71, Px9y70, Px10y71 } CellNode (9 @ 71) (20)Px4y68 { Px3y68, Px4y67, Px4y69, Px5y68 } CellNode (4 @ 68) (20)Px60y54 { Px61y54, Px60y53, Px59y54 } CellNode (60 @ 54) (20)Px25y33 { Px25y34, Px26y33, Px24y33, Px25y32 } CellNode (25 @ 33) (20)Px30y80 { Px30y79, Px30y81, Px31y80, Px29y80 } CellNode (30 @ 80) (20)Px58y9 { Px57y9, Px59y9, Px58y10, Px58y8 } CellNode (58 @ 9) (20)Px76y32 { Px75y32, Px76y33 } CellNode (76 @ 32) (20)Px39y44 { Px39y45, Px40y44, Px39y43, Px38y44 } CellNode (39 @ 44) (20)Px27y45 { Px27y46, Px26y45, Px28y45, Px27y44 } CellNode (27 @ 45) (20)Px55y6 { Px55y7, Px54y6, Px55y5, Px56y6 } CellNode (55 @ 6) (20)Px64y33 { Px64y34, Px65y33, Px63y33, Px64y32 } CellNode (64 @ 33) (20)Px18y78 { Px18y79, Px19y78, Px17y78, Px18y77 } CellNode (18 @ 78) (20)Px52y3 { Px51y3, Px52y4, Px52y2, Px53y3 } CellNode (52 @ 3) (20)Px52y34 { Px52y35, Px51y34, Px52y33 } CellNode (52 @ 34) (20)Px66y45 { Px67y45, Px65y45, Px66y46, Px66y44 } CellNode (66 @ 45) (20)Px40y35 { Px41y35, Px39y35, Px40y36, Px40y34 } CellNode (40 @ 35) (20)Px54y46 { Px55y46, Px53y46, Px54y45, Px54y47 } CellNode (54 @ 46) (20)Px57y78 { Px56y78, Px57y77, Px57y79 } CellNode (57 @ 78) (20)Px36y71 { Px35y71, Px36y70, Px36y72, Px37y71 } CellNode (36 @ 71) (20)Px19y25 { Px20y25, Px19y24, Px18y25, Px19y26 } CellNode (19 @ 25) (20)Px45y79 { Px45y78, Px44y79, Px45y80, Px46y79 } CellNode (45 @ 79) (20)Px24y72 { Px24y73, Px25y72, Px24y71, Px23y72 } CellNode (24 @ 72) (20)Px38y83 { Px37y83, Px38y82, Px39y83, Px38y84 } CellNode (38 @ 83) (20)Px96y78 { Px96y79, Px97y78, Px96y77, Px95y78 } CellNode (96 @ 78) (20)Px12y73 { Px12y72, Px13y73, Px12y74, Px11y73 } CellNode (12 @ 73) (20)Px75y71 { Px74y71, Px75y70, Px75y72, Px76y71 } CellNode (75 @ 71) (20)Px26y84 { Px25y84, Px26y83, Px27y84 } CellNode (26 @ 84) (20)Px89y82 { Px89y83, Px88y82, Px90y82, Px89y81 } CellNode (89 @ 82) (20)Px58y25 { Px57y25, Px59y25, Px58y24 } CellNode (58 @ 25) (20)Px63y72 { Px63y73, Px64y72, Px62y72, Px63y71 } CellNode (63 @ 72) (20)Px77y83 { Px78y83, Px77y82, Px77y84, Px76y83 } CellNode (77 @ 83) (20)Px46y26 { Px47y26, Px46y27, Px46y25, Px45y26 } CellNode (46 @ 26) (20)Px51y73 { Px51y72, Px52y73, Px51y74, Px50y73 } CellNode (51 @ 73) (20)Px32y15 { Px32y14, Px31y15, Px32y16, Px33y15 } CellNode (32 @ 15) (20)Px34y27 { Px34y28, Px34y26, Px35y27, Px33y27 } CellNode (34 @ 27) (20)Px84y79 { Px83y79, Px84y78, Px84y80, Px85y79 } CellNode (84 @ 79) (20)Px22y28 { Px23y28, Px21y28, Px22y29, Px22y27 } CellNode (22 @ 28) (20)Px90y73 { Px91y73, Px89y73, Px90y74 } CellNode (90 @ 73) (20)Px73y27 { Px72y27, Px73y26, Px73y28 } CellNode (73 @ 27) (20)Px40y7 { Px39y7, Px40y8, Px40y6, Px41y7 } CellNode (40 @ 7) (20)Px1y81 { Px1y80, Px1y82, Px2y81 } CellNode (1 @ 81) (20)Px47y3 { Px47y2, Px46y3, Px47y4, Px48y3 } CellNode (47 @ 3) (20)Px61y28 { Px61y29, Px62y28, Px60y28, Px61y27 } CellNode (61 @ 28) (20)Px69y63 { Px69y64, Px70y63, Px69y62, Px68y63 } CellNode (69 @ 63) (20)Px18y64 { Px18y63, Px17y64, Px19y64, Px18y65 } CellNode (18 @ 64) (20)Px43y53 { Px44y53, Px43y52, Px42y53, Px43y54 } CellNode (43 @ 53) (20)Px31y54 { Px31y55, Px32y54, Px30y54, Px31y53 } CellNode (31 @ 54) (20)Px45y65 { Px45y66, Px46y65, Px44y65, Px45y64 } CellNode (45 @ 65) (20)Px5y60 { Px4y60, Px5y59, Px5y61, Px6y60 } CellNode (5 @ 60) (20)Px33y66 { Px34y66, Px32y66, Px33y67, Px33y65 } CellNode (33 @ 66) (20)Px70y54 { Px70y55, Px69y54, Px71y54, Px70y53 } CellNode (70 @ 54) (20)Px2y69 { Px3y69, Px2y68, Px1y69, Px2y70 } CellNode (2 @ 69) (20)Px7y72 { Px7y73, Px7y71, Px8y72, Px6y72 } CellNode (7 @ 72) (20)Px58y11 { Px59y11, Px57y11, Px58y12, Px58y10 } CellNode (58 @ 11) (20)Px49y44 { Px49y45, Px50y44, Px49y43, Px48y44 } CellNode (49 @ 44) (20)Px37y45 { Px37y44, Px37y46, Px38y45, Px36y45 } CellNode (37 @ 45) (20)Px35y7 { Px36y7, Px35y8 } CellNode (35 @ 7) (20)Px50y35 { Px50y36, Px51y35, Px50y34, Px49y35 } CellNode (50 @ 35) (20)Px64y46 { Px63y46, Px65y46, Px64y45, Px64y47 } CellNode (64 @ 46) (20)Px52y47 { Px53y47, Px51y47, Px52y48, Px52y46 } CellNode (52 @ 47) (20)Px29y25 { Px30y25, Px28y25, Px29y24, Px29y26 } CellNode (29 @ 25) (20)Px31y40 { Px32y40, Px31y39, Px31y41, Px30y40 } CellNode (31 @ 40) (20)Px40y48 { Px40y49, Px40y47, Px41y48, Px39y48 } CellNode (40 @ 48) (20)Px48y83 { Px47y83, Px48y82, Px49y83, Px48y84 } CellNode (48 @ 83) (20)Px17y26 { Px17y27, Px18y26, Px17y25, Px16y26 } CellNode (17 @ 26) (20)Px22y73 { Px22y72, Px22y74, Px23y73, Px21y73 } CellNode (22 @ 73) (20)Px36y84 { Px35y84, Px37y84, Px36y83 } CellNode (36 @ 84) (20)Px68y25 { Px69y25, Px68y24, Px67y25, Px68y26 } CellNode (68 @ 25) (20)Px10y74 { Px9y74, Px11y74, Px10y73, Px10y75 } CellNode (10 @ 74) (20)Px2y55 { Px3y55, Px1y55, Px2y56, Px2y54 } CellNode (2 @ 55) (20)Px87y83 { Px86y83, Px87y82, Px88y83, Px87y84 } CellNode (87 @ 83) (20)Px56y26 { Px57y26, Px56y25 } CellNode (56 @ 26) (20)Px61y73 { Px61y72, Px61y74, Px62y73, Px60y73 } CellNode (61 @ 73) (20)Px73y72 { Px73y73, Px74y72, Px73y71, Px72y72 } CellNode (73 @ 72) (20)Px49y30 { Px49y29, Px49y31, Px48y30, Px50y30 } CellNode (49 @ 30) (20)Px75y84 { Px76y84, Px74y84, Px75y83 } CellNode (75 @ 84) (20)Px58y38 { Px59y38, Px57y38, Px58y39, Px58y37 } CellNode (58 @ 38) (20)Px44y27 { Px43y27, Px45y27, Px44y28 } CellNode (44 @ 27) (20)Px32y28 { Px33y28, Px32y29, Px32y27, Px31y28 } CellNode (32 @ 28) (20)Px37y31 { Px36y31, Px38y31, Px37y30, Px37y32 } CellNode (37 @ 31) (20)Px20y29 { Px20y28, Px20y30, Px21y29, Px19y29 } CellNode (20 @ 29) (20)Px28y64 { Px28y63, Px27y64, Px28y65, Px29y64 } CellNode (28 @ 64) (20)Px62y20 { Px63y20, Px62y21, Px61y20 } CellNode (62 @ 20) (20)Px71y28 { Px72y28, Px70y28, Px71y29, Px71y27 } CellNode (71 @ 28) (20)Px16y65 { Px16y66, Px17y65, Px15y65, Px16y64 } CellNode (16 @ 65) (20)Px79y63 { Px79y64, Px80y63, Px79y62, Px78y63 } CellNode (79 @ 63) (20)Px67y64 { Px67y63, Px66y64, Px67y65, Px68y64 } CellNode (67 @ 64) (20)Px55y65 { Px56y65, Px55y66, Px55y64, Px54y65 } CellNode (55 @ 65) (20)Px38y19 { Px39y19, Px37y19, Px38y18, Px38y20 } CellNode (38 @ 19) (20)Px69y76 { Px68y76, Px69y75, Px70y76, Px69y77 } CellNode (69 @ 76) (20)Px43y66 { Px44y66, Px43y67, Px42y66, Px43y65 } CellNode (43 @ 66) (20)Px80y54 { Px79y54, Px80y55 } CellNode (80 @ 54) (20)Px31y67 { Px30y67, Px32y67, Px31y66, Px31y68 } CellNode (31 @ 67) (20)Px10y60 { Px9y60, Px11y60, Px10y61, Px10y59 } CellNode (10 @ 60) (20)Px82y66 { Px82y67, Px81y66, Px83y66, Px82y65 } CellNode (82 @ 66) (20)Px5y73 { Px6y73, Px5y74, Px5y72, Px4y73 } CellNode (5 @ 73) (20)Px56y12 { Px55y12 } CellNode (56 @ 12) (20)Px44y13 { Px45y13, Px44y14, Px43y13, Px44y12 } CellNode (44 @ 13) (20)Px47y45 { Px47y44, Px47y46, Px48y45, Px46y45 } CellNode (47 @ 45) (20)Px70y67 { Px69y67, Px70y68, Px70y66, Px71y67 } CellNode (70 @ 67) (20)Px35y46 { Px36y46, Px35y45, Px34y46, Px35y47 } CellNode (35 @ 46) (20)Px49y57 { Px49y56, Px50y57, Px48y57, Px49y58 } CellNode (49 @ 57) (20)Px28y50 { Px28y51, Px27y50, Px29y50, Px28y49 } CellNode (28 @ 50) (20)Px9y52 { Px9y53, Px8y52, Px9y51, Px10y52 } CellNode (9 @ 52) (20)Px37y58 { Px38y58, Px36y58, Px37y59, Px37y57 } CellNode (37 @ 58) (20)Px74y46 { Px75y46, Px74y45, Px74y47 } CellNode (74 @ 46) (20)Px19y83 { Px20y83, Px18y83, Px19y82, Px19y84 } CellNode (19 @ 83) (20)Px43y9 { Px42y9, Px43y10, Px43y8, Px44y9 } CellNode (43 @ 9) (20)Px62y47 { Px63y47, Px62y48, Px62y46, Px61y47 } CellNode (62 @ 47) (20)Px67y50 { Px67y51, Px66y50, Px68y50, Px67y49 } CellNode (67 @ 50) (20)Px41y40 { Px40y40, Px41y39, Px41y41, Px42y40 } CellNode (41 @ 40) (20)Px76y58 { Px76y59, Px75y58, Px77y58, Px76y57 } CellNode (76 @ 58) (20)Px50y48 { Px51y48, Px50y47, Px50y49, Px49y48 } CellNode (50 @ 48) (20)Px58y83 { Px59y83, Px57y83, Px58y82, Px58y84 } CellNode (58 @ 83) (20)Px55y51 { Px55y52, Px54y51, Px56y51, Px55y50 } CellNode (55 @ 51) (20)Px46y84 { Px45y84, Px46y83, Px47y84 } CellNode (46 @ 84) (20)Px15y27 { Px16y27, Px15y28 } CellNode (15 @ 27) (20)Px29y38 { Px28y38, Px29y39, Px30y38, Px29y37 } CellNode (29 @ 38) (20)Px97y83 { Px96y83, Px97y82, Px97y84 } CellNode (97 @ 83) (20)Px85y84 { Px86y84, Px84y84, Px85y83 } CellNode (85 @ 84) (20)Px54y27 { Px53y27, Px55y27, Px54y28 } CellNode (54 @ 27) (20)Px59y30 { Px59y29, Px59y31, Px60y30, Px58y30 } CellNode (59 @ 30) (20)Px64y7 { Px63y7, Px64y6, Px64y8 } CellNode (64 @ 7) (20)Px42y28 { Px42y29, Px43y28, Px41y28, Px42y27 } CellNode (42 @ 28) (20)Px47y31 { Px46y31, Px47y32, Px47y30, Px48y31 } CellNode (47 @ 31) (20)Px56y39 { Px55y39, Px56y38, Px56y40, Px57y39 } CellNode (56 @ 39) (20)Px30y29 { Px30y28, Px30y30, Px29y29, Px31y29 } CellNode (30 @ 29) (20)Px61y4 { Px60y4, Px61y5, Px62y4, Px61y3 } CellNode (61 @ 4) (20)Px35y32 { Px35y33, Px34y32, Px36y32, Px35y31 } CellNode (35 @ 32) (20)Px23y33 { Px23y34, Px23y32, Px24y33, Px22y33 } CellNode (23 @ 33) (20)Px26y65 { Px26y66, Px27y65, Px26y64, Px25y65 } CellNode (26 @ 65) (20)Px60y21 { Px59y21, Px60y20, Px60y22, Px61y21 } CellNode (60 @ 21) (20)Px74y32 { Px75y32, Px73y32, Px74y33, Px74y31 } CellNode (74 @ 32) (20)Px14y66 { Px14y65, Px14y67, Px15y66, Px13y66 } CellNode (14 @ 66) (20)Px28y77 { Px29y77, Px28y78, Px27y77, Px28y76 } CellNode (28 @ 77) (20)Px62y33 { Px61y33, Px62y32, Px62y34, Px63y33 } CellNode (62 @ 33) (20)Px39y11 { Px39y12, Px40y11, Px38y11, Px39y10 } CellNode (39 @ 11) (20)Px65y65 { Px65y66, Px66y65, Px64y65, Px65y64 } CellNode (65 @ 65) (20)Px16y78 { Px16y77, Px17y78, Px15y78, Px16y79 } CellNode (16 @ 78) (20)Px79y76 { Px80y76, Px79y75, Px79y77, Px78y76 } CellNode (79 @ 76) (20)Px53y66 { Px52y66, Px53y67, Px54y66, Px53y65 } CellNode (53 @ 66) (20)Px67y77 { Px68y77, Px66y77, Px67y78, Px67y76 } CellNode (67 @ 77) (20)Px41y67 { Px41y68, Px40y67, Px41y66, Px42y67 } CellNode (41 @ 67) (20)Px46y70 { Px46y69, Px46y71, Px45y70, Px47y70 } CellNode (46 @ 70) (20)Px20y60 { Px21y60, Px19y60, Px20y61, Px20y59 } CellNode (20 @ 60) (20)Px55y78 { Px55y77, Px55y79, Px56y78, Px54y78 } CellNode (55 @ 78) (20)Px34y71 { Px34y72, Px33y71, Px35y71, Px34y70 } CellNode (34 @ 71) (20)Px80y67 { Px79y67, Px80y68, Px80y66, Px81y67 } CellNode (80 @ 67) (20)Px3y74 { Px3y73, Px2y74, Px3y75, Px4y74 } CellNode (3 @ 74) (20)Px94y78 { Px94y77, Px94y79, Px95y78, Px93y78 } CellNode (94 @ 78) (20)Px59y7 { Px58y7, Px59y8, Px59y6, Px60y7 } CellNode (59 @ 7) (20)Px85y70 { Px84y70, Px86y70, Px85y71 } CellNode (85 @ 70) (20)Px42y14 { Px42y13, Px43y14, Px41y14, Px42y15 } CellNode (42 @ 14) (20)Px56y4 { Px55y4, Px56y5, Px56y3, Px57y4 } CellNode (56 @ 4) (20)Px59y57 { Px58y57, Px59y56, Px59y58, Px60y57 } CellNode (59 @ 57) (20)Px30y15 { Px30y16, Px31y15, Px30y14 } CellNode (30 @ 15) (20)Px33y47 { Px33y48, Px34y47, Px33y46, Px32y47 } CellNode (33 @ 47) (20)Px38y50 { Px39y50, Px38y51, Px37y50, Px38y49 } CellNode (38 @ 50) (20)Px54y13 { Px55y13, Px54y14, Px53y13, Px54y12 } CellNode (54 @ 13) (20)Px53y1 { Px52y1, Px53y2, Px54y1 } CellNode (53 @ 1) (20)Px26y51 { Px26y52, Px26y50, Px27y51 } CellNode (26 @ 51) (20)Px47y58 { Px48y58, Px47y59, Px47y57, Px46y58 } CellNode (47 @ 58) (20)Px35y59 { Px35y60, Px36y59, Px34y59, Px35y58 } CellNode (35 @ 59) (20)Px72y47 { Px71y47, Px72y48, Px73y47 } CellNode (72 @ 47) (20)Px9y65 { Px8y65, Px9y64, Px10y65, Px9y66 } CellNode (9 @ 65) (20)Px51y40 { Px52y40, Px50y40, Px51y39, Px51y41 } CellNode (51 @ 40) (20)Px60y48 { Px61y48, Px59y48, Px60y47, Px60y49 } CellNode (60 @ 48) (20)Px65y51 { Px66y51, Px64y51, Px65y52, Px65y50 } CellNode (65 @ 51) (20)Px74y59 { Px74y60, Px75y59, Px73y59, Px74y58 } CellNode (74 @ 59) (20)Px53y52 { Px52y52, Px53y53, Px53y51, Px54y52 } CellNode (53 @ 52) (20)Px39y38 { Px38y38, Px39y39, Px40y38, Px39y37 } CellNode (39 @ 38) (20)Px41y53 { Px42y53, Px40y53, Px41y54, Px41y52 } CellNode (41 @ 53) (20)Px18y31 { Px19y31, Px17y31, Px18y30, Px18y32 } CellNode (18 @ 31) (20)Px27y39 { Px27y38, Px28y39, Px27y40 } CellNode (27 @ 39) (20)Px69y30 { Px69y29, Px69y31, Px70y30, Px68y30 } CellNode (69 @ 30) (20)Px95y84 { Px96y84, Px95y83, Px94y84 } CellNode (95 @ 84) (20)Px3y60 { Px3y61, Px2y60, Px4y60, Px3y59 } CellNode (3 @ 60) (20)Px57y31 { Px58y31, Px57y30, Px56y31, Px57y32 } CellNode (57 @ 31) (20)Px66y39 { Px67y39, Px65y39, Px66y38, Px66y40 } CellNode (66 @ 39) (20)Px40y29 { Px39y29, Px40y28, Px40y30, Px41y29 } CellNode (40 @ 29) (20)Px45y32 { Px45y33, Px46y32, Px44y32, Px45y31 } CellNode (45 @ 32) (20)Px59y43 { Px60y43, Px58y43, Px59y44, Px59y42 } CellNode (59 @ 43) (20)Px41y5 { Px41y4, Px42y5, Px40y5, Px41y6 } CellNode (41 @ 5) (20)Px48y1 { Px47y1, Px48y2, Px49y1 } CellNode (48 @ 1) (20)Px33y33 { Px32y33, Px33y32, Px33y34, Px34y33 } CellNode (33 @ 33) (20)Px21y34 { Px22y34, Px20y34, Px21y35, Px21y33 } CellNode (21 @ 34) (20)Px38y77 { Px38y78, Px39y77, Px37y77, Px38y76 } CellNode (38 @ 77) (20)Px72y33 { Px71y33, Px72y32, Px73y33, Px72y34 } CellNode (72 @ 33) (20)Px12y67 { Px13y67, Px11y67, Px12y66, Px12y68 } CellNode (12 @ 67) (20)Px17y70 { Px16y70, Px17y69, Px17y71, Px18y70 } CellNode (17 @ 70) (20)Px89y76 { Px90y76, Px88y76, Px89y75, Px89y77 } CellNode (89 @ 76) (20)Px60y34 { Px60y35, Px59y34, Px61y34, Px60y33 } CellNode (60 @ 34) (20)Px37y12 { Px38y12, Px36y12, Px37y11, Px37y13 } CellNode (37 @ 12) (20)Px26y78 { Px26y77, Px25y78, Px26y79, Px27y78 } CellNode (26 @ 78) (20)Px14y79 { Px15y79, Px13y79, Px14y78, Px14y80 } CellNode (14 @ 79) (20)Px77y77 { Px77y78, Px78y77, Px76y77, Px77y76 } CellNode (77 @ 77) (20)Px51y67 { Px52y67, Px50y67, Px51y66, Px51y68 } CellNode (51 @ 67) (20)Px39y24 { Px39y25, Px39y23, Px40y24 } CellNode (39 @ 24) (20)Px30y60 { Px30y59, Px30y61, Px31y60, Px29y60 } CellNode (30 @ 60) (20)Px44y71 { Px45y71, Px43y71, Px44y72, Px44y70 } CellNode (44 @ 71) (20)Px65y78 { Px64y78, Px65y77, Px65y79, Px66y78 } CellNode (65 @ 78) (20)Px27y25 { Px27y26, Px26y25, Px28y25, Px27y24 } CellNode (27 @ 25) (20)Px53y79 { Px54y79, Px52y79, Px53y78, Px53y80 } CellNode (53 @ 79) (20)Px32y72 { Px33y72, Px31y72, Px32y73, Px32y71 } CellNode (32 @ 72) (20)Px64y13 { Px64y14, Px65y13, Px64y12, Px63y13 } CellNode (64 @ 13) (20)Px18y58 { Px18y59, Px19y58, Px17y58, Px18y57 } CellNode (18 @ 58) (20)Px1y75 { Px2y75, Px1y76, Px1y74 } CellNode (1 @ 75) (20)Px39y8 { Px39y7, Px40y8, Px38y8, Px39y9 } CellNode (39 @ 8) (20)Px66y25 { Px66y26, Px67y25, Px65y25, Px66y24 } CellNode (66 @ 25) (20)Px20y73 { Px19y73, Px20y74, Px20y72, Px21y73 } CellNode (20 @ 73) (20)Px71y72 { Px71y73, Px70y72, Px72y72, Px71y71 } CellNode (71 @ 72) (20)Px48y50 { Px48y51, Px49y50, Px47y50, Px48y49 } CellNode (48 @ 50) (20)Px83y71 { Px83y72, Px82y71, Px84y71, Px83y70 } CellNode (83 @ 71) (20)Px40y15 { Px41y15, Px39y15, Px40y16, Px40y14 } CellNode (40 @ 15) (20)Px57y58 { Px57y59, Px58y58, Px57y57, Px56y58 } CellNode (57 @ 58) (20)Px36y51 { Px36y50, Px36y52, Px37y51, Px35y51 } CellNode (36 @ 51) (20)Px69y57 { Px69y56, Px68y57, Px69y58, Px70y57 } CellNode (69 @ 57) (20)Px45y59 { Px45y58, Px45y60, Px46y59, Px44y59 } CellNode (45 @ 59) (20)Px92y79 { Px93y79, Px91y79, Px92y78, Px92y80 } CellNode (92 @ 79) (20)Px38y63 { Px38y62, Px39y63, Px37y63, Px38y64 } CellNode (38 @ 63) (20)Px75y51 { Px74y51, Px75y52, Px76y51, Px75y50 } CellNode (75 @ 51) (20)Px7y66 { Px7y67, Px8y66, Px6y66, Px7y65 } CellNode (7 @ 66) (20)Px63y52 { Px64y52, Px62y52, Px63y51, Px63y53 } CellNode (63 @ 52) (20)Px77y63 { Px77y62, Px77y64, Px76y63, Px78y63 } CellNode (77 @ 63) (20)Px9y78 { Px9y79, Px8y78, Px10y78, Px9y77 } CellNode (9 @ 78) (20)Px51y53 { Px51y54, Px52y53, Px50y53, Px51y52 } CellNode (51 @ 53) (20)Px16y32 { Px16y33, Px17y32, Px16y31, Px15y32 } CellNode (16 @ 32) (20)Px76y39 { Px76y40, Px75y39, Px76y38 } CellNode (76 @ 39) (20)Px1y61 { Px1y60, Px2y61, Px1y62 } CellNode (1 @ 61) (20)Px55y32 { Px55y33, Px56y32, Px55y31, Px54y32 } CellNode (55 @ 32) (20)Px69y43 { Px69y44, Px70y43, Px68y43, Px69y42 } CellNode (69 @ 43) (20)Px43y33 { Px44y33, Px42y33, Px43y32, Px43y34 } CellNode (43 @ 33) (20)Px57y44 { Px57y45, Px56y44, Px58y44, Px57y43 } CellNode (57 @ 44) (20)Px31y34 { Px31y35, Px32y34, Px31y33, Px30y34 } CellNode (31 @ 34) (20)Px45y45 { Px46y45, Px44y45, Px45y44, Px45y46 } CellNode (45 @ 45) (20)Px48y77 { Px48y78, Px49y77, Px48y76, Px47y77 } CellNode (48 @ 77) (20)Px27y70 { Px28y70, Px26y70, Px27y71 } CellNode (27 @ 70) (20)Px36y78 { Px35y78, Px36y77, Px36y79, Px37y78 } CellNode (36 @ 78) (20)Px70y34 { Px70y35, Px69y34, Px71y34, Px70y33 } CellNode (70 @ 34) (20)Px15y71 { Px15y72, Px16y71, Px14y71, Px15y70 } CellNode (15 @ 71) (20)Px7y52 { Px7y51, Px8y52, Px6y52, Px7y53 } CellNode (7 @ 52) (20)Px24y79 { Px25y79, Px24y78, Px23y79, Px24y80 } CellNode (24 @ 79) (20)Px87y77 { Px87y78, Px88y77, Px87y76, Px86y77 } CellNode (87 @ 77) (20)Px29y82 { Px30y82, Px29y81, Px29y83, Px28y82 } CellNode (29 @ 82) (20)Px2y49 { Px2y50, Px3y49 } CellNode (2 @ 49) (20)Px75y78 { Px74y78, Px75y77, Px75y79, Px76y78 } CellNode (75 @ 78) (20)Px17y83 { Px18y83, Px16y83, Px17y84, Px17y82 } CellNode (17 @ 83) (20)Px49y24 { Px50y24, Px49y23, Px48y24, Px49y25 } CellNode (49 @ 24) (20)Px66y70 { Px65y70, Px66y69, Px66y71, Px67y70 } CellNode (66 @ 70) (20)Px63y79 { Px64y79, Px62y79, Px63y78, Px63y80 } CellNode (63 @ 79) (20)Px68y82 { Px68y83, Px68y81, Px69y82, Px67y82 } CellNode (68 @ 82) (20)Px42y72 { Px42y71, Px43y72, Px42y73, Px41y72 } CellNode (42 @ 72) (20)Px56y83 { Px56y84, Px55y83, Px57y83, Px56y82 } CellNode (56 @ 83) (20)Px25y26 { Px25y27, Px25y25, Px26y26, Px24y26 } CellNode (25 @ 26) (20)Px30y73 { Px30y74, Px29y73, Px30y72, Px31y73 } CellNode (30 @ 73) (20)Px62y14 { Px61y14, Px62y13, Px62y15, Px63y14 } CellNode (62 @ 14) (20)Px81y72 { Px81y71, Px81y73, Px82y72, Px80y72 } CellNode (81 @ 72) (20)Px50y15 { Px50y16, Px51y15, Px49y15, Px50y14 } CellNode (50 @ 15) (20)Px95y83 { Px96y83, Px94y83, Px95y82, Px95y84 } CellNode (95 @ 83) (20)Px64y26 { Px63y26, Px65y26, Px64y25 } CellNode (64 @ 26) (20)Px52y27 { Px53y27, Px51y27, Px52y28, Px52y26 } CellNode (52 @ 27) (20)Px55y59 { Px54y59, Px55y60, Px56y59, Px55y58 } CellNode (55 @ 59) (20)Px31y20 { Px31y19, Px32y20, Px30y20, Px31y21 } CellNode (31 @ 20) (20)Px44y7 { Px43y7, Px44y6, Px45y7 } CellNode (44 @ 7) (20)Px34y52 { Px35y52, Px33y52, Px34y51, Px34y53 } CellNode (34 @ 52) (20)Px48y63 { Px47y63, Px48y62, Px49y63, Px48y64 } CellNode (48 @ 63) (20)Px22y53 { Px22y54, Px23y53, Px21y53 } CellNode (22 @ 53) (20)Px41y4 { Px41y3, Px40y4, Px41y5, Px42y4 } CellNode (41 @ 4) (20)Px36y64 { Px36y65, Px37y64, Px35y64, Px36y63 } CellNode (36 @ 64) (20)Px70y20 { Px70y21, Px70y19, Px69y20 } CellNode (70 @ 20) (20)Px10y54 { Px11y54, Px10y53, Px9y54, Px10y55 } CellNode (10 @ 54) (20)Px73y52 { Px74y52, Px73y51, Px72y52, Px73y53 } CellNode (73 @ 52) (20)Px24y65 { Px24y66, Px23y65, Px25y65, Px24y64 } CellNode (24 @ 65) (20)Px5y67 { Px5y66, Px4y67, Px5y68, Px6y67 } CellNode (5 @ 67) (20)Px61y53 { Px61y54, Px62y53, Px61y52, Px60y53 } CellNode (61 @ 53) (20)Px75y64 { Px75y65, Px74y64, Px76y64, Px75y63 } CellNode (75 @ 64) (20)Px49y10 { Px49y11, Px49y9, Px48y10 } CellNode (49 @ 10) (20)Px7y79 { Px7y78, Px7y80, Px8y79, Px6y79 } CellNode (7 @ 79) (20)Px63y65 { Px64y65, Px62y65, Px63y66, Px63y64 } CellNode (63 @ 65) (20)Px28y44 { Px28y43, Px28y45, Px29y44, Px27y44 } CellNode (28 @ 44) (20)Px62y2 { Px61y2, Px62y3 } CellNode (62 @ 2) (20)Px67y44 { Px66y44, Px67y45, Px68y44, Px67y43 } CellNode (67 @ 44) (20)Px41y34 { Px41y35, Px42y34, Px41y33, Px40y34 } CellNode (41 @ 34) (20)Px55y45 { Px55y46, Px54y45, Px55y44, Px56y45 } CellNode (55 @ 45) (20)Px43y46 { Px44y46, Px42y46, Px43y47, Px43y45 } CellNode (43 @ 46) (20)Px31y47 { Px32y47, Px31y46, Px31y48, Px30y47 } CellNode (31 @ 47) (20)Px39y82 { Px40y82, Px39y81, Px38y82, Px39y83 } CellNode (39 @ 82) (20)Px34y79 { Px35y79, Px34y78, Px33y79, Px34y80 } CellNode (34 @ 79) (20)Px13y72 { Px13y71, Px13y73, Px14y72, Px12y72 } CellNode (13 @ 72) (20)Px5y53 { Px6y53, Px4y53, Px5y54, Px5y52 } CellNode (5 @ 53) (20)Px27y83 { Px28y83, Px27y84, Px27y82, Px26y83 } CellNode (27 @ 83) (20)Px59y24 { Px60y24, Px58y24, Px59y23, Px59y25 } CellNode (59 @ 24) (20)Px70y47 { Px71y47, Px70y46, Px70y48, Px69y47 } CellNode (70 @ 47) (20)Px15y84 { Px14y84, Px15y83, Px16y84 } CellNode (15 @ 84) (20)Px78y82 { Px78y81, Px77y82, Px79y82, Px78y83 } CellNode (78 @ 82) (20)Px47y25 { Px47y26, Px48y25, Px46y25, Px47y24 } CellNode (47 @ 25) (20)Px52y72 { Px51y72, Px52y73, Px53y72, Px52y71 } CellNode (52 @ 72) (20)Px66y83 { Px67y83, Px66y84, Px65y83, Px66y82 } CellNode (66 @ 83) (20)Px35y26 { Px36y26, Px34y26, Px35y25, Px35y27 } CellNode (35 @ 26) (20)Px40y73 { Px41y73, Px40y72, Px39y73, Px40y74 } CellNode (40 @ 73) (20)Px73y79 { Px74y79, Px72y79, Px73y78, Px73y80 } CellNode (73 @ 79) (20)Px54y84 { Px53y84, Px54y83, Px55y84 } CellNode (54 @ 84) (20)Px23y27 { Px23y28, Px24y27, Px23y26, Px22y27 } CellNode (23 @ 27) (20)Px28y30 { Px27y30, Px29y30, Px28y29, Px28y31 } CellNode (28 @ 30) (20)Px37y38 { Px36y38, Px37y39, Px37y37, Px38y38 } CellNode (37 @ 38) (20)Px57y2 { Px58y2, Px56y2, Px57y3, Px57y1 } CellNode (57 @ 2) (20)Px19y63 { Px18y63, Px19y62, Px19y64, Px20y63 } CellNode (19 @ 63) (20)Px2y80 { Px1y80, Px2y79, Px2y81, Px3y80 } CellNode (2 @ 80) (20)Px49y37 { Px49y38, Px50y37, Px48y37, Px49y36 } CellNode (49 @ 37) (20)Px62y27 { Px61y27, Px63y27, Px62y28 } CellNode (62 @ 27) (20)Px67y30 { Px67y31, Px66y30, Px67y29, Px68y30 } CellNode (67 @ 30) (20)Px93y84 { Px93y83, Px92y84, Px94y84 } CellNode (93 @ 84) (20)Px50y28 { Px50y27, Px50y29, Px49y28, Px51y28 } CellNode (50 @ 28) (20)Px46y64 { Px46y65, Px47y64, Px45y64, Px46y63 } CellNode (46 @ 64) (20)Px29y18 { Px29y19, Px28y18, Px30y18, Px29y17 } CellNode (29 @ 18) (20)Px20y54 { Px20y55, Px21y54 } CellNode (20 @ 54) (20)Px34y65 { Px34y64, Px34y66, Px35y65, Px33y65 } CellNode (34 @ 65) (20)Px59y10 { Px59y11, Px60y10, Px58y10, Px59y9 } CellNode (59 @ 10) (20)Px22y66 { Px23y66, Px21y66, Px22y65, Px22y67 } CellNode (22 @ 66) (20)Px68y18 { Px69y18, Px68y19, Px67y18 } CellNode (68 @ 18) (20)Px8y71 { Px9y71, Px7y71, Px8y70, Px8y72 } CellNode (8 @ 71) (20)Px10y67 { Px9y67, Px10y68, Px11y67, Px10y66 } CellNode (10 @ 67) (20)Px73y65 { Px74y65, Px73y66, Px72y65, Px73y64 } CellNode (73 @ 65) (20)Px56y19 { Px56y20 } CellNode (56 @ 19) (20)Px47y11 { Px48y11, Px46y11, Px47y12 } CellNode (47 @ 11) (20)Px61y66 { Px60y66, Px61y67, Px61y65, Px62y66 } CellNode (61 @ 66) (20)Px35y12 { Px35y13, Px34y12, Px36y12, Px35y11 } CellNode (35 @ 12) (20)Px26y45 { Px26y46, Px27y45 } CellNode (26 @ 45) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>examples</category><body package="DistributedModeling-samples" selector="avecBoucles">avecBouclesmessages null complex.N1 { N1 N2 N3 N4} PN2 { N5 N6 N7 N8} PN3 { N9 N10 N11 N12} PN4 { N13 N14 N15 N16} PN5 { N17 N18 N19 N20} PN6 { N21 N22 N23 N24} PN7 { N25 N26 N27 N28} PN8 { N29 N30 N31 N32} PN9 { N33 N34 N35 N36} PN10 { N37 N38 N39 N40} PN11 { N41 N42 N43 N44} PN12 { N45 N46 N47 N48} PN13 { N49 N50 N51 N52} PN14 { N53 N54 N55 N56} PN15 { N57 N58 N59 N60} PN16 { N61 N62 N63 N64} PN17 { N65 N66 N67 N68} PN18 { N69 N70 N71 N72} PN19 { N73 N74 N75 N76} PN20 { N77 N78 N79 N80} PN21 { N81 N82 N83 N84} PN22 { N85 N86 N87 N88} PN23 { N89 N90 N91 N92} PN24 { N93 N94 N95 N96} PN25 { N97 N98 N99 N100} PN26 { N101 N102 N103 N104} PN27 { N105 N106 N107 N108} PN28 { N109 N110 N111 N112} PN29 { N113 N114 N115 N116} PN30 { N117 N118 N119 N120} PN31 { N121 N122 N123 N124} PN32 { N125 N126 N127 N128} PN33 { N129 N130 N131 N132} PN34 { N133 N134 N135 N136} PN35 { N137 N138 N139 N140} PN36 { N141 N142 N143 N144} PN37 { N145 N146 N147 N148} PN38 { N149 N150 N151 N152} PN39 { N153 N154 N155 N156} PN40 { N157 N158 N159 N160} PN41 { N161 N162 N163 N164} PN42 { N165 N166 N167 N168} PN43 { N169 N170 N171 N172} PN44 { N173 N174 N175 N176} PN45 { N177 N178 N179 N180} PN46 { N181 N182 N183 N184} PN47 { N185 N186 N187 N188} PN48 { N189 N190 N191 N192} PN49 { N193 N194 N195 N196} PN50 { N197 N198 N199 N200} PN51 { N201 N202 N203 N204} PN52 { N205 N206 N207 N208} PN53 { N209 N210 N211 N212} PN54 { N213 N214 N215 N216} PN55 { N217 N218 N219 N220} PN56 { N221 N222 N223 N224} PN57 { N225 N226 N227 N228} PN58 { N229 N230 N231 N232} PN59 { N233 N234 N235 N236} PN60 { N237 N238 N239 N240} PN61 { N241 N242 N243 N244} PN62 { N245 N246 N247 N248} PN63 { N249 N250 N251 N252} PN64 { N253 N254 N255 N256} PN65 { N1 N2 N3 N4} PN66 { N5 N6 N7 N8} PN67 { N9 N10 N11 N12} PN68 { N13 N14 N15 N16} PN69 { N17 N18 N19 N20} PN70 { N21 N22 N23 N24} PN71 { N25 N26 N27 N28} PN72 { N29 N30 N31 N32} PN73 { N33 N34 N35 N36} PN74 { N37 N38 N39 N40} PN75 { N41 N42 N43 N44} PN76 { N45 N46 N47 N48} PN77 { N49 N50 N51 N52} PN78 { N53 N54 N55 N56} PN79 { N57 N58 N59 N60} PN80 { N61 N62 N63 N64} PN81 { N65 N66 N67 N68} PN82 { N69 N70 N71 N72} PN83 { N73 N74 N75 N76} PN84 { N77 N78 N79 N80} PN85 { N81 N82 N83 N84} PN86 { N85 N86 N87 N88} PN87 { N89 N90 N91 N92} PN88 { N93 N94 N95 N96} PN89 { N97 N98 N99 N100} PN90 { N101 N102 N103 N104} PN91 { N105 N106 N107 N108} PN92 { N109 N110 N111 N112} PN93 { N113 N114 N115 N116} PN94 { N117 N118 N119 N120} PN95 { N121 N122 N123 N124} PN96 { N125 N126 N127 N128} PN97 { N129 N130 N131 N132} PN98 { N133 N134 N135 N136} PN99 { N137 N138 N139 N140} PN100 { N141 N142 N143 N144} PN101 { N145 N146 N147 N148} PN102 { N149 N150 N151 N152} PN103 { N153 N154 N155 N156} PN104 { N157 N158 N159 N160} PN105 { N161 N162 N163 N164} PN106 { N165 N166 N167 N168} PN107 { N169 N170 N171 N172} PN108 { N173 N174 N175 N176} PN109 { N177 N178 N179 N180} PN110 { N181 N182 N183 N184} PN111 { N185 N186 N187 N188} PN112 { N189 N190 N191 N192} PN113 { N193 N194 N195 N196} PN114 { N197 N198 N199 N200} PN115 { N201 N202 N203 N204} PN116 { N205 N206 N207 N208} PN117 { N209 N210 N211 N212} PN118 { N213 N214 N215 N216} PN119 { N217 N218 N219 N220} PN120 { N221 N222 N223 N224} PN121 { N225 N226 N227 N228} PN122 { N229 N230 N231 N232} PN123 { N233 N234 N235 N236} PN124 { N237 N238 N239 N240} PN125 { N241 N242 N243 N244} PN126 { N245 N246 N247 N248} PN127 { N249 N250 N251 N252} PN128 { N253 N254 N255 N256} PN129 { N1 N2 N3 N4} PN130 { N5 N6 N7 N8} PN131 { N9 N10 N11 N12} PN132 { N13 N14 N15 N16} PN133 { N17 N18 N19 N20} PN134 { N21 N22 N23 N24} PN135 { N25 N26 N27 N28} PN136 { N29 N30 N31 N32} PN137 { N33 N34 N35 N36} PN138 { N37 N38 N39 N40} PN139 { N41 N42 N43 N44} PN140 { N45 N46 N47 N48} PN141 { N49 N50 N51 N52} PN142 { N53 N54 N55 N56} PN143 { N57 N58 N59 N60} PN144 { N61 N62 N63 N64} PN145 { N65 N66 N67 N68} PN146 { N69 N70 N71 N72} PN147 { N73 N74 N75 N76} PN148 { N77 N78 N79 N80} PN149 { N81 N82 N83 N84} PN150 { N85 N86 N87 N88} PN151 { N89 N90 N91 N92} PN152 { N93 N94 N95 N96} PN153 { N97 N98 N99 N100} PN154 { N101 N102 N103 N104} PN155 { N105 N106 N107 N108} PN156 { N109 N110 N111 N112} PN157 { N113 N114 N115 N116} PN158 { N117 N118 N119 N120} PN159 { N121 N122 N123 N124} PN160 { N125 N126 N127 N128} PN161 { N129 N130 N131 N132} PN162 { N133 N134 N135 N136} PN163 { N137 N138 N139 N140} PN164 { N141 N142 N143 N144} PN165 { N145 N146 N147 N148} PN166 { N149 N150 N151 N152} PN167 { N153 N154 N155 N156} PN168 { N157 N158 N159 N160} PN169 { N161 N162 N163 N164} PN170 { N165 N166 N167 N168} PN171 { N169 N170 N171 N172} PN172 { N173 N174 N175 N176} PN173 { N177 N178 N179 N180} PN174 { N181 N182 N183 N184} PN175 { N185 N186 N187 N188} PN176 { N189 N190 N191 N192} PN177 { N193 N194 N195 N196} PN178 { N197 N198 N199 N200} PN179 { N201 N202 N203 N204} PN180 { N205 N206 N207 N208} PN181 { N209 N210 N211 N212} PN182 { N213 N214 N215 N216} PN183 { N217 N218 N219 N220} PN184 { N221 N222 N223 N224} PN185 { N225 N226 N227 N228} PN186 { N229 N230 N231 N232} PN187 { N233 N234 N235 N236} PN188 { N237 N238 N239 N240} PN189 { N241 N242 N243 N244} PN190 { N245 N246 N247 N248} PN191 { N249 N250 N251 N252} PN192 { N253 N254 N255 N256} PN193 { N1 N2 N3 N4} PN194 { N5 N6 N7 N8} PN195 { N9 N10 N11 N12} PN196 { N13 N14 N15 N16} PN197 { N17 N18 N19 N20} PN198 { N21 N22 N23 N24} PN199 { N25 N26 N27 N28} PN200 { N29 N30 N31 N32} PN201 { N33 N34 N35 N36} PN202 { N37 N38 N39 N40} PN203 { N41 N42 N43 N44} PN204 { N45 N46 N47 N48} PN205 { N49 N50 N51 N52} PN206 { N53 N54 N55 N56} PN207 { N57 N58 N59 N60} PN208 { N61 N62 N63 N64} PN209 { N65 N66 N67 N68} PN210 { N69 N70 N71 N72} PN211 { N73 N74 N75 N76} PN212 { N77 N78 N79 N80} PN213 { N81 N82 N83 N84} PN214 { N85 N86 N87 N88} PN215 { N89 N90 N91 N92} PN216 { N93 N94 N95 N96} PN217 { N97 N98 N99 N100} PN218 { N101 N102 N103 N104} PN219 { N105 N106 N107 N108} PN220 { N109 N110 N111 N112} PN221 { N113 N114 N115 N116} PN222 { N117 N118 N119 N120} PN223 { N121 N122 N123 N124} PN224 { N125 N126 N127 N128} PN225 { N129 N130 N131 N132} PN226 { N133 N134 N135 N136} PN227 { N137 N138 N139 N140} PN228 { N141 N142 N143 N144} PN229 { N145 N146 N147 N148} PN230 { N149 N150 N151 N152} PN231 { N153 N154 N155 N156} PN232 { N157 N158 N159 N160} PN233 { N161 N162 N163 N164} PN234 { N165 N166 N167 N168} PN235 { N169 N170 N171 N172} PN236 { N173 N174 N175 N176} PN237 { N177 N178 N179 N180} PN238 { N181 N182 N183 N184} PN239 { N185 N186 N187 N188} PN240 { N189 N190 N191 N192} PN241 { N193 N194 N195 N196} PN242 { N197 N198 N199 N200} PN243 { N201 N202 N203 N204} PN244 { N205 N206 N207 N208} PN245 { N209 N210 N211 N212} PN246 { N213 N214 N215 N216} PN247 { N217 N218 N219 N220} PN248 { N221 N222 N223 N224} PN249 { N225 N226 N227 N228} PN250 { N229 N230 N231 N232} PN251 { N233 N234 N235 N236} PN252 { N237 N238 N239 N240} PN253 { N241 N242 N243 N244} PN254 { N245 N246 N247 N248} PN255 { N249 N250 N251 N252} PN256 { N253 N254 N255 N256} P</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="noeud2">noeud2messages none  defined. P1 { P3 } Node (65 @ 389) (150)P3 { P1 } Node (165 @ 395) (150)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange640Points25">genRange640Points25messages none  defined. P1 { P3, P8, P13, P17, P18, P19, P21, P22, P25 } NodeP2 { P7, P14, P18, P23, P24 } NodeP3 { P1, P13, P17, P25 } NodeP4 { P11, P15, P20 } NodeP6 { P9, P11, P15, P18, P22 } NodeP7 { P2, P14, P18, P23, P24 } NodeP8 { P1, P17, P19, P21, P22, P25 } NodeP9 { P6, P11, P20 } NodeP10 { P12, P23 } NodeP11 { P4, P6, P9, P15, P20 } NodeP12 { P10, P24 } NodeP13 { P1, P3, P17, P18, P22, P25 } NodeP14 { P2, P7, P18, P23, P24 } NodeP15 { P4, P6, P11, P20 } NodeP17 { P1, P3, P8, P13, P19, P21, P25 } NodeP18 { P1, P2, P6, P7, P13, P14, P22, P24, P25 } NodeP19 { P1, P8, P17, P21 } NodeP20 { P4, P9, P11, P15 } NodeP21 { P1, P8, P17, P19, P22 } NodeP22 { P1, P6, P8, P13, P18, P21, P25 } NodeP23 { P2, P7, P10, P14, P24 } NodeP24 { P2, P7, P12, P14, P18, P23 } NodeP25 { P1, P3, P8, P13, P17, P18, P22 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="sansBoucles">sansBouclesmessages null search.N1 { N2 N3 N4 N5} PN2 { N1 N6 N7 N8} PN3 { N9 N10 N11 N12} PN4 { N13 N14 N15 N16} PN5 { N17 N18 N19 N20} PN6 { N21 N22 N23 N24} PN7 { N25 N26 N27 N28} PN8 { N29 N30 N31 N32} PN9 { N33 N34 N35 N36} PN10 { N37 N38 N39 N40} PN11 { N41 N42 N43 N44} PN12 { N45 N46 N47 N48} PN13 { N49 N50 N51 N52} PN14 { N53 N54 N55 N56} PN15 { N57 N58 N59 N60} PN16 { N61 N62 N63 N64} PN17 { N65 N66 N67 N68} PN18 { N69 N70 N71 N72} PN19 { N73 N74 N75 N76} PN20 { N77 N78 N79 N80} PN21 { N81 N82 N83 N84} PN22 { N85 N86 N87 N88} PN23 { N89 N90 N91 N92} PN24 { N93 N94 N95 N96} PN25 { N97 N98 N99 N100} PN26 { N101 N102 N103 N104} PN27 { N105 N106 N107 N108} PN28 { N109 N110 N111 N112} PN29 { N113 N114 N115 N116} PN30 { N117 N118 N119 N120} PN31 { N121 N122 N123 N124} PN32 { N125 N126 N127 N128} PN33 { N129 N130 N131 N132} PN34 { N133 N134 N135 N136} PN35 { N137 N138 N139 N140} PN36 { N141 N142 N143 N144} PN37 { N145 N146 N147 N148} PN38 { N149 N150 N151 N152} PN39 { N153 N154 N155 N156} PN40 { N157 N158 N159 N160} PN41 { N161 N162 N163 N164} PN42 { N165 N166 N167 N168} PN43 { N169 N170 N171 N172} PN44 { N173 N174 N175 N176} PN45 { N177 N178 N179 N180} PN46 { N181 N182 N183 N184} PN47 { N185 N186 N187 N188} PN48 { N189 N190 N191 N192} PN49 { N193 N194 N195 N196} PN50 { N197 N198 N1 N2} PN51 { N3 N4 N5 N6} PN52 { N7 N8 N9 N10} PN53 { N11 N12 N13 N14} PN54 { N15 N16 N17 N18} PN55 { N19 N20 N21 N22} PN56 { N23 N24 N25 N26} PN57 { N27 N28 N29 N30} PN58 { N31 N32 N33 N34} PN59 { N35 N36 N37 N38} PN60 { N39 N40 N41 N42} PN61 { N43 N44 N45 N46} PN62 { N47 N48 N49 N50} PN63 { N51 N52 N53 N54} PN64 { N55 N56 N57 N58} PN65 { N59 N60 N61 N62} PN66 { N63 N64 N65 N67} PN67 { N66 N68 N69 N70} PN68 { N71 N72 N73 N74} PN69 { N75 N76 N77 N78} PN70 { N79 N80 N81 N82} PN71 { N83 N84 N85 N86} PN72 { N87 N88 N89 N90} PN73 { N91 N92 N93 N94} PN74 { N95 N96 N97 N98} PN75 { N99 N100 N101 N102} PN76 { N103 N104 N105 N106} PN77 { N107 N108 N109 N110} PN78 { N111 N112 N113 N114} PN79 { N115 N116 N117 N118} PN80 { N119 N120 N121 N122} PN81 { N123 N124 N125 N126} PN82 { N127 N128 N129 N130} PN83 { N131 N132 N133 N134} PN84 { N135 N136 N137 N138} PN85 { N139 N140 N141 N142} PN86 { N143 N144 N145 N146} PN87 { N147 N148 N149 N150} PN88 { N151 N152 N153 N154} PN89 { N155 N156 N157 N158} PN90 { N159 N160 N161 N162} PN91 { N163 N164 N165 N166} PN92 { N167 N168 N169 N170} PN93 { N171 N172 N173 N174} PN94 { N175 N176 N177 N178} PN95 { N179 N180 N181 N182} PN96 { N183 N184 N185 N186} PN97 { N187 N188 N189 N190} PN98 { N191 N192 N193 N194} PN99 { N195 N196 N197 N198} PN100 { N1 N2 N3 N4} PN101 { N5 N6 N7 N8} PN102 { N9 N10 N11 N12} PN103 { N13 N14 N15 N16} PN104 { N17 N18 N19 N20} PN105 { N21 N22 N23 N24} PN106 { N25 N26 N27 N28} PN107 { N29 N30 N31 N32} PN108 { N33 N34 N35 N36} PN109 { N37 N38 N39 N40} PN110 { N41 N42 N43 N44} PN111 { N45 N46 N47 N48} PN112 { N49 N50 N51 N52} PN113 { N53 N54 N55 N56} PN114 { N57 N58 N59 N60} PN115 { N61 N62 N63 N64} PN116 { N65 N66 N67 N68} PN117 { N69 N70 N71 N72} PN118 { N73 N74 N75 N76} PN119 { N77 N78 N79 N80} PN120 { N81 N82 N83 N84} PN121 { N85 N86 N87 N88} PN122 { N89 N90 N91 N92} PN123 { N93 N94 N95 N96} PN124 { N97 N98 N99 N100} PN125 { N101 N102 N103 N104} PN126 { N105 N106 N107 N108} PN127 { N109 N110 N111 N112} PN128 { N113 N114 N115 N116} PN129 { N117 N118 N119 N120} PN130 { N121 N122 N123 N124} PN131 { N125 N126 N127 N128} PN132 { N129 N130 N131 N133} PN133 { N132 N134 N135 N136} PN134 { N137 N138 N139 N140} PN135 { N141 N142 N143 N144} PN136 { N145 N146 N147 N148} PN137 { N149 N150 N151 N152} PN138 { N153 N154 N155 N156} PN139 { N157 N158 N159 N160} PN140 { N161 N162 N163 N164} PN141 { N165 N166 N167 N168} PN142 { N169 N170 N171 N172} PN143 { N173 N174 N175 N176} PN144 { N177 N178 N179 N180} PN145 { N181 N182 N183 N184} PN146 { N185 N186 N187 N188} PN147 { N189 N190 N191 N192} PN148 { N193 N194 N195 N196} PN149 { N197 N198 N1 N2} PN150 { N3 N4 N5 N6} PN151 { N7 N8 N9 N10} PN152 { N11 N12 N13 N14} PN153 { N15 N16 N17 N18} PN154 { N19 N20 N21 N22} PN155 { N23 N24 N25 N26} PN156 { N27 N28 N29 N30} PN157 { N31 N32 N33 N34} PN158 { N35 N36 N37 N38} PN159 { N39 N40 N41 N42} PN160 { N43 N44 N45 N46} PN161 { N47 N48 N49 N50} PN162 { N51 N52 N53 N54} PN163 { N55 N56 N57 N58} PN164 { N59 N60 N61 N62} PN165 { N63 N64 N65 N66} PN166 { N67 N68 N69 N70} PN167 { N71 N72 N73 N74} PN168 { N75 N76 N77 N78} PN169 { N79 N80 N81 N82} PN170 { N83 N84 N85 N86} PN171 { N87 N88 N89 N90} PN172 { N91 N92 N93 N94} PN173 { N95 N96 N97 N98} PN174 { N99 N100 N101 N102} PN175 { N103 N104 N105 N106} PN176 { N107 N108 N109 N110} PN177 { N111 N112 N113 N114} PN178 { N115 N116 N117 N118} PN179 { N119 N120 N121 N122} PN180 { N123 N124 N125 N126} PN181 { N127 N128 N129 N130} PN182 { N131 N132 N133 N134} PN183 { N135 N136 N137 N138} PN184 { N139 N140 N141 N142} PN185 { N143 N144 N145 N146} PN186 { N147 N148 N149 N150} PN187 { N151 N152 N153 N154} PN188 { N155 N156 N157 N158} PN189 { N159 N160 N161 N162} PN190 { N163 N164 N165 N166} PN191 { N167 N168 N169 N170} PN192 { N171 N172 N173 N174} PN193 { N175 N176 N177 N178} PN194 { N179 N180 N181 N182} PN195 { N183 N184 N185 N186} PN196 { N187 N188 N189 N190} PN197 { N191 N192 N193 N194} PN198 { N195 N196 N197 N1} P</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="santander3">santander3messages none  defined. P11 { P693 } Node (4105704 @ 3067312) P23 { P725, P726, P727, P728 } Node (4105569 @ 3067656) P27 { P54, P709, P710, P711, P712 } Node (4105574 @ 3067648) P29 { P707, P708, P709, P710, P718, P719, P720 } Node (4105571 @ 3067649) P36 { P694, P695, P696, P697, P698 } Node (4105726 @ 3067292) P51 { P704, P705, P707, P708, P709, P719, P723, P724, P725 } Node (4105571 @ 3067652) P52 { P718, P719, P720 } Node (4105568 @ 3067649) P53 { P718 } Node (4105570 @ 3067646) P54 { P27 } Node (4105576 @ 3067646) P69 { P839, P840 } Node (4105744 @ 3067612) P71 { P711, P712, P715 } Node (4105577 @ 3067650) P102 { P719, P724, P725, P726 } Node (4105568 @ 3067653) P119 { P553 } Node (4105610 @ 3067560) P120 { P121 } Node (4105540 @ 3067584) P121 { P120 } Node (4105542 @ 3067582) P137 { P484 } Node (4105541 @ 3067522) P140 { P774, P775 } Node (4105768 @ 3067571) P141 { P734, P784, P1001 } Node (4105753 @ 3067574) P144 { P771 } Node (4105742 @ 3067583) P145 { P954, P1031, P1034 } Node (4105710 @ 3067580) P147 { P845, P1021, P1022, P1026 } Node (4105720 @ 3067579) P148 { P1018, P1033 } Node (4105704 @ 3067582) P150 { P451 } Node (4105741 @ 3067577) P154 { P737, P738, P739, P740 } Node (4105745 @ 3067599) P155 { P743, P744 } Node (4105752 @ 3067596) P156 { P721, P758, P759, P760, P780, P1043 } Node (4105767 @ 3067588) P157 { P158 } Node (4105767 @ 3067597) P158 { P157, P1036, P1038 } Node (4105765 @ 3067596) P164 { P793 } Node (4105729 @ 3067577) P165 { P787, P791 } Node (4105735 @ 3067576) P166 { P951, P999, P1000, P1052 } Node (4105747 @ 3067575) P167 { P786, P788, P808 } Node (4105758 @ 3067574) P168 { P789, P790 } Node (4105762 @ 3067573) P169 { P932, P1002 } Node (4105695 @ 3067582) P170 { P766, P767, P768, P1059 } Node (4105749 @ 3067582) P171 { P261 } Node (4105765 @ 3067580) P174 { P745, P746, P747 } Node (4105738 @ 3067599) P176 { P778, P779, P780 } Node (4105770 @ 3067584) P177 { P760, P1043 } Node (4105769 @ 3067591) P178 { P755, P797 } Node (4105782 @ 3067593) P179 { P1037 } Node (4105819 @ 3067572) P180 { P1044, P1045, P1046, P1047 } Node (4105813 @ 3067573) P181 { P822, P823 } Node (4105795 @ 3067586) P182 { P183, P818, P819 } Node (4105794 @ 3067580) P183 { P182, P809, P818 } Node (4105793 @ 3067578) P194 { P449 } Node (4105628 @ 3067585) P218 { P785, P796, P797 } Node (4105786 @ 3067592) P219 { P799 } Node (4105797 @ 3067572) P221 { P1041, P1051 } Node (4105801 @ 3067574) P222 { P717, P732, P807, P819, P821, P822, P823, P825 } Node (4105798 @ 3067583) P223 { P795 } Node (4105794 @ 3067591) P231 { P358, P855, P857, P864, P865 } Node (4105824 @ 3067526) P232 { P1048, P1049, P1050, P1051 } Node (4105805 @ 3067574) P260 { P761, P762, P763 } Node (4105761 @ 3067579) P261 { P171 } Node (4105765 @ 3067578) P262 { P811, P812, P813, P815, P816 } Node (4105785 @ 3067577) P263 { P813, P815, P816 } Node (4105782 @ 3067577) P264 { P803 } Node (4105793 @ 3067568) P267 { P275 } Node (4105585 @ 3067610) P275 { P267 } Node (4105586 @ 3067609) P278 { P608 } Node (4105631 @ 3067598) P281 { P282 } Node (4105513 @ 3067572) P282 { P281 } Node (4105513 @ 3067573) P286 { P303 } Node (4105498 @ 3067559) P302 { P489 } Node (4105530 @ 3067558) P303 { P286 } Node (4105500 @ 3067558) P331 { P332 } Node (4105650 @ 3067555) P332 { P331 } Node (4105652 @ 3067555) P353 { P354 } Node (4105675 @ 3067576) P354 { P353 } Node (4105674 @ 3067577) P357 { P1003 } Node (4105683 @ 3067583) P358 { P231, P853, P854, P856, P864 } Node (4105822 @ 3067526) P359 { P850, P851, P852, P862, P863 } Node (4105817 @ 3067527) P361 { P362, P846, P876, P918 } Node (4105793 @ 3067535) P362 { P361, P917, P918, P919, P920, P921 } Node (4105792 @ 3067537) P363 { P901, P930 } Node (4105779 @ 3067537) P364 { P827, P899, P904, P928, P933 } Node (4105787 @ 3067536) P366 { P941 } Node (4105764 @ 3067539) P367 { P368, P936 } Node (4105759 @ 3067540) P368 { P367, P936 } Node (4105759 @ 3067539) P370 { P804, P870, P942, P943, P944 } Node (4105764 @ 3067544) P371 { P733, P939, P940 } Node (4105761 @ 3067551) P373 { P1006 } Node (4105767 @ 3067556) P375 { P376 } Node (4105789 @ 3067553) P376 { P375 } Node (4105790 @ 3067551) P377 { P390, P979, P980, P981 } Node (4105796 @ 3067553) P378 { P988, P989 } Node (4105810 @ 3067551) P386 { P926, P971 } Node (4105817 @ 3067563) P387 { P962, P963 } Node (4105798 @ 3067566) P388 { P960, P961 } Node (4105796 @ 3067562) P389 { P929, P950, P953, P957, P960, P961 } Node (4105792 @ 3067559) P390 { P377, P931, P956, P958, P959, P979 } Node (4105794 @ 3067554) P391 { P1011, P1012, P1013, P1014 } Node (4105777 @ 3067568) P392 { P997 } Node (4105764 @ 3067568) P393 { P952, P991, P993, P1004, P1016, P1017 } Node (4105766 @ 3067562) P394 { P993 } Node (4105762 @ 3067558) P422 { P1070 } Node (4105540 @ 3067744) P449 { P194 } Node (4105630 @ 3067587) P451 { P150 } Node (4105740 @ 3067579) P454 { P1066, P1067 } Node (4105839 @ 3067524) P466 { P751, P752 } Node (4105773 @ 3067594) P469 { P848, P849, P850, P859, P860, P861 } Node (4105813 @ 3067528) P471 { P733, P948, P949 } Node (4105765 @ 3067553) P484 { P137 } Node (4105539 @ 3067521) P489 { P302 } Node (4105529 @ 3067558) P516 { P525 } Node (4105153 @ 3067722) P519 { P520 } Node (4105336 @ 3067648) P520 { P519 } Node (4105338 @ 3067648) P525 { P516 } Node (4105154 @ 3067724) P553 { P119 } Node (4105612 @ 3067561) P600 { P1076 } Node (4105755 @ 3067300) P601 { P1076 } Node (4105754 @ 3067297) P602 { P869 } Node (4105751 @ 3067296) P603 { P672, P869 } Node (4105750 @ 3067293) P608 { P278 } Node (4105630 @ 3067599) P672 { P603, P814 } Node (4105748 @ 3067292) P673 { P674, P675, P676, P814 } Node (4105748 @ 3067289) P674 { P673, P675, P676 } Node (4105750 @ 3067289) P675 { P673, P674, P676 } Node (4105748 @ 3067287) P676 { P673, P674, P675 } Node (4105750 @ 3067287) P677 { P680, P681 } Node (4105753 @ 3067288) P678 { P680 } Node (4105753 @ 3067291) P679 { P680 } Node (4105756 @ 3067292) P680 { P677, P678, P679 } Node (4105755 @ 3067290) P681 { P677, P682 } Node (4105753 @ 3067287) P682 { P681 } Node (4105753 @ 3067285) P683 { P900, P912, P913, P914 } Node (4105793 @ 3067544) P684 { P1015 } Node (4105771 @ 3067568) P685 { P1008, P1009 } Node (4105783 @ 3067567) P687 { P922, P963, P964 } Node (4105801 @ 3067565) P688 { P935 } Node (4105828 @ 3067548) P690 { P1020 } Node (4105676 @ 3067585) P691 { P1024, P1030 } Node (4105700 @ 3067582) P692 { P1018, P1031, P1032 } Node (4105707 @ 3067581) P693 { P11 } Node (4105706 @ 3067311) P694 { P36, P695, P696 } Node (4105725 @ 3067293) P695 { P36, P694, P696, P697, P698, P702, P703 } Node (4105727 @ 3067293) P696 { P36, P694, P695, P697, P698 } Node (4105727 @ 3067292) P697 { P36, P695, P696 } Node (4105728 @ 3067292) P698 { P36, P695, P696 } Node (4105728 @ 3067292) P699 { P700, P701 } Node (4105733 @ 3067294) P700 { P699, P701 } Node (4105732 @ 3067294) P701 { P699, P700, P702 } Node (4105731 @ 3067294) P702 { P695, P701, P703 } Node (4105729 @ 3067295) P703 { P695, P702 } Node (4105728 @ 3067295) P704 { P51, P706, P707, P723 } Node (4105572 @ 3067653) P705 { P51, P706, P707, P723 } Node (4105572 @ 3067653) P706 { P704, P705, P707, P708, P709, P719, P723, P724, P725 } Node (4105571 @ 3067652) P707 { P29, P51, P704, P705, P706, P708, P709, P710, P719, P720, P724 } Node (4105571 @ 3067651) P708 { P29, P51, P706, P707, P709, P710, P718, P719, P720 } Node (4105571 @ 3067650) P709 { P27, P29, P51, P706, P707, P708, P710 } Node (4105572 @ 3067650) P710 { P27, P29, P707, P708, P709 } Node (4105572 @ 3067649) P711 { P27, P71, P712, P713, P714, P715 } Node (4105575 @ 3067649) P712 { P27, P71, P711, P713, P714, P715 } Node (4105576 @ 3067649) P713 { P711, P712, P715 } Node (4105577 @ 3067650) P714 { P711, P712, P715 } Node (4105577 @ 3067650) P715 { P71, P711, P712, P713, P714 } Node (4105577 @ 3067651) P716 { P794, P795 } Node (4105790 @ 3067590) P717 { P222, P807, P819, P821, P822, P825 } Node (4105797 @ 3067582) P718 { P29, P52, P53, P708, P720 } Node (4105569 @ 3067648) P719 { P29, P51, P52, P102, P706, P707, P708, P720, P724 } Node (4105569 @ 3067651) P720 { P29, P52, P707, P708, P718, P719 } Node (4105569 @ 3067649) P721 { P156, P757, P758, P759, P760, P779, P780, P1043 } Node (4105769 @ 3067587) P722 { P731, P765, P766, P1059 } Node (4105753 @ 3067582) P723 { P51, P704, P705, P706, P727 } Node (4105572 @ 3067654) P724 { P51, P102, P706, P707, P719, P725, P726 } Node (4105569 @ 3067653) P725 { P23, P51, P102, P706, P724, P726, P727 } Node (4105569 @ 3067654) P726 { P23, P102, P724, P725, P727, P728 } Node (4105569 @ 3067655) P727 { P23, P723, P725, P726, P728 } Node (4105570 @ 3067656) P728 { P23, P726, P727 } Node (4105571 @ 3067657) P729 { P787, P791 } Node (4105735 @ 3067576) P730 { P831, P832 } Node (4105730 @ 3067616) P731 { P722, P764 } Node (4105755 @ 3067582) P732 { P222, P807, P821, P822, P823 } Node (4105798 @ 3067585) P733 { P371, P471, P939, P940, P948, P949 } Node (4105763 @ 3067552) P734 { P141, P783, P1001 } Node (4105752 @ 3067574) P735 { P737, P738, P745 } Node (4105742 @ 3067597) P736 { P762, P763, P764 } Node (4105758 @ 3067581) P737 { P154, P735, P738, P739 } Node (4105743 @ 3067597) P738 { P154, P735, P737, P739, P740 } Node (4105744 @ 3067597) P739 { P154, P737, P738, P740 } Node (4105745 @ 3067597) P740 { P154, P738, P739, P741 } Node (4105746 @ 3067597) P741 { P740, P742 } Node (4105748 @ 3067596) P742 { P741, P743 } Node (4105749 @ 3067596) P743 { P155, P742, P744, P798 } Node (4105751 @ 3067596) P744 { P155, P743, P798 } Node (4105753 @ 3067596) P745 { P174, P735, P746 } Node (4105740 @ 3067597) P746 { P174, P745, P747 } Node (4105738 @ 3067598) P747 { P174, P746, P748 } Node (4105736 @ 3067598) P748 { P747 } Node (4105735 @ 3067598) P749 { P1040 } Node (4105759 @ 3067595) P750 { P1040 } Node (4105759 @ 3067595) P751 { P466, P752 } Node (4105774 @ 3067593) P752 { P466, P751, P753 } Node (4105775 @ 3067593) P753 { P752, P754 } Node (4105777 @ 3067592) P754 { P753, P755 } Node (4105778 @ 3067592) P755 { P178, P754 } Node (4105780 @ 3067592) P756 { P757, P758, P778, P779, P780 } Node (4105767 @ 3067584) P757 { P721, P756, P758, P759, P778, P779, P780 } Node (4105767 @ 3067585) P758 { P156, P721, P756, P757, P759, P778, P779, P780 } Node (4105767 @ 3067586) P759 { P156, P721, P757, P758, P760, P779, P780, P1043 } Node (4105767 @ 3067587) P760 { P156, P177, P721, P759, P1043 } Node (4105768 @ 3067589) P761 { P260, P762 } Node (4105762 @ 3067581) P762 { P260, P736, P761, P763 } Node (4105760 @ 3067581) P763 { P260, P736, P762 } Node (4105759 @ 3067581) P764 { P731, P736 } Node (4105756 @ 3067582) P765 { P722, P766, P1059 } Node (4105752 @ 3067582) P766 { P170, P722, P765, P767, P1059 } Node (4105751 @ 3067582) P767 { P170, P766, P768 } Node (4105749 @ 3067583) P768 { P170, P767, P769 } Node (4105748 @ 3067583) P769 { P768, P770, P771 } Node (4105746 @ 3067583) P770 { P769, P771 } Node (4105745 @ 3067583) P771 { P144, P769, P770 } Node (4105744 @ 3067584) P772 { P773, P775, P776, P777 } Node (4105766 @ 3067574) P773 { P772, P775, P776, P777 } Node (4105766 @ 3067575) P774 { P140, P775 } Node (4105767 @ 3067571) P775 { P140, P772, P773, P774, P776, P777 } Node (4105767 @ 3067573) P776 { P772, P773, P775, P777 } Node (4105767 @ 3067574) P777 { P772, P773, P775, P776 } Node (4105767 @ 3067575) P778 { P176, P756, P757, P758, P779, P780 } Node (4105769 @ 3067584) P779 { P176, P721, P756, P757, P758, P759, P778, P780 } Node (4105769 @ 3067585) P780 { P156, P176, P721, P756, P757, P758, P759, P778, P779 } Node (4105769 @ 3067586) P781 { P800, P826 } Node (4105724 @ 3067617) P782 { P809, P810 } Node (4105789 @ 3067577) P783 { P734, P784, P1001 } Node (4105753 @ 3067574) P784 { P141, P783, P786, P808 } Node (4105755 @ 3067573) P785 { P218, P794, P796 } Node (4105787 @ 3067591) P786 { P167, P784, P808 } Node (4105756 @ 3067573) P787 { P165, P729 } Node (4105736 @ 3067576) P788 { P167, P790, P808 } Node (4105759 @ 3067573) P789 { P168, P790 } Node (4105762 @ 3067572) P790 { P168, P788, P789 } Node (4105761 @ 3067572) P791 { P165, P729, P792 } Node (4105733 @ 3067576) P792 { P791, P793 } Node (4105732 @ 3067576) P793 { P164, P792 } Node (4105730 @ 3067577) P794 { P716, P785 } Node (4105789 @ 3067591) P795 { P223, P716 } Node (4105792 @ 3067590) P796 { P218, P785, P797 } Node (4105786 @ 3067591) P797 { P178, P218, P796 } Node (4105784 @ 3067591) P798 { P743, P744 } Node (4105752 @ 3067596) P799 { P219 } Node (4105796 @ 3067572) P800 { P781, P830 } Node (4105725 @ 3067617) P801 { P828, P843, P844 } Node (4105755 @ 3067613) P802 { P805, P826 } Node (4105720 @ 3067618) P803 { P264, P806 } Node (4105795 @ 3067568) P804 { P370, P870, P898, P937, P943, P944, P945 } Node (4105762 @ 3067545) P805 { P802, P826 } Node (4105721 @ 3067618) P806 { P803 } Node (4105796 @ 3067569) P807 { P222, P717, P732, P821, P822, P823 } Node (4105798 @ 3067584) P808 { P167, P784, P786, P788 } Node (4105757 @ 3067573) P809 { P183, P782 } Node (4105791 @ 3067577) P810 { P782, P811 } Node (4105788 @ 3067578) P811 { P262, P810, P812, P813, P816 } Node (4105786 @ 3067578) P812 { P262, P811, P813, P815, P816 } Node (4105785 @ 3067578) P813 { P262, P263, P811, P812, P815 } Node (4105784 @ 3067578) P814 { P672, P673 } Node (4105746 @ 3067290) P815 { P262, P263, P812, P813, P816 } Node (4105783 @ 3067578) P816 { P262, P263, P811, P812, P815 } Node (4105784 @ 3067578) P818 { P182, P183, P819, P824, P825 } Node (4105795 @ 3067579) P819 { P182, P222, P717, P818, P821, P824, P825 } Node (4105796 @ 3067581) P820 { P835, P836, P837 } Node (4105740 @ 3067615) P821 { P222, P717, P732, P807, P819, P822, P823, P825 } Node (4105796 @ 3067583) P822 { P181, P222, P717, P732, P807, P821, P823 } Node (4105796 @ 3067584) P823 { P181, P222, P732, P807, P821, P822 } Node (4105796 @ 3067585) P824 { P818, P819, P825 } Node (4105797 @ 3067579) P825 { P222, P717, P818, P819, P821, P824 } Node (4105797 @ 3067581) P826 { P781, P802, P805 } Node (4105722 @ 3067617) P827 { P364, P899, P904, P933 } Node (4105788 @ 3067534) P828 { P801, P842, P843 } Node (4105753 @ 3067613) P829 { P840, P841 } Node (4105747 @ 3067614) P830 { P800, P831 } Node (4105727 @ 3067617) P831 { P730, P830 } Node (4105729 @ 3067616) P832 { P730, P833 } Node (4105732 @ 3067616) P833 { P832, P834 } Node (4105733 @ 3067616) P834 { P833 } Node (4105735 @ 3067616) P835 { P820 } Node (4105738 @ 3067615) P836 { P820, P837 } Node (4105741 @ 3067615) P837 { P820, P836, P839 } Node (4105742 @ 3067615) P838 { P841, P842 } Node (4105750 @ 3067614) P839 { P69, P837, P840 } Node (4105744 @ 3067614) P840 { P69, P829, P839, P841 } Node (4105746 @ 3067614) P841 { P829, P838, P840 } Node (4105748 @ 3067614) P842 { P828, P838, P843 } Node (4105752 @ 3067613) P843 { P801, P828, P842 } Node (4105754 @ 3067613) P844 { P801, P866 } Node (4105757 @ 3067613) P845 { P147, P1022 } Node (4105721 @ 3067578) P846 { P361, P876, P905 } Node (4105795 @ 3067534) P847 { P996, P997, P1004, P1017 } Node (4105765 @ 3067565) P848 { P469, P849, P858, P859, P860 } Node (4105812 @ 3067529) P849 { P469, P848, P850, P858, P859, P860, P861 } Node (4105813 @ 3067529) P850 { P359, P469, P849, P851, P860, P861, P862 } Node (4105815 @ 3067528) P851 { P359, P850, P852, P860, P861, P862, P863 } Node (4105816 @ 3067528) P852 { P359, P851, P853, P862, P863 } Node (4105818 @ 3067527) P853 { P358, P852, P854, P855, P863 } Node (4105820 @ 3067527) P854 { P358, P853, P855 } Node (4105821 @ 3067527) P855 { P231, P853, P854, P856, P864 } Node (4105822 @ 3067526) P856 { P358, P855, P857, P864, P865 } Node (4105824 @ 3067526) P857 { P231, P856, P864, P865 } Node (4105825 @ 3067526) P858 { P848, P849, P859 } Node (4105811 @ 3067531) P859 { P469, P848, P849, P858, P860 } Node (4105812 @ 3067530) P860 { P469, P848, P849, P850, P851, P859, P861 } Node (4105814 @ 3067530) P861 { P469, P849, P850, P851, P860, P862 } Node (4105815 @ 3067530) P862 { P359, P850, P851, P852, P861, P863 } Node (4105817 @ 3067529) P863 { P359, P851, P852, P853, P862 } Node (4105818 @ 3067529) P864 { P231, P358, P855, P856, P857, P865 } Node (4105824 @ 3067528) P865 { P231, P856, P857, P864 } Node (4105826 @ 3067527) P866 { P844, P868 } Node (4105759 @ 3067612) P867 { P868, P872 } Node (4105762 @ 3067612) P868 { P866, P867 } Node (4105761 @ 3067612) P869 { P602, P603 } Node (4105752 @ 3067294) P870 { P370, P804, P898, P942, P943, P944 } Node (4105762 @ 3067544) P871 { P892, P893 } Node (4105801 @ 3067607) P872 { P867, P873 } Node (4105764 @ 3067612) P873 { P872, P874, P875 } Node (4105766 @ 3067612) P874 { P873, P875 } Node (4105767 @ 3067611) P875 { P873, P874 } Node (4105768 @ 3067611) P876 { P361, P846 } Node (4105793 @ 3067534) P878 { P879, P880 } Node (4105779 @ 3067610) P879 { P878, P880 } Node (4105780 @ 3067610) P880 { P878, P879, P881 } Node (4105781 @ 3067609) P881 { P880, P882 } Node (4105783 @ 3067609) P882 { P881, P883, P884 } Node (4105785 @ 3067609) P883 { P882, P884 } Node (4105786 @ 3067609) P884 { P882, P883, P886 } Node (4105787 @ 3067609) P885 { P889, P890, P891 } Node (4105794 @ 3067608) P886 { P884, P887, P888 } Node (4105789 @ 3067608) P887 { P886, P888 } Node (4105790 @ 3067608) P888 { P886, P887, P889 } Node (4105791 @ 3067608) P889 { P885, P888, P890 } Node (4105793 @ 3067608) P890 { P885, P889, P891 } Node (4105795 @ 3067608) P891 { P885, P890 } Node (4105796 @ 3067607) P892 { P871 } Node (4105799 @ 3067607) P893 { P871, P894 } Node (4105802 @ 3067607) P894 { P893, P895 } Node (4105804 @ 3067606) P895 { P894, P896 } Node (4105806 @ 3067606) P896 { P895 } Node (4105807 @ 3067606) P897 { P914, P915, P917, P920, P921, P923, P924 } Node (4105790 @ 3067540) P898 { P804, P870, P936, P941, P942, P943, P944 } Node (4105761 @ 3067543) P899 { P364, P827, P903, P904, P927, P928, P933 } Node (4105786 @ 3067534) P900 { P683, P911, P912, P913, P916 } Node (4105791 @ 3067546) P901 { P363, P902, P930 } Node (4105781 @ 3067535) P902 { P901, P903, P927, P930 } Node (4105782 @ 3067534) P903 { P899, P902, P927, P928, P933 } Node (4105784 @ 3067534) P904 { P364, P827, P899, P928, P933 } Node (4105787 @ 3067534) P905 { P846 } Node (4105796 @ 3067534) P906 { P907 } Node (4105799 @ 3067533) P907 { P906, P908 } Node (4105800 @ 3067533) P908 { P907, P909 } Node (4105802 @ 3067533) P909 { P908 } Node (4105803 @ 3067533) P910 { P911, P916 } Node (4105793 @ 3067549) P911 { P900, P910, P912, P916 } Node (4105793 @ 3067547) P912 { P683, P900, P911, P913, P916 } Node (4105792 @ 3067546) P913 { P683, P900, P912, P914, P924, P925 } Node (4105792 @ 3067544) P914 { P683, P897, P913, P915, P923, P924, P925 } Node (4105792 @ 3067542) P915 { P897, P914, P917, P920, P921, P923, P924 } Node (4105792 @ 3067540) P916 { P900, P910, P911, P912 } Node (4105791 @ 3067548) P917 { P362, P897, P915, P918, P919, P920, P921, P923 } Node (4105792 @ 3067539) P918 { P361, P362, P917, P919, P920, P921 } Node (4105791 @ 3067537) P919 { P362, P917, P918, P920, P921 } Node (4105790 @ 3067537) P920 { P362, P897, P915, P917, P918, P919, P921 } Node (4105790 @ 3067538) P921 { P362, P897, P915, P917, P918, P919, P920, P923 } Node (4105790 @ 3067539) P922 { P687, P963, P964 } Node (4105801 @ 3067564) P923 { P897, P914, P915, P917, P921, P924, P925 } Node (4105790 @ 3067541) P924 { P897, P913, P914, P915, P923, P925 } Node (4105790 @ 3067542) P925 { P913, P914, P923, P924 } Node (4105790 @ 3067543) P926 { P386, P971, P972 } Node (4105818 @ 3067562) P927 { P899, P902, P903, P928, P933 } Node (4105784 @ 3067536) P928 { P364, P899, P903, P904, P927, P933 } Node (4105785 @ 3067536) P929 { P389, P950, P953, P957, P960, P961 } Node (4105793 @ 3067559) P930 { P363, P901, P902 } Node (4105781 @ 3067536) P931 { P390, P956, P958, P959 } Node (4105792 @ 3067556) P932 { P169 } Node (4105694 @ 3067581) P933 { P364, P827, P899, P903, P904, P927, P928 } Node (4105786 @ 3067535) P934 { P982 } Node (4105801 @ 3067551) P935 { P688, P974, P975 } Node (4105826 @ 3067547) P936 { P367, P368, P898, P941, P942, P943 } Node (4105761 @ 3067541) P937 { P804, P938, P944, P945, P946, P947 } Node (4105762 @ 3067547) P938 { P937, P939, P945, P946, P947 } Node (4105762 @ 3067548) P939 { P371, P733, P938, P940, P946, P947, P948, P949 } Node (4105762 @ 3067550) P940 { P371, P733, P939, P947, P948, P949 } Node (4105762 @ 3067551) P941 { P366, P898, P936, P942, P943 } Node (4105762 @ 3067541) P942 { P370, P870, P898, P936, P941, P943 } Node (4105763 @ 3067542) P943 { P370, P804, P870, P898, P936, P941, P942, P944 } Node (4105763 @ 3067543) P944 { P370, P804, P870, P898, P937, P943, P945 } Node (4105763 @ 3067545) P945 { P804, P937, P938, P944, P946, P947 } Node (4105763 @ 3067547) P946 { P937, P938, P939, P945, P947 } Node (4105763 @ 3067548) P947 { P937, P938, P939, P940, P945, P946, P948 } Node (4105764 @ 3067549) P948 { P471, P733, P939, P940, P947, P949 } Node (4105764 @ 3067551) P949 { P471, P733, P939, P940, P948 } Node (4105764 @ 3067552) P950 { P389, P929, P953, P957, P960, P961 } Node (4105793 @ 3067561) P951 { P166, P999 } Node (4105745 @ 3067575) P952 { P393, P991, P992, P993, P1004, P1005, P1016 } Node (4105765 @ 3067561) P953 { P389, P929, P950, P957, P960, P961 } Node (4105793 @ 3067560) P954 { P145, P1034, P1035 } Node (4105712 @ 3067579) P955 { P968, P969, P970 } Node (4105812 @ 3067563) P956 { P390, P931, P958, P959 } Node (4105792 @ 3067555) P957 { P389, P929, P950, P953, P960, P961 } Node (4105794 @ 3067559) P958 { P390, P931, P956, P959 } Node (4105793 @ 3067554) P959 { P390, P931, P956, P958 } Node (4105794 @ 3067556) P960 { P388, P389, P929, P950, P953, P957, P961 } Node (4105794 @ 3067560) P961 { P388, P389, P929, P950, P953, P957, P960 } Node (4105794 @ 3067561) P962 { P387, P963 } Node (4105798 @ 3067565) P963 { P387, P687, P922, P962 } Node (4105800 @ 3067564) P964 { P687, P922, P965, P966 } Node (4105803 @ 3067564) P965 { P964, P966 } Node (4105804 @ 3067564) P966 { P964, P965, P967 } Node (4105805 @ 3067563) P967 { P966 } Node (4105807 @ 3067563) P968 { P955 } Node (4105810 @ 3067563) P969 { P955, P970 } Node (4105813 @ 3067563) P970 { P955, P969, P971 } Node (4105814 @ 3067562) P971 { P386, P926, P970 } Node (4105816 @ 3067562) P972 { P926, P973 } Node (4105820 @ 3067562) P973 { P972 } Node (4105821 @ 3067561) P974 { P935, P975, P977 } Node (4105824 @ 3067547) P975 { P935, P974, P977 } Node (4105825 @ 3067547) P976 { P995, P1008 } Node (4105786 @ 3067566) P977 { P974, P975, P978 } Node (4105823 @ 3067547) P978 { P977 } Node (4105821 @ 3067547) P979 { P377, P390, P980, P981 } Node (4105796 @ 3067552) P980 { P377, P979, P981 } Node (4105797 @ 3067551) P981 { P377, P979, P980, P982 } Node (4105798 @ 3067551) P982 { P934, P981 } Node (4105800 @ 3067551) P983 { P987 } Node (4105818 @ 3067548) P984 { P985 } Node (4105804 @ 3067550) P985 { P984, P986, P988 } Node (4105806 @ 3067549) P986 { P985, P988 } Node (4105807 @ 3067549) P987 { P983, P990 } Node (4105816 @ 3067548) P988 { P378, P985, P986 } Node (4105808 @ 3067549) P989 { P378 } Node (4105811 @ 3067549) P990 { P987 } Node (4105814 @ 3067548) P991 { P393, P952, P992, P993, P1004, P1005, P1016 } Node (4105764 @ 3067561) P992 { P952, P991, P993, P1004, P1016, P1017 } Node (4105766 @ 3067562) P993 { P393, P394, P952, P991, P992, P1005, P1006, P1016 } Node (4105764 @ 3067560) P994 { P1021, P1022, P1026, P1028 } Node (4105717 @ 3067579) P995 { P976 } Node (4105787 @ 3067566) P996 { P847, P997, P1004, P1017 } Node (4105766 @ 3067565) P997 { P392, P847, P996 } Node (4105765 @ 3067567) P998 { P1011, P1014, P1015 } Node (4105774 @ 3067567) P999 { P166, P951, P1000 } Node (4105746 @ 3067574) P1000 { P166, P999, P1052 } Node (4105748 @ 3067574) P1001 { P141, P734, P783, P1052 } Node (4105751 @ 3067574) P1002 { P169, P1030 } Node (4105697 @ 3067581) P1003 { P357, P1023, P1025 } Node (4105682 @ 3067583) P1004 { P393, P847, P952, P991, P992, P996, P1016, P1017 } Node (4105766 @ 3067563) P1005 { P952, P991, P993, P1006 } Node (4105765 @ 3067559) P1006 { P373, P993, P1005 } Node (4105765 @ 3067558) P1007 { P1008, P1009 } Node (4105783 @ 3067567) P1008 { P685, P976, P1007, P1009 } Node (4105784 @ 3067567) P1009 { P685, P1007, P1008, P1010 } Node (4105782 @ 3067567) P1010 { P1009, P1012, P1013 } Node (4105780 @ 3067567) P1011 { P391, P998, P1014, P1015 } Node (4105775 @ 3067567) P1012 { P391, P1010, P1013 } Node (4105779 @ 3067567) P1013 { P391, P1010, P1012, P1014 } Node (4105778 @ 3067567) P1014 { P391, P998, P1011, P1013 } Node (4105776 @ 3067567) P1015 { P684, P998, P1011 } Node (4105773 @ 3067568) P1016 { P393, P952, P991, P992, P993, P1004, P1017 } Node (4105764 @ 3067562) P1017 { P393, P847, P992, P996, P1004, P1016 } Node (4105764 @ 3067564) P1018 { P148, P692, P1032, P1033 } Node (4105705 @ 3067580) P1019 { P1023 } Node (4105679 @ 3067583) P1020 { P690 } Node (4105676 @ 3067584) P1021 { P147, P994, P1022 } Node (4105718 @ 3067578) P1022 { P147, P845, P994, P1021, P1026 } Node (4105719 @ 3067578) P1023 { P1003, P1019 } Node (4105680 @ 3067583) P1024 { P691, P1030, P1033 } Node (4105701 @ 3067580) P1025 { P1003 } Node (4105683 @ 3067583) P1026 { P147, P994, P1022 } Node (4105718 @ 3067578) P1028 { P994, P1035 } Node (4105715 @ 3067579) P1030 { P691, P1002, P1024 } Node (4105699 @ 3067580) P1031 { P145, P692, P1032, P1034 } Node (4105709 @ 3067579) P1032 { P692, P1018, P1031 } Node (4105707 @ 3067579) P1033 { P148, P1018, P1024 } Node (4105703 @ 3067580) P1034 { P145, P954, P1031 } Node (4105711 @ 3067579) P1035 { P954, P1028 } Node (4105714 @ 3067579) P1036 { P158, P1038, P1039 } Node (4105764 @ 3067594) P1037 { P179, P1044 } Node (4105817 @ 3067574) P1038 { P158, P1036 } Node (4105765 @ 3067594) P1039 { P1036, P1040 } Node (4105762 @ 3067594) P1040 { P749, P750, P1039 } Node (4105761 @ 3067595) P1041 { P221, P1051 } Node (4105801 @ 3067576) P1042 { P1047, P1048, P1049 } Node (4105809 @ 3067574) P1043 { P156, P177, P721, P759, P760 } Node (4105769 @ 3067589) P1044 { P180, P1037, P1045 } Node (4105815 @ 3067574) P1045 { P180, P1044, P1046, P1047 } Node (4105813 @ 3067574) P1046 { P180, P1045, P1047 } Node (4105812 @ 3067574) P1047 { P180, P1042, P1045, P1046 } Node (4105811 @ 3067574) P1048 { P232, P1042, P1050 } Node (4105807 @ 3067575) P1049 { P232, P1042, P1050 } Node (4105807 @ 3067575) P1050 { P232, P1048, P1049, P1051 } Node (4105805 @ 3067575) P1051 { P221, P232, P1041, P1050 } Node (4105803 @ 3067575) P1052 { P166, P1000, P1001 } Node (4105749 @ 3067574) P1054 { P1060 } Node (4105674 @ 3067629) P1059 { P170, P722, P765, P766 } Node (4105751 @ 3067580) P1060 { P1054 } Node (4105676 @ 3067629) P1066 { P454, P1067 } Node (4105839 @ 3067522) P1067 { P454, P1066 } Node (4105839 @ 3067523) P1070 { P422 } Node (4105539 @ 3067743) P1071 { P1074 } Node (4105335 @ 3067822) P1074 { P1071 } Node (4105333 @ 3067822) P1076 { P600, P601 } Node (4105755 @ 3067299)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="molene2">molene2messages none  defined. P1 { P2, P20, P31 } Node (250 @ 51) (70)P2 { P1, P3, P20 } Node (193 @ 71) (70)P3 { P2, P4, P5 } Node (131 @ 47) (70)P4 { P3, P5 } Node (106 @ 38) (70)P5 { P3, P4, P6 } Node (117 @ 96) (70)P6 { P5, P7 } Node (84 @ 119) (70)P7 { P6, P8 } Node (53 @ 128) (70)P8 { P7 } Node (33 @ 175) (70)P9 { P10 } Node (75 @ 245) (70)P10 { P9, P11 } Node (69 @ 299) (70)P11 { P10, P12 } Node (78 @ 334) (70)P12 { P11 } Node (107 @ 383) (70)P13 { P14 } Node (195 @ 408) (70)P14 { P13, P15 } Node (229 @ 381) (70)P15 { P14, P16 } Node (281 @ 344) (70)P16 { P15 } Node (317 @ 304) (70)P17 { P18, P21 } Node (297 @ 221) (70)P18 { P17, P19, P21, P32, P33 } Node (278 @ 187) (70)P19 { P18, P20 } Node (245 @ 152) (70)P20 { P1, P2, P19 } Node (222 @ 112) (70)P21 { P17, P18, P22, P23, P32, P33 } Node (345 @ 176) (70)P22 { P21, P23, P33 } Node (379 @ 184) (70)P23 { P21, P22, P24, P30, P33 } Node (384 @ 136) (70)P24 { P23, P25, P26, P27 } Node (418 @ 104) (70)P25 { P24, P26, P27 } Node (459 @ 96) (70)P26 { P24, P25, P27, P28 } Node (425 @ 71) (70)P27 { P24, P25, P26, P28, P29 } Node (425 @ 45) (70)P28 { P26, P27, P29, P30 } Node (388 @ 38) (70)P29 { P27, P28, P30, P31 } Node (356 @ 54) (70)P30 { P23, P28, P29, P31, P32, P33 } Node (341 @ 87) (70)P31 { P1, P29, P30, P32, P33 } Node (310 @ 79) (70)P32 { P18, P21, P30, P31, P33 } Node (311 @ 126) (70)P33 { P18, P21, P22, P23, P30, P31, P32 } Node (324 @ 147) (70)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange100Points10">genRange100Points10messages none  defined. P3 { P5, P7 } Node (629 @ 519) (100)P5 { P3, P7 } Node (595 @ 586) (100)P7 { P3, P5 } Node (613 @ 615) (100)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="mytho17">mytho17messages none  defined. Px57y44 { Px57y43, Px57y45, Px56y44 } CellNode (57 @ 44) (20)Px34y28 { Px33y28, Px34y27, Px35y28 } CellNode (34 @ 28) (20)Px31y42 { Px30y42, Px32y42, Px31y41 } CellNode (31 @ 42) (20)Px52y33 { Px52y32, Px52y34, Px53y33, Px51y33 } CellNode (52 @ 33) (20)Px27y23 { Px26y23 } CellNode (27 @ 23) (20)Px57y32 { Px57y31, Px56y32, Px57y33 } CellNode (57 @ 32) (20)Px43y46 { Px44y46, Px42y46, Px43y47, Px43y45 } CellNode (43 @ 46) (20)Px39y57 { Px40y57, Px39y56, Px38y57 } CellNode (39 @ 57) (20)Px50y39 { Px50y40, Px51y39, Px49y39, Px50y38 } CellNode (50 @ 39) (20)Px48y45 { Px48y46, Px47y45, Px49y45, Px48y44 } CellNode (48 @ 45) (20)Px43y34 { Px43y35, Px42y34 } CellNode (43 @ 34) (20)Px55y38 { Px55y39, Px56y38, Px54y38, Px55y37 } CellNode (55 @ 38) (20)Px18y24 { Px17y24 } CellNode (18 @ 24) (20)Px52y52 { Px52y53, Px53y52, Px52y51, Px51y52 } CellNode (52 @ 52) (20)Px52y22 { Px53y22, Px52y21, Px52y23, Px51y22 } CellNode (52 @ 22) (20)Px22y31 { Px22y30, Px21y31, Px22y32, Px23y31 } CellNode (22 @ 31) (20)Px36y3 { Px35y3, Px36y2 } CellNode (36 @ 3) (20)Px57y51 { Px56y51, Px57y50, Px57y52 } CellNode (57 @ 51) (20)Px57y21 { Px56y21, Px57y20, Px57y22 } CellNode (57 @ 21) (20)Px52y10 { Px51y10, Px52y11 } CellNode (52 @ 10) (20)Px50y28 { Px50y27, Px50y29, Px49y28, Px51y28 } CellNode (50 @ 28) (20)Px46y39 { Px45y39, Px46y40 } CellNode (46 @ 39) (20)Px43y53 { Px43y54, Px44y53, Px42y53 } CellNode (43 @ 53) (20)Px49y6 { Px49y5 } CellNode (49 @ 6) (20)Px55y27 { Px56y27, Px55y28, Px54y27, Px55y26 } CellNode (55 @ 27) (20)Px52y41 { Px52y40, Px53y41, Px51y41, Px52y42 } CellNode (52 @ 41) (20)Px48y52 { Px48y51, Px47y52, Px48y53, Px49y52 } CellNode (48 @ 52) (20)Px25y36 { Px25y37, Px26y36, Px24y36, Px25y35 } CellNode (25 @ 36) (20)Px48y22 { Px47y22, Px48y23 } CellNode (48 @ 22) (20)Px55y15 { Px55y16, Px56y15, Px55y14, Px54y15 } CellNode (55 @ 15) (20)Px57y40 { Px57y41, Px57y39, Px56y40 } CellNode (57 @ 40) (20)Px34y54 { Px34y55 } CellNode (34 @ 54) (20)Px55y57 { Px55y56, Px56y57, Px54y57 } CellNode (55 @ 57) (20)Px50y47 { Px50y48, Px51y47, Px49y47, Px50y46 } CellNode (50 @ 47) (20)Px46y28 { Px47y28 } CellNode (46 @ 28) (20)Px43y42 { Px43y43, Px44y42 } CellNode (43 @ 42) (20)Px39y23 { Px38y23 } CellNode (39 @ 23) (20)Px18y43 { Px17y43, Px19y43 } CellNode (18 @ 43) (20)Px55y46 { Px56y46, Px55y47, Px55y45, Px54y46 } CellNode (55 @ 46) (20)Px48y41 { Px48y42, Px47y41, Px48y40, Px49y41 } CellNode (48 @ 41) (20)Px39y11 { Px38y11, Px40y11 } CellNode (39 @ 11) (20)Px55y34 { Px56y34, Px55y33, Px54y34, Px55y35 } CellNode (55 @ 34) (20)Px37y29 { Px36y29, Px38y29 } CellNode (37 @ 29) (20)Px34y43 { Px33y43, Px35y43, Px34y42 } CellNode (34 @ 43) (20)Px46y47 { Px46y46, Px45y47, Px47y47, Px46y48 } CellNode (46 @ 47) (20)Px20y45 { Px21y45 } CellNode (20 @ 45) (20)Px50y24 { Px51y24, Px49y24, Px50y25, Px50y23 } CellNode (50 @ 24) (20)Px49y2 { Px49y3 } CellNode (49 @ 2) (20)Px39y30 { Px39y29, Px39y31 } CellNode (39 @ 30) (20)Px55y23 { Px56y23, Px54y23, Px55y24, Px55y22 } CellNode (55 @ 23) (20)Px42y5 { Px42y6, Px43y5, Px42y4 } CellNode (42 @ 5) (20)Px11y34 { Px11y35, Px10y34 } CellNode (11 @ 34) (20)Px50y43 { Px50y44, Px49y43, Px51y43, Px50y42 } CellNode (50 @ 43) (20)Px55y54 { Px55y55, Px56y54, Px54y54, Px55y53 } CellNode (55 @ 54) (20)Px53y29 { Px54y29, Px53y28, Px52y29, Px53y30 } CellNode (53 @ 29) (20)Px27y3 { Px28y3 } CellNode (27 @ 3) (20)Px53y17 { Px54y17, Px52y17, Px53y16, Px53y18 } CellNode (53 @ 17) (20)Px41y56 { Px41y57, Px40y56, Px42y56, Px41y55 } CellNode (41 @ 56) (20)Px55y42 { Px56y42, Px55y43, Px55y41, Px54y42 } CellNode (55 @ 42) (20)Px32y26 { Px32y27, Px31y26 } CellNode (32 @ 26) (20)Px46y55 { Px45y55, Px46y56, Px46y54, Px47y55 } CellNode (46 @ 55) (20)Px41y44 { Px42y44, Px41y45 } CellNode (41 @ 44) (20)Px55y30 { Px56y30, Px54y30, Px55y29, Px55y31 } CellNode (55 @ 30) (20)Px53y48 { Px54y48, Px53y47, Px52y48, Px53y49 } CellNode (53 @ 48) (20)Px49y29 { Px49y28, Px50y29 } CellNode (49 @ 29) (20)Px46y43 { Px45y43, Px46y42, Px46y44, Px47y43 } CellNode (46 @ 43) (20)Px32y57 { Px33y57, Px32y56 } CellNode (32 @ 57) (20)Px28y38 { Px28y39, Px27y38 } CellNode (28 @ 38) (20)Px50y50 { Px51y50, Px49y50, Px50y49, Px50y51 } CellNode (50 @ 50) (20)Px37y56 { Px37y57, Px38y56, Px36y56, Px37y55 } CellNode (37 @ 56) (20)Px44y6 { Px43y6, Px44y5, Px45y6 } CellNode (44 @ 6) (20)Px44y49 { Px43y49, Px44y50, Px45y49, Px44y48 } CellNode (44 @ 49) (20)Px37y44 { Px37y43, Px36y44 } CellNode (37 @ 44) (20)Px53y37 { Px54y37, Px53y38, Px52y37, Px53y36 } CellNode (53 @ 37) (20)Px49y48 { Px49y49, Px50y48, Px49y47, Px48y48 } CellNode (49 @ 48) (20)Px23y46 { Px23y47, Px22y46 } CellNode (23 @ 46) (20)Px16y41 { Px16y42 } CellNode (16 @ 41) (20)Px55y50 { Px55y51, Px54y50, Px56y50, Px55y49 } CellNode (55 @ 50) (20)Px53y25 { Px53y26, Px53y24, Px52y25, Px54y25 } CellNode (53 @ 25) (20)Px44y38 { Px45y38, Px44y37, Px44y39 } CellNode (44 @ 38) (20)Px53y13 { Px52y13, Px53y12, Px53y14, Px54y13 } CellNode (53 @ 13) (20)Px53y56 { Px53y57, Px54y56, Px52y56, Px53y55 } CellNode (53 @ 56) (20)Px49y37 { Px48y37, Px49y38, Px50y37 } CellNode (49 @ 37) (20)Px46y51 { Px45y51, Px46y50, Px46y52, Px47y51 } CellNode (46 @ 51) (20)Px53y44 { Px54y44, Px52y44, Px53y43, Px53y45 } CellNode (53 @ 44) (20)Px49y25 { Px50y25, Px49y24, Px49y26 } CellNode (49 @ 25) (20)Px44y57 { Px43y57, Px45y57, Px44y56 } CellNode (44 @ 57) (20)Px44y45 { Px44y46, Px45y45, Px44y44, Px43y45 } CellNode (44 @ 45) (20)Px21y29 { Px20y29, Px21y30 } CellNode (21 @ 29) (20)Px50y7 { Px50y8 } CellNode (50 @ 7) (20)Px56y49 { Px56y50, Px57y49, Px56y48, Px55y49 } CellNode (56 @ 49) (20)Px14y24 { Px14y23, Px15y24, Px13y24 } CellNode (14 @ 24) (20)Px56y19 { Px56y18, Px56y20, Px57y19, Px55y19 } CellNode (56 @ 19) (20)Px53y33 { Px54y33, Px52y33, Px53y34, Px53y32 } CellNode (53 @ 33) (20)Px28y53 { Px28y52, Px29y53 } CellNode (28 @ 53) (20)Px49y44 { Px49y45, Px50y44, Px49y43, Px48y44 } CellNode (49 @ 44) (20)Px26y28 { Px26y29 } CellNode (26 @ 28) (20)Px53y21 { Px53y20, Px52y21, Px53y22, Px54y21 } CellNode (53 @ 21) (20)Px51y39 { Px50y39, Px51y38, Px51y40, Px52y39 } CellNode (51 @ 39) (20)Px48y8 { Px48y9, Px48y7 } CellNode (48 @ 8) (20)Px56y38 { Px56y37, Px57y38, Px55y38, Px56y39 } CellNode (56 @ 38) (20)Px53y52 { Px52y52, Px53y53, Px53y51, Px54y52 } CellNode (53 @ 52) (20)Px51y27 { Px51y26, Px50y27, Px51y28, Px52y27 } CellNode (51 @ 27) (20)Px49y33 { Px49y32, Px50y33 } CellNode (49 @ 33) (20)Px23y31 { Px23y32, Px22y31 } CellNode (23 @ 31) (20)Px56y26 { Px56y27, Px57y26, Px55y26, Px56y25 } CellNode (56 @ 26) (20)Px53y40 { Px52y40, Px53y39, Px53y41, Px54y40 } CellNode (53 @ 40) (20)Px28y30 { Px28y29 } CellNode (28 @ 30) (20)Px44y53 { Px45y53, Px43y53, Px44y54, Px44y52 } CellNode (44 @ 53) (20)Px51y46 { Px51y45, Px51y47, Px52y46, Px50y46 } CellNode (51 @ 46) (20)Px47y27 { Px48y27, Px47y28 } CellNode (47 @ 27) (20)Px30y55 { Px30y54, Px31y55 } CellNode (30 @ 55) (20)Px49y52 { Px50y52, Px48y52, Px49y51 } CellNode (49 @ 52) (20)Px26y36 { Px27y36, Px26y35, Px26y37, Px25y36 } CellNode (26 @ 36) (20)Px56y45 { Px56y46, Px57y45, Px56y44, Px55y45 } CellNode (56 @ 45) (20)Px56y15 { Px56y14, Px57y15, Px56y16, Px55y15 } CellNode (56 @ 15) (20)Px49y10 { Px49y9, Px50y10 } CellNode (49 @ 10) (20)Px49y40 { Px50y40, Px48y40, Px49y39, Px49y41 } CellNode (49 @ 40) (20)Px44y41 { Px44y40, Px44y42, Px45y41 } CellNode (44 @ 41) (20)Px42y47 { Px42y48, Px43y47, Px41y47, Px42y46 } CellNode (42 @ 47) (20)Px8y24 { Px7y24, Px9y24 } CellNode (8 @ 24) (20)Px35y42 { Px35y43, Px34y42 } CellNode (35 @ 42) (20)Px50y3 { Px49y3 } CellNode (50 @ 3) (20)Px51y35 { Px52y35, Px51y34, Px51y36 } CellNode (51 @ 35) (20)Px47y46 { Px48y46, Px46y46, Px47y45, Px47y47 } CellNode (47 @ 46) (20)Px56y57 { Px55y57, Px57y57, Px56y56 } CellNode (56 @ 57) (20)Px56y34 { Px57y34, Px55y34, Px56y35, Px56y33 } CellNode (56 @ 34) (20)Px51y23 { Px51y22, Px51y24, Px52y23, Px50y23 } CellNode (51 @ 23) (20)Px56y22 { Px56y23, Px57y22, Px55y22, Px56y21 } CellNode (56 @ 22) (20)Px51y54 { Px51y53, Px52y54, Px51y55 } CellNode (51 @ 54) (20)Px42y24 { Px43y24, Px41y24 } CellNode (42 @ 24) (20)Px54y28 { Px54y29, Px55y28, Px53y28, Px54y27 } CellNode (54 @ 28) (20)Px51y42 { Px51y43, Px52y42, Px51y41, Px50y42 } CellNode (51 @ 42) (20)Px47y23 { Px47y22, Px46y23, Px48y23 } CellNode (47 @ 23) (20)Px8y32 { Px8y33, Px7y32 } CellNode (8 @ 32) (20)Px3y21 { Px4y21, Px2y21 } CellNode (3 @ 21) (20)Px56y53 { Px56y54, Px57y53, Px55y53, Px56y52 } CellNode (56 @ 53) (20)Px56y41 { Px56y42, Px57y41, Px55y41, Px56y40 } CellNode (56 @ 41) (20)Px42y55 { Px43y55, Px42y56, Px42y54, Px41y55 } CellNode (42 @ 55) (20)Px47y54 { Px48y54, Px46y54, Px47y53, Px47y55 } CellNode (47 @ 54) (20)Px42y43 { Px43y43, Px42y44 } CellNode (42 @ 43) (20)Px54y17 { Px54y18, Px53y17, Px55y17, Px54y16 } CellNode (54 @ 17) (20)Px51y31 { Px52y31, Px51y30 } CellNode (51 @ 31) (20)Px47y42 { Px46y42, Px47y41, Px47y43, Px48y42 } CellNode (47 @ 42) (20)Px33y56 { Px32y56, Px33y55, Px33y57, Px34y56 } CellNode (33 @ 56) (20)Px26y51 { Px27y51, Px26y50 } CellNode (26 @ 51) (20)Px43y8 { Px43y9 } CellNode (43 @ 8) (20)Px56y30 { Px57y30, Px55y30, Px56y31, Px56y29 } CellNode (56 @ 30) (20)Px29y25 { Px29y24, Px30y25 } CellNode (29 @ 25) (20)Px54y48 { Px55y48, Px53y48, Px54y49, Px54y47 } CellNode (54 @ 48) (20)Px54y36 { Px54y37, Px55y36, Px53y36, Px54y35 } CellNode (54 @ 36) (20)Px51y50 { Px51y49, Px51y51, Px50y50, Px52y50 } CellNode (51 @ 50) (20)Px54y24 { Px55y24, Px53y24, Px54y23, Px54y25 } CellNode (54 @ 24) (20)Px45y49 { Px46y49, Px44y49, Px45y48, Px45y50 } CellNode (45 @ 49) (20)Px17y40 { Px18y40, Px17y39 } CellNode (17 @ 40) (20)Px45y37 { Px45y38, Px44y37 } CellNode (45 @ 37) (20)Px54y55 { Px54y56, Px55y55, Px53y55, Px54y54 } CellNode (54 @ 55) (20)Px47y50 { Px46y50, Px47y49, Px48y50, Px47y51 } CellNode (47 @ 50) (20)Px24y34 { Px24y33, Px24y35, Px25y34 } CellNode (24 @ 34) (20)Px40y57 { Px40y56, Px41y57, Px39y57 } CellNode (40 @ 57) (20)Px54y13 { Px55y13, Px54y14, Px53y13, Px54y12 } CellNode (54 @ 13) (20)Px10y36 { Px11y36, Px10y35 } CellNode (10 @ 36) (20)Px45y26 { Px46y26 } CellNode (45 @ 26) (20)Px45y56 { Px45y55, Px44y56, Px45y57, Px46y56 } CellNode (45 @ 56) (20)Px29y21 { Px29y20 } CellNode (29 @ 21) (20)Px54y44 { Px54y45, Px53y44, Px55y44, Px54y43 } CellNode (54 @ 44) (20)Px6y23 { Px7y23 } CellNode (6 @ 23) (20)Px10y24 { Px9y24, Px10y25, Px11y24 } CellNode (10 @ 24) (20)Px27y39 { Px28y39, Px27y38 } CellNode (27 @ 39) (20)Px57y18 { Px57y17, Px57y19, Px56y18 } CellNode (57 @ 18) (20)Px40y46 { Px41y46, Px40y45, Px40y47 } CellNode (40 @ 46) (20)Px36y57 { Px36y56, Px37y57, Px35y57 } CellNode (36 @ 57) (20)Px54y32 { Px54y33, Px55y32, Px54y31, Px53y32 } CellNode (54 @ 32) (20)Px29y52 { Px30y52, Px28y52, Px29y51, Px29y53 } CellNode (29 @ 52) (20)Px52y19 { Px52y20, Px53y19, Px52y18 } CellNode (52 @ 19) (20)Px45y45 { Px46y45, Px44y45, Px45y44, Px45y46 } CellNode (45 @ 45) (20)Px54y20 { Px55y20, Px53y20, Px54y19, Px54y21 } CellNode (54 @ 20) (20)Px57y49 { Px57y48, Px57y50, Px56y49 } CellNode (57 @ 49) (20)Px52y38 { Px53y38, Px51y38, Px52y37, Px52y39 } CellNode (52 @ 38) (20)Px15y24 { Px14y24, Px16y24, Px15y23 } CellNode (15 @ 24) (20)Px57y37 { Px57y36, Px56y37, Px57y38 } CellNode (57 @ 37) (20)Px54y51 { Px55y51, Px54y50, Px53y51, Px54y52 } CellNode (54 @ 51) (20)Px45y5 { Px46y5, Px44y5, Px45y6 } CellNode (45 @ 5) (20)Px29y41 { Px29y40, Px30y41 } CellNode (29 @ 41) (20)Px52y57 { Px52y56, Px53y57, Px51y57 } CellNode (52 @ 57) (20)Px15y43 { Px16y43 } CellNode (15 @ 43) (20)Px45y22 { Px46y22, Px45y21 } CellNode (45 @ 22) (20)Px40y11 { Px39y11 } CellNode (40 @ 11) (20)Px52y27 { Px53y27, Px51y27, Px52y28, Px52y26 } CellNode (52 @ 27) (20)Px57y56 { Px57y55, Px57y57, Px56y56 } CellNode (57 @ 56) (20)Px57y26 { Px56y26, Px57y27, Px57y25 } CellNode (57 @ 26) (20)Px31y54 { Px31y55, Px32y54, Px30y54, Px31y53 } CellNode (31 @ 54) (20)Px54y40 { Px55y40, Px53y40, Px54y41, Px54y39 } CellNode (54 @ 40) (20)Px48y38 { Px48y39, Px49y38, Px48y37 } CellNode (48 @ 38) (20)Px57y14 { Px57y13, Px56y14, Px57y15 } CellNode (57 @ 14) (20)Px36y8 { Px36y7 } CellNode (36 @ 8) (20)Px36y23 { Px37y23 } CellNode (36 @ 23) (20)Px52y15 { Px53y15, Px52y16, Px52y14 } CellNode (52 @ 15) (20)Px52y46 { Px52y47, Px51y46, Px53y46, Px52y45 } CellNode (52 @ 46) (20)Px45y52 { Px45y51, Px45y53, Px46y52, Px44y52 } CellNode (45 @ 52) (20)Px48y27 { Px48y28, Px47y27, Px49y27, Px48y26 } CellNode (48 @ 27) (20)Px22y36 { Px21y36 } CellNode (22 @ 36) (20)Px9y35 { Px9y34, Px10y35 } CellNode (9 @ 35) (20)Px57y45 { Px57y44, Px57y46, Px56y45 } CellNode (57 @ 45) (20)Px9y24 { Px9y25, Px10y24, Px8y24 } CellNode (9 @ 24) (20)Px52y34 { Px53y34, Px52y33, Px51y34, Px52y35 } CellNode (52 @ 34) (20)Px45y41 { Px45y42, Px45y40, Px46y41, Px44y41 } CellNode (45 @ 41) (20)Px57y33 { Px57y34, Px56y33, Px57y32 } CellNode (57 @ 33) (20)Px43y47 { Px43y46, Px43y48, Px42y47, Px44y47 } CellNode (43 @ 47) (20)Px48y46 { Px49y46, Px47y46, Px48y47, Px48y45 } CellNode (48 @ 46) (20)Px43y35 { Px44y35, Px43y34 } CellNode (43 @ 35) (20)Px55y39 { Px55y40, Px56y39, Px54y39, Px55y38 } CellNode (55 @ 39) (20)Px52y53 { Px52y52, Px51y53, Px52y54, Px53y53 } CellNode (52 @ 53) (20)Px52y23 { Px52y24, Px51y23, Px53y23, Px52y22 } CellNode (52 @ 23) (20)Px22y32 { Px23y32, Px22y31 } CellNode (22 @ 32) (20)Px57y52 { Px56y52, Px57y51, Px57y53 } CellNode (57 @ 52) (20)Px57y22 { Px56y22, Px57y23, Px57y21 } CellNode (57 @ 22) (20)Px52y11 { Px53y11, Px52y10, Px51y11, Px52y12 } CellNode (52 @ 11) (20)Px50y29 { Px50y28, Px51y29, Px49y29 } CellNode (50 @ 29) (20)Px43y54 { Px43y55, Px44y54, Px42y54, Px43y53 } CellNode (43 @ 54) (20)Px25y49 { Px25y50, Px24y49, Px26y49 } CellNode (25 @ 49) (20)Px43y24 { Px42y24 } CellNode (43 @ 24) (20)Px55y28 { Px55y27, Px56y28, Px55y29, Px54y28 } CellNode (55 @ 28) (20)Px52y42 { Px51y42, Px52y43, Px52y41, Px53y42 } CellNode (52 @ 42) (20)Px4y21 { Px3y21 } CellNode (4 @ 21) (20)Px48y53 { Px48y54, Px48y52, Px47y53 } CellNode (48 @ 53) (20)Px25y37 { Px25y36, Px26y37 } CellNode (25 @ 37) (20)Px55y16 { Px55y17, Px56y16, Px54y16, Px55y15 } CellNode (55 @ 16) (20)Px57y41 { Px57y42, Px57y40, Px56y41 } CellNode (57 @ 41) (20)Px52y30 { Px51y30, Px52y29, Px52y31, Px53y30 } CellNode (52 @ 30) (20)Px48y23 { Px47y23, Px49y23, Px48y22 } CellNode (48 @ 23) (20)Px50y48 { Px51y48, Px50y47, Px50y49, Px49y48 } CellNode (50 @ 48) (20)Px27y50 { Px26y50, Px28y50, Px27y51 } CellNode (27 @ 50) (20)Px43y43 { Px43y44, Px44y43, Px42y43, Px43y42 } CellNode (43 @ 43) (20)Px20y27 { Px20y28 } CellNode (20 @ 27) (20)Px34y55 { Px35y55, Px34y54, Px33y55, Px34y56 } CellNode (34 @ 55) (20)Px50y36 { Px51y36, Px50y37 } CellNode (50 @ 36) (20)Px55y47 { Px55y46, Px56y47, Px55y48, Px54y47 } CellNode (55 @ 47) (20)Px48y42 { Px49y42, Px47y42, Px48y43, Px48y41 } CellNode (48 @ 42) (20)Px55y35 { Px55y36, Px56y35, Px55y34, Px54y35 } CellNode (55 @ 35) (20)Px46y48 { Px47y48, Px46y49, Px46y47, Px45y48 } CellNode (46 @ 48) (20)Px50y25 { Px49y25, Px50y24, Px50y26, Px51y25 } CellNode (50 @ 25) (20)Px50y55 { Px51y55, Px50y56 } CellNode (50 @ 55) (20)Px43y50 { Px43y49, Px44y50 } CellNode (43 @ 50) (20)Px39y31 { Px39y30, Px40y31 } CellNode (39 @ 31) (20)Px49y3 { Px50y3, Px49y2 } CellNode (49 @ 3) (20)Px55y24 { Px56y24, Px54y24, Px55y25, Px55y23 } CellNode (55 @ 24) (20)Px18y40 { Px17y40 } CellNode (18 @ 40) (20)Px42y6 { Px43y6, Px42y5 } CellNode (42 @ 6) (20)Px41y26 { Px42y26 } CellNode (41 @ 26) (20)Px11y35 { Px11y36, Px12y35, Px10y35, Px11y34 } CellNode (11 @ 35) (20)Px50y44 { Px50y43, Px50y45, Px51y44, Px49y44 } CellNode (50 @ 44) (20)Px53y18 { Px53y19, Px54y18, Px52y18, Px53y17 } CellNode (53 @ 18) (20)Px41y57 { Px40y57, Px42y57, Px41y56 } CellNode (41 @ 57) (20)Px55y43 { Px56y43, Px55y44, Px54y43, Px55y42 } CellNode (55 @ 43) (20)Px32y27 { Px33y27, Px32y26 } CellNode (32 @ 27) (20)Px46y56 { Px47y56, Px45y56, Px46y57, Px46y55 } CellNode (46 @ 56) (20)Px41y45 { Px41y46, Px42y45, Px40y45, Px41y44 } CellNode (41 @ 45) (20)Px55y31 { Px55y32, Px56y31, Px55y30, Px54y31 } CellNode (55 @ 31) (20)Px53y49 { Px53y50, Px54y49, Px53y48, Px52y49 } CellNode (53 @ 49) (20)Px11y24 { Px11y25, Px10y24, Px12y24 } CellNode (11 @ 24) (20)Px46y44 { Px47y44, Px46y43, Px45y44, Px46y45 } CellNode (46 @ 44) (20)Px41y33 { Px42y33 } CellNode (41 @ 33) (20)Px28y39 { Px28y40, Px29y39, Px27y39, Px28y38 } CellNode (28 @ 39) (20)Px16y23 { Px16y24, Px15y23 } CellNode (16 @ 23) (20)Px50y51 { Px50y52, Px51y51, Px49y51, Px50y50 } CellNode (50 @ 51) (20)Px37y57 { Px36y57, Px37y56, Px38y57 } CellNode (37 @ 57) (20)Px20y30 { Px20y29, Px21y30 } CellNode (20 @ 30) (20)Px55y20 { Px56y20, Px55y21, Px54y20, Px55y19 } CellNode (55 @ 20) (20)Px53y38 { Px54y38, Px52y38, Px53y39, Px53y37 } CellNode (53 @ 38) (20)Px49y49 { Px49y48, Px49y50, Px50y49, Px48y49 } CellNode (49 @ 49) (20)Px41y22 { Px42y22 } CellNode (41 @ 22) (20)Px23y47 { Px23y46, Px23y48 } CellNode (23 @ 47) (20)Px16y42 { Px16y43, Px16y41, Px17y42 } CellNode (16 @ 42) (20)Px55y51 { Px55y52, Px54y51, Px56y51, Px55y50 } CellNode (55 @ 51) (20)Px53y26 { Px53y27, Px54y26, Px52y26, Px53y25 } CellNode (53 @ 26) (20)Px50y40 { Px50y39, Px51y40, Px49y40, Px50y41 } CellNode (50 @ 40) (20)Px44y39 { Px45y39, Px44y38, Px44y40 } CellNode (44 @ 39) (20)Px53y14 { Px54y14, Px53y13, Px52y14, Px53y15 } CellNode (53 @ 14) (20)Px53y57 { Px52y57, Px53y56, Px54y57 } CellNode (53 @ 57) (20)Px49y38 { Px49y39, Px49y37, Px50y38, Px48y38 } CellNode (49 @ 38) (20)Px46y52 { Px46y53, Px45y52, Px47y52, Px46y51 } CellNode (46 @ 52) (20)Px53y45 { Px53y46, Px54y45, Px52y45, Px53y44 } CellNode (53 @ 45) (20)Px49y26 { Px48y26, Px49y27, Px50y26, Px49y25 } CellNode (49 @ 26) (20)Px46y40 { Px45y40, Px46y39, Px47y40, Px46y41 } CellNode (46 @ 40) (20)Px32y54 { Px32y55, Px31y54 } CellNode (32 @ 54) (20)Px35y28 { Px34y28, Px36y28 } CellNode (35 @ 28) (20)Px32y42 { Px33y42, Px32y43, Px31y42 } CellNode (32 @ 42) (20)Px49y57 { Px50y57 } CellNode (49 @ 57) (20)Px50y8 { Px50y7, Px50y9 } CellNode (50 @ 8) (20)Px44y46 { Px44y45, Px43y46, Px44y47, Px45y46 } CellNode (44 @ 46) (20)Px53y34 { Px54y34, Px52y34, Px53y35, Px53y33 } CellNode (53 @ 34) (20)Px49y45 { Px49y46, Px50y45, Px48y45, Px49y44 } CellNode (49 @ 45) (20)Px26y29 { Px26y28, Px27y29 } CellNode (26 @ 29) (20)Px53y22 { Px54y22, Px53y23, Px53y21, Px52y22 } CellNode (53 @ 22) (20)Px48y9 { Px49y9, Px48y8 } CellNode (48 @ 9) (20)Px44y35 { Px43y35, Px44y36 } CellNode (44 @ 35) (20)Px56y39 { Px55y39, Px56y38, Px56y40, Px57y39 } CellNode (56 @ 39) (20)Px53y53 { Px54y53, Px52y53, Px53y54, Px53y52 } CellNode (53 @ 53) (20)Px51y28 { Px52y28, Px51y27, Px50y28, Px51y29 } CellNode (51 @ 28) (20)Px23y32 { Px23y33, Px22y32, Px24y32, Px23y31 } CellNode (23 @ 32) (20)Px19y43 { Px18y43 } CellNode (19 @ 43) (20)Px56y27 { Px55y27, Px56y26, Px56y28, Px57y27 } CellNode (56 @ 27) (20)Px53y41 { Px54y41, Px52y41, Px53y40, Px53y42 } CellNode (53 @ 41) (20)Px30y25 { Px30y26, Px29y25 } CellNode (30 @ 25) (20)Px53y11 { Px52y11, Px53y12 } CellNode (53 @ 11) (20)Px44y54 { Px44y55, Px44y53, Px45y54, Px43y54 } CellNode (44 @ 54) (20)Px51y47 { Px52y47, Px50y47, Px51y46, Px51y48 } CellNode (51 @ 47) (20)Px47y28 { Px46y28, Px48y28, Px47y27 } CellNode (47 @ 28) (20)Px44y42 { Px43y42, Px44y43, Px45y42, Px44y41 } CellNode (44 @ 42) (20)Px26y37 { Px26y38, Px25y37, Px27y37, Px26y36 } CellNode (26 @ 37) (20)Px56y46 { Px55y46, Px56y47, Px57y46, Px56y45 } CellNode (56 @ 46) (20)Px56y16 { Px55y16, Px57y16, Px56y15, Px56y17 } CellNode (56 @ 16) (20)Px53y30 { Px54y30, Px52y30, Px53y31, Px53y29 } CellNode (53 @ 30) (20)Px49y41 { Px49y42, Px50y41, Px49y40, Px48y41 } CellNode (49 @ 41) (20)Px28y50 { Px27y50, Px28y51 } CellNode (28 @ 50) (20)Px42y48 { Px42y47, Px43y48 } CellNode (42 @ 48) (20)Px35y55 { Px34y55, Px35y56, Px36y55 } CellNode (35 @ 55) (20)Px35y43 { Px35y44, Px36y43, Px35y42, Px34y43 } CellNode (35 @ 43) (20)Px38y29 { Px39y29, Px37y29 } CellNode (38 @ 29) (20)Px51y36 { Px51y37, Px50y36, Px52y36, Px51y35 } CellNode (51 @ 36) (20)Px47y47 { Px47y48, Px48y47, Px46y47, Px47y46 } CellNode (47 @ 47) (20)Px21y45 { Px20y45, Px22y45, Px21y46 } CellNode (21 @ 45) (20)Px56y35 { Px56y36, Px56y34, Px57y35, Px55y35 } CellNode (56 @ 35) (20)Px51y24 { Px52y24, Px51y23, Px50y24, Px51y25 } CellNode (51 @ 24) (20)Px56y23 { Px56y22, Px56y24, Px57y23, Px55y23 } CellNode (56 @ 23) (20)Px51y55 { Px52y55, Px50y55, Px51y54, Px51y56 } CellNode (51 @ 55) (20)Px44y50 { Px44y49, Px45y50, Px44y51, Px43y50 } CellNode (44 @ 50) (20)Px54y29 { Px54y30, Px55y29, Px54y28, Px53y29 } CellNode (54 @ 29) (20)Px51y43 { Px51y42, Px50y43, Px51y44, Px52y43 } CellNode (51 @ 43) (20)Px51y13 { Px52y13 } CellNode (51 @ 13) (20)Px30y52 { Px29y52, Px30y53 } CellNode (30 @ 52) (20)Px8y33 { Px9y33, Px8y34, Px8y32 } CellNode (8 @ 33) (20)Px56y54 { Px56y53, Px55y54, Px56y55, Px57y54 } CellNode (56 @ 54) (20)Px56y42 { Px56y43, Px57y42, Px56y41, Px55y42 } CellNode (56 @ 42) (20)Px42y56 { Px41y56, Px42y57, Px43y56, Px42y55 } CellNode (42 @ 56) (20)Px30y40 { Px29y40, Px30y41, Px31y40 } CellNode (30 @ 40) (20)Px56y12 { Px56y13 } CellNode (56 @ 12) (20)Px12y35 { Px11y35, Px12y36 } CellNode (12 @ 35) (20)Px47y55 { Px46y55, Px47y56, Px47y54 } CellNode (47 @ 55) (20)Px42y44 { Px42y45, Px43y44, Px42y43, Px41y44 } CellNode (42 @ 44) (20)Px38y25 { Px39y25 } CellNode (38 @ 25) (20)Px54y18 { Px54y17, Px54y19, Px53y18, Px55y18 } CellNode (54 @ 18) (20)Px47y43 { Px48y43, Px46y43, Px47y42, Px47y44 } CellNode (47 @ 43) (20)Px33y57 { Px33y56, Px32y57, Px34y57 } CellNode (33 @ 57) (20)Px43y9 { Px44y9, Px43y8 } CellNode (43 @ 9) (20)Px56y31 { Px56y30, Px57y31, Px55y31, Px56y32 } CellNode (56 @ 31) (20)Px38y56 { Px38y57, Px39y56, Px37y56 } CellNode (38 @ 56) (20)Px54y49 { Px54y48, Px54y50, Px55y49, Px53y49 } CellNode (54 @ 49) (20)Px42y33 { Px41y33, Px42y34 } CellNode (42 @ 33) (20)Px54y37 { Px54y36, Px54y38, Px55y37, Px53y37 } CellNode (54 @ 37) (20)Px51y51 { Px51y52, Px51y50, Px52y51, Px50y51 } CellNode (51 @ 51) (20)Px42y21 { Px42y22, Px43y21 } CellNode (42 @ 21) (20)Px21y30 { Px22y30, Px21y31, Px20y30, Px21y29 } CellNode (21 @ 30) (20)Px54y25 { Px54y26, Px55y25, Px54y24, Px53y25 } CellNode (54 @ 25) (20)Px56y50 { Px56y49, Px57y50, Px56y51, Px55y50 } CellNode (56 @ 50) (20)Px45y38 { Px45y39, Px44y38, Px45y37 } CellNode (45 @ 38) (20)Px54y56 { Px55y56, Px54y57, Px53y56, Px54y55 } CellNode (54 @ 56) (20)Px47y51 { Px48y51, Px47y52, Px46y51, Px47y50 } CellNode (47 @ 51) (20)Px24y35 { Px24y34, Px24y36, Px25y35 } CellNode (24 @ 35) (20)Px54y14 { Px55y14, Px53y14, Px54y15, Px54y13 } CellNode (54 @ 14) (20)Px43y5 { Px42y5, Px43y6, Px44y5 } CellNode (43 @ 5) (20)Px45y57 { Px45y56, Px46y57, Px44y57 } CellNode (45 @ 57) (20)Px10y25 { Px9y25, Px10y24, Px11y25 } CellNode (10 @ 25) (20)Px54y45 { Px54y44, Px55y45, Px53y45, Px54y46 } CellNode (54 @ 45) (20)Px28y3 { Px27y3 } CellNode (28 @ 3) (20)Px57y19 { Px57y18, Px57y20, Px56y19 } CellNode (57 @ 19) (20)Px40y47 { Px41y47, Px40y46 } CellNode (40 @ 47) (20)Px36y28 { Px36y29, Px35y28 } CellNode (36 @ 28) (20)Px54y33 { Px55y33, Px54y34, Px53y33, Px54y32 } CellNode (54 @ 33) (20)Px29y53 { Px29y54, Px30y53, Px29y52, Px28y53 } CellNode (29 @ 53) (20)Px45y46 { Px46y46, Px45y47, Px44y46, Px45y45 } CellNode (45 @ 46) (20)Px54y21 { Px54y22, Px55y21, Px53y21, Px54y20 } CellNode (54 @ 21) (20)Px52y39 { Px52y40, Px53y39, Px52y38, Px51y39 } CellNode (52 @ 39) (20)Px27y29 { Px26y29, Px28y29 } CellNode (27 @ 29) (20)Px57y38 { Px57y37, Px57y39, Px56y38 } CellNode (57 @ 38) (20)Px54y52 { Px54y53, Px55y52, Px54y51, Px53y52 } CellNode (54 @ 52) (20)Px45y6 { Px45y7, Px45y5, Px46y6, Px44y6 } CellNode (45 @ 6) (20)Px52y28 { Px52y29, Px53y28, Px51y28, Px52y27 } CellNode (52 @ 28) (20)Px48y39 { Px48y40, Px48y38, Px49y39 } CellNode (48 @ 39) (20)Px45y53 { Px46y53, Px44y53, Px45y52, Px45y54 } CellNode (45 @ 53) (20)Px57y57 { Px57y56, Px56y57 } CellNode (57 @ 57) (20)Px57y27 { Px56y27, Px57y28, Px57y26 } CellNode (57 @ 27) (20)Px31y55 { Px31y54, Px30y55, Px31y56, Px32y55 } CellNode (31 @ 55) (20)Px54y41 { Px55y41, Px54y42, Px53y41, Px54y40 } CellNode (54 @ 41) (20)Px27y36 { Px27y37, Px26y36 } CellNode (27 @ 36) (20)Px57y15 { Px57y16, Px56y15, Px57y14 } CellNode (57 @ 15) (20)Px52y16 { Px52y15, Px52y17, Px53y16 } CellNode (52 @ 16) (20)Px36y54 { Px36y55 } CellNode (36 @ 54) (20)Px52y47 { Px53y47, Px51y47, Px52y48, Px52y46 } CellNode (52 @ 47) (20)Px48y28 { Px47y28, Px48y27, Px49y28 } CellNode (48 @ 28) (20)Px40y31 { Px39y31 } CellNode (40 @ 31) (20)Px45y42 { Px45y43, Px44y42, Px46y42, Px45y41 } CellNode (45 @ 42) (20)Px57y46 { Px57y45, Px57y47, Px56y46 } CellNode (57 @ 46) (20)Px9y25 { Px9y24, Px10y25 } CellNode (9 @ 25) (20)Px52y35 { Px52y36, Px53y35, Px52y34, Px51y35 } CellNode (52 @ 35) (20)Px57y34 { Px56y34, Px57y33, Px57y35 } CellNode (57 @ 34) (20)Px39y29 { Px39y30, Px38y29 } CellNode (39 @ 29) (20)Px36y43 { Px36y44, Px35y43, Px37y43 } CellNode (36 @ 43) (20)Px43y48 { Px44y48, Px42y48, Px43y47, Px43y49 } CellNode (43 @ 48) (20)Px48y47 { Px48y46, Px48y48, Px47y47, Px49y47 } CellNode (48 @ 47) (20)Px22y45 { Px22y46, Px21y45 } CellNode (22 @ 45) (20)Px52y54 { Px53y54, Px51y54, Px52y53, Px52y55 } CellNode (52 @ 54) (20)Px52y24 { Px53y24, Px51y24, Px52y25, Px52y23 } CellNode (52 @ 24) (20)Px57y53 { Px57y54, Px56y53, Px57y52 } CellNode (57 @ 53) (20)Px57y23 { Px56y23, Px57y22, Px57y24 } CellNode (57 @ 23) (20)Px52y12 { Px52y11, Px52y13, Px53y12 } CellNode (52 @ 12) (20)Px43y55 { Px42y55, Px43y56, Px44y55, Px43y54 } CellNode (43 @ 55) (20)Px55y29 { Px54y29, Px55y28, Px55y30, Px56y29 } CellNode (55 @ 29) (20)Px52y43 { Px53y43, Px52y44, Px51y43, Px52y42 } CellNode (52 @ 43) (20)Px48y54 { Px48y53, Px47y54 } CellNode (48 @ 54) (20)Px55y17 { Px55y16, Px54y17, Px55y18, Px56y17 } CellNode (55 @ 17) (20)Px57y42 { Px57y43, Px57y41, Px56y42 } CellNode (57 @ 42) (20)Px52y31 { Px53y31, Px52y30, Px51y31, Px52y32 } CellNode (52 @ 31) (20)Px31y40 { Px30y40, Px31y41, Px32y40 } CellNode (31 @ 40) (20)Px50y49 { Px51y49, Px49y49, Px50y48, Px50y50 } CellNode (50 @ 49) (20)Px27y51 { Px28y51, Px26y51, Px27y50, Px27y52 } CellNode (27 @ 51) (20)Px57y30 { Px57y31, Px56y30, Px57y29 } CellNode (57 @ 30) (20)Px39y25 { Px38y25 } CellNode (39 @ 25) (20)Px43y44 { Px43y45, Px43y43, Px44y44, Px42y44 } CellNode (43 @ 44) (20)Px50y37 { Px51y37, Px50y36, Px49y37, Px50y38 } CellNode (50 @ 37) (20)Px13y23 { Px14y23, Px13y24 } CellNode (13 @ 23) (20)Px48y43 { Px49y43, Px47y43, Px48y44, Px48y42 } CellNode (48 @ 43) (20)Px20y28 { Px20y27, Px20y29 } CellNode (20 @ 28) (20)Px34y56 { Px34y57, Px35y56, Px33y56, Px34y55 } CellNode (34 @ 56) (20)Px55y36 { Px55y35, Px55y37, Px56y36, Px54y36 } CellNode (55 @ 36) (20)Px52y50 { Px53y50, Px51y50, Px52y49, Px52y51 } CellNode (52 @ 50) (20)Px52y20 { Px53y20, Px52y19, Px52y21 } CellNode (52 @ 20) (20)Px55y48 { Px55y47, Px54y48, Px56y48, Px55y49 } CellNode (55 @ 48) (20)Px46y49 { Px46y50, Px47y49, Px46y48, Px45y49 } CellNode (46 @ 49) (20)Px50y26 { Px51y26, Px50y27, Px49y26, Px50y25 } CellNode (50 @ 26) (20)Px50y56 { Px50y57, Px51y56, Px50y55 } CellNode (50 @ 56) (20)Px43y21 { Px42y21, Px43y22, Px44y21 } CellNode (43 @ 21) (20)Px55y25 { Px56y25, Px55y24, Px55y26, Px54y25 } CellNode (55 @ 25) (20)Px55y55 { Px55y54, Px55y56, Px56y55, Px54y55 } CellNode (55 @ 55) (20)Px48y50 { Px48y51, Px49y50, Px47y50, Px48y49 } CellNode (48 @ 50) (20)Px25y34 { Px25y35, Px24y34 } CellNode (25 @ 34) (20)Px55y13 { Px55y14, Px54y13, Px56y13 } CellNode (55 @ 13) (20)Px11y36 { Px11y35, Px11y37, Px12y36, Px10y36 } CellNode (11 @ 36) (20)Px50y45 { Px51y45, Px49y45, Px50y44, Px50y46 } CellNode (50 @ 45) (20)Px46y26 { Px45y26 } CellNode (46 @ 26) (20)Px53y19 { Px53y20, Px54y19, Px53y18, Px52y19 } CellNode (53 @ 19) (20)Px50y33 { Px51y33, Px49y33 } CellNode (50 @ 33) (20)Px7y23 { Px6y23, Px7y24 } CellNode (7 @ 23) (20)Px55y44 { Px54y44, Px55y43, Px56y44, Px55y45 } CellNode (55 @ 44) (20)Px55y32 { Px55y33, Px56y32, Px55y31, Px54y32 } CellNode (55 @ 32) (20)Px46y57 { Px45y57, Px46y56 } CellNode (46 @ 57) (20)Px41y46 { Px41y45, Px41y47, Px42y46, Px40y46 } CellNode (41 @ 46) (20)Px11y25 { Px11y24, Px10y25 } CellNode (11 @ 25) (20)Px46y45 { Px46y46, Px47y45, Px46y44, Px45y45 } CellNode (46 @ 45) (20)Px16y24 { Px16y23, Px17y24, Px15y24 } CellNode (16 @ 24) (20)Px50y22 { Px51y22, Px50y23 } CellNode (50 @ 22) (20)Px50y52 { Px50y51, Px51y52, Px49y52 } CellNode (50 @ 52) (20)Px55y21 { Px55y20, Px55y22, Px56y21, Px54y21 } CellNode (55 @ 21) (20)Px50y10 { Px49y10, Px50y9, Px50y11, Px51y10 } CellNode (50 @ 10) (20)Px53y39 { Px53y38, Px53y40, Px54y39, Px52y39 } CellNode (53 @ 39) (20)Px23y48 { Px23y47, Px24y48 } CellNode (23 @ 48) (20)Px16y43 { Px15y43, Px17y43, Px16y42 } CellNode (16 @ 43) (20)Px55y52 { Px56y52, Px55y51, Px55y53, Px54y52 } CellNode (55 @ 52) (20)Px46y22 { Px47y22, Px46y23, Px45y22 } CellNode (46 @ 22) (20)Px7y31 { Px7y32 } CellNode (7 @ 31) (20)Px53y27 { Px52y27, Px53y28, Px54y27, Px53y26 } CellNode (53 @ 27) (20)Px50y41 { Px50y42, Px50y40, Px51y41, Px49y41 } CellNode (50 @ 41) (20)Px41y54 { Px42y54, Px41y55 } CellNode (41 @ 54) (20)Px55y40 { Px55y39, Px55y41, Px56y40, Px54y40 } CellNode (55 @ 40) (20)Px53y15 { Px53y16, Px54y15, Px53y14, Px52y15 } CellNode (53 @ 15) (20)Px49y39 { Px50y39, Px48y39, Px49y38, Px49y40 } CellNode (49 @ 39) (20)Px46y53 { Px47y53, Px45y53, Px46y54, Px46y52 } CellNode (46 @ 53) (20)Px37y23 { Px36y23, Px38y23 } CellNode (37 @ 23) (20)Px53y46 { Px53y47, Px54y46, Px52y46, Px53y45 } CellNode (53 @ 46) (20)Px49y27 { Px50y27, Px48y27, Px49y26, Px49y28 } CellNode (49 @ 27) (20)Px46y41 { Px46y42, Px47y41, Px46y40, Px45y41 } CellNode (46 @ 41) (20)Px32y55 { Px32y56, Px31y55, Px33y55, Px32y54 } CellNode (32 @ 55) (20)Px25y50 { Px25y49, Px26y50 } CellNode (25 @ 50) (20)Px32y43 { Px33y43, Px32y42 } CellNode (32 @ 43) (20)Px28y24 { Px29y24 } CellNode (28 @ 24) (20)Px44y47 { Px45y47, Px43y47, Px44y46, Px44y48 } CellNode (44 @ 47) (20)Px50y9 { Px51y9, Px49y9, Px50y10, Px50y8 } CellNode (50 @ 9) (20)Px53y35 { Px53y34, Px53y36, Px52y35, Px54y35 } CellNode (53 @ 35) (20)Px49y46 { Px48y46, Px49y45, Px49y47, Px50y46 } CellNode (49 @ 46) (20)Px35y7 { Px36y7 } CellNode (35 @ 7) (20)Px53y23 { Px53y24, Px54y23, Px52y23, Px53y22 } CellNode (53 @ 23) (20)Px44y36 { Px44y35, Px44y37 } CellNode (44 @ 36) (20)Px51y29 { Px51y30, Px52y29, Px51y28, Px50y29 } CellNode (51 @ 29) (20)Px53y54 { Px53y55, Px52y54, Px54y54, Px53y53 } CellNode (53 @ 54) (20)Px26y49 { Px25y49, Px26y50 } CellNode (26 @ 49) (20)Px23y33 { Px23y32, Px24y33 } CellNode (23 @ 33) (20)Px56y28 { Px57y28, Px56y27, Px55y28, Px56y29 } CellNode (56 @ 28) (20)Px53y42 { Px53y43, Px54y42, Px53y41, Px52y42 } CellNode (53 @ 42) (20)Px30y26 { Px30y25, Px31y26 } CellNode (30 @ 26) (20)Px46y5 { Px46y6, Px47y5, Px45y5 } CellNode (46 @ 5) (20)Px53y12 { Px53y11, Px53y13, Px54y12, Px52y12 } CellNode (53 @ 12) (20)Px49y23 { Px50y23, Px48y23, Px49y24 } CellNode (49 @ 23) (20)Px44y55 { Px45y55, Px43y55, Px44y56, Px44y54 } CellNode (44 @ 55) (20)Px51y48 { Px51y49, Px52y48, Px50y48, Px51y47 } CellNode (51 @ 48) (20)Px28y20 { Px29y20 } CellNode (28 @ 20) (20)Px44y43 { Px45y43, Px44y42, Px43y43, Px44y44 } CellNode (44 @ 43) (20)Px26y38 { Px27y38, Px26y37 } CellNode (26 @ 38) (20)Px56y47 { Px57y47, Px55y47, Px56y46, Px56y48 } CellNode (56 @ 47) (20)Px56y17 { Px56y18, Px57y17, Px55y17, Px56y16 } CellNode (56 @ 17) (20)Px35y56 { Px35y55, Px35y57, Px34y56, Px36y56 } CellNode (35 @ 56) (20)Px53y31 { Px54y31, Px52y31, Px53y32, Px53y30 } CellNode (53 @ 31) (20)Px28y51 { Px28y52, Px27y51, Px29y51, Px28y50 } CellNode (28 @ 51) (20)Px49y42 { Px48y42, Px49y43, Px50y42, Px49y41 } CellNode (49 @ 42) (20)Px35y3 { Px35y4, Px36y3 } CellNode (35 @ 3) (20)Px35y44 { Px35y43, Px36y44 } CellNode (35 @ 44) (20)Px17y39 { Px17y40 } CellNode (17 @ 39) (20)Px51y37 { Px51y38, Px50y37, Px52y37, Px51y36 } CellNode (51 @ 37) (20)Px47y48 { Px47y49, Px48y48, Px47y47, Px46y48 } CellNode (47 @ 48) (20)Px21y46 { Px22y46, Px21y45 } CellNode (21 @ 46) (20)Px56y36 { Px57y36, Px56y37, Px55y36, Px56y35 } CellNode (56 @ 36) (20)Px53y50 { Px54y50, Px53y51, Px52y50, Px53y49 } CellNode (53 @ 50) (20)Px51y25 { Px51y26, Px52y25, Px50y25, Px51y24 } CellNode (51 @ 25) (20)Px56y24 { Px57y24, Px56y23, Px55y24, Px56y25 } CellNode (56 @ 24) (20)Px51y56 { Px51y57, Px50y56, Px52y56, Px51y55 } CellNode (51 @ 56) (20)Px42y26 { Px41y26 } CellNode (42 @ 26) (20)Px44y51 { Px44y50, Px44y52, Px45y51 } CellNode (44 @ 51) (20)Px51y44 { Px52y44, Px50y44, Px51y43, Px51y45 } CellNode (51 @ 44) (20)Px8y34 { Px9y34, Px8y33 } CellNode (8 @ 34) (20)Px30y53 { Px29y53, Px30y52, Px31y53, Px30y54 } CellNode (30 @ 53) (20)Px49y50 { Px49y49, Px49y51, Px48y50, Px50y50 } CellNode (49 @ 50) (20)Px56y55 { Px57y55, Px55y55, Px56y54, Px56y56 } CellNode (56 @ 55) (20)Px56y43 { Px56y42, Px55y43, Px56y44, Px57y43 } CellNode (56 @ 43) (20)Px33y27 { Px33y28, Px34y27, Px32y27 } CellNode (33 @ 27) (20)Px30y41 { Px29y41, Px30y42, Px31y41, Px30y40 } CellNode (30 @ 41) (20)Px42y57 { Px41y57, Px43y57, Px42y56 } CellNode (42 @ 57) (20)Px56y13 { Px57y13, Px55y13, Px56y14, Px56y12 } CellNode (56 @ 13) (20)Px47y56 { Px47y55, Px46y56 } CellNode (47 @ 56) (20)Px42y45 { Px41y45, Px42y46, Px43y45, Px42y44 } CellNode (42 @ 45) (20)Px12y36 { Px11y36, Px12y35 } CellNode (12 @ 36) (20)Px12y24 { Px13y24, Px11y24 } CellNode (12 @ 24) (20)Px54y19 { Px53y19, Px54y18, Px54y20, Px55y19 } CellNode (54 @ 19) (20)Px51y33 { Px51y34, Px50y33, Px52y33 } CellNode (51 @ 33) (20)Px29y39 { Px28y39, Px29y40 } CellNode (29 @ 39) (20)Px47y44 { Px47y45, Px48y44, Px46y44, Px47y43 } CellNode (47 @ 44) (20)Px56y32 { Px55y32, Px56y33, Px56y31, Px57y32 } CellNode (56 @ 32) (20)Px38y57 { Px38y56, Px39y57, Px37y57 } CellNode (38 @ 57) (20)Px56y20 { Px55y20, Px56y19, Px56y21, Px57y20 } CellNode (56 @ 20) (20)Px42y34 { Px42y33, Px43y34 } CellNode (42 @ 34) (20)Px38y45 { Px39y45 } CellNode (38 @ 45) (20)Px54y38 { Px54y37, Px53y38, Px54y39, Px55y38 } CellNode (54 @ 38) (20)Px51y52 { Px52y52, Px51y53, Px50y52, Px51y51 } CellNode (51 @ 52) (20)Px42y22 { Px42y21, Px41y22, Px43y22 } CellNode (42 @ 22) (20)Px21y31 { Px21y30, Px22y31 } CellNode (21 @ 31) (20)Px54y26 { Px53y26, Px54y27, Px55y26, Px54y25 } CellNode (54 @ 26) (20)Px51y40 { Px52y40, Px50y40, Px51y39, Px51y41 } CellNode (51 @ 40) (20)Px51y10 { Px52y10, Px51y11, Px50y10, Px51y9 } CellNode (51 @ 10) (20)Px17y42 { Px17y43, Px16y42 } CellNode (17 @ 42) (20)Px56y51 { Px55y51, Px56y50, Px57y51, Px56y52 } CellNode (56 @ 51) (20)Px45y39 { Px45y40, Px46y39, Px45y38, Px44y39 } CellNode (45 @ 39) (20)Px42y53 { Px42y54, Px43y53 } CellNode (42 @ 53) (20)Px24y48 { Px24y49, Px23y48 } CellNode (24 @ 48) (20)Px54y57 { Px53y57, Px54y56, Px55y57 } CellNode (54 @ 57) (20)Px47y52 { Px48y52, Px47y53, Px47y51, Px46y52 } CellNode (47 @ 52) (20)Px24y36 { Px25y36, Px24y35 } CellNode (24 @ 36) (20)Px54y15 { Px55y15, Px54y14, Px54y16, Px53y15 } CellNode (54 @ 15) (20)Px47y40 { Px48y40, Px46y40, Px47y41 } CellNode (47 @ 40) (20)Px43y6 { Px42y6, Px43y5, Px44y6 } CellNode (43 @ 6) (20)Px33y42 { Px32y42, Px34y42, Px33y43 } CellNode (33 @ 42) (20)Px54y46 { Px55y46, Px53y46, Px54y45, Px54y47 } CellNode (54 @ 46) (20)Px38y11 { Px39y11 } CellNode (38 @ 11) (20)Px54y34 { Px54y33, Px53y34, Px55y34, Px54y35 } CellNode (54 @ 34) (20)Px36y29 { Px36y28, Px37y29 } CellNode (36 @ 29) (20)Px29y54 { Px29y53, Px30y54 } CellNode (29 @ 54) (20)Px45y47 { Px46y47, Px44y47, Px45y48, Px45y46 } CellNode (45 @ 47) (20)Px54y22 { Px54y23, Px55y22, Px53y22, Px54y21 } CellNode (54 @ 22) (20)Px40y24 { Px41y24 } CellNode (40 @ 24) (20)Px57y39 { Px57y40, Px57y38, Px56y39 } CellNode (57 @ 39) (20)Px54y53 { Px53y53, Px54y54, Px55y53, Px54y52 } CellNode (54 @ 53) (20)Px45y7 { Px45y6 } CellNode (45 @ 7) (20)Px24y32 { Px24y33, Px23y32 } CellNode (24 @ 32) (20)Px40y55 { Px40y56, Px41y55 } CellNode (40 @ 55) (20)Px10y34 { Px11y34, Px9y34, Px10y35 } CellNode (10 @ 34) (20)Px52y29 { Px52y28, Px52y30, Px53y29, Px51y29 } CellNode (52 @ 29) (20)Px45y54 { Px45y55, Px46y54, Px45y53, Px44y54 } CellNode (45 @ 54) (20)Px57y28 { Px56y28, Px57y29, Px57y27 } CellNode (57 @ 28) (20)Px54y42 { Px55y42, Px54y41, Px54y43, Px53y42 } CellNode (54 @ 42) (20)Px31y56 { Px31y55, Px32y56 } CellNode (31 @ 56) (20)Px31y26 { Px32y26, Px30y26 } CellNode (31 @ 26) (20)Px27y37 { Px27y38, Px27y36, Px26y37 } CellNode (27 @ 37) (20)Px57y16 { Px57y17, Px56y16, Px57y15 } CellNode (57 @ 16) (20)Px54y30 { Px54y29, Px55y30, Px54y31, Px53y30 } CellNode (54 @ 30) (20)Px36y55 { Px36y54, Px35y55, Px36y56, Px37y55 } CellNode (36 @ 55) (20)Px52y17 { Px52y16, Px52y18, Px53y17 } CellNode (52 @ 17) (20)Px29y20 { Px29y21, Px28y20 } CellNode (29 @ 20) (20)Px52y48 { Px52y47, Px53y48, Px52y49, Px51y48 } CellNode (52 @ 48) (20)Px45y43 { Px46y43, Px44y43, Px45y44, Px45y42 } CellNode (45 @ 43) (20)Px57y47 { Px57y48, Px57y46, Px56y47 } CellNode (57 @ 47) (20)Px52y36 { Px52y37, Px53y36, Px51y36, Px52y35 } CellNode (52 @ 36) (20)Px57y35 { Px56y35, Px57y34, Px57y36 } CellNode (57 @ 35) (20)Px43y49 { Px43y50, Px43y48, Px44y49 } CellNode (43 @ 49) (20)Px36y44 { Px35y44, Px37y44, Px36y43, Px36y45 } CellNode (36 @ 44) (20)Px48y48 { Px47y48, Px49y48, Px48y47, Px48y49 } CellNode (48 @ 48) (20)Px22y46 { Px21y46, Px23y46, Px22y45 } CellNode (22 @ 46) (20)Px52y55 { Px52y56, Px53y55, Px52y54, Px51y55 } CellNode (52 @ 55) (20)Px52y25 { Px52y24, Px52y26, Px51y25, Px53y25 } CellNode (52 @ 25) (20)Px45y50 { Px46y50, Px44y50, Px45y49, Px45y51 } CellNode (45 @ 50) (20)Px57y54 { Px57y55, Px56y54, Px57y53 } CellNode (57 @ 54) (20)Px57y24 { Px56y24, Px57y23, Px57y25 } CellNode (57 @ 24) (20)Px52y13 { Px53y13, Px52y14, Px51y13, Px52y12 } CellNode (52 @ 13) (20)Px9y33 { Px8y33, Px9y34 } CellNode (9 @ 33) (20)Px49y9 { Px49y10, Px48y9, Px50y9 } CellNode (49 @ 9) (20)Px43y56 { Px44y56, Px43y55, Px42y56, Px43y57 } CellNode (43 @ 56) (20)Px52y44 { Px52y45, Px53y44, Px51y44, Px52y43 } CellNode (52 @ 44) (20)Px55y18 { Px56y18, Px55y17, Px54y18, Px55y19 } CellNode (55 @ 18) (20)Px57y43 { Px57y42, Px57y44, Px56y43 } CellNode (57 @ 43) (20)Px34y27 { Px33y27, Px34y28 } CellNode (34 @ 27) (20)Px31y41 { Px30y41, Px31y42, Px31y40 } CellNode (31 @ 41) (20)Px27y52 { Px28y52, Px27y51 } CellNode (27 @ 52) (20)Px52y32 { Px52y33, Px53y32, Px52y31 } CellNode (52 @ 32) (20)Px57y31 { Px57y30, Px56y31, Px57y32 } CellNode (57 @ 31) (20)Px43y45 { Px44y45, Px42y45, Px43y46, Px43y44 } CellNode (43 @ 45) (20)Px20y29 { Px20y28, Px20y30, Px21y29 } CellNode (20 @ 29) (20)Px50y38 { Px50y39, Px51y38, Px49y38, Px50y37 } CellNode (50 @ 38) (20)Px13y24 { Px13y23, Px14y24, Px12y24 } CellNode (13 @ 24) (20)Px48y44 { Px49y44, Px48y43, Px48y45, Px47y44 } CellNode (48 @ 44) (20)Px39y56 { Px40y56, Px39y57, Px38y56 } CellNode (39 @ 56) (20)Px34y57 { Px33y57, Px34y56, Px35y57 } CellNode (34 @ 57) (20)Px55y37 { Px56y37, Px54y37, Px55y36, Px55y38 } CellNode (55 @ 37) (20)Px52y51 { Px52y52, Px53y51, Px51y51, Px52y50 } CellNode (52 @ 51) (20)Px52y21 { Px53y21, Px52y20, Px52y22 } CellNode (52 @ 21) (20)Px55y49 { Px56y49, Px55y48, Px54y49, Px55y50 } CellNode (55 @ 49) (20)Px22y30 { Px21y30, Px22y31 } CellNode (22 @ 30) (20)Px36y2 { Px36y3 } CellNode (36 @ 2) (20)Px57y50 { Px57y49, Px57y51, Px56y50 } CellNode (57 @ 50) (20)Px57y20 { Px56y20, Px57y21, Px57y19 } CellNode (57 @ 20) (20)Px39y45 { Px40y45, Px38y45 } CellNode (39 @ 45) (20)Px50y27 { Px51y27, Px50y28, Px49y27, Px50y26 } CellNode (50 @ 27) (20)Px50y57 { Px50y56, Px51y57, Px49y57 } CellNode (50 @ 57) (20)Px43y22 { Px42y22, Px43y21 } CellNode (43 @ 22) (20)Px49y5 { Px49y6 } CellNode (49 @ 5) (20)Px55y26 { Px55y27, Px54y26, Px56y26, Px55y25 } CellNode (55 @ 26) (20)Px52y40 { Px52y41, Px51y40, Px53y40, Px52y39 } CellNode (52 @ 40) (20)Px48y51 { Px48y52, Px49y51, Px48y50, Px47y51 } CellNode (48 @ 51) (20)Px25y35 { Px26y35, Px25y34, Px24y35, Px25y36 } CellNode (25 @ 35) (20)Px55y56 { Px54y56, Px55y55, Px55y57, Px56y56 } CellNode (55 @ 56) (20)Px55y14 { Px56y14, Px55y13, Px54y14, Px55y15 } CellNode (55 @ 14) (20)Px11y37 { Px11y36 } CellNode (11 @ 37) (20)Px50y46 { Px50y47, Px49y46, Px51y46, Px50y45 } CellNode (50 @ 46) (20)Px55y45 { Px55y46, Px54y45, Px55y44, Px56y45 } CellNode (55 @ 45) (20)Px7y24 { Px8y24, Px7y23 } CellNode (7 @ 24) (20)Px48y40 { Px48y39, Px49y40, Px47y40, Px48y41 } CellNode (48 @ 40) (20)Px55y33 { Px54y33, Px55y32, Px55y34, Px56y33 } CellNode (55 @ 33) (20)Px41y47 { Px42y47, Px41y46, Px40y47 } CellNode (41 @ 47) (20)Px34y42 { Px33y42, Px35y42, Px34y43 } CellNode (34 @ 42) (20)Px46y46 { Px46y45, Px47y46, Px46y47, Px45y46 } CellNode (46 @ 46) (20)Px50y23 { Px51y23, Px49y23, Px50y24, Px50y22 } CellNode (50 @ 23) (20)Px44y9 { Px43y9 } CellNode (44 @ 9) (20)Px28y29 { Px28y30, Px27y29 } CellNode (28 @ 29) (20)Px55y22 { Px54y22, Px56y22, Px55y21, Px55y23 } CellNode (55 @ 22) (20)Px50y11 { Px51y11, Px50y10 } CellNode (50 @ 11) (20)Px42y4 { Px42y5 } CellNode (42 @ 4) (20)Px41y24 { Px42y24, Px40y24 } CellNode (41 @ 24) (20)Px53y28 { Px53y27, Px52y28, Px54y28, Px53y29 } CellNode (53 @ 28) (20)Px55y53 { Px56y53, Px54y53, Px55y54, Px55y52 } CellNode (55 @ 53) (20)Px46y23 { Px47y23, Px46y22 } CellNode (46 @ 23) (20)Px7y32 { Px8y32, Px7y31 } CellNode (7 @ 32) (20)Px2y21 { Px3y21 } CellNode (2 @ 21) (20)Px53y16 { Px52y16, Px53y17, Px54y16, Px53y15 } CellNode (53 @ 16) (20)Px41y55 { Px40y55, Px41y56, Px41y54, Px42y55 } CellNode (41 @ 55) (20)Px55y41 { Px55y40, Px54y41, Px55y42, Px56y41 } CellNode (55 @ 41) (20)Px50y42 { Px51y42, Px49y42, Px50y43, Px50y41 } CellNode (50 @ 42) (20)Px46y54 { Px46y53, Px47y54, Px45y54, Px46y55 } CellNode (46 @ 54) (20)Px53y47 { Px52y47, Px53y46, Px53y48, Px54y47 } CellNode (53 @ 47) (20)Px49y28 { Px49y29, Px50y28, Px48y28, Px49y27 } CellNode (49 @ 28) (20)Px46y42 { Px47y42, Px46y43, Px46y41, Px45y42 } CellNode (46 @ 42) (20)Px32y56 { Px33y56, Px32y57, Px31y56, Px32y55 } CellNode (32 @ 56) (20)Px37y55 { Px37y56, Px36y55 } CellNode (37 @ 55) (20)Px44y5 { Px43y5, Px44y6, Px45y5 } CellNode (44 @ 5) (20)Px44y48 { Px44y49, Px45y48, Px43y48, Px44y47 } CellNode (44 @ 48) (20)Px37y43 { Px36y43, Px37y44 } CellNode (37 @ 43) (20)Px53y36 { Px54y36, Px52y36, Px53y35, Px53y37 } CellNode (53 @ 36) (20)Px49y47 { Px50y47, Px49y46, Px48y47, Px49y48 } CellNode (49 @ 47) (20)Px53y24 { Px52y24, Px53y23, Px54y24, Px53y25 } CellNode (53 @ 24) (20)Px44y37 { Px44y36, Px44y38, Px45y37 } CellNode (44 @ 37) (20)Px53y55 { Px54y55, Px53y54, Px53y56, Px52y55 } CellNode (53 @ 55) (20)Px46y50 { Px46y49, Px46y51, Px45y50, Px47y50 } CellNode (46 @ 50) (20)Px56y29 { Px56y30, Px57y29, Px56y28, Px55y29 } CellNode (56 @ 29) (20)Px53y43 { Px52y43, Px53y44, Px54y43, Px53y42 } CellNode (53 @ 43) (20)Px46y6 { Px45y6, Px46y5 } CellNode (46 @ 6) (20)Px49y24 { Px50y24, Px49y23, Px49y25 } CellNode (49 @ 24) (20)Px44y56 { Px44y57, Px45y56, Px43y56, Px44y55 } CellNode (44 @ 56) (20)Px32y40 { Px31y40 } CellNode (32 @ 40) (20)Px51y49 { Px51y50, Px52y49, Px50y49, Px51y48 } CellNode (51 @ 49) (20)Px44y44 { Px44y45, Px45y44, Px43y44, Px44y43 } CellNode (44 @ 44) (20)Px56y48 { Px56y49, Px57y48, Px56y47, Px55y48 } CellNode (56 @ 48) (20)Px14y23 { Px13y23, Px15y23, Px14y24 } CellNode (14 @ 23) (20)Px35y57 { Px34y57, Px35y56, Px36y57 } CellNode (35 @ 57) (20)Px56y18 { Px56y19, Px55y18, Px57y18, Px56y17 } CellNode (56 @ 18) (20)Px28y52 { Px28y51, Px29y52, Px28y53, Px27y52 } CellNode (28 @ 52) (20)Px53y32 { Px54y32, Px53y31, Px53y33, Px52y32 } CellNode (53 @ 32) (20)Px49y43 { Px50y43, Px48y43, Px49y42, Px49y44 } CellNode (49 @ 43) (20)Px35y4 { Px35y3 } CellNode (35 @ 4) (20)Px53y20 { Px53y19, Px53y21, Px54y20, Px52y20 } CellNode (53 @ 20) (20)Px51y38 { Px51y37, Px52y38, Px50y38, Px51y39 } CellNode (51 @ 38) (20)Px47y49 { Px47y48, Px46y49, Px47y50, Px48y49 } CellNode (47 @ 49) (20)Px28y40 { Px28y39, Px29y40 } CellNode (28 @ 40) (20)Px48y7 { Px48y8 } CellNode (48 @ 7) (20)Px56y37 { Px57y37, Px56y38, Px55y37, Px56y36 } CellNode (56 @ 37) (20)Px53y51 { Px53y50, Px54y51, Px52y51, Px53y52 } CellNode (53 @ 51) (20)Px44y21 { Px43y21, Px45y21 } CellNode (44 @ 21) (20)Px51y26 { Px51y27, Px52y26, Px50y26, Px51y25 } CellNode (51 @ 26) (20)Px49y32 { Px49y33 } CellNode (49 @ 32) (20)Px56y25 { Px56y26, Px57y25, Px56y24, Px55y25 } CellNode (56 @ 25) (20)Px51y57 { Px50y57, Px51y56, Px52y57 } CellNode (51 @ 57) (20)Px44y52 { Px44y51, Px44y53, Px45y52 } CellNode (44 @ 52) (20)Px21y36 { Px22y36 } CellNode (21 @ 36) (20)Px51y45 { Px51y46, Px52y45, Px50y45, Px51y44 } CellNode (51 @ 45) (20)Px56y56 { Px57y56, Px55y56, Px56y57, Px56y55 } CellNode (56 @ 56) (20)Px30y54 { Px31y54, Px29y54, Px30y55, Px30y53 } CellNode (30 @ 54) (20)Px49y51 { Px48y51, Px49y52, Px49y50, Px50y51 } CellNode (49 @ 51) (20)Px26y35 { Px26y36, Px25y35 } CellNode (26 @ 35) (20)Px56y44 { Px57y44, Px55y44, Px56y43, Px56y45 } CellNode (56 @ 44) (20)Px33y28 { Px33y27, Px34y28 } CellNode (33 @ 28) (20)Px30y42 { Px30y41, Px31y42 } CellNode (30 @ 42) (20)Px56y14 { Px56y15, Px57y14, Px55y14, Px56y13 } CellNode (56 @ 14) (20)Px26y23 { Px27y23 } CellNode (26 @ 23) (20)Px42y46 { Px43y46, Px41y46, Px42y45, Px42y47 } CellNode (42 @ 46) (20)Px44y40 { Px44y39, Px44y41, Px45y40 } CellNode (44 @ 40) (20)Px51y34 { Px52y34, Px51y35, Px51y33 } CellNode (51 @ 34) (20)Px47y45 { Px47y44, Px47y46, Px48y45, Px46y45 } CellNode (47 @ 45) (20)Px17y24 { Px16y24, Px18y24 } CellNode (17 @ 24) (20)Px56y33 { Px57y33, Px55y33, Px56y34, Px56y32 } CellNode (56 @ 33) (20)Px51y22 { Px51y23, Px52y22, Px50y22 } CellNode (51 @ 22) (20)Px56y21 { Px57y21, Px56y20, Px55y21, Px56y22 } CellNode (56 @ 21) (20)Px54y39 { Px55y39, Px54y38, Px53y39, Px54y40 } CellNode (54 @ 39) (20)Px51y53 { Px51y54, Px52y53, Px51y52 } CellNode (51 @ 53) (20)Px54y27 { Px55y27, Px53y27, Px54y26, Px54y28 } CellNode (54 @ 27) (20)Px51y41 { Px51y42, Px52y41, Px51y40, Px50y41 } CellNode (51 @ 41) (20)Px51y11 { Px50y11, Px51y10, Px52y11 } CellNode (51 @ 11) (20)Px47y22 { Px46y22, Px48y22, Px47y23 } CellNode (47 @ 22) (20)Px17y43 { Px16y43, Px17y42, Px18y43 } CellNode (17 @ 43) (20)Px56y52 { Px56y53, Px57y52, Px55y52, Px56y51 } CellNode (56 @ 52) (20)Px56y40 { Px57y40, Px55y40, Px56y39, Px56y41 } CellNode (56 @ 40) (20)Px24y49 { Px24y48, Px25y49 } CellNode (24 @ 49) (20)Px42y54 { Px42y55, Px42y53, Px41y54, Px43y54 } CellNode (42 @ 54) (20)Px47y53 { Px46y53, Px47y52, Px47y54, Px48y53 } CellNode (47 @ 53) (20)Px38y23 { Px39y23, Px37y23 } CellNode (38 @ 23) (20)Px54y16 { Px55y16, Px54y17, Px53y16, Px54y15 } CellNode (54 @ 16) (20)Px51y30 { Px51y31, Px51y29, Px52y30 } CellNode (51 @ 30) (20)Px47y41 { Px47y42, Px48y41, Px47y40, Px46y41 } CellNode (47 @ 41) (20)Px33y55 { Px33y56, Px34y55, Px32y55 } CellNode (33 @ 55) (20)Px26y50 { Px26y51, Px27y50, Px25y50, Px26y49 } CellNode (26 @ 50) (20)Px33y43 { Px33y42, Px32y43, Px34y43 } CellNode (33 @ 43) (20)Px29y24 { Px28y24, Px29y25 } CellNode (29 @ 24) (20)Px54y47 { Px55y47, Px53y47, Px54y48, Px54y46 } CellNode (54 @ 47) (20)Px54y35 { Px55y35, Px54y34, Px53y35, Px54y36 } CellNode (54 @ 35) (20)Px45y48 { Px44y48, Px45y47, Px46y48, Px45y49 } CellNode (45 @ 48) (20)Px54y23 { Px54y22, Px53y23, Px54y24, Px55y23 } CellNode (54 @ 23) (20)Px54y54 { Px55y54, Px54y53, Px53y54, Px54y55 } CellNode (54 @ 54) (20)Px24y33 { Px24y34, Px23y33, Px24y32 } CellNode (24 @ 33) (20)Px40y56 { Px40y55, Px40y57, Px39y56, Px41y56 } CellNode (40 @ 56) (20)Px54y12 { Px54y13, Px53y12 } CellNode (54 @ 12) (20)Px10y35 { Px11y35, Px10y34, Px9y35, Px10y36 } CellNode (10 @ 35) (20)Px45y55 { Px45y56, Px46y55, Px44y55, Px45y54 } CellNode (45 @ 55) (20)Px57y29 { Px57y30, Px56y29, Px57y28 } CellNode (57 @ 29) (20)Px54y43 { Px54y44, Px55y43, Px53y43, Px54y42 } CellNode (54 @ 43) (20)Px52y18 { Px53y18, Px52y17, Px52y19 } CellNode (52 @ 18) (20)Px27y38 { Px26y38, Px27y37, Px27y39, Px28y38 } CellNode (27 @ 38) (20)Px57y17 { Px57y16, Px57y18, Px56y17 } CellNode (57 @ 17) (20)Px40y45 { Px39y45, Px41y45, Px40y46 } CellNode (40 @ 45) (20)Px36y56 { Px37y56, Px35y56, Px36y55, Px36y57 } CellNode (36 @ 56) (20)Px54y31 { Px54y30, Px53y31, Px55y31, Px54y32 } CellNode (54 @ 31) (20)Px52y49 { Px51y49, Px52y48, Px52y50, Px53y49 } CellNode (52 @ 49) (20)Px29y51 { Px28y51, Px29y52 } CellNode (29 @ 51) (20)Px45y44 { Px45y43, Px46y44, Px44y44, Px45y45 } CellNode (45 @ 44) (20)Px57y48 { Px57y47, Px57y49, Px56y48 } CellNode (57 @ 48) (20)Px52y37 { Px51y37, Px52y36, Px52y38, Px53y37 } CellNode (52 @ 37) (20)Px15y23 { Px14y23, Px16y23, Px15y24 } CellNode (15 @ 23) (20)Px57y36 { Px57y37, Px56y36, Px57y35 } CellNode (57 @ 36) (20)Px54y50 { Px53y50, Px54y49, Px54y51, Px55y50 } CellNode (54 @ 50) (20)Px36y45 { Px36y44 } CellNode (36 @ 45) (20)Px29y40 { Px28y40, Px29y41, Px29y39, Px30y40 } CellNode (29 @ 40) (20)Px51y9 { Px50y9, Px51y10 } CellNode (51 @ 9) (20)Px48y49 { Px49y49, Px47y49, Px48y48, Px48y50 } CellNode (48 @ 49) (20)Px52y56 { Px52y55, Px52y57, Px53y56, Px51y56 } CellNode (52 @ 56) (20)Px52y26 { Px51y26, Px52y27, Px52y25, Px53y26 } CellNode (52 @ 26) (20)Px45y21 { Px44y21, Px45y22 } CellNode (45 @ 21) (20)Px48y37 { Px48y38, Px49y37 } CellNode (48 @ 37) (20)Px36y7 { Px35y7, Px36y8 } CellNode (36 @ 7) (20)Px57y55 { Px57y54, Px57y56, Px56y55 } CellNode (57 @ 55) (20)Px57y25 { Px56y25, Px57y26, Px57y24 } CellNode (57 @ 25) (20)Px31y53 { Px31y54, Px30y53 } CellNode (31 @ 53) (20)Px52y14 { Px53y14, Px52y13, Px52y15 } CellNode (52 @ 14) (20)Px45y51 { Px45y52, Px46y51, Px45y50, Px44y51 } CellNode (45 @ 51) (20)Px43y57 { Px42y57, Px44y57, Px43y56 } CellNode (43 @ 57) (20)Px57y13 { Px56y13, Px57y14 } CellNode (57 @ 13) (20)Px9y34 { Px8y34, Px9y33, Px10y34, Px9y35 } CellNode (9 @ 34) (20)Px52y45 { Px51y45, Px52y44, Px53y45, Px52y46 } CellNode (52 @ 45) (20)Px48y26 { Px49y26, Px48y27 } CellNode (48 @ 26) (20)Px45y40 { Px45y39, Px46y40, Px45y41, Px44y40 } CellNode (45 @ 40) (20)Px47y5 { Px46y5 } CellNode (47 @ 5) (20)Px55y19 { Px55y20, Px56y19, Px54y19, Px55y18 } CellNode (55 @ 19) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="RadeDeBrest0">RadeDeBrest0messages none  defined. Px10y1 { Px9y1, Px9y2, Px11y2, Px10y2, Px11y1 } CellNode (10 @ 1) (20)Px10y10 { Px10y9, Px11y9, Px9y9, Px10y11, Px11y10, Px9y10, Px9y11, Px11y11 } CellNode (10 @ 10) (20)Px10y11 { Px9y12, Px11y12, Px11y10, Px9y10, Px10y12, Px9y11, Px11y11, Px10y10 } CellNode (10 @ 11) (20)Px10y12 { Px10y13, Px9y12, Px11y12, Px10y11, Px9y13, Px11y13, Px9y11, Px11y11 } CellNode (10 @ 12) (20)Px10y13 { Px11y14, Px9y12, Px11y12, Px10y14, Px9y13, Px11y13, Px10y12, Px9y14 } CellNode (10 @ 13) (20)Px10y14 { Px11y14, Px10y13, Px9y15, Px11y15, Px9y13, Px11y13, Px10y15, Px9y14 } CellNode (10 @ 14) (20)Px10y15 { Px10y14, Px9y14, Px11y14, Px9y15, Px11y15 } CellNode (10 @ 15) (20)Px10y2 { Px10y1, Px11y1, Px9y1, Px11y2, Px9y2, Px10y3, Px11y3, Px9y3 } CellNode (10 @ 2) (20)Px10y3 { Px10y4, Px11y4, Px10y2, Px9y4, Px11y2, Px9y2, Px11y3, Px9y3 } CellNode (10 @ 3) (20)Px10y4 { Px11y4, Px9y4, Px10y5, Px11y5, Px10y3, Px9y5, Px11y3, Px9y3 } CellNode (10 @ 4) (20)Px10y5 { Px11y6, Px9y6, Px10y4, Px11y4, Px9y4, Px11y5, Px9y5, Px10y6 } CellNode (10 @ 5) (20)Px10y6 { Px11y6, Px9y6, Px10y7, Px11y7, Px10y5, Px9y7, Px11y5, Px9y5 } CellNode (10 @ 6) (20)Px10y7 { Px11y6, Px9y6, Px11y7, Px9y7, Px10y8, Px11y8, Px10y6, Px9y8 } CellNode (10 @ 7) (20)Px10y8 { Px10y9, Px11y9, Px10y7, Px9y9, Px11y7, Px9y7, Px11y8, Px9y8 } CellNode (10 @ 8) (20)Px10y9 { Px11y9, Px9y9, Px11y10, Px9y10, Px10y8, Px11y8, Px9y8, Px10y10 } CellNode (10 @ 9) (20)Px11y1 { Px10y1, Px11y2, Px10y2, Px12y1, Px12y2 } CellNode (11 @ 1) (20)Px11y10 { Px10y9, Px12y10, Px11y9, Px12y9, Px10y11, Px12y11, Px11y11, Px10y10 } CellNode (11 @ 10) (20)Px11y11 { Px12y10, Px11y12, Px10y11, Px11y10, Px12y11, Px10y12, Px12y12, Px10y10 } CellNode (11 @ 11) (20)Px11y12 { Px10y13, Px12y13, Px10y11, Px12y11, Px11y13, Px10y12, Px11y11, Px12y12 } CellNode (11 @ 12) (20)Px11y13 { Px10y13, Px11y12, Px12y13, Px10y14, Px12y14, Px10y12, Px12y12, Px11y14 } CellNode (11 @ 13) (20)Px11y14 { Px12y14, Px10y15, Px10y13, Px11y15, Px11y13, Px12y13, Px10y14 } CellNode (11 @ 14) (20)Px11y15 { Px12y14, Px10y14, Px11y14, Px10y15 } CellNode (11 @ 15) (20)Px11y2 { Px12y3, Px11y1, Px12y1, Px10y2, Px12y2, Px10y3, Px11y3, Px10y1 } CellNode (11 @ 2) (20)Px11y3 { Px12y3, Px10y4, Px11y4, Px10y2, Px12y4, Px11y2, Px12y2, Px10y3 } CellNode (11 @ 3) (20)Px11y4 { Px12y3, Px10y4, Px12y4, Px10y5, Px11y5, Px10y3, Px12y5, Px11y3 } CellNode (11 @ 4) (20)Px11y5 { Px11y6, Px10y4, Px12y6, Px11y4, Px12y4, Px10y5, Px12y5, Px10y6 } CellNode (11 @ 5) (20)Px11y6 { Px12y6, Px10y7, Px11y7, Px10y5, Px12y7, Px11y5, Px12y5, Px10y6 } CellNode (11 @ 6) (20)Px11y7 { Px11y6, Px12y6, Px10y7, Px12y7, Px10y8, Px11y8, Px10y6, Px12y8 } CellNode (11 @ 7) (20)Px11y8 { Px10y9, Px11y9, Px10y7, Px12y9, Px11y7, Px12y7, Px10y8, Px12y8 } CellNode (11 @ 8) (20)Px11y9 { Px10y10, Px12y10, Px10y9, Px12y9, Px11y10, Px10y8, Px11y8, Px12y8 } CellNode (11 @ 9) (20)Px12y1 { Px12y2, Px11y2, Px13y1, Px13y2, Px11y1 } CellNode (12 @ 1) (20)Px12y10 { Px11y9, Px12y9, Px11y10, Px13y9, Px12y11, Px13y10, Px11y11, Px13y11 } CellNode (12 @ 10) (20)Px12y11 { Px12y10, Px11y12, Px13y12, Px11y10, Px13y10, Px11y11, Px12y12, Px13y11 } CellNode (12 @ 11) (20)Px12y12 { Px11y12, Px12y13, Px13y12, Px12y11, Px11y13, Px13y13, Px11y11, Px13y11 } CellNode (12 @ 12) (20)Px12y13 { Px13y14, Px11y12, Px13y12, Px11y13, Px12y14, Px13y13, Px12y12, Px11y14 } CellNode (12 @ 13) (20)Px12y14 { Px13y14, Px11y15, Px11y13, Px12y13, Px13y13, Px11y14 } CellNode (12 @ 14) (20)Px12y2 { Px12y3, Px11y1, Px13y3, Px12y1, Px13y1, Px11y2, Px13y2, Px11y3 } CellNode (12 @ 2) (20)Px12y3 { Px13y3, Px11y4, Px12y4, Px11y2, Px13y4, Px12y2, Px13y2, Px11y3 } CellNode (12 @ 3) (20)Px12y4 { Px12y3, Px13y3, Px11y4, Px13y4, Px11y5, Px12y5, Px11y3, Px13y5 } CellNode (12 @ 4) (20)Px12y5 { Px11y6, Px12y6, Px11y4, Px13y6, Px12y4, Px13y4, Px11y5, Px13y5 } CellNode (12 @ 5) (20)Px12y6 { Px11y6, Px13y6, Px11y7, Px12y7, Px11y5, Px13y7, Px12y5, Px13y5 } CellNode (12 @ 6) (20)Px12y7 { Px11y6, Px13y8, Px12y6, Px13y6, Px11y7, Px13y7, Px11y8, Px12y8 } CellNode (12 @ 7) (20)Px12y8 { Px13y8, Px11y9, Px12y9, Px11y7, Px13y9, Px12y7, Px13y7, Px11y8 } CellNode (12 @ 8) (20)Px12y9 { Px12y10, Px11y9, Px13y8, Px11y10, Px13y9, Px13y10, Px11y8, Px12y8 } CellNode (12 @ 9) (20)Px13y1 { Px14y1, Px14y2, Px13y2, Px12y1, Px12y2 } CellNode (13 @ 1) (20)Px13y10 { Px12y10, Px14y10, Px12y9, Px13y9, Px12y11, Px14y11, Px14y9, Px13y11 } CellNode (13 @ 10) (20)Px13y11 { Px14y12, Px12y10, Px14y10, Px13y12, Px12y11, Px13y10, Px14y11, Px12y12 } CellNode (13 @ 11) (20)Px13y12 { Px14y12, Px12y13, Px14y13, Px12y11, Px14y11, Px13y13, Px12y12, Px13y11 } CellNode (13 @ 12) (20)Px13y13 { Px14y12, Px13y14, Px12y13, Px13y12, Px14y13, Px12y14, Px14y14, Px12y12 } CellNode (13 @ 13) (20)Px13y14 { Px13y13, Px12y14, Px14y13, Px12y13, Px14y14 } CellNode (13 @ 14) (20)Px13y2 { Px12y3, Px13y3, Px12y1, Px14y3, Px13y1, Px14y1, Px12y2, Px14y2 } CellNode (13 @ 2) (20)Px13y23 { Px14y23, Px13y24, Px14y24, Px14y22 } CellNode (13 @ 23) (20)Px13y24 { Px14y23, Px13y23, Px14y24 } CellNode (13 @ 24) (20)Px13y3 { Px12y3, Px14y3, Px12y4, Px13y4, Px12y2, Px14y4, Px13y2, Px14y2 } CellNode (13 @ 3) (20)Px13y4 { Px12y3, Px14y5, Px13y3, Px14y3, Px12y4, Px14y4, Px12y5, Px13y5 } CellNode (13 @ 4) (20)Px13y5 { Px14y5, Px12y6, Px13y6, Px12y4, Px14y6, Px13y4, Px14y4, Px12y5 } CellNode (13 @ 5) (20)Px13y6 { Px14y5, Px12y6, Px14y6, Px12y7, Px13y7, Px12y5, Px14y7, Px13y5 } CellNode (13 @ 6) (20)Px13y7 { Px13y8, Px12y6, Px14y8, Px13y6, Px14y6, Px12y7, Px14y7, Px12y8 } CellNode (13 @ 7) (20)Px13y8 { Px14y8, Px12y9, Px13y9, Px12y7, Px14y9, Px13y7, Px14y7, Px12y8 } CellNode (13 @ 8) (20)Px13y9 { Px12y10, Px13y8, Px14y10, Px12y9, Px14y8, Px13y10, Px14y9, Px12y8 } CellNode (13 @ 9) (20)Px14y1 { Px15y2, Px13y1, Px14y2, Px13y2, Px15y1 } CellNode (14 @ 1) (20)Px14y10 { Px15y11, Px13y9, Px13y10, Px14y11, Px14y9, Px15y10, Px15y9, Px13y11 } CellNode (14 @ 10) (20)Px14y11 { Px14y12, Px15y11, Px14y10, Px13y12, Px15y12, Px13y10, Px15y10, Px13y11 } CellNode (14 @ 11) (20)Px14y12 { Px15y11, Px13y12, Px14y13, Px15y12, Px14y11, Px13y13, Px15y13, Px13y11 } CellNode (14 @ 12) (20)Px14y13 { Px14y12, Px13y14, Px15y14, Px13y12, Px15y12, Px13y13, Px14y14, Px15y13 } CellNode (14 @ 13) (20)Px14y14 { Px13y13, Px15y14, Px13y14, Px14y13, Px15y13 } CellNode (14 @ 14) (20)Px14y2 { Px15y2, Px13y3, Px14y3, Px13y1, Px15y3, Px14y1, Px15y1, Px13y2 } CellNode (14 @ 2) (20)Px14y22 { Px15y21, Px14y23, Px15y22, Px15y23, Px13y23 } CellNode (14 @ 22) (20)Px14y23 { Px13y23, Px15y23, Px13y24, Px14y22, Px14y24, Px15y24, Px15y22 } CellNode (14 @ 23) (20)Px14y24 { Px14y23, Px13y24, Px15y23, Px13y23, Px15y24 } CellNode (14 @ 24) (20)Px14y3 { Px15y2, Px13y3, Px15y3, Px13y4, Px14y4, Px13y2, Px15y4, Px14y2 } CellNode (14 @ 3) (20)Px14y4 { Px14y5, Px13y3, Px15y5, Px14y3, Px15y3, Px13y4, Px15y4, Px13y5 } CellNode (14 @ 4) (20)Px14y5 { Px15y5, Px13y6, Px14y6, Px13y4, Px15y6, Px14y4, Px15y4, Px13y5 } CellNode (14 @ 5) (20)Px14y6 { Px15y7, Px14y5, Px15y5, Px13y6, Px15y6, Px13y7, Px14y7, Px13y5 } CellNode (14 @ 6) (20)Px14y7 { Px15y7, Px13y8, Px14y8, Px13y6, Px15y8, Px14y6, Px15y6, Px13y7 } CellNode (14 @ 7) (20)Px14y8 { Px15y7, Px13y8, Px15y8, Px13y9, Px14y9, Px13y7, Px15y9, Px14y7 } CellNode (14 @ 8) (20)Px14y9 { Px13y8, Px14y10, Px14y8, Px15y8, Px13y9, Px13y10, Px15y10, Px15y9 } CellNode (14 @ 9) (20)Px15y1 { Px15y2, Px14y1, Px16y2, Px14y2, Px16y1 } CellNode (15 @ 1) (20)Px15y10 { Px15y11, Px16y10, Px14y10, Px16y11, Px14y11, Px14y9, Px15y9, Px16y9 } CellNode (15 @ 10) (20)Px15y11 { Px14y12, Px16y10, Px14y10, Px15y12, Px16y11, Px14y11, Px15y10, Px16y12 } CellNode (15 @ 11) (20)Px15y12 { Px14y12, Px15y11, Px16y13, Px14y13, Px16y11, Px14y11, Px15y13, Px16y12 } CellNode (15 @ 12) (20)Px15y13 { Px14y12, Px15y14, Px16y13, Px14y13, Px15y12, Px16y14, Px14y14, Px16y12 } CellNode (15 @ 13) (20)Px15y14 { Px15y13, Px16y13, Px16y14, Px14y13, Px14y14 } CellNode (15 @ 14) (20)Px15y19 { Px16y20, Px16y18, Px15y20, Px16y19 } CellNode (15 @ 19) (20)Px15y2 { Px16y1, Px14y3, Px15y3, Px14y1, Px16y2, Px15y1, Px16y3, Px14y2 } CellNode (15 @ 2) (20)Px15y20 { Px15y21, Px16y20, Px16y21, Px15y19, Px16y19 } CellNode (15 @ 20) (20)Px15y21 { Px15y22, Px15y20, Px16y21, Px14y22, Px16y22, Px16y20 } CellNode (15 @ 21) (20)Px15y22 { Px14y23, Px16y23, Px16y21, Px15y23, Px14y22, Px15y21, Px16y22 } CellNode (15 @ 22) (20)Px15y23 { Px16y22, Px14y23, Px15y24, Px16y23, Px15y22, Px14y24, Px16y24, Px14y22 } CellNode (15 @ 23) (20)Px15y24 { Px14y23, Px16y24, Px14y24, Px15y23, Px16y23 } CellNode (15 @ 24) (20)Px15y3 { Px16y3, Px15y2, Px16y4, Px14y3, Px16y2, Px14y4, Px15y4, Px14y2 } CellNode (15 @ 3) (20)Px15y4 { Px14y5, Px16y4, Px14y3, Px16y5, Px15y3, Px15y5, Px14y4, Px16y3 } CellNode (15 @ 4) (20)Px15y5 { Px14y5, Px16y4, Px16y5, Px14y6, Px15y6, Px14y4, Px16y6, Px15y4 } CellNode (15 @ 5) (20)Px15y6 { Px15y7, Px14y5, Px16y7, Px15y5, Px16y5, Px14y6, Px16y6, Px14y7 } CellNode (15 @ 6) (20)Px15y7 { Px16y7, Px14y8, Px15y8, Px14y6, Px16y8, Px15y6, Px16y6, Px14y7 } CellNode (15 @ 7) (20)Px15y8 { Px15y7, Px16y7, Px14y8, Px16y8, Px14y9, Px15y9, Px14y7, Px16y9 } CellNode (15 @ 8) (20)Px15y9 { Px16y10, Px14y10, Px14y8, Px15y8, Px16y8, Px14y9, Px15y10, Px16y9 } CellNode (15 @ 9) (20)Px16y1 { Px15y2, Px16y2, Px17y1, Px15y1, Px17y2 } CellNode (16 @ 1) (20)Px16y10 { Px15y11, Px17y11, Px17y9, Px16y11, Px15y10, Px15y9, Px17y10, Px16y9 } CellNode (16 @ 10) (20)Px16y11 { Px15y11, Px16y10, Px17y11, Px15y12, Px17y12, Px15y10, Px17y10, Px16y12 } CellNode (16 @ 11) (20)Px16y12 { Px17y13, Px15y11, Px17y11, Px16y13, Px15y12, Px16y11, Px17y12, Px15y13 } CellNode (16 @ 12) (20)Px16y13 { Px17y13, Px15y14, Px15y12, Px16y12, Px16y14, Px17y12, Px15y13 } CellNode (16 @ 13) (20)Px16y14 { Px16y13, Px15y14, Px17y13, Px15y13 } CellNode (16 @ 14) (20)Px16y17 { Px16y18, Px17y17, Px17y18 } CellNode (16 @ 17) (20)Px16y18 { Px17y18, Px16y19, Px15y19, Px16y17, Px17y19, Px17y17 } CellNode (16 @ 18) (20)Px16y19 { Px15y20, Px17y20, Px16y18, Px17y18, Px15y19, Px17y19, Px16y20 } CellNode (16 @ 19) (20)Px16y2 { Px17y3, Px15y2, Px16y1, Px17y1, Px15y3, Px17y2, Px15y1, Px16y3 } CellNode (16 @ 2) (20)Px16y20 { Px15y19, Px15y21, Px17y19, Px17y21, Px16y19, Px16y21, Px17y20, Px15y20 } CellNode (16 @ 20) (20)Px16y21 { Px16y22, Px17y21, Px15y21, Px16y20, Px17y22, Px15y22, Px17y20, Px15y20 } CellNode (16 @ 21) (20)Px16y22 { Px15y23, Px17y21, Px15y21, Px16y23, Px17y22, Px15y22, Px16y21, Px17y23 } CellNode (16 @ 22) (20)Px16y23 { Px15y22, Px15y24, Px15y23, Px17y23, Px16y24, Px17y22, Px16y22 } CellNode (16 @ 23) (20)Px16y24 { Px15y24, Px17y23, Px15y23, Px16y23 } CellNode (16 @ 24) (20)Px16y3 { Px17y3, Px15y2, Px16y4, Px17y4, Px15y3, Px16y2, Px17y2, Px15y4 } CellNode (16 @ 3) (20)Px16y4 { Px17y3, Px15y5, Px16y5, Px15y3, Px17y4, Px17y5, Px15y4, Px16y3 } CellNode (16 @ 4) (20)Px16y5 { Px17y6, Px16y4, Px15y5, Px17y4, Px15y6, Px16y6, Px17y5, Px15y4 } CellNode (16 @ 5) (20)Px16y6 { Px15y7, Px16y7, Px15y5, Px17y6, Px16y5, Px17y7, Px15y6, Px17y5 } CellNode (16 @ 6) (20)Px16y7 { Px15y7, Px17y6, Px15y8, Px16y8, Px15y6, Px17y7, Px16y6, Px17y8 } CellNode (16 @ 7) (20)Px16y8 { Px17y8, Px15y7, Px16y7, Px17y9, Px15y8, Px17y7, Px15y9, Px16y9 } CellNode (16 @ 8) (20)Px16y9 { Px16y10, Px17y9, Px15y8, Px16y8, Px15y10, Px15y9, Px17y10, Px17y8 } CellNode (16 @ 9) (20)Px17y1 { Px16y2, Px18y1, Px18y2, Px17y2, Px16y1 } CellNode (17 @ 1) (20)Px17y10 { Px16y10, Px17y11, Px17y9, Px18y10, Px18y9, Px16y11, Px18y11, Px16y9 } CellNode (17 @ 10) (20)Px17y11 { Px18y12, Px16y10, Px18y10, Px16y11, Px17y12, Px18y11, Px17y10, Px16y12 } CellNode (17 @ 11) (20)Px17y12 { Px17y13, Px17y11, Px18y11, Px16y12, Px18y12, Px16y13, Px16y11 } CellNode (17 @ 12) (20)Px17y13 { Px16y13, Px17y12, Px16y14, Px18y12, Px16y12 } CellNode (17 @ 13) (20)Px17y17 { Px16y18, Px18y18, Px17y18, Px18y16, Px16y17, Px18y17 } CellNode (17 @ 17) (20)Px17y18 { Px18y17, Px16y18, Px17y19, Px18y18, Px17y17, Px16y19, Px18y19, Px16y17 } CellNode (17 @ 18) (20)Px17y19 { Px16y18, Px16y20, Px18y18, Px18y20, Px16y19, Px18y19, Px17y20, Px17y18 } CellNode (17 @ 19) (20)Px17y2 { Px17y3, Px16y1, Px18y3, Px17y1, Px18y1, Px16y2, Px18y2, Px16y3 } CellNode (17 @ 2) (20)Px17y20 { Px17y21, Px16y20, Px17y19, Px18y20, Px16y19, Px16y21, Px18y19, Px18y21 } CellNode (17 @ 20) (20)Px17y21 { Px16y22, Px18y22, Px16y20, Px18y20, Px17y22, Px16y21, Px17y20, Px18y21 } CellNode (17 @ 21) (20)Px17y22 { Px16y22, Px17y21, Px18y22, Px16y23, Px18y23, Px16y21, Px18y21, Px17y23 } CellNode (17 @ 22) (20)Px17y23 { Px18y24, Px18y22, Px16y23, Px18y23, Px16y24, Px16y22, Px17y22 } CellNode (17 @ 23) (20)Px17y3 { Px18y3, Px16y4, Px17y4, Px16y2, Px18y4, Px17y2, Px18y2, Px16y3 } CellNode (17 @ 3) (20)Px17y4 { Px17y3, Px18y3, Px16y4, Px16y5, Px18y4, Px17y5, Px16y3, Px18y5 } CellNode (17 @ 4) (20)Px17y5 { Px17y6, Px16y4, Px18y6, Px16y5, Px17y4, Px18y4, Px16y6, Px18y5 } CellNode (17 @ 5) (20)Px17y6 { Px16y7, Px18y6, Px16y5, Px17y7, Px18y7, Px16y6, Px17y5, Px18y5 } CellNode (17 @ 6) (20)Px17y7 { Px18y8, Px16y7, Px17y6, Px18y6, Px16y8, Px18y7, Px16y6, Px17y8 } CellNode (17 @ 7) (20)Px17y8 { Px18y8, Px16y7, Px17y9, Px18y9, Px16y8, Px17y7, Px18y7, Px16y9 } CellNode (17 @ 8) (20)Px17y9 { Px17y8, Px18y8, Px16y10, Px18y10, Px18y9, Px16y8, Px17y10, Px16y9 } CellNode (17 @ 9) (20)Px18y1 { Px19y2, Px17y1, Px18y2, Px17y2, Px19y1 } CellNode (18 @ 1) (20)Px18y10 { Px19y10, Px17y11, Px17y9, Px19y11, Px18y9, Px19y9, Px18y11, Px17y10 } CellNode (18 @ 10) (20)Px18y11 { Px19y10, Px18y12, Px17y11, Px18y10, Px19y11, Px17y12, Px19y12, Px17y10 } CellNode (18 @ 11) (20)Px18y12 { Px17y13, Px17y11, Px18y11, Px19y13, Px19y11, Px17y12, Px19y12 } CellNode (18 @ 12) (20)Px18y16 { Px19y15, Px18y17, Px19y16, Px19y17, Px17y17 } CellNode (18 @ 16) (20)Px18y17 { Px19y17, Px18y18, Px18y16, Px17y18, Px19y18, Px19y16, Px17y17 } CellNode (18 @ 17) (20)Px18y18 { Px18y17, Px19y18, Px17y19, Px19y19, Px17y17, Px19y17, Px18y19, Px17y18 } CellNode (18 @ 18) (20)Px18y19 { Px19y20, Px19y18, Px17y19, Px18y18, Px19y19, Px18y20, Px17y20, Px17y18 } CellNode (18 @ 19) (20)Px18y2 { Px17y3, Px18y3, Px17y1, Px19y3, Px18y1, Px19y1, Px17y2, Px19y2 } CellNode (18 @ 2) (20)Px18y20 { Px17y20, Px17y21, Px17y19, Px19y21, Px19y19, Px18y19, Px18y21, Px19y20 } CellNode (18 @ 20) (20)Px18y21 { Px17y21, Px18y22, Px19y21, Px18y20, Px17y22, Px19y22, Px17y20, Px19y20 } CellNode (18 @ 21) (20)Px18y22 { Px19y23, Px17y21, Px19y21, Px17y22, Px18y23, Px19y22, Px18y21, Px17y23 } CellNode (18 @ 22) (20)Px18y23 { Px19y24, Px19y22, Px18y22, Px18y24, Px17y23, Px19y23, Px17y22 } CellNode (18 @ 23) (20)Px18y24 { Px19y23, Px17y23, Px19y24, Px18y23 } CellNode (18 @ 24) (20)Px18y3 { Px17y3, Px19y3, Px17y4, Px18y4, Px17y2, Px19y4, Px18y2, Px19y2 } CellNode (18 @ 3) (20)Px18y4 { Px17y3, Px19y5, Px18y3, Px19y3, Px17y4, Px19y4, Px17y5, Px18y5 } CellNode (18 @ 4) (20)Px18y5 { Px19y5, Px17y6, Px18y6, Px17y4, Px19y6, Px18y4, Px19y4, Px17y5 } CellNode (18 @ 5) (20)Px18y6 { Px19y5, Px17y6, Px19y6, Px17y7, Px18y7, Px17y5, Px19y7, Px18y5 } CellNode (18 @ 6) (20)Px18y7 { Px18y8, Px17y6, Px19y8, Px18y6, Px19y6, Px17y7, Px19y7, Px17y8 } CellNode (18 @ 7) (20)Px18y8 { Px19y8, Px17y9, Px18y9, Px17y7, Px19y9, Px18y7, Px19y7, Px17y8 } CellNode (18 @ 8) (20)Px18y9 { Px19y10, Px18y8, Px19y8, Px17y9, Px18y10, Px19y9, Px17y10, Px17y8 } CellNode (18 @ 9) (20)Px19y1 { Px20y2, Px19y2, Px18y1, Px18y2, Px20y1 } CellNode (19 @ 1) (20)Px19y10 { Px20y10, Px18y10, Px20y11, Px19y11, Px18y9, Px19y9, Px20y9, Px18y11 } CellNode (19 @ 10) (20)Px19y11 { Px20y10, Px18y12, Px19y10, Px18y10, Px20y11, Px18y11, Px19y12, Px20y12 } CellNode (19 @ 11) (20)Px19y12 { Px20y12, Px18y11, Px19y13, Px19y11, Px20y13, Px18y12, Px20y11 } CellNode (19 @ 12) (20)Px19y13 { Px20y14, Px20y12, Px20y13, Px18y12, Px19y14, Px19y12 } CellNode (19 @ 13) (20)Px19y14 { Px20y14, Px19y15, Px20y15, Px19y13, Px20y13 } CellNode (19 @ 14) (20)Px19y15 { Px20y14, Px20y15, Px18y16, Px19y16, Px19y14, Px20y16 } CellNode (19 @ 15) (20)Px19y16 { Px20y16, Px19y17, Px19y15, Px20y17, Px20y15, Px18y16, Px18y17 } CellNode (19 @ 16) (20)Px19y17 { Px18y17, Px19y18, Px20y18, Px19y16, Px18y18, Px20y16, Px18y16, Px20y17 } CellNode (19 @ 17) (20)Px19y18 { Px18y17, Px20y18, Px18y18, Px19y19, Px20y19, Px19y17, Px18y19, Px20y17 } CellNode (19 @ 18) (20)Px19y19 { Px19y18, Px20y20, Px20y18, Px18y18, Px18y20, Px20y19, Px18y19, Px19y20 } CellNode (19 @ 19) (20)Px19y2 { Px20y2, Px18y3, Px19y3, Px18y1, Px20y3, Px19y1, Px20y1, Px18y2 } CellNode (19 @ 2) (20)Px19y20 { Px20y20, Px19y21, Px19y19, Px18y20, Px20y21, Px20y19, Px18y19, Px18y21 } CellNode (19 @ 20) (20)Px19y21 { Px20y22, Px20y20, Px18y22, Px18y20, Px20y21, Px19y22, Px18y21, Px19y20 } CellNode (19 @ 21) (20)Px19y22 { Px19y23, Px18y22, Px19y21, Px20y23, Px20y21, Px18y23, Px18y21, Px20y22 } CellNode (19 @ 22) (20)Px19y23 { Px18y24, Px18y22, Px20y23, Px19y24, Px18y23, Px20y24, Px19y22, Px20y22 } CellNode (19 @ 23) (20)Px19y24 { Px18y24, Px19y23, Px20y23, Px18y23, Px20y24 } CellNode (19 @ 24) (20)Px19y3 { Px20y2, Px18y3, Px20y3, Px18y4, Px19y4, Px18y2, Px20y4, Px19y2 } CellNode (19 @ 3) (20)Px19y4 { Px19y5, Px18y3, Px20y5, Px19y3, Px20y3, Px18y4, Px20y4, Px18y5 } CellNode (19 @ 4) (20)Px19y5 { Px20y5, Px18y6, Px19y6, Px18y4, Px20y6, Px19y4, Px20y4, Px18y5 } CellNode (19 @ 5) (20)Px19y6 { Px20y7, Px19y5, Px20y5, Px18y6, Px20y6, Px18y7, Px19y7, Px18y5 } CellNode (19 @ 6) (20)Px19y7 { Px18y8, Px19y8, Px20y8, Px18y6, Px19y6, Px20y6, Px18y7, Px20y7 } CellNode (19 @ 7) (20)Px19y8 { Px18y8, Px20y8, Px18y9, Px19y9, Px20y9, Px18y7, Px19y7, Px20y7 } CellNode (19 @ 8) (20)Px19y9 { Px20y10, Px18y8, Px19y10, Px19y8, Px20y8, Px18y10, Px18y9, Px20y9 } CellNode (19 @ 9) (20)Px1y1 { Px2y1, Px1y2, Px2y2 } CellNode (1 @ 1) (20)Px1y10 { Px1y9, Px2y10, Px2y11, Px1y11, Px2y9 } CellNode (1 @ 10) (20)Px1y11 { Px2y10, Px2y11, Px1y12, Px2y12, Px1y10 } CellNode (1 @ 11) (20)Px1y12 { Px2y13, Px1y11, Px2y11, Px2y12, Px1y13 } CellNode (1 @ 12) (20)Px1y13 { Px2y13, Px1y14, Px2y14, Px1y12, Px2y12 } CellNode (1 @ 13) (20)Px1y14 { Px2y13, Px2y14, Px1y15, Px2y15, Px1y13 } CellNode (1 @ 14) (20)Px1y15 { Px1y14, Px2y14, Px2y15, Px1y16, Px2y16 } CellNode (1 @ 15) (20)Px1y16 { Px1y17, Px2y17, Px1y15, Px2y15, Px2y16 } CellNode (1 @ 16) (20)Px1y17 { Px2y17, Px1y18, Px2y18, Px1y16, Px2y16 } CellNode (1 @ 17) (20)Px1y18 { Px2y17, Px2y18, Px1y19, Px2y19, Px1y17 } CellNode (1 @ 18) (20)Px1y19 { Px1y18, Px2y18, Px2y19 } CellNode (1 @ 19) (20)Px1y2 { Px2y2, Px2y3, Px1y3, Px2y1, Px1y1 } CellNode (1 @ 2) (20)Px1y22 { Px2y21, Px1y23, Px2y22, Px2y23 } CellNode (1 @ 22) (20)Px1y23 { Px2y24, Px1y22, Px2y22, Px1y24, Px2y23 } CellNode (1 @ 23) (20)Px1y24 { Px2y24, Px1y25, Px2y25, Px1y23, Px2y23 } CellNode (1 @ 24) (20)Px1y25 { Px2y24, Px2y25, Px1y26, Px2y26, Px1y24 } CellNode (1 @ 25) (20)Px1y26 { Px1y25, Px2y25, Px1y27, Px2y26, Px2y27 } CellNode (1 @ 26) (20)Px1y27 { Px2y27, Px1y26, Px2y26 } CellNode (1 @ 27) (20)Px1y3 { Px2y3, Px1y2, Px2y4, Px1y4, Px2y2 } CellNode (1 @ 3) (20)Px1y4 { Px1y5, Px2y3, Px2y4, Px1y3, Px2y5 } CellNode (1 @ 4) (20)Px1y5 { Px2y6, Px1y6, Px2y4, Px2y5, Px1y4 } CellNode (1 @ 5) (20)Px1y6 { Px1y5, Px2y6, Px2y7, Px1y7, Px2y5 } CellNode (1 @ 6) (20)Px1y7 { Px2y6, Px2y7, Px1y6, Px2y8, Px1y8 } CellNode (1 @ 7) (20)Px1y8 { Px1y9, Px2y7, Px2y8, Px1y7, Px2y9 } CellNode (1 @ 8) (20)Px1y9 { Px2y9, Px2y10, Px1y10, Px2y8, Px1y8 } CellNode (1 @ 9) (20)Px20y1 { Px20y2, Px19y2, Px21y1, Px21y2, Px19y1 } CellNode (20 @ 1) (20)Px20y10 { Px19y10, Px21y11, Px20y11, Px19y11, Px19y9, Px20y9, Px21y10, Px21y9 } CellNode (20 @ 10) (20)Px20y11 { Px20y10, Px21y11, Px19y10, Px19y11, Px21y12, Px21y10, Px19y12, Px20y12 } CellNode (20 @ 11) (20)Px20y12 { Px21y11, Px20y13, Px19y13, Px20y11, Px21y12, Px19y11, Px19y12, Px21y13 } CellNode (20 @ 12) (20)Px20y13 { Px19y13, Px21y14, Px21y12, Px20y14, Px19y14, Px19y12, Px21y13, Px20y12 } CellNode (20 @ 13) (20)Px20y14 { Px19y15, Px20y13, Px19y13, Px21y14, Px19y14, Px21y15, Px21y13, Px20y15 } CellNode (20 @ 14) (20)Px20y15 { Px21y16, Px21y14, Px20y16, Px19y16, Px20y14, Px19y14, Px21y15, Px19y15 } CellNode (20 @ 15) (20)Px20y16 { Px21y16, Px19y15, Px19y16, Px21y17, Px21y15, Px19y17, Px20y17, Px20y15 } CellNode (20 @ 16) (20)Px20y17 { Px21y16, Px19y18, Px20y18, Px19y16, Px20y16, Px21y17, Px19y17, Px21y18 } CellNode (20 @ 17) (20)Px20y18 { Px19y18, Px21y19, Px21y17, Px19y19, Px20y19, Px19y17, Px21y18, Px20y17 } CellNode (20 @ 18) (20)Px20y19 { Px19y18, Px21y19, Px20y20, Px20y18, Px19y19, Px21y20, Px21y18, Px19y20 } CellNode (20 @ 19) (20)Px20y2 { Px21y2, Px19y3, Px20y3, Px21y3, Px19y1, Px20y1, Px21y1, Px19y2 } CellNode (20 @ 2) (20)Px20y20 { Px21y21, Px21y19, Px19y21, Px19y19, Px20y21, Px21y20, Px20y19, Px19y20 } CellNode (20 @ 20) (20)Px20y21 { Px21y21, Px20y22, Px20y20, Px19y21, Px21y22, Px21y20, Px19y22, Px19y20 } CellNode (20 @ 21) (20)Px20y22 { Px21y21, Px19y23, Px19y21, Px21y22, Px20y23, Px20y21, Px19y22, Px21y23 } CellNode (20 @ 22) (20)Px20y23 { Px19y23, Px21y24, Px21y22, Px19y24, Px19y22, Px20y24, Px21y23, Px20y22 } CellNode (20 @ 23) (20)Px20y24 { Px19y23, Px21y24, Px19y24, Px20y23, Px21y23 } CellNode (20 @ 24) (20)Px20y3 { Px19y2, Px20y2, Px21y2, Px19y3, Px21y3, Px19y4, Px20y4, Px21y4 } CellNode (20 @ 3) (20)Px20y4 { Px19y5, Px20y5, Px21y5, Px19y3, Px20y3, Px21y3, Px19y4, Px21y4 } CellNode (20 @ 4) (20)Px20y5 { Px19y5, Px21y5, Px19y6, Px20y6, Px19y4, Px21y6, Px20y4, Px21y4 } CellNode (20 @ 5) (20)Px20y6 { Px19y5, Px21y7, Px20y5, Px21y5, Px19y6, Px21y6, Px19y7, Px20y7 } CellNode (20 @ 6) (20)Px20y7 { Px21y7, Px19y8, Px20y8, Px19y6, Px21y8, Px20y6, Px21y6, Px19y7 } CellNode (20 @ 7) (20)Px20y8 { Px20y7, Px21y7, Px19y8, Px21y8, Px19y9, Px20y9, Px19y7, Px21y9 } CellNode (20 @ 8) (20)Px20y9 { Px20y10, Px19y10, Px19y8, Px20y8, Px21y8, Px19y9, Px21y10, Px21y9 } CellNode (20 @ 9) (20)Px21y1 { Px20y2, Px22y1, Px22y2, Px21y2, Px20y1 } CellNode (21 @ 1) (20)Px21y10 { Px20y10, Px21y11, Px22y10, Px22y9, Px20y11, Px22y11, Px20y9, Px21y9 } CellNode (21 @ 10) (20)Px21y11 { Px20y10, Px22y10, Px20y11, Px21y12, Px22y11, Px21y10, Px20y12, Px22y12 } CellNode (21 @ 11) (20)Px21y12 { Px21y11, Px20y13, Px22y13, Px20y11, Px22y11, Px20y12, Px21y13, Px22y12 } CellNode (21 @ 12) (20)Px21y13 { Px20y13, Px21y14, Px22y13, Px21y12, Px20y14, Px22y14, Px20y12, Px22y12 } CellNode (21 @ 13) (20)Px21y14 { Px22y15, Px20y13, Px22y13, Px20y14, Px21y15, Px22y14, Px21y13, Px20y15 } CellNode (21 @ 14) (20)Px21y15 { Px21y16, Px22y15, Px21y14, Px20y16, Px22y16, Px20y14, Px22y14, Px20y15 } CellNode (21 @ 15) (20)Px21y16 { Px22y15, Px20y16, Px21y17, Px22y16, Px21y15, Px20y17, Px22y17, Px20y15 } CellNode (21 @ 16) (20)Px21y17 { Px21y16, Px20y18, Px22y18, Px20y16, Px22y16, Px20y17, Px21y18, Px22y17 } CellNode (21 @ 17) (20)Px21y18 { Px20y18, Px21y19, Px22y18, Px21y17, Px20y19, Px22y19, Px20y17, Px22y17 } CellNode (21 @ 18) (20)Px21y19 { Px20y18, Px20y20, Px22y18, Px22y20, Px20y19, Px21y20, Px22y19, Px21y18 } CellNode (21 @ 19) (20)Px21y2 { Px20y2, Px22y2, Px20y3, Px21y3, Px20y1, Px22y3, Px21y1, Px22y1 } CellNode (21 @ 2) (20)Px21y20 { Px21y21, Px21y19, Px20y20, Px22y20, Px20y19, Px20y21, Px22y19, Px22y21 } CellNode (21 @ 20) (20)Px21y21 { Px22y22, Px20y20, Px22y20, Px21y22, Px20y21, Px21y20, Px22y21, Px20y22 } CellNode (21 @ 21) (20)Px21y22 { Px21y21, Px22y22, Px20y23, Px22y23, Px20y21, Px22y21, Px21y23, Px20y22 } CellNode (21 @ 22) (20)Px21y23 { Px22y22, Px21y24, Px20y23, Px21y22, Px22y23, Px20y24, Px22y24, Px20y22 } CellNode (21 @ 23) (20)Px21y24 { Px21y23, Px22y23, Px20y23, Px22y24, Px20y24 } CellNode (21 @ 24) (20)Px21y3 { Px20y2, Px22y4, Px21y2, Px22y2, Px20y3, Px22y3, Px20y4, Px21y4 } CellNode (21 @ 3) (20)Px21y4 { Px22y4, Px20y5, Px21y5, Px20y3, Px22y5, Px21y3, Px22y3, Px20y4 } CellNode (21 @ 4) (20)Px21y5 { Px22y4, Px20y5, Px22y5, Px20y6, Px21y6, Px20y4, Px22y6, Px21y4 } CellNode (21 @ 5) (20)Px21y6 { Px21y7, Px20y5, Px22y7, Px21y5, Px22y5, Px20y6, Px22y6, Px20y7 } CellNode (21 @ 6) (20)Px21y7 { Px22y7, Px20y8, Px21y8, Px20y6, Px22y8, Px21y6, Px22y6, Px20y7 } CellNode (21 @ 7) (20)Px21y8 { Px22y9, Px21y7, Px22y7, Px20y8, Px22y8, Px20y9, Px21y9, Px20y7 } CellNode (21 @ 8) (20)Px21y9 { Px20y10, Px22y9, Px22y10, Px20y8, Px21y8, Px22y8, Px20y9, Px21y10 } CellNode (21 @ 9) (20)Px22y1 { Px23y2, Px22y2, Px21y1, Px21y2, Px23y1 } CellNode (22 @ 1) (20)Px22y10 { Px22y9, Px21y11, Px23y9, Px23y11, Px22y11, Px21y10, Px21y9, Px23y10 } CellNode (22 @ 10) (20)Px22y11 { Px21y11, Px22y10, Px23y11, Px23y12, Px21y12, Px21y10, Px23y10, Px22y12 } CellNode (22 @ 11) (20)Px22y12 { Px21y11, Px23y11, Px22y13, Px23y12, Px21y12, Px22y11, Px23y13, Px21y13 } CellNode (22 @ 12) (20)Px22y13 { Px23y14, Px21y14, Px23y12, Px21y12, Px22y14, Px23y13, Px21y13, Px22y12 } CellNode (22 @ 13) (20)Px22y14 { Px22y15, Px23y14, Px21y14, Px22y13, Px23y15, Px21y15, Px23y13, Px21y13 } CellNode (22 @ 14) (20)Px22y15 { Px21y16, Px23y14, Px21y14, Px22y16, Px23y15, Px21y15, Px22y14, Px23y16 } CellNode (22 @ 15) (20)Px22y16 { Px21y16, Px22y15, Px23y17, Px21y17, Px23y15, Px21y15, Px22y17, Px23y16 } CellNode (22 @ 16) (20)Px22y17 { Px21y16, Px22y18, Px23y17, Px21y17, Px22y16, Px23y18, Px21y18, Px23y16 } CellNode (22 @ 17) (20)Px22y18 { Px23y19, Px21y19, Px23y17, Px21y17, Px22y19, Px23y18, Px21y18, Px22y17 } CellNode (22 @ 18) (20)Px22y19 { Px23y19, Px21y19, Px22y18, Px22y20, Px21y20, Px23y18, Px21y18, Px23y20 } CellNode (22 @ 19) (20)Px22y2 { Px23y1, Px21y2, Px23y2, Px21y3, Px22y3, Px21y1, Px23y3, Px22y1 } CellNode (22 @ 2) (20)Px22y20 { Px21y21, Px23y19, Px21y19, Px23y21, Px21y20, Px22y21, Px22y19, Px23y20 } CellNode (22 @ 20) (20)Px22y21 { Px21y21, Px22y22, Px23y21, Px22y20, Px21y22, Px23y22, Px21y20, Px23y20 } CellNode (22 @ 21) (20)Px22y22 { Px21y21, Px23y21, Px21y22, Px22y23, Px23y22, Px22y21, Px21y23, Px23y23 } CellNode (22 @ 22) (20)Px22y23 { Px22y22, Px21y24, Px23y24, Px21y22, Px23y22, Px21y23, Px22y24, Px23y23 } CellNode (22 @ 23) (20)Px22y24 { Px23y24, Px21y24, Px22y23, Px23y23, Px21y23 } CellNode (22 @ 24) (20)Px22y3 { Px22y4, Px21y2, Px23y4, Px22y2, Px23y2, Px21y3, Px23y3, Px21y4 } CellNode (22 @ 3) (20)Px22y4 { Px23y4, Px21y5, Px22y5, Px21y3, Px23y5, Px22y3, Px23y3, Px21y4 } CellNode (22 @ 4) (20)Px22y5 { Px23y6, Px22y4, Px23y4, Px21y5, Px23y5, Px21y6, Px22y6, Px21y4 } CellNode (22 @ 5) (20)Px22y6 { Px23y6, Px21y7, Px22y7, Px21y5, Px23y7, Px22y5, Px23y5, Px21y6 } CellNode (22 @ 6) (20)Px22y7 { Px23y6, Px21y7, Px23y7, Px21y8, Px22y8, Px21y6, Px23y8, Px22y6 } CellNode (22 @ 7) (20)Px22y8 { Px22y9, Px21y7, Px23y9, Px22y7, Px23y7, Px21y8, Px23y8, Px21y9 } CellNode (22 @ 8) (20)Px22y9 { Px22y10, Px23y9, Px21y8, Px22y8, Px21y10, Px23y8, Px21y9, Px23y10 } CellNode (22 @ 9) (20)Px23y1 { Px22y1, Px23y2, Px22y2, Px24y1, Px24y2 } CellNode (23 @ 1) (20)Px23y10 { Px22y9, Px22y10, Px23y11, Px24y9, Px24y10, Px23y9, Px22y11, Px24y11 } CellNode (23 @ 10) (20)Px23y11 { Px24y12, Px22y10, Px24y10, Px23y12, Px22y11, Px24y11, Px23y10, Px22y12 } CellNode (23 @ 11) (20)Px23y12 { Px24y12, Px23y11, Px22y13, Px24y13, Px22y11, Px24y11, Px23y13, Px22y12 } CellNode (23 @ 12) (20)Px23y13 { Px24y12, Px23y14, Px22y13, Px23y12, Px24y13, Px22y14, Px24y14, Px22y12 } CellNode (23 @ 13) (20)Px23y14 { Px22y15, Px24y15, Px22y13, Px24y13, Px23y15, Px22y14, Px23y13, Px24y14 } CellNode (23 @ 14) (20)Px23y15 { Px22y15, Px23y14, Px24y15, Px22y16, Px24y16, Px22y14, Px24y14, Px23y16 } CellNode (23 @ 15) (20)Px23y16 { Px24y17, Px22y15, Px24y15, Px23y17, Px22y16, Px23y15, Px24y16, Px22y17 } CellNode (23 @ 16) (20)Px23y17 { Px24y17, Px22y18, Px24y18, Px22y16, Px24y16, Px23y18, Px22y17, Px23y16 } CellNode (23 @ 17) (20)Px23y18 { Px24y17, Px23y19, Px22y18, Px23y17, Px24y18, Px22y19, Px24y19, Px22y17 } CellNode (23 @ 18) (20)Px23y19 { Px22y18, Px22y20, Px24y18, Px24y20, Px22y19, Px23y18, Px23y20, Px24y19 } CellNode (23 @ 19) (20)Px23y2 { Px24y3, Px23y1, Px24y1, Px22y2, Px24y2, Px22y3, Px23y3, Px22y1 } CellNode (23 @ 2) (20)Px23y20 { Px23y19, Px23y21, Px24y20, Px22y20, Px24y21, Px22y21, Px22y19, Px24y19 } CellNode (23 @ 20) (20)Px23y21 { Px24y22, Px22y22, Px24y20, Px22y20, Px23y22, Px24y21, Px22y21, Px23y20 } CellNode (23 @ 21) (20)Px23y22 { Px24y22, Px22y22, Px23y21, Px24y23, Px22y23, Px24y21, Px22y21, Px23y23 } CellNode (23 @ 22) (20)Px23y23 { Px24y22, Px22y22, Px23y24, Px24y23, Px22y23, Px23y22, Px24y24, Px22y24 } CellNode (23 @ 23) (20)Px23y24 { Px24y23, Px24y24, Px22y23, Px23y23, Px22y24 } CellNode (23 @ 24) (20)Px23y3 { Px24y3, Px22y4, Px23y4, Px22y2, Px24y4, Px23y2, Px24y2, Px22y3 } CellNode (23 @ 3) (20)Px23y4 { Px24y3, Px22y4, Px24y4, Px22y5, Px23y5, Px22y3, Px24y5, Px23y3 } CellNode (23 @ 4) (20)Px23y5 { Px23y6, Px22y4, Px24y6, Px23y4, Px24y4, Px22y5, Px24y5, Px22y6 } CellNode (23 @ 5) (20)Px23y6 { Px24y6, Px22y7, Px23y7, Px22y5, Px24y7, Px23y5, Px24y5, Px22y6 } CellNode (23 @ 6) (20)Px23y7 { Px23y6, Px24y6, Px22y7, Px24y7, Px22y8, Px23y8, Px22y6, Px24y8 } CellNode (23 @ 7) (20)Px23y8 { Px22y9, Px23y9, Px22y7, Px24y9, Px23y7, Px24y7, Px22y8, Px24y8 } CellNode (23 @ 8) (20)Px23y9 { Px22y9, Px22y10, Px24y9, Px24y10, Px22y8, Px23y8, Px23y10, Px24y8 } CellNode (23 @ 9) (20)Px24y1 { Px23y1, Px23y2, Px25y1, Px25y2, Px24y2 } CellNode (24 @ 1) (20)Px24y10 { Px25y11, Px23y11, Px24y9, Px23y9, Px25y9, Px24y11, Px25y10, Px23y10 } CellNode (24 @ 10) (20)Px24y11 { Px24y12, Px25y11, Px23y11, Px24y10, Px23y12, Px25y12, Px25y10, Px23y10 } CellNode (24 @ 11) (20)Px24y12 { Px25y11, Px23y11, Px23y12, Px24y13, Px25y12, Px24y11, Px23y13, Px25y13 } CellNode (24 @ 12) (20)Px24y13 { Px24y12, Px23y14, Px25y14, Px23y12, Px25y12, Px23y13, Px24y14, Px25y13 } CellNode (24 @ 13) (20)Px24y14 { Px23y14, Px24y15, Px25y14, Px24y13, Px23y15, Px25y15, Px23y13, Px25y13 } CellNode (24 @ 14) (20)Px24y15 { Px25y16, Px23y14, Px25y14, Px23y15, Px24y16, Px25y15, Px24y14, Px23y16 } CellNode (24 @ 15) (20)Px24y16 { Px24y17, Px25y16, Px24y15, Px23y17, Px25y17, Px23y15, Px25y15, Px23y16 } CellNode (24 @ 16) (20)Px24y17 { Px25y16, Px23y17, Px24y18, Px25y17, Px24y16, Px23y18, Px25y18, Px23y16 } CellNode (24 @ 17) (20)Px24y18 { Px24y17, Px23y19, Px25y19, Px23y17, Px25y17, Px23y18, Px24y19, Px25y18 } CellNode (24 @ 18) (20)Px24y19 { Px23y19, Px25y19, Px24y20, Px24y18, Px23y18, Px23y20, Px25y18, Px25y20 } CellNode (24 @ 19) (20)Px24y2 { Px24y3, Px23y1, Px25y3, Px24y1, Px25y1, Px23y2, Px25y2, Px23y3 } CellNode (24 @ 2) (20)Px24y20 { Px23y19, Px23y21, Px25y19, Px25y21, Px24y21, Px23y20, Px24y19, Px25y20 } CellNode (24 @ 20) (20)Px24y21 { Px23y20, Px24y20, Px25y20, Px23y21, Px25y21, Px24y22, Px23y22 } CellNode (24 @ 21) (20)Px24y22 { Px24y23, Px24y21, Px23y23, Px23y21, Px25y21, Px23y22 } CellNode (24 @ 22) (20)Px24y23 { Px23y24, Px24y24, Px23y22, Px23y23, Px24y22 } CellNode (24 @ 23) (20)Px24y24 { Px23y23, Px24y23, Px23y24 } CellNode (24 @ 24) (20)Px24y3 { Px25y3, Px23y4, Px24y4, Px23y2, Px25y4, Px24y2, Px25y2, Px23y3 } CellNode (24 @ 3) (20)Px24y4 { Px24y3, Px25y3, Px23y4, Px25y4, Px23y5, Px24y5, Px23y3, Px25y5 } CellNode (24 @ 4) (20)Px24y5 { Px23y6, Px24y6, Px23y4, Px25y6, Px24y4, Px25y4, Px23y5, Px25y5 } CellNode (24 @ 5) (20)Px24y6 { Px23y6, Px25y6, Px23y7, Px24y7, Px23y5, Px25y7, Px24y5, Px25y5 } CellNode (24 @ 6) (20)Px24y7 { Px23y6, Px25y8, Px24y6, Px25y6, Px23y7, Px25y7, Px23y8, Px24y8 } CellNode (24 @ 7) (20)Px24y8 { Px25y8, Px23y9, Px24y9, Px23y7, Px25y9, Px24y7, Px25y7, Px23y8 } CellNode (24 @ 8) (20)Px24y9 { Px23y8, Px25y8, Px23y9, Px24y10, Px25y9, Px25y10, Px23y10, Px24y8 } CellNode (24 @ 9) (20)Px25y1 { Px26y1, Px26y2, Px24y1, Px25y2, Px24y2 } CellNode (25 @ 1) (20)Px25y10 { Px25y11, Px24y9, Px24y10, Px25y9, Px26y10, Px26y9, Px24y11, Px26y11 } CellNode (25 @ 10) (20)Px25y11 { Px24y12, Px26y12, Px24y10, Px26y10, Px25y12, Px24y11, Px25y10, Px26y11 } CellNode (25 @ 11) (20)Px25y12 { Px24y12, Px25y11, Px26y12, Px24y13, Px26y13, Px24y11, Px26y11, Px25y13 } CellNode (25 @ 12) (20)Px25y13 { Px26y14, Px24y12, Px26y12, Px25y14, Px24y13, Px25y12, Px26y13, Px24y14 } CellNode (25 @ 13) (20)Px25y14 { Px26y14, Px24y15, Px26y15, Px24y13, Px26y13, Px25y15, Px24y14, Px25y13 } CellNode (25 @ 14) (20)Px25y15 { Px26y14, Px25y16, Px24y15, Px25y14, Px26y15, Px24y16, Px26y16, Px24y14 } CellNode (25 @ 15) (20)Px25y16 { Px24y17, Px26y17, Px24y15, Px26y15, Px25y17, Px24y16, Px25y15, Px26y16 } CellNode (25 @ 16) (20)Px25y17 { Px24y17, Px25y16, Px26y17, Px24y18, Px26y18, Px24y16, Px26y16, Px25y18 } CellNode (25 @ 17) (20)Px25y18 { Px24y17, Px26y17, Px25y19, Px24y18, Px25y17, Px26y18, Px24y19, Px26y19 } CellNode (25 @ 18) (20)Px25y19 { Px25y20, Px24y20, Px26y20, Px24y18, Px26y18, Px24y19, Px25y18, Px26y19 } CellNode (25 @ 19) (20)Px25y2 { Px24y3, Px25y3, Px24y1, Px26y3, Px25y1, Px26y1, Px24y2, Px26y2 } CellNode (25 @ 2) (20)Px25y20 { Px25y19, Px25y21, Px26y20, Px24y20, Px24y21, Px26y21, Px24y19, Px26y19 } CellNode (25 @ 20) (20)Px25y21 { Px26y20, Px25y20, Px24y21, Px26y21, Px24y22, Px24y20 } CellNode (25 @ 21) (20)Px25y3 { Px24y3, Px26y3, Px24y4, Px25y4, Px24y2, Px26y4, Px25y2, Px26y2 } CellNode (25 @ 3) (20)Px25y4 { Px24y3, Px26y5, Px25y3, Px26y3, Px24y4, Px26y4, Px24y5, Px25y5 } CellNode (25 @ 4) (20)Px25y5 { Px26y5, Px24y6, Px25y6, Px24y4, Px26y6, Px25y4, Px26y4, Px24y5 } CellNode (25 @ 5) (20)Px25y6 { Px26y5, Px24y6, Px26y6, Px24y7, Px25y7, Px24y5, Px26y7, Px25y5 } CellNode (25 @ 6) (20)Px25y7 { Px25y8, Px24y6, Px26y8, Px25y6, Px26y6, Px24y7, Px26y7, Px24y8 } CellNode (25 @ 7) (20)Px25y8 { Px26y8, Px24y9, Px25y9, Px24y7, Px26y9, Px25y7, Px26y7, Px24y8 } CellNode (25 @ 8) (20)Px25y9 { Px25y8, Px26y8, Px24y9, Px24y10, Px26y10, Px26y9, Px25y10, Px24y8 } CellNode (25 @ 9) (20)Px26y1 { Px27y2, Px25y1, Px26y2, Px25y2, Px27y1 } CellNode (26 @ 1) (20)Px26y10 { Px27y9, Px25y11, Px27y11, Px25y9, Px26y9, Px25y10, Px26y11, Px27y10 } CellNode (26 @ 10) (20)Px26y11 { Px25y11, Px26y12, Px27y11, Px26y10, Px25y12, Px27y12, Px25y10, Px27y10 } CellNode (26 @ 11) (20)Px26y12 { Px27y13, Px25y11, Px27y11, Px25y12, Px26y13, Px27y12, Px26y11, Px25y13 } CellNode (26 @ 12) (20)Px26y13 { Px26y14, Px27y13, Px26y12, Px25y14, Px27y14, Px25y12, Px27y12, Px25y13 } CellNode (26 @ 13) (20)Px26y14 { Px27y13, Px25y14, Px26y15, Px27y14, Px26y13, Px25y15, Px27y15, Px25y13 } CellNode (26 @ 14) (20)Px26y15 { Px26y14, Px25y16, Px27y16, Px25y14, Px27y14, Px25y15, Px26y16, Px27y15 } CellNode (26 @ 15) (20)Px26y16 { Px25y16, Px26y17, Px27y16, Px26y15, Px25y17, Px27y17, Px25y15, Px27y15 } CellNode (26 @ 16) (20)Px26y17 { Px27y18, Px25y16, Px27y16, Px25y17, Px26y18, Px27y17, Px26y16, Px25y18 } CellNode (26 @ 17) (20)Px26y18 { Px27y18, Px26y17, Px25y19, Px27y19, Px25y17, Px27y17, Px25y18, Px26y19 } CellNode (26 @ 18) (20)Px26y19 { Px27y18, Px27y20, Px25y19, Px27y19, Px26y20, Px26y18, Px25y18, Px25y20 } CellNode (26 @ 19) (20)Px26y2 { Px27y2, Px25y3, Px26y3, Px25y1, Px27y3, Px26y1, Px27y1, Px25y2 } CellNode (26 @ 2) (20)Px26y20 { Px25y20, Px27y20, Px25y19, Px25y21, Px27y19, Px27y21, Px26y21, Px26y19 } CellNode (26 @ 20) (20)Px26y21 { Px26y20, Px25y21, Px27y20, Px25y20, Px27y21 } CellNode (26 @ 21) (20)Px26y3 { Px27y2, Px25y3, Px27y3, Px25y4, Px26y4, Px25y2, Px27y4, Px26y2 } CellNode (26 @ 3) (20)Px26y4 { Px26y5, Px25y3, Px27y5, Px26y3, Px27y3, Px25y4, Px27y4, Px25y5 } CellNode (26 @ 4) (20)Px26y5 { Px27y5, Px25y6, Px26y6, Px25y4, Px27y6, Px26y4, Px27y4, Px25y5 } CellNode (26 @ 5) (20)Px26y6 { Px27y7, Px26y5, Px27y5, Px25y6, Px27y6, Px25y7, Px26y7, Px25y5 } CellNode (26 @ 6) (20)Px26y7 { Px27y7, Px25y8, Px26y8, Px25y6, Px27y8, Px26y6, Px27y6, Px25y7 } CellNode (26 @ 7) (20)Px26y8 { Px27y7, Px25y8, Px27y8, Px25y9, Px26y9, Px25y7, Px27y9, Px26y7 } CellNode (26 @ 8) (20)Px26y9 { Px25y8, Px26y8, Px27y8, Px25y9, Px26y10, Px25y10, Px27y9, Px27y10 } CellNode (26 @ 9) (20)Px27y1 { Px26y1, Px27y2, Px26y2, Px28y1, Px28y2 } CellNode (27 @ 1) (20)Px27y10 { Px28y11, Px27y11, Px26y10, Px28y10, Px26y9, Px27y9, Px26y11, Px28y9 } CellNode (27 @ 10) (20)Px27y11 { Px28y11, Px26y12, Px28y12, Px26y10, Px28y10, Px27y12, Px26y11, Px27y10 } CellNode (27 @ 11) (20)Px27y12 { Px28y11, Px27y13, Px26y12, Px27y11, Px28y12, Px26y13, Px28y13, Px26y11 } CellNode (27 @ 12) (20)Px27y13 { Px26y14, Px28y14, Px26y12, Px28y12, Px27y14, Px26y13, Px27y12, Px28y13 } CellNode (27 @ 13) (20)Px27y14 { Px26y14, Px27y13, Px28y14, Px26y15, Px28y15, Px26y13, Px28y13, Px27y15 } CellNode (27 @ 14) (20)Px27y15 { Px26y14, Px28y14, Px27y16, Px26y15, Px27y14, Px28y15, Px26y16, Px28y16 } CellNode (27 @ 15) (20)Px27y16 { Px26y17, Px28y17, Px26y15, Px28y15, Px27y17, Px26y16, Px27y15, Px28y16 } CellNode (27 @ 16) (20)Px27y17 { Px27y18, Px26y17, Px27y16, Px28y17, Px28y18, Px26y18, Px26y16, Px28y16 } CellNode (27 @ 17) (20)Px27y18 { Px26y17, Px28y17, Px27y19, Px28y18, Px26y18, Px27y17, Px28y19, Px26y19 } CellNode (27 @ 18) (20)Px27y19 { Px27y18, Px27y20, Px26y20, Px28y18, Px26y18, Px28y20, Px28y19, Px26y19 } CellNode (27 @ 19) (20)Px27y2 { Px28y2, Px26y3, Px27y3, Px26y1, Px28y3, Px27y1, Px28y1, Px26y2 } CellNode (27 @ 2) (20)Px27y20 { Px28y21, Px27y19, Px27y21, Px28y20, Px26y20, Px26y21, Px28y19, Px26y19 } CellNode (27 @ 20) (20)Px27y21 { Px26y20, Px28y21, Px26y21, Px27y20, Px28y20 } CellNode (27 @ 21) (20)Px27y26 { Px28y26, Px28y25 } CellNode (27 @ 26) (20)Px27y3 { Px28y4, Px27y2, Px28y2, Px26y3, Px28y3, Px26y4, Px27y4, Px26y2 } CellNode (27 @ 3) (20)Px27y4 { Px28y4, Px26y5, Px27y5, Px26y3, Px28y5, Px27y3, Px28y3, Px26y4 } CellNode (27 @ 4) (20)Px27y5 { Px28y4, Px26y5, Px28y5, Px26y6, Px27y6, Px26y4, Px28y6, Px27y4 } CellNode (27 @ 5) (20)Px27y6 { Px27y7, Px26y5, Px28y7, Px27y5, Px28y5, Px26y6, Px28y6, Px26y7 } CellNode (27 @ 6) (20)Px27y7 { Px28y7, Px26y8, Px27y8, Px26y6, Px28y8, Px27y6, Px28y6, Px26y7 } CellNode (27 @ 7) (20)Px27y8 { Px27y7, Px28y7, Px26y8, Px28y8, Px26y9, Px27y9, Px26y7, Px28y9 } CellNode (27 @ 8) (20)Px27y9 { Px27y10, Px26y8, Px27y8, Px26y10, Px28y8, Px28y10, Px26y9, Px28y9 } CellNode (27 @ 9) (20)Px28y1 { Px27y2, Px29y1, Px29y2, Px28y2, Px27y1 } CellNode (28 @ 1) (20)Px28y10 { Px28y11, Px29y9, Px29y10, Px27y10, Px27y11, Px29y11, Px27y9, Px28y9 } CellNode (28 @ 10) (20)Px28y11 { Px29y10, Px27y11, Px28y12, Px29y11, Px28y10, Px27y12, Px29y12, Px27y10 } CellNode (28 @ 11) (20)Px28y12 { Px28y11, Px27y13, Px29y13, Px27y11, Px29y11, Px27y12, Px28y13, Px29y12 } CellNode (28 @ 12) (20)Px28y13 { Px27y13, Px28y14, Px29y13, Px28y12, Px27y14, Px29y14, Px27y12, Px29y12 } CellNode (28 @ 13) (20)Px28y14 { Px29y15, Px27y13, Px29y13, Px27y14, Px28y15, Px29y14, Px28y13, Px27y15 } CellNode (28 @ 14) (20)Px28y15 { Px29y15, Px28y14, Px27y16, Px29y16, Px27y14, Px29y14, Px27y15, Px28y16 } CellNode (28 @ 15) (20)Px28y16 { Px29y15, Px27y16, Px28y17, Px29y16, Px28y15, Px27y17, Px29y17, Px27y15 } CellNode (28 @ 16) (20)Px28y17 { Px27y18, Px29y18, Px27y16, Px29y16, Px28y18, Px27y17, Px29y17, Px28y16 } CellNode (28 @ 17) (20)Px28y18 { Px27y18, Px29y18, Px28y17, Px27y19, Px29y19, Px27y17, Px29y17, Px28y19 } CellNode (28 @ 18) (20)Px28y19 { Px27y18, Px27y20, Px29y18, Px29y20, Px27y19, Px28y18, Px28y20, Px29y19 } CellNode (28 @ 19) (20)Px28y2 { Px29y1, Px27y2, Px29y2, Px27y3, Px28y3, Px27y1, Px29y3, Px28y1 } CellNode (28 @ 2) (20)Px28y20 { Px27y20, Px29y20, Px29y21, Px27y19, Px27y21, Px29y19, Px28y19, Px28y21 } CellNode (28 @ 20) (20)Px28y21 { Px27y21, Px29y22, Px27y20, Px28y20, Px29y20, Px29y21 } CellNode (28 @ 21) (20)Px28y25 { Px27y26, Px29y24, Px28y26, Px29y25, Px29y26 } CellNode (28 @ 25) (20)Px28y26 { Px27y26, Px28y25, Px29y25, Px29y26 } CellNode (28 @ 26) (20)Px28y3 { Px28y4, Px27y2, Px29y4, Px28y2, Px29y2, Px27y3, Px29y3, Px27y4 } CellNode (28 @ 3) (20)Px28y4 { Px29y4, Px27y5, Px28y5, Px27y3, Px29y5, Px28y3, Px29y3, Px27y4 } CellNode (28 @ 4) (20)Px28y5 { Px28y4, Px29y4, Px27y5, Px29y5, Px27y6, Px28y6, Px27y4, Px29y6 } CellNode (28 @ 5) (20)Px28y6 { Px27y7, Px28y7, Px27y5, Px29y7, Px28y5, Px29y5, Px27y6, Px29y6 } CellNode (28 @ 6) (20)Px28y7 { Px27y7, Px29y7, Px27y8, Px28y8, Px27y6, Px29y8, Px28y6, Px29y6 } CellNode (28 @ 7) (20)Px28y8 { Px27y7, Px29y9, Px28y7, Px29y7, Px27y8, Px29y8, Px27y9, Px28y9 } CellNode (28 @ 8) (20)Px28y9 { Px29y9, Px29y10, Px27y8, Px28y8, Px28y10, Px29y8, Px27y9, Px27y10 } CellNode (28 @ 9) (20)Px29y1 { Px30y1, Px30y2, Px28y1, Px29y2, Px28y2 } CellNode (29 @ 1) (20)Px29y10 { Px28y11, Px29y9, Px30y9, Px30y10, Px29y11, Px28y10, Px30y11, Px28y9 } CellNode (29 @ 10) (20)Px29y11 { Px28y11, Px30y12, Px29y10, Px30y10, Px28y12, Px28y10, Px30y11, Px29y12 } CellNode (29 @ 11) (20)Px29y12 { Px28y11, Px30y12, Px29y13, Px28y12, Px29y11, Px30y13, Px30y11, Px28y13 } CellNode (29 @ 12) (20)Px29y13 { Px30y12, Px28y14, Px28y12, Px30y13, Px29y14, Px28y13, Px30y14, Px29y12 } CellNode (29 @ 13) (20)Px29y14 { Px29y15, Px28y14, Px30y15, Px29y13, Px30y13, Px28y15, Px28y13, Px30y14 } CellNode (29 @ 14) (20)Px29y15 { Px28y14, Px30y15, Px29y16, Px28y15, Px30y16, Px29y14, Px30y14, Px28y16 } CellNode (29 @ 15) (20)Px29y16 { Px30y17, Px29y15, Px30y15, Px28y17, Px28y15, Px30y16, Px29y17, Px28y16 } CellNode (29 @ 16) (20)Px29y17 { Px30y17, Px29y18, Px28y17, Px29y16, Px28y18, Px30y18, Px30y16, Px28y16 } CellNode (29 @ 17) (20)Px29y18 { Px30y17, Px28y17, Px30y18, Px28y18, Px29y19, Px30y19, Px28y19, Px29y17 } CellNode (29 @ 18) (20)Px29y19 { Px29y18, Px29y20, Px30y20, Px30y18, Px28y18, Px28y20, Px30y19, Px28y19 } CellNode (29 @ 19) (20)Px29y2 { Px29y1, Px30y1, Px28y2, Px30y2, Px28y3, Px29y3, Px30y3, Px28y1 } CellNode (29 @ 2) (20)Px29y20 { Px30y20, Px29y21, Px29y19, Px28y20, Px30y21, Px30y19, Px28y19, Px28y21 } CellNode (29 @ 20) (20)Px29y21 { Px30y20, Px29y22, Px28y20, Px30y21, Px29y20, Px30y22, Px28y21 } CellNode (29 @ 21) (20)Px29y22 { Px28y21, Px30y22, Px30y23, Px30y21, Px29y23, Px29y21 } CellNode (29 @ 22) (20)Px29y23 { Px30y22, Px29y24, Px30y23, Px29y22, Px30y24 } CellNode (29 @ 23) (20)Px29y24 { Px30y24, Px30y25, Px30y23, Px28y25, Px29y23, Px29y25 } CellNode (29 @ 24) (20)Px29y25 { Px28y26, Px29y24, Px30y25, Px29y26, Px30y26, Px28y25, Px30y24 } CellNode (29 @ 25) (20)Px29y26 { Px30y25, Px28y25, Px30y26, Px28y26, Px29y25 } CellNode (29 @ 26) (20)Px29y3 { Px28y4, Px29y4, Px28y2, Px30y4, Px29y2, Px30y2, Px28y3, Px30y3 } CellNode (29 @ 3) (20)Px29y4 { Px28y4, Px30y4, Px28y5, Px29y5, Px28y3, Px30y5, Px29y3, Px30y3 } CellNode (29 @ 4) (20)Px29y5 { Px28y4, Px30y6, Px29y4, Px30y4, Px28y5, Px30y5, Px28y6, Px29y6 } CellNode (29 @ 5) (20)Px29y6 { Px30y6, Px28y7, Px29y7, Px28y5, Px30y7, Px29y5, Px30y5, Px28y6 } CellNode (29 @ 6) (20)Px29y7 { Px30y6, Px28y7, Px30y7, Px28y8, Px29y8, Px28y6, Px30y8, Px29y6 } CellNode (29 @ 7) (20)Px29y8 { Px29y9, Px28y7, Px30y9, Px29y7, Px30y7, Px28y8, Px30y8, Px28y9 } CellNode (29 @ 8) (20)Px29y9 { Px29y10, Px30y9, Px30y10, Px28y8, Px28y10, Px29y8, Px30y8, Px28y9 } CellNode (29 @ 9) (20)Px2y1 { Px2y2, Px1y2, Px3y1, Px3y2, Px1y1 } CellNode (2 @ 1) (20)Px2y10 { Px1y10, Px3y9, Px3y10, Px1y11, Px3y11, Px1y9, Px2y11, Px2y9 } CellNode (2 @ 10) (20)Px2y11 { Px1y10, Px3y10, Px2y12, Px1y11, Px2y10, Px3y11, Px1y12, Px3y12 } CellNode (2 @ 11) (20)Px2y12 { Px1y13, Px3y13, Px1y11, Px3y11, Px2y13, Px1y12, Px2y11, Px3y12 } CellNode (2 @ 12) (20)Px2y13 { Px2y14, Px1y13, Px2y12, Px3y13, Px1y14, Px3y14, Px1y12, Px3y12 } CellNode (2 @ 13) (20)Px2y14 { Px3y15, Px1y13, Px3y13, Px2y15, Px1y14, Px2y13, Px3y14, Px1y15 } CellNode (2 @ 14) (20)Px2y15 { Px2y14, Px3y15, Px1y16, Px3y16, Px1y14, Px3y14, Px2y16, Px1y15 } CellNode (2 @ 15) (20)Px2y16 { Px3y15, Px2y17, Px1y16, Px2y15, Px3y16, Px1y17, Px3y17, Px1y15 } CellNode (2 @ 16) (20)Px2y17 { Px1y18, Px3y18, Px1y16, Px3y16, Px2y18, Px1y17, Px2y16, Px3y17 } CellNode (2 @ 17) (20)Px2y18 { Px2y19, Px2y17, Px3y17, Px1y18, Px3y18, Px1y19, Px1y17 } CellNode (2 @ 18) (20)Px2y19 { Px3y18, Px1y18, Px2y18, Px1y19 } CellNode (2 @ 19) (20)Px2y2 { Px3y1, Px1y2, Px3y2, Px1y3, Px2y3, Px1y1, Px3y3, Px2y1 } CellNode (2 @ 2) (20)Px2y21 { Px1y22, Px3y21, Px2y22, Px3y22 } CellNode (2 @ 21) (20)Px2y22 { Px1y22, Px3y22, Px1y23, Px3y23, Px3y21, Px2y23, Px2y21 } CellNode (2 @ 22) (20)Px2y23 { Px2y24, Px3y23, Px1y23, Px2y22, Px3y24, Px1y24, Px3y22, Px1y22 } CellNode (2 @ 23) (20)Px2y24 { Px3y25, Px1y25, Px3y23, Px1y23, Px2y25, Px3y24, Px1y24, Px2y23 } CellNode (2 @ 24) (20)Px2y25 { Px3y25, Px1y25, Px2y24, Px3y26, Px1y26, Px3y24, Px1y24, Px2y26 } CellNode (2 @ 25) (20)Px2y26 { Px3y25, Px1y25, Px2y27, Px3y26, Px1y26, Px2y25, Px3y27, Px1y27 } CellNode (2 @ 26) (20)Px2y27 { Px3y27, Px1y26, Px2y26, Px1y27, Px3y26 } CellNode (2 @ 27) (20)Px2y3 { Px2y4, Px1y2, Px3y4, Px2y2, Px3y2, Px1y3, Px3y3, Px1y4 } CellNode (2 @ 3) (20)Px2y4 { Px3y4, Px1y5, Px2y5, Px1y3, Px3y5, Px2y3, Px3y3, Px1y4 } CellNode (2 @ 4) (20)Px2y5 { Px2y4, Px3y4, Px1y5, Px3y5, Px1y6, Px2y6, Px1y4, Px3y6 } CellNode (2 @ 5) (20)Px2y6 { Px1y7, Px2y7, Px1y5, Px3y7, Px2y5, Px3y5, Px1y6, Px3y6 } CellNode (2 @ 6) (20)Px2y7 { Px1y7, Px3y7, Px1y8, Px2y8, Px1y6, Px3y8, Px2y6, Px3y6 } CellNode (2 @ 7) (20)Px2y8 { Px1y7, Px3y9, Px2y7, Px3y7, Px1y8, Px3y8, Px1y9, Px2y9 } CellNode (2 @ 8) (20)Px2y9 { Px1y10, Px3y9, Px3y10, Px1y8, Px2y10, Px2y8, Px3y8, Px1y9 } CellNode (2 @ 9) (20)Px30y1 { Px31y2, Px29y1, Px30y2, Px29y2, Px31y1 } CellNode (30 @ 1) (20)Px30y10 { Px29y9, Px29y10, Px30y9, Px31y9, Px31y11, Px29y11, Px30y11, Px31y10 } CellNode (30 @ 10) (20)Px30y11 { Px30y12, Px29y10, Px31y11, Px30y10, Px29y11, Px31y12, Px31y10, Px29y12 } CellNode (30 @ 11) (20)Px30y12 { Px31y11, Px29y13, Px30y13, Px31y12, Px29y11, Px30y11, Px29y12, Px31y13 } CellNode (30 @ 12) (20)Px30y13 { Px31y13, Px30y12, Px29y13, Px31y14, Px31y12, Px29y14, Px30y14, Px29y12 } CellNode (30 @ 13) (20)Px30y14 { Px29y15, Px30y15, Px29y13, Px31y14, Px30y13, Px29y14, Px31y15, Px31y13 } CellNode (30 @ 14) (20)Px30y15 { Px29y15, Px31y16, Px31y14, Px29y16, Px30y16, Px29y14, Px31y15, Px30y14 } CellNode (30 @ 15) (20)Px30y16 { Px30y17, Px31y16, Px29y15, Px30y15, Px29y16, Px31y17, Px31y15, Px29y17 } CellNode (30 @ 16) (20)Px30y17 { Px31y16, Px29y18, Px29y16, Px31y17, Px30y18, Px30y16, Px29y17, Px31y18 } CellNode (30 @ 17) (20)Px30y18 { Px30y17, Px29y18, Px31y19, Px31y17, Px29y19, Px30y19, Px31y18, Px29y17 } CellNode (30 @ 18) (20)Px30y19 { Px29y18, Px29y20, Px31y19, Px30y20, Px30y18, Px29y19, Px31y18, Px31y20 } CellNode (30 @ 19) (20)Px30y2 { Px31y3, Px30y1, Px29y1, Px31y1, Px29y2, Px31y2, Px29y3, Px30y3 } CellNode (30 @ 2) (20)Px30y20 { Px29y20, Px31y19, Px29y21, Px31y21, Px29y19, Px30y21, Px30y19, Px31y20 } CellNode (30 @ 20) (20)Px30y21 { Px30y22, Px29y20, Px31y21, Px29y21, Px30y20, Px31y22, Px29y22, Px31y20 } CellNode (30 @ 21) (20)Px30y22 { Px31y23, Px29y23, Px31y21, Px29y21, Px30y23, Px30y21, Px31y22, Px29y22 } CellNode (30 @ 22) (20)Px30y23 { Px30y22, Px31y23, Px29y23, Px31y24, Px29y24, Px31y22, Px29y22, Px30y24 } CellNode (30 @ 23) (20)Px30y24 { Px31y23, Px29y23, Px30y25, Px30y23, Px31y24, Px29y24, Px31y25, Px29y25 } CellNode (30 @ 24) (20)Px30y25 { Px31y26, Px29y26, Px31y24, Px29y24, Px30y26, Px30y24, Px31y25, Px29y25 } CellNode (30 @ 25) (20)Px30y26 { Px31y26, Px30y25, Px29y25, Px31y25, Px29y26 } CellNode (30 @ 26) (20)Px30y3 { Px31y3, Px29y4, Px30y4, Px29y2, Px31y4, Px30y2, Px31y2, Px29y3 } CellNode (30 @ 3) (20)Px30y4 { Px31y3, Px29y4, Px31y4, Px29y5, Px30y5, Px31y5, Px30y3, Px29y3 } CellNode (30 @ 4) (20)Px30y5 { Px30y6, Px29y4, Px31y6, Px30y4, Px31y4, Px29y5, Px31y5, Px29y6 } CellNode (30 @ 5) (20)Px30y6 { Px31y6, Px29y7, Px30y7, Px29y5, Px31y7, Px30y5, Px31y5, Px29y6 } CellNode (30 @ 6) (20)Px30y7 { Px30y6, Px31y8, Px31y6, Px29y7, Px31y7, Px29y8, Px30y8, Px29y6 } CellNode (30 @ 7) (20)Px30y8 { Px29y9, Px30y9, Px29y7, Px31y9, Px30y7, Px31y7, Px29y8, Px31y8 } CellNode (30 @ 8) (20)Px30y9 { Px29y9, Px29y10, Px30y10, Px31y9, Px29y8, Px30y8, Px31y10, Px31y8 } CellNode (30 @ 9) (20)Px31y1 { Px30y1, Px30y2, Px31y2 } CellNode (31 @ 1) (20)Px31y10 { Px31y9, Px30y9, Px30y10, Px30y11, Px31y11 } CellNode (31 @ 10) (20)Px31y11 { Px31y12, Px30y10, Px30y11, Px31y10, Px30y12 } CellNode (31 @ 11) (20)Px31y12 { Px31y11, Px30y13, Px31y13, Px30y11, Px30y12 } CellNode (31 @ 12) (20)Px31y13 { Px30y13, Px31y12, Px30y14, Px31y14, Px30y12 } CellNode (31 @ 13) (20)Px31y14 { Px31y15, Px30y13, Px31y13, Px30y14, Px30y15 } CellNode (31 @ 14) (20)Px31y15 { Px30y16, Px31y16, Px30y14, Px30y15, Px31y14 } CellNode (31 @ 15) (20)Px31y16 { Px31y15, Px30y16, Px30y17, Px31y17, Px30y15 } CellNode (31 @ 16) (20)Px31y17 { Px30y16, Px30y17, Px31y16, Px30y18, Px31y18 } CellNode (31 @ 17) (20)Px31y18 { Px31y19, Px30y17, Px31y17, Px30y18, Px30y19 } CellNode (31 @ 18) (20)Px31y19 { Px30y19, Px31y20, Px30y18, Px30y20, Px31y18 } CellNode (31 @ 19) (20)Px31y2 { Px30y1, Px30y2, Px31y3, Px30y3, Px31y1 } CellNode (31 @ 2) (20)Px31y20 { Px30y21, Px31y19, Px31y21, Px30y20, Px30y19 } CellNode (31 @ 20) (20)Px31y21 { Px30y21, Px30y22, Px31y20, Px30y20, Px31y22 } CellNode (31 @ 21) (20)Px31y22 { Px30y21, Px31y23, Px30y22, Px31y21, Px30y23 } CellNode (31 @ 22) (20)Px31y23 { Px31y22, Px30y22, Px31y24, Px30y23, Px30y24 } CellNode (31 @ 23) (20)Px31y24 { Px30y25, Px31y23, Px30y23, Px31y25, Px30y24 } CellNode (31 @ 24) (20)Px31y25 { Px31y26, Px30y25, Px31y24, Px30y26, Px30y24 } CellNode (31 @ 25) (20)Px31y26 { Px31y25, Px30y26, Px30y25 } CellNode (31 @ 26) (20)Px31y3 { Px31y2, Px30y2, Px30y3, Px31y4, Px30y4 } CellNode (31 @ 3) (20)Px31y4 { Px31y5, Px30y5, Px31y3, Px30y3, Px30y4 } CellNode (31 @ 4) (20)Px31y5 { Px30y5, Px31y6, Px30y6, Px31y4, Px30y4 } CellNode (31 @ 5) (20)Px31y6 { Px30y5, Px31y7, Px30y6, Px30y7, Px31y5 } CellNode (31 @ 6) (20)Px31y7 { Px30y8, Px31y6, Px30y6, Px31y8, Px30y7 } CellNode (31 @ 7) (20)Px31y8 { Px31y9, Px30y8, Px30y9, Px31y7, Px30y7 } CellNode (31 @ 8) (20)Px31y9 { Px30y8, Px30y10, Px30y9, Px31y10, Px31y8 } CellNode (31 @ 9) (20)Px3y1 { Px4y1, Px4y2, Px2y1, Px3y2, Px2y2 } CellNode (3 @ 1) (20)Px3y10 { Px4y11, Px3y9, Px4y9, Px2y10, Px3y11, Px4y10, Px2y11, Px2y9 } CellNode (3 @ 10) (20)Px3y11 { Px4y11, Px3y10, Px2y12, Px4y12, Px2y10, Px4y10, Px2y11, Px3y12 } CellNode (3 @ 11) (20)Px3y12 { Px4y11, Px2y12, Px3y13, Px4y12, Px3y11, Px2y13, Px4y13, Px2y11 } CellNode (3 @ 12) (20)Px3y13 { Px2y14, Px4y14, Px2y12, Px4y12, Px2y13, Px3y14, Px4y13, Px3y12 } CellNode (3 @ 13) (20)Px3y14 { Px2y14, Px3y15, Px4y14, Px3y13, Px2y15, Px4y15, Px2y13, Px4y13 } CellNode (3 @ 14) (20)Px3y15 { Px2y14, Px4y14, Px2y15, Px3y16, Px4y15, Px3y14, Px2y16, Px4y16 } CellNode (3 @ 15) (20)Px3y16 { Px3y15, Px2y17, Px4y17, Px2y15, Px4y15, Px2y16, Px3y17, Px4y16 } CellNode (3 @ 16) (20)Px3y17 { Px2y17, Px3y18, Px4y17, Px3y16, Px2y18, Px4y18, Px2y16, Px4y16 } CellNode (3 @ 17) (20)Px3y18 { Px4y17, Px3y17, Px2y18, Px4y18, Px2y19, Px2y17 } CellNode (3 @ 18) (20)Px3y2 { Px3y1, Px4y1, Px2y2, Px4y2, Px2y3, Px3y3, Px2y1, Px4y3 } CellNode (3 @ 2) (20)Px3y21 { Px4y21, Px2y21, Px4y22, Px2y22, Px3y22 } CellNode (3 @ 21) (20)Px3y22 { Px2y21, Px4y21, Px3y23, Px2y22, Px3y21, Px4y22, Px2y23, Px4y23 } CellNode (3 @ 22) (20)Px3y23 { Px2y24, Px4y24, Px2y22, Px4y22, Px3y24, Px2y23, Px3y22, Px4y23 } CellNode (3 @ 23) (20)Px3y24 { Px3y25, Px2y24, Px3y23, Px4y24, Px2y25, Px4y25, Px2y23, Px4y23 } CellNode (3 @ 24) (20)Px3y25 { Px4y26, Px2y24, Px4y24, Px3y26, Px2y25, Px3y24, Px4y25, Px2y26 } CellNode (3 @ 25) (20)Px3y26 { Px3y25, Px4y26, Px2y27, Px4y27, Px2y25, Px4y25, Px3y27, Px2y26 } CellNode (3 @ 26) (20)Px3y27 { Px3y26, Px4y26, Px2y26, Px4y27, Px2y27 } CellNode (3 @ 27) (20)Px3y3 { Px2y4, Px3y4, Px2y2, Px4y4, Px3y2, Px4y2, Px2y3, Px4y3 } CellNode (3 @ 3) (20)Px3y4 { Px2y4, Px4y4, Px2y5, Px3y5, Px2y3, Px4y5, Px3y3, Px4y3 } CellNode (3 @ 4) (20)Px3y5 { Px2y4, Px4y6, Px3y4, Px4y4, Px2y5, Px4y5, Px2y6, Px3y6 } CellNode (3 @ 5) (20)Px3y6 { Px4y6, Px2y7, Px3y7, Px2y5, Px4y7, Px3y5, Px4y5, Px2y6 } CellNode (3 @ 6) (20)Px3y7 { Px4y6, Px2y7, Px4y7, Px2y8, Px3y8, Px2y6, Px4y8, Px3y6 } CellNode (3 @ 7) (20)Px3y8 { Px3y9, Px2y7, Px4y9, Px3y7, Px4y7, Px2y8, Px4y8, Px2y9 } CellNode (3 @ 8) (20)Px3y9 { Px3y10, Px4y9, Px2y10, Px2y8, Px4y10, Px3y8, Px4y8, Px2y9 } CellNode (3 @ 9) (20)Px4y1 { Px5y2, Px4y2, Px3y1, Px3y2, Px5y1 } CellNode (4 @ 1) (20)Px4y10 { Px4y11, Px3y9, Px3y10, Px4y9, Px5y10, Px5y9, Px3y11, Px5y11 } CellNode (4 @ 10) (20)Px4y11 { Px5y12, Px3y10, Px5y10, Px4y12, Px3y11, Px4y10, Px5y11, Px3y12 } CellNode (4 @ 11) (20)Px4y12 { Px4y11, Px5y12, Px3y13, Px5y13, Px3y11, Px5y11, Px4y13, Px3y12 } CellNode (4 @ 12) (20)Px4y13 { Px5y12, Px4y14, Px3y13, Px4y12, Px5y13, Px3y14, Px5y14, Px3y12 } CellNode (4 @ 13) (20)Px4y14 { Px3y15, Px5y15, Px3y13, Px5y13, Px4y15, Px3y14, Px4y13, Px5y14 } CellNode (4 @ 14) (20)Px4y15 { Px3y15, Px4y14, Px5y15, Px3y16, Px5y16, Px3y14, Px5y14, Px4y16 } CellNode (4 @ 15) (20)Px4y16 { Px5y17, Px3y15, Px5y15, Px4y17, Px3y16, Px4y15, Px5y16, Px3y17 } CellNode (4 @ 16) (20)Px4y17 { Px5y17, Px3y18, Px5y18, Px3y16, Px5y16, Px4y18, Px3y17, Px4y16 } CellNode (4 @ 17) (20)Px4y18 { Px4y17, Px3y18, Px5y17, Px3y17, Px5y18 } CellNode (4 @ 18) (20)Px4y2 { Px3y1, Px5y3, Px4y1, Px5y1, Px3y2, Px5y2, Px3y3, Px4y3 } CellNode (4 @ 2) (20)Px4y21 { Px5y21, Px3y21, Px5y22, Px3y22, Px4y22 } CellNode (4 @ 21) (20)Px4y22 { Px4y21, Px3y22, Px5y22, Px3y23, Px3y21, Px4y23, Px5y21 } CellNode (4 @ 22) (20)Px4y23 { Px3y24, Px3y22, Px4y24, Px5y22, Px4y22, Px3y23 } CellNode (4 @ 23) (20)Px4y24 { Px3y23, Px4y25, Px3y24, Px3y25, Px4y23 } CellNode (4 @ 24) (20)Px4y25 { Px3y26, Px3y24, Px4y26, Px3y25, Px4y24 } CellNode (4 @ 25) (20)Px4y26 { Px3y27, Px3y25, Px5y27, Px4y25, Px4y27, Px3y26 } CellNode (4 @ 26) (20)Px4y27 { Px5y27, Px3y27, Px4y26, Px3y26 } CellNode (4 @ 27) (20)Px4y3 { Px5y3, Px3y4, Px4y4, Px3y2, Px5y4, Px4y2, Px5y2, Px3y3 } CellNode (4 @ 3) (20)Px4y4 { Px5y3, Px3y4, Px5y4, Px3y5, Px4y5, Px3y3, Px5y5, Px4y3 } CellNode (4 @ 4) (20)Px4y5 { Px4y6, Px3y4, Px5y6, Px4y4, Px5y4, Px3y5, Px5y5, Px3y6 } CellNode (4 @ 5) (20)Px4y6 { Px5y6, Px3y7, Px4y7, Px3y5, Px5y7, Px4y5, Px5y5, Px3y6 } CellNode (4 @ 6) (20)Px4y7 { Px5y8, Px4y6, Px5y6, Px3y7, Px5y7, Px3y8, Px4y8, Px3y6 } CellNode (4 @ 7) (20)Px4y8 { Px5y8, Px3y9, Px4y9, Px3y7, Px5y9, Px4y7, Px5y7, Px3y8 } CellNode (4 @ 8) (20)Px4y9 { Px5y8, Px3y9, Px3y10, Px5y10, Px5y9, Px4y10, Px3y8, Px4y8 } CellNode (4 @ 9) (20)Px5y1 { Px4y1, Px6y2, Px4y2, Px5y2, Px6y1 } CellNode (5 @ 1) (20)Px5y10 { Px4y11, Px6y11, Px4y9, Px5y9, Px6y9, Px4y10, Px5y11, Px6y10 } CellNode (5 @ 10) (20)Px5y11 { Px4y11, Px5y12, Px6y11, Px5y10, Px4y12, Px6y12, Px4y10, Px6y10 } CellNode (5 @ 11) (20)Px5y12 { Px4y11, Px6y11, Px4y12, Px5y13, Px6y12, Px5y11, Px4y13, Px6y13 } CellNode (5 @ 12) (20)Px5y13 { Px5y12, Px4y14, Px6y14, Px4y12, Px6y12, Px4y13, Px5y14, Px6y13 } CellNode (5 @ 13) (20)Px5y14 { Px4y14, Px5y15, Px6y14, Px5y13, Px4y15, Px6y15, Px4y13, Px6y13 } CellNode (5 @ 14) (20)Px5y15 { Px6y16, Px4y14, Px6y14, Px4y15, Px5y16, Px6y15, Px5y14, Px4y16 } CellNode (5 @ 15) (20)Px5y16 { Px5y17, Px6y16, Px5y15, Px4y17, Px6y17, Px4y15, Px6y15, Px4y16 } CellNode (5 @ 16) (20)Px5y17 { Px5y16, Px6y16, Px4y17, Px6y17, Px4y18, Px4y16, Px5y18 } CellNode (5 @ 17) (20)Px5y18 { Px4y17, Px4y18, Px5y17, Px6y17 } CellNode (5 @ 18) (20)Px5y2 { Px5y3, Px4y1, Px6y2, Px5y1, Px6y3, Px4y2, Px6y1, Px4y3 } CellNode (5 @ 2) (20)Px5y21 { Px5y22, Px4y21, Px4y22 } CellNode (5 @ 21) (20)Px5y22 { Px4y21, Px5y21, Px4y22, Px4y23 } CellNode (5 @ 22) (20)Px5y27 { Px4y27, Px4y26 } CellNode (5 @ 27) (20)Px5y3 { Px6y2, Px4y4, Px5y4, Px4y2, Px6y3, Px5y2, Px6y4, Px4y3 } CellNode (5 @ 3) (20)Px5y4 { Px5y5, Px5y3, Px6y5, Px4y4, Px6y3, Px4y5, Px6y4, Px4y3 } CellNode (5 @ 4) (20)Px5y5 { Px4y6, Px6y5, Px5y6, Px4y4, Px5y4, Px6y6, Px4y5, Px6y4 } CellNode (5 @ 5) (20)Px5y6 { Px6y7, Px4y6, Px6y5, Px4y7, Px6y6, Px5y7, Px4y5, Px5y5 } CellNode (5 @ 6) (20)Px5y7 { Px6y7, Px5y8, Px4y6, Px5y6, Px6y8, Px4y7, Px6y6, Px4y8 } CellNode (5 @ 7) (20)Px5y8 { Px6y7, Px6y8, Px4y9, Px5y9, Px4y7, Px6y9, Px5y7, Px4y8 } CellNode (5 @ 8) (20)Px5y9 { Px5y8, Px6y8, Px4y9, Px5y10, Px6y9, Px4y10, Px6y10, Px4y8 } CellNode (5 @ 9) (20)Px6y1 { Px5y2, Px6y2, Px7y1, Px5y1, Px7y2 } CellNode (6 @ 1) (20)Px6y10 { Px6y11, Px7y10, Px5y10, Px5y9, Px6y9, Px7y11, Px5y11, Px7y9 } CellNode (6 @ 10) (20)Px6y11 { Px7y12, Px5y12, Px7y10, Px5y10, Px6y12, Px7y11, Px5y11, Px6y10 } CellNode (6 @ 11) (20)Px6y12 { Px7y12, Px5y12, Px6y11, Px7y13, Px5y13, Px7y11, Px5y11, Px6y13 } CellNode (6 @ 12) (20)Px6y13 { Px7y12, Px5y12, Px6y14, Px7y13, Px5y13, Px6y12, Px7y14, Px5y14 } CellNode (6 @ 13) (20)Px6y14 { Px7y15, Px5y15, Px7y13, Px5y13, Px6y15, Px7y14, Px5y14, Px6y13 } CellNode (6 @ 14) (20)Px6y15 { Px6y16, Px7y15, Px5y15, Px6y14, Px7y16, Px5y16, Px7y14, Px5y14 } CellNode (6 @ 15) (20)Px6y16 { Px5y16, Px7y16, Px5y17, Px7y15, Px6y17, Px6y15, Px5y15 } CellNode (6 @ 16) (20)Px6y17 { Px7y16, Px5y16, Px6y16, Px5y17, Px5y18 } CellNode (6 @ 17) (20)Px6y2 { Px5y3, Px7y2, Px5y1, Px6y3, Px7y3, Px5y2, Px6y1, Px7y1 } CellNode (6 @ 2) (20)Px6y3 { Px7y4, Px5y3, Px6y2, Px7y2, Px5y4, Px7y3, Px5y2, Px6y4 } CellNode (6 @ 3) (20)Px6y4 { Px7y4, Px5y3, Px6y5, Px7y5, Px6y3, Px5y4, Px7y3, Px5y5 } CellNode (6 @ 4) (20)Px6y5 { Px7y4, Px5y6, Px7y5, Px5y4, Px6y6, Px7y6, Px6y4, Px5y5 } CellNode (6 @ 5) (20)Px6y6 { Px6y7, Px7y7, Px6y5, Px5y6, Px7y5, Px5y7, Px7y6, Px5y5 } CellNode (6 @ 6) (20)Px6y7 { Px5y8, Px7y7, Px5y6, Px6y8, Px7y8, Px6y6, Px5y7, Px7y6 } CellNode (6 @ 7) (20)Px6y8 { Px6y7, Px5y8, Px7y7, Px5y9, Px6y9, Px7y8, Px5y7, Px7y9 } CellNode (6 @ 8) (20)Px6y9 { Px5y8, Px6y8, Px7y10, Px5y10, Px5y9, Px7y8, Px6y10, Px7y9 } CellNode (6 @ 9) (20)Px7y1 { Px6y2, Px8y1, Px8y2, Px7y2, Px6y1 } CellNode (7 @ 1) (20)Px7y10 { Px8y10, Px8y9, Px6y11, Px8y11, Px6y9, Px7y11, Px6y10, Px7y9 } CellNode (7 @ 10) (20)Px7y11 { Px7y12, Px6y11, Px7y10, Px8y11, Px6y12, Px8y12, Px6y10, Px8y10 } CellNode (7 @ 11) (20)Px7y12 { Px8y13, Px6y11, Px8y11, Px7y13, Px6y12, Px7y11, Px8y12, Px6y13 } CellNode (7 @ 12) (20)Px7y13 { Px7y12, Px8y13, Px6y14, Px8y14, Px6y12, Px8y12, Px7y14, Px6y13 } CellNode (7 @ 13) (20)Px7y14 { Px8y13, Px7y15, Px6y14, Px7y13, Px8y14, Px6y15, Px8y15, Px6y13 } CellNode (7 @ 14) (20)Px7y15 { Px6y16, Px7y14, Px6y14, Px7y16, Px8y14, Px6y15, Px8y15 } CellNode (7 @ 15) (20)Px7y16 { Px8y15, Px6y15, Px6y16, Px7y15, Px6y17 } CellNode (7 @ 16) (20)Px7y2 { Px8y1, Px6y2, Px8y2, Px6y3, Px7y3, Px6y1, Px8y3, Px7y1 } CellNode (7 @ 2) (20)Px7y27 { Px8y27, Px8y26 } CellNode (7 @ 27) (20)Px7y3 { Px7y4, Px6y2, Px8y4, Px7y2, Px8y2, Px6y3, Px8y3, Px6y4 } CellNode (7 @ 3) (20)Px7y4 { Px8y4, Px6y5, Px7y5, Px6y3, Px8y5, Px7y3, Px8y3, Px6y4 } CellNode (7 @ 4) (20)Px7y5 { Px7y4, Px8y4, Px6y5, Px8y5, Px6y6, Px7y6, Px6y4, Px8y6 } CellNode (7 @ 5) (20)Px7y6 { Px6y7, Px7y7, Px6y5, Px8y7, Px7y5, Px8y5, Px6y6, Px8y6 } CellNode (7 @ 6) (20)Px7y7 { Px6y7, Px6y8, Px8y7, Px7y8, Px6y6, Px8y8, Px7y6, Px8y6 } CellNode (7 @ 7) (20)Px7y8 { Px6y7, Px8y9, Px7y7, Px6y8, Px8y7, Px6y9, Px8y8, Px7y9 } CellNode (7 @ 8) (20)Px7y9 { Px8y9, Px6y8, Px7y10, Px6y9, Px7y8, Px8y8, Px6y10, Px8y10 } CellNode (7 @ 9) (20)Px8y1 { Px9y2, Px8y2, Px7y1, Px7y2, Px9y1 } CellNode (8 @ 1) (20)Px8y10 { Px8y9, Px7y10, Px9y9, Px8y11, Px9y10, Px7y11, Px9y11, Px7y9 } CellNode (8 @ 10) (20)Px8y11 { Px7y12, Px9y12, Px7y10, Px9y10, Px7y11, Px8y12, Px9y11, Px8y10 } CellNode (8 @ 11) (20)Px8y12 { Px7y12, Px8y13, Px9y12, Px8y11, Px7y13, Px9y13, Px7y11, Px9y11 } CellNode (8 @ 12) (20)Px8y13 { Px7y12, Px9y12, Px7y13, Px8y14, Px9y13, Px8y12, Px7y14, Px9y14 } CellNode (8 @ 13) (20)Px8y14 { Px8y13, Px7y15, Px9y15, Px7y13, Px9y13, Px7y14, Px8y15, Px9y14 } CellNode (8 @ 14) (20)Px8y15 { Px7y16, Px7y14, Px9y14, Px8y14, Px7y15, Px9y15 } CellNode (8 @ 15) (20)Px8y2 { Px8y1, Px9y1, Px7y2, Px9y2, Px7y3, Px8y3, Px7y1, Px9y3 } CellNode (8 @ 2) (20)Px8y26 { Px8y27, Px9y26, Px9y27, Px7y27 } CellNode (8 @ 26) (20)Px8y27 { Px8y26, Px9y26, Px9y27, Px7y27 } CellNode (8 @ 27) (20)Px8y3 { Px7y4, Px8y4, Px7y2, Px9y4, Px8y2, Px9y2, Px7y3, Px9y3 } CellNode (8 @ 3) (20)Px8y4 { Px7y4, Px9y4, Px7y5, Px8y5, Px7y3, Px9y5, Px8y3, Px9y3 } CellNode (8 @ 4) (20)Px8y5 { Px7y4, Px9y6, Px8y4, Px9y4, Px7y5, Px9y5, Px7y6, Px8y6 } CellNode (8 @ 5) (20)Px8y6 { Px9y6, Px7y7, Px8y7, Px7y5, Px9y7, Px8y5, Px9y5, Px7y6 } CellNode (8 @ 6) (20)Px8y7 { Px9y6, Px7y7, Px9y7, Px7y8, Px8y8, Px7y6, Px9y8, Px8y6 } CellNode (8 @ 7) (20)Px8y8 { Px8y9, Px7y7, Px9y9, Px8y7, Px9y7, Px7y8, Px9y8, Px7y9 } CellNode (8 @ 8) (20)Px8y9 { Px8y10, Px7y10, Px9y9, Px9y10, Px7y8, Px8y8, Px9y8, Px7y9 } CellNode (8 @ 9) (20)Px9y1 { Px10y1, Px8y1, Px10y2, Px8y2, Px9y2 } CellNode (9 @ 1) (20)Px9y10 { Px10y10, Px8y9, Px10y9, Px9y9, Px8y11, Px10y11, Px9y11, Px8y10 } CellNode (9 @ 10) (20)Px9y11 { Px10y10, Px9y12, Px8y11, Px9y10, Px10y11, Px10y12, Px8y12, Px8y10 } CellNode (9 @ 11) (20)Px9y12 { Px10y13, Px8y13, Px8y11, Px10y11, Px9y13, Px10y12, Px8y12, Px9y11 } CellNode (9 @ 12) (20)Px9y13 { Px10y13, Px9y12, Px8y13, Px8y14, Px10y14, Px10y12, Px8y12, Px9y14 } CellNode (9 @ 13) (20)Px9y14 { Px10y13, Px8y13, Px9y15, Px8y14, Px9y13, Px10y14, Px10y15, Px8y15 } CellNode (9 @ 14) (20)Px9y15 { Px8y15, Px10y14, Px10y15, Px9y14, Px8y14 } CellNode (9 @ 15) (20)Px9y2 { Px10y1, Px8y1, Px9y1, Px10y2, Px8y2, Px10y3, Px8y3, Px9y3 } CellNode (9 @ 2) (20)Px9y26 { Px9y27, Px8y27, Px8y26 } CellNode (9 @ 26) (20)Px9y27 { Px9y26, Px8y27, Px8y26 } CellNode (9 @ 27) (20)Px9y3 { Px10y4, Px8y4, Px10y2, Px8y2, Px9y4, Px9y2, Px10y3, Px8y3 } CellNode (9 @ 3) (20)Px9y4 { Px10y4, Px8y4, Px10y5, Px8y5, Px10y3, Px8y3, Px9y5, Px9y3 } CellNode (9 @ 4) (20)Px9y5 { Px9y6, Px8y4, Px10y4, Px9y4, Px10y5, Px8y5, Px10y6, Px8y6 } CellNode (9 @ 5) (20)Px9y6 { Px10y7, Px8y7, Px10y5, Px8y5, Px9y7, Px9y5, Px10y6, Px8y6 } CellNode (9 @ 6) (20)Px9y7 { Px9y8, Px9y6, Px10y7, Px8y7, Px10y8, Px8y8, Px10y6, Px8y6 } CellNode (9 @ 7) (20)Px9y8 { Px10y9, Px8y9, Px10y7, Px8y7, Px9y9, Px9y7, Px10y8, Px8y8 } CellNode (9 @ 8) (20)Px9y9 { Px10y10, Px8y9, Px10y9, Px9y10, Px10y8, Px8y8, Px9y8, Px8y10 } CellNode (9 @ 9) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="radeEtCrozon0">radeEtCrozon0messages none  defined. Px10y1 { Px9y1, Px9y2, Px11y2, Px10y2, Px11y1 } CellNode (10 @ 1) (20)Px10y2 { Px10y1, Px11y1, Px9y1, Px11y2, Px9y2, Px10y3, Px11y3, Px9y3 } CellNode (10 @ 2) (20)Px10y20 { Px9y21, Px11y20, Px11y21, Px10y21 } CellNode (10 @ 20) (20)Px10y21 { Px10y22, Px10y20, Px11y20, Px9y21, Px11y21, Px9y22 } CellNode (10 @ 21) (20)Px10y22 { Px9y23, Px10y23, Px10y21, Px9y21, Px11y21, Px9y22 } CellNode (10 @ 22) (20)Px10y23 { Px10y22, Px10y24, Px11y24, Px9y23, Px9y24, Px9y22 } CellNode (10 @ 23) (20)Px10y24 { Px11y24, Px9y25, Px9y23, Px10y23, Px10y25, Px11y25, Px9y24 } CellNode (10 @ 24) (20)Px10y25 { Px11y24, Px9y24, Px10y26, Px10y24, Px11y25, Px9y25, Px9y26, Px11y26 } CellNode (10 @ 25) (20)Px10y26 { Px11y27, Px9y27, Px11y25, Px9y25, Px10y27, Px10y25, Px9y26, Px11y26 } CellNode (10 @ 26) (20)Px10y27 { Px11y27, Px10y26, Px9y26, Px11y26, Px9y27 } CellNode (10 @ 27) (20)Px10y3 { Px10y4, Px11y4, Px10y2, Px9y4, Px11y2, Px9y2, Px11y3, Px9y3 } CellNode (10 @ 3) (20)Px10y4 { Px11y4, Px9y4, Px10y5, Px11y5, Px10y3, Px9y5, Px11y3, Px9y3 } CellNode (10 @ 4) (20)Px10y5 { Px11y6, Px9y6, Px10y4, Px11y4, Px9y4, Px11y5, Px9y5, Px10y6 } CellNode (10 @ 5) (20)Px10y6 { Px11y6, Px9y6, Px10y7, Px11y7, Px10y5, Px9y7, Px11y5, Px9y5 } CellNode (10 @ 6) (20)Px10y7 { Px11y6, Px9y6, Px11y7, Px9y7, Px10y8, Px11y8, Px10y6, Px9y8 } CellNode (10 @ 7) (20)Px10y8 { Px11y8, Px10y7, Px9y9, Px9y7, Px11y7, Px9y8, Px10y9 } CellNode (10 @ 8) (20)Px10y9 { Px9y10, Px10y8, Px9y9, Px9y8, Px11y8 } CellNode (10 @ 9) (20)Px11y1 { Px10y1, Px11y2, Px10y2, Px12y1, Px12y2 } CellNode (11 @ 1) (20)Px11y2 { Px12y3, Px11y1, Px12y1, Px10y2, Px12y2, Px10y3, Px11y3, Px10y1 } CellNode (11 @ 2) (20)Px11y20 { Px11y21, Px12y20, Px12y21, Px10y20, Px10y21 } CellNode (11 @ 20) (20)Px11y21 { Px10y22, Px10y20, Px11y20, Px12y20, Px10y21, Px12y21 } CellNode (11 @ 21) (20)Px11y24 { Px10y23, Px11y25, Px10y24, Px12y25, Px10y25 } CellNode (11 @ 24) (20)Px11y25 { Px12y26, Px11y24, Px11y26, Px10y25, Px12y25, Px10y26, Px10y24 } CellNode (11 @ 25) (20)Px11y26 { Px10y26, Px11y27, Px12y26, Px11y25, Px10y27, Px12y27, Px10y25, Px12y25 } CellNode (11 @ 26) (20)Px11y27 { Px12y26, Px10y26, Px12y27, Px10y27, Px11y26 } CellNode (11 @ 27) (20)Px11y3 { Px12y3, Px10y4, Px11y4, Px10y2, Px12y4, Px11y2, Px12y2, Px10y3 } CellNode (11 @ 3) (20)Px11y4 { Px12y3, Px10y4, Px12y4, Px10y5, Px11y5, Px10y3, Px12y5, Px11y3 } CellNode (11 @ 4) (20)Px11y5 { Px11y6, Px10y4, Px12y6, Px11y4, Px12y4, Px10y5, Px12y5, Px10y6 } CellNode (11 @ 5) (20)Px11y6 { Px12y6, Px10y7, Px11y7, Px10y5, Px12y7, Px11y5, Px12y5, Px10y6 } CellNode (11 @ 6) (20)Px11y7 { Px11y6, Px12y6, Px10y7, Px12y7, Px10y8, Px11y8, Px10y6, Px12y8 } CellNode (11 @ 7) (20)Px11y8 { Px10y7, Px12y7, Px10y8, Px11y7, Px12y8, Px10y9 } CellNode (11 @ 8) (20)Px12y1 { Px12y2, Px11y2, Px13y1, Px13y2, Px11y1 } CellNode (12 @ 1) (20)Px12y2 { Px12y3, Px11y1, Px13y3, Px12y1, Px13y1, Px11y2, Px13y2, Px11y3 } CellNode (12 @ 2) (20)Px12y20 { Px11y21, Px11y20, Px12y21 } CellNode (12 @ 20) (20)Px12y21 { Px11y21, Px11y20, Px12y20 } CellNode (12 @ 21) (20)Px12y25 { Px12y26, Px11y24, Px11y26, Px13y26, Px13y24, Px11y25, Px13y25 } CellNode (12 @ 25) (20)Px12y26 { Px13y26, Px11y27, Px13y27, Px11y25, Px13y25, Px12y27, Px11y26, Px12y25 } CellNode (12 @ 26) (20)Px12y27 { Px12y26, Px11y27, Px13y26, Px11y26, Px13y27 } CellNode (12 @ 27) (20)Px12y3 { Px13y3, Px11y4, Px12y4, Px11y2, Px13y4, Px12y2, Px13y2, Px11y3 } CellNode (12 @ 3) (20)Px12y4 { Px12y3, Px13y3, Px11y4, Px13y4, Px11y5, Px12y5, Px11y3, Px13y5 } CellNode (12 @ 4) (20)Px12y5 { Px11y6, Px12y6, Px11y4, Px13y6, Px12y4, Px13y4, Px11y5, Px13y5 } CellNode (12 @ 5) (20)Px12y6 { Px11y6, Px13y6, Px11y7, Px12y7, Px11y5, Px13y7, Px12y5, Px13y5 } CellNode (12 @ 6) (20)Px12y7 { Px11y6, Px13y8, Px12y6, Px13y6, Px11y7, Px13y7, Px11y8, Px12y8 } CellNode (12 @ 7) (20)Px12y8 { Px13y7, Px12y7, Px13y8, Px11y7, Px11y8 } CellNode (12 @ 8) (20)Px13y1 { Px14y1, Px14y2, Px13y2, Px12y1, Px12y2 } CellNode (13 @ 1) (20)Px13y2 { Px12y3, Px13y3, Px12y1, Px14y3, Px13y1, Px14y1, Px12y2, Px14y2 } CellNode (13 @ 2) (20)Px13y24 { Px13y25, Px14y24, Px14y25, Px12y25 } CellNode (13 @ 24) (20)Px13y25 { Px12y26, Px13y26, Px13y24, Px14y26, Px12y25, Px14y24, Px14y25 } CellNode (13 @ 25) (20)Px13y26 { Px14y25, Px12y26, Px13y27, Px14y26, Px13y25, Px12y27, Px14y27, Px12y25 } CellNode (13 @ 26) (20)Px13y27 { Px12y26, Px14y27, Px12y27, Px13y26, Px14y26 } CellNode (13 @ 27) (20)Px13y3 { Px12y3, Px14y3, Px12y4, Px13y4, Px12y2, Px14y4, Px13y2, Px14y2 } CellNode (13 @ 3) (20)Px13y4 { Px12y3, Px14y5, Px13y3, Px14y3, Px12y4, Px14y4, Px12y5, Px13y5 } CellNode (13 @ 4) (20)Px13y5 { Px14y5, Px12y6, Px13y6, Px12y4, Px14y6, Px13y4, Px14y4, Px12y5 } CellNode (13 @ 5) (20)Px13y6 { Px14y5, Px12y6, Px14y6, Px12y7, Px13y7, Px12y5, Px14y7, Px13y5 } CellNode (13 @ 6) (20)Px13y7 { Px13y8, Px12y6, Px14y8, Px13y6, Px14y6, Px12y7, Px14y7, Px12y8 } CellNode (13 @ 7) (20)Px13y8 { Px14y8, Px13y7, Px12y7, Px12y8, Px14y7 } CellNode (13 @ 8) (20)Px14y1 { Px15y2, Px13y1, Px14y2, Px13y2, Px15y1 } CellNode (14 @ 1) (20)Px14y2 { Px15y2, Px13y3, Px14y3, Px13y1, Px15y3, Px14y1, Px15y1, Px13y2 } CellNode (14 @ 2) (20)Px14y24 { Px14y25, Px15y25, Px15y23, Px13y24, Px15y24, Px13y25 } CellNode (14 @ 24) (20)Px14y25 { Px13y26, Px13y24, Px15y24, Px14y26, Px13y25, Px14y24, Px15y25, Px15y26 } CellNode (14 @ 25) (20)Px14y26 { Px13y26, Px14y25, Px15y27, Px13y27, Px13y25, Px15y25, Px14y27, Px15y26 } CellNode (14 @ 26) (20)Px14y27 { Px14y26, Px15y26, Px15y27, Px13y26, Px13y27 } CellNode (14 @ 27) (20)Px14y3 { Px15y2, Px13y3, Px15y3, Px13y4, Px14y4, Px13y2, Px15y4, Px14y2 } CellNode (14 @ 3) (20)Px14y4 { Px14y5, Px13y3, Px15y5, Px14y3, Px15y3, Px13y4, Px15y4, Px13y5 } CellNode (14 @ 4) (20)Px14y5 { Px15y5, Px13y6, Px14y6, Px13y4, Px15y6, Px14y4, Px15y4, Px13y5 } CellNode (14 @ 5) (20)Px14y6 { Px15y7, Px14y5, Px15y5, Px13y6, Px15y6, Px13y7, Px14y7, Px13y5 } CellNode (14 @ 6) (20)Px14y7 { Px13y8, Px13y6, Px15y6, Px13y7, Px15y7, Px14y8, Px14y6 } CellNode (14 @ 7) (20)Px14y8 { Px13y7, Px13y8, Px15y7, Px14y7 } CellNode (14 @ 8) (20)Px15y1 { Px15y2, Px14y1, Px16y2, Px14y2, Px16y1 } CellNode (15 @ 1) (20)Px15y17 { Px15y18, Px16y17, Px16y18 } CellNode (15 @ 17) (20)Px15y18 { Px15y17, Px16y18, Px16y17 } CellNode (15 @ 18) (20)Px15y2 { Px16y1, Px14y3, Px15y3, Px14y1, Px16y2, Px15y1, Px16y3, Px14y2 } CellNode (15 @ 2) (20)Px15y23 { Px15y24, Px16y24, Px14y24, Px16y23 } CellNode (15 @ 23) (20)Px15y24 { Px16y25, Px16y23, Px15y23, Px14y24, Px15y25, Px16y24, Px14y25 } CellNode (15 @ 24) (20)Px15y25 { Px14y25, Px16y25, Px15y24, Px14y26, Px16y26, Px14y24, Px16y24, Px15y26 } CellNode (15 @ 25) (20)Px15y26 { Px16y27, Px14y25, Px16y25, Px15y27, Px14y26, Px16y26, Px15y25, Px14y27 } CellNode (15 @ 26) (20)Px15y27 { Px16y27, Px15y26, Px14y27, Px16y26, Px14y26 } CellNode (15 @ 27) (20)Px15y3 { Px16y3, Px15y2, Px16y4, Px14y3, Px16y2, Px14y4, Px15y4, Px14y2 } CellNode (15 @ 3) (20)Px15y4 { Px14y5, Px16y4, Px14y3, Px16y5, Px15y3, Px15y5, Px14y4, Px16y3 } CellNode (15 @ 4) (20)Px15y5 { Px14y5, Px16y4, Px16y5, Px14y6, Px15y6, Px14y4, Px16y6, Px15y4 } CellNode (15 @ 5) (20)Px15y6 { Px15y7, Px14y5, Px16y7, Px15y5, Px16y5, Px14y6, Px16y6, Px14y7 } CellNode (15 @ 6) (20)Px15y7 { Px14y7, Px16y7, Px15y6, Px14y8, Px14y6, Px16y6 } CellNode (15 @ 7) (20)Px16y1 { Px15y2, Px16y2, Px17y1, Px15y1, Px17y2 } CellNode (16 @ 1) (20)Px16y17 { Px15y17, Px15y18, Px17y16, Px16y18, Px17y17 } CellNode (16 @ 17) (20)Px16y18 { Px15y17, Px15y18, Px16y17, Px17y17 } CellNode (16 @ 18) (20)Px16y2 { Px17y3, Px15y2, Px16y1, Px17y1, Px15y3, Px17y2, Px15y1, Px16y3 } CellNode (16 @ 2) (20)Px16y23 { Px17y23, Px16y24, Px17y24, Px15y23, Px15y24 } CellNode (16 @ 23) (20)Px16y24 { Px15y23, Px16y25, Px17y24, Px15y24, Px16y23, Px17y25, Px15y25, Px17y23 } CellNode (16 @ 24) (20)Px16y25 { Px17y26, Px17y24, Px15y24, Px16y26, Px17y25, Px15y25, Px16y24, Px15y26 } CellNode (16 @ 25) (20)Px16y26 { Px16y27, Px17y26, Px16y25, Px15y27, Px17y27, Px17y25, Px15y25, Px15y26 } CellNode (16 @ 26) (20)Px16y27 { Px17y26, Px15y26, Px17y27, Px15y27, Px16y26 } CellNode (16 @ 27) (20)Px16y3 { Px17y3, Px15y2, Px16y4, Px17y4, Px15y3, Px16y2, Px17y2, Px15y4 } CellNode (16 @ 3) (20)Px16y4 { Px17y3, Px15y5, Px16y5, Px15y3, Px17y4, Px17y5, Px15y4, Px16y3 } CellNode (16 @ 4) (20)Px16y5 { Px17y6, Px16y4, Px15y5, Px17y4, Px15y6, Px16y6, Px17y5, Px15y4 } CellNode (16 @ 5) (20)Px16y6 { Px15y7, Px16y7, Px15y5, Px17y6, Px16y5, Px17y7, Px15y6, Px17y5 } CellNode (16 @ 6) (20)Px16y7 { Px17y6, Px15y6, Px17y7, Px15y7, Px16y6 } CellNode (16 @ 7) (20)Px17y1 { Px16y2, Px18y1, Px18y2, Px17y2, Px16y1 } CellNode (17 @ 1) (20)Px17y15 { Px18y14, Px18y15, Px17y16, Px18y16 } CellNode (17 @ 15) (20)Px17y16 { Px18y17, Px17y15, Px18y15, Px18y16, Px16y17, Px17y17 } CellNode (17 @ 16) (20)Px17y17 { Px18y17, Px16y17, Px16y18, Px17y16, Px18y16 } CellNode (17 @ 17) (20)Px17y2 { Px17y3, Px16y1, Px18y3, Px17y1, Px18y1, Px16y2, Px18y2, Px16y3 } CellNode (17 @ 2) (20)Px17y23 { Px18y24, Px16y24, Px17y24, Px18y23, Px16y23 } CellNode (17 @ 23) (20)Px17y24 { Px18y24, Px16y25, Px18y25, Px16y23, Px18y23, Px17y25, Px16y24, Px17y23 } CellNode (17 @ 24) (20)Px17y25 { Px18y24, Px17y26, Px16y25, Px17y24, Px18y25, Px16y26, Px18y26, Px16y24 } CellNode (17 @ 25) (20)Px17y26 { Px16y27, Px18y27, Px16y25, Px18y25, Px17y27, Px16y26, Px17y25, Px18y26 } CellNode (17 @ 26) (20)Px17y27 { Px17y26, Px16y27, Px18y26, Px16y26, Px18y27 } CellNode (17 @ 27) (20)Px17y3 { Px18y3, Px16y4, Px17y4, Px16y2, Px18y4, Px17y2, Px18y2, Px16y3 } CellNode (17 @ 3) (20)Px17y4 { Px17y3, Px18y3, Px16y4, Px16y5, Px18y4, Px17y5, Px16y3, Px18y5 } CellNode (17 @ 4) (20)Px17y5 { Px17y6, Px16y4, Px18y6, Px16y5, Px17y4, Px18y4, Px16y6, Px18y5 } CellNode (17 @ 5) (20)Px17y6 { Px16y7, Px18y6, Px16y5, Px17y7, Px18y7, Px16y6, Px17y5, Px18y5 } CellNode (17 @ 6) (20)Px17y7 { Px18y7, Px16y7, Px17y6, Px18y6, Px16y6 } CellNode (17 @ 7) (20)Px18y1 { Px19y2, Px17y1, Px18y2, Px17y2, Px19y1 } CellNode (18 @ 1) (20)Px18y11 { Px19y11, Px19y12, Px19y10, Px18y12 } CellNode (18 @ 11) (20)Px18y12 { Px19y11, Px18y13, Px19y12, Px18y11, Px19y13 } CellNode (18 @ 12) (20)Px18y13 { Px19y12, Px18y14, Px19y13, Px18y12, Px19y14 } CellNode (18 @ 13) (20)Px18y14 { Px17y15, Px18y13, Px18y15, Px19y15, Px19y13, Px19y14 } CellNode (18 @ 14) (20)Px18y15 { Px17y15, Px19y15, Px17y16, Px18y16, Px18y14, Px19y16, Px19y14 } CellNode (18 @ 15) (20)Px18y16 { Px18y17, Px17y16, Px18y15, Px19y16, Px17y17, Px19y17, Px17y15, Px19y15 } CellNode (18 @ 16) (20)Px18y17 { Px18y16, Px19y16, Px17y16, Px19y17, Px17y17 } CellNode (18 @ 17) (20)Px18y2 { Px17y3, Px18y3, Px17y1, Px19y3, Px18y1, Px19y1, Px17y2, Px19y2 } CellNode (18 @ 2) (20)Px18y23 { Px19y23, Px17y23, Px19y24, Px17y24, Px18y24 } CellNode (18 @ 23) (20)Px18y24 { Px19y23, Px17y24, Px18y25, Px19y24, Px18y23, Px17y25, Px19y25, Px17y23 } CellNode (18 @ 24) (20)Px18y25 { Px18y24, Px17y26, Px19y26, Px17y24, Px19y24, Px17y25, Px18y26, Px19y25 } CellNode (18 @ 25) (20)Px18y26 { Px17y26, Px18y27, Px19y26, Px18y25, Px17y27, Px19y27, Px17y25, Px19y25 } CellNode (18 @ 26) (20)Px18y27 { Px17y26, Px19y27, Px17y27, Px18y26, Px19y26 } CellNode (18 @ 27) (20)Px18y3 { Px17y3, Px19y3, Px17y4, Px18y4, Px17y2, Px19y4, Px18y2, Px19y2 } CellNode (18 @ 3) (20)Px18y4 { Px17y3, Px19y5, Px18y3, Px19y3, Px17y4, Px19y4, Px17y5, Px18y5 } CellNode (18 @ 4) (20)Px18y5 { Px19y5, Px17y6, Px18y6, Px17y4, Px19y6, Px18y4, Px19y4, Px17y5 } CellNode (18 @ 5) (20)Px18y6 { Px19y5, Px17y6, Px19y6, Px17y7, Px18y7, Px17y5, Px19y7, Px18y5 } CellNode (18 @ 6) (20)Px18y7 { Px17y7, Px19y6, Px18y6, Px19y7, Px17y6 } CellNode (18 @ 7) (20)Px19y1 { Px20y2, Px19y2, Px18y1, Px18y2, Px20y1 } CellNode (19 @ 1) (20)Px19y10 { Px19y11, Px20y10, Px20y11, Px18y11 } CellNode (19 @ 10) (20)Px19y11 { Px19y10, Px20y12, Px20y10, Px18y11, Px18y12, Px20y11, Px19y12 } CellNode (19 @ 11) (20)Px19y12 { Px18y12, Px20y13, Px19y13, Px20y11, Px18y13, Px19y11, Px18y11, Px20y12 } CellNode (19 @ 12) (20)Px19y13 { Px18y12, Px20y13, Px18y13, Px20y14, Px19y14, Px19y12, Px18y14, Px20y12 } CellNode (19 @ 13) (20)Px19y14 { Px19y15, Px20y13, Px19y13, Px18y15, Px18y13, Px20y14, Px18y14, Px20y15 } CellNode (19 @ 14) (20)Px19y15 { Px18y15, Px19y16, Px20y16, Px20y14, Px18y16, Px19y14, Px18y14, Px20y15 } CellNode (19 @ 15) (20)Px19y16 { Px20y16, Px18y15, Px19y17, Px19y15, Px20y15, Px18y16, Px18y17 } CellNode (19 @ 16) (20)Px19y17 { Px18y17, Px19y16, Px20y16, Px18y16 } CellNode (19 @ 17) (20)Px19y2 { Px20y2, Px18y3, Px19y3, Px18y1, Px20y3, Px19y1, Px20y1, Px18y2 } CellNode (19 @ 2) (20)Px19y23 { Px18y24, Px19y24, Px20y23, Px18y23, Px20y24 } CellNode (19 @ 23) (20)Px19y24 { Px18y24, Px19y23, Px20y25, Px20y23, Px18y25, Px18y23, Px20y24, Px19y25 } CellNode (19 @ 24) (20)Px19y25 { Px18y24, Px20y25, Px19y26, Px18y25, Px19y24, Px20y26, Px20y24, Px18y26 } CellNode (19 @ 25) (20)Px19y26 { Px20y25, Px18y27, Px18y25, Px20y26, Px19y27, Px18y26, Px20y27, Px19y25 } CellNode (19 @ 26) (20)Px19y27 { Px18y27, Px20y26, Px18y26, Px20y27, Px19y26 } CellNode (19 @ 27) (20)Px19y3 { Px20y2, Px18y3, Px20y3, Px18y4, Px19y4, Px18y2, Px20y4, Px19y2 } CellNode (19 @ 3) (20)Px19y4 { Px19y5, Px18y3, Px20y5, Px19y3, Px20y3, Px18y4, Px20y4, Px18y5 } CellNode (19 @ 4) (20)Px19y5 { Px18y5, Px18y6, Px18y4, Px20y5, Px19y6, Px19y4, Px20y4 } CellNode (19 @ 5) (20)Px19y6 { Px19y7, Px19y5, Px18y6, Px20y5, Px18y7, Px18y5 } CellNode (19 @ 6) (20)Px19y7 { Px18y6, Px18y7, Px19y6 } CellNode (19 @ 7) (20)Px1y1 { Px2y1, Px1y2, Px2y2 } CellNode (1 @ 1) (20)Px1y10 { Px1y9, Px2y10, Px2y11, Px1y11, Px2y9 } CellNode (1 @ 10) (20)Px1y11 { Px2y10, Px2y11, Px1y12, Px2y12, Px1y10 } CellNode (1 @ 11) (20)Px1y12 { Px2y13, Px1y11, Px2y11, Px2y12, Px1y13 } CellNode (1 @ 12) (20)Px1y13 { Px2y13, Px1y14, Px1y12, Px2y12 } CellNode (1 @ 13) (20)Px1y14 { Px1y13, Px2y13 } CellNode (1 @ 14) (20)Px1y18 { Px2y17, Px2y18, Px2y19 } CellNode (1 @ 18) (20)Px1y2 { Px2y2, Px2y3, Px1y3, Px2y1, Px1y1 } CellNode (1 @ 2) (20)Px1y25 { Px2y25, Px1y26, Px2y26 } CellNode (1 @ 25) (20)Px1y26 { Px1y25, Px2y25, Px1y27, Px2y26, Px2y27 } CellNode (1 @ 26) (20)Px1y27 { Px2y27, Px1y26, Px2y26 } CellNode (1 @ 27) (20)Px1y3 { Px2y3, Px1y2, Px2y4, Px1y4, Px2y2 } CellNode (1 @ 3) (20)Px1y4 { Px1y5, Px2y3, Px2y4, Px1y3, Px2y5 } CellNode (1 @ 4) (20)Px1y5 { Px2y6, Px1y6, Px2y4, Px2y5, Px1y4 } CellNode (1 @ 5) (20)Px1y6 { Px1y5, Px2y6, Px2y7, Px1y7, Px2y5 } CellNode (1 @ 6) (20)Px1y7 { Px2y6, Px2y7, Px1y6, Px2y8, Px1y8 } CellNode (1 @ 7) (20)Px1y8 { Px1y9, Px2y7, Px2y8, Px1y7, Px2y9 } CellNode (1 @ 8) (20)Px1y9 { Px2y9, Px2y10, Px1y10, Px2y8, Px1y8 } CellNode (1 @ 9) (20)Px20y1 { Px20y2, Px19y2, Px21y1, Px21y2, Px19y1 } CellNode (20 @ 1) (20)Px20y10 { Px19y10, Px21y10, Px19y11, Px20y11, Px21y9, Px21y11 } CellNode (20 @ 10) (20)Px20y11 { Px20y10, Px21y11, Px19y10, Px19y11, Px21y12, Px21y10, Px19y12, Px20y12 } CellNode (20 @ 11) (20)Px20y12 { Px21y11, Px20y13, Px19y13, Px20y11, Px21y12, Px19y11, Px19y12, Px21y13 } CellNode (20 @ 12) (20)Px20y13 { Px19y13, Px21y14, Px21y12, Px20y14, Px19y14, Px19y12, Px21y13, Px20y12 } CellNode (20 @ 13) (20)Px20y14 { Px19y15, Px20y13, Px19y13, Px21y14, Px19y14, Px21y15, Px21y13, Px20y15 } CellNode (20 @ 14) (20)Px20y15 { Px21y16, Px21y14, Px20y16, Px19y16, Px20y14, Px19y14, Px21y15, Px19y15 } CellNode (20 @ 15) (20)Px20y16 { Px21y16, Px19y17, Px19y15, Px20y15, Px21y17, Px19y16, Px21y15 } CellNode (20 @ 16) (20)Px20y2 { Px21y2, Px19y3, Px20y3, Px21y3, Px19y1, Px20y1, Px21y1, Px19y2 } CellNode (20 @ 2) (20)Px20y23 { Px19y23, Px21y23, Px19y24, Px21y24, Px20y24 } CellNode (20 @ 23) (20)Px20y24 { Px19y23, Px20y25, Px21y24, Px20y23, Px19y24, Px21y25, Px21y23, Px19y25 } CellNode (20 @ 24) (20)Px20y25 { Px21y24, Px19y26, Px19y24, Px20y26, Px21y25, Px20y24, Px19y25, Px21y26 } CellNode (20 @ 25) (20)Px20y26 { Px19y25, Px20y25, Px19y26, Px21y27, Px21y25, Px19y27, Px20y27, Px21y26 } CellNode (20 @ 26) (20)Px20y27 { Px21y27, Px19y27, Px20y26, Px21y26, Px19y26 } CellNode (20 @ 27) (20)Px20y3 { Px19y2, Px20y2, Px21y2, Px19y3, Px21y3, Px19y4, Px20y4, Px21y4 } CellNode (20 @ 3) (20)Px20y4 { Px19y5, Px20y5, Px21y5, Px19y3, Px20y3, Px21y3, Px19y4, Px21y4 } CellNode (20 @ 4) (20)Px20y5 { Px20y4, Px19y5, Px21y6, Px21y4, Px19y6, Px19y4, Px21y5 } CellNode (20 @ 5) (20)Px21y1 { Px20y2, Px22y1, Px22y2, Px21y2, Px20y1 } CellNode (21 @ 1) (20)Px21y10 { Px22y11, Px20y10, Px22y9, Px22y10, Px20y11, Px21y9, Px21y11 } CellNode (21 @ 10) (20)Px21y11 { Px20y10, Px22y10, Px20y11, Px21y12, Px22y11, Px21y10, Px20y12, Px22y12 } CellNode (21 @ 11) (20)Px21y12 { Px21y11, Px20y13, Px22y13, Px20y11, Px22y11, Px20y12, Px21y13, Px22y12 } CellNode (21 @ 12) (20)Px21y13 { Px20y13, Px21y14, Px22y13, Px21y12, Px20y14, Px22y14, Px20y12, Px22y12 } CellNode (21 @ 13) (20)Px21y14 { Px22y15, Px20y13, Px22y13, Px20y14, Px21y15, Px22y14, Px21y13, Px20y15 } CellNode (21 @ 14) (20)Px21y15 { Px21y16, Px22y15, Px21y14, Px20y16, Px22y16, Px20y14, Px22y14, Px20y15 } CellNode (21 @ 15) (20)Px21y16 { Px21y17, Px22y16, Px20y15, Px22y17, Px22y15, Px21y15, Px20y16 } CellNode (21 @ 16) (20)Px21y17 { Px22y18, Px21y16, Px22y16, Px20y16, Px22y17 } CellNode (21 @ 17) (20)Px21y2 { Px20y2, Px22y2, Px20y3, Px21y3, Px20y1, Px22y3, Px21y1, Px22y1 } CellNode (21 @ 2) (20)Px21y23 { Px20y24, Px20y23, Px21y24 } CellNode (21 @ 23) (20)Px21y24 { Px21y23, Px20y25, Px21y25, Px20y23, Px20y24 } CellNode (21 @ 24) (20)Px21y25 { Px20y26, Px20y24, Px21y24, Px21y26, Px22y26, Px20y25 } CellNode (21 @ 25) (20)Px21y26 { Px21y25, Px21y27, Px22y27, Px20y26, Px22y26, Px20y27, Px20y25 } CellNode (21 @ 26) (20)Px21y27 { Px22y26, Px20y26, Px22y27, Px21y26, Px20y27 } CellNode (21 @ 27) (20)Px21y3 { Px20y2, Px22y4, Px21y2, Px22y2, Px20y3, Px22y3, Px20y4, Px21y4 } CellNode (21 @ 3) (20)Px21y4 { Px22y4, Px20y5, Px21y5, Px20y3, Px22y5, Px21y3, Px22y3, Px20y4 } CellNode (21 @ 4) (20)Px21y5 { Px22y6, Px22y4, Px21y6, Px22y5, Px21y4, Px20y5, Px20y4 } CellNode (21 @ 5) (20)Px21y6 { Px22y7, Px22y5, Px21y5, Px22y6, Px20y5 } CellNode (21 @ 6) (20)Px21y8 { Px22y8, Px22y9, Px21y9, Px22y7 } CellNode (21 @ 8) (20)Px21y9 { Px20y10, Px21y8, Px22y9, Px21y10, Px22y10, Px22y8 } CellNode (21 @ 9) (20)Px22y1 { Px23y2, Px22y2, Px21y1, Px21y2, Px23y1 } CellNode (22 @ 1) (20)Px22y10 { Px22y9, Px21y11, Px23y9, Px23y11, Px22y11, Px21y10, Px21y9, Px23y10 } CellNode (22 @ 10) (20)Px22y11 { Px21y11, Px22y10, Px23y11, Px23y12, Px21y12, Px21y10, Px23y10, Px22y12 } CellNode (22 @ 11) (20)Px22y12 { Px21y11, Px23y11, Px22y13, Px23y12, Px21y12, Px22y11, Px23y13, Px21y13 } CellNode (22 @ 12) (20)Px22y13 { Px23y14, Px21y14, Px23y12, Px21y12, Px22y14, Px23y13, Px21y13, Px22y12 } CellNode (22 @ 13) (20)Px22y14 { Px22y15, Px23y14, Px21y14, Px22y13, Px23y15, Px21y15, Px23y13, Px21y13 } CellNode (22 @ 14) (20)Px22y15 { Px21y16, Px23y14, Px21y14, Px22y16, Px23y15, Px21y15, Px22y14, Px23y16 } CellNode (22 @ 15) (20)Px22y16 { Px21y16, Px22y15, Px23y17, Px21y17, Px23y15, Px21y15, Px22y17, Px23y16 } CellNode (22 @ 16) (20)Px22y17 { Px22y18, Px21y16, Px22y16, Px23y16, Px23y17, Px21y17 } CellNode (22 @ 17) (20)Px22y18 { Px22y17, Px21y17, Px23y17 } CellNode (22 @ 18) (20)Px22y2 { Px23y1, Px21y2, Px23y2, Px21y3, Px22y3, Px21y1, Px23y3, Px22y1 } CellNode (22 @ 2) (20)Px22y26 { Px23y27, Px22y27, Px21y26, Px23y26, Px21y27, Px21y25 } CellNode (22 @ 26) (20)Px22y27 { Px21y27, Px22y26, Px23y26, Px21y26, Px23y27 } CellNode (22 @ 27) (20)Px22y3 { Px22y4, Px21y2, Px23y4, Px22y2, Px23y2, Px21y3, Px23y3, Px21y4 } CellNode (22 @ 3) (20)Px22y4 { Px23y4, Px21y5, Px22y5, Px21y3, Px23y5, Px22y3, Px23y3, Px21y4 } CellNode (22 @ 4) (20)Px22y5 { Px23y6, Px22y4, Px23y4, Px21y5, Px23y5, Px21y6, Px22y6, Px21y4 } CellNode (22 @ 5) (20)Px22y6 { Px23y7, Px23y5, Px21y6, Px22y5, Px23y6, Px22y7, Px21y5 } CellNode (22 @ 6) (20)Px22y7 { Px22y6, Px21y8, Px21y6, Px23y6, Px23y8, Px22y8, Px23y7 } CellNode (22 @ 7) (20)Px22y8 { Px21y8, Px22y9, Px22y7, Px23y8, Px21y9, Px23y9, Px23y7 } CellNode (22 @ 8) (20)Px22y9 { Px22y10, Px23y9, Px21y8, Px22y8, Px21y10, Px23y8, Px21y9, Px23y10 } CellNode (22 @ 9) (20)Px23y1 { Px22y1, Px23y2, Px22y2, Px24y1, Px24y2 } CellNode (23 @ 1) (20)Px23y10 { Px22y9, Px22y10, Px23y11, Px24y9, Px24y10, Px23y9, Px22y11, Px24y11 } CellNode (23 @ 10) (20)Px23y11 { Px24y12, Px22y10, Px24y10, Px23y12, Px22y11, Px24y11, Px23y10, Px22y12 } CellNode (23 @ 11) (20)Px23y12 { Px24y12, Px23y11, Px22y13, Px24y13, Px22y11, Px24y11, Px23y13, Px22y12 } CellNode (23 @ 12) (20)Px23y13 { Px24y12, Px23y14, Px22y13, Px23y12, Px24y13, Px22y14, Px24y14, Px22y12 } CellNode (23 @ 13) (20)Px23y14 { Px22y15, Px24y15, Px22y13, Px24y13, Px23y15, Px22y14, Px23y13, Px24y14 } CellNode (23 @ 14) (20)Px23y15 { Px22y15, Px23y14, Px24y15, Px22y16, Px24y16, Px22y14, Px24y14, Px23y16 } CellNode (23 @ 15) (20)Px23y16 { Px24y17, Px22y15, Px24y15, Px23y17, Px22y16, Px23y15, Px24y16, Px22y17 } CellNode (23 @ 16) (20)Px23y17 { Px22y18, Px22y16, Px23y16, Px24y16, Px22y17, Px24y17 } CellNode (23 @ 17) (20)Px23y2 { Px24y3, Px23y1, Px24y1, Px22y2, Px24y2, Px22y3, Px23y3, Px22y1 } CellNode (23 @ 2) (20)Px23y26 { Px24y26, Px24y27, Px22y26, Px22y27, Px23y27 } CellNode (23 @ 26) (20)Px23y27 { Px24y27, Px22y26, Px23y26, Px22y27, Px24y26 } CellNode (23 @ 27) (20)Px23y3 { Px24y3, Px22y4, Px23y4, Px22y2, Px24y4, Px23y2, Px24y2, Px22y3 } CellNode (23 @ 3) (20)Px23y4 { Px24y3, Px22y4, Px24y4, Px22y5, Px23y5, Px22y3, Px24y5, Px23y3 } CellNode (23 @ 4) (20)Px23y5 { Px23y6, Px22y4, Px24y6, Px23y4, Px24y4, Px22y5, Px24y5, Px22y6 } CellNode (23 @ 5) (20)Px23y6 { Px24y6, Px22y7, Px23y7, Px22y5, Px24y7, Px23y5, Px24y5, Px22y6 } CellNode (23 @ 6) (20)Px23y7 { Px23y6, Px24y6, Px22y7, Px24y7, Px22y8, Px23y8, Px22y6, Px24y8 } CellNode (23 @ 7) (20)Px23y8 { Px22y9, Px23y9, Px22y7, Px24y9, Px23y7, Px24y7, Px22y8, Px24y8 } CellNode (23 @ 8) (20)Px23y9 { Px22y9, Px22y10, Px24y9, Px24y10, Px22y8, Px23y8, Px23y10, Px24y8 } CellNode (23 @ 9) (20)Px24y1 { Px23y1, Px23y2, Px25y1, Px25y2, Px24y2 } CellNode (24 @ 1) (20)Px24y10 { Px25y11, Px23y11, Px24y9, Px23y9, Px25y9, Px24y11, Px25y10, Px23y10 } CellNode (24 @ 10) (20)Px24y11 { Px24y12, Px25y11, Px23y11, Px24y10, Px23y12, Px25y12, Px25y10, Px23y10 } CellNode (24 @ 11) (20)Px24y12 { Px25y11, Px23y11, Px23y12, Px24y13, Px25y12, Px24y11, Px23y13, Px25y13 } CellNode (24 @ 12) (20)Px24y13 { Px24y12, Px23y14, Px25y14, Px23y12, Px25y12, Px23y13, Px24y14, Px25y13 } CellNode (24 @ 13) (20)Px24y14 { Px23y14, Px24y15, Px25y14, Px24y13, Px23y15, Px25y15, Px23y13, Px25y13 } CellNode (24 @ 14) (20)Px24y15 { Px25y16, Px23y14, Px25y14, Px23y15, Px24y16, Px25y15, Px24y14, Px23y16 } CellNode (24 @ 15) (20)Px24y16 { Px24y17, Px25y16, Px24y15, Px23y17, Px25y17, Px23y15, Px25y15, Px23y16 } CellNode (24 @ 16) (20)Px24y17 { Px25y17, Px23y17, Px24y16, Px25y16, Px23y16 } CellNode (24 @ 17) (20)Px24y2 { Px24y3, Px23y1, Px25y3, Px24y1, Px25y1, Px23y2, Px25y2, Px23y3 } CellNode (24 @ 2) (20)Px24y26 { Px24y27, Px25y26, Px23y26, Px25y27, Px23y27 } CellNode (24 @ 26) (20)Px24y27 { Px24y26, Px25y26, Px23y26, Px25y27, Px23y27 } CellNode (24 @ 27) (20)Px24y3 { Px25y3, Px23y4, Px24y4, Px23y2, Px25y4, Px24y2, Px25y2, Px23y3 } CellNode (24 @ 3) (20)Px24y4 { Px24y3, Px25y3, Px23y4, Px25y4, Px23y5, Px24y5, Px23y3, Px25y5 } CellNode (24 @ 4) (20)Px24y5 { Px23y6, Px24y6, Px23y4, Px25y6, Px24y4, Px25y4, Px23y5, Px25y5 } CellNode (24 @ 5) (20)Px24y6 { Px23y6, Px25y6, Px23y7, Px24y7, Px23y5, Px25y7, Px24y5, Px25y5 } CellNode (24 @ 6) (20)Px24y7 { Px23y6, Px25y8, Px24y6, Px25y6, Px23y7, Px25y7, Px23y8, Px24y8 } CellNode (24 @ 7) (20)Px24y8 { Px25y8, Px23y9, Px24y9, Px23y7, Px25y9, Px24y7, Px25y7, Px23y8 } CellNode (24 @ 8) (20)Px24y9 { Px23y8, Px25y8, Px23y9, Px24y10, Px25y9, Px25y10, Px23y10, Px24y8 } CellNode (24 @ 9) (20)Px25y1 { Px26y1, Px26y2, Px24y1, Px25y2, Px24y2 } CellNode (25 @ 1) (20)Px25y10 { Px25y11, Px24y9, Px24y10, Px25y9, Px26y10, Px26y9, Px24y11, Px26y11 } CellNode (25 @ 10) (20)Px25y11 { Px24y12, Px26y12, Px24y10, Px26y10, Px25y12, Px24y11, Px25y10, Px26y11 } CellNode (25 @ 11) (20)Px25y12 { Px24y12, Px25y11, Px26y12, Px24y13, Px26y13, Px24y11, Px26y11, Px25y13 } CellNode (25 @ 12) (20)Px25y13 { Px26y14, Px24y12, Px26y12, Px25y14, Px24y13, Px25y12, Px26y13, Px24y14 } CellNode (25 @ 13) (20)Px25y14 { Px26y14, Px24y15, Px26y15, Px24y13, Px26y13, Px25y15, Px24y14, Px25y13 } CellNode (25 @ 14) (20)Px25y15 { Px26y14, Px25y16, Px24y15, Px25y14, Px26y15, Px24y16, Px26y16, Px24y14 } CellNode (25 @ 15) (20)Px25y16 { Px24y17, Px26y17, Px24y15, Px26y15, Px25y17, Px24y16, Px25y15, Px26y16 } CellNode (25 @ 16) (20)Px25y17 { Px26y16, Px24y16, Px26y17, Px25y16, Px24y17 } CellNode (25 @ 17) (20)Px25y2 { Px24y3, Px25y3, Px24y1, Px26y3, Px25y1, Px26y1, Px24y2, Px26y2 } CellNode (25 @ 2) (20)Px25y26 { Px24y27, Px25y27, Px26y27, Px26y25, Px24y26, Px26y26 } CellNode (25 @ 26) (20)Px25y27 { Px26y27, Px24y27, Px25y26, Px26y26, Px24y26 } CellNode (25 @ 27) (20)Px25y3 { Px24y3, Px26y3, Px24y4, Px25y4, Px24y2, Px26y4, Px25y2, Px26y2 } CellNode (25 @ 3) (20)Px25y4 { Px24y3, Px26y5, Px25y3, Px26y3, Px24y4, Px26y4, Px24y5, Px25y5 } CellNode (25 @ 4) (20)Px25y5 { Px26y5, Px24y6, Px25y6, Px24y4, Px26y6, Px25y4, Px26y4, Px24y5 } CellNode (25 @ 5) (20)Px25y6 { Px26y5, Px24y6, Px26y6, Px24y7, Px25y7, Px24y5, Px26y7, Px25y5 } CellNode (25 @ 6) (20)Px25y7 { Px25y8, Px24y6, Px26y8, Px25y6, Px26y6, Px24y7, Px26y7, Px24y8 } CellNode (25 @ 7) (20)Px25y8 { Px26y8, Px24y9, Px25y9, Px24y7, Px26y9, Px25y7, Px26y7, Px24y8 } CellNode (25 @ 8) (20)Px25y9 { Px25y8, Px26y8, Px24y9, Px24y10, Px26y10, Px26y9, Px25y10, Px24y8 } CellNode (25 @ 9) (20)Px26y1 { Px27y2, Px25y1, Px26y2, Px25y2, Px27y1 } CellNode (26 @ 1) (20)Px26y10 { Px27y9, Px25y11, Px27y11, Px25y9, Px26y9, Px25y10, Px26y11, Px27y10 } CellNode (26 @ 10) (20)Px26y11 { Px25y11, Px26y12, Px27y11, Px26y10, Px25y12, Px27y12, Px25y10, Px27y10 } CellNode (26 @ 11) (20)Px26y12 { Px27y13, Px25y11, Px27y11, Px25y12, Px26y13, Px27y12, Px26y11, Px25y13 } CellNode (26 @ 12) (20)Px26y13 { Px26y14, Px27y13, Px26y12, Px25y14, Px27y14, Px25y12, Px27y12, Px25y13 } CellNode (26 @ 13) (20)Px26y14 { Px27y13, Px25y14, Px26y15, Px27y14, Px26y13, Px25y15, Px27y15, Px25y13 } CellNode (26 @ 14) (20)Px26y15 { Px26y14, Px25y16, Px27y16, Px25y14, Px27y14, Px25y15, Px26y16, Px27y15 } CellNode (26 @ 15) (20)Px26y16 { Px25y15, Px26y17, Px27y15, Px26y15, Px25y16, Px27y16, Px25y17 } CellNode (26 @ 16) (20)Px26y17 { Px25y17, Px26y16, Px27y16, Px25y16 } CellNode (26 @ 17) (20)Px26y2 { Px27y2, Px25y3, Px26y3, Px25y1, Px27y3, Px26y1, Px27y1, Px25y2 } CellNode (26 @ 2) (20)Px26y25 { Px27y25, Px27y26, Px25y26, Px26y26 } CellNode (26 @ 25) (20)Px26y26 { Px27y26, Px25y27, Px26y27, Px26y25, Px27y27, Px27y25, Px25y26 } CellNode (26 @ 26) (20)Px26y27 { Px27y26, Px25y26, Px27y27, Px26y26, Px25y27 } CellNode (26 @ 27) (20)Px26y3 { Px27y2, Px25y3, Px27y3, Px25y4, Px26y4, Px25y2, Px27y4, Px26y2 } CellNode (26 @ 3) (20)Px26y4 { Px26y5, Px25y3, Px27y5, Px26y3, Px27y3, Px25y4, Px27y4, Px25y5 } CellNode (26 @ 4) (20)Px26y5 { Px27y5, Px25y6, Px26y6, Px25y4, Px27y6, Px26y4, Px27y4, Px25y5 } CellNode (26 @ 5) (20)Px26y6 { Px27y7, Px26y5, Px27y5, Px25y6, Px27y6, Px25y7, Px26y7, Px25y5 } CellNode (26 @ 6) (20)Px26y7 { Px27y7, Px25y8, Px26y8, Px25y6, Px27y8, Px26y6, Px27y6, Px25y7 } CellNode (26 @ 7) (20)Px26y8 { Px27y7, Px25y8, Px27y8, Px25y9, Px26y9, Px25y7, Px27y9, Px26y7 } CellNode (26 @ 8) (20)Px26y9 { Px25y8, Px26y8, Px27y8, Px25y9, Px26y10, Px25y10, Px27y9, Px27y10 } CellNode (26 @ 9) (20)Px27y1 { Px26y1, Px27y2, Px26y2, Px28y1, Px28y2 } CellNode (27 @ 1) (20)Px27y10 { Px28y11, Px27y11, Px26y10, Px28y10, Px26y9, Px27y9, Px26y11, Px28y9 } CellNode (27 @ 10) (20)Px27y11 { Px28y11, Px26y12, Px28y12, Px26y10, Px28y10, Px27y12, Px26y11, Px27y10 } CellNode (27 @ 11) (20)Px27y12 { Px28y11, Px27y13, Px26y12, Px27y11, Px28y12, Px26y13, Px28y13, Px26y11 } CellNode (27 @ 12) (20)Px27y13 { Px26y14, Px28y14, Px26y12, Px28y12, Px27y14, Px26y13, Px27y12, Px28y13 } CellNode (27 @ 13) (20)Px27y14 { Px28y14, Px27y15, Px27y13, Px26y15, Px26y13, Px28y13, Px26y14 } CellNode (27 @ 14) (20)Px27y15 { Px26y14, Px28y14, Px26y15, Px26y16, Px27y16, Px27y14 } CellNode (27 @ 15) (20)Px27y16 { Px26y15, Px26y16, Px27y15, Px26y17 } CellNode (27 @ 16) (20)Px27y2 { Px28y2, Px26y3, Px27y3, Px26y1, Px28y3, Px27y1, Px28y1, Px26y2 } CellNode (27 @ 2) (20)Px27y25 { Px28y26, Px28y24, Px27y26, Px26y25, Px28y25, Px26y26 } CellNode (27 @ 25) (20)Px27y26 { Px27y25, Px26y27, Px28y27, Px26y25, Px28y25, Px26y26, Px27y27, Px28y26 } CellNode (27 @ 26) (20)Px27y27 { Px26y27, Px27y26, Px28y26, Px26y26, Px28y27 } CellNode (27 @ 27) (20)Px27y3 { Px28y4, Px27y2, Px28y2, Px26y3, Px28y3, Px26y4, Px27y4, Px26y2 } CellNode (27 @ 3) (20)Px27y4 { Px28y4, Px26y5, Px27y5, Px26y3, Px28y5, Px27y3, Px28y3, Px26y4 } CellNode (27 @ 4) (20)Px27y5 { Px28y4, Px26y5, Px28y5, Px26y6, Px27y6, Px26y4, Px28y6, Px27y4 } CellNode (27 @ 5) (20)Px27y6 { Px27y7, Px26y5, Px28y7, Px27y5, Px28y5, Px26y6, Px28y6, Px26y7 } CellNode (27 @ 6) (20)Px27y7 { Px28y7, Px26y8, Px27y8, Px26y6, Px28y8, Px27y6, Px28y6, Px26y7 } CellNode (27 @ 7) (20)Px27y8 { Px27y7, Px28y7, Px26y8, Px28y8, Px26y9, Px27y9, Px26y7, Px28y9 } CellNode (27 @ 8) (20)Px27y9 { Px27y10, Px26y8, Px27y8, Px26y10, Px28y8, Px28y10, Px26y9, Px28y9 } CellNode (27 @ 9) (20)Px28y1 { Px27y2, Px29y1, Px29y2, Px28y2, Px27y1 } CellNode (28 @ 1) (20)Px28y10 { Px28y11, Px29y9, Px29y10, Px27y10, Px27y11, Px29y11, Px27y9, Px28y9 } CellNode (28 @ 10) (20)Px28y11 { Px29y10, Px27y11, Px28y12, Px29y11, Px28y10, Px27y12, Px29y12, Px27y10 } CellNode (28 @ 11) (20)Px28y12 { Px28y11, Px27y13, Px29y13, Px27y11, Px29y11, Px27y12, Px28y13, Px29y12 } CellNode (28 @ 12) (20)Px28y13 { Px27y13, Px28y14, Px29y13, Px28y12, Px27y14, Px29y14, Px27y12, Px29y12 } CellNode (28 @ 13) (20)Px28y14 { Px29y14, Px27y15, Px27y13, Px29y13, Px28y13, Px27y14 } CellNode (28 @ 14) (20)Px28y2 { Px29y1, Px27y2, Px29y2, Px27y3, Px28y3, Px27y1, Px29y3, Px28y1 } CellNode (28 @ 2) (20)Px28y24 { Px27y25, Px28y25, Px29y24, Px29y25 } CellNode (28 @ 24) (20)Px28y25 { Px28y26, Px28y24, Px29y24, Px29y26, Px27y26, Px29y25, Px27y25 } CellNode (28 @ 25) (20)Px28y26 { Px27y25, Px28y27, Px29y26, Px27y26, Px28y25, Px29y27, Px27y27, Px29y25 } CellNode (28 @ 26) (20)Px28y27 { Px29y27, Px27y26, Px28y26, Px27y27, Px29y26 } CellNode (28 @ 27) (20)Px28y3 { Px28y4, Px27y2, Px29y4, Px28y2, Px29y2, Px27y3, Px29y3, Px27y4 } CellNode (28 @ 3) (20)Px28y4 { Px29y4, Px27y5, Px28y5, Px27y3, Px29y5, Px28y3, Px29y3, Px27y4 } CellNode (28 @ 4) (20)Px28y5 { Px28y4, Px29y4, Px27y5, Px29y5, Px27y6, Px28y6, Px27y4, Px29y6 } CellNode (28 @ 5) (20)Px28y6 { Px27y7, Px28y7, Px27y5, Px29y7, Px28y5, Px29y5, Px27y6, Px29y6 } CellNode (28 @ 6) (20)Px28y7 { Px27y7, Px29y7, Px27y8, Px28y8, Px27y6, Px29y8, Px28y6, Px29y6 } CellNode (28 @ 7) (20)Px28y8 { Px27y7, Px29y9, Px28y7, Px29y7, Px27y8, Px29y8, Px27y9, Px28y9 } CellNode (28 @ 8) (20)Px28y9 { Px29y9, Px29y10, Px27y8, Px28y8, Px28y10, Px29y8, Px27y9, Px27y10 } CellNode (28 @ 9) (20)Px29y1 { Px30y1, Px30y2, Px28y1, Px29y2, Px28y2 } CellNode (29 @ 1) (20)Px29y10 { Px28y11, Px29y9, Px30y9, Px30y10, Px29y11, Px28y10, Px30y11, Px28y9 } CellNode (29 @ 10) (20)Px29y11 { Px28y11, Px30y12, Px29y10, Px30y10, Px28y12, Px28y10, Px30y11, Px29y12 } CellNode (29 @ 11) (20)Px29y12 { Px28y11, Px30y12, Px29y13, Px28y12, Px29y11, Px30y13, Px30y11, Px28y13 } CellNode (29 @ 12) (20)Px29y13 { Px30y12, Px28y14, Px28y12, Px30y13, Px29y14, Px28y13, Px30y14, Px29y12 } CellNode (29 @ 13) (20)Px29y14 { Px30y13, Px28y13, Px30y14, Px28y14, Px29y13 } CellNode (29 @ 14) (20)Px29y2 { Px29y1, Px30y1, Px28y2, Px30y2, Px28y3, Px29y3, Px30y3, Px28y1 } CellNode (29 @ 2) (20)Px29y24 { Px28y24, Px30y25, Px28y25, Px29y25, Px30y24 } CellNode (29 @ 24) (20)Px29y25 { Px28y24, Px30y25, Px29y26, Px28y25, Px30y26, Px29y24, Px30y24, Px28y26 } CellNode (29 @ 25) (20)Px29y26 { Px30y27, Px30y25, Px28y27, Px28y25, Px30y26, Px29y27, Px28y26, Px29y25 } CellNode (29 @ 26) (20)Px29y27 { Px28y27, Px30y26, Px28y26, Px30y27, Px29y26 } CellNode (29 @ 27) (20)Px29y3 { Px28y4, Px29y4, Px28y2, Px30y4, Px29y2, Px30y2, Px28y3, Px30y3 } CellNode (29 @ 3) (20)Px29y4 { Px28y4, Px30y4, Px28y5, Px29y5, Px28y3, Px30y5, Px29y3, Px30y3 } CellNode (29 @ 4) (20)Px29y5 { Px28y4, Px30y6, Px29y4, Px30y4, Px28y5, Px30y5, Px28y6, Px29y6 } CellNode (29 @ 5) (20)Px29y6 { Px30y6, Px28y7, Px29y7, Px28y5, Px30y7, Px29y5, Px30y5, Px28y6 } CellNode (29 @ 6) (20)Px29y7 { Px30y6, Px28y7, Px30y7, Px28y8, Px29y8, Px28y6, Px30y8, Px29y6 } CellNode (29 @ 7) (20)Px29y8 { Px29y9, Px28y7, Px30y9, Px29y7, Px30y7, Px28y8, Px30y8, Px28y9 } CellNode (29 @ 8) (20)Px29y9 { Px29y10, Px30y9, Px30y10, Px28y8, Px28y10, Px29y8, Px30y8, Px28y9 } CellNode (29 @ 9) (20)Px2y1 { Px2y2, Px1y2, Px3y1, Px3y2, Px1y1 } CellNode (2 @ 1) (20)Px2y10 { Px1y10, Px3y9, Px3y10, Px1y11, Px3y11, Px1y9, Px2y11, Px2y9 } CellNode (2 @ 10) (20)Px2y11 { Px1y10, Px3y10, Px2y12, Px1y11, Px2y10, Px3y11, Px1y12, Px3y12 } CellNode (2 @ 11) (20)Px2y12 { Px1y13, Px3y13, Px1y11, Px3y11, Px2y13, Px1y12, Px2y11, Px3y12 } CellNode (2 @ 12) (20)Px2y13 { Px1y13, Px3y13, Px1y14, Px2y12, Px1y12, Px3y12 } CellNode (2 @ 13) (20)Px2y17 { Px3y18, Px1y18, Px3y16, Px2y18, Px3y17 } CellNode (2 @ 17) (20)Px2y18 { Px3y19, Px3y17, Px1y18, Px3y18, Px2y19, Px2y17 } CellNode (2 @ 18) (20)Px2y19 { Px3y19, Px3y20, Px2y20, Px1y18, Px2y18, Px3y18 } CellNode (2 @ 19) (20)Px2y2 { Px3y1, Px1y2, Px3y2, Px1y3, Px2y3, Px1y1, Px3y3, Px2y1 } CellNode (2 @ 2) (20)Px2y20 { Px3y20, Px3y19, Px3y21, Px2y19 } CellNode (2 @ 20) (20)Px2y25 { Px3y24, Px1y26, Px2y26, Px3y25, Px1y25, Px3y26 } CellNode (2 @ 25) (20)Px2y26 { Px3y25, Px1y25, Px2y27, Px3y26, Px1y26, Px2y25, Px3y27, Px1y27 } CellNode (2 @ 26) (20)Px2y27 { Px3y27, Px1y26, Px2y26, Px1y27, Px3y26 } CellNode (2 @ 27) (20)Px2y3 { Px2y4, Px1y2, Px3y4, Px2y2, Px3y2, Px1y3, Px3y3, Px1y4 } CellNode (2 @ 3) (20)Px2y4 { Px3y4, Px1y5, Px2y5, Px1y3, Px3y5, Px2y3, Px3y3, Px1y4 } CellNode (2 @ 4) (20)Px2y5 { Px2y4, Px3y4, Px1y5, Px3y5, Px1y6, Px2y6, Px1y4, Px3y6 } CellNode (2 @ 5) (20)Px2y6 { Px1y7, Px2y7, Px1y5, Px3y7, Px2y5, Px3y5, Px1y6, Px3y6 } CellNode (2 @ 6) (20)Px2y7 { Px1y7, Px3y7, Px1y8, Px2y8, Px1y6, Px3y8, Px2y6, Px3y6 } CellNode (2 @ 7) (20)Px2y8 { Px1y7, Px3y9, Px2y7, Px3y7, Px1y8, Px3y8, Px1y9, Px2y9 } CellNode (2 @ 8) (20)Px2y9 { Px1y10, Px3y9, Px3y10, Px1y8, Px2y10, Px2y8, Px3y8, Px1y9 } CellNode (2 @ 9) (20)Px30y1 { Px31y2, Px29y1, Px30y2, Px29y2, Px31y1 } CellNode (30 @ 1) (20)Px30y10 { Px29y9, Px29y10, Px30y9, Px31y9, Px31y11, Px29y11, Px30y11, Px31y10 } CellNode (30 @ 10) (20)Px30y11 { Px30y12, Px29y10, Px31y11, Px30y10, Px29y11, Px31y12, Px31y10, Px29y12 } CellNode (30 @ 11) (20)Px30y12 { Px31y11, Px29y13, Px30y13, Px31y12, Px29y11, Px30y11, Px29y12, Px31y13 } CellNode (30 @ 12) (20)Px30y13 { Px31y13, Px30y12, Px29y13, Px31y14, Px31y12, Px29y14, Px30y14, Px29y12 } CellNode (30 @ 13) (20)Px30y14 { Px31y15, Px30y13, Px29y14, Px31y13, Px31y14, Px29y13 } CellNode (30 @ 14) (20)Px30y19 { Px31y19, Px31y18, Px30y20 } CellNode (30 @ 19) (20)Px30y2 { Px31y3, Px30y1, Px29y1, Px31y1, Px29y2, Px31y2, Px29y3, Px30y3 } CellNode (30 @ 2) (20)Px30y20 { Px30y19, Px31y19 } CellNode (30 @ 20) (20)Px30y24 { Px31y24, Px30y25, Px29y24, Px31y25, Px31y23, Px29y25 } CellNode (30 @ 24) (20)Px30y25 { Px31y26, Px29y26, Px31y24, Px29y24, Px30y26, Px30y24, Px31y25, Px29y25 } CellNode (30 @ 25) (20)Px30y26 { Px30y27, Px30y25, Px31y26, Px29y26, Px31y27, Px29y27, Px31y25, Px29y25 } CellNode (30 @ 26) (20)Px30y27 { Px31y26, Px29y27, Px31y27, Px30y26, Px29y26 } CellNode (30 @ 27) (20)Px30y3 { Px31y3, Px29y4, Px30y4, Px29y2, Px31y4, Px30y2, Px31y2, Px29y3 } CellNode (30 @ 3) (20)Px30y4 { Px31y3, Px29y4, Px31y4, Px29y5, Px30y5, Px31y5, Px30y3, Px29y3 } CellNode (30 @ 4) (20)Px30y5 { Px30y6, Px29y4, Px31y6, Px30y4, Px31y4, Px29y5, Px31y5, Px29y6 } CellNode (30 @ 5) (20)Px30y6 { Px31y6, Px29y7, Px30y7, Px29y5, Px31y7, Px30y5, Px31y5, Px29y6 } CellNode (30 @ 6) (20)Px30y7 { Px30y6, Px31y8, Px31y6, Px29y7, Px31y7, Px29y8, Px30y8, Px29y6 } CellNode (30 @ 7) (20)Px30y8 { Px29y9, Px30y9, Px29y7, Px31y9, Px30y7, Px31y7, Px29y8, Px31y8 } CellNode (30 @ 8) (20)Px30y9 { Px29y9, Px29y10, Px30y10, Px31y9, Px29y8, Px30y8, Px31y10, Px31y8 } CellNode (30 @ 9) (20)Px31y1 { Px30y1, Px30y2, Px31y2 } CellNode (31 @ 1) (20)Px31y10 { Px31y9, Px30y10, Px30y9, Px30y11, Px31y11 } CellNode (31 @ 10) (20)Px31y11 { Px31y12, Px30y10, Px30y11, Px31y10, Px30y12 } CellNode (31 @ 11) (20)Px31y12 { Px31y11, Px30y13, Px31y13, Px30y11, Px30y12 } CellNode (31 @ 12) (20)Px31y13 { Px30y13, Px31y12, Px30y14, Px31y14, Px30y12 } CellNode (31 @ 13) (20)Px31y14 { Px31y15, Px30y13, Px31y13, Px30y14 } CellNode (31 @ 14) (20)Px31y15 { Px30y14, Px31y14 } CellNode (31 @ 15) (20)Px31y18 { Px30y19, Px31y19 } CellNode (31 @ 18) (20)Px31y19 { Px31y18, Px30y19, Px30y20 } CellNode (31 @ 19) (20)Px31y2 { Px30y1, Px30y2, Px31y3, Px30y3, Px31y1 } CellNode (31 @ 2) (20)Px31y23 { Px31y24, Px30y24 } CellNode (31 @ 23) (20)Px31y24 { Px30y25, Px31y23, Px31y25, Px30y24 } CellNode (31 @ 24) (20)Px31y25 { Px31y26, Px30y25, Px31y24, Px30y26, Px30y24 } CellNode (31 @ 25) (20)Px31y26 { Px30y25, Px31y27, Px30y26, Px31y25, Px30y27 } CellNode (31 @ 26) (20)Px31y27 { Px31y26, Px30y27, Px30y26 } CellNode (31 @ 27) (20)Px31y3 { Px31y2, Px30y2, Px30y3, Px31y4, Px30y4 } CellNode (31 @ 3) (20)Px31y4 { Px31y5, Px30y5, Px31y3, Px30y3, Px30y4 } CellNode (31 @ 4) (20)Px31y5 { Px30y5, Px31y6, Px30y6, Px31y4, Px30y4 } CellNode (31 @ 5) (20)Px31y6 { Px30y5, Px31y7, Px30y6, Px30y7, Px31y5 } CellNode (31 @ 6) (20)Px31y7 { Px30y8, Px31y6, Px30y6, Px31y8, Px30y7 } CellNode (31 @ 7) (20)Px31y8 { Px31y9, Px30y8, Px30y9, Px31y7, Px30y7 } CellNode (31 @ 8) (20)Px31y9 { Px30y8, Px30y10, Px30y9, Px31y10, Px31y8 } CellNode (31 @ 9) (20)Px3y1 { Px4y1, Px4y2, Px2y1, Px3y2, Px2y2 } CellNode (3 @ 1) (20)Px3y10 { Px4y11, Px3y9, Px4y9, Px2y10, Px3y11, Px4y10, Px2y11, Px2y9 } CellNode (3 @ 10) (20)Px3y11 { Px4y11, Px3y10, Px2y12, Px4y12, Px2y10, Px4y10, Px2y11, Px3y12 } CellNode (3 @ 11) (20)Px3y12 { Px2y13, Px2y11, Px3y13, Px3y11, Px4y11, Px2y12, Px4y12 } CellNode (3 @ 12) (20)Px3y13 { Px2y13, Px3y12, Px4y12, Px2y12 } CellNode (3 @ 13) (20)Px3y16 { Px4y17, Px2y17, Px4y15, Px3y17, Px4y16 } CellNode (3 @ 16) (20)Px3y17 { Px3y16, Px4y17, Px2y18, Px4y18, Px4y16, Px3y18, Px2y17 } CellNode (3 @ 17) (20)Px3y18 { Px4y19, Px2y17, Px4y17, Px2y18, Px3y19, Px4y18, Px3y17, Px2y19 } CellNode (3 @ 18) (20)Px3y19 { Px4y19, Px3y20, Px3y18, Px2y18, Px2y20, Px4y18, Px4y20, Px2y19 } CellNode (3 @ 19) (20)Px3y2 { Px3y1, Px4y1, Px2y2, Px4y2, Px2y3, Px3y3, Px2y1, Px4y3 } CellNode (3 @ 2) (20)Px3y20 { Px4y19, Px3y19, Px2y20, Px4y20, Px3y21, Px2y19, Px4y21 } CellNode (3 @ 20) (20)Px3y21 { Px3y22, Px3y20, Px2y20, Px4y22, Px4y20, Px4y21 } CellNode (3 @ 21) (20)Px3y22 { Px3y23, Px4y21, Px4y22, Px3y21, Px4y23 } CellNode (3 @ 22) (20)Px3y23 { Px3y24, Px4y22, Px4y23, Px3y22, Px4y24 } CellNode (3 @ 23) (20)Px3y24 { Px4y24, Px3y25, Px2y25, Px3y23, Px4y25, Px4y23 } CellNode (3 @ 24) (20)Px3y25 { Px3y24, Px2y26, Px4y26, Px4y24, Px2y25, Px4y25, Px3y26 } CellNode (3 @ 25) (20)Px3y26 { Px3y25, Px4y26, Px2y27, Px4y27, Px2y25, Px4y25, Px3y27, Px2y26 } CellNode (3 @ 26) (20)Px3y27 { Px3y26, Px4y26, Px2y26, Px4y27, Px2y27 } CellNode (3 @ 27) (20)Px3y3 { Px2y4, Px3y4, Px2y2, Px4y4, Px3y2, Px4y2, Px2y3, Px4y3 } CellNode (3 @ 3) (20)Px3y4 { Px2y4, Px4y4, Px2y5, Px3y5, Px2y3, Px4y5, Px3y3, Px4y3 } CellNode (3 @ 4) (20)Px3y5 { Px2y4, Px4y6, Px3y4, Px4y4, Px2y5, Px4y5, Px2y6, Px3y6 } CellNode (3 @ 5) (20)Px3y6 { Px4y6, Px2y7, Px3y7, Px2y5, Px4y7, Px3y5, Px4y5, Px2y6 } CellNode (3 @ 6) (20)Px3y7 { Px4y6, Px2y7, Px4y7, Px2y8, Px3y8, Px2y6, Px4y8, Px3y6 } CellNode (3 @ 7) (20)Px3y8 { Px3y9, Px2y7, Px4y9, Px3y7, Px4y7, Px2y8, Px4y8, Px2y9 } CellNode (3 @ 8) (20)Px3y9 { Px3y10, Px4y9, Px2y10, Px2y8, Px4y10, Px3y8, Px4y8, Px2y9 } CellNode (3 @ 9) (20)Px4y1 { Px5y2, Px4y2, Px3y1, Px3y2, Px5y1 } CellNode (4 @ 1) (20)Px4y10 { Px4y11, Px3y9, Px3y10, Px4y9, Px5y10, Px5y9, Px3y11, Px5y11 } CellNode (4 @ 10) (20)Px4y11 { Px5y12, Px3y10, Px5y10, Px4y12, Px3y11, Px4y10, Px5y11, Px3y12 } CellNode (4 @ 11) (20)Px4y12 { Px5y12, Px3y13, Px3y11, Px4y11, Px5y11, Px3y12 } CellNode (4 @ 12) (20)Px4y15 { Px5y15, Px5y16, Px3y16, Px4y16 } CellNode (4 @ 15) (20)Px4y16 { Px5y16, Px4y17, Px4y15, Px3y17, Px5y17, Px5y15, Px3y16 } CellNode (4 @ 16) (20)Px4y17 { Px5y17, Px3y18, Px5y18, Px3y16, Px5y16, Px4y18, Px3y17, Px4y16 } CellNode (4 @ 17) (20)Px4y18 { Px5y17, Px4y19, Px3y18, Px4y17, Px5y18, Px3y19, Px5y19, Px3y17 } CellNode (4 @ 18) (20)Px4y19 { Px3y20, Px5y20, Px3y18, Px5y18, Px3y19, Px4y18, Px5y19, Px4y20 } CellNode (4 @ 19) (20)Px4y2 { Px3y1, Px5y3, Px4y1, Px5y1, Px3y2, Px5y2, Px3y3, Px4y3 } CellNode (4 @ 2) (20)Px4y20 { Px4y19, Px3y20, Px5y20, Px4y21, Px3y21, Px5y21, Px3y19, Px5y19 } CellNode (4 @ 20) (20)Px4y21 { Px5y22, Px3y20, Px5y20, Px3y21, Px4y22, Px5y21, Px4y20, Px3y22 } CellNode (4 @ 21) (20)Px4y22 { Px5y22, Px4y21, Px3y23, Px5y23, Px3y21, Px5y21, Px3y22, Px4y23 } CellNode (4 @ 22) (20)Px4y23 { Px5y22, Px3y23, Px4y24, Px5y23, Px4y22, Px3y24, Px5y24, Px3y22 } CellNode (4 @ 23) (20)Px4y24 { Px3y25, Px5y25, Px3y23, Px5y23, Px3y24, Px4y25, Px5y24, Px4y23 } CellNode (4 @ 24) (20)Px4y25 { Px3y25, Px4y26, Px5y25, Px4y24, Px3y26, Px5y26, Px3y24, Px5y24 } CellNode (4 @ 25) (20)Px4y26 { Px3y25, Px5y25, Px3y26, Px4y27, Px5y26, Px4y25, Px3y27, Px5y27 } CellNode (4 @ 26) (20)Px4y27 { Px5y27, Px3y27, Px4y26, Px5y26, Px3y26 } CellNode (4 @ 27) (20)Px4y3 { Px5y3, Px3y4, Px4y4, Px3y2, Px5y4, Px4y2, Px5y2, Px3y3 } CellNode (4 @ 3) (20)Px4y4 { Px5y3, Px3y4, Px5y4, Px3y5, Px4y5, Px3y3, Px5y5, Px4y3 } CellNode (4 @ 4) (20)Px4y5 { Px4y6, Px3y4, Px5y6, Px4y4, Px5y4, Px3y5, Px5y5, Px3y6 } CellNode (4 @ 5) (20)Px4y6 { Px5y6, Px3y7, Px4y7, Px3y5, Px5y7, Px4y5, Px5y5, Px3y6 } CellNode (4 @ 6) (20)Px4y7 { Px5y8, Px4y6, Px5y6, Px3y7, Px5y7, Px3y8, Px4y8, Px3y6 } CellNode (4 @ 7) (20)Px4y8 { Px5y8, Px3y9, Px4y9, Px3y7, Px5y9, Px4y7, Px5y7, Px3y8 } CellNode (4 @ 8) (20)Px4y9 { Px5y8, Px3y9, Px3y10, Px5y10, Px5y9, Px4y10, Px3y8, Px4y8 } CellNode (4 @ 9) (20)Px5y1 { Px4y1, Px6y2, Px4y2, Px5y2, Px6y1 } CellNode (5 @ 1) (20)Px5y10 { Px4y11, Px6y11, Px4y9, Px5y9, Px6y9, Px4y10, Px5y11, Px6y10 } CellNode (5 @ 10) (20)Px5y11 { Px4y11, Px5y12, Px6y11, Px5y10, Px4y12, Px6y12, Px4y10, Px6y10 } CellNode (5 @ 11) (20)Px5y12 { Px6y11, Px4y11, Px6y12, Px4y12, Px5y11 } CellNode (5 @ 12) (20)Px5y15 { Px5y16, Px6y16, Px6y14, Px4y15, Px6y15, Px4y16 } CellNode (5 @ 15) (20)Px5y16 { Px5y17, Px6y16, Px5y15, Px4y17, Px6y17, Px4y15, Px6y15, Px4y16 } CellNode (5 @ 16) (20)Px5y17 { Px6y16, Px4y17, Px5y18, Px6y17, Px5y16, Px4y18, Px6y18, Px4y16 } CellNode (5 @ 17) (20)Px5y18 { Px5y17, Px4y19, Px6y19, Px4y17, Px6y17, Px4y18, Px5y19, Px6y18 } CellNode (5 @ 18) (20)Px5y19 { Px4y19, Px5y20, Px6y19, Px5y18, Px4y18, Px4y20, Px6y18, Px6y20 } CellNode (5 @ 19) (20)Px5y2 { Px5y3, Px4y1, Px6y2, Px5y1, Px6y3, Px4y2, Px6y1, Px4y3 } CellNode (5 @ 2) (20)Px5y20 { Px4y21, Px4y19, Px5y19, Px6y19, Px4y20, Px6y20, Px5y21 } CellNode (5 @ 20) (20)Px5y21 { Px5y22, Px5y20, Px4y20, Px4y22, Px6y20, Px4y21 } CellNode (5 @ 21) (20)Px5y22 { Px4y21, Px6y23, Px4y23, Px4y22, Px5y23, Px5y21 } CellNode (5 @ 22) (20)Px5y23 { Px6y23, Px4y24, Px5y22, Px5y24, Px6y24, Px4y22, Px4y23 } CellNode (5 @ 23) (20)Px5y24 { Px6y23, Px5y25, Px4y24, Px5y23, Px6y24, Px4y25, Px6y25, Px4y23 } CellNode (5 @ 24) (20)Px5y25 { Px4y26, Px6y26, Px4y24, Px6y24, Px5y26, Px4y25, Px5y24, Px6y25 } CellNode (5 @ 25) (20)Px5y26 { Px4y26, Px5y25, Px6y26, Px4y27, Px6y27, Px4y25, Px6y25, Px5y27 } CellNode (5 @ 26) (20)Px5y27 { Px6y26, Px4y26, Px6y27, Px5y26, Px4y27 } CellNode (5 @ 27) (20)Px5y3 { Px6y2, Px4y4, Px5y4, Px4y2, Px6y3, Px5y2, Px6y4, Px4y3 } CellNode (5 @ 3) (20)Px5y4 { Px5y5, Px5y3, Px6y5, Px4y4, Px6y3, Px4y5, Px6y4, Px4y3 } CellNode (5 @ 4) (20)Px5y5 { Px4y6, Px6y5, Px5y6, Px4y4, Px5y4, Px6y6, Px4y5, Px6y4 } CellNode (5 @ 5) (20)Px5y6 { Px6y7, Px4y6, Px6y5, Px4y7, Px6y6, Px5y7, Px4y5, Px5y5 } CellNode (5 @ 6) (20)Px5y7 { Px6y7, Px5y8, Px4y6, Px5y6, Px6y8, Px4y7, Px6y6, Px4y8 } CellNode (5 @ 7) (20)Px5y8 { Px6y7, Px6y8, Px4y9, Px5y9, Px4y7, Px6y9, Px5y7, Px4y8 } CellNode (5 @ 8) (20)Px5y9 { Px5y8, Px6y8, Px4y9, Px5y10, Px6y9, Px4y10, Px6y10, Px4y8 } CellNode (5 @ 9) (20)Px6y1 { Px5y2, Px6y2, Px7y1, Px5y1, Px7y2 } CellNode (6 @ 1) (20)Px6y10 { Px6y11, Px7y10, Px5y10, Px5y9, Px6y9, Px7y11, Px5y11, Px7y9 } CellNode (6 @ 10) (20)Px6y11 { Px7y12, Px5y12, Px7y10, Px5y10, Px6y12, Px7y11, Px5y11, Px6y10 } CellNode (6 @ 11) (20)Px6y12 { Px5y12, Px6y11, Px7y11, Px7y12, Px5y11 } CellNode (6 @ 12) (20)Px6y14 { Px5y15, Px7y14, Px6y15, Px7y15 } CellNode (6 @ 14) (20)Px6y15 { Px5y16, Px7y14, Px6y16, Px6y14, Px7y16, Px7y15, Px5y15 } CellNode (6 @ 15) (20)Px6y16 { Px5y16, Px7y16, Px5y17, Px7y15, Px6y17, Px6y15, Px5y15 } CellNode (6 @ 16) (20)Px6y17 { Px5y16, Px6y18, Px6y16, Px7y16, Px5y17, Px5y18 } CellNode (6 @ 17) (20)Px6y18 { Px5y19, Px5y17, Px6y19, Px6y17, Px7y19, Px5y18 } CellNode (6 @ 18) (20)Px6y19 { Px6y18, Px5y19, Px5y20, Px7y19, Px6y20, Px5y18 } CellNode (6 @ 19) (20)Px6y2 { Px5y3, Px7y2, Px5y1, Px6y3, Px7y3, Px5y2, Px6y1, Px7y1 } CellNode (6 @ 2) (20)Px6y20 { Px7y21, Px5y19, Px6y19, Px5y20, Px7y19, Px5y21 } CellNode (6 @ 20) (20)Px6y23 { Px7y23, Px5y24, Px5y22, Px7y24, Px6y24, Px5y23 } CellNode (6 @ 23) (20)Px6y24 { Px6y23, Px5y25, Px7y25, Px5y23, Px7y23, Px5y24, Px6y25, Px7y24 } CellNode (6 @ 24) (20)Px6y25 { Px5y25, Px6y26, Px7y25, Px6y24, Px5y26, Px7y26, Px5y24, Px7y24 } CellNode (6 @ 25) (20)Px6y26 { Px7y27, Px5y25, Px7y25, Px5y26, Px6y27, Px7y26, Px6y25, Px5y27 } CellNode (6 @ 26) (20)Px6y27 { Px5y27, Px6y26, Px7y26, Px5y26, Px7y27 } CellNode (6 @ 27) (20)Px6y3 { Px7y4, Px5y3, Px6y2, Px7y2, Px5y4, Px7y3, Px5y2, Px6y4 } CellNode (6 @ 3) (20)Px6y4 { Px7y4, Px5y3, Px6y5, Px7y5, Px6y3, Px5y4, Px7y3, Px5y5 } CellNode (6 @ 4) (20)Px6y5 { Px7y4, Px5y6, Px7y5, Px5y4, Px6y6, Px7y6, Px6y4, Px5y5 } CellNode (6 @ 5) (20)Px6y6 { Px6y7, Px7y7, Px6y5, Px5y6, Px7y5, Px5y7, Px7y6, Px5y5 } CellNode (6 @ 6) (20)Px6y7 { Px5y8, Px7y7, Px5y6, Px6y8, Px7y8, Px6y6, Px5y7, Px7y6 } CellNode (6 @ 7) (20)Px6y8 { Px6y7, Px5y8, Px7y7, Px5y9, Px6y9, Px7y8, Px5y7, Px7y9 } CellNode (6 @ 8) (20)Px6y9 { Px5y8, Px6y8, Px7y10, Px5y10, Px5y9, Px7y8, Px6y10, Px7y9 } CellNode (6 @ 9) (20)Px7y1 { Px6y2, Px8y1, Px8y2, Px7y2, Px6y1 } CellNode (7 @ 1) (20)Px7y10 { Px8y10, Px8y9, Px6y11, Px8y11, Px6y9, Px7y11, Px6y10, Px7y9 } CellNode (7 @ 10) (20)Px7y11 { Px8y11, Px7y12, Px7y10, Px6y12, Px6y10, Px8y10, Px6y11 } CellNode (7 @ 11) (20)Px7y12 { Px8y11, Px6y11, Px6y12, Px7y11 } CellNode (7 @ 12) (20)Px7y14 { Px7y15, Px6y14, Px6y15 } CellNode (7 @ 14) (20)Px7y15 { Px6y14, Px7y14, Px6y15, Px6y16, Px7y16 } CellNode (7 @ 15) (20)Px7y16 { Px6y15, Px6y16, Px7y15, Px6y17 } CellNode (7 @ 16) (20)Px7y19 { Px8y20, Px6y18, Px6y19, Px6y20 } CellNode (7 @ 19) (20)Px7y2 { Px8y1, Px6y2, Px8y2, Px6y3, Px7y3, Px6y1, Px8y3, Px7y1 } CellNode (7 @ 2) (20)Px7y21 { Px8y20, Px8y21, Px6y20, Px8y22 } CellNode (7 @ 21) (20)Px7y23 { Px6y23, Px8y23, Px7y24, Px8y22, Px8y24, Px6y24 } CellNode (7 @ 23) (20)Px7y24 { Px8y23, Px6y23, Px7y25, Px8y24, Px6y24, Px7y23, Px8y25, Px6y25 } CellNode (7 @ 24) (20)Px7y25 { Px8y26, Px6y26, Px8y24, Px6y24, Px7y26, Px8y25, Px6y25, Px7y24 } CellNode (7 @ 25) (20)Px7y26 { Px7y27, Px8y26, Px6y26, Px7y25, Px8y27, Px6y27, Px8y25, Px6y25 } CellNode (7 @ 26) (20)Px7y27 { Px8y27, Px6y26, Px7y26, Px6y27, Px8y26 } CellNode (7 @ 27) (20)Px7y3 { Px7y4, Px6y2, Px8y4, Px7y2, Px8y2, Px6y3, Px8y3, Px6y4 } CellNode (7 @ 3) (20)Px7y4 { Px8y4, Px6y5, Px7y5, Px6y3, Px8y5, Px7y3, Px8y3, Px6y4 } CellNode (7 @ 4) (20)Px7y5 { Px7y4, Px8y4, Px6y5, Px8y5, Px6y6, Px7y6, Px6y4, Px8y6 } CellNode (7 @ 5) (20)Px7y6 { Px6y7, Px7y7, Px6y5, Px8y7, Px7y5, Px8y5, Px6y6, Px8y6 } CellNode (7 @ 6) (20)Px7y7 { Px6y7, Px6y8, Px8y7, Px7y8, Px6y6, Px8y8, Px7y6, Px8y6 } CellNode (7 @ 7) (20)Px7y8 { Px6y7, Px8y9, Px7y7, Px6y8, Px8y7, Px6y9, Px8y8, Px7y9 } CellNode (7 @ 8) (20)Px7y9 { Px8y9, Px6y8, Px7y10, Px6y9, Px7y8, Px8y8, Px6y10, Px8y10 } CellNode (7 @ 9) (20)Px8y1 { Px9y2, Px8y2, Px7y1, Px7y2, Px9y1 } CellNode (8 @ 1) (20)Px8y10 { Px8y11, Px7y9, Px7y10, Px9y9, Px9y10, Px7y11, Px8y9 } CellNode (8 @ 10) (20)Px8y11 { Px9y10, Px7y10, Px7y11, Px8y10, Px7y12 } CellNode (8 @ 11) (20)Px8y2 { Px8y1, Px9y1, Px7y2, Px9y2, Px7y3, Px8y3, Px7y1, Px9y3 } CellNode (8 @ 2) (20)Px8y20 { Px9y21, Px7y21, Px8y21, Px7y19 } CellNode (8 @ 20) (20)Px8y21 { Px9y21, Px7y21, Px9y22, Px8y20, Px8y22 } CellNode (8 @ 21) (20)Px8y22 { Px8y23, Px8y21, Px7y23, Px9y23, Px7y21, Px9y21, Px9y22 } CellNode (8 @ 22) (20)Px8y23 { Px7y23, Px9y23, Px7y24, Px8y22, Px8y24, Px9y24, Px9y22 } CellNode (8 @ 23) (20)Px8y24 { Px8y23, Px9y24, Px7y25, Px9y25, Px7y23, Px9y23, Px8y25, Px7y24 } CellNode (8 @ 24) (20)Px8y25 { Px9y24, Px8y26, Px7y25, Px8y24, Px9y25, Px7y26, Px9y26, Px7y24 } CellNode (8 @ 25) (20)Px8y26 { Px7y27, Px9y27, Px7y25, Px9y25, Px8y27, Px7y26, Px8y25, Px9y26 } CellNode (8 @ 26) (20)Px8y27 { Px8y26, Px9y26, Px7y26, Px9y27, Px7y27 } CellNode (8 @ 27) (20)Px8y3 { Px7y4, Px8y4, Px7y2, Px9y4, Px8y2, Px9y2, Px7y3, Px9y3 } CellNode (8 @ 3) (20)Px8y4 { Px7y4, Px9y4, Px7y5, Px8y5, Px7y3, Px9y5, Px8y3, Px9y3 } CellNode (8 @ 4) (20)Px8y5 { Px7y4, Px9y6, Px8y4, Px9y4, Px7y5, Px9y5, Px7y6, Px8y6 } CellNode (8 @ 5) (20)Px8y6 { Px9y6, Px7y7, Px8y7, Px7y5, Px9y7, Px8y5, Px9y5, Px7y6 } CellNode (8 @ 6) (20)Px8y7 { Px9y6, Px7y7, Px9y7, Px7y8, Px8y8, Px7y6, Px9y8, Px8y6 } CellNode (8 @ 7) (20)Px8y8 { Px8y9, Px7y7, Px9y9, Px8y7, Px9y7, Px7y8, Px9y8, Px7y9 } CellNode (8 @ 8) (20)Px8y9 { Px8y10, Px7y10, Px9y9, Px9y10, Px7y8, Px8y8, Px9y8, Px7y9 } CellNode (8 @ 9) (20)Px9y1 { Px10y1, Px8y1, Px10y2, Px8y2, Px9y2 } CellNode (9 @ 1) (20)Px9y10 { Px8y11, Px9y9, Px10y9, Px8y9, Px8y10 } CellNode (9 @ 10) (20)Px9y2 { Px10y1, Px8y1, Px9y1, Px10y2, Px8y2, Px10y3, Px8y3, Px9y3 } CellNode (9 @ 2) (20)Px9y21 { Px10y22, Px10y20, Px8y21, Px10y21, Px8y22, Px8y20, Px9y22 } CellNode (9 @ 21) (20)Px9y22 { Px8y23, Px10y23, Px8y21, Px10y21, Px8y22, Px9y23, Px10y22, Px9y21 } CellNode (9 @ 22) (20)Px9y23 { Px8y23, Px10y23, Px9y24, Px9y22, Px8y24, Px10y24, Px8y22, Px10y22 } CellNode (9 @ 23) (20)Px9y24 { Px8y23, Px10y23, Px8y24, Px9y25, Px10y24, Px9y23, Px8y25, Px10y25 } CellNode (9 @ 24) (20)Px9y25 { Px9y24, Px8y26, Px10y26, Px8y24, Px10y24, Px8y25, Px10y25, Px9y26 } CellNode (9 @ 25) (20)Px9y26 { Px8y26, Px10y26, Px9y27, Px9y25, Px8y27, Px10y27, Px8y25, Px10y25 } CellNode (9 @ 26) (20)Px9y27 { Px10y26, Px8y27, Px10y27, Px9y26, Px8y26 } CellNode (9 @ 27) (20)Px9y3 { Px10y4, Px8y4, Px10y2, Px8y2, Px9y4, Px9y2, Px10y3, Px8y3 } CellNode (9 @ 3) (20)Px9y4 { Px10y4, Px8y4, Px10y5, Px8y5, Px10y3, Px8y3, Px9y5, Px9y3 } CellNode (9 @ 4) (20)Px9y5 { Px9y6, Px8y4, Px10y4, Px9y4, Px10y5, Px8y5, Px10y6, Px8y6 } CellNode (9 @ 5) (20)Px9y6 { Px10y7, Px8y7, Px10y5, Px8y5, Px9y7, Px9y5, Px10y6, Px8y6 } CellNode (9 @ 6) (20)Px9y7 { Px9y8, Px9y6, Px10y7, Px8y7, Px10y8, Px8y8, Px10y6, Px8y6 } CellNode (9 @ 7) (20)Px9y8 { Px10y9, Px8y9, Px10y7, Px8y7, Px9y9, Px9y7, Px10y8, Px8y8 } CellNode (9 @ 8) (20)Px9y9 { Px8y8, Px10y8, Px8y10, Px9y10, Px8y9, Px9y8, Px10y9 } CellNode (9 @ 9) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="bibusLine3Range80">bibusLine3Range80messages none  defined. P1 { P2, P3, P4, P6, P7 } NodeP2 { P1, P3, P4, P5, P6, P7 } NodeP3 { P1, P2, P4, P5, P6, P7 } NodeP4 { P1, P2, P3, P5, P6, P7, P8, P9, P10 } NodeP5 { P2, P3, P4, P6, P7, P8, P9, P10, P11 } NodeP6 { P1, P2, P3, P4, P5, P7, P8, P9, P10, P11, P12 } NodeP7 { P1, P2, P3, P4, P5, P6, P8, P9, P10, P11, P12, P13 } NodeP8 { P4, P5, P6, P7, P9, P10, P11, P12, P13 } NodeP9 { P4, P5, P6, P7, P8, P10, P11, P12, P13 } NodeP10 { P4, P5, P6, P7, P8, P9, P11, P12, P13 } NodeP11 { P5, P6, P7, P8, P9, P10, P12, P13 } NodeP12 { P6, P7, P8, P9, P10, P11, P13 } NodeP13 { P7, P8, P9, P10, P11, P12, P14 } NodeP14 { P13, P15 } NodeP15 { P14 } NodeP16 { P17 } NodeP17 { P16, P18, P19 } NodeP18 { P17, P19 } NodeP19 { P17, P18, P20 } NodeP20 { P19, P21, P22 } NodeP21 { P20, P22 } NodeP22 { P20, P21, P23 } NodeP23 { P22, P24, P25 } NodeP24 { P23, P25, P26 } NodeP25 { P23, P24, P26, P27 } NodeP26 { P24, P25, P27, P28 } NodeP27 { P25, P26, P28, P29, P30 } NodeP28 { P26, P27, P29, P30, P31 } NodeP29 { P27, P28, P30, P31, P32, P33 } NodeP30 { P27, P28, P29, P31, P32, P33, P34 } NodeP31 { P28, P29, P30, P32, P33, P34 } NodeP32 { P29, P30, P31, P33, P34, P35 } NodeP33 { P29, P30, P31, P32, P34, P35 } NodeP34 { P30, P31, P32, P33, P35, P36 } NodeP35 { P32, P33, P34, P36 } NodeP36 { P34, P35, P37, P38 } NodeP37 { P36, P38, P39 } NodeP38 { P36, P37, P39, P40 } NodeP39 { P37, P38, P40, P41 } NodeP40 { P38, P39, P41, P42 } NodeP41 { P39, P40, P42 } NodeP42 { P40, P41 } NodeP43 { P44 } NodeP44 { P43 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="TaghiFFT">TaghiFFTmessages complex null.X0 { Butterfly1Stage1 } SourceX4 { Butterfly1Stage1 } SourceX1 { Butterfly2Stage1 } SourceX5 { Butterfly2Stage1 } SourceX2 { Butterfly3Stage1 } SourceX6 { Butterfly3Stage1 } SourceX3 { Butterfly4Stage1 } SourceX7 { Butterfly4Stage1 } SourceButterfly1Stage1 {Butterfly1Stage2 Butterfly3Stage2 X0 X4 } ButterflyButterfly2Stage1 {Butterfly2Stage2 Butterfly4Stage2 X1 X5 } ButterflyButterfly3Stage1 {Butterfly1Stage2 Butterfly3Stage2 X2 X6 } ButterflyButterfly4Stage1 {Butterfly2Stage2 Butterfly4Stage2 X3 X7 } ButterflyButterfly1Stage2 {Butterfly1Stage3 Butterfly2Stage3 } ButterflyButterfly2Stage2 {Butterfly1Stage3 Butterfly2Stage3 } ButterflyButterfly3Stage2 {Butterfly3Stage3 Butterfly4Stage3 } ButterflyButterfly4Stage2 {Butterfly3Stage3 Butterfly4Stage3 } ButterflyButterfly1Stage3 { Drain0 Drain4 } ButterflyButterfly2Stage3 { Drain2 Drain6 } ButterflyButterfly3Stage3 { Drain1 Drain5 } ButterflyButterfly4Stage3 { Drain3 Drain7 } ButterflyDrain0 {Butterfly1Stage3} DrainDrain1 {Butterfly3Stage3} DrainDrain2 {Butterfly2Stage3} DrainDrain3 {Butterfly4Stage3} DrainDrain4 {Butterfly1Stage3} DrainDrain5 {Butterfly3Stage3} DrainDrain6 {Butterfly2Stage3} DrainDrain7 {Butterfly4Stage3} Drain</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="MoleneOuessant">MoleneOuessantmessages none  defined. P1 { P8, P15, P16 } Node (509536 @ 362537) (90)P2 { P7, P11, P12, P20 } Node (509540 @ 362397) (90)P3 { P5, P6, P9, P10, P14, P17, P19 } Node (509340 @ 362465) (90)P4 { P17 } Node (509312 @ 362594) (90)P5 { P3, P6, P9, P10, P14, P19 } Node (509394 @ 362456) (90)P6 { P3, P5, P9, P10, P14, P15, P17, P19 } Node (509398 @ 362522) (90)P7 { P2, P11, P12 } Node (509558 @ 362360) (90)P8 { P1 } Node (509544 @ 362576) (90)P9 { P3, P5, P6, P10, P14, P15, P19 } Node (509408 @ 362489) (90)P10 { P3, P5, P6, P9, P14, P19, P20 } Node (509429 @ 362455) (90)P11 { P2, P7, P12 } Node (509589 @ 362379) (90)P12 { P2, P7, P11 } Node (509581 @ 362393) (90)P13 { P18 } Node (509320 @ 362368) (90)P14 { P3, P5, P6, P9, P10, P18, P19 } Node (509397 @ 362449) (90)P15 { P1, P6, P9, P19 } Node (509448 @ 362545) (90)P16 { P1 } Node (509613 @ 362512) (90)P17 { P3, P4, P6, P19 } Node (509311 @ 362527) (90)P18 { P13, P14 } Node (509378 @ 362367) (90)P19 { P3, P5, P6, P9, P10, P14, P15, P17 } Node (509385 @ 362521) (90)P20 { P2, P10 } Node (509468 @ 362393) (90)P21 { P22, P23, P24, P25, P26, P27, P28, P29, P30 } Node (509816 @ 362733) (90)P22 { P21, P23, P24, P25, P26, P27, P28, P29, P30 } Node (509847 @ 362746) (90)P23 { P21, P22, P24, P25, P26, P27, P28, P29, P30 } Node (509857 @ 362739) (90)P24 { P21, P22, P23, P25, P26, P28, P29 } Node (509901 @ 362725) (90)P25 { P21, P22, P23, P24, P26, P27, P28, P29, P30 } Node (509815 @ 362721) (90)P26 { P21, P22, P23, P24, P25, P27, P28, P29, P30 } Node (509861 @ 362748) (90)P27 { P21, P22, P23, P25, P26, P28, P29, P30 } Node (509836 @ 362806) (90)P28 { P21, P22, P23, P24, P25, P26, P27, P29, P30 } Node (509896 @ 362745) (90)P29 { P21, P22, P23, P24, P25, P26, P27, P28, P30 } Node (509850 @ 362721) (90)P30 { P21, P22, P23, P25, P26, P27, P28, P29 } Node (509818 @ 362762) (90)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="someGoodNetwork">someGoodNetworkmessages none  defined. P1 { P2, P5 } Node (4288 @ 2691) (50)P2 { P1, P3 } Node (4275 @ 2666) (50)P3 { P2, P4, P5, P6 } Node (4313 @ 2646) (50)P4 { P3, P5, P6 } Node (4334 @ 2665) (50)P5 { P1, P3, P4 } Node (4326 @ 2679) (50)P6 { P3, P4 } Node (4312 @ 2629) (50)P7 { P8, P11, P12 } Node (4265 @ 2492) (50)P8 { P7, P9, P10, P11 } Node (4236 @ 2496) (50)P9 { P8, P10 } Node (4206 @ 2521) (50)P10 { P8, P9, P11 } Node (4235 @ 2539) (50)P11 { P7, P8, P10, P12 } Node (4259 @ 2523) (50)P12 { P7, P11 } Node (4292 @ 2532) (50)P13 { P14, P15, P21 } Node (4051 @ 2526) (50)P14 { P13, P15, P16 } Node (4061 @ 2547) (50)P15 { P13, P14, P16 } Node (4066 @ 2563) (50)P16 { P14, P15 } Node (4077 @ 2581) (50)P17 { P20 } Node (4145 @ 2379) (50)P19 { P20, P21 } Node (4103 @ 2448) (50)P20 { P17, P19 } Node (4120 @ 2408) (50)P21 { P13, P19 } Node (4073 @ 2484) (50)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="brestv10">brestv10messages none  defined. Px10y1 { Px9y1, Px11y1, Px10y2 } CellNode (10 @ 1) (20)Px10y10 { Px9y10, Px11y10, Px10y9, Px10y11 } CellNode (10 @ 10) (20)Px10y11 { Px10y10, Px9y11, Px10y12, Px11y11 } CellNode (10 @ 11) (20)Px10y12 { Px10y13, Px10y11, Px9y12, Px11y12 } CellNode (10 @ 12) (20)Px10y13 { Px11y13, Px10y14, Px10y12, Px9y13 } CellNode (10 @ 13) (20)Px10y14 { Px9y14, Px11y14, Px10y15, Px10y13 } CellNode (10 @ 14) (20)Px10y15 { Px11y15, Px10y14, Px9y15 } CellNode (10 @ 15) (20)Px10y2 { Px10y1, Px9y2, Px11y2, Px10y3 } CellNode (10 @ 2) (20)Px10y3 { Px10y4, Px10y2, Px11y3, Px9y3 } CellNode (10 @ 3) (20)Px10y4 { Px10y3, Px10y5, Px9y4, Px11y4 } CellNode (10 @ 4) (20)Px10y5 { Px10y4, Px11y5, Px9y5, Px10y6 } CellNode (10 @ 5) (20)Px10y6 { Px11y6, Px9y6, Px10y5, Px10y7 } CellNode (10 @ 6) (20)Px10y7 { Px10y8, Px11y7, Px9y7, Px10y6 } CellNode (10 @ 7) (20)Px10y8 { Px10y7, Px9y8, Px10y9, Px11y8 } CellNode (10 @ 8) (20)Px10y9 { Px10y10, Px10y8, Px9y9, Px11y9 } CellNode (10 @ 9) (20)Px11y1 { Px10y1, Px11y2, Px12y1 } CellNode (11 @ 1) (20)Px11y10 { Px10y10, Px11y9, Px11y11, Px12y10 } CellNode (11 @ 10) (20)Px11y11 { Px12y11, Px11y10, Px10y11, Px11y12 } CellNode (11 @ 11) (20)Px11y12 { Px11y13, Px12y12, Px11y11, Px10y12 } CellNode (11 @ 12) (20)Px11y13 { Px10y13, Px11y14, Px12y13, Px11y12 } CellNode (11 @ 13) (20)Px11y14 { Px12y14, Px10y14, Px11y13, Px11y15 } CellNode (11 @ 14) (20)Px11y15 { Px10y15, Px11y14 } CellNode (11 @ 15) (20)Px11y2 { Px12y2, Px10y2, Px11y3, Px11y1 } CellNode (11 @ 2) (20)Px11y3 { Px11y2, Px12y3, Px11y4, Px10y3 } CellNode (11 @ 3) (20)Px11y4 { Px10y4, Px11y5, Px11y3, Px12y4 } CellNode (11 @ 4) (20)Px11y5 { Px11y6, Px10y5, Px12y5, Px11y4 } CellNode (11 @ 5) (20)Px11y6 { Px12y6, Px11y5, Px10y6, Px11y7 } CellNode (11 @ 6) (20)Px11y7 { Px10y7, Px12y7, Px11y6, Px11y8 } CellNode (11 @ 7) (20)Px11y8 { Px10y8, Px11y9, Px11y7, Px12y8 } CellNode (11 @ 8) (20)Px11y9 { Px12y9, Px11y10, Px10y9, Px11y8 } CellNode (11 @ 9) (20)Px12y1 { Px13y1, Px11y1, Px12y2 } CellNode (12 @ 1) (20)Px12y10 { Px12y11, Px11y10, Px13y10, Px12y9 } CellNode (12 @ 10) (20)Px12y11 { Px12y12, Px13y11, Px11y11, Px12y10 } CellNode (12 @ 11) (20)Px12y12 { Px12y13, Px12y11, Px13y12, Px11y12 } CellNode (12 @ 12) (20)Px12y13 { Px13y13, Px12y14, Px11y13, Px12y12 } CellNode (12 @ 13) (20)Px12y14 { Px11y14, Px13y14, Px12y13 } CellNode (12 @ 14) (20)Px12y2 { Px12y3, Px11y2, Px13y2, Px12y1 } CellNode (12 @ 2) (20)Px12y3 { Px13y3, Px12y4, Px11y3, Px12y2 } CellNode (12 @ 3) (20)Px12y4 { Px13y4, Px12y3, Px12y5, Px11y4 } CellNode (12 @ 4) (20)Px12y5 { Px12y6, Px11y5, Px13y5, Px12y4 } CellNode (12 @ 5) (20)Px12y6 { Px11y6, Px12y7, Px12y5, Px13y6 } CellNode (12 @ 6) (20)Px12y7 { Px12y6, Px13y7, Px11y7, Px12y8 } CellNode (12 @ 7) (20)Px12y8 { Px12y9, Px12y7, Px13y8, Px11y8 } CellNode (12 @ 8) (20)Px12y9 { Px11y9, Px12y8, Px13y9, Px12y10 } CellNode (12 @ 9) (20)Px13y1 { Px13y2, Px14y1, Px12y1 } CellNode (13 @ 1) (20)Px13y10 { Px13y11, Px13y9, Px14y10, Px12y10 } CellNode (13 @ 10) (20)Px13y11 { Px14y11, Px12y11, Px13y10, Px13y12 } CellNode (13 @ 11) (20)Px13y12 { Px13y13, Px14y12, Px12y12, Px13y11 } CellNode (13 @ 12) (20)Px13y13 { Px13y14, Px14y13, Px13y12, Px12y13 } CellNode (13 @ 13) (20)Px13y14 { Px13y13, Px12y14, Px14y14 } CellNode (13 @ 14) (20)Px13y2 { Px12y2, Px13y1, Px14y2, Px13y3 } CellNode (13 @ 2) (20)Px13y23 { Px14y23, Px13y24 } CellNode (13 @ 23) (20)Px13y24 { Px13y23, Px14y24 } CellNode (13 @ 24) (20)Px13y3 { Px12y3, Px13y4, Px13y2, Px14y3 } CellNode (13 @ 3) (20)Px13y4 { Px13y3, Px12y4, Px13y5, Px14y4 } CellNode (13 @ 4) (20)Px13y5 { Px13y4, Px14y5, Px12y5, Px13y6 } CellNode (13 @ 5) (20)Px13y6 { Px12y6, Px13y7, Px13y5, Px14y6 } CellNode (13 @ 6) (20)Px13y7 { Px12y7, Px13y8, Px14y7, Px13y6 } CellNode (13 @ 7) (20)Px13y8 { Px14y8, Px13y7, Px12y8, Px13y9 } CellNode (13 @ 8) (20)Px13y9 { Px13y10, Px14y9, Px13y8, Px12y9 } CellNode (13 @ 9) (20)Px14y1 { Px13y1, Px14y2, Px15y1 } CellNode (14 @ 1) (20)Px14y10 { Px14y11, Px15y10, Px14y9, Px13y10 } CellNode (14 @ 10) (20)Px14y11 { Px15y11, Px14y12, Px13y11, Px14y10 } CellNode (14 @ 11) (20)Px14y12 { Px14y11, Px15y12, Px13y12, Px14y13 } CellNode (14 @ 12) (20)Px14y13 { Px13y13, Px15y13, Px14y12, Px14y14 } CellNode (14 @ 13) (20)Px14y14 { Px13y14, Px15y14, Px14y13 } CellNode (14 @ 14) (20)Px14y2 { Px15y2, Px14y1, Px13y2, Px14y3 } CellNode (14 @ 2) (20)Px14y22 { Px15y22, Px14y23 } CellNode (14 @ 22) (20)Px14y23 { Px14y24, Px15y23, Px13y23, Px14y22 } CellNode (14 @ 23) (20)Px14y24 { Px14y23, Px15y24, Px13y24 } CellNode (14 @ 24) (20)Px14y3 { Px14y4, Px14y2, Px15y3, Px13y3 } CellNode (14 @ 3) (20)Px14y4 { Px13y4, Px14y5, Px14y3, Px15y4 } CellNode (14 @ 4) (20)Px14y5 { Px15y5, Px13y5, Px14y6, Px14y4 } CellNode (14 @ 5) (20)Px14y6 { Px15y6, Px14y5, Px14y7, Px13y6 } CellNode (14 @ 6) (20)Px14y7 { Px14y8, Px13y7, Px14y6, Px15y7 } CellNode (14 @ 7) (20)Px14y8 { Px13y8, Px14y9, Px14y7, Px15y8 } CellNode (14 @ 8) (20)Px14y9 { Px14y8, Px15y9, Px13y9, Px14y10 } CellNode (14 @ 9) (20)Px15y1 { Px14y1, Px15y2, Px16y1 } CellNode (15 @ 1) (20)Px15y10 { Px15y9, Px16y10, Px15y11, Px14y10 } CellNode (15 @ 10) (20)Px15y11 { Px14y11, Px15y10, Px16y11, Px15y12 } CellNode (15 @ 11) (20)Px15y12 { Px15y13, Px15y11, Px14y12, Px16y12 } CellNode (15 @ 12) (20)Px15y13 { Px16y13, Px15y14, Px15y12, Px14y13 } CellNode (15 @ 13) (20)Px15y14 { Px14y14, Px16y14, Px15y13 } CellNode (15 @ 14) (20)Px15y19 { Px15y20, Px16y19 } CellNode (15 @ 19) (20)Px15y2 { Px16y2, Px15y3, Px14y2, Px15y1 } CellNode (15 @ 2) (20)Px15y20 { Px15y21, Px15y19, Px16y20 } CellNode (15 @ 20) (20)Px15y21 { Px16y21, Px15y20, Px15y22 } CellNode (15 @ 21) (20)Px15y22 { Px15y21, Px16y22, Px15y23, Px14y22 } CellNode (15 @ 22) (20)Px15y23 { Px14y23, Px15y24, Px15y22, Px16y23 } CellNode (15 @ 23) (20)Px15y24 { Px14y24, Px16y24, Px15y23 } CellNode (15 @ 24) (20)Px15y3 { Px15y2, Px16y3, Px15y4, Px14y3 } CellNode (15 @ 3) (20)Px15y4 { Px15y5, Px15y3, Px16y4, Px14y4 } CellNode (15 @ 4) (20)Px15y5 { Px14y5, Px15y6, Px16y5, Px15y4 } CellNode (15 @ 5) (20)Px15y6 { Px15y5, Px14y6, Px15y7, Px16y6 } CellNode (15 @ 6) (20)Px15y7 { Px16y7, Px15y6, Px14y7, Px15y8 } CellNode (15 @ 7) (20)Px15y8 { Px14y8, Px15y9, Px15y7, Px16y8 } CellNode (15 @ 8) (20)Px15y9 { Px15y10, Px14y9, Px15y8, Px16y9 } CellNode (15 @ 9) (20)Px16y1 { Px17y1, Px15y1, Px16y2 } CellNode (16 @ 1) (20)Px16y10 { Px15y10, Px16y11, Px16y9, Px17y10 } CellNode (16 @ 10) (20)Px16y11 { Px17y11, Px16y10, Px15y11, Px16y12 } CellNode (16 @ 11) (20)Px16y12 { Px16y13, Px17y12, Px15y12, Px16y11 } CellNode (16 @ 12) (20)Px16y13 { Px15y13, Px16y14, Px17y13, Px16y12 } CellNode (16 @ 13) (20)Px16y14 { Px16y13, Px15y14 } CellNode (16 @ 14) (20)Px16y17 { Px17y17, Px16y18 } CellNode (16 @ 17) (20)Px16y18 { Px16y17, Px16y19, Px17y18 } CellNode (16 @ 18) (20)Px16y19 { Px16y20, Px17y19, Px15y19, Px16y18 } CellNode (16 @ 19) (20)Px16y2 { Px15y2, Px16y3, Px17y2, Px16y1 } CellNode (16 @ 2) (20)Px16y20 { Px17y20, Px16y21, Px15y20, Px16y19 } CellNode (16 @ 20) (20)Px16y21 { Px15y21, Px16y20, Px17y21, Px16y22 } CellNode (16 @ 21) (20)Px16y22 { Px16y23, Px16y21, Px15y22, Px17y22 } CellNode (16 @ 22) (20)Px16y23 { Px17y23, Px16y24, Px16y22, Px15y23 } CellNode (16 @ 23) (20)Px16y24 { Px16y23, Px15y24 } CellNode (16 @ 24) (20)Px16y3 { Px16y2, Px17y3, Px15y3, Px16y4 } CellNode (16 @ 3) (20)Px16y4 { Px16y3, Px17y4, Px16y5, Px15y4 } CellNode (16 @ 4) (20)Px16y5 { Px15y5, Px16y4, Px17y5, Px16y6 } CellNode (16 @ 5) (20)Px16y6 { Px15y6, Px16y7, Px16y5, Px17y6 } CellNode (16 @ 6) (20)Px16y7 { Px17y7, Px15y7, Px16y8, Px16y6 } CellNode (16 @ 7) (20)Px16y8 { Px16y7, Px17y8, Px15y8, Px16y9 } CellNode (16 @ 8) (20)Px16y9 { Px15y9, Px16y10, Px16y8, Px17y9 } CellNode (16 @ 9) (20)Px17y1 { Px17y2, Px18y1, Px16y1 } CellNode (17 @ 1) (20)Px17y10 { Px18y10, Px16y10, Px17y11, Px17y9 } CellNode (17 @ 10) (20)Px17y11 { Px17y12, Px16y11, Px18y11, Px17y10 } CellNode (17 @ 11) (20)Px17y12 { Px18y12, Px17y11, Px17y13, Px16y12 } CellNode (17 @ 12) (20)Px17y13 { Px16y13, Px17y12 } CellNode (17 @ 13) (20)Px17y17 { Px16y17, Px18y17, Px17y18 } CellNode (17 @ 17) (20)Px17y18 { Px18y18, Px16y18, Px17y19, Px17y17 } CellNode (17 @ 18) (20)Px17y19 { Px17y18, Px17y20, Px18y19, Px16y19 } CellNode (17 @ 19) (20)Px17y2 { Px17y3, Px16y2, Px18y2, Px17y1 } CellNode (17 @ 2) (20)Px17y20 { Px16y20, Px17y19, Px17y21, Px18y20 } CellNode (17 @ 20) (20)Px17y21 { Px18y21, Px16y21, Px17y20, Px17y22 } CellNode (17 @ 21) (20)Px17y22 { Px17y23, Px18y22, Px16y22, Px17y21 } CellNode (17 @ 22) (20)Px17y23 { Px17y22, Px16y23, Px18y23 } CellNode (17 @ 23) (20)Px17y3 { Px16y3, Px17y4, Px17y2, Px18y3 } CellNode (17 @ 3) (20)Px17y4 { Px17y3, Px18y4, Px16y4, Px17y5 } CellNode (17 @ 4) (20)Px17y5 { Px17y4, Px18y5, Px16y5, Px17y6 } CellNode (17 @ 5) (20)Px17y6 { Px17y7, Px17y5, Px18y6, Px16y6 } CellNode (17 @ 6) (20)Px17y7 { Px17y6, Px16y7, Px17y8, Px18y7 } CellNode (17 @ 7) (20)Px17y8 { Px18y8, Px17y7, Px16y8, Px17y9 } CellNode (17 @ 8) (20)Px17y9 { Px18y9, Px17y8, Px16y9, Px17y10 } CellNode (17 @ 9) (20)Px18y1 { Px17y1, Px18y2, Px19y1 } CellNode (18 @ 1) (20)Px18y10 { Px18y9, Px18y11, Px19y10, Px17y10 } CellNode (18 @ 10) (20)Px18y11 { Px19y11, Px18y10, Px17y11, Px18y12 } CellNode (18 @ 11) (20)Px18y12 { Px18y11, Px17y12, Px19y12 } CellNode (18 @ 12) (20)Px18y16 { Px19y16, Px18y17 } CellNode (18 @ 16) (20)Px18y17 { Px17y17, Px18y18, Px19y17, Px18y16 } CellNode (18 @ 17) (20)Px18y18 { Px19y18, Px18y17, Px17y18, Px18y19 } CellNode (18 @ 18) (20)Px18y19 { Px19y19, Px18y18, Px17y19, Px18y20 } CellNode (18 @ 19) (20)Px18y2 { Px19y2, Px18y1, Px18y3, Px17y2 } CellNode (18 @ 2) (20)Px18y20 { Px18y21, Px17y20, Px19y20, Px18y19 } CellNode (18 @ 20) (20)Px18y21 { Px19y21, Px18y22, Px17y21, Px18y20 } CellNode (18 @ 21) (20)Px18y22 { Px18y23, Px18y21, Px19y22, Px17y22 } CellNode (18 @ 22) (20)Px18y23 { Px19y23, Px17y23, Px18y24, Px18y22 } CellNode (18 @ 23) (20)Px18y24 { Px19y24, Px18y23 } CellNode (18 @ 24) (20)Px18y3 { Px17y3, Px18y4, Px19y3, Px18y2 } CellNode (18 @ 3) (20)Px18y4 { Px18y5, Px17y4, Px18y3, Px19y4 } CellNode (18 @ 4) (20)Px18y5 { Px19y5, Px18y4, Px17y5, Px18y6 } CellNode (18 @ 5) (20)Px18y6 { Px17y6, Px19y6, Px18y5, Px18y7 } CellNode (18 @ 6) (20)Px18y7 { Px18y8, Px17y7, Px18y6, Px19y7 } CellNode (18 @ 7) (20)Px18y8 { Px19y8, Px18y9, Px17y8, Px18y7 } CellNode (18 @ 8) (20)Px18y9 { Px18y8, Px19y9, Px18y10, Px17y9 } CellNode (18 @ 9) (20)Px19y1 { Px18y1, Px19y2, Px20y1 } CellNode (19 @ 1) (20)Px19y10 { Px20y10, Px19y11, Px19y9, Px18y10 } CellNode (19 @ 10) (20)Px19y11 { Px19y12, Px20y11, Px18y11, Px19y10 } CellNode (19 @ 11) (20)Px19y12 { Px19y11, Px20y12, Px18y12, Px19y13 } CellNode (19 @ 12) (20)Px19y13 { Px20y13, Px19y14, Px19y12 } CellNode (19 @ 13) (20)Px19y14 { Px20y14, Px19y13, Px19y15 } CellNode (19 @ 14) (20)Px19y15 { Px19y14, Px20y15, Px19y16 } CellNode (19 @ 15) (20)Px19y16 { Px18y16, Px19y15, Px20y16, Px19y17 } CellNode (19 @ 16) (20)Px19y17 { Px20y17, Px18y17, Px19y18, Px19y16 } CellNode (19 @ 17) (20)Px19y18 { Px20y18, Px18y18, Px19y19, Px19y17 } CellNode (19 @ 18) (20)Px19y19 { Px19y18, Px19y20, Px20y19, Px18y19 } CellNode (19 @ 19) (20)Px19y2 { Px20y2, Px19y3, Px18y2, Px19y1 } CellNode (19 @ 2) (20)Px19y20 { Px19y19, Px19y21, Px20y20, Px18y20 } CellNode (19 @ 20) (20)Px19y21 { Px20y21, Px18y21, Px19y20, Px19y22 } CellNode (19 @ 21) (20)Px19y22 { Px19y23, Px20y22, Px19y21, Px18y22 } CellNode (19 @ 22) (20)Px19y23 { Px19y24, Px20y23, Px19y22, Px18y23 } CellNode (19 @ 23) (20)Px19y24 { Px19y23, Px18y24, Px20y24 } CellNode (19 @ 24) (20)Px19y3 { Px19y2, Px20y3, Px18y3, Px19y4 } CellNode (19 @ 3) (20)Px19y4 { Px18y4, Px19y5, Px19y3, Px20y4 } CellNode (19 @ 4) (20)Px19y5 { Px18y5, Px19y6, Px19y4, Px20y5 } CellNode (19 @ 5) (20)Px19y6 { Px19y5, Px20y6, Px18y6, Px19y7 } CellNode (19 @ 6) (20)Px19y7 { Px18y7, Px19y6, Px20y7, Px19y8 } CellNode (19 @ 7) (20)Px19y8 { Px18y8, Px19y9, Px19y7, Px20y8 } CellNode (19 @ 8) (20)Px19y9 { Px20y9, Px18y9, Px19y10, Px19y8 } CellNode (19 @ 9) (20)Px1y1 { Px1y2, Px2y1 } CellNode (1 @ 1) (20)Px1y10 { Px1y11, Px1y9, Px2y10 } CellNode (1 @ 10) (20)Px1y11 { Px1y12, Px2y11, Px1y10 } CellNode (1 @ 11) (20)Px1y12 { Px1y13, Px2y12, Px1y11 } CellNode (1 @ 12) (20)Px1y13 { Px1y14, Px2y13, Px1y12 } CellNode (1 @ 13) (20)Px1y14 { Px2y14, Px1y13, Px1y15 } CellNode (1 @ 14) (20)Px1y15 { Px1y14, Px2y15, Px1y16 } CellNode (1 @ 15) (20)Px1y16 { Px1y15, Px2y16, Px1y17 } CellNode (1 @ 16) (20)Px1y17 { Px1y18, Px2y17, Px1y16 } CellNode (1 @ 17) (20)Px1y18 { Px1y19, Px2y18, Px1y17 } CellNode (1 @ 18) (20)Px1y19 { Px2y19, Px1y18 } CellNode (1 @ 19) (20)Px1y2 { Px1y3, Px1y1, Px2y2 } CellNode (1 @ 2) (20)Px1y22 { Px2y22, Px1y23 } CellNode (1 @ 22) (20)Px1y23 { Px1y22, Px1y24, Px2y23 } CellNode (1 @ 23) (20)Px1y24 { Px1y23, Px2y24, Px1y25 } CellNode (1 @ 24) (20)Px1y25 { Px2y25, Px1y24, Px1y26 } CellNode (1 @ 25) (20)Px1y26 { Px1y25, Px1y27, Px2y26 } CellNode (1 @ 26) (20)Px1y27 { Px2y27, Px1y26 } CellNode (1 @ 27) (20)Px1y3 { Px1y4, Px1y2, Px2y3 } CellNode (1 @ 3) (20)Px1y4 { Px1y5, Px1y3, Px2y4 } CellNode (1 @ 4) (20)Px1y5 { Px1y4, Px1y6, Px2y5 } CellNode (1 @ 5) (20)Px1y6 { Px2y6, Px1y7, Px1y5 } CellNode (1 @ 6) (20)Px1y7 { Px1y8, Px1y6, Px2y7 } CellNode (1 @ 7) (20)Px1y8 { Px1y7, Px1y9, Px2y8 } CellNode (1 @ 8) (20)Px1y9 { Px2y9, Px1y8, Px1y10 } CellNode (1 @ 9) (20)Px20y1 { Px19y1, Px20y2, Px21y1 } CellNode (20 @ 1) (20)Px20y10 { Px20y9, Px20y11, Px21y10, Px19y10 } CellNode (20 @ 10) (20)Px20y11 { Px19y11, Px20y10, Px20y12, Px21y11 } CellNode (20 @ 11) (20)Px20y12 { Px21y12, Px19y12, Px20y11, Px20y13 } CellNode (20 @ 12) (20)Px20y13 { Px20y14, Px21y13, Px20y12, Px19y13 } CellNode (20 @ 13) (20)Px20y14 { Px19y14, Px20y15, Px21y14, Px20y13 } CellNode (20 @ 14) (20)Px20y15 { Px21y15, Px19y15, Px20y14, Px20y16 } CellNode (20 @ 15) (20)Px20y16 { Px20y17, Px21y16, Px19y16, Px20y15 } CellNode (20 @ 16) (20)Px20y17 { Px20y18, Px21y17, Px19y17, Px20y16 } CellNode (20 @ 17) (20)Px20y18 { Px20y17, Px19y18, Px20y19, Px21y18 } CellNode (20 @ 18) (20)Px20y19 { Px21y19, Px20y18, Px19y19, Px20y20 } CellNode (20 @ 19) (20)Px20y2 { Px19y2, Px20y3, Px21y2, Px20y1 } CellNode (20 @ 2) (20)Px20y20 { Px21y20, Px19y20, Px20y21, Px20y19 } CellNode (20 @ 20) (20)Px20y21 { Px21y21, Px19y21, Px20y22, Px20y20 } CellNode (20 @ 21) (20)Px20y22 { Px20y21, Px21y22, Px19y22, Px20y23 } CellNode (20 @ 22) (20)Px20y23 { Px19y23, Px21y23, Px20y22, Px20y24 } CellNode (20 @ 23) (20)Px20y24 { Px21y24, Px19y24, Px20y23 } CellNode (20 @ 24) (20)Px20y3 { Px20y2, Px21y3, Px19y3, Px20y4 } CellNode (20 @ 3) (20)Px20y4 { Px20y3, Px21y4, Px19y4, Px20y5 } CellNode (20 @ 4) (20)Px20y5 { Px19y5, Px20y6, Px20y4, Px21y5 } CellNode (20 @ 5) (20)Px20y6 { Px21y6, Px19y6, Px20y7, Px20y5 } CellNode (20 @ 6) (20)Px20y7 { Px20y6, Px21y7, Px19y7, Px20y8 } CellNode (20 @ 7) (20)Px20y8 { Px20y9, Px21y8, Px20y7, Px19y8 } CellNode (20 @ 8) (20)Px20y9 { Px20y10, Px19y9, Px21y9, Px20y8 } CellNode (20 @ 9) (20)Px21y1 { Px22y1, Px20y1, Px21y2 } CellNode (21 @ 1) (20)Px21y10 { Px20y10, Px22y10, Px21y9, Px21y11 } CellNode (21 @ 10) (20)Px21y11 { Px22y11, Px20y11, Px21y12, Px21y10 } CellNode (21 @ 11) (20)Px21y12 { Px22y12, Px20y12, Px21y13, Px21y11 } CellNode (21 @ 12) (20)Px21y13 { Px22y13, Px21y12, Px21y14, Px20y13 } CellNode (21 @ 13) (20)Px21y14 { Px22y14, Px20y14, Px21y15, Px21y13 } CellNode (21 @ 14) (20)Px21y15 { Px22y15, Px20y15, Px21y16, Px21y14 } CellNode (21 @ 15) (20)Px21y16 { Px21y15, Px22y16, Px20y16, Px21y17 } CellNode (21 @ 16) (20)Px21y17 { Px20y17, Px22y17, Px21y16, Px21y18 } CellNode (21 @ 17) (20)Px21y18 { Px22y18, Px20y18, Px21y19, Px21y17 } CellNode (21 @ 18) (20)Px21y19 { Px21y20, Px22y19, Px20y19, Px21y18 } CellNode (21 @ 19) (20)Px21y2 { Px20y2, Px21y3, Px22y2, Px21y1 } CellNode (21 @ 2) (20)Px21y20 { Px21y19, Px21y21, Px22y20, Px20y20 } CellNode (21 @ 20) (20)Px21y21 { Px21y20, Px20y21, Px21y22, Px22y21 } CellNode (21 @ 21) (20)Px21y22 { Px22y22, Px21y21, Px20y22, Px21y23 } CellNode (21 @ 22) (20)Px21y23 { Px21y24, Px22y23, Px21y22, Px20y23 } CellNode (21 @ 23) (20)Px21y24 { Px21y23, Px22y24, Px20y24 } CellNode (21 @ 24) (20)Px21y3 { Px20y3, Px21y4, Px22y3, Px21y2 } CellNode (21 @ 3) (20)Px21y4 { Px21y3, Px22y4, Px20y4, Px21y5 } CellNode (21 @ 4) (20)Px21y5 { Px20y5, Px21y4, Px22y5, Px21y6 } CellNode (21 @ 5) (20)Px21y6 { Px20y6, Px21y7, Px22y6, Px21y5 } CellNode (21 @ 6) (20)Px21y7 { Px21y6, Px21y8, Px20y7, Px22y7 } CellNode (21 @ 7) (20)Px21y8 { Px22y8, Px21y7, Px21y9, Px20y8 } CellNode (21 @ 8) (20)Px21y9 { Px20y9, Px21y8, Px22y9, Px21y10 } CellNode (21 @ 9) (20)Px22y1 { Px22y2, Px23y1, Px21y1 } CellNode (22 @ 1) (20)Px22y10 { Px22y11, Px23y10, Px22y9, Px21y10 } CellNode (22 @ 10) (20)Px22y11 { Px22y10, Px22y12, Px23y11, Px21y11 } CellNode (22 @ 11) (20)Px22y12 { Px22y11, Px21y12, Px23y12, Px22y13 } CellNode (22 @ 12) (20)Px22y13 { Px22y14, Px23y13, Px22y12, Px21y13 } CellNode (22 @ 13) (20)Px22y14 { Px22y15, Px23y14, Px21y14, Px22y13 } CellNode (22 @ 14) (20)Px22y15 { Px22y14, Px21y15, Px22y16, Px23y15 } CellNode (22 @ 15) (20)Px22y16 { Px23y16, Px22y15, Px21y16, Px22y17 } CellNode (22 @ 16) (20)Px22y17 { Px23y17, Px22y18, Px22y16, Px21y17 } CellNode (22 @ 17) (20)Px22y18 { Px22y17, Px23y18, Px22y19, Px21y18 } CellNode (22 @ 18) (20)Px22y19 { Px22y18, Px21y19, Px22y20, Px23y19 } CellNode (22 @ 19) (20)Px22y2 { Px23y2, Px22y1, Px22y3, Px21y2 } CellNode (22 @ 2) (20)Px22y20 { Px21y20, Px22y21, Px22y19, Px23y20 } CellNode (22 @ 20) (20)Px22y21 { Px23y21, Px21y21, Px22y22, Px22y20 } CellNode (22 @ 21) (20)Px22y22 { Px23y22, Px22y23, Px21y22, Px22y21 } CellNode (22 @ 22) (20)Px22y23 { Px22y24, Px22y22, Px23y23, Px21y23 } CellNode (22 @ 23) (20)Px22y24 { Px22y23, Px23y24, Px21y24 } CellNode (22 @ 24) (20)Px22y3 { Px21y3, Px22y4, Px22y2, Px23y3 } CellNode (22 @ 3) (20)Px22y4 { Px21y4, Px22y5, Px22y3, Px23y4 } CellNode (22 @ 4) (20)Px22y5 { Px23y5, Px22y4, Px21y5, Px22y6 } CellNode (22 @ 5) (20)Px22y6 { Px22y7, Px22y5, Px23y6, Px21y6 } CellNode (22 @ 6) (20)Px22y7 { Px22y8, Px21y7, Px22y6, Px23y7 } CellNode (22 @ 7) (20)Px22y8 { Px22y7, Px21y8, Px22y9, Px23y8 } CellNode (22 @ 8) (20)Px22y9 { Px22y8, Px23y9, Px21y9, Px22y10 } CellNode (22 @ 9) (20)Px23y1 { Px22y1, Px23y2, Px24y1 } CellNode (23 @ 1) (20)Px23y10 { Px22y10, Px23y9, Px24y10, Px23y11 } CellNode (23 @ 10) (20)Px23y11 { Px24y11, Px22y11, Px23y10, Px23y12 } CellNode (23 @ 11) (20)Px23y12 { Px23y13, Px24y12, Px22y12, Px23y11 } CellNode (23 @ 12) (20)Px23y13 { Px23y14, Px24y13, Px23y12, Px22y13 } CellNode (23 @ 13) (20)Px23y14 { Px22y14, Px23y13, Px23y15, Px24y14 } CellNode (23 @ 14) (20)Px23y15 { Px24y15, Px22y15, Px23y14, Px23y16 } CellNode (23 @ 15) (20)Px23y16 { Px23y17, Px24y16, Px22y16, Px23y15 } CellNode (23 @ 16) (20)Px23y17 { Px23y16, Px23y18, Px24y17, Px22y17 } CellNode (23 @ 17) (20)Px23y18 { Px24y18, Px22y18, Px23y17, Px23y19 } CellNode (23 @ 18) (20)Px23y19 { Px24y19, Px23y18, Px22y19, Px23y20 } CellNode (23 @ 19) (20)Px23y2 { Px23y1, Px22y2, Px23y3, Px24y2 } CellNode (23 @ 2) (20)Px23y20 { Px24y20, Px23y21, Px22y20, Px23y19 } CellNode (23 @ 20) (20)Px23y21 { Px22y21, Px23y22, Px24y21, Px23y20 } CellNode (23 @ 21) (20)Px23y22 { Px22y22, Px23y21, Px23y23, Px24y22 } CellNode (23 @ 22) (20)Px23y23 { Px24y23, Px23y24, Px23y22, Px22y23 } CellNode (23 @ 23) (20)Px23y24 { Px23y23, Px24y24, Px22y24 } CellNode (23 @ 24) (20)Px23y3 { Px24y3, Px23y2, Px22y3, Px23y4 } CellNode (23 @ 3) (20)Px23y4 { Px23y5, Px22y4, Px23y3, Px24y4 } CellNode (23 @ 4) (20)Px23y5 { Px23y6, Px22y5, Px23y4, Px24y5 } CellNode (23 @ 5) (20)Px23y6 { Px23y5, Px24y6, Px22y6, Px23y7 } CellNode (23 @ 6) (20)Px23y7 { Px22y7, Px23y6, Px24y7, Px23y8 } CellNode (23 @ 7) (20)Px23y8 { Px22y8, Px23y9, Px24y8, Px23y7 } CellNode (23 @ 8) (20)Px23y9 { Px24y9, Px23y10, Px22y9, Px23y8 } CellNode (23 @ 9) (20)Px24y1 { Px23y1, Px24y2, Px25y1 } CellNode (24 @ 1) (20)Px24y10 { Px24y11, Px25y10, Px23y10, Px24y9 } CellNode (24 @ 10) (20)Px24y11 { Px24y12, Px25y11, Px23y11, Px24y10 } CellNode (24 @ 11) (20)Px24y12 { Px24y11, Px24y13, Px23y12, Px25y12 } CellNode (24 @ 12) (20)Px24y13 { Px24y14, Px23y13, Px24y12, Px25y13 } CellNode (24 @ 13) (20)Px24y14 { Px25y14, Px23y14, Px24y15, Px24y13 } CellNode (24 @ 14) (20)Px24y15 { Px24y16, Px23y15, Px25y15, Px24y14 } CellNode (24 @ 15) (20)Px24y16 { Px23y16, Px24y15, Px24y17, Px25y16 } CellNode (24 @ 16) (20)Px24y17 { Px25y17, Px23y17, Px24y18, Px24y16 } CellNode (24 @ 17) (20)Px24y18 { Px24y19, Px23y18, Px25y18, Px24y17 } CellNode (24 @ 18) (20)Px24y19 { Px24y18, Px24y20, Px25y19, Px23y19 } CellNode (24 @ 19) (20)Px24y2 { Px23y2, Px24y3, Px24y1, Px25y2 } CellNode (24 @ 2) (20)Px24y20 { Px24y19, Px24y21, Px25y20, Px23y20 } CellNode (24 @ 20) (20)Px24y21 { Px25y21, Px24y20, Px23y21, Px24y22 } CellNode (24 @ 21) (20)Px24y22 { Px23y22, Px24y21, Px24y23 } CellNode (24 @ 22) (20)Px24y23 { Px23y23, Px24y24, Px24y22 } CellNode (24 @ 23) (20)Px24y24 { Px24y23, Px23y24 } CellNode (24 @ 24) (20)Px24y3 { Px24y2, Px23y3, Px24y4, Px25y3 } CellNode (24 @ 3) (20)Px24y4 { Px24y3, Px25y4, Px23y4, Px24y5 } CellNode (24 @ 4) (20)Px24y5 { Px23y5, Px24y6, Px25y5, Px24y4 } CellNode (24 @ 5) (20)Px24y6 { Px23y6, Px24y7, Px24y5, Px25y6 } CellNode (24 @ 6) (20)Px24y7 { Px25y7, Px24y6, Px23y7, Px24y8 } CellNode (24 @ 7) (20)Px24y8 { Px23y8, Px25y8, Px24y7, Px24y9 } CellNode (24 @ 8) (20)Px24y9 { Px23y9, Px25y9, Px24y10, Px24y8 } CellNode (24 @ 9) (20)Px25y1 { Px24y1, Px25y2, Px26y1 } CellNode (25 @ 1) (20)Px25y10 { Px25y11, Px25y9, Px24y10, Px26y10 } CellNode (25 @ 10) (20)Px25y11 { Px24y11, Px25y10, Px25y12, Px26y11 } CellNode (25 @ 11) (20)Px25y12 { Px26y12, Px24y12, Px25y11, Px25y13 } CellNode (25 @ 12) (20)Px25y13 { Px25y14, Px26y13, Px24y13, Px25y12 } CellNode (25 @ 13) (20)Px25y14 { Px24y14, Px25y15, Px26y14, Px25y13 } CellNode (25 @ 14) (20)Px25y15 { Px26y15, Px25y14, Px24y15, Px25y16 } CellNode (25 @ 15) (20)Px25y16 { Px25y17, Px26y16, Px24y16, Px25y15 } CellNode (25 @ 16) (20)Px25y17 { Px25y18, Px26y17, Px25y16, Px24y17 } CellNode (25 @ 17) (20)Px25y18 { Px25y17, Px24y18, Px25y19, Px26y18 } CellNode (25 @ 18) (20)Px25y19 { Px26y19, Px24y19, Px25y18, Px25y20 } CellNode (25 @ 19) (20)Px25y2 { Px25y3, Px25y1, Px26y2, Px24y2 } CellNode (25 @ 2) (20)Px25y20 { Px26y20, Px24y20, Px25y21, Px25y19 } CellNode (25 @ 20) (20)Px25y21 { Px24y21, Px26y21, Px25y20 } CellNode (25 @ 21) (20)Px25y3 { Px24y3, Px25y4, Px26y3, Px25y2 } CellNode (25 @ 3) (20)Px25y4 { Px25y3, Px24y4, Px25y5, Px26y4 } CellNode (25 @ 4) (20)Px25y5 { Px26y5, Px25y4, Px24y5, Px25y6 } CellNode (25 @ 5) (20)Px25y6 { Px25y7, Px24y6, Px25y5, Px26y6 } CellNode (25 @ 6) (20)Px25y7 { Px24y7, Px25y8, Px26y7, Px25y6 } CellNode (25 @ 7) (20)Px25y8 { Px26y8, Px25y7, Px25y9, Px24y8 } CellNode (25 @ 8) (20)Px25y9 { Px25y10, Px25y8, Px26y9, Px24y9 } CellNode (25 @ 9) (20)Px26y1 { Px27y1, Px25y1, Px26y2 } CellNode (26 @ 1) (20)Px26y10 { Px26y11, Px25y10, Px26y9, Px27y10 } CellNode (26 @ 10) (20)Px26y11 { Px27y11, Px25y11, Px26y12, Px26y10 } CellNode (26 @ 11) (20)Px26y12 { Px27y12, Px26y13, Px25y12, Px26y11 } CellNode (26 @ 12) (20)Px26y13 { Px27y13, Px26y12, Px26y14, Px25y13 } CellNode (26 @ 13) (20)Px26y14 { Px26y15, Px25y14, Px27y14, Px26y13 } CellNode (26 @ 14) (20)Px26y15 { Px26y16, Px27y15, Px25y15, Px26y14 } CellNode (26 @ 15) (20)Px26y16 { Px26y15, Px26y17, Px25y16, Px27y16 } CellNode (26 @ 16) (20)Px26y17 { Px25y17, Px26y18, Px26y16, Px27y17 } CellNode (26 @ 17) (20)Px26y18 { Px26y19, Px27y18, Px25y18, Px26y17 } CellNode (26 @ 18) (20)Px26y19 { Px26y20, Px27y19, Px25y19, Px26y18 } CellNode (26 @ 19) (20)Px26y2 { Px27y2, Px26y1, Px26y3, Px25y2 } CellNode (26 @ 2) (20)Px26y20 { Px26y19, Px26y21, Px27y20, Px25y20 } CellNode (26 @ 20) (20)Px26y21 { Px26y20, Px27y21, Px25y21 } CellNode (26 @ 21) (20)Px26y3 { Px25y3, Px26y2, Px27y3, Px26y4 } CellNode (26 @ 3) (20)Px26y4 { Px26y5, Px25y4, Px27y4, Px26y3 } CellNode (26 @ 4) (20)Px26y5 { Px26y4, Px25y5, Px26y6, Px27y5 } CellNode (26 @ 5) (20)Px26y6 { Px26y5, Px27y6, Px25y6, Px26y7 } CellNode (26 @ 6) (20)Px26y7 { Px25y7, Px26y8, Px27y7, Px26y6 } CellNode (26 @ 7) (20)Px26y8 { Px25y8, Px26y9, Px27y8, Px26y7 } CellNode (26 @ 8) (20)Px26y9 { Px27y9, Px26y8, Px25y9, Px26y10 } CellNode (26 @ 9) (20)Px27y1 { Px27y2, Px28y1, Px26y1 } CellNode (27 @ 1) (20)Px27y10 { Px27y9, Px27y11, Px28y10, Px26y10 } CellNode (27 @ 10) (20)Px27y11 { Px26y11, Px27y12, Px28y11, Px27y10 } CellNode (27 @ 11) (20)Px27y12 { Px28y12, Px27y11, Px26y12, Px27y13 } CellNode (27 @ 12) (20)Px27y13 { Px27y14, Px28y13, Px27y12, Px26y13 } CellNode (27 @ 13) (20)Px27y14 { Px27y15, Px28y14, Px26y14, Px27y13 } CellNode (27 @ 14) (20)Px27y15 { Px26y15, Px27y14, Px27y16, Px28y15 } CellNode (27 @ 15) (20)Px27y16 { Px28y16, Px26y16, Px27y15, Px27y17 } CellNode (27 @ 16) (20)Px27y17 { Px27y18, Px28y17, Px26y17, Px27y16 } CellNode (27 @ 17) (20)Px27y18 { Px26y18, Px27y19, Px28y18, Px27y17 } CellNode (27 @ 18) (20)Px27y19 { Px26y19, Px27y18, Px27y20, Px28y19 } CellNode (27 @ 19) (20)Px27y2 { Px26y2, Px27y3, Px28y2, Px27y1 } CellNode (27 @ 2) (20)Px27y20 { Px26y20, Px28y20, Px27y19, Px27y21 } CellNode (27 @ 20) (20)Px27y21 { Px26y21, Px27y20, Px28y21 } CellNode (27 @ 21) (20)Px27y26 { Px28y26 } CellNode (27 @ 26) (20)Px27y3 { Px27y2, Px28y3, Px27y4, Px26y3 } CellNode (27 @ 3) (20)Px27y4 { Px27y5, Px27y3, Px28y4, Px26y4 } CellNode (27 @ 4) (20)Px27y5 { Px26y5, Px27y6, Px27y4, Px28y5 } CellNode (27 @ 5) (20)Px27y6 { Px28y6, Px27y7, Px26y6, Px27y5 } CellNode (27 @ 6) (20)Px27y7 { Px28y7, Px27y6, Px26y7, Px27y8 } CellNode (27 @ 7) (20)Px27y8 { Px27y9, Px26y8, Px27y7, Px28y8 } CellNode (27 @ 8) (20)Px27y9 { Px27y8, Px26y9, Px28y9, Px27y10 } CellNode (27 @ 9) (20)Px28y1 { Px27y1, Px28y2, Px29y1 } CellNode (28 @ 1) (20)Px28y10 { Px29y10, Px28y11, Px28y9, Px27y10 } CellNode (28 @ 10) (20)Px28y11 { Px29y11, Px27y11, Px28y12, Px28y10 } CellNode (28 @ 11) (20)Px28y12 { Px28y13, Px27y12, Px29y12, Px28y11 } CellNode (28 @ 12) (20)Px28y13 { Px28y12, Px29y13, Px28y14, Px27y13 } CellNode (28 @ 13) (20)Px28y14 { Px27y14, Px28y15, Px28y13, Px29y14 } CellNode (28 @ 14) (20)Px28y15 { Px28y16, Px27y15, Px29y15, Px28y14 } CellNode (28 @ 15) (20)Px28y16 { Px29y16, Px27y16, Px28y17, Px28y15 } CellNode (28 @ 16) (20)Px28y17 { Px28y16, Px28y18, Px29y17, Px27y17 } CellNode (28 @ 17) (20)Px28y18 { Px29y18, Px27y18, Px28y17, Px28y19 } CellNode (28 @ 18) (20)Px28y19 { Px29y19, Px27y19, Px28y18, Px28y20 } CellNode (28 @ 19) (20)Px28y2 { Px27y2, Px28y3, Px28y1, Px29y2 } CellNode (28 @ 2) (20)Px28y20 { Px28y21, Px29y20, Px27y20, Px28y19 } CellNode (28 @ 20) (20)Px28y21 { Px29y21, Px27y21, Px28y20 } CellNode (28 @ 21) (20)Px28y25 { Px28y26, Px29y25 } CellNode (28 @ 25) (20)Px28y26 { Px27y26, Px29y26, Px28y25 } CellNode (28 @ 26) (20)Px28y3 { Px27y3, Px28y4, Px28y2, Px29y3 } CellNode (28 @ 3) (20)Px28y4 { Px28y3, Px29y4, Px27y4, Px28y5 } CellNode (28 @ 4) (20)Px28y5 { Px28y6, Px28y4, Px29y5, Px27y5 } CellNode (28 @ 5) (20)Px28y6 { Px28y7, Px27y6, Px29y6, Px28y5 } CellNode (28 @ 6) (20)Px28y7 { Px28y6, Px28y8, Px27y7, Px29y7 } CellNode (28 @ 7) (20)Px28y8 { Px29y8, Px28y7, Px28y9, Px27y8 } CellNode (28 @ 8) (20)Px28y9 { Px27y9, Px29y9, Px28y10, Px28y8 } CellNode (28 @ 9) (20)Px29y1 { Px28y1, Px29y2, Px30y1 } CellNode (29 @ 1) (20)Px29y10 { Px29y11, Px30y10, Px29y9, Px28y10 } CellNode (29 @ 10) (20)Px29y11 { Px29y12, Px30y11, Px28y11, Px29y10 } CellNode (29 @ 11) (20)Px29y12 { Px29y11, Px28y12, Px29y13, Px30y12 } CellNode (29 @ 12) (20)Px29y13 { Px30y13, Px28y13, Px29y12, Px29y14 } CellNode (29 @ 13) (20)Px29y14 { Px29y15, Px30y14, Px29y13, Px28y14 } CellNode (29 @ 14) (20)Px29y15 { Px28y15, Px29y16, Px30y15, Px29y14 } CellNode (29 @ 15) (20)Px29y16 { Px30y16, Px29y15, Px28y16, Px29y17 } CellNode (29 @ 16) (20)Px29y17 { Px29y18, Px30y17, Px29y16, Px28y17 } CellNode (29 @ 17) (20)Px29y18 { Px29y19, Px28y18, Px30y18, Px29y17 } CellNode (29 @ 18) (20)Px29y19 { Px29y18, Px29y20, Px28y19, Px30y19 } CellNode (29 @ 19) (20)Px29y2 { Px29y1, Px30y2, Px28y2, Px29y3 } CellNode (29 @ 2) (20)Px29y20 { Px29y19, Px29y21, Px30y20, Px28y20 } CellNode (29 @ 20) (20)Px29y21 { Px30y21, Px28y21, Px29y20, Px29y22 } CellNode (29 @ 21) (20)Px29y22 { Px29y21, Px29y23, Px30y22 } CellNode (29 @ 22) (20)Px29y23 { Px29y24, Px29y22, Px30y23 } CellNode (29 @ 23) (20)Px29y24 { Px29y25, Px29y23, Px30y24 } CellNode (29 @ 24) (20)Px29y25 { Px30y25, Px28y25, Px29y24, Px29y26 } CellNode (29 @ 25) (20)Px29y26 { Px28y26, Px29y25, Px30y26 } CellNode (29 @ 26) (20)Px29y3 { Px28y3, Px29y4, Px29y2, Px30y3 } CellNode (29 @ 3) (20)Px29y4 { Px28y4, Px29y5, Px29y3, Px30y4 } CellNode (29 @ 4) (20)Px29y5 { Px29y4, Px30y5, Px29y6, Px28y5 } CellNode (29 @ 5) (20)Px29y6 { Px28y6, Px29y5, Px30y6, Px29y7 } CellNode (29 @ 6) (20)Px29y7 { Px28y7, Px29y8, Px29y6, Px30y7 } CellNode (29 @ 7) (20)Px29y8 { Px30y8, Px29y9, Px28y8, Px29y7 } CellNode (29 @ 8) (20)Px29y9 { Px29y8, Px30y9, Px28y9, Px29y10 } CellNode (29 @ 9) (20)Px2y1 { Px3y1, Px1y1, Px2y2 } CellNode (2 @ 1) (20)Px2y10 { Px2y9, Px2y11, Px3y10, Px1y10 } CellNode (2 @ 10) (20)Px2y11 { Px3y11, Px2y10, Px1y11, Px2y12 } CellNode (2 @ 11) (20)Px2y12 { Px2y13, Px3y12, Px2y11, Px1y12 } CellNode (2 @ 12) (20)Px2y13 { Px2y14, Px3y13, Px2y12, Px1y13 } CellNode (2 @ 13) (20)Px2y14 { Px2y13, Px1y14, Px2y15, Px3y14 } CellNode (2 @ 14) (20)Px2y15 { Px3y15, Px1y15, Px2y14, Px2y16 } CellNode (2 @ 15) (20)Px2y16 { Px2y17, Px3y16, Px1y16, Px2y15 } CellNode (2 @ 16) (20)Px2y17 { Px1y17, Px2y18, Px3y17, Px2y16 } CellNode (2 @ 17) (20)Px2y18 { Px3y18, Px2y17, Px1y18, Px2y19 } CellNode (2 @ 18) (20)Px2y19 { Px2y18, Px1y19 } CellNode (2 @ 19) (20)Px2y2 { Px2y3, Px1y2, Px3y2, Px2y1 } CellNode (2 @ 2) (20)Px2y21 { Px2y22, Px3y21 } CellNode (2 @ 21) (20)Px2y22 { Px2y21, Px1y22, Px3y22, Px2y23 } CellNode (2 @ 22) (20)Px2y23 { Px3y23, Px2y24, Px1y23, Px2y22 } CellNode (2 @ 23) (20)Px2y24 { Px3y24, Px2y25, Px1y24, Px2y23 } CellNode (2 @ 24) (20)Px2y25 { Px2y24, Px1y25, Px3y25, Px2y26 } CellNode (2 @ 25) (20)Px2y26 { Px2y27, Px2y25, Px1y26, Px3y26 } CellNode (2 @ 26) (20)Px2y27 { Px2y26, Px1y27, Px3y27 } CellNode (2 @ 27) (20)Px2y3 { Px3y3, Px2y4, Px1y3, Px2y2 } CellNode (2 @ 3) (20)Px2y4 { Px3y4, Px2y3, Px2y5, Px1y4 } CellNode (2 @ 4) (20)Px2y5 { Px1y5, Px2y6, Px3y5, Px2y4 } CellNode (2 @ 5) (20)Px2y6 { Px1y6, Px2y7, Px3y6, Px2y5 } CellNode (2 @ 6) (20)Px2y7 { Px2y6, Px3y7, Px1y7, Px2y8 } CellNode (2 @ 7) (20)Px2y8 { Px2y9, Px2y7, Px3y8, Px1y8 } CellNode (2 @ 8) (20)Px2y9 { Px1y9, Px2y10, Px2y8, Px3y9 } CellNode (2 @ 9) (20)Px30y1 { Px29y1, Px30y2, Px31y1 } CellNode (30 @ 1) (20)Px30y10 { Px30y9, Px30y11, Px29y10, Px31y10 } CellNode (30 @ 10) (20)Px30y11 { Px29y11, Px31y11, Px30y10, Px30y12 } CellNode (30 @ 11) (20)Px30y12 { Px30y13, Px29y12, Px31y12, Px30y11 } CellNode (30 @ 12) (20)Px30y13 { Px31y13, Px29y13, Px30y14, Px30y12 } CellNode (30 @ 13) (20)Px30y14 { Px31y14, Px30y13, Px30y15, Px29y14 } CellNode (30 @ 14) (20)Px30y15 { Px31y15, Px29y15, Px30y16, Px30y14 } CellNode (30 @ 15) (20)Px30y16 { Px30y17, Px29y16, Px31y16, Px30y15 } CellNode (30 @ 16) (20)Px30y17 { Px30y16, Px31y17, Px29y17, Px30y18 } CellNode (30 @ 17) (20)Px30y18 { Px29y18, Px30y19, Px30y17, Px31y18 } CellNode (30 @ 18) (20)Px30y19 { Px31y19, Px29y19, Px30y18, Px30y20 } CellNode (30 @ 19) (20)Px30y2 { Px31y2, Px30y1, Px29y2, Px30y3 } CellNode (30 @ 2) (20)Px30y20 { Px30y21, Px31y20, Px29y20, Px30y19 } CellNode (30 @ 20) (20)Px30y21 { Px30y22, Px29y21, Px31y21, Px30y20 } CellNode (30 @ 21) (20)Px30y22 { Px30y21, Px30y23, Px29y22, Px31y22 } CellNode (30 @ 22) (20)Px30y23 { Px29y23, Px31y23, Px30y22, Px30y24 } CellNode (30 @ 23) (20)Px30y24 { Px30y25, Px29y24, Px31y24, Px30y23 } CellNode (30 @ 24) (20)Px30y25 { Px30y26, Px29y25, Px31y25, Px30y24 } CellNode (30 @ 25) (20)Px30y26 { Px31y26, Px29y26, Px30y25 } CellNode (30 @ 26) (20)Px30y3 { Px30y2, Px31y3, Px29y3, Px30y4 } CellNode (30 @ 3) (20)Px30y4 { Px29y4, Px30y5, Px31y4, Px30y3 } CellNode (30 @ 4) (20)Px30y5 { Px31y5, Px29y5, Px30y6, Px30y4 } CellNode (30 @ 5) (20)Px30y6 { Px30y5, Px31y6, Px29y6, Px30y7 } CellNode (30 @ 6) (20)Px30y7 { Px30y8, Px31y7, Px30y6, Px29y7 } CellNode (30 @ 7) (20)Px30y8 { Px29y8, Px30y9, Px31y8, Px30y7 } CellNode (30 @ 8) (20)Px30y9 { Px30y8, Px31y9, Px30y10, Px29y9 } CellNode (30 @ 9) (20)Px31y1 { Px30y1, Px31y2 } CellNode (31 @ 1) (20)Px31y10 { Px30y10, Px31y11, Px31y9 } CellNode (31 @ 10) (20)Px31y11 { Px31y12, Px30y11, Px31y10 } CellNode (31 @ 11) (20)Px31y12 { Px30y12, Px31y13, Px31y11 } CellNode (31 @ 12) (20)Px31y13 { Px31y14, Px30y13, Px31y12 } CellNode (31 @ 13) (20)Px31y14 { Px31y15, Px31y13, Px30y14 } CellNode (31 @ 14) (20)Px31y15 { Px30y15, Px31y14, Px31y16 } CellNode (31 @ 15) (20)Px31y16 { Px31y15, Px31y17, Px30y16 } CellNode (31 @ 16) (20)Px31y17 { Px30y17, Px31y18, Px31y16 } CellNode (31 @ 17) (20)Px31y18 { Px31y19, Px31y17, Px30y18 } CellNode (31 @ 18) (20)Px31y19 { Px31y20, Px31y18, Px30y19 } CellNode (31 @ 19) (20)Px31y2 { Px31y1, Px30y2, Px31y3 } CellNode (31 @ 2) (20)Px31y20 { Px31y21, Px31y19, Px30y20 } CellNode (31 @ 20) (20)Px31y21 { Px31y20, Px31y22, Px30y21 } CellNode (31 @ 21) (20)Px31y22 { Px31y21, Px31y23, Px30y22 } CellNode (31 @ 22) (20)Px31y23 { Px31y24, Px31y22, Px30y23 } CellNode (31 @ 23) (20)Px31y24 { Px31y25, Px31y23, Px30y24 } CellNode (31 @ 24) (20)Px31y25 { Px31y26, Px31y24, Px30y25 } CellNode (31 @ 25) (20)Px31y26 { Px30y26, Px31y25 } CellNode (31 @ 26) (20)Px31y3 { Px31y2, Px30y3, Px31y4 } CellNode (31 @ 3) (20)Px31y4 { Px31y3, Px30y4, Px31y5 } CellNode (31 @ 4) (20)Px31y5 { Px31y4, Px30y5, Px31y6 } CellNode (31 @ 5) (20)Px31y6 { Px31y5, Px30y6, Px31y7 } CellNode (31 @ 6) (20)Px31y7 { Px31y6, Px30y7, Px31y8 } CellNode (31 @ 7) (20)Px31y8 { Px31y9, Px30y8, Px31y7 } CellNode (31 @ 8) (20)Px31y9 { Px31y10, Px30y9, Px31y8 } CellNode (31 @ 9) (20)Px3y1 { Px3y2, Px4y1, Px2y1 } CellNode (3 @ 1) (20)Px3y10 { Px4y10, Px2y10, Px3y11, Px3y9 } CellNode (3 @ 10) (20)Px3y11 { Px3y12, Px2y11, Px4y11, Px3y10 } CellNode (3 @ 11) (20)Px3y12 { Px3y11, Px3y13, Px2y12, Px4y12 } CellNode (3 @ 12) (20)Px3y13 { Px2y13, Px4y13, Px3y12, Px3y14 } CellNode (3 @ 13) (20)Px3y14 { Px4y14, Px3y15, Px2y14, Px3y13 } CellNode (3 @ 14) (20)Px3y15 { Px4y15, Px3y16, Px2y15, Px3y14 } CellNode (3 @ 15) (20)Px3y16 { Px4y16, Px3y15, Px3y17, Px2y16 } CellNode (3 @ 16) (20)Px3y17 { Px4y17, Px2y17, Px3y18, Px3y16 } CellNode (3 @ 17) (20)Px3y18 { Px3y17, Px2y18, Px4y18 } CellNode (3 @ 18) (20)Px3y2 { Px3y3, Px4y2, Px3y1, Px2y2 } CellNode (3 @ 2) (20)Px3y21 { Px2y21, Px3y22, Px4y21 } CellNode (3 @ 21) (20)Px3y22 { Px3y23, Px4y22, Px3y21, Px2y22 } CellNode (3 @ 22) (20)Px3y23 { Px3y24, Px4y23, Px3y22, Px2y23 } CellNode (3 @ 23) (20)Px3y24 { Px2y24, Px3y23, Px3y25, Px4y24 } CellNode (3 @ 24) (20)Px3y25 { Px4y25, Px3y24, Px2y25, Px3y26 } CellNode (3 @ 25) (20)Px3y26 { Px3y27, Px4y26, Px3y25, Px2y26 } CellNode (3 @ 26) (20)Px3y27 { Px2y27, Px3y26, Px4y27 } CellNode (3 @ 27) (20)Px3y3 { Px3y4, Px2y3, Px3y2, Px4y3 } CellNode (3 @ 3) (20)Px3y4 { Px4y4, Px2y4, Px3y5, Px3y3 } CellNode (3 @ 4) (20)Px3y5 { Px3y4, Px4y5, Px3y6, Px2y5 } CellNode (3 @ 5) (20)Px3y6 { Px2y6, Px3y7, Px3y5, Px4y6 } CellNode (3 @ 6) (20)Px3y7 { Px2y7, Px3y8, Px3y6, Px4y7 } CellNode (3 @ 7) (20)Px3y8 { Px4y8, Px3y7, Px3y9, Px2y8 } CellNode (3 @ 8) (20)Px3y9 { Px3y8, Px4y9, Px3y10, Px2y9 } CellNode (3 @ 9) (20)Px4y1 { Px3y1, Px4y2, Px5y1 } CellNode (4 @ 1) (20)Px4y10 { Px4y11, Px4y9, Px5y10, Px3y10 } CellNode (4 @ 10) (20)Px4y11 { Px4y10, Px3y11, Px4y12, Px5y11 } CellNode (4 @ 11) (20)Px4y12 { Px5y12, Px3y12, Px4y11, Px4y13 } CellNode (4 @ 12) (20)Px4y13 { Px4y14, Px5y13, Px3y13, Px4y12 } CellNode (4 @ 13) (20)Px4y14 { Px4y13, Px4y15, Px5y14, Px3y14 } CellNode (4 @ 14) (20)Px4y15 { Px5y15, Px4y14, Px3y15, Px4y16 } CellNode (4 @ 15) (20)Px4y16 { Px4y17, Px5y16, Px4y15, Px3y16 } CellNode (4 @ 16) (20)Px4y17 { Px4y18, Px5y17, Px3y17, Px4y16 } CellNode (4 @ 17) (20)Px4y18 { Px5y18, Px3y18, Px4y17 } CellNode (4 @ 18) (20)Px4y2 { Px4y1, Px5y2, Px3y2, Px4y3 } CellNode (4 @ 2) (20)Px4y21 { Px3y21, Px5y21, Px4y22 } CellNode (4 @ 21) (20)Px4y22 { Px4y21, Px5y22, Px3y22, Px4y23 } CellNode (4 @ 22) (20)Px4y23 { Px3y23, Px4y24, Px4y22 } CellNode (4 @ 23) (20)Px4y24 { Px3y24, Px4y25, Px4y23 } CellNode (4 @ 24) (20)Px4y25 { Px3y25, Px4y24, Px4y26 } CellNode (4 @ 25) (20)Px4y26 { Px3y26, Px4y25, Px4y27 } CellNode (4 @ 26) (20)Px4y27 { Px3y27, Px5y27, Px4y26 } CellNode (4 @ 27) (20)Px4y3 { Px4y4, Px4y2, Px5y3, Px3y3 } CellNode (4 @ 3) (20)Px4y4 { Px3y4, Px4y5, Px5y4, Px4y3 } CellNode (4 @ 4) (20)Px4y5 { Px5y5, Px4y6, Px3y5, Px4y4 } CellNode (4 @ 5) (20)Px4y6 { Px5y6, Px4y5, Px3y6, Px4y7 } CellNode (4 @ 6) (20)Px4y7 { Px3y7, Px4y8, Px5y7, Px4y6 } CellNode (4 @ 7) (20)Px4y8 { Px3y8, Px4y9, Px4y7, Px5y8 } CellNode (4 @ 8) (20)Px4y9 { Px4y8, Px5y9, Px4y10, Px3y9 } CellNode (4 @ 9) (20)Px5y1 { Px4y1, Px5y2, Px6y1 } CellNode (5 @ 1) (20)Px5y10 { Px5y9, Px4y10, Px5y11, Px6y10 } CellNode (5 @ 10) (20)Px5y11 { Px5y12, Px6y11, Px4y11, Px5y10 } CellNode (5 @ 11) (20)Px5y12 { Px6y12, Px5y13, Px4y12, Px5y11 } CellNode (5 @ 12) (20)Px5y13 { Px4y13, Px5y12, Px6y13, Px5y14 } CellNode (5 @ 13) (20)Px5y14 { Px5y15, Px4y14, Px6y14, Px5y13 } CellNode (5 @ 14) (20)Px5y15 { Px5y16, Px4y15, Px6y15, Px5y14 } CellNode (5 @ 15) (20)Px5y16 { Px5y15, Px6y16, Px5y17, Px4y16 } CellNode (5 @ 16) (20)Px5y17 { Px4y17, Px5y18, Px5y16, Px6y17 } CellNode (5 @ 17) (20)Px5y18 { Px4y18, Px5y17 } CellNode (5 @ 18) (20)Px5y2 { Px6y2, Px4y2, Px5y3, Px5y1 } CellNode (5 @ 2) (20)Px5y21 { Px4y21, Px5y22 } CellNode (5 @ 21) (20)Px5y22 { Px4y22, Px5y21 } CellNode (5 @ 22) (20)Px5y27 { Px4y27 } CellNode (5 @ 27) (20)Px5y3 { Px5y2, Px6y3, Px5y4, Px4y3 } CellNode (5 @ 3) (20)Px5y4 { Px5y5, Px5y3, Px6y4, Px4y4 } CellNode (5 @ 4) (20)Px5y5 { Px5y6, Px4y5, Px5y4, Px6y5 } CellNode (5 @ 5) (20)Px5y6 { Px6y6, Px4y6, Px5y7, Px5y5 } CellNode (5 @ 6) (20)Px5y7 { Px5y6, Px6y7, Px4y7, Px5y8 } CellNode (5 @ 7) (20)Px5y8 { Px4y8, Px5y9, Px5y7, Px6y8 } CellNode (5 @ 8) (20)Px5y9 { Px4y9, Px5y10, Px5y8, Px6y9 } CellNode (5 @ 9) (20)Px6y1 { Px7y1, Px5y1, Px6y2 } CellNode (6 @ 1) (20)Px6y10 { Px6y11, Px7y10, Px5y10, Px6y9 } CellNode (6 @ 10) (20)Px6y11 { Px5y11, Px6y12, Px7y11, Px6y10 } CellNode (6 @ 11) (20)Px6y12 { Px5y12, Px6y11, Px6y13, Px7y12 } CellNode (6 @ 12) (20)Px6y13 { Px7y13, Px6y14, Px5y13, Px6y12 } CellNode (6 @ 13) (20)Px6y14 { Px7y14, Px6y15, Px6y13, Px5y14 } CellNode (6 @ 14) (20)Px6y15 { Px5y15, Px6y14, Px7y15, Px6y16 } CellNode (6 @ 15) (20)Px6y16 { Px7y16, Px5y16, Px6y15, Px6y17 } CellNode (6 @ 16) (20)Px6y17 { Px5y17, Px6y16 } CellNode (6 @ 17) (20)Px6y2 { Px5y2, Px6y3, Px6y1, Px7y2 } CellNode (6 @ 2) (20)Px6y3 { Px6y2, Px7y3, Px5y3, Px6y4 } CellNode (6 @ 3) (20)Px6y4 { Px7y4, Px6y3, Px5y4, Px6y5 } CellNode (6 @ 4) (20)Px6y5 { Px6y6, Px6y4, Px7y5, Px5y5 } CellNode (6 @ 5) (20)Px6y6 { Px7y6, Px5y6, Px6y7, Px6y5 } CellNode (6 @ 6) (20)Px6y7 { Px7y7, Px6y6, Px5y7, Px6y8 } CellNode (6 @ 7) (20)Px6y8 { Px6y7, Px7y8, Px5y8, Px6y9 } CellNode (6 @ 8) (20)Px6y9 { Px5y9, Px6y8, Px7y9, Px6y10 } CellNode (6 @ 9) (20)Px7y1 { Px7y2, Px8y1, Px6y1 } CellNode (7 @ 1) (20)Px7y10 { Px7y9, Px7y11, Px8y10, Px6y10 } CellNode (7 @ 10) (20)Px7y11 { Px8y11, Px6y11, Px7y10, Px7y12 } CellNode (7 @ 11) (20)Px7y12 { Px7y13, Px8y12, Px6y12, Px7y11 } CellNode (7 @ 12) (20)Px7y13 { Px7y14, Px8y13, Px6y13, Px7y12 } CellNode (7 @ 13) (20)Px7y14 { Px7y13, Px6y14, Px7y15, Px8y14 } CellNode (7 @ 14) (20)Px7y15 { Px8y15, Px7y14, Px6y15, Px7y16 } CellNode (7 @ 15) (20)Px7y16 { Px7y15, Px6y16 } CellNode (7 @ 16) (20)Px7y2 { Px6y2, Px7y3, Px8y2, Px7y1 } CellNode (7 @ 2) (20)Px7y27 { Px8y27 } CellNode (7 @ 27) (20)Px7y3 { Px7y4, Px6y3, Px7y2, Px8y3 } CellNode (7 @ 3) (20)Px7y4 { Px7y3, Px8y4, Px6y4, Px7y5 } CellNode (7 @ 4) (20)Px7y5 { Px7y6, Px8y5, Px7y4, Px6y5 } CellNode (7 @ 5) (20)Px7y6 { Px7y7, Px6y6, Px8y6, Px7y5 } CellNode (7 @ 6) (20)Px7y7 { Px8y7, Px6y7, Px7y8, Px7y6 } CellNode (7 @ 7) (20)Px7y8 { Px7y7, Px8y8, Px6y8, Px7y9 } CellNode (7 @ 8) (20)Px7y9 { Px7y10, Px8y9, Px7y8, Px6y9 } CellNode (7 @ 9) (20)Px8y1 { Px7y1, Px8y2, Px9y1 } CellNode (8 @ 1) (20)Px8y10 { Px9y10, Px7y10, Px8y11, Px8y9 } CellNode (8 @ 10) (20)Px8y11 { Px8y12, Px7y11, Px9y11, Px8y10 } CellNode (8 @ 11) (20)Px8y12 { Px8y11, Px9y12, Px7y12, Px8y13 } CellNode (8 @ 12) (20)Px8y13 { Px8y14, Px7y13, Px8y12, Px9y13 } CellNode (8 @ 13) (20)Px8y14 { Px8y15, Px7y14, Px9y14, Px8y13 } CellNode (8 @ 14) (20)Px8y15 { Px7y15, Px8y14, Px9y15 } CellNode (8 @ 15) (20)Px8y2 { Px8y1, Px9y2, Px8y3, Px7y2 } CellNode (8 @ 2) (20)Px8y26 { Px9y26, Px8y27 } CellNode (8 @ 26) (20)Px8y27 { Px9y27, Px8y26, Px7y27 } CellNode (8 @ 27) (20)Px8y3 { Px8y4, Px7y3, Px8y2, Px9y3 } CellNode (8 @ 3) (20)Px8y4 { Px8y5, Px7y4, Px9y4, Px8y3 } CellNode (8 @ 4) (20)Px8y5 { Px9y5, Px8y4, Px8y6, Px7y5 } CellNode (8 @ 5) (20)Px8y6 { Px8y7, Px8y5, Px9y6, Px7y6 } CellNode (8 @ 6) (20)Px8y7 { Px7y7, Px8y8, Px9y7, Px8y6 } CellNode (8 @ 7) (20)Px8y8 { Px9y8, Px8y9, Px7y8, Px8y7 } CellNode (8 @ 8) (20)Px8y9 { Px8y8, Px9y9, Px8y10, Px7y9 } CellNode (8 @ 9) (20)Px9y1 { Px8y1, Px10y1, Px9y2 } CellNode (9 @ 1) (20)Px9y10 { Px10y10, Px9y9, Px9y11, Px8y10 } CellNode (9 @ 10) (20)Px9y11 { Px9y10, Px8y11, Px10y11, Px9y12 } CellNode (9 @ 11) (20)Px9y12 { Px8y12, Px9y11, Px10y12, Px9y13 } CellNode (9 @ 12) (20)Px9y13 { Px9y14, Px9y12, Px8y13, Px10y13 } CellNode (9 @ 13) (20)Px9y14 { Px8y14, Px10y14, Px9y15, Px9y13 } CellNode (9 @ 14) (20)Px9y15 { Px10y15, Px8y15, Px9y14 } CellNode (9 @ 15) (20)Px9y2 { Px10y2, Px8y2, Px9y3, Px9y1 } CellNode (9 @ 2) (20)Px9y26 { Px8y26, Px9y27 } CellNode (9 @ 26) (20)Px9y27 { Px8y27, Px9y26 } CellNode (9 @ 27) (20)Px9y3 { Px10y3, Px9y2, Px8y3, Px9y4 } CellNode (9 @ 3) (20)Px9y4 { Px9y5, Px10y4, Px8y4, Px9y3 } CellNode (9 @ 4) (20)Px9y5 { Px8y5, Px9y6, Px10y5, Px9y4 } CellNode (9 @ 5) (20)Px9y6 { Px9y5, Px10y6, Px8y6, Px9y7 } CellNode (9 @ 6) (20)Px9y7 { Px8y7, Px9y8, Px9y6, Px10y7 } CellNode (9 @ 7) (20)Px9y8 { Px10y8, Px8y8, Px9y9, Px9y7 } CellNode (9 @ 8) (20)Px9y9 { Px9y10, Px10y9, Px8y9, Px9y8 } CellNode (9 @ 9) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="bibusLine3Range100">bibusLine3Range100messages none  defined. P1 { P2, P3, P4, P5, P6, P7, P8 } NodeP2 { P1, P3, P4, P5, P6, P7, P9 } NodeP3 { P1, P2, P4, P5, P6, P7, P8, P9, P10 } NodeP4 { P1, P2, P3, P5, P6, P7, P8, P9, P10, P11, P12 } NodeP5 { P1, P2, P3, P4, P6, P7, P8, P9, P10, P11, P12 } NodeP6 { P1, P2, P3, P4, P5, P7, P8, P9, P10, P11, P12, P13 } NodeP7 { P1, P2, P3, P4, P5, P6, P8, P9, P10, P11, P12, P13 } NodeP8 { P1, P3, P4, P5, P6, P7, P9, P10, P11, P12, P13, P14 } NodeP9 { P2, P3, P4, P5, P6, P7, P8, P10, P11, P12, P13 } NodeP10 { P3, P4, P5, P6, P7, P8, P9, P11, P12, P13 } NodeP11 { P4, P5, P6, P7, P8, P9, P10, P12, P13 } NodeP12 { P4, P5, P6, P7, P8, P9, P10, P11, P13, P14 } NodeP13 { P6, P7, P8, P9, P10, P11, P12, P14, P15 } NodeP14 { P8, P12, P13, P15 } NodeP15 { P13, P14, P16 } NodeP16 { P15, P17 } NodeP17 { P16, P18, P19 } NodeP18 { P17, P19 } NodeP19 { P17, P18, P20, P21 } NodeP20 { P19, P21, P22, P23 } NodeP21 { P19, P20, P22, P23 } NodeP22 { P20, P21, P23, P24 } NodeP23 { P20, P21, P22, P24, P25, P26 } NodeP24 { P22, P23, P25, P26 } NodeP25 { P23, P24, P26, P27, P28 } NodeP26 { P23, P24, P25, P27, P28, P29 } NodeP27 { P25, P26, P28, P29, P30, P31 } NodeP28 { P25, P26, P27, P29, P30, P31, P32, P33 } NodeP29 { P26, P27, P28, P30, P31, P32, P33, P34 } NodeP30 { P27, P28, P29, P31, P32, P33, P34, P35 } NodeP31 { P27, P28, P29, P30, P32, P33, P34, P35 } NodeP32 { P28, P29, P30, P31, P33, P34, P35, P36 } NodeP33 { P28, P29, P30, P31, P32, P34, P35, P36 } NodeP34 { P29, P30, P31, P32, P33, P35, P36 } NodeP35 { P30, P31, P32, P33, P34, P36, P37 } NodeP36 { P32, P33, P34, P35, P37, P38 } NodeP37 { P35, P36, P38, P39, P40 } NodeP38 { P36, P37, P39, P40, P41 } NodeP39 { P37, P38, P40, P41, P42 } NodeP40 { P37, P38, P39, P41, P42 } NodeP41 { P38, P39, P40, P42 } NodeP42 { P39, P40, P41, P43 } NodeP43 { P42, P44 } NodeP44 { P43 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange640Points80">genRange640Points80messages none  defined. P1 { P2, P3, P11, P25, P29, P33, P37, P38, P39, P41, P44, P54, P56, P60, P66, P69, P70, P75, P76, P78 } NodeP2 { P1, P10, P19, P25, P29, P38, P42, P50, P51, P54, P56, P60, P69, P72, P74 } NodeP3 { P1, P11, P22, P24, P25, P29, P33, P39, P41, P60, P66, P68, P80 } NodeP4 { P5, P12, P40, P48, P52, P61 } NodeP5 { P4, P12, P40, P43, P52, P61, P64, P77 } NodeP6 { P13, P18, P30, P43, P44, P57, P73, P75 } NodeP7 { P8, P9, P14, P16, P37, P53, P58, P66, P70, P73, P80 } NodeP8 { P7, P9, P11, P14, P16, P37, P53, P66, P70, P73, P80 } NodeP9 { P7, P8, P14, P16, P37, P46, P53, P58, P73 } NodeP10 { P2, P19, P26, P34, P36, P42, P45, P50, P65, P74 } NodeP11 { P1, P3, P8, P13, P29, P30, P33, P37, P39, P41, P44, P53, P66, P69, P70, P73, P75, P76, P78 } NodeP12 { P4, P5, P40, P48, P52, P61, P64, P77 } NodeP13 { P6, P11, P18, P30, P37, P43, P44, P57, P70, P73, P75, P76, P78 } NodeP14 { P7, P8, P9, P16, P46, P53, P58, P73 } NodeP15 { P21, P23, P31, P32, P48, P49, P55, P63, P79 } NodeP16 { P7, P8, P9, P14, P46, P58, P73 } NodeP17 { P20, P26, P34, P36, P45, P59, P62, P65, P67, P71 } NodeP18 { P6, P13, P30, P43, P44, P57, P73, P75 } NodeP19 { P2, P10, P26, P34, P36, P42, P45, P50, P51, P54, P60, P65, P72, P74 } NodeP20 { P17, P23, P26, P28, P34, P36, P45, P59, P62, P65, P67, P71 } NodeP21 { P15, P23, P28, P31, P32, P38, P40, P47, P49, P55, P63, P72, P77, P79 } NodeP22 { P3, P25, P27, P29, P33, P35, P51, P60, P68 } NodeP23 { P15, P20, P21, P28, P31, P32, P49, P55, P63, P67, P71, P79 } NodeP24 { P3, P29, P33, P66, P68, P80 } NodeP25 { P1, P2, P3, P22, P29, P33, P38, P39, P41, P51, P54, P56, P60, P69, P78 } NodeP26 { P10, P17, P19, P20, P28, P34, P36, P42, P45, P50, P59, P62, P65, P67, P71, P72, P74 } NodeP27 { P22, P35, P51, P60 } NodeP28 { P20, P21, P23, P26, P31, P32, P34, P38, P45, P47, P49, P50, P55, P56, P63, P65, P67, P71, P72, P79 } NodeP29 { P1, P2, P3, P11, P22, P24, P25, P33, P39, P41, P51, P54, P60, P66, P69, P78 } NodeP30 { P6, P11, P13, P18, P37, P39, P41, P44, P57, P66, P69, P70, P73, P75, P76, P78 } NodeP31 { P15, P21, P23, P28, P32, P49, P55, P63, P67, P71, P79 } NodeP32 { P15, P21, P23, P28, P31, P40, P47, P49, P52, P55, P63, P77, P79 } NodeP33 { P1, P3, P11, P22, P24, P25, P29, P39, P41, P60, P66, P70, P80 } NodeP34 { P10, P17, P19, P20, P26, P28, P36, P42, P45, P50, P59, P62, P65, P67, P71, P74 } NodeP35 { P22, P27, P68 } NodeP36 { P10, P17, P19, P20, P26, P34, P42, P45, P50, P59, P62, P65, P71, P74 } NodeP37 { P1, P7, P8, P9, P11, P13, P30, P39, P41, P44, P53, P66, P70, P73, P75, P76, P78 } NodeP38 { P1, P2, P21, P25, P28, P47, P50, P54, P55, P56, P69, P72, P76, P78, P79 } NodeP39 { P1, P3, P11, P25, P29, P30, P33, P37, P41, P44, P53, P54, P66, P69, P70, P73, P75, P76, P78 } NodeP40 { P4, P5, P12, P21, P32, P48, P52, P61, P64, P77 } NodeP41 { P1, P3, P11, P25, P29, P30, P33, P37, P39, P44, P54, P66, P69, P70, P75, P76, P78 } NodeP42 { P2, P10, P19, P26, P34, P36, P45, P50, P51, P54, P60, P65, P72, P74 } NodeP43 { P5, P6, P13, P18, P57, P64 } NodeP44 { P1, P6, P11, P13, P18, P30, P37, P39, P41, P66, P69, P70, P73, P75, P76, P78 } NodeP45 { P10, P17, P19, P20, P26, P28, P34, P36, P42, P50, P59, P62, P65, P67, P71 } NodeP46 { P9, P14, P16, P58 } NodeP47 { P21, P28, P32, P38, P49, P50, P54, P55, P56, P69, P72, P76, P77, P78, P79 } NodeP48 { P4, P12, P15, P40, P52, P61 } NodeP49 { P15, P21, P23, P28, P31, P32, P47, P55, P63, P77, P79 } NodeP50 { P2, P10, P19, P26, P28, P34, P36, P38, P42, P45, P47, P54, P56, P65, P72, P74, P79 } NodeP51 { P2, P19, P22, P25, P27, P29, P42, P60, P74 } NodeP52 { P4, P5, P12, P32, P40, P48, P61, P64, P77 } NodeP53 { P7, P8, P9, P11, P14, P37, P39, P66, P70, P73, P75, P80 } NodeP54 { P1, P2, P19, P25, P29, P38, P39, P41, P42, P47, P50, P56, P60, P69, P72, P74, P76, P78 } NodeP55 { P15, P21, P23, P28, P31, P32, P38, P47, P49, P56, P63, P72, P77, P79 } NodeP56 { P1, P2, P25, P28, P38, P47, P50, P54, P55, P69, P72, P76, P78, P79 } NodeP57 { P6, P13, P18, P30, P43, P73 } NodeP58 { P7, P9, P14, P16, P46 } NodeP59 { P17, P20, P26, P34, P36, P45, P62, P65, P67, P71 } NodeP60 { P1, P2, P3, P19, P22, P25, P27, P29, P33, P42, P51, P54, P69, P74 } NodeP61 { P4, P5, P12, P40, P48, P52, P64 } NodeP62 { P17, P20, P26, P34, P36, P45, P59, P65, P67, P71 } NodeP63 { P15, P21, P23, P28, P31, P32, P49, P55, P67, P71, P72, P79 } NodeP64 { P5, P12, P40, P43, P52, P61, P77 } NodeP65 { P10, P17, P19, P20, P26, P28, P34, P36, P42, P45, P50, P59, P62, P67, P71, P72, P74 } NodeP66 { P1, P3, P7, P8, P11, P24, P29, P30, P33, P37, P39, P41, P44, P53, P70, P73, P75, P80 } NodeP67 { P17, P20, P23, P26, P28, P31, P34, P45, P59, P62, P63, P65, P71, P79 } NodeP68 { P3, P22, P24, P35 } NodeP69 { P1, P2, P11, P25, P29, P30, P38, P39, P41, P44, P47, P54, P56, P60, P70, P72, P76, P78 } NodeP70 { P1, P7, P8, P11, P13, P30, P33, P37, P39, P41, P44, P53, P66, P69, P73, P75, P76, P78 } NodeP71 { P17, P20, P23, P26, P28, P31, P34, P36, P45, P59, P62, P63, P65, P67, P79 } NodeP72 { P2, P19, P21, P26, P28, P38, P42, P47, P50, P54, P55, P56, P63, P65, P69, P74, P79 } NodeP73 { P6, P7, P8, P9, P11, P13, P14, P16, P18, P30, P37, P39, P44, P53, P57, P66, P70, P75 } NodeP74 { P2, P10, P19, P26, P34, P36, P42, P50, P51, P54, P60, P65, P72 } NodeP75 { P1, P6, P11, P13, P18, P30, P37, P39, P41, P44, P53, P66, P70, P73, P76, P78 } NodeP76 { P1, P11, P13, P30, P37, P38, P39, P41, P44, P47, P54, P56, P69, P70, P75, P78 } NodeP77 { P5, P12, P21, P32, P40, P47, P49, P52, P55, P64 } NodeP78 { P1, P11, P13, P25, P29, P30, P37, P38, P39, P41, P44, P47, P54, P56, P69, P70, P75, P76 } NodeP79 { P15, P21, P23, P28, P31, P32, P38, P47, P49, P50, P55, P56, P63, P67, P71, P72 } NodeP80 { P3, P7, P8, P24, P33, P53, P66 } Node0</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="fondDeRade">fondDeRademessages none  defined. P1 { P2, P16 } NodeP2 { P1, P3, P14, P15, P16 } NodeP3 { P2, P14, P15, P16 } NodeP4 { P5, P12, P13 } NodeP5 { P4, P6, P11, P12, P13 } NodeP6 { P5, P7, P10, P11, P12 } NodeP7 { P6, P8, P9, P10, P11 } NodeP8 { P7, P9, P10 } NodeP9 { P7, P8, P10 } NodeP10 { P6, P7, P8, P9, P11, P12 } NodeP11 { P5, P6, P7, P10, P12 } NodeP12 { P4, P5, P6, P10, P11, P13 } NodeP13 { P4, P5, P12 } NodeP14 { P2, P3, P15 } NodeP15 { P2, P3, P14, P16 } NodeP16 { P1, P2, P3, P15 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="testCuda1">testCuda1messages none  defined. P1 { P3, P12, P13, P15, P20, P21 } Node (739 @ 345) (180)P2 { P4, P7, P8, P11, P13, P20, P22 } Node (503 @ 291) (180)P3 { P1, P12, P14, P21 } Node (724 @ 504) (180)P4 { P2, P7, P11, P22 } Node (411 @ 276) (180)P5 { P9, P10, P16, P19 } Node (238 @ 668) (180)P6 { P24 } Node (248 @ 414) (180)P7 { P2, P4, P8, P11, P22 } Node (468 @ 276) (180)P8 { P2, P7, P13, P15, P20, P22 } Node (615 @ 202) (180)P9 { P5, P16, P19 } Node (175 @ 644) (180)P10 { P5, P17 } Node (401 @ 684) (180)P11 { P2, P4, P7, P22, P24 } Node (400 @ 307) (180)P12 { P1, P3, P13, P15, P21 } Node (755 @ 415) (180)P13 { P1, P2, P8, P12, P15, P20, P21, P22 } Node (677 @ 267) (180)P14 { P3, P17 } Node (714 @ 593) (180)P15 { P1, P8, P12, P13, P20, P21 } Node (744 @ 305) (180)P16 { P5, P9, P19 } Node (194 @ 642) (180)P17 { P10, P14 } Node (580 @ 698) (180)P19 { P5, P9, P16 } Node (74 @ 633) (180)P20 { P1, P2, P8, P13, P15, P21, P22 } Node (665 @ 232) (180)P21 { P1, P3, P12, P13, P15, P20 } Node (722 @ 390) (180)P22 { P2, P4, P7, P8, P11, P13, P20 } Node (532 @ 246) (180)P24 { P6, P11 } Node (421 @ 456) (180)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="molene">molenemessages none  defined. P1 { P2, P15, P16 } Node (250 @ 50) (80)P2 { P1, P15 } Node (213 @ 90) (80)P3 { P4, P17, P18 } Node (274 @ 175) (80)P4 { P3, P18 } Node (292 @ 220) (80)P5 { P6 } Node (310 @ 305) (80)P6 { P5, P7 } Node (274 @ 350) (80)P7 { P6, P8 } Node (231 @ 383) (80)P8 { P7 } Node (197 @ 407) (80)P9 { P10 } Node (125 @ 370) (80)P10 { P9, P11 } Node (73 @ 322) (80)P11 { P10, P12 } Node (78 @ 253) (80)P12 { P11, P13 } Node (42 @ 182) (80)P13 { P12, P14 } Node (62 @ 121) (80)P14 { P13, P15 } Node (122 @ 74) (80)P15 { P1, P2, P14 } Node (182 @ 63) (80)P16 { P1, P17, P23, P24 } Node (314 @ 81) (80)P17 { P3, P16, P18, P19, P20 } Node (315 @ 140) (80)P18 { P3, P4, P17, P19, P20 } Node (348 @ 183) (80)P19 { P17, P18, P20 } Node (386 @ 176) (80)P20 { P17, P18, P19, P21, P23, P24 } Node (388 @ 118) (80)P21 { P20, P22 } Node (458 @ 87) (80)P22 { P21, P23, P24 } Node (428 @ 45) (80)P23 { P16, P20, P22, P24 } Node (380 @ 39) (80)P24 { P16, P20, P22, P23 } Node (351 @ 61) (80)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="lolo">lolomessages null.p1 { p2 } nodep2 { p1 } node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange100Points200">genRange100Points200messages none  defined. P1 { P22, P60, P72, P82, P164, P180, P193 } Node (91 @ 30)P2 { P21, P57, P116, P129, P133, P155, P174 } Node (609 @ 374)P3 { P26, P44, P88, P154, P161 } Node (92 @ 276) (100)P4 { P27, P130 } Node (649 @ 590) (100)P5 { P42, P59, P71, P108, P136, P149, P181, P184 } Node (190 @ 596) (100)P6 { P18, P84, P91, P150 } Node (652 @ 27) (100)P7 { P8, P30, P48, P77, P106, P124, P151, P195 } Node (743 @ 276) (100)P8 { P7, P57, P77, P106, P133, P138, P146, P195 } Node (665 @ 281) (100)P9 { P52, P63, P68, P73, P90, P104, P117, P118, P139, P140, P142 } Node (352 @ 827) (100)P10 { P98, P137, P147, P173 } Node (257 @ 281) (100)P11 { P146 } Node (583 @ 184) (100)P12 { P44, P112, P120, P169 } Node (6 @ 394) (100)P13 { P15, P114, P199 } Node (224 @ 995) (100)P14 { P32, P37, P51, P66, P96, P160 } Node (972 @ 840) (100)P15 { P13, P64, P199 } Node (152 @ 995) (100)P16 { P17, P71, P108, P184 } Node (123 @ 722) (100)P17 { P16 } Node (43 @ 665) (100)P18 { P6, P75, P84, P91, P150 } Node (638 @ 93) (100)P19 { P37, P107, P162, P167 } Node (832 @ 716) (100)P20 { P91, P100, P132, P177, P182 } Node (765 @ 41) (100)P21 { P2, P93, P110, P116, P123, P146, P155 } Node (555 @ 294) (100)P22 { P1, P60, P82, P164, P193 } Node (27 @ 20) (100)P23 { P95, P101, P145, P190 } Node (966 @ 628) (100)P24 { P49, P52, P54, P68, P90, P128, P135, P148, P153, P165, P185 } Node (485 @ 809) (100)P25 { P31, P157, P163, P173, P183, P191 } Node (363 @ 155) (100)P26 { P3, P44, P88, P154, P161 } Node (83 @ 240) (100)P27 { P4, P130 } Node (658 @ 682) (100)P28 { P41, P63, P73, P99, P104, P114, P117, P139, P140 } Node (309 @ 919) (100)P29 { P33, P47, P81 } Node (656 @ 857) (100)P30 { P7, P48, P62, P75, P77, P106, P124, P138, P151, P195, P198 } Node (778 @ 218) (100)P31 { P25, P97, P157, P163, P173, P183, P191 } Node (398 @ 169) (100)P32 { P14, P35, P61, P66, P69, P96, P160 } Node (906 @ 909) (100)P33 { P29, P54, P185 } Node (583 @ 865) (100)P34 { P79, P137, P173 } Node (360 @ 332) (100)P35 { P32, P58, P61, P69, P109, P113 } Node (839 @ 960) (100)P36 { P58 } Node (696 @ 970) (100)P37 { P14, P19, P107, P160 } Node (907 @ 774) (100)P38 { P72, P76, P82, P164, P175, P193 } Node (126 @ 132) (100)P39 { P46, P59, P65, P112, P120, P125, P169, P172, P178 } Node (82 @ 498) (100)P40 { P62 } Node (936 @ 154) (100)P41 { P28, P52, P63, P73, P99, P104, P140, P158 } Node (363 @ 943) (100)P42 { P5, P71, P83, P103, P108, P136, P181, P184 } Node (230 @ 609) (100)P43 { P70, P78, P102, P127, P141, P192, P200 } Node (482 @ 548) (100)P44 { P3, P12, P26, P88, P112, P144, P161 } Node (61 @ 313) (100)P45 { P53, P92, P171, P179, P188, P189 } Node (779 @ 497) (100)P46 { P39, P112, P120, P143, P144, P172, P178 } Node (152 @ 438) (100)P47 { P29, P58, P61, P69, P81, P109, P113, P187 } Node (752 @ 844) (100)P48 { P7, P30, P62, P124, P198 } Node (808 @ 218) (100)P49 { P24, P67, P128, P148 } Node (525 @ 751) (100)P50 { P86, P119, P196 } Node (914 @ 367) (100)P51 { P14, P66, P96, P160 } Node (985 @ 842) (100)P52 { P9, P24, P41, P63, P68, P90, P117, P128, P135, P140, P153, P158, P165 } Node (415 @ 866) (100)P53 { P45, P80, P179, P188, P189 } Node (716 @ 468) (100)P54 { P24, P33, P128, P135, P153, P165, P185 } Node (539 @ 855) (100)P55 { P83, P103, P168, P176, P192 } Node (369 @ 627) (100)P56 { P78, P79, P103, P115, P159, P168, P181 } Node (345 @ 495) (100)P57 { P2, P8, P77, P80, P129, P133, P146 } Node (657 @ 338) (100)P58 { P35, P36, P47, P61, P69, P109, P113, P187 } Node (785 @ 937) (100)P59 { P5, P39, P65, P125, P149, P172, P178 } Node (106 @ 559) (100)P60 { P1, P22, P82, P164, P180, P193 } Node (79 @ 14) (100)P61 { P32, P35, P47, P58, P69, P109, P113, P187 } Node (818 @ 898) (100)P62 { P30, P40, P48, P100, P124, P182, P198 } Node (867 @ 174) (100)P63 { P9, P28, P41, P52, P68, P90, P99, P117, P140, P153, P158 } Node (382 @ 912) (100)P64 { P15, P74, P126, P199 } Node (115 @ 904) (100)P65 { P39, P59, P125, P149, P169, P178 } Node (62 @ 566) (100)P66 { P14, P32, P51, P96, P160 } Node (919 @ 890) (100)P67 { P49, P148, P192 } Node (473 @ 682) (100)P68 { P9, P24, P52, P63, P90, P117, P118, P128, P135, P140, P142, P153, P165 } Node (401 @ 839) (100)P69 { P32, P35, P47, P58, P61, P109, P113, P160, P187 } Node (820 @ 862) (100)P70 { P43, P78, P89, P102, P105, P115, P141, P159, P168, P200 } Node (447 @ 472) (100)P71 { P5, P16, P42, P108, P136, P184 } Node (184 @ 673) (100)P72 { P1, P38, P76, P82, P164, P193 } Node (105 @ 113) (100)P73 { P9, P28, P41, P104, P114, P117, P139, P140, P142 } Node (285 @ 884) (100)P74 { P64, P94, P126, P170 } Node (23 @ 886) (100)P75 { P18, P30, P77, P106, P138, P151, P195 } Node (697 @ 168) (100)P76 { P38, P72, P122, P147, P154, P175, P186 } Node (192 @ 140) (100)P77 { P7, P8, P30, P57, P75, P106, P138, P146, P151, P195 } Node (699 @ 261) (100)P78 { P43, P56, P70, P102, P115, P141, P168, P192, P200 } Node (435 @ 535) (100)P79 { P34, P56, P89, P115, P159 } Node (372 @ 402) (100)P80 { P53, P57, P129, P133, P189 } Node (725 @ 408) (100)P81 { P29, P47 } Node (675 @ 824) (100)P82 { P1, P22, P38, P60, P72, P164, P180, P193 } Node (113 @ 41) (100)P83 { P42, P55, P103, P168, P176, P181 } Node (322 @ 621) (100)P84 { P6, P18, P150 } Node (609 @ 0) (100)P85 { P87, P97, P134 } Node (482 @ 66) (100)P86 { P50, P119, P166, P196 } Node (995 @ 318) (100)P87 { P85, P134 } Node (461 @ 35) (100)P88 { P3, P26, P44, P98, P112, P143, P144, P161 } Node (117 @ 322) (100)P89 { P70, P79, P93, P105, P111, P115, P141, P159, P200 } Node (430 @ 413) (100)P90 { P9, P24, P52, P63, P68, P117, P118, P128, P139, P140, P142, P165 } Node (395 @ 823) (100)P91 { P6, P18, P20, P150 } Node (701 @ 49) (100)P92 { P45, P95, P121, P131, P179 } Node (865 @ 502) (100)P93 { P21, P89, P105, P110, P111, P116, P123, P155 } Node (483 @ 359) (100)P94 { P74, P170 } Node (56 @ 810) (100)P95 { P23, P92, P101, P121, P131, P171 } Node (906 @ 562) (100)P96 { P14, P32, P51, P66, P160 } Node (977 @ 878) (100)P97 { P31, P85, P191 } Node (491 @ 136) (100)P98 { P10, P88, P137, P147, P154 } Node (209 @ 286) (100)P99 { P28, P41, P63, P140, P158 } Node (371 @ 966) (100)P100 { P20, P62, P177, P182, P198 } Node (819 @ 118) (100)P101 { P23, P95 } Node (988 @ 571) (100)P102 { P43, P70, P78, P105, P127, P141, P174, P200 } Node (508 @ 506) (100)P103 { P42, P55, P56, P83, P168, P176, P181 } Node (313 @ 585) (100)P104 { P9, P28, P41, P73, P114, P117, P139, P140, P142 } Node (282 @ 891) (100)P105 { P70, P89, P93, P102, P110, P111, P116, P141, P174, P200 } Node (490 @ 422) (100)P106 { P7, P8, P30, P75, P77, P138, P146, P151, P195 } Node (693 @ 211) (100)P107 { P19, P37, P145, P162, P167 } Node (850 @ 716) (100)P108 { P5, P16, P42, P71, P136, P184 } Node (203 @ 688) (100)P109 { P35, P47, P58, P61, P69, P113, P187 } Node (785 @ 897) (100)P110 { P21, P93, P105, P111, P116, P123, P155 } Node (505 @ 334) (100)P111 { P89, P93, P105, P110, P116, P123, P155 } Node (486 @ 376) (100)P112 { P12, P39, P44, P46, P88, P120, P144, P169, P172 } Node (71 @ 400) (100)P113 { P35, P47, P58, P61, P69, P109, P187 } Node (784 @ 889) (100)P114 { P13, P28, P73, P104, P199 } Node (217 @ 896) (100)P115 { P56, P70, P78, P79, P89, P141, P159, P168, P200 } Node (389 @ 495) (100)P116 { P2, P21, P93, P105, P110, P111, P123, P155 } Node (527 @ 359) (100)P117 { P9, P28, P52, P63, P68, P73, P90, P104, P118, P139, P140, P142 } Node (338 @ 830) (100)P118 { P9, P68, P90, P117, P139, P142 } Node (362 @ 778) (100)P119 { P50, P86, P166, P196 } Node (920 @ 341) (100)P120 { P12, P39, P46, P112, P125, P143, P144, P169, P172, P178 } Node (94 @ 441) (100)P121 { P92, P95 } Node (932 @ 470) (100)P122 { P76, P147, P163, P175, P186, P197 } Node (255 @ 153) (100)P123 { P21, P93, P110, P111, P116, P155 } Node (522 @ 302) (100)P124 { P7, P30, P48, P62, P198 } Node (811 @ 230) (100)P125 { P39, P59, P65, P120, P149, P169, P172, P178 } Node (92 @ 529) (100)P126 { P64, P74, P199 } Node (80 @ 920) (100)P127 { P43, P102, P174 } Node (562 @ 504) (100)P128 { P24, P49, P52, P54, P68, P90, P135, P153, P165, P185 } Node (490 @ 828) (100)P129 { P2, P57, P80, P133, P174 } Node (634 @ 402) (100)P130 { P4, P27, P162, P171 } Node (715 @ 607) (100)P131 { P92, P95, P162, P171, P179 } Node (824 @ 590) (100)P132 { P20, P156, P177, P182 } Node (805 @ 18) (100)P133 { P2, P8, P57, P80, P129 } Node (683 @ 366) (100)P134 { P85, P87 } Node (499 @ 3) (100)P135 { P24, P52, P54, P68, P128, P153, P165, P185 } Node (480 @ 879) (100)P136 { P5, P42, P71, P108, P149, P184 } Node (177 @ 633) (100)P137 { P10, P34, P98, P173 } Node (272 @ 289) (100)P138 { P8, P30, P75, P77, P106, P151, P195 } Node (687 @ 191) (100)P139 { P9, P28, P73, P90, P104, P117, P118, P142, P194 } Node (300 @ 836) (100)P140 { P9, P28, P41, P52, P63, P68, P73, P90, P99, P104, P117, P158 } Node (373 @ 913) (100)P141 { P43, P70, P78, P89, P102, P105, P115, P159, P168, P200 } Node (458 @ 508) (100)P142 { P9, P68, P73, P90, P104, P117, P118, P139, P194 } Node (311 @ 808) (100)P143 { P46, P88, P120, P144 } Node (180 @ 391) (100)P144 { P44, P46, P88, P112, P120, P143, P172 } Node (118 @ 388) (100)P145 { P23, P107, P190 } Node (925 @ 661) (100)P146 { P8, P11, P21, P57, P77, P106, P155, P195 } Node (621 @ 270) (100)P147 { P10, P76, P98, P122, P154, P163, P175, P186 } Node (220 @ 202) (100)P148 { P24, P49, P67 } Node (491 @ 721) (100)P149 { P5, P59, P65, P125, P136, P178, P184 } Node (130 @ 586) (100)P150 { P6, P18, P84, P91 } Node (616 @ 71) (100)P151 { P7, P30, P75, P77, P106, P138, P195 } Node (714 @ 182) (100)P152 { P197 } Node (322 @ 12) (100)P153 { P24, P52, P54, P63, P68, P128, P135, P158, P165, P185 } Node (474 @ 902) (100)P154 { P3, P26, P76, P98, P147 } Node (169 @ 232) (100)P155 { P2, P21, P93, P110, P111, P116, P123, P146 } Node (552 @ 337) (100)P156 { P132, P177 } Node (880 @ 16) (100)P157 { P25, P31, P163, P183, P191 } Node (373 @ 123) (100)P158 { P41, P52, P63, P99, P140, P153 } Node (405 @ 954) (100)P159 { P56, P70, P79, P89, P115, P141, P168, P200 } Node (384 @ 446) (100)P160 { P14, P32, P37, P51, P66, P69, P96 } Node (916 @ 863) (100)P161 { P3, P26, P44, P88 } Node (58 @ 283) (100)P162 { P19, P107, P130, P131, P167, P171 } Node (812 @ 629) (100)P163 { P25, P31, P122, P147, P157, P173, P175, P183, P186 } Node (303 @ 167) (100)P164 { P1, P22, P38, P60, P72, P82, P180, P193 } Node (88 @ 65) (100)P165 { P24, P52, P54, P68, P90, P128, P135, P153, P185 } Node (457 @ 845) (100)P166 { P86, P119, P196 } Node (966 @ 263) (100)P167 { P19, P107, P162 } Node (828 @ 701) (100)P168 { P55, P56, P70, P78, P83, P103, P115, P141, P159, P200 } Node (379 @ 541) (100)P169 { P12, P39, P65, P112, P120, P125 } Node (21 @ 483) (100)P170 { P74, P94 } Node (7 @ 821) (100)P171 { P45, P95, P130, P131, P162, P179, P188 } Node (813 @ 589) (100)P172 { P39, P46, P59, P112, P120, P125, P144, P178 } Node (126 @ 481) (100)P173 { P10, P25, P31, P34, P137, P163, P191 } Node (343 @ 246) (100)P174 { P2, P102, P105, P127, P129 } Node (559 @ 459) (100)P175 { P38, P76, P122, P147, P163, P186, P197 } Node (224 @ 142) (100)P176 { P55, P83, P103, P192 } Node (357 @ 646) (100)P177 { P20, P100, P132, P156, P182 } Node (834 @ 45) (100)P178 { P39, P46, P59, P65, P120, P125, P149, P172 } Node (132 @ 501) (100)P179 { P45, P53, P92, P131, P171, P188, P189 } Node (771 @ 518) (100)P180 { P1, P60, P82, P164 } Node (169 @ 21) (100)P181 { P5, P42, P56, P83, P103 } Node (279 @ 557) (100)P182 { P20, P62, P100, P132, P177 } Node (816 @ 97) (100)P183 { P25, P31, P157, P163, P186, P191 } Node (361 @ 147) (100)P184 { P5, P16, P42, P71, P108, P136, P149 } Node (164 @ 643) (100)P185 { P24, P33, P54, P128, P135, P153, P165 } Node (537 @ 854) (100)P186 { P76, P122, P147, P163, P175, P183, P197 } Node (264 @ 124) (100)P187 { P47, P58, P61, P69, P109, P113 } Node (801 @ 860) (100)P188 { P45, P53, P171, P179, P189 } Node (761 @ 509) (100)P189 { P45, P53, P80, P179, P188 } Node (711 @ 491) (100)P190 { P23, P145 } Node (1000 @ 721) (100)P191 { P25, P31, P97, P157, P173, P183 } Node (409 @ 177) (100)P192 { P43, P55, P67, P78, P176 } Node (439 @ 632) (100)P193 { P1, P22, P38, P60, P72, P82, P164 } Node (82 @ 101) (100)P194 { P139, P142 } Node (221 @ 791) (100)P195 { P7, P8, P30, P75, P77, P106, P138, P146, P151 } Node (683 @ 219) (100)P196 { P50, P86, P119, P166 } Node (950 @ 282) (100)P197 { P122, P152, P175, P186 } Node (270 @ 66) (100)P198 { P30, P48, P62, P100, P124 } Node (814 @ 202) (100)P199 { P13, P15, P64, P114, P126 } Node (170 @ 952) (100)P200 { P43, P70, P78, P89, P102, P105, P115, P141, P159, P168 } Node (452 @ 502) (100)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="hang4roadsensors">hang4roadsensorsmessages none  defined. P1 { P2 } Node (6 @ 176) (50)P2 { P1, P3 } Node (51 @ 180) (50)P3 { P2, P4 } Node (92 @ 189) (50)P4 { P3, P5 } Node (135 @ 207) (50)P5 { P4, P6 } Node (162 @ 243) (50)P6 { P5, P7, P8, P9, P10 } Node (200 @ 253) (50)P7 { P6, P8, P9 } Node (213 @ 276) (50)P8 { P6, P7, P9, P10 } Node (236 @ 274) (50)P9 { P6, P7, P8, P10, P11 } Node (237 @ 249) (50)P10 { P6, P8, P9, P11, P12 } Node (234 @ 227) (50)P11 { P9, P10, P12, P13 } Node (237 @ 205) (50)P12 { P10, P11, P13 } Node (253 @ 193) (50)P13 { P11, P12, P14, P15 } Node (252 @ 165) (50)P14 { P13, P15 } Node (249 @ 138) (50)P15 { P13, P14, P16 } Node (246 @ 121) (50)P16 { P15, P17, P22 } Node (241 @ 88) (50)P17 { P16, P18, P21, P22 } Node (244 @ 65) (50)P18 { P17, P19, P20, P21, P22 } Node (252 @ 32) (50)P19 { P18, P20, P21 } Node (272 @ 9) (50)P20 { P18, P19, P21 } Node (246 @ 7) (50)P21 { P17, P18, P19, P20, P22 } Node (234 @ 30) (50)P22 { P16, P17, P18, P21 } Node (229 @ 62) (50)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange30Points600">genRange30Points600messages none  defined. P1 { P385, P399, P508, P545 } NodeP2 { P175 } NodeP3 { P210, P526 } NodeP4 { P226, P288, P354 } NodeP5 { P107, P394, P423, P532, P565 } NodeP6 { P35, P150, P241, P303, P322, P424, P435 } NodeP7 { P131, P292, P314 } NodeP8 { P63, P71, P238, P249, P488, P490, P517 } NodeP9 { P340, P396, P400 } NodeP10 { P200, P390, P476 } NodeP11 { P171, P444, P465 } NodeP12 { P140, P368, P440 } NodeP13 { P50, P114, P183, P463, P512 } NodeP14 { P68, P77 } NodeP15 { P275, P585 } NodeP16 { P119, P144, P170, P279, P287, P343, P595 } NodeP17 { P118, P515 } NodeP18 { P34, P50, P83, P113, P151, P162, P281, P331, P413, P462, P583 } NodeP19 { P123, P284 } NodeP20 { P120, P250, P414 } NodeP21 { P166, P473 } NodeP22 { P180, P184, P416 } NodeP23 { P188, P531 } NodeP24 { P135, P167, P212, P420 } NodeP25 { P315, P361, P406, P448 } NodeP26 { P136, P474 } NodeP27 { P35, P175, P179 } NodeP28 { P406 } NodeP29 { P484 } NodeP30 { P379, P506 } NodeP31 { P92, P146, P176, P262, P422 } NodeP32 { P163, P213, P439, P592 } NodeP33 { P199, P208, P229, P412, P515 } NodeP34 { P18, P64, P83, P113, P151, P162, P281, P413, P462, P583 } NodeP35 { P6, P27, P175, P179, P295, P424 } NodeP36 { P375, P572 } NodeP37 { P537, P543 } NodeP38 { P154, P579 } NodeP39 { P226, P354, P458 } NodeP40 { P59, P61, P75, P476 } NodeP41 { P65, P126 } NodeP42 { P100 } NodeP43 { P182, P310, P376 } NodeP44 { P74, P204 } NodeP45 { P168, P274 } NodeP46 { P542, P555 } NodeP47 { P62, P177, P180, P285, P398 } NodeP48 { P76, P345, P377, P521 } NodeP49 { P173, P218, P352, P470, P564 } NodeP50 { P13, P18, P83, P114, P151, P281, P331, P413, P512 } NodeP51 { P56, P442 } NodeP52 { P55, P548 } NodeP53 { P178, P294, P312 } NodeP54 { P331, P482, P519 } NodeP55 { P52, P82, P342, P548 } NodeP56 { P51, P81, P132, P268 } NodeP57 { P97, P141, P363, P411, P489, P497, P507 } NodeP58 { P80, P259, P330, P580 } NodeP59 { P40, P61, P75 } NodeP60 { P76, P137, P156, P255, P521 } NodeP61 { P40, P59, P75, P179 } NodeP62 { P47, P177, P180, P278, P285, P398, P567 } NodeP63 { P8, P141, P198, P238, P490 } NodeP64 { P34, P113, P162, P386, P417, P462, P583 } NodeP65 { P41, P116, P126, P206 } NodeP66 { P502 } NodeP67 { P90, P267, P358 } NodeP68 { P14, P77, P200, P469 } NodeP69 { P142, P176, P262, P450 } NodeP70 { P165, P236, P258, P297, P302, P326, P332, P392 } NodeP71 { P8, P210, P249, P356, P488, P517 } NodeP72 { P101, P421, P431 } NodeP73 { P99, P260, P405 } NodeP74 { P44, P84, P117, P164, P204, P383 } NodeP75 { P40, P59, P61, P476 } NodeP76 { P48, P60, P137, P255, P345, P391, P521 } NodeP77 { P14, P68, P389 } NodeP78 { P370 } NodeP79 { P224, P295, P397 } NodeP80 { P58, P247, P259, P330, P580 } NodeP81 { P56, P268, P385 } NodeP82 { P55, P342, P560 } NodeP83 { P18, P34, P50, P114, P151, P281, P331, P413, P512 } NodeP84 { P74, P164, P204, P383, P592 } NodeP85 { P234, P308, P324, P528 } NodeP86 { P242, P524 } NodeP87 { P203, P549 } NodeP88 { P94, P325, P451, P499, P551 } NodeP89 { P112, P153 } NodeP90 { P67, P358 } NodeP91 { P492 } NodeP92 { P31, P103, P146, P176, P262, P527 } NodeP93 { P98, P174, P189, P339, P594 } NodeP94 { P88, P499 } NodeP95 { P220, P300, P347, P401, P441, P479, P519 } NodeP96 { P130, P255, P455 } NodeP97 { P57, P141, P363, P411, P486, P497 } NodeP98 { P93, P174, P189, P339, P566 } NodeP99 { P73, P166, P260, P393, P405 } NodeP100 { P42, P520, P582 } NodeP101 { P72, P221, P373, P460, P541 } NodeP102 { P160, P454 } NodeP103 { P92, P262, P527 } NodeP104 { P219, P441, P506, P553 } NodeP105 { P195, P355 } NodeP106 { P205, P217, P230, P265, P466 } NodeP107 { P5, P177, P285, P394, P423, P532, P565, P572 } NodeP108 { P196, P216, P409 } NodeP109 { P201, P431 } NodeP110 { P122, P432, P485, P570 } NodeP111 { P147, P215, P248, P251, P464, P533 } NodeP112 { P89, P153, P232, P523 } NodeP113 { P18, P34, P64, P151, P162, P281, P413, P462, P583 } NodeP114 { P13, P50, P83, P281, P331, P463, P482, P512 } NodeP115 { P538, P552, P581 } NodeP116 { P65, P126, P276, P422 } NodeP117 { P74, P164 } NodeP118 { P17, P412, P515 } NodeP119 { P16, P144, P170, P279, P287, P343 } NodeP120 { P20, P414 } NodeP121 { P197, P283, P348, P364, P459, P504 } NodeP122 { P110, P432, P485, P570 } NodeP123 { P19, P231, P290 } NodeP124 { P138, P313, P351, P411 } NodeP125 { P217, P404 } NodeP126 { P41, P65, P116, P206, P276 } NodeP127 { P279, P425, P595 } NodeP128 { P245, P456, P553 } NodeP129 { P344, P415 } NodeP130 { P96, P455 } NodeP131 { P7, P143, P149, P168, P209, P292, P296 } NodeP132 { P56, P402 } NodeP133 { P172, P584 } NodeP134 { P139, P349, P418, P531 } NodeP135 { P24, P167, P212, P381, P420 } NodeP136 { P26, P474, P554, P582 } NodeP137 { P60, P76, P156, P255, P391, P521 } NodeP138 { P124, P250 } NodeP139 { P134, P188, P240, P349, P418, P531 } NodeP140 { P12, P368, P385 } NodeP141 { P57, P63, P97, P238, P363, P497 } NodeP142 { P69, P371, P450 } NodeP143 { P131, P149, P209, P292, P574 } NodeP144 { P16, P119, P170, P279, P287, P343, P595 } NodeP145 { P187, P214, P314, P316, P475, P598 } NodeP146 { P31, P92, P176, P422, P522 } NodeP147 { P111, P215, P248, P251, P464, P533 } NodeP148 { P362, P379, P380, P430 } NodeP149 { P131, P143, P209, P491 } NodeP150 { P6, P179, P303, P424, P435, P451, P499, P551 } NodeP151 { P18, P34, P50, P83, P113, P281, P324, P413 } NodeP152 { P159, P301, P389 } NodeP153 { P89, P112 } NodeP154 { P38, P248, P533 } NodeP155 { P181, P366, P573 } NodeP156 { P60, P137, P350, P391, P496 } NodeP157 { P161, P231, P233, P307, P446, P543 } NodeP158 { P224 } NodeP159 { P152, P202, P301, P360 } NodeP160 { P102, P454 } NodeP161 { P157, P233, P307, P446, P543 } NodeP162 { P18, P34, P64, P113, P386, P413, P417, P462, P583 } NodeP163 { P32, P270, P317, P439, P590 } NodeP164 { P74, P84, P117, P383 } NodeP165 { P70, P297, P332, P365 } NodeP166 { P21, P99, P280, P393, P473, P539 } NodeP167 { P24, P135, P420 } NodeP168 { P45, P131, P274, P296 } NodeP169 { P536 } NodeP170 { P16, P119, P144, P279, P287, P595 } NodeP171 { P11, P222, P444, P465 } NodeP172 { P133, P584 } NodeP173 { P49, P218, P352, P470, P564 } NodeP174 { P93, P98, P189, P278, P339, P567 } NodeP175 { P2, P27, P35 } NodeP176 { P31, P69, P92, P146, P262, P422, P450 } NodeP177 { P47, P62, P107, P285, P375, P398, P423, P532, P565, P572 } NodeP178 { P53, P294, P312, P546 } NodeP179 { P27, P35, P61, P150 } NodeP180 { P22, P47, P62, P184, P285, P398, P416 } NodeP181 { P155, P223, P366, P483 } NodeP182 { P43, P263, P310 } NodeP183 { P13, P318, P453, P463, P480 } NodeP184 { P22, P180, P285, P416 } NodeP185 { P191, P304, P305, P429, P569, P599 } NodeP186 { P321 } NodeP187 { P145, P214, P316, P475, P598 } NodeP188 { P23, P139, P418, P531 } NodeP189 { P93, P98, P174, P278, P339, P567 } NodeP190 { P193, P367, P524 } NodeP191 { P185, P304, P305, P334, P429, P569, P599 } NodeP192 { P282, P323, P562 } NodeP193 { P190, P367, P404, P524 } NodeP194 { P225, P319, P467 } NodeP195 { P105, P254, P410, P436 } NodeP196 { P108, P216, P409 } NodeP197 { P121, P283, P299, P348, P364, P459, P504 } NodeP198 { P63, P238, P490 } NodeP199 { P33, P229 } NodeP200 { P10, P68, P390 } NodeP201 { P109, P431 } NodeP202 { P159, P301, P360, P495 } NodeP203 { P87, P549 } NodeP204 { P44, P74, P84, P383, P592 } NodeP205 { P106, P217, P230, P265, P466 } NodeP206 { P65, P126, P276, P421, P438 } NodeP207 { P446 } NodeP208 { P33, P412, P509, P515 } NodeP209 { P131, P143, P149, P292, P491, P574 } NodeP210 { P3, P71, P249, P488, P517, P526 } NodeP211 { P244, P309, P329, P395 } NodeP212 { P24, P135, P333, P381, P420 } NodeP213 { P32, P341, P590 } NodeP214 { P145, P187, P316, P475, P598 } NodeP215 { P111, P147, P248, P251, P464, P533 } NodeP216 { P108, P196, P409, P575 } NodeP217 { P106, P125, P205, P230, P265, P466 } NodeP218 { P49, P173, P352, P470, P564 } NodeP219 { P104, P300 } NodeP220 { P95, P347, P401, P441, P479, P588 } NodeP221 { P101, P373, P460, P477, P525, P541 } NodeP222 { P171, P444, P465 } NodeP223 { P181 } NodeP224 { P79, P158, P295, P397 } NodeP225 { P194, P261, P319, P382, P505 } NodeP226 { P4, P39, P288, P354 } NodeP228 { P369, P384, P447 } NodeP229 { P33, P199, P412, P515 } NodeP230 { P106, P205, P217, P265, P466 } NodeP231 { P123, P157, P233, P446 } NodeP232 { P112, P381, P491, P523 } NodeP233 { P157, P161, P231, P307, P446, P543 } NodeP234 { P85, P298, P308, P324, P528, P540 } NodeP235 { P269, P293, P336, P346, P427 } NodeP236 { P70, P258 } NodeP237 { P318, P453, P463, P478, P480 } NodeP238 { P8, P63, P141, P198, P363, P490 } NodeP239 { P371, P586 } NodeP240 { P139 } NodeP241 { P6, P303, P322, P424, P435 } NodeP242 { P86, P289 } NodeP243 { P394, P530, P532 } NodeP244 { P211, P309 } NodeP245 { P128, P456, P587 } NodeP246 { P373 } NodeP247 { P80, P578, P580 } NodeP248 { P111, P147, P154, P215, P251, P533 } NodeP249 { P8, P71, P210, P356, P488, P517 } NodeP250 { P20, P138 } NodeP251 { P111, P147, P215, P248, P464, P533, P549 } NodeP252 { P568 } NodeP253 { P377, P489, P507, P516, P534 } NodeP254 { P195, P410, P415, P436 } NodeP255 { P60, P76, P96, P137, P455, P521 } NodeP256 { P419, P433, P514, P556 } NodeP257 { P550 } NodeP258 { P70, P236, P302, P392 } NodeP259 { P58, P80, P330, P379, P430 } NodeP260 { P73, P99, P405, P510 } NodeP261 { P225, P382, P505, P561 } NodeP262 { P31, P69, P92, P103, P176, P450, P527 } NodeP263 { P182 } NodeP264 { P277, P286, P469, P596 } NodeP265 { P106, P205, P217, P230, P311, P466, P501, P589 } NodeP266 { P486, P489, P507, P562 } NodeP267 { P67, P538, P581 } NodeP268 { P56, P81, P385 } NodeP269 { P235, P293, P336, P346, P407 } NodeP270 { P163, P317, P447 } NodeP271 { P547 } NodeP272 { P376, P468, P471, P484 } NodeP274 { P45, P168, P296 } NodeP275 { P15, P585 } NodeP276 { P116, P126, P206, P422 } NodeP277 { P264, P286, P390, P469, P596 } NodeP278 { P62, P174, P189, P339 } NodeP279 { P16, P119, P127, P144, P170, P287, P595 } NodeP280 { P166, P393, P452, P473, P539, P559 } NodeP281 { P18, P34, P50, P83, P113, P114, P151, P331, P413, P512, P583 } NodeP282 { P192, P351, P428, P586 } NodeP283 { P121, P197, P348, P364, P459, P504 } NodeP284 { P19, P457 } NodeP285 { P47, P62, P107, P177, P180, P184, P398, P423, P565 } NodeP286 { P264, P277, P390, P469, P596 } NodeP287 { P16, P119, P144, P170, P279, P343, P353 } NodeP288 { P4, P226, P458 } NodeP289 { P242, P328 } NodeP290 { P123 } NodeP292 { P7, P131, P143, P209, P574 } NodeP293 { P235, P269, P336, P386, P417, P427 } NodeP294 { P53, P178, P312, P449, P477 } NodeP295 { P35, P79, P224 } NodeP296 { P131, P168, P274 } NodeP297 { P70, P165, P302, P326, P332, P392 } NodeP298 { P234, P308, P358, P528 } NodeP299 { P197, P364, P459, P504 } NodeP300 { P95, P219, P482, P519 } NodeP301 { P152, P159, P202, P360 } NodeP302 { P70, P258, P297, P326, P392 } NodeP303 { P6, P150, P241, P322, P424, P435 } NodeP304 { P185, P191, P305, P334, P365, P569, P579 } NodeP305 { P185, P191, P304, P365, P429, P569 } NodeP306 { P520 } NodeP307 { P157, P161, P233, P471, P543 } NodeP308 { P85, P234, P298, P528 } NodeP309 { P211, P244, P329, P395 } NodeP310 { P43, P182, P374 } NodeP311 { P265, P501, P589 } NodeP312 { P53, P178, P294, P477 } NodeP313 { P124, P351, P411, P486, P562 } NodeP314 { P7, P145 } NodeP315 { P25, P406 } NodeP316 { P145, P187, P214, P475, P598 } NodeP317 { P163, P270, P447 } NodeP318 { P183, P237, P453, P461, P478, P480 } NodeP319 { P194, P225, P467, P505, P577 } NodeP320 { P566, P591 } NodeP321 { P186 } NodeP322 { P6, P241, P303, P424, P435 } NodeP323 { P192, P472, P527 } NodeP324 { P85, P151, P234, P349 } NodeP325 { P88, P341, P499, P551 } NodeP326 { P70, P297, P302, P332, P392 } NodeP327 { P409, P434 } NodeP328 { P289, P511 } NodeP329 { P211, P309, P395 } NodeP330 { P58, P80, P259, P578, P580, P600 } NodeP331 { P18, P50, P54, P83, P114, P281 } NodeP332 { P70, P165, P297, P326, P392 } NodeP333 { P212, P511 } NodeP334 { P191, P304, P579 } NodeP335 { P384 } NodeP336 { P235, P269, P293, P386, P417, P427 } NodeP337 { P359, P378, P388, P426, P437 } NodeP338 { P461, P513 } NodeP339 { P93, P98, P174, P189, P278 } NodeP340 { P9, P400, P432 } NodeP341 { P213, P325, P451, P499, P551 } NodeP342 { P55, P82, P560 } NodeP343 { P16, P119, P144, P287, P353 } NodeP344 { P129 } NodeP345 { P48, P76, P521 } NodeP346 { P235, P269, P407, P544 } NodeP347 { P95, P220, P441, P588 } NodeP348 { P121, P197, P283, P364, P459, P597 } NodeP349 { P134, P139, P324, P418, P531 } NodeP350 { P156, P496 } NodeP351 { P124, P282, P313, P411, P428, P486, P562, P586 } NodeP352 { P49, P173, P218, P470, P564 } NodeP353 { P287, P343, P360, P500, P503 } NodeP354 { P4, P39, P226, P458, P587 } NodeP355 { P105 } NodeP356 { P71, P249, P576 } NodeP357 { P403, P494, P563 } NodeP358 { P67, P90, P298 } NodeP359 { P337, P378, P437, P487, P546 } NodeP360 { P159, P202, P301, P353, P503 } NodeP361 { P25, P448 } NodeP362 { P148, P379, P380, P430 } NodeP363 { P57, P97, P141, P238, P497 } NodeP364 { P121, P197, P283, P299, P348, P459, P504 } NodeP365 { P165, P304, P305, P429, P569 } NodeP366 { P155, P181, P483, P573 } NodeP367 { P190, P193, P524 } NodeP368 { P12, P140, P440 } NodeP369 { P228, P384, P447 } NodeP370 { P78 } NodeP371 { P142, P239 } NodeP372 { P472 } NodeP373 { P101, P221, P246, P460, P525, P541 } NodeP374 { P310 } NodeP375 { P36, P177, P423, P532, P572 } NodeP376 { P43, P272, P484 } NodeP377 { P48, P253, P516, P534, P584 } NodeP378 { P337, P359, P388, P426, P437, P487, P546 } NodeP379 { P30, P148, P259, P362, P430 } NodeP380 { P148, P362, P430 } NodeP381 { P135, P212, P232, P420, P523 } NodeP382 { P225, P261, P505, P561 } NodeP383 { P74, P84, P164, P204, P592 } NodeP384 { P228, P335, P369 } NodeP385 { P1, P81, P140, P268 } NodeP386 { P64, P162, P293, P336, P417, P427, P462 } NodeP387 { P419 } NodeP388 { P337, P378, P426 } NodeP389 { P77, P152, P443 } NodeP390 { P10, P200, P277, P286, P469, P476, P596 } NodeP391 { P76, P137, P156 } NodeP392 { P70, P258, P297, P302, P326, P332 } NodeP393 { P99, P166, P280, P473, P539 } NodeP394 { P5, P107, P243, P526, P532, P565 } NodeP395 { P211, P309, P329 } NodeP396 { P9, P400, P578, P580, P600 } NodeP397 { P79, P224 } NodeP398 { P47, P62, P177, P180, P285 } NodeP399 { P1, P508, P545 } NodeP400 { P9, P340, P396, P600 } NodeP401 { P95, P220, P479, P529, P550 } NodeP402 { P132 } NodeP403 { P357, P494, P563 } NodeP404 { P125, P193 } NodeP405 { P73, P99, P260 } NodeP406 { P25, P28, P315 } NodeP407 { P269, P346, P445, P544 } NodeP409 { P108, P196, P216, P327, P434, P575 } NodeP410 { P195, P254, P415, P436 } NodeP411 { P57, P97, P124, P313, P351, P486, P562 } NodeP412 { P33, P118, P208, P229, P515 } NodeP413 { P18, P34, P50, P83, P113, P151, P162, P281, P462, P583 } NodeP414 { P20, P120, P576 } NodeP415 { P129, P254, P410 } NodeP416 { P22, P180, P184 } NodeP417 { P64, P162, P293, P336, P386, P427, P462 } NodeP418 { P134, P139, P188, P349, P531 } NodeP419 { P256, P387, P514 } NodeP420 { P24, P135, P167, P212, P381 } NodeP421 { P72, P206, P438 } NodeP422 { P31, P116, P146, P176, P276 } NodeP423 { P5, P107, P177, P285, P375, P532, P565, P572 } NodeP424 { P6, P35, P150, P241, P303, P322, P435 } NodeP425 { P127 } NodeP426 { P337, P378, P388, P501 } NodeP427 { P235, P293, P336, P386, P417 } NodeP428 { P282, P351, P586 } NodeP429 { P185, P191, P305, P365, P569, P599 } NodeP430 { P148, P259, P362, P379, P380 } NodeP431 { P72, P109, P201 } NodeP432 { P110, P122, P340, P485, P518, P570 } NodeP433 { P256, P514 } NodeP434 { P327, P409 } NodeP435 { P6, P150, P241, P303, P322, P424, P451, P551 } NodeP436 { P195, P254, P410 } NodeP437 { P337, P359, P378, P487, P546 } NodeP438 { P206, P421, P537 } NodeP439 { P32, P163, P592 } NodeP440 { P12, P368 } NodeP441 { P95, P104, P220, P347, P588 } NodeP442 { P51, P595 } NodeP443 { P389 } NodeP444 { P11, P171, P222, P465 } NodeP445 { P407, P542, P544, P550 } NodeP446 { P157, P161, P207, P231, P233 } NodeP447 { P228, P270, P317, P369 } NodeP448 { P25, P361 } NodeP449 { P294, P525 } NodeP450 { P69, P142, P176, P262 } NodeP451 { P88, P150, P341, P435, P499, P551 } NodeP452 { P280, P473, P559 } NodeP453 { P183, P237, P318, P461, P463, P478, P480 } NodeP454 { P102, P160 } NodeP455 { P96, P130, P255 } NodeP456 { P128, P245 } NodeP457 { P284 } NodeP458 { P39, P288, P354, P591 } NodeP459 { P121, P197, P283, P299, P348, P364, P504 } NodeP460 { P101, P221, P373, P525, P541 } NodeP461 { P318, P338, P453, P513 } NodeP462 { P18, P34, P64, P113, P162, P386, P413, P417, P583 } NodeP463 { P13, P114, P183, P237, P453, P478, P480 } NodeP464 { P111, P147, P215, P251 } NodeP465 { P11, P171, P222, P444 } NodeP466 { P106, P205, P217, P230, P265 } NodeP467 { P194, P319 } NodeP468 { P272 } NodeP469 { P68, P264, P277, P286, P390, P596 } NodeP470 { P49, P173, P218, P352, P564 } NodeP471 { P272, P307, P484, P543 } NodeP472 { P323, P372, P527 } NodeP473 { P21, P166, P280, P393, P452, P559 } NodeP474 { P26, P136, P520, P554, P582 } NodeP475 { P145, P187, P214, P316, P598 } NodeP476 { P10, P40, P75, P390 } NodeP477 { P221, P294, P312, P525 } NodeP478 { P237, P318, P453, P463, P480 } NodeP479 { P95, P220, P401, P529, P550 } NodeP480 { P183, P237, P318, P453, P463, P478 } NodeP481 { P593 } NodeP482 { P54, P114, P300, P519 } NodeP483 { P181, P366 } NodeP484 { P29, P272, P376, P471 } NodeP485 { P110, P122, P432, P518, P570 } NodeP486 { P97, P266, P313, P351, P411, P562 } NodeP487 { P359, P378, P437, P546 } NodeP488 { P8, P71, P210, P249, P517 } NodeP489 { P57, P253, P266, P507, P516 } NodeP490 { P8, P63, P198, P238 } NodeP491 { P149, P209, P232, P523 } NodeP492 { P91 } NodeP494 { P357, P403, P563 } NodeP495 { P202, P535 } NodeP496 { P156, P350 } NodeP497 { P57, P97, P141, P363 } NodeP498 { P522 } NodeP499 { P88, P94, P150, P325, P341, P451, P551 } NodeP500 { P353, P503, P535 } NodeP501 { P265, P311, P426, P589 } NodeP502 { P66 } NodeP503 { P353, P360, P500, P535 } NodeP504 { P121, P197, P283, P299, P364, P459 } NodeP505 { P225, P261, P319, P382 } NodeP506 { P30, P104, P553 } NodeP507 { P57, P253, P266, P489, P516 } NodeP508 { P1, P399, P545 } NodeP509 { P208 } NodeP510 { P260 } NodeP511 { P328, P333 } NodeP512 { P13, P50, P83, P114, P281 } NodeP513 { P338, P461 } NodeP514 { P256, P419, P433, P556 } NodeP515 { P17, P33, P118, P208, P229, P412 } NodeP516 { P253, P377, P489, P507, P534, P584 } NodeP517 { P8, P71, P210, P249, P488 } NodeP518 { P432, P485, P570 } NodeP519 { P54, P95, P300, P482 } NodeP520 { P100, P306, P474, P554, P582 } NodeP521 { P48, P60, P76, P137, P255, P345 } NodeP522 { P146, P498 } NodeP523 { P112, P232, P381, P491 } NodeP524 { P86, P190, P193, P367 } NodeP525 { P221, P373, P449, P460, P477, P541 } NodeP526 { P3, P210, P394 } NodeP527 { P92, P103, P262, P323, P472 } NodeP528 { P85, P234, P298, P308 } NodeP529 { P401, P479, P550 } NodeP530 { P243, P532, P572 } NodeP531 { P23, P134, P139, P188, P349, P418 } NodeP532 { P5, P107, P177, P243, P375, P394, P423, P530, P565, P572 } NodeP533 { P111, P147, P154, P215, P248, P251 } NodeP534 { P253, P377, P516, P584 } NodeP535 { P495, P500, P503 } NodeP536 { P169 } NodeP537 { P37, P438, P543 } NodeP538 { P115, P267, P581 } NodeP539 { P166, P280, P393 } NodeP540 { P234 } NodeP541 { P101, P221, P373, P460, P525 } NodeP542 { P46, P445, P544, P555 } NodeP543 { P37, P157, P161, P233, P307, P471, P537 } NodeP544 { P346, P407, P445, P542 } NodeP545 { P1, P399, P508 } NodeP546 { P178, P359, P378, P437, P487 } NodeP547 { P271 } NodeP548 { P52, P55 } NodeP549 { P87, P203, P251 } NodeP550 { P257, P401, P445, P479, P529 } NodeP551 { P88, P150, P325, P341, P435, P451, P499 } NodeP552 { P115 } NodeP553 { P104, P128, P506 } NodeP554 { P136, P474, P520, P560, P582 } NodeP555 { P46, P542 } NodeP556 { P256, P514 } NodeP559 { P280, P452, P473 } NodeP560 { P82, P342, P554 } NodeP561 { P261, P382 } NodeP562 { P192, P266, P313, P351, P411, P486 } NodeP563 { P357, P403, P494 } NodeP564 { P49, P173, P218, P352, P470 } NodeP565 { P5, P107, P177, P285, P394, P423, P532 } NodeP566 { P98, P320, P567 } NodeP567 { P62, P174, P189, P566 } NodeP568 { P252 } NodeP569 { P185, P191, P304, P305, P365, P429, P599 } NodeP570 { P110, P122, P432, P485, P518 } NodeP572 { P36, P107, P177, P375, P423, P530, P532 } NodeP573 { P155, P366 } NodeP574 { P143, P209, P292 } NodeP575 { P216, P409 } NodeP576 { P356, P414 } NodeP577 { P319 } NodeP578 { P247, P330, P396, P580, P600 } NodeP579 { P38, P304, P334 } NodeP580 { P58, P80, P247, P330, P396, P578, P600 } NodeP581 { P115, P267, P538 } NodeP582 { P100, P136, P474, P520, P554 } NodeP583 { P18, P34, P64, P113, P162, P281, P413, P462 } NodeP584 { P133, P172, P377, P516, P534 } NodeP585 { P15, P275 } NodeP586 { P239, P282, P351, P428 } NodeP587 { P245, P354 } NodeP588 { P220, P347, P441 } NodeP589 { P265, P311, P501 } NodeP590 { P163, P213 } NodeP591 { P320, P458 } NodeP592 { P32, P84, P204, P383, P439 } NodeP593 { P481 } NodeP594 { P93 } NodeP595 { P16, P127, P144, P170, P279, P442 } NodeP596 { P264, P277, P286, P390, P469 } NodeP597 { P348 } NodeP598 { P145, P187, P214, P316, P475 } NodeP599 { P185, P191, P429, P569 } NodeP600 { P330, P396, P400, P578, P580 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cellNetwork1">cellNetwork1messages none  defined. Px11y10 { Px11y9 } CellNode (11 @ 10) (20)Px11y9 { Px11y10 } CellNode (11 @ 9) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="brestv00">brestv00messages none  defined. Px10y1 { Px9y1, Px9y2, Px11y2, Px10y2, Px11y1 } CellNode (10 @ 1) (20)Px10y10 { Px10y9, Px11y9, Px9y9, Px10y11, Px11y10, Px9y10, Px9y11, Px11y11 } CellNode (10 @ 10) (20)Px10y11 { Px9y12, Px11y12, Px11y10, Px9y10, Px10y12, Px9y11, Px11y11, Px10y10 } CellNode (10 @ 11) (20)Px10y12 { Px10y13, Px9y12, Px11y12, Px10y11, Px9y13, Px11y13, Px9y11, Px11y11 } CellNode (10 @ 12) (20)Px10y13 { Px11y14, Px9y12, Px11y12, Px10y14, Px9y13, Px11y13, Px10y12, Px9y14 } CellNode (10 @ 13) (20)Px10y14 { Px11y14, Px10y13, Px9y15, Px11y15, Px9y13, Px11y13, Px10y15, Px9y14 } CellNode (10 @ 14) (20)Px10y15 { Px11y14, Px10y16, Px9y15, Px11y15, Px10y14, Px9y16, Px11y16, Px9y14 } CellNode (10 @ 15) (20)Px10y16 { Px9y17, Px11y17, Px9y15, Px11y15, Px10y17, Px9y16, Px11y16, Px10y15 } CellNode (10 @ 16) (20)Px10y17 { Px10y18, Px9y17, Px11y17, Px10y16, Px9y18, Px11y18, Px9y16, Px11y16 } CellNode (10 @ 17) (20)Px10y18 { Px9y17, Px11y17, Px10y19, Px9y18, Px11y18, Px10y17, Px11y19, Px9y19 } CellNode (10 @ 18) (20)Px10y19 { Px10y18, Px10y20, Px11y18, Px11y20, Px9y18, Px9y20, Px9y19, Px11y19 } CellNode (10 @ 19) (20)Px10y2 { Px10y1, Px11y1, Px9y1, Px11y2, Px9y2, Px10y3, Px11y3, Px9y3 } CellNode (10 @ 2) (20)Px10y20 { Px11y21, Px9y21, Px10y21, Px10y19, Px11y20, Px9y20, Px9y19, Px11y19 } CellNode (10 @ 20) (20)Px10y21 { Px9y21, Px9y22, Px11y22, Px11y20, Px10y22, Px9y20, Px10y20, Px11y21 } CellNode (10 @ 21) (20)Px10y22 { Px10y23, Px9y21, Px10y21, Px9y22, Px11y22, Px9y23, Px11y23, Px11y21 } CellNode (10 @ 22) (20)Px10y23 { Px11y24, Px9y24, Px9y22, Px11y22, Px10y24, Px10y22, Px9y23, Px11y23 } CellNode (10 @ 23) (20)Px10y24 { Px10y23, Px11y24, Px9y24, Px11y25, Px9y25, Px11y23, Px9y23, Px10y25 } CellNode (10 @ 24) (20)Px10y25 { Px11y24, Px9y24, Px10y26, Px10y24, Px11y25, Px9y25, Px9y26, Px11y26 } CellNode (10 @ 25) (20)Px10y26 { Px11y27, Px9y27, Px11y25, Px9y25, Px10y27, Px10y25, Px9y26, Px11y26 } CellNode (10 @ 26) (20)Px10y27 { Px11y27, Px10y26, Px9y26, Px11y26, Px9y27 } CellNode (10 @ 27) (20)Px10y3 { Px10y4, Px11y4, Px10y2, Px9y4, Px11y2, Px9y2, Px11y3, Px9y3 } CellNode (10 @ 3) (20)Px10y4 { Px11y4, Px9y4, Px10y5, Px11y5, Px10y3, Px9y5, Px11y3, Px9y3 } CellNode (10 @ 4) (20)Px10y5 { Px11y6, Px9y6, Px10y4, Px11y4, Px9y4, Px11y5, Px9y5, Px10y6 } CellNode (10 @ 5) (20)Px10y6 { Px11y6, Px9y6, Px10y7, Px11y7, Px10y5, Px9y7, Px11y5, Px9y5 } CellNode (10 @ 6) (20)Px10y7 { Px11y6, Px9y6, Px11y7, Px9y7, Px10y8, Px11y8, Px10y6, Px9y8 } CellNode (10 @ 7) (20)Px10y8 { Px10y9, Px11y9, Px10y7, Px9y9, Px11y7, Px9y7, Px11y8, Px9y8 } CellNode (10 @ 8) (20)Px10y9 { Px11y9, Px9y9, Px11y10, Px9y10, Px10y8, Px11y8, Px9y8, Px10y10 } CellNode (10 @ 9) (20)Px11y1 { Px10y1, Px11y2, Px10y2, Px12y1, Px12y2 } CellNode (11 @ 1) (20)Px11y10 { Px10y9, Px12y10, Px11y9, Px12y9, Px10y11, Px12y11, Px11y11, Px10y10 } CellNode (11 @ 10) (20)Px11y11 { Px12y10, Px11y12, Px10y11, Px11y10, Px12y11, Px10y12, Px12y12, Px10y10 } CellNode (11 @ 11) (20)Px11y12 { Px10y13, Px12y13, Px10y11, Px12y11, Px11y13, Px10y12, Px11y11, Px12y12 } CellNode (11 @ 12) (20)Px11y13 { Px10y13, Px11y12, Px12y13, Px10y14, Px12y14, Px10y12, Px12y12, Px11y14 } CellNode (11 @ 13) (20)Px11y14 { Px12y15, Px10y13, Px12y13, Px11y15, Px10y14, Px11y13, Px12y14, Px10y15 } CellNode (11 @ 14) (20)Px11y15 { Px12y15, Px10y16, Px12y16, Px10y14, Px12y14, Px11y16, Px10y15, Px11y14 } CellNode (11 @ 15) (20)Px11y16 { Px12y15, Px11y17, Px10y16, Px11y15, Px12y16, Px10y17, Px12y17, Px10y15 } CellNode (11 @ 16) (20)Px11y17 { Px10y18, Px12y18, Px10y16, Px12y16, Px11y18, Px10y17, Px11y16, Px12y17 } CellNode (11 @ 17) (20)Px11y18 { Px10y18, Px11y17, Px12y18, Px10y19, Px12y19, Px10y17, Px12y17, Px11y19 } CellNode (11 @ 18) (20)Px11y19 { Px10y18, Px12y20, Px12y18, Px10y19, Px11y18, Px12y19, Px11y20, Px10y20 } CellNode (11 @ 19) (20)Px11y2 { Px12y3, Px11y1, Px12y1, Px10y2, Px12y2, Px10y3, Px11y3, Px10y1 } CellNode (11 @ 2) (20)Px11y20 { Px10y20, Px12y20, Px10y21, Px10y19, Px12y21, Px12y19, Px11y19, Px11y21 } CellNode (11 @ 20) (20)Px11y21 { Px12y20, Px10y21, Px11y22, Px12y21, Px11y20, Px10y22, Px12y22, Px10y20 } CellNode (11 @ 21) (20)Px11y22 { Px10y23, Px12y23, Px10y21, Px12y21, Px10y22, Px11y23, Px12y22, Px11y21 } CellNode (11 @ 22) (20)Px11y23 { Px10y23, Px11y24, Px12y23, Px11y22, Px10y24, Px12y24, Px10y22, Px12y22 } CellNode (11 @ 23) (20)Px11y24 { Px10y23, Px12y23, Px10y24, Px11y25, Px12y24, Px11y23, Px10y25, Px12y25 } CellNode (11 @ 24) (20)Px11y25 { Px11y24, Px10y26, Px12y26, Px10y24, Px12y24, Px10y25, Px11y26, Px12y25 } CellNode (11 @ 25) (20)Px11y26 { Px10y26, Px11y27, Px12y26, Px11y25, Px10y27, Px12y27, Px10y25, Px12y25 } CellNode (11 @ 26) (20)Px11y27 { Px12y26, Px10y26, Px12y27, Px10y27, Px11y26 } CellNode (11 @ 27) (20)Px11y3 { Px12y3, Px10y4, Px11y4, Px10y2, Px12y4, Px11y2, Px12y2, Px10y3 } CellNode (11 @ 3) (20)Px11y4 { Px12y3, Px10y4, Px12y4, Px10y5, Px11y5, Px10y3, Px12y5, Px11y3 } CellNode (11 @ 4) (20)Px11y5 { Px11y6, Px10y4, Px12y6, Px11y4, Px12y4, Px10y5, Px12y5, Px10y6 } CellNode (11 @ 5) (20)Px11y6 { Px12y6, Px10y7, Px11y7, Px10y5, Px12y7, Px11y5, Px12y5, Px10y6 } CellNode (11 @ 6) (20)Px11y7 { Px11y6, Px12y6, Px10y7, Px12y7, Px10y8, Px11y8, Px10y6, Px12y8 } CellNode (11 @ 7) (20)Px11y8 { Px10y9, Px11y9, Px10y7, Px12y9, Px11y7, Px12y7, Px10y8, Px12y8 } CellNode (11 @ 8) (20)Px11y9 { Px10y10, Px12y10, Px10y9, Px12y9, Px11y10, Px10y8, Px11y8, Px12y8 } CellNode (11 @ 9) (20)Px12y1 { Px12y2, Px11y2, Px13y1, Px13y2, Px11y1 } CellNode (12 @ 1) (20)Px12y10 { Px11y9, Px12y9, Px11y10, Px13y9, Px12y11, Px13y10, Px11y11, Px13y11 } CellNode (12 @ 10) (20)Px12y11 { Px12y10, Px11y12, Px13y12, Px11y10, Px13y10, Px11y11, Px12y12, Px13y11 } CellNode (12 @ 11) (20)Px12y12 { Px11y12, Px12y13, Px13y12, Px12y11, Px11y13, Px13y13, Px11y11, Px13y11 } CellNode (12 @ 12) (20)Px12y13 { Px13y14, Px11y12, Px13y12, Px11y13, Px12y14, Px13y13, Px12y12, Px11y14 } CellNode (12 @ 13) (20)Px12y14 { Px12y15, Px13y14, Px12y13, Px11y15, Px13y15, Px11y13, Px13y13, Px11y14 } CellNode (12 @ 14) (20)Px12y15 { Px13y14, Px11y15, Px12y16, Px13y15, Px12y14, Px11y16, Px13y16, Px11y14 } CellNode (12 @ 15) (20)Px12y16 { Px12y15, Px11y17, Px13y17, Px11y15, Px13y15, Px11y16, Px12y17, Px13y16 } CellNode (12 @ 16) (20)Px12y17 { Px11y17, Px12y18, Px13y17, Px12y16, Px11y18, Px13y18, Px11y16, Px13y16 } CellNode (12 @ 17) (20)Px12y18 { Px13y19, Px11y17, Px13y17, Px11y18, Px12y19, Px13y18, Px12y17, Px11y19 } CellNode (12 @ 18) (20)Px12y19 { Px13y19, Px12y20, Px12y18, Px11y18, Px11y20, Px13y18, Px13y20, Px11y19 } CellNode (12 @ 19) (20)Px12y2 { Px12y3, Px11y1, Px13y3, Px12y1, Px13y1, Px11y2, Px13y2, Px11y3 } CellNode (12 @ 2) (20)Px12y20 { Px13y19, Px13y21, Px12y21, Px12y19, Px11y20, Px13y20, Px11y19, Px11y21 } CellNode (12 @ 20) (20)Px12y21 { Px12y20, Px13y21, Px11y22, Px13y22, Px11y20, Px13y20, Px12y22, Px11y21 } CellNode (12 @ 21) (20)Px12y22 { Px13y21, Px12y23, Px11y22, Px12y21, Px13y22, Px11y23, Px13y23, Px11y21 } CellNode (12 @ 22) (20)Px12y23 { Px11y24, Px13y24, Px11y22, Px13y22, Px12y24, Px11y23, Px12y22, Px13y23 } CellNode (12 @ 23) (20)Px12y24 { Px11y24, Px12y23, Px13y24, Px11y25, Px13y25, Px11y23, Px13y23, Px12y25 } CellNode (12 @ 24) (20)Px12y25 { Px13y26, Px11y24, Px13y24, Px12y26, Px11y25, Px12y24, Px13y25, Px11y26 } CellNode (12 @ 25) (20)Px12y26 { Px13y26, Px11y27, Px13y27, Px11y25, Px13y25, Px12y27, Px11y26, Px12y25 } CellNode (12 @ 26) (20)Px12y27 { Px12y26, Px11y27, Px13y26, Px11y26, Px13y27 } CellNode (12 @ 27) (20)Px12y3 { Px13y3, Px11y4, Px12y4, Px11y2, Px13y4, Px12y2, Px13y2, Px11y3 } CellNode (12 @ 3) (20)Px12y4 { Px12y3, Px13y3, Px11y4, Px13y4, Px11y5, Px12y5, Px11y3, Px13y5 } CellNode (12 @ 4) (20)Px12y5 { Px11y6, Px12y6, Px11y4, Px13y6, Px12y4, Px13y4, Px11y5, Px13y5 } CellNode (12 @ 5) (20)Px12y6 { Px11y6, Px13y6, Px11y7, Px12y7, Px11y5, Px13y7, Px12y5, Px13y5 } CellNode (12 @ 6) (20)Px12y7 { Px11y6, Px13y8, Px12y6, Px13y6, Px11y7, Px13y7, Px11y8, Px12y8 } CellNode (12 @ 7) (20)Px12y8 { Px13y8, Px11y9, Px12y9, Px11y7, Px13y9, Px12y7, Px13y7, Px11y8 } CellNode (12 @ 8) (20)Px12y9 { Px12y10, Px11y9, Px13y8, Px11y10, Px13y9, Px13y10, Px11y8, Px12y8 } CellNode (12 @ 9) (20)Px13y1 { Px14y1, Px14y2, Px13y2, Px12y1, Px12y2 } CellNode (13 @ 1) (20)Px13y10 { Px12y10, Px14y10, Px12y9, Px13y9, Px12y11, Px14y11, Px14y9, Px13y11 } CellNode (13 @ 10) (20)Px13y11 { Px14y12, Px12y10, Px14y10, Px13y12, Px12y11, Px13y10, Px14y11, Px12y12 } CellNode (13 @ 11) (20)Px13y12 { Px14y12, Px12y13, Px14y13, Px12y11, Px14y11, Px13y13, Px12y12, Px13y11 } CellNode (13 @ 12) (20)Px13y13 { Px14y12, Px13y14, Px12y13, Px13y12, Px14y13, Px12y14, Px14y14, Px12y12 } CellNode (13 @ 13) (20)Px13y14 { Px12y15, Px14y15, Px12y13, Px14y13, Px13y15, Px12y14, Px13y13, Px14y14 } CellNode (13 @ 14) (20)Px13y15 { Px12y15, Px13y14, Px14y15, Px12y16, Px14y16, Px12y14, Px14y14, Px13y16 } CellNode (13 @ 15) (20)Px13y16 { Px12y15, Px14y15, Px13y17, Px12y16, Px13y15, Px14y16, Px12y17, Px14y17 } CellNode (13 @ 16) (20)Px13y17 { Px12y18, Px14y18, Px12y16, Px14y16, Px13y18, Px12y17, Px13y16, Px14y17 } CellNode (13 @ 17) (20)Px13y18 { Px13y19, Px12y18, Px13y17, Px14y18, Px12y19, Px14y19, Px12y17, Px14y17 } CellNode (13 @ 18) (20)Px13y19 { Px12y20, Px12y18, Px14y20, Px14y18, Px12y19, Px13y18, Px14y19, Px13y20 } CellNode (13 @ 19) (20)Px13y2 { Px12y3, Px13y3, Px12y1, Px14y3, Px13y1, Px14y1, Px12y2, Px14y2 } CellNode (13 @ 2) (20)Px13y20 { Px13y19, Px13y21, Px14y20, Px12y20, Px12y21, Px14y21, Px12y19, Px14y19 } CellNode (13 @ 20) (20)Px13y21 { Px12y20, Px14y20, Px12y21, Px13y22, Px14y21, Px13y20, Px12y22, Px14y22 } CellNode (13 @ 21) (20)Px13y22 { Px13y21, Px12y23, Px14y23, Px12y21, Px14y21, Px12y22, Px13y23, Px14y22 } CellNode (13 @ 22) (20)Px13y23 { Px12y23, Px13y24, Px14y23, Px13y22, Px12y24, Px14y24, Px12y22, Px14y22 } CellNode (13 @ 23) (20)Px13y24 { Px14y25, Px12y23, Px14y23, Px12y24, Px13y25, Px14y24, Px13y23, Px12y25 } CellNode (13 @ 24) (20)Px13y25 { Px13y26, Px14y25, Px13y24, Px12y26, Px14y26, Px12y24, Px14y24, Px12y25 } CellNode (13 @ 25) (20)Px13y26 { Px14y25, Px12y26, Px13y27, Px14y26, Px13y25, Px12y27, Px14y27, Px12y25 } CellNode (13 @ 26) (20)Px13y27 { Px12y26, Px14y27, Px12y27, Px13y26, Px14y26 } CellNode (13 @ 27) (20)Px13y3 { Px12y3, Px14y3, Px12y4, Px13y4, Px12y2, Px14y4, Px13y2, Px14y2 } CellNode (13 @ 3) (20)Px13y4 { Px12y3, Px14y5, Px13y3, Px14y3, Px12y4, Px14y4, Px12y5, Px13y5 } CellNode (13 @ 4) (20)Px13y5 { Px14y5, Px12y6, Px13y6, Px12y4, Px14y6, Px13y4, Px14y4, Px12y5 } CellNode (13 @ 5) (20)Px13y6 { Px14y5, Px12y6, Px14y6, Px12y7, Px13y7, Px12y5, Px14y7, Px13y5 } CellNode (13 @ 6) (20)Px13y7 { Px13y8, Px12y6, Px14y8, Px13y6, Px14y6, Px12y7, Px14y7, Px12y8 } CellNode (13 @ 7) (20)Px13y8 { Px14y8, Px12y9, Px13y9, Px12y7, Px14y9, Px13y7, Px14y7, Px12y8 } CellNode (13 @ 8) (20)Px13y9 { Px12y10, Px13y8, Px14y10, Px12y9, Px14y8, Px13y10, Px14y9, Px12y8 } CellNode (13 @ 9) (20)Px14y1 { Px15y2, Px13y1, Px14y2, Px13y2, Px15y1 } CellNode (14 @ 1) (20)Px14y10 { Px15y11, Px13y9, Px13y10, Px14y11, Px14y9, Px15y10, Px15y9, Px13y11 } CellNode (14 @ 10) (20)Px14y11 { Px14y12, Px15y11, Px14y10, Px13y12, Px15y12, Px13y10, Px15y10, Px13y11 } CellNode (14 @ 11) (20)Px14y12 { Px15y11, Px13y12, Px14y13, Px15y12, Px14y11, Px13y13, Px15y13, Px13y11 } CellNode (14 @ 12) (20)Px14y13 { Px14y12, Px13y14, Px15y14, Px13y12, Px15y12, Px13y13, Px14y14, Px15y13 } CellNode (14 @ 13) (20)Px14y14 { Px13y14, Px14y15, Px15y14, Px14y13, Px13y15, Px15y15, Px13y13, Px15y13 } CellNode (14 @ 14) (20)Px14y15 { Px15y16, Px13y14, Px15y14, Px13y15, Px14y16, Px15y15, Px14y14, Px13y16 } CellNode (14 @ 15) (20)Px14y16 { Px15y16, Px14y15, Px13y17, Px15y17, Px13y15, Px15y15, Px13y16, Px14y17 } CellNode (14 @ 16) (20)Px14y17 { Px15y16, Px13y17, Px14y18, Px15y17, Px14y16, Px13y18, Px15y18, Px13y16 } CellNode (14 @ 17) (20)Px14y18 { Px13y19, Px15y19, Px13y17, Px15y17, Px13y18, Px14y19, Px15y18, Px14y17 } CellNode (14 @ 18) (20)Px14y19 { Px13y19, Px14y20, Px15y19, Px14y18, Px13y18, Px13y20, Px15y18, Px15y20 } CellNode (14 @ 19) (20)Px14y2 { Px15y2, Px13y3, Px14y3, Px13y1, Px15y3, Px14y1, Px15y1, Px13y2 } CellNode (14 @ 2) (20)Px14y20 { Px13y19, Px13y21, Px15y19, Px15y21, Px14y21, Px13y20, Px14y19, Px15y20 } CellNode (14 @ 20) (20)Px14y21 { Px13y21, Px14y20, Px15y21, Px13y22, Px15y22, Px13y20, Px15y20, Px14y22 } CellNode (14 @ 21) (20)Px14y22 { Px15y23, Px13y21, Px15y21, Px14y23, Px13y22, Px14y21, Px15y22, Px13y23 } CellNode (14 @ 22) (20)Px14y23 { Px15y23, Px13y24, Px15y24, Px13y22, Px15y22, Px14y24, Px13y23, Px14y22 } CellNode (14 @ 23) (20)Px14y24 { Px15y23, Px14y25, Px13y24, Px14y23, Px15y24, Px13y25, Px15y25, Px13y23 } CellNode (14 @ 24) (20)Px14y25 { Px13y26, Px13y24, Px15y24, Px14y26, Px13y25, Px14y24, Px15y25, Px15y26 } CellNode (14 @ 25) (20)Px14y26 { Px13y26, Px14y25, Px15y27, Px13y27, Px13y25, Px15y25, Px14y27, Px15y26 } CellNode (14 @ 26) (20)Px14y27 { Px14y26, Px15y26, Px15y27, Px13y26, Px13y27 } CellNode (14 @ 27) (20)Px14y3 { Px15y2, Px13y3, Px15y3, Px13y4, Px14y4, Px13y2, Px15y4, Px14y2 } CellNode (14 @ 3) (20)Px14y4 { Px14y5, Px13y3, Px15y5, Px14y3, Px15y3, Px13y4, Px15y4, Px13y5 } CellNode (14 @ 4) (20)Px14y5 { Px15y5, Px13y6, Px14y6, Px13y4, Px15y6, Px14y4, Px15y4, Px13y5 } CellNode (14 @ 5) (20)Px14y6 { Px15y7, Px14y5, Px15y5, Px13y6, Px15y6, Px13y7, Px14y7, Px13y5 } CellNode (14 @ 6) (20)Px14y7 { Px15y7, Px13y8, Px14y8, Px13y6, Px15y8, Px14y6, Px15y6, Px13y7 } CellNode (14 @ 7) (20)Px14y8 { Px15y7, Px13y8, Px15y8, Px13y9, Px14y9, Px13y7, Px15y9, Px14y7 } CellNode (14 @ 8) (20)Px14y9 { Px13y8, Px14y10, Px14y8, Px15y8, Px13y9, Px13y10, Px15y10, Px15y9 } CellNode (14 @ 9) (20)Px15y1 { Px15y2, Px14y1, Px16y2, Px14y2, Px16y1 } CellNode (15 @ 1) (20)Px15y10 { Px15y11, Px16y10, Px14y10, Px16y11, Px14y11, Px14y9, Px15y9, Px16y9 } CellNode (15 @ 10) (20)Px15y11 { Px14y12, Px16y10, Px14y10, Px15y12, Px16y11, Px14y11, Px15y10, Px16y12 } CellNode (15 @ 11) (20)Px15y12 { Px14y12, Px15y11, Px16y13, Px14y13, Px16y11, Px14y11, Px15y13, Px16y12 } CellNode (15 @ 12) (20)Px15y13 { Px14y12, Px15y14, Px16y13, Px14y13, Px15y12, Px16y14, Px14y14, Px16y12 } CellNode (15 @ 13) (20)Px15y14 { Px16y15, Px14y15, Px16y13, Px14y13, Px15y15, Px16y14, Px14y14, Px15y13 } CellNode (15 @ 14) (20)Px15y15 { Px15y16, Px16y15, Px14y15, Px15y14, Px16y16, Px14y16, Px16y14, Px14y14 } CellNode (15 @ 15) (20)Px15y16 { Px16y15, Px14y15, Px15y17, Px16y16, Px14y16, Px15y15, Px16y17, Px14y17 } CellNode (15 @ 16) (20)Px15y17 { Px15y16, Px16y18, Px14y18, Px16y16, Px14y16, Px15y18, Px16y17, Px14y17 } CellNode (15 @ 17) (20)Px15y18 { Px15y19, Px16y18, Px14y18, Px15y17, Px16y19, Px14y19, Px16y17, Px14y17 } CellNode (15 @ 18) (20)Px15y19 { Px14y20, Px16y18, Px16y20, Px14y18, Px16y19, Px14y19, Px15y18, Px15y20 } CellNode (15 @ 19) (20)Px15y2 { Px16y1, Px14y3, Px15y3, Px14y1, Px16y2, Px15y1, Px16y3, Px14y2 } CellNode (15 @ 2) (20)Px15y20 { Px14y20, Px15y19, Px16y20, Px15y21, Px14y21, Px16y19, Px16y21, Px14y19 } CellNode (15 @ 20) (20)Px15y21 { Px16y22, Px14y20, Px16y20, Px14y21, Px15y22, Px16y21, Px15y20, Px14y22 } CellNode (15 @ 21) (20)Px15y22 { Px15y23, Px16y22, Px15y21, Px14y23, Px16y23, Px14y21, Px16y21, Px14y22 } CellNode (15 @ 22) (20)Px15y23 { Px16y22, Px14y23, Px15y24, Px16y23, Px15y22, Px14y24, Px16y24, Px14y22 } CellNode (15 @ 23) (20)Px15y24 { Px15y23, Px14y25, Px16y25, Px14y23, Px16y23, Px14y24, Px15y25, Px16y24 } CellNode (15 @ 24) (20)Px15y25 { Px14y25, Px16y25, Px15y24, Px14y26, Px16y26, Px14y24, Px16y24, Px15y26 } CellNode (15 @ 25) (20)Px15y26 { Px16y27, Px14y25, Px16y25, Px15y27, Px14y26, Px16y26, Px15y25, Px14y27 } CellNode (15 @ 26) (20)Px15y27 { Px16y27, Px15y26, Px14y27, Px16y26, Px14y26 } CellNode (15 @ 27) (20)Px15y3 { Px16y3, Px15y2, Px16y4, Px14y3, Px16y2, Px14y4, Px15y4, Px14y2 } CellNode (15 @ 3) (20)Px15y4 { Px14y5, Px16y4, Px14y3, Px16y5, Px15y3, Px15y5, Px14y4, Px16y3 } CellNode (15 @ 4) (20)Px15y5 { Px14y5, Px16y4, Px16y5, Px14y6, Px15y6, Px14y4, Px16y6, Px15y4 } CellNode (15 @ 5) (20)Px15y6 { Px15y7, Px14y5, Px16y7, Px15y5, Px16y5, Px14y6, Px16y6, Px14y7 } CellNode (15 @ 6) (20)Px15y7 { Px16y7, Px14y8, Px15y8, Px14y6, Px16y8, Px15y6, Px16y6, Px14y7 } CellNode (15 @ 7) (20)Px15y8 { Px15y7, Px16y7, Px14y8, Px16y8, Px14y9, Px15y9, Px14y7, Px16y9 } CellNode (15 @ 8) (20)Px15y9 { Px16y10, Px14y10, Px14y8, Px15y8, Px16y8, Px14y9, Px15y10, Px16y9 } CellNode (15 @ 9) (20)Px16y1 { Px15y2, Px16y2, Px17y1, Px15y1, Px17y2 } CellNode (16 @ 1) (20)Px16y10 { Px15y11, Px17y11, Px17y9, Px16y11, Px15y10, Px15y9, Px17y10, Px16y9 } CellNode (16 @ 10) (20)Px16y11 { Px15y11, Px16y10, Px17y11, Px15y12, Px17y12, Px15y10, Px17y10, Px16y12 } CellNode (16 @ 11) (20)Px16y12 { Px17y13, Px15y11, Px17y11, Px16y13, Px15y12, Px16y11, Px17y12, Px15y13 } CellNode (16 @ 12) (20)Px16y13 { Px17y13, Px15y14, Px17y14, Px15y12, Px17y12, Px16y14, Px15y13, Px16y12 } CellNode (16 @ 13) (20)Px16y14 { Px17y13, Px16y15, Px15y14, Px16y13, Px17y14, Px15y15, Px17y15, Px15y13 } CellNode (16 @ 14) (20)Px16y15 { Px15y16, Px17y16, Px15y14, Px17y14, Px16y16, Px15y15, Px16y14, Px17y15 } CellNode (16 @ 15) (20)Px16y16 { Px15y16, Px16y15, Px17y16, Px15y17, Px17y17, Px15y15, Px17y15, Px16y17 } CellNode (16 @ 16) (20)Px16y17 { Px15y16, Px17y16, Px16y18, Px15y17, Px16y16, Px17y17, Px15y18, Px17y18 } CellNode (16 @ 17) (20)Px16y18 { Px15y19, Px17y19, Px15y17, Px17y17, Px16y19, Px15y18, Px16y17, Px17y18 } CellNode (16 @ 18) (20)Px16y19 { Px17y20, Px15y19, Px16y18, Px16y20, Px17y19, Px15y18, Px15y20, Px17y18 } CellNode (16 @ 19) (20)Px16y2 { Px17y3, Px15y2, Px16y1, Px17y1, Px15y3, Px17y2, Px15y1, Px16y3 } CellNode (16 @ 2) (20)Px16y20 { Px15y19, Px15y21, Px17y19, Px17y21, Px16y19, Px16y21, Px17y20, Px15y20 } CellNode (16 @ 20) (20)Px16y21 { Px16y22, Px17y21, Px15y21, Px16y20, Px17y22, Px15y22, Px17y20, Px15y20 } CellNode (16 @ 21) (20)Px16y22 { Px15y23, Px17y21, Px15y21, Px16y23, Px17y22, Px15y22, Px16y21, Px17y23 } CellNode (16 @ 22) (20)Px16y23 { Px15y23, Px16y22, Px17y24, Px15y24, Px17y22, Px15y22, Px16y24, Px17y23 } CellNode (16 @ 23) (20)Px16y24 { Px15y23, Px16y25, Px17y24, Px15y24, Px16y23, Px17y25, Px15y25, Px17y23 } CellNode (16 @ 24) (20)Px16y25 { Px17y26, Px17y24, Px15y24, Px16y26, Px17y25, Px15y25, Px16y24, Px15y26 } CellNode (16 @ 25) (20)Px16y26 { Px16y27, Px17y26, Px16y25, Px15y27, Px17y27, Px17y25, Px15y25, Px15y26 } CellNode (16 @ 26) (20)Px16y27 { Px17y26, Px15y26, Px17y27, Px15y27, Px16y26 } CellNode (16 @ 27) (20)Px16y3 { Px17y3, Px15y2, Px16y4, Px17y4, Px15y3, Px16y2, Px17y2, Px15y4 } CellNode (16 @ 3) (20)Px16y4 { Px17y3, Px15y5, Px16y5, Px15y3, Px17y4, Px17y5, Px15y4, Px16y3 } CellNode (16 @ 4) (20)Px16y5 { Px17y6, Px16y4, Px15y5, Px17y4, Px15y6, Px16y6, Px17y5, Px15y4 } CellNode (16 @ 5) (20)Px16y6 { Px15y7, Px16y7, Px15y5, Px17y6, Px16y5, Px17y7, Px15y6, Px17y5 } CellNode (16 @ 6) (20)Px16y7 { Px15y7, Px17y6, Px15y8, Px16y8, Px15y6, Px17y7, Px16y6, Px17y8 } CellNode (16 @ 7) (20)Px16y8 { Px17y8, Px15y7, Px16y7, Px17y9, Px15y8, Px17y7, Px15y9, Px16y9 } CellNode (16 @ 8) (20)Px16y9 { Px16y10, Px17y9, Px15y8, Px16y8, Px15y10, Px15y9, Px17y10, Px17y8 } CellNode (16 @ 9) (20)Px17y1 { Px16y2, Px18y1, Px18y2, Px17y2, Px16y1 } CellNode (17 @ 1) (20)Px17y10 { Px16y10, Px17y11, Px17y9, Px18y10, Px18y9, Px16y11, Px18y11, Px16y9 } CellNode (17 @ 10) (20)Px17y11 { Px18y12, Px16y10, Px18y10, Px16y11, Px17y12, Px18y11, Px17y10, Px16y12 } CellNode (17 @ 11) (20)Px17y12 { Px17y13, Px18y12, Px17y11, Px16y13, Px18y13, Px16y11, Px18y11, Px16y12 } CellNode (17 @ 12) (20)Px17y13 { Px18y12, Px16y13, Px17y14, Px18y13, Px17y12, Px16y14, Px18y14, Px16y12 } CellNode (17 @ 13) (20)Px17y14 { Px17y13, Px16y15, Px18y15, Px16y13, Px18y13, Px16y14, Px17y15, Px18y14 } CellNode (17 @ 14) (20)Px17y15 { Px16y15, Px17y16, Px18y15, Px17y14, Px16y16, Px18y16, Px16y14, Px18y14 } CellNode (17 @ 15) (20)Px17y16 { Px18y17, Px16y15, Px18y15, Px16y16, Px17y17, Px18y16, Px17y15, Px16y17 } CellNode (17 @ 16) (20)Px17y17 { Px18y17, Px17y16, Px16y18, Px18y18, Px16y16, Px18y16, Px16y17, Px17y18 } CellNode (17 @ 17) (20)Px17y18 { Px18y17, Px16y18, Px17y19, Px18y18, Px17y17, Px16y19, Px18y19, Px16y17 } CellNode (17 @ 18) (20)Px17y19 { Px16y18, Px16y20, Px18y18, Px18y20, Px16y19, Px18y19, Px17y20, Px17y18 } CellNode (17 @ 19) (20)Px17y2 { Px17y3, Px16y1, Px18y3, Px17y1, Px18y1, Px16y2, Px18y2, Px16y3 } CellNode (17 @ 2) (20)Px17y20 { Px17y21, Px16y20, Px17y19, Px18y20, Px16y19, Px16y21, Px18y19, Px18y21 } CellNode (17 @ 20) (20)Px17y21 { Px16y22, Px18y22, Px16y20, Px18y20, Px17y22, Px16y21, Px17y20, Px18y21 } CellNode (17 @ 21) (20)Px17y22 { Px16y22, Px17y21, Px18y22, Px16y23, Px18y23, Px16y21, Px18y21, Px17y23 } CellNode (17 @ 22) (20)Px17y23 { Px18y24, Px16y22, Px18y22, Px17y24, Px16y23, Px17y22, Px18y23, Px16y24 } CellNode (17 @ 23) (20)Px17y24 { Px18y24, Px16y25, Px18y25, Px16y23, Px18y23, Px17y25, Px16y24, Px17y23 } CellNode (17 @ 24) (20)Px17y25 { Px18y24, Px17y26, Px16y25, Px17y24, Px18y25, Px16y26, Px18y26, Px16y24 } CellNode (17 @ 25) (20)Px17y26 { Px16y27, Px18y27, Px16y25, Px18y25, Px17y27, Px16y26, Px17y25, Px18y26 } CellNode (17 @ 26) (20)Px17y27 { Px17y26, Px16y27, Px18y26, Px16y26, Px18y27 } CellNode (17 @ 27) (20)Px17y3 { Px18y3, Px16y4, Px17y4, Px16y2, Px18y4, Px17y2, Px18y2, Px16y3 } CellNode (17 @ 3) (20)Px17y4 { Px17y3, Px18y3, Px16y4, Px16y5, Px18y4, Px17y5, Px16y3, Px18y5 } CellNode (17 @ 4) (20)Px17y5 { Px17y6, Px16y4, Px18y6, Px16y5, Px17y4, Px18y4, Px16y6, Px18y5 } CellNode (17 @ 5) (20)Px17y6 { Px16y7, Px18y6, Px16y5, Px17y7, Px18y7, Px16y6, Px17y5, Px18y5 } CellNode (17 @ 6) (20)Px17y7 { Px18y8, Px16y7, Px17y6, Px18y6, Px16y8, Px18y7, Px16y6, Px17y8 } CellNode (17 @ 7) (20)Px17y8 { Px18y8, Px16y7, Px17y9, Px18y9, Px16y8, Px17y7, Px18y7, Px16y9 } CellNode (17 @ 8) (20)Px17y9 { Px17y8, Px18y8, Px16y10, Px18y10, Px18y9, Px16y8, Px17y10, Px16y9 } CellNode (17 @ 9) (20)Px18y1 { Px19y2, Px17y1, Px18y2, Px17y2, Px19y1 } CellNode (18 @ 1) (20)Px18y10 { Px19y10, Px17y11, Px17y9, Px19y11, Px18y9, Px19y9, Px18y11, Px17y10 } CellNode (18 @ 10) (20)Px18y11 { Px19y10, Px18y12, Px17y11, Px18y10, Px19y11, Px17y12, Px19y12, Px17y10 } CellNode (18 @ 11) (20)Px18y12 { Px17y13, Px19y13, Px17y11, Px19y11, Px18y13, Px17y12, Px18y11, Px19y12 } CellNode (18 @ 12) (20)Px18y13 { Px17y13, Px18y12, Px19y13, Px17y14, Px19y14, Px17y12, Px19y12, Px18y14 } CellNode (18 @ 13) (20)Px18y14 { Px17y13, Px19y13, Px18y15, Px17y14, Px18y13, Px19y14, Px17y15, Px19y15 } CellNode (18 @ 14) (20)Px18y15 { Px17y16, Px19y16, Px17y14, Px19y14, Px18y16, Px17y15, Px18y14, Px19y15 } CellNode (18 @ 15) (20)Px18y16 { Px18y17, Px17y16, Px18y15, Px19y16, Px17y17, Px19y17, Px17y15, Px19y15 } CellNode (18 @ 16) (20)Px18y17 { Px19y18, Px17y16, Px19y16, Px18y18, Px17y17, Px18y16, Px19y17, Px17y18 } CellNode (18 @ 17) (20)Px18y18 { Px18y17, Px19y18, Px17y19, Px19y19, Px17y17, Px19y17, Px18y19, Px17y18 } CellNode (18 @ 18) (20)Px18y19 { Px19y20, Px19y18, Px17y19, Px18y18, Px19y19, Px18y20, Px17y20, Px17y18 } CellNode (18 @ 19) (20)Px18y2 { Px17y3, Px18y3, Px17y1, Px19y3, Px18y1, Px19y1, Px17y2, Px19y2 } CellNode (18 @ 2) (20)Px18y20 { Px17y20, Px17y21, Px17y19, Px19y21, Px19y19, Px18y19, Px18y21, Px19y20 } CellNode (18 @ 20) (20)Px18y21 { Px17y21, Px18y22, Px19y21, Px18y20, Px17y22, Px19y22, Px17y20, Px19y20 } CellNode (18 @ 21) (20)Px18y22 { Px19y23, Px17y21, Px19y21, Px17y22, Px18y23, Px19y22, Px18y21, Px17y23 } CellNode (18 @ 22) (20)Px18y23 { Px18y24, Px19y23, Px18y22, Px17y24, Px19y24, Px17y22, Px19y22, Px17y23 } CellNode (18 @ 23) (20)Px18y24 { Px19y23, Px17y24, Px18y25, Px19y24, Px18y23, Px17y25, Px19y25, Px17y23 } CellNode (18 @ 24) (20)Px18y25 { Px18y24, Px17y26, Px19y26, Px17y24, Px19y24, Px17y25, Px18y26, Px19y25 } CellNode (18 @ 25) (20)Px18y26 { Px17y26, Px18y27, Px19y26, Px18y25, Px17y27, Px19y27, Px17y25, Px19y25 } CellNode (18 @ 26) (20)Px18y27 { Px17y26, Px19y27, Px17y27, Px18y26, Px19y26 } CellNode (18 @ 27) (20)Px18y3 { Px17y3, Px19y3, Px17y4, Px18y4, Px17y2, Px19y4, Px18y2, Px19y2 } CellNode (18 @ 3) (20)Px18y4 { Px17y3, Px19y5, Px18y3, Px19y3, Px17y4, Px19y4, Px17y5, Px18y5 } CellNode (18 @ 4) (20)Px18y5 { Px19y5, Px17y6, Px18y6, Px17y4, Px19y6, Px18y4, Px19y4, Px17y5 } CellNode (18 @ 5) (20)Px18y6 { Px19y5, Px17y6, Px19y6, Px17y7, Px18y7, Px17y5, Px19y7, Px18y5 } CellNode (18 @ 6) (20)Px18y7 { Px18y8, Px17y6, Px19y8, Px18y6, Px19y6, Px17y7, Px19y7, Px17y8 } CellNode (18 @ 7) (20)Px18y8 { Px19y8, Px17y9, Px18y9, Px17y7, Px19y9, Px18y7, Px19y7, Px17y8 } CellNode (18 @ 8) (20)Px18y9 { Px19y10, Px18y8, Px19y8, Px17y9, Px18y10, Px19y9, Px17y10, Px17y8 } CellNode (18 @ 9) (20)Px19y1 { Px20y2, Px19y2, Px18y1, Px18y2, Px20y1 } CellNode (19 @ 1) (20)Px19y10 { Px20y10, Px18y10, Px20y11, Px19y11, Px18y9, Px19y9, Px20y9, Px18y11 } CellNode (19 @ 10) (20)Px19y11 { Px20y10, Px18y12, Px19y10, Px18y10, Px20y11, Px18y11, Px19y12, Px20y12 } CellNode (19 @ 11) (20)Px19y12 { Px18y12, Px20y13, Px19y13, Px20y11, Px18y13, Px19y11, Px18y11, Px20y12 } CellNode (19 @ 12) (20)Px19y13 { Px18y12, Px20y13, Px18y13, Px20y14, Px19y14, Px19y12, Px18y14, Px20y12 } CellNode (19 @ 13) (20)Px19y14 { Px19y15, Px20y13, Px19y13, Px18y15, Px18y13, Px20y14, Px18y14, Px20y15 } CellNode (19 @ 14) (20)Px19y15 { Px18y15, Px19y16, Px20y16, Px20y14, Px18y16, Px19y14, Px18y14, Px20y15 } CellNode (19 @ 15) (20)Px19y16 { Px18y17, Px19y15, Px18y15, Px20y16, Px18y16, Px19y17, Px20y17, Px20y15 } CellNode (19 @ 16) (20)Px19y17 { Px18y17, Px19y18, Px20y18, Px19y16, Px18y18, Px20y16, Px18y16, Px20y17 } CellNode (19 @ 17) (20)Px19y18 { Px18y17, Px20y18, Px18y18, Px19y19, Px20y19, Px19y17, Px18y19, Px20y17 } CellNode (19 @ 18) (20)Px19y19 { Px19y18, Px20y20, Px20y18, Px18y18, Px18y20, Px20y19, Px18y19, Px19y20 } CellNode (19 @ 19) (20)Px19y2 { Px20y2, Px18y3, Px19y3, Px18y1, Px20y3, Px19y1, Px20y1, Px18y2 } CellNode (19 @ 2) (20)Px19y20 { Px20y20, Px19y21, Px19y19, Px18y20, Px20y21, Px20y19, Px18y19, Px18y21 } CellNode (19 @ 20) (20)Px19y21 { Px20y22, Px20y20, Px18y22, Px18y20, Px20y21, Px19y22, Px18y21, Px19y20 } CellNode (19 @ 21) (20)Px19y22 { Px19y23, Px18y22, Px19y21, Px20y23, Px20y21, Px18y23, Px18y21, Px20y22 } CellNode (19 @ 22) (20)Px19y23 { Px18y24, Px18y22, Px20y23, Px19y24, Px18y23, Px20y24, Px19y22, Px20y22 } CellNode (19 @ 23) (20)Px19y24 { Px18y24, Px19y23, Px20y25, Px20y23, Px18y25, Px18y23, Px20y24, Px19y25 } CellNode (19 @ 24) (20)Px19y25 { Px18y24, Px20y25, Px19y26, Px18y25, Px19y24, Px20y26, Px20y24, Px18y26 } CellNode (19 @ 25) (20)Px19y26 { Px20y25, Px18y27, Px18y25, Px20y26, Px19y27, Px18y26, Px20y27, Px19y25 } CellNode (19 @ 26) (20)Px19y27 { Px18y27, Px20y26, Px18y26, Px20y27, Px19y26 } CellNode (19 @ 27) (20)Px19y3 { Px20y2, Px18y3, Px20y3, Px18y4, Px19y4, Px18y2, Px20y4, Px19y2 } CellNode (19 @ 3) (20)Px19y4 { Px19y5, Px18y3, Px20y5, Px19y3, Px20y3, Px18y4, Px20y4, Px18y5 } CellNode (19 @ 4) (20)Px19y5 { Px20y5, Px18y6, Px19y6, Px18y4, Px20y6, Px19y4, Px20y4, Px18y5 } CellNode (19 @ 5) (20)Px19y6 { Px20y7, Px19y5, Px20y5, Px18y6, Px20y6, Px18y7, Px19y7, Px18y5 } CellNode (19 @ 6) (20)Px19y7 { Px18y8, Px19y8, Px20y8, Px18y6, Px19y6, Px20y6, Px18y7, Px20y7 } CellNode (19 @ 7) (20)Px19y8 { Px18y8, Px20y8, Px18y9, Px19y9, Px20y9, Px18y7, Px19y7, Px20y7 } CellNode (19 @ 8) (20)Px19y9 { Px20y10, Px18y8, Px19y10, Px19y8, Px20y8, Px18y10, Px18y9, Px20y9 } CellNode (19 @ 9) (20)Px1y1 { Px2y1, Px1y2, Px2y2 } CellNode (1 @ 1) (20)Px1y10 { Px1y9, Px2y10, Px2y11, Px1y11, Px2y9 } CellNode (1 @ 10) (20)Px1y11 { Px2y10, Px2y11, Px1y12, Px2y12, Px1y10 } CellNode (1 @ 11) (20)Px1y12 { Px2y13, Px1y11, Px2y11, Px2y12, Px1y13 } CellNode (1 @ 12) (20)Px1y13 { Px2y13, Px1y14, Px2y14, Px1y12, Px2y12 } CellNode (1 @ 13) (20)Px1y14 { Px2y13, Px2y14, Px1y15, Px2y15, Px1y13 } CellNode (1 @ 14) (20)Px1y15 { Px1y14, Px2y14, Px2y15, Px1y16, Px2y16 } CellNode (1 @ 15) (20)Px1y16 { Px1y17, Px2y17, Px1y15, Px2y15, Px2y16 } CellNode (1 @ 16) (20)Px1y17 { Px2y17, Px1y18, Px2y18, Px1y16, Px2y16 } CellNode (1 @ 17) (20)Px1y18 { Px2y17, Px2y18, Px1y19, Px2y19, Px1y17 } CellNode (1 @ 18) (20)Px1y19 { Px1y18, Px2y18, Px1y20, Px2y19, Px2y20 } CellNode (1 @ 19) (20)Px1y2 { Px2y2, Px2y3, Px1y3, Px2y1, Px1y1 } CellNode (1 @ 2) (20)Px1y20 { Px2y20, Px2y21, Px1y19, Px2y19, Px1y21 } CellNode (1 @ 20) (20)Px1y21 { Px2y21, Px1y22, Px2y22, Px1y20, Px2y20 } CellNode (1 @ 21) (20)Px1y22 { Px2y21, Px1y23, Px2y22, Px2y23, Px1y21 } CellNode (1 @ 22) (20)Px1y23 { Px2y24, Px1y22, Px2y22, Px1y24, Px2y23 } CellNode (1 @ 23) (20)Px1y24 { Px2y24, Px1y25, Px2y25, Px1y23, Px2y23 } CellNode (1 @ 24) (20)Px1y25 { Px2y24, Px2y25, Px1y26, Px2y26, Px1y24 } CellNode (1 @ 25) (20)Px1y26 { Px1y25, Px2y25, Px1y27, Px2y26, Px2y27 } CellNode (1 @ 26) (20)Px1y27 { Px2y27, Px1y26, Px2y26 } CellNode (1 @ 27) (20)Px1y3 { Px2y3, Px1y2, Px2y4, Px1y4, Px2y2 } CellNode (1 @ 3) (20)Px1y4 { Px1y5, Px2y3, Px2y4, Px1y3, Px2y5 } CellNode (1 @ 4) (20)Px1y5 { Px2y6, Px1y6, Px2y4, Px2y5, Px1y4 } CellNode (1 @ 5) (20)Px1y6 { Px1y5, Px2y6, Px2y7, Px1y7, Px2y5 } CellNode (1 @ 6) (20)Px1y7 { Px2y6, Px2y7, Px1y6, Px2y8, Px1y8 } CellNode (1 @ 7) (20)Px1y8 { Px1y9, Px2y7, Px2y8, Px1y7, Px2y9 } CellNode (1 @ 8) (20)Px1y9 { Px2y9, Px2y10, Px1y10, Px2y8, Px1y8 } CellNode (1 @ 9) (20)Px20y1 { Px20y2, Px19y2, Px21y1, Px21y2, Px19y1 } CellNode (20 @ 1) (20)Px20y10 { Px19y10, Px21y11, Px20y11, Px19y11, Px19y9, Px20y9, Px21y10, Px21y9 } CellNode (20 @ 10) (20)Px20y11 { Px20y10, Px21y11, Px19y10, Px19y11, Px21y12, Px21y10, Px19y12, Px20y12 } CellNode (20 @ 11) (20)Px20y12 { Px21y11, Px20y13, Px19y13, Px20y11, Px21y12, Px19y11, Px19y12, Px21y13 } CellNode (20 @ 12) (20)Px20y13 { Px19y13, Px21y14, Px21y12, Px20y14, Px19y14, Px19y12, Px21y13, Px20y12 } CellNode (20 @ 13) (20)Px20y14 { Px19y15, Px20y13, Px19y13, Px21y14, Px19y14, Px21y15, Px21y13, Px20y15 } CellNode (20 @ 14) (20)Px20y15 { Px21y16, Px21y14, Px20y16, Px19y16, Px20y14, Px19y14, Px21y15, Px19y15 } CellNode (20 @ 15) (20)Px20y16 { Px21y16, Px19y15, Px19y16, Px21y17, Px21y15, Px19y17, Px20y17, Px20y15 } CellNode (20 @ 16) (20)Px20y17 { Px21y16, Px19y18, Px20y18, Px19y16, Px20y16, Px21y17, Px19y17, Px21y18 } CellNode (20 @ 17) (20)Px20y18 { Px19y18, Px21y19, Px21y17, Px19y19, Px20y19, Px19y17, Px21y18, Px20y17 } CellNode (20 @ 18) (20)Px20y19 { Px19y18, Px21y19, Px20y20, Px20y18, Px19y19, Px21y20, Px21y18, Px19y20 } CellNode (20 @ 19) (20)Px20y2 { Px21y2, Px19y3, Px20y3, Px21y3, Px19y1, Px20y1, Px21y1, Px19y2 } CellNode (20 @ 2) (20)Px20y20 { Px21y21, Px21y19, Px19y21, Px19y19, Px20y21, Px21y20, Px20y19, Px19y20 } CellNode (20 @ 20) (20)Px20y21 { Px21y21, Px20y22, Px20y20, Px19y21, Px21y22, Px21y20, Px19y22, Px19y20 } CellNode (20 @ 21) (20)Px20y22 { Px21y21, Px19y23, Px19y21, Px21y22, Px20y23, Px20y21, Px19y22, Px21y23 } CellNode (20 @ 22) (20)Px20y23 { Px19y23, Px21y24, Px21y22, Px19y24, Px19y22, Px20y24, Px21y23, Px20y22 } CellNode (20 @ 23) (20)Px20y24 { Px19y23, Px20y25, Px21y24, Px20y23, Px19y24, Px21y25, Px21y23, Px19y25 } CellNode (20 @ 24) (20)Px20y25 { Px21y24, Px19y26, Px19y24, Px20y26, Px21y25, Px20y24, Px19y25, Px21y26 } CellNode (20 @ 25) (20)Px20y26 { Px19y25, Px20y25, Px19y26, Px21y27, Px21y25, Px19y27, Px20y27, Px21y26 } CellNode (20 @ 26) (20)Px20y27 { Px21y27, Px19y27, Px20y26, Px21y26, Px19y26 } CellNode (20 @ 27) (20)Px20y3 { Px19y2, Px20y2, Px21y2, Px19y3, Px21y3, Px19y4, Px20y4, Px21y4 } CellNode (20 @ 3) (20)Px20y4 { Px19y5, Px20y5, Px21y5, Px19y3, Px20y3, Px21y3, Px19y4, Px21y4 } CellNode (20 @ 4) (20)Px20y5 { Px19y5, Px21y5, Px19y6, Px20y6, Px19y4, Px21y6, Px20y4, Px21y4 } CellNode (20 @ 5) (20)Px20y6 { Px19y5, Px21y7, Px20y5, Px21y5, Px19y6, Px21y6, Px19y7, Px20y7 } CellNode (20 @ 6) (20)Px20y7 { Px21y7, Px19y8, Px20y8, Px19y6, Px21y8, Px20y6, Px21y6, Px19y7 } CellNode (20 @ 7) (20)Px20y8 { Px20y7, Px21y7, Px19y8, Px21y8, Px19y9, Px20y9, Px19y7, Px21y9 } CellNode (20 @ 8) (20)Px20y9 { Px20y10, Px19y10, Px19y8, Px20y8, Px21y8, Px19y9, Px21y10, Px21y9 } CellNode (20 @ 9) (20)Px21y1 { Px20y2, Px22y1, Px22y2, Px21y2, Px20y1 } CellNode (21 @ 1) (20)Px21y10 { Px20y10, Px21y11, Px22y10, Px22y9, Px20y11, Px22y11, Px20y9, Px21y9 } CellNode (21 @ 10) (20)Px21y11 { Px20y10, Px22y10, Px20y11, Px21y12, Px22y11, Px21y10, Px20y12, Px22y12 } CellNode (21 @ 11) (20)Px21y12 { Px21y11, Px20y13, Px22y13, Px20y11, Px22y11, Px20y12, Px21y13, Px22y12 } CellNode (21 @ 12) (20)Px21y13 { Px20y13, Px21y14, Px22y13, Px21y12, Px20y14, Px22y14, Px20y12, Px22y12 } CellNode (21 @ 13) (20)Px21y14 { Px22y15, Px20y13, Px22y13, Px20y14, Px21y15, Px22y14, Px21y13, Px20y15 } CellNode (21 @ 14) (20)Px21y15 { Px21y16, Px22y15, Px21y14, Px20y16, Px22y16, Px20y14, Px22y14, Px20y15 } CellNode (21 @ 15) (20)Px21y16 { Px22y15, Px20y16, Px21y17, Px22y16, Px21y15, Px20y17, Px22y17, Px20y15 } CellNode (21 @ 16) (20)Px21y17 { Px21y16, Px20y18, Px22y18, Px20y16, Px22y16, Px20y17, Px21y18, Px22y17 } CellNode (21 @ 17) (20)Px21y18 { Px20y18, Px21y19, Px22y18, Px21y17, Px20y19, Px22y19, Px20y17, Px22y17 } CellNode (21 @ 18) (20)Px21y19 { Px20y18, Px20y20, Px22y18, Px22y20, Px20y19, Px21y20, Px22y19, Px21y18 } CellNode (21 @ 19) (20)Px21y2 { Px20y2, Px22y2, Px20y3, Px21y3, Px20y1, Px22y3, Px21y1, Px22y1 } CellNode (21 @ 2) (20)Px21y20 { Px21y21, Px21y19, Px20y20, Px22y20, Px20y19, Px20y21, Px22y19, Px22y21 } CellNode (21 @ 20) (20)Px21y21 { Px22y22, Px20y20, Px22y20, Px21y22, Px20y21, Px21y20, Px22y21, Px20y22 } CellNode (21 @ 21) (20)Px21y22 { Px21y21, Px22y22, Px20y23, Px22y23, Px20y21, Px22y21, Px21y23, Px20y22 } CellNode (21 @ 22) (20)Px21y23 { Px22y22, Px21y24, Px20y23, Px21y22, Px22y23, Px20y24, Px22y24, Px20y22 } CellNode (21 @ 23) (20)Px21y24 { Px20y25, Px22y25, Px20y23, Px22y23, Px21y25, Px20y24, Px21y23, Px22y24 } CellNode (21 @ 24) (20)Px21y25 { Px20y25, Px21y24, Px22y25, Px20y26, Px22y26, Px20y24, Px22y24, Px21y26 } CellNode (21 @ 25) (20)Px21y26 { Px22y27, Px20y25, Px22y25, Px21y27, Px20y26, Px21y25, Px22y26, Px20y27 } CellNode (21 @ 26) (20)Px21y27 { Px22y26, Px20y26, Px22y27, Px21y26, Px20y27 } CellNode (21 @ 27) (20)Px21y3 { Px20y2, Px22y4, Px21y2, Px22y2, Px20y3, Px22y3, Px20y4, Px21y4 } CellNode (21 @ 3) (20)Px21y4 { Px22y4, Px20y5, Px21y5, Px20y3, Px22y5, Px21y3, Px22y3, Px20y4 } CellNode (21 @ 4) (20)Px21y5 { Px22y4, Px20y5, Px22y5, Px20y6, Px21y6, Px20y4, Px22y6, Px21y4 } CellNode (21 @ 5) (20)Px21y6 { Px21y7, Px20y5, Px22y7, Px21y5, Px22y5, Px20y6, Px22y6, Px20y7 } CellNode (21 @ 6) (20)Px21y7 { Px22y7, Px20y8, Px21y8, Px20y6, Px22y8, Px21y6, Px22y6, Px20y7 } CellNode (21 @ 7) (20)Px21y8 { Px22y9, Px21y7, Px22y7, Px20y8, Px22y8, Px20y9, Px21y9, Px20y7 } CellNode (21 @ 8) (20)Px21y9 { Px20y10, Px22y9, Px22y10, Px20y8, Px21y8, Px22y8, Px20y9, Px21y10 } CellNode (21 @ 9) (20)Px22y1 { Px23y2, Px22y2, Px21y1, Px21y2, Px23y1 } CellNode (22 @ 1) (20)Px22y10 { Px22y9, Px21y11, Px23y9, Px23y11, Px22y11, Px21y10, Px21y9, Px23y10 } CellNode (22 @ 10) (20)Px22y11 { Px21y11, Px22y10, Px23y11, Px23y12, Px21y12, Px21y10, Px23y10, Px22y12 } CellNode (22 @ 11) (20)Px22y12 { Px21y11, Px23y11, Px22y13, Px23y12, Px21y12, Px22y11, Px23y13, Px21y13 } CellNode (22 @ 12) (20)Px22y13 { Px23y14, Px21y14, Px23y12, Px21y12, Px22y14, Px23y13, Px21y13, Px22y12 } CellNode (22 @ 13) (20)Px22y14 { Px22y15, Px23y14, Px21y14, Px22y13, Px23y15, Px21y15, Px23y13, Px21y13 } CellNode (22 @ 14) (20)Px22y15 { Px21y16, Px23y14, Px21y14, Px22y16, Px23y15, Px21y15, Px22y14, Px23y16 } CellNode (22 @ 15) (20)Px22y16 { Px21y16, Px22y15, Px23y17, Px21y17, Px23y15, Px21y15, Px22y17, Px23y16 } CellNode (22 @ 16) (20)Px22y17 { Px21y16, Px22y18, Px23y17, Px21y17, Px22y16, Px23y18, Px21y18, Px23y16 } CellNode (22 @ 17) (20)Px22y18 { Px23y19, Px21y19, Px23y17, Px21y17, Px22y19, Px23y18, Px21y18, Px22y17 } CellNode (22 @ 18) (20)Px22y19 { Px23y19, Px21y19, Px22y18, Px22y20, Px21y20, Px23y18, Px21y18, Px23y20 } CellNode (22 @ 19) (20)Px22y2 { Px23y1, Px21y2, Px23y2, Px21y3, Px22y3, Px21y1, Px23y3, Px22y1 } CellNode (22 @ 2) (20)Px22y20 { Px21y21, Px23y19, Px21y19, Px23y21, Px22y19, Px22y21, Px21y20, Px23y20 } CellNode (22 @ 20) (20)Px22y21 { Px21y21, Px22y22, Px23y21, Px22y20, Px21y22, Px23y22, Px21y20, Px23y20 } CellNode (22 @ 21) (20)Px22y22 { Px21y21, Px23y21, Px21y22, Px22y23, Px23y22, Px22y21, Px21y23, Px23y23 } CellNode (22 @ 22) (20)Px22y23 { Px22y22, Px21y24, Px23y24, Px21y22, Px23y22, Px21y23, Px22y24, Px23y23 } CellNode (22 @ 23) (20)Px22y24 { Px21y24, Px22y25, Px23y24, Px22y23, Px21y25, Px23y25, Px21y23, Px23y23 } CellNode (22 @ 24) (20)Px22y25 { Px23y26, Px21y24, Px23y24, Px21y25, Px22y26, Px23y25, Px22y24, Px21y26 } CellNode (22 @ 25) (20)Px22y26 { Px22y27, Px23y26, Px22y25, Px21y27, Px23y27, Px21y25, Px23y25, Px21y26 } CellNode (22 @ 26) (20)Px22y27 { Px21y27, Px22y26, Px23y26, Px21y26, Px23y27 } CellNode (22 @ 27) (20)Px22y3 { Px22y4, Px21y2, Px23y4, Px22y2, Px23y2, Px21y3, Px23y3, Px21y4 } CellNode (22 @ 3) (20)Px22y4 { Px23y4, Px21y5, Px22y5, Px21y3, Px23y5, Px22y3, Px23y3, Px21y4 } CellNode (22 @ 4) (20)Px22y5 { Px23y6, Px22y4, Px23y4, Px21y5, Px23y5, Px21y6, Px22y6, Px21y4 } CellNode (22 @ 5) (20)Px22y6 { Px23y6, Px21y7, Px22y7, Px21y5, Px23y7, Px22y5, Px23y5, Px21y6 } CellNode (22 @ 6) (20)Px22y7 { Px23y6, Px21y7, Px23y7, Px21y8, Px22y8, Px21y6, Px23y8, Px22y6 } CellNode (22 @ 7) (20)Px22y8 { Px22y9, Px21y7, Px23y9, Px22y7, Px23y7, Px21y8, Px23y8, Px21y9 } CellNode (22 @ 8) (20)Px22y9 { Px22y10, Px23y9, Px21y8, Px22y8, Px21y10, Px23y8, Px21y9, Px23y10 } CellNode (22 @ 9) (20)Px23y1 { Px22y1, Px23y2, Px22y2, Px24y1, Px24y2 } CellNode (23 @ 1) (20)Px23y10 { Px22y9, Px22y10, Px23y11, Px24y9, Px24y10, Px23y9, Px22y11, Px24y11 } CellNode (23 @ 10) (20)Px23y11 { Px24y12, Px22y10, Px24y10, Px23y12, Px22y11, Px24y11, Px23y10, Px22y12 } CellNode (23 @ 11) (20)Px23y12 { Px24y12, Px23y11, Px22y13, Px24y13, Px22y11, Px24y11, Px23y13, Px22y12 } CellNode (23 @ 12) (20)Px23y13 { Px24y12, Px23y14, Px22y13, Px23y12, Px24y13, Px22y14, Px24y14, Px22y12 } CellNode (23 @ 13) (20)Px23y14 { Px22y15, Px24y15, Px22y13, Px24y13, Px23y15, Px22y14, Px23y13, Px24y14 } CellNode (23 @ 14) (20)Px23y15 { Px22y15, Px23y14, Px24y15, Px22y16, Px24y16, Px22y14, Px24y14, Px23y16 } CellNode (23 @ 15) (20)Px23y16 { Px24y17, Px22y15, Px24y15, Px23y17, Px22y16, Px23y15, Px24y16, Px22y17 } CellNode (23 @ 16) (20)Px23y17 { Px24y17, Px22y18, Px24y18, Px22y16, Px24y16, Px23y18, Px22y17, Px23y16 } CellNode (23 @ 17) (20)Px23y18 { Px24y17, Px23y19, Px22y18, Px23y17, Px24y18, Px22y19, Px24y19, Px22y17 } CellNode (23 @ 18) (20)Px23y19 { Px22y18, Px22y20, Px24y18, Px24y20, Px22y19, Px23y18, Px23y20, Px24y19 } CellNode (23 @ 19) (20)Px23y2 { Px24y3, Px23y1, Px24y1, Px22y2, Px24y2, Px22y3, Px23y3, Px22y1 } CellNode (23 @ 2) (20)Px23y20 { Px23y19, Px23y21, Px24y20, Px22y20, Px24y21, Px22y21, Px22y19, Px24y19 } CellNode (23 @ 20) (20)Px23y21 { Px24y22, Px22y22, Px24y20, Px22y20, Px23y22, Px24y21, Px22y21, Px23y20 } CellNode (23 @ 21) (20)Px23y22 { Px24y22, Px22y22, Px23y21, Px24y23, Px22y23, Px24y21, Px22y21, Px23y23 } CellNode (23 @ 22) (20)Px23y23 { Px24y22, Px22y22, Px23y24, Px24y23, Px22y23, Px23y22, Px24y24, Px22y24 } CellNode (23 @ 23) (20)Px23y24 { Px24y25, Px22y25, Px24y23, Px22y23, Px23y25, Px24y24, Px22y24, Px23y23 } CellNode (23 @ 24) (20)Px23y25 { Px23y26, Px24y25, Px22y25, Px23y24, Px24y26, Px22y26, Px24y24, Px22y24 } CellNode (23 @ 25) (20)Px23y26 { Px22y27, Px24y25, Px22y25, Px23y27, Px24y26, Px22y26, Px23y25, Px24y27 } CellNode (23 @ 26) (20)Px23y27 { Px24y27, Px22y26, Px23y26, Px22y27, Px24y26 } CellNode (23 @ 27) (20)Px23y3 { Px24y3, Px22y4, Px23y4, Px22y2, Px24y4, Px23y2, Px24y2, Px22y3 } CellNode (23 @ 3) (20)Px23y4 { Px24y3, Px22y4, Px24y4, Px22y5, Px23y5, Px22y3, Px24y5, Px23y3 } CellNode (23 @ 4) (20)Px23y5 { Px23y6, Px22y4, Px24y6, Px23y4, Px24y4, Px22y5, Px24y5, Px22y6 } CellNode (23 @ 5) (20)Px23y6 { Px24y6, Px22y7, Px23y7, Px22y5, Px24y7, Px23y5, Px24y5, Px22y6 } CellNode (23 @ 6) (20)Px23y7 { Px23y6, Px24y6, Px22y7, Px24y7, Px22y8, Px23y8, Px22y6, Px24y8 } CellNode (23 @ 7) (20)Px23y8 { Px22y9, Px23y9, Px22y7, Px24y9, Px23y7, Px24y7, Px22y8, Px24y8 } CellNode (23 @ 8) (20)Px23y9 { Px22y9, Px22y10, Px24y9, Px24y10, Px22y8, Px23y8, Px23y10, Px24y8 } CellNode (23 @ 9) (20)Px24y1 { Px23y1, Px23y2, Px25y1, Px25y2, Px24y2 } CellNode (24 @ 1) (20)Px24y10 { Px25y11, Px23y11, Px24y9, Px23y9, Px25y9, Px24y11, Px25y10, Px23y10 } CellNode (24 @ 10) (20)Px24y11 { Px24y12, Px25y11, Px23y11, Px24y10, Px23y12, Px25y12, Px25y10, Px23y10 } CellNode (24 @ 11) (20)Px24y12 { Px25y11, Px23y11, Px23y12, Px24y13, Px25y12, Px24y11, Px23y13, Px25y13 } CellNode (24 @ 12) (20)Px24y13 { Px24y12, Px23y14, Px25y14, Px23y12, Px25y12, Px23y13, Px24y14, Px25y13 } CellNode (24 @ 13) (20)Px24y14 { Px23y14, Px24y15, Px25y14, Px24y13, Px23y15, Px25y15, Px23y13, Px25y13 } CellNode (24 @ 14) (20)Px24y15 { Px25y16, Px23y14, Px25y14, Px23y15, Px24y16, Px25y15, Px24y14, Px23y16 } CellNode (24 @ 15) (20)Px24y16 { Px24y17, Px25y16, Px24y15, Px23y17, Px25y17, Px23y15, Px25y15, Px23y16 } CellNode (24 @ 16) (20)Px24y17 { Px25y16, Px23y17, Px24y18, Px25y17, Px24y16, Px23y18, Px25y18, Px23y16 } CellNode (24 @ 17) (20)Px24y18 { Px24y17, Px23y19, Px25y19, Px23y17, Px25y17, Px23y18, Px24y19, Px25y18 } CellNode (24 @ 18) (20)Px24y19 { Px23y19, Px25y19, Px24y20, Px24y18, Px23y18, Px23y20, Px25y18, Px25y20 } CellNode (24 @ 19) (20)Px24y2 { Px24y3, Px23y1, Px25y3, Px24y1, Px25y1, Px23y2, Px25y2, Px23y3 } CellNode (24 @ 2) (20)Px24y20 { Px23y19, Px23y21, Px25y19, Px25y21, Px24y21, Px23y20, Px24y19, Px25y20 } CellNode (24 @ 20) (20)Px24y21 { Px24y22, Px23y21, Px24y20, Px25y21, Px23y22, Px25y22, Px23y20, Px25y20 } CellNode (24 @ 21) (20)Px24y22 { Px25y23, Px23y21, Px25y21, Px24y23, Px23y22, Px24y21, Px25y22, Px23y23 } CellNode (24 @ 22) (20)Px24y23 { Px24y22, Px25y23, Px23y24, Px25y24, Px23y22, Px25y22, Px24y24, Px23y23 } CellNode (24 @ 23) (20)Px24y24 { Px25y23, Px24y25, Px23y24, Px24y23, Px25y24, Px23y25, Px25y25, Px23y23 } CellNode (24 @ 24) (20)Px24y25 { Px23y26, Px25y26, Px23y24, Px25y24, Px24y26, Px23y25, Px24y24, Px25y25 } CellNode (24 @ 25) (20)Px24y26 { Px23y26, Px24y25, Px25y26, Px23y27, Px25y27, Px23y25, Px25y25, Px24y27 } CellNode (24 @ 26) (20)Px24y27 { Px24y26, Px25y26, Px23y26, Px25y27, Px23y27 } CellNode (24 @ 27) (20)Px24y3 { Px25y3, Px23y4, Px24y4, Px23y2, Px25y4, Px24y2, Px25y2, Px23y3 } CellNode (24 @ 3) (20)Px24y4 { Px24y3, Px25y3, Px23y4, Px25y4, Px23y5, Px24y5, Px23y3, Px25y5 } CellNode (24 @ 4) (20)Px24y5 { Px23y6, Px24y6, Px23y4, Px25y6, Px24y4, Px25y4, Px23y5, Px25y5 } CellNode (24 @ 5) (20)Px24y6 { Px23y6, Px25y6, Px23y7, Px24y7, Px23y5, Px25y7, Px24y5, Px25y5 } CellNode (24 @ 6) (20)Px24y7 { Px23y6, Px25y8, Px24y6, Px25y6, Px23y7, Px25y7, Px23y8, Px24y8 } CellNode (24 @ 7) (20)Px24y8 { Px25y8, Px23y9, Px24y9, Px23y7, Px25y9, Px24y7, Px25y7, Px23y8 } CellNode (24 @ 8) (20)Px24y9 { Px23y8, Px25y8, Px23y9, Px24y10, Px25y9, Px25y10, Px23y10, Px24y8 } CellNode (24 @ 9) (20)Px25y1 { Px26y1, Px26y2, Px24y1, Px25y2, Px24y2 } CellNode (25 @ 1) (20)Px25y10 { Px25y11, Px24y9, Px24y10, Px25y9, Px26y10, Px26y9, Px24y11, Px26y11 } CellNode (25 @ 10) (20)Px25y11 { Px24y12, Px26y12, Px24y10, Px26y10, Px25y12, Px24y11, Px25y10, Px26y11 } CellNode (25 @ 11) (20)Px25y12 { Px24y12, Px25y11, Px26y12, Px24y13, Px26y13, Px24y11, Px26y11, Px25y13 } CellNode (25 @ 12) (20)Px25y13 { Px26y14, Px24y12, Px26y12, Px25y14, Px24y13, Px25y12, Px26y13, Px24y14 } CellNode (25 @ 13) (20)Px25y14 { Px26y14, Px24y15, Px26y15, Px24y13, Px26y13, Px25y15, Px24y14, Px25y13 } CellNode (25 @ 14) (20)Px25y15 { Px26y14, Px25y16, Px24y15, Px25y14, Px26y15, Px24y16, Px26y16, Px24y14 } CellNode (25 @ 15) (20)Px25y16 { Px24y17, Px26y17, Px24y15, Px26y15, Px25y17, Px24y16, Px25y15, Px26y16 } CellNode (25 @ 16) (20)Px25y17 { Px24y17, Px25y16, Px26y17, Px24y18, Px26y18, Px24y16, Px26y16, Px25y18 } CellNode (25 @ 17) (20)Px25y18 { Px24y17, Px26y17, Px25y19, Px24y18, Px25y17, Px26y18, Px24y19, Px26y19 } CellNode (25 @ 18) (20)Px25y19 { Px25y20, Px24y20, Px26y20, Px24y18, Px26y18, Px24y19, Px25y18, Px26y19 } CellNode (25 @ 19) (20)Px25y2 { Px24y3, Px25y3, Px24y1, Px26y3, Px25y1, Px26y1, Px24y2, Px26y2 } CellNode (25 @ 2) (20)Px25y20 { Px25y19, Px25y21, Px26y20, Px24y20, Px24y21, Px26y21, Px24y19, Px26y19 } CellNode (25 @ 20) (20)Px25y21 { Px24y22, Px26y22, Px24y20, Px26y20, Px24y21, Px25y22, Px26y21, Px25y20 } CellNode (25 @ 21) (20)Px25y22 { Px24y22, Px25y23, Px26y22, Px25y21, Px24y23, Px26y23, Px24y21, Px26y21 } CellNode (25 @ 22) (20)Px25y23 { Px24y22, Px26y22, Px24y23, Px25y24, Px26y23, Px25y22, Px24y24, Px26y24 } CellNode (25 @ 23) (20)Px25y24 { Px25y23, Px24y25, Px26y25, Px24y23, Px26y23, Px24y24, Px25y25, Px26y24 } CellNode (25 @ 24) (20)Px25y25 { Px24y25, Px25y26, Px26y25, Px25y24, Px24y26, Px26y26, Px24y24, Px26y24 } CellNode (25 @ 25) (20)Px25y26 { Px26y27, Px24y25, Px26y25, Px24y26, Px25y27, Px26y26, Px25y25, Px24y27 } CellNode (25 @ 26) (20)Px25y27 { Px26y27, Px24y27, Px25y26, Px26y26, Px24y26 } CellNode (25 @ 27) (20)Px25y3 { Px24y3, Px26y3, Px24y4, Px25y4, Px24y2, Px26y4, Px25y2, Px26y2 } CellNode (25 @ 3) (20)Px25y4 { Px24y3, Px26y5, Px25y3, Px26y3, Px24y4, Px26y4, Px24y5, Px25y5 } CellNode (25 @ 4) (20)Px25y5 { Px26y5, Px24y6, Px25y6, Px24y4, Px26y6, Px25y4, Px26y4, Px24y5 } CellNode (25 @ 5) (20)Px25y6 { Px26y5, Px24y6, Px26y6, Px24y7, Px25y7, Px24y5, Px26y7, Px25y5 } CellNode (25 @ 6) (20)Px25y7 { Px25y8, Px24y6, Px26y8, Px25y6, Px26y6, Px24y7, Px26y7, Px24y8 } CellNode (25 @ 7) (20)Px25y8 { Px26y8, Px24y9, Px25y9, Px24y7, Px26y9, Px25y7, Px26y7, Px24y8 } CellNode (25 @ 8) (20)Px25y9 { Px25y8, Px26y8, Px24y9, Px24y10, Px26y10, Px26y9, Px25y10, Px24y8 } CellNode (25 @ 9) (20)Px26y1 { Px27y2, Px25y1, Px26y2, Px25y2, Px27y1 } CellNode (26 @ 1) (20)Px26y10 { Px27y9, Px25y11, Px27y11, Px25y9, Px26y9, Px25y10, Px26y11, Px27y10 } CellNode (26 @ 10) (20)Px26y11 { Px25y11, Px26y12, Px27y11, Px26y10, Px25y12, Px27y12, Px25y10, Px27y10 } CellNode (26 @ 11) (20)Px26y12 { Px27y13, Px25y11, Px27y11, Px25y12, Px26y13, Px27y12, Px26y11, Px25y13 } CellNode (26 @ 12) (20)Px26y13 { Px26y14, Px27y13, Px26y12, Px25y14, Px27y14, Px25y12, Px27y12, Px25y13 } CellNode (26 @ 13) (20)Px26y14 { Px27y13, Px25y14, Px26y15, Px27y14, Px26y13, Px25y15, Px27y15, Px25y13 } CellNode (26 @ 14) (20)Px26y15 { Px26y14, Px25y16, Px27y16, Px25y14, Px27y14, Px25y15, Px26y16, Px27y15 } CellNode (26 @ 15) (20)Px26y16 { Px25y16, Px26y17, Px27y16, Px26y15, Px25y17, Px27y17, Px25y15, Px27y15 } CellNode (26 @ 16) (20)Px26y17 { Px27y18, Px25y16, Px27y16, Px25y17, Px26y18, Px27y17, Px26y16, Px25y18 } CellNode (26 @ 17) (20)Px26y18 { Px27y18, Px26y17, Px25y19, Px27y19, Px25y17, Px27y17, Px25y18, Px26y19 } CellNode (26 @ 18) (20)Px26y19 { Px27y18, Px27y20, Px25y19, Px27y19, Px26y20, Px26y18, Px25y18, Px25y20 } CellNode (26 @ 19) (20)Px26y2 { Px27y2, Px25y3, Px26y3, Px25y1, Px27y3, Px26y1, Px27y1, Px25y2 } CellNode (26 @ 2) (20)Px26y20 { Px25y20, Px27y20, Px25y19, Px25y21, Px27y19, Px27y21, Px26y21, Px26y19 } CellNode (26 @ 20) (20)Px26y21 { Px27y20, Px26y22, Px25y21, Px26y20, Px27y21, Px25y22, Px27y22, Px25y20 } CellNode (26 @ 21) (20)Px26y22 { Px25y23, Px27y23, Px25y21, Px27y21, Px26y23, Px25y22, Px26y21, Px27y22 } CellNode (26 @ 22) (20)Px26y23 { Px25y23, Px26y22, Px27y23, Px25y24, Px27y24, Px25y22, Px27y22, Px26y24 } CellNode (26 @ 23) (20)Px26y24 { Px27y25, Px25y23, Px27y23, Px26y25, Px25y24, Px26y23, Px27y24, Px25y25 } CellNode (26 @ 24) (20)Px26y25 { Px27y25, Px25y26, Px27y26, Px25y24, Px27y24, Px26y26, Px25y25, Px26y24 } CellNode (26 @ 25) (20)Px26y26 { Px27y25, Px26y27, Px25y26, Px26y25, Px27y26, Px25y27, Px27y27, Px25y25 } CellNode (26 @ 26) (20)Px26y27 { Px27y26, Px25y26, Px27y27, Px26y26, Px25y27 } CellNode (26 @ 27) (20)Px26y3 { Px27y2, Px25y3, Px27y3, Px25y4, Px26y4, Px25y2, Px27y4, Px26y2 } CellNode (26 @ 3) (20)Px26y4 { Px26y5, Px25y3, Px27y5, Px26y3, Px27y3, Px25y4, Px27y4, Px25y5 } CellNode (26 @ 4) (20)Px26y5 { Px27y5, Px25y6, Px26y6, Px25y4, Px27y6, Px26y4, Px27y4, Px25y5 } CellNode (26 @ 5) (20)Px26y6 { Px27y7, Px26y5, Px27y5, Px25y6, Px27y6, Px25y7, Px26y7, Px25y5 } CellNode (26 @ 6) (20)Px26y7 { Px27y7, Px25y8, Px26y8, Px25y6, Px27y8, Px26y6, Px27y6, Px25y7 } CellNode (26 @ 7) (20)Px26y8 { Px27y7, Px25y8, Px27y8, Px25y9, Px26y9, Px25y7, Px27y9, Px26y7 } CellNode (26 @ 8) (20)Px26y9 { Px25y8, Px26y8, Px27y8, Px25y9, Px26y10, Px25y10, Px27y9, Px27y10 } CellNode (26 @ 9) (20)Px27y1 { Px26y1, Px27y2, Px26y2, Px28y1, Px28y2 } CellNode (27 @ 1) (20)Px27y10 { Px28y11, Px27y11, Px26y10, Px28y10, Px26y9, Px27y9, Px26y11, Px28y9 } CellNode (27 @ 10) (20)Px27y11 { Px28y11, Px26y12, Px28y12, Px26y10, Px28y10, Px27y12, Px26y11, Px27y10 } CellNode (27 @ 11) (20)Px27y12 { Px28y11, Px27y13, Px26y12, Px27y11, Px28y12, Px26y13, Px28y13, Px26y11 } CellNode (27 @ 12) (20)Px27y13 { Px26y14, Px28y14, Px26y12, Px28y12, Px27y14, Px26y13, Px27y12, Px28y13 } CellNode (27 @ 13) (20)Px27y14 { Px26y14, Px27y13, Px28y14, Px26y15, Px28y15, Px26y13, Px28y13, Px27y15 } CellNode (27 @ 14) (20)Px27y15 { Px26y14, Px28y14, Px27y16, Px26y15, Px27y14, Px28y15, Px26y16, Px28y16 } CellNode (27 @ 15) (20)Px27y16 { Px26y17, Px28y17, Px26y15, Px28y15, Px27y17, Px26y16, Px27y15, Px28y16 } CellNode (27 @ 16) (20)Px27y17 { Px27y18, Px26y17, Px27y16, Px28y17, Px28y18, Px26y18, Px26y16, Px28y16 } CellNode (27 @ 17) (20)Px27y18 { Px26y17, Px28y17, Px27y19, Px28y18, Px26y18, Px27y17, Px28y19, Px26y19 } CellNode (27 @ 18) (20)Px27y19 { Px27y18, Px27y20, Px26y20, Px28y18, Px26y18, Px28y20, Px28y19, Px26y19 } CellNode (27 @ 19) (20)Px27y2 { Px28y2, Px26y3, Px27y3, Px26y1, Px28y3, Px27y1, Px28y1, Px26y2 } CellNode (27 @ 2) (20)Px27y20 { Px28y21, Px27y19, Px27y21, Px28y20, Px26y20, Px26y21, Px28y19, Px26y19 } CellNode (27 @ 20) (20)Px27y21 { Px27y20, Px26y22, Px28y22, Px26y20, Px28y20, Px26y21, Px27y22, Px28y21 } CellNode (27 @ 21) (20)Px27y22 { Px26y22, Px27y23, Px28y22, Px27y21, Px26y23, Px28y23, Px26y21, Px28y21 } CellNode (27 @ 22) (20)Px27y23 { Px28y24, Px26y22, Px28y22, Px26y23, Px27y24, Px28y23, Px27y22, Px26y24 } CellNode (27 @ 23) (20)Px27y24 { Px27y25, Px28y24, Px27y23, Px26y25, Px28y25, Px26y23, Px28y23, Px26y24 } CellNode (27 @ 24) (20)Px27y25 { Px28y24, Px26y25, Px27y26, Px28y25, Px27y24, Px26y26, Px28y26, Px26y24 } CellNode (27 @ 25) (20)Px27y26 { Px27y25, Px26y27, Px28y27, Px26y25, Px28y25, Px26y26, Px27y27, Px28y26 } CellNode (27 @ 26) (20)Px27y27 { Px26y27, Px27y26, Px28y26, Px26y26, Px28y27 } CellNode (27 @ 27) (20)Px27y3 { Px28y4, Px27y2, Px28y2, Px26y3, Px28y3, Px26y4, Px27y4, Px26y2 } CellNode (27 @ 3) (20)Px27y4 { Px28y4, Px26y5, Px27y5, Px26y3, Px28y5, Px27y3, Px28y3, Px26y4 } CellNode (27 @ 4) (20)Px27y5 { Px28y4, Px26y5, Px28y5, Px26y6, Px27y6, Px26y4, Px28y6, Px27y4 } CellNode (27 @ 5) (20)Px27y6 { Px27y7, Px26y5, Px28y7, Px27y5, Px28y5, Px26y6, Px28y6, Px26y7 } CellNode (27 @ 6) (20)Px27y7 { Px28y7, Px26y8, Px27y8, Px26y6, Px28y8, Px27y6, Px28y6, Px26y7 } CellNode (27 @ 7) (20)Px27y8 { Px27y7, Px28y7, Px26y8, Px28y8, Px26y9, Px27y9, Px26y7, Px28y9 } CellNode (27 @ 8) (20)Px27y9 { Px27y10, Px26y8, Px27y8, Px26y10, Px28y8, Px28y10, Px26y9, Px28y9 } CellNode (27 @ 9) (20)Px28y1 { Px27y2, Px29y1, Px29y2, Px28y2, Px27y1 } CellNode (28 @ 1) (20)Px28y10 { Px28y11, Px29y9, Px29y10, Px27y10, Px27y11, Px29y11, Px27y9, Px28y9 } CellNode (28 @ 10) (20)Px28y11 { Px29y10, Px27y11, Px28y12, Px29y11, Px28y10, Px27y12, Px29y12, Px27y10 } CellNode (28 @ 11) (20)Px28y12 { Px28y11, Px27y13, Px29y13, Px27y11, Px29y11, Px27y12, Px28y13, Px29y12 } CellNode (28 @ 12) (20)Px28y13 { Px27y13, Px28y14, Px29y13, Px28y12, Px27y14, Px29y14, Px27y12, Px29y12 } CellNode (28 @ 13) (20)Px28y14 { Px29y15, Px27y13, Px29y13, Px27y14, Px28y15, Px29y14, Px28y13, Px27y15 } CellNode (28 @ 14) (20)Px28y15 { Px29y15, Px28y14, Px27y16, Px29y16, Px27y14, Px29y14, Px27y15, Px28y16 } CellNode (28 @ 15) (20)Px28y16 { Px29y15, Px27y16, Px28y17, Px29y16, Px28y15, Px27y17, Px29y17, Px27y15 } CellNode (28 @ 16) (20)Px28y17 { Px27y18, Px29y18, Px27y16, Px29y16, Px28y18, Px27y17, Px29y17, Px28y16 } CellNode (28 @ 17) (20)Px28y18 { Px27y18, Px29y18, Px28y17, Px27y19, Px29y19, Px27y17, Px29y17, Px28y19 } CellNode (28 @ 18) (20)Px28y19 { Px27y18, Px27y20, Px29y18, Px29y20, Px27y19, Px28y18, Px28y20, Px29y19 } CellNode (28 @ 19) (20)Px28y2 { Px29y1, Px27y2, Px29y2, Px27y3, Px28y3, Px27y1, Px29y3, Px28y1 } CellNode (28 @ 2) (20)Px28y20 { Px27y20, Px29y20, Px29y21, Px27y19, Px27y21, Px29y19, Px28y19, Px28y21 } CellNode (28 @ 20) (20)Px28y21 { Px27y20, Px29y20, Px28y22, Px29y21, Px27y21, Px28y20, Px29y22, Px27y22 } CellNode (28 @ 21) (20)Px28y22 { Px29y23, Px27y23, Px29y21, Px27y21, Px28y23, Px29y22, Px27y22, Px28y21 } CellNode (28 @ 22) (20)Px28y23 { Px28y24, Px29y23, Px27y23, Px28y22, Px29y24, Px27y24, Px29y22, Px27y22 } CellNode (28 @ 23) (20)Px28y24 { Px27y25, Px29y23, Px27y23, Px28y25, Px29y24, Px27y24, Px28y23, Px29y25 } CellNode (28 @ 24) (20)Px28y25 { Px27y25, Px28y24, Px29y26, Px27y26, Px29y24, Px27y24, Px28y26, Px29y25 } CellNode (28 @ 25) (20)Px28y26 { Px27y25, Px28y27, Px29y26, Px27y26, Px28y25, Px29y27, Px27y27, Px29y25 } CellNode (28 @ 26) (20)Px28y27 { Px29y27, Px27y26, Px28y26, Px27y27, Px29y26 } CellNode (28 @ 27) (20)Px28y3 { Px28y4, Px27y2, Px29y4, Px28y2, Px29y2, Px27y3, Px29y3, Px27y4 } CellNode (28 @ 3) (20)Px28y4 { Px29y4, Px27y5, Px28y5, Px27y3, Px29y5, Px28y3, Px29y3, Px27y4 } CellNode (28 @ 4) (20)Px28y5 { Px28y4, Px29y4, Px27y5, Px29y5, Px27y6, Px28y6, Px27y4, Px29y6 } CellNode (28 @ 5) (20)Px28y6 { Px27y7, Px28y7, Px27y5, Px29y7, Px28y5, Px29y5, Px27y6, Px29y6 } CellNode (28 @ 6) (20)Px28y7 { Px27y7, Px29y7, Px27y8, Px28y8, Px27y6, Px29y8, Px28y6, Px29y6 } CellNode (28 @ 7) (20)Px28y8 { Px27y7, Px29y9, Px28y7, Px29y7, Px27y8, Px29y8, Px27y9, Px28y9 } CellNode (28 @ 8) (20)Px28y9 { Px29y9, Px29y10, Px27y8, Px28y8, Px28y10, Px29y8, Px27y9, Px27y10 } CellNode (28 @ 9) (20)Px29y1 { Px30y1, Px30y2, Px28y1, Px29y2, Px28y2 } CellNode (29 @ 1) (20)Px29y10 { Px28y11, Px29y9, Px30y9, Px30y10, Px29y11, Px28y10, Px30y11, Px28y9 } CellNode (29 @ 10) (20)Px29y11 { Px28y11, Px30y12, Px29y10, Px30y10, Px28y12, Px28y10, Px30y11, Px29y12 } CellNode (29 @ 11) (20)Px29y12 { Px28y11, Px30y12, Px29y13, Px28y12, Px29y11, Px30y13, Px30y11, Px28y13 } CellNode (29 @ 12) (20)Px29y13 { Px30y12, Px28y14, Px28y12, Px30y13, Px29y14, Px28y13, Px30y14, Px29y12 } CellNode (29 @ 13) (20)Px29y14 { Px29y15, Px28y14, Px30y15, Px29y13, Px30y13, Px28y15, Px28y13, Px30y14 } CellNode (29 @ 14) (20)Px29y15 { Px28y14, Px30y15, Px29y16, Px28y15, Px30y16, Px29y14, Px30y14, Px28y16 } CellNode (29 @ 15) (20)Px29y16 { Px30y17, Px29y15, Px30y15, Px28y17, Px28y15, Px30y16, Px29y17, Px28y16 } CellNode (29 @ 16) (20)Px29y17 { Px30y17, Px29y18, Px28y17, Px29y16, Px28y18, Px30y18, Px30y16, Px28y16 } CellNode (29 @ 17) (20)Px29y18 { Px30y17, Px28y17, Px30y18, Px28y18, Px29y19, Px30y19, Px28y19, Px29y17 } CellNode (29 @ 18) (20)Px29y19 { Px29y18, Px29y20, Px30y20, Px30y18, Px28y18, Px28y20, Px30y19, Px28y19 } CellNode (29 @ 19) (20)Px29y2 { Px29y1, Px30y1, Px28y2, Px30y2, Px28y3, Px29y3, Px30y3, Px28y1 } CellNode (29 @ 2) (20)Px29y20 { Px30y20, Px29y21, Px28y20, Px30y21, Px29y19, Px30y19, Px28y19, Px28y21 } CellNode (29 @ 20) (20)Px29y21 { Px30y22, Px29y20, Px28y22, Px30y20, Px28y20, Px30y21, Px29y22, Px28y21 } CellNode (29 @ 21) (20)Px29y22 { Px30y22, Px29y23, Px28y22, Px29y21, Px30y23, Px30y21, Px28y23, Px28y21 } CellNode (29 @ 22) (20)Px29y23 { Px30y22, Px28y24, Px28y22, Px30y23, Px29y24, Px28y23, Px29y22, Px30y24 } CellNode (29 @ 23) (20)Px29y24 { Px28y24, Px29y23, Px30y25, Px30y23, Px28y25, Px28y23, Px30y24, Px29y25 } CellNode (29 @ 24) (20)Px29y25 { Px28y24, Px30y25, Px29y26, Px28y25, Px30y26, Px29y24, Px30y24, Px28y26 } CellNode (29 @ 25) (20)Px29y26 { Px30y27, Px30y25, Px28y27, Px28y25, Px30y26, Px29y27, Px28y26, Px29y25 } CellNode (29 @ 26) (20)Px29y27 { Px28y27, Px30y26, Px28y26, Px30y27, Px29y26 } CellNode (29 @ 27) (20)Px29y3 { Px28y4, Px29y4, Px28y2, Px30y4, Px29y2, Px30y2, Px28y3, Px30y3 } CellNode (29 @ 3) (20)Px29y4 { Px28y4, Px30y4, Px28y5, Px29y5, Px28y3, Px30y5, Px29y3, Px30y3 } CellNode (29 @ 4) (20)Px29y5 { Px28y4, Px30y6, Px29y4, Px30y4, Px28y5, Px30y5, Px28y6, Px29y6 } CellNode (29 @ 5) (20)Px29y6 { Px30y6, Px28y7, Px29y7, Px28y5, Px30y7, Px29y5, Px30y5, Px28y6 } CellNode (29 @ 6) (20)Px29y7 { Px30y6, Px28y7, Px30y7, Px28y8, Px29y8, Px28y6, Px30y8, Px29y6 } CellNode (29 @ 7) (20)Px29y8 { Px29y9, Px28y7, Px30y9, Px29y7, Px30y7, Px28y8, Px30y8, Px28y9 } CellNode (29 @ 8) (20)Px29y9 { Px29y10, Px30y9, Px30y10, Px28y8, Px28y10, Px29y8, Px30y8, Px28y9 } CellNode (29 @ 9) (20)Px2y1 { Px2y2, Px1y2, Px3y1, Px3y2, Px1y1 } CellNode (2 @ 1) (20)Px2y10 { Px1y10, Px3y9, Px3y10, Px1y11, Px3y11, Px1y9, Px2y11, Px2y9 } CellNode (2 @ 10) (20)Px2y11 { Px1y10, Px3y10, Px2y12, Px1y11, Px2y10, Px3y11, Px1y12, Px3y12 } CellNode (2 @ 11) (20)Px2y12 { Px1y13, Px3y13, Px1y11, Px3y11, Px2y13, Px1y12, Px2y11, Px3y12 } CellNode (2 @ 12) (20)Px2y13 { Px2y14, Px1y13, Px2y12, Px3y13, Px1y14, Px3y14, Px1y12, Px3y12 } CellNode (2 @ 13) (20)Px2y14 { Px3y15, Px1y13, Px3y13, Px2y15, Px1y14, Px2y13, Px3y14, Px1y15 } CellNode (2 @ 14) (20)Px2y15 { Px2y14, Px3y15, Px1y16, Px3y16, Px1y14, Px3y14, Px2y16, Px1y15 } CellNode (2 @ 15) (20)Px2y16 { Px3y15, Px2y17, Px1y16, Px2y15, Px3y16, Px1y17, Px3y17, Px1y15 } CellNode (2 @ 16) (20)Px2y17 { Px1y18, Px3y18, Px1y16, Px3y16, Px2y18, Px1y17, Px2y16, Px3y17 } CellNode (2 @ 17) (20)Px2y18 { Px1y18, Px2y17, Px3y18, Px1y19, Px3y19, Px1y17, Px3y17, Px2y19 } CellNode (2 @ 18) (20)Px2y19 { Px1y18, Px3y20, Px3y18, Px1y20, Px1y19, Px2y18, Px3y19, Px2y20 } CellNode (2 @ 19) (20)Px2y2 { Px3y1, Px1y2, Px3y2, Px1y3, Px2y3, Px1y1, Px3y3, Px2y1 } CellNode (2 @ 2) (20)Px2y20 { Px2y21, Px3y20, Px1y20, Px1y19, Px3y21, Px3y19, Px1y21, Px2y19 } CellNode (2 @ 20) (20)Px2y21 { Px3y20, Px1y20, Px2y22, Px3y21, Px1y21, Px2y20, Px3y22, Px1y22 } CellNode (2 @ 21) (20)Px2y22 { Px2y21, Px3y23, Px1y23, Px3y21, Px1y21, Px2y23, Px3y22, Px1y22 } CellNode (2 @ 22) (20)Px2y23 { Px2y24, Px3y23, Px1y23, Px2y22, Px3y24, Px1y24, Px3y22, Px1y22 } CellNode (2 @ 23) (20)Px2y24 { Px3y25, Px1y25, Px3y23, Px1y23, Px2y25, Px3y24, Px1y24, Px2y23 } CellNode (2 @ 24) (20)Px2y25 { Px3y25, Px1y25, Px2y24, Px3y26, Px1y26, Px3y24, Px1y24, Px2y26 } CellNode (2 @ 25) (20)Px2y26 { Px3y25, Px1y25, Px2y27, Px3y26, Px1y26, Px2y25, Px3y27, Px1y27 } CellNode (2 @ 26) (20)Px2y27 { Px3y27, Px1y26, Px2y26, Px1y27, Px3y26 } CellNode (2 @ 27) (20)Px2y3 { Px2y4, Px1y2, Px3y4, Px2y2, Px3y2, Px1y3, Px3y3, Px1y4 } CellNode (2 @ 3) (20)Px2y4 { Px3y4, Px1y5, Px2y5, Px1y3, Px3y5, Px2y3, Px3y3, Px1y4 } CellNode (2 @ 4) (20)Px2y5 { Px2y4, Px3y4, Px1y5, Px3y5, Px1y6, Px2y6, Px1y4, Px3y6 } CellNode (2 @ 5) (20)Px2y6 { Px1y7, Px2y7, Px1y5, Px3y7, Px2y5, Px3y5, Px1y6, Px3y6 } CellNode (2 @ 6) (20)Px2y7 { Px1y7, Px3y7, Px1y8, Px2y8, Px1y6, Px3y8, Px2y6, Px3y6 } CellNode (2 @ 7) (20)Px2y8 { Px1y7, Px3y9, Px2y7, Px3y7, Px1y8, Px3y8, Px1y9, Px2y9 } CellNode (2 @ 8) (20)Px2y9 { Px1y10, Px3y9, Px3y10, Px1y8, Px2y10, Px2y8, Px3y8, Px1y9 } CellNode (2 @ 9) (20)Px30y1 { Px31y2, Px29y1, Px30y2, Px29y2, Px31y1 } CellNode (30 @ 1) (20)Px30y10 { Px29y9, Px29y10, Px30y9, Px31y9, Px31y11, Px29y11, Px30y11, Px31y10 } CellNode (30 @ 10) (20)Px30y11 { Px30y12, Px29y10, Px31y11, Px30y10, Px29y11, Px31y12, Px31y10, Px29y12 } CellNode (30 @ 11) (20)Px30y12 { Px31y11, Px29y13, Px30y13, Px31y12, Px29y11, Px30y11, Px29y12, Px31y13 } CellNode (30 @ 12) (20)Px30y13 { Px31y13, Px30y12, Px29y13, Px31y14, Px31y12, Px29y14, Px30y14, Px29y12 } CellNode (30 @ 13) (20)Px30y14 { Px29y15, Px30y15, Px29y13, Px31y14, Px30y13, Px29y14, Px31y15, Px31y13 } CellNode (30 @ 14) (20)Px30y15 { Px29y15, Px31y16, Px31y14, Px29y16, Px30y16, Px29y14, Px31y15, Px30y14 } CellNode (30 @ 15) (20)Px30y16 { Px30y17, Px31y16, Px29y15, Px30y15, Px29y16, Px31y17, Px31y15, Px29y17 } CellNode (30 @ 16) (20)Px30y17 { Px31y16, Px29y18, Px29y16, Px31y17, Px30y18, Px30y16, Px29y17, Px31y18 } CellNode (30 @ 17) (20)Px30y18 { Px30y17, Px29y18, Px31y19, Px31y17, Px29y19, Px30y19, Px31y18, Px29y17 } CellNode (30 @ 18) (20)Px30y19 { Px29y18, Px29y20, Px31y19, Px30y20, Px30y18, Px29y19, Px31y18, Px31y20 } CellNode (30 @ 19) (20)Px30y2 { Px31y3, Px30y1, Px29y1, Px31y1, Px29y2, Px31y2, Px29y3, Px30y3 } CellNode (30 @ 2) (20)Px30y20 { Px29y20, Px31y19, Px29y21, Px31y21, Px29y19, Px30y21, Px30y19, Px31y20 } CellNode (30 @ 20) (20)Px30y21 { Px30y22, Px29y20, Px31y21, Px29y21, Px30y20, Px31y22, Px29y22, Px31y20 } CellNode (30 @ 21) (20)Px30y22 { Px31y23, Px29y23, Px31y21, Px29y21, Px30y23, Px30y21, Px31y22, Px29y22 } CellNode (30 @ 22) (20)Px30y23 { Px30y22, Px31y23, Px29y23, Px31y24, Px29y24, Px31y22, Px29y22, Px30y24 } CellNode (30 @ 23) (20)Px30y24 { Px31y23, Px29y23, Px30y25, Px30y23, Px31y24, Px29y24, Px31y25, Px29y25 } CellNode (30 @ 24) (20)Px30y25 { Px31y26, Px29y26, Px31y24, Px29y24, Px30y26, Px30y24, Px31y25, Px29y25 } CellNode (30 @ 25) (20)Px30y26 { Px30y27, Px30y25, Px31y26, Px29y26, Px31y27, Px29y27, Px31y25, Px29y25 } CellNode (30 @ 26) (20)Px30y27 { Px31y26, Px29y27, Px31y27, Px30y26, Px29y26 } CellNode (30 @ 27) (20)Px30y3 { Px31y3, Px29y4, Px30y4, Px29y2, Px31y4, Px30y2, Px31y2, Px29y3 } CellNode (30 @ 3) (20)Px30y4 { Px31y3, Px29y4, Px31y4, Px29y5, Px30y5, Px31y5, Px30y3, Px29y3 } CellNode (30 @ 4) (20)Px30y5 { Px30y6, Px29y4, Px31y6, Px30y4, Px31y4, Px29y5, Px31y5, Px29y6 } CellNode (30 @ 5) (20)Px30y6 { Px31y6, Px29y7, Px30y7, Px29y5, Px31y7, Px30y5, Px31y5, Px29y6 } CellNode (30 @ 6) (20)Px30y7 { Px30y6, Px31y8, Px31y6, Px29y7, Px31y7, Px29y8, Px30y8, Px29y6 } CellNode (30 @ 7) (20)Px30y8 { Px29y9, Px30y9, Px29y7, Px31y9, Px30y7, Px31y7, Px29y8, Px31y8 } CellNode (30 @ 8) (20)Px30y9 { Px29y9, Px29y10, Px30y10, Px31y9, Px29y8, Px30y8, Px31y10, Px31y8 } CellNode (30 @ 9) (20)Px31y1 { Px30y1, Px30y2, Px31y2 } CellNode (31 @ 1) (20)Px31y10 { Px31y9, Px30y9, Px30y10, Px30y11, Px31y11 } CellNode (31 @ 10) (20)Px31y11 { Px31y12, Px30y10, Px30y11, Px31y10, Px30y12 } CellNode (31 @ 11) (20)Px31y12 { Px31y11, Px30y13, Px31y13, Px30y11, Px30y12 } CellNode (31 @ 12) (20)Px31y13 { Px30y13, Px31y12, Px30y14, Px31y14, Px30y12 } CellNode (31 @ 13) (20)Px31y14 { Px31y15, Px30y13, Px31y13, Px30y14, Px30y15 } CellNode (31 @ 14) (20)Px31y15 { Px30y16, Px31y16, Px30y14, Px30y15, Px31y14 } CellNode (31 @ 15) (20)Px31y16 { Px31y15, Px30y16, Px30y17, Px31y17, Px30y15 } CellNode (31 @ 16) (20)Px31y17 { Px30y16, Px30y17, Px31y16, Px30y18, Px31y18 } CellNode (31 @ 17) (20)Px31y18 { Px31y19, Px30y17, Px31y17, Px30y18, Px30y19 } CellNode (31 @ 18) (20)Px31y19 { Px30y19, Px31y20, Px30y18, Px30y20, Px31y18 } CellNode (31 @ 19) (20)Px31y2 { Px30y1, Px30y2, Px31y3, Px30y3, Px31y1 } CellNode (31 @ 2) (20)Px31y20 { Px30y21, Px31y19, Px31y21, Px30y20, Px30y19 } CellNode (31 @ 20) (20)Px31y21 { Px30y21, Px30y22, Px31y20, Px30y20, Px31y22 } CellNode (31 @ 21) (20)Px31y22 { Px30y21, Px31y23, Px30y22, Px31y21, Px30y23 } CellNode (31 @ 22) (20)Px31y23 { Px31y22, Px30y22, Px31y24, Px30y23, Px30y24 } CellNode (31 @ 23) (20)Px31y24 { Px30y25, Px31y23, Px30y23, Px31y25, Px30y24 } CellNode (31 @ 24) (20)Px31y25 { Px31y26, Px30y25, Px31y24, Px30y26, Px30y24 } CellNode (31 @ 25) (20)Px31y26 { Px30y25, Px31y27, Px30y26, Px31y25, Px30y27 } CellNode (31 @ 26) (20)Px31y27 { Px31y26, Px30y27, Px30y26 } CellNode (31 @ 27) (20)Px31y3 { Px31y2, Px30y2, Px30y3, Px31y4, Px30y4 } CellNode (31 @ 3) (20)Px31y4 { Px31y5, Px30y5, Px31y3, Px30y3, Px30y4 } CellNode (31 @ 4) (20)Px31y5 { Px30y5, Px31y6, Px30y6, Px31y4, Px30y4 } CellNode (31 @ 5) (20)Px31y6 { Px30y5, Px31y7, Px30y6, Px30y7, Px31y5 } CellNode (31 @ 6) (20)Px31y7 { Px30y8, Px31y6, Px30y6, Px31y8, Px30y7 } CellNode (31 @ 7) (20)Px31y8 { Px31y9, Px30y8, Px30y9, Px31y7, Px30y7 } CellNode (31 @ 8) (20)Px31y9 { Px30y8, Px30y10, Px30y9, Px31y10, Px31y8 } CellNode (31 @ 9) (20)Px3y1 { Px4y1, Px4y2, Px2y1, Px3y2, Px2y2 } CellNode (3 @ 1) (20)Px3y10 { Px4y11, Px3y9, Px4y9, Px2y10, Px3y11, Px4y10, Px2y11, Px2y9 } CellNode (3 @ 10) (20)Px3y11 { Px4y11, Px3y10, Px2y12, Px4y12, Px2y10, Px4y10, Px2y11, Px3y12 } CellNode (3 @ 11) (20)Px3y12 { Px4y11, Px2y12, Px3y13, Px4y12, Px3y11, Px2y13, Px4y13, Px2y11 } CellNode (3 @ 12) (20)Px3y13 { Px2y14, Px4y14, Px2y12, Px4y12, Px2y13, Px3y14, Px4y13, Px3y12 } CellNode (3 @ 13) (20)Px3y14 { Px2y14, Px3y15, Px4y14, Px3y13, Px2y15, Px4y15, Px2y13, Px4y13 } CellNode (3 @ 14) (20)Px3y15 { Px2y14, Px4y14, Px2y15, Px3y16, Px4y15, Px3y14, Px2y16, Px4y16 } CellNode (3 @ 15) (20)Px3y16 { Px3y15, Px2y17, Px4y17, Px2y15, Px4y15, Px2y16, Px3y17, Px4y16 } CellNode (3 @ 16) (20)Px3y17 { Px2y17, Px3y18, Px4y17, Px3y16, Px2y18, Px4y18, Px2y16, Px4y16 } CellNode (3 @ 17) (20)Px3y18 { Px4y19, Px2y17, Px4y17, Px2y18, Px3y19, Px4y18, Px3y17, Px2y19 } CellNode (3 @ 18) (20)Px3y19 { Px4y19, Px3y20, Px3y18, Px2y18, Px2y20, Px4y18, Px4y20, Px2y19 } CellNode (3 @ 19) (20)Px3y2 { Px3y1, Px4y1, Px2y2, Px4y2, Px2y3, Px3y3, Px2y1, Px4y3 } CellNode (3 @ 2) (20)Px3y20 { Px2y21, Px4y19, Px4y21, Px3y21, Px3y19, Px2y20, Px4y20, Px2y19 } CellNode (3 @ 20) (20)Px3y21 { Px2y21, Px3y20, Px4y21, Px2y22, Px4y22, Px2y20, Px4y20, Px3y22 } CellNode (3 @ 21) (20)Px3y22 { Px2y21, Px4y21, Px3y23, Px2y22, Px3y21, Px4y22, Px2y23, Px4y23 } CellNode (3 @ 22) (20)Px3y23 { Px2y24, Px4y24, Px2y22, Px4y22, Px3y24, Px2y23, Px3y22, Px4y23 } CellNode (3 @ 23) (20)Px3y24 { Px3y25, Px2y24, Px3y23, Px4y24, Px2y25, Px4y25, Px2y23, Px4y23 } CellNode (3 @ 24) (20)Px3y25 { Px4y26, Px2y24, Px4y24, Px3y26, Px2y25, Px3y24, Px4y25, Px2y26 } CellNode (3 @ 25) (20)Px3y26 { Px3y25, Px4y26, Px2y27, Px4y27, Px2y25, Px4y25, Px3y27, Px2y26 } CellNode (3 @ 26) (20)Px3y27 { Px3y26, Px4y26, Px2y26, Px4y27, Px2y27 } CellNode (3 @ 27) (20)Px3y3 { Px2y4, Px3y4, Px2y2, Px4y4, Px3y2, Px4y2, Px2y3, Px4y3 } CellNode (3 @ 3) (20)Px3y4 { Px2y4, Px4y4, Px2y5, Px3y5, Px2y3, Px4y5, Px3y3, Px4y3 } CellNode (3 @ 4) (20)Px3y5 { Px2y4, Px4y6, Px3y4, Px4y4, Px2y5, Px4y5, Px2y6, Px3y6 } CellNode (3 @ 5) (20)Px3y6 { Px4y6, Px2y7, Px3y7, Px2y5, Px4y7, Px3y5, Px4y5, Px2y6 } CellNode (3 @ 6) (20)Px3y7 { Px4y6, Px2y7, Px4y7, Px2y8, Px3y8, Px2y6, Px4y8, Px3y6 } CellNode (3 @ 7) (20)Px3y8 { Px3y9, Px2y7, Px4y9, Px3y7, Px4y7, Px2y8, Px4y8, Px2y9 } CellNode (3 @ 8) (20)Px3y9 { Px3y10, Px4y9, Px2y10, Px2y8, Px4y10, Px3y8, Px4y8, Px2y9 } CellNode (3 @ 9) (20)Px4y1 { Px5y2, Px4y2, Px3y1, Px3y2, Px5y1 } CellNode (4 @ 1) (20)Px4y10 { Px4y11, Px3y9, Px3y10, Px4y9, Px5y10, Px5y9, Px3y11, Px5y11 } CellNode (4 @ 10) (20)Px4y11 { Px5y12, Px3y10, Px5y10, Px4y12, Px3y11, Px4y10, Px5y11, Px3y12 } CellNode (4 @ 11) (20)Px4y12 { Px4y11, Px5y12, Px3y13, Px5y13, Px3y11, Px5y11, Px4y13, Px3y12 } CellNode (4 @ 12) (20)Px4y13 { Px5y12, Px4y14, Px3y13, Px4y12, Px5y13, Px3y14, Px5y14, Px3y12 } CellNode (4 @ 13) (20)Px4y14 { Px3y15, Px5y15, Px3y13, Px5y13, Px4y15, Px3y14, Px4y13, Px5y14 } CellNode (4 @ 14) (20)Px4y15 { Px3y15, Px4y14, Px5y15, Px3y16, Px5y16, Px3y14, Px5y14, Px4y16 } CellNode (4 @ 15) (20)Px4y16 { Px5y17, Px3y15, Px5y15, Px4y17, Px3y16, Px4y15, Px5y16, Px3y17 } CellNode (4 @ 16) (20)Px4y17 { Px5y17, Px3y18, Px5y18, Px3y16, Px5y16, Px4y18, Px3y17, Px4y16 } CellNode (4 @ 17) (20)Px4y18 { Px5y17, Px4y19, Px3y18, Px4y17, Px5y18, Px3y19, Px5y19, Px3y17 } CellNode (4 @ 18) (20)Px4y19 { Px3y20, Px5y20, Px3y18, Px5y18, Px3y19, Px4y18, Px5y19, Px4y20 } CellNode (4 @ 19) (20)Px4y2 { Px3y1, Px5y3, Px4y1, Px5y1, Px3y2, Px5y2, Px3y3, Px4y3 } CellNode (4 @ 2) (20)Px4y20 { Px4y19, Px3y20, Px5y20, Px4y21, Px3y21, Px5y21, Px3y19, Px5y19 } CellNode (4 @ 20) (20)Px4y21 { Px5y22, Px3y20, Px5y20, Px3y21, Px4y22, Px5y21, Px4y20, Px3y22 } CellNode (4 @ 21) (20)Px4y22 { Px5y22, Px4y21, Px3y23, Px5y23, Px3y21, Px5y21, Px3y22, Px4y23 } CellNode (4 @ 22) (20)Px4y23 { Px5y22, Px3y23, Px4y24, Px5y23, Px4y22, Px3y24, Px5y24, Px3y22 } CellNode (4 @ 23) (20)Px4y24 { Px3y25, Px5y25, Px3y23, Px5y23, Px3y24, Px4y25, Px5y24, Px4y23 } CellNode (4 @ 24) (20)Px4y25 { Px3y25, Px4y26, Px5y25, Px4y24, Px3y26, Px5y26, Px3y24, Px5y24 } CellNode (4 @ 25) (20)Px4y26 { Px3y25, Px5y25, Px3y26, Px4y27, Px5y26, Px4y25, Px3y27, Px5y27 } CellNode (4 @ 26) (20)Px4y27 { Px5y27, Px3y27, Px4y26, Px5y26, Px3y26 } CellNode (4 @ 27) (20)Px4y3 { Px5y3, Px3y4, Px4y4, Px3y2, Px5y4, Px4y2, Px5y2, Px3y3 } CellNode (4 @ 3) (20)Px4y4 { Px5y3, Px3y4, Px5y4, Px3y5, Px4y5, Px3y3, Px5y5, Px4y3 } CellNode (4 @ 4) (20)Px4y5 { Px4y6, Px3y4, Px5y6, Px4y4, Px5y4, Px3y5, Px5y5, Px3y6 } CellNode (4 @ 5) (20)Px4y6 { Px5y6, Px3y7, Px4y7, Px3y5, Px5y7, Px4y5, Px5y5, Px3y6 } CellNode (4 @ 6) (20)Px4y7 { Px5y8, Px4y6, Px5y6, Px3y7, Px5y7, Px3y8, Px4y8, Px3y6 } CellNode (4 @ 7) (20)Px4y8 { Px5y8, Px3y9, Px4y9, Px3y7, Px5y9, Px4y7, Px5y7, Px3y8 } CellNode (4 @ 8) (20)Px4y9 { Px5y8, Px3y9, Px3y10, Px5y10, Px5y9, Px4y10, Px3y8, Px4y8 } CellNode (4 @ 9) (20)Px5y1 { Px4y1, Px6y2, Px4y2, Px5y2, Px6y1 } CellNode (5 @ 1) (20)Px5y10 { Px4y11, Px6y11, Px4y9, Px5y9, Px6y9, Px4y10, Px5y11, Px6y10 } CellNode (5 @ 10) (20)Px5y11 { Px4y11, Px5y12, Px6y11, Px5y10, Px4y12, Px6y12, Px4y10, Px6y10 } CellNode (5 @ 11) (20)Px5y12 { Px4y11, Px6y11, Px4y12, Px5y13, Px6y12, Px5y11, Px4y13, Px6y13 } CellNode (5 @ 12) (20)Px5y13 { Px5y12, Px4y14, Px6y14, Px4y12, Px6y12, Px4y13, Px5y14, Px6y13 } CellNode (5 @ 13) (20)Px5y14 { Px4y14, Px5y15, Px6y14, Px5y13, Px4y15, Px6y15, Px4y13, Px6y13 } CellNode (5 @ 14) (20)Px5y15 { Px6y16, Px4y14, Px6y14, Px4y15, Px5y16, Px6y15, Px5y14, Px4y16 } CellNode (5 @ 15) (20)Px5y16 { Px5y17, Px6y16, Px5y15, Px4y17, Px6y17, Px4y15, Px6y15, Px4y16 } CellNode (5 @ 16) (20)Px5y17 { Px6y16, Px4y17, Px5y18, Px6y17, Px5y16, Px4y18, Px6y18, Px4y16 } CellNode (5 @ 17) (20)Px5y18 { Px5y17, Px4y19, Px6y19, Px4y17, Px6y17, Px4y18, Px5y19, Px6y18 } CellNode (5 @ 18) (20)Px5y19 { Px4y19, Px6y19, Px5y20, Px5y18, Px4y18, Px4y20, Px6y18, Px6y20 } CellNode (5 @ 19) (20)Px5y2 { Px5y3, Px4y1, Px6y2, Px5y1, Px6y3, Px4y2, Px6y1, Px4y3 } CellNode (5 @ 2) (20)Px5y20 { Px4y19, Px4y21, Px6y19, Px6y21, Px5y21, Px5y19, Px4y20, Px6y20 } CellNode (5 @ 20) (20)Px5y21 { Px5y22, Px4y21, Px5y20, Px6y21, Px4y22, Px6y22, Px4y20, Px6y20 } CellNode (5 @ 21) (20)Px5y22 { Px6y23, Px4y21, Px6y21, Px5y23, Px4y22, Px5y21, Px6y22, Px4y23 } CellNode (5 @ 22) (20)Px5y23 { Px5y22, Px6y23, Px4y24, Px6y24, Px4y22, Px6y22, Px5y24, Px4y23 } CellNode (5 @ 23) (20)Px5y24 { Px6y23, Px5y25, Px4y24, Px5y23, Px6y24, Px4y25, Px6y25, Px4y23 } CellNode (5 @ 24) (20)Px5y25 { Px4y26, Px6y26, Px4y24, Px6y24, Px5y26, Px4y25, Px5y24, Px6y25 } CellNode (5 @ 25) (20)Px5y26 { Px4y26, Px5y25, Px6y26, Px4y27, Px6y27, Px4y25, Px6y25, Px5y27 } CellNode (5 @ 26) (20)Px5y27 { Px6y26, Px4y26, Px6y27, Px5y26, Px4y27 } CellNode (5 @ 27) (20)Px5y3 { Px6y2, Px4y4, Px5y4, Px4y2, Px6y3, Px5y2, Px6y4, Px4y3 } CellNode (5 @ 3) (20)Px5y4 { Px5y5, Px5y3, Px6y5, Px4y4, Px6y3, Px4y5, Px6y4, Px4y3 } CellNode (5 @ 4) (20)Px5y5 { Px4y6, Px6y5, Px5y6, Px4y4, Px5y4, Px6y6, Px4y5, Px6y4 } CellNode (5 @ 5) (20)Px5y6 { Px6y7, Px4y6, Px6y5, Px4y7, Px6y6, Px5y7, Px4y5, Px5y5 } CellNode (5 @ 6) (20)Px5y7 { Px6y7, Px5y8, Px4y6, Px5y6, Px6y8, Px4y7, Px6y6, Px4y8 } CellNode (5 @ 7) (20)Px5y8 { Px6y7, Px6y8, Px4y9, Px5y9, Px4y7, Px6y9, Px5y7, Px4y8 } CellNode (5 @ 8) (20)Px5y9 { Px5y8, Px6y8, Px4y9, Px5y10, Px6y9, Px4y10, Px6y10, Px4y8 } CellNode (5 @ 9) (20)Px6y1 { Px5y2, Px6y2, Px7y1, Px5y1, Px7y2 } CellNode (6 @ 1) (20)Px6y10 { Px6y11, Px7y10, Px5y10, Px5y9, Px6y9, Px7y11, Px5y11, Px7y9 } CellNode (6 @ 10) (20)Px6y11 { Px7y12, Px5y12, Px7y10, Px5y10, Px6y12, Px7y11, Px5y11, Px6y10 } CellNode (6 @ 11) (20)Px6y12 { Px7y12, Px5y12, Px6y11, Px7y13, Px5y13, Px7y11, Px5y11, Px6y13 } CellNode (6 @ 12) (20)Px6y13 { Px7y12, Px5y12, Px6y14, Px7y13, Px5y13, Px6y12, Px7y14, Px5y14 } CellNode (6 @ 13) (20)Px6y14 { Px7y15, Px5y15, Px7y13, Px5y13, Px6y15, Px7y14, Px5y14, Px6y13 } CellNode (6 @ 14) (20)Px6y15 { Px6y16, Px7y15, Px5y15, Px6y14, Px7y16, Px5y16, Px7y14, Px5y14 } CellNode (6 @ 15) (20)Px6y16 { Px5y17, Px7y15, Px5y15, Px6y17, Px7y16, Px5y16, Px6y15, Px7y17 } CellNode (6 @ 16) (20)Px6y17 { Px5y17, Px6y16, Px7y18, Px5y18, Px7y16, Px5y16, Px6y18, Px7y17 } CellNode (6 @ 17) (20)Px6y18 { Px5y17, Px6y19, Px7y18, Px5y18, Px6y17, Px7y19, Px5y19, Px7y17 } CellNode (6 @ 18) (20)Px6y19 { Px5y20, Px7y18, Px5y18, Px7y20, Px7y19, Px5y19, Px6y18, Px6y20 } CellNode (6 @ 19) (20)Px6y2 { Px5y3, Px7y2, Px5y1, Px6y3, Px7y3, Px5y2, Px6y1, Px7y1 } CellNode (6 @ 2) (20)Px6y20 { Px6y19, Px6y21, Px5y20, Px7y20, Px5y21, Px7y19, Px5y19, Px7y21 } CellNode (6 @ 20) (20)Px6y21 { Px5y22, Px7y22, Px5y20, Px7y20, Px5y21, Px6y22, Px7y21, Px6y20 } CellNode (6 @ 21) (20)Px6y22 { Px5y22, Px6y23, Px7y22, Px6y21, Px5y23, Px7y23, Px5y21, Px7y21 } CellNode (6 @ 22) (20)Px6y23 { Px5y22, Px7y22, Px5y23, Px6y24, Px7y23, Px6y22, Px5y24, Px7y24 } CellNode (6 @ 23) (20)Px6y24 { Px6y23, Px5y25, Px7y25, Px5y23, Px7y23, Px5y24, Px6y25, Px7y24 } CellNode (6 @ 24) (20)Px6y25 { Px5y25, Px6y26, Px7y25, Px6y24, Px5y26, Px7y26, Px5y24, Px7y24 } CellNode (6 @ 25) (20)Px6y26 { Px7y27, Px5y25, Px7y25, Px5y26, Px6y27, Px7y26, Px6y25, Px5y27 } CellNode (6 @ 26) (20)Px6y27 { Px5y27, Px6y26, Px7y26, Px5y26, Px7y27 } CellNode (6 @ 27) (20)Px6y3 { Px7y4, Px5y3, Px6y2, Px7y2, Px5y4, Px7y3, Px5y2, Px6y4 } CellNode (6 @ 3) (20)Px6y4 { Px7y4, Px5y3, Px6y5, Px7y5, Px6y3, Px5y4, Px7y3, Px5y5 } CellNode (6 @ 4) (20)Px6y5 { Px7y4, Px5y6, Px7y5, Px5y4, Px6y6, Px7y6, Px6y4, Px5y5 } CellNode (6 @ 5) (20)Px6y6 { Px6y7, Px7y7, Px6y5, Px5y6, Px7y5, Px5y7, Px7y6, Px5y5 } CellNode (6 @ 6) (20)Px6y7 { Px5y8, Px7y7, Px5y6, Px6y8, Px7y8, Px6y6, Px5y7, Px7y6 } CellNode (6 @ 7) (20)Px6y8 { Px6y7, Px5y8, Px7y7, Px5y9, Px6y9, Px7y8, Px5y7, Px7y9 } CellNode (6 @ 8) (20)Px6y9 { Px5y8, Px6y8, Px7y10, Px5y10, Px5y9, Px7y8, Px6y10, Px7y9 } CellNode (6 @ 9) (20)Px7y1 { Px6y2, Px8y1, Px8y2, Px7y2, Px6y1 } CellNode (7 @ 1) (20)Px7y10 { Px8y10, Px8y9, Px6y11, Px8y11, Px6y9, Px7y11, Px6y10, Px7y9 } CellNode (7 @ 10) (20)Px7y11 { Px7y12, Px6y11, Px7y10, Px8y11, Px6y12, Px8y12, Px6y10, Px8y10 } CellNode (7 @ 11) (20)Px7y12 { Px8y13, Px6y11, Px8y11, Px7y13, Px6y12, Px7y11, Px8y12, Px6y13 } CellNode (7 @ 12) (20)Px7y13 { Px7y12, Px8y13, Px6y14, Px8y14, Px6y12, Px8y12, Px7y14, Px6y13 } CellNode (7 @ 13) (20)Px7y14 { Px8y13, Px7y15, Px6y14, Px7y13, Px8y14, Px6y15, Px8y15, Px6y13 } CellNode (7 @ 14) (20)Px7y15 { Px6y16, Px8y16, Px6y14, Px8y14, Px7y16, Px6y15, Px7y14, Px8y15 } CellNode (7 @ 15) (20)Px7y16 { Px6y16, Px7y15, Px8y16, Px6y17, Px8y17, Px6y15, Px8y15, Px7y17 } CellNode (7 @ 16) (20)Px7y17 { Px8y18, Px6y16, Px8y16, Px7y18, Px6y17, Px7y16, Px8y17, Px6y18 } CellNode (7 @ 17) (20)Px7y18 { Px8y18, Px6y19, Px8y19, Px6y17, Px8y17, Px7y19, Px6y18, Px7y17 } CellNode (7 @ 18) (20)Px7y19 { Px6y18, Px8y18, Px6y19, Px7y18, Px8y19, Px7y20, Px8y20, Px6y20 } CellNode (7 @ 19) (20)Px7y2 { Px8y1, Px6y2, Px8y2, Px6y3, Px7y3, Px6y1, Px8y3, Px7y1 } CellNode (7 @ 2) (20)Px7y20 { Px8y21, Px6y21, Px8y19, Px6y19, Px7y19, Px7y21, Px8y20, Px6y20 } CellNode (7 @ 20) (20)Px7y21 { Px7y22, Px8y21, Px6y21, Px7y20, Px8y22, Px6y22, Px8y20, Px6y20 } CellNode (7 @ 21) (20)Px7y22 { Px8y23, Px6y23, Px8y21, Px6y21, Px7y23, Px8y22, Px6y22, Px7y21 } CellNode (7 @ 22) (20)Px7y23 { Px8y23, Px6y23, Px7y22, Px8y24, Px6y24, Px8y22, Px6y22, Px7y24 } CellNode (7 @ 23) (20)Px7y24 { Px8y23, Px6y23, Px7y25, Px8y24, Px6y24, Px7y23, Px8y25, Px6y25 } CellNode (7 @ 24) (20)Px7y25 { Px8y26, Px6y26, Px8y24, Px6y24, Px7y26, Px8y25, Px6y25, Px7y24 } CellNode (7 @ 25) (20)Px7y26 { Px7y27, Px8y26, Px6y26, Px7y25, Px8y27, Px6y27, Px8y25, Px6y25 } CellNode (7 @ 26) (20)Px7y27 { Px8y27, Px6y26, Px7y26, Px6y27, Px8y26 } CellNode (7 @ 27) (20)Px7y3 { Px7y4, Px6y2, Px8y4, Px7y2, Px8y2, Px6y3, Px8y3, Px6y4 } CellNode (7 @ 3) (20)Px7y4 { Px8y4, Px6y5, Px7y5, Px6y3, Px8y5, Px7y3, Px8y3, Px6y4 } CellNode (7 @ 4) (20)Px7y5 { Px7y4, Px8y4, Px6y5, Px8y5, Px6y6, Px7y6, Px6y4, Px8y6 } CellNode (7 @ 5) (20)Px7y6 { Px6y7, Px7y7, Px6y5, Px8y7, Px7y5, Px8y5, Px6y6, Px8y6 } CellNode (7 @ 6) (20)Px7y7 { Px6y7, Px6y8, Px8y7, Px7y8, Px6y6, Px8y8, Px7y6, Px8y6 } CellNode (7 @ 7) (20)Px7y8 { Px6y7, Px8y9, Px7y7, Px6y8, Px8y7, Px6y9, Px8y8, Px7y9 } CellNode (7 @ 8) (20)Px7y9 { Px8y9, Px6y8, Px7y10, Px6y9, Px7y8, Px8y8, Px6y10, Px8y10 } CellNode (7 @ 9) (20)Px8y1 { Px9y2, Px8y2, Px7y1, Px7y2, Px9y1 } CellNode (8 @ 1) (20)Px8y10 { Px8y9, Px7y10, Px9y9, Px8y11, Px9y10, Px7y11, Px9y11, Px7y9 } CellNode (8 @ 10) (20)Px8y11 { Px7y12, Px9y12, Px7y10, Px9y10, Px7y11, Px8y12, Px9y11, Px8y10 } CellNode (8 @ 11) (20)Px8y12 { Px7y12, Px8y13, Px9y12, Px8y11, Px7y13, Px9y13, Px7y11, Px9y11 } CellNode (8 @ 12) (20)Px8y13 { Px7y12, Px9y12, Px7y13, Px8y14, Px9y13, Px8y12, Px7y14, Px9y14 } CellNode (8 @ 13) (20)Px8y14 { Px8y13, Px7y15, Px9y15, Px7y13, Px9y13, Px7y14, Px8y15, Px9y14 } CellNode (8 @ 14) (20)Px8y15 { Px7y15, Px8y16, Px9y15, Px8y14, Px7y16, Px9y16, Px7y14, Px9y14 } CellNode (8 @ 15) (20)Px8y16 { Px9y17, Px7y15, Px9y15, Px7y16, Px8y17, Px9y16, Px8y15, Px7y17 } CellNode (8 @ 16) (20)Px8y17 { Px8y18, Px9y17, Px8y16, Px7y18, Px9y18, Px7y16, Px9y16, Px7y17 } CellNode (8 @ 17) (20)Px8y18 { Px9y17, Px7y18, Px8y19, Px9y18, Px8y17, Px7y19, Px9y19, Px7y17 } CellNode (8 @ 18) (20)Px8y19 { Px8y18, Px7y18, Px7y20, Px9y18, Px9y20, Px7y19, Px8y20, Px9y19 } CellNode (8 @ 19) (20)Px8y2 { Px8y1, Px9y1, Px7y2, Px9y2, Px7y3, Px8y3, Px7y1, Px9y3 } CellNode (8 @ 2) (20)Px8y20 { Px8y21, Px8y19, Px7y20, Px9y20, Px7y19, Px7y21, Px9y19, Px9y21 } CellNode (8 @ 20) (20)Px8y21 { Px7y22, Px9y22, Px7y20, Px9y20, Px8y22, Px7y21, Px8y20, Px9y21 } CellNode (8 @ 21) (20)Px8y22 { Px8y23, Px7y22, Px8y21, Px9y22, Px7y23, Px9y23, Px7y21, Px9y21 } CellNode (8 @ 22) (20)Px8y23 { Px9y24, Px7y22, Px9y22, Px8y24, Px7y23, Px8y22, Px9y23, Px7y24 } CellNode (8 @ 23) (20)Px8y24 { Px8y23, Px9y24, Px7y25, Px9y25, Px7y23, Px9y23, Px8y25, Px7y24 } CellNode (8 @ 24) (20)Px8y25 { Px9y24, Px8y26, Px7y25, Px8y24, Px9y25, Px7y26, Px9y26, Px7y24 } CellNode (8 @ 25) (20)Px8y26 { Px7y27, Px9y27, Px7y25, Px9y25, Px8y27, Px7y26, Px8y25, Px9y26 } CellNode (8 @ 26) (20)Px8y27 { Px8y26, Px9y26, Px7y26, Px9y27, Px7y27 } CellNode (8 @ 27) (20)Px8y3 { Px7y4, Px8y4, Px7y2, Px9y4, Px8y2, Px9y2, Px7y3, Px9y3 } CellNode (8 @ 3) (20)Px8y4 { Px7y4, Px9y4, Px7y5, Px8y5, Px7y3, Px9y5, Px8y3, Px9y3 } CellNode (8 @ 4) (20)Px8y5 { Px7y4, Px9y6, Px8y4, Px9y4, Px7y5, Px9y5, Px7y6, Px8y6 } CellNode (8 @ 5) (20)Px8y6 { Px9y6, Px7y7, Px8y7, Px7y5, Px9y7, Px8y5, Px9y5, Px7y6 } CellNode (8 @ 6) (20)Px8y7 { Px9y6, Px7y7, Px9y7, Px7y8, Px8y8, Px7y6, Px9y8, Px8y6 } CellNode (8 @ 7) (20)Px8y8 { Px8y9, Px7y7, Px9y9, Px8y7, Px9y7, Px7y8, Px9y8, Px7y9 } CellNode (8 @ 8) (20)Px8y9 { Px8y10, Px7y10, Px9y9, Px9y10, Px7y8, Px8y8, Px9y8, Px7y9 } CellNode (8 @ 9) (20)Px9y1 { Px10y1, Px8y1, Px10y2, Px8y2, Px9y2 } CellNode (9 @ 1) (20)Px9y10 { Px10y10, Px8y9, Px10y9, Px9y9, Px8y11, Px10y11, Px9y11, Px8y10 } CellNode (9 @ 10) (20)Px9y11 { Px10y10, Px9y12, Px8y11, Px9y10, Px10y11, Px10y12, Px8y12, Px8y10 } CellNode (9 @ 11) (20)Px9y12 { Px10y13, Px8y13, Px8y11, Px10y11, Px9y13, Px10y12, Px8y12, Px9y11 } CellNode (9 @ 12) (20)Px9y13 { Px10y13, Px9y12, Px8y13, Px8y14, Px10y14, Px10y12, Px8y12, Px9y14 } CellNode (9 @ 13) (20)Px9y14 { Px10y13, Px8y13, Px9y15, Px8y14, Px9y13, Px10y14, Px10y15, Px8y15 } CellNode (9 @ 14) (20)Px9y15 { Px8y15, Px10y16, Px8y16, Px8y14, Px10y14, Px9y16, Px10y15, Px9y14 } CellNode (9 @ 15) (20)Px9y16 { Px9y17, Px10y16, Px9y15, Px8y16, Px10y17, Px8y17, Px10y15, Px8y15 } CellNode (9 @ 16) (20)Px9y17 { Px10y18, Px8y18, Px10y16, Px8y16, Px9y18, Px10y17, Px9y16, Px8y17 } CellNode (9 @ 17) (20)Px9y18 { Px10y18, Px9y17, Px8y18, Px8y19, Px10y19, Px10y17, Px8y17, Px9y19 } CellNode (9 @ 18) (20)Px9y19 { Px10y18, Px8y18, Px8y19, Px10y19, Px9y20, Px9y18, Px8y20, Px10y20 } CellNode (9 @ 19) (20)Px9y2 { Px10y1, Px8y1, Px9y1, Px10y2, Px8y2, Px10y3, Px8y3, Px9y3 } CellNode (9 @ 2) (20)Px9y20 { Px10y20, Px9y21, Px8y21, Px10y21, Px8y19, Px10y19, Px8y20, Px9y19 } CellNode (9 @ 20) (20)Px9y21 { Px8y21, Px9y22, Px10y21, Px9y20, Px8y22, Px10y22, Px8y20, Px10y20 } CellNode (9 @ 21) (20)Px9y22 { Px8y23, Px10y23, Px8y21, Px10y21, Px8y22, Px9y23, Px10y22, Px9y21 } CellNode (9 @ 22) (20)Px9y23 { Px8y23, Px10y23, Px9y24, Px9y22, Px8y24, Px10y24, Px8y22, Px10y22 } CellNode (9 @ 23) (20)Px9y24 { Px8y23, Px10y23, Px8y24, Px9y25, Px10y24, Px9y23, Px8y25, Px10y25 } CellNode (9 @ 24) (20)Px9y25 { Px9y24, Px8y26, Px10y26, Px8y24, Px10y24, Px8y25, Px10y25, Px9y26 } CellNode (9 @ 25) (20)Px9y26 { Px8y26, Px10y26, Px9y27, Px9y25, Px8y27, Px10y27, Px8y25, Px10y25 } CellNode (9 @ 26) (20)Px9y27 { Px10y26, Px8y27, Px10y27, Px9y26, Px8y26 } CellNode (9 @ 27) (20)Px9y3 { Px10y4, Px8y4, Px10y2, Px8y2, Px9y4, Px9y2, Px10y3, Px8y3 } CellNode (9 @ 3) (20)Px9y4 { Px10y4, Px8y4, Px10y5, Px8y5, Px10y3, Px8y3, Px9y5, Px9y3 } CellNode (9 @ 4) (20)Px9y5 { Px9y6, Px8y4, Px10y4, Px9y4, Px10y5, Px8y5, Px10y6, Px8y6 } CellNode (9 @ 5) (20)Px9y6 { Px10y7, Px8y7, Px10y5, Px8y5, Px9y7, Px9y5, Px10y6, Px8y6 } CellNode (9 @ 6) (20)Px9y7 { Px9y8, Px9y6, Px10y7, Px8y7, Px10y8, Px8y8, Px10y6, Px8y6 } CellNode (9 @ 7) (20)Px9y8 { Px10y9, Px8y9, Px10y7, Px8y7, Px9y9, Px9y7, Px10y8, Px8y8 } CellNode (9 @ 8) (20)Px9y9 { Px10y10, Px8y9, Px10y9, Px9y10, Px10y8, Px8y8, Px9y8, Px8y10 } CellNode (9 @ 9) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="exemple">exemplemessages M1 , M2 .P1 { P2, P3, P4} Pim P2 { P1, P3  } BlingP3 { P1, P2  } PoumP4 { P1, P2 ,P3  } PoumP5 { P4, P1 } BoumBoum</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange58Points7">genRange58Points7messages none  defined. P1 { P2 } NodeP2 { P1, P6 } NodeP3 { P4 } NodeP4 { P3 } NodeP5 { P7 } NodeP6 { P2 } NodeP7 { P5 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange640Points30">genRange640Points30messages none  defined. P1 { P22, P26 } NodeP2 { P8, P10, P12, P13, P21 } NodeP3 { P9, P19, P20, P23, P24, P25 } NodeP4 { P5, P12, P13, P14, P15, P19, P30 } NodeP5 { P4, P12, P13, P15, P19, P29, P30 } NodeP6 { P15, P29, P30 } NodeP7 { P10 } NodeP8 { P2, P10, P18, P28 } NodeP9 { P3, P20, P25, P27 } NodeP10 { P2, P7, P8, P12, P24 } NodeP11 { P25 } NodeP12 { P2, P4, P5, P10, P13, P21, P24 } NodeP13 { P2, P4, P5, P12, P21, P24 } NodeP14 { P4, P16, P17, P19 } NodeP15 { P4, P5, P6, P29, P30 } NodeP16 { P14, P17, P19, P22, P23 } NodeP17 { P14, P16, P19, P20, P22, P23 } NodeP18 { P8, P28 } NodeP19 { P3, P4, P5, P14, P16, P17, P20, P23 } NodeP20 { P3, P9, P17, P19, P23, P25 } NodeP21 { P2, P12, P13 } NodeP22 { P1, P16, P17, P23, P26 } NodeP23 { P3, P16, P17, P19, P20, P22, P25 } NodeP24 { P3, P10, P12, P13 } NodeP25 { P3, P9, P11, P20, P23 } NodeP26 { P1, P22 } NodeP27 { P9 } NodeP28 { P8, P18 } NodeP29 { P5, P6, P15 } NodeP30 { P4, P5, P6, P15 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="islands3">islands3messages none  defined. P1 { P2, P5, P6, P7, P10, P11, P12, P14, P16, P18, P19, P20 } Node (254711 @ 181203) (90)P2 { P1, P5, P6, P7, P9, P10, P11, P12, P14, P15, P17, P18, P19, P20 } Node (254693 @ 181217) (90)P3 { P4, P5, P7, P8, P9, P14, P15, P16, P18, P20 } Node (254749 @ 181300) (90)P4 { P3, P5, P7, P8, P9, P14, P15, P16, P18, P20 } Node (254759 @ 181290) (90)P5 { P1, P2, P3, P4, P7, P8, P11, P14, P16, P18, P20 } Node (254753 @ 181219) (90)P6 { P1, P2, P7, P10, P11, P12, P19, P20 } Node (254668 @ 181183) (90)P7 { P1, P2, P3, P4, P5, P6, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20 } Node (254695 @ 181245) (90)P8 { P3, P4, P5, P14, P16, P18, P20 } Node (254804 @ 181276) (90)P9 { P2, P3, P4, P7, P11, P12, P13, P14, P15, P16, P17, P18 } Node (254703 @ 181294) (90)P10 { P1, P2, P6, P7, P11, P12, P13, P15, P17, P19 } Node (254635 @ 181233) (90)P11 { P1, P2, P5, P6, P7, P9, P10, P12, P13, P14, P15, P17, P19, P20 } Node (254671 @ 181220) (90)P12 { P1, P2, P6, P7, P9, P10, P11, P13, P14, P15, P17, P19, P20 } Node (254660 @ 181217) (90)P13 { P7, P9, P10, P11, P12, P15, P17 } Node (254651 @ 181298) (90)P14 { P1, P2, P3, P4, P5, P7, P8, P9, P11, P12, P16, P18, P20 } Node (254748 @ 181234) (90)P15 { P2, P3, P4, P7, P9, P10, P11, P12, P13, P17, P18 } Node (254678 @ 181303) (90)P16 { P1, P3, P4, P5, P7, P8, P9, P14, P18, P20 } Node (254766 @ 181273) (90)P17 { P2, P7, P9, P10, P11, P12, P13, P15 } Node (254647 @ 181287) (90)P18 { P1, P2, P3, P4, P5, P7, P8, P9, P14, P15, P16, P20 } Node (254756 @ 181275) (90)P19 { P1, P2, P6, P7, P10, P11, P12 } Node (254636 @ 181182) (90)P20 { P1, P2, P3, P4, P5, P6, P7, P8, P11, P12, P14, P16, P18 } Node (254747 @ 181214) (90)P21 { P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254938 @ 181397) (90)P22 { P21, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254943 @ 181404) (90)P23 { P21, P22, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254899 @ 181385) (90)P24 { P21, P22, P23, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254912 @ 181367) (90)P25 { P21, P22, P23, P24, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254932 @ 181362) (90)P26 { P21, P22, P23, P24, P25, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254912 @ 181348) (90)P27 { P21, P22, P23, P24, P25, P26, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254909 @ 181357) (90)P28 { P21, P22, P23, P24, P25, P26, P27, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254924 @ 181390) (90)P29 { P21, P22, P23, P24, P25, P26, P27, P28, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254943 @ 181397) (90)P30 { P21, P22, P23, P24, P25, P26, P27, P28, P29, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254899 @ 181361) (90)P31 { P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P32, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254914 @ 181386) (90)P32 { P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P33, P34, P35, P36, P37, P38, P39, P40 } Node (254939 @ 181374) (90)P33 { P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P34, P35, P36, P37, P38, P39, P40 } Node (254901 @ 181367) (90)P34 { P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P35, P36, P37, P38, P39, P40 } Node (254935 @ 181381) (90)P35 { P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P36, P37, P38, P39, P40 } Node (254905 @ 181395) (90)P36 { P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P37, P38, P39, P40 } Node (254930 @ 181409) (90)P37 { P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P38, P39, P40 } Node (254898 @ 181359) (90)P38 { P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P39, P40 } Node (254917 @ 181407) (90)P39 { P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P40 } Node (254912 @ 181360) (90)P40 { P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39 } Node (254901 @ 181346) (90)P41 { P42, P43, P44, P45 } Node (255049 @ 181478) (90)P42 { P41, P43, P44, P45 } Node (255088 @ 181487) (90)P43 { P41, P42, P44, P45 } Node (255078 @ 181480) (90)P44 { P41, P42, P43, P45 } Node (255068 @ 181485) (90)P45 { P41, P42, P43, P44 } Node (255093 @ 181472) (90)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="gridRange80Points90">gridRange80Points90messages none  defined. P1 { P2, P12, P13 } Node (53 @ 53) (80)P2 { P1, P3, P12, P13, P14 } Node (106 @ 53) (80)P3 { P2, P4, P13, P14, P15 } Node (159 @ 53) (80)P4 { P3, P5, P14, P15, P16 } Node (212 @ 53) (80)P5 { P4, P6, P15, P16, P17 } Node (265 @ 53) (80)P6 { P5, P7, P16, P17, P18 } Node (318 @ 53) (80)P7 { P6, P8, P17, P18, P19 } Node (371 @ 53) (80)P8 { P7, P9, P18, P19, P20 } Node (424 @ 53) (80)P9 { P8, P10, P19, P20, P21 } Node (477 @ 53) (80)P10 { P9, P11, P20, P21, P22 } Node (530 @ 53) (80)P11 { P10, P21, P22 } Node (583 @ 53) (80)P12 { P1, P2, P13, P23, P24 } Node (53 @ 106) (80)P13 { P1, P2, P3, P12, P14, P23, P24, P25 } Node (106 @ 106) (80)P14 { P2, P3, P4, P13, P15, P24, P25, P26 } Node (159 @ 106) (80)P15 { P3, P4, P5, P14, P16, P25, P26, P27 } Node (212 @ 106) (80)P16 { P4, P5, P6, P15, P17, P26, P27, P28 } Node (265 @ 106) (80)P17 { P5, P6, P7, P16, P18, P27, P28, P29 } Node (318 @ 106) (80)P18 { P6, P7, P8, P17, P19, P28, P29, P30 } Node (371 @ 106) (80)P19 { P7, P8, P9, P18, P20, P29, P30, P31 } Node (424 @ 106) (80)P20 { P8, P9, P10, P19, P21, P30, P31, P32 } Node (477 @ 106) (80)P21 { P9, P10, P11, P20, P22, P31, P32, P33 } Node (530 @ 106) (80)P22 { P10, P11, P21, P32, P33 } Node (583 @ 106) (80)P23 { P12, P13, P24, P34, P35 } Node (53 @ 159) (80)P24 { P12, P13, P14, P23, P25, P34, P35, P36 } Node (106 @ 159) (80)P25 { P13, P14, P15, P24, P26, P35, P36, P37 } Node (159 @ 159) (80)P26 { P14, P15, P16, P25, P27, P36, P37, P38 } Node (212 @ 159) (80)P27 { P15, P16, P17, P26, P28, P37, P38, P39 } Node (265 @ 159) (80)P28 { P16, P17, P18, P27, P29, P38, P39, P40 } Node (318 @ 159) (80)P29 { P17, P18, P19, P28, P30, P39, P40, P41 } Node (371 @ 159) (80)P30 { P18, P19, P20, P29, P31, P40, P41, P42 } Node (424 @ 159) (80)P31 { P19, P20, P21, P30, P32, P41, P42, P43 } Node (477 @ 159) (80)P32 { P20, P21, P22, P31, P33, P42, P43, P44 } Node (530 @ 159) (80)P33 { P21, P22, P32, P43, P44 } Node (583 @ 159) (80)P34 { P23, P24, P35, P45, P46 } Node (53 @ 212) (80)P35 { P23, P24, P25, P34, P36, P45, P46, P47 } Node (106 @ 212) (80)P36 { P24, P25, P26, P35, P37, P46, P47, P48 } Node (159 @ 212) (80)P37 { P25, P26, P27, P36, P38, P47, P48, P49 } Node (212 @ 212) (80)P38 { P26, P27, P28, P37, P39, P48, P49, P50 } Node (265 @ 212) (80)P39 { P27, P28, P29, P38, P40, P49, P50, P51 } Node (318 @ 212) (80)P40 { P28, P29, P30, P39, P41, P50, P51, P52 } Node (371 @ 212) (80)P41 { P29, P30, P31, P40, P42, P51, P52, P53 } Node (424 @ 212) (80)P42 { P30, P31, P32, P41, P43, P52, P53, P54 } Node (477 @ 212) (80)P43 { P31, P32, P33, P42, P44, P53, P54, P55 } Node (530 @ 212) (80)P44 { P32, P33, P43, P54, P55 } Node (583 @ 212) (80)P45 { P34, P35, P46, P56, P57 } Node (53 @ 265) (80)P46 { P34, P35, P36, P45, P47, P56, P57, P58 } Node (106 @ 265) (80)P47 { P35, P36, P37, P46, P48, P57, P58, P59 } Node (159 @ 265) (80)P48 { P36, P37, P38, P47, P49, P58, P59, P60 } Node (212 @ 265) (80)P49 { P37, P38, P39, P48, P50, P59, P60, P61 } Node (265 @ 265) (80)P50 { P38, P39, P40, P49, P51, P60, P61, P62 } Node (318 @ 265) (80)P51 { P39, P40, P41, P50, P52, P61, P62, P63 } Node (371 @ 265) (80)P52 { P40, P41, P42, P51, P53, P62, P63, P64 } Node (424 @ 265) (80)P53 { P41, P42, P43, P52, P54, P63, P64, P65 } Node (477 @ 265) (80)P54 { P42, P43, P44, P53, P55, P64, P65, P66 } Node (530 @ 265) (80)P55 { P43, P44, P54, P65, P66 } Node (583 @ 265) (80)P56 { P45, P46, P57, P67, P68 } Node (53 @ 318) (80)P57 { P45, P46, P47, P56, P58, P67, P68, P69 } Node (106 @ 318) (80)P58 { P46, P47, P48, P57, P59, P68, P69, P70 } Node (159 @ 318) (80)P59 { P47, P48, P49, P58, P60, P69, P70, P71 } Node (212 @ 318) (80)P60 { P48, P49, P50, P59, P61, P70, P71, P72 } Node (265 @ 318) (80)P61 { P49, P50, P51, P60, P62, P71, P72, P73 } Node (318 @ 318) (80)P62 { P50, P51, P52, P61, P63, P72, P73, P74 } Node (371 @ 318) (80)P63 { P51, P52, P53, P62, P64, P73, P74, P75 } Node (424 @ 318) (80)P64 { P52, P53, P54, P63, P65, P74, P75, P76 } Node (477 @ 318) (80)P65 { P53, P54, P55, P64, P66, P75, P76, P77 } Node (530 @ 318) (80)P66 { P54, P55, P65, P76, P77 } Node (583 @ 318) (80)P67 { P56, P57, P68, P78, P79 } Node (53 @ 371) (80)P68 { P56, P57, P58, P67, P69, P78, P79, P80 } Node (106 @ 371) (80)P69 { P57, P58, P59, P68, P70, P79, P80, P81 } Node (159 @ 371) (80)P70 { P58, P59, P60, P69, P71, P80, P81, P82 } Node (212 @ 371) (80)P71 { P59, P60, P61, P70, P72, P81, P82, P83 } Node (265 @ 371) (80)P72 { P60, P61, P62, P71, P73, P82, P83, P84 } Node (318 @ 371) (80)P73 { P61, P62, P63, P72, P74, P83, P84, P85 } Node (371 @ 371) (80)P74 { P62, P63, P64, P73, P75, P84, P85, P86 } Node (424 @ 371) (80)P75 { P63, P64, P65, P74, P76, P85, P86, P87 } Node (477 @ 371) (80)P76 { P64, P65, P66, P75, P77, P86, P87, P88 } Node (530 @ 371) (80)P77 { P65, P66, P76, P87, P88 } Node (583 @ 371) (80)P78 { P67, P68, P79 } Node (53 @ 424) (80)P79 { P67, P68, P69, P78, P80 } Node (106 @ 424) (80)P80 { P68, P69, P70, P79, P81 } Node (159 @ 424) (80)P81 { P69, P70, P71, P80, P82 } Node (212 @ 424) (80)P82 { P70, P71, P72, P81, P83 } Node (265 @ 424) (80)P83 { P71, P72, P73, P82, P84 } Node (318 @ 424) (80)P84 { P72, P73, P74, P83, P85 } Node (371 @ 424) (80)P85 { P73, P74, P75, P84, P86 } Node (424 @ 424) (80)P86 { P74, P75, P76, P85, P87 } Node (477 @ 424) (80)P87 { P75, P76, P77, P86, P88 } Node (530 @ 424) (80)P88 { P76, P77, P87 } Node (583 @ 424) (80)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange150Points20">genRange150Points20messages none  defined. P1 { P8, P13 } Node (447 @ 505) (150)P2 { P11, P20 } Node (270 @ 279) (150)P5 { P9, P12, P16, P17 } Node (469 @ 68) (150)P6 { P15, P17, P18 } Node (263 @ 42) (150)P7 { P14, P19 } Node (256 @ 522) (150)P8 { P1 } Node (554 @ 432) (150)P9 { P5, P11, P16, P18 } Node (420 @ 152) (150)P11 { P2, P9, P18 } Node (308 @ 212) (150)P12 { P5, P17 } Node (446 @ 1) (150)P13 { P1 } Node (462 @ 639) (150)P14 { P7, P19 } Node (253 @ 583) (150)P15 { P6, P17, P18 } Node (224 @ 46) (150)P16 { P5, P9 } Node (489 @ 186) (150)P17 { P5, P6, P12, P15, P18 } Node (342 @ 10) (150)P18 { P6, P9, P11, P15, P17 } Node (302 @ 83) (150)P19 { P7, P14 } Node (186 @ 614) (150)P20 { P2 } Node (133 @ 330) (150)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="BrestBay">BrestBaymessages none  defined. P1 { P11 } Node (22 @ 243) (78)P10 { P6, P8, P9 } Node (310 @ 247) (78)P11 { P1, P2 } Node (76 @ 233) (78)P12 { P5 } Node (124 @ 328) (78)P2 { P3, P4, P5, P11 } Node (133 @ 234) (78)P3 { P2, P4, P6, P7 } Node (204 @ 204) (78)P4 { P2, P3, P6, P7 } Node (196 @ 232) (78)P5 { P2, P12 } Node (138 @ 290) (78)P6 { P3, P4, P7, P8, P10 } Node (251 @ 245) (78)P7 { P3, P4, P6, P8 } Node (217 @ 267) (78)P8 { P6, P7, P9, P10 } Node (276 @ 285) (78)P9 { P8, P10 } Node (341 @ 258) (78)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange640Points35">genRange640Points35messages none  defined. P1 { P3, P13, P14, P22, P23, P27, P30, P33 } NodeP2 { P18, P21, P29, P34 } NodeP3 { P1, P5, P11, P13, P14, P17, P22, P23, P26, P27, P30 } NodeP4 { P12 } NodeP5 { P3, P11, P12, P13, P22, P25, P26, P31, P35 } NodeP6 { P13, P16, P17, P19, P27, P30 } NodeP7 { P8, P10, P16, P19, P20, P28 } NodeP8 { P7, P9, P10, P16, P19, P20, P28 } NodeP9 { P8, P10, P15, P16, P20, P28, P32 } NodeP10 { P7, P8, P9, P16, P19, P20, P28 } NodeP11 { P3, P5, P13, P17, P22, P25, P26, P30, P31, P35 } NodeP12 { P4, P5, P25, P31 } NodeP13 { P1, P3, P5, P6, P11, P14, P17, P22, P26, P27, P30 } NodeP14 { P1, P3, P13, P23, P27, P30 } NodeP15 { P9, P20, P32 } NodeP16 { P6, P7, P8, P9, P10, P19, P20, P28 } NodeP17 { P3, P6, P11, P13, P22, P26, P27, P30, P31 } NodeP18 { P2, P21, P29, P34 } NodeP19 { P6, P7, P8, P10, P16, P20, P21, P28 } NodeP20 { P7, P8, P9, P10, P15, P16, P19, P28, P32 } NodeP21 { P2, P18, P19,  P29, P34 } NodeP22 { P1, P3, P5, P11, P13, P17, P25, P26, P27, P30, P31, P35 } NodeP23 { P1, P3, P14, P27, P30 } NodeP24 { P33, P35 } NodeP25 { P5, P11, P12, P22, P35 } NodeP26 { P3, P5, P11, P13, P17, P22, P27, P30, P31 } NodeP27 { P1, P3, P6, P13, P14, P17, P22, P23, P26, P30 } NodeP28 { P7, P8, P9, P10, P16, P19, P20 } NodeP29 { P2, P18, P21, P34 } NodeP30 { P1, P3, P6, P11, P13, P14, P17, P22, P23, P26, P27 } NodeP31 { P5, P11, P12, P17, P22, P26 } NodeP32 { P9, P15, P20 } NodeP33 { P1, P24, P35 } NodeP34 { P2, P18, P21, P29 } NodeP35 { P5, P11, P22, P24, P25, P33 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange60Points24">genRange60Points24messages none  defined. P4 { P21 } Node (383 @ 20)P15 { P23 } Node (185 @ 47)P18 { P19 } Node (509 @ 671)P19 { P18 } Node (497 @ 649)P21 { P4 } Node (349 @ 3)P23 { P15 } Node (154 @ 88)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange160Points10">genRange160Points10messages none  defined. P1 { P9 } NodeP2 { P3, P6 } NodeP3 { P2, P5,  P6, P7 } NodeP4 { P6, P8 } NodeP5 { P3,  P10 } NodeP6 { P2, P3, P4, P7, P8 } NodeP7 { P3, P6, P9 } NodeP8 { P4, P6 } NodeP9 { P1, P7 } NodeP10 { P5 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="bibus3">bibus3 messages none  defined. Hritam { P2, P3 } Node (117 @ 125) (70)P2 { P1, P3, P4 } Node (80 @ 157) (70)P3 { P1, P2, P4, P5 } Node (98 @ 184) (70)P4 { P2, P3, P5 } Node (102 @ 222) (70)P5 { P3, P4, P6 } Node (117 @ 242) (70)P6 { P5, P7 } Node (176 @ 221) (70)P7 { P6, P8 } Node (235 @ 252) (70)P8 { P7, P9, P10, P11 } Node (189 @ 298) (70)P9 { P8, P10 } Node (146 @ 321) (70)P10 { P8, P9, P11 } Node (174 @ 359) (70)P11 { P8, P10, P12 } Node (221 @ 335) (70)P12 { P11 } Node (260 @ 335) (70)P13 { P14 } Node (374 @ 318) (70)P14 { P13 } Node (419 @ 359) (70)P16 { P17 } Node (506 @ 536) (70)P17 { P16 } Node (482 @ 598) (70)P22 { P23 } Node (793 @ 635) (70)P23 { P22 } Node (819 @ 590) (70)P24 { P25 } Node (878 @ 535) (70)P25 { P24 } Node (899 @ 531) (70)P27 { P28 } Node (1078 @ 507) (70)P28 { P27, P31 } Node (1112 @ 522) (70)P29 { P30 } Node (1142 @ 599) (70)P30 { P29, P31 } Node (1176 @ 560) (70)P31 { P28, P30, P32 } Node (1170 @ 513) (70)P32 { P31 } Node (1213 @ 476) (70)P34 { P35 } Node (1421 @ 502) (70)P35 { P34, P36 } Node (1442 @ 533) (70)P36 { P35, P37 } Node (1486 @ 552) (70)P37 { P36, P38 } Node (1529 @ 600) (70)P38 { P37, P39 } Node (1583 @ 595) (70)P39 { P38 } Node (1618 @ 652) (70)P40 { P41 } Node (1527 @ 786) (70)P41 { P40 } Node (1533 @ 803) (70)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="diego29">diego29messages none  defined. Px50y46 { Px50y47, Px51y46 } CellNode (50 @ 46) (20)Px59y56 { Px60y56, Px59y55 } CellNode (59 @ 56) (20)Px46y58 { Px45y58, Px47y58, Px46y57 } CellNode (46 @ 58) (20)Px18y28 { Px17y28, Px18y27, Px19y28 } CellNode (18 @ 28) (20)Px42y46 { Px41y46, Px42y47 } CellNode (42 @ 46) (20)Px60y53 { Px60y52, Px60y54, Px59y53 } CellNode (60 @ 53) (20)Px69y63 { Px69y64, Px70y63 } CellNode (69 @ 63) (20)Px21y48 { Px22y48, Px21y49 } CellNode (21 @ 48) (20)Px47y15 { Px46y15, Px48y15, Px47y14, Px47y16 } CellNode (47 @ 15) (20)Px52y53 { Px52y52, Px51y53, Px52y54, Px53y53 } CellNode (52 @ 53) (20)Px2y47 { Px3y47, Px2y48, Px2y46 } CellNode (2 @ 47) (20)Px32y23 { Px31y23, Px32y24 } CellNode (32 @ 23) (20)Px26y17 { Px25y17, Px26y16, Px26y18 } CellNode (26 @ 17) (20)Px52y29 { Px52y28, Px52y30, Px53y29, Px51y29 } CellNode (52 @ 29) (20)Px31y55 { Px31y56, Px31y54, Px30y55 } CellNode (31 @ 55) (20)Px28y35 { Px27y35, Px28y34, Px28y36 } CellNode (28 @ 35) (20)Px62y60 { Px62y59, Px62y61, Px63y60, Px61y60 } CellNode (62 @ 60) (20)Px38y47 { Px38y46, Px39y47 } CellNode (38 @ 47) (20)Px10y57 { Px10y56, Px9y57, Px10y58, Px11y57 } CellNode (10 @ 57) (20)Px15y50 { Px14y50, Px15y49, Px15y51, Px16y50 } CellNode (15 @ 50) (20)Px32y12 { Px33y12, Px31y12, Px32y11, Px32y13 } CellNode (32 @ 12) (20)Px17y49 { Px18y49, Px16y49 } CellNode (17 @ 49) (20)Px35y56 { Px34y56, Px35y55, Px36y56 } CellNode (35 @ 56) (20)Px46y36 { Px47y36, Px45y36, Px46y35, Px46y37 } CellNode (46 @ 36) (20)Px33y38 { Px33y39, Px34y38, Px33y37 } CellNode (33 @ 38) (20)Px8y55 { Px9y55, Px7y55, Px8y54 } CellNode (8 @ 55) (20)Px21y21 { Px21y22, Px20y21, Px21y20 } CellNode (21 @ 21) (20)Px19y51 { Px18y51, Px19y50, Px20y51 } CellNode (19 @ 51) (20)Px35y45 { Px35y44, Px34y45, Px35y46, Px36y45 } CellNode (35 @ 45) (20)Px61y57 { Px61y56, Px61y58, Px62y57, Px60y57 } CellNode (61 @ 57) (20)Px46y20 { Px45y20, Px46y19, Px47y20, Px46y21 } CellNode (46 @ 20) (20)Px48y19 { Px48y20, Px49y19, Px47y19, Px48y18 } CellNode (48 @ 19) (20)Px33y27 { Px33y28, Px32y27, Px33y26 } CellNode (33 @ 27) (20)Px25y22 { Px25y21, Px25y23, Px24y22, Px26y22 } CellNode (25 @ 22) (20)Px51y34 { Px51y33, Px52y34 } CellNode (51 @ 34) (20)Px22y47 { Px23y47, Px22y48, Px22y46 } CellNode (22 @ 47) (20)Px71y64 { Px71y63, Px70y64 } CellNode (71 @ 64) (20)Px45y52 { Px44y52, Px46y52, Px45y51 } CellNode (45 @ 52) (20)Px17y22 { Px16y22, Px17y23, Px18y22 } CellNode (17 @ 22) (20)Px39y46 { Px39y45, Px39y47, Px38y46, Px40y46 } CellNode (39 @ 46) (20)Px11y56 { Px12y56, Px11y57, Px10y56 } CellNode (11 @ 56) (20)Px33y11 { Px34y11, Px32y11, Px33y12, Px33y10 } CellNode (33 @ 11) (20)Px29y28 { Px29y27, Px28y28 } CellNode (29 @ 28) (20)Px51y23 { Px51y22, Px52y23, Px51y24 } CellNode (51 @ 23) (20)Px47y35 { Px47y36, Px46y35 } CellNode (47 @ 35) (20)Px28y55 { Px29y55 } CellNode (28 @ 55) (20)Px30y25 { Px31y25, Px30y26, Px30y24 } CellNode (30 @ 25) (20)Px67y65 { Px66y65, Px68y65 } CellNode (67 @ 65) (20)Px22y20 { Px23y20, Px22y19, Px21y20 } CellNode (22 @ 20) (20)Px50y55 { Px51y55, Px50y56 } CellNode (50 @ 55) (20)Px42y50 { Px41y50, Px42y49, Px42y51, Px43y50 } CellNode (42 @ 50) (20)Px33y5 { Px33y6, Px34y5 } CellNode (33 @ 5) (20)Px34y50 { Px33y50, Px34y51 } CellNode (34 @ 50) (20)Px49y18 { Px49y17, Px49y19, Px48y18 } CellNode (49 @ 18) (20)Px13y52 { Px12y52, Px13y51, Px13y53 } CellNode (13 @ 52) (20)Px44y7 { Px45y7, Px43y7, Px44y8, Px44y6 } CellNode (44 @ 7) (20)Px46y51 { Px45y51, Px46y52 } CellNode (46 @ 51) (20)Px13y28 { Px13y27, Px14y28 } CellNode (13 @ 28) (20)Px52y38 { Px52y37, Px53y38 } CellNode (52 @ 38) (20)Px33y58 { Px33y59, Px32y58, Px33y57 } CellNode (33 @ 58) (20)Px64y63 { Px64y64, Px64y62, Px65y63 } CellNode (64 @ 63) (20)Px36y33 { Px36y34, Px37y33 } CellNode (36 @ 33) (20)Px21y41 { Px21y42, Px21y40, Px22y41 } CellNode (21 @ 41) (20)Px6y57 { Px6y56, Px5y57 } CellNode (6 @ 57) (20)Px54y40 { Px55y40, Px53y40, Px54y41, Px54y39 } CellNode (54 @ 40) (20)Px41y47 { Px42y47, Px41y46, Px40y47 } CellNode (41 @ 47) (20)Px46y40 { Px45y40, Px46y39 } CellNode (46 @ 40) (20)Px52y22 { Px51y22, Px52y23 } CellNode (52 @ 22) (20)Px68y64 { Px68y65, Px69y64 } CellNode (68 @ 64) (20)Px20y49 { Px20y50, Px21y49, Px19y49 } CellNode (20 @ 49) (20)Px31y24 { Px31y25, Px31y23, Px32y24, Px30y24 } CellNode (31 @ 24) (20)Px51y54 { Px51y53, Px52y54, Px51y55 } CellNode (51 @ 54) (20)Px35y4 { Px34y4, Px35y5, Px36y4 } CellNode (35 @ 4) (20)Px33y47 { Px33y48, Px33y46, Px32y47 } CellNode (33 @ 47) (20)Px30y56 { Px30y55, Px31y56, Px29y56, Px30y57 } CellNode (30 @ 56) (20)Px61y61 { Px61y60, Px62y61, Px61y62 } CellNode (61 @ 61) (20)Px31y13 { Px30y13, Px31y12, Px32y13, Px31y14 } CellNode (31 @ 13) (20)Px25y31 { Px26y31, Px25y30, Px24y31, Px25y32 } CellNode (25 @ 31) (20)Px27y25 { Px26y25, Px27y24 } CellNode (27 @ 25) (20)Px53y37 { Px53y36, Px53y38, Px52y37 } CellNode (53 @ 37) (20)Px47y55 { Px46y55, Px47y56, Px47y54 } CellNode (47 @ 55) (20)Px45y37 { Px45y36, Px44y37, Px46y37, Px45y38 } CellNode (45 @ 37) (20)Px39y55 { Px40y55, Px39y54, Px38y55, Px39y56 } CellNode (39 @ 55) (20)Px22y40 { Px22y41, Px21y40, Px23y40, Px22y39 } CellNode (22 @ 40) (20)Px43y19 { Px43y20, Px42y19, Px44y19 } CellNode (43 @ 19) (20)Px7y56 { Px6y56, Px7y55 } CellNode (7 @ 56) (20)Px24y39 { Px24y38, Px24y40, Px23y39 } CellNode (24 @ 39) (20)Px29y32 { Px28y32, Px29y33, Px30y32 } CellNode (29 @ 32) (20)Px20y22 { Px20y21, Px21y22, Px19y22, Px20y23 } CellNode (20 @ 22) (20)Px40y52 { Px40y53, Px39y52, Px41y52, Px40y51 } CellNode (40 @ 52) (20)Px37y3 { Px37y4, Px38y3, Px36y3 } CellNode (37 @ 3) (20)Px53y26 { Px53y27, Px52y26, Px53y25 } CellNode (53 @ 26) (20)Px27y14 { Px27y15, Px28y14, Px26y14, Px27y13 } CellNode (27 @ 14) (20)Px45y21 { Px46y21, Px45y20 } CellNode (45 @ 21) (20)Px60y58 { Px60y57, Px60y59, Px61y58 } CellNode (60 @ 58) (20)Px49y38 { Px49y39, Px49y37, Px50y38, Px48y38 } CellNode (49 @ 38) (20)Px32y28 { Px32y27, Px33y28, Px31y28 } CellNode (32 @ 28) (20)Px34y46 { Px33y46, Px34y45, Px35y46 } CellNode (34 @ 46) (20)Px29y21 { Px29y22, Px29y20, Px28y21 } CellNode (29 @ 21) (20)Px70y65 { Px69y65, Px70y64 } CellNode (70 @ 65) (20)Px16y23 { Px17y23, Px16y24, Px16y22, Px15y23 } CellNode (16 @ 23) (20)Px2y60 { Px2y61, Px3y60, Px2y59 } CellNode (2 @ 60) (20)Px45y10 { Px44y10, Px45y9, Px46y10, Px45y11 } CellNode (45 @ 10) (20)Px26y30 { Px26y31, Px26y29, Px25y30 } CellNode (26 @ 30) (20)Px52y42 { Px51y42, Px52y43, Px52y41, Px53y42 } CellNode (52 @ 42) (20)Px38y36 { Px38y35, Px37y36, Px39y36, Px38y37 } CellNode (38 @ 36) (20)Px23y44 { Px22y44, Px23y45 } CellNode (23 @ 44) (20)Px41y51 { Px40y51, Px41y50, Px41y52, Px42y51 } CellNode (41 @ 51) (20)Px21y26 { Px21y27 } CellNode (21 @ 26) (20)Px28y13 { Px28y12, Px29y13, Px28y14, Px27y13 } CellNode (28 @ 13) (20)Px52y31 { Px51y31, Px53y31, Px52y30 } CellNode (52 @ 31) (20)Px28y18 { Px29y18, Px27y18, Px28y17, Px28y19 } CellNode (28 @ 18) (20)Px33y51 { Px33y52, Px34y51, Px32y51, Px33y50 } CellNode (33 @ 51) (20)Px12y53 { Px12y52, Px12y54, Px13y53 } CellNode (12 @ 53) (20)Px58y50 { Px59y50, Px58y49, Px58y51 } CellNode (58 @ 50) (20)Px51y39 { Px50y39, Px51y40 } CellNode (51 @ 39) (20)Px41y40 { Px40y40, Px42y40, Px41y39 } CellNode (41 @ 40) (20)Px32y59 { Px31y59, Px33y59, Px32y58 } CellNode (32 @ 59) (20)Px17y27 { Px17y28, Px18y27, Px16y27 } CellNode (17 @ 27) (20)Px43y39 { Px44y39, Px43y40, Px42y39 } CellNode (43 @ 39) (20)Px45y57 { Px45y56, Px46y57, Px45y58 } CellNode (45 @ 57) (20)Px35y34 { Px36y34, Px35y35 } CellNode (35 @ 34) (20)Px46y14 { Px46y13, Px46y15, Px47y14 } CellNode (46 @ 14) (20)Px27y34 { Px26y34, Px27y35, Px28y34, Px27y33 } CellNode (27 @ 34) (20)Px49y58 { Px48y58, Px49y57 } CellNode (49 @ 58) (20)Px51y28 { Px51y27, Px51y29, Px52y28 } CellNode (51 @ 28) (20)Px25y16 { Px25y17, Px26y16, Px25y15 } CellNode (25 @ 16) (20)Px32y48 { Px32y49, Px33y48, Px31y48, Px32y47 } CellNode (32 @ 48) (20)Px37y41 { Px37y40, Px36y41 } CellNode (37 @ 41) (20)Px45y41 { Px45y40, Px44y41 } CellNode (45 @ 41) (20)Px30y8 { Px30y9, Px31y8 } CellNode (30 @ 8) (20)Px57y47 { Px57y48, Px56y47, Px58y47, Px57y46 } CellNode (57 @ 47) (20)Px53y30 { Px53y31, Px53y29, Px52y30 } CellNode (53 @ 30) (20)Px29y17 { Px29y18, Px28y17, Px29y16 } CellNode (29 @ 17) (20)Px14y25 { Px15y25, Px13y25, Px14y24, Px14y26 } CellNode (14 @ 25) (20)Px34y55 { Px34y54, Px34y56, Px35y55 } CellNode (34 @ 55) (20)Px30y14 { Px31y14, Px30y13, Px30y15, Px29y14 } CellNode (30 @ 14) (20)Px24y32 { Px24y31, Px25y32, Px23y32 } CellNode (24 @ 32) (20)Px18y50 { Px18y51, Px19y50, Px18y49 } CellNode (18 @ 50) (20)Px59y54 { Px60y54, Px58y54, Px59y53, Px59y55 } CellNode (59 @ 54) (20)Px46y56 { Px47y56, Px45y56, Px46y57, Px46y55 } CellNode (46 @ 56) (20)Px13y57 { Px13y56, Px13y58, Px12y57 } CellNode (13 @ 57) (20)Px44y38 { Px45y38, Px44y37, Px44y39 } CellNode (44 @ 38) (20)Px38y56 { Px38y55, Px39y56, Px37y56 } CellNode (38 @ 56) (20)Px60y51 { Px59y51, Px60y52 } CellNode (60 @ 51) (20)Px36y38 { Px36y39, Px35y38 } CellNode (36 @ 38) (20)Px47y13 { Px47y14, Px46y13, Px47y12 } CellNode (47 @ 13) (20)Px2y45 { Px3y45, Px2y46 } CellNode (2 @ 45) (20)Px54y45 { Px54y44, Px55y45, Px53y45, Px54y46 } CellNode (54 @ 45) (20)Px24y21 { Px23y21, Px24y22, Px25y21 } CellNode (24 @ 21) (20)Px50y33 { Px51y33, Px50y32 } CellNode (50 @ 33) (20)Px52y27 { Px53y27, Px51y27, Px52y28, Px52y26 } CellNode (52 @ 27) (20)Px31y53 { Px30y53, Px31y54, Px31y52 } CellNode (31 @ 53) (20)Px26y15 { Px26y16, Px27y15, Px25y15, Px26y14 } CellNode (26 @ 15) (20)Px32y7 { Px32y6, Px31y7, Px32y8, Px33y7 } CellNode (32 @ 7) (20)Px28y33 { Px28y34, Px28y32, Px29y33, Px27y33 } CellNode (28 @ 33) (20)Px38y45 { Px37y45, Px39y45, Px38y46 } CellNode (38 @ 45) (20)Px10y55 { Px10y56, Px9y55 } CellNode (10 @ 55) (20)Px49y20 { Px50y20, Px49y19, Px48y20 } CellNode (49 @ 20) (20)Px32y10 { Px32y11, Px33y10, Px31y10 } CellNode (32 @ 10) (20)Px23y29 { Px23y28, Px22y29, Px23y30, Px24y29 } CellNode (23 @ 29) (20)Px15y24 { Px16y24, Px15y25, Px14y24, Px15y23 } CellNode (15 @ 24) (20)Px15y29 { Px15y28, Px16y29 } CellNode (15 @ 29) (20)Px35y54 { Px36y54, Px34y54, Px35y55, Px35y53 } CellNode (35 @ 54) (20)Px44y11 { Px44y10, Px45y11 } CellNode (44 @ 11) (20)Px25y36 { Px25y37, Px26y36, Px24y36, Px25y35 } CellNode (25 @ 36) (20)Px51y48 { Px51y47, Px50y48 } CellNode (51 @ 48) (20)Px35y43 { Px35y44, Px36y43, Px35y42, Px34y43 } CellNode (35 @ 43) (20)Px20y51 { Px21y51, Px19y51, Px20y50 } CellNode (20 @ 51) (20)Px37y37 { Px37y36, Px38y37 } CellNode (37 @ 37) (20)Px22y45 { Px23y45, Px21y45, Px22y46, Px22y44 } CellNode (22 @ 45) (20)Px20y27 { Px20y28, Px19y27, Px21y27 } CellNode (20 @ 27) (20)Px34y6 { Px35y6, Px34y5, Px33y6, Px34y7 } CellNode (34 @ 6) (20)Px51y32 { Px51y31, Px50y32, Px51y33 } CellNode (51 @ 32) (20)Px3y49 { Px3y48, Px2y49 } CellNode (3 @ 49) (20)Px27y19 { Px27y20, Px27y18, Px28y19 } CellNode (27 @ 19) (20)Px45y50 { Px44y50, Px45y51 } CellNode (45 @ 50) (20)Px42y6 { Px42y5, Px43y6, Px41y6 } CellNode (42 @ 6) (20)Px61y55 { Px61y56, Px60y55 } CellNode (61 @ 55) (20)Px48y17 { Px49y17, Px48y16, Px47y17, Px48y18 } CellNode (48 @ 17) (20)Px45y8 { Px45y9, Px44y8, Px45y7 } CellNode (45 @ 8) (20)Px29y26 { Px29y27, Px28y26, Px30y26 } CellNode (29 @ 26) (20)Px51y21 { Px50y21, Px51y22, Px51y20 } CellNode (51 @ 21) (20)Px16y28 { Px16y27, Px16y29, Px15y28, Px17y28 } CellNode (16 @ 28) (20)Px30y23 { Px30y22, Px31y23, Px30y24 } CellNode (30 @ 23) (20)Px26y35 { Px26y36, Px25y35, Px27y35, Px26y34 } CellNode (26 @ 35) (20)Px9y57 { Px9y58, Px9y56, Px10y57 } CellNode (9 @ 57) (20)Px29y10 { Px29y11, Px30y10, Px29y9, Px28y10 } CellNode (29 @ 10) (20)Px50y29 { Px51y29 } CellNode (50 @ 29) (20)Px31y49 { Px31y50, Px32y49, Px31y48 } CellNode (31 @ 49) (20)Px36y42 { Px36y43, Px35y42, Px36y41 } CellNode (36 @ 42) (20)Px21y50 { Px22y50, Px21y51, Px20y50, Px21y49 } CellNode (21 @ 50) (20)Px49y40 { Px49y39, Px50y40 } CellNode (49 @ 40) (20)Px36y5 { Px36y4, Px35y5 } CellNode (36 @ 5) (20)Px13y50 { Px13y51, Px14y50 } CellNode (13 @ 50) (20)Px4y48 { Px4y47, Px3y48 } CellNode (4 @ 48) (20)Px26y24 { Px25y24, Px26y25, Px27y24, Px26y23 } CellNode (26 @ 24) (20)Px13y26 { Px13y27, Px14y26, Px13y25 } CellNode (13 @ 26) (20)Px52y36 { Px53y36, Px52y37, Px52y35 } CellNode (52 @ 36) (20)Px33y56 { Px32y56, Px34y56, Px33y57 } CellNode (33 @ 56) (20)Px64y61 { Px64y62, Px63y61 } CellNode (64 @ 61) (20)Px12y58 { Px11y58, Px13y58, Px12y57 } CellNode (12 @ 58) (20)Px6y55 { Px7y55, Px6y56, Px5y55 } CellNode (6 @ 55) (20)Px34y13 { Px34y12, Px33y13 } CellNode (34 @ 13) (20)Px23y33 { Px23y32 } CellNode (23 @ 33) (20)Px44y20 { Px43y20, Px45y20, Px44y19 } CellNode (44 @ 20) (20)Px35y39 { Px36y39, Px34y39, Px35y38, Px35y40 } CellNode (35 @ 39) (20)Px48y37 { Px49y37, Px47y37, Px48y36, Px48y38 } CellNode (48 @ 37) (20)Px51y52 { Px52y52, Px51y53, Px50y52, Px51y51 } CellNode (51 @ 52) (20)Px46y19 { Px46y18, Px46y20, Px47y19, Px45y19 } CellNode (46 @ 19) (20)Px38y4 { Px37y4, Px38y3, Px39y4 } CellNode (38 @ 4) (20)Px33y45 { Px34y45, Px33y44, Px32y45, Px33y46 } CellNode (33 @ 45) (20)Px30y54 { Px31y54, Px29y54, Px30y55, Px30y53 } CellNode (30 @ 54) (20)Px37y46 { Px37y45, Px36y46, Px38y46 } CellNode (37 @ 46) (20)Px31y11 { Px31y12, Px32y11, Px30y11, Px31y10 } CellNode (31 @ 11) (20)Px51y41 { Px51y42, Px52y41, Px51y40, Px50y41 } CellNode (51 @ 41) (20)Px27y23 { Px26y23, Px27y24 } CellNode (27 @ 23) (20)Px47y53 { Px47y52, Px46y53, Px47y54 } CellNode (47 @ 53) (20)Px19y23 { Px19y22, Px18y23, Px20y23 } CellNode (19 @ 23) (20)Px39y53 { Px39y54, Px40y53, Px38y53, Px39y52 } CellNode (39 @ 53) (20)Px65y65 { Px66y65, Px65y64 } CellNode (65 @ 65) (20)Px7y54 { Px7y55, Px8y54 } CellNode (7 @ 54) (20)Px24y37 { Px25y37, Px24y38, Px23y37, Px24y36 } CellNode (24 @ 37) (20)Px50y49 { Px49y49, Px50y50, Px50y48 } CellNode (50 @ 49) (20)Px35y12 { Px35y11, Px34y12 } CellNode (35 @ 12) (20)Px22y19 { Px22y20, Px23y19 } CellNode (22 @ 19) (20)Px20y20 { Px20y21, Px21y20 } CellNode (20 @ 20) (20)Px42y49 { Px41y49, Px42y48, Px42y50, Px43y49 } CellNode (42 @ 49) (20)Px53y24 { Px53y25, Px52y24 } CellNode (53 @ 24) (20)Px49y36 { Px48y36, Px49y37 } CellNode (49 @ 36) (20)Px60y56 { Px59y56, Px61y56, Px60y55, Px60y57 } CellNode (60 @ 56) (20)Px40y50 { Px40y51, Px41y50, Px40y49 } CellNode (40 @ 50) (20)Px32y26 { Px31y26, Px32y25, Px32y27, Px33y26 } CellNode (32 @ 26) (20)Px34y44 { Px35y44, Px33y44, Px34y45, Px34y43 } CellNode (34 @ 44) (20)Px52y56 { Px52y55, Px51y56 } CellNode (52 @ 56) (20)Px27y12 { Px28y12, Px27y13 } CellNode (27 @ 12) (20)Px44y51 { Px43y51, Px45y51, Px44y50, Px44y52 } CellNode (44 @ 51) (20)Px50y38 { Px50y39, Px49y38 } CellNode (50 @ 38) (20)Px70y63 { Px70y64, Px71y63, Px69y63 } CellNode (70 @ 63) (20)Px31y58 { Px31y57, Px32y58, Px31y59 } CellNode (31 @ 58) (20)Px4y57 { Px3y57, Px4y56, Px5y57 } CellNode (4 @ 57) (20)Px32y15 { Px32y14, Px31y15, Px33y15 } CellNode (32 @ 15) (20)Px28y27 { Px29y27, Px28y26, Px28y28 } CellNode (28 @ 27) (20)Px50y22 { Px50y21, Px51y22 } CellNode (50 @ 22) (20)Px48y57 { Px48y58, Px49y57, Px48y56, Px47y57 } CellNode (48 @ 57) (20)Px44y40 { Px45y40, Px43y40, Px44y39, Px44y41 } CellNode (44 @ 40) (20)Px54y39 { Px54y38, Px53y39, Px54y40 } CellNode (54 @ 39) (20)Px46y39 { Px46y38, Px45y39, Px46y40 } CellNode (46 @ 39) (20)Px66y64 { Px66y65, Px65y64 } CellNode (66 @ 64) (20)Px38y34 { Px38y35, Px37y34, Px38y33 } CellNode (38 @ 34) (20)Px21y24 { Px21y23 } CellNode (21 @ 24) (20)Px28y11 { Px29y11, Px28y12, Px28y10 } CellNode (28 @ 11) (20)Px56y46 { Px55y46, Px56y47, Px57y46, Px56y45 } CellNode (56 @ 46) (20)Px43y48 { Px42y48, Px43y47, Px43y49 } CellNode (43 @ 48) (20)Px12y51 { Px13y51, Px12y52 } CellNode (12 @ 51) (20)Px31y9 { Px31y10, Px30y9, Px31y8 } CellNode (31 @ 9) (20)Px45y55 { Px45y54, Px46y55, Px45y56 } CellNode (45 @ 55) (20)Px32y57 { Px33y57, Px32y56, Px32y58, Px31y57 } CellNode (32 @ 57) (20)Px63y62 { Px62y62, Px64y62, Px63y61 } CellNode (63 @ 62) (20)Px29y50 { Px29y51, Px30y50 } CellNode (29 @ 50) (20)Px46y12 { Px45y12, Px46y13, Px47y12, Px46y11 } CellNode (46 @ 12) (20)Px33y14 { Px32y14, Px33y13, Px33y15 } CellNode (33 @ 14) (20)Px27y32 { Px28y32, Px26y32, Px27y31, Px27y33 } CellNode (27 @ 32) (20)Px53y44 { Px54y44, Px52y44, Px53y43, Px53y45 } CellNode (53 @ 44) (20)Px40y46 { Px41y46, Px39y46, Px40y47, Px40y45 } CellNode (40 @ 46) (20)Px49y56 { Px50y56, Px48y56, Px49y57 } CellNode (49 @ 56) (20)Px22y39 { Px22y40, Px23y39 } CellNode (22 @ 39) (20)Px5y56 { Px6y56, Px4y56, Px5y55, Px5y57 } CellNode (5 @ 56) (20)Px32y46 { Px33y46, Px32y45, Px32y47 } CellNode (32 @ 46) (20)Px39y38 { Px38y38, Px39y39, Px40y38, Px39y37 } CellNode (39 @ 38) (20)Px22y23 { Px21y23 } CellNode (22 @ 23) (20)Px42y53 { Px41y53, Px42y52 } CellNode (42 @ 53) (20)Px29y15 { Px28y15, Px29y16, Px30y15, Px29y14 } CellNode (29 @ 15) (20)Px14y23 { Px14y24, Px15y23 } CellNode (14 @ 23) (20)Px34y53 { Px34y54, Px35y53, Px33y53, Px34y52 } CellNode (34 @ 53) (20)Px62y59 { Px62y60, Px61y59, Px62y58 } CellNode (62 @ 59) (20)Px24y30 { Px25y30, Px24y31, Px23y30, Px24y29 } CellNode (24 @ 30) (20)Px15y49 { Px15y50, Px14y49, Px16y49 } CellNode (15 @ 49) (20)Px59y52 { Px59y53, Px60y52, Px58y52, Px59y51 } CellNode (59 @ 52) (20)Px46y54 { Px46y53, Px47y54, Px45y54, Px46y55 } CellNode (46 @ 54) (20)Px26y29 { Px26y30 } CellNode (26 @ 29) (20)Px13y55 { Px13y56, Px14y55, Px13y54, Px12y55 } CellNode (13 @ 55) (20)Px38y54 { Px39y54, Px38y55, Px38y53, Px37y54 } CellNode (38 @ 54) (20)Px36y36 { Px35y36, Px36y35, Px37y36 } CellNode (36 @ 36) (20)Px23y38 { Px24y38, Px23y37, Px23y39 } CellNode (23 @ 38) (20)Px21y44 { Px21y45, Px22y44, Px21y43 } CellNode (21 @ 44) (20)Px47y11 { Px46y11, Px47y12 } CellNode (47 @ 11) (20)Px50y31 { Px50y32, Px51y31 } CellNode (50 @ 31) (20)Px52y25 { Px52y24, Px52y26, Px51y25, Px53y25 } CellNode (52 @ 25) (20)Px31y51 { Px31y50, Px31y52, Px32y51, Px30y51 } CellNode (31 @ 51) (20)Px26y13 { Px26y14, Px27y13 } CellNode (26 @ 13) (20)Px31y27 { Px32y27, Px31y28, Px31y26 } CellNode (31 @ 27) (20)Px51y57 { Px51y56, Px50y57 } CellNode (51 @ 57) (20)Px28y20 { Px28y21, Px29y20, Px27y20, Px28y19 } CellNode (28 @ 20) (20)Px58y49 { Px58y48, Px59y49, Px58y50 } CellNode (58 @ 49) (20)Px43y7 { Px43y6, Px44y7 } CellNode (43 @ 7) (20)Px15y27 { Px16y27, Px15y28 } CellNode (15 @ 27) (20)Px41y39 { Px41y40, Px40y39, Px42y39 } CellNode (41 @ 39) (20)Px46y9 { Px45y9, Px46y10 } CellNode (46 @ 9) (20)Px14y54 { Px13y54, Px14y55, Px14y53 } CellNode (14 @ 54) (20)Px3y58 { Px3y57, Px3y59, Px2y58 } CellNode (3 @ 58) (20)Px51y46 { Px51y45, Px51y47, Px52y46, Px50y46 } CellNode (51 @ 46) (20)Px47y58 { Px48y58, Px47y57, Px46y58 } CellNode (47 @ 58) (20)Px43y41 { Px42y41, Px44y41, Px43y40 } CellNode (43 @ 41) (20)Px19y28 { Px19y27, Px18y28, Px20y28 } CellNode (19 @ 28) (20)Px37y35 { Px38y35, Px36y35, Px37y36, Px37y34 } CellNode (37 @ 35) (20)Px22y43 { Px21y43, Px22y44, Px22y42 } CellNode (22 @ 43) (20)Px48y15 { Px47y15, Px48y14, Px48y16 } CellNode (48 @ 15) (20)Px34y4 { Px35y4, Px34y5 } CellNode (34 @ 4) (20)Px40y55 { Px40y56, Px39y55, Px41y55, Px40y54 } CellNode (40 @ 55) (20)Px51y30 { Px51y31, Px51y29, Px52y30 } CellNode (51 @ 30) (20)Px32y50 { Px31y50, Px32y49, Px32y51, Px33y50 } CellNode (32 @ 50) (20)Px3y47 { Px2y47, Px3y46, Px3y48, Px4y47 } CellNode (3 @ 47) (20)Px42y4 { Px42y5, Px41y4 } CellNode (42 @ 4) (20)Px30y32 { Px30y33, Px29y32 } CellNode (30 @ 32) (20)Px53y29 { Px53y30, Px52y29, Px53y28 } CellNode (53 @ 29) (20)Px55y47 { Px56y47, Px55y46 } CellNode (55 @ 47) (20)Px22y32 { Px23y32, Px22y31 } CellNode (22 @ 32) (20)Px59y48 { Px58y48, Px59y49 } CellNode (59 @ 48) (20)Px36y56 { Px35y56, Px37y56, Px36y55 } CellNode (36 @ 56) (20)Px34y38 { Px34y37, Px34y39, Px35y38, Px33y38 } CellNode (34 @ 38) (20)Px26y33 { Px26y32, Px27y33, Px26y34 } CellNode (26 @ 33) (20)Px52y45 { Px51y45, Px52y44, Px53y45, Px52y46 } CellNode (52 @ 45) (20)Px9y55 { Px8y55, Px9y56, Px10y55 } CellNode (9 @ 55) (20)Px50y51 { Px50y52, Px51y51, Px50y50 } CellNode (50 @ 51) (20)Px31y47 { Px32y47, Px31y48 } CellNode (31 @ 47) (20)Px36y40 { Px35y40, Px36y39, Px37y40, Px36y41 } CellNode (36 @ 40) (20)Px36y3 { Px36y4, Px37y3 } CellNode (36 @ 3) (20)Px47y20 { Px46y20, Px48y20, Px47y19 } CellNode (47 @ 20) (20)Px38y39 { Px38y38, Px39y39 } CellNode (38 @ 39) (20)Px41y6 { Px41y5, Px42y6, Px40y6, Px41y7 } CellNode (41 @ 6) (20)Px4y46 { Px4y47, Px3y46 } CellNode (4 @ 46) (20)Px41y54 { Px40y54, Px41y53, Px41y55 } CellNode (41 @ 54) (20)Px26y22 { Px26y23, Px25y22 } CellNode (26 @ 22) (20)Px13y24 { Px14y24, Px13y25 } CellNode (13 @ 24) (20)Px52y34 { Px52y35, Px51y34 } CellNode (52 @ 34) (20)Px21y29 { Px21y28, Px22y29 } CellNode (21 @ 29) (20)Px23y47 { Px22y47, Px23y46, Px23y48 } CellNode (23 @ 47) (20)Px12y56 { Px13y56, Px12y57, Px12y55, Px11y56 } CellNode (12 @ 56) (20)Px58y53 { Px58y52, Px59y53, Px58y54 } CellNode (58 @ 53) (20)Px34y11 { Px34y12, Px35y11, Px34y10, Px33y11 } CellNode (34 @ 11) (20)Px37y55 { Px37y56, Px36y55, Px38y55, Px37y54 } CellNode (37 @ 55) (20)Px33y43 { Px33y44, Px34y43 } CellNode (33 @ 43) (20)Px35y37 { Px35y36, Px35y38, Px34y37 } CellNode (35 @ 37) (20)Px29y55 { Px30y55, Px29y54, Px28y55, Px29y56 } CellNode (29 @ 55) (20)Px51y50 { Px50y50, Px51y51 } CellNode (51 @ 50) (20)Px23y20 { Px23y21, Px22y20, Px23y19 } CellNode (23 @ 20) (20)Px27y37 { Px27y36, Px28y37 } CellNode (27 @ 37) (20)Px43y50 { Px43y51, Px44y50, Px42y50, Px43y49 } CellNode (43 @ 50) (20)Px30y52 { Px30y53, Px30y51, Px31y52 } CellNode (30 @ 52) (20)Px40y3 { Px39y3, Px40y4 } CellNode (40 @ 3) (20)Px22y28 { Px23y28, Px21y28, Px22y29, Px22y27 } CellNode (22 @ 28) (20)Px14y28 { Px15y28, Px13y28 } CellNode (14 @ 28) (20)Px19y21 { Px19y22, Px20y21 } CellNode (19 @ 21) (20)Px65y63 { Px65y62, Px64y63, Px65y64 } CellNode (65 @ 63) (20)Px2y59 { Px2y60, Px3y59, Px2y58 } CellNode (2 @ 59) (20)Px24y35 { Px24y36, Px25y35 } CellNode (24 @ 35) (20)Px50y47 { Px50y46, Px50y48, Px51y47 } CellNode (50 @ 47) (20)Px55y40 { Px56y40, Px54y40 } CellNode (55 @ 40) (20)Px42y47 { Px42y48, Px43y47, Px41y47, Px42y46 } CellNode (42 @ 47) (20)Px34y42 { Px35y42, Px34y43 } CellNode (34 @ 42) (20)Px60y54 { Px60y53, Px60y55, Px59y54 } CellNode (60 @ 54) (20)Px69y64 { Px69y63, Px69y65, Px70y64, Px68y64 } CellNode (69 @ 64) (20)Px21y49 { Px22y49, Px21y48, Px20y49, Px21y50 } CellNode (21 @ 49) (20)Px47y16 { Px48y16, Px47y17, Px46y16, Px47y15 } CellNode (47 @ 16) (20)Px52y54 { Px51y54, Px52y53, Px52y55 } CellNode (52 @ 54) (20)Px2y48 { Px2y47, Px3y48, Px2y49 } CellNode (2 @ 48) (20)Px32y24 { Px32y23, Px31y24, Px32y25 } CellNode (32 @ 24) (20)Px26y18 { Px25y18, Px27y18, Px26y17 } CellNode (26 @ 18) (20)Px28y36 { Px27y36, Px28y37, Px28y35 } CellNode (28 @ 36) (20)Px31y56 { Px32y56, Px31y55, Px30y56, Px31y57 } CellNode (31 @ 56) (20)Px62y61 { Px63y61, Px62y60, Px61y61, Px62y62 } CellNode (62 @ 61) (20)Px10y58 { Px9y58, Px11y58, Px10y57 } CellNode (10 @ 58) (20)Px15y51 { Px15y50 } CellNode (15 @ 51) (20)Px32y13 { Px32y14, Px33y13, Px31y13, Px32y12 } CellNode (32 @ 13) (20)Px50y20 { Px50y21, Px49y20, Px51y20, Px50y19 } CellNode (50 @ 20) (20)Px46y37 { Px46y38, Px47y37, Px46y36, Px45y37 } CellNode (46 @ 37) (20)Px42y20 { Px42y19, Px43y20 } CellNode (42 @ 20) (20)Px23y40 { Px22y40, Px24y40, Px23y39 } CellNode (23 @ 40) (20)Px33y39 { Px33y38, Px34y39 } CellNode (33 @ 39) (20)Px21y22 { Px21y23, Px20y22, Px21y21 } CellNode (21 @ 22) (20)Px35y46 { Px36y46, Px35y45, Px34y46 } CellNode (35 @ 46) (20)Px61y58 { Px62y58, Px60y58, Px61y57, Px61y59 } CellNode (61 @ 58) (20)Px46y21 { Px45y21, Px46y20 } CellNode (46 @ 21) (20)Px33y28 { Px33y27, Px32y28 } CellNode (33 @ 28) (20)Px53y53 { Px52y53 } CellNode (53 @ 53) (20)Px25y23 { Px25y22, Px26y23, Px25y24 } CellNode (25 @ 23) (20)Px31y7 { Px32y7, Px31y8 } CellNode (31 @ 7) (20)Px22y48 { Px23y48, Px21y48, Px22y49, Px22y47 } CellNode (22 @ 48) (20)Px34y9 { Px34y10, Px33y9 } CellNode (34 @ 9) (20)Px17y23 { Px17y22, Px16y23, Px18y23 } CellNode (17 @ 23) (20)Px63y60 { Px63y61, Px62y60 } CellNode (63 @ 60) (20)Px39y47 { Px39y46, Px40y47, Px38y47 } CellNode (39 @ 47) (20)Px11y57 { Px11y58, Px10y57, Px12y57, Px11y56 } CellNode (11 @ 57) (20)Px16y50 { Px16y49, Px15y50 } CellNode (16 @ 50) (20)Px33y12 { Px34y12, Px33y13, Px32y12, Px33y11 } CellNode (33 @ 12) (20)Px46y10 { Px46y9, Px45y10, Px46y11 } CellNode (46 @ 10) (20)Px53y42 { Px53y43, Px52y42, Px54y42 } CellNode (53 @ 42) (20)Px18y49 { Px18y50, Px17y49, Px19y49 } CellNode (18 @ 49) (20)Px51y24 { Px51y25, Px51y23, Px52y24 } CellNode (51 @ 24) (20)Px47y36 { Px47y37, Px46y36, Px48y36, Px47y35 } CellNode (47 @ 36) (20)Px32y44 { Px32y45, Px33y44 } CellNode (32 @ 44) (20)Px45y18 { Px46y18, Px45y19 } CellNode (45 @ 18) (20)Px30y26 { Px31y26, Px29y26, Px30y25 } CellNode (30 @ 26) (20)Px50y56 { Px49y56, Px50y55, Px50y57, Px51y56 } CellNode (50 @ 56) (20)Px39y36 { Px39y37, Px38y36 } CellNode (39 @ 36) (20)Px42y51 { Px42y52, Px43y51, Px41y51, Px42y50 } CellNode (42 @ 51) (20)Px29y13 { Px28y13, Px30y13, Px29y14 } CellNode (29 @ 13) (20)Px33y6 { Px33y7, Px34y6, Px33y5, Px32y6 } CellNode (33 @ 6) (20)Px34y51 { Px33y51, Px34y52, Px34y50 } CellNode (34 @ 51) (20)Px36y45 { Px36y46, Px35y45, Px37y45 } CellNode (36 @ 45) (20)Px62y57 { Px61y57, Px62y58 } CellNode (62 @ 57) (20)Px49y19 { Px48y19, Px49y18, Px49y20, Px50y19 } CellNode (49 @ 19) (20)Px30y10 { Px30y9, Px30y11, Px29y10, Px31y10 } CellNode (30 @ 10) (20)Px13y53 { Px13y52, Px12y53, Px13y54, Px14y53 } CellNode (13 @ 53) (20)Px59y50 { Px59y51, Px59y49, Px58y50 } CellNode (59 @ 50) (20)Px46y52 { Px46y53, Px45y52, Px47y52, Px46y51 } CellNode (46 @ 52) (20)Px44y8 { Px45y8, Px44y7, Px44y9 } CellNode (44 @ 8) (20)Px18y22 { Px17y22, Px19y22, Px18y23 } CellNode (18 @ 22) (20)Px42y40 { Px42y41, Px43y40, Px41y40, Px42y39 } CellNode (42 @ 40) (20)Px33y59 { Px33y58, Px32y59 } CellNode (33 @ 59) (20)Px64y64 { Px64y63, Px65y64 } CellNode (64 @ 64) (20)Px50y40 { Px50y39, Px51y40, Px49y40, Px50y41 } CellNode (50 @ 40) (20)Px36y34 { Px36y35, Px37y34, Px36y33, Px35y34 } CellNode (36 @ 34) (20)Px23y36 { Px24y36, Px23y37 } CellNode (23 @ 36) (20)Px21y42 { Px21y41, Px22y42, Px21y43 } CellNode (21 @ 42) (20)Px54y41 { Px54y40, Px54y42 } CellNode (54 @ 41) (20)Px52y23 { Px51y23, Px52y24, Px52y22 } CellNode (52 @ 23) (20)Px68y65 { Px67y65, Px68y64, Px69y65 } CellNode (68 @ 65) (20)Px31y25 { Px31y26, Px30y25, Px32y25, Px31y24 } CellNode (31 @ 25) (20)Px35y5 { Px35y6, Px34y5, Px35y4, Px36y5 } CellNode (35 @ 5) (20)Px51y55 { Px52y55, Px50y55, Px51y54, Px51y56 } CellNode (51 @ 55) (20)Px33y48 { Px33y49, Px33y47, Px32y48 } CellNode (33 @ 48) (20)Px58y47 { Px57y47, Px58y48 } CellNode (58 @ 47) (20)Px30y57 { Px30y56, Px31y57 } CellNode (30 @ 57) (20)Px43y5 { Px43y6, Px42y5 } CellNode (43 @ 5) (20)Px61y62 { Px61y61, Px62y62 } CellNode (61 @ 62) (20)Px3y56 { Px4y56, Px3y57 } CellNode (3 @ 56) (20)Px31y14 { Px32y14, Px31y15, Px31y13, Px30y14 } CellNode (31 @ 14) (20)Px25y32 { Px26y32, Px24y32, Px25y31 } CellNode (25 @ 32) (20)Px53y38 { Px54y38, Px52y38, Px53y39, Px53y37 } CellNode (53 @ 38) (20)Px47y56 { Px46y56, Px48y56, Px47y57, Px47y55 } CellNode (47 @ 56) (20)Px45y38 { Px45y39, Px46y38, Px45y37, Px44y38 } CellNode (45 @ 38) (20)Px39y56 { Px40y56, Px38y56, Px39y55 } CellNode (39 @ 56) (20)Px37y33 { Px36y33, Px37y34, Px38y33 } CellNode (37 @ 33) (20)Px22y41 { Px21y41, Px22y42, Px22y40 } CellNode (22 @ 41) (20)Px20y23 { Px20y22, Px19y23, Px21y23 } CellNode (20 @ 23) (20)Px29y33 { Px29y34, Px30y33, Px28y33, Px29y32 } CellNode (29 @ 33) (20)Px3y45 { Px3y46, Px2y45 } CellNode (3 @ 45) (20)Px55y45 { Px54y45, Px55y46, Px56y45 } CellNode (55 @ 45) (20)Px37y4 { Px37y3, Px38y4, Px36y4 } CellNode (37 @ 4) (20)Px53y27 { Px53y26, Px53y28, Px52y27 } CellNode (53 @ 27) (20)Px40y53 { Px41y53, Px40y52, Px40y54, Px39y53 } CellNode (40 @ 53) (20)Px49y39 { Px49y40, Px49y38, Px50y39 } CellNode (49 @ 39) (20)Px60y59 { Px60y58, Px61y59 } CellNode (60 @ 59) (20)Px27y15 { Px26y15, Px27y14, Px27y16, Px28y15 } CellNode (27 @ 15) (20)Px22y30 { Px22y29, Px22y31, Px23y30 } CellNode (22 @ 30) (20)Px24y29 { Px24y30, Px23y29 } CellNode (24 @ 29) (20)Px29y22 { Px29y21, Px30y22 } CellNode (29 @ 22) (20)Px16y24 { Px16y23, Px15y24 } CellNode (16 @ 24) (20)Px36y54 { Px35y54, Px37y54, Px36y55 } CellNode (36 @ 54) (20)Px2y61 { Px2y60, Px3y61 } CellNode (2 @ 61) (20)Px34y36 { Px34y37, Px35y36 } CellNode (34 @ 36) (20)Px45y11 { Px45y12, Px45y10, Px44y11, Px46y11 } CellNode (45 @ 11) (20)Px26y31 { Px26y32, Px25y31, Px27y31, Px26y30 } CellNode (26 @ 31) (20)Px52y43 { Px52y44, Px53y43, Px52y42 } CellNode (52 @ 43) (20)Px44y19 { Px44y20, Px43y19, Px45y19 } CellNode (44 @ 19) (20)Px39y3 { Px38y3, Px39y4, Px40y3 } CellNode (39 @ 3) (20)Px38y37 { Px38y38, Px37y37, Px38y36, Px39y37 } CellNode (38 @ 37) (20)Px23y45 { Px23y46, Px22y45, Px23y44 } CellNode (23 @ 45) (20)Px41y52 { Px42y52, Px41y53, Px40y52, Px41y51 } CellNode (41 @ 52) (20)Px21y27 { Px21y28, Px22y27, Px21y26, Px20y27 } CellNode (21 @ 27) (20)Px28y14 { Px27y14, Px28y15, Px28y13, Px29y14 } CellNode (28 @ 14) (20)Px28y19 { Px28y20, Px27y19, Px28y18 } CellNode (28 @ 19) (20)Px33y52 { Px33y51, Px34y52, Px33y53 } CellNode (33 @ 52) (20)Px12y54 { Px13y54, Px12y53, Px12y55 } CellNode (12 @ 54) (20)Px58y51 { Px58y50, Px59y51, Px58y52 } CellNode (58 @ 51) (20)Px45y58 { Px45y57, Px46y58 } CellNode (45 @ 58) (20)Px17y28 { Px18y28, Px16y28, Px17y27, Px17y29 } CellNode (17 @ 28) (20)Px3y60 { Px2y60, Px3y61, Px3y59 } CellNode (3 @ 60) (20)Px35y35 { Px35y36, Px35y34, Px36y35 } CellNode (35 @ 35) (20)Px29y53 { Px29y54, Px30y53 } CellNode (29 @ 53) (20)Px46y15 { Px46y16, Px46y14, Px47y15 } CellNode (46 @ 15) (20)Px27y35 { Px28y35, Px27y34, Px26y35, Px27y36 } CellNode (27 @ 35) (20)Px40y49 { Px41y49, Px40y50 } CellNode (40 @ 49) (20)Px30y50 { Px30y51, Px31y50, Px29y50 } CellNode (30 @ 50) (20)Px51y29 { Px51y30, Px52y29, Px51y28, Px50y29 } CellNode (51 @ 29) (20)Px25y17 { Px25y16, Px26y17, Px25y18 } CellNode (25 @ 17) (20)Px32y49 { Px31y49, Px32y48, Px32y50, Px33y49 } CellNode (32 @ 49) (20)Px22y50 { Px22y51, Px21y50, Px22y49 } CellNode (22 @ 50) (20)Px30y9 { Px30y8, Px31y9, Px30y10, Px29y9 } CellNode (30 @ 9) (20)Px57y48 { Px57y47, Px58y48 } CellNode (57 @ 48) (20)Px53y31 { Px52y31, Px53y30 } CellNode (53 @ 31) (20)Px29y18 { Px30y18, Px28y18, Px29y17 } CellNode (29 @ 18) (20)Px40y38 { Px39y38, Px40y39 } CellNode (40 @ 38) (20)Px14y26 { Px13y26, Px14y25 } CellNode (14 @ 26) (20)Px49y48 { Px49y49, Px50y48 } CellNode (49 @ 48) (20)Px34y56 { Px34y57, Px35y56, Px33y56, Px34y55 } CellNode (34 @ 56) (20)Px2y57 { Px3y57, Px2y58 } CellNode (2 @ 57) (20)Px30y15 { Px31y15, Px30y14, Px29y15 } CellNode (30 @ 15) (20)Px13y58 { Px13y57, Px12y58 } CellNode (13 @ 58) (20)Px18y51 { Px19y51, Px18y50 } CellNode (18 @ 51) (20)Px59y55 { Px59y56, Px60y55, Px59y54 } CellNode (59 @ 55) (20)Px46y57 { Px47y57, Px46y58, Px45y57, Px46y56 } CellNode (46 @ 57) (20)Px18y27 { Px17y27, Px18y28, Px19y27 } CellNode (18 @ 27) (20)Px44y39 { Px45y39, Px43y39, Px44y38, Px44y40 } CellNode (44 @ 39) (20)Px34y40 { Px35y40, Px34y39 } CellNode (34 @ 40) (20)Px60y52 { Px60y51, Px60y53, Px59y52 } CellNode (60 @ 52) (20)Px36y39 { Px36y38, Px35y39, Px36y40 } CellNode (36 @ 39) (20)Px47y14 { Px47y13, Px48y14, Px46y14, Px47y15 } CellNode (47 @ 14) (20)Px52y52 { Px51y52, Px52y53 } CellNode (52 @ 52) (20)Px2y46 { Px3y46, Px2y45, Px2y47 } CellNode (2 @ 46) (20)Px24y22 { Px25y22, Px24y21 } CellNode (24 @ 22) (20)Px54y46 { Px54y45, Px55y46 } CellNode (54 @ 46) (20)Px52y28 { Px52y29, Px53y28, Px51y28, Px52y27 } CellNode (52 @ 28) (20)Px31y54 { Px31y55, Px30y54, Px31y53 } CellNode (31 @ 54) (20)Px26y16 { Px26y15, Px26y17, Px25y16, Px27y16 } CellNode (26 @ 16) (20)Px32y8 { Px32y7, Px31y8 } CellNode (32 @ 8) (20)Px28y34 { Px29y34, Px27y34, Px28y35, Px28y33 } CellNode (28 @ 34) (20)Px38y46 { Px38y47, Px39y46, Px37y46, Px38y45 } CellNode (38 @ 46) (20)Px10y56 { Px9y56, Px10y57, Px11y56, Px10y55 } CellNode (10 @ 56) (20)Px32y11 { Px31y11, Px32y12, Px33y11, Px32y10 } CellNode (32 @ 11) (20)Px15y25 { Px15y24, Px14y25 } CellNode (15 @ 25) (20)Px35y55 { Px35y56, Px34y55, Px36y55, Px35y54 } CellNode (35 @ 55) (20)Px46y35 { Px46y36, Px47y35 } CellNode (46 @ 35) (20)Px33y37 { Px34y37, Px33y38 } CellNode (33 @ 37) (20)Px8y54 { Px8y55, Px7y54 } CellNode (8 @ 54) (20)Px25y37 { Px25y36, Px24y37 } CellNode (25 @ 37) (20)Px21y20 { Px22y20, Px20y20, Px21y21 } CellNode (21 @ 20) (20)Px19y50 { Px19y51, Px18y50, Px20y50, Px19y49 } CellNode (19 @ 50) (20)Px23y19 { Px22y19, Px23y20 } CellNode (23 @ 19) (20)Px35y44 { Px34y44, Px35y45, Px35y43 } CellNode (35 @ 44) (20)Px22y46 { Px22y47, Px23y46, Px22y45 } CellNode (22 @ 46) (20)Px61y56 { Px61y57, Px61y55, Px60y56 } CellNode (61 @ 56) (20)Px48y18 { Px49y18, Px48y19, Px48y17 } CellNode (48 @ 18) (20)Px33y26 { Px32y26, Px33y27 } CellNode (33 @ 26) (20)Px25y21 { Px25y22, Px24y21 } CellNode (25 @ 21) (20)Px51y33 { Px51y34, Px50y33, Px51y32 } CellNode (51 @ 33) (20)Px20y28 { Px20y27, Px19y28, Px21y28 } CellNode (20 @ 28) (20)Px71y63 { Px71y64, Px70y63 } CellNode (71 @ 63) (20)Px34y7 { Px33y7, Px34y6 } CellNode (34 @ 7) (20)Px45y51 { Px45y52, Px46y51, Px45y50, Px44y51 } CellNode (45 @ 51) (20)Px39y45 { Px39y46, Px40y45, Px38y45 } CellNode (39 @ 45) (20)Px45y9 { Px46y9, Px45y10, Px45y8, Px44y9 } CellNode (45 @ 9) (20)Px33y10 { Px32y10, Px33y9, Px34y10, Px33y11 } CellNode (33 @ 10) (20)Px53y40 { Px53y39, Px54y40 } CellNode (53 @ 40) (20)Px29y27 { Px29y26, Px29y28, Px28y27 } CellNode (29 @ 27) (20)Px51y22 { Px51y23, Px52y22, Px51y21, Px50y22 } CellNode (51 @ 22) (20)Px16y29 { Px15y29, Px16y28, Px17y29 } CellNode (16 @ 29) (20)Px45y16 { Px46y16 } CellNode (45 @ 16) (20)Px30y24 { Px30y23, Px31y24, Px30y25 } CellNode (30 @ 24) (20)Px26y36 { Px27y36, Px26y35, Px25y36 } CellNode (26 @ 36) (20)Px9y58 { Px9y57, Px10y58 } CellNode (9 @ 58) (20)Px29y11 { Px29y10, Px30y11, Px28y11 } CellNode (29 @ 11) (20)Px36y43 { Px36y42, Px35y43 } CellNode (36 @ 43) (20)Px21y51 { Px22y51, Px21y50, Px20y51 } CellNode (21 @ 51) (20)Px41y4 { Px42y4, Px40y4, Px41y5 } CellNode (41 @ 4) (20)Px49y17 { Px48y17, Px49y18 } CellNode (49 @ 17) (20)Px13y51 { Px13y52, Px12y51, Px13y50 } CellNode (13 @ 51) (20)Px44y6 { Px43y6, Px44y7 } CellNode (44 @ 6) (20)Px26y25 { Px27y25, Px26y24 } CellNode (26 @ 25) (20)Px13y27 { Px13y26, Px13y28 } CellNode (13 @ 27) (20)Px52y37 { Px53y37, Px52y36, Px52y38 } CellNode (52 @ 37) (20)Px33y57 { Px33y58, Px34y57, Px33y56, Px32y57 } CellNode (33 @ 57) (20)Px50y19 { Px49y19, Px50y20 } CellNode (50 @ 19) (20)Px64y62 { Px64y63, Px64y61, Px63y62, Px65y62 } CellNode (64 @ 62) (20)Px21y40 { Px21y41, Px22y40 } CellNode (21 @ 40) (20)Px6y56 { Px6y57, Px7y56, Px5y56, Px6y55 } CellNode (6 @ 56) (20)Px41y46 { Px41y47, Px40y46, Px42y46 } CellNode (41 @ 46) (20)Px48y38 { Px48y37, Px49y38 } CellNode (48 @ 38) (20)Px31y23 { Px32y23, Px31y24, Px30y23 } CellNode (31 @ 23) (20)Px33y46 { Px33y47, Px34y46, Px33y45, Px32y46 } CellNode (33 @ 46) (20)Px51y53 { Px51y54, Px52y53, Px51y52 } CellNode (51 @ 53) (20)Px40y6 { Px41y6 } CellNode (40 @ 6) (20)Px30y55 { Px31y55, Px29y55, Px30y56, Px30y54 } CellNode (30 @ 55) (20)Px61y60 { Px61y61, Px62y60, Px61y59 } CellNode (61 @ 60) (20)Px14y50 { Px13y50, Px15y50, Px14y49 } CellNode (14 @ 50) (20)Px31y12 { Px31y13, Px31y11, Px32y12 } CellNode (31 @ 12) (20)Px25y30 { Px24y30, Px26y30, Px25y31 } CellNode (25 @ 30) (20)Px51y42 { Px51y41, Px52y42 } CellNode (51 @ 42) (20)Px16y49 { Px16y50, Px17y49, Px15y49 } CellNode (16 @ 49) (20)Px47y54 { Px47y53, Px47y55, Px46y54 } CellNode (47 @ 54) (20)Px53y36 { Px52y36, Px53y37 } CellNode (53 @ 36) (20)Px27y24 { Px26y24, Px27y25, Px27y23 } CellNode (27 @ 24) (20)Px45y36 { Px46y36, Px45y37 } CellNode (45 @ 36) (20)Px39y54 { Px39y53, Px39y55, Px40y54, Px38y54 } CellNode (39 @ 54) (20)Px7y55 { Px8y55, Px7y56, Px6y55, Px7y54 } CellNode (7 @ 55) (20)Px24y38 { Px23y38, Px24y39, Px24y37 } CellNode (24 @ 38) (20)Px20y21 { Px21y21, Px19y21, Px20y22, Px20y20 } CellNode (20 @ 21) (20)Px40y51 { Px40y50, Px41y51, Px40y52 } CellNode (40 @ 51) (20)Px27y13 { Px27y14, Px28y13, Px27y12, Px26y13 } CellNode (27 @ 13) (20)Px53y25 { Px53y24, Px53y26, Px52y25 } CellNode (53 @ 25) (20)Px45y20 { Px46y20, Px45y21, Px44y20, Px45y19 } CellNode (45 @ 20) (20)Px60y57 { Px60y58, Px61y57, Px60y56 } CellNode (60 @ 57) (20)Px49y37 { Px48y37, Px49y36, Px49y38 } CellNode (49 @ 37) (20)Px47y19 { Px47y20, Px46y19, Px48y19 } CellNode (47 @ 19) (20)Px32y27 { Px33y27, Px31y27, Px32y26, Px32y28 } CellNode (32 @ 27) (20)Px34y45 { Px35y45, Px33y45, Px34y46, Px34y44 } CellNode (34 @ 45) (20)Px44y52 { Px45y52, Px44y51 } CellNode (44 @ 52) (20)Px50y39 { Px50y40, Px51y39, Px49y39, Px50y38 } CellNode (50 @ 39) (20)Px70y64 { Px70y65, Px71y64, Px69y64, Px70y63 } CellNode (70 @ 64) (20)Px31y59 { Px31y58, Px32y59 } CellNode (31 @ 59) (20)Px16y22 { Px17y22, Px16y23 } CellNode (16 @ 22) (20)Px52y41 { Px51y41, Px52y42 } CellNode (52 @ 41) (20)Px28y28 { Px29y28, Px28y27 } CellNode (28 @ 28) (20)Px48y58 { Px49y58, Px47y58, Px48y57 } CellNode (48 @ 58) (20)Px44y41 { Px44y40, Px43y41, Px45y41 } CellNode (44 @ 41) (20)Px66y65 { Px65y65, Px66y64, Px67y65 } CellNode (66 @ 65) (20)Px38y35 { Px38y34, Px37y35, Px38y36 } CellNode (38 @ 35) (20)Px41y50 { Px41y49, Px41y51, Px42y50, Px40y50 } CellNode (41 @ 50) (20)Px28y12 { Px28y13, Px27y12, Px28y11 } CellNode (28 @ 12) (20)Px56y47 { Px57y47, Px56y46, Px55y47 } CellNode (56 @ 47) (20)Px52y30 { Px51y30, Px52y29, Px52y31, Px53y30 } CellNode (52 @ 30) (20)Px33y50 { Px33y51, Px34y50, Px32y50, Px33y49 } CellNode (33 @ 50) (20)Px43y49 { Px43y50, Px42y49, Px43y48 } CellNode (43 @ 49) (20)Px29y9 { Px30y9, Px29y10 } CellNode (29 @ 9) (20)Px12y52 { Px13y52, Px12y51, Px12y53 } CellNode (12 @ 52) (20)Px45y56 { Px45y55, Px45y57, Px46y56 } CellNode (45 @ 56) (20)Px32y58 { Px33y58, Px31y58, Px32y59, Px32y57 } CellNode (32 @ 58) (20)Px29y51 { Px29y50, Px30y51 } CellNode (29 @ 51) (20)Px46y13 { Px46y12, Px46y14, Px47y13 } CellNode (46 @ 13) (20)Px33y15 { Px32y15, Px33y14 } CellNode (33 @ 15) (20)Px27y33 { Px27y34, Px28y33, Px26y33, Px27y32 } CellNode (27 @ 33) (20)Px53y45 { Px53y44, Px52y45, Px54y45 } CellNode (53 @ 45) (20)Px40y47 { Px39y47, Px41y47, Px40y46 } CellNode (40 @ 47) (20)Px49y57 { Px49y56, Px50y57, Px48y57, Px49y58 } CellNode (49 @ 57) (20)Px51y27 { Px51y28, Px52y27 } CellNode (51 @ 27) (20)Px25y15 { Px25y16, Px26y15 } CellNode (25 @ 15) (20)Px32y47 { Px33y47, Px32y48, Px32y46, Px31y47 } CellNode (32 @ 47) (20)Px37y40 { Px37y41, Px36y40 } CellNode (37 @ 40) (20)Px45y40 { Px45y39, Px46y40, Px45y41, Px44y40 } CellNode (45 @ 40) (20)Px5y57 { Px6y57, Px4y57, Px5y56 } CellNode (5 @ 57) (20)Px39y39 { Px38y39, Px39y38, Px40y39 } CellNode (39 @ 39) (20)Px57y46 { Px56y46, Px57y47 } CellNode (57 @ 46) (20)Px29y16 { Px29y15, Px29y17 } CellNode (29 @ 16) (20)Px14y24 { Px14y23, Px13y24, Px14y25, Px15y24 } CellNode (14 @ 24) (20)Px33y9 { Px34y9, Px33y10 } CellNode (33 @ 9) (20)Px34y54 { Px34y55, Px35y54, Px34y53 } CellNode (34 @ 54) (20)Px30y13 { Px31y13, Px30y14, Px29y13 } CellNode (30 @ 13) (20)Px24y31 { Px24y30, Px24y32, Px25y31 } CellNode (24 @ 31) (20)Px13y56 { Px13y55, Px13y57, Px12y56 } CellNode (13 @ 56) (20)Px59y53 { Px59y52, Px59y54, Px60y53, Px58y53 } CellNode (59 @ 53) (20)Px46y55 { Px45y55, Px46y56, Px46y54, Px47y55 } CellNode (46 @ 55) (20)Px44y37 { Px44y38, Px45y37 } CellNode (44 @ 37) (20)Px38y55 { Px38y54, Px39y55, Px38y56, Px37y55 } CellNode (38 @ 55) (20)Px42y19 { Px43y19, Px42y20 } CellNode (42 @ 19) (20)Px21y45 { Px21y44, Px22y45 } CellNode (21 @ 45) (20)Px23y39 { Px23y40, Px24y39, Px22y39, Px23y38 } CellNode (23 @ 39) (20)Px47y12 { Px47y11, Px46y12, Px47y13 } CellNode (47 @ 12) (20)Px54y44 { Px53y44, Px54y45 } CellNode (54 @ 44) (20)Px28y32 { Px27y32, Px28y33, Px29y32 } CellNode (28 @ 32) (20)Px50y32 { Px50y31, Px50y33, Px51y32 } CellNode (50 @ 32) (20)Px52y26 { Px53y26, Px52y25, Px52y27 } CellNode (52 @ 26) (20)Px31y52 { Px31y53, Px31y51, Px30y52 } CellNode (31 @ 52) (20)Px26y14 { Px27y14, Px26y15, Px26y13 } CellNode (26 @ 14) (20)Px32y6 { Px32y7, Px33y6 } CellNode (32 @ 6) (20)Px31y28 { Px31y27, Px32y28 } CellNode (31 @ 28) (20)Px23y28 { Px22y28, Px23y29 } CellNode (23 @ 28) (20)Px28y21 { Px29y21, Px28y20 } CellNode (28 @ 21) (20)Px15y23 { Px14y23, Px16y23, Px15y24 } CellNode (15 @ 23) (20)Px15y28 { Px15y29, Px16y28, Px15y27, Px14y28 } CellNode (15 @ 28) (20)Px35y53 { Px34y53, Px35y54 } CellNode (35 @ 53) (20)Px44y10 { Px44y11, Px45y10, Px44y9 } CellNode (44 @ 10) (20)Px14y55 { Px14y54, Px13y55 } CellNode (14 @ 55) (20)Px3y59 { Px3y60, Px3y58, Px2y59 } CellNode (3 @ 59) (20)Px25y35 { Px24y35, Px26y35, Px25y36 } CellNode (25 @ 35) (20)Px51y47 { Px50y47, Px51y46, Px51y48 } CellNode (51 @ 47) (20)Px56y40 { Px55y40 } CellNode (56 @ 40) (20)Px35y42 { Px34y42, Px35y43, Px36y42 } CellNode (35 @ 42) (20)Px20y50 { Px19y50, Px20y49, Px20y51, Px21y50 } CellNode (20 @ 50) (20)Px37y36 { Px37y37, Px36y36, Px38y36, Px37y35 } CellNode (37 @ 36) (20)Px22y44 { Px23y44, Px21y44, Px22y45, Px22y43 } CellNode (22 @ 44) (20)Px48y16 { Px47y16, Px48y15, Px48y17 } CellNode (48 @ 16) (20)Px34y5 { Px34y6, Px33y5, Px34y4, Px35y5 } CellNode (34 @ 5) (20)Px40y56 { Px39y56, Px40y55 } CellNode (40 @ 56) (20)Px51y31 { Px51y30, Px52y31, Px51y32, Px50y31 } CellNode (51 @ 31) (20)Px27y18 { Px26y18, Px27y19, Px28y18 } CellNode (27 @ 18) (20)Px32y51 { Px31y51, Px32y50, Px33y51 } CellNode (32 @ 51) (20)Px3y48 { Px4y48, Px3y47, Px2y48, Px3y49 } CellNode (3 @ 48) (20)Px30y33 { Px29y33, Px30y32 } CellNode (30 @ 33) (20)Px42y5 { Px42y4, Px41y5, Px42y6, Px43y5 } CellNode (42 @ 5) (20)Px45y7 { Px45y8, Px44y7 } CellNode (45 @ 7) (20)Px29y20 { Px29y21, Px28y20 } CellNode (29 @ 20) (20)Px40y40 { Px41y40, Px40y39 } CellNode (40 @ 40) (20)Px49y50 { Px50y50, Px49y49 } CellNode (49 @ 50) (20)Px51y20 { Px51y21, Px50y20 } CellNode (51 @ 20) (20)Px59y49 { Px58y49, Px59y48, Px59y50 } CellNode (59 @ 49) (20)Px42y39 { Px42y40, Px41y39, Px43y39 } CellNode (42 @ 39) (20)Px16y27 { Px15y27, Px16y28, Px17y27 } CellNode (16 @ 27) (20)Px34y39 { Px35y39, Px34y38, Px33y39, Px34y40 } CellNode (34 @ 39) (20)Px30y22 { Px30y23, Px29y22 } CellNode (30 @ 22) (20)Px26y34 { Px27y34, Px26y33, Px26y35 } CellNode (26 @ 34) (20)Px52y46 { Px52y45, Px51y46 } CellNode (52 @ 46) (20)Px9y56 { Px9y55, Px9y57, Px10y56 } CellNode (9 @ 56) (20)Px50y52 { Px51y52, Px50y51 } CellNode (50 @ 52) (20)Px31y48 { Px31y49, Px31y47, Px32y48 } CellNode (31 @ 48) (20)Px36y41 { Px36y40, Px36y42, Px37y41 } CellNode (36 @ 41) (20)Px36y4 { Px36y3, Px35y4, Px36y5, Px37y4 } CellNode (36 @ 4) (20)Px23y48 { Px23y47, Px22y48 } CellNode (23 @ 48) (20)Px41y7 { Px41y6 } CellNode (41 @ 7) (20)Px4y47 { Px4y48, Px4y46, Px3y47 } CellNode (4 @ 47) (20)Px41y55 { Px41y54, Px40y55 } CellNode (41 @ 55) (20)Px26y23 { Px26y24, Px27y23, Px25y23, Px26y22 } CellNode (26 @ 23) (20)Px28y17 { Px28y18, Px29y17 } CellNode (28 @ 17) (20)Px13y25 { Px14y25, Px13y26, Px13y24 } CellNode (13 @ 25) (20)Px52y35 { Px52y34, Px52y36 } CellNode (52 @ 35) (20)Px12y57 { Px11y57, Px13y57, Px12y58, Px12y56 } CellNode (12 @ 57) (20)Px23y32 { Px23y33, Px22y32, Px24y32 } CellNode (23 @ 32) (20)Px58y54 { Px59y54, Px58y53 } CellNode (58 @ 54) (20)Px34y12 { Px34y11, Px33y12, Px34y13, Px35y12 } CellNode (34 @ 12) (20)Px19y49 { Px20y49, Px19y50, Px18y49 } CellNode (19 @ 49) (20)Px37y56 { Px36y56, Px37y55, Px38y56 } CellNode (37 @ 56) (20)Px48y36 { Px47y36, Px49y36, Px48y37 } CellNode (48 @ 36) (20)Px35y38 { Px36y38, Px34y38, Px35y39, Px35y37 } CellNode (35 @ 38) (20)Px33y44 { Px33y43, Px33y45, Px34y44, Px32y44 } CellNode (33 @ 44) (20)Px51y51 { Px50y51, Px51y52, Px51y50 } CellNode (51 @ 51) (20)Px46y18 { Px46y19, Px45y18 } CellNode (46 @ 18) (20)Px23y21 { Px24y21, Px23y20 } CellNode (23 @ 21) (20)Px38y3 { Px37y3, Px38y4, Px39y3 } CellNode (38 @ 3) (20)Px43y51 { Px42y51, Px44y51, Px43y50 } CellNode (43 @ 51) (20)Px30y53 { Px29y53, Px30y52, Px31y53, Px30y54 } CellNode (30 @ 53) (20)Px40y4 { Px41y4, Px39y4, Px40y3 } CellNode (40 @ 4) (20)Px29y56 { Px29y55, Px30y56 } CellNode (29 @ 56) (20)Px37y45 { Px36y45, Px38y45, Px37y46 } CellNode (37 @ 45) (20)Px48y20 { Px47y20, Px49y20, Px48y19 } CellNode (48 @ 20) (20)Px31y10 { Px31y11, Px31y9, Px30y10, Px32y10 } CellNode (31 @ 10) (20)Px22y29 { Px22y30, Px23y29, Px21y29, Px22y28 } CellNode (22 @ 29) (20)Px51y40 { Px51y41, Px50y40, Px51y39 } CellNode (51 @ 40) (20)Px47y52 { Px46y52, Px47y53 } CellNode (47 @ 52) (20)Px19y22 { Px19y23, Px20y22, Px19y21, Px18y22 } CellNode (19 @ 22) (20)Px39y52 { Px39y53, Px40y52 } CellNode (39 @ 52) (20)Px65y64 { Px66y64, Px64y64, Px65y63, Px65y65 } CellNode (65 @ 64) (20)Px30y18 { Px29y18 } CellNode (30 @ 18) (20)Px24y36 { Px25y36, Px23y36, Px24y35, Px24y37 } CellNode (24 @ 36) (20)Px50y48 { Px51y48, Px50y47, Px50y49, Px49y48 } CellNode (50 @ 48) (20)Px35y11 { Px35y12, Px34y11 } CellNode (35 @ 11) (20)Px42y48 { Px42y47, Px43y48, Px42y49 } CellNode (42 @ 48) (20)Px34y43 { Px33y43, Px34y42, Px35y43, Px34y44 } CellNode (34 @ 43) (20)Px60y55 { Px60y54, Px61y55, Px59y55, Px60y56 } CellNode (60 @ 55) (20)Px69y65 { Px70y65, Px68y65, Px69y64 } CellNode (69 @ 65) (20)Px47y17 { Px48y17, Px47y16 } CellNode (47 @ 17) (20)Px32y25 { Px32y24, Px31y25, Px32y26 } CellNode (32 @ 25) (20)Px52y55 { Px52y54, Px52y56, Px51y55 } CellNode (52 @ 55) (20)Px2y49 { Px2y48, Px3y49 } CellNode (2 @ 49) (20)Px44y50 { Px43y50, Px45y50, Px44y51 } CellNode (44 @ 50) (20)Px28y37 { Px27y37, Px28y36 } CellNode (28 @ 37) (20)Px31y57 { Px31y58, Px32y57, Px31y56, Px30y57 } CellNode (31 @ 57) (20)Px62y62 { Px62y61, Px61y62, Px63y62 } CellNode (62 @ 62) (20)Px4y56 { Px3y56, Px4y57, Px5y56 } CellNode (4 @ 56) (20)Px32y14 { Px32y15, Px33y14, Px32y13, Px31y14 } CellNode (32 @ 14) (20)Px28y26 { Px29y26, Px28y27 } CellNode (28 @ 26) (20)Px50y21 { Px50y20, Px51y21, Px50y22 } CellNode (50 @ 21) (20)Px48y56 { Px47y56, Px48y57, Px49y56 } CellNode (48 @ 56) (20)Px54y38 { Px54y39, Px53y38 } CellNode (54 @ 38) (20)Px46y38 { Px46y39, Px46y37, Px45y38 } CellNode (46 @ 38) (20)Px38y33 { Px38y34, Px37y33 } CellNode (38 @ 33) (20)Px21y23 { Px21y24, Px22y23, Px21y22, Px20y23 } CellNode (21 @ 23) (20)Px28y10 { Px28y11, Px29y10 } CellNode (28 @ 10) (20)Px56y45 { Px56y46, Px55y45 } CellNode (56 @ 45) (20)Px43y47 { Px42y47, Px43y48 } CellNode (43 @ 47) (20)Px61y59 { Px62y59, Px60y59, Px61y58, Px61y60 } CellNode (61 @ 59) (20)Px31y8 { Px30y8, Px31y9, Px31y7, Px32y8 } CellNode (31 @ 8) (20)Px22y49 { Px22y50, Px21y49, Px22y48 } CellNode (22 @ 49) (20)Px14y49 { Px14y50, Px15y49 } CellNode (14 @ 49) (20)Px25y24 { Px26y24, Px25y23 } CellNode (25 @ 24) (20)Px45y54 { Px46y54, Px45y55 } CellNode (45 @ 54) (20)Px32y56 { Px31y56, Px33y56, Px32y57 } CellNode (32 @ 56) (20)Px63y61 { Px64y61, Px62y61, Px63y62, Px63y60 } CellNode (63 @ 61) (20)Px11y58 { Px11y57, Px12y58, Px10y58 } CellNode (11 @ 58) (20)Px46y11 { Px46y12, Px47y11, Px46y10, Px45y11 } CellNode (46 @ 11) (20)Px33y13 { Px33y12, Px33y14, Px32y13, Px34y13 } CellNode (33 @ 13) (20)Px27y31 { Px26y31, Px27y32 } CellNode (27 @ 31) (20)Px53y43 { Px52y43, Px53y42, Px53y44 } CellNode (53 @ 43) (20)Px40y45 { Px39y45, Px40y46 } CellNode (40 @ 45) (20)Px5y55 { Px6y55, Px5y56 } CellNode (5 @ 55) (20)Px51y25 { Px52y25, Px51y24 } CellNode (51 @ 25) (20)Px47y37 { Px46y37, Px47y36, Px48y37 } CellNode (47 @ 37) (20)Px32y45 { Px33y45, Px32y44, Px32y46 } CellNode (32 @ 45) (20)Px43y20 { Px42y20, Px44y20, Px43y19 } CellNode (43 @ 20) (20)Px45y19 { Px45y20, Px46y19, Px45y18, Px44y19 } CellNode (45 @ 19) (20)Px39y37 { Px38y37, Px39y36, Px39y38 } CellNode (39 @ 37) (20)Px50y57 { Px50y56, Px51y57, Px49y57 } CellNode (50 @ 57) (20)Px24y40 { Px24y39, Px23y40 } CellNode (24 @ 40) (20)Px42y52 { Px42y53, Px41y52, Px42y51 } CellNode (42 @ 52) (20)Px29y14 { Px29y15, Px30y14, Px29y13, Px28y14 } CellNode (29 @ 14) (20)Px33y7 { Px32y7, Px33y6, Px34y7 } CellNode (33 @ 7) (20)Px34y52 { Px34y53, Px33y52, Px34y51 } CellNode (34 @ 52) (20)Px36y46 { Px36y45, Px35y46, Px37y46 } CellNode (36 @ 46) (20)Px62y58 { Px61y58, Px62y59, Px62y57 } CellNode (62 @ 58) (20)Px30y11 { Px30y10, Px31y11, Px29y11 } CellNode (30 @ 11) (20)Px13y54 { Px14y54, Px12y54, Px13y53, Px13y55 } CellNode (13 @ 54) (20)Px44y9 { Px44y10, Px44y8, Px45y9 } CellNode (44 @ 9) (20)Px59y51 { Px60y51, Px58y51, Px59y50, Px59y52 } CellNode (59 @ 51) (20)Px46y53 { Px46y52, Px47y53, Px46y54 } CellNode (46 @ 53) (20)Px50y41 { Px51y41, Px50y40 } CellNode (50 @ 41) (20)Px18y23 { Px17y23, Px19y23, Px18y22 } CellNode (18 @ 23) (20)Px42y41 { Px42y40, Px43y41 } CellNode (42 @ 41) (20)Px38y53 { Px38y54, Px39y53 } CellNode (38 @ 53) (20)Px36y35 { Px36y34, Px36y36, Px37y35, Px35y35 } CellNode (36 @ 35) (20)Px23y37 { Px23y38, Px23y36, Px24y37 } CellNode (23 @ 37) (20)Px21y43 { Px21y42, Px21y44, Px22y43 } CellNode (21 @ 43) (20)Px54y42 { Px53y42, Px54y41 } CellNode (54 @ 42) (20)Px41y49 { Px41y50, Px40y49, Px42y49 } CellNode (41 @ 49) (20)Px31y50 { Px31y49, Px31y51, Px32y50, Px30y50 } CellNode (31 @ 50) (20)Px52y24 { Px53y24, Px51y24, Px52y25, Px52y23 } CellNode (52 @ 24) (20)Px33y49 { Px33y50, Px32y49, Px33y48 } CellNode (33 @ 49) (20)Px31y26 { Px31y27, Px30y26, Px32y26, Px31y25 } CellNode (31 @ 26) (20)Px35y6 { Px34y6, Px35y5 } CellNode (35 @ 6) (20)Px51y56 { Px51y57, Px50y56, Px52y56, Px51y55 } CellNode (51 @ 56) (20)Px58y48 { Px59y48, Px57y48, Px58y47, Px58y49 } CellNode (58 @ 48) (20)Px43y6 { Px43y5, Px42y6, Px43y7, Px44y6 } CellNode (43 @ 6) (20)Px3y57 { Px3y58, Px4y57, Px3y56, Px2y57 } CellNode (3 @ 57) (20)Px31y15 { Px30y15, Px32y15, Px31y14 } CellNode (31 @ 15) (20)Px14y53 { Px13y53, Px14y54 } CellNode (14 @ 53) (20)Px51y45 { Px52y45, Px51y46 } CellNode (51 @ 45) (20)Px53y39 { Px54y39, Px53y38, Px53y40 } CellNode (53 @ 39) (20)Px47y57 { Px47y56, Px46y57, Px47y58, Px48y57 } CellNode (47 @ 57) (20)Px43y40 { Px43y39, Px43y41, Px42y40, Px44y40 } CellNode (43 @ 40) (20)Px19y27 { Px18y27, Px19y28, Px20y27 } CellNode (19 @ 27) (20)Px45y39 { Px45y40, Px46y39, Px45y38, Px44y39 } CellNode (45 @ 39) (20)Px35y40 { Px35y39, Px34y40, Px36y40 } CellNode (35 @ 40) (20)Px37y34 { Px37y35, Px37y33, Px38y34, Px36y34 } CellNode (37 @ 34) (20)Px22y42 { Px21y42, Px22y43, Px22y41 } CellNode (22 @ 42) (20)Px48y14 { Px48y15, Px47y14 } CellNode (48 @ 14) (20)Px29y34 { Px29y33, Px28y34 } CellNode (29 @ 34) (20)Px40y54 { Px40y55, Px39y54, Px41y54, Px40y53 } CellNode (40 @ 54) (20)Px3y46 { Px3y47, Px4y46, Px2y46, Px3y45 } CellNode (3 @ 46) (20)Px27y16 { Px27y15, Px26y16 } CellNode (27 @ 16) (20)Px53y28 { Px53y27, Px53y29, Px52y28 } CellNode (53 @ 28) (20)Px55y46 { Px56y46, Px55y47, Px55y45, Px54y46 } CellNode (55 @ 46) (20)Px22y31 { Px22y30, Px22y32 } CellNode (22 @ 31) (20)Px36y55 { Px36y54, Px35y55, Px36y56, Px37y55 } CellNode (36 @ 55) (20)Px34y37 { Px34y38, Px35y37, Px33y37, Px34y36 } CellNode (34 @ 37) (20)Px45y12 { Px46y12, Px45y11 } CellNode (45 @ 12) (20)Px26y32 { Px26y31, Px26y33, Px27y32, Px25y32 } CellNode (26 @ 32) (20)Px52y44 { Px52y43, Px52y45, Px53y44 } CellNode (52 @ 44) (20)Px50y50 { Px51y50, Px49y50, Px50y49, Px50y51 } CellNode (50 @ 50) (20)Px39y4 { Px38y4, Px39y3, Px40y4 } CellNode (39 @ 4) (20)Px41y5 { Px41y4, Px42y5, Px41y6 } CellNode (41 @ 5) (20)Px38y38 { Px38y37, Px38y39, Px39y38 } CellNode (38 @ 38) (20)Px41y53 { Px42y53, Px40y53, Px41y54, Px41y52 } CellNode (41 @ 53) (20)Px21y28 { Px21y27, Px20y28, Px21y29, Px22y28 } CellNode (21 @ 28) (20)Px28y15 { Px29y15, Px27y15, Px28y14 } CellNode (28 @ 15) (20)Px23y46 { Px23y47, Px23y45, Px22y46 } CellNode (23 @ 46) (20)Px33y53 { Px34y53, Px33y52 } CellNode (33 @ 53) (20)Px12y55 { Px13y55, Px12y54, Px12y56 } CellNode (12 @ 55) (20)Px23y30 { Px23y29, Px22y30, Px24y30 } CellNode (23 @ 30) (20)Px58y52 { Px58y51, Px58y53, Px59y52 } CellNode (58 @ 52) (20)Px34y10 { Px34y11, Px33y10, Px34y9 } CellNode (34 @ 10) (20)Px17y29 { Px17y28, Px16y29 } CellNode (17 @ 29) (20)Px37y54 { Px36y54, Px37y55, Px38y54 } CellNode (37 @ 54) (20)Px3y61 { Px2y61, Px3y60 } CellNode (3 @ 61) (20)Px35y36 { Px36y36, Px34y36, Px35y37, Px35y35 } CellNode (35 @ 36) (20)Px29y54 { Px30y54, Px29y55, Px29y53 } CellNode (29 @ 54) (20)Px46y16 { Px47y16, Px45y16, Px46y15 } CellNode (46 @ 16) (20)Px27y36 { Px27y37, Px28y36, Px26y36, Px27y35 } CellNode (27 @ 36) (20)Px30y51 { Px31y51, Px29y51, Px30y52, Px30y50 } CellNode (30 @ 51) (20)Px25y18 { Px25y17, Px26y18 } CellNode (25 @ 18) (20)Px22y51 { Px21y51, Px22y50 } CellNode (22 @ 51) (20)Px22y27 { Px21y27, Px22y28 } CellNode (22 @ 27) (20)Px27y20 { Px28y20, Px27y19 } CellNode (27 @ 20) (20)Px40y39 { Px40y40, Px41y39, Px39y39, Px40y38 } CellNode (40 @ 39) (20)Px49y49 { Px49y48, Px50y49, Px49y50 } CellNode (49 @ 49) (20)Px34y57 { Px34y56, Px33y57 } CellNode (34 @ 57) (20)Px65y62 { Px64y62, Px65y63 } CellNode (65 @ 62) (20)Px2y58 { Px2y57, Px3y58, Px2y59 } CellNode (2 @ 58) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange50Points300">genRange50Points300messages none  defined. P1 { P48, P106, P108, P174, P270 } NodeP2 { P37, P128, P264 } NodeP3 { P51, P218, P245 } NodeP4 { P22, P150, P216, P293 } NodeP5 { P74, P219, P275 } NodeP6 { P56, P68, P84, P118, P144, P204, P211 } NodeP7 { P17, P32, P271 } NodeP8 { P24, P30, P86 } NodeP9 { P42, P50, P161, P170, P197, P260 } NodeP10 { P64, P95, P115, P252 } NodeP11 { P52, P148, P194, P195, P253, P267 } NodeP12 { P36, P191, P218 } NodeP13 { P142, P209, P235 } NodeP14 { P35, P92, P214, P226, P236, P247, P273 } NodeP15 { P41, P47, P53, P114, P131, P136, P199, P281, P285, P289, P295 } NodeP16 { P203, P263, P273 } NodeP17 { P7, P177, P271 } NodeP18 { P113, P130, P138, P143, P179, P238 } NodeP19 { P98, P183 } NodeP20 { P80, P111, P255, P261, P278 } NodeP21 { P68, P84, P112, P132, P187, P200, P234 } NodeP22 { P4, P83, P155, P185, P293 } NodeP23 { P248 } NodeP24 { P8, P30, P85, P86, P93, P287 } NodeP25 { P43, P96, P98, P166, P183, P215, P249, P298 } NodeP26 { P38, P165, P170, P181, P213, P260 } NodeP27 { P129, P149, P190, P196 } NodeP28 { P34, P101, P145, P190, P268 } NodeP29 { P157, P160, P269, P278, P294 } NodeP30 { P8, P24, P86, P93, P287 } NodeP31 { P77, P177, P237 } NodeP32 { P7 } NodeP33 { P83, P155, P185 } NodeP34 { P28, P90, P101, P137, P145, P158, P190, P196, P224 } NodeP35 { P14, P92, P214, P226, P236, P247, P273 } NodeP36 { P12, P191, P291 } NodeP37 { P2, P248 } NodeP38 { P26, P39, P76, P165, P181, P213 } NodeP39 { P38, P76, P165, P181, P213, P239 } NodeP40 { P99, P121, P124, P167, P210 } NodeP41 { P15, P47, P77, P81, P131, P202, P281, P285, P289 } NodeP42 { P9, P50, P170, P197, P288 } NodeP43 { P25, P96, P98, P166, P183, P215, P249, P298 } NodeP44 { P73, P128, P264 } NodeP45 { P54, P138, P140, P143, P220, P251, P277, P279 } NodeP46 { P57, P73, P164, P189 } NodeP47 { P15, P41, P53, P131, P136, P199, P281, P285, P289, P295 } NodeP48 { P1, P106, P108, P174, P265, P270 } NodeP49 { P161, P170, P192, P197, P260 } NodeP50 { P9, P42, P102, P135, P288 } NodeP51 { P3, P245 } NodeP52 { P11, P148, P228, P243, P259 } NodeP53 { P15, P47, P117, P246, P281, P289 } NodeP54 { P45, P78, P220, P277, P279 } NodeP55 { P171, P232, P297 } NodeP56 { P6, P116, P118, P144, P201, P204, P270 } NodeP57 { P46, P164, P189 } NodeP59 { P64, P75, P79, P115, P141, P227, P290 } NodeP60 { P156, P178, P209, P235 } NodeP61 { P66, P159, P198 } NodeP62 { P91, P153, P202, P207, P217, P254 } NodeP63 { P108, P152, P154, P174, P230, P236, P240, P242, P265 } NodeP64 { P10, P59, P95, P115, P141 } NodeP65 { P102, P169, P288 } NodeP66 { P61, P74, P198 } NodeP67 { P171, P233, P291 } NodeP68 { P6, P21, P84, P200, P204, P211, P234 } NodeP69 { P135, P274, P299 } NodeP70 { P97, P176, P208, P263 } NodeP71 { P162, P300 } NodeP72 { P74, P275 } NodeP73 { P44, P46, P164, P264 } NodeP74 { P5, P66, P72, P159, P198, P219, P275 } NodeP75 { P59, P79, P109, P140, P225, P227, P290 } NodeP76 { P38, P39, P135, P181 } NodeP77 { P31, P41, P81, P131, P281, P289 } NodeP78 { P54, P279 } NodeP79 { P59, P75, P109, P140, P225, P227, P290 } NodeP80 { P20, P139, P212, P255 } NodeP81 { P41, P77, P131, P281, P289 } NodeP82 { P168, P173, P241, P244, P262 } NodeP83 { P22, P33, P155, P185, P293 } NodeP84 { P6, P21, P68, P200, P204, P211 } NodeP85 { P24, P287 } NodeP86 { P8, P24, P30 } NodeP87 { P120, P157, P172, P188, P243, P259 } NodeP88 { P161, P221, P280 } NodeP89 { P120, P188 } NodeP90 { P34, P101, P151, P224 } NodeP91 { P62, P153, P202, P217, P254 } NodeP92 { P14, P35, P205, P247, P273 } NodeP93 { P24, P30, P287 } NodeP94 { P162, P194, P229 } NodeP95 { P10, P64, P115, P141, P252, P279 } NodeP96 { P25, P43, P98, P123, P166, P206, P215, P221, P280, P298 } NodeP97 { P70, P203, P208, P257, P263, P266 } NodeP98 { P19, P25, P43, P96, P151, P183, P215 } NodeP99 { P40, P119, P167, P210 } NodeP100 { P122, P138, P143, P193, P238, P277 } NodeP101 { P28, P34, P90, P145, P151, P224 } NodeP102 { P50, P65, P184, P274 } NodeP103 { P110, P195, P253, P267, P272, P284 } NodeP104 { P133, P168, P182, P262 } NodeP105 { P149, P160, P286 } NodeP106 { P1, P48, P108, P124 } NodeP107 { P118, P174, P223, P265, P292 } NodeP108 { P1, P48, P63, P106, P152, P154, P174, P240, P242, P265, P270 } NodeP109 { P75, P79, P140, P225, P227, P290 } NodeP110 { P103, P194, P195, P253, P267, P272, P284 } NodeP111 { P20, P261, P278 } NodeP112 { P21, P132, P184, P187, P200, P234, P274 } NodeP113 { P18, P130, P147, P177 } NodeP114 { P15, P136, P199, P216, P256, P285, P295 } NodeP115 { P10, P59, P64, P95, P141 } NodeP116 { P56, P144, P201, P270 } NodeP117 { P53, P246, P283 } NodeP118 { P6, P56, P107, P144, P204 } NodeP119 { P99, P167 } NodeP120 { P87, P89, P172, P188 } NodeP121 { P40, P124, P126, P146, P186, P210 } NodeP122 { P100, P179, P193, P238 } NodeP123 { P96, P142, P166, P192, P206, P209, P215, P221, P280, P298 } NodeP124 { P40, P106, P121, P126, P210 } NodeP125 { P164 } NodeP126 { P121, P124, P186, P201, P210 } NodeP127 { P193 } NodeP128 { P2, P44, P264 } NodeP129 { P27, P134, P149, P190 } NodeP130 { P18, P113, P147, P179, P238 } NodeP131 { P15, P41, P47, P77, P81, P281, P285, P289 } NodeP132 { P21, P112, P184, P187, P200, P234, P274 } NodeP133 { P104, P168, P182, P262 } NodeP134 { P129 } NodeP135 { P50, P69, P76 } NodeP136 { P15, P47, P114, P199, P281, P285, P289, P295 } NodeP137 { P34, P158, P163, P175, P196 } NodeP138 { P18, P45, P100, P143, P179, P193, P220, P238, P251, P277 } NodeP139 { P80, P212, P232, P255, P297 } NodeP140 { P45, P75, P79, P109, P225, P251 } NodeP141 { P59, P64, P95, P115 } NodeP142 { P13, P123, P206, P209, P235, P298 } NodeP143 { P18, P45, P100, P138, P179, P193, P220, P238, P251, P277 } NodeP144 { P6, P56, P116, P118, P204, P270 } NodeP145 { P28, P34, P101, P190, P196, P268 } NodeP146 { P121, P186, P210, P216 } NodeP147 { P113, P130 } NodeP148 { P11, P52, P194, P228, P253, P267 } NodeP149 { P27, P105, P129, P190, P196 } NodeP150 { P4, P246, P295 } NodeP151 { P90, P98, P101, P224 } NodeP152 { P63, P108, P154, P174, P230, P240, P242, P265, P270 } NodeP153 { P62, P91, P202, P207, P217, P254 } NodeP154 { P63, P108, P152, P174, P230, P240, P242, P265 } NodeP155 { P22, P33, P83, P185, P293 } NodeP156 { P60, P178, P296 } NodeP157 { P29, P87, P243, P259, P276, P282, P294 } NodeP158 { P34, P137, P175, P196 } NodeP159 { P61, P74, P198 } NodeP160 { P29, P105, P269, P286, P294 } NodeP161 { P9, P49, P88, P170, P192, P197, P206, P221, P280 } NodeP162 { P71, P94, P229, P276, P282 } NodeP163 { P137, P169, P180, P231, P258 } NodeP164 { P46, P57, P73, P125, P189 } NodeP165 { P26, P38, P39, P181, P213, P250, P257 } NodeP166 { P25, P43, P96, P123, P206, P215, P221, P280, P298 } NodeP167 { P40, P99, P119, P210 } NodeP168 { P82, P104, P133, P173, P182, P241, P262 } NodeP169 { P65, P163, P180, P231, P258, P288 } NodeP170 { P9, P26, P42, P49, P161, P192, P197, P260 } NodeP171 { P55, P67, P232, P297 } NodeP172 { P87, P120, P188, P259 } NodeP173 { P82, P168, P241, P262 } NodeP174 { P1, P48, P63, P107, P108, P152, P154, P242, P265, P270 } NodeP175 { P137, P158 } NodeP176 { P70, P208, P263 } NodeP177 { P17, P31, P113, P271 } NodeP178 { P60, P156, P209, P235, P296 } NodeP179 { P18, P122, P130, P138, P143, P238 } NodeP180 { P163, P169, P231, P258 } NodeP181 { P26, P38, P39, P76, P165, P213, P250 } NodeP182 { P104, P133, P168, P241, P262 } NodeP183 { P19, P25, P43, P98 } NodeP184 { P102, P112, P132, P187, P274 } NodeP185 { P22, P33, P83, P155, P293 } NodeP186 { P121, P126, P146, P201, P210 } NodeP187 { P21, P112, P132, P184, P234, P274 } NodeP188 { P87, P89, P120, P172 } NodeP189 { P46, P57, P164 } NodeP190 { P27, P28, P34, P129, P145, P149, P196 } NodeP191 { P12, P36, P218 } NodeP192 { P49, P123, P161, P170, P206, P221, P280 } NodeP193 { P100, P122, P127, P138, P143, P277 } NodeP194 { P11, P94, P110, P148, P253, P267 } NodeP195 { P11, P103, P110, P244, P253, P267 } NodeP196 { P27, P34, P137, P145, P149, P158, P190 } NodeP197 { P9, P42, P49, P161, P170, P260 } NodeP198 { P61, P66, P74, P159 } NodeP199 { P15, P47, P114, P136, P207, P285 } NodeP200 { P21, P68, P84, P112, P132, P211, P234 } NodeP201 { P56, P116, P126, P186, P270 } NodeP202 { P41, P62, P91, P153, P217, P254 } NodeP203 { P16, P97, P205, P250, P266, P273 } NodeP204 { P6, P56, P68, P84, P118, P144, P211 } NodeP205 { P92, P203, P250, P273 } NodeP206 { P96, P123, P142, P161, P166, P192, P215, P221, P280 } NodeP207 { P62, P153, P199 } NodeP208 { P70, P97, P176, P257, P263, P266 } NodeP209 { P13, P60, P123, P142, P178, P235 } NodeP210 { P40, P99, P121, P124, P126, P146, P167, P186 } NodeP211 { P6, P68, P84, P200, P204 } NodeP212 { P80, P139, P255 } NodeP213 { P26, P38, P39, P165, P181 } NodeP214 { P14, P35, P226, P230, P236, P240, P247 } NodeP215 { P25, P43, P96, P98, P123, P166, P206, P280, P298 } NodeP216 { P4, P114, P146, P295 } NodeP217 { P62, P91, P153, P202, P254 } NodeP218 { P3, P12, P191 } NodeP219 { P5, P74 } NodeP220 { P45, P54, P138, P143, P251, P277, P279 } NodeP221 { P88, P96, P123, P161, P166, P192, P206, P280 } NodeP223 { P107, P239, P292 } NodeP224 { P34, P90, P101, P151 } NodeP225 { P75, P79, P109, P140, P227, P290 } NodeP226 { P14, P35, P214, P230, P236, P240, P247 } NodeP227 { P59, P75, P79, P109, P225, P290 } NodeP228 { P52, P148, P243, P259 } NodeP229 { P94, P162, P276, P282 } NodeP230 { P63, P152, P154, P214, P226, P236, P240 } NodeP231 { P163, P169, P180, P258 } NodeP232 { P55, P139, P171, P297 } NodeP233 { P67, P291 } NodeP234 { P21, P68, P112, P132, P187, P200 } NodeP235 { P13, P60, P142, P178, P209 } NodeP236 { P14, P35, P63, P214, P226, P230, P240, P247 } NodeP237 { P31 } NodeP238 { P18, P100, P122, P130, P138, P143, P179 } NodeP239 { P39, P223, P292 } NodeP240 { P63, P108, P152, P154, P214, P226, P230, P236, P242 } NodeP241 { P82, P168, P173, P182, P244, P252, P262 } NodeP242 { P63, P108, P152, P154, P174, P240 } NodeP243 { P52, P87, P157, P228, P259, P294 } NodeP244 { P82, P195, P241, P252, P267 } NodeP245 { P3, P51 } NodeP246 { P53, P117, P150, P283 } NodeP247 { P14, P35, P92, P214, P226, P236, P273 } NodeP248 { P23, P37 } NodeP249 { P25, P43, P296, P298 } NodeP250 { P165, P181, P203, P205 } NodeP251 { P45, P138, P140, P143, P220, P277 } NodeP252 { P10, P95, P241, P244 } NodeP253 { P11, P103, P110, P148, P194, P195, P267 } NodeP254 { P62, P91, P153, P202, P217 } NodeP255 { P20, P80, P139, P212 } NodeP256 { P114 } NodeP257 { P97, P165, P208, P266 } NodeP258 { P163, P169, P180, P231, P288 } NodeP259 { P52, P87, P157, P172, P228, P243 } NodeP260 { P9, P26, P49, P170, P197 } NodeP261 { P20, P111 } NodeP262 { P82, P104, P133, P168, P173, P182, P241 } NodeP263 { P16, P70, P97, P176, P208, P266 } NodeP264 { P2, P44, P73, P128 } NodeP265 { P48, P63, P107, P108, P152, P154, P174, P270 } NodeP266 { P97, P203, P208, P257, P263 } NodeP267 { P11, P103, P110, P148, P194, P195, P244, P253 } NodeP268 { P28, P145 } NodeP269 { P29, P160, P286, P294 } NodeP270 { P1, P48, P56, P108, P116, P144, P152, P174, P201, P265 } NodeP271 { P7, P17, P177 } NodeP272 { P103, P110, P284 } NodeP273 { P14, P16, P35, P92, P203, P205, P247 } NodeP274 { P69, P102, P112, P132, P184, P187 } NodeP275 { P5, P72, P74 } NodeP276 { P157, P162, P229, P282 } NodeP277 { P45, P54, P100, P138, P143, P193, P220, P251 } NodeP278 { P20, P29, P111 } NodeP279 { P45, P54, P78, P95, P220 } NodeP280 { P88, P96, P123, P161, P166, P192, P206, P215, P221 } NodeP281 { P15, P41, P47, P53, P77, P81, P131, P136, P285, P289 } NodeP282 { P157, P162, P229, P276 } NodeP283 { P117, P246 } NodeP284 { P103, P110, P272 } NodeP285 { P15, P41, P47, P114, P131, P136, P199, P281, P289, P295 } NodeP286 { P105, P160, P269 } NodeP287 { P24, P30, P85, P93 } NodeP288 { P42, P50, P65, P169, P258 } NodeP289 { P15, P41, P47, P53, P77, P81, P131, P136, P281, P285 } NodeP290 { P59, P75, P79, P109, P225, P227 } NodeP291 { P36, P67, P233 } NodeP292 { P107, P223, P239 } NodeP293 { P4, P22, P83, P155, P185 } NodeP294 { P29, P157, P160, P243, P269 } NodeP295 { P15, P47, P114, P136, P150, P216, P285 } NodeP296 { P156, P178, P249 } NodeP297 { P55, P139, P171, P232 } NodeP298 { P25, P43, P96, P123, P142, P166, P215, P249 } NodeP299 { P69 } NodeP300 { P71 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="someNetwork">someNetworkmessages none  defined. P1 { P2, P3, P4 } Node (140 @ 268) (117)P10 { P7, P9, P11, P12 } Node (440 @ 171) (117)P11 { P9, P10, P12, P13 } Node (487 @ 129) (117)P12 { P10, P11, P13, P14 } Node (525 @ 124) (117)P13 { P11, P12, P14 } Node (549 @ 97) (117)P14 { P12, P13 } Node (590 @ 70) (117)P15 { P6, P16, P17 } Node (413 @ 364) (117)P16 { P5, P6, P15 } Node (351 @ 365) (117)P17 { P15, P18 } Node (477 @ 296) (117)P18 { P17 } Node (527 @ 323) (117)P2 { P1, P3, P4, P5, P8 } Node (211 @ 233) (117)P3 { P1, P2, P4, P5 } Node (172 @ 308) (117)P4 { P1, P2, P3, P5, P6, P8 } Node (245 @ 265) (117)P5 { P2, P3, P4, P6, P16 } Node (253 @ 335) (117)P6 { P4, P5, P7, P15, P16 } Node (346 @ 301) (117)P7 { P6, P8, P9, P10 } Node (385 @ 222) (117)P8 { P2, P4, P7, P9 } Node (312 @ 185) (117)P9 { P7, P8, P10, P11 } Node (380 @ 172) (117)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cellNetwork0">cellNetwork0messages none  defined. Px7y12 { Px8y12, Px6y12 } CellNode (7 @ 12) (20)Px5y9 { Px4y9, Px5y8, Px6y9 } CellNode (5 @ 9) (20)Px5y7 { Px5y6, Px6y7, Px4y7, Px5y8 } CellNode (5 @ 7) (20)Px5y5 { Px4y5, Px5y6, Px6y5 } CellNode (5 @ 5) (20)Px5y3 { Px4y3 } CellNode (5 @ 3) (20)Px5y1 { Px6y1 } CellNode (5 @ 1) (20)Px1y12 { Px2y12 } CellNode (1 @ 12) (20)Px1y10 { Px1y9, Px2y10 } CellNode (1 @ 10) (20)Px6y8 { Px6y7, Px7y8, Px5y8, Px6y9 } CellNode (6 @ 8) (20)Px8y12 { Px9y12, Px7y12 } CellNode (8 @ 12) (20)Px7y7 { Px7y8, Px8y7, Px6y7 } CellNode (7 @ 7) (20)Px12y11 { Px12y12, Px12y10 } CellNode (12 @ 11) (20)Px7y3 { Px7y4, Px8y3 } CellNode (7 @ 3) (20)Px7y5 { Px7y4, Px8y5, Px6y5 } CellNode (7 @ 5) (20)Px2y12 { Px1y12, Px3y12 } CellNode (2 @ 12) (20)Px2y10 { Px2y9, Px1y10 } CellNode (2 @ 10) (20)Px8y8 { Px7y8, Px8y7, Px9y8 } CellNode (8 @ 8) (20)Px8y6 { Px8y5, Px9y6, Px8y7 } CellNode (8 @ 6) (20)Px10y6 { Px9y6, Px11y6, Px10y5, Px10y7 } CellNode (10 @ 6) (20)Px1y4 { Px1y3, Px2y4 } CellNode (1 @ 4) (20)Px9y12 { Px8y12, Px10y12 } CellNode (9 @ 12) (20)Px9y7 { Px10y7, Px9y8, Px9y6, Px8y7 } CellNode (9 @ 7) (20)Px11y7 { Px10y7, Px11y6, Px12y7, Px11y8 } CellNode (11 @ 7) (20)Px11y5 { Px11y6, Px10y5, Px12y5, Px11y4 } CellNode (11 @ 5) (20)Px9y5 { Px8y5, Px9y6, Px10y5 } CellNode (9 @ 5) (20)Px11y1 { Px10y1, Px11y2, Px12y1 } CellNode (11 @ 1) (20)Px2y9 { Px3y9, Px1y9, Px2y10 } CellNode (2 @ 9) (20)Px11y3 { Px12y3, Px11y2, Px11y4 } CellNode (11 @ 3) (20)Px2y3 { Px3y3, Px1y3, Px2y4 } CellNode (2 @ 3) (20)Px10y12 { Px9y12, Px11y12 } CellNode (10 @ 12) (20)Px12y8 { Px12y9, Px11y8, Px12y7 } CellNode (12 @ 8) (20)Px3y12 { Px4y12, Px2y12 } CellNode (3 @ 12) (20)Px3y8 { Px3y9, Px4y8 } CellNode (3 @ 8) (20)Px12y2 { Px12y3, Px11y2, Px12y1 } CellNode (12 @ 2) (20)Px3y4 { Px3y3, Px2y4 } CellNode (3 @ 4) (20)Px12y6 { Px12y7, Px11y6, Px12y5 } CellNode (12 @ 6) (20)Px3y6 { Px4y6 } CellNode (3 @ 6) (20)Px9y3 { Px8y3 } CellNode (9 @ 3) (20)Px12y4 { Px12y3, Px11y4, Px12y5 } CellNode (12 @ 4) (20)Px4y9 { Px3y9, Px4y8, Px5y9 } CellNode (4 @ 9) (20)Px4y7 { Px4y8, Px5y7, Px4y6 } CellNode (4 @ 7) (20)Px4y5 { Px4y6, Px5y5 } CellNode (4 @ 5) (20)Px4y3 { Px3y3, Px5y3 } CellNode (4 @ 3) (20)Px11y12 { Px12y12, Px10y12 } CellNode (11 @ 12) (20)Px5y8 { Px4y8, Px5y9, Px5y7, Px6y8 } CellNode (5 @ 8) (20)Px5y6 { Px4y6, Px5y5, Px5y7 } CellNode (5 @ 6) (20)Px4y12 { Px3y12, Px5y12 } CellNode (4 @ 12) (20)Px6y9 { Px5y9, Px6y8 } CellNode (6 @ 9) (20)Px6y7 { Px7y7, Px5y7, Px6y8 } CellNode (6 @ 7) (20)Px6y5 { Px5y5, Px7y5 } CellNode (6 @ 5) (20)Px6y1 { Px5y1 } CellNode (6 @ 1) (20)Px7y8 { Px7y7, Px8y8, Px6y8 } CellNode (7 @ 8) (20)Px12y12 { Px11y12, Px12y11 } CellNode (12 @ 12) (20)Px12y10 { Px12y11, Px12y9 } CellNode (12 @ 10) (20)Px7y4 { Px7y3, Px7y5 } CellNode (7 @ 4) (20)Px5y12 { Px4y12, Px6y12 } CellNode (5 @ 12) (20)Px8y7 { Px7y7, Px8y8, Px9y7, Px8y6 } CellNode (8 @ 7) (20)Px8y5 { Px7y5, Px8y6, Px9y5 } CellNode (8 @ 5) (20)Px10y5 { Px10y6, Px11y5, Px9y5 } CellNode (10 @ 5) (20)Px1y9 { Px2y9, Px1y10 } CellNode (1 @ 9) (20)Px8y3 { Px9y3, Px7y3 } CellNode (8 @ 3) (20)Px1y3 { Px2y3, Px1y4 } CellNode (1 @ 3) (20)Px10y7 { Px9y7, Px11y7, Px10y6 } CellNode (10 @ 7) (20)Px10y1 { Px11y1 } CellNode (10 @ 1) (20)Px9y8 { Px9y7, Px8y8 } CellNode (9 @ 8) (20)Px9y6 { Px9y5, Px8y6, Px10y6, Px9y7 } CellNode (9 @ 6) (20)Px11y6 { Px12y6, Px11y5, Px10y6, Px11y7 } CellNode (11 @ 6) (20)Px11y4 { Px12y4, Px11y5, Px11y3 } CellNode (11 @ 4) (20)Px6y12 { Px7y12, Px5y12 } CellNode (6 @ 12) (20)Px2y4 { Px3y4, Px1y4, Px2y3 } CellNode (2 @ 4) (20)Px11y8 { Px11y7, Px12y8 } CellNode (11 @ 8) (20)Px11y2 { Px12y2, Px11y1, Px11y3 } CellNode (11 @ 2) (20)Px12y9 { Px12y8, Px12y10 } CellNode (12 @ 9) (20)Px12y7 { Px12y8, Px11y7, Px12y6 } CellNode (12 @ 7) (20)Px3y9 { Px3y8, Px4y9, Px2y9 } CellNode (3 @ 9) (20)Px12y3 { Px12y4, Px11y3, Px12y2 } CellNode (12 @ 3) (20)Px12y1 { Px11y1, Px12y2 } CellNode (12 @ 1) (20)Px3y3 { Px3y4, Px4y3, Px2y3 } CellNode (3 @ 3) (20)Px12y5 { Px12y4, Px11y5, Px12y6 } CellNode (12 @ 5) (20)Px4y8 { Px3y8, Px4y9, Px4y7, Px5y8 } CellNode (4 @ 8) (20)Px4y6 { Px5y6, Px4y5, Px3y6, Px4y7 } CellNode (4 @ 6) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cellNetwork16">cellNetwork16messages none  defined. Px57y83 { Px56y83, Px57y84 } CellNode (57 @ 83) (10)Px35y4 { Px34y4, Px36y4 } CellNode (35 @ 4) (10)Px42y84 { Px43y84 } CellNode (42 @ 84) (10)Px37y20 { Px36y20, Px37y19, Px38y20 } CellNode (37 @ 20) (10)Px8y77 { Px7y77, Px8y76, Px9y77 } CellNode (8 @ 77) (10)Px63y60 { Px62y60, Px63y61, Px63y59 } CellNode (63 @ 60) (10)Px82y1 { Px81y1, Px82y2, Px83y1 } CellNode (82 @ 1) (10)Px43y1 { Px43y2, Px44y1 } CellNode (43 @ 1) (10)Px4y16 { Px4y15, Px5y16 } CellNode (4 @ 16) (10)Px113y1 { Px112y1 } CellNode (113 @ 1) (10)Px2y10 { Px3y10, Px2y11, Px1y10 } CellNode (2 @ 10) (10)Px28y10 { Px29y10, Px28y11, Px28y9, Px27y10 } CellNode (28 @ 10) (10)Px55y71 { Px56y71, Px55y72, Px55y70 } CellNode (55 @ 71) (10)Px44y12 { Px45y12, Px43y12, Px44y11, Px44y13 } CellNode (44 @ 12) (10)Px51y10 { Px51y9, Px52y10, Px51y11 } CellNode (51 @ 10) (10)Px60y14 { Px59y14, Px61y14, Px60y13 } CellNode (60 @ 14) (10)Px3y25 { Px4y25, Px3y24, Px2y25, Px3y26 } CellNode (3 @ 25) (10)Px38y59 { Px38y60 } CellNode (38 @ 59) (10)Px10y25 { Px10y24, Px9y25 } CellNode (10 @ 25) (10)Px85y2 { Px84y2, Px85y1 } CellNode (85 @ 2) (10)Px36y23 { Px36y22, Px35y23 } CellNode (36 @ 23) (10)Px51y9 { Px51y8, Px52y9, Px51y10 } CellNode (51 @ 9) (10)Px68y15 { Px68y16, Px69y15, Px67y15 } CellNode (68 @ 15) (10)Px46y2 { Px46y1, Px47y2, Px45y2 } CellNode (46 @ 2) (10)Px21y78 { Px21y79, Px21y77, Px20y78 } CellNode (21 @ 78) (10)Px3y19 { Px3y18, Px3y20, Px4y19, Px2y19 } CellNode (3 @ 19) (10)Px28y8 { Px27y8, Px28y9, Px28y7 } CellNode (28 @ 8) (10)Px12y74 { Px12y75, Px13y74 } CellNode (12 @ 74) (10)Px36y77 { Px36y76, Px37y77 } CellNode (36 @ 77) (10)Px1y13 { Px1y14, Px2y13, Px1y12 } CellNode (1 @ 13) (10)Px110y78 { Px110y79 } CellNode (110 @ 78) (10)Px25y18 { Px24y18, Px25y17, Px25y19, Px26y18 } CellNode (25 @ 18) (10)Px52y79 { Px52y78, Px52y80, Px53y79, Px51y79 } CellNode (52 @ 79) (10)Px16y14 { Px17y14, Px16y13, Px15y14, Px16y15 } CellNode (16 @ 14) (10)Px23y12 { Px23y11 } CellNode (23 @ 12) (10)Px58y14 { Px58y15, Px59y14, Px57y14 } CellNode (58 @ 14) (10)Px34y4 { Px35y4, Px34y5 } CellNode (34 @ 4) (10)Px32y16 { Px32y15, Px32y17, Px31y16 } CellNode (32 @ 16) (10)Px9y14 { Px8y14, Px10y14, Px9y15, Px9y13 } CellNode (9 @ 14) (10)Px2y28 { Px3y28, Px1y28 } CellNode (2 @ 28) (10)Px8y23 { Px8y22, Px9y23, Px7y23 } CellNode (8 @ 23) (10)Px49y10 { Px49y11, Px49y9, Px48y10 } CellNode (49 @ 10) (10)Px24y27 { Px24y28, Px23y27, Px24y26 } CellNode (24 @ 27) (10)Px10y19 { Px10y18, Px10y20, Px9y19, Px11y19 } CellNode (10 @ 19) (10)Px81y1 { Px80y1, Px81y2, Px82y1 } CellNode (81 @ 1) (10)Px112y1 { Px113y1, Px111y1 } CellNode (112 @ 1) (10)Px65y66 { Px65y67, Px66y66, Px65y65, Px64y66 } CellNode (65 @ 66) (10)Px8y17 { Px8y16, Px9y17 } CellNode (8 @ 17) (10)Px15y17 { Px16y17, Px14y17 } CellNode (15 @ 17) (10)Px106y72 { Px105y72, Px107y72, Px106y71 } CellNode (106 @ 72) (10)Px22y15 { Px22y14, Px21y15, Px22y16, Px23y15 } CellNode (22 @ 15) (10)Px13y11 { Px13y12, Px14y11 } CellNode (13 @ 11) (10)Px31y19 { Px30y19, Px31y20, Px32y19, Px31y18 } CellNode (31 @ 19) (10)Px84y2 { Px85y2, Px83y2, Px84y1 } CellNode (84 @ 2) (10)Px7y26 { Px8y26, Px7y25, Px6y26, Px7y27 } CellNode (7 @ 26) (10)Px53y16 { Px53y15, Px52y16, Px54y16 } CellNode (53 @ 16) (10)Px45y2 { Px45y1, Px46y2, Px44y2, Px45y3 } CellNode (45 @ 2) (10)Px27y8 { Px27y9, Px28y8, Px26y8 } CellNode (27 @ 8) (10)Px62y63 { Px61y63 } CellNode (62 @ 63) (10)Px71y67 { Px70y67, Px71y66, Px72y67 } CellNode (71 @ 67) (10)Px5y14 { Px5y13, Px4y14 } CellNode (5 @ 14) (10)Px105y75 { Px105y76, Px106y75 } CellNode (105 @ 75) (10)Px21y18 { Px22y18, Px20y18, Px21y19, Px21y17 } CellNode (21 @ 18) (10)Px29y19 { Px29y18, Px29y20, Px28y19, Px30y19 } CellNode (29 @ 19) (10)Px12y14 { Px12y15, Px11y14, Px13y14, Px12y13 } CellNode (12 @ 14) (10)Px48y3 { Px47y3, Px48y2, Px48y4 } CellNode (48 @ 3) (10)Px36y17 { Px37y17, Px36y16, Px35y17, Px36y18 } CellNode (36 @ 17) (10)Px27y13 { Px27y14, Px28y13, Px27y12, Px26y13 } CellNode (27 @ 13) (10)Px34y11 { Px34y12, Px35y11, Px34y10, Px33y11 } CellNode (34 @ 11) (10)Px13y29 { Px12y29, Px14y29 } CellNode (13 @ 29) (10)Px4y53 { Px4y52, Px4y54 } CellNode (4 @ 53) (10)Px4y23 { Px3y23, Px5y23, Px4y22, Px4y24 } CellNode (4 @ 23) (10)Px11y23 { Px12y23, Px11y22 } CellNode (11 @ 23) (10)Px50y13 { Px50y12, Px50y14, Px51y13, Px49y13 } CellNode (50 @ 13) (10)Px80y1 { Px80y2, Px81y1, Px79y1 } CellNode (80 @ 1) (10)Px61y72 { Px60y72, Px61y71 } CellNode (61 @ 72) (10)Px26y22 { Px27y22, Px25y22, Px26y21, Px26y23 } CellNode (26 @ 22) (10)Px53y83 { Px54y83, Px53y82, Px52y83, Px53y84 } CellNode (53 @ 83) (10)Px19y24 { Px19y23, Px18y24, Px19y25, Px20y24 } CellNode (19 @ 24) (10)Px20y27 { Px21y27, Px20y28, Px19y27, Px20y26 } CellNode (20 @ 27) (10)Px111y1 { Px112y1 } CellNode (111 @ 1) (10)Px3y32 { Px2y32, Px3y31, Px4y32 } CellNode (3 @ 32) (10)Px33y20 { Px32y20, Px33y21 } CellNode (33 @ 20) (10)Px36y60 { Px36y59 } CellNode (36 @ 60) (10)Px19y18 { Px20y18, Px18y18, Px19y19 } CellNode (19 @ 18) (10)Px46y79 { Px47y79, Px45y79, Px46y78, Px46y80 } CellNode (46 @ 79) (10)Px92y67 { Px92y66, Px91y67 } CellNode (92 @ 67) (10)Px17y12 { Px16y12, Px17y13, Px18y12 } CellNode (17 @ 12) (10)Px83y63 { Px84y63, Px83y62, Px82y63, Px83y64 } CellNode (83 @ 63) (10)Px26y16 { Px26y15, Px26y17, Px25y16, Px27y16 } CellNode (26 @ 16) (10)Px44y2 { Px43y2, Px44y3, Px45y2, Px44y1 } CellNode (44 @ 2) (10)Px33y14 { Px34y14, Px33y13, Px33y15 } CellNode (33 @ 14) (10)Px59y72 { Px59y73, Px58y72, Px60y72 } CellNode (59 @ 72) (10)Px24y10 { Px24y11, Px25y10, Px23y10, Px24y9 } CellNode (24 @ 10) (10)Px48y13 { Px49y13, Px48y12, Px47y13 } CellNode (48 @ 13) (10)Px1y50 { Px1y51, Px2y50, Px1y49 } CellNode (1 @ 50) (10)Px1y20 { Px2y20, Px1y19, Px1y21 } CellNode (1 @ 20) (10)Px64y15 { Px64y16, Px63y15, Px65y15 } CellNode (64 @ 15) (10)Px25y25 { Px25y24, Px25y26 } CellNode (25 @ 25) (10)Px18y27 { Px18y26, Px18y28, Px19y27 } CellNode (18 @ 27) (10)Px16y21 { Px15y21, Px16y20, Px17y21, Px16y22 } CellNode (16 @ 21) (10)Px50y80 { Px51y80, Px50y79, Px50y81, Px49y80 } CellNode (50 @ 80) (10)Px26y8 { Px27y8, Px25y8, Px26y9 } CellNode (26 @ 8) (10)Px57y17 { Px56y17, Px57y18, Px58y17, Px57y16 } CellNode (57 @ 17) (10)Px32y23 { Px32y22, Px31y23, Px33y23, Px32y24 } CellNode (32 @ 23) (10)Px83y57 { Px83y56 } CellNode (83 @ 57) (10)Px9y21 { Px9y22, Px8y21, Px9y20, Px10y21 } CellNode (9 @ 21) (10)Px8y30 { Px9y30, Px8y31, Px7y30, Px8y29 } CellNode (8 @ 30) (10)Px53y77 { Px53y78, Px52y77, Px53y76 } CellNode (53 @ 77) (10)Px83y2 { Px82y2, Px83y1, Px84y2 } CellNode (83 @ 2) (10)Px47y3 { Px47y4, Px48y3, Px47y2 } CellNode (47 @ 3) (10)Px40y12 { Px40y13, Px41y12, Px39y12, Px40y11 } CellNode (40 @ 12) (10)Px75y68 { Px75y69, Px74y68 } CellNode (75 @ 68) (10)Px1y74 { Px1y73, Px2y74 } CellNode (1 @ 74) (10)Px66y64 { Px65y64, Px66y63, Px66y65 } CellNode (66 @ 64) (10)Px50y74 { Px51y74, Px50y75 } CellNode (50 @ 74) (10)Px88y61 { Px88y62, Px89y61 } CellNode (88 @ 61) (10)Px29y9 { Px28y9, Px30y9, Px29y10 } CellNode (29 @ 9) (10)Px30y11 { Px30y10, Px31y11, Px29y11 } CellNode (30 @ 11) (10)Px58y75 { Px59y75, Px58y74 } CellNode (58 @ 75) (10)Px38y12 { Px38y13, Px37y12, Px39y12, Px38y11 } CellNode (38 @ 12) (10)Px26y83 { Px26y84, Px25y83 } CellNode (26 @ 83) (10)Px54y14 { Px55y14, Px53y14, Px54y15, Px54y13 } CellNode (54 @ 14) (10)Px45y10 { Px45y11, Px44y10, Px45y9 } CellNode (45 @ 10) (10)Px63y18 { Px62y18, Px63y17, Px64y18 } CellNode (63 @ 18) (10)Px15y24 { Px16y24, Px15y25, Px14y24, Px15y23 } CellNode (15 @ 24) (10)Px22y22 { Px23y22, Px22y23, Px21y22, Px22y21 } CellNode (22 @ 22) (10)Px57y84 { Px57y83, Px58y84, Px56y84 } CellNode (57 @ 84) (10)Px64y82 { Px64y83 } CellNode (64 @ 82) (10)Px82y2 { Px81y2, Px82y1, Px83y2 } CellNode (82 @ 2) (10)Px63y61 { Px64y61, Px62y61, Px63y62, Px63y60 } CellNode (63 @ 61) (10)Px43y2 { Px42y2, Px43y1, Px44y2 } CellNode (43 @ 2) (10)Px11y17 { Px11y18, Px12y17, Px10y17 } CellNode (11 @ 17) (10)Px2y11 { Px3y11, Px2y10, Px1y11, Px2y12 } CellNode (2 @ 11) (10)Px28y11 { Px29y11, Px27y11, Px28y12, Px28y10 } CellNode (28 @ 11) (10)Px55y72 { Px56y72, Px55y71 } CellNode (55 @ 72) (10)Px44y13 { Px45y13, Px44y14, Px43y13, Px44y12 } CellNode (44 @ 13) (10)Px59y1 { Px58y1, Px59y2, Px60y1 } CellNode (59 @ 1) (10)Px51y11 { Px51y12, Px50y11, Px52y11, Px51y10 } CellNode (51 @ 11) (10)Px68y16 { Px68y15, Px67y16 } CellNode (68 @ 16) (10)Px59y12 { Px60y12, Px59y13 } CellNode (59 @ 12) (10)Px3y26 { Px3y27, Px4y26, Px3y25, Px2y26 } CellNode (3 @ 26) (10)Px25y8 { Px25y9, Px26y8 } CellNode (25 @ 8) (10)Px45y58 { Px45y59, Px46y58, Px44y58 } CellNode (45 @ 58) (10)Px27y20 { Px26y20, Px28y20, Px27y19, Px27y21 } CellNode (27 @ 20) (10)Px21y79 { Px21y78 } CellNode (21 @ 79) (10)Px28y9 { Px27y9, Px29y9, Px28y10, Px28y8 } CellNode (28 @ 9) (10)Px12y75 { Px12y74, Px13y75 } CellNode (12 @ 75) (10)Px84y61 { Px83y61, Px84y62 } CellNode (84 @ 61) (10)Px1y14 { Px2y14, Px1y13, Px1y15 } CellNode (1 @ 14) (10)Px110y79 { Px110y78 } CellNode (110 @ 79) (10)Px9y15 { Px10y15, Px8y15, Px9y14 } CellNode (9 @ 15) (10)Px25y19 { Px26y19, Px24y19, Px25y18, Px25y20 } CellNode (25 @ 19) (10)Px16y15 { Px16y14, Px17y15 } CellNode (16 @ 15) (10)Px49y4 { Px49y5, Px48y4 } CellNode (49 @ 4) (10)Px34y5 { Px34y4 } CellNode (34 @ 5) (10)Px49y11 { Px49y10, Px50y11, Px48y11, Px49y12 } CellNode (49 @ 11) (10)Px58y15 { Px58y16, Px57y15, Px59y15, Px58y14 } CellNode (58 @ 15) (10)Px32y17 { Px32y16, Px31y17 } CellNode (32 @ 17) (10)Px24y28 { Px25y28, Px23y28, Px24y27, Px24y29 } CellNode (24 @ 28) (10)Px81y2 { Px80y2, Px81y1, Px82y2 } CellNode (81 @ 2) (10)Px42y2 { Px41y2, Px42y3, Px43y2 } CellNode (42 @ 2) (10)Px65y67 { Px64y67, Px65y66, Px65y68, Px66y67 } CellNode (65 @ 67) (10)Px58y1 { Px59y1 } CellNode (58 @ 1) (10)Px22y16 { Px23y16, Px22y15, Px21y16, Px22y17 } CellNode (22 @ 16) (10)Px13y12 { Px13y13, Px14y12, Px13y11 } CellNode (13 @ 12) (10)Px46y19 { Px45y19, Px46y20 } CellNode (46 @ 19) (10)Px7y27 { Px7y26, Px6y27 } CellNode (7 @ 27) (10)Px45y3 { Px45y4, Px44y3, Px45y2 } CellNode (45 @ 3) (10)Px5y21 { Px6y21, Px4y21, Px5y22 } CellNode (5 @ 21) (10)Px12y21 { Px13y21, Px12y22, Px11y21 } CellNode (12 @ 21) (10)Px21y25 { Px20y25, Px21y26 } CellNode (21 @ 25) (10)Px1y8 { Px1y9 } CellNode (1 @ 8) (10)Px15y61 { Px14y61 } CellNode (15 @ 61) (10)Px31y63 { Px31y64 } CellNode (31 @ 63) (10)Px27y9 { Px27y8, Px26y9, Px28y9, Px27y10 } CellNode (27 @ 9) (10)Px11y30 { Px10y30, Px12y30, Px11y29 } CellNode (11 @ 30) (10)Px48y4 { Px49y4, Px47y4, Px48y5, Px48y3 } CellNode (48 @ 4) (10)Px105y76 { Px105y75, Px105y77, Px106y76 } CellNode (105 @ 76) (10)Px21y19 { Px21y20, Px22y19, Px20y19, Px21y18 } CellNode (21 @ 19) (10)Px12y15 { Px12y14, Px13y15, Px11y15, Px12y16 } CellNode (12 @ 15) (10)Px54y75 { Px55y75, Px54y76, Px53y75 } CellNode (54 @ 75) (10)Px36y18 { Px36y19, Px35y18, Px36y17 } CellNode (36 @ 18) (10)Px27y14 { Px27y15, Px28y14, Px26y14, Px27y13 } CellNode (27 @ 14) (10)Px34y12 { Px34y11, Px33y12, Px34y13, Px35y12 } CellNode (34 @ 12) (10)Px43y16 { Px42y16, Px44y16, Px43y17 } CellNode (43 @ 16) (10)Px20y7 { Px20y8 } CellNode (20 @ 7) (10)Px41y10 { Px42y10, Px40y10, Px41y9, Px41y11 } CellNode (41 @ 10) (10)Px4y54 { Px4y53, Px3y54 } CellNode (4 @ 54) (10)Px95y1 { Px94y1 } CellNode (95 @ 1) (10)Px37y82 { Px37y83, Px36y82, Px38y82 } CellNode (37 @ 82) (10)Px4y24 { Px4y25, Px3y24, Px5y24, Px4y23 } CellNode (4 @ 24) (10)Px26y23 { Px26y24, Px27y23, Px25y23, Px26y22 } CellNode (26 @ 23) (10)Px50y14 { Px51y14, Px49y14, Px50y13, Px50y15 } CellNode (50 @ 14) (10)Px80y2 { Px80y1, Px81y2, Px79y2 } CellNode (80 @ 2) (10)Px33y21 { Px33y20, Px33y22, Px34y21, Px32y21 } CellNode (33 @ 21) (10)Px86y80 { Px86y79, Px87y80 } CellNode (86 @ 80) (10)Px53y84 { Px53y83, Px52y84, Px54y84 } CellNode (53 @ 84) (10)Px19y25 { Px20y25, Px19y24, Px18y25, Px19y26 } CellNode (19 @ 25) (10)Px20y28 { Px20y27, Px19y28, Px21y28 } CellNode (20 @ 28) (10)Px41y2 { Px41y3, Px42y2 } CellNode (41 @ 2) (10)Px4y78 { Px5y78, Px4y79 } CellNode (4 @ 78) (10)Px76y66 { Px75y66, Px77y66 } CellNode (76 @ 66) (10)Px18y1 { Px17y1 } CellNode (18 @ 1) (10)Px19y19 { Px19y18, Px19y20, Px20y19, Px18y19 } CellNode (19 @ 19) (10)Px83y64 { Px82y64, Px83y63 } CellNode (83 @ 64) (10)Px53y78 { Px52y78, Px53y77, Px53y79, Px54y78 } CellNode (53 @ 78) (10)Px17y13 { Px17y14, Px16y13, Px18y13, Px17y12 } CellNode (17 @ 13) (10)Px26y17 { Px25y17, Px26y18, Px26y16, Px27y17 } CellNode (26 @ 17) (10)Px42y19 { Px43y19, Px41y19 } CellNode (42 @ 19) (10)Px44y3 { Px45y3, Px44y2 } CellNode (44 @ 3) (10)Px33y15 { Px32y15, Px33y14 } CellNode (33 @ 15) (10)Px40y13 { Px41y13, Px40y14, Px39y13, Px40y12 } CellNode (40 @ 13) (10)Px57y18 { Px58y18, Px57y17, Px56y18 } CellNode (57 @ 18) (10)Px1y51 { Px1y50, Px1y52, Px2y51 } CellNode (1 @ 51) (10)Px9y22 { Px10y22, Px9y21, Px9y23, Px8y22 } CellNode (9 @ 22) (10)Px55y12 { Px54y12, Px55y13, Px56y12 } CellNode (55 @ 12) (10)Px25y26 { Px24y26, Px26y26, Px25y25 } CellNode (25 @ 26) (10)Px59y73 { Px59y74, Px59y72, Px58y73 } CellNode (59 @ 73) (10)Px64y16 { Px64y17, Px65y16, Px64y15, Px63y16 } CellNode (64 @ 16) (10)Px32y24 { Px32y23, Px33y24, Px31y24 } CellNode (32 @ 24) (10)Px26y9 { Px27y9, Px26y8, Px25y9, Px26y10 } CellNode (26 @ 9) (10)Px23y20 { Px24y20, Px23y21, Px22y20, Px23y19 } CellNode (23 @ 20) (10)Px1y21 { Px1y20, Px2y21, Px1y22 } CellNode (1 @ 21) (10)Px18y28 { Px17y28, Px18y27, Px19y28 } CellNode (18 @ 28) (10)Px50y81 { Px50y80, Px51y81, Px49y81 } CellNode (50 @ 81) (10)Px8y31 { Px7y31, Px9y31, Px8y30 } CellNode (8 @ 31) (10)Px16y22 { Px16y23, Px16y21, Px15y22, Px17y22 } CellNode (16 @ 22) (10)Px37y76 { Px36y76, Px37y77 } CellNode (37 @ 76) (10)Px47y4 { Px47y3, Px48y4, Px46y4, Px47y5 } CellNode (47 @ 4) (10)Px24y11 { Px24y10, Px23y11 } CellNode (24 @ 11) (10)Px39y10 { Px39y11, Px40y10, Px38y10, Px39y9 } CellNode (39 @ 10) (10)Px75y69 { Px75y68 } CellNode (75 @ 69) (10)Px66y65 { Px66y64, Px66y66, Px65y65, Px67y65 } CellNode (66 @ 65) (10)Px50y75 { Px50y76, Px50y74, Px51y75 } CellNode (50 @ 75) (10)Px88y62 { Px88y61, Px88y63, Px89y62 } CellNode (88 @ 62) (10)Px14y10 { Px15y10, Px14y11 } CellNode (14 @ 10) (10)Px47y17 { Px48y17, Px46y17 } CellNode (47 @ 17) (10)Px26y84 { Px25y84, Px26y83 } CellNode (26 @ 84) (10)Px56y70 { Px57y70, Px56y71, Px55y70 } CellNode (56 @ 70) (10)Px54y15 { Px55y15, Px54y14, Px54y16, Px53y15 } CellNode (54 @ 15) (10)Px45y11 { Px45y12, Px45y10, Px44y11, Px46y11 } CellNode (45 @ 11) (10)Px33y82 { Px34y82, Px33y83 } CellNode (33 @ 82) (10)Px15y25 { Px14y25, Px16y25, Px15y24 } CellNode (15 @ 25) (10)Px22y23 { Px23y23, Px22y22, Px21y23 } CellNode (22 @ 23) (10)Px94y1 { Px95y1, Px93y1 } CellNode (94 @ 1) (10)Px38y13 { Px39y13, Px38y14, Px38y12 } CellNode (38 @ 13) (10)Px64y83 { Px64y84, Px64y82 } CellNode (64 @ 83) (10)Px44y20 { Px44y19, Px45y20 } CellNode (44 @ 20) (10)Px17y1 { Px18y1 } CellNode (17 @ 1) (10)Px63y62 { Px64y62, Px63y61 } CellNode (63 @ 62) (10)Px4y18 { Px5y18, Px3y18, Px4y19 } CellNode (4 @ 18) (10)Px38y7 { Px38y8 } CellNode (38 @ 7) (10)Px11y18 { Px12y18, Px11y17, Px10y18, Px11y19 } CellNode (11 @ 18) (10)Px2y12 { Px2y13, Px3y12, Px2y11, Px1y12 } CellNode (2 @ 12) (10)Px28y12 { Px28y13, Px27y12, Px29y12, Px28y11 } CellNode (28 @ 12) (10)Px44y14 { Px44y15, Px43y14, Px45y14, Px44y13 } CellNode (44 @ 14) (10)Px59y2 { Px59y1, Px59y3, Px60y2 } CellNode (59 @ 2) (10)Px51y12 { Px50y12, Px51y11, Px51y13, Px52y12 } CellNode (51 @ 12) (10)Px59y13 { Px59y12, Px59y14, Px60y13 } CellNode (59 @ 13) (10)Px38y80 { Px38y79, Px37y80 } CellNode (38 @ 80) (10)Px60y16 { Px59y16, Px61y16, Px60y17 } CellNode (60 @ 16) (10)Px3y27 { Px3y26, Px4y27, Px3y28 } CellNode (3 @ 27) (10)Px27y21 { Px27y22, Px26y21, Px28y21, Px27y20 } CellNode (27 @ 21) (10)Px54y82 { Px53y82, Px54y83 } CellNode (54 @ 82) (10)Px45y59 { Px45y58, Px44y59 } CellNode (45 @ 59) (10)Px25y9 { Px25y10, Px25y8, Px26y9, Px24y9 } CellNode (25 @ 9) (10)Px46y4 { Px47y4, Px45y4 } CellNode (46 @ 4) (10)Px68y60 { Px67y60, Px68y61 } CellNode (68 @ 60) (10)Px84y62 { Px83y62, Px84y61, Px84y63 } CellNode (84 @ 62) (10)Px1y15 { Px1y14, Px2y15, Px1y16 } CellNode (1 @ 15) (10)Px93y1 { Px94y1, Px92y1 } CellNode (93 @ 1) (10)Px49y5 { Px48y5, Px49y4, Px49y6 } CellNode (49 @ 5) (10)Px23y14 { Px22y14, Px24y14, Px23y15 } CellNode (23 @ 14) (10)Px49y12 { Px48y12, Px50y12, Px49y11, Px49y13 } CellNode (49 @ 12) (10)Px58y16 { Px57y16, Px58y15, Px58y17, Px59y16 } CellNode (58 @ 16) (10)Px8y25 { Px9y25, Px8y26, Px7y25 } CellNode (8 @ 25) (10)Px24y29 { Px24y28, Px23y29, Px25y29 } CellNode (24 @ 29) (10)Px21y8 { Px20y8 } CellNode (21 @ 8) (10)Px42y3 { Px41y3, Px42y2 } CellNode (42 @ 3) (10)Px2y73 { Px1y73, Px2y74 } CellNode (2 @ 73) (10)Px65y68 { Px65y67, Px66y68, Px65y69 } CellNode (65 @ 68) (10)Px8y19 { Px9y19, Px7y19 } CellNode (8 @ 19) (10)Px72y66 { Px71y66, Px72y67 } CellNode (72 @ 66) (10)Px89y60 { Px89y61 } CellNode (89 @ 60) (10)Px6y13 { Px7y13, Px5y13 } CellNode (6 @ 13) (10)Px15y19 { Px15y20, Px14y19 } CellNode (15 @ 19) (10)Px22y17 { Px23y17, Px22y18, Px22y16, Px21y17 } CellNode (22 @ 17) (10)Px13y13 { Px13y14, Px14y13, Px13y12, Px12y13 } CellNode (13 @ 13) (10)Px24y9 { Px25y9, Px24y10 } CellNode (24 @ 9) (10)Px37y16 { Px37y17, Px36y16 } CellNode (37 @ 16) (10)Px53y18 { Px54y18, Px53y19 } CellNode (53 @ 18) (10)Px14y28 { Px15y28, Px14y29 } CellNode (14 @ 28) (10)Px5y22 { Px6y22, Px5y21, Px4y22, Px5y23 } CellNode (5 @ 22) (10)Px45y4 { Px45y3, Px46y4 } CellNode (45 @ 4) (10)Px12y22 { Px11y22, Px12y21, Px12y23 } CellNode (12 @ 22) (10)Px21y26 { Px20y26, Px21y25, Px21y27 } CellNode (21 @ 26) (10)Px1y9 { Px1y8, Px1y10 } CellNode (1 @ 9) (10)Px31y64 { Px31y63 } CellNode (31 @ 64) (10)Px4y31 { Px3y31, Px5y31, Px4y32 } CellNode (4 @ 31) (10)Px9y77 { Px8y77 } CellNode (9 @ 77) (10)Px92y1 { Px91y1, Px93y1 } CellNode (92 @ 1) (10)Px53y61 { Px54y61 } CellNode (53 @ 61) (10)Px5y16 { Px5y17, Px4y16 } CellNode (5 @ 16) (10)Px48y5 { Px49y5, Px48y4, Px48y6, Px47y5 } CellNode (48 @ 5) (10)Px105y77 { Px105y76 } CellNode (105 @ 77) (10)Px3y10 { Px3y11, Px2y10 } CellNode (3 @ 10) (10)Px47y78 { Px46y78, Px48y78, Px47y79 } CellNode (47 @ 78) (10)Px12y16 { Px13y16, Px12y15, Px12y17 } CellNode (12 @ 16) (10)Px54y76 { Px54y75, Px53y76 } CellNode (54 @ 76) (10)Px36y19 { Px36y20, Px37y19, Px36y18 } CellNode (36 @ 19) (10)Px27y15 { Px26y15, Px27y14, Px27y16, Px28y15 } CellNode (27 @ 15) (10)Px43y17 { Px43y16, Px44y17, Px42y17 } CellNode (43 @ 17) (10)Px52y70 { Px52y69, Px52y71 } CellNode (52 @ 70) (10)Px20y8 { Px19y8, Px20y7, Px21y8 } CellNode (20 @ 8) (10)Px41y11 { Px41y12, Px42y11, Px41y10, Px40y11 } CellNode (41 @ 11) (10)Px34y13 { Px35y13, Px34y12, Px33y13, Px34y14 } CellNode (34 @ 13) (10)Px37y83 { Px38y83, Px37y82 } CellNode (37 @ 83) (10)Px4y25 { Px4y26, Px3y25, Px5y25, Px4y24 } CellNode (4 @ 25) (10)Px50y15 { Px50y16, Px51y15, Px49y15, Px50y14 } CellNode (50 @ 15) (10)Px44y81 { Px44y82 } CellNode (44 @ 81) (10)Px26y24 { Px26y23, Px27y24, Px25y24 } CellNode (26 @ 24) (10)Px41y3 { Px42y3, Px41y2 } CellNode (41 @ 3) (10)Px33y22 { Px33y21, Px33y23, Px32y22 } CellNode (33 @ 22) (10)Px62y59 { Px63y59, Px62y60 } CellNode (62 @ 59) (10)Px19y26 { Px19y27, Px20y26, Px18y26, Px19y25 } CellNode (19 @ 26) (10)Px17y20 { Px16y20, Px18y20, Px17y21 } CellNode (17 @ 20) (10)Px84y56 { Px83y56 } CellNode (84 @ 56) (10)Px61y68 { Px62y68, Px61y69 } CellNode (61 @ 68) (10)Px57y2 { Px57y3, Px56y2 } CellNode (57 @ 2) (10)Px4y79 { Px4y78 } CellNode (4 @ 79) (10)Px37y77 { Px37y76, Px37y78, Px36y77 } CellNode (37 @ 77) (10)Px53y79 { Px54y79, Px52y79, Px53y78, Px53y80 } CellNode (53 @ 79) (10)Px17y14 { Px18y14, Px17y15, Px16y14, Px17y13 } CellNode (17 @ 14) (10)Px26y18 { Px26y19, Px27y18, Px25y18, Px26y17 } CellNode (26 @ 18) (10)Px59y74 { Px59y75, Px58y74, Px59y73 } CellNode (59 @ 74) (10)Px39y8 { Px39y9, Px38y8 } CellNode (39 @ 8) (10)Px40y14 { Px40y13, Px40y15, Px39y14 } CellNode (40 @ 14) (10)Px39y11 { Px39y12, Px40y11, Px38y11, Px39y10 } CellNode (39 @ 11) (10)Px1y52 { Px1y51, Px1y53 } CellNode (1 @ 52) (10)Px9y23 { Px9y22, Px9y24, Px8y23 } CellNode (9 @ 23) (10)Px55y13 { Px54y13, Px55y14, Px56y13, Px55y12 } CellNode (55 @ 13) (10)Px16y23 { Px17y23, Px16y24, Px16y22, Px15y23 } CellNode (16 @ 23) (10)Px43y84 { Px42y84 } CellNode (43 @ 84) (10)Px31y10 { Px31y11, Px31y9, Px30y10, Px32y10 } CellNode (31 @ 10) (10)Px23y21 { Px22y21, Px23y22, Px24y21, Px23y20 } CellNode (23 @ 21) (10)Px64y17 { Px64y18, Px65y17, Px64y16, Px63y17 } CellNode (64 @ 17) (10)Px1y22 { Px1y23, Px2y22, Px1y21 } CellNode (1 @ 22) (10)Px91y1 { Px90y1, Px92y1 } CellNode (91 @ 1) (10)Px38y20 { Px38y19, Px38y21, Px39y20, Px37y20 } CellNode (38 @ 20) (10)Px47y5 { Px47y4, Px48y5, Px47y6 } CellNode (47 @ 5) (10)Px66y66 { Px65y66, Px67y66, Px66y65, Px66y67 } CellNode (66 @ 66) (10)Px53y1 { Px53y2 } CellNode (53 @ 1) (10)Px50y76 { Px50y75, Px51y76 } CellNode (50 @ 76) (10)Px107y72 { Px107y73, Px106y72 } CellNode (107 @ 72) (10)Px88y63 { Px88y62, Px89y63 } CellNode (88 @ 63) (10)Px14y11 { Px15y11, Px14y12, Px13y11, Px14y10 } CellNode (14 @ 11) (10)Px38y14 { Px39y14, Px38y13, Px38y15 } CellNode (38 @ 14) (10)Px112y45 { Px112y46 } CellNode (112 @ 45) (10)Px29y10 { Px29y11, Px30y10, Px29y9, Px28y10 } CellNode (29 @ 10) (10)Px54y16 { Px55y16, Px54y17, Px53y16, Px54y15 } CellNode (54 @ 16) (10)Px30y13 { Px31y13, Px30y14, Px29y13 } CellNode (30 @ 13) (10)Px6y20 { Px6y21, Px6y19, Px7y20 } CellNode (6 @ 20) (10)Px52y10 { Px52y11, Px52y9, Px53y10, Px51y10 } CellNode (52 @ 10) (10)Px13y20 { Px14y20, Px13y19, Px13y21 } CellNode (13 @ 20) (10)Px69y15 { Px68y15, Px70y15 } CellNode (69 @ 15) (10)Px45y12 { Px45y13, Px46y12, Px45y11, Px44y12 } CellNode (45 @ 12) (10)Px15y1 { Px14y1, Px15y2 } CellNode (15 @ 1) (10)Px33y83 { Px33y82, Px33y84, Px34y83 } CellNode (33 @ 83) (10)Px111y54 { Px112y54 } CellNode (111 @ 54) (10)Px56y71 { Px56y72, Px55y71, Px56y70, Px57y71 } CellNode (56 @ 71) (10)Px61y14 { Px62y14, Px61y15, Px60y14 } CellNode (61 @ 14) (10)Px56y2 { Px56y3, Px57y2, Px55y2 } CellNode (56 @ 2) (10)Px64y84 { Px65y84, Px64y83 } CellNode (64 @ 84) (10)Px13y74 { Px12y74, Px13y75 } CellNode (13 @ 74) (10)Px4y19 { Px5y19, Px4y18, Px3y19, Px4y20 } CellNode (4 @ 19) (10)Px38y8 { Px37y8, Px38y9, Px39y8, Px38y7 } CellNode (38 @ 8) (10)Px11y19 { Px10y19, Px11y18, Px12y19 } CellNode (11 @ 19) (10)Px2y13 { Px2y14, Px3y13, Px2y12, Px1y13 } CellNode (2 @ 13) (10)Px28y13 { Px28y12, Px29y13, Px28y14, Px27y13 } CellNode (28 @ 13) (10)Px55y74 { Px56y74, Px55y75 } CellNode (55 @ 74) (10)Px35y11 { Px34y11, Px35y12, Px36y11 } CellNode (35 @ 11) (10)Px44y15 { Px45y15, Px44y14, Px44y16 } CellNode (44 @ 15) (10)Px59y3 { Px59y4, Px58y3, Px59y2, Px60y3 } CellNode (59 @ 3) (10)Px51y13 { Px51y14, Px52y13, Px50y13, Px51y12 } CellNode (51 @ 13) (10)Px59y14 { Px59y13, Px59y15, Px60y14, Px58y14 } CellNode (59 @ 14) (10)Px3y28 { Px4y28, Px2y28, Px3y27, Px3y29 } CellNode (3 @ 28) (10)Px90y1 { Px91y1, Px89y1 } CellNode (90 @ 1) (10)Px60y17 { Px59y17, Px60y18, Px60y16, Px61y17 } CellNode (60 @ 17) (10)Px27y22 { Px28y22, Px26y22, Px27y23, Px27y21 } CellNode (27 @ 22) (10)Px54y83 { Px55y83, Px53y83, Px54y84, Px54y82 } CellNode (54 @ 83) (10)Px78y62 { Px79y62 } CellNode (78 @ 62) (10)Px61y81 { Px61y82 } CellNode (61 @ 81) (10)Px9y1 { Px10y1, Px8y1 } CellNode (9 @ 1) (10)Px5y77 { Px6y77, Px5y78 } CellNode (5 @ 77) (10)Px68y61 { Px68y62, Px68y60 } CellNode (68 @ 61) (10)Px77y65 { Px77y66, Px78y65 } CellNode (77 @ 65) (10)Px84y63 { Px83y63, Px84y62 } CellNode (84 @ 63) (10)Px1y16 { Px1y15, Px2y16, Px1y17 } CellNode (1 @ 16) (10)Px9y17 { Px10y17, Px9y18, Px8y17 } CellNode (9 @ 17) (10)Px16y17 { Px15y17, Px16y18, Px17y17 } CellNode (16 @ 17) (10)Px49y6 { Px49y5, Px50y6, Px48y6, Px49y7 } CellNode (49 @ 6) (10)Px23y15 { Px24y15, Px22y15, Px23y14, Px23y16 } CellNode (23 @ 15) (10)Px49y13 { Px49y14, Px48y13, Px50y13, Px49y12 } CellNode (49 @ 13) (10)Px2y50 { Px3y50, Px1y50, Px2y51, Px2y49 } CellNode (2 @ 50) (10)Px14y1 { Px13y1, Px15y1 } CellNode (14 @ 1) (10)Px65y15 { Px65y16, Px64y15, Px66y15 } CellNode (65 @ 15) (10)Px58y17 { Px58y18, Px57y17, Px59y17, Px58y16 } CellNode (58 @ 17) (10)Px8y26 { Px8y25, Px9y26, Px7y26 } CellNode (8 @ 26) (10)Px32y19 { Px32y20, Px31y19 } CellNode (32 @ 19) (10)Px51y80 { Px52y80, Px51y81, Px50y80, Px51y79 } CellNode (51 @ 80) (10)Px55y2 { Px56y2, Px54y2, Px55y3 } CellNode (55 @ 2) (10)Px37y8 { Px37y9, Px38y8 } CellNode (37 @ 8) (10)Px2y74 { Px1y74, Px2y73 } CellNode (2 @ 74) (10)Px65y69 { Px65y68 } CellNode (65 @ 69) (10)Px72y67 { Px72y66, Px71y67 } CellNode (72 @ 67) (10)Px89y61 { Px89y60, Px88y61, Px89y62 } CellNode (89 @ 61) (10)Px58y3 { Px59y3, Px57y3 } CellNode (58 @ 3) (10)Px106y75 { Px105y75, Px107y75, Px106y76 } CellNode (106 @ 75) (10)Px22y18 { Px22y17, Px23y18, Px22y19, Px21y18 } CellNode (22 @ 18) (10)Px8y1 { Px7y1, Px9y1 } CellNode (8 @ 1) (10)Px13y14 { Px13y13, Px12y14, Px13y15, Px14y14 } CellNode (13 @ 14) (10)Px20y12 { Px19y12, Px20y13 } CellNode (20 @ 12) (10)Px37y17 { Px37y16, Px36y17, Px38y17 } CellNode (37 @ 17) (10)Px7y29 { Px7y30, Px8y29 } CellNode (7 @ 29) (10)Px53y19 { Px53y18, Px54y19 } CellNode (53 @ 19) (10)Px14y29 { Px15y29, Px13y29, Px14y28 } CellNode (14 @ 29) (10)Px5y23 { Px5y24, Px6y23, Px5y22, Px4y23 } CellNode (5 @ 23) (10)Px21y27 { Px21y28, Px22y27, Px21y26, Px20y27 } CellNode (21 @ 27) (10)Px38y51 { Px38y52 } CellNode (38 @ 51) (10)Px12y23 { Px12y22, Px12y24, Px13y23, Px11y23 } CellNode (12 @ 23) (10)Px4y32 { Px4y31, Px3y32 } CellNode (4 @ 32) (10)Px62y66 { Px62y67, Px63y66 } CellNode (62 @ 66) (10)Px5y17 { Px5y16, Px5y18 } CellNode (5 @ 17) (10)Px48y6 { Px47y6, Px48y5, Px49y6 } CellNode (48 @ 6) (10)Px12y17 { Px11y17, Px12y16, Px12y18 } CellNode (12 @ 17) (10)Px3y11 { Px3y12, Px2y11, Px4y11, Px3y10 } CellNode (3 @ 11) (10)Px47y79 { Px46y79, Px47y78, Px47y80 } CellNode (47 @ 79) (10)Px13y1 { Px12y1, Px14y1 } CellNode (13 @ 1) (10)Px27y16 { Px28y16, Px26y16, Px27y15, Px27y17 } CellNode (27 @ 16) (10)Px18y12 { Px18y13, Px17y12, Px19y12 } CellNode (18 @ 12) (10)Px69y1 { Px70y1, Px68y1, Px69y2 } CellNode (69 @ 1) (10)Px25y10 { Px24y10, Px25y9, Px26y10 } CellNode (25 @ 10) (10)Px52y71 { Px52y72, Px52y70 } CellNode (52 @ 71) (10)Px54y2 { Px53y2, Px54y3, Px55y2 } CellNode (54 @ 2) (10)Px41y12 { Px40y12, Px41y13, Px42y12, Px41y11 } CellNode (41 @ 12) (10)Px34y14 { Px33y14, Px35y14, Px34y13 } CellNode (34 @ 14) (10)Px46y58 { Px45y58 } CellNode (46 @ 58) (10)Px4y26 { Px4y27, Px4y25, Px5y26, Px3y26 } CellNode (4 @ 26) (10)Px50y16 { Px50y17, Px51y16, Px50y15, Px49y16 } CellNode (50 @ 16) (10)Px17y21 { Px18y21, Px16y21, Px17y20, Px17y22 } CellNode (17 @ 21) (10)Px44y82 { Px44y81 } CellNode (44 @ 82) (10)Px2y20 { Px2y21, Px3y20, Px1y20, Px2y19 } CellNode (2 @ 20) (10)Px33y23 { Px33y24, Px34y23, Px32y23, Px33y22 } CellNode (33 @ 23) (10)Px60y84 { Px59y84, Px61y84 } CellNode (60 @ 84) (10)Px19y27 { Px18y27, Px19y28, Px20y27, Px19y26 } CellNode (19 @ 27) (10)Px9y30 { Px10y30, Px9y29, Px9y31, Px8y30 } CellNode (9 @ 30) (10)Px61y69 { Px61y68, Px62y69, Px61y70 } CellNode (61 @ 69) (10)Px57y3 { Px58y3, Px57y2, Px56y3, Px57y4 } CellNode (57 @ 3) (10)Px7y1 { Px6y1, Px8y1 } CellNode (7 @ 1) (10)Px37y78 { Px37y77, Px37y79, Px38y78 } CellNode (37 @ 78) (10)Px26y19 { Px26y20, Px27y19, Px25y19, Px26y18 } CellNode (26 @ 19) (10)Px17y15 { Px16y15, Px17y14, Px17y16 } CellNode (17 @ 15) (10)Px24y13 { Px24y14, Px25y13 } CellNode (24 @ 13) (10)Px51y74 { Px52y74, Px50y74, Px51y75 } CellNode (51 @ 74) (10)Px39y9 { Px38y9, Px39y8, Px40y9, Px39y10 } CellNode (39 @ 9) (10)Px40y15 { Px41y15, Px39y15, Px40y16, Px40y14 } CellNode (40 @ 15) (10)Px39y12 { Px38y12, Px39y11, Px39y13, Px40y12 } CellNode (39 @ 12) (10)Px1y53 { Px1y52, Px1y54 } CellNode (1 @ 53) (10)Px9y24 { Px9y25, Px9y23, Px10y24 } CellNode (9 @ 24) (10)Px55y14 { Px56y14, Px55y13, Px54y14, Px55y15 } CellNode (55 @ 14) (10)Px16y24 { Px15y24, Px17y24, Px16y25, Px16y23 } CellNode (16 @ 24) (10)Px25y28 { Px24y28, Px25y29, Px26y28 } CellNode (25 @ 28) (10)Px48y16 { Px48y17, Px49y16 } CellNode (48 @ 16) (10)Px23y22 { Px22y22, Px23y21, Px23y23, Px24y22 } CellNode (23 @ 22) (10)Px58y84 { Px57y84, Px59y84 } CellNode (58 @ 84) (10)Px31y11 { Px31y12, Px32y11, Px30y11, Px31y10 } CellNode (31 @ 11) (10)Px30y20 { Px30y21, Px31y20, Px29y20, Px30y19 } CellNode (30 @ 20) (10)Px38y21 { Px38y22, Px38y20 } CellNode (38 @ 21) (10)Px59y75 { Px58y75, Px59y74 } CellNode (59 @ 75) (10)Px64y18 { Px64y17, Px63y18 } CellNode (64 @ 18) (10)Px90y58 { Px91y58, Px90y59 } CellNode (90 @ 58) (10)Px49y80 { Px49y79, Px50y80, Px49y81 } CellNode (49 @ 80) (10)Px47y6 { Px46y6, Px47y7, Px48y6, Px47y5 } CellNode (47 @ 6) (10)Px1y23 { Px1y24, Px1y22 } CellNode (1 @ 23) (10)Px50y1 { Px49y1 } CellNode (50 @ 1) (10)Px66y67 { Px65y67, Px66y68, Px66y66 } CellNode (66 @ 67) (10)Px12y1 { Px13y1, Px11y1, Px12y2 } CellNode (12 @ 1) (10)Px64y61 { Px64y62, Px65y61, Px63y61 } CellNode (64 @ 61) (10)Px68y1 { Px67y1, Px68y2, Px69y1 } CellNode (68 @ 1) (10)Px80y63 { Px80y64, Px81y63, Px79y63 } CellNode (80 @ 63) (10)Px53y2 { Px53y1, Px54y2, Px52y2, Px53y3 } CellNode (53 @ 2) (10)Px107y73 { Px107y72 } CellNode (107 @ 73) (10)Px14y12 { Px14y11, Px15y12, Px13y12, Px14y13 } CellNode (14 @ 12) (10)Px21y10 { Px21y11 } CellNode (21 @ 10) (10)Px38y15 { Px39y15, Px38y14 } CellNode (38 @ 15) (10)Px112y46 { Px112y45, Px113y46 } CellNode (112 @ 46) (10)Px29y11 { Px29y12, Px30y11, Px28y11, Px29y10 } CellNode (29 @ 11) (10)Px54y17 { Px54y18, Px55y17, Px54y16 } CellNode (54 @ 17) (10)Px30y14 { Px31y14, Px30y13, Px29y14 } CellNode (30 @ 14) (10)Px6y21 { Px7y21, Px5y21, Px6y22, Px6y20 } CellNode (6 @ 21) (10)Px61y15 { Px61y14, Px62y15, Px61y16 } CellNode (61 @ 15) (10)Px13y21 { Px14y21, Px13y20, Px12y21 } CellNode (13 @ 21) (10)Px52y11 { Px52y10, Px52y12, Px51y11 } CellNode (52 @ 11) (10)Px40y82 { Px39y82 } CellNode (40 @ 82) (10)Px15y2 { Px15y1, Px15y3 } CellNode (15 @ 2) (10)Px28y20 { Px28y21, Px29y20, Px27y20, Px28y19 } CellNode (28 @ 20) (10)Px45y13 { Px45y12, Px45y14, Px46y13, Px44y13 } CellNode (45 @ 13) (10)Px33y84 { Px33y83 } CellNode (33 @ 84) (10)Px6y1 { Px7y1, Px5y1 } CellNode (6 @ 1) (10)Px56y72 { Px56y73, Px57y72, Px55y72, Px56y71 } CellNode (56 @ 72) (10)Px56y3 { Px55y3, Px56y4, Px56y2, Px57y3 } CellNode (56 @ 3) (10)Px12y30 { Px12y29, Px11y30 } CellNode (12 @ 30) (10)Px70y62 { Px69y62, Px70y63 } CellNode (70 @ 62) (10)Px13y75 { Px12y75, Px13y74 } CellNode (13 @ 75) (10)Px38y9 { Px37y9, Px38y10, Px38y8, Px39y9 } CellNode (38 @ 9) (10)Px2y14 { Px2y13, Px1y14, Px2y15, Px3y14 } CellNode (2 @ 14) (10)Px28y14 { Px27y14, Px28y15, Px28y13, Px29y14 } CellNode (28 @ 14) (10)Px55y75 { Px55y74, Px54y75 } CellNode (55 @ 75) (10)Px35y12 { Px35y13, Px34y12, Px36y12, Px35y11 } CellNode (35 @ 12) (10)Px44y16 { Px45y16, Px44y17, Px43y16, Px44y15 } CellNode (44 @ 16) (10)Px59y4 { Px59y3 } CellNode (59 @ 4) (10)Px42y10 { Px41y10, Px42y11, Px42y9 } CellNode (42 @ 10) (10)Px60y18 { Px59y18, Px61y18, Px60y17 } CellNode (60 @ 18) (10)Px3y29 { Px3y28, Px4y29 } CellNode (3 @ 29) (10)Px38y82 { Px38y83, Px37y82, Px39y82 } CellNode (38 @ 82) (10)Px51y14 { Px52y14, Px50y14, Px51y15, Px51y13 } CellNode (51 @ 14) (10)Px27y23 { Px26y23, Px27y22, Px28y23, Px27y24 } CellNode (27 @ 23) (10)Px54y84 { Px53y84, Px54y83, Px55y84 } CellNode (54 @ 84) (10)Px59y15 { Px58y15, Px59y16, Px59y14 } CellNode (59 @ 15) (10)Px61y82 { Px61y83, Px61y81 } CellNode (61 @ 82) (10)Px46y6 { Px47y6, Px46y7 } CellNode (46 @ 6) (10)Px34y21 { Px35y21, Px33y21 } CellNode (34 @ 21) (10)Px10y29 { Px9y29, Px10y30, Px11y29 } CellNode (10 @ 29) (10)Px11y1 { Px10y1, Px12y1 } CellNode (11 @ 1) (10)Px67y1 { Px66y1, Px67y2, Px68y1 } CellNode (67 @ 1) (10)Px5y78 { Px4y78, Px5y77 } CellNode (5 @ 78) (10)Px51y68 { Px51y69 } CellNode (51 @ 68) (10)Px77y66 { Px76y66, Px78y66, Px77y65 } CellNode (77 @ 66) (10)Px52y2 { Px52y3, Px53y2 } CellNode (52 @ 2) (10)Px68y62 { Px69y62, Px68y61, Px68y63 } CellNode (68 @ 62) (10)Px1y17 { Px1y18, Px2y17, Px1y16 } CellNode (1 @ 17) (10)Px9y18 { Px10y18, Px9y17, Px9y19 } CellNode (9 @ 18) (10)Px16y18 { Px16y17, Px17y18 } CellNode (16 @ 18) (10)Px49y7 { Px49y6, Px50y7 } CellNode (49 @ 7) (10)Px23y16 { Px23y17, Px24y16, Px22y16, Px23y15 } CellNode (23 @ 16) (10)Px49y14 { Px49y13, Px49y15, Px50y14 } CellNode (49 @ 14) (10)Px2y51 { Px1y51, Px3y51, Px2y50 } CellNode (2 @ 51) (10)Px58y18 { Px59y18, Px58y17, Px57y18 } CellNode (58 @ 18) (10)Px56y12 { Px55y12, Px56y13 } CellNode (56 @ 12) (10)Px65y16 { Px65y15, Px66y16, Px64y16, Px65y17 } CellNode (65 @ 16) (10)Px100y57 { Px99y57, Px100y58 } CellNode (100 @ 57) (10)Px42y58 { Px43y58 } CellNode (42 @ 58) (10)Px51y81 { Px51y80, Px51y82, Px52y81, Px50y81 } CellNode (51 @ 81) (10)Px55y3 { Px54y3, Px55y4, Px55y2, Px56y3 } CellNode (55 @ 3) (10)Px16y3 { Px15y3 } CellNode (16 @ 3) (10)Px37y9 { Px37y8, Px38y9, Px37y10 } CellNode (37 @ 9) (10)Px89y62 { Px89y61, Px88y62, Px89y63 } CellNode (89 @ 62) (10)Px6y15 { Px7y15 } CellNode (6 @ 15) (10)Px106y76 { Px105y76, Px106y75 } CellNode (106 @ 76) (10)Px13y15 { Px13y16, Px12y15, Px13y14 } CellNode (13 @ 15) (10)Px22y19 { Px22y18, Px21y19, Px22y20, Px23y19 } CellNode (22 @ 19) (10)Px48y77 { Px49y77, Px48y78 } CellNode (48 @ 77) (10)Px20y13 { Px20y14, Px21y13, Px20y12, Px19y13 } CellNode (20 @ 13) (10)Px5y24 { Px5y23, Px5y25, Px6y24, Px4y24 } CellNode (5 @ 24) (10)Px21y28 { Px22y28, Px20y28, Px21y27 } CellNode (21 @ 28) (10)Px38y52 { Px38y51 } CellNode (38 @ 52) (10)Px10y1 { Px11y1, Px9y1 } CellNode (10 @ 1) (10)Px112y53 { Px112y54 } CellNode (112 @ 53) (10)Px45y20 { Px44y20, Px46y20, Px45y19 } CellNode (45 @ 20) (10)Px12y24 { Px12y23 } CellNode (12 @ 24) (10)Px66y1 { Px65y1, Px66y2, Px67y1 } CellNode (66 @ 1) (10)Px47y56 { Px48y56, Px47y57 } CellNode (47 @ 56) (10)Px87y80 { Px87y81, Px86y80 } CellNode (87 @ 80) (10)Px63y58 { Px64y58, Px63y59 } CellNode (63 @ 58) (10)Px62y67 { Px62y68, Px62y66, Px63y67 } CellNode (62 @ 67) (10)Px5y18 { Px6y18, Px4y18, Px5y19, Px5y17 } CellNode (5 @ 18) (10)Px60y61 { Px61y61, Px60y62 } CellNode (60 @ 61) (10)Px12y18 { Px13y18, Px11y18, Px12y19, Px12y17 } CellNode (12 @ 18) (10)Px3y12 { Px3y11, Px3y13, Px2y12, Px4y12 } CellNode (3 @ 12) (10)Px27y17 { Px27y18, Px28y17, Px26y17, Px27y16 } CellNode (27 @ 17) (10)Px54y78 { Px53y78, Px54y79 } CellNode (54 @ 78) (10)Px69y2 { Px70y2, Px69y3, Px68y2, Px69y1 } CellNode (69 @ 2) (10)Px43y19 { Px44y19, Px42y19 } CellNode (43 @ 19) (10)Px52y72 { Px52y71, Px52y73, Px53y72 } CellNode (52 @ 72) (10)Px18y13 { Px18y14, Px19y13, Px17y13, Px18y12 } CellNode (18 @ 13) (10)Px41y13 { Px40y13, Px41y12 } CellNode (41 @ 13) (10)Px54y3 { Px54y2, Px55y3, Px53y3, Px54y4 } CellNode (54 @ 3) (10)Px2y21 { Px2y20, Px3y21, Px2y22, Px1y21 } CellNode (2 @ 21) (10)Px19y28 { Px19y27, Px18y28, Px20y28 } CellNode (19 @ 28) (10)Px4y27 { Px5y27, Px4y28, Px3y27, Px4y26 } CellNode (4 @ 27) (10)Px17y22 { Px17y23, Px18y22, Px16y22, Px17y21 } CellNode (17 @ 22) (10)Px26y26 { Px26y27, Px27y26, Px25y26 } CellNode (26 @ 26) (10)Px5y1 { Px6y1, Px4y1 } CellNode (5 @ 1) (10)Px33y24 { Px33y23, Px32y24 } CellNode (33 @ 24) (10)Px24y20 { Px24y19, Px24y21, Px25y20, Px23y20 } CellNode (24 @ 20) (10)Px50y17 { Px49y17, Px50y16 } CellNode (50 @ 17) (10)Px9y31 { Px8y31, Px9y30 } CellNode (9 @ 31) (10)Px99y57 { Px100y57 } CellNode (99 @ 57) (10)Px57y4 { Px56y4, Px57y3 } CellNode (57 @ 4) (10)Px67y65 { Px67y66, Px68y65, Px66y65 } CellNode (67 @ 65) (10)Px37y79 { Px37y78, Px38y79, Px37y80 } CellNode (37 @ 79) (10)Px17y16 { Px18y16, Px17y15, Px17y17 } CellNode (17 @ 16) (10)Px81y61 { Px81y62, Px82y61 } CellNode (81 @ 61) (10)Px24y14 { Px25y14, Px23y14, Px24y15, Px24y13 } CellNode (24 @ 14) (10)Px51y75 { Px51y76, Px52y75, Px50y75, Px51y74 } CellNode (51 @ 75) (10)Px15y10 { Px15y11, Px14y10 } CellNode (15 @ 10) (10)Px40y16 { Px40y17, Px41y16, Px39y16, Px40y15 } CellNode (40 @ 16) (10)Px57y70 { Px57y71, Px56y70 } CellNode (57 @ 70) (10)Px1y24 { Px1y23, Px2y24, Px1y25 } CellNode (1 @ 24) (10)Px39y13 { Px40y13, Px38y13, Px39y12, Px39y14 } CellNode (39 @ 13) (10)Px9y25 { Px9y24, Px9y26, Px8y25, Px10y25 } CellNode (9 @ 25) (10)Px16y25 { Px16y24, Px15y25, Px17y25, Px16y26 } CellNode (16 @ 25) (10)Px55y15 { Px55y16, Px56y15, Px55y14, Px54y15 } CellNode (55 @ 15) (10)Px65y1 { Px65y2, Px66y1, Px64y1 } CellNode (65 @ 1) (10)Px50y84 { Px51y84, Px49y84 } CellNode (50 @ 84) (10)Px1y54 { Px1y53, Px2y54, Px1y55 } CellNode (1 @ 54) (10)Px25y29 { Px24y29, Px25y28, Px26y29 } CellNode (25 @ 29) (10)Px30y21 { Px30y22, Px29y21, Px31y21, Px30y20 } CellNode (30 @ 21) (10)Px48y17 { Px49y17, Px47y17, Px48y16 } CellNode (48 @ 17) (10)Px23y23 { Px24y23, Px23y24, Px23y22, Px22y23 } CellNode (23 @ 23) (10)Px38y22 { Px38y21 } CellNode (38 @ 22) (10)Px90y59 { Px90y58, Px91y59 } CellNode (90 @ 59) (10)Px31y12 { Px31y13, Px31y11, Px32y12 } CellNode (31 @ 12) (10)Px47y7 { Px46y7, Px47y8, Px47y6 } CellNode (47 @ 7) (10)Px46y11 { Px45y11, Px46y12, Px47y11 } CellNode (46 @ 11) (10)Px34y82 { Px33y82, Px34y83, Px35y82 } CellNode (34 @ 82) (10)Px66y68 { Px66y67, Px65y68 } CellNode (66 @ 68) (10)Px1y78 { Px1y79, Px2y78 } CellNode (1 @ 78) (10)Px12y2 { Px12y1, Px12y3 } CellNode (12 @ 2) (10)Px64y62 { Px64y63, Px64y61, Px63y62, Px65y62 } CellNode (64 @ 62) (10)Px49y81 { Px49y80, Px50y81, Px49y82 } CellNode (49 @ 81) (10)Px68y2 { Px69y2, Px68y1, Px68y3, Px67y2 } CellNode (68 @ 2) (10)Px80y64 { Px80y65, Px81y64, Px80y63 } CellNode (80 @ 64) (10)Px50y78 { Px50y79, Px51y78 } CellNode (50 @ 78) (10)Px53y3 { Px53y4, Px54y3, Px53y2, Px52y3 } CellNode (53 @ 3) (10)Px14y13 { Px13y13, Px15y13, Px14y12, Px14y14 } CellNode (14 @ 13) (10)Px21y11 { Px21y10, Px22y11 } CellNode (21 @ 11) (10)Px56y73 { Px56y74, Px57y73, Px56y72 } CellNode (56 @ 73) (10)Px29y12 { Px28y12, Px29y13, Px29y11 } CellNode (29 @ 12) (10)Px36y10 { Px37y10, Px36y11 } CellNode (36 @ 10) (10)Px54y18 { Px54y17, Px54y19, Px53y18, Px55y18 } CellNode (54 @ 18) (10)Px6y22 { Px7y22, Px6y23, Px5y22, Px6y21 } CellNode (6 @ 22) (10)Px61y16 { Px61y17, Px61y15, Px60y16, Px62y16 } CellNode (61 @ 16) (10)Px52y12 { Px51y12, Px52y11, Px52y13 } CellNode (52 @ 12) (10)Px4y1 { Px3y1, Px5y1 } CellNode (4 @ 1) (10)Px45y14 { Px44y14, Px45y13, Px46y14, Px45y15 } CellNode (45 @ 14) (10)Px20y20 { Px20y19, Px19y20, Px21y20 } CellNode (20 @ 20) (10)Px15y3 { Px15y2, Px15y4, Px16y3 } CellNode (15 @ 3) (10)Px28y21 { Px28y20, Px28y22, Px29y21, Px27y21 } CellNode (28 @ 21) (10)Px56y4 { Px56y3, Px57y4, Px55y4 } CellNode (56 @ 4) (10)Px5y31 { Px6y31, Px4y31 } CellNode (5 @ 31) (10)Px54y61 { Px53y61, Px54y62 } CellNode (54 @ 61) (10)Px6y76 { Px6y77 } CellNode (6 @ 76) (10)Px43y6 { Px43y7 } CellNode (43 @ 6) (10)Px70y63 { Px70y64, Px70y62, Px69y63 } CellNode (70 @ 63) (10)Px19y11 { Px19y12 } CellNode (19 @ 11) (10)Px2y15 { Px3y15, Px1y15, Px2y14, Px2y16 } CellNode (2 @ 15) (10)Px28y15 { Px28y16, Px27y15, Px29y15, Px28y14 } CellNode (28 @ 15) (10)Px44y17 { Px45y17, Px43y17, Px44y18, Px44y16 } CellNode (44 @ 17) (10)Px9y3 { Px9y4 } CellNode (9 @ 3) (10)Px35y13 { Px36y13, Px34y13, Px35y14, Px35y12 } CellNode (35 @ 13) (10)Px42y11 { Px43y11, Px42y10, Px42y12, Px41y11 } CellNode (42 @ 11) (10)Px59y16 { Px59y17, Px60y16, Px58y16, Px59y15 } CellNode (59 @ 16) (10)Px38y83 { Px37y83, Px38y82, Px39y83, Px38y84 } CellNode (38 @ 83) (10)Px51y15 { Px51y14, Px51y16, Px50y15, Px52y15 } CellNode (51 @ 15) (10)Px27y24 { Px26y24, Px27y23 } CellNode (27 @ 24) (10)Px18y20 { Px18y21, Px17y20, Px19y20, Px18y19 } CellNode (18 @ 20) (10)Px61y83 { Px62y83, Px61y82, Px61y84 } CellNode (61 @ 83) (10)Px46y7 { Px45y7, Px46y6, Px47y7, Px46y8 } CellNode (46 @ 7) (10)Px67y2 { Px66y2, Px67y3, Px67y1, Px68y2 } CellNode (67 @ 2) (10)Px52y3 { Px51y3, Px52y4, Px52y2, Px53y3 } CellNode (52 @ 3) (10)Px51y69 { Px52y69, Px51y68 } CellNode (51 @ 69) (10)Px68y63 { Px69y63, Px68y62 } CellNode (68 @ 63) (10)Px1y18 { Px1y19, Px2y18, Px1y17 } CellNode (1 @ 18) (10)Px9y19 { Px8y19, Px9y18, Px10y19, Px9y20 } CellNode (9 @ 19) (10)Px7y13 { Px7y14, Px6y13, Px8y13 } CellNode (7 @ 13) (10)Px3y1 { Px2y1, Px4y1 } CellNode (3 @ 1) (10)Px23y17 { Px23y16, Px23y18, Px24y17, Px22y17 } CellNode (23 @ 17) (10)Px49y15 { Px49y14, Px49y16, Px50y15 } CellNode (49 @ 15) (10)Px56y13 { Px56y14, Px55y13, Px56y12 } CellNode (56 @ 13) (10)Px35y80 { Px35y81, Px36y80 } CellNode (35 @ 80) (10)Px100y58 { Px100y57 } CellNode (100 @ 58) (10)Px65y17 { Px66y17, Px64y17, Px65y16 } CellNode (65 @ 17) (10)Px15y28 { Px15y29, Px16y28, Px14y28 } CellNode (15 @ 28) (10)Px59y83 { Px59y84 } CellNode (59 @ 83) (10)Px8y28 { Px8y29 } CellNode (8 @ 28) (10)Px51y82 { Px51y83, Px51y81, Px52y82 } CellNode (51 @ 82) (10)Px39y20 { Px39y19, Px38y20 } CellNode (39 @ 20) (10)Px55y4 { Px56y4, Px54y4, Px55y3 } CellNode (55 @ 4) (10)Px16y62 { Px17y62, Px16y63 } CellNode (16 @ 62) (10)Px89y63 { Px88y63, Px89y62 } CellNode (89 @ 63) (10)Px13y16 { Px12y16, Px13y15, Px14y16 } CellNode (13 @ 16) (10)Px48y78 { Px48y77, Px47y78 } CellNode (48 @ 78) (10)Px20y14 { Px19y14, Px20y15, Px21y14, Px20y13 } CellNode (20 @ 14) (10)Px37y19 { Px37y20, Px36y19, Px38y19 } CellNode (37 @ 19) (10)Px53y10 { Px53y9, Px54y10, Px52y10 } CellNode (53 @ 10) (10)Px64y1 { Px65y1, Px63y1, Px64y2 } CellNode (64 @ 1) (10)Px30y8 { Px30y9 } CellNode (30 @ 8) (10)Px5y25 { Px6y25, Px4y25, Px5y24, Px5y26 } CellNode (5 @ 25) (10)Px45y7 { Px46y7, Px44y7, Px45y8 } CellNode (45 @ 7) (10)Px47y57 { Px47y56 } CellNode (47 @ 57) (10)Px112y54 { Px112y53, Px111y54 } CellNode (112 @ 54) (10)Px63y59 { Px63y58, Px62y59, Px63y60, Px64y59 } CellNode (63 @ 59) (10)Px66y2 { Px65y2, Px66y3, Px66y1, Px67y2 } CellNode (66 @ 2) (10)Px51y3 { Px51y4, Px52y3 } CellNode (51 @ 3) (10)Px87y81 { Px87y80 } CellNode (87 @ 81) (10)Px62y68 { Px61y68, Px62y69, Px62y67 } CellNode (62 @ 68) (10)Px2y1 { Px3y1, Px1y1 } CellNode (2 @ 1) (10)Px5y19 { Px5y18, Px6y19, Px4y19 } CellNode (5 @ 19) (10)Px60y62 { Px60y61, Px61y62 } CellNode (60 @ 62) (10)Px12y19 { Px11y19, Px13y19, Px12y18 } CellNode (12 @ 19) (10)Px3y13 { Px2y13, Px4y13, Px3y12, Px3y14 } CellNode (3 @ 13) (10)Px13y3 { Px13y4, Px12y3 } CellNode (13 @ 3) (10)Px10y13 { Px11y13, Px9y13, Px10y14 } CellNode (10 @ 13) (10)Px27y18 { Px26y18, Px27y19, Px28y18, Px27y17 } CellNode (27 @ 18) (10)Px54y79 { Px54y78, Px53y79 } CellNode (54 @ 79) (10)Px69y3 { Px70y3, Px68y3, Px69y2 } CellNode (69 @ 3) (10)Px25y12 { Px25y13, Px26y12 } CellNode (25 @ 12) (10)Px52y73 { Px52y72, Px52y74 } CellNode (52 @ 73) (10)Px4y28 { Px5y28, Px3y28, Px4y29, Px4y27 } CellNode (4 @ 28) (10)Px18y14 { Px18y13, Px17y14, Px19y14 } CellNode (18 @ 14) (10)Px54y4 { Px53y4, Px54y3, Px55y4 } CellNode (54 @ 4) (10)Px2y22 { Px2y21, Px1y22, Px3y22 } CellNode (2 @ 22) (10)Px110y72 { Px110y73 } CellNode (110 @ 72) (10)Px32y10 { Px31y10, Px32y11 } CellNode (32 @ 10) (10)Px17y23 { Px16y23, Px17y24, Px18y23, Px17y22 } CellNode (17 @ 23) (10)Px26y27 { Px26y26, Px26y28, Px27y27 } CellNode (26 @ 27) (10)Px51y52 { Px52y52 } CellNode (51 @ 52) (10)Px24y21 { Px25y21, Px24y20, Px23y21, Px24y22 } CellNode (24 @ 21) (10)Px1y31 { Px2y31, Px1y32 } CellNode (1 @ 31) (10)Px91y57 { Px91y58 } CellNode (91 @ 57) (10)Px67y66 { Px66y66, Px68y66, Px67y65 } CellNode (67 @ 66) (10)Px17y17 { Px18y17, Px16y17, Px17y18, Px17y16 } CellNode (17 @ 17) (10)Px81y62 { Px81y61, Px82y62, Px81y63 } CellNode (81 @ 62) (10)Px24y15 { Px24y16, Px23y15, Px25y15, Px24y14 } CellNode (24 @ 15) (10)Px51y76 { Px50y76, Px51y75, Px52y76 } CellNode (51 @ 76) (10)Px63y1 { Px64y1, Px62y1 } CellNode (63 @ 1) (10)Px31y13 { Px30y13, Px31y12, Px32y13, Px31y14 } CellNode (31 @ 13) (10)Px57y71 { Px56y71, Px57y72, Px57y70 } CellNode (57 @ 71) (10)Px1y25 { Px2y25, Px1y24, Px1y26 } CellNode (1 @ 25) (10)Px39y14 { Px39y15, Px40y14, Px39y13, Px38y14 } CellNode (39 @ 14) (10)Px46y12 { Px45y12, Px46y13, Px47y12, Px46y11 } CellNode (46 @ 12) (10)Px34y83 { Px34y82, Px33y83 } CellNode (34 @ 83) (10)Px16y26 { Px16y25, Px17y26 } CellNode (16 @ 26) (10)Px62y14 { Px62y15, Px61y14 } CellNode (62 @ 14) (10)Px14y20 { Px14y19, Px14y21, Px15y20, Px13y20 } CellNode (14 @ 20) (10)Px49y82 { Px49y81 } CellNode (49 @ 82) (10)Px9y26 { Px9y25, Px8y26 } CellNode (9 @ 26) (10)Px40y17 { Px40y16, Px40y18, Px41y17, Px39y17 } CellNode (40 @ 17) (10)Px65y84 { Px64y84, Px66y84 } CellNode (65 @ 84) (10)Px55y16 { Px55y17, Px56y16, Px54y16, Px55y15 } CellNode (55 @ 16) (10)Px30y22 { Px30y21, Px30y23, Px29y22, Px31y22 } CellNode (30 @ 22) (10)Px7y20 { Px7y19, Px6y20, Px7y21 } CellNode (7 @ 20) (10)Px1y1 { Px2y1 } CellNode (1 @ 1) (10)Px47y8 { Px46y8, Px47y9, Px47y7 } CellNode (47 @ 8) (10)Px65y2 { Px65y1, Px66y2, Px64y2, Px65y3 } CellNode (65 @ 2) (10)Px1y55 { Px1y54, Px2y55 } CellNode (1 @ 55) (10)Px57y65 { Px58y65 } CellNode (57 @ 65) (10)Px12y3 { Px12y2, Px13y3, Px12y4 } CellNode (12 @ 3) (10)Px1y49 { Px2y49, Px1y50 } CellNode (1 @ 49) (10)Px64y63 { Px64y62, Px65y63 } CellNode (64 @ 63) (10)Px15y11 { Px14y11, Px15y10, Px16y11, Px15y12 } CellNode (15 @ 11) (10)Px68y3 { Px67y3, Px68y2, Px69y3 } CellNode (68 @ 3) (10)Px80y65 { Px80y64, Px80y66, Px79y65 } CellNode (80 @ 65) (10)Px79y62 { Px78y62, Px79y63 } CellNode (79 @ 62) (10)Px50y79 { Px49y79, Px50y78, Px50y80, Px51y79 } CellNode (50 @ 79) (10)Px53y4 { Px52y4, Px53y3, Px54y4 } CellNode (53 @ 4) (10)Px30y16 { Px30y17, Px31y16, Px29y16 } CellNode (30 @ 16) (10)Px56y74 { Px55y74, Px57y74, Px56y73 } CellNode (56 @ 74) (10)Px38y17 { Px39y17, Px37y17 } CellNode (38 @ 17) (10)Px107y75 { Px106y75 } CellNode (107 @ 75) (10)Px45y15 { Px45y16, Px46y15, Px44y15, Px45y14 } CellNode (45 @ 15) (10)Px36y11 { Px37y11, Px36y12, Px35y11, Px36y10 } CellNode (36 @ 11) (10)Px54y19 { Px53y19, Px55y19, Px54y18 } CellNode (54 @ 19) (10)Px61y17 { Px62y17, Px61y18, Px61y16, Px60y17 } CellNode (61 @ 17) (10)Px22y27 { Px23y27, Px22y28, Px21y27 } CellNode (22 @ 27) (10)Px13y23 { Px12y23, Px14y23 } CellNode (13 @ 23) (10)Px6y23 { Px7y23, Px6y22, Px6y24, Px5y23 } CellNode (6 @ 23) (10)Px15y4 { Px14y4, Px15y5, Px15y3 } CellNode (15 @ 4) (10)Px28y22 { Px28y21, Px27y22, Px28y23, Px29y22 } CellNode (28 @ 22) (10)Px52y13 { Px53y13, Px52y14, Px51y13, Px52y12 } CellNode (52 @ 13) (10)Px55y83 { Px55y84, Px54y83, Px56y83 } CellNode (55 @ 83) (10)Px35y20 { Px35y21, Px36y20 } CellNode (35 @ 20) (10)Px44y7 { Px43y7, Px44y8, Px45y7 } CellNode (44 @ 7) (10)Px1y79 { Px1y78 } CellNode (1 @ 79) (10)Px14y14 { Px13y14, Px15y14, Px14y13 } CellNode (14 @ 14) (10)Px29y13 { Px30y13, Px28y13, Px29y12, Px29y14 } CellNode (29 @ 13) (10)Px38y60 { Px38y59 } CellNode (38 @ 60) (10)Px23y24 { Px23y23, Px24y24 } CellNode (23 @ 24) (10)Px63y66 { Px62y66, Px64y66, Px63y67 } CellNode (63 @ 66) (10)Px54y62 { Px54y61, Px54y63, Px55y62 } CellNode (54 @ 62) (10)Px6y77 { Px5y77, Px7y77, Px6y76 } CellNode (6 @ 77) (10)Px62y1 { Px61y1, Px62y2, Px63y1 } CellNode (62 @ 1) (10)Px78y65 { Px78y66, Px79y65, Px77y65 } CellNode (78 @ 65) (10)Px43y7 { Px43y8, Px44y7, Px43y6 } CellNode (43 @ 7) (10)Px70y64 { Px70y63, Px69y64 } CellNode (70 @ 64) (10)Px19y12 { Px19y11, Px20y12, Px18y12, Px19y13 } CellNode (19 @ 12) (10)Px2y16 { Px2y15, Px2y17, Px1y16 } CellNode (2 @ 16) (10)Px28y16 { Px29y16, Px27y16, Px28y17, Px28y15 } CellNode (28 @ 16) (10)Px26y10 { Px26y11, Px25y10, Px26y9, Px27y10 } CellNode (26 @ 10) (10)Px44y18 { Px44y19, Px44y17 } CellNode (44 @ 18) (10)Px9y4 { Px10y4, Px9y3, Px9y5 } CellNode (9 @ 4) (10)Px42y12 { Px41y12, Px42y11, Px43y12 } CellNode (42 @ 12) (10)Px59y17 { Px59y18, Px60y17, Px58y17, Px59y16 } CellNode (59 @ 17) (10)Px3y50 { Px2y50, Px3y51 } CellNode (3 @ 50) (10)Px35y14 { Px34y14, Px35y13, Px36y14, Px35y15 } CellNode (35 @ 14) (10)Px38y84 { Px38y83, Px39y84 } CellNode (38 @ 84) (10)Px18y21 { Px19y21, Px18y22, Px17y21, Px18y20 } CellNode (18 @ 21) (10)Px36y59 { Px36y60 } CellNode (36 @ 59) (10)Px51y16 { Px50y16, Px52y16, Px51y15 } CellNode (51 @ 16) (10)Px34y23 { Px33y23, Px35y23 } CellNode (34 @ 23) (10)Px46y8 { Px46y7, Px47y8, Px45y8 } CellNode (46 @ 8) (10)Px61y84 { Px60y84, Px61y83, Px62y84 } CellNode (61 @ 84) (10)Px31y9 { Px30y9, Px31y10 } CellNode (31 @ 9) (10)Px66y15 { Px67y15, Px66y16, Px65y15 } CellNode (66 @ 15) (10)Px52y80 { Px51y80, Px52y79, Px53y80, Px52y81 } CellNode (52 @ 80) (10)Px67y3 { Px66y3, Px67y2, Px68y3 } CellNode (67 @ 3) (10)Px52y4 { Px51y4, Px52y3, Px53y4 } CellNode (52 @ 4) (10)Px1y19 { Px1y20, Px2y19, Px1y18 } CellNode (1 @ 19) (10)Px7y14 { Px7y15, Px8y14, Px7y13 } CellNode (7 @ 14) (10)Px49y9 { Px48y9, Px49y10 } CellNode (49 @ 9) (10)Px23y18 { Px24y18, Px22y18, Px23y17, Px23y19 } CellNode (23 @ 18) (10)Px49y16 { Px50y16, Px48y16, Px49y17, Px49y15 } CellNode (49 @ 16) (10)Px14y4 { Px13y4, Px14y5, Px15y4 } CellNode (14 @ 4) (10)Px56y14 { Px56y15, Px57y14, Px55y14, Px56y13 } CellNode (56 @ 14) (10)Px47y10 { Px48y10, Px47y9, Px47y11 } CellNode (47 @ 10) (10)Px8y29 { Px9y29, Px8y28, Px7y29, Px8y30 } CellNode (8 @ 29) (10)Px15y29 { Px15y28, Px16y29, Px14y29 } CellNode (15 @ 29) (10)Px59y84 { Px59y83, Px60y84, Px58y84 } CellNode (59 @ 84) (10)Px51y83 { Px51y82, Px52y83, Px51y84 } CellNode (51 @ 83) (10)Px31y20 { Px31y19, Px32y20, Px30y20, Px31y21 } CellNode (31 @ 20) (10)Px16y63 { Px16y62, Px17y63 } CellNode (16 @ 63) (10)Px61y1 { Px61y2, Px62y1, Px60y1 } CellNode (61 @ 1) (10)Px4y11 { Px4y12, Px3y11 } CellNode (4 @ 11) (10)Px113y46 { Px112y46 } CellNode (113 @ 46) (10)Px20y15 { Px21y15, Px19y15, Px20y14, Px20y16 } CellNode (20 @ 15) (10)Px79y1 { Px80y1, Px78y1, Px79y2 } CellNode (79 @ 1) (10)Px64y2 { Px65y2, Px64y1, Px64y3 } CellNode (64 @ 2) (10)Px45y8 { Px45y7, Px44y8, Px45y9, Px46y8 } CellNode (45 @ 8) (10)Px5y26 { Px5y27, Px6y26, Px4y26, Px5y25 } CellNode (5 @ 26) (10)Px30y9 { Px30y8, Px31y9, Px30y10, Px29y9 } CellNode (30 @ 9) (10)Px25y2 { Px25y3, Px24y2 } CellNode (25 @ 2) (10)Px3y20 { Px3y19, Px3y21, Px4y20, Px2y20 } CellNode (3 @ 20) (10)Px29y20 { Px29y19, Px29y21, Px30y20, Px28y20 } CellNode (29 @ 20) (10)Px10y20 { Px10y19, Px9y20, Px10y21 } CellNode (10 @ 20) (10)Px66y3 { Px65y3, Px66y2, Px67y3 } CellNode (66 @ 3) (10)Px51y4 { Px52y4, Px51y3 } CellNode (51 @ 4) (10)Px62y69 { Px62y68, Px61y69 } CellNode (62 @ 69) (10)Px48y9 { Px47y9, Px49y9, Px48y10 } CellNode (48 @ 9) (10)Px38y78 { Px37y78, Px38y79 } CellNode (38 @ 78) (10)Px13y4 { Px13y3, Px12y4, Px13y5, Px14y4 } CellNode (13 @ 4) (10)Px10y14 { Px9y14, Px11y14, Px10y15, Px10y13 } CellNode (10 @ 14) (10)Px27y19 { Px26y19, Px27y18, Px27y20, Px28y19 } CellNode (27 @ 19) (10)Px3y14 { Px4y14, Px3y15, Px2y14, Px3y13 } CellNode (3 @ 14) (10)Px110y73 { Px110y72 } CellNode (110 @ 73) (10)Px25y13 { Px25y14, Px26y13, Px24y13, Px25y12 } CellNode (25 @ 13) (10)Px52y74 { Px52y75, Px52y73, Px51y74 } CellNode (52 @ 74) (10)Px4y29 { Px3y29, Px5y29, Px4y28 } CellNode (4 @ 29) (10)Px32y11 { Px31y11, Px32y12, Px33y11, Px32y10 } CellNode (32 @ 11) (10)Px41y15 { Px41y16, Px40y15 } CellNode (41 @ 15) (10)Px11y29 { Px11y30, Px10y29, Px12y29 } CellNode (11 @ 29) (10)Px35y81 { Px35y82, Px36y81, Px35y80 } CellNode (35 @ 81) (10)Px60y1 { Px61y1, Px59y1, Px60y2 } CellNode (60 @ 1) (10)Px17y24 { Px18y24, Px17y23, Px16y24, Px17y25 } CellNode (17 @ 24) (10)Px24y22 { Px24y23, Px25y22, Px24y21, Px23y22 } CellNode (24 @ 22) (10)Px26y28 { Px25y28, Px26y27, Px26y29, Px27y28 } CellNode (26 @ 28) (10)Px1y32 { Px1y31, Px2y32, Px1y33 } CellNode (1 @ 32) (10)Px91y58 { Px91y57, Px91y59, Px90y58 } CellNode (91 @ 58) (10)Px102y78 { Px102y79 } CellNode (102 @ 78) (10)Px65y61 { Px64y61, Px65y62 } CellNode (65 @ 61) (10)Px74y65 { Px74y66 } CellNode (74 @ 65) (10)Px8y12 { Px8y13 } CellNode (8 @ 12) (10)Px78y1 { Px77y1, Px78y2, Px79y1 } CellNode (78 @ 1) (10)Px81y63 { Px81y64, Px82y63, Px81y62, Px80y63 } CellNode (81 @ 63) (10)Px24y16 { Px23y16, Px24y15, Px24y17, Px25y16 } CellNode (24 @ 16) (10)Px17y18 { Px16y18, Px18y18, Px17y17 } CellNode (17 @ 18) (10)Px24y2 { Px23y2, Px24y3, Px25y2 } CellNode (24 @ 2) (10)Px31y14 { Px31y15, Px31y13, Px30y14 } CellNode (31 @ 14) (10)Px57y72 { Px57y71, Px57y73, Px58y72, Px56y72 } CellNode (57 @ 72) (10)Px1y26 { Px1y25, Px1y27, Px2y26 } CellNode (1 @ 26) (10)Px46y13 { Px47y13, Px45y13, Px46y12, Px46y14 } CellNode (46 @ 13) (10)Px39y15 { Px39y14, Px39y16, Px40y15, Px38y15 } CellNode (39 @ 15) (10)Px40y18 { Px39y18, Px41y18, Px40y17, Px40y19 } CellNode (40 @ 18) (10)Px62y15 { Px63y15, Px62y14, Px61y15, Px62y16 } CellNode (62 @ 15) (10)Px14y21 { Px14y20, Px15y21, Px13y21 } CellNode (14 @ 21) (10)Px55y17 { Px55y16, Px54y17, Px55y18, Px56y17 } CellNode (55 @ 17) (10)Px7y21 { Px6y21, Px7y22, Px8y21, Px7y20 } CellNode (7 @ 21) (10)Px95y41 { Px95y42 } CellNode (95 @ 41) (10)Px30y23 { Px31y23, Px29y23, Px30y22 } CellNode (30 @ 23) (10)Px65y3 { Px65y2, Px66y3, Px64y3 } CellNode (65 @ 3) (10)Px15y12 { Px15y13, Px15y11, Px14y12, Px16y12 } CellNode (15 @ 12) (10)Px44y8 { Px43y8, Px44y7, Px45y8 } CellNode (44 @ 8) (10)Px17y61 { Px17y62 } CellNode (17 @ 61) (10)Px6y30 { Px6y31, Px7y30 } CellNode (6 @ 30) (10)Px47y9 { Px47y8, Px48y9, Px47y10 } CellNode (47 @ 9) (10)Px12y4 { Px13y4, Px12y3, Px12y5, Px11y4 } CellNode (12 @ 4) (10)Px80y66 { Px80y65, Px80y67, Px79y66 } CellNode (80 @ 66) (10)Px79y63 { Px79y62, Px80y63 } CellNode (79 @ 63) (10)Px49y77 { Px48y77 } CellNode (49 @ 77) (10)Px30y17 { Px30y16, Px31y17, Px29y17, Px30y18 } CellNode (30 @ 17) (10)Px29y14 { Px29y15, Px30y14, Px29y13, Px28y14 } CellNode (29 @ 14) (10)Px21y13 { Px20y13, Px21y14, Px22y13 } CellNode (21 @ 13) (10)Px45y16 { Px45y17, Px46y16, Px44y16, Px45y15 } CellNode (45 @ 16) (10)Px36y12 { Px36y11, Px36y13, Px37y12, Px35y12 } CellNode (36 @ 12) (10)Px6y24 { Px6y23, Px5y24, Px6y25 } CellNode (6 @ 24) (10)Px61y18 { Px61y17, Px62y18, Px60y18 } CellNode (61 @ 18) (10)Px22y28 { Px23y28, Px21y28, Px22y29, Px22y27 } CellNode (22 @ 28) (10)Px39y82 { Px38y82, Px40y82, Px39y83 } CellNode (39 @ 82) (10)Px52y14 { Px52y13, Px51y14, Px52y15, Px53y14 } CellNode (52 @ 14) (10)Px20y22 { Px20y23, Px19y22, Px21y22 } CellNode (20 @ 22) (10)Px46y80 { Px46y79, Px47y80 } CellNode (46 @ 80) (10)Px15y5 { Px15y4, Px14y5 } CellNode (15 @ 5) (10)Px28y23 { Px28y22, Px27y23, Px29y23 } CellNode (28 @ 23) (10)Px35y21 { Px34y21, Px36y21, Px35y20 } CellNode (35 @ 21) (10)Px55y84 { Px54y84, Px55y83, Px56y84 } CellNode (55 @ 84) (10)Px63y67 { Px62y67, Px64y67, Px63y66 } CellNode (63 @ 67) (10)Px77y1 { Px76y1, Px77y2, Px78y1 } CellNode (77 @ 1) (10)Px110y37 { Px109y37 } CellNode (110 @ 37) (10)Px61y61 { Px62y61, Px61y62, Px60y61 } CellNode (61 @ 61) (10)Px78y66 { Px77y66, Px78y65, Px78y67, Px79y66 } CellNode (78 @ 66) (10)Px62y2 { Px61y2, Px62y3, Px62y1 } CellNode (62 @ 2) (10)Px43y8 { Px43y9, Px43y7, Px44y8 } CellNode (43 @ 8) (10)Px54y63 { Px55y63, Px54y62 } CellNode (54 @ 63) (10)Px2y17 { Px1y17, Px2y18, Px2y16 } CellNode (2 @ 17) (10)Px28y17 { Px28y16, Px28y18, Px29y17, Px27y17 } CellNode (28 @ 17) (10)Px19y13 { Px18y13, Px19y14, Px19y12, Px20y13 } CellNode (19 @ 13) (10)Px26y11 { Px26y10, Px26y12, Px27y11 } CellNode (26 @ 11) (10)Px44y19 { Px43y19, Px44y18, Px44y20, Px45y19 } CellNode (44 @ 19) (10)Px9y5 { Px9y4, Px9y6, Px10y5 } CellNode (9 @ 5) (10)Px60y70 { Px61y70, Px60y71 } CellNode (60 @ 70) (10)Px59y18 { Px58y18, Px59y17, Px60y18 } CellNode (59 @ 18) (10)Px53y72 { Px52y72 } CellNode (53 @ 72) (10)Px86y79 { Px86y80 } CellNode (86 @ 79) (10)Px3y51 { Px3y50, Px2y51, Px3y52, Px4y51 } CellNode (3 @ 51) (10)Px18y22 { Px18y23, Px18y21, Px19y22, Px17y22 } CellNode (18 @ 22) (10)Px27y26 { Px26y26, Px27y27 } CellNode (27 @ 26) (10)Px35y15 { Px35y16, Px35y14, Px36y15 } CellNode (35 @ 15) (10)Px52y81 { Px53y81, Px52y80, Px51y81, Px52y82 } CellNode (52 @ 81) (10)Px43y58 { Px42y58, Px44y58 } CellNode (43 @ 58) (10)Px25y20 { Px26y20, Px24y20, Px25y21, Px25y19 } CellNode (25 @ 20) (10)Px69y62 { Px70y62, Px68y62, Px69y63 } CellNode (69 @ 62) (10)Px26y3 { Px25y3, Px26y4 } CellNode (26 @ 3) (10)Px66y16 { Px66y17, Px66y15, Px65y16, Px67y16 } CellNode (66 @ 16) (10)Px23y2 { Px24y2 } CellNode (23 @ 2) (10)Px11y4 { Px10y4, Px11y5, Px12y4 } CellNode (11 @ 4) (10)Px68y65 { Px67y65, Px68y66, Px69y65 } CellNode (68 @ 65) (10)Px82y61 { Px81y61, Px83y61, Px82y62 } CellNode (82 @ 61) (10)Px7y15 { Px8y15, Px7y14, Px6y15, Px7y16 } CellNode (7 @ 15) (10)Px23y19 { Px24y19, Px23y18, Px22y19, Px23y20 } CellNode (23 @ 19) (10)Px49y17 { Px49y16, Px50y17, Px48y17 } CellNode (49 @ 17) (10)Px2y54 { Px1y54, Px2y55, Px3y54 } CellNode (2 @ 54) (10)Px14y5 { Px13y5, Px14y4, Px15y5 } CellNode (14 @ 5) (10)Px56y15 { Px56y14, Px57y15, Px56y16, Px55y15 } CellNode (56 @ 15) (10)Px47y11 { Px47y12, Px47y10, Px48y11, Px46y11 } CellNode (47 @ 11) (10)Px51y84 { Px50y84, Px51y83, Px52y84 } CellNode (51 @ 84) (10)Px31y21 { Px30y21, Px31y22, Px31y20, Px32y21 } CellNode (31 @ 21) (10)Px48y56 { Px47y56 } CellNode (48 @ 56) (10)Px64y58 { Px64y59, Px63y58 } CellNode (64 @ 58) (10)Px46y20 { Px47y20, Px46y19, Px45y20 } CellNode (46 @ 20) (10)Px61y2 { Px62y2, Px60y2, Px61y3, Px61y1 } CellNode (61 @ 2) (10)Px76y1 { Px75y1, Px76y2, Px77y1 } CellNode (76 @ 1) (10)Px2y78 { Px1y78 } CellNode (2 @ 78) (10)Px6y18 { Px5y18, Px6y19 } CellNode (6 @ 18) (10)Px13y18 { Px12y18, Px13y19 } CellNode (13 @ 18) (10)Px4y12 { Px4y11, Px4y13, Px3y12 } CellNode (4 @ 12) (10)Px20y16 { Px20y17, Px21y16, Px19y16, Px20y15 } CellNode (20 @ 16) (10)Px79y2 { Px80y2, Px78y2, Px79y1 } CellNode (79 @ 2) (10)Px64y3 { Px65y3, Px63y3, Px64y2 } CellNode (64 @ 3) (10)Px45y9 { Px45y10, Px45y8 } CellNode (45 @ 9) (10)Px5y27 { Px5y28, Px6y27, Px5y26, Px4y27 } CellNode (5 @ 27) (10)Px25y3 { Px24y3, Px25y2, Px26y3 } CellNode (25 @ 3) (10)Px3y21 { Px4y21, Px2y21, Px3y20, Px3y22 } CellNode (3 @ 21) (10)Px10y4 { Px9y4, Px11y4, Px10y5 } CellNode (10 @ 4) (10)Px10y21 { Px10y22, Px9y21, Px11y21, Px10y20 } CellNode (10 @ 21) (10)Px38y79 { Px37y79, Px38y78, Px38y80 } CellNode (38 @ 79) (10)Px13y5 { Px13y4, Px14y5, Px12y5 } CellNode (13 @ 5) (10)Px10y15 { Px11y15, Px10y14, Px9y15 } CellNode (10 @ 15) (10)Px3y15 { Px3y14, Px2y15, Px4y15 } CellNode (3 @ 15) (10)Px18y16 { Px18y17, Px17y16, Px19y16 } CellNode (18 @ 16) (10)Px25y14 { Px24y14, Px25y15, Px26y14, Px25y13 } CellNode (25 @ 14) (10)Px52y75 { Px52y76, Px53y75, Px51y75, Px52y74 } CellNode (52 @ 75) (10)Px32y12 { Px33y12, Px31y12, Px32y11, Px32y13 } CellNode (32 @ 12) (10)Px41y16 { Px41y15, Px40y16, Px41y17, Px42y16 } CellNode (41 @ 16) (10)Px2y24 { Px3y24, Px1y24, Px2y25 } CellNode (2 @ 24) (10)Px26y29 { Px26y28, Px27y29, Px25y29 } CellNode (26 @ 29) (10)Px35y82 { Px35y81, Px36y82, Px34y82 } CellNode (35 @ 82) (10)Px60y2 { Px60y1, Px61y2, Px59y2, Px60y3 } CellNode (60 @ 2) (10)Px24y23 { Px24y24, Px25y23, Px23y23, Px24y22 } CellNode (24 @ 23) (10)Px17y25 { Px17y26, Px18y25, Px16y25, Px17y24 } CellNode (17 @ 25) (10)Px75y1 { Px75y2, Px76y1, Px74y1 } CellNode (75 @ 1) (10)Px1y33 { Px1y32 } CellNode (1 @ 33) (10)Px91y59 { Px91y58, Px90y59 } CellNode (91 @ 59) (10)Px52y69 { Px51y69, Px52y70 } CellNode (52 @ 69) (10)Px20y77 { Px20y78, Px21y77 } CellNode (20 @ 77) (10)Px102y79 { Px102y78 } CellNode (102 @ 79) (10)Px65y62 { Px65y63, Px66y62, Px64y62, Px65y61 } CellNode (65 @ 62) (10)Px74y66 { Px74y65, Px75y66, Px74y67 } CellNode (74 @ 66) (10)Px8y13 { Px8y14, Px7y13, Px8y12, Px9y13 } CellNode (8 @ 13) (10)Px78y2 { Px77y2, Px78y1, Px79y2 } CellNode (78 @ 2) (10)Px15y13 { Px16y13, Px15y14, Px15y12, Px14y13 } CellNode (15 @ 13) (10)Px81y64 { Px80y64, Px82y64, Px81y63 } CellNode (81 @ 64) (10)Px24y17 { Px25y17, Px23y17, Px24y18, Px24y16 } CellNode (24 @ 17) (10)Px24y3 { Px24y2, Px25y3, Px24y4 } CellNode (24 @ 3) (10)Px31y15 { Px31y14, Px32y15, Px31y16 } CellNode (31 @ 15) (10)Px57y73 { Px58y73, Px57y72, Px56y73, Px57y74 } CellNode (57 @ 73) (10)Px1y27 { Px1y26, Px1y28 } CellNode (1 @ 27) (10)Px46y14 { Px46y15, Px47y14, Px45y14, Px46y13 } CellNode (46 @ 14) (10)Px16y28 { Px15y28, Px16y29, Px17y28 } CellNode (16 @ 28) (10)Px39y16 { Px39y17, Px40y16, Px39y15 } CellNode (39 @ 16) (10)Px62y16 { Px62y17, Px63y16, Px62y15, Px61y16 } CellNode (62 @ 16) (10)Px23y26 { Px24y26, Px23y27 } CellNode (23 @ 26) (10)Px49y84 { Px50y84 } CellNode (49 @ 84) (10)Px22y11 { Px23y11, Px21y11 } CellNode (22 @ 11) (10)Px21y20 { Px21y19, Px21y21, Px22y20, Px20y20 } CellNode (21 @ 20) (10)Px95y42 { Px95y41, Px95y43 } CellNode (95 @ 42) (10)Px17y62 { Px16y62, Px17y61, Px17y63 } CellNode (17 @ 62) (10)Px29y21 { Px30y21, Px28y21, Px29y20, Px29y22 } CellNode (29 @ 21) (10)Px37y10 { Px37y11, Px37y9, Px38y10, Px36y10 } CellNode (37 @ 10) (10)Px40y19 { Px40y18, Px41y19, Px39y19 } CellNode (40 @ 19) (10)Px6y31 { Px6y30, Px5y31, Px7y31 } CellNode (6 @ 31) (10)Px55y18 { Px56y18, Px55y17, Px54y18, Px55y19 } CellNode (55 @ 18) (10)Px7y22 { Px7y21, Px6y22, Px8y22, Px7y23 } CellNode (7 @ 22) (10)Px27y4 { Px26y4 } CellNode (27 @ 4) (10)Px12y5 { Px13y5, Px11y5, Px12y4 } CellNode (12 @ 5) (10)Px51y78 { Px52y78, Px51y79, Px50y78 } CellNode (51 @ 78) (10)Px64y65 { Px65y65, Px64y66 } CellNode (64 @ 65) (10)Px63y3 { Px64y3, Px62y3 } CellNode (63 @ 3) (10)Px80y67 { Px80y66, Px80y68, Px79y67 } CellNode (80 @ 67) (10)Px14y16 { Px13y16, Px14y17 } CellNode (14 @ 16) (10)Px105y71 { Px106y71, Px105y72 } CellNode (105 @ 71) (10)Px30y18 { Px29y18, Px30y19, Px30y17, Px31y18 } CellNode (30 @ 18) (10)Px29y15 { Px29y16, Px28y15, Px29y14 } CellNode (29 @ 15) (10)Px38y19 { Px38y20, Px37y19, Px39y19 } CellNode (38 @ 19) (10)Px21y14 { Px22y14, Px20y14, Px21y15, Px21y13 } CellNode (21 @ 14) (10)Px45y17 { Px44y17, Px46y17, Px45y16 } CellNode (45 @ 17) (10)Px74y1 { Px75y1, Px73y1, Px74y2 } CellNode (74 @ 1) (10)Px36y13 { Px36y12, Px36y14, Px35y13 } CellNode (36 @ 13) (10)Px43y11 { Px42y11, Px43y12, Px44y11 } CellNode (43 @ 11) (10)Px22y29 { Px22y28, Px23y29 } CellNode (22 @ 29) (10)Px13y25 { Px14y25 } CellNode (13 @ 25) (10)Px39y83 { Px39y82, Px38y83, Px39y84 } CellNode (39 @ 83) (10)Px20y23 { Px19y23, Px21y23, Px20y22, Px20y24 } CellNode (20 @ 23) (10)Px19y20 { Px19y19, Px19y21, Px20y20, Px18y20 } CellNode (19 @ 20) (10)Px6y25 { Px7y25, Px6y26, Px5y25, Px6y24 } CellNode (6 @ 25) (10)Px52y15 { Px52y16, Px52y14, Px51y15, Px53y15 } CellNode (52 @ 15) (10)Px62y83 { Px61y83, Px62y84 } CellNode (62 @ 83) (10)Px77y2 { Px76y2, Px77y1, Px78y2 } CellNode (77 @ 2) (10)Px62y3 { Px61y3, Px62y2, Px63y3 } CellNode (62 @ 3) (10)Px61y62 { Px61y61, Px61y63, Px60y62 } CellNode (61 @ 62) (10)Px78y67 { Px79y67, Px78y66 } CellNode (78 @ 67) (10)Px43y9 { Px42y9, Px43y8 } CellNode (43 @ 9) (10)Px69y63 { Px69y64, Px70y63, Px69y62, Px68y63 } CellNode (69 @ 63) (10)Px2y18 { Px3y18, Px2y17, Px1y18, Px2y19 } CellNode (2 @ 18) (10)Px19y14 { Px20y14, Px18y14, Px19y15, Px19y13 } CellNode (19 @ 14) (10)Px26y12 { Px27y12, Px26y13, Px25y12, Px26y11 } CellNode (26 @ 12) (10)Px9y6 { Px8y6, Px10y6, Px9y5 } CellNode (9 @ 6) (10)Px35y16 { Px35y17, Px36y16, Px35y15 } CellNode (35 @ 16) (10)Px60y71 { Px61y71, Px60y70, Px60y72 } CellNode (60 @ 71) (10)Px3y52 { Px4y52, Px3y51 } CellNode (3 @ 52) (10)Px66y17 { Px66y16, Px65y17 } CellNode (66 @ 17) (10)Px18y23 { Px19y23, Px17y23, Px18y24, Px18y22 } CellNode (18 @ 23) (10)Px27y27 { Px26y27, Px27y26, Px27y28 } CellNode (27 @ 27) (10)Px36y80 { Px37y80, Px36y81, Px35y80 } CellNode (36 @ 80) (10)Px52y82 { Px53y82, Px52y83, Px51y82, Px52y81 } CellNode (52 @ 82) (10)Px25y21 { Px26y21, Px25y22, Px24y21, Px25y20 } CellNode (25 @ 21) (10)Px67y81 { Px67y82 } CellNode (67 @ 81) (10)Px11y5 { Px11y6, Px10y5, Px12y5, Px11y4 } CellNode (11 @ 5) (10)Px26y4 { Px26y3, Px27y4 } CellNode (26 @ 4) (10)Px2y31 { Px1y31, Px2y32, Px3y31 } CellNode (2 @ 31) (10)Px68y66 { Px68y67, Px68y65, Px69y66, Px67y66 } CellNode (68 @ 66) (10)Px3y76 { Px3y77, Px4y76 } CellNode (3 @ 76) (10)Px82y62 { Px83y62, Px81y62, Px82y63, Px82y61 } CellNode (82 @ 62) (10)Px73y1 { Px72y1, Px73y2, Px74y1 } CellNode (73 @ 1) (10)Px7y16 { Px7y15, Px8y16 } CellNode (7 @ 16) (10)Px2y55 { Px1y55, Px2y54, Px3y55 } CellNode (2 @ 55) (10)Px56y16 { Px55y16, Px57y16, Px56y15, Px56y17 } CellNode (56 @ 16) (10)Px47y12 { Px47y13, Px48y12, Px46y12, Px47y11 } CellNode (47 @ 12) (10)Px54y10 { Px54y9, Px54y11, Px55y10, Px53y10 } CellNode (54 @ 10) (10)Px55y7 { Px54y7, Px55y8 } CellNode (55 @ 7) (10)Px15y20 { Px15y21, Px14y20, Px16y20, Px15y19 } CellNode (15 @ 20) (10)Px31y22 { Px32y22, Px30y22, Px31y23, Px31y21 } CellNode (31 @ 22) (10)Px66y84 { Px65y84 } CellNode (66 @ 84) (10)Px64y59 { Px64y58, Px63y59 } CellNode (64 @ 59) (10)Px76y2 { Px75y2, Px76y1, Px77y2 } CellNode (76 @ 2) (10)Px61y3 { Px61y2, Px62y3, Px60y3 } CellNode (61 @ 3) (10)Px42y9 { Px43y9, Px42y10, Px41y9 } CellNode (42 @ 9) (10)Px8y6 { Px9y6 } CellNode (8 @ 6) (10)Px6y19 { Px6y18, Px5y19, Px6y20, Px7y19 } CellNode (6 @ 19) (10)Px13y19 { Px14y19, Px13y18, Px12y19, Px13y20 } CellNode (13 @ 19) (10)Px4y13 { Px4y14, Px5y13, Px3y13, Px4y12 } CellNode (4 @ 13) (10)Px19y8 { Px20y8 } CellNode (19 @ 8) (10)Px20y17 { Px20y16, Px20y18, Px21y17 } CellNode (20 @ 17) (10)Px28y18 { Px29y18, Px27y18, Px28y17, Px28y19 } CellNode (28 @ 18) (10)Px11y13 { Px11y14, Px10y13, Px12y13 } CellNode (11 @ 13) (10)Px5y28 { Px4y28, Px5y27, Px5y29 } CellNode (5 @ 28) (10)Px3y22 { Px3y23, Px4y22, Px3y21, Px2y22 } CellNode (3 @ 22) (10)Px56y83 { Px57y83, Px55y83, Px56y84 } CellNode (56 @ 83) (10)Px10y22 { Px9y22, Px10y21, Px11y22 } CellNode (10 @ 22) (10)Px36y20 { Px36y19, Px37y20, Px35y20, Px36y21 } CellNode (36 @ 20) (10)Px36y50 { Px37y50, Px36y51 } CellNode (36 @ 50) (10)Px10y5 { Px10y4, Px11y5, Px9y5, Px10y6 } CellNode (10 @ 5) (10)Px52y52 { Px51y52, Px52y53 } CellNode (52 @ 52) (10)Px7y77 { Px8y77, Px6y77 } CellNode (7 @ 77) (10)Px72y1 { Px71y1, Px72y2, Px73y1 } CellNode (72 @ 1) (10)Px18y17 { Px17y17, Px18y18, Px18y16 } CellNode (18 @ 17) (10)Px45y78 { Px46y78, Px45y79 } CellNode (45 @ 78) (10)Px1y10 { Px1y11, Px1y9, Px2y10 } CellNode (1 @ 10) (10)Px16y11 { Px15y11, Px16y12 } CellNode (16 @ 11) (10)Px54y7 { Px53y7, Px54y8, Px55y7 } CellNode (54 @ 7) (10)Px25y15 { Px26y15, Px25y14, Px24y15, Px25y16 } CellNode (25 @ 15) (10)Px32y13 { Px31y13, Px33y13, Px32y12 } CellNode (32 @ 13) (10)Px41y17 { Px42y17, Px41y16, Px40y17, Px41y18 } CellNode (41 @ 17) (10)Px2y25 { Px2y24, Px1y25, Px3y25, Px2y26 } CellNode (2 @ 25) (10)Px52y76 { Px51y76, Px52y75, Px52y77, Px53y76 } CellNode (52 @ 76) (10)Px17y26 { Px17y25, Px18y26, Px16y26 } CellNode (17 @ 26) (10)Px60y3 { Px61y3, Px59y3, Px60y2 } CellNode (60 @ 3) (10)Px75y2 { Px75y1, Px76y2, Px74y2 } CellNode (75 @ 2) (10)Px24y24 { Px24y23, Px23y24, Px25y24 } CellNode (24 @ 24) (10)Px20y78 { Px21y78, Px20y77 } CellNode (20 @ 78) (10)Px2y49 { Px1y49, Px2y50 } CellNode (2 @ 49) (10)Px58y65 { Px58y66, Px57y65 } CellNode (58 @ 65) (10)Px74y67 { Px74y66, Px74y68 } CellNode (74 @ 67) (10)Px65y63 { Px64y63, Px65y64, Px66y63, Px65y62 } CellNode (65 @ 63) (10)Px8y14 { Px8y15, Px7y14, Px9y14, Px8y13 } CellNode (8 @ 14) (10)Px15y14 { Px14y14, Px16y14, Px15y13 } CellNode (15 @ 14) (10)Px24y18 { Px24y19, Px23y18, Px25y18, Px24y17 } CellNode (24 @ 18) (10)Px51y79 { Px51y80, Px52y79, Px51y78, Px50y79 } CellNode (51 @ 79) (10)Px24y4 { Px24y3, Px23y4 } CellNode (24 @ 4) (10)Px31y16 { Px31y15, Px30y16, Px32y16, Px31y17 } CellNode (31 @ 16) (10)Px57y74 { Px56y74, Px57y73, Px58y74 } CellNode (57 @ 74) (10)Px1y28 { Px1y27, Px1y29, Px2y28 } CellNode (1 @ 28) (10)Px46y15 { Px46y16, Px47y15, Px45y15, Px46y14 } CellNode (46 @ 15) (10)Px16y29 { Px16y28, Px15y29 } CellNode (16 @ 29) (10)Px50y6 { Px49y6, Px50y7 } CellNode (50 @ 6) (10)Px53y13 { Px53y14, Px52y13, Px54y13 } CellNode (53 @ 13) (10)Px23y27 { Px23y28, Px24y27, Px23y26, Px22y27 } CellNode (23 @ 27) (10)Px62y17 { Px62y16, Px62y18, Px63y17, Px61y17 } CellNode (62 @ 17) (10)Px39y17 { Px39y18, Px40y17, Px39y16, Px38y17 } CellNode (39 @ 17) (10)Px21y21 { Px22y21, Px21y22, Px21y20 } CellNode (21 @ 21) (10)Px95y43 { Px95y42 } CellNode (95 @ 43) (10)Px17y63 { Px17y62, Px16y63 } CellNode (17 @ 63) (10)Px71y1 { Px70y1, Px71y2, Px72y1 } CellNode (71 @ 1) (10)Px14y23 { Px13y23, Px15y23, Px14y24 } CellNode (14 @ 23) (10)Px29y22 { Px29y23, Px30y22, Px28y22, Px29y21 } CellNode (29 @ 22) (10)Px37y11 { Px36y11, Px37y12, Px38y11, Px37y10 } CellNode (37 @ 11) (10)Px9y29 { Px8y29, Px10y29, Px9y30 } CellNode (9 @ 29) (10)Px55y19 { Px55y18, Px54y19 } CellNode (55 @ 19) (10)Px7y23 { Px6y23, Px8y23, Px7y22 } CellNode (7 @ 23) (10)Px55y62 { Px54y62, Px55y63 } CellNode (55 @ 62) (10)Px64y66 { Px64y67, Px65y66, Px64y65, Px63y66 } CellNode (64 @ 66) (10)Px53y7 { Px52y7, Px53y8, Px54y7 } CellNode (53 @ 7) (10)Px14y17 { Px14y16, Px15y17 } CellNode (14 @ 17) (10)Px79y65 { Px80y65, Px78y65, Px79y66 } CellNode (79 @ 65) (10)Px105y72 { Px106y72, Px105y71, Px105y73 } CellNode (105 @ 72) (10)Px30y19 { Px31y19, Px29y19, Px30y18, Px30y20 } CellNode (30 @ 19) (10)Px29y16 { Px30y16, Px29y15, Px28y16, Px29y17 } CellNode (29 @ 16) (10)Px62y60 { Px62y61, Px63y60, Px62y59 } CellNode (62 @ 60) (10)Px89y1 { Px90y1, Px88y1 } CellNode (89 @ 1) (10)Px27y10 { Px27y9, Px27y11, Px28y10, Px26y10 } CellNode (27 @ 10) (10)Px80y68 { Px80y67 } CellNode (80 @ 68) (10)Px6y26 { Px6y25, Px7y26, Px5y26, Px6y27 } CellNode (6 @ 26) (10)Px52y16 { Px52y15, Px51y16, Px53y16 } CellNode (52 @ 16) (10)Px43y12 { Px43y13, Px44y12, Px43y11, Px42y12 } CellNode (43 @ 12) (10)Px4y20 { Px3y20, Px4y21, Px4y19 } CellNode (4 @ 20) (10)Px74y2 { Px75y2, Px73y2, Px74y1 } CellNode (74 @ 2) (10)Px67y15 { Px67y16, Px68y15, Px66y15 } CellNode (67 @ 15) (10)Px19y21 { Px18y21, Px19y22, Px19y20 } CellNode (19 @ 21) (10)Px20y24 { Px20y23, Px19y24, Px20y25 } CellNode (20 @ 24) (10)Px21y15 { Px22y15, Px20y15, Px21y16, Px21y14 } CellNode (21 @ 15) (10)Px53y80 { Px52y80, Px53y81, Px53y79 } CellNode (53 @ 80) (10)Px35y23 { Px36y23, Px34y23 } CellNode (35 @ 23) (10)Px41y9 { Px41y10, Px42y9, Px40y9 } CellNode (41 @ 9) (10)Px62y84 { Px62y83, Px61y84 } CellNode (62 @ 84) (10)Px49y79 { Px50y79, Px49y80 } CellNode (49 @ 79) (10)Px36y14 { Px36y15, Px36y13, Px35y14 } CellNode (36 @ 14) (10)Px39y84 { Px39y83, Px38y84 } CellNode (39 @ 84) (10)Px70y67 { Px71y67 } CellNode (70 @ 67) (10)Px69y64 { Px70y64, Px69y63, Px69y65 } CellNode (69 @ 64) (10)Px61y63 { Px61y62, Px62y63 } CellNode (61 @ 63) (10)Px23y4 { Px22y4, Px24y4 } CellNode (23 @ 4) (10)Px2y19 { Px3y19, Px2y18, Px1y19, Px2y20 } CellNode (2 @ 19) (10)Px19y15 { Px19y14, Px20y15, Px19y16 } CellNode (19 @ 15) (10)Px83y60 { Px83y61 } CellNode (83 @ 60) (10)Px26y13 { Px27y13, Px26y12, Px26y14, Px25y13 } CellNode (26 @ 13) (10)Px35y17 { Px35y16, Px35y18, Px36y17 } CellNode (35 @ 17) (10)Px33y11 { Px32y11, Px34y11, Px33y12 } CellNode (33 @ 11) (10)Px60y72 { Px59y72, Px60y71, Px61y72 } CellNode (60 @ 72) (10)Px48y10 { Px49y10, Px47y10, Px48y9, Px48y11 } CellNode (48 @ 10) (10)Px36y81 { Px35y81, Px36y82, Px36y80 } CellNode (36 @ 81) (10)Px70y1 { Px70y2, Px71y1, Px69y1 } CellNode (70 @ 1) (10)Px18y24 { Px19y24, Px17y24, Px18y25, Px18y23 } CellNode (18 @ 24) (10)Px52y83 { Px52y82, Px53y83, Px52y84, Px51y83 } CellNode (52 @ 83) (10)Px57y14 { Px58y14, Px56y14, Px57y15 } CellNode (57 @ 14) (10)Px27y28 { Px26y28, Px27y27, Px27y29 } CellNode (27 @ 28) (10)Px32y20 { Px32y21, Px31y20, Px32y19, Px33y20 } CellNode (32 @ 20) (10)Px67y82 { Px67y81 } CellNode (67 @ 82) (10)Px11y6 { Px10y6, Px11y5 } CellNode (11 @ 6) (10)Px2y32 { Px1y32, Px3y32, Px2y31 } CellNode (2 @ 32) (10)Px25y22 { Px25y21, Px25y23, Px26y22, Px24y22 } CellNode (25 @ 22) (10)Px52y7 { Px53y7, Px52y8 } CellNode (52 @ 7) (10)Px68y67 { Px68y66 } CellNode (68 @ 67) (10)Px3y77 { Px3y76 } CellNode (3 @ 77) (10)Px82y63 { Px82y62, Px83y63, Px82y64, Px81y63 } CellNode (82 @ 63) (10)Px73y2 { Px72y2, Px73y1, Px74y2 } CellNode (73 @ 2) (10)Px91y67 { Px92y67 } CellNode (91 @ 67) (10)Px23y10 { Px24y10, Px23y11 } CellNode (23 @ 10) (10)Px58y72 { Px57y72, Px59y72, Px58y73 } CellNode (58 @ 72) (10)Px47y13 { Px47y14, Px48y13, Px46y13, Px47y12 } CellNode (47 @ 13) (10)Px56y17 { Px56y18, Px57y17, Px55y17, Px56y16 } CellNode (56 @ 17) (10)Px63y15 { Px62y15, Px64y15, Px63y16 } CellNode (63 @ 15) (10)Px55y8 { Px55y7, Px54y8, Px55y9 } CellNode (55 @ 8) (10)Px15y21 { Px16y21, Px14y21, Px15y22, Px15y20 } CellNode (15 @ 21) (10)Px54y11 { Px54y12, Px54y10 } CellNode (54 @ 11) (10)Px31y23 { Px32y23, Px30y23, Px31y24, Px31y22 } CellNode (31 @ 23) (10)Px40y9 { Px40y10, Px39y9, Px41y9 } CellNode (40 @ 9) (10)Px7y30 { Px6y30, Px7y31, Px7y29, Px8y30 } CellNode (7 @ 30) (10)Px22y4 { Px23y4 } CellNode (22 @ 4) (10)Px4y14 { Px4y13, Px4y15, Px5y14, Px3y14 } CellNode (4 @ 14) (10)Px20y18 { Px20y17, Px19y18, Px20y19, Px21y18 } CellNode (20 @ 18) (10)Px28y19 { Px29y19, Px27y19, Px28y18, Px28y20 } CellNode (28 @ 19) (10)Px11y14 { Px12y14, Px10y14, Px11y13, Px11y15 } CellNode (11 @ 14) (10)Px44y10 { Px45y10, Px44y11 } CellNode (44 @ 10) (10)Px5y29 { Px5y28, Px4y29 } CellNode (5 @ 29) (10)Px60y12 { Px59y12, Px60y13 } CellNode (60 @ 12) (10)Px12y29 { Px13y29, Px12y30, Px11y29 } CellNode (12 @ 29) (10)Px10y6 { Px9y6, Px11y6, Px10y5 } CellNode (10 @ 6) (10)Px47y80 { Px47y79, Px46y80 } CellNode (47 @ 80) (10)Px3y23 { Px3y22, Px3y24, Px4y23 } CellNode (3 @ 23) (10)Px36y21 { Px35y21, Px36y20, Px36y22 } CellNode (36 @ 21) (10)Px56y84 { Px57y84, Px55y84, Px56y83 } CellNode (56 @ 84) (10)Px36y51 { Px36y50 } CellNode (36 @ 51) (10)Px52y53 { Px52y52 } CellNode (52 @ 53) (10)Px72y2 { Px71y2, Px72y1, Px73y2 } CellNode (72 @ 2) (10)Px10y17 { Px11y17, Px9y17, Px10y18 } CellNode (10 @ 17) (10)Px1y11 { Px1y12, Px2y11, Px1y10 } CellNode (1 @ 11) (10)Px18y18 { Px19y18, Px17y18, Px18y17, Px18y19 } CellNode (18 @ 18) (10)Px45y79 { Px46y79, Px45y78 } CellNode (45 @ 79) (10)Px52y77 { Px52y78, Px52y76, Px53y77 } CellNode (52 @ 77) (10)Px16y12 { Px16y13, Px17y12, Px15y12, Px16y11 } CellNode (16 @ 12) (10)Px54y8 { Px53y8, Px54y9, Px55y8, Px54y7 } CellNode (54 @ 8) (10)Px88y1 { Px87y1, Px89y1 } CellNode (88 @ 1) (10)Px25y16 { Px25y17, Px26y16, Px24y16, Px25y15 } CellNode (25 @ 16) (10)Px2y26 { Px3y26, Px2y25, Px1y26 } CellNode (2 @ 26) (10)Px49y1 { Px50y1, Px48y1 } CellNode (49 @ 1) (10)Px36y75 { Px36y76 } CellNode (36 @ 75) (10)Px44y58 { Px43y58, Px44y59, Px45y58 } CellNode (44 @ 58) (10)Px8y21 { Px8y22, Px9y21, Px7y21 } CellNode (8 @ 21) (10)Px41y18 { Px40y18, Px41y17, Px41y19 } CellNode (41 @ 18) (10)Px58y66 { Px58y65 } CellNode (58 @ 66) (10)Px74y68 { Px74y67, Px75y68 } CellNode (74 @ 68) (10)Px65y64 { Px65y65, Px66y64, Px65y63 } CellNode (65 @ 64) (10)Px8y15 { Px9y15, Px7y15, Px8y16, Px8y14 } CellNode (8 @ 15) (10)Px24y19 { Px24y18, Px24y20, Px25y19, Px23y19 } CellNode (24 @ 19) (10)Px106y70 { Px106y71 } CellNode (106 @ 70) (10)Px31y17 { Px32y17, Px30y17, Px31y16, Px31y18 } CellNode (31 @ 17) (10)Px39y18 { Px39y17, Px40y18, Px39y19 } CellNode (39 @ 18) (10)Px1y29 { Px1y28 } CellNode (1 @ 29) (10)Px22y13 { Px22y14, Px21y13 } CellNode (22 @ 13) (10)Px46y16 { Px46y15, Px46y17, Px45y16 } CellNode (46 @ 16) (10)Px64y43 { Px64y44 } CellNode (64 @ 43) (10)Px50y7 { Px50y6, Px49y7, Px50y8 } CellNode (50 @ 7) (10)Px53y14 { Px54y14, Px53y13, Px52y14, Px53y15 } CellNode (53 @ 14) (10)Px23y28 { Px22y28, Px24y28, Px23y29, Px23y27 } CellNode (23 @ 28) (10)Px62y18 { Px62y17, Px63y18, Px61y18 } CellNode (62 @ 18) (10)Px14y24 { Px14y23, Px14y25, Px15y24 } CellNode (14 @ 24) (10)Px21y22 { Px22y22, Px21y21, Px20y22, Px21y23 } CellNode (21 @ 22) (10)Px29y23 { Px28y23, Px29y22, Px30y23 } CellNode (29 @ 23) (10)Px37y12 { Px37y11, Px36y12, Px38y12 } CellNode (37 @ 12) (10)Px71y2 { Px70y2, Px71y1, Px72y2 } CellNode (71 @ 2) (10)Px25y83 { Px26y83, Px25y84 } CellNode (25 @ 83) (10)Px55y63 { Px54y63, Px55y62 } CellNode (55 @ 63) (10)Px87y1 { Px88y1, Px86y1 } CellNode (87 @ 1) (10)Px64y67 { Px64y66, Px65y67, Px63y67 } CellNode (64 @ 67) (10)Px53y8 { Px52y8, Px53y9, Px54y8, Px53y7 } CellNode (53 @ 8) (10)Px79y66 { Px79y67, Px80y66, Px79y65, Px78y66 } CellNode (79 @ 66) (10)Px48y1 { Px47y1, Px48y2, Px49y1 } CellNode (48 @ 1) (10)Px105y73 { Px105y72 } CellNode (105 @ 73) (10)Px62y61 { Px62y60, Px61y61, Px63y61 } CellNode (62 @ 61) (10)Px29y17 { Px29y18, Px30y17, Px29y16, Px28y17 } CellNode (29 @ 17) (10)Px21y16 { Px21y15, Px22y16, Px20y16, Px21y17 } CellNode (21 @ 16) (10)Px27y11 { Px26y11, Px27y12, Px28y11, Px27y10 } CellNode (27 @ 11) (10)Px45y19 { Px45y20, Px44y19, Px46y19 } CellNode (45 @ 19) (10)Px6y27 { Px6y26, Px5y27, Px7y27 } CellNode (6 @ 27) (10)Px61y70 { Px61y69, Px60y70, Px61y71 } CellNode (61 @ 70) (10)Px43y13 { Px43y14, Px44y13, Px43y12 } CellNode (43 @ 13) (10)Px4y21 { Px5y21, Px3y21, Px4y22, Px4y20 } CellNode (4 @ 21) (10)Px50y11 { Px49y11, Px50y12, Px51y11 } CellNode (50 @ 11) (10)Px11y21 { Px12y21, Px10y21, Px11y22 } CellNode (11 @ 21) (10)Px67y16 { Px68y16, Px66y16, Px67y15 } CellNode (67 @ 16) (10)Px19y22 { Px19y23, Px20y22, Px19y21, Px18y22 } CellNode (19 @ 22) (10)Px20y25 { Px20y26, Px19y25, Px21y25, Px20y24 } CellNode (20 @ 25) (10)Px26y20 { Px26y19, Px26y21, Px27y20, Px25y20 } CellNode (26 @ 20) (10)Px53y81 { Px53y80, Px53y82, Px52y81 } CellNode (53 @ 81) (10)Px4y51 { Px4y52, Px3y51 } CellNode (4 @ 51) (10)Px36y15 { Px35y15, Px36y16, Px36y14 } CellNode (36 @ 15) (10)Px10y30 { Px11y30, Px10y29, Px9y30 } CellNode (10 @ 30) (10)Px109y37 { Px110y37 } CellNode (109 @ 37) (10)Px69y65 { Px69y64, Px69y66, Px68y65 } CellNode (69 @ 65) (10)Px19y16 { Px20y16, Px18y16, Px19y15 } CellNode (19 @ 16) (10)Px83y61 { Px83y62, Px84y61, Px83y60, Px82y61 } CellNode (83 @ 61) (10)Px35y18 { Px36y18, Px35y17 } CellNode (35 @ 18) (10)Px26y14 { Px26y15, Px25y14, Px27y14, Px26y13 } CellNode (26 @ 14) (10)Px53y75 { Px54y75, Px52y75, Px53y76 } CellNode (53 @ 75) (10)Px33y12 { Px34y12, Px33y13, Px32y12, Px33y11 } CellNode (33 @ 12) (10)Px42y16 { Px41y16, Px43y16, Px42y17 } CellNode (42 @ 16) (10)Px3y54 { Px3y55, Px4y54, Px2y54 } CellNode (3 @ 54) (10)Px40y10 { Px40y11, Px41y10, Px40y9, Px39y10 } CellNode (40 @ 10) (10)Px48y11 { Px48y12, Px49y11, Px47y11, Px48y10 } CellNode (48 @ 11) (10)Px36y82 { Px35y82, Px36y81, Px37y82 } CellNode (36 @ 82) (10)Px70y2 { Px69y2, Px70y3, Px71y2, Px70y1 } CellNode (70 @ 2) (10)Px18y25 { Px18y24, Px18y26, Px19y25, Px17y25 } CellNode (18 @ 25) (10)Px25y23 { Px24y23, Px25y24, Px25y22, Px26y23 } CellNode (25 @ 23) (10)Px52y84 { Px53y84, Px52y83, Px51y84 } CellNode (52 @ 84) (10)Px57y15 { Px58y15, Px57y14, Px56y15, Px57y16 } CellNode (57 @ 15) (10)Px32y21 { Px33y21, Px32y22, Px32y20, Px31y21 } CellNode (32 @ 21) (10)Px27y29 { Px26y29, Px27y28 } CellNode (27 @ 29) (10)Px47y20 { Px46y20 } CellNode (47 @ 20) (10)Px86y1 { Px85y1, Px87y1 } CellNode (86 @ 1) (10)Px83y55 { Px83y56 } CellNode (83 @ 55) (10)Px52y8 { Px53y8, Px52y7, Px52y9, Px51y8 } CellNode (52 @ 8) (10)Px47y1 { Px46y1, Px47y2, Px48y1 } CellNode (47 @ 1) (10)Px66y62 { Px65y62, Px66y63 } CellNode (66 @ 62) (10)Px1y72 { Px1y73 } CellNode (1 @ 72) (10)Px75y66 { Px76y66, Px74y66 } CellNode (75 @ 66) (10)Px82y64 { Px81y64, Px83y64, Px82y63, Px82y65 } CellNode (82 @ 64) (10)Px23y11 { Px24y11, Px22y11, Px23y10, Px23y12 } CellNode (23 @ 11) (10)Px58y73 { Px58y74, Px57y73, Px59y73, Px58y72 } CellNode (58 @ 73) (10)Px29y7 { Px28y7 } CellNode (29 @ 7) (10)Px47y14 { Px47y15, Px46y14, Px47y13 } CellNode (47 @ 14) (10)Px38y10 { Px39y10, Px38y9, Px38y11, Px37y10 } CellNode (38 @ 10) (10)Px56y18 { Px57y18, Px55y18, Px56y17 } CellNode (56 @ 18) (10)Px63y16 { Px63y17, Px63y15, Px64y16, Px62y16 } CellNode (63 @ 16) (10)Px55y9 { Px55y8, Px55y10, Px54y9 } CellNode (55 @ 9) (10)Px15y22 { Px15y21, Px16y22, Px15y23 } CellNode (15 @ 22) (10)Px54y12 { Px54y13, Px54y11, Px55y12 } CellNode (54 @ 12) (10)Px22y20 { Px21y20, Px22y21, Px22y19, Px23y20 } CellNode (22 @ 20) (10)Px31y24 { Px31y23, Px32y24 } CellNode (31 @ 24) (10)Px7y31 { Px6y31, Px8y31, Px7y30 } CellNode (7 @ 31) (10)Px14y61 { Px15y61 } CellNode (14 @ 61) (10)Px8y76 { Px8y77 } CellNode (8 @ 76) (10)Px4y15 { Px4y14, Px4y16, Px3y15 } CellNode (4 @ 15) (10)Px20y19 { Px21y19, Px20y18, Px19y19, Px20y20 } CellNode (20 @ 19) (10)Px55y70 { Px55y71, Px56y70 } CellNode (55 @ 70) (10)Px11y15 { Px11y14, Px12y15, Px10y15 } CellNode (11 @ 15) (10)Px44y11 { Px44y10, Px45y11, Px44y12, Px43y11 } CellNode (44 @ 11) (10)Px60y13 { Px59y13, Px60y12, Px60y14 } CellNode (60 @ 13) (10)Px3y24 { Px2y24, Px3y23, Px3y25, Px4y24 } CellNode (3 @ 24) (10)Px10y24 { Px9y24, Px10y25 } CellNode (10 @ 24) (10)Px85y1 { Px85y2, Px86y1, Px84y1 } CellNode (85 @ 1) (10)Px36y22 { Px36y23, Px36y21 } CellNode (36 @ 22) (10)Px51y8 { Px51y9, Px52y8, Px50y8 } CellNode (51 @ 8) (10)Px46y1 { Px46y2, Px47y1, Px45y1 } CellNode (46 @ 1) (10)Px21y77 { Px21y78, Px20y77 } CellNode (21 @ 77) (10)Px3y18 { Px3y19, Px2y18, Px4y18 } CellNode (3 @ 18) (10)Px28y7 { Px28y8, Px29y7 } CellNode (28 @ 7) (10)Px10y18 { Px10y17, Px9y18, Px10y19, Px11y18 } CellNode (10 @ 18) (10)Px36y76 { Px37y76, Px36y77, Px36y75 } CellNode (36 @ 76) (10)Px1y12 { Px1y13, Px2y12, Px1y11 } CellNode (1 @ 12) (10)Px18y19 { Px18y20, Px18y18, Px19y19 } CellNode (18 @ 19) (10)Px52y78 { Px52y79, Px53y78, Px51y78, Px52y77 } CellNode (52 @ 78) (10)Px16y13 { Px15y13, Px16y14, Px17y13, Px16y12 } CellNode (16 @ 13) (10)Px54y9 { Px54y10, Px53y9, Px54y8, Px55y9 } CellNode (54 @ 9) (10)Px41y19 { Px40y19, Px42y19, Px41y18 } CellNode (41 @ 19) (10)Px32y15 { Px31y15, Px32y16, Px33y15 } CellNode (32 @ 15) (10)Px9y13 { Px10y13, Px9y14, Px8y13 } CellNode (9 @ 13) (10)Px25y17 { Px25y18, Px26y17, Px25y16, Px24y17 } CellNode (25 @ 17) (10)Px44y59 { Px45y59, Px44y58 } CellNode (44 @ 59) (10)Px8y22 { Px8y23, Px9y22, Px7y22, Px8y21 } CellNode (8 @ 22) (10)Px17y28 { Px16y28, Px18y28 } CellNode (17 @ 28) (10)Px24y26 { Px23y26, Px25y26, Px24y27 } CellNode (24 @ 26) (10)Px65y65 { Px65y66, Px66y65, Px64y65, Px65y64 } CellNode (65 @ 65) (10)Px8y16 { Px7y16, Px8y15, Px8y17 } CellNode (8 @ 16) (10)Px106y71 { Px106y72, Px106y70, Px105y71 } CellNode (106 @ 71) (10)Px22y14 { Px22y15, Px23y14, Px21y14, Px22y13 } CellNode (22 @ 14) (10)Px31y18 { Px31y19, Px31y17, Px30y18 } CellNode (31 @ 18) (10)Px39y19 { Px38y19, Px39y18, Px39y20, Px40y19 } CellNode (39 @ 19) (10)Px84y1 { Px85y1, Px83y1, Px84y2 } CellNode (84 @ 1) (10)Px25y84 { Px26y84, Px25y83 } CellNode (25 @ 84) (10)Px7y25 { Px7y26, Px8y25, Px6y25 } CellNode (7 @ 25) (10)Px53y15 { Px53y16, Px54y15, Px53y14, Px52y15 } CellNode (53 @ 15) (10)Px14y25 { Px13y25, Px15y25, Px14y24 } CellNode (14 @ 25) (10)Px45y1 { Px46y1, Px44y1, Px45y2 } CellNode (45 @ 1) (10)Px23y29 { Px24y29, Px23y28, Px22y29 } CellNode (23 @ 29) (10)Px46y17 { Px46y16, Px45y17, Px47y17 } CellNode (46 @ 17) (10)Px21y23 { Px22y23, Px20y23, Px21y22 } CellNode (21 @ 23) (10)Px64y44 { Px64y43 } CellNode (64 @ 44) (10)Px50y8 { Px50y7, Px51y8 } CellNode (50 @ 8) (10)Px53y9 { Px53y8, Px54y9, Px52y9, Px53y10 } CellNode (53 @ 9) (10)Px71y66 { Px72y66, Px71y67 } CellNode (71 @ 66) (10)Px14y19 { Px14y20, Px13y19, Px15y19 } CellNode (14 @ 19) (10)Px5y13 { Px6y13, Px5y14, Px4y13 } CellNode (5 @ 13) (10)Px21y17 { Px20y17, Px22y17, Px21y16, Px21y18 } CellNode (21 @ 17) (10)Px29y18 { Px29y19, Px28y18, Px30y18, Px29y17 } CellNode (29 @ 18) (10)Px12y13 { Px11y13, Px13y13, Px12y14 } CellNode (12 @ 13) (10)Px79y67 { Px80y67, Px78y67, Px79y66 } CellNode (79 @ 67) (10)Px36y16 { Px36y15, Px35y16, Px36y17, Px37y16 } CellNode (36 @ 16) (10)Px27y12 { Px28y12, Px27y11, Px26y12, Px27y13 } CellNode (27 @ 12) (10)Px48y2 { Px47y2, Px48y3, Px48y1 } CellNode (48 @ 2) (10)Px34y10 { Px34y11 } CellNode (34 @ 10) (10)Px61y71 { Px61y72, Px60y71, Px61y70 } CellNode (61 @ 71) (10)Px4y22 { Px4y21, Px5y22, Px3y22, Px4y23 } CellNode (4 @ 22) (10)Px50y12 { Px50y13, Px51y12, Px50y11, Px49y12 } CellNode (50 @ 12) (10)Px11y22 { Px10y22, Px12y22, Px11y21, Px11y23 } CellNode (11 @ 22) (10)Px37y80 { Px37y79, Px36y80, Px38y80 } CellNode (37 @ 80) (10)Px19y23 { Px19y24, Px20y23, Px19y22, Px18y23 } CellNode (19 @ 23) (10)Px37y50 { Px36y50 } CellNode (37 @ 50) (10)Px26y21 { Px26y20, Px25y21, Px26y22, Px27y21 } CellNode (26 @ 21) (10)Px53y82 { Px53y81, Px53y83, Px54y82, Px52y82 } CellNode (53 @ 82) (10)Px20y26 { Px20y27, Px20y25, Px21y26, Px19y26 } CellNode (20 @ 26) (10)Px43y14 { Px43y13, Px44y14 } CellNode (43 @ 14) (10)Px36y4 { Px35y4 } CellNode (36 @ 4) (10)Px3y31 { Px3y32, Px2y31, Px4y31 } CellNode (3 @ 31) (10)Px4y52 { Px4y53, Px3y52, Px4y51 } CellNode (4 @ 52) (10)Px69y66 { Px69y65, Px68y66 } CellNode (69 @ 66) (10)Px4y76 { Px3y76 } CellNode (4 @ 76) (10)Px67y60 { Px68y60 } CellNode (67 @ 60) (10)Px46y78 { Px46y79, Px47y78, Px45y78 } CellNode (46 @ 78) (10)Px92y66 { Px92y67 } CellNode (92 @ 66) (10)Px83y62 { Px82y62, Px83y61, Px83y63, Px84y62 } CellNode (83 @ 62) (10)Px26y15 { Px26y16, Px27y15, Px25y15, Px26y14 } CellNode (26 @ 15) (10)Px53y76 { Px53y77, Px52y76, Px54y76, Px53y75 } CellNode (53 @ 76) (10)Px44y1 { Px43y1, Px44y2, Px45y1 } CellNode (44 @ 1) (10)Px33y13 { Px33y12, Px33y14, Px32y13, Px34y13 } CellNode (33 @ 13) (10)Px3y55 { Px3y54, Px2y55 } CellNode (3 @ 55) (10)Px42y17 { Px41y17, Px42y16, Px43y17 } CellNode (42 @ 17) (10)Px48y12 { Px48y13, Px49y12, Px47y12, Px48y11 } CellNode (48 @ 12) (10)Px18y26 { Px18y27, Px17y26, Px18y25, Px19y26 } CellNode (18 @ 26) (10)Px70y3 { Px69y3, Px70y2 } CellNode (70 @ 3) (10)Px57y16 { Px57y17, Px58y16, Px57y15, Px56y16 } CellNode (57 @ 16) (10)Px25y24 { Px26y24, Px24y24, Px25y25, Px25y23 } CellNode (25 @ 24) (10)Px16y20 { Px16y21, Px15y20, Px17y20 } CellNode (16 @ 20) (10)Px9y20 { Px9y21, Px9y19, Px10y20 } CellNode (9 @ 20) (10)Px32y22 { Px31y22, Px33y22, Px32y23, Px32y21 } CellNode (32 @ 22) (10)Px83y1 { Px82y1, Px83y2, Px84y1 } CellNode (83 @ 1) (10)Px40y11 { Px39y11, Px40y12, Px40y10, Px41y11 } CellNode (40 @ 11) (10)Px55y10 { Px55y9, Px54y10 } CellNode (55 @ 10) (10)Px83y56 { Px83y55, Px83y57, Px84y56 } CellNode (83 @ 56) (10)Px52y9 { Px52y10, Px52y8, Px53y9, Px51y9 } CellNode (52 @ 9) (10)Px47y2 { Px47y3, Px46y2, Px48y2, Px47y1 } CellNode (47 @ 2) (10)Px66y63 { Px65y63, Px66y62, Px66y64 } CellNode (66 @ 63) (10)Px1y73 { Px1y74, Px2y73, Px1y72 } CellNode (1 @ 73) (10)Px82y65 { Px82y64 } CellNode (82 @ 65) (10)Px7y19 { Px6y19, Px8y19, Px7y20 } CellNode (7 @ 19) (10)Px58y74 { Px58y73, Px59y74, Px58y75, Px57y74 } CellNode (58 @ 74) (10)Px30y10 { Px30y9, Px30y11, Px29y10, Px31y10 } CellNode (30 @ 10) (10)Px47y15 { Px47y14, Px46y15 } CellNode (47 @ 15) (10)Px38y11 { Px38y12, Px39y11, Px37y11, Px38y10 } CellNode (38 @ 11) (10)Px63y17 { Px63y18, Px62y17, Px64y17, Px63y16 } CellNode (63 @ 17) (10)Px15y23 { Px14y23, Px15y24, Px15y22, Px16y23 } CellNode (15 @ 23) (10)Px54y13 { Px55y13, Px54y14, Px53y13, Px54y12 } CellNode (54 @ 13) (10)Px70y15 { Px69y15 } CellNode (70 @ 15) (10)Px22y21 { Px23y21, Px21y21, Px22y22, Px22y20 } CellNode (22 @ 21) (10)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="gridRange80Points400">gridRange80Points400messages none  defined. P1 { P2, P3, P24, P25, P26, P47, P48, P49 } NodeP2 { P1, P3, P4, P24, P25, P26, P27, P47, P48, P49, P50 } NodeP3 { P1, P2, P4, P5, P24, P25, P26, P27, P28, P47, P48, P49, P50, P51 } NodeP4 { P2, P3, P5, P6, P25, P26, P27, P28, P29, P48, P49, P50, P51, P52 } NodeP5 { P3, P4, P6, P7, P26, P27, P28, P29, P30, P49, P50, P51, P52, P53 } NodeP6 { P4, P5, P7, P8, P27, P28, P29, P30, P31, P50, P51, P52, P53, P54 } NodeP7 { P5, P6, P8, P9, P28, P29, P30, P31, P32, P51, P52, P53, P54, P55 } NodeP8 { P6, P7, P9, P10, P29, P30, P31, P32, P33, P52, P53, P54, P55, P56 } NodeP9 { P7, P8, P10, P11, P30, P31, P32, P33, P34, P53, P54, P55, P56, P57 } NodeP10 { P8, P9, P11, P12, P31, P32, P33, P34, P35, P54, P55, P56, P57, P58 } NodeP11 { P9, P10, P12, P13, P32, P33, P34, P35, P36, P55, P56, P57, P58, P59 } NodeP12 { P10, P11, P13, P14, P33, P34, P35, P36, P37, P56, P57, P58, P59, P60 } NodeP13 { P11, P12, P14, P15, P34, P35, P36, P37, P38, P57, P58, P59, P60, P61 } NodeP14 { P12, P13, P15, P16, P35, P36, P37, P38, P39, P58, P59, P60, P61, P62 } NodeP15 { P13, P14, P16, P17, P36, P37, P38, P39, P40, P59, P60, P61, P62, P63 } NodeP16 { P14, P15, P17, P18, P37, P38, P39, P40, P41, P60, P61, P62, P63, P64 } NodeP17 { P15, P16, P18, P19, P38, P39, P40, P41, P42, P61, P62, P63, P64, P65 } NodeP18 { P16, P17, P19, P20, P39, P40, P41, P42, P43, P62, P63, P64, P65, P66 } NodeP19 { P17, P18, P20, P21, P40, P41, P42, P43, P44, P63, P64, P65, P66, P67 } NodeP20 { P18, P19, P21, P22, P41, P42, P43, P44, P45, P64, P65, P66, P67, P68 } NodeP21 { P19, P20, P22, P23, P42, P43, P44, P45, P46, P65, P66, P67, P68, P69 } NodeP22 { P20, P21, P23, P43, P44, P45, P46, P66, P67, P68, P69 } NodeP23 { P21, P22, P44, P45, P46, P67, P68, P69 } NodeP24 { P1, P2, P3, P25, P26, P47, P48, P49, P70, P71, P72 } NodeP25 { P1, P2, P3, P4, P24, P26, P27, P47, P48, P49, P50, P70, P71, P72, P73 } NodeP26 { P1, P2, P3, P4, P5, P24, P25, P27, P28, P47, P48, P49, P50, P51, P70, P71, P72, P73, P74 } NodeP27 { P2, P3, P4, P5, P6, P25, P26, P28, P29, P48, P49, P50, P51, P52, P71, P72, P73, P74, P75 } NodeP28 { P3, P4, P5, P6, P7, P26, P27, P29, P30, P49, P50, P51, P52, P53, P72, P73, P74, P75, P76 } NodeP29 { P4, P5, P6, P7, P8, P27, P28, P30, P31, P50, P51, P52, P53, P54, P73, P74, P75, P76, P77 } NodeP30 { P5, P6, P7, P8, P9, P28, P29, P31, P32, P51, P52, P53, P54, P55, P74, P75, P76, P77, P78 } NodeP31 { P6, P7, P8, P9, P10, P29, P30, P32, P33, P52, P53, P54, P55, P56, P75, P76, P77, P78, P79 } NodeP32 { P7, P8, P9, P10, P11, P30, P31, P33, P34, P53, P54, P55, P56, P57, P76, P77, P78, P79, P80 } NodeP33 { P8, P9, P10, P11, P12, P31, P32, P34, P35, P54, P55, P56, P57, P58, P77, P78, P79, P80, P81 } NodeP34 { P9, P10, P11, P12, P13, P32, P33, P35, P36, P55, P56, P57, P58, P59, P78, P79, P80, P81, P82 } NodeP35 { P10, P11, P12, P13, P14, P33, P34, P36, P37, P56, P57, P58, P59, P60, P79, P80, P81, P82, P83 } NodeP36 { P11, P12, P13, P14, P15, P34, P35, P37, P38, P57, P58, P59, P60, P61, P80, P81, P82, P83, P84 } NodeP37 { P12, P13, P14, P15, P16, P35, P36, P38, P39, P58, P59, P60, P61, P62, P81, P82, P83, P84, P85 } NodeP38 { P13, P14, P15, P16, P17, P36, P37, P39, P40, P59, P60, P61, P62, P63, P82, P83, P84, P85, P86 } NodeP39 { P14, P15, P16, P17, P18, P37, P38, P40, P41, P60, P61, P62, P63, P64, P83, P84, P85, P86, P87 } NodeP40 { P15, P16, P17, P18, P19, P38, P39, P41, P42, P61, P62, P63, P64, P65, P84, P85, P86, P87, P88 } NodeP41 { P16, P17, P18, P19, P20, P39, P40, P42, P43, P62, P63, P64, P65, P66, P85, P86, P87, P88, P89 } NodeP42 { P17, P18, P19, P20, P21, P40, P41, P43, P44, P63, P64, P65, P66, P67, P86, P87, P88, P89, P90 } NodeP43 { P18, P19, P20, P21, P22, P41, P42, P44, P45, P64, P65, P66, P67, P68, P87, P88, P89, P90, P91 } NodeP44 { P19, P20, P21, P22, P23, P42, P43, P45, P46, P65, P66, P67, P68, P69, P88, P89, P90, P91, P92 } NodeP45 { P20, P21, P22, P23, P43, P44, P46, P66, P67, P68, P69, P89, P90, P91, P92 } NodeP46 { P21, P22, P23, P44, P45, P67, P68, P69, P90, P91, P92 } NodeP47 { P1, P2, P3, P24, P25, P26, P48, P49, P70, P71, P72, P93, P94, P95 } NodeP48 { P1, P2, P3, P4, P24, P25, P26, P27, P47, P49, P50, P70, P71, P72, P73, P93, P94, P95, P96 } NodeP49 { P1, P2, P3, P4, P5, P24, P25, P26, P27, P28, P47, P48, P50, P51, P70, P71, P72, P73, P74, P93, P94, P95, P96, P97 } NodeP50 { P2, P3, P4, P5, P6, P25, P26, P27, P28, P29, P48, P49, P51, P52, P71, P72, P73, P74, P75, P94, P95, P96, P97, P98 } NodeP51 { P3, P4, P5, P6, P7, P26, P27, P28, P29, P30, P49, P50, P52, P53, P72, P73, P74, P75, P76, P95, P96, P97, P98, P99 } NodeP52 { P4, P5, P6, P7, P8, P27, P28, P29, P30, P31, P50, P51, P53, P54, P73, P74, P75, P76, P77, P96, P97, P98, P99, P100 } NodeP53 { P5, P6, P7, P8, P9, P28, P29, P30, P31, P32, P51, P52, P54, P55, P74, P75, P76, P77, P78, P97, P98, P99, P100, P101 } NodeP54 { P6, P7, P8, P9, P10, P29, P30, P31, P32, P33, P52, P53, P55, P56, P75, P76, P77, P78, P79, P98, P99, P100, P101, P102 } NodeP55 { P7, P8, P9, P10, P11, P30, P31, P32, P33, P34, P53, P54, P56, P57, P76, P77, P78, P79, P80, P99, P100, P101, P102, P103 } NodeP56 { P8, P9, P10, P11, P12, P31, P32, P33, P34, P35, P54, P55, P57, P58, P77, P78, P79, P80, P81, P100, P101, P102, P103, P104 } NodeP57 { P9, P10, P11, P12, P13, P32, P33, P34, P35, P36, P55, P56, P58, P59, P78, P79, P80, P81, P82, P101, P102, P103, P104, P105 } NodeP58 { P10, P11, P12, P13, P14, P33, P34, P35, P36, P37, P56, P57, P59, P60, P79, P80, P81, P82, P83, P102, P103, P104, P105, P106 } NodeP59 { P11, P12, P13, P14, P15, P34, P35, P36, P37, P38, P57, P58, P60, P61, P80, P81, P82, P83, P84, P103, P104, P105, P106, P107 } NodeP60 { P12, P13, P14, P15, P16, P35, P36, P37, P38, P39, P58, P59, P61, P62, P81, P82, P83, P84, P85, P104, P105, P106, P107, P108 } NodeP61 { P13, P14, P15, P16, P17, P36, P37, P38, P39, P40, P59, P60, P62, P63, P82, P83, P84, P85, P86, P105, P106, P107, P108, P109 } NodeP62 { P14, P15, P16, P17, P18, P37, P38, P39, P40, P41, P60, P61, P63, P64, P83, P84, P85, P86, P87, P106, P107, P108, P109, P110 } NodeP63 { P15, P16, P17, P18, P19, P38, P39, P40, P41, P42, P61, P62, P64, P65, P84, P85, P86, P87, P88, P107, P108, P109, P110, P111 } NodeP64 { P16, P17, P18, P19, P20, P39, P40, P41, P42, P43, P62, P63, P65, P66, P85, P86, P87, P88, P89, P108, P109, P110, P111, P112 } NodeP65 { P17, P18, P19, P20, P21, P40, P41, P42, P43, P44, P63, P64, P66, P67, P86, P87, P88, P89, P90, P109, P110, P111, P112, P113 } NodeP66 { P18, P19, P20, P21, P22, P41, P42, P43, P44, P45, P64, P65, P67, P68, P87, P88, P89, P90, P91, P110, P111, P112, P113, P114 } NodeP67 { P19, P20, P21, P22, P23, P42, P43, P44, P45, P46, P65, P66, P68, P69, P88, P89, P90, P91, P92, P111, P112, P113, P114, P115 } NodeP68 { P20, P21, P22, P23, P43, P44, P45, P46, P66, P67, P69, P89, P90, P91, P92, P112, P113, P114, P115 } NodeP69 { P21, P22, P23, P44, P45, P46, P67, P68, P90, P91, P92, P113, P114, P115 } NodeP70 { P24, P25, P26, P47, P48, P49, P71, P72, P93, P94, P95, P116, P117, P118 } NodeP71 { P24, P25, P26, P27, P47, P48, P49, P50, P70, P72, P73, P93, P94, P95, P96, P116, P117, P118, P119 } NodeP72 { P24, P25, P26, P27, P28, P47, P48, P49, P50, P51, P70, P71, P73, P74, P93, P94, P95, P96, P97, P116, P117, P118, P119, P120 } NodeP73 { P25, P26, P27, P28, P29, P48, P49, P50, P51, P52, P71, P72, P74, P75, P94, P95, P96, P97, P98, P117, P118, P119, P120, P121 } NodeP74 { P26, P27, P28, P29, P30, P49, P50, P51, P52, P53, P72, P73, P75, P76, P95, P96, P97, P98, P99, P118, P119, P120, P121, P122 } NodeP75 { P27, P28, P29, P30, P31, P50, P51, P52, P53, P54, P73, P74, P76, P77, P96, P97, P98, P99, P100, P119, P120, P121, P122, P123 } NodeP76 { P28, P29, P30, P31, P32, P51, P52, P53, P54, P55, P74, P75, P77, P78, P97, P98, P99, P100, P101, P120, P121, P122, P123, P124 } NodeP77 { P29, P30, P31, P32, P33, P52, P53, P54, P55, P56, P75, P76, P78, P79, P98, P99, P100, P101, P102, P121, P122, P123, P124, P125 } NodeP78 { P30, P31, P32, P33, P34, P53, P54, P55, P56, P57, P76, P77, P79, P80, P99, P100, P101, P102, P103, P122, P123, P124, P125, P126 } NodeP79 { P31, P32, P33, P34, P35, P54, P55, P56, P57, P58, P77, P78, P80, P81, P100, P101, P102, P103, P104, P123, P124, P125, P126, P127 } NodeP80 { P32, P33, P34, P35, P36, P55, P56, P57, P58, P59, P78, P79, P81, P82, P101, P102, P103, P104, P105, P124, P125, P126, P127, P128 } NodeP81 { P33, P34, P35, P36, P37, P56, P57, P58, P59, P60, P79, P80, P82, P83, P102, P103, P104, P105, P106, P125, P126, P127, P128, P129 } NodeP82 { P34, P35, P36, P37, P38, P57, P58, P59, P60, P61, P80, P81, P83, P84, P103, P104, P105, P106, P107, P126, P127, P128, P129, P130 } NodeP83 { P35, P36, P37, P38, P39, P58, P59, P60, P61, P62, P81, P82, P84, P85, P104, P105, P106, P107, P108, P127, P128, P129, P130, P131 } NodeP84 { P36, P37, P38, P39, P40, P59, P60, P61, P62, P63, P82, P83, P85, P86, P105, P106, P107, P108, P109, P128, P129, P130, P131, P132 } NodeP85 { P37, P38, P39, P40, P41, P60, P61, P62, P63, P64, P83, P84, P86, P87, P106, P107, P108, P109, P110, P129, P130, P131, P132, P133 } NodeP86 { P38, P39, P40, P41, P42, P61, P62, P63, P64, P65, P84, P85, P87, P88, P107, P108, P109, P110, P111, P130, P131, P132, P133, P134 } NodeP87 { P39, P40, P41, P42, P43, P62, P63, P64, P65, P66, P85, P86, P88, P89, P108, P109, P110, P111, P112, P131, P132, P133, P134, P135 } NodeP88 { P40, P41, P42, P43, P44, P63, P64, P65, P66, P67, P86, P87, P89, P90, P109, P110, P111, P112, P113, P132, P133, P134, P135, P136 } NodeP89 { P41, P42, P43, P44, P45, P64, P65, P66, P67, P68, P87, P88, P90, P91, P110, P111, P112, P113, P114, P133, P134, P135, P136, P137 } NodeP90 { P42, P43, P44, P45, P46, P65, P66, P67, P68, P69, P88, P89, P91, P92, P111, P112, P113, P114, P115, P134, P135, P136, P137, P138 } NodeP91 { P43, P44, P45, P46, P66, P67, P68, P69, P89, P90, P92, P112, P113, P114, P115, P135, P136, P137, P138 } NodeP92 { P44, P45, P46, P67, P68, P69, P90, P91, P113, P114, P115, P136, P137, P138 } NodeP93 { P47, P48, P49, P70, P71, P72, P94, P95, P116, P117, P118, P139, P140, P141 } NodeP94 { P47, P48, P49, P50, P70, P71, P72, P73, P93, P95, P96, P116, P117, P118, P119, P139, P140, P141, P142 } NodeP95 { P47, P48, P49, P50, P51, P70, P71, P72, P73, P74, P93, P94, P96, P97, P116, P117, P118, P119, P120, P139, P140, P141, P142, P143 } NodeP96 { P48, P49, P50, P51, P52, P71, P72, P73, P74, P75, P94, P95, P97, P98, P117, P118, P119, P120, P121, P140, P141, P142, P143, P144 } NodeP97 { P49, P50, P51, P52, P53, P72, P73, P74, P75, P76, P95, P96, P98, P99, P118, P119, P120, P121, P122, P141, P142, P143, P144, P145 } NodeP98 { P50, P51, P52, P53, P54, P73, P74, P75, P76, P77, P96, P97, P99, P100, P119, P120, P121, P122, P123, P142, P143, P144, P145, P146 } NodeP99 { P51, P52, P53, P54, P55, P74, P75, P76, P77, P78, P97, P98, P100, P101, P120, P121, P122, P123, P124, P143, P144, P145, P146, P147 } NodeP100 { P52, P53, P54, P55, P56, P75, P76, P77, P78, P79, P98, P99, P101, P102, P121, P122, P123, P124, P125, P144, P145, P146, P147, P148 } NodeP101 { P53, P54, P55, P56, P57, P76, P77, P78, P79, P80, P99, P100, P102, P103, P122, P123, P124, P125, P126, P145, P146, P147, P148, P149 } NodeP102 { P54, P55, P56, P57, P58, P77, P78, P79, P80, P81, P100, P101, P103, P104, P123, P124, P125, P126, P127, P146, P147, P148, P149, P150 } NodeP103 { P55, P56, P57, P58, P59, P78, P79, P80, P81, P82, P101, P102, P104, P105, P124, P125, P126, P127, P128, P147, P148, P149, P150, P151 } NodeP104 { P56, P57, P58, P59, P60, P79, P80, P81, P82, P83, P102, P103, P105, P106, P125, P126, P127, P128, P129, P148, P149, P150, P151, P152 } NodeP105 { P57, P58, P59, P60, P61, P80, P81, P82, P83, P84, P103, P104, P106, P107, P126, P127, P128, P129, P130, P149, P150, P151, P152, P153 } NodeP106 { P58, P59, P60, P61, P62, P81, P82, P83, P84, P85, P104, P105, P107, P108, P127, P128, P129, P130, P131, P150, P151, P152, P153, P154 } NodeP107 { P59, P60, P61, P62, P63, P82, P83, P84, P85, P86, P105, P106, P108, P109, P128, P129, P130, P131, P132, P151, P152, P153, P154, P155 } NodeP108 { P60, P61, P62, P63, P64, P83, P84, P85, P86, P87, P106, P107, P109, P110, P129, P130, P131, P132, P133, P152, P153, P154, P155, P156 } NodeP109 { P61, P62, P63, P64, P65, P84, P85, P86, P87, P88, P107, P108, P110, P111, P130, P131, P132, P133, P134, P153, P154, P155, P156, P157 } NodeP110 { P62, P63, P64, P65, P66, P85, P86, P87, P88, P89, P108, P109, P111, P112, P131, P132, P133, P134, P135, P154, P155, P156, P157, P158 } NodeP111 { P63, P64, P65, P66, P67, P86, P87, P88, P89, P90, P109, P110, P112, P113, P132, P133, P134, P135, P136, P155, P156, P157, P158, P159 } NodeP112 { P64, P65, P66, P67, P68, P87, P88, P89, P90, P91, P110, P111, P113, P114, P133, P134, P135, P136, P137, P156, P157, P158, P159, P160 } NodeP113 { P65, P66, P67, P68, P69, P88, P89, P90, P91, P92, P111, P112, P114, P115, P134, P135, P136, P137, P138, P157, P158, P159, P160, P161 } NodeP114 { P66, P67, P68, P69, P89, P90, P91, P92, P112, P113, P115, P135, P136, P137, P138, P158, P159, P160, P161 } NodeP115 { P67, P68, P69, P90, P91, P92, P113, P114, P136, P137, P138, P159, P160, P161 } NodeP116 { P70, P71, P72, P93, P94, P95, P117, P118, P139, P140, P141, P162, P163, P164 } NodeP117 { P70, P71, P72, P73, P93, P94, P95, P96, P116, P118, P119, P139, P140, P141, P142, P162, P163, P164, P165 } NodeP118 { P70, P71, P72, P73, P74, P93, P94, P95, P96, P97, P116, P117, P119, P120, P139, P140, P141, P142, P143, P162, P163, P164, P165, P166 } NodeP119 { P71, P72, P73, P74, P75, P94, P95, P96, P97, P98, P117, P118, P120, P121, P140, P141, P142, P143, P144, P163, P164, P165, P166, P167 } NodeP120 { P72, P73, P74, P75, P76, P95, P96, P97, P98, P99, P118, P119, P121, P122, P141, P142, P143, P144, P145, P164, P165, P166, P167, P168 } NodeP121 { P73, P74, P75, P76, P77, P96, P97, P98, P99, P100, P119, P120, P122, P123, P142, P143, P144, P145, P146, P165, P166, P167, P168, P169 } NodeP122 { P74, P75, P76, P77, P78, P97, P98, P99, P100, P101, P120, P121, P123, P124, P143, P144, P145, P146, P147, P166, P167, P168, P169, P170 } NodeP123 { P75, P76, P77, P78, P79, P98, P99, P100, P101, P102, P121, P122, P124, P125, P144, P145, P146, P147, P148, P167, P168, P169, P170, P171 } NodeP124 { P76, P77, P78, P79, P80, P99, P100, P101, P102, P103, P122, P123, P125, P126, P145, P146, P147, P148, P149, P168, P169, P170, P171, P172 } NodeP125 { P77, P78, P79, P80, P81, P100, P101, P102, P103, P104, P123, P124, P126, P127, P146, P147, P148, P149, P150, P169, P170, P171, P172, P173 } NodeP126 { P78, P79, P80, P81, P82, P101, P102, P103, P104, P105, P124, P125, P127, P128, P147, P148, P149, P150, P151, P170, P171, P172, P173, P174 } NodeP127 { P79, P80, P81, P82, P83, P102, P103, P104, P105, P106, P125, P126, P128, P129, P148, P149, P150, P151, P152, P171, P172, P173, P174, P175 } NodeP128 { P80, P81, P82, P83, P84, P103, P104, P105, P106, P107, P126, P127, P129, P130, P149, P150, P151, P152, P153, P172, P173, P174, P175, P176 } NodeP129 { P81, P82, P83, P84, P85, P104, P105, P106, P107, P108, P127, P128, P130, P131, P150, P151, P152, P153, P154, P173, P174, P175, P176, P177 } NodeP130 { P82, P83, P84, P85, P86, P105, P106, P107, P108, P109, P128, P129, P131, P132, P151, P152, P153, P154, P155, P174, P175, P176, P177, P178 } NodeP131 { P83, P84, P85, P86, P87, P106, P107, P108, P109, P110, P129, P130, P132, P133, P152, P153, P154, P155, P156, P175, P176, P177, P178, P179 } NodeP132 { P84, P85, P86, P87, P88, P107, P108, P109, P110, P111, P130, P131, P133, P134, P153, P154, P155, P156, P157, P176, P177, P178, P179, P180 } NodeP133 { P85, P86, P87, P88, P89, P108, P109, P110, P111, P112, P131, P132, P134, P135, P154, P155, P156, P157, P158, P177, P178, P179, P180, P181 } NodeP134 { P86, P87, P88, P89, P90, P109, P110, P111, P112, P113, P132, P133, P135, P136, P155, P156, P157, P158, P159, P178, P179, P180, P181, P182 } NodeP135 { P87, P88, P89, P90, P91, P110, P111, P112, P113, P114, P133, P134, P136, P137, P156, P157, P158, P159, P160, P179, P180, P181, P182, P183 } NodeP136 { P88, P89, P90, P91, P92, P111, P112, P113, P114, P115, P134, P135, P137, P138, P157, P158, P159, P160, P161, P180, P181, P182, P183, P184 } NodeP137 { P89, P90, P91, P92, P112, P113, P114, P115, P135, P136, P138, P158, P159, P160, P161, P181, P182, P183, P184 } NodeP138 { P90, P91, P92, P113, P114, P115, P136, P137, P159, P160, P161, P182, P183, P184 } NodeP139 { P93, P94, P95, P116, P117, P118, P140, P141, P162, P163, P164, P185, P186, P187 } NodeP140 { P93, P94, P95, P96, P116, P117, P118, P119, P139, P141, P142, P162, P163, P164, P165, P185, P186, P187, P188 } NodeP141 { P93, P94, P95, P96, P97, P116, P117, P118, P119, P120, P139, P140, P142, P143, P162, P163, P164, P165, P166, P185, P186, P187, P188, P189 } NodeP142 { P94, P95, P96, P97, P98, P117, P118, P119, P120, P121, P140, P141, P143, P144, P163, P164, P165, P166, P167, P186, P187, P188, P189, P190 } NodeP143 { P95, P96, P97, P98, P99, P118, P119, P120, P121, P122, P141, P142, P144, P145, P164, P165, P166, P167, P168, P187, P188, P189, P190, P191 } NodeP144 { P96, P97, P98, P99, P100, P119, P120, P121, P122, P123, P142, P143, P145, P146, P165, P166, P167, P168, P169, P188, P189, P190, P191, P192 } NodeP145 { P97, P98, P99, P100, P101, P120, P121, P122, P123, P124, P143, P144, P146, P147, P166, P167, P168, P169, P170, P189, P190, P191, P192, P193 } NodeP146 { P98, P99, P100, P101, P102, P121, P122, P123, P124, P125, P144, P145, P147, P148, P167, P168, P169, P170, P171, P190, P191, P192, P193, P194 } NodeP147 { P99, P100, P101, P102, P103, P122, P123, P124, P125, P126, P145, P146, P148, P149, P168, P169, P170, P171, P172, P191, P192, P193, P194, P195 } NodeP148 { P100, P101, P102, P103, P104, P123, P124, P125, P126, P127, P146, P147, P149, P150, P169, P170, P171, P172, P173, P192, P193, P194, P195, P196 } NodeP149 { P101, P102, P103, P104, P105, P124, P125, P126, P127, P128, P147, P148, P150, P151, P170, P171, P172, P173, P174, P193, P194, P195, P196, P197 } NodeP150 { P102, P103, P104, P105, P106, P125, P126, P127, P128, P129, P148, P149, P151, P152, P171, P172, P173, P174, P175, P194, P195, P196, P197, P198 } NodeP151 { P103, P104, P105, P106, P107, P126, P127, P128, P129, P130, P149, P150, P152, P153, P172, P173, P174, P175, P176, P195, P196, P197, P198, P199 } NodeP152 { P104, P105, P106, P107, P108, P127, P128, P129, P130, P131, P150, P151, P153, P154, P173, P174, P175, P176, P177, P196, P197, P198, P199, P200 } NodeP153 { P105, P106, P107, P108, P109, P128, P129, P130, P131, P132, P151, P152, P154, P155, P174, P175, P176, P177, P178, P197, P198, P199, P200, P201 } NodeP154 { P106, P107, P108, P109, P110, P129, P130, P131, P132, P133, P152, P153, P155, P156, P175, P176, P177, P178, P179, P198, P199, P200, P201, P202 } NodeP155 { P107, P108, P109, P110, P111, P130, P131, P132, P133, P134, P153, P154, P156, P157, P176, P177, P178, P179, P180, P199, P200, P201, P202, P203 } NodeP156 { P108, P109, P110, P111, P112, P131, P132, P133, P134, P135, P154, P155, P157, P158, P177, P178, P179, P180, P181, P200, P201, P202, P203, P204 } NodeP157 { P109, P110, P111, P112, P113, P132, P133, P134, P135, P136, P155, P156, P158, P159, P178, P179, P180, P181, P182, P201, P202, P203, P204, P205 } NodeP158 { P110, P111, P112, P113, P114, P133, P134, P135, P136, P137, P156, P157, P159, P160, P179, P180, P181, P182, P183, P202, P203, P204, P205, P206 } NodeP159 { P111, P112, P113, P114, P115, P134, P135, P136, P137, P138, P157, P158, P160, P161, P180, P181, P182, P183, P184, P203, P204, P205, P206, P207 } NodeP160 { P112, P113, P114, P115, P135, P136, P137, P138, P158, P159, P161, P181, P182, P183, P184, P204, P205, P206, P207 } NodeP161 { P113, P114, P115, P136, P137, P138, P159, P160, P182, P183, P184, P205, P206, P207 } NodeP162 { P116, P117, P118, P139, P140, P141, P163, P164, P185, P186, P187, P208, P209, P210 } NodeP163 { P116, P117, P118, P119, P139, P140, P141, P142, P162, P164, P165, P185, P186, P187, P188, P208, P209, P210, P211 } NodeP164 { P116, P117, P118, P119, P120, P139, P140, P141, P142, P143, P162, P163, P165, P166, P185, P186, P187, P188, P189, P208, P209, P210, P211, P212 } NodeP165 { P117, P118, P119, P120, P121, P140, P141, P142, P143, P144, P163, P164, P166, P167, P186, P187, P188, P189, P190, P209, P210, P211, P212, P213 } NodeP166 { P118, P119, P120, P121, P122, P141, P142, P143, P144, P145, P164, P165, P167, P168, P187, P188, P189, P190, P191, P210, P211, P212, P213, P214 } NodeP167 { P119, P120, P121, P122, P123, P142, P143, P144, P145, P146, P165, P166, P168, P169, P188, P189, P190, P191, P192, P211, P212, P213, P214, P215 } NodeP168 { P120, P121, P122, P123, P124, P143, P144, P145, P146, P147, P166, P167, P169, P170, P189, P190, P191, P192, P193, P212, P213, P214, P215, P216 } NodeP169 { P121, P122, P123, P124, P125, P144, P145, P146, P147, P148, P167, P168, P170, P171, P190, P191, P192, P193, P194, P213, P214, P215, P216, P217 } NodeP170 { P122, P123, P124, P125, P126, P145, P146, P147, P148, P149, P168, P169, P171, P172, P191, P192, P193, P194, P195, P214, P215, P216, P217, P218 } NodeP171 { P123, P124, P125, P126, P127, P146, P147, P148, P149, P150, P169, P170, P172, P173, P192, P193, P194, P195, P196, P215, P216, P217, P218, P219 } NodeP172 { P124, P125, P126, P127, P128, P147, P148, P149, P150, P151, P170, P171, P173, P174, P193, P194, P195, P196, P197, P216, P217, P218, P219, P220 } NodeP173 { P125, P126, P127, P128, P129, P148, P149, P150, P151, P152, P171, P172, P174, P175, P194, P195, P196, P197, P198, P217, P218, P219, P220, P221 } NodeP174 { P126, P127, P128, P129, P130, P149, P150, P151, P152, P153, P172, P173, P175, P176, P195, P196, P197, P198, P199, P218, P219, P220, P221, P222 } NodeP175 { P127, P128, P129, P130, P131, P150, P151, P152, P153, P154, P173, P174, P176, P177, P196, P197, P198, P199, P200, P219, P220, P221, P222, P223 } NodeP176 { P128, P129, P130, P131, P132, P151, P152, P153, P154, P155, P174, P175, P177, P178, P197, P198, P199, P200, P201, P220, P221, P222, P223, P224 } NodeP177 { P129, P130, P131, P132, P133, P152, P153, P154, P155, P156, P175, P176, P178, P179, P198, P199, P200, P201, P202, P221, P222, P223, P224, P225 } NodeP178 { P130, P131, P132, P133, P134, P153, P154, P155, P156, P157, P176, P177, P179, P180, P199, P200, P201, P202, P203, P222, P223, P224, P225, P226 } NodeP179 { P131, P132, P133, P134, P135, P154, P155, P156, P157, P158, P177, P178, P180, P181, P200, P201, P202, P203, P204, P223, P224, P225, P226, P227 } NodeP180 { P132, P133, P134, P135, P136, P155, P156, P157, P158, P159, P178, P179, P181, P182, P201, P202, P203, P204, P205, P224, P225, P226, P227, P228 } NodeP181 { P133, P134, P135, P136, P137, P156, P157, P158, P159, P160, P179, P180, P182, P183, P202, P203, P204, P205, P206, P225, P226, P227, P228, P229 } NodeP182 { P134, P135, P136, P137, P138, P157, P158, P159, P160, P161, P180, P181, P183, P184, P203, P204, P205, P206, P207, P226, P227, P228, P229, P230 } NodeP183 { P135, P136, P137, P138, P158, P159, P160, P161, P181, P182, P184, P204, P205, P206, P207, P227, P228, P229, P230 } NodeP184 { P136, P137, P138, P159, P160, P161, P182, P183, P205, P206, P207, P228, P229, P230 } NodeP185 { P139, P140, P141, P162, P163, P164, P186, P187, P208, P209, P210, P231, P232, P233 } NodeP186 { P139, P140, P141, P142, P162, P163, P164, P165, P185, P187, P188, P208, P209, P210, P211, P231, P232, P233, P234 } NodeP187 { P139, P140, P141, P142, P143, P162, P163, P164, P165, P166, P185, P186, P188, P189, P208, P209, P210, P211, P212, P231, P232, P233, P234, P235 } NodeP188 { P140, P141, P142, P143, P144, P163, P164, P165, P166, P167, P186, P187, P189, P190, P209, P210, P211, P212, P213, P232, P233, P234, P235, P236 } NodeP189 { P141, P142, P143, P144, P145, P164, P165, P166, P167, P168, P187, P188, P190, P191, P210, P211, P212, P213, P214, P233, P234, P235, P236, P237 } NodeP190 { P142, P143, P144, P145, P146, P165, P166, P167, P168, P169, P188, P189, P191, P192, P211, P212, P213, P214, P215, P234, P235, P236, P237, P238 } NodeP191 { P143, P144, P145, P146, P147, P166, P167, P168, P169, P170, P189, P190, P192, P193, P212, P213, P214, P215, P216, P235, P236, P237, P238, P239 } NodeP192 { P144, P145, P146, P147, P148, P167, P168, P169, P170, P171, P190, P191, P193, P194, P213, P214, P215, P216, P217, P236, P237, P238, P239, P240 } NodeP193 { P145, P146, P147, P148, P149, P168, P169, P170, P171, P172, P191, P192, P194, P195, P214, P215, P216, P217, P218, P237, P238, P239, P240, P241 } NodeP194 { P146, P147, P148, P149, P150, P169, P170, P171, P172, P173, P192, P193, P195, P196, P215, P216, P217, P218, P219, P238, P239, P240, P241, P242 } NodeP195 { P147, P148, P149, P150, P151, P170, P171, P172, P173, P174, P193, P194, P196, P197, P216, P217, P218, P219, P220, P239, P240, P241, P242, P243 } NodeP196 { P148, P149, P150, P151, P152, P171, P172, P173, P174, P175, P194, P195, P197, P198, P217, P218, P219, P220, P221, P240, P241, P242, P243, P244 } NodeP197 { P149, P150, P151, P152, P153, P172, P173, P174, P175, P176, P195, P196, P198, P199, P218, P219, P220, P221, P222, P241, P242, P243, P244, P245 } NodeP198 { P150, P151, P152, P153, P154, P173, P174, P175, P176, P177, P196, P197, P199, P200, P219, P220, P221, P222, P223, P242, P243, P244, P245, P246 } NodeP199 { P151, P152, P153, P154, P155, P174, P175, P176, P177, P178, P197, P198, P200, P201, P220, P221, P222, P223, P224, P243, P244, P245, P246, P247 } NodeP200 { P152, P153, P154, P155, P156, P175, P176, P177, P178, P179, P198, P199, P201, P202, P221, P222, P223, P224, P225, P244, P245, P246, P247, P248 } NodeP201 { P153, P154, P155, P156, P157, P176, P177, P178, P179, P180, P199, P200, P202, P203, P222, P223, P224, P225, P226, P245, P246, P247, P248, P249 } NodeP202 { P154, P155, P156, P157, P158, P177, P178, P179, P180, P181, P200, P201, P203, P204, P223, P224, P225, P226, P227, P246, P247, P248, P249, P250 } NodeP203 { P155, P156, P157, P158, P159, P178, P179, P180, P181, P182, P201, P202, P204, P205, P224, P225, P226, P227, P228, P247, P248, P249, P250, P251 } NodeP204 { P156, P157, P158, P159, P160, P179, P180, P181, P182, P183, P202, P203, P205, P206, P225, P226, P227, P228, P229, P248, P249, P250, P251, P252 } NodeP205 { P157, P158, P159, P160, P161, P180, P181, P182, P183, P184, P203, P204, P206, P207, P226, P227, P228, P229, P230, P249, P250, P251, P252, P253 } NodeP206 { P158, P159, P160, P161, P181, P182, P183, P184, P204, P205, P207, P227, P228, P229, P230, P250, P251, P252, P253 } NodeP207 { P159, P160, P161, P182, P183, P184, P205, P206, P228, P229, P230, P251, P252, P253 } NodeP208 { P162, P163, P164, P185, P186, P187, P209, P210, P231, P232, P233, P254, P255, P256 } NodeP209 { P162, P163, P164, P165, P185, P186, P187, P188, P208, P210, P211, P231, P232, P233, P234, P254, P255, P256, P257 } NodeP210 { P162, P163, P164, P165, P166, P185, P186, P187, P188, P189, P208, P209, P211, P212, P231, P232, P233, P234, P235, P254, P255, P256, P257, P258 } NodeP211 { P163, P164, P165, P166, P167, P186, P187, P188, P189, P190, P209, P210, P212, P213, P232, P233, P234, P235, P236, P255, P256, P257, P258, P259 } NodeP212 { P164, P165, P166, P167, P168, P187, P188, P189, P190, P191, P210, P211, P213, P214, P233, P234, P235, P236, P237, P256, P257, P258, P259, P260 } NodeP213 { P165, P166, P167, P168, P169, P188, P189, P190, P191, P192, P211, P212, P214, P215, P234, P235, P236, P237, P238, P257, P258, P259, P260, P261 } NodeP214 { P166, P167, P168, P169, P170, P189, P190, P191, P192, P193, P212, P213, P215, P216, P235, P236, P237, P238, P239, P258, P259, P260, P261, P262 } NodeP215 { P167, P168, P169, P170, P171, P190, P191, P192, P193, P194, P213, P214, P216, P217, P236, P237, P238, P239, P240, P259, P260, P261, P262, P263 } NodeP216 { P168, P169, P170, P171, P172, P191, P192, P193, P194, P195, P214, P215, P217, P218, P237, P238, P239, P240, P241, P260, P261, P262, P263, P264 } NodeP217 { P169, P170, P171, P172, P173, P192, P193, P194, P195, P196, P215, P216, P218, P219, P238, P239, P240, P241, P242, P261, P262, P263, P264, P265 } NodeP218 { P170, P171, P172, P173, P174, P193, P194, P195, P196, P197, P216, P217, P219, P220, P239, P240, P241, P242, P243, P262, P263, P264, P265, P266 } NodeP219 { P171, P172, P173, P174, P175, P194, P195, P196, P197, P198, P217, P218, P220, P221, P240, P241, P242, P243, P244, P263, P264, P265, P266, P267 } NodeP220 { P172, P173, P174, P175, P176, P195, P196, P197, P198, P199, P218, P219, P221, P222, P241, P242, P243, P244, P245, P264, P265, P266, P267, P268 } NodeP221 { P173, P174, P175, P176, P177, P196, P197, P198, P199, P200, P219, P220, P222, P223, P242, P243, P244, P245, P246, P265, P266, P267, P268, P269 } NodeP222 { P174, P175, P176, P177, P178, P197, P198, P199, P200, P201, P220, P221, P223, P224, P243, P244, P245, P246, P247, P266, P267, P268, P269, P270 } NodeP223 { P175, P176, P177, P178, P179, P198, P199, P200, P201, P202, P221, P222, P224, P225, P244, P245, P246, P247, P248, P267, P268, P269, P270, P271 } NodeP224 { P176, P177, P178, P179, P180, P199, P200, P201, P202, P203, P222, P223, P225, P226, P245, P246, P247, P248, P249, P268, P269, P270, P271, P272 } NodeP225 { P177, P178, P179, P180, P181, P200, P201, P202, P203, P204, P223, P224, P226, P227, P246, P247, P248, P249, P250, P269, P270, P271, P272, P273 } NodeP226 { P178, P179, P180, P181, P182, P201, P202, P203, P204, P205, P224, P225, P227, P228, P247, P248, P249, P250, P251, P270, P271, P272, P273, P274 } NodeP227 { P179, P180, P181, P182, P183, P202, P203, P204, P205, P206, P225, P226, P228, P229, P248, P249, P250, P251, P252, P271, P272, P273, P274, P275 } NodeP228 { P180, P181, P182, P183, P184, P203, P204, P205, P206, P207, P226, P227, P229, P230, P249, P250, P251, P252, P253, P272, P273, P274, P275, P276 } NodeP229 { P181, P182, P183, P184, P204, P205, P206, P207, P227, P228, P230, P250, P251, P252, P253, P273, P274, P275, P276 } NodeP230 { P182, P183, P184, P205, P206, P207, P228, P229, P251, P252, P253, P274, P275, P276 } NodeP231 { P185, P186, P187, P208, P209, P210, P232, P233, P254, P255, P256, P277, P278, P279 } NodeP232 { P185, P186, P187, P188, P208, P209, P210, P211, P231, P233, P234, P254, P255, P256, P257, P277, P278, P279, P280 } NodeP233 { P185, P186, P187, P188, P189, P208, P209, P210, P211, P212, P231, P232, P234, P235, P254, P255, P256, P257, P258, P277, P278, P279, P280, P281 } NodeP234 { P186, P187, P188, P189, P190, P209, P210, P211, P212, P213, P232, P233, P235, P236, P255, P256, P257, P258, P259, P278, P279, P280, P281, P282 } NodeP235 { P187, P188, P189, P190, P191, P210, P211, P212, P213, P214, P233, P234, P236, P237, P256, P257, P258, P259, P260, P279, P280, P281, P282, P283 } NodeP236 { P188, P189, P190, P191, P192, P211, P212, P213, P214, P215, P234, P235, P237, P238, P257, P258, P259, P260, P261, P280, P281, P282, P283, P284 } NodeP237 { P189, P190, P191, P192, P193, P212, P213, P214, P215, P216, P235, P236, P238, P239, P258, P259, P260, P261, P262, P281, P282, P283, P284, P285 } NodeP238 { P190, P191, P192, P193, P194, P213, P214, P215, P216, P217, P236, P237, P239, P240, P259, P260, P261, P262, P263, P282, P283, P284, P285, P286 } NodeP239 { P191, P192, P193, P194, P195, P214, P215, P216, P217, P218, P237, P238, P240, P241, P260, P261, P262, P263, P264, P283, P284, P285, P286, P287 } NodeP240 { P192, P193, P194, P195, P196, P215, P216, P217, P218, P219, P238, P239, P241, P242, P261, P262, P263, P264, P265, P284, P285, P286, P287, P288 } NodeP241 { P193, P194, P195, P196, P197, P216, P217, P218, P219, P220, P239, P240, P242, P243, P262, P263, P264, P265, P266, P285, P286, P287, P288, P289 } NodeP242 { P194, P195, P196, P197, P198, P217, P218, P219, P220, P221, P240, P241, P243, P244, P263, P264, P265, P266, P267, P286, P287, P288, P289, P290 } NodeP243 { P195, P196, P197, P198, P199, P218, P219, P220, P221, P222, P241, P242, P244, P245, P264, P265, P266, P267, P268, P287, P288, P289, P290, P291 } NodeP244 { P196, P197, P198, P199, P200, P219, P220, P221, P222, P223, P242, P243, P245, P246, P265, P266, P267, P268, P269, P288, P289, P290, P291, P292 } NodeP245 { P197, P198, P199, P200, P201, P220, P221, P222, P223, P224, P243, P244, P246, P247, P266, P267, P268, P269, P270, P289, P290, P291, P292, P293 } NodeP246 { P198, P199, P200, P201, P202, P221, P222, P223, P224, P225, P244, P245, P247, P248, P267, P268, P269, P270, P271, P290, P291, P292, P293, P294 } NodeP247 { P199, P200, P201, P202, P203, P222, P223, P224, P225, P226, P245, P246, P248, P249, P268, P269, P270, P271, P272, P291, P292, P293, P294, P295 } NodeP248 { P200, P201, P202, P203, P204, P223, P224, P225, P226, P227, P246, P247, P249, P250, P269, P270, P271, P272, P273, P292, P293, P294, P295, P296 } NodeP249 { P201, P202, P203, P204, P205, P224, P225, P226, P227, P228, P247, P248, P250, P251, P270, P271, P272, P273, P274, P293, P294, P295, P296, P297 } NodeP250 { P202, P203, P204, P205, P206, P225, P226, P227, P228, P229, P248, P249, P251, P252, P271, P272, P273, P274, P275, P294, P295, P296, P297, P298 } NodeP251 { P203, P204, P205, P206, P207, P226, P227, P228, P229, P230, P249, P250, P252, P253, P272, P273, P274, P275, P276, P295, P296, P297, P298, P299 } NodeP252 { P204, P205, P206, P207, P227, P228, P229, P230, P250, P251, P253, P273, P274, P275, P276, P296, P297, P298, P299 } NodeP253 { P205, P206, P207, P228, P229, P230, P251, P252, P274, P275, P276, P297, P298, P299 } NodeP254 { P208, P209, P210, P231, P232, P233, P255, P256, P277, P278, P279, P300, P301, P302 } NodeP255 { P208, P209, P210, P211, P231, P232, P233, P234, P254, P256, P257, P277, P278, P279, P280, P300, P301, P302, P303 } NodeP256 { P208, P209, P210, P211, P212, P231, P232, P233, P234, P235, P254, P255, P257, P258, P277, P278, P279, P280, P281, P300, P301, P302, P303, P304 } NodeP257 { P209, P210, P211, P212, P213, P232, P233, P234, P235, P236, P255, P256, P258, P259, P278, P279, P280, P281, P282, P301, P302, P303, P304, P305 } NodeP258 { P210, P211, P212, P213, P214, P233, P234, P235, P236, P237, P256, P257, P259, P260, P279, P280, P281, P282, P283, P302, P303, P304, P305, P306 } NodeP259 { P211, P212, P213, P214, P215, P234, P235, P236, P237, P238, P257, P258, P260, P261, P280, P281, P282, P283, P284, P303, P304, P305, P306, P307 } NodeP260 { P212, P213, P214, P215, P216, P235, P236, P237, P238, P239, P258, P259, P261, P262, P281, P282, P283, P284, P285, P304, P305, P306, P307, P308 } NodeP261 { P213, P214, P215, P216, P217, P236, P237, P238, P239, P240, P259, P260, P262, P263, P282, P283, P284, P285, P286, P305, P306, P307, P308, P309 } NodeP262 { P214, P215, P216, P217, P218, P237, P238, P239, P240, P241, P260, P261, P263, P264, P283, P284, P285, P286, P287, P306, P307, P308, P309, P310 } NodeP263 { P215, P216, P217, P218, P219, P238, P239, P240, P241, P242, P261, P262, P264, P265, P284, P285, P286, P287, P288, P307, P308, P309, P310, P311 } NodeP264 { P216, P217, P218, P219, P220, P239, P240, P241, P242, P243, P262, P263, P265, P266, P285, P286, P287, P288, P289, P308, P309, P310, P311, P312 } NodeP265 { P217, P218, P219, P220, P221, P240, P241, P242, P243, P244, P263, P264, P266, P267, P286, P287, P288, P289, P290, P309, P310, P311, P312, P313 } NodeP266 { P218, P219, P220, P221, P222, P241, P242, P243, P244, P245, P264, P265, P267, P268, P287, P288, P289, P290, P291, P310, P311, P312, P313, P314 } NodeP267 { P219, P220, P221, P222, P223, P242, P243, P244, P245, P246, P265, P266, P268, P269, P288, P289, P290, P291, P292, P311, P312, P313, P314, P315 } NodeP268 { P220, P221, P222, P223, P224, P243, P244, P245, P246, P247, P266, P267, P269, P270, P289, P290, P291, P292, P293, P312, P313, P314, P315, P316 } NodeP269 { P221, P222, P223, P224, P225, P244, P245, P246, P247, P248, P267, P268, P270, P271, P290, P291, P292, P293, P294, P313, P314, P315, P316, P317 } NodeP270 { P222, P223, P224, P225, P226, P245, P246, P247, P248, P249, P268, P269, P271, P272, P291, P292, P293, P294, P295, P314, P315, P316, P317, P318 } NodeP271 { P223, P224, P225, P226, P227, P246, P247, P248, P249, P250, P269, P270, P272, P273, P292, P293, P294, P295, P296, P315, P316, P317, P318, P319 } NodeP272 { P224, P225, P226, P227, P228, P247, P248, P249, P250, P251, P270, P271, P273, P274, P293, P294, P295, P296, P297, P316, P317, P318, P319, P320 } NodeP273 { P225, P226, P227, P228, P229, P248, P249, P250, P251, P252, P271, P272, P274, P275, P294, P295, P296, P297, P298, P317, P318, P319, P320, P321 } NodeP274 { P226, P227, P228, P229, P230, P249, P250, P251, P252, P253, P272, P273, P275, P276, P295, P296, P297, P298, P299, P318, P319, P320, P321, P322 } NodeP275 { P227, P228, P229, P230, P250, P251, P252, P253, P273, P274, P276, P296, P297, P298, P299, P319, P320, P321, P322 } NodeP276 { P228, P229, P230, P251, P252, P253, P274, P275, P297, P298, P299, P320, P321, P322 } NodeP277 { P231, P232, P233, P254, P255, P256, P278, P279, P300, P301, P302, P323, P324, P325 } NodeP278 { P231, P232, P233, P234, P254, P255, P256, P257, P277, P279, P280, P300, P301, P302, P303, P323, P324, P325, P326 } NodeP279 { P231, P232, P233, P234, P235, P254, P255, P256, P257, P258, P277, P278, P280, P281, P300, P301, P302, P303, P304, P323, P324, P325, P326, P327 } NodeP280 { P232, P233, P234, P235, P236, P255, P256, P257, P258, P259, P278, P279, P281, P282, P301, P302, P303, P304, P305, P324, P325, P326, P327, P328 } NodeP281 { P233, P234, P235, P236, P237, P256, P257, P258, P259, P260, P279, P280, P282, P283, P302, P303, P304, P305, P306, P325, P326, P327, P328, P329 } NodeP282 { P234, P235, P236, P237, P238, P257, P258, P259, P260, P261, P280, P281, P283, P284, P303, P304, P305, P306, P307, P326, P327, P328, P329, P330 } NodeP283 { P235, P236, P237, P238, P239, P258, P259, P260, P261, P262, P281, P282, P284, P285, P304, P305, P306, P307, P308, P327, P328, P329, P330, P331 } NodeP284 { P236, P237, P238, P239, P240, P259, P260, P261, P262, P263, P282, P283, P285, P286, P305, P306, P307, P308, P309, P328, P329, P330, P331, P332 } NodeP285 { P237, P238, P239, P240, P241, P260, P261, P262, P263, P264, P283, P284, P286, P287, P306, P307, P308, P309, P310, P329, P330, P331, P332, P333 } NodeP286 { P238, P239, P240, P241, P242, P261, P262, P263, P264, P265, P284, P285, P287, P288, P307, P308, P309, P310, P311, P330, P331, P332, P333, P334 } NodeP287 { P239, P240, P241, P242, P243, P262, P263, P264, P265, P266, P285, P286, P288, P289, P308, P309, P310, P311, P312, P331, P332, P333, P334, P335 } NodeP288 { P240, P241, P242, P243, P244, P263, P264, P265, P266, P267, P286, P287, P289, P290, P309, P310, P311, P312, P313, P332, P333, P334, P335, P336 } NodeP289 { P241, P242, P243, P244, P245, P264, P265, P266, P267, P268, P287, P288, P290, P291, P310, P311, P312, P313, P314, P333, P334, P335, P336, P337 } NodeP290 { P242, P243, P244, P245, P246, P265, P266, P267, P268, P269, P288, P289, P291, P292, P311, P312, P313, P314, P315, P334, P335, P336, P337, P338 } NodeP291 { P243, P244, P245, P246, P247, P266, P267, P268, P269, P270, P289, P290, P292, P293, P312, P313, P314, P315, P316, P335, P336, P337, P338, P339 } NodeP292 { P244, P245, P246, P247, P248, P267, P268, P269, P270, P271, P290, P291, P293, P294, P313, P314, P315, P316, P317, P336, P337, P338, P339, P340 } NodeP293 { P245, P246, P247, P248, P249, P268, P269, P270, P271, P272, P291, P292, P294, P295, P314, P315, P316, P317, P318, P337, P338, P339, P340, P341 } NodeP294 { P246, P247, P248, P249, P250, P269, P270, P271, P272, P273, P292, P293, P295, P296, P315, P316, P317, P318, P319, P338, P339, P340, P341, P342 } NodeP295 { P247, P248, P249, P250, P251, P270, P271, P272, P273, P274, P293, P294, P296, P297, P316, P317, P318, P319, P320, P339, P340, P341, P342, P343 } NodeP296 { P248, P249, P250, P251, P252, P271, P272, P273, P274, P275, P294, P295, P297, P298, P317, P318, P319, P320, P321, P340, P341, P342, P343, P344 } NodeP297 { P249, P250, P251, P252, P253, P272, P273, P274, P275, P276, P295, P296, P298, P299, P318, P319, P320, P321, P322, P341, P342, P343, P344, P345 } NodeP298 { P250, P251, P252, P253, P273, P274, P275, P276, P296, P297, P299, P319, P320, P321, P322, P342, P343, P344, P345 } NodeP299 { P251, P252, P253, P274, P275, P276, P297, P298, P320, P321, P322, P343, P344, P345 } NodeP300 { P254, P255, P256, P277, P278, P279, P301, P302, P323, P324, P325, P346, P347, P348 } NodeP301 { P254, P255, P256, P257, P277, P278, P279, P280, P300, P302, P303, P323, P324, P325, P326, P346, P347, P348, P349 } NodeP302 { P254, P255, P256, P257, P258, P277, P278, P279, P280, P281, P300, P301, P303, P304, P323, P324, P325, P326, P327, P346, P347, P348, P349, P350 } NodeP303 { P255, P256, P257, P258, P259, P278, P279, P280, P281, P282, P301, P302, P304, P305, P324, P325, P326, P327, P328, P347, P348, P349, P350, P351 } NodeP304 { P256, P257, P258, P259, P260, P279, P280, P281, P282, P283, P302, P303, P305, P306, P325, P326, P327, P328, P329, P348, P349, P350, P351, P352 } NodeP305 { P257, P258, P259, P260, P261, P280, P281, P282, P283, P284, P303, P304, P306, P307, P326, P327, P328, P329, P330, P349, P350, P351, P352, P353 } NodeP306 { P258, P259, P260, P261, P262, P281, P282, P283, P284, P285, P304, P305, P307, P308, P327, P328, P329, P330, P331, P350, P351, P352, P353, P354 } NodeP307 { P259, P260, P261, P262, P263, P282, P283, P284, P285, P286, P305, P306, P308, P309, P328, P329, P330, P331, P332, P351, P352, P353, P354, P355 } NodeP308 { P260, P261, P262, P263, P264, P283, P284, P285, P286, P287, P306, P307, P309, P310, P329, P330, P331, P332, P333, P352, P353, P354, P355, P356 } NodeP309 { P261, P262, P263, P264, P265, P284, P285, P286, P287, P288, P307, P308, P310, P311, P330, P331, P332, P333, P334, P353, P354, P355, P356, P357 } NodeP310 { P262, P263, P264, P265, P266, P285, P286, P287, P288, P289, P308, P309, P311, P312, P331, P332, P333, P334, P335, P354, P355, P356, P357, P358 } NodeP311 { P263, P264, P265, P266, P267, P286, P287, P288, P289, P290, P309, P310, P312, P313, P332, P333, P334, P335, P336, P355, P356, P357, P358, P359 } NodeP312 { P264, P265, P266, P267, P268, P287, P288, P289, P290, P291, P310, P311, P313, P314, P333, P334, P335, P336, P337, P356, P357, P358, P359, P360 } NodeP313 { P265, P266, P267, P268, P269, P288, P289, P290, P291, P292, P311, P312, P314, P315, P334, P335, P336, P337, P338, P357, P358, P359, P360, P361 } NodeP314 { P266, P267, P268, P269, P270, P289, P290, P291, P292, P293, P312, P313, P315, P316, P335, P336, P337, P338, P339, P358, P359, P360, P361, P362 } NodeP315 { P267, P268, P269, P270, P271, P290, P291, P292, P293, P294, P313, P314, P316, P317, P336, P337, P338, P339, P340, P359, P360, P361, P362, P363 } NodeP316 { P268, P269, P270, P271, P272, P291, P292, P293, P294, P295, P314, P315, P317, P318, P337, P338, P339, P340, P341, P360, P361, P362, P363, P364 } NodeP317 { P269, P270, P271, P272, P273, P292, P293, P294, P295, P296, P315, P316, P318, P319, P338, P339, P340, P341, P342, P361, P362, P363, P364, P365 } NodeP318 { P270, P271, P272, P273, P274, P293, P294, P295, P296, P297, P316, P317, P319, P320, P339, P340, P341, P342, P343, P362, P363, P364, P365, P366 } NodeP319 { P271, P272, P273, P274, P275, P294, P295, P296, P297, P298, P317, P318, P320, P321, P340, P341, P342, P343, P344, P363, P364, P365, P366, P367 } NodeP320 { P272, P273, P274, P275, P276, P295, P296, P297, P298, P299, P318, P319, P321, P322, P341, P342, P343, P344, P345, P364, P365, P366, P367, P368 } NodeP321 { P273, P274, P275, P276, P296, P297, P298, P299, P319, P320, P322, P342, P343, P344, P345, P365, P366, P367, P368 } NodeP322 { P274, P275, P276, P297, P298, P299, P320, P321, P343, P344, P345, P366, P367, P368 } NodeP323 { P277, P278, P279, P300, P301, P302, P324, P325, P346, P347, P348, P369, P370, P371 } NodeP324 { P277, P278, P279, P280, P300, P301, P302, P303, P323, P325, P326, P346, P347, P348, P349, P369, P370, P371, P372 } NodeP325 { P277, P278, P279, P280, P281, P300, P301, P302, P303, P304, P323, P324, P326, P327, P346, P347, P348, P349, P350, P369, P370, P371, P372, P373 } NodeP326 { P278, P279, P280, P281, P282, P301, P302, P303, P304, P305, P324, P325, P327, P328, P347, P348, P349, P350, P351, P370, P371, P372, P373, P374 } NodeP327 { P279, P280, P281, P282, P283, P302, P303, P304, P305, P306, P325, P326, P328, P329, P348, P349, P350, P351, P352, P371, P372, P373, P374, P375 } NodeP328 { P280, P281, P282, P283, P284, P303, P304, P305, P306, P307, P326, P327, P329, P330, P349, P350, P351, P352, P353, P372, P373, P374, P375, P376 } NodeP329 { P281, P282, P283, P284, P285, P304, P305, P306, P307, P308, P327, P328, P330, P331, P350, P351, P352, P353, P354, P373, P374, P375, P376, P377 } NodeP330 { P282, P283, P284, P285, P286, P305, P306, P307, P308, P309, P328, P329, P331, P332, P351, P352, P353, P354, P355, P374, P375, P376, P377, P378 } NodeP331 { P283, P284, P285, P286, P287, P306, P307, P308, P309, P310, P329, P330, P332, P333, P352, P353, P354, P355, P356, P375, P376, P377, P378, P379 } NodeP332 { P284, P285, P286, P287, P288, P307, P308, P309, P310, P311, P330, P331, P333, P334, P353, P354, P355, P356, P357, P376, P377, P378, P379, P380 } NodeP333 { P285, P286, P287, P288, P289, P308, P309, P310, P311, P312, P331, P332, P334, P335, P354, P355, P356, P357, P358, P377, P378, P379, P380, P381 } NodeP334 { P286, P287, P288, P289, P290, P309, P310, P311, P312, P313, P332, P333, P335, P336, P355, P356, P357, P358, P359, P378, P379, P380, P381, P382 } NodeP335 { P287, P288, P289, P290, P291, P310, P311, P312, P313, P314, P333, P334, P336, P337, P356, P357, P358, P359, P360, P379, P380, P381, P382, P383 } NodeP336 { P288, P289, P290, P291, P292, P311, P312, P313, P314, P315, P334, P335, P337, P338, P357, P358, P359, P360, P361, P380, P381, P382, P383, P384 } NodeP337 { P289, P290, P291, P292, P293, P312, P313, P314, P315, P316, P335, P336, P338, P339, P358, P359, P360, P361, P362, P381, P382, P383, P384, P385 } NodeP338 { P290, P291, P292, P293, P294, P313, P314, P315, P316, P317, P336, P337, P339, P340, P359, P360, P361, P362, P363, P382, P383, P384, P385, P386 } NodeP339 { P291, P292, P293, P294, P295, P314, P315, P316, P317, P318, P337, P338, P340, P341, P360, P361, P362, P363, P364, P383, P384, P385, P386, P387 } NodeP340 { P292, P293, P294, P295, P296, P315, P316, P317, P318, P319, P338, P339, P341, P342, P361, P362, P363, P364, P365, P384, P385, P386, P387, P388 } NodeP341 { P293, P294, P295, P296, P297, P316, P317, P318, P319, P320, P339, P340, P342, P343, P362, P363, P364, P365, P366, P385, P386, P387, P388, P389 } NodeP342 { P294, P295, P296, P297, P298, P317, P318, P319, P320, P321, P340, P341, P343, P344, P363, P364, P365, P366, P367, P386, P387, P388, P389, P390 } NodeP343 { P295, P296, P297, P298, P299, P318, P319, P320, P321, P322, P341, P342, P344, P345, P364, P365, P366, P367, P368, P387, P388, P389, P390, P391 } NodeP344 { P296, P297, P298, P299, P319, P320, P321, P322, P342, P343, P345, P365, P366, P367, P368, P388, P389, P390, P391 } NodeP345 { P297, P298, P299, P320, P321, P322, P343, P344, P366, P367, P368, P389, P390, P391 } NodeP346 { P300, P301, P302, P323, P324, P325, P347, P348, P369, P370, P371 } NodeP347 { P300, P301, P302, P303, P323, P324, P325, P326, P346, P348, P349, P369, P370, P371, P372 } NodeP348 { P300, P301, P302, P303, P304, P323, P324, P325, P326, P327, P346, P347, P349, P350, P369, P370, P371, P372, P373 } NodeP349 { P301, P302, P303, P304, P305, P324, P325, P326, P327, P328, P347, P348, P350, P351, P370, P371, P372, P373, P374 } NodeP350 { P302, P303, P304, P305, P306, P325, P326, P327, P328, P329, P348, P349, P351, P352, P371, P372, P373, P374, P375 } NodeP351 { P303, P304, P305, P306, P307, P326, P327, P328, P329, P330, P349, P350, P352, P353, P372, P373, P374, P375, P376 } NodeP352 { P304, P305, P306, P307, P308, P327, P328, P329, P330, P331, P350, P351, P353, P354, P373, P374, P375, P376, P377 } NodeP353 { P305, P306, P307, P308, P309, P328, P329, P330, P331, P332, P351, P352, P354, P355, P374, P375, P376, P377, P378 } NodeP354 { P306, P307, P308, P309, P310, P329, P330, P331, P332, P333, P352, P353, P355, P356, P375, P376, P377, P378, P379 } NodeP355 { P307, P308, P309, P310, P311, P330, P331, P332, P333, P334, P353, P354, P356, P357, P376, P377, P378, P379, P380 } NodeP356 { P308, P309, P310, P311, P312, P331, P332, P333, P334, P335, P354, P355, P357, P358, P377, P378, P379, P380, P381 } NodeP357 { P309, P310, P311, P312, P313, P332, P333, P334, P335, P336, P355, P356, P358, P359, P378, P379, P380, P381, P382 } NodeP358 { P310, P311, P312, P313, P314, P333, P334, P335, P336, P337, P356, P357, P359, P360, P379, P380, P381, P382, P383 } NodeP359 { P311, P312, P313, P314, P315, P334, P335, P336, P337, P338, P357, P358, P360, P361, P380, P381, P382, P383, P384 } NodeP360 { P312, P313, P314, P315, P316, P335, P336, P337, P338, P339, P358, P359, P361, P362, P381, P382, P383, P384, P385 } NodeP361 { P313, P314, P315, P316, P317, P336, P337, P338, P339, P340, P359, P360, P362, P363, P382, P383, P384, P385, P386 } NodeP362 { P314, P315, P316, P317, P318, P337, P338, P339, P340, P341, P360, P361, P363, P364, P383, P384, P385, P386, P387 } NodeP363 { P315, P316, P317, P318, P319, P338, P339, P340, P341, P342, P361, P362, P364, P365, P384, P385, P386, P387, P388 } NodeP364 { P316, P317, P318, P319, P320, P339, P340, P341, P342, P343, P362, P363, P365, P366, P385, P386, P387, P388, P389 } NodeP365 { P317, P318, P319, P320, P321, P340, P341, P342, P343, P344, P363, P364, P366, P367, P386, P387, P388, P389, P390 } NodeP366 { P318, P319, P320, P321, P322, P341, P342, P343, P344, P345, P364, P365, P367, P368, P387, P388, P389, P390, P391 } NodeP367 { P319, P320, P321, P322, P342, P343, P344, P345, P365, P366, P368, P388, P389, P390, P391 } NodeP368 { P320, P321, P322, P343, P344, P345, P366, P367, P389, P390, P391 } NodeP369 { P323, P324, P325, P346, P347, P348, P370, P371 } NodeP370 { P323, P324, P325, P326, P346, P347, P348, P349, P369, P371, P372 } NodeP371 { P323, P324, P325, P326, P327, P346, P347, P348, P349, P350, P369, P370, P372, P373 } NodeP372 { P324, P325, P326, P327, P328, P347, P348, P349, P350, P351, P370, P371, P373, P374 } NodeP373 { P325, P326, P327, P328, P329, P348, P349, P350, P351, P352, P371, P372, P374, P375 } NodeP374 { P326, P327, P328, P329, P330, P349, P350, P351, P352, P353, P372, P373, P375, P376 } NodeP375 { P327, P328, P329, P330, P331, P350, P351, P352, P353, P354, P373, P374, P376, P377 } NodeP376 { P328, P329, P330, P331, P332, P351, P352, P353, P354, P355, P374, P375, P377, P378 } NodeP377 { P329, P330, P331, P332, P333, P352, P353, P354, P355, P356, P375, P376, P378, P379 } NodeP378 { P330, P331, P332, P333, P334, P353, P354, P355, P356, P357, P376, P377, P379, P380 } NodeP379 { P331, P332, P333, P334, P335, P354, P355, P356, P357, P358, P377, P378, P380, P381 } NodeP380 { P332, P333, P334, P335, P336, P355, P356, P357, P358, P359, P378, P379, P381, P382 } NodeP381 { P333, P334, P335, P336, P337, P356, P357, P358, P359, P360, P379, P380, P382, P383 } NodeP382 { P334, P335, P336, P337, P338, P357, P358, P359, P360, P361, P380, P381, P383, P384 } NodeP383 { P335, P336, P337, P338, P339, P358, P359, P360, P361, P362, P381, P382, P384, P385 } NodeP384 { P336, P337, P338, P339, P340, P359, P360, P361, P362, P363, P382, P383, P385, P386 } NodeP385 { P337, P338, P339, P340, P341, P360, P361, P362, P363, P364, P383, P384, P386, P387 } NodeP386 { P338, P339, P340, P341, P342, P361, P362, P363, P364, P365, P384, P385, P387, P388 } NodeP387 { P339, P340, P341, P342, P343, P362, P363, P364, P365, P366, P385, P386, P388, P389 } NodeP388 { P340, P341, P342, P343, P344, P363, P364, P365, P366, P367, P386, P387, P389, P390 } NodeP389 { P341, P342, P343, P344, P345, P364, P365, P366, P367, P368, P387, P388, P390, P391 } NodeP390 { P342, P343, P344, P345, P365, P366, P367, P368, P388, P389, P391 } NodeP391 { P343, P344, P345, P366, P367, P368, P389, P390 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange640Points40">genRange640Points40messages none  defined. P1 { P3, P8, P19, P20, P29, P37, P40 } NodeP2 { P13, P15, P27, P33, P35, P38 } NodeP3 { P1, P8, P20, P29, P40 } NodeP4 { P5, P6, P10, P14, P21, P25, P26, P32, P36 } NodeP5 { P4, P6, P14, P17, P21, P24, P25, P26, P32, P36 } NodeP6 { P4, P5, P10, P11, P14, P18, P21, P23, P25, P32, P36 } NodeP8 { P1, P3, P9, P19, P20, P22, P29, P37, P40 } NodeP9 { P8, P16, P19, P22, P37, P38, P39 } NodeP10 { P4, P6, P11, P14, P18, P21, P23, P25, P32, P36 } NodeP11 { P6, P10, P12, P18, P23, P25, P32 } NodeP12 { P11 } NodeP13 { P2, P15, P16, P27, P30, P35, P38, P39 } NodeP14 { P4, P5, P6, P10, P17, P21, P24, P25, P26, P32, P36 } NodeP15 { P2, P13, P16, P27, P33, P35, P38 } NodeP16 { P9, P13, P15, P19, P22, P27, P35, P37, P38, P39 } NodeP17 { P5, P14, P24, P36 } NodeP18 { P6, P10, P11, P23, P25, P32, P36 } NodeP19 { P1, P8, P9, P16, P20, P29, P37, P38, P39, P40 } NodeP20 { P1, P3, P8, P19, P29, P37, P40 } NodeP21 { P4, P5, P6, P10, P14, P25, P26, P32, P36 } NodeP22 { P8, P9, P16, P37, P39 } NodeP23 { P6, P10, P11, P18, P25, P32, P36 } NodeP24 { P5, P14, P17, P26 } NodeP25 { P4, P5, P6, P10, P11, P14, P18, P21, P23, P32, P36 } NodeP26 { P4, P5, P14, P21, P24 } NodeP27 { P2, P13, P15, P16, P30, P33, P35, P38 } NodeP28 { P30, P31, P34 } NodeP29 { P1, P3, P8, P19, P20, P40 } NodeP30 { P13, P27, P28, P31, P34, P35, P38 } NodeP31 { P28, P30, P34 } NodeP32 { P4, P5, P6, P10, P11, P14, P18, P21, P23, P25, P36 } NodeP33 { P2, P15, P27, P35 } NodeP34 { P28, P30, P31 } NodeP35 { P2, P13, P15, P16, P27, P30, P33, P38, P39 } NodeP36 { P4, P5, P6, P10, P14, P17, P18, P21, P23, P25, P32 } NodeP37 { P1, P8, P9, P16, P19, P20, P22, P38, P39, P40 } NodeP38 { P2, P9, P13, P15, P16, P19, P27, P30, P35, P37, P39 } NodeP39 { P9, P13, P16, P19, P22, P35, P37, P38 } NodeP40 { P1, P3, P8, P19, P20, P29, P37 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange10Points100">genRange10Points100messages none  defined. P4 { P50 } Node (89 @ 516) (10)P50 { P4 } Node (87 @ 510) (10)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="someTestNetwork">someTestNetworkmessages none  defined. P1 { P2, P3 } Node (1184481 @ 1010694) (173)P2 { P1 } Node (1184629 @ 1010689) (173)P3 { P1 } Node (1184488 @ 1010844) (173)P5 { P7 } Node (1184541 @ 1011016) (173)P6 { P8 } Node (1184764 @ 1011028) (173)P7 { P5, P8 } Node (1184625 @ 1011152) (173)P8 { P6, P7 } Node (1184750 @ 1011145) (173)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange640Points60">genRange640Points60messages none  defined. P1 { P13, P15, P16, P21, P25, P27, P40, P44, P51, P55, P57 } NodeP2 { P9, P10, P14, P22, P23, P32, P33, P37, P42, P59 } NodeP3 { P6, P46, P50 } NodeP4 { P17, P24, P26, P29, P31, P34, P35, P38, P43, P49, P53, P58 } NodeP5 { P7, P8, P19, P41, P47, P48 } NodeP6 { P3, P27, P50, P54, P55 } NodeP7 { P5, P8, P11, P12, P19, P28, P30, P41, P46, P47, P48, P52, P56, P60 } NodeP8 { P5, P7, P11, P12, P19, P30, P41, P47, P48, P56 } NodeP9 { P2, P22, P23, P32, P37, P42, P53, P59 } NodeP10 { P2, P14, P22, P23, P33, P37, P59 } NodeP11 { P7, P8, P12, P19, P30, P36, P46, P48, P52, P56 } NodeP12 { P7, P8, P11, P19, P28, P30, P36, P46, P48, P52, P56, P60 } NodeP13 { P1, P15, P16, P21, P25, P27, P40, P42, P51, P55, P57 } NodeP14 { P2, P10, P22, P33, P37, P59 } NodeP15 { P1, P13, P16, P21, P25, P40, P42, P44, P51, P55, P57 } NodeP16 { P1, P13, P15, P21, P25, P27, P40, P42, P51, P55, P57 } NodeP17 { P4, P24, P29, P43 } NodeP18 { P22, P32 } NodeP19 { P5, P7, P8, P11, P12, P28, P30, P41, P47, P48, P56 } NodeP20 { P26, P28, P31, P34, P41, P44, P49, P52, P53, P58, P60 } NodeP21 { P1, P13, P15, P16, P25, P27, P40, P42, P55, P57 } NodeP22 { P2, P9, P10, P14, P18, P32, P33, P37, P59 } NodeP23 { P2, P9, P10, P37, P42, P59 } NodeP24 { P4, P17, P26, P29, P31, P34, P35, P38, P43, P49, P53, P58 } NodeP25 { P1, P13, P15, P16, P21, P27, P40, P42, P51, P55, P57 } NodeP26 { P4, P20, P24, P31, P34, P43, P49, P53, P58 } NodeP27 { P1, P6, P13, P16, P21, P25, P45, P50, P54, P55, P57 } NodeP28 { P7, P12, P19, P20, P30, P41, P46, P47, P48, P52, P60 } NodeP29 { P4, P17, P24, P38 } NodeP30 { P7, P8, P11, P12, P19, P28, P36, P46, P48, P52, P56, P60 } NodeP31 { P4, P20, P24, P26, P34, P43, P49, P53, P58 } NodeP32 { P2, P9, P18, P22, P33, P37, P59 } NodeP33 { P2, P10, P14, P22, P32, P37, P59 } NodeP34 { P4, P20, P24, P26, P31, P35, P38, P39, P41, P43, P47, P49, P58 } NodeP35 { P4, P24, P34, P38, P39, P41, P47, P58 } NodeP36 { P11, P12, P30, P46, P56 } NodeP37 { P2, P9, P10, P14, P22, P23, P32, P33, P59 } NodeP38 { P4, P24, P29, P34, P35, P39, P41, P43, P47, P58 } NodeP39 { P34, P35, P38, P41, P47, P58 } NodeP40 { P1, P13, P15, P16, P21, P25, P42, P51, P55, P57 } NodeP41 { P5, P7, P8, P19, P20, P28, P34, P35, P38, P39, P47, P48, P52, P58, P60 } NodeP42 { P2, P9, P13, P15, P16, P21, P23, P25, P40, P59 } NodeP43 { P4, P17, P24, P26, P31, P34, P38, P49, P53, P58 } NodeP44 { P1, P15, P20, P51, P52, P60 } NodeP45 { P27, P50, P54, P55, P57 } NodeP46 { P3, P7, P11, P12, P28, P30, P36, P52, P56, P60 } NodeP47 { P5, P7, P8, P19, P28, P34, P35, P38, P39, P41, P48, P58, P60 } NodeP48 { P5, P7, P8, P11, P12, P19, P28, P30, P41, P47, P52, P56, P60 } NodeP49 { P4, P20, P24, P26, P31, P34, P43, P53, P58 } NodeP50 { P3, P6, P27, P45, P54, P55 } NodeP51 { P1, P13, P15, P16, P25, P40, P44, P55, P57 } NodeP52 { P7, P11, P12, P20, P28, P30, P41, P44, P46, P48, P60 } NodeP53 { P4, P9, P20, P24, P26, P31, P43, P49 } NodeP54 { P6, P27, P45, P50, P55 } NodeP55 { P1, P6, P13, P15, P16, P21, P25, P27, P40, P45, P50, P51, P54, P57 } NodeP56 { P7, P8, P11, P12, P19, P30, P36, P46, P48 } NodeP57 { P1, P13, P15, P16, P21, P25, P27, P40, P45, P51, P55 } NodeP58 { P4, P20, P24, P26, P31, P34, P35, P38, P39, P41, P43, P47, P49 } NodeP59 { P2, P9, P10, P14, P22, P23, P32, P33, P37, P42 } NodeP60 { P7, P12, P20, P28, P30, P41, P44, P46, P47, P48, P52 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange1000Points100">genRange1000Points100messages none  defined. P1 { P6, P7, P18, P22, P23, P29, P34, P36, P48, P53, P54, P63, P71, P78, P80, P81, P87, P91, P92, P93, P94 } NodeP2 { P14, P24, P30, P39, P41, P42, P47, P57, P65, P70, P74, P85, P86, P98 } NodeP3 { P11, P25, P49, P50, P52, P59, P75, P82, P97 } NodeP4 { P14, P15, P27, P28, P30, P32, P41, P45, P60, P67, P77, P79, P86, P96 } NodeP5 { P31, P51, P72, P99, P100 } NodeP6 { P1, P7, P16, P18, P22, P23, P29, P34, P36, P37, P46, P54, P63, P71, P78, P80, P81, P84, P87, P91, P92, P93, P94 } NodeP7 { P1, P6, P10, P18, P23, P33, P34, P37, P43, P48, P53, P54, P55, P65, P71, P78, P91, P92, P94 } NodeP8 { P13, P15, P17, P19, P26, P28, P44, P45, P62, P66, P67, P69, P73, P77, P79, P83, P88, P89, P96 } NodeP9 { P12, P20, P35, P49, P61, P64, P68, P76, P84, P95 } NodeP10 { P7, P16, P18, P33, P37, P46, P55, P58, P78, P92, P94 } NodeP11 { P3, P25, P52, P59, P75, P82, P90, P97 } NodeP12 { P9, P40, P49, P50, P52, P61, P64, P75, P95, P97 } NodeP13 { P8, P17, P19, P22, P25, P26, P35, P40, P44, P50, P59, P61, P63, P66, P69, P73, P81, P83, P87, P97 } NodeP14 { P2, P4, P15, P28, P30, P32, P39, P41, P45, P57, P65, P67, P77, P79, P85, P86, P88, P96 } NodeP15 { P4, P8, P14, P19, P21, P28, P30, P32, P41, P44, P45, P62, P67, P69, P73, P77, P79, P86, P88, P89, P96 } NodeP16 { P6, P10, P18, P33, P36, P37, P46, P58, P78, P93, P94 } NodeP17 { P8, P13, P19, P26, P40, P44, P50, P56, P59, P66, P69, P73, P81, P83, P88, P89 } NodeP18 { P1, P6, P7, P10, P16, P23, P29, P34, P36, P37, P43, P48, P53, P54, P55, P71, P78, P80, P91, P92, P93, P94 } NodeP19 { P8, P13, P15, P17, P21, P26, P28, P44, P45, P56, P62, P66, P69, P73, P77, P79, P88, P89 } NodeP20 { P9, P22, P29, P35, P36, P46, P61, P63, P68, P76, P81, P84, P87, P93, P95 } NodeP21 { P15, P19, P26, P38, P44, P45, P51, P56, P60, P62, P69, P72, P73, P77, P89, P99, P100 } NodeP22 { P1, P6, P13, P20, P29, P35, P36, P40, P50, P54, P61, P63, P68, P80, P81, P83, P84, P87, P93, P95 } NodeP23 { P1, P6, P7, P18, P34, P37, P43, P48, P53, P54, P55, P65, P71, P78, P80, P85, P91, P92, P94 } NodeP24 { P2, P39, P42, P47, P57, P70, P74, P85, P98 } NodeP25 { P3, P11, P13, P40, P50, P52, P59, P75, P82, P90, P97 } NodeP26 { P8, P13, P17, P19, P21, P44, P56, P62, P66, P69, P72, P73, P83, P88, P89 } NodeP27 { P4, P32, P38, P45, P60, P77, P86, P100 } NodeP28 { P4, P8, P14, P15, P19, P30, P32, P41, P44, P45, P62, P67, P69, P73, P77, P79, P88, P96 } NodeP29 { P1, P6, P18, P20, P22, P35, P36, P46, P54, P61, P63, P80, P81, P83, P84, P87, P91, P93, P94 } NodeP30 { P2, P4, P14, P15, P28, P32, P39, P41, P45, P57, P65, P67, P77, P79, P85, P86, P88, P96 } NodeP31 { P5, P38, P51, P72, P99, P100 } NodeP32 { P4, P14, P15, P27, P28, P30, P41, P45, P60, P67, P77, P79, P86, P88, P96 } NodeP33 { P7, P10, P16, P37, P46, P55, P58, P78, P92, P94 } NodeP34 { P1, P6, P7, P18, P23, P39, P41, P43, P48, P53, P54, P55, P65, P67, P71, P79, P85, P88, P91, P92, P94, P96, P98 } NodeP35 { P9, P13, P20, P22, P29, P36, P40, P49, P50, P61, P63, P68, P76, P80, P81, P83, P84, P87, P93, P95 } NodeP36 { P1, P6, P16, P18, P20, P22, P29, P35, P37, P46, P54, P63, P68, P76, P80, P81, P84, P87, P91, P93, P94, P95 } NodeP37 { P6, P7, P10, P16, P18, P23, P33, P36, P46, P54, P55, P58, P78, P92, P93, P94 } NodeP38 { P21, P27, P31, P51, P60, P62, P100 } NodeP39 { P2, P14, P24, P30, P34, P41, P42, P47, P48, P53, P57, P65, P67, P70, P74, P85, P96, P98 } NodeP40 { P12, P13, P17, P22, P25, P35, P49, P50, P59, P61, P63, P66, P81, P83, P87, P95, P97 } NodeP41 { P2, P4, P14, P15, P28, P30, P32, P34, P39, P45, P48, P57, P65, P67, P77, P79, P85, P86, P88, P96 } NodeP42 { P2, P24, P39, P43, P47, P53, P57, P65, P70, P74, P85, P98 } NodeP43 { P7, P18, P23, P34, P42, P48, P53, P54, P55, P65, P71, P78, P85, P91, P92, P94, P98 } NodeP44 { P8, P13, P15, P17, P19, P21, P26, P28, P45, P56, P62, P66, P69, P73, P77, P83, P88, P89 } NodeP45 { P4, P8, P14, P15, P19, P21, P27, P28, P30, P32, P41, P44, P60, P62, P67, P69, P73, P77, P79, P86, P88, P89, P96 } NodeP46 { P6, P10, P16, P20, P29, P33, P36, P37, P58, P78, P84, P93, P94 } NodeP47 { P2, P24, P39, P42, P57, P70, P74, P98 } NodeP48 { P1, P7, P18, P23, P34, P39, P41, P43, P53, P54, P65, P67, P71, P79, P85, P88, P91, P92, P94, P96, P98 } NodeP49 { P3, P9, P12, P35, P40, P50, P52, P61, P63, P64, P75, P81, P82, P83, P87, P95, P97 } NodeP50 { P3, P12, P13, P17, P22, P25, P35, P40, P49, P59, P61, P63, P66, P81, P82, P83, P87, P97 } NodeP51 { P5, P21, P31, P38, P72, P89, P99, P100 } NodeP52 { P3, P11, P12, P25, P49, P59, P75, P82, P97 } NodeP53 { P1, P7, P18, P23, P34, P39, P42, P43, P48, P54, P55, P65, P71, P78, P85, P91, P92, P94, P98 } NodeP54 { P1, P6, P7, P18, P22, P23, P29, P34, P36, P37, P43, P48, P53, P63, P71, P78, P80, P87, P91, P92, P93, P94 } NodeP55 { P7, P10, P18, P23, P33, P34, P37, P43, P53, P71, P78, P91, P92, P94 } NodeP56 { P17, P19, P21, P26, P44, P62, P66, P69, P72, P73, P89, P90, P99 } NodeP57 { P2, P14, P24, P30, P39, P41, P42, P47, P65, P70, P74, P85, P98 } NodeP58 { P10, P16, P33, P37, P46, P78 } NodeP59 { P3, P11, P13, P17, P25, P40, P50, P52, P66, P75, P82, P90, P97 } NodeP60 { P4, P21, P27, P32, P38, P45, P62, P77, P86, P100 } NodeP61 { P9, P12, P13, P20, P22, P29, P35, P40, P49, P50, P63, P64, P81, P83, P87, P95, P97 } NodeP62 { P8, P15, P19, P21, P26, P28, P38, P44, P45, P56, P60, P66, P69, P72, P73, P77, P79, P88, P89, P99, P100 } NodeP63 { P1, P6, P13, P20, P22, P29, P35, P36, P40, P49, P50, P54, P61, P68, P80, P81, P83, P84, P87, P93, P95 } NodeP64 { P9, P12, P49, P61, P75, P95, P97 } NodeP65 { P2, P7, P14, P23, P30, P34, P39, P41, P42, P43, P48, P53, P57, P67, P70, P71, P79, P85, P91, P92, P96, P98 } NodeP66 { P8, P13, P17, P19, P26, P40, P44, P50, P56, P59, P62, P69, P73, P83, P88, P89 } NodeP67 { P4, P8, P14, P15, P28, P30, P32, P34, P39, P41, P45, P48, P65, P77, P79, P85, P86, P88, P96 } NodeP68 { P9, P20, P22, P35, P36, P63, P76, P84, P87, P93, P95 } NodeP69 { P8, P13, P15, P17, P19, P21, P26, P28, P44, P45, P56, P62, P66, P73, P77, P79, P88, P89 } NodeP70 { P2, P24, P39, P42, P47, P57, P65, P74, P85, P98 } NodeP71 { P1, P6, P7, P18, P23, P34, P43, P48, P53, P54, P55, P65, P78, P80, P85, P91, P92, P94 } NodeP72 { P5, P21, P26, P31, P51, P56, P62, P73, P89, P90, P99 } NodeP73 { P8, P13, P15, P17, P19, P21, P26, P28, P44, P45, P56, P62, P66, P69, P72, P77, P79, P88, P89, P99 } NodeP74 { P2, P24, P39, P42, P47, P57, P70, P85, P98 } NodeP75 { P3, P11, P12, P25, P49, P52, P59, P64, P82, P97 } NodeP76 { P9, P20, P35, P36, P68, P84, P93, P95 } NodeP77 { P4, P8, P14, P15, P19, P21, P27, P28, P30, P32, P41, P44, P45, P60, P62, P67, P69, P73, P79, P88, P89, P96 } NodeP78 { P1, P6, P7, P10, P16, P18, P23, P33, P37, P43, P46, P53, P54, P55, P58, P71, P91, P92, P93, P94 } NodeP79 { P4, P8, P14, P15, P19, P28, P30, P32, P34, P41, P45, P48, P62, P65, P67, P69, P73, P77, P85, P88, P96 } NodeP80 { P1, P6, P18, P22, P23, P29, P35, P36, P54, P63, P71, P81, P83, P84, P87, P91, P92, P93, P94 } NodeP81 { P1, P6, P13, P17, P20, P22, P29, P35, P36, P40, P49, P50, P61, P63, P80, P83, P84, P87, P93, P95 } NodeP82 { P3, P11, P25, P49, P50, P52, P59, P75, P97 } NodeP83 { P8, P13, P17, P22, P26, P29, P35, P40, P44, P49, P50, P61, P63, P66, P80, P81, P87, P97 } NodeP84 { P6, P9, P20, P22, P29, P35, P36, P46, P63, P68, P76, P80, P81, P87, P93, P95 } NodeP85 { P2, P14, P23, P24, P30, P34, P39, P41, P42, P43, P48, P53, P57, P65, P67, P70, P71, P74, P79, P96, P98 } NodeP86 { P2, P4, P14, P15, P27, P30, P32, P41, P45, P60, P67, P96 } NodeP87 { P1, P6, P13, P20, P22, P29, P35, P36, P40, P49, P50, P54, P61, P63, P68, P80, P81, P83, P84, P93, P95 } NodeP88 { P8, P14, P15, P17, P19, P26, P28, P30, P32, P34, P41, P44, P45, P48, P62, P66, P67, P69, P73, P77, P79, P96 } NodeP89 { P8, P15, P17, P19, P21, P26, P44, P45, P51, P56, P62, P66, P69, P72, P73, P77, P99 } NodeP90 { P11, P25, P56, P59, P72, P99 } NodeP91 { P1, P6, P7, P18, P23, P29, P34, P36, P43, P48, P53, P54, P55, P65, P71, P78, P80, P92, P93, P94 } NodeP92 { P1, P6, P7, P10, P18, P23, P33, P34, P37, P43, P48, P53, P54, P55, P65, P71, P78, P80, P91, P94 } NodeP93 { P1, P6, P16, P18, P20, P22, P29, P35, P36, P37, P46, P54, P63, P68, P76, P78, P80, P81, P84, P87, P91, P94, P95 } NodeP94 { P1, P6, P7, P10, P16, P18, P23, P29, P33, P34, P36, P37, P43, P46, P48, P53, P54, P55, P71, P78, P80, P91, P92, P93 } NodeP95 { P9, P12, P20, P22, P35, P36, P40, P49, P61, P63, P64, P68, P76, P81, P84, P87, P93 } NodeP96 { P4, P8, P14, P15, P28, P30, P32, P34, P39, P41, P45, P48, P65, P67, P77, P79, P85, P86, P88 } NodeP97 { P3, P11, P12, P13, P25, P40, P49, P50, P52, P59, P61, P64, P75, P82, P83 } NodeP98 { P2, P24, P34, P39, P42, P43, P47, P48, P53, P57, P65, P70, P74, P85 } NodeP99 { P5, P21, P31, P51, P56, P62, P72, P73, P89, P90, P100 } NodeP100 { P5, P21, P27, P31, P38, P51, P60, P62, P99 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cudaSample">cudaSamplemessages none  defined. P1 { P2 P3 } NodeP2 { P3 } NodeP3 { P1 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>compiling</category><body package="DistributedModeling-samples" selector="graph1">graph1" petit réseau " messages M1 , M2 .P1 { P2, P3, P4} Pim P2 { P1, P3  } PamP3 { P1, P2  } PamP4 { P1, P2 ,P3  } Pam</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cudaTest1">cudaTest1messages none  defined. P1 { P2 } Node (511079 @ 362672) (108)P2 { P1, P18 } Node (511134 @ 362669) (108)P3 { P18, P19, P24 } Node (511247 @ 362679) (108)P4 { P19, P20 } Node (511373 @ 362673) (108)P5 { P20 } Node (511482 @ 362678) (108)P6 { P7 } Node (511484 @ 362798) (108)P7 { P6, P8 } Node (511393 @ 362802) (108)P8 { P7, P9, P24 } Node (511322 @ 362802) (108)P9 { P8, P10, P24 } Node (511220 @ 362796) (108)P10 { P9, P21, P24 } Node (511183 @ 362797) (108)P11 { P21 } Node (511017 @ 362782) (108)P12 { P22 } Node (511034 @ 362935) (108)P13 { P22, P23 } Node (511147 @ 362940) (108)P14 { P15, P23 } Node (511291 @ 362938) (108)P15 { P14, P16 } Node (511371 @ 362941) (108)P16 { P15, P17 } Node (511460 @ 362951) (108)P17 { P16 } Node (511495 @ 362953) (108)P18 { P2, P3 } Node (511196 @ 362668) (108)P19 { P3, P4, P24 } Node (511314 @ 362671) (108)P20 { P4, P5 } Node (511431 @ 362674) (108)P21 { P10, P11 } Node (511101 @ 362793) (108)P22 { P12, P13 } Node (511091 @ 362937) (108)P23 { P13, P14 } Node (511218 @ 362942) (108)P24 { P3, P8, P9, P10, P19 } Node (511275 @ 362744) (108)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange640Points50">genRange640Points50messages none  defined. P1 { P2, P10, P12, P13, P16, P17, P21, P22, P38, P40, P44, P49 } NodeP2 { P1, P10, P11, P13, P16, P17, P20, P34, P36, P50 } NodeP3 { P5, P16, P19, P30, P33, P38, P39, P40 } NodeP4 { P14, P18, P26, P30, P37, P41, P45, P47 } NodeP5 { P3, P9, P11, P16, P23, P24, P30, P33, P36, P38, P39, P50 } NodeP6 { P19 } NodeP7 { P8, P9, P11, P15, P23, P24, P25, P29, P43, P48 } NodeP8 { P7, P15, P23, P24, P25, P29, P37, P41, P43, P45 } NodeP9 { P5, P7, P11, P17, P23, P24, P25, P36, P39, P50 } NodeP10 { P1, P2, P12, P13, P17, P20, P34 } NodeP11 { P2, P5, P7, P9, P16, P17, P23, P24, P34, P36, P50 } NodeP12 { P1, P10, P13, P21, P22, P38, P44, P49 } NodeP13 { P1, P2, P10, P12, P17, P20, P34, P36 } NodeP14 { P4, P26, P27, P32, P37, P42, P47 } NodeP15 { P7, P8, P23, P25, P29, P41, P43, P48 } NodeP16 { P1, P2, P3, P5, P11, P17, P24, P36, P38, P39, P40, P49, P50 } NodeP17 { P1, P2, P9, P10, P11, P13, P16, P20, P34, P36, P50 } NodeP18 { P4, P26, P47 } NodeP19 { P3, P6, P33, P38, P40 } NodeP20 { P2, P10, P13, P17, P34 } NodeP21 { P1, P12, P22, P28, P38, P40, P44, P49 } NodeP22 { P1, P12, P21, P28, P38, P40, P44, P49 } NodeP23 { P5, P7, P8, P9, P11, P15, P24, P25, P30, P39, P41, P45, P50 } NodeP24 { P5, P7, P8, P9, P11, P16, P23, P25, P30, P36, P39, P45, P50 } NodeP25 { P7, P8, P9, P15, P23, P24, P29, P41, P43, P45, P48 } NodeP26 { P4, P14, P18, P30, P32, P37, P41, P45, P47 } NodeP27 { P14, P32, P37, P42 } NodeP28 { P21, P22, P40, P49 } NodeP29 { P7, P8, P15, P25, P41, P43, P45, P48 } NodeP30 { P3, P4, P5, P23, P24, P26, P33, P39, P41, P45, P47 } NodeP31 { P43, P46, P48 } NodeP32 { P14, P26, P27, P37, P42 } NodeP33 { P3, P5, P19, P30, P39, P47 } NodeP34 { P2, P10, P11, P13, P17, P20, P35, P36, P46, P50 } NodeP35 { P34, P46 } NodeP36 { P2, P5, P9, P11, P13, P16, P17, P24, P34, P50 } NodeP37 { P4, P8, P14, P26, P27, P32, P41, P42, P45 } NodeP38 { P1, P3, P5, P12, P16, P19, P21, P22, P39, P40, P49 } NodeP39 { P3, P5, P9, P16, P23, P24, P30, P33, P38, P50 } NodeP40 { P1, P3, P16, P19, P21, P22, P28, P38, P49 } NodeP41 { P4, P8, P15, P23, P25, P26, P29, P30, P37, P45 } NodeP42 { P14, P27, P32, P37 } NodeP43 { P7, P8, P15, P25, P29, P31, P48 } NodeP44 { P1, P12, P21, P22 } NodeP45 { P4, P8, P23, P24, P25, P26, P29, P30, P37, P41 } NodeP46 { P31, P34, P35 } NodeP47 { P4, P14, P18, P26, P30, P33 } NodeP48 { P7, P15, P25, P29, P31, P43 } NodeP49 { P1, P12, P16, P21, P22, P28, P38, P40 } NodeP50 { P2, P5, P9, P11, P16, P17, P23, P24, P34, P36, P39 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="senegal0">senegal0messages none  defined. P2 { P3 } Node (779 @ 128) (40)P3 { P2, P4 } Node (740 @ 124) (40)P4 { P3, P5 } Node (705 @ 119) (40)P5 { P4, P6 } Node (676 @ 112) (40)P6 { P5, P7 } Node (650 @ 119) (40)P7 { P6 } Node (624 @ 106) (40)P8 { P9 } Node (583 @ 115) (40)P9 { P8, P10 } Node (557 @ 124) (40)P10 { P9, P11 } Node (524 @ 122) (40)P11 { P10, P12 } Node (499 @ 128) (40)P12 { P11, P13 } Node (476 @ 107) (40)P13 { P12, P14 } Node (457 @ 81) (40)P14 { P13, P15 } Node (427 @ 76) (40)P15 { P14, P16 } Node (407 @ 94) (40)P16 { P15, P17 } Node (379 @ 98) (40)P17 { P16, P18 } Node (353 @ 91) (40)P18 { P17, P19 } Node (334 @ 119) (40)P19 { P18, P20 } Node (316 @ 151) (40)P20 { P19, P21 } Node (316 @ 178) (40)P21 { P20, P22 } Node (301 @ 193) (40)P22 { P21, P23, P24 } Node (296 @ 219) (40)P23 { P22, P24, P25, P26 } Node (283 @ 244) (40)P24 { P22, P23, P25, P26 } Node (274 @ 252) (40)P25 { P23, P24, P26 } Node (275 @ 262) (40)P26 { P23, P24, P25, P27 } Node (283 @ 281) (40)P27 { P26, P28 } Node (275 @ 303) (40)P28 { P27, P29 } Node (260 @ 327) (40)P29 { P28, P30 } Node (236 @ 330) (40)P30 { P29, P31 } Node (215 @ 343) (40)P31 { P30, P32 } Node (212 @ 369) (40)P32 { P31, P33 } Node (212 @ 397) (40)P33 { P32, P34 } Node (211 @ 423) (40)P34 { P33 } Node (193 @ 441) (40)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="visiteEnRade">visiteEnRademessages none  defined. P1 { P2, P3, P4, P5, P9 } Node (644 @ 85) (46)P2 { P1, P3, P4, P5, P9, P10 } Node (653 @ 85) (46)P3 { P1, P2, P5, P10, P11 } Node (652 @ 56) (46)P4 { P1, P2, P5, P14 } Node (622 @ 109) (46)P5 { P1, P2, P3, P4 } Node (629 @ 74) (46)P6 { P7, P9, P10, P12, P13 } Node (716 @ 100) (46)P7 { P6, P8, P12, P20, P22 } Node (748 @ 70) (46)P8 { P7, P20, P21, P22, P23, P24 } Node (783 @ 72) (46)P9 { P1, P2, P6, P10, P11 } Node (681 @ 92) (46)P10 { P2, P3, P6, P9, P11, P12 } Node (692 @ 65) (46)P11 { P3, P9, P10, P12 } Node (687 @ 54) (46)P12 { P6, P7, P10, P11 } Node (721 @ 55) (46)P13 { P6, P20, P29 } Node (742 @ 123) (46)P14 { P4, P15 } Node (633 @ 135) (46)P15 { P14, P17 } Node (589 @ 147) (46)P16 { P17 } Node (528 @ 173) (46)P17 { P15, P16 } Node (548 @ 136) (46)P18 { P19 } Node (467 @ 202) (46)P19 { P18 } Node (473 @ 167) (46)P20 { P7, P8, P13, P21, P23 } Node (772 @ 109) (46)P21 { P8, P20, P22, P23, P24 } Node (793 @ 84) (46)P22 { P7, P8, P21, P23, P24 } Node (792 @ 66) (46)P23 { P8, P20, P21, P22, P24 } Node (810 @ 90) (46)P24 { P8, P21, P22, P23, P25 } Node (818 @ 64) (46)P25 { P24, P26, P27 } Node (856 @ 42) (46)P26 { P25, P27 } Node (875 @ 25) (46)P27 { P25, P26 } Node (882 @ 42) (46)P29 { P13, P30, P31 } Node (737 @ 152) (46)P30 { P29, P31, P32 } Node (725 @ 171) (46)P31 { P29, P30, P32 } Node (716 @ 183) (46)P32 { P30, P31, P36 } Node (704 @ 208) (46)P33 { P35, P37, P38 } Node (610 @ 274) (46)P35 { P33, P36 } Node (628 @ 248) (46)P36 { P32, P35 } Node (664 @ 225) (46)P37 { P33, P38 } Node (610 @ 299) (46)P38 { P33, P37, P39 } Node (592 @ 315) (46)P39 { P38, P40, P41 } Node (575 @ 345) (46)P40 { P39, P41, P42 } Node (565 @ 359) (46)P41 { P39, P40, P42, P43 } Node (580 @ 380) (46)P42 { P40, P41, P43 } Node (590 @ 391) (46)P43 { P41, P42, P44 } Node (581 @ 411) (46)P44 { P43, P45 } Node (546 @ 435) (46)P45 { P44, P46 } Node (558 @ 459) (46)P46 { P45, P47, P49, P55 } Node (549 @ 482) (46)P47 { P46, P48, P49, P51 } Node (519 @ 489) (46)P48 { P47, P49, P50, P51, P52, P53, P54 } Node (502 @ 510) (46)P49 { P46, P47, P48, P51, P53, P54, P55 } Node (538 @ 518) (46)P50 { P48, P51, P52 } Node (485 @ 520) (46)P51 { P47, P48, P49, P50, P52, P53, P54 } Node (503 @ 530) (46)P52 { P48, P50, P51, P53, P54 } Node (491 @ 537) (46)P53 { P48, P49, P51, P52, P54, P55 } Node (531 @ 538) (46)P54 { P48, P49, P51, P52, P53, P55 } Node (536 @ 534) (46)P55 { P46, P49, P53, P54, P56 } Node (563 @ 519) (46)P56 { P55, P81 } Node (599 @ 507) (46)P58 { P59, P60 } Node (413 @ 226) (46)P59 { P58 } Node (451 @ 248) (46)P60 { P58, P61 } Node (376 @ 211) (46)P61 { P60, P72 } Node (355 @ 216) (46)P62 { P63, P64, P65 } Node (379 @ 159) (46)P63 { P62, P64, P65 } Node (381 @ 148) (46)P64 { P62, P63, P65, P66 } Node (350 @ 145) (46)P65 { P62, P63, P64, P66 } Node (337 @ 151) (46)P66 { P64, P65 } Node (329 @ 162) (46)P68 { P75 } Node (173 @ 386) (46)P69 { P74 } Node (152 @ 294) (46)P70 { P73 } Node (222 @ 259) (46)P72 { P61 } Node (318 @ 230) (46)P73 { P70, P74 } Node (197 @ 239) (46)P74 { P69, P73 } Node (175 @ 256) (46)P75 { P68 } Node (149 @ 391) (46)P76 { P78, P79, P96, P97 } Node (162 @ 449) (46)P77 { P78, P79, P96 } Node (161 @ 502) (46)P78 { P76, P77, P79, P96, P118 } Node (143 @ 476) (46)P79 { P76, P77, P78, P96 } Node (160 @ 460) (46)P80 { P87, P88 } Node (701 @ 526) (46)P81 { P56 } Node (636 @ 491) (46)P82 { P83 } Node (684 @ 468) (46)P83 { P82, P84, P85, P86 } Node (720 @ 441) (46)P84 { P83, P85, P86 } Node (741 @ 443) (46)P85 { P83, P84, P86 } Node (745 @ 458) (46)P86 { P83, P84, P85, P87 } Node (731 @ 481) (46)P87 { P80, P86, P88 } Node (716 @ 504) (46)P88 { P80, P87 } Node (739 @ 527) (46)P90 { P91, P92, P123, P124 } Node (419 @ 568) (46)P91 { P90, P92, P123, P124 } Node (432 @ 563) (46)P92 { P90, P91, P93, P123 } Node (388 @ 565) (46)P93 { P92, P94 } Node (344 @ 570) (46)P94 { P93, P95 } Node (303 @ 575) (46)P95 { P94, P100, P101 } Node (259 @ 584) (46)P96 { P76, P77, P78, P79, P98 } Node (186 @ 478) (46)P97 { P76 } Node (206 @ 436) (46)P98 { P96 } Node (212 @ 503) (46)P99 { P100, P101 } Node (206 @ 573) (46)P100 { P95, P99, P101 } Node (241 @ 582) (46)P101 { P95, P99, P100, P102, P103 } Node (215 @ 594) (46)P102 { P101, P103, P104 } Node (186 @ 620) (46)P103 { P101, P102, P104 } Node (214 @ 632) (46)P104 { P102, P103, P105, P106, P107, P108, P109, P110 } Node (176 @ 641) (46)P105 { P104, P106, P107, P108, P109, P110, P111 } Node (155 @ 667) (46)P106 { P104, P105, P107, P108, P109, P110, P111 } Node (173 @ 673) (46)P107 { P104, P105, P106, P108, P109 } Node (192 @ 679) (46)P108 { P104, P105, P106, P107, P109 } Node (183 @ 686) (46)P109 { P104, P105, P106, P107, P108, P110, P111 } Node (151 @ 672) (46)P110 { P104, P105, P106, P109, P111, P112 } Node (135 @ 659) (46)P111 { P105, P106, P109, P110 } Node (131 @ 682) (46)P112 { P110, P113, P114 } Node (91 @ 658) (46)P113 { P112, P114 } Node (76 @ 654) (46)P114 { P112, P113, P115 } Node (91 @ 623) (46)P115 { P114, P116 } Node (103 @ 593) (46)P116 { P115, P117 } Node (105 @ 554) (46)P117 { P116, P118 } Node (94 @ 522) (46)P118 { P78, P117 } Node (112 @ 503) (46)P119 { P121 } Node (32 @ 318) (46)P120 { P121, P122 } Node (72 @ 284) (46)P121 { P119, P120, P122 } Node (53 @ 292) (46)P122 { P120, P121 } Node (81 @ 275) (46)P123 { P90, P91, P92, P124 } Node (418 @ 569) (46)P124 { P90, P91, P123, P125 } Node (444 @ 597) (46)P125 { P124 } Node (430 @ 636) (46)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange150Points5">genRange150Points5messages none  defined. P1 { P3 } Node (254 @ 43) (150)P3 { P1 } Node (288 @ 112) (150)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="santanderNetwork">santanderNetworkmessages none  defined. P1 { P2, P3, P9 } Node (4104101 @ 3067876) (20)P2 { P1, P3, P9 } Node (4104106 @ 3067870) (20)P3 { P1, P2, P4, P1056 } Node (4104118 @ 3067868) (20)P4 { P3, P5, P1056 } Node (4104136 @ 3067862) (20)P5 { P4, P6, P7, P1056 } Node (4104144 @ 3067852) (20)P6 { P5, P7, P8 } Node (4104154 @ 3067853) (20)P7 { P5, P6, P8 } Node (4104160 @ 3067847) (20)P8 { P6, P7 } Node (4104170 @ 3067845) (20)P9 { P1, P2, P641, P643 } Node (4104089 @ 3067878) (20)P10 { P12, P36, P694, P695, P696, P697, P698, P699, P700, P701, P702, P703 } Node (4105720 @ 3067296) (20)P11 { P28, P44, P82, P693, P1055 } Node (4105704 @ 3067312) (20)P12 { P10, P14, P36, P83, P601, P602, P603, P672, P673, P674, P675, P676, P677, P678, P681, P682, P694, P695, P696, P697, P698, P699, P700, P701, P702, P703, P814, P869 } Node (4105735 @ 3067291) (20)P13 { P44, P50, P82, P1055 } Node (4105693 @ 3067333) (20)P14 { P12, P15, P16, P83, P600, P601, P602, P603, P672, P673, P674, P675, P676, P677, P678, P679, P680, P681, P682, P695, P696, P697, P698, P699, P700, P701, P702, P703, P814, P869, P1076 } Node (4105745 @ 3067299) (20)P15 { P14, P16, P37, P47, P83, P600, P601, P602, P603, P869, P1076 } Node (4105745 @ 3067312) (20)P16 { P14, P15, P37, P47, P600, P602, P1076 } Node (4105745 @ 3067315) (20)P17 { P20, P21, P49, P70, P103, P104, P105 } Node (4105644 @ 3067635) (20)P18 { P42, P43, P45, P46, P66, P67, P87, P88, P99, P215, P871, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105796 @ 3067615) (20)P19 { P38, P39, P40, P42, P69, P85, P93, P94, P139, P154, P155, P157, P158, P160, P175, P177, P214, P452, P466, P741, P742, P743, P744, P749, P750, P798, P801, P828, P829, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875, P877, P878, P879, P880, P1036, P1038, P1039, P1040 } Node (4105762 @ 3067609) (20)P20 { P17, P49 } Node (4105649 @ 3067645) (20)P21 { P17, P30, P62, P70, P103, P104, P105, P266 } Node (4105634 @ 3067629) (20)P22 { P30, P31, P32, P56, P57, P59, P60, P61, P62, P77 } Node (4105605 @ 3067629) (20)P23 { P27, P29, P51, P52, P53, P54, P55, P71, P102, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105569 @ 3067656) (20)P24 { P25, P26, P49, P72, P80, P89, P105, P106, P206, P259, P265, P1054, P1060 } Node (4105662 @ 3067623) (20)P25 { P24, P26, P49, P72, P80, P89, P105, P106, P206, P265, P1054, P1060 } Node (4105665 @ 3067627) (20)P26 { P24, P25, P49, P63, P72, P80, P81, P89, P106, P206, P208, P209, P259, P265, P1054, P1060 } Node (4105671 @ 3067621) (20)P27 { P23, P29, P33, P51, P52, P53, P54, P55, P71, P73, P102, P108, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105574 @ 3067648) (20)P28 { P11, P44, P47, P82, P84, P693, P1055 } Node (4105717 @ 3067326) (20)P29 { P23, P27, P33, P51, P52, P53, P54, P55, P71, P73, P102, P108, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105571 @ 3067649) (20)P30 { P21, P22, P57, P61, P62, P70, P103, P266 } Node (4105622 @ 3067631) (20)P31 { P22, P32, P33, P34, P56, P59, P60, P61, P73, P77, P463 } Node (4105599 @ 3067630) (20)P32 { P22, P31, P33, P34, P54, P55, P56, P59, P60, P73, P268, P379, P380, P463 } Node (4105589 @ 3067631) (20)P33 { P27, P29, P31, P32, P34, P53, P54, P55, P56, P59, P71, P73, P109, P268, P379, P380, P457, P463, P709, P710, P711, P712, P713, P714, P715, P718 } Node (4105580 @ 3067632) (20)P34 { P31, P32, P33, P55, P59, P60, P73, P109, P267, P268, P275, P379, P380, P457, P463 } Node (4105584 @ 3067627) (20)P35 { P41, P46, P66, P91, P99, P100, P213, P216, P217, P871, P892, P893, P894, P895, P896 } Node (4105816 @ 3067611) (20)P36 { P10, P12, P83, P694, P695, P696, P697, P698, P699, P700, P701, P702, P703 } Node (4105726 @ 3067292) (20)P37 { P15, P16, P47, P84 } Node (4105743 @ 3067319) (20)P38 { P19, P39, P40, P65, P68, P69, P74, P93, P94, P139, P801, P820, P828, P829, P834, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875 } Node (4105753 @ 3067621) (20)P39 { P19, P38, P40, P42, P43, P45, P85, P94, P214, P452, P801, P828, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875, P877, P878, P879, P880, P881, P882, P883, P884 } Node (4105771 @ 3067619) (20)P40 { P19, P38, P39, P42, P68, P69, P85, P93, P94, P139, P801, P828, P829, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875, P877, P878 } Node (4105762 @ 3067620) (20)P41 { P35, P46, P66, P90, P91, P99, P100, P213, P216, P217, P224, P225, P226, P227, P453, P871, P892, P893, P894, P895, P896, P1061, P1062 } Node (4105817 @ 3067602) (20)P42 { P18, P19, P39, P40, P43, P45, P67, P85, P87, P214, P452, P867, P868, P872, P873, P874, P875, P877, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890 } Node (4105779 @ 3067618) (20)P43 { P18, P39, P42, P45, P67, P85, P87, P88, P157, P178, P214, P215, P218, P223, P452, P466, P716, P751, P752, P753, P754, P755, P785, P794, P795, P796, P797, P871, P872, P873, P874, P875, P877, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893 } Node (4105783 @ 3067606) (20)P44 { P11, P13, P28, P82, P693, P1055 } Node (4105703 @ 3067329) (20)P45 { P18, P39, P42, P43, P46, P67, P85, P87, P88, P452, P871, P877, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894 } Node (4105788 @ 3067616) (20)P46 { P18, P35, P41, P45, P66, P67, P88, P99, P100, P213, P215, P871, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105805 @ 3067613) (20)P47 { P15, P16, P28, P37, P84 } Node (4105734 @ 3067322) (20)P48 { P50 } Node (4105673 @ 3067337) (20)P49 { P17, P20, P24, P25, P26, P89, P106, P1054, P1060 } Node (4105663 @ 3067635) (20)P50 { P13, P48 } Node (4105681 @ 3067335) (20)P51 { P23, P27, P29, P52, P53, P54, P55, P71, P102, P380, P457, P704, P705, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105571 @ 3067652) (20)P52 { P23, P27, P29, P51, P53, P54, P55, P71, P102, P108, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105568 @ 3067649) (20)P53 { P23, P27, P29, P33, P51, P52, P54, P55, P71, P102, P108, P109, P379, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105570 @ 3067646) (20)P54 { P23, P27, P29, P32, P33, P51, P52, P53, P55, P71, P73, P102, P108, P379, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105576 @ 3067646) (20)P55 { P23, P27, P29, P32, P33, P34, P51, P52, P53, P54, P56, P71, P73, P102, P379, P380, P463, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105584 @ 3067644) (20)P56 { P22, P31, P32, P33, P55, P57, P59, P60, P73, P77 } Node (4105596 @ 3067643) (20)P57 { P22, P30, P56, P61, P77, P103 } Node (4105615 @ 3067643) (20)P58 { P234, P235, P236, P238, P239, P240, P242, P478, P481, P555, P556, P1057 } Node (4105613 @ 3067527) (20)P59 { P22, P31, P32, P33, P34, P56, P60, P61, P73, P267, P268, P275, P379, P380, P463, P464 } Node (4105593 @ 3067626) (20)P60 { P22, P31, P32, P34, P56, P59, P61, P62, P77, P274, P464 } Node (4105602 @ 3067625) (20)P61 { P22, P30, P31, P57, P59, P60, P62, P70, P77 } Node (4105611 @ 3067624) (20)P62 { P21, P22, P30, P60, P61, P70, P104, P266 } Node (4105620 @ 3067623) (20)P63 { P26, P72, P79, P80, P81, P202, P203, P209, P210, P211, P450, P1054, P1060 } Node (4105689 @ 3067619) (20)P64 { P65, P68, P74, P75, P76, P78, P92, P96, P381, P382, P730, P781, P800, P802, P805, P820, P826, P830, P831, P832, P833, P834, P835, P836, P837, P839 } Node (4105728 @ 3067624) (20)P65 { P38, P64, P68, P69, P74, P76, P92, P381, P382, P730, P781, P800, P802, P805, P820, P826, P828, P829, P830, P831, P832, P833, P834, P835, P836, P837, P838, P839, P840, P841, P842 } Node (4105736 @ 3067623) (20)P66 { P18, P35, P41, P46, P67, P88, P91, P99, P100, P213, P215, P216, P217, P224, P225, P226, P227, P453, P871, P885, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105811 @ 3067603) (20)P67 { P18, P42, P43, P45, P46, P66, P85, P87, P88, P99, P178, P181, P215, P218, P223, P224, P452, P453, P716, P753, P754, P755, P785, P794, P795, P796, P797, P871, P877, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105792 @ 3067605) (20)P68 { P38, P40, P64, P65, P69, P74, P92, P93, P730, P801, P820, P828, P829, P830, P831, P832, P833, P834, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868 } Node (4105745 @ 3067622) (20)P69 { P19, P38, P40, P65, P68, P74, P76, P92, P93, P94, P139, P153, P154, P155, P159, P174, P382, P730, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P798, P800, P801, P820, P828, P829, P830, P831, P832, P833, P834, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868 } Node (4105744 @ 3067612) (20)P70 { P17, P21, P30, P61, P62, P104, P266, P276, P280 } Node (4105629 @ 3067622) (20)P71 { P23, P27, P29, P33, P51, P52, P53, P54, P55, P73, P102, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105577 @ 3067650) (20)P72 { P24, P25, P26, P63, P79, P80, P81, P89, P203, P206, P208, P209, P210, P259, P450, P1054, P1060 } Node (4105680 @ 3067620) (20)P73 { P27, P29, P31, P32, P33, P34, P54, P55, P56, P59, P71, P77, P380, P708, P709, P710, P711, P712, P713, P714, P715 } Node (4105590 @ 3067644) (20)P74 { P38, P64, P65, P68, P69, P75, P76, P92, P93, P143, P153, P154, P159, P174, P212, P381, P382, P730, P735, P737, P738, P739, P740, P745, P746, P747, P748, P781, P800, P802, P805, P820, P826, P828, P829, P830, P831, P832, P833, P834, P835, P836, P837, P838, P839, P840, P841, P842, P843 } Node (4105735 @ 3067613) (20)P75 { P64, P74, P76, P78, P79, P96, P202, P211, P212, P381, P382, P730, P781, P800, P802, P805, P826, P830, P831, P832, P833, P834 } Node (4105717 @ 3067615) (20)P76 { P64, P65, P69, P74, P75, P78, P92, P96, P143, P153, P174, P212, P381, P382, P730, P747, P748, P781, P800, P802, P805, P820, P826, P830, P831, P832, P833, P834, P835, P836, P837, P839 } Node (4105726 @ 3067614) (20)P77 { P22, P31, P56, P57, P60, P61, P73 } Node (4105606 @ 3067643) (20)P78 { P64, P75, P76, P79, P96, P202, P210, P211, P212, P381, P382, P730, P781, P800, P802, P805, P826, P830, P831 } Node (4105711 @ 3067618) (20)P79 { P63, P72, P75, P78, P80, P81, P96, P202, P203, P210, P211 } Node (4105698 @ 3067621) (20)P80 { P24, P25, P26, P63, P72, P79, P81, P89, P210, P1054, P1060 } Node (4105681 @ 3067626) (20)P81 { P26, P63, P72, P79, P80, P202, P203, P210, P1054, P1060 } Node (4105689 @ 3067624) (20)P82 { P11, P13, P28, P44, P84, P693, P1055 } Node (4105708 @ 3067328) (20)P83 { P12, P14, P15, P36, P600, P601, P602, P603, P672, P673, P674, P675, P676, P677, P678, P679, P680, P681, P682, P694, P695, P696, P697, P698, P699, P700, P701, P702, P703, P814, P869, P1076 } Node (4105740 @ 3067293) (20)P84 { P28, P37, P47, P82 } Node (4105726 @ 3067324) (20)P85 { P19, P39, P40, P42, P43, P45, P67, P87, P94, P139, P156, P157, P158, P177, P178, P214, P218, P452, P466, P749, P750, P751, P752, P753, P754, P755, P760, P797, P801, P843, P844, P866, P867, P868, P872, P873, P874, P875, P877, P878, P879, P880, P881, P882, P883, P884, P886, P887, P888, P1036, P1038, P1039, P1040, P1043 } Node (4105773 @ 3067607) (20)P86 { P90, P95, P97, P98, P228, P229, P383, P384, P455 } Node (4105843 @ 3067576) (20)P87 { P18, P42, P43, P45, P67, P85, P88, P157, P177, P178, P181, P214, P215, P218, P223, P452, P453, P466, P716, P751, P752, P753, P754, P755, P785, P794, P795, P796, P797, P822, P823, P871, P877, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894 } Node (4105786 @ 3067601) (20)P88 { P18, P43, P45, P46, P66, P67, P87, P99, P100, P178, P181, P215, P218, P222, P223, P224, P225, P453, P716, P717, P732, P755, P785, P794, P795, P796, P797, P807, P819, P821, P822, P823, P825, P871, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105797 @ 3067600) (20)P89 { P24, P25, P26, P49, P72, P80, P105, P106, P206, P208, P209, P259, P265, P1054, P1060 } Node (4105669 @ 3067617) (20)P90 { P41, P86, P91, P97, P98, P100, P213, P216, P226, P227, P228, P229, P455, P1061, P1062 } Node (4105830 @ 3067590) (20)P91 { P35, P41, P66, P90, P98, P99, P100, P213, P216, P217, P225, P226, P227, P455, P895, P896, P1061, P1062 } Node (4105823 @ 3067596) (20)P92 { P64, P65, P68, P69, P74, P76, P93, P139, P143, P151, P153, P154, P155, P159, P173, P174, P212, P381, P382, P730, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P781, P798, P800, P801, P820, P826, P828, P829, P830, P831, P832, P833, P834, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844 } Node (4105738 @ 3067607) (20)P93 { P19, P38, P40, P68, P69, P74, P92, P94, P139, P142, P151, P153, P154, P155, P157, P158, P159, P160, P172, P173, P174, P175, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P798, P801, P820, P828, P829, P834, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875, P1036, P1038, P1039, P1040 } Node (4105750 @ 3067605) (20)P94 { P19, P38, P39, P40, P69, P85, P93, P139, P142, P154, P155, P156, P157, P158, P159, P160, P172, P173, P175, P177, P214, P452, P466, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P749, P750, P751, P759, P760, P798, P801, P828, P829, P837, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875, P877, P1036, P1038, P1039, P1040, P1043 } Node (4105758 @ 3067604) (20)P95 { P86, P97, P98, P228, P229, P383, P384, P385, P455, P468 } Node (4105841 @ 3067569) (20)P96 { P64, P75, P76, P78, P79, P202, P211, P212, P381, P382, P465, P730, P781, P800, P802, P805, P826, P830, P831, P832, P833 } Node (4105714 @ 3067610) (20)P97 { P86, P90, P95, P98, P229, P455, P1061, P1062 } Node (4105846 @ 3067580) (20)P98 { P86, P90, P91, P95, P97, P179, P226, P227, P228, P229, P383, P455, P1037, P1044, P1061, P1062 } Node (4105833 @ 3067582) (20)P99 { P18, P35, P41, P46, P66, P67, P88, P91, P100, P181, P213, P215, P222, P223, P224, P225, P226, P227, P453, P716, P717, P732, P794, P795, P807, P821, P822, P823, P871, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105806 @ 3067599) (20)P100 { P35, P41, P46, P66, P88, P90, P91, P99, P213, P216, P217, P224, P225, P226, P227, P453, P455, P871, P892, P893, P894, P895, P896, P1061, P1062 } Node (4105816 @ 3067597) (20)P101 { P107, P110, P111, P113, P116, P117, P252 } Node (4105533 @ 3067633) (20)P102 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P108, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105568 @ 3067653) (20)P103 { P17, P21, P30, P57 } Node (4105628 @ 3067642) (20)P104 { P17, P21, P62, P70, P105, P106, P265, P266, P280, P1064 } Node (4105639 @ 3067620) (20)P105 { P17, P21, P24, P25, P89, P104, P106, P206, P265, P280 } Node (4105650 @ 3067619) (20)P106 { P24, P25, P26, P49, P89, P104, P105, P206, P259, P265, P280, P1054 } Node (4105658 @ 3067618) (20)P107 { P101, P108, P110, P111, P113, P114, P115, P116, P117, P252, P253, P258 } Node (4105541 @ 3067629) (20)P108 { P27, P29, P52, P53, P54, P102, P107, P109, P114, P115, P116, P117, P257, P258, P379, P380, P457, P707, P708, P709, P710, P718, P719, P720, P724 } Node (4105559 @ 3067636) (20)P109 { P33, P34, P53, P108, P114, P115, P116, P117, P255, P257, P258, P268, P379, P380, P457, P463, P718 } Node (4105565 @ 3067629) (20)P110 { P101, P107, P111, P113, P118, P252 } Node (4105525 @ 3067630) (20)P111 { P101, P107, P110, P113, P114, P115, P116, P117, P252 } Node (4105539 @ 3067634) (20)P112 { P516, P525, P671 } Node (4105140 @ 3067735) (20)P113 { P101, P107, P110, P111, P115, P116, P117, P252, P253 } Node (4105536 @ 3067628) (20)P114 { P107, P108, P109, P111, P115, P116, P117, P255, P257, P258, P380, P457 } Node (4105557 @ 3067629) (20)P115 { P107, P108, P109, P111, P113, P114, P116, P117, P257, P258, P457 } Node (4105553 @ 3067635) (20)P116 { P101, P107, P108, P109, P111, P113, P114, P115, P117, P252, P253, P255, P257, P258, P457 } Node (4105552 @ 3067629) (20)P117 { P101, P107, P108, P109, P111, P113, P114, P115, P116, P252, P258 } Node (4105546 @ 3067635) (20)P118 { P110, P407, P456, P1069 } Node (4105509 @ 3067625) (20)P119 { P187, P189, P190, P191, P237, P243, P244, P245, P246, P250, P251, P481, P553 } Node (4105610 @ 3067560) (20)P120 { P121, P122, P123, P124, P125, P126, P127, P128, P249, P314, P607, P1058 } Node (4105540 @ 3067584) (20)P121 { P120, P122, P123, P124, P125, P126, P127, P128, P249, P314, P607, P1058 } Node (4105542 @ 3067582) (20)P122 { P120, P121, P123, P124, P125, P126, P127, P249, P253, P254, P256, P314, P1053, P1058 } Node (4105546 @ 3067594) (20)P123 { P120, P121, P122, P124, P125, P126, P127, P128, P249, P314, P607 } Node (4105548 @ 3067583) (20)P124 { P120, P121, P122, P123, P125, P127, P128, P306, P314, P488, P607 } Node (4105551 @ 3067578) (20)P125 { P120, P121, P122, P123, P124, P126, P127, P128, P249, P254, P256, P314, P607 } Node (4105552 @ 3067588) (20)P126 { P120, P121, P122, P123, P125, P127, P249, P253, P254, P256, P1053, P1058 } Node (4105544 @ 3067597) (20)P127 { P120, P121, P122, P123, P124, P125, P126, P128, P314, P607 } Node (4105556 @ 3067584) (20)P128 { P120, P121, P123, P124, P125, P127, P134, P304, P306, P314, P488, P607 } Node (4105553 @ 3067569) (20)P129 { P130, P135, P136, P137, P484, P485, P486 } Node (4105545 @ 3067526) (20)P130 { P129, P131, P135, P136, P137, P484, P485, P486 } Node (4105540 @ 3067528) (20)P131 { P130, P132, P301, P302, P304, P305, P485, P487, P489 } Node (4105529 @ 3067543) (20)P132 { P131, P300, P301, P302, P304, P305, P485, P487, P489 } Node (4105528 @ 3067548) (20)P133 { P134, P135, P304, P306, P486, P487, P488 } Node (4105550 @ 3067549) (20)P134 { P128, P133, P135, P304, P306, P486, P487, P488 } Node (4105553 @ 3067551) (20)P135 { P129, P130, P133, P134, P136, P306, P485, P486, P487, P488 } Node (4105552 @ 3067543) (20)P136 { P129, P130, P135, P137, P476, P484, P485, P486 } Node (4105551 @ 3067524) (20)P137 { P129, P130, P136, P484, P485, P486 } Node (4105541 @ 3067522) (20)P138 { P143, P144, P145, P147, P149, P150, P151, P152, P153, P163, P164, P165, P174, P451, P465, P729, P745, P746, P747, P748, P769, P770, P771, P787, P791, P792, P793, P845, P951, P954, P994, P999, P1021, P1022, P1026, P1028, P1031, P1034, P1035 } Node (4105728 @ 3067582) (20)P139 { P19, P38, P40, P69, P85, P92, P93, P94, P142, P151, P154, P155, P156, P157, P158, P159, P160, P172, P173, P174, P175, P177, P214, P466, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P749, P750, P759, P760, P767, P798, P801, P820, P828, P829, P836, P837, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875, P1036, P1038, P1039, P1040, P1043 } Node (4105755 @ 3067602) (20)P140 { P141, P156, P167, P168, P171, P176, P220, P260, P261, P262, P263, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P721, P722, P731, P733, P734, P736, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P811, P812, P813, P815, P816, P817, P847, P949, P952, P976, P991, P992, P993, P995, P996, P997, P998, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1043, P1052, P1059 } Node (4105768 @ 3067571) (20)P141 { P140, P142, P144, P150, P151, P156, P160, P165, P166, P167, P168, P170, P171, P172, P173, P176, P260, P261, P392, P393, P394, P451, P467, P684, P722, P729, P731, P734, P736, P756, P757, P758, P759, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P784, P786, P787, P788, P789, P790, P808, P847, P951, P952, P991, P992, P993, P996, P997, P999, P1000, P1001, P1004, P1005, P1016, P1017, P1052, P1059 } Node (4105753 @ 3067574) (20)P142 { P93, P94, P139, P141, P144, P150, P151, P154, P155, P156, P157, P158, P159, P160, P165, P166, P167, P168, P170, P171, P172, P173, P174, P175, P177, P260, P261, P451, P721, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P778, P779, P780, P783, P784, P786, P787, P788, P789, P790, P798, P808, P951, P999, P1000, P1001, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105750 @ 3067587) (20)P143 { P74, P76, P92, P138, P144, P147, P149, P151, P153, P154, P159, P164, P174, P212, P381, P382, P465, P735, P737, P738, P739, P740, P745, P746, P747, P748, P771, P791, P792, P793, P845, P994, P1021, P1022, P1026 } Node (4105728 @ 3067595) (20)P144 { P138, P141, P142, P143, P149, P150, P151, P152, P153, P154, P155, P159, P160, P164, P165, P166, P167, P170, P172, P173, P174, P175, P260, P451, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P783, P784, P786, P787, P788, P791, P792, P793, P798, P808, P951, P999, P1000, P1001, P1052, P1059 } Node (4105742 @ 3067583) (20)P145 { P138, P146, P147, P148, P149, P152, P161, P162, P164, P169, P465, P475, P691, P692, P845, P932, P954, P994, P1002, P1018, P1021, P1022, P1024, P1026, P1028, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105710 @ 3067580) (20)P146 { P145, P147, P152, P161, P163, P845, P954, P994, P1021, P1022, P1026, P1028, P1031, P1032, P1034, P1035 } Node (4105713 @ 3067561) (20)P147 { P138, P143, P145, P146, P148, P149, P152, P163, P164, P165, P465, P692, P729, P787, P791, P792, P793, P845, P954, P994, P1018, P1021, P1022, P1024, P1026, P1028, P1031, P1032, P1033, P1034, P1035 } Node (4105720 @ 3067579) (20)P148 { P145, P147, P162, P169, P204, P205, P465, P474, P475, P691, P692, P845, P932, P954, P994, P1002, P1018, P1021, P1022, P1024, P1026, P1027, P1028, P1029, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105704 @ 3067582) (20)P149 { P138, P143, P144, P145, P147, P150, P151, P152, P153, P159, P164, P165, P174, P212, P451, P465, P729, P735, P737, P738, P745, P746, P747, P748, P768, P769, P770, P771, P787, P791, P792, P793, P845, P951, P954, P994, P1021, P1022, P1026, P1028, P1034, P1035 } Node (4105729 @ 3067585) (20)P150 { P138, P141, P142, P144, P149, P151, P152, P160, P164, P165, P166, P167, P170, P172, P173, P451, P722, P729, P731, P734, P736, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P783, P784, P786, P787, P788, P791, P792, P793, P808, P951, P999, P1000, P1001, P1052, P1059 } Node (4105741 @ 3067577) (20)P151 { P92, P93, P138, P139, P141, P142, P143, P144, P149, P150, P153, P154, P155, P159, P160, P164, P165, P166, P170, P172, P173, P174, P175, P451, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P763, P764, P765, P766, P767, P768, P769, P770, P771, P783, P787, P791, P792, P793, P798, P951, P999, P1000, P1001, P1052, P1059 } Node (4105741 @ 3067588) (20)P152 { P138, P144, P145, P146, P147, P149, P150, P163, P164, P165, P451, P729, P787, P791, P792, P793, P845, P951, P954, P994, P999, P1021, P1022, P1026, P1028, P1031, P1034, P1035 } Node (4105727 @ 3067573) (20)P153 { P69, P74, P76, P92, P93, P138, P143, P144, P149, P151, P154, P159, P173, P174, P212, P381, P382, P465, P730, P735, P737, P738, P739, P740, P741, P742, P743, P745, P746, P747, P748, P771, P781, P800, P820, P830, P831, P832, P833, P834, P835, P836, P837, P839 } Node (4105732 @ 3067599) (20)P154 { P19, P69, P74, P92, P93, P94, P139, P142, P143, P144, P151, P153, P155, P159, P160, P170, P172, P173, P174, P175, P382, P722, P731, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P765, P766, P767, P768, P769, P770, P771, P798, P801, P820, P828, P829, P834, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844, P866, P1036, P1039, P1040, P1059 } Node (4105745 @ 3067599) (20)P155 { P19, P69, P92, P93, P94, P139, P142, P144, P151, P154, P156, P157, P158, P159, P160, P170, P172, P173, P174, P175, P177, P214, P260, P721, P722, P731, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P780, P801, P828, P829, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105752 @ 3067596) (20)P156 { P85, P94, P139, P140, P141, P142, P155, P157, P158, P160, P167, P168, P170, P171, P172, P173, P175, P176, P177, P178, P214, P218, P220, P260, P261, P263, P452, P466, P467, P721, P722, P731, P736, P742, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P796, P797, P798, P808, P813, P815, P816, P817, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105767 @ 3067588) (20)P157 { P19, P43, P85, P87, P93, P94, P139, P142, P155, P156, P158, P160, P171, P172, P173, P175, P176, P177, P178, P214, P218, P260, P261, P452, P466, P467, P721, P731, P736, P741, P742, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P778, P779, P780, P796, P797, P798, P844, P866, P867, P868, P872, P873, P874, P875, P877, P878, P879, P880, P1036, P1038, P1039, P1040, P1043 } Node (4105767 @ 3067597) (20)P158 { P19, P85, P93, P94, P139, P142, P155, P156, P157, P160, P171, P172, P173, P175, P176, P177, P178, P214, P260, P261, P452, P466, P467, P721, P722, P731, P736, P740, P741, P742, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P778, P779, P780, P797, P798, P801, P844, P866, P867, P868, P872, P873, P874, P875, P877, P878, P1036, P1038, P1039, P1040, P1043 } Node (4105765 @ 3067596) (20)P159 { P69, P74, P92, P93, P94, P139, P142, P143, P144, P149, P151, P153, P154, P155, P160, P170, P172, P173, P174, P175, P382, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P767, P768, P769, P770, P771, P798, P801, P820, P828, P829, P832, P833, P834, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844, P1040 } Node (4105742 @ 3067600) (20)P160 { P19, P93, P94, P139, P141, P142, P144, P150, P151, P154, P155, P156, P157, P158, P159, P166, P167, P168, P170, P171, P172, P173, P174, P175, P176, P177, P214, P260, P261, P451, P466, P467, P721, P722, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P749, P750, P751, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P773, P778, P779, P780, P783, P784, P786, P788, P790, P798, P808, P951, P999, P1000, P1001, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105755 @ 3067591) (20)P161 { P145, P146, P163, P475, P692, P954, P994, P1018, P1021, P1024, P1026, P1028, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105707 @ 3067562) (20)P162 { P145, P148, P169, P203, P204, P205, P211, P357, P450, P474, P475, P691, P692, P932, P1002, P1003, P1018, P1019, P1023, P1024, P1025, P1027, P1029, P1030, P1031, P1032, P1033, P1034 } Node (4105696 @ 3067591) (20)P163 { P138, P146, P147, P152, P161, P164, P165, P729, P787, P791, P792, P793, P845, P954, P994, P1021, P1022, P1026, P1028, P1034, P1035 } Node (4105724 @ 3067565) (20)P164 { P138, P143, P144, P145, P147, P149, P150, P151, P152, P163, P165, P166, P451, P465, P729, P768, P769, P770, P771, P787, P791, P792, P793, P845, P951, P954, P994, P999, P1000, P1021, P1022, P1026, P1028, P1034, P1035 } Node (4105729 @ 3067577) (20)P165 { P138, P141, P142, P144, P147, P149, P150, P151, P152, P163, P164, P166, P170, P451, P722, P734, P765, P766, P767, P768, P769, P770, P771, P783, P787, P791, P792, P793, P845, P951, P994, P999, P1000, P1001, P1021, P1022, P1026, P1052, P1059 } Node (4105735 @ 3067576) (20)P166 { P141, P142, P144, P150, P151, P160, P164, P165, P167, P168, P170, P171, P172, P173, P260, P261, P392, P451, P722, P729, P731, P734, P736, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P783, P784, P786, P787, P788, P789, P790, P791, P792, P793, P808, P951, P997, P999, P1000, P1001, P1052, P1059 } Node (4105747 @ 3067575) (20)P167 { P140, P141, P142, P144, P150, P156, P160, P166, P168, P170, P171, P172, P176, P220, P260, P261, P391, P392, P393, P394, P451, P467, P684, P721, P722, P731, P734, P736, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P847, P951, P952, P991, P992, P993, P996, P997, P998, P999, P1000, P1001, P1004, P1005, P1006, P1011, P1014, P1015, P1016, P1017, P1043, P1052, P1059 } Node (4105758 @ 3067574) (20)P168 { P140, P141, P142, P156, P160, P166, P167, P170, P171, P172, P176, P177, P220, P260, P261, P373, P391, P392, P393, P394, P467, P684, P721, P722, P731, P734, P736, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P817, P847, P951, P952, P991, P992, P993, P996, P997, P998, P999, P1000, P1001, P1004, P1005, P1006, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1043, P1052, P1059 } Node (4105762 @ 3067573) (20)P169 { P145, P148, P162, P204, P205, P357, P473, P474, P475, P690, P691, P692, P932, P954, P1002, P1003, P1018, P1019, P1020, P1023, P1024, P1025, P1027, P1029, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105695 @ 3067582) (20)P170 { P141, P142, P144, P150, P151, P154, P155, P156, P159, P160, P165, P166, P167, P168, P171, P172, P173, P175, P260, P261, P451, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P749, P750, P756, P757, P758, P759, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P776, P777, P783, P784, P786, P787, P788, P789, P790, P791, P792, P793, P798, P808, P951, P999, P1000, P1001, P1036, P1039, P1040, P1052, P1059 } Node (4105749 @ 3067582) (20)P171 { P140, P141, P142, P156, P157, P158, P160, P166, P167, P168, P170, P172, P175, P176, P177, P220, P260, P261, P263, P391, P392, P393, P466, P467, P684, P721, P722, P731, P734, P736, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P813, P815, P816, P817, P847, P952, P991, P992, P996, P997, P998, P999, P1000, P1001, P1004, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105765 @ 3067580) (20)P172 { P93, P94, P139, P141, P142, P144, P150, P151, P154, P155, P156, P157, P158, P159, P160, P166, P167, P168, P170, P171, P173, P174, P175, P176, P177, P260, P261, P451, P467, P721, P722, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P775, P776, P777, P778, P779, P780, P783, P784, P786, P787, P788, P789, P790, P798, P808, P951, P999, P1000, P1001, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105753 @ 3067586) (20)P173 { P92, P93, P94, P139, P141, P142, P144, P150, P151, P153, P154, P155, P156, P157, P158, P159, P160, P166, P170, P172, P174, P175, P260, P451, P722, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P783, P784, P798, P951, P999, P1000, P1001, P1036, P1038, P1039, P1040, P1052, P1059 } Node (4105749 @ 3067592) (20)P174 { P69, P74, P76, P92, P93, P138, P139, P142, P143, P144, P149, P151, P153, P154, P155, P159, P160, P172, P173, P175, P212, P382, P465, P730, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P767, P768, P769, P770, P771, P798, P820, P829, P831, P832, P833, P834, P835, P836, P837, P838, P839, P840, P841, P842 } Node (4105738 @ 3067599) (20)P175 { P19, P93, P94, P139, P142, P144, P151, P154, P155, P156, P157, P158, P159, P160, P170, P171, P172, P173, P174, P176, P177, P214, P260, P261, P466, P721, P722, P731, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P749, P750, P751, P752, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P778, P779, P780, P798, P801, P828, P838, P842, P843, P844, P866, P867, P868, P872, P873, P874, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105756 @ 3067595) (20)P176 { P140, P141, P156, P157, P158, P160, P167, P168, P171, P172, P175, P177, P178, P214, P218, P220, P260, P261, P262, P263, P391, P392, P452, P466, P467, P684, P721, P722, P731, P736, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P785, P786, P788, P789, P790, P796, P797, P808, P810, P811, P812, P813, P815, P816, P817, P847, P996, P997, P998, P1010, P1011, P1012, P1013, P1014, P1015, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105770 @ 3067584) (20)P177 { P19, P85, P87, P94, P139, P142, P155, P156, P157, P158, P160, P168, P171, P172, P175, P176, P178, P214, P218, P220, P260, P261, P263, P452, P466, P467, P721, P722, P731, P736, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P772, P773, P775, P776, P777, P778, P779, P780, P785, P796, P797, P798, P813, P815, P816, P817, P877, P1036, P1038, P1039, P1040, P1043 } Node (4105769 @ 3067591) (20)P178 { P43, P67, P85, P87, P88, P156, P157, P158, P176, P177, P181, P182, P183, P214, P215, P218, P220, P222, P223, P262, P263, P452, P453, P466, P467, P716, P717, P721, P732, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P778, P779, P780, P782, P785, P794, P795, P796, P797, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P825, P877, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P1036, P1038, P1043 } Node (4105782 @ 3067593) (20)P179 { P98, P180, P221, P226, P227, P228, P229, P232, P383, P384, P385, P386, P455, P687, P922, P926, P955, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105819 @ 3067572) (20)P180 { P179, P219, P221, P222, P224, P225, P226, P227, P228, P229, P232, P385, P386, P387, P455, P687, P717, P732, P799, P803, P806, P807, P818, P819, P821, P824, P825, P922, P926, P955, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105813 @ 3067573) (20)P181 { P67, P87, P88, P99, P178, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P232, P262, P263, P264, P453, P686, P716, P717, P732, P753, P754, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P1041, P1042, P1048, P1049, P1050, P1051 } Node (4105795 @ 3067586) (20)P182 { P178, P181, P183, P215, P218, P219, P220, P221, P222, P223, P224, P225, P232, P262, P263, P264, P387, P388, P453, P685, P686, P687, P716, P717, P732, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P922, P950, P961, P962, P963, P964, P965, P976, P995, P1007, P1008, P1009, P1010, P1012, P1041, P1042, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105794 @ 3067580) (20)P183 { P178, P181, P182, P215, P218, P219, P220, P221, P222, P223, P224, P225, P232, P262, P263, P264, P387, P388, P389, P391, P453, P685, P686, P687, P716, P717, P732, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P922, P929, P950, P953, P957, P960, P961, P962, P963, P964, P965, P966, P976, P995, P1007, P1008, P1009, P1010, P1012, P1013, P1041, P1042, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105793 @ 3067578) (20)P184 { P185, P233, P241, P476, P482 } Node (4105573 @ 3067536) (20)P185 { P184, P186, P188, P241 } Node (4105574 @ 3067555) (20)P186 { P185, P188, P189, P483 } Node (4105584 @ 3067560) (20)P187 { P119, P190, P191, P192, P193, P237, P243, P244, P245, P246, P250, P251, P553, P554 } Node (4105613 @ 3067571) (20)P188 { P185, P186, P189, P190, P483 } Node (4105588 @ 3067560) (20)P189 { P119, P186, P188, P190, P191, P244, P483, P553 } Node (4105595 @ 3067560) (20)P190 { P119, P187, P188, P189, P191, P244, P245, P271, P483, P553, P554 } Node (4105602 @ 3067569) (20)P191 { P119, P187, P189, P190, P192, P237, P243, P244, P245, P246, P250, P251, P553, P554 } Node (4105611 @ 3067567) (20)P192 { P187, P191, P193, P194, P195, P244, P245, P250, P251, P277, P278, P350, P449, P554, P608 } Node (4105618 @ 3067585) (20)P193 { P187, P192, P194, P195, P245, P250, P251, P276, P277, P278, P345, P350, P449, P554, P608 } Node (4105623 @ 3067584) (20)P194 { P192, P193, P195, P245, P250, P251, P276, P277, P278, P279, P344, P345, P349, P350, P449, P608, P1064 } Node (4105628 @ 3067585) (20)P195 { P192, P193, P194, P245, P250, P251, P277, P278, P279, P343, P344, P345, P349, P350, P449, P608 } Node (4105632 @ 3067582) (20)P196 { P197, P201, P231, P358, P359, P454, P851, P852, P853, P854, P855, P856, P857, P863, P864, P865, P1066, P1067 } Node (4105826 @ 3067511) (20)P197 { P196, P198, P200, P201, P231, P358, P359, P454, P469, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P1066, P1067 } Node (4105829 @ 3067523) (20)P198 { P197, P199, P200, P201, P230, P231, P358, P359, P454, P469, P688, P689, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P935, P974, P975, P977, P978, P1066, P1067 } Node (4105830 @ 3067532) (20)P199 { P198, P200, P201, P230, P231, P384, P385, P468, P688, P689, P856, P857, P864, P865, P935, P974, P975, P977, P978, P983, P987, P990 } Node (4105832 @ 3067544) (20)P200 { P197, P198, P199, P201, P230, P231, P358, P454, P468, P688, P689, P853, P854, P855, P856, P857, P863, P864, P865, P935, P974, P975, P977, P978, P1066, P1067 } Node (4105836 @ 3067537) (20)P201 { P196, P197, P198, P199, P200, P231, P358, P359, P454, P851, P852, P853, P854, P855, P856, P857, P862, P863, P864, P865, P1066, P1067 } Node (4105835 @ 3067528) (20)P202 { P63, P75, P78, P79, P81, P96, P203, P205, P210, P211, P212, P381, P450, P802, P805, P826 } Node (4105703 @ 3067612) (20)P203 { P63, P72, P79, P81, P162, P202, P204, P205, P208, P209, P210, P211, P259, P450 } Node (4105691 @ 3067605) (20)P204 { P148, P162, P169, P203, P205, P207, P208, P209, P355, P357, P450, P473, P474, P475, P690, P691, P692, P932, P1002, P1003, P1018, P1019, P1020, P1023, P1024, P1025, P1027, P1029, P1030, P1033 } Node (4105690 @ 3067590) (20)P205 { P148, P162, P169, P202, P203, P204, P208, P209, P210, P211, P357, P450, P691, P692, P932, P1002, P1003, P1018, P1024, P1025, P1027, P1029, P1030, P1033 } Node (4105696 @ 3067596) (20)P206 { P24, P25, P26, P72, P89, P105, P106, P207, P208, P209, P259, P265, P280, P351 } Node (4105664 @ 3067609) (20)P207 { P204, P206, P208, P209, P259, P346, P352, P353, P354, P355, P356, P357, P450, P690, P1003, P1019, P1020, P1023, P1025, P1029 } Node (4105672 @ 3067594) (20)P208 { P26, P72, P89, P203, P204, P205, P206, P207, P209, P210, P259, P355, P357, P450, P690, P1003, P1019, P1020, P1023, P1025 } Node (4105677 @ 3067602) (20)P209 { P26, P63, P72, P89, P203, P204, P205, P206, P207, P208, P210, P259, P450, P690 } Node (4105680 @ 3067604) (20)P210 { P63, P72, P78, P79, P80, P81, P202, P203, P205, P208, P209, P211, P450 } Node (4105692 @ 3067613) (20)P211 { P63, P75, P78, P79, P96, P162, P202, P203, P205, P210, P212, P381, P450 } Node (4105703 @ 3067606) (20)P212 { P74, P75, P76, P78, P92, P96, P143, P149, P153, P174, P202, P211, P381, P382, P465, P730, P746, P747, P748, P781, P800, P802, P805, P826, P830, P831, P832, P833 } Node (4105719 @ 3067602) (20)P213 { P35, P41, P46, P66, P90, P91, P99, P100, P216, P217, P227, P894, P895, P896, P1061, P1062 } Node (4105823 @ 3067607) (20)P214 { P19, P39, P42, P43, P85, P87, P94, P139, P155, P156, P157, P158, P160, P175, P176, P177, P178, P218, P452, P466, P721, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P778, P779, P780, P785, P796, P797, P798, P844, P866, P867, P868, P872, P873, P874, P875, P877, P878, P879, P880, P881, P882, P883, P884, P886, P1036, P1038, P1039, P1040, P1043 } Node (4105771 @ 3067600) (20)P215 { P18, P43, P46, P66, P67, P87, P88, P99, P178, P181, P182, P183, P218, P222, P223, P224, P225, P452, P453, P716, P717, P732, P753, P754, P755, P785, P794, P795, P796, P797, P807, P809, P810, P818, P819, P821, P822, P823, P824, P825, P871, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105796 @ 3067596) (20)P216 { P35, P41, P66, P90, P91, P100, P213, P217, P226, P227, P1061, P1062 } Node (4105828 @ 3067603) (20)P217 { P35, P41, P66, P91, P100, P213, P216, P1061, P1062 } Node (4105828 @ 3067610) (20)P218 { P43, P67, P85, P87, P88, P156, P157, P176, P177, P178, P181, P182, P183, P214, P215, P220, P222, P223, P224, P262, P263, P452, P453, P466, P716, P717, P721, P732, P751, P752, P753, P754, P755, P758, P759, P760, P778, P779, P780, P782, P785, P794, P795, P796, P797, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P1043 } Node (4105786 @ 3067592) (20)P219 { P180, P181, P182, P183, P221, P222, P223, P224, P232, P262, P263, P264, P377, P387, P388, P389, P390, P685, P686, P687, P716, P717, P732, P782, P795, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P922, P929, P931, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P976, P995, P1007, P1008, P1009, P1010, P1012, P1013, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105797 @ 3067572) (20)P220 { P140, P156, P167, P168, P171, P176, P177, P178, P182, P183, P218, P260, P261, P262, P263, P391, P392, P393, P466, P467, P684, P685, P686, P716, P721, P736, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P785, P786, P788, P789, P790, P794, P796, P797, P808, P809, P810, P811, P812, P813, P815, P816, P817, P847, P952, P976, P992, P995, P996, P997, P998, P1004, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1036, P1038, P1043 } Node (4105775 @ 3067578) (20)P221 { P179, P180, P181, P182, P183, P219, P222, P223, P224, P225, P226, P232, P262, P263, P264, P386, P387, P388, P389, P453, P685, P686, P687, P716, P717, P732, P782, P795, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P818, P819, P821, P822, P823, P824, P825, P922, P929, P950, P953, P955, P957, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P976, P995, P1007, P1008, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105801 @ 3067574) (20)P222 { P88, P99, P178, P180, P181, P182, P183, P215, P218, P219, P221, P223, P224, P225, P226, P232, P262, P263, P264, P387, P453, P686, P687, P716, P717, P732, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P922, P962, P963, P964, P965, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105798 @ 3067583) (20)P223 { P43, P67, P87, P88, P99, P178, P181, P182, P183, P215, P218, P219, P221, P222, P224, P225, P262, P263, P453, P716, P717, P732, P752, P753, P754, P755, P782, P785, P794, P795, P796, P797, P799, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P871, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895, P896, P1041, P1050, P1051 } Node (4105794 @ 3067591) (20)P224 { P41, P66, P67, P88, P99, P100, P180, P181, P182, P183, P215, P218, P219, P221, P222, P223, P225, P226, P227, P232, P453, P716, P717, P732, P782, P785, P794, P795, P796, P797, P799, P807, P809, P810, P818, P819, P821, P822, P823, P824, P825, P871, P890, P891, P892, P893, P894, P895, P896, P1041, P1042, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105803 @ 3067590) (20)P225 { P41, P66, P88, P91, P99, P100, P180, P181, P182, P183, P215, P221, P222, P223, P224, P226, P227, P232, P453, P716, P717, P732, P794, P795, P807, P818, P819, P821, P822, P823, P824, P825, P871, P893, P894, P895, P896, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105808 @ 3067589) (20)P226 { P41, P66, P90, P91, P98, P99, P100, P179, P180, P216, P221, P222, P224, P225, P227, P228, P232, P453, P455, P717, P732, P807, P821, P822, P823, P825, P896, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051, P1061, P1062 } Node (4105815 @ 3067588) (20)P227 { P41, P66, P90, P91, P98, P99, P100, P179, P180, P213, P216, P224, P225, P226, P228, P229, P455, P1037, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1061, P1062 } Node (4105822 @ 3067588) (20)P228 { P86, P90, P95, P98, P179, P180, P226, P227, P229, P383, P384, P385, P386, P455, P468, P926, P955, P968, P969, P970, P971, P972, P973, P1037, P1042, P1044, P1045, P1046, P1047, P1048, P1049 } Node (4105825 @ 3067572) (20)P229 { P86, P90, P95, P97, P98, P179, P180, P227, P228, P383, P384, P385, P386, P455, P468, P926, P971, P972, P973, P1037, P1044, P1045 } Node (4105832 @ 3067571) (20)P230 { P198, P199, P200, P383, P384, P385, P468, P688, P689, P935, P974, P975, P977, P978 } Node (4105838 @ 3067549) (20)P231 { P196, P197, P198, P199, P200, P201, P358, P359, P360, P454, P469, P848, P849, P850, P851, P852, P853, P854, P855, P857, P858, P859, P860, P861, P862, P863, P864, P865, P1066, P1067 } Node (4105824 @ 3067526) (20)P232 { P179, P180, P181, P182, P183, P219, P221, P222, P224, P225, P226, P264, P386, P387, P388, P389, P453, P686, P687, P717, P732, P782, P799, P803, P806, P807, P809, P810, P811, P818, P819, P821, P822, P823, P824, P825, P922, P926, P929, P950, P953, P955, P957, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P995, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105805 @ 3067574) (20)P233 { P184, P241, P476, P477, P482 } Node (4105577 @ 3067526) (20)P234 { P58, P235, P239, P240, P477, P482, P555, P556 } Node (4105601 @ 3067524) (20)P235 { P58, P234, P236, P238, P239, P240, P242, P478, P555, P556, P1057 } Node (4105615 @ 3067522) (20)P236 { P58, P235, P238, P248, P448, P478, P479, P480, P556, P1057 } Node (4105631 @ 3067526) (20)P237 { P119, P187, P191, P242, P243, P244, P245, P246, P247, P250, P251, P480, P481, P553, P1057 } Node (4105621 @ 3067559) (20)P238 { P58, P235, P236, P239, P242, P247, P248, P448, P478, P480, P481, P556, P1057 } Node (4105628 @ 3067537) (20)P239 { P58, P234, P235, P238, P240, P242, P243, P481, P555, P556, P1057 } Node (4105611 @ 3067535) (20)P240 { P58, P234, P235, P239, P242, P477, P481, P482, P555, P556, P1057 } Node (4105604 @ 3067536) (20)P241 { P184, P185, P233, P476, P477, P482 } Node (4105579 @ 3067537) (20)P242 { P58, P235, P237, P238, P239, P240, P243, P248, P480, P481, P555, P556, P1057 } Node (4105615 @ 3067540) (20)P243 { P119, P187, P191, P237, P239, P242, P244, P246, P247, P250, P251, P480, P481, P553, P556, P1057 } Node (4105615 @ 3067553) (20)P244 { P119, P187, P189, P190, P191, P192, P237, P243, P245, P553, P554 } Node (4105608 @ 3067569) (20)P245 { P119, P187, P190, P191, P192, P193, P194, P195, P237, P244, P246, P250, P251, P449, P553, P554 } Node (4105617 @ 3067573) (20)P246 { P119, P187, P191, P237, P243, P245, P247, P250, P251, P480, P553 } Node (4105628 @ 3067561) (20)P247 { P237, P238, P243, P246, P248, P250, P251, P330, P331, P480, P481, P1057 } Node (4105631 @ 3067553) (20)P248 { P236, P238, P242, P247, P330, P448, P480, P481, P556, P1057 } Node (4105631 @ 3067541) (20)P249 { P120, P121, P122, P123, P125, P126, P314, P1053, P1058 } Node (4105535 @ 3067591) (20)P250 { P119, P187, P191, P192, P193, P194, P195, P237, P243, P245, P246, P247, P345, P449, P553 } Node (4105628 @ 3067568) (20)P251 { P119, P187, P191, P192, P193, P194, P195, P237, P243, P245, P246, P247, P345, P449, P553 } Node (4105628 @ 3067568) (20)P252 { P101, P107, P110, P111, P113, P116, P117, P253, P1053 } Node (4105536 @ 3067623) (20)P253 { P107, P113, P116, P122, P126, P252, P254, P255, P256, P1053, P1058 } Node (4105544 @ 3067611) (20)P254 { P122, P125, P126, P253, P255, P256, P257, P258 } Node (4105556 @ 3067607) (20)P255 { P109, P114, P116, P253, P254, P256, P257, P258, P269 } Node (4105562 @ 3067612) (20)P256 { P122, P125, P126, P253, P254, P255, P257, P1053, P1058 } Node (4105550 @ 3067607) (20)P257 { P108, P109, P114, P115, P116, P254, P255, P256, P258, P268, P379, P380, P457, P463 } Node (4105563 @ 3067621) (20)P258 { P107, P108, P109, P114, P115, P116, P117, P254, P255, P257, P379, P380, P457 } Node (4105560 @ 3067626) (20)P259 { P24, P26, P72, P89, P106, P203, P206, P207, P208, P209, P265, P450 } Node (4105672 @ 3067606) (20)P260 { P140, P141, P142, P144, P155, P156, P157, P158, P160, P166, P167, P168, P170, P171, P172, P173, P175, P176, P177, P220, P261, P391, P392, P393, P466, P467, P684, P721, P722, P731, P734, P736, P743, P744, P749, P750, P751, P752, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P798, P808, P817, P847, P951, P952, P991, P992, P993, P996, P997, P998, P999, P1000, P1001, P1004, P1011, P1014, P1015, P1016, P1017, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105761 @ 3067579) (20)P261 { P140, P141, P142, P156, P157, P158, P160, P166, P167, P168, P170, P171, P172, P175, P176, P177, P220, P260, P263, P391, P392, P393, P466, P467, P684, P721, P722, P731, P734, P736, P749, P750, P751, P752, P753, P754, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P813, P815, P816, P817, P847, P952, P991, P992, P993, P996, P997, P998, P999, P1000, P1001, P1004, P1005, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105765 @ 3067578) (20)P262 { P140, P176, P178, P181, P182, P183, P218, P219, P220, P221, P222, P223, P263, P264, P387, P388, P389, P391, P467, P684, P685, P686, P716, P717, P721, P732, P751, P752, P753, P754, P755, P756, P757, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P929, P950, P953, P960, P961, P962, P963, P976, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1051 } Node (4105785 @ 3067577) (20)P263 { P140, P156, P171, P176, P177, P178, P181, P182, P183, P218, P219, P220, P221, P222, P223, P261, P262, P264, P387, P391, P466, P467, P684, P685, P686, P716, P717, P721, P732, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P950, P976, P995, P997, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1043 } Node (4105782 @ 3067577) (20)P264 { P181, P182, P183, P219, P221, P222, P232, P262, P263, P374, P375, P376, P377, P387, P388, P389, P390, P391, P685, P686, P687, P717, P732, P782, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P910, P922, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P979, P980, P981, P982, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1041, P1042, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105793 @ 3067568) (20)P265 { P24, P25, P26, P89, P104, P105, P106, P206, P259, P280, P351 } Node (4105655 @ 3067610) (20)P266 { P21, P30, P62, P70, P104, P276, P278, P279, P280, P608, P1064 } Node (4105628 @ 3067613) (20)P267 { P34, P59, P268, P269, P270, P274, P275, P379, P463, P464 } Node (4105585 @ 3067610) (20)P268 { P32, P33, P34, P59, P109, P257, P267, P269, P275, P379, P380, P463, P464 } Node (4105581 @ 3067619) (20)P269 { P255, P267, P268, P270, P275, P463, P464 } Node (4105579 @ 3067606) (20)P270 { P267, P269, P271, P272, P273, P275, P464 } Node (4105582 @ 3067596) (20)P271 { P190, P270, P272, P273, P483, P554 } Node (4105591 @ 3067585) (20)P272 { P270, P271, P273, P483 } Node (4105586 @ 3067586) (20)P273 { P270, P271, P272, P483 } Node (4105581 @ 3067586) (20)P274 { P60, P267, P275, P464 } Node (4105601 @ 3067606) (20)P275 { P34, P59, P267, P268, P269, P270, P274, P463, P464 } Node (4105586 @ 3067609) (20)P276 { P70, P193, P194, P266, P277, P278, P279, P280, P350, P449, P608, P1064 } Node (4105628 @ 3067603) (20)P277 { P192, P193, P194, P195, P276, P278, P279, P344, P345, P349, P350, P449, P608, P1064 } Node (4105631 @ 3067592) (20)P278 { P192, P193, P194, P195, P266, P276, P277, P279, P280, P345, P349, P350, P449, P608, P1064 } Node (4105631 @ 3067598) (20)P279 { P194, P195, P266, P276, P277, P278, P280, P345, P349, P350, P351, P449, P608, P1064 } Node (4105636 @ 3067600) (20)P280 { P70, P104, P105, P106, P206, P265, P266, P276, P278, P279, P351, P608, P1064 } Node (4105645 @ 3067611) (20)P281 { P282, P283, P284, P285, P286, P287, P288, P299, P300, P301, P303, P305, P1063 } Node (4105513 @ 3067572) (20)P282 { P281, P283, P284, P285, P287, P288, P299, P300, P301, P303, P305, P1063 } Node (4105513 @ 3067573) (20)P283 { P281, P282, P284, P285, P286, P287, P288, P299, P303, P309, P310, P311, P313, P458, P1063 } Node (4105495 @ 3067573) (20)P284 { P281, P282, P283, P285, P286, P287, P288, P299, P303, P309, P310, P311, P313, P458, P1063 } Node (4105494 @ 3067569) (20)P285 { P281, P282, P283, P284, P286, P287, P288, P299, P300, P303, P310, P311, P458, P1063 } Node (4105497 @ 3067564) (20)P286 { P281, P283, P284, P285, P287, P288, P299, P300, P303, P311, P1063 } Node (4105498 @ 3067559) (20)P287 { P281, P282, P283, P284, P285, P286, P288, P299, P300, P301, P303, P305, P311, P1063 } Node (4105508 @ 3067563) (20)P288 { P281, P282, P283, P284, P285, P286, P287, P299, P300, P303, P305, P311, P1063 } Node (4105506 @ 3067559) (20)P289 { P290, P293, P294, P297, P298, P308, P395, P396, P404, P405, P460, P1065 } Node (4105469 @ 3067607) (20)P290 { P289, P291, P293, P294, P297, P308, P325, P326, P327, P396, P397, P404, P460, P1065 } Node (4105460 @ 3067603) (20)P291 { P290, P292, P294, P308, P321, P322, P323, P325, P326, P396, P397, P398, P399, P402, P403, P460, P1065 } Node (4105447 @ 3067607) (20)P292 { P291, P294, P308, P321, P322, P323, P324, P325, P326, P397, P398, P399, P400, P460 } Node (4105440 @ 3067605) (20)P293 { P289, P290, P297, P298, P308, P395, P396, P404, P405, P406, P459, P1065 } Node (4105474 @ 3067607) (20)P294 { P289, P290, P291, P292, P308, P322, P325, P326, P327, P396, P397, P398, P399, P402, P403, P460, P1065 } Node (4105452 @ 3067607) (20)P295 { P296, P307, P309, P310, P312, P328, P329 } Node (4105464 @ 3067568) (20)P296 { P295, P307, P312, P319, P320, P321, P325, P326, P327, P328, P329 } Node (4105455 @ 3067579) (20)P297 { P289, P290, P293, P298, P395, P396, P404, P405, P406, P459, P1065 } Node (4105478 @ 3067607) (20)P298 { P289, P293, P297, P313, P395, P405, P406, P407, P459, P1065 } Node (4105484 @ 3067607) (20)P299 { P281, P282, P283, P284, P285, P286, P287, P288, P300, P303, P311, P313, P458, P1063 } Node (4105501 @ 3067573) (20)P300 { P132, P281, P282, P285, P286, P287, P288, P299, P301, P302, P303, P305, P489, P1063 } Node (4105512 @ 3067559) (20)P301 { P131, P132, P281, P282, P287, P300, P302, P304, P305, P487, P489 } Node (4105526 @ 3067558) (20)P302 { P131, P132, P300, P301, P304, P305, P487, P489 } Node (4105530 @ 3067558) (20)P303 { P281, P282, P283, P284, P285, P286, P287, P288, P299, P300, P311, P1063 } Node (4105500 @ 3067558) (20)P304 { P128, P131, P132, P133, P134, P301, P302, P305, P306, P314, P487, P488, P489, P607 } Node (4105539 @ 3067559) (20)P305 { P131, P132, P281, P282, P287, P288, P300, P301, P302, P304, P489, P1063 } Node (4105520 @ 3067559) (20)P306 { P124, P128, P133, P134, P135, P304, P487, P488, P607 } Node (4105550 @ 3067559) (20)P307 { P295, P296, P312, P328, P329 } Node (4105457 @ 3067568) (20)P308 { P289, P290, P291, P292, P293, P294, P325, P326, P327, P396, P397, P398, P403, P404, P460, P1065 } Node (4105458 @ 3067607) (20)P309 { P283, P284, P295, P310, P311, P312, P458 } Node (4105477 @ 3067570) (20)P310 { P283, P284, P285, P295, P309, P311, P312, P458 } Node (4105480 @ 3067570) (20)P311 { P283, P284, P285, P286, P287, P288, P299, P303, P309, P310, P313, P458, P1063 } Node (4105492 @ 3067573) (20)P312 { P295, P296, P307, P309, P310, P328 } Node (4105470 @ 3067569) (20)P313 { P283, P284, P298, P299, P311, P458, P459 } Node (4105490 @ 3067588) (20)P314 { P120, P121, P122, P123, P124, P125, P127, P128, P249, P304, P607 } Node (4105539 @ 3067577) (20)P315 { P316, P317, P318, P319, P320, P323 } Node (4105422 @ 3067579) (20)P316 { P315, P317, P318, P319, P320, P329 } Node (4105426 @ 3067575) (20)P317 { P315, P316, P318, P319, P320, P321, P329 } Node (4105430 @ 3067574) (20)P318 { P315, P316, P317, P319, P320, P321, P328, P329 } Node (4105435 @ 3067572) (20)P319 { P296, P315, P316, P317, P318, P320, P321, P322, P325, P328, P329 } Node (4105439 @ 3067577) (20)P320 { P296, P315, P316, P317, P318, P319, P321, P322, P323, P325, P326, P327, P329 } Node (4105440 @ 3067585) (20)P321 { P291, P292, P296, P317, P318, P319, P320, P322, P323, P324, P325, P326, P327, P329 } Node (4105440 @ 3067590) (20)P322 { P291, P292, P294, P319, P320, P321, P323, P324, P325, P326 } Node (4105437 @ 3067595) (20)P323 { P291, P292, P315, P320, P321, P322, P324, P325 } Node (4105431 @ 3067596) (20)P324 { P292, P321, P322, P323 } Node (4105424 @ 3067600) (20)P325 { P290, P291, P292, P294, P296, P308, P319, P320, P321, P322, P323, P326, P327 } Node (4105446 @ 3067594) (20)P326 { P290, P291, P292, P294, P296, P308, P320, P321, P322, P325, P327, P1065 } Node (4105455 @ 3067592) (20)P327 { P290, P294, P296, P308, P320, P321, P325, P326, P1065 } Node (4105457 @ 3067588) (20)P328 { P295, P296, P307, P312, P318, P319, P329 } Node (4105452 @ 3067568) (20)P329 { P295, P296, P307, P316, P317, P318, P319, P320, P321, P328 } Node (4105445 @ 3067571) (20)P330 { P247, P248, P331, P332, P333, P338, P339, P448, P480 } Node (4105647 @ 3067552) (20)P331 { P247, P330, P332, P333, P338, P339, P340, P342, P448 } Node (4105650 @ 3067555) (20)P332 { P330, P331, P333, P337, P338, P339, P340, P342, P448 } Node (4105652 @ 3067555) (20)P333 { P330, P331, P332, P336, P337, P338, P339, P340, P341 } Node (4105661 @ 3067555) (20)P334 { P335, P336, P337, P472 } Node (4105680 @ 3067545) (20)P335 { P334, P336, P337, P472 } Node (4105683 @ 3067544) (20)P336 { P333, P334, P335, P337, P338, P341, P472 } Node (4105673 @ 3067552) (20)P337 { P332, P333, P334, P335, P336, P338, P339, P340, P341, P353, P356 } Node (4105670 @ 3067557) (20)P338 { P330, P331, P332, P333, P336, P337, P339, P340, P341, P342, P352, P353, P354, P356 } Node (4105664 @ 3067560) (20)P339 { P330, P331, P332, P333, P337, P338, P340, P341, P342, P343, P344, P346, P347, P348, P352, P353, P354, P356 } Node (4105658 @ 3067566) (20)P340 { P331, P332, P333, P337, P338, P339, P341, P342, P343, P344, P346, P347, P348, P352, P353, P354, P356 } Node (4105658 @ 3067570) (20)P341 { P333, P336, P337, P338, P339, P340, P342, P346, P352, P353, P354, P355, P356, P357, P473, P474, P690, P1003, P1019, P1020, P1023, P1025 } Node (4105672 @ 3067567) (20)P342 { P331, P332, P338, P339, P340, P341, P343, P344, P345, P346, P347, P348, P349, P352, P356 } Node (4105654 @ 3067574) (20)P343 { P195, P339, P340, P342, P344, P345, P346, P347, P348, P349, P350, P351, P352 } Node (4105649 @ 3067577) (20)P344 { P194, P195, P277, P339, P340, P342, P343, P345, P346, P347, P348, P349, P350, P351, P449 } Node (4105645 @ 3067579) (20)P345 { P193, P194, P195, P250, P251, P277, P278, P279, P342, P343, P344, P347, P348, P349, P350, P351, P449, P608 } Node (4105638 @ 3067582) (20)P346 { P207, P339, P340, P341, P342, P343, P344, P347, P348, P349, P351, P352, P353, P354, P355, P356, P690, P1020 } Node (4105658 @ 3067581) (20)P347 { P339, P340, P342, P343, P344, P345, P346, P348, P349, P351, P352, P354, P355, P356 } Node (4105655 @ 3067581) (20)P348 { P339, P340, P342, P343, P344, P345, P346, P347, P349, P350, P351, P352 } Node (4105653 @ 3067584) (20)P349 { P194, P195, P277, P278, P279, P342, P343, P344, P345, P346, P347, P348, P350, P351, P449, P608, P1064 } Node (4105645 @ 3067588) (20)P350 { P192, P193, P194, P195, P276, P277, P278, P279, P343, P344, P345, P348, P349, P351, P449, P608, P1064 } Node (4105637 @ 3067590) (20)P351 { P206, P265, P279, P280, P343, P344, P345, P346, P347, P348, P349, P350 } Node (4105652 @ 3067595) (20)P352 { P207, P338, P339, P340, P341, P342, P343, P346, P347, P348, P353, P354, P355, P356, P357, P473, P690, P1003, P1019, P1020, P1023, P1025 } Node (4105666 @ 3067579) (20)P353 { P207, P337, P338, P339, P340, P341, P346, P352, P354, P355, P356, P357, P473, P474, P475, P690, P932, P1003, P1019, P1020, P1023, P1025, P1027, P1029 } Node (4105675 @ 3067576) (20)P354 { P207, P338, P339, P340, P341, P346, P347, P352, P353, P355, P356, P357, P473, P474, P475, P690, P1003, P1019, P1020, P1023, P1025, P1027, P1029 } Node (4105674 @ 3067577) (20)P355 { P204, P207, P208, P341, P346, P347, P352, P353, P354, P356, P357, P473, P474, P690, P1003, P1019, P1020, P1023, P1025, P1027, P1029 } Node (4105673 @ 3067584) (20)P356 { P207, P337, P338, P339, P340, P341, P342, P346, P347, P352, P353, P354, P355, P357, P473, P474, P690, P1003, P1019, P1020, P1023, P1025, P1029 } Node (4105671 @ 3067575) (20)P357 { P162, P169, P204, P205, P207, P208, P341, P352, P353, P354, P355, P356, P473, P474, P475, P690, P691, P932, P1002, P1003, P1019, P1020, P1023, P1024, P1027, P1029, P1030 } Node (4105683 @ 3067583) (20)P358 { P196, P197, P198, P200, P201, P231, P359, P360, P454, P469, P848, P849, P850, P851, P852, P853, P854, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P1066, P1067 } Node (4105822 @ 3067526) (20)P359 { P196, P197, P198, P201, P231, P358, P360, P469, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P906, P907, P908, P909 } Node (4105817 @ 3067527) (20)P360 { P231, P358, P359, P361, P362, P378, P469, P683, P827, P846, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P876, P897, P905, P906, P907, P908, P909, P911, P912, P913, P914, P915, P917, P918, P919, P920, P921, P923, P924, P925, P934, P978, P982, P983, P984, P985, P986, P987, P988, P989, P990 } Node (4105807 @ 3067533) (20)P361 { P360, P362, P363, P364, P365, P375, P376, P377, P390, P683, P827, P846, P848, P858, P859, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P934, P958, P979, P980, P981, P982, P984, P985, P986 } Node (4105793 @ 3067535) (20)P362 { P360, P361, P363, P364, P365, P375, P376, P377, P390, P683, P827, P846, P858, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P931, P933, P934, P956, P958, P959, P979, P980, P981, P982, P984, P985, P986 } Node (4105792 @ 3067537) (20)P363 { P361, P362, P364, P365, P366, P370, P374, P375, P376, P470, P683, P804, P827, P846, P870, P876, P897, P898, P899, P900, P901, P902, P903, P904, P905, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P936, P937, P941, P942, P943, P944, P945, P946, P947 } Node (4105779 @ 3067537) (20)P364 { P361, P362, P363, P365, P375, P376, P377, P390, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P956, P958, P979, P980, P981, P982 } Node (4105787 @ 3067536) (20)P365 { P361, P362, P363, P364, P366, P367, P368, P370, P371, P373, P374, P376, P470, P471, P683, P733, P804, P827, P870, P876, P897, P898, P899, P900, P901, P902, P903, P904, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949 } Node (4105775 @ 3067538) (20)P366 { P363, P365, P367, P368, P369, P370, P371, P373, P394, P470, P471, P733, P804, P870, P898, P901, P902, P930, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P1006 } Node (4105764 @ 3067539) (20)P367 { P365, P366, P368, P369, P370, P371, P372, P373, P394, P470, P471, P733, P804, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P1005, P1006 } Node (4105759 @ 3067540) (20)P368 { P365, P366, P367, P369, P370, P371, P372, P373, P394, P470, P471, P733, P804, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P1006 } Node (4105759 @ 3067539) (20)P369 { P366, P367, P368, P370, P371, P372, P471, P733, P804, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949 } Node (4105750 @ 3067540) (20)P370 { P363, P365, P366, P367, P368, P369, P371, P373, P374, P393, P394, P470, P471, P733, P804, P870, P898, P901, P930, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P1004, P1005, P1006, P1016 } Node (4105764 @ 3067544) (20)P371 { P365, P366, P367, P368, P369, P370, P372, P373, P374, P392, P393, P394, P470, P471, P684, P733, P804, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P1004, P1005, P1006, P1016, P1017 } Node (4105761 @ 3067551) (20)P372 { P367, P368, P369, P371, P804, P870, P898, P936, P937, P938, P941, P942, P943, P944, P945 } Node (4105744 @ 3067541) (20)P373 { P140, P168, P365, P366, P367, P368, P370, P371, P374, P391, P392, P393, P394, P470, P471, P684, P685, P733, P772, P773, P774, P775, P776, P777, P788, P789, P790, P804, P808, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P998, P1004, P1005, P1006, P1007, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105767 @ 3067556) (20)P374 { P140, P264, P363, P365, P370, P371, P373, P375, P376, P377, P388, P389, P390, P391, P392, P393, P394, P470, P471, P683, P684, P685, P686, P733, P774, P847, P897, P900, P910, P911, P912, P913, P914, P916, P923, P924, P925, P929, P931, P937, P938, P939, P940, P944, P945, P946, P947, P948, P949, P950, P952, P953, P956, P957, P958, P959, P960, P961, P976, P979, P980, P981, P991, P992, P993, P995, P996, P997, P998, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105779 @ 3067556) (20)P375 { P264, P361, P362, P363, P364, P374, P376, P377, P387, P388, P389, P390, P391, P683, P685, P686, P687, P803, P806, P827, P846, P876, P897, P899, P900, P901, P903, P904, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014 } Node (4105789 @ 3067553) (20)P376 { P264, P361, P362, P363, P364, P365, P374, P375, P377, P387, P388, P389, P390, P683, P685, P686, P687, P803, P806, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995, P1007, P1008, P1009, P1010, P1012 } Node (4105790 @ 3067551) (20)P377 { P219, P264, P361, P362, P364, P374, P375, P376, P378, P387, P388, P389, P390, P683, P685, P686, P687, P799, P803, P806, P846, P876, P897, P900, P905, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P990, P995, P1007, P1008, P1009 } Node (4105796 @ 3067553) (20)P378 { P360, P377, P385, P386, P387, P388, P389, P390, P683, P687, P688, P900, P908, P909, P910, P911, P912, P913, P916, P922, P926, P929, P931, P934, P935, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P974, P975, P977, P978, P979, P980, P981, P982, P983, P984, P985, P986, P987, P988, P989, P990 } Node (4105810 @ 3067551) (20)P379 { P32, P33, P34, P53, P54, P55, P59, P108, P109, P257, P258, P267, P268, P380, P457, P463 } Node (4105577 @ 3067628) (20)P380 { P27, P29, P32, P33, P34, P51, P52, P53, P54, P55, P59, P71, P73, P108, P109, P114, P257, P258, P268, P379, P457, P463, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720 } Node (4105576 @ 3067633) (20)P381 { P64, P65, P74, P75, P76, P78, P92, P96, P143, P153, P202, P211, P212, P382, P465, P730, P747, P748, P781, P800, P802, P805, P820, P826, P830, P831, P832, P833, P834, P835 } Node (4105721 @ 3067610) (20)P382 { P64, P65, P69, P74, P75, P76, P78, P92, P96, P143, P153, P154, P159, P174, P212, P381, P465, P730, P735, P737, P738, P745, P746, P747, P748, P781, P800, P802, P805, P820, P826, P829, P830, P831, P832, P833, P834, P835, P836, P837, P839, P840 } Node (4105728 @ 3067608) (20)P383 { P86, P95, P98, P179, P228, P229, P230, P384, P385, P386, P455, P468, P688, P689, P926, P935, P971, P972, P973, P974, P975, P1037 } Node (4105834 @ 3067564) (20)P384 { P86, P95, P179, P199, P228, P229, P230, P383, P385, P386, P468, P688, P689, P926, P935, P955, P969, P970, P971, P972, P973, P974, P975, P977, P978, P983, P987, P1037, P1044 } Node (4105830 @ 3067562) (20)P385 { P95, P179, P180, P199, P228, P229, P230, P378, P383, P384, P386, P468, P688, P689, P926, P935, P955, P966, P967, P968, P969, P970, P971, P972, P973, P974, P975, P977, P978, P983, P987, P989, P990, P1037, P1042, P1044, P1045, P1046, P1047 } Node (4105824 @ 3067562) (20)P386 { P179, P180, P221, P228, P229, P232, P378, P383, P384, P385, P387, P468, P687, P688, P922, P926, P935, P955, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P974, P975, P977, P978, P983, P984, P985, P986, P987, P988, P989, P990, P1037, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105817 @ 3067563) (20)P387 { P180, P182, P183, P219, P221, P222, P232, P262, P263, P264, P375, P376, P377, P378, P386, P388, P389, P390, P685, P686, P687, P717, P732, P782, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P818, P819, P821, P822, P823, P824, P825, P910, P911, P916, P922, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995, P1007, P1008, P1009, P1010, P1012, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105798 @ 3067566) (20)P388 { P182, P183, P219, P221, P232, P262, P264, P374, P375, P376, P377, P378, P387, P389, P390, P391, P683, P685, P686, P687, P782, P799, P803, P806, P809, P810, P811, P812, P818, P819, P824, P825, P900, P910, P911, P912, P913, P916, P922, P925, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P995, P1007, P1008, P1009, P1010, P1012, P1013, P1041, P1042, P1047, P1048, P1049, P1050, P1051 } Node (4105796 @ 3067562) (20)P389 { P183, P219, P221, P232, P262, P264, P374, P375, P376, P377, P378, P387, P388, P390, P391, P683, P685, P686, P687, P782, P799, P803, P806, P809, P810, P811, P897, P900, P910, P911, P912, P913, P914, P915, P916, P922, P923, P924, P925, P929, P931, P934, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1041, P1051 } Node (4105792 @ 3067559) (20)P390 { P219, P264, P361, P362, P364, P374, P375, P376, P377, P378, P387, P388, P389, P683, P685, P686, P687, P799, P803, P806, P897, P900, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P929, P931, P934, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P995, P1007, P1008, P1009, P1010, P1012 } Node (4105794 @ 3067554) (20)P391 { P140, P167, P168, P171, P176, P183, P220, P260, P261, P262, P263, P264, P373, P374, P375, P388, P389, P392, P393, P394, P467, P471, P684, P685, P686, P756, P757, P761, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P788, P789, P790, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P817, P847, P929, P931, P950, P952, P953, P956, P957, P960, P961, P976, P991, P992, P993, P995, P996, P997, P998, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105777 @ 3067568) (20)P392 { P140, P141, P166, P167, P168, P171, P176, P220, P260, P261, P371, P373, P374, P391, P393, P394, P467, P471, P684, P685, P721, P722, P731, P733, P734, P736, P756, P757, P758, P759, P761, P762, P763, P764, P765, P766, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P817, P847, P939, P940, P947, P948, P949, P952, P991, P992, P993, P996, P997, P998, P999, P1000, P1001, P1004, P1005, P1006, P1007, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1052, P1059 } Node (4105764 @ 3067568) (20)P393 { P140, P141, P167, P168, P171, P220, P260, P261, P370, P371, P373, P374, P391, P392, P394, P467, P471, P684, P685, P733, P734, P761, P762, P772, P773, P774, P775, P776, P777, P783, P784, P786, P788, P789, P790, P804, P808, P847, P870, P898, P937, P938, P939, P940, P943, P944, P945, P946, P947, P948, P949, P952, P991, P993, P996, P997, P998, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105766 @ 3067562) (20)P394 { P140, P141, P167, P168, P366, P367, P368, P370, P371, P373, P374, P391, P392, P393, P471, P684, P733, P734, P772, P773, P774, P775, P776, P777, P783, P784, P786, P788, P789, P790, P804, P808, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P998, P1001, P1004, P1005, P1006, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105762 @ 3067558) (20)P395 { P289, P293, P297, P298, P396, P404, P405, P406, P459, P1065 } Node (4105478 @ 3067614) (20)P396 { P289, P290, P291, P293, P294, P297, P308, P395, P397, P402, P403, P404, P405, P460, P1065 } Node (4105463 @ 3067615) (20)P397 { P290, P291, P292, P294, P308, P396, P398, P399, P400, P401, P402, P403, P404, P413, P460 } Node (4105449 @ 3067617) (20)P398 { P291, P292, P294, P308, P397, P399, P400, P401, P402, P403, P460 } Node (4105441 @ 3067616) (20)P399 { P291, P292, P294, P397, P398, P400, P401, P402, P403, P460 } Node (4105437 @ 3067617) (20)P400 { P292, P397, P398, P399, P401, P402 } Node (4105431 @ 3067622) (20)P401 { P397, P398, P399, P400, P402, P403, P412, P413, P414, P415, P416, P460, P462 } Node (4105440 @ 3067626) (20)P402 { P291, P294, P396, P397, P398, P399, P400, P401, P403, P404, P410, P411, P412, P413, P414, P415, P460 } Node (4105448 @ 3067625) (20)P403 { P291, P294, P308, P396, P397, P398, P399, P401, P402, P404, P409, P410, P411, P412, P413, P460 } Node (4105454 @ 3067624) (20)P404 { P289, P290, P293, P297, P308, P395, P396, P397, P402, P403, P405, P406, P408, P409, P410, P411, P413, P460, P461, P1065 } Node (4105466 @ 3067622) (20)P405 { P289, P293, P297, P298, P395, P396, P404, P406, P408, P409, P460, P461 } Node (4105474 @ 3067621) (20)P406 { P293, P297, P298, P395, P404, P405, P407, P408, P456 } Node (4105485 @ 3067619) (20)P407 { P118, P298, P406, P456 } Node (4105498 @ 3067621) (20)P408 { P404, P405, P406, P409, P410, P461 } Node (4105479 @ 3067636) (20)P409 { P403, P404, P405, P408, P410, P411, P412, P413, P461 } Node (4105468 @ 3067637) (20)P410 { P402, P403, P404, P408, P409, P411, P412, P413, P414, P461 } Node (4105462 @ 3067638) (20)P411 { P402, P403, P404, P409, P410, P412, P413, P414, P415, P461 } Node (4105457 @ 3067639) (20)P412 { P401, P402, P403, P409, P410, P411, P413, P414, P415, P416 } Node (4105453 @ 3067639) (20)P413 { P397, P401, P402, P403, P404, P409, P410, P411, P412, P414, P415, P460, P461 } Node (4105454 @ 3067633) (20)P414 { P401, P402, P410, P411, P412, P413, P415, P416, P462 } Node (4105443 @ 3067641) (20)P415 { P401, P402, P411, P412, P413, P414, P416, P462, P606 } Node (4105438 @ 3067642) (20)P416 { P401, P412, P414, P415, P462, P606 } Node (4105434 @ 3067642) (20)P417 { P418, P419, P420, P421, P563, P568 } Node (4105558 @ 3067725) (20)P418 { P417, P419, P420, P421, P563, P568 } Node (4105556 @ 3067728) (20)P419 { P417, P418, P420, P421, P563, P568 } Node (4105561 @ 3067735) (20)P420 { P417, P418, P419, P421, P422, P423, P563, P567, P568, P1070 } Node (4105548 @ 3067735) (20)P421 { P417, P418, P419, P420, P422, P423, P563, P568, P1070 } Node (4105553 @ 3067740) (20)P422 { P420, P421, P423, P424, P425, P559, P563, P567, P592, P596, P1070 } Node (4105540 @ 3067744) (20)P423 { P420, P421, P422, P424, P425, P427, P592, P596, P1070 } Node (4105544 @ 3067748) (20)P424 { P422, P423, P425, P426, P427, P559, P592, P596, P1070 } Node (4105532 @ 3067752) (20)P425 { P422, P423, P424, P426, P427, P429, P592, P596, P1070 } Node (4105537 @ 3067756) (20)P426 { P424, P425, P427, P428, P429, P592, P596 } Node (4105526 @ 3067759) (20)P427 { P423, P424, P425, P426, P428, P429, P592 } Node (4105531 @ 3067762) (20)P428 { P426, P427, P429, P430, P431, P592 } Node (4105520 @ 3067768) (20)P429 { P425, P426, P427, P428, P430, P431, P592 } Node (4105525 @ 3067771) (20)P430 { P428, P429, P431, P432, P433, P435 } Node (4105514 @ 3067778) (20)P431 { P428, P429, P430, P432, P433 } Node (4105519 @ 3067780) (20)P432 { P430, P431, P433, P434, P435 } Node (4105508 @ 3067786) (20)P433 { P430, P431, P432, P434, P435 } Node (4105513 @ 3067788) (20)P434 { P432, P433, P435, P436, P437, P438 } Node (4105503 @ 3067795) (20)P435 { P430, P432, P433, P434, P436, P437 } Node (4105508 @ 3067797) (20)P436 { P434, P435, P437, P438, P440, P441 } Node (4105496 @ 3067803) (20)P437 { P434, P435, P436, P438, P440, P441 } Node (4105501 @ 3067807) (20)P438 { P434, P436, P437, P439, P440, P441, P446, P594 } Node (4105489 @ 3067804) (20)P439 { P438, P440, P441, P446, P580, P594, P598, P609 } Node (4105475 @ 3067808) (20)P440 { P436, P437, P438, P439, P441, P446, P580, P609 } Node (4105485 @ 3067811) (20)P441 { P436, P437, P438, P439, P440, P442, P446, P580, P609 } Node (4105488 @ 3067816) (20)P442 { P441, P446, P447, P580, P598, P609, P610 } Node (4105477 @ 3067832) (20)P443 { P444, P445 } Node (4105451 @ 3067870) (20)P444 { P443, P445, P610, P611 } Node (4105459 @ 3067859) (20)P445 { P443, P444 } Node (4105446 @ 3067859) (20)P446 { P438, P439, P440, P441, P442, P580, P598, P609 } Node (4105475 @ 3067814) (20)P447 { P442, P580, P582, P598, P609, P610, P611 } Node (4105463 @ 3067833) (20)P448 { P236, P238, P248, P330, P331, P332, P479, P480 } Node (4105645 @ 3067537) (20)P449 { P192, P193, P194, P195, P245, P250, P251, P276, P277, P278, P279, P344, P345, P349, P350, P608, P1064 } Node (4105630 @ 3067587) (20)P450 { P63, P72, P162, P202, P203, P204, P205, P207, P208, P209, P210, P211, P259 } Node (4105685 @ 3067604) (20)P451 { P138, P141, P142, P144, P149, P150, P151, P152, P160, P164, P165, P166, P167, P170, P172, P173, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P745, P746, P747, P748, P763, P764, P765, P766, P767, P768, P769, P770, P771, P783, P784, P786, P787, P788, P791, P792, P793, P808, P845, P951, P999, P1000, P1001, P1052, P1059 } Node (4105740 @ 3067579) (20)P452 { P19, P39, P42, P43, P45, P67, P85, P87, P94, P156, P157, P158, P176, P177, P178, P214, P215, P218, P466, P716, P721, P749, P750, P751, P752, P753, P754, P755, P757, P758, P759, P760, P778, P779, P780, P785, P794, P795, P796, P797, P867, P868, P872, P873, P874, P875, P877, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P1036, P1038, P1039, P1040, P1043 } Node (4105777 @ 3067602) (20)P453 { P41, P66, P67, P87, P88, P99, P100, P178, P181, P182, P183, P215, P218, P221, P222, P223, P224, P225, P226, P232, P716, P717, P732, P782, P785, P794, P795, P796, P797, P807, P809, P810, P818, P819, P821, P822, P823, P824, P825, P871, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895, P896, P1041, P1048, P1049, P1050, P1051 } Node (4105800 @ 3067593) (20)P454 { P196, P197, P198, P200, P201, P231, P358, P853, P854, P855, P856, P857, P864, P865, P1066, P1067 } Node (4105839 @ 3067524) (20)P455 { P86, P90, P91, P95, P97, P98, P100, P179, P180, P226, P227, P228, P229, P383, P1037, P1042, P1044, P1045, P1046, P1047, P1061, P1062 } Node (4105827 @ 3067582) (20)P456 { P118, P406, P407 } Node (4105503 @ 3067623) (20)P457 { P27, P29, P33, P34, P51, P52, P53, P54, P71, P102, P108, P109, P114, P115, P116, P257, P258, P379, P380, P463, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P718, P719, P720, P724 } Node (4105566 @ 3067634) (20)P458 { P283, P284, P285, P299, P309, P310, P311, P313, P459, P1063 } Node (4105491 @ 3067581) (20)P459 { P293, P297, P298, P313, P395, P458 } Node (4105487 @ 3067598) (20)P460 { P289, P290, P291, P292, P294, P308, P396, P397, P398, P399, P401, P402, P403, P404, P405, P413, P1065 } Node (4105456 @ 3067616) (20)P461 { P404, P405, P408, P409, P410, P411, P413 } Node (4105473 @ 3067637) (20)P462 { P401, P414, P415, P416, P606 } Node (4105430 @ 3067643) (20)P463 { P31, P32, P33, P34, P55, P59, P109, P257, P267, P268, P269, P275, P379, P380, P457 } Node (4105580 @ 3067625) (20)P464 { P59, P60, P267, P268, P269, P270, P274, P275 } Node (4105594 @ 3067607) (20)P465 { P96, P138, P143, P145, P147, P148, P149, P153, P164, P174, P212, P381, P382, P692, P746, P747, P748, P793, P845, P954, P994, P1018, P1021, P1022, P1026, P1028, P1031, P1032, P1034, P1035 } Node (4105720 @ 3067593) (20)P466 { P19, P43, P85, P87, P94, P139, P156, P157, P158, P160, P171, P175, P176, P177, P178, P214, P218, P220, P260, P261, P263, P452, P467, P716, P721, P736, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P777, P778, P779, P780, P785, P794, P795, P796, P797, P813, P815, P816, P817, P873, P874, P875, P877, P878, P879, P880, P881, P882, P883, P1036, P1038, P1039, P1040, P1043 } Node (4105773 @ 3067594) (20)P467 { P140, P141, P156, P157, P158, P160, P167, P168, P171, P172, P176, P177, P178, P220, P260, P261, P262, P263, P391, P392, P393, P466, P684, P685, P721, P722, P731, P734, P736, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P783, P784, P786, P788, P789, P790, P797, P808, P810, P811, P812, P813, P815, P816, P817, P847, P952, P991, P992, P993, P996, P997, P998, P1001, P1004, P1005, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105770 @ 3067578) (20)P468 { P95, P199, P200, P228, P229, P230, P383, P384, P385, P386, P688, P689, P926, P935, P971, P972, P973, P974, P975, P977, P978, P983, P987 } Node (4105833 @ 3067555) (20)P469 { P197, P198, P231, P358, P359, P360, P846, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P905, P906, P907, P908, P909 } Node (4105813 @ 3067528) (20)P470 { P363, P364, P365, P366, P367, P368, P370, P371, P373, P374, P471, P733, P804, P827, P870, P897, P898, P899, P901, P902, P903, P904, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949 } Node (4105771 @ 3067538) (20)P471 { P140, P365, P366, P367, P368, P369, P370, P371, P373, P374, P391, P392, P393, P394, P470, P684, P733, P774, P789, P790, P804, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P998, P1004, P1005, P1006, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105765 @ 3067553) (20)P472 { P334, P335, P336 } Node (4105690 @ 3067546) (20)P473 { P169, P204, P341, P352, P353, P354, P355, P356, P357, P474, P475, P690, P932, P1002, P1003, P1019, P1020, P1023, P1025, P1027, P1029, P1030 } Node (4105681 @ 3067575) (20)P474 { P148, P162, P169, P204, P341, P353, P354, P355, P356, P357, P473, P475, P690, P691, P692, P932, P1002, P1003, P1018, P1019, P1020, P1023, P1024, P1025, P1027, P1029, P1030, P1032, P1033 } Node (4105689 @ 3067574) (20)P475 { P145, P148, P161, P162, P169, P204, P353, P354, P357, P473, P474, P691, P692, P932, P954, P1002, P1003, P1018, P1019, P1023, P1024, P1025, P1027, P1029, P1030, P1031, P1032, P1033, P1034 } Node (4105693 @ 3067573) (20)P476 { P136, P184, P233, P241 } Node (4105569 @ 3067524) (20)P477 { P233, P234, P240, P241, P482, P555 } Node (4105591 @ 3067525) (20)P478 { P58, P235, P236, P238, P479, P556 } Node (4105627 @ 3067521) (20)P479 { P236, P448, P478 } Node (4105640 @ 3067520) (20)P480 { P236, P237, P238, P242, P243, P246, P247, P248, P330, P448, P481, P556, P1057 } Node (4105631 @ 3067545) (20)P481 { P58, P119, P237, P238, P239, P240, P242, P243, P247, P248, P480, P553, P555, P556, P1057 } Node (4105614 @ 3067546) (20)P482 { P184, P233, P234, P240, P241, P477, P555 } Node (4105589 @ 3067537) (20)P483 { P186, P188, P189, P190, P271, P272, P273 } Node (4105588 @ 3067570) (20)P484 { P129, P130, P136, P137, P485, P486 } Node (4105539 @ 3067521) (20)P485 { P129, P130, P131, P132, P135, P136, P137, P484, P486, P487 } Node (4105535 @ 3067535) (20)P486 { P129, P130, P133, P134, P135, P136, P137, P484, P485, P487 } Node (4105552 @ 3067535) (20)P487 { P131, P132, P133, P134, P135, P301, P302, P304, P306, P485, P486, P488, P489 } Node (4105539 @ 3067548) (20)P488 { P124, P128, P133, P134, P135, P304, P306, P487, P607 } Node (4105553 @ 3067560) (20)P489 { P131, P132, P300, P301, P302, P304, P305, P487 } Node (4105529 @ 3067558) (20)P490 { P491, P492, P494, P498, P510, P517, P616 } Node (4105298 @ 3067674) (20)P491 { P490, P492, P493, P494, P517, P616 } Node (4105305 @ 3067671) (20)P492 { P490, P491, P493, P517, P518, P1073 } Node (4105313 @ 3067667) (20)P493 { P491, P492, P495, P496, P517, P518, P615, P1073 } Node (4105321 @ 3067664) (20)P494 { P490, P491, P498, P510, P616 } Node (4105290 @ 3067676) (20)P495 { P493, P496, P497, P518, P519, P520, P615, P1073 } Node (4105332 @ 3067660) (20)P496 { P493, P495, P497, P519, P520, P615, P1073 } Node (4105339 @ 3067657) (20)P497 { P495, P496, P519, P520, P615 } Node (4105346 @ 3067655) (20)P498 { P490, P494, P499, P509, P510, P616 } Node (4105282 @ 3067679) (20)P499 { P498, P500, P507, P508, P509, P510 } Node (4105266 @ 3067684) (20)P500 { P499, P501, P507, P508, P509 } Node (4105260 @ 3067686) (20)P501 { P500, P502, P503, P507, P511 } Node (4105247 @ 3067692) (20)P502 { P501, P503, P504, P507, P511, P512 } Node (4105240 @ 3067695) (20)P503 { P501, P502, P504, P511, P512 } Node (4105231 @ 3067698) (20)P504 { P502, P503, P505, P506, P512, P513 } Node (4105222 @ 3067701) (20)P505 { P504, P506, P512, P513, P521 } Node (4105211 @ 3067705) (20)P506 { P504, P505, P513, P514, P521 } Node (4105203 @ 3067707) (20)P507 { P499, P500, P501, P502, P508, P511 } Node (4105249 @ 3067681) (20)P508 { P499, P500, P507, P509, P510 } Node (4105261 @ 3067677) (20)P509 { P498, P499, P500, P508, P510, P616 } Node (4105268 @ 3067674) (20)P510 { P490, P494, P498, P499, P508, P509, P616 } Node (4105279 @ 3067669) (20)P511 { P501, P502, P503, P507, P512 } Node (4105239 @ 3067684) (20)P512 { P502, P503, P504, P505, P511, P513 } Node (4105221 @ 3067692) (20)P513 { P504, P505, P506, P512, P521 } Node (4105206 @ 3067698) (20)P514 { P506, P521, P522, P523, P617 } Node (4105186 @ 3067705) (20)P515 { P516, P523, P524, P525, P617 } Node (4105163 @ 3067715) (20)P516 { P112, P515, P524, P525 } Node (4105153 @ 3067722) (20)P517 { P490, P491, P492, P493, P518 } Node (4105306 @ 3067659) (20)P518 { P492, P493, P495, P517, P519, P615, P1073 } Node (4105318 @ 3067655) (20)P519 { P495, P496, P497, P518, P520, P615, P1073 } Node (4105336 @ 3067648) (20)P520 { P495, P496, P497, P519, P615, P1073 } Node (4105338 @ 3067648) (20)P521 { P505, P506, P513, P514, P522, P523, P617 } Node (4105193 @ 3067711) (20)P522 { P514, P521, P523, P617 } Node (4105183 @ 3067714) (20)P523 { P514, P515, P521, P522, P524, P617 } Node (4105177 @ 3067717) (20)P524 { P515, P516, P523, P525 } Node (4105163 @ 3067722) (20)P525 { P112, P515, P516, P524 } Node (4105154 @ 3067724) (20)P526 { P528, P535, P612, P1071, P1074 } Node (4105348 @ 3067814) (20)P527 { P535, P540, P546, P1071, P1074 } Node (4105336 @ 3067831) (20)P528 { P526, P529, P537, P612 } Node (4105363 @ 3067807) (20)P529 { P528, P537, P538 } Node (4105377 @ 3067794) (20)P530 { P531, P538, P614 } Node (4105397 @ 3067784) (20)P531 { P530, P532, P533, P539, P614 } Node (4105412 @ 3067781) (20)P532 { P531, P539 } Node (4105419 @ 3067793) (20)P533 { P531, P539, P579, P597 } Node (4105428 @ 3067773) (20)P534 { P574, P587 } Node (4105428 @ 3067819) (20)P535 { P526, P527, P1071, P1074 } Node (4105348 @ 3067823) (20)P536 { P569, P573 } Node (4105354 @ 3067850) (20)P537 { P528, P529, P612 } Node (4105366 @ 3067797) (20)P538 { P529, P530 } Node (4105384 @ 3067785) (20)P539 { P531, P532, P533, P614 } Node (4105415 @ 3067774) (20)P540 { P527, P546, P1071, P1074 } Node (4105323 @ 3067831) (20)P541 { P546 } Node (4105304 @ 3067838) (20)P543 { P548, P549, P550 } Node (4105239 @ 3067864) (20)P544 { P548, P552 } Node (4105207 @ 3067876) (20)P545 { P549 } Node (4105265 @ 3067859) (20)P546 { P527, P540, P541 } Node (4105322 @ 3067841) (20)P547 { P569, P571 } Node (4105333 @ 3067860) (20)P548 { P543, P544 } Node (4105225 @ 3067874) (20)P549 { P543, P545, P550 } Node (4105249 @ 3067867) (20)P550 { P543, P549, P551 } Node (4105248 @ 3067874) (20)P551 { P550, P570, P572 } Node (4105257 @ 3067889) (20)P552 { P544, P604 } Node (4105192 @ 3067886) (20)P553 { P119, P187, P189, P190, P191, P237, P243, P244, P245, P246, P250, P251, P481 } Node (4105612 @ 3067561) (20)P554 { P187, P190, P191, P192, P193, P244, P245, P271 } Node (4105608 @ 3067586) (20)P555 { P58, P234, P235, P239, P240, P242, P477, P481, P482, P556, P1057 } Node (4105608 @ 3067534) (20)P556 { P58, P234, P235, P236, P238, P239, P240, P242, P243, P248, P478, P480, P481, P555, P1057 } Node (4105616 @ 3067537) (20)P557 { P571 } Node (4105312 @ 3067876) (20)P559 { P422, P424, P562, P563, P565, P567, P592, P596, P1070 } Node (4105526 @ 3067735) (20)P560 { P561, P562 } Node (4105507 @ 3067707) (20)P561 { P560, P564, P566, P586 } Node (4105525 @ 3067707) (20)P562 { P559, P560, P565, P567, P596 } Node (4105515 @ 3067725) (20)P563 { P417, P418, P419, P420, P421, P422, P559, P567, P568, P1070 } Node (4105543 @ 3067728) (20)P564 { P561, P566, P586, P591 } Node (4105530 @ 3067704) (20)P565 { P559, P562, P596 } Node (4105512 @ 3067737) (20)P566 { P561, P564, P584, P586, P591 } Node (4105536 @ 3067702) (20)P567 { P420, P422, P559, P562, P563, P596, P1070 } Node (4105531 @ 3067728) (20)P568 { P417, P418, P419, P420, P421, P563 } Node (4105554 @ 3067724) (20)P569 { P536, P547, P573 } Node (4105350 @ 3067856) (20)P570 { P551, P572 } Node (4105262 @ 3067894) (20)P571 { P547, P557 } Node (4105330 @ 3067869) (20)P572 { P551, P570 } Node (4105243 @ 3067900) (20)P573 { P536, P569, P578 } Node (4105364 @ 3067856) (20)P574 { P534, P587, P613 } Node (4105425 @ 3067832) (20)P576 { P630, P631 } Node (4105195 @ 3067919) (20)P577 { P578, P599 } Node (4105388 @ 3067847) (20)P578 { P573, P577 } Node (4105379 @ 3067845) (20)P579 { P533, P597 } Node (4105442 @ 3067763) (20)P580 { P439, P440, P441, P442, P446, P447, P582, P585, P598, P609 } Node (4105471 @ 3067815) (20)P581 { P583, P590, P593 } Node (4105464 @ 3067758) (20)P582 { P447, P580, P585, P598, P611 } Node (4105454 @ 3067822) (20)P583 { P581, P588, P590, P593 } Node (4105470 @ 3067753) (20)P584 { P566, P586, P591 } Node (4105554 @ 3067697) (20)P585 { P580, P582, P598 } Node (4105455 @ 3067814) (20)P586 { P561, P564, P566, P584, P591 } Node (4105541 @ 3067706) (20)P587 { P534, P574 } Node (4105435 @ 3067829) (20)P588 { P583, P589 } Node (4105486 @ 3067747) (20)P589 { P588 } Node (4105492 @ 3067745) (20)P590 { P581, P583, P593 } Node (4105475 @ 3067769) (20)P591 { P564, P566, P584, P586 } Node (4105549 @ 3067702) (20)P592 { P422, P423, P424, P425, P426, P427, P428, P429, P559, P596, P1070 } Node (4105526 @ 3067753) (20)P593 { P581, P583, P590 } Node (4105467 @ 3067763) (20)P594 { P438, P439 } Node (4105478 @ 3067790) (20)P596 { P422, P423, P424, P425, P426, P559, P562, P565, P567, P592, P1070 } Node (4105526 @ 3067740) (20)P597 { P533, P579 } Node (4105440 @ 3067771) (20)P598 { P439, P442, P446, P447, P580, P582, P585, P609 } Node (4105463 @ 3067818) (20)P599 { P577, P613 } Node (4105398 @ 3067838) (20)P600 { P14, P15, P16, P83, P601, P602, P603, P672, P673, P674, P675, P676, P677, P678, P679, P680, P681, P682, P814, P869, P1076 } Node (4105755 @ 3067300) (20)P601 { P12, P14, P15, P83, P600, P602, P603, P672, P673, P674, P675, P676, P677, P678, P679, P680, P681, P682, P814, P869, P1076 } Node (4105754 @ 3067297) (20)P602 { P12, P14, P15, P16, P83, P600, P601, P603, P672, P673, P674, P675, P676, P677, P678, P679, P680, P681, P682, P699, P700, P814, P869, P1076 } Node (4105751 @ 3067296) (20)P603 { P12, P14, P15, P83, P600, P601, P602, P672, P673, P674, P675, P676, P677, P678, P679, P680, P681, P682, P699, P700, P701, P814, P869, P1076 } Node (4105750 @ 3067293) (20)P604 { P552 } Node (4105188 @ 3067884) (20)P605 { P618, P1072 } Node (4105178 @ 3067905) (20)P606 { P415, P416, P462 } Node (4105421 @ 3067644) (20)P607 { P120, P121, P123, P124, P125, P127, P128, P304, P306, P314, P488 } Node (4105552 @ 3067573) (20)P608 { P192, P193, P194, P195, P266, P276, P277, P278, P279, P280, P345, P349, P350, P449, P1064 } Node (4105630 @ 3067599) (20)P609 { P439, P440, P441, P442, P446, P447, P580, P598 } Node (4105481 @ 3067826) (20)P610 { P442, P444, P447, P611 } Node (4105466 @ 3067848) (20)P611 { P444, P447, P582, P610 } Node (4105457 @ 3067841) (20)P612 { P526, P528, P537 } Node (4105357 @ 3067805) (20)P613 { P574, P599 } Node (4105413 @ 3067837) (20)P614 { P530, P531, P539 } Node (4105403 @ 3067778) (20)P615 { P493, P495, P496, P497, P518, P519, P520, P1073 } Node (4105327 @ 3067652) (20)P616 { P490, P491, P494, P498, P509, P510 } Node (4105286 @ 3067666) (20)P617 { P514, P515, P521, P522, P523 } Node (4105179 @ 3067708) (20)P618 { P605, P626, P628, P630, P1072 } Node (4105169 @ 3067916) (20)P619 { P620, P622, P626, P627, P629, P632 } Node (4105151 @ 3067928) (20)P620 { P619, P621, P622, P626 } Node (4105140 @ 3067917) (20)P621 { P620, P626 } Node (4105138 @ 3067911) (20)P622 { P619, P620, P627, P629, P632, P633, P644, P652 } Node (4105142 @ 3067931) (20)P623 { P624, P633, P634, P644 } Node (4105122 @ 3067932) (20)P624 { P623, P625, P634, P635, P644, P645 } Node (4105115 @ 3067921) (20)P625 { P624, P635, P645, P646, P647 } Node (4105109 @ 3067906) (20)P626 { P618, P619, P620, P621, P1072 } Node (4105155 @ 3067912) (20)P627 { P619, P622, P629, P632, P633, P644, P652, P653 } Node (4105146 @ 3067941) (20)P628 { P618, P629, P630, P631, P632 } Node (4105171 @ 3067930) (20)P629 { P619, P622, P627, P628, P632 } Node (4105161 @ 3067935) (20)P630 { P576, P618, P628, P631 } Node (4105179 @ 3067926) (20)P631 { P576, P628, P630 } Node (4105188 @ 3067923) (20)P632 { P619, P622, P627, P628, P629, P652 } Node (4105153 @ 3067938) (20)P633 { P622, P623, P627, P644, P652, P653, P654 } Node (4105132 @ 3067943) (20)P634 { P623, P624, P635, P644 } Node (4105117 @ 3067928) (20)P635 { P624, P625, P634, P645, P647 } Node (4105103 @ 3067916) (20)P636 { P638, P641, P643 } Node (4104074 @ 3067892) (20)P637 { P639, P640, P642 } Node (4104035 @ 3067908) (20)P638 { P636, P640, P643 } Node (4104061 @ 3067892) (20)P639 { P637, P642 } Node (4104031 @ 3067915) (20)P640 { P637, P638, P642 } Node (4104050 @ 3067905) (20)P641 { P9, P636, P643 } Node (4104083 @ 3067891) (20)P642 { P637, P639, P640 } Node (4104042 @ 3067909) (20)P643 { P9, P636, P638, P641 } Node (4104075 @ 3067884) (20)P644 { P622, P623, P624, P627, P633, P634, P652, P653 } Node (4105128 @ 3067934) (20)P645 { P624, P625, P635, P646, P647 } Node (4105102 @ 3067907) (20)P646 { P625, P645, P647, P648, P649 } Node (4105105 @ 3067895) (20)P647 { P625, P635, P645, P646, P648, P649 } Node (4105097 @ 3067897) (20)P648 { P646, P647, P649 } Node (4105093 @ 3067887) (20)P649 { P646, P647, P648, P650 } Node (4105098 @ 3067878) (20)P650 { P649, P651 } Node (4105098 @ 3067861) (20)P651 { P650 } Node (4105105 @ 3067858) (20)P652 { P622, P627, P632, P633, P644, P653, P654 } Node (4105138 @ 3067945) (20)P653 { P627, P633, P644, P652, P654, P655 } Node (4105131 @ 3067951) (20)P654 { P633, P652, P653, P655, P656 } Node (4105123 @ 3067957) (20)P655 { P653, P654, P656, P657 } Node (4105114 @ 3067956) (20)P656 { P654, P655, P657, P658 } Node (4105108 @ 3067957) (20)P657 { P655, P656, P658, P659 } Node (4105100 @ 3067959) (20)P658 { P656, P657, P659, P660 } Node (4105093 @ 3067963) (20)P659 { P657, P658, P660, P661 } Node (4105086 @ 3067968) (20)P660 { P658, P659, P661, P662 } Node (4105079 @ 3067974) (20)P661 { P659, P660, P662 } Node (4105073 @ 3067979) (20)P662 { P660, P661, P663 } Node (4105068 @ 3067987) (20)P663 { P662, P664 } Node (4105060 @ 3068000) (20)P664 { P663 } Node (4105055 @ 3068009) (20)P665 { P666 } Node (4105114 @ 3067840) (20)P666 { P665, P667 } Node (4105118 @ 3067824) (20)P667 { P666, P668 } Node (4105122 @ 3067809) (20)P668 { P667, P669 } Node (4105126 @ 3067793) (20)P669 { P668, P670 } Node (4105130 @ 3067778) (20)P670 { P669, P671 } Node (4105133 @ 3067764) (20)P671 { P112, P670 } Node (4105137 @ 3067750) (20)P672 { P12, P14, P83, P600, P601, P602, P603, P673, P674, P675, P676, P677, P678, P679, P680, P681, P682, P699, P700, P701, P702, P814, P869, P1076 } Node (4105748 @ 3067292) (20)P673 { P12, P14, P83, P600, P601, P602, P603, P672, P674, P675, P676, P677, P678, P679, P680, P681, P682, P699, P700, P701, P702, P814, P869, P1076 } Node (4105748 @ 3067289) (20)P674 { P12, P14, P83, P600, P601, P602, P603, P672, P673, P675, P676, P677, P678, P679, P680, P681, P682, P699, P700, P701, P814, P869, P1076 } Node (4105750 @ 3067289) (20)P675 { P12, P14, P83, P600, P601, P602, P603, P672, P673, P674, P676, P677, P678, P679, P680, P681, P682, P699, P700, P701, P814, P869, P1076 } Node (4105748 @ 3067287) (20)P676 { P12, P14, P83, P600, P601, P602, P603, P672, P673, P674, P675, P677, P678, P679, P680, P681, P682, P699, P700, P814, P869, P1076 } Node (4105750 @ 3067287) (20)P677 { P12, P14, P83, P600, P601, P602, P603, P672, P673, P674, P675, P676, P678, P679, P680, P681, P682, P814, P869, P1076 } Node (4105753 @ 3067288) (20)P678 { P12, P14, P83, P600, P601, P602, P603, P672, P673, P674, P675, P676, P677, P679, P680, P681, P682, P814, P869, P1076 } Node (4105753 @ 3067291) (20)P679 { P14, P83, P600, P601, P602, P603, P672, P673, P674, P675, P676, P677, P678, P680, P681, P682, P814, P869, P1076 } Node (4105756 @ 3067292) (20)P680 { P14, P83, P600, P601, P602, P603, P672, P673, P674, P675, P676, P677, P678, P679, P681, P682, P814, P869, P1076 } Node (4105755 @ 3067290) (20)P681 { P12, P14, P83, P600, P601, P602, P603, P672, P673, P674, P675, P676, P677, P678, P679, P680, P682, P814, P869, P1076 } Node (4105753 @ 3067287) (20)P682 { P12, P14, P83, P600, P601, P602, P603, P672, P673, P674, P675, P676, P677, P678, P679, P680, P681, P814, P869, P1076 } Node (4105753 @ 3067285) (20)P683 { P360, P361, P362, P363, P364, P365, P374, P375, P376, P377, P378, P388, P389, P390, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P979, P980, P981, P982, P984, P985, P986, P988, P989 } Node (4105793 @ 3067544) (20)P684 { P140, P141, P167, P168, P171, P176, P220, P260, P261, P262, P263, P371, P373, P374, P391, P392, P393, P394, P467, P471, P685, P686, P721, P733, P734, P736, P756, P757, P758, P759, P761, P762, P763, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P810, P811, P812, P813, P815, P816, P817, P847, P940, P948, P949, P952, P976, P991, P992, P993, P995, P996, P997, P998, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105771 @ 3067568) (20)P685 { P140, P182, P183, P219, P220, P221, P262, P263, P264, P373, P374, P375, P376, P377, P387, P388, P389, P390, P391, P392, P393, P467, P684, P686, P687, P772, P773, P774, P775, P776, P777, P782, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P824, P825, P847, P922, P929, P931, P950, P952, P953, P956, P957, P958, P959, P960, P961, P962, P963, P976, P979, P991, P992, P995, P996, P997, P998, P1004, P1005, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105783 @ 3067567) (20)P686 { P181, P182, P183, P219, P220, P221, P222, P232, P262, P263, P264, P374, P375, P376, P377, P387, P388, P389, P390, P391, P684, P685, P687, P717, P732, P782, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P910, P916, P922, P929, P931, P934, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P976, P979, P980, P981, P982, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1048, P1049, P1050, P1051 } Node (4105790 @ 3067567) (20)P687 { P179, P180, P182, P183, P219, P221, P222, P232, P264, P375, P376, P377, P378, P386, P387, P388, P389, P390, P685, P686, P717, P782, P799, P803, P806, P807, P809, P810, P811, P818, P819, P821, P822, P824, P825, P910, P911, P916, P922, P926, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P995, P1007, P1008, P1009, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105801 @ 3067565) (20)P688 { P198, P199, P200, P230, P378, P383, P384, P385, P386, P468, P689, P926, P935, P970, P971, P972, P973, P974, P975, P977, P978, P983, P987, P989, P990 } Node (4105828 @ 3067548) (20)P689 { P198, P199, P200, P230, P383, P384, P385, P468, P688, P926, P935, P972, P973, P974, P975, P977, P978, P983, P987, P990 } Node (4105832 @ 3067548) (20)P690 { P169, P204, P207, P208, P209, P341, P346, P352, P353, P354, P355, P356, P357, P473, P474, P932, P1003, P1019, P1020, P1023, P1025, P1027, P1029 } Node (4105676 @ 3067585) (20)P691 { P145, P148, P162, P169, P204, P205, P357, P474, P475, P692, P932, P954, P994, P1002, P1003, P1018, P1021, P1022, P1024, P1025, P1026, P1027, P1028, P1029, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105700 @ 3067582) (20)P692 { P145, P147, P148, P161, P162, P169, P204, P205, P465, P474, P475, P691, P845, P932, P954, P994, P1002, P1018, P1021, P1022, P1024, P1026, P1027, P1028, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105707 @ 3067581) (20)P693 { P11, P28, P44, P82, P1055 } Node (4105706 @ 3067311) (20)P694 { P10, P12, P36, P83, P695, P696, P697, P698, P699, P700, P701, P702, P703 } Node (4105725 @ 3067293) (20)P695 { P10, P12, P14, P36, P83, P694, P696, P697, P698, P699, P700, P701, P702, P703, P814 } Node (4105727 @ 3067293) (20)P696 { P10, P12, P14, P36, P83, P694, P695, P697, P698, P699, P700, P701, P702, P703, P814 } Node (4105727 @ 3067292) (20)P697 { P10, P12, P14, P36, P83, P694, P695, P696, P699, P700, P701, P702, P703, P814 } Node (4105728 @ 3067292) (20)P698 { P10, P12, P14, P36, P83, P694, P695, P696, P699, P700, P701, P702, P703, P814 } Node (4105728 @ 3067292) (20)P699 { P10, P12, P14, P36, P83, P602, P603, P672, P673, P674, P675, P676, P694, P695, P696, P697, P698, P700, P701, P702, P703, P814, P869 } Node (4105733 @ 3067294) (20)P700 { P10, P12, P14, P36, P83, P602, P603, P672, P673, P674, P675, P676, P694, P695, P696, P697, P698, P699, P701, P702, P703, P814 } Node (4105732 @ 3067294) (20)P701 { P10, P12, P14, P36, P83, P603, P672, P673, P674, P675, P694, P695, P696, P697, P698, P699, P700, P702, P703, P814 } Node (4105731 @ 3067294) (20)P702 { P10, P12, P14, P36, P83, P672, P673, P694, P695, P696, P697, P698, P699, P700, P701, P703, P814 } Node (4105729 @ 3067295) (20)P703 { P10, P12, P14, P36, P83, P694, P695, P696, P697, P698, P699, P700, P701, P702, P814 } Node (4105728 @ 3067295) (20)P704 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P102, P457, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105572 @ 3067653) (20)P705 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P102, P457, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105572 @ 3067653) (20)P706 { P23, P27, P29, P52, P53, P54, P55, P71, P102, P380, P457, P704, P705, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105571 @ 3067652) (20)P707 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P102, P108, P380, P457, P704, P705, P706, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105571 @ 3067651) (20)P708 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P73, P102, P108, P380, P457, P704, P705, P706, P707, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105571 @ 3067650) (20)P709 { P23, P27, P29, P33, P51, P52, P53, P54, P55, P71, P73, P102, P108, P380, P457, P704, P705, P706, P707, P708, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105572 @ 3067650) (20)P710 { P23, P27, P29, P33, P51, P52, P53, P54, P55, P71, P73, P102, P108, P380, P457, P704, P705, P706, P707, P708, P709, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105572 @ 3067649) (20)P711 { P23, P27, P29, P33, P51, P52, P53, P54, P55, P71, P73, P102, P380, P457, P704, P705, P706, P707, P708, P709, P710, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105575 @ 3067649) (20)P712 { P23, P27, P29, P33, P51, P52, P53, P54, P55, P71, P73, P102, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105576 @ 3067649) (20)P713 { P23, P27, P29, P33, P51, P52, P53, P54, P55, P73, P102, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105577 @ 3067650) (20)P714 { P23, P27, P29, P33, P51, P52, P53, P54, P55, P73, P102, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P715, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105577 @ 3067650) (20)P715 { P23, P27, P29, P33, P51, P52, P53, P54, P55, P71, P73, P102, P380, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P718, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105577 @ 3067651) (20)P716 { P43, P67, P87, P88, P99, P178, P181, P182, P183, P215, P218, P219, P220, P221, P222, P223, P224, P225, P262, P263, P452, P453, P466, P717, P732, P751, P752, P753, P754, P755, P782, P785, P794, P795, P796, P797, P799, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P1041, P1051 } Node (4105790 @ 3067590) (20)P717 { P88, P99, P178, P180, P181, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P226, P232, P262, P263, P264, P387, P453, P686, P687, P716, P732, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P922, P962, P963, P964, P965, P976, P995, P1008, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105797 @ 3067582) (20)P718 { P23, P27, P29, P33, P51, P52, P53, P54, P55, P71, P102, P108, P109, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P719, P720, P723, P724, P725, P726, P727, P728 } Node (4105569 @ 3067648) (20)P719 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P102, P108, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P720, P723, P724, P725, P726, P727, P728 } Node (4105569 @ 3067651) (20)P720 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P102, P108, P380, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P723, P724, P725, P726, P727, P728 } Node (4105569 @ 3067649) (20)P721 { P140, P142, P155, P156, P157, P158, P160, P167, P168, P171, P172, P175, P176, P177, P178, P214, P218, P220, P260, P261, P262, P263, P392, P452, P466, P467, P684, P722, P731, P736, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P772, P773, P774, P775, P776, P777, P778, P779, P780, P784, P785, P786, P788, P789, P790, P796, P797, P798, P808, P811, P812, P813, P815, P816, P817, P1015, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105769 @ 3067587) (20)P722 { P140, P141, P142, P144, P150, P151, P154, P155, P156, P158, P160, P165, P166, P167, P168, P170, P171, P172, P173, P175, P176, P177, P260, P261, P392, P451, P467, P721, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P787, P788, P789, P790, P798, P808, P951, P997, P999, P1000, P1001, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105753 @ 3067582) (20)P723 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P102, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P724, P725, P726, P727, P728 } Node (4105572 @ 3067654) (20)P724 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P102, P108, P457, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P725, P726, P727, P728 } Node (4105569 @ 3067653) (20)P725 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P102, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P726, P727, P728 } Node (4105569 @ 3067654) (20)P726 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P102, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P727, P728 } Node (4105569 @ 3067655) (20)P727 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P102, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P728 } Node (4105570 @ 3067656) (20)P728 { P23, P27, P29, P51, P52, P53, P54, P55, P71, P102, P704, P705, P706, P707, P708, P709, P710, P711, P712, P713, P714, P715, P718, P719, P720, P723, P724, P725, P726, P727 } Node (4105571 @ 3067657) (20)P729 { P138, P141, P142, P144, P147, P149, P150, P151, P152, P163, P164, P166, P170, P451, P722, P734, P765, P766, P767, P768, P769, P770, P771, P783, P787, P791, P792, P793, P845, P951, P994, P999, P1000, P1001, P1021, P1022, P1026, P1052, P1059 } Node (4105735 @ 3067576) (20)P730 { P64, P65, P68, P69, P74, P75, P76, P78, P92, P96, P153, P174, P212, P381, P382, P746, P747, P748, P781, P800, P802, P805, P820, P826, P829, P830, P831, P832, P833, P834, P835, P836, P837, P839, P840, P841 } Node (4105730 @ 3067616) (20)P731 { P140, P141, P142, P144, P150, P151, P154, P155, P156, P157, P158, P160, P166, P167, P168, P170, P171, P172, P173, P175, P176, P177, P260, P261, P392, P451, P467, P721, P722, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P787, P788, P789, P790, P798, P808, P847, P951, P997, P999, P1000, P1001, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105755 @ 3067582) (20)P732 { P88, P99, P178, P180, P181, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P226, P232, P262, P263, P264, P387, P453, P686, P716, P717, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P818, P819, P821, P822, P823, P824, P825, P1041, P1042, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105798 @ 3067585) (20)P733 { P140, P365, P366, P367, P368, P369, P370, P371, P373, P374, P392, P393, P394, P470, P471, P684, P774, P804, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P998, P1004, P1005, P1006, P1011, P1014, P1015, P1016, P1017 } Node (4105763 @ 3067552) (20)P734 { P140, P141, P142, P144, P150, P151, P160, P165, P166, P167, P168, P170, P171, P172, P173, P260, P261, P392, P393, P394, P451, P467, P684, P722, P729, P731, P736, P756, P757, P758, P759, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P783, P784, P786, P787, P788, P789, P790, P791, P808, P847, P951, P952, P991, P992, P993, P996, P997, P999, P1000, P1001, P1004, P1005, P1016, P1017, P1052, P1059 } Node (4105752 @ 3067574) (20)P735 { P69, P74, P92, P93, P94, P139, P142, P143, P144, P149, P151, P153, P154, P155, P159, P160, P170, P172, P173, P174, P175, P382, P451, P722, P731, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P765, P766, P767, P768, P769, P770, P771, P798, P820, P828, P829, P835, P836, P837, P838, P839, P840, P841, P842, P1040, P1059 } Node (4105742 @ 3067597) (20)P736 { P140, P141, P142, P144, P150, P151, P155, P156, P157, P158, P160, P166, P167, P168, P170, P171, P172, P173, P175, P176, P177, P220, P260, P261, P392, P451, P466, P467, P684, P721, P722, P731, P734, P741, P742, P743, P744, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P798, P808, P847, P951, P996, P997, P999, P1000, P1001, P1004, P1015, P1016, P1017, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105758 @ 3067581) (20)P737 { P69, P74, P92, P93, P94, P139, P142, P143, P144, P149, P151, P153, P154, P155, P159, P160, P170, P172, P173, P174, P175, P382, P451, P722, P731, P735, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P764, P765, P766, P767, P768, P769, P770, P771, P798, P820, P828, P829, P835, P836, P837, P838, P839, P840, P841, P842, P843, P1039, P1040, P1059 } Node (4105743 @ 3067597) (20)P738 { P69, P74, P92, P93, P94, P139, P142, P143, P144, P149, P151, P153, P154, P155, P159, P160, P170, P172, P173, P174, P175, P382, P451, P722, P731, P735, P737, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P764, P765, P766, P767, P768, P769, P770, P771, P798, P801, P820, P828, P829, P835, P836, P837, P838, P839, P840, P841, P842, P843, P1039, P1040, P1059 } Node (4105744 @ 3067597) (20)P739 { P69, P74, P92, P93, P94, P139, P142, P143, P144, P151, P153, P154, P155, P159, P160, P170, P172, P173, P174, P175, P451, P722, P731, P735, P737, P738, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P764, P765, P766, P767, P768, P769, P770, P771, P798, P801, P820, P828, P829, P835, P836, P837, P838, P839, P840, P841, P842, P843, P1036, P1039, P1040, P1059 } Node (4105745 @ 3067597) (20)P740 { P69, P74, P92, P93, P94, P139, P142, P143, P144, P151, P153, P154, P155, P158, P159, P160, P170, P172, P173, P174, P175, P451, P722, P731, P735, P737, P738, P739, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P764, P765, P766, P767, P768, P769, P770, P771, P798, P801, P820, P828, P829, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844, P866, P1036, P1038, P1039, P1040, P1059 } Node (4105746 @ 3067597) (20)P741 { P19, P69, P92, P93, P94, P139, P142, P144, P151, P153, P154, P155, P157, P158, P159, P160, P170, P172, P173, P174, P175, P451, P722, P731, P735, P736, P737, P738, P739, P740, P742, P743, P744, P745, P746, P747, P748, P749, P750, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P798, P801, P828, P829, P837, P838, P839, P840, P841, P842, P843, P844, P866, P1036, P1038, P1039, P1040, P1059 } Node (4105748 @ 3067596) (20)P742 { P19, P69, P92, P93, P94, P139, P142, P144, P151, P153, P154, P155, P156, P157, P158, P159, P160, P170, P172, P173, P174, P175, P451, P722, P731, P735, P736, P737, P738, P739, P740, P741, P743, P744, P745, P746, P747, P748, P749, P750, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P798, P801, P828, P829, P838, P839, P840, P841, P842, P843, P844, P866, P1036, P1038, P1039, P1040, P1059 } Node (4105749 @ 3067596) (20)P743 { P19, P69, P92, P93, P94, P139, P142, P144, P151, P153, P154, P155, P156, P157, P158, P159, P160, P170, P172, P173, P174, P175, P177, P260, P722, P731, P735, P736, P737, P738, P739, P740, P741, P742, P744, P745, P746, P747, P748, P749, P750, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P798, P801, P828, P829, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105751 @ 3067596) (20)P744 { P19, P69, P92, P93, P94, P139, P142, P144, P151, P154, P155, P156, P157, P158, P159, P160, P170, P172, P173, P174, P175, P177, P214, P260, P721, P722, P731, P735, P736, P737, P738, P739, P740, P741, P742, P743, P745, P746, P747, P748, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P779, P780, P798, P801, P828, P829, P838, P840, P841, P842, P843, P844, P866, P867, P868, P872, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105753 @ 3067596) (20)P745 { P69, P74, P92, P93, P94, P138, P139, P142, P143, P144, P149, P151, P153, P154, P155, P159, P160, P170, P172, P173, P174, P175, P382, P451, P722, P735, P737, P738, P739, P740, P741, P742, P743, P744, P746, P747, P748, P749, P750, P765, P766, P767, P768, P769, P770, P771, P798, P820, P829, P834, P835, P836, P837, P838, P839, P840, P841 } Node (4105740 @ 3067597) (20)P746 { P69, P74, P92, P93, P138, P139, P142, P143, P144, P149, P151, P153, P154, P155, P159, P160, P170, P172, P173, P174, P175, P212, P382, P451, P465, P730, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P747, P748, P767, P768, P769, P770, P771, P798, P820, P829, P832, P833, P834, P835, P836, P837, P839, P840, P841 } Node (4105738 @ 3067598) (20)P747 { P69, P74, P76, P92, P93, P138, P139, P142, P143, P144, P149, P151, P153, P154, P155, P159, P173, P174, P212, P381, P382, P451, P465, P730, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P748, P767, P768, P769, P770, P771, P798, P820, P829, P831, P832, P833, P834, P835, P836, P837, P839, P840 } Node (4105736 @ 3067598) (20)P748 { P69, P74, P76, P92, P93, P138, P142, P143, P144, P149, P151, P153, P154, P155, P159, P173, P174, P212, P381, P382, P451, P465, P730, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P768, P769, P770, P771, P798, P820, P831, P832, P833, P834, P835, P836, P837, P839, P840 } Node (4105735 @ 3067598) (20)P749 { P19, P85, P93, P94, P139, P142, P151, P154, P155, P156, P157, P158, P159, P160, P170, P171, P172, P173, P175, P176, P177, P214, P260, P261, P452, P466, P721, P722, P731, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P751, P752, P753, P754, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P778, P779, P780, P798, P801, P828, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105759 @ 3067595) (20)P750 { P19, P85, P93, P94, P139, P142, P151, P154, P155, P156, P157, P158, P159, P160, P170, P171, P172, P173, P175, P176, P177, P214, P260, P261, P452, P466, P721, P722, P731, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P751, P752, P753, P754, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P778, P779, P780, P798, P801, P828, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105759 @ 3067595) (20)P751 { P43, P85, P87, P94, P156, P157, P158, P160, P171, P175, P176, P177, P178, P214, P218, P220, P260, P261, P262, P263, P452, P466, P467, P716, P721, P749, P750, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P773, P777, P778, P779, P780, P785, P794, P795, P796, P797, P811, P812, P813, P815, P816, P817, P874, P875, P877, P878, P879, P880, P881, P882, P1036, P1038, P1039, P1040, P1043 } Node (4105774 @ 3067593) (20)P752 { P43, P85, P87, P156, P157, P158, P171, P175, P176, P177, P178, P214, P218, P220, P223, P260, P261, P262, P263, P452, P466, P467, P716, P721, P749, P750, P751, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P777, P778, P779, P780, P785, P794, P795, P796, P797, P810, P811, P812, P813, P815, P816, P817, P874, P875, P877, P878, P879, P880, P881, P882, P883, P1036, P1038, P1039, P1040, P1043 } Node (4105775 @ 3067593) (20)P753 { P43, P67, P85, P87, P156, P157, P158, P171, P176, P177, P178, P181, P214, P215, P218, P220, P223, P261, P262, P263, P452, P466, P467, P716, P721, P749, P750, P751, P752, P754, P755, P756, P757, P758, P759, P760, P761, P777, P778, P779, P780, P782, P785, P794, P795, P796, P797, P810, P811, P812, P813, P815, P816, P817, P877, P878, P879, P880, P881, P882, P883, P884, P1036, P1038, P1039, P1040, P1043 } Node (4105777 @ 3067592) (20)P754 { P43, P67, P85, P87, P156, P157, P158, P171, P176, P177, P178, P181, P214, P215, P218, P220, P223, P261, P262, P263, P452, P466, P467, P716, P721, P749, P750, P751, P752, P753, P755, P756, P757, P758, P759, P760, P761, P778, P779, P780, P782, P785, P794, P795, P796, P797, P809, P810, P811, P812, P813, P815, P816, P817, P822, P823, P877, P878, P879, P880, P881, P882, P883, P884, P886, P1036, P1038, P1039, P1040, P1043 } Node (4105778 @ 3067592) (20)P755 { P43, P67, P85, P87, P88, P156, P157, P158, P171, P176, P177, P178, P181, P182, P183, P214, P215, P218, P220, P223, P262, P263, P452, P466, P467, P716, P717, P721, P732, P751, P752, P753, P754, P756, P757, P758, P759, P760, P778, P779, P780, P782, P785, P794, P795, P796, P797, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P877, P878, P879, P880, P881, P882, P883, P884, P886, P887, P888, P1036, P1038, P1039, P1040, P1043 } Node (4105780 @ 3067592) (20)P756 { P140, P141, P142, P155, P156, P157, P158, P160, P167, P168, P170, P171, P172, P173, P175, P176, P177, P178, P214, P220, P260, P261, P262, P263, P391, P392, P466, P467, P684, P721, P722, P731, P734, P736, P744, P749, P750, P751, P752, P753, P754, P755, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P797, P798, P808, P811, P812, P813, P815, P816, P817, P847, P996, P997, P998, P1001, P1011, P1014, P1015, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105767 @ 3067584) (20)P757 { P140, P141, P142, P155, P156, P157, P158, P160, P167, P168, P170, P171, P172, P173, P175, P176, P177, P178, P214, P220, P260, P261, P262, P263, P391, P392, P452, P466, P467, P684, P721, P722, P731, P734, P736, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P796, P797, P798, P808, P812, P813, P815, P816, P817, P997, P998, P1001, P1011, P1015, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105767 @ 3067585) (20)P758 { P140, P141, P142, P155, P156, P157, P158, P160, P167, P168, P170, P171, P172, P173, P175, P176, P177, P178, P214, P218, P220, P260, P261, P263, P392, P452, P466, P467, P684, P721, P722, P731, P734, P736, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P796, P797, P798, P808, P812, P813, P815, P816, P817, P997, P1015, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105767 @ 3067586) (20)P759 { P94, P139, P140, P141, P142, P155, P156, P157, P158, P160, P167, P168, P170, P171, P172, P173, P175, P176, P177, P178, P214, P218, P220, P260, P261, P263, P392, P452, P466, P467, P684, P721, P722, P731, P734, P736, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P760, P761, P762, P763, P764, P765, P766, P767, P768, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P796, P797, P798, P808, P813, P815, P816, P817, P1015, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105767 @ 3067587) (20)P760 { P85, P94, P139, P140, P142, P155, P156, P157, P158, P160, P167, P168, P171, P172, P173, P175, P176, P177, P178, P214, P218, P220, P260, P261, P263, P452, P466, P467, P721, P722, P731, P736, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P761, P762, P763, P764, P765, P766, P767, P772, P773, P774, P775, P776, P777, P778, P779, P780, P785, P788, P789, P790, P796, P797, P798, P808, P813, P815, P816, P817, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105768 @ 3067589) (20)P761 { P140, P141, P142, P155, P156, P157, P158, P160, P166, P167, P168, P170, P171, P172, P173, P175, P176, P177, P220, P260, P261, P391, P392, P393, P466, P467, P684, P721, P722, P731, P734, P736, P742, P743, P744, P749, P750, P751, P752, P753, P754, P756, P757, P758, P759, P760, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P798, P808, P817, P847, P951, P992, P996, P997, P998, P999, P1000, P1001, P1004, P1011, P1014, P1015, P1016, P1017, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105762 @ 3067581) (20)P762 { P140, P141, P142, P144, P150, P155, P156, P157, P158, P160, P166, P167, P168, P170, P171, P172, P173, P175, P176, P177, P220, P260, P261, P392, P393, P466, P467, P684, P721, P722, P731, P734, P736, P741, P742, P743, P744, P749, P750, P751, P752, P756, P757, P758, P759, P760, P761, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P798, P808, P817, P847, P951, P992, P996, P997, P998, P999, P1000, P1001, P1004, P1015, P1016, P1017, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105760 @ 3067581) (20)P763 { P140, P141, P142, P144, P150, P151, P155, P156, P157, P158, P160, P166, P167, P168, P170, P171, P172, P173, P175, P176, P177, P220, P260, P261, P392, P451, P466, P467, P684, P721, P722, P731, P734, P736, P741, P742, P743, P744, P749, P750, P751, P756, P757, P758, P759, P760, P761, P762, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P798, P808, P847, P951, P996, P997, P999, P1000, P1001, P1004, P1015, P1016, P1017, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105759 @ 3067581) (20)P764 { P140, P141, P142, P144, P150, P151, P155, P156, P157, P158, P160, P166, P167, P168, P170, P171, P172, P173, P175, P176, P177, P220, P260, P261, P392, P451, P467, P721, P722, P731, P734, P736, P737, P738, P739, P740, P741, P742, P743, P744, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P798, P808, P847, P951, P996, P997, P999, P1000, P1001, P1017, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105756 @ 3067582) (20)P765 { P140, P141, P142, P144, P150, P151, P154, P155, P156, P158, P160, P165, P166, P167, P168, P170, P171, P172, P173, P175, P176, P177, P260, P261, P392, P451, P467, P721, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P787, P788, P789, P790, P791, P798, P808, P951, P997, P999, P1000, P1001, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105752 @ 3067582) (20)P766 { P141, P142, P144, P150, P151, P154, P155, P156, P158, P160, P165, P166, P167, P168, P170, P171, P172, P173, P175, P176, P260, P261, P392, P451, P467, P721, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P787, P788, P789, P790, P791, P792, P798, P808, P951, P999, P1000, P1001, P1036, P1038, P1039, P1040, P1043, P1052, P1059 } Node (4105751 @ 3067582) (20)P767 { P139, P141, P142, P144, P150, P151, P154, P155, P156, P159, P160, P165, P166, P167, P168, P170, P171, P172, P173, P174, P175, P260, P261, P451, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P768, P769, P770, P771, P772, P773, P777, P783, P784, P786, P787, P788, P789, P790, P791, P792, P793, P798, P808, P951, P999, P1000, P1001, P1036, P1038, P1039, P1040, P1052, P1059 } Node (4105749 @ 3067583) (20)P768 { P141, P142, P144, P149, P150, P151, P154, P155, P156, P159, P160, P164, P165, P166, P167, P168, P170, P171, P172, P173, P174, P175, P260, P261, P451, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P756, P757, P758, P759, P761, P762, P763, P764, P765, P766, P767, P769, P770, P771, P773, P783, P784, P786, P787, P788, P789, P790, P791, P792, P793, P798, P808, P951, P999, P1000, P1001, P1036, P1039, P1040, P1052, P1059 } Node (4105748 @ 3067583) (20)P769 { P138, P141, P142, P144, P149, P150, P151, P154, P155, P159, P160, P164, P165, P166, P167, P168, P170, P171, P172, P173, P174, P175, P260, P261, P451, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P761, P762, P763, P764, P765, P766, P767, P768, P770, P771, P783, P784, P786, P787, P788, P789, P790, P791, P792, P793, P798, P808, P951, P999, P1000, P1001, P1039, P1040, P1052, P1059 } Node (4105746 @ 3067583) (20)P770 { P138, P141, P142, P144, P149, P150, P151, P154, P155, P159, P160, P164, P165, P166, P167, P168, P170, P172, P173, P174, P175, P260, P451, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P761, P762, P763, P764, P765, P766, P767, P768, P769, P771, P783, P784, P786, P787, P788, P790, P791, P792, P793, P798, P808, P951, P999, P1000, P1001, P1052, P1059 } Node (4105745 @ 3067583) (20)P771 { P138, P141, P142, P143, P144, P149, P150, P151, P153, P154, P155, P159, P160, P164, P165, P166, P167, P170, P172, P173, P174, P175, P260, P451, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P783, P784, P786, P787, P788, P791, P792, P793, P798, P808, P951, P999, P1000, P1001, P1052, P1059 } Node (4105744 @ 3067584) (20)P772 { P140, P141, P156, P166, P167, P168, P170, P171, P172, P176, P177, P220, P260, P261, P262, P263, P373, P391, P392, P393, P394, P467, P684, P685, P721, P722, P731, P734, P736, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P812, P813, P815, P816, P817, P847, P952, P991, P992, P993, P996, P997, P998, P1000, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1043, P1052, P1059 } Node (4105766 @ 3067574) (20)P773 { P140, P141, P156, P160, P166, P167, P168, P170, P171, P172, P176, P177, P220, P260, P261, P262, P263, P373, P391, P392, P393, P394, P467, P684, P685, P721, P722, P731, P734, P736, P751, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P772, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P812, P813, P815, P816, P817, P847, P952, P991, P992, P993, P996, P997, P998, P1000, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1036, P1038, P1039, P1043, P1052, P1059 } Node (4105766 @ 3067575) (20)P774 { P140, P141, P156, P167, P168, P171, P176, P220, P260, P261, P262, P263, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P721, P722, P731, P733, P734, P736, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P772, P773, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P812, P813, P815, P816, P817, P847, P949, P952, P976, P991, P992, P993, P996, P997, P998, P1000, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1043, P1052, P1059 } Node (4105767 @ 3067571) (20)P775 { P140, P141, P156, P167, P168, P171, P172, P176, P177, P220, P260, P261, P262, P263, P373, P391, P392, P393, P394, P467, P684, P685, P721, P722, P731, P734, P736, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P772, P773, P774, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P811, P812, P813, P815, P816, P817, P847, P952, P991, P992, P993, P996, P997, P998, P1000, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1043, P1052, P1059 } Node (4105767 @ 3067573) (20)P776 { P140, P141, P156, P167, P168, P170, P171, P172, P176, P177, P220, P260, P261, P262, P263, P373, P391, P392, P393, P394, P467, P684, P685, P721, P722, P731, P734, P736, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P772, P773, P774, P775, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P811, P812, P813, P815, P816, P817, P847, P952, P991, P992, P993, P996, P997, P998, P1000, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1043, P1052, P1059 } Node (4105767 @ 3067574) (20)P777 { P140, P141, P156, P167, P168, P170, P171, P172, P176, P177, P220, P260, P261, P262, P263, P373, P391, P392, P393, P394, P466, P467, P684, P685, P721, P722, P731, P734, P736, P751, P752, P753, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P772, P773, P774, P775, P776, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P811, P812, P813, P815, P816, P817, P847, P952, P991, P992, P993, P996, P997, P998, P1000, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1036, P1038, P1039, P1043, P1052, P1059 } Node (4105767 @ 3067575) (20)P778 { P140, P141, P142, P156, P157, P158, P160, P167, P168, P171, P172, P175, P176, P177, P178, P214, P218, P220, P260, P261, P262, P263, P391, P392, P452, P466, P467, P684, P721, P722, P731, P734, P736, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P772, P773, P774, P775, P776, P777, P779, P780, P783, P784, P785, P786, P788, P789, P790, P796, P797, P808, P810, P811, P812, P813, P815, P816, P817, P847, P996, P997, P998, P1011, P1012, P1013, P1014, P1015, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105769 @ 3067584) (20)P779 { P140, P141, P142, P156, P157, P158, P160, P167, P168, P171, P172, P175, P176, P177, P178, P214, P218, P220, P260, P261, P262, P263, P391, P392, P452, P466, P467, P684, P721, P722, P731, P736, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P772, P773, P774, P775, P776, P777, P778, P780, P783, P784, P785, P786, P788, P789, P790, P796, P797, P808, P811, P812, P813, P815, P816, P817, P997, P998, P1011, P1014, P1015, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105769 @ 3067585) (20)P780 { P140, P142, P155, P156, P157, P158, P160, P167, P168, P171, P172, P175, P176, P177, P178, P214, P218, P220, P260, P261, P262, P263, P391, P392, P452, P466, P467, P684, P721, P722, P731, P736, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P772, P773, P774, P775, P776, P777, P778, P779, P784, P785, P786, P788, P789, P790, P796, P797, P798, P808, P811, P812, P813, P815, P816, P817, P997, P998, P1011, P1015, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105769 @ 3067586) (20)P781 { P64, P65, P74, P75, P76, P78, P92, P96, P153, P212, P381, P382, P730, P800, P802, P805, P820, P826, P830, P831, P832, P833, P834, P835, P836, P837 } Node (4105724 @ 3067617) (20)P782 { P178, P181, P182, P183, P218, P219, P220, P221, P222, P223, P224, P232, P262, P263, P264, P387, P388, P389, P391, P453, P467, P685, P686, P687, P716, P717, P732, P753, P754, P755, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P922, P929, P950, P953, P957, P960, P961, P962, P963, P964, P965, P976, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1048, P1049, P1050, P1051 } Node (4105789 @ 3067577) (20)P783 { P140, P142, P144, P150, P151, P156, P160, P165, P166, P167, P168, P170, P171, P172, P173, P176, P260, P261, P392, P393, P394, P451, P467, P684, P722, P729, P731, P734, P736, P756, P757, P758, P759, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P784, P786, P787, P788, P789, P790, P808, P847, P951, P952, P991, P992, P993, P996, P997, P999, P1000, P1001, P1004, P1005, P1016, P1017, P1052, P1059 } Node (4105753 @ 3067574) (20)P784 { P140, P141, P142, P144, P150, P156, P160, P166, P167, P168, P170, P171, P172, P173, P176, P260, P261, P392, P393, P394, P451, P467, P684, P721, P722, P731, P734, P736, P756, P757, P758, P759, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P786, P787, P788, P789, P790, P808, P847, P951, P952, P991, P992, P993, P996, P997, P998, P999, P1000, P1001, P1004, P1005, P1006, P1015, P1016, P1017, P1052, P1059 } Node (4105755 @ 3067573) (20)P785 { P43, P67, P87, P88, P176, P177, P178, P181, P182, P183, P214, P215, P218, P220, P222, P223, P224, P262, P263, P452, P453, P466, P716, P717, P721, P732, P751, P752, P753, P754, P755, P760, P778, P779, P780, P782, P794, P795, P796, P797, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P1043 } Node (4105787 @ 3067591) (20)P786 { P140, P141, P142, P144, P150, P156, P160, P166, P167, P168, P170, P171, P172, P176, P220, P260, P261, P392, P393, P394, P451, P467, P684, P721, P722, P731, P734, P736, P756, P757, P758, P759, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P788, P789, P790, P808, P847, P951, P952, P991, P992, P993, P996, P997, P998, P999, P1000, P1001, P1004, P1005, P1006, P1011, P1015, P1016, P1017, P1052, P1059 } Node (4105756 @ 3067573) (20)P787 { P138, P141, P142, P144, P147, P149, P150, P151, P152, P163, P164, P165, P166, P170, P172, P451, P722, P729, P731, P734, P765, P766, P767, P768, P769, P770, P771, P783, P784, P791, P792, P793, P845, P951, P994, P999, P1000, P1001, P1021, P1022, P1026, P1052, P1059 } Node (4105736 @ 3067576) (20)P788 { P140, P141, P142, P144, P150, P156, P160, P166, P167, P168, P170, P171, P172, P176, P220, P260, P261, P373, P391, P392, P393, P394, P451, P467, P684, P721, P722, P731, P734, P736, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P789, P790, P808, P847, P951, P952, P991, P992, P993, P996, P997, P998, P999, P1000, P1001, P1004, P1005, P1006, P1011, P1013, P1014, P1015, P1016, P1017, P1043, P1052, P1059 } Node (4105759 @ 3067573) (20)P789 { P140, P141, P142, P156, P166, P167, P168, P170, P171, P172, P176, P220, P260, P261, P373, P391, P392, P393, P394, P467, P471, P684, P721, P722, P731, P734, P736, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P790, P808, P817, P847, P951, P952, P991, P992, P993, P996, P997, P998, P999, P1000, P1001, P1004, P1005, P1006, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1043, P1052, P1059 } Node (4105762 @ 3067572) (20)P790 { P140, P141, P142, P156, P160, P166, P167, P168, P170, P171, P172, P176, P220, P260, P261, P373, P391, P392, P393, P394, P467, P471, P684, P721, P722, P731, P734, P736, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P808, P817, P847, P951, P952, P991, P992, P993, P996, P997, P998, P999, P1000, P1001, P1004, P1005, P1006, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1043, P1052, P1059 } Node (4105761 @ 3067572) (20)P791 { P138, P143, P144, P147, P149, P150, P151, P152, P163, P164, P165, P166, P170, P451, P729, P734, P765, P766, P767, P768, P769, P770, P771, P787, P792, P793, P845, P951, P994, P999, P1000, P1001, P1021, P1022, P1026, P1028, P1035, P1052, P1059 } Node (4105733 @ 3067576) (20)P792 { P138, P143, P144, P147, P149, P150, P151, P152, P163, P164, P165, P166, P170, P451, P729, P766, P767, P768, P769, P770, P771, P787, P791, P793, P845, P951, P994, P999, P1000, P1001, P1021, P1022, P1026, P1028, P1035, P1052, P1059 } Node (4105732 @ 3067576) (20)P793 { P138, P143, P144, P147, P149, P150, P151, P152, P163, P164, P165, P166, P170, P451, P465, P729, P767, P768, P769, P770, P771, P787, P791, P792, P845, P951, P954, P994, P999, P1000, P1021, P1022, P1026, P1028, P1034, P1035, P1052 } Node (4105730 @ 3067577) (20)P794 { P43, P67, P87, P88, P99, P178, P181, P182, P183, P215, P218, P220, P222, P223, P224, P225, P262, P263, P452, P453, P466, P716, P717, P732, P751, P752, P753, P754, P755, P782, P785, P795, P796, P797, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P1041 } Node (4105789 @ 3067591) (20)P795 { P43, P67, P87, P88, P99, P178, P181, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P262, P263, P452, P453, P466, P716, P717, P732, P751, P752, P753, P754, P755, P782, P785, P794, P796, P797, P799, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P871, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P1041, P1050, P1051 } Node (4105792 @ 3067590) (20)P796 { P43, P67, P87, P88, P156, P157, P176, P177, P178, P181, P182, P183, P214, P215, P218, P220, P222, P223, P224, P262, P263, P452, P453, P466, P716, P717, P721, P732, P751, P752, P753, P754, P755, P757, P758, P759, P760, P778, P779, P780, P782, P785, P794, P795, P797, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P1043 } Node (4105786 @ 3067591) (20)P797 { P43, P67, P85, P87, P88, P156, P157, P158, P176, P177, P178, P181, P182, P183, P214, P215, P218, P220, P222, P223, P224, P262, P263, P452, P453, P466, P467, P716, P717, P721, P732, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P778, P779, P780, P782, P785, P794, P795, P796, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P1038, P1043 } Node (4105784 @ 3067591) (20)P798 { P19, P69, P92, P93, P94, P139, P142, P144, P151, P154, P156, P157, P158, P159, P160, P170, P172, P173, P174, P175, P177, P214, P260, P721, P722, P731, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P780, P801, P828, P829, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P1036, P1038, P1039, P1040, P1043, P1059 } Node (4105752 @ 3067596) (20)P799 { P180, P181, P182, P183, P219, P221, P222, P223, P224, P232, P262, P263, P264, P377, P387, P388, P389, P390, P391, P685, P686, P687, P716, P717, P732, P782, P795, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P922, P929, P931, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P976, P995, P1007, P1008, P1009, P1010, P1012, P1013, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105796 @ 3067572) (20)P800 { P64, P65, P69, P74, P75, P76, P78, P92, P96, P153, P212, P381, P382, P730, P781, P802, P805, P820, P826, P830, P831, P832, P833, P834, P835, P836, P837, P839 } Node (4105725 @ 3067617) (20)P801 { P19, P38, P39, P40, P68, P69, P85, P92, P93, P94, P139, P154, P155, P158, P159, P175, P738, P739, P740, P741, P742, P743, P744, P749, P750, P798, P820, P828, P829, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875, P877, P1040 } Node (4105755 @ 3067613) (20)P802 { P64, P65, P74, P75, P76, P78, P96, P202, P212, P381, P382, P730, P781, P800, P805, P826, P830, P831, P832, P833, P834, P835 } Node (4105720 @ 3067618) (20)P803 { P180, P181, P182, P183, P219, P221, P222, P232, P262, P263, P264, P375, P376, P377, P387, P388, P389, P390, P391, P685, P686, P687, P717, P732, P782, P799, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P910, P922, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P976, P979, P980, P981, P982, P995, P1007, P1008, P1009, P1010, P1012, P1013, P1014, P1041, P1042, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105795 @ 3067568) (20)P804 { P363, P365, P366, P367, P368, P369, P370, P371, P372, P373, P393, P394, P470, P471, P733, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P1004, P1005, P1006, P1016, P1017 } Node (4105762 @ 3067545) (20)P805 { P64, P65, P74, P75, P76, P78, P96, P202, P212, P381, P382, P730, P781, P800, P802, P820, P826, P830, P831, P832, P833, P834, P835 } Node (4105721 @ 3067618) (20)P806 { P180, P181, P182, P183, P219, P221, P222, P232, P262, P263, P264, P375, P376, P377, P387, P388, P389, P390, P391, P685, P686, P687, P717, P732, P782, P799, P803, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P922, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P976, P979, P980, P981, P982, P995, P1007, P1008, P1009, P1010, P1012, P1013, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105796 @ 3067569) (20)P807 { P88, P99, P178, P180, P181, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P226, P232, P262, P263, P264, P387, P453, P686, P687, P716, P717, P732, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P962, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105798 @ 3067584) (20)P808 { P140, P141, P142, P144, P150, P156, P160, P166, P167, P168, P170, P171, P172, P176, P220, P260, P261, P373, P392, P393, P394, P451, P467, P684, P721, P722, P731, P734, P736, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P847, P951, P952, P991, P992, P993, P996, P997, P998, P999, P1000, P1001, P1004, P1005, P1006, P1011, P1014, P1015, P1016, P1017, P1052, P1059 } Node (4105757 @ 3067573) (20)P809 { P178, P181, P182, P183, P215, P218, P219, P220, P221, P222, P223, P224, P232, P262, P263, P264, P387, P388, P389, P391, P453, P685, P686, P687, P716, P717, P732, P754, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P922, P929, P950, P953, P957, P960, P961, P962, P963, P964, P965, P966, P976, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1041, P1042, P1048, P1049, P1050, P1051 } Node (4105791 @ 3067577) (20)P810 { P176, P178, P181, P182, P183, P215, P218, P219, P220, P221, P222, P223, P224, P232, P262, P263, P264, P387, P388, P389, P391, P453, P467, P684, P685, P686, P687, P716, P717, P732, P752, P753, P754, P755, P778, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P922, P929, P950, P953, P957, P960, P961, P962, P963, P976, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1048, P1049, P1050, P1051 } Node (4105788 @ 3067578) (20)P811 { P140, P176, P178, P181, P182, P183, P218, P219, P220, P221, P222, P223, P232, P262, P263, P264, P387, P388, P389, P391, P467, P684, P685, P686, P687, P716, P717, P721, P732, P751, P752, P753, P754, P755, P756, P775, P776, P777, P778, P779, P780, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P950, P953, P960, P961, P962, P963, P976, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1050, P1051 } Node (4105786 @ 3067578) (20)P812 { P140, P176, P178, P181, P182, P183, P218, P219, P220, P221, P222, P223, P262, P263, P264, P387, P388, P391, P467, P684, P685, P686, P716, P717, P721, P732, P751, P752, P753, P754, P755, P756, P757, P758, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P825, P950, P953, P961, P962, P976, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1043, P1051 } Node (4105785 @ 3067578) (20)P813 { P140, P156, P171, P176, P177, P178, P181, P182, P183, P218, P219, P220, P221, P222, P223, P261, P262, P263, P264, P387, P391, P466, P467, P684, P685, P686, P716, P717, P721, P732, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P815, P817, P818, P819, P821, P822, P823, P824, P825, P950, P961, P962, P976, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1043, P1051 } Node (4105784 @ 3067578) (20)P814 { P12, P14, P83, P600, P601, P602, P603, P672, P673, P674, P675, P676, P677, P678, P679, P680, P681, P682, P695, P696, P697, P698, P699, P700, P701, P702, P703, P869, P1076 } Node (4105746 @ 3067290) (20)P815 { P140, P156, P171, P176, P177, P178, P181, P182, P183, P218, P219, P220, P221, P222, P223, P261, P262, P263, P264, P387, P391, P466, P467, P684, P685, P686, P716, P717, P721, P732, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P816, P817, P818, P819, P821, P822, P823, P824, P825, P950, P962, P976, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1043 } Node (4105783 @ 3067578) (20)P816 { P140, P156, P171, P176, P177, P178, P181, P182, P183, P218, P219, P220, P221, P222, P223, P261, P262, P263, P264, P387, P391, P466, P467, P684, P685, P686, P716, P717, P721, P732, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P815, P817, P818, P819, P821, P822, P823, P824, P825, P950, P961, P962, P976, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1043, P1051 } Node (4105784 @ 3067578) (20)P817 { P140, P156, P168, P171, P176, P177, P178, P181, P182, P183, P218, P219, P220, P222, P223, P260, P261, P262, P263, P264, P391, P392, P466, P467, P684, P685, P686, P716, P717, P721, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P785, P789, P790, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P818, P819, P821, P822, P823, P824, P825, P847, P976, P995, P996, P997, P998, P1004, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1043 } Node (4105779 @ 3067578) (20)P818 { P178, P180, P181, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P232, P262, P263, P264, P387, P388, P453, P685, P686, P687, P716, P717, P732, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P819, P821, P822, P823, P824, P825, P922, P950, P953, P960, P961, P962, P963, P964, P965, P966, P976, P995, P1007, P1008, P1009, P1010, P1041, P1042, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105795 @ 3067579) (20)P819 { P88, P178, P180, P181, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P232, P262, P263, P264, P387, P388, P453, P685, P686, P687, P716, P717, P732, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P821, P822, P823, P824, P825, P922, P962, P963, P964, P965, P976, P995, P1007, P1008, P1009, P1041, P1042, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105796 @ 3067581) (20)P820 { P38, P64, P65, P68, P69, P74, P76, P92, P93, P139, P153, P154, P159, P174, P381, P382, P730, P735, P737, P738, P739, P740, P745, P746, P747, P748, P781, P800, P801, P805, P826, P828, P829, P830, P831, P832, P833, P834, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844, P866 } Node (4105740 @ 3067615) (20)P821 { P88, P99, P178, P180, P181, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P226, P232, P262, P263, P264, P387, P453, P686, P687, P716, P717, P732, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P822, P823, P824, P825, P922, P962, P963, P976, P995, P1041, P1042, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105796 @ 3067583) (20)P822 { P87, P88, P99, P178, P181, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P226, P232, P262, P263, P264, P387, P453, P686, P687, P716, P717, P732, P754, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P823, P824, P825, P962, P1041, P1042, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105796 @ 3067584) (20)P823 { P87, P88, P99, P178, P181, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P226, P232, P262, P263, P264, P387, P453, P686, P716, P717, P732, P754, P755, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P824, P825, P1041, P1042, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105796 @ 3067585) (20)P824 { P180, P181, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P232, P262, P263, P264, P387, P388, P453, P685, P686, P687, P716, P717, P732, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P825, P922, P950, P953, P960, P961, P962, P963, P964, P965, P966, P967, P976, P995, P1007, P1008, P1009, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105797 @ 3067579) (20)P825 { P88, P178, P180, P181, P182, P183, P215, P218, P219, P221, P222, P223, P224, P225, P226, P232, P262, P263, P264, P387, P388, P453, P685, P686, P687, P716, P717, P732, P782, P785, P794, P795, P796, P797, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P822, P823, P824, P922, P962, P963, P964, P965, P966, P976, P995, P1007, P1008, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105797 @ 3067581) (20)P826 { P64, P65, P74, P75, P76, P78, P92, P96, P202, P212, P381, P382, P730, P781, P800, P802, P805, P820, P830, P831, P832, P833, P834, P835, P836 } Node (4105722 @ 3067617) (20)P827 { P360, P361, P362, P363, P364, P365, P375, P376, P470, P683, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P979, P980, P981 } Node (4105788 @ 3067534) (20)P828 { P19, P38, P39, P40, P65, P68, P69, P74, P92, P93, P94, P139, P154, P155, P159, P175, P735, P737, P738, P739, P740, P741, P742, P743, P744, P749, P750, P798, P801, P820, P829, P834, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875, P1040 } Node (4105753 @ 3067613) (20)P829 { P19, P38, P40, P65, P68, P69, P74, P92, P93, P94, P139, P154, P155, P159, P174, P382, P730, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P798, P801, P820, P828, P831, P832, P833, P834, P835, P836, P837, P838, P839, P840, P841, P842, P843, P844, P866, P867, P868, P872, P873 } Node (4105747 @ 3067614) (20)P830 { P64, P65, P68, P69, P74, P75, P76, P78, P92, P96, P153, P212, P381, P382, P730, P781, P800, P802, P805, P820, P826, P831, P832, P833, P834, P835, P836, P837, P839, P840 } Node (4105727 @ 3067617) (20)P831 { P64, P65, P68, P69, P74, P75, P76, P78, P92, P96, P153, P174, P212, P381, P382, P730, P747, P748, P781, P800, P802, P805, P820, P826, P829, P830, P832, P833, P834, P835, P836, P837, P839, P840, P841 } Node (4105729 @ 3067616) (20)P832 { P64, P65, P68, P69, P74, P75, P76, P92, P96, P153, P159, P174, P212, P381, P382, P730, P746, P747, P748, P781, P800, P802, P805, P820, P826, P829, P830, P831, P833, P834, P835, P836, P837, P838, P839, P840, P841 } Node (4105732 @ 3067616) (20)P833 { P64, P65, P68, P69, P74, P75, P76, P92, P96, P153, P159, P174, P212, P381, P382, P730, P746, P747, P748, P781, P800, P802, P805, P820, P826, P829, P830, P831, P832, P834, P835, P836, P837, P838, P839, P840, P841, P842 } Node (4105733 @ 3067616) (20)P834 { P38, P64, P65, P68, P69, P74, P75, P76, P92, P93, P153, P154, P159, P174, P381, P382, P730, P745, P746, P747, P748, P781, P800, P802, P805, P820, P826, P828, P829, P830, P831, P832, P833, P835, P836, P837, P838, P839, P840, P841, P842, P843 } Node (4105735 @ 3067616) (20)P835 { P38, P64, P65, P68, P69, P74, P76, P92, P93, P153, P154, P159, P174, P381, P382, P730, P735, P737, P738, P739, P740, P745, P746, P747, P748, P781, P800, P801, P802, P805, P820, P826, P828, P829, P830, P831, P832, P833, P834, P836, P837, P838, P839, P840, P841, P842, P843, P844 } Node (4105738 @ 3067615) (20)P836 { P38, P64, P65, P68, P69, P74, P76, P92, P93, P139, P153, P154, P159, P174, P382, P730, P735, P737, P738, P739, P740, P745, P746, P747, P748, P781, P800, P801, P820, P826, P828, P829, P830, P831, P832, P833, P834, P835, P837, P838, P839, P840, P841, P842, P843, P844, P866 } Node (4105741 @ 3067615) (20)P837 { P38, P64, P65, P68, P69, P74, P76, P92, P93, P94, P139, P153, P154, P159, P174, P382, P730, P735, P737, P738, P739, P740, P741, P745, P746, P747, P748, P781, P800, P801, P820, P828, P829, P830, P831, P832, P833, P834, P835, P836, P838, P839, P840, P841, P842, P843, P844, P866, P868 } Node (4105742 @ 3067615) (20)P838 { P19, P38, P40, P65, P68, P69, P74, P92, P93, P94, P139, P154, P155, P159, P174, P175, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P798, P801, P820, P828, P829, P832, P833, P834, P835, P836, P837, P839, P840, P841, P842, P843, P844, P866, P867, P868, P872, P873, P874, P875 } Node (4105750 @ 3067614) (20)P839 { P19, P38, P40, P64, P65, P68, P69, P74, P76, P92, P93, P94, P139, P153, P154, P155, P159, P174, P382, P730, P735, P737, P738, P739, P740, P741, P742, P743, P745, P746, P747, P748, P798, P800, P801, P820, P828, P829, P830, P831, P832, P833, P834, P835, P836, P837, P838, P840, P841, P842, P843, P844, P866, P867, P868 } Node (4105744 @ 3067614) (20)P840 { P19, P38, P40, P65, P68, P69, P74, P92, P93, P94, P139, P154, P155, P159, P174, P382, P730, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P747, P748, P798, P801, P820, P828, P829, P830, P831, P832, P833, P834, P835, P836, P837, P838, P839, P841, P842, P843, P844, P866, P867, P868, P872 } Node (4105746 @ 3067614) (20)P841 { P19, P38, P40, P65, P68, P69, P74, P92, P93, P94, P139, P154, P155, P159, P174, P730, P735, P737, P738, P739, P740, P741, P742, P743, P744, P745, P746, P798, P801, P820, P828, P829, P831, P832, P833, P834, P835, P836, P837, P838, P839, P840, P842, P843, P844, P866, P867, P868, P872, P873, P874 } Node (4105748 @ 3067614) (20)P842 { P19, P38, P39, P40, P65, P68, P69, P74, P92, P93, P94, P139, P154, P155, P159, P174, P175, P735, P737, P738, P739, P740, P741, P742, P743, P744, P749, P750, P798, P801, P820, P828, P829, P833, P834, P835, P836, P837, P838, P839, P840, P841, P843, P844, P866, P867, P868, P872, P873, P874, P875 } Node (4105752 @ 3067613) (20)P843 { P19, P38, P39, P40, P68, P69, P74, P85, P92, P93, P94, P139, P154, P155, P159, P175, P737, P738, P739, P740, P741, P742, P743, P744, P749, P750, P798, P801, P820, P828, P829, P834, P835, P836, P837, P838, P839, P840, P841, P842, P844, P866, P867, P868, P872, P873, P874, P875, P1040 } Node (4105754 @ 3067613) (20)P844 { P19, P38, P39, P40, P68, P69, P85, P92, P93, P94, P139, P154, P155, P157, P158, P159, P175, P214, P740, P741, P742, P743, P744, P749, P750, P798, P801, P820, P828, P829, P835, P836, P837, P838, P839, P840, P841, P842, P843, P866, P867, P868, P872, P873, P874, P875, P877, P1039, P1040 } Node (4105757 @ 3067613) (20)P845 { P138, P143, P145, P146, P147, P148, P149, P152, P163, P164, P165, P451, P465, P692, P729, P787, P791, P792, P793, P954, P994, P1018, P1021, P1022, P1026, P1028, P1031, P1032, P1033, P1034, P1035 } Node (4105721 @ 3067578) (20)P846 { P360, P361, P362, P363, P364, P375, P376, P377, P469, P683, P827, P848, P849, P858, P859, P860, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P934, P979, P980, P981, P982, P984, P985, P986, P988 } Node (4105795 @ 3067534) (20)P847 { P140, P141, P167, P168, P171, P176, P220, P260, P261, P371, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P731, P733, P734, P736, P756, P761, P762, P763, P764, P772, P773, P774, P775, P776, P777, P778, P783, P784, P786, P788, P789, P790, P808, P817, P937, P938, P939, P940, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P998, P1000, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1052 } Node (4105765 @ 3067565) (20)P848 { P197, P198, P231, P358, P359, P360, P361, P469, P846, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P876, P905, P906, P907, P908, P909, P983, P987, P990 } Node (4105812 @ 3067529) (20)P849 { P197, P198, P231, P358, P359, P360, P469, P846, P848, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P905, P906, P907, P908, P909, P978, P983, P987, P990 } Node (4105813 @ 3067529) (20)P850 { P197, P198, P231, P358, P359, P360, P469, P848, P849, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P905, P906, P907, P908, P909, P978 } Node (4105815 @ 3067528) (20)P851 { P196, P197, P198, P201, P231, P358, P359, P360, P469, P848, P849, P850, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P906, P907, P908, P909, P978 } Node (4105816 @ 3067528) (20)P852 { P196, P197, P198, P201, P231, P358, P359, P360, P469, P848, P849, P850, P851, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P906, P907, P908, P909 } Node (4105818 @ 3067527) (20)P853 { P196, P197, P198, P200, P201, P231, P358, P359, P360, P454, P469, P848, P849, P850, P851, P852, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P908, P909, P1066, P1067 } Node (4105820 @ 3067527) (20)P854 { P196, P197, P198, P200, P201, P231, P358, P359, P360, P454, P469, P848, P849, P850, P851, P852, P853, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P908, P909, P1066, P1067 } Node (4105821 @ 3067527) (20)P855 { P196, P197, P198, P200, P201, P231, P359, P360, P454, P469, P848, P849, P850, P851, P852, P853, P854, P856, P857, P858, P859, P860, P861, P862, P863, P864, P865, P1066, P1067 } Node (4105822 @ 3067526) (20)P856 { P196, P197, P198, P199, P200, P201, P358, P359, P360, P454, P469, P848, P849, P850, P851, P852, P853, P854, P855, P857, P858, P859, P860, P861, P862, P863, P864, P865, P1066, P1067 } Node (4105824 @ 3067526) (20)P857 { P196, P197, P198, P199, P200, P201, P231, P358, P359, P360, P454, P469, P848, P849, P850, P851, P852, P853, P854, P855, P856, P858, P859, P860, P861, P862, P863, P864, P865, P1066, P1067 } Node (4105825 @ 3067526) (20)P858 { P197, P198, P231, P358, P359, P360, P361, P362, P469, P846, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P859, P860, P861, P862, P863, P864, P865, P876, P905, P906, P907, P908, P909, P978, P983, P985, P986, P987, P988, P989, P990 } Node (4105811 @ 3067531) (20)P859 { P197, P198, P231, P358, P359, P360, P361, P469, P846, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P860, P861, P862, P863, P864, P865, P876, P905, P906, P907, P908, P909, P978, P983, P985, P986, P987, P988, P989, P990 } Node (4105812 @ 3067530) (20)P860 { P197, P198, P231, P358, P359, P360, P469, P846, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P861, P862, P863, P864, P865, P905, P906, P907, P908, P909, P974, P977, P978, P983, P987, P988, P989, P990 } Node (4105814 @ 3067530) (20)P861 { P197, P198, P231, P358, P359, P360, P469, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P862, P863, P864, P865, P905, P906, P907, P908, P909, P974, P975, P977, P978, P983, P987, P989, P990 } Node (4105815 @ 3067530) (20)P862 { P197, P198, P201, P231, P358, P359, P360, P469, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P863, P864, P865, P906, P907, P908, P909, P974, P975, P977, P978, P983, P987, P990 } Node (4105817 @ 3067529) (20)P863 { P196, P197, P198, P200, P201, P231, P358, P359, P360, P469, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P864, P865, P906, P907, P908, P909, P935, P974, P975, P977, P978, P983, P987, P990 } Node (4105818 @ 3067529) (20)P864 { P196, P197, P198, P199, P200, P201, P231, P358, P359, P360, P454, P469, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P865, P935, P974, P975, P977, P978, P1066, P1067 } Node (4105824 @ 3067528) (20)P865 { P196, P197, P198, P199, P200, P201, P231, P358, P359, P360, P454, P469, P848, P849, P850, P851, P852, P853, P854, P855, P856, P857, P858, P859, P860, P861, P862, P863, P864, P1066, P1067 } Node (4105826 @ 3067527) (20)P866 { P19, P38, P39, P40, P68, P69, P85, P93, P94, P139, P154, P155, P157, P158, P175, P214, P740, P741, P742, P743, P744, P749, P750, P798, P801, P820, P828, P829, P836, P837, P838, P839, P840, P841, P842, P843, P844, P867, P868, P872, P873, P874, P875, P877, P1036, P1038, P1039, P1040 } Node (4105759 @ 3067612) (20)P867 { P19, P38, P39, P40, P42, P68, P69, P85, P93, P94, P139, P155, P157, P158, P175, P214, P452, P743, P744, P749, P750, P798, P801, P828, P829, P838, P839, P840, P841, P842, P843, P844, P866, P868, P872, P873, P874, P875, P877, P878, P879, P880, P1036, P1038, P1039, P1040 } Node (4105762 @ 3067612) (20)P868 { P19, P38, P39, P40, P42, P68, P69, P85, P93, P94, P139, P155, P157, P158, P175, P214, P452, P743, P744, P749, P750, P798, P801, P828, P829, P837, P838, P839, P840, P841, P842, P843, P844, P866, P867, P872, P873, P874, P875, P877, P878, P879, P1036, P1038, P1039, P1040 } Node (4105761 @ 3067612) (20)P869 { P12, P14, P15, P83, P600, P601, P602, P603, P672, P673, P674, P675, P676, P677, P678, P679, P680, P681, P682, P699, P814, P1076 } Node (4105752 @ 3067294) (20)P870 { P363, P365, P366, P367, P368, P369, P370, P371, P372, P373, P393, P394, P470, P471, P733, P804, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P1004, P1005, P1006, P1016 } Node (4105762 @ 3067544) (20)P871 { P18, P35, P41, P43, P45, P46, P66, P67, P87, P88, P99, P100, P215, P223, P224, P225, P453, P795, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105801 @ 3067607) (20)P872 { P19, P38, P39, P40, P42, P43, P85, P93, P94, P139, P157, P158, P175, P214, P452, P744, P749, P750, P801, P828, P829, P838, P840, P841, P842, P843, P844, P866, P867, P868, P873, P874, P875, P877, P878, P879, P880, P881, P1036, P1038, P1039, P1040 } Node (4105764 @ 3067612) (20)P873 { P19, P38, P39, P40, P42, P43, P85, P93, P94, P139, P157, P158, P175, P214, P452, P466, P749, P750, P801, P828, P829, P838, P841, P842, P843, P844, P866, P867, P868, P872, P874, P875, P877, P878, P879, P880, P881, P882, P1036, P1038, P1039, P1040 } Node (4105766 @ 3067612) (20)P874 { P19, P38, P39, P40, P42, P43, P85, P93, P94, P139, P157, P158, P175, P214, P452, P466, P749, P750, P751, P752, P801, P828, P838, P841, P842, P843, P844, P866, P867, P868, P872, P873, P875, P877, P878, P879, P880, P881, P882, P883, P1036, P1038, P1039, P1040 } Node (4105767 @ 3067611) (20)P875 { P19, P38, P39, P40, P42, P43, P85, P93, P94, P139, P157, P158, P214, P452, P466, P749, P750, P751, P752, P801, P828, P838, P842, P843, P844, P866, P867, P868, P872, P873, P874, P877, P878, P879, P880, P881, P882, P883, P884, P1036, P1038, P1039, P1040 } Node (4105768 @ 3067611) (20)P876 { P360, P361, P362, P363, P364, P365, P375, P376, P377, P683, P827, P846, P848, P858, P859, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P934, P979, P980, P981, P982, P984, P985 } Node (4105793 @ 3067534) (20)P877 { P19, P39, P40, P42, P43, P45, P67, P85, P87, P94, P157, P158, P177, P178, P214, P452, P466, P751, P752, P753, P754, P755, P801, P844, P866, P867, P868, P872, P873, P874, P875, P878, P879, P880, P881, P882, P883, P884, P886, P887, P888, P889, P1036, P1038, P1040 } Node (4105774 @ 3067610) (20)P878 { P18, P19, P39, P40, P42, P43, P45, P67, P85, P87, P157, P158, P178, P214, P218, P452, P466, P751, P752, P753, P754, P755, P797, P867, P868, P872, P873, P874, P875, P877, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891 } Node (4105779 @ 3067610) (20)P879 { P18, P19, P39, P42, P43, P45, P67, P85, P87, P88, P157, P178, P214, P218, P452, P466, P751, P752, P753, P754, P755, P796, P797, P867, P868, P872, P873, P874, P875, P877, P878, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892 } Node (4105780 @ 3067610) (20)P880 { P18, P19, P39, P42, P43, P45, P67, P85, P87, P88, P157, P178, P214, P215, P218, P452, P466, P751, P752, P753, P754, P755, P785, P794, P796, P797, P867, P872, P873, P874, P875, P877, P878, P879, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892 } Node (4105781 @ 3067609) (20)P881 { P18, P39, P42, P43, P45, P67, P85, P87, P88, P178, P214, P215, P218, P452, P466, P751, P752, P753, P754, P755, P785, P794, P796, P797, P871, P872, P873, P874, P875, P877, P878, P879, P880, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893 } Node (4105783 @ 3067609) (20)P882 { P18, P39, P42, P43, P45, P67, P85, P87, P88, P178, P214, P215, P218, P452, P466, P716, P751, P752, P753, P754, P755, P785, P794, P796, P797, P871, P873, P874, P875, P877, P878, P879, P880, P881, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894 } Node (4105785 @ 3067609) (20)P883 { P18, P39, P42, P43, P45, P46, P67, P85, P87, P88, P178, P214, P215, P218, P223, P452, P466, P716, P752, P753, P754, P755, P785, P794, P795, P796, P797, P871, P874, P875, P877, P878, P879, P880, P881, P882, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894 } Node (4105786 @ 3067609) (20)P884 { P18, P39, P42, P43, P45, P46, P67, P85, P87, P88, P178, P214, P215, P218, P223, P452, P716, P753, P754, P755, P785, P794, P795, P796, P797, P871, P875, P877, P878, P879, P880, P881, P882, P883, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895 } Node (4105787 @ 3067609) (20)P885 { P18, P42, P43, P45, P46, P66, P67, P87, P88, P99, P178, P215, P218, P223, P452, P453, P716, P785, P794, P795, P796, P797, P871, P878, P879, P880, P881, P882, P883, P884, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105794 @ 3067608) (20)P886 { P18, P42, P43, P45, P46, P67, P85, P87, P88, P99, P178, P214, P215, P218, P223, P452, P453, P716, P754, P755, P785, P794, P795, P796, P797, P871, P877, P878, P879, P880, P881, P882, P883, P884, P885, P887, P888, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105789 @ 3067608) (20)P887 { P18, P42, P43, P45, P46, P67, P85, P87, P88, P99, P178, P215, P218, P223, P452, P453, P716, P755, P785, P794, P795, P796, P797, P871, P877, P878, P879, P880, P881, P882, P883, P884, P885, P886, P888, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105790 @ 3067608) (20)P888 { P18, P42, P43, P45, P46, P67, P85, P87, P88, P99, P178, P215, P218, P223, P452, P453, P716, P755, P785, P794, P795, P796, P797, P871, P877, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P889, P890, P891, P892, P893, P894, P895, P896 } Node (4105791 @ 3067608) (20)P889 { P18, P42, P43, P45, P46, P66, P67, P87, P88, P99, P178, P215, P218, P223, P452, P453, P716, P785, P794, P795, P796, P797, P871, P877, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P890, P891, P892, P893, P894, P895, P896 } Node (4105793 @ 3067608) (20)P890 { P18, P42, P43, P45, P46, P66, P67, P87, P88, P99, P178, P215, P218, P223, P224, P452, P453, P716, P785, P794, P795, P796, P871, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P891, P892, P893, P894, P895, P896 } Node (4105795 @ 3067608) (20)P891 { P18, P43, P45, P46, P66, P67, P87, P88, P99, P178, P215, P218, P223, P224, P452, P453, P716, P785, P794, P795, P796, P871, P878, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P892, P893, P894, P895, P896 } Node (4105796 @ 3067607) (20)P892 { P18, P35, P41, P43, P45, P46, P66, P67, P87, P88, P99, P100, P215, P218, P223, P224, P453, P716, P794, P795, P871, P879, P880, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P893, P894, P895, P896 } Node (4105799 @ 3067607) (20)P893 { P18, P35, P41, P43, P45, P46, P66, P67, P87, P88, P99, P100, P215, P223, P224, P225, P453, P795, P871, P881, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P894, P895, P896 } Node (4105802 @ 3067607) (20)P894 { P18, P35, P41, P45, P46, P66, P67, P87, P88, P99, P100, P213, P215, P223, P224, P225, P453, P871, P882, P883, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P895, P896 } Node (4105804 @ 3067606) (20)P895 { P18, P35, P41, P46, P66, P67, P88, P91, P99, P100, P213, P215, P223, P224, P225, P453, P871, P884, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P896 } Node (4105806 @ 3067606) (20)P896 { P18, P35, P41, P46, P66, P67, P88, P91, P99, P100, P213, P215, P223, P224, P225, P226, P453, P871, P885, P886, P887, P888, P889, P890, P891, P892, P893, P894, P895 } Node (4105807 @ 3067606) (20)P897 { P360, P361, P362, P363, P364, P365, P374, P375, P376, P377, P389, P390, P470, P683, P827, P846, P876, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P956, P957, P958, P959, P979, P980, P981, P982, P984, P985, P986 } Node (4105790 @ 3067540) (20)P898 { P363, P365, P366, P367, P368, P369, P370, P371, P372, P373, P393, P394, P470, P471, P733, P804, P870, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P1005, P1006, P1016 } Node (4105761 @ 3067543) (20)P899 { P361, P362, P363, P364, P365, P375, P376, P470, P683, P827, P846, P876, P897, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933 } Node (4105786 @ 3067534) (20)P900 { P361, P362, P363, P364, P365, P374, P375, P376, P377, P378, P388, P389, P390, P683, P827, P846, P876, P897, P899, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P979, P980, P981, P982, P984, P985, P986, P988 } Node (4105791 @ 3067546) (20)P901 { P361, P362, P363, P364, P365, P366, P370, P375, P376, P470, P683, P827, P846, P876, P897, P899, P900, P902, P903, P904, P905, P906, P907, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P941, P942, P943 } Node (4105781 @ 3067535) (20)P902 { P361, P362, P363, P364, P365, P366, P376, P470, P683, P827, P846, P876, P897, P899, P900, P901, P903, P904, P905, P906, P907, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933 } Node (4105782 @ 3067534) (20)P903 { P361, P362, P363, P364, P365, P375, P376, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933 } Node (4105784 @ 3067534) (20)P904 { P361, P362, P363, P364, P365, P375, P376, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P980 } Node (4105787 @ 3067534) (20)P905 { P360, P361, P362, P363, P364, P376, P377, P469, P683, P827, P846, P848, P849, P850, P858, P859, P860, P861, P876, P897, P899, P900, P901, P902, P903, P904, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P934, P979, P980, P981, P982, P984, P985, P986, P988 } Node (4105796 @ 3067534) (20)P906 { P359, P360, P361, P362, P364, P469, P683, P827, P846, P848, P849, P850, P851, P852, P858, P859, P860, P861, P862, P863, P876, P897, P899, P900, P901, P902, P903, P904, P905, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P934, P979, P980, P981, P982, P984, P985, P986, P988 } Node (4105799 @ 3067533) (20)P907 { P359, P360, P361, P362, P364, P469, P683, P827, P846, P848, P849, P850, P851, P852, P858, P859, P860, P861, P862, P863, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P933, P934, P979, P980, P981, P982, P984, P985, P986, P988, P989 } Node (4105800 @ 3067533) (20)P908 { P359, P360, P361, P362, P364, P378, P469, P683, P827, P846, P848, P849, P850, P851, P852, P853, P854, P858, P859, P860, P861, P862, P863, P876, P897, P899, P900, P903, P904, P905, P906, P907, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P933, P934, P979, P980, P981, P982, P984, P985, P986, P988, P989, P990 } Node (4105802 @ 3067533) (20)P909 { P359, P360, P361, P362, P364, P378, P469, P683, P827, P846, P848, P849, P850, P851, P852, P853, P854, P858, P859, P860, P861, P862, P863, P876, P897, P899, P900, P903, P904, P905, P906, P907, P908, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P933, P934, P980, P981, P982, P984, P985, P986, P987, P988, P989, P990 } Node (4105803 @ 3067533) (20)P910 { P264, P361, P362, P363, P364, P374, P375, P376, P377, P378, P387, P388, P389, P390, P683, P686, P687, P803, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P995 } Node (4105793 @ 3067549) (20)P911 { P360, P361, P362, P363, P364, P374, P375, P376, P377, P378, P387, P388, P389, P390, P683, P687, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P964, P979, P980, P981, P982, P984, P985, P986, P988, P989, P995 } Node (4105793 @ 3067547) (20)P912 { P360, P361, P362, P363, P364, P365, P374, P375, P376, P377, P378, P388, P389, P390, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P979, P980, P981, P982, P984, P985, P986, P988, P989 } Node (4105792 @ 3067546) (20)P913 { P360, P361, P362, P363, P364, P365, P374, P375, P376, P377, P378, P388, P389, P390, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P979, P980, P981, P982, P984, P985, P986, P988, P989 } Node (4105792 @ 3067544) (20)P914 { P360, P361, P362, P363, P364, P365, P374, P375, P376, P377, P389, P390, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P979, P980, P981, P982, P984, P985, P986, P988 } Node (4105792 @ 3067542) (20)P915 { P360, P361, P362, P363, P364, P365, P375, P376, P377, P389, P390, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P956, P957, P958, P959, P979, P980, P981, P982, P984, P985, P986, P988 } Node (4105792 @ 3067540) (20)P916 { P361, P362, P363, P364, P365, P374, P375, P376, P377, P378, P387, P388, P389, P390, P683, P686, P687, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P917, P918, P919, P920, P921, P922, P923, P924, P925, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995 } Node (4105791 @ 3067548) (20)P917 { P360, P361, P362, P363, P364, P365, P375, P376, P377, P390, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P931, P933, P934, P956, P958, P959, P979, P980, P981, P982, P984, P985, P986, P988 } Node (4105792 @ 3067539) (20)P918 { P360, P361, P362, P363, P364, P365, P375, P376, P377, P390, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P919, P920, P921, P923, P924, P925, P927, P928, P930, P931, P933, P934, P956, P958, P959, P979, P980, P981, P982, P984, P985 } Node (4105791 @ 3067537) (20)P919 { P360, P361, P362, P363, P364, P365, P375, P376, P377, P390, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P920, P921, P923, P924, P925, P927, P928, P930, P931, P933, P934, P956, P958, P959, P979, P980, P981, P982, P984 } Node (4105790 @ 3067537) (20)P920 { P360, P361, P362, P363, P364, P365, P375, P376, P377, P390, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P921, P923, P924, P925, P927, P928, P930, P931, P933, P934, P956, P958, P959, P979, P980, P981, P982, P984, P985 } Node (4105790 @ 3067538) (20)P921 { P360, P361, P362, P363, P364, P365, P375, P376, P377, P390, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P923, P924, P925, P927, P928, P930, P931, P933, P934, P956, P958, P959, P979, P980, P981, P982, P984, P985, P986 } Node (4105790 @ 3067539) (20)P922 { P179, P180, P182, P183, P219, P221, P222, P232, P264, P375, P376, P377, P378, P386, P387, P388, P389, P390, P685, P686, P687, P717, P782, P799, P803, P806, P809, P810, P818, P819, P821, P824, P825, P910, P911, P916, P926, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P995, P1007, P1008, P1009, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105801 @ 3067564) (20)P923 { P360, P361, P362, P363, P364, P365, P374, P375, P376, P377, P389, P390, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P924, P925, P927, P928, P929, P930, P931, P933, P934, P953, P956, P957, P958, P959, P960, P979, P980, P981, P982, P984, P985, P986, P988 } Node (4105790 @ 3067541) (20)P924 { P360, P361, P362, P363, P364, P365, P374, P375, P376, P377, P389, P390, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P925, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P979, P980, P981, P982, P984, P985, P986, P988 } Node (4105790 @ 3067542) (20)P925 { P360, P361, P362, P363, P364, P365, P374, P375, P376, P377, P388, P389, P390, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P927, P928, P929, P930, P931, P933, P934, P950, P953, P956, P957, P958, P959, P960, P961, P979, P980, P981, P982, P984, P985, P986, P988 } Node (4105790 @ 3067543) (20)P926 { P179, P180, P228, P229, P232, P378, P383, P384, P385, P386, P468, P687, P688, P689, P922, P935, P955, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P974, P975, P977, P978, P983, P984, P985, P986, P987, P988, P989, P990, P1037, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105818 @ 3067562) (20)P927 { P361, P362, P363, P364, P365, P375, P376, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P928, P930, P933, P980 } Node (4105784 @ 3067536) (20)P928 { P361, P362, P363, P364, P365, P375, P376, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P930, P933, P958, P979, P980, P981 } Node (4105785 @ 3067536) (20)P929 { P183, P219, P221, P232, P262, P264, P374, P375, P376, P377, P378, P387, P388, P389, P390, P391, P683, P685, P686, P687, P782, P799, P803, P806, P809, P810, P897, P900, P910, P911, P912, P913, P914, P915, P916, P922, P923, P924, P925, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1041, P1051 } Node (4105793 @ 3067559) (20)P930 { P361, P362, P363, P364, P365, P366, P370, P375, P376, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P933, P941, P942, P943 } Node (4105781 @ 3067536) (20)P931 { P219, P264, P362, P374, P375, P376, P377, P378, P387, P388, P389, P390, P391, P683, P685, P686, P687, P799, P803, P806, P897, P900, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P929, P934, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995, P1007, P1008, P1009, P1010, P1012, P1013, P1014 } Node (4105792 @ 3067556) (20)P932 { P145, P148, P162, P169, P204, P205, P353, P357, P473, P474, P475, P690, P691, P692, P954, P1002, P1003, P1018, P1019, P1020, P1023, P1024, P1025, P1027, P1029, P1030, P1031, P1032, P1033, P1034 } Node (4105694 @ 3067581) (20)P933 { P361, P362, P363, P364, P365, P375, P376, P470, P683, P827, P846, P876, P897, P899, P900, P901, P902, P903, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P923, P924, P925, P927, P928, P930, P979, P980 } Node (4105786 @ 3067535) (20)P934 { P264, P360, P361, P362, P375, P376, P377, P378, P387, P388, P389, P390, P683, P686, P687, P803, P806, P846, P876, P897, P900, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P929, P931, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P979, P980, P981, P982, P983, P984, P985, P986, P987, P988, P989, P990 } Node (4105801 @ 3067551) (20)P935 { P198, P199, P200, P230, P378, P383, P384, P385, P386, P468, P688, P689, P863, P864, P926, P970, P971, P972, P973, P974, P975, P977, P978, P983, P986, P987, P988, P989, P990 } Node (4105826 @ 3067547) (20)P936 { P363, P365, P366, P367, P368, P369, P370, P371, P372, P373, P394, P470, P471, P733, P804, P870, P898, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P993, P1005, P1006 } Node (4105761 @ 3067541) (20)P937 { P363, P365, P366, P367, P368, P369, P370, P371, P372, P373, P374, P393, P394, P470, P471, P733, P804, P847, P870, P898, P936, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P1004, P1005, P1006, P1016, P1017 } Node (4105762 @ 3067547) (20)P938 { P365, P366, P367, P368, P369, P370, P371, P372, P373, P374, P393, P394, P470, P471, P733, P804, P847, P870, P898, P936, P937, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P1004, P1005, P1006, P1016, P1017 } Node (4105762 @ 3067548) (20)P939 { P365, P366, P367, P368, P369, P370, P371, P373, P374, P392, P393, P394, P470, P471, P733, P804, P847, P870, P898, P936, P937, P938, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P1004, P1005, P1006, P1016, P1017 } Node (4105762 @ 3067550) (20)P940 { P365, P366, P367, P368, P369, P370, P371, P373, P374, P392, P393, P394, P470, P471, P684, P733, P804, P847, P870, P898, P936, P937, P938, P939, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P1004, P1005, P1006, P1016, P1017 } Node (4105762 @ 3067551) (20)P941 { P363, P365, P366, P367, P368, P369, P370, P371, P372, P373, P394, P470, P471, P733, P804, P870, P898, P901, P930, P936, P937, P938, P939, P940, P942, P943, P944, P945, P946, P947, P948, P949, P993, P1005, P1006 } Node (4105762 @ 3067541) (20)P942 { P363, P365, P366, P367, P368, P369, P370, P371, P372, P373, P394, P470, P471, P733, P804, P870, P898, P901, P930, P936, P937, P938, P939, P940, P941, P943, P944, P945, P946, P947, P948, P949, P952, P991, P993, P1005, P1006 } Node (4105763 @ 3067542) (20)P943 { P363, P365, P366, P367, P368, P369, P370, P371, P372, P373, P393, P394, P470, P471, P733, P804, P870, P898, P901, P930, P936, P937, P938, P939, P940, P941, P942, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P1005, P1006, P1016 } Node (4105763 @ 3067543) (20)P944 { P363, P365, P366, P367, P368, P369, P370, P371, P372, P373, P374, P393, P394, P470, P471, P733, P804, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P945, P946, P947, P948, P949, P952, P991, P992, P993, P1004, P1005, P1006, P1016, P1017 } Node (4105763 @ 3067545) (20)P945 { P363, P365, P366, P367, P368, P369, P370, P371, P372, P373, P374, P393, P394, P470, P471, P733, P804, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P946, P947, P948, P949, P952, P991, P992, P993, P996, P1004, P1005, P1006, P1016, P1017 } Node (4105763 @ 3067547) (20)P946 { P363, P365, P366, P367, P368, P369, P370, P371, P373, P374, P393, P394, P470, P471, P733, P804, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P947, P948, P949, P952, P991, P992, P993, P996, P997, P1004, P1005, P1006, P1016, P1017 } Node (4105763 @ 3067548) (20)P947 { P363, P365, P366, P367, P368, P369, P370, P371, P373, P374, P392, P393, P394, P470, P471, P733, P804, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P948, P949, P952, P991, P992, P993, P996, P997, P1004, P1005, P1006, P1016, P1017 } Node (4105764 @ 3067549) (20)P948 { P365, P366, P367, P368, P369, P370, P371, P373, P374, P392, P393, P394, P470, P471, P684, P733, P804, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P949, P952, P991, P992, P993, P996, P997, P998, P1004, P1005, P1006, P1011, P1015, P1016, P1017 } Node (4105764 @ 3067551) (20)P949 { P140, P365, P366, P367, P368, P369, P370, P371, P373, P374, P392, P393, P394, P470, P471, P684, P733, P774, P804, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P952, P991, P992, P993, P996, P997, P998, P1004, P1005, P1006, P1011, P1014, P1015, P1016, P1017 } Node (4105764 @ 3067552) (20)P950 { P182, P183, P219, P221, P232, P262, P263, P264, P374, P375, P376, P377, P378, P387, P388, P389, P390, P391, P683, P685, P686, P687, P782, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P818, P824, P900, P910, P911, P912, P913, P914, P916, P922, P924, P925, P929, P931, P934, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1041, P1048, P1049, P1050, P1051 } Node (4105793 @ 3067561) (20)P951 { P138, P141, P142, P144, P149, P150, P151, P152, P160, P164, P165, P166, P167, P168, P170, P172, P173, P260, P451, P722, P729, P731, P734, P736, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P783, P784, P786, P787, P788, P789, P790, P791, P792, P793, P808, P999, P1000, P1001, P1052, P1059 } Node (4105745 @ 3067575) (20)P952 { P140, P141, P167, P168, P171, P220, P260, P261, P370, P371, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P733, P734, P772, P773, P774, P775, P776, P777, P783, P784, P786, P788, P789, P790, P804, P808, P847, P870, P898, P937, P938, P939, P940, P942, P943, P944, P945, P946, P947, P948, P949, P991, P992, P993, P996, P997, P998, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105765 @ 3067561) (20)P953 { P183, P219, P221, P232, P262, P264, P374, P375, P376, P377, P378, P387, P388, P389, P390, P391, P683, P685, P686, P687, P782, P799, P803, P806, P809, P810, P811, P812, P818, P824, P900, P910, P911, P912, P913, P914, P916, P922, P923, P924, P925, P929, P931, P934, P950, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1041, P1050, P1051 } Node (4105793 @ 3067560) (20)P954 { P138, P145, P146, P147, P148, P149, P152, P161, P163, P164, P169, P465, P475, P691, P692, P793, P845, P932, P994, P1002, P1018, P1021, P1022, P1024, P1026, P1028, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105712 @ 3067579) (20)P955 { P179, P180, P219, P221, P228, P232, P264, P377, P378, P384, P385, P386, P387, P388, P687, P799, P803, P806, P922, P926, P929, P934, P950, P953, P957, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P977, P978, P979, P980, P981, P982, P983, P984, P985, P986, P987, P988, P989, P990, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105812 @ 3067563) (20)P956 { P219, P264, P362, P364, P374, P375, P376, P377, P378, P387, P388, P389, P390, P391, P683, P685, P686, P687, P799, P803, P806, P897, P900, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P929, P931, P934, P950, P953, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P995, P1007, P1008, P1009, P1010, P1012, P1013 } Node (4105792 @ 3067555) (20)P957 { P183, P219, P221, P232, P264, P374, P375, P376, P377, P378, P387, P388, P389, P390, P391, P683, P685, P686, P687, P782, P799, P803, P806, P809, P810, P897, P900, P910, P911, P912, P913, P914, P915, P916, P922, P923, P924, P925, P929, P931, P934, P950, P953, P955, P956, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P995, P1007, P1008, P1009, P1010, P1012, P1013, P1014, P1041, P1050, P1051 } Node (4105794 @ 3067559) (20)P958 { P219, P264, P361, P362, P364, P374, P375, P376, P377, P378, P387, P388, P389, P390, P683, P685, P686, P687, P799, P803, P806, P897, P900, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P928, P929, P931, P934, P950, P953, P956, P957, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P995, P1007, P1008, P1009, P1010, P1012, P1013 } Node (4105793 @ 3067554) (20)P959 { P219, P221, P264, P362, P374, P375, P376, P377, P378, P387, P388, P389, P390, P683, P685, P686, P687, P799, P803, P806, P897, P900, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P929, P931, P934, P950, P953, P955, P956, P957, P958, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P995, P1007, P1008, P1009, P1010, P1012, P1013 } Node (4105794 @ 3067556) (20)P960 { P183, P219, P221, P232, P262, P264, P374, P375, P376, P377, P378, P387, P388, P389, P390, P391, P683, P685, P686, P687, P782, P799, P803, P806, P809, P810, P811, P818, P824, P900, P910, P911, P912, P913, P914, P916, P922, P923, P924, P925, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P961, P962, P963, P964, P965, P966, P967, P968, P969, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995, P1007, P1008, P1009, P1010, P1012, P1013, P1014, P1041, P1048, P1049, P1050, P1051 } Node (4105794 @ 3067560) (20)P961 { P182, P183, P219, P221, P232, P262, P264, P374, P375, P376, P377, P378, P387, P388, P389, P390, P391, P683, P685, P686, P687, P782, P799, P803, P806, P809, P810, P811, P812, P813, P816, P818, P824, P900, P910, P911, P912, P913, P914, P916, P922, P924, P925, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P962, P963, P964, P965, P966, P967, P968, P969, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1041, P1042, P1048, P1049, P1050, P1051 } Node (4105794 @ 3067561) (20)P962 { P180, P182, P183, P219, P221, P222, P232, P262, P264, P375, P376, P377, P378, P386, P387, P388, P389, P390, P685, P686, P687, P717, P782, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P818, P819, P821, P822, P824, P825, P910, P911, P912, P916, P922, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P963, P964, P965, P966, P967, P968, P969, P970, P971, P976, P979, P980, P981, P982, P984, P985, P986, P988, P995, P1007, P1008, P1009, P1010, P1012, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105798 @ 3067565) (20)P963 { P180, P182, P183, P219, P221, P222, P232, P262, P264, P375, P376, P377, P378, P386, P387, P388, P389, P390, P685, P686, P687, P717, P782, P799, P803, P806, P809, P810, P811, P818, P819, P821, P824, P825, P910, P911, P912, P916, P922, P926, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P964, P965, P966, P967, P968, P969, P970, P971, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P995, P1007, P1008, P1009, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105800 @ 3067564) (20)P964 { P179, P180, P182, P183, P219, P221, P222, P232, P264, P375, P376, P377, P378, P386, P387, P388, P389, P390, P686, P687, P717, P782, P799, P803, P806, P809, P818, P819, P824, P825, P910, P911, P922, P926, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P965, P966, P967, P968, P969, P970, P971, P972, P973, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P990, P995, P1008, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105803 @ 3067564) (20)P965 { P179, P180, P182, P183, P219, P221, P222, P232, P264, P375, P376, P377, P378, P386, P387, P388, P389, P390, P686, P687, P717, P782, P799, P803, P806, P809, P818, P819, P824, P825, P910, P922, P926, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P966, P967, P968, P969, P970, P971, P972, P973, P976, P979, P980, P981, P982, P984, P985, P986, P988, P989, P990, P995, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105804 @ 3067564) (20)P966 { P179, P180, P183, P219, P221, P232, P264, P375, P376, P377, P378, P385, P386, P387, P388, P389, P390, P686, P687, P799, P803, P806, P809, P818, P824, P825, P910, P922, P926, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P967, P968, P969, P970, P971, P972, P973, P976, P979, P980, P981, P982, P983, P984, P985, P986, P987, P988, P989, P990, P995, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105805 @ 3067563) (20)P967 { P179, P180, P219, P221, P232, P264, P377, P378, P385, P386, P387, P388, P389, P390, P686, P687, P799, P803, P806, P824, P910, P922, P926, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P968, P969, P970, P971, P972, P973, P979, P980, P981, P982, P983, P984, P985, P986, P987, P988, P989, P990, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105807 @ 3067563) (20)P968 { P179, P180, P219, P221, P228, P232, P264, P377, P378, P385, P386, P387, P388, P389, P390, P687, P799, P803, P806, P922, P926, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P969, P970, P971, P972, P973, P978, P979, P980, P981, P982, P983, P984, P985, P986, P987, P988, P989, P990, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105810 @ 3067563) (20)P969 { P179, P180, P219, P221, P228, P232, P377, P378, P384, P385, P386, P387, P388, P687, P799, P803, P806, P922, P926, P934, P955, P957, P960, P961, P962, P963, P964, P965, P966, P967, P968, P970, P971, P972, P973, P974, P977, P978, P981, P982, P983, P984, P985, P986, P987, P988, P989, P990, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105813 @ 3067563) (20)P970 { P179, P180, P219, P221, P228, P232, P378, P384, P385, P386, P387, P388, P687, P688, P803, P806, P922, P926, P934, P935, P955, P962, P963, P964, P965, P966, P967, P968, P969, P971, P972, P973, P974, P975, P977, P978, P981, P982, P983, P984, P985, P986, P987, P988, P989, P990, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105814 @ 3067562) (20)P971 { P179, P180, P221, P228, P229, P232, P378, P383, P384, P385, P386, P387, P468, P687, P688, P922, P926, P934, P935, P955, P962, P963, P964, P965, P966, P967, P968, P969, P970, P972, P973, P974, P975, P977, P978, P982, P983, P984, P985, P986, P987, P988, P989, P990, P1037, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105816 @ 3067562) (20)P972 { P179, P180, P228, P229, P232, P378, P383, P384, P385, P386, P468, P687, P688, P689, P922, P926, P935, P955, P964, P965, P966, P967, P968, P969, P970, P971, P973, P974, P975, P977, P978, P983, P985, P986, P987, P988, P989, P990, P1037, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050 } Node (4105820 @ 3067562) (20)P973 { P179, P180, P228, P229, P378, P383, P384, P385, P386, P468, P688, P689, P926, P935, P955, P964, P965, P966, P967, P968, P969, P970, P971, P972, P974, P975, P977, P978, P983, P985, P986, P987, P988, P989, P990, P1037, P1042, P1044, P1045, P1046, P1047, P1048, P1049 } Node (4105821 @ 3067561) (20)P974 { P198, P199, P200, P230, P378, P383, P384, P385, P386, P468, P688, P689, P860, P861, P862, P863, P864, P926, P935, P969, P970, P971, P972, P973, P975, P977, P978, P983, P985, P986, P987, P988, P989, P990 } Node (4105824 @ 3067547) (20)P975 { P198, P199, P200, P230, P378, P383, P384, P385, P386, P468, P688, P689, P861, P862, P863, P864, P926, P935, P970, P971, P972, P973, P974, P977, P978, P983, P985, P986, P987, P988, P989, P990 } Node (4105825 @ 3067547) (20)P976 { P140, P182, P183, P219, P220, P221, P262, P263, P264, P374, P375, P376, P377, P387, P388, P389, P390, P391, P684, P685, P686, P687, P717, P774, P782, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P824, P825, P910, P916, P922, P929, P931, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P979, P980, P981, P995, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1051 } Node (4105786 @ 3067566) (20)P977 { P198, P199, P200, P230, P378, P384, P385, P386, P468, P688, P689, P860, P861, P862, P863, P864, P926, P935, P955, P969, P970, P971, P972, P973, P974, P975, P978, P983, P984, P985, P986, P987, P988, P989, P990 } Node (4105823 @ 3067547) (20)P978 { P198, P199, P200, P230, P360, P378, P384, P385, P386, P468, P688, P689, P849, P850, P851, P858, P859, P860, P861, P862, P863, P864, P926, P935, P955, P968, P969, P970, P971, P972, P973, P974, P975, P977, P983, P984, P985, P986, P987, P988, P989, P990 } Node (4105821 @ 3067547) (20)P979 { P264, P361, P362, P364, P374, P375, P376, P377, P378, P387, P388, P389, P390, P683, P685, P686, P687, P803, P806, P827, P846, P876, P897, P900, P905, P906, P907, P908, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P928, P929, P931, P933, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P980, P981, P982, P984, P985, P986, P988, P989, P990, P995, P1007, P1008 } Node (4105796 @ 3067552) (20)P980 { P264, P361, P362, P364, P374, P375, P376, P377, P378, P387, P388, P389, P390, P683, P686, P687, P803, P806, P827, P846, P876, P897, P900, P904, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P927, P928, P929, P931, P933, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P976, P979, P981, P982, P984, P985, P986, P987, P988, P989, P990, P995 } Node (4105797 @ 3067551) (20)P981 { P264, P361, P362, P364, P374, P375, P376, P377, P378, P387, P388, P389, P390, P683, P686, P687, P803, P806, P827, P846, P876, P897, P900, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P928, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P976, P979, P980, P982, P984, P985, P986, P987, P988, P989, P990, P995 } Node (4105798 @ 3067551) (20)P982 { P264, P360, P361, P362, P364, P375, P376, P377, P378, P387, P388, P389, P390, P683, P686, P687, P803, P806, P846, P876, P897, P900, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P979, P980, P981, P983, P984, P985, P986, P987, P988, P989, P990, P995 } Node (4105800 @ 3067551) (20)P983 { P199, P360, P378, P384, P385, P386, P468, P688, P689, P848, P849, P858, P859, P860, P861, P862, P863, P926, P934, P935, P955, P966, P967, P968, P969, P970, P971, P972, P973, P974, P975, P977, P978, P982, P984, P985, P986, P987, P988, P989, P990 } Node (4105818 @ 3067548) (20)P984 { P360, P361, P362, P375, P376, P377, P378, P386, P387, P388, P389, P390, P683, P687, P846, P876, P897, P900, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P919, P920, P921, P922, P923, P924, P925, P926, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P977, P978, P979, P980, P981, P982, P983, P985, P986, P987, P988, P989, P990 } Node (4105804 @ 3067550) (20)P985 { P360, P361, P362, P375, P376, P377, P378, P386, P387, P388, P389, P390, P683, P687, P846, P858, P859, P876, P897, P900, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P918, P920, P921, P922, P923, P924, P925, P926, P929, P931, P934, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P974, P975, P977, P978, P979, P980, P981, P982, P983, P984, P986, P987, P988, P989, P990 } Node (4105806 @ 3067549) (20)P986 { P360, P361, P362, P375, P376, P377, P378, P386, P387, P388, P389, P390, P683, P687, P846, P858, P859, P897, P900, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P921, P922, P923, P924, P925, P926, P929, P931, P934, P935, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P974, P975, P977, P978, P979, P980, P981, P982, P983, P984, P985, P987, P988, P989, P990 } Node (4105807 @ 3067549) (20)P987 { P199, P360, P378, P384, P385, P386, P468, P688, P689, P848, P849, P858, P859, P860, P861, P862, P863, P909, P926, P934, P935, P955, P966, P967, P968, P969, P970, P971, P972, P973, P974, P975, P977, P978, P980, P981, P982, P983, P984, P985, P986, P988, P989, P990 } Node (4105816 @ 3067548) (20)P988 { P360, P375, P376, P377, P378, P386, P387, P388, P389, P390, P683, P687, P846, P858, P859, P860, P900, P905, P906, P907, P908, P909, P910, P911, P912, P913, P914, P915, P916, P917, P922, P923, P924, P925, P926, P929, P931, P934, P935, P950, P953, P955, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P974, P975, P977, P978, P979, P980, P981, P982, P983, P984, P985, P986, P987, P989, P990 } Node (4105808 @ 3067549) (20)P989 { P360, P377, P378, P385, P386, P388, P390, P683, P687, P688, P858, P859, P860, P861, P907, P908, P909, P910, P911, P912, P913, P922, P926, P934, P935, P955, P956, P957, P958, P959, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P974, P975, P977, P978, P979, P980, P981, P982, P983, P984, P985, P986, P987, P988, P990 } Node (4105811 @ 3067549) (20)P990 { P199, P360, P377, P378, P385, P386, P688, P689, P848, P849, P858, P859, P860, P861, P862, P863, P908, P909, P926, P934, P935, P955, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P974, P975, P977, P978, P979, P980, P981, P982, P983, P984, P985, P986, P987, P988, P989 } Node (4105814 @ 3067548) (20)P991 { P140, P141, P167, P168, P171, P260, P261, P370, P371, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P733, P734, P772, P773, P774, P775, P776, P777, P783, P784, P786, P788, P789, P790, P804, P808, P847, P870, P898, P937, P938, P939, P940, P942, P943, P944, P945, P946, P947, P948, P949, P952, P992, P993, P996, P997, P998, P1001, P1004, P1005, P1006, P1007, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1052 } Node (4105764 @ 3067561) (20)P992 { P140, P141, P167, P168, P171, P220, P260, P261, P370, P371, P373, P374, P391, P392, P394, P467, P471, P684, P685, P733, P734, P761, P762, P772, P773, P774, P775, P776, P777, P783, P784, P786, P788, P789, P790, P804, P808, P847, P870, P898, P937, P938, P939, P940, P943, P944, P945, P946, P947, P948, P949, P952, P991, P993, P996, P997, P998, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105766 @ 3067562) (20)P993 { P140, P141, P167, P168, P260, P261, P370, P371, P373, P374, P391, P392, P393, P394, P467, P471, P684, P733, P734, P772, P773, P774, P775, P776, P777, P783, P784, P786, P788, P789, P790, P804, P808, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P996, P997, P998, P1001, P1004, P1005, P1006, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105764 @ 3067560) (20)P994 { P138, P143, P145, P146, P147, P148, P149, P152, P161, P163, P164, P165, P465, P691, P692, P729, P787, P791, P792, P793, P845, P954, P1018, P1021, P1022, P1024, P1026, P1028, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105717 @ 3067579) (20)P995 { P140, P182, P183, P219, P220, P221, P232, P262, P263, P264, P374, P375, P376, P377, P387, P388, P389, P390, P391, P684, P685, P686, P687, P717, P782, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P821, P824, P825, P910, P911, P916, P922, P929, P931, P950, P953, P956, P957, P958, P959, P960, P961, P962, P963, P964, P965, P966, P976, P979, P980, P981, P982, P998, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041, P1051 } Node (4105787 @ 3067566) (20)P996 { P140, P141, P167, P168, P171, P176, P220, P260, P261, P371, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P733, P734, P736, P756, P761, P762, P763, P764, P772, P773, P774, P775, P776, P777, P778, P783, P784, P786, P788, P789, P790, P808, P817, P847, P937, P938, P939, P940, P945, P946, P947, P948, P949, P952, P991, P992, P993, P997, P998, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1052 } Node (4105766 @ 3067565) (20)P997 { P140, P141, P166, P167, P168, P171, P176, P220, P260, P261, P263, P371, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P722, P731, P733, P734, P736, P756, P757, P758, P761, P762, P763, P764, P765, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P788, P789, P790, P808, P817, P847, P938, P939, P940, P946, P947, P948, P949, P952, P991, P992, P993, P996, P998, P1000, P1001, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017, P1052, P1059 } Node (4105765 @ 3067567) (20)P998 { P140, P167, P168, P171, P176, P220, P260, P261, P262, P263, P264, P373, P374, P389, P391, P392, P393, P394, P467, P471, P684, P685, P686, P733, P756, P757, P761, P762, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P784, P786, P788, P789, P790, P808, P809, P810, P811, P812, P813, P815, P816, P817, P847, P948, P949, P950, P952, P976, P991, P992, P993, P995, P996, P997, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105774 @ 3067567) (20)P999 { P138, P141, P142, P144, P150, P151, P152, P160, P164, P165, P166, P167, P168, P170, P171, P172, P173, P260, P261, P392, P451, P722, P729, P731, P734, P736, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P783, P784, P786, P787, P788, P789, P790, P791, P792, P793, P808, P951, P1000, P1001, P1052, P1059 } Node (4105746 @ 3067574) (20)P1000 { P141, P142, P144, P150, P151, P160, P164, P165, P166, P167, P168, P170, P171, P172, P173, P260, P261, P392, P451, P722, P729, P731, P734, P736, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P783, P784, P786, P787, P788, P789, P790, P791, P792, P793, P808, P847, P951, P997, P999, P1001, P1017, P1052, P1059 } Node (4105748 @ 3067574) (20)P1001 { P140, P141, P142, P144, P150, P151, P160, P165, P166, P167, P168, P170, P171, P172, P173, P260, P261, P392, P393, P394, P451, P467, P722, P729, P731, P734, P736, P756, P757, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P783, P784, P786, P787, P788, P789, P790, P791, P792, P808, P847, P951, P952, P991, P992, P993, P996, P997, P999, P1000, P1004, P1016, P1017, P1052, P1059 } Node (4105751 @ 3067574) (20)P1002 { P145, P148, P162, P169, P204, P205, P357, P473, P474, P475, P691, P692, P932, P954, P1003, P1018, P1019, P1023, P1024, P1025, P1027, P1028, P1029, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105697 @ 3067581) (20)P1003 { P162, P169, P204, P205, P207, P208, P341, P352, P353, P354, P355, P356, P357, P473, P474, P475, P690, P691, P932, P1002, P1019, P1020, P1023, P1024, P1025, P1027, P1029, P1030 } Node (4105682 @ 3067583) (20)P1004 { P140, P141, P167, P168, P171, P220, P260, P261, P370, P371, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P733, P734, P736, P761, P762, P763, P772, P773, P774, P775, P776, P777, P783, P784, P786, P788, P789, P790, P804, P808, P817, P847, P870, P937, P938, P939, P940, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P998, P1001, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105766 @ 3067563) (20)P1005 { P140, P141, P167, P168, P261, P367, P370, P371, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P733, P734, P772, P773, P774, P775, P776, P777, P783, P784, P786, P788, P789, P790, P804, P808, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P998, P1004, P1006, P1007, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105765 @ 3067559) (20)P1006 { P140, P167, P168, P366, P367, P368, P370, P371, P373, P374, P391, P392, P393, P394, P471, P684, P733, P772, P773, P774, P775, P776, P777, P784, P786, P788, P789, P790, P804, P808, P847, P870, P898, P936, P937, P938, P939, P940, P941, P942, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P998, P1004, P1005, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105765 @ 3067558) (20)P1007 { P140, P182, P183, P219, P220, P221, P262, P263, P264, P373, P374, P375, P376, P377, P387, P388, P389, P390, P391, P392, P393, P467, P684, P686, P687, P772, P773, P774, P775, P776, P777, P782, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P824, P825, P847, P922, P929, P931, P950, P952, P953, P956, P957, P958, P959, P960, P961, P962, P963, P976, P979, P991, P992, P995, P996, P997, P998, P1004, P1005, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105783 @ 3067567) (20)P1008 { P140, P182, P183, P219, P220, P221, P262, P263, P264, P374, P375, P376, P377, P387, P388, P389, P390, P391, P393, P467, P684, P685, P686, P687, P717, P772, P773, P774, P775, P776, P777, P782, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P824, P825, P847, P922, P929, P931, P950, P952, P953, P956, P957, P958, P959, P960, P961, P962, P963, P964, P976, P979, P992, P995, P996, P997, P998, P1004, P1007, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1041 } Node (4105784 @ 3067567) (20)P1009 { P140, P182, P183, P219, P220, P262, P263, P264, P373, P374, P375, P376, P377, P387, P388, P389, P390, P391, P392, P393, P467, P684, P685, P686, P687, P772, P773, P774, P775, P776, P777, P782, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P817, P818, P819, P824, P847, P922, P929, P931, P950, P952, P953, P956, P957, P958, P959, P960, P961, P962, P963, P976, P991, P992, P993, P995, P996, P997, P998, P1004, P1005, P1006, P1007, P1008, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105782 @ 3067567) (20)P1010 { P140, P168, P171, P176, P182, P183, P219, P220, P261, P262, P263, P264, P373, P374, P375, P376, P387, P388, P389, P390, P391, P392, P393, P467, P684, P685, P686, P772, P773, P774, P775, P776, P777, P782, P789, P790, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P817, P818, P847, P929, P931, P950, P952, P953, P956, P957, P958, P959, P960, P961, P962, P976, P991, P992, P993, P995, P996, P997, P998, P1004, P1005, P1006, P1007, P1008, P1009, P1011, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105780 @ 3067567) (20)P1011 { P140, P167, P168, P171, P176, P220, P260, P261, P262, P263, P264, P373, P374, P375, P389, P391, P392, P393, P394, P467, P471, P684, P685, P686, P733, P756, P757, P761, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P786, P788, P789, P790, P808, P809, P810, P811, P812, P813, P815, P816, P817, P847, P929, P948, P949, P950, P952, P953, P961, P976, P991, P992, P993, P995, P996, P997, P998, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1012, P1013, P1014, P1015, P1016, P1017 } Node (4105775 @ 3067567) (20)P1012 { P140, P168, P171, P176, P182, P183, P219, P220, P261, P262, P263, P264, P373, P374, P375, P376, P387, P388, P389, P390, P391, P392, P393, P394, P467, P471, P684, P685, P686, P772, P773, P774, P775, P776, P777, P778, P782, P789, P790, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P817, P847, P929, P931, P950, P952, P953, P956, P957, P958, P959, P960, P961, P962, P976, P991, P992, P993, P995, P996, P997, P998, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1013, P1014, P1015, P1016, P1017 } Node (4105779 @ 3067567) (20)P1013 { P140, P168, P171, P176, P183, P219, P220, P261, P262, P263, P264, P373, P374, P375, P388, P389, P391, P392, P393, P394, P467, P471, P684, P685, P686, P772, P773, P774, P775, P776, P777, P778, P782, P788, P789, P790, P799, P803, P806, P809, P810, P811, P812, P813, P815, P816, P817, P847, P929, P931, P950, P952, P953, P956, P957, P958, P959, P960, P961, P976, P991, P992, P993, P995, P996, P997, P998, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1014, P1015, P1016, P1017 } Node (4105778 @ 3067567) (20)P1014 { P140, P167, P168, P171, P176, P220, P260, P261, P262, P263, P264, P373, P374, P375, P389, P391, P392, P393, P394, P467, P471, P684, P685, P686, P733, P756, P761, P772, P773, P774, P775, P776, P777, P778, P779, P782, P788, P789, P790, P803, P808, P809, P810, P811, P812, P813, P815, P816, P817, P847, P929, P931, P949, P950, P952, P953, P957, P960, P961, P976, P991, P992, P993, P995, P996, P997, P998, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1015, P1016, P1017 } Node (4105776 @ 3067567) (20)P1015 { P140, P167, P168, P171, P176, P220, P260, P261, P262, P263, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P686, P721, P733, P736, P756, P757, P758, P759, P761, P762, P763, P772, P773, P774, P775, P776, P777, P778, P779, P780, P782, P784, P786, P788, P789, P790, P808, P810, P811, P812, P813, P815, P816, P817, P847, P948, P949, P952, P976, P991, P992, P993, P995, P996, P997, P998, P1004, P1005, P1006, P1007, P1008, P1009, P1010, P1011, P1012, P1013, P1014, P1016, P1017 } Node (4105773 @ 3067568) (20)P1016 { P140, P141, P167, P168, P171, P220, P260, P261, P370, P371, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P733, P734, P736, P761, P762, P763, P772, P773, P774, P775, P776, P777, P783, P784, P786, P788, P789, P790, P804, P808, P847, P870, P898, P937, P938, P939, P940, P943, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P998, P1001, P1004, P1005, P1006, P1007, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1017, P1052 } Node (4105764 @ 3067562) (20)P1017 { P140, P141, P167, P168, P171, P220, P260, P261, P371, P373, P374, P391, P392, P393, P394, P467, P471, P684, P685, P733, P734, P736, P761, P762, P763, P764, P772, P773, P774, P775, P776, P777, P783, P784, P786, P788, P789, P790, P804, P808, P847, P937, P938, P939, P940, P944, P945, P946, P947, P948, P949, P952, P991, P992, P993, P996, P997, P998, P1000, P1001, P1004, P1005, P1006, P1007, P1009, P1010, P1011, P1012, P1013, P1014, P1015, P1016, P1052 } Node (4105764 @ 3067564) (20)P1018 { P145, P147, P148, P161, P162, P169, P204, P205, P465, P474, P475, P691, P692, P845, P932, P954, P994, P1002, P1021, P1022, P1024, P1026, P1027, P1028, P1029, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105705 @ 3067580) (20)P1019 { P162, P169, P204, P207, P208, P341, P352, P353, P354, P355, P356, P357, P473, P474, P475, P690, P932, P1002, P1003, P1020, P1023, P1025, P1027, P1029 } Node (4105679 @ 3067583) (20)P1020 { P169, P204, P207, P208, P341, P346, P352, P353, P354, P355, P356, P357, P473, P474, P690, P932, P1003, P1019, P1023, P1025, P1027, P1029 } Node (4105676 @ 3067584) (20)P1021 { P138, P143, P145, P146, P147, P148, P149, P152, P161, P163, P164, P165, P465, P691, P692, P729, P787, P791, P792, P793, P845, P954, P994, P1018, P1022, P1024, P1028, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105718 @ 3067578) (20)P1022 { P138, P143, P145, P146, P147, P148, P149, P152, P163, P164, P165, P465, P691, P692, P729, P787, P791, P792, P793, P845, P954, P994, P1018, P1021, P1024, P1026, P1028, P1031, P1032, P1033, P1034, P1035 } Node (4105719 @ 3067578) (20)P1023 { P162, P169, P204, P207, P208, P341, P352, P353, P354, P355, P356, P357, P473, P474, P475, P690, P932, P1002, P1003, P1019, P1020, P1025, P1027, P1029, P1030 } Node (4105680 @ 3067583) (20)P1024 { P145, P147, P148, P161, P162, P169, P204, P205, P357, P474, P475, P691, P692, P932, P954, P994, P1002, P1003, P1018, P1021, P1022, P1025, P1026, P1027, P1028, P1029, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105701 @ 3067580) (20)P1025 { P162, P169, P204, P205, P207, P208, P341, P352, P353, P354, P355, P356, P473, P474, P475, P690, P691, P932, P1002, P1003, P1019, P1020, P1023, P1024, P1027, P1029, P1030 } Node (4105683 @ 3067583) (20)P1026 { P138, P143, P145, P146, P147, P148, P149, P152, P161, P163, P164, P165, P465, P691, P692, P729, P787, P791, P792, P793, P845, P954, P994, P1018, P1022, P1024, P1028, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105718 @ 3067578) (20)P1027 { P148, P162, P169, P204, P205, P353, P354, P355, P357, P473, P474, P475, P690, P691, P692, P932, P1002, P1003, P1018, P1019, P1020, P1023, P1024, P1025, P1029, P1030, P1031, P1032, P1033 } Node (4105690 @ 3067582) (20)P1028 { P138, P145, P146, P147, P148, P149, P152, P161, P163, P164, P465, P691, P692, P791, P792, P793, P845, P954, P994, P1002, P1018, P1021, P1022, P1024, P1026, P1030, P1031, P1032, P1033, P1034, P1035 } Node (4105715 @ 3067579) (20)P1029 { P148, P162, P169, P204, P205, P207, P353, P354, P355, P356, P357, P473, P474, P475, P690, P691, P932, P1002, P1003, P1018, P1019, P1020, P1023, P1024, P1025, P1027, P1030, P1033 } Node (4105687 @ 3067582) (20)P1030 { P145, P148, P161, P162, P169, P204, P205, P357, P473, P474, P475, P691, P692, P932, P954, P994, P1002, P1003, P1018, P1021, P1023, P1024, P1025, P1026, P1027, P1028, P1029, P1031, P1032, P1033, P1034, P1035 } Node (4105699 @ 3067580) (20)P1031 { P138, P145, P146, P147, P148, P152, P161, P162, P169, P465, P475, P691, P692, P845, P932, P954, P994, P1002, P1018, P1021, P1022, P1024, P1026, P1027, P1028, P1030, P1032, P1033, P1034, P1035 } Node (4105709 @ 3067579) (20)P1032 { P145, P146, P147, P148, P161, P162, P169, P465, P474, P475, P691, P692, P845, P932, P954, P994, P1002, P1018, P1021, P1022, P1024, P1026, P1027, P1028, P1030, P1031, P1033, P1034, P1035 } Node (4105707 @ 3067579) (20)P1033 { P145, P147, P148, P161, P162, P169, P204, P205, P474, P475, P691, P692, P845, P932, P954, P994, P1002, P1018, P1021, P1022, P1024, P1026, P1027, P1028, P1029, P1030, P1031, P1032, P1034, P1035 } Node (4105703 @ 3067580) (20)P1034 { P138, P145, P146, P147, P148, P149, P152, P161, P162, P163, P164, P169, P465, P475, P691, P692, P793, P845, P932, P954, P994, P1002, P1018, P1021, P1022, P1024, P1026, P1028, P1030, P1031, P1032, P1033, P1035 } Node (4105711 @ 3067579) (20)P1035 { P138, P145, P146, P147, P148, P149, P152, P161, P163, P164, P169, P465, P691, P692, P791, P792, P793, P845, P954, P994, P1002, P1018, P1021, P1022, P1024, P1026, P1028, P1030, P1031, P1032, P1033, P1034 } Node (4105714 @ 3067579) (20)P1036 { P19, P85, P93, P94, P139, P142, P154, P155, P156, P157, P158, P160, P170, P171, P172, P173, P175, P176, P177, P178, P214, P220, P260, P261, P452, P466, P467, P721, P722, P731, P736, P739, P740, P741, P742, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P773, P777, P778, P779, P780, P798, P866, P867, P868, P872, P873, P874, P875, P877, P1038, P1039, P1040, P1043, P1059 } Node (4105764 @ 3067594) (20)P1037 { P98, P179, P180, P221, P225, P226, P227, P228, P229, P232, P383, P384, P385, P386, P455, P687, P922, P926, P955, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105817 @ 3067574) (20)P1038 { P19, P85, P93, P94, P139, P142, P155, P156, P157, P158, P160, P171, P172, P173, P175, P176, P177, P178, P214, P220, P260, P261, P452, P466, P467, P721, P722, P731, P736, P740, P741, P742, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P773, P777, P778, P779, P780, P797, P798, P866, P867, P868, P872, P873, P874, P875, P877, P1036, P1039, P1040, P1043, P1059 } Node (4105765 @ 3067594) (20)P1039 { P19, P85, P93, P94, P139, P142, P154, P155, P156, P157, P158, P160, P170, P171, P172, P173, P175, P176, P177, P214, P260, P261, P452, P466, P467, P721, P722, P731, P736, P737, P738, P739, P740, P741, P742, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P773, P777, P778, P779, P780, P798, P844, P866, P867, P868, P872, P873, P874, P875, P1036, P1038, P1040, P1043, P1059 } Node (4105762 @ 3067594) (20)P1040 { P19, P85, P93, P94, P139, P142, P154, P155, P156, P157, P158, P159, P160, P170, P171, P172, P173, P175, P176, P177, P214, P260, P261, P452, P466, P467, P721, P722, P731, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P778, P779, P780, P798, P801, P828, P843, P844, P866, P867, P868, P872, P873, P874, P875, P877, P1036, P1038, P1039, P1043, P1059 } Node (4105761 @ 3067595) (20)P1041 { P179, P180, P181, P182, P183, P219, P221, P222, P223, P224, P225, P226, P232, P262, P263, P264, P387, P388, P389, P453, P686, P687, P716, P717, P732, P782, P794, P795, P799, P803, P806, P807, P809, P810, P811, P812, P813, P815, P816, P818, P819, P821, P822, P823, P824, P825, P922, P929, P950, P953, P955, P957, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P976, P995, P1008, P1037, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105801 @ 3067576) (20)P1042 { P179, P180, P181, P182, P183, P219, P221, P222, P224, P225, P226, P227, P228, P232, P264, P385, P386, P387, P388, P455, P687, P717, P732, P799, P803, P806, P807, P809, P818, P819, P821, P822, P823, P824, P825, P922, P926, P955, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P1037, P1041, P1044, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105809 @ 3067574) (20)P1043 { P85, P94, P139, P140, P142, P155, P156, P157, P158, P160, P167, P168, P171, P172, P175, P176, P177, P178, P214, P218, P220, P260, P261, P263, P452, P466, P467, P721, P722, P731, P736, P743, P744, P749, P750, P751, P752, P753, P754, P755, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P772, P773, P774, P775, P776, P777, P778, P779, P780, P785, P788, P789, P790, P796, P797, P798, P812, P813, P815, P816, P817, P1036, P1038, P1039, P1040 } Node (4105769 @ 3067589) (20)P1044 { P98, P179, P180, P219, P221, P222, P225, P226, P227, P228, P229, P232, P384, P385, P386, P387, P455, P687, P717, P799, P806, P807, P824, P825, P922, P926, P955, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P1037, P1041, P1042, P1045, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105815 @ 3067574) (20)P1045 { P179, P180, P182, P219, P221, P222, P224, P225, P226, P227, P228, P229, P232, P385, P386, P387, P455, P687, P717, P732, P799, P803, P806, P807, P818, P819, P821, P822, P824, P825, P922, P926, P955, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P1037, P1041, P1042, P1044, P1046, P1047, P1048, P1049, P1050, P1051 } Node (4105813 @ 3067574) (20)P1046 { P179, P180, P182, P183, P219, P221, P222, P224, P225, P226, P227, P228, P232, P264, P385, P386, P387, P455, P687, P717, P732, P799, P803, P806, P807, P818, P819, P821, P822, P823, P824, P825, P922, P926, P955, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P1037, P1041, P1042, P1044, P1045, P1047, P1048, P1049, P1050, P1051 } Node (4105812 @ 3067574) (20)P1047 { P179, P180, P182, P183, P219, P221, P222, P224, P225, P226, P227, P228, P232, P264, P385, P386, P387, P388, P455, P687, P717, P732, P799, P803, P806, P807, P818, P819, P821, P822, P823, P824, P825, P922, P926, P955, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P1037, P1041, P1042, P1044, P1045, P1046, P1048, P1049, P1050, P1051 } Node (4105811 @ 3067574) (20)P1048 { P179, P180, P181, P182, P183, P219, P221, P222, P224, P225, P226, P227, P228, P232, P264, P386, P387, P388, P453, P686, P687, P717, P732, P782, P799, P803, P806, P807, P809, P810, P818, P819, P821, P822, P823, P824, P825, P922, P926, P950, P955, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1050, P1051 } Node (4105807 @ 3067575) (20)P1049 { P179, P180, P181, P182, P183, P219, P221, P222, P224, P225, P226, P227, P228, P232, P264, P386, P387, P388, P453, P686, P687, P717, P732, P782, P799, P803, P806, P807, P809, P810, P818, P819, P821, P822, P823, P824, P825, P922, P926, P950, P955, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P973, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1050, P1051 } Node (4105807 @ 3067575) (20)P1050 { P179, P180, P181, P182, P183, P219, P221, P222, P223, P224, P225, P226, P232, P264, P386, P387, P388, P453, P686, P687, P717, P732, P782, P795, P799, P803, P806, P807, P809, P810, P811, P818, P819, P821, P822, P823, P824, P825, P922, P926, P950, P953, P955, P957, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P972, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1051 } Node (4105805 @ 3067575) (20)P1051 { P179, P180, P181, P182, P183, P219, P221, P222, P223, P224, P225, P226, P232, P262, P264, P386, P387, P388, P389, P453, P686, P687, P716, P717, P732, P782, P795, P799, P803, P806, P807, P809, P810, P811, P812, P813, P816, P818, P819, P821, P822, P823, P824, P825, P922, P926, P929, P950, P953, P955, P957, P960, P961, P962, P963, P964, P965, P966, P967, P968, P969, P970, P971, P976, P995, P1037, P1041, P1042, P1044, P1045, P1046, P1047, P1048, P1049, P1050 } Node (4105803 @ 3067575) (20)P1052 { P140, P141, P142, P144, P150, P151, P160, P165, P166, P167, P168, P170, P171, P172, P173, P260, P261, P392, P451, P722, P729, P731, P734, P736, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P783, P784, P786, P787, P788, P789, P790, P791, P792, P793, P808, P847, P951, P991, P996, P997, P999, P1000, P1001, P1016, P1017, P1059 } Node (4105749 @ 3067574) (20)P1053 { P122, P126, P249, P252, P253, P256, P1058, P1069 } Node (4105532 @ 3067607) (20)P1054 { P24, P25, P26, P49, P63, P72, P80, P81, P89, P106, P1060 } Node (4105674 @ 3067629) (20)P1055 { P11, P13, P28, P44, P82, P693 } Node (4105699 @ 3067318) (20)P1056 { P3, P4, P5 } Node (4104128 @ 3067860) (20)P1057 { P58, P235, P236, P237, P238, P239, P240, P242, P243, P247, P248, P480, P481, P555, P556 } Node (4105621 @ 3067541) (20)P1058 { P120, P121, P122, P126, P249, P253, P256, P1053, P1069 } Node (4105533 @ 3067597) (20)P1059 { P140, P141, P142, P144, P150, P151, P154, P155, P156, P160, P165, P166, P167, P168, P170, P171, P172, P173, P175, P176, P260, P261, P392, P451, P467, P721, P722, P729, P731, P734, P735, P736, P737, P738, P739, P740, P741, P742, P743, P744, P749, P750, P756, P757, P758, P759, P760, P761, P762, P763, P764, P765, P766, P767, P768, P769, P770, P771, P772, P773, P774, P775, P776, P777, P778, P779, P780, P783, P784, P786, P787, P788, P789, P790, P791, P792, P798, P808, P951, P997, P999, P1000, P1001, P1036, P1038, P1039, P1040, P1052 } Node (4105751 @ 3067580) (20)P1060 { P24, P25, P26, P49, P63, P72, P80, P81, P89, P1054 } Node (4105676 @ 3067629) (20)P1061 { P41, P90, P91, P97, P98, P100, P213, P216, P217, P226, P227, P455 } Node (4105833 @ 3067595) (20)P1062 { P41, P90, P91, P97, P98, P100, P213, P216, P217, P226, P227, P455 } Node (4105833 @ 3067595) (20)P1063 { P281, P282, P283, P284, P285, P286, P287, P288, P299, P300, P303, P305, P311, P458 } Node (4105507 @ 3067571) (20)P1064 { P104, P194, P266, P276, P277, P278, P279, P280, P349, P350, P449, P608 } Node (4105632 @ 3067602) (20)P1065 { P289, P290, P291, P293, P294, P297, P298, P308, P326, P327, P395, P396, P404, P460 } Node (4105465 @ 3067603) (20)P1066 { P196, P197, P198, P200, P201, P231, P358, P454, P853, P854, P855, P856, P857, P864, P865, P1067 } Node (4105839 @ 3067522) (20)P1067 { P196, P197, P198, P200, P201, P231, P358, P454, P853, P854, P855, P856, P857, P864, P865, P1066 } Node (4105839 @ 3067523) (20)P1069 { P118, P1053, P1058 } Node (4105519 @ 3067609) (20)P1070 { P420, P421, P422, P423, P424, P425, P559, P563, P567, P592, P596 } Node (4105539 @ 3067743) (20)P1071 { P526, P527, P535, P540, P1074 } Node (4105335 @ 3067822) (20)P1072 { P605, P618, P626 } Node (4105169 @ 3067908) (20)P1073 { P492, P493, P495, P496, P518, P519, P520, P615 } Node (4105326 @ 3067657) (20)P1074 { P526, P527, P535, P540, P1071 } Node (4105333 @ 3067822) (20)P1076 { P14, P15, P16, P83, P600, P601, P602, P603, P672, P673, P674, P675, P676, P677, P678, P679, P680, P681, P682, P814, P869 } Node (4105755 @ 3067299) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="biNode">biNodemessages none  defined. P1 { P2 } NodeProcedure P2 { P1 } NodeProcedure</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="BibusLigne3">BibusLigne3messages none  defined. P1 { P2, P3 } Node (117 @ 125) (70)P2 { P1, P3, P4 } Node (80 @ 157) (70)P3 { P1, P2, P4, P5 } Node (98 @ 184) (70)P4 { P2, P3, P5 } Node (102 @ 222) (70)P5 { P3, P4, P6 } Node (117 @ 242) (70)P6 { P5, P7 } Node (176 @ 221) (70)P7 { P6, P8 } Node (235 @ 252) (70)P8 { P7, P9, P10, P11 } Node (189 @ 298) (70)P9 { P8, P10 } Node (146 @ 321) (70)P10 { P8, P9, P11 } Node (174 @ 359) (70)P11 { P8, P10, P12 } Node (221 @ 335) (70)P12 { P11 } Node (260 @ 335) (70)P13 { P14 } Node (374 @ 318) (70)P14 { P13 } Node (419 @ 359) (70)P16 { P17 } Node (506 @ 536) (70)P17 { P16 } Node (482 @ 598) (70)P22 { P23 } Node (793 @ 635) (70)P23 { P22 } Node (819 @ 590) (70)P24 { P25 } Node (878 @ 535) (70)P25 { P24 } Node (899 @ 531) (70)P27 { P28 } Node (1078 @ 507) (70)P28 { P27, P31 } Node (1112 @ 522) (70)P29 { P30 } Node (1142 @ 599) (70)P30 { P29, P31 } Node (1176 @ 560) (70)P31 { P28, P30, P32 } Node (1170 @ 513) (70)P32 { P31 } Node (1213 @ 476) (70)P34 { P35 } Node (1421 @ 502) (70)P35 { P34, P36 } Node (1442 @ 533) (70)P36 { P35, P37 } Node (1486 @ 552) (70)P37 { P36, P38 } Node (1529 @ 600) (70)P38 { P37, P39 } Node (1583 @ 595) (70)P39 { P38 } Node (1618 @ 652) (70)P40 { P41 } Node (1527 @ 786) (70)P41 { P40 } Node (1533 @ 803) (70)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="kohonen">kohonenmessages none  defined. P1 { P10 P11 } Node1P2 { P11 P12 } Node1P3 { P12 P13 } Node1P4 { P13 P14 } Node1P5 { P14 P15 } Node1P10 {} Node2P11 {} Node2P12 {} Node2P13 {} Node2P14 {} Node2P15 {} Node2</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="myThoArch17">myThoArch17messages none  defined. Px57y44 { Px57y43, Px57y45, Px56y44 } CellNode (57 @ 44) (20)Px34y28 { Px33y28, Px34y27, Px35y28 } CellNode (34 @ 28) (20)Px31y42 { Px30y42, Px32y42, Px31y41 } CellNode (31 @ 42) (20)Px52y33 { Px52y32, Px52y34, Px53y33, Px51y33 } CellNode (52 @ 33) (20)Px27y23 { Px26y23 } CellNode (27 @ 23) (20)Px57y32 { Px57y31, Px56y32, Px57y33 } CellNode (57 @ 32) (20)Px43y46 { Px44y46, Px42y46, Px43y47, Px43y45 } CellNode (43 @ 46) (20)Px39y57 { Px40y57, Px39y56, Px38y57 } CellNode (39 @ 57) (20)Px50y39 { Px50y40, Px51y39, Px49y39, Px50y38 } CellNode (50 @ 39) (20)Px48y45 { Px48y46, Px47y45, Px49y45, Px48y44 } CellNode (48 @ 45) (20)Px43y34 { Px43y35, Px42y34 } CellNode (43 @ 34) (20)Px55y38 { Px55y39, Px56y38, Px54y38, Px55y37 } CellNode (55 @ 38) (20)Px18y24 { Px17y24 } CellNode (18 @ 24) (20)Px52y52 { Px52y53, Px53y52, Px52y51, Px51y52 } CellNode (52 @ 52) (20)Px52y22 { Px53y22, Px52y21, Px52y23, Px51y22 } CellNode (52 @ 22) (20)Px22y31 { Px22y30, Px21y31, Px22y32, Px23y31 } CellNode (22 @ 31) (20)Px36y3 { Px35y3, Px36y2 } CellNode (36 @ 3) (20)Px57y51 { Px56y51, Px57y50, Px57y52 } CellNode (57 @ 51) (20)Px57y21 { Px56y21, Px57y20, Px57y22 } CellNode (57 @ 21) (20)Px52y10 { Px51y10, Px52y11 } CellNode (52 @ 10) (20)Px50y28 { Px50y27, Px50y29, Px49y28, Px51y28 } CellNode (50 @ 28) (20)Px46y39 { Px45y39, Px46y40 } CellNode (46 @ 39) (20)Px43y53 { Px43y54, Px44y53, Px42y53 } CellNode (43 @ 53) (20)Px49y6 { Px49y5 } CellNode (49 @ 6) (20)Px55y27 { Px56y27, Px55y28, Px54y27, Px55y26 } CellNode (55 @ 27) (20)Px52y41 { Px52y40, Px53y41, Px51y41, Px52y42 } CellNode (52 @ 41) (20)Px48y52 { Px48y51, Px47y52, Px48y53, Px49y52 } CellNode (48 @ 52) (20)Px25y36 { Px25y37, Px26y36, Px24y36, Px25y35 } CellNode (25 @ 36) (20)Px48y22 { Px47y22, Px48y23 } CellNode (48 @ 22) (20)Px55y15 { Px55y16, Px56y15, Px55y14, Px54y15 } CellNode (55 @ 15) (20)Px57y40 { Px57y41, Px57y39, Px56y40 } CellNode (57 @ 40) (20)Px34y54 { Px34y55 } CellNode (34 @ 54) (20)Px55y57 { Px55y56, Px56y57, Px54y57 } CellNode (55 @ 57) (20)Px50y47 { Px50y48, Px51y47, Px49y47, Px50y46 } CellNode (50 @ 47) (20)Px46y28 { Px47y28 } CellNode (46 @ 28) (20)Px43y42 { Px43y43, Px44y42 } CellNode (43 @ 42) (20)Px39y23 { Px38y23 } CellNode (39 @ 23) (20)Px18y43 { Px17y43, Px19y43 } CellNode (18 @ 43) (20)Px55y46 { Px56y46, Px55y47, Px55y45, Px54y46 } CellNode (55 @ 46) (20)Px48y41 { Px48y42, Px47y41, Px48y40, Px49y41 } CellNode (48 @ 41) (20)Px39y11 { Px38y11, Px40y11 } CellNode (39 @ 11) (20)Px55y34 { Px56y34, Px55y33, Px54y34, Px55y35 } CellNode (55 @ 34) (20)Px37y29 { Px36y29, Px38y29 } CellNode (37 @ 29) (20)Px34y43 { Px33y43, Px35y43, Px34y42 } CellNode (34 @ 43) (20)Px46y47 { Px46y46, Px45y47, Px47y47, Px46y48 } CellNode (46 @ 47) (20)Px20y45 { Px21y45 } CellNode (20 @ 45) (20)Px50y24 { Px51y24, Px49y24, Px50y25, Px50y23 } CellNode (50 @ 24) (20)Px49y2 { Px49y3 } CellNode (49 @ 2) (20)Px39y30 { Px39y29, Px39y31 } CellNode (39 @ 30) (20)Px55y23 { Px56y23, Px54y23, Px55y24, Px55y22 } CellNode (55 @ 23) (20)Px42y5 { Px42y6, Px43y5, Px42y4 } CellNode (42 @ 5) (20)Px11y34 { Px11y35, Px10y34 } CellNode (11 @ 34) (20)Px50y43 { Px50y44, Px49y43, Px51y43, Px50y42 } CellNode (50 @ 43) (20)Px55y54 { Px55y55, Px56y54, Px54y54, Px55y53 } CellNode (55 @ 54) (20)Px53y29 { Px54y29, Px53y28, Px52y29, Px53y30 } CellNode (53 @ 29) (20)Px27y3 { Px28y3 } CellNode (27 @ 3) (20)Px53y17 { Px54y17, Px52y17, Px53y16, Px53y18 } CellNode (53 @ 17) (20)Px41y56 { Px41y57, Px40y56, Px42y56, Px41y55 } CellNode (41 @ 56) (20)Px55y42 { Px56y42, Px55y43, Px55y41, Px54y42 } CellNode (55 @ 42) (20)Px32y26 { Px32y27, Px31y26 } CellNode (32 @ 26) (20)Px46y55 { Px45y55, Px46y56, Px46y54, Px47y55 } CellNode (46 @ 55) (20)Px41y44 { Px42y44, Px41y45 } CellNode (41 @ 44) (20)Px55y30 { Px56y30, Px54y30, Px55y29, Px55y31 } CellNode (55 @ 30) (20)Px53y48 { Px54y48, Px53y47, Px52y48, Px53y49 } CellNode (53 @ 48) (20)Px49y29 { Px49y28, Px50y29 } CellNode (49 @ 29) (20)Px46y43 { Px45y43, Px46y42, Px46y44, Px47y43 } CellNode (46 @ 43) (20)Px32y57 { Px33y57, Px32y56 } CellNode (32 @ 57) (20)Px28y38 { Px28y39, Px27y38 } CellNode (28 @ 38) (20)Px50y50 { Px51y50, Px49y50, Px50y49, Px50y51 } CellNode (50 @ 50) (20)Px37y56 { Px37y57, Px38y56, Px36y56, Px37y55 } CellNode (37 @ 56) (20)Px44y6 { Px43y6, Px44y5, Px45y6 } CellNode (44 @ 6) (20)Px44y49 { Px43y49, Px44y50, Px45y49, Px44y48 } CellNode (44 @ 49) (20)Px37y44 { Px37y43, Px36y44 } CellNode (37 @ 44) (20)Px53y37 { Px54y37, Px53y38, Px52y37, Px53y36 } CellNode (53 @ 37) (20)Px49y48 { Px49y49, Px50y48, Px49y47, Px48y48 } CellNode (49 @ 48) (20)Px23y46 { Px23y47, Px22y46 } CellNode (23 @ 46) (20)Px16y41 { Px16y42 } CellNode (16 @ 41) (20)Px55y50 { Px55y51, Px54y50, Px56y50, Px55y49 } CellNode (55 @ 50) (20)Px53y25 { Px53y26, Px53y24, Px52y25, Px54y25 } CellNode (53 @ 25) (20)Px44y38 { Px45y38, Px44y37, Px44y39 } CellNode (44 @ 38) (20)Px53y13 { Px52y13, Px53y12, Px53y14, Px54y13 } CellNode (53 @ 13) (20)Px53y56 { Px53y57, Px54y56, Px52y56, Px53y55 } CellNode (53 @ 56) (20)Px49y37 { Px48y37, Px49y38, Px50y37 } CellNode (49 @ 37) (20)Px46y51 { Px45y51, Px46y50, Px46y52, Px47y51 } CellNode (46 @ 51) (20)Px53y44 { Px54y44, Px52y44, Px53y43, Px53y45 } CellNode (53 @ 44) (20)Px49y25 { Px50y25, Px49y24, Px49y26 } CellNode (49 @ 25) (20)Px44y57 { Px43y57, Px45y57, Px44y56 } CellNode (44 @ 57) (20)Px44y45 { Px44y46, Px45y45, Px44y44, Px43y45 } CellNode (44 @ 45) (20)Px21y29 { Px20y29, Px21y30 } CellNode (21 @ 29) (20)Px50y7 { Px50y8 } CellNode (50 @ 7) (20)Px56y49 { Px56y50, Px57y49, Px56y48, Px55y49 } CellNode (56 @ 49) (20)Px14y24 { Px14y23, Px15y24, Px13y24 } CellNode (14 @ 24) (20)Px56y19 { Px56y18, Px56y20, Px57y19, Px55y19 } CellNode (56 @ 19) (20)Px53y33 { Px54y33, Px52y33, Px53y34, Px53y32 } CellNode (53 @ 33) (20)Px28y53 { Px28y52, Px29y53 } CellNode (28 @ 53) (20)Px49y44 { Px49y45, Px50y44, Px49y43, Px48y44 } CellNode (49 @ 44) (20)Px26y28 { Px26y29 } CellNode (26 @ 28) (20)Px53y21 { Px53y20, Px52y21, Px53y22, Px54y21 } CellNode (53 @ 21) (20)Px51y39 { Px50y39, Px51y38, Px51y40, Px52y39 } CellNode (51 @ 39) (20)Px48y8 { Px48y9, Px48y7 } CellNode (48 @ 8) (20)Px56y38 { Px56y37, Px57y38, Px55y38, Px56y39 } CellNode (56 @ 38) (20)Px53y52 { Px52y52, Px53y53, Px53y51, Px54y52 } CellNode (53 @ 52) (20)Px51y27 { Px51y26, Px50y27, Px51y28, Px52y27 } CellNode (51 @ 27) (20)Px49y33 { Px49y32, Px50y33 } CellNode (49 @ 33) (20)Px23y31 { Px23y32, Px22y31 } CellNode (23 @ 31) (20)Px56y26 { Px56y27, Px57y26, Px55y26, Px56y25 } CellNode (56 @ 26) (20)Px53y40 { Px52y40, Px53y39, Px53y41, Px54y40 } CellNode (53 @ 40) (20)Px28y30 { Px28y29 } CellNode (28 @ 30) (20)Px44y53 { Px45y53, Px43y53, Px44y54, Px44y52 } CellNode (44 @ 53) (20)Px51y46 { Px51y45, Px51y47, Px52y46, Px50y46 } CellNode (51 @ 46) (20)Px47y27 { Px48y27, Px47y28 } CellNode (47 @ 27) (20)Px30y55 { Px30y54, Px31y55 } CellNode (30 @ 55) (20)Px49y52 { Px50y52, Px48y52, Px49y51 } CellNode (49 @ 52) (20)Px26y36 { Px27y36, Px26y35, Px26y37, Px25y36 } CellNode (26 @ 36) (20)Px56y45 { Px56y46, Px57y45, Px56y44, Px55y45 } CellNode (56 @ 45) (20)Px56y15 { Px56y14, Px57y15, Px56y16, Px55y15 } CellNode (56 @ 15) (20)Px49y10 { Px49y9, Px50y10 } CellNode (49 @ 10) (20)Px49y40 { Px50y40, Px48y40, Px49y39, Px49y41 } CellNode (49 @ 40) (20)Px44y41 { Px44y40, Px44y42, Px45y41 } CellNode (44 @ 41) (20)Px42y47 { Px42y48, Px43y47, Px41y47, Px42y46 } CellNode (42 @ 47) (20)Px8y24 { Px7y24, Px9y24 } CellNode (8 @ 24) (20)Px35y42 { Px35y43, Px34y42 } CellNode (35 @ 42) (20)Px50y3 { Px49y3 } CellNode (50 @ 3) (20)Px51y35 { Px52y35, Px51y34, Px51y36 } CellNode (51 @ 35) (20)Px47y46 { Px48y46, Px46y46, Px47y45, Px47y47 } CellNode (47 @ 46) (20)Px56y57 { Px55y57, Px57y57, Px56y56 } CellNode (56 @ 57) (20)Px56y34 { Px57y34, Px55y34, Px56y35, Px56y33 } CellNode (56 @ 34) (20)Px51y23 { Px51y22, Px51y24, Px52y23, Px50y23 } CellNode (51 @ 23) (20)Px56y22 { Px56y23, Px57y22, Px55y22, Px56y21 } CellNode (56 @ 22) (20)Px51y54 { Px51y53, Px52y54, Px51y55 } CellNode (51 @ 54) (20)Px42y24 { Px43y24, Px41y24 } CellNode (42 @ 24) (20)Px54y28 { Px54y29, Px55y28, Px53y28, Px54y27 } CellNode (54 @ 28) (20)Px51y42 { Px51y43, Px52y42, Px51y41, Px50y42 } CellNode (51 @ 42) (20)Px47y23 { Px47y22, Px46y23, Px48y23 } CellNode (47 @ 23) (20)Px8y32 { Px8y33, Px7y32 } CellNode (8 @ 32) (20)Px3y21 { Px4y21, Px2y21 } CellNode (3 @ 21) (20)Px56y53 { Px56y54, Px57y53, Px55y53, Px56y52 } CellNode (56 @ 53) (20)Px56y41 { Px56y42, Px57y41, Px55y41, Px56y40 } CellNode (56 @ 41) (20)Px42y55 { Px43y55, Px42y56, Px42y54, Px41y55 } CellNode (42 @ 55) (20)Px47y54 { Px48y54, Px46y54, Px47y53, Px47y55 } CellNode (47 @ 54) (20)Px42y43 { Px43y43, Px42y44 } CellNode (42 @ 43) (20)Px54y17 { Px54y18, Px53y17, Px55y17, Px54y16 } CellNode (54 @ 17) (20)Px51y31 { Px52y31, Px51y30 } CellNode (51 @ 31) (20)Px47y42 { Px46y42, Px47y41, Px47y43, Px48y42 } CellNode (47 @ 42) (20)Px33y56 { Px32y56, Px33y55, Px33y57, Px34y56 } CellNode (33 @ 56) (20)Px26y51 { Px27y51, Px26y50 } CellNode (26 @ 51) (20)Px43y8 { Px43y9 } CellNode (43 @ 8) (20)Px56y30 { Px57y30, Px55y30, Px56y31, Px56y29 } CellNode (56 @ 30) (20)Px29y25 { Px29y24, Px30y25 } CellNode (29 @ 25) (20)Px54y48 { Px55y48, Px53y48, Px54y49, Px54y47 } CellNode (54 @ 48) (20)Px54y36 { Px54y37, Px55y36, Px53y36, Px54y35 } CellNode (54 @ 36) (20)Px51y50 { Px51y49, Px51y51, Px50y50, Px52y50 } CellNode (51 @ 50) (20)Px54y24 { Px55y24, Px53y24, Px54y23, Px54y25 } CellNode (54 @ 24) (20)Px45y49 { Px46y49, Px44y49, Px45y48, Px45y50 } CellNode (45 @ 49) (20)Px17y40 { Px18y40, Px17y39 } CellNode (17 @ 40) (20)Px45y37 { Px45y38, Px44y37 } CellNode (45 @ 37) (20)Px54y55 { Px54y56, Px55y55, Px53y55, Px54y54 } CellNode (54 @ 55) (20)Px47y50 { Px46y50, Px47y49, Px48y50, Px47y51 } CellNode (47 @ 50) (20)Px24y34 { Px24y33, Px24y35, Px25y34 } CellNode (24 @ 34) (20)Px40y57 { Px40y56, Px41y57, Px39y57 } CellNode (40 @ 57) (20)Px54y13 { Px55y13, Px54y14, Px53y13, Px54y12 } CellNode (54 @ 13) (20)Px10y36 { Px11y36, Px10y35 } CellNode (10 @ 36) (20)Px45y26 { Px46y26 } CellNode (45 @ 26) (20)Px45y56 { Px45y55, Px44y56, Px45y57, Px46y56 } CellNode (45 @ 56) (20)Px29y21 { Px29y20 } CellNode (29 @ 21) (20)Px54y44 { Px54y45, Px53y44, Px55y44, Px54y43 } CellNode (54 @ 44) (20)Px6y23 { Px7y23 } CellNode (6 @ 23) (20)Px10y24 { Px9y24, Px10y25, Px11y24 } CellNode (10 @ 24) (20)Px27y39 { Px28y39, Px27y38 } CellNode (27 @ 39) (20)Px57y18 { Px57y17, Px57y19, Px56y18 } CellNode (57 @ 18) (20)Px40y46 { Px41y46, Px40y45, Px40y47 } CellNode (40 @ 46) (20)Px36y57 { Px36y56, Px37y57, Px35y57 } CellNode (36 @ 57) (20)Px54y32 { Px54y33, Px55y32, Px54y31, Px53y32 } CellNode (54 @ 32) (20)Px29y52 { Px30y52, Px28y52, Px29y51, Px29y53 } CellNode (29 @ 52) (20)Px52y19 { Px52y20, Px53y19, Px52y18 } CellNode (52 @ 19) (20)Px45y45 { Px46y45, Px44y45, Px45y44, Px45y46 } CellNode (45 @ 45) (20)Px54y20 { Px55y20, Px53y20, Px54y19, Px54y21 } CellNode (54 @ 20) (20)Px57y49 { Px57y48, Px57y50, Px56y49 } CellNode (57 @ 49) (20)Px52y38 { Px53y38, Px51y38, Px52y37, Px52y39 } CellNode (52 @ 38) (20)Px15y24 { Px14y24, Px16y24, Px15y23 } CellNode (15 @ 24) (20)Px57y37 { Px57y36, Px56y37, Px57y38 } CellNode (57 @ 37) (20)Px54y51 { Px55y51, Px54y50, Px53y51, Px54y52 } CellNode (54 @ 51) (20)Px45y5 { Px46y5, Px44y5, Px45y6 } CellNode (45 @ 5) (20)Px29y41 { Px29y40, Px30y41 } CellNode (29 @ 41) (20)Px52y57 { Px52y56, Px53y57, Px51y57 } CellNode (52 @ 57) (20)Px15y43 { Px16y43 } CellNode (15 @ 43) (20)Px45y22 { Px46y22, Px45y21 } CellNode (45 @ 22) (20)Px40y11 { Px39y11 } CellNode (40 @ 11) (20)Px52y27 { Px53y27, Px51y27, Px52y28, Px52y26 } CellNode (52 @ 27) (20)Px57y56 { Px57y55, Px57y57, Px56y56 } CellNode (57 @ 56) (20)Px57y26 { Px56y26, Px57y27, Px57y25 } CellNode (57 @ 26) (20)Px31y54 { Px31y55, Px32y54, Px30y54, Px31y53 } CellNode (31 @ 54) (20)Px54y40 { Px55y40, Px53y40, Px54y41, Px54y39 } CellNode (54 @ 40) (20)Px48y38 { Px48y39, Px49y38, Px48y37 } CellNode (48 @ 38) (20)Px57y14 { Px57y13, Px56y14, Px57y15 } CellNode (57 @ 14) (20)Px36y8 { Px36y7 } CellNode (36 @ 8) (20)Px36y23 { Px37y23 } CellNode (36 @ 23) (20)Px52y15 { Px53y15, Px52y16, Px52y14 } CellNode (52 @ 15) (20)Px52y46 { Px52y47, Px51y46, Px53y46, Px52y45 } CellNode (52 @ 46) (20)Px45y52 { Px45y51, Px45y53, Px46y52, Px44y52 } CellNode (45 @ 52) (20)Px48y27 { Px48y28, Px47y27, Px49y27, Px48y26 } CellNode (48 @ 27) (20)Px22y36 { Px21y36 } CellNode (22 @ 36) (20)Px9y35 { Px9y34, Px10y35 } CellNode (9 @ 35) (20)Px57y45 { Px57y44, Px57y46, Px56y45 } CellNode (57 @ 45) (20)Px9y24 { Px9y25, Px10y24, Px8y24 } CellNode (9 @ 24) (20)Px52y34 { Px53y34, Px52y33, Px51y34, Px52y35 } CellNode (52 @ 34) (20)Px45y41 { Px45y42, Px45y40, Px46y41, Px44y41 } CellNode (45 @ 41) (20)Px57y33 { Px57y34, Px56y33, Px57y32 } CellNode (57 @ 33) (20)Px43y47 { Px43y46, Px43y48, Px42y47, Px44y47 } CellNode (43 @ 47) (20)Px48y46 { Px49y46, Px47y46, Px48y47, Px48y45 } CellNode (48 @ 46) (20)Px43y35 { Px44y35, Px43y34 } CellNode (43 @ 35) (20)Px55y39 { Px55y40, Px56y39, Px54y39, Px55y38 } CellNode (55 @ 39) (20)Px52y53 { Px52y52, Px51y53, Px52y54, Px53y53 } CellNode (52 @ 53) (20)Px52y23 { Px52y24, Px51y23, Px53y23, Px52y22 } CellNode (52 @ 23) (20)Px22y32 { Px23y32, Px22y31 } CellNode (22 @ 32) (20)Px57y52 { Px56y52, Px57y51, Px57y53 } CellNode (57 @ 52) (20)Px57y22 { Px56y22, Px57y23, Px57y21 } CellNode (57 @ 22) (20)Px52y11 { Px53y11, Px52y10, Px51y11, Px52y12 } CellNode (52 @ 11) (20)Px50y29 { Px50y28, Px51y29, Px49y29 } CellNode (50 @ 29) (20)Px43y54 { Px43y55, Px44y54, Px42y54, Px43y53 } CellNode (43 @ 54) (20)Px25y49 { Px25y50, Px24y49, Px26y49 } CellNode (25 @ 49) (20)Px43y24 { Px42y24 } CellNode (43 @ 24) (20)Px55y28 { Px55y27, Px56y28, Px55y29, Px54y28 } CellNode (55 @ 28) (20)Px52y42 { Px51y42, Px52y43, Px52y41, Px53y42 } CellNode (52 @ 42) (20)Px4y21 { Px3y21 } CellNode (4 @ 21) (20)Px48y53 { Px48y54, Px48y52, Px47y53 } CellNode (48 @ 53) (20)Px25y37 { Px25y36, Px26y37 } CellNode (25 @ 37) (20)Px55y16 { Px55y17, Px56y16, Px54y16, Px55y15 } CellNode (55 @ 16) (20)Px57y41 { Px57y42, Px57y40, Px56y41 } CellNode (57 @ 41) (20)Px52y30 { Px51y30, Px52y29, Px52y31, Px53y30 } CellNode (52 @ 30) (20)Px48y23 { Px47y23, Px49y23, Px48y22 } CellNode (48 @ 23) (20)Px50y48 { Px51y48, Px50y47, Px50y49, Px49y48 } CellNode (50 @ 48) (20)Px27y50 { Px26y50, Px28y50, Px27y51 } CellNode (27 @ 50) (20)Px43y43 { Px43y44, Px44y43, Px42y43, Px43y42 } CellNode (43 @ 43) (20)Px20y27 { Px20y28 } CellNode (20 @ 27) (20)Px34y55 { Px35y55, Px34y54, Px33y55, Px34y56 } CellNode (34 @ 55) (20)Px50y36 { Px51y36, Px50y37 } CellNode (50 @ 36) (20)Px55y47 { Px55y46, Px56y47, Px55y48, Px54y47 } CellNode (55 @ 47) (20)Px48y42 { Px49y42, Px47y42, Px48y43, Px48y41 } CellNode (48 @ 42) (20)Px55y35 { Px55y36, Px56y35, Px55y34, Px54y35 } CellNode (55 @ 35) (20)Px46y48 { Px47y48, Px46y49, Px46y47, Px45y48 } CellNode (46 @ 48) (20)Px50y25 { Px49y25, Px50y24, Px50y26, Px51y25 } CellNode (50 @ 25) (20)Px50y55 { Px51y55, Px50y56 } CellNode (50 @ 55) (20)Px43y50 { Px43y49, Px44y50 } CellNode (43 @ 50) (20)Px39y31 { Px39y30, Px40y31 } CellNode (39 @ 31) (20)Px49y3 { Px50y3, Px49y2 } CellNode (49 @ 3) (20)Px55y24 { Px56y24, Px54y24, Px55y25, Px55y23 } CellNode (55 @ 24) (20)Px18y40 { Px17y40 } CellNode (18 @ 40) (20)Px42y6 { Px43y6, Px42y5 } CellNode (42 @ 6) (20)Px41y26 { Px42y26 } CellNode (41 @ 26) (20)Px11y35 { Px11y36, Px12y35, Px10y35, Px11y34 } CellNode (11 @ 35) (20)Px50y44 { Px50y43, Px50y45, Px51y44, Px49y44 } CellNode (50 @ 44) (20)Px53y18 { Px53y19, Px54y18, Px52y18, Px53y17 } CellNode (53 @ 18) (20)Px41y57 { Px40y57, Px42y57, Px41y56 } CellNode (41 @ 57) (20)Px55y43 { Px56y43, Px55y44, Px54y43, Px55y42 } CellNode (55 @ 43) (20)Px32y27 { Px33y27, Px32y26 } CellNode (32 @ 27) (20)Px46y56 { Px47y56, Px45y56, Px46y57, Px46y55 } CellNode (46 @ 56) (20)Px41y45 { Px41y46, Px42y45, Px40y45, Px41y44 } CellNode (41 @ 45) (20)Px55y31 { Px55y32, Px56y31, Px55y30, Px54y31 } CellNode (55 @ 31) (20)Px53y49 { Px53y50, Px54y49, Px53y48, Px52y49 } CellNode (53 @ 49) (20)Px11y24 { Px11y25, Px10y24, Px12y24 } CellNode (11 @ 24) (20)Px46y44 { Px47y44, Px46y43, Px45y44, Px46y45 } CellNode (46 @ 44) (20)Px41y33 { Px42y33 } CellNode (41 @ 33) (20)Px28y39 { Px28y40, Px29y39, Px27y39, Px28y38 } CellNode (28 @ 39) (20)Px16y23 { Px16y24, Px15y23 } CellNode (16 @ 23) (20)Px50y51 { Px50y52, Px51y51, Px49y51, Px50y50 } CellNode (50 @ 51) (20)Px37y57 { Px36y57, Px37y56, Px38y57 } CellNode (37 @ 57) (20)Px20y30 { Px20y29, Px21y30 } CellNode (20 @ 30) (20)Px55y20 { Px56y20, Px55y21, Px54y20, Px55y19 } CellNode (55 @ 20) (20)Px53y38 { Px54y38, Px52y38, Px53y39, Px53y37 } CellNode (53 @ 38) (20)Px49y49 { Px49y48, Px49y50, Px50y49, Px48y49 } CellNode (49 @ 49) (20)Px41y22 { Px42y22 } CellNode (41 @ 22) (20)Px23y47 { Px23y46, Px23y48 } CellNode (23 @ 47) (20)Px16y42 { Px16y43, Px16y41, Px17y42 } CellNode (16 @ 42) (20)Px55y51 { Px55y52, Px54y51, Px56y51, Px55y50 } CellNode (55 @ 51) (20)Px53y26 { Px53y27, Px54y26, Px52y26, Px53y25 } CellNode (53 @ 26) (20)Px50y40 { Px50y39, Px51y40, Px49y40, Px50y41 } CellNode (50 @ 40) (20)Px44y39 { Px45y39, Px44y38, Px44y40 } CellNode (44 @ 39) (20)Px53y14 { Px54y14, Px53y13, Px52y14, Px53y15 } CellNode (53 @ 14) (20)Px53y57 { Px52y57, Px53y56, Px54y57 } CellNode (53 @ 57) (20)Px49y38 { Px49y39, Px49y37, Px50y38, Px48y38 } CellNode (49 @ 38) (20)Px46y52 { Px46y53, Px45y52, Px47y52, Px46y51 } CellNode (46 @ 52) (20)Px53y45 { Px53y46, Px54y45, Px52y45, Px53y44 } CellNode (53 @ 45) (20)Px49y26 { Px48y26, Px49y27, Px50y26, Px49y25 } CellNode (49 @ 26) (20)Px46y40 { Px45y40, Px46y39, Px47y40, Px46y41 } CellNode (46 @ 40) (20)Px32y54 { Px32y55, Px31y54 } CellNode (32 @ 54) (20)Px35y28 { Px34y28, Px36y28 } CellNode (35 @ 28) (20)Px32y42 { Px33y42, Px32y43, Px31y42 } CellNode (32 @ 42) (20)Px49y57 { Px50y57 } CellNode (49 @ 57) (20)Px50y8 { Px50y7, Px50y9 } CellNode (50 @ 8) (20)Px44y46 { Px44y45, Px43y46, Px44y47, Px45y46 } CellNode (44 @ 46) (20)Px53y34 { Px54y34, Px52y34, Px53y35, Px53y33 } CellNode (53 @ 34) (20)Px49y45 { Px49y46, Px50y45, Px48y45, Px49y44 } CellNode (49 @ 45) (20)Px26y29 { Px26y28, Px27y29 } CellNode (26 @ 29) (20)Px53y22 { Px54y22, Px53y23, Px53y21, Px52y22 } CellNode (53 @ 22) (20)Px48y9 { Px49y9, Px48y8 } CellNode (48 @ 9) (20)Px44y35 { Px43y35, Px44y36 } CellNode (44 @ 35) (20)Px56y39 { Px55y39, Px56y38, Px56y40, Px57y39 } CellNode (56 @ 39) (20)Px53y53 { Px54y53, Px52y53, Px53y54, Px53y52 } CellNode (53 @ 53) (20)Px51y28 { Px52y28, Px51y27, Px50y28, Px51y29 } CellNode (51 @ 28) (20)Px23y32 { Px23y33, Px22y32, Px24y32, Px23y31 } CellNode (23 @ 32) (20)Px19y43 { Px18y43 } CellNode (19 @ 43) (20)Px56y27 { Px55y27, Px56y26, Px56y28, Px57y27 } CellNode (56 @ 27) (20)Px53y41 { Px54y41, Px52y41, Px53y40, Px53y42 } CellNode (53 @ 41) (20)Px30y25 { Px30y26, Px29y25 } CellNode (30 @ 25) (20)Px53y11 { Px52y11, Px53y12 } CellNode (53 @ 11) (20)Px44y54 { Px44y55, Px44y53, Px45y54, Px43y54 } CellNode (44 @ 54) (20)Px51y47 { Px52y47, Px50y47, Px51y46, Px51y48 } CellNode (51 @ 47) (20)Px47y28 { Px46y28, Px48y28, Px47y27 } CellNode (47 @ 28) (20)Px44y42 { Px43y42, Px44y43, Px45y42, Px44y41 } CellNode (44 @ 42) (20)Px26y37 { Px26y38, Px25y37, Px27y37, Px26y36 } CellNode (26 @ 37) (20)Px56y46 { Px55y46, Px56y47, Px57y46, Px56y45 } CellNode (56 @ 46) (20)Px56y16 { Px55y16, Px57y16, Px56y15, Px56y17 } CellNode (56 @ 16) (20)Px53y30 { Px54y30, Px52y30, Px53y31, Px53y29 } CellNode (53 @ 30) (20)Px49y41 { Px49y42, Px50y41, Px49y40, Px48y41 } CellNode (49 @ 41) (20)Px28y50 { Px27y50, Px28y51 } CellNode (28 @ 50) (20)Px42y48 { Px42y47, Px43y48 } CellNode (42 @ 48) (20)Px35y55 { Px34y55, Px35y56, Px36y55 } CellNode (35 @ 55) (20)Px35y43 { Px35y44, Px36y43, Px35y42, Px34y43 } CellNode (35 @ 43) (20)Px38y29 { Px39y29, Px37y29 } CellNode (38 @ 29) (20)Px51y36 { Px51y37, Px50y36, Px52y36, Px51y35 } CellNode (51 @ 36) (20)Px47y47 { Px47y48, Px48y47, Px46y47, Px47y46 } CellNode (47 @ 47) (20)Px21y45 { Px20y45, Px22y45, Px21y46 } CellNode (21 @ 45) (20)Px56y35 { Px56y36, Px56y34, Px57y35, Px55y35 } CellNode (56 @ 35) (20)Px51y24 { Px52y24, Px51y23, Px50y24, Px51y25 } CellNode (51 @ 24) (20)Px56y23 { Px56y22, Px56y24, Px57y23, Px55y23 } CellNode (56 @ 23) (20)Px51y55 { Px52y55, Px50y55, Px51y54, Px51y56 } CellNode (51 @ 55) (20)Px44y50 { Px44y49, Px45y50, Px44y51, Px43y50 } CellNode (44 @ 50) (20)Px54y29 { Px54y30, Px55y29, Px54y28, Px53y29 } CellNode (54 @ 29) (20)Px51y43 { Px51y42, Px50y43, Px51y44, Px52y43 } CellNode (51 @ 43) (20)Px51y13 { Px52y13 } CellNode (51 @ 13) (20)Px30y52 { Px29y52, Px30y53 } CellNode (30 @ 52) (20)Px8y33 { Px9y33, Px8y34, Px8y32 } CellNode (8 @ 33) (20)Px56y54 { Px56y53, Px55y54, Px56y55, Px57y54 } CellNode (56 @ 54) (20)Px56y42 { Px56y43, Px57y42, Px56y41, Px55y42 } CellNode (56 @ 42) (20)Px42y56 { Px41y56, Px42y57, Px43y56, Px42y55 } CellNode (42 @ 56) (20)Px30y40 { Px29y40, Px30y41, Px31y40 } CellNode (30 @ 40) (20)Px56y12 { Px56y13 } CellNode (56 @ 12) (20)Px12y35 { Px11y35, Px12y36 } CellNode (12 @ 35) (20)Px47y55 { Px46y55, Px47y56, Px47y54 } CellNode (47 @ 55) (20)Px42y44 { Px42y45, Px43y44, Px42y43, Px41y44 } CellNode (42 @ 44) (20)Px38y25 { Px39y25 } CellNode (38 @ 25) (20)Px54y18 { Px54y17, Px54y19, Px53y18, Px55y18 } CellNode (54 @ 18) (20)Px47y43 { Px48y43, Px46y43, Px47y42, Px47y44 } CellNode (47 @ 43) (20)Px33y57 { Px33y56, Px32y57, Px34y57 } CellNode (33 @ 57) (20)Px43y9 { Px44y9, Px43y8 } CellNode (43 @ 9) (20)Px56y31 { Px56y30, Px57y31, Px55y31, Px56y32 } CellNode (56 @ 31) (20)Px38y56 { Px38y57, Px39y56, Px37y56 } CellNode (38 @ 56) (20)Px54y49 { Px54y48, Px54y50, Px55y49, Px53y49 } CellNode (54 @ 49) (20)Px42y33 { Px41y33, Px42y34 } CellNode (42 @ 33) (20)Px54y37 { Px54y36, Px54y38, Px55y37, Px53y37 } CellNode (54 @ 37) (20)Px51y51 { Px51y52, Px51y50, Px52y51, Px50y51 } CellNode (51 @ 51) (20)Px42y21 { Px42y22, Px43y21 } CellNode (42 @ 21) (20)Px21y30 { Px22y30, Px21y31, Px20y30, Px21y29 } CellNode (21 @ 30) (20)Px54y25 { Px54y26, Px55y25, Px54y24, Px53y25 } CellNode (54 @ 25) (20)Px56y50 { Px56y49, Px57y50, Px56y51, Px55y50 } CellNode (56 @ 50) (20)Px45y38 { Px45y39, Px44y38, Px45y37 } CellNode (45 @ 38) (20)Px54y56 { Px55y56, Px54y57, Px53y56, Px54y55 } CellNode (54 @ 56) (20)Px47y51 { Px48y51, Px47y52, Px46y51, Px47y50 } CellNode (47 @ 51) (20)Px24y35 { Px24y34, Px24y36, Px25y35 } CellNode (24 @ 35) (20)Px54y14 { Px55y14, Px53y14, Px54y15, Px54y13 } CellNode (54 @ 14) (20)Px43y5 { Px42y5, Px43y6, Px44y5 } CellNode (43 @ 5) (20)Px45y57 { Px45y56, Px46y57, Px44y57 } CellNode (45 @ 57) (20)Px10y25 { Px9y25, Px10y24, Px11y25 } CellNode (10 @ 25) (20)Px54y45 { Px54y44, Px55y45, Px53y45, Px54y46 } CellNode (54 @ 45) (20)Px28y3 { Px27y3 } CellNode (28 @ 3) (20)Px57y19 { Px57y18, Px57y20, Px56y19 } CellNode (57 @ 19) (20)Px40y47 { Px41y47, Px40y46 } CellNode (40 @ 47) (20)Px36y28 { Px36y29, Px35y28 } CellNode (36 @ 28) (20)Px54y33 { Px55y33, Px54y34, Px53y33, Px54y32 } CellNode (54 @ 33) (20)Px29y53 { Px29y54, Px30y53, Px29y52, Px28y53 } CellNode (29 @ 53) (20)Px45y46 { Px46y46, Px45y47, Px44y46, Px45y45 } CellNode (45 @ 46) (20)Px54y21 { Px54y22, Px55y21, Px53y21, Px54y20 } CellNode (54 @ 21) (20)Px52y39 { Px52y40, Px53y39, Px52y38, Px51y39 } CellNode (52 @ 39) (20)Px27y29 { Px26y29, Px28y29 } CellNode (27 @ 29) (20)Px57y38 { Px57y37, Px57y39, Px56y38 } CellNode (57 @ 38) (20)Px54y52 { Px54y53, Px55y52, Px54y51, Px53y52 } CellNode (54 @ 52) (20)Px45y6 { Px45y7, Px45y5, Px46y6, Px44y6 } CellNode (45 @ 6) (20)Px52y28 { Px52y29, Px53y28, Px51y28, Px52y27 } CellNode (52 @ 28) (20)Px48y39 { Px48y40, Px48y38, Px49y39 } CellNode (48 @ 39) (20)Px45y53 { Px46y53, Px44y53, Px45y52, Px45y54 } CellNode (45 @ 53) (20)Px57y57 { Px57y56, Px56y57 } CellNode (57 @ 57) (20)Px57y27 { Px56y27, Px57y28, Px57y26 } CellNode (57 @ 27) (20)Px31y55 { Px31y54, Px30y55, Px31y56, Px32y55 } CellNode (31 @ 55) (20)Px54y41 { Px55y41, Px54y42, Px53y41, Px54y40 } CellNode (54 @ 41) (20)Px27y36 { Px27y37, Px26y36 } CellNode (27 @ 36) (20)Px57y15 { Px57y16, Px56y15, Px57y14 } CellNode (57 @ 15) (20)Px52y16 { Px52y15, Px52y17, Px53y16 } CellNode (52 @ 16) (20)Px36y54 { Px36y55 } CellNode (36 @ 54) (20)Px52y47 { Px53y47, Px51y47, Px52y48, Px52y46 } CellNode (52 @ 47) (20)Px48y28 { Px47y28, Px48y27, Px49y28 } CellNode (48 @ 28) (20)Px40y31 { Px39y31 } CellNode (40 @ 31) (20)Px45y42 { Px45y43, Px44y42, Px46y42, Px45y41 } CellNode (45 @ 42) (20)Px57y46 { Px57y45, Px57y47, Px56y46 } CellNode (57 @ 46) (20)Px9y25 { Px9y24, Px10y25 } CellNode (9 @ 25) (20)Px52y35 { Px52y36, Px53y35, Px52y34, Px51y35 } CellNode (52 @ 35) (20)Px57y34 { Px56y34, Px57y33, Px57y35 } CellNode (57 @ 34) (20)Px39y29 { Px39y30, Px38y29 } CellNode (39 @ 29) (20)Px36y43 { Px36y44, Px35y43, Px37y43 } CellNode (36 @ 43) (20)Px43y48 { Px44y48, Px42y48, Px43y47, Px43y49 } CellNode (43 @ 48) (20)Px48y47 { Px48y46, Px48y48, Px47y47, Px49y47 } CellNode (48 @ 47) (20)Px22y45 { Px22y46, Px21y45 } CellNode (22 @ 45) (20)Px52y54 { Px53y54, Px51y54, Px52y53, Px52y55 } CellNode (52 @ 54) (20)Px52y24 { Px53y24, Px51y24, Px52y25, Px52y23 } CellNode (52 @ 24) (20)Px57y53 { Px57y54, Px56y53, Px57y52 } CellNode (57 @ 53) (20)Px57y23 { Px56y23, Px57y22, Px57y24 } CellNode (57 @ 23) (20)Px52y12 { Px52y11, Px52y13, Px53y12 } CellNode (52 @ 12) (20)Px43y55 { Px42y55, Px43y56, Px44y55, Px43y54 } CellNode (43 @ 55) (20)Px55y29 { Px54y29, Px55y28, Px55y30, Px56y29 } CellNode (55 @ 29) (20)Px52y43 { Px53y43, Px52y44, Px51y43, Px52y42 } CellNode (52 @ 43) (20)Px48y54 { Px48y53, Px47y54 } CellNode (48 @ 54) (20)Px55y17 { Px55y16, Px54y17, Px55y18, Px56y17 } CellNode (55 @ 17) (20)Px57y42 { Px57y43, Px57y41, Px56y42 } CellNode (57 @ 42) (20)Px52y31 { Px53y31, Px52y30, Px51y31, Px52y32 } CellNode (52 @ 31) (20)Px31y40 { Px30y40, Px31y41, Px32y40 } CellNode (31 @ 40) (20)Px50y49 { Px51y49, Px49y49, Px50y48, Px50y50 } CellNode (50 @ 49) (20)Px27y51 { Px28y51, Px26y51, Px27y50, Px27y52 } CellNode (27 @ 51) (20)Px57y30 { Px57y31, Px56y30, Px57y29 } CellNode (57 @ 30) (20)Px39y25 { Px38y25 } CellNode (39 @ 25) (20)Px43y44 { Px43y45, Px43y43, Px44y44, Px42y44 } CellNode (43 @ 44) (20)Px50y37 { Px51y37, Px50y36, Px49y37, Px50y38 } CellNode (50 @ 37) (20)Px13y23 { Px14y23, Px13y24 } CellNode (13 @ 23) (20)Px48y43 { Px49y43, Px47y43, Px48y44, Px48y42 } CellNode (48 @ 43) (20)Px20y28 { Px20y27, Px20y29 } CellNode (20 @ 28) (20)Px34y56 { Px34y57, Px35y56, Px33y56, Px34y55 } CellNode (34 @ 56) (20)Px55y36 { Px55y35, Px55y37, Px56y36, Px54y36 } CellNode (55 @ 36) (20)Px52y50 { Px53y50, Px51y50, Px52y49, Px52y51 } CellNode (52 @ 50) (20)Px52y20 { Px53y20, Px52y19, Px52y21 } CellNode (52 @ 20) (20)Px55y48 { Px55y47, Px54y48, Px56y48, Px55y49 } CellNode (55 @ 48) (20)Px46y49 { Px46y50, Px47y49, Px46y48, Px45y49 } CellNode (46 @ 49) (20)Px50y26 { Px51y26, Px50y27, Px49y26, Px50y25 } CellNode (50 @ 26) (20)Px50y56 { Px50y57, Px51y56, Px50y55 } CellNode (50 @ 56) (20)Px43y21 { Px42y21, Px43y22, Px44y21 } CellNode (43 @ 21) (20)Px55y25 { Px56y25, Px55y24, Px55y26, Px54y25 } CellNode (55 @ 25) (20)Px55y55 { Px55y54, Px55y56, Px56y55, Px54y55 } CellNode (55 @ 55) (20)Px48y50 { Px48y51, Px49y50, Px47y50, Px48y49 } CellNode (48 @ 50) (20)Px25y34 { Px25y35, Px24y34 } CellNode (25 @ 34) (20)Px55y13 { Px55y14, Px54y13, Px56y13 } CellNode (55 @ 13) (20)Px11y36 { Px11y35, Px11y37, Px12y36, Px10y36 } CellNode (11 @ 36) (20)Px50y45 { Px51y45, Px49y45, Px50y44, Px50y46 } CellNode (50 @ 45) (20)Px46y26 { Px45y26 } CellNode (46 @ 26) (20)Px53y19 { Px53y20, Px54y19, Px53y18, Px52y19 } CellNode (53 @ 19) (20)Px50y33 { Px51y33, Px49y33 } CellNode (50 @ 33) (20)Px7y23 { Px6y23, Px7y24 } CellNode (7 @ 23) (20)Px55y44 { Px54y44, Px55y43, Px56y44, Px55y45 } CellNode (55 @ 44) (20)Px55y32 { Px55y33, Px56y32, Px55y31, Px54y32 } CellNode (55 @ 32) (20)Px46y57 { Px45y57, Px46y56 } CellNode (46 @ 57) (20)Px41y46 { Px41y45, Px41y47, Px42y46, Px40y46 } CellNode (41 @ 46) (20)Px11y25 { Px11y24, Px10y25 } CellNode (11 @ 25) (20)Px46y45 { Px46y46, Px47y45, Px46y44, Px45y45 } CellNode (46 @ 45) (20)Px16y24 { Px16y23, Px17y24, Px15y24 } CellNode (16 @ 24) (20)Px50y22 { Px51y22, Px50y23 } CellNode (50 @ 22) (20)Px50y52 { Px50y51, Px51y52, Px49y52 } CellNode (50 @ 52) (20)Px55y21 { Px55y20, Px55y22, Px56y21, Px54y21 } CellNode (55 @ 21) (20)Px50y10 { Px49y10, Px50y9, Px50y11, Px51y10 } CellNode (50 @ 10) (20)Px53y39 { Px53y38, Px53y40, Px54y39, Px52y39 } CellNode (53 @ 39) (20)Px23y48 { Px23y47, Px24y48 } CellNode (23 @ 48) (20)Px16y43 { Px15y43, Px17y43, Px16y42 } CellNode (16 @ 43) (20)Px55y52 { Px56y52, Px55y51, Px55y53, Px54y52 } CellNode (55 @ 52) (20)Px46y22 { Px47y22, Px46y23, Px45y22 } CellNode (46 @ 22) (20)Px7y31 { Px7y32 } CellNode (7 @ 31) (20)Px53y27 { Px52y27, Px53y28, Px54y27, Px53y26 } CellNode (53 @ 27) (20)Px50y41 { Px50y42, Px50y40, Px51y41, Px49y41 } CellNode (50 @ 41) (20)Px41y54 { Px42y54, Px41y55 } CellNode (41 @ 54) (20)Px55y40 { Px55y39, Px55y41, Px56y40, Px54y40 } CellNode (55 @ 40) (20)Px53y15 { Px53y16, Px54y15, Px53y14, Px52y15 } CellNode (53 @ 15) (20)Px49y39 { Px50y39, Px48y39, Px49y38, Px49y40 } CellNode (49 @ 39) (20)Px46y53 { Px47y53, Px45y53, Px46y54, Px46y52 } CellNode (46 @ 53) (20)Px37y23 { Px36y23, Px38y23 } CellNode (37 @ 23) (20)Px53y46 { Px53y47, Px54y46, Px52y46, Px53y45 } CellNode (53 @ 46) (20)Px49y27 { Px50y27, Px48y27, Px49y26, Px49y28 } CellNode (49 @ 27) (20)Px46y41 { Px46y42, Px47y41, Px46y40, Px45y41 } CellNode (46 @ 41) (20)Px32y55 { Px32y56, Px31y55, Px33y55, Px32y54 } CellNode (32 @ 55) (20)Px25y50 { Px25y49, Px26y50 } CellNode (25 @ 50) (20)Px32y43 { Px33y43, Px32y42 } CellNode (32 @ 43) (20)Px28y24 { Px29y24 } CellNode (28 @ 24) (20)Px44y47 { Px45y47, Px43y47, Px44y46, Px44y48 } CellNode (44 @ 47) (20)Px50y9 { Px51y9, Px49y9, Px50y10, Px50y8 } CellNode (50 @ 9) (20)Px53y35 { Px53y34, Px53y36, Px52y35, Px54y35 } CellNode (53 @ 35) (20)Px49y46 { Px48y46, Px49y45, Px49y47, Px50y46 } CellNode (49 @ 46) (20)Px35y7 { Px36y7 } CellNode (35 @ 7) (20)Px53y23 { Px53y24, Px54y23, Px52y23, Px53y22 } CellNode (53 @ 23) (20)Px44y36 { Px44y35, Px44y37 } CellNode (44 @ 36) (20)Px51y29 { Px51y30, Px52y29, Px51y28, Px50y29 } CellNode (51 @ 29) (20)Px53y54 { Px53y55, Px52y54, Px54y54, Px53y53 } CellNode (53 @ 54) (20)Px26y49 { Px25y49, Px26y50 } CellNode (26 @ 49) (20)Px23y33 { Px23y32, Px24y33 } CellNode (23 @ 33) (20)Px56y28 { Px57y28, Px56y27, Px55y28, Px56y29 } CellNode (56 @ 28) (20)Px53y42 { Px53y43, Px54y42, Px53y41, Px52y42 } CellNode (53 @ 42) (20)Px30y26 { Px30y25, Px31y26 } CellNode (30 @ 26) (20)Px46y5 { Px46y6, Px47y5, Px45y5 } CellNode (46 @ 5) (20)Px53y12 { Px53y11, Px53y13, Px54y12, Px52y12 } CellNode (53 @ 12) (20)Px49y23 { Px50y23, Px48y23, Px49y24 } CellNode (49 @ 23) (20)Px44y55 { Px45y55, Px43y55, Px44y56, Px44y54 } CellNode (44 @ 55) (20)Px51y48 { Px51y49, Px52y48, Px50y48, Px51y47 } CellNode (51 @ 48) (20)Px28y20 { Px29y20 } CellNode (28 @ 20) (20)Px44y43 { Px45y43, Px44y42, Px43y43, Px44y44 } CellNode (44 @ 43) (20)Px26y38 { Px27y38, Px26y37 } CellNode (26 @ 38) (20)Px56y47 { Px57y47, Px55y47, Px56y46, Px56y48 } CellNode (56 @ 47) (20)Px56y17 { Px56y18, Px57y17, Px55y17, Px56y16 } CellNode (56 @ 17) (20)Px35y56 { Px35y55, Px35y57, Px34y56, Px36y56 } CellNode (35 @ 56) (20)Px53y31 { Px54y31, Px52y31, Px53y32, Px53y30 } CellNode (53 @ 31) (20)Px28y51 { Px28y52, Px27y51, Px29y51, Px28y50 } CellNode (28 @ 51) (20)Px49y42 { Px48y42, Px49y43, Px50y42, Px49y41 } CellNode (49 @ 42) (20)Px35y3 { Px35y4, Px36y3 } CellNode (35 @ 3) (20)Px35y44 { Px35y43, Px36y44 } CellNode (35 @ 44) (20)Px17y39 { Px17y40 } CellNode (17 @ 39) (20)Px51y37 { Px51y38, Px50y37, Px52y37, Px51y36 } CellNode (51 @ 37) (20)Px47y48 { Px47y49, Px48y48, Px47y47, Px46y48 } CellNode (47 @ 48) (20)Px21y46 { Px22y46, Px21y45 } CellNode (21 @ 46) (20)Px56y36 { Px57y36, Px56y37, Px55y36, Px56y35 } CellNode (56 @ 36) (20)Px53y50 { Px54y50, Px53y51, Px52y50, Px53y49 } CellNode (53 @ 50) (20)Px51y25 { Px51y26, Px52y25, Px50y25, Px51y24 } CellNode (51 @ 25) (20)Px56y24 { Px57y24, Px56y23, Px55y24, Px56y25 } CellNode (56 @ 24) (20)Px51y56 { Px51y57, Px50y56, Px52y56, Px51y55 } CellNode (51 @ 56) (20)Px42y26 { Px41y26 } CellNode (42 @ 26) (20)Px44y51 { Px44y50, Px44y52, Px45y51 } CellNode (44 @ 51) (20)Px51y44 { Px52y44, Px50y44, Px51y43, Px51y45 } CellNode (51 @ 44) (20)Px8y34 { Px9y34, Px8y33 } CellNode (8 @ 34) (20)Px30y53 { Px29y53, Px30y52, Px31y53, Px30y54 } CellNode (30 @ 53) (20)Px49y50 { Px49y49, Px49y51, Px48y50, Px50y50 } CellNode (49 @ 50) (20)Px56y55 { Px57y55, Px55y55, Px56y54, Px56y56 } CellNode (56 @ 55) (20)Px56y43 { Px56y42, Px55y43, Px56y44, Px57y43 } CellNode (56 @ 43) (20)Px33y27 { Px33y28, Px34y27, Px32y27 } CellNode (33 @ 27) (20)Px30y41 { Px29y41, Px30y42, Px31y41, Px30y40 } CellNode (30 @ 41) (20)Px42y57 { Px41y57, Px43y57, Px42y56 } CellNode (42 @ 57) (20)Px56y13 { Px57y13, Px55y13, Px56y14, Px56y12 } CellNode (56 @ 13) (20)Px47y56 { Px47y55, Px46y56 } CellNode (47 @ 56) (20)Px42y45 { Px41y45, Px42y46, Px43y45, Px42y44 } CellNode (42 @ 45) (20)Px12y36 { Px11y36, Px12y35 } CellNode (12 @ 36) (20)Px12y24 { Px13y24, Px11y24 } CellNode (12 @ 24) (20)Px54y19 { Px53y19, Px54y18, Px54y20, Px55y19 } CellNode (54 @ 19) (20)Px51y33 { Px51y34, Px50y33, Px52y33 } CellNode (51 @ 33) (20)Px29y39 { Px28y39, Px29y40 } CellNode (29 @ 39) (20)Px47y44 { Px47y45, Px48y44, Px46y44, Px47y43 } CellNode (47 @ 44) (20)Px56y32 { Px55y32, Px56y33, Px56y31, Px57y32 } CellNode (56 @ 32) (20)Px38y57 { Px38y56, Px39y57, Px37y57 } CellNode (38 @ 57) (20)Px56y20 { Px55y20, Px56y19, Px56y21, Px57y20 } CellNode (56 @ 20) (20)Px42y34 { Px42y33, Px43y34 } CellNode (42 @ 34) (20)Px38y45 { Px39y45 } CellNode (38 @ 45) (20)Px54y38 { Px54y37, Px53y38, Px54y39, Px55y38 } CellNode (54 @ 38) (20)Px51y52 { Px52y52, Px51y53, Px50y52, Px51y51 } CellNode (51 @ 52) (20)Px42y22 { Px42y21, Px41y22, Px43y22 } CellNode (42 @ 22) (20)Px21y31 { Px21y30, Px22y31 } CellNode (21 @ 31) (20)Px54y26 { Px53y26, Px54y27, Px55y26, Px54y25 } CellNode (54 @ 26) (20)Px51y40 { Px52y40, Px50y40, Px51y39, Px51y41 } CellNode (51 @ 40) (20)Px51y10 { Px52y10, Px51y11, Px50y10, Px51y9 } CellNode (51 @ 10) (20)Px17y42 { Px17y43, Px16y42 } CellNode (17 @ 42) (20)Px56y51 { Px55y51, Px56y50, Px57y51, Px56y52 } CellNode (56 @ 51) (20)Px45y39 { Px45y40, Px46y39, Px45y38, Px44y39 } CellNode (45 @ 39) (20)Px42y53 { Px42y54, Px43y53 } CellNode (42 @ 53) (20)Px24y48 { Px24y49, Px23y48 } CellNode (24 @ 48) (20)Px54y57 { Px53y57, Px54y56, Px55y57 } CellNode (54 @ 57) (20)Px47y52 { Px48y52, Px47y53, Px47y51, Px46y52 } CellNode (47 @ 52) (20)Px24y36 { Px25y36, Px24y35 } CellNode (24 @ 36) (20)Px54y15 { Px55y15, Px54y14, Px54y16, Px53y15 } CellNode (54 @ 15) (20)Px47y40 { Px48y40, Px46y40, Px47y41 } CellNode (47 @ 40) (20)Px43y6 { Px42y6, Px43y5, Px44y6 } CellNode (43 @ 6) (20)Px33y42 { Px32y42, Px34y42, Px33y43 } CellNode (33 @ 42) (20)Px54y46 { Px55y46, Px53y46, Px54y45, Px54y47 } CellNode (54 @ 46) (20)Px38y11 { Px39y11 } CellNode (38 @ 11) (20)Px54y34 { Px54y33, Px53y34, Px55y34, Px54y35 } CellNode (54 @ 34) (20)Px36y29 { Px36y28, Px37y29 } CellNode (36 @ 29) (20)Px29y54 { Px29y53, Px30y54 } CellNode (29 @ 54) (20)Px45y47 { Px46y47, Px44y47, Px45y48, Px45y46 } CellNode (45 @ 47) (20)Px54y22 { Px54y23, Px55y22, Px53y22, Px54y21 } CellNode (54 @ 22) (20)Px40y24 { Px41y24 } CellNode (40 @ 24) (20)Px57y39 { Px57y40, Px57y38, Px56y39 } CellNode (57 @ 39) (20)Px54y53 { Px53y53, Px54y54, Px55y53, Px54y52 } CellNode (54 @ 53) (20)Px45y7 { Px45y6 } CellNode (45 @ 7) (20)Px24y32 { Px24y33, Px23y32 } CellNode (24 @ 32) (20)Px40y55 { Px40y56, Px41y55 } CellNode (40 @ 55) (20)Px10y34 { Px11y34, Px9y34, Px10y35 } CellNode (10 @ 34) (20)Px52y29 { Px52y28, Px52y30, Px53y29, Px51y29 } CellNode (52 @ 29) (20)Px45y54 { Px45y55, Px46y54, Px45y53, Px44y54 } CellNode (45 @ 54) (20)Px57y28 { Px56y28, Px57y29, Px57y27 } CellNode (57 @ 28) (20)Px54y42 { Px55y42, Px54y41, Px54y43, Px53y42 } CellNode (54 @ 42) (20)Px31y56 { Px31y55, Px32y56 } CellNode (31 @ 56) (20)Px31y26 { Px32y26, Px30y26 } CellNode (31 @ 26) (20)Px27y37 { Px27y38, Px27y36, Px26y37 } CellNode (27 @ 37) (20)Px57y16 { Px57y17, Px56y16, Px57y15 } CellNode (57 @ 16) (20)Px54y30 { Px54y29, Px55y30, Px54y31, Px53y30 } CellNode (54 @ 30) (20)Px36y55 { Px36y54, Px35y55, Px36y56, Px37y55 } CellNode (36 @ 55) (20)Px52y17 { Px52y16, Px52y18, Px53y17 } CellNode (52 @ 17) (20)Px29y20 { Px29y21, Px28y20 } CellNode (29 @ 20) (20)Px52y48 { Px52y47, Px53y48, Px52y49, Px51y48 } CellNode (52 @ 48) (20)Px45y43 { Px46y43, Px44y43, Px45y44, Px45y42 } CellNode (45 @ 43) (20)Px57y47 { Px57y48, Px57y46, Px56y47 } CellNode (57 @ 47) (20)Px52y36 { Px52y37, Px53y36, Px51y36, Px52y35 } CellNode (52 @ 36) (20)Px57y35 { Px56y35, Px57y34, Px57y36 } CellNode (57 @ 35) (20)Px43y49 { Px43y50, Px43y48, Px44y49 } CellNode (43 @ 49) (20)Px36y44 { Px35y44, Px37y44, Px36y43, Px36y45 } CellNode (36 @ 44) (20)Px48y48 { Px47y48, Px49y48, Px48y47, Px48y49 } CellNode (48 @ 48) (20)Px22y46 { Px21y46, Px23y46, Px22y45 } CellNode (22 @ 46) (20)Px52y55 { Px52y56, Px53y55, Px52y54, Px51y55 } CellNode (52 @ 55) (20)Px52y25 { Px52y24, Px52y26, Px51y25, Px53y25 } CellNode (52 @ 25) (20)Px45y50 { Px46y50, Px44y50, Px45y49, Px45y51 } CellNode (45 @ 50) (20)Px57y54 { Px57y55, Px56y54, Px57y53 } CellNode (57 @ 54) (20)Px57y24 { Px56y24, Px57y23, Px57y25 } CellNode (57 @ 24) (20)Px52y13 { Px53y13, Px52y14, Px51y13, Px52y12 } CellNode (52 @ 13) (20)Px9y33 { Px8y33, Px9y34 } CellNode (9 @ 33) (20)Px49y9 { Px49y10, Px48y9, Px50y9 } CellNode (49 @ 9) (20)Px43y56 { Px44y56, Px43y55, Px42y56, Px43y57 } CellNode (43 @ 56) (20)Px52y44 { Px52y45, Px53y44, Px51y44, Px52y43 } CellNode (52 @ 44) (20)Px55y18 { Px56y18, Px55y17, Px54y18, Px55y19 } CellNode (55 @ 18) (20)Px57y43 { Px57y42, Px57y44, Px56y43 } CellNode (57 @ 43) (20)Px34y27 { Px33y27, Px34y28 } CellNode (34 @ 27) (20)Px31y41 { Px30y41, Px31y42, Px31y40 } CellNode (31 @ 41) (20)Px27y52 { Px28y52, Px27y51 } CellNode (27 @ 52) (20)Px52y32 { Px52y33, Px53y32, Px52y31 } CellNode (52 @ 32) (20)Px57y31 { Px57y30, Px56y31, Px57y32 } CellNode (57 @ 31) (20)Px43y45 { Px44y45, Px42y45, Px43y46, Px43y44 } CellNode (43 @ 45) (20)Px20y29 { Px20y28, Px20y30, Px21y29 } CellNode (20 @ 29) (20)Px50y38 { Px50y39, Px51y38, Px49y38, Px50y37 } CellNode (50 @ 38) (20)Px13y24 { Px13y23, Px14y24, Px12y24 } CellNode (13 @ 24) (20)Px48y44 { Px49y44, Px48y43, Px48y45, Px47y44 } CellNode (48 @ 44) (20)Px39y56 { Px40y56, Px39y57, Px38y56 } CellNode (39 @ 56) (20)Px34y57 { Px33y57, Px34y56, Px35y57 } CellNode (34 @ 57) (20)Px55y37 { Px56y37, Px54y37, Px55y36, Px55y38 } CellNode (55 @ 37) (20)Px52y51 { Px52y52, Px53y51, Px51y51, Px52y50 } CellNode (52 @ 51) (20)Px52y21 { Px53y21, Px52y20, Px52y22 } CellNode (52 @ 21) (20)Px55y49 { Px56y49, Px55y48, Px54y49, Px55y50 } CellNode (55 @ 49) (20)Px22y30 { Px21y30, Px22y31 } CellNode (22 @ 30) (20)Px36y2 { Px36y3 } CellNode (36 @ 2) (20)Px57y50 { Px57y49, Px57y51, Px56y50 } CellNode (57 @ 50) (20)Px57y20 { Px56y20, Px57y21, Px57y19 } CellNode (57 @ 20) (20)Px39y45 { Px40y45, Px38y45 } CellNode (39 @ 45) (20)Px50y27 { Px51y27, Px50y28, Px49y27, Px50y26 } CellNode (50 @ 27) (20)Px50y57 { Px50y56, Px51y57, Px49y57 } CellNode (50 @ 57) (20)Px43y22 { Px42y22, Px43y21 } CellNode (43 @ 22) (20)Px49y5 { Px49y6 } CellNode (49 @ 5) (20)Px55y26 { Px55y27, Px54y26, Px56y26, Px55y25 } CellNode (55 @ 26) (20)Px52y40 { Px52y41, Px51y40, Px53y40, Px52y39 } CellNode (52 @ 40) (20)Px48y51 { Px48y52, Px49y51, Px48y50, Px47y51 } CellNode (48 @ 51) (20)Px25y35 { Px26y35, Px25y34, Px24y35, Px25y36 } CellNode (25 @ 35) (20)Px55y56 { Px54y56, Px55y55, Px55y57, Px56y56 } CellNode (55 @ 56) (20)Px55y14 { Px56y14, Px55y13, Px54y14, Px55y15 } CellNode (55 @ 14) (20)Px11y37 { Px11y36 } CellNode (11 @ 37) (20)Px50y46 { Px50y47, Px49y46, Px51y46, Px50y45 } CellNode (50 @ 46) (20)Px55y45 { Px55y46, Px54y45, Px55y44, Px56y45 } CellNode (55 @ 45) (20)Px7y24 { Px8y24, Px7y23 } CellNode (7 @ 24) (20)Px48y40 { Px48y39, Px49y40, Px47y40, Px48y41 } CellNode (48 @ 40) (20)Px55y33 { Px54y33, Px55y32, Px55y34, Px56y33 } CellNode (55 @ 33) (20)Px41y47 { Px42y47, Px41y46, Px40y47 } CellNode (41 @ 47) (20)Px34y42 { Px33y42, Px35y42, Px34y43 } CellNode (34 @ 42) (20)Px46y46 { Px46y45, Px47y46, Px46y47, Px45y46 } CellNode (46 @ 46) (20)Px50y23 { Px51y23, Px49y23, Px50y24, Px50y22 } CellNode (50 @ 23) (20)Px44y9 { Px43y9 } CellNode (44 @ 9) (20)Px28y29 { Px28y30, Px27y29 } CellNode (28 @ 29) (20)Px55y22 { Px54y22, Px56y22, Px55y21, Px55y23 } CellNode (55 @ 22) (20)Px50y11 { Px51y11, Px50y10 } CellNode (50 @ 11) (20)Px42y4 { Px42y5 } CellNode (42 @ 4) (20)Px41y24 { Px42y24, Px40y24 } CellNode (41 @ 24) (20)Px53y28 { Px53y27, Px52y28, Px54y28, Px53y29 } CellNode (53 @ 28) (20)Px55y53 { Px56y53, Px54y53, Px55y54, Px55y52 } CellNode (55 @ 53) (20)Px46y23 { Px47y23, Px46y22 } CellNode (46 @ 23) (20)Px7y32 { Px8y32, Px7y31 } CellNode (7 @ 32) (20)Px2y21 { Px3y21 } CellNode (2 @ 21) (20)Px53y16 { Px52y16, Px53y17, Px54y16, Px53y15 } CellNode (53 @ 16) (20)Px41y55 { Px40y55, Px41y56, Px41y54, Px42y55 } CellNode (41 @ 55) (20)Px55y41 { Px55y40, Px54y41, Px55y42, Px56y41 } CellNode (55 @ 41) (20)Px50y42 { Px51y42, Px49y42, Px50y43, Px50y41 } CellNode (50 @ 42) (20)Px46y54 { Px46y53, Px47y54, Px45y54, Px46y55 } CellNode (46 @ 54) (20)Px53y47 { Px52y47, Px53y46, Px53y48, Px54y47 } CellNode (53 @ 47) (20)Px49y28 { Px49y29, Px50y28, Px48y28, Px49y27 } CellNode (49 @ 28) (20)Px46y42 { Px47y42, Px46y43, Px46y41, Px45y42 } CellNode (46 @ 42) (20)Px32y56 { Px33y56, Px32y57, Px31y56, Px32y55 } CellNode (32 @ 56) (20)Px37y55 { Px37y56, Px36y55 } CellNode (37 @ 55) (20)Px44y5 { Px43y5, Px44y6, Px45y5 } CellNode (44 @ 5) (20)Px44y48 { Px44y49, Px45y48, Px43y48, Px44y47 } CellNode (44 @ 48) (20)Px37y43 { Px36y43, Px37y44 } CellNode (37 @ 43) (20)Px53y36 { Px54y36, Px52y36, Px53y35, Px53y37 } CellNode (53 @ 36) (20)Px49y47 { Px50y47, Px49y46, Px48y47, Px49y48 } CellNode (49 @ 47) (20)Px53y24 { Px52y24, Px53y23, Px54y24, Px53y25 } CellNode (53 @ 24) (20)Px44y37 { Px44y36, Px44y38, Px45y37 } CellNode (44 @ 37) (20)Px53y55 { Px54y55, Px53y54, Px53y56, Px52y55 } CellNode (53 @ 55) (20)Px46y50 { Px46y49, Px46y51, Px45y50, Px47y50 } CellNode (46 @ 50) (20)Px56y29 { Px56y30, Px57y29, Px56y28, Px55y29 } CellNode (56 @ 29) (20)Px53y43 { Px52y43, Px53y44, Px54y43, Px53y42 } CellNode (53 @ 43) (20)Px46y6 { Px45y6, Px46y5 } CellNode (46 @ 6) (20)Px49y24 { Px50y24, Px49y23, Px49y25 } CellNode (49 @ 24) (20)Px44y56 { Px44y57, Px45y56, Px43y56, Px44y55 } CellNode (44 @ 56) (20)Px32y40 { Px31y40 } CellNode (32 @ 40) (20)Px51y49 { Px51y50, Px52y49, Px50y49, Px51y48 } CellNode (51 @ 49) (20)Px44y44 { Px44y45, Px45y44, Px43y44, Px44y43 } CellNode (44 @ 44) (20)Px56y48 { Px56y49, Px57y48, Px56y47, Px55y48 } CellNode (56 @ 48) (20)Px14y23 { Px13y23, Px15y23, Px14y24 } CellNode (14 @ 23) (20)Px35y57 { Px34y57, Px35y56, Px36y57 } CellNode (35 @ 57) (20)Px56y18 { Px56y19, Px55y18, Px57y18, Px56y17 } CellNode (56 @ 18) (20)Px28y52 { Px28y51, Px29y52, Px28y53, Px27y52 } CellNode (28 @ 52) (20)Px53y32 { Px54y32, Px53y31, Px53y33, Px52y32 } CellNode (53 @ 32) (20)Px49y43 { Px50y43, Px48y43, Px49y42, Px49y44 } CellNode (49 @ 43) (20)Px35y4 { Px35y3 } CellNode (35 @ 4) (20)Px53y20 { Px53y19, Px53y21, Px54y20, Px52y20 } CellNode (53 @ 20) (20)Px51y38 { Px51y37, Px52y38, Px50y38, Px51y39 } CellNode (51 @ 38) (20)Px47y49 { Px47y48, Px46y49, Px47y50, Px48y49 } CellNode (47 @ 49) (20)Px28y40 { Px28y39, Px29y40 } CellNode (28 @ 40) (20)Px48y7 { Px48y8 } CellNode (48 @ 7) (20)Px56y37 { Px57y37, Px56y38, Px55y37, Px56y36 } CellNode (56 @ 37) (20)Px53y51 { Px53y50, Px54y51, Px52y51, Px53y52 } CellNode (53 @ 51) (20)Px44y21 { Px43y21, Px45y21 } CellNode (44 @ 21) (20)Px51y26 { Px51y27, Px52y26, Px50y26, Px51y25 } CellNode (51 @ 26) (20)Px49y32 { Px49y33 } CellNode (49 @ 32) (20)Px56y25 { Px56y26, Px57y25, Px56y24, Px55y25 } CellNode (56 @ 25) (20)Px51y57 { Px50y57, Px51y56, Px52y57 } CellNode (51 @ 57) (20)Px44y52 { Px44y51, Px44y53, Px45y52 } CellNode (44 @ 52) (20)Px21y36 { Px22y36 } CellNode (21 @ 36) (20)Px51y45 { Px51y46, Px52y45, Px50y45, Px51y44 } CellNode (51 @ 45) (20)Px56y56 { Px57y56, Px55y56, Px56y57, Px56y55 } CellNode (56 @ 56) (20)Px30y54 { Px31y54, Px29y54, Px30y55, Px30y53 } CellNode (30 @ 54) (20)Px49y51 { Px48y51, Px49y52, Px49y50, Px50y51 } CellNode (49 @ 51) (20)Px26y35 { Px26y36, Px25y35 } CellNode (26 @ 35) (20)Px56y44 { Px57y44, Px55y44, Px56y43, Px56y45 } CellNode (56 @ 44) (20)Px33y28 { Px33y27, Px34y28 } CellNode (33 @ 28) (20)Px30y42 { Px30y41, Px31y42 } CellNode (30 @ 42) (20)Px56y14 { Px56y15, Px57y14, Px55y14, Px56y13 } CellNode (56 @ 14) (20)Px26y23 { Px27y23 } CellNode (26 @ 23) (20)Px42y46 { Px43y46, Px41y46, Px42y45, Px42y47 } CellNode (42 @ 46) (20)Px44y40 { Px44y39, Px44y41, Px45y40 } CellNode (44 @ 40) (20)Px51y34 { Px52y34, Px51y35, Px51y33 } CellNode (51 @ 34) (20)Px47y45 { Px47y44, Px47y46, Px48y45, Px46y45 } CellNode (47 @ 45) (20)Px17y24 { Px16y24, Px18y24 } CellNode (17 @ 24) (20)Px56y33 { Px57y33, Px55y33, Px56y34, Px56y32 } CellNode (56 @ 33) (20)Px51y22 { Px51y23, Px52y22, Px50y22 } CellNode (51 @ 22) (20)Px56y21 { Px57y21, Px56y20, Px55y21, Px56y22 } CellNode (56 @ 21) (20)Px54y39 { Px55y39, Px54y38, Px53y39, Px54y40 } CellNode (54 @ 39) (20)Px51y53 { Px51y54, Px52y53, Px51y52 } CellNode (51 @ 53) (20)Px54y27 { Px55y27, Px53y27, Px54y26, Px54y28 } CellNode (54 @ 27) (20)Px51y41 { Px51y42, Px52y41, Px51y40, Px50y41 } CellNode (51 @ 41) (20)Px51y11 { Px50y11, Px51y10, Px52y11 } CellNode (51 @ 11) (20)Px47y22 { Px46y22, Px48y22, Px47y23 } CellNode (47 @ 22) (20)Px17y43 { Px16y43, Px17y42, Px18y43 } CellNode (17 @ 43) (20)Px56y52 { Px56y53, Px57y52, Px55y52, Px56y51 } CellNode (56 @ 52) (20)Px56y40 { Px57y40, Px55y40, Px56y39, Px56y41 } CellNode (56 @ 40) (20)Px24y49 { Px24y48, Px25y49 } CellNode (24 @ 49) (20)Px42y54 { Px42y55, Px42y53, Px41y54, Px43y54 } CellNode (42 @ 54) (20)Px47y53 { Px46y53, Px47y52, Px47y54, Px48y53 } CellNode (47 @ 53) (20)Px38y23 { Px39y23, Px37y23 } CellNode (38 @ 23) (20)Px54y16 { Px55y16, Px54y17, Px53y16, Px54y15 } CellNode (54 @ 16) (20)Px51y30 { Px51y31, Px51y29, Px52y30 } CellNode (51 @ 30) (20)Px47y41 { Px47y42, Px48y41, Px47y40, Px46y41 } CellNode (47 @ 41) (20)Px33y55 { Px33y56, Px34y55, Px32y55 } CellNode (33 @ 55) (20)Px26y50 { Px26y51, Px27y50, Px25y50, Px26y49 } CellNode (26 @ 50) (20)Px33y43 { Px33y42, Px32y43, Px34y43 } CellNode (33 @ 43) (20)Px29y24 { Px28y24, Px29y25 } CellNode (29 @ 24) (20)Px54y47 { Px55y47, Px53y47, Px54y48, Px54y46 } CellNode (54 @ 47) (20)Px54y35 { Px55y35, Px54y34, Px53y35, Px54y36 } CellNode (54 @ 35) (20)Px45y48 { Px44y48, Px45y47, Px46y48, Px45y49 } CellNode (45 @ 48) (20)Px54y23 { Px54y22, Px53y23, Px54y24, Px55y23 } CellNode (54 @ 23) (20)Px54y54 { Px55y54, Px54y53, Px53y54, Px54y55 } CellNode (54 @ 54) (20)Px24y33 { Px24y34, Px23y33, Px24y32 } CellNode (24 @ 33) (20)Px40y56 { Px40y55, Px40y57, Px39y56, Px41y56 } CellNode (40 @ 56) (20)Px54y12 { Px54y13, Px53y12 } CellNode (54 @ 12) (20)Px10y35 { Px11y35, Px10y34, Px9y35, Px10y36 } CellNode (10 @ 35) (20)Px45y55 { Px45y56, Px46y55, Px44y55, Px45y54 } CellNode (45 @ 55) (20)Px57y29 { Px57y30, Px56y29, Px57y28 } CellNode (57 @ 29) (20)Px54y43 { Px54y44, Px55y43, Px53y43, Px54y42 } CellNode (54 @ 43) (20)Px52y18 { Px53y18, Px52y17, Px52y19 } CellNode (52 @ 18) (20)Px27y38 { Px26y38, Px27y37, Px27y39, Px28y38 } CellNode (27 @ 38) (20)Px57y17 { Px57y16, Px57y18, Px56y17 } CellNode (57 @ 17) (20)Px40y45 { Px39y45, Px41y45, Px40y46 } CellNode (40 @ 45) (20)Px36y56 { Px37y56, Px35y56, Px36y55, Px36y57 } CellNode (36 @ 56) (20)Px54y31 { Px54y30, Px53y31, Px55y31, Px54y32 } CellNode (54 @ 31) (20)Px52y49 { Px51y49, Px52y48, Px52y50, Px53y49 } CellNode (52 @ 49) (20)Px29y51 { Px28y51, Px29y52 } CellNode (29 @ 51) (20)Px45y44 { Px45y43, Px46y44, Px44y44, Px45y45 } CellNode (45 @ 44) (20)Px57y48 { Px57y47, Px57y49, Px56y48 } CellNode (57 @ 48) (20)Px52y37 { Px51y37, Px52y36, Px52y38, Px53y37 } CellNode (52 @ 37) (20)Px15y23 { Px14y23, Px16y23, Px15y24 } CellNode (15 @ 23) (20)Px57y36 { Px57y37, Px56y36, Px57y35 } CellNode (57 @ 36) (20)Px54y50 { Px53y50, Px54y49, Px54y51, Px55y50 } CellNode (54 @ 50) (20)Px36y45 { Px36y44 } CellNode (36 @ 45) (20)Px29y40 { Px28y40, Px29y41, Px29y39, Px30y40 } CellNode (29 @ 40) (20)Px51y9 { Px50y9, Px51y10 } CellNode (51 @ 9) (20)Px48y49 { Px49y49, Px47y49, Px48y48, Px48y50 } CellNode (48 @ 49) (20)Px52y56 { Px52y55, Px52y57, Px53y56, Px51y56 } CellNode (52 @ 56) (20)Px52y26 { Px51y26, Px52y27, Px52y25, Px53y26 } CellNode (52 @ 26) (20)Px45y21 { Px44y21, Px45y22 } CellNode (45 @ 21) (20)Px48y37 { Px48y38, Px49y37 } CellNode (48 @ 37) (20)Px36y7 { Px35y7, Px36y8 } CellNode (36 @ 7) (20)Px57y55 { Px57y54, Px57y56, Px56y55 } CellNode (57 @ 55) (20)Px57y25 { Px56y25, Px57y26, Px57y24 } CellNode (57 @ 25) (20)Px31y53 { Px31y54, Px30y53 } CellNode (31 @ 53) (20)Px52y14 { Px53y14, Px52y13, Px52y15 } CellNode (52 @ 14) (20)Px45y51 { Px45y52, Px46y51, Px45y50, Px44y51 } CellNode (45 @ 51) (20)Px43y57 { Px42y57, Px44y57, Px43y56 } CellNode (43 @ 57) (20)Px57y13 { Px56y13, Px57y14 } CellNode (57 @ 13) (20)Px9y34 { Px8y34, Px9y33, Px10y34, Px9y35 } CellNode (9 @ 34) (20)Px52y45 { Px51y45, Px52y44, Px53y45, Px52y46 } CellNode (52 @ 45) (20)Px48y26 { Px49y26, Px48y27 } CellNode (48 @ 26) (20)Px45y40 { Px45y39, Px46y40, Px45y41, Px44y40 } CellNode (45 @ 40) (20)Px47y5 { Px46y5 } CellNode (47 @ 5) (20)Px55y19 { Px55y20, Px56y19, Px54y19, Px55y18 } CellNode (55 @ 19) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange640Points20">genRange640Points20messages none  defined. P1 { P4, P6 } NodeP2 { P10, P12, P16, P20 } NodeP3 { P5, P8, P11, P15, P18, P20 } NodeP4 { P1, P5, P6 } NodeP5 { P3, P4, P8, P15, P18 } NodeP6 { P1, P4 } NodeP7 { P14, P18 } NodeP8 { P3, P5, P11, P15, P18, P20 } NodeP9 { P11, P20 } NodeP10 { P2, P12, P17 } NodeP11 { P3, P8, P9, P20 } NodeP12 { P2, P10 } NodeP14 { P7 } NodeP15 { P3, P5, P8, P18, P20 } NodeP16 { P2, P19 } NodeP17 { P10 } NodeP18 { P3, P5, P7, P8, P15 } NodeP19 { P16 } NodeP20 { P2, P3, P8, P9, P11, P15 } Node0</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="ileRonde0">ileRonde0messages none  defined. Px1y1 { Px2y1, Px1y2, Px2y2 } CellNode (1 @ 1) (20)Px1y2 { Px2y2, Px2y3, Px1y3, Px2y1, Px1y1 } CellNode (1 @ 2) (20)Px1y3 { Px2y3, Px1y2, Px2y4, Px1y4, Px2y2 } CellNode (1 @ 3) (20)Px1y4 { Px1y5, Px2y3, Px2y4, Px1y3, Px2y5 } CellNode (1 @ 4) (20)Px1y5 { Px2y5, Px1y4, Px2y4 } CellNode (1 @ 5) (20)Px2y1 { Px2y2, Px1y2, Px3y1, Px3y2, Px1y1 } CellNode (2 @ 1) (20)Px2y2 { Px3y1, Px1y2, Px3y2, Px1y3, Px2y3, Px1y1, Px3y3, Px2y1 } CellNode (2 @ 2) (20)Px2y3 { Px2y4, Px1y2, Px3y4, Px2y2, Px3y2, Px1y3, Px3y3, Px1y4 } CellNode (2 @ 3) (20)Px2y4 { Px3y4, Px1y5, Px2y5, Px1y3, Px3y5, Px2y3, Px3y3, Px1y4 } CellNode (2 @ 4) (20)Px2y5 { Px1y5, Px3y4, Px3y5, Px2y4, Px1y4 } CellNode (2 @ 5) (20)Px3y1 { Px4y1, Px4y2, Px2y1, Px3y2, Px2y2 } CellNode (3 @ 1) (20)Px3y2 { Px3y1, Px4y1, Px2y2, Px4y2, Px2y3, Px3y3, Px2y1, Px4y3 } CellNode (3 @ 2) (20)Px3y3 { Px2y4, Px3y4, Px2y2, Px4y4, Px3y2, Px4y2, Px2y3, Px4y3 } CellNode (3 @ 3) (20)Px3y4 { Px2y4, Px4y4, Px2y5, Px3y5, Px2y3, Px4y5, Px3y3, Px4y3 } CellNode (3 @ 4) (20)Px3y5 { Px3y4, Px4y5, Px2y4, Px2y5, Px4y4 } CellNode (3 @ 5) (20)Px4y1 { Px5y2, Px4y2, Px3y1, Px3y2, Px5y1 } CellNode (4 @ 1) (20)Px4y2 { Px3y1, Px5y3, Px4y1, Px5y1, Px3y2, Px5y2, Px3y3, Px4y3 } CellNode (4 @ 2) (20)Px4y3 { Px5y3, Px3y4, Px4y4, Px3y2, Px5y4, Px4y2, Px5y2, Px3y3 } CellNode (4 @ 3) (20)Px4y4 { Px5y3, Px3y4, Px5y4, Px3y5, Px4y5, Px3y3, Px5y5, Px4y3 } CellNode (4 @ 4) (20)Px4y5 { Px5y5, Px3y4, Px3y5, Px5y4, Px4y4 } CellNode (4 @ 5) (20)Px5y1 { Px4y1, Px6y2, Px4y2, Px5y2, Px6y1 } CellNode (5 @ 1) (20)Px5y2 { Px5y3, Px4y1, Px6y2, Px5y1, Px6y3, Px4y2, Px6y1, Px4y3 } CellNode (5 @ 2) (20)Px5y3 { Px6y2, Px4y4, Px6y3, Px4y2, Px5y4, Px5y2, Px6y4, Px4y3 } CellNode (5 @ 3) (20)Px5y4 { Px5y5, Px5y3, Px6y5, Px4y4, Px6y3, Px4y5, Px6y4, Px4y3 } CellNode (5 @ 4) (20)Px5y5 { Px4y4, Px4y5, Px5y4, Px6y4, Px6y5 } CellNode (5 @ 5) (20)Px6y1 { Px5y1, Px5y2, Px6y2 } CellNode (6 @ 1) (20)Px6y2 { Px5y2, Px5y3, Px6y3, Px5y1, Px6y1 } CellNode (6 @ 2) (20)Px6y3 { Px6y2, Px5y2, Px5y3, Px5y4, Px6y4 } CellNode (6 @ 3) (20)Px6y4 { Px5y5, Px6y3, Px5y3, Px5y4, Px6y5 } CellNode (6 @ 4) (20)Px6y5 { Px5y4, Px5y5, Px6y4 } CellNode (6 @ 5) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cellNetwork6">cellNetwork6messages none  defined. Px14y5 { Px14y6 } CellNode (14 @ 5) (20)Px4y8 { Px5y8, Px3y8 } CellNode (4 @ 8) (20)Px4y17 { Px4y16 } CellNode (4 @ 17) (20)Px8y20 { Px9y20, Px8y21 } CellNode (8 @ 20) (20)Px16y13 { Px16y12, Px16y14, Px15y13 } CellNode (16 @ 13) (20)Px3y20 { Px3y21, Px4y20 } CellNode (3 @ 20) (20)Px1y22 { Px1y21, Px2y22 } CellNode (1 @ 22) (20)Px11y13 { Px11y14 } CellNode (11 @ 13) (20)Px15y14 { Px14y14, Px16y14, Px15y13 } CellNode (15 @ 14) (20)Px23y21 { Px22y21, Px23y22 } CellNode (23 @ 21) (20)Px5y13 { Px5y12 } CellNode (5 @ 13) (20)Px15y6 { Px15y7, Px14y6 } CellNode (15 @ 6) (20)Px22y12 { Px21y12, Px22y13 } CellNode (22 @ 12) (20)Px2y3 { Px1y3 } CellNode (2 @ 3) (20)Px20y6 { Px21y6, Px20y5, Px20y7 } CellNode (20 @ 6) (20)Px1y6 { Px1y5 } CellNode (1 @ 6) (20)Px2y21 { Px3y21, Px2y22, Px1y21 } CellNode (2 @ 21) (20)Px12y4 { Px13y4 } CellNode (12 @ 4) (20)Px9y20 { Px8y20, Px9y21 } CellNode (9 @ 20) (20)Px6y16 { Px6y17, Px7y16, Px5y16 } CellNode (6 @ 16) (20)Px2y15 { Px2y16, Px1y15 } CellNode (2 @ 15) (20)Px7y15 { Px7y16 } CellNode (7 @ 15) (20)Px4y20 { Px3y20, Px4y19 } CellNode (4 @ 20) (20)Px1y16 { Px1y15, Px2y16 } CellNode (1 @ 16) (20)Px8y11 { Px8y12, Px8y10 } CellNode (8 @ 11) (20)Px16y7 { Px15y7 } CellNode (16 @ 7) (20)Px20y10 { Px21y10, Px19y10 } CellNode (20 @ 10) (20)Px3y8 { Px4y8 } CellNode (3 @ 8) (20)Px18y16 { Px17y16 } CellNode (18 @ 16) (20)Px2y19 { Px2y18, Px1y19 } CellNode (2 @ 19) (20)Px1y3 { Px1y4, Px1y2, Px2y3 } CellNode (1 @ 3) (20)Px10y11 { Px10y12, Px10y10, Px11y11 } CellNode (10 @ 11) (20)Px14y6 { Px15y6, Px14y5 } CellNode (14 @ 6) (20)Px21y10 { Px20y10, Px21y11 } CellNode (21 @ 10) (20)Px9y2 { Px10y2 } CellNode (9 @ 2) (20)Px23y5 { Px23y6 } CellNode (23 @ 5) (20)Px8y21 { Px8y20, Px9y21 } CellNode (8 @ 21) (20)Px7y12 { Px8y12 } CellNode (7 @ 12) (20)Px3y21 { Px3y20, Px2y21 } CellNode (3 @ 21) (20)Px2y22 { Px2y21, Px1y22 } CellNode (2 @ 22) (20)Px11y14 { Px11y13, Px12y14 } CellNode (11 @ 14) (20)Px16y14 { Px16y13, Px15y14 } CellNode (16 @ 14) (20)Px15y7 { Px16y7, Px15y6 } CellNode (15 @ 7) (20)Px22y13 { Px22y14, Px22y12, Px23y13 } CellNode (22 @ 13) (20)Px8y9 { Px7y9, Px8y10 } CellNode (8 @ 9) (20)Px23y22 { Px23y21 } CellNode (23 @ 22) (20)Px20y7 { Px19y7, Px20y6, Px20y8 } CellNode (20 @ 7) (20)Px9y21 { Px8y21, Px9y20 } CellNode (9 @ 21) (20)Px6y17 { Px6y16, Px7y17, Px6y18 } CellNode (6 @ 17) (20)Px2y16 { Px2y15, Px1y16, Px3y16 } CellNode (2 @ 16) (20)Px13y23 { Px14y23 } CellNode (13 @ 23) (20)Px3y12 { Px4y12 } CellNode (3 @ 12) (20)Px19y7 { Px18y7, Px19y8, Px20y7 } CellNode (19 @ 7) (20)Px7y16 { Px6y16, Px7y15, Px7y17 } CellNode (7 @ 16) (20)Px8y12 { Px7y12, Px8y11 } CellNode (8 @ 12) (20)Px5y18 { Px6y18, Px5y19 } CellNode (5 @ 18) (20)Px21y20 { Px22y20 } CellNode (21 @ 20) (20)Px12y14 { Px11y14, Px13y14 } CellNode (12 @ 14) (20)Px9y15 { Px9y16 } CellNode (9 @ 15) (20)Px3y16 { Px4y16, Px2y16 } CellNode (3 @ 16) (20)Px1y4 { Px1y3, Px1y5 } CellNode (1 @ 4) (20)Px1y20 { Px1y21, Px1y19 } CellNode (1 @ 20) (20)Px11y11 { Px10y11, Px12y11 } CellNode (11 @ 11) (20)Px10y12 { Px10y11 } CellNode (10 @ 12) (20)Px22y20 { Px22y21, Px21y20 } CellNode (22 @ 20) (20)Px23y6 { Px22y6, Px23y5 } CellNode (23 @ 6) (20)Px21y11 { Px21y10, Px21y12 } CellNode (21 @ 11) (20)Px7y9 { Px6y9, Px8y9 } CellNode (7 @ 9) (20)Px10y8 { Px10y9, Px9y8 } CellNode (10 @ 8) (20)Px4y19 { Px5y19, Px4y20 } CellNode (4 @ 19) (20)Px18y10 { Px19y10 } CellNode (18 @ 10) (20)Px18y7 { Px19y7 } CellNode (18 @ 7) (20)Px12y11 { Px11y11 } CellNode (12 @ 11) (20)Px17y11 { Px17y12 } CellNode (17 @ 11) (20)Px10y16 { Px9y16, Px11y16 } CellNode (10 @ 16) (20)Px22y14 { Px22y13, Px23y14 } CellNode (22 @ 14) (20)Px23y13 { Px22y13, Px23y14 } CellNode (23 @ 13) (20)Px13y3 { Px13y4 } CellNode (13 @ 3) (20)Px20y8 { Px19y8, Px20y7 } CellNode (20 @ 8) (20)Px7y17 { Px7y16, Px6y17 } CellNode (7 @ 17) (20)Px5y19 { Px5y18, Px4y19 } CellNode (5 @ 19) (20)Px6y18 { Px6y17, Px5y18 } CellNode (6 @ 18) (20)Px19y8 { Px19y7, Px19y9, Px20y8 } CellNode (19 @ 8) (20)Px13y14 { Px14y14, Px12y14 } CellNode (13 @ 14) (20)Px14y23 { Px13y23 } CellNode (14 @ 23) (20)Px4y12 { Px3y12, Px5y12 } CellNode (4 @ 12) (20)Px19y10 { Px20y10, Px19y9, Px18y10 } CellNode (19 @ 10) (20)Px22y6 { Px21y6, Px23y6 } CellNode (22 @ 6) (20)Px7y6 { Px6y6 } CellNode (7 @ 6) (20)Px9y16 { Px9y15, Px10y16 } CellNode (9 @ 16) (20)Px4y16 { Px3y16, Px5y16, Px4y17 } CellNode (4 @ 16) (20)Px5y12 { Px4y12, Px5y13 } CellNode (5 @ 12) (20)Px1y5 { Px1y6, Px1y4 } CellNode (1 @ 5) (20)Px16y12 { Px16y13, Px17y12 } CellNode (16 @ 12) (20)Px14y14 { Px15y14, Px13y14 } CellNode (14 @ 14) (20)Px1y21 { Px1y20, Px2y21, Px1y22 } CellNode (1 @ 21) (20)Px15y13 { Px16y13, Px15y14 } CellNode (15 @ 13) (20)Px22y21 { Px22y20, Px23y21 } CellNode (22 @ 21) (20)Px21y12 { Px22y12, Px21y11 } CellNode (21 @ 12) (20)Px10y9 { Px10y10, Px10y8 } CellNode (10 @ 9) (20)Px5y8 { Px4y8 } CellNode (5 @ 8) (20)Px20y5 { Px20y6 } CellNode (20 @ 5) (20)Px5y16 { Px6y16, Px4y16 } CellNode (5 @ 16) (20)Px8y10 { Px8y9, Px8y11 } CellNode (8 @ 10) (20)Px1y15 { Px2y15, Px1y16 } CellNode (1 @ 15) (20)Px11y16 { Px10y16 } CellNode (11 @ 16) (20)Px17y12 { Px16y12, Px17y11 } CellNode (17 @ 12) (20)Px23y14 { Px22y14, Px23y13 } CellNode (23 @ 14) (20)Px9y8 { Px10y8 } CellNode (9 @ 8) (20)Px13y4 { Px12y4, Px13y3 } CellNode (13 @ 4) (20)Px6y9 { Px7y9 } CellNode (6 @ 9) (20)Px6y6 { Px7y6 } CellNode (6 @ 6) (20)Px21y6 { Px20y6, Px22y6 } CellNode (21 @ 6) (20)Px10y2 { Px9y2 } CellNode (10 @ 2) (20)Px1y19 { Px1y20, Px2y19 } CellNode (1 @ 19) (20)Px19y9 { Px19y8, Px19y10 } CellNode (19 @ 9) (20)Px1y2 { Px1y3 } CellNode (1 @ 2) (20)Px2y18 { Px2y19 } CellNode (2 @ 18) (20)Px17y16 { Px18y16 } CellNode (17 @ 16) (20)Px10y10 { Px10y11, Px10y9 } CellNode (10 @ 10) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cellNetwork17">cellNetwork17messages none  defined. Px10y66 { Px10y67, Px11y66, Px9y66 } CellNode (10 @ 66) (20)Px10y67 { Px9y67, Px10y68, Px11y67, Px10y66 } CellNode (10 @ 67) (20)Px10y68 { Px10y67, Px11y68, Px9y68 } CellNode (10 @ 68) (20)Px11y65 { Px12y65, Px11y66 } CellNode (11 @ 65) (20)Px11y66 { Px11y67, Px12y66, Px11y65, Px10y66 } CellNode (11 @ 66) (20)Px11y67 { Px10y67, Px11y66, Px11y68 } CellNode (11 @ 67) (20)Px11y68 { Px11y67, Px10y68 } CellNode (11 @ 68) (20)Px12y65 { Px12y66, Px11y65, Px13y65 } CellNode (12 @ 65) (20)Px12y66 { Px12y65, Px11y66, Px13y66 } CellNode (12 @ 66) (20)Px13y65 { Px14y65, Px12y65, Px13y66 } CellNode (13 @ 65) (20)Px13y66 { Px13y65, Px12y66, Px14y66 } CellNode (13 @ 66) (20)Px14y65 { Px15y65, Px14y66, Px13y65 } CellNode (14 @ 65) (20)Px14y66 { Px14y65, Px14y67, Px15y66, Px13y66 } CellNode (14 @ 66) (20)Px14y67 { Px15y67, Px14y66, Px14y68 } CellNode (14 @ 67) (20)Px14y68 { Px14y67, Px15y68 } CellNode (14 @ 68) (20)Px15y65 { Px14y65, Px15y66 } CellNode (15 @ 65) (20)Px15y66 { Px15y67, Px16y66, Px14y66, Px15y65 } CellNode (15 @ 66) (20)Px15y67 { Px16y67, Px14y67, Px15y68, Px15y66 } CellNode (15 @ 67) (20)Px15y68 { Px15y67, Px16y68, Px14y68, Px15y69 } CellNode (15 @ 68) (20)Px15y69 { Px15y68, Px16y69 } CellNode (15 @ 69) (20)Px16y66 { Px16y67, Px17y66, Px15y66 } CellNode (16 @ 66) (20)Px16y67 { Px15y67, Px16y66, Px16y68, Px17y67 } CellNode (16 @ 67) (20)Px16y68 { Px16y69, Px15y68, Px16y67, Px17y68 } CellNode (16 @ 68) (20)Px16y69 { Px16y68, Px17y69, Px15y69 } CellNode (16 @ 69) (20)Px17y66 { Px16y66, Px17y67, Px18y66 } CellNode (17 @ 66) (20)Px17y67 { Px18y67, Px16y67, Px17y66, Px17y68 } CellNode (17 @ 67) (20)Px17y68 { Px17y69, Px18y68, Px16y68, Px17y67 } CellNode (17 @ 68) (20)Px17y69 { Px16y69, Px17y68, Px18y69 } CellNode (17 @ 69) (20)Px18y65 { Px19y65, Px18y66 } CellNode (18 @ 65) (20)Px18y66 { Px19y66, Px18y67, Px17y66, Px18y65 } CellNode (18 @ 66) (20)Px18y67 { Px17y67, Px19y67, Px18y68, Px18y66 } CellNode (18 @ 67) (20)Px18y68 { Px19y68, Px18y67, Px18y69, Px17y68 } CellNode (18 @ 68) (20)Px18y69 { Px17y69, Px18y68, Px19y69 } CellNode (18 @ 69) (20)Px19y28 { Px19y29, Px20y28 } CellNode (19 @ 28) (20)Px19y29 { Px19y30, Px19y28, Px20y29 } CellNode (19 @ 29) (20)Px19y30 { Px19y31, Px19y29 } CellNode (19 @ 30) (20)Px19y31 { Px19y30, Px20y31 } CellNode (19 @ 31) (20)Px19y59 { Px19y60, Px20y59 } CellNode (19 @ 59) (20)Px19y60 { Px19y61, Px20y60, Px19y59 } CellNode (19 @ 60) (20)Px19y61 { Px19y60, Px19y62, Px20y61 } CellNode (19 @ 61) (20)Px19y62 { Px19y61, Px19y63, Px20y62 } CellNode (19 @ 62) (20)Px19y63 { Px19y64, Px19y62, Px20y63 } CellNode (19 @ 63) (20)Px19y64 { Px19y65, Px19y63, Px20y64 } CellNode (19 @ 64) (20)Px19y65 { Px19y66, Px20y65, Px18y65, Px19y64 } CellNode (19 @ 65) (20)Px19y66 { Px18y66, Px19y67, Px20y66, Px19y65 } CellNode (19 @ 66) (20)Px19y67 { Px20y67, Px19y66, Px18y67, Px19y68 } CellNode (19 @ 67) (20)Px19y68 { Px19y69, Px20y68, Px18y68, Px19y67 } CellNode (19 @ 68) (20)Px19y69 { Px19y68, Px18y69 } CellNode (19 @ 69) (20)Px1y71 { Px2y71, Px1y72 } CellNode (1 @ 71) (20)Px1y72 { Px1y73, Px2y72, Px1y71 } CellNode (1 @ 72) (20)Px1y73 { Px2y73, Px1y72 } CellNode (1 @ 73) (20)Px20y27 { Px21y27, Px20y28 } CellNode (20 @ 27) (20)Px20y28 { Px21y28, Px19y28, Px20y29, Px20y27 } CellNode (20 @ 28) (20)Px20y29 { Px19y29, Px20y28 } CellNode (20 @ 29) (20)Px20y31 { Px19y31, Px20y32, Px21y31 } CellNode (20 @ 31) (20)Px20y32 { Px21y32, Px20y31 } CellNode (20 @ 32) (20)Px20y58 { Px21y58, Px20y59 } CellNode (20 @ 58) (20)Px20y59 { Px20y60, Px21y59, Px20y58, Px19y59 } CellNode (20 @ 59) (20)Px20y60 { Px21y60, Px19y60, Px20y61, Px20y59 } CellNode (20 @ 60) (20)Px20y61 { Px19y61, Px20y60, Px20y62 } CellNode (20 @ 61) (20)Px20y62 { Px19y62, Px20y61, Px20y63 } CellNode (20 @ 62) (20)Px20y63 { Px21y63, Px19y63, Px20y64, Px20y62 } CellNode (20 @ 63) (20)Px20y64 { Px20y65, Px21y64, Px19y64, Px20y63 } CellNode (20 @ 64) (20)Px20y65 { Px20y66, Px20y64, Px21y65, Px19y65 } CellNode (20 @ 65) (20)Px20y66 { Px19y66, Px20y65, Px20y67 } CellNode (20 @ 66) (20)Px20y67 { Px19y67, Px20y66, Px20y68 } CellNode (20 @ 67) (20)Px20y68 { Px19y68, Px20y67 } CellNode (20 @ 68) (20)Px21y26 { Px22y26, Px21y27 } CellNode (21 @ 26) (20)Px21y27 { Px21y28, Px22y27, Px21y26, Px20y27 } CellNode (21 @ 27) (20)Px21y28 { Px22y28, Px20y28, Px21y27 } CellNode (21 @ 28) (20)Px21y31 { Px20y31, Px22y31, Px21y32 } CellNode (21 @ 31) (20)Px21y32 { Px20y32, Px21y31, Px22y32 } CellNode (21 @ 32) (20)Px21y58 { Px22y58, Px21y59, Px20y58 } CellNode (21 @ 58) (20)Px21y59 { Px21y58, Px21y60, Px22y59, Px20y59 } CellNode (21 @ 59) (20)Px21y60 { Px21y59, Px20y60, Px22y60 } CellNode (21 @ 60) (20)Px21y63 { Px20y63, Px21y64 } CellNode (21 @ 63) (20)Px21y64 { Px20y64, Px21y65, Px21y63 } CellNode (21 @ 64) (20)Px21y65 { Px20y65, Px21y64 } CellNode (21 @ 65) (20)Px22y25 { Px23y25, Px22y26 } CellNode (22 @ 25) (20)Px22y26 { Px22y25, Px23y26, Px21y26, Px22y27 } CellNode (22 @ 26) (20)Px22y27 { Px22y28, Px22y26, Px21y27 } CellNode (22 @ 27) (20)Px22y28 { Px22y27, Px21y28 } CellNode (22 @ 28) (20)Px22y31 { Px23y31, Px22y32, Px21y31 } CellNode (22 @ 31) (20)Px22y32 { Px21y32, Px22y31, Px23y32 } CellNode (22 @ 32) (20)Px22y58 { Px22y59, Px21y58, Px23y58 } CellNode (22 @ 58) (20)Px22y59 { Px23y59, Px22y58, Px21y59, Px22y60 } CellNode (22 @ 59) (20)Px22y60 { Px22y59, Px21y60, Px23y60 } CellNode (22 @ 60) (20)Px23y25 { Px22y25, Px23y26, Px24y25 } CellNode (23 @ 25) (20)Px23y26 { Px22y26, Px23y25, Px24y26 } CellNode (23 @ 26) (20)Px23y31 { Px24y31, Px22y31, Px23y32 } CellNode (23 @ 31) (20)Px23y32 { Px23y31, Px22y32, Px24y32 } CellNode (23 @ 32) (20)Px23y57 { Px24y57, Px23y58 } CellNode (23 @ 57) (20)Px23y58 { Px24y58, Px22y58, Px23y59, Px23y57 } CellNode (23 @ 58) (20)Px23y59 { Px23y58, Px23y60, Px24y59, Px22y59 } CellNode (23 @ 59) (20)Px23y60 { Px23y59, Px22y60 } CellNode (23 @ 60) (20)Px24y24 { Px24y25, Px25y24 } CellNode (24 @ 24) (20)Px24y25 { Px25y25, Px24y24, Px23y25, Px24y26 } CellNode (24 @ 25) (20)Px24y26 { Px23y26, Px24y25, Px25y26 } CellNode (24 @ 26) (20)Px24y31 { Px24y32, Px23y31, Px25y31 } CellNode (24 @ 31) (20)Px24y32 { Px24y31, Px25y32, Px23y32 } CellNode (24 @ 32) (20)Px24y57 { Px23y57, Px24y58 } CellNode (24 @ 57) (20)Px24y58 { Px24y57, Px23y58, Px24y59, Px25y58 } CellNode (24 @ 58) (20)Px24y59 { Px24y58, Px25y59, Px23y59 } CellNode (24 @ 59) (20)Px25y24 { Px24y24, Px26y24, Px25y25 } CellNode (25 @ 24) (20)Px25y25 { Px26y25, Px24y25, Px25y26, Px25y24 } CellNode (25 @ 25) (20)Px25y26 { Px24y26, Px26y26, Px25y25 } CellNode (25 @ 26) (20)Px25y31 { Px25y32, Px26y31, Px24y31 } CellNode (25 @ 31) (20)Px25y32 { Px26y32, Px24y32, Px25y31 } CellNode (25 @ 32) (20)Px25y58 { Px24y58, Px25y59, Px26y58 } CellNode (25 @ 58) (20)Px25y59 { Px25y60, Px26y59, Px24y59, Px25y58 } CellNode (25 @ 59) (20)Px25y60 { Px25y59, Px26y60 } CellNode (25 @ 60) (20)Px26y24 { Px26y25, Px27y24, Px25y24 } CellNode (26 @ 24) (20)Px26y25 { Px27y25, Px26y24, Px25y25, Px26y26 } CellNode (26 @ 25) (20)Px26y26 { Px26y25, Px25y26 } CellNode (26 @ 26) (20)Px26y31 { Px26y32, Px27y31, Px25y31 } CellNode (26 @ 31) (20)Px26y32 { Px27y32, Px26y31, Px25y32 } CellNode (26 @ 32) (20)Px26y58 { Px25y58, Px27y58, Px26y59 } CellNode (26 @ 58) (20)Px26y59 { Px26y58, Px26y60, Px27y59, Px25y59 } CellNode (26 @ 59) (20)Px26y60 { Px25y60, Px27y60, Px26y59 } CellNode (26 @ 60) (20)Px27y24 { Px26y24, Px27y25, Px28y24 } CellNode (27 @ 24) (20)Px27y25 { Px26y25, Px27y24, Px28y25 } CellNode (27 @ 25) (20)Px27y30 { Px27y31, Px28y30 } CellNode (27 @ 30) (20)Px27y31 { Px27y30, Px26y31, Px27y32, Px28y31 } CellNode (27 @ 31) (20)Px27y32 { Px26y32, Px27y31, Px28y32 } CellNode (27 @ 32) (20)Px27y58 { Px27y59, Px26y58, Px28y58 } CellNode (27 @ 58) (20)Px27y59 { Px28y59, Px27y58, Px26y59, Px27y60 } CellNode (27 @ 59) (20)Px27y60 { Px26y60, Px28y60, Px27y59 } CellNode (27 @ 60) (20)Px28y23 { Px29y23, Px28y24 } CellNode (28 @ 23) (20)Px28y24 { Px28y25, Px29y24, Px28y23, Px27y24 } CellNode (28 @ 24) (20)Px28y25 { Px28y24, Px27y25, Px28y26, Px29y25 } CellNode (28 @ 25) (20)Px28y26 { Px29y26, Px28y25 } CellNode (28 @ 26) (20)Px28y30 { Px27y30, Px28y31, Px29y30 } CellNode (28 @ 30) (20)Px28y31 { Px28y32, Px27y31, Px29y31, Px28y30 } CellNode (28 @ 31) (20)Px28y32 { Px27y32, Px28y31, Px29y32 } CellNode (28 @ 32) (20)Px28y58 { Px27y58, Px28y59, Px29y58 } CellNode (28 @ 58) (20)Px28y59 { Px28y58, Px28y60, Px29y59, Px27y59 } CellNode (28 @ 59) (20)Px28y60 { Px28y59, Px28y61, Px29y60, Px27y60 } CellNode (28 @ 60) (20)Px28y61 { Px28y60, Px29y61 } CellNode (28 @ 61) (20)Px29y22 { Px30y22, Px29y23 } CellNode (29 @ 22) (20)Px29y23 { Px29y24, Px30y23, Px28y23, Px29y22 } CellNode (29 @ 23) (20)Px29y24 { Px28y24, Px29y23, Px29y25, Px30y24 } CellNode (29 @ 24) (20)Px29y25 { Px30y25, Px28y25, Px29y24, Px29y26 } CellNode (29 @ 25) (20)Px29y26 { Px28y26, Px29y25, Px30y26 } CellNode (29 @ 26) (20)Px29y29 { Px30y29, Px29y30 } CellNode (29 @ 29) (20)Px29y30 { Px29y31, Px30y30, Px28y30, Px29y29 } CellNode (29 @ 30) (20)Px29y31 { Px29y30, Px29y32, Px30y31, Px28y31 } CellNode (29 @ 31) (20)Px29y32 { Px28y32, Px29y31, Px30y32 } CellNode (29 @ 32) (20)Px29y48 { Px30y48, Px29y49 } CellNode (29 @ 48) (20)Px29y49 { Px29y48, Px30y49, Px29y50 } CellNode (29 @ 49) (20)Px29y50 { Px30y50, Px29y49, Px29y51 } CellNode (29 @ 50) (20)Px29y51 { Px30y51, Px29y52, Px29y50 } CellNode (29 @ 51) (20)Px29y52 { Px30y52, Px29y51 } CellNode (29 @ 52) (20)Px29y58 { Px30y58, Px29y59, Px28y58 } CellNode (29 @ 58) (20)Px29y59 { Px30y59, Px28y59, Px29y58, Px29y60 } CellNode (29 @ 59) (20)Px29y60 { Px30y60, Px28y60, Px29y61, Px29y59 } CellNode (29 @ 60) (20)Px29y61 { Px28y61, Px29y60, Px30y61 } CellNode (29 @ 61) (20)Px2y71 { Px3y71, Px2y72, Px1y71 } CellNode (2 @ 71) (20)Px2y72 { Px2y73, Px2y71, Px3y72, Px1y72 } CellNode (2 @ 72) (20)Px2y73 { Px3y73, Px2y72, Px1y73 } CellNode (2 @ 73) (20)Px30y21 { Px31y21, Px30y22 } CellNode (30 @ 21) (20)Px30y22 { Px30y21, Px30y23, Px29y22, Px31y22 } CellNode (30 @ 22) (20)Px30y23 { Px30y22, Px29y23, Px30y24 } CellNode (30 @ 23) (20)Px30y24 { Px30y23, Px29y24, Px30y25 } CellNode (30 @ 24) (20)Px30y25 { Px30y26, Px29y25, Px30y24 } CellNode (30 @ 25) (20)Px30y26 { Px29y26, Px30y25 } CellNode (30 @ 26) (20)Px30y29 { Px30y30, Px29y29 } CellNode (30 @ 29) (20)Px30y30 { Px29y30, Px30y29, Px31y30, Px30y31 } CellNode (30 @ 30) (20)Px30y31 { Px30y32, Px29y31, Px31y31, Px30y30 } CellNode (30 @ 31) (20)Px30y32 { Px31y32, Px30y33, Px29y32, Px30y31 } CellNode (30 @ 32) (20)Px30y33 { Px30y34, Px30y32, Px31y33 } CellNode (30 @ 33) (20)Px30y34 { Px30y33, Px30y35, Px31y34 } CellNode (30 @ 34) (20)Px30y35 { Px30y34, Px31y35, Px30y36 } CellNode (30 @ 35) (20)Px30y36 { Px30y35, Px31y36 } CellNode (30 @ 36) (20)Px30y46 { Px30y47, Px31y46 } CellNode (30 @ 46) (20)Px30y47 { Px30y48, Px30y46, Px31y47 } CellNode (30 @ 47) (20)Px30y48 { Px30y47, Px30y49, Px31y48, Px29y48 } CellNode (30 @ 48) (20)Px30y49 { Px31y49, Px29y49, Px30y48, Px30y50 } CellNode (30 @ 49) (20)Px30y50 { Px30y51, Px30y49, Px29y50 } CellNode (30 @ 50) (20)Px30y51 { Px31y51, Px29y51, Px30y52, Px30y50 } CellNode (30 @ 51) (20)Px30y52 { Px30y53, Px29y52, Px31y52, Px30y51 } CellNode (30 @ 52) (20)Px30y53 { Px31y53, Px30y54, Px30y52 } CellNode (30 @ 53) (20)Px30y54 { Px30y53, Px31y54, Px30y55 } CellNode (30 @ 54) (20)Px30y55 { Px31y55, Px30y54, Px30y56 } CellNode (30 @ 55) (20)Px30y56 { Px31y56, Px30y57, Px30y55 } CellNode (30 @ 56) (20)Px30y57 { Px31y57, Px30y58, Px30y56 } CellNode (30 @ 57) (20)Px30y58 { Px31y58, Px30y59, Px29y58, Px30y57 } CellNode (30 @ 58) (20)Px30y59 { Px30y60, Px31y59, Px29y59, Px30y58 } CellNode (30 @ 59) (20)Px30y60 { Px30y59, Px29y60, Px30y61 } CellNode (30 @ 60) (20)Px30y61 { Px30y60, Px29y61 } CellNode (30 @ 61) (20)Px31y21 { Px32y21, Px31y22, Px30y21 } CellNode (31 @ 21) (20)Px31y22 { Px31y21, Px32y22, Px30y22 } CellNode (31 @ 22) (20)Px31y30 { Px30y30, Px31y31 } CellNode (31 @ 30) (20)Px31y31 { Px31y32, Px31y30, Px30y31 } CellNode (31 @ 31) (20)Px31y32 { Px30y32, Px31y31, Px31y33, Px32y32 } CellNode (31 @ 32) (20)Px31y33 { Px32y33, Px30y33, Px31y32, Px31y34 } CellNode (31 @ 33) (20)Px31y34 { Px31y35, Px32y34, Px31y33, Px30y34 } CellNode (31 @ 34) (20)Px31y35 { Px31y34, Px31y36, Px30y35 } CellNode (31 @ 35) (20)Px31y36 { Px31y37, Px31y35, Px30y36 } CellNode (31 @ 36) (20)Px31y37 { Px32y37, Px31y36 } CellNode (31 @ 37) (20)Px31y44 { Px32y44, Px31y45 } CellNode (31 @ 44) (20)Px31y45 { Px31y44, Px32y45, Px31y46 } CellNode (31 @ 45) (20)Px31y46 { Px32y46, Px30y46, Px31y47, Px31y45 } CellNode (31 @ 46) (20)Px31y47 { Px32y47, Px31y46, Px31y48, Px30y47 } CellNode (31 @ 47) (20)Px31y48 { Px30y48, Px31y49, Px31y47 } CellNode (31 @ 48) (20)Px31y49 { Px30y49, Px31y48 } CellNode (31 @ 49) (20)Px31y51 { Px31y52, Px30y51 } CellNode (31 @ 51) (20)Px31y52 { Px32y52, Px31y51, Px30y52, Px31y53 } CellNode (31 @ 52) (20)Px31y53 { Px31y54, Px32y53, Px30y53, Px31y52 } CellNode (31 @ 53) (20)Px31y54 { Px31y55, Px32y54, Px30y54, Px31y53 } CellNode (31 @ 54) (20)Px31y55 { Px31y54, Px30y55, Px31y56, Px32y55 } CellNode (31 @ 55) (20)Px31y56 { Px32y56, Px31y55, Px30y56, Px31y57 } CellNode (31 @ 56) (20)Px31y57 { Px31y58, Px32y57, Px31y56, Px30y57 } CellNode (31 @ 57) (20)Px31y58 { Px31y57, Px30y58, Px31y59 } CellNode (31 @ 58) (20)Px31y59 { Px31y58, Px30y59 } CellNode (31 @ 59) (20)Px32y21 { Px31y21, Px32y22 } CellNode (32 @ 21) (20)Px32y22 { Px31y22, Px33y22, Px32y23, Px32y21 } CellNode (32 @ 22) (20)Px32y23 { Px33y23, Px32y22 } CellNode (32 @ 23) (20)Px32y32 { Px33y32, Px31y32, Px32y33 } CellNode (32 @ 32) (20)Px32y33 { Px33y33, Px31y33, Px32y34, Px32y32 } CellNode (32 @ 33) (20)Px32y34 { Px32y33, Px31y34, Px33y34 } CellNode (32 @ 34) (20)Px32y37 { Px31y37, Px33y37 } CellNode (32 @ 37) (20)Px32y42 { Px33y42, Px32y43 } CellNode (32 @ 42) (20)Px32y43 { Px32y42, Px32y44, Px33y43 } CellNode (32 @ 43) (20)Px32y44 { Px33y44, Px32y45, Px32y43, Px31y44 } CellNode (32 @ 44) (20)Px32y45 { Px32y44, Px33y45, Px32y46, Px31y45 } CellNode (32 @ 45) (20)Px32y46 { Px32y45, Px31y46, Px33y46, Px32y47 } CellNode (32 @ 46) (20)Px32y47 { Px33y47, Px32y46, Px31y47 } CellNode (32 @ 47) (20)Px32y52 { Px31y52, Px32y53 } CellNode (32 @ 52) (20)Px32y53 { Px31y53, Px32y52, Px32y54 } CellNode (32 @ 53) (20)Px32y54 { Px31y54, Px32y53, Px32y55 } CellNode (32 @ 54) (20)Px32y55 { Px31y55, Px32y56, Px32y54 } CellNode (32 @ 55) (20)Px32y56 { Px31y56, Px32y57, Px32y55 } CellNode (32 @ 56) (20)Px32y57 { Px32y56, Px31y57 } CellNode (32 @ 57) (20)Px33y22 { Px33y23, Px32y22 } CellNode (33 @ 22) (20)Px33y23 { Px33y24, Px34y23, Px32y23, Px33y22 } CellNode (33 @ 23) (20)Px33y24 { Px33y23, Px34y24 } CellNode (33 @ 24) (20)Px33y32 { Px33y33, Px32y32 } CellNode (33 @ 32) (20)Px33y33 { Px32y33, Px33y32, Px33y34 } CellNode (33 @ 33) (20)Px33y34 { Px33y35, Px34y34, Px32y34, Px33y33 } CellNode (33 @ 34) (20)Px33y35 { Px33y34, Px33y36, Px34y35 } CellNode (33 @ 35) (20)Px33y36 { Px33y37, Px34y36, Px33y35 } CellNode (33 @ 36) (20)Px33y37 { Px34y37, Px32y37, Px33y36 } CellNode (33 @ 37) (20)Px33y41 { Px33y42, Px34y41 } CellNode (33 @ 41) (20)Px33y42 { Px34y42, Px32y42, Px33y41, Px33y43 } CellNode (33 @ 42) (20)Px33y43 { Px33y44, Px34y43, Px33y42, Px32y43 } CellNode (33 @ 43) (20)Px33y44 { Px33y45, Px32y44, Px33y43 } CellNode (33 @ 44) (20)Px33y45 { Px33y44, Px32y45, Px33y46 } CellNode (33 @ 45) (20)Px33y46 { Px33y45, Px33y47, Px32y46 } CellNode (33 @ 46) (20)Px33y47 { Px33y46, Px32y47 } CellNode (33 @ 47) (20)Px34y16 { Px35y16, Px34y17 } CellNode (34 @ 16) (20)Px34y17 { Px34y18, Px35y17, Px34y16 } CellNode (34 @ 17) (20)Px34y18 { Px34y19, Px35y18, Px34y17 } CellNode (34 @ 18) (20)Px34y19 { Px34y20, Px34y18, Px35y19 } CellNode (34 @ 19) (20)Px34y20 { Px34y19, Px35y20 } CellNode (34 @ 20) (20)Px34y23 { Px33y23, Px34y24, Px35y23 } CellNode (34 @ 23) (20)Px34y24 { Px33y24, Px35y24, Px34y23 } CellNode (34 @ 24) (20)Px34y27 { Px35y27 } CellNode (34 @ 27) (20)Px34y34 { Px33y34, Px35y34, Px34y35 } CellNode (34 @ 34) (20)Px34y35 { Px33y35, Px34y34, Px34y36, Px35y35 } CellNode (34 @ 35) (20)Px34y36 { Px35y36, Px34y35, Px33y36, Px34y37 } CellNode (34 @ 36) (20)Px34y37 { Px34y36, Px35y37, Px33y37 } CellNode (34 @ 37) (20)Px34y41 { Px33y41, Px34y42, Px35y41 } CellNode (34 @ 41) (20)Px34y42 { Px35y42, Px33y42, Px34y43, Px34y41 } CellNode (34 @ 42) (20)Px34y43 { Px33y43, Px34y42 } CellNode (34 @ 43) (20)Px35y14 { Px35y15, Px36y14 } CellNode (35 @ 14) (20)Px35y15 { Px35y16, Px35y14, Px36y15 } CellNode (35 @ 15) (20)Px35y16 { Px36y16, Px35y17, Px34y16, Px35y15 } CellNode (35 @ 16) (20)Px35y17 { Px35y16, Px35y18, Px36y17, Px34y17 } CellNode (35 @ 17) (20)Px35y18 { Px34y18, Px35y19, Px35y17, Px36y18 } CellNode (35 @ 18) (20)Px35y19 { Px36y19, Px34y19, Px35y18, Px35y20 } CellNode (35 @ 19) (20)Px35y20 { Px34y20, Px36y20, Px35y19 } CellNode (35 @ 20) (20)Px35y23 { Px34y23, Px35y24 } CellNode (35 @ 23) (20)Px35y24 { Px35y25, Px35y23, Px34y24 } CellNode (35 @ 24) (20)Px35y25 { Px35y26, Px36y25, Px35y24 } CellNode (35 @ 25) (20)Px35y26 { Px35y27, Px35y25, Px36y26 } CellNode (35 @ 26) (20)Px35y27 { Px35y26, Px34y27, Px36y27 } CellNode (35 @ 27) (20)Px35y34 { Px35y35, Px36y34, Px34y34 } CellNode (35 @ 34) (20)Px35y35 { Px35y36, Px34y35, Px36y35, Px35y34 } CellNode (35 @ 35) (20)Px35y36 { Px36y36, Px34y36, Px35y37, Px35y35 } CellNode (35 @ 36) (20)Px35y37 { Px35y36, Px36y37, Px34y37 } CellNode (35 @ 37) (20)Px35y40 { Px35y41, Px36y40 } CellNode (35 @ 40) (20)Px35y41 { Px35y40, Px35y42, Px36y41, Px34y41 } CellNode (35 @ 41) (20)Px35y42 { Px34y42, Px35y41, Px36y42 } CellNode (35 @ 42) (20)Px36y13 { Px37y13, Px36y14 } CellNode (36 @ 13) (20)Px36y14 { Px36y15, Px37y14, Px36y13, Px35y14 } CellNode (36 @ 14) (20)Px36y15 { Px35y15, Px36y16, Px36y14 } CellNode (36 @ 15) (20)Px36y16 { Px36y15, Px35y16, Px36y17, Px37y16 } CellNode (36 @ 16) (20)Px36y17 { Px36y18, Px36y16, Px35y17 } CellNode (36 @ 17) (20)Px36y18 { Px36y19, Px35y18, Px36y17 } CellNode (36 @ 18) (20)Px36y19 { Px35y19, Px36y20, Px37y19, Px36y18 } CellNode (36 @ 19) (20)Px36y20 { Px36y19, Px37y20, Px35y20, Px36y21 } CellNode (36 @ 20) (20)Px36y21 { Px37y21, Px36y20 } CellNode (36 @ 21) (20)Px36y25 { Px36y26, Px35y25 } CellNode (36 @ 25) (20)Px36y26 { Px37y26, Px35y26, Px36y27, Px36y25 } CellNode (36 @ 26) (20)Px36y27 { Px36y26, Px37y27, Px35y27, Px36y28 } CellNode (36 @ 27) (20)Px36y28 { Px36y27, Px37y28 } CellNode (36 @ 28) (20)Px36y34 { Px35y34, Px36y35 } CellNode (36 @ 34) (20)Px36y35 { Px35y35, Px36y34, Px36y36 } CellNode (36 @ 35) (20)Px36y36 { Px37y36, Px35y36, Px36y35, Px36y37 } CellNode (36 @ 36) (20)Px36y37 { Px36y38, Px37y37, Px36y36, Px35y37 } CellNode (36 @ 37) (20)Px36y38 { Px36y37, Px37y38 } CellNode (36 @ 38) (20)Px36y40 { Px36y41, Px35y40, Px37y40 } CellNode (36 @ 40) (20)Px36y41 { Px37y41, Px36y42, Px35y41, Px36y40 } CellNode (36 @ 41) (20)Px36y42 { Px37y42, Px35y42, Px36y41 } CellNode (36 @ 42) (20)Px37y11 { Px37y12, Px38y11 } CellNode (37 @ 11) (20)Px37y12 { Px37y11, Px37y13, Px38y12 } CellNode (37 @ 12) (20)Px37y13 { Px37y14, Px38y13, Px36y13, Px37y12 } CellNode (37 @ 13) (20)Px37y14 { Px38y14, Px36y14, Px37y13 } CellNode (37 @ 14) (20)Px37y16 { Px36y16 } CellNode (37 @ 16) (20)Px37y19 { Px37y20, Px36y19, Px38y19 } CellNode (37 @ 19) (20)Px37y20 { Px38y20, Px36y20, Px37y19, Px37y21 } CellNode (37 @ 20) (20)Px37y21 { Px37y20, Px36y21, Px38y21 } CellNode (37 @ 21) (20)Px37y26 { Px36y26, Px37y27 } CellNode (37 @ 26) (20)Px37y27 { Px37y26, Px37y28, Px36y27 } CellNode (37 @ 27) (20)Px37y28 { Px37y27, Px36y28 } CellNode (37 @ 28) (20)Px37y36 { Px37y37, Px36y36 } CellNode (37 @ 36) (20)Px37y37 { Px37y36, Px37y38, Px36y37, Px38y37 } CellNode (37 @ 37) (20)Px37y38 { Px36y38, Px37y39, Px37y37, Px38y38 } CellNode (37 @ 38) (20)Px37y39 { Px38y39, Px37y38, Px37y40 } CellNode (37 @ 39) (20)Px37y40 { Px37y41, Px38y40, Px36y40, Px37y39 } CellNode (37 @ 40) (20)Px37y41 { Px37y42, Px38y41, Px37y40, Px36y41 } CellNode (37 @ 41) (20)Px37y42 { Px37y41, Px36y42, Px37y43, Px38y42 } CellNode (37 @ 42) (20)Px37y43 { Px37y42 } CellNode (37 @ 43) (20)Px38y10 { Px39y10, Px38y11 } CellNode (38 @ 10) (20)Px38y11 { Px38y12, Px39y11, Px37y11, Px38y10 } CellNode (38 @ 11) (20)Px38y12 { Px38y13, Px37y12, Px39y12, Px38y11 } CellNode (38 @ 12) (20)Px38y13 { Px38y12, Px39y13, Px37y13, Px38y14 } CellNode (38 @ 13) (20)Px38y14 { Px39y14, Px37y14, Px38y13, Px38y15 } CellNode (38 @ 14) (20)Px38y15 { Px39y15, Px38y14 } CellNode (38 @ 15) (20)Px38y19 { Px38y20, Px37y19, Px39y19 } CellNode (38 @ 19) (20)Px38y20 { Px38y19, Px38y21, Px39y20, Px37y20 } CellNode (38 @ 20) (20)Px38y21 { Px38y20, Px38y22, Px39y21, Px37y21 } CellNode (38 @ 21) (20)Px38y22 { Px38y23, Px39y22, Px38y21 } CellNode (38 @ 22) (20)Px38y23 { Px38y22, Px39y23 } CellNode (38 @ 23) (20)Px38y29 { Px39y29, Px38y30 } CellNode (38 @ 29) (20)Px38y30 { Px39y30, Px38y31, Px38y29 } CellNode (38 @ 30) (20)Px38y31 { Px38y30, Px38y32, Px39y31 } CellNode (38 @ 31) (20)Px38y32 { Px39y32, Px38y31 } CellNode (38 @ 32) (20)Px38y37 { Px39y37, Px37y37, Px38y38 } CellNode (38 @ 37) (20)Px38y38 { Px39y38, Px38y39, Px38y37, Px37y38 } CellNode (38 @ 38) (20)Px38y39 { Px37y39, Px38y40, Px39y39, Px38y38 } CellNode (38 @ 39) (20)Px38y40 { Px38y41, Px38y39, Px37y40 } CellNode (38 @ 40) (20)Px38y41 { Px37y41, Px38y42, Px38y40, Px39y41 } CellNode (38 @ 41) (20)Px38y42 { Px39y42, Px38y41, Px37y42 } CellNode (38 @ 42) (20)Px39y10 { Px39y11, Px40y10, Px38y10, Px39y9 } CellNode (39 @ 10) (20)Px39y11 { Px38y11, Px39y10, Px39y12 } CellNode (39 @ 11) (20)Px39y12 { Px39y13, Px39y11, Px38y12 } CellNode (39 @ 12) (20)Px39y13 { Px38y13, Px39y12, Px39y14 } CellNode (39 @ 13) (20)Px39y14 { Px39y15, Px40y14, Px39y13, Px38y14 } CellNode (39 @ 14) (20)Px39y15 { Px39y14, Px39y16, Px40y15, Px38y15 } CellNode (39 @ 15) (20)Px39y16 { Px40y16, Px39y15 } CellNode (39 @ 16) (20)Px39y18 { Px39y19, Px40y18 } CellNode (39 @ 18) (20)Px39y19 { Px38y19, Px39y18, Px39y20, Px40y19 } CellNode (39 @ 19) (20)Px39y20 { Px38y20, Px39y21, Px39y19 } CellNode (39 @ 20) (20)Px39y21 { Px38y21, Px39y22, Px39y20 } CellNode (39 @ 21) (20)Px39y22 { Px39y23, Px38y22, Px40y22, Px39y21 } CellNode (39 @ 22) (20)Px39y23 { Px38y23, Px39y22, Px39y24 } CellNode (39 @ 23) (20)Px39y24 { Px39y25, Px39y23, Px40y24 } CellNode (39 @ 24) (20)Px39y25 { Px39y24, Px40y25 } CellNode (39 @ 25) (20)Px39y29 { Px39y30, Px38y29, Px40y29 } CellNode (39 @ 29) (20)Px39y30 { Px39y29, Px39y31, Px40y30, Px38y30 } CellNode (39 @ 30) (20)Px39y31 { Px39y30, Px38y31, Px39y32 } CellNode (39 @ 31) (20)Px39y32 { Px38y32, Px39y31 } CellNode (39 @ 32) (20)Px39y37 { Px38y37, Px39y38, Px40y37 } CellNode (39 @ 37) (20)Px39y38 { Px38y38, Px39y39, Px40y38, Px39y37 } CellNode (39 @ 38) (20)Px39y39 { Px39y38, Px38y39 } CellNode (39 @ 39) (20)Px39y41 { Px39y42, Px38y41 } CellNode (39 @ 41) (20)Px39y42 { Px38y42, Px39y41 } CellNode (39 @ 42) (20)Px39y63 { Px40y63, Px39y64 } CellNode (39 @ 63) (20)Px39y64 { Px39y63, Px39y65, Px40y64 } CellNode (39 @ 64) (20)Px39y65 { Px39y64, Px39y66, Px40y65 } CellNode (39 @ 65) (20)Px39y66 { Px39y67, Px39y65, Px40y66 } CellNode (39 @ 66) (20)Px39y67 { Px40y67, Px39y66 } CellNode (39 @ 67) (20)Px39y9 { Px39y10, Px40y9 } CellNode (39 @ 9) (20)Px3y71 { Px2y71, Px3y72, Px4y71 } CellNode (3 @ 71) (20)Px3y72 { Px3y73, Px4y72, Px3y71, Px2y72 } CellNode (3 @ 72) (20)Px3y73 { Px3y72, Px4y73, Px2y73 } CellNode (3 @ 73) (20)Px40y10 { Px41y10, Px40y9, Px39y10 } CellNode (40 @ 10) (20)Px40y14 { Px40y15, Px41y14, Px39y14 } CellNode (40 @ 14) (20)Px40y15 { Px41y15, Px39y15, Px40y16, Px40y14 } CellNode (40 @ 15) (20)Px40y16 { Px40y15, Px39y16 } CellNode (40 @ 16) (20)Px40y18 { Px40y19, Px39y18 } CellNode (40 @ 18) (20)Px40y19 { Px40y18, Px39y19 } CellNode (40 @ 19) (20)Px40y22 { Px39y22 } CellNode (40 @ 22) (20)Px40y24 { Px39y24, Px40y25 } CellNode (40 @ 24) (20)Px40y25 { Px39y25, Px40y26, Px41y25, Px40y24 } CellNode (40 @ 25) (20)Px40y26 { Px40y25, Px41y26, Px40y27 } CellNode (40 @ 26) (20)Px40y27 { Px41y27, Px40y26, Px40y28 } CellNode (40 @ 27) (20)Px40y28 { Px41y28, Px40y29, Px40y27 } CellNode (40 @ 28) (20)Px40y29 { Px39y29, Px40y28, Px40y30, Px41y29 } CellNode (40 @ 29) (20)Px40y30 { Px39y30, Px41y30, Px40y29 } CellNode (40 @ 30) (20)Px40y37 { Px40y38, Px39y37 } CellNode (40 @ 37) (20)Px40y38 { Px39y38, Px40y37 } CellNode (40 @ 38) (20)Px40y59 { Px41y59, Px40y60 } CellNode (40 @ 59) (20)Px40y60 { Px40y59, Px40y61, Px41y60 } CellNode (40 @ 60) (20)Px40y61 { Px41y61, Px40y60, Px40y62 } CellNode (40 @ 61) (20)Px40y62 { Px40y63, Px40y61, Px41y62 } CellNode (40 @ 62) (20)Px40y63 { Px40y64, Px39y63, Px41y63, Px40y62 } CellNode (40 @ 63) (20)Px40y64 { Px41y64, Px40y63, Px40y65, Px39y64 } CellNode (40 @ 64) (20)Px40y65 { Px40y66, Px41y65, Px39y65, Px40y64 } CellNode (40 @ 65) (20)Px40y66 { Px40y67, Px41y66, Px39y66, Px40y65 } CellNode (40 @ 66) (20)Px40y67 { Px40y66, Px39y67, Px41y67 } CellNode (40 @ 67) (20)Px40y8 { Px41y8, Px40y9 } CellNode (40 @ 8) (20)Px40y9 { Px40y8, Px40y10, Px41y9, Px39y9 } CellNode (40 @ 9) (20)Px41y10 { Px42y10, Px40y10, Px41y9, Px41y11 } CellNode (41 @ 10) (20)Px41y11 { Px41y10, Px42y11 } CellNode (41 @ 11) (20)Px41y13 { Px42y13, Px41y14 } CellNode (41 @ 13) (20)Px41y14 { Px41y15, Px42y14, Px40y14, Px41y13 } CellNode (41 @ 14) (20)Px41y15 { Px40y15, Px41y14, Px42y15 } CellNode (41 @ 15) (20)Px41y25 { Px40y25, Px41y26 } CellNode (41 @ 25) (20)Px41y26 { Px42y26, Px41y27, Px40y26, Px41y25 } CellNode (41 @ 26) (20)Px41y27 { Px41y26, Px41y28, Px40y27, Px42y27 } CellNode (41 @ 27) (20)Px41y28 { Px40y28, Px41y29, Px41y27, Px42y28 } CellNode (41 @ 28) (20)Px41y29 { Px42y29, Px40y29, Px41y28, Px41y30 } CellNode (41 @ 29) (20)Px41y30 { Px41y29, Px40y30, Px42y30 } CellNode (41 @ 30) (20)Px41y59 { Px40y59, Px42y59, Px41y60 } CellNode (41 @ 59) (20)Px41y60 { Px42y60, Px40y60, Px41y59, Px41y61 } CellNode (41 @ 60) (20)Px41y61 { Px41y62, Px42y61, Px41y60, Px40y61 } CellNode (41 @ 61) (20)Px41y62 { Px41y61, Px41y63, Px42y62, Px40y62 } CellNode (41 @ 62) (20)Px41y63 { Px40y63, Px41y62, Px41y64, Px42y63 } CellNode (41 @ 63) (20)Px41y64 { Px41y63, Px41y65, Px40y64 } CellNode (41 @ 64) (20)Px41y65 { Px40y65, Px41y64, Px41y66 } CellNode (41 @ 65) (20)Px41y66 { Px40y66, Px41y65, Px41y67, Px42y66 } CellNode (41 @ 66) (20)Px41y67 { Px41y68, Px40y67, Px41y66, Px42y67 } CellNode (41 @ 67) (20)Px41y68 { Px41y67, Px42y68 } CellNode (41 @ 68) (20)Px41y7 { Px41y8, Px42y7 } CellNode (41 @ 7) (20)Px41y8 { Px42y8, Px40y8, Px41y9, Px41y7 } CellNode (41 @ 8) (20)Px41y9 { Px41y8, Px42y9, Px41y10, Px40y9 } CellNode (41 @ 9) (20)Px42y10 { Px42y9, Px42y11, Px41y10, Px43y10 } CellNode (42 @ 10) (20)Px42y11 { Px43y11, Px42y10, Px42y12, Px41y11 } CellNode (42 @ 11) (20)Px42y12 { Px42y11, Px43y12, Px42y13 } CellNode (42 @ 12) (20)Px42y13 { Px43y13, Px41y13, Px42y14, Px42y12 } CellNode (42 @ 13) (20)Px42y14 { Px42y13, Px43y14, Px41y14, Px42y15 } CellNode (42 @ 14) (20)Px42y15 { Px42y16, Px41y15, Px42y14, Px43y15 } CellNode (42 @ 15) (20)Px42y16 { Px42y15 } CellNode (42 @ 16) (20)Px42y26 { Px42y27, Px43y26, Px41y26 } CellNode (42 @ 26) (20)Px42y27 { Px43y27, Px42y26, Px41y27, Px42y28 } CellNode (42 @ 27) (20)Px42y28 { Px42y29, Px43y28, Px41y28, Px42y27 } CellNode (42 @ 28) (20)Px42y29 { Px41y29, Px42y30, Px43y29, Px42y28 } CellNode (42 @ 29) (20)Px42y30 { Px42y29, Px43y30, Px41y30, Px42y31 } CellNode (42 @ 30) (20)Px42y31 { Px42y30, Px43y31 } CellNode (42 @ 31) (20)Px42y5 { Px42y6, Px43y5 } CellNode (42 @ 5) (20)Px42y55 { Px43y55, Px42y56 } CellNode (42 @ 55) (20)Px42y56 { Px42y57, Px42y55, Px43y56 } CellNode (42 @ 56) (20)Px42y57 { Px42y58, Px43y57, Px42y56 } CellNode (42 @ 57) (20)Px42y58 { Px42y57, Px43y58, Px42y59 } CellNode (42 @ 58) (20)Px42y59 { Px42y60, Px43y59, Px41y59, Px42y58 } CellNode (42 @ 59) (20)Px42y6 { Px42y7, Px43y6, Px42y5 } CellNode (42 @ 6) (20)Px42y60 { Px42y59, Px43y60, Px41y60, Px42y61 } CellNode (42 @ 60) (20)Px42y61 { Px41y61, Px42y60, Px43y61, Px42y62 } CellNode (42 @ 61) (20)Px42y62 { Px42y61, Px41y62, Px42y63 } CellNode (42 @ 62) (20)Px42y63 { Px41y63, Px42y62 } CellNode (42 @ 63) (20)Px42y66 { Px41y66, Px42y67 } CellNode (42 @ 66) (20)Px42y67 { Px42y68, Px43y67, Px41y67, Px42y66 } CellNode (42 @ 67) (20)Px42y68 { Px41y68, Px42y69, Px43y68, Px42y67 } CellNode (42 @ 68) (20)Px42y69 { Px43y69, Px42y70, Px42y68 } CellNode (42 @ 69) (20)Px42y7 { Px42y8, Px42y6, Px43y7, Px41y7 } CellNode (42 @ 7) (20)Px42y70 { Px42y69, Px43y70 } CellNode (42 @ 70) (20)Px42y8 { Px42y9, Px42y7, Px41y8 } CellNode (42 @ 8) (20)Px42y9 { Px43y9, Px42y8, Px41y9, Px42y10 } CellNode (42 @ 9) (20)Px43y10 { Px43y9, Px44y10, Px42y10, Px43y11 } CellNode (43 @ 10) (20)Px43y11 { Px43y12, Px44y11, Px42y11, Px43y10 } CellNode (43 @ 11) (20)Px43y12 { Px43y13, Px44y12, Px43y11, Px42y12 } CellNode (43 @ 12) (20)Px43y13 { Px43y12, Px42y13, Px43y14, Px44y13 } CellNode (43 @ 13) (20)Px43y14 { Px44y14, Px42y14, Px43y13, Px43y15 } CellNode (43 @ 14) (20)Px43y15 { Px43y14, Px44y15, Px42y15 } CellNode (43 @ 15) (20)Px43y26 { Px43y27, Px42y26 } CellNode (43 @ 26) (20)Px43y27 { Px42y27, Px43y26, Px43y28 } CellNode (43 @ 27) (20)Px43y28 { Px42y28, Px43y27, Px43y29 } CellNode (43 @ 28) (20)Px43y29 { Px42y29, Px43y28, Px43y30 } CellNode (43 @ 29) (20)Px43y30 { Px44y30, Px42y30, Px43y29, Px43y31 } CellNode (43 @ 30) (20)Px43y31 { Px43y32, Px44y31, Px43y30, Px42y31 } CellNode (43 @ 31) (20)Px43y32 { Px44y32, Px43y31 } CellNode (43 @ 32) (20)Px43y4 { Px43y5, Px44y4 } CellNode (43 @ 4) (20)Px43y5 { Px43y6, Px42y5, Px44y5, Px43y4 } CellNode (43 @ 5) (20)Px43y52 { Px43y53, Px44y52 } CellNode (43 @ 52) (20)Px43y53 { Px43y54, Px44y53, Px43y52 } CellNode (43 @ 53) (20)Px43y54 { Px43y55, Px43y53, Px44y54 } CellNode (43 @ 54) (20)Px43y55 { Px42y55, Px43y56, Px44y55, Px43y54 } CellNode (43 @ 55) (20)Px43y56 { Px44y56, Px43y55, Px42y56, Px43y57 } CellNode (43 @ 56) (20)Px43y57 { Px43y58, Px44y57, Px42y57, Px43y56 } CellNode (43 @ 57) (20)Px43y58 { Px43y59, Px44y58, Px42y58, Px43y57 } CellNode (43 @ 58) (20)Px43y59 { Px43y58, Px42y59, Px43y60, Px44y59 } CellNode (43 @ 59) (20)Px43y6 { Px43y5, Px42y6, Px43y7, Px44y6 } CellNode (43 @ 6) (20)Px43y60 { Px42y60, Px43y59, Px44y60, Px43y61 } CellNode (43 @ 60) (20)Px43y61 { Px44y61, Px43y60, Px42y61 } CellNode (43 @ 61) (20)Px43y67 { Px44y67, Px43y68, Px42y67 } CellNode (43 @ 67) (20)Px43y68 { Px44y68, Px42y68, Px43y69, Px43y67 } CellNode (43 @ 68) (20)Px43y69 { Px44y69, Px42y69, Px43y68, Px43y70 } CellNode (43 @ 69) (20)Px43y7 { Px43y6, Px42y7 } CellNode (43 @ 7) (20)Px43y70 { Px43y69, Px42y70, Px44y70 } CellNode (43 @ 70) (20)Px43y9 { Px42y9, Px43y10, Px44y9 } CellNode (43 @ 9) (20)Px44y10 { Px45y10, Px44y11, Px43y10, Px44y9 } CellNode (44 @ 10) (20)Px44y11 { Px44y10, Px45y11, Px44y12, Px43y11 } CellNode (44 @ 11) (20)Px44y12 { Px45y12, Px43y12, Px44y11, Px44y13 } CellNode (44 @ 12) (20)Px44y13 { Px45y13, Px44y14, Px43y13, Px44y12 } CellNode (44 @ 13) (20)Px44y14 { Px44y15, Px43y14, Px45y14, Px44y13 } CellNode (44 @ 14) (20)Px44y15 { Px44y16, Px44y14, Px45y15, Px43y15 } CellNode (44 @ 15) (20)Px44y16 { Px45y16, Px44y15 } CellNode (44 @ 16) (20)Px44y30 { Px43y30, Px44y31 } CellNode (44 @ 30) (20)Px44y31 { Px44y32, Px44y30, Px43y31 } CellNode (44 @ 31) (20)Px44y32 { Px43y32, Px44y31 } CellNode (44 @ 32) (20)Px44y4 { Px43y4, Px44y5, Px45y4 } CellNode (44 @ 4) (20)Px44y44 { Px45y44 } CellNode (44 @ 44) (20)Px44y5 { Px43y5, Px44y4, Px45y5, Px44y6 } CellNode (44 @ 5) (20)Px44y52 { Px43y52, Px45y52, Px44y53 } CellNode (44 @ 52) (20)Px44y53 { Px45y53, Px43y53, Px44y54, Px44y52 } CellNode (44 @ 53) (20)Px44y54 { Px44y55, Px44y53, Px45y54, Px43y54 } CellNode (44 @ 54) (20)Px44y55 { Px43y55, Px44y54, Px44y56 } CellNode (44 @ 55) (20)Px44y56 { Px43y56, Px44y55, Px44y57 } CellNode (44 @ 56) (20)Px44y57 { Px43y57, Px44y56, Px44y58 } CellNode (44 @ 57) (20)Px44y58 { Px43y58, Px45y58, Px44y57, Px44y59 } CellNode (44 @ 58) (20)Px44y59 { Px45y59, Px43y59, Px44y58, Px44y60 } CellNode (44 @ 59) (20)Px44y6 { Px43y6, Px44y5 } CellNode (44 @ 6) (20)Px44y60 { Px44y61, Px45y60, Px43y60, Px44y59 } CellNode (44 @ 60) (20)Px44y61 { Px44y62, Px45y61, Px43y61, Px44y60 } CellNode (44 @ 61) (20)Px44y62 { Px45y62, Px44y61 } CellNode (44 @ 62) (20)Px44y67 { Px43y67, Px44y68, Px45y67 } CellNode (44 @ 67) (20)Px44y68 { Px44y69, Px45y68, Px44y67, Px43y68 } CellNode (44 @ 68) (20)Px44y69 { Px44y68, Px43y69, Px44y70, Px45y69 } CellNode (44 @ 69) (20)Px44y70 { Px44y69, Px43y70 } CellNode (44 @ 70) (20)Px44y9 { Px43y9, Px44y10, Px45y9 } CellNode (44 @ 9) (20)Px45y10 { Px44y10, Px45y9, Px46y10, Px45y11 } CellNode (45 @ 10) (20)Px45y11 { Px45y12, Px45y10, Px44y11, Px46y11 } CellNode (45 @ 11) (20)Px45y12 { Px45y13, Px46y12, Px45y11, Px44y12 } CellNode (45 @ 12) (20)Px45y13 { Px45y14, Px44y13, Px45y12 } CellNode (45 @ 13) (20)Px45y14 { Px45y15, Px44y14, Px45y13 } CellNode (45 @ 14) (20)Px45y15 { Px45y14, Px45y16, Px44y15 } CellNode (45 @ 15) (20)Px45y16 { Px44y16, Px45y15 } CellNode (45 @ 16) (20)Px45y3 { Px46y3, Px45y4 } CellNode (45 @ 3) (20)Px45y4 { Px44y4, Px45y5, Px45y3, Px46y4 } CellNode (45 @ 4) (20)Px45y42 { Px45y43, Px46y42 } CellNode (45 @ 42) (20)Px45y43 { Px46y43, Px45y44, Px45y42 } CellNode (45 @ 43) (20)Px45y44 { Px45y43, Px46y44, Px44y44, Px45y45 } CellNode (45 @ 44) (20)Px45y45 { Px46y45, Px45y44, Px45y46 } CellNode (45 @ 45) (20)Px45y46 { Px45y47, Px45y45, Px46y46 } CellNode (45 @ 46) (20)Px45y47 { Px45y46, Px46y47 } CellNode (45 @ 47) (20)Px45y5 { Px46y5, Px44y5, Px45y4 } CellNode (45 @ 5) (20)Px45y50 { Px46y50, Px45y51 } CellNode (45 @ 50) (20)Px45y51 { Px45y50, Px45y52, Px46y51 } CellNode (45 @ 51) (20)Px45y52 { Px45y51, Px45y53, Px46y52, Px44y52 } CellNode (45 @ 52) (20)Px45y53 { Px46y53, Px44y53, Px45y52, Px45y54 } CellNode (45 @ 53) (20)Px45y54 { Px45y53, Px44y54, Px46y54 } CellNode (45 @ 54) (20)Px45y58 { Px45y59, Px44y58 } CellNode (45 @ 58) (20)Px45y59 { Px45y60, Px44y59, Px45y58 } CellNode (45 @ 59) (20)Px45y60 { Px44y60, Px45y61, Px45y59 } CellNode (45 @ 60) (20)Px45y61 { Px44y61, Px45y62, Px45y60, Px46y61 } CellNode (45 @ 61) (20)Px45y62 { Px45y63, Px44y62, Px46y62, Px45y61 } CellNode (45 @ 62) (20)Px45y63 { Px45y62, Px45y64, Px46y63 } CellNode (45 @ 63) (20)Px45y64 { Px46y64, Px45y63 } CellNode (45 @ 64) (20)Px45y66 { Px46y66, Px45y67 } CellNode (45 @ 66) (20)Px45y67 { Px45y66, Px45y68, Px44y67, Px46y67 } CellNode (45 @ 67) (20)Px45y68 { Px44y68, Px46y68, Px45y67, Px45y69 } CellNode (45 @ 68) (20)Px45y69 { Px45y68, Px44y69 } CellNode (45 @ 69) (20)Px45y8 { Px45y9, Px46y8 } CellNode (45 @ 8) (20)Px45y9 { Px46y9, Px45y10, Px45y8, Px44y9 } CellNode (45 @ 9) (20)Px46y10 { Px46y9, Px45y10, Px46y11 } CellNode (46 @ 10) (20)Px46y11 { Px46y12, Px47y11, Px46y10, Px45y11 } CellNode (46 @ 11) (20)Px46y12 { Px45y12, Px46y11, Px47y12 } CellNode (46 @ 12) (20)Px46y2 { Px46y3, Px47y2 } CellNode (46 @ 2) (20)Px46y3 { Px47y3, Px46y2, Px45y3, Px46y4 } CellNode (46 @ 3) (20)Px46y4 { Px46y3, Px46y5, Px45y4 } CellNode (46 @ 4) (20)Px46y41 { Px47y41, Px46y42 } CellNode (46 @ 41) (20)Px46y42 { Px47y42, Px46y43, Px46y41, Px45y42 } CellNode (46 @ 42) (20)Px46y43 { Px45y43, Px46y42, Px46y44, Px47y43 } CellNode (46 @ 43) (20)Px46y44 { Px47y44, Px46y43, Px45y44, Px46y45 } CellNode (46 @ 44) (20)Px46y45 { Px46y46, Px47y45, Px46y44, Px45y45 } CellNode (46 @ 45) (20)Px46y46 { Px46y45, Px47y46, Px46y47, Px45y46 } CellNode (46 @ 46) (20)Px46y47 { Px46y46, Px45y47 } CellNode (46 @ 47) (20)Px46y5 { Px45y5, Px46y4 } CellNode (46 @ 5) (20)Px46y50 { Px45y50, Px46y51, Px47y50 } CellNode (46 @ 50) (20)Px46y51 { Px45y51, Px46y50, Px46y52, Px47y51 } CellNode (46 @ 51) (20)Px46y52 { Px46y53, Px45y52, Px47y52, Px46y51 } CellNode (46 @ 52) (20)Px46y53 { Px47y53, Px45y53, Px46y54, Px46y52 } CellNode (46 @ 53) (20)Px46y54 { Px46y53, Px47y54, Px45y54, Px46y55 } CellNode (46 @ 54) (20)Px46y55 { Px46y54, Px47y55 } CellNode (46 @ 55) (20)Px46y61 { Px45y61, Px46y62 } CellNode (46 @ 61) (20)Px46y62 { Px46y61, Px45y62, Px46y63 } CellNode (46 @ 62) (20)Px46y63 { Px47y63, Px45y63, Px46y62, Px46y64 } CellNode (46 @ 63) (20)Px46y64 { Px46y65, Px47y64, Px45y64, Px46y63 } CellNode (46 @ 64) (20)Px46y65 { Px46y64, Px47y65, Px46y66 } CellNode (46 @ 65) (20)Px46y66 { Px46y65, Px45y66, Px46y67, Px47y66 } CellNode (46 @ 66) (20)Px46y67 { Px46y68, Px46y66, Px45y67 } CellNode (46 @ 67) (20)Px46y68 { Px45y68, Px46y67 } CellNode (46 @ 68) (20)Px46y8 { Px46y9, Px45y8 } CellNode (46 @ 8) (20)Px46y9 { Px46y8, Px46y10, Px45y9 } CellNode (46 @ 9) (20)Px47y1 { Px47y2, Px48y1 } CellNode (47 @ 1) (20)Px47y11 { Px46y11, Px47y12 } CellNode (47 @ 11) (20)Px47y12 { Px46y12, Px47y11 } CellNode (47 @ 12) (20)Px47y2 { Px47y3, Px46y2, Px48y2, Px47y1 } CellNode (47 @ 2) (20)Px47y3 { Px46y3, Px47y2, Px48y3 } CellNode (47 @ 3) (20)Px47y39 { Px48y39, Px47y40 } CellNode (47 @ 39) (20)Px47y40 { Px48y40, Px47y39, Px47y41 } CellNode (47 @ 40) (20)Px47y41 { Px47y42, Px48y41, Px47y40, Px46y41 } CellNode (47 @ 41) (20)Px47y42 { Px46y42, Px47y41, Px47y43, Px48y42 } CellNode (47 @ 42) (20)Px47y43 { Px47y42, Px46y43, Px47y44 } CellNode (47 @ 43) (20)Px47y44 { Px47y45, Px47y43, Px46y44 } CellNode (47 @ 44) (20)Px47y45 { Px47y44, Px47y46, Px48y45, Px46y45 } CellNode (47 @ 45) (20)Px47y46 { Px48y46, Px47y45, Px46y46 } CellNode (47 @ 46) (20)Px47y49 { Px48y49, Px47y50 } CellNode (47 @ 49) (20)Px47y50 { Px46y50, Px47y49, Px48y50, Px47y51 } CellNode (47 @ 50) (20)Px47y51 { Px47y50, Px46y51, Px47y52 } CellNode (47 @ 51) (20)Px47y52 { Px48y52, Px47y53, Px47y51, Px46y52 } CellNode (47 @ 52) (20)Px47y53 { Px46y53, Px47y52, Px47y54, Px48y53 } CellNode (47 @ 53) (20)Px47y54 { Px48y54, Px46y54, Px47y53, Px47y55 } CellNode (47 @ 54) (20)Px47y55 { Px48y55, Px47y54, Px46y55 } CellNode (47 @ 55) (20)Px47y63 { Px46y63, Px47y64 } CellNode (47 @ 63) (20)Px47y64 { Px47y63, Px47y65, Px46y64, Px48y64 } CellNode (47 @ 64) (20)Px47y65 { Px46y65, Px48y65, Px47y64, Px47y66 } CellNode (47 @ 65) (20)Px47y66 { Px46y66, Px47y65, Px48y66 } CellNode (47 @ 66) (20)Px48y1 { Px47y1, Px48y2, Px49y1 } CellNode (48 @ 1) (20)Px48y2 { Px48y3, Px49y2, Px48y1, Px47y2 } CellNode (48 @ 2) (20)Px48y3 { Px47y3, Px48y2 } CellNode (48 @ 3) (20)Px48y38 { Px49y38, Px48y39 } CellNode (48 @ 38) (20)Px48y39 { Px48y38, Px48y40, Px49y39, Px47y39 } CellNode (48 @ 39) (20)Px48y40 { Px48y39, Px49y40, Px47y40, Px48y41 } CellNode (48 @ 40) (20)Px48y41 { Px48y42, Px47y41, Px48y40, Px49y41 } CellNode (48 @ 41) (20)Px48y42 { Px48y41, Px49y42, Px47y42 } CellNode (48 @ 42) (20)Px48y45 { Px47y45, Px48y46 } CellNode (48 @ 45) (20)Px48y46 { Px49y46, Px47y46, Px48y47, Px48y45 } CellNode (48 @ 46) (20)Px48y47 { Px48y48, Px48y46, Px49y47 } CellNode (48 @ 47) (20)Px48y48 { Px48y49, Px49y48, Px48y47 } CellNode (48 @ 48) (20)Px48y49 { Px49y49, Px47y49, Px48y48, Px48y50 } CellNode (48 @ 49) (20)Px48y50 { Px48y49, Px47y50 } CellNode (48 @ 50) (20)Px48y52 { Px47y52, Px48y53 } CellNode (48 @ 52) (20)Px48y53 { Px49y53, Px47y53, Px48y52, Px48y54 } CellNode (48 @ 53) (20)Px48y54 { Px48y55, Px49y54, Px47y54, Px48y53 } CellNode (48 @ 54) (20)Px48y55 { Px49y55, Px47y55, Px48y54 } CellNode (48 @ 55) (20)Px48y64 { Px47y64, Px48y65, Px49y64 } CellNode (48 @ 64) (20)Px48y65 { Px49y65, Px48y66, Px47y65, Px48y64 } CellNode (48 @ 65) (20)Px48y66 { Px48y65, Px49y66, Px48y67, Px47y66 } CellNode (48 @ 66) (20)Px48y67 { Px48y66, Px49y67 } CellNode (48 @ 67) (20)Px49y1 { Px48y1, Px49y2, Px50y1 } CellNode (49 @ 1) (20)Px49y2 { Px48y2, Px49y1, Px50y2 } CellNode (49 @ 2) (20)Px49y38 { Px48y38, Px49y39, Px50y38 } CellNode (49 @ 38) (20)Px49y39 { Px50y39, Px48y39, Px49y38, Px49y40 } CellNode (49 @ 39) (20)Px49y40 { Px50y40, Px48y40, Px49y39, Px49y41 } CellNode (49 @ 40) (20)Px49y41 { Px49y42, Px50y41, Px49y40, Px48y41 } CellNode (49 @ 41) (20)Px49y42 { Px49y41, Px48y42, Px50y42 } CellNode (49 @ 42) (20)Px49y46 { Px48y46, Px49y47 } CellNode (49 @ 46) (20)Px49y47 { Px49y46, Px49y48, Px48y47 } CellNode (49 @ 47) (20)Px49y48 { Px49y47, Px49y49, Px48y48 } CellNode (49 @ 48) (20)Px49y49 { Px49y48, Px48y49 } CellNode (49 @ 49) (20)Px49y53 { Px50y53, Px48y53, Px49y54 } CellNode (49 @ 53) (20)Px49y54 { Px49y55, Px49y53, Px50y54, Px48y54 } CellNode (49 @ 54) (20)Px49y55 { Px50y55, Px48y55, Px49y54 } CellNode (49 @ 55) (20)Px49y64 { Px48y64, Px49y65, Px50y64 } CellNode (49 @ 64) (20)Px49y65 { Px49y64, Px49y66, Px50y65, Px48y65 } CellNode (49 @ 65) (20)Px49y66 { Px50y66, Px49y65, Px48y66, Px49y67 } CellNode (49 @ 66) (20)Px49y67 { Px48y67, Px49y66, Px50y67 } CellNode (49 @ 67) (20)Px4y54 { Px5y54, Px4y55 } CellNode (4 @ 54) (20)Px4y55 { Px4y56, Px4y54, Px5y55 } CellNode (4 @ 55) (20)Px4y56 { Px4y57, Px4y55, Px5y56 } CellNode (4 @ 56) (20)Px4y57 { Px4y56 } CellNode (4 @ 57) (20)Px4y70 { Px5y70, Px4y71 } CellNode (4 @ 70) (20)Px4y71 { Px5y71, Px3y71, Px4y72, Px4y70 } CellNode (4 @ 71) (20)Px4y72 { Px4y71, Px5y72, Px3y72, Px4y73 } CellNode (4 @ 72) (20)Px4y73 { Px3y73, Px5y73, Px4y72 } CellNode (4 @ 73) (20)Px50y1 { Px51y1, Px49y1, Px50y2 } CellNode (50 @ 1) (20)Px50y2 { Px51y2, Px49y2, Px50y1 } CellNode (50 @ 2) (20)Px50y38 { Px49y38, Px50y39, Px51y38 } CellNode (50 @ 38) (20)Px50y39 { Px49y39, Px50y38, Px50y40 } CellNode (50 @ 39) (20)Px50y40 { Px50y39, Px51y40, Px49y40, Px50y41 } CellNode (50 @ 40) (20)Px50y41 { Px50y42, Px50y40, Px51y41, Px49y41 } CellNode (50 @ 41) (20)Px50y42 { Px51y42, Px49y42, Px50y43, Px50y41 } CellNode (50 @ 42) (20)Px50y43 { Px50y44, Px50y42, Px51y43 } CellNode (50 @ 43) (20)Px50y44 { Px51y44, Px50y43 } CellNode (50 @ 44) (20)Px50y53 { Px50y54, Px51y53, Px49y53 } CellNode (50 @ 53) (20)Px50y54 { Px50y55, Px51y54, Px50y53, Px49y54 } CellNode (50 @ 54) (20)Px50y55 { Px50y54, Px51y55, Px49y55 } CellNode (50 @ 55) (20)Px50y63 { Px51y63, Px50y64 } CellNode (50 @ 63) (20)Px50y64 { Px49y64, Px50y63, Px50y65, Px51y64 } CellNode (50 @ 64) (20)Px50y65 { Px50y66, Px51y65, Px49y65, Px50y64 } CellNode (50 @ 65) (20)Px50y66 { Px50y67, Px49y66, Px51y66, Px50y65 } CellNode (50 @ 66) (20)Px50y67 { Px51y67, Px49y67, Px50y66 } CellNode (50 @ 67) (20)Px51y1 { Px51y2, Px52y1, Px50y1 } CellNode (51 @ 1) (20)Px51y2 { Px51y1, Px52y2, Px50y2 } CellNode (51 @ 2) (20)Px51y38 { Px50y38 } CellNode (51 @ 38) (20)Px51y40 { Px51y41, Px50y40 } CellNode (51 @ 40) (20)Px51y41 { Px51y42, Px51y40, Px50y41 } CellNode (51 @ 41) (20)Px51y42 { Px51y43, Px52y42, Px51y41, Px50y42 } CellNode (51 @ 42) (20)Px51y43 { Px51y42, Px50y43, Px51y44 } CellNode (51 @ 43) (20)Px51y44 { Px52y44, Px50y44, Px51y43, Px51y45 } CellNode (51 @ 44) (20)Px51y45 { Px51y44, Px52y45 } CellNode (51 @ 45) (20)Px51y53 { Px50y53, Px51y54, Px52y53 } CellNode (51 @ 53) (20)Px51y54 { Px51y53, Px52y54, Px50y54, Px51y55 } CellNode (51 @ 54) (20)Px51y55 { Px50y55, Px51y54, Px52y55 } CellNode (51 @ 55) (20)Px51y62 { Px52y62, Px51y63 } CellNode (51 @ 62) (20)Px51y63 { Px52y63, Px51y62, Px50y63, Px51y64 } CellNode (51 @ 63) (20)Px51y64 { Px51y65, Px52y64, Px51y63, Px50y64 } CellNode (51 @ 64) (20)Px51y65 { Px51y66, Px52y65, Px50y65, Px51y64 } CellNode (51 @ 65) (20)Px51y66 { Px50y66, Px51y65, Px51y67, Px52y66 } CellNode (51 @ 66) (20)Px51y67 { Px51y66, Px50y67 } CellNode (51 @ 67) (20)Px52y1 { Px51y1, Px52y2, Px53y1 } CellNode (52 @ 1) (20)Px52y2 { Px51y2, Px52y1, Px53y2 } CellNode (52 @ 2) (20)Px52y42 { Px51y42 } CellNode (52 @ 42) (20)Px52y44 { Px51y44, Px52y45, Px53y44 } CellNode (52 @ 44) (20)Px52y45 { Px51y45, Px52y44, Px53y45, Px52y46 } CellNode (52 @ 45) (20)Px52y46 { Px52y45, Px53y46 } CellNode (52 @ 46) (20)Px52y53 { Px51y53, Px52y54, Px53y53 } CellNode (52 @ 53) (20)Px52y54 { Px53y54, Px51y54, Px52y53, Px52y55 } CellNode (52 @ 54) (20)Px52y55 { Px52y54, Px53y55, Px51y55 } CellNode (52 @ 55) (20)Px52y62 { Px53y62, Px52y63, Px51y62 } CellNode (52 @ 62) (20)Px52y63 { Px53y63, Px51y63, Px52y64, Px52y62 } CellNode (52 @ 63) (20)Px52y64 { Px52y63, Px52y65, Px53y64, Px51y64 } CellNode (52 @ 64) (20)Px52y65 { Px52y66, Px51y65, Px52y64, Px53y65 } CellNode (52 @ 65) (20)Px52y66 { Px52y65, Px53y66, Px51y66 } CellNode (52 @ 66) (20)Px53y1 { Px52y1, Px53y2, Px54y1 } CellNode (53 @ 1) (20)Px53y2 { Px52y2, Px53y1, Px54y2 } CellNode (53 @ 2) (20)Px53y4 { Px54y4, Px53y5 } CellNode (53 @ 4) (20)Px53y44 { Px52y44, Px53y45 } CellNode (53 @ 44) (20)Px53y45 { Px53y46, Px54y45, Px52y45, Px53y44 } CellNode (53 @ 45) (20)Px53y46 { Px53y47, Px54y46, Px52y46, Px53y45 } CellNode (53 @ 46) (20)Px53y47 { Px54y47, Px53y46 } CellNode (53 @ 47) (20)Px53y5 { Px53y4, Px54y5 } CellNode (53 @ 5) (20)Px53y53 { Px52y53, Px53y54 } CellNode (53 @ 53) (20)Px53y54 { Px53y55, Px52y54, Px54y54, Px53y53 } CellNode (53 @ 54) (20)Px53y55 { Px52y55, Px53y54, Px54y55 } CellNode (53 @ 55) (20)Px53y59 { Px54y59, Px53y60 } CellNode (53 @ 59) (20)Px53y60 { Px53y61, Px54y60, Px53y59 } CellNode (53 @ 60) (20)Px53y61 { Px53y60, Px54y61, Px53y62 } CellNode (53 @ 61) (20)Px53y62 { Px53y63, Px54y62, Px52y62, Px53y61 } CellNode (53 @ 62) (20)Px53y63 { Px53y62, Px52y63, Px53y64, Px54y63 } CellNode (53 @ 63) (20)Px53y64 { Px54y64, Px52y64, Px53y63, Px53y65 } CellNode (53 @ 64) (20)Px53y65 { Px53y66, Px54y65, Px52y65, Px53y64 } CellNode (53 @ 65) (20)Px53y66 { Px53y65, Px54y66, Px52y66 } CellNode (53 @ 66) (20)Px54y1 { Px53y1, Px54y2 } CellNode (54 @ 1) (20)Px54y2 { Px54y3, Px53y2, Px55y2, Px54y1 } CellNode (54 @ 2) (20)Px54y3 { Px54y4, Px54y2, Px55y3 } CellNode (54 @ 3) (20)Px54y4 { Px53y4, Px55y4, Px54y3, Px54y5 } CellNode (54 @ 4) (20)Px54y45 { Px54y46, Px53y45, Px55y45 } CellNode (54 @ 45) (20)Px54y46 { Px55y46, Px53y46, Px54y45, Px54y47 } CellNode (54 @ 46) (20)Px54y47 { Px54y46, Px53y47, Px55y47 } CellNode (54 @ 47) (20)Px54y5 { Px53y5, Px54y4, Px55y5 } CellNode (54 @ 5) (20)Px54y54 { Px53y54, Px55y54, Px54y55 } CellNode (54 @ 54) (20)Px54y55 { Px53y55, Px55y55, Px54y54 } CellNode (54 @ 55) (20)Px54y58 { Px54y59, Px55y58 } CellNode (54 @ 58) (20)Px54y59 { Px54y60, Px55y59, Px54y58, Px53y59 } CellNode (54 @ 59) (20)Px54y60 { Px55y60, Px53y60, Px54y61, Px54y59 } CellNode (54 @ 60) (20)Px54y61 { Px54y60, Px54y62, Px53y61, Px55y61 } CellNode (54 @ 61) (20)Px54y62 { Px53y62, Px54y63, Px54y61, Px55y62 } CellNode (54 @ 62) (20)Px54y63 { Px55y63, Px53y63, Px54y64, Px54y62 } CellNode (54 @ 63) (20)Px54y64 { Px53y64, Px54y63, Px54y65 } CellNode (54 @ 64) (20)Px54y65 { Px53y65, Px54y66, Px54y64 } CellNode (54 @ 65) (20)Px54y66 { Px53y66, Px54y65 } CellNode (54 @ 66) (20)Px55y2 { Px56y2, Px54y2, Px55y3 } CellNode (55 @ 2) (20)Px55y3 { Px54y3, Px55y4, Px55y2, Px56y3 } CellNode (55 @ 3) (20)Px55y4 { Px55y3, Px56y4, Px55y5, Px54y4 } CellNode (55 @ 4) (20)Px55y45 { Px54y45, Px55y46, Px56y45 } CellNode (55 @ 45) (20)Px55y46 { Px56y46, Px55y47, Px55y45, Px54y46 } CellNode (55 @ 46) (20)Px55y47 { Px55y46, Px56y47, Px55y48, Px54y47 } CellNode (55 @ 47) (20)Px55y48 { Px55y47, Px56y48 } CellNode (55 @ 48) (20)Px55y5 { Px56y5, Px54y5, Px55y4 } CellNode (55 @ 5) (20)Px55y54 { Px55y55, Px54y54 } CellNode (55 @ 54) (20)Px55y55 { Px55y54, Px55y56, Px56y55, Px54y55 } CellNode (55 @ 55) (20)Px55y56 { Px55y57, Px56y56, Px55y55 } CellNode (55 @ 56) (20)Px55y57 { Px55y58, Px56y57, Px55y56 } CellNode (55 @ 57) (20)Px55y58 { Px55y59, Px56y58, Px54y58, Px55y57 } CellNode (55 @ 58) (20)Px55y59 { Px54y59, Px55y60, Px56y59, Px55y58 } CellNode (55 @ 59) (20)Px55y60 { Px54y60, Px55y59, Px55y61, Px56y60 } CellNode (55 @ 60) (20)Px55y61 { Px56y61, Px55y60, Px54y61, Px55y62 } CellNode (55 @ 61) (20)Px55y62 { Px56y62, Px55y63, Px54y62, Px55y61 } CellNode (55 @ 62) (20)Px55y63 { Px56y63, Px55y62, Px54y63 } CellNode (55 @ 63) (20)Px56y2 { Px56y3, Px55y2 } CellNode (56 @ 2) (20)Px56y20 { Px56y21 } CellNode (56 @ 20) (20)Px56y21 { Px56y20, Px57y21 } CellNode (56 @ 21) (20)Px56y3 { Px55y3, Px56y4, Px56y2, Px57y3 } CellNode (56 @ 3) (20)Px56y4 { Px55y4, Px56y5, Px56y3, Px57y4 } CellNode (56 @ 4) (20)Px56y45 { Px56y46, Px55y45 } CellNode (56 @ 45) (20)Px56y46 { Px55y46, Px56y47, Px57y46, Px56y45 } CellNode (56 @ 46) (20)Px56y47 { Px57y47, Px55y47, Px56y46, Px56y48 } CellNode (56 @ 47) (20)Px56y48 { Px57y48, Px55y48, Px56y47 } CellNode (56 @ 48) (20)Px56y5 { Px56y4, Px57y5, Px55y5 } CellNode (56 @ 5) (20)Px56y55 { Px56y56, Px55y55 } CellNode (56 @ 55) (20)Px56y56 { Px55y56, Px56y55, Px56y57 } CellNode (56 @ 56) (20)Px56y57 { Px55y57, Px56y56, Px56y58 } CellNode (56 @ 57) (20)Px56y58 { Px56y59, Px56y57, Px57y58, Px55y58 } CellNode (56 @ 58) (20)Px56y59 { Px57y59, Px55y59, Px56y58, Px56y60 } CellNode (56 @ 59) (20)Px56y60 { Px57y60, Px55y60, Px56y59, Px56y61 } CellNode (56 @ 60) (20)Px56y61 { Px56y62, Px56y60, Px55y61 } CellNode (56 @ 61) (20)Px56y62 { Px56y63, Px55y62, Px56y61 } CellNode (56 @ 62) (20)Px56y63 { Px56y62, Px55y63 } CellNode (56 @ 63) (20)Px57y21 { Px58y21, Px56y21 } CellNode (57 @ 21) (20)Px57y3 { Px57y4, Px56y3 } CellNode (57 @ 3) (20)Px57y4 { Px56y4, Px57y5, Px58y4, Px57y3 } CellNode (57 @ 4) (20)Px57y46 { Px56y46, Px57y47 } CellNode (57 @ 46) (20)Px57y47 { Px57y48, Px56y47, Px58y47, Px57y46 } CellNode (57 @ 47) (20)Px57y48 { Px57y47, Px58y48, Px56y48 } CellNode (57 @ 48) (20)Px57y5 { Px56y5, Px57y4, Px58y5 } CellNode (57 @ 5) (20)Px57y58 { Px57y59, Px56y58 } CellNode (57 @ 58) (20)Px57y59 { Px57y60, Px58y59, Px57y58, Px56y59 } CellNode (57 @ 59) (20)Px57y60 { Px56y60, Px58y60, Px57y59 } CellNode (57 @ 60) (20)Px58y10 { Px59y10, Px58y11 } CellNode (58 @ 10) (20)Px58y11 { Px59y11, Px58y10 } CellNode (58 @ 11) (20)Px58y20 { Px58y21, Px59y20 } CellNode (58 @ 20) (20)Px58y21 { Px58y20, Px57y21, Px59y21 } CellNode (58 @ 21) (20)Px58y4 { Px57y4, Px58y5 } CellNode (58 @ 4) (20)Px58y43 { Px58y44, Px59y43 } CellNode (58 @ 43) (20)Px58y44 { Px58y43, Px59y44, Px58y45 } CellNode (58 @ 44) (20)Px58y45 { Px59y45, Px58y44 } CellNode (58 @ 45) (20)Px58y47 { Px57y47, Px59y47, Px58y48 } CellNode (58 @ 47) (20)Px58y48 { Px57y48, Px59y48, Px58y47 } CellNode (58 @ 48) (20)Px58y5 { Px57y5, Px58y6, Px58y4, Px59y5 } CellNode (58 @ 5) (20)Px58y59 { Px57y59, Px58y60 } CellNode (58 @ 59) (20)Px58y6 { Px58y7, Px59y6, Px58y5 } CellNode (58 @ 6) (20)Px58y60 { Px59y60, Px57y60, Px58y59, Px58y61 } CellNode (58 @ 60) (20)Px58y61 { Px58y62, Px59y61, Px58y60 } CellNode (58 @ 61) (20)Px58y62 { Px58y61, Px59y62 } CellNode (58 @ 62) (20)Px58y7 { Px59y7, Px58y6 } CellNode (58 @ 7) (20)Px59y10 { Px59y11, Px60y10, Px58y10, Px59y9 } CellNode (59 @ 10) (20)Px59y11 { Px58y11, Px59y10, Px60y11 } CellNode (59 @ 11) (20)Px59y20 { Px60y20, Px58y20, Px59y21 } CellNode (59 @ 20) (20)Px59y21 { Px60y21, Px58y21, Px59y22, Px59y20 } CellNode (59 @ 21) (20)Px59y22 { Px60y22, Px59y23, Px59y21 } CellNode (59 @ 22) (20)Px59y23 { Px60y23, Px59y22 } CellNode (59 @ 23) (20)Px59y42 { Px60y42, Px59y43 } CellNode (59 @ 42) (20)Px59y43 { Px60y43, Px58y43, Px59y44, Px59y42 } CellNode (59 @ 43) (20)Px59y44 { Px60y44, Px59y45, Px58y44, Px59y43 } CellNode (59 @ 44) (20)Px59y45 { Px59y44, Px60y45, Px59y46, Px58y45 } CellNode (59 @ 45) (20)Px59y46 { Px59y47, Px60y46, Px59y45 } CellNode (59 @ 46) (20)Px59y47 { Px59y48, Px60y47, Px58y47, Px59y46 } CellNode (59 @ 47) (20)Px59y48 { Px59y47, Px58y48 } CellNode (59 @ 48) (20)Px59y5 { Px59y6, Px58y5 } CellNode (59 @ 5) (20)Px59y6 { Px58y6, Px59y7, Px59y5, Px60y6 } CellNode (59 @ 6) (20)Px59y60 { Px58y60, Px59y61, Px60y60 } CellNode (59 @ 60) (20)Px59y61 { Px59y60, Px59y62, Px60y61, Px58y61 } CellNode (59 @ 61) (20)Px59y62 { Px58y62, Px59y61, Px60y62 } CellNode (59 @ 62) (20)Px59y65 { Px60y65, Px59y66 } CellNode (59 @ 65) (20)Px59y66 { Px59y65, Px59y67, Px60y66 } CellNode (59 @ 66) (20)Px59y67 { Px60y67, Px59y68, Px59y66 } CellNode (59 @ 67) (20)Px59y68 { Px60y68, Px59y67 } CellNode (59 @ 68) (20)Px59y7 { Px58y7, Px59y8, Px59y6, Px60y7 } CellNode (59 @ 7) (20)Px59y8 { Px59y7, Px59y9, Px60y8 } CellNode (59 @ 8) (20)Px59y9 { Px59y10, Px59y8, Px60y9 } CellNode (59 @ 9) (20)Px5y53 { Px6y53, Px5y54 } CellNode (5 @ 53) (20)Px5y54 { Px5y53, Px4y54, Px5y55 } CellNode (5 @ 54) (20)Px5y55 { Px5y56, Px4y55, Px5y54 } CellNode (5 @ 55) (20)Px5y56 { Px5y55, Px4y56 } CellNode (5 @ 56) (20)Px5y58 { Px6y58 } CellNode (5 @ 58) (20)Px5y69 { Px6y69, Px5y70 } CellNode (5 @ 69) (20)Px5y70 { Px5y71, Px6y70, Px4y70, Px5y69 } CellNode (5 @ 70) (20)Px5y71 { Px5y70, Px4y71, Px5y72, Px6y71 } CellNode (5 @ 71) (20)Px5y72 { Px6y72, Px5y71, Px4y72, Px5y73 } CellNode (5 @ 72) (20)Px5y73 { Px6y73, Px5y74, Px5y72, Px4y73 } CellNode (5 @ 73) (20)Px5y74 { Px5y73 } CellNode (5 @ 74) (20)Px60y10 { Px59y10, Px60y11, Px60y9, Px61y10 } CellNode (60 @ 10) (20)Px60y11 { Px59y11, Px60y10, Px61y11 } CellNode (60 @ 11) (20)Px60y17 { Px61y17 } CellNode (60 @ 17) (20)Px60y20 { Px60y21, Px61y20, Px59y20 } CellNode (60 @ 20) (20)Px60y21 { Px59y21, Px60y20, Px60y22, Px61y21 } CellNode (60 @ 21) (20)Px60y22 { Px60y21, Px60y23, Px59y22 } CellNode (60 @ 22) (20)Px60y23 { Px59y23, Px60y22 } CellNode (60 @ 23) (20)Px60y41 { Px61y41, Px60y42 } CellNode (60 @ 41) (20)Px60y42 { Px60y43, Px61y42, Px60y41, Px59y42 } CellNode (60 @ 42) (20)Px60y43 { Px60y44, Px61y43, Px59y43, Px60y42 } CellNode (60 @ 43) (20)Px60y44 { Px60y43, Px59y44, Px60y45, Px61y44 } CellNode (60 @ 44) (20)Px60y45 { Px59y45, Px60y44, Px60y46 } CellNode (60 @ 45) (20)Px60y46 { Px59y46, Px60y45, Px60y47 } CellNode (60 @ 46) (20)Px60y47 { Px60y46, Px59y47 } CellNode (60 @ 47) (20)Px60y6 { Px59y6, Px60y7 } CellNode (60 @ 6) (20)Px60y60 { Px59y60, Px60y61 } CellNode (60 @ 60) (20)Px60y61 { Px61y61, Px59y61, Px60y60, Px60y62 } CellNode (60 @ 61) (20)Px60y62 { Px60y63, Px61y62, Px59y62, Px60y61 } CellNode (60 @ 62) (20)Px60y63 { Px61y63, Px60y62, Px60y64 } CellNode (60 @ 63) (20)Px60y64 { Px61y64, Px60y63, Px60y65 } CellNode (60 @ 64) (20)Px60y65 { Px60y66, Px61y65, Px60y64, Px59y65 } CellNode (60 @ 65) (20)Px60y66 { Px60y67, Px61y66, Px60y65, Px59y66 } CellNode (60 @ 66) (20)Px60y67 { Px59y67, Px60y66, Px60y68, Px61y67 } CellNode (60 @ 67) (20)Px60y68 { Px61y68, Px59y68, Px60y67, Px60y69 } CellNode (60 @ 68) (20)Px60y69 { Px60y68, Px61y69 } CellNode (60 @ 69) (20)Px60y7 { Px60y8, Px59y7, Px60y6 } CellNode (60 @ 7) (20)Px60y8 { Px60y9, Px59y8, Px60y7 } CellNode (60 @ 8) (20)Px60y9 { Px60y8, Px61y9, Px60y10, Px59y9 } CellNode (60 @ 9) (20)Px61y10 { Px61y9, Px60y10, Px61y11 } CellNode (61 @ 10) (20)Px61y11 { Px61y10, Px62y11, Px61y12, Px60y11 } CellNode (61 @ 11) (20)Px61y12 { Px62y12, Px61y11, Px61y13 } CellNode (61 @ 12) (20)Px61y13 { Px61y14, Px62y13, Px61y12 } CellNode (61 @ 13) (20)Px61y14 { Px62y14, Px61y15, Px61y13 } CellNode (61 @ 14) (20)Px61y15 { Px61y14, Px62y15, Px61y16 } CellNode (61 @ 15) (20)Px61y16 { Px61y15, Px61y17, Px62y16 } CellNode (61 @ 16) (20)Px61y17 { Px62y17, Px61y16, Px60y17 } CellNode (61 @ 17) (20)Px61y20 { Px60y20, Px61y21 } CellNode (61 @ 20) (20)Px61y21 { Px60y21, Px62y21, Px61y20 } CellNode (61 @ 21) (20)Px61y41 { Px60y41, Px61y42, Px62y41 } CellNode (61 @ 41) (20)Px61y42 { Px61y41, Px62y42, Px61y43, Px60y42 } CellNode (61 @ 42) (20)Px61y43 { Px60y43, Px61y44, Px61y42, Px62y43 } CellNode (61 @ 43) (20)Px61y44 { Px60y44, Px61y43 } CellNode (61 @ 44) (20)Px61y61 { Px60y61, Px61y62 } CellNode (61 @ 61) (20)Px61y62 { Px62y62, Px61y61, Px61y63, Px60y62 } CellNode (61 @ 62) (20)Px61y63 { Px61y64, Px60y63, Px62y63, Px61y62 } CellNode (61 @ 63) (20)Px61y64 { Px61y65, Px60y64, Px62y64, Px61y63 } CellNode (61 @ 64) (20)Px61y65 { Px61y64, Px62y65, Px60y65, Px61y66 } CellNode (61 @ 65) (20)Px61y66 { Px61y65, Px61y67, Px60y66 } CellNode (61 @ 66) (20)Px61y67 { Px62y67, Px61y68, Px60y67, Px61y66 } CellNode (61 @ 67) (20)Px61y68 { Px61y69, Px62y68, Px60y68, Px61y67 } CellNode (61 @ 68) (20)Px61y69 { Px61y68, Px62y69, Px60y69 } CellNode (61 @ 69) (20)Px61y9 { Px61y10, Px60y9 } CellNode (61 @ 9) (20)Px62y11 { Px62y12, Px61y11 } CellNode (62 @ 11) (20)Px62y12 { Px62y13, Px62y11, Px61y12 } CellNode (62 @ 12) (20)Px62y13 { Px62y14, Px62y12, Px61y13 } CellNode (62 @ 13) (20)Px62y14 { Px61y14, Px62y13, Px62y15, Px63y14 } CellNode (62 @ 14) (20)Px62y15 { Px63y15, Px62y14, Px61y15, Px62y16 } CellNode (62 @ 15) (20)Px62y16 { Px62y17, Px63y16, Px62y15, Px61y16 } CellNode (62 @ 16) (20)Px62y17 { Px62y16, Px62y18, Px63y17, Px61y17 } CellNode (62 @ 17) (20)Px62y18 { Px62y17, Px63y18 } CellNode (62 @ 18) (20)Px62y21 { Px62y22, Px63y21, Px61y21 } CellNode (62 @ 21) (20)Px62y22 { Px63y22, Px62y21 } CellNode (62 @ 22) (20)Px62y41 { Px61y41, Px62y42 } CellNode (62 @ 41) (20)Px62y42 { Px62y43, Px61y42, Px62y41, Px63y42 } CellNode (62 @ 42) (20)Px62y43 { Px62y42, Px61y43, Px63y43 } CellNode (62 @ 43) (20)Px62y62 { Px61y62, Px62y63 } CellNode (62 @ 62) (20)Px62y63 { Px61y63, Px62y62, Px62y64 } CellNode (62 @ 63) (20)Px62y64 { Px62y65, Px61y64, Px62y63 } CellNode (62 @ 64) (20)Px62y65 { Px62y64, Px61y65 } CellNode (62 @ 65) (20)Px62y67 { Px62y68, Px63y67, Px61y67 } CellNode (62 @ 67) (20)Px62y68 { Px63y68, Px61y68, Px62y67, Px62y69 } CellNode (62 @ 68) (20)Px62y69 { Px61y69, Px62y68, Px63y69 } CellNode (62 @ 69) (20)Px63y14 { Px62y14, Px63y15 } CellNode (63 @ 14) (20)Px63y15 { Px62y15, Px63y14, Px63y16 } CellNode (63 @ 15) (20)Px63y16 { Px62y16, Px63y15, Px63y17 } CellNode (63 @ 16) (20)Px63y17 { Px63y18, Px62y17, Px64y17, Px63y16 } CellNode (63 @ 17) (20)Px63y18 { Px63y19, Px62y18, Px64y18, Px63y17 } CellNode (63 @ 18) (20)Px63y19 { Px63y20, Px64y19, Px63y18 } CellNode (63 @ 19) (20)Px63y20 { Px63y21, Px64y20, Px63y19 } CellNode (63 @ 20) (20)Px63y21 { Px64y21, Px63y20, Px62y21, Px63y22 } CellNode (63 @ 21) (20)Px63y22 { Px63y21, Px62y22, Px64y22 } CellNode (63 @ 22) (20)Px63y42 { Px64y42, Px62y42, Px63y43 } CellNode (63 @ 42) (20)Px63y43 { Px63y42, Px63y44, Px64y43, Px62y43 } CellNode (63 @ 43) (20)Px63y44 { Px63y43, Px64y44 } CellNode (63 @ 44) (20)Px63y67 { Px62y67, Px64y67, Px63y68 } CellNode (63 @ 67) (20)Px63y68 { Px63y69, Px62y68, Px64y68, Px63y67 } CellNode (63 @ 68) (20)Px63y69 { Px62y69, Px63y68, Px64y69 } CellNode (63 @ 69) (20)Px64y17 { Px64y18, Px63y17 } CellNode (64 @ 17) (20)Px64y18 { Px64y17, Px64y19, Px63y18 } CellNode (64 @ 18) (20)Px64y19 { Px65y19, Px63y19, Px64y18, Px64y20 } CellNode (64 @ 19) (20)Px64y20 { Px65y20, Px63y20, Px64y21, Px64y19 } CellNode (64 @ 20) (20)Px64y21 { Px65y21, Px63y21, Px64y22, Px64y20 } CellNode (64 @ 21) (20)Px64y22 { Px63y22, Px64y21, Px65y22 } CellNode (64 @ 22) (20)Px64y42 { Px64y43, Px63y42, Px65y42 } CellNode (64 @ 42) (20)Px64y43 { Px65y43, Px63y43, Px64y44, Px64y42 } CellNode (64 @ 43) (20)Px64y44 { Px65y44, Px63y44, Px64y45, Px64y43 } CellNode (64 @ 44) (20)Px64y45 { Px64y44, Px64y46, Px65y45 } CellNode (64 @ 45) (20)Px64y46 { Px64y45, Px65y46 } CellNode (64 @ 46) (20)Px64y67 { Px65y67, Px64y68, Px63y67 } CellNode (64 @ 67) (20)Px64y68 { Px64y67, Px63y68, Px64y69, Px65y68 } CellNode (64 @ 68) (20)Px64y69 { Px63y69, Px64y68, Px65y69 } CellNode (64 @ 69) (20)Px65y19 { Px64y19, Px65y20 } CellNode (65 @ 19) (20)Px65y20 { Px64y20, Px65y21, Px65y19 } CellNode (65 @ 20) (20)Px65y21 { Px65y20, Px64y21, Px65y22, Px66y21 } CellNode (65 @ 21) (20)Px65y22 { Px65y21, Px64y22, Px66y22 } CellNode (65 @ 22) (20)Px65y24 { Px66y24 } CellNode (65 @ 24) (20)Px65y42 { Px65y43, Px64y42 } CellNode (65 @ 42) (20)Px65y43 { Px64y43, Px65y44, Px65y42 } CellNode (65 @ 43) (20)Px65y44 { Px65y45, Px64y44, Px65y43 } CellNode (65 @ 44) (20)Px65y45 { Px66y45, Px65y44, Px64y45, Px65y46 } CellNode (65 @ 45) (20)Px65y46 { Px65y47, Px66y46, Px65y45, Px64y46 } CellNode (65 @ 46) (20)Px65y47 { Px65y46, Px66y47 } CellNode (65 @ 47) (20)Px65y55 { Px66y55, Px65y56 } CellNode (65 @ 55) (20)Px65y56 { Px66y56, Px65y55, Px65y57 } CellNode (65 @ 56) (20)Px65y57 { Px65y58, Px66y57, Px65y56 } CellNode (65 @ 57) (20)Px65y58 { Px66y58, Px65y57, Px65y59 } CellNode (65 @ 58) (20)Px65y59 { Px65y60, Px65y58, Px66y59 } CellNode (65 @ 59) (20)Px65y60 { Px65y61, Px66y60, Px65y59 } CellNode (65 @ 60) (20)Px65y61 { Px65y60, Px66y61 } CellNode (65 @ 61) (20)Px65y66 { Px65y67, Px66y66 } CellNode (65 @ 66) (20)Px65y67 { Px65y66, Px64y67, Px65y68, Px66y67 } CellNode (65 @ 67) (20)Px65y68 { Px66y68, Px65y67, Px64y68, Px65y69 } CellNode (65 @ 68) (20)Px65y69 { Px65y68, Px64y69 } CellNode (65 @ 69) (20)Px66y21 { Px65y21, Px66y22 } CellNode (66 @ 21) (20)Px66y22 { Px66y23, Px67y22, Px65y22, Px66y21 } CellNode (66 @ 22) (20)Px66y23 { Px66y22, Px66y24, Px67y23 } CellNode (66 @ 23) (20)Px66y24 { Px67y24, Px65y24, Px66y25, Px66y23 } CellNode (66 @ 24) (20)Px66y25 { Px67y25, Px66y26, Px66y24 } CellNode (66 @ 25) (20)Px66y26 { Px66y25, Px67y26, Px66y27 } CellNode (66 @ 26) (20)Px66y27 { Px66y26, Px67y27 } CellNode (66 @ 27) (20)Px66y32 { Px67y32, Px66y33 } CellNode (66 @ 32) (20)Px66y33 { Px66y34, Px66y32, Px67y33 } CellNode (66 @ 33) (20)Px66y34 { Px66y35, Px67y34, Px66y33 } CellNode (66 @ 34) (20)Px66y35 { Px66y36, Px67y35, Px66y34 } CellNode (66 @ 35) (20)Px66y36 { Px66y37, Px67y36, Px66y35 } CellNode (66 @ 36) (20)Px66y37 { Px66y36, Px66y38, Px67y37 } CellNode (66 @ 37) (20)Px66y38 { Px67y38, Px66y37 } CellNode (66 @ 38) (20)Px66y45 { Px66y46, Px65y45 } CellNode (66 @ 45) (20)Px66y46 { Px67y46, Px66y45, Px66y47, Px65y46 } CellNode (66 @ 46) (20)Px66y47 { Px66y48, Px67y47, Px65y47, Px66y46 } CellNode (66 @ 47) (20)Px66y48 { Px67y48, Px66y47 } CellNode (66 @ 48) (20)Px66y54 { Px67y54, Px66y55 } CellNode (66 @ 54) (20)Px66y55 { Px67y55, Px65y55, Px66y54, Px66y56 } CellNode (66 @ 55) (20)Px66y56 { Px66y57, Px67y56, Px65y56, Px66y55 } CellNode (66 @ 56) (20)Px66y57 { Px66y58, Px66y56, Px65y57 } CellNode (66 @ 57) (20)Px66y58 { Px66y59, Px66y57, Px65y58 } CellNode (66 @ 58) (20)Px66y59 { Px66y60, Px65y59, Px66y58 } CellNode (66 @ 59) (20)Px66y60 { Px65y60, Px66y61, Px66y59 } CellNode (66 @ 60) (20)Px66y61 { Px67y61, Px66y62, Px65y61, Px66y60 } CellNode (66 @ 61) (20)Px66y62 { Px67y62, Px66y63, Px66y61 } CellNode (66 @ 62) (20)Px66y63 { Px66y62, Px67y63 } CellNode (66 @ 63) (20)Px66y65 { Px67y65, Px66y66 } CellNode (66 @ 65) (20)Px66y66 { Px66y67, Px65y66, Px66y65, Px67y66 } CellNode (66 @ 66) (20)Px66y67 { Px66y68, Px65y67, Px67y67, Px66y66 } CellNode (66 @ 67) (20)Px66y68 { Px65y68, Px67y68, Px66y67 } CellNode (66 @ 68) (20)Px67y22 { Px67y23, Px66y22 } CellNode (67 @ 22) (20)Px67y23 { Px67y24, Px66y23, Px67y22 } CellNode (67 @ 23) (20)Px67y24 { Px68y24, Px67y25, Px66y24, Px67y23 } CellNode (67 @ 24) (20)Px67y25 { Px66y25, Px67y24, Px67y26, Px68y25 } CellNode (67 @ 25) (20)Px67y26 { Px68y26, Px66y26, Px67y25, Px67y27 } CellNode (67 @ 26) (20)Px67y27 { Px67y28, Px68y27, Px66y27, Px67y26 } CellNode (67 @ 27) (20)Px67y28 { Px68y28, Px67y27 } CellNode (67 @ 28) (20)Px67y31 { Px67y32, Px68y31 } CellNode (67 @ 31) (20)Px67y32 { Px67y33, Px66y32, Px68y32, Px67y31 } CellNode (67 @ 32) (20)Px67y33 { Px66y33, Px67y32, Px68y33, Px67y34 } CellNode (67 @ 33) (20)Px67y34 { Px68y34, Px66y34, Px67y35, Px67y33 } CellNode (67 @ 34) (20)Px67y35 { Px67y36, Px66y35, Px68y35, Px67y34 } CellNode (67 @ 35) (20)Px67y36 { Px67y35, Px68y36, Px66y36, Px67y37 } CellNode (67 @ 36) (20)Px67y37 { Px66y37, Px67y36, Px67y38 } CellNode (67 @ 37) (20)Px67y38 { Px66y38, Px67y39, Px67y37 } CellNode (67 @ 38) (20)Px67y39 { Px67y38, Px68y39 } CellNode (67 @ 39) (20)Px67y46 { Px67y47, Px66y46 } CellNode (67 @ 46) (20)Px67y47 { Px67y46, Px66y47, Px67y48 } CellNode (67 @ 47) (20)Px67y48 { Px66y48, Px67y47, Px68y48, Px67y49 } CellNode (67 @ 48) (20)Px67y49 { Px68y49, Px67y48 } CellNode (67 @ 49) (20)Px67y53 { Px67y54, Px68y53 } CellNode (67 @ 53) (20)Px67y54 { Px68y54, Px66y54, Px67y55, Px67y53 } CellNode (67 @ 54) (20)Px67y55 { Px67y54, Px66y55, Px67y56 } CellNode (67 @ 55) (20)Px67y56 { Px66y56, Px67y55 } CellNode (67 @ 56) (20)Px67y61 { Px67y62, Px68y61, Px66y61 } CellNode (67 @ 61) (20)Px67y62 { Px67y63, Px68y62, Px67y61, Px66y62 } CellNode (67 @ 62) (20)Px67y63 { Px67y64, Px68y63, Px67y62, Px66y63 } CellNode (67 @ 63) (20)Px67y64 { Px67y63, Px68y64, Px67y65 } CellNode (67 @ 64) (20)Px67y65 { Px68y65, Px67y64, Px66y65, Px67y66 } CellNode (67 @ 65) (20)Px67y66 { Px67y67, Px68y66, Px66y66, Px67y65 } CellNode (67 @ 66) (20)Px67y67 { Px67y66, Px67y68, Px68y67, Px66y67 } CellNode (67 @ 67) (20)Px67y68 { Px66y68, Px67y67 } CellNode (67 @ 68) (20)Px68y24 { Px68y25, Px67y24 } CellNode (68 @ 24) (20)Px68y25 { Px68y26, Px68y24, Px67y25 } CellNode (68 @ 25) (20)Px68y26 { Px68y27, Px67y26, Px68y25 } CellNode (68 @ 26) (20)Px68y27 { Px68y26, Px68y28, Px69y27, Px67y27 } CellNode (68 @ 27) (20)Px68y28 { Px69y28, Px67y28, Px68y27, Px68y29 } CellNode (68 @ 28) (20)Px68y29 { Px68y28, Px69y29 } CellNode (68 @ 29) (20)Px68y31 { Px69y31, Px67y31, Px68y32 } CellNode (68 @ 31) (20)Px68y32 { Px68y31, Px67y32, Px68y33, Px69y32 } CellNode (68 @ 32) (20)Px68y33 { Px69y33, Px68y34, Px67y33, Px68y32 } CellNode (68 @ 33) (20)Px68y34 { Px68y35, Px69y34, Px68y33, Px67y34 } CellNode (68 @ 34) (20)Px68y35 { Px67y35, Px68y34, Px69y35, Px68y36 } CellNode (68 @ 35) (20)Px68y36 { Px67y36, Px68y35, Px69y36 } CellNode (68 @ 36) (20)Px68y39 { Px68y40, Px67y39 } CellNode (68 @ 39) (20)Px68y40 { Px68y41, Px69y40, Px68y39 } CellNode (68 @ 40) (20)Px68y41 { Px69y41, Px68y40 } CellNode (68 @ 41) (20)Px68y48 { Px68y49, Px67y48 } CellNode (68 @ 48) (20)Px68y49 { Px68y50, Px69y49, Px68y48, Px67y49 } CellNode (68 @ 49) (20)Px68y50 { Px69y50, Px68y49 } CellNode (68 @ 50) (20)Px68y52 { Px69y52, Px68y53 } CellNode (68 @ 52) (20)Px68y53 { Px69y53, Px68y54, Px68y52, Px67y53 } CellNode (68 @ 53) (20)Px68y54 { Px68y53, Px69y54, Px67y54 } CellNode (68 @ 54) (20)Px68y61 { Px68y62, Px67y61 } CellNode (68 @ 61) (20)Px68y62 { Px68y61, Px69y62, Px67y62, Px68y63 } CellNode (68 @ 62) (20)Px68y63 { Px67y63, Px69y63, Px68y62, Px68y64 } CellNode (68 @ 63) (20)Px68y64 { Px68y65, Px67y64, Px69y64, Px68y63 } CellNode (68 @ 64) (20)Px68y65 { Px67y65, Px68y64, Px68y66 } CellNode (68 @ 65) (20)Px68y66 { Px67y66, Px68y65, Px68y67 } CellNode (68 @ 66) (20)Px68y67 { Px68y66, Px67y67 } CellNode (68 @ 67) (20)Px69y27 { Px69y28, Px68y27 } CellNode (69 @ 27) (20)Px69y28 { Px69y29, Px68y28, Px69y27 } CellNode (69 @ 28) (20)Px69y29 { Px69y28, Px69y30, Px70y29, Px68y29 } CellNode (69 @ 29) (20)Px69y30 { Px69y29, Px69y31, Px70y30 } CellNode (69 @ 30) (20)Px69y31 { Px70y31, Px69y30, Px68y31, Px69y32 } CellNode (69 @ 31) (20)Px69y32 { Px68y32, Px69y33, Px69y31 } CellNode (69 @ 32) (20)Px69y33 { Px68y33, Px69y32, Px69y34 } CellNode (69 @ 33) (20)Px69y34 { Px68y34, Px69y33, Px69y35 } CellNode (69 @ 34) (20)Px69y35 { Px68y35, Px69y34, Px69y36 } CellNode (69 @ 35) (20)Px69y36 { Px68y36, Px69y35 } CellNode (69 @ 36) (20)Px69y40 { Px69y41, Px68y40 } CellNode (69 @ 40) (20)Px69y41 { Px68y41, Px69y40, Px69y42 } CellNode (69 @ 41) (20)Px69y42 { Px69y41, Px69y43, Px70y42 } CellNode (69 @ 42) (20)Px69y43 { Px69y44, Px69y42, Px70y43 } CellNode (69 @ 43) (20)Px69y44 { Px69y43, Px69y45, Px70y44 } CellNode (69 @ 44) (20)Px69y45 { Px69y44, Px69y46, Px70y45 } CellNode (69 @ 45) (20)Px69y46 { Px70y46, Px69y45 } CellNode (69 @ 46) (20)Px69y49 { Px68y49, Px70y49, Px69y50 } CellNode (69 @ 49) (20)Px69y50 { Px69y49, Px70y50, Px68y50 } CellNode (69 @ 50) (20)Px69y52 { Px69y53, Px70y52, Px68y52 } CellNode (69 @ 52) (20)Px69y53 { Px68y53, Px69y54, Px70y53, Px69y52 } CellNode (69 @ 53) (20)Px69y54 { Px69y53, Px68y54 } CellNode (69 @ 54) (20)Px69y62 { Px68y62, Px69y63 } CellNode (69 @ 62) (20)Px69y63 { Px69y64, Px69y62, Px68y63 } CellNode (69 @ 63) (20)Px69y64 { Px69y63, Px68y64 } CellNode (69 @ 64) (20)Px6y53 { Px5y53, Px7y53 } CellNode (6 @ 53) (20)Px6y57 { Px7y57, Px6y58 } CellNode (6 @ 57) (20)Px6y58 { Px5y58, Px7y58, Px6y57 } CellNode (6 @ 58) (20)Px6y67 { Px7y67, Px6y68 } CellNode (6 @ 67) (20)Px6y68 { Px7y68, Px6y69, Px6y67 } CellNode (6 @ 68) (20)Px6y69 { Px6y70, Px5y69, Px6y68 } CellNode (6 @ 69) (20)Px6y70 { Px5y70, Px6y71, Px6y69 } CellNode (6 @ 70) (20)Px6y71 { Px7y71, Px5y71, Px6y70, Px6y72 } CellNode (6 @ 71) (20)Px6y72 { Px6y73, Px7y72, Px5y72, Px6y71 } CellNode (6 @ 72) (20)Px6y73 { Px5y73, Px6y72, Px7y73 } CellNode (6 @ 73) (20)Px70y29 { Px70y30, Px69y29 } CellNode (70 @ 29) (20)Px70y30 { Px70y29, Px69y30, Px70y31 } CellNode (70 @ 30) (20)Px70y31 { Px70y30, Px69y31 } CellNode (70 @ 31) (20)Px70y42 { Px70y43, Px69y42 } CellNode (70 @ 42) (20)Px70y43 { Px69y43, Px70y42, Px70y44 } CellNode (70 @ 43) (20)Px70y44 { Px69y44, Px70y45, Px70y43 } CellNode (70 @ 44) (20)Px70y45 { Px71y45, Px69y45, Px70y46, Px70y44 } CellNode (70 @ 45) (20)Px70y46 { Px71y46, Px69y46, Px70y47, Px70y45 } CellNode (70 @ 46) (20)Px70y47 { Px70y48, Px71y47, Px70y46 } CellNode (70 @ 47) (20)Px70y48 { Px70y47, Px70y49, Px71y48 } CellNode (70 @ 48) (20)Px70y49 { Px71y49, Px69y49, Px70y48, Px70y50 } CellNode (70 @ 49) (20)Px70y50 { Px70y49, Px69y50 } CellNode (70 @ 50) (20)Px70y52 { Px70y53, Px71y52, Px69y52 } CellNode (70 @ 52) (20)Px70y53 { Px70y52, Px71y53, Px69y53 } CellNode (70 @ 53) (20)Px71y45 { Px71y46, Px70y45 } CellNode (71 @ 45) (20)Px71y46 { Px71y47, Px71y45, Px70y46 } CellNode (71 @ 46) (20)Px71y47 { Px70y47, Px71y46, Px71y48 } CellNode (71 @ 47) (20)Px71y48 { Px71y47, Px70y48, Px71y49 } CellNode (71 @ 48) (20)Px71y49 { Px70y49, Px71y48 } CellNode (71 @ 49) (20)Px71y52 { Px70y52, Px71y53 } CellNode (71 @ 52) (20)Px71y53 { Px71y52, Px72y53, Px70y53, Px71y54 } CellNode (71 @ 53) (20)Px71y54 { Px71y53, Px72y54 } CellNode (71 @ 54) (20)Px72y53 { Px71y53, Px72y54, Px73y53 } CellNode (72 @ 53) (20)Px72y54 { Px72y55, Px73y54, Px72y53, Px71y54 } CellNode (72 @ 54) (20)Px72y55 { Px72y54, Px73y55 } CellNode (72 @ 55) (20)Px73y53 { Px72y53, Px73y54 } CellNode (73 @ 53) (20)Px73y54 { Px73y53, Px73y55, Px74y54, Px72y54 } CellNode (73 @ 54) (20)Px73y55 { Px74y55, Px72y55, Px73y54, Px73y56 } CellNode (73 @ 55) (20)Px73y56 { Px73y55, Px74y56 } CellNode (73 @ 56) (20)Px74y54 { Px74y55, Px73y54 } CellNode (74 @ 54) (20)Px74y55 { Px74y56, Px75y55, Px73y55, Px74y54 } CellNode (74 @ 55) (20)Px74y56 { Px73y56, Px75y56, Px74y55 } CellNode (74 @ 56) (20)Px75y55 { Px74y55, Px75y56 } CellNode (75 @ 55) (20)Px75y56 { Px76y56, Px74y56, Px75y55, Px75y57 } CellNode (75 @ 56) (20)Px75y57 { Px75y58, Px75y56, Px76y57 } CellNode (75 @ 57) (20)Px75y58 { Px75y59, Px75y57, Px76y58 } CellNode (75 @ 58) (20)Px75y59 { Px75y60, Px75y58, Px76y59 } CellNode (75 @ 59) (20)Px75y60 { Px76y60, Px75y61, Px75y59 } CellNode (75 @ 60) (20)Px75y61 { Px75y60, Px76y61 } CellNode (75 @ 61) (20)Px76y56 { Px75y56, Px76y57 } CellNode (76 @ 56) (20)Px76y57 { Px77y57, Px76y56, Px76y58, Px75y57 } CellNode (76 @ 57) (20)Px76y58 { Px76y59, Px75y58, Px77y58, Px76y57 } CellNode (76 @ 58) (20)Px76y59 { Px77y59, Px75y59, Px76y58, Px76y60 } CellNode (76 @ 59) (20)Px76y60 { Px76y59, Px76y61, Px77y60, Px75y60 } CellNode (76 @ 60) (20)Px76y61 { Px75y61, Px76y62, Px77y61, Px76y60 } CellNode (76 @ 61) (20)Px76y62 { Px76y61, Px77y62, Px76y63 } CellNode (76 @ 62) (20)Px76y63 { Px76y64, Px77y63, Px76y62 } CellNode (76 @ 63) (20)Px76y64 { Px76y65, Px76y63, Px77y64 } CellNode (76 @ 64) (20)Px76y65 { Px76y64, Px77y65 } CellNode (76 @ 65) (20)Px77y57 { Px77y58, Px76y57 } CellNode (77 @ 57) (20)Px77y58 { Px77y57, Px77y59, Px76y58 } CellNode (77 @ 58) (20)Px77y59 { Px77y58, Px77y60, Px76y59 } CellNode (77 @ 59) (20)Px77y60 { Px76y60, Px77y61, Px77y59 } CellNode (77 @ 60) (20)Px77y61 { Px78y61, Px76y61, Px77y62, Px77y60 } CellNode (77 @ 61) (20)Px77y62 { Px77y63, Px76y62, Px78y62, Px77y61 } CellNode (77 @ 62) (20)Px77y63 { Px77y62, Px77y64, Px76y63, Px78y63 } CellNode (77 @ 63) (20)Px77y64 { Px76y64, Px77y65, Px77y63, Px78y64 } CellNode (77 @ 64) (20)Px77y65 { Px77y66, Px78y65, Px76y65, Px77y64 } CellNode (77 @ 65) (20)Px77y66 { Px78y66, Px77y65 } CellNode (77 @ 66) (20)Px78y61 { Px78y62, Px77y61 } CellNode (78 @ 61) (20)Px78y62 { Px78y63, Px78y61, Px77y62 } CellNode (78 @ 62) (20)Px78y63 { Px78y62, Px78y64, Px77y63 } CellNode (78 @ 63) (20)Px78y64 { Px77y64, Px78y63, Px78y65 } CellNode (78 @ 64) (20)Px78y65 { Px77y65, Px79y65, Px78y66, Px78y64 } CellNode (78 @ 65) (20)Px78y66 { Px77y66, Px78y65, Px78y67, Px79y66 } CellNode (78 @ 66) (20)Px78y67 { Px79y67, Px78y66 } CellNode (78 @ 67) (20)Px78y69 { Px78y70, Px79y69 } CellNode (78 @ 69) (20)Px78y70 { Px78y69, Px79y70 } CellNode (78 @ 70) (20)Px79y65 { Px79y66, Px78y65 } CellNode (79 @ 65) (20)Px79y66 { Px78y66, Px79y67, Px79y65 } CellNode (79 @ 66) (20)Px79y67 { Px79y68, Px80y67, Px78y67, Px79y66 } CellNode (79 @ 67) (20)Px79y68 { Px80y68, Px79y69, Px79y67 } CellNode (79 @ 68) (20)Px79y69 { Px80y69, Px79y68, Px78y69, Px79y70 } CellNode (79 @ 69) (20)Px79y70 { Px79y71, Px80y70, Px78y70, Px79y69 } CellNode (79 @ 70) (20)Px79y71 { Px79y70, Px79y72, Px80y71 } CellNode (79 @ 71) (20)Px79y72 { Px79y73, Px79y71, Px80y72 } CellNode (79 @ 72) (20)Px79y73 { Px79y74, Px79y72, Px80y73 } CellNode (79 @ 73) (20)Px79y74 { Px80y74, Px79y73 } CellNode (79 @ 74) (20)Px7y53 { Px6y53, Px7y54 } CellNode (7 @ 53) (20)Px7y54 { Px7y55, Px7y53, Px8y54 } CellNode (7 @ 54) (20)Px7y55 { Px8y55, Px7y56, Px7y54 } CellNode (7 @ 55) (20)Px7y56 { Px7y57, Px7y55, Px8y56 } CellNode (7 @ 56) (20)Px7y57 { Px8y57, Px6y57, Px7y58, Px7y56 } CellNode (7 @ 57) (20)Px7y58 { Px7y57, Px6y58 } CellNode (7 @ 58) (20)Px7y67 { Px7y68, Px6y67, Px8y67 } CellNode (7 @ 67) (20)Px7y68 { Px8y68, Px6y68, Px7y67 } CellNode (7 @ 68) (20)Px7y71 { Px6y71, Px7y72 } CellNode (7 @ 71) (20)Px7y72 { Px6y72, Px7y71, Px7y73 } CellNode (7 @ 72) (20)Px7y73 { Px7y72, Px6y73 } CellNode (7 @ 73) (20)Px80y67 { Px79y67, Px80y68 } CellNode (80 @ 67) (20)Px80y68 { Px80y67, Px80y69, Px79y68 } CellNode (80 @ 68) (20)Px80y69 { Px80y68, Px79y69, Px80y70 } CellNode (80 @ 69) (20)Px80y70 { Px80y69, Px79y70, Px80y71 } CellNode (80 @ 70) (20)Px80y71 { Px79y71, Px80y72, Px80y70, Px81y71 } CellNode (80 @ 71) (20)Px80y72 { Px81y72, Px80y73, Px79y72, Px80y71 } CellNode (80 @ 72) (20)Px80y73 { Px81y73, Px80y74, Px79y73, Px80y72 } CellNode (80 @ 73) (20)Px80y74 { Px81y74, Px79y74, Px80y73 } CellNode (80 @ 74) (20)Px81y71 { Px80y71, Px81y72 } CellNode (81 @ 71) (20)Px81y72 { Px80y72, Px81y71, Px81y73 } CellNode (81 @ 72) (20)Px81y73 { Px81y72, Px80y73, Px81y74, Px82y73 } CellNode (81 @ 73) (20)Px81y74 { Px82y74, Px81y75, Px81y73, Px80y74 } CellNode (81 @ 74) (20)Px81y75 { Px81y74 } CellNode (81 @ 75) (20)Px82y73 { Px82y74, Px83y73, Px81y73 } CellNode (82 @ 73) (20)Px82y74 { Px82y73, Px83y74, Px81y74 } CellNode (82 @ 74) (20)Px83y73 { Px82y73, Px83y74 } CellNode (83 @ 73) (20)Px83y74 { Px82y74, Px83y75, Px83y73, Px84y74 } CellNode (83 @ 74) (20)Px83y75 { Px83y76, Px84y75, Px83y74 } CellNode (83 @ 75) (20)Px83y76 { Px84y76, Px83y75 } CellNode (83 @ 76) (20)Px84y74 { Px84y75, Px83y74 } CellNode (84 @ 74) (20)Px84y75 { Px83y75, Px84y76, Px85y75, Px84y74 } CellNode (84 @ 75) (20)Px84y76 { Px85y76, Px83y76, Px84y75, Px84y77 } CellNode (84 @ 76) (20)Px84y77 { Px84y76, Px85y77, Px84y78 } CellNode (84 @ 77) (20)Px84y78 { Px84y77, Px85y78, Px84y79 } CellNode (84 @ 78) (20)Px84y79 { Px84y78, Px85y79, Px84y80 } CellNode (84 @ 79) (20)Px84y80 { Px84y79, Px85y80, Px84y81 } CellNode (84 @ 80) (20)Px84y81 { Px84y82, Px85y81, Px84y80 } CellNode (84 @ 81) (20)Px84y82 { Px85y82, Px84y81 } CellNode (84 @ 82) (20)Px85y75 { Px84y75, Px85y76 } CellNode (85 @ 75) (20)Px85y76 { Px84y76, Px85y75, Px85y77 } CellNode (85 @ 76) (20)Px85y77 { Px85y76, Px86y77, Px85y78, Px84y77 } CellNode (85 @ 77) (20)Px85y78 { Px86y78, Px84y78, Px85y77, Px85y79 } CellNode (85 @ 78) (20)Px85y79 { Px86y79, Px84y79, Px85y78, Px85y80 } CellNode (85 @ 79) (20)Px85y80 { Px85y81, Px86y80, Px84y80, Px85y79 } CellNode (85 @ 80) (20)Px85y81 { Px85y82, Px86y81, Px84y81, Px85y80 } CellNode (85 @ 81) (20)Px85y82 { Px85y81, Px84y82 } CellNode (85 @ 82) (20)Px86y77 { Px87y77, Px86y78, Px85y77 } CellNode (86 @ 77) (20)Px86y78 { Px87y78, Px86y79, Px85y78, Px86y77 } CellNode (86 @ 78) (20)Px86y79 { Px86y78, Px86y80, Px87y79, Px85y79 } CellNode (86 @ 79) (20)Px86y80 { Px86y79, Px87y80, Px86y81, Px85y80 } CellNode (86 @ 80) (20)Px86y81 { Px86y80, Px85y81 } CellNode (86 @ 81) (20)Px87y77 { Px86y77, Px88y77, Px87y78 } CellNode (87 @ 77) (20)Px87y78 { Px86y78, Px87y79, Px88y78, Px87y77 } CellNode (87 @ 78) (20)Px87y79 { Px88y79, Px87y78, Px86y79, Px87y80 } CellNode (87 @ 79) (20)Px87y80 { Px86y80, Px87y79 } CellNode (87 @ 80) (20)Px88y77 { Px87y77, Px89y77, Px88y78 } CellNode (88 @ 77) (20)Px88y78 { Px88y79, Px89y78, Px87y78, Px88y77 } CellNode (88 @ 78) (20)Px88y79 { Px87y79, Px89y79, Px88y78 } CellNode (88 @ 79) (20)Px89y76 { Px90y76, Px89y77 } CellNode (89 @ 76) (20)Px89y77 { Px89y78, Px90y77, Px89y76, Px88y77 } CellNode (89 @ 77) (20)Px89y78 { Px89y79, Px90y78, Px89y77, Px88y78 } CellNode (89 @ 78) (20)Px89y79 { Px88y79, Px89y78 } CellNode (89 @ 79) (20)Px8y54 { Px8y55, Px7y54 } CellNode (8 @ 54) (20)Px8y55 { Px8y56, Px7y55, Px8y54 } CellNode (8 @ 55) (20)Px8y56 { Px8y57, Px7y56, Px8y55 } CellNode (8 @ 56) (20)Px8y57 { Px8y56, Px7y57 } CellNode (8 @ 57) (20)Px8y67 { Px8y68, Px7y67, Px9y67 } CellNode (8 @ 67) (20)Px8y68 { Px9y68, Px7y68, Px8y67 } CellNode (8 @ 68) (20)Px90y76 { Px90y77, Px89y76, Px91y76 } CellNode (90 @ 76) (20)Px90y77 { Px90y76, Px91y77, Px89y77, Px90y78 } CellNode (90 @ 77) (20)Px90y78 { Px89y78, Px90y77 } CellNode (90 @ 78) (20)Px91y76 { Px90y76, Px92y76, Px91y77 } CellNode (91 @ 76) (20)Px91y77 { Px90y77, Px92y77, Px91y76 } CellNode (91 @ 77) (20)Px92y75 { Px92y76, Px93y75 } CellNode (92 @ 75) (20)Px92y76 { Px93y76, Px91y76, Px92y77, Px92y75 } CellNode (92 @ 76) (20)Px92y77 { Px93y77, Px92y76, Px91y77 } CellNode (92 @ 77) (20)Px93y75 { Px93y76, Px92y75, Px94y75 } CellNode (93 @ 75) (20)Px93y76 { Px93y75, Px93y77, Px94y76, Px92y76 } CellNode (93 @ 76) (20)Px93y77 { Px93y76, Px94y77, Px92y77 } CellNode (93 @ 77) (20)Px94y75 { Px94y76, Px93y75 } CellNode (94 @ 75) (20)Px94y76 { Px94y77, Px93y76, Px95y76, Px94y75 } CellNode (94 @ 76) (20)Px94y77 { Px94y78, Px93y77, Px95y77, Px94y76 } CellNode (94 @ 77) (20)Px94y78 { Px95y78, Px94y77 } CellNode (94 @ 78) (20)Px95y76 { Px96y76, Px94y76, Px95y77 } CellNode (95 @ 76) (20)Px95y77 { Px94y77, Px95y76, Px96y77, Px95y78 } CellNode (95 @ 77) (20)Px95y78 { Px94y78, Px96y78, Px95y77 } CellNode (95 @ 78) (20)Px96y76 { Px96y77, Px95y76, Px97y76 } CellNode (96 @ 76) (20)Px96y77 { Px97y77, Px96y76, Px95y77, Px96y78 } CellNode (96 @ 77) (20)Px96y78 { Px96y77, Px97y78, Px95y78 } CellNode (96 @ 78) (20)Px97y76 { Px97y77, Px96y76 } CellNode (97 @ 76) (20)Px97y77 { Px96y77, Px97y78, Px97y76 } CellNode (97 @ 77) (20)Px97y78 { Px97y77, Px96y78 } CellNode (97 @ 78) (20)Px9y66 { Px9y67, Px10y66 } CellNode (9 @ 66) (20)Px9y67 { Px10y67, Px9y68, Px8y67, Px9y66 } CellNode (9 @ 67) (20)Px9y68 { Px8y68, Px10y68, Px9y67 } CellNode (9 @ 68) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="cellNetwork22">cellNetwork22messages none  defined. Px8y61 { Px9y61 } CellNode (8 @ 61) (156)Px16y107 { Px16y108 } CellNode (16 @ 107) (156)Px21y29 { Px22y29 } CellNode (21 @ 29) (156)Px92y82 { Px93y82, Px91y82 } CellNode (92 @ 82) (156)Px92y44 { Px91y44 } CellNode (92 @ 44) (156)Px15y96 { Px15y97 } CellNode (15 @ 96) (156)Px6y79 { Px7y79 } CellNode (6 @ 79) (156)Px14y22 { Px14y23 } CellNode (14 @ 22) (156)Px22y19 { Px21y19, Px22y18 } CellNode (22 @ 19) (156)Px93y91 { Px92y91 } CellNode (93 @ 91) (156)Px106y73 { Px105y73 } CellNode (106 @ 73) (156)Px105y75 { Px104y75, Px105y74 } CellNode (105 @ 75) (156)Px41y110 { Px41y109 } CellNode (41 @ 110) (156)Px16y114 { Px16y113, Px16y115 } CellNode (16 @ 114) (156)Px13y20 { Px12y20 } CellNode (13 @ 20) (156)Px116y5 { Px115y5 } CellNode (116 @ 5) (156)Px28y5 { Px28y6 } CellNode (28 @ 5) (156)Px59y83 { Px60y83 } CellNode (59 @ 83) (156)Px16y110 { Px16y111, Px16y109 } CellNode (16 @ 110) (156)Px15y84 { Px14y84 } CellNode (15 @ 84) (156)Px97y48 { Px96y48, Px97y49, Px97y47 } CellNode (97 @ 48) (156)Px19y6 { Px19y5, Px18y6 } CellNode (19 @ 6) (156)Px109y70 { Px108y70 } CellNode (109 @ 70) (156)Px27y2 { Px28y2 } CellNode (27 @ 2) (156)Px117y29 { Px116y29, Px117y30 } CellNode (117 @ 29) (156)Px81y97 { Px81y96 } CellNode (81 @ 97) (156)Px99y55 { Px98y55 } CellNode (99 @ 55) (156)Px15y23 { Px14y23, Px16y23, Px15y24 } CellNode (15 @ 23) (156)Px51y15 { Px51y14, Px51y16 } CellNode (51 @ 15) (156)Px26y3 { Px25y3 } CellNode (26 @ 3) (156)Px80y61 { Px81y61, Px80y60 } CellNode (80 @ 61) (156)Px9y30 { Px10y30, Px9y31 } CellNode (9 @ 30) (156)Px119y17 { Px118y17, Px119y18 } CellNode (119 @ 17) (156)Px123y11 { Px123y12 } CellNode (123 @ 11) (156)Px97y78 { Px98y78, Px97y79 } CellNode (97 @ 78) (156)Px47y17 { Px48y17 } CellNode (47 @ 17) (156)Px11y15 { Px11y16, Px11y14 } CellNode (11 @ 15) (156)Px118y19 { Px118y18, Px117y19 } CellNode (118 @ 19) (156)Px21y4 { Px21y5 } CellNode (21 @ 4) (156)Px20y5 { Px19y5, Px21y5 } CellNode (20 @ 5) (156)Px53y7 { Px53y6, Px53y8 } CellNode (53 @ 7) (156)Px19y56 { Px19y55 } CellNode (19 @ 56) (156)Px15y108 { Px16y108 } CellNode (15 @ 108) (156)Px11y30 { Px11y31, Px10y30, Px11y29 } CellNode (11 @ 30) (156)Px100y76 { Px101y76, Px99y76 } CellNode (100 @ 76) (156)Px53y114 { Px54y114 } CellNode (53 @ 114) (156)Px48y45 { Px49y45 } CellNode (48 @ 45) (156)Px18y20 { Px18y21, Px19y20 } CellNode (18 @ 20) (156)Px79y100 { Px79y99, Px79y101 } CellNode (79 @ 100) (156)Px9y60 { Px9y61 } CellNode (9 @ 60) (156)Px78y5 { Px77y5 } CellNode (78 @ 5) (156)Px104y75 { Px103y75, Px105y75, Px104y74 } CellNode (104 @ 75) (156)Px15y104 { Px15y103 } CellNode (15 @ 104) (156)Px12y20 { Px13y20 } CellNode (12 @ 20) (156)Px26y13 { Px26y12 } CellNode (26 @ 13) (156)Px15y100 { Px15y101, Px15y99 } CellNode (15 @ 100) (156)Px16y108 { Px15y108, Px16y107, Px16y109 } CellNode (16 @ 108) (156)Px14y84 { Px15y84 } CellNode (14 @ 84) (156)Px15y8 { Px16y8 } CellNode (15 @ 8) (156)Px16y7 { Px17y7, Px16y8 } CellNode (16 @ 7) (156)Px54y114 { Px53y114, Px54y113 } CellNode (54 @ 114) (156)Px15y97 { Px15y98, Px15y96 } CellNode (15 @ 97) (156)Px103y54 { Px104y54 } CellNode (103 @ 54) (156)Px23y18 { Px22y18 } CellNode (23 @ 18) (156)Px102y75 { Px103y75, Px101y75 } CellNode (102 @ 75) (156)Px76y119 { Px77y119 } CellNode (76 @ 119) (156)Px14y23 { Px14y24, Px15y23, Px14y22 } CellNode (14 @ 23) (156)Px12y31 { Px11y31 } CellNode (12 @ 31) (156)Px110y68 { Px110y69 } CellNode (110 @ 68) (156)Px16y115 { Px16y114, Px16y116 } CellNode (16 @ 115) (156)Px4y61 { Px3y61 } CellNode (4 @ 61) (156)Px96y55 { Px95y55 } CellNode (96 @ 55) (156)Px64y76 { Px64y77 } CellNode (64 @ 76) (156)Px28y6 { Px28y5, Px28y7 } CellNode (28 @ 6) (156)Px50y45 { Px49y45, Px51y45 } CellNode (50 @ 45) (156)Px97y49 { Px97y48, Px98y49 } CellNode (97 @ 49) (156)Px16y111 { Px16y110, Px16y112 } CellNode (16 @ 111) (156)Px28y2 { Px27y2 } CellNode (28 @ 2) (156)Px16y22 { Px17y22, Px16y23 } CellNode (16 @ 22) (156)Px81y60 { Px81y61, Px80y60 } CellNode (81 @ 60) (156)Px15y24 { Px15y23, Px14y24 } CellNode (15 @ 24) (156)Px98y77 { Px98y78 } CellNode (98 @ 77) (156)Px54y113 { Px54y114 } CellNode (54 @ 113) (156)Px60y83 { Px59y83 } CellNode (60 @ 83) (156)Px84y27 { Px84y28 } CellNode (84 @ 27) (156)Px9y31 { Px10y31, Px9y30 } CellNode (9 @ 31) (156)Px119y18 { Px119y17, Px118y18 } CellNode (119 @ 18) (156)Px123y12 { Px123y11 } CellNode (123 @ 12) (156)Px97y79 { Px98y79, Px97y78 } CellNode (97 @ 79) (156)Px51y16 { Px50y16, Px51y15 } CellNode (51 @ 16) (156)Px11y16 { Px11y15 } CellNode (11 @ 16) (156)Px48y16 { Px48y17 } CellNode (48 @ 16) (156)Px21y5 { Px20y5, Px21y4 } CellNode (21 @ 5) (156)Px53y8 { Px53y7 } CellNode (53 @ 8) (156)Px107y52 { Px106y52 } CellNode (107 @ 52) (156)Px101y75 { Px102y75, Px101y76 } CellNode (101 @ 75) (156)Px11y31 { Px11y30, Px10y31, Px12y31 } CellNode (11 @ 31) (156)Px55y2 { Px55y3, Px56y2 } CellNode (55 @ 2) (156)Px54y3 { Px54y4, Px55y3 } CellNode (54 @ 3) (156)Px79y101 { Px79y100, Px79y102 } CellNode (79 @ 101) (156)Px9y61 { Px9y60, Px8y61 } CellNode (9 @ 61) (156)Px18y21 { Px17y21, Px18y20 } CellNode (18 @ 21) (156)Px100y92 { Px100y93 } CellNode (100 @ 92) (156)Px37y114 { Px38y114, Px37y115 } CellNode (37 @ 114) (156)Px77y118 { Px77y119 } CellNode (77 @ 118) (156)Px79y99 { Px79y100 } CellNode (79 @ 99) (156)Px15y101 { Px15y100 } CellNode (15 @ 101) (156)Px16y109 { Px16y110, Px16y108 } CellNode (16 @ 109) (156)Px16y8 { Px16y7, Px15y8 } CellNode (16 @ 8) (156)Px75y5 { Px75y6 } CellNode (75 @ 5) (156)Px103y74 { Px104y74, Px103y75 } CellNode (103 @ 74) (156)Px15y98 { Px15y97, Px15y99 } CellNode (15 @ 98) (156)Px26y10 { Px26y11, Px27y10 } CellNode (26 @ 10) (156)Px15y116 { Px16y116, Px15y117 } CellNode (15 @ 116) (156)Px14y24 { Px14y23, Px14y25, Px15y24 } CellNode (14 @ 24) (156)Px50y16 { Px51y16 } CellNode (50 @ 16) (156)Px91y82 { Px92y82, Px91y83 } CellNode (91 @ 82) (156)Px91y44 { Px92y44 } CellNode (91 @ 44) (156)Px110y69 { Px110y68 } CellNode (110 @ 69) (156)Px84y41 { Px83y41 } CellNode (84 @ 41) (156)Px16y116 { Px16y115, Px15y116 } CellNode (16 @ 116) (156)Px106y52 { Px107y52 } CellNode (106 @ 52) (156)Px21y19 { Px22y19, Px20y19 } CellNode (21 @ 19) (156)Px64y77 { Px64y76, Px63y77 } CellNode (64 @ 77) (156)Px92y91 { Px93y91 } CellNode (92 @ 91) (156)Px105y73 { Px106y73, Px105y74 } CellNode (105 @ 73) (156)Px27y8 { Px27y9, Px28y8 } CellNode (27 @ 8) (156)Px28y7 { Px28y6, Px28y8 } CellNode (28 @ 7) (156)Px16y112 { Px16y111, Px16y113 } CellNode (16 @ 112) (156)Px17y21 { Px18y21, Px17y22 } CellNode (17 @ 21) (156)Px16y23 { Px15y23, Px16y22 } CellNode (16 @ 23) (156)Px5y14 { Px4y14 } CellNode (5 @ 14) (156)Px97y46 { Px97y47 } CellNode (97 @ 46) (156)Px43y20 { Px42y20 } CellNode (43 @ 20) (156)Px98y78 { Px97y78, Px98y79, Px98y77 } CellNode (98 @ 78) (156)Px81y61 { Px80y61, Px81y60 } CellNode (81 @ 61) (156)Px17y6 { Px17y7, Px18y6 } CellNode (17 @ 6) (156)Px84y28 { Px84y27 } CellNode (84 @ 28) (156)Px96y48 { Px97y48 } CellNode (96 @ 48) (156)Px48y17 { Px47y17, Px48y16 } CellNode (48 @ 17) (156)Px108y70 { Px109y70 } CellNode (108 @ 70) (156)Px38y113 { Px38y114 } CellNode (38 @ 113) (156)Px108y32 { Px108y33 } CellNode (108 @ 32) (156)Px98y55 { Px99y55 } CellNode (98 @ 55) (156)Px116y29 { Px117y29 } CellNode (116 @ 29) (156)Px101y76 { Px101y75, Px100y76 } CellNode (101 @ 76) (156)Px49y45 { Px48y45, Px50y45 } CellNode (49 @ 45) (156)Px19y20 { Px18y20 } CellNode (19 @ 20) (156)Px114y71 { Px113y71 } CellNode (114 @ 71) (156)Px56y2 { Px55y2 } CellNode (56 @ 2) (156)Px55y3 { Px54y3, Px55y2 } CellNode (55 @ 3) (156)Px118y17 { Px119y17, Px118y18 } CellNode (118 @ 17) (156)Px53y5 { Px53y6, Px54y5 } CellNode (53 @ 5) (156)Px54y4 { Px54y3, Px54y5 } CellNode (54 @ 4) (156)Px79y102 { Px79y101 } CellNode (79 @ 102) (156)Px117y19 { Px118y19 } CellNode (117 @ 19) (156)Px83y41 { Px84y41 } CellNode (83 @ 41) (156)Px100y93 { Px100y92 } CellNode (100 @ 93) (156)Px11y28 { Px11y29 } CellNode (11 @ 28) (156)Px37y115 { Px37y114 } CellNode (37 @ 115) (156)Px77y119 { Px77y118, Px77y120, Px76y119 } CellNode (77 @ 119) (156)Px10y30 { Px11y30, Px9y30, Px10y31 } CellNode (10 @ 30) (156)Px20y19 { Px21y19 } CellNode (20 @ 19) (156)Px63y77 { Px63y78, Px64y77 } CellNode (63 @ 77) (156)Px77y4 { Px77y5 } CellNode (77 @ 4) (156)Px104y54 { Px103y54 } CellNode (104 @ 54) (156)Px54y82 { Px54y83 } CellNode (54 @ 82) (156)Px98y43 { Px98y44 } CellNode (98 @ 43) (156)Px75y6 { Px75y5 } CellNode (75 @ 6) (156)Px26y11 { Px26y10, Px26y12 } CellNode (26 @ 11) (156)Px117y30 { Px117y29 } CellNode (117 @ 30) (156)Px61y81 { Px61y82 } CellNode (61 @ 81) (156)Px15y117 { Px15y116 } CellNode (15 @ 117) (156)Px15y99 { Px15y98, Px15y100 } CellNode (15 @ 99) (156)Px103y75 { Px102y75, Px103y74, Px104y75 } CellNode (103 @ 75) (156)Px4y14 { Px5y14 } CellNode (4 @ 14) (156)Px14y25 { Px14y24 } CellNode (14 @ 25) (156)Px42y20 { Px43y20 } CellNode (42 @ 20) (156)Px91y83 { Px91y82 } CellNode (91 @ 83) (156)Px22y18 { Px23y18, Px22y19 } CellNode (22 @ 18) (156)Px51y45 { Px50y45 } CellNode (51 @ 45) (156)Px98y49 { Px97y49 } CellNode (98 @ 49) (156)Px28y8 { Px27y8, Px28y7 } CellNode (28 @ 8) (156)Px113y71 { Px114y71 } CellNode (113 @ 71) (156)Px41y109 { Px42y109, Px41y110 } CellNode (41 @ 109) (156)Px16y113 { Px16y114, Px16y112 } CellNode (16 @ 113) (156)Px17y22 { Px17y21, Px16y22 } CellNode (17 @ 22) (156)Px105y74 { Px104y74, Px105y75, Px105y73 } CellNode (105 @ 74) (156)Px27y9 { Px27y8, Px27y10 } CellNode (27 @ 9) (156)Px3y61 { Px4y61 } CellNode (3 @ 61) (156)Px22y29 { Px21y29 } CellNode (22 @ 29) (156)Px95y55 { Px96y55 } CellNode (95 @ 55) (156)Px19y5 { Px20y5, Px19y6 } CellNode (19 @ 5) (156)Px93y82 { Px92y82 } CellNode (93 @ 82) (156)Px17y7 { Px16y7, Px17y6 } CellNode (17 @ 7) (156)Px18y6 { Px17y6, Px19y6 } CellNode (18 @ 6) (156)Px115y5 { Px116y5 } CellNode (115 @ 5) (156)Px7y79 { Px6y79 } CellNode (7 @ 79) (156)Px98y79 { Px98y78, Px97y79 } CellNode (98 @ 79) (156)Px81y96 { Px81y97 } CellNode (81 @ 96) (156)Px42y109 { Px41y109 } CellNode (42 @ 109) (156)Px25y3 { Px26y3 } CellNode (25 @ 3) (156)Px38y114 { Px37y114, Px38y113 } CellNode (38 @ 114) (156)Px51y14 { Px51y15 } CellNode (51 @ 14) (156)Px108y33 { Px108y32 } CellNode (108 @ 33) (156)Px80y60 { Px80y61, Px81y60 } CellNode (80 @ 60) (156)Px97y47 { Px97y48, Px97y46 } CellNode (97 @ 47) (156)Px11y14 { Px11y15 } CellNode (11 @ 14) (156)Px118y18 { Px119y18, Px118y19, Px118y17 } CellNode (118 @ 18) (156)Px54y5 { Px54y4, Px53y5 } CellNode (54 @ 5) (156)Px53y6 { Px53y7, Px53y5 } CellNode (53 @ 6) (156)Px19y55 { Px19y56 } CellNode (19 @ 55) (156)Px11y29 { Px11y28, Px11y30 } CellNode (11 @ 29) (156)Px77y120 { Px77y119 } CellNode (77 @ 120) (156)Px10y31 { Px11y31, Px9y31, Px10y30 } CellNode (10 @ 31) (156)Px63y78 { Px63y77 } CellNode (63 @ 78) (156)Px15y103 { Px15y104 } CellNode (15 @ 103) (156)Px27y10 { Px27y9, Px26y10 } CellNode (27 @ 10) (156)Px77y5 { Px77y4, Px78y5 } CellNode (77 @ 5) (156)Px54y83 { Px54y82 } CellNode (54 @ 83) (156)Px98y44 { Px98y43 } CellNode (98 @ 44) (156)Px104y74 { Px103y74, Px105y74, Px104y75 } CellNode (104 @ 74) (156)Px26y12 { Px26y11, Px26y13 } CellNode (26 @ 12) (156)Px99y76 { Px100y76 } CellNode (99 @ 76) (156)Px61y82 { Px61y81 } CellNode (61 @ 82) (156)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="bibusLigne3">bibusLigne3messages none  defined. P1 { P2, P3 } Node (117 @ 125) (70)P2 { P1, P3, P4 } Node (80 @ 157) (70)P3 { P1, P2, P4, P5 } Node (98 @ 184) (70)P4 { P2, P3, P5 } Node (102 @ 222) (70)P5 { P3, P4, P6 } Node (117 @ 242) (70)P6 { P5, P7 } Node (176 @ 221) (70)P7 { P6, P8 } Node (235 @ 252) (70)P8 { P7, P9, P10, P11 } Node (189 @ 298) (70)P9 { P8, P10 } Node (146 @ 321) (70)P10 { P8, P9, P11 } Node (174 @ 359) (70)P11 { P8, P10, P12 } Node (221 @ 335) (70)P12 { P11 } Node (260 @ 335) (70)P13 { P14 } Node (374 @ 318) (70)P14 { P13 } Node (419 @ 359) (70)P16 { P17 } Node (506 @ 536) (70)P17 { P16 } Node (482 @ 598) (70)P22 { P23 } Node (793 @ 635) (70)P23 { P22 } Node (819 @ 590) (70)P24 { P25 } Node (878 @ 535) (70)P25 { P24 } Node (899 @ 531) (70)P27 { P28 } Node (1078 @ 507) (70)P28 { P27, P31 } Node (1112 @ 522) (70)P29 { P30 } Node (1142 @ 599) (70)P30 { P29, P31 } Node (1176 @ 560) (70)P31 { P28, P30, P32 } Node (1170 @ 513) (70)P32 { P31 } Node (1213 @ 476) (70)P34 { P35 } Node (1421 @ 502) (70)P35 { P34, P36 } Node (1442 @ 533) (70)P36 { P35, P37 } Node (1486 @ 552) (70)P37 { P36, P38 } Node (1529 @ 600) (70)P38 { P37, P39 } Node (1583 @ 595) (70)P39 { P38 } Node (1618 @ 652) (70)P40 { P41 } Node (1527 @ 786) (70)P41 { P40 } Node (1533 @ 803) (70)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange400Points50">genRange400Points50messages none  defined. P1 { P3, P4, P6, P7, P8, P10, P11, P12, P13, P14, P15, P16, P18, P19, P20, P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P44, P45, P46, P47, P48, P50 } NodeP2 { P5, P9, P11, P13, P15, P17, P21, P22, P26, P27, P29, P30, P33, P34, P35, P37, P41, P42, P43, P45 } NodeP3 { P1, P4, P6, P7, P8, P10, P11, P12, P13, P14, P15, P16, P18, P19, P20, P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P44, P45, P46, P47, P48, P49, P50 } NodeP4 { P1, P3, P5, P9, P10, P11, P12, P13, P15, P18, P19, P21, P22, P27, P28, P29, P34, P35, P38, P39, P40, P41, P42, P45, P50 } NodeP5 { P2, P4, P9, P11, P13, P15, P17, P21, P22, P26, P27, P29, P33, P34, P35, P37, P41, P42, P43, P45 } NodeP6 { P1, P3, P7, P8, P14, P16, P19, P20, P22, P23, P24, P25, P28, P30, P31, P32, P33, P36, P37, P38, P39, P40, P44, P46, P47, P48, P49, P50 } NodeP7 { P1, P3, P6, P8, P10, P11, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P36, P37, P38, P39, P40, P41, P42, P43, P44, P45, P46, P47, P48, P49, P50 } NodeP8 { P1, P3, P6, P7, P10, P13, P14, P15, P16, P18, P19, P20, P22, P23, P24, P25, P26, P28, P29, P30, P31, P32, P33, P37, P38, P39, P40, P41, P42, P44, P46, P47, P48, P50 } NodeP9 { P2, P4, P5, P10, P11, P12, P13, P15, P17, P21, P22, P26, P27, P29, P30, P32, P33, P34, P35, P37, P40, P41, P42, P43, P45 } NodeP10 { P1, P3, P4, P7, P8, P9, P11, P12, P13, P14, P15, P16, P18, P19, P20, P21, P22, P25, P26, P27, P28, P29, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P44, P45, P46, P48, P50 } NodeP11 { P1, P2, P3, P4, P5, P7, P9, P10, P12, P13, P14, P15, P17, P18, P19, P21, P22, P26, P27, P28, P29, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P45, P48, P50 } NodeP12 { P1, P3, P4, P9, P10, P11, P13, P15, P18, P19, P21, P27, P28, P29, P34, P35, P38, P39, P40, P41, P42, P45, P50 } NodeP13 { P1, P2, P3, P4, P5, P7, P8, P9, P10, P11, P12, P14, P15, P18, P19, P20, P21, P22, P26, P27, P28, P29, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P45, P48, P50 } NodeP14 { P1, P3, P6, P7, P8, P10, P11, P13, P15, P16, P18, P19, P20, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P37, P38, P39, P40, P41, P42, P44, P45, P46, P47, P48, P50 } NodeP15 { P1, P2, P3, P4, P5, P7, P8, P9, P10, P11, P12, P13, P14, P16, P17, P18, P19, P20, P21, P22, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P43, P44, P45, P46, P48, P50 } NodeP16 { P1, P3, P6, P7, P8, P10, P14, P15, P17, P19, P20, P21, P22, P23, P24, P25, P26, P27, P28, P30, P31, P32, P33, P34, P36, P37, P38, P39, P40, P41, P42, P43, P44, P46, P47, P48, P49, P50 } NodeP17 { P2, P5, P7, P9, P11, P15, P16, P21, P22, P24, P26, P27, P30, P31, P32, P33, P34, P35, P36, P37, P40, P41, P42, P43, P49 } NodeP18 { P1, P3, P4, P7, P8, P10, P11, P12, P13, P14, P15, P19, P20, P21, P22, P25, P27, P28, P29, P31, P32, P34, P35, P38, P39, P40, P41, P42, P44, P45, P46, P48, P50 } NodeP19 { P1, P3, P4, P6, P7, P8, P10, P11, P12, P13, P14, P15, P16, P18, P20, P21, P22, P23, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P44, P45, P46, P47, P48, P50 } NodeP20 { P1, P3, P6, P7, P8, P10, P13, P14, P15, P16, P18, P19, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P37, P38, P39, P40, P41, P42, P44, P45, P46, P47, P48, P49, P50 } NodeP21 { P1, P2, P3, P4, P5, P7, P9, P10, P11, P12, P13, P15, P16, P17, P18, P19, P22, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P37, P39, P40, P41, P42, P43, P45, P48, P50 } NodeP22 { P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P13, P14, P15, P16, P17, P18, P19, P20, P21, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40, P41, P42, P43, P44, P45, P46, P48, P49, P50 } NodeP23 { P1, P3, P6, P7, P8, P14, P16, P19, P20, P24, P25, P28, P30, P31, P32, P38, P39, P40, P44, P46, P47, P48, P49, P50 } NodeP24 { P1, P3, P6, P7, P8, P14, P16, P17, P20, P22, P23, P25, P26, P28, P30, P31, P32, P33, P36, P37, P38, P39, P40, P41, P43, P44, P46, P47, P48, P49, P50 } NodeP25 { P1, P3, P6, P7, P8, P10, P14, P15, P16, P18, P19, P20, P22, P23, P24, P26, P28, P30, P31, P32, P33, P36, P37, P38, P39, P40, P41, P42, P43, P44, P46, P47, P48, P49, P50 } NodeP26 { P1, P2, P3, P5, P7, P8, P9, P10, P11, P13, P14, P15, P16, P17, P19, P20, P21, P22, P24, P25, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P37, P38, P39, P40, P41, P42, P43, P44, P45, P46, P48, P49, P50 } NodeP27 { P1, P2, P3, P4, P5, P7, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22, P26, P28, P29, P30, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P43, P45, P48, P50 } NodeP28 { P1, P3, P4, P6, P7, P8, P10, P11, P12, P13, P14, P15, P16, P18, P19, P20, P21, P22, P23, P24, P25, P26, P27, P29, P30, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P44, P45, P46, P47, P48, P50 } NodeP29 { P1, P2, P3, P4, P5, P7, P8, P9, P10, P11, P12, P13, P14, P15, P18, P19, P20, P21, P22, P26, P27, P28, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P45, P48, P50 } NodeP30 { P1, P2, P3, P6, P7, P8, P9, P14, P15, P16, P17, P19, P20, P21, P22, P23, P24, P25, P26, P27, P28, P31, P32, P33, P34, P36, P37, P39, P40, P41, P42, P43, P44, P46, P48, P49, P50 } NodeP31 { P1, P3, P6, P7, P8, P10, P11, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P32, P33, P34, P35, P36, P37, P38, P39, P40, P41, P42, P43, P44, P45, P46, P47, P48, P49, P50 } NodeP32 { P1, P3, P6, P7, P8, P9, P10, P11, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P33, P34, P35, P36, P37, P38, P39, P40, P41, P42, P43, P44, P45, P46, P47, P48, P49, P50 } NodeP33 { P1, P2, P3, P5, P6, P7, P8, P9, P10, P11, P13, P14, P15, P16, P17, P19, P20, P21, P22, P24, P25, P26, P27, P28, P29, P30, P31, P32, P34, P35, P36, P37, P38, P39, P40, P41, P42, P43, P44, P45, P46, P48, P49, P50 } NodeP34 { P1, P2, P3, P4, P5, P7, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P21, P22, P26, P27, P28, P29, P30, P31, P32, P33, P35, P36, P37, P39, P40, P41, P42, P43, P45, P48, P50 } NodeP35 { P1, P2, P3, P4, P5, P9, P10, P11, P12, P13, P15, P17, P18, P19, P21, P22, P26, P27, P28, P29, P31, P32, P33, P34, P37, P39, P40, P41, P42, P45, P50 } NodeP36 { P6, P7, P16, P17, P22, P24, P25, P26, P30, P31, P32, P33, P34, P37, P43, P44, P49 } NodeP37 { P1, P2, P3, P5, P6, P7, P8, P9, P10, P11, P13, P14, P15, P16, P17, P19, P20, P21, P22, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P36, P39, P40, P41, P42, P43, P44, P45, P46, P48, P49, P50 } NodeP38 { P1, P3, P4, P6, P7, P8, P10, P11, P12, P13, P14, P15, P16, P18, P19, P20, P22, P23, P24, P25, P26, P27, P28, P29, P31, P32, P33, P39, P40, P41, P42, P44, P45, P46, P47, P48, P50 } NodeP39 { P1, P3, P4, P6, P7, P8, P10, P11, P12, P13, P14, P15, P16, P18, P19, P20, P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P37, P38, P40, P41, P42, P44, P45, P46, P47, P48, P50 } NodeP40 { P1, P3, P4, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P37, P38, P39, P41, P42, P44, P45, P46, P47, P48, P50 } NodeP41 { P1, P2, P3, P4, P5, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P37, P38, P39, P40, P42, P43, P44, P45, P46, P48, P50 } NodeP42 { P1, P2, P3, P4, P5, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P43, P44, P45, P48, P50 } NodeP43 { P2, P5, P7, P9, P15, P16, P17, P21, P22, P24, P25, P26, P27, P30, P31, P32, P33, P34, P36, P37, P41, P42, P44, P48, P49 } NodeP44 { P1, P3, P6, P7, P8, P10, P14, P15, P16, P18, P19, P20, P22, P23, P24, P25, P26, P28, P30, P31, P32, P33, P36, P37, P38, P39, P40, P41, P42, P43, P46, P47, P48, P49, P50 } NodeP45 { P1, P2, P3, P4, P5, P7, P9, P10, P11, P12, P13, P14, P15, P18, P19, P20, P21, P22, P26, P27, P28, P29, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P48, P50 } NodeP46 { P1, P3, P6, P7, P8, P10, P14, P15, P16, P18, P19, P20, P22, P23, P24, P25, P26, P28, P30, P31, P32, P33, P37, P38, P39, P40, P41, P44, P47, P48, P49, P50 } NodeP47 { P1, P3, P6, P7, P8, P14, P16, P19, P20, P23, P24, P25, P28, P31, P32, P38, P39, P40, P44, P46, P48, P50 } NodeP48 { P1, P3, P6, P7, P8, P10, P11, P13, P14, P15, P16, P18, P19, P20, P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P37, P38, P39, P40, P41, P42, P43, P44, P45, P46, P47, P49, P50 } NodeP49 { P3, P6, P7, P16, P17, P20, P22, P23, P24, P25, P26, P30, P31, P32, P33, P36, P37, P43, P44, P46, P48 } NodeP50 { P1, P3, P4, P6, P7, P8, P10, P11, P12, P13, P14, P15, P16, P18, P19, P20, P21, P22, P23, P24, P25, P26, P27, P28, P29, P30, P31, P32, P33, P34, P35, P37, P38, P39, P40, P41, P42, P44, P45, P46, P47, P48 } Node</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="genRange200Points20">genRange200Points20messages none  defined. P1 { P16, P17, P20 } Node (561 @ 571) (200)P10 { P2, P16, P17, P19 } Node (458 @ 377) (200)P11 { P2, P5, P6, P7, P12, P14, P15 } Node (352 @ 162) (200)P12 { P5, P11, P14, P15 } Node (236 @ 21) (200)P13 { P3, P4, P9, P18 } Node (78 @ 570) (200)P14 { P2, P5, P6, P7, P11, P12, P15 } Node (310 @ 117) (200)P15 { P5, P7, P11, P12, P14 } Node (390 @ 87) (200)P16 { P1, P10, P17, P19, P20 } Node (432 @ 497) (200)P17 { P1, P10, P16, P20 } Node (604 @ 427) (200)P18 { P9, P13, P19 } Node (224 @ 616) (200)P19 { P9, P10, P16, P18 } Node (322 @ 503) (200)P2 { P5, P6, P7, P10, P11, P14 } Node (311 @ 301) (200)P20 { P1, P16, P17 } Node (598 @ 578) (200)P3 { P4, P8, P9, P13 } Node (17 @ 397) (200)P4 { P3, P9, P13 } Node (12 @ 479) (200)P5 { P2, P6, P7, P11, P12, P14, P15 } Node (319 @ 139) (200)P6 { P2, P5, P7, P8, P11, P14 } Node (200 @ 275) (200)P7 { P2, P5, P6, P11, P14, P15 } Node (286 @ 250) (200)P8 { P3, P6 } Node (70 @ 241) (200)P9 { P3, P4, P13, P18, P19 } Node (169 @ 476) (200)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="rade0">rade0messages none  defined. Px10y1 { Px9y1, Px11y1, Px10y2 } CellNode (10 @ 1) (20)Px10y10 { Px9y10, Px11y10, Px10y9, Px10y11 } CellNode (10 @ 10) (20)Px10y11 { Px10y10, Px9y11, Px10y12, Px11y11 } CellNode (10 @ 11) (20)Px10y12 { Px10y13, Px10y11, Px9y12, Px11y12 } CellNode (10 @ 12) (20)Px10y13 { Px11y13, Px10y14, Px10y12, Px9y13 } CellNode (10 @ 13) (20)Px10y14 { Px9y14, Px11y14, Px10y15, Px10y13 } CellNode (10 @ 14) (20)Px10y15 { Px10y14, Px9y15, Px11y15, Px10y16 } CellNode (10 @ 15) (20)Px10y16 { Px11y16, Px10y17, Px10y15, Px9y16 } CellNode (10 @ 16) (20)Px10y17 { Px9y17, Px11y17, Px10y18, Px10y16 } CellNode (10 @ 17) (20)Px10y18 { Px10y17, Px9y18, Px10y19, Px11y18 } CellNode (10 @ 18) (20)Px10y19 { Px10y18, Px10y20, Px9y19, Px11y19 } CellNode (10 @ 19) (20)Px10y2 { Px10y1, Px9y2, Px11y2, Px10y3 } CellNode (10 @ 2) (20)Px10y20 { Px11y20, Px10y19, Px10y21, Px9y20 } CellNode (10 @ 20) (20)Px10y21 { Px10y22, Px9y21, Px11y21, Px10y20 } CellNode (10 @ 21) (20)Px10y22 { Px9y22, Px10y23, Px11y22, Px10y21 } CellNode (10 @ 22) (20)Px10y23 { Px10y22, Px10y24, Px9y23, Px11y23 } CellNode (10 @ 23) (20)Px10y24 { Px10y25, Px11y24, Px10y23, Px9y24 } CellNode (10 @ 24) (20)Px10y25 { Px10y26, Px9y25, Px11y25, Px10y24 } CellNode (10 @ 25) (20)Px10y26 { Px10y27, Px9y26, Px11y26, Px10y25 } CellNode (10 @ 26) (20)Px10y27 { Px9y27, Px10y26, Px11y27 } CellNode (10 @ 27) (20)Px10y3 { Px10y4, Px10y2, Px11y3, Px9y3 } CellNode (10 @ 3) (20)Px10y4 { Px10y3, Px10y5, Px9y4, Px11y4 } CellNode (10 @ 4) (20)Px10y5 { Px10y4, Px11y5, Px9y5, Px10y6 } CellNode (10 @ 5) (20)Px10y6 { Px11y6, Px9y6, Px10y5, Px10y7 } CellNode (10 @ 6) (20)Px10y7 { Px10y8, Px11y7, Px9y7, Px10y6 } CellNode (10 @ 7) (20)Px10y8 { Px10y7, Px9y8, Px10y9, Px11y8 } CellNode (10 @ 8) (20)Px10y9 { Px10y10, Px10y8, Px9y9, Px11y9 } CellNode (10 @ 9) (20)Px11y1 { Px10y1, Px11y2, Px12y1 } CellNode (11 @ 1) (20)Px11y10 { Px10y10, Px11y9, Px11y11, Px12y10 } CellNode (11 @ 10) (20)Px11y11 { Px12y11, Px11y10, Px10y11, Px11y12 } CellNode (11 @ 11) (20)Px11y12 { Px11y13, Px12y12, Px11y11, Px10y12 } CellNode (11 @ 12) (20)Px11y13 { Px10y13, Px11y14, Px12y13, Px11y12 } CellNode (11 @ 13) (20)Px11y14 { Px12y14, Px10y14, Px11y13, Px11y15 } CellNode (11 @ 14) (20)Px11y15 { Px11y16, Px12y15, Px11y14, Px10y15 } CellNode (11 @ 15) (20)Px11y16 { Px11y17, Px12y16, Px11y15, Px10y16 } CellNode (11 @ 16) (20)Px11y17 { Px10y17, Px11y16, Px11y18, Px12y17 } CellNode (11 @ 17) (20)Px11y18 { Px12y18, Px11y17, Px10y18, Px11y19 } CellNode (11 @ 18) (20)Px11y19 { Px11y20, Px12y19, Px10y19, Px11y18 } CellNode (11 @ 19) (20)Px11y2 { Px12y2, Px10y2, Px11y3, Px11y1 } CellNode (11 @ 2) (20)Px11y20 { Px12y20, Px10y20, Px11y21, Px11y19 } CellNode (11 @ 20) (20)Px11y21 { Px11y20, Px11y22, Px10y21, Px12y21 } CellNode (11 @ 21) (20)Px11y22 { Px10y22, Px12y22, Px11y21, Px11y23 } CellNode (11 @ 22) (20)Px11y23 { Px12y23, Px11y24, Px10y23, Px11y22 } CellNode (11 @ 23) (20)Px11y24 { Px12y24, Px11y25, Px10y24, Px11y23 } CellNode (11 @ 24) (20)Px11y25 { Px10y25, Px11y24, Px11y26, Px12y25 } CellNode (11 @ 25) (20)Px11y26 { Px12y26, Px10y26, Px11y27, Px11y25 } CellNode (11 @ 26) (20)Px11y27 { Px12y27, Px10y27, Px11y26 } CellNode (11 @ 27) (20)Px11y3 { Px11y2, Px12y3, Px11y4, Px10y3 } CellNode (11 @ 3) (20)Px11y4 { Px10y4, Px11y5, Px11y3, Px12y4 } CellNode (11 @ 4) (20)Px11y5 { Px11y6, Px10y5, Px12y5, Px11y4 } CellNode (11 @ 5) (20)Px11y6 { Px12y6, Px11y5, Px10y6, Px11y7 } CellNode (11 @ 6) (20)Px11y7 { Px10y7, Px12y7, Px11y6, Px11y8 } CellNode (11 @ 7) (20)Px11y8 { Px10y8, Px11y9, Px11y7, Px12y8 } CellNode (11 @ 8) (20)Px11y9 { Px12y9, Px11y10, Px10y9, Px11y8 } CellNode (11 @ 9) (20)Px12y1 { Px13y1, Px11y1, Px12y2 } CellNode (12 @ 1) (20)Px12y10 { Px12y11, Px11y10, Px13y10, Px12y9 } CellNode (12 @ 10) (20)Px12y11 { Px12y12, Px13y11, Px11y11, Px12y10 } CellNode (12 @ 11) (20)Px12y12 { Px12y13, Px12y11, Px13y12, Px11y12 } CellNode (12 @ 12) (20)Px12y13 { Px13y13, Px12y14, Px11y13, Px12y12 } CellNode (12 @ 13) (20)Px12y14 { Px12y15, Px11y14, Px13y14, Px12y13 } CellNode (12 @ 14) (20)Px12y15 { Px12y14, Px13y15, Px11y15, Px12y16 } CellNode (12 @ 15) (20)Px12y16 { Px12y17, Px11y16, Px12y15, Px13y16 } CellNode (12 @ 16) (20)Px12y17 { Px12y18, Px11y17, Px13y17, Px12y16 } CellNode (12 @ 17) (20)Px12y18 { Px13y18, Px11y18, Px12y19, Px12y17 } CellNode (12 @ 18) (20)Px12y19 { Px12y18, Px12y20, Px13y19, Px11y19 } CellNode (12 @ 19) (20)Px12y2 { Px12y3, Px11y2, Px13y2, Px12y1 } CellNode (12 @ 2) (20)Px12y20 { Px11y20, Px12y19, Px12y21, Px13y20 } CellNode (12 @ 20) (20)Px12y21 { Px13y21, Px12y20, Px11y21, Px12y22 } CellNode (12 @ 21) (20)Px12y22 { Px12y23, Px13y22, Px11y22, Px12y21 } CellNode (12 @ 22) (20)Px12y23 { Px12y22, Px12y24, Px13y23, Px11y23 } CellNode (12 @ 23) (20)Px12y24 { Px13y24, Px12y23, Px11y24, Px12y25 } CellNode (12 @ 24) (20)Px12y25 { Px12y26, Px13y25, Px12y24, Px11y25 } CellNode (12 @ 25) (20)Px12y26 { Px12y27, Px13y26, Px11y26, Px12y25 } CellNode (12 @ 26) (20)Px12y27 { Px13y27, Px11y27, Px12y26 } CellNode (12 @ 27) (20)Px12y3 { Px13y3, Px12y4, Px11y3, Px12y2 } CellNode (12 @ 3) (20)Px12y4 { Px13y4, Px12y3, Px12y5, Px11y4 } CellNode (12 @ 4) (20)Px12y5 { Px12y6, Px11y5, Px13y5, Px12y4 } CellNode (12 @ 5) (20)Px12y6 { Px11y6, Px12y7, Px12y5, Px13y6 } CellNode (12 @ 6) (20)Px12y7 { Px12y6, Px13y7, Px11y7, Px12y8 } CellNode (12 @ 7) (20)Px12y8 { Px12y9, Px12y7, Px13y8, Px11y8 } CellNode (12 @ 8) (20)Px12y9 { Px11y9, Px12y8, Px13y9, Px12y10 } CellNode (12 @ 9) (20)Px13y1 { Px13y2, Px14y1, Px12y1 } CellNode (13 @ 1) (20)Px13y10 { Px13y11, Px13y9, Px14y10, Px12y10 } CellNode (13 @ 10) (20)Px13y11 { Px14y11, Px12y11, Px13y10, Px13y12 } CellNode (13 @ 11) (20)Px13y12 { Px13y13, Px14y12, Px12y12, Px13y11 } CellNode (13 @ 12) (20)Px13y13 { Px13y14, Px14y13, Px13y12, Px12y13 } CellNode (13 @ 13) (20)Px13y14 { Px13y13, Px12y14, Px13y15, Px14y14 } CellNode (13 @ 14) (20)Px13y15 { Px14y15, Px12y15, Px13y14, Px13y16 } CellNode (13 @ 15) (20)Px13y16 { Px13y17, Px14y16, Px12y16, Px13y15 } CellNode (13 @ 16) (20)Px13y17 { Px12y17, Px13y18, Px14y17, Px13y16 } CellNode (13 @ 17) (20)Px13y18 { Px14y18, Px12y18, Px13y17, Px13y19 } CellNode (13 @ 18) (20)Px13y19 { Px14y19, Px13y18, Px12y19, Px13y20 } CellNode (13 @ 19) (20)Px13y2 { Px12y2, Px13y1, Px14y2, Px13y3 } CellNode (13 @ 2) (20)Px13y20 { Px14y20, Px13y21, Px12y20, Px13y19 } CellNode (13 @ 20) (20)Px13y21 { Px14y21, Px12y21, Px13y22, Px13y20 } CellNode (13 @ 21) (20)Px13y22 { Px12y22, Px13y21, Px14y22, Px13y23 } CellNode (13 @ 22) (20)Px13y23 { Px14y23, Px12y23, Px13y24, Px13y22 } CellNode (13 @ 23) (20)Px13y24 { Px13y25, Px12y24, Px14y24, Px13y23 } CellNode (13 @ 24) (20)Px13y25 { Px13y24, Px14y25, Px12y25, Px13y26 } CellNode (13 @ 25) (20)Px13y26 { Px12y26, Px14y26, Px13y25, Px13y27 } CellNode (13 @ 26) (20)Px13y27 { Px13y26, Px14y27, Px12y27 } CellNode (13 @ 27) (20)Px13y3 { Px12y3, Px13y4, Px13y2, Px14y3 } CellNode (13 @ 3) (20)Px13y4 { Px13y3, Px12y4, Px13y5, Px14y4 } CellNode (13 @ 4) (20)Px13y5 { Px13y4, Px14y5, Px12y5, Px13y6 } CellNode (13 @ 5) (20)Px13y6 { Px12y6, Px13y7, Px13y5, Px14y6 } CellNode (13 @ 6) (20)Px13y7 { Px12y7, Px13y8, Px14y7, Px13y6 } CellNode (13 @ 7) (20)Px13y8 { Px14y8, Px13y7, Px12y8, Px13y9 } CellNode (13 @ 8) (20)Px13y9 { Px13y10, Px14y9, Px13y8, Px12y9 } CellNode (13 @ 9) (20)Px14y1 { Px13y1, Px14y2, Px15y1 } CellNode (14 @ 1) (20)Px14y10 { Px14y11, Px15y10, Px14y9, Px13y10 } CellNode (14 @ 10) (20)Px14y11 { Px15y11, Px14y12, Px13y11, Px14y10 } CellNode (14 @ 11) (20)Px14y12 { Px14y11, Px15y12, Px13y12, Px14y13 } CellNode (14 @ 12) (20)Px14y13 { Px13y13, Px15y13, Px14y12, Px14y14 } CellNode (14 @ 13) (20)Px14y14 { Px14y15, Px13y14, Px15y14, Px14y13 } CellNode (14 @ 14) (20)Px14y15 { Px15y15, Px13y15, Px14y16, Px14y14 } CellNode (14 @ 15) (20)Px14y16 { Px14y17, Px14y15, Px15y16, Px13y16 } CellNode (14 @ 16) (20)Px14y17 { Px15y17, Px14y18, Px13y17, Px14y16 } CellNode (14 @ 17) (20)Px14y18 { Px15y18, Px13y18, Px14y19, Px14y17 } CellNode (14 @ 18) (20)Px14y19 { Px14y18, Px14y20, Px15y19, Px13y19 } CellNode (14 @ 19) (20)Px14y2 { Px15y2, Px14y1, Px13y2, Px14y3 } CellNode (14 @ 2) (20)Px14y20 { Px14y19, Px14y21, Px15y20, Px13y20 } CellNode (14 @ 20) (20)Px14y21 { Px15y21, Px14y20, Px13y21, Px14y22 } CellNode (14 @ 21) (20)Px14y22 { Px14y23, Px15y22, Px13y22, Px14y21 } CellNode (14 @ 22) (20)Px14y23 { Px14y24, Px15y23, Px13y23, Px14y22 } CellNode (14 @ 23) (20)Px14y24 { Px14y23, Px13y24, Px14y25, Px15y24 } CellNode (14 @ 24) (20)Px14y25 { Px15y25, Px13y25, Px14y24, Px14y26 } CellNode (14 @ 25) (20)Px14y26 { Px15y26, Px14y27, Px14y25, Px13y26 } CellNode (14 @ 26) (20)Px14y27 { Px13y27, Px15y27, Px14y26 } CellNode (14 @ 27) (20)Px14y3 { Px14y4, Px14y2, Px15y3, Px13y3 } CellNode (14 @ 3) (20)Px14y4 { Px13y4, Px14y5, Px14y3, Px15y4 } CellNode (14 @ 4) (20)Px14y5 { Px15y5, Px13y5, Px14y6, Px14y4 } CellNode (14 @ 5) (20)Px14y6 { Px15y6, Px14y5, Px14y7, Px13y6 } CellNode (14 @ 6) (20)Px14y7 { Px14y8, Px13y7, Px14y6, Px15y7 } CellNode (14 @ 7) (20)Px14y8 { Px13y8, Px14y9, Px14y7, Px15y8 } CellNode (14 @ 8) (20)Px14y9 { Px14y8, Px15y9, Px13y9, Px14y10 } CellNode (14 @ 9) (20)Px15y1 { Px14y1, Px15y2, Px16y1 } CellNode (15 @ 1) (20)Px15y10 { Px15y9, Px16y10, Px15y11, Px14y10 } CellNode (15 @ 10) (20)Px15y11 { Px14y11, Px15y10, Px16y11, Px15y12 } CellNode (15 @ 11) (20)Px15y12 { Px15y13, Px15y11, Px14y12, Px16y12 } CellNode (15 @ 12) (20)Px15y13 { Px16y13, Px15y14, Px15y12, Px14y13 } CellNode (15 @ 13) (20)Px15y14 { Px15y13, Px16y14, Px15y15, Px14y14 } CellNode (15 @ 14) (20)Px15y15 { Px14y15, Px15y14, Px15y16, Px16y15 } CellNode (15 @ 15) (20)Px15y16 { Px16y16, Px15y17, Px15y15, Px14y16 } CellNode (15 @ 16) (20)Px15y17 { Px15y18, Px16y17, Px15y16, Px14y17 } CellNode (15 @ 17) (20)Px15y18 { Px14y18, Px15y17, Px15y19, Px16y18 } CellNode (15 @ 18) (20)Px15y19 { Px15y18, Px14y19, Px15y20, Px16y19 } CellNode (15 @ 19) (20)Px15y2 { Px16y2, Px15y3, Px14y2, Px15y1 } CellNode (15 @ 2) (20)Px15y20 { Px15y21, Px14y20, Px16y20, Px15y19 } CellNode (15 @ 20) (20)Px15y21 { Px16y21, Px14y21, Px15y22, Px15y20 } CellNode (15 @ 21) (20)Px15y22 { Px15y21, Px16y22, Px15y23, Px14y22 } CellNode (15 @ 22) (20)Px15y23 { Px14y23, Px15y24, Px15y22, Px16y23 } CellNode (15 @ 23) (20)Px15y24 { Px16y24, Px15y25, Px14y24, Px15y23 } CellNode (15 @ 24) (20)Px15y25 { Px15y26, Px16y25, Px14y25, Px15y24 } CellNode (15 @ 25) (20)Px15y26 { Px15y25, Px15y27, Px16y26, Px14y26 } CellNode (15 @ 26) (20)Px15y27 { Px15y26, Px14y27, Px16y27 } CellNode (15 @ 27) (20)Px15y3 { Px15y2, Px16y3, Px15y4, Px14y3 } CellNode (15 @ 3) (20)Px15y4 { Px15y5, Px15y3, Px16y4, Px14y4 } CellNode (15 @ 4) (20)Px15y5 { Px14y5, Px15y6, Px16y5, Px15y4 } CellNode (15 @ 5) (20)Px15y6 { Px15y5, Px14y6, Px15y7, Px16y6 } CellNode (15 @ 6) (20)Px15y7 { Px16y7, Px15y6, Px14y7, Px15y8 } CellNode (15 @ 7) (20)Px15y8 { Px14y8, Px15y9, Px15y7, Px16y8 } CellNode (15 @ 8) (20)Px15y9 { Px15y10, Px14y9, Px15y8, Px16y9 } CellNode (15 @ 9) (20)Px16y1 { Px17y1, Px15y1, Px16y2 } CellNode (16 @ 1) (20)Px16y10 { Px15y10, Px16y11, Px16y9, Px17y10 } CellNode (16 @ 10) (20)Px16y11 { Px17y11, Px16y10, Px15y11, Px16y12 } CellNode (16 @ 11) (20)Px16y12 { Px16y13, Px17y12, Px15y12, Px16y11 } CellNode (16 @ 12) (20)Px16y13 { Px15y13, Px16y14, Px17y13, Px16y12 } CellNode (16 @ 13) (20)Px16y14 { Px17y14, Px16y13, Px15y14, Px16y15 } CellNode (16 @ 14) (20)Px16y15 { Px16y16, Px17y15, Px15y15, Px16y14 } CellNode (16 @ 15) (20)Px16y16 { Px16y17, Px17y16, Px15y16, Px16y15 } CellNode (16 @ 16) (20)Px16y17 { Px16y16, Px15y17, Px16y18, Px17y17 } CellNode (16 @ 17) (20)Px16y18 { Px17y18, Px15y18, Px16y17, Px16y19 } CellNode (16 @ 18) (20)Px16y19 { Px16y20, Px17y19, Px15y19, Px16y18 } CellNode (16 @ 19) (20)Px16y2 { Px15y2, Px16y3, Px17y2, Px16y1 } CellNode (16 @ 2) (20)Px16y20 { Px17y20, Px16y21, Px15y20, Px16y19 } CellNode (16 @ 20) (20)Px16y21 { Px15y21, Px16y20, Px17y21, Px16y22 } CellNode (16 @ 21) (20)Px16y22 { Px16y23, Px16y21, Px15y22, Px17y22 } CellNode (16 @ 22) (20)Px16y23 { Px17y23, Px16y24, Px16y22, Px15y23 } CellNode (16 @ 23) (20)Px16y24 { Px15y24, Px17y24, Px16y25, Px16y23 } CellNode (16 @ 24) (20)Px16y25 { Px16y24, Px15y25, Px17y25, Px16y26 } CellNode (16 @ 25) (20)Px16y26 { Px17y26, Px15y26, Px16y27, Px16y25 } CellNode (16 @ 26) (20)Px16y27 { Px15y27, Px17y27, Px16y26 } CellNode (16 @ 27) (20)Px16y3 { Px16y2, Px17y3, Px15y3, Px16y4 } CellNode (16 @ 3) (20)Px16y4 { Px16y3, Px17y4, Px16y5, Px15y4 } CellNode (16 @ 4) (20)Px16y5 { Px15y5, Px16y4, Px17y5, Px16y6 } CellNode (16 @ 5) (20)Px16y6 { Px15y6, Px16y7, Px16y5, Px17y6 } CellNode (16 @ 6) (20)Px16y7 { Px17y7, Px15y7, Px16y8, Px16y6 } CellNode (16 @ 7) (20)Px16y8 { Px16y7, Px17y8, Px15y8, Px16y9 } CellNode (16 @ 8) (20)Px16y9 { Px15y9, Px16y10, Px16y8, Px17y9 } CellNode (16 @ 9) (20)Px17y1 { Px17y2, Px18y1, Px16y1 } CellNode (17 @ 1) (20)Px17y10 { Px18y10, Px16y10, Px17y11, Px17y9 } CellNode (17 @ 10) (20)Px17y11 { Px17y12, Px16y11, Px18y11, Px17y10 } CellNode (17 @ 11) (20)Px17y12 { Px18y12, Px17y11, Px17y13, Px16y12 } CellNode (17 @ 12) (20)Px17y13 { Px17y14, Px16y13, Px18y13, Px17y12 } CellNode (17 @ 13) (20)Px17y14 { Px18y14, Px17y15, Px16y14, Px17y13 } CellNode (17 @ 14) (20)Px17y15 { Px17y14, Px18y15, Px16y15, Px17y16 } CellNode (17 @ 15) (20)Px17y16 { Px16y16, Px17y17, Px17y15, Px18y16 } CellNode (17 @ 16) (20)Px17y17 { Px18y17, Px16y17, Px17y18, Px17y16 } CellNode (17 @ 17) (20)Px17y18 { Px18y18, Px16y18, Px17y19, Px17y17 } CellNode (17 @ 18) (20)Px17y19 { Px17y18, Px17y20, Px18y19, Px16y19 } CellNode (17 @ 19) (20)Px17y2 { Px17y3, Px16y2, Px18y2, Px17y1 } CellNode (17 @ 2) (20)Px17y20 { Px16y20, Px17y19, Px17y21, Px18y20 } CellNode (17 @ 20) (20)Px17y21 { Px18y21, Px16y21, Px17y20, Px17y22 } CellNode (17 @ 21) (20)Px17y22 { Px17y23, Px18y22, Px16y22, Px17y21 } CellNode (17 @ 22) (20)Px17y23 { Px16y23, Px17y24, Px18y23, Px17y22 } CellNode (17 @ 23) (20)Px17y24 { Px18y24, Px17y23, Px16y24, Px17y25 } CellNode (17 @ 24) (20)Px17y25 { Px17y26, Px18y25, Px16y25, Px17y24 } CellNode (17 @ 25) (20)Px17y26 { Px17y27, Px18y26, Px17y25, Px16y26 } CellNode (17 @ 26) (20)Px17y27 { Px17y26, Px18y27, Px16y27 } CellNode (17 @ 27) (20)Px17y3 { Px16y3, Px17y4, Px17y2, Px18y3 } CellNode (17 @ 3) (20)Px17y4 { Px17y3, Px18y4, Px16y4, Px17y5 } CellNode (17 @ 4) (20)Px17y5 { Px17y4, Px18y5, Px16y5, Px17y6 } CellNode (17 @ 5) (20)Px17y6 { Px17y7, Px17y5, Px18y6, Px16y6 } CellNode (17 @ 6) (20)Px17y7 { Px17y6, Px16y7, Px17y8, Px18y7 } CellNode (17 @ 7) (20)Px17y8 { Px18y8, Px17y7, Px16y8, Px17y9 } CellNode (17 @ 8) (20)Px17y9 { Px18y9, Px17y8, Px16y9, Px17y10 } CellNode (17 @ 9) (20)Px18y1 { Px17y1, Px18y2, Px19y1 } CellNode (18 @ 1) (20)Px18y10 { Px18y9, Px18y11, Px19y10, Px17y10 } CellNode (18 @ 10) (20)Px18y11 { Px19y11, Px18y10, Px17y11, Px18y12 } CellNode (18 @ 11) (20)Px18y12 { Px18y13, Px19y12, Px17y12, Px18y11 } CellNode (18 @ 12) (20)Px18y13 { Px18y14, Px19y13, Px17y13, Px18y12 } CellNode (18 @ 13) (20)Px18y14 { Px17y14, Px18y13, Px18y15, Px19y14 } CellNode (18 @ 14) (20)Px18y15 { Px19y15, Px18y14, Px17y15, Px18y16 } CellNode (18 @ 15) (20)Px18y16 { Px18y17, Px19y16, Px18y15, Px17y16 } CellNode (18 @ 16) (20)Px18y17 { Px17y17, Px18y18, Px19y17, Px18y16 } CellNode (18 @ 17) (20)Px18y18 { Px19y18, Px17y18, Px18y17, Px18y19 } CellNode (18 @ 18) (20)Px18y19 { Px19y19, Px18y18, Px17y19, Px18y20 } CellNode (18 @ 19) (20)Px18y2 { Px19y2, Px18y1, Px18y3, Px17y2 } CellNode (18 @ 2) (20)Px18y20 { Px18y21, Px17y20, Px19y20, Px18y19 } CellNode (18 @ 20) (20)Px18y21 { Px19y21, Px18y22, Px17y21, Px18y20 } CellNode (18 @ 21) (20)Px18y22 { Px18y23, Px18y21, Px19y22, Px17y22 } CellNode (18 @ 22) (20)Px18y23 { Px19y23, Px17y23, Px18y24, Px18y22 } CellNode (18 @ 23) (20)Px18y24 { Px19y24, Px17y24, Px18y25, Px18y23 } CellNode (18 @ 24) (20)Px18y25 { Px18y24, Px18y26, Px19y25, Px17y25 } CellNode (18 @ 25) (20)Px18y26 { Px18y27, Px17y26, Px18y25, Px19y26 } CellNode (18 @ 26) (20)Px18y27 { Px17y27, Px18y26, Px19y27 } CellNode (18 @ 27) (20)Px18y3 { Px17y3, Px18y4, Px19y3, Px18y2 } CellNode (18 @ 3) (20)Px18y4 { Px18y5, Px17y4, Px18y3, Px19y4 } CellNode (18 @ 4) (20)Px18y5 { Px19y5, Px18y4, Px17y5, Px18y6 } CellNode (18 @ 5) (20)Px18y6 { Px17y6, Px19y6, Px18y5, Px18y7 } CellNode (18 @ 6) (20)Px18y7 { Px18y8, Px17y7, Px18y6, Px19y7 } CellNode (18 @ 7) (20)Px18y8 { Px19y8, Px18y9, Px17y8, Px18y7 } CellNode (18 @ 8) (20)Px18y9 { Px18y8, Px19y9, Px18y10, Px17y9 } CellNode (18 @ 9) (20)Px19y1 { Px18y1, Px19y2, Px20y1 } CellNode (19 @ 1) (20)Px19y10 { Px20y10, Px19y11, Px19y9, Px18y10 } CellNode (19 @ 10) (20)Px19y11 { Px19y12, Px20y11, Px18y11, Px19y10 } CellNode (19 @ 11) (20)Px19y12 { Px19y11, Px20y12, Px18y12, Px19y13 } CellNode (19 @ 12) (20)Px19y13 { Px18y13, Px19y14, Px19y12, Px20y13 } CellNode (19 @ 13) (20)Px19y14 { Px20y14, Px18y14, Px19y15, Px19y13 } CellNode (19 @ 14) (20)Px19y15 { Px19y16, Px18y15, Px20y15, Px19y14 } CellNode (19 @ 15) (20)Px19y16 { Px18y16, Px19y15, Px20y16, Px19y17 } CellNode (19 @ 16) (20)Px19y17 { Px20y17, Px18y17, Px19y18, Px19y16 } CellNode (19 @ 17) (20)Px19y18 { Px20y18, Px18y18, Px19y19, Px19y17 } CellNode (19 @ 18) (20)Px19y19 { Px19y18, Px19y20, Px20y19, Px18y19 } CellNode (19 @ 19) (20)Px19y2 { Px20y2, Px19y3, Px18y2, Px19y1 } CellNode (19 @ 2) (20)Px19y20 { Px19y19, Px19y21, Px20y20, Px18y20 } CellNode (19 @ 20) (20)Px19y21 { Px20y21, Px18y21, Px19y20, Px19y22 } CellNode (19 @ 21) (20)Px19y22 { Px19y23, Px20y22, Px19y21, Px18y22 } CellNode (19 @ 22) (20)Px19y23 { Px19y24, Px20y23, Px19y22, Px18y23 } CellNode (19 @ 23) (20)Px19y24 { Px19y23, Px18y24, Px19y25, Px20y24 } CellNode (19 @ 24) (20)Px19y25 { Px20y25, Px19y24, Px18y25, Px19y26 } CellNode (19 @ 25) (20)Px19y26 { Px19y27, Px20y26, Px18y26, Px19y25 } CellNode (19 @ 26) (20)Px19y27 { Px19y26, Px18y27, Px20y27 } CellNode (19 @ 27) (20)Px19y3 { Px19y2, Px20y3, Px18y3, Px19y4 } CellNode (19 @ 3) (20)Px19y4 { Px18y4, Px19y5, Px19y3, Px20y4 } CellNode (19 @ 4) (20)Px19y5 { Px18y5, Px19y6, Px19y4, Px20y5 } CellNode (19 @ 5) (20)Px19y6 { Px19y5, Px20y6, Px18y6, Px19y7 } CellNode (19 @ 6) (20)Px19y7 { Px18y7, Px19y6, Px20y7, Px19y8 } CellNode (19 @ 7) (20)Px19y8 { Px18y8, Px19y9, Px19y7, Px20y8 } CellNode (19 @ 8) (20)Px19y9 { Px20y9, Px18y9, Px19y10, Px19y8 } CellNode (19 @ 9) (20)Px1y1 { Px1y2, Px2y1 } CellNode (1 @ 1) (20)Px1y10 { Px1y11, Px1y9, Px2y10 } CellNode (1 @ 10) (20)Px1y11 { Px1y12, Px2y11, Px1y10 } CellNode (1 @ 11) (20)Px1y12 { Px1y13, Px2y12, Px1y11 } CellNode (1 @ 12) (20)Px1y13 { Px1y14, Px2y13, Px1y12 } CellNode (1 @ 13) (20)Px1y14 { Px2y14, Px1y13, Px1y15 } CellNode (1 @ 14) (20)Px1y15 { Px1y14, Px2y15, Px1y16 } CellNode (1 @ 15) (20)Px1y16 { Px1y15, Px2y16, Px1y17 } CellNode (1 @ 16) (20)Px1y17 { Px1y18, Px2y17, Px1y16 } CellNode (1 @ 17) (20)Px1y18 { Px1y19, Px2y18, Px1y17 } CellNode (1 @ 18) (20)Px1y19 { Px1y20, Px2y19, Px1y18 } CellNode (1 @ 19) (20)Px1y2 { Px1y3, Px1y1, Px2y2 } CellNode (1 @ 2) (20)Px1y20 { Px2y20, Px1y19, Px1y21 } CellNode (1 @ 20) (20)Px1y21 { Px1y20, Px2y21, Px1y22 } CellNode (1 @ 21) (20)Px1y22 { Px1y23, Px2y22, Px1y21 } CellNode (1 @ 22) (20)Px1y23 { Px1y22, Px1y24, Px2y23 } CellNode (1 @ 23) (20)Px1y24 { Px1y23, Px2y24, Px1y25 } CellNode (1 @ 24) (20)Px1y25 { Px2y25, Px1y24, Px1y26 } CellNode (1 @ 25) (20)Px1y26 { Px1y25, Px1y27, Px2y26 } CellNode (1 @ 26) (20)Px1y27 { Px2y27, Px1y26 } CellNode (1 @ 27) (20)Px1y3 { Px1y4, Px1y2, Px2y3 } CellNode (1 @ 3) (20)Px1y4 { Px1y5, Px1y3, Px2y4 } CellNode (1 @ 4) (20)Px1y5 { Px1y4, Px1y6, Px2y5 } CellNode (1 @ 5) (20)Px1y6 { Px2y6, Px1y7, Px1y5 } CellNode (1 @ 6) (20)Px1y7 { Px1y8, Px1y6, Px2y7 } CellNode (1 @ 7) (20)Px1y8 { Px1y7, Px1y9, Px2y8 } CellNode (1 @ 8) (20)Px1y9 { Px2y9, Px1y8, Px1y10 } CellNode (1 @ 9) (20)Px20y1 { Px19y1, Px20y2, Px21y1 } CellNode (20 @ 1) (20)Px20y10 { Px20y9, Px20y11, Px21y10, Px19y10 } CellNode (20 @ 10) (20)Px20y11 { Px19y11, Px20y10, Px20y12, Px21y11 } CellNode (20 @ 11) (20)Px20y12 { Px21y12, Px19y12, Px20y11, Px20y13 } CellNode (20 @ 12) (20)Px20y13 { Px20y14, Px21y13, Px20y12, Px19y13 } CellNode (20 @ 13) (20)Px20y14 { Px19y14, Px20y15, Px21y14, Px20y13 } CellNode (20 @ 14) (20)Px20y15 { Px21y15, Px19y15, Px20y14, Px20y16 } CellNode (20 @ 15) (20)Px20y16 { Px20y17, Px21y16, Px19y16, Px20y15 } CellNode (20 @ 16) (20)Px20y17 { Px20y18, Px21y17, Px19y17, Px20y16 } CellNode (20 @ 17) (20)Px20y18 { Px20y17, Px19y18, Px20y19, Px21y18 } CellNode (20 @ 18) (20)Px20y19 { Px21y19, Px20y18, Px19y19, Px20y20 } CellNode (20 @ 19) (20)Px20y2 { Px19y2, Px20y3, Px21y2, Px20y1 } CellNode (20 @ 2) (20)Px20y20 { Px21y20, Px19y20, Px20y21, Px20y19 } CellNode (20 @ 20) (20)Px20y21 { Px21y21, Px19y21, Px20y22, Px20y20 } CellNode (20 @ 21) (20)Px20y22 { Px20y21, Px21y22, Px19y22, Px20y23 } CellNode (20 @ 22) (20)Px20y23 { Px19y23, Px21y23, Px20y22, Px20y24 } CellNode (20 @ 23) (20)Px20y24 { Px20y25, Px19y24, Px21y24, Px20y23 } CellNode (20 @ 24) (20)Px20y25 { Px20y26, Px19y25, Px21y25, Px20y24 } CellNode (20 @ 25) (20)Px20y26 { Px20y27, Px20y25, Px21y26, Px19y26 } CellNode (20 @ 26) (20)Px20y27 { Px20y26, Px19y27, Px21y27 } CellNode (20 @ 27) (20)Px20y3 { Px20y2, Px21y3, Px19y3, Px20y4 } CellNode (20 @ 3) (20)Px20y4 { Px20y3, Px21y4, Px19y4, Px20y5 } CellNode (20 @ 4) (20)Px20y5 { Px19y5, Px20y6, Px20y4, Px21y5 } CellNode (20 @ 5) (20)Px20y6 { Px21y6, Px19y6, Px20y7, Px20y5 } CellNode (20 @ 6) (20)Px20y7 { Px20y6, Px21y7, Px19y7, Px20y8 } CellNode (20 @ 7) (20)Px20y8 { Px20y9, Px21y8, Px20y7, Px19y8 } CellNode (20 @ 8) (20)Px20y9 { Px20y10, Px19y9, Px21y9, Px20y8 } CellNode (20 @ 9) (20)Px21y1 { Px22y1, Px20y1, Px21y2 } CellNode (21 @ 1) (20)Px21y10 { Px20y10, Px22y10, Px21y9, Px21y11 } CellNode (21 @ 10) (20)Px21y11 { Px22y11, Px20y11, Px21y12, Px21y10 } CellNode (21 @ 11) (20)Px21y12 { Px22y12, Px20y12, Px21y13, Px21y11 } CellNode (21 @ 12) (20)Px21y13 { Px22y13, Px21y12, Px21y14, Px20y13 } CellNode (21 @ 13) (20)Px21y14 { Px22y14, Px20y14, Px21y15, Px21y13 } CellNode (21 @ 14) (20)Px21y15 { Px22y15, Px20y15, Px21y16, Px21y14 } CellNode (21 @ 15) (20)Px21y16 { Px21y15, Px22y16, Px20y16, Px21y17 } CellNode (21 @ 16) (20)Px21y17 { Px20y17, Px22y17, Px21y16, Px21y18 } CellNode (21 @ 17) (20)Px21y18 { Px22y18, Px20y18, Px21y19, Px21y17 } CellNode (21 @ 18) (20)Px21y19 { Px21y20, Px22y19, Px20y19, Px21y18 } CellNode (21 @ 19) (20)Px21y2 { Px20y2, Px21y3, Px22y2, Px21y1 } CellNode (21 @ 2) (20)Px21y20 { Px21y19, Px21y21, Px22y20, Px20y20 } CellNode (21 @ 20) (20)Px21y21 { Px21y20, Px20y21, Px21y22, Px22y21 } CellNode (21 @ 21) (20)Px21y22 { Px22y22, Px21y21, Px20y22, Px21y23 } CellNode (21 @ 22) (20)Px21y23 { Px21y24, Px22y23, Px21y22, Px20y23 } CellNode (21 @ 23) (20)Px21y24 { Px21y23, Px21y25, Px22y24, Px20y24 } CellNode (21 @ 24) (20)Px21y25 { Px22y25, Px20y25, Px21y24, Px21y26 } CellNode (21 @ 25) (20)Px21y26 { Px21y27, Px22y26, Px20y26, Px21y25 } CellNode (21 @ 26) (20)Px21y27 { Px20y27, Px22y27, Px21y26 } CellNode (21 @ 27) (20)Px21y3 { Px20y3, Px21y4, Px22y3, Px21y2 } CellNode (21 @ 3) (20)Px21y4 { Px21y3, Px22y4, Px20y4, Px21y5 } CellNode (21 @ 4) (20)Px21y5 { Px20y5, Px21y4, Px22y5, Px21y6 } CellNode (21 @ 5) (20)Px21y6 { Px20y6, Px21y7, Px22y6, Px21y5 } CellNode (21 @ 6) (20)Px21y7 { Px21y6, Px21y8, Px20y7, Px22y7 } CellNode (21 @ 7) (20)Px21y8 { Px22y8, Px21y7, Px21y9, Px20y8 } CellNode (21 @ 8) (20)Px21y9 { Px20y9, Px21y8, Px22y9, Px21y10 } CellNode (21 @ 9) (20)Px22y1 { Px22y2, Px23y1, Px21y1 } CellNode (22 @ 1) (20)Px22y10 { Px22y11, Px23y10, Px22y9, Px21y10 } CellNode (22 @ 10) (20)Px22y11 { Px22y10, Px22y12, Px23y11, Px21y11 } CellNode (22 @ 11) (20)Px22y12 { Px22y11, Px21y12, Px23y12, Px22y13 } CellNode (22 @ 12) (20)Px22y13 { Px22y14, Px23y13, Px22y12, Px21y13 } CellNode (22 @ 13) (20)Px22y14 { Px22y15, Px23y14, Px21y14, Px22y13 } CellNode (22 @ 14) (20)Px22y15 { Px22y14, Px21y15, Px22y16, Px23y15 } CellNode (22 @ 15) (20)Px22y16 { Px23y16, Px22y15, Px21y16, Px22y17 } CellNode (22 @ 16) (20)Px22y17 { Px23y17, Px22y18, Px22y16, Px21y17 } CellNode (22 @ 17) (20)Px22y18 { Px22y17, Px23y18, Px22y19, Px21y18 } CellNode (22 @ 18) (20)Px22y19 { Px22y18, Px21y19, Px22y20, Px23y19 } CellNode (22 @ 19) (20)Px22y2 { Px23y2, Px22y1, Px22y3, Px21y2 } CellNode (22 @ 2) (20)Px22y20 { Px21y20, Px22y21, Px22y19, Px23y20 } CellNode (22 @ 20) (20)Px22y21 { Px23y21, Px21y21, Px22y22, Px22y20 } CellNode (22 @ 21) (20)Px22y22 { Px23y22, Px22y23, Px21y22, Px22y21 } CellNode (22 @ 22) (20)Px22y23 { Px22y24, Px22y22, Px23y23, Px21y23 } CellNode (22 @ 23) (20)Px22y24 { Px22y25, Px23y24, Px21y24, Px22y23 } CellNode (22 @ 24) (20)Px22y25 { Px22y26, Px23y25, Px21y25, Px22y24 } CellNode (22 @ 25) (20)Px22y26 { Px22y25, Px23y26, Px21y26, Px22y27 } CellNode (22 @ 26) (20)Px22y27 { Px23y27, Px22y26, Px21y27 } CellNode (22 @ 27) (20)Px22y3 { Px21y3, Px22y4, Px22y2, Px23y3 } CellNode (22 @ 3) (20)Px22y4 { Px21y4, Px22y5, Px22y3, Px23y4 } CellNode (22 @ 4) (20)Px22y5 { Px23y5, Px22y4, Px21y5, Px22y6 } CellNode (22 @ 5) (20)Px22y6 { Px22y7, Px22y5, Px23y6, Px21y6 } CellNode (22 @ 6) (20)Px22y7 { Px22y8, Px21y7, Px22y6, Px23y7 } CellNode (22 @ 7) (20)Px22y8 { Px22y7, Px21y8, Px22y9, Px23y8 } CellNode (22 @ 8) (20)Px22y9 { Px22y8, Px23y9, Px21y9, Px22y10 } CellNode (22 @ 9) (20)Px23y1 { Px22y1, Px23y2, Px24y1 } CellNode (23 @ 1) (20)Px23y10 { Px22y10, Px23y9, Px24y10, Px23y11 } CellNode (23 @ 10) (20)Px23y11 { Px24y11, Px22y11, Px23y10, Px23y12 } CellNode (23 @ 11) (20)Px23y12 { Px23y13, Px24y12, Px22y12, Px23y11 } CellNode (23 @ 12) (20)Px23y13 { Px23y14, Px24y13, Px23y12, Px22y13 } CellNode (23 @ 13) (20)Px23y14 { Px22y14, Px23y13, Px23y15, Px24y14 } CellNode (23 @ 14) (20)Px23y15 { Px24y15, Px22y15, Px23y14, Px23y16 } CellNode (23 @ 15) (20)Px23y16 { Px23y17, Px24y16, Px22y16, Px23y15 } CellNode (23 @ 16) (20)Px23y17 { Px23y16, Px23y18, Px24y17, Px22y17 } CellNode (23 @ 17) (20)Px23y18 { Px24y18, Px22y18, Px23y17, Px23y19 } CellNode (23 @ 18) (20)Px23y19 { Px24y19, Px23y18, Px22y19, Px23y20 } CellNode (23 @ 19) (20)Px23y2 { Px23y1, Px22y2, Px23y3, Px24y2 } CellNode (23 @ 2) (20)Px23y20 { Px24y20, Px23y21, Px22y20, Px23y19 } CellNode (23 @ 20) (20)Px23y21 { Px22y21, Px23y22, Px24y21, Px23y20 } CellNode (23 @ 21) (20)Px23y22 { Px22y22, Px23y21, Px23y23, Px24y22 } CellNode (23 @ 22) (20)Px23y23 { Px24y23, Px23y24, Px23y22, Px22y23 } CellNode (23 @ 23) (20)Px23y24 { Px24y24, Px23y25, Px23y23, Px22y24 } CellNode (23 @ 24) (20)Px23y25 { Px22y25, Px23y24, Px23y26, Px24y25 } CellNode (23 @ 25) (20)Px23y26 { Px24y26, Px22y26, Px23y25, Px23y27 } CellNode (23 @ 26) (20)Px23y27 { Px23y26, Px22y27, Px24y27 } CellNode (23 @ 27) (20)Px23y3 { Px24y3, Px23y2, Px22y3, Px23y4 } CellNode (23 @ 3) (20)Px23y4 { Px23y5, Px22y4, Px23y3, Px24y4 } CellNode (23 @ 4) (20)Px23y5 { Px23y6, Px22y5, Px23y4, Px24y5 } CellNode (23 @ 5) (20)Px23y6 { Px23y5, Px24y6, Px22y6, Px23y7 } CellNode (23 @ 6) (20)Px23y7 { Px22y7, Px23y6, Px24y7, Px23y8 } CellNode (23 @ 7) (20)Px23y8 { Px22y8, Px23y9, Px24y8, Px23y7 } CellNode (23 @ 8) (20)Px23y9 { Px24y9, Px23y10, Px22y9, Px23y8 } CellNode (23 @ 9) (20)Px24y1 { Px23y1, Px24y2, Px25y1 } CellNode (24 @ 1) (20)Px24y10 { Px24y11, Px25y10, Px23y10, Px24y9 } CellNode (24 @ 10) (20)Px24y11 { Px24y12, Px25y11, Px23y11, Px24y10 } CellNode (24 @ 11) (20)Px24y12 { Px24y11, Px24y13, Px23y12, Px25y12 } CellNode (24 @ 12) (20)Px24y13 { Px24y14, Px23y13, Px24y12, Px25y13 } CellNode (24 @ 13) (20)Px24y14 { Px25y14, Px23y14, Px24y15, Px24y13 } CellNode (24 @ 14) (20)Px24y15 { Px24y16, Px23y15, Px25y15, Px24y14 } CellNode (24 @ 15) (20)Px24y16 { Px23y16, Px24y15, Px24y17, Px25y16 } CellNode (24 @ 16) (20)Px24y17 { Px25y17, Px23y17, Px24y18, Px24y16 } CellNode (24 @ 17) (20)Px24y18 { Px24y19, Px23y18, Px25y18, Px24y17 } CellNode (24 @ 18) (20)Px24y19 { Px24y18, Px24y20, Px25y19, Px23y19 } CellNode (24 @ 19) (20)Px24y2 { Px23y2, Px24y3, Px24y1, Px25y2 } CellNode (24 @ 2) (20)Px24y20 { Px24y19, Px24y21, Px25y20, Px23y20 } CellNode (24 @ 20) (20)Px24y21 { Px25y21, Px24y20, Px23y21, Px24y22 } CellNode (24 @ 21) (20)Px24y22 { Px24y23, Px25y22, Px24y21, Px23y22 } CellNode (24 @ 22) (20)Px24y23 { Px24y24, Px25y23, Px23y23, Px24y22 } CellNode (24 @ 23) (20)Px24y24 { Px24y23, Px23y24, Px24y25, Px25y24 } CellNode (24 @ 24) (20)Px24y25 { Px25y25, Px24y24, Px23y25, Px24y26 } CellNode (24 @ 25) (20)Px24y26 { Px24y27, Px25y26, Px23y26, Px24y25 } CellNode (24 @ 26) (20)Px24y27 { Px23y27, Px25y27, Px24y26 } CellNode (24 @ 27) (20)Px24y3 { Px24y2, Px23y3, Px24y4, Px25y3 } CellNode (24 @ 3) (20)Px24y4 { Px24y3, Px25y4, Px23y4, Px24y5 } CellNode (24 @ 4) (20)Px24y5 { Px23y5, Px24y6, Px25y5, Px24y4 } CellNode (24 @ 5) (20)Px24y6 { Px23y6, Px24y7, Px24y5, Px25y6 } CellNode (24 @ 6) (20)Px24y7 { Px25y7, Px24y6, Px23y7, Px24y8 } CellNode (24 @ 7) (20)Px24y8 { Px23y8, Px25y8, Px24y7, Px24y9 } CellNode (24 @ 8) (20)Px24y9 { Px23y9, Px25y9, Px24y10, Px24y8 } CellNode (24 @ 9) (20)Px25y1 { Px24y1, Px25y2, Px26y1 } CellNode (25 @ 1) (20)Px25y10 { Px25y11, Px25y9, Px24y10, Px26y10 } CellNode (25 @ 10) (20)Px25y11 { Px24y11, Px25y10, Px25y12, Px26y11 } CellNode (25 @ 11) (20)Px25y12 { Px26y12, Px24y12, Px25y11, Px25y13 } CellNode (25 @ 12) (20)Px25y13 { Px25y14, Px26y13, Px24y13, Px25y12 } CellNode (25 @ 13) (20)Px25y14 { Px24y14, Px25y15, Px26y14, Px25y13 } CellNode (25 @ 14) (20)Px25y15 { Px26y15, Px25y14, Px24y15, Px25y16 } CellNode (25 @ 15) (20)Px25y16 { Px25y17, Px26y16, Px24y16, Px25y15 } CellNode (25 @ 16) (20)Px25y17 { Px25y18, Px26y17, Px25y16, Px24y17 } CellNode (25 @ 17) (20)Px25y18 { Px24y18, Px25y17, Px25y19, Px26y18 } CellNode (25 @ 18) (20)Px25y19 { Px26y19, Px24y19, Px25y18, Px25y20 } CellNode (25 @ 19) (20)Px25y2 { Px25y3, Px25y1, Px26y2, Px24y2 } CellNode (25 @ 2) (20)Px25y20 { Px26y20, Px24y20, Px25y21, Px25y19 } CellNode (25 @ 20) (20)Px25y21 { Px26y21, Px25y22, Px24y21, Px25y20 } CellNode (25 @ 21) (20)Px25y22 { Px25y21, Px25y23, Px26y22, Px24y22 } CellNode (25 @ 22) (20)Px25y23 { Px24y23, Px25y24, Px25y22, Px26y23 } CellNode (25 @ 23) (20)Px25y24 { Px26y24, Px24y24, Px25y25, Px25y23 } CellNode (25 @ 24) (20)Px25y25 { Px26y25, Px24y25, Px25y26, Px25y24 } CellNode (25 @ 25) (20)Px25y26 { Px25y27, Px25y25, Px26y26, Px24y26 } CellNode (25 @ 26) (20)Px25y27 { Px24y27, Px25y26, Px26y27 } CellNode (25 @ 27) (20)Px25y3 { Px24y3, Px25y4, Px26y3, Px25y2 } CellNode (25 @ 3) (20)Px25y4 { Px25y3, Px24y4, Px25y5, Px26y4 } CellNode (25 @ 4) (20)Px25y5 { Px26y5, Px25y4, Px24y5, Px25y6 } CellNode (25 @ 5) (20)Px25y6 { Px25y7, Px24y6, Px25y5, Px26y6 } CellNode (25 @ 6) (20)Px25y7 { Px24y7, Px25y8, Px26y7, Px25y6 } CellNode (25 @ 7) (20)Px25y8 { Px26y8, Px25y7, Px25y9, Px24y8 } CellNode (25 @ 8) (20)Px25y9 { Px25y10, Px25y8, Px26y9, Px24y9 } CellNode (25 @ 9) (20)Px26y1 { Px27y1, Px25y1, Px26y2 } CellNode (26 @ 1) (20)Px26y10 { Px26y11, Px25y10, Px26y9, Px27y10 } CellNode (26 @ 10) (20)Px26y11 { Px27y11, Px25y11, Px26y12, Px26y10 } CellNode (26 @ 11) (20)Px26y12 { Px27y12, Px26y13, Px25y12, Px26y11 } CellNode (26 @ 12) (20)Px26y13 { Px27y13, Px26y12, Px26y14, Px25y13 } CellNode (26 @ 13) (20)Px26y14 { Px26y15, Px25y14, Px27y14, Px26y13 } CellNode (26 @ 14) (20)Px26y15 { Px26y16, Px27y15, Px25y15, Px26y14 } CellNode (26 @ 15) (20)Px26y16 { Px26y15, Px26y17, Px25y16, Px27y16 } CellNode (26 @ 16) (20)Px26y17 { Px25y17, Px26y18, Px26y16, Px27y17 } CellNode (26 @ 17) (20)Px26y18 { Px26y19, Px27y18, Px25y18, Px26y17 } CellNode (26 @ 18) (20)Px26y19 { Px26y20, Px27y19, Px25y19, Px26y18 } CellNode (26 @ 19) (20)Px26y2 { Px27y2, Px26y1, Px26y3, Px25y2 } CellNode (26 @ 2) (20)Px26y20 { Px26y19, Px26y21, Px27y20, Px25y20 } CellNode (26 @ 20) (20)Px26y21 { Px26y20, Px25y21, Px26y22, Px27y21 } CellNode (26 @ 21) (20)Px26y22 { Px27y22, Px25y22, Px26y21, Px26y23 } CellNode (26 @ 22) (20)Px26y23 { Px26y24, Px27y23, Px25y23, Px26y22 } CellNode (26 @ 23) (20)Px26y24 { Px25y24, Px26y25, Px27y24, Px26y23 } CellNode (26 @ 24) (20)Px26y25 { Px27y25, Px26y24, Px25y25, Px26y26 } CellNode (26 @ 25) (20)Px26y26 { Px26y27, Px27y26, Px26y25, Px25y26 } CellNode (26 @ 26) (20)Px26y27 { Px26y26, Px25y27, Px27y27 } CellNode (26 @ 27) (20)Px26y3 { Px25y3, Px26y2, Px27y3, Px26y4 } CellNode (26 @ 3) (20)Px26y4 { Px26y5, Px25y4, Px27y4, Px26y3 } CellNode (26 @ 4) (20)Px26y5 { Px26y4, Px25y5, Px26y6, Px27y5 } CellNode (26 @ 5) (20)Px26y6 { Px26y5, Px27y6, Px25y6, Px26y7 } CellNode (26 @ 6) (20)Px26y7 { Px25y7, Px26y8, Px27y7, Px26y6 } CellNode (26 @ 7) (20)Px26y8 { Px25y8, Px26y9, Px27y8, Px26y7 } CellNode (26 @ 8) (20)Px26y9 { Px27y9, Px26y8, Px25y9, Px26y10 } CellNode (26 @ 9) (20)Px27y1 { Px27y2, Px28y1, Px26y1 } CellNode (27 @ 1) (20)Px27y10 { Px27y9, Px27y11, Px28y10, Px26y10 } CellNode (27 @ 10) (20)Px27y11 { Px26y11, Px27y12, Px28y11, Px27y10 } CellNode (27 @ 11) (20)Px27y12 { Px28y12, Px27y11, Px26y12, Px27y13 } CellNode (27 @ 12) (20)Px27y13 { Px27y14, Px28y13, Px27y12, Px26y13 } CellNode (27 @ 13) (20)Px27y14 { Px27y15, Px28y14, Px26y14, Px27y13 } CellNode (27 @ 14) (20)Px27y15 { Px26y15, Px27y14, Px27y16, Px28y15 } CellNode (27 @ 15) (20)Px27y16 { Px28y16, Px26y16, Px27y15, Px27y17 } CellNode (27 @ 16) (20)Px27y17 { Px27y18, Px28y17, Px26y17, Px27y16 } CellNode (27 @ 17) (20)Px27y18 { Px26y18, Px27y19, Px28y18, Px27y17 } CellNode (27 @ 18) (20)Px27y19 { Px26y19, Px27y18, Px27y20, Px28y19 } CellNode (27 @ 19) (20)Px27y2 { Px26y2, Px27y3, Px28y2, Px27y1 } CellNode (27 @ 2) (20)Px27y20 { Px26y20, Px28y20, Px27y19, Px27y21 } CellNode (27 @ 20) (20)Px27y21 { Px27y22, Px26y21, Px28y21, Px27y20 } CellNode (27 @ 21) (20)Px27y22 { Px28y22, Px26y22, Px27y23, Px27y21 } CellNode (27 @ 22) (20)Px27y23 { Px26y23, Px27y22, Px28y23, Px27y24 } CellNode (27 @ 23) (20)Px27y24 { Px28y24, Px26y24, Px27y25, Px27y23 } CellNode (27 @ 24) (20)Px27y25 { Px27y26, Px26y25, Px28y25, Px27y24 } CellNode (27 @ 25) (20)Px27y26 { Px27y25, Px28y26, Px26y26, Px27y27 } CellNode (27 @ 26) (20)Px27y27 { Px26y27, Px27y26, Px28y27 } CellNode (27 @ 27) (20)Px27y3 { Px27y2, Px28y3, Px27y4, Px26y3 } CellNode (27 @ 3) (20)Px27y4 { Px27y5, Px27y3, Px28y4, Px26y4 } CellNode (27 @ 4) (20)Px27y5 { Px26y5, Px27y6, Px27y4, Px28y5 } CellNode (27 @ 5) (20)Px27y6 { Px28y6, Px27y7, Px26y6, Px27y5 } CellNode (27 @ 6) (20)Px27y7 { Px28y7, Px27y6, Px26y7, Px27y8 } CellNode (27 @ 7) (20)Px27y8 { Px27y9, Px26y8, Px27y7, Px28y8 } CellNode (27 @ 8) (20)Px27y9 { Px27y8, Px26y9, Px28y9, Px27y10 } CellNode (27 @ 9) (20)Px28y1 { Px27y1, Px28y2, Px29y1 } CellNode (28 @ 1) (20)Px28y10 { Px29y10, Px28y11, Px28y9, Px27y10 } CellNode (28 @ 10) (20)Px28y11 { Px29y11, Px27y11, Px28y12, Px28y10 } CellNode (28 @ 11) (20)Px28y12 { Px28y13, Px27y12, Px29y12, Px28y11 } CellNode (28 @ 12) (20)Px28y13 { Px28y12, Px29y13, Px28y14, Px27y13 } CellNode (28 @ 13) (20)Px28y14 { Px27y14, Px28y15, Px28y13, Px29y14 } CellNode (28 @ 14) (20)Px28y15 { Px28y16, Px27y15, Px29y15, Px28y14 } CellNode (28 @ 15) (20)Px28y16 { Px29y16, Px27y16, Px28y17, Px28y15 } CellNode (28 @ 16) (20)Px28y17 { Px28y16, Px28y18, Px29y17, Px27y17 } CellNode (28 @ 17) (20)Px28y18 { Px29y18, Px27y18, Px28y17, Px28y19 } CellNode (28 @ 18) (20)Px28y19 { Px29y19, Px27y19, Px28y18, Px28y20 } CellNode (28 @ 19) (20)Px28y2 { Px27y2, Px28y3, Px28y1, Px29y2 } CellNode (28 @ 2) (20)Px28y20 { Px28y21, Px29y20, Px27y20, Px28y19 } CellNode (28 @ 20) (20)Px28y21 { Px28y20, Px28y22, Px29y21, Px27y21 } CellNode (28 @ 21) (20)Px28y22 { Px28y21, Px27y22, Px28y23, Px29y22 } CellNode (28 @ 22) (20)Px28y23 { Px28y24, Px29y23, Px28y22, Px27y23 } CellNode (28 @ 23) (20)Px28y24 { Px28y25, Px29y24, Px28y23, Px27y24 } CellNode (28 @ 24) (20)Px28y25 { Px28y24, Px27y25, Px28y26, Px29y25 } CellNode (28 @ 25) (20)Px28y26 { Px28y27, Px27y26, Px28y25, Px29y26 } CellNode (28 @ 26) (20)Px28y27 { Px29y27, Px28y26, Px27y27 } CellNode (28 @ 27) (20)Px28y3 { Px27y3, Px28y4, Px28y2, Px29y3 } CellNode (28 @ 3) (20)Px28y4 { Px28y3, Px29y4, Px27y4, Px28y5 } CellNode (28 @ 4) (20)Px28y5 { Px28y6, Px28y4, Px29y5, Px27y5 } CellNode (28 @ 5) (20)Px28y6 { Px28y7, Px27y6, Px29y6, Px28y5 } CellNode (28 @ 6) (20)Px28y7 { Px28y6, Px28y8, Px27y7, Px29y7 } CellNode (28 @ 7) (20)Px28y8 { Px29y8, Px28y7, Px28y9, Px27y8 } CellNode (28 @ 8) (20)Px28y9 { Px27y9, Px29y9, Px28y10, Px28y8 } CellNode (28 @ 9) (20)Px29y1 { Px28y1, Px29y2, Px30y1 } CellNode (29 @ 1) (20)Px29y10 { Px29y11, Px30y10, Px29y9, Px28y10 } CellNode (29 @ 10) (20)Px29y11 { Px29y12, Px30y11, Px28y11, Px29y10 } CellNode (29 @ 11) (20)Px29y12 { Px29y11, Px28y12, Px29y13, Px30y12 } CellNode (29 @ 12) (20)Px29y13 { Px30y13, Px28y13, Px29y12, Px29y14 } CellNode (29 @ 13) (20)Px29y14 { Px29y15, Px30y14, Px29y13, Px28y14 } CellNode (29 @ 14) (20)Px29y15 { Px28y15, Px29y16, Px30y15, Px29y14 } CellNode (29 @ 15) (20)Px29y16 { Px30y16, Px29y15, Px28y16, Px29y17 } CellNode (29 @ 16) (20)Px29y17 { Px29y18, Px30y17, Px29y16, Px28y17 } CellNode (29 @ 17) (20)Px29y18 { Px29y19, Px28y18, Px30y18, Px29y17 } CellNode (29 @ 18) (20)Px29y19 { Px29y18, Px29y20, Px28y19, Px30y19 } CellNode (29 @ 19) (20)Px29y2 { Px29y1, Px30y2, Px28y2, Px29y3 } CellNode (29 @ 2) (20)Px29y20 { Px29y19, Px29y21, Px30y20, Px28y20 } CellNode (29 @ 20) (20)Px29y21 { Px30y21, Px28y21, Px29y20, Px29y22 } CellNode (29 @ 21) (20)Px29y22 { Px29y23, Px30y22, Px28y22, Px29y21 } CellNode (29 @ 22) (20)Px29y23 { Px29y24, Px30y23, Px28y23, Px29y22 } CellNode (29 @ 23) (20)Px29y24 { Px28y24, Px29y23, Px29y25, Px30y24 } CellNode (29 @ 24) (20)Px29y25 { Px30y25, Px28y25, Px29y24, Px29y26 } CellNode (29 @ 25) (20)Px29y26 { Px29y27, Px30y26, Px28y26, Px29y25 } CellNode (29 @ 26) (20)Px29y27 { Px29y26, Px28y27, Px30y27 } CellNode (29 @ 27) (20)Px29y3 { Px28y3, Px29y4, Px29y2, Px30y3 } CellNode (29 @ 3) (20)Px29y4 { Px28y4, Px29y5, Px29y3, Px30y4 } CellNode (29 @ 4) (20)Px29y5 { Px29y4, Px30y5, Px29y6, Px28y5 } CellNode (29 @ 5) (20)Px29y6 { Px28y6, Px29y5, Px30y6, Px29y7 } CellNode (29 @ 6) (20)Px29y7 { Px28y7, Px29y8, Px29y6, Px30y7 } CellNode (29 @ 7) (20)Px29y8 { Px30y8, Px29y9, Px28y8, Px29y7 } CellNode (29 @ 8) (20)Px29y9 { Px29y8, Px30y9, Px28y9, Px29y10 } CellNode (29 @ 9) (20)Px2y1 { Px3y1, Px1y1, Px2y2 } CellNode (2 @ 1) (20)Px2y10 { Px2y9, Px2y11, Px3y10, Px1y10 } CellNode (2 @ 10) (20)Px2y11 { Px3y11, Px2y10, Px1y11, Px2y12 } CellNode (2 @ 11) (20)Px2y12 { Px2y13, Px3y12, Px2y11, Px1y12 } CellNode (2 @ 12) (20)Px2y13 { Px2y14, Px3y13, Px2y12, Px1y13 } CellNode (2 @ 13) (20)Px2y14 { Px2y13, Px1y14, Px2y15, Px3y14 } CellNode (2 @ 14) (20)Px2y15 { Px3y15, Px1y15, Px2y14, Px2y16 } CellNode (2 @ 15) (20)Px2y16 { Px2y17, Px3y16, Px1y16, Px2y15 } CellNode (2 @ 16) (20)Px2y17 { Px1y17, Px2y18, Px3y17, Px2y16 } CellNode (2 @ 17) (20)Px2y18 { Px3y18, Px2y17, Px1y18, Px2y19 } CellNode (2 @ 18) (20)Px2y19 { Px3y19, Px2y18, Px1y19, Px2y20 } CellNode (2 @ 19) (20)Px2y2 { Px2y3, Px1y2, Px3y2, Px2y1 } CellNode (2 @ 2) (20)Px2y20 { Px2y21, Px3y20, Px1y20, Px2y19 } CellNode (2 @ 20) (20)Px2y21 { Px2y20, Px3y21, Px2y22, Px1y21 } CellNode (2 @ 21) (20)Px2y22 { Px2y21, Px1y22, Px3y22, Px2y23 } CellNode (2 @ 22) (20)Px2y23 { Px3y23, Px2y24, Px1y23, Px2y22 } CellNode (2 @ 23) (20)Px2y24 { Px3y24, Px2y25, Px1y24, Px2y23 } CellNode (2 @ 24) (20)Px2y25 { Px2y24, Px1y25, Px3y25, Px2y26 } CellNode (2 @ 25) (20)Px2y26 { Px2y27, Px2y25, Px1y26, Px3y26 } CellNode (2 @ 26) (20)Px2y27 { Px2y26, Px1y27, Px3y27 } CellNode (2 @ 27) (20)Px2y3 { Px3y3, Px2y4, Px1y3, Px2y2 } CellNode (2 @ 3) (20)Px2y4 { Px3y4, Px2y3, Px2y5, Px1y4 } CellNode (2 @ 4) (20)Px2y5 { Px1y5, Px2y6, Px3y5, Px2y4 } CellNode (2 @ 5) (20)Px2y6 { Px1y6, Px2y7, Px3y6, Px2y5 } CellNode (2 @ 6) (20)Px2y7 { Px2y6, Px3y7, Px1y7, Px2y8 } CellNode (2 @ 7) (20)Px2y8 { Px2y9, Px2y7, Px3y8, Px1y8 } CellNode (2 @ 8) (20)Px2y9 { Px1y9, Px2y10, Px2y8, Px3y9 } CellNode (2 @ 9) (20)Px30y1 { Px29y1, Px30y2, Px31y1 } CellNode (30 @ 1) (20)Px30y10 { Px30y9, Px30y11, Px29y10, Px31y10 } CellNode (30 @ 10) (20)Px30y11 { Px29y11, Px31y11, Px30y10, Px30y12 } CellNode (30 @ 11) (20)Px30y12 { Px30y13, Px29y12, Px31y12, Px30y11 } CellNode (30 @ 12) (20)Px30y13 { Px31y13, Px29y13, Px30y14, Px30y12 } CellNode (30 @ 13) (20)Px30y14 { Px31y14, Px30y13, Px30y15, Px29y14 } CellNode (30 @ 14) (20)Px30y15 { Px31y15, Px29y15, Px30y16, Px30y14 } CellNode (30 @ 15) (20)Px30y16 { Px30y17, Px29y16, Px31y16, Px30y15 } CellNode (30 @ 16) (20)Px30y17 { Px30y16, Px31y17, Px29y17, Px30y18 } CellNode (30 @ 17) (20)Px30y18 { Px29y18, Px30y19, Px30y17, Px31y18 } CellNode (30 @ 18) (20)Px30y19 { Px31y19, Px29y19, Px30y18, Px30y20 } CellNode (30 @ 19) (20)Px30y2 { Px31y2, Px30y1, Px29y2, Px30y3 } CellNode (30 @ 2) (20)Px30y20 { Px30y21, Px31y20, Px29y20, Px30y19 } CellNode (30 @ 20) (20)Px30y21 { Px30y22, Px29y21, Px31y21, Px30y20 } CellNode (30 @ 21) (20)Px30y22 { Px30y21, Px30y23, Px29y22, Px31y22 } CellNode (30 @ 22) (20)Px30y23 { Px29y23, Px31y23, Px30y22, Px30y24 } CellNode (30 @ 23) (20)Px30y24 { Px30y25, Px29y24, Px31y24, Px30y23 } CellNode (30 @ 24) (20)Px30y25 { Px30y26, Px29y25, Px31y25, Px30y24 } CellNode (30 @ 25) (20)Px30y26 { Px31y26, Px30y25, Px30y27, Px29y26 } CellNode (30 @ 26) (20)Px30y27 { Px31y27, Px29y27, Px30y26 } CellNode (30 @ 27) (20)Px30y3 { Px30y2, Px31y3, Px29y3, Px30y4 } CellNode (30 @ 3) (20)Px30y4 { Px29y4, Px30y5, Px31y4, Px30y3 } CellNode (30 @ 4) (20)Px30y5 { Px31y5, Px29y5, Px30y6, Px30y4 } CellNode (30 @ 5) (20)Px30y6 { Px30y5, Px31y6, Px29y6, Px30y7 } CellNode (30 @ 6) (20)Px30y7 { Px30y8, Px31y7, Px30y6, Px29y7 } CellNode (30 @ 7) (20)Px30y8 { Px29y8, Px30y9, Px31y8, Px30y7 } CellNode (30 @ 8) (20)Px30y9 { Px30y8, Px31y9, Px30y10, Px29y9 } CellNode (30 @ 9) (20)Px31y1 { Px30y1, Px31y2 } CellNode (31 @ 1) (20)Px31y10 { Px30y10, Px31y11, Px31y9 } CellNode (31 @ 10) (20)Px31y11 { Px31y12, Px30y11, Px31y10 } CellNode (31 @ 11) (20)Px31y12 { Px30y12, Px31y13, Px31y11 } CellNode (31 @ 12) (20)Px31y13 { Px31y14, Px30y13, Px31y12 } CellNode (31 @ 13) (20)Px31y14 { Px31y15, Px31y13, Px30y14 } CellNode (31 @ 14) (20)Px31y15 { Px30y15, Px31y14, Px31y16 } CellNode (31 @ 15) (20)Px31y16 { Px31y15, Px31y17, Px30y16 } CellNode (31 @ 16) (20)Px31y17 { Px30y17, Px31y18, Px31y16 } CellNode (31 @ 17) (20)Px31y18 { Px31y19, Px31y17, Px30y18 } CellNode (31 @ 18) (20)Px31y19 { Px31y20, Px31y18, Px30y19 } CellNode (31 @ 19) (20)Px31y2 { Px31y1, Px30y2, Px31y3 } CellNode (31 @ 2) (20)Px31y20 { Px31y21, Px31y19, Px30y20 } CellNode (31 @ 20) (20)Px31y21 { Px31y20, Px31y22, Px30y21 } CellNode (31 @ 21) (20)Px31y22 { Px31y21, Px31y23, Px30y22 } CellNode (31 @ 22) (20)Px31y23 { Px31y24, Px31y22, Px30y23 } CellNode (31 @ 23) (20)Px31y24 { Px31y25, Px31y23, Px30y24 } CellNode (31 @ 24) (20)Px31y25 { Px31y26, Px31y24, Px30y25 } CellNode (31 @ 25) (20)Px31y26 { Px31y27, Px31y25, Px30y26 } CellNode (31 @ 26) (20)Px31y27 { Px30y27, Px31y26 } CellNode (31 @ 27) (20)Px31y3 { Px31y2, Px30y3, Px31y4 } CellNode (31 @ 3) (20)Px31y4 { Px31y3, Px30y4, Px31y5 } CellNode (31 @ 4) (20)Px31y5 { Px31y4, Px30y5, Px31y6 } CellNode (31 @ 5) (20)Px31y6 { Px31y5, Px30y6, Px31y7 } CellNode (31 @ 6) (20)Px31y7 { Px31y6, Px30y7, Px31y8 } CellNode (31 @ 7) (20)Px31y8 { Px31y9, Px30y8, Px31y7 } CellNode (31 @ 8) (20)Px31y9 { Px31y10, Px30y9, Px31y8 } CellNode (31 @ 9) (20)Px3y1 { Px3y2, Px4y1, Px2y1 } CellNode (3 @ 1) (20)Px3y10 { Px4y10, Px2y10, Px3y11, Px3y9 } CellNode (3 @ 10) (20)Px3y11 { Px3y12, Px2y11, Px4y11, Px3y10 } CellNode (3 @ 11) (20)Px3y12 { Px3y11, Px3y13, Px2y12, Px4y12 } CellNode (3 @ 12) (20)Px3y13 { Px2y13, Px4y13, Px3y12, Px3y14 } CellNode (3 @ 13) (20)Px3y14 { Px4y14, Px3y15, Px2y14, Px3y13 } CellNode (3 @ 14) (20)Px3y15 { Px4y15, Px3y16, Px2y15, Px3y14 } CellNode (3 @ 15) (20)Px3y16 { Px4y16, Px3y15, Px3y17, Px2y16 } CellNode (3 @ 16) (20)Px3y17 { Px4y17, Px2y17, Px3y18, Px3y16 } CellNode (3 @ 17) (20)Px3y18 { Px4y18, Px2y18, Px3y19, Px3y17 } CellNode (3 @ 18) (20)Px3y19 { Px3y18, Px3y20, Px4y19, Px2y19 } CellNode (3 @ 19) (20)Px3y2 { Px3y3, Px4y2, Px3y1, Px2y2 } CellNode (3 @ 2) (20)Px3y20 { Px3y19, Px3y21, Px4y20, Px2y20 } CellNode (3 @ 20) (20)Px3y21 { Px4y21, Px2y21, Px3y20, Px3y22 } CellNode (3 @ 21) (20)Px3y22 { Px3y23, Px4y22, Px3y21, Px2y22 } CellNode (3 @ 22) (20)Px3y23 { Px3y24, Px4y23, Px3y22, Px2y23 } CellNode (3 @ 23) (20)Px3y24 { Px2y24, Px3y23, Px3y25, Px4y24 } CellNode (3 @ 24) (20)Px3y25 { Px4y25, Px3y24, Px2y25, Px3y26 } CellNode (3 @ 25) (20)Px3y26 { Px3y27, Px4y26, Px3y25, Px2y26 } CellNode (3 @ 26) (20)Px3y27 { Px2y27, Px3y26, Px4y27 } CellNode (3 @ 27) (20)Px3y3 { Px3y4, Px2y3, Px3y2, Px4y3 } CellNode (3 @ 3) (20)Px3y4 { Px4y4, Px2y4, Px3y5, Px3y3 } CellNode (3 @ 4) (20)Px3y5 { Px3y4, Px4y5, Px3y6, Px2y5 } CellNode (3 @ 5) (20)Px3y6 { Px2y6, Px3y7, Px3y5, Px4y6 } CellNode (3 @ 6) (20)Px3y7 { Px2y7, Px3y8, Px3y6, Px4y7 } CellNode (3 @ 7) (20)Px3y8 { Px4y8, Px3y7, Px3y9, Px2y8 } CellNode (3 @ 8) (20)Px3y9 { Px3y8, Px4y9, Px3y10, Px2y9 } CellNode (3 @ 9) (20)Px4y1 { Px3y1, Px4y2, Px5y1 } CellNode (4 @ 1) (20)Px4y10 { Px4y11, Px4y9, Px5y10, Px3y10 } CellNode (4 @ 10) (20)Px4y11 { Px4y10, Px3y11, Px4y12, Px5y11 } CellNode (4 @ 11) (20)Px4y12 { Px5y12, Px3y12, Px4y11, Px4y13 } CellNode (4 @ 12) (20)Px4y13 { Px4y14, Px5y13, Px3y13, Px4y12 } CellNode (4 @ 13) (20)Px4y14 { Px4y13, Px4y15, Px5y14, Px3y14 } CellNode (4 @ 14) (20)Px4y15 { Px5y15, Px4y14, Px3y15, Px4y16 } CellNode (4 @ 15) (20)Px4y16 { Px4y17, Px5y16, Px4y15, Px3y16 } CellNode (4 @ 16) (20)Px4y17 { Px4y18, Px5y17, Px3y17, Px4y16 } CellNode (4 @ 17) (20)Px4y18 { Px4y17, Px3y18, Px4y19, Px5y18 } CellNode (4 @ 18) (20)Px4y19 { Px5y19, Px4y18, Px3y19, Px4y20 } CellNode (4 @ 19) (20)Px4y2 { Px4y1, Px5y2, Px3y2, Px4y3 } CellNode (4 @ 2) (20)Px4y20 { Px5y20, Px3y20, Px4y21, Px4y19 } CellNode (4 @ 20) (20)Px4y21 { Px5y21, Px3y21, Px4y22, Px4y20 } CellNode (4 @ 21) (20)Px4y22 { Px4y21, Px5y22, Px3y22, Px4y23 } CellNode (4 @ 22) (20)Px4y23 { Px3y23, Px5y23, Px4y22, Px4y24 } CellNode (4 @ 23) (20)Px4y24 { Px4y25, Px3y24, Px5y24, Px4y23 } CellNode (4 @ 24) (20)Px4y25 { Px4y26, Px3y25, Px5y25, Px4y24 } CellNode (4 @ 25) (20)Px4y26 { Px4y27, Px4y25, Px5y26, Px3y26 } CellNode (4 @ 26) (20)Px4y27 { Px3y27, Px5y27, Px4y26 } CellNode (4 @ 27) (20)Px4y3 { Px4y4, Px4y2, Px5y3, Px3y3 } CellNode (4 @ 3) (20)Px4y4 { Px3y4, Px4y5, Px5y4, Px4y3 } CellNode (4 @ 4) (20)Px4y5 { Px5y5, Px4y6, Px3y5, Px4y4 } CellNode (4 @ 5) (20)Px4y6 { Px5y6, Px4y5, Px3y6, Px4y7 } CellNode (4 @ 6) (20)Px4y7 { Px3y7, Px4y8, Px5y7, Px4y6 } CellNode (4 @ 7) (20)Px4y8 { Px3y8, Px4y9, Px4y7, Px5y8 } CellNode (4 @ 8) (20)Px4y9 { Px4y8, Px5y9, Px4y10, Px3y9 } CellNode (4 @ 9) (20)Px5y1 { Px4y1, Px5y2, Px6y1 } CellNode (5 @ 1) (20)Px5y10 { Px5y9, Px4y10, Px5y11, Px6y10 } CellNode (5 @ 10) (20)Px5y11 { Px5y12, Px6y11, Px4y11, Px5y10 } CellNode (5 @ 11) (20)Px5y12 { Px6y12, Px5y13, Px4y12, Px5y11 } CellNode (5 @ 12) (20)Px5y13 { Px4y13, Px5y12, Px6y13, Px5y14 } CellNode (5 @ 13) (20)Px5y14 { Px5y15, Px4y14, Px6y14, Px5y13 } CellNode (5 @ 14) (20)Px5y15 { Px5y16, Px4y15, Px6y15, Px5y14 } CellNode (5 @ 15) (20)Px5y16 { Px5y15, Px6y16, Px5y17, Px4y16 } CellNode (5 @ 16) (20)Px5y17 { Px4y17, Px5y18, Px5y16, Px6y17 } CellNode (5 @ 17) (20)Px5y18 { Px6y18, Px4y18, Px5y19, Px5y17 } CellNode (5 @ 18) (20)Px5y19 { Px5y20, Px6y19, Px4y19, Px5y18 } CellNode (5 @ 19) (20)Px5y2 { Px6y2, Px4y2, Px5y3, Px5y1 } CellNode (5 @ 2) (20)Px5y20 { Px5y19, Px5y21, Px6y20, Px4y20 } CellNode (5 @ 20) (20)Px5y21 { Px5y20, Px4y21, Px5y22, Px6y21 } CellNode (5 @ 21) (20)Px5y22 { Px6y22, Px5y21, Px4y22, Px5y23 } CellNode (5 @ 22) (20)Px5y23 { Px5y24, Px6y23, Px5y22, Px4y23 } CellNode (5 @ 23) (20)Px5y24 { Px5y23, Px5y25, Px6y24, Px4y24 } CellNode (5 @ 24) (20)Px5y25 { Px6y25, Px4y25, Px5y24, Px5y26 } CellNode (5 @ 25) (20)Px5y26 { Px5y27, Px6y26, Px4y26, Px5y25 } CellNode (5 @ 26) (20)Px5y27 { Px6y27, Px5y26, Px4y27 } CellNode (5 @ 27) (20)Px5y3 { Px5y2, Px6y3, Px5y4, Px4y3 } CellNode (5 @ 3) (20)Px5y4 { Px5y5, Px5y3, Px6y4, Px4y4 } CellNode (5 @ 4) (20)Px5y5 { Px5y6, Px4y5, Px5y4, Px6y5 } CellNode (5 @ 5) (20)Px5y6 { Px6y6, Px4y6, Px5y7, Px5y5 } CellNode (5 @ 6) (20)Px5y7 { Px5y6, Px6y7, Px4y7, Px5y8 } CellNode (5 @ 7) (20)Px5y8 { Px4y8, Px5y9, Px5y7, Px6y8 } CellNode (5 @ 8) (20)Px5y9 { Px4y9, Px5y10, Px5y8, Px6y9 } CellNode (5 @ 9) (20)Px6y1 { Px7y1, Px5y1, Px6y2 } CellNode (6 @ 1) (20)Px6y10 { Px6y11, Px7y10, Px5y10, Px6y9 } CellNode (6 @ 10) (20)Px6y11 { Px5y11, Px6y12, Px7y11, Px6y10 } CellNode (6 @ 11) (20)Px6y12 { Px5y12, Px6y11, Px6y13, Px7y12 } CellNode (6 @ 12) (20)Px6y13 { Px7y13, Px6y14, Px5y13, Px6y12 } CellNode (6 @ 13) (20)Px6y14 { Px7y14, Px6y15, Px6y13, Px5y14 } CellNode (6 @ 14) (20)Px6y15 { Px5y15, Px6y14, Px7y15, Px6y16 } CellNode (6 @ 15) (20)Px6y16 { Px7y16, Px5y16, Px6y15, Px6y17 } CellNode (6 @ 16) (20)Px6y17 { Px7y17, Px6y18, Px6y16, Px5y17 } CellNode (6 @ 17) (20)Px6y18 { Px6y17, Px7y18, Px6y19, Px5y18 } CellNode (6 @ 18) (20)Px6y19 { Px6y18, Px5y19, Px6y20, Px7y19 } CellNode (6 @ 19) (20)Px6y2 { Px5y2, Px6y3, Px6y1, Px7y2 } CellNode (6 @ 2) (20)Px6y20 { Px5y20, Px6y21, Px6y19, Px7y20 } CellNode (6 @ 20) (20)Px6y21 { Px7y21, Px5y21, Px6y22, Px6y20 } CellNode (6 @ 21) (20)Px6y22 { Px7y22, Px6y23, Px5y22, Px6y21 } CellNode (6 @ 22) (20)Px6y23 { Px7y23, Px6y22, Px6y24, Px5y23 } CellNode (6 @ 23) (20)Px6y24 { Px6y25, Px7y24, Px5y24, Px6y23 } CellNode (6 @ 24) (20)Px6y25 { Px7y25, Px6y26, Px5y25, Px6y24 } CellNode (6 @ 25) (20)Px6y26 { Px6y25, Px7y26, Px5y26, Px6y27 } CellNode (6 @ 26) (20)Px6y27 { Px6y26, Px5y27, Px7y27 } CellNode (6 @ 27) (20)Px6y3 { Px6y2, Px7y3, Px5y3, Px6y4 } CellNode (6 @ 3) (20)Px6y4 { Px7y4, Px6y3, Px5y4, Px6y5 } CellNode (6 @ 4) (20)Px6y5 { Px6y6, Px6y4, Px7y5, Px5y5 } CellNode (6 @ 5) (20)Px6y6 { Px7y6, Px5y6, Px6y7, Px6y5 } CellNode (6 @ 6) (20)Px6y7 { Px7y7, Px6y6, Px5y7, Px6y8 } CellNode (6 @ 7) (20)Px6y8 { Px6y7, Px7y8, Px5y8, Px6y9 } CellNode (6 @ 8) (20)Px6y9 { Px5y9, Px6y8, Px7y9, Px6y10 } CellNode (6 @ 9) (20)Px7y1 { Px7y2, Px8y1, Px6y1 } CellNode (7 @ 1) (20)Px7y10 { Px7y9, Px7y11, Px8y10, Px6y10 } CellNode (7 @ 10) (20)Px7y11 { Px8y11, Px6y11, Px7y10, Px7y12 } CellNode (7 @ 11) (20)Px7y12 { Px7y13, Px8y12, Px6y12, Px7y11 } CellNode (7 @ 12) (20)Px7y13 { Px7y14, Px8y13, Px6y13, Px7y12 } CellNode (7 @ 13) (20)Px7y14 { Px7y13, Px6y14, Px7y15, Px8y14 } CellNode (7 @ 14) (20)Px7y15 { Px8y15, Px7y14, Px6y15, Px7y16 } CellNode (7 @ 15) (20)Px7y16 { Px7y17, Px8y16, Px7y15, Px6y16 } CellNode (7 @ 16) (20)Px7y17 { Px7y16, Px7y18, Px8y17, Px6y17 } CellNode (7 @ 17) (20)Px7y18 { Px8y18, Px7y17, Px6y18, Px7y19 } CellNode (7 @ 18) (20)Px7y19 { Px8y19, Px7y18, Px6y19, Px7y20 } CellNode (7 @ 19) (20)Px7y2 { Px6y2, Px7y3, Px8y2, Px7y1 } CellNode (7 @ 2) (20)Px7y20 { Px8y20, Px7y21, Px6y20, Px7y19 } CellNode (7 @ 20) (20)Px7y21 { Px6y21, Px7y22, Px8y21, Px7y20 } CellNode (7 @ 21) (20)Px7y22 { Px7y21, Px6y22, Px8y22, Px7y23 } CellNode (7 @ 22) (20)Px7y23 { Px8y23, Px7y24, Px7y22, Px6y23 } CellNode (7 @ 23) (20)Px7y24 { Px8y24, Px7y25, Px6y24, Px7y23 } CellNode (7 @ 24) (20)Px7y25 { Px6y25, Px7y24, Px7y26, Px8y25 } CellNode (7 @ 25) (20)Px7y26 { Px8y26, Px7y25, Px6y26, Px7y27 } CellNode (7 @ 26) (20)Px7y27 { Px6y27, Px8y27, Px7y26 } CellNode (7 @ 27) (20)Px7y3 { Px7y4, Px6y3, Px7y2, Px8y3 } CellNode (7 @ 3) (20)Px7y4 { Px7y3, Px8y4, Px6y4, Px7y5 } CellNode (7 @ 4) (20)Px7y5 { Px7y6, Px8y5, Px7y4, Px6y5 } CellNode (7 @ 5) (20)Px7y6 { Px7y7, Px6y6, Px8y6, Px7y5 } CellNode (7 @ 6) (20)Px7y7 { Px8y7, Px6y7, Px7y8, Px7y6 } CellNode (7 @ 7) (20)Px7y8 { Px7y7, Px8y8, Px6y8, Px7y9 } CellNode (7 @ 8) (20)Px7y9 { Px7y10, Px8y9, Px7y8, Px6y9 } CellNode (7 @ 9) (20)Px8y1 { Px7y1, Px8y2, Px9y1 } CellNode (8 @ 1) (20)Px8y10 { Px9y10, Px7y10, Px8y11, Px8y9 } CellNode (8 @ 10) (20)Px8y11 { Px8y12, Px7y11, Px9y11, Px8y10 } CellNode (8 @ 11) (20)Px8y12 { Px8y11, Px9y12, Px7y12, Px8y13 } CellNode (8 @ 12) (20)Px8y13 { Px8y14, Px7y13, Px8y12, Px9y13 } CellNode (8 @ 13) (20)Px8y14 { Px8y15, Px7y14, Px9y14, Px8y13 } CellNode (8 @ 14) (20)Px8y15 { Px9y15, Px7y15, Px8y16, Px8y14 } CellNode (8 @ 15) (20)Px8y16 { Px8y17, Px8y15, Px9y16, Px7y16 } CellNode (8 @ 16) (20)Px8y17 { Px9y17, Px7y17, Px8y18, Px8y16 } CellNode (8 @ 17) (20)Px8y18 { Px8y19, Px7y18, Px9y18, Px8y17 } CellNode (8 @ 18) (20)Px8y19 { Px8y18, Px8y20, Px9y19, Px7y19 } CellNode (8 @ 19) (20)Px8y2 { Px8y1, Px9y2, Px8y3, Px7y2 } CellNode (8 @ 2) (20)Px8y20 { Px8y19, Px8y21, Px9y20, Px7y20 } CellNode (8 @ 20) (20)Px8y21 { Px9y21, Px7y21, Px8y20, Px8y22 } CellNode (8 @ 21) (20)Px8y22 { Px8y23, Px9y22, Px7y22, Px8y21 } CellNode (8 @ 22) (20)Px8y23 { Px8y24, Px9y23, Px7y23, Px8y22 } CellNode (8 @ 23) (20)Px8y24 { Px8y23, Px7y24, Px8y25, Px9y24 } CellNode (8 @ 24) (20)Px8y25 { Px9y25, Px7y25, Px8y24, Px8y26 } CellNode (8 @ 25) (20)Px8y26 { Px8y27, Px9y26, Px7y26, Px8y25 } CellNode (8 @ 26) (20)Px8y27 { Px9y27, Px8y26, Px7y27 } CellNode (8 @ 27) (20)Px8y3 { Px8y4, Px7y3, Px8y2, Px9y3 } CellNode (8 @ 3) (20)Px8y4 { Px8y5, Px7y4, Px9y4, Px8y3 } CellNode (8 @ 4) (20)Px8y5 { Px9y5, Px8y4, Px8y6, Px7y5 } CellNode (8 @ 5) (20)Px8y6 { Px8y7, Px8y5, Px9y6, Px7y6 } CellNode (8 @ 6) (20)Px8y7 { Px7y7, Px8y8, Px9y7, Px8y6 } CellNode (8 @ 7) (20)Px8y8 { Px9y8, Px8y9, Px7y8, Px8y7 } CellNode (8 @ 8) (20)Px8y9 { Px8y8, Px9y9, Px8y10, Px7y9 } CellNode (8 @ 9) (20)Px9y1 { Px8y1, Px10y1, Px9y2 } CellNode (9 @ 1) (20)Px9y10 { Px10y10, Px9y9, Px9y11, Px8y10 } CellNode (9 @ 10) (20)Px9y11 { Px9y10, Px8y11, Px10y11, Px9y12 } CellNode (9 @ 11) (20)Px9y12 { Px8y12, Px9y11, Px10y12, Px9y13 } CellNode (9 @ 12) (20)Px9y13 { Px9y14, Px9y12, Px8y13, Px10y13 } CellNode (9 @ 13) (20)Px9y14 { Px8y14, Px10y14, Px9y15, Px9y13 } CellNode (9 @ 14) (20)Px9y15 { Px8y15, Px9y14, Px10y15, Px9y16 } CellNode (9 @ 15) (20)Px9y16 { Px9y17, Px9y15, Px8y16, Px10y16 } CellNode (9 @ 16) (20)Px9y17 { Px10y17, Px9y18, Px9y16, Px8y17 } CellNode (9 @ 17) (20)Px9y18 { Px8y18, Px9y17, Px10y18, Px9y19 } CellNode (9 @ 18) (20)Px9y19 { Px8y19, Px9y18, Px10y19, Px9y20 } CellNode (9 @ 19) (20)Px9y2 { Px10y2, Px8y2, Px9y3, Px9y1 } CellNode (9 @ 2) (20)Px9y20 { Px9y21, Px8y20, Px10y20, Px9y19 } CellNode (9 @ 20) (20)Px9y21 { Px9y22, Px8y21, Px9y20, Px10y21 } CellNode (9 @ 21) (20)Px9y22 { Px10y22, Px9y21, Px9y23, Px8y22 } CellNode (9 @ 22) (20)Px9y23 { Px8y23, Px9y22, Px10y23, Px9y24 } CellNode (9 @ 23) (20)Px9y24 { Px9y25, Px8y24, Px10y24, Px9y23 } CellNode (9 @ 24) (20)Px9y25 { Px9y24, Px9y26, Px8y25, Px10y25 } CellNode (9 @ 25) (20)Px9y26 { Px10y26, Px9y25, Px9y27, Px8y26 } CellNode (9 @ 26) (20)Px9y27 { Px9y26, Px10y27, Px8y27 } CellNode (9 @ 27) (20)Px9y3 { Px10y3, Px9y2, Px8y3, Px9y4 } CellNode (9 @ 3) (20)Px9y4 { Px9y5, Px10y4, Px8y4, Px9y3 } CellNode (9 @ 4) (20)Px9y5 { Px8y5, Px9y6, Px10y5, Px9y4 } CellNode (9 @ 5) (20)Px9y6 { Px9y5, Px10y6, Px8y6, Px9y7 } CellNode (9 @ 6) (20)Px9y7 { Px8y7, Px9y8, Px9y6, Px10y7 } CellNode (9 @ 7) (20)Px9y8 { Px10y8, Px8y8, Px9y9, Px9y7 } CellNode (9 @ 8) (20)Px9y9 { Px9y10, Px10y9, Px8y9, Px9y8 } CellNode (9 @ 9) (20)</body></methods><methods><class-id>AlgoDis.NetworkTopologies</class-id> <category>As yet unclassified</category><body package="DistributedModeling-samples" selector="Landevennec0">Landevennec0messages none  defined. Px10y1 { Px9y1, Px11y1, Px10y2 } CellNode (10 @ 1) (20)Px10y10 { Px9y10, Px11y10, Px10y9, Px10y11 } CellNode (10 @ 10) (20)Px10y11 { Px10y10, Px9y11, Px10y12, Px11y11 } CellNode (10 @ 11) (20)Px10y12 { Px10y13, Px10y11, Px9y12, Px11y12 } CellNode (10 @ 12) (20)Px10y13 { Px11y13, Px10y14, Px10y12, Px9y13 } CellNode (10 @ 13) (20)Px10y14 { Px9y14, Px11y14, Px10y15, Px10y13 } CellNode (10 @ 14) (20)Px10y15 { Px10y14, Px9y15, Px11y15, Px10y16 } CellNode (10 @ 15) (20)Px10y16 { Px11y16, Px10y17, Px10y15, Px9y16 } CellNode (10 @ 16) (20)Px10y17 { Px9y17, Px11y17, Px10y18, Px10y16 } CellNode (10 @ 17) (20)Px10y18 { Px10y17, Px9y18, Px10y19, Px11y18 } CellNode (10 @ 18) (20)Px10y19 { Px10y18, Px10y20, Px9y19, Px11y19 } CellNode (10 @ 19) (20)Px10y2 { Px10y1, Px11y2, Px9y2, Px10y3 } CellNode (10 @ 2) (20)Px10y20 { Px11y20, Px10y19, Px10y21, Px9y20 } CellNode (10 @ 20) (20)Px10y21 { Px10y22, Px9y21, Px11y21, Px10y20 } CellNode (10 @ 21) (20)Px10y22 { Px9y22, Px10y21, Px11y22 } CellNode (10 @ 22) (20)Px10y3 { Px10y4, Px10y2, Px9y3, Px11y3 } CellNode (10 @ 3) (20)Px10y4 { Px10y3, Px10y5, Px9y4, Px11y4 } CellNode (10 @ 4) (20)Px10y5 { Px10y4, Px11y5, Px9y5, Px10y6 } CellNode (10 @ 5) (20)Px10y6 { Px11y6, Px9y6, Px10y5, Px10y7 } CellNode (10 @ 6) (20)Px10y7 { Px10y8, Px11y7, Px9y7, Px10y6 } CellNode (10 @ 7) (20)Px10y8 { Px10y7, Px9y8, Px10y9, Px11y8 } CellNode (10 @ 8) (20)Px10y9 { Px10y10, Px10y8, Px9y9, Px11y9 } CellNode (10 @ 9) (20)Px11y1 { Px10y1, Px11y2, Px12y1 } CellNode (11 @ 1) (20)Px11y10 { Px10y10, Px11y9, Px11y11, Px12y10 } CellNode (11 @ 10) (20)Px11y11 { Px12y11, Px11y10, Px10y11, Px11y12 } CellNode (11 @ 11) (20)Px11y12 { Px11y13, Px12y12, Px11y11, Px10y12 } CellNode (11 @ 12) (20)Px11y13 { Px10y13, Px11y14, Px12y13, Px11y12 } CellNode (11 @ 13) (20)Px11y14 { Px12y14, Px10y14, Px11y13, Px11y15 } CellNode (11 @ 14) (20)Px11y15 { Px11y16, Px12y15, Px11y14, Px10y15 } CellNode (11 @ 15) (20)Px11y16 { Px11y17, Px12y16, Px11y15, Px10y16 } CellNode (11 @ 16) (20)Px11y17 { Px10y17, Px11y16, Px11y18, Px12y17 } CellNode (11 @ 17) (20)Px11y18 { Px12y18, Px11y17, Px10y18, Px11y19 } CellNode (11 @ 18) (20)Px11y19 { Px11y20, Px12y19, Px10y19, Px11y18 } CellNode (11 @ 19) (20)Px11y2 { Px12y2, Px10y2, Px11y3, Px11y1 } CellNode (11 @ 2) (20)Px11y20 { Px12y20, Px10y20, Px11y21, Px11y19 } CellNode (11 @ 20) (20)Px11y21 { Px11y20, Px11y22, Px12y21, Px10y21 } CellNode (11 @ 21) (20)Px11y22 { Px12y22, Px10y22, Px11y21 } CellNode (11 @ 22) (20)Px11y3 { Px11y2, Px12y3, Px11y4, Px10y3 } CellNode (11 @ 3) (20)Px11y4 { Px10y4, Px11y5, Px11y3, Px12y4 } CellNode (11 @ 4) (20)Px11y5 { Px11y6, Px10y5, Px12y5, Px11y4 } CellNode (11 @ 5) (20)Px11y6 { Px12y6, Px11y5, Px10y6, Px11y7 } CellNode (11 @ 6) (20)Px11y7 { Px10y7, Px12y7, Px11y6, Px11y8 } CellNode (11 @ 7) (20)Px11y8 { Px10y8, Px11y9, Px11y7, Px12y8 } CellNode (11 @ 8) (20)Px11y9 { Px12y9, Px11y10, Px10y9, Px11y8 } CellNode (11 @ 9) (20)Px12y1 { Px13y1, Px11y1, Px12y2 } CellNode (12 @ 1) (20)Px12y10 { Px12y11, Px11y10, Px13y10, Px12y9 } CellNode (12 @ 10) (20)Px12y11 { Px12y12, Px13y11, Px11y11, Px12y10 } CellNode (12 @ 11) (20)Px12y12 { Px12y13, Px12y11, Px13y12, Px11y12 } CellNode (12 @ 12) (20)Px12y13 { Px13y13, Px12y14, Px11y13, Px12y12 } CellNode (12 @ 13) (20)Px12y14 { Px12y15, Px11y14, Px13y14, Px12y13 } CellNode (12 @ 14) (20)Px12y15 { Px12y14, Px13y15, Px11y15, Px12y16 } CellNode (12 @ 15) (20)Px12y16 { Px12y17, Px11y16, Px12y15, Px13y16 } CellNode (12 @ 16) (20)Px12y17 { Px12y18, Px11y17, Px13y17, Px12y16 } CellNode (12 @ 17) (20)Px12y18 { Px13y18, Px11y18, Px12y19, Px12y17 } CellNode (12 @ 18) (20)Px12y19 { Px12y18, Px12y20, Px13y19, Px11y19 } CellNode (12 @ 19) (20)Px12y2 { Px12y3, Px11y2, Px13y2, Px12y1 } CellNode (12 @ 2) (20)Px12y20 { Px11y20, Px12y19, Px12y21, Px13y20 } CellNode (12 @ 20) (20)Px12y21 { Px13y21, Px12y20, Px11y21, Px12y22 } CellNode (12 @ 21) (20)Px12y22 { Px12y21, Px11y22 } CellNode (12 @ 22) (20)Px12y3 { Px13y3, Px12y4, Px11y3, Px12y2 } CellNode (12 @ 3) (20)Px12y4 { Px13y4, Px12y3, Px12y5, Px11y4 } CellNode (12 @ 4) (20)Px12y5 { Px12y6, Px11y5, Px13y5, Px12y4 } CellNode (12 @ 5) (20)Px12y6 { Px11y6, Px12y7, Px12y5, Px13y6 } CellNode (12 @ 6) (20)Px12y7 { Px12y6, Px13y7, Px11y7, Px12y8 } CellNode (12 @ 7) (20)Px12y8 { Px12y9, Px12y7, Px13y8, Px11y8 } CellNode (12 @ 8) (20)Px12y9 { Px11y9, Px12y8, Px13y9, Px12y10 } CellNode (12 @ 9) (20)Px13y1 { Px13y2, Px14y1, Px12y1 } CellNode (13 @ 1) (20)Px13y10 { Px13y11, Px13y9, Px14y10, Px12y10 } CellNode (13 @ 10) (20)Px13y11 { Px14y11, Px12y11, Px13y10, Px13y12 } CellNode (13 @ 11) (20)Px13y12 { Px13y13, Px14y12, Px12y12, Px13y11 } CellNode (13 @ 12) (20)Px13y13 { Px13y14, Px14y13, Px13y12, Px12y13 } CellNode (13 @ 13) (20)Px13y14 { Px13y13, Px12y14, Px13y15, Px14y14 } CellNode (13 @ 14) (20)Px13y15 { Px14y15, Px12y15, Px13y14, Px13y16 } CellNode (13 @ 15) (20)Px13y16 { Px13y17, Px14y16, Px12y16, Px13y15 } CellNode (13 @ 16) (20)Px13y17 { Px12y17, Px13y18, Px14y17, Px13y16 } CellNode (13 @ 17) (20)Px13y18 { Px14y18, Px12y18, Px13y17, Px13y19 } CellNode (13 @ 18) (20)Px13y19 { Px14y19, Px13y18, Px12y19, Px13y20 } CellNode (13 @ 19) (20)Px13y2 { Px12y2, Px13y1, Px14y2, Px13y3 } CellNode (13 @ 2) (20)Px13y20 { Px14y20, Px13y21, Px12y20, Px13y19 } CellNode (13 @ 20) (20)Px13y21 { Px14y21, Px13y20, Px12y21 } CellNode (13 @ 21) (20)Px13y3 { Px12y3, Px13y4, Px13y2, Px14y3 } CellNode (13 @ 3) (20)Px13y4 { Px13y3, Px12y4, Px13y5, Px14y4 } CellNode (13 @ 4) (20)Px13y5 { Px13y4, Px14y5, Px12y5, Px13y6 } CellNode (13 @ 5) (20)Px13y6 { Px12y6, Px13y7, Px13y5, Px14y6 } CellNode (13 @ 6) (20)Px13y7 { Px12y7, Px13y8, Px14y7, Px13y6 } CellNode (13 @ 7) (20)Px13y8 { Px14y8, Px13y7, Px12y8, Px13y9 } CellNode (13 @ 8) (20)Px13y9 { Px13y10, Px14y9, Px13y8, Px12y9 } CellNode (13 @ 9) (20)Px14y1 { Px13y1, Px14y2, Px15y1 } CellNode (14 @ 1) (20)Px14y10 { Px14y11, Px15y10, Px14y9, Px13y10 } CellNode (14 @ 10) (20)Px14y11 { Px15y11, Px14y12, Px13y11, Px14y10 } CellNode (14 @ 11) (20)Px14y12 { Px14y11, Px15y12, Px13y12, Px14y13 } CellNode (14 @ 12) (20)Px14y13 { Px13y13, Px15y13, Px14y12, Px14y14 } CellNode (14 @ 13) (20)Px14y14 { Px14y15, Px13y14, Px15y14, Px14y13 } CellNode (14 @ 14) (20)Px14y15 { Px15y15, Px13y15, Px14y16, Px14y14 } CellNode (14 @ 15) (20)Px14y16 { Px14y17, Px14y15, Px15y16, Px13y16 } CellNode (14 @ 16) (20)Px14y17 { Px15y17, Px14y18, Px13y17, Px14y16 } CellNode (14 @ 17) (20)Px14y18 { Px15y18, Px13y18, Px14y19, Px14y17 } CellNode (14 @ 18) (20)Px14y19 { Px14y18, Px14y20, Px15y19, Px13y19 } CellNode (14 @ 19) (20)Px14y2 { Px15y2, Px14y1, Px13y2, Px14y3 } CellNode (14 @ 2) (20)Px14y20 { Px14y19, Px14y21, Px15y20, Px13y20 } CellNode (14 @ 20) (20)Px14y21 { Px14y20, Px15y21, Px13y21 } CellNode (14 @ 21) (20)Px14y3 { Px14y4, Px14y2, Px15y3, Px13y3 } CellNode (14 @ 3) (20)Px14y4 { Px13y4, Px14y5, Px14y3, Px15y4 } CellNode (14 @ 4) (20)Px14y5 { Px15y5, Px13y5, Px14y6, Px14y4 } CellNode (14 @ 5) (20)Px14y6 { Px15y6, Px14y5, Px14y7, Px13y6 } CellNode (14 @ 6) (20)Px14y7 { Px14y8, Px13y7, Px14y6, Px15y7 } CellNode (14 @ 7) (20)Px14y8 { Px13y8, Px14y9, Px14y7, Px15y8 } CellNode (14 @ 8) (20)Px14y9 { Px14y8, Px15y9, Px13y9, Px14y10 } CellNode (14 @ 9) (20)Px15y1 { Px14y1, Px15y2, Px16y1 } CellNode (15 @ 1) (20)Px15y10 { Px15y9, Px16y10, Px15y11, Px14y10 } CellNode (15 @ 10) (20)Px15y11 { Px14y11, Px15y10, Px16y11, Px15y12 } CellNode (15 @ 11) (20)Px15y12 { Px15y13, Px15y11, Px14y12, Px16y12 } CellNode (15 @ 12) (20)Px15y13 { Px16y13, Px15y14, Px15y12, Px14y13 } CellNode (15 @ 13) (20)Px15y14 { Px15y13, Px16y14, Px15y15, Px14y14 } CellNode (15 @ 14) (20)Px15y15 { Px14y15, Px15y14, Px15y16, Px16y15 } CellNode (15 @ 15) (20)Px15y16 { Px16y16, Px15y17, Px15y15, Px14y16 } CellNode (15 @ 16) (20)Px15y17 { Px15y18, Px16y17, Px15y16, Px14y17 } CellNode (15 @ 17) (20)Px15y18 { Px14y18, Px15y17, Px15y19, Px16y18 } CellNode (15 @ 18) (20)Px15y19 { Px15y18, Px14y19, Px15y20, Px16y19 } CellNode (15 @ 19) (20)Px15y2 { Px16y2, Px15y3, Px14y2, Px15y1 } CellNode (15 @ 2) (20)Px15y20 { Px15y21, Px14y20, Px16y20, Px15y19 } CellNode (15 @ 20) (20)Px15y21 { Px14y21, Px16y21, Px15y20 } CellNode (15 @ 21) (20)Px15y3 { Px15y2, Px16y3, Px15y4, Px14y3 } CellNode (15 @ 3) (20)Px15y4 { Px15y5, Px15y3, Px16y4, Px14y4 } CellNode (15 @ 4) (20)Px15y5 { Px14y5, Px15y6, Px16y5, Px15y4 } CellNode (15 @ 5) (20)Px15y6 { Px15y5, Px14y6, Px15y7, Px16y6 } CellNode (15 @ 6) (20)Px15y7 { Px16y7, Px15y6, Px14y7, Px15y8 } CellNode (15 @ 7) (20)Px15y8 { Px14y8, Px15y9, Px15y7, Px16y8 } CellNode (15 @ 8) (20)Px15y9 { Px15y10, Px14y9, Px15y8, Px16y9 } CellNode (15 @ 9) (20)Px16y1 { Px17y1, Px15y1, Px16y2 } CellNode (16 @ 1) (20)Px16y10 { Px15y10, Px16y11, Px16y9, Px17y10 } CellNode (16 @ 10) (20)Px16y11 { Px17y11, Px16y10, Px15y11, Px16y12 } CellNode (16 @ 11) (20)Px16y12 { Px16y13, Px17y12, Px15y12, Px16y11 } CellNode (16 @ 12) (20)Px16y13 { Px15y13, Px16y14, Px17y13, Px16y12 } CellNode (16 @ 13) (20)Px16y14 { Px17y14, Px16y13, Px15y14, Px16y15 } CellNode (16 @ 14) (20)Px16y15 { Px16y16, Px17y15, Px15y15, Px16y14 } CellNode (16 @ 15) (20)Px16y16 { Px16y17, Px17y16, Px15y16, Px16y15 } CellNode (16 @ 16) (20)Px16y17 { Px16y16, Px15y17, Px16y18, Px17y17 } CellNode (16 @ 17) (20)Px16y18 { Px17y18, Px15y18, Px16y17, Px16y19 } CellNode (16 @ 18) (20)Px16y19 { Px16y20, Px17y19, Px15y19, Px16y18 } CellNode (16 @ 19) (20)Px16y2 { Px15y2, Px16y3, Px17y2, Px16y1 } CellNode (16 @ 2) (20)Px16y20 { Px17y20, Px16y21, Px15y20, Px16y19 } CellNode (16 @ 20) (20)Px16y21 { Px16y20, Px15y21 } CellNode (16 @ 21) (20)Px16y3 { Px16y2, Px17y3, Px15y3, Px16y4 } CellNode (16 @ 3) (20)Px16y4 { Px16y3, Px17y4, Px16y5, Px15y4 } CellNode (16 @ 4) (20)Px16y5 { Px15y5, Px16y4, Px17y5, Px16y6 } CellNode (16 @ 5) (20)Px16y6 { Px15y6, Px16y7, Px16y5, Px17y6 } CellNode (16 @ 6) (20)Px16y7 { Px17y7, Px15y7, Px16y8, Px16y6 } CellNode (16 @ 7) (20)Px16y8 { Px16y7, Px17y8, Px15y8, Px16y9 } CellNode (16 @ 8) (20)Px16y9 { Px15y9, Px16y10, Px16y8, Px17y9 } CellNode (16 @ 9) (20)Px17y1 { Px17y2, Px18y1, Px16y1 } CellNode (17 @ 1) (20)Px17y10 { Px18y10, Px16y10, Px17y11, Px17y9 } CellNode (17 @ 10) (20)Px17y11 { Px17y12, Px16y11, Px18y11, Px17y10 } CellNode (17 @ 11) (20)Px17y12 { Px18y12, Px17y11, Px17y13, Px16y12 } CellNode (17 @ 12) (20)Px17y13 { Px17y14, Px16y13, Px18y13, Px17y12 } CellNode (17 @ 13) (20)Px17y14 { Px18y14, Px17y15, Px16y14, Px17y13 } CellNode (17 @ 14) (20)Px17y15 { Px17y14, Px18y15, Px16y15, Px17y16 } CellNode (17 @ 15) (20)Px17y16 { Px16y16, Px17y17, Px17y15, Px18y16 } CellNode (17 @ 16) (20)Px17y17 { Px18y17, Px16y17, Px17y18, Px17y16 } CellNode (17 @ 17) (20)Px17y18 { Px18y18, Px16y18, Px17y19, Px17y17 } CellNode (17 @ 18) (20)Px17y19 { Px17y18, Px17y20, Px18y19, Px16y19 } CellNode (17 @ 19) (20)Px17y2 { Px16y2, Px17y3, Px17y1, Px18y2 } CellNode (17 @ 2) (20)Px17y20 { Px16y20, Px18y20, Px17y19 } CellNode (17 @ 20) (20)Px17y3 { Px16y3, Px17y4, Px18y3, Px17y2 } CellNode (17 @ 3) (20)Px17y4 { Px17y3, Px18y4, Px16y4, Px17y5 } CellNode (17 @ 4) (20)Px17y5 { Px17y4, Px18y5, Px16y5, Px17y6 } CellNode (17 @ 5) (20)Px17y6 { Px17y7, Px17y5, Px18y6, Px16y6 } CellNode (17 @ 6) (20)Px17y7 { Px17y6, Px16y7, Px17y8, Px18y7 } CellNode (17 @ 7) (20)Px17y8 { Px18y8, Px17y7, Px16y8, Px17y9 } CellNode (17 @ 8) (20)Px17y9 { Px18y9, Px17y8, Px16y9, Px17y10 } CellNode (17 @ 9) (20)Px18y1 { Px17y1, Px18y2, Px19y1 } CellNode (18 @ 1) (20)Px18y10 { Px18y9, Px18y11, Px19y10, Px17y10 } CellNode (18 @ 10) (20)Px18y11 { Px19y11, Px18y10, Px17y11, Px18y12 } CellNode (18 @ 11) (20)Px18y12 { Px18y13, Px19y12, Px17y12, Px18y11 } CellNode (18 @ 12) (20)Px18y13 { Px18y14, Px19y13, Px17y13, Px18y12 } CellNode (18 @ 13) (20)Px18y14 { Px17y14, Px18y13, Px18y15, Px19y14 } CellNode (18 @ 14) (20)Px18y15 { Px19y15, Px18y14, Px17y15, Px18y16 } CellNode (18 @ 15) (20)Px18y16 { Px18y17, Px19y16, Px18y15, Px17y16 } CellNode (18 @ 16) (20)Px18y17 { Px17y17, Px18y18, Px19y17, Px18y16 } CellNode (18 @ 17) (20)Px18y18 { Px19y18, Px17y18, Px18y17, Px18y19 } CellNode (18 @ 18) (20)Px18y19 { Px19y19, Px18y18, Px17y19, Px18y20 } CellNode (18 @ 19) (20)Px18y2 { Px19y2, Px18y1, Px18y3, Px17y2 } CellNode (18 @ 2) (20)Px18y20 { Px17y20, Px19y20, Px18y19 } CellNode (18 @ 20) (20)Px18y3 { Px17y3, Px18y4, Px19y3, Px18y2 } CellNode (18 @ 3) (20)Px18y4 { Px18y5, Px17y4, Px18y3, Px19y4 } CellNode (18 @ 4) (20)Px18y5 { Px19y5, Px18y4, Px17y5, Px18y6 } CellNode (18 @ 5) (20)Px18y6 { Px17y6, Px19y6, Px18y5, Px18y7 } CellNode (18 @ 6) (20)Px18y7 { Px18y8, Px17y7, Px18y6, Px19y7 } CellNode (18 @ 7) (20)Px18y8 { Px19y8, Px18y9, Px17y8, Px18y7 } CellNode (18 @ 8) (20)Px18y9 { Px18y8, Px19y9, Px18y10, Px17y9 } CellNode (18 @ 9) (20)Px19y1 { Px18y1, Px19y2, Px20y1 } CellNode (19 @ 1) (20)Px19y10 { Px20y10, Px19y11, Px19y9, Px18y10 } CellNode (19 @ 10) (20)Px19y11 { Px19y12, Px20y11, Px18y11, Px19y10 } CellNode (19 @ 11) (20)Px19y12 { Px19y11, Px20y12, Px18y12, Px19y13 } CellNode (19 @ 12) (20)Px19y13 { Px18y13, Px19y14, Px19y12, Px20y13 } CellNode (19 @ 13) (20)Px19y14 { Px20y14, Px18y14, Px19y15, Px19y13 } CellNode (19 @ 14) (20)Px19y15 { Px19y16, Px18y15, Px20y15, Px19y14 } CellNode (19 @ 15) (20)Px19y16 { Px18y16, Px19y15, Px20y16, Px19y17 } CellNode (19 @ 16) (20)Px19y17 { Px20y17, Px18y17, Px19y18, Px19y16 } CellNode (19 @ 17) (20)Px19y18 { Px20y18, Px18y18, Px19y19, Px19y17 } CellNode (19 @ 18) (20)Px19y19 { Px19y18, Px19y20, Px20y19, Px18y19 } CellNode (19 @ 19) (20)Px19y2 { Px20y2, Px19y3, Px18y2, Px19y1 } CellNode (19 @ 2) (20)Px19y20 { Px19y19, Px18y20, Px20y20 } CellNode (19 @ 20) (20)Px19y3 { Px19y2, Px20y3, Px18y3, Px19y4 } CellNode (19 @ 3) (20)Px19y4 { Px18y4, Px19y5, Px19y3, Px20y4 } CellNode (19 @ 4) (20)Px19y5 { Px18y5, Px19y6, Px19y4, Px20y5 } CellNode (19 @ 5) (20)Px19y6 { Px19y5, Px20y6, Px18y6, Px19y7 } CellNode (19 @ 6) (20)Px19y7 { Px18y7, Px19y6, Px20y7, Px19y8 } CellNode (19 @ 7) (20)Px19y8 { Px18y8, Px19y9, Px19y7, Px20y8 } CellNode (19 @ 8) (20)Px19y9 { Px20y9, Px18y9, Px19y10, Px19y8 } CellNode (19 @ 9) (20)Px1y1 { Px1y2, Px2y1 } CellNode (1 @ 1) (20)Px1y10 { Px1y11, Px1y9, Px2y10 } CellNode (1 @ 10) (20)Px1y11 { Px1y12, Px2y11, Px1y10 } CellNode (1 @ 11) (20)Px1y12 { Px1y13, Px2y12, Px1y11 } CellNode (1 @ 12) (20)Px1y13 { Px1y14, Px2y13, Px1y12 } CellNode (1 @ 13) (20)Px1y14 { Px2y14, Px1y13, Px1y15 } CellNode (1 @ 14) (20)Px1y15 { Px1y14, Px2y15, Px1y16 } CellNode (1 @ 15) (20)Px1y16 { Px1y15, Px2y16, Px1y17 } CellNode (1 @ 16) (20)Px1y17 { Px1y18, Px2y17, Px1y16 } CellNode (1 @ 17) (20)Px1y18 { Px1y19, Px2y18, Px1y17 } CellNode (1 @ 18) (20)Px1y19 { Px1y20, Px2y19, Px1y18 } CellNode (1 @ 19) (20)Px1y2 { Px1y3, Px1y1, Px2y2 } CellNode (1 @ 2) (20)Px1y20 { Px2y20, Px1y19, Px1y21 } CellNode (1 @ 20) (20)Px1y21 { Px1y20, Px2y21, Px1y22 } CellNode (1 @ 21) (20)Px1y22 { Px1y23, Px2y22, Px1y21 } CellNode (1 @ 22) (20)Px1y23 { Px1y22, Px2y23 } CellNode (1 @ 23) (20)Px1y3 { Px1y4, Px1y2, Px2y3 } CellNode (1 @ 3) (20)Px1y4 { Px1y5, Px1y3, Px2y4 } CellNode (1 @ 4) (20)Px1y5 { Px1y4, Px1y6, Px2y5 } CellNode (1 @ 5) (20)Px1y6 { Px2y6, Px1y7, Px1y5 } CellNode (1 @ 6) (20)Px1y7 { Px1y8, Px1y6, Px2y7 } CellNode (1 @ 7) (20)Px1y8 { Px1y7, Px1y9, Px2y8 } CellNode (1 @ 8) (20)Px1y9 { Px2y9, Px1y8, Px1y10 } CellNode (1 @ 9) (20)Px20y1 { Px19y1, Px20y2, Px21y1 } CellNode (20 @ 1) (20)Px20y10 { Px20y9, Px20y11, Px21y10, Px19y10 } CellNode (20 @ 10) (20)Px20y11 { Px19y11, Px20y10, Px20y12, Px21y11 } CellNode (20 @ 11) (20)Px20y12 { Px21y12, Px19y12, Px20y11, Px20y13 } CellNode (20 @ 12) (20)Px20y13 { Px20y14, Px21y13, Px20y12, Px19y13 } CellNode (20 @ 13) (20)Px20y14 { Px19y14, Px20y15, Px21y14, Px20y13 } CellNode (20 @ 14) (20)Px20y15 { Px21y15, Px19y15, Px20y14, Px20y16 } CellNode (20 @ 15) (20)Px20y16 { Px20y17, Px21y16, Px19y16, Px20y15 } CellNode (20 @ 16) (20)Px20y17 { Px20y18, Px21y17, Px19y17, Px20y16 } CellNode (20 @ 17) (20)Px20y18 { Px20y17, Px19y18, Px20y19, Px21y18 } CellNode (20 @ 18) (20)Px20y19 { Px21y19, Px20y18, Px19y19, Px20y20 } CellNode (20 @ 19) (20)Px20y2 { Px19y2, Px20y3, Px21y2, Px20y1 } CellNode (20 @ 2) (20)Px20y20 { Px20y19, Px19y20 } CellNode (20 @ 20) (20)Px20y3 { Px20y2, Px21y3, Px19y3, Px20y4 } CellNode (20 @ 3) (20)Px20y4 { Px20y3, Px21y4, Px19y4, Px20y5 } CellNode (20 @ 4) (20)Px20y5 { Px19y5, Px20y6, Px20y4, Px21y5 } CellNode (20 @ 5) (20)Px20y6 { Px21y6, Px19y6, Px20y7, Px20y5 } CellNode (20 @ 6) (20)Px20y7 { Px20y6, Px21y7, Px19y7, Px20y8 } CellNode (20 @ 7) (20)Px20y8 { Px20y9, Px21y8, Px20y7, Px19y8 } CellNode (20 @ 8) (20)Px20y9 { Px20y10, Px19y9, Px21y9, Px20y8 } CellNode (20 @ 9) (20)Px21y1 { Px22y1, Px20y1, Px21y2 } CellNode (21 @ 1) (20)Px21y10 { Px20y10, Px22y10, Px21y9, Px21y11 } CellNode (21 @ 10) (20)Px21y11 { Px22y11, Px20y11, Px21y12, Px21y10 } CellNode (21 @ 11) (20)Px21y12 { Px22y12, Px20y12, Px21y13, Px21y11 } CellNode (21 @ 12) (20)Px21y13 { Px22y13, Px21y12, Px21y14, Px20y13 } CellNode (21 @ 13) (20)Px21y14 { Px22y14, Px20y14, Px21y15, Px21y13 } CellNode (21 @ 14) (20)Px21y15 { Px22y15, Px20y15, Px21y16, Px21y14 } CellNode (21 @ 15) (20)Px21y16 { Px21y15, Px22y16, Px20y16, Px21y17 } CellNode (21 @ 16) (20)Px21y17 { Px20y17, Px22y17, Px21y16, Px21y18 } CellNode (21 @ 17) (20)Px21y18 { Px22y18, Px20y18, Px21y19, Px21y17 } CellNode (21 @ 18) (20)Px21y19 { Px21y18, Px20y19 } CellNode (21 @ 19) (20)Px21y2 { Px20y2, Px21y3, Px22y2, Px21y1 } CellNode (21 @ 2) (20)Px21y3 { Px20y3, Px21y4, Px21y2, Px22y3 } CellNode (21 @ 3) (20)Px21y4 { Px21y3, Px22y4, Px20y4, Px21y5 } CellNode (21 @ 4) (20)Px21y5 { Px20y5, Px21y4, Px22y5, Px21y6 } CellNode (21 @ 5) (20)Px21y6 { Px20y6, Px21y7, Px22y6, Px21y5 } CellNode (21 @ 6) (20)Px21y7 { Px21y6, Px21y8, Px20y7, Px22y7 } CellNode (21 @ 7) (20)Px21y8 { Px22y8, Px21y7, Px21y9, Px20y8 } CellNode (21 @ 8) (20)Px21y9 { Px20y9, Px21y8, Px22y9, Px21y10 } CellNode (21 @ 9) (20)Px22y1 { Px22y2, Px23y1, Px21y1 } CellNode (22 @ 1) (20)Px22y10 { Px22y11, Px23y10, Px22y9, Px21y10 } CellNode (22 @ 10) (20)Px22y11 { Px22y10, Px22y12, Px23y11, Px21y11 } CellNode (22 @ 11) (20)Px22y12 { Px22y11, Px21y12, Px23y12, Px22y13 } CellNode (22 @ 12) (20)Px22y13 { Px22y14, Px23y13, Px22y12, Px21y13 } CellNode (22 @ 13) (20)Px22y14 { Px22y15, Px23y14, Px21y14, Px22y13 } CellNode (22 @ 14) (20)Px22y15 { Px22y14, Px21y15, Px22y16, Px23y15 } CellNode (22 @ 15) (20)Px22y16 { Px23y16, Px22y15, Px21y16, Px22y17 } CellNode (22 @ 16) (20)Px22y17 { Px23y17, Px22y18, Px22y16, Px21y17 } CellNode (22 @ 17) (20)Px22y18 { Px22y17, Px21y18 } CellNode (22 @ 18) (20)Px22y2 { Px22y1, Px23y2, Px22y3, Px21y2 } CellNode (22 @ 2) (20)Px22y3 { Px21y3, Px22y4, Px22y2, Px23y3 } CellNode (22 @ 3) (20)Px22y4 { Px21y4, Px22y5, Px22y3, Px23y4 } CellNode (22 @ 4) (20)Px22y5 { Px23y5, Px22y4, Px21y5, Px22y6 } CellNode (22 @ 5) (20)Px22y6 { Px22y7, Px22y5, Px23y6, Px21y6 } CellNode (22 @ 6) (20)Px22y7 { Px22y8, Px21y7, Px22y6, Px23y7 } CellNode (22 @ 7) (20)Px22y8 { Px22y7, Px21y8, Px22y9, Px23y8 } CellNode (22 @ 8) (20)Px22y9 { Px22y8, Px23y9, Px21y9, Px22y10 } CellNode (22 @ 9) (20)Px23y1 { Px22y1, Px23y2, Px24y1 } CellNode (23 @ 1) (20)Px23y10 { Px22y10, Px23y9, Px24y10, Px23y11 } CellNode (23 @ 10) (20)Px23y11 { Px24y11, Px22y11, Px23y10, Px23y12 } CellNode (23 @ 11) (20)Px23y12 { Px23y13, Px24y12, Px22y12, Px23y11 } CellNode (23 @ 12) (20)Px23y13 { Px23y14, Px24y13, Px23y12, Px22y13 } CellNode (23 @ 13) (20)Px23y14 { Px22y14, Px23y13, Px23y15, Px24y14 } CellNode (23 @ 14) (20)Px23y15 { Px24y15, Px22y15, Px23y14, Px23y16 } CellNode (23 @ 15) (20)Px23y16 { Px23y17, Px24y16, Px22y16, Px23y15 } CellNode (23 @ 16) (20)Px23y17 { Px22y17, Px23y16 } CellNode (23 @ 17) (20)Px23y2 { Px23y1, Px22y2, Px23y3, Px24y2 } CellNode (23 @ 2) (20)Px23y3 { Px24y3, Px23y2, Px22y3, Px23y4 } CellNode (23 @ 3) (20)Px23y4 { Px23y5, Px22y4, Px23y3, Px24y4 } CellNode (23 @ 4) (20)Px23y5 { Px23y6, Px22y5, Px23y4, Px24y5 } CellNode (23 @ 5) (20)Px23y6 { Px23y5, Px24y6, Px22y6, Px23y7 } CellNode (23 @ 6) (20)Px23y7 { Px22y7, Px23y6, Px24y7, Px23y8 } CellNode (23 @ 7) (20)Px23y8 { Px22y8, Px23y9, Px24y8, Px23y7 } CellNode (23 @ 8) (20)Px23y9 { Px24y9, Px23y10, Px22y9, Px23y8 } CellNode (23 @ 9) (20)Px24y1 { Px23y1, Px24y2, Px25y1 } CellNode (24 @ 1) (20)Px24y10 { Px24y11, Px25y10, Px23y10, Px24y9 } CellNode (24 @ 10) (20)Px24y11 { Px24y12, Px25y11, Px23y11, Px24y10 } CellNode (24 @ 11) (20)Px24y12 { Px24y11, Px24y13, Px23y12, Px25y12 } CellNode (24 @ 12) (20)Px24y13 { Px24y14, Px23y13, Px24y12, Px25y13 } CellNode (24 @ 13) (20)Px24y14 { Px25y14, Px23y14, Px24y15, Px24y13 } CellNode (24 @ 14) (20)Px24y15 { Px24y16, Px23y15, Px25y15, Px24y14 } CellNode (24 @ 15) (20)Px24y16 { Px23y16, Px24y15 } CellNode (24 @ 16) (20)Px24y2 { Px23y2, Px24y3, Px24y1, Px25y2 } CellNode (24 @ 2) (20)Px24y3 { Px24y2, Px23y3, Px24y4, Px25y3 } CellNode (24 @ 3) (20)Px24y4 { Px24y3, Px25y4, Px23y4, Px24y5 } CellNode (24 @ 4) (20)Px24y5 { Px23y5, Px24y6, Px25y5, Px24y4 } CellNode (24 @ 5) (20)Px24y6 { Px23y6, Px24y7, Px24y5, Px25y6 } CellNode (24 @ 6) (20)Px24y7 { Px25y7, Px24y6, Px23y7, Px24y8 } CellNode (24 @ 7) (20)Px24y8 { Px23y8, Px25y8, Px24y7, Px24y9 } CellNode (24 @ 8) (20)Px24y9 { Px23y9, Px25y9, Px24y10, Px24y8 } CellNode (24 @ 9) (20)Px25y1 { Px24y1, Px25y2, Px26y1 } CellNode (25 @ 1) (20)Px25y10 { Px25y11, Px25y9, Px24y10, Px26y10 } CellNode (25 @ 10) (20)Px25y11 { Px24y11, Px25y10, Px25y12, Px26y11 } CellNode (25 @ 11) (20)Px25y12 { Px26y12, Px24y12, Px25y11, Px25y13 } CellNode (25 @ 12) (20)Px25y13 { Px25y14, Px26y13, Px24y13, Px25y12 } CellNode (25 @ 13) (20)Px25y14 { Px24y14, Px25y13, Px25y15 } CellNode (25 @ 14) (20)Px25y15 { Px25y14, Px24y15 } CellNode (25 @ 15) (20)Px25y2 { Px25y3, Px25y1, Px26y2, Px24y2 } CellNode (25 @ 2) (20)Px25y3 { Px24y3, Px25y4, Px26y3, Px25y2 } CellNode (25 @ 3) (20)Px25y4 { Px25y3, Px24y4, Px25y5, Px26y4 } CellNode (25 @ 4) (20)Px25y5 { Px26y5, Px25y4, Px24y5, Px25y6 } CellNode (25 @ 5) (20)Px25y6 { Px25y7, Px24y6, Px25y5, Px26y6 } CellNode (25 @ 6) (20)Px25y7 { Px24y7, Px25y8, Px26y7, Px25y6 } CellNode (25 @ 7) (20)Px25y8 { Px26y8, Px25y7, Px25y9, Px24y8 } CellNode (25 @ 8) (20)Px25y9 { Px25y10, Px25y8, Px26y9, Px24y9 } CellNode (25 @ 9) (20)Px26y1 { Px27y1, Px25y1, Px26y2 } CellNode (26 @ 1) (20)Px26y10 { Px26y11, Px25y10, Px26y9, Px27y10 } CellNode (26 @ 10) (20)Px26y11 { Px27y11, Px25y11, Px26y12, Px26y10 } CellNode (26 @ 11) (20)Px26y12 { Px27y12, Px26y13, Px25y12, Px26y11 } CellNode (26 @ 12) (20)Px26y13 { Px25y13, Px26y12, Px27y13 } CellNode (26 @ 13) (20)Px26y2 { Px26y1, Px27y2, Px26y3, Px25y2 } CellNode (26 @ 2) (20)Px26y3 { Px25y3, Px26y2, Px27y3, Px26y4 } CellNode (26 @ 3) (20)Px26y4 { Px26y5, Px25y4, Px27y4, Px26y3 } CellNode (26 @ 4) (20)Px26y5 { Px26y4, Px25y5, Px26y6, Px27y5 } CellNode (26 @ 5) (20)Px26y6 { Px26y5, Px27y6, Px25y6, Px26y7 } CellNode (26 @ 6) (20)Px26y7 { Px25y7, Px26y8, Px27y7, Px26y6 } CellNode (26 @ 7) (20)Px26y8 { Px25y8, Px26y9, Px27y8, Px26y7 } CellNode (26 @ 8) (20)Px26y9 { Px27y9, Px26y8, Px25y9, Px26y10 } CellNode (26 @ 9) (20)Px27y1 { Px27y2, Px28y1, Px26y1 } CellNode (27 @ 1) (20)Px27y10 { Px27y9, Px27y11, Px28y10, Px26y10 } CellNode (27 @ 10) (20)Px27y11 { Px26y11, Px27y12, Px28y11, Px27y10 } CellNode (27 @ 11) (20)Px27y12 { Px28y12, Px27y11, Px26y12, Px27y13 } CellNode (27 @ 12) (20)Px27y13 { Px28y13, Px27y12, Px26y13 } CellNode (27 @ 13) (20)Px27y2 { Px26y2, Px27y3, Px28y2, Px27y1 } CellNode (27 @ 2) (20)Px27y3 { Px27y2, Px28y3, Px27y4, Px26y3 } CellNode (27 @ 3) (20)Px27y4 { Px27y5, Px27y3, Px28y4, Px26y4 } CellNode (27 @ 4) (20)Px27y5 { Px26y5, Px27y6, Px27y4, Px28y5 } CellNode (27 @ 5) (20)Px27y6 { Px28y6, Px27y7, Px26y6, Px27y5 } CellNode (27 @ 6) (20)Px27y7 { Px28y7, Px27y6, Px26y7, Px27y8 } CellNode (27 @ 7) (20)Px27y8 { Px27y9, Px26y8, Px27y7, Px28y8 } CellNode (27 @ 8) (20)Px27y9 { Px27y8, Px26y9, Px28y9, Px27y10 } CellNode (27 @ 9) (20)Px28y1 { Px27y1, Px28y2, Px29y1 } CellNode (28 @ 1) (20)Px28y10 { Px29y10, Px28y11, Px28y9, Px27y10 } CellNode (28 @ 10) (20)Px28y11 { Px29y11, Px27y11, Px28y12, Px28y10 } CellNode (28 @ 11) (20)Px28y12 { Px28y13, Px27y12, Px29y12, Px28y11 } CellNode (28 @ 12) (20)Px28y13 { Px29y13, Px27y13, Px28y12 } CellNode (28 @ 13) (20)Px28y2 { Px27y2, Px28y3, Px28y1, Px29y2 } CellNode (28 @ 2) (20)Px28y3 { Px27y3, Px28y4, Px28y2, Px29y3 } CellNode (28 @ 3) (20)Px28y4 { Px28y3, Px29y4, Px27y4, Px28y5 } CellNode (28 @ 4) (20)Px28y5 { Px28y6, Px28y4, Px29y5, Px27y5 } CellNode (28 @ 5) (20)Px28y6 { Px28y7, Px27y6, Px29y6, Px28y5 } CellNode (28 @ 6) (20)Px28y7 { Px28y6, Px28y8, Px27y7, Px29y7 } CellNode (28 @ 7) (20)Px28y8 { Px29y8, Px28y7, Px28y9, Px27y8 } CellNode (28 @ 8) (20)Px28y9 { Px27y9, Px29y9, Px28y10, Px28y8 } CellNode (28 @ 9) (20)Px29y1 { Px28y1, Px29y2, Px30y1 } CellNode (29 @ 1) (20)Px29y10 { Px29y11, Px30y10, Px29y9, Px28y10 } CellNode (29 @ 10) (20)Px29y11 { Px29y12, Px30y11, Px28y11, Px29y10 } CellNode (29 @ 11) (20)Px29y12 { Px29y11, Px28y12, Px29y13, Px30y12 } CellNode (29 @ 12) (20)Px29y13 { Px29y12, Px30y13, Px28y13 } CellNode (29 @ 13) (20)Px29y2 { Px29y1, Px30y2, Px28y2, Px29y3 } CellNode (29 @ 2) (20)Px29y3 { Px28y3, Px29y4, Px29y2, Px30y3 } CellNode (29 @ 3) (20)Px29y4 { Px28y4, Px29y5, Px29y3, Px30y4 } CellNode (29 @ 4) (20)Px29y5 { Px29y4, Px30y5, Px29y6, Px28y5 } CellNode (29 @ 5) (20)Px29y6 { Px28y6, Px29y5, Px30y6, Px29y7 } CellNode (29 @ 6) (20)Px29y7 { Px28y7, Px29y8, Px29y6, Px30y7 } CellNode (29 @ 7) (20)Px29y8 { Px30y8, Px29y9, Px28y8, Px29y7 } CellNode (29 @ 8) (20)Px29y9 { Px29y8, Px30y9, Px28y9, Px29y10 } CellNode (29 @ 9) (20)Px2y1 { Px3y1, Px1y1, Px2y2 } CellNode (2 @ 1) (20)Px2y10 { Px2y9, Px2y11, Px3y10, Px1y10 } CellNode (2 @ 10) (20)Px2y11 { Px3y11, Px2y10, Px1y11, Px2y12 } CellNode (2 @ 11) (20)Px2y12 { Px2y13, Px3y12, Px2y11, Px1y12 } CellNode (2 @ 12) (20)Px2y13 { Px2y14, Px3y13, Px2y12, Px1y13 } CellNode (2 @ 13) (20)Px2y14 { Px2y13, Px1y14, Px2y15, Px3y14 } CellNode (2 @ 14) (20)Px2y15 { Px3y15, Px1y15, Px2y14, Px2y16 } CellNode (2 @ 15) (20)Px2y16 { Px2y17, Px3y16, Px1y16, Px2y15 } CellNode (2 @ 16) (20)Px2y17 { Px1y17, Px2y18, Px3y17, Px2y16 } CellNode (2 @ 17) (20)Px2y18 { Px3y18, Px2y17, Px1y18, Px2y19 } CellNode (2 @ 18) (20)Px2y19 { Px3y19, Px2y18, Px1y19, Px2y20 } CellNode (2 @ 19) (20)Px2y2 { Px2y3, Px1y2, Px3y2, Px2y1 } CellNode (2 @ 2) (20)Px2y20 { Px2y21, Px3y20, Px1y20, Px2y19 } CellNode (2 @ 20) (20)Px2y21 { Px2y20, Px3y21, Px2y22, Px1y21 } CellNode (2 @ 21) (20)Px2y22 { Px2y21, Px1y22, Px3y22, Px2y23 } CellNode (2 @ 22) (20)Px2y23 { Px1y23, Px3y23, Px2y22 } CellNode (2 @ 23) (20)Px2y3 { Px3y3, Px2y4, Px1y3, Px2y2 } CellNode (2 @ 3) (20)Px2y4 { Px3y4, Px2y3, Px2y5, Px1y4 } CellNode (2 @ 4) (20)Px2y5 { Px1y5, Px2y6, Px3y5, Px2y4 } CellNode (2 @ 5) (20)Px2y6 { Px1y6, Px2y7, Px3y6, Px2y5 } CellNode (2 @ 6) (20)Px2y7 { Px2y6, Px3y7, Px1y7, Px2y8 } CellNode (2 @ 7) (20)Px2y8 { Px2y9, Px2y7, Px3y8, Px1y8 } CellNode (2 @ 8) (20)Px2y9 { Px1y9, Px2y10, Px2y8, Px3y9 } CellNode (2 @ 9) (20)Px30y1 { Px29y1, Px30y2, Px31y1 } CellNode (30 @ 1) (20)Px30y10 { Px30y9, Px30y11, Px29y10, Px31y10 } CellNode (30 @ 10) (20)Px30y11 { Px29y11, Px31y11, Px30y10, Px30y12 } CellNode (30 @ 11) (20)Px30y12 { Px30y13, Px29y12, Px31y12, Px30y11 } CellNode (30 @ 12) (20)Px30y13 { Px30y12, Px31y13, Px29y13 } CellNode (30 @ 13) (20)Px30y2 { Px31y2, Px30y1, Px29y2, Px30y3 } CellNode (30 @ 2) (20)Px30y3 { Px30y2, Px31y3, Px29y3, Px30y4 } CellNode (30 @ 3) (20)Px30y4 { Px29y4, Px30y5, Px31y4, Px30y3 } CellNode (30 @ 4) (20)Px30y5 { Px31y5, Px29y5, Px30y6, Px30y4 } CellNode (30 @ 5) (20)Px30y6 { Px30y5, Px31y6, Px29y6, Px30y7 } CellNode (30 @ 6) (20)Px30y7 { Px30y8, Px31y7, Px30y6, Px29y7 } CellNode (30 @ 7) (20)Px30y8 { Px29y8, Px30y9, Px31y8, Px30y7 } CellNode (30 @ 8) (20)Px30y9 { Px30y8, Px31y9, Px30y10, Px29y9 } CellNode (30 @ 9) (20)Px31y1 { Px32y1, Px30y1, Px31y2 } CellNode (31 @ 1) (20)Px31y10 { Px31y11, Px31y9, Px30y10, Px32y10 } CellNode (31 @ 10) (20)Px31y11 { Px31y12, Px32y11, Px30y11, Px31y10 } CellNode (31 @ 11) (20)Px31y12 { Px31y11, Px31y13, Px32y12, Px30y12 } CellNode (31 @ 12) (20)Px31y13 { Px32y13, Px30y13, Px31y12 } CellNode (31 @ 13) (20)Px31y2 { Px30y2, Px31y3, Px32y2, Px31y1 } CellNode (31 @ 2) (20)Px31y3 { Px31y2, Px32y3, Px30y3, Px31y4 } CellNode (31 @ 3) (20)Px31y4 { Px31y5, Px31y3, Px32y4, Px30y4 } CellNode (31 @ 4) (20)Px31y5 { Px30y5, Px31y6, Px31y4, Px32y5 } CellNode (31 @ 5) (20)Px31y6 { Px31y5, Px31y7, Px30y6, Px32y6 } CellNode (31 @ 6) (20)Px31y7 { Px31y6, Px32y7, Px31y8, Px30y7 } CellNode (31 @ 7) (20)Px31y8 { Px30y8, Px31y9, Px31y7, Px32y8 } CellNode (31 @ 8) (20)Px31y9 { Px30y9, Px31y10, Px31y8, Px32y9 } CellNode (31 @ 9) (20)Px32y1 { Px32y2, Px33y1, Px31y1 } CellNode (32 @ 1) (20)Px32y10 { Px32y11, Px33y10, Px31y10, Px32y9 } CellNode (32 @ 10) (20)Px32y11 { Px31y11, Px32y12, Px33y11, Px32y10 } CellNode (32 @ 11) (20)Px32y12 { Px33y12, Px31y12, Px32y11, Px32y13 } CellNode (32 @ 12) (20)Px32y13 { Px31y13, Px33y13, Px32y12 } CellNode (32 @ 13) (20)Px32y2 { Px31y2, Px32y3, Px32y1, Px33y2 } CellNode (32 @ 2) (20)Px32y3 { Px31y3, Px32y4, Px32y2, Px33y3 } CellNode (32 @ 3) (20)Px32y4 { Px32y3, Px33y4, Px32y5, Px31y4 } CellNode (32 @ 4) (20)Px32y5 { Px31y5, Px32y4, Px33y5, Px32y6 } CellNode (32 @ 5) (20)Px32y6 { Px31y6, Px32y7, Px33y6, Px32y5 } CellNode (32 @ 6) (20)Px32y7 { Px32y6, Px31y7, Px32y8, Px33y7 } CellNode (32 @ 7) (20)Px32y8 { Px32y7, Px33y8, Px31y8, Px32y9 } CellNode (32 @ 8) (20)Px32y9 { Px31y9, Px33y9, Px32y8, Px32y10 } CellNode (32 @ 9) (20)Px33y1 { Px32y1, Px33y2, Px34y1 } CellNode (33 @ 1) (20)Px33y10 { Px32y10, Px33y9, Px34y10, Px33y11 } CellNode (33 @ 10) (20)Px33y11 { Px34y11, Px32y11, Px33y12, Px33y10 } CellNode (33 @ 11) (20)Px33y12 { Px34y12, Px33y13, Px32y12, Px33y11 } CellNode (33 @ 12) (20)Px33y13 { Px32y13, Px34y13, Px33y12 } CellNode (33 @ 13) (20)Px33y2 { Px33y1, Px34y2, Px32y2, Px33y3 } CellNode (33 @ 2) (20)Px33y3 { Px33y4, Px32y3, Px34y3, Px33y2 } CellNode (33 @ 3) (20)Px33y4 { Px32y4, Px33y5, Px34y4, Px33y3 } CellNode (33 @ 4) (20)Px33y5 { Px33y4, Px34y5, Px33y6, Px32y5 } CellNode (33 @ 5) (20)Px33y6 { Px33y7, Px34y6, Px33y5, Px32y6 } CellNode (33 @ 6) (20)Px33y7 { Px32y7, Px33y8, Px33y6, Px34y7 } CellNode (33 @ 7) (20)Px33y8 { Px34y8, Px33y9, Px32y8, Px33y7 } CellNode (33 @ 8) (20)Px33y9 { Px33y8, Px34y9, Px33y10, Px32y9 } CellNode (33 @ 9) (20)Px34y1 { Px33y1, Px34y2, Px35y1 } CellNode (34 @ 1) (20)Px34y10 { Px34y11, Px34y9, Px35y10, Px33y10 } CellNode (34 @ 10) (20)Px34y11 { Px34y12, Px35y11, Px34y10, Px33y11 } CellNode (34 @ 11) (20)Px34y12 { Px34y11, Px33y12, Px34y13, Px35y12 } CellNode (34 @ 12) (20)Px34y13 { Px34y12, Px35y13, Px33y13 } CellNode (34 @ 13) (20)Px34y2 { Px34y1, Px33y2, Px34y3, Px35y2 } CellNode (34 @ 2) (20)Px34y3 { Px34y2, Px35y3, Px34y4, Px33y3 } CellNode (34 @ 3) (20)Px34y4 { Px34y5, Px33y4, Px35y4, Px34y3 } CellNode (34 @ 4) (20)Px34y5 { Px34y6, Px33y5, Px34y4, Px35y5 } CellNode (34 @ 5) (20)Px34y6 { Px35y6, Px34y5, Px33y6, Px34y7 } CellNode (34 @ 6) (20)Px34y7 { Px34y8, Px35y7, Px34y6, Px33y7 } CellNode (34 @ 7) (20)Px34y8 { Px33y8, Px34y9, Px35y8, Px34y7 } CellNode (34 @ 8) (20)Px34y9 { Px34y8, Px33y9, Px34y10, Px35y9 } CellNode (34 @ 9) (20)Px35y1 { Px34y1, Px35y2, Px36y1 } CellNode (35 @ 1) (20)Px35y10 { Px35y11, Px36y10, Px34y10, Px35y9 } CellNode (35 @ 10) (20)Px35y11 { Px34y11, Px35y12, Px35y10, Px36y11 } CellNode (35 @ 11) (20)Px35y12 { Px35y13, Px34y12, Px36y12, Px35y11 } CellNode (35 @ 12) (20)Px35y13 { Px34y13, Px36y13, Px35y12 } CellNode (35 @ 13) (20)Px35y2 { Px34y2, Px35y3, Px36y2, Px35y1 } CellNode (35 @ 2) (20)Px35y3 { Px35y2, Px35y4, Px34y3, Px36y3 } CellNode (35 @ 3) (20)Px35y4 { Px35y3, Px36y4, Px34y4, Px35y5 } CellNode (35 @ 4) (20)Px35y5 { Px35y6, Px34y5, Px35y4, Px36y5 } CellNode (35 @ 5) (20)Px35y6 { Px34y6, Px35y7, Px36y6, Px35y5 } CellNode (35 @ 6) (20)Px35y7 { Px36y7, Px35y6, Px34y7, Px35y8 } CellNode (35 @ 7) (20)Px35y8 { Px34y8, Px35y7, Px36y8, Px35y9 } CellNode (35 @ 8) (20)Px35y9 { Px34y9, Px35y10, Px35y8, Px36y9 } CellNode (35 @ 9) (20)Px36y1 { Px37y1, Px35y1, Px36y2 } CellNode (36 @ 1) (20)Px36y10 { Px36y11, Px35y10, Px36y9, Px37y10 } CellNode (36 @ 10) (20)Px36y11 { Px37y11, Px36y12, Px35y11, Px36y10 } CellNode (36 @ 11) (20)Px36y12 { Px36y11, Px36y13, Px37y12, Px35y12 } CellNode (36 @ 12) (20)Px36y13 { Px36y12, Px35y13 } CellNode (36 @ 13) (20)Px36y2 { Px35y2, Px36y1, Px37y2, Px36y3 } CellNode (36 @ 2) (20)Px36y3 { Px36y4, Px35y3, Px37y3, Px36y2 } CellNode (36 @ 3) (20)Px36y4 { Px36y3, Px35y4, Px36y5, Px37y4 } CellNode (36 @ 4) (20)Px36y5 { Px37y5, Px36y4, Px36y6, Px35y5 } CellNode (36 @ 5) (20)Px36y6 { Px35y6, Px36y7, Px37y6, Px36y5 } CellNode (36 @ 6) (20)Px36y7 { Px35y7, Px36y8, Px36y6, Px37y7 } CellNode (36 @ 7) (20)Px36y8 { Px36y7, Px37y8, Px35y8, Px36y9 } CellNode (36 @ 8) (20)Px36y9 { Px36y8, Px37y9, Px36y10, Px35y9 } CellNode (36 @ 9) (20)Px37y1 { Px37y2, Px38y1, Px36y1 } CellNode (37 @ 1) (20)Px37y10 { Px37y11, Px37y9, Px38y10, Px36y10 } CellNode (37 @ 10) (20)Px37y11 { Px36y11, Px37y12, Px38y11, Px37y10 } CellNode (37 @ 11) (20)Px37y12 { Px37y11, Px36y12 } CellNode (37 @ 12) (20)Px37y2 { Px37y1, Px38y2, Px36y2, Px37y3 } CellNode (37 @ 2) (20)Px37y3 { Px36y3, Px37y2, Px38y3, Px37y4 } CellNode (37 @ 3) (20)Px37y4 { Px37y5, Px36y4, Px38y4, Px37y3 } CellNode (37 @ 4) (20)Px37y5 { Px38y5, Px37y6, Px36y5, Px37y4 } CellNode (37 @ 5) (20)Px37y6 { Px37y5, Px38y6, Px36y6, Px37y7 } CellNode (37 @ 6) (20)Px37y7 { Px36y7, Px37y8, Px38y7, Px37y6 } CellNode (37 @ 7) (20)Px37y8 { Px36y8, Px37y9, Px37y7, Px38y8 } CellNode (37 @ 8) (20)Px37y9 { Px37y8, Px38y9, Px36y9, Px37y10 } CellNode (37 @ 9) (20)Px38y1 { Px37y1, Px38y2, Px39y1 } CellNode (38 @ 1) (20)Px38y10 { Px39y10, Px38y9, Px38y11, Px37y10 } CellNode (38 @ 10) (20)Px38y11 { Px38y10, Px37y11 } CellNode (38 @ 11) (20)Px38y2 { Px37y2, Px38y3, Px38y1, Px39y2 } CellNode (38 @ 2) (20)Px38y3 { Px38y2, Px39y3, Px38y4, Px37y3 } CellNode (38 @ 3) (20)Px38y4 { Px38y5, Px39y4, Px38y3, Px37y4 } CellNode (38 @ 4) (20)Px38y5 { Px37y5, Px38y6, Px38y4, Px39y5 } CellNode (38 @ 5) (20)Px38y6 { Px38y5, Px38y7, Px37y6, Px39y6 } CellNode (38 @ 6) (20)Px38y7 { Px38y6, Px39y7, Px37y7, Px38y8 } CellNode (38 @ 7) (20)Px38y8 { Px37y8, Px38y9, Px39y8, Px38y7 } CellNode (38 @ 8) (20)Px38y9 { Px37y9, Px38y10, Px38y8, Px39y9 } CellNode (38 @ 9) (20)Px39y1 { Px38y1, Px39y2, Px40y1 } CellNode (39 @ 1) (20)Px39y10 { Px40y10, Px39y9, Px38y10 } CellNode (39 @ 10) (20)Px39y2 { Px38y2, Px39y3, Px39y1, Px40y2 } CellNode (39 @ 2) (20)Px39y3 { Px39y4, Px38y3, Px39y2, Px40y3 } CellNode (39 @ 3) (20)Px39y4 { Px39y3, Px40y4, Px38y4, Px39y5 } CellNode (39 @ 4) (20)Px39y5 { Px39y6, Px39y4, Px40y5, Px38y5 } CellNode (39 @ 5) (20)Px39y6 { Px38y6, Px39y7, Px39y5, Px40y6 } CellNode (39 @ 6) (20)Px39y7 { Px40y7, Px39y8, Px38y7, Px39y6 } CellNode (39 @ 7) (20)Px39y8 { Px39y7, Px40y8, Px38y8, Px39y9 } CellNode (39 @ 8) (20)Px39y9 { Px38y9, Px39y8, Px40y9, Px39y10 } CellNode (39 @ 9) (20)Px3y1 { Px3y2, Px4y1, Px2y1 } CellNode (3 @ 1) (20)Px3y10 { Px4y10, Px2y10, Px3y11, Px3y9 } CellNode (3 @ 10) (20)Px3y11 { Px3y12, Px2y11, Px4y11, Px3y10 } CellNode (3 @ 11) (20)Px3y12 { Px3y11, Px3y13, Px2y12, Px4y12 } CellNode (3 @ 12) (20)Px3y13 { Px2y13, Px4y13, Px3y12, Px3y14 } CellNode (3 @ 13) (20)Px3y14 { Px4y14, Px3y15, Px2y14, Px3y13 } CellNode (3 @ 14) (20)Px3y15 { Px4y15, Px3y16, Px2y15, Px3y14 } CellNode (3 @ 15) (20)Px3y16 { Px4y16, Px3y15, Px3y17, Px2y16 } CellNode (3 @ 16) (20)Px3y17 { Px4y17, Px2y17, Px3y18, Px3y16 } CellNode (3 @ 17) (20)Px3y18 { Px4y18, Px2y18, Px3y19, Px3y17 } CellNode (3 @ 18) (20)Px3y19 { Px3y18, Px3y20, Px4y19, Px2y19 } CellNode (3 @ 19) (20)Px3y2 { Px3y3, Px4y2, Px3y1, Px2y2 } CellNode (3 @ 2) (20)Px3y20 { Px3y19, Px3y21, Px4y20, Px2y20 } CellNode (3 @ 20) (20)Px3y21 { Px4y21, Px2y21, Px3y20, Px3y22 } CellNode (3 @ 21) (20)Px3y22 { Px3y23, Px4y22, Px3y21, Px2y22 } CellNode (3 @ 22) (20)Px3y23 { Px3y22, Px2y23, Px4y23 } CellNode (3 @ 23) (20)Px3y3 { Px3y4, Px2y3, Px3y2, Px4y3 } CellNode (3 @ 3) (20)Px3y4 { Px4y4, Px2y4, Px3y5, Px3y3 } CellNode (3 @ 4) (20)Px3y5 { Px3y4, Px4y5, Px3y6, Px2y5 } CellNode (3 @ 5) (20)Px3y6 { Px2y6, Px3y7, Px3y5, Px4y6 } CellNode (3 @ 6) (20)Px3y7 { Px2y7, Px3y8, Px3y6, Px4y7 } CellNode (3 @ 7) (20)Px3y8 { Px4y8, Px3y7, Px3y9, Px2y8 } CellNode (3 @ 8) (20)Px3y9 { Px3y8, Px4y9, Px3y10, Px2y9 } CellNode (3 @ 9) (20)Px40y1 { Px41y1, Px39y1, Px40y2 } CellNode (40 @ 1) (20)Px40y10 { Px39y10, Px40y9 } CellNode (40 @ 10) (20)Px40y2 { Px40y1, Px41y2, Px39y2, Px40y3 } CellNode (40 @ 2) (20)Px40y3 { Px39y3, Px40y4, Px40y2, Px41y3 } CellNode (40 @ 3) (20)Px40y4 { Px41y4, Px39y4, Px40y5, Px40y3 } CellNode (40 @ 4) (20)Px40y5 { Px40y4, Px41y5, Px39y5, Px40y6 } CellNode (40 @ 5) (20)Px40y6 { Px40y7, Px40y5, Px41y6, Px39y6 } CellNode (40 @ 6) (20)Px40y7 { Px39y7, Px40y8, Px40y6, Px41y7 } CellNode (40 @ 7) (20)Px40y8 { Px40y7, Px41y8, Px39y8, Px40y9 } CellNode (40 @ 8) (20)Px40y9 { Px40y8, Px40y10, Px41y9, Px39y9 } CellNode (40 @ 9) (20)Px41y1 { Px41y2, Px42y1, Px40y1 } CellNode (41 @ 1) (20)Px41y2 { Px41y1, Px42y2, Px40y2, Px41y3 } CellNode (41 @ 2) (20)Px41y3 { Px41y4, Px41y2, Px42y3, Px40y3 } CellNode (41 @ 3) (20)Px41y4 { Px41y3, Px40y4, Px41y5, Px42y4 } CellNode (41 @ 4) (20)Px41y5 { Px41y4, Px42y5, Px40y5, Px41y6 } CellNode (41 @ 5) (20)Px41y6 { Px41y5, Px42y6, Px40y6, Px41y7 } CellNode (41 @ 6) (20)Px41y7 { Px40y7, Px41y8, Px41y6, Px42y7 } CellNode (41 @ 7) (20)Px41y8 { Px42y8, Px40y8, Px41y9, Px41y7 } CellNode (41 @ 8) (20)Px41y9 { Px42y9, Px40y9, Px41y8 } CellNode (41 @ 9) (20)Px42y1 { Px41y1, Px42y2, Px43y1 } CellNode (42 @ 1) (20)Px42y2 { Px43y2, Px42y1, Px41y2, Px42y3 } CellNode (42 @ 2) (20)Px42y3 { Px41y3, Px43y3, Px42y2, Px42y4 } CellNode (42 @ 3) (20)Px42y4 { Px42y5, Px41y4, Px43y4, Px42y3 } CellNode (42 @ 4) (20)Px42y5 { Px42y4, Px41y5, Px42y6, Px43y5 } CellNode (42 @ 5) (20)Px42y6 { Px43y6, Px42y5, Px41y6, Px42y7 } CellNode (42 @ 6) (20)Px42y7 { Px42y8, Px42y6, Px43y7, Px41y7 } CellNode (42 @ 7) (20)Px42y8 { Px41y8, Px42y9, Px43y8, Px42y7 } CellNode (42 @ 8) (20)Px42y9 { Px42y8, Px43y9, Px41y9 } CellNode (42 @ 9) (20)Px43y1 { Px42y1, Px43y2, Px44y1 } CellNode (43 @ 1) (20)Px43y2 { Px43y3, Px42y2, Px43y1, Px44y2 } CellNode (43 @ 2) (20)Px43y3 { Px43y2, Px44y3, Px43y4, Px42y3 } CellNode (43 @ 3) (20)Px43y4 { Px43y5, Px44y4, Px43y3, Px42y4 } CellNode (43 @ 4) (20)Px43y5 { Px43y6, Px42y5, Px44y5, Px43y4 } CellNode (43 @ 5) (20)Px43y6 { Px43y5, Px42y6, Px43y7, Px44y6 } CellNode (43 @ 6) (20)Px43y7 { Px44y7, Px43y6, Px43y8, Px42y7 } CellNode (43 @ 7) (20)Px43y8 { Px43y9, Px42y8, Px43y7, Px44y8 } CellNode (43 @ 8) (20)Px43y9 { Px42y9, Px43y8 } CellNode (43 @ 9) (20)Px44y1 { Px43y1, Px44y2, Px45y1 } CellNode (44 @ 1) (20)Px44y2 { Px43y2, Px44y3, Px45y2, Px44y1 } CellNode (44 @ 2) (20)Px44y3 { Px43y3, Px44y4, Px45y3, Px44y2 } CellNode (44 @ 3) (20)Px44y4 { Px44y3, Px45y4, Px44y5, Px43y4 } CellNode (44 @ 4) (20)Px44y5 { Px43y5, Px44y4, Px45y5, Px44y6 } CellNode (44 @ 5) (20)Px44y6 { Px43y6, Px44y7, Px44y5, Px45y6 } CellNode (44 @ 6) (20)Px44y7 { Px45y7, Px43y7, Px44y8, Px44y6 } CellNode (44 @ 7) (20)Px44y8 { Px43y8, Px44y7, Px45y8 } CellNode (44 @ 8) (20)Px45y1 { Px46y1, Px44y1, Px45y2 } CellNode (45 @ 1) (20)Px45y2 { Px45y1, Px46y2, Px44y2, Px45y3 } CellNode (45 @ 2) (20)Px45y3 { Px44y3, Px45y4, Px46y3, Px45y2 } CellNode (45 @ 3) (20)Px45y4 { Px44y4, Px45y5, Px45y3, Px46y4 } CellNode (45 @ 4) (20)Px45y5 { Px45y4, Px46y5, Px44y5, Px45y6 } CellNode (45 @ 5) (20)Px45y6 { Px45y7, Px46y6, Px45y5, Px44y6 } CellNode (45 @ 6) (20)Px45y7 { Px44y7, Px45y8, Px46y7, Px45y6 } CellNode (45 @ 7) (20)Px45y8 { Px46y8, Px44y8, Px45y7 } CellNode (45 @ 8) (20)Px46y1 { Px46y2, Px47y1, Px45y1 } CellNode (46 @ 1) (20)Px46y2 { Px46y1, Px46y3, Px45y2, Px47y2 } CellNode (46 @ 2) (20)Px46y3 { Px47y3, Px46y2, Px45y3, Px46y4 } CellNode (46 @ 3) (20)Px46y4 { Px45y4, Px46y5, Px46y3, Px47y4 } CellNode (46 @ 4) (20)Px46y5 { Px45y5, Px46y6, Px46y4, Px47y5 } CellNode (46 @ 5) (20)Px46y6 { Px46y5, Px47y6, Px46y7, Px45y6 } CellNode (46 @ 6) (20)Px46y7 { Px45y7, Px46y6, Px47y7, Px46y8 } CellNode (46 @ 7) (20)Px46y8 { Px45y8, Px46y7 } CellNode (46 @ 8) (20)Px47y1 { Px46y1, Px47y2, Px48y1 } CellNode (47 @ 1) (20)Px47y2 { Px47y3, Px46y2, Px48y2, Px47y1 } CellNode (47 @ 2) (20)Px47y3 { Px47y2, Px46y3, Px47y4, Px48y3 } CellNode (47 @ 3) (20)Px47y4 { Px47y3, Px48y4, Px46y4, Px47y5 } CellNode (47 @ 4) (20)Px47y5 { Px46y5, Px47y6, Px47y4, Px48y5 } CellNode (47 @ 5) (20)Px47y6 { Px46y6, Px47y7, Px48y6, Px47y5 } CellNode (47 @ 6) (20)Px47y7 { Px47y6, Px46y7 } CellNode (47 @ 7) (20)Px48y1 { Px47y1, Px48y2, Px49y1 } CellNode (48 @ 1) (20)Px48y2 { Px48y3, Px49y2, Px48y1, Px47y2 } CellNode (48 @ 2) (20)Px48y3 { Px47y3, Px48y4, Px49y3, Px48y2 } CellNode (48 @ 3) (20)Px48y4 { Px49y4, Px47y4, Px48y5, Px48y3 } CellNode (48 @ 4) (20)Px48y5 { Px49y5, Px48y4, Px48y6, Px47y5 } CellNode (48 @ 5) (20)Px48y6 { Px47y6, Px48y5, Px49y6 } CellNode (48 @ 6) (20)Px49y1 { Px48y1, Px49y2, Px50y1 } CellNode (49 @ 1) (20)Px49y2 { Px49y1, Px50y2, Px48y2, Px49y3 } CellNode (49 @ 2) (20)Px49y3 { Px49y4, Px49y2, Px50y3, Px48y3 } CellNode (49 @ 3) (20)Px49y4 { Px48y4, Px49y5, Px49y3, Px50y4 } CellNode (49 @ 4) (20)Px49y5 { Px50y5, Px48y5, Px49y6, Px49y4 } CellNode (49 @ 5) (20)Px49y6 { Px48y6, Px49y5 } CellNode (49 @ 6) (20)Px4y1 { Px3y1, Px4y2, Px5y1 } CellNode (4 @ 1) (20)Px4y10 { Px4y11, Px4y9, Px5y10, Px3y10 } CellNode (4 @ 10) (20)Px4y11 { Px4y10, Px3y11, Px4y12, Px5y11 } CellNode (4 @ 11) (20)Px4y12 { Px5y12, Px3y12, Px4y11, Px4y13 } CellNode (4 @ 12) (20)Px4y13 { Px4y14, Px5y13, Px3y13, Px4y12 } CellNode (4 @ 13) (20)Px4y14 { Px4y13, Px4y15, Px5y14, Px3y14 } CellNode (4 @ 14) (20)Px4y15 { Px5y15, Px4y14, Px3y15, Px4y16 } CellNode (4 @ 15) (20)Px4y16 { Px4y17, Px5y16, Px4y15, Px3y16 } CellNode (4 @ 16) (20)Px4y17 { Px4y18, Px5y17, Px3y17, Px4y16 } CellNode (4 @ 17) (20)Px4y18 { Px4y17, Px3y18, Px4y19, Px5y18 } CellNode (4 @ 18) (20)Px4y19 { Px5y19, Px4y18, Px3y19, Px4y20 } CellNode (4 @ 19) (20)Px4y2 { Px4y1, Px5y2, Px3y2, Px4y3 } CellNode (4 @ 2) (20)Px4y20 { Px5y20, Px3y20, Px4y21, Px4y19 } CellNode (4 @ 20) (20)Px4y21 { Px5y21, Px3y21, Px4y22, Px4y20 } CellNode (4 @ 21) (20)Px4y22 { Px4y21, Px5y22, Px3y22, Px4y23 } CellNode (4 @ 22) (20)Px4y23 { Px3y23, Px5y23, Px4y22 } CellNode (4 @ 23) (20)Px4y3 { Px4y4, Px4y2, Px5y3, Px3y3 } CellNode (4 @ 3) (20)Px4y4 { Px3y4, Px4y5, Px5y4, Px4y3 } CellNode (4 @ 4) (20)Px4y5 { Px5y5, Px4y6, Px3y5, Px4y4 } CellNode (4 @ 5) (20)Px4y6 { Px5y6, Px4y5, Px3y6, Px4y7 } CellNode (4 @ 6) (20)Px4y7 { Px3y7, Px4y8, Px5y7, Px4y6 } CellNode (4 @ 7) (20)Px4y8 { Px3y8, Px4y9, Px4y7, Px5y8 } CellNode (4 @ 8) (20)Px4y9 { Px4y8, Px5y9, Px4y10, Px3y9 } CellNode (4 @ 9) (20)Px50y1 { Px51y1, Px49y1, Px50y2 } CellNode (50 @ 1) (20)Px50y2 { Px50y1, Px49y2, Px50y3, Px51y2 } CellNode (50 @ 2) (20)Px50y3 { Px50y2, Px51y3, Px49y3, Px50y4 } CellNode (50 @ 3) (20)Px50y4 { Px50y5, Px51y4, Px50y3, Px49y4 } CellNode (50 @ 4) (20)Px50y5 { Px51y5, Px49y5, Px50y4 } CellNode (50 @ 5) (20)Px51y1 { Px51y2, Px52y1, Px50y1 } CellNode (51 @ 1) (20)Px51y2 { Px50y2, Px51y3, Px52y2, Px51y1 } CellNode (51 @ 2) (20)Px51y3 { Px52y3, Px51y4, Px50y3, Px51y2 } CellNode (51 @ 3) (20)Px51y4 { Px51y3, Px52y4, Px51y5, Px50y4 } CellNode (51 @ 4) (20)Px51y5 { Px51y4, Px50y5 } CellNode (51 @ 5) (20)Px52y1 { Px51y1, Px52y2, Px53y1 } CellNode (52 @ 1) (20)Px52y2 { Px52y3, Px52y1, Px53y2, Px51y2 } CellNode (52 @ 2) (20)Px52y3 { Px51y3, Px52y4, Px52y2, Px53y3 } CellNode (52 @ 3) (20)Px52y4 { Px51y4, Px52y3 } CellNode (52 @ 4) (20)Px53y1 { Px52y1, Px53y2, Px54y1 } CellNode (53 @ 1) (20)Px53y2 { Px53y1, Px54y2, Px52y2, Px53y3 } CellNode (53 @ 2) (20)Px53y3 { Px52y3, Px53y2, Px54y3 } CellNode (53 @ 3) (20)Px54y1 { Px53y1, Px54y2, Px55y1 } CellNode (54 @ 1) (20)Px54y2 { Px54y3, Px53y2, Px55y2, Px54y1 } CellNode (54 @ 2) (20)Px54y3 { Px53y3, Px54y2, Px55y3 } CellNode (54 @ 3) (20)Px55y1 { Px56y1, Px54y1, Px55y2 } CellNode (55 @ 1) (20)Px55y2 { Px54y2, Px55y3, Px56y2, Px55y1 } CellNode (55 @ 2) (20)Px55y3 { Px56y3, Px54y3, Px55y2 } CellNode (55 @ 3) (20)Px56y1 { Px56y2, Px57y1, Px55y1 } CellNode (56 @ 1) (20)Px56y2 { Px56y1, Px57y2, Px55y2, Px56y3 } CellNode (56 @ 2) (20)Px56y3 { Px56y2, Px57y3, Px55y3 } CellNode (56 @ 3) (20)Px57y1 { Px56y1, Px57y2, Px58y1 } CellNode (57 @ 1) (20)Px57y2 { Px58y2, Px56y2, Px57y3, Px57y1 } CellNode (57 @ 2) (20)Px57y3 { Px56y3, Px57y2, Px58y3 } CellNode (57 @ 3) (20)Px58y1 { Px57y1, Px58y2, Px59y1 } CellNode (58 @ 1) (20)Px58y2 { Px58y3, Px57y2, Px58y1, Px59y2 } CellNode (58 @ 2) (20)Px58y3 { Px57y3, Px58y2, Px59y3 } CellNode (58 @ 3) (20)Px59y1 { Px58y1, Px59y2, Px60y1 } CellNode (59 @ 1) (20)Px59y2 { Px59y3, Px59y1, Px60y2, Px58y2 } CellNode (59 @ 2) (20)Px59y3 { Px58y3, Px59y2, Px60y3 } CellNode (59 @ 3) (20)Px5y1 { Px4y1, Px5y2, Px6y1 } CellNode (5 @ 1) (20)Px5y10 { Px5y9, Px4y10, Px5y11, Px6y10 } CellNode (5 @ 10) (20)Px5y11 { Px5y12, Px6y11, Px4y11, Px5y10 } CellNode (5 @ 11) (20)Px5y12 { Px6y12, Px5y13, Px4y12, Px5y11 } CellNode (5 @ 12) (20)Px5y13 { Px4y13, Px5y12, Px6y13, Px5y14 } CellNode (5 @ 13) (20)Px5y14 { Px5y15, Px4y14, Px6y14, Px5y13 } CellNode (5 @ 14) (20)Px5y15 { Px5y16, Px4y15, Px6y15, Px5y14 } CellNode (5 @ 15) (20)Px5y16 { Px5y15, Px6y16, Px5y17, Px4y16 } CellNode (5 @ 16) (20)Px5y17 { Px4y17, Px5y18, Px5y16, Px6y17 } CellNode (5 @ 17) (20)Px5y18 { Px6y18, Px4y18, Px5y19, Px5y17 } CellNode (5 @ 18) (20)Px5y19 { Px5y20, Px6y19, Px4y19, Px5y18 } CellNode (5 @ 19) (20)Px5y2 { Px6y2, Px4y2, Px5y3, Px5y1 } CellNode (5 @ 2) (20)Px5y20 { Px5y19, Px5y21, Px6y20, Px4y20 } CellNode (5 @ 20) (20)Px5y21 { Px5y20, Px4y21, Px5y22, Px6y21 } CellNode (5 @ 21) (20)Px5y22 { Px6y22, Px5y21, Px4y22, Px5y23 } CellNode (5 @ 22) (20)Px5y23 { Px4y23, Px5y22, Px6y23 } CellNode (5 @ 23) (20)Px5y3 { Px5y2, Px6y3, Px5y4, Px4y3 } CellNode (5 @ 3) (20)Px5y4 { Px5y5, Px5y3, Px6y4, Px4y4 } CellNode (5 @ 4) (20)Px5y5 { Px5y6, Px4y5, Px5y4, Px6y5 } CellNode (5 @ 5) (20)Px5y6 { Px6y6, Px4y6, Px5y7, Px5y5 } CellNode (5 @ 6) (20)Px5y7 { Px5y6, Px6y7, Px4y7, Px5y8 } CellNode (5 @ 7) (20)Px5y8 { Px4y8, Px5y9, Px5y7, Px6y8 } CellNode (5 @ 8) (20)Px5y9 { Px4y9, Px5y10, Px5y8, Px6y9 } CellNode (5 @ 9) (20)Px60y1 { Px61y1, Px59y1, Px60y2 } CellNode (60 @ 1) (20)Px60y2 { Px60y1, Px61y2, Px59y2, Px60y3 } CellNode (60 @ 2) (20)Px60y3 { Px61y3, Px59y3, Px60y2 } CellNode (60 @ 3) (20)Px61y1 { Px61y2, Px62y1, Px60y1 } CellNode (61 @ 1) (20)Px61y2 { Px62y2, Px60y2, Px61y3, Px61y1 } CellNode (61 @ 2) (20)Px61y3 { Px61y2, Px62y3, Px60y3 } CellNode (61 @ 3) (20)Px62y1 { Px61y1, Px62y2, Px63y1 } CellNode (62 @ 1) (20)Px62y2 { Px61y2, Px62y3, Px63y2, Px62y1 } CellNode (62 @ 2) (20)Px62y3 { Px61y3, Px62y2, Px63y3 } CellNode (62 @ 3) (20)Px63y1 { Px62y1, Px63y2, Px64y1 } CellNode (63 @ 1) (20)Px63y2 { Px63y3, Px64y2, Px63y1, Px62y2 } CellNode (63 @ 2) (20)Px63y3 { Px63y2, Px62y3 } CellNode (63 @ 3) (20)Px64y1 { Px65y1, Px63y1, Px64y2 } CellNode (64 @ 1) (20)Px64y2 { Px65y2, Px63y2, Px64y1 } CellNode (64 @ 2) (20)Px65y1 { Px65y2, Px66y1, Px64y1 } CellNode (65 @ 1) (20)Px65y2 { Px65y1, Px66y2, Px64y2, Px65y3 } CellNode (65 @ 2) (20)Px65y3 { Px66y3, Px65y2 } CellNode (65 @ 3) (20)Px66y1 { Px65y1, Px66y2, Px67y1 } CellNode (66 @ 1) (20)Px66y18 { Px67y18 } CellNode (66 @ 18) (20)Px66y2 { Px65y2, Px66y3, Px66y1, Px67y2 } CellNode (66 @ 2) (20)Px66y3 { Px65y3, Px66y2, Px67y3 } CellNode (66 @ 3) (20)Px67y1 { Px66y1, Px67y2, Px68y1 } CellNode (67 @ 1) (20)Px67y15 { Px68y15, Px67y16 } CellNode (67 @ 15) (20)Px67y16 { Px68y16, Px67y17, Px67y15 } CellNode (67 @ 16) (20)Px67y17 { Px68y17, Px67y16, Px67y18 } CellNode (67 @ 17) (20)Px67y18 { Px68y18, Px66y18, Px67y17, Px67y19 } CellNode (67 @ 18) (20)Px67y19 { Px67y18, Px68y19 } CellNode (67 @ 19) (20)Px67y2 { Px66y2, Px67y3, Px67y1, Px68y2 } CellNode (67 @ 2) (20)Px67y3 { Px67y4, Px66y3, Px68y3, Px67y2 } CellNode (67 @ 3) (20)Px67y4 { Px67y3, Px68y4 } CellNode (67 @ 4) (20)Px68y1 { Px67y1, Px68y2, Px69y1 } CellNode (68 @ 1) (20)Px68y12 { Px69y12, Px68y13 } CellNode (68 @ 12) (20)Px68y13 { Px68y12, Px68y14, Px69y13 } CellNode (68 @ 13) (20)Px68y14 { Px68y13, Px68y15, Px69y14 } CellNode (68 @ 14) (20)Px68y15 { Px68y16, Px68y14, Px67y15 } CellNode (68 @ 15) (20)Px68y16 { Px68y17, Px68y15, Px67y16 } CellNode (68 @ 16) (20)Px68y17 { Px68y16, Px68y18, Px67y17 } CellNode (68 @ 17) (20)Px68y18 { Px69y18, Px67y18, Px68y19, Px68y17 } CellNode (68 @ 18) (20)Px68y19 { Px68y18, Px68y20, Px69y19, Px67y19 } CellNode (68 @ 19) (20)Px68y2 { Px69y2, Px68y1, Px68y3, Px67y2 } CellNode (68 @ 2) (20)Px68y20 { Px68y19, Px68y21, Px69y20 } CellNode (68 @ 20) (20)Px68y21 { Px68y22, Px68y20, Px69y21 } CellNode (68 @ 21) (20)Px68y22 { Px69y22, Px68y23, Px68y21 } CellNode (68 @ 22) (20)Px68y23 { Px68y22, Px69y23 } CellNode (68 @ 23) (20)Px68y3 { Px67y3, Px68y4, Px68y2, Px69y3 } CellNode (68 @ 3) (20)Px68y4 { Px67y4, Px68y3, Px69y4 } CellNode (68 @ 4) (20)Px69y1 { Px70y1, Px68y1, Px69y2 } CellNode (69 @ 1) (20)Px69y12 { Px68y12, Px69y13, Px70y12 } CellNode (69 @ 12) (20)Px69y13 { Px69y14, Px70y13, Px68y13, Px69y12 } CellNode (69 @ 13) (20)Px69y14 { Px68y14, Px69y13, Px70y14 } CellNode (69 @ 14) (20)Px69y18 { Px69y19, Px68y18, Px70y18 } CellNode (69 @ 18) (20)Px69y19 { Px69y18, Px68y19, Px69y20 } CellNode (69 @ 19) (20)Px69y2 { Px70y2, Px69y3, Px68y2, Px69y1 } CellNode (69 @ 2) (20)Px69y20 { Px69y19, Px68y20, Px69y21 } CellNode (69 @ 20) (20)Px69y21 { Px69y22, Px68y21, Px69y20 } CellNode (69 @ 21) (20)Px69y22 { Px69y21, Px69y23, Px68y22, Px70y22 } CellNode (69 @ 22) (20)Px69y23 { Px70y23, Px68y23, Px69y22 } CellNode (69 @ 23) (20)Px69y3 { Px69y2, Px70y3, Px69y4, Px68y3 } CellNode (69 @ 3) (20)Px69y4 { Px70y4, Px68y4, Px69y3 } CellNode (69 @ 4) (20)Px6y1 { Px7y1, Px5y1, Px6y2 } CellNode (6 @ 1) (20)Px6y10 { Px6y11, Px7y10, Px5y10, Px6y9 } CellNode (6 @ 10) (20)Px6y11 { Px5y11, Px6y12, Px7y11, Px6y10 } CellNode (6 @ 11) (20)Px6y12 { Px5y12, Px6y11, Px6y13, Px7y12 } CellNode (6 @ 12) (20)Px6y13 { Px7y13, Px6y14, Px5y13, Px6y12 } CellNode (6 @ 13) (20)Px6y14 { Px7y14, Px6y15, Px6y13, Px5y14 } CellNode (6 @ 14) (20)Px6y15 { Px5y15, Px6y14, Px7y15, Px6y16 } CellNode (6 @ 15) (20)Px6y16 { Px7y16, Px5y16, Px6y15, Px6y17 } CellNode (6 @ 16) (20)Px6y17 { Px7y17, Px6y18, Px6y16, Px5y17 } CellNode (6 @ 17) (20)Px6y18 { Px6y17, Px7y18, Px6y19, Px5y18 } CellNode (6 @ 18) (20)Px6y19 { Px6y18, Px5y19, Px6y20, Px7y19 } CellNode (6 @ 19) (20)Px6y2 { Px5y2, Px6y3, Px6y1, Px7y2 } CellNode (6 @ 2) (20)Px6y20 { Px5y20, Px6y21, Px6y19, Px7y20 } CellNode (6 @ 20) (20)Px6y21 { Px7y21, Px5y21, Px6y22, Px6y20 } CellNode (6 @ 21) (20)Px6y22 { Px7y22, Px6y23, Px5y22, Px6y21 } CellNode (6 @ 22) (20)Px6y23 { Px7y23, Px5y23, Px6y22 } CellNode (6 @ 23) (20)Px6y3 { Px6y2, Px7y3, Px5y3, Px6y4 } CellNode (6 @ 3) (20)Px6y4 { Px7y4, Px6y3, Px5y4, Px6y5 } CellNode (6 @ 4) (20)Px6y5 { Px6y6, Px6y4, Px7y5, Px5y5 } CellNode (6 @ 5) (20)Px6y6 { Px7y6, Px5y6, Px6y7, Px6y5 } CellNode (6 @ 6) (20)Px6y7 { Px7y7, Px6y6, Px5y7, Px6y8 } CellNode (6 @ 7) (20)Px6y8 { Px6y7, Px7y8, Px5y8, Px6y9 } CellNode (6 @ 8) (20)Px6y9 { Px5y9, Px6y8, Px7y9, Px6y10 } CellNode (6 @ 9) (20)Px70y1 { Px70y2, Px71y1, Px69y1 } CellNode (70 @ 1) (20)Px70y12 { Px69y12, Px70y13, Px71y12 } CellNode (70 @ 12) (20)Px70y13 { Px71y13, Px70y12, Px70y14, Px69y13 } CellNode (70 @ 13) (20)Px70y14 { Px69y14, Px70y13, Px71y14 } CellNode (70 @ 14) (20)Px70y18 { Px69y18 } CellNode (70 @ 18) (20)Px70y2 { Px69y2, Px70y3, Px71y2, Px70y1 } CellNode (70 @ 2) (20)Px70y22 { Px69y22, Px70y23 } CellNode (70 @ 22) (20)Px70y23 { Px71y23, Px70y22, Px69y23 } CellNode (70 @ 23) (20)Px70y3 { Px70y2, Px71y3, Px69y3, Px70y4 } CellNode (70 @ 3) (20)Px70y4 { Px70y3, Px71y4, Px69y4 } CellNode (70 @ 4) (20)Px71y1 { Px70y1, Px71y2, Px72y1 } CellNode (71 @ 1) (20)Px71y11 { Px71y12 } CellNode (71 @ 11) (20)Px71y12 { Px72y12, Px70y12, Px71y11, Px71y13 } CellNode (71 @ 12) (20)Px71y13 { Px71y14, Px72y13, Px70y13, Px71y12 } CellNode (71 @ 13) (20)Px71y14 { Px70y14, Px72y14, Px71y13 } CellNode (71 @ 14) (20)Px71y2 { Px71y3, Px70y2, Px71y1, Px72y2 } CellNode (71 @ 2) (20)Px71y23 { Px70y23, Px71y24 } CellNode (71 @ 23) (20)Px71y24 { Px71y23, Px71y25, Px72y24 } CellNode (71 @ 24) (20)Px71y25 { Px72y25, Px71y24 } CellNode (71 @ 25) (20)Px71y3 { Px71y4, Px70y3, Px72y3, Px71y2 } CellNode (71 @ 3) (20)Px71y4 { Px70y4, Px71y3, Px72y4 } CellNode (71 @ 4) (20)Px72y1 { Px71y1, Px72y2, Px73y1 } CellNode (72 @ 1) (20)Px72y12 { Px71y12, Px72y13, Px73y12 } CellNode (72 @ 12) (20)Px72y13 { Px72y12, Px73y13, Px72y14, Px71y13 } CellNode (72 @ 13) (20)Px72y14 { Px71y14, Px73y14, Px72y13, Px72y15 } CellNode (72 @ 14) (20)Px72y15 { Px72y16, Px72y14, Px73y15 } CellNode (72 @ 15) (20)Px72y16 { Px72y15, Px73y16 } CellNode (72 @ 16) (20)Px72y2 { Px73y2, Px72y1, Px71y2, Px72y3 } CellNode (72 @ 2) (20)Px72y24 { Px72y25, Px73y24, Px71y24 } CellNode (72 @ 24) (20)Px72y25 { Px71y25, Px72y24, Px72y26, Px73y25 } CellNode (72 @ 25) (20)Px72y26 { Px72y25, Px73y26 } CellNode (72 @ 26) (20)Px72y3 { Px72y4, Px71y3, Px73y3, Px72y2 } CellNode (72 @ 3) (20)Px72y4 { Px71y4, Px72y3, Px73y4 } CellNode (72 @ 4) (20)Px73y1 { Px72y1, Px73y2, Px74y1 } CellNode (73 @ 1) (20)Px73y12 { Px72y12, Px73y13 } CellNode (73 @ 12) (20)Px73y13 { Px73y14, Px72y13, Px73y12 } CellNode (73 @ 13) (20)Px73y14 { Px73y15, Px72y14, Px73y13 } CellNode (73 @ 14) (20)Px73y15 { Px73y14, Px73y16, Px74y15, Px72y15 } CellNode (73 @ 15) (20)Px73y16 { Px74y16, Px73y15, Px72y16, Px73y17 } CellNode (73 @ 16) (20)Px73y17 { Px73y18, Px73y16, Px74y17 } CellNode (73 @ 17) (20)Px73y18 { Px73y17, Px74y18 } CellNode (73 @ 18) (20)Px73y2 { Px73y1, Px73y3, Px72y2, Px74y2 } CellNode (73 @ 2) (20)Px73y24 { Px73y25, Px72y24 } CellNode (73 @ 24) (20)Px73y25 { Px74y25, Px73y26, Px72y25, Px73y24 } CellNode (73 @ 25) (20)Px73y26 { Px72y26, Px74y26, Px73y25 } CellNode (73 @ 26) (20)Px73y3 { Px74y3, Px73y2, Px72y3, Px73y4 } CellNode (73 @ 3) (20)Px73y4 { Px72y4, Px73y3, Px74y4 } CellNode (73 @ 4) (20)Px74y1 { Px75y1, Px73y1, Px74y2 } CellNode (74 @ 1) (20)Px74y15 { Px73y15, Px74y16 } CellNode (74 @ 15) (20)Px74y16 { Px74y17, Px73y16, Px75y16, Px74y15 } CellNode (74 @ 16) (20)Px74y17 { Px74y16, Px74y18, Px73y17, Px75y17 } CellNode (74 @ 17) (20)Px74y18 { Px75y18, Px73y18, Px74y17, Px74y19 } CellNode (74 @ 18) (20)Px74y19 { Px75y19, Px74y18 } CellNode (74 @ 19) (20)Px74y2 { Px74y3, Px73y2, Px74y1, Px75y2 } CellNode (74 @ 2) (20)Px74y25 { Px74y26, Px75y25, Px73y25 } CellNode (74 @ 25) (20)Px74y26 { Px73y26, Px75y26, Px74y25 } CellNode (74 @ 26) (20)Px74y3 { Px74y2, Px73y3, Px74y4, Px75y3 } CellNode (74 @ 3) (20)Px74y4 { Px74y3, Px75y4, Px74y5, Px73y4 } CellNode (74 @ 4) (20)Px74y5 { Px74y4, Px75y5 } CellNode (74 @ 5) (20)Px75y1 { Px75y2, Px76y1, Px74y1 } CellNode (75 @ 1) (20)Px75y16 { Px75y17, Px74y16, Px76y16 } CellNode (75 @ 16) (20)Px75y17 { Px76y17, Px74y17, Px75y16, Px75y18 } CellNode (75 @ 17) (20)Px75y18 { Px75y19, Px76y18, Px74y18, Px75y17 } CellNode (75 @ 18) (20)Px75y19 { Px75y18, Px76y19, Px74y19 } CellNode (75 @ 19) (20)Px75y2 { Px74y2, Px76y2, Px75y1, Px75y3 } CellNode (75 @ 2) (20)Px75y25 { Px74y25, Px75y26 } CellNode (75 @ 25) (20)Px75y26 { Px75y27, Px74y26, Px76y26, Px75y25 } CellNode (75 @ 26) (20)Px75y27 { Px76y27, Px75y26 } CellNode (75 @ 27) (20)Px75y3 { Px74y3, Px75y4, Px75y2, Px76y3 } CellNode (75 @ 3) (20)Px75y4 { Px76y4, Px74y4, Px75y5, Px75y3 } CellNode (75 @ 4) (20)Px75y5 { Px75y4, Px76y5, Px74y5 } CellNode (75 @ 5) (20)Px76y1 { Px75y1, Px76y2, Px77y1 } CellNode (76 @ 1) (20)Px76y16 { Px76y17, Px75y16 } CellNode (76 @ 16) (20)Px76y17 { Px76y18, Px77y17, Px76y16, Px75y17 } CellNode (76 @ 17) (20)Px76y18 { Px76y17, Px76y19, Px77y18, Px75y18 } CellNode (76 @ 18) (20)Px76y19 { Px77y19, Px76y18, Px75y19 } CellNode (76 @ 19) (20)Px76y2 { Px77y2, Px76y1, Px75y2, Px76y3 } CellNode (76 @ 2) (20)Px76y26 { Px76y27, Px75y26, Px77y26 } CellNode (76 @ 26) (20)Px76y27 { Px76y26, Px75y27, Px77y27 } CellNode (76 @ 27) (20)Px76y3 { Px76y4, Px76y2, Px77y3, Px75y3 } CellNode (76 @ 3) (20)Px76y4 { Px76y5, Px75y4, Px76y3, Px77y4 } CellNode (76 @ 4) (20)Px76y5 { Px75y5, Px76y4, Px77y5 } CellNode (76 @ 5) (20)Px77y1 { Px76y1, Px77y2, Px78y1 } CellNode (77 @ 1) (20)Px77y17 { Px78y17, Px77y18, Px76y17 } CellNode (77 @ 17) (20)Px77y18 { Px77y19, Px76y18, Px78y18, Px77y17 } CellNode (77 @ 18) (20)Px77y19 { Px78y19, Px77y18, Px76y19 } CellNode (77 @ 19) (20)Px77y2 { Px76y2, Px77y3, Px78y2, Px77y1 } CellNode (77 @ 2) (20)Px77y26 { Px76y26, Px77y27 } CellNode (77 @ 26) (20)Px77y27 { Px77y28, Px78y27, Px77y26, Px76y27 } CellNode (77 @ 27) (20)Px77y28 { Px77y27, Px78y28 } CellNode (77 @ 28) (20)Px77y3 { Px78y3, Px77y2, Px76y3, Px77y4 } CellNode (77 @ 3) (20)Px77y4 { Px77y5, Px77y3, Px78y4, Px76y4 } CellNode (77 @ 4) (20)Px77y5 { Px77y6, Px76y5, Px77y4, Px78y5 } CellNode (77 @ 5) (20)Px77y6 { Px78y6, Px77y5 } CellNode (77 @ 6) (20)Px78y1 { Px77y1, Px78y2 } CellNode (78 @ 1) (20)Px78y16 { Px78y17 } CellNode (78 @ 16) (20)Px78y17 { Px78y16, Px77y17, Px78y18 } CellNode (78 @ 17) (20)Px78y18 { Px78y17, Px77y18, Px78y19 } CellNode (78 @ 18) (20)Px78y19 { Px78y18, Px77y19 } CellNode (78 @ 19) (20)Px78y2 { Px77y2, Px78y3, Px78y1 } CellNode (78 @ 2) (20)Px78y27 { Px77y27, Px78y28 } CellNode (78 @ 27) (20)Px78y28 { Px78y29, Px77y28, Px78y27 } CellNode (78 @ 28) (20)Px78y29 { Px78y28 } CellNode (78 @ 29) (20)Px78y3 { Px77y3, Px78y2, Px78y4 } CellNode (78 @ 3) (20)Px78y4 { Px77y4, Px78y3, Px78y5 } CellNode (78 @ 4) (20)Px78y5 { Px77y5, Px78y6, Px78y4 } CellNode (78 @ 5) (20)Px78y6 { Px77y6, Px78y7, Px78y5 } CellNode (78 @ 6) (20)Px78y7 { Px78y6 } CellNode (78 @ 7) (20)Px7y1 { Px7y2, Px8y1, Px6y1 } CellNode (7 @ 1) (20)Px7y10 { Px7y9, Px7y11, Px8y10, Px6y10 } CellNode (7 @ 10) (20)Px7y11 { Px8y11, Px6y11, Px7y10, Px7y12 } CellNode (7 @ 11) (20)Px7y12 { Px7y13, Px8y12, Px6y12, Px7y11 } CellNode (7 @ 12) (20)Px7y13 { Px7y14, Px8y13, Px6y13, Px7y12 } CellNode (7 @ 13) (20)Px7y14 { Px7y13, Px6y14, Px7y15, Px8y14 } CellNode (7 @ 14) (20)Px7y15 { Px8y15, Px7y14, Px6y15, Px7y16 } CellNode (7 @ 15) (20)Px7y16 { Px7y17, Px8y16, Px7y15, Px6y16 } CellNode (7 @ 16) (20)Px7y17 { Px7y16, Px7y18, Px8y17, Px6y17 } CellNode (7 @ 17) (20)Px7y18 { Px8y18, Px7y17, Px6y18, Px7y19 } CellNode (7 @ 18) (20)Px7y19 { Px8y19, Px7y18, Px6y19, Px7y20 } CellNode (7 @ 19) (20)Px7y2 { Px6y2, Px7y3, Px8y2, Px7y1 } CellNode (7 @ 2) (20)Px7y20 { Px8y20, Px7y21, Px6y20, Px7y19 } CellNode (7 @ 20) (20)Px7y21 { Px6y21, Px7y22, Px8y21, Px7y20 } CellNode (7 @ 21) (20)Px7y22 { Px7y21, Px6y22, Px8y22, Px7y23 } CellNode (7 @ 22) (20)Px7y23 { Px6y23, Px8y23, Px7y22 } CellNode (7 @ 23) (20)Px7y3 { Px7y4, Px6y3, Px7y2, Px8y3 } CellNode (7 @ 3) (20)Px7y4 { Px7y3, Px8y4, Px6y4, Px7y5 } CellNode (7 @ 4) (20)Px7y5 { Px7y6, Px8y5, Px7y4, Px6y5 } CellNode (7 @ 5) (20)Px7y6 { Px7y7, Px6y6, Px8y6, Px7y5 } CellNode (7 @ 6) (20)Px7y7 { Px8y7, Px6y7, Px7y8, Px7y6 } CellNode (7 @ 7) (20)Px7y8 { Px7y7, Px8y8, Px6y8, Px7y9 } CellNode (7 @ 8) (20)Px7y9 { Px7y10, Px8y9, Px7y8, Px6y9 } CellNode (7 @ 9) (20)Px8y1 { Px7y1, Px8y2, Px9y1 } CellNode (8 @ 1) (20)Px8y10 { Px9y10, Px7y10, Px8y11, Px8y9 } CellNode (8 @ 10) (20)Px8y11 { Px8y12, Px7y11, Px9y11, Px8y10 } CellNode (8 @ 11) (20)Px8y12 { Px8y11, Px9y12, Px7y12, Px8y13 } CellNode (8 @ 12) (20)Px8y13 { Px8y14, Px7y13, Px8y12, Px9y13 } CellNode (8 @ 13) (20)Px8y14 { Px8y15, Px7y14, Px9y14, Px8y13 } CellNode (8 @ 14) (20)Px8y15 { Px9y15, Px7y15, Px8y16, Px8y14 } CellNode (8 @ 15) (20)Px8y16 { Px8y17, Px8y15, Px9y16, Px7y16 } CellNode (8 @ 16) (20)Px8y17 { Px9y17, Px7y17, Px8y18, Px8y16 } CellNode (8 @ 17) (20)Px8y18 { Px8y19, Px7y18, Px9y18, Px8y17 } CellNode (8 @ 18) (20)Px8y19 { Px8y18, Px8y20, Px9y19, Px7y19 } CellNode (8 @ 19) (20)Px8y2 { Px8y1, Px9y2, Px8y3, Px7y2 } CellNode (8 @ 2) (20)Px8y20 { Px8y19, Px8y21, Px9y20, Px7y20 } CellNode (8 @ 20) (20)Px8y21 { Px9y21, Px7y21, Px8y20, Px8y22 } CellNode (8 @ 21) (20)Px8y22 { Px8y23, Px9y22, Px7y22, Px8y21 } CellNode (8 @ 22) (20)Px8y23 { Px7y23, Px8y22 } CellNode (8 @ 23) (20)Px8y3 { Px8y4, Px7y3, Px8y2, Px9y3 } CellNode (8 @ 3) (20)Px8y4 { Px8y5, Px7y4, Px9y4, Px8y3 } CellNode (8 @ 4) (20)Px8y5 { Px9y5, Px8y4, Px8y6, Px7y5 } CellNode (8 @ 5) (20)Px8y6 { Px8y7, Px8y5, Px9y6, Px7y6 } CellNode (8 @ 6) (20)Px8y7 { Px7y7, Px8y8, Px9y7, Px8y6 } CellNode (8 @ 7) (20)Px8y8 { Px9y8, Px8y9, Px7y8, Px8y7 } CellNode (8 @ 8) (20)Px8y9 { Px8y8, Px9y9, Px8y10, Px7y9 } CellNode (8 @ 9) (20)Px9y1 { Px8y1, Px10y1, Px9y2 } CellNode (9 @ 1) (20)Px9y10 { Px10y10, Px9y9, Px9y11, Px8y10 } CellNode (9 @ 10) (20)Px9y11 { Px9y10, Px8y11, Px10y11, Px9y12 } CellNode (9 @ 11) (20)Px9y12 { Px8y12, Px9y11, Px10y12, Px9y13 } CellNode (9 @ 12) (20)Px9y13 { Px9y14, Px9y12, Px8y13, Px10y13 } CellNode (9 @ 13) (20)Px9y14 { Px8y14, Px10y14, Px9y15, Px9y13 } CellNode (9 @ 14) (20)Px9y15 { Px8y15, Px9y14, Px10y15, Px9y16 } CellNode (9 @ 15) (20)Px9y16 { Px9y17, Px9y15, Px8y16, Px10y16 } CellNode (9 @ 16) (20)Px9y17 { Px10y17, Px9y18, Px9y16, Px8y17 } CellNode (9 @ 17) (20)Px9y18 { Px8y18, Px9y17, Px10y18, Px9y19 } CellNode (9 @ 18) (20)Px9y19 { Px8y19, Px9y18, Px10y19, Px9y20 } CellNode (9 @ 19) (20)Px9y2 { Px10y2, Px8y2, Px9y3, Px9y1 } CellNode (9 @ 2) (20)Px9y20 { Px9y21, Px8y20, Px10y20, Px9y19 } CellNode (9 @ 20) (20)Px9y21 { Px9y22, Px8y21, Px9y20, Px10y21 } CellNode (9 @ 21) (20)Px9y22 { Px9y21, Px10y22, Px8y22 } CellNode (9 @ 22) (20)Px9y3 { Px10y3, Px9y2, Px8y3, Px9y4 } CellNode (9 @ 3) (20)Px9y4 { Px9y5, Px10y4, Px8y4, Px9y3 } CellNode (9 @ 4) (20)Px9y5 { Px8y5, Px9y6, Px10y5, Px9y4 } CellNode (9 @ 5) (20)Px9y6 { Px9y5, Px10y6, Px8y6, Px9y7 } CellNode (9 @ 6) (20)Px9y7 { Px8y7, Px9y8, Px9y6, Px10y7 } CellNode (9 @ 7) (20)Px9y8 { Px10y8, Px8y8, Px9y9, Px9y7 } CellNode (9 @ 8) (20)Px9y9 { Px9y10, Px10y9, Px8y9, Px9y8 } CellNode (9 @ 9) (20)</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="barrier:">barrier: anObject	barrier := anObject</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>behaviours</category><body package="DistributedModeling-Processes" selector="synchronousBehaviour">synchronousBehaviour	| messageOut messageIn |	messageOut := Array new: self outputs size.	messageIn := Array new: self inputs size.	^	[self initialBlock value: self value: messageOut.	self step timesRepeat: 			[[self outputs keysAndValuesDo: [:i :output | output nextPut: (messageOut at: i)]] fork.			self inputs keysAndValuesDo: [:i :input | messageIn at: i put: input next].			self transitionBlock value: messageIn value: messageOut]]</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="inputs">inputs	^inputs</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="block:">block: anObject	block := anObject</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="outputs:">outputs: anObject	outputs := anObject</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="initialBlock">initialBlock		^self block first</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>behaviours</category><body package="DistributedModeling-Processes" selector="synchronousBehaviour:">synchronousBehaviour: steps	| messageOut messageIn |	messageOut := Array new: self outputs size.	messageIn := Array new: self inputs size.	^	[self initialBlock value: self value: messageOut.	steps timesRepeat: 			[[self outputs keysAndValuesDo: [:i :output | output nextPut: (messageOut at: i)]] fork.			self inputs keysAndValuesDo: [:i :input | messageIn at: i put: input next].			self transitionBlock value: messageIn value: messageOut]. 	barrier nextPut: messageOut first]</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="block">block	^block</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="inputs:">inputs: anObject	inputs := anObject</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="transitionBlock">transitionBlock		^self block last</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="barrier">barrier	^barrier</body></methods><methods><class-id>AlgoDis.SynchronousBlock</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="outputs">outputs	^outputs</body></methods><methods><class-id>AlgoDis.SynchronousProcess</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="outputs:">outputs: anObject	outputs := anObject</body></methods><methods><class-id>AlgoDis.SynchronousProcess</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="block">block	^block</body></methods><methods><class-id>AlgoDis.SynchronousProcess</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="inputs:">inputs: anObject	inputs := anObject</body></methods><methods><class-id>AlgoDis.SynchronousProcess</class-id> <category>initialize-release</category><body package="DistributedModeling-Processes" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	inputs := nil.	outputs := nil.	block := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.SynchronousProcess</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="inputs">inputs	^inputs</body></methods><methods><class-id>AlgoDis.SynchronousProcess</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="outputs">outputs	^outputs</body></methods><methods><class-id>AlgoDis.SynchronousProcess</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="block:">block: anObject	block := anObject</body></methods><methods><class-id>AlgoDis.SynchronousProcess</class-id> <category>changing process state</category><body package="DistributedModeling-Processes" selector="resume">resume		super   resume</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="fileOpen">fileOpen	"Ouvre un fichier et le parse"	| fname mcell |	fname := Dialog requestFileName: 'Choose a .mcl file' default: 'test.lif' for: '*.lif'.	fname isNil ifTrue: [^nil].	fname = '' ifTrue: [^nil].	mcell := AlgoDis.Mcell new.	mcell parseFile: fname.	mcell genImage: self scaleField value.	self mcellView model: mcell.	self mcellView invalidate.	(fname tokensBasedOn: '.') first asSymbol.	self mcellText value: mcell printString.	Transcript		cr;		show: 'Création du réseau : ' , (Time millisecondsToRun: [self createNetwork]) printString;		cr.	running ifTrue: [self doStop].	started ifTrue: [self startStop]</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="started">started	^started</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="doStopStream">doStopStream	running := false.	self process1 terminate</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="doStartStream">doStartStream	| processBlock |	running := true.	processBlock := [[running] whileTrue: [self doStepFile]].	process1 := processBlock fork</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="initCuda">initCuda	"Initialise les données de la librairie Cuda"	| mcell |	mcell := self mcellView model.	CACudaInterface unloadLibraries.	mcell writeToCuda: cudaInterface</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="startStopStream">startStopStream	| mcell errors button startStopString |	mcell := self mcellView model.	mcell isNil ifTrue: [^self].	started		ifTrue: 			[started := false.			startSema signal.			startSema wait.			startedProcess isNil ifFalse: [startedProcess terminate]]		ifFalse: 			[started := true.			startedProcess := 					[ExternalProcess						execute: '/home/joyeux/failleth/TER/VW77/AutomataCellular/Mcell'						arguments: #()						do: 							[:readStream :writeStream |							mcell writeTo: writeStream.							writeStream cr.							self startSema wait.							[started] whileTrue: 									[writeStream										nextPutAll: '1';										cr.									mcell readFrom: readStream.									self startSema signal.									self startSema wait].							writeStream								nextPutAll: '0';								cr;								flush;								close.							self startSema signal]						errorStreamDo: 							[:errorStream |							errors := errorStream upToEnd.							errors isEmpty								ifFalse: 									[Transcript										cr;										show: 'ERROR!';										cr;										show: errors.									started := false.									button := self builder componentAt: #ActionButton2.									(button widget)										labelString: 'Start';										invalidate]]]							fork].	button := self builder componentAt: #ActionButton2.	started ifTrue: [startStopString := 'Stop'] ifFalse: [startStopString := 'Start'].	(button widget)		labelString: startStopString;		invalidate.	running		ifFalse: 			[button := self builder componentAt: #ActionButton3.			started ifTrue: [button enable] ifFalse: [button disable].			button widget invalidate]</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="startSema">startSema	^startSema</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mcellText1">mcellText1	^mcellText</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="doStepFile">doStepFile	"This stub method was generated by UIDefiner"	| mcell |	mcell := self mcellView model value.	mcell isNil ifTrue: [^self].	mcell writeFile: 'data.bin'.	UnixProcess cshOne: 'AutomataCellularFile/GenericStatic'.	mcell readFile: 'test'.	mcell genImage: self scaleField value.	self mcellView model value: mcell.	self mcellView invalidate</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="createNetworkNetGen">createNetworkNetGen	"Créer des connexions grâce a NetGen"	| ng net graph system titleCuda file mcell |	mcell := self mcellView model.	ng := NetworkGeometry				gridNetwork: mcell mBoard x				by: mcell mBoard y				drawing: false				title: 'gridSample'.	net := ng doNetwork: 'test' by: mcell mBoard x.	graph := net buildGraph.	graph buildTable.	system := graph cudaSystem.	titleCuda := 'AutomataCellular/generated.cu'.	file := titleCuda asFilename writeStream.	system cudaGenOn: file.	file close.	UnixProcess cshOne: 'cd AutomataCellular/ ; make'</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="cudaInterface">cudaInterface	^cudaInterface</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="doStop">doStop	| button |	running ifFalse:[^nil].	running := false.	process1 isNil ifFalse:[self process1 terminate].	process2 isNil ifFalse:[self process2 terminate].	self startStop.	button := self builder componentAt: #ActionButton2.	button enable.	(button widget)	invalidate</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="doStart2">doStart2	"Exécute l'automate cellulaire"	| button mcell component gc processCuda processVW stepSema readSema |	stepSema := Semaphore new.	readSema := Semaphore new.	mcell := self mcellView model.	mcell isNil ifTrue: [^self].	running ifTrue: [^nil].	started ifTrue: [^nil].	running := true.	self startStop.	processCuda := [[running] whileTrue: 					[self cudaInterface doStep.					readSema signal.					(Delay forMilliseconds: self speedField value) wait.					stepSema wait]].	processVW :=			[[running] whileTrue: 					[readSema wait.					mcell readFromCuda: cudaInterface.					stepSema signal.					mcell genImage: self scaleField value.					self mcellView model: mcell.					component := self builder componentAt: #ViewHolder1.					gc := component widget graphicsContext.					mcell mImage displayOn: gc.					self mcellView invalidate.					self changed: #image with: nil]].	process2 := processVW fork.	process1 := processCuda fork.	button := self builder componentAt: #ActionButton2.	button disable.	button widget invalidate</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="process2:">process2: anObject	process2 := anObject</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="startStop">startStop	"Permet d'initialiser la librairie avec l'automate cellulaire ou d'arreter la simulation courrante"	| mcell button startStopString |	mcell := self mcellView model.	mcell isNil ifTrue: [^self].	started		ifTrue: 			[started := false.			cudaInterface cleanUp]		ifFalse: 			[started := true.			self initCuda].	button := self builder componentAt: #ActionButton2.	started ifTrue: [startStopString := 'Stop'] ifFalse: [startStopString := 'Start'].	(button widget)		labelString: startStopString;		invalidate.	running		ifFalse: 			[button := self builder componentAt: #ActionButton3.			started ifTrue: [button enable] ifFalse: [button disable].			button widget invalidate]</body></methods><methods><class-id>UIMCell</class-id> <category>initialize-release</category><body package="DistributedModeling-CellularAutomata" selector="initialize">initialize	| view |	view := MCellView new.	view model: nil.	self mcellView: view.	self mcellText: nil.	self filename: nil.	self step: nil.	self running: false.	self started: false.	self startedProcess: nil.	self process1: nil.	self process2: nil.	self scaleField onChangeSend: #updateScale to: self.	self startSema: Semaphore new.	self cudaInterface: CACudaInterface new.	super initialize</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="startedProcess">startedProcess	^startedProcess</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="scaleField:">scaleField: anObject	^scaleField := anObject</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="filename">filename	^filename</body></methods><methods><class-id>UIMCell</class-id> <category>aspects</category><body package="DistributedModeling-CellularAutomata" selector="scaleField">scaleField	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^scaleField isNil		ifTrue:			[scaleField := 1 asValue]		ifFalse:			[scaleField]</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="started:">started: anObject	started := anObject</body></methods><methods><class-id>UIMCell</class-id> <category>aspects</category><body package="DistributedModeling-CellularAutomata" selector="speedField">speedField	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^speedField isNil		ifTrue:			[speedField := 200 asValue]		ifFalse:			[speedField]</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="running">running	^running</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mcellText:">mcellText: anObject	^mcellText := anObject</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="startedProcess:">startedProcess: anObject	startedProcess := anObject</body></methods><methods><class-id>UIMCell</class-id> <category>initialize-release</category><body package="DistributedModeling-CellularAutomata" selector="release">release	started		ifTrue: 			[started := false.			startedProcess isNil ifFalse:[			startSema signal.			startSema wait.			startedProcess isNil ifFalse: [startedProcess terminate].			Transcript				show: 'Stopped';				cr].			cudaInterface cleanUp].	super release</body></methods><methods><class-id>UIMCell</class-id> <category>aspects</category><body package="DistributedModeling-CellularAutomata" selector="mcellText">mcellText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^mcellText isNil		ifTrue:			[mcellText := String new asValue]		ifFalse:			[mcellText]</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="scaleField1">scaleField1	^scaleField</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="step:">step: anObject	step := anObject</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="doStepStream">doStepStream	"This stub method was generated by UIDefiner"	| mcell component gc temps |	temps := 0.	1 to: 1 do:[:i | temps := temps + ( Time microsecondsToRun:[	mcell := self mcellView model.	mcell isNil ifTrue: [^self].	started ifFalse: [^self].	self startSema signal.	self startSema wait.	mcell genImage: self scaleField value.	self mcellView model: mcell.	component := self builder componentAt: #ViewHolder1.	gc := component widget graphicsContext.	mcell mImage displayOn: gc.	self mcellView invalidate.	self changed: #image with: nil])].	Transcript cr ; show: 'Temps : ',temps printString;cr.</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="cudaInterface:">cudaInterface: anObject	cudaInterface := anObject</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mcellView">mcellView	^mcellView</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="step">step	^step</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="doStart">doStart	self doStart2"	| processBlock button mcell |	mcell := self mcellView model.	mcell isNil ifTrue: [^self].	running ifTrue: [^nil].	started ifTrue: [^nil].	running := true.	self startStop.	processBlock :=			[[running] whileTrue: 					[self doStep.					(Delay forMilliseconds: self speedField value) wait]].	process := processBlock fork.	button := self builder componentAt: #ActionButton2.	button disable.	button widget invalidate"</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="process1">process1	^process1</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="doStep">doStep	"Calcul un pas sur la librairie et affiche le résultat"	| mcell component gc |	mcell := self mcellView model.	mcell isNil ifTrue: [^self].	started ifFalse: [^self].	self cudaInterface doStep.	mcell readFromCuda: cudaInterface.	mcell genImage: self scaleField value.	self mcellView model: mcell.	component := self builder componentAt: #ViewHolder1.	gc := component widget graphicsContext.	mcell mImage displayOn: gc.	self mcellView invalidate.	self changed: #image with: nil</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="process2">process2	^process2</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="updateScale">updateScale	"Met à jour l'image avec la nouvelle valeur de zoom"	| mcell component gc |	mcell := self mcellView model.	mcell isNil ifTrue: [^self].	mcell genImage: self scaleField value.	self mcellView model: mcell.	component := self builder componentAt: #ViewHolder1.	gc := component widget graphicsContext.	mcell mImage displayOn: gc.	self mcellView invalidate.	self changed: #image with: nil</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="startSema:">startSema: anObject	startSema := anObject</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="createNetworkStream">createNetworkStream	"Créer des connexions avec ConnectivityModel pour un stream"	| titleCuda file conn conModel cb mcell |	mcell := self mcellView model.	conn := OrderedCollection new.	conn		add: 0 @ 1;		add: 1 @ 0;		add: 1 @ 1;		add: -1 @ 0;		add: 0 @ -1;		add: -1 @ -1;		add: -1 @ 1;		add: 1 @ -1.	conModel := ConnectivityModel new.	conModel		genConnectivity: mcell mBoard x @ mcell mBoard y		with: conn		edges: #(false false).	cb := AlgoDis.CudaBuilder new.	cb setUpFromAC: conModel.	titleCuda := 'AutomataCellular/generated.cu'.	file := titleCuda asFilename writeStream.	cb cudaGenOn: file.	file close.	UnixProcess cshOne: 'cd AutomataCellular/ ; make'</body></methods><methods><class-id>UIMCell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="createNetwork">createNetwork	"Créer un réseau avec la classe ConnectivityModel"	| titleCuda file conn conModel cb mcell |	mcell := self mcellView model.	conn := OrderedCollection new.	conn		add: 0 @ 1;		add: 1 @ 0;		add: 1 @ 1;		add: -1 @ 0;		add: 0 @ -1;		add: -1 @ -1;		add: -1 @ 1;		add: 1 @ -1.	conModel := ConnectivityModel new.	conModel		genConnectivity: mcell mBoard x @ mcell mBoard y		with: conn		edges: #(false false).	cb := AlgoDis.CudaBuilder new.	cb setUpFromAC: conModel.	titleCuda := 'Library/generated.cu'.	file := titleCuda asFilename writeStream.	cb cudaGenOn: file.	file close.	Transcript		cr;		show: 'Temps de compilation: ' , (Time millisecondsToRun: [UnixProcess cshOne: 'cd Library/ ; make']) printString;		cr</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="filename:">filename: anObject	filename := anObject</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mcellView:">mcellView: anObject	mcellView := anObject</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="running:">running: anObject	running := anObject</body></methods><methods><class-id>UIMCell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="process1:">process1: anObject	process1 := anObject</body></methods><methods><class-id>MCellView</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="model:">model: aModel	super model: aModel.	self invalidate.	"Tell the controller where to send menu messages."	"self controller performer: aModel"</body></methods><methods><class-id>MCellView</class-id> <category>displaying</category><body package="DistributedModeling-CellularAutomata" selector="displayOn:">displayOn: aGc	| mcell image windowSize origin1 buffer bufferGC |	mcell := self model.	mcell isNil		ifFalse: 			[image := mcell mImage.			windowSize := aGc clippingBounds extent.			origin1 := 0 @ 0.			buffer := Pixmap extent: mcell mBoard* mcell mScale."windowSize"			bufferGC := buffer graphicsContext.			"Clear the buffer, then assemble the next scene."			buffer clear.			image displayOn: bufferGC at: origin1.			"Display the next scene."			buffer displayOn: aGc]</body></methods><methods><class-id>MCellView</class-id> <category>updating</category><body package="DistributedModeling-CellularAutomata" selector="update:with:">update: anAspect with: anObject	"When a point is added to the model..."	anAspect == #image ifTrue: [self model image displayOn: self graphicsContext].	"When the model erases its contents..."	anAspect == #image ifTrue: [self invalidate]</body></methods><methods><class-id>MCellView</class-id> <category>initialize-release</category><body package="DistributedModeling-CellularAutomata" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>MCellView</class-id> <category>displaying</category><body package="DistributedModeling-CellularAutomata" selector="displayOnInitial:">displayOnInitial: aGc	| mcell image |	mcell := self model.	mcell isNil		ifFalse: 			[image := mcell mImage.			image displayOn: aGc]</body></methods><methods><class-id>ConnectivityModel</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="genConnectivity:with:edges:">genConnectivity: size with: connect edges: edges	"Genère la connectivité. edges définis si les bords sont reliés"	| grille col |	self connectivity: connect.	self board: size.	self maxFanOut: 0.	grille := Array new: size x.	1 to: size x do: [:index | grille at: index put: (Array new: size y)].	1 to: size x		do: 			[:indexi |			1 to: size y				do: 					[:indexj |					col := OrderedCollection new.					connect do: 							[:point |							| link |							link := self makeLink: indexi @ indexj + point edges: edges.							(self isValid: link) ifTrue: [col add: link]].					col size &gt; self maxFanOut ifTrue: [maxFanOut := col size].					(grille at: indexi) at: indexj put: col]].	self grid: grille</body></methods><methods><class-id>ConnectivityModel</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="displayGrid">displayGrid	"Affiche la grille des cellules et leur connectivitées"	| win comp randomStream windowSize theTitle colorNames noColor paint paintIndex col line hgap vgap |	windowSize := 640 @ 480.	hgap := windowSize x / (board x + 1).	vgap := windowSize y / (board y + 1).	theTitle := 'Connectivity'.	win := ScheduledWindow				model: nil				label: #circles &lt;&lt; #examples &gt;&gt; theTitle				minimumSize: windowSize.	comp := CompositePart new.	randomStream := Random new.	colorNames := ColorValue constantNames.	noColor := ColorValue white.	1 to: self grid size		do: 			[:indexi |			1 to: board y				do: 					[:indexj |					| point |					point := indexi @ indexj.					point x: point x * hgap.					point y: point y * vgap.					paint := noColor.					[paint = noColor] whileTrue: 							[paintIndex := (randomStream next * colorNames size) ceiling.							paint := ColorValue perform: (colorNames at: paintIndex)].					col := (grid at: indexi) at: indexj.					col do: 							[:npoint |							| scaledPoint |							scaledPoint := 0 @ 0.							scaledPoint x: npoint x * hgap.							scaledPoint y: npoint y * vgap.							line := LineSegment from: point to: scaledPoint.							comp add: ((GraphicsAttributesWrapper on: line asStroker) attributes: (GraphicsAttributes new paint: paint))]]].	win component: (BoundedWrapper on: comp).	win open</body></methods><methods><class-id>ConnectivityModel</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="board:">board: anObject	board := anObject</body></methods><methods><class-id>ConnectivityModel</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="connectivity">connectivity	^connectivity</body></methods><methods><class-id>ConnectivityModel</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="board">board	^board</body></methods><methods><class-id>ConnectivityModel</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="maxFanOut">maxFanOut	^maxFanOut</body></methods><methods><class-id>ConnectivityModel</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="isValid:">isValid: point	point x &lt; 1 ifTrue: [^false].	point x &gt; self board x ifTrue: [^false].	point y &lt; 1 ifTrue: [^false].	point y &gt; self board y ifTrue: [^false].	^true</body></methods><methods><class-id>ConnectivityModel</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="maxFanOut:">maxFanOut: anObject	maxFanOut := anObject</body></methods><methods><class-id>ConnectivityModel</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="genConnectivity:with:">genConnectivity: size with: connect	| edges |	edges := #(false false).	self genConnectivity: size with: connect edges: edges</body></methods><methods><class-id>ConnectivityModel</class-id> <category>initialize-release</category><body package="DistributedModeling-CellularAutomata" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	grid := nil.	board := nil.	connectivity := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>ConnectivityModel</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="connectivity:">connectivity: anObject	connectivity := anObject</body></methods><methods><class-id>ConnectivityModel</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="grid">grid	^grid</body></methods><methods><class-id>ConnectivityModel</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="grid:">grid: anObject	grid := anObject</body></methods><methods><class-id>ConnectivityModel</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="makeLink:edges:">makeLink: point edges: edges	| ret |	ret := point.	edges first		ifTrue: 			[ret x &lt; 1 ifTrue: [ret x: self board x + ret x].			ret x &gt; board x ifTrue: [ret x: ret x - self board x]].	(edges at: 2)		ifTrue: 			[ret y &lt; 1 ifTrue: [ret y: self board y + ret y].			ret y &gt; board y ifTrue: [ret y: ret y - self board y]].	^ret</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mRules:">mRules: anObject	mRules := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mRules">mRules	^mRules</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="parseMCL:">parseMCL: fileName	| rs line scanner eachLine smb |	rs := fileName asFilename readStream.	scanner := Scanner new.	self mBoard: 300 @ 300.	self mLines: nil.	self mLine: 0.	self mIndex: 1.	[rs atEnd] whileFalse: 			[eachLine := rs upTo: Character cr.			(eachLine size &gt; 2 and: [(eachLine copyFrom: 1 to: 2) = '#D'])				ifFalse: 					[line := scanner scanTokens: eachLine.					line first = #'#'						ifTrue: 							[smb := (line at: 2) asString asLowercase , ':'.							smb = 'l:'								ifTrue: [self perform: smb asSymbol with: eachLine]								ifFalse: 									[smb = 'rule:' ifTrue: [self perform: smb asSymbol with: (eachLine copyFrom: 7 to: eachLine size)] ifFalse: [self perform: smb asSymbol with: (line copyFrom: 3 to: line size)]]]].			rs close.			self grid: (Array new: mBoard y).			1 to: grid size do: [:i | grid at: i put: (Array new: mBoard x withAll: 0)].			0 to: mLines size - 1 do: [:index | (grid at: (index / mBoard x) asInteger + 1) at: (index rem: mBoard x) asInteger + 1 put: (mLines at: index + 1)]]</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="d:">d: line</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="wrap:">wrap: line	self mWrap: (line first).</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>initialize-release</category><body package="DistributedModeling-CellularAutomata" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	mScale := 1.	mFiletype := nil.	mVersion := nil.	mGame := nil.	mRules := nil.	mSpeed := nil.	mBoard := nil.	mCcolors := nil.	mColoring := nil.	mWrap := nil.	mPalette := nil.	mLines := nil.	mDiv := nil.	mIndex := nil.	mLine := nil.	mImage := nil.	mBorn := nil.	mSurvive := nil.	curBlock := nil.	grid := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="readFromCuda:">readFromCuda: cudaInterface	"Lis les informations à partir de la librairie Cuda"	| nodes ptr N |	N := self mBoard x * self mBoard y.	nodes := cudaInterface nodeState gcMalloc: N.	cudaInterface writeToSt80: nodes.	ptr := nodes copy.	1 to: self mBoard y		do: 			[:indi |			1 to: self mBoard x				do: 					[:indj |					(self grid at: indi) at: indj put: (ptr memberAt: #current).					ptr += 1]]</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mBoard">mBoard	^mBoard</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="palette:">palette: line	self mPalette:line.</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mPalette">mPalette	^mPalette</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mSpeed">mSpeed	^mSpeed</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="grid:">grid: anObject	grid := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mSpeed:">mSpeed: anObject	mSpeed := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mGame:">mGame: anObject	mGame := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mPalette:">mPalette: anObject	mPalette := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mSurvive">mSurvive	^mSurvive</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="l:">l: aLine	| stream chr number adding |	stream := aLine readStream.	mLines isNil		ifTrue: 			[mIndex := 1.			mLine := 0.			mLines := Array new: mBoard x * mBoard y withAll: 0].	stream next.	stream next.	stream next.	chr := stream next.	[chr isNil] whileFalse: 			[chr isDigit				ifTrue: 					[number := chr asInteger - $0 asInteger.					chr := stream next.					[chr isDigit] whileTrue: 							[number := number * 10 + chr asInteger - $0 asInteger.							chr := stream next]]				ifFalse: [number := 1].			1 to: number				do: 					[:i |					chr = $$						ifTrue: 							[mLine := mLine + mBoard x.							mIndex := 1]						ifFalse: 							[chr = $.								ifTrue: [mLines at: mLine + mIndex put: 0]								ifFalse: 									[(chr asInteger &lt;= $j asInteger &amp; chr asInteger) &gt;= $a asInteger										ifTrue: 											[adding := chr asInteger - $a asInteger.											adding := adding * 24.											chr := stream next.											mLines at: mLine + mIndex put: chr asInteger - $A asInteger + adding + 1]										ifFalse: [mLines at: mLine + mIndex put: chr asInteger - $A asInteger + 1]]].					mIndex := mIndex + 1].			chr := stream next]</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="board:">board: line	| x y string |	x := line first.	string := line at:2.	string := string copyFrom: 2 to: string size.	y := string asNumber.	self mBoard: x@y.</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="parseLIF:">parseLIF: fileName	| file rs line scanner eachLine smb |	file := fileName asFilename.	rs := file readStream.	scanner := Scanner new.	[rs atEnd] whileFalse: 			[eachLine := rs upTo: Character cr.			eachLine isEmpty				ifFalse: 					[(eachLine size &gt; 2 and: [(eachLine copyFrom: 1 to: 2) = '#D'])						ifFalse: 							[line := scanner scanTokens: eachLine.							line first = #'#'								ifTrue: 									[smb := (line at: 2) asString asLowercase , ':'.									smb = 'r:' ifTrue: [self perform: smb asSymbol with: (eachLine copyFrom: 4 to: eachLine size)] ifFalse: [self perform: smb asSymbol with: (line copyFrom: 3 to: line size)]]								ifFalse: [eachLine first = $. | (eachLine first = $*) ifTrue: [self addLine: eachLine]]]]].	mLines isNil ifFalse: [curBlock isNil ifFalse: [mLines add: curBlock]].	rs close.	self createGrid</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mScale:">mScale: anObject	mScale := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="writeTo:">writeTo: ws	"Ecris les informations dans un stream"	ws nextPutAll: self mBoard x printString.	ws nextPut: Character space.	ws nextPutAll: self mBoard y printString.	ws nextPut: Character space.	ws nextPutAll: self mSurvive size printString.	ws nextPut: Character space.	ws nextPutAll: self mBorn size printString.	ws nextPut: Character space.	1 to: mSurvive size		do: 			[:index |			ws nextPutAll: (self mSurvive at: index) printString.			ws nextPut: Character space].	1 to: mBorn size		do: 			[:index |			ws nextPutAll: (self mBorn at: index) printString.			ws nextPut: Character space].	1 to: mBoard y		do: 			[:indexi |			1 to: mBoard x				do: 					[:indexj |					ws nextPutAll: ((self grid at: indexi) at: indexj) printString.					ws nextPut: Character space]]</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="readFrom:">readFrom: ws	"Lis les informations à partir d'un stream"	| number val |	1 to: mBoard y		do: 			[:indexi |			1 to: mBoard x				do: 					[:indexj |					number := 0.					val := ws next.					[val = Character space] whileFalse: 							[number := number * 10 + (val asInteger - $0 asInteger).							val := ws next].					(grid at: indexi) at: indexj put: number]].	ws upTo: Character cr</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="grid">grid	^grid</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="parseFile:">parseFile: fileName	| file rs line scanner eachLine |	file := fileName asFilename.	rs := file readStream.	scanner := Scanner new.	eachLine := rs upTo: Character cr.	rs close.	line := scanner scanTokens: eachLine.	(line at: 2) asString asLowercase = 'life' ifTrue: [self parseLIF: fileName].	(line at: 2) asString asLowercase = 'mcell' ifTrue: [self parseMCL: fileName]</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="readFile:">readFile: filename	"Lis un fichier venant d'un programme Cuda contenant des informations au format binaire"	| ws intSize ba |	intSize := 4.	ws := filename asFilename readStream binary.	ba := ByteArray new: intSize.	1 to: mBoard y		do: 			[:indexi |			1 to: mBoard x				do: 					[:indexj |					1 to: intSize do: [:i | ba at: i put: ws next].					(grid at: indexi) at: indexj put: ba reverse asLargePositiveInteger asSmallInteger]].	ws close</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mFiletype">mFiletype	^mFiletype</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mWrap:">mWrap: anObject	mWrap := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mLines:">mLines: anObject	mLines := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mSurvive:">mSurvive: anObject	mSurvive := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="speed:">speed: line	self mSpeed: (line first).</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mDiv">mDiv	^mDiv</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mColoring:">mColoring: anObject	mColoring := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mImage:">mImage: anObject	mImage := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mVersion">mVersion	^mVersion</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mIndex:">mIndex: anObject	^mIndex := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="r:">r: line	self rule: line</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mIndex">mIndex	^mIndex</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="coloring:">coloring: line	self mColoring: (line first).</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="addLine:">addLine: aLine	"Ajoute la ligne au lifeblock courant"	curBlock process: aLine</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="mcell:">mcell: aLine	self mFiletype: 'MCell'.	self mVersion: (aLine first)</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mLines">mLines	^mLines</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="genImage:">genImage: scale	"Génère une image représentant le réseau. La palette ne peut afficher que des images contenant des 0 ou des 1. Le scale permet de définir le zoom"	self mScale: scale.	mImage := Image				extent: mBoard * scale				depth: 8				bitsPerPixel: 8				palette: MonoMappedPalette whiteBlack.	1 to: mBoard x - 1		do: 			[:i |			1 to: mBoard y - 1				do: 					[:j |					1 to: scale						do: 							[:vali |							1 to: scale								do: 									[:valj |									| indj indi |									indj := (j - 1) * scale + valj.									indi := (i - 1) * scale + vali.									mImage atPoint: indi @ indj put: ((grid at: j) at: i)]]]]</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="p:">p: line	mLines isNil ifTrue: [mLines := OrderedCollection new].	curBlock isNil ifFalse:[mLines add: curBlock].	self curBlock: LifeBlock new.	self curBlock start: (line first) @ (line at: 2)</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="createGrid">createGrid	"Créer la grille a partir des informations lues"	| max |	max := 0 @ 0.	mLines do: 			[:lb |			max x &lt; lb start x abs ifTrue: [max x: lb start x abs].			max y &lt; lb start y abs ifTrue: [max y: lb start y abs].			max x &lt; (lb start x + lb taille x) ifTrue: [max x: lb start x + lb taille x].			max y &lt; (lb start y + lb taille y) ifTrue: [max y: lb start y + lb taille y]].	mBoard := (max x * 2 + 2) @ (max y * 2 + 2).	self grid: (Array new: mBoard y).	1 to: grid size do: [:i | grid at: i put: (Array new: mBoard x withAll: 0)].	mLines do: 			[:lb |			| indexi |			indexi := mBoard y / 2 + lb start y.			lb data do: 					[:cLine |					| indexj |					indexj := mBoard x / 2 + lb start x.					cLine do: 							[:data |							(grid at: indexi) at: indexj put: data.							indexj := indexj + 1].					indexi := indexi + 1]]</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mBorn">mBorn	^mBorn</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="rule:">rule: line	| survive born rules |	rules := line tokensBasedOn: $/.	survive := rules first.	born := rules at: 2.	self mSurvive: (Array new: survive size withAll:0).	self mBorn: (Array new: born size withAll:0).	1 to: survive size do:[:i | self mSurvive at:i put: ((survive at:i) asInteger - $0 asInteger)].	1 to: born size do:[:i | self mBorn at:i put: ((born at:i) asInteger - $0 asInteger)].	self mRules: ((rules first) asNumber) @ ((rules at:2) asNumber)</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="ccolors:">ccolors: line	self ccolors: (line first).</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mWrap">mWrap	^mWrap</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="div:">div: line	self mDiv: line.</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mDiv:">mDiv: anObject	mDiv := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mCcolors:">mCcolors: anObject	mCcolors := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mImage">mImage	^mImage</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mGame">mGame	^mGame</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mBoard:">mBoard: anObject	mBoard := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mBorn:">mBorn: anObject	mBorn := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="writeToCuda:">writeToCuda: cudaInterface	"Ecris les informations dans la librairie"	| pData nodes ptr N rules_a rules_b |	N := self mBoard x * self mBoard y.	nodes := cudaInterface nodeState gcMalloc: N.	pData := cudaInterface pdata gcMalloc.	pData memberAt: #N put: N.	pData memberAt: #boardX put: self mBoard x.	pData memberAt: #boardY put: self mBoard y.	pData memberAt: #rulesAlive put: self mSurvive size.	pData memberAt: #rulesBorn put: self mBorn size.	rules_a := CIntegerType int gcMalloc: self mSurvive size.	rules_b := CIntegerType int gcMalloc: self mBorn size.	ptr := rules_a copy.	1 to: self mSurvive size		do: 			[:ind |			ptr contents: (self mSurvive at: ind).			ptr += 1].	ptr := rules_b copy.	1 to: self mBorn size		do: 			[:ind |			ptr contents: (self mBorn at: ind).			ptr += 1].	ptr := nodes copy.	1 to: self mBoard y		do: 			[:indi |			1 to: self mBoard x				do: 					[:indj |					ptr memberAt: #current put: ((self grid at: indi) at: indj).					ptr += 1]].	cudaInterface		readFromSt80: nodes		with: pData		with: rules_a		with: rules_b</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>printing</category><body package="DistributedModeling-CellularAutomata" selector="printOn:">printOn: aStream	aStream nextPutAll:'Type: '.	self mFiletype printOn: aStream.	self mVersion printOn: aStream.	aStream cr.	aStream nextPutAll:'Rules: '.	aStream nextPutAll:'Survive ('.	1 to: mSurvive size do:[:i | (mSurvive at:i) printOn:aStream. aStream nextPutAll:' '].	aStream nextPutAll:') Born ('.	1 to: mBorn size do:[:i | (mBorn at:i) printOn:aStream. aStream nextPutAll:' '].	aStream nextPutAll:')'.	aStream cr.	aStream nextPutAll:'Board: '.	self mBoard printOn: aStream.	aStream cr.	aStream nextPutAll:'Speed: '.	self mSpeed printOn: aStream.	aStream cr.	aStream nextPutAll:'Wrap: '.	self mWrap printOn: aStream.</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="n:">n: line	self mSurvive: (Array new: 2 withAll: 0).	self mBorn: (Array new: 1 withAll: 0).	self mBorn at: 1 put: 3.	self mSurvive at: 1 put: 2.	self mSurvive at: 2 put: 3.	self mRules: 23 @ 3</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="writeFile:">writeFile: filename	"Ecris au format binaire les informations dans un fichier"	| ws |	ws := filename asFilename writeStream binary.	ws nextPutAll: (self asBinaryFormat: mBoard x).	ws nextPutAll: (self asBinaryFormat: mBoard y).	ws nextPutAll: (self asBinaryFormat: mSurvive size).	ws nextPutAll: (self asBinaryFormat: mBorn size).	1 to: mSurvive size do: [:index | ws nextPutAll: (self asBinaryFormat: (mSurvive at: index))].	1 to: mBorn size do: [:index | ws nextPutAll: (self asBinaryFormat: (mBorn at: index))].	1 to: mBoard y do: [:indexi | 1 to: mBoard x do: [:indexj | ws nextPutAll: (self asBinaryFormat: ((grid at: indexi) at: indexj))]].	ws close</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="game:">game: line	| value |	value := String new.	line do: 			[:word |			value isEmpty				ifFalse: [value := value , ' ' , word printString]				ifTrue: [value := word printString]].	self mGame: value.</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mLine:">mLine: anObject	mLine := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>parsing</category><body package="DistributedModeling-CellularAutomata" selector="life:">life: aLine	self mFiletype: 'life'.	self mVersion: (aLine first)</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="genImage">genImage	self genImage: self mScale.</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mColoring">mColoring	^mColoring</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mCcolors">mCcolors	^mCcolors</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mLine">mLine	^mLine</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>private</category><body package="DistributedModeling-CellularAutomata" selector="asBinaryFormat:">asBinaryFormat: nb	"Utilisé pour le transfert via fichier, permet de convertire les informations au format binaire"	| intSize ba tmpba index |	intSize := 4.	ba := ByteArray new: intSize.	tmpba := nb asByteArray.	index := 1.	intSize - tmpba size timesRepeat: 			[ba at: index put: 0.			index := index + 1].	tmpba do: 			[:byte |			ba at: index put: byte.			index := index + 1].	^ba reverse</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mFiletype:">mFiletype: anObject	mFiletype := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="curBlock">curBlock	^curBlock</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="curBlock:">curBlock: anObject	curBlock := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mVersion:">mVersion: anObject	mVersion := anObject</body></methods><methods><class-id>AlgoDis.Mcell</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="mScale">mScale	^mScale</body></methods><methods><class-id>MCellController</class-id> <category>default</category><body package="DistributedModeling-CellularAutomata" selector="defaultControllerClass">defaultControllerClass	^self</body></methods><methods><class-id>MCellController</class-id> <category>initialize-release</category><body package="DistributedModeling-CellularAutomata" selector="release">release	"Upon release, change the cursor shape back to normal."	super release.	Cursor normal show.</body></methods><methods><class-id>AlgoDis.LifeBlock</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="data:">data: anObject	data := anObject</body></methods><methods><class-id>AlgoDis.LifeBlock</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="start:">start: anObject	start := anObject</body></methods><methods><class-id>AlgoDis.LifeBlock</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="data">data	^data</body></methods><methods><class-id>AlgoDis.LifeBlock</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="taille">taille	^taille</body></methods><methods><class-id>AlgoDis.LifeBlock</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="start">start	^start</body></methods><methods><class-id>AlgoDis.LifeBlock</class-id> <category>initialize-release</category><body package="DistributedModeling-CellularAutomata" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	start := nil.	data := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.LifeBlock</class-id> <category>actions</category><body package="DistributedModeling-CellularAutomata" selector="process:">process: aLine	"Recupère une ligne et la parse pour recuperer les valeurs. Data représente une collection de ligne. Chaque ligne étant une collection de 0 | 1."	| stream chr line |	stream := aLine readStream.	data isNil ifTrue: [data := OrderedCollection new].	line := OrderedCollection new.	chr := stream next.	[chr isNil] whileFalse: 			[chr = $. ifTrue: [line add: 0] ifFalse: [line add: 1].			chr := stream next].	taille isNil		ifTrue: [taille := line size @ 1]		ifFalse: 			[line size &gt; taille x ifTrue: [taille x: line size].			taille y: taille y + 1].	data add: line</body></methods><methods><class-id>AlgoDis.LifeBlock</class-id> <category>accessing</category><body package="DistributedModeling-CellularAutomata" selector="taille:">taille: anObject	taille := anObject</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="chanOutMap">chanOutMap	^chanOutMap</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="chanInMap">chanInMap	^chanInMap</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="range:">range: anObject	range := anObject</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="chanOutMap:">chanOutMap: anObject	chanOutMap := anObject</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="pos">pos	^pos</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="index">index	^index</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>initialize-release</category><body package="DistributedModeling-Cuda" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	index := nil.	initProcedure := nil.	stepProcedure := nil.	pos := 0@0.	range := 0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="processName:">processName: anObject	processName := anObject</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="processName">processName	^processName</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="stepProcedure:">stepProcedure: anObject	stepProcedure := anObject</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="pos:">pos: anObject	pos := anObject</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="index:">index: anObject	index := anObject</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="initProcedure:">initProcedure: anObject	initProcedure := anObject</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="range">range	^range</body></methods><methods><class-id>AlgoDis.CudaProcessModel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="chanInMap:">chanInMap: anObject	chanInMap := anObject</body></methods><methods><class-id>UIExecManager</class-id> <category>changes</category><body package="DistributedModeling-Cuda" selector="updateFrom:">updateFrom: nodeStateArray	| nodeState labels values ti list oc newList |	nodeState := nodeStateArray .	labels := nodeState labels.	values := labels collect: 					[:selector |					| value |					value := nodeState perform: selector asSymbol.					value printString].	ti := self tableInterface.	list := ti selectionInTable table.	oc := OrderedCollection withAll: list.	oc addAll: values.	newList := TwoDList on: oc rows: list rowSize + 1.	ti rowLabelsArray: (1 to: list rowSize + 1) asArray.	ti table: newList</body></methods><methods><class-id>UIExecManager</class-id> <category>initialize-release</category><body package="DistributedModeling-Cuda" selector="initialize">initialize	| list labels longerLabel |	super initialize.	nodeStateModel := NodeState new asValue.	labels := nodeStateModel value labels.	longerLabel := SortedCollection sortBlock: [:s1 :s2 | s2 size &gt; s1 size].	longerLabel addAll: labels.	list := TwoDList				on: labels copy				columns: labels size				rows: 1.	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new selectionInTable: sightingsTable.	tableInterface		columnWidths: (longerLabel collect: [:ll | longerLabel first size * 30]).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	labels := nodeStateModel value labels.	tableInterface		columnLabelsArray: labels;		rowLabelsArray: #(1);		rowLabelsWidth: 40.	tableInterface		elementFormats: #(#left #right #right #right);		columnLabelsFormats: #(#left #right #right #right);		rowLabelsFormat: #right</body></methods><methods><class-id>UIExecManager</class-id> <category>changes</category><body package="DistributedModeling-Cuda" selector="changedCell">changedCell	| contents ti list oc newList |	contents := self cellContents value.	ti := self tableInterface.	list := ti selectionInTable table.	oc := OrderedCollection withAll: list.	oc addAll: (Array new: list columnSize withAll: contents).	newList := TwoDList on: oc rows: list rowSize + 1.	ti rowLabelsArray: (1 to: list rowSize + 1) asArray.	ti table: newList</body></methods><methods><class-id>UIExecManager</class-id> <category>aspects</category><body package="DistributedModeling-Cuda" selector="tableInterface">tableInterface	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^tableInterface isNil		ifTrue:			[tableInterface := TableInterface new selectionInTable: SelectionInTable new]		ifFalse:			[tableInterface]</body></methods><methods><class-id>UIExecManager</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="sensorId:">sensorId: anObject	sensorId := anObject</body></methods><methods><class-id>UIExecManager</class-id> <category>aspects</category><body package="DistributedModeling-Cuda" selector="cellContents">cellContents	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^cellContents isNil		ifTrue:			[cellContents := String new asValue]		ifFalse:			[cellContents]</body></methods><methods><class-id>UIExecManager</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="sensorId">sensorId	^sensorId</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="distToPoint">distToPoint	^distToPoint</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="longNguyen:">longNguyen: anObject	longNguyen := anObject</body></methods><methods><class-id>NodeState</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="labels">labels	^self class instVarNames</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="pos:">pos: anObject	pos := anObject</body></methods><methods><class-id>NodeState</class-id> <category>initialize-release</category><body package="DistributedModeling-Cuda" selector="setUpFrom:">setUpFrom: ptr	| ptr2 array |	self enabled: (ptr memberAt: #enabled).	self initial: (ptr memberAt: #initial).	self current: (ptr memberAt: #current).	self leader: (ptr memberAt: #leader).	self startLead: (ptr memberAt: #startLead).	self netNodes: (ptr memberAt: #netNodes).	self diameter: (ptr memberAt: #diameter).	ptr2 := (ptr memberAt: #pos) copy.	array := Array new: 2.	1 to: 2		do: 			[:i |			array at: i put: ptr2 contents.			ptr2 := ptr2 + 1].	self pos: (array at: 1) @ (array at: 2).	self range: (ptr memberAt: #range).	ptr2 := (ptr memberAt: #zone) copy.	"Bounding box is here "	array := Array new: 4.	1 to: 4		do: 			[:i |			array at: i put: ptr2 contents.			ptr2 := ptr2 + 1].	"zone is the bounding box"	"self halt."	self zone: (Rectangle origin: (array at: 1) @ (array at: 2) corner: (array at: 3) @ (array at: 4)).	self closer: (ptr memberAt: #closer).	self distToPoint: (ptr memberAt: #distToPoint)</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="startLead:">startLead: anObject	startLead := anObject</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="distToPoint:">distToPoint: anObject	distToPoint := anObject</body></methods><methods><class-id>NodeState</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="assert">assert	longNguyen := self diameter ~= 0</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="current">current	^current</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="closer:">closer: anObject	closer := anObject</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="longNguyen">longNguyen	^longNguyen</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="netNodes:">netNodes: anObject	netNodes := anObject</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="leader:">leader: anObject	leader := anObject</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="current:">current: anObject	current := anObject</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="enabled">enabled	^enabled</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="range:">range: anObject	range := anObject</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="leader">leader	^leader</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="closer">closer	^closer</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="diameter">diameter	^diameter</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="pos">pos	^pos</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="diameter:">diameter: anObject	diameter := anObject</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="zone">zone	^zone</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="enabled:">enabled: anObject	enabled := anObject</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="initial">initial	^initial</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="zone:">zone: anObject	zone := anObject</body></methods><methods><class-id>NodeState</class-id> <category>initialize-release</category><body package="DistributedModeling-Cuda" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	initial := nil.	current := nil.	leader := nil.	diameter := nil.	zone := nil.	closer := nil.	distToPoint := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="netNodes">netNodes	^netNodes</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="startLead">startLead	^startLead</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="initial:">initial: anObject	initial := anObject</body></methods><methods><class-id>NodeState</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="updateNode:">updateNode: ptr	| ptr2 |	ptr memberAt: #enabled put: self enabled.	ptr memberAt: #initial put: self initial.	ptr memberAt: #current put: self current.	ptr memberAt: #leader put: self leader.	ptr memberAt: #startLead put: self startLead.	ptr memberAt: #netNodes put: self netNodes.	ptr memberAt: #diameter put: self diameter.	ptr2 := (ptr memberAt: #pos) copy.	ptr2 contents: self pos x.	ptr2 := ptr2 + 1.	ptr2 contents: self pos y.	ptr memberAt: #range put: self range.	ptr2 := (ptr memberAt: #zone) copy.	Array new: 4.	ptr2 contents: self zone origin x.	ptr2 := ptr2 + 1.	ptr2 contents: self zone origin y.	ptr2 := ptr2 + 1.	ptr2 contents: self zone corner x.	ptr2 := ptr2 + 1.	ptr2 contents: self zone corner y.	ptr2 := ptr2 + 1.	ptr memberAt: #closer put: self closer.	ptr memberAt: #distToPoint put: self distToPoint</body></methods><methods><class-id>NodeState</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="range">range	^range</body></methods><methods><class-id>Mapped</class-id> <category>initialize-release</category><body package="DistributedModeling-Cuda" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Mapped</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="canal">canal	^canal</body></methods><methods><class-id>Mapped</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="node:">node: anObject	node := anObject</body></methods><methods><class-id>Mapped</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="canal:">canal: anObject	canal := anObject</body></methods><methods><class-id>Mapped</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="node">node	^node</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="writeDyn:">writeDyn: anObject	writeDyn := anObject</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="writeDyn">writeDyn	^writeDyn</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="nbIn">nbIn	^nbIn</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="nbDyn:">nbDyn: anObject	nbDyn := anObject</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="nbOut">nbOut	^nbOut</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="readDyn:">readDyn: anObject	readDyn := anObject</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="nbOut:">nbOut: anObject	nbOut := anObject</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="write:">write: anObject	write := anObject</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="read:">read: anObject	read := anObject</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="write">write	^write</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="readDyn">readDyn	^readDyn</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="nbDyn">nbDyn	^nbDyn</body></methods><methods><class-id>Channel</class-id> <category>initialize-release</category><body package="DistributedModeling-Cuda" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	nbOut := nil.	nbIn := nil.	nbDyn := nil.	write := nil.	read := nil.	writeDyn := nil.	readDyn := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="read">read	^read</body></methods><methods><class-id>Channel</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="nbIn:">nbIn: anObject	nbIn := anObject</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doStartDiameterFromMinusOne">doStartDiameterFromMinusOne	"This stub method was generated by UIDefiner"	cu startDiameterFrom: -1.	self updateTable</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doStartLeaderFromMinusOne">doStartLeaderFromMinusOne	"This stub method was generated by UIDefiner"	cu startLeaderFrom: -1.	self updateTable</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doGetMobilePos">doGetMobilePos	"This stub method was generated by UIDefiner"		nodes := cu getNodes.	mobile := nodes at: cu getSensorsNb + 1.	mobilePosition value: mobile pos</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doGetSensorsNb">doGetSensorsNb	"This stub method was generated by UIDefiner"	getSensorsNbField value: cu getSensorsNb.</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doStop">doStop	"This stub method was generated by UIDefiner"	cu stop.	self updateTable</body></methods><methods><class-id>CudaDebugger</class-id> <category>aspects</category><body package="DistributedModeling-Cuda" selector="getN">getN	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^getN isNil		ifTrue:			[getN := 0 asValue]		ifFalse:			[getN]</body></methods><methods><class-id>CudaDebugger</class-id> <category>aspects</category><body package="DistributedModeling-Cuda" selector="tableInterface">tableInterface	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^tableInterface isNil		ifTrue:			[tableInterface := TableInterface new selectionInTable: SelectionInTable new]		ifFalse:			[tableInterface]</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doStartZoneFrom">doStartZoneFrom	"This stub method was generated by UIDefiner"	cu startZoneFrom: doStartZoneFromField value</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doGetN">doGetN	"This stub method was generated by UIDefiner"	getN value: cu getN.	self updateTable</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="testAdd">testAdd	"This stub method was generated by UIDefiner"	| list |	list := TwoDList			on: #('NodeId' 'enabled' 'initial' 'current' '5' '6' '7' '8' ) copy			columns: 4			rows: 2.	sightingsTable table: list.	^self</body></methods><methods><class-id>CudaDebugger</class-id> <category>aspects</category><body package="DistributedModeling-Cuda" selector="doStepLeaderField">doStepLeaderField	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doStepLeaderField isNil		ifTrue:			[doStepLeaderField := 0 asValue]		ifFalse:			[doStepLeaderField]</body></methods><methods><class-id>CudaDebugger</class-id> <category>aspects</category><body package="DistributedModeling-Cuda" selector="getSensorsNbField">getSensorsNbField	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^getSensorsNbField isNil		ifTrue:			[getSensorsNbField := 0 asValue]		ifFalse:			[getSensorsNbField]</body></methods><methods><class-id>CudaDebugger</class-id> <category>aspects</category><body package="DistributedModeling-Cuda" selector="doStartZoneFromField">doStartZoneFromField	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doStartZoneFromField isNil		ifTrue:			[doStartZoneFromField := 0 asValue]		ifFalse:			[doStartZoneFromField]</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doUpdateMobilePos">doUpdateMobilePos	"This stub method was generated by UIDefiner"	| pos |	pos := mobilePosition value.	mobile pos: pos.	mobile range: 200.	nodes at: cu getSensorsNb + 1 put: mobile.	cu updateNodes: nodes.	self updateTable</body></methods><methods><class-id>CudaDebugger</class-id> <category>aspects</category><body package="DistributedModeling-Cuda" selector="getDiameterField">getDiameterField	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^getDiameterField isNil		ifTrue:			[getDiameterField := 0 asValue]		ifFalse:			[getDiameterField]</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doStepLeader">doStepLeader	"This stub method was generated by UIDefiner"	cu doStep: self doStepLeaderField value.	self updateTable</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doUnloadLibrary">doUnloadLibrary	"This stub method was generated by UIDefiner"	CudaInterface unloadLibraries</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doStart">doStart	"This stub method was generated by UIDefiner"	cu start.	nodes := cu getNodes.	self updateTable</body></methods><methods><class-id>CudaDebugger</class-id> <category>initialize-release</category><body package="DistributedModeling-Cuda" selector="initialize">initialize		| list |		super initialize.		"Create a collection of sightings data."		cu := CudaInterface new.		list := TwoDList			on: #('NodeId' 'enabled' 'initial' 'current' '1' '2' '3' '4' ) copy			columns: 4			rows: 2.		sightingsTable := SelectionInTable with: list.		"Create a table interface and load it with the sightings."		tableInterface := TableInterface new			selectionInTable: sightingsTable.</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doStep">doStep	"This stub method was generated by UIDefiner"	cu doStep: self doStepField value.	self updateTable</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doStepDiameter">doStepDiameter	"This stub method was generated by UIDefiner"	cu doStep: self doStepDiameterField value.	self updateTable</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="doGetDiameter">doGetDiameter	"This stub method was generated by UIDefiner"	self getDiameterField value: cu getDiameter.	self updateTable</body></methods><methods><class-id>CudaDebugger</class-id> <category>aspects</category><body package="DistributedModeling-Cuda" selector="doStepDiameterField">doStepDiameterField	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doStepDiameterField isNil		ifTrue:			[doStepDiameterField := 0 asValue]		ifFalse:			[doStepDiameterField]</body></methods><methods><class-id>CudaDebugger</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="updateTable">updateTable	| nodes oc i list instNames |	nodes := cu getNodes.	instNames := NodeState instVarNames.	oc := OrderedCollection new.	oc		add: 'NodeId';		addAll: instNames.	"add: 'enabled';		add: 'initial';		add: 'current'."	i := 1.	nodes do: 			[:each |			| instValue |			oc add: i printString.			instValue := instNames collect: [:name | (each instVarNamed: name) printString].			oc addAll: instValue.			"add: each enabled;				add: each initial;				add: each current."			i := i + 1].	list := TwoDList				on: oc copy				columns: instNames size + 1				rows: i.	sightingsTable table: list</body></methods><methods><class-id>CudaDebugger</class-id> <category>aspects</category><body package="DistributedModeling-Cuda" selector="doStepField">doStepField	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doStepField isNil		ifTrue:			[doStepField := 0 asValue]		ifFalse:			[doStepField]</body></methods><methods><class-id>CudaDebugger</class-id> <category>aspects</category><body package="DistributedModeling-Cuda" selector="mobilePosition">mobilePosition	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^mobilePosition isNil		ifTrue:			[mobilePosition := nil asValue]		ifFalse:			[mobilePosition]</body></methods><methods><class-id>CudaInterface</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="nbNodes:">nbNodes: anObject	nbNodes := anObject</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="allChannels:">allChannels: nbChannels	| c chan allChan |	c := self canaux gcMalloc: nbChannels.	1 to: nbChannels		do: 			[:each |			self				realGc: c + (each - 1)				fanOut: self MAX_FANOUT				dynamic: self DYNAMIC_CHAN].	self getAllChannels: c.	self halt.	allChan := OrderedCollection new.	1 to: nbChannels		do: 			[:n |			chan := Channel						fromMemory: c + (n - 1)						fanOut: self MAX_FANOUT						dynamic: self DYNAMIC_CHAN.			allChan add: chan].	^allChan</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="disconnect:to:">disconnect: idm to: idf	| nodeNumber |	self isInit ifFalse:[^self].	nodeNumber := self getSensorsNb.	self disconnectTo: nodeNumber+idm with: idf.</body></methods><methods><class-id>CudaInterface</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="nbNodes">nbNodes	^nbNodes</body></methods><methods><class-id>CudaInterface</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="nbSensors:">nbSensors: anObject	nbSensors := anObject</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="realGc:fanOut:dynamic:">realGc: channelPtr fanOut: fan dynamic: dyn	channelPtr memberAt: #write put: (self mapped gcMalloc: fan).	channelPtr memberAt: #read put: (self mapped gcMalloc: fan).	channelPtr memberAt: #writeDyn put: (self mapped gcMalloc: dyn).	channelPtr memberAt: #readDyn put: (self mapped gcMalloc: dyn)</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="startAskInfoFrom:">startAskInfoFrom: id	self isInit ifFalse:[^self].	self startFunction: id with: self MSG_ASK_INFO</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="startLeaderFrom:">startLeaderFrom: id	self isInit ifFalse:[^self].	self startFunction: id with: self MSG_LEADER</body></methods><methods><class-id>CudaInterface</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="isInit:">isInit: anObject	isInit := anObject</body></methods><methods><class-id>CudaInterface</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="curLoop">curLoop	^curLoop</body></methods><methods><class-id>CudaInterface</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="isInit">isInit	isInit isNil ifTrue:[^false].	^isInit</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="updateNodes:">updateNodes: OC	| N nodes ptr tmp |	self isInit ifFalse: [^self].	N := self getN.	nodes := self mNodeState gcMalloc: N.	ptr := nodes copy.	"self halt."	1 to: N		do: 			[:i |			tmp := OC at: i.			tmp updateNode: ptr.			ptr += 1].	self setNodes: nodes.</body></methods><methods><class-id>CudaInterface</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="diameterMax:">diameterMax: anObject	diameterMax := anObject</body></methods><methods><class-id>CudaInterface</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="nbSensors">nbSensors	^nbSensors</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="updateNode:id:">updateNode: ns id: id	| node |	self isInit ifFalse: [^self].	node := self mNodeState gcMalloc.	ns updateNode: node.	self setNode: node with: id.</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="getNode:">getNode: mid	| res node |	self isInit ifFalse: [^nil].	node := self mNodeState gcMalloc.	self getNode: node with: mid.	res := NodeState new.	res setUpFrom: node.	^res</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="connect:to:">connect: idm to: idf	| nodeNumber |	self isInit ifFalse:[^self].	nodeNumber := self getSensorsNb.	self connectTo: nodeNumber+idm with: idf.</body></methods><methods><class-id>CudaInterface</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="diameterMax">diameterMax	^diameterMax</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="oneChannel:">oneChannel: idChan	| c chan |	c := self canaux gcMalloc.	self		realGc: c		fanOut: self MAX_FANOUT		dynamic: self DYNAMIC_CHAN.	self halt.	self getOneChannel: c whichOne: idChan.	self halt.	chan := Channel				fromMemory: c				fanOut: self MAX_FANOUT				dynamic: self DYNAMIC_CHAN.	^chan</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="getNodes">getNodes	| res N nodes ptr tmp |	res := OrderedCollection new.	self isInit ifFalse: [^res].	N := self getN.	nodes := self mNodeState gcMalloc: N.	self getNodes: nodes.	ptr := nodes copy.	1 to: N		do: 			[:i |			tmp := NodeState new.			res add: (tmp setUpFrom: ptr).			ptr += 1].	^res</body></methods><methods><class-id>CudaInterface</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="curLoop:">curLoop: anObject	curLoop := anObject</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="startDiameterFrom:">startDiameterFrom: id	self isInit ifFalse:[^self].	self startFunction: id with: self MSG_DIAMETER</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="stop">stop	self isInit ifFalse:[^self].	self cleanUp.	CudaInterface unloadLibraries.	self isInit: false</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="startZoneFrom:">startZoneFrom: id	self isInit ifFalse:[^self].	self startFunction: id with: self MSG_ZONE</body></methods><methods><class-id>CudaInterface</class-id> <category>actions</category><body package="DistributedModeling-Cuda" selector="start">start	self isInit ifTrue: [^self].	CudaInterface unloadLibraries.	self isInit: true.	self init.	self nbNodes: self getN.	self nbSensors: self getSensorsNb</body></methods><methods><class-id>AlgoDis.MobilePath</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="steps">steps	^steps</body></methods><methods><class-id>AlgoDis.MobilePath</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="draw:sensors:">draw: comp sensors: s	"Draws the this mobile path on comp. This includes the drawing of all its straights ways, thus all mobiles at its beginnings."	self straightWays do: [ :sw |		sw draw: comp points: s.	].</body></methods><methods><class-id>AlgoDis.MobilePath</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="events:">events: sensors	"Gives a sorted collection of all events happening with this path and sensors given as arguments, events are ordered in ascending time of occurence"	(events = nil) ifTrue: [		events := OrderedCollection new.		"self halt."		self straightWays do: [ :sw |			events addAll: (sw events: sensors).		].		events := SortedCollection withAll: events sortBlock: [ :a :b | a eventTime &lt; b eventTime ].	].	^events.</body></methods><methods><class-id>AlgoDis.MobilePath</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobile:">mobile: anObject	mobile := anObject.	self steps isEmpty		ifTrue: ["self error: 'No mobile path defined'"^nil].	self mobile trajectory position: (self steps at: 1)</body></methods><methods><class-id>AlgoDis.MobilePath</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="duration">duration	"Provides the total duration of this path for the mobile, this allows the performance comparison between exploration strategies"	| total |	total := 0.		self straightWays do: [ :sw |		total := total + sw duration	].	^total.</body></methods><methods><class-id>AlgoDis.MobilePath</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="straightWays">straightWays	"Returns a sequence ot StraightWays matching the sequence of points given when this mobile path was instanciated."	| sws m startTime |	sws := OrderedCollection new.	2 to: ((self steps size)) do: [ :i |		"t := Trajectory position: (self mobile trajectory position copy) movement: (self mobile trajectory movement copy).		m := Mobile trajectory: t range: (self mobile range copy)."		m := self mobile copy.		m trajectory position: (self steps at: i - 1).		(sws isEmpty) ifTrue: [			startTime := 0.		] ifFalse: [			startTime := sws last startTime + sws last duration.		].		sws add: (StraightWay mobile: (m) endPoint: (self steps at: i) startTime: startTime).	].	^sws.</body></methods><methods><class-id>AlgoDis.MobilePath</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="steps:">steps: anObject	steps := anObject.	events :=  nil.</body></methods><methods><class-id>AlgoDis.MobilePath</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	steps := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.MobilePath</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobile">mobile	^mobile</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="color:">color: anObject	color := anObject</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="color">color	^ color.</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="draw:">draw: comp"Draws a representation of the mobile on comp where comp in a instance of CompositePart. This representation includesthe mobile's location, its orientation and its speed thanks to an arrow."	self trajectory draw: comp.</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>copying</category><body package="DistributedModeling-Mobile" selector="shallowCopy">shallowCopy	| newMob |	newMob := Mobile new.	newMob trajectory: (self trajectory copy).	newMob color: (self color copy).	newMob range: (self range).	^newMob.</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>calculating</category><body package="DistributedModeling-Mobile" selector="distance:">distance: s"Returns the distance between the mobile self and the sensor s. This calculation can be achieved with thecode self trajectory position dist: s but a calculation based on trigonometry can provide more informationthank to the sign of the calculated value."	| d dy |	"d := self trajectory position dist: s."	"This calculation may return a negative distance, which provides more informations"	self trajectory position x  - s x.	dy := self trajectory position y - s y.	d := (dy / ((s - self trajectory position) theta) sin).	(d &lt; 0) ifTrue: [		(Point x: self y: s) inspect.	].	^d</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="trajectory:">trajectory: anObject	trajectory := anObject.	self trajectory color: self color.</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="trajectory">trajectory	^trajectory</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="range:">range: anObject	range := anObject</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>calculating</category><body package="DistributedModeling-Mobile" selector="distanceToProjectedPoint:">distanceToProjectedPoint: s	^Mobile distanceToProjectedPoint: self sensor: s</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>manipulating</category><body package="DistributedModeling-Mobile" selector="move:">move: time"Make the robot to move in its trajectory for t time units."| d |"Adds the trajectory into mobile's trail."d := Dictionary new.d at: #time put: time.d at: #trajectory put: self trajectory.self trail add: d."Moves the mobile by itself."self trajectory position: (self trajectory position + (self trajectory movement * time)).</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>calculating</category><body package="DistributedModeling-Mobile" selector="leftTrajectory">leftTrajectory	"Returns a trajectory parallel to the mobile's trajectory, but shift on its left, as far as its range."	| pi angle t p |	pi := Double pi.	angle := (self trajectory movement theta) + (pi / 2).	t := self trajectory copy.	p := Point x: angle cos * self range y: angle sin * self range.	t position: (t position + p).	^t.</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>calculating</category><body package="DistributedModeling-Mobile" selector="rightTrajectory">rightTrajectory	"Returns a trajectory parallel to the mobile's trajectory, but shift on its right, as far as its range."	| pi angle t p |	pi := Double pi.	angle := (self trajectory movement theta) + (3 * pi / 2).	t := self trajectory copy.	p := Point x: angle cos * self range y: angle sin * self range.	t position: (t position + p).	^t.</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>calculating</category><body package="DistributedModeling-Mobile" selector="halfLengthInRangeCircle:">halfLengthInRangeCircle: s	^Mobile halfLengthInRangeCircle: self sensor: s.</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>printing</category><body package="DistributedModeling-Mobile" selector="printString">printString	^self trajectory printString , ' with range ' , self range printString.</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>calculating</category><body package="DistributedModeling-Mobile" selector="canMeet:">canMeet: s	^Mobile canMeet: self sensor: s.</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	self color: #lightGray "(ColorValue constantNames at: 14)".	self color: ( #blue ).	^self</body></methods><methods><class-id>AlgoDis.Mobile</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="range">range	^range</body></methods><methods><class-id>AlgoDis.Trajectory</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="position">position	^position</body></methods><methods><class-id>AlgoDis.Trajectory</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="color:">color: anObject	color := anObject</body></methods><methods><class-id>AlgoDis.Trajectory</class-id> <category>transforming</category><body package="DistributedModeling-Mobile" selector="rotate:">rotate: angle	"makes a rotation of angle radians."	| thetaP r |	thetaP := self movement theta + angle.	r := self movement r.	self movement: (Point x: (r * (thetaP cos)) y: (r * (thetaP sin))).</body></methods><methods><class-id>AlgoDis.Trajectory</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="distance:">distance: p	 ^Trajectory distance: self point: p.</body></methods><methods><class-id>AlgoDis.Trajectory</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="movement:">movement: anObject	movement := anObject</body></methods><methods><class-id>AlgoDis.Trajectory</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="position:">position: anObject	position := anObject</body></methods><methods><class-id>AlgoDis.Trajectory</class-id> <category>printing</category><body package="DistributedModeling-Mobile" selector="printString">printString^ 'From ' , self position printString , ' toward ' , self movement printString.</body></methods><methods><class-id>AlgoDis.Trajectory</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="color">color	^color.</body></methods><methods><class-id>AlgoDis.Trajectory</class-id> <category>displaying</category><body package="DistributedModeling-Mobile" selector="draw:">draw: comp	| paint origin end |	paint := ColorValue perform: self color.	origin := self position.	end := (self position + self movement).	"comp add: ((GraphicsAttributesWrapper on: (Arrow start: origin end: end) asStroker) attributes: (GraphicsAttributes new paint: paint))."</body></methods><methods><class-id>AlgoDis.Trajectory</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="movement">movement	^movement</body></methods><methods><class-id>AlgoDis.Trajectory</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	position := nil.	movement := nil.	self color: (ColorValue constantNames at: 13).	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>private</category><body package="DistributedModeling-Mobile" selector="length">length	^self duration * self mobile trajectory movement r.</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>private</category><body package="DistributedModeling-Mobile" selector="duration:">duration: d	duration := d.</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>private</category><body package="DistributedModeling-Mobile" selector="draw:points:">draw: comp points: p	| line paint eventsList |	line := LineSegment from: self mobile trajectory position to: self endPoint.	paint := ColorValue perform: self color.	comp add: ((GraphicsAttributesWrapper on: line asStroker) attributes: (GraphicsAttributes new paint: paint)).	eventsList := (self events: p).	eventsList do: [ :e | e draw: comp ].	self mobile draw: comp.</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>private</category><body package="DistributedModeling-Mobile" selector="length:">length: l	self duration: (l / (self mobile trajectory movement r)).</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>private</category><body package="DistributedModeling-Mobile" selector="endPoint">endPoint	^mobile trajectory position + (mobile trajectory movement * self duration).</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	mobile := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="startTime:">startTime: anObject	startTime := anObject</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobile">mobile	^mobile</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>private</category><body package="DistributedModeling-Mobile" selector="duration">duration	^duration</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>private</category><body package="DistributedModeling-Mobile" selector="color">color	^(ColorValue constantNames at: 8).</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobile:">mobile: anObject	mobile := anObject</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="startTime">startTime	^startTime</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>private</category><body package="DistributedModeling-Mobile" selector="events:">events: points	| events |	events := OrderedCollection new.	points do: [ :s |		events add: (AlgoDis.LinkCreation mobile: self mobile sensor: s timeReference: self startTime).		events add: (AlgoDis.LinkDestruction mobile: self mobile sensor: s timeReference: self startTime).	].	events := events select: [ :e | (e = nil) ifTrue: [ false ] ifFalse: [		(((e eventTime - e timeReference) &lt;= self duration) &amp; (e eventTime &gt; e timeReference))	]. ].	events := SortedCollection withAll: events sortBlock: [ :a :b | a eventTime &lt; b eventTime ].	^events.</body></methods><methods><class-id>AlgoDis.StraightWay</class-id> <category>private</category><body package="DistributedModeling-Mobile" selector="endPoint:">endPoint: p	| currentTheta wishedTheta dTheta |	currentTheta := self mobile trajectory movement theta.	wishedTheta := (p - self mobile trajectory position) theta.	dTheta := (wishedTheta - currentTheta).	self mobile trajectory rotate: dTheta.	self duration: ((self mobile trajectory position dist: p) / (self mobile trajectory movement r)).	currentTheta radiansToDegrees.	wishedTheta radiansToDegrees.	self endPoint.</body></methods><methods><class-id>AlgoDis.Arrow</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>GPredictTraceReader</class-id> <category>actions</category><body package="MobileTrackInterface" selector="doClose">doClose	self closeRequest</body></methods><methods><class-id>GPredictTraceReader</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="pathLonLat">pathLonLat	^pathLonLat</body></methods><methods><class-id>GPredictTraceReader</class-id> <category>actions</category><body package="MobileTrackInterface" selector="doReadFile">doReadFile	| filename rs |	filename := self file value asFilename.	rs := filename readStream.	[rs atEnd] whileFalse: 			[| line |			line := rs upTo: Character cr.			self getFieldsFrom: line.			self addPoint].	rs close</body></methods><methods><class-id>GPredictTraceReader</class-id> <category>aspects</category><body package="MobileTrackInterface" selector="file">file	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^file isNil		ifTrue:			[file := 'satellite/gtrace2.txt' asValue]		ifFalse:			[file]</body></methods><methods><class-id>GPredictTraceReader</class-id> <category>actions</category><body package="MobileTrackInterface" selector="addPoint">addPoint	| lon lat meter |	lon := self fieldDictionary at: #lon.	lat := self fieldDictionary at: #lat.	meter := mercator latLonToMeter: lat lon: lon.	pathLonLat add: meter</body></methods><methods><class-id>GPredictTraceReader</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="fieldDictionary">fieldDictionary	^fieldDictionary</body></methods><methods><class-id>GPredictTraceReader</class-id> <category>initialize-release</category><body package="MobileTrackInterface" selector="initialize">initialize	pathLonLat := OrderedCollection new.	fieldDictionary := Dictionary new.	mercator := GlobalMercator new</body></methods><methods><class-id>GPredictTraceReader</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="pathLonLat:">pathLonLat: anObject	pathLonLat := anObject</body></methods><methods><class-id>GPredictTraceReader</class-id> <category>actions</category><body package="MobileTrackInterface" selector="doOpenFile">doOpenFile	self file value: (Dialog				requestFileNameWithMessage: 'Open GPredict trace file...'				default: 'satellite/*.txt'				version: #mustBeOld				ifFail: [^nil]				for: nil)</body></methods><methods><class-id>GPredictTraceReader</class-id> <category>actions</category><body package="MobileTrackInterface" selector="getFieldsFrom:">getFieldsFrom: line	"  remove commas "	| rs field number ws char |	rs := line readStream.	ws := (String new: line size) writeStream.	[rs atEnd] whileFalse: 			[char := rs next.			char = $, ifTrue: [char := $.].			ws nextPut: char].	" parse the line "	rs := ws contents readStream.	[rs atEnd] whileFalse: 			[field := rs upTo: Character space.			number := rs upTo: Character tab.			self fieldDictionary at: field asSymbol put: number asNumber].</body></methods><methods><class-id>GPredictTraceReader</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="fieldDictionary:">fieldDictionary: anObject	fieldDictionary := anObject</body></methods><methods><class-id>GpredictReader</class-id> <category>aspects</category><body package="MobileTrackInterface" selector="field5">field5	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^field5 isNil		ifTrue:			[field5 := String new asValue]		ifFalse:			[field5]</body></methods><methods><class-id>GpredictReader</class-id> <category>actions</category><body package="MobileTrackInterface" selector="changeFromGpredict">changeFromGpredict	| interface fd v |	interface := self mobileInterface value.	fd := interface fieldDictionary.	v := fd at: #lon.	self field1 value: 'lon=' , v printString.	v := fd at: #lat.	self field2 value: 'lat=' , v printString.	v := fd at: #alt.	self field3 value: 'alt=' , v printString.	v := fd at: #dis.	self field4 value: 'dis=' , v printString.	interface activated		ifFalse: [(self builder componentAt: #ActionButton1) enable]</body></methods><methods><class-id>GpredictReader</class-id> <category>aspects</category><body package="MobileTrackInterface" selector="field3">field3	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^field3 isNil		ifTrue:			[field3 := String new asValue]		ifFalse:			[field3]</body></methods><methods><class-id>GpredictReader</class-id> <category>actions</category><body package="MobileTrackInterface" selector="doStart">doStart	"This stub method was generated by UIDefiner"	| gi |	gi := GpredictInterface new.	self mobileInterface: gi asValue.	gi model: self mobileInterface.	self mobileInterface onChangeSend: #changeFromGpredict to: self.	gi openAndRead.	(self builder componentAt: #ActionButton1) disable</body></methods><methods><class-id>GpredictReader</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="mobileInterface:">mobileInterface: anObject	mobileInterface := anObject</body></methods><methods><class-id>GpredictReader</class-id> <category>aspects</category><body package="MobileTrackInterface" selector="field2">field2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^field2 isNil		ifTrue:			[field2 := String new asValue]		ifFalse:			[field2]</body></methods><methods><class-id>GpredictReader</class-id> <category>aspects</category><body package="MobileTrackInterface" selector="field1">field1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^field1 isNil		ifTrue:			[field1 := String new asValue]		ifFalse:			[field1]</body></methods><methods><class-id>GpredictReader</class-id> <category>aspects</category><body package="MobileTrackInterface" selector="field4">field4	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^field4 isNil		ifTrue:			[field4 := String new asValue]		ifFalse:			[field4]</body></methods><methods><class-id>GpredictReader</class-id> <category>actions</category><body package="MobileTrackInterface" selector="doStop">doStop	"This stub method was generated by UIDefiner"	self mobileInterface value activated: false.	^self</body></methods><methods><class-id>GpredictReader</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="mobileInterface">mobileInterface	^mobileInterface</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="zoom">zoom	^zoom</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="model:">model: anObject	model := anObject</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="fieldDictionary">fieldDictionary	^fieldDictionary</body></methods><methods><class-id>GpredictInterface</class-id> <category>opening</category><body package="MobileTrackInterface" selector="getFieldsFrom:">getFieldsFrom: line	"  remove commas "	| rs field number ws char |	rs := line readStream.	ws := (String new: line size) writeStream.	[rs atEnd] whileFalse: 			[char := rs next.			char = $, ifTrue: [char := $.].			ws nextPut: char].	" parse the line "	rs := ws contents readStream.	[rs atEnd] whileFalse: 			[field := rs upTo: Character space.			number := rs upTo: Character tab.			self fieldDictionary at: field asSymbol put: number asNumber].</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="mercator:">mercator: anObject	mercator := anObject</body></methods><methods><class-id>GpredictInterface</class-id> <category>opening</category><body package="MobileTrackInterface" selector="closePipe">closePipe	self activated: false</body></methods><methods><class-id>GpredictInterface</class-id> <category>opening</category><body package="MobileTrackInterface" selector="open">open	self programName isNil ifTrue: [^Dialog warn: 'no program name']</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="mercator">mercator	^mercator</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="activated">activated	^activated</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="fieldDictionary:">fieldDictionary: anObject	fieldDictionary := anObject</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="pixel">pixel	^pixel</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="model">model	^model</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="pixel:">pixel: anObject	pixel := anObject</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="zoom:">zoom: anObject	zoom := anObject</body></methods><methods><class-id>GpredictInterface</class-id> <category>opening</category><body package="MobileTrackInterface" selector="openAndRead">openAndRead	| connection proc cmd line |	self programName isNil ifTrue: [^Dialog warn: 'no program name'].	connection := UnixProcess				pipeConnectionFor: self programName				arguments: #()				setProcessDescriptor: [:pd | proc := pd].	cmd := connection readStream.	self activated: true.		[[[cmd atEnd or: [activated not]] whileFalse: 			[line := cmd upTo: Character cr.			self getFieldsFrom: line.			self convertCoordinates.			self model isNil ifFalse: [self model value: self]			"self transcriptDisplay"			"proc wait"]]			ensure: 				[proc kill.				cmd close].	self activated: false.	self model value: self.] fork.	^nil</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="programName">programName	^programName</body></methods><methods><class-id>GpredictInterface</class-id> <category>opening</category><body package="MobileTrackInterface" selector="transcriptDisplay">transcriptDisplay	self fieldDictionary keysAndValuesDo: 			[:key :value |			Transcript				show: key printString;				tab;				show: value printString;				tab].	Transcript cr</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="meter">meter	^meter</body></methods><methods><class-id>GpredictInterface</class-id> <category>opening</category><body package="MobileTrackInterface" selector="convertCoordinates">convertCoordinates	| lat lon |	lat := fieldDictionary at: #lat.	lon := fieldDictionary at: #lon.	meter := mercator latLonToMeter: lat lon: lon.	"pixel := (mercator meterToPixelNew: meter zoom: zoom) rounded."</body></methods><methods><class-id>GpredictInterface</class-id> <category>initialize-release</category><body package="MobileTrackInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	programName := '/usr/local/bin/gpredict'.	mercator := GlobalMercator new.	fieldDictionary := Dictionary new.	activated := false.	zoom := 0.	meter := 0@0.	pixel := 0@0.</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="activated:">activated: anObject	activated := anObject</body></methods><methods><class-id>GpredictInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="programName:">programName: anObject	programName := anObject</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>api</category><body package="MobileTrackInterface" selector="predictFromJulianDate:">predictFromJulianDate: aDouble	self predict_calc_simple: satellite with: aDouble</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="satellite:">satellite: anObject	satellite := anObject</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>accessing</category><body package="MobileTrackInterface" selector="satellite">satellite	^satellite</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>api</category><body package="MobileTrackInterface" selector="getLat">getLat	^satellite memberAt: #ssplat</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>api</category><body package="MobileTrackInterface" selector="getJulianDate">getJulianDate	^satellite memberAt: #jul_utc</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>api</category><body package="MobileTrackInterface" selector="timestampToJulianDate:">timestampToJulianDate: timestamp	| y m d h min s julianDate |	y := timestamp year.	m := timestamp month.	d := timestamp day.	h := timestamp hour.	min := timestamp minute.	s := timestamp second.	julianDate := self				jdFromYMDHMS: y				with: m				with: d				with: h				with: min				with: s.	^julianDate</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>api</category><body package="MobileTrackInterface" selector="predictFromTimestamp:">predictFromTimestamp: aTimestamp	| julianDate |	julianDate := self timestampToJulianDate: aTimestamp.	self predict_calc_simple: satellite with: julianDate</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>api</category><body package="MobileTrackInterface" selector="getEpoch">getEpoch	| julianDate e |	julianDate := self getJulianDate.	e := self jdToTimestamp: julianDate.	^e</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>api</category><body package="MobileTrackInterface" selector="predictFromEpoch:">predictFromEpoch: aDouble	| julianDate |	julianDate := self jdFromEpoch: aDouble.	self predict_calc_simple: satellite with: julianDate</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>api</category><body package="MobileTrackInterface" selector="getAlt">getAlt	^satellite memberAt: #alt</body></methods><methods><class-id>SgpSdpInterface</class-id> <category>api</category><body package="MobileTrackInterface" selector="getLon">getLon	^satellite memberAt: #ssplon</body></methods><methods><class-id>TimedEvent</class-id> <category>accessing</category><body package="TimeAnalysis" selector="event:">event: anObject	event := anObject</body></methods><methods><class-id>TimedEvent</class-id> <category>accessing</category><body package="TimeAnalysis" selector="event">event	^event</body></methods><methods><class-id>TimedEvent</class-id> <category>printing</category><body package="TimeAnalysis" selector="printOn:">printOn: aStream	aStream nextPut: $(.	self event printOn: aStream.	aStream nextPutAll: ' at: '.	self timestamp printOn: aStream.	aStream nextPut: $)</body></methods><methods><class-id>TimedEvent</class-id> <category>accessing</category><body package="TimeAnalysis" selector="timestamp">timestamp	^timestamp</body></methods><methods><class-id>TimedEvent</class-id> <category>accessing</category><body package="TimeAnalysis" selector="timestamp:">timestamp: anObject	timestamp := anObject</body></methods><methods><class-id>TimedEvent</class-id> <category>initialize-release</category><body package="TimeAnalysis" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	timestamp := nil.	event := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>UITimedEventTable</class-id> <category>accessing</category><body package="TimeAnalysis" selector="timedEventTable:">timedEventTable: anObject	timedEventTable := anObject</body></methods><methods><class-id>UITimedEventTable</class-id> <category>accessing</category><body package="TimeAnalysis" selector="timedEventTable">timedEventTable	^timedEventTable</body></methods><methods><class-id>UITimedEventTable</class-id> <category>accessing</category><body package="TimeAnalysis" selector="theTimeView">theTimeView	^theTimeView</body></methods><methods><class-id>UITimedEventTable</class-id> <category>accessing</category><body package="TimeAnalysis" selector="theTimeView:">theTimeView: anObject	theTimeView := anObject</body></methods><methods><class-id>UITimedEventTable</class-id> <category>initialize-release</category><body package="TimeAnalysis" selector="initialize">initialize	self timedEventTable: nil asValue.	theTimeView := TimeView new.	self timedEventTable value: TimedEventTable testAddRandomSorted.	theTimeView model: self timedEventTable</body></methods><methods><class-id>TimedEventTable</class-id> <category>accessing</category><body package="TimeAnalysis" selector="eventTable:">eventTable: anObject	eventTable := anObject</body></methods><methods><class-id>TimedEventTable</class-id> <category>accessing</category><body package="TimeAnalysis" selector="addEvent:">addEvent: te	self eventTable add: te</body></methods><methods><class-id>TimedEventTable</class-id> <category>initialize-release</category><body package="TimeAnalysis" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	eventTable := OrderedCollection new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>TimedEventTable</class-id> <category>accessing</category><body package="TimeAnalysis" selector="resort">resort	| sort |	sort := SortedCollection				sortBlock: [:ev1 :ev2 | ev1 timestamp &lt; ev2 timestamp].	sort addAll: self eventTable.	self eventTable: sort asOrderedCollection</body></methods><methods><class-id>TimedEventTable</class-id> <category>computing</category><body package="TimeAnalysis" selector="buildSet">buildSet	| tet events set |	self resort.	tet := eventTable.	events := tet collect: [:timedEvent | timedEvent event].	set := events asSet.	^set</body></methods><methods><class-id>TimedEventTable</class-id> <category>accessing</category><body package="TimeAnalysis" selector="eventTable">eventTable	^eventTable</body></methods><methods><class-id>TimeView</class-id> <category>initialize-release</category><body package="TimeAnalysis" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>TimeView</class-id> <category>displaying</category><body package="TimeAnalysis" selector="displayOn:">displayOn: aGC	| eventSet h w ls hInterval hPos index text |	eventSet := self model value buildSet asOrderedCollection.	h := self bounds height.	w := self bounds width.	hInterval := h / eventSet size.	hPos := hInterval.	index := 1.	1 to: eventSet size		do: 			[:event |			ls := LineSegment from: 20 @ hPos to: w @ hPos.			ls asStroker displayOn: aGC.			text := ComposedText withText: (String with: (eventSet at: index)).			text displayOn: aGC at: 1 @ (hPos - 1).			index := index + 1.			hPos := hPos + hInterval]</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>initialize-release</category><body package="DistributedModeling-Processes" selector="replaceLinksByIndexFrom:">replaceLinksByIndexFrom: links	| prevLinks |	links keysAndValuesDo: 			[:index :link |			prevLinks := link source outputLinks.			prevLinks := prevLinks collect: [:oLink | oLink = link ifTrue: [index] ifFalse: [oLink]].			link source outputLinks: prevLinks.			prevLinks := link target inputLinks.			prevLinks := prevLinks collect: [:oLink | oLink = link ifTrue: [index] ifFalse: [oLink]].			link target inputLinks: prevLinks]</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="inLinksTable">inLinksTable	^inLinksTable</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="outLinksTable">outLinksTable	^outLinksTable</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>computing</category><body package="DistributedModeling-Processes" selector="run">run</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>initialize-release</category><body package="DistributedModeling-Processes" selector="setUpFrom:">setUpFrom: netGraph	| npProc ws links index processName procedureName node outLinks block |	npProc := netGraph table size.	self processTable: (Array new: npProc).	ws := WriteStream on: Array new.	netGraph table do: 			[:array |			index := array first.			processName := array at: 2.			procedureName := array at: 3.			node := array last.			outLinks := node outputLinks.			block := SynchronousBehaviour perform: procedureName asSymbol.			self processTable at: index put: block.			ws nextPutAll: outLinks].	links := ws contents.	self linkTable: links.	self replaceLinksByIndexFrom: links.	self inLinksTable: (Array new: npProc).	self outLinksTable: (Array new: npProc).	netGraph table do: 			[:array |			index := array first.			node := array last.			outLinksTable at: index put: node outputLinks.			inLinksTable at: index put: node inputLinks].	self barrierTable: (netGraph table last collect: [:i | SharedQueue new: 1])</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>printing</category><body package="DistributedModeling-Processes" selector="printOn:">printOn: aStream	self processTable keysAndValuesDo: 			[:k :v |			self inLinksTable printOn: aStream.			aStream nextPutAll: '  ---  '.			self outLinksTable printOn: aStream.			aStream cr]</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="processTable:">processTable: anObject	processTable := anObject</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="barrierTable">barrierTable	^barrierTable</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="barrierTable:">barrierTable: anObject	barrierTable := anObject</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="linkTable:">linkTable: anObject	linkTable := anObject</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="outLinksTable:">outLinksTable: anObject	outLinksTable := anObject</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="linkTable">linkTable	^linkTable</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>initialize-release</category><body package="DistributedModeling-Processes" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	" *** Replace this comment with the appropriate initialization code *** "	super initialize.	^self</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="inLinksTable:">inLinksTable: anObject	inLinksTable := anObject</body></methods><methods><class-id>AlgoDis.ProcessGraphBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Processes" selector="processTable">processTable	^processTable</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="maxFanOut1">maxFanOut1	^maxFanOut</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="dynamicChan:">dynamicChan: anObject	dynamicChan := anObject</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>private</category><body package="DistributedModeling-Cuda" selector="makePointSource:target:inTable:">makePointSource: source target: target inTable: tab	"Récupération de numéro de canal pour la lecture"	| entry node x outLinks y |	y := nil.	entry := tab detect: 					[:array |					node := array last.					node = source].	x := entry first.	node := entry last.	outLinks := node outputLinks.	outLinks keysAndValuesDo: [:index :link | link target = target ifTrue: [y := index]].	y isNil ifTrue: [self error: 'bad graph or programming error'].	^x @ y</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="processTable:">processTable: anObject	processTable := anObject</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>printing</category><body package="DistributedModeling-Cuda" selector="printOn:">printOn: aStream	self processTable keysAndValuesDo: 			[:k :v |			v processName printOn: aStream.			aStream				tab;				nextPutAll: '  ---  '.			v chanOutMap printOn: aStream.			aStream				tab;				nextPutAll: '  ---  '.			v chanInMap printOn: aStream.			aStream cr]</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>cuda-production</category><body package="DistributedModeling-Cuda" selector="cudaGenChannelsOn:">cudaGenChannelsOn: ws	| cudaProcessModel processName itsName |	ws		nextPutAll: '/* host activity : init channels */canaux channels_h[] =	'.	ws nextPutAll: '{ // start array'.	1 to: self processTable size		do: 			[:index |			cudaProcessModel := self processTable at: index.			ws nextPut: Character cr.			ws nextPut: Character tab.			ws nextPutAll: '{'.			ws nextPutAll: cudaProcessModel chanOutMap size printString.			ws nextPutAll: ','.			ws nextPutAll: cudaProcessModel chanInMap size printString.			ws nextPutAll: ','.			ws nextPutAll: self dynamicChan printString.			ws nextPutAll: ',{'.			1 to: cudaProcessModel chanOutMap size				do: 					[:i |					ws						nextPutAll: '{' , ((cudaProcessModel chanOutMap at: i) x - 1) printString								, ','.					ws						nextPutAll: ((cudaProcessModel chanOutMap at: i) y - 1) printString , ','.					cudaProcessModel := processTable at: index.					processName := cudaProcessModel processName.					itsName := (processName copyFrom: 2 to: processName size) asNumber - 1.					ws nextPutAll: itsName printString , '}'.					i = cudaProcessModel chanOutMap size ifFalse: [ws nextPutAll: ',']].			ws nextPutAll: '},{'.			1 to: cudaProcessModel chanInMap size				do: 					[:i |					ws						nextPutAll: '{' , ((cudaProcessModel chanInMap at: i) x - 1) printString								, ','.					ws						nextPutAll: ((cudaProcessModel chanInMap at: i) y - 1) printString , ','.					cudaProcessModel := processTable at: index.					processName := cudaProcessModel processName.					itsName := (processName copyFrom: 2 to: processName size) asNumber - 1.					ws nextPutAll: itsName printString , '}'.					i = cudaProcessModel chanInMap size ifFalse: [ws nextPutAll: ',']].			ws nextPutAll: '},{'.			1 to: self dynamicChan				do: 					[:i |					ws						nextPutAll: '{' , (index - 1) printString , ',' , (i - 1) printString , '}'.					i = dynamicChan ifFalse: [ws nextPutAll: ',']].			ws nextPutAll: '},{'.			1 to: self dynamicChan				do: 					[:i |					ws nextPutAll: '{-1,-1}'.					i = dynamicChan ifFalse: [ws nextPutAll: ',']].			ws nextPutAll: '}'.			ws nextPutAll: '}'.			ws nextPutAll: ','].	1 to: maxMobile		do: 			[:index |			ws nextPut: Character cr.			ws nextPut: Character tab.			ws nextPutAll: '{0,0,' , self dynamicChan printString , ',{},{},{'.			1 to: self dynamicChan				do: 					[:i |					ws						nextPutAll: '{' , (self processTable size + index - 1) printString , ','								, (i - 1) printString , '}'.					i = dynamicChan ifFalse: [ws nextPutAll: ',']].			ws nextPutAll: '},{'.			1 to: self dynamicChan				do: 					[:i |					ws nextPutAll: '{-1,-1}'.					i = dynamicChan ifFalse: [ws nextPutAll: ',']].			ws nextPutAll: '}}'.			index = maxMobile ifFalse: [ws nextPutAll: ',']].	ws nextPut: Character cr.	ws nextPutAll: '};'.	ws nextPut: Character cr</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="maxFanOut:">maxFanOut: anObject	maxFanOut := anObject</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="dynamicChan">dynamicChan	^dynamicChan</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>cuda-production</category><body package="DistributedModeling-Cuda" selector="cudaGenParamOn:">cudaGenParamOn: ws	ws nextPutAll: '/* host activity : init params */node_param params[] =	'.	ws nextPutAll: '{ // start array'.	1 to: self processTable size		do: 			[:index |			ws nextPut: Character cr.			ws nextPut: Character tab.			ws nextPutAll: '{'.			ws nextPutAll: (self processTable at: index) pos x printString.			ws nextPutAll: ','.			ws nextPutAll: (self processTable at: index) pos y printString.			ws nextPutAll: ','.			ws nextPutAll: (self processTable at: index) range printString.			ws nextPutAll: '}'.			index = self processTable size ifFalse: [ws nextPutAll: ',']].	ws nextPut: Character cr.	ws nextPutAll: '};'.	ws nextPut: Character cr</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>initialize-release</category><body package="DistributedModeling-Cuda" selector="setUpFromAC:">setUpFromAC: conModel	"Initialisation à partir d'un automate cellulaire"	| npProc index processModel grille conn linearIndex chanInMap chanOutMap conList y |	npProc := conModel board x * conModel board y.	self processTable: (Array new: npProc).	self maxFanOut: conModel maxFanOut.	grille := conModel grid.	1 to: conModel board x		do: 			[:indexi |			1 to: conModel board y				do: 					[:indexj |					processModel := CudaProcessModel procedureName: 'AC'.					index := (indexj - 1) * conModel board x + indexi.					conn := (grille at: indexi) at: indexj.					chanOutMap := (1 to: conn size) collect: [:ixOut | index @ ixOut].					processModel chanOutMap: chanOutMap.					chanInMap := (1 to: conn size) collect: [:ixOut | 0 @ 0].					conn keysAndValuesDo: 							[:ind :coord |							linearIndex := (coord y - 1) * conModel board x + coord x.							conList := (grille at: coord x) at: coord y.							y := nil.							conList keysAndValuesDo: [:conInd :conCoord | conCoord = (indexi @ indexj) ifTrue: [y := conInd]].							y isNil ifTrue: [self error: 'bad graph or programming error'].							chanInMap at: ind put: linearIndex @ y].					processModel chanInMap: chanInMap.					processModel index: index.					self processTable at: index put: processModel]]</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>initialize-release</category><body package="DistributedModeling-Cuda" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	" *** Replace this comment with the appropriate initialization code *** "	super initialize.	dynamicChan := 5.	maxMobile := 3.	^self</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>cuda-production</category><body package="DistributedModeling-Cuda" selector="cudaGenStructsOn:">cudaGenStructsOn: ws	ws		nextPutAll: 'typedef struct s_mapped{	int node;	int canal;      int identity; /* at Tran request */}mapped;typedef struct s_canaux{	int nbOut;	int nbIn;	int nbDyn;	mapped write[MAX_FANOUT];	mapped read[MAX_FANOUT];	mapped writeDyn[DYNAMIC_CHAN];	mapped readDyn[DYNAMIC_CHAN];}canaux;typedef struct{	int x;	int y;	int range;} node_param;'.	ws nextPut: Character cr</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>cuda-production</category><body package="DistributedModeling-Cuda" selector="cudaGenDefinesOn:">cudaGenDefinesOn: ws	ws nextPutAll: '#define NODE_NUMBER '.	ws nextPutAll: self processTable size printString.	ws nextPut: Character cr.	ws nextPutAll: '#define MAX_FANOUT '.	ws nextPutAll: self maxFanOut1 printString.	ws nextPut: Character cr.	ws nextPutAll: '#define DYNAMIC_CHAN '.	ws nextPutAll: self dynamicChan printString.	ws nextPut: Character cr.	ws nextPutAll: '#define MAX_MOBILE '.	ws nextPutAll: self maxMobile printString.	ws nextPut: Character cr.	ws nextPut: Character cr.</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="processTable">processTable	^processTable</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>initialize-release</category><body package="DistributedModeling-Cuda" selector="setUpFrom:">setUpFrom: netGraph	"Initialisation à partir d'un graphe NetGen"	| npProc index node outLinks processModel chanOutMap inLinks chanInMap source target point processName procedureName nodepos |	npProc := netGraph table size.	self processTable: (Array new: npProc).	self maxFanOut: (netGraph statisticNumbers at: 4).	nodepos := netGraph nodes asSortedCollection.	netGraph table do: 			[:array |			index := array first.			processName := array at: 2.			procedureName := array at: 3.			node := array last.			outLinks := node outputLinks.			inLinks := node inputLinks.			processModel := CudaProcessModel procedureName: procedureName.			chanOutMap := (1 to: outLinks size) collect: [:ixOut | index @ ixOut].			processModel chanOutMap: chanOutMap.			processModel processName: processName.			processModel index: index.			(nodepos at: index) class = NetworkNodeLocalized				ifTrue: 					[processModel pos: (nodepos at: index) pos.					processModel range: (nodepos at: index) range].			self processTable at: index put: processModel.			chanInMap := (1 to: outLinks size) collect: [:ixOut | 0 @ 0].			inLinks keysAndValuesDo: 					[:ixIn :link |					source := link source.					target := link target.					point := self								makePointSource: source								target: target								inTable: netGraph table.					chanInMap at: ixIn put: point].			processModel chanInMap: chanInMap]</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="maxMobile">maxMobile	^maxMobile</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>cuda-production</category><body package="DistributedModeling-Cuda" selector="cudaGenOn:">cudaGenOn: ws	self cudaGenDefinesOn: ws.	self cudaGenStructsOn: ws.	self cudaGenFunctionsOn: ws.	self cudaGenChannelsOn: ws.	self cudaGenParamOn: ws</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>cuda-production</category><body package="DistributedModeling-Cuda" selector="cudaGenFunctionsOn:">cudaGenFunctionsOn: ws	ws nextPutAll: '#include "functions.cu"#include "functions_par.cu"'</body></methods><methods><class-id>AlgoDis.CudaBuilder</class-id> <category>accessing</category><body package="DistributedModeling-Cuda" selector="maxMobile:">maxMobile: anObject	maxMobile := anObject</body></methods><methods><class-id>AlgoDis.PickMobileView</class-id> <category>controller accessing</category><body package="DistributedModeling-Mobile" selector="defaultControllerClass">defaultControllerClass		^PickMobileController</body></methods><methods><class-id>AlgoDis.PickMobileView</class-id> <category>displaying</category><body package="DistributedModeling-Mobile" selector="displayOn:">displayOn: aGC	| graph |	self image isNil ifFalse: [self image displayOn: aGC].	graph := self model value lastGraph.	graph isNil		ifFalse: 			[ 			graph displayOn: aGC]</body></methods><methods><class-id>AlgoDis.PickMobileModel</class-id> <category>building</category><body package="DistributedModeling-Mobile" selector="buildNetAndDisplayOn:">buildNetAndDisplayOn: aGC	| graphAndComposite |	self filename isNil ifTrue: [self filename: (Dialog requestFileName: 'name for this net' default: 'aMap')].	graphAndComposite := NetworkGeometry				knownNetworkMobile: self				drawingOnlyOn: aGC				title: self filename , 'Range' , self portee printString , 'Points' , self points size printString.	^graphAndComposite</body></methods><methods><class-id>AlgoDis.PickMobileModel</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="clickForNetwork:">clickForNetwork: anObject	clickForNetwork := anObject</body></methods><methods><class-id>AlgoDis.PickMobileModel</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="steps">steps	^steps</body></methods><methods><class-id>AlgoDis.PickMobileModel</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="clickForNetwork">clickForNetwork	^clickForNetwork</body></methods><methods><class-id>AlgoDis.PickMobileModel</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="steps:">steps: anObject	steps := anObject</body></methods><methods><class-id>AlgoDis.PickMobileModel</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	super initialize.	self steps: OrderedCollection new.	self points: OrderedCollection new.</body></methods><methods><class-id>AlgoDis.PickMobileModel</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="points">points	points isNil ifTrue: [points := OrderedCollection new asValue].	^points</body></methods><methods><class-id>AlgoDis.PickMobileModel</class-id> <category>building</category><body package="DistributedModeling-Mobile" selector="buildNet">buildNet	| networkGraph |	self filename isNil ifTrue: [self filename: (Dialog requestFileName: 'name for this net' default: 'aMap')].	networkGraph := NetworkGeometry				knownNetworkMobile: self				drawing: true				title: self filename , 'Range' , self portee printString , 'Points' , self points size printString. 	^networkGraph</body></methods><methods><class-id>AlgoDis.PickMobileController</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="pointDestination:">pointDestination: anObject	pointDestination := anObject</body></methods><methods><class-id>AlgoDis.PickMobileController</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="pointDestination">pointDestination	^pointDestination</body></methods><methods><class-id>AlgoDis.PickMobileController</class-id> <category>event driven</category><body package="DistributedModeling-Mobile" selector="redButtonPressedEvent:">redButtonPressedEvent: aRedButtonPressedEvent	"Start drawing a new line when the &lt;Select&gt; button is pressed.	Keep showing the crosshair when pressed."	| point forSensors gc |	Cursor crossHair show.	point := self sensor cursorPointFor: aRedButtonPressedEvent.	forSensors := self model value clickForNetwork.	self points isNil		ifFalse: 			[forSensors				ifTrue: [self points add: point]				ifFalse: [self model value steps add: point]].	gc := self view graphicsContext.	"self halt."	self model value buildGraph: gc.	self view invalidate.</body></methods><methods><class-id>AlgoDis.PickMobileController</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."		super initialize.	points := OrderedCollection new.	steps := OrderedCollection new.	pointDestination := #toSensors.	^self</body></methods><methods><class-id>AlgoDis.PickMobileController</class-id> <category>events</category><body package="DistributedModeling-Mobile" selector="closeNoTerminate">closeNoTerminate	self view close</body></methods><methods><class-id>AlgoDis.PickMobileController</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="steps">steps	^steps</body></methods><methods><class-id>AlgoDis.LinkCreation</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="graphicSymbol">graphicSymbol	"Graphic symbol to be drawn on a mobile's trajectory to represent this event. Normally a filled circle."	^(Circle center: self eventPosition radius: 3) asFiller.</body></methods><methods><class-id>AlgoDis.LinkCreation</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="color">color	"Color of a link creation when graphically represented, normally in green."	^#green</body></methods><methods><class-id>AlgoDis.LinkCreation</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="eventTime">eventTime	"Gives the moment t when this event happens. This time t is relative to the position of the mobile involved and the time it started to move in its trajectory. The closer the event happens to the mobile's position, the lower is this time."	| halfLengthInRangeCircle distanceToProjectedPoint |	time = nil		ifTrue: 			[halfLengthInRangeCircle := self mobile halfLengthInRangeCircle: self sensor.			distanceToProjectedPoint := self mobile distanceToProjectedPoint: self sensor.			halfLengthInRangeCircle = nil				ifFalse: [time := (distanceToProjectedPoint - halfLengthInRangeCircle) / self mobile trajectory movement r + self timeReference]				ifTrue: [time := nil]].	^time</body></methods><methods><class-id>AlgoDis.LinkCreation</class-id> <category>printing</category><body package="DistributedModeling-Mobile" selector="printString">printString	"String representation of this event."	^'Link Creation ' , super printString.</body></methods><methods><class-id>AlgoDis.LinkCreation</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.LinkDestruction</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.LinkDestruction</class-id> <category>calculation</category><body package="DistributedModeling-Mobile" selector="eventTime">eventTime	"Gives the moment t when this event happens. This time t is relative to the position of the mobile involved and the time it started to move in its trajectory. The closer the event happens to the mobile's position, the lower is this time."	time = nil		ifTrue: 			[(self mobile halfLengthInRangeCircle: self sensor) = nil				ifFalse: 					[time := ((self mobile distanceToProjectedPoint: self sensor) + (self mobile halfLengthInRangeCircle: self sensor))								/ self mobile trajectory movement r + self timeReference]				ifTrue: [time := nil]].	^time</body></methods><methods><class-id>AlgoDis.LinkDestruction</class-id> <category>printing</category><body package="DistributedModeling-Mobile" selector="printString">printString	^'Link Destruction ' , super printString.</body></methods><methods><class-id>AlgoDis.LinkDestruction</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="graphicSymbol">graphicSymbol	"Graphic symbol to be drawn on a mobile's trajectory to represent this event. Normally a filled circle."	^(Circle center: self eventPosition radius: 3) asFiller.</body></methods><methods><class-id>AlgoDis.LinkDestruction</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="color">color	"Color of a link creation when graphically represented, normally in red."	^#red.</body></methods><methods><class-id>AlgoDis.RandomWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobilePath">mobilePath	"Generate and stores a random mobile path."	(mobilePath = nil) ifTrue: [		| rs count points |		rs := Random standard.		count := rs next * RandomWalk maxPoints.		points := OrderedCollection new.		count timesRepeat: [			points add:  (Point x: (rs next * self width) y: (rs next * self height)).		].		mobilePath := MobilePath mobile: (self mobile) steps: points.	].	^mobilePath.</body></methods><methods><class-id>AlgoDis.RandomWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobile">mobile	^mobile</body></methods><methods><class-id>AlgoDis.RandomWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="sensors">sensors	^sensors</body></methods><methods><class-id>AlgoDis.RandomWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobile:">mobile: anObject	mobile := anObject</body></methods><methods><class-id>AlgoDis.RandomWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="height">height	^height</body></methods><methods><class-id>AlgoDis.RandomWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="width:">width: anObject	width := anObject</body></methods><methods><class-id>AlgoDis.RandomWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobilePath:">mobilePath: mp	"Once generated, a random walk strategy cannot be affected."	^self shouldNotImplement.</body></methods><methods><class-id>AlgoDis.RandomWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="width">width	^width</body></methods><methods><class-id>AlgoDis.RandomWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="height:">height: anObject	height := anObject</body></methods><methods><class-id>AlgoDis.RandomWalk</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.RandomWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="sensors:">sensors: anObject	sensors := anObject</body></methods><methods><class-id>AlgoDis.SystematicWalk</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.SystematicWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="height:">height: anObject	height := anObject</body></methods><methods><class-id>AlgoDis.SystematicWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobilePath:">mobilePath: mp	"Once generated, the path should not be overwritten."	^self shouldNotImplement.</body></methods><methods><class-id>AlgoDis.SystematicWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobilePath">mobilePath	"Defines a path forward and backward through the area, and tries to minimize the overall path length."	(mobilePath =  nil) ifTrue: [		| points fitRange count x marge |			"We know we will have to make at least count ways: area's height divided by the mobile's range."		count := (self height / (2 * self mobile range)) ceiling.		"if we make count way, the it is possible to minimise the distance between all ways. Thus we use a 'fit range' which is lower than actual range but sufficient to make the job."		fitRange := (self height / (count * 2)) ceiling.		"Since we've reduced the distance between ways, the points next to boundaries (x = 0 or x = width) are easier to reach; we no longer have to 0 or width to be sure we reach any sensor located in this tricky area."		"marge is this distance no longer requiered to cover."		marge := ((self mobile range) ** 2 - (fitRange ** 2)) sqrt.		points := OrderedCollection new.		x := marge.		0 to: count - 1 do: [ :i |			points add: (Point x: x y: i * 2 * fitRange + (fitRange)).				(x = marge) ifTrue: [				x := self width - marge.			] ifFalse: [				x := marge.			].			points add: (Point x: x y: i * 2 * fitRange + (fitRange)).		].		"Useful only in case if after its exploration, the mobile has left some unexplored space in the lower part of the area."		"Normally useless but I keep it to make sure."		((count - 1) * 2 * fitRange + (fitRange)) &lt; (self height - (fitRange)) ifTrue: [			points add: (Point x: x y: (self height - (fitRange))).			(x = marge) ifTrue: [				x := self width - marge.			] ifFalse: [				x := marge.			].			points add: (Point x: x y: (self height - (fitRange))).		].		mobilePath := MobilePath mobile: (self mobile) steps: points.	].	^mobilePath.</body></methods><methods><class-id>AlgoDis.SystematicWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="width">width	^width</body></methods><methods><class-id>AlgoDis.SystematicWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobile:">mobile: anObject	mobile := anObject</body></methods><methods><class-id>AlgoDis.SystematicWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="height">height	^height</body></methods><methods><class-id>AlgoDis.SystematicWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="width:">width: anObject	width := anObject</body></methods><methods><class-id>AlgoDis.SystematicWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="sensors">sensors	^sensors</body></methods><methods><class-id>AlgoDis.SystematicWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="mobile">mobile	^mobile</body></methods><methods><class-id>AlgoDis.SystematicWalk</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="sensors:">sensors: anObject	sensors := anObject</body></methods><methods><class-id>AlgoDis.UIPickNodesMobileFromGPS</class-id> <category>actions</category><body package="DistributedModeling-Mobile" selector="loadImage">loadImage	| filename reader image pm bounds button |	filename := self geoReferencer browseFilename.	filename isEmpty		ifFalse: 			[reader := ImageReader fromFile: filename.			image := reader image.			bounds := image bounds.			pm := self pickModel value.			pm filename: filename.			pm points value: OrderedCollection new.			pm bounds: bounds.			self pickModel value: pm.			self laVue image: image.			button := self builder componentAt: #Slider1.			button enable.			button widget invalidate.			button := self builder componentAt: #InputField1.			button enable.			button widget invalidate]</body></methods><methods><class-id>AlgoDis.UIPickNodesMobileFromGPS</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="setupFromGeoReferencer">setupFromGeoReferencer	| stops path theModel |	stops := self geoReferencer colSelectedPositionsRef.	stops := stops collect: [:p | p x rounded @ p y rounded].	path := self geoReferencer colPathRef.	path := path collect: [:p | p x rounded @ p y rounded].	theModel := self pickModel value.	theModel points isNil		ifFalse: 			[stops do: [:aStop | theModel points add: aStop].			path do: [:aPoint | theModel steps add: aPoint]]	"	gc := self view graphicsContext.	self model value buildGraph: gc.	self view invalidate"</body></methods><methods><class-id>AlgoDis.UIPickNodesMobileFromGPS</class-id> <category>interface opening</category><body package="DistributedModeling-Mobile" selector="postOpenWith:">postOpenWith: aBuilder	self loadImage.	self setupFromGeoReferencer.	self laVue invalidate</body></methods><methods><class-id>AlgoDis.UIPickNodesMobileFromGPS</class-id> <category>initialize-release</category><body package="DistributedModeling-Mobile" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	"self loadImage."	"self model value steps: nil."	^self</body></methods><methods><class-id>AlgoDis.UIPickNodesMobileFromGPS</class-id> <category>interface opening</category><body package="DistributedModeling-Mobile" selector="finallyOpen">finallyOpen	self loadImage.	Dialog warn: 'toto'.	^self super inspect</body></methods><methods><class-id>AlgoDis.UIPickNodesMobileFromGPS</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="geoReferencer">geoReferencer	^geoReferencer</body></methods><methods><class-id>AlgoDis.UIPickNodesMobileFromGPS</class-id> <category>accessing</category><body package="DistributedModeling-Mobile" selector="geoReferencer:">geoReferencer: anObject	geoReferencer := anObject</body></methods><component-property><name>DistributedModeling-samples</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'All Advanced Tools' '') #(#any 'DistributedModeling' '') #(#any 'DistributedModeling-Compiler' ''))</value></component-property><component-property><name>DistributedModeling-samples</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('All Advanced Tools' '') #('DistributedModeling' '') #('DistributedModeling-Compiler' ''))</value></component-property><pundle-loaded><name>DistributedModeling-samples</name><type>package</type><primaryKey>37</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><pundle-loaded><name>DistributedModeling-Processes</name><type>package</type><primaryKey>6</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><pundle-loaded><name>DistributedModeling-CellularAutomata</name><type>package</type><primaryKey>5</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><pundle-loaded><name>DistributedModeling-Cuda</name><type>package</type><primaryKey>4</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><pundle-loaded><name>DistributedModeling-Mobile</name><type>package</type><primaryKey>3</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><component-property><name>MobileTrackInterface</name> <type>package</type><property>comment</property> <value>'Compiled library for 32-bit Linux: http://wsn.univ-brest.fr/QuickMap/libsgp4sdp4.so.Source code for library is located here: http://wsn.univ-brest.fr/QuickMap/sgpsdp.zip. Run ''make'' to compile it. '</value></component-property><pundle-loaded><name>MobileTrackInterface</name><type>package</type><primaryKey>2</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><pundle-loaded><name>TimeAnalysis</name><type>package</type><primaryKey>1</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><component-property><name>DistributedModeling</name> <type>bundle</type><property>parcelName</property> <value>'DistributedModeling'</value></component-property><component-property><name>DistributedModeling</name> <type>bundle</type><property>prerequisiteParcels</property> <value>#(#('ImageReaders' '') #('All Advanced Tools' '') #('Regex11' '') #('DLLCC' '') #('Tools-File Browser' '') #('Tools-Misc' '') #('Tools-Resources' '') #('HotDraw' ''))</value></component-property><component-property><name>DistributedModeling</name> <type>bundle</type><property>developmentPrerequisites</property> <value>#(#(#parcel 'ImageReaders' '') #(#parcel 'All Advanced Tools' '') #(#any 'Regex11' '') #(#any 'DLLCC' '') #(#parcel 'HotDraw' ''))</value></component-property><component-property><name>DistributedModeling</name> <type>bundle</type><property>prerequisiteDescriptions</property> <value>#(#(#name 'ImageReaders' #loadResolution #parcel) #(#name 'All Advanced Tools' #loadResolution #parcel) #(#name 'Regex11' #componentType #package) #(#name 'DLLCC' #componentType #package) #(#applicability #parcel #name 'Tools-File Browser') #(#applicability #parcel #name 'Tools-Misc') #(#applicability #parcel #name 'Tools-Resources') #(#name 'HotDraw' #loadResolution #parcel))</value></component-property><component-property><name>DistributedModeling</name> <type>bundle</type><property>postLoadBlock</property> <value>[:package | AlgoDis.UINetworkGeometry open ]</value></component-property><pundle-loaded><name>DistributedModeling</name><type>bundle</type><primaryKey>18</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><component-created><name>NetClientBase</name> <type>package</type></component-created><parcel-loaded><name>NetClientBase</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'net' 'NetClientBase.pcl'))</filename></parcel-loaded><component-created><name>MIME</name> <type>package</type></component-created><parcel-loaded><name>MIME</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'net' 'MIME.pcl'))</filename></parcel-loaded><component-created><name>HTTP</name> <type>package</type></component-created><parcel-loaded><name>HTTP</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'net' 'HTTP.pcl'))</filename></parcel-loaded><component-created><name>JSONReader</name> <type>package</type></component-created><parcel-loaded><name>JSONReader</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'WebInterfaces' 'JSONReader.pcl'))</filename></parcel-loaded><component-created><name>PickCellBundle</name> <type>bundle</type></component-created><component-created><name>PickCell</name> <type>package</type></component-created><component-created><name>Mapsv0</name> <type>package</type></component-created><component-created><name>MapAccess</name> <type>package</type></component-created><component-created><name>QuickMap</name> <type>package</type></component-created><name-space><name>Smalltalk</name><environment>Root</environment><private>false</private><imports>			Core.*			Kernel.*			OS.*			External.*			Graphics.*			UI.*			Tools.*			CraftedSmalltalk.*			Database.*			Lens.*			private VWHelp.*			private AlgoDis.*			</imports><category>System-Name Spaces</category><attributes><package>System-Name Spaces</package></attributes></name-space><shared-variable><name>USBSerialDictionary</name><environment>Root.Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category></shared-variable><shared-variable><name>CovVWDictionary</name><environment>Root.Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category></shared-variable><shared-variable><name>TrevezelDictionary</name><environment>Root.Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category></shared-variable><shared-variable><name>ShapefileReaderDictionary</name><environment>Root.Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category></shared-variable><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIPickCellNodes</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIPickCellNodes</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TrackPoint</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TrackPoint</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>httpConnexion</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>httpConnexion</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UITextPoints</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UITextPoints</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>semaQueue</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>semaQueue</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UICellShow</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UICellShow</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CellSignature</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CellSignature</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>BGPickCellData</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>BGPickCellData</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>BGPickCell</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>BGPickCell</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ElevationReader</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ElevationReader</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>view</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>view</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UILocation</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UILocation</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIKnownUrls</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIKnownUrls</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>url</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>url</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>GPSTrackingInterface</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>GPSTrackingInterface</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>APoint</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>APoint</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>USBSerial</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>USBSerial</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Trevezel</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Trevezel</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CovVW</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CovVW</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>para</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>para</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CellController</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CellController</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>KnownMapUrl</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>KnownMapUrl</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>GPredictTraceReader</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>GPredictTraceReader</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SgpSdpInterface</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SgpSdpInterface</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>GpredictReader</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>GpredictReader</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>PickCellModel</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>PickCellModel</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIGoogleMap</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIGoogleMap</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CsvReader</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CsvReader</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OpenLayerHtml</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OpenLayerHtml</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIMapsv0</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIMapsv0</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIMapAccess</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIMapAccess</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIQuickMap</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIQuickMap</staticKey> <definitionChange>added</definitionChange></component_static_change><name-space><name>Smalltalk</name><environment>Root</environment><private>false</private><imports>			Core.*			Kernel.*			OS.*			External.*			Graphics.*			UI.*			Tools.*			CraftedSmalltalk.*			Database.*			Lens.*			private VWHelp.*			private AlgoDis.*			</imports><category>System-Name Spaces</category><attributes><package>PickCell</package></attributes></name-space><shared-variable><name>USBSerialDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>PickCell</package></attributes></shared-variable><shared-variable><name>TrevezelDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>PickCell</package></attributes></shared-variable><shared-variable><name>TrackPointDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>PickCell</package></attributes></shared-variable><shared-variable><name>APoint</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>PickCell</package></attributes></shared-variable><shared-variable><name>CovVWDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>PickCell</package></attributes></shared-variable><shared-variable><name>ShapefileReaderDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>MapAccess</package></attributes></shared-variable><class><name>PickCellDBAccess</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>SystemOrganization</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>width height mapOrigin cellSize imageDimX imageDimY longitude latitude elevation zoom </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>BGPickCell</name><environment>AlgoDis</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>uneSerie </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Business Graphics-Examples</category><attributes><package>PickCell</package></attributes></class><comment><class-id>AlgoDis.BGPickCell</class-id><body>Instances are a simple example illustrating the use of data series.It displays the information (salary and age of uneSeries) as a line chart.Instance Variables:	uneSeries &lt;List&gt;	a collection of the company's uneSeries</body></comment><shared-variable><name>USBSerialDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>PickCell</package></attributes></shared-variable><class><name>USBSerial</name><environment>Smalltalk</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cportNr bdrate mode </inst-vars><class-inst-vars></class-inst-vars><imports>			private USBSerialDictionary.*			</imports><category>ExternalInterface-New</category><attributes><includeFiles><item>usb.h</item></includeFiles><includeDirectories><item>/Users/monmac/Documents/SerialPort</item></includeDirectories><libraryFiles><item>usb.so</item></libraryFiles><libraryDirectories><item>/Users/monmac/Documents/SerialPort</item></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>PickCell</package></attributes></class><class><name>OpenLayerHtml</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lat lon zoom urlFileName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>CellClassifier</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dictionary cell cellArray newCellArray pickModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>UITextPoints</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>leTexte pickModel guessedName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>MyMenu</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>ElevationReader</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>requestBuffer requestTime process processTable </inst-vars><class-inst-vars>Reader </class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>CellImage</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cellImage signature position geoPosition geoPositionCorner elevation name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>LightTrap</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name lat lon values </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>GPSTrackingInterface</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>usb getData </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>ImageHistory</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>knownMapUrl imageHistory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>PickCellView</name><environment>AlgoDis</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>image </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>CellController</name><environment>AlgoDis</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position optionKey origin dragInProgress </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>UICellShow</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>signaturesToCellMapDictionary classToCells laListe laVue lesPoints laSignature lesCouleurs lesStats leSeuil pointToCells lePerformer leNbDeClasses lIndexClasses lesClasses lastPixel lEditeur targetClass selectedClasses leMaskName positionVH uiLocation uiPickCellNodes showSensors neighborhood theSeaLevel showSea showGround systemOrganization </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>GPSTrackingStream</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>aGPSTrackingInterface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>UILocation</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mercator leX leY leYGeo leXGeo delayPerCent image coordinateMode corner origine imageName elevation parameters </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>TrackPoint</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id time lon lat alt rssi </inst-vars><class-inst-vars></class-inst-vars><imports>			private TrackPointDictionary.*			</imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>TraceParserForCrickets</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>texte dicoState fileName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><comment><class-id>AlgoDis.TraceParserForCrickets</class-id><body>TraceParserForCrickets is a utility that produces graph based on atrace from simulation.It was developed to help explanation on cricket population evolution.Instance Variables:	dicoState	&lt;(Collection of: (DocumentListItem | GlorpVirtualCollection | SequenceableCollection | ValueWithParametersField)) | GlorpExpression | ReadStream&gt;	description of dicoState	fileName	&lt;CharacterArray&gt;	description of fileName	texte	&lt;Collection&gt;	description of texte</body></comment><class><name>BGPickCellData</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>xyzRef code nbElements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Business Graphics-Smalltalk.AlgoDis</category><attributes><package>PickCell</package></attributes></class><comment><class-id>AlgoDis.BGPickCellData</class-id><body>Instances describe employees in terms of the employee's name, age, and salary. Instance Variables	xyzRef	&lt;String&gt;		employee's name	code		&lt;Number&gt;	employee's age	nbElements	&lt;Number&gt;	employee's salary</body></comment><class><name>PickCellModel</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cellDisplay points filename bounds portee lastGraph pointDictionary zones connectivity colNodes grid geoRef1 geoRef2 cellArray cellClassifier newCellArray mousePoint mouseCell mapOrigin mercator getElevation highLightCells displayModeDictionary guessedName guessedDirectory windArray </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>PickCellController</name><environment>AlgoDis</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position keyboardProcessor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><shared-variable><name>CovVWDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>PickCell</package></attributes></shared-variable><class><name>CovVW</name><environment>Smalltalk</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private CovVWDictionary.*			</imports><category>ExternalInterface-New</category><attributes><includeFiles><item>covVW.h</item></includeFiles><includeDirectories><item>/home/tuyen/VW811/covVWOpt</item></includeDirectories><libraryFiles><item>covVW.so</item></libraryFiles><libraryDirectories><item>/home/tuyen/VW811/covVWOpt</item></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>PickCell</package></attributes></class><class><name>CellSignature</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>min max mean seuil mean2 performer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><comment><class-id>AlgoDis.CellSignature</class-id><body>CellSignature has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables	max	&lt;ColorValue | ColorValue&gt;	RGB max (max(R), max(G), max(B))	mean	&lt;ColorValue | ColorValue&gt;	description of mean	mean2	&lt;ColorValue&gt;	tableau somme des carres des ecarts à la moyenne , en R, G et B	min	&lt;ColorValue | ColorValue&gt;	description of min	seuil	&lt;ArithmeticValue&gt;	description of seuil</body></comment><class><name>KnownMapUrl</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>url shortName position scale </inst-vars><class-inst-vars>KnownUrls </class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><comment><class-id>AlgoDis.KnownMapUrl</class-id><body>KnownMapUrl represents an Url location having a short name, on which an image is expected to be foundInstance Variables:	position	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of position	scale	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of scale	shortName	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of shortName	url	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of url</body></comment><class><name>UIPickCellNodes</name><environment>AlgoDis</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>laVue pickModel percent portee gridAspect leSeuil latitude longitude uiLocation uiCellShow doShowGrid doShowImage doShowGraph doShowCoverCells doShowZones doShowLabel laLat laLon elevation lEchelle guessedName doShowWind knownUrlVH knownUrlWindow storedHistory getData doShowGPS doGetGPS doSaveGPSPoints paraLora num parameters </inst-vars><class-inst-vars>KnownUrls </class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>PickCell</package></attributes></class><shared-variable><name>TrevezelDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>PickCell</package></attributes></shared-variable><class><name>Trevezel</name><environment>Smalltalk</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private TrevezelDictionary.*			</imports><category>ExternalInterface-New</category><attributes><includeFiles><item>trevezel.h</item></includeFiles><includeDirectories><item>/home/serieux/tuyen/VW82/trevezel</item></includeDirectories><libraryFiles><item>trevezel.so</item></libraryFiles><libraryDirectories><item>/home/serieux/tuyen/VW82/trevezel</item></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>PickCell</package></attributes></class><class><name>TraceParserForCSV</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fileName title lines columns </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>CellView</name><environment>Smalltalk</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pixelPoint </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>GDALReader</name><environment>AlgoDis</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filename ncols nrows xllcorner yllcorner cellsize line </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>UIKnownUrls</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>knownUrl laListe lesNoms leUrl leShortName closeVH </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>Mapsv0</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>matrixTile nodesPx nodesGPS pickModelTmp pixelPerKm colNodes networkGraph distanceSet dicoNodeDistance dicoReachedNodes colPickedNodesVH range xmlMetadata </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><comment><class-id>Mapsv0</class-id><body>GoogleMap, the model, is displayed by UIGoogleMap. </body></comment><class><name>Mapsv0Controller</name><environment>Smalltalk</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>application </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><class><name>Mapsv0View</name><environment>Smalltalk</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>application tileMatrix googleMapTileCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><class><name>NetworkDistance</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nodeA nodeB distance </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><class><name>Mapsv0Proxy</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>HttpConnexion </class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><class><name>Mapsv0Utilities</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><class><name>UIMapsv0</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>longitude latitude zoom xTile yTile tileView tileImage oldZoom matrixTile clicPointVH lesPointsVH lesPointsGPSVH mercator googleModel drawingParameters doDisplayRange doDisplayNodeName doDisplayNetwork range gpxPickFilename uiState colPickNodes networkColorValue labelPosVH networkList nodePName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><class><name>Mapsv0TileCache</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dicoZoom </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><class><name>GlobalMercator</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tileSize initialResolution originShift </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><comment><class-id>GlobalMercator</class-id><body># Project:	GDAL2Tiles, Google Summer of Code 2007 &amp; 2008#           Global Map Tiles Classes# Purpose:	Convert a raster into TMS tiles, create KML SuperOverlay EPSG:4326,#			generate a simple HTML viewers based on Google Maps and OpenLayers# Author:	Klokan Petr Pridal, klokan at klokan dot cz# Web:		http://www.klokan.cz/projects/gdal2tiles/	Pixel and tile coordinates are in TMS notation (origin [0,0] in bottom-left).	What coordinate conversions do we need for TMS Global Mercator tiles::	     LatLon      &lt;-&gt;       Meters      &lt;-&gt;     Pixels    &lt;-&gt;       Tile     	 WGS84 coordinates   Spherical Mercator  Pixels in pyramid  Tiles in pyramid	     lat/lon            XY in metres     XY pixels Z zoom      XYZ from TMS 	    EPSG:4326           EPSG:900913                                         	     .----.              ---------                  --                  TMS      	    /      \     &lt;-&gt;     |       |     &lt;-&gt;       /----/    &lt;-&gt;      Google    	    \      /               |       |              /--------/           QuadTree   	     -----               ---------         /------------/                   	   KML, public   WebMapService         Web Clients      TileMapServiceInstance Variables	initialResolution	&lt;ArithmeticValue | Filename | LogicalFilename | WAFileLibrary&gt;	description of initialResolution	originShift	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of originShift	tileSize	&lt;SmallInteger&gt;	description of tileSize</body></comment><class><name>NetworkOrganisation</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dicoNodesReached </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><class><name>Mapsv0Tile</name><environment>Smalltalk</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>xTile yTile zoom image pixmap </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><class><name>NetworkPosition</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>longitude latitude altitude metre pixelDico currentZoom currentTile mercator model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mapsv0</package></attributes></class><class><name>MapTileCache</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dicoZoom dicoZoomVH </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MapAccess</package></attributes></class><comment><class-id>MapTileCache</class-id><body>MapTileCache stores tiles downloaded from remote server, in order to speed up their display. Instance Variables	dicoZoom	&lt;Dictionary&gt;	description of dicoZoom</body></comment><class><name>MapTile</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y zoom tile image </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MapAccess</package></attributes></class><comment><class-id>MapTile</class-id><body>Tile from map server, to be displayed on a GraphicsContext.Instance Variables	image	&lt;Depth8Image&gt;	description of image	tile	&lt;Pixmap&gt;	description of tile	x	&lt;Integer&gt;	description of x	y	&lt;Integer&gt;	description of y	zoom	&lt;Integer&gt;	description of zoom</body></comment><class><name>MapServerConnection</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>MapClient </class-inst-vars><imports></imports><category></category><attributes><package>MapAccess</package></attributes></class><comment><class-id>MapServerConnection</class-id><body>Retrieve data from map server. Two servers are registered : GoogleMap and OpenStreetMap.</body></comment><shared-variable><name>ShapefileReaderDictionary</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>MapAccess</package></attributes></shared-variable><class><name>ShapefileReader</name><environment>Smalltalk</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filename handle entitiesPtr shapeTypePtr padfMinBoundPtr padfMaxBoundPtr </inst-vars><class-inst-vars>Shapedir </class-inst-vars><imports>			private ShapefileReaderDictionary.*			</imports><category>ExternalInterface-New</category><attributes><includeFiles><item>lib.h</item></includeFiles><includeDirectories><item>./Source/shapebuild</item></includeDirectories><libraryFiles><item>lib.so</item></libraryFiles><libraryDirectories><item>./Library</item></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>MapAccess</package></attributes></class><comment><class-id>ShapefileReader</class-id><body>MyShapes provides access to shapefiles through a library. </body></comment><class><name>MapAccess</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>xTile yTile zoom originTile mapTileCache component clicPointVH </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MapAccess</package></attributes></class><comment><class-id>MapAccess</class-id><body>MapAccess is the model for tileView.</body></comment><class><name>GeoPosition</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>longitude latitude elevation toMeter </inst-vars><class-inst-vars>initialResolution originShift </class-inst-vars><imports></imports><category></category><attributes><package>MapAccess</package></attributes></class><comment><class-id>GeoPosition</class-id><body>Geographical position with longitude, latitude and elevation. Instance Variables	elevation	&lt;ArithmeticValue | Duration&gt;	description of elevation	latitude	&lt;AbstractProxy | MessageArchiver | Object | ProtoObject&gt;	description of latitude	longitude	&lt;ArithmeticValue | Vector&gt;	description of longitude	toMeter	&lt;Object | ProtoObject&gt;	description of toMeter</body></comment><class><name>MapAccessView</name><environment>Smalltalk</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MapAccess</package></attributes></class><comment><class-id>MapAccessView</class-id><body>MapAccessView is the view of MapAccess.</body></comment><class><name>UIMapAccess</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tileView longitude latitude xTile yTile zoom oldZoom mapAccessVH colBat validComponent echelle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MapAccess</package></attributes></class><comment><class-id>UIMapAccess</class-id><body>Manage maps: zoom in, zoom out, and travel through the map. </body></comment><class><name>Batiment</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contour </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MapAccess</package></attributes></class><comment><class-id>Batiment</class-id><body>Batiment is a geolocalized building. Instance Variables	contour	&lt;(Collection of: GeoPosition) | ExpressionGroup&gt;	description of contour</body></comment><class><name>UIMapTileCacheConfig</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent dicoList dicoBox dicoChoices server </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MapAccess</package></attributes></class><comment><class-id>UIMapTileCacheConfig</class-id><body>UIMapTileCacheConfig for choosing the map source. Instance Variables	dicoBox	&lt;ValueHolder&gt;	description of dicoBox	dicoChoices	&lt;SelectionInList&gt;	description of dicoChoices	dicoList	&lt;SelectionInList&gt;	description of dicoList	parent	&lt;UIMapAccess&gt;	description of parent	server	&lt;ValueModel&gt;	description of server</body></comment><class><name>MapAccessController</name><environment>Smalltalk</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MapAccess</package></attributes></class><class><name>UIQuickMapConfig</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>masterWindow hostSpec useProxy proxyHostname proxyPort tabs isAnimated isPrefetching getUriMethod friendlyName basemapChoices basemap maxSocket maxZoom libraryPath libraryFile libraryDirectories libraryFiles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTile</name><environment>Smalltalk</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y zoom png image tile retrieving refresh mapClient sema index idx theProxy semaphore </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxy</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dicoZoom container client clientArray semaphoreArray semaphoreNext index </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileOverlay</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y zoom container prx cacheGC </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>PseudoTile</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickConnection</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>UIQuickMap</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>quickTileMap globalMercator forkMove config configWin currentProxy gpredictReader forkDelay gm newUpdate myModel googleModel gpredictTraceReader satPathDuration laLatTop laLonBottom laLonTop laLatBottom uiLocation mouseLon mouseLat leModeDesPoints leDiviseur lastPickCellModel laSoucheNom </inst-vars><class-inst-vars></class-inst-vars><imports>			Heeg.*			</imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileModel</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sensorPositions mercator zoom pickModel clicZone clicZoneInProgress clicZoneRectangle clicZoneAllRectangle clicZoneAllRectangleAbsolute sensorsNumber pixelPerKm pickModelRange geoPositionVH textCollector lineArray diviseur highLightCells lastPickCellModel stations stationPositions lightrapData lightrapPositions </inst-vars><class-inst-vars></class-inst-vars><imports>			FranceMeteo.*			</imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileController</name><environment>Smalltalk</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isMoving previousPoint previousClock currentClock delta forkAnim shifted clicZoneInProgress clicZoneOrigin clicZoneCorner pathInProgress lineInProgress </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickHttpRequest</name><environment>Smalltalk</environment><super>Net.HttpRequest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mapClients </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyOverlay</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dicoZoom container objects compositePart dicoComposite </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileTracker</name><environment>Smalltalk</environment><super>UI.SelectionTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lastPoint delta previousPoint previousClock currentClock currentPoint </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickLayer</name><environment>Smalltalk</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zoom </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>PickCellModelFromUrl</name><environment>AlgoDis</environment><super>AlgoDis.PickCellModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>knownUrl </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PickCell</package></attributes></class><class><name>QuickTileComposite</name><environment>Smalltalk</environment><super>QuickTile</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mapZoom proxy overlay model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyWSN</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyHillShading</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyGapiv3</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyGapiv2</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyArcgisWorldHillshade</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyGkhm</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyOSM</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyGapp</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyQuest1</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyArcgisWorldImagery</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyThunderforest</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyOCM</name><environment>Smalltalk</environment><super>QuickTileProxy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyGreatBritain</name><environment>Smalltalk</environment><super>QuickTileProxyWSN</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyCentralAmerica</name><environment>Smalltalk</environment><super>QuickTileProxyWSN</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyMadagascar</name><environment>Smalltalk</environment><super>QuickTileProxyWSN</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyIndonesia</name><environment>Smalltalk</environment><super>QuickTileProxyWSN</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxySenegal</name><environment>Smalltalk</environment><super>QuickTileProxyWSN</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileMap</name><environment>Smalltalk</environment><super>QuickTileComposite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller globalMercator dicoProxy satellite path pathInPixel colPathPolyline </inst-vars><class-inst-vars></class-inst-vars><imports>			FranceMeteo.*			</imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyFrance</name><environment>Smalltalk</environment><super>QuickTileProxyWSN</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><class><name>QuickTileProxyVietnam</name><environment>Smalltalk</environment><super>QuickTileProxyWSN</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>QuickMap</package></attributes></class><shared-variable><name>Reader</name><environment>AlgoDis.ElevationReader</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>PickCell</package></attributes></shared-variable><shared-variable><name>Parameters</name><environment>UILocation</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>PickCell</package></attributes></shared-variable><shared-variable><name>GMapGettingStarted</name><environment>UIMapsv0</environment><private>false</private><constant>false</constant><category>workspaces</category><initializer></initializer><attributes><package>Mapsv0</package></attributes></shared-variable><shared-variable><name>Client</name><environment>Mapsv0Proxy</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Mapsv0</package></attributes></shared-variable><shared-variable><name>SelectedServer</name><environment>MapServerConnection</environment><private>false</private><constant>false</constant><category>serverID</category><attributes><package>MapAccess</package></attributes></shared-variable><shared-variable><name>SatelliteIcon3</name><environment>UIQuickMap</environment><private>false</private><constant>false</constant><category>icons</category><initializer>OpaqueImage 			figure: (Image 		extent: 32@21 		depth: 6 		bitsPerPixel: 8 		palette: (Graphics.MappedPalette 	withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 770 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 3180 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5300 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 2890 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 2890 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4240 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1316 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 2633 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 770 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4240 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5557 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6617 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 4240 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 1060 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(513 513 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 2376 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 4497 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(513 256 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3950 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5814 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4497 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(770 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 1830 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6360 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5300 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 2633 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 1060 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 1060 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 4753 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(256 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1573 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(513 513 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2376 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6360 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5557 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 2890 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(256 256 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(770 770 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6070 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 5814 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(256 256 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 2633 2633)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)]))		usingBits: (ByteArray 	fromPackedString: '@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ @@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ @@F0@B@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ @@DA@PH@@B@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ @@DRHPDA@P@@HB@ HB@ HB@ @@@@HB@ HB@ HB@ @@F1@PB!@PDA@S@@HB@ HB@ H@D!HG@@HB@ HB@ @@BA,PDA@DHA@PF0@@@ HB@ HB@ @!@AHR@@HB@ H@F1@ BA@PDA,(F0@@@ HB@ HB@ HB@ @RD!H@@ HB@A8PDA@JDA@PD@@@@ HB@ HB@ HB@ H@@ @@D#P@MPHZBQ,PD@TQD@@@@ HB@ HB@ HB@ HB@ HB@ HOA!T$@@D@CA@PL @@@ HB@ HB@ HB@ HB@ HB@ @@@",3B1PKFB(.L @@@ HB@ HB@ HB@ HB@ HB@ @@DA@@KA0NE@8UI1T@@ HB@ HB@ HB@ HB@ HB@ @@DA@P@CT@E!X@IBP-@ HB@ HB@ HB@ HB@ HB@ @@DA\PDA@W@@4VE!X_F@XB@ HB@ HB@ HB@ HB@!\@DA\PD@(PDA@@MPLVH3@%@@DB@ HB@ HB@ HB@ HBE1@PB!@PDCDP@@@B@ @YD!HRLQ4B@ HB@ HB@ HB@ H@DA@P@A@P@@@B@ HB@!\GD!HRC@HB@ HB@ HB@ HB@ @PDA@&amp;@@@B@ HB@ HBE2&lt;@D!H1@ HB@ HB@ HB@ HB@ @P@@@B@ HB@ HB@ HBB!HRD @B@ HB@ HB@ HB@ HB@ @B@ HB@ HB@ HB@ @WD"&lt;@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ H@@@HB@ HB@ HB@ HB@ HB')) 			shape: (Image 		extent: 32@21 		depth: 1 		bitsPerPixel: 1 		palette: CoveragePalette monoMaskPalette 	usingBits: #[0 0 0 12 0 0 0 60 0 0 0 254 0 0 3 254 0 224 15 255 1 240 63 255 1 248 127 252 0 248 255 240 1 126 255 192 0 31 255 0 0 223 252 0 3 255 240 0 15 255 192 0 63 255 192 0 255 255 224 0 255 231 240 0 255 131 240 0 254 3 240 0 120 1 240 0 32 3 224 0 0 0 192 0])</initializer><attributes><package>QuickMap</package></attributes></shared-variable><shared-variable><name>SatelliteIcon2</name><environment>UIQuickMap</environment><private>false</private><constant>false</constant><category>icons</category><initializer>OpaqueImage 			figure: (Image 		extent: 32@17 		depth: 4 		bitsPerPixel: 4 		palette: (Graphics.MappedPalette 	withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(546 546 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 2730 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 3276 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 4914 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 3276 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) 		usingBits: (ByteArray 	fromPackedString: 'L3L3L3L3L3,@L3L3L3L3L3L3L3L3L3@H"KL3L3L4ICL3L3L3L0B8#L2@L3L4H!H$L3L3L3LH"63L2K,4HRH"P3L3L3L3BE.&amp;.&lt;2@H"HRP3L3L3L3L0!ER8"&lt;2@H"P3L3L3L3L3LHTX!X L\BP3L3L3L3L3L3BBTU%U H@3L3L3L3L3L3L2H"IEQXA0L3L3L3L3L3L4H$H"IDV@\CL3L3L3L3L4H$P$H"UE G@3L3L3L3L4H)QBP".HUWA0L3L3L3L4H$QIP$L3B8]0\CL3L3L3H)H"H$L3L3LK\G@3L3L3L"H)H$L3L3L3L0@CL3L3L3L"H"L3L3L3L3L3L3L3L3L3L$P3L3L3L3L3L3L3L3L3Lb')) 			shape: (Image 		extent: 32@17 		depth: 1 		bitsPerPixel: 1 		palette: CoveragePalette monoMaskPalette 	usingBits: #[0 1 192 0 0 7 224 28 0 63 240 127 0 63 253 254 0 63 255 248 0 63 255 224 0 63 255 128 0 63 254 0 0 63 254 0 0 255 254 0 3 255 254 0 15 255 254 0 63 241 254 0 127 192 126 0 255 0 28 0 124 0 0 0 56 0 0 0])</initializer><attributes><package>QuickMap</package></attributes></shared-variable><shared-variable><name>SavedSession</name><environment>UIQuickMap</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>QuickMap</package></attributes></shared-variable><shared-variable><name>NetworkProxyBackup</name><environment>UIQuickMapConfig</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>QuickMap</package></attributes></shared-variable><shared-variable><name>ClosedHandCursor</name><environment>UIQuickMap</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>QuickMap</package></attributes></shared-variable><shared-variable><name>SatelliteIcon</name><environment>UIQuickMap</environment><private>false</private><constant>false</constant><category>icons</category><initializer>OpaqueImage 			figure: (Image 		extent: 16@16 		depth: 4 		bitsPerPixel: 4 		palette: (Graphics.MappedPalette 	withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3822 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 1092 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4914 8191)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) 		usingBits: #[102 102 102 136 136 102 6 102 102 102 88 102 102 0 160 102 6 102 134 98 34 32 74 6 96 102 134 34 34 32 164 160 102 6 135 34 34 16 74 6 102 96 134 113 17 32 160 102 102 102 134 34 119 32 6 102 102 102 131 34 119 80 102 102 102 102 6 85 136 32 102 102 102 96 160 34 119 32 102 102 102 10 74 2 119 32 102 102 96 148 164 160 119 32 102 102 9 74 74 7 119 32 102 102 96 164 160 119 119 32 102 102 102 10 0 34 119 1 102 102 102 96 102 0 0 102 102 102]) 			shape: (Image 		extent: 16@16 		depth: 1 		bitsPerPixel: 1 		palette: CoveragePalette 	monoMaskPalette usingBits: #[3 200 0 0 15 252 0 0 143 254 0 0 79 255 0 0 47 254 0 0 31 252 0 0 15 248 0 0 15 240 0 0 15 240 0 0 31 240 0 0 63 240 0 0 127 240 0 0 255 240 0 0 127 240 0 0 63 240 0 0 19 192 0 0])</initializer><attributes><package>QuickMap</package></attributes></shared-variable><shared-variable><name>SatelliteIcon4</name><environment>UIQuickMap</environment><private>false</private><constant>false</constant><category>icons</category><initializer></initializer><attributes><package>QuickMap</package></attributes></shared-variable><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CS6</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CS6</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="CS6">CS6	&lt;C: #define CS6 16	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_PollComport:with:with:">RS232_PollComport: arg1 with: arg2 with: arg3	&lt;C: int RS232_PollComport(int, unsigned char * , int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ISTRIP</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ISTRIP</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="ISTRIP">ISTRIP	&lt;C: #define ISTRIP 32	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>INPCK</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>INPCK</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="INPCK">INPCK	&lt;C: #define INPCK 16	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__DATE__</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__DATE__</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="__DATE__">__DATE__	&lt;C: #define __DATE__ "May 12, 2017"	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__TIME__</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__TIME__</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="__TIME__">__TIME__	&lt;C: #define __TIME__ "11:12:13 AM"	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ONLRET</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ONLRET</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="ONLRET">ONLRET	&lt;C: #define ONLRET 32	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CSIZE</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CSIZE</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="CSIZE">CSIZE	&lt;C: #define CSIZE 48	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>BRKINT</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>BRKINT</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="BRKINT">BRKINT	&lt;C: #define BRKINT 2	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CS8</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CS8</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="CS8">CS8	&lt;C: #define CS8 48	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NCCS</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NCCS</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="NCCS">NCCS	&lt;C: #define NCCS 32	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B115200</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B115200</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B115200">B115200	&lt;C: #define B115200 4098	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ICRNL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ICRNL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="ICRNL">ICRNL	&lt;C: #define ICRNL 256	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>PARMRK</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>PARMRK</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="PARMRK">PARMRK	&lt;C: #define PARMRK 8	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ISIG</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ISIG</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="ISIG">ISIG	&lt;C: #define ISIG 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B1152000</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B1152000</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B1152000">B1152000	&lt;C: #define B1152000 4105	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IMAXBEL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IMAXBEL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="IMAXBEL">IMAXBEL	&lt;C: #define IMAXBEL 8192	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IGNCR</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IGNCR</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="IGNCR">IGNCR	&lt;C: #define IGNCR 128	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCSANOW</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCSANOW</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="TCSANOW">TCSANOW	&lt;C: #define TCSANOW 0	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_GetPortnr:">RS232_GetPortnr: arg	&lt;C: int RS232_GetPortnr(const char * )&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IUTF8</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IUTF8</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="IUTF8">IUTF8	&lt;C: #define IUTF8 16384	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VERASE</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VERASE</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VERASE">VERASE	&lt;C: #define VERASE 2	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VLNEXT</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VLNEXT</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VLNEXT">VLNEXT	&lt;C: #define VLNEXT 15	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VINTR</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VINTR</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VINTR">VINTR	&lt;C: #define VINTR 0	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCIOFF</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCIOFF</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="TCIOFF">TCIOFF	&lt;C: #define TCIOFF 2	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B1800</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B1800</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B1800">B1800	&lt;C: #define B1800 10	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VEOL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VEOL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VEOL">VEOL	&lt;C: #define VEOL 11	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__STDC__</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__STDC__</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="__STDC__">__STDC__	&lt;C: #define __STDC__ 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>myMode</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>myMode</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>variables</category><body package="PickCell" selector="myMode">myMode	&lt;C: char * myMode&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VSWTC</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VSWTC</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VSWTC">VSWTC	&lt;C: #define VSWTC 7	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>PARODD</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>PARODD</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="PARODD">PARODD	&lt;C: #define PARODD 512	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B110</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B110</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B110">B110	&lt;C: #define B110 3	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCOON</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCOON</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="TCOON">TCOON	&lt;C: #define TCOON 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCIFLUSH</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCIFLUSH</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="TCIFLUSH">TCIFLUSH	&lt;C: #define TCIFLUSH 0	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ECHONL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ECHONL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="ECHONL">ECHONL	&lt;C: #define ECHONL 64	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__MAX_BAUD</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>__MAX_BAUD</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="__MAX_BAUD">__MAX_BAUD	&lt;C: #define __MAX_BAUD B4000000	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_IsCTSEnabled:">RS232_IsCTSEnabled: arg	&lt;C: int RS232_IsCTSEnabled(int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCSAFLUSH</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCSAFLUSH</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="TCSAFLUSH">TCSAFLUSH	&lt;C: #define TCSAFLUSH 2	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B75</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B75</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B75">B75	&lt;C: #define B75 2	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>INLCR</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>INLCR</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="INLCR">INLCR	&lt;C: #define INLCR 64	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B2400</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B2400</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B2400">B2400	&lt;C: #define B2400 11	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VKILL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VKILL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VKILL">VKILL	&lt;C: #define VKILL 3	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>_HAVE_STRUCT_TERMIOS_C_OSPEED</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>_HAVE_STRUCT_TERMIOS_C_OSPEED</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="_HAVE_STRUCT_TERMIOS_C_OSPEED">_HAVE_STRUCT_TERMIOS_C_OSPEED	&lt;C: #define _HAVE_STRUCT_TERMIOS_C_OSPEED 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VT1</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VT1</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VT1">VT1	&lt;C: #define VT1 16384	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VSUSP</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VSUSP</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VSUSP">VSUSP	&lt;C: #define VSUSP 10	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NOFLSH</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NOFLSH</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="NOFLSH">NOFLSH	&lt;C: #define NOFLSH 128	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B38400</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B38400</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B38400">B38400	&lt;C: #define B38400 15	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B3000000</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B3000000</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B3000000">B3000000	&lt;C: #define B3000000 4109	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B4800</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B4800</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B4800">B4800	&lt;C: #define B4800 12	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CLOCAL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CLOCAL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="CLOCAL">CLOCAL	&lt;C: #define CLOCAL 2048	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B19200</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B19200</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B19200">B19200	&lt;C: #define B19200 14	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B500000</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B500000</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B500000">B500000	&lt;C: #define B500000 4101	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VWERASE</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VWERASE</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VWERASE">VWERASE	&lt;C: #define VWERASE 14	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ECHOE</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ECHOE</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="ECHOE">ECHOE	&lt;C: #define ECHOE 16	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IXOFF</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IXOFF</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="IXOFF">IXOFF	&lt;C: #define IXOFF 4096	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_flushRXTX:">RS232_flushRXTX: arg	&lt;C: void RS232_flushRXTX(int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IGNPAR</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IGNPAR</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="IGNPAR">IGNPAR	&lt;C: #define IGNPAR 4	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B50</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B50</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B50">B50	&lt;C: #define B50 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IXANY</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IXANY</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="IXANY">IXANY	&lt;C: #define IXANY 2048	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B600</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B600</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B600">B600	&lt;C: #define B600 8	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>PARENB</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>PARENB</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="PARENB">PARENB	&lt;C: #define PARENB 256	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="flushBuf:with:with:with:">flushBuf: buf with: size with: cport_nr with: bdrate	&lt;C: int flushBuf(char * buf, int size, int cport_nr, int bdrate)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CSTOPB</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CSTOPB</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="CSTOPB">CSTOPB	&lt;C: #define CSTOPB 64	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B300</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B300</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B300">B300	&lt;C: #define B300 7	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>_HAVE_STRUCT_TERMIOS_C_ISPEED</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>_HAVE_STRUCT_TERMIOS_C_ISPEED</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="_HAVE_STRUCT_TERMIOS_C_ISPEED">_HAVE_STRUCT_TERMIOS_C_ISPEED	&lt;C: #define _HAVE_STRUCT_TERMIOS_C_ISPEED 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IEXTEN</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IEXTEN</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="IEXTEN">IEXTEN	&lt;C: #define IEXTEN 32768	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_enableDTR:">RS232_enableDTR: arg	&lt;C: void RS232_enableDTR(int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VT0</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VT0</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VT0">VT0	&lt;C: #define VT0 0	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCSADRAIN</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCSADRAIN</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="TCSADRAIN">TCSADRAIN	&lt;C: #define TCSADRAIN 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B460800</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B460800</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B460800">B460800	&lt;C: #define B460800 4100	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B3500000</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B3500000</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B3500000">B3500000	&lt;C: #define B3500000 4110	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B150</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B150</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B150">B150	&lt;C: #define B150 5	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B57600</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B57600</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B57600">B57600	&lt;C: #define B57600 4097	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_enableRTS:">RS232_enableRTS: arg	&lt;C: void RS232_enableRTS(int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OLCUC</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OLCUC</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="OLCUC">OLCUC	&lt;C: #define OLCUC 2	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="__LINE__">__LINE__	&lt;C: #define __LINE__ 0	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ICANON</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ICANON</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="ICANON">ICANON	&lt;C: #define ICANON 2	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CS7</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CS7</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="CS7">CS7	&lt;C: #define CS7 32	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B1200</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B1200</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B1200">B1200	&lt;C: #define B1200 9	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VTDLY</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VTDLY</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VTDLY">VTDLY	&lt;C: #define VTDLY 16384	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OPOST</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OPOST</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="OPOST">OPOST	&lt;C: #define OPOST 1	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_cputs:with:">RS232_cputs: arg1 with: arg2	&lt;C: void RS232_cputs(int, const char * )&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_flushRX:">RS232_flushRX: arg	&lt;C: void RS232_flushRX(int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VEOF</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VEOF</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VEOF">VEOF	&lt;C: #define VEOF 4	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_flushTX:">RS232_flushTX: arg	&lt;C: void RS232_flushTX(int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_IsDSREnabled:">RS232_IsDSREnabled: arg	&lt;C: int RS232_IsDSREnabled(int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>HUPCL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>HUPCL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="HUPCL">HUPCL	&lt;C: #define HUPCL 1024	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VMIN</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VMIN</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VMIN">VMIN	&lt;C: #define VMIN 6	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCION</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCION</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="TCION">TCION	&lt;C: #define TCION 3	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_CloseComport:">RS232_CloseComport: arg	&lt;C: void RS232_CloseComport(int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IXON</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IXON</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="IXON">IXON	&lt;C: #define IXON 1024	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>variables</category><body package="PickCell" selector="myMode:">myMode: aValue	&lt;C: char * myMode&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B1000000</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B1000000</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B1000000">B1000000	&lt;C: #define B1000000 4104	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IUCLC</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IUCLC</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="IUCLC">IUCLC	&lt;C: #define IUCLC 512	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_disableRTS:">RS232_disableRTS: arg	&lt;C: void RS232_disableRTS(int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VEOL2</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VEOL2</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VEOL2">VEOL2	&lt;C: #define VEOL2 16	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B2000000</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B2000000</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B2000000">B2000000	&lt;C: #define B2000000 4107	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="__FILE__">__FILE__	&lt;C: #define __FILE__ /Users/monmac/Documents/SerialPort/usb.h	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>_IOT_termios</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>_IOT_termios</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="_IOT_termios">_IOT_termios	&lt;C: #define _IOT_termios _IOT(_IOTS(cflag_t),4,_IOTS(cc_t),NCCS,_IOTS(speed_t),2)	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_OpenComport:with:with:">RS232_OpenComport: arg1 with: arg2 with: arg3	&lt;C: int RS232_OpenComport(int, int, const char * )&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OFDEL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OFDEL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="OFDEL">OFDEL	&lt;C: #define OFDEL 128	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="readBuf:with:with:with:">readBuf: buf with: size with: cport_nr with: bdrate	&lt;C: int readBuf(char * buf, int size, int cport_nr, int bdrate)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B134</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B134</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B134">B134	&lt;C: #define B134 4	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OCRNL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OCRNL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="OCRNL">OCRNL	&lt;C: #define OCRNL 8	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B200</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B200</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B200">B200	&lt;C: #define B200 6	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CS5</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CS5</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="CS5">CS5	&lt;C: #define CS5 0	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VQUIT</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VQUIT</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VQUIT">VQUIT	&lt;C: #define VQUIT 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CREAD</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CREAD</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="CREAD">CREAD	&lt;C: #define CREAD 128	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OFILL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OFILL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="OFILL">OFILL	&lt;C: #define OFILL 64	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="setReadBuf:with:with:with:">setReadBuf: buf with: size with: cport_nr with: bdrate	&lt;C: int setReadBuf(char * buf, int size, int cport_nr, int bdrate)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B9600</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B9600</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B9600">B9600	&lt;C: #define B9600 13	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VSTART</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VSTART</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VSTART">VSTART	&lt;C: #define VSTART 8	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VTIME</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VTIME</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VTIME">VTIME	&lt;C: #define VTIME 5	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCOOFF</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCOOFF</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="TCOOFF">TCOOFF	&lt;C: #define TCOOFF 0	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B230400</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B230400</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B230400">B230400	&lt;C: #define B230400 4099	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_disableDTR:">RS232_disableDTR: arg	&lt;C: void RS232_disableDTR(int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ONLCR</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ONLCR</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="ONLCR">ONLCR	&lt;C: #define ONLCR 4	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCOFLUSH</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCOFLUSH</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="TCOFLUSH">TCOFLUSH	&lt;C: #define TCOFLUSH 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VDISCARD</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VDISCARD</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VDISCARD">VDISCARD	&lt;C: #define VDISCARD 13	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VSTOP</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VSTOP</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VSTOP">VSTOP	&lt;C: #define VSTOP 9	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ONOCR</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ONOCR</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="ONOCR">ONOCR	&lt;C: #define ONOCR 16	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IGNBRK</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>IGNBRK</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="IGNBRK">IGNBRK	&lt;C: #define IGNBRK 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B576000</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B576000</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B576000">B576000	&lt;C: #define B576000 4102	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B2500000</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B2500000</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B2500000">B2500000	&lt;C: #define B2500000 4108	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_IsDCDEnabled:">RS232_IsDCDEnabled: arg	&lt;C: int RS232_IsDCDEnabled(int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B0</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B0</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B0">B0	&lt;C: #define B0 0	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B4000000</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B4000000</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B4000000">B4000000	&lt;C: #define B4000000 4111	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ECHOK</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ECHOK</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="ECHOK">ECHOK	&lt;C: #define ECHOK 32	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_SendByte:with:">RS232_SendByte: arg1 with: arg2	&lt;C: int RS232_SendByte(int, unsigned char)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VREPRINT</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>VREPRINT</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="VREPRINT">VREPRINT	&lt;C: #define VREPRINT 12	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B921600</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B921600</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B921600">B921600	&lt;C: #define B921600 4103	&gt;</body></methods><methods><class-id>USBSerial</class-id> <category>procedures</category><body package="PickCell" selector="RS232_SendBuf:with:with:">RS232_SendBuf: arg1 with: arg2 with: arg3	&lt;C: int RS232_SendBuf(int, unsigned char * , int)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ECHO</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ECHO</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="ECHO">ECHO	&lt;C: #define ECHO 8	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B1500000</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>B1500000</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="B1500000">B1500000	&lt;C: #define B1500000 4106	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCIOFLUSH</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TCIOFLUSH</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="TCIOFLUSH">TCIOFLUSH	&lt;C: #define TCIOFLUSH 2	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TOSTOP</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TOSTOP</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>defines</category><body package="PickCell" selector="TOSTOP">TOSTOP	&lt;C: #define TOSTOP 256	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>gotSearch</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>gotSearch</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="gotSearch">gotSearch	&lt;C: #define gotSearch 2	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NILL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NILL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="NILL">NILL	&lt;C: #define NILL -1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NODE_NUMBER</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>NODE_NUMBER</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="NODE_NUMBER">NODE_NUMBER	&lt;C: #define NODE_NUMBER 868	&gt;</body></methods><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="__TIME__">__TIME__	&lt;C: #define __TIME__ "6:30:10 PM"	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MAX_FANOUT</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MAX_FANOUT</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="MAX_FANOUT">MAX_FANOUT	&lt;C: #define MAX_FANOUT 8	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LIMIT_SENSIBILITY_RECEIVER</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LIMIT_SENSIBILITY_RECEIVER</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="LIMIT_SENSIBILITY_RECEIVER">LIMIT_SENSIBILITY_RECEIVER	&lt;C: #define LIMIT_SENSIBILITY_RECEIVER -139	&gt;</body></methods><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="__STDC__">__STDC__	&lt;C: #define __STDC__ 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>WAVE_LENGTH</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>WAVE_LENGTH</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="WAVE_LENGTH">WAVE_LENGTH	&lt;C: #define WAVE_LENGTH 0.34562211981567d	&gt;</body></methods><methods><class-id>CovVW</class-id> <category>procedures</category><body package="PickCell" selector="covVW:with:with:with:">covVW: cov with: x with: y with: numTurns	&lt;C: void covVW(covStruct * cov, int x, int y, int numTurns)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CUDAVW_H</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CUDAVW_H</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="CUDAVW_H">CUDAVW_H	&lt;C: #define CUDAVW_H 	&gt;</body></methods><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="__DATE__">__DATE__	&lt;C: #define __DATE__ "July 9, 2017"	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TILE_SIZE</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TILE_SIZE</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="TILE_SIZE">TILE_SIZE	&lt;C: #define TILE_SIZE 256	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>forwardedSearch</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>forwardedSearch</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="forwardedSearch">forwardedSearch	&lt;C: #define forwardedSearch 3	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>FADING_MARGIN</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>FADING_MARGIN</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="FADING_MARGIN">FADING_MARGIN	&lt;C: #define FADING_MARGIN -30.0d 	&gt;</body></methods><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="__FILE__">__FILE__	&lt;C: #define __FILE__ /home/tuyen/VW811/covVWOpt/covVW.h	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>DOUBLE_PI</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>DOUBLE_PI</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="DOUBLE_PI">DOUBLE_PI	&lt;C: #define DOUBLE_PI 3.1415926535898d	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TRANSMIT_POWER</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TRANSMIT_POWER</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="TRANSMIT_POWER">TRANSMIT_POWER	&lt;C: #define TRANSMIT_POWER 20	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>waitSearch</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>waitSearch</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="waitSearch">waitSearch	&lt;C: #define waitSearch 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OTHER_LOSS</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OTHER_LOSS</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="OTHER_LOSS">OTHER_LOSS	&lt;C: #define OTHER_LOSS -27.0d	&gt;</body></methods><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="__LINE__">__LINE__	&lt;C: #define __LINE__ 0	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MAX_MOBILE</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MAX_MOBILE</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="MAX_MOBILE">MAX_MOBILE	&lt;C: #define MAX_MOBILE 3	&gt;</body></methods><methods><class-id>CovVW</class-id> <category>defines</category><body package="PickCell" selector="DYNAMIC_CHAN">DYNAMIC_CHAN	&lt;C: #define DYNAMIC_CHAN 25	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="NODE_NUMBER">NODE_NUMBER	&lt;C: #define NODE_NUMBER 48618	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="__STDC__">__STDC__	&lt;C: #define __STDC__ 1	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="FADING_MARGIN">FADING_MARGIN	&lt;C: #define FADING_MARGIN -30.0d 	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="__FILE__">__FILE__	&lt;C: #define __FILE__ /home/serieux/tuyen/VW82/trevezel/trevezel.h	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="waitSearch">waitSearch	&lt;C: #define waitSearch 1	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="__LINE__">__LINE__	&lt;C: #define __LINE__ 0	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="TILE_SIZE">TILE_SIZE	&lt;C: #define TILE_SIZE 256	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>procedures</category><body package="PickCell" selector="covVW:with:with:with:">covVW: cov with: x with: y with: numTurns	&lt;C: void covVW(covStruct * cov, int x, int y, int numTurns)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="forwardedSearch">forwardedSearch	&lt;C: #define forwardedSearch 3	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="MAX_FANOUT">MAX_FANOUT	&lt;C: #define MAX_FANOUT 8	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="NILL">NILL	&lt;C: #define NILL -1	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="gotSearch">gotSearch	&lt;C: #define gotSearch 2	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="__TIME__">__TIME__	&lt;C: #define __TIME__ "5:54:26 PM"	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="TRANSMIT_POWER">TRANSMIT_POWER	&lt;C: #define TRANSMIT_POWER 20	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="__DATE__">__DATE__	&lt;C: #define __DATE__ "June 16, 2017"	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="CUDAVW_H">CUDAVW_H	&lt;C: #define CUDAVW_H 	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="LIMIT_SENSIBILITY_RECEIVER">LIMIT_SENSIBILITY_RECEIVER	&lt;C: #define LIMIT_SENSIBILITY_RECEIVER -139	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="OTHER_LOSS">OTHER_LOSS	&lt;C: #define OTHER_LOSS -27.0d	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="WAVE_LENGTH">WAVE_LENGTH	&lt;C: #define WAVE_LENGTH 0.34562211981567d	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="DYNAMIC_CHAN">DYNAMIC_CHAN	&lt;C: #define DYNAMIC_CHAN 25	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="DOUBLE_PI">DOUBLE_PI	&lt;C: #define DOUBLE_PI 3.1415926535898d	&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>defines</category><body package="PickCell" selector="MAX_MOBILE">MAX_MOBILE	&lt;C: #define MAX_MOBILE 3	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_ARC</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_ARC</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_ARC">SHPT_ARC	&lt;C: #define SHPT_ARC 3	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="__FILE__">__FILE__	&lt;C: #define __FILE__ /export/users/wsn/Herry/legall/shapebuild/lib.h	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>procedures</category><body package="MapAccess" selector="SHPReadObject:with:">SHPReadObject: psSHP with: hEntity	&lt;C: SHPObject *  SHPReadObject(SHPHandle psSHP, int hEntity)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_RING</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_RING</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPP_RING">SHPP_RING	&lt;C: #define SHPP_RING 5	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_MULTIPOINT</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_MULTIPOINT</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_MULTIPOINT">SHPT_MULTIPOINT	&lt;C: #define SHPT_MULTIPOINT 8	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="__DATE__">__DATE__	&lt;C: #define __DATE__ "21 mars 2013"	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POINTZ</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POINTZ</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_POINTZ">SHPT_POINTZ	&lt;C: #define SHPT_POINTZ 11	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>old procedures</category><body package="MapAccess" selector="test:">test: pszFilename	&lt;C: tabSHPObject *  test(char * pszFilename)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POLYGONM</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POLYGONM</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_POLYGONM">SHPT_POLYGONM	&lt;C: #define SHPT_POLYGONM 25	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>procedures</category><body package="MapAccess" selector="SHPDestroyObject:">SHPDestroyObject: psObject	&lt;C: void SHPDestroyObject(SHPObject * psObject)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_TRISTRIP</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_TRISTRIP</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPP_TRISTRIP">SHPP_TRISTRIP	&lt;C: #define SHPP_TRISTRIP 0	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="__LINE__">__LINE__	&lt;C: #define __LINE__ 0	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POLYGON</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POLYGON</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_POLYGON">SHPT_POLYGON	&lt;C: #define SHPT_POLYGON 5	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_TRIFAN</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_TRIFAN</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPP_TRIFAN">SHPP_TRIFAN	&lt;C: #define SHPP_TRIFAN 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_ARCZ</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_ARCZ</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_ARCZ">SHPT_ARCZ	&lt;C: #define SHPT_ARCZ 13	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_OUTERRING</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_OUTERRING</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPP_OUTERRING">SHPP_OUTERRING	&lt;C: #define SHPP_OUTERRING 2	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_MULTIPOINTM</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_MULTIPOINTM</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_MULTIPOINTM">SHPT_MULTIPOINTM	&lt;C: #define SHPT_MULTIPOINTM 28	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POINTM</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POINTM</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_POINTM">SHPT_POINTM	&lt;C: #define SHPT_POINTM 21	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>procedures</category><body package="MapAccess" selector="SHPClose:">SHPClose: hSHP	&lt;C: void SHPClose(SHPHandle hSHP)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>ShapefileReader</class-id> <category>old procedures</category><body package="MapAccess" selector="DeleteSHP:">DeleteSHP: tabSHP	&lt;C: void DeleteSHP(SHPObject * * tabSHP)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_MULTIPOINTZ</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_MULTIPOINTZ</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_MULTIPOINTZ">SHPT_MULTIPOINTZ	&lt;C: #define SHPT_MULTIPOINTZ 18	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POLYGONZ</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POLYGONZ</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_POLYGONZ">SHPT_POLYGONZ	&lt;C: #define SHPT_POLYGONZ 15	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_ARCM</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_ARCM</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_ARCM">SHPT_ARCM	&lt;C: #define SHPT_ARCM 23	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_NULL</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_NULL</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_NULL">SHPT_NULL	&lt;C: #define SHPT_NULL 0	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>procedures</category><body package="MapAccess" selector="SHPOpen:with:">SHPOpen: pszShapeFile with: pszAccess	&lt;C: SHPHandle SHPOpen(const char * pszShapeFile, const char * pszAccess)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>ShapefileReader</class-id> <category>procedures</category><body package="MapAccess" selector="SHPGetInfo:with:with:with:with:">SHPGetInfo: hSHP with: pnEntities with: pnShapeType with: padfMinBound with: padfMaxBound	&lt;C: void SHPGetInfo(SHPHandle hSHP, int * pnEntities, int * pnShapeType, double * padfMinBound, double * padfMaxBound)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="__TIME__">__TIME__	&lt;C: #define __TIME__ "17:35:19"	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>old procedures</category><body package="MapAccess" selector="allSHP:">allSHP: pszFilename	&lt;C: SHPObject * *  allSHP(char * pszFilename)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>ShapefileReader</class-id> <category>old procedures</category><body package="MapAccess" selector="dumpSHP:">dumpSHP: pszFilename	&lt;C: SHPObject * *  dumpSHP(char * pszFilename)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POINT</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_POINT</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_POINT">SHPT_POINT	&lt;C: #define SHPT_POINT 1	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>old procedures</category><body package="MapAccess" selector="SHPSize:">SHPSize: pszFilename	&lt;C: int SHPSize(char * pszFilename)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_FIRSTRING</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_FIRSTRING</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPP_FIRSTRING">SHPP_FIRSTRING	&lt;C: #define SHPP_FIRSTRING 4	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_INNERRING</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPP_INNERRING</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPP_INNERRING">SHPP_INNERRING	&lt;C: #define SHPP_INNERRING 3	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="__STDC__">__STDC__	&lt;C: #define __STDC__ 1	&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_MULTIPATCH</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPT_MULTIPATCH</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>defines</category><body package="MapAccess" selector="SHPT_MULTIPATCH">SHPT_MULTIPATCH	&lt;C: #define SHPT_MULTIPATCH 31	&gt;</body></methods><methods><class-id>ShapefileReader</class-id> <category>old procedures</category><body package="MapAccess" selector="oneSHP:with:">oneSHP: pszFilename with: i	&lt;C: SHPObject *  oneSHP(char * pszFilename, int i)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>termios</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>termios</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>structs</category><body package="PickCell" selector="termios">termios	&lt;C: struct termios {			tcflag_t c_iflag, c_oflag, c_cflag, c_lflag;			cc_t c_line;			cc_t c_cc[32];			speed_t c_ispeed, c_ospeed;		}&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>speed_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>speed_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>types</category><body package="PickCell" selector="speed_t">speed_t	&lt;C: typedef unsigned int speed_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Char</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Char</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>structs</category><body package="PickCell" selector="Char">Char	&lt;C: struct Char {			char ch;		}&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tcflag_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tcflag_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>types</category><body package="PickCell" selector="tcflag_t">tcflag_t	&lt;C: typedef unsigned int tcflag_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cc_t</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cc_t</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>USBSerial</class-id> <category>types</category><body package="PickCell" selector="cc_t">cc_t	&lt;C: typedef unsigned char cc_t&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>s_canaux</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>s_canaux</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>structs</category><body package="PickCell" selector="s_canaux">s_canaux	&lt;C: struct s_canaux {			int nbOut, nbIn, nbDyn;			mapped write[8];			mapped read[8];			mapped writeDyn[25];			mapped readDyn[25];		}&gt;</body></methods><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="NodeState">NodeState	&lt;C: typedef struct {			double power, delta;			int visible, visited, wasRoot, NumberNeighbour, NumberVisible;			CellPosition cellPosition;			double slope;			int myRoot;			Com com;		} NodeState&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Direction</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Direction</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="Direction">Direction	&lt;C: typedef struct {			int x, y;		} Direction&gt;</body></methods><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="canaux">canaux	&lt;C: typedef struct s_canaux canaux&gt;</body></methods><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="CellImage">CellImage	&lt;C: typedef struct {			struct ImageExtent extent;			Depth24ByteArray pixelArray;		} CellImage&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>sfSen</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>sfSen</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="sfSen">sfSen	&lt;C: typedef struct {			int SF;			float rSen;		} sfSen&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ImageExtent</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ImageExtent</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>structs</category><body package="PickCell" selector="ImageExtent">ImageExtent	&lt;C: struct ImageExtent {			int width, height;		}&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>covStruct</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>covStruct</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="covStruct">covStruct	&lt;C: typedef struct {			int x, y;			float longitude, latitude, elevation, power;			int visible, BW, CR, SF;		} covStruct&gt;</body></methods><methods><class-id>CovVW</class-id> <category>structs</category><body package="PickCell" selector="s_mapped">s_mapped	&lt;C: struct s_mapped {			int node, canal;			Direction direction;		}&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>node_param</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>node_param</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="node_param">node_param	&lt;C: typedef struct {			int x, y, range;		} node_param&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Depth24ByteArray</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Depth24ByteArray</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="Depth24ByteArray">Depth24ByteArray	&lt;C: typedef struct RGBPixel Depth24ByteArray[625]&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CellArray</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CellArray</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="CellArray">CellArray	&lt;C: typedef struct {			CellPosition position;			CellImage image;		} CellArray&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Com</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Com</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="Com">Com	&lt;C: typedef struct {			int BW, CR, SF;		} Com&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CellPosition</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CellPosition</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="CellPosition">CellPosition	&lt;C: typedef struct CellPositions CellPosition&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CellPositions</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>CellPositions</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>structs</category><body package="PickCell" selector="CellPositions">CellPositions	&lt;C: struct CellPositions {			int x, y;			double longitude, latitude, elevation;		}&gt;</body></methods><methods><class-id>CovVW</class-id> <category>types</category><body package="PickCell" selector="mapped">mapped	&lt;C: typedef struct s_mapped mapped&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>RGBPixel</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>RGBPixel</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>CovVW</class-id> <category>structs</category><body package="PickCell" selector="RGBPixel">RGBPixel	&lt;C: struct RGBPixel {			unsigned char red, green, blue;		}&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>types</category><body package="PickCell" selector="covStruct">covStruct	&lt;C: typedef struct {			int x, y;			float longitude, latitude, elevation, power;			int visible;		} covStruct&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>types</category><body package="PickCell" selector="mapped">mapped	&lt;C: typedef struct s_mapped mapped&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>types</category><body package="PickCell" selector="Direction">Direction	&lt;C: typedef struct {			int x, y;		} Direction&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>structs</category><body package="PickCell" selector="s_canaux">s_canaux	&lt;C: struct s_canaux {			int nbOut, nbIn, nbDyn;			mapped write[8];			mapped read[8];			mapped writeDyn[25];			mapped readDyn[25];		}&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>types</category><body package="PickCell" selector="CellImage">CellImage	&lt;C: typedef struct {			struct ImageExtent extent;			Depth24ByteArray pixelArray;		} CellImage&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>structs</category><body package="PickCell" selector="CellPositions">CellPositions	&lt;C: struct CellPositions {			int x, y;			double longitude, latitude, elevation;		}&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>structs</category><body package="PickCell" selector="ImageExtent">ImageExtent	&lt;C: struct ImageExtent {			int width, height;		}&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>types</category><body package="PickCell" selector="node_param">node_param	&lt;C: typedef struct {			int x, y, range;		} node_param&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>types</category><body package="PickCell" selector="CellArray">CellArray	&lt;C: typedef struct {			CellPosition position;			CellImage image;		} CellArray&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>structs</category><body package="PickCell" selector="RGBPixel">RGBPixel	&lt;C: struct RGBPixel {			unsigned char red, green, blue;		}&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>types</category><body package="PickCell" selector="CellPosition">CellPosition	&lt;C: typedef struct CellPositions CellPosition&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>types</category><body package="PickCell" selector="canaux">canaux	&lt;C: typedef struct s_canaux canaux&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>types</category><body package="PickCell" selector="NodeState">NodeState	&lt;C: typedef struct {			double power, delta;			int visible, visited, wasRoot, NumberNeighbour, NumberVisible;			CellPosition cellPosition;			double slope;			int myRoot;		} NodeState&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>structs</category><body package="PickCell" selector="s_mapped">s_mapped	&lt;C: struct s_mapped {			int node, canal;			Direction direction;		}&gt;</body></methods><methods><class-id>Trevezel</class-id> <category>types</category><body package="PickCell" selector="Depth24ByteArray">Depth24ByteArray	&lt;C: typedef struct RGBPixel Depth24ByteArray[25]&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SAHooks</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SAHooks</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>types</category><body package="MapAccess" selector="SAHooks">SAHooks	&lt;C: typedef struct {			int *  (* FOpen)(const char * filename, const char * access);			unsigned long (* FRead)(void * p, unsigned long size, unsigned long nmemb, int * file);			unsigned long (* FWrite)(void * p, unsigned long size, unsigned long nmemb, int * file);			unsigned long (* FSeek)(int * file, unsigned long offset, int whence);			unsigned long (* FTell)(int * file);			int (* FFlush)(int * file);			int (* FClose)(int * file);			int (* Remove)(const char * filename);			void (* Error)(const char * message);			double (* Atof)(const char * str);		} SAHooks&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tabSHPObject</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tabSHPObject</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>types</category><body package="MapAccess" selector="tabSHPObject">tabSHPObject	&lt;C: typedef struct {			SHPObject * * tab;		} tabSHPObject&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPHandle</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPHandle</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>types</category><body package="MapAccess" selector="SHPHandle">SHPHandle	&lt;C: typedef SHPInfo * SHPHandle&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPInfo</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPInfo</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>types</category><body package="MapAccess" selector="SHPInfo">SHPInfo	&lt;C: typedef struct {			SAHooks sHooks;			int * fpSHP;			int * fpSHX;			int nShapeType;			unsigned int nFileSize;			int nRecords, nMaxRecords;			unsigned int * panRecOffset;			unsigned int * panRecSize;			double adBoundsMin[4];			double adBoundsMax[4];			int bUpdated;			unsigned char * pabyRec;			int nBufSize;		} SHPInfo&gt;</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPObject</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SHPObject</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>ShapefileReader</class-id> <category>types</category><body package="MapAccess" selector="SHPObject">SHPObject	&lt;C: typedef struct {			int nSHPType, nShapeId, nParts;			int * panPartStart;			int * panPartType;			int nVertices;			double * padfX;			double * padfY;			double * padfZ;			double * padfM;			double dfXMin, dfYMin, dfZMin, dfMMin, dfXMax, dfYMax, dfZMax, dfMMax;			int bMeasureIsUsed;		} SHPObject&gt;</body></methods><methods><class-id>AlgoDis.PickCellModel class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	^super new initialize</body></methods><methods><class-id>QuickTile class</class-id> <category>instance creation</category><body package="QuickMap" selector="x:y:zoom:">x: x y: y zoom: zoom	^(self new)		x: x;		y: y;		zoom: zoom;		yourself</body></methods><methods><class-id>QuickTileProxy class</class-id> <category>instance creation</category><body package="QuickMap" selector="googleApp">googleApp	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>QuickTileProxy class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	^self subclassResponsibility</body></methods><methods><class-id>QuickTileProxy class</class-id> <category>instance creation</category><body package="QuickMap" selector="&lt;=">&lt;= aClass	^self name &lt;= aClass name</body></methods><methods><class-id>QuickTileProxy class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	^self subclassResponsibility</body></methods><methods><class-id>QuickTileProxy class</class-id> <category>instance creation</category><body package="QuickMap" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>QuickTileProxy class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	^self subclassResponsibility</body></methods><methods><class-id>QuickTileProxyWSN class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	^19</body></methods><methods><class-id>QuickTileProxyWSN class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	^6</body></methods><methods><class-id>QuickTileProxyWSN class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	^'Open Street Map'</body></methods><methods><class-id>AlgoDis.PickCellDBAccess class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.PickCellDBAccess class</class-id> <category>testing</category><body package="PickCell" selector="test1">test1	| conn sess |	conn := PostgresSocketConnection connectionForVietnam.	conn connect.	"Run a Simple Query (just a string--no binding)."	sess := conn getSession.	conn disconnect</body></methods><methods><class-id>AlgoDis.BGPickCell class</class-id> <category>windowSpec</category><body package="PickCell" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: #(#{Kernel.UserMessage} #key: #BGPickCellData #defaultString: 'cell data' #catalogID: #PickCell) 			#bounds: #(#Rectangle 306 282 621 533 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ChartViewSpec 					#layout: #(#LayoutFrame 13 0 4 0 -5 1 -6 1 ) 					#model: #uneSerie 					#chartType: #BG_LineChartView 					#orientation: #vertical 					#dataSeries: 					#(#ChartDataSpec 						#series: #(							#(#ChartDataSetSpec 								#aspect: #nbElements 								#name: 'nb elements' 								#look: 								#(#ChartElementLookSpec 									#lineWidth: 3 ) ) 							#(#ChartDataSetSpec 								#aspect: #xyzRef 								#isData: false 								#name: 'x y z' ) 							#(#ChartDataSetSpec 								#aspect: #code								#name: 'Code' 								#look: 								#(#ChartElementLookSpec 									#foregroundColor: #(#ColorValue #blue ) 									#backgroundColor: #(#ColorValue #blue ) 									#lineType: #dashed 									#lineWidth: 3 ) ) ) ) 					#xAxis: 					#(#ChartingAxisSpec 						#sectionMarkAt: #divisionMarks ) 					#yAxis: 					#(#ChartingValueAxisSpec 						#scale: 						#(#ChartingScaleSpec 							#invert: true ) ) 					#legendPosition: 6 ) ) ) )</body></methods><methods><class-id>USBSerial class</class-id> <category>testing</category><body package="PickCell" selector="testSetupSample:">testSetupSample: port	| usb |	usb := self setupSample: 27.	usb close</body></methods><methods><class-id>USBSerial class</class-id> <category>testing</category><body package="PickCell" selector="test3">test3	"        const int size = 4095;        unsigned char character[size +1];        int cport = 27;        int bdrate = 9600;        int numChar = 0;        while (1)        {                numChar = readBuf(character, size, cport, bdrate);                printf("	"Number of characters: %i\n"	", numChar);                printf("	"%s"	", (char *)character);                usleep(1000000);        }"	| usb bufferPointer numChar ws buffer |	usb := self new.	usb initialize.	Transcript show: Time now printString ; cr.	buffer := String new: 4096.	bufferPointer := buffer gcCopyToHeap.	10 timesRepeat: 			["bufferPointer := CIntegerType char gcMalloc: 4096."			numChar := usb						readBuf: bufferPointer						with: 4095						with: 27						with: 9600.			ws := String new writeStream.			0 to: numChar - 1				do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].			Transcript				show: numChar printString;				tab;				show: ws contents.			(Delay forSeconds: 1) wait]</body></methods><methods><class-id>USBSerial class</class-id> <category>testing</category><body package="PickCell" selector="test6">test6	| usb bufferPointer numChar ws buffer portOk points |	self unloadLibraries.	usb := self new.	usb initialize.	points := OrderedCollection new.	usb RS232_CloseComport: 27.	Transcript		show: Time now printString;		cr.	buffer := String new: 4096.	bufferPointer := buffer gcCopyToHeap.	portOk := usb				setReadBuf: bufferPointer				with: 4095				with: 27				with: 38400.	usb		flushBuf: bufferPointer		with: 4095		with: 27		with: 38400.	portOk = 0		ifFalse: 			[Transcript				show: 'open error';				cr]		ifTrue: 			[3 timesRepeat: 					["bufferPointer := CIntegerType char gcMalloc: 4096."					numChar := usb								readBuf: bufferPointer								with: 4095								with: 27								with: 38400.					ws := String new writeStream.					0 to: numChar - 1						do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].					Transcript						show: numChar printString;						tab;						show: ws contents.					points add: (TrackPoint from: ws contents).					(Delay forSeconds: 1) wait].			usb RS232_CloseComport: 27].	self halt.	^points</body></methods><methods><class-id>USBSerial class</class-id> <category>testing</category><body package="PickCell" selector="getGPSDataTemp">getGPSDataTemp	| usb bufferPointer numChar ws buffer portOk points |	self unloadLibraries.	usb := self new.	usb initialize.	points := OrderedCollection new.	usb RS232_CloseComport: 27.	Transcript		show: Time now printString;		cr.	buffer := String new: 4096.	bufferPointer := buffer gcCopyToHeap.	portOk := usb				setReadBuf: bufferPointer				with: 4095				with: 27				with: 38400.	usb		flushBuf: bufferPointer		with: 4095		with: 27		with: 38400.	portOk = 0		ifFalse: 			[Transcript				show: 'open error';				cr]		ifTrue: 			[1 timesRepeat: 					["bufferPointer := CIntegerType char gcMalloc: 4096."					numChar := usb								readBuf: bufferPointer								with: 4095								with: 27								with: 38400.					ws := String new writeStream.					0 to: numChar - 1						do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].					Transcript						show: numChar printString;						tab;						show: ws contents.					points add: (TrackPoint from: ws contents).					(Delay forSeconds: 1) wait].			usb RS232_CloseComport: 27].	^points</body></methods><methods><class-id>USBSerial class</class-id> <category>testing</category><body package="PickCell" selector="test4">test4	"        const int size = 4095;        unsigned char character[size +1];        int cport = 27;        int bdrate = 9600;        int numChar = 0;        while (1)        {                numChar = readBuf(character, size, cport, bdrate);                printf("	"Number of characters: %i\n"	", numChar);                printf("	"%s"	", (char *)character);                usleep(1000000);        }"	| usb bufferPointer numChar ws buffer portOk |	self unloadLibraries.	usb := self new.	usb initialize.	usb RS232_CloseComport: 27.	Transcript		show: Time now printString;		cr.	buffer := String new: 4096.	bufferPointer := buffer gcCopyToHeap.	portOk := usb				setReadBuf: bufferPointer				with: 4095				with: 27				with: 9600.	portOk = 0		ifFalse: 			[Transcript				show: 'open error';				cr]		ifTrue: 			[10 timesRepeat: 					["bufferPointer := CIntegerType char gcMalloc: 4096."					numChar := usb								readBuf: bufferPointer								with: 4095								with: 27								with: 9600.					ws := String new writeStream.					0 to: numChar - 1						do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].					Transcript						show: numChar printString;						tab;						show: ws contents.					(Delay forSeconds: 1) wait].			usb RS232_CloseComport: 27]</body></methods><methods><class-id>USBSerial class</class-id> <category>testing</category><body package="PickCell" selector="test5">test5	"        const int size = 4095;        unsigned char character[size +1];        int cport = 27;        int bdrate = 38400;        int numChar = 0;        while (1)        {                numChar = readBuf(character, size, cport, bdrate);                printf("	"Number of characters: %i\n"	", numChar);                printf("	"%s"	", (char *)character);                usleep(1000000);        }"	| usb bufferPointer numChar ws buffer portOk flushOk |	self unloadLibraries.	usb := self new.	usb initialize.	usb RS232_CloseComport: 27.	Transcript		show: Time now printString;		cr.	buffer := String new: 4096.	bufferPointer := buffer gcCopyToHeap.	portOk := usb				setReadBuf: bufferPointer				with: 4095				with: 27				with: 38400.	flushOk := usb				flushBuf: bufferPointer				with: 4095				with: 27				with: 38400.	portOk = 0		ifFalse: 			[Transcript				show: 'open error';				cr]		ifTrue: 			[100 timesRepeat: 					["bufferPointer := CIntegerType char gcMalloc: 4096."					numChar := usb								readBuf: bufferPointer								with: 4095								with: 27								with: 38400.					ws := String new writeStream.					0 to: numChar - 1						do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].					Transcript						show: numChar printString;						tab;						show: ws contents.					(Delay forSeconds: 1) wait].			usb RS232_CloseComport: 27]</body></methods><methods><class-id>USBSerial class</class-id> <category>testing</category><body package="PickCell" selector="test7">test7	| usb bufferPointer numChar ws buffer portOk flushOk points |	self unloadLibraries.	usb := self new.	usb initialize.	points := OrderedCollection new.	usb RS232_CloseComport: 27.	Transcript		show: Time now printString;		cr.	buffer := String new: 4096.	bufferPointer := buffer gcCopyToHeap.	portOk := usb				setReadBuf: bufferPointer				with: 4095				with: 27				with: 38400.	flushOk := usb				flushBuf: bufferPointer				with: 4095				with: 27				with: 38400.	portOk = 0		ifFalse: 			[Transcript				show: 'open error';				cr]		ifTrue: 			[10 timesRepeat: 					["bufferPointer := CIntegerType char gcMalloc: 4096."					numChar := usb								readBuf: bufferPointer								with: 4095								with: 27								with: 38400.					ws := String new writeStream.					0 to: numChar - 1						do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].					Transcript						show: numChar printString;						tab;						show: ws contents.					points add: (TrackPoint from: ws contents).					(Delay forSeconds: 1) wait].			usb RS232_CloseComport: 27].		self halt.self laVue controller addGPSPoints: points</body></methods><methods><class-id>USBSerial class</class-id> <category>testing</category><body package="PickCell" selector="test2">test2	| usb buffer |	usb := self new.	buffer := CIntegerType char gcMalloc: 4096.	usb		readBuf: buffer		with: 4095		with: 27		with: 115200.	Transcript		show: buffer contents printString;		cr</body></methods><methods><class-id>USBSerial class</class-id> <category>testing</category><body package="PickCell" selector="setupSample:">setupSample: port	| usb bufferPointer buffer portOk |	self unloadLibraries.	usb := self new.	usb initialize.	usb RS232_CloseComport: port.	buffer := String new: 4096.	bufferPointer := buffer gcCopyToHeap.	portOk := usb				setReadBuf: bufferPointer				with: 4095				with: 27				with: 38400.	usb				flushBuf: bufferPointer				with: 4095				with: 27				with: 38400.	portOk = 0 ifFalse: [^nil] ifTrue: [^usb]</body></methods><methods><class-id>USBSerial class</class-id> <category>testing</category><body package="PickCell" selector="test1">test1	| usb |	usb := self new.	usb initialize.	usb open</body></methods><methods><class-id>AlgoDis.OpenLayerHtml class</class-id> <category>testing</category><body package="PickCell" selector="testHtml">testHtml	" OpenLayerHtml testHtml "	| myOLH myStream |	myOLH := self				lat: 34.070				lon: -118.73				zoom: 15				urlFileName: 'myosmfile.osm'.	myStream := String new writeStream.	myOLH printHtmlOn: myStream.	^myStream contents</body></methods><methods><class-id>AlgoDis.OpenLayerHtml class</class-id> <category>instance creation</category><body package="PickCell" selector="lat:lon:zoom:">lat: lat lon: lon zoom: zoom	| olhm |	olhm := self new.	olhm		lat: lat;		lon: lon;		zoom: zoom.	^olhm</body></methods><methods><class-id>AlgoDis.OpenLayerHtml class</class-id> <category>testing</category><body package="PickCell" selector="testHtmlFileFor:">testHtmlFileFor: myOLH	" OpenLayerHtml testHtmlFile "	 		myOLH printHtmlOnFileName: 'openLayersTest.html'</body></methods><methods><class-id>AlgoDis.OpenLayerHtml class</class-id> <category>testing</category><body package="PickCell" selector="testHtmlFile">testHtmlFile	" OpenLayerHtml testHtmlFile "	| myOLH |	myOLH := self				lat: 34.070				lon: -118.73				zoom: 15				urlFileName: 'myosmfile.osm'.	myOLH printHtmlOnFileName: 'openLayersTest.html'</body></methods><methods><class-id>AlgoDis.OpenLayerHtml class</class-id> <category>testing</category><body package="PickCell" selector="testHtmlFileFor:withOsmText:">testHtmlFileFor: myOLH withOsmText: myText	" OpenLayerHtml testHtmlFile "	myOLH printHtmlOnFileName: 'openLayersTest.html'</body></methods><methods><class-id>AlgoDis.OpenLayerHtml class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.OpenLayerHtml class</class-id> <category>testing</category><body package="PickCell" selector="testOsm">testOsm	" OpenLayerHtml testOsm "	| text |text := '&lt;?xml version=''1.0'' encoding=''UTF-8''?&gt;&lt;osm version=''0.6'' generator=''JOSM''&gt;  &lt;bounds minlat=''34.0662408634219'' minlon=''-118.736715316772'' maxlat=''34.0731374116421'' maxlon=''-118.73122215271'' origin=''OpenStreetMap server'' /&gt;  &lt;node id=''358802885'' timestamp=''2009-03-11T06:30:08Z'' user=''yellowbkpk'' visible=''true'' version=''1'' lat=''34.0666735'' lon=''-118.734254''&gt;    &lt;tag k=''gnis:created'' v=''06/14/2000'' /&gt;    &lt;tag k=''gnis:county_id'' v=''037'' /&gt;    &lt;tag k=''name'' v=''Santa Monica Mountains National Recreation Area'' /&gt;    &lt;tag k=''leisure'' v=''park'' /&gt;    &lt;tag k=''gnis:feature_id'' v=''277263'' /&gt;    &lt;tag k=''gnis:state_id'' v=''06'' /&gt;    &lt;tag k=''ele'' v=''243'' /&gt;  &lt;/node&gt;  &lt;node id=''453966480'' timestamp=''2009-08-02T03:36:00Z'' user=''Apo42'' visible=''true'' version=''1'' lat=''34.07234'' lon=''-118.7343501'' /&gt;  &lt;node id=''453966482'' timestamp=''2009-08-02T03:36:01Z'' user=''Apo42'' visible=''true'' version=''1'' lat=''34.0670965'' lon=''-118.7322253'' /&gt;  &lt;node id=''453966143'' timestamp=''2009-08-02T03:35:45Z'' user=''Apo42'' visible=''true'' version=''1'' lat=''34.0724577'' lon=''-118.7364799'' /&gt;  &lt;node id=''453966130'' timestamp=''2009-08-02T03:35:44Z'' user=''Apo42'' visible=''true'' version=''1'' lat=''34.0671122'' lon=''-118.7364725'' /&gt;  &lt;node id=''453966490'' timestamp=''2009-08-02T03:36:02Z'' user=''Apo42'' visible=''true'' version=''1'' lat=''34.0722227'' lon=''-118.7322321'' /&gt;  &lt;way id=''38407529'' timestamp=''2009-08-02T03:37:41Z'' user=''Apo42'' visible=''true'' version=''1''&gt;    &lt;nd ref=''453966480'' /&gt;    &lt;nd ref=''453966490'' /&gt;    &lt;nd ref=''453966482'' /&gt;    &lt;nd ref=''453966130'' /&gt;    &lt;nd ref=''453966143'' /&gt;    &lt;nd ref=''453966480'' /&gt;    &lt;tag k=''park:type'' v=''state_park'' /&gt;    &lt;tag k=''csp:unitcode'' v=''537'' /&gt;    &lt;tag k=''admin_level'' v=''4'' /&gt;    &lt;tag k=''name'' v=''Malibu Creek State Park'' /&gt;    &lt;tag k=''csp:globalid'' v=''{4A422954-089E-407F-A5B3-1E808F830EAA}'' /&gt;    &lt;tag k=''leisure'' v=''park'' /&gt;    &lt;tag k=''attribution'' v=''CASIL CSP_Opbdys072008'' /&gt;    &lt;tag k=''note'' v=''simplified with josm to reduce node #'' /&gt;    &lt;tag k=''boundary'' v=''national_park'' /&gt;  &lt;/way&gt;&lt;/osm&gt;'.^text</body></methods><methods><class-id>AlgoDis.OpenLayerHtml class</class-id> <category>instance creation</category><body package="PickCell" selector="lat:lon:zoom:urlFileName:">lat: lat lon: lon zoom: zoom urlFileName: urlFileName	| olhm |	olhm := self new.	olhm		lat: lat;		lon: lon;		zoom: zoom;		urlFileName: urlFileName.	^olhm</body></methods><methods><class-id>AlgoDis.OpenLayerHtml class</class-id> <category>testing</category><body package="PickCell" selector="testOsmOn:">testOsmOn: fileName	" OpenLayerHtml testOsmOn: 'myosmfile.osm'  "	| fname myStream |	fname := fileName asFilename.	fname canBeWritten		ifTrue: 			[myStream := fname writeStream.			myStream nextPutAll: self testOsm .			myStream close]</body></methods><methods><class-id>AlgoDis.CellClassifier class</class-id> <category>instance creation</category><body package="PickCell" selector="on:">on: cell	| classifier |	classifier := self new.	classifier cell: cell.	^classifier</body></methods><methods><class-id>AlgoDis.CellClassifier class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>UITextPoints class</class-id> <category>interface specs</category><body package="PickCell" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Points' 			#bounds: #(#{Graphics.Rectangle} 761 371 1390 991 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 3 0 613 0 588 0 ) 					#name: #TextEditor1 					#model: #leTexte 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>UITextPoints class</class-id> <category>resources</category><body package="PickCell" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Save on File' 							#value: #doSave ) 						#(#{UI.MenuItem} 							#rawLabel: 'Save as shape file' 							#value: #doSaveShapeFile ) 						#(#{UI.MenuItem} 							#rawLabel: 'Process  on URL' 							#value: #doSaveURL ) 						#(#{UI.MenuItem} 							#rawLabel: 'Load file' 							#value: #doLoad ) 						#(#{UI.MenuItem} 							#rawLabel: 'Analyze' 							#value: #doAnalyze ) 						#(#{UI.MenuItem} 							#rawLabel: 'Store in DB' 							#value: #storeInDB ) ) #(6 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>AlgoDis.ElevationReader class</class-id> <category>class initialization</category><body package="PickCell" selector="initialize">initialize   Reader := nil.</body></methods><methods><class-id>AlgoDis.ElevationReader class</class-id> <category>accessing</category><body package="PickCell" selector="terminate">terminate	^Reader isNil		ifFalse: 			[Reader terminate.			Reader := nil]</body></methods><methods><class-id>AlgoDis.ElevationReader class</class-id> <category>testing</category><body package="PickCell" selector="testNew">testNew  ^self new</body></methods><methods><class-id>AlgoDis.ElevationReader class</class-id> <category>accessing</category><body package="PickCell" selector="reader">reader	^Reader isNil ifTrue: [Reader := self new] ifFalse: [Reader]</body></methods><methods><class-id>AlgoDis.ElevationReader class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	^self basicNew initialize</body></methods><methods><class-id>AlgoDis.CellImage class</class-id> <category>instance creation</category><body package="PickCell" selector="with:">with: image	| cm |	cm := self basicNew.	cm cellImage: image.	^cm</body></methods><methods><class-id>AlgoDis.LightTrap class</class-id> <category>instance creation</category><body package="PickCell" selector="name:lat:lon:">name: sname lat: slat lon: slon	^(self new)		name: sname;		lat: slat;		lon: slon</body></methods><methods><class-id>AlgoDis.LightTrap class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>GPSTrackingInterface class</class-id> <category>testing</category><body package="PickCell" selector="parseLat:">parseLat: aString	| ls n ch entier decimal number numberString north |	ls := aString readStream.	n := 0.	[ls atEnd] whileFalse: 			[ch := ls next.			ch = $. ifFalse: [ch isDigit ifTrue: [n := n * 10 + ch digitValue]]].	entier := (n / 1000000) truncated.	decimal := ((n / 10000) - (entier * 100)) / 60.	number := (entier + decimal) asDouble.	north := aString last = $N.	north ifFalse: [number := number negated].	numberString:= number printString.	number:= numberString copyFrom: 1 to: numberString size - 1.	^number</body></methods><methods><class-id>GPSTrackingInterface class</class-id> <category>resources</category><body package="PickCell" selector="myMenu">myMenu	"Tools.MenuEditor new openOnClass: self andSelector: #myMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Tools' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'uploadData' 							#value: #doUpload ) 						#(#{UI.MenuItem} 							#rawLabel: 'retrieveData' ) ) #(2 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>GPSTrackingInterface class</class-id> <category>testing</category><body package="PickCell" selector="testParseLatLon">testParseLatLon	| latString latValue |	latString := '4823.0159N'.	latValue := self  new parseLatLon: latString.	^latValue</body></methods><methods><class-id>GPSTrackingInterface class</class-id> <category>interface specs</category><body package="PickCell" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'GPS tracking' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 439 335 839 465 ) 			#flags: 4 			#menu: #myMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 52 0 22 0 159 0 44 0 ) 					#name: #startTrackingLog 					#model: #startTrackingLog 					#label: 'StartLog' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 226 0 20 0 333 0 42 0 ) 					#name: #stopTracking 					#model: #stopTracking 					#label: 'Stop' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 52 0 67 0 159 0 89 0 ) 					#name: #startTrackingDB 					#model: #startTrackingDB 					#label: 'StartDB' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>GPSTrackingInterface class</class-id> <category>testing</category><body package="PickCell" selector="parseLon:">parseLon: aString	| ls n ch entier decimal number numberString west |	ls := aString readStream.	n := 0.	[ls atEnd] whileFalse: 			[ch := ls next.			ch = $. ifFalse: [ch isDigit ifTrue: [n := n * 10 + ch digitValue]]].	entier := (n / 1000000) truncated.	decimal := ((n / 10000) - (entier * 100)) / 60.	number := (entier + decimal) asDouble.	west := aString last = $W.	west ifTrue: [number := number negated].	numberString:= number printString.	number:= numberString copyFrom: 1 to: numberString size - 1.	^number</body></methods><methods><class-id>GPSTrackingInterface class</class-id> <category>testing</category><body package="PickCell" selector="doUploadFields">doUploadFields	| aName filename rs pm sqlCmd nodeid time lat lon rssi latString lonString alt |	pm := UIPickCellNodes new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackGPSPoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							time := rs upTo: $,.							latString := rs upTo: $,.							lat := (self parseLat: latString) asNumber.							lonString := rs upTo: $,.							lon := (self parseLon: lonString) asNumber.							alt:= (rs upTo: $,) asNumber.							rssi := (rs upTo: Character lf) asNumber.							sqlCmd := 'INSERT INTO recoco4(nodeid, time, lat, lon, alt, rssi) VALUES('''										, nodeid , ''', '''										, time , ''',   lat										,lon , alt , rssi)'.							pm								appendData: 'osm'								password: 'fare&amp;bali'								environment: '172.12.18.159:5432_vietnamTuyen'								"environment: 'wsn.univ-brest.fr:8080_vietnamTuyen'"								strSql: sqlCmd]							].			rs close].	^nil</body></methods><methods><class-id>GPSTrackingInterface class</class-id> <category>testing</category><body package="PickCell" selector="doUploadFields1">doUploadFields1	| aName filename rs pm sqlCmd nodeid time lat lon rssi alt gpsValue latString lonString |	pm := UIPickCellNodes new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackGPSPoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[gpsValue := rs upTo: Character cr.					gpsValue isEmpty						ifFalse: 							[[rs atEnd] whileFalse: 									[nodeid := rs upTo: $,.									time := rs upTo: $,.									latString := rs upTo: $,.									lat:= self parseLat: latString.									lonString := rs upTo: $,.									lon:= self parseLon: lonString.									alt := rs upTo: $,.									rssi := rs upTo: Character cr.									sqlCmd := 'INSERT INTO recoco6(nodeid, time, lat, lon, alt, rssi) VALUES('''												, nodeid , ''', '''												, time , ''', '''												, lat , ''', '''												, lon , ''', ''', alt, ''', ''', rssi,''')'.									pm										appendData: 'osm'										password: 'fare&amp;bali'										environment: '172.12.18.159:5432_vietnamTuyen'										strSql: sqlCmd]]].			rs close].	^nil</body></methods><methods><class-id>AlgoDis.ImageHistory class</class-id> <category>instance creation</category><body package="PickCell" selector="knownMapUrl:">knownMapUrl: knownUrl	| imageHistory |	imageHistory := self new.	imageHistory knownMapUrl: knownUrl.	^imageHistory</body></methods><methods><class-id>AlgoDis.ImageHistory class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>UICellShow class</class-id> <category>resources</category><body package="PickCell" selector="CellView">CellView	"Tools.UIMaskEditor new openOnClass: self andSelector: #CellView"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 12@13 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 3212 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 610 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(610 610 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 7227 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 6038 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 7452 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5814 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 2023 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 3918 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7227 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1766 1316 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 4850 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 7934 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7709 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1541 1060 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(835 2248 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 6520 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 6295 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7227 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 5814 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 6520 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 6295 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 3437 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 5332 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 5107 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 2248 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1541 3918 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 835 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 7002 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 1060 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 7934 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1316 3212)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 13 23 2 3 8 18 34 34 34 34 34 36 0 16 19 14 12 28 6 34 34 34 34 35 9 29 34 34 32 31 17 34 34 34 34 34 34 34 34 34 22 15 6 34 34 34 34 34 34 34 33 24 11 5 34 34 34 34 34 34 34 34 20 37 4 34 34 34 34 34 34 34 34 33 25 7 34 34 34 34 34 34 34 34 34 34 21 10 34 34 34 34 34 34 34 34 34 30 26 27 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34])</body></methods><methods><class-id>UICellShow class</class-id> <category>resources</category><body package="PickCell" selector="globalMenu">globalMenu	"Tools.MenuEditor new openOnClass: self andSelector: #globalMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'print view' 							#value: #printView ) 						#(#{UI.MenuItem} 							#rawLabel: 'print all views' 							#value: #printAllView ) 						#(#{UI.MenuItem} 							#rawLabel: 'print latex' 							#value: #printLatexPage ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'View' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'new location window' 							#value: #doAwakeLocation ) 						#(#{UI.MenuItem} 							#rawLabel: 'fetch elevation' 							#value: #doFetchElevation 							#indication: false 							#indicationSelector: #changeIndication ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Tools' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'terminate reader' 							#value: #doTerminateReader ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>UICellShow class</class-id> <category>resources</category><body package="PickCell" selector="classMenu">classMenu	"Tools.MenuEditor new openOnClass: self andSelector: #classMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'define target' 				#value: #doTarget ) 			#(#{UI.MenuItem} 				#rawLabel: 'addSource' 				#value: #doAddSource ) 			#(#{UI.MenuItem} 				#rawLabel: 'fusion' 				#value: #doFusion ) 			#(#{UI.MenuItem} 				#rawLabel: 'inspect class' 				#value: #doInspect ) 			#(#{UI.MenuItem} 				#rawLabel: 'build net' 				#value: #doNetwork ) 			#(#{UI.MenuItem} 				#rawLabel: 'file out' 				#value: #fileOutSelectedClassData ) 			#(#{UI.MenuItem} 				#rawLabel: 'Occam  net with data' 				#value: #doNetworkWithDataForOccam ) 			#(#{UI.MenuItem} 				#rawLabel: 'Cuda  net with data' 				#value: #doNetworkWithDataForCuda ) ) #(3 5 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>UICellShow class</class-id> <category>resources</category><body package="PickCell" selector="lEditMenu">lEditMenu	"Tools.MenuEditor new openOnClass: self andSelector: #lEditMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #qsqd 					#defaultString: 'accepte' ) 				#nameKey: #acceptId 				#value: #doAccept ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>UICellShow class</class-id> <category>resources</category><body package="PickCell" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'inspect' 				#value: #doInspect ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>UICellShow class</class-id> <category>testing</category><body package="PickCell" selector="test1">test1	"	***This is decompiled code.*** 	The source was unavailable because the source pointer appears to point 	to an incorrect position in the file. The file may have been modified after 	this method was updated."	self on: #(1 2 3).	^self</body></methods><methods><class-id>UICellShow class</class-id> <category>interface specs</category><body package="PickCell" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'NetGen image browser' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 762 387 1796 1052 ) 			#flags: 4 			#menu: #globalMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.146583 0 0.772973 0 0.266187 0 0.889189 ) 					#name: #GroupBox2 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.580036 0 0.877027 0 0.983813 0 0.982432 ) 					#name: #GroupBox1 					#label: 'neighborhood' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.588129 0 0.675676 0 0.986511 0 0.872973 ) 					#name: #TextEditor1 					#model: #lesStats 					#tabRequiresControl: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.160971 0 0.00675676 0 0.986511 0 0.659459 ) 					#name: #ViewHolder1 					#flags: 11 					#component: #laVue ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.146583 0 0.697297 0 0.486511 0 0.733784 ) 					#name: #InputField1 					#model: #lesPoints ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.15018 0 0.771622 0 0.194245 0 0.804054 ) 					#name: #RadioButton1 					#model: #laSignature 					#label: 'Min' 					#select: #min ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.15018 0 0.804054 0 0.202338 0 0.836486 ) 					#name: #RadioButton2 					#flags: 32 					#model: #laSignature 					#label: 'Mean' 					#select: #mean ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.204137 0 0.771622 0 0.250899 0 0.804054 ) 					#name: #RadioButton3 					#flags: 32 					#model: #laSignature 					#label: 'Max' 					#select: #max ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.146583 0 0.740541 0 0.48741 0 0.777027 ) 					#name: #InputField2 					#model: #lesCouleurs ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.271583 0 0.793243 0 0.481115 0 0.82973 ) 					#name: #InputField3 					#model: #leSeuil 					#type: #fixedpoint 					#formatString: '0.00' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.15018 0 0.836486 0 0.216727 0 0.868919 ) 					#name: #RadioButton4 					#flags: 32 					#model: #laSignature 					#label: 'Variance' 					#select: #mean2 ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00539568 0 0.00675676 0 0.154676 0 0.658108 ) 					#name: #List1 					#model: #lesClasses 					#menu: #classMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.271583 0 0.837838 0 0.464928 0 0.874324 ) 					#name: #InputField4 					#model: #lePerformer 					#type: #string ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.434352 0 0.793243 0 0.600719 0 0.82973 ) 					#name: #InputField5 					#model: #leNbDeClasses 					#type: #number 					#formatString: '0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.434352 0 0.837838 0 0.600719 0 0.874324 ) 					#name: #InputField6 					#model: #lIndexClasses 					#type: #string ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00899281 0 0.678378 0 0.0683453 0 0.697297 ) 					#name: #LabelCode 					#label: 'Label : r g b' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.488309 0 0.689189 0 0.488309 0 0.689189 ) 					#name: #LabelControl ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00539568 0 0.895946 0 0.578237 0 0.993243 ) 					#name: #TextEditor2 					#model: #lEditeur 					#menu: #lEditMenu 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.30036 0 0.87027 0 0.372302 0 0.889189 ) 					#name: #Label1 					#label: 'pos: x@y X@Y' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.43795 0 0.864865 0 0.523381 0 0.889189 ) 					#name: #CheckBox1 					#model: #showSensors 					#label: 'show sensors' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.580935 0 0.909459 0 0.678957 0 0.941892 ) 					#name: #RadioButton5 					#model: #neighborhood 					#label: 'Von Neumann 1' 					#select: #vn1Neighborhood ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.580935 0 0.944595 0 0.680755 0 0.977027 ) 					#name: #RadioButton6 					#model: #neighborhood 					#label: 'Von Neumann 2' 					#select: #vn2Neighborhood ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.698741 0 0.909459 0 0.763489 0 0.941892 ) 					#name: #RadioButton7 					#model: #neighborhood 					#label: 'Moore 1' 					#select: #moore1Neighborhood ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.698741 0 0.943243 0 0.765288 0 0.975676 ) 					#name: #RadioButton8 					#model: #neighborhood 					#label: 'Moore 2' 					#select: #moore2Neighborhood ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} 0 0.488309 0 0.691892 0 0.499101 0 0.709459 ) 					#name: #CellView 					#label: #CellView 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00870406 0 0.751553 0 0.0560928 0 0.773292 ) 					#name: #Label2 					#label: 'Sea level' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.773292 0 0.144101 0 0.815217 ) 					#name: #InputField7 					#model: #theSeaLevel 					#type: #number ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00386847 0 0.830745 0 0.0435203 0 0.858696 ) 					#name: #CheckBoxSea 					#model: #showSea 					#label: 'Sea' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0667311 0 0.830745 0 0.124758 0 0.858696 ) 					#name: #CheckBox2 					#model: #showGround 					#label: 'Ground' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -9.67118e-4 0 0.736025 0 0.147002 0 0.874224 ) 					#name: #GroupBox3 ) ) ) )</body></methods><methods><class-id>GPSTrackingStream class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	^super new initialize</body></methods><methods><class-id>UILocation class</class-id> <category>resources</category><body package="PickCell" selector="menuSnap">menuSnap	"Tools.MenuEditor new openOnClass: self andSelector: #menuSnap"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Snapshot' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'set delay' 							#value: #setDelay ) 						#(#{UI.MenuItem} 							#rawLabel: 'define origin' 							#value: #defineOrigin ) 						#(#{UI.MenuItem} 							#rawLabel: 'define corner' 							#value: #defineCorner ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Save file' 							#value: #saveFile ) 						#(#{UI.MenuItem} 							#rawLabel: 'send PickCell' 							#value: #sendToPickCell ) ) #(2 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>UILocation class</class-id> <category>interface specs</category><body package="PickCell" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Location' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 621 283 1165 514 ) 			#flags: 4 			#menu: #menuSnap ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.659926 0 0.633663 0 0.985294 0 0.826733 ) 					#name: #GroupBox3 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0220588 0 0.346535 0 0.569853 0 0.663366 ) 					#name: #GroupBox2 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0220588 0 0.0247525 0 0.569853 0 0.346535 ) 					#name: #GroupBox1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.0459559 0 0.049505 0 0 ) 					#name: #Label1 					#label: 'x map' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.0459559 0 0.207921 0 0 ) 					#name: #Label2 					#label: 'y map' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.231618 0 0.0445545 0 0.556985 0 0.158416 ) 					#name: #InputField1 					#model: #leX ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.231618 0 0.207921 0 0.556985 0 0.321782 ) 					#name: #InputField2 					#model: #leY ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.0459559 0 0.386139 0 0 ) 					#name: #Label3 					#label: 'x map geo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.0459559 0 0.509901 0 0 ) 					#name: #Label4 					#label: 'y map geo' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.231618 0 0.381188 0 0.556985 0 0.495049 ) 					#name: #InputField3 					#model: #leXGeo ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.231618 0 0.509901 0 0.556985 0 0.623762 ) 					#name: #InputField4 					#model: #leYGeo ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0275735 0 0.688119 0 0.615809 0 0.79703 ) 					#name: #PercentDoneBar1 					#isOpaque: true 					#model: #delayPerCent 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.597426 0 0.0285714 0 0 ) 					#name: #Label5 					#label: 'origin' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.704044 0 0.0445545 0 0.987132 0 0.158416 ) 					#name: #InputField5 					#model: #origine ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.597426 0 0.190476 0 0 ) 					#name: #Label6 					#label: 'corner' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.704044 0 0.188119 0 0.987132 0 0.30198 ) 					#name: #InputField6 					#model: #corner ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.674632 0 0.678218 0 0 ) 					#name: #RadioButton1 					#model: #coordinateMode 					#label: 'GPS' 					#select: #GPS ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.819853 0 0.673267 0 0 ) 					#name: #RadioButton2 					#model: #coordinateMode 					#label: 'Lambert' 					#select: #lambert ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.597426 0 0.509524 0 0 ) 					#name: #Label7 					#label: 'LoRa para' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.705882 0 0.490099 0 0.988971 0 0.60396 ) 					#name: #InputField7 					#model: #parameters ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.597426 0 0.347619 0 0 ) 					#name: #Label8 					#label: 'elevation' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.704044 0 0.331683 0 0.987132 0 0.445545 ) 					#name: #InputField8 					#model: #elevation ) ) ) )</body></methods><methods><class-id>TrackPoint class</class-id> <category>testing</category><body package="PickCell" selector="testTime">testTime	"	Time readTimeFrom: '12:46:14 '  readStream . "</body></methods><methods><class-id>TrackPoint class</class-id> <category>testing</category><body package="PickCell" selector="testFrom1">testFrom1	^self from: '	ID1, 12:23:11, 4824.0176N, 00430.0715W, 32.5, -80'	"addGPSPoints: trackPoints"</body></methods><methods><class-id>TrackPoint class</class-id> <category>instance creation</category><body package="PickCell" selector="parseFloat:">parseFloat: aString	| rs n ch entier decimal number |	rs := aString readStream.	n := 0.	[rs atEnd] whileFalse: 			[ch := rs next.			ch = $. ifFalse: [ch isDigit ifTrue: [n := n * 10 + ch digitValue]]].	entier := (n / 1000000) truncated.	decimal := ((n / 10000) - (entier * 100)) / 60.	number := entier + decimal.	^number asDouble</body></methods><methods><class-id>TrackPoint class</class-id> <category>instance creation</category><body package="PickCell" selector="from1:">from1: textOrStream	| trackPoint rs id latitudeString north longitudeString west lat lon rssi altitude gpsTimeString gpsTime altitudeString check |	check := 0.	rs := textOrStream readStream.	id := rs upTo: $D.	id := (rs upTo: $,) asNumber.	check := check + 1.	check = 1		ifTrue: 			[rs next.	" remove aspace"			gpsTimeString := rs upTo: $,.			check := check + 1.			check = 2				ifTrue: 					[gpsTime := self parseHour: gpsTimeString.					latitudeString := rs upTo: $,.					latitudeString isEmpty ifTrue: [^nil].					north := latitudeString last = $N.					lat := self parseFloat: latitudeString.					check := check + 1.					check = 3						ifTrue: 							[longitudeString := rs upTo: $,.							longitudeString isEmpty ifTrue: [^nil].							west := longitudeString last = $W.							lon := self parseFloat: longitudeString.							check := check + 1.							check = 4								ifTrue: 									[west ifTrue: [lon := lon negated].									north ifFalse: [lat := lat negated].									altitudeString := rs upTo: $,.									altitude := altitudeString asNumber.									check := check + 1.									check = 5										ifTrue: 											[rssi := rs upToEnd asNumber.											check := check + 1.											check = 6												ifTrue: 													[trackPoint := self																id: id																lon: lon																lat: lat																rssi: rssi.													trackPoint time: gpsTime.													trackPoint alt: altitude.													check = 6 ifTrue: [^trackPoint]]]]]]].	^nil</body></methods><methods><class-id>TrackPoint class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>TrackPoint class</class-id> <category>testing</category><body package="PickCell" selector="testFrom4">testFrom4	| id rssi testValue values |	id := 1.	rssi := 1.	testValue := self new.	testValue := self						id: id						rssi: rssi.	values:= OrderedCollection new asSortedCollection: #id.	values add: testValue.						^testValue</body></methods><methods><class-id>TrackPoint class</class-id> <category>instance creation</category><body package="PickCell" selector="id:rssi:">id: id rssi: rssi	| trackPoint |	trackPoint := self new.	trackPoint		id: id;		rssi: rssi.	^trackPoint</body></methods><methods><class-id>TrackPoint class</class-id> <category>testing</category><body package="PickCell" selector="testFrom3">testFrom3	"	| trackPoint |	trackPoint := self  from: 'ID2, 12:46:14, 4824.0155N, 00430.0543W, 53.5, -73'.	trackPoints"</body></methods><methods><class-id>TrackPoint class</class-id> <category>instance creation</category><body package="PickCell" selector="from:">from: textOrStream	| trackPoint rs id latitudeString north longitudeString west lat lon rssi altitude gpsTimeString gpsTime altitudeString check |	check := 0.	rs := textOrStream readStream.	id := rs upTo: $D.	id := (rs upTo: $,) asNumber.	check := check + 1.	check = 1		ifTrue: 			[rs next.	" remove aspace"			gpsTimeString := rs upTo: $,.			check := check + 1.			check = 2				ifTrue: 					[gpsTime := self parseHour: gpsTimeString.					latitudeString := rs upTo: $,.					latitudeString isEmpty ifTrue: [^nil].					north := latitudeString last = $N.					lat := self parseFloat: latitudeString.					check := check + 1.					check = 3						ifTrue: 							[longitudeString := rs upTo: $,.							longitudeString isEmpty ifTrue: [^nil].							west := longitudeString last = $W.							lon := self parseFloat: longitudeString.							check := check + 1.							check = 4								ifTrue: 									[west ifTrue: [lon := lon negated].									north ifFalse: [lat := lat negated].									altitudeString := rs upTo: $,.									altitude := altitudeString asNumber.									check := check + 1.									check = 5										ifTrue: 											[rssi := rs upToEnd asNumber.											check := check + 1.											check = 6												ifTrue: 													[trackPoint := self																id: id																lon: lon																lat: lat																rssi: rssi.													trackPoint time: gpsTime.													trackPoint alt: altitude.													check = 6 ifTrue: [^trackPoint]]]]]]].	^nil</body></methods><methods><class-id>TrackPoint class</class-id> <category>instance creation</category><body package="PickCell" selector="parseHour:">parseHour: aString	| rs |	rs := aString readStream.	^Time readFrom: rs</body></methods><methods><class-id>TrackPoint class</class-id> <category>instance creation</category><body package="PickCell" selector="id:lon:lat:rssi:">id: id lon: lon lat: lat rssi: rssi	| trackPoint |	trackPoint := self new.	trackPoint		id: id;		lon: lon;		lat: lat;		rssi: rssi.	^trackPoint</body></methods><methods><class-id>TrackPoint class</class-id> <category>instance creation</category><body package="PickCell" selector="id:value:">id: id value: value	| trackPoint |	trackPoint := self new.	trackPoint		id: id;		value: value. 	^trackPoint</body></methods><methods><class-id>TrackPoint class</class-id> <category>instance creation</category><body package="PickCell" selector="id:lon:lat:alt:rssi:">id: id lon: lon lat: lat alt: alt rssi: rssi	| trackPoint |	trackPoint := self new.	trackPoint		id: id;		lon: lon;		lat: lat;		alt: alt;		rssi: rssi.			^trackPoint</body></methods><methods><class-id>TrackPoint class</class-id> <category>instance creation</category><body package="PickCell" selector="testValue">testValue| id value abc |	id:= 1.value:= 10.abc :=  self																id: id																value: value.</body></methods><methods><class-id>TrackPoint class</class-id> <category>testing</category><body package="PickCell" selector="testFrom2">testFrom2	"trackPoint := self new.	trackPoint		id: id;		lon: lon;		lat: lat;		rssi: rssi.	trackPoint from: 'ID2, 12:46:14, 4824.0155N, 00430.0543W, 53.5, -73'.	addGPSPoints: trackPoints"</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets class</class-id> <category>testing</category><body package="PickCell" selector="testNode100">testNode100	^self new byNode: 100</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets class</class-id> <category>testing</category><body package="PickCell" selector="testTable100byTurns">testTable100byTurns	^self new printJGraph: 100</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets class</class-id> <category>testing</category><body package="PickCell" selector="testTable101byTurns">testTable101byTurns	^self new printJGraph: 101</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets class</class-id> <category>testing</category><body package="PickCell" selector="test1">test1	^self new</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets class</class-id> <category>testing</category><body package="PickCell" selector="testTable110byTurns">testTable110byTurns	" TraceParserForCrickets  testTable110byTurns "	^self new printJGraph: 110</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets class</class-id> <category>testing</category><body package="PickCell" selector="testTablebyTurns">testTablebyTurns	" TraceParserForCrickets  testTable110byTurns "	self new printJGraph: 110 limit:5 .	self new printJGraph: 100 limit:5 .	self new printJGraph: 101 limit:5 .	self new printJGraph: 102 limit:5 .</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets class</class-id> <category>testing</category><body package="PickCell" selector="testNode100byTurns">testNode100byTurns	^self new byNodeAndTurns: 100</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets class</class-id> <category>testing</category><body package="PickCell" selector="test2">test2	^self new byNode</body></methods><methods><class-id>AlgoDis.CellSignature class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	"Answer a newly created and initialized instance."	| cs |	cs := super new initialize.	cs		min: 0;		max: 0;		mean: 0.	^cs</body></methods><methods><class-id>AlgoDis.CellSignature class</class-id> <category>instance creation</category><body package="PickCell" selector="min:max:mean:">min: min max: max mean: mean	| sig |	sig := self new.	sig		min: min;		max: max;		mean: mean.	^sig</body></methods><methods><class-id>AlgoDis.CellSignature class</class-id> <category>instance creation</category><body package="PickCell" selector="min:max:mean:mean2:">min: min max: max mean: mean mean2: mean2	| sig |	sig := self new.	sig		min: min;		max: max;		mean: mean ;mean2: mean2.	^sig</body></methods><methods><class-id>AlgoDis.KnownMapUrl class</class-id> <category>instance creation</category><body package="PickCell" selector="url:shortName:">url: anUrl shortName: shortName	| kmu |	kmu := self new.	kmu url: anUrl shortName: shortName.	^kmu</body></methods><methods><class-id>AlgoDis.KnownMapUrl class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.KnownMapUrl class</class-id> <category>testing</category><body package="PickCell" selector="test1">test1	^self url: 'http://wsn.univ-brest.fr/pottier' shortName: 'pottier'</body></methods><methods><class-id>AlgoDis.KnownMapUrl class</class-id> <category>class initialization</category><body package="PickCell" selector="initialize">initialize	^self knownUrls</body></methods><methods><class-id>AlgoDis.KnownMapUrl class</class-id> <category>class initialization</category><body package="PickCell" selector="reset">reset	^KnownUrls := nil</body></methods><methods><class-id>AlgoDis.KnownMapUrl class</class-id> <category>instance creation</category><body package="PickCell" selector="knownUrls">knownUrls	KnownUrls isNil ifTrue: [KnownUrls := Dictionary new].	^KnownUrls</body></methods><methods><class-id>AlgoDis.KnownMapUrl class</class-id> <category>testing</category><body package="PickCell" selector="test2">test2	"^ KnownMapUrl test2 "	| k1 |	k1 := self test1.	k1 remember.	^self knownUrls</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>interface specs</category><body package="PickCell" selector="windowSpecOld">windowSpecOld	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecOld"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'PickCell points' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 880 455 1681 985 ) 			#flags: 4 			#menu: #leMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 341 0 -4 0 836 0 56 0 ) 					#name: #GroupBox2 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 341 0 56 0 ) 					#name: #GroupBox1 ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00453858 0 0.117063 0 0.987897 0 0.994048 ) 					#name: #ViewHolder1 					#flags: 11 					#component: #laVue ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 30 0 225 0 53 0 ) 					#name: #Slider1 					#model: #percent 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 232 0 30 0 337 0 54 0 ) 					#name: #InputField1 					#model: #portee 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 346 0 28 0 398 0 52 0 ) 					#name: #InputField2 					#model: #gridAspect ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 410 0 28 0 455 0 53 0 ) 					#name: #InputField3 					#model: #leSeuil 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 3 0 55 0 30 0 ) 					#name: #Label1 					#label: 'range' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 232 0 3 0 267 0 30 0 ) 					#name: #Label2 					#label: 'range' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 349 0 3 0 401 0 26 0 ) 					#name: #Label3 					#label: 'section' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 486 0 3 0 616 0 20 0 ) 					#name: #Label5 					#label: 'x@y' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 462 0 31 0 504 0 50 0 ) 					#name: #LabelLat 					#label: 'lat:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 597 0 30 0 ) 					#name: #LabelLon 					#label: 'lon:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 484 0 30 0 598 0 52 0 ) 					#name: #InputLatitude 					#model: #latitude 					#isReadOnly: false 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 626 0 29 0 746 0 53 0 ) 					#name: #InputLongitude 					#model: #longitude 					#isReadOnly: false 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 842 0 22 0 886 0 52 0 ) 					#name: #'ActionGo!' 					#model: #doGo 					#label: 'Go!' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 630 0 3 0 760 0 20 0 ) 					#name: #Label4 					#label: 'x@y' ) ) ) )</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>Urls</category><body package="PickCell" selector="knownUrls">knownUrls	KnownUrls isNil ifTrue: [KnownUrls := OrderedCollection with: 'http://dataweb.bmkg.go.id/MEWS/Radar/Citra_Radar_TANG.png'].	^KnownUrls</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>resources</category><body package="PickCell" selector="leMenu">leMenu	"Tools.MenuEditor new openOnClass: self andSelector: #leMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Cell system name' 							#value: #doCellSystemName ) 						#(#{UI.MenuItem} 							#rawLabel: 'load image' 							#value: #loadImage ) 						#(#{UI.MenuItem} 							#rawLabel: 'load Url' 							#value: #loadUrl ) 						#(#{UI.MenuItem} 							#rawLabel: 'buid Url History' 							#value: #loadUrlHistory ) 						#(#{UI.MenuItem} 							#rawLabel: 'save postscript' 							#value: #savePostscript ) 						#(#{UI.MenuItem} 							#rawLabel: 'build net' 							#value: #buildNet ) 						#(#{UI.MenuItem} 							#rawLabel: 'load points' 							#value: #loadPoints ) 						#(#{UI.MenuItem} 							#rawLabel: 'save points' 							#value: #savePoints ) ) #(8 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Tools' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'getGPSData' 							#value: #showTrackPoints ) 						#(#{UI.MenuItem} 							#rawLabel: 'showPointsFromLogFile' 							#value: #showPointsFromLogFile ) 						#(#{UI.MenuItem} 							#rawLabel: 'showVisiblePoints' 							#value: #showVisiblePointsTest ) 						#(#{UI.MenuItem} 							#rawLabel: 'showInvisiblePoints' 							#value: #showInvisiblePoints ) 						#(#{UI.MenuItem} 							#rawLabel: 'showCoverageRSSI' 							#value: #doShowCover ) 						#(#{UI.MenuItem} 							#rawLabel: 'loadPointsDB' 							#value: #doPointsDB ) 						#(#{UI.MenuItem} 							#rawLabel: 'Statistics' 							#value: #statisticsVPoints ) 						#(#{UI.MenuItem} 							#rawLabel: 'Get grid cell' 							#value: #buildCellArray ) 						#(#{UI.MenuItem} 							#rawLabel: 'Reset points' 							#value: #resetPoints ) ) #(9 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'View' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Location window' 							#value: #doAwakeLocation ) 						#(#{UI.MenuItem} 							#rawLabel: 'Sea level' 							#nameKey: #doSeaLevel 							#value: #doSeaLevel ) 						#(#{UI.MenuItem} 							#rawLabel: 'Ground level' 							#nameKey: #doGroundLevel 							#value: #doGroundLevel ) 						#(#{UI.MenuItem} 							#rawLabel: 'Get View' 							#value: #doGetView ) 						#(#{UI.MenuItem} 							#rawLabel: 'inspect' 							#value: #doInspect ) 						#(#{UI.MenuItem} 							#rawLabel: 'Grid' 							#nameKey: #showGridID 							#value: #doShowGridSwitch 							#indication: true 							#indicationSelector: #getShowGridMenu ) 						#(#{UI.MenuItem} 							#rawLabel: 'Image' 							#nameKey: #showImageID 							#value: #doShowImageSwitch 							#indication: true 							#indicationSelector: #getShowImageMenu ) 						#(#{UI.MenuItem} 							#rawLabel: 'Graph' 							#nameKey: #showGraphID 							#value: #doShowGraphSwitch 							#indication: true 							#indicationSelector: #getShowGraphMenu ) 						#(#{UI.MenuItem} 							#rawLabel: 'CoverCells' 							#nameKey: #showCoverCellsID 							#value: #doShowCoverCellsSwitch 							#indication: true 							#indicationSelector: #getShowCoverCellsMenu ) 						#(#{UI.MenuItem} 							#rawLabel: 'Label' 							#nameKey: #showLabelID 							#value: #doShowLabelSwitch 							#indication: true 							#indicationSelector: #getShowLabelMenu ) 						#(#{UI.MenuItem} 							#rawLabel: 'Zones' 							#nameKey: #showZonesID 							#value: #doShowZonesSwitch 							#indication: true 							#indicationSelector: #getShowZonesMenu ) 						#(#{UI.MenuItem} 							#rawLabel: 'Wind' 							#nameKey: #showWindID 							#value: #doShowWindSwitch ) ) #(5 7 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>Tools</category><body package="PickCell" selector="doUploadMobileTrack">doUploadMobileTrack	| aName filename rs pm sqlCmd nodeid time lat lon alt latString lonString |	pm := UIPickCellNodes new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackGPSPoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: Character cr.							sqlCmd := 'INSERT INTO mobile_june92017(nodeid, time, lat, lon, alt) VALUES('''										, nodeid , ''','''										, time , ''','''										, lat , ''','''										, lon , ''','''										, alt , ''')'.							pm								appendData: 'osm'								password: 'fare&amp;bali'								environment: '172.12.18.159:5432_france'								strSql: sqlCmd]].			rs close].	^nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>Tools</category><body package="PickCell" selector="convertValue:">convertValue: aString	^aString asNumber</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>Tools</category><body package="PickCell" selector="doUploadBSTrack">doUploadBSTrack	| aName filename rs pm sqlCmd nodeid time lat lon rssi alt latString lonString |	pm := UIPickCellNodes new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackGPSPoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							sqlCmd := 'INSERT INTO recoco_may182017(nodeid, time, lat, lon, alt, rssi) VALUES('''										, nodeid , ''','''										, time , ''','''										, lat , ''','''										, lon , ''','''										, alt , ''','''										, rssi , ''')'.							pm								appendData: 'osm'								password: 'fare&amp;bali'								environment: '172.12.18.159:5432_france'								strSql: sqlCmd]].			rs close].	^nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>Tools</category><body package="PickCell" selector="doShowCoverage">doShowCoverage	| aName filename rs nodeid time lat lon rssi alt latString lonString rName wFile ws cellPos values |	cellPos := OrderedCollection new.	rName := 'pointsDisplay.txt'.	wFile := rName asFilename.	ws := wFile writeStream.	aName := 'trackGPSPoints.txt'.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							values := Array								with: lat								with: lon								with: alt								with: rssi.								cellPos add: values 							]].			rs close].		self pickModel isNil		ifFalse: 			[self pickModel processElevations: cellPos.			self pickModel guessedName: self guessedName].	^cellPos</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>interface specs</category><body package="PickCell" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'PickCell points' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 338 151 1028 674 ) 			#flags: 4 			#menu: #leMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.508696 0 0.00792079 0 0.982609 0 0.112871 ) 					#name: #GroupBox2 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00434783 0 0.00792079 0 0.505797 0 0.112871 ) 					#name: #GroupBox1 ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0057971 0 0.118812 0 0.981159 0 0.988119 ) 					#name: #ViewHolder1 					#flags: 11 					#component: #laVue ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 0 0.0693069 0 0.281159 0 0.0970297 ) 					#name: #Slider1 					#model: #percent 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.308696 0 0.0657371 0 0.394203 0 0.103586 ) 					#name: #InputField1 					#model: #portee 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.411594 0 0.063745 0 0.498551 0 0.103586 ) 					#name: #InputField2 					#model: #gridAspect ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0115942 0 0.0415842 0 0.0521739 0 0.0653465 ) 					#name: #Label1 					#label: 'range' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.334783 0 0.0356436 0 0.375362 0 0.0594059 ) 					#name: #Label2 					#label: 'range' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.423188 0 0.0376238 0 0.473913 0 0.0613861 ) 					#name: #Label3 					#label: 'section' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.545568 0 0.0179283 0 0.700375 0 0.061753 ) 					#name: #InputField4 					#model: #laLon ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.54432 0 0.0677291 0 0.700375 0 0.109562 ) 					#name: #InputField5 					#model: #laLat ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.513043 0 0.0199601 0 0.550725 0 0.0518962 ) 					#name: #Label4 					#label: 'Lon' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.513043 0 0.0698603 0 0.546377 0 0.101796 ) 					#name: #Label5 					#label: 'Lat' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.763768 0 0.0199203 0 0.824638 0 0.061753 ) 					#name: #InputField6 					#model: #elevation ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.723188 0 0.0219124 0 0.75942 0 0.0537849 ) 					#name: #Label6 					#label: 'Elev' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.736232 0 0.0677291 0 0.831884 0 0.109562 ) 					#name: #ActionButton1 					#model: #doCoverage 					#label: 'Coverage' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.842029 0 0.0199203 0 0.953623 0 0.061753 ) 					#name: #InputField3 					#model: #lEchelle ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.852174 0 0.0677291 0 0.957971 0 0.109562 ) 					#name: #ActionButton2 					#model: #doPara 					#label: 'Parameters' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>Tools</category><body package="PickCell" selector="showPointsFromLogFile">showPointsFromLogFile	| aName filename rs nodeid time lat lon rssi alt latString lonString aPoint map |	aPoint := TrackPoint new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackGPSPoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							aPoint								id: nodeid;								lon: lon;								lat: lat;								rssi: rssi.							map := self laVue new.							map controller addAGPSPoint: aPoint]].			rs close].	^nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>testing</category><body package="PickCell" selector="test1">test1self convertValue: '12.125633d'.</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>Tools</category><body package="PickCell" selector="parseLon:">parseLon: aString	| ls n ch entier decimal number numberString west |	ls := aString readStream.	n := 0.	[ls atEnd] whileFalse: 			[ch := ls next.			ch = $. ifFalse: [ch isDigit ifTrue: [n := n * 10 + ch digitValue]]].	entier := (n / 1000000) truncated.	decimal := ((n / 10000) - (entier * 100)) / 60.	number := (entier + decimal) asDouble.	west := aString last = $W.	west ifTrue: [number := number negated].	numberString:= number printString.	number:= numberString copyFrom: 1 to: numberString size - 1.	^number</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>Tools</category><body package="PickCell" selector="parseLat:">parseLat: aString	| ls n ch entier decimal number numberString north |	ls := aString readStream.	n := 0.	[ls atEnd] whileFalse: 			[ch := ls next.			ch = $. ifFalse: [ch isDigit ifTrue: [n := n * 10 + ch digitValue]]].	entier := (n / 1000000) truncated.	decimal := ((n / 10000) - (entier * 100)) / 60.	number := (entier + decimal) asDouble.	north := aString last = $N.	north ifFalse: [number := number negated].	numberString:= number printString.	number:= numberString copyFrom: 1 to: numberString size - 1.	^number</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>Tools</category><body package="PickCell" selector="convertDouble:">convertDouble: aString	^aString asNumber</body></methods><methods><class-id>AlgoDis.UIPickCellNodes class</class-id> <category>Tools</category><body package="PickCell" selector="doUploadFields">doUploadFields	| aName filename rs pm sqlCmd nodeid time lat lon rssi alt latString lonString |	pm := UIPickCellNodes new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackGPSPoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							sqlCmd := 'INSERT INTO recoco_may182017(nodeid, time, lat, lon, alt, rssi) VALUES('''										, nodeid , ''','''										, time , ''','''										, lat , ''','''										, lon , ''','''										, alt , ''','''										, rssi , ''')'.							pm								appendData: 'osm'								password: 'fare&amp;bali'								environment: '172.12.18.159:5432_france'								strSql: sqlCmd]].			rs close].	^nil</body></methods><methods><class-id>AlgoDis.TraceParserForCSV class</class-id> <category>testing</category><body package="PickCell" selector="testParseLineTabAndFilter">testParseLineTabAndFilter	" self testParseLineTab  "	| tP array |	tP := self new.	array := tP readFileTab.	tP buildOn: array.	tP removeInvalids.	^tP</body></methods><methods><class-id>AlgoDis.TraceParserForCSV class</class-id> <category>testing</category><body package="PickCell" selector="testLine">testLine	" self testLine "	| t1 a1 |	t1 := 'type,	latitude,	longitude,	altitude (m),	name'.	a1 := self new parseLine: t1.	^a1</body></methods><methods><class-id>AlgoDis.TraceParserForCSV class</class-id> <category>testing</category><body package="PickCell" selector="testLineComma">testLineComma	" self testLineComma "	| a1 |	a1 := self new readFileComma.	^a1</body></methods><methods><class-id>AlgoDis.TraceParserForCSV class</class-id> <category>testing</category><body package="PickCell" selector="testParseLineTab">testParseLineTab	" self testParseLineTab  "	| tP array result |	tP := self new.	array := tP readFileTab.	result := tP buildOn: array.	^result</body></methods><methods><class-id>AlgoDis.TraceParserForCSV class</class-id> <category>testing</category><body package="PickCell" selector="testParseLineCommaAndFilter">testParseLineCommaAndFilter	" self testParseLineComma  "	| tP array |	tP := self new.	array := tP readFileComma.	tP buildOn: array.	tP removeInvalids.	tP keepColumns: #(1 6).	tP newOrder: #(2 1).	^tP</body></methods><methods><class-id>AlgoDis.TraceParserForCSV class</class-id> <category>testing</category><body package="PickCell" selector="testLineTab">testLineTab	" self testLineTab "	| t1 a1 |	t1 := 'W	19.755071769	-16.570816040	0.0	Px1y1'.	a1 := self new parseLineTab: t1. 	^a1</body></methods><methods><class-id>AlgoDis.GDALReader class</class-id> <category>testing</category><body package="PickCell" selector="test7">test7	"GDALReader test7"	| gdal coord ws elevation |	gdal := self default getInfo.	ws := 'test.text' asFilename writeStream.	ws		nextPutAll: 'longitude, latitude, elevation';		cr.	3600 - 5 to: 3600		do: 			[:yPos |			3600 - 5 to: 3600				do: 					[:xPos |					coord := gdal pointToCoord: xPos @ yPos.					elevation := gdal getValueAtPoint: xPos @ yPos.					coord first printOn: ws.					ws nextPut: $,. 					coord last printOn: ws.					ws nextPut: $,. 					elevation printOn: ws.					ws						cr;						flush]].	ws close</body></methods><methods><class-id>AlgoDis.GDALReader class</class-id> <category>instance creation</category><body package="PickCell" selector="default">default	| filename def |	filename := Filename				fromComponents: #('$(VISUALWORKS)' 'pickcell' 'ASTGTM2_N48W005_dem.txt').	def := self on: filename.	def getInfo.	^def</body></methods><methods><class-id>AlgoDis.GDALReader class</class-id> <category>instance creation</category><body package="PickCell" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AlgoDis.GDALReader class</class-id> <category>testing</category><body package="PickCell" selector="test6">test6	"GDALReader test6"	| gdal coord |	gdal := self default getInfo.	coord := gdal pointToCoord: 2000 @ 2000.	^coord</body></methods><methods><class-id>AlgoDis.GDALReader class</class-id> <category>testing</category><body package="PickCell" selector="test4">test4	"GDALReader test4"	| gdal |	gdal := self default getInfo.	^gdal coordToPoint: (Array with: -4.9 with: 48.6)</body></methods><methods><class-id>AlgoDis.GDALReader class</class-id> <category>testing</category><body package="PickCell" selector="test1">test1	"GDALReader test1"	^self default getInfo</body></methods><methods><class-id>AlgoDis.GDALReader class</class-id> <category>instance creation</category><body package="PickCell" selector="on:">on: filename	"Answer a newly created and initialized instance."	| gdar |	gdar := self new.	gdar filename: filename.	^gdar</body></methods><methods><class-id>AlgoDis.GDALReader class</class-id> <category>testing</category><body package="PickCell" selector="test3">test3	"GDALReader test3"	| gdal |	gdal := self default getInfo.	^gdal getValueAtPoint: 1500 @ 1500</body></methods><methods><class-id>AlgoDis.GDALReader class</class-id> <category>testing</category><body package="PickCell" selector="test8">test8	"GDALReader test8"	| array gdal |	array := #(#(-4.00153 48.0015 #, 50) #(-4.00125 48.0015 #, 48) #(-4.00097 48.0015 #, 45)).	gdal := self default getInfo.	^array collect: [:line | gdal getValueAtCoord: line]</body></methods><methods><class-id>AlgoDis.GDALReader class</class-id> <category>testing</category><body package="PickCell" selector="test5">test5	"GDALReader test5"	| gdal point |	gdal := self default getInfo.	point := gdal coordToPoint: (Array with: -4.9 with: 48.6).	^gdal getValueAtPoint: point</body></methods><methods><class-id>AlgoDis.GDALReader class</class-id> <category>testing</category><body package="PickCell" selector="test2">test2	"GDALReader test2"	| gdal |	gdal := self default getInfo.	^gdal getLine: 1500</body></methods><methods><class-id>UIKnownUrls class</class-id> <category>resources</category><body package="PickCell" selector="menuNoms">menuNoms	"Tools.MenuEditor new openOnClass: self andSelector: #menuNoms"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'save file' 							#value: #doSaveFile ) 						#(#{UI.MenuItem} 							#rawLabel: 'load file' 							#value: #doLoadFile ) 						#(#{UI.MenuItem} 							#rawLabel: 'quit' 							#value: #doQuit ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Edit' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'delete' 							#value: #doDelete ) 						#(#{UI.MenuItem} 							#rawLabel: 'add' 							#value: #doAdd ) ) #(2 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>UIKnownUrls class</class-id> <category>interface specs</category><body package="PickCell" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Known Urls' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 1078 617 1480 822 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.365672 0 0.0243902 0 0.975124 0 0.687805 ) 					#name: #List1 					#flags: 12 					#model: #laListe 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0.0243902 0 0.355721 0 0.687805 ) 					#name: #List2 					#model: #lesNoms 					#menu: #menuNoms 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0124378 0 0.736585 0 0.350746 0 0.829268 ) 					#name: #InputField1 					#model: #leShortName ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.375622 0 0.736585 0 0.965174 0 0.829268 ) 					#name: #InputField2 					#model: #leUrl ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0124378 0 0.858537 0 0.166667 0 0.946341 ) 					#name: #SaveButton 					#model: #doQuit 					#label: 'Ok' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.201493 0 0.809756 0 0.355721 0 0.946341 ) 					#name: #ActionButton2 					#model: #doCancel 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Mapsv0 class</class-id> <category>instance creation</category><body package="Mapsv0" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>NetworkDistance class</class-id> <category>instance creation</category><body package="Mapsv0" selector="distanceNode:withNode:">distanceNode: aFirstNode withNode: aSecondNode	| nd |	nd := (self new)				nodeA: aFirstNode;				nodeB: aSecondNode.	nd computeDistance.	^nd</body></methods><methods><class-id>NetworkDistance class</class-id> <category>instance creation</category><body package="Mapsv0" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Mapsv0Proxy class</class-id> <category>accessing</category><body package="Mapsv0" selector="newClient">newClient	| url req |	url := 'http://mt.google.com/vt/x=0&amp;y=0&amp;z=0' asURI.	req := Net.HttpRequest get: url.	req fieldValueAt: 'User-Agent' put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	^(Net.HttpClient new)		readingOptions: req readingOptions;		writingOptions: req writingOptions;		yourself</body></methods><methods><class-id>Mapsv0Proxy class</class-id> <category>accessing</category><body package="Mapsv0" selector="httpConnexion:">httpConnexion: anObject	httpConnexion := anObject</body></methods><methods><class-id>Mapsv0Proxy class</class-id> <category>accessing</category><body package="Mapsv0" selector="tileRequest:">tileRequest: httpRequest	| c |	c := self client.	c executeRequest: httpRequest</body></methods><methods><class-id>Mapsv0Proxy class</class-id> <category>accessing</category><body package="Mapsv0" selector="httpConnexion">httpConnexion	^httpConnexion</body></methods><methods><class-id>Mapsv0Proxy class</class-id> <category>http</category><body package="Mapsv0" selector="executeRequest:">executeRequest: httpRequest	^self client executeRequest: httpRequest</body></methods><methods><class-id>Mapsv0Proxy class</class-id> <category>instance creation</category><body package="Mapsv0" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Mapsv0Proxy class</class-id> <category>accessing</category><body package="Mapsv0" selector="client">client	Client isNil ifTrue: [Client := self newClient]</body></methods><methods><class-id>Mapsv0Utilities class</class-id> <category>utilities</category><body package="Mapsv0" selector="testForGPX">testForGPX	"GMapUtilities testForGPX"	| command fn return date |	fn := 'smartsantander.ed' asFilename writeStream.	fn nextPutAll: self scriptForGPX.	fn close.	"date := UnixProcess cshOne: 'date'."	date := UnixProcess cshOne: 'date +%FT%H:%M:%S'.	date := date copyFrom: 1 to: date size - 1.	fn := self defaultGPXName asFilename writeStream.	fn		nextPutAll: '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;gpx version="1.0" creator="NetGen for Santander"&gt;  &lt;metadata&gt;    &lt;name&gt;SmartSantander''s sensors&lt;/name&gt;    &lt;desc&gt;Sensors in city: Santander, Spain&lt;/desc&gt;    &lt;link&gt;http://smartsantander.eu/&lt;/link&gt;    &lt;time&gt;'					, date , '&lt;/time&gt;  &lt;/metadata&gt;';		cr.	fn close.	command := 'ed ' , self defaultHtmlName , ' &lt; smartsantander.ed'.	return := UnixProcess cshOne: command.	UnixProcess cshOne: 'cat ' , self defaultGpxPartName , '&gt;&gt; ' , self defaultGPXName.	^return</body></methods><methods><class-id>Mapsv0Utilities class</class-id> <category>utilities</category><body package="Mapsv0" selector="defaultHtmlName">defaultHtmlName	^'smartsantander.html'</body></methods><methods><class-id>Mapsv0Utilities class</class-id> <category>utilities</category><body package="Mapsv0" selector="bashForGPX">bashForGPX	^'#!/bin/bash# Smartsantander.sh# date=`date +%F_%H-%M-%S`date="web"dateTime=`date +%FT%H:%M:%S`echo $dateecho $dateTimegpxName=smartsantander_$date.gpxecho "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;gpx version=\"1.0\" creator=\"ed\"&gt;  &lt;metadata&gt;    &lt;name&gt;SmartSantander''s sensors&lt;/name&gt;    &lt;desc&gt;Sensors in city: Santander, Spain&lt;/desc&gt;    &lt;link&gt;http://smartsantander.eu/&lt;/link&gt;    &lt;time&gt;$dateTime&lt;/time&gt;  &lt;/metadata&gt;" &gt; $gpxNamecurl http://www.smartsantander.eu/map --output-document=map_$date.htmed map_$date.htm &lt; smartsantander.edcat smartsantander.gpx.part &gt;&gt; $gpxNameecho $gpxName'</body></methods><methods><class-id>Mapsv0Utilities class</class-id> <category>utilities</category><body package="Mapsv0" selector="defaultFileNetName">defaultFileNetName	" GMapUtilities  defaultFileNetName "	^'smartsantander.net'</body></methods><methods><class-id>Mapsv0Utilities class</class-id> <category>utilities</category><body package="Mapsv0" selector="scriptForGPX">scriptForGPX	^'H/Latlng=/1,.-1d/&lt;\/script&gt;/.,$d1,$s/.*LatLng(\(.*\), \(.*\));/\&lt;wpt lat=\"\1\" lon=\"\2\"\&gt;/gg/Marker/dg/map:map,/dg/position:/dg/addListener/dg/});/d1,$s/.*icon:/\&lt;sym\&gt;/g1,$s/\(image.*\),/\1\&lt;\/sym\&gt;/g1,$s/&lt;div.*Last update:/\&lt;time\&gt;/g1,$s/&lt;\/br&gt;&lt;br&gt;\(Node: [0-9]*\)/&lt;\/time&gt;&lt;name&gt;\1&lt;\/name&gt;/g1,$s/&lt;\/br&gt;\(.*\)&lt;\/br&gt;/&lt;desc&gt;\1&lt;\/desc&gt;/g1,$s/&lt;\/font&gt;&lt;\/div&gt;\";/&lt;\/wpt&gt;/g1,$s/&lt;br&gt;//g1,$s/&lt;\/br&gt;/; /g1,$s/var\(.*\)=\"/&lt;cmt&gt;\1&lt;\/cmt&gt;/g1,$s/	//g1,$g/^$/d1,$s/&lt;sym&gt;/  &lt;sym&gt;/g1,$g/^ $/d1,$g/^image/.-1,.j1,$s/&lt;div.*&gt;\(.*\);/&lt;name&gt;\1&lt;\/name&gt;/g1,$s/&gt; /&gt;/g1,$s/?/°/g$,$s/}/&lt;\/gpx&gt;/1,$s/image10/meshlium_2/g1,$s/image1/air/g1,$s/image3/parking/g1,$s/image6/parking_off/g1,$s/image7/temperature/g1,$s/image8/sound/g1,$s/image9/light/gw smartsantander.gpx.partq'</body></methods><methods><class-id>Mapsv0Utilities class</class-id> <category>utilities</category><body package="Mapsv0" selector="textForSantander">textForSantander	" self textForSantander "	| fn return |	return := UnixProcess cshOne: 'curl -s  http://www.smartsantander.eu/map/'.	fn := self defaultHtmlName asFilename writeStream.	fn nextPutAll: return.	fn close.	^return</body></methods><methods><class-id>Mapsv0Utilities class</class-id> <category>utilities</category><body package="Mapsv0" selector="htmlForSantander">htmlForSantander	"self htmlForSantander "	| fn url req resp contents |	url := 'http://www.smartsantander.eu/map/'.	req := Net.HttpRequest get: url.	resp := req execute.	contents := resp value byteSource.	contents isNil		ifFalse: 			[| text |			text := contents						reset;						contents.			fn := self defaultHtmlName asFilename writeStream.			fn nextPutAll: text.			fn close].	^contents</body></methods><methods><class-id>Mapsv0Utilities class</class-id> <category>instance creation</category><body package="Mapsv0" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Mapsv0Utilities class</class-id> <category>utilities</category><body package="Mapsv0" selector="defaultGpxPartName">defaultGpxPartName	^'smartsantander.gpx.part'</body></methods><methods><class-id>Mapsv0Utilities class</class-id> <category>utilities</category><body package="Mapsv0" selector="defaultGPXName">defaultGPXName	^'smartsantander.gpx'</body></methods><methods><class-id>UIMapsv0 class</class-id> <category>interface specs</category><body package="Mapsv0" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Display Google maps' 			#min: #(#{Core.Point} 592 412 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 675 277 1661 1033 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 4 68 ) 					#name: #Label1 					#label: 'lon' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 42 70 142 91 ) 					#name: #InputField1 					#model: #longitude 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 4 98 ) 					#name: #Label2 					#label: 'lat' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 42 98 142 119 ) 					#name: #InputField2 					#model: #latitude 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 147 133 176 162 ) 					#name: #ActionButton1 					#model: #doTileToDeg 					#label: '^' 					#defaultable: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.Rectangle} 3 124 173 128 ) 					#name: #Divider1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 6 138 ) 					#name: #Label3 					#label: 'Xtile' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 40 135 140 156 ) 					#name: #InputField3 					#model: #xTile 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 6 166 ) 					#name: #Label4 					#label: 'Ytile' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 40 166 140 187 ) 					#name: #InputField4 					#model: #yTile 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 148 164 177 193 ) 					#name: #ActionButton2 					#model: #doDegToTile 					#label: 'v' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 6 196 ) 					#name: #Label5 					#label: 'zoom' ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 205 0 23 0 -24 1 -22 1 ) 					#name: #TileViewHolder 					#component: #tileView ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 35 222 146 250 ) 					#name: #ActionButton3 					#model: #doUpdateTile 					#label: 'Refresh map' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 6 655 117 674 ) 					#name: #ActionButton4 					#model: #inspect 					#label: 'Inspect it!' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 6 677 117 700 ) 					#name: #ActionButton5 					#model: #doQuit 					#label: 'Close window' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 203 0 -3 0 -21 1 26 0 ) 					#name: #ActionButton6 					#model: #doChangeUpTile 					#label: '^' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -27 1 19 0 0 1.00537 -20 1 ) 					#name: #ActionButton7 					#model: #doChangeRightTile 					#label: '&gt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 205 0 -22 1 -22 1 0 1 ) 					#name: #ActionButton8 					#model: #doChangeDownTile 					#label: 'v' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 20 0 208 0 -19 1 ) 					#name: #ActionButton9 					#model: #doChangeLeftTile 					#label: '&lt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 177 -3 209 26 ) 					#name: #ActionButton10 					#model: #doChangeUpLeftTile 					#label: '.' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -26 1 -3 0 0 1.00537 26 0 ) 					#name: #ActionButton11 					#model: #doChangeUpRightTile 					#label: '.' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -22 1 -23 1 0 1.00134 0 1.0 ) 					#name: #ActionButton12 					#model: #doChangeDownRightTile 					#label: '.' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 -22 1 206 0 0 1.0 ) 					#name: #ActionButton13 					#model: #doChangeDownLeftTile 					#label: '.' 					#defaultable: true ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 42 195 142 216 ) 					#name: #SpinButton1 					#model: #zoom 					#isReadOnly: false 					#type: #number 					#low: 0 					#high: 21 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 6 630 117 652 ) 					#name: #ActionButton14 					#model: #doReset 					#label: 'Reset values' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 147 65 176 94 ) 					#name: #ActionButton15 					#model: #doPickPoint 					#label: 'X' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 35 266 146 294 ) 					#name: #ActionButton16 					#model: #doOpenGPX 					#label: 'Load Santander' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 35 288 146 316 ) 					#name: #doBuildNet 					#model: #doBuildNet 					#label: 'Draw net' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 28 403 ) 					#name: #CheckBox1 					#model: #doDisplayRange 					#label: 'Range' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 28 384 ) 					#name: #CheckBox2 					#model: #doDisplayNetwork 					#label: 'Network' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 28 422 ) 					#name: #CheckBox3 					#model: #doDisplayNodeName 					#label: 'Node name' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 17 367 169 447 ) 					#name: #GroupBox1 					#label: 'Display' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 6 340 ) 					#name: #Label8 					#label: 'Range' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 53 340 105 361 ) 					#name: #InputField5 					#model: #range 					#alignment: #right 					#type: #number 					#formatString: '#,##0' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 109 340 ) 					#name: #Label9 					#label: 'metre' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 6 603 117 630 ) 					#name: #ActionButton20 					#model: #doExportGpx 					#label: 'Export to file...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 120 378 165 399 ) 					#name: #ChooseNetworkColor 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) 					#model: #doChooseNetworkColor 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 120 400 165 421 ) 					#name: #ChooseRangeColor 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) 					#model: #doChooseRangeColor 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Core.Point} 4 3 ) 					#name: #LabelPosition 					#label: #labelPosition ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 120 422 165 443 ) 					#name: #ChooseNameColor 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 1024 1024 8191 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} #white ) 						#setSelectionForegroundColor: #(#{Graphics.ColorValue} 1024 1024 8191 ) ) 					#model: #doChooseNameColor 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 6 453 ) 					#name: #Label11 					#label: 'Networks available' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 9 475 168 600 ) 					#name: #NetworkList 					#model: #networkList 					#helpText: '' 					#multipleSelections: true 					#selectionType: #checkMark ) 				#(#{UI.CompositeSpecCollection} 					#collection: #() 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 60 763 126 787 ) 						#name: #theNetworkColor 						#colors: #(#{UI.LookPreferences} ) ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 35 310 146 338 ) 					#name: #ActionButton18 					#model: #buildNetAndSimulators 					#label: 'Build simulations' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 90 5 178 24 ) 					#name: #InputField6 					#isOpaque: true 					#model: #nodePName 					#tabable: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 4 27 ) 					#name: #Geometry 					#label: 'Geometry' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 6 703 117 726 ) 					#name: #ActionButton17 					#model: #doOpenPickcell 					#label: 'Send to pickcell' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 6 728 117 751 ) 					#name: #ActionButton19 					#model: #testMoving 					#label: 'Test move' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 35 244 146 272 ) 					#name: #ActionButton21 					#model: #doOpenGPXOnFile 					#label: 'Open GPX file...' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UIMapsv0 class</class-id> <category>useful workspaces</category><body package="Mapsv0" selector="openGMapGettingStarted">openGMapGettingStarted	"Schedule a view of the Getting Started Workspace."	"SimpleWorkspace openGettingStartedWorkspace."	| application |	application := SimpleWorkspace new.	application setWorkspace: GMapGettingStarted.	application open.	application builder window label: 'Getting Started'.	^application</body></methods><methods><class-id>Mapsv0TileCache class</class-id> <category>instance creation</category><body package="Mapsv0" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>GlobalMercator class</class-id> <category>instance creation</category><body package="Mapsv0" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>GlobalMercator class</class-id> <category>testing</category><body package="Mapsv0" selector="test">test	"self test"	| gm p m |	gm := self new.	p := 0 @ 0.	m := gm pixelToMeterNew: p zoom: 0.	^m</body></methods><methods><class-id>GlobalMercator class</class-id> <category>testing</category><body package="Mapsv0" selector="test2">test2	"POINT(-79.1923852433996 37.3317650468903)"	"Convert lat/lon from OSM format to WSG-84"	| loc osmLat osmLon osmPoint geoPoint testLat testLon geoLat geoLon |	testLat := 1.	testLon := 1.	osmPoint := testLat @ testLon.	loc := self new meterToLonLat: osmPoint.	osmLat := loc x.	osmLon := loc y.	geoPoint := self new latLonToMeter: osmLat lon: osmLon.	geoLat := geoPoint x .	geoLon := geoPoint y.	self halt.	^geoPoint</body></methods><methods><class-id>GlobalMercator class</class-id> <category>testing</category><body package="Mapsv0" selector="test1">test1	"POINT(-79.1923852433996 37.3317650468903)"	"Convert lat/lon from OSM format to WSG-84"	| loc osmLat osmLon osmPoint geoPoint testLat testLon geoLat geoLon |	testLat := -881565606 / 100.	testLon := 448545276 / 100.	osmPoint := testLat @ testLon.	loc := self new meterToLonLat: osmPoint.	osmLat := loc x.	osmLon := loc y.	geoPoint := self new latLonToMeter: osmLat lon: osmLon.	geoLat := geoPoint x * 100.	geoLon := geoPoint y * 100.	self halt.	^geoPoint</body></methods><methods><class-id>GlobalMercator class</class-id> <category>testing</category><body package="Mapsv0" selector="test3">test3	"POINT(-79.1923852433996 37.3317650468903)"	"Convert lat/lon from OSM format to WSG-84"	| loc osmLat osmLon osmPoint geoPoint testLat testLon geoLat geoLon |	testLat := -881565606 / 100.	testLon := 448545276 / 100.	osmPoint := testLat @ testLon.	loc := self new meterToLonLat: osmPoint.	osmLat := loc x.	osmLon := loc y.	geoPoint := self new latLonToMeter2: osmLat lon: osmLon.	geoLat := geoPoint x * 100.	geoLon := geoPoint y * 100.	self halt.	^geoPoint</body></methods><methods><class-id>NetworkOrganisation class</class-id> <category>instance creation</category><body package="Mapsv0" selector="withReachedNodes:">withReachedNodes: dico	^self new dicoNodesReached: dico</body></methods><methods><class-id>NetworkOrganisation class</class-id> <category>instance creation</category><body package="Mapsv0" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Mapsv0Tile class</class-id> <category>instance creation</category><body package="Mapsv0" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Mapsv0Tile class</class-id> <category>instance creation</category><body package="Mapsv0" selector="x:y:zoom:">x: x y: y zoom: z	| gt |	gt := self new.	gt		xTile: x;		yTile: y;		zoom: z.	^gt</body></methods><methods><class-id>NetworkPosition class</class-id> <category>testing</category><body package="Mapsv0" selector="test1">test1	"self test1"	(self lon: 3 lat: 4) inspect</body></methods><methods><class-id>NetworkPosition class</class-id> <category>testing</category><body package="Mapsv0" selector="test2">test2	"self test2"	(self lon: 3 lat: 4 alt: 1) inspect</body></methods><methods><class-id>NetworkPosition class</class-id> <category>instance creation</category><body package="Mapsv0" selector="lon:lat:">lon: lon lat: lat	^(self new)		longitude: lon;		latitude: lat</body></methods><methods><class-id>NetworkPosition class</class-id> <category>instance creation</category><body package="Mapsv0" selector="lon:lat:alt:">lon: lon lat: lat alt: alt	^(self lon: lon lat: lat)		altitude: alt</body></methods><methods><class-id>NetworkPosition class</class-id> <category>instance creation</category><body package="Mapsv0" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>NetworkPosition class</class-id> <category>instance creation</category><body package="Mapsv0" selector="metre:mercator:">metre: metre mercator: mercator	^(self new)		metre: metre;		mercator: mercator;		convertFromMetre;		yourself</body></methods><methods><class-id>MapTileCache class</class-id> <category>instance creation</category><body package="MapAccess" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>MapTile class</class-id> <category>instance creation</category><body package="MapAccess" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>MapTile class</class-id> <category>instance creation</category><body package="MapAccess" selector="x:y:zoom:">x: x y: y zoom: zoom	^(self new)		x: x;		y: y;		zoom: zoom;		yourself</body></methods><methods><class-id>MapServerConnection class</class-id> <category>map server</category><body package="MapAccess" selector="getOCMTileUrl:tileY:tileZoom:">getOCMTileUrl: stringTileX tileY: stringTileY tileZoom: stringTileZoom	^('http://a.tile2.opencyclemap.org/transport/' , stringTileZoom , '/' , stringTileX , '/' , stringTileY , '.png') asURI</body></methods><methods><class-id>MapServerConnection class</class-id> <category>server name</category><body package="MapAccess" selector="selectedServer:">selectedServer: anInteger	^SelectedServer := anInteger</body></methods><methods><class-id>MapServerConnection class</class-id> <category>testing</category><body package="MapAccess" selector="test1">test1	"self test1"	| x y zoom |	x := 0.	y := 0.	zoom := 0.	^self x: x y: y zoom: zoom</body></methods><methods><class-id>MapServerConnection class</class-id> <category>map server</category><body package="MapAccess" selector="getGoogleMapTileUrl:tileY:tileZoom:">getGoogleMapTileUrl: stringTileX tileY: stringTileY tileZoom: stringTileZoom	^('http://mt.google.com/vt/x=' , stringTileX , '&amp;y=' , stringTileY , '&amp;z=' , stringTileZoom) asURI</body></methods><methods><class-id>MapServerConnection class</class-id> <category>server name</category><body package="MapAccess" selector="serverNameFor:">serverNameFor: aByteSymbol	^aByteSymbol asString readStream upTo: $:</body></methods><methods><class-id>MapServerConnection class</class-id> <category>accessing</category><body package="MapAccess" selector="mapClient">mapClient	^MapClient isNil ifFalse: [MapClient] ifTrue: [MapClient := Net.HttpClient connectToHost: 'mt.google.com']</body></methods><methods><class-id>MapServerConnection class</class-id> <category>server name</category><body package="MapAccess" selector="selectedServer">selectedServer	^SelectedServer isNil ifTrue: [SelectedServer := 1] ifFalse: [SelectedServer]</body></methods><methods><class-id>MapServerConnection class</class-id> <category>http</category><body package="MapAccess" selector="x:y:zoom:">x: x y: y zoom: zoom	| stringTileX stringTileY stringTileZoom url req resp |	stringTileX := x printString.	stringTileY := y printString.	stringTileZoom := zoom printString.	"url := self getGoogleMapTileUrl: stringTileX tileY: stringTileY tileZoom: stringTileZoom."	"url := self getOSMTileUrl: stringTileX tileY: stringTileY tileZoom: stringTileZoom."	url := self				perform: (self serverPath at: self selectedServer)				with: stringTileX				with: stringTileY				with: stringTileZoom.	req := Net.HttpRequest get: url.	req fieldValueAt: 'User-Agent' put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	resp := req execute.	^resp</body></methods><methods><class-id>MapServerConnection class</class-id> <category>accessing</category><body package="MapAccess" selector="mapClient:">mapClient: anObject	MapClient := anObject</body></methods><methods><class-id>MapServerConnection class</class-id> <category>server name</category><body package="MapAccess" selector="serverPath">serverPath	"self serverPath"	^self class organization listAtCategoryNamed: #'map server'</body></methods><methods><class-id>MapServerConnection class</class-id> <category>instance creation</category><body package="MapAccess" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>MapServerConnection class</class-id> <category>server name</category><body package="MapAccess" selector="serverListDico">serverListDico	"self serverListDico"	| url sName dico |	url := self class organization listAtCategoryNamed: #'map server'.	sName := url collect: [:each | self serverNameFor: each].	dico := Dictionary new: url size.	sName with: url do: [:iname :iurl | dico at: iname put: iurl].	^dico</body></methods><methods><class-id>MapServerConnection class</class-id> <category>server name</category><body package="MapAccess" selector="serverList">serverList	"self serverList"	| url sName |	url := self class organization listAtCategoryNamed: #'map server'.	sName := url collect: [:each | self serverNameFor: each].	^sName</body></methods><methods><class-id>MapServerConnection class</class-id> <category>map server</category><body package="MapAccess" selector="getOSMTileUrl:tileY:tileZoom:">getOSMTileUrl: stringTileX tileY: stringTileY tileZoom: stringTileZoom	^('http://tile.openstreetmap.org/' , stringTileZoom , '/' , stringTileX , '/' , stringTileY , '.png') asURI</body></methods><methods><class-id>ShapefileReader class</class-id> <category>old computing</category><body package="MapAccess" selector="pointGPSCircle">pointGPSCircle	"En Cours"	"| point angle d pointB |	point := GPSPosition new.	point		latitude: 48.38793d;		longitude: -4.48192d.	angle := 10 degreesToRadians.	d := 200.	pointB := GPSPosition new." 	"pointB latitude:point latitude + d*angle cos;			longitude: "</body></methods><methods><class-id>ShapefileReader class</class-id> <category>instance creation</category><body package="MapAccess" selector="file:">file: aFilenameOrString	self checkFile: aFilenameOrString.	^self new filename: aFilenameOrString asString</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="allSHPFromFile:">allSHPFromFile: filename	"self testAllSHP"	| shape nbShape allShape colShape |	self unloadLibraries.	shape := self new.	nbShape := shape SHPSize: filename.	allShape := shape allSHP: filename.	colShape := (0 to: nbShape - 1) collect: 					[:i |					| oneShape |					oneShape := allShape at: i.					oneShape].	^colShape</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="test1bis:">test1bis: aFilename	"self test1bis"	| shape tabShape nbShape |	self unloadLibraries.	shape := self new.	tabShape := OrderedCollection new.	nbShape := shape SHPSize: aFilename.	(0 to: nbShape - 1) do: [:i | tabShape add: (shape oneSHP: aFilename with: i)].	^tabShape</body></methods><methods><class-id>ShapefileReader class</class-id> <category>old computing</category><body package="MapAccess" selector="distance2Point:with:with:">distance2Point: pointA with: pointB with:reference	"distance entre deux points"	"| a b |	a:=reference translateToGPSFromPoint:pointA.	b:=reference translateToGPSFromPoint:pointB.	^self distance2PointGps: a with: b."</body></methods><methods><class-id>ShapefileReader class</class-id> <category>old computing</category><body package="MapAccess" selector="testSHPPositionTab">testSHPPositionTab	" MyShapes testSHPPositionTab inspect "	"| origine |	origine:= GPSPosition new.	origine		latitude: 48.409666667s;		longitude: -4.520861111s.	^(MyShapes new toSHPPositionTab:'/export/users/wsn/Herry/Netgen/building.shx ' origin:origine scale: 0.000026096s @ -0.000017879s)"</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="testReadAllObjectsMultiPart">testReadAllObjectsMultiPart	"self testReadAllObjectsMultiPart"	| sr nb objCol objColMultiPart |	sr := self testGetInfo.	nb := sr entities.	objCol := (0 to: nb - 1) collect: 					[:i |					| obj |					obj := sr readObject: i.					obj].	objColMultiPart := objCol select: 					[:each |					| p |					p := each memberAt: #nParts.					p &gt; 1].	objColMultiPart inspect.	self halt.	objCol do: [:each | sr destroyObject: each].	^sr close</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="test2">test2	"self test2"	| tabShape nbShape colBat |	tabShape := self test1.	nbShape := tabShape size.	colBat := tabShape collect: 					[:shape |					| b positions nVertices gp |					nVertices := shape memberAt: #nVertices.					positions := (0 to: nVertices - 1) collect: 									[:index |									| longitude latitude altitude |									longitude := (shape memberAt: #padfX) at: index.									latitude := (shape memberAt: #padfY) at: index.									altitude := (shape memberAt: #padfZ) at: index.									gp := GeoPosition lon: longitude lat: latitude elevation: altitude.									gp].					b := Batiment withPositions: positions.					b].	^colBat</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="allBatimentsFromShapefile:">allBatimentsFromShapefile: aFilename	"self testAllBatiments"	| colShape |	colShape := self allSHPFromFile: aFilename.	^colShape collect: 			[:shape |			| b positions nVertices gp |			nVertices := shape memberAt: #nVertices.			positions := (0 to: nVertices - 1) collect: 							[:index |							| longitude latitude altitude |							longitude := (shape memberAt: #padfX) at: index.							latitude := (shape memberAt: #padfY) at: index.							altitude := (shape memberAt: #padfZ) at: index.							gp := GeoPosition lon: longitude lat: latitude elevation: altitude.							gp].			b := Batiment withPositions: positions.			b]</body></methods><methods><class-id>ShapefileReader class</class-id> <category>old computing</category><body package="MapAccess" selector="getShapeClose:with:with:">getShapeClose: GPSPoint with: puis with: GPSPositionTab 	"retourne les batiments en finction de la distance "	| tabClose |	tabClose := OrderedCollection new.	GPSPositionTab do: 			[:tab |			| close |			close := False.			tab do: 					[:aGPSPosition |					| d |					d := ShapefileReader distance2PointGps: GPSPoint with: aGPSPosition .					d &lt; puis ifTrue: [close := True]].			close = True ifTrue: [tabClose add: tab]].	^tabClose</body></methods><methods><class-id>ShapefileReader class</class-id> <category>old computing</category><body package="MapAccess" selector="ShapeOriente:with:with:">ShapeOriente: GPSPoint with: GPSPositionTabClose with:gf	"retourne les batiments en finction de la distance "	"| tabFinal tabNE tabNO tabSE tabSO |	tabFinal := Dictionary new.	tabNE := OrderedCollection new.	tabNO := OrderedCollection new.	tabSE := OrderedCollection new.	tabSO := OrderedCollection new.	GPSPositionTabClose do: 			[:tab |			| tabTest |			tabTest := OrderedCollection new.			tabTest				add: False;				add: False;				add: False;				add: False.			tab do: 					[:aGPSPosition |					| angle |					angle := Transmitter angle: GPSPoint with: (aGPSPosition convertFromOrigin: gf origin scale: gf scale).					(angle &gt;= 0) &amp; (angle &lt; 90) ifTrue: [tabTest at: 1 put: True].					(angle &gt;= 90) &amp; (angle &lt; 180) ifTrue: [tabTest at: 2 put: True].					(angle &gt;= 180) &amp; (angle &lt; 270) ifTrue: [tabTest at: 3 put: True].					(angle &gt;= 270) &amp; (angle &lt; 360) ifTrue: [tabTest at: 4 put: True]].			((tabTest at: 1) = True) | (((tabTest at: 2) = True)&amp;((tabTest at: 4) = True)) ifTrue: [tabSE add: tab].			((tabTest at: 2) = True)| (((tabTest at: 1) = True)&amp;((tabTest at: 3) = True)) ifTrue: [tabSO add: tab].			((tabTest at: 3) = True)| (((tabTest at: 2) = True)&amp;((tabTest at: 4) = True)) ifTrue: [tabNO add: tab].			((tabTest at: 4) = True)| (((tabTest at: 3) = True)&amp;((tabTest at: 1) = True)) ifTrue: [tabNE add: tab]].	tabFinal at:#SE put:tabSE;at:#SO put:tabSO;at:#NO put:tabNO;at:#NE put:tabNE.	^tabFinal"</body></methods><methods><class-id>ShapefileReader class</class-id> <category>old computing</category><body package="MapAccess" selector="distance2PointGps:with:">distance2PointGps: pointA with: pointB	"distance entre deux points"	| rlo1 rla1 rlo2 rla2 dlo dla a b earth_radius |	earth_radius := 6378137.	rlo1 := pointA longitude degreesToRadians.	rla1 := pointA latitude degreesToRadians.	rlo2 := pointB longitude degreesToRadians.	rla2 := pointB latitude degreesToRadians.	dlo := (rlo2 - rlo1) / 2.	dla := (rla2 - rla1) / 2.	a := dla sin * dla sin + (rla1 cos * rla2 cos * dlo sin * dlo sin).	b := 2 * (a sqrt / (1 - a) sqrt) arcTan.	^(earth_radius * b) asInteger</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="testReadObject">testReadObject	"self testReadObject"	| sr obj |	sr := self testGetInfo.	obj := sr readObject: 0.	self halt.	sr destroyObject: obj.	^sr close</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="testAllSHP">testAllSHP	"self testAllSHP"	| shape nbShape filename allShape colShape |	self unloadLibraries.	shape := self new.	filename := Dialog				requestFileName: 'Open SHX file'				default: '*.shx'				version: #mustBeOld				ifFail: [^nil].	nbShape := shape SHPSize: filename.	allShape := shape allSHP: filename.	colShape := (0 to: nbShape - 1) collect: 					[:i |					| oneShape |					oneShape := allShape at: i.					oneShape].	^colShape</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="testReadAllObjectsMultiPart2">testReadAllObjectsMultiPart2	"self testReadAllObjectsMultiPart2"	| sr nb objCol objColMultiPart |	sr := self testGetInfo.	nb := sr entities.	objCol := (0 to: nb - 1) collect: 					[:i |					| obj |					obj := sr readObject: i.					obj].	objColMultiPart := objCol select: 					[:each |					| parts startVertex nVertices verticesX |					parts := each memberAt: #nParts.					nVertices := each memberAt: #nVertices.					verticesX := (0 to: nVertices - 1) collect: [:v | each memberAt: #padfX at: v].					parts &gt; 1 ifTrue: [startVertex := (0 to: parts - 1) collect: [:i | each memberAt: #panPartStart at: i]] ifFalse: [startVertex := #(0)].					parts &gt; 1].	objColMultiPart inspect.	self halt.	objCol do: [:each | sr destroyObject: each].	^sr close</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="testGetInfo">testGetInfo	"self testGetInfo"	| sr |	sr := self testOpen.	sr getInfo.	^sr</body></methods><methods><class-id>ShapefileReader class</class-id> <category>old computing</category><body package="MapAccess" selector="testGetShapeClose">testGetShapeClose	"  MyShapes testGetShapeClose inspect.  "	"| tabGPSPosition point tabClose |	tabGPSPosition := MyShapes new testGPSPositionTab.	point := GPSPosition new.	point		latitude: 48.400431d;		longitude: -4.501357d.	tabClose:=self getShapeClose: point with: 200 with: tabGPSPosition.	^tabClose."</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="test1">test1	"self test1"	| shape tabShape nbShape filename |	self unloadLibraries.	shape := self new.	tabShape := OrderedCollection new.	filename := Dialog				requestFileName: 'Open SHX file'				default: '*.shx'				version: #mustBeOld				ifFail: [^nil].	nbShape := shape SHPSize: filename.	(0 to: nbShape - 1) do: [:i | tabShape add: (shape oneSHP: filename with: i)].	^tabShape</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="test2bis:">test2bis: aFilename	"self test2"	| tabShape nbShape colBat |	tabShape := self test1bis: aFilename.	nbShape := tabShape size.	colBat := tabShape collect: 					[:shape |					| b positions nVertices gp |					nVertices := shape memberAt: #nVertices.					positions := (0 to: nVertices - 1) collect: 									[:index |									| longitude latitude altitude |									longitude := (shape memberAt: #padfX) at: index.									latitude := (shape memberAt: #padfY) at: index.									altitude := (shape memberAt: #padfZ) at: index.									gp := GeoPosition lon: longitude lat: latitude elevation: altitude.									gp].					b := Batiment withPositions: positions.					b].	^colBat</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="testOpen">testOpen	"self testOpen"	| filename sr |	filename := Dialog				requestFileName: 'Open SHX file'				default: '*.shx'				version: #mustBeOld				ifFail: [^nil].	sr := self file: filename.	sr open.	^sr</body></methods><methods><class-id>ShapefileReader class</class-id> <category>instance creation</category><body package="MapAccess" selector="checkFile:">checkFile: aFilenameOrString	"Both '.shp' and '.shx files must be in the same directory, with the same name"	| s f |	s := aFilenameOrString asFilename asString copy.	"Test if '.shp' file exists"	s at: s size put: $p.	f := s asFilename.	f exists ifFalse: [self error: 'file ' , s , ' is missing.'].	f isReadable ifFalse: [self error: 'file ' , s , ' is not readable.'].	"Test if '.shx' file exists"	s at: s size put: $x.	f := s asFilename.	f exists ifFalse: [self error: 'file ' , s , ' is missing.'].	f isReadable ifFalse: [self error: 'file ' , s , ' is not readable.']</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="testReadAllObjects">testReadAllObjects	"self testReadAllObjects"	| sr nb objCol b |	sr := self testGetInfo.	nb := sr entities.	objCol := (0 to: nb - 1) collect: 					[:i |					| obj |					obj := sr readObject: i.					obj].	self halt.	b := Bag new.	objCol do: 			[:each |			"p := each memberAt: #nSHPType."			| p |			p := each memberAt: #nParts.			b add: p].	b inspect.	objCol do: [:each | sr destroyObject: each].	^sr close</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="testAllBatiments">testAllBatiments	"self testAllBatiments"	| colShape |	colShape := self testAllSHP.	^colShape collect: 					[:shape |					| b positions nVertices gp |					nVertices := shape memberAt: #nVertices.					positions := (0 to: nVertices - 1) collect: 									[:index |									| longitude latitude altitude |									longitude := (shape memberAt: #padfX) at: index.									latitude := (shape memberAt: #padfY) at: index.									altitude := (shape memberAt: #padfZ) at: index.									gp := GeoPosition lon: longitude lat: latitude elevation: altitude.									gp].					b := Batiment withPositions: positions.					b].</body></methods><methods><class-id>ShapefileReader class</class-id> <category>old computing</category><body package="MapAccess" selector="testDistance2GPSPosition">testDistance2GPSPosition	"  MyShapes testDistance2GPSPosition inspect "	"| pointC pointD d |	pointC := GPSPosition new.	pointC		latitude: 48.38793d;		longitude: -4.48192d.	pointD := GPSPosition new.	pointD		latitude: 48.38759d;		longitude: -4.48116d.	d := self distance2PointGps: pointC with: pointD.	^d"</body></methods><methods><class-id>ShapefileReader class</class-id> <category>testing</category><body package="MapAccess" selector="readAllObjectsFromShapefile:">readAllObjectsFromShapefile: aFilenameOrString	"self readAllObjectsFromShapefile"	| sr nb objCol batCol newBat | 	sr := self file: aFilenameOrString asString.	sr open.	sr getInfo.	nb := sr entities.	objCol := (0 to: nb - 1) collect: 					[:i |					| obj |					obj := sr readObject: i.					obj].	batCol := OrderedCollection new.	objCol do: 					[:shape |					| positions nVertices |					nVertices := shape memberAt: #nVertices.					nVertices &gt; 0 ifTrue: [ 					positions := OrderedCollection new: nVertices.					(0 to: nVertices - 1) do: 									[:index |									| longitude latitude altitude gp |									longitude := (shape memberAt: #padfX) at: index.									latitude := (shape memberAt: #padfY) at: index.									altitude := (shape memberAt: #padfZ) at: index.									gp := GeoPosition lon: longitude lat: latitude elevation: altitude.									positions add: gp].								positions last = positions first ifFalse: [ positions add: positions first ].					newBat  := Batiment withPositions: positions.					batCol add: newBat].].	objCol do: [:each | sr destroyObject: each].	sr close.	^batCol</body></methods><methods><class-id>MapAccess class</class-id> <category>instance creation</category><body package="MapAccess" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>GeoPosition class</class-id> <category>instance creation</category><body package="MapAccess" selector="lon:lat:elevation:">lon: lon lat: lat elevation: ele	^(self lon: lon lat: lat) elevation: ele</body></methods><methods><class-id>GeoPosition class</class-id> <category>instance creation</category><body package="MapAccess" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>GeoPosition class</class-id> <category>instance creation</category><body package="MapAccess" selector="lon:lat:">lon: lon lat: lat	^(self new)		longitude: lon;		latitude: lat</body></methods><methods><class-id>GeoPosition class</class-id> <category>accessing</category><body package="MapAccess" selector="initialResolution">initialResolution	^initialResolution isNil		ifFalse: [initialResolution]		ifTrue: 			[| tileSize |			tileSize := 256.			initialResolution := 2 * Double pi * 6378137 / tileSize.			initialResolution]</body></methods><methods><class-id>GeoPosition class</class-id> <category>accessing</category><body package="MapAccess" selector="originShift">originShift	^originShift isNil		ifFalse: [originShift]		ifTrue: 			[originShift := 2 * Double pi * 6378137 / 2.0.			originShift]</body></methods><methods><class-id>UIMapAccess class</class-id> <category>interface specs</category><body package="MapAccess" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Display Map Access' 			#min: #(#{Core.Point} 592 412 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 934 415 1920 1201 ) 			#menu: #mainMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 12 42 ) 					#name: #LabelLongitude 					#label: 'lon' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 50 44 150 65 ) 					#name: #Longitude 					#model: #longitude 					#type: #number 					#formatString: '0.0000000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 12 72 ) 					#name: #LabelLatitude 					#label: 'lat' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 50 72 150 93 ) 					#name: #Latitude 					#model: #latitude 					#type: #number 					#formatString: '0.0000000' ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.Rectangle} 11 98 154 102 ) 					#name: #Divider1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 14 112 ) 					#name: #LabelXTile 					#label: 'xTile' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 48 109 148 130 ) 					#name: #XTile 					#model: #xTile 					#type: #number 					#formatString: '0' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 14 140 ) 					#name: #LabelYTile 					#label: 'yTile' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 48 140 148 161 ) 					#name: #YTile 					#model: #yTile 					#type: #number 					#formatString: '0' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 14 170 ) 					#name: #LabelZoom 					#label: 'zoom' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 50 169 150 190 ) 					#name: #Zoom 					#model: #zoom 					#helpText: 'Values are between 0 and 21' 					#isReadOnly: false 					#type: #number 					#formatString: '0' 					#low: 0 					#high: 21 ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 205 0 23 0 -24 1 -22 1 ) 					#name: #TileViewHolder 					#component: #tileView ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 42 196 152 233 ) 					#name: #Refresh 					#model: #doUpdateTile 					#label: 'Refresh map' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 42 235 152 272 ) 					#name: #Reset 					#model: #doReset 					#label: 'Reset values' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 42 274 152 311 ) 					#name: #Inspect 					#model: #inspect 					#helpText: 'Open inpect window' 					#label: 'Inspect it...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 42 313 152 350 ) 					#name: #Close 					#model: #doQuit 					#label: 'Close window' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 203 0 -3 0 -21 1 26 0 ) 					#name: #MoveNorth 					#model: #doMoveNorth 					#label: '^' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -27 1 19 0 0 1.00537 -20 1 ) 					#name: #MoveEast 					#model: #doMoveEast 					#label: '&gt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 205 0 -22 1 -22 1 0 1 ) 					#name: #MoveSouth 					#model: #doMoveSouth 					#label: 'v' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 20 0 208 0 -19 1 ) 					#name: #MoveWest 					#model: #doMoveWest 					#label: '&lt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 177 -3 209 26 ) 					#name: #MoveNW 					#model: #doMoveNW 					#label: '.' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -26 1 -3 0 0 1.00537 26 0 ) 					#name: #MoveNE 					#model: #doMoveNE 					#label: '.' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -22 1 -23 1 0 1.00134 0 1.0 ) 					#name: #MoveSE 					#model: #doMoveSE 					#label: '.' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 -22 1 206 0 0 1.0 ) 					#name: #MoveSW 					#model: #doMoveSW 					#label: '.' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 42 388 152 425 ) 					#name: #ActionButton1 					#model: #doOpenShapefile 					#label: 'Open shapefile...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 42 436 152 473 ) 					#name: #ActionButton2 					#model: #doOpenTileCacheConfig 					#label: 'Cache control...' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 50 7 129 30 ) 					#name: #InputEchelle 					#model: #echelle 					#alignment: #right 					#type: #number 					#formatString: '#,##0.000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 9 10 ) 					#name: #Label1 					#label: 'Echelle' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 131 9 ) 					#name: #Label2 					#label: 'm / pixel' ) ) ) )</body></methods><methods><class-id>Batiment class</class-id> <category>instance creation</category><body package="MapAccess" selector="withPositions:">withPositions: anArray	^self new contour: anArray</body></methods><methods><class-id>Batiment class</class-id> <category>instance creation</category><body package="MapAccess" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>UIMapTileCacheConfig class</class-id> <category>interface specs</category><body package="MapAccess" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Map tile cache configuration' 			#bounds: #(#{Graphics.Rectangle} 928 381 1188 577 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 12 13 249 185 ) 					#name: #GroupBox1 					#label: 'Map server' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 25 39 ) 					#name: #RadioButton1 					#model: #server 					#label: 'Google Map' 					#select: #googleMap ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 25 68 ) 					#name: #RadioButton2 					#model: #server 					#label: 'Open Cycle Map' 					#select: #OCM ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 25 99 ) 					#name: #RadioButton3 					#model: #server 					#label: 'Open Street Map' 					#select: #OSM ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 26 136 148 175 ) 					#name: #EmptyCache 					#model: #doEmptyCache 					#label: 'Empty cache' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 346 6 448 46 ) 					#name: #ActionButton1 					#label: 'Bouton' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 458 4 558 25 ) 					#name: #InputField1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 458 30 558 51 ) 					#name: #InputField2 ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 350 126 559 330 ) 					#name: #List1 					#model: #dicoList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 376 85 561 117 ) 					#name: #MenuButton1 ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.Rectangle} 379 55 560 81 ) 					#name: #ComboBox1 					#model: #dicoBox 					#type: #string 					#comboList: #dicoChoices ) ) ) )</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>interface specs</category><body package="QuickMap" selector="librarySpec">librarySpec	"Tools.UIPainter new openOnClass: self andSelector: #librarySpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 450 402 855 610 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 1 218 ) 					#name: #Label1 					#label: 'Library path:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 94 214 225 237 ) 					#name: #InputField1 					#model: #libraryPath ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 1 264 ) 					#name: #Label2 					#label: 'Library file:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 94 260 225 283 ) 					#name: #InputField2 					#model: #libraryFile ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 228 214 302 237 ) 					#name: #ActionButton1 					#model: #doOpenLibraryPath 					#label: 'Change...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 228 260 302 283 ) 					#name: #ActionButton2 					#model: #doOpenLibraryFile 					#label: 'Change...' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 129 14 351 62 ) 					#name: #List1 					#model: #libraryDirectories 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 26 22 ) 					#name: #Label3 					#label: 'Directories:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 130 73 355 127 ) 					#name: #List2 					#model: #libraryFiles 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 28 86 ) 					#name: #Label4 					#label: 'Files:' ) ) ) )</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>resources</category><body package="QuickMap" selector="colorsImage">colorsImage	"UIMaskEditor new openOnClass: self andSelector: #colorsImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 5) at: 1 put: Graphics.ColorValue blue; at: 2 put: Graphics.ColorValue magenta; at: 3 put: Graphics.ColorValue white; at: 4 put: (Graphics.ColorValue scaledRed: 3693 scaledGreen: 3693 scaledBlue: 3693); at: 5 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4240 scaledBlue: 0); yourself)) usingBits: #[51 51 51 51 51 0 0 0 50 35 68 50 35 0 0 0 50 35 68 50 35 0 0 0 51 51 51 51 51 0 0 0 49 19 34 50 35 0 0 0 49 19 34 50 35 0 0 0 51 51 51 51 51 0 0 0 50 35 0 50 35 0 0 0 50 35 0 50 35 0 0 0 51 51 51 51 51 0 0 0])</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>interface specs</category><body package="QuickMap" selector="colorsSpec">colorsSpec	"UIPainter new openOnClass: self andSelector: #appearanceSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 0 0 405 208 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(								#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 68 ) 					#name: #LabelA 					#label: 'Label' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 233 68 ) 					#name: #LabelB					#label: 'Label' )  ) ) )</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>interface specs</category><body package="QuickMap" selector="displaySpec">displaySpec	"Tools.UIPainter new openOnClass: self andSelector: #displaySpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 438 408 843 616 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 17 29 ) 					#name: #CheckBox1 					#model: #isAnimated 					#label: 'Animation' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 17 65 ) 					#name: #CheckBox2 					#model: #isPrefetching 					#helpText: '''Reduce screen flicker''' 					#label: 'Prefetching tiles' ) ) ) )</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>resources</category><body package="QuickMap" selector="net16x16">net16x16	"UIMaskEditor new openOnClass: self andSelector: #net16x16"	&lt;resource: #image&gt;	^CachedImage on: (((Image extent: 16@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 7) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6841 scaledGreen: 6841 scaledBlue: 6841); at: 3 put: Graphics.ColorValue white; at: 4 put: (Graphics.ColorValue scaledRed: 7387 scaledGreen: 7387 scaledBlue: 7387); at: 5 put: (Graphics.ColorValue scaledRed: 4175 scaledGreen: 4175 scaledBlue: 4175); at: 6 put: Graphics.ColorValue blue; at: 7 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); yourself)) usingBits: #[34 34 34 34 34 34 34 34 34 34 34 68 68 68 68 34 34 34 36 51 51 51 51 2 34 34 36 54 102 102 83 2 34 34 36 54 34 85 83 2 34 68 68 68 68 85 83 2 36 51 51 51 51 5 83 2 36 54 102 102 83 5 83 2 36 54 34 85 83 1 16 34 36 54 85 85 83 4 51 68 36 54 85 85 83 0 0 0 36 53 85 85 83 2 34 34 34 65 17 17 16 34 34 34 68 51 67 52 51 68 34 34 64 0 0 0 0 0 34 34 34 34 34 34 34 34 34 34])) convertForGraphicsDevice: Screen default)</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>interface specs</category><body package="QuickMap" selector="networkSpec">networkSpec	"Tools.UIPainter new openOnClass: self andSelector: #networkSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 438 408 843 616 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 4 39 ) 					#name: #CheckBoxUseProxy 					#model: #useProxy 					#label: 'Use proxy' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 5 68 ) 					#name: #LabelHostname 					#label: 'HTTP proxy:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 86 68 218 90 ) 					#name: #InputHostname 					#model: #proxyHostname ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 228 68 ) 					#name: #LabelPort 					#label: 'port:' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 263 68 335 90 ) 					#name: #SpinButtonPort 					#model: #proxyPort 					#alignment: #right 					#isReadOnly: false 					#type: #number 					#low: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 343 63 398 93 ) 					#name: #ApplyButton 					#model: #doApply 					#label: 'Apply' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>interface specs</category><body package="QuickMap" selector="basemapSpec">basemapSpec	"Tools.UIPainter new openOnClass: self andSelector: #basemapSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 587 456 992 664 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 6 ) 					#name: #Label1 					#label: 'Base map:' ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.Rectangle} 84 2 247 27 ) 					#name: #ComboBox1 					#model: #basemap 					#type: #object 					#comboList: #basemapChoices ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 34 ) 					#name: #Label2 					#label: 'Name:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 84 30 247 55 ) 					#name: #InputField1 					#model: #friendlyName ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 62 ) 					#name: #Label4 					#label: 'Zoom:' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 84 58 144 83 ) 					#name: #SpinButton1 					#model: #maxZoom 					#isReadOnly: false 					#type: #number 					#formatString: '0' 					#low: 0 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 163 62 ) 					#name: #Label5 					#label: 'Socket:' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 222 58 282 83 ) 					#name: #SpinButton2 					#model: #maxSocket 					#isReadOnly: false 					#type: #number 					#formatString: '0' 					#low: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 87 ) 					#name: #Label3 					#label: 'Get method:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.Rectangle} 84 86 402 183 ) 					#name: #TextEditor1 					#model: #getUriMethod 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Quick Map Configuration' 			#min: #(#{Core.Point} 412 284 ) 			#max: #(#{Core.Point} 412 588 ) 			#bounds: #(#{Graphics.Rectangle} 434 370 846 654 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 9 303 ) 					#name: #CheckBoxUseProxy 					#model: #useProxy 					#label: 'Use proxy' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 5 285 408 369 ) 					#name: #GroupBoxNetwork 					#label: 'Network' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 332 ) 					#name: #LabelHostname 					#label: 'HTTP proxy:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 91 332 223 354 ) 					#name: #InputHostname 					#model: #proxyHostname ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 233 332 ) 					#name: #LabelPort 					#label: 'port:' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 268 332 340 354 ) 					#name: #SpinButtonPort 					#model: #proxyPort 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 348 327 403 357 ) 					#name: #ApplyButton 					#model: #doApply 					#label: 'Apply' 					#defaultable: true ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 8 373 396 519 ) 					#name: #GroupBox1 					#label: 'Tile cache' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 19 411 157 505 ) 					#name: #List1 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 48 389 ) 					#name: #Label1 					#label: 'Base map' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 208 391 ) 					#name: #Label2 					#label: 'Zoom' ) 				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 4 0 408 0 -72 1 ) 					#name: #tabbing 					#model: #tabs 					#labels: #() ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -35 1 -1 1 0 0.994186 ) 					#name: #CloseButton 					#model: #doClose 					#label: 'Close' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -66 1 -1 1 -32 1 ) 					#name: #InspectButton 					#model: #inspect 					#label: 'Inspect...' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>resources</category><body package="QuickMap" selector="net16x16mask">net16x16mask	"UIMaskEditor new openOnClass: self andSelector: #net16x16mask"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 3 252 0 0 7 254 0 0 7 254 0 0 7 254 0 0 63 254 0 0 127 254 0 0 127 254 0 0 127 252 0 0 127 255 0 0 127 255 0 0 127 224 0 0 63 192 0 0 255 240 0 0 255 240 0 0 0 0 0 0]))</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>resources</category><body package="QuickMap" selector="printerImage">printerImage	"UIMaskEditor new openOnClass: self andSelector: #printerImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: ColorValue white; at: 5 put: ColorValue green; at: 6 put: ColorValue red; at: 7 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[34 34 34 34 38 102 34 34 34 34 34 34 99 51 102 34 34 34 34 38 51 51 51 0 34 34 38 99 51 51 48 34 34 38 99 99 51 51 2 34 38 99 17 22 99 48 32 2 99 17 68 17 22 96 38 96 99 51 17 85 17 22 102 96 99 17 51 17 22 102 102 96 99 17 17 54 102 102 102 96 102 17 17 22 102 102 96 2 38 102 17 22 102 96 6 2 32 17 102 22 96 6 96 2 34 0 17 96 6 96 2 34 34 34 0 22 96 2 34 34 34 34 34 34 34 34 34 34])</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>interface specs</category><body package="QuickMap" selector="tileCacheSpec">tileCacheSpec	"Tools.UIPainter new openOnClass: self andSelector: #tileCacheSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 440 424 840 601 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 1 89 40 ) 					#name: #ActionEmptyCache 					#model: #doEmptyCache 					#label: 'Empty cache' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UIQuickMapConfig class</class-id> <category>debugging</category><body package="QuickMap" selector="unStuck">unStuck	"When you open directly a tab interface spec, your window can not be closed! "	"You may execute the code below to release and unschedule windows! "	WindowManager allInstances do: 			[:inst |			inst scheduledWindows do: 					[:win |					win isNil						ifFalse: [win model class = self ifTrue: [inst unscheduleWindow: win]]]].	^self commentOnly</body></methods><methods><class-id>QuickTileOverlay class</class-id> <category>instance creation</category><body package="QuickMap" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>QuickTileOverlay class</class-id> <category>instance creation</category><body package="QuickMap" selector="x:y:zoom:">x: x y: y zoom: zoom	"Answer a newly created and initialized instance."	^(self new)		x: x;		y: y;		zoom: zoom;		yourself</body></methods><methods><class-id>PseudoTile class</class-id> <category>instance creation</category><body package="QuickMap" selector="id:">id: aPoint	^self new position: aPoint</body></methods><methods><class-id>PseudoTile class</class-id> <category>instance creation</category><body package="QuickMap" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>QuickConnection class</class-id> <category>instance creation</category><body package="QuickMap" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>UIQuickMap class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecMove">windowSpecMove	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecMove"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'QuickMap' 			#min: #(#{Core.Point} 314 260 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 669 343 1349 943 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 8191 8029 7609 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 14 0 68 0 32 0 ) 					#name: #ActionButton1 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 45 0 69 0 63 0 ) 					#name: #ActionButton2 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 72 0 69 0 90 0 ) 					#name: #ActionButton3 					#model: #doMove 					#label: 'Move' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 9 0 101 0 67 0 119 0 ) 					#name: #ActionButton4 					#model: #doStopMove 					#label: 'Stop' 					#defaultable: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 86 0 4 0 0 1.04396 0 1.00552 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 7700 7700 7700 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7700 7700 7700 ) ) 					#component: #quickTileMap ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 9 0 135 0 59 0 153 0 ) 					#name: #btnLoadMeteoData 					#model: #doLoadMeteoData 					#label: 'Load data' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 9 0 173 0 68 0 191 0 ) 					#name: #btnStation 					#model: #doShowStationsonMap 					#label: 'Load station' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="satellite32x32mask">satellite32x32mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #satellite32x32mask"	&lt;resource: #image&gt;	^(Image extent: 32@32 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 12 0 0 0 60 0 0 0 112 0 0 0 224 0 0 1 192 0 0 7 128 0 0 15 6 0 0 28 14 0 0 56 60 0 0 112 112 0 1 225 224 0 3 195 128 0 7 143 0 3 15 252 0 15 63 248 0 60 127 252 1 240 127 252 7 192 255 254 31 0 255 254 124 7 255 255 240 31 255 255 192 248 255 255 7 224 255 254 63 0 255 255 248 0 127 255 192 0 127 255 0 0 63 248 0 0 15 224 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="satellite32x17">satellite32x17	"Tools.UIMaskEditor new openOnClass: self andSelector: #satellite32x17"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 32@17 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(546 546 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 2730 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 3276 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 4914 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 3276 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3,@L3L3L3L3L3L3L3L3L3@H"KL3L3L4ICL3L3L3L0B8#L2@L3L4H!H$L3L3L3LH"63L2K,4HRH"P3L3L3L3BE.&amp;.&lt;2@H"HRP3L3L3L3L0!ER8"&lt;2@H"P3L3L3L3L3LHTX!X L\BP3L3L3L3L3L3BBTU%U H@3L3L3L3L3L3L2H"IEQXA0L3L3L3L3L3L4H$H"IDV@\CL3L3L3L3L4H$P$H"UE G@3L3L3L3L4H)QBP".HUWA0L3L3L3L4H$QIP$L3B8]0\CL3L3L3H)H"H$L3L3LK\G@3L3L3L"H)H$L3L3L3L0@CL3L3L3L"H"L3L3L3L3L3L3L3L3L3L$P3L3L3L3L3L3L3L3L3Lb'))</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="satellite32x21">satellite32x21	"Tools.UIMaskEditor new openOnClass: self andSelector: #satellite32x21"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 32@21 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 770 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 3180 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5300 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 2890 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 2890 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4240 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1316 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 2633 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 770 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4240 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5557 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6617 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 4240 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 1060 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(513 513 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 2376 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 4497 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(513 256 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3950 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5814 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4497 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(770 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 1830 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6360 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5300 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 2633 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 1060 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 1060 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 4753 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(256 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1573 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(513 513 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2376 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6360 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5557 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 2890 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(256 256 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(770 770 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6070 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 5814 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(256 256 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 2633 2633)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ @@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ @@F0@B@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ @@DA@PH@@B@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ @@DRHPDA@P@@HB@ HB@ HB@ @@@@HB@ HB@ HB@ @@F1@PB!@PDA@S@@HB@ HB@ H@D!HG@@HB@ HB@ @@BA,PDA@DHA@PF0@@@ HB@ HB@ @!@AHR@@HB@ H@F1@ BA@PDA,(F0@@@ HB@ HB@ HB@ @RD!H@@ HB@A8PDA@JDA@PD@@@@ HB@ HB@ HB@ H@@ @@D#P@MPHZBQ,PD@TQD@@@@ HB@ HB@ HB@ HB@ HB@ HOA!T$@@D@CA@PL @@@ HB@ HB@ HB@ HB@ HB@ @@@",3B1PKFB(.L @@@ HB@ HB@ HB@ HB@ HB@ @@DA@@KA0NE@8UI1T@@ HB@ HB@ HB@ HB@ HB@ @@DA@P@CT@E!X@IBP-@ HB@ HB@ HB@ HB@ HB@ @@DA\PDA@W@@4VE!X_F@XB@ HB@ HB@ HB@ HB@!\@DA\PD@(PDA@@MPLVH3@%@@DB@ HB@ HB@ HB@ HBE1@PB!@PDCDP@@@B@ @YD!HRLQ4B@ HB@ HB@ HB@ H@DA@P@A@P@@@B@ HB@!\GD!HRC@HB@ HB@ HB@ HB@ @PDA@&amp;@@@B@ HB@ HBE2&lt;@D!H1@ HB@ HB@ HB@ HB@ @P@@@B@ HB@ HB@ HBB!HRD @B@ HB@ HB@ HB@ HB@ @B@ HB@ HB@ HB@ @WD"&lt;@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ H@@@HB@ HB@ HB@ HB@ HB'))</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="earth16x16mask">earth16x16mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #earth16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0])</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="satellite32x21mask">satellite32x21mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #satellite32x21mask"	&lt;resource: #image&gt;	^(Image extent: 32@21 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 12 0 0 0 60 0 0 0 254 0 0 3 254 0 224 15 255 1 240 63 255 1 248 127 252 0 248 255 240 1 126 255 192 0 31 255 0 0 223 252 0 3 255 240 0 15 255 192 0 63 255 192 0 255 255 224 0 255 231 240 0 255 131 240 0 254 3 240 0 120 1 240 0 32 3 224 0 0 0 192 0])</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="proxyCompleteMenu">proxyCompleteMenu	"Tools.MenuEditor new openOnClass: self andSelector: #proxyMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Google app' 					#catalogID: #QuickTileProxyGapp ) 				#nameKey: #QuickTileProxyGapp 				#value: #QuickTileProxyGapp ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Open Cycle Map' 					#catalogID: #QuickTileProxyOCM ) 				#nameKey: #QuickTileProxyOCM 				#value: #QuickTileProxyOCM ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Google api v2' 					#catalogID: #QuickTileProxyGapiv2 ) 				#nameKey: #QuickTileProxyGapiv2 				#value: #QuickTileProxyGapiv2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Open Street Map' 					#catalogID: #QuickTileProxyOSM ) 				#nameKey: #QuickTileProxyOSM 				#value: #QuickTileProxyOSM ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Map Quest' 					#catalogID: #QuickTileProxyQuest1 ) 				#nameKey: #QuickTileProxyQuest1 				#value: #QuickTileProxyQuest1 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Thunderforest' 					#catalogID: #QuickTileProxyThunderforest ) 				#nameKey: #QuickTileProxyThunderforest 				#value: #QuickTileProxyThunderforest ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Hill Shading' 					#catalogID: #QuickTileProxyHillShading ) 				#nameKey: #QuickTileProxyHillShading 				#value: #QuickTileProxyHillShading ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Google api v3' 					#catalogID: #QuickTileProxyGapiv3 ) 				#nameKey: #QuickTileProxyGapiv3 				#value: #QuickTileProxyGapiv3 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Google sat' 					#catalogID: #QuickTileProxyGkhm ) 				#nameKey: #QuickTileProxyGkhm 				#value: #QuickTileProxyGkhm ) 			#(#{UI.MenuItem} 				#rawLabel: 'ArcGis' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AMenuItem 								#defaultString: 'Arcgis World Imagery' 								#catalogID: #QuickTileProxyArcgisWorldImagery ) 							#nameKey: #QuickTileProxyArcgisWorldImagery 							#value: #QuickTileProxyArcgisWorldImagery ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AMenuItem 								#defaultString: 'Arcgis World Hillshade' 								#catalogID: #QuickTileProxyArcgisWorldHillshade ) 							#nameKey: #QuickTileProxyArcgisWorldHillshade 							#value: #QuickTileProxyArcgisWorldHillshade ) ) #(2 ) nil ) ) ) #(10 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>UIQuickMap class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'QuickMap' 			#min: #(#{Core.Point} 314 260 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 939 419 1724 1070 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 1 0 56 0 30 0 ) 					#name: #ActionButton1 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0 28 0 57 0 57 0 ) 					#name: #ActionButton2 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0 55 0 57 0 84 0 ) 					#name: #ActionButton3 					#model: #doConfig 					#label: 'Config...' 					#defaultable: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 54 0 0 0 0 1.0 0 1.0 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) ) 					#component: #quickTileMap ) ) ) )</body></methods><methods><class-id>UIQuickMap class</class-id> <category>private</category><body package="QuickMap" selector="closedHand">closedHand	^ClosedHandCursor isNil		ifFalse: [ClosedHandCursor]		ifTrue: [ClosedHandCursor := self buildClosedHandCursor]</body></methods><methods><class-id>UIQuickMap class</class-id> <category>class initialization</category><body package="QuickMap" selector="satelliteIcon3">satelliteIcon3	^SatelliteIcon3</body></methods><methods><class-id>UIQuickMap class</class-id> <category>class initialization</category><body package="QuickMap" selector="satelliteIcon2">satelliteIcon2	^SatelliteIcon2</body></methods><methods><class-id>UIQuickMap class</class-id> <category>interface opening</category><body package="QuickMap" selector="openChoose">openChoose	self openOn: self new withSpec: #windowSpecChoose</body></methods><methods><class-id>UIQuickMap class</class-id> <category>class initialization</category><body package="QuickMap" selector="satelliteIcon4">satelliteIcon4	^SatelliteIcon4</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="earth16x16">earth16x16	"Tools.UIMaskEditor new openOnClass: self andSelector: #earth16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3790 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3918 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 4079 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 3276 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4946 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3597 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4850 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4143 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4111 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 4079 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 3115 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3404 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 2987 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4625 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5846 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 3115 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3918 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4561 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 3340 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 3244 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4111 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 4079 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 3019 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2923 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5814 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4689 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 3147 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3372 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 3147 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3597 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 4143 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5717 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5749 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3372 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4432 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4561 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3726 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3726 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3854 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 4207 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 3115 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 3147 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 3180 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3629 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3597 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3693 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3886 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 3212 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4368 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4657 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 3533 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5749 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5717 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 3115 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 3212 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 3244 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 3276 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5203 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3790 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3790 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 4464 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 3083 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6327 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4400 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 3115 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3661 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 3437 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5332 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5781 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3340 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2344 2826 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4946 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3629 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3854 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3854 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 3147 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2923 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4818 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6199 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3437 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3501 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 3437 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3918 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 3372 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 2858 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3276 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4529 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 3019 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 3469 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5235 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 4047 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6199 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 3340 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3790 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 3469 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 3276 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 3308 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3661 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4143 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 3212 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 3180 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3437 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 3404 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3661 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3726 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 4207 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 3147 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 3115 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 3212 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3469 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4400 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 5589 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3726 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4272 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3469 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 3212 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3790 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 4111 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 3244 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 3372 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3597 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6681 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4079 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7034 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2409 2890 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 3180 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 3115 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 3404 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 3276 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3693 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5717 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3308 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3918 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 3083 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4946 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6327 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3790 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3822 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5910 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 2987 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 3147 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 3180 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3661 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 4143 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4593 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 3147 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2987 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3469 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3886 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4207 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4240 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 3244 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 3244 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3661 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3950 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3950 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 3147 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 3051 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4850 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5428 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4336 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5781 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 3180 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 3212 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3629 4946)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '.K"8!D6VTF O0;"8^YPI!K"8.IPA^6D?T'']OH5"+*;!9.I9BMD%/+4 &lt;RVA&lt;T[1G.JU6/;FL!"&lt;9.@I"HI6!.K!&gt;%R:RI#X;]WJYZ4Z&gt;@LGE1 &amp;T&amp;8-G2K]GM&lt;BT"22T E&gt;T*ZB8.CV6"3^''DD6-EE^C![5:.K!?FK19H 1Z (:"AIRP&amp;@NAZ$A''LU.5/B";S(*8OSBF/@VG^["()IQY[PZ3IFQ%M9PS1K"K_Z-CX8!GT42Q,%Q0+!$]WATKCZ)9.C([USN9QA&gt;ZQYN4W!Y,.IRTJ&lt;\%(8,-A8.\G''LH.K"K/IP)+AE1U *INBGB.K"8!H-G.IQ8PX42.$.K.D68.@@a'))</body></methods><methods><class-id>UIQuickMap class</class-id> <category>private</category><body package="QuickMap" selector="buildClosedHandCursor">buildClosedHandCursor	| c |	c := Cursor new.	c instVarNamed: 'errorCode' put: 0.	c instVarNamed: 'hotSpot' put: 0 @ 0.	c instVarNamed: 'image' put: self cursorHand image.	c instVarNamed: 'mask' put: self cursorHandMask.	c instVarNamed: 'name' put: 'closed hand'.	^c</body></methods><methods><class-id>UIQuickMap class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecChoose">windowSpecChoose	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecChoose"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'QuickMap' 			#min: #(#{Core.Point} 314 260 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 300 212 980 812 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -2 1 56 30 ) 					#name: #ActionButton1 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 28 57 57 ) 					#name: #ActionButton2 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 55 57 84 ) 					#name: #ActionButton3 					#model: #doConfig 					#label: 'Config...' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 87 53 113 ) 					#name: #MenuButton1 					#model: #currentProxy 					#menu: #proxyMenu ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 54 0 0 0 0 1.0 0 1.0 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) ) 					#component: #quickTileMap ) ) ) )</body></methods><methods><class-id>UIQuickMap class</class-id> <category>private</category><body package="QuickMap" selector="resetConfig">resetConfig	SavedSession := nil.	self initialize</body></methods><methods><class-id>UIQuickMap class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecGpredict">windowSpecGpredict	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecGpredict"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'QuickMap' 			#min: #(#{Core.Point} 314 260 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 337 275 1017 875 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -2 1 56 30 ) 					#name: #ActionButton1 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 28 57 57 ) 					#name: #ActionButton2 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 55 57 84 ) 					#name: #ActionButton3 					#model: #doConfig 					#label: 'Config...' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 87 53 113 ) 					#name: #MenuButton1 					#model: #currentProxy 					#menu: #proxyMenu ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 78 0 0 0 0 1.00128 0 0.996705 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) ) 					#component: #quickTileMap ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 119 57 148 ) 					#name: #ActionButton4 					#model: #doOpenGpredict 					#label: 'Gpredict' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 179 63 210 ) 					#name: #ActionButton5 					#model: #doBuildNet 					#label: 'Build net' 					#defaultable: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.Rectangle} 76 0 78 597 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 50 					#minBelowSize: 256 					#aboveWidgets: '#ActionButton1 #ActionButton2 #MenuButton1 #ActionButton3 #ActionButton4 #ActionButton5' 					#belowWidgets: '#ViewHolder1' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -3 208 80 241 ) 					#name: #ActionButton6 					#model: #doBuildGraph 					#label: 'Build graph' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 7 291 38 321 ) 					#name: #ActionButton7 					#model: #doSetSensorZone 					#label: #cursorCrossHair 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 6 261 39 295 ) 					#name: #ActionButton8 					#model: #doMoveMap 					#label: #cursorOpenHand 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 3 340 73 363 ) 					#name: #InputField1 					#model: #sensorsNumber 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 150 69 183 ) 					#name: #ActionButton9 					#model: #doOpenGpredictFileReader 					#label: 'GPredict2' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 410 76 436 ) 					#name: #ActionButton10 					#model: #doSatPathDuration 					#label: 'Satellite path' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 62 389 ) 					#name: #Label1 					#label: 'h' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 5 389 56 410 ) 					#name: #InputField2 					#model: #satPathDuration 					#type: #number 					#formatString: '#,##0.00' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 436 76 462 ) 					#name: #ActionButton11 					#model: #doDeleteNet 					#label: 'Delete net' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 473 71 510 ) 					#name: #ActionButton12 					#model: #doGetPath 					#label: 'Get path' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 2 538 74 562 ) 					#name: #InputField3 					#model: #pickModelRange 					#type: #number 					#formatString: '0' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 4 517 ) 					#name: #Label2 					#label: 'Range (m):' ) ) ) )</body></methods><methods><class-id>UIQuickMap class</class-id> <category>interface opening</category><body package="QuickMap" selector="openMove">openMove	self openOn: self new withSpec: #windowSpecMove</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="cursorHandMask">cursorHandMask	"Tools.UIMaskEditor new openOnClass: self andSelector: #cursorHandMask"	&lt;resource: #image&gt;	^(Image extent: 16@14 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 13 176 0 0 31 252 0 0 31 254 0 0 15 254 0 0 31 254 0 0 63 254 0 0 63 252 0 0 31 252 0 0 15 248 0 0 7 248 0 0 7 248 0 0 0 0 0 0])</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="proxyMenu">proxyMenu	"Tools.MenuEditor new openOnClass: self andSelector: #proxyMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Open Street Map' 					#catalogID: #QuickTileProxyOSM ) 				#nameKey: #QuickTileProxyOSM 				#value: #QuickTileProxyOSM ) 			#(#{UI.MenuItem} 				#rawLabel: 'WSN Maps' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AMenuItem 								#defaultString: 'Great Britain' 								#catalogID: #QuickTileProxyGreatBritain ) 							#nameKey: #QuickTileProxyBritain 							#value: #QuickTileProxyBritain ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AMenuItem 								#defaultString: 'France' 								#catalogID: #QuickTileProxyFrance ) 							#nameKey: #QuickTileProxyFrance 							#value: #QuickTileProxyFrance ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AMenuItem 								#defaultString: 'Vietnam' 								#catalogID: #QuickTileProxyVietnam ) 							#nameKey: #QuickTileProxyVietnam 							#value: #QuickTileProxyVietnam ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AMenuItem 								#defaultString: 'Indonesia' 								#catalogID: #QuickTileProxyIndonesia ) 							#nameKey: #QuickTileProxyIndonesia 							#value: #QuickTileProxyIndonesia 							#indication: false ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AMenuItem 								#defaultString: 'Senegal' 								#catalogID: #QuickTileProxySenegal ) 							#nameKey: #QuickTileProxySenegal 							#value: #QuickTileProxySenegal 							#indication: false ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AMenuItem 								#defaultString: 'Madagascar' 								#catalogID: #QuickTileProxyMadagascar ) 							#nameKey: #QuickTileProxyMadagascar 							#value: #QuickTileProxyMadagascar ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AMenuItem 								#defaultString: 'Central America' 								#catalogID: #QuickTileProxyCentralAmerica ) 							#nameKey: #QuickTileProxyCentralAmerica 							#value: #QuickTileProxyCentralAmerica ) ) #(7 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Google api v3' 					#catalogID: #QuickTileProxyGapiv3 ) 				#nameKey: #QuickTileProxyGapiv3 				#value: #QuickTileProxyGapiv3 ) 			#(#{UI.MenuItem} 				#rawLabel: 'ArcGis' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AMenuItem 								#defaultString: 'Arcgis World Imagery' 								#catalogID: #QuickTileProxyArcgisWorldImagery ) 							#nameKey: #QuickTileProxyArcgisWorldImagery 							#value: #QuickTileProxyArcgisWorldImagery ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AMenuItem 								#defaultString: 'Arcgis World Hillshade' 								#catalogID: #QuickTileProxyArcgisWorldHillshade ) 							#nameKey: #QuickTileProxyArcgisWorldHillshade 							#value: #QuickTileProxyArcgisWorldHillshade ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'All these can fail:' ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Map Quest' 					#catalogID: #QuickTileProxyQuest1 ) 				#nameKey: #QuickTileProxyQuest1 				#value: #QuickTileProxyQuest1 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Thunderforest' 					#catalogID: #QuickTileProxyThunderforest ) 				#nameKey: #QuickTileProxyThunderforest 				#value: #QuickTileProxyThunderforest ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AMenuItem 					#defaultString: 'Hill Shading' 					#catalogID: #QuickTileProxyHillShading ) 				#nameKey: #QuickTileProxyHillShading 				#value: #QuickTileProxyHillShading ) ) #(4 4 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>UIQuickMap class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecShapefile">windowSpecShapefile	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecShapefile"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'QuickMap' 			#min: #(#{Core.Point} 314 260 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 450 250 1130 850 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 0 50 14 ) 					#name: #ActionButton0 					#flags: 0 					#label: '&lt;&lt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 23 57 52 ) 					#name: #ActionButton1 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 50 57 79 ) 					#name: #ActionButton2 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 77 57 106 ) 					#name: #ActionButton3 					#model: #doConfig 					#label: 'Config...' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 109 53 135 ) 					#name: #MenuButton1 					#model: #currentProxy 					#menu: #proxyMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 137 57 166 ) 					#name: #ActionButton4 					#model: #doOpenShapefile 					#label: 'Open...' 					#defaultable: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.Rectangle} 51 0 53 599 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 10 					#minBelowSize: 256 					#aboveWidgets: '#ActionButton0' 					#belowWidgets: '#ViewHolder1' ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 54 0 0 0 0 1.0 0 1.0 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #black ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) ) 					#component: #quickTileMap ) ) ) )</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="satellite32x17mask">satellite32x17mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #satellite32x17mask"	&lt;resource: #image&gt;	^(Image extent: 32@17 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 1 192 0 0 7 224 28 0 63 240 127 0 63 253 254 0 63 255 248 0 63 255 224 0 63 255 128 0 63 254 0 0 63 254 0 0 255 254 0 3 255 254 0 15 255 254 0 63 241 254 0 127 192 126 0 255 0 28 0 124 0 0 0 56 0 0 0])</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="satellite16x16">satellite16x16	"Tools.UIMaskEditor new openOnClass: self andSelector: #satellite16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3822 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 1092 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4914 8191)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[102 102 102 136 136 102 6 102 102 102 88 102 102 0 160 102 6 102 134 98 34 32 74 6 96 102 134 34 34 32 164 160 102 6 135 34 34 16 74 6 102 96 134 113 17 32 160 102 102 102 134 34 119 32 6 102 102 102 131 34 119 80 102 102 102 102 6 85 136 32 102 102 102 96 160 34 119 32 102 102 102 10 74 2 119 32 102 102 96 148 164 160 119 32 102 102 9 74 74 7 119 32 102 102 96 164 160 119 119 32 102 102 102 10 0 34 119 1 102 102 102 96 102 0 0 102 102 102])</body></methods><methods><class-id>UIQuickMap class</class-id> <category>class initialization</category><body package="QuickMap" selector="satelliteIcon">satelliteIcon	^SatelliteIcon</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="cursorHand">cursorHand	"Tools.UIMaskEditor new openOnClass: self andSelector: #cursorHand"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@14 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette whiteBlack usingBits: #[0 0 0 0 0 0 0 0 13 176 0 0 18 76 0 0 16 10 0 0 8 2 0 0 24 2 0 0 32 2 0 0 32 4 0 0 16 4 0 0 8 8 0 0 4 8 0 0 4 8 0 0 0 0 0 0])</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="cursorOpenHand">cursorOpenHand	^Cursor hand asOpaqueImage</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="satellite32x32">satellite32x32	"Tools.UIMaskEditor new openOnClass: self andSelector: #satellite32x32"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 32@32 depth: 9 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(674 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5075 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 4786 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 1573 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1349 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1798 1798 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1766 1413 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1734 1477 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2023 2023 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 2184 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 2698 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3147 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3372 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3822 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3790 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4047 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5171 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5043 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(642 353 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5557 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5300 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6038 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 1734 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1959 1638 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 3822 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5075 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5300 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5814 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6038 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1734 1252 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3501 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 3822 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4079 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4593 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(706 706 706)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5075 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(931 931 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5621 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1349 1092 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 1381 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1606 1606 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1830 1830 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 2633 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 2890 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3244 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4079 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4593 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1124 867 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5878 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6103 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6295 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1766 1509 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1830 1830 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7195 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7066 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 2858 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3147 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 3629 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4336 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4625 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 4850 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5846 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 5846 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 3854 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(289 289 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(738 738 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5107 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1413 1413 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1766 1188 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2087 2087 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6584 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 1863 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 2987 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3147 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4336 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4111 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5621 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5364 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5621 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6103 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 2794 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 2923 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3404 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 3886 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4143 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 4882 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1606 1284 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2312 2152 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 6841 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2248 1863 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 2537 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7612 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3340 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4400 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4561 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(321 321 321)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(995 995 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1124 610 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1445 1445 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1606 1381 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6360 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6617 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 2569 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 2537 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3469 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 3437 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 3661 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4368 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 3918 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5396 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5653 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1830 1252 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6199 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6841 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 6874 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7612 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 2890 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 2955 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 3886 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 2698 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4175 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5171 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1220 1092 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6006 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6424 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 6874 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7130 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 1991 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 2730 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3083 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3308 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3212 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4432 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 4689 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(578 578 578)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1252 1252 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6649 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2376 2376 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 2826 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 2666 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 2730 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 3469 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4207 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(578 513 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5524 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5171 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5685 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 1927 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 2666 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3244 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 3726 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4207 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(160 128 160)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(353 256 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(546 385 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5460 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1027 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 1638 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 6906 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 2441 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 2409 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7677 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 3726 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(835 835 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1188 674 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1509 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6199 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1060 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2312 1798 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2409 2409 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 2376 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7677 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 2890 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3533 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 3501 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 3758 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4657 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 5557 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6199 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 5974 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6199 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3019 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 4240 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4497 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5492 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5749 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6199 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 6970 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 2794 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 7998 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 3758 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4047 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(192 192 192)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4497 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 4753 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1316 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1766 1734 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 2666 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7580 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 7998 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3404 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 4689 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(192 128 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(385 192 706)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5589 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1124 1092 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 5749 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6006 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 2698 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7837 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 2087 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 7998 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 3918 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4015 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1959 1702 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6745 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 2248 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 2087 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3180 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3083 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 3918 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4304 5171)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@H(@9PB[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@D @CP@M@D @&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,AE0CZ@D0@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0A%@O8@X B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@AT@5 CA@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@F,@C0@H@D\@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@Q0@1@@,@Q B[@I,@&amp;0B[@I,@Q0DR@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0CA@ET@WPB[@I,@&amp;0B[@I,@&amp;0DN@J&lt;AD B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@C,@T0DL@I,@&amp;0B[@I,@&amp;0C,@M0@8@AF@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@WP@+@C8@&amp;0B[@I,@&amp;0B[@K(@? A"@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@Q B0@MX@:0B[@I,@&amp;0B[@RH@B BC@D\@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0DU@MX@LPDX@I,@&amp;0B[@I,@" B-@AT@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@BL@JP@N@F,@&amp;0B[@I,AEP@1@CDAH B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@:0B7@I,@&amp;0B[@I,@9@CH@C(@P@CN@QX@E AL@G,@/PB[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@0PDA@K@@Y@B[@I,AEPC&gt;@O(@A B3@LX@''0@&lt;@CTAB C''@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@H0@1@K@@$PB[@I,@&amp;0DT@O8ACPBB@I(@1PA[@CP@RPBP@JD@_ AC@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@A8@NPC&gt;@@,@0PB[@I,@&amp;0B[@I,@\ CC@BT@I C0@OD@&gt;0CG@NL@[@@A@B0@0@B[@I,@&amp;0B[@I,@&amp;0B[@DX@DPB-@@0AEPB[@I,@&amp;0B[@I,@&amp;0@"@BP@8PA^@O0@E0B&gt;@P&lt;@20AN@A@@[@AT@GT@W0B[@I,@&amp;0B[@RH@''@@+@M&lt;AE@B[@I,@&amp;0B[@I,@&amp;0B[@I,AH0D$@Q4@?@C2@M\AG0C5@H@@T@AN@ML@L D&amp;@F(@&amp;0B[@LDA@0@@@@4AH B[@I,@&amp;0B[@I,@&amp;0B[@F,@X @^@@$@1 A8@I&lt;ADPA3@MHAA@A6@E @"0B8@OX@!P@G@L4@LPB,@@&lt;@;@B[@I,@&amp;0B[@I,@&amp;0B[@IH@!@C?@P @Q C[@ED@SPA @N$@)@D[@I,@=0B#@FD@R0BZ@A,@2PAS@CX@Q0B[@I,@&amp;0B[@I,@&amp;0BR@PX@? B4@ID@&amp;0B[@I,@,PBI@C @HPA#@L&lt;@7PDD@IX@+ A9@R@@.PDI@J@@GPB[@I,@&amp;0B[@I,@O0B\@G4@V @;@F,@&amp;0B[@I,@&amp;0B[@RT@G0B*@B(@&lt;0A?@IL@Q@B"@Q0@&gt; C:@B4@#0C^@I,@&amp;0B[@LD@C0B-@@ @/PAG@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0@=@J\@[0B+@K,@#PC(@A @&gt;PB\@DT@, CY@MT@S0C*@E4@5 DM@@&lt;AEPB[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0A7@LX@'' @(@G@@H@@S@@H@10A-@Q$@6@CJ@DH@+@@3@FX@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,A@ CP@KX@[ @7@I8@I0C8@J$@)PCL@AP@LPC&amp;@DX@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,AE0BX@GP@) BZ@I4AHPAV@G0@4PD"@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0C4@PT@F A1@Q8@*@@#@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0B[@I,b'))</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="cursorCrossHair">cursorCrossHair	^Cursor crossHair asOpaqueImage</body></methods><methods><class-id>UIQuickMap class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecConfig">windowSpecConfig	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecConfig"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Configuration' 			#bounds: #(#{Graphics.Rectangle} 432 318 848 707 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 24 10 78 40 ) 					#name: #ActionButton1 					#model: #doMove 					#label: 'Move' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UIQuickMap class</class-id> <category>class initialization</category><body package="QuickMap" selector="initialize">initialize	super initialize.	#{UIQuickMap.SatelliteIcon} binding reinitializeValue.	#{UIQuickMap.SatelliteIcon2} binding reinitializeValue.	#{UIQuickMap.SatelliteIcon3} binding reinitializeValue.	SatelliteIcon4 := OpaqueImage figure: self satellite32x32 shape: self satellite32x32mask</body></methods><methods><class-id>UIQuickMap class</class-id> <category>resources</category><body package="QuickMap" selector="satellite16x16mask">satellite16x16mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #satellite16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[3 200 0 0 15 252 0 0 143 254 0 0 79 255 0 0 47 254 0 0 31 252 0 0 15 248 0 0 15 240 0 0 15 240 0 0 31 240 0 0 63 240 0 0 127 240 0 0 255 240 0 0 127 240 0 0 63 240 0 0 19 192 0 0])</body></methods><methods><class-id>UIQuickMap class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecPickcell">windowSpecPickcell	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecPickcell"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 'QuickMap' 			#min: #(#{Core.Point} 953 681 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 180 76 1133 757 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00944386 0 0.352423 0 0.144806 0 0.51395 ) 					#name: #GroupBox1 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 8191 7167 ) ) ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 0 0.610866 0 0.0472193 0 0.632893 ) 					#name: #RadioButton2 					#model: #leModeDesPoints 					#label: 'Line' 					#select: #isLine ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 0 0.707783 0 0.147954 0 0.73862 ) 					#name: #ActionButton1 					#model: #doCopy 					#label: 'copy geopos' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.0346275 0 0.0690161 0 -0.0136411 0 0.0910426 ) 					#name: #ActionButton0 					#flags: 0 					#label: '&lt;&lt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 0 0.745962 0 0.147954 0 0.776799 ) 					#name: #ActionButton6 					#model: #showSerie 					#label: 'Add a shape' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0.10279 0 0.147954 0 0.133627 ) 					#name: #ActionButton2 					#model: #doDisplayCover 					#label: 'Display a cover' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0.155653 0 0.146905 0 0.18649 ) 					#name: #ActionButton3 					#model: #doConfig 					#label: 'Config Proxy' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0.208517 0 0.149003 0 0.239354 ) 					#name: #MenuButton1 					#model: #currentProxy 					#menu: #proxyMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0.26138 0 0.149003 0 0.292217 ) 					#name: #ActionButton4 					#model: #doOpenShapefile 					#label: 'Open shape' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0.314244 0 0.1532 0 0.345081 ) 					#name: #ActionButton5 					#model: #doOpenPickcell 					#label: 'PickCell...' 					#defaultable: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.156348 0 0.0 0 0.158447 0 0.998532 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 10 					#minBelowSize: 256 					#aboveWidgets: '#ActionButton0' 					#belowWidgets: '#ViewHolder1' ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.162644 0 0.00293686 0 0.983211 0 0.994126 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #black ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) ) 					#component: #quickTileMap ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0188877 0 0.365639 0 0.0388248 0 0.387665 ) 					#name: #Label1 					#label: 'Lon' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00734523 0 0.405286 0 0.140609 0 0.443465 ) 					#name: #InputField1 					#model: #mouseLon 					#style: #small ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00734523 0 0.475771 0 0.140609 0 0.51395 ) 					#name: #InputField2 					#model: #mouseLat 					#style: #small ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0188877 0 0.443465 0 0.0356768 0 0.465492 ) 					#name: #Label2 					#label: 'Lat' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 0 0.574156 0 0.0713536 0 0.594714 ) 					#name: #RadioButton1 					#model: #leModeDesPoints 					#label: 'Polygon' 					#select: #isPath ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 0 0.540382 0 0.0524659 0 0.562408 ) 					#name: #RadioButton3 					#model: #leModeDesPoints 					#label: 'Point' 					#select: #isPoint ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 0 0.837004 0 0.147954 0 0.867841 ) 					#name: #ActionButton7 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 0 0.790015 0 0.147954 0 0.820852 ) 					#name: #ActionButton8 					#model: #doSavePoints 					#label: 'Save points' 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 0 0.643172 0 0.0514166 0 0.665198 ) 					#name: #RadioButton4 					#model: #leModeDesPoints 					#label: 'Zone' 					#select: #isZone ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0671563 0 0.602056 0 0.137461 0 0.640235 ) 					#name: #InputField3 					#model: #leDiviseur 					#style: #small 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0.0469897 0 0.147954 0 0.0778267 ) 					#name: #ActionButton9 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 0 0.882526 0 0.147954 0 0.913363 ) 					#name: #ActionButton10 					#model: #showtrap 					#label: 'Show traps' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0682057 0 0.566813 0 0.13851 0 0.604993 ) 					#name: #InputField4 					#model: #laSoucheNom 					#style: #small 					#type: #string ) ) ) )</body></methods><methods><class-id>QuickTileModel class</class-id> <category>instance creation</category><body package="QuickMap" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>QuickTileProxyOverlay class</class-id> <category>instance creation</category><body package="QuickMap" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>QuickTileProxyHillShading class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	^'Hill Shading'</body></methods><methods><class-id>QuickTileProxyHillShading class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	^19</body></methods><methods><class-id>QuickTileProxyHillShading class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	^6</body></methods><methods><class-id>QuickTileProxyGapiv3 class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^'Google api v3'</body></methods><methods><class-id>QuickTileProxyGapiv3 class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^22</body></methods><methods><class-id>QuickTileProxyGapiv3 class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^22</body></methods><methods><class-id>QuickTileProxyGapiv2 class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^22</body></methods><methods><class-id>QuickTileProxyGapiv2 class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^22</body></methods><methods><class-id>QuickTileProxyGapiv2 class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^'Google api v2'</body></methods><methods><class-id>QuickTileProxyArcgisWorldHillshade class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	^23</body></methods><methods><class-id>QuickTileProxyArcgisWorldHillshade class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	^'ArcGis World Hillshade'</body></methods><methods><class-id>QuickTileProxyArcgisWorldHillshade class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	^2</body></methods><methods><class-id>QuickTileProxyGkhm class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	^'Google sat'</body></methods><methods><class-id>QuickTileProxyGkhm class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	^20</body></methods><methods><class-id>QuickTileProxyGkhm class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	^6</body></methods><methods><class-id>QuickTileProxyOSM class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	^'Open Street Map'</body></methods><methods><class-id>QuickTileProxyOSM class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	^19</body></methods><methods><class-id>QuickTileProxyOSM class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	^6</body></methods><methods><class-id>QuickTileProxyGapp class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	^'Google app'</body></methods><methods><class-id>QuickTileProxyGapp class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^22</body></methods><methods><class-id>QuickTileProxyGapp class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^22</body></methods><methods><class-id>QuickTileProxyQuest1 class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	^6</body></methods><methods><class-id>QuickTileProxyQuest1 class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	^19</body></methods><methods><class-id>QuickTileProxyQuest1 class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	^'Quest Map'</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecMove">windowSpecMove	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecMove"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'QuickMap' 			#min: #(#{Core.Point} 314 260 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 669 343 1349 943 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 8191 8029 7609 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 14 0 68 0 32 0 ) 					#name: #ActionButton1 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 45 0 69 0 63 0 ) 					#name: #ActionButton2 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 72 0 69 0 90 0 ) 					#name: #ActionButton3 					#model: #doMove 					#label: 'Move' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 9 0 101 0 67 0 119 0 ) 					#name: #ActionButton4 					#model: #doStopMove 					#label: 'Stop' 					#defaultable: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 86 0 4 0 0 1.04396 0 1.00552 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 7700 7700 7700 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7700 7700 7700 ) ) 					#component: #quickTileMap ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 9 0 135 0 59 0 153 0 ) 					#name: #btnLoadMeteoData 					#model: #doLoadMeteoData 					#label: 'Load data' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 9 0 173 0 68 0 191 0 ) 					#name: #btnStation 					#model: #doShowStationsonMap 					#label: 'Load station' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'QuickMap' 			#min: #(#{Core.Point} 314 260 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 939 419 1724 1070 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 1 0 56 0 30 0 ) 					#name: #ActionButton1 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0 28 0 57 0 57 0 ) 					#name: #ActionButton2 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0 55 0 57 0 84 0 ) 					#name: #ActionButton3 					#model: #doConfig 					#label: 'Config...' 					#defaultable: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 54 0 0 0 0 1.0 0 1.0 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) ) 					#component: #quickTileMap ) ) ) )</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	^2</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	^'ArcGis World Imagery'</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecGpredict">windowSpecGpredict	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecGpredict"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'QuickMap' 			#min: #(#{Core.Point} 314 260 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 337 275 1017 875 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -2 1 56 30 ) 					#name: #ActionButton1 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 28 57 57 ) 					#name: #ActionButton2 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 55 57 84 ) 					#name: #ActionButton3 					#model: #doConfig 					#label: 'Config...' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 87 53 113 ) 					#name: #MenuButton1 					#model: #currentProxy 					#menu: #proxyMenu ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 78 0 0 0 0 1.00128 0 0.996705 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) ) 					#component: #quickTileMap ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 119 57 148 ) 					#name: #ActionButton4 					#model: #doOpenGpredict 					#label: 'Gpredict' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 179 63 210 ) 					#name: #ActionButton5 					#model: #doBuildNet 					#label: 'Build net' 					#defaultable: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.Rectangle} 76 0 78 597 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 50 					#minBelowSize: 256 					#aboveWidgets: '#ActionButton1 #ActionButton2 #MenuButton1 #ActionButton3 #ActionButton4 #ActionButton5' 					#belowWidgets: '#ViewHolder1' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -3 208 80 241 ) 					#name: #ActionButton6 					#model: #doBuildGraph 					#label: 'Build graph' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 7 291 38 321 ) 					#name: #ActionButton7 					#model: #doSetSensorZone 					#label: #cursorCrossHair 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 6 261 39 295 ) 					#name: #ActionButton8 					#model: #doMoveMap 					#label: #cursorOpenHand 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 3 340 73 363 ) 					#name: #InputField1 					#model: #sensorsNumber 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 150 69 183 ) 					#name: #ActionButton9 					#model: #doOpenGpredictFileReader 					#label: 'GPredict2' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 410 76 436 ) 					#name: #ActionButton10 					#model: #doSatPathDuration 					#label: 'Satellite path' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 62 389 ) 					#name: #Label1 					#label: 'h' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 5 389 56 410 ) 					#name: #InputField2 					#model: #satPathDuration 					#type: #number 					#formatString: '#,##0.00' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 436 76 462 ) 					#name: #ActionButton11 					#model: #doDeleteNet 					#label: 'Delete net' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 473 71 510 ) 					#name: #ActionButton12 					#model: #doGetPath 					#label: 'Get path' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 2 538 74 562 ) 					#name: #InputField3 					#model: #pickModelRange 					#type: #number 					#formatString: '0' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 4 517 ) 					#name: #Label2 					#label: 'Range (m):' ) ) ) )</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecChoose">windowSpecChoose	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecChoose"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'QuickMap' 			#min: #(#{Core.Point} 314 260 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 300 212 980 812 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -2 1 56 30 ) 					#name: #ActionButton1 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 28 57 57 ) 					#name: #ActionButton2 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 55 57 84 ) 					#name: #ActionButton3 					#model: #doConfig 					#label: 'Config...' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 87 53 113 ) 					#name: #MenuButton1 					#model: #currentProxy 					#menu: #proxyMenu ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 54 0 0 0 0 1.0 0 1.0 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) ) 					#component: #quickTileMap ) ) ) )</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	^16</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecPickcell">windowSpecPickcell	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecPickcell"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 'QuickMap' 			#min: #(#{Core.Point} 953 681 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 521 228 1474 909 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00314795 0 0.352423 0 0.13851 0 0.51395 ) 					#name: #GroupBox1 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 8191 7167 ) ) ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00209864 0 0.602056 0 0.0472193 0 0.632893 ) 					#name: #RadioButton2 					#model: #leModeDesPoints 					#label: 'Line' 					#select: #isLine ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00314795 0 0.698972 0 0.141658 0 0.73862 ) 					#name: #ActionButton1 					#model: #doCopy 					#label: 'copy geopos' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.0409234 0 0.0602056 0 -0.0136411 0 0.0910426 ) 					#name: #ActionButton0 					#flags: 0 					#label: '&lt;&lt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00314795 0 0.737151 0 0.141658 0 0.776799 ) 					#name: #ActionButton6 					#model: #showSerie 					#label: 'Show points' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00104932 0 0.0939794 0 0.141658 0 0.133627 ) 					#name: #ActionButton2 					#model: #doDisplayCover 					#label: 'Display a cover' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00104932 0 0.146843 0 0.140609 0 0.18649 ) 					#name: #ActionButton3 					#model: #doConfig 					#label: 'Config...' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00104932 0 0.199706 0 0.142707 0 0.239354 ) 					#name: #MenuButton1 					#model: #currentProxy 					#menu: #proxyMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00104932 0 0.25257 0 0.142707 0 0.292217 ) 					#name: #ActionButton4 					#model: #doOpenShapefile 					#label: 'Open shape' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00104932 0 0.305433 0 0.146905 0 0.345081 ) 					#name: #ActionButton5 					#model: #doOpenPickcell 					#label: 'PickCell...' 					#defaultable: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.156348 0 0.0 0 0.158447 0 0.998532 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 10 					#minBelowSize: 256 					#aboveWidgets: '#ActionButton0' 					#belowWidgets: '#ViewHolder1' ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.162644 0 0.00293686 0 0.983211 0 0.994126 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #black ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) ) 					#component: #quickTileMap ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0125918 0 0.365639 0 0.0346275 0 0.387665 ) 					#name: #Label1 					#label: 'Lon' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00104932 0 0.403818 0 0.134313 0 0.443465 ) 					#name: #InputField1 					#model: #mouseLon 					#style: #small ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00104932 0 0.474302 0 0.134313 0 0.51395 ) 					#name: #InputField2 					#model: #mouseLat 					#style: #small ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0125918 0 0.443465 0 0.0314795 0 0.465492 ) 					#name: #Label2 					#label: 'Lat' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00209864 0 0.565345 0 0.0493179 0 0.596182 ) 					#name: #RadioButton1 					#model: #leModeDesPoints 					#label: 'Path' 					#select: #isPath ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00209864 0 0.531571 0 0.0524659 0 0.562408 ) 					#name: #RadioButton3 					#model: #leModeDesPoints 					#label: 'Point' 					#select: #isPoint ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00314795 0 0.828194 0 0.141658 0 0.867841 ) 					#name: #ActionButton7 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00314795 0 0.781204 0 0.141658 0 0.820852 ) 					#name: #ActionButton8 					#model: #doSavePoints 					#label: 'Save points' 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00209864 0 0.634361 0 0.0514166 0 0.665198 ) 					#name: #RadioButton4 					#model: #leModeDesPoints 					#label: 'Zone' 					#select: #isZone ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0524659 0 0.596182 0 0.132214 0 0.63583 ) 					#name: #InputField3 					#model: #leDiviseur 					#style: #small 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 -0.00104932 0 0.0381791 0 0.141658 0 0.0778267 ) 					#name: #ActionButton9 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecConfig">windowSpecConfig	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecConfig"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Configuration' 			#bounds: #(#{Graphics.Rectangle} 432 318 848 707 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 24 10 78 40 ) 					#name: #ActionButton1 					#model: #doMove 					#label: 'Move' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery class</class-id> <category>interface specs</category><body package="QuickMap" selector="windowSpecShapefile">windowSpecShapefile	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecShapefile"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'QuickMap' 			#min: #(#{Core.Point} 314 260 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 450 250 1130 850 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 0 50 14 ) 					#name: #ActionButton0 					#flags: 0 					#label: '&lt;&lt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 23 57 52 ) 					#name: #ActionButton1 					#model: #inspect 					#label: 'inspect' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 50 57 79 ) 					#name: #ActionButton2 					#model: #doMoveBrest 					#label: 'Brest' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 77 57 106 ) 					#name: #ActionButton3 					#model: #doConfig 					#label: 'Config...' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 109 53 135 ) 					#name: #MenuButton1 					#model: #currentProxy 					#menu: #proxyMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 137 57 166 ) 					#name: #ActionButton4 					#model: #doOpenShapefile 					#label: 'Open...' 					#defaultable: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.Rectangle} 51 0 53 599 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 10 					#minBelowSize: 256 					#aboveWidgets: '#ActionButton0' 					#belowWidgets: '#ViewHolder1' ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 54 0 0 0 0 1.0 0 1.0 ) 					#name: #ViewHolder1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #black ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 7709 7613 7356 ) ) 					#component: #quickTileMap ) ) ) )</body></methods><methods><class-id>QuickTileProxyThunderforest class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	^19</body></methods><methods><class-id>QuickTileProxyThunderforest class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	^6</body></methods><methods><class-id>QuickTileProxyThunderforest class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	^'Thunderforest'</body></methods><methods><class-id>QuickTileProxyOCM class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxZoom">maxZoom	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^18</body></methods><methods><class-id>QuickTileProxyOCM class</class-id> <category>instance creation</category><body package="QuickMap" selector="friendlyName">friendlyName	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^'Open Cycle Map'</body></methods><methods><class-id>QuickTileProxyOCM class</class-id> <category>instance creation</category><body package="QuickMap" selector="maxSocket">maxSocket	" *** This method was defined by QuickTileProxy class as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^6</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="geoRef1:">geoRef1: anObject	geoRef1 := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="cellDisplay">cellDisplay	^cellDisplay</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="mousePoint:">mousePoint: anObject	mousePoint := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="positionDictionary:">positionDictionary: cellPosArray	| name posDico key elementWithPoint line cellImage |	posDico := Dictionary new.	cellPosArray do: 			[:element |			name := element at: 4.			key := self positionFromName: name.			elementWithPoint := Array new: 5.			1 to: 3 do: [:i | elementWithPoint at: i put: (element at: i)].			elementWithPoint at: 4 put: key.			line := newCellArray at: key y .			cellImage := line at: key x  .			elementWithPoint at: 5 put: cellImage.			posDico at: key put: elementWithPoint].	^posDico</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="scanCellArray:">scanCellArray: seuil	| result row cellImage geoLoc extent corner x y verif |	self cellDisplay getCellFromGrid. 	self cellClassifier: CellClassifier new.	self cellClassifier dictionary: Dictionary new.	"si l'intention de ce set est  d'éviter de garder plusieurs fois la même cellule, c'est réussi  voir la disparition de la mer sur diego.png ou le senegal "	self cellClassifier pickModel: self. 	self newCellArray: (Array new: cellArray size).	"cellArray est un tableau 2D donnant acces aux images des cellules 	On balaie d'abord verticalement."	self cellArray keysAndValuesDo: 			[:yPos :rowOfCell |			"yPos est le numero de la ligne, rowOfCell est la ligne"			row := Array new: rowOfCell size.			newCellArray at: yPos put: row.			"On ajoute une ligne de meme taille  a newCellArray,			et on attaque un balayage horizontal de la ligne d'origine"			rowOfCell keysAndValuesDo: 					[:xPos :aCellImage |					aCellImage isNil						ifTrue: [self halt " a priori, cela ne devrait pas arriver !"]						ifFalse: 							["Creation et definition d'un objet cellImage, incluant les coordonnées xy et geo "							cellImage := CellImage new.							cellImage cellImage: aCellImage.							x := 1 + ((xPos - 1) * aCellImage width).							y := 1 + ((yPos - 1) * aCellImage height).							cellImage position: x @ y.							geoLoc := self computeLocationAtPoint: cellImage position.							cellImage geoPosition: geoLoc.							self setElevationAt: geoLoc forCellImage: cellImage.							extent := cellImage cellImage extent.							corner := cellImage position + extent.							geoLoc := self computeLocationAtPoint: corner.							cellImage geoPositionCorner: geoLoc.							"On passe le CellImage au classifier"							self cellClassifier cell: aCellImage.							"Calcul de la classe"							result := self cellClassifier scan: seuil.							"Intégration au cellImage"							cellImage signature: result.							"Et sauvegarde dans lenewCellArray"							row at: xPos put: (Array with: aCellImage with: result with: cellImage)]]].	self cellClassifier newCellArray: newCellArray.	verif := self cellArray size = self newCellArray size.	self cellArray with: self newCellArray do: [:caEl :newCaEl | verif := verif and: [ caEl size = newCaEl size ]].	"Dialog warn: 'scanCellArray mutation ', verif printString."	self doText. 	"self doTextToDegrib."	^self cellClassifier updateUICellShow: seuil</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="mapOrigin">mapOrigin	^mapOrigin</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="positionWindDictionary:">positionWindDictionary: cellPosArray	| name posDico key elementWithPoint line cellImage index i image found |	newCellArray isNil		ifTrue: 			[Dialog warn: 'must build cell system first'.			^nil]		ifFalse: 			[posDico := Dictionary new.			cellPosArray do: 					[:element |					name := element at: 6.					key := self positionFromName: name.					elementWithPoint := Array new: 6.					1 to: 3 do: [:iii | elementWithPoint at: iii put: (element at: iii)].					elementWithPoint at: 4 put: key.					line := newCellArray at: key y.					cellImage := line at: key x.					elementWithPoint at: 5 put: (cellImage at: 3).					elementWithPoint at: 6 put: name.					index := nil.					i := 0.					image := newCellArray detect: 									[:cell |									i := i + 1.									cellImage := (cell at: 3) at:3.									found := cellImage position = key.									found ifTrue: [index := i].									found]								ifNone: [nil].					posDico at: key put: elementWithPoint.					image isNil						ifFalse: 							[windArray at: i								put: (Array with: (elementWithPoint at: 4) with: (elementWithPoint at: 5))]].			^posDico]</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>building</category><body package="PickCell" selector="buildNet">buildNet	| networkGraph |	self filename isNil		ifTrue: 			[self filename: (Dialog requestFileName: 'name for this net'						default: self guessedName)].	networkGraph := NetworkGeometry				knownNetwork: self				drawing: true				title: self filename , 'Range' , self portee printString , 'Points'						, self points size printString.	^networkGraph</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="colNodes:">colNodes: anObject	colNodes := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="windArray:">windArray: anObject	windArray := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="connectivity:">connectivity: anObject	connectivity := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="bounds:">bounds: anObject	bounds := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="points">points	^points</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="points:">points: anObject	points := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="filename:">filename: anObject	filename := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="cellClassifier:">cellClassifier: anObject	cellClassifier := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>initialize-release</category><body package="PickCell" selector="defaultDisplayMode">defaultDisplayMode	displayModeDictionary at: #displayGrid put: true.	displayModeDictionary at: #displayImage put: true.	displayModeDictionary at: #displayGraph put: true.	displayModeDictionary at: #displayCoverCells put: true.	displayModeDictionary at: #displayZones put: true.	displayModeDictionary at: #displayWinds  put: false.</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="guessedName">guessedName	guessedName isNil ifTrue: [self guessedName: 'aCellSystem'].	^guessedName</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="mercator">mercator	^mercator</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="doTextToDegrib1">doTextToDegrib1	| textCollector loc string tp thisCell position string1 string2 ws rs  entryWS uwindString vwindString processName |	textCollector := Text new writeStream.	textCollector		nextPutAll: 'latitude,longitude,uwind,vwind,name';		cr.	self halt.	windArray := OrderedCollection new.	self newCellArray keysAndValuesDo: 			[:yPos :rowOfCell |			rowOfCell keysAndValuesDo: 					[:xPos :aCellImage | 					entryWS := Array new writeStream.					thisCell := aCellImage at: 3.					loc := thisCell geoPosition.					position := xPos @ yPos.					entryWS nextPut: position .					entryWS nextPut: loc.					ws := String new writeStream.					string := loc y printString.					string1 := string copyFrom: 1 to: string size - 1.					ws nextPutAll: 'echo -n  '.					ws						nextPutAll: string1;						nextPut: $,.					string := loc x printString.					string2 := string copyFrom: 1 to: string size - 1.					ws						nextPutAll: string2;						nextPutAll: '; degrib -in ~wsn/grib.grb -P -pnt '.					ws						nextPutAll: string1;						nextPut: $,;						nextPutAll: string2;						nextPut: $ ;						nextPutAll: ' | head -3  | grep GRD';						cr.					string := UnixProcess cshOne: ws contents.					rs := string readStream.					textCollector nextPutAll: (rs upTo: $U).					textCollector nextPut: $,.					4 timesRepeat: [rs upTo: $,].					textCollector nextPutAll: (uwindString := rs upTo: Character cr).					entryWS nextPut: uwindString asNumber.					textCollector nextPut: $,.					4 timesRepeat: [rs upTo: $,].					textCollector nextPutAll: (vwindString := rs upTo: Character cr).					entryWS nextPut: vwindString asNumber.					textCollector nextPut: $,.					textCollector						nextPutAll: (processName := self processNameAtPos: position);						cr.					entryWS nextPut: processName.					windArray add: entryWS contents]].	tp := UITextPoints new.	tp pickModel: self.	tp open.	tp leTexte value: textCollector contents.	self windArray: windArray.</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="processWinds:">processWinds: cellPos	| textCollector loc string tp thisCell position string1 string2 ws rs entryWS uwindString vwindString processName |	textCollector := Text new writeStream.	textCollector		nextPutAll: 'latitude,longitude,uwind,vwind,name';		cr.	windArray := OrderedCollection new.	self newCellArray keysAndValuesDo: 			[:yPos :rowOfCell |			rowOfCell keysAndValuesDo: 					[:xPos :aCellImage |					entryWS := Array new writeStream.					thisCell := aCellImage at: 3.					loc := thisCell geoPosition.					position := xPos @ yPos.					entryWS nextPut: position.					entryWS nextPut: loc.					ws := String new writeStream.					string := loc y printString.					string1 := string copyFrom: 1 to: string size - 1.					ws nextPutAll: 'echo -n  '.					ws						nextPutAll: string1;						nextPut: $,.					string := loc x printString.					string2 := string copyFrom: 1 to: string size - 1.					ws						nextPutAll: string2;						nextPutAll: ';degrib -in ~wsn/grib.grb -P -pnt '.					ws						nextPutAll: string1;						nextPut: $,;						nextPutAll: string2;						nextPut: $ ;						nextPutAll: ' | head -3  | grep GRD';						cr.					string := UnixProcess cshOne: ws contents.					rs := string readStream.					textCollector nextPutAll: (rs upTo: $U).					textCollector nextPut: $,.					4 timesRepeat: [rs upTo: $,].					textCollector nextPutAll: (uwindString := rs upTo: Character cr).					entryWS nextPut: uwindString asNumber.					textCollector nextPut: $,.					4 timesRepeat: [rs upTo: $,].					textCollector nextPutAll: (vwindString := rs upTo: Character cr).					entryWS nextPut: vwindString asNumber.					textCollector nextPut: $,.					textCollector						nextPutAll: (processName := self processNameAtPos: position);						cr.					entryWS nextPut: processName.					windArray add: entryWS contents]].	tp := UITextPoints new.	tp pickModel: self.	tp open.	tp leTexte value: textCollector contents.	self windArray: windArray</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="backgroundElevationAt:forCellImage:">backgroundElevationAt: geoLoc forCellImage: cellImage	self getElevation		ifTrue: 			[ElevationReader  reader backgroundElevationAt: geoLoc				forCellImage: cellImage].	^nil</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="bounds">bounds	^bounds</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="guessedDirectory:">guessedDirectory: anObject	guessedDirectory := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="setElevationAt:forCellImage:">setElevationAt: geoLoc forCellImage: cellImage	| elevation array |	self getElevation 		ifTrue: 			[array := Array with: geoLoc x with: geoLoc y.			elevation := GDALReader default getValueAtCoord: array.			elevation isNil ifFalse: [cellImage elevation: elevation]].	^nil</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="positionFromName:">positionFromName: nameString	| char xstream ystream key name |	name := nameString readStream.	char := name next.	xstream := String new writeStream.	[char isDigit] whileFalse: [char := name next].	[char isDigit] whileTrue: 			[xstream nextPut: char.			char := name next].	ystream := String new writeStream.	[char isDigit] whileFalse: [char := name next].	[name atEnd] whileFalse: 			[ystream nextPut: char.			char := name next].	ystream nextPut: char.	key := xstream contents asNumber @ ystream contents asNumber.	^key</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="portee">portee	^portee</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="cellArray">cellArray	^cellArray</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="getElevation">getElevation	^getElevation</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="computeMouseCell">computeMouseCell	| mp |	mp := self mousePoint value.	self mouseCell: (mp / self grid) rounded</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="geoRef2">geoRef2	^geoRef2</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="displayModeDictionary">displayModeDictionary	displayModeDictionary isNil		ifTrue: 			[displayModeDictionary := Dictionary new.			self defaultDisplayMode].	^displayModeDictionary</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="geoRef2:">geoRef2: anObject	geoRef2 := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="guessedDirectory">guessedDirectory	^guessedDirectory</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="doTextToDegrib">doTextToDegrib	| textCollector loc string tp thisCell position string1 string2 ws rs  entryWS uwindString vwindString processName |	textCollector := Text new writeStream.	textCollector		nextPutAll: 'latitude,longitude,uwind,vwind,name';		cr.	windArray := OrderedCollection new.	self newCellArray keysAndValuesDo: 			[:yPos :rowOfCell |			rowOfCell keysAndValuesDo: 					[:xPos :aCellImage | 					entryWS := Array new writeStream.					thisCell := aCellImage at: 3.					loc := thisCell geoPosition.					position := xPos @ yPos.					entryWS nextPut: position .					entryWS nextPut: loc.					ws := String new writeStream.					string := loc y printString.					string1 := string copyFrom: 1 to: string size - 1.					ws nextPutAll: 'echo -n  '.					ws						nextPutAll: string1;						nextPut: $,.					string := loc x printString.					string2 := string copyFrom: 1 to: string size - 1.					ws						nextPutAll: string2;						nextPutAll: ';degrib -in ~wsn/grib.grb -P -pnt '.					ws						nextPutAll: string1;						nextPut: $,;						nextPutAll: string2;						nextPut: $ ;						nextPutAll: ' | head -3  | grep GRD';						cr.					string := UnixProcess cshOne: ws contents.					rs := string readStream.					textCollector nextPutAll: (rs upTo: $U).					textCollector nextPut: $,.					4 timesRepeat: [rs upTo: $,].					textCollector nextPutAll: (uwindString := rs upTo: Character cr).					entryWS nextPut: uwindString asNumber.					textCollector nextPut: $,.					4 timesRepeat: [rs upTo: $,].					textCollector nextPutAll: (vwindString := rs upTo: Character cr).					entryWS nextPut: vwindString asNumber.					textCollector nextPut: $,.					textCollector						nextPutAll: (processName := self processNameAtPos: position);						cr.					entryWS nextPut: processName.					windArray add: entryWS contents]].	tp := UITextPoints new.	tp pickModel: self.	tp open.	tp leTexte value: textCollector contents.	self windArray: windArray.</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="mouseCell">mouseCell	^mouseCell</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>initialize-release</category><body package="PickCell" selector="setDefaultDirectory:">setDefaultDirectory: projectName	| dd |	dd := Filename defaultDirectory.	dd := dd asString.	self guessedDirectory: dd , '/Generated/' , projectName.	self guessedDirectory asFilename ensureDirectory.	^self guessedDirectory</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="getElevationAtPosition:">getElevationAtPosition: geoLoc	| latitude longitude url hr r result ws string http elevation status source bytes text jjasonResult |	self getElevation		ifTrue: 			[latitude := geoLoc y.			longitude := geoLoc x. 			ws := (String new: 100) writeStream.			http := 'http://maps.googleapis.com/maps/api/elevation/json?locations='.			ws nextPutAll: http.			string := latitude printString.			string := string copyFrom: 1 to: string size - 1.			ws nextPutAll: string.			ws nextPut: $,.			string := longitude printString.			string := string copyFrom: 1 to: string size - 1.			ws nextPutAll: string.			ws nextPutAll: '&amp;sensor=false'.			url := ws contents.			hr := Net.HttpRequest get: url.			[r := hr execute] on: Net.HttpException do: [:ex | r := ex parameter].			source := r value byteSource.			bytes := source contents.			text := bytes asByteString.	"copy changeClassTo: ByteString."	"ISO8859L1String."			status := r statusLine.			status code = '403'				ifTrue: 					[Dialog warn: 'elevation rejected'.					Dialog warn: text.					self getElevation: false]				ifFalse: 					[jjasonResult := JSON.JsonReader readFrom: text readStream.					result := jjasonResult at: 'results'.					result isEmpty						ifFalse: 							[elevation := result first at: 'elevation'.							^elevation]].			^nil	"copy changeClassTo: ISO8859L1String"]</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="mapOrigin:">mapOrigin: anObject	mapOrigin := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="cellArray:">cellArray: anObject	cellArray := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="pointDictionary">pointDictionary	^pointDictionary</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="grid:">grid: anObject	grid := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="highLightCells">highLightCells	^highLightCells</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>building</category><body package="PickCell" selector="buildNetAndDisplayOn:graphicParameters:">buildNetAndDisplayOn: aGC graphicParameters: graphicParameters	| graphAndComposite |	self filename isNil ifTrue: [self filename: (Dialog requestFileName: 'name for this net' default: 'aMap')].	graphAndComposite := NetworkGeometry				knownNetwork: self				drawingOnlyOn: aGC				title: self filename , 'Range' , self portee printString , 'Points' , self points size printString				parameters: graphicParameters.	^graphAndComposite</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="mercator:">mercator: anObject	mercator := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>initialize-release</category><body package="PickCell" selector="setDefaultDirectory">setDefaultDirectory	| dd |	dd := Filename defaultDirectory.	dd := dd asString.	self guessedDirectory: dd , '/Generated'.	self guessedDirectory asFilename ensureDirectory.	^self guessedDirectory</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="geoRef1">geoRef1	^geoRef1</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="zones:">zones: anObject	zones := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="displayModeDictionary:">displayModeDictionary: anObject	displayModeDictionary := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>building</category><body package="PickCell" selector="buildCellArrayModel">buildCellArrayModel	| cells | 	self cellArray isNil		ifFalse: 			[cells := self cellArray						collect: [:line | line collect: [:cell | CellImage with: cell]].			^cells].	^nil</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="highLightCells:">highLightCells: anObject	highLightCells := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="getElevation:">getElevation: anObject	getElevation := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="filename">filename	^filename</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="zones">zones	^zones</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="lastGraph:">lastGraph: anObject	lastGraph := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="windArray">windArray	^windArray</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="computeMouseCellAtPoint:">computeMouseCellAtPoint: aPoint	self mouseCell: (aPoint / self grid) rounded</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="connectivity">connectivity	^connectivity</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>parsing</category><body package="PickCell" selector="guessedNameForNet">guessedNameForNet	| name |	name := self guessedName.	name isNil		ifTrue: 			[name := 'aSystem'.			self guessedName: name].	^name , '.net'</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="nameDictionary:">nameDictionary: cellPosArray	| name posDico key |	posDico := Dictionary new.	cellPosArray do: 			[:element |			name := element at: 4.			key := self positionFromName: name.			posDico at: key put: element].	^posDico</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="newCellArray">newCellArray	^newCellArray</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="lastGraph">lastGraph	^lastGraph</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="cellDisplay:">cellDisplay: anObject	cellDisplay := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>building</category><body package="PickCell" selector="computeLocationAtPoint:">computeLocationAtPoint: aPixel	| zoom origin currentPoint mapArray meter lonlat |	mapArray := self mapOrigin.	mapArray isNil		ifFalse: 			[origin := mapArray at: 1.			zoom := mapArray at: 2.			currentPoint := origin + aPixel.			meter := self mercator pixelToMeterNew: currentPoint zoom: zoom.			lonlat := self mercator meterToLonLat: meter.			^lonlat			"m := gm pixelToMeterNew: currentPoint zoom: zoom.			^gm meterToLonLat: m"]</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	super initialize.	self mousePoint: nil asValue.	self mercator: GlobalMercator new.	self getElevation: true.	self setDefaultDirectory</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="writeColor:">writeColor: pixel	| myFN ws |	myFN := '../colorfile' asFilename.	ws := myFN writeStream.	(255 * pixel red) truncated printOn: ws.	ws space.	(255 * pixel green) truncated printOn: ws.	ws space.	(255 * pixel blue) truncated printOn: ws.	ws cr.	ws close</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="positionCoverDictionary:">positionCoverDictionary: cellPosArray	| name posDico key elementWithPoint line cellImage |	newCellArray isNil ifTrue:  [ Dialog warn: 'must build cell system first'. ^nil] ifFalse: [ 	posDico := Dictionary new.	cellPosArray do: 			[:element |			name := element at: 4.			key := self positionFromName: name.			elementWithPoint := Array new: 6.			1 to: 3 do: [:i | elementWithPoint at: i put: (element at: i)].			elementWithPoint at: 4 put: key.			line := newCellArray at: key y .			cellImage := line at: key x  .			elementWithPoint at: 5 put: (cellImage at: 3).			elementWithPoint at: 6 put: name.			posDico at: key put: elementWithPoint.]. 	^posDico ]</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="processElevations:">processElevations: cellPosArray	| loc externalCell latitude longitude elevation distance name posDico thisCell |	posDico := self nameDictionary: cellPosArray.	self newCellArray keysAndValuesDo: 			[:yPos :rowOfCell |			rowOfCell keysAndValuesDo: 					[:xPos :aCellImage |					externalCell := posDico at: xPos @ yPos ifAbsent: [nil].					externalCell isNil						ifFalse: 							[latitude := externalCell first.							longitude := externalCell at: 2.							elevation := externalCell at: 3.							name := externalCell at: 4.							thisCell := aCellImage at: 3.							loc := thisCell geoPosition.							distance := ((loc x - longitude) squared + (loc y - latitude) squared)										sqrt.							distance &lt; 0.001								ifTrue: 									[thisCell										elevation: elevation;										name: name]								ifFalse: [self halt]]]]</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="processNameAtPos:">  processNameAtPos:   position	^'Px', position x printString , 'y', position y printString.</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="portee:">portee: anObject	portee := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="newCellArray:">newCellArray: anObject	newCellArray := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="pointDictionary:">pointDictionary: anObject	pointDictionary := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>processing</category><body package="PickCell" selector="doText">doText	| textCollector loc string tp thisCell position |	textCollector := Text new writeStream.	textCollector		nextPutAll: 'latitude,longitude,elevation,name';		cr.	self newCellArray keysAndValuesDo: 			[:yPos :rowOfCell |			rowOfCell keysAndValuesDo: 					[:xPos :aCellImage |					thisCell := aCellImage at: 3.					loc := thisCell geoPosition.					position := xPos @ yPos.					string := loc y printString.					string := string copyFrom: 1 to: string size - 1.					textCollector						nextPutAll: string;						nextPut: $,.					string := loc x printString.					string := string copyFrom: 1 to: string size - 1.					textCollector						nextPutAll: string;						nextPut: $,;						nextPutAll: '0.0,'.					textCollector						nextPutAll: (self processNameAtPos: position);						cr]].	tp := UITextPoints new.	tp pickModel: self.	tp open.	tp leTexte value: textCollector contents.	[tp doGetBackForURL] fork</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="cellClassifier">cellClassifier	^cellClassifier</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="mouseCell:">mouseCell: anObject	mouseCell := anObject</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="grid">grid	^grid</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="colNodes">colNodes	^colNodes</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="mousePoint">mousePoint	^mousePoint</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>building</category><body package="PickCell" selector="buildNetAndDisplayOnInactive:">buildNetAndDisplayOnInactive: aGC	| graphAndComposite |	self filename isNil ifTrue: [self filename: (Dialog requestFileName: 'name for this net' default: self guessedNameForNet )]. 	graphAndComposite := NetworkGeometry				knownNetworkInactive: self				drawingOnlyOn: aGC				title: self filename , 'Range' , self portee printString , 'Points' , self points size printString.	^graphAndComposite</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>building</category><body package="PickCell" selector="buildGraphInactive:">buildGraphInactive: gc	| netAndDicoAndComposite |	"self halt."	netAndDicoAndComposite := self buildNetAndDisplayOnInactive: gc.	self lastGraph: netAndDicoAndComposite last</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>building</category><body package="PickCell" selector="buildGraph:">buildGraph: gc	| netAndDicoAndComposite |	netAndDicoAndComposite := self buildNetAndDisplayOn: gc.	netAndDicoAndComposite isNil		ifFalse: [self lastGraph: netAndDicoAndComposite last].	^netAndDicoAndComposite</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>accessing</category><body package="PickCell" selector="guessedName:">guessedName: projectName	guessedName := projectName.	self filename: projectName.	self setDefaultDirectory: projectName.	^projectName</body></methods><methods><class-id>AlgoDis.PickCellModel</class-id> <category>building</category><body package="PickCell" selector="buildNetAndDisplayOn:">buildNetAndDisplayOn: aGC	| graphAndComposite |	self filename isNil ifTrue: [		Dialog warn: 'Please use File menu option to define a name first.'.		^ nil.		"self filename: (Dialog requestFileName: 'name for this net' default: self guessedNameForNet )"]. 	graphAndComposite := NetworkGeometry				knownNetwork: self				drawingOnlyOn: aGC				title: self filename , 'Range' , self portee printString , 'Points' , self points size printString.	^graphAndComposite</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="retrieving">retrieving	^retrieving</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="getTile7">getTile7	"httpResponse := MapServerConnection x: x y: y zoom: zoom."	| httpResponse imageStream url qhr galileo |	galileo := 'Galileo' readStream next: (Random new next * 7) rounded.	url := ('http://otile1.mqcdn.com/tiles/1.0.0/sat' , zoom printString , '/' , x printString , '/' , y printString , '.png')				asURI.	qhr := QuickHttpRequest get: url.	qhr fieldValueAt: 'User-Agent'		put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	qhr mapClients: mapClient.	httpResponse := qhr execute.	imageStream := httpResponse value byteSource.	^imageStream	"[readerClass := ImageReader readerClassFor: imageStream.	reader := readerClass new from: imageStream]			ensure: [imageStream ifNotNil: [:stream | stream close]].	image := reader image.	tile := image asRetainedMedium.	"	"self halt."	"	"	"self invalidate."	"	^tile"</body></methods><methods><class-id>QuickTile</class-id> <category>computing</category><body package="QuickMap" selector="displayOn:">displayOn: aGraphicsContext	| tileSize thisTile |	tileSize := 256.	thisTile := self tile2.	thisTile isNil		ifFalse: 			[(thisTile instVarNamed: 'handle') isNil				ifTrue: 					[tile := image asRetainedMedium.					thisTile := tile].			thisTile displayOn: aGraphicsContext at: x @ y * tileSize]</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="refresh">refresh	^refresh</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="zoom">zoom	^zoom</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="prx">prx	^theProxy</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="tile2old">tile2old	| imageStored reader |	tile isNil ifFalse: [^tile].	retrieving		ifFalse: 			[retrieving := true.						[imageStored := self theProxy						getPng: index						x: x						y: y						zoom: zoom.			imageStored isNil				ifFalse: 					[					[| readerClass |					readerClass := ImageReader readerClassFor: imageStored.					reader := readerClass new from: imageStored]							ensure: 								[imageStored									ifNotNil: 										[:stream |										stream reset.										png := stream contents.										stream close]].	"ifFalse:"					Processor yield.					image := reader image.					tile := image asRetainedMedium].			retrieving := false.			imageStored isNil ifFalse: [self refresh value: #ok]]					forkAt: Processor userBackgroundPriority].	^tile</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="tile:">tile: anObject	tile := anObject</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="mapClient">mapClient	^mapClient</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="idx">idx	^idx</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="getTile3">getTile3	"httpResponse := MapServerConnection x: x y: y zoom: zoom."	| httpResponse imageStream url qhr galileo |	galileo := 'Galileo' readStream next: (Random new next * 7) rounded.	url := ('http://mt' , index printString				, '.google.com/vt/lyrs=m@259000000&amp;hl=en&amp;src=app&amp;x=' , x printString "app, aipv2"				, '&amp;y=' , y printString				, '&amp;z=' , zoom printString				, '&amp;s=' , galileo)				asURI.	qhr := QuickHttpRequest get: url.	qhr fieldValueAt: 'User-Agent'		put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	qhr mapClients: mapClient.	httpResponse := qhr execute.	imageStream := httpResponse value byteSource.	^imageStream	"[readerClass := ImageReader readerClassFor: imageStream.	reader := readerClass new from: imageStream]			ensure: [imageStream ifNotNil: [:stream | stream close]].	image := reader image.	tile := image asRetainedMedium.	"	"self halt."	"	"	"self invalidate."	"	^tile"</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="getTile4">getTile4	"httpResponse := MapServerConnection x: x y: y zoom: zoom."	| httpResponse imageStream url qhr |	url := ('http://khm.google.com/kh/v=147&amp;src=app&amp;x=' , x printString , '&amp;y='				, y printString , '&amp;z='				, zoom printString) asURI.	qhr := QuickHttpRequest get: url.	qhr fieldValueAt: 'User-Agent'		put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	qhr mapClients: mapClient.	httpResponse := qhr execute.	imageStream := httpResponse value byteSource.	^imageStream.		"[readerClass := ImageReader readerClassFor: imageStream.	reader := readerClass new from: imageStream]			ensure: [imageStream ifNotNil: [:stream | stream close]].	image := reader image.	tile := image asRetainedMedium.	""self halt.""	""self invalidate.""	^tile"</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="semaphore">semaphore	^semaphore</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="tile2">tile2	| imageStream reader readerClass |	tile isNil ifFalse: [^tile].	retrieving		ifFalse: 			[retrieving := true.			 [			imageStream := self theProxy						getPng: index						x: x						y: y						zoom: zoom.			(imageStream isKindOf: Image)				ifTrue: [image := imageStream]				ifFalse: 					[readerClass := ImageReader readerClassFor: imageStream.					reader := readerClass new from: imageStream.					"reader readImage."					image := reader image.					"jpeg is 32 bits depth, but Screen default is 24: it needs particular processing"					readerClass = JPEGImageReader 						ifTrue: [image depth = 32 ifTrue: [image instVarNamed: 'depth' put: 24]						"maybe better : image := image convertForGraphicsDevice: Screen default."].					self png: image.					"self png: imageStream contents."					imageStream close].	"ifFalse:"			Processor yield.			tile := image asRetainedMedium.	retrieving := false.	imageStream isNil ifFalse: [self refresh value: #ok]] "value" forkAt: Processor userBackgroundPriority].	^tile</body></methods><methods><class-id>QuickTile</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	retrieving := false.	refresh := #nok asValue.	refresh onChangeSend: #invalidateNow to: self.	^self</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="pickCellDir">pickCellDir	| homeDir baseDirName baseDir |	homeDir := SystemVariable named: 'HOME'.	baseDirName := homeDir value , '/.pickcell/cache/'.	baseDir := baseDirName asFilename.	baseDir ensureDirectory.	^baseDirName</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="prefetch">prefetch	self tile2</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="theProxy:">theProxy: p	theProxy := p</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="getTile5">getTile5	"httpResponse := MapServerConnection x: x y: y zoom: zoom."	| httpResponse imageStream url qhr galileo |	galileo := 'Galileo' readStream next: (Random new next * 7) rounded.	url := ('http://tile.openstreetmap.org/' , zoom printString , '/' , x printString , '/' , y printString , '.png')				asURI.	qhr := QuickHttpRequest get: url.	qhr fieldValueAt: 'User-Agent'		put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	qhr mapClients: mapClient.	httpResponse := qhr execute.	imageStream := httpResponse value byteSource.	^imageStream	"[readerClass := ImageReader readerClassFor: imageStream.	reader := readerClass new from: imageStream]			ensure: [imageStream ifNotNil: [:stream | stream close]].	image := reader image.	tile := image asRetainedMedium.	"	"self halt."	"	"	"self invalidate."	"	^tile"</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="index">index	^index</body></methods><methods><class-id>QuickTile</class-id> <category>bounds accessing</category><body package="QuickMap" selector="bounds">bounds	^self preferredBounds</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="retrieving:">retrieving: anObject	retrieving := anObject</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="y">y	^y</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="index:">index: anObject	index := anObject</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="y:">y: anObject	y := anObject</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="zoom:">zoom: anObject	zoom := anObject</body></methods><methods><class-id>QuickTile</class-id> <category>bounds accessing</category><body package="QuickMap" selector="preferredBounds">preferredBounds	" *** This method was defined by VisualComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| p |	p := x @ y * 256.	^p corner: p + (256 @ 256)</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="mapClient:">mapClient: anObject	mapClient := anObject</body></methods><methods><class-id>QuickTile</class-id> <category>computing</category><body package="QuickMap" selector="toFile:">toFile: aFilename	| f |	f := aFilename asFilename writeStream.	f nextPutAll: self png.	f close</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="semaphore:">semaphore: anObject	semaphore := anObject</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="theProxy">theProxy	^theProxy</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="png:">png: anObject	png := anObject</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="image">image	^image</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="x">x	^x</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="tile">tile	^tile isNil		ifFalse: [tile]		ifTrue: 			[retrieving				ifFalse: 					[| reader readerClass is |					retrieving := true.										["sema critical: "					"self halt."					"sema excessSignals inspect."					idx := theProxy semIndexClient.					sema := theProxy semaphoreAt: idx.					mapClient := theProxy clientAt: idx.					semaQueue := sema size.					sema critical: [is := self getTile3].					is isNil						ifFalse: 							[							[readerClass := ImageReader readerClassFor: is.							reader := readerClass new from: is]									ensure: 										[is											ifNotNil: 												[:stream |												stream reset.												png := stream contents.												stream close]].							image := reader image.							Processor yield.							tile := image asRetainedMedium							"self refresh value: #ok."].					retrieving := false.					is isNil ifFalse: [self refresh value: #ok]]							forkAt: Processor userBackgroundPriority					"systemBackgroundPriority"					"activePriority"					"value"	"PlusOne"	"systemRockBottomPriority"].			"^(x @ y) printString asComposedText"			tile]</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="png">png	^png</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="getTile">getTile	| httpResponse imageStream readerClass reader |	httpResponse := "MapServerConnection x: x y: y zoom:" zoom. "modified"	imageStream := httpResponse value byteSource.	png := imageStream.	[readerClass := ImageReader readerClassFor: imageStream.	reader := readerClass new from: imageStream] ensure: [imageStream ifNotNil: [:stream | stream close]].	image := reader image.	tile := image asRetainedMedium.	"self halt."	"self invalidate."	^tile</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="idx:">idx: anObject	idx := anObject</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="image:">image: anObject	image := anObject</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="x:">x: anObject	x := anObject</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="getTile6">getTile6	"httpResponse := MapServerConnection x: x y: y zoom: zoom."	| httpResponse imageStream url qhr galileo |	galileo := 'Galileo' readStream next: (Random new next * 7) rounded.	url := ('http://otile1.mqcdn.com/tiles/1.0.0/map/' , zoom printString , '/' , x printString , '/' , y printString , '.png')				asURI.	qhr := QuickHttpRequest get: url.	qhr fieldValueAt: 'User-Agent'		put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	qhr mapClients: mapClient.	httpResponse := qhr execute.	imageStream := httpResponse value byteSource.	^imageStream	"[readerClass := ImageReader readerClassFor: imageStream.	reader := readerClass new from: imageStream]			ensure: [imageStream ifNotNil: [:stream | stream close]].	image := reader image.	tile := image asRetainedMedium.	"	"self halt."	"	"	"self invalidate."	"	^tile"</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="getTile2">getTile2	"httpResponse := MapServerConnection x: x y: y zoom: zoom."	| httpResponse imageStream readerClass reader url qhr |	url := ('http://mt.google.com/vt/x=' , x printString , '&amp;y='				, y printString , '&amp;z='				, zoom printString) asURI.	qhr := QuickHttpRequest get: url.	qhr fieldValueAt: 'User-Agent'		put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	qhr mapClients: mapClient.	httpResponse := qhr execute.	imageStream := httpResponse value byteSource.	png := imageStream.		[readerClass := ImageReader readerClassFor: imageStream.	reader := readerClass new from: imageStream]			ensure: [imageStream ifNotNil: [:stream | stream close]].	image := reader image.	tile := image asRetainedMedium.	"self halt."	"self invalidate."	^tile</body></methods><methods><class-id>QuickTile</class-id> <category>accessing</category><body package="QuickMap" selector="prx:">prx: anObject	theProxy := anObject</body></methods><methods><class-id>QuickTileProxy</class-id> <category>accessing</category><body package="QuickMap" selector="dicoZoom:">dicoZoom: anObject	dicoZoom := anObject</body></methods><methods><class-id>QuickTileProxy</class-id> <category>private</category><body package="QuickMap" selector="semIndex">semIndex	"The first index of semaphore where the queue is shorter"	| minIndex minQueue |	minIndex := 1.	minQueue := (semaphoreArray at: minIndex) size.	semaphoreArray keysAndValuesDo: 			[:k :sem |			| s |			s := sem size.			s = 0				ifTrue: [^Array with: k with: 0]				ifFalse: 					[s &lt; minQueue						ifTrue: 							[minIndex := k.							minQueue := s]]].	^Array with: minIndex with: minQueue</body></methods><methods><class-id>QuickTileProxy</class-id> <category>accessing</category><body package="QuickMap" selector="x:y:zoom:">x: xTile y: yTile zoom: zoom	| modulo x y dico |	modulo := 2 raisedTo: zoom.	x := xTile \\ modulo.	y := yTile \\ modulo.	dico := self dicoZoom at: zoom ifAbsentPut: [Dictionary new: 16].	^dico at: x @ y		ifAbsentPut: 			["| c s idx |"			"idx := self semIndex."			"c := clientArray at: index + 1.			s := semaphoreArray at: index + 1."			"c := clientArray at: idx first."			"s := semaphoreArray at: idx first."			index := (index + 1) \\ 22.			"(semaphoreArray collect: [:se | s excessSignals]) inspect."			(QuickTile x: x y: y zoom: zoom)				container: container;				"mapClient: c;"				"sema: s;"				index: index \\ 4;				"idx: idx;"				prx: self;				yourself]</body></methods><methods><class-id>QuickTileProxy</class-id> <category>private</category><body package="QuickMap" selector="semaphoreAt:">semaphoreAt: anInteger	^semaphoreArray at: anInteger</body></methods><methods><class-id>QuickTileProxy</class-id> <category>networking</category><body package="QuickMap" selector="reset">reset	clientArray := clientArray collect: 					[:aClient |					aClient close.					aClient disconnect.					Net.HttpClient new]</body></methods><methods><class-id>QuickTileProxy</class-id> <category>accessing</category><body package="QuickMap" selector="container">container	^container</body></methods><methods><class-id>QuickTileProxy</class-id> <category>networking</category><body package="QuickMap" selector="close">close	clientArray do: [:aClient | aClient close]</body></methods><methods><class-id>QuickTileProxy</class-id> <category>accessing</category><body package="QuickMap" selector="timeout">timeout	^600</body></methods><methods><class-id>QuickTileProxy</class-id> <category>accessing</category><body package="QuickMap" selector="container:">container: anObject	container := anObject</body></methods><methods><class-id>QuickTileProxy</class-id> <category>accessing</category><body package="QuickMap" selector="client">client	^client isNil		ifFalse: [client]		ifTrue: 			[client := Net.HttpClient new.			client delaySeconds: self timeout ]</body></methods><methods><class-id>QuickTileProxy</class-id> <category>private</category><body package="QuickMap" selector="semIndexClient">semIndexClient	"The first index of semaphore where the queue is shorter"	| minIndex minQueue |	minIndex := 1.	minQueue := (semaphoreArray at: minIndex) size.	semaphoreArray keysAndValuesDo: 			[:k :sem |			| s |			s := sem size.			s = 0				ifTrue: [^k]				ifFalse: 					[s &lt; minQueue						ifTrue: 							[minIndex := k.							minQueue := s]]].	^minIndex</body></methods><methods><class-id>QuickTileProxy</class-id> <category>private</category><body package="QuickMap" selector="pickCellDir">pickCellDir	| homeDir baseDirName baseDir |	homeDir := SystemVariable named: 'HOME'.	baseDirName := homeDir value , '/.pickcell/cache/'.	baseDir := baseDirName asFilename.	baseDir ensureDirectory.	^baseDirName</body></methods><methods><class-id>QuickTileProxy</class-id> <category>deprecated</category><body package="QuickMap" selector="semNext">semNext	"semaphoreNext := semaphoreNext + 1 mod: 2.	^semaphoreArray at: (semaphoreNext + 1)"</body></methods><methods><class-id>QuickTileProxy</class-id> <category>private</category><body package="QuickMap" selector="emptyCache">emptyCache	dicoZoom := Dictionary new: self class maxZoom</body></methods><methods><class-id>QuickTileProxy</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	| n |	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	dicoZoom := Dictionary new: self class maxZoom.	n := self class maxSocket.	semaphoreArray := (Array new: n)				collect: [:s | Semaphore forMutualExclusion].	clientArray := (Array new: n) collect: [:c | Net.HttpClient new].	index := 0.	^self</body></methods><methods><class-id>QuickTileProxy</class-id> <category>private</category><body package="QuickMap" selector="clientAt:">clientAt: anInteger	^clientArray at: anInteger</body></methods><methods><class-id>QuickTileProxy</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	^self subclassResponsibility</body></methods><methods><class-id>QuickTileProxy</class-id> <category>networking</category><body package="QuickMap" selector="disconnect">disconnect	clientArray do: [:aClient | aClient disconnect]</body></methods><methods><class-id>QuickTileProxy</class-id> <category>networking</category><body package="QuickMap" selector="getPng:x:y:zoom:">getPng: anIndex x: x y: y zoom: zoom	| httpResponse imageStream url qhr idxc cli sem |	idxc := self semIndexClient.	cli := self clientAt: idxc.	cli delaySeconds:120.	sem := self semaphoreAt: idxc.	url := self				getUri: anIndex				x: x				y: y				zoom: zoom.	qhr := QuickHttpRequest get: url.	qhr fieldValueAt: 'User-Agent'		put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	qhr mapClients: cli.	sem critical: [httpResponse := qhr execute].	imageStream := httpResponse value byteSource.	^imageStream</body></methods><methods><class-id>QuickTileProxy</class-id> <category>accessing</category><body package="QuickMap" selector="dicoZoom">dicoZoom	^dicoZoom</body></methods><methods><class-id>QuickTileProxyWSN</class-id> <category>private</category><body package="QuickMap" selector="baseWsn">baseWsn	^'http://sames.univ-brest.fr'</body></methods><methods><class-id>QuickTileProxyWSN</class-id> <category>private</category><body package="QuickMap" selector="getUri1:x:y:zoom:">getUri1: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^('http://tile.openstreetmap.org/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		asURI</body></methods><methods><class-id>QuickTileProxyWSN</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| string |	string := self baseWsn, '/osm_tiles/' , zoom printString , '/'				, x printString , '/'				, y printString , '.png'.	Transcript		show: string;		cr.	^string asURI</body></methods><methods><class-id>QuickTileProxyWSN</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyWSN</class-id> <category>private</category><body package="QuickMap" selector="getUri2:x:y:zoom:">getUri2: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^('http://tile.openstreetmap.fr/osmfr' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		asURI</body></methods><methods><class-id>QuickTileComposite</class-id> <category>accessing</category><body package="QuickMap" selector="model:">model: anObject	model := anObject</body></methods><methods><class-id>QuickTileComposite</class-id> <category>accessing</category><body package="QuickMap" selector="overlay">overlay	^overlay</body></methods><methods><class-id>QuickTileComposite</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	"proxy := QuickTileProxy new.	proxy container: self."	overlay := QuickTileProxyOverlay new container: self.	^self</body></methods><methods><class-id>QuickTileComposite</class-id> <category>accessing</category><body package="QuickMap" selector="proxy:">proxy: anObject	proxy := anObject</body></methods><methods><class-id>QuickTileComposite</class-id> <category>bounds accessing</category><body package="QuickMap" selector="preferredBounds">preferredBounds	" *** This method was defined by VisualComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| z tileSize maxTile maxPixel |	tileSize := 256.	z := self mapZoom.	maxTile := 2 raisedTo: z.	maxPixel := maxTile * tileSize.	^0 @ 0 corner: maxPixel @ maxPixel</body></methods><methods><class-id>QuickTileComposite</class-id> <category>accessing</category><body package="QuickMap" selector="overlay:">overlay: anObject	overlay := anObject</body></methods><methods><class-id>QuickTileComposite</class-id> <category>accessing</category><body package="QuickMap" selector="proxy">proxy	^proxy</body></methods><methods><class-id>QuickTileComposite</class-id> <category>accessing</category><body package="QuickMap" selector="mapZoom">mapZoom	^mapZoom</body></methods><methods><class-id>QuickTileComposite</class-id> <category>accessing</category><body package="QuickMap" selector="model">model	^model</body></methods><methods><class-id>QuickTileComposite</class-id> <category>accessing</category><body package="QuickMap" selector="mapZoom:">mapZoom: anObject	mapZoom := anObject</body></methods><methods><class-id>QuickTileComposite</class-id> <category>displaying</category><body package="QuickMap" selector="displayOn:">displayOn: aGraphicsContext	| clipBox tileSize origin corner tileOrigin tileCorner yp1 yp2 xp1 xp2 |	clipBox := aGraphicsContext clippingBounds.	tileSize := 256.	origin := clipBox origin.	corner := clipBox corner.	tileOrigin := origin // tileSize.	tileCorner := corner // tileSize.	tileOrigin x to: tileCorner x		do: 			[:tx |			tileOrigin y to: tileCorner y				do: 					[:ty |					"tileCurrent"					"tileCurrent := x @ y."					"pt := PseudoTile id: tileCurrent."					| pt |					pt := proxy x: tx y: ty zoom: mapZoom.					pt displayOn: aGraphicsContext copy.					pt := overlay x: tx y: ty zoom: mapZoom.					pt displayOn: aGraphicsContext copy.]].	"Prefetching : "	yp1 := tileOrigin y - 1.	yp2 := tileCorner y + 1.	tileOrigin x to: tileCorner x		do: 			[:tx |			| pt |			pt := proxy x: tx y: yp1 zoom: mapZoom.			pt prefetch.			pt := proxy x: tx y: yp2 zoom: mapZoom.			pt prefetch].	xp1 := tileOrigin x - 1.	xp2 := tileCorner x + 1.	tileOrigin y - 1 to: tileCorner y + 1		do: 			[:ty |			| pt |			pt := proxy x: xp1 y: ty zoom: mapZoom.			pt prefetch.			pt := proxy x: xp2 y: ty zoom: mapZoom.			pt prefetch]</body></methods><methods><class-id>AlgoDis.PickCellDBAccess</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="mapOrigin">mapOrigin	^mapOrigin</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="height:">height: anObject	height := anObject</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="mapOrigin:">mapOrigin: anObject	mapOrigin := anObject</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="height">height	^height</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="zoom">zoom	^zoom</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="elevation:">elevation: anObject	elevation := anObject</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="width:">width: anObject	width := anObject</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="elevation">elevation	^elevation</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="latitude:">latitude: anObject	latitude := anObject</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="cellSize">cellSize	^cellSize</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="longitude:">longitude: anObject	longitude := anObject</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="zoom:">zoom: anObject	zoom := anObject</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="cellSize:">cellSize: anObject	cellSize := anObject</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="latitude">latitude	^latitude</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="longitude">longitude	^longitude</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="width">width	^width</body></methods><methods><class-id>SystemOrganization</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	width := nil.	height := nil.	longitude := nil.	latitude := nil.	elevation := nil.	imageDimX := 0.	imageDimY := 0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="imageDimY:">imageDimY: anObject	imageDimY := anObject</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="imageDimX:">imageDimX: anObject	imageDimX := anObject</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="imageDimY">imageDimY	^imageDimY</body></methods><methods><class-id>SystemOrganization</class-id> <category>accessing</category><body package="PickCell" selector="imageDimX">imageDimX	^imageDimX</body></methods><methods><class-id>AlgoDis.BGPickCell</class-id> <category>initialize</category><body package="PickCell" selector="initialize">initialize	"Create a list of uneSeries, and convert it into a ValueHolder."	super initialize.	uneSerie := List new.	self initializeData.	uneSerie := uneSerie asValue</body></methods><methods><class-id>AlgoDis.BGPickCell</class-id> <category>accessing</category><body package="PickCell" selector="uneSerie">uneSerie	^uneSerie</body></methods><methods><class-id>AlgoDis.BGPickCell</class-id> <category>accessing</category><body package="PickCell" selector="uneSerie:">uneSerie: anObject	uneSerie := anObject</body></methods><methods><class-id>AlgoDis.BGPickCell</class-id> <category>initializeData</category><body package="PickCell" selector="initializeData">initializeData	"Initalize the uneSeries collection."	| cellData |	cellData := BGPickCellData new.	cellData		xyzRef: #(1 1 1);		code: 50;		nbElements: 40.	self uneSerie add: cellData.	cellData := BGPickCellData new.	cellData		xyzRef: #(1 2 1);		code: 25;		nbElements: 32.	self uneSerie add: cellData.	cellData := BGPickCellData new.	cellData		xyzRef: #(1 1 2);		code: 36;		nbElements: 33.	self uneSerie add: cellData</body></methods><methods><class-id>USBSerial</class-id> <category>accessing</category><body package="PickCell" selector="mode">mode	^mode</body></methods><methods><class-id>USBSerial</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize1">initialize1		super initialize. 	self mode: self myMode.	self cportNr: 25.	self bdrate: 115200</body></methods><methods><class-id>USBSerial</class-id> <category>opening</category><body package="PickCell" selector="open">open	"        unsigned char character[size +1];        int cport = 27;        int bdrate = 9600;        int numChar = 0;"	| result  |	bdrate := 38400.	result := self				RS232_OpenComport: self cportNr				with: bdrate				with: self mode.	result &gt; 0 ifTrue: [self error: 'ComPort']</body></methods><methods><class-id>USBSerial</class-id> <category>accessing</category><body package="PickCell" selector="cportNr">cportNr	^cportNr</body></methods><methods><class-id>USBSerial</class-id> <category>accessing</category><body package="PickCell" selector="mode:">mode: anObject	mode := anObject</body></methods><methods><class-id>USBSerial</class-id> <category>accessing</category><body package="PickCell" selector="bdrate:">bdrate: anObject	bdrate := anObject</body></methods><methods><class-id>USBSerial</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize		super initialize.</body></methods><methods><class-id>USBSerial</class-id> <category>accessing</category><body package="PickCell" selector="cportNr:">cportNr: anObject	cportNr := anObject</body></methods><methods><class-id>USBSerial</class-id> <category>accessing</category><body package="PickCell" selector="bdrate">bdrate	^bdrate</body></methods><methods><class-id>USBSerial</class-id> <category>opening</category><body package="PickCell" selector="close">close	"        unsigned char character[size +1];        int cport = 27;        int bdrate = 9600;        int numChar = 0;"	| result |	result := self RS232_CloseComport: self cportNr.	result &gt; 0 ifTrue: [self error: 'ComPort']</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>accessing</category><body package="PickCell" selector="lon">lon	^lon</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>accessing</category><body package="PickCell" selector="urlFileName:">urlFileName: anObject	urlFileName := anObject</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>private</category><body package="PickCell" selector="printZoomOn:">printZoomOn: myStream	myStream nextPutAll: '            var zoom='.	self zoom printOn: myStream</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>accessing</category><body package="PickCell" selector="lat:">lat: anObject	lat := anObject</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>printing html</category><body package="PickCell" selector="printHtmlOn:">printHtmlOn: myStream 	self printHeaderOn: myStream.	self printLatOn: myStream.	myStream		nextPut: $;;		cr.	self printLonOn: myStream.	myStream		nextPut: $;;		cr.	self printZoomOn: myStream.	myStream		nextPut: $;;		cr.	self printMapOn: myStream.	myStream		nextPut: $;;		cr.	self printMiddleOn: myStream.	self printurlFileNameOn: myStream.	myStream		nextPut: $,;		cr.	self printFooterOn: myStream.	^myStream contents</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>accessing</category><body package="PickCell" selector="zoom:">zoom: anObject	zoom := anObject</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>private</category><body package="PickCell" selector="printurlFileNameOn:">printurlFileNameOn: myStream	myStream nextPutAll: '                         url:'.	myStream nextPut: $".	myStream nextPutAll: self urlFileName.	myStream nextPut: $"</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>private</category><body package="PickCell" selector="printUrlOn:">printUrlOn: myStream	myStream nextPutAll: '                         url:'.	self urlFileName printOn: myStream</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>private</category><body package="PickCell" selector="printLonOn:">printLonOn: myStream	myStream nextPutAll: '            var lon='.	self lon printOn: myStream</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>private</category><body package="PickCell" selector="printFooterOn:">printFooterOn: aStream	aStream		nextPutAll: '                        format: new OpenLayers.Format.OSM()                    }),                    projection: new OpenLayers.Projection("EPSG:4326")                });                 map.addLayers([layer]);             }        &lt;/script&gt;    &lt;/head&gt;    &lt;body onload="init()"&gt;        &lt;div id="map" class="smallmap"&gt;&lt;/div&gt;        &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;';		cr</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>printing html</category><body package="PickCell" selector="printHtmlOnFileName:">printHtmlOnFileName: aFileName	| fname myStream |	fname := aFileName asFilename.	fname  canBeWritten 		ifTrue: 			[myStream := fname writeStream.			self printHtmlOn: myStream.			myStream close]</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>private</category><body package="PickCell" selector="printMiddleOn:">printMiddleOn: myStream	myStream nextPutAll: '              function init(){                map = new OpenLayers.Map ("map", {                controls:[                    new OpenLayers.Control.Navigation(),                    new OpenLayers.Control.PanZoomBar(),                    new OpenLayers.Control.LayerSwitcher(),                    new OpenLayers.Control.Attribution()],                    maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),                    maxResolution: 156543.0399,                    numZoomLevels: 19,                    units: ''m'',                    projection: new OpenLayers.Projection("EPSG:900913"),                    displayProjection: new OpenLayers.Projection("EPSG:4326")                } );                                 map.addLayer(new OpenLayers.Layer.OSM());                 var lonLat = new OpenLayers.LonLat(lon, lat).transform(new OpenLayers.Projection("EPSG:4326"), new OpenLayers.Projection("EPSG:900913"));                 map.setCenter (lonLat, zoom);                //Initialise the vector layer using OpenLayers.Format.OSM                var layer = new OpenLayers.Layer.Vector("Polygon", {                    strategies: [new OpenLayers.Strategy.Fixed()],                    protocol: new OpenLayers.Protocol.HTTP({'</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>accessing</category><body package="PickCell" selector="lon:">lon: anObject	lon := anObject</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>private</category><body package="PickCell" selector="printHeaderOn:">printHeaderOn: aStream	aStream		nextPutAll: '&lt;html&gt;    &lt;head&gt;        &lt;title&gt;&lt;/title&gt;        &lt;script src="http://openlayers.org/api/OpenLayers.js"&gt;&lt;/script&gt;        &lt;script type="text/javascript"&gt;';		cr</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>private</category><body package="PickCell" selector="printLatOn:">printLatOn: myStream	myStream nextPutAll: '            var lat='.	self lat printOn: myStream</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>accessing</category><body package="PickCell" selector="zoom">zoom	^zoom</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>accessing</category><body package="PickCell" selector="urlFileName">urlFileName	^urlFileName</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>accessing</category><body package="PickCell" selector="lat">lat	^lat</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	lat := nil.	lon := nil.	zoom := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.OpenLayerHtml</class-id> <category>private</category><body package="PickCell" selector="printMapOn:">printMapOn: myStream	myStream nextPutAll: '            var map '.</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>accessing</category><body package="PickCell" selector="cellArray">cellArray	^cellArray</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>accessing</category><body package="PickCell" selector="cell">cell	^cell</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>accessing</category><body package="PickCell" selector="newCellArray:">newCellArray: anObject	newCellArray := anObject</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>accessing</category><body package="PickCell" selector="dictionary:">dictionary: anObject	dictionary := anObject</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>accessing</category><body package="PickCell" selector="cell:">cell: anObject	cell := anObject</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>scanning</category><body package="PickCell" selector="signaturesToLists:">signaturesToLists: seuil	| listOfFoundCells signatures oc pos cellule signature coll aCellImage rebuild sortedCollectionOfCells |	signatures := Dictionary new.	"Ce dictionnaire est accédé par des signatures : cf : signatures at: signature	les valeurs sont des collections de point-&gt;aCellImage"	coll := SortedCollection				sortBlock: [:p1 :p2 | p1 x &lt; p2 x and: [p1 y &lt; p2 y]].	"Ici on va balayer le tableau des CellImage. On construit un dictionnaire dont les clés sont les signatures, 	et les éléments des collections de CellImage ayant cette signature."	self newCellArray keysAndValuesDo: 			[:yPos :row |			row keysAndValuesDo: 					[:xPos :anArray |					"c'est quoi ce bazard de last ???' , il faut sans doute clarifier en créant une classe au lieu de cet Array: 					1) l'image					2) la signature					3) le CellImage calculé en amont dans newCellArray "					aCellImage := anArray last.					aCellImage isNil						ifFalse: 							[signature := aCellImage signature.							cellule := aCellImage cellImage.							signature seuil: seuil.							"On regarde si on connait cette signature. Dans le cas contraire, on crée son réceptacle"							listOfFoundCells := signatures at: signature										ifAbsent: 											[oc := OrderedCollection new.											signatures at: signature put: oc.											oc].							pos := xPos @ yPos.							coll add: pos.							"on ajoute une association a l'entrée concernée, la clé est la position logique, et la valeur le CellImage que l'on vient de traiter"							listOfFoundCells add: pos -&gt; aCellImage]	"ca ne devrait pas arriver !"]].	" to check: let us build a new dictionary to sort elements havaing same signature "	rebuild := Dictionary new.	signatures keysAndValuesDo: 			[:keySignature :collection |			sortedCollectionOfCells  := SortedCollection						sortBlock: [:p1 :p2 | p1 key x = p2 key x ifTrue: [p1 key y &lt; p2 key y] ifFalse: [p1 key  x &lt; p2 key x]].			collection do: [:assKeyPlusCell  | sortedCollectionOfCells  add: assKeyPlusCell ].			rebuild at: keySignature put: collection asOrderedCollection].	^rebuild</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>accessing</category><body package="PickCell" selector="newCellArray">newCellArray	^newCellArray</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>accessing</category><body package="PickCell" selector="pickModel">pickModel	^pickModel</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>accessing</category><body package="PickCell" selector="dictionary">dictionary	^dictionary</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	dictionary := Bag new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>scanning</category><body package="PickCell" selector="scan3:">scan3: seuil	| pixel min max nb minRed maxRed sumRed minGreen maxGreen sumGreen minBlue maxBlue sumBlue mean glevel initialSignature |	initialSignature := CellSignature new.	initialSignature seuil: seuil.	minRed := 2 raisedTo: 18.	maxRed := 0.	sumRed := 0.	minGreen := 2 raisedTo: 18.	maxGreen := 0.	sumGreen := 0.	minBlue := 2 raisedTo: 18.	maxBlue := 0.	sumBlue := 0.	nb := 0.	self cell pixelsDo: 			[:x :y |			pixel := self cell valueAtPoint: x @ y.			pixel red &lt; minRed ifTrue: [minRed := pixel red].			pixel red &gt; maxRed ifTrue: [maxRed := pixel red].			sumRed := sumRed + pixel red.			pixel green &lt; minGreen ifTrue: [minGreen := pixel green].			pixel green &gt; maxGreen ifTrue: [maxGreen := pixel green].			sumGreen := sumGreen + pixel green.			pixel blue &lt; minBlue ifTrue: [minBlue := pixel blue].			pixel blue &gt; maxBlue ifTrue: [maxBlue := pixel blue].			sumBlue := sumBlue + pixel blue.			nb := nb + 1.			self dictionary at: x@y put: pixel].	min := ColorValue red: minRed green: minGreen blue: minBlue.	max := ColorValue red: maxRed green: maxGreen blue: maxBlue.	mean := ColorValue				red: sumRed / nb				green: sumGreen / nb				blue: sumBlue / nb.	initialSignature		min: min;		max: max;		mean: mean.	glevel := ColorValue				red: 0.2125 * sumRed / nb				green: 0.7154 * sumGreen / nb				blue: 0.0721 * sumBlue / nb.	initialSignature mean2: glevel.	^initialSignature</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>accessing</category><body package="PickCell" selector="cellArray:">cellArray: anObject	cellArray := anObject</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>scanning</category><body package="PickCell" selector="updateUICellShow:">updateUICellShow: seuil	| signatures points newVal ui dicoSignaturesToPointCollection |	signatures := self signaturesToLists: seuil.	"a quoi cela sert ? Ce n'est pas utilisé !! "	dicoSignaturesToPointCollection := Dictionary new.	signatures keysAndValuesDo: 			[:cellSignatureKey :collectionPointsImages |			points := collectionPointsImages collect: [:asso | asso key].			newVal := Array with: collectionPointsImages first value with: points.			dicoSignaturesToPointCollection at: cellSignatureKey put: newVal].	"end of unused code "	ui := UICellShow new.	ui open.	ui load: signatures.	^ui</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>accessing</category><body package="PickCell" selector="pickModel:">pickModel: anObject	pickModel := anObject</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>scanning</category><body package="PickCell" selector="scan3">scan3	| pixel min max nb minRed maxRed sumRed minGreen maxGreen sumGreen minBlue maxBlue sumBlue mean signature seuil Gray glevel |	seuil := 0.1.	minRed := 2 raisedTo: 8.	maxRed := 0.	sumRed := 0.	minGreen := 2 raisedTo: 8.	maxGreen := 0.	sumGreen := 0.	minBlue := 2 raisedTo: 8.	maxBlue := 0.	sumBlue := 0.	nb := 0.	self cell pixelsDo: 			[:x :y |			pixel := self cell valueAtPoint: x @ y.			pixel red &lt; minRed ifTrue: [minRed := pixel red].			pixel red &gt; maxRed ifTrue: [maxRed := pixel red].			sumRed := sumRed + pixel red.			pixel green &lt; minGreen ifTrue: [minGreen := pixel green].			pixel green &gt; maxGreen ifTrue: [maxGreen := pixel green].			sumGreen := sumGreen + pixel green.			pixel blue &lt; minBlue ifTrue: [minBlue := pixel blue].			pixel blue &gt; maxBlue ifTrue: [maxBlue := pixel blue].			sumBlue := sumBlue + pixel blue.			self halt.			Gray := ((0 , 2125 sumRed) + 0 , 7154 sumGreen) + 0 , 0721 sumBlue.			nb := nb + 1.			self dictionary add: pixel].	min := ColorValue red: minRed green: minGreen blue: minBlue.	max := ColorValue red: maxRed green: maxGreen blue: maxBlue.	mean := ColorValue				red: (sumRed / nb) truncated				green: (sumGreen / nb) truncated				blue: (sumBlue / nb) truncated.	glevel := ColorValue gray: Gray.	signature := CellSignature				min: min				max: max				mean: mean				glevel: glevel.	signature seuil: seuil.	^signature</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>scanning</category><body package="PickCell" selector="scan:">scan: seuil"	^self scan3: seuil"	^self scan3: seuil</body></methods><methods><class-id>AlgoDis.CellClassifier</class-id> <category>scanning</category><body package="PickCell" selector="scanElev:">scanElev: seuil	| pixel min max nb minRed maxRed sumRed minGreen maxGreen sumGreen minBlue maxBlue sumBlue mean glevel initialSignature minElev |	initialSignature := CellSignature new.	initialSignature seuil: seuil.	minElev := 2 raisedTo: 18. 	nb := 0.	self cell pixelsDo: 			[:x :y |				self halt.			pixel := self cell valueAtPoint: x @ y.			pixel red &lt; minRed ifTrue: [minRed := pixel red].			pixel red &gt; maxRed ifTrue: [maxRed := pixel red].			sumRed := sumRed + pixel red.			pixel green &lt; minGreen ifTrue: [minGreen := pixel green].			pixel green &gt; maxGreen ifTrue: [maxGreen := pixel green].			sumGreen := sumGreen + pixel green.			pixel blue &lt; minBlue ifTrue: [minBlue := pixel blue].			pixel blue &gt; maxBlue ifTrue: [maxBlue := pixel blue].			sumBlue := sumBlue + pixel blue.			nb := nb + 1.			self dictionary at: x@y put: pixel].	min := ColorValue red: minRed green: minGreen blue: minBlue.	max := ColorValue red: maxRed green: maxGreen blue: maxBlue.	mean := ColorValue				red: sumRed / nb				green: sumGreen / nb				blue: sumBlue / nb.	initialSignature		min: min;		max: max;		mean: mean.	glevel := ColorValue				red: 0.2125 * sumRed / nb				green: 0.7154 * sumGreen / nb				blue: 0.0721 * sumBlue / nb.	initialSignature mean2: glevel.	^initialSignature</body></methods><methods><class-id>UITextPoints</class-id> <category>accessing</category><body package="PickCell" selector="guessedName:">guessedName: anObject	guessedName := anObject.	^guessedName</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="storeInDB">storeInDB	| rs header cellPos line ls  numbers name array1 rss |	rs := self leTexte value readStream.	" discard 1st line"	header := rs upTo: Character cr.	" read line by line"	cellPos := OrderedCollection new.	[rs atEnd] whileFalse: 			[line := rs upTo: Character cr. 			array1 := Scanner new scanTokens: line.			rss := array1 readStream.			rss next.			"name last = $R ifFalse: [name := name copyFrom: 1 to: name size - 1]."			numbers := Array						with: rss next						with: rss next						with: rss next						with: rss next.			cellPos add: numbers].	self pickModel isNil		ifFalse: 			[ 			self pickModel guessedName: self guessedName].	^cellPos</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doSave">doSave	| name filename ws |	name := Dialog				requestFileName: 'save on file'				default: self guessedDirectory, '/', self guessedName , '-elev.txt'				for: nil.	name isEmpty		ifFalse: 			[self guessedNameFromString: name.			filename := name asFilename.			ws := filename writeStream.			ws isWritable				ifTrue: 					[ws nextPutAll: self leTexte value.					ws close]]</body></methods><methods><class-id>UITextPoints</class-id> <category>interface opening</category><body package="PickCell" selector="postOpenWith:">postOpenWith: spec	self showCellSystemName</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doAnalyze">doAnalyze	| rs header cellPos line ls char tmpStream latitude longitude elevation numbers name |	rs := self leTexte value readStream.	" discard 1st line"	header := rs upTo: Character cr.	" read line by line"	cellPos := OrderedCollection new.	[rs atEnd] whileFalse: 			[line := rs upTo: Character cr.			ls := line readStream.			char := ls next.			char := ls next.			[char isSeparator] whileTrue: [char := ls next].			tmpStream := String new writeStream.			[char isSeparator] whileFalse: 					[tmpStream nextPut: char.					char := ls next].			tmpStream nextPut: $d.			latitude := tmpStream contents asNumber.			[char isSeparator] whileTrue: [char := ls next].			tmpStream := String new writeStream.			[char isSeparator] whileFalse: 					[tmpStream nextPut: char.					char := ls next].			tmpStream nextPut: $d.			longitude := tmpStream contents asNumber.			[char isSeparator] whileTrue: [char := ls next].			tmpStream := String new writeStream.			[char isSeparator] whileFalse: 					[tmpStream nextPut: char.					char := ls next].			tmpStream nextPut: char.			elevation := tmpStream contents asNumber.			[char isSeparator] whileTrue: [char := ls next].			tmpStream := String new writeStream.			[ls atEnd] whileFalse: 					[tmpStream nextPut: char.					char := ls next].			tmpStream nextPut: char.			name := tmpStream contents.			numbers := Array						with: latitude						with: longitude						with: elevation						with: name.			cellPos add: numbers].	self pickModel isNil		ifFalse: 			[self pickModel processElevations: cellPos.			self pickModel guessedName: self guessedName].	^cellPos</body></methods><methods><class-id>UITextPoints</class-id> <category>accessing</category><body package="PickCell" selector="pickModel:">pickModel: anObject	pickModel := anObject</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doLoadFile:">doLoadFile: filenamePattern	| fn rs |	filenamePattern isEmpty		ifFalse: 			[fn := filenamePattern asFilename.			rs := fn readStream.			rs isReadable				ifTrue: 					[self leTexte value: rs contents.					rs close]]</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doAnalyzeWind">doAnalyzeWind	| rs header cellPos line numbers name scanner tokens ws ls |	rs := self leTexte value readStream.	" discard 1st line"	header := rs upTo: Character cr.	" read line by line"	cellPos := OrderedCollection new.	[rs atEnd] whileFalse: 			[line := rs upTo: Character cr.			scanner := Scanner new.			tokens := scanner scanTokens: line.			ls  := tokens readStream.						ws := Array new writeStream.			ws nextPut:  ls next asDouble.			ws nextPut:  ls next asDouble.			ws nextPut:  ls next.			ws nextPut:  ls next.			ws nextPut: ls next.			name := ls next asString.			ls atEnd ifFalse: [    name := name, ls next asString].			ws nextPut: name.			numbers := ws contents.			cellPos add: numbers].	self pickModel isNil		ifFalse: 			[self pickModel processWinds: cellPos.			self pickModel guessedName: self guessedName].	^cellPos</body></methods><methods><class-id>UITextPoints</class-id> <category>parsing</category><body package="PickCell" selector="elevationName">elevationName	^self guessedName , '-elev.txt'</body></methods><methods><class-id>UITextPoints</class-id> <category>accessing</category><body package="PickCell" selector="guessedNameFromString:">guessedNameFromString: aString	| index string |	index := aString lastIndexOf: $..	index &gt; 1		ifTrue: [string := aString copyFrom: 1 to: index-1]		ifFalse: [string := aString].	guessedName := string.	^string</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doLoad">doLoad	| name filename rs | 	name := self pickModel guessedDirectory.	name := name , '/'  , self guessedName, '-elev.txt'.	name := Dialog requestFileName: 'name of file ?'  default: name for: nil.	name isEmpty		ifFalse: 			[filename := name asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[self leTexte value: rs contents.					rs close]]</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doSave:">doSave: aString	| name filename ws |	name := aString , '.txt'.	name isEmpty		ifFalse: 			[filename := name asFilename.			ws := filename writeStream.			ws isWritable				ifTrue: 					[ws nextPutAll: self leTexte value.					ws close].			self guessedName: aString].	^aString</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doAnalyzeCover">doAnalyzeCover	| rs header cellPos line ls latitude longitude elevation numbers name |	rs := self leTexte value readStream.	" discard 1st line"	header := rs upTo: Character cr.	" read line by line"	cellPos := OrderedCollection new.	[rs atEnd] whileFalse: 			[line := rs upTo: Character cr.			ls := line readStream.			longitude := ls upTo: $,.			longitude := longitude reject: [:ch | ch = $ ].			longitude := (longitude , 'd') asNumber.			latitude := ls upTo: $,.			latitude := latitude reject: [:ch | ch = $ ].			latitude := (latitude , 'd') asNumber.			elevation := (ls upTo: $,) asNumber.			name := ls upToEnd.			name := name reject: [:ch | ch = $ ].			"name last = $R ifFalse: [name := name copyFrom: 1 to: name size - 1]."			numbers := Array						with: latitude						with: longitude						with: elevation						with: name.			cellPos add: numbers].	self pickModel isNil		ifFalse: 			[self pickModel processElevations: cellPos.			self pickModel guessedName: self guessedName].	^cellPos</body></methods><methods><class-id>UITextPoints</class-id> <category>parsing</category><body package="PickCell" selector="noElevationName">noElevationName^	self guessedName , '.txt'</body></methods><methods><class-id>UITextPoints</class-id> <category>interface opening</category><body package="PickCell" selector="showCellSystemName">showCellSystemName	| pm name winTitle |	pm := self pickModel.	pm isNil		ifFalse: 			[name := pm guessedName.			name isNil ifTrue: [name := 'no name'].			winTitle := 'Points editor - ' , name.			self builder window label: winTitle]</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doGetBackForURL">doGetBackForURL	"This stub method was generated by UIDefiner"	"Read a GPS coordinates file, and send a request to GPSVisualizer to retrieve elevation data"	"Select all this code (ctrl+A) and do it (ctrl + D)"	"me"	| rs me1 me2 me3 me4 me5 me6 me7 me8 me9 hr resp htmlText fullFilename found pattern url htmlText2 name texte line ws |	rs := self leTexte value readStream.	name := 'points.text'.	"Reading file with GPS coordinates"	me1 := Net.MimeEntity new.	me1		contentDisposition: 'form-data; name="uploaded_file_1"; filename="' , name				, '"'.	me1 contentType: 'text/plain'.	me1 contents: rs.	rs close.	"Other fields that may be sent"	me2 := Net.MimeEntity new.	me2 contentDisposition: 'form-data; name="remote_data"'.	me3 := Net.MimeEntity new.	me3 contentDisposition: 'form-data; name="submitted"'.	me3 body: ((Net.SimpleBody new)				source: 'Convert &amp; add elevation' readStream;				yourself).	me4 := Net.MimeEntity new.	me4 contentDisposition: 'form-data; name="convert_format"'.	me4 body: ((Net.SimpleBody new)				source: 'text' readStream;				yourself).	me5 := Net.MimeEntity new.	me5 contentDisposition: 'form-data; name="units"'.	me5 body: ((Net.SimpleBody new)				source: 'metric' readStream;				yourself).	me6 := Net.MimeEntity new.	me6 contentDisposition: 'form-data; name="convert_delimiter"'.	me6 body: ((Net.SimpleBody new)				source: 'tab' readStream;				yourself).	me7 := Net.MimeEntity new.	me7 contentDisposition: 'form-data; name="add_elevation"'.	me7 body: ((Net.SimpleBody new)				source: 'auto' readStream;				yourself).	me8 := Net.MimeEntity new.	me8 contentDisposition: 'form-data; name="profile_x"'.	me8 body: ((Net.SimpleBody new)				source: 'distance' readStream;				yourself).	me9 := Net.MimeEntity new.	me9 contentDisposition: 'form-data; name="profile_y"'.	me9 body: ((Net.SimpleBody new)				source: 'altitude' readStream;				yourself).	"Request POST multipart/form-data"	hr := Net.HttpRequest				post: 'Http://www.gpsvisualizer.com/convert?output_elevation'.	hr		addPart: me1;		addPart: me2;		addPart: me3;		addPart: me4;		addPart: me5;		addPart: me6;		addPart: me7;		addPart: me8;		addPart: me9.	hr referer: 'Http://www.gpsvisualizer.com/elevation'.	hr		userAgent: 'Mozilla/5.0 (X11; Linux i686; rv:29.0) Gecko/20100101 Firefox/29.0'.	hr contentType: 'multipart/form-data'.	resp := hr execute.	"Reading results"	htmlText := resp value byteSource contents asString.	"Regexp matcher to catch filename to download"	rs := htmlText readStream.	pattern := '/download/convert/'.	1 to: htmlText size - pattern size		do: 			[:pos |			found := pattern = (htmlText copyFrom: pos to: pos + pattern size - 1).			found				ifTrue: 					[rs := (htmlText copyFrom: pos to: pos + 100) readStream.					rs						upTo: $/;						upTo: $/;						upTo: $/.					url := rs upTo: $".					Transcript						show: pos printString , '  ' , url;						cr;						flush]].	fullFilename := '/download/convert/' , url.	Transcript		show: 'Http://www.gpsvisualizer.com' , fullFilename;		cr.	"New request to read the file"	hr := Net.HttpRequest get: 'Http://www.gpsvisualizer.com' , fullFilename.	hr referer: 'Http://www.gpsvisualizer.com/convert?elevation'.	hr		userAgent: 'Mozilla/5.0 (X11; Linux i686; rv:29.0) Gecko/20100101 Firefox/29.0'.	resp := hr execute. 	htmlText2 := resp contents asText.	rs := htmlText2 readStream.	"line := rs upTo: Character lf."	ws := Text new writeStream.	[rs atEnd] whileFalse: [ line := rs upTo: Character lf. line isEmpty  ifFalse:  [   ws nextPutAll: line. ws cr.] ].	texte := ws contents.	self leTexte value: texte. 	self doAnalyze.	^texte</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doSaveDefault">doSaveDefault	| name filename ws |	name := 'points.text'.	name isEmpty		ifFalse: 			[filename := name asFilename.			ws := filename writeStream.			ws isWritable				ifTrue: 					[ws nextPutAll: self leTexte value.					ws close]]</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doSaveURLOld">doSaveURLOld	"This stub method was generated by UIDefiner"	| name filename ws urlName result |	name := 'points.text'.	self doSave: name.	urlName := 'ftp://ftpremote:wputamd64@wsn.univ-brest.fr/public/' , name.	filename := name asFilename.	ws := filename writeStream.	ws isWritable		ifTrue: 			[ws nextPutAll: self leTexte value.			ws close].	result := UnixProcess cshOne: 'wput -u ' , name , ' ' , urlName.	Dialog warn: result.		self doGetBackForURL: name.</body></methods><methods><class-id>UITextPoints</class-id> <category>aspects</category><body package="PickCell" selector="leTexte">leTexte	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leTexte isNil		ifTrue:			[leTexte := String new asValue]		ifFalse:			[leTexte]</body></methods><methods><class-id>UITextPoints</class-id> <category>accessing</category><body package="PickCell" selector="pickModel">pickModel	^pickModel</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doSaveURL">doSaveURL	"This stub method was generated by UIDefiner" 		self doGetBackForURL</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="parseLat:">parseLat: aString	| ls n ch entier decimal number north |	ls := aString readStream.	n := 0.	[ls atEnd] whileFalse: 			[ch := ls next.			ch = $. ifFalse: [ch isDigit ifTrue: [n := n * 10 + ch digitValue]]].	entier := (n / 1000000) truncated.	decimal := ((n / 10000) - (entier * 100)) / 60.	number := (entier + decimal) asDouble.	north := aString last = $N.	north ifFalse: [number := number negated].	^number asDouble</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doParseCoverage">doParseCoverage	| aName filename rs nodeid time lat lon rssi alt latString lonString cellPos values |	cellPos := OrderedCollection new.	aName := 'trackGPSPoints.txt'.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := (rs upTo: $,) asNumber.							rssi := rs upTo: Character cr.							values := Array										with: lat										with: lon										with: alt										with: rssi.							cellPos add: values]].			rs close].	self pickModel isNil		ifFalse: 			[self pickModel processElevations: cellPos.			self pickModel guessedName: self guessedName].	^cellPos</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="parseLon:">parseLon: aString	| ls n ch entier decimal number west |	ls := aString readStream.	n := 0.	[ls atEnd] whileFalse: 			[ch := ls next.			ch = $. ifFalse: [ch isDigit ifTrue: [n := n * 10 + ch digitValue]]].	entier := (n / 1000000) truncated.	decimal := ((n / 10000) - (entier * 100)) / 60.	number := (entier + decimal) asDouble.	west := aString last = $W.	west ifTrue: [number := number negated].	^number asDouble</body></methods><methods><class-id>UITextPoints</class-id> <category>accessing</category><body package="PickCell" selector="guessedName">guessedName	| pm |	pm := self pickModel.	pm isNil ifTrue: [^self guessedName: 'cellSystemNoName'].	guessedName := pm guessedName.	guessedName isNil ifTrue: [^self guessedName: 'cellSystemNoName'].	^guessedName</body></methods><methods><class-id>UITextPoints</class-id> <category>parsing</category><body package="PickCell" selector="guessedDirectory">guessedDirectory	| dd pm |	pm := self pickModel.	pm isNil		ifTrue: 			[dd := Filename defaultDirectory.			dd := dd asString  , '/Generated'.			dd asFilename ensureDirectory.			^dd]		ifFalse: [^pm guessedDirectory]</body></methods><methods><class-id>UITextPoints</class-id> <category>parsing</category><body package="PickCell" selector="shapeDirectory">shapeDirectory	| dd pm |	pm := self pickModel.	pm isNil		ifTrue: 			[dd := Filename defaultDirectory.			dd := dd asString  , '/Shapes'.			dd asFilename ensureDirectory.			^dd]		ifFalse: [^pm guessedDirectory]</body></methods><methods><class-id>UITextPoints</class-id> <category>actions</category><body package="PickCell" selector="doSaveShapeFile">doSaveShapeFile	| name ws rs firstLine lat lon line1 gName |	gName := guessedName.	gName isEmpty ifTrue: [gName := 'shapes'].	name := Dialog				requestFileName: 'save on shape file'				default: self shapeDirectory , '/' , gName , '-shp.txt'				for: nil.	name isNil ifTrue: [name := 'testpolygon'].	false		ifFalse: 			[UnixProcess cshOne: 'shpcreate ' , name , ' polygon'.			ws := String new writeStream.			ws nextPutAll: 'shpadd ' , name , ' '.			rs := self leTexte value readStream.			rs upTo: Character cr.			firstLine := true.			[rs atEnd] whileFalse: 					[lat := (rs upTo: $,) asNumber.					lon := (rs upTo: Character cr) asNumber.					firstLine						ifTrue: 							[line1 := Array with: lat with: lon.							firstLine := false].					lon printOn: ws.					ws space.					lat printOn: ws.					ws space].			line1 last printOn: ws.			ws space.			line1 first printOn: ws.			ws space.			UnixProcess cshOne: ws contents.			ws close]</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>accessing</category><body package="PickCell" selector="processTable">processTable	^processTable</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>accessing</category><body package="PickCell" selector="reader">reader	Reader isNil ifTrue: [Reader := ElevationReader new].	^Reader</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="buildUrlFor:">buildUrlFor: geoLoc	| latitude longitude ws http string url |	latitude := geoLoc y.	longitude := geoLoc x.	ws := (String new: 100) writeStream.	http := 'http://maps.googleapis.com/maps/api/elevation/json?locations='.	ws nextPutAll: http.	string := latitude printString.	string := string copyFrom: 1 to: string size - 1.	ws nextPutAll: string.	ws nextPut: $,.	string := longitude printString.	string := string copyFrom: 1 to: string size - 1.	ws nextPutAll: string.	ws nextPutAll: '&amp;sensor=false'.	url := ws contents.	^url</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="processReply:forCellImage:">processReply: replyTo forCellImage: cellImage	| source bytes text status jjasonResult result elevation |	source := replyTo value byteSource.	bytes := source contents.	text := bytes asByteString.	status := replyTo statusLine.	status code = '403'		ifTrue: 			["Dialog warn: 'elevation rejected'.			Dialog warn: text."			^nil]		ifFalse: 			[jjasonResult := JSON.JsonReader readFrom: text readStream.			result := jjasonResult at: 'results'.			result isEmpty				ifTrue: [^nil]				ifFalse: 					[elevation := result first at: 'elevation'.					cellImage elevation: elevation.					^elevation]]</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>accessing</category><body package="PickCell" selector="requestTime">requestTime	^requestTime</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>accessing</category><body package="PickCell" selector="requestBuffer">requestBuffer	^requestBuffer</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>accessing</category><body package="PickCell" selector="requestBuffer:">requestBuffer: anObject	requestBuffer := anObject</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="backgroundElevationAt:forCellImage:">backgroundElevationAt: geoLoc forCellImage: cellImage	self addRequest: geoLoc forCellImage: cellImage.	self reader awake</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="addRequest:forCellImage:">addRequest: geoLoc forCellImage: cellImage	self requestBuffer addLast: (Array with: geoLoc with: cellImage).</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="buildUrlFor:with:">buildUrlFor: geoLoc with: stream	| latitude longitude string |	latitude := geoLoc y.	longitude := geoLoc x.	string := latitude printString.	string := string copyFrom: 1 to: string size - 1.	stream nextPutAll: string.	stream nextPut: $,.	string := longitude printString.	string := string copyFrom: 1 to: string size - 1.	stream nextPutAll: string</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="terminate">terminate	self process isNil ifFalse: [self process terminate].	self processTable do: [:proc | proc terminate]</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>accessing</category><body package="PickCell" selector="process">process	^process</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>accessing</category><body package="PickCell" selector="requestTime:">requestTime: anObject	requestTime := anObject</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="sendRequestArray">sendRequestArray	| urlText cellImage httpRequest replyTo nb urlConstructStream theseRequests geoLoc |	nb := self requestBuffer size.	nb = 0 ifTrue: [^nil].	nb := nb min: 10.	urlConstructStream := self urlInitialStream.	theseRequests := OrderedCollection new.	1 to: nb		do: 			[:i |			theseRequests add: self requestBuffer first.			self requestBuffer removeFirst].	theseRequests do: 			[:request |			cellImage := request last.			geoLoc := request first.			self buildUrlFor: geoLoc with: urlConstructStream]		separatedBy: [urlConstructStream nextPut: $|].	urlText := urlConstructStream contents.	Transcript		show: urlText;		show: nb printString;		cr.	httpRequest := Net.HttpRequest get: urlText.	[replyTo := httpRequest execute] on: Net.HttpException		do: [:ex | replyTo := ex parameter].	^self processReply: replyTo forCellImage: cellImage</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="sendRequestArray:">sendRequestArray: ii	| urlText cellImage httpRequest replyTo nb urlConstructStream theseRequests geoLoc |	nb := self requestBuffer size.	(nb = 0 or: [nb &lt; 10 and: [ii &gt; 0]]) ifTrue: [^nil].	nb := nb min: 10.	urlConstructStream := self urlInitialStream.	theseRequests := OrderedCollection new.	1 to: nb		do: 			[:i |			theseRequests add: self requestBuffer first.			self requestBuffer removeFirst].	theseRequests do: 			[:request |			cellImage := request last.			geoLoc := request first.			self buildUrlFor: geoLoc with: urlConstructStream]		separatedBy: [urlConstructStream nextPut: $|].	urlText := urlConstructStream contents.	Transcript		show: urlText;		show: nb printString;		cr.	httpRequest := Net.HttpRequest get: urlText.	[replyTo := httpRequest execute] on: Net.HttpException		do: [:ex | replyTo := ex parameter].	^self processReply: replyTo forCellImage: cellImage</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="directBackgroundElevationAt:forCellImage:">directBackgroundElevationAt: geoLoc forCellImage: cellImage	| url replyTo httpRequest |	url := self buildUrlFor: geoLoc.	httpRequest := Net.HttpRequest get: url.	[replyTo := httpRequest execute] on: Net.HttpException		do: [:ex | replyTo := ex parameter].	^self processReply: replyTo forCellImage: cellImage</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	requestBuffer := OrderedCollection new.	processTable := OrderedCollection new.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>accessing</category><body package="PickCell" selector="process:">process: anObject	process := anObject</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="awake">awake	| p |	p := 			[5 to: 0				by: -1				do: 					[:i |					(Delay forMilliseconds: 10) wait.					self sendRequestArray: i]]					fork.	self process: p.	self processTable add: p</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="urlInitialStream">urlInitialStream	| http |	http := 'http://maps.googleapis.com/maps/api/elevation/json?locations='.	^WriteStream on: http copy.</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>accessing</category><body package="PickCell" selector="processTable:">processTable: anObject	processTable := anObject</body></methods><methods><class-id>AlgoDis.ElevationReader</class-id> <category>processing</category><body package="PickCell" selector="sendRequest">sendRequest	| request urlText cellImage httpRequest replyTo |	request := self requestBuffer removeFirst.	urlText := self buildUrlFor: request first.	cellImage := request last.	httpRequest := Net.HttpRequest get: urlText.	[replyTo := httpRequest execute] on: Net.HttpException		do: [:ex | replyTo := ex parameter].	^self processReply: replyTo forCellImage: cellImage</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>printing</category><body package="PickCell" selector="cellImagePrint:on:">cellImagePrint: anImage on: aStream	| index pixel blue green red |	self fileOutImageExtent: anImage extent onStream: aStream. 	aStream		nextPut: $,;		space.	aStream		nextPut: $[;		space.	index := anImage extent y * anImage extent x.	0 to: anImage extent y - 1		do: 			[:y |			0 to: anImage extent x - 1				do: 					[:x |					pixel := anImage atPoint: x @ y.					blue := pixel bitAnd: 255.					pixel := pixel bitShift: -8.					green := pixel bitAnd: 255.					pixel := pixel bitShift: -8.					red := pixel bitAnd: 255.					aStream nextPut: $[.					red printOn: aStream.					aStream nextPut: $,.					green printOn: aStream.					aStream nextPut: $,.					blue printOn: aStream.					aStream nextPut: $].					index := index - 1.					aStream						space;						nextPut: (index = 0 ifTrue: [$]] ifFalse: [$,]);						space]].	"	we also want this : self geoPosition printOn: aStream."	(aStream space)		nextPut: $];		space</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>printing</category><body package="PickCell" selector="printCudaOn:">printCudaOn: aStream	aStream		nextPut: ${;		space.	self cellImagePrintCuda: cellImage on: aStream.	(aStream space)		nextPut: $};		space</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="elevation">elevation	^elevation</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="geoPositionCorner">geoPositionCorner	^geoPositionCorner</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="geoPositionCorner:">geoPositionCorner: anObject	geoPositionCorner := anObject</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="signature:">signature: anObject	signature := anObject</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="signature">signature	^signature</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="geoPosition">geoPosition	^geoPosition</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="geoPosition:">geoPosition: anObject	geoPosition := anObject</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="elevation:">elevation: anObject	elevation := anObject</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>printing</category><body package="PickCell" selector="printOn:">printOn: aStream	aStream		nextPut: $[;		space.	self cellImagePrint: cellImage on: aStream.	"self cellImage storeOn: aStream."	(aStream space)		nextPut: $];		space."	aStream		nextPut: $[;		space.	self geoPosition printOn: aStream.	(aStream space)		nextPut: $];		space"</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>printing</category><body package="PickCell" selector="fileOutImageExtent:onStream:">fileOutImageExtent: extent onStream: aStream	aStream		nextPut: $[;		space.	extent x printOn: aStream.	aStream		nextPut: $,;		space.	extent y printOn: aStream.	aStream		nextPut: $];		space</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="position">position	^position</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>printing</category><body package="PickCell" selector="fileOutImageExtentCuda:onStream:">fileOutImageExtentCuda: extent onStream: aStream	aStream		nextPut: ${;		space.	extent x printOn: aStream.	aStream		nextPut: $,;		space.	extent y printOn: aStream.	aStream		nextPut: $} ;		space</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="position:">position: anObject	position := anObject</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="cellImage:">cellImage: anObject	cellImage := anObject</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	cellImage := nil.	signature := nil.	position := nil.	geoPosition := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>printing</category><body package="PickCell" selector="cellImagePrintCuda:on:">cellImagePrintCuda: anImage on: aStream	| index pixel blue green red |	self fileOutImageExtentCuda: anImage extent onStream: aStream.	aStream		nextPut: $,;		space.	aStream		nextPut: ${;		space.	index := anImage extent y * anImage extent x.	0 to: anImage extent y - 1		do: 			[:y |			0 to: anImage extent x - 1				do: 					[:x |					pixel := anImage atPoint: x @ y.					blue := pixel bitAnd: 255.					pixel := pixel bitShift: -8.					green := pixel bitAnd: 255.					pixel := pixel bitShift: -8.					red := pixel bitAnd: 255.					aStream nextPut: ${.					red printOn: aStream.					aStream nextPut: $,.					green printOn: aStream.					aStream nextPut: $,.					blue printOn: aStream.					aStream nextPut: $}.					index := index - 1.					aStream						space;						nextPut: (index = 0 ifTrue: [$}] ifFalse: [$,]);						space]].	"	we also want this : self geoPosition printOn: aStream."	(aStream space)		nextPut: $};		space</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="name">name	^name</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="cellImage">cellImage	^cellImage</body></methods><methods><class-id>AlgoDis.CellImage</class-id> <category>accessing</category><body package="PickCell" selector="name:">name: anObject	name := anObject</body></methods><methods><class-id>AlgoDis.LightTrap</class-id> <category>accessing</category><body package="PickCell" selector="values:">values: anObject	values := anObject</body></methods><methods><class-id>AlgoDis.LightTrap</class-id> <category>accessing</category><body package="PickCell" selector="name">name	^name</body></methods><methods><class-id>AlgoDis.LightTrap</class-id> <category>accessing</category><body package="PickCell" selector="lon">lon	^lon</body></methods><methods><class-id>AlgoDis.LightTrap</class-id> <category>accessing</category><body package="PickCell" selector="lon:">lon: anObject	lon := anObject</body></methods><methods><class-id>AlgoDis.LightTrap</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	name := nil.	lat := nil.	lon := nil.	values := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.LightTrap</class-id> <category>accessing</category><body package="PickCell" selector="name:">name: anObject	name := anObject</body></methods><methods><class-id>AlgoDis.LightTrap</class-id> <category>accessing</category><body package="PickCell" selector="values">values	^values</body></methods><methods><class-id>AlgoDis.LightTrap</class-id> <category>accessing</category><body package="PickCell" selector="lat:">lat: anObject	lat := anObject</body></methods><methods><class-id>AlgoDis.LightTrap</class-id> <category>accessing</category><body package="PickCell" selector="lat">lat	^lat</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>interface opening</category><body package="PickCell" selector="postOpenWith:">postOpenWith: aSPec	(self builder componentAt: #startTrackingLog) enable.	(self builder componentAt: #startTrackingDB) enable.	(self builder componentAt: #stopTracking) disable</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>actions</category><body package="PickCell" selector="startTrackingDB">startTrackingDB	| bufferPointer numChar ws buffer portOk trackPoint aName filename wf pm gpsValue sqlCmd |	self		getData: 			[USBSerial unloadLibraries.			usb := USBSerial new.			usb initialize.			aName := Dialog requestFileName: 'Give name of log file?'						default: 'trackingData.txt'  for: nil.			aName isEmpty ifTrue: [aName := 'trackingData.txt'].			filename := aName asFilename.			filename exists				ifTrue: [wf := filename asFilename readAppendStream]				ifFalse: [wf := filename asFilename writeStream].			wf flush; close.			pm := UIPickCellNodes new.			usb RS232_CloseComport: 27.			Transcript				show: Time now printString;				cr.			buffer := String new: 4096.			bufferPointer := buffer gcCopyToHeap.			portOk := usb						setReadBuf: bufferPointer						with: 4095						with: 27						with: 115200.			usb				flushBuf: bufferPointer				with: 4095				with: 27				with: 115200.			portOk = 0				ifFalse: 					[Transcript						show: 'open error';						cr]				ifTrue: 					[[true] whileTrue: 							[numChar := usb										readBuf: bufferPointer										with: 4095										with: 27										with: 115200.							ws := String new writeStream.							0 to: numChar - 1								do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].							Transcript								show: numChar printString;								tab;								show: ws contents.							trackPoint := TrackPoint from: ws contents.							trackPoint isNil								ifFalse: 									[APoint := trackPoint.									wf := filename asFilename readAppendStream.									wf isWritable										ifTrue: 											[wf nextPutAll: ws contents.											wf close].									gpsValue := ws contents.									gpsValue last = Character lf										ifTrue: [gpsValue := gpsValue copyFrom: 1 to: gpsValue size - 1].									gpsValue last = Character cr										ifTrue: [gpsValue := gpsValue copyFrom: 1 to: gpsValue size - 1].									"sqlCmd := 'INSERT INTO RECOCO9(gpsdata) VALUES( ''ID3, 01:02:03, 48.1234N, 004.5987W, 70.1, -91'')'."									sqlCmd := 'INSERT INTO RECOCO9(gpsdata) VALUES(''' , gpsValue , ''')'.									pm										appendData: 'osm'										password: 'fare&amp;bali'										environment: '172.12.18.159:5432_vietnamTuyen'										strSql: sqlCmd									"environment: 'wsn.univ-brest.fr:8080_vietnamTuyen'"].							(Delay forSeconds: 1) wait].					usb RS232_CloseComport: 27]]					fork.	(self builder componentAt: #startTrackingLog) disable.	(self builder componentAt: #startTrackingDB) disable.	(self builder componentAt: #stopTracking) enable</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>actions</category><body package="PickCell" selector="doUpload">doUpload	| aName filename rs line ls pm gpsValue sqlCmd |	pm := UIPickCellNodes new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackGPSPoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[line := rs upTo: Character cr.							ls := line readStream.							gpsValue := ls upToEnd.							gpsValue isEmpty								ifFalse: 									[sqlCmd := 'INSERT INTO May182017(recocoData) VALUES(''' , gpsValue , ''')'.									pm										appendData: 'osm'										password: 'fare&amp;bali'										environment: 'wsn.univ-brest.fr:8080_vietnamTuyen'										strSql: sqlCmd]]].			rs close].	^self</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>actions</category><body package="PickCell" selector="startTracking">startTracking	| bufferPointer numChar ws buffer portOk trackPoint name filename wf |	self		getData: 			[USBSerial unloadLibraries.			usb := USBSerial new.			usb initialize.			"Create a new file for logging data if it does not exist"			"name := '/Users/monmac/Documents/trackGPSPoints.txt'.			filename := name asFilename.			wf := filename writeStream.			wf close."			usb RS232_CloseComport: 27.			Transcript				show: Time now printString;				cr.			buffer := String new: 4096.			bufferPointer := buffer gcCopyToHeap.			portOk := usb						setReadBuf: bufferPointer						with: 4095						with: 27						with: 115200.			usb				flushBuf: bufferPointer				with: 4095				with: 27				with: 115200.			portOk = 0				ifFalse: 					[Transcript						show: 'open error';						cr]				ifTrue: 					[[true] whileTrue: 							[numChar := usb										readBuf: bufferPointer										with: 4095										with: 27										with: 115200.							ws := String new writeStream.							0 to: numChar - 1								do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].							Transcript								show: numChar printString;								tab;								show: ws contents.							trackPoint := TrackPoint from: ws contents.							trackPoint isNil								ifFalse: 									[APoint := trackPoint.									name := 'points.txt'.									filename := name asFilename.									wf := filename readAppendStream.									wf isWritable										ifTrue: 											[wf nextPutAll: ws contents.											wf close]].							(Delay forSeconds: 1) wait].					usb RS232_CloseComport: 27]]					fork.	(self builder componentAt: #startTrackingLog) disable.	(self builder componentAt: #startTrackingDB) disable.	(self builder componentAt: #stopTracking) enable</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>actions</category><body package="PickCell" selector="startTracking1">startTracking1	| bufferPointer numChar ws buffer portOk trackPoint name filename wf pm gpsValue sqlCmd |	self		getData: 			[USBSerial unloadLibraries.			usb := USBSerial new.			usb initialize.			"Create a new file for logging data if it does not exist"			"name := 'trackGPSPoints.txt'.			filename := name asFilename.			wf := filename writeStream.			wf close."			pm := UIPickCellNodes new.			usb RS232_CloseComport: 27.			Transcript				show: Time now printString;				cr.			buffer := String new: 4096.			bufferPointer := buffer gcCopyToHeap.			portOk := usb						setReadBuf: bufferPointer						with: 4095						with: 27						with: 115200.			usb				flushBuf: bufferPointer				with: 4095				with: 27				with: 115200.			portOk = 0				ifFalse: 					[Transcript						show: 'open error';						cr]				ifTrue: 					[[true] whileTrue: 							[numChar := usb										readBuf: bufferPointer										with: 4095										with: 27										with: 115200.							ws := String new writeStream.							0 to: numChar - 1								do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].							Transcript								show: numChar printString;								tab;								show: ws contents.							trackPoint := TrackPoint from: ws contents.							trackPoint isNil								ifFalse: 									[APoint := trackPoint.									name := 'trackGPSPoints.txt'.									filename := name asFilename.									wf := filename readAppendStream.									wf isWritable										ifTrue: 											[wf nextPutAll: ws contents.											wf close].									gpsValue := ws contents.									"sqlCmd := 'INSERT INTO RECOCO9(gpsdata) VALUES( ''ID3, 01:02:03, 48.1234N, 004.5987W, 70.1, -91'')'."									gpsValue last = Character lf										ifTrue: [gpsValue := gpsValue copyFrom: 1 to: gpsValue size - 1].									gpsValue last = Character cr										ifTrue: [gpsValue := gpsValue copyFrom: 1 to: gpsValue size - 1].									sqlCmd := 'INSERT INTO RECOCO9(gpsdata) VALUES(''' , gpsValue , ''')'.									pm										appendData: 'osm'										password: 'fare&amp;bali'										environment: '172.12.18.159:5432_vietnamTuyen'										strSql: sqlCmd									"environment: 'wsn.univ-brest.fr:8080_vietnamTuyen'"].							(Delay forSeconds: 1) wait].					usb RS232_CloseComport: 27]]					fork.	(self builder componentAt: #startTracking2) disable.	(self builder componentAt: #stopTracking) enable</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>actions</category><body package="PickCell" selector="stopTracking">stopTracking	usb RS232_CloseComport: 27.	self getData terminate.	self getData: nil.	(self builder componentAt: #startTrackingLog) enable.	(self builder componentAt: #startTrackingDB) enable.	(self builder componentAt: #stopTracking) disable</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>actions</category><body package="PickCell" selector="parseLatLon:">parseLatLon: aString	| ls n ch entier decimal number numberString north |	ls := aString readStream.	n := 0.	[ls atEnd] whileFalse: 			[ch := ls next.			ch = $. ifFalse: [ch isDigit ifTrue: [n := n * 10 + ch digitValue]]].	entier := (n / 1000000) truncated.	decimal := ((n / 10000) - (entier * 100)) / 60.	number := (entier + decimal) asDouble.	north := ls last = $N.	north ifFalse: [number := number negated].	numberString:= number printString.	number:= numberString copyFrom: 1 to: numberString size - 1.	^number</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>actions</category><body package="PickCell" selector="startTracking3">startTracking3	| bufferPointer numChar ws buffer portOk trackPoint aName filename wf pm gpsValue sqlCmd |	self		getData: 			[USBSerial unloadLibraries.			usb := USBSerial new.			usb initialize.			self halt.			aName := Dialog requestFileName: 'Give name of log file?'						default: 'trackingData.txt'  for: nil.			aName isEmpty ifTrue: [aName := 'trackingData.txt'].			filename := aName asFilename.			filename exists				ifTrue: [wf := filename asFilename readAppendStream]				ifFalse: [wf := filename asFilename writeStream].			wf flush; close.			pm := UIPickCellNodes new.			usb RS232_CloseComport: 27.			Transcript				show: Time now printString;				cr.			buffer := String new: 4096.			bufferPointer := buffer gcCopyToHeap.			portOk := usb						setReadBuf: bufferPointer						with: 4095						with: 27						with: 115200.			usb				flushBuf: bufferPointer				with: 4095				with: 27				with: 115200.			portOk = 0				ifFalse: 					[Transcript						show: 'open error';						cr]				ifTrue: 					[[true] whileTrue: 							[numChar := usb										readBuf: bufferPointer										with: 4095										with: 27										with: 115200.							ws := String new writeStream.							0 to: numChar - 1								do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].							Transcript								show: numChar printString;								tab;								show: ws contents.							trackPoint := TrackPoint from: ws contents.							trackPoint isNil								ifFalse: 									[APoint := trackPoint.									wf := filename asFilename readAppendStream.									wf isWritable										ifTrue: 											[wf nextPutAll: ws contents.											wf close].									gpsValue := ws contents.									gpsValue last = Character lf										ifTrue: [gpsValue := gpsValue copyFrom: 1 to: gpsValue size - 1].									gpsValue last = Character cr										ifTrue: [gpsValue := gpsValue copyFrom: 1 to: gpsValue size - 1].									self halt.									"sqlCmd := 'INSERT INTO RECOCO9(gpsdata) VALUES( ''ID3, 01:02:03, 48.1234N, 004.5987W, 70.1, -91'')'."									sqlCmd := 'INSERT INTO RECOCO9(gpsdata) VALUES(''' , gpsValue , ''')'.									pm										appendData: 'osm'										password: 'fare&amp;bali'										environment: '172.12.18.159:5432_vietnamTuyen'										strSql: sqlCmd									"environment: 'wsn.univ-brest.fr:8080_vietnamTuyen'"].							(Delay forSeconds: 1) wait].					usb RS232_CloseComport: 27]]					fork.	(self builder componentAt: #startTracking2) disable.	(self builder componentAt: #stopTracking) enable</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>accessing</category><body package="PickCell" selector="getData:">getData: anObject	getData := anObject</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>actions</category><body package="PickCell" selector="startTrackingLog">startTrackingLog	| bufferPointer numChar ws buffer portOk trackPoint name filename wf |	self		getData: 			[USBSerial unloadLibraries.			usb := USBSerial new.			usb initialize.			"Create a new file for logging data if it does not exist"			"name := '/Users/monmac/Documents/trackGPSPoints.txt'.			filename := name asFilename.			wf := filename writeStream.			wf close."			usb RS232_CloseComport: 27.			Transcript				show: Time now printString;				cr.			buffer := String new: 4096.			bufferPointer := buffer gcCopyToHeap.			portOk := usb						setReadBuf: bufferPointer						with: 4095						with: 27						with: 115200.			usb				flushBuf: bufferPointer				with: 4095				with: 27				with: 115200.			portOk = 0				ifFalse: 					[Transcript						show: 'open error';						cr]				ifTrue: 					[[true] whileTrue: 							[numChar := usb										readBuf: bufferPointer										with: 4095										with: 27										with: 115200.							ws := String new writeStream.							0 to: numChar - 1								do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].							Transcript								show: numChar printString;								tab;								show: ws contents.							trackPoint := TrackPoint from: ws contents.							trackPoint isNil								ifFalse: 									[APoint := trackPoint.									name := '/Users/monmac/Documents/trackGPSPoints.txt'.									filename := name asFilename.									wf := filename readAppendStream.									wf isWritable										ifTrue: 											[wf nextPutAll: ws contents.											wf close]].							(Delay forSeconds: 1) wait].					usb RS232_CloseComport: 27]]					fork.	(self builder componentAt: #startTrackingLog) disable.	(self builder componentAt: #startTrackingDB) disable.	(self builder componentAt: #stopTracking) enable</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>actions</category><body package="PickCell" selector="startTracking2">startTracking2	| bufferPointer numChar ws buffer portOk trackPoint name filename wf pm gpsValue sqlCmd aName |	self		getData: 			[USBSerial unloadLibraries.			usb := USBSerial new.			usb initialize.			pm := UIPickCellNodes new.			aName := Dialog						requestFileName: 'Give file name of log file??'						default: 'trackGPSPoints.txt'						for: nil.			aName isEmpty				ifFalse: 					[filename := aName asFilename.					filename exists						ifTrue: [wf := filename readAppendStream]						ifFalse: [wf := filename writeStream]].			wf close.			pm := UIPickCellNodes new.			usb RS232_CloseComport: 27.			Transcript				show: Time now printString;				cr.			buffer := String new: 4096.			bufferPointer := buffer gcCopyToHeap.			portOk := usb						setReadBuf: bufferPointer						with: 4095						with: 27						with: 115200.			usb				flushBuf: bufferPointer				with: 4095				with: 27				with: 115200.			portOk = 0				ifFalse: 					[Transcript						show: 'open error';						cr]				ifTrue: 					[[true] whileTrue: 							[numChar := usb										readBuf: bufferPointer										with: 4095										with: 27										with: 115200.							ws := String new writeStream.							0 to: numChar - 1								do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].							Transcript								show: numChar printString;								tab;								show: ws contents.							trackPoint := TrackPoint from: ws contents.							trackPoint isNil								ifFalse: 									[APoint := trackPoint.									name := 'trackGPSPoints.txt'.									filename := name asFilename.									wf := filename readAppendStream.									wf isWritable										ifTrue: 											[wf nextPutAll: ws contents.											wf close].									gpsValue := ws contents.									[gpsValue atEnd] = Character lf										ifTrue: [gpsValue copyFrom: 1 to: gpsValue size - 1].									[gpsValue atEnd] = Character cr										ifTrue: [gpsValue := gpsValue copyFrom: 1 to: gpsValue size - 1].									"sqlCmd := 'INSERT INTO RECOCO9(gpsdata) VALUES( ''ID3, 01:02:03, 48.1234N, 004.5987W, 70.1, -91'')'."									sqlCmd := 'INSERT INTO RECOCO9(gpsdata) VALUES(''' , gpsValue , ''')'.									pm										appendData: 'osm'										password: 'fare&amp;bali'										environment: '172.12.18.159:5432_vietnamTuyen'										strSql: sqlCmd									"environment: 'wsn.univ-brest.fr:8080_vietnamTuyen'"].							(Delay forSeconds: 1) wait].					usb RS232_CloseComport: 27]]					fork.	(self builder componentAt: #startTracking2) disable.	(self builder componentAt: #stopTracking) enable</body></methods><methods><class-id>GPSTrackingInterface</class-id> <category>accessing</category><body package="PickCell" selector="getData">getData	^getData</body></methods><methods><class-id>AlgoDis.ImageHistory</class-id> <category>accessing</category><body package="PickCell" selector="knownMapUrl:">knownMapUrl: anObject	knownMapUrl := anObject</body></methods><methods><class-id>AlgoDis.ImageHistory</class-id> <category>accessing</category><body package="PickCell" selector="add:">add: association	self imageHistory add: association</body></methods><methods><class-id>AlgoDis.ImageHistory</class-id> <category>accessing</category><body package="PickCell" selector="knownMapUrl">knownMapUrl	^knownMapUrl</body></methods><methods><class-id>AlgoDis.ImageHistory</class-id> <category>accessing</category><body package="PickCell" selector="imageHistory">imageHistory	^imageHistory</body></methods><methods><class-id>AlgoDis.ImageHistory</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	knownMapUrl := nil.	imageHistory := OrderedCollection new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.ImageHistory</class-id> <category>accessing</category><body package="PickCell" selector="imageHistory:">imageHistory: anObject	imageHistory := anObject</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>accessing</category><body package="PickCell" selector="image">image	^image</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>displaying</category><body package="PickCell" selector="getCellFromGridWithMargin">getCellFromGridWithMargin	| grid bounds yPos xPos nbLines nbCol array cell newImage linePlus1 colPlus1 ceiling floor thisGrid |	grid := self model value grid.	self image isNil ifTrue: [^false].	bounds := self image bounds.	nbLines := ((1 + bounds height) / grid y) truncated.	linePlus1 := (1 + bounds height) \\ grid y &gt; 0.	" remove this to avoid right and bottom margin"	linePlus1 ifTrue: [nbLines := nbLines + 1].	nbCol := ((1 + bounds width) / grid x) truncated.	colPlus1 := (1 + bounds height) \\ grid y &gt; 0.	colPlus1 ifTrue: [nbCol := nbCol + 1].	array := (Array new: nbLines) collect: [:x | Array new: nbCol].	yPos := 0.	"self halt."	ceiling := grid ceiling.	floor := grid truncated.	0 to: nbLines - 1		do: 			[:hor |			| gridChoice |			gridChoice := hor even.			xPos := 0.			0 to: nbCol - 1				do: 					[:vert |					gridChoice ifTrue: [thisGrid := ceiling] ifFalse: [thisGrid := floor].					gridChoice := gridChoice not.					"newImage := Image								extent: thisGrid								depth: image depth								palette: image palette copy."					newImage := Image								extent: thisGrid								depth: image depth								bitsPerPixel: 32								palette: image palette copy.					cell := newImage								copy: (0 @ 0 extent: thisGrid)								from: xPos @ yPos								in: image								rule: RasterOp paint.					(array at: hor + 1) at: vert + 1 put: cell.					xPos := xPos + thisGrid x].			yPos := yPos + thisGrid y].	self model value cellArray: array.	^self model value buildCellArrayModel</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>displaying</category><body package="PickCell" selector="displayGridOn:">displayGridOn: aGC	| gaw grid bounds yPos ls xPos |	grid := self model value grid.	image := self model value cellDisplay image.	image isNil		ifFalse: 			[bounds := image bounds.			yPos := 0.			0 to: 1 + (bounds height / grid y)				do: 					[:n |					ls := LineSegment from: 0 @ yPos to: bounds width @ yPos.					gaw := GraphicsAttributesWrapper on: ls asStroker.					gaw attributes: (GraphicsAttributes new paint: ColorValue red).					gaw displayOn: aGC.					yPos := yPos + grid y].			xPos := 0.			0 to: 1 + (bounds width / grid x)				do: 					[:n |					ls := LineSegment from: xPos @ 0 to: xPos @ bounds height.					gaw := GraphicsAttributesWrapper on: ls asStroker.					gaw attributes: (GraphicsAttributes new paint: ColorValue blue).					gaw displayOn: aGC.					xPos := xPos + grid x]]</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>displaying</category><body package="PickCell" selector="displayCoverTextCells:on:">displayCoverTextCells: coverCells on: aGC	| cellImage position center gaw ga cell name color text box width style |	coverCells keysAndValuesDo: 			[:posCell :arrayWithCell | 			cell := arrayWithCell at: 5.			name := arrayWithCell at: 6.			text := name asComposedText.			style :=  (TextAttributes styleNamed: #small).			text textStyle: style.			cellImage := cell cellImage.			position := cell position.			center := position + ( 2 @ (cellImage bounds height  / 2)).			box := text bounds.			width := box width.  			gaw := GraphicsAttributesWrapper on:text.			name last = $R				ifTrue: [color := ColorValue red]				ifFalse: [color := ColorValue blue].			ga := GraphicsAttributes new paint: color.			gaw attributes: ga.			cellImage displayOn: aGC at: position.			gaw displayOn: aGC at: center]</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>As yet unclassified</category><body package="PickCell" selector="getCellFromGrid2">getCellFromGrid2	| grid bounds yPos xPos nbLines nbCol array linePlus1 colPlus1 image32 pixel |	grid := self model value grid.	self image isNil ifTrue: [^false].	bounds := self image bounds.	nbLines := ((1 + bounds height) / grid y) truncated.	linePlus1 := (1 + bounds height) \\ grid y &gt; 0.	linePlus1 ifTrue: [nbLines := nbLines + 1].	nbCol := ((1 + bounds width) / grid x) truncated.	colPlus1 := (1 + bounds height) \\ grid y &gt; 0.	colPlus1 ifTrue: [nbCol := nbCol + 1].	array := (Array new: nbLines) collect: [:x | Array new: nbCol].	yPos := 0.	0 to: nbLines - 1		do: 			[:hor |			xPos := 0.			0 to: nbCol - 1				do: 					[:vert |					image32 := Image								extent: self image extent								depth: self image depth								palette: self image palette copy.					image pixelsDo: 							[:x :y |							pixel := image valueAtPoint: x @ y.							image32 valueAtPoint: x @ y put: pixel].					(array at: hor + 1) at: vert + 1 put: image32.					xPos := xPos + grid x].			yPos := yPos + grid y].	self model value cellArray: array.	^self model value buildCellArrayModel</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>displaying</category><body package="PickCell" selector="selectColorFor:">selectColorFor: point	| pixel |	self halt.	pixel := self image valueAtPoint: point.	self model value writeColor: pixel</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>displaying</category><body package="PickCell" selector="displayOnSafe:">displayOnSafe: aGC	| graph gaw coverCells displayDico winds |	displayDico := self model value displayModeDictionary.	self image isNil		ifFalse: [(displayDico at: #displayImage) ifTrue: [self image displayOn: aGC]].	(displayDico at: #displayGrid) ifTrue: [self displayGridOn: aGC].	graph := self model value lastGraph.	graph isNil		ifFalse: [(displayDico at: #displayGraph) ifTrue: [graph displayOn: aGC]].	coverCells := self model value highLightCells.	coverCells isNil		ifFalse: 			[(displayDico at: #displayCoverCells)				ifTrue: [self displayCoverCells: coverCells on: aGC]].	winds := self model value windArray.	winds isNil		ifFalse: 			[(displayDico at: #displayWinds) ifTrue: [self displayWinds: winds on: aGC]].	self model value zones isNil		ifFalse: 			[(displayDico at: #displayZones)				ifTrue: 					[self model value zones do: 							[:rect |							gaw := GraphicsAttributesWrapper on: rect asStroker.							gaw attributes: (GraphicsAttributes new paint: ColorValue yellow).							gaw displayOn: aGC]]]</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>displaying</category><body package="PickCell" selector="displayWinds:on:">displayWinds: winds on: aGC	| gaw grid bounds ls rs geopos uwind vwind processName xStart pos yStart xStop yStop ga scale |	grid := self model value grid.	winds isEmpty ifTrue: [^nil].	bounds := image bounds.	scale := 4.	winds do: 			[:pointInWinds |			rs := pointInWinds readStream.			pos := rs next.			geopos := rs next.			uwind := rs next * scale.			vwind := rs next * scale.			processName := rs next.			(uwind &gt; 1000 or: [vwind &gt; 1000])				ifFalse: 					[xStart := (pos x - 1) * grid x + 1.					yStart := (pos y - 1) * grid y + 1.					xStop := (xStart + uwind) rounded.					yStop := (yStart + vwind) rounded.					ls := LineSegment from: xStart @ yStart to: xStop @ yStop.					gaw := GraphicsAttributesWrapper on: ls asStroker.					ga := (GraphicsAttributes new)								paint: ColorValue yellow;								lineWidth: 2.					gaw attributes: ga.					gaw displayOn: aGC]]</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>accessing</category><body package="PickCell" selector="image:">image: anObject	image := anObject</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>displaying</category><body package="PickCell" selector="rootPointIn:">rootPointIn: coverCells	| name |	coverCells keysAndValuesDo: 			[:pos :arrayWithCell | 			name := arrayWithCell at: 6.			name last = $R ifTrue: [^pos]].	^nil</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>displaying</category><body package="PickCell" selector="displayCoverCells:on:">displayCoverCells: coverCells on: aGC	| cellImage position center gaw ga cell name color text style bounds cache mergedColor cacheGC img1 cv3 red pixel rootPoint diagonale length length2 level height width doLabel |	rootPoint := self rootPointIn: coverCells.	height := self model value cellArray size.	width := self model value cellArray first size.	doLabel := self model value displayModeDictionary at: #displayLabel.	diagonale := width @ height.	length := (diagonale x squared + diagonale y squared) sqrt rounded.	coverCells keysAndValuesDo: 			[:posCell :arrayWithCell |			cell := arrayWithCell at: 5.			name := arrayWithCell at: 6.			text := name asComposedText.			style := TextAttributes styleNamed: #small.			text textStyle: style.			cellImage := cell cellImage.			position := cell position.			rootPoint isNil				ifTrue: [level := 0.1]				ifFalse: 					[diagonale := posCell - rootPoint.					length2 := (diagonale x squared + diagonale y squared) sqrt rounded.					level := (length - length2) squared / length squared.					level := level / 3].			red := ColorValue red.			bounds := cellImage bounds.			cache := Pixmap extent: bounds extent.			cacheGC := cache graphicsContext.			img1 := cacheGC medium asImage.			img1 palette: cellImage palette copy.			cellImage pixelsDo: 					[:x :y |					pixel := cellImage atPoint: x @ y.					color := cellImage palette at: pixel.					"rootPoint = posCell ifTrue: [level := 0.2] ifFalse: [level := 0.1]."					mergedColor := color blendWith: red weight: level.					cv3 := cellImage palette indexOfPaintNearest: mergedColor.	"mergedColor."					img1 valueAtPoint: x @ y put: (cellImage palette at: cv3)].			center := position + (2 @ (cellImage bounds height / 2)).			gaw := GraphicsAttributesWrapper on: text.			name last = $R				ifTrue: [color := ColorValue red]				ifFalse: [color := ColorValue blue].			ga := GraphicsAttributes new paint: color.			gaw attributes: ga.			img1 displayOn: aGC at: position.			doLabel ifTrue: [gaw displayOn: aGC at: center]]</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>displaying</category><body package="PickCell" selector="getCellFromGrid">getCellFromGrid	| grid bounds yPos xPos nbLines nbCol array cell newImage linePlus1 colPlus1 ceiling floor thisGrid |	grid := self model value grid.	self image isNil ifTrue: [^false].	bounds := self image bounds.	nbLines := ((1 + bounds height) / grid y) truncated.	linePlus1 := (1 + bounds height) \\ grid y &gt; 0.	" remove this to avoid right and bottom margin"	linePlus1		ifTrue: 			["nbLines := nbLines + 1"			nil].	nbCol := ((1 + bounds width) / grid x) truncated.	colPlus1 := (1 + bounds height) \\ grid y &gt; 0.	" remove this to avoid right and bottom margin"	colPlus1		ifTrue: 			["nbCol := nbCol + 1"			nil].	array := (Array new: nbLines) collect: [:x | Array new: nbCol].	yPos := 0. 	ceiling := grid ceiling.	floor := grid truncated.	0 to: nbLines - 1		do: 			[:hor |			| gridChoice |			gridChoice := hor even.			xPos := 0.			0 to: nbCol - 1				do: 					[:vert |					gridChoice ifTrue: [thisGrid := ceiling] ifFalse: [thisGrid := floor].					gridChoice := gridChoice not.					"newImage := Image								extent: thisGrid								depth: image depth								palette: image palette copy."					newImage := Image								extent: thisGrid								depth: image depth								bitsPerPixel: 32								palette: image palette copy.					cell := newImage								copy: (0 @ 0 extent: thisGrid)								from: xPos @ yPos								in: image								rule: RasterOp paint.					(array at: hor + 1) at: vert + 1 put: cell.					xPos := xPos + thisGrid x].			yPos := yPos + thisGrid y].	self model value cellArray: array.	^self model value buildCellArrayModel</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>controller accessing</category><body package="PickCell" selector="defaultControllerClass">defaultControllerClass		^PickCellController</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>displaying</category><body package="PickCell" selector="displayTextCoverCells:on:">displayTextCoverCells: coverCells on: aGC	| cellImage position center gaw ga cell name color text box width style |	coverCells keysAndValuesDo: 			[:posCell :arrayWithCell | 			cell := arrayWithCell at: 5.			name := arrayWithCell at: 6.			text := name asComposedText.			style :=  (TextAttributes styleNamed: #small).			text textStyle: style.			cellImage := cell cellImage.			position := cell position.			center := position + ( 2 @ (cellImage bounds height  / 2)).			box := text bounds.			width := box width.  			gaw := GraphicsAttributesWrapper on:text.			name last = $R				ifTrue: [color := ColorValue red]				ifFalse: [color := ColorValue blue].			ga := GraphicsAttributes new paint: color.			gaw attributes: ga.			cellImage displayOn: aGC at: position.			gaw displayOn: aGC at: center]</body></methods><methods><class-id>AlgoDis.PickCellView</class-id> <category>displaying</category><body package="PickCell" selector="displayOn:">displayOn: myGC	| graph gaw coverCells displayDico winds bounds cache cacheGC img1 |	displayDico := self model value displayModeDictionary.	bounds := myGC medium bounds.	cache := Pixmap extent: bounds extent.	cacheGC := cache graphicsContext.	self image isNil		ifFalse: 			[(displayDico at: #displayImage) ifTrue: [self image displayOn: cacheGC]].	(displayDico at: #displayGrid) ifTrue: [self displayGridOn: cacheGC].	coverCells := self model value highLightCells.	coverCells isNil		ifFalse: 			[(displayDico at: #displayCoverCells)				ifTrue: [self displayCoverCells: coverCells on: cacheGC]].	graph := self model value lastGraph.	graph isNil		ifFalse: [(displayDico at: #displayGraph) ifTrue: [graph displayOn: cacheGC]].	winds := self model value windArray.	winds isNil		ifFalse: 			[(displayDico at: #displayWinds)				ifTrue: [self displayWinds: winds on: cacheGC]].	self model value zones isNil		ifFalse: 			[(displayDico at: #displayZones)				ifTrue: 					[self model value zones do: 							[:rect |							gaw := GraphicsAttributesWrapper on: rect asStroker.							gaw attributes: (GraphicsAttributes new paint: ColorValue yellow).							gaw displayOn: cacheGC]]].	img1 := cacheGC medium asImage.	img1 displayOn: myGC</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>event driven</category><body package="PickCell" selector="redButtonPressedEvent:">redButtonPressedEvent: aRedButtonPressedEvent	"Start drawing a new line when the &lt;Select&gt; button is pressed.	Keep showing the crosshair when pressed."	| point pixel csel |	Cursor crossHair show.	self dragInProgress: false.	point := self sensor cursorPointFor: aRedButtonPressedEvent.	self sensor shiftDown		ifTrue: 			[pixel := self view getPixelAt: point.			csel := ColorSelectionDialog new.			csel selection: pixel.			csel open			"self model value cellDisplay selectColorFor: point"]		ifFalse: 			[self sensor ctrlOrCommandDown				ifTrue: 					[origin := point.					dragInProgress := true]				ifFalse: 					[self addPoint: point.					self view invalidate]]</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>events</category><body package="PickCell" selector="mouseMovedEvent:">mouseMovedEvent: aMouseMovedEvent	"Set the cursor when moving in the SketchView.	Add a new point for every mouse movement when drawing is in progress."	| modelArray |	self model value isNil		ifFalse: 			[Cursor crossHair show.			position := self sensor cursorPointFor: aMouseMovedEvent.			modelArray := self model value.			(modelArray at: 4) value: position			"self model value: modelArray"]</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>accessing</category><body package="PickCell" selector="optionKey">optionKey	^optionKey</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>accessing</category><body package="PickCell" selector="dragInProgress:">dragInProgress: anObject	dragInProgress := anObject</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>accessing</category><body package="PickCell" selector="origin">origin	^origin</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>accessing</category><body package="PickCell" selector="dragInProgress">dragInProgress	^dragInProgress</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize  dragInProgress := false.</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>events</category><body package="PickCell" selector="addPoint:">addPoint: aPoint	"Set the cursor when moving in the SketchView.	Add a new point for every mouse movement when drawing is in progress."		| masterController | 	masterController := self masterController.	masterController isNil ifFalse: [ masterController addPoint: aPoint]</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>accessing</category><body package="PickCell" selector="masterModel">masterModel	| uiMaster masterLaVue masterModel |	self model value isNil ifTrue: [^nil].	uiMaster := self model value last.	uiMaster isNil ifTrue: [^nil].	masterLaVue := uiMaster laVue.	masterModel := masterLaVue model.	^masterModel</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>events</category><body package="PickCell" selector="exitEvent:">exitEvent: anExitEvent	"Change the cursor shape back to normal.	Also end current stroke in case red button is still being pressed."	Cursor normal show.	self dragInProgress: false</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>accessing</category><body package="PickCell" selector="optionKey:">optionKey: anObject	optionKey := anObject</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>accessing</category><body package="PickCell" selector="origin:">origin: anObject	origin := anObject</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>accessing</category><body package="PickCell" selector="masterController">masterController	| uiMaster masterLaVue masterController |	self model value isNil ifTrue: [^nil].	uiMaster := self model value last.	uiMaster isNil ifTrue: [^nil].	masterLaVue := uiMaster laVue.	masterController := masterLaVue controller.	^masterController.</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>event driven</category><body package="PickCell" selector="getPixelAt:">getPixelAt: point		| array5 image extent logicalPoint assocArray cell offset cellImage pixel |	array5 := self model value.		image := array5 first.		extent := image extent.		logicalPoint := (point / extent) + 1@1.		assocArray := array5 at: 3.		cell := assocArray detect: [ :elment | elment key = logicalPoint].		offset := point -((point / extent) * extent).		cellImage := cell value cellImage.		pixel := cellImage valueAtPoint:offset.		^pixel</body></methods><methods><class-id>AlgoDis.CellController</class-id> <category>events</category><body package="PickCell" selector="redButtonReleasedEvent:">redButtonReleasedEvent: aRedButtonReleasedEvent	"Start drawing a new line when the &lt;Select&gt; button is pressed.	Keep showing the crosshair when pressed."	| point corner pixels |	point := self sensor cursorPointFor: aRedButtonReleasedEvent.	self dragInProgress		ifTrue: 			[corner := point.			dragInProgress := false.			pixels := self view						processRectangle: (Rectangle vertex: self origin vertex: corner).			pixels inspect]</body></methods><methods><class-id>UICellShow</class-id> <category>AHSWHC mods</category><body package="PickCell" selector="postOpenWith:">postOpenWith: aSpec	"self uiLocation isNil		ifTrue: 			[uiLocation := UILocation new.			uiLocation open]."		[(Delay forSeconds: 1) wait.	self leNbDeClasses value: 1] fork</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out Occam</category><body package="PickCell" selector="fileOutImageExtent:onStream:">fileOutImageExtent: extent onStream: aStream	aStream		nextPut: $[;		space.	extent width printOn: aStream.	aStream		nextPut: $,;		space.	extent height printOn: aStream.	aStream		nextPut: $];		space</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="computeGlobalSignature">computeGlobalSignature	| nb minRed maxRed sumRed minGreen maxGreen sumGreen minBlue maxBlue sumBlue globalSignature minColour maxColour meanColour |	minRed := minGreen := minBlue := 2 raisedTo: 16.	maxRed := maxGreen := maxBlue := 0.	sumRed := sumGreen := sumBlue := 0.	self signaturesToCellMapDictionary keys do: 			[:signature |			minRed := minRed min: signature min red.			maxRed := maxRed max: signature max red.			sumRed := sumRed + signature mean red.			minGreen := minGreen min: signature min green.			maxGreen := maxGreen max: signature max green.			sumGreen := sumGreen + signature mean green.			minBlue := minBlue min: signature min blue.			maxBlue := maxBlue max: signature max blue.			sumBlue := sumBlue + signature mean blue].	nb := self signaturesToCellMapDictionary size.	minColour := ColorValue red: minRed green: minGreen blue: minBlue.	maxColour := ColorValue red: maxRed green: maxGreen blue: maxBlue.	meanColour := ColorValue				red: sumRed / nb				green: sumGreen / nb				blue: sumBlue / nb.	globalSignature := CellSignature				min: minColour				max: maxColour				mean: meanColour.	^globalSignature</body></methods><methods><class-id>UICellShow</class-id> <category>printing</category><body package="PickCell" selector="savePostscript">savePostscript	| box image filename drawingBounds file gc |	box := (self builder componentAt: #ViewHolder1) bounds.	image := Screen default completeContentsOfArea: box.	filename := Dialog requestNewFileName: 'Enter filename for output:'				default: 'drawing.ps'.	filename isEmpty ifTrue: [^self].	drawingBounds := image bounds.	file := PostScriptFile named: filename.	file setLandscape: drawingBounds extent x &gt; drawingBounds extent y.	gc := file graphicsContext. 	gc scaleBy: 1.	self laVue   displayOn: gc.	file close</body></methods><methods><class-id>UICellShow</class-id> <category>dynamic</category><body package="PickCell" selector="testSize">testSize	| position color sel classes |	position := self lastPixel value first.	color := self lastPixel value last.	self lastPixel inspect.	sel := self lesClasses selection.sel inspect.	sel isNil		ifFalse: 			[classes := self selectClassAt:  sel.Dialog warn: 'size ' , classes keys size printString.			"classes values do: [:v | (v at: 2) inspect ]"].</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="positionVH:">positionVH: anObject	positionVH := anObject</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="classToCells">classToCells	^classToCells</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="setupNbClasses">setupNbClasses	| nb coll |	nb := self leNbDeClasses value.	coll := OrderedCollection new.	1 to: nb		do: 			[:red |			1 to: nb				do: 					[:green |					1 to: nb do: [:blue | coll add: (Array with: red with: green with: blue)]]].	^coll</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doInspect">doInspect	| thisClass |	self lesClasses selectionIndex = 0		ifFalse: 			[thisClass := self selectClassAt: self lesClasses selection.			thisClass inspect]</body></methods><methods><class-id>UICellShow</class-id> <category>neighborhood</category><body package="PickCell" selector="computeVN1NeightboursForPoint:from:">computeVN1NeightboursForPoint: point from: keys	"cellular automata Von Neumann neighborhood 1 "	| sameRow neighbourgs nb |	nb := Set new.	sameRow := keys select: [:aKeyPoint | aKeyPoint y = point y].	neighbourgs := sameRow				select: [:aKeyPoint | (aKeyPoint x - point x) abs = 1].	nb addAll: neighbourgs.	sameRow := keys select: [:aKeyPoint | aKeyPoint y = (point y - 1)].	neighbourgs := sameRow				select: [:aKeyPoint | (aKeyPoint x - point x) abs =0 ].	nb addAll: neighbourgs.	sameRow := keys select: [:aKeyPoint | aKeyPoint y = (point y + 1)].	neighbourgs := sameRow				select: [:aKeyPoint | (aKeyPoint x - point x) abs =0].	nb addAll: neighbourgs.	^nb</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="positionVH">positionVH	^positionVH</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doNetwork">doNetwork	| thisClass net |	self lesClasses selectionIndex = 0		ifFalse: 			[thisClass := self selectClassAt: self lesClasses selection.			net := self buildNetworkOn: thisClass.			self uiPickCellNodes updateGeneratorsWithCellNet: net]</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doFusion">doFusion	self targetClass isNil		ifFalse: 			[self fusionDest: self targetClass selected: self selectedClasses.			"self lesClasses selection: self targetClass"]</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="laVue:">laVue: t1  	laVue := t1.	^self</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="selectClassAt:">selectClassAt: anRGBClass	| cellDico xyz ctc |	cellDico := Dictionary new.	ctc := self classToCells.	anRGBClass isNil		ifTrue: [nil]		ifFalse: 			[ctc isNil				ifFalse: 					[ctc keysAndValuesDo: 							[:point :array |							xyz := array at: 3.							anRGBClass = xyz ifTrue: [cellDico at: point put: array]]]].	^cellDico</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="load:">load: signatures	| stats dico sc ltc |	ltc := signatures.	self signaturesToCellMapDictionary: ltc.	dico := self pointToCells: ltc.	sc := SortedCollection				sortBlock: [:p1 :p2 | p1 x = p2 x ifTrue: [p1 y &lt; p2 y] ifFalse: [p1 x &lt; p2 x]].	sc addAll: dico keys.	self laListe list: sc asOrderedCollection.	(self builder componentAt: #RadioButton2) enable.	(self builder componentAt: #RadioButton3) enable.	(self builder componentAt: #RadioButton4) enable.	stats := self computeStats: signatures.	self lesStats value: stats</body></methods><methods><class-id>UICellShow</class-id> <category>printing</category><body package="PickCell" selector="printDouble:onCStream:">printDouble: double onCStream: stream	| string |	string := double asDouble printString.	string := string copyFrom: 1 to: string size - 1.	stream nextPutAll: string</body></methods><methods><class-id>UICellShow</class-id> <category>dynamic</category><body package="PickCell" selector="testFusion">testFusion	| selected first firstClass classe modelArray allPoints allAssocPoints nbPart code |	selected := #(#(1 1 3) #(1 1 4) #(1 2 3) #(1 3 2) #(1 4 1) #(1 4 2) #(2 2 3) #(2 2 4)).	" 2 3 6 9 12 13 22 23 "	first := selected first.	firstClass := (self selectClassAt: first) copy.	selected do: 			[:part |			nbPart := self leNbDeClasses value.			code := self codeFrom: part radix: nbPart.			Transcript				show: code printString;				space.			classe := self selectClassAt: part.			firstClass addAll: classe associations].	modelArray := self laVue model value.	allPoints := OrderedCollection new.	allAssocPoints := OrderedCollection new.	firstClass keysAndValuesDo: 			[:key :val |			allPoints add: key.			allAssocPoints add: key -&gt; (val at: 2)].	modelArray at: 2 put: allPoints.	modelArray at: 3 put: allAssocPoints.	self laVue model value: modelArray</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="fusionDest:selected:">fusionDest: first selected: selected	"selected := #(#(1 1 3) #(1 1 4)   #(1 2 3) #(1 3 2) #(1 4 1) #(1 4 2) #(2 2 3) #(2 2 4))."	" 2 3 6 9 12 13 22 23 "	| firstClass classe modelArray allPoints allAssocPoints stream nbPart code |	firstClass := (self selectClassAt: first) copy.	stream := String new writeStream.	selected do: 			[:part |			nbPart := self leNbDeClasses value.			code := self codeFrom: part radix: nbPart.			stream				nextPutAll: code printString;				space.			classe := self selectClassAt: part.			firstClass addAll: classe associations].	modelArray := self laVue model value.	modelArray isNil		ifFalse: 			[allPoints := OrderedCollection new.			allAssocPoints := OrderedCollection new.			firstClass keysAndValuesDo: 					[:key :val |					allPoints add: key.					allAssocPoints add: key -&gt; (val at: 2)].			modelArray at: 2 put: allPoints.			modelArray at: 3 put: allAssocPoints.			self laVue model value: modelArray].	Transcript		show: stream contents;		cr</body></methods><methods><class-id>UICellShow</class-id> <category>dynamic</category><body package="PickCell" selector="VisualLauncher">VisualLauncher open</body></methods><methods><class-id>UICellShow</class-id> <category>dynamic</category><body package="PickCell" selector="self">self inspect.self halt.</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changeShowSensors">changeShowSensors		self laVue invalidate</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out Occam</category><body package="PickCell" selector="fileOutCellPosition:onStream:">fileOutCellPosition: key onStream: aStream	aStream		nextPut: $[;		space.	key x printOn: aStream.	aStream		nextPut: $,;		space.	key y printOn: aStream.	aStream		nextPut: $];		space</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doAddSource">doAddSource	self lesClasses selectionIndex = 0		ifFalse: 			[self selectedClasses isNil				ifFalse: [self selectedClasses add: self lesClasses selection]]</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="mapIndexIn:for:">mapIndexIn: vue for: position	| array rs image allPoints view viewBounds bounds hPos vPos point pointsToCellImage |	array := self laVue model value.	view := self builder componentAt: #ViewHolder1.	self halt.	viewBounds := view bounds. 	rs := array readStream.	image := rs next.	bounds := image bounds.	allPoints := rs next.	pointsToCellImage  := rs next.	view := self builder componentAt: #ViewHolder1.	viewBounds := view bounds.	viewBounds width.	viewBounds height.	hPos := (position x / bounds width) truncated.	vPos := (position y / bounds height) truncated.	point := hPos @ vPos.	point :=  point +( 1  @ 1) .	(allPoints includes: point) ifTrue: [^point] ifFalse: [^point]</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changeLaVue">changeLaVue	| xyzRef array widget position cellIndex str stream indexValues signature color | 	xyzRef := self lesClasses selection.    	xyzRef isNil		ifFalse: 			[array := self laVue model value.			widget := self builder componentAt: #LabelControl.			array isNil				ifTrue: [widget labelString: '']				ifFalse: 					[position := (array at: 4) value.					position isNil						ifFalse: 							[cellIndex := self mapIndexFor: position.							color := self colorAtReal: position logicPosition: cellIndex.							self lastPixel: position -&gt; (Array with: cellIndex with: color).							cellIndex isNil not								ifTrue: 									[stream := String new writeStream.									stream nextPutAll: (str := cellIndex printString).									indexValues := self classToCells at: cellIndex.									signature := indexValues first.									stream										cr;										nextPutAll: signature min printString.									stream										cr;										nextPutAll: signature mean printString.									stream										cr;										nextPutAll: signature max printString.									stream										cr;										nextPutAll: signature mean2 printString.									stream										cr;										nextPutAll: self lastPixel printString.									self lesStats value: stream contents]								ifFalse: [str := ''].							widget labelString: str]]]</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out Occam</category><body package="PickCell" selector="fileOutCellIndex:position:elevation:lat:lon:onStream:">fileOutCellIndex: index position: key elevation: elevation lat: latitude lon: longitude onStream: aStream	| z x y |	x := longitude.	y := latitude.	z := elevation.	x isNil ifTrue: [x := 0.0d].	y isNil ifTrue: [y := 0.0d].	z isNil ifTrue: [z := 0.0d].	aStream		nextPut: $[;		space.	index printOn: aStream.	aStream		nextPut: $,;		space.	key x printOn: aStream.	aStream		nextPut: $,;		space.	key y printOn: aStream.	aStream		nextPut: $,;		space.	self printDouble: x onOccamStream: aStream.	aStream		nextPut: $,;		space.	self printDouble: y onOccamStream: aStream.	aStream		nextPut: $,;		space.	self printDouble: z onOccamStream: aStream.	aStream		nextPut: $];		space</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out CUDA</category><body package="PickCell" selector="fileOutCellPositionCuda:onStream:">fileOutCellPositionCuda: key onStream: aStream	aStream		nextPut: ${;		space.	key x printOn: aStream.	aStream		nextPut: $,;		space.	key y printOn: aStream.				aStream		nextPut: $};		space</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doTarget">doTarget	self lesClasses selectionIndex = 0		ifFalse: 			[self targetClass: self lesClasses selection.			self selectedClasses: OrderedCollection new]</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out Occam</category><body package="PickCell" selector="fileOutCellIndex:position:elevation:lat:lon:uwind:vwind:onStream:">fileOutCellIndex: index position: key elevation: elevation lat: latitude lon: longitude uwind: ugrd vwind:vgrd onStream: aStream	| z x y u v|	x := longitude.	y := latitude.	z := elevation.	u:= ugrd.	v:= vgrd.	x isNil ifTrue: [x := 0.0d].	y isNil ifTrue: [y := 0.0d].	z isNil ifTrue: [z := 0.0d].	u isNil ifTrue: [u := 0.0d].	v isNil ifTrue: [v := 0.0d].	aStream		nextPut: $[;		space.	index printOn: aStream.	aStream		nextPut: $,;		space.	key x printOn: aStream.	aStream		nextPut: $,;		space.	key y printOn: aStream.	aStream		nextPut: $,;		space.	self printDouble: x onOccamStream: aStream.	aStream		nextPut: $,;		space.	self printDouble: y onOccamStream: aStream.	aStream		nextPut: $,;		space.	self printDouble: z onOccamStream: aStream.	aStream		nextPut: $];	"fin record CellPosition"		nextPut: $,;		space;	"debut record WindArray"		nextPut: $[;		space.	self printDouble: u onOccamStream: aStream.	aStream		nextPut: $,;		space.	self printDouble: v onOccamStream: aStream.	aStream		nextPut: $];		space	"fin record WindArray"</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changePosition">changePosition	| position uipcn gm mapOrigin mousePoint mouseCell gridAspect |	uipcn := self uiPickCellNodes.	position := self positionVH value.	self uiLocation leX value: position x printString.	self uiLocation leY value: position y printString.	uipcn isNil		ifFalse: 			[gm := uipcn pickModel value mercator.			gridAspect := uipcn gridAspect.			mapOrigin := uipcn pickModel value mapOrigin.			mousePoint := self positionVH value.			uipcn pickModel value computeMouseCellAtPoint: mousePoint.			mouseCell := uipcn pickModel value mouseCell.			self uiLocation leX value: mouseCell x printString.			self uiLocation leY value: mouseCell y printString.			mapOrigin isNil				ifFalse: 					[self updateLocFromMouse: mapOrigin mousePoint: mousePoint mercator: gm.					self updateLocForCell: mapOrigin cellPoint: mouseCell mercator: gm]]</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="pointToCells">pointToCells	^pointToCells</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doAccept">doAccept	| text method | 	text := self lEditeur value.	method := self class compile: text classified: 'dynamic'.	self perform: method</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="uiPickCellNodes:">uiPickCellNodes: anObject	uiPickCellNodes := anObject</body></methods><methods><class-id>UICellShow</class-id> <category>dynamic</category><body package="PickCell" selector="testBG">testBG	| classes list dico size nbPart code e bg |	2 to: 4		do: 			[:i |			self leNbDeClasses value: i.			list := self lesClasses list.			dico := List new.			list do: 					[:partition |					classes := self selectClassAt: partition.					size := classes keys size.					nbPart := self leNbDeClasses value.					code := self codeFrom: partition radix: nbPart.					e := BGPickCellData new.					e						xyzRef: partition;						nbElements: size;						code: code.					dico add: e].			bg := BGPickCell new.			bg uneSerie value: dico.			bg open]</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doNetworkWithDataForOccam">doNetworkWithDataForOccam	| thisClass net dataFileName |	self lesClasses selectionIndex = 0  		ifFalse: 			[thisClass := self selectClassAt: self lesClasses selection.			net := self buildNetworkOn: thisClass.			dataFileName := self fileOutOccamClassDataForNet: net.			self uiPickCellNodes updateGeneratorsWithCellNet: net				withDataFile: dataFileName]</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="lastPixel:">lastPixel: anObject	lastPixel := anObject</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doNetworkWithData">doNetworkWithData	| thisClass net dataFileName |	self lesClasses selectionIndex = 0		ifFalse: 			[thisClass := self selectClassAt: self lesClasses selection.			net := self buildNetworkOn: thisClass.			dataFileName := self fileOutSelectedClassDataForNet: net.			self uiPickCellNodes updateGeneratorsWithCellNet: net withDataFile: dataFileName]</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="lastPixel">lastPixel	^lastPixel</body></methods><methods><class-id>UICellShow</class-id> <category>neighborhood</category><body package="PickCell" selector="computeNeightboursForPoint:from:">computeNeightboursForPoint: point from: keys	"cellular automata neighborhood"	self neighborhood value = #vn1Neighborhood		ifTrue: [^self computeVN1NeightboursForPoint: point from: keys].	self neighborhood value = #vn2Neighborhood		ifTrue: [^self computeVN2NeightboursForPoint: point from: keys].	self neighborhood value = #moore1Neighborhood		ifTrue: [^self computeMoore1NeightboursForPoint: point from: keys].	self neighborhood value = #moore2Neighborhood		ifTrue: [^self computeMoore2NeightboursForPoint: point from: keys]</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="lEditeur">lEditeur	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lEditeur isNil		ifTrue:			[lEditeur := String new asValue]		ifFalse:			[lEditeur]</body></methods><methods><class-id>UICellShow</class-id> <category>neighborhood</category><body package="PickCell" selector="computeMoore2NeightboursForPoint:from:">computeMoore2NeightboursForPoint: point from: keys	"cellular automata Von Neumann neighborhood 1 "	| sameRow neighbourgs nb |	nb := Set new.	sameRow := keys select: [:aKeyPoint | aKeyPoint y = point y].	neighbourgs := sameRow				select: [:aKeyPoint | #(1 2) includes: (aKeyPoint x - point x) abs].	nb addAll: neighbourgs.	sameRow := keys				select: [:aKeyPoint | #(1 2) includes: (aKeyPoint y - point y) abs].	neighbourgs := sameRow				select: [:aKeyPoint | (aKeyPoint x - point x) abs &lt;= 2].	nb addAll: neighbourgs.	^nb</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="uiPickCellNodes">uiPickCellNodes	^uiPickCellNodes</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="lesPoints">lesPoints	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lesPoints isNil		ifTrue:			[lesPoints := String new asValue]		ifFalse:			[lesPoints]</body></methods><methods><class-id>UICellShow</class-id> <category>printing</category><body package="PickCell" selector="printAllView">printAllView	| selection liste indices fileNamed cle nbc code name names |	selection := self lesClasses selectionIndex.	liste := self lesClasses list.	selection = 0		ifTrue: [liste isEmpty ifTrue: [^nil] ifFalse: [selection := 1]].	fileNamed := Dialog requestNewFileName: 'name for files' default: 'pattern'.	fileNamed isEmpty		ifFalse: 			[indices := (selection to: liste size) asArray						, (1 to: selection - 1) asArray.			nbc := self leNbDeClasses value.			names := OrderedCollection new: indices size.			indices do: 					[:i |					cle := liste at: i.					code := self codeFrom: cle radix: nbc.					self lesClasses selectionIndex: i.					name := fileNamed , code printString.					self savePostscriptOnFile: name.					UnixProcess cshOne: 'epspdf -b  ' , name , '.ps'.					names add: name].			self lesClasses selectionIndex: selection.			^names].	^nil</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changePerformer">changePerformer	| perf ltc |	perf := self lePerformer value.	ltc := signaturesToCellMapDictionary.	ltc keys do: [:aKey | aKey performer: perf].	self load: ltc.	self laListe selection: nil.	self lesClasses selectionIndex: 1 self changeSelClasse</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="updateLocForCell:cellPoint:mercator:">updateLocForCell: mapOrigin cellPoint: cellPoint mercator: gm	| origin zoom cp m uipcn lonLatOrigin lonLatCorner | 	uipcn := self uiPickCellNodes.	origin := mapOrigin at: 1.	zoom := mapOrigin at: 2.	cp := origin + (cellPoint * uipcn gridAspectPoint).	m := gm pixelToMeterNew: cp zoom: zoom.	lonLatOrigin := gm meterToLonLat: m.	uipcn isNil		ifTrue: 			[cp := origin + (cellPoint * uipcn gridAspectPoint).			m := gm pixelToMeterNew: cp zoom: zoom.			lonLatOrigin := gm meterToLonLat: m.			self uiLocation updateOrigin: lonLatOrigin corner: lonLatOrigin]		ifFalse: 			[cp := origin + uipcn gridAspectPoint + (cellPoint * uipcn gridAspectPoint).			m := gm pixelToMeterNew: cp zoom: zoom.			lonLatCorner := gm meterToLonLat: m.			self uiLocation updateOrigin: lonLatOrigin corner: lonLatCorner]</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="colorAtReal:logicPosition:">colorAtReal: position logicPosition: logPos	| array bounds x y cellImage image |	logPos isNil ifTrue: [^nil].	array := self classToCells at: logPos.	cellImage := array at: 2.	image :=  cellImage cellImage.	bounds :=image  bounds.	x := (position x \\ bounds width) truncated.	y := (position y \\ bounds height) truncated.	self lastPixel: (image  valueAtPoint: x @ y).	^self lastPixel</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out Occam</category><body package="PickCell" selector="fileOutCellPosition:elevation:onStream:">fileOutCellPosition: key elevation: z onStream: aStream	| elevation |	aStream		nextPut: $[;		space.	key x printOn: aStream.	aStream		nextPut: $,;		space. 	key y printOn: aStream.	aStream		nextPut: $,;		space.	elevation := z.	z isNil ifTrue: [elevation := 0].	elevation printOn: aStream.	aStream		nextPut: $];		space</body></methods><methods><class-id>UICellShow</class-id> <category>printing</category><body package="PickCell" selector="printView">printView	self savePostscript</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="lIndexClasses">lIndexClasses	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lIndexClasses isNil		ifTrue:			[lIndexClasses := String new asValue]		ifFalse:			[lIndexClasses]</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="updateModelWith:">updateModelWith: dico	| modelArray allPoints |	modelArray := self laVue model value.	allPoints := dico keys collect: [:assoc | assoc].	modelArray at: 2 put: allPoints.	modelArray at: 3 put: dico."	self cellView model value: modelArray"</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="lePerformer">lePerformer	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lePerformer isNil		ifTrue:			[lePerformer := nil asValue]		ifFalse:			[lePerformer]</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doAwakeLocation">doAwakeLocation	| locWindows |	locWindows := UILocation allInstances				select: [:uiloc | uiloc = self uiLocation].	locWindows isEmpty		ifFalse: 			[locWindows do: 					[:win |					win						open;						closeRequest]].	self uiLocation: UILocation new.	self uiLocation open</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out CUDA</category><body package="PickCell" selector="fileOutCudaClassReferenced:onStream:">fileOutCudaClassReferenced: xyzRef onStream: aStream	| uipcn portee code nbc thisClass ref index cellImage elevation geoPosition latitude longitude |	thisClass := xyzRef.	uipcn := self uiPickCellNodes.	uipcn isNil ifFalse: [portee := uipcn portee value asNumber].	ref := xyzRef values first last.	ref isNil		ifTrue: [code := '']		ifFalse: 			[nbc := self leNbDeClasses value.			code := (self codeFrom: ref radix: nbc) printString].	index := thisClass keys size.	aStream		nextPut: ${;		space.	" start the array "	thisClass keysAndValuesDo: 			[:key :value |			aStream				"nextPut: ${;nextPut: $P;"				space.									cellImage := value at: 2.			elevation := cellImage elevation.			geoPosition := cellImage geoPosition.			latitude := geoPosition y.			longitude := geoPosition x.			aStream				nextPut: ${;				space.			self				fileOutCUDACellPosition: key				elevation: elevation				lat: latitude				lon: longitude				onStream: aStream.								 			aStream				space;				nextPut: $,;				space.			cellImage := value at: 2.			cellImage printCudaOn: aStream.			aStream space.			index := index - 1.			index = 0				ifTrue: 					[aStream						nextPutAll: '};';						cr]				ifFalse: 					[aStream						nextPut: $,;						cr;						nextPutAll: '  ']].	aStream cr</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doTerminateReader">doTerminateReader	ElevationReader reader terminate</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="laSignature">laSignature	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^laSignature isNil		ifTrue:			[laSignature := #min asValue]		ifFalse:			[laSignature]</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="buildNetworkOn:">buildNetworkOn: thisClass	| keys dicoNeighborhood nb nodeDic netConnectivity accessibles key uipcn portee xyzRef code nbc attributes pickModel name |	keys := thisClass keys.	uipcn := self uiPickCellNodes.	uipcn isNil ifFalse: [portee := uipcn portee value asNumber].	dicoNeighborhood := Dictionary new.	keys do: 			[:point |			nb := self computeNeightboursForPoint: point from: keys.			dicoNeighborhood at: point put: nb].	nodeDic := Dictionary new. 	netConnectivity := AlgoDis.NetworkConnectivity new.	xyzRef := self lesClasses selection.	xyzRef isNil		ifTrue: [code := '']		ifFalse: 			[nbc := self leNbDeClasses value.			code := (self codeFrom: xyzRef radix: nbc) printString].	pickModel := uipcn pickModel value.	name := pickModel guessedName asFilename tail.	netConnectivity name: name    , code.	netConnectivity communications: #('none' 'defined').	dicoNeighborhood keysAndValuesDo: 			[:point :pointNb |			accessibles := pointNb collect: [:acc | self makeNameFromPoint: acc].			key := self makeNameFromPoint: point.			accessibles isEmpty				ifFalse: 					[attributes := NetworkNodeAttributes								nodeName: key asString								fanOutNodes: accessibles asArray								procedureName: 'CellNode'								point: point								range: portee.					nodeDic at: key put: attributes]].	netConnectivity nodeDictionary: nodeDic.	netConnectivity buildGraph.	^netConnectivity</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="lesStats">lesStats	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lesStats isNil		ifTrue:			[lesStats := String new asValue]		ifFalse:			[lesStats]</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changeSeuil">changeSeuil	| ltc seuil |	self halt.	ltc := self signaturesToCellMapDictionary.	seuil := self leSeuil value asNumber.	ltc keys do: [:aKey | aKey seuil: seuil].	self load: ltc.	self laListe selection: nil</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="lesCouleurs">lesCouleurs	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lesCouleurs isNil		ifTrue:			[lesCouleurs := String new asValue]		ifFalse:			[lesCouleurs]</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="grid">grid	| model |	model := self laVue model value.	model isNil ifTrue: [^nil] ifFalse: [^model first extent]</body></methods><methods><class-id>UICellShow</class-id> <category>printing</category><body package="PickCell" selector="printLatexPage">printLatexPage	| names ws |	names := self printAllView.	ws := 'page.tex' asFilename writeStream.	ws		nextPutAll: '\documentclass{article}%\special{landscape}\special{! /landplus90 true store} \usepackage[T1]{fontenc}\usepackage[frenchb]{babel}\usepackage{epsf} \usepackage{graphicx} \title{\textbf{From Pickcell}} \date{\today}\begin{document}\maketitle'.	names do: 			[:name |			ws				nextPutAll: '\begin{figure}';				cr.			ws nextPutAll: '\includegraphics[angle=180,width=7cm]{'.			ws nextPutAll: name.			ws				nextPutAll: '.pdf}';				cr.			ws				nextPutAll: ' \caption{' , name , '}';				cr.			ws				nextPutAll: '\end{figure}';				cr].	ws nextPutAll: '\end{document}'.	ws close.	UnixProcess cshOne: 'pdflatex page.tex'.</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="changeIndication">changeIndication	| uipcn model status  gmenu item | 	uipcn := self uiPickCellNodes.	model := uipcn pickModel value. 	status := model getElevation. 	^status</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="lesClasses">lesClasses	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lesClasses isNil		ifTrue:			[lesClasses := SelectionInList new]		ifFalse:			[lesClasses]</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="uiLocation:">uiLocation: anObject	self uiLocation isNil		ifFalse: 			[self uiLocation closeRequest.			uiLocation := nil].	uiLocation := anObject</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out CUDA</category><body package="PickCell" selector="fileOutCudaClassDataForNet:">fileOutCudaClassDataForNet: net	| fileStream refClass fileName ref code nbc fileString directory |	self lesClasses selectionIndex = 0		ifFalse: 			[refClass := self selectClassAt: self lesClasses selection.			ref := refClass values first last.			ref isNil				ifTrue: [code := '']				ifFalse: 					[nbc := self leNbDeClasses value.					code := (self codeFrom: ref radix: nbc) printString].			fileString := self guessedName , 'Data' , code , '.cu'.			directory := self guessedDirectory.			fileString := directory , '/' , fileString.			fileName := fileString asFilename.			fileStream := fileName writeStream.			self fileOutCudaHeaderData: refClass onStream: fileStream.			self fileOutCudaClassReferenced: refClass onStream: fileStream.			fileStream close.			^fileString].	^nil</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="computeStats:">computeStats: signatures	| keys textStream max points sign1 |	textStream := String new writeStream.	keys := signatures keys.	sign1 := keys asArray first.	textStream		nextPutAll: 'signatures  ' , keys size printString;		cr.	textStream		nextPutAll: 'seuil  ' , keys asArray first seuil printString;		cr.	max := 0.	points := nil.	signatures values do: 			[:val |			val size &gt; max				ifTrue: 					[max := val size.					points := val collect: [:each | each key]]].	textStream		nextPutAll: 'largest  ' , max printString;		cr.	points do: 			[:pt |			pt printOn: textStream.			textStream space].	textStream cr.	Transcript		cr;		show: textStream contents;		cr.	textStream		cr;		nextPutAll: 'min ' , sign1 min printString;		cr.	textStream		nextPutAll: 'max ' , sign1 max printString;		cr.	textStream		nextPutAll: 'mean ' , sign1 mean printString;		cr;		cr.	^textStream contents</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changeNbClasses">changeNbClasses	| nbClasses oc dicoEquiv |	nbClasses := self setupNbClasses.	self setClassToCell: self leNbDeClasses value.	oc := OrderedCollection new.	nbClasses do: 			[:cla |			dicoEquiv := self selectClassAt: cla.			dicoEquiv isEmpty ifFalse: [oc add: cla]].	self lesClasses list: oc</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="laVue">laVue 	^laVue</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out Occam</category><body package="PickCell" selector="fileOutCellPosition:elevation:lat:lon:onStream:">fileOutCellPosition: key elevation: elevation lat: latitude lon: longitude onStream: aStream	| z x y |	x := longitude.	y := latitude.	z := elevation.	x isNil ifTrue: [x := 0.0d].	y isNil ifTrue: [y := 0.0d].	z isNil ifTrue: [z := 0.0d].	aStream		nextPut: $[;		space.	1 printOn: aStream.	aStream		nextPut: $,;		space.		key x printOn: aStream.	aStream		nextPut: $,;		space.	key y printOn: aStream.	aStream		nextPut: $,;		space.	self printDouble: x onOccamStream: aStream.	aStream		nextPut: $,;		space.	self printDouble: y onOccamStream: aStream.	aStream		nextPut: $,;		space.	self printDouble: z onOccamStream: aStream.	aStream		nextPut: $];		space</body></methods><methods><class-id>UICellShow</class-id> <category>dynamic</category><body package="PickCell" selector="test1">test1	| position color sel classes |	position := self lastPixel value first.	color := self lastPixel value last.	self lastPixel inspect.	sel := self lesClasses selection.sel inspect.	sel isNil		ifFalse: 			[classes := self selectClassAt:  sel.			classes values do: [:v | (v at: 2) inspect ]].</body></methods><methods><class-id>UICellShow</class-id> <category>printing</category><body package="PickCell" selector="savePostscriptOnFile:">savePostscriptOnFile: fileNamed	| box image filename drawingBounds file gc |	fileNamed isEmpty ifTrue: [^self].	box := (self builder componentAt: #ViewHolder1) bounds.	image := Screen default completeContentsOfArea: box.	filename := fileNamed , '.ps'.	drawingBounds := image bounds.	file := PostScriptFile named: filename.	file setLandscape: drawingBounds extent x &gt; drawingBounds extent y.	gc := file graphicsContext.	gc scaleBy: 1.	self laVue displayOn: gc.	file close</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changeSelClasse">changeSelClasse	| xyzRef nbDeClasses |	xyzRef := self lesClasses selection.	nbDeClasses := self leNbDeClasses value. 	xyzRef isNil		ifFalse: 			[nbDeClasses &gt; 1				ifTrue: [self changeSelClasse: xyzRef from: nbDeClasses]				ifFalse: [self changeAloneClasse]]</body></methods><methods><class-id>UICellShow</class-id> <category>neighborhood</category><body package="PickCell" selector="computeMoore1NeightboursForPoint:from:">computeMoore1NeightboursForPoint: point from: keys	"cellular automata Von Neumann neighborhood 1 "	| sameRow neighbourgs nb |	nb := Set new.	sameRow := keys select: [:aKeyPoint | aKeyPoint y = point y].	neighbourgs := sameRow				select: [:aKeyPoint | (aKeyPoint x - point x) abs = 1].	nb addAll: neighbourgs.	sameRow := keys select: [:aKeyPoint | aKeyPoint y = (point y - 1)].	neighbourgs := sameRow				select: [:aKeyPoint | (aKeyPoint x - point x) abs &lt;= 1].	nb addAll: neighbourgs.	sameRow := keys select: [:aKeyPoint | aKeyPoint y = (point y + 1)].	neighbourgs := sameRow				select: [:aKeyPoint | (aKeyPoint x - point x) abs &lt;= 1].	nb addAll: neighbourgs.	^nb</body></methods><methods><class-id>UICellShow</class-id> <category>initialize-release</category><body package="PickCell" selector="showCellSystemName">showCellSystemName	| pm name winTitle uipcn |	uipcn := self uiPickCellNodes.	uipcn isNil		ifFalse: 			[pm := uipcn pickModel value.			name := pm guessedName.			name isNil ifTrue: [name := 'no name'''].			winTitle := 'Cell browser - ' , name.			self builder window label: winTitle]</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="setClassToCell:">setClassToCell: nbPart	| cellDico xyzRGBCode imageSignature point cellImage |	cellDico := Dictionary new.	imageSignature := self computeGlobalSignature.	self signaturesToCellMapDictionary keysAndValuesDo: 			[:signature :pointsAndImages |			pointsAndImages do: 					[:association | 					point := association key.					cellImage := association value.					xyzRGBCode := imageSignature								rgbCoordinateFor: (signature perform: self laSignature value)								partitions: nbPart.					cellDico at: point						put: (Array with: signature with: cellImage with: xyzRGBCode)]].	^classToCells := cellDico</body></methods><methods><class-id>UICellShow</class-id> <category>dynamic</category><body package="PickCell" selector="testAllSize">testAllSize	| position color sel classes list dico size nbPart code |	list := self lesClasses list.	dico := Dictionary new.	list do: 			[:partition |			classes := self selectClassAt: partition.			size := classes keys size.			nbPart := self leNbDeClasses value.			code := self codeFrom: partition radix: nbPart.			dico add: code -&gt; size].	dico inspect</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="signaturesToCellMapDictionary">signaturesToCellMapDictionary 	^signaturesToCellMapDictionary</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="classToCells:">classToCells: anObject	classToCells := anObject</body></methods><methods><class-id>UICellShow</class-id> <category>parsing</category><body package="PickCell" selector="guessedName">guessedName	| uipcn pm name |	uipcn := self uiPickCellNodes.	pm := uipcn pickModel.	pm isNil		ifFalse: 			[name := pm value guessedName.			^name].	^'aNoNameCellSystem'</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="dumpClasse">dumpClasse	| max x y |	max := self pointToCells keys inject: 0 @ 0				into: 					[:val :elt |					x := val x max: elt x.					y := val y max: elt y.					x @ y].	self dumpClasse: (0 @ 0 extent: max)</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="masterPickCellNodes:">masterPickCellNodes: anUI	uiPickCellNodes := anUI.	self showCellSystemName</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="listToCell:">listToCell: ltc 	signaturesToCellMapDictionary := ltc.	^self</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="targetClass">targetClass	^targetClass</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="leSeuil">leSeuil	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leSeuil isNil		ifTrue:			[leSeuil := 0.00s asValue]		ifFalse:			[leSeuil]</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="codeFrom:radix:">codeFrom: xyzRef radix: nbc	| code |	code := (xyzRef at: 3) - 1.	code := code + (nbc * ((xyzRef at: 2) - 1)).	code := code + (nbc * nbc * ((xyzRef at: 1) - 1)).	^code</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="targetClass:">targetClass: anObject	targetClass := anObject</body></methods><methods><class-id>UICellShow</class-id> <category>dynamic</category><body package="PickCell" selector="test">testself   testBG</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doLoadWind">doLoadWind	self halt</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="mapIndexFor:">mapIndexFor: position	| array rs image allPoints view viewBounds bounds hPos vPos point pointsToCellImage |	array := self laVue model value.	view := self builder componentAt: #ViewHolder1. 	viewBounds := view bounds.	rs := array readStream.	image := rs next.	bounds := image bounds.	allPoints := rs next.	pointsToCellImage := rs next.	view := self builder componentAt: #ViewHolder1.	viewBounds := view bounds.	viewBounds width.	viewBounds height.	hPos := (position x / bounds width) truncated.	vPos := (position y / bounds height) truncated.	point := hPos @ vPos.	point := point + (1 @ 1).	(allPoints includes: point) ifTrue: [^point] ifFalse: [^nil]</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out CUDA</category><body package="PickCell" selector="fileOutCUDACellPosition:elevation:lat:lon:onStream:">fileOutCUDACellPosition: key elevation: elevation lat: latitude lon: longitude onStream: aStream	| z x y |	x := longitude.	y := latitude.	z := elevation.	x isNil ifTrue: [x := 0.0d].	y isNil ifTrue: [y := 0.0d].	z isNil ifTrue: [z := 0.0d].	aStream		nextPut: ${;		space.	key x printOn: aStream.	aStream		nextPut: $,;		space.	key y printOn: aStream.	aStream		nextPut: $,;		space.	self printDouble: x onCStream: aStream. 	aStream		nextPut: $,;		space.	self printDouble: y onCStream: aStream. 	aStream		nextPut: $,;		space.	self printDouble: z onCStream: aStream. 	aStream		nextPut: $};		space</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="showSensors">showSensors	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^showSensors isNil		ifTrue:			[showSensors := false asValue]		ifFalse:			[showSensors]</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changeSig">changeSig	"	ltc := self listToCell .	self load: ltc."	| dicoEquiv xyzRef nbc code anEntry laValeur assocPoints allPoints allImages label animationRegion view stats ws cellImage |	self setClassToCell: self leNbDeClasses value.	xyzRef := #(1 1 1).	dicoEquiv := self selectClassAt: xyzRef.	self lIndexClasses value: xyzRef printString.	nbc := self leNbDeClasses value.	code := (xyzRef at: 3) - 1.	code := code + (nbc * ((xyzRef at: 2) - 1)).	code := code + (nbc * nbc * ((xyzRef at: 1) - 1)).	(self builder componentAt: #LabelCode)		labelString: 'code  ' , code printString.	dicoEquiv isEmpty		ifTrue: 			[self lesPoints value: ' '.			self lesCouleurs value: ' ']		ifFalse: 			[anEntry := dicoEquiv keys asArray first.			laValeur := dicoEquiv at: anEntry.			cellImage := laValeur at: 2.			assocPoints := OrderedCollection new.			allPoints := OrderedCollection new.			allImages := OrderedCollection new.			dicoEquiv keysAndValuesDo: 					[:keyPt :valueArray |					allPoints add: keyPt.					allImages add: valueArray last.					assocPoints add: keyPt -&gt; (valueArray at: 2)].			"			self lesPoints value: allPoints asSortedCollection asws printString."			self lesPoints				value: dicoEquiv keys asSortedCollection asArray printString.			self lesCouleurs				value: (laValeur first perform: self laSignature value) printString.			label := self builder componentAt: #CellView.			animationRegion := label bounds.			view := self builder composite.			1 to: 1				by: -1				do: 					[:factor |					(Delay forMilliseconds: 100) wait.					label label: (cellImage cellImage shrunkenBy: factor @ factor).					view invalidateRectangle: animationRegion repairNow: true].			ws := (Array new: 7) writeStream.			ws nextPut: cellImage cellImage.			ws nextPut: allPoints.			ws nextPut: assocPoints.			ws nextPut: positionVH.			ws nextPut: 0.			ws nextPut: self.	"#6"			ws nextPut: self uiPickCellNodes.	"#7"			self laVue model value: ws contents.			stats := self computeStats: self signaturesToCellMapDictionary.			self lesStats value: stats.			self leNbDeClasses value: self leNbDeClasses value]</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="openCellView:doDraw:">openCellView: networkConnectivity doDraw: doDraw	| win comp ng stream portee points |	ng := AlgoDis.NetworkGeometry new.	portee := self uiPickCellNodes portee value asNumber. 	ng portee: portee. 	ng windowSize: self uiPickCellNodes laVue bounds width. 	win := ScheduledWindow				model: nil				label: 'cell array'				minimumSize: self uiPickCellNodes laVue  bounds corner.	comp := CompositePart new.	points := (networkConnectivity nodeDictionary values) collect: [ :pointName | pointName at: 3 ] .	ng points: points.	stream := Random new.	doDraw		ifTrue: 			[ng drawCirclesOnComposite: comp.			ng drawColorsOnComposite: comp randomStream: stream.			win component: (BoundedWrapper on: comp).			win open].	^ng</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="laListe">laListe	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^laListe isNil		ifTrue:			[laListe := SelectionInList new]		ifFalse:			[laListe]</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doFetchElevation">doFetchElevation	| uipcn model status menu gmenu item |	uipcn := self uiPickCellNodes.	model := uipcn pickModel value.	model getElevation: model getElevation not.	status := model getElevation.	gmenu := self builder menuAt: #globalMenu.	item := gmenu menuItemLabeled: 'View'.	item := item submenu menuItemLabeled: 'fetch elevation'.	status ifTrue: [item beOn] ifFalse: [item beOff]</body></methods><methods><class-id>UICellShow</class-id> <category>parsing</category><body package="PickCell" selector="guessedDirectory">guessedDirectory	| dd pm uipcn |	uipcn := self uiPickCellNodes.	uipcn isNil ifFalse:  [	pm := uipcn  pickModel value. 	pm isNil		ifTrue: 			[dd := Filename defaultDirectory.			dd := dd , '/Generated/'.			dd asFilename ensureDirectory.			^dd]		ifFalse: [^pm guessedDirectory]]</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="makeNameFromPoint:">makeNameFromPoint: point	| stream |	stream := String new writeStream.	stream nextPutAll: 'Px'.	point x printOn: stream.	stream nextPutAll: 'y'.	point y printOn: stream.	^stream contents</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="neighborhood">neighborhood	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^neighborhood isNil		ifTrue:			[neighborhood :=#vn1Neighborhood  asValue]		ifFalse:			[neighborhood]</body></methods><methods><class-id>UICellShow</class-id> <category>dynamic</category><body package="PickCell" selector="testFusion2">testFusion2	| selected first |	selected := #(#(1 1 3) #(1 1 4) #(1 2 3) #(1 3 2) #(1 4 1) #(1 4 2) #(2 2 3) #(2 2 4)).	" 2 3 6 9 12 13 22 23 "	first := selected first.	self fusionDest: first selected: selected</body></methods><methods><class-id>UICellShow</class-id> <category>printing</category><body package="PickCell" selector="printDouble:onOccamStream:">printDouble: double onOccamStream: stream	| string |	string := double asDouble printString.	string := string copyFrom: 1 to: string size - 1.	stream nextPutAll: string</body></methods><methods><class-id>UICellShow</class-id> <category>neighborhood</category><body package="PickCell" selector="computeVN2NeightboursForPoint:from:">computeVN2NeightboursForPoint: point from: keys	"cellular automata Von Neumann neighborhood 1 "	| sameRow neighbourgs nb |	nb := Set new.	sameRow := keys select: [:aKeyPoint | aKeyPoint y = point y].	neighbourgs := sameRow				select: [:aKeyPoint | #(1 2) includes: (aKeyPoint x - point x) abs].	nb addAll: neighbourgs.	sameRow := keys select: [:aKeyPoint | (aKeyPoint y - point y) abs = 1].	neighbourgs := sameRow				select: [:aKeyPoint | (aKeyPoint x - point x) abs &lt;= 1].	nb addAll: neighbourgs.	sameRow := keys select: [:aKeyPoint | (aKeyPoint y - point y) abs = 2].	neighbourgs := sameRow select: [:aKeyPoint | aKeyPoint x = point x].	nb addAll: neighbourgs.	^nb</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="uiLocation">uiLocation	uiLocation isNil		ifTrue: 			[uiLocation := UILocation new.			uiLocation open].	^uiLocation</body></methods><methods><class-id>UICellShow</class-id> <category>dynamic</category><body package="PickCell" selector="ps">ps 	| box image filename drawingBounds file gc |	box := (self builder componentAt: #ViewHolder1) bounds.self halt.	image := Screen default completeContentsOfArea: box.	filename := Dialog requestNewFileName: 'Enter filename for output:'				default: 'drawing.ps'.	filename isEmpty ifTrue: [^self].	drawingBounds := image bounds.	file := PostScriptFile named: filename.	file setLandscape: drawingBounds extent x &gt; drawingBounds extent y.	gc := file graphicsContext. 	gc scaleBy: 1.	image displayOn: gc.	file close</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="selectedClasses">selectedClasses	^selectedClasses</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="leMaskName">leMaskName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leMaskName isNil		ifTrue:			[leMaskName := String new asValue]		ifFalse:			[leMaskName]</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="signaturesToCellMapDictionary:">signaturesToCellMapDictionary: ltc	signaturesToCellMapDictionary := ltc.</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="leNbDeClasses">leNbDeClasses	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leNbDeClasses isNil		ifTrue: [leNbDeClasses := 1 asValue]		ifFalse: [leNbDeClasses]</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="selectedClasses:">selectedClasses: anObject	selectedClasses := anObject</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="dumpClasse:">dumpClasse: bounds	| xyzRef displayed point array h w index ws allPoints fName |	self halt.	h := bounds height.	w := bounds width.	xyzRef := self lesClasses selection.	xyzRef isNil		ifFalse: 			[fName := self leMaskName value.			fName isEmpty ifTrue: [fName := 'trace.bin'].			array := Array new: h * w withAll: 0.			displayed := self laVue model value.			ws := fName asFilename writeStream.			ws isWritable ifFalse: [^Dialog warn: 'cannot write ' , fName].			self laVue model value first.			allPoints := displayed at: 2.			allPoints do: 					[:pointAsso |					point := pointAsso.					index := (point y - 1) * w + (point x - 1).					array at: index put: 1]].	w printOn: ws.	ws space.	h printOn: ws.	ws space.	array		do: [:elt | elt = 0 ifTrue: [ws nextPut: 0] ifFalse: [ws nextPut: 1]].	ws close</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="updateLocFromMouse:mousePoint:mercator:">updateLocFromMouse: mapOrigin mousePoint: mousePoint mercator: gm	| origin zoom cp m lonLatMap |	origin := mapOrigin at: 1.	zoom := mapOrigin at: 2.	cp := origin + mousePoint.	m := gm pixelToMeterNew: cp zoom: zoom.	lonLatMap := gm meterToLonLat: m.	self uiLocation leXGeo value: lonLatMap x printString.	self uiLocation leYGeo value: lonLatMap y printString</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changeSelOld">changeSelOld	| key image stats allPoints sigAndCells signature assocPoints allImages label animationRegion view nbPart xyz |	self signaturesToCellMapDictionary.	self laListe selection isNil		ifFalse: 			[key := self laListe selection.			sigAndCells := self pointToCells at: key.			signature := sigAndCells first.			nbPart := self leNbDeClasses value.			xyz := signature indexFor: (signature perform: self laSignature value)						partition: nbPart.			self lIndexClasses value: xyz printString.			assocPoints := sigAndCells last.			image := assocPoints first value.			allPoints := OrderedCollection new.			allImages := OrderedCollection new.			assocPoints do: 					[:asso |					allPoints add: asso key.					allImages add: asso value].			self lesPoints value: allPoints asSortedCollection asArray printString.			self lesCouleurs				value: (signature perform: self laSignature value) printString.			label := self builder componentAt: #CellView.			animationRegion := label bounds.			view := self builder composite.			5 to: 1				by: -1				do: 					[:factor |					(Delay forMilliseconds: 100) wait.					label label: (image shrunkenBy: factor @ factor).					view invalidateRectangle: animationRegion repairNow: true].			self laVue model				value: (Array with: image with: allPoints with: assocPoints).			stats := self computeStats: self signaturesToCellMapDictionary.			self lesStats value: stats]</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changeSelClasse:from:">changeSelClasse: xyzRef from: nbDeClasses	| dicoEquivalents nbc code unePosition arraySigCellClass cellImage image allPoints allImages assocPoints label animationRegion ws stats |	self setClassToCell: nbDeClasses.	dicoEquivalents := self selectClassAt: xyzRef.	self lIndexClasses value: xyzRef printString.	nbc := self leNbDeClasses value.	code := self codeFrom: xyzRef radix: nbc.	(self builder componentAt: #LabelCode)		labelString: 'code : ' , code printString.	dicoEquivalents isEmpty		ifTrue: 			[" ca serait étonnant"			self lesPoints value: ' '.			self lesCouleurs value: ' ']		ifFalse: 			[unePosition := dicoEquivalents keys asArray first.			arraySigCellClass := dicoEquivalents at: unePosition.			cellImage := arraySigCellClass at: 2.			image := cellImage cellImage.			allPoints := dicoEquivalents keys asOrderedCollection.			allImages := dicoEquivalents values collect: [:array | array last].			"assocPoints := dicoEquivalents values collect: [ :array | array at: 2]."			assocPoints := OrderedCollection new.			dicoEquivalents keysAndValuesDo: 					[:keyPt :valueArray |					"							allPoints add: keyPt.							allImages add: valueArray last."					assocPoints add: keyPt -&gt; (valueArray at: 2)].			"			self lesPoints value: allPoints asSortedCollection asArray printString."			self lesPoints				value: dicoEquivalents keys asSortedCollection asArray printString.			self lesCouleurs				value: (arraySigCellClass first perform: self laSignature value)						printString.			label := self builder componentAt: #CellView.			animationRegion := label bounds.			view := self builder composite.			2 to: 1				by: -1				do: 					[:factor |					(Delay forMilliseconds: 100) wait.					label label: (image shrunkenBy: factor @ factor).					view invalidateRectangle: animationRegion repairNow: true].			ws := (Array new: 5) writeStream.			ws nextPut: image.	"#1"			ws nextPut: allPoints.	"#2"			ws nextPut: assocPoints.	"#3"			ws nextPut: positionVH.	"#4"			ws nextPut: 0.	"#5"			ws nextPut: self.	"#6"			ws nextPut: self uiPickCellNodes.	"#7"			self laVue model value: ws contents.			stats := self computeStats: self signaturesToCellMapDictionary.			self lesStats value: stats]</body></methods><methods><class-id>UICellShow</class-id> <category>dynamic</category><body package="PickCell" selector="kiki">kikiself uiLocation isNil		ifTrue: 			[uiLocation := UILocation new.			uiLocation open].uiLocation := UILocation new.uiLocation open</body></methods><methods><class-id>UICellShow</class-id> <category>actions</category><body package="PickCell" selector="doNetworkWithDataForCuda">doNetworkWithDataForCuda	| thisClass net dataFileName |	self lesClasses selectionIndex = 0		ifFalse: 			[thisClass := self selectClassAt: self lesClasses selection.			net := self buildNetworkOn: thisClass.			dataFileName := self fileOutCudaClassDataForNet: net. 			self uiPickCellNodes updateGeneratorsWithCellNet: net				withDataFile: dataFileName]</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="pointToCells:">pointToCells: signatures	| dico sc p1 p2 firstEntry | 	dico := Dictionary new.	signatures keysAndValuesDo: 			[:key :collection |			sc := SortedCollection sortBlock: 							[:ass1 :ass2 |							p1 := ass1 key.							p2 := ass2 key.							p1 x &lt; p2 x and: [p1 y &lt; p2 y]].			sc addAll: collection.			firstEntry := sc first.			dico at: firstEntry key put: (Array with: key with: collection)].	^pointToCells := dico</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="theSeaLevel">theSeaLevel	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^theSeaLevel isNil		ifTrue:			[theSeaLevel := 0 asValue]		ifFalse:			[theSeaLevel]</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changeAloneClasseSaved">changeAloneClasseSaved	"self setClassToCell: 1."	| cellImage image assocPoints ws allPoints uipcn pickModel cellArray cellDico signature position xPos yPos doGround doSea seaLevel |	(self builder componentAt: #LabelCode) labelString: 'code : 0'.	uipcn := self uiPickCellNodes.	pickModel := uipcn pickModel value.	cellArray := pickModel newCellArray.	cellDico := Dictionary new.	allPoints := OrderedCollection new.	assocPoints := OrderedCollection new.	doGround := self showGround value.	doSea := self showSea value.	seaLevel := self theSeaLevel value.	xPos := 0.	yPos := 0.	cellArray do: 			[:eachRow |			yPos := yPos + 1.			xPos := 0.			eachRow do: 					[:array3Elem |					xPos := xPos + 1.					image := array3Elem first.					signature := array3Elem at: 2.					cellImage := array3Elem at: 3.					position := cellImage position.					position := xPos @ yPos.					allPoints add: position.					assocPoints add: position -&gt; cellImage.					" in setClassToCell 					cellDico at: point						put: (Array with: signature with: cellImage with: xyzRGBCode)"					cellDico at: position put: (Array with: signature with: cellImage with: #(1 1 1))]].	classToCells := cellDico.	ws := (Array new: 5) writeStream.	ws nextPut: image.	"#1"	ws nextPut: allPoints.	"#2"	ws nextPut: assocPoints.	"#3"	ws nextPut: positionVH.	"#4"	ws nextPut: 0.	"#5"	ws nextPut: self.	"#6"	ws nextPut: self uiPickCellNodes.	"#7"	self laVue model value: ws contents	"			stats := self computeStats: self signaturesToCellMapDictionary.			self lesStats value: stats"</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="showSea">showSea	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^showSea isNil		ifTrue:			[showSea := false asValue]		ifFalse:			[showSea]</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changeSel">changeSel	| key image stats allPoints sigAndCells assocPoints allImages nbPart xyz cellDico xyzRef dicoEquiv point cellImage signature |	self laListe selection isNil		ifFalse: 			[key := self laListe selection.			cellDico := Dictionary new.			self setClassToCell: self leNbDeClasses value.			self signaturesToCellMapDictionary keysAndValuesDo: 					[:cellSignature :pointsToCellImage |					pointsToCellImage do: 							[:association |							point := association key.							cellImage := association value.							cellDico at: point put: (Array with: cellSignature with: cellImage)]]. 			sigAndCells := self pointToCells at: key.			signature := self computeGlobalSignature.			nbPart := self leNbDeClasses value.			xyzRef := signature						rgbCoordinateFor: (signature perform: self laSignature value)						partitions: nbPart.			dicoEquiv := self selectClassAt: xyzRef.			self lIndexClasses value: xyzRef printString.			image := sigAndCells last first value.			assocPoints := OrderedCollection new.			allPoints := OrderedCollection new.			allImages := OrderedCollection new.			cellDico keysAndValuesDo: 					[:keyPt :valueArray |					xyz := signature								rgbCoordinateFor: (valueArray first perform: self laSignature value)								partitions: nbPart. 					xyz = xyzRef						ifTrue: 							[allPoints add: keyPt.							allImages add: valueArray last.							assocPoints add: keyPt -&gt; valueArray last]]. 			self lesPoints value: dicoEquiv keys asSortedCollection printString.			self lesCouleurs				value: (signature perform: self laSignature value) printString. 			self laVue model				value: (Array with: image with: allPoints with: assocPoints).			stats := self computeStats: self signaturesToCellMapDictionary.			self lesStats value: stats]</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="changeAloneClasse">changeAloneClasse	"self setClassToCell: 1."	| cellImage image assocPoints ws allPoints uipcn pickModel cellArray cellDico signature position xPos yPos doGround doSea seaLevel elevation test |	(self builder componentAt: #LabelCode) labelString: 'code : 0'.	uipcn := self uiPickCellNodes.	pickModel := uipcn pickModel value.	cellArray := pickModel newCellArray.	cellDico := Dictionary new.	allPoints := OrderedCollection new.	assocPoints := OrderedCollection new.	doGround := self showGround value.	doSea := self showSea value.	seaLevel := self theSeaLevel value.	xPos := 0.	yPos := 0.	cellArray do: 			[:eachRow |			yPos := yPos + 1.			xPos := 0.			eachRow do: 					[:array3Elem |					xPos := xPos + 1.					image := array3Elem first.					signature := array3Elem at: 2.					cellImage := array3Elem at: 3. 					position := cellImage position.					elevation := cellImage elevation.					test := self checkElevation: elevation inGround: doGround inSea: doSea seaLevel: seaLevel.					position := xPos @ yPos.					test ifTrue: [					allPoints add: position.					assocPoints add: position -&gt; cellImage. 					cellDico at: position put: (Array with: signature with: cellImage with: #(1 1 1))]]].	classToCells := cellDico.	ws := (Array new: 5) writeStream.	ws nextPut: image.	"#1"	ws nextPut: allPoints.	"#2"	ws nextPut: assocPoints.	"#3"	ws nextPut: positionVH.	"#4"	ws nextPut: 0.	"#5"	ws nextPut: self.	"#6"	ws nextPut: self uiPickCellNodes.	"#7"	self laVue model value: ws contents	"			stats := self computeStats: self signaturesToCellMapDictionary.			self lesStats value: stats"</body></methods><methods><class-id>UICellShow</class-id> <category>aspects</category><body package="PickCell" selector="showGround">showGround	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^showGround isNil		ifTrue:			[showGround := false asValue]		ifFalse:			[showGround]</body></methods><methods><class-id>UICellShow</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	super initialize.	laVue := CellView new.	laVue model: nil asValue.	self laListe selectionIndexHolder onChangeSend: #changeSel to: self.	self lesClasses selectionIndexHolder onChangeSend: #changeSelClasse		to: self.	self laSignature onChangeSend: #changeSig to: self.	self lePerformer onChangeSend: #changePerformer to: self.	self leSeuil onChangeSend: #changeSeuil to: self.	self leNbDeClasses onChangeSend: #changeNbClasses to: self.	self laVue model onChangeSend: #changeLaVue to: self.	positionVH := nil asValue.	positionVH onChangeSend: #changePosition to: self.	self showSensors onChangeSend: #changeShowSensors to: self.	self showCellSystemName.	self showSea value: true.	self showGround value: true.	self showSea onChangeSend: #changeSelClasse to: self.	self showGround onChangeSend: #changeSelClasse to: self.	self theSeaLevel onChangeSend: #changeSelClasse to: self</body></methods><methods><class-id>UICellShow</class-id> <category>utilities</category><body package="PickCell" selector="checkElevation:inGround:inSea:seaLevel:">checkElevation: elevation inGround: doGround inSea: doSea seaLevel: seaLevel	(doGround and: [doSea]) ifTrue: [^true].	doSea ifFalse: [^elevation &gt; seaLevel].	doGround ifFalse: [^elevation &lt;= seaLevel].	^false</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out</category><body package="PickCell" selector="fileOutSelectedClassDataForNet:">fileOutSelectedClassDataForNet: net	| fileStream refClass fileName ref code nbc fileString |	self lesClasses selectionIndex = 0		ifFalse: 			[refClass := self selectClassAt: self lesClasses selection.			ref := refClass values first last.			ref isNil				ifTrue: [code := '']				ifFalse: 					[nbc := self leNbDeClasses value.					code := (self codeFrom: ref radix: nbc) printString].			fileString := Dialog requestNewFileName: 'Cell data file (.occ or .cu)'						default: self guessedName , code.			(fileString isNil or: [fileString isEmpty])				ifTrue: 					[Dialog warn: 'no name'.					^nil].			fileName := fileString asFilename.			fileName extension = '.st'				ifTrue: 					[fileString := fileString copyFrom: 1 to: fileString size - 3.					fileName := fileString asFilename.					Dialog warn: 'removed .st , Sorry'].			fileName extension = '.occ'				ifTrue: 					[fileStream := fileName writeStream.					self fileOutOccamHeaderGeoData: refClass onStream: fileStream.					self fileOutClassReferenced: refClass onStream: fileStream forNet: net.					fileStream close.					^fileString].			(#('.cu' '.c') includes: fileName extension)				ifTrue: 					[fileStream := fileName writeStream.					self fileOutCudaHeaderData: refClass onStream: fileStream.					self fileOutCudaClassReferenced: refClass onStream: fileStream.					fileStream close.					^fileString]].	Dialog warn: 'must use .occ or .cu extension'.	^nil</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="obtainLocFromMouse:mercator:">obtainLocFromMouse: mapOrigin mercator: gm	| origin zoom m lonLatMap |	origin := mapOrigin at: 1.	zoom := mapOrigin at: 2.	m := gm pixelToMeterNew: origin zoom: zoom.	lonLatMap := gm meterToLonLat: m.	^lonLatMap</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out CUDA</category><body package="PickCell" selector="fileOutDataCUDAOrganizationOnStream:">fileOutDataCUDAOrganizationOnStream: aStream	| orga |	orga := self systemOrganization.	aStream nextPutAll: 'SystemOrganization systemOrganization = {'.	orga width printOn: aStream.	aStream nextPutAll: ' , '.	orga height printOn: aStream.	aStream nextPutAll: ' , '.	orga cellSize x printOn: aStream.	aStream nextPutAll: ' , '.	orga cellSize y printOn: aStream.	aStream nextPutAll: ' , '.	self printDouble: orga longitude onOccamStream: aStream.	aStream nextPutAll: ' , '.	self printDouble: orga latitude onOccamStream: aStream.	aStream nextPutAll: ' , '.	orga zoom printOn: aStream.	aStream nextPutAll: ' }; '.	aStream		cr;		cr</body></methods><methods><class-id>UICellShow</class-id> <category>changing</category><body package="PickCell" selector="obtainLocFromMouse:mousePoint:mercator:">obtainLocFromMouse: mapOrigin mousePoint: mousePoint mercator: gm	| origin zoom cp m lonLatMap |	origin := mapOrigin at: 1.	zoom := mapOrigin at: 2.	cp := origin.	m := gm pixelToMeterNew: cp zoom: zoom.	lonLatMap := gm meterToLonLat: m.	^lonLatMap</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out CUDA</category><body package="PickCell" selector="declareCUDASystemOrganizationOn:">declareCUDASystemOrganizationOn: fileStream	fileStream		cr;		nextPutAll: 'typedef struct SystemOrganization  {    int width, height;    int cellWidth, cellHeight;    double longitude, latitude;    int zoom;} SystemOrganization ; '</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out CUDA</category><body package="PickCell" selector="fileOutCudaHeaderData:onStream:">fileOutCudaHeaderData: refClass onStream: fileStream	| nbCells aCell extent |	nbCells := refClass keys size.	aCell := refClass values first at: 2.	extent := aCell cellImage extent. 	fileStream		nextPutAll: ' 		struct ImageExtent {      int width, height;};typedef struct CellPosition {    int x,y; /* cell geometric position */   double longitude, latitude, elevation; /* geo position */} CellPosition;struct RGBPixel {    unsigned char red, green, blue;};typedef struct RGBPixel  Depth24ByteArray  ['				, (extent x * extent y) printString , ' ] ;'.	fileStream cr.	fileStream		nextPutAll: 'typedef struct CellImage {  		       struct ImageExtent  extent;                     Depth24ByteArray pixelArray;    } CellImage; ';		cr.	fileStream		nextPutAll: 'typedef struct  CellArray{     CellPosition position;    CellImage image; }  CellArray ; ';		cr.		self declareCUDASystemOrganizationOn: fileStream.	self fileOutDataCUDAOrganizationOnStream: fileStream.		fileStream		nextPutAll: 'CellArray  Cells [   ' , nbCells printString , '] =  '</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="systemOrganization:">systemOrganization: anObject	systemOrganization := anObject</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out</category><body package="PickCell" selector="fileOutSelectedClassData">fileOutSelectedClassData	| fileStream refClass fileName ref code nbc fileString |	self lesClasses selectionIndex = 0		ifFalse: 			[refClass := self selectClassAt: self lesClasses selection.			ref := refClass values first last.			ref isNil				ifTrue: [code := '']				ifFalse: 					[nbc := self leNbDeClasses value.					code := (self codeFrom: ref radix: nbc) printString].			fileString := Dialog						requestNewFileName: 'File data .occ or .cu'						default: self guessedName , code.			fileString isNil				ifTrue: 					[Dialog warn: 'no name'.					self halt.					^nil].			fileName := fileString asFilename.			fileName extension = '.st'				ifTrue: 					[fileString := fileString copyFrom: 1 to: fileString size - 3.					fileName := (fileString , '.cu') asFilename.					Dialog warn: '.st replaced by .cu, Sorry'].			fileName extension = '.occ'				ifTrue: 					[fileStream := fileName writeStream.					self fileOutOccamHeaderGeoData: refClass onStream: fileStream.					self fileOutClassReferenced: refClass onStream: fileStream.					fileStream close.					^fileString].			(#('.cu' '.c') includes: fileName extension)				ifTrue: 					[fileStream := fileName writeStream.					self fileOutCudaHeaderData: refClass onStream: fileStream.					self fileOutCudaClassReferenced: refClass onStream: fileStream.					fileStream close.					^fileString]].	^nil</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out</category><body package="PickCell" selector="fileOutSelectedClassDataForOccam">fileOutSelectedClassDataForOccam	| fileStream refClass fileName ref code nbc fileString directory |	self lesClasses selectionIndex = 0		ifFalse: 			[refClass := self selectClassAt: self lesClasses selection.			ref := refClass values first last.			ref isNil				ifTrue: [code := '']				ifFalse: 					[nbc := self leNbDeClasses value.					code := (self codeFrom: ref radix: nbc) printString].			fileString := self guessedName , code , 'Data.occ'.			directory := self guessedDirectory.			fileString := directory , '/' , fileString.			fileName := fileString asFilename.			fileStream := fileName writeStream.			self fileOutOccamHeaderGeoData: refClass onStream: fileStream.			self fileOutClassReferenced: refClass onStream: fileStream.			fileStream close].	^fileString</body></methods><methods><class-id>UICellShow</class-id> <category>accessing</category><body package="PickCell" selector="systemOrganization">systemOrganization	systemOrganization isNil ifTrue: [self setOrganization].	^systemOrganization</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out Occam</category><body package="PickCell" selector="fileOutOccamClassDataForNet:">fileOutOccamClassDataForNet: net	| fileStream refClass fileName ref code nbc fileString directory |	self lesClasses selectionIndex = 0  		ifFalse: 			[refClass := self selectClassAt: self lesClasses selection.			ref := refClass values first last.			ref isNil				ifTrue: [code := '']				ifFalse: 					[nbc := self leNbDeClasses value.					code := (self codeFrom: ref radix: nbc) printString].			fileString := self guessedName , 'Data' , code , '.occ'.			directory := self guessedDirectory.			fileString := directory , '/' , fileString.			fileName := fileString asFilename.			fileStream := fileName writeStream. 			self fileOutOccamHeaderGeoData: refClass onStream: fileStream forNet: net.			self fileOutClassReferenced: refClass onStream: fileStream forNet: net.			fileStream flush.			fileStream close.			^fileString].	^nil</body></methods><methods><class-id>UICellShow</class-id> <category>utilities</category><body package="PickCell" selector="cellSystemSize:">cellSystemSize: refClass	| nbCells |	nbCells := refClass keys size.	^nbCells</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out</category><body package="PickCell" selector="fileOutClassReferenced:onStream:forNet:">fileOutClassReferenced: xyzRef onStream: aStream forNet: net	| uipcn portee code nbc thisClass ref index cellImage elevation geoPosition latitude longitude nodes sort value uwind vwind windArray windDict doWind |	thisClass := xyzRef.	uipcn := self uiPickCellNodes.	uipcn isNil ifFalse: [portee := uipcn portee value asNumber].	uipcn := self uiPickCellNodes.	windArray := uipcn pickModel value windArray.	doWind := windArray isNil not.	doWind		ifTrue: 			[windDict := Dictionary new.			windArray do: 					[:elt |					| pos |					pos := elt at: 1.					windDict at: pos put: elt]].	nodes := net nodeDictionary.	sort := SortedCollection sortBlock: 					[:asso1 :asso2 |					asso1 value point  x = asso2 value point x  ifTrue: [asso1 value point  y &lt; asso2 value point  y]						ifFalse: [asso1 value point  x &lt; asso2 value point  x]].	sort addAll: nodes associations. 	ref := xyzRef values first last.	ref isNil		ifTrue: [code := '']		ifFalse: 			[nbc := self leNbDeClasses value.			code := (self codeFrom: ref radix: nbc) printString]. 	index := self cellSystemSize: thisClass forNet: net. 	aStream		nextPut: $[;		space.	" start the array "	sort keysAndValuesDo: 			[:numberKey :anAssoc |			| wind aNetworkNodeAttributes name position cellFromClass|			aNetworkNodeAttributes :=anAssoc value.			name := anAssoc key.			position := aNetworkNodeAttributes point.			cellFromClass := thisClass at: position.			cellImage := cellFromClass at: 2.			elevation := cellImage elevation.			geoPosition := cellImage geoPosition.			latitude := geoPosition y.			longitude := geoPosition x.			doWind				ifTrue: 					[wind := windDict at: position.					uwind := wind at: 3.					vwind := wind at: 4]				ifFalse: 					[uwind := 0.					vwind := 0].			aStream				nextPut: $[;				space.			self				fileOutCellIndex: numberKey				position: position				elevation: elevation				lat: latitude				lon: longitude				uwind: uwind				vwind: vwind				onStream: aStream.			aStream				space;				nextPut: $,;				space.			cellImage printOn: aStream.			aStream space.			"nextPut: $];nextPut: $x;"			index := index - 1.			index = 0				ifTrue: 					[aStream						nextPutAll: ']:';						cr]				ifFalse: 					[aStream						nextPut: $,;						cr;						nextPutAll: '  ']].	aStream cr</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out Occam</category><body package="PickCell" selector="fileOutOccamHeaderGeoData:onStream:">fileOutOccamHeaderGeoData: refClass onStream: fileStream	| nbCells aCell extent |	nbCells := self cellSystemSize: refClass.   	aCell := refClass values first at: 2.	extent := aCell cellImage extent.	fileStream		nextPutAll: 'DATA TYPE ImageExtent  RECORD    INT width:    INT height: :DATA TYPE CellPosition  RECORD    INT identity: -- self reference    INT x,y: -- cell position    REAL64  longitude,latitude,elevation: -- geo loc:'.	self declareOccamSystemOrganizationOn: fileStream.	fileStream		nextPutAll: 'DATA TYPE Wind  RECORD    REAL32 ugrd: --composante u du vent    REAL32 vgrd: --composante v du vent:DATA TYPE RGBPixel  RECORD    BYTE red, green, blue: :DATA TYPE Depth24ByteArray  IS [ '				, (extent x * extent y) printString.	fileStream		nextPutAll: '] RGBPixel:';		cr.	fileStream		nextPutAll: 'DATA TYPE CellImage  RECORD    ImageExtent  extent:    Depth24ByteArray pixelArray: :';		cr.	fileStream		nextPutAll: 'DATA TYPE CellArray  RECORD    CellPosition position:    Wind windArray:    CellImage image::';		cr.	self fileOutDataOccamOrganizationOnStream: fileStream.	fileStream		nextPutAll: 'VAL [   ' , nbCells printString , '] CellArray  Cells IS '</body></methods><methods><class-id>UICellShow</class-id> <category>utilities</category><body package="PickCell" selector="cellSystemSize:forNet:">cellSystemSize: refClass forNet: aNet	| nbCells |	nbCells := aNet nodeDictionary keys size.	^nbCells</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out Occam</category><body package="PickCell" selector="fileOutOccamHeaderGeoData:onStream:forNet:">fileOutOccamHeaderGeoData: refClass onStream: fileStream forNet: aNet	| nbCells aCell extent |	nbCells := self cellSystemSize: refClass forNet: aNet.   	aCell := refClass values first at: 2.	extent := aCell cellImage extent.	fileStream		nextPutAll: 'DATA TYPE ImageExtent  RECORD    INT width:    INT height: :DATA TYPE CellPosition  RECORD    INT identity: -- self reference    INT x,y: -- cell position    REAL64  longitude,latitude,elevation: -- geo loc:'.	self declareOccamSystemOrganizationOn: fileStream.	fileStream		nextPutAll: 'DATA TYPE Wind  RECORD    REAL32 ugrd: --composante u du vent    REAL32 vgrd: --composante v du vent:DATA TYPE RGBPixel  RECORD    BYTE red, green, blue: :DATA TYPE Depth24ByteArray  IS [ '				, (extent x * extent y) printString.	fileStream		nextPutAll: '] RGBPixel:';		cr.	fileStream		nextPutAll: 'DATA TYPE CellImage  RECORD    ImageExtent  extent:    Depth24ByteArray pixelArray: :';		cr.	fileStream		nextPutAll: 'DATA TYPE CellArray  RECORD    CellPosition position:    Wind windArray:    CellImage image::';		cr.	self fileOutDataOccamOrganizationOnStream: fileStream.	fileStream		nextPutAll: 'VAL [   ' , nbCells printString , '] CellArray  Cells IS '</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out</category><body package="PickCell" selector="setOrganization">setOrganization	| uipcn gm mapOrigin gridAspect lonLatPoint organization maVue monImage |	organization := SystemOrganization new.	uipcn := self uiPickCellNodes.	uipcn isNil		ifFalse: 			[gm := uipcn pickModel value mercator.			gridAspect := uipcn pickModel value grid.			organization cellSize: gridAspect value.			mapOrigin := uipcn pickModel value mapOrigin.			organization mapOrigin: mapOrigin first.			organization zoom: mapOrigin last.			maVue := uipcn laVue.			monImage := maVue image.			organization width: monImage width.			organization height: monImage height.			" remplacer par un calcule effectif "			organization imageDimX: (monImage width / gridAspect value x) rounded.			organization imageDimY: (monImage height / gridAspect value y) rounded.			mapOrigin isNil				ifFalse: 					[lonLatPoint := self obtainLocFromMouse: mapOrigin mercator: gm.					organization longitude: lonLatPoint x.					organization latitude: lonLatPoint y]].	self systemOrganization: organization.	^organization</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out</category><body package="PickCell" selector="fileOutClassReferenced:onStream:">fileOutClassReferenced: xyzRef onStream: aStream	| uipcn portee code nbc thisClass ref index cellImage elevation geoPosition latitude longitude array position |	thisClass := xyzRef.	uipcn := self uiPickCellNodes.	uipcn isNil ifFalse: [portee := uipcn portee value asNumber].	uipcn := self uiPickCellNodes.	array := uipcn pickModel value newCellArray.	ref := xyzRef values first last.	ref isNil		ifTrue: [code := '']		ifFalse: 			[nbc := self leNbDeClasses value.			code := (self codeFrom: ref radix: nbc) printString].	index := thisClass keys size.	aStream		nextPut: $[;		space.	" start the array "	array		keysAndValuesDo: [:i :triplet | position := (triplet at: 3) position]				thisClass		keysAndValuesDo: 			[:key :value |			cellImage := value at: 2.			elevation := cellImage elevation.			geoPosition := cellImage geoPosition.			latitude := geoPosition y.			longitude := geoPosition x.			aStream				nextPut: $[;				space.			self				fileOutCellPosition: key				elevation: elevation				lat: latitude				lon: longitude				onStream: aStream.			aStream				space;				nextPut: $,;				space.			cellImage printOn: aStream.			aStream space.			"nextPut: $];nextPut: $x;"			index := index - 1.			index = 0				ifTrue: 					[aStream						nextPutAll: ']:';						cr]				ifFalse: 					[aStream						nextPut: $,;						cr;						nextPutAll: '  ']].	aStream cr</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out Occam</category><body package="PickCell" selector="declareOccamSystemOrganizationOn:">declareOccamSystemOrganizationOn: fileStream	fileStream		cr;		nextPutAll: 'DATA TYPE SystemOrganization  RECORD    INT width, height: -- int pixels    INT cellWidth, cellHeight: -- int pixels    INT ImageDimX, ImageDimY: -- int size in cells    REAL64 longitude, latitude:-- geo localization    INT zoom: -- small integer:'</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out Occam</category><body package="PickCell" selector="fileOutDataOccamOrganizationOnStream:">fileOutDataOccamOrganizationOnStream: aStream	| orga |	orga := self systemOrganization.	aStream nextPutAll: 'VAL SystemOrganization systemOrganization IS ['.	orga width printOn: aStream.	aStream nextPutAll: ' , '.	orga height printOn: aStream.	aStream nextPutAll: ' , '.	orga cellSize x printOn: aStream.	aStream nextPutAll: ' , '.	orga cellSize y printOn: aStream.	aStream nextPutAll: ' , '.	orga imageDimX  printOn: aStream.	aStream nextPutAll: ' , '.	orga imageDimY printOn: aStream.	aStream nextPutAll: ' , '.	self printDouble: orga longitude onOccamStream: aStream.	aStream nextPutAll: ' , '.	self printDouble: orga latitude onOccamStream: aStream.	aStream nextPutAll: ' , '.	orga zoom printOn: aStream.	aStream nextPutAll: ' ]: '.	aStream		cr;		cr</body></methods><methods><class-id>UICellShow</class-id> <category>fileIn/Out CUDA</category><body package="PickCell" selector="fileOutSelectedClassDataForCuda">fileOutSelectedClassDataForCuda	| fileStream refClass fileName ref code nbc fileString directory |	self lesClasses selectionIndex = 0		ifFalse: 			[refClass := self selectClassAt: self lesClasses selection.			ref := refClass values first last.			ref isNil				ifTrue: [code := '']				ifFalse: 					[nbc := self leNbDeClasses value.					code := (self codeFrom: ref radix: nbc) printString].			fileString := self guessedName , code , 'Data.cu'.			directory := self guessedDirectory.			fileString := directory , '/' , fileString.			fileName := fileString asFilename. 			fileStream := fileName writeStream.			self fileOutCudaHeaderData: refClass onStream: fileStream.			self fileOutCudaClassReferenced: refClass onStream: fileStream.			fileStream close.			^fileString].	^nil</body></methods><methods><class-id>GPSTrackingStream</class-id> <category>accessing</category><body package="PickCell" selector="aGPSTrackingInterface:">aGPSTrackingInterface: anObject	aGPSTrackingInterface := anObject</body></methods><methods><class-id>GPSTrackingStream</class-id> <category>accessing</category><body package="PickCell" selector="aGPSTrackingInterface">aGPSTrackingInterface	^aGPSTrackingInterface</body></methods><methods><class-id>GPSTrackingStream</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	aGPSTrackingInterface new.	^self</body></methods><methods><class-id>UILocation</class-id> <category>actions</category><body package="PickCell" selector="saveFile">saveFile	| name fname ws |	name := Dialog requestNewFileName: 'Image file name'				default: self imageName value.	name isEmpty		ifFalse: 			[fname := name asFilename.			ws := fname writeStream.			self image isNil				ifFalse: 					[self image storeOn: ws.					ws close]]</body></methods><methods><class-id>UILocation</class-id> <category>accessing</category><body package="PickCell" selector="image:">image: anObject	image := anObject</body></methods><methods><class-id>UILocation</class-id> <category>actions</category><body package="PickCell" selector="setDelay">setDelay	| sec |	sec := Dialog request: 'screenshot in seconds' initialAnswer: '10'.	sec isEmpty		ifFalse: 			[sec := sec asNumber.			0 to: 10				do: 					[:i |					(Delay forSeconds: sec / 10) wait.					self delayPerCent value: i / 10].			image := Image fromUser].	image inspect</body></methods><methods><class-id>UILocation</class-id> <category>actions</category><body package="PickCell" selector="getOrigin">getOrigin	^self origine value</body></methods><methods><class-id>UILocation</class-id> <category>aspects</category><body package="PickCell" selector="leXGeo">leXGeo	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leXGeo isNil		ifTrue:			[leXGeo := String new asValue]		ifFalse:			[leXGeo]</body></methods><methods><class-id>UILocation</class-id> <category>aspects</category><body package="PickCell" selector="leYGeo">leYGeo	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leYGeo isNil		ifTrue:			[leYGeo := String new asValue]		ifFalse:			[leYGeo]</body></methods><methods><class-id>UILocation</class-id> <category>aspects</category><body package="PickCell" selector="leY">leY	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leY isNil		ifTrue:			[leY := String new asValue]		ifFalse:			[leY]</body></methods><methods><class-id>UILocation</class-id> <category>aspects</category><body package="PickCell" selector="corner">corner	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^corner isNil		ifTrue:			[corner := String new asValue]		ifFalse:			[corner]</body></methods><methods><class-id>UILocation</class-id> <category>accessing</category><body package="PickCell" selector="mercator">mercator	^mercator</body></methods><methods><class-id>UILocation</class-id> <category>accessing</category><body package="PickCell" selector="corner:">corner: anObject	^corner := anObject</body></methods><methods><class-id>UILocation</class-id> <category>aspects</category><body package="PickCell" selector="origine">origine	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^origine isNil		ifTrue:			[origine := String new asValue]		ifFalse:			[origine]</body></methods><methods><class-id>UILocation</class-id> <category>aspects</category><body package="PickCell" selector="coordinateMode">coordinateMode	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^coordinateMode isNil		ifTrue:			[coordinateMode := #GPS asValue]		ifFalse:			[coordinateMode]</body></methods><methods><class-id>UILocation</class-id> <category>aspects</category><body package="PickCell" selector="imageName">imageName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^imageName isNil		ifTrue:			[imageName := 'image.png' asValue]		ifFalse:			[imageName]</body></methods><methods><class-id>UILocation</class-id> <category>accessing</category><body package="PickCell" selector="mercator:">mercator: anObject	mercator := anObject</body></methods><methods><class-id>UILocation</class-id> <category>aspects</category><body package="PickCell" selector="leX">leX	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leX isNil		ifTrue:			[leX := String new asValue]		ifFalse:			[leX]</body></methods><methods><class-id>UILocation</class-id> <category>actions</category><body package="PickCell" selector="sendToPickCell">sendToPickCell	| uiPickCell pm |	self image isNil		ifFalse: 			[uiPickCell := UIPickCellNodes new.			pm := uiPickCell pickModel value.			pm filename: nil.			pm points: OrderedCollection new.			pm bounds: self image bounds.			pm mapOrigin: self getOrigin.	 			uiPickCell pickModel value: pm.			uiPickCell laVue image: self image.			uiPickCell open]</body></methods><methods><class-id>UILocation</class-id> <category>actions</category><body package="PickCell" selector="defineCorner">defineCorner</body></methods><methods><class-id>UILocation</class-id> <category>aspects</category><body package="PickCell" selector="elevation">elevation	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^elevation isNil		ifTrue:			[elevation := String new asValue]		ifFalse:			[elevation]</body></methods><methods><class-id>UILocation</class-id> <category>actions</category><body package="PickCell" selector="defineOrigin">defineOrigin</body></methods><methods><class-id>UILocation</class-id> <category>accessing</category><body package="PickCell" selector="image">image	^image</body></methods><methods><class-id>UILocation</class-id> <category>changing</category><body package="PickCell" selector="updateOrigin:corner:">updateOrigin: lonLatOrigin corner: lonLatCorner	| ws string adJustBlock |	ws := (String new: 100) writeStream.	adJustBlock :=			[:doub |			string := doub printString.			string := string copyFrom: 1 to: string size - 1.			ws nextPutAll: string].	adJustBlock value: lonLatOrigin y.	ws nextPut: $,.	adJustBlock value: lonLatOrigin x.	self origine value: ws contents.	ws := (String new: 100) writeStream.	adJustBlock value: lonLatCorner y.	ws nextPut: $,.	adJustBlock value: lonLatCorner x.	self corner value: ws contents</body></methods><methods><class-id>UILocation</class-id> <category>accessing</category><body package="PickCell" selector="origine:">origine: anObject	^origine := anObject</body></methods><methods><class-id>UILocation</class-id> <category>aspects</category><body package="PickCell" selector="delayPerCent">delayPerCent	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^delayPerCent isNil		ifTrue:			[delayPerCent := 0 asValue]		ifFalse:			[delayPerCent]</body></methods><methods><class-id>UILocation</class-id> <category>aspects</category><body package="PickCell" selector="parameters">parameters	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^parameters isNil		ifTrue:			[parameters := String new asValue]		ifFalse:			[parameters]</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="lon:">lon: anObject	lon := anObject</body></methods><methods><class-id>TrackPoint</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	id := nil.	lon := nil.	lat := nil.	rssi:= nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="rssi">rssi	^rssi</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="lon">lon	^lon</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="time">time	^time</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="lat">lat	^lat</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="id">id	^id</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="time:">time: anObject	time := anObject</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="alt">alt	^alt</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="rssi:">rssi: anObject	rssi := anObject</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="lat:">lat: anObject	lat := anObject</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="id:">id: anObject	id := anObject</body></methods><methods><class-id>TrackPoint</class-id> <category>accessing</category><body package="PickCell" selector="alt:">alt: anObject	alt := anObject</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>fileIn/Out</category><body package="PickCell" selector="writeFile:">writeFile: thisNode	| ws selection |	fileName := fileName , '-' , thisNode printString.	fileName := fileName , '.jgr'.	texte isEmpty		ifFalse: 			[ws := fileName asFilename writeStream.			ws				nextPutAll: texte;				close].	selection := 'jgraph  ' , fileName , ' &gt; ' , fileName , '.eps'.	TextEditorController copySelection: selection.	Dialog warn: '(paste) ' , selection.	^texte</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>processing</category><body package="PickCell" selector="lifeStatesDico">lifeStatesDico	| symbols dico |	symbols := self lifeStates.	dico := Dictionary new.	symbols keysAndValuesDo: [:key :sym |  dico at: sym put: key.].	^ dico</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>processing</category><body package="PickCell" selector="printJGraph:">printJGraph: thisNode	| ws array lifeDico minX maxX x marktypes linetypes |	ws := String new writeStream.	ws		nextPutAll: '            newgraph';		cr.	marktypes := #(#circle #box #diamond #triangle #x #cross #ellipse #xbar #ybar)				readStream.				 	linetypes := ReadStream				on: #(#solid #dotted #dashed #longdash #dotdash #dash #dotdotdash #dotdotdashdash).	array := self tableForJGraph: thisNode.	lifeDico := self lifeStates.	minX := 1999999.	maxX := minX negated.	array keysAndValuesDo: 			[:index :values |			ws nextPutAll: '    newcurve pts '.			values do: 					[:val |					x := val first.					minX := minX min: x.					maxX := maxX max: x.					val first printOn: ws.					ws space.					val last printOn: ws.					ws space].			ws cr.			ws nextPutAll: ' marktype none  linetype  ' , linetypes next asString; space.			ws nextPutAll: 'label : '.			ws				nextPutAll: (lifeDico at: index) asString;				cr;				cr].	ws nextPutAll: ' xaxis  min '.	minX printOn: ws.	ws nextPutAll: ' max '.	maxX printOn: ws.	ws		nextPutAll: ' label : turns ';		cr.	ws		nextPutAll: ' yaxis   label : individuals ';		cr.	texte := ws contents.	self writeFile: thisNode</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>accessing</category><body package="PickCell" selector="dicoState:">dicoState: anObject	dicoState := anObject</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>processing</category><body package="PickCell" selector="byNode">byNode	| byNode values nodes allValues collection |	byNode := Dictionary new.	nodes := self dicoState collect: [:items | items first].	nodes := nodes asSet asSortedCollection.	nodes do: 			[:aNode |			allValues := self dicoState select: [:items | items first = aNode].			collection := allValues collect: 							[:items |							values := items copyFrom: 2 to: items size.							values].			byNode at: aNode put: collection].	^byNode</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>processing</category><body package="PickCell" selector="printJGraph:limit:">printJGraph: thisNode limit:limit	| ws array lifeDico minX maxX x marktypes linetypes nb |	ws := String new writeStream.	ws		nextPutAll: '            newgraph';		cr.	marktypes := #(#circle #box #diamond #triangle #x #cross #ellipse #xbar #ybar)				readStream.				 	linetypes := ReadStream				on: #(#solid #dotted #dashed #longdash #dotdash #dash #dotdotdash #dotdotdashdash).	array := self tableForJGraph: thisNode.	lifeDico := self lifeStates.	minX := 1999999.	maxX := minX negated. 	array keysAndValuesDo: 			[:index :values |			ws nextPutAll: '    newcurve pts '.			nb := 0.			values do: 					[:val |						nb :=nb +1.						nb &lt;= limit ifTrue:  [ 					x := val first.					minX := minX min: x.					maxX := maxX max: x.					val first printOn: ws.					ws space.					val last printOn: ws.					ws space ]].			ws cr.			ws nextPutAll: ' marktype none  linetype  ' , linetypes next asString; space.			ws nextPutAll: 'label : '.			ws				nextPutAll: (lifeDico at: index) asString;				cr;				cr].	ws nextPutAll: ' xaxis  min '.	minX printOn: ws.	ws nextPutAll: ' max '.	maxX printOn: ws.	ws		nextPutAll: ' label : turns ';		cr.	ws		nextPutAll: ' yaxis   label : individuals ';		cr.	texte := ws contents.	self writeFile: thisNode limit: limit</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>processing</category><body package="PickCell" selector="byNodeAndTurns:">byNodeAndTurns: thisNode	| byNode values nodes allValues collection trace sortedTrace sc order t1 |	byNode := Dictionary new.	nodes := self dicoState collect: [:items | items first].	nodes := nodes asSet asSortedCollection.	order := self lifeStatesDico.	nodes do: 			[:aNode |			allValues := self dicoState select: [:items | items first = aNode].			collection := allValues collect: 							[:items |							values := items copyFrom: 2 to: items size.							values].  			byNode at: aNode put: collection].	trace := byNode at: thisNode.	sortedTrace := SortedCollection sortBlock: 					[:items1 :items2 |					t1 := (items1 at: 2) = (items2 at: 2).					t1						ifTrue: [(order at: items1 first) &lt; (order at: items2 first)]						ifFalse: [(items1 at: 2) &lt; (items2 at: 2)]].	sortedTrace addAll: trace.	^sortedTrace asArray</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>accessing</category><body package="PickCell" selector="fileName">fileName	^fileName</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>fileIn/Out</category><body package="PickCell" selector="readFile">readFile	|  rs line items records |	fileName := Dialog requestFileName: 'choose trace file :'.	texte := String new.	fileName isEmpty		ifFalse: 			[rs := fileName asFilename readStream.			records := OrderedCollection new.			[rs atEnd] whileFalse: 					[line := rs upTo: Character cr.					(line includes: Core.Character esc)						ifFalse: 							[items := self parseLine: line.							records add: items]]].	^records</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>processing</category><body package="PickCell" selector="byNode:">byNode: thisNode	| byNode values nodes allValues collection |	byNode := Dictionary new.	nodes := self dicoState collect: [:items | items first].	nodes := nodes asSet asSortedCollection.	nodes do: 			[:aNode |			allValues := self dicoState select: [:items | items first = aNode].			collection := allValues collect: 							[:items |							values := items copyFrom: 2 to: items size.							values].			byNode at: aNode put: collection].	^byNode at: thisNode</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>processing</category><body package="PickCell" selector="tableForJGraph:">tableForJGraph: thisNode	| array indexDico collection state turn values somme index |	array := self byNodeAndTurns: thisNode.	indexDico := self lifeStatesDico.	collection := Array  new: self lifeStatesDico size.	collection := collection collect: [:y | OrderedCollection new].	array do: 			[:entry |			state := entry first.			turn := entry at: 2.			values := entry last.			somme := values inject: 0 into: [:x :sum | sum + x].			index := indexDico at: state.			(collection at: index) add: (Array with: turn with: somme)].	^collection</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>accessing</category><body package="PickCell" selector="texte:">texte: anObject	texte := anObject</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>processing</category><body package="PickCell" selector="lifeStates">lifeStates	| symbols |	symbols := #(#Eggs #Larvaes #Winged #Solitarious #Gregarious).	^symbols</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>accessing</category><body package="PickCell" selector="dicoState">dicoState	^dicoState</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>accessing</category><body package="PickCell" selector="fileName:">fileName: anObject	fileName := anObject</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***" 	dicoState := self readFile.	^self</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>fileIn/Out</category><body package="PickCell" selector="writeFile:limit:">writeFile: thisNode limit:limit	| ws selection |	fileName := fileName , '-' , thisNode printString, '-' , limit printString.	fileName := fileName , '.jgr'.	texte isEmpty		ifFalse: 			[ws := fileName asFilename writeStream.			ws				nextPutAll: texte;				close].	selection := 'jgraph  ' , fileName , ' &gt; ' , fileName , '.eps'.	TextEditorController copySelection: selection.	Dialog warn: '(paste) ' , selection.	^texte</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>accessing</category><body package="PickCell" selector="texte">texte	^texte</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>fileIn/Out</category><body package="PickCell" selector="parseLine:">parseLine: line	| rs char ws node phase tour values foundEnd |	rs := line readStream.	char := rs next.	ws := String new writeStream.	[char isAlphabetic] whileFalse: 			[ws nextPut: char.			char := rs next].	node := ws contents asNumber.	ws := String new writeStream.	[char isAlphabetic] whileTrue: 			[ws nextPut: char.			char := rs next].	phase := ws contents asSymbol.	ws := String new writeStream.	char := rs next.	[char isDigit or: [char = $-]] whileTrue: 			[ws nextPut: char.			char := rs next]. 	tour := ws contents asNumber.	ws := String new writeStream.	[char isDigit] whileFalse: 			[ws nextPut: char.			char := rs next]. 	values := OrderedCollection new.	foundEnd := false.	[foundEnd or: [rs atEnd]] whileFalse: 			[ws := String new writeStream. 							[char isDigit or: [rs atEnd]] whileFalse: 					[ 					char := rs next].			[char isDigit and: [rs atEnd not]] whileTrue: 					[ws nextPut: char.					char := rs next].			values add: ws contents asNumber. 			foundEnd := char = $;].	^Array		with: node		with: phase		with: tour		with: values</body></methods><methods><class-id>AlgoDis.TraceParserForCrickets</class-id> <category>fileIn/Out</category><body package="PickCell" selector="writeFile">writeFile	| ws selection |	fileName := fileName , '.jgr'.	texte isEmpty		ifFalse: 			[ws := fileName asFilename writeStream.			ws				nextPutAll: texte;				close].	selection := 'jgraph -P ' , fileName , ' &gt; ' , fileName , '.ps'.	TextEditorController copySelection: selection.	Dialog warn: '(paste) ' , selection.	^texte</body></methods><methods><class-id>AlgoDis.BGPickCellData</class-id> <category>accessing</category><body package="PickCell" selector="nbElements:">nbElements: anObject	nbElements := anObject</body></methods><methods><class-id>AlgoDis.BGPickCellData</class-id> <category>accessing</category><body package="PickCell" selector="code">code	^code</body></methods><methods><class-id>AlgoDis.BGPickCellData</class-id> <category>accessing</category><body package="PickCell" selector="nbElements">nbElements	^nbElements</body></methods><methods><class-id>AlgoDis.BGPickCellData</class-id> <category>accessing</category><body package="PickCell" selector="code:">code: anObject	code := anObject</body></methods><methods><class-id>AlgoDis.BGPickCellData</class-id> <category>accessing</category><body package="PickCell" selector="xyzRef">xyzRef	^xyzRef</body></methods><methods><class-id>AlgoDis.BGPickCellData</class-id> <category>accessing</category><body package="PickCell" selector="xyzRef:">xyzRef: anObject	xyzRef := anObject</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>event driven</category><body package="PickCell" selector="addPoint:usingGC:">addPoint: point usingGC: aGC	| points gc pm |	points := self points.	points isNil ifFalse: [points add: point].	gc := self view graphicsContext.	pm := self model value.	self halt.	pm bounds isNil		ifFalse: 			[pm buildGraph: gc.			self view invalidate]</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>events</category><body package="PickCell" selector="closeEvent:">closeEvent: anExitEvent	"Change the cursor shape back to normal.	Also end current stroke in case red button is still being pressed."		Cursor normal show</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>events</category><body package="PickCell" selector="enterEvent:">enterEvent: anEnterEvent	"Request keyboard focus."</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>events</category><body package="PickCell" selector="mouseMovedEvent:">mouseMovedEvent: aMouseMovedEvent	"Set the cursor when moving in the SketchView.	Add a new point for every mouse movement when drawing is in progress."	| pickCellModel |	Cursor crossHair show.	position := self sensor cursorPointFor: aMouseMovedEvent.	pickCellModel := self model value.	pickCellModel mousePoint value: position.</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."		super initialize. 	^self</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>event driven</category><body package="PickCell" selector="desiresFocus">desiresFocus	^true</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>initialize-release</category><body package="PickCell" selector="release">release	"Upon release, change the cursor shape back to normal."		super release.	Cursor normal show</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>events</category><body package="PickCell" selector="keyPressedEvent:">keyPressedEvent: event		| mikado |	event keyValue = $x		ifTrue:			[mikado := self model value. 			self model value: mikado].	event keyValue = #Up ifTrue: [Dialog warn: 'Up']</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>initialize-release</category><body package="PickCell" selector="keyboardProcessor">keyboardProcessor	^keyboardProcessor</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>accessing</category><body package="PickCell" selector="points">points	^self model value points</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>events</category><body package="PickCell" selector="closeNoTerminate">closeNoTerminate	self view close</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>event driven</category><body package="PickCell" selector="redButtonPressedEvent:">redButtonPressedEvent: aRedButtonPressedEvent	"Start drawing a new line when the &lt;Select&gt; button is pressed.	Keep showing the crosshair when pressed."	| point |	Cursor crossHair show.	point := self sensor cursorPointFor: aRedButtonPressedEvent.	self sensor shiftDown		ifTrue: [self model value cellDisplay selectColorFor: point]		ifFalse: [self addPoint: point]</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>event driven</category><body package="PickCell" selector="handlerForMouseEvent:">handlerForMouseEvent: event	^((self viewHasCursorWithEvent: event)		and: [self model notNil])			ifTrue: [self]			ifFalse: [nil]</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>events</category><body package="PickCell" selector="exitEvent:">exitEvent: anExitEvent	"Change the cursor shape back to normal.	Also end current stroke in case red button is still being pressed."		Cursor normal show</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>initialize-release</category><body package="PickCell" selector="keyboardProcessor:">keyboardProcessor: kp	keyboardProcessor := kp</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>accessing</category><body package="PickCell" selector="getReveivedPoints:">getReveivedPoints: aTrackPoint	| pm myGC bounds point lat lon mercator geoPoint aOrigin aMapOrigin zoom aMapLocation myPoint |	myGC := self view graphicsContext.	bounds := myGC medium bounds.	pm := self model value.	mercator := pm mercator.	pm points.	aOrigin := bounds origin.	aMapLocation := self model value mapOrigin.	aMapOrigin := aMapLocation at: 1.	zoom := aMapLocation at: 2.	aTrackPoint isNil		ifFalse: 			[myPoint := aTrackPoint.			lat := myPoint lat.			lon := myPoint lon.			geoPoint := lat @ lon.			point := self						makePixelAt: geoPoint						fromOrigin: aMapOrigin						origin: aOrigin						zoom: zoom						mercator: mercator].	^point</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>accessing</category><body package="PickCell" selector="addGPSPoints:">addGPSPoints: theTrackPoints	| pm myGC bounds cache cacheGC img1 point lat lon mercator geoPoint aOrigin aMapOrigin zoom pickcellPoints aMapLocation myPoint |	myGC := self view graphicsContext.	bounds := myGC medium bounds.	pm := self model value.	mercator := pm mercator.	pickcellPoints := pm points.	aOrigin := bounds origin.	aMapLocation := self model value mapOrigin.	aMapOrigin := aMapLocation at: 1.	zoom := aMapLocation at: 2.	pickcellPoints := pm points.	theTrackPoints do: 			[:eachPoint |			myPoint := eachPoint.			lat := myPoint lat.			lon := myPoint lon.			geoPoint := lat @ lon.			point := self						makePixelAt: geoPoint						fromOrigin: aMapOrigin						origin: aOrigin						zoom: zoom						mercator: mercator.			pickcellPoints add: point].	cache := Pixmap extent: bounds extent.	cacheGC := cache graphicsContext.	pm bounds isNil		ifFalse: 			[pm buildGraph: cacheGC.			img1 := cacheGC medium asImage.			img1 displayOn: myGC.			self view invalidate]</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>event driven</category><body package="PickCell" selector="getDBPoints">getDBPoints	| points pm myGC bounds  point lat lon mercator geoPoint aOrigin aMapArray aMapOrigin zoom results array | 	results := OrderedCollection new.	points := self points.	"points isNil ifFalse: [points add: point]."	myGC := self view graphicsContext.	bounds := myGC medium bounds.	pm := self model value.	mercator := pm mercator.		aOrigin := bounds origin.	aMapArray := self model value mapOrigin.	aMapOrigin := aMapArray at: 1.	zoom := aMapArray at: 2.		points  do: [ :eachPoint | 		"adapt using mercator"		array := Array new: 8.		array at: 2 put: eachPoint x.		array at: 3 put: eachPoint y.		"lon := eachPoint at: 3. "		" Convert to pixel using mercator		 add to points collection"				point := self makePixelAt: geoPoint fromOrigin: aMapOrigin origin: aOrigin zoom: zoom mercator: mercator.		points add: point.		].	"	self halt."</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>event driven</category><body package="PickCell" selector="addDBPoints:">addDBPoints: results  	| points pm myGC bounds cache cacheGC img1 point lat lon mercator geoPoint aOrigin aMapArray aMapOrigin zoom | 	points := self points.	"points isNil ifFalse: [points add: point]."	myGC := self view graphicsContext.	bounds := myGC medium bounds.	pm := self model value.	mercator := pm mercator.		aOrigin := bounds origin.	aMapArray := self model value mapOrigin.	aMapOrigin := aMapArray at: 1.	zoom := aMapArray at: 2.		results do: [ :eachPoint | 		lat := eachPoint at: 2.		lon := eachPoint at: 3.		geoPoint := lon@lat.		" Convert to pixel using mercator		 add to points collection"				point := self makePixelAt: geoPoint fromOrigin: aMapOrigin origin: aOrigin zoom: zoom mercator: mercator.		points add: point.		].	"	self halt."	cache := Pixmap extent: bounds extent.	cacheGC := cache graphicsContext.	pm bounds isNil		ifFalse: 			[pm buildGraph: cacheGC.			img1 := cacheGC medium asImage.			img1 displayOn: myGC.			self view invalidate]</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>events</category><body package="PickCell" selector="makePixelAt:fromOrigin:origin:zoom:mercator:">makePixelAt: aPosition fromOrigin: aMapOrigin origin: aOrigin zoom: zoomView mercator: aMercator	| meter currentPoint relative pos|  	meter := aMercator latLonToMeter: aPosition x lon: aPosition y.	currentPoint := aMercator meterToPixelNew: meter zoom: zoomView.	relative := currentPoint - aMapOrigin.	pos := relative + aOrigin.	^pos</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>accessing</category><body package="PickCell" selector="addAGPSPointInactive:">addAGPSPointInactive: aTrackPoint	| pm myGC bounds cache cacheGC img1 point lat lon mercator geoPoint aOrigin aMapOrigin zoom pickcellPoints aMapLocation myPoint |	myGC := self view graphicsContext.	bounds := myGC medium bounds.	pm := self model value.	mercator := pm mercator.	pickcellPoints := pm points.	aOrigin := bounds origin.	aMapLocation := self model value mapOrigin.	aMapOrigin := aMapLocation at: 1.	zoom := aMapLocation at: 2.	pickcellPoints := pm points.	"theTrackPoints do: 			[:eachPoint |"	"myPoint := eachPoint."	aTrackPoint isNil		ifFalse: 			[myPoint := aTrackPoint.			lat := myPoint lat.			lon := myPoint lon.			geoPoint := lat @ lon.			point := self						makePixelAt: geoPoint						fromOrigin: aMapOrigin						origin: aOrigin						zoom: zoom						mercator: mercator.			pickcellPoints add: point.			cache := Pixmap extent: bounds extent.			cacheGC := cache graphicsContext.			pm bounds isNil				ifFalse: 					[pm buildGraphInactive: cacheGC.					img1 := cacheGC medium asImage.					img1 displayOn: myGC.					self view invalidate]]</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>accessing</category><body package="PickCell" selector="addAGPSPoint:">addAGPSPoint: aTrackPoint	| pm myGC bounds cache cacheGC img1 point lat lon mercator geoPoint aOrigin aMapOrigin zoom pickcellPoints aMapLocation myPoint |	myGC := self view graphicsContext.	bounds := myGC medium bounds.	pm := self model value.	mercator := pm mercator.	pickcellPoints := pm points.	aOrigin := bounds origin.	aMapLocation := self model value mapOrigin.	aMapOrigin := aMapLocation at: 1.	zoom := aMapLocation at: 2.	pickcellPoints := pm points.	"theTrackPoints do: 			[:eachPoint |"	"myPoint := eachPoint."	aTrackPoint isNil		ifFalse: 			[myPoint := aTrackPoint.			lat := myPoint lat.			lon := myPoint lon.			geoPoint := lat @ lon.			point := self						makePixelAt: geoPoint						fromOrigin: aMapOrigin						origin: aOrigin						zoom: zoom						mercator: mercator.			pickcellPoints add: point.			cache := Pixmap extent: bounds extent.			cacheGC := cache graphicsContext.			pm bounds isNil				ifFalse: 					[pm buildGraph: cacheGC.					img1 := cacheGC medium asImage.					img1 displayOn: myGC.					self view invalidate]]</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>accessing</category><body package="PickCell" selector="getPoint">getPoint	^position</body></methods><methods><class-id>AlgoDis.PickCellController</class-id> <category>event driven</category><body package="PickCell" selector="addPoint:">addPoint: point	| points pm myGC bounds cache cacheGC img1 graphOK |	points := self points.	points isNil ifFalse: [points add: point].	myGC := self view graphicsContext.	bounds := myGC medium bounds.	cache := Pixmap extent: bounds extent.	cacheGC := cache graphicsContext.	pm := self model value.	pm bounds isNil		ifFalse: 			[graphOK := pm buildGraph: cacheGC.			graphOK isNil				ifFalse: 					[img1 := cacheGC medium asImage.					img1 displayOn: myGC.					self view invalidate]]</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="mean">mean	^mean</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="mean2:">mean2: anObject	mean2 := anObject</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>comparing</category><body package="PickCell" selector="eq3:">eq3: obj	"is variance in the same range "	| ok1 ok2 ok3 seuilVar | 	seuilVar := self seuil / 4.	ok1 := (self mean2 red - obj mean2 red) abs &lt;= seuilVar.	ok2 := (self mean2 green - obj mean2 green) abs &lt;= seuilVar.	ok3 := (self mean2 blue - obj mean2 blue) abs &lt;= seuilVar.	ok1 := (ok1 and: [ok2]) and: [ok3].	^ok1</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="max">max	^max</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>comparing</category><body package="PickCell" selector="eq1:">eq1: obj	| ok1 ok2 ok3 |	ok1 := (self min red - obj min red) abs &lt;= (self seuil * 4).	ok1 := ok1 and: [(self min green - obj min green) abs &lt;= (self seuil * 4)].	ok1 := ok1 and: [(self min blue - obj min blue) abs &lt;= (self seuil * 4)].	ok2 := (self max red - obj max red) abs &lt;= (self seuil * 4).	ok2 := ok2 and: [(self max green - obj max green) abs &lt;= (self seuil * 4)].	ok2 := ok2 and: [(self max blue - obj max blue) abs &lt;= (self seuil * 4)].	ok3 := (self mean red - obj mean red) abs &lt;= (self seuil * 4).	ok3 := ok3				and: [(self mean green - obj mean green) abs &lt;= (self seuil * 4)].	ok3 := ok3 and: [(self mean blue - obj mean blue) abs &lt;= (self seuil * 4)].	^(ok1 and: [ok2]) and: [ok3]</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="min:">min: anObject	min := anObject</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>computing</category><body package="PickCell" selector="partitionsIntervFor:">partitionsIntervFor: nbPart	" nbPart diveide each coulour component giving a 3D space for classes "	| intervals redInterv greenInterv blueInterv |	intervals := Dictionary new.	redInterv := max red - min red.	greenInterv := max green - min green.	blueInterv := max blue - min blue.	intervals at: #red put: redInterv / nbPart.	intervals at: #green put: greenInterv / nbPart.	intervals at: #blue put: blueInterv / nbPart.	^intervals</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="seuil:">seuil: anObject	seuil := anObject</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="min">min	^min</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="max:">max: anObject	max := anObject</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="mean:">mean: anObject	mean := anObject</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="performer:">performer: anObject	performer := anObject</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	min := nil.	max := nil.	mean := nil.	mean2 := nil.	"r g b"	seuil := 0.0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>comparing</category><body package="PickCell" selector="eq2:">eq2: obj	"is variance in the same range "	| ok1 ok2 ok3 seuilVar |	seuilVar := self seuil / 2.	ok1 := (self mean2 red - obj mean2 red) abs &lt;= seuilVar.	ok2 := (self mean2 green - obj mean2 green) abs &lt;= seuilVar.	ok3 := (self mean2 blue - obj mean2 blue) abs &lt;= seuilVar.	ok1 := (ok1 and: [ok2]) and: [ok3].	ok3 := (self mean red - obj mean red) abs &lt;= self seuil.	ok3 := ok3 and: [(self mean green - obj mean green) abs &lt;= self seuil].	ok3 := ok3 and: [(self mean blue - obj mean blue) abs &lt;= self seuil].	^ok1 and: [ok3]</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>comparing</category><body package="PickCell" selector="=">= obj	"generic use with a test method "	^self perform: self performer with: obj</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="seuil">seuil	^seuil</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>comparing</category><body package="PickCell" selector="eq0:">eq0: obj	| ok1 ok2 ok3 |	ok1 := (self min red - obj min red) abs = 0.	ok1 := ok1 and: [(self min green - obj min green) abs = 0].	ok1 := ok1 and: [(self min blue - obj min blue) abs = 0].	ok2 := (self max red - obj max red) abs = 0.	ok2 := ok2 and: [(self max green - obj max green) abs = 0].	ok2 := ok2 and: [(self max blue - obj max blue) abs = 0].	ok3 := (self mean red - obj mean red) abs = 0.	ok3 := ok3 and: [(self mean green - obj mean green) abs = 0].	ok3 := ok3 and: [(self mean blue - obj mean blue) abs = 0].	^(ok1 and: [ok2]) and: [ok3]</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="performer">performer	performer isNil ifTrue: [^#eq0:].	^performer</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>accessing</category><body package="PickCell" selector="mean2">mean2	^mean2</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>computing</category><body package="PickCell" selector="indexFor:partition:">indexFor: aColour partition: nbPart" compute 3D coordinate for aColour "	| index componentOffset redIndex greenIndex blueIndex partitionDictionary |	partitionDictionary := self partitionsIntervFor: nbPart.	componentOffset := aColour red - min red.	index := Array new: 3.	(partitionDictionary at: #red) &gt; 0		ifTrue: 			[redIndex := (componentOffset / (partitionDictionary at: #red)) truncated						+ 1.			index at: 1 put: redIndex].	componentOffset := aColour green - min green.	(partitionDictionary at: #green) &gt; 0		ifTrue: 			[greenIndex := (componentOffset / (partitionDictionary at: #green))						truncated + 1.			index at: 2 put: greenIndex].	componentOffset := aColour blue - min blue.	(partitionDictionary at: #blue) &gt; 0		ifTrue: 			[blueIndex := (componentOffset / (partitionDictionary at: #blue)) truncated						+ 1.			index at: 3 put: blueIndex].	^index</body></methods><methods><class-id>AlgoDis.CellSignature</class-id> <category>computing</category><body package="PickCell" selector="rgbCoordinateFor:partitions:">rgbCoordinateFor: aColour partitions: nbPart	" compute 3D coordinate for aColour "	| index componentOffset redIndex greenIndex blueIndex partitionDictionary |	partitionDictionary := self partitionsIntervFor: nbPart.	componentOffset := aColour red - min red.	index := Array new: 3.	(partitionDictionary at: #red) &gt; 0		ifTrue: 			[redIndex := (componentOffset / (partitionDictionary at: #red)) truncated						+ 1.			index at: 1 put: redIndex].	componentOffset := aColour green - min green.	(partitionDictionary at: #green) &gt; 0		ifTrue: 			[greenIndex := (componentOffset / (partitionDictionary at: #green))						truncated + 1.			index at: 2 put: greenIndex].	componentOffset := aColour blue - min blue.	(partitionDictionary at: #blue) &gt; 0		ifTrue: 			[blueIndex := (componentOffset / (partitionDictionary at: #blue)) truncated						+ 1.			index at: 3 put: blueIndex].	^index</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	url := nil.	position := nil.	scale := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>accessing</category><body package="PickCell" selector="shortName">shortName	^shortName</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>accessing</category><body package="PickCell" selector="url:shortName:">url: anObject shortName: name	self url: anObject.	self shortName: name</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>accessing</category><body package="PickCell" selector="scale">scale	^scale</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>private</category><body package="PickCell" selector="remember">remember	self knownUrls at: self shortName put: self url</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>private</category><body package="PickCell" selector="knownUrls">knownUrls	^self class knownUrls</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>accessing</category><body package="PickCell" selector="shortName:">shortName: anObject	shortName := anObject</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>accessing</category><body package="PickCell" selector="url:">url: anObject	url := anObject</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>accessing</category><body package="PickCell" selector="position:">position: anObject	position := anObject</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>accessing</category><body package="PickCell" selector="scale:">scale: anObject	scale := anObject</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>accessing</category><body package="PickCell" selector="position">position	^position</body></methods><methods><class-id>AlgoDis.KnownMapUrl</class-id> <category>accessing</category><body package="PickCell" selector="url">url	^url</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="guessedName:">guessedName: anObject	guessedName := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="getShowImageMenu">getShowImageMenu	^self doShowImage value</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="loadPoints">loadPoints	| filename pm dico stream line ls pointX pointY point name points |	dico := Dictionary new.	points := OrderedCollection new.	filename := Dialog requestFileName: 'Name a point system  file' default: '*.txt'.	filename isEmpty		ifFalse: 			[stream := filename asFilename readStream.			[stream atEnd] whileFalse: 					[line := stream upTo: Character cr.					line isEmpty						ifFalse: 							[ls := line readStream.							pointX := ls upTo: $@.							pointY := ls upTo: $'.							point := pointX asNumber @ pointY asNumber.							name := ls upTo: $'.							points add: point.							dico at: point put: name]].			pm := self pickModel value.			pm pointDictionary: dico.			pm points: points.			self pickModel value: pm]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>fileIn/Out</category><body package="PickCell" selector="processReply:">processReply: replyTo	| source imageStream readerClass reader |	source := replyTo value byteSource.	imageStream := source .		[readerClass := ImageReader readerClassFor: imageStream.	reader := readerClass new from: imageStream]			ensure: [imageStream ifNotNil: [:stream | stream close]].	^reader image</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowGraph:">doShowGraph: anObject	doShowGraph := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowGrid:">doShowGrid: anObject	doShowGrid := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="initializeShowMenu">initializeShowMenu	| dico |	dico := self pickModel value displayModeDictionary.	dico at: #displayGrid put: true.	self doShowGrid: true asValue.	dico at: #displayImage put: true.	self doShowImage: true asValue.	dico at: #displayGraph put: true.	self doShowGraph: true asValue.	dico at: #displayZones put: true.	self doShowZones: true asValue.	self doShowLabel: true asValue.	dico at: #displayLabel put: true.	self doShowWind: false asValue.	dico at: #displayWinds put: false.	self doShowImage onChangeSend: #changedDisplayMode to: self.	self doShowGrid onChangeSend: #changedDisplayMode to: self.	self doShowGraph onChangeSend: #changedDisplayMode to: self.	self doShowCoverCells onChangeSend: #changedDisplayMode to: self.	self doShowZones onChangeSend: #changedDisplayMode to: self.	self doShowLabel onChangeSend: #changedDisplayMode to: self.	self doShowWind onChangeSend: #changedDisplayMode to: self</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="knownUrlVH">knownUrlVH	^knownUrlVH</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowImage:">doShowImage: anObject	doShowImage := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changing</category><body package="PickCell" selector="removeD:">removeD: double	| str |	str := double printString.	^str copyFrom: 1 to: str size - 1</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowImage">doShowImage	doShowImage isNil ifTrue: [doShowImage := true asValue].	^doShowImage</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="doShowLabelSwitch">doShowLabelSwitch	| menu submenu subsubmenu |	self doShowLabel value: self doShowLabel value not.	menu := self builder menuAt: #leMenu.	submenu := (menu menuItemLabeled: 'View') submenu.	subsubmenu := submenu menuItemLabeled: 'Label'.	self doShowLabel value		ifTrue: [subsubmenu beOn]		ifFalse: [subsubmenu beOff]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="changePortee">changePortee	| boundWidth laPortee |	self pickModel value bounds isNil ifTrue: [^nil].	laPortee := self portee value.	self pickModel value portee: laPortee.	self percent value.	boundWidth := self pickModel value bounds width.	laPortee := (laPortee / boundWidth * 100) asInteger.	self percent retractInterestsFor: self.	self percent value: laPortee.	self percent onChangeSend: #changePercent to: self.	self updateGraph.	self uiCellShow isNil ifFalse: [self uiCellShow laVue invalidate]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="doShowGridSwitch">doShowGridSwitch	| menu submenu subsubmenu | 	self doShowGrid value: self doShowGrid value not.	menu := self builder menuAt: #leMenu.	submenu := (menu menuItemLabeled: 'View') submenu.	subsubmenu := submenu menuItemLabeled: 'Grid'.	self doShowGrid value ifTrue: [subsubmenu beOn] ifFalse: [subsubmenu beOff]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changing</category><body package="PickCell" selector="updateLocFromMouse:mousePoint:mercator:">updateLocFromMouse: mapOrigin mousePoint: mousePoint mercator: gm	| origin zoom cp m lonLatMap cell |	origin := mapOrigin at: 1.	zoom := mapOrigin at: 2.	cp := origin + mousePoint.	m := gm pixelToMeterNew: cp zoom: zoom.	lonLatMap := gm meterToLonLat: m.	self updateGeoUILocation: lonLatMap.	cell := self getCellAtMousePoint.	cell isNil		ifFalse: 			[cell elevation isNil 				ifFalse: [self uiLocation isNil ifFalse: [ self uiLocation elevation value: cell elevation printString]]].	self laLon value: (self removeD: lonLatMap x).	self laLat value: (self removeD: lonLatMap y)</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="storedHistory:">storedHistory: anObject	storedHistory := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="savePoints">savePoints	| filename pm dico stream name points |	pm := self pickModel value.	pm buildNet.	dico := pm pointDictionary.	points := pm points.	filename := Dialog requestNewFileName: 'Name a point system  file'				default: '*.txt'.	filename isEmpty		ifFalse: 			[stream := filename asFilename writeStream.			points do: 					[:eachPoint |					eachPoint printOn: stream.					stream space.					name := dico at: eachPoint.					name printOn: stream.					stream cr].			stream close]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doCopy">doCopy	| selection |	selection := self laLat value  , ' ' , self laLon value.	TextEditorController copySelection: selection</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="uiCellShow:">uiCellShow: anObject	uiCellShow := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowGrid">doShowGrid	doShowGrid isNil ifTrue: [doShowGrid := true asValue].	^doShowGrid</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>aspects</category><body package="PickCell" selector="gridAspect">gridAspect	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^gridAspect isNil		ifTrue:			[gridAspect := self pickModel value grid printString asValue]		ifFalse:			[gridAspect]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doAwakeLocation">doAwakeLocation	| locWindows |	locWindows := UILocation allInstances				select: [:uiloc | uiloc = self uiLocation].	locWindows isEmpty		ifFalse: 			[locWindows do: 					[:win |					win						open;						closeRequest]].	self uiLocation: UILocation new.	self uiLocation open</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	super initialize.	laVue := PickCellView new.	pickModel := PickCellModel new asValue.	self laVue model: self pickModel.	pickModel value cellDisplay: laVue.		self initializeShowMenu.	self portee onChangeSend: #changePortee to: self.	self percent onChangeSend: #changePercent to: self.	self portee value: 20.	self percent value: (20 / 398 * 100) asInteger.	self pickModel value portee: 20.	self pickModel value grid: 25 @ 25.	self initCellArray: self pickModel value grid.	self gridAspect onChangeSend: #changeGrid to: self.	self pickModel value mousePoint onChangeSend: #changedMousePoint to: self.</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="loadUrlHistory">loadUrlHistory	| uiku uikuWin |	self class knownUrls.	uiku := UIKnownUrls new.	uikuWin := uiku open.	self knownUrlWindow: uikuWin window.	self knownUrlVH: uiku knownUrl.	uiku knownUrl onChangeSend: #changeUrlHistory to: self.	uiku closeVH onChangeSend: #changeForCloseKnownUrl to: self.</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="getShowWindMenu">getShowWindMenu	^self doShowWind value</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="saveImage">saveImage	| box image filename drawingBounds file gc boxView origin pixmap | 	boxView := self builder componentAt: #ViewHolder1.	origin := self builder window displayBox origin.	box := boxView bounds translatedBy: origin.	pixmap := Pixmap extent: box extent.	self laVue  displayOn: pixmap graphicsContext.  	image:= pixmap asImage.  	filename := Dialog requestNewFileName: 'Enter filename for output:'				default: 'drawing.ps'.	filename isEmpty ifTrue: [^self].	drawingBounds := image bounds.	file := PostScriptFile named: filename.	file setLandscape: drawingBounds extent x &gt; drawingBounds extent y.	gc := file graphicsContext.	gc palette: self laVue palette.	gc scaleBy: 1.	"(scale min: 1)"	image displayOn: gc.	file close</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="laVue">laVue	^laVue</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doDisplayCoverFile:">doDisplayCoverFile: traceFile	| uit cellPosArray pm dico |	uit := UITextPoints new. 	uit pickModel: (self pickModel value).	uit doLoadFile: traceFile.	cellPosArray := uit doAnalyzeCover.	pm := pickModel value.	pm isNil		ifFalse: 			[dico := pm positionCoverDictionary: cellPosArray.			pm highLightCells: dico.				self laVue invalidate.]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowWind:">doShowWind: anObject	doShowWind := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doGetView">doGetView	"open a pick cell window"	| box origin boxView pixmap gc topView names fileNames directory minus tail fnSort q1 q2 m1 m2 min1 min2 png |	boxView := self builder componentAt: #ViewHolder1.	origin := self builder window displayBox origin.	box := boxView bounds translatedBy: origin.	pixmap := Pixmap extent: box extent.	gc := pixmap graphicsContext.	self laVue displayOn: gc.	topView := ScheduledWindow new.	topView topView minimumSize: box extent + (2 @ 2).	topView		component: (BorderDecorator on: pixmap asImage) useHorizontalScrollbar.	topView open.	names := Dialog requestFileName: 'basic name ?'.	directory := names asFilename directory.	tail := names asFilename tail.	tail := tail reverse.	minus := tail indexOf: $-.	names := (tail copyFrom: minus to: tail size) reverse.	names := names , '*.txt'.	fileNames := directory filenamesMatching: names.	fnSort := SortedCollection sortBlock: 					[:n1 :n2 |					m1 := n1 tail asString.					m2 := n2 tail asString.					min1 := m1 indexOf: $-.					min2 := m2 indexOf: $-.					q1 := m1 copyFrom: min1 + 1 to: m1 size.					q2 := m2 copyFrom: min2 + 1 to: m2 size.					q1 asNumber &lt; q2 asNumber].	fnSort addAll: fileNames.	fnSort do: 			[:fn |			| stream |			self doDisplayCoverFile: fn asString.			pixmap := Pixmap extent: box extent.			gc := pixmap graphicsContext.			self laVue displayOn: gc.			self displayOnWindow: box.			png := fn asString , '.png'.			stream := png asFilename writeStream.						[stream binary.			Refactory.PNG.PNGImageWriter writeImage: pixmap asImage on: stream]					ensure: [stream close]]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>aspects</category><body package="PickCell" selector="laLat">laLat	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^laLat isNil		ifTrue:			[laLat := String new asValue]		ifFalse:			[laLat]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changing</category><body package="PickCell" selector="updateGeoUILocation:">updateGeoUILocation: lonLatMap	uiLocation := self uiLocation.	uiLocation isNil		ifFalse: 			[self uiLocation leXGeo value: lonLatMap x printString.			self uiLocation leYGeo value: lonLatMap y printString]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="knownUrlVH:">knownUrlVH: anObject	knownUrlVH := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="getShowZonesMenu">getShowZonesMenu	^self doShowZones value</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="getShowGridMenu">getShowGridMenu	^self doShowGrid value</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="pickModel">pickModel	^pickModel</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="changePercent">changePercent		| boundWidth percentage laPortee |	self pickModel value bounds isNil ifTrue: [^nil].	percentage := self percent value.	boundWidth := self pickModel value bounds width.	laPortee := (percentage * boundWidth / 100) asInteger.	self pickModel value portee: laPortee.	self portee retractInterestsFor: self.	self portee value: laPortee.	self portee onChangeSend: #changePortee to: self.	self updateGraph</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>aspects</category><body package="PickCell" selector="portee">portee	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^portee isNil		ifTrue:			[portee :=0 asValue]		ifFalse:			[portee]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>aspects</category><body package="PickCell" selector="percent">percent	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^percent isNil		ifTrue:			[percent := 0 asValue]		ifFalse:			[percent]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="changeForCloseKnownUrl">changeForCloseKnownUrl	self knownUrlWindow isNil		ifFalse: 			[self knownUrlWindow closeRequest.			self knownUrlWindow: nil]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="changedMousePoint">changedMousePoint	| mousePoint mouseCell mapOrigin gm |	gm := self pickModel value mercator.	mapOrigin := self pickModel value mapOrigin.	mousePoint := self pickModel value mousePoint value.	self pickModel value computeMouseCell.	mouseCell := self pickModel value mouseCell.	self updateUILocation: mouseCell.	mapOrigin isNil 		ifFalse: 			[self updateLocFromMouse: mapOrigin mousePoint: mousePoint mercator: gm.			self updateLocForCell: mapOrigin cellPoint: mouseCell mercator: gm.			self updateElevationCell: mapOrigin cellPoint: mouseCell mercator: gm]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="updateGraph">updateGraph	| gc |	gc := self laVue graphicsContext.	self pickModel value buildGraph: gc.	self laVue invalidate.</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="changedDisplayMode">changedDisplayMode	" transfer display status to the pickCellModel "	| modeDico doFlag |	doFlag := self doShowGrid value.	modeDico := self pickModel value displayModeDictionary.	modeDico at: #displayGrid put: doFlag.	doFlag := self doShowZones value.	modeDico at: #displayZones put: doFlag.	doFlag := self doShowImage value.	modeDico at: #displayImage put: doFlag.	doFlag := self doShowGraph value.	modeDico at: #displayGraph put: doFlag.	doFlag := self doShowCoverCells value.	modeDico at: #displayCoverCells put: doFlag.	doFlag := self doShowLabel value.	modeDico at: #displayLabel put: doFlag.	doFlag := self doShowWind value.	modeDico at: #displayWinds   put: doFlag.	self laVue invalidate</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doLoadWind">doLoadWind	| uit cellPosArray pm fn rs dico |	uit := UITextPoints new.	fn := Dialog requestFileName: 'windFile ?'.	fn isEmpty		ifFalse: 			[fn := fn asFilename.			rs := fn readStream.			uit leTexte value: rs contents.			rs close.			uit pickModel: self pickModel value.			self halt.			cellPosArray := uit doAnalyzeWind.			pm := pickModel value.			pm isNil ifFalse: [dico := pm positionWindDictionary: cellPosArray]]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="doShowGraphSwitch">doShowGraphSwitch	| menu submenu subsubmenu | 	self doShowGraph value: self doShowGraph value not.	menu := self builder menuAt: #leMenu.	submenu := (menu menuItemLabeled: 'View') submenu.	subsubmenu := submenu menuItemLabeled: 'Graph'.	self doShowGraph value ifTrue: [subsubmenu beOn] ifFalse: [subsubmenu beOff]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="storedHistory">storedHistory	^storedHistory</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="gridAspectPoint">gridAspectPoint	| text xText yText x y point |	text := self gridAspect value readStream.	xText := text upTo: $@.	yText := text upToEnd.	x := xText asNumber.	y := yText asNumber.	point := x @ y.	^point</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>initialize-release</category><body package="PickCell" selector="initCellArray:">initCellArray: aGrid	| lines |	lines := Array new: 100.	lines := lines collect: [:a | Array new: 100].	self pickModel value cellArray: lines.	^ lines</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="updateGeneratorsWithCellNet:">updateGeneratorsWithCellNet: net	| uiGenerators uiLoc projectDir |	uiGenerators := UINetworkGeometry allInstances.	uiGenerators isEmpty		ifTrue: 			[UINetworkGeometry open.			uiGenerators := UINetworkGeometry allInstances].	uiGenerators do: 			[:aGenerator |			aGenerator leStyle value: nil.			aGenerator theNbSystems value: net nodeDictionary keys size.			aGenerator theRadius value: self portee value.			aGenerator theSize value: self pickModel value bounds width.			aGenerator doGraphic value: false.			aGenerator includeData: nil.			aGenerator sourceUpdated.			aGenerator leCode value: net printString.			projectDir := self pickModel value guessedDirectory.			projectDir := projectDir , '/'.			projectDir asFilename ensureDirectory.			aGenerator generateDir: projectDir.			aGenerator doGenerate.			uiLoc := aGenerator builder window.			uiLoc isCollapsed ifTrue: [uiLoc expand].			uiLoc display.			uiLoc display]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="changeGrid">changeGrid	| point mercator mapOrigin |	point := self gridAspectPoint.	self pickModel value grid: point.	self pickModel value highLightCells: nil.	mercator := self pickModel value mercator.	mapOrigin := self pickModel value mapOrigin.	mapOrigin isNil		ifFalse: 			[self updateScaleFrom: mapOrigin mercator: mercator.			self laVue invalidate]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>aspects</category><body package="PickCell" selector="laLon">laLon	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^laLon isNil		ifTrue:			[laLon := String new asValue]		ifFalse:			[laLon]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="changeUrlHistory">changeUrlHistory	| httpRequest replyTo image bounds pm button anUrl imageHistory nbLoop delai |	self knownUrlVH isNil		ifFalse: 			[anUrl := self knownUrlVH value.			anUrl isNil				ifFalse: 					[						nbLoop := 3.						delai := 100.						imageHistory := ImageHistory knownMapUrl: anUrl.						self storedHistory: imageHistory.						Cursor wait showWhile: 							[1 to: nbLoop								do: 									[:i |									httpRequest := Net.HttpRequest get: anUrl url.									[replyTo := httpRequest execute] on: Net.HttpException										do: [:ex | replyTo := ex parameter].									image := self processReply: replyTo.									bounds := image bounds.									imageHistory add: (Time now) -&gt; image.									pm := self pickModel value.									pm filename: url.									pm points: OrderedCollection new.									pm bounds: bounds.									self pickModel value: pm.									self laVue image: image.									button := self builder componentAt: #Slider1.									button enable.									button widget invalidate.									button := self builder componentAt: #InputField1.									button enable.									button widget invalidate.									(Delay forSeconds: delai) wait.]]]]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowCoverCells:">doShowCoverCells: anObject	doShowCoverCells := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowLabel">doShowLabel	doShowLabel isNil ifTrue: [doShowLabel := true asValue].	^doShowLabel</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowZones:">doShowZones: anObject	doShowZones := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="knownUrlWindow">knownUrlWindow	^knownUrlWindow</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="loadRectangles">loadRectangles	| filename rs scanner eachLine line rect model |	filename := Dialog requestFileName: 'Name a file' default: '.rect'.	filename isEmpty		ifFalse: 			[rs := filename asFilename readStream.			scanner := Scanner new.			rect := Set new.			[rs atEnd] whileFalse: 					[eachLine := rs upTo: Character cr.					line := scanner scanTokens: eachLine.					rect add: (Rectangle origin: (line at: 1) @ (line at: 2) corner: (line at: 3) @ (line at: 4))].			model := self pickModel value.			model zones: rect.			self pickModel value: model]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="buildNet">buildNet	| model view gc netAndDicoAndComposite |	model := self pickModel value.	view := self laVue.	gc := view graphicsContext.	netAndDicoAndComposite := model buildNetAndDisplayOn: gc.	self updateGeneratorsWith: netAndDicoAndComposite first.	model lastGraph: netAndDicoAndComposite last.	model pointDictionary: (netAndDicoAndComposite at: 2).	self pickModel value: model</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changing</category><body package="PickCell" selector="updateUILocation:">updateUILocation: mouseCell	uiLocation := self uiLocation.	uiLocation isNil		ifFalse: 			[self uiLocation leX value: mouseCell x printString.			self uiLocation leY value: mouseCell y printString]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="uiLocation">uiLocation	^uiLocation</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>aspects</category><body package="PickCell" selector="leSeuil">leSeuil	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leSeuil isNil ifTrue: [leSeuil := 0.1 asValue] ifFalse: [leSeuil]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="doShowZonesSwitch">doShowZonesSwitch	| menu submenu subsubmenu |	self doShowZones value: self doShowZones value not.	menu := self builder menuAt: #leMenu.	submenu := (menu menuItemLabeled: 'View') submenu.	subsubmenu := submenu menuItemLabeled: 'Zones'.	self doShowZones value		ifTrue: [subsubmenu beOn]		ifFalse: [subsubmenu beOff]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="getShowCoverCellsMenu">getShowCoverCellsMenu	^self doShowCoverCells value</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="buildNetOld">buildNetOld	| pm net model |	pm := self pickModel value.	net := pm buildNet.	self updateGeneratorsWith: net.	model := self pickModel value.	model lastGraph: net.	self pickModel value: model.	self halt</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>aspects</category><body package="PickCell" selector="latitude">latitude	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^latitude isNil		ifTrue:			[latitude := 0 asValue]		ifFalse:			[latitude]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="updateGeneratorsWithCellNet:withDataFile:">updateGeneratorsWithCellNet: net withDataFile: dataFileName	| uiGenerators uiLoc projectDir |	uiGenerators := UINetworkGeometry allInstances.	uiGenerators isEmpty		ifTrue: 			[UINetworkGeometry open.			uiGenerators := UINetworkGeometry allInstances].	uiGenerators do: 			[:aGenerator |			aGenerator leStyle value: nil.			aGenerator theNbSystems value: net nodeDictionary keys size.			aGenerator theRadius value: self portee value.			aGenerator theSize value: self pickModel value bounds width.			aGenerator doGraphic value: false.			aGenerator includeData: dataFileName.			aGenerator sourceUpdated.			aGenerator leCode value: net printString.  			projectDir := self  pickModel value guessedDirectory.			projectDir := (projectDir , '/') .			projectDir asFilename ensureDirectory. 						aGenerator generateDir: projectDir. 			aGenerator doGenerate: true. 			uiLoc := aGenerator builder window.			uiLoc isCollapsed ifTrue: [uiLoc expand].			uiLoc display.			uiLoc display]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="getShowGraphMenu">getShowGraphMenu	^self doShowGraph value</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>aspects</category><body package="PickCell" selector="lEchelle">lEchelle	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lEchelle isNil		ifTrue:			[lEchelle := String new asValue]		ifFalse:			[lEchelle]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="buildNetDrawingOnView">buildNetDrawingOnView	| net model view gc |	model := self pickModel value.	view := self laVue.	gc := view graphicsContext.	net := model buildNetAndDisplayOn: gc.	self halt.	self updateGeneratorsWith: net.	model lastGraph: net.	self pickModel value: model.	self halt</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="doShowImageSwitch">doShowImageSwitch	| menu submenu subsubmenu | 	self doShowImage value: self doShowImage value not.	menu := self builder menuAt: #leMenu.	submenu := (menu menuItemLabeled: 'View') submenu.	subsubmenu := submenu menuItemLabeled: 'Image'.	self doShowImage value ifTrue: [subsubmenu beOn] ifFalse: [subsubmenu beOff]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowCoverCells">doShowCoverCells	doShowCoverCells isNil ifTrue: [doShowCoverCells := true asValue].	^doShowCoverCells</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowGraph">doShowGraph	doShowGraph isNil ifTrue: [doShowGraph := true asValue].	^doShowGraph</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doInspect">doInspect	self inspect</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="uiLocation:">uiLocation: anObject	uiLocation := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowZones">doShowZones	doShowZones isNil ifTrue: [doShowZones := true asValue].	^doShowZones</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="postscript">postscript	| printer boxView origin box pixmap image filename drawingBounds file gc |	printer := Printer startPrintJobNamed: 'aString'.	boxView := self builder componentAt: #ViewHolder1.	origin := self builder window displayBox origin.	box := boxView bounds translatedBy: origin.	pixmap := Pixmap extent: box extent.	self laVue displayOn: pixmap graphicsContext.	image := pixmap asImage.	filename := Dialog requestNewFileName: 'Enter filename for output:'				default: 'drawing.ps'.	filename isEmpty ifTrue: [^self].	drawingBounds := image bounds.	file := printer.	file setLandscape: drawingBounds extent x &gt; drawingBounds extent y.	gc := file graphicsContext.	"gc palette: self laVue image palette."	gc scaleBy: 1.	"(scale min: 1)"	image displayOn: gc.	file close</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="buildCellArrayWithElevation">buildCellArrayWithElevation	| uiLoc pm |	pm := self pickModel value.	pm getElevation: true. 	uiCellShow := pm scanCellArray: self leSeuil value.	uiCellShow uiLocation: self uiLocation.	uiCellShow masterPickCellNodes: self.	uiLoc := self uiLocation builder window.	uiLoc isCollapsed ifTrue: [uiLoc expand].	Transcript		show: self pickModel value cellClassifier dictionary size printString					, ' pixels differents';		cr</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="guessedName">guessedName	^guessedName</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>interface opening</category><body package="PickCell" selector="postOpenWith:">postOpenWith: spec	"	uiLocation := UILocation new.	uiLocation open."	| pm name winTitle |	pm := self pickModel value.	pm grid: 25 @ 25.	self pickModel value: pm.	self changeGrid.	name := pm guessedName.	name isNil		ifTrue: [winTitle := 'Pickcell - ' , 'no name']		ifFalse: [winTitle := 'Pickcell - ' , name].	self builder window label: winTitle</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="savePostscript">savePostscript	| box image filename drawingBounds file gc boxView origin pixmap | 	boxView := self builder componentAt: #ViewHolder1.	origin := self builder window displayBox origin.	box := boxView bounds translatedBy: origin.	pixmap := Pixmap extent: box extent.	self laVue  displayOn: pixmap graphicsContext.  	image:= pixmap asImage.  	filename := Dialog requestNewFileName: 'Enter filename for output:'				default: 'drawing.ps'.	filename isEmpty ifTrue: [^self].	drawingBounds := image bounds.	file := PostScriptFile named: filename.	file setLandscape: drawingBounds extent x &gt; drawingBounds extent y.	gc := file graphicsContext.	"gc palette: self laVue image palette."	gc scaleBy: 1.	"(scale min: 1)"	image displayOn: gc.	file close</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="knownUrlWindow:">knownUrlWindow: anObject	knownUrlWindow := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="uiCellShow">uiCellShow	^uiCellShow</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="resetPoints">resetPoints	| pm model |	pm := self pickModel value.	model := self pickModel value.	pm points isNil ifFalse: [pm points: OrderedCollection new].	self pickModel value: pm.	model lastGraph: nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doDisplayCover">doDisplayCover	| uit cellPosArray pm dico |	uit := UITextPoints new. 	uit pickModel: (self pickModel value).	uit doLoad.	cellPosArray := uit doAnalyzeCover.	pm := pickModel value.	pm isNil		ifFalse: 			[dico := pm positionCoverDictionary: cellPosArray.			pm highLightCells: dico]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="updateScaleFrom:mercator:">updateScaleFrom: mapOrigin   mercator: mercator	| origin zoom cp meters op corner extent |	origin := mapOrigin at: 1.	zoom := mapOrigin at: 2.	cp := origin. 	meters := mercator pixelToMeterNew: cp zoom: zoom.	op := cp + self gridAspectPoint.	corner :=  mercator pixelToMeterNew: op zoom: zoom.	extent := corner - meters.	extent := extent x rounded abs @ extent y rounded abs.	self lEchelle value: extent printString.</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="computeLocationAtPoint:">computeLocationAtPoint: aPoint	| mapOrigin gm m cp zoom origin |	gm := self pickModel value mercator.	mapOrigin := self pickModel value mapOrigin.	mapOrigin isNil		ifFalse: 			[origin := mapOrigin at: 1.			zoom := mapOrigin at: 2.			cp := origin + aPoint.			m := gm pixelToMeterNew: cp zoom: zoom.			^gm meterToLonLat: m]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowWind">doShowWind	^doShowWind</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowLabel:">doShowLabel: anObject	doShowLabel := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="doShowWindSwitch">doShowWindSwitch	| menu submenu subsubmenu |	self doShowWind value: self doShowWind value not.	menu := self builder menuAt: #leMenu.	submenu := (menu menuItemLabeled: 'View') submenu.	subsubmenu := submenu menuItemLabeled: 'Wind'.	self doShowZones value		ifTrue: [subsubmenu beOn]		ifFalse: [subsubmenu beOff]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="changeUrl">changeUrl	| httpRequest replyTo image bounds pm button anUrl |	self knownUrlVH isNil		ifFalse: 			[anUrl := self knownUrlVH value.			anUrl isNil				ifFalse: 					[Cursor wait showWhile: 							[httpRequest := Net.HttpRequest get: anUrl url.							[replyTo := httpRequest execute] on: Net.HttpException								do: [:ex | replyTo := ex parameter].							image := self processReply: replyTo.							bounds := image bounds.							pm := self pickModel value.							pm filename: url.							pm points: OrderedCollection new.							pm bounds: bounds.							self pickModel value: pm.							self laVue image: image.							button := self builder componentAt: #Slider1.							button enable.							button widget invalidate.							button := self builder componentAt: #InputField1.							button enable.							button widget invalidate]]]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>aspects</category><body package="PickCell" selector="longitude">longitude	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^longitude isNil		ifTrue:			[longitude := 0 asValue]		ifFalse:			[longitude]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="displayOnWindow:">displayOnWindow: box	| pixmap gc topView |	pixmap := Pixmap extent: box extent.	gc := pixmap graphicsContext.	self laVue displayOn: gc.	topView := ScheduledWindow new.	topView topView minimumSize: box extent + (2 @ 2).	topView		component: (BorderDecorator on: pixmap asImage) useHorizontalScrollbar.	topView open</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changing</category><body package="PickCell" selector="updateLocForCell:cellPoint:mercator:">updateLocForCell: mapOrigin cellPoint: cellPoint mercator: gm	| origin zoom cp m lonLatOrigin lonLatCorner |	origin := mapOrigin at: 1.	zoom := mapOrigin at: 2.	cp := origin + (cellPoint * self gridAspectPoint).	m := gm pixelToMeterNew: cp zoom: zoom.	lonLatOrigin := gm meterToLonLat: m.	cp := origin + self gridAspectPoint + (cellPoint * self gridAspectPoint).	m := gm pixelToMeterNew: cp zoom: zoom.	lonLatCorner := gm meterToLonLat: m.	self uiLocation isNil		ifFalse: [self uiLocation updateOrigin: lonLatOrigin corner: lonLatCorner]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doGo">doGo	| lon lat mo originPixel zoom pm m mapPixel pixel |	lon := self longitude value.	lat := self latitude value.	mo := self pickModel value mapOrigin.	originPixel := mo at: 1.	zoom := mo at: 2.	pm := self pickModel value mercator.	m := pm latLonToMeter: lat lon: lon.	mapPixel := pm meterToPixelNew: m zoom: zoom.	pixel := mapPixel - originPixel.	self laVue controller activate.	self laVue controller sensor cursorPoint: pixel rounded.</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>aspects</category><body package="PickCell" selector="elevation">elevation	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^elevation isNil		ifTrue:			[elevation := String new asValue]		ifFalse:			[elevation]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="doShowCoverCellsSwitch">doShowCoverCellsSwitch	| menu submenu subsubmenu |	self doShowCoverCells value: self doShowCoverCells value not.	menu := self builder menuAt: #leMenu.	submenu := (menu menuItemLabeled: 'View') submenu.	subsubmenu := submenu menuItemLabeled: 'CoverCells'.	self doShowCoverCells value		ifTrue: [subsubmenu beOn]		ifFalse: [subsubmenu beOff]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changing</category><body package="PickCell" selector="getCell:in:">getCell: point in: cellArray	| y cellLine x cell |	y := point y + 1.	y &lt;= cellArray size		ifTrue: 			[cellLine := cellArray at:   y.			x := point x + 1.			x &lt;= cellLine size				ifTrue: 					[cell := cellLine at:  x.					^cell]].	^nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changes</category><body package="PickCell" selector="getCellAtMousePoint">getCellAtMousePoint	| mouseCell cells line cell |	cells := self pickModel value newCellArray.	self pickModel value mousePoint value.	self pickModel value computeMouseCell.	mouseCell := self pickModel value mouseCell.	(mouseCell y &lt;= cells size and: [mouseCell y &gt; 0])		ifTrue: 			[line := cells at: mouseCell y.			(mouseCell x &lt;= line size and: [mouseCell x &gt; 0])				ifTrue: 					[cell := line at: mouseCell x.					^cell at: 3]].	^nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>menu</category><body package="PickCell" selector="getShowLabelMenu">getShowLabelMenu	^self doShowLabel value</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="loadUrl">loadUrl	| uiku uikuWin |	self class knownUrls.	uiku := UIKnownUrls new.	uikuWin := uiku open.	self knownUrlWindow: uikuWin window.	self knownUrlVH: uiku knownUrl.	uiku knownUrl onChangeSend: #changeUrl to: self.	uiku closeVH onChangeSend: #changeForCloseKnownUrl to: self</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="showTrackPointsDB">showTrackPointsDB	| aGPSTracking |	self		doGetGPS: 			[aGPSTracking := GPSTrackingInterface new.			aGPSTracking open] fork.	self		doShowGPS: 			[[true] whileTrue: 					[self laVue controller addAGPSPoint: APoint.					APoint := nil.					(Delay forMilliseconds: 1) wait]]					fork</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="showMobilePoints">showMobilePoints	| aName filename rs nodeid time lat lon rssi alt latString lonString aPoint |	aPoint := TrackPoint new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackMobilePoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							aPoint								id: nodeid;								time: time;								lon: lon;								lat: lat;								alt: alt;								rssi: rssi.							self laVue controller addAGPSPointInactive: aPoint]].			rs close].	^nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doSaveGPSPoints">doSaveGPSPoints	^doSaveGPSPoints</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>aspects</category><body package="PickCell" selector="parameters">parameters	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^parameters isNil		ifTrue:			[parameters := String new asValue]		ifFalse:			[parameters]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowGPS">doShowGPS	^doShowGPS</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="showVisiblePointsTest">showVisiblePointsTest	| aName filename rs nodeid time lat lon rssi alt latString lonString aPoint receivedPoints receivedPos pickcellLoc |	aPoint := TrackPoint new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackMobilePoints.txt'				for: nil.	receivedPoints := OrderedCollection new.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[receivedPos := OrderedCollection new.							nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							aPoint								id: nodeid;								time: time;								lon: lon;								lat: lat;								alt: alt;								rssi: rssi.							self laVue controller addAGPSPoint: aPoint.							pickcellLoc := self laVue controller getPoint.							receivedPos								add: pickcellLoc x;								add: pickcellLoc y.							receivedPoints add: receivedPos asArray]].			rs close].	^receivedPoints</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="showInactivePoints">showInactivePoints	| aName filename rs nodeid time lat lon rssi alt latString lonString aPoint |	aPoint := TrackPoint new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackMobilePoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							aPoint								id: nodeid;								time: time;								lon: lon;								lat: lat;								alt: alt;								rssi: rssi.							self laVue controller addAGPSPointInactive: aPoint]].			rs close].	^nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="testRetrieve">testRetrieve	| sqlCmd pm |	pm := UIPickCellNodes new.	sqlCmd := 'SELECT NODEID, TIME, LAT, LON, ALT, RSSI FROM RECOCO'.	pm		retrieveOsmData: 'osm'		password: 'fare&amp;bali'		environment: '172.12.18.159:5432_vietnamTuyen'		strSql: sqlCmd.	^pm</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="getData:">getData: anObject	getData:= anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="getGPSData">getGPSData	| usb bufferPointer numChar ws buffer portOk points trackPoint |	USBSerial unloadLibraries.	usb := USBSerial new.	usb initialize.	points := OrderedCollection new.	usb RS232_CloseComport: 27.	Transcript		show: Time now printString;		cr.	buffer := String new: 4096.	bufferPointer := buffer gcCopyToHeap.	portOk := usb				setReadBuf: bufferPointer				with: 4095				with: 27				with: 38400.	usb		flushBuf: bufferPointer		with: 4095		with: 27		with: 38400.	portOk = 0		ifFalse: 			[Transcript				show: 'open error';				cr]		ifTrue: 			[10 timesRepeat: 					["bufferPointer := CIntegerType char gcMalloc: 4096."					numChar := usb								readBuf: bufferPointer								with: 4095								with: 27								with: 38400.					ws := String new writeStream.					0 to: numChar - 1						do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].					Transcript						show: numChar printString;						tab;						show: ws contents.					trackPoint := TrackPoint from: ws contents.					trackPoint isNil ifFalse: [points add: trackPoint].					(Delay forSeconds: 1) wait].			usb RS232_CloseComport: 27].	^points</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="retrieveOsmData:password:environment:strSql:">retrieveOsmData: user password: pass environment: env strSql: sql	| connection session answer row values osmData |	connection := PostgresSocketConnection new.	connection		username: user;		password: pass;		environment: env.	connection connect.	session := connection getSession.	session		prepare: sql;		execute.	osmData := OrderedCollection new.	answer := session answer.	[answer atEnd] whileFalse: 			[row := answer next.			values := Array with: (row at: 1) with: (row at: 2).			osmData add: values].	connection disconnect.	^osmData</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="showTrackPoints">showTrackPoints	| aGPSTracking |	self		doGetGPS: 			[aGPSTracking := GPSTrackingInterface new.			aGPSTracking open] fork.	self		doShowGPS: 			[[true] whileTrue: 					[self laVue controller addAGPSPoint: APoint.					APoint := nil.					(Delay forMilliseconds: 1) wait]]					fork</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>statistics</category><body package="PickCell" selector="statisticsVPointsBK">statisticsVPointsBK	| simulationPoints actualPoints correct textSPoint textAPoint |	simulationPoints := OrderedCollection new.	"handle := UIPickCellNodes new."	simulationPoints := self doCoverageStatistics.	actualPoints := OrderedCollection new.	actualPoints := self visiblePointsStatistics.	correct := 0.	1 to: actualPoints size		do: 			[:i |			| aPoint |			aPoint := actualPoints at: i.			1 to: actualPoints size				do: 					[:j |					| sPoint |					sPoint := simulationPoints at: j.					textSPoint := sPoint printString.					textAPoint := aPoint printString.					(textAPoint sameAs: textSPoint) ifTrue: [correct := correct + 1]]].	"percent := actualPoints / simulationPoints."	Dialog warn: 'Statistic result: ' , percent printString.	^percent</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="visiblePointsStatistics">visiblePointsStatistics	| aName filename rs nodeid time lat lon rssi alt latString lonString aPoint receivedPoints receivedPos pickcellLoc |	aPoint := TrackPoint new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackMobilePoints.txt'				for: nil.	receivedPoints := OrderedCollection new.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[receivedPos := OrderedCollection new.							nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							aPoint								id: nodeid;								time: time;								lon: lon;								lat: lat;								alt: alt;								rssi: rssi.							self laVue controller addAGPSPoint: aPoint.							pickcellLoc := self laVue controller getReveivedPoints: aPoint.							receivedPos								add: pickcellLoc x ceiling;								add: pickcellLoc y ceiling.							receivedPoints add: receivedPos asArray]].			rs close].	^receivedPoints</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="showPointsFromLogFile">showPointsFromLogFile	| aName filename rs nodeid time lat lon rssi alt latString lonString aPoint |	aPoint := TrackPoint new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackGPSPoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							aPoint								id: nodeid;								time: time;								lon: lon;								lat: lat;								alt: alt;								rssi: rssi.							self laVue controller addAGPSPoint: aPoint]].			rs close].	^nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doCoverageStatistics2">doCoverageStatistics2	| mouseCell xValue yValue turns nodeNumber test cov testNode covNode posStruct pos visible xLocation yLocation nameNode xString yString altitude visiblePoints visiblePos latString lonString lon lat |	mouseCell := self pickModel value mouseCell.	xValue := mouseCell x.	yValue := mouseCell y.	xValue := 119.	yValue := 186.	"turns = max(xValue, yValue)"	turns := 222.	nodeNumber := 48618.	test := Trevezel new.	cov := test covStruct gcMalloc: nodeNumber.	test		covVW: cov		with: xValue		with: yValue		with: turns.	testNode := Trevezel new.	covNode := testNode covStruct gcMalloc.	posStruct := OrderedCollection new.	visiblePoints := OrderedCollection new.	1 to: nodeNumber		do: 			[:i |			covNode := cov at: i.			visible := covNode memberAt: #visible.			visible == 1				ifTrue: 					[pos := OrderedCollection new.					visiblePos := OrderedCollection new.					lon := covNode memberAt: #longitude.					lat := covNode memberAt: #latitude.					altitude := covNode memberAt: #elevation.					xLocation := covNode memberAt: #x.					yLocation := covNode memberAt: #y.					xString := xLocation printString.					yString := yLocation printString.					nameNode := 'Px' , xString , 'y' , yString , '_,'.					pos						add: lat;						add: lon;						add: altitude;						add: nameNode.					posStruct add: pos asArray.					latString := lat printString , 'd'.					lonString := lon printString , 'd'.					visiblePos						add: latString asNumber;						add: lonString asNumber.					visiblePoints add: visiblePos asArray]]."	pm := pickModel value.	pm isNil		ifFalse: 			[dico := pm positionCoverDictionary: posStruct.			pm highLightCells: dico]."	^visiblePoints</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doPointsDB">doPointsDB	| collection connection session answer row rs aPoint |	aPoint := TrackPoint new.	collection := OrderedCollection new.	connection := PostgresSocketConnection new.	connection		username: 'osm';		password: 'fare&amp;bali';		environment: '172.12.18.159:5432_france'.	connection connect.	session := connection getSession.	session		prepare: 'select * from recoco_june92017';		execute.	answer := session answer.	[answer atEnd] whileFalse: 			[row := answer next.			collection add: row.			rs := (row at: 1) , ',' , (row at: 2) printString , ',' , (row at: 3)						, ',' , (row at: 4)						, ',' , (row at: 5)						, ',' , (row at: 6).			"self halt."			aPoint := self fromDB: rs.			self laVue controller addAGPSPoint: aPoint].	^nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="testGetData">testGetData	| usb bufferPointer numChar ws buffer portOk points trackPoint trackingInterface |		trackingInterface := GPSTrackingInterface new.	trackingInterface open.		self		getData: 			[USBSerial unloadLibraries.			usb := USBSerial new.			usb initialize.			points := OrderedCollection new.			usb RS232_CloseComport: 27.			Transcript				show: Time now printString;				cr.			buffer := String new: 4096.			bufferPointer := buffer gcCopyToHeap.			portOk := usb						setReadBuf: bufferPointer						with: 4095						with: 27						with: 38400.			usb				flushBuf: bufferPointer				with: 4095				with: 27				with: 38400.		"	trackingInterface := GPSTrackingInterface new.			trackingInterface open.			status := trackingInterface getStatus.			[status = 1] whileFalse: 					[(Delay forSeconds: 30) wait.					status := trackingInterface getStatus]."			portOk = 0				ifFalse: 					[Transcript						show: 'Open serial interface error';						cr]				ifTrue: 					[[true] whileTrue: 							[numChar := usb										readBuf: bufferPointer										with: 4095										with: 27										with: 38400.							ws := String new writeStream.							0 to: numChar - 1								do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].							Transcript								show: numChar printString;								tab;								show: ws contents.							trackPoint := TrackPoint from: ws contents.							trackPoint isNil ifFalse: [points add: trackPoint].							(Delay forSeconds: 1) wait.							"status := trackingInterface getStatus"].					usb RS232_CloseComport: 27.					"trackingInterface window close"].			^points]					fork</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="showInvisiblePoints">showInvisiblePoints	| aName filename rs nodeid time lat lon rssi alt latString lonString aPoint |	aPoint := TrackPoint new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackMobilePoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							aPoint								id: nodeid;								time: time;								lon: lon;								lat: lat;								alt: alt;								rssi: rssi.							self laVue controller addAGPSPointInactive: aPoint]].			rs close].	^nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="testOsmRetrieve">testOsmRetrieve	| sqlCmd pm |	pm := UIPickCellNodes new.	sqlCmd := 'SELECT osm_id, landuse FROM planet_osm_polygon'.	pm		retrieveOsmData: 'osm'		password: 'fare&amp;bali'		environment: '172.12.18.159:5432_vietnamTuyen'		strSql: sqlCmd.	^pm</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="retrieveData:password:environment:strSql:">retrieveData: user password: pass environment: env strSql: sql	| connection session answer row trackPoints aPoint |	connection := PostgresSocketConnection new.	connection		username: user;		password: pass;		environment: env.	connection connect.	session := connection getSession.	session		prepare: sql;		execute.	trackPoints := OrderedCollection new.	answer := session answer.	[answer atEnd] whileFalse: 			[row := answer next.			aPoint := Array new: 5.			aPoint at: 1 put: (row at: 1).			aPoint at: 2 put: (row at: 2).			aPoint at: 3 put: (row at: 3).			aPoint at: 4 put: (row at: 4).			aPoint at: 5 put: (row at: 5).			trackPoints add: aPoint].	connection disconnect.	^trackPoints	"trackPoints := TrackPoint new.	answer := session answer.	[answer atEnd] whileFalse: 			[row := answer next.			trackPoints from: row].	connection disconnect.	^trackPoints"</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="testAppend1">testAppend1	| sqlCmd pm |	pm := UIPickCellNodes new.	"sqlCmd := 'Select osm_id, way from planet_osm_vn_polygonwater where osm_id=''143516289'''."	"sqlCmd := 'INSERT INTO RECOCO9(gpsdata) VALUES( ''ID3, 01:02:03, 48.1234N, 004.5987W, 70.1, -91'')'."	sqlCmd :='INSERT INTO recoco6(nodeid, time, lat, lon, alt, rssi) VALUES(''ID1'', '' 14:08:52'', ''48.383598333333'', ''-4.3960966666667'', '' 32.8'', '' -52'')'.	 "'INSERT INTO recoco6(nodeid, time, lat, lon, alt, rssi) VALUES(''ID1'', '' 14:09:16'', ''48.383598333333'', ''-4.3960966666667'', '' 32.8'', '' -46'')'."	pm		appendData: 'osm'		password: 'fare&amp;bali'		environment: '172.12.18.159:5432_vietnamTuyen'		strSql: sqlCmd.	"environment: '172.12.18.159:5432_vietnambao2'"	^pm</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="buildCellArray">buildCellArray	| pm name |	pm := self pickModel value. 	name := Dialog request: 'system name ?'				initialAnswer: pm guessedName.	name isEmpty ifFalse: [pm guessedName: name].	pm getElevation: false.	uiCellShow := pm scanCellArray: self leSeuil value.	"uiCellShow uiLocation: self uiLocation."	uiCellShow masterPickCellNodes: self.	"	uiLoc := self uiLocation builder window.	uiLoc isCollapsed ifTrue: [uiLoc expand]. "	Transcript		show: self pickModel value cellClassifier dictionary size printString					, ' pixels differents';		cr</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doCoverageOpt">doCoverageOpt	| mouseCell xValue yValue nodeNumber test cov testNode covNode posStruct pos visible xLocation yLocation nameNode  lon lat elev band cod spr  |	mouseCell := self pickModel value mouseCell.	xValue := mouseCell x.	yValue := mouseCell y.	nodeNumber := 868.	test := CovVW new.	cov := test covStruct gcMalloc: nodeNumber.	1 to: 32		do: 			[:j |			test				covVW: cov				with: xValue				with: yValue				with: j.			testNode := CovVW new.			covNode := testNode covStruct gcMalloc.			posStruct := OrderedCollection new.			paraLora := OrderedCollection new.			num := 0.			1 to: nodeNumber				do: 					[:i |					covNode := cov at: i.					visible := covNode memberAt: #visible.					visible == 1						ifTrue: 							[pos := OrderedCollection new.							para := OrderedCollection new.							num := num + 1.							lon := covNode memberAt: #longitude.							lat := covNode memberAt: #latitude.							elev := covNode memberAt: #elevation.							xLocation := covNode memberAt: #x.							yLocation := covNode memberAt: #y.							band := covNode memberAt: #BW.							cod := covNode memberAt: #CR.							spr := covNode memberAt: #SF.							nameNode := 'Px' , xLocation asString , 'y' , yLocation asString , '_,'.							pos								add: lat;								add: lon;								add: elev;								add: nameNode.							"add: power;"							posStruct add: pos asArray.							para								add: xLocation;								add: yLocation;								add: band;								add: cod;								add: spr.							paraLora add: para asArray]]].	^Array with: paraLora with: num</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="getData">getData	^getData</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doShowGPS:">doShowGPS: anObject	doShowGPS := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doGetGPS">doGetGPS	^doGetGPS</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="testDBConnection1">testDBConnection1	| string pm |	pm := UIPickCellNodes new.	string := 'Select osm_id, way from planet_osm_vn_polygonwater where osm_id=''143516289'''.	pm		retrieveData1: 'osm'		password: 'fare&amp;bali'		environment: '172.12.18.159:5432_vietnambao2'		strSql: string.	^pm</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="testAppend">testAppend	| sqlCmd pm |	pm := UIPickCellNodes new.	"sqlCmd := 'Select osm_id, way from planet_osm_vn_polygonwater where osm_id=''143516289'''."	sqlCmd := 'INSERT INTO RECOCO(ID, NODEID, TIME, LAT, LON, ALT, RSSI) VALUES( 10, ''ID3'', ''01:02:03'', 8.123456789, -4.598765432, 70.1, -91)'.	pm		appendData: 'osm'		password: 'fare&amp;bali'		environment: '172.12.18.159:5432_vietnamTuyen'		strSql: sqlCmd.	"environment: '172.12.18.159:5432_vietnambao2'"	^pm</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="fromDB:">fromDB: aString	| rs nodeid time latString lat lonString lon alt rssi aPoint |	aPoint := TrackPoint new.	rs := aString readStream.	nodeid := rs upTo: $,.	time := rs upTo: $,.	time := time copyFrom: 1 to: time size - 3.	latString := rs upTo: $,.	latString := latString , 'd'.	lat := self convertValue: latString.	lonString := rs upTo: $,.	lonString := lonString , 'd'.	lon := self convertValue: lonString.	alt := rs upTo: $,.	rssi := rs upTo: Character cr.	aPoint		id: nodeid;		time: time;		lon: lon asDouble;		lat: lat asDouble;		alt: alt;		rssi: rssi.	^aPoint</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="getGPSData1">getGPSData1	| usb bufferPointer numChar ws buffer portOk points trackPoint status trackingInterface |	USBSerial unloadLibraries.	usb := USBSerial new.	usb initialize.	points := OrderedCollection new.	usb RS232_CloseComport: 27.	Transcript		show: Time now printString;		cr.	buffer := String new: 4096.	bufferPointer := buffer gcCopyToHeap.	portOk := usb				setReadBuf: bufferPointer				with: 4095				with: 27				with: 38400.	usb		flushBuf: bufferPointer		with: 4095		with: 27		with: 38400.	trackingInterface := GPSTrackingInterface new.	trackingInterface open.	status := trackingInterface getStatus.	[status = 1] whileFalse: 			[(Delay forSeconds: 30) wait.			status := trackingInterface getStatus].	portOk = 0		ifFalse: 			[Transcript				show: 'Open serial interface error';				cr]		ifTrue: 			[[status = 1] whileTrue: 					[numChar := usb								readBuf: bufferPointer								with: 4095								with: 27								with: 38400.					ws := String new writeStream.					0 to: numChar - 1						do: [:i | ws nextPut: (Character value: (bufferPointer at: i))].					Transcript						show: numChar printString;						tab;						show: ws contents.					trackPoint := TrackPoint from: ws contents.					trackPoint isNil ifFalse: [points add: trackPoint].					(Delay forSeconds: 1) wait.					status := trackingInterface getStatus].			usb RS232_CloseComport: 27.			trackingInterface window close].	^points</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>statistics</category><body package="PickCell" selector="statisticsVPoints">statisticsVPoints	| simulationPoints actualPoints sPointX sPointY aPointX aPointY offset vNumPoint allNumPoint |	simulationPoints := OrderedCollection new.	"handle := UIPickCellNodes new."	simulationPoints := self doCoverageStatistics2.	actualPoints := OrderedCollection new.	actualPoints := self visiblePointsStatistics2.	self halt.	vNumPoint := 0.	allNumPoint := actualPoints size.	1 to: actualPoints size		do: 			[:i |			| aPoint check |			aPoint := actualPoints at: i.			check := 0.			1 to: actualPoints size				do: 					[:j |					| sPoint |					sPoint := simulationPoints at: j.					sPointX := sPoint at: 1.					sPointY := sPoint at: 2.					aPointX := aPoint at: 1.					aPointY := aPoint at: 2.					offset := ((aPointX - sPointX) squared + (aPointY - sPointY) squared) sqrt.					offset &lt; (1 / 5) ifTrue: [check := check + 1]].			check &gt; 0 ifTrue: [vNumPoint := vNumPoint + 1]].	percent := vNumPoint / allNumPoint.	Dialog warn: 'Statistic result: ' , percent printString.	^percent asDouble</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>interface closing</category><body package="PickCell" selector="closeRequest">closeRequest	self doGetGPS terminate.	self doGetGPS: nil.	self laVue controller addAGPSPoint: nil.	self laVue controller terminate.	self doShowGPS terminate.	self doShowGPS: nil.	self uiLocation closeRequest</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="visiblePointsStatistics2">visiblePointsStatistics2	| aName filename rs nodeid time lat lon rssi alt latString lonString receivedPoints receivedPos |	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackMobilePoints.txt'				for: nil.	receivedPoints := OrderedCollection new.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[receivedPos := OrderedCollection new.							nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.										receivedPos								add: lat;								add: lon.							receivedPoints add: receivedPos asArray]].			rs close].	^receivedPoints</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="testDBConnection">testDBConnection	| sqlCmd pm |	pm := UIPickCellNodes new.	"sqlCmd := 'Select osm_id, way from planet_osm_vn_polygonwater where osm_id=''143516289'''."	sqlCmd := 'SELECT NODEID, TIME, LAT, LON, ALT, RSSI FROM RECOCO'.	pm		retrieveData: 'osm'		password: 'fare&amp;bali'		environment: '172.12.18.159:5432_vietnamTuyen'		strSql: sqlCmd.	"environment: '172.12.18.159:5432_vietnambao2'"	^pm</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="showTrackPointsBK">showTrackPointsBK	"text input for testing"	| trackPoints |	"trackPoints := TrackPoint				from: '51 ID2, 14:38:37, 4824.0176N, 00430.0715W, 62.4, -73'."	"get data from RECoco"	trackPoints := TrackPoint  new.	trackPoints := self getGPSData. 	self laVue controller addGPSPoints: trackPoints</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doShowCover">doShowCover	| uit cellPosArray pm dico |	uit := UITextPoints new. 	uit pickModel: (self pickModel value).	"uit doLoad."	cellPosArray := uit doParseCoverage.	pm := pickModel value.	pm isNil		ifFalse: 			[dico := pm positionCoverDictionary: cellPosArray.			pm highLightCells: dico]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doCoverage">doCoverage	| mouseCell xValue yValue pm dico nodeNumber test cov testNode covNode posStruct pos visible xLocation yLocation nameNode lon lat elev band cod spr para |	mouseCell := self pickModel value mouseCell.	xValue := mouseCell x.	yValue := mouseCell y.	nodeNumber := 868.	test := CovVW new.	cov := test covStruct gcMalloc: nodeNumber.	num := 0.	1 to: 32		do: 			[:j |			test				covVW: cov				with: xValue				with: yValue				with: j.			testNode := CovVW new.			covNode := testNode covStruct gcMalloc.			posStruct := OrderedCollection new.			paraLora := OrderedCollection new.			1 to: nodeNumber				do: 					[:i |					covNode := cov at: i.					visible := covNode memberAt: #visible.					visible == 1						ifTrue: 							[pos := OrderedCollection new.							para := OrderedCollection new.							lon := covNode memberAt: #longitude.							lat := covNode memberAt: #latitude.							elev := covNode memberAt: #elevation.							xLocation := covNode memberAt: #x.							yLocation := covNode memberAt: #y.							band := covNode memberAt: #BW.							cod := covNode memberAt: #CR.							spr := covNode memberAt: #SF.							nameNode := 'Px' , xLocation asString , 'y' , yLocation asString , '_,'.							pos								add: lat;								add: lon;								add: elev;								add: nameNode.							posStruct add: pos asArray.							para								add: xLocation;								add: yLocation;								add: band;								add: cod;								add: spr.							paraLora add: para asArray]].			pm := pickModel value.			pm isNil				ifFalse: 					[dico := pm positionCoverDictionary: posStruct.					pm highLightCells: dico]			"Dialog warn: 'Turn: ' , j printString"].	1 to: nodeNumber		do: 			[:t |			covNode := cov at: t.			visible := covNode memberAt: #visible.			visible == 1 ifTrue: [num := num + 1]].	^Array with: paraLora with: num</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="appendData:password:environment:strSql:">appendData: user password: pass environment: env strSql: sql	| connection session answer |	connection := PostgresSocketConnection new.	connection		username: user;		password: pass;		environment: env.	connection connect.	session := connection getSession.	session		prepare: sql;		execute.	answer := session answer.	connection disconnect.	^answer</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doGetGPS:">doGetGPS: anObject	doGetGPS := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="testAppend2">testAppend2	| sqlCmd pm |	pm := UIPickCellNodes new.	"sqlCmd := 'Select osm_id, way from planet_osm_vn_polygonwater where osm_id=''143516289'''."	sqlCmd := 'INSERT INTO RECOCO9(gpsdata) VALUES( ''ID3, 01:02:03, 48.1234N, 004.5987W, 70.1, -91'')'.	pm		appendData: 'osm'		password: 'fare&amp;bali'		environment: 'wsn.univ-brest.fr:8080_vietnamTuyen'		strSql: sqlCmd.	"environment: '172.12.18.159:5432_vietnambao2'"	^pm</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="doSaveGPSPoints:">doSaveGPSPoints: anObject	doSaveGPSPoints := anObject</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="convertValue:">convertValue: aString	^aString asNumber</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="parseLat:">parseLat: aString	| ls n ch entier decimal number north |	ls := aString readStream.	n := 0.	[ls atEnd] whileFalse: 			[ch := ls next.			ch = $. ifFalse: [ch isDigit ifTrue: [n := n * 10 + ch digitValue]]].	entier := (n / 1000000) truncated.	decimal := ((n / 10000) - (entier * 100)) / 60.	number := (entier + decimal) asDouble.	north := aString last = $N.	north ifFalse: [number := number negated].	^number</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doCoverageStatistics">doCoverageStatistics	| mouseCell xValue yValue pm dico turns nodeNumber test cov testNode covNode posStruct pos visible xLocation yLocation nameNode xString yString altitude visiblePoints visiblePos |	mouseCell := self pickModel value mouseCell.	xValue := mouseCell x.	yValue := mouseCell y.	"turns = max(xValue, yValue)"	turns := 222.	nodeNumber := 48618.	test := Trevezel new.	cov := test covStruct gcMalloc: nodeNumber.	test		covVW: cov		with: xValue		with: yValue		with: turns.	testNode := Trevezel new.	covNode := testNode covStruct gcMalloc.	posStruct := OrderedCollection new.	visiblePoints := OrderedCollection new.	1 to: nodeNumber		do: 			[:i |			| long lat |			covNode := cov at: i.			visible := covNode memberAt: #visible.			visible == 1				ifTrue: 					[pos := OrderedCollection new.					visiblePos := OrderedCollection new.					long := covNode memberAt: #longitude.					lat := covNode memberAt: #latitude.					altitude := covNode memberAt: #elevation.					xLocation := covNode memberAt: #x.					yLocation := covNode memberAt: #y.					xString := xLocation printString.					yString := yLocation printString.					nameNode := 'Px' , xString , 'y' , yString , '_,'.					pos						add: lat;						add: long;						add: altitude;						add: nameNode.					posStruct add: pos asArray.					visiblePos						add: xLocation;						add: yLocation.					visiblePoints add: visiblePos asArray]].	pm := pickModel value.	pm isNil		ifFalse: 			[dico := pm positionCoverDictionary: posStruct.			pm highLightCells: dico].	^visiblePoints</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="showVisiblePoints">showVisiblePoints	| aName filename rs nodeid time lat lon rssi alt latString lonString aPoint |	aPoint := TrackPoint new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackMobilePoints.txt'				for: nil.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							aPoint								id: nodeid;								time: time;								lon: lon;								lat: lat;								alt: alt;								rssi: rssi.							self laVue controller addAGPSPoint: aPoint]].			rs close].	^nil</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="showActivePoints">showActivePoints	| aName filename rs nodeid time lat lon rssi alt latString lonString aPoint receivedPoints receivedPos |	aPoint := TrackPoint new.	aName := Dialog				requestFileName: 'Give file name of log file??'				default: 'trackMobilePoints.txt'				for: nil.	receivedPoints := OrderedCollection new.	aName isEmpty		ifFalse: 			[filename := aName asFilename.			rs := filename readStream.			rs isReadable				ifTrue: 					[[rs atEnd] whileFalse: 							[receivedPos := OrderedCollection new.							nodeid := rs upTo: $,.							nodeid first = Character cr								ifTrue: [nodeid := nodeid copyFrom: 2 to: nodeid size].							time := rs upTo: $,.							latString := rs upTo: $,.							lat := self parseLat: latString.							lonString := rs upTo: $,.							lon := self parseLon: lonString.							alt := rs upTo: $,.							rssi := rs upTo: Character cr.							aPoint								id: nodeid;								time: time;								lon: lon;								lat: lat;								alt: alt;								rssi: rssi.							self laVue controller addAGPSPoint: aPoint.							receivedPos add: laVue position.							receivedPoints add: receivedPos asArray]].			rs close].	self halt.	^receivedPoints</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="testGetStatus">testGetStatus	| status trackingInterface |	trackingInterface := GPSTrackingInterface new.	trackingInterface open.	status:= trackingInterface getStatus.	Transcript show: status printString.	self halt.	^self</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>accessing</category><body package="PickCell" selector="parseLon:">parseLon: aString	| ls n ch entier decimal number west |	ls := aString readStream.	n := 0.	[ls atEnd] whileFalse: 			[ch := ls next.			ch = $. ifFalse: [ch isDigit ifTrue: [n := n * 10 + ch digitValue]]].	entier := (n / 1000000) truncated.	decimal := (n / 10000 - (entier * 100)) / 60.	number := (entier + decimal) asDouble.	west := aString last = $W.	west ifTrue: [number := number negated].	^number</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doPara">doPara	"parameterLora := OrderedCollection new.	self halt.	optArray := self doCoverageOpt.	parameterLora := optArray at: 1.	numTurn := optArray at: 2."	| mouseCell xValue yValue lora xLora yLora bwLora crLora sfLora |	paraLora isNil		ifFalse: 			[mouseCell := self pickModel value mouseCell.			xValue := mouseCell x.			yValue := mouseCell y.			bwLora := -1.			crLora := -1.			sfLora := -1.			1 to: num				do: 					[:k |					lora := paraLora at: k.					xLora := lora at: 1.					yLora := lora at: 2.					xValue == xLora						ifTrue: 							[yValue == yLora								ifTrue: 									[bwLora := lora at: 3.									crLora := lora at: 4.									sfLora := lora at: 5]]].			bwLora == -1				ifFalse: 					[Dialog						warn: 'Suggest paramters: BW=' , bwLora printString , 'Hz, CR='								, crLora printString , ', SF='								, sfLora printString]				ifTrue: [Dialog warn: 'This place cannot recceive the signal.']]		ifTrue: [Dialog warn: 'Must perform estimate coverage (Cov) first']</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>changing</category><body package="PickCell" selector="updateElevationCell:cellPoint:mercator:">updateElevationCell: mapOrigin cellPoint: cellPoint mercator: gm	| pm cellArray cell cellImage elevationValue |	pm := self pickModel value.	cellArray := pm newCellArray.	cellArray isNil		ifFalse: 			[cell := self getCell: cellPoint in: cellArray.							cell isNil				ifFalse: [					cellImage := cell at:3.					elevationValue := cellImage elevation.					self elevation value:  elevationValue printString					]]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>database</category><body package="PickCell" selector="retrieveData1:password:environment:strSql:">retrieveData1: user password: pass environment: env strSql: sql	| connection session answer row trackPoints aPoint |	connection := PostgresSocketConnection new.	connection		username: user;		password: pass;		environment: env.	connection connect.	session := connection getSession.	session		prepare: sql;		execute.	trackPoints := OrderedCollection new.	answer := session answer.	[answer atEnd] whileFalse: 			[row := answer next.			aPoint := Array with: (row at: 1) with: (row at: 2).			trackPoints add: aPoint].	connection disconnect.	^trackPoints</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="updateGeneratorsWith:">updateGeneratorsWith: net	| uiGenerators connectivity uiLoc | 	uiGenerators := UINetworkGeometry allInstances. 	uiGenerators isEmpty		ifTrue: 			[UINetworkGeometry open.			uiGenerators := UINetworkGeometry allInstances].	uiGenerators do: 			[:aGenerator |			connectivity := net buildNetworkLocalized.			connectivity name: self pickModel value filename.			aGenerator leStyle value: nil.			aGenerator theNbSystems value: net points size.			aGenerator theRadius value: self portee value.			aGenerator theSize value: self pickModel value bounds width.			aGenerator doGraphic value: false.			aGenerator leCode value: connectivity printString.			uiLoc := aGenerator builder window.			uiLoc isCollapsed ifTrue: [uiLoc expand]]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="loadImage">loadImage	| filename reader image pm bounds button | 	filename := Dialog requestFileName: 'Name a file' default: '.png .jpg .tiff .gif'.	filename isEmpty		ifFalse: 			[reader := ImageReader fromFile: filename.			image := reader image.			bounds := image bounds.			pm := self pickModel value.			pm filename: filename.			pm points: OrderedCollection new.			pm bounds: bounds.			self pickModel value: pm.			self laVue image: image.			button := self builder componentAt: #Slider1.			button enable.			button widget invalidate.			button := self builder componentAt: #InputField1.			button enable.			button widget invalidate]</body></methods><methods><class-id>AlgoDis.UIPickCellNodes</class-id> <category>actions</category><body package="PickCell" selector="doCellSystemName">doCellSystemName	| pm name winTitle currentName |	pm := self pickModel value. 	currentName := pm filename.	name := Dialog request: ' Cell system name ?' initialAnswer: currentName.	name isEmpty		ifFalse: 			[pm guessedName: name.			winTitle := 'Pickcell - ' , pm guessedName.			self builder window label: winTitle]</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>fileIn/Out</category><body package="PickCell" selector="parseLine:">parseLine: line	| rs char ws word rsw |	rs := line readStream.	ws := Array new writeStream.	[rs atEnd] whileFalse: 			[word := rs upTo: $,.			word isEmpty				ifTrue: [ws nextPut: word]				ifFalse: 					[rsw := word readStream.					char := rsw next.					[char isSeparator and: [rsw atEnd not]] whileTrue: [char := rsw next].					ws nextPut: (String with: char) , rsw upToEnd]].	^ws contents</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>accessing</category><body package="PickCell" selector="title:">title: anObject	title := anObject</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>accessing</category><body package="PickCell" selector="fileName:">fileName: anObject	fileName := anObject</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>processing</category><body package="PickCell" selector="newOrder:">newOrder: indexArray	| col2 aColumn title2 |	col2 := OrderedCollection new.	title2 := OrderedCollection new.	indexArray do: 			[:anIndex |			aColumn := self columns at: anIndex.			col2 add: aColumn.			title2 add: (self title at: anIndex)].	self columns: col2.	self title: title2.				self checkSize.	^col2</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>fileIn/Out</category><body package="PickCell" selector="parseLine:separator:">parseLine: line separator: sep	| rs char ws word rsw |	rs := line readStream.	ws := Array new writeStream.	[rs atEnd] whileFalse: 			[word := rs upTo: sep.			word isEmpty				ifTrue: [ws nextPut: word]				ifFalse: 					[rsw := word readStream.					char := rsw next.					[char isSeparator and: [rsw atEnd not]] whileTrue: [char := rsw next].					ws nextPut: (String with: char) , rsw upToEnd]].	^ws contents</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>accessing</category><body package="PickCell" selector="lines:">lines: anObject	lines := anObject</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>processing</category><body package="PickCell" selector="buildOn:">buildOn: array	| rs line col width |	rs := array readStream.	columns := self title collect: [:item | OrderedCollection new].	width := columns size.	[rs atEnd] whileFalse: 			[line := rs next.			line keysAndValuesDo: 					[:index :word |					col := columns at: index.					col add: word].			line size + 1 to: width				do: 					[:k |					col := columns at: k.					col add: String new]].	self checkSize.	^columns</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>accessing</category><body package="PickCell" selector="title">title	^title</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>accessing</category><body package="PickCell" selector="columns:">columns: anObject	columns := anObject</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>fileIn/Out</category><body package="PickCell" selector="readFileComma">readFileComma	| rs line items records |	fileName := Dialog requestFileName: 'choose trace file :'.	fileName isEmpty		ifFalse: 			[rs := fileName asFilename readStream.			records := OrderedCollection new.			[rs atEnd] whileFalse: 					[line := rs upTo: Character cr.					(line includes: Core.Character esc)						ifFalse: 							[items := self parseLineComma: line.							records add: items]]].	self title: records first.	records removeFirst.	self columns: records.	^records</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>fileIn/Out</category><body package="PickCell" selector="parseLineComma:">parseLineComma: line	^self parseLine: line separator: $,</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>processing</category><body package="PickCell" selector="keepColumns:">keepColumns: indexArray	| col2 title2 |	col2 := OrderedCollection new.	title2 := OrderedCollection new.	self columns keysAndValuesDo: 			[:key :val |			(indexArray includes: key)				ifTrue: 					[col2 add: val.					title2 add: (self title at: key)]].	self columns: col2.	self title: title2.				self checkSize.	^col2</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>accessing</category><body package="PickCell" selector="fileName">fileName	^fileName</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>fileIn/Out</category><body package="PickCell" selector="parseLineTab:">parseLineTab: line	^self parseLine: line separator: Character tab</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>processing</category><body package="PickCell" selector="checkSize">checkSize	| sizes |	sizes := self columns collect: [:col | col size].	sizes asSet size &gt; 1 ifTrue: [self halt]</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>accessing</category><body package="PickCell" selector="columns">columns	^columns</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>fileIn/Out</category><body package="PickCell" selector="readFile">readFile	|  rs line items records |	fileName := Dialog requestFileName: 'choose trace file :'. 	fileName isEmpty		ifFalse: 			[rs := fileName asFilename readStream.			records := OrderedCollection new.			[rs atEnd] whileFalse: 					[line := rs upTo: Character cr.					(line includes: Core.Character esc)						ifFalse: 							[items := self parseLine: line.							records add: items]]].	^records</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>processing</category><body package="PickCell" selector="removeInvalids">removeInvalids	| indexes col2 index newCol |	indexes := Set new.	(self columns at: 2)		keysAndValuesDo: [:key :val | val = 'XXX' ifTrue: [indexes add: key]].	col2 := OrderedCollection new.	self columns do: 			[:aColumn |			index := 1.			newCol := OrderedCollection new.			aColumn				keysAndValuesDo: [:k :v | (indexes includes: k) ifFalse: [newCol add: v]].			col2 add: newCol].	self columns: col2.				self checkSize.	^columns</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>fileIn/Out</category><body package="PickCell" selector="readFileTab">readFileTab	| rs line items records |	fileName := Dialog requestFileName: 'choose trace file :'.	fileName isEmpty		ifFalse: 			[rs := fileName asFilename readStream.			records := OrderedCollection new.			[rs atEnd] whileFalse: 					[line := rs upTo: Character cr.					(line includes: Core.Character esc)						ifFalse: 							[items := self parseLineTab: line.							records add: items]]].	self title: records first.	records removeFirst.	self columns: records.	^records</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>accessing</category><body package="PickCell" selector="lines">lines	^lines</body></methods><methods><class-id>AlgoDis.TraceParserForCSV</class-id> <category>printing</category><body package="PickCell" selector="printOn:">printOn: aStream	| rs word max width | 	rs := self title readStream.	[rs atEnd] whileFalse: 			[word := rs next.			aStream nextPutAll: word.			rs atEnd ifFalse: [aStream tab]].	aStream cr.	max := 0.	self columns do: [:col | max := max max: col size].	width := self columns size.	1 to: max		do: 			[:index |			self columns keysAndValuesDo: 					[:key :column |					word := column at: index .					aStream nextPutAll: word.					key &lt; width ifTrue: [aStream tab] ifFalse: [aStream cr]]]</body></methods><methods><class-id>CellView</class-id> <category>accessing</category><body package="PickCell" selector="processRectangle:">processRectangle: aRectangle	| box pixmap pixels image cells |	box := self bounds.	pixmap := Pixmap extent: box extent.	self displayOn: pixmap graphicsContext.	pixels := Set new.	image := pixmap asImage.	aRectangle origin y to: aRectangle corner y		do: 			[:yPos |			aRectangle origin x to: aRectangle corner x				do: [:xPos | pixels add: (image valueAtPoint: xPos @ yPos)]].	cells := self computeCellsFor: pixels.	^cells</body></methods><methods><class-id>CellView</class-id> <category>controller accessing</category><body package="PickCell" selector="defaultControllerClass">defaultControllerClass	^CellController</body></methods><methods><class-id>CellView</class-id> <category>accessing</category><body package="PickCell" selector="processRectangleColors:">processRectangleColors: aRectangle	| box pixmap pixels image |	box := self bounds.	pixmap := Pixmap extent: box extent.	self displayOn: pixmap graphicsContext.	pixels := Set new.	image := pixmap asImage.	aRectangle origin y to: aRectangle corner y		do: 			[:yPos |			aRectangle origin x to: aRectangle corner x				do: [:xPos | pixels add: (image valueAtPoint: xPos @ yPos)]].	^pixels</body></methods><methods><class-id>CellView</class-id> <category>accessing</category><body package="PickCell" selector="computeCellsFor:">computeCellsFor: pixels	| array5 assocArray cell point cellImage found mutation |	array5 := self model value. 	assocArray := array5 at: 3. 	cell := assocArray select: 					[:elment |					point := elment key.					cell := elment value.					cellImage := cell cellImage.					found := false.					pixels do: 							[:pixel |							cellImage pixelsDo: 									[:x :y |									pixelPoint := cellImage valueAtPoint: x @ y.									(pixels includes: pixelPoint) ifTrue: [found := true]]].					found].	cell isEmpty		ifFalse: 			[assocArray := array5 at: 3 put: cell.			self model value: array5.			self invalidate].	^cell</body></methods><methods><class-id>CellView</class-id> <category>accessing</category><body package="PickCell" selector="getPixelAt:">getPixelAt: point	|  pixel   box pixmap | 	box := self bounds.	pixmap := Pixmap extent: box extent.	self  displayOn: pixmap graphicsContext. 	pixel := pixmap asImage valueAtPoint: point.	^pixel</body></methods><methods><class-id>CellView</class-id> <category>accessing</category><body package="PickCell" selector="getPixelByCellAt:">getPixelByCellAt: point	| array5 image extent logicalPoint assocArray cell offset cellImage pixel |	array5 := self model value.	image := array5 first.	extent := image extent.	logicalPoint := point / extent + (1 @ 1).	logicalPoint := logicalPoint truncated.	assocArray := array5 at: 3.	cell := assocArray detect: [:elment | elment key = logicalPoint].	offset := point - (point / extent * extent).	cellImage := cell value cellImage.	pixel := cellImage valueAtPoint: offset.	^pixel</body></methods><methods><class-id>CellView</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize 	super initialize.	view := nil.	^self</body></methods><methods><class-id>CellView</class-id> <category>displaying</category><body package="PickCell" selector="displayOn:">displayOn: aGC	"self model value inspect."	| image aCellImage graph masterModel showSensors allPoints pointShiftedToZero theCellImage displayPoint pointsToCellImageArray |	self model value isNil		ifFalse: 			[ 			aCellImage := self model value first.			image := aCellImage.			"aGC displayImage: image at: 1 @ 1."			allPoints := self model value at: 2.			pointsToCellImageArray := self model value at: 3.			pointsToCellImageArray do: 					[:pointAsso |					pointShiftedToZero := pointAsso key - (1 @ 1).					theCellImage := pointAsso value.					displayPoint  := pointShiftedToZero scaledBy: image extent.	"+ (0 @ image height)"					aGC displayImage: theCellImage  cellImage at: displayPoint ].			showSensors := (self model value at: 6) showSensors value.			showSensors				ifTrue: 					[masterModel := self controller masterModel value.					graph := masterModel lastGraph.					graph isNil ifFalse: [graph displayOn: aGC]]]</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>processing</category><body package="PickCell" selector="getLine:">getLine: indexFromZero	| rs |	rs := self filename readStream.	5 + indexFromZero timesRepeat: [rs upTo: Character cr].	line := rs upTo: Character cr.	rs close.	^line</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="line:">line: anObject	line := anObject</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="xllcorner:">xllcorner: anObject	xllcorner := anObject</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="line">line	^line</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="yllcorner:">yllcorner: anObject	yllcorner := anObject</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="ncols:">ncols: anObject	ncols := anObject</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="cellsize">cellsize	^cellsize</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="filename">filename	^filename</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>processing</category><body package="PickCell" selector="getValueAtPoint:">getValueAtPoint: pointFromZero	| rs scanner |	rs := self filename readStream.	5 + pointFromZero y timesRepeat: [rs upTo: Character cr].	line := rs upTo: Character cr.	rs close.	rs := line readStream.	scanner := Parser new on: rs.	pointFromZero x timesRepeat: [scanner scanToken].	^scanner scanToken</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="nrows">nrows	^nrows</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	filename := nil.	ncols := nil.	nrows := nil.	xllcorner := nil.	yllcorner := nil.	cellsize := nil.	line := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="filename:">filename: anObject	filename := anObject</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="ncols">ncols	^ncols</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="xllcorner">xllcorner	^xllcorner</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>processing</category><body package="PickCell" selector="coordToPoint:">coordToPoint: lonLat	| lon lat x y deltaEnX deltaEnY |	lon := lonLat first.	lat := lonLat at: 2.	deltaEnX := lon - self xllcorner.	x := (deltaEnX / cellsize) rounded.	deltaEnY := lat - self yllcorner.	y := (deltaEnY / cellsize) rounded.	y := (self nrows - y) rounded.	^x @ y</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="nrows:">nrows: anObject	nrows := anObject</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>processing</category><body package="PickCell" selector="getValueAtCoord:">getValueAtCoord: lonLatArray	| rs pointFromZero token | 	"compute offset ingraphic window, origin at top lefts"	pointFromZero := self  coordToPoint: lonLatArray.	rs := self filename readStream. 	5 + pointFromZero y timesRepeat: [rs upTo: Character cr].	line := rs upTo: Character cr.	rs close.	rs := line readStream.	rs next. " discard a space, then skip x values"	pointFromZero x timesRepeat: [token := rs upTo: Character space].	token := rs upTo: Character space.	^token asNumber</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="cellsize:">cellsize: anObject	cellsize := anObject</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>processing</category><body package="PickCell" selector="getInfo">getInfo	| rs scanner |	rs := self filename readStream.	rs upTo: Character space.	self ncols: (rs upTo: Character cr) asNumber.	rs upTo: Character space.	self nrows: (rs upTo: Character cr) asNumber.	rs upTo: Character space.	self xllcorner: (rs upTo: Character cr) asNumber.	rs upTo: Character space.	self yllcorner: (rs upTo: Character cr) asNumber.	rs upTo: Character space.	self cellsize: (rs upTo: Character cr) asNumber.	rs close</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>accessing</category><body package="PickCell" selector="yllcorner">yllcorner	^yllcorner</body></methods><methods><class-id>AlgoDis.GDALReader</class-id> <category>processing</category><body package="PickCell" selector="pointToCoord:">pointToCoord: pointFromZero	| lon lat |	lon := self xllcorner + (pointFromZero x * self cellsize).	lat := self yllcorner+ ((self nrows - pointFromZero y) * self cellsize).	^Array with: lon with: lat</body></methods><methods><class-id>UIKnownUrls</class-id> <category>accessing</category><body package="PickCell" selector="knownUrl:">knownUrl: anObject	knownUrl := anObject</body></methods><methods><class-id>UIKnownUrls</class-id> <category>fileIn/Out</category><body package="PickCell" selector="doSaveFile">doSaveFile	| fn cancel ws ku | 	fn := Dialog requestNewFileName: 'name a file' default: '*.txt'.	cancel := fn isEmpty.	cancel		ifFalse: 			[ws := fn asFilename writeStream.			ws isWritable ifFalse: [^Dialog warn: 'cannot write ' , fn].			ku := KnownMapUrl knownUrls.			ku keys asSortedCollection do: 					[:key |					ws						nextPutAll: key asString;						nextPutAll: '-&gt;'.					ws						nextPutAll: (ku at: key) asString;						cr].			ws close]</body></methods><methods><class-id>UIKnownUrls</class-id> <category>actions</category><body package="PickCell" selector="doSave">doSave	"This stub method was generated by UIDefiner"	| noms |	noms := self lesNoms list.	self lesNoms list: noms</body></methods><methods><class-id>UIKnownUrls</class-id> <category>changes</category><body package="PickCell" selector="enableSave">enableSave	| saveButton |	saveButton := self builder componentAt: #SaveButton.	saveButton enable</body></methods><methods><class-id>UIKnownUrls</class-id> <category>accessing</category><body package="PickCell" selector="closeVH:">closeVH: anObject	closeVH := anObject</body></methods><methods><class-id>UIKnownUrls</class-id> <category>interface closing</category><body package="PickCell" selector="closeRequest">closeRequest	self closeVH: true asValue.	super closeRequest.</body></methods><methods><class-id>UIKnownUrls</class-id> <category>aspects</category><body package="PickCell" selector="leUrl">leUrl	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leUrl isNil		ifTrue:			[leUrl := String new asValue]		ifFalse:			[leUrl]</body></methods><methods><class-id>UIKnownUrls</class-id> <category>accessing</category><body package="PickCell" selector="knownUrl">knownUrl	^knownUrl</body></methods><methods><class-id>UIKnownUrls</class-id> <category>changes</category><body package="PickCell" selector="disableSave">disableSave	| saveButton |	saveButton := self builder componentAt: #SaveButton.	saveButton disable</body></methods><methods><class-id>UIKnownUrls</class-id> <category>private</category><body package="PickCell" selector="getUrlSortedList:">getUrlSortedList: ku	| shortNames values |	shortNames := ku keys asSortedCollection.	values := shortNames collect: [:name | ku at: name].	^values</body></methods><methods><class-id>UIKnownUrls</class-id> <category>private</category><body package="PickCell" selector="addShortName:url:">addShortName: aShortName url: anUrl	| ku |	(aShortName isEmpty not and: [anUrl isEmpty not])		ifTrue: 			[ku := KnownMapUrl knownUrls.			ku at: aShortName put: anUrl.			self 				reload]</body></methods><methods><class-id>UIKnownUrls</class-id> <category>aspects</category><body package="PickCell" selector="lesNoms">lesNoms	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lesNoms isNil		ifTrue:			[lesNoms := SelectionInList new]		ifFalse:			[lesNoms]</body></methods><methods><class-id>UIKnownUrls</class-id> <category>changes</category><body package="PickCell" selector="changedUrl">changedUrl	| selectionIndex shortName |	selectionIndex := self laListe selectionIndex.	self lesNoms selectionIndex: selectionIndex.	selectionIndex &gt; 0		ifTrue: 			[shortName := self lesNoms selection.			url := self laListe list at: selectionIndex.			self leShortName value: shortName.			self leUrl value: url.			self knownUrl value: self getKnownUrl.			self enableSave]		ifFalse: [self disableSave]</body></methods><methods><class-id>UIKnownUrls</class-id> <category>initialize-release</category><body package="PickCell" selector="reload">reload	| ku |	ku := KnownMapUrl knownUrls.	ku isEmpty		ifFalse: 			[self lesNoms list: ku keys asSortedCollection.			self laListe list: (self getUrlSortedList: ku)]</body></methods><methods><class-id>UIKnownUrls</class-id> <category>actions</category><body package="PickCell" selector="doDelete">doDelete	"This stub method was generated by UIDefiner"	| selectionIndex noms list |	selectionIndex := self lesNoms selectionIndex.	selectionIndex &gt; 0		ifTrue: 			[noms := self lesNoms list.			noms removeAtIndex: selectionIndex.			list := self laListe list.			list removeAtIndex: selectionIndex.			self lesNoms list: noms. 			self laListe  list: list. 			self save   ]</body></methods><methods><class-id>UIKnownUrls</class-id> <category>actions</category><body package="PickCell" selector="doQuit">doQuit	"This stub method was generated by UIDefiner"	self closeRequest</body></methods><methods><class-id>UIKnownUrls</class-id> <category>aspects</category><body package="PickCell" selector="laListe">laListe	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^laListe isNil		ifTrue:			[laListe := SelectionInList new]		ifFalse:			[laListe]</body></methods><methods><class-id>UIKnownUrls</class-id> <category>actions</category><body package="PickCell" selector="doCancel">doCancel	"This stub method was generated by UIDefiner"	self knownUrl value: nil.	self closeRequest</body></methods><methods><class-id>UIKnownUrls</class-id> <category>private</category><body package="PickCell" selector="save">save 	| newKU |	KnownMapUrl reset. 	newKU := KnownMapUrl knownUrls.	self lesNoms list with: self laListe list		do: [:eachNom :eachUrl | newKU at: eachNom put: eachUrl].	self reload.	self lesNoms selectionIndex: 0.	self laListe selectionIndex: 0</body></methods><methods><class-id>UIKnownUrls</class-id> <category>fileIn/Out</category><body package="PickCell" selector="doLoadFile">doLoadFile	| fn cancel ku rs newKU line rsLine nom anUrl |	fn := Dialog requestFileName: 'Choose a file' default: '*.txt' version: #old.	cancel := fn isEmpty.	cancel		ifFalse: 			[rs := fn asFilename readStream.			newKU := Dictionary new.			rs isReadable ifFalse: [^Dialog warn: 'cannot read ' , fn].			[rs atEnd] whileFalse: 					[line := rs upTo: Character cr.					line isEmpty						ifFalse: 							[rsLine := line readStream.							nom := rsLine upTo: $-.							rsLine next.							anUrl := rsLine upToEnd.							newKU at: nom put: anUrl]].			ku := KnownMapUrl reset.			ku := KnownMapUrl knownUrls.			newKU keys asSortedCollection do: 					[:key | 					ku at: key put: (newKU at: key)].								self reload]</body></methods><methods><class-id>UIKnownUrls</class-id> <category>changes</category><body package="PickCell" selector="getKnownUrl">getKnownUrl	^KnownMapUrl url: self leUrl value shortName: self leShortName value</body></methods><methods><class-id>UIKnownUrls</class-id> <category>actions</category><body package="PickCell" selector="doAdd">doAdd	"This stub method was generated by UIDefiner"	| aShortName anUrl | 	aShortName := self leShortName value.	anUrl := self leUrl value.	(aShortName isEmpty not and: [anUrl isEmpty not])		ifTrue: 			[ 			self addShortName: aShortName url: anUrl.			self reload]</body></methods><methods><class-id>UIKnownUrls</class-id> <category>accessing</category><body package="PickCell" selector="closeVH">closeVH	^closeVH</body></methods><methods><class-id>UIKnownUrls</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	| ku |	ku := KnownMapUrl knownUrls.	ku isEmpty		ifFalse: 			[self lesNoms list: ku keys asSortedCollection.			self laListe list: (self getUrlSortedList: ku)].	self lesNoms selectionIndexHolder onChangeSend: #changedNom to: self.	self laListe selectionIndexHolder onChangeSend: #changedUrl to: self.	self knownUrl: nil asValue.	self closeVH: false asValue</body></methods><methods><class-id>UIKnownUrls</class-id> <category>aspects</category><body package="PickCell" selector="leShortName">leShortName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leShortName isNil		ifTrue:			[leShortName := String new asValue]		ifFalse:			[leShortName]</body></methods><methods><class-id>UIKnownUrls</class-id> <category>changes</category><body package="PickCell" selector="changedList">changedList	| newKU |	KnownMapUrl reset.	newKU := KnownMapUrl knownUrls.	self lesNoms list with: self laListe list		do: [:eachNom :eachUrl | newKU at: eachNom put: eachUrl].	self reload.	self lesNoms selectionIndex: 0.	self laListe selectionIndex: 0</body></methods><methods><class-id>UIKnownUrls</class-id> <category>changes</category><body package="PickCell" selector="changedNom">changedNom	| selectionIndex shortName |	selectionIndex := self lesNoms selectionIndex.	self laListe selectionIndex: selectionIndex.	selectionIndex &gt; 0		ifTrue: 			[shortName := self lesNoms selection.			url := self laListe list at: selectionIndex.			self leShortName value: shortName.			self leUrl value: url.			self knownUrl value: self getKnownUrl.			self enableSave]		ifFalse: [self disableSave]</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="distanceSet">distanceSet	^distanceSet</body></methods><methods><class-id>Mapsv0</class-id> <category>fileIn/Out</category><body package="Mapsv0" selector="fileOutAsGpxFile:">fileOutAsGpxFile: aFilenameOrStringself colNodes do: [:node | ]</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="colPickedNodesVH:">colPickedNodesVH: anObject	colPickedNodesVH := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="distanceSet:">distanceSet: anObject	distanceSet := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="xmlMetadata:">xmlMetadata: anObject	xmlMetadata := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="networkGraph">networkGraph	^networkGraph</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="dicoNodeDistance:">dicoNodeDistance: anObject	dicoNodeDistance := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="dicoNodeDistance">dicoNodeDistance	^dicoNodeDistance</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="xmlMetadata">xmlMetadata	^xmlMetadata</body></methods><methods><class-id>Mapsv0</class-id> <category>computing</category><body package="Mapsv0" selector="selectReachedNodes">selectReachedNodes	dicoReachedNodes := Dictionary new: colNodes size.	dicoNodeDistance keysAndValuesDo: 			[:node :sortedDist |			| r |			r := sortedDist select: [:n | n &lt;= node range].			dicoReachedNodes at: node put: r]</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="nodesPx">nodesPx	^nodesPx</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="colPickedNodesVH">colPickedNodesVH	colPickedNodesVH isNil ifTrue: [colPickedNodesVH := OrderedCollection new asValue].	^colPickedNodesVH</body></methods><methods><class-id>Mapsv0</class-id> <category>fileIn/Out</category><body package="Mapsv0" selector="asGpxDocument">asGpxDocument	| nodesKml xmlDoc xmlRoot |	nodesKml := self colNodes collect: [:node | node asXmlElement].	nodesKml addFirst: self xmlMetadata.	"xmlDocType := XML.DocumentType new."	xmlDoc := XML.Document new.	xmlRoot := XML.Element				tag: 'gpx'				attributes: (Array with: (XML.Attribute name: 'creator' value: 'Smalltalk Map') with: (XML.Attribute name: 'version' value: '1.0'))				elements: nodesKml asArray.	xmlDoc addNode: xmlRoot.	^xmlDoc</body></methods><methods><class-id>Mapsv0</class-id> <category>computing</category><body package="Mapsv0" selector="sortDistanceByNode">sortDistanceByNode	dicoNodeDistance := Dictionary new: colNodes size.	"colNodes do: 			[:node |			| dist |			dist := distanceSet select: [:n | n includes: node].			dist := dist asSortedCollection.			dicoNodeDistance at: node put: dist]"	distanceSet do: 			[:dist |			(dicoNodeDistance at: dist nodeA ifAbsentPut: [SortedCollection new: colNodes size]) add: dist.			(dicoNodeDistance at: dist nodeB ifAbsentPut: [SortedCollection new: colNodes size]) add: dist]</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="pixelPerKm">pixelPerKm	^pixelPerKm</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="colNodes">colNodes	^colNodes</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="matrixTile">matrixTile	^matrixTile</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="range:">range: anObject	range := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="pixelPerKmAt:">pixelPerKmAt: aZoom	^self pixelPerKm at: aZoom ifAbsent: [100]</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="pixelRange">pixelRange	^(self pixelPerKmAt: (self matrixTile at: #zoom)) * range / 1000</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="colNodes:">colNodes: anObject	colNodes := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="pickModelTmp:">pickModelTmp: anObject	pickModelTmp := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>computing</category><body package="Mapsv0" selector="computeDistance">computeDistance	| size s |	size := colNodes size.	s := OrderedCollection new: size * (size - 1) / 2.	size isNil ifTrue: [^self].	colNodes keysAndValuesDo: 			[:key :value |			key + 1 to: size				do: 					[:i |					| nd |					nd := NetworkDistance distanceNode: value withNode: (colNodes at: i).					s add: nd]].	distanceSet := s</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="matrixTile:">matrixTile: anObject	matrixTile := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>computing</category><body package="Mapsv0" selector="titleSize">titleSize	^256</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="dicoReachedNodes">dicoReachedNodes	^dicoReachedNodes</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="networkGraph:">networkGraph: anObject	networkGraph := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	matrixTile := Dictionary withKeysAndValues: #(#x 0 #y 0 #zoom 0).	self nodesPx: OrderedCollection new.	self nodesGPS: OrderedCollection new.	"self pickModelTmp: AlgoDis.PickModel new."	self pickModelTmp: AlgoDis.PickMobileModel new.	self pixelPerKm: (Dictionary				withKeysAndValues: #(0 0.0078125 1 0.015625 2 0.03125 3 0.0625 4 0.125 5 0.25 6 0.5 7 1 8 2 9 5 10 9 11 18 12 36 13 72 14 144 15 288 16 575 17 1150 18 2300 19 4600 20 9200 21 18400)).	distanceSet := OrderedCollection new.	dicoNodeDistance := Dictionary new.	colNodes := OrderedCollection new.	^self</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="range">range	^range</body></methods><methods><class-id>Mapsv0</class-id> <category>computing</category><body package="Mapsv0" selector="originOffset">originOffset	^(matrixTile at: #x) @ (matrixTile at: #y) scaledBy: 256@256</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="nodesPx:">nodesPx: anObject	nodesPx := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="pickModelTmp">pickModelTmp	^pickModelTmp</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="nodesGPS">nodesGPS	^nodesGPS</body></methods><methods><class-id>Mapsv0</class-id> <category>computing</category><body package="Mapsv0" selector="updateGeneratorsWith:">updateGeneratorsWith: net	| uiGenerators connectivity fName ws cocoResteLa aGenerator |	uiGenerators := AlgoDis.UINetworkGeometry allInstances.	uiGenerators isEmpty		ifTrue: 			[cocoResteLa := AlgoDis.UINetworkGeometry new.			uiGenerators := Array with: cocoResteLa].	aGenerator := uiGenerators first.	connectivity := net buildNetworkLocalized.	aGenerator doOccam value: true.	aGenerator doBuildDotFile value: true.	aGenerator forCuda value: true.	aGenerator theNbSystems value: net points size.	aGenerator theRadius value: self pickModelTmp portee value.	aGenerator theSize value: self pickModelTmp bounds width.	aGenerator doGraphic value: false.	aGenerator leCode value: connectivity printString.	fName := Mapsv0Utilities defaultFileNetName asFilename.	fName exists ifTrue: [fName isWritable ifFalse: [^Dialog warn: 'cannot write ' , fName]].	ws := fName asFilename writeStream.	ws nextPutAll: aGenerator leCode value.	ws close.	aGenerator doGenerate: false</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="dicoReachedNodes:">dicoReachedNodes: anObject	dicoReachedNodes := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="nodesGPS:">nodesGPS: anObject	nodesGPS := anObject</body></methods><methods><class-id>Mapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="pixelPerKm:">pixelPerKm: anObject	pixelPerKm := anObject</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>events</category><body package="Mapsv0" selector="mouseMovedEvent:">mouseMovedEvent: aMouseMovedEvent	"Capte les mouvements de la souris."	"Cursor crossHair show."	| position |	position := self sensor cursorPointFor: aMouseMovedEvent.	self application labelPosVH value: position.	self application componentAtPoint: position</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>events</category><body package="Mapsv0" selector="redButtonPressedEvent:">redButtonPressedEvent: aRedButtonPressedEvent	| cursorPoint |	cursorPoint := self sensor cursorPointFor: aRedButtonPressedEvent.	"self zoomIn: cursorPoint"	self application clicPointVH value: cursorPoint</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>events</category><body package="Mapsv0" selector="yellowButtonPressedEvent:">yellowButtonPressedEvent: aYellowButtonPressedEvent	"Start drawing a new line when the &lt;Select&gt; button is pressed.	Keep showing the crosshair when pressed."	self application zoom value = self application minZoom ifTrue: [^self].	self application doZoomOut.	self application doViewTile</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>events</category><body package="Mapsv0" selector="enterEventSaved:">enterEventSaved: anEnterEvent	"Start drawing a new line when the &lt;Select&gt; button is pressed.	Keep showing the crosshair when pressed."	| processName appli pickModel con nodeDictionary dataList pos |	appli := self application.	 	processName := appli nodePName value.	processName isEmpty ifTrue: [^nil].	processName := appli cleanUpProcessName: processName.	pickModel := appli googleModel value pickModelTmp.	self halt.	(pickModel isNil and: [(appli googleModel value matrixTile at: #x) isNil not])		ifFalse: 			[con := pickModel connectivity.			nodeDictionary := con nodeDictionary.			dataList := nodeDictionary at: processName ifAbsent: [^nil].			pos := dataList at: 2.			pos translatedBy: appli googleModel value originOffset negated.			processName isNil				ifFalse: 					[nodeDictionary at: processName ifAbsent: ['none'].					(Delay forSeconds: 5) wait]].	appli halt</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>events</category><body package="Mapsv0" selector="waitClickButton">waitClickButton	^Dialog warn: 'toto'</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>events</category><body package="Mapsv0" selector="blueButtonPressedEvent:">blueButtonPressedEvent: aYellowButtonPressedEvent	"Start drawing a new line when the &lt;Select&gt; button is pressed.	Keep showing the crosshair when pressed."	self application zoom value = self application minZoom ifTrue: [^self].	self application doZoomOut.	self application doViewTile</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>accessing</category><body package="Mapsv0" selector="application">application	^application</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>computing</category><body package="Mapsv0" selector="zoomIn:">zoomIn: cursorPoint	"Start drawing a new line when the &lt;Select&gt; button is pressed.	Keep showing the crosshair when pressed."	| point clickedX clickedY xTile128 yTile128 centerTile128 vb nbXtiles256 nbYtiles256 centerTile256 xTile256 yTile256 q |	self application zoom value = self application maxZoom ifTrue: [^self].	point := cursorPoint. 	clickedX := point x.	clickedY := point y.	"zoomed tile display zone"	vb := self application tileView viewBounds.	nbXtiles256 := (vb x / 256) rounded.	nbYtiles256 := (vb y / 256) rounded.	centerTile256 := (nbXtiles256 // 2) @ (nbYtiles256 // 2).	centerTile128 := (centerTile256 x * 2) @ (centerTile256 y * 2).	"clicked tile"	xTile128 := clickedX // 128.	yTile128 := clickedY // 128.	xTile256 := (clickedX // 256) .	yTile256 := (clickedY // 256) .	q := self quadrant: point - ((vb x // 256) @ (vb y // 256)).	"clicked tile desired position"	xTile128 &gt; centerTile128 x ifTrue: [centerTile128 x] ifFalse: [centerTile128 x - 1].	yTile128 &gt; centerTile128 y ifTrue: [centerTile128 y] ifFalse: [centerTile128 y - 1].	"offset"	self application		zoomTile: xTile256 @ yTile256		quadrant: q		displayAt: ((clickedX // 256) rounded) @ ((clickedX // 256) rounded).	"self halt."	self application doViewTile</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>accessing</category><body package="Mapsv0" selector="application:">application: anObject	application := anObject</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>computing</category><body package="Mapsv0" selector="quadrant:">quadrant: aPoint	| x y |	x := aPoint x.	y := aPoint y.	x &gt; 127 ifTrue: [y &gt; 127 ifTrue: [^#doZoomInDownRight] ifFalse: [^#doZoomInUpRight]] ifFalse: [y &gt; 127 ifTrue: [^#doZoomInDownLeft] ifFalse: [^#doZoomInUpLeft]]</body></methods><methods><class-id>Mapsv0Controller</class-id> <category>events</category><body package="Mapsv0" selector="redButtonPressedEvent1:">redButtonPressedEvent1: aRedButtonPressedEvent	"Start drawing a new line when the &lt;Select&gt; button is pressed.	Keep showing the crosshair when pressed."	| point clickedX clickedY xTile128 yTile128 centerTile128 vb nbXtiles256 nbYtiles256 centerTile256 xZoomedTile128 yZoomedTile128 xTile256 yTile256 q xZoomedTile256 yZoomedTile256 |	self application zoom value = self application maxZoom ifTrue: [^self].	point := self sensor cursorPointFor: aRedButtonPressedEvent.	clickedX := point x.	clickedY := point y.	"zoomed tile display zone"	vb := self application tileView viewBounds.	nbXtiles256 := (vb x / 256) rounded.	nbYtiles256 := (vb y / 256) rounded.	centerTile256 := (nbXtiles256 // 2) @ (nbYtiles256 // 2).	centerTile128 := (centerTile256 x * 2) @ (centerTile256 y * 2).	"clicked tile"	xTile128 := clickedX // 128.	yTile128 := clickedY // 128.	xTile256 := clickedX // 256.	yTile256 := clickedY // 256.	q := self quadrant: point - ((vb x // 256) @ (vb y // 256)).	"clicked tile desired position"	xTile128 &gt; centerTile128 x ifTrue: [xZoomedTile128 := centerTile128 x] ifFalse: [xZoomedTile128 := centerTile128 x - 1].	yTile128 &gt; centerTile128 y ifTrue: [yZoomedTile128 := centerTile128 y] ifFalse: [yZoomedTile128 := centerTile128 y - 1].	"zoomed tile position"	xZoomedTile256 := xZoomedTile128 // 2.	yZoomedTile256 := yZoomedTile128 // 2.	"offset"	self application		zoomTile: xTile256 @ yTile256		quadrant: q		displayAt: xZoomedTile256 @ yZoomedTile256.	"self halt."	self application doViewTile</body></methods><methods><class-id>Mapsv0View</class-id> <category>accessing</category><body package="Mapsv0" selector="googleMapTileCache:">googleMapTileCache: anObject	googleMapTileCache := anObject</body></methods><methods><class-id>Mapsv0View</class-id> <category>accessing</category><body package="Mapsv0" selector="application:">application: anObject	application := anObject</body></methods><methods><class-id>Mapsv0View</class-id> <category>displaying</category><body package="Mapsv0" selector="displayMarkAt:">displayMarkAt: aPoint	| bounds nbX nbY c |	bounds := self computeBounds.	nbX := bounds x.	nbY := bounds y.	c := Circle center: aPoint radius: 10.	aPoint isNil ifFalse: [c asStroker displayAt: aPoint + (self model value originOffset * -1)]</body></methods><methods><class-id>Mapsv0View</class-id> <category>displaying</category><body package="Mapsv0" selector="displayMapOn:">displayMapOn: aGraphicsContext	| bounds nbX nbY tileInfo tx ty tzoom graph |	bounds := self computeBounds.	nbX := bounds x.	nbY := bounds y.	tileInfo := self model value matrixTile.	tx := tileInfo at: #x ifAbsent: [^nil].	ty := tileInfo at: #y ifAbsent: [^nil].	(tx isNil or: [ty isNil]) ifTrue: [^nil].	tzoom := tileInfo at: #zoom ifAbsent: [^nil]. 	"aGraphicsContext translateBy: (translation * -1)."	0 to: nbY		do: 			[:ordonnee |			0 to: nbX				do: 					[:abscisse |					| gt |					gt := self googleMapTileCache								x: tx + abscisse								y: ty + ordonnee								zoom: tzoom.					"[gt displayOn: aGC at: (abscisse * 256) @ (ordonnee * 256)] fork"					"gt displayOn: aGraphicsContext at: (abscisse * 256) @ (ordonnee * 256)."					gt displayOn: aGraphicsContext at: (abscisse * 256) @ (ordonnee * 256)]].	"lp := self application lesPointsVH value."	"lp isEmpty ifFalse: [lp do: [:elt | elt displayOn: aGC]]."	graph := self model value pickModelTmp lastGraph.	graph isNil ifFalse: [graph displayOn: aGraphicsContext	"at: self model value originOffset * -1"]	"	aGC lineWidth: 1.	aGC paint: ColorValue black."	"colPickNodes := self model value colPickedNodesVH value."	"colPickNodes := self model value colNodes."	"origin := (tx * 256) @ (ty * 256)."	"self halt."	"colPickNodes do: [:node | node displayOn: aGC origin: origin]."	"self model value distanceSet do: [:elt | elt displayOn: aGC origin: origin]"</body></methods><methods><class-id>Mapsv0View</class-id> <category>accessing</category><body package="Mapsv0" selector="application">application	^application</body></methods><methods><class-id>Mapsv0View</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	self tileMatrix: Dictionary new.	self googleMapTileCache: Mapsv0TileCache new.	^self</body></methods><methods><class-id>Mapsv0View</class-id> <category>accessing</category><body package="Mapsv0" selector="tileMatrix:">tileMatrix: anObject	tileMatrix := anObject</body></methods><methods><class-id>Mapsv0View</class-id> <category>accessing</category><body package="Mapsv0" selector="computeBounds128">computeBounds128	| comp bounds x y nbX nbY |	comp := self application builder componentAt: #TileViewHolder.	bounds := comp component bounds extent.	x := bounds x.	y := bounds y.	nbX := (x / 128) rounded.	nbY := (y / 128) rounded.	^nbX @ nbY</body></methods><methods><class-id>Mapsv0View</class-id> <category>accessing</category><body package="Mapsv0" selector="tileMatrix">tileMatrix	^tileMatrix</body></methods><methods><class-id>Mapsv0View</class-id> <category>displaying</category><body package="Mapsv0" selector="displayOn:">displayOn: aGraphicsContext	| bounds nbX nbY tileInfo tx ty tzoom graph lp colPickNodes translation |	bounds := self computeBounds.	nbX := bounds x.	nbY := bounds y.	tileInfo := self model value matrixTile.	tx := tileInfo at: #x ifAbsent: [^nil].	ty := tileInfo at: #y ifAbsent: [^nil].	(tx isNil or: [ty isNil]) ifTrue: [^nil].	tzoom := tileInfo at: #zoom ifAbsent: [^nil].	translation := (tx * 256) @ (ty * 256).	"aGraphicsContext translateBy: (translation * -1).""aGraphicsContext translateBy: self model value originOffset."	0 to: nbY		do: 			[:ordonnee |			0 to: nbX				do: 					[:abscisse |					| gt |					gt := self googleMapTileCache								x: tx + abscisse								y: ty + ordonnee								zoom: tzoom.					"[gt displayOn: aGC at: (abscisse * 256) @ (ordonnee * 256)] fork"					"gt displayOn: aGraphicsContext at: (abscisse * 256) @ (ordonnee * 256)."					gt displayOn: aGraphicsContext at: (abscisse * 256) @ (ordonnee * 256)]].	"lp := self application lesPointsVH value."	"lp isEmpty ifFalse: [lp do: [:elt | elt displayOn: aGC]]."	"aGraphicsContext translateBy: translation."	"aGraphicsContext translateBy: self model value originOffset."	"self model value colNodes do: [:node | node displayOn: aGraphicsContext]."	graph := self model value pickModelTmp lastGraph.	graph isNil ifFalse: [		graph displayOn: aGraphicsContext	 at: self model value originOffset * -1]	"self inspect."	"	aGC lineWidth: 1.	aGC paint: ColorValue black."	"colPickNodes := self model value colPickedNodesVH value."	"colPickNodes := self model value colNodes."	"origin := (tx * 256) @ (ty * 256)."	"self halt."	"colPickNodes do: [:node | node displayOn: aGC origin: origin]."	"self model value distanceSet do: [:elt | elt displayOn: aGC origin: origin]"</body></methods><methods><class-id>Mapsv0View</class-id> <category>accessing</category><body package="Mapsv0" selector="computeBounds">computeBounds	| comp bounds x y nbX nbY |	comp := self application builder componentAt: #TileViewHolder.	bounds := comp component bounds extent.	x := bounds x.	y := bounds y.	nbX := (x / 256) ceiling.	nbY := (y / 256) ceiling.	^nbX @ nbY</body></methods><methods><class-id>Mapsv0View</class-id> <category>accessing</category><body package="Mapsv0" selector="googleMapTileCache">googleMapTileCache	^googleMapTileCache</body></methods><methods><class-id>Mapsv0View</class-id> <category>accessing</category><body package="Mapsv0" selector="viewBounds">viewBounds	| comp bounds x y |	comp := self application builder componentAt: #TileViewHolder.	bounds := comp component bounds extent.	x := bounds x.	y := bounds y.	^x @ y</body></methods><methods><class-id>NetworkDistance</class-id> <category>comparing</category><body package="Mapsv0" selector="&lt;">&lt; aNetworkDistance	"^distance &lt; aNetworkDistance distance"	^aNetworkDistance &gt;= distance</body></methods><methods><class-id>NetworkDistance</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>NetworkDistance</class-id> <category>comparing</category><body package="Mapsv0" selector="&gt;">&gt; aNetworkDistance	^aNetworkDistance &lt; distance</body></methods><methods><class-id>NetworkDistance</class-id> <category>comparing</category><body package="Mapsv0" selector="&lt;=">&lt;= aNetworkDistance	^(distance &gt; aNetworkDistance) not</body></methods><methods><class-id>NetworkDistance</class-id> <category>accessing</category><body package="Mapsv0" selector="nodeB:">nodeB: anObject	nodeB := anObject</body></methods><methods><class-id>NetworkDistance</class-id> <category>accessing</category><body package="Mapsv0" selector="nodeA">nodeA	^nodeA</body></methods><methods><class-id>NetworkDistance</class-id> <category>displaying</category><body package="Mapsv0" selector="displayOn:origin:">displayOn: aGraphicsContext origin: aPoint	| pA pB |	pA := nodeA pos pixel.	pA := pA - aPoint.	pB := nodeB pos pixel.	pB := pB - aPoint.	aGraphicsContext displayLineFrom: pA to: pB</body></methods><methods><class-id>NetworkDistance</class-id> <category>accessing</category><body package="Mapsv0" selector="nodeB">nodeB	^nodeB</body></methods><methods><class-id>NetworkDistance</class-id> <category>accessing</category><body package="Mapsv0" selector="distance:">distance: anObject	distance := anObject</body></methods><methods><class-id>NetworkDistance</class-id> <category>printing</category><body package="Mapsv0" selector="printOn:">printOn: aStream	distance printOn: aStream</body></methods><methods><class-id>NetworkDistance</class-id> <category>accessing</category><body package="Mapsv0" selector="distance">distance	^distance</body></methods><methods><class-id>NetworkDistance</class-id> <category>accessing</category><body package="Mapsv0" selector="nodeA:">nodeA: anObject	nodeA := anObject</body></methods><methods><class-id>NetworkDistance</class-id> <category>comparing</category><body package="Mapsv0" selector="equals:">equals: aNetworkDistance	^(aNetworkDistance &lt; distance or: [NetworkDistance &gt; distance]) not</body></methods><methods><class-id>NetworkDistance</class-id> <category>private</category><body package="Mapsv0" selector="computeDistance">computeDistance	distance := nodeA dist: nodeB</body></methods><methods><class-id>NetworkDistance</class-id> <category>testing</category><body package="Mapsv0" selector="remoteNode:">remoteNode: aNode	aNode = nodeA ifTrue: [^nodeB] ifFalse: [^nodeA]</body></methods><methods><class-id>NetworkDistance</class-id> <category>testing</category><body package="Mapsv0" selector="includes:">includes: aNode	^aNode = nodeA or: [aNode = nodeB]</body></methods><methods><class-id>NetworkDistance</class-id> <category>comparing</category><body package="Mapsv0" selector="&gt;=">&gt;= aNetworkDistance	^(distance &lt; aNetworkDistance) not</body></methods><methods><class-id>NetworkDistance</class-id> <category>comparing</category><body package="Mapsv0" selector="=">= aNetworkDistance	^(aNetworkDistance includes: nodeA)		and: [aNetworkDistance includes: nodeB]</body></methods><methods><class-id>Mapsv0Proxy</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Mapsv0Utilities</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="latitude">latitude	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^latitude isNil		ifTrue:			[latitude := 0 asValue]		ifFalse:			[latitude]</body></methods><methods><class-id>UIMapsv0</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initializeDrawingParameters">initializeDrawingParameters	drawingParameters := DrawingParameters new.	self doDisplayRange onChangeSend: #changeDrawingParameters to: self.	self doDisplayNetwork onChangeSend: #changeDrawingParameters to: self.	self doDisplayNodeName onChangeSend: #changeDrawingParameters to: self.	self range onChangeSend: #changeRange to: self</body></methods><methods><class-id>UIMapsv0</class-id> <category>constant</category><body package="Mapsv0" selector="displaySize">displaySize	^2 @ 2</body></methods><methods><class-id>UIMapsv0</class-id> <category>converting</category><body package="Mapsv0" selector="nameForRelativePoint:">nameForRelativePoint: aPoint	| pickModel pointDictionary aProcessName absolutePoint |	absolutePoint := self relativePointFor: aPoint.	pickModel := self googleModel value pickModelTmp.	pointDictionary := pickModel pointDictionary.	pointDictionary isNil ifTrue: [^nil].	aProcessName := pointDictionary at: absolutePoint ifAbsent: [^nil].	^aProcessName</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doChooseRangeColor">doChooseRangeColor	"This stub method was generated by UIDefiner"	self doSelectionColorFor: #outerCircleColor updateButton: #ChooseRangeColor</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions-moving</category><body package="Mapsv0" selector="doChangeUpLeftTile">doChangeUpLeftTile	"This stub method was generated by UIDefiner"	self xTile value: self xTile value - 1.	self yTile value: self yTile value - 1.	self doViewTile</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions-moving</category><body package="Mapsv0" selector="doChangeRightTile">doChangeRightTile	"This stub method was generated by UIDefiner"	self xTile value: self xTile value + 1.	self doViewTile</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions-moving</category><body package="Mapsv0" selector="doChangeDownLeftTile">doChangeDownLeftTile	"This stub method was generated by UIDefiner"	self xTile value: self xTile value - 1.	self yTile value: self yTile value + 1.	self doViewTile</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="changeMousePositionFromName">changeMousePositionFromName	| aNodeName processName pointPos relPos |	processName := self nodePName value.	processName isEmpty ifTrue: [^nil].	aNodeName := self cleanUpProcessName: processName.	aNodeName isEmpty		ifFalse: 			[pointPos := self pointFromName: aNodeName.			relPos := pointPos translatedBy: googleModel value originOffset negated.			tileView controller activate.			tileView controller sensor cursorPoint: relPos.			self componentAtPoint: relPos]</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doZoomInOffset:">doZoomInOffset: offset	self zoom retractInterestsFor: self.	self doZoomIn.	self changeZoom.	self doOffsetTile: offset.	self zoom onChangeSend: #changeZoom to: self</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doQuit">doQuit	"This stub method was generated by UIDefiner"	self closeRequest.	"Dialog warn: 'Click the ''x'' in the upper right corner!'"</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doPickPoint">doPickPoint	"This stub method was generated by UIDefiner"	| lon lat meter currentTileDico currentZoom currentTileX currentTileY pixel mapX mapY circle filledCircle comp strokedCircle nodePos node |	lon := self longitude value.	lat := self latitude value "negated".	"rr"	currentTileDico := googleModel value matrixTile.	currentZoom := currentTileDico at: #zoom.	"currentTileX := currentTileDico at: #x.	currentTileY := currentTileDico at: #y."	"mapX := pixel x - (currentTileX * 256).	mapY := pixel y - (currentTileY * 256)."	"tt"	self lesPointsGPSVH value add: lon @ lat.	"noeud objet"	nodePos := NetworkPosition lon: lon lat: lat.	meter := self mercator latLonToMeter: lat lon: lon.	pixel := self mercator meterToPixelNew: meter zoom: currentZoom.	nodePos metre: meter.	nodePos setCurrentZoom: currentZoom.	nodePos currentTile: currentTileDico.	nodePos pixelDico at: currentZoom put: pixel.	nodePos mercator: self mercator.	nodePos model: googleModel.	node := AlgoDis.NetworkNodeLocalized pos: nodePos.	self colPickNodes do: 			[:each |			| nd |			nd := NetworkDistance distanceNode: each withNode: node.			googleModel value distanceSet add: nd.			(googleModel value dicoNodeDistance at: each ifAbsentPut: [SortedCollection new]) add: nd.			(googleModel value dicoNodeDistance at: node ifAbsentPut: [SortedCollection new]) add: nd].	self colPickNodes add: node.	"(mapX @ mapY) inspect."	"circle := Circle center: mapX @ mapY radius: 50."	"filledCircle := circle asFiller."	"strokedCircle := circle asStroker.	comp := (GraphicsAttributesWrapper on: strokedCircle) attributes: (GraphicsAttributes new paint: (ColorValue perform: #black))."	"comp inspect."	"self lesPointsVH value add: comp."	self tileView invalidate.	^self</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="colPickNodes">colPickNodes	^googleModel value colPickedNodesVH value</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="labelPosVH">labelPosVH	^labelPosVH</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="changeMousePositionFromName:">changeMousePositionFromName: aName	| aNodeName processName pointPos relPos |	processName := aName asString.	processName isEmpty ifTrue: [^nil].	aNodeName := self cleanUpProcessName: processName.	aNodeName isEmpty		ifFalse: 			[pointPos := self pointFromName: aNodeName.			pointPos isNil				ifFalse: 					[relPos := pointPos translatedBy: googleModel value originOffset negated.					tileView controller activate.					tileView controller sensor cursorPoint: relPos.					self componentAtPointRedrawAt: relPos]]</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doUpdateTile">doUpdateTile	"This stub method was generated by UIDefiner"	| tileX tileY tileZoom dico map |	tileX := self xTile value.	tileY := self yTile value.	tileZoom := self zoom value.	dico := Dictionary new.	dico		at: #x put: tileX;		at: #y put: tileY;		at: #zoom put: tileZoom.	map := googleModel value.	map matrixTile: dico.	googleModel value: map.	^self</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="changeZoom">changeZoom	| actualZoom difference xt yt |	actualZoom := self zoom value.	difference := actualZoom - oldZoom.	difference = 0 ifTrue: [^self].	xt := self xTile value.	yt := self yTile value.	difference &gt; 0		ifTrue: 			["zoom in"			difference timesRepeat: [xt := xt * 2].			difference timesRepeat: [yt := yt * 2]]		ifFalse: 			["zoom out"			difference := difference negated.			difference timesRepeat: [xt := (xt / 2) truncated].			difference timesRepeat: [yt := (yt / 2) truncated]].	self xTile value: xt.	self yTile value: yt.	oldZoom := actualZoom</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doSelectionColorFor:updateButton:">doSelectionColorFor: componentColor updateButton: aSymbol	"This stub method was generated by UIDefiner"	| csd oldColor newColor |	oldColor := self drawingParameters perform: componentColor.	csd := ColorSelectionDialog new.	csd selection: oldColor.	csd open.	newColor := csd selection.	csd accept value		ifTrue: 			[| bc |			self drawingParameters perform: (componentColor asString , ':') asSymbol with: newColor.			"change the button color"			bc := self builder componentAt: aSymbol.			bc spec colors setBackgroundColor: newColor.			bc widget invalidate]</body></methods><methods><class-id>UIMapsv0</class-id> <category>testing</category><body package="Mapsv0" selector="testRelativeNameToPoint">testRelativeNameToPoint	^self relativePointForName: 'P12'</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doExportGpx">doExportGpx	"This stub method was generated by UIDefiner"	| gpxFilename ws |	gpxFilename := Dialog				requestFileNameWithMessage: 'Export network to GPX file'				default: '*.gpx'				version: #new				ifFail: [^'']				for: nil.	ws := gpxFilename asFilename newReadWriteStream.	ws nextPutAll: '&lt;?xml version="1.0" encoding="utf-8"?&gt;'.	ws cr.	googleModel value asGpxDocument printOn: ws.	ws close</body></methods><methods><class-id>UIMapsv0</class-id> <category>interface closing</category><body package="Mapsv0" selector="requestForWindowClose">requestForWindowClose	^Dialog confirm: 'You are about to close the window!'</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="buildNetAndSimulators">buildNetAndSimulators	| view gc netAndDicoAndComposite gp pickModel |	Notice		showProgress: 'Building simulation files...'		complete: 3		while:  			["self halt."			self updatePickModel.			pickModel := googleModel value pickModelTmp.			pickModel colNodes: googleModel value colNodes.			pickModel filename: 'santander.net'.			view := self tileView.			gc := view graphicsContext.			gp := self drawingParameters.			IncrementNotification raiseSignal.			netAndDicoAndComposite := pickModel buildNetAndDisplayOn: gc graphicParameters: gp.			IncrementNotification raiseSignal.			self googleModel value updateGeneratorsWith: netAndDicoAndComposite first.			IncrementNotification raiseSignal.			pickModel lastGraph: netAndDicoAndComposite last.			pickModel pointDictionary: (netAndDicoAndComposite at: 2).			"googleModel value: googleModel value"]		title: 'Computing'</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="doDisplayNodeName">doDisplayNodeName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doDisplayNodeName isNil		ifTrue:			[doDisplayNodeName := false asValue]		ifFalse:			[doDisplayNodeName]</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="lesPointsGPSVH">lesPointsGPSVH	^lesPointsGPSVH</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="cleanUpProcessName:">cleanUpProcessName: processName	| aNodeName rs char ws myNodeName |	aNodeName := processName. 	rs := aNodeName readStream.	char := Character space.	[rs atEnd or: [char isSeparator not]] whileFalse: [char := rs next].	rs atEnd ifTrue: [^String new].	ws := (String new: 20) writeStream.	[rs atEnd or: [char isAlphaNumeric not]] whileFalse: 			[ws nextPut: char.			char := rs next].	char isAlphaNumeric ifTrue: [ws nextPut: char].	myNodeName := ws contents.	^myNodeName</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doZoomOut">doZoomOut	| z |	z := self zoom value.	z = 0 ifFalse: [self zoom value: z - 1]</body></methods><methods><class-id>UIMapsv0</class-id> <category>computing</category><body package="Mapsv0" selector="pointClosedTo:">pointClosedTo: anAbsolutePosition	| pickModel con pointDictionary allPoints rectangle points |	pickModel := googleModel value pickModelTmp.	(pickModel isNil or: [(googleModel value matrixTile at: #x) isNil])		ifFalse: 			[con := pickModel connectivity.			con isNil ifTrue: [^self].			pointDictionary := pickModel pointDictionary.			pointDictionary isNil ifTrue: [^self].			allPoints := pointDictionary keys.			rectangle := Rectangle origin: anAbsolutePosition + (-2 @ -2)						corner: anAbsolutePosition + (2 @ 2).			points := (allPoints select: [:aPoint | rectangle containsPoint: aPoint])						asArray.			points isEmpty not ifTrue: [^points first] ifFalse: [^nil]]</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="computeGPSPoint">computeGPSPoint	| lpg lp currentTileDico currentZoom currentTileX currentTileY |	lpg := self lesPointsGPSVH value.	currentTileDico := self matrixTile value.	currentZoom := currentTileDico at: #zoom.	currentTileX := currentTileDico at: #x.	currentTileY := currentTileDico at: #y.	lp := OrderedCollection new.	lp := lpg collect: 					[:p |					| meter pixel mapX mapY filledCircle comp circle |					meter := self mercator latLonToMeter: p y lon: p x.					pixel := self mercator meterToPixelNew: meter zoom: currentZoom.					mapX := pixel x - (currentTileX * 256).					mapY := pixel y - (currentTileY * 256).					circle := Circle center: mapX @ mapY radius: 20.					filledCircle := circle asFiller.					comp := (GraphicsAttributesWrapper on: filledCircle) attributes: (GraphicsAttributes new paint: (ColorValue perform: #white)).					comp].	self lesPointsVH value: lp</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="tileImage">tileImage	^tileImage</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="range">range	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^range isNil		ifTrue:			[range := 100 asValue]		ifFalse:			[range]</body></methods><methods><class-id>UIMapsv0</class-id> <category>converting</category><body package="Mapsv0" selector="absolutePointForName:">absolutePointForName: aName	| pickModel pointDictionary uneAssoc |	pickModel := self googleModel value pickModelTmp.	pointDictionary := pickModel pointDictionary.	pointDictionary isNil ifTrue: [^nil].	uneAssoc := pointDictionary associations				detect: [:asso | asso value = aName].	uneAssoc isNil ifFalse: [^uneAssoc key]</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="networkList">networkList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^networkList isNil		ifTrue:			[networkList := MultiSelectionInList new]		ifFalse:			[networkList]</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doZoomInDownLeft">doZoomInDownLeft	self doZoomIn.	self yTile value: self yTile value + 1</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doOffsetTile:">doOffsetTile: offset	self yTile value: self yTile value + (offset y).	self xTile value: self xTile value + (offset x)</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="updateGeneratorsWith:">updateGeneratorsWith: net	| uiGenerators connectivity mp pm m fakeSteps firstPoint offset |	uiGenerators := AlgoDis.UINetworkGeometry allInstances.	offset := googleModel value originOffset.	pm := googleModel value pickModelTmp.	pm originOffset: offset.	m := AlgoDis.Mobile trajectory: (AlgoDis.Trajectory position: (Point x: 10 y: 10) movement: (Point x: 10 y: 10)) range: pm portee "1000".	fakeSteps := pm steps. "OrderedCollection new."	"firstPoint := offset + (500 @ 500).	fakeSteps add: firstPoint.	1 to: 100 do: [:i | firstPoint := firstPoint + (10 @ 10). fakeSteps add: firstPoint]."	"fakeSteps add: 83100 @ 105100 ; add: 116 @ 145 ; add: 178 @ 150 ; add: 218 @ 147 ; add: 273 @ 147 ; add: 347 @ 152 ; add: 381 @ 153 ; add: 412 @ 154 ; add: 435 @ 174 ; add: 443 @ 221 ; add: 437 @ 289 ; add: 398 @ 327 ; add: 263 @ 324 ; add: 227 @ 323."	mp := AlgoDis.MobilePath mobile: m steps: "pm steps" fakeSteps.	uiGenerators isEmpty		ifTrue: 			[AlgoDis.UINetworkGeometry new."new au lieu de open "			uiGenerators := AlgoDis.UINetworkGeometry allInstances].	uiGenerators do: 			[:aGenerator |			connectivity := net buildNetworkLocalized.			"On enleve cela qui ne marche pas avec new ci dessus : aGenerator leStyle value:  #forSensors."			aGenerator theNbSystems value: net points size.			aGenerator theRadius value: googleModel value pickModelTmp portee.			aGenerator theSize value: googleModel value pickModelTmp bounds width.			aGenerator doGraphic value: true.			aGenerator execManager mobilePath: mp copy.			aGenerator execManager aPickModel:  pm copy.			aGenerator leCode value: connectivity printString]</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doChooseNetworkColor">doChooseNetworkColor	"This stub method was generated by UIDefiner"	self doSelectionColorFor: #networkColor updateButton: #ChooseNetworkColor</body></methods><methods><class-id>UIMapsv0</class-id> <category>testing</category><body package="Mapsv0" selector="testMoving">testMoving	" test moving button in googlemap application "	| moves n |	moves := OrderedCollection new.	n := 10.	n timesRepeat: [moves add: 1 @ 0].	n timesRepeat: [moves add: 0 @ 1].	n timesRepeat: [moves add: -1 @ 0].	n timesRepeat: [moves add: 0 @ -1].	moves do: 			[:movePoint |			| newX newY |			newX := self xTile value.			newX := newX + movePoint x.			newY := self yTile value.			newY := newY + movePoint y.			self xTile value: newX.			self yTile value: newY.			(Delay forMilliseconds: 1000) wait.			self doViewTile]</body></methods><methods><class-id>UIMapsv0</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize"	googleModel := GoogleMap new.	googleModel matrixTile: Dictionary new."	googleModel := Mapsv0 new.	googleModel matrixTile: (Dictionary withKeysAndValues: #(#x 0 #y 0 #zoom 0)).	googleModel := googleModel asValue.	tileView := Mapsv0View new.	tileView application: self.	self tileImage: nil asValue.	tileView model: googleModel.	tileView controller: Mapsv0Controller new.	tileView controller application: self.	self xTile value: 16035.	"998."	self yTile value: 11982.	"708."	self zoom value: 15.	"11."	oldZoom := self zoom value.	self zoom onChangeSend: #changeZoom to: self.	clicPointVH := (0 @ 0) asValue.	lesPointsVH := OrderedCollection new asValue.	lesPointsGPSVH := OrderedCollection new asValue.	self clicPointVH onChangeSend: #mapClic to: self.	googleModel onChangeSend: #GPSColToPixelCol to: self.	mercator := GlobalMercator new.	self initializeDrawingParameters.	googleModel value range: self range value.	labelPosVH := '0@0' asValue.	self labelPosVH onChangeSend: #changeLabelPos to: self.	self nodePName onChangeSend: #changeMousePositionFromName to: self</body></methods><methods><class-id>UIMapsv0</class-id> <category>interface opening</category><body package="Mapsv0" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	"(builder componentAt: #theNetworkColor) widget add: (ColoredArea model: networkColorValue) in: (0 @ 0 corner: 1 @ 1)"	(self builder componentAt: #ChooseRangeColor) spec colors setBackgroundColor: drawingParameters outerCircleColor.	(self builder componentAt: #ChooseNetworkColor) spec colors setBackgroundColor: drawingParameters networkColor.	(self builder componentAt: #ChooseNameColor) spec colors setBackgroundColor: drawingParameters nameColor</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="changeLabelPosSaved3">changeLabelPosSaved3	| widget pos posAbs pickModel con nodeDictionary pointDictionary nomProcessus fanOut pointProche wrapper color lookPref |	widget := self builder componentAt: #LabelPosition.	pos := self labelPosVH value.	pickModel := googleModel value pickModelTmp.	(pickModel isNil or: [(googleModel value matrixTile at: #x) isNil])		ifFalse: 			[posAbs := pos translatedBy: googleModel value originOffset.			widget labelString: posAbs printString.			con := pickModel connectivity.			con isNil ifTrue: [^self].			nodeDictionary := con nodeDictionary.			pointDictionary := pickModel pointDictionary.			pointDictionary isNil ifTrue: [^self].			pointProche := self pointClosedTo: posAbs.			pointProche isNil ifFalse: [nomProcessus := pointDictionary at: pointProche ifAbsent: [nil]].			wrapper := self builder componentAt: #LabelPosition.			nomProcessus isNil				ifTrue: 					[wrapper labelString: pos printString.					color := ColorValue black]				ifFalse: 					[fanOut := nodeDictionary at: nomProcessus ifAbsent: ['none'].					wrapper labelString: nomProcessus , ' ' , fanOut first size printString.					color := ColorValue red].			lookPref := wrapper lookPreferences foregroundColor: color.			wrapper lookPreferences: lookPref]</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doZoomInUpLeft">doZoomInUpLeft	self doZoomIn</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="clicPointVH">clicPointVH	^clicPointVH</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="changeLabelPosSaved2">changeLabelPosSaved2	| widget pos posAbs pickModel con nodeDictionary pointDictionary nomProcessus fanOut pointProche wrapper color lookPref |	widget := self builder componentAt: #LabelPosition.	pos := self labelPosVH value.	pickModel := googleModel value pickModelTmp.	(pickModel isNil or: [(googleModel value matrixTile at: #x) isNil])		ifFalse: 			[posAbs := pos translatedBy: googleModel value originOffset.			widget labelString: posAbs printString.			con := pickModel connectivity.			con isNil ifTrue: [^self].			nodeDictionary := con nodeDictionary.			pointDictionary := pickModel pointDictionary.			pointDictionary isNil ifTrue: [^self].			pointProche := self pointClosedTo: posAbs.			pointProche isNil ifFalse: [nomProcessus := pointDictionary at: pointProche ifAbsent: [nil]].			wrapper := self builder componentAt: #LabelPosition.			nomProcessus isNil				ifTrue: 					[wrapper labelString: pos printString.					color := ColorValue black.					lookPref := wrapper lookPreferences foregroundColor: color.					wrapper lookPreferences: lookPref.					self nodePName value: '']				ifFalse: 					[wrapper labelString: pos printString.					color := ColorValue black.					fanOut := nodeDictionary at: nomProcessus ifAbsent: ['none'].					self nodePName value: nomProcessus , ' ' , fanOut first size printString.					color := ColorValue red].			lookPref := wrapper lookPreferences foregroundColor: color.			wrapper lookPreferences: lookPref]</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions-moving</category><body package="Mapsv0" selector="doChangeDownTile">doChangeDownTile	"This stub method was generated by UIDefiner"	self yTile value: self yTile value + 1.	self doViewTile</body></methods><methods><class-id>UIMapsv0</class-id> <category>converting</category><body package="Mapsv0" selector="relativePointFor:">relativePointFor: aPoint	^aPoint translatedBy: googleModel value originOffset negated</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="clicPointVH:">clicPointVH: anObject	clicPointVH := anObject</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="changeRange">changeRange	"Compute the new diameter of the circles"	""	googleModel value range: self range value.	self tileView invalidate</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="doDisplayRange">doDisplayRange	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doDisplayRange isNil		ifTrue:			[doDisplayRange := true asValue]		ifFalse:			[doDisplayRange]</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doOpenPickcell">doOpenPickcell	"This stub method was generated by UIDefiner"	| box uiPickCell pm image origin image32 pixel |	box := self builder componentAt: #TileViewHolder.	origin := self builder window displayBox origin.	box := box bounds translatedBy: origin.	image := Screen default completeContentsOfArea: box.	uiPickCell := UIPickCellNodes new.	pm := uiPickCell pickModel value.	pm filename: nil. 	pm bounds: box.	pm mapOrigin: self mapOrigin.	uiPickCell pickModel value: pm. 	image32 := Image				extent: image extent				depth: image depth				palette: image palette.	image pixelsDo: 			[:x :y |			pixel := image valueAtPoint: x @ y.			image32 valueAtPoint: x @ y put: pixel].	uiPickCell laVue image: image32.	"	self tileView displayOn: image asRetainedMedium graphicsContext."	uiPickCell open</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doZoomInDownRight">doZoomInDownRight	self doZoomInDownLeft.	self xTile value: self xTile value + 1</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="nodePName">nodePName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nodePName isNil		ifTrue:			[nodePName := String new asValue]		ifFalse:			[nodePName]</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="matrixTile:">matrixTile: anObject	matrixTile := anObject</body></methods><methods><class-id>UIMapsv0</class-id> <category>testing</category><body package="Mapsv0" selector="testNameToPoint">testNameToPoint	^self absolutePointForName: 'P12'</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="selectionGPSToPoint">selectionGPSToPoint	"This stub method was generated by UIDefiner"	| currentTileDico currentZoom pixelCol typePoint selectedGpsCol |	currentTileDico := googleModel value matrixTile.	"currentTileX := currentTileDico at: #x."	"currentTileY := currentTileDico at: #y."	currentZoom := currentTileDico at: #zoom.	"gpsCol := self lesPointsGPSVH value."	typePoint := self selectedNetworks asSet.	selectedGpsCol := googleModel value colNodes				select: [:point | typePoint includes: point sym].	pixelCol := selectedGpsCol collect: 					[:node |					| gps meter pixel |					gps := node pos.					meter := self mercator latLonToMeter: gps latitude "negated" lon: gps longitude.					pixel := self mercator meterToPixelNew: meter zoom: currentZoom.					"mapX := pixel x - (currentTileX * 256).					mapY := pixel y - (currentTileY * 256).					mapX rounded @ mapY rounded"					pixel x rounded @ pixel y rounded].	googleModel value pickModelTmp points value: pixelCol.	^self</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doBuildNet">doBuildNet	"This stub method was generated by UIDefiner"	Notice		showProgress: 'Building and drawing nets...'		complete: 3		while: [self buildNet]		title: 'Computing'</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="mercator:">mercator: anObject	mercator := anObject</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doChooseColorFor:questionString:">doChooseColorFor: componentColor questionString: questionString	"This stub method was generated by UIDefiner"	| outerColor newColor colorName newColorName |	outerColor := self drawingParameters perform: componentColor.	colorName := outerColor class constantNameFor: outerColor.	newColorName := Dialog request: questionString initialAnswer: colorName asString.	newColorName isEmpty		ifFalse: 			[newColor := ColorValue perform: newColorName asSymbol.			outerColor := self drawingParameters perform: (componentColor asString , ':') asSymbol with: newColor]</body></methods><methods><class-id>UIMapsv0</class-id> <category>geometry</category><body package="Mapsv0" selector="interpretLineSegment:">interpretLineSegment: aGeometry	| startPoint stopPoint startProcess stopProcess length |	length := aGeometry length.	startPoint := aGeometry start.	stopPoint := aGeometry end.	startProcess := self nameForAbsolutePoint: startPoint.	stopProcess := self nameForAbsolutePoint: stopPoint.	^startProcess , ' to: ' , stopProcess , ' len: ' , length printString</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions-moving</category><body package="Mapsv0" selector="doChangeDownRightTile">doChangeDownRightTile	"This stub method was generated by UIDefiner"	self xTile value: self xTile value + 1.	self yTile value: self yTile value + 1.	self doViewTile</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doPlacePoint">doPlacePoint	"This stub method was generated by UIDefiner"	| lon lat meter currentZoom pixel currentTileDico currentTileX currentTileY mapX mapY circle filledCircle comp |	lon := self longitude value.	lat := self latitude value "negated".	meter := self mercator latLonToMeter: lat lon: lon.	currentTileDico := self matrixTile value.	currentZoom := currentTileDico at: #zoom.	currentTileX := currentTileDico at: #x.	currentTileY := currentTileDico at: #y.	pixel := self mercator meterToPixelNew: meter zoom: currentZoom.	mapX := pixel x - (currentTileX * 256).	mapY := pixel y - (currentTileY * 256).	"(mapX @ mapY) inspect."	circle := Circle center: mapX @ mapY radius: 20.	filledCircle := circle asFiller.	comp := (GraphicsAttributesWrapper on: filledCircle) attributes: (GraphicsAttributes new paint: (ColorValue perform: #white)).	"comp inspect."	self lesPointsVH value add: comp.	self tileView invalidate.	^self</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="yTile">yTile	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^yTile isNil		ifTrue:			[yTile := 0 asValue]		ifFalse:			[yTile]</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doViewTile">doViewTile	"This stub method was generated by UIDefiner"	self doUpdateTile</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="lesPointsVH:">lesPointsVH: anObject	lesPointsVH := anObject</body></methods><methods><class-id>UIMapsv0</class-id> <category>constant</category><body package="Mapsv0" selector="maxZoom">maxZoom	^21</body></methods><methods><class-id>UIMapsv0</class-id> <category>converting</category><body package="Mapsv0" selector="relativePointForName:">relativePointForName: aName	^self relativePointFor: (self absolutePointForName: aName)</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="doDisplayNetwork">doDisplayNetwork	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doDisplayNetwork isNil		ifTrue:			[doDisplayNetwork := true asValue]		ifFalse:			[doDisplayNetwork]</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doZoomIn">doZoomIn	| z |	z := self zoom value.	z = self maxZoom ifFalse: [self zoom value: z + 1]</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="parseGPXFileOrString:">parseGPXFileOrString: gpxFilename	| docFile doc colWayPoint colGPSPos colNodes no bn xmlMetadata symList collection |	docFile := gpxFilename asFilename.	doc := (XML.XMLParser new)				validate: false;				parse: docFile.	xmlMetadata := doc document root elementNamed: 'metadata'.	googleModel value xmlMetadata: xmlMetadata.	colWayPoint := doc document root elementsNamed: 'wpt'.	colGPSPos := colWayPoint collect: 					[:wp |					| attrLat attrLon lat lon |					attrLat := wp attributes detect: [:attr | attr tag type = 'lat'].					lat := attrLat value asNumber asFixedPoint: 5.					attrLon := wp attributes detect: [:attr | attr tag type = 'lon'].					lon := attrLon value asNumber asFixedPoint: 5.					lon @ lat].	colNodes := colWayPoint collect: 					[:wp |					| attrLat attrLon lat lon np nnl sym name n time desc cmt |					attrLat := wp attributes detect: [:attr | attr tag type = 'lat'].					lat := attrLat value asNumber asFixedPoint: 5.					attrLon := wp attributes detect: [:attr | attr tag type = 'lon'].					lon := attrLon value asNumber asFixedPoint: 5.					np := NetworkPosition lon: lon lat: lat.					np model: googleModel.					np mercator: mercator.					nnl := AlgoDis.NetworkNodeLocalized pos: np.					sym := (wp elementNamed: 'sym') elements first text.					n := (wp elementNamed: 'name') elements first text.					collection := wp elementsNamed: 'time'.					collection isEmpty						ifTrue: 							[time := XML.Element tag: 'time'										elements: (Array with: (XML.Text text: 'nil'))]						ifFalse: [time := collection first].					collection := wp elementsNamed: 'desc'.					collection isEmpty						ifTrue: 							[desc := XML.Element tag: 'desc'										elements: (Array with: (XML.Text text: 'nil'))]						ifFalse: [desc := collection first].					collection := wp elementsNamed: 'cmt'.					collection isEmpty						ifTrue: 							[cmt := XML.Element tag: 'cmt'										elements: (Array with: (XML.Text text: 'nil'))]						ifFalse: [cmt := collection first].					"name := n copyAfter: $ ."					n replaceAll: $: with: $-.					n replaceAll: $  with: $_.					name := n.					nnl sym: sym.					nnl name: name.					nnl range: 100.					nnl time: time.					nnl desc: desc.					nnl cmt: cmt.					nnl].	symList := (colNodes collect: [:n | n sym]) asSet asOrderedCollection.	self networkList list: symList.	self networkList selectAll.	googleModel value colNodes: colNodes asOrderedCollection.	googleModel value computeDistance.	googleModel value sortDistanceByNode.	googleModel value selectReachedNodes.	no := NetworkOrganisation				withReachedNodes: googleModel value dicoReachedNodes.	bn := no buildNetwork.	"bn inspect."	"self halt."	self lesPointsGPSVH value: colGPSPos.	self GPSColToPixelCol</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="labelPosition">labelPosition	^'0@0'</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="drawingParameters:">drawingParameters: anObject	drawingParameters := anObject</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions-moving</category><body package="Mapsv0" selector="doChangeUpTile">doChangeUpTile	"This stub method was generated by UIDefiner"	self yTile value: self yTile value - 1.	self doViewTile</body></methods><methods><class-id>UIMapsv0</class-id> <category>geometry</category><body package="Mapsv0" selector="interpretCircle:">interpretCircle: aGeometry	| center radius process |	center := aGeometry center.	radius := aGeometry radius.	process := self nameForAbsolutePoint: center.	^process , ' range:  ' , radius printString</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="matrixTile">matrixTile	^matrixTile</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doOpenGPX">doOpenGPX	"This stub method was generated by UIDefiner"	| gpxFilename |	Notice		showProgress: 'Fetching data from Smart Santander...'		complete: 3		while: 			[Mapsv0Utilities htmlForSantander.			IncrementNotification raiseSignal.			Mapsv0Utilities testForGPX.			IncrementNotification raiseSignal.			gpxFilename := Mapsv0Utilities defaultGPXName.			self parseGPXFileOrString: gpxFilename.			IncrementNotification raiseSignal]		title: 'Fetching data'</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="tileView:">tileView: anObject	tileView := anObject</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="collectObjectsClosedTo:inGraph:">collectObjectsClosedTo: posAbs inGraph: graph	| interested geom component ga |	interested := OrderedCollection new.	graph components do: 			[:comp |			geom := comp component.			(geom containsPoint: posAbs) ifTrue: [interested addFirst: comp]].	interested do: 			[:specWrapper |			component := specWrapper component.			component := component component.			((component isKindOf: FillingWrapper)				or: [component isKindOf: StrokingWrapper])					ifFalse: 						[ga :=  component attributes.						ga paint: ColorValue green]]</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="tileImage:">tileImage: anObject	tileImage := anObject</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doChooseNameColor">doChooseNameColor	"This stub method was generated by UIDefiner"	self doSelectionColorFor: #nameColor updateButton: #ChooseNameColor</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="lesPointsVH">lesPointsVH	^lesPointsVH</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="oldZoom">oldZoom	^oldZoom</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doReset">doReset	"This stub method was generated by UIDefiner"	self zoom retractInterestsFor: self.	"self xTile value: 998.	self yTile value: 708.	self zoom value: 11."	self xTile value: 16035.	self yTile value: 11982.	self zoom value: 15.	self oldZoom: 15.	self zoom onChangeSend: #changeZoom to: self</body></methods><methods><class-id>UIMapsv0</class-id> <category>initialize-release</category><body package="Mapsv0" selector="changeDrawingParameters">changeDrawingParameters	(self drawingParameters)		drawCircle: self doDisplayRange value;		drawNetwork: self doDisplayNetwork value;		drawName: self doDisplayNodeName value</body></methods><methods><class-id>UIMapsv0</class-id> <category>geometry</category><body package="Mapsv0" selector="interpretPoint:">interpretPoint: aGeometry</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="googleModel:">googleModel: anObject	googleModel := anObject</body></methods><methods><class-id>UIMapsv0</class-id> <category>constant</category><body package="Mapsv0" selector="minZoom">minZoom	^0</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="lesPointsGPSVH:">lesPointsGPSVH: anObject	lesPointsGPSVH := anObject</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="componentAtPoint:">componentAtPoint: aPoint	| pickModel graph posAbs specWrapper component geometry |	pickModel := googleModel value pickModelTmp.	(pickModel isNil or: [(googleModel value matrixTile at: #x) isNil])		ifFalse: 			[graph := pickModel lastGraph.			graph isNil				ifFalse: 					[posAbs := aPoint translatedBy: googleModel value originOffset.					specWrapper := graph hitDetect: posAbs.					specWrapper isNil						ifFalse: 							[component := specWrapper component.							geometry := component component.							self interpretGeometry: geometry]]]</body></methods><methods><class-id>UIMapsv0</class-id> <category>converting</category><body package="Mapsv0" selector="nameForAbsolutePoint:">nameForAbsolutePoint: aPoint	| pickModel pointDictionary aProcessName |	pickModel := self googleModel value pickModelTmp.	pointDictionary := pickModel pointDictionary.	pointDictionary isNil ifTrue: [^nil].	aProcessName := pointDictionary at: aPoint ifAbsent: [^nil].	^aProcessName</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doPickNetwork">doPickNetwork	"This stub method was generated by UIDefiner"	| |	gpxPickFilename := Dialog				requestFileNameWithMessage: 'Save network into GPX file'				default: '*.gpx'				version: #mustBeNew				ifFail: [^'']				for: nil.	uiState := #picking</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="mercator">mercator	^mercator</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="changeLabelPos">changeLabelPos	| widget pos posAbs pickModel con nodeDictionary pointDictionary nomProcessus fanOut pointProche wrapper color lookPref |	widget := self builder componentAt: #LabelPosition.	pos := self labelPosVH value.	pickModel := googleModel value pickModelTmp.	(pickModel isNil or: [(googleModel value matrixTile at: #x) isNil])		ifFalse: 			[posAbs := pos translatedBy: googleModel value originOffset.			widget labelString: posAbs printString.			con := pickModel connectivity.			con isNil ifTrue: [^self].			nodeDictionary := con nodeDictionary.			pointDictionary := pickModel pointDictionary.			pointDictionary isNil ifTrue: [^self].			pointProche := self pointClosedTo: posAbs.			pointProche isNil ifFalse: [nomProcessus := pointDictionary at: pointProche ifAbsent: [nil]].			wrapper := self builder componentAt: #LabelPosition.			self nodePName retractInterestsFor: self.			nomProcessus isNil				ifTrue: 					[wrapper labelString: pos printString.					color := ColorValue black.					lookPref := wrapper lookPreferences foregroundColor: color.					wrapper lookPreferences: lookPref.					self nodePName value: '']				ifFalse: 					[wrapper labelString: pos printString.					color := ColorValue black.					fanOut := nodeDictionary at: nomProcessus ifAbsent: ['none'].					self nodePName value: nomProcessus , ' ' , fanOut first size printString.					color := ColorValue red].			self nodePName onChangeSend: #changeMousePositionFromName to: self.			lookPref := wrapper lookPreferences foregroundColor: color.			wrapper lookPreferences: lookPref]</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="tileView">tileView	^tileView</body></methods><methods><class-id>UIMapsv0</class-id> <category>testing</category><body package="Mapsv0" selector="checkNameToPoint">checkNameToPoint	^self absolutePointForName: 'P12'</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions-moving</category><body package="Mapsv0" selector="doChangeLeftTile">doChangeLeftTile	"This stub method was generated by UIDefiner"	self xTile value: self xTile value - 1.	self doViewTile</body></methods><methods><class-id>UIMapsv0</class-id> <category>computing</category><body package="Mapsv0" selector="pointFromName:">pointFromName: aNodeName	| pickModel con pointDictionary allPoints |	pickModel := googleModel value pickModelTmp.	(pickModel isNil or: [(googleModel value matrixTile at: #x) isNil])		ifFalse: 			[con := pickModel connectivity.			con isNil ifTrue: [^nil].			pointDictionary := pickModel pointDictionary.			pointDictionary isNil ifTrue: [^self].			allPoints := pointDictionary associations detect: [:assoc | assoc value = aNodeName] ifNone: [nil].			allPoints isNil ifTrue: [^nil] ifFalse: [^allPoints key]]</body></methods><methods><class-id>UIMapsv0</class-id> <category>geometry</category><body package="Mapsv0" selector="interpretGeometry:">interpretGeometry: aGeometry	| text label geometricObject |^nil.	" geometricObject := aGeometry component component.	text := geometricObject class name. 	(geometricObject isKindOf: LineSegment)		ifTrue: [text := self interpretLineSegment: geometricObject].	(geometricObject isKindOf: Circle)		ifTrue: [text := self interpretCircle: geometricObject].	(geometricObject isKindOf: Point)		ifTrue: [text := self interpretPoint: geometricObject].	label := (self builder componentAt: #Geometry) widget.	label labelString: text"</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="mapClic">mapClic	| clic xclic yclic currentTileDico currentZoom tileX tileY pixelX pixelY metre latlon |	clic := self clicPointVH value.	xclic := clic x.	yclic := clic y.	"On récupère les coordonnées du carreau en haut à gauche"	currentTileDico := googleModel value matrixTile.	currentZoom := currentTileDico at: #zoom.	currentZoom isNil ifTrue: [^nil].	tileX := currentTileDico at: #x.	tileY := currentTileDico at: #y.	"upperLeftTile := tileX @ tileY."	"Calcul des coordonnées en pixel du point cliqué"	pixelX := tileX * 256 + xclic.	pixelY := tileY * 256 + yclic.	"Calcul des coordonnées en mètre du point cliqué"	metre := mercator pixelToMeterNew: pixelX @ pixelY zoom: currentZoom.	"Calcul des coordonnées WGS84 du point cliqué"	latlon := self mercator meterToLatLon: metre.	self longitude value: latlon y.	self latitude value: latlon x</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="GPSToPoint">GPSToPoint	"This stub method was generated by UIDefiner"	| currentTileDico currentZoom gpsCol pixelCol |	currentTileDico := googleModel value matrixTile.	"currentTileX := currentTileDico at: #x."	"currentTileY := currentTileDico at: #y."	currentZoom := currentTileDico at: #zoom.	gpsCol := self lesPointsGPSVH value.	pixelCol := gpsCol collect: 					[:gps |					| meter pixel |					meter := self mercator latLonToMeter: gps y "negated" lon: gps x.					pixel := self mercator meterToPixelNew: meter zoom: currentZoom.					"mapX := pixel x - (currentTileX * 256).					mapY := pixel y - (currentTileY * 256).					mapX rounded @ mapY rounded"					pixel x rounded @ (pixel y rounded)].	googleModel value pickModelTmp points  value: pixelCol.	^self</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="changeLabelPosSaved">changeLabelPosSaved	| widget pos posAbs pickModel con nodeDictionary pointDictionary nomProcessus fanOut |	widget := self builder componentAt: #LabelPosition.	pos := self labelPosVH value.	pickModel := googleModel value pickModelTmp.	(pickModel isNil and: [(googleModel value matrixTile at: #x) isNil not])		ifFalse: 			[posAbs := pos translatedBy: googleModel value originOffset.			widget labelString: posAbs printString.			con := pickModel connectivity.			con isNil ifTrue: [^self].			nodeDictionary := con nodeDictionary.			pointDictionary := pickModel pointDictionary.			nomProcessus := pointDictionary at: posAbs ifAbsent: [nil].			nomProcessus isNil				ifFalse: 					["(self builder componentAt: #LabelPosition) labelString: nomProcessus."					fanOut := nodeDictionary at: nomProcessus ifAbsent: ['none'].					(self builder componentAt: #LabelPosition) labelString: nomProcessus , ' ' , fanOut first size printString.					(Delay forSeconds: 5) wait]]</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doOpenGPXOnFile">doOpenGPXOnFile	"This stub method was generated by UIDefiner"	| gpxFilename |	gpxFilename := Dialog				requestFileNameWithMessage: 'Browse GPX file'				default: '*.gpx'				version: #mustBeOld				ifFail: [^'']				for: nil.	Notice show: 'In progress' while: [self parseGPXFileOrString: gpxFilename]</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="longitude">longitude	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^longitude isNil		ifTrue:			[longitude := 0 asValue]		ifFalse:			[longitude]</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="oldZoom:">oldZoom: anObject	oldZoom := anObject</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="updatePickModel">updatePickModel	| model pm currentZoom ppkm pixel |	model := googleModel value.	pm := model pickModelTmp.	currentZoom := model matrixTile at: #zoom.	ppkm := model pixelPerKmAt: currentZoom.	pixel := self range value / 1000 * ppkm.	pm portee: pixel rounded.	pm bounds: (self builder componentAt: #TileViewHolder) bounds.	"pm ppoints is auto updated by googleModel value holder"	"pm points: self lesPointsVH value."	"self halt."	googleModel value: model</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions-moving</category><body package="Mapsv0" selector="doChangeUpRightTile">doChangeUpRightTile	"This stub method was generated by UIDefiner"	self xTile value: self xTile value + 1.	self yTile value: self yTile value - 1.	self doViewTile</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="mapOrigin">mapOrigin	| currentTileDico currentZoom tileX tileY pixelX pixelY |	currentTileDico := googleModel value matrixTile.	currentZoom := currentTileDico at: #zoom.	currentZoom isNil ifTrue: [^nil].	tileX := currentTileDico at: #x.	tileY := currentTileDico at: #y.	"upperLeftTile := tileX @ tileY."	"Origin of the map"	pixelX := tileX * 256.	pixelY := tileY * 256.	^Array with: pixelX @ pixelY with: currentZoom</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="buildNet">buildNet	| view gc netAndDicoAndComposite gp pickModel |	"self halt."	self updatePickModel.	pickModel := googleModel value pickModelTmp.	pickModel colNodes: googleModel value colNodes.	pickModel filename: 'santander.net'.	view := self tileView.	gc := view graphicsContext.	gp := self drawingParameters.	IncrementNotification raiseSignal.	netAndDicoAndComposite := pickModel buildNetAndDisplayOn: gc graphicParameters: gp.	IncrementNotification raiseSignal.	self updateGeneratorsWith: netAndDicoAndComposite first.	IncrementNotification raiseSignal.	pickModel lastGraph: netAndDicoAndComposite last.	pickModel pointDictionary: (netAndDicoAndComposite at: 2).	googleModel value: googleModel value</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="zoom">zoom	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^zoom isNil		ifTrue:			[zoom := 0 asValue]		ifFalse:			[zoom]</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="drawingParameters">drawingParameters	^drawingParameters</body></methods><methods><class-id>UIMapsv0</class-id> <category>converting</category><body package="Mapsv0" selector="absolutePointFor:">absolutePointFor: aPoint	^aPoint translatedBy: googleModel value originOffset</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="selectedNetworks">selectedNetworks	^self networkList selections</body></methods><methods><class-id>UIMapsv0</class-id> <category>computing</category><body package="Mapsv0" selector="zoomTile:quadrant:displayAt:">zoomTile: origin quadrant: q displayAt: destination	self xTile value: self xTile value + origin x.	self yTile value: self yTile value + origin y.	self perform: q.	self xTile value: self xTile value - destination x.	self yTile value: self yTile value - destination y</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="componentAtPointRedrawAt:">componentAtPointRedrawAt: aPoint	| pickModel graph posAbs specWrapper component geometry ga view bounds |	pickModel := googleModel value pickModelTmp.	(pickModel isNil or: [(googleModel value matrixTile at: #x) isNil])		ifFalse: 			[graph := pickModel lastGraph.			graph isNil				ifFalse: 					[posAbs := aPoint translatedBy: googleModel value originOffset.					self collectObjectsClosedTo: posAbs inGraph: graph.					specWrapper := graph hitDetect: posAbs.					specWrapper isNil						ifFalse: 							[component := specWrapper component.							ga := component component attributes.							ga paint: ColorValue green.							geometry := component component.							self interpretGeometry: geometry.							view := self builder componentAt: #TileViewHolder.							bounds := component bounds.							graph invalidateRectangle: bounds repairNow: true.							view invalidate]]]</body></methods><methods><class-id>UIMapsv0</class-id> <category>changing</category><body package="Mapsv0" selector="GPSColToPixelCol">GPSColToPixelCol	"This stub method was generated by UIDefiner"	| currentTileDico currentZoom currentTileX currentTileY gpsCol pixelCol |	currentTileDico := googleModel value matrixTile.	currentTileX := currentTileDico at: #x.	currentTileY := currentTileDico at: #y.	currentZoom := currentTileDico at: #zoom.	gpsCol := self lesPointsGPSVH value.	pixelCol := gpsCol collect: 					[:gps |					| meter pixel mapX mapY circle filledCircle comp |					meter := self mercator latLonToMeter: gps y "negated" lon: gps x.					pixel := self mercator meterToPixelNew: meter zoom: currentZoom.					mapX := pixel x - (currentTileX * 256).					mapY := pixel y - (currentTileY * 256).					circle := Circle center: mapX @ mapY radius: 20.					filledCircle := circle asStroker.					comp := (GraphicsAttributesWrapper on: filledCircle)								attributes: (GraphicsAttributes new paint: (ColorValue perform: #black)).					comp].	self lesPointsVH value: pixelCol.	self selectionGPSToPoint.	self tileView invalidate.	^self</body></methods><methods><class-id>UIMapsv0</class-id> <category>accessing</category><body package="Mapsv0" selector="googleModel">googleModel	^googleModel</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doZoomInUpRight">doZoomInUpRight	self doZoomInUpLeft.	self xTile value: self xTile value + 1</body></methods><methods><class-id>UIMapsv0</class-id> <category>actions</category><body package="Mapsv0" selector="doSelectionColorFor:">doSelectionColorFor: componentColor	"This stub method was generated by UIDefiner"	| csd oldColor newColor |	oldColor := self drawingParameters perform: componentColor.	csd := ColorSelectionDialog new.	csd selection: oldColor.	csd open.	newColor := csd selection.	csd accept value		ifTrue: 			[self drawingParameters perform: (componentColor asString , ':') asSymbol				with: newColor.			^newColor]		ifFalse: [^nil]</body></methods><methods><class-id>UIMapsv0</class-id> <category>aspects</category><body package="Mapsv0" selector="xTile">xTile	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^xTile isNil		ifTrue:			[xTile := 0 asValue]		ifFalse:			[xTile]</body></methods><methods><class-id>Mapsv0TileCache</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	dicoZoom := Dictionary new.	^self</body></methods><methods><class-id>Mapsv0TileCache</class-id> <category>accessing</category><body package="Mapsv0" selector="dicoZoom:">dicoZoom: anObject	dicoZoom := anObject</body></methods><methods><class-id>Mapsv0TileCache</class-id> <category>retrieving</category><body package="Mapsv0" selector="x:y:zoom:">x: x y: y zoom: zoom	| dicoPos gt modulo xm ym |	modulo := 2 raisedTo: zoom.	xm := x \\ modulo.	ym := y \\ modulo.	dicoPos := self dicoZoom at: zoom ifAbsent: [self dicoZoom at: zoom put: Dictionary new].	dicoPos isNil ifFalse: [gt := dicoPos at: xm @ ym ifAbsent: [dicoPos at: xm @ ym put: (Mapsv0Tile x: xm y: ym zoom: zoom)]].	^gt</body></methods><methods><class-id>Mapsv0TileCache</class-id> <category>accessing</category><body package="Mapsv0" selector="dicoZoom">dicoZoom	^dicoZoom</body></methods><methods><class-id>GlobalMercator</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	tileSize := 256.	initialResolution := 2 * Double pi * 6378137 / tileSize.	originShift := 2 * Double pi * 6378137 / 2.0.	^self</body></methods><methods><class-id>GlobalMercator</class-id> <category>accessing</category><body package="Mapsv0" selector="originShift">originShift	^originShift</body></methods><methods><class-id>GlobalMercator</class-id> <category>computing</category><body package="Mapsv0" selector="tileBounds:zoom:">tileBounds: tilePoint zoom: zoom	| tx ty ts min max |	tx := tilePoint x.	ty := tilePoint y.	ts := self tileSize.	min := self pixelToMeterNew: (tx * ts) @ (ty * ts) zoom: zoom.	max := self pixelToMeterNew: ((tx + 1) * ts) @ ((ty + 1) * ts) zoom: zoom.	^Rectangle origin: min corner: max</body></methods><methods><class-id>GlobalMercator</class-id> <category>accessing</category><body package="Mapsv0" selector="tileSize">tileSize	^tileSize</body></methods><methods><class-id>GlobalMercator</class-id> <category>computing</category><body package="Mapsv0" selector="resolution:">resolution: zoom	^self initialResolution / (2 raisedTo: zoom)</body></methods><methods><class-id>GlobalMercator</class-id> <category>accessing</category><body package="Mapsv0" selector="originShift:">originShift: anObject	originShift := anObject</body></methods><methods><class-id>GlobalMercator</class-id> <category>computing</category><body package="Mapsv0" selector="meterToPixelNew:zoom:">meterToPixelNew: xy zoom: zoom	| mx my res px py |	res := self resolution: zoom.	mx := xy x.	my := xy y negated.	px := (mx + self originShift) / res.	py := (my + self originShift) / res.	^px @ py</body></methods><methods><class-id>GlobalMercator</class-id> <category>deprecated</category><body package="Mapsv0" selector="meterToPixel:zoom:">meterToPixel: xy zoom: zoom	| mx my res px py |	self error: 'Don''t use this!'.	res := self resolution: zoom.	mx := xy x.	my := xy y.	px := (mx + self originShift) / res.	py := (my + self originShift) / res.	^px @ py</body></methods><methods><class-id>GlobalMercator</class-id> <category>accessing</category><body package="Mapsv0" selector="initialResolution">initialResolution	^initialResolution</body></methods><methods><class-id>GlobalMercator</class-id> <category>deprecated</category><body package="Mapsv0" selector="pixelToMeter:zoom:">pixelToMeter: pPoint zoom: zoom	| px py res mx my |	self error: 'Don''t use this!'.	px := pPoint x.	py := pPoint y.	res := self resolution: zoom.	mx := px * res - self originShift.	my := py * res - self originShift.	^mx @ my</body></methods><methods><class-id>GlobalMercator</class-id> <category>accessing</category><body package="Mapsv0" selector="initialResolution:">initialResolution: anObject	initialResolution := anObject</body></methods><methods><class-id>GlobalMercator</class-id> <category>accessing</category><body package="Mapsv0" selector="tileSize:">tileSize: anObject	tileSize := anObject</body></methods><methods><class-id>GlobalMercator</class-id> <category>computing</category><body package="Mapsv0" selector="pixelToMeterNew:zoom:">pixelToMeterNew: pPoint zoom: zoom	| px py res mx my |	px := pPoint x.	py := pPoint y.	res := self resolution: zoom.	mx := px * res - self originShift.	my := (py * res - self originShift) negated.	^mx @ my</body></methods><methods><class-id>GlobalMercator</class-id> <category>computing</category><body package="Mapsv0" selector="latLonToMeter:lon:">latLonToMeter: lat lon: lon	| mx my |	mx := lon * self originShift / 180.0.	my := ((90 + lat) * Double pi / 360.0) tan ln / (Double pi / 180.0).	my := my * self originShift / 180.0.	^mx @ my"	| mx my lon lat |	mx := mPoint x.	my := mPoint y.	lon := mx / self originShift * 180.0.	lat := my / self originShift * 180.0.	lat := 180 / Double pi * (2 * (lat * Double pi / 180.0) exp arcTan - (Double pi / 2.0)).	^lat @ lon"</body></methods><methods><class-id>GlobalMercator</class-id> <category>computing</category><body package="Mapsv0" selector="latLonToMeter2:lon:">latLonToMeter2: lat lon: lon	| mx my |	mx := lon * self originShift / 180.0.	my := ((90 + lat) * Double pi / 360.0) tan log:10 / (Double pi / 180.0).	my := my * self originShift / 180.0.	^mx @ my"var degrees2meters = function(lon,lat) {var x = lon * 20037508.34 / 180;var y = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);y = y * 20037508.34 / 180;return [x, y]}"</body></methods><methods><class-id>GlobalMercator</class-id> <category>computing</category><body package="Mapsv0" selector="latLonToMeter1:lon:">latLonToMeter1: lat lon: lon	| sm_a x y mx my |		mx := (lon /180.0) * self originShift .	my:= (lat /180.0) * self originShift .	sm_a := 6378137.0.	x := mx * sm_a.	y := (my sin + 1 log: 10) * sm_a / my cos.	^x @ y"| mx my lon lat |	mx := mPoint x.	my := mPoint y.	lon := mx / self originShift * 180.0.	lat := my / self originShift * 180.0.	lat := 180 / Double pi * (2 * (lat * Double pi / 180.0) exp arcTan - (Double pi / 2.0)).	^lat @ lon""originShift =pi * 6378137"</body></methods><methods><class-id>GlobalMercator</class-id> <category>computing</category><body package="Mapsv0" selector="meterToLonLat1:">meterToLonLat1: mPoint	| mx my lon lat a |	mx := mPoint x.	my := mPoint y.	a:=  mx/ self originShift .	lon :=  a * 180.0.	lat := my / a.	lat := 180 / Double pi * (2 * (lat * Double pi / 180.0) exp arcTan - (Double pi / 2.0)).	^lon @ lat</body></methods><methods><class-id>GlobalMercator</class-id> <category>computing</category><body package="Mapsv0" selector="meterToLatLon:">meterToLatLon: mPoint	| mx my lon lat |	mx := mPoint x.	my := mPoint y.	lon := mx / self originShift * 180.0.	lat := my / self originShift * 180.0.	lat := 180 / Double pi * (2 * (lat * Double pi / 180.0) exp arcTan - (Double pi / 2.0)).	^lat @ lon"originShift =pi * 6378137"</body></methods><methods><class-id>GlobalMercator</class-id> <category>computing</category><body package="Mapsv0" selector="meterToLonLat:">meterToLonLat: mPoint	| mx my lon lat |	mx := mPoint x.	my := mPoint y.	lon := (mx / self originShift) * 180.0.	lat := (my / self originShift) * 180.0.	lat := 180 / Double pi * (2 * (lat * Double pi / 180.0) exp arcTan - (Double pi / 2.0)).	^lon @ lat</body></methods><methods><class-id>NetworkOrganisation</class-id> <category>accessing</category><body package="Mapsv0" selector="dicoNodesReached:">dicoNodesReached: anObject	dicoNodesReached := anObject</body></methods><methods><class-id>NetworkOrganisation</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>NetworkOrganisation</class-id> <category>accessing</category><body package="Mapsv0" selector="dicoNodesReached">dicoNodesReached	^dicoNodesReached</body></methods><methods><class-id>NetworkOrganisation</class-id> <category>computing</category><body package="Mapsv0" selector="buildNetwork">buildNetwork	| nodeDic pointsToSymbolDictionary networkGeometry attributes |	nodeDic := Dictionary new.	pointsToSymbolDictionary := Dictionary new.	networkGeometry := AlgoDis.NetworkConnectivity new.	"networkGeometry name: aName."	networkGeometry communications: #('none' 'defined').	self dicoNodesReached keysAndValuesDo: 			[:node :accessibles |			accessibles isEmpty				ifFalse: 					[| accessiblesName key |					accessiblesName := accessibles asOrderedCollection collect: [:dist | (dist remoteNode: node) name].					key := node name.								attributes := AlgoDis.NetworkNodeAttributes						nodeName: key asString						fanOutNodes: accessiblesName						procedureName: 'Node'.			accessibles isEmpty ifFalse: [nodeDic at: key put: attributes]					pointsToSymbolDictionary at: node put: key.					nodeDic at: key put: attributes]].	networkGeometry nodeDictionary: nodeDic.	"self networkCon: networkGeometry."	^Array with: networkGeometry with: pointsToSymbolDictionary</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>accessing</category><body package="Mapsv0" selector="yTile">yTile	^yTile</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>displaying</category><body package="Mapsv0" selector="displayOn:at:">displayOn: aGraphicContext at: point	self pixmap displayOn: aGraphicContext at: point</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>accessing</category><body package="Mapsv0" selector="zoom">zoom	^zoom</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>accessing</category><body package="Mapsv0" selector="xTile">xTile	^xTile</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>accessing</category><body package="Mapsv0" selector="zoom:">zoom: anObject	zoom := anObject</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>displaying</category><body package="Mapsv0" selector="displayOn:">displayOn: aGraphicContext	self pixmap displayOn: aGraphicContext</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>actions</category><body package="Mapsv0" selector="getGoogleSatUrlTileX:tileY:tileZoom:">getGoogleSatUrlTileX: tileX tileY: tileY tileZoom: tileZoom	^('http://khm.google.com/kh/v=125&amp;src=app&amp;x=' , tileX , '&amp;y=' , tileY , '&amp;z=' , tileZoom, '&amp;s=Gal') asURI</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>accessing</category><body package="Mapsv0" selector="pixmap:">pixmap: anObject	pixmap := anObject</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>accessing</category><body package="Mapsv0" selector="xTile:">xTile: anObject	xTile := anObject</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	image := nil.	pixmap := nil.	^self</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>actions</category><body package="Mapsv0" selector="removeTile">removeTile	image := nil</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>actions</category><body package="Mapsv0" selector="getTile">getTile	| url req resp imageStream readerClass reader img tileX tileY tileZoom |	tileX := self xTile printString.	tileY := self yTile printString.	tileZoom := self zoom printString.	url := self getGoogleUrlTileX: tileX tileY: tileY tileZoom: tileZoom.	"url := self getGoogleSatUrlTileX: tileX tileY: tileY tileZoom: tileZoom."	"url := self getOsmUrlTileX: tileX tileY: tileY tileZoom: tileZoom."	req := Net.HttpRequest get: url.	req fieldValueAt: 'User-Agent' put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	"req fieldValueAt: 'Cookie'		put: 'khcookie=fzwq2icv06GixUT7mb24z1xmUeCgkEy5mAUocQ; OGPERM=W6%3D0.0.1.1; PREF=ID=9f5cf3ac123b6d7c:U=561832629c1ab64d:FF=4:LD=fr:TM=1332757589:LM=1361285404:SG=2:S=izkq1t8lEtR5uF83; NID=67=pr_i9rPVnM_xZlxtSMxVkNgaQ0YYl1IKnbHHfdIixEZ4j2Z_eVF5VclnEUJhGPUQgojJL-g42wkTOSSeDSD9U7Fd7M2v4QKC33h1jfrS2nk5J1xl3wHzuzdXXhBMeW64'."	resp := req execute.	"resp inspect."	imageStream := resp value byteSource.		[readerClass := ImageReader readerClassFor: imageStream.	reader := readerClass new from: imageStream] ensure: [imageStream ifNotNil: [:stream | stream close]].	img := reader image.	image := img.	^self</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>actions</category><body package="Mapsv0" selector="getOsmUrlTileX:tileY:tileZoom:">getOsmUrlTileX: tileX tileY: tileY tileZoom: tileZoom	^('http://tile.openstreetmap.org/' , tileZoom , '/' , tileX , '/' , tileY , '.png') asURI</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>actions</category><body package="Mapsv0" selector="getGoogleUrlTileX:tileY:tileZoom:">getGoogleUrlTileX: tileX tileY: tileY tileZoom: tileZoom	^('http://mt.google.com/vt/x=' , tileX , '&amp;y=' , tileY , '&amp;z=' , tileZoom) asURI</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>accessing</category><body package="Mapsv0" selector="image">image	image isNil ifTrue: [self getTile].	^image</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>accessing</category><body package="Mapsv0" selector="yTile:">yTile: anObject	yTile := anObject</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>accessing</category><body package="Mapsv0" selector="pixmap">pixmap	pixmap isNil ifTrue: [pixmap := CachedImage on: self image "asRetainedMedium"].	^pixmap</body></methods><methods><class-id>Mapsv0Tile</class-id> <category>accessing</category><body package="Mapsv0" selector="image:">image: anObject	image := anObject</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="currentTile">currentTile	^model value matrixTile</body></methods><methods><class-id>NetworkPosition</class-id> <category>printing</category><body package="Mapsv0" selector="printOn:">printOn: aStream	aStream nextPutAll: 'Lon: '.	longitude printOn: aStream.	aStream nextPutAll: ' lat: '.	latitude printOn: aStream.	altitude isNil		ifFalse: 			[aStream nextPutAll: ' alt: '.			altitude printOn: aStream]</body></methods><methods><class-id>NetworkPosition</class-id> <category>computing</category><body package="Mapsv0" selector="pixelWithZoom:">pixelWithZoom: zoom	metre isNil		ifTrue: [metre := self mercator latLonToMeter: latitude lon: longitude].	^self mercator meterToPixelNew: (metre x) @ (metre y "negated") zoom: zoom</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="longitude">longitude	^longitude</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="model">model	^model</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="pixelDico:">pixelDico: anObject	pixelDico := anObject</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="metre:">metre: anObject	metre := anObject</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="mercator">mercator	^mercator</body></methods><methods><class-id>NetworkPosition</class-id> <category>initialize-release</category><body package="Mapsv0" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	longitude := nil.	latitude := nil.	altitude := nil.	pixelDico := Dictionary new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="longitude:">longitude: anObject	longitude := anObject</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="currentZoom">currentZoom	^self currentTile at: #zoom</body></methods><methods><class-id>NetworkPosition</class-id> <category>computing</category><body package="Mapsv0" selector="convertFromMetre">convertFromMetre	| lonlat |	lonlat := mercator meterToLatLon: metre.	longitude := lonlat y.	latitude := lonlat x.</body></methods><methods><class-id>NetworkPosition</class-id> <category>computing</category><body package="Mapsv0" selector="dist:">dist: aNetworkPosition	"Distance orthodromique"	| latA lonA latB lonB r d |	latA := self latitude * Double pi / 180.	lonA := self longitude * Double pi / 180.	latB := aNetworkPosition latitude * Double pi / 180.	lonB := aNetworkPosition longitude * Double pi / 180.	"r := 6371."	r := 6378137.	"d := 2 * r * ( () sqrt ) arcSin."	d := r * (latA sin * latB sin + (latA cos * latB cos * (lonB - lonA) cos)) arcCos.	^d</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="pixel">pixel	| zoom |	zoom := self currentZoom.	^pixelDico at: zoom ifAbsentPut: [self calculatePixelForZoom: zoom]</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="altitude">altitude	^altitude</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="currentTile:">currentTile: anObject	currentTile := anObject</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="pixelDico">pixelDico	^pixelDico</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="latitude">latitude	^latitude</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="calculatePixelForZoom:">calculatePixelForZoom: zoom	metre isNil ifTrue:[metre := self mercator latLonToMeter: latitude lon: longitude].	^self mercator meterToPixelNew: metre zoom: self currentZoom</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="altitude:">altitude: anObject	altitude := anObject</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="model:">model: anObject	model := anObject</body></methods><methods><class-id>NetworkPosition</class-id> <category>computing</category><body package="Mapsv0" selector="setCurrentZoom:">setCurrentZoom: z	currentZoom := z</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="latitude:">latitude: anObject	latitude := anObject</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="mercator:">mercator: anObject	mercator := anObject</body></methods><methods><class-id>NetworkPosition</class-id> <category>accessing</category><body package="Mapsv0" selector="metre">metre	^metre</body></methods><methods><class-id>MapTileCache</class-id> <category>accessing</category><body package="MapAccess" selector="dicoZoom:">dicoZoom: anObject	dicoZoomVH value: anObject</body></methods><methods><class-id>MapTileCache</class-id> <category>actions</category><body package="MapAccess" selector="emptyCache">emptyCache	self dicoZoom: (Dictionary new: 21)</body></methods><methods><class-id>MapTileCache</class-id> <category>accessing</category><body package="MapAccess" selector="x:y:zoom:">x: xTile y: yTile zoom: zoom	| modulo x y dico |	modulo := 2 raisedTo: zoom.	x := xTile \\ modulo.	y := yTile \\ modulo.	dico := self dicoZoom at: zoom ifAbsentPut: [Dictionary new: 16].	^dico at: x @ y ifAbsentPut: [MapTile x: x y: y zoom: zoom]</body></methods><methods><class-id>MapTileCache</class-id> <category>initialize-release</category><body package="MapAccess" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	dicoZoom := Dictionary new: 22.	dicoZoomVH := (Dictionary new: 22) asValue.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>MapTileCache</class-id> <category>accessing</category><body package="MapAccess" selector="dicoZoom">dicoZoom	^dicoZoomVH value</body></methods><methods><class-id>MapTile</class-id> <category>accessing</category><body package="MapAccess" selector="x">x	^x</body></methods><methods><class-id>MapTile</class-id> <category>accessing</category><body package="MapAccess" selector="tile">tile	^tile isNil ifFalse: [tile] ifTrue: [self getTile]</body></methods><methods><class-id>MapTile</class-id> <category>displaying</category><body package="MapAccess" selector="displayOn:">displayOn: aGraphicsContext	self tile displayOn: aGraphicsContext</body></methods><methods><class-id>MapTile</class-id> <category>accessing</category><body package="MapAccess" selector="y:">y: anObject	y := anObject</body></methods><methods><class-id>MapTile</class-id> <category>accessing</category><body package="MapAccess" selector="zoom">zoom	^zoom</body></methods><methods><class-id>MapTile</class-id> <category>accessing</category><body package="MapAccess" selector="getTile">getTile	| httpResponse imageStream readerClass reader |	httpResponse := MapServerConnection x: x y: y zoom: zoom.	imageStream := httpResponse value byteSource.		[readerClass := ImageReader readerClassFor: imageStream.	reader := readerClass new from: imageStream] ensure: [imageStream ifNotNil: [:stream | stream close]].	image := reader image.	tile := image asRetainedMedium.	^tile</body></methods><methods><class-id>MapTile</class-id> <category>displaying</category><body package="MapAccess" selector="displayOn:at:">displayOn: aGraphicsContext at: position	self tile displayOn: aGraphicsContext at: position</body></methods><methods><class-id>MapTile</class-id> <category>initialize-release</category><body package="MapAccess" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>MapTile</class-id> <category>accessing</category><body package="MapAccess" selector="x:">x: anObject	x := anObject</body></methods><methods><class-id>MapTile</class-id> <category>accessing</category><body package="MapAccess" selector="y">y	^y</body></methods><methods><class-id>MapTile</class-id> <category>accessing</category><body package="MapAccess" selector="zoom:">zoom: anObject	zoom := anObject</body></methods><methods><class-id>MapServerConnection</class-id> <category>initialize-release</category><body package="MapAccess" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testGpsPosition">testGpsPosition	"| shape shpFigure tabFigure size shpObject filename |	filename := '/export/users/wsn/Herry/Netgen/shapebuild/example/europe_western_europe_france_bretagne_administrative.shx'.	shape := MyShapes new.	tabFigure := OrderedCollection new.	(0 to: 1) do: 			[:i |			shpObject := shape oneSHP: filename with: i.			size := shape nParts: shpObject.			(1 to: size) do: 					[:ix |					ix = size						ifTrue: 							[shpFigure := ShpFigure new.							shpFigure type: ((shape panPartTypeToTab: shpObject) at: size).							(((shape panPartStartToTab: shpObject) at: ix) to: (shape nVertices: shpObject)) do: 									[:j |									shpFigure x add: ((shape padfToTab: shpObject with: #padfX) at: j).									shpFigure y add: ((shape padfToTab: shpObject with: #padfY) at: j)									""shpFigure z add: ((shape padfToTab: shpObject with: #padfZ) at: j).									shpFigure m add: ((shape padfToTab: shpObject with: #padfM) at: j)""].							tabFigure add: shpFigure]						ifFalse: 							[shpFigure := ShpFigure new.							shpFigure type: ((shape panPartTypeToTab: shpObject) at: i).							(((shape panPartStartToTab: shpObject) at: i) to: ((shape panPartStartToTab: shpObject) at: i + 1)) do: 									[:j |									shpFigure x add: ((shape padfToTab: shpObject with: #padfX) at: j).									shpFigure y add: ((shape padfToTab: shpObject with: #padfY) at: j)									""shpFigure z add: ((shape padfToTab: shpObject with: #padfZ) at: j).									shpFigure m add: ((shape padfToTab: shpObject with: #padfM) at: j)""].							tabFigure add: shpFigure]]].	(tabFigure at:1) toGPSPosition inspect"</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="panPartTypeToTab:">panPartTypeToTab: aShape	| tab |	tab := OrderedCollection new.	(0 to: (aShape memberAt: #nParts) - 1) do: [:i | tab add: ((aShape memberAt: #panPartType) at: i)].	^tab</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testGPSPositionTab">testGPSPositionTab	"  MyShapes new testGPSPositionTab inspect  "	^(ShapefileReader new toGPSPositionTab: '/export/users/wsn/Herry/Netgen/building.shx')</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="maxBoundZ">maxBoundZ	padfMaxBoundPtr isNil ifFalse: [^padfMaxBoundPtr at: 2] ifTrue: [^nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="panPartStartToTab:">panPartStartToTab: aShape	| tab |	tab := OrderedCollection new.	(0 to: (aShape memberAt: #nParts) - 1) do: [:i | tab add: (((aShape memberAt: #panPartStart) at: i)+1)].	^tab</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="filename:">filename: anObject	filename := anObject</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testDumpSHP">testDumpSHP	| test |	test := ShapefileReader new.	(test dumpSHP: '/export/users/wsn/Herry/Netgen/shapebuild/example/europe_western_europe_france_bretagne_administrative.shx') inspect</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="nVertices:">nVertices: aShape	^aShape memberAt: #nVertices</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="entities">entities	entitiesPtr isNil ifFalse: [^entitiesPtr contents] ifTrue: [^nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="filename">filename	^filename</body></methods><methods><class-id>ShapefileReader</class-id> <category>api</category><body package="MapAccess" selector="close">close	"Care must be taken when you free memory!"	handle isNil		ifFalse: 			[self SHPClose: handle.			handle := nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testToShapeFigureTab">testToShapeFigureTab	| shape tabFigure |	shape := ShapefileReader new.	tabFigure := shape toShapeFigureTab: '/export/users/wsn/Herry/legall/batiment/bati.shx'. 	^self adapt: tabFigure</body></methods><methods><class-id>ShapefileReader</class-id> <category>api</category><body package="MapAccess" selector="readObject:">readObject: anInteger	handle isNil ifFalse: [^self SHPReadObject: handle with: anInteger] ifTrue: [^nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testPartStartToTab">testPartStartToTab	| shape tab |	shape := ShapefileReader new.	tab := shape toTab: '/export/users/wsn/Herry/Netgen/shapebuild/example/europe_western_europe_france_bretagne_water.shx'.	(shape panPartStartToTab: (tab at: 5)) inspect.</body></methods><methods><class-id>ShapefileReader</class-id> <category>api</category><body package="MapAccess" selector="getInfo">getInfo	handle isNil		ifFalse: 			[entitiesPtr := CIntegerType int gcMalloc.			shapeTypePtr := CIntegerType int gcMalloc.			padfMinBoundPtr := CLimitedPrecisionRealType double gcMalloc: 4.			padfMaxBoundPtr := CLimitedPrecisionRealType double gcMalloc: 4.			self				SHPGetInfo: handle				with: entitiesPtr				with: shapeTypePtr				with: padfMinBoundPtr				with: padfMaxBoundPtr]</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="GPSPositionTabOld:">GPSPositionTabOld:filename	"| shape tabGpsPos tabFigure |	shape := MyShapes new.	tabGpsPos := OrderedCollection new.	tabFigure := shape toShapeFigureTab: filename.	tabFigure do: [:figure | tabGpsPos add: figure toGPSPosition].	^tabGpsPos"</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="toGPSPositionTab:">toGPSPositionTab: filename	"| shape nbShape tabFigure size shpObject gps tabGps |	shape := MyShapes new.	nbShape := shape SHPSize: filename.	tabFigure := OrderedCollection new.	(0 to: nbShape - 1) do: 			[:i |			""shpObject := shape oneSHP: filename with: i.""			shpObject := ShapeCache new oneSHP: filename with: i.			size := shape nParts: shpObject.			(1 to: size) do: 					[:ix |					ix = size						ifTrue: 							[tabGps := OrderedCollection new.							(((shape panPartStartToTab: shpObject) at: ix) to: (shape nVertices: shpObject)) do: 									[:j |									gps := GPSPosition new.									gps										longitude: ((shape padfToTab: shpObject with: #padfX) at: j);										latitude: ((shape padfToTab: shpObject with: #padfY) at: j).									tabGps add: gps].							tabFigure add: tabGps]						ifFalse: 							[tabGps := OrderedCollection new.							(((shape panPartStartToTab: shpObject) at: ix) to: ((shape panPartStartToTab: shpObject) at: ix + 1)) do: 									[:j |									gps := GPSPosition new.									gps										longitude: ((shape padfToTab: shpObject with: #padfX) at: j);										latitude: ((shape padfToTab: shpObject with: #padfY) at: j).									tabGps add: gps].							tabFigure add: tabGps]]].	^tabFigure"</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testEnsemblePoint">testEnsemblePoint	| shape tabShape nbShape |	shape := ShapefileReader new.	ShapefileReader unloadLibraries.	tabShape := OrderedCollection new.	nbShape := 200.	(0 to: nbShape - 1)		do: [:i | tabShape add: (shape oneSHP: '/export/users/wsn/Herry/Netgen/shapebuild/example/europe_western_europe_france_bretagne_administrative.shx' with: i)].	tabShape inspect</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="minBoundZ">minBoundZ	padfMinBoundPtr isNil ifFalse: [^padfMinBoundPtr at: 2] ifTrue: [^nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="tabShapeFigureToTabPoint:">tabShapeFigureToTabPoint: tabShpFigure	"| tabPoint |	tabPoint := OrderedCollection new.	tabShpFigure do: [:shpFigure | tabPoint add: shpFigure toPoint].	^tabPoint"</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="minBoundM">minBoundM	padfMinBoundPtr isNil ifFalse: [^padfMinBoundPtr at: 3] ifTrue: [^nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testToShapeFigureTabNew">testToShapeFigureTabNew	| shape tabFigure |	shape := ShapefileReader new.	tabFigure := shape toShapeFigureTab: '/export/users/wsn/Herry/legall/batiment/bati.shx'.	tabFigure inspect</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="toShapeFigureTab:">toShapeFigureTab: filename	"| shape nbShape shpFigure tabFigure size shpObject |	shape := MyShapes new.	nbShape := shape SHPSize: filename.	tabFigure := OrderedCollection new.	(0 to: nbShape - 1) do: 			[:i |			shpObject := shape oneSHP: filename with: i.			size := shape nParts: shpObject.			(1 to: size) do: 					[:ix |					ix = size						ifTrue: 							[shpFigure := ShpFigure new.							shpFigure type: ((shape panPartTypeToTab: shpObject) at: size).							(((shape panPartStartToTab: shpObject) at: ix) to: (shape nVertices: shpObject)) do: 									[:j |									shpFigure x add: ((shape padfToTab: shpObject with: #padfX) at: j).									shpFigure y add: ((shape padfToTab: shpObject with: #padfY) at: j)									""shpFigure z add: ((shape padfToTab: shpObject with: #padfZ) at: j).									shpFigure m add: ((shape padfToTab: shpObject with: #padfM) at: j)""].							tabFigure add: shpFigure]						ifFalse: 							[shpFigure := ShpFigure new.							shpFigure type: ((shape panPartTypeToTab: shpObject) at: ix).							(((shape panPartStartToTab: shpObject) at: ix) to: ((shape panPartStartToTab: shpObject) at: ix + 1)) do: 									[:j |									shpFigure x add: ((shape padfToTab: shpObject with: #padfX) at: j).									shpFigure y add: ((shape padfToTab: shpObject with: #padfY) at: j)									""shpFigure z add: ((shape padfToTab: shpObject with: #padfZ) at: j).									shpFigure m add: ((shape padfToTab: shpObject with: #padfM) at: j)""].							tabFigure add: shpFigure]]].	^tabFigure"</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="minBoundY">minBoundY	padfMinBoundPtr isNil ifFalse: [^padfMinBoundPtr at: 1] ifTrue: [^nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="toTab:">toTab:filename	| shape tab nbShape |	shape := ShapefileReader new.	tab := OrderedCollection new.	nbShape := shape SHPSize:filename.	(0 to: nbShape - 1) do: [:i | tab add: (shape oneSHP: filename with: i)].	^tab.</body></methods><methods><class-id>ShapefileReader</class-id> <category>api</category><body package="MapAccess" selector="open">open	handle := self SHPOpen: filename with: 'rb'</body></methods><methods><class-id>ShapefileReader</class-id> <category>api</category><body package="MapAccess" selector="destroyObject:">destroyObject: psObjectPtr	psObjectPtr isNil ifFalse: [self SHPDestroyObject: psObjectPtr]</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="maxBoundX">maxBoundX	padfMaxBoundPtr isNil ifFalse: [^padfMaxBoundPtr at: 0] ifTrue: [^nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testEnsemblePointNew">testEnsemblePointNew	| shape tabShape nbShape |	shape := ShapefileReader new.	ShapefileReader unloadLibraries.	tabShape := OrderedCollection new.	nbShape := shape SHPSize: '/export/users/wsn/Herry/Netgen/shapebuild/example/europe_western_europe_france_bretagne_administrative.shx'.	(0 to: nbShape - 1)		do: [:i | tabShape add: (shape oneSHP: '/export/users/wsn/Herry/Netgen/shapebuild/example/europe_western_europe_france_bretagne_administrative.shx' with: i)].	tabShape inspect</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testSize">testSize	| test |	test := ShapefileReader new.	(test SHPSize:'/export/users/wsn/Herry/Netgen/shapebuild/example/europe_western_europe_france_bretagne_water.shx') inspect.</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testpadfXToTab">testpadfXToTab	| shape tab |	shape := ShapefileReader new.	tab := shape toTab: '/export/users/wsn/Herry/Netgen/shapebuild/example/europe_western_europe_france_bretagne_water.shx'.	(shape padfToTab:(tab at: 1)with: #padfX) inspect.</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testTab">testTab	| shape tab |	shape := ShapefileReader new.	tab := shape toTab: '/export/users/wsn/Herry/Netgen/shapebuild/example/europe_western_europe_france_bretagne_water.shx'.	tab inspect</body></methods><methods><class-id>ShapefileReader</class-id> <category>old testing</category><body package="MapAccess" selector="testOneSHP">testOneSHP	| test |	test := ShapefileReader new.	(test oneSHP: '/export/users/wsn/Herry/Netgen/shapebuild/example/europe_western_europe_france_bretagne_administrative.shx' with: 2) inspect</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="maxBoundM">maxBoundM	padfMaxBoundPtr isNil ifFalse: [^padfMaxBoundPtr at: 3] ifTrue: [^nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="padfToTab:with:">padfToTab: aShape with: padf	| tab |	tab := OrderedCollection new.	(0 to: (aShape memberAt: #nVertices) - 1) do: [:i | tab add: ((aShape memberAt: padf) at: i)].	^tab.</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="nParts:">nParts: aShape	^aShape memberAt: #nParts</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="minBoundX">minBoundX	padfMinBoundPtr isNil ifFalse: [^padfMinBoundPtr at: 0] ifTrue: [^nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="shapeType">shapeType	shapeTypePtr isNil ifFalse: [^shapeTypePtr contents] ifTrue: [^nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>accessing</category><body package="MapAccess" selector="maxBoundY">maxBoundY	padfMaxBoundPtr isNil ifFalse: [^padfMaxBoundPtr at: 1] ifTrue: [^nil]</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="toSHPPositionTab:origin:scale:">toSHPPositionTab: filename origin:o scale:scale	"| shape nbShape tabFigure size shpObject gps tabGps |	shape := MyShapes new.	nbShape := shape SHPSize: filename.	tabFigure := OrderedCollection new.	(0 to: nbShape - 1) do: 			[:i |			shpObject := shape oneSHP: filename with: i.			size := shape nParts: shpObject.			(1 to: size) do: 					[:ix |					ix = size						ifTrue: 							[tabGps := OrderedCollection new.							(((shape panPartStartToTab: shpObject) at: ix) to: (shape nVertices: shpObject)) do: 									[:j |									gps := GPSPosition new.									gps										longitude: ((shape padfToTab: shpObject with: #padfX) at: j);										latitude: ((shape padfToTab: shpObject with: #padfY) at: j).									tabGps add: (gps convertFromOrigin:o scale:scale )].							tabFigure add: tabGps]						ifFalse: 							[tabGps := OrderedCollection new.							(((shape panPartStartToTab: shpObject) at: ix) to: ((shape panPartStartToTab: shpObject) at: ix + 1)) do: 									[:j |									gps := GPSPosition new.									gps										longitude: ((shape padfToTab: shpObject with: #padfX) at: j);										latitude: ((shape padfToTab: shpObject with: #padfY) at: j).									tabGps add: (gps convertFromOrigin:o scale:scale )].							tabFigure add: tabGps]]].	^tabFigure"</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="affichage:">affichage:col	| win comp range wrapper points I |	range := 0 to: 500.	win := ScheduledWindow	model: nil	label: #UnclippedExample &lt;&lt; #labels &gt;&gt; 'unclipped'	minimumSize: range last @ range last.			points := col copyWith:col first.	"relie la derniere avec la premiere"			I := Polyline vertices: points.			comp := CompositePart new.			wrapper := I asFiller.			comp add: ((GraphicsAttributesWrapper on: wrapper) attributes: (GraphicsAttributes new paint: ColorValue green)).		comp add: I asStroker.	win component: (BoundedWrapper on: comp).	win openIn: (50 @ 50 extent: 500 @ 500)	"	|t point col point2 |			point := OrderedCollection new.			point add: 350.154d@100.2202d;			add:  150.524654d@150.15241d;			add:  50.456d@60.4564d;			add:  110.546d@100.46847d.	t := MyShapes new.	t affichage: point."</body></methods><methods><class-id>ShapefileReader</class-id> <category>old computing</category><body package="MapAccess" selector="adapt:">adapt: tabFigure	"^tabFigure collect: [:fig | Polyline vertices: fig toPoint]"</body></methods><methods><class-id>MapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="zoom">zoom	^zoom</body></methods><methods><class-id>MapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="component:">component: anObject	component := anObject</body></methods><methods><class-id>MapAccess</class-id> <category>initialize-release</category><body package="MapAccess" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	mapTileCache := MapTileCache new.	clicPointVH := (0 @ 0) asValue.	^self</body></methods><methods><class-id>MapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="component">component	^component</body></methods><methods><class-id>MapAccess</class-id> <category>constants</category><body package="MapAccess" selector="tileHeight">tileHeight	^256</body></methods><methods><class-id>MapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="clicPointVH">clicPointVH	^clicPointVH</body></methods><methods><class-id>MapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="xTile">xTile	^xTile</body></methods><methods><class-id>MapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="x:y:zoom:">x: x y: y zoom: z	xTile := x.	yTile := y.	zoom := z</body></methods><methods><class-id>MapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="mapTileCache">mapTileCache	^mapTileCache</body></methods><methods><class-id>MapAccess</class-id> <category>constants</category><body package="MapAccess" selector="tileWidth">tileWidth	^256</body></methods><methods><class-id>MapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="yTile">yTile	^yTile</body></methods><methods><class-id>MapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="mapTileCache:">mapTileCache: anObject	mapTileCache := anObject</body></methods><methods><class-id>MapAccess</class-id> <category>displaying</category><body package="MapAccess" selector="displayOn:">displayOn: aGraphicsContext	| cp origin corner startX startY endX endY tileWidth tileHeight |	tileWidth := self tileWidth.	tileHeight := self tileHeight.	cp := aGraphicsContext clippingBounds.	origin := cp origin.	corner := cp corner.	startX := origin x // tileWidth.	startY := origin y // tileHeight.	endX := corner x // tileWidth.	endY := corner y // tileHeight.	startX to: endX		do: 			[:x |			startY to: endY				do: 					[:y |					| currentTileX currentTileY mapTile |					currentTileX := xTile + x.					currentTileY := yTile + y.					mapTile := mapTileCache x: currentTileX y: currentTileY zoom: zoom.					mapTile displayOn: aGraphicsContext at: (x * tileWidth) @ (y * tileHeight)]]</body></methods><methods><class-id>MapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="clicPointVH:">clicPointVH: anObject	clicPointVH := anObject</body></methods><methods><class-id>GeoPosition</class-id> <category>converting</category><body package="MapAccess" selector="toPixelWithZoomShift:">toPixelWithZoomShift: zoom	| mx my res px py xy |	xy := self toMeter.	res := self resolution: zoom.	mx := xy x.	my := xy y.	px := mx / res.	py := my / res.	^px rounded @ py rounded</body></methods><methods><class-id>GeoPosition</class-id> <category>printing</category><body package="MapAccess" selector="printOn:">printOn: aStream	longitude printOn: aStream.	aStream nextPutAll: '° ; '.	latitude printOn: aStream.	(elevation isNil or: [elevation isZero])		ifTrue: [aStream nextPut: $°]		ifFalse: 			[aStream nextPutAll: '° ; '.			elevation printOn: aStream]</body></methods><methods><class-id>GeoPosition</class-id> <category>converting</category><body package="MapAccess" selector="toMeter">toMeter	^toMeter isNil		ifFalse: [toMeter]		ifTrue: 			[| mx my |			mx := longitude * self class originShift / 180.0.			my := ((90 + latitude) * Double pi / 360.0) tan ln / (Double pi / 180.0).			my := my * self class originShift / 180.0.			toMeter := mx @ my.			toMeter]</body></methods><methods><class-id>GeoPosition</class-id> <category>accessing</category><body package="MapAccess" selector="longitude:">longitude: anObject	longitude := anObject</body></methods><methods><class-id>GeoPosition</class-id> <category>initialize-release</category><body package="MapAccess" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	longitude := nil.	latitude := nil.	elevation := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>GeoPosition</class-id> <category>converting</category><body package="MapAccess" selector="toPixelWithZoom:">toPixelWithZoom: zoom	| mx my res px py xy |	xy := self toMeter.	res := self resolution: zoom.	mx := xy x.	my := xy y negated.	px := (mx + self class originShift) / res.	py := (my + self class originShift) / res.	^px rounded @ py rounded</body></methods><methods><class-id>GeoPosition</class-id> <category>accessing</category><body package="MapAccess" selector="longitude">longitude	^longitude</body></methods><methods><class-id>GeoPosition</class-id> <category>accessing</category><body package="MapAccess" selector="elevation:">elevation: anObject	elevation := anObject</body></methods><methods><class-id>GeoPosition</class-id> <category>accessing</category><body package="MapAccess" selector="latitude">latitude	^latitude</body></methods><methods><class-id>GeoPosition</class-id> <category>accessing</category><body package="MapAccess" selector="latitude:">latitude: anObject	latitude := anObject</body></methods><methods><class-id>GeoPosition</class-id> <category>converting</category><body package="MapAccess" selector="resolution:">resolution: zoom	^self class initialResolution / (2 raisedTo: zoom)</body></methods><methods><class-id>GeoPosition</class-id> <category>accessing</category><body package="MapAccess" selector="elevation">elevation	^elevation</body></methods><methods><class-id>MapAccessView</class-id> <category>displaying</category><body package="MapAccess" selector="displayOn:">displayOn: aGraphicsContext	| originX originY offsetX offsetY component |	self model value displayOn: aGraphicsContext.	component := self model value component.	component isNil		ifFalse: 			[originX := self model value xTile.			originY := self model value yTile.			offsetX := (originX * 256) negated.			offsetY := (originY * 256) negated.			aGraphicsContext translateBy: offsetX @ offsetY.			component displayOn: aGraphicsContext "at: (offsetX @ offsetY scaledBy: -1)"]</body></methods><methods><class-id>MapAccessView</class-id> <category>initialize-release</category><body package="MapAccess" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doMoveEast">doMoveEast	self xTile value: self xTile value + 1.	self doUpdateTile</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doMoveSouth">doMoveSouth	self yTile value: self yTile value + 1.	self doUpdateTile</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doMoveWest">doMoveWest	self xTile value: self xTile value - 1.	self doUpdateTile</body></methods><methods><class-id>UIMapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="colBat">colBat	^colBat</body></methods><methods><class-id>UIMapAccess</class-id> <category>aspects</category><body package="MapAccess" selector="longitude">longitude	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^longitude isNil		ifTrue:			[longitude := 0 asValue]		ifFalse:			[longitude]</body></methods><methods><class-id>UIMapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="mapAccess:">mapAccess: aValue	^mapAccessVH value: aValue</body></methods><methods><class-id>UIMapAccess</class-id> <category>changing</category><body package="MapAccess" selector="changeZoom">changeZoom	| actualZoom difference xt yt |	actualZoom := self zoom value.	difference := actualZoom - oldZoom.	difference = 0 ifTrue: [^self].	xt := self xTile value.	yt := self yTile value.	difference &gt; 0		ifTrue: 			["zoom in"			difference timesRepeat: [xt := xt * 2].			difference timesRepeat: [yt := yt * 2]]		ifFalse: 			["zoom out"			difference := difference negated.			difference timesRepeat: [xt := (xt / 2) truncated].			difference timesRepeat: [yt := (yt / 2) truncated]].	self xTile value: xt.	self yTile value: yt.	oldZoom := actualZoom.	validComponent := false</body></methods><methods><class-id>UIMapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="colBat:">colBat: anObject	colBat := anObject</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doMoveNW">doMoveNW	self yTile value: self yTile value - 1.	self xTile value: self xTile value - 1.	self doUpdateTile</body></methods><methods><class-id>UIMapAccess</class-id> <category>aspects</category><body package="MapAccess" selector="zoom">zoom	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^zoom isNil		ifTrue:			[zoom := 0 asValue]		ifFalse:			[zoom]</body></methods><methods><class-id>UIMapAccess</class-id> <category>aspects</category><body package="MapAccess" selector="yTile">yTile	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^yTile isNil		ifTrue:			[yTile := 0 asValue]		ifFalse:			[yTile]</body></methods><methods><class-id>UIMapAccess</class-id> <category>fileIn/Out</category><body package="MapAccess" selector="doOpenShapefile">doOpenShapefile	| shxFilename |	shxFilename := Dialog				requestFileNameWithMessage: 'Browse Shapefile file'				default: '*.shx'				version: #mustBeOld				ifFail: [^nil]				for: nil.	"TimeProfiler profile: [self parseSHXFileOrString: shxFilename]."	self parseSHXFileOrString: shxFilename</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doOpenTileCacheConfig">doOpenTileCacheConfig	"This stub method was generated by UIDefiner"	| ui |	ui := UIMapTileCacheConfig new.	"ui dicoChoices value addAll: self mapAccess mapTileCache dicoZoom keys."	ui parent: self.	ui open</body></methods><methods><class-id>UIMapAccess</class-id> <category>constants</category><body package="MapAccess" selector="initialXTile">initialXTile	^1996</body></methods><methods><class-id>UIMapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="tileView:">tileView: anObject	tileView := anObject</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doUpdateTile">doUpdateTile	validComponent ifFalse: [self updateShapeObjects].	self mapAccess: (self mapAccess				x: self xTile value				y: self yTile value				zoom: self zoom value)</body></methods><methods><class-id>UIMapAccess</class-id> <category>changing</category><body package="MapAccess" selector="mapClic">mapClic	| clic xclic yclic currentTileDico currentZoom tileX tileY pixelX pixelY metre latlon res mercator metre2 difference |	clic := self mapAccess clicPointVH value.	xclic := clic x.	yclic := clic y.	"On récupère les coordonnées du carreau en haut à gauche"	currentTileDico := self mapAccess.	currentZoom := currentTileDico zoom.	currentZoom isNil ifTrue: [^nil].	tileX := currentTileDico xTile.	tileY := currentTileDico yTile.	"upperLeftTile := tileX @ tileY."	"Calcul des coordonnées en pixel du point cliqué"	pixelX := tileX * 256 + xclic.	pixelY := tileY * 256 + yclic.	"Calcul des coordonnées en mètre du point cliqué"	mercator := GlobalMercator new.	metre := mercator pixelToMeterNew: pixelX @ pixelY zoom: currentZoom.	"metre2 := mercator pixelToMeter: (pixelX + 1) @ pixelY zoom: currentZoom."	"difference := metre2 x - metre x."	"Calcul des coordonnées WGS84 du point cliqué"	latlon := mercator meterToLatLon: metre.	self longitude value: latlon y.	self latitude value: latlon x .	"Calcul de l'échelle"	res := mercator resolution: currentTileDico zoom.	res := res * latlon x negated degreesToRadians cos.	self echelle value: res.	"self echelle2 value: difference"</body></methods><methods><class-id>UIMapAccess</class-id> <category>aspects</category><body package="MapAccess" selector="xTile">xTile	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^xTile isNil		ifTrue:			[xTile := 0 asValue]		ifFalse:			[xTile]</body></methods><methods><class-id>UIMapAccess</class-id> <category>initialize-release</category><body package="MapAccess" selector="initialize">initialize	super initialize.	mapAccessVH := MapAccess new asValue.	tileView := MapAccessView new.	tileView model: mapAccessVH.	tileView controller: MapAccessController new.	self xTile value: 0.	self yTile value: 0.	self zoom value: 0.	self oldZoom: 0.	self zoom onChangeSend: #changeZoom to: self.	validComponent := false.	mapAccessVH value clicPointVH onChangeSend: #mapClic to: self.	self doUpdateTile</body></methods><methods><class-id>UIMapAccess</class-id> <category>aspects</category><body package="MapAccess" selector="latitude">latitude	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^latitude isNil		ifTrue:			[latitude := 0 asValue]		ifFalse:			[latitude]</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doReset">doReset	self zoom retractInterestsFor: self.	self xTile value: self initialXTile.	self yTile value: self initialYTile.	self zoom value: self initialZoom.	self oldZoom: self initialZoom.	validComponent := false.	self zoom onChangeSend: #changeZoom to: self</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doQuit">doQuit	self closeRequest</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doMoveSW">doMoveSW	self yTile value: self yTile value + 1.	self xTile value: self xTile value - 1.	self doUpdateTile</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doMoveNE">doMoveNE	self yTile value: self yTile value - 1.	self xTile value: self xTile value + 1.	self doUpdateTile</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doMoveNorth">doMoveNorth	self yTile value: self yTile value - 1.	self doUpdateTile</body></methods><methods><class-id>UIMapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="oldZoom:">oldZoom: anObject	oldZoom := anObject</body></methods><methods><class-id>UIMapAccess</class-id> <category>actions</category><body package="MapAccess" selector="doMoveSE">doMoveSE	self yTile value: self yTile value + 1.	self xTile value: self xTile value + 1.	self doUpdateTile</body></methods><methods><class-id>UIMapAccess</class-id> <category>constants</category><body package="MapAccess" selector="initialYTile">initialYTile	^1416</body></methods><methods><class-id>UIMapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="tileView">tileView	^tileView</body></methods><methods><class-id>UIMapAccess</class-id> <category>fileIn/Out</category><body package="MapAccess" selector="parseSHXFileOrString:">parseSHXFileOrString: shxFilename	colBat := ShapefileReader readAllObjectsFromShapefile: shxFilename.	self updateShapeObjects</body></methods><methods><class-id>UIMapAccess</class-id> <category>fileIn/Out</category><body package="MapAccess" selector="updateShapeObjects">updateShapeObjects	colBat isNil		ifFalse: 			[| cp currentZoom |			currentZoom := self zoom value.			cp := CompositePart new.			colBat do: 					[:each |					| sw |					sw := StrokingWrapper on: (each convertWithZoom: currentZoom).					cp addComponent: sw].			self mapAccess component: cp.			validComponent := true]</body></methods><methods><class-id>UIMapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="oldZoom">oldZoom	^oldZoom</body></methods><methods><class-id>UIMapAccess</class-id> <category>accessing</category><body package="MapAccess" selector="mapAccess">mapAccess	^mapAccessVH value</body></methods><methods><class-id>UIMapAccess</class-id> <category>interface closing</category><body package="MapAccess" selector="requestForWindowClose">requestForWindowClose	^Dialog confirm: 'You are about to close the window!'</body></methods><methods><class-id>UIMapAccess</class-id> <category>constants</category><body package="MapAccess" selector="initialZoom">initialZoom	^12</body></methods><methods><class-id>UIMapAccess</class-id> <category>aspects</category><body package="MapAccess" selector="echelle">echelle	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^echelle isNil		ifTrue:			[echelle := 0 asValue]		ifFalse:			[echelle]</body></methods><methods><class-id>Batiment</class-id> <category>computing</category><body package="MapAccess" selector="convertWithZoomShift:">convertWithZoomShift: zoom	| points |	points := self contour collect: [:geopos | geopos toPixelWithZoomShift: zoom].	^Polyline vertices: points</body></methods><methods><class-id>Batiment</class-id> <category>accessing</category><body package="MapAccess" selector="contour:">contour: anObject	contour := anObject</body></methods><methods><class-id>Batiment</class-id> <category>adding</category><body package="MapAccess" selector="addPosition:">addPosition: position	contour add: position</body></methods><methods><class-id>Batiment</class-id> <category>initialize-release</category><body package="MapAccess" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Batiment</class-id> <category>accessing</category><body package="MapAccess" selector="contour">contour	^contour</body></methods><methods><class-id>Batiment</class-id> <category>computing</category><body package="MapAccess" selector="convertWithZoom:">convertWithZoom: zoom	| points |	points := self contour collect: [:geopos | geopos toPixelWithZoom: zoom].	^Polyline vertices: points</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>aspects</category><body package="MapAccess" selector="dicoChoices">dicoChoices	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^dicoChoices isNil 		ifTrue: [dicoChoices := SelectionInList new] 		ifFalse: [dicoChoices]</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>accessing</category><body package="MapAccess" selector="parent">parent	^parent</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>initialize-release</category><body package="MapAccess" selector="initialize">initialize	"self dicoChoices list addAll: MapServerConnection serverList.	self dicoBox value: (MapServerConnection serverList				at: MapServerConnection selectedServer)"	self server value: self serverName.	self server onChangeSend: #changeServer to: self</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>private</category><body package="MapAccess" selector="serverId">serverId	^self serverList indexOf: self server value</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>actions</category><body package="MapAccess" selector="doEmptyCache">doEmptyCache	self parent mapAccess mapTileCache emptyCache</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>private</category><body package="MapAccess" selector="serverList">serverList	^#(#googleMap #OCM #OSM)</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>aspects</category><body package="MapAccess" selector="dicoBox">dicoBox	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^dicoBox isNil		ifTrue:			[dicoBox := String new asValue]		ifFalse:			[dicoBox]</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>private</category><body package="MapAccess" selector="serverName">serverName	^self serverList at: MapServerConnection selectedServer</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>aspects</category><body package="MapAccess" selector="dicoList">dicoList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^dicoList isNil		ifTrue:			[dicoList := SelectionInList new]		ifFalse:			[dicoList]</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>aspects</category><body package="MapAccess" selector="server">server	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^server isNil		ifTrue:			[server := nil asValue]		ifFalse:			[server]</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>changing</category><body package="MapAccess" selector="changeServer">changeServer	MapServerConnection selectedServer: self serverId</body></methods><methods><class-id>UIMapTileCacheConfig</class-id> <category>accessing</category><body package="MapAccess" selector="parent:">parent: anObject	parent := anObject</body></methods><methods><class-id>MapAccessController</class-id> <category>initialize-release</category><body package="MapAccess" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>MapAccessController</class-id> <category>events</category><body package="MapAccess" selector="redButtonPressedEvent:">redButtonPressedEvent: aRedButtonPressedEvent	| cursorPoint |	cursorPoint := self sensor cursorPointFor: aRedButtonPressedEvent.	self model value clicPointVH value: cursorPoint</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>accessing</category><body package="QuickMap" selector="masterWindow">masterWindow	^masterWindow</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="tabs">tabs	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^tabs isNil		ifTrue: 			[(tabs := SelectionInList with: self labelArray) selectionIndex: 1.			tabs selectionIndexHolder onChangeSend: #tabsChanged to: self.			tabs]		ifFalse: [tabs]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>accessing</category><body package="QuickMap" selector="masterWindow:">masterWindow: anObject	masterWindow := anObject</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="isPrefetching">isPrefetching	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isPrefetching isNil		ifTrue:			[isPrefetching := true asValue]		ifFalse:			[isPrefetching]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>private</category><body package="QuickMap" selector="labelArray">labelArray	"Private - The list of tab names (and/or icons). See also #specArray."	^Array		with: (OpaqueImage figure: self class net16x16				shape: self class net16x16mask) -&gt; 'Network'		with: self class colorsImage -&gt; 'Tile cache'		with: 'Base map'		with: 'Library settings'		"with: 'Display'"		"with: self class printerImage -&gt; ''"</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>changing</category><body package="QuickMap" selector="changePort">changePort	NetworkProxyBackup at: #port put: proxyPort value</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="libraryDirectories">libraryDirectories	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^libraryDirectories isNil		ifTrue:			[libraryDirectories := SelectionInList new]		ifFalse:			[libraryDirectories]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>actions</category><body package="QuickMap" selector="doClose">doClose	self closeRequest</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>interface opening</category><body package="QuickMap" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self tabsChanged</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>actions</category><body package="QuickMap" selector="doEmptyCache">doEmptyCache	self masterWindow quickTileMap component dicoProxy do: [:p | p emptyCache]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="isAnimated">isAnimated	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isAnimated isNil		ifTrue:			[isAnimated := true asValue]		ifFalse:			[isAnimated]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="maxSocket">maxSocket	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^maxSocket isNil		ifTrue:			[maxSocket := 0 asValue]		ifFalse:			[maxSocket]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>actions</category><body package="QuickMap" selector="doApply">doApply	| proxyHostnamePort hs mw |	Net.HttpSettings useProxy: useProxy value.	proxyHostnamePort := proxyHostname value , ':'				, proxyPort value printString.	hs := Net.HostSpec http: proxyHostnamePort user: nil.	useProxy value		ifTrue: [Net.HttpSettings proxyHost: hs]		ifFalse: 			[Net.HttpSettings proxyHost: Net.HostSpec new.			Net.HttpSettings instVarNamed: 'proxyHost' put: nil].	mw := self masterWindow.	mw isNil ifFalse: [ mw  resetAll "disconnectAll"]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>actions</category><body package="QuickMap" selector="doOpenLibraryFile">doOpenLibraryFile	"This stub method was generated by UIDefiner"	| default file |	default := self libraryPath value.	default isEmpty		ifTrue: [default := nil]		ifFalse: [default := default , '/*.*'].	file := Dialog				requestFileName: 'Select library file...'				default: default				version: #mustBeOld.	file isEmpty ifFalse: [self libraryFile value: file asFilename tail]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>changing</category><body package="QuickMap" selector="changeBasemap">changeBasemap	| bm |	bm := self basemap value.	self friendlyName value: bm friendlyName.	self maxZoom value: bm maxZoom.	self maxSocket value: bm maxSocket.	self getUriMethod		value: (bm compiledMethodAt: #getUri:x:y:zoom:) getSource</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="libraryPath">libraryPath	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^libraryPath isNil		ifTrue:			[libraryPath := String new asValue]		ifFalse:			[libraryPath]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="getUriMethod">getUriMethod	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^getUriMethod isNil		ifTrue:			[getUriMethod := String new asValue]		ifFalse:			[getUriMethod]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="basemap">basemap	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^basemap isNil		ifTrue:			[basemap := String new asValue]		ifFalse:			[basemap]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="friendlyName">friendlyName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^friendlyName isNil		ifTrue:			[friendlyName := String new asValue]		ifFalse:			[friendlyName]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="libraryFiles">libraryFiles	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^libraryFiles isNil		ifTrue:			[libraryFiles := SelectionInList new]		ifFalse:			[libraryFiles]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="libraryFile">libraryFile	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^libraryFile isNil		ifTrue:			[libraryFile := String new asValue]		ifFalse:			[libraryFile]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>changing</category><body package="QuickMap" selector="changeHostname">changeHostname	NetworkProxyBackup at: #hostname put: proxyHostname value</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>private</category><body package="QuickMap" selector="specArray">specArray	"Private - The list of associated sub canvaes. See also #labelArray."	^#(#networkSpec #tileCacheSpec #basemapSpec #librarySpec #displaySpec)</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>changing</category><body package="QuickMap" selector="tabsChanged">tabsChanged	"Every time, a tab is changed, a new sub canvas gets installed."	| index |	index := self tabs selectionIndex.	(self builder componentAt: #tabbing) widget client: self spec: (self specArray at: index)</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="maxZoom">maxZoom	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^maxZoom isNil		ifTrue:			[maxZoom := 0 asValue]		ifFalse:			[maxZoom]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="useProxy">useProxy	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^useProxy isNil		ifTrue:			[useProxy := false asValue]		ifFalse:			[useProxy]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="proxyPort">proxyPort	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^proxyPort isNil		ifTrue:			[proxyPort := 0 asValue]		ifFalse:			[proxyPort]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>interface closing</category><body package="QuickMap" selector="requestForWindowClose">requestForWindowClose	self builder window "collapse" unmap.	^false</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="proxyHostname">proxyHostname	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^proxyHostname isNil		ifTrue:			[proxyHostname := String new asValue]		ifFalse:			[proxyHostname]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>aspects</category><body package="QuickMap" selector="basemapChoices">basemapChoices	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^basemapChoices isNil		ifTrue:			[basemapChoices := ((List new) addAll: QuickTileProxy subclasses; sorted) asValue]		ifFalse:			[basemapChoices]</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	NetworkProxyBackup isNil		ifTrue: 			[NetworkProxyBackup := Dictionary						withKeysAndValues: #(#hostname '' #port 0)].	hostSpec := Net.HttpSettings proxyHost.	hostSpec isNil		ifFalse: 			[self proxyHostname value: hostSpec name.			self proxyPort value: hostSpec port]		ifTrue: 			[self proxyHostname value: (NetworkProxyBackup at: #hostname).			self proxyPort value: (NetworkProxyBackup at: #port)].	self useProxy value: Net.HttpSettings useProxy.	self proxyHostname onChangeSend: #changeHostname to: self.	self proxyPort onChangeSend: #changePort to: self.	"Base map"	self basemap onChangeSend: #changeBasemap to: self.	"Library"	self libraryPath value: ShapefileReader libraryDirectories first.	self libraryFile value: ShapefileReader libraryFiles first name.	self libraryDirectories list: ShapefileReader libraryDirectories asList.	self libraryFiles list: ShapefileReader libraryFiles asList.	^self</body></methods><methods><class-id>UIQuickMapConfig</class-id> <category>actions</category><body package="QuickMap" selector="doOpenLibraryPath">doOpenLibraryPath	"This stub method was generated by UIDefiner"	| path default |	default := self libraryPath value.	default isEmpty		ifTrue: [default := Filename defaultDirectoryName , '/*']		"ifFalse: [default := default , '/.']".	path := Dialog				requestDirectoryName: 'Select library directory...'				default: default				version: #mustBeOld.	path isEmpty ifFalse: [self libraryPath value: path]</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	x := nil.	y := nil.	zoom := nil.	container := nil.	prx := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="cacheGC">cacheGC	cacheGC isNil ifFalse: [cacheGC handle isNil ifFalse: [^cacheGC]].	cacheGC := Mask extent: 256 @ 256.	"Pixmap"	cacheGC background: CoverageValue transparent.	(prx dicoCompositeAtZoom: zoom) displayOn: cacheGC graphicsContext		at: (x @ y * 256) negated.	^cacheGC</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="y:">y: anObject	y := anObject</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="zoom">zoom	^zoom</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="x:">x: anObject	x := anObject</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="x">x	^x</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="prx">prx	^prx</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="prx:">prx: anObject	prx := anObject</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>displaying</category><body package="QuickMap" selector="displayOn:">displayOn: aGraphicsContext	| tileSize |	tileSize := 256.	self cacheGC displayOn: aGraphicsContext at: x @ y * tileSize.	"aGraphicsContext primDisplayUninterpretedImageBits: self cacheGC at: x @ y * tileSize"	"aGraphicsContext displayPixelArray: self cacheGC at: x @ y * tileSize"</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="zoom:">zoom: anObject	zoom := anObject</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="container:">container: anObject	container := anObject</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="y">y	^y</body></methods><methods><class-id>QuickTileOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="container">container	^container</body></methods><methods><class-id>PseudoTile</class-id> <category>displaying</category><body package="QuickMap" selector="displayOn:">displayOn: aGC	| tileSize |	tileSize := 256.	position printString asComposedText displayOn: aGC at: position * tileSize</body></methods><methods><class-id>PseudoTile</class-id> <category>accessing</category><body package="QuickMap" selector="position">position	^position</body></methods><methods><class-id>PseudoTile</class-id> <category>accessing</category><body package="QuickMap" selector="position:">position: anObject	position := anObject</body></methods><methods><class-id>PseudoTile</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickConnection</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doSavePoints">doSavePoints	"This stub method was generated by UIDefiner"	| quickTileModel textCollector name filename ws urlName result |	quickTileModel := self quickTileMap component.	quickTileModel := quickTileModel model value.	textCollector := quickTileModel textCollector.	name := 'points.text'.	urlName := 'ftp://ftpremote:wputamd64@wsn.univ-brest.fr/' , name.	filename := name asFilename.	ws := filename writeStream.	ws isWritable		ifTrue: 			[ws nextPutAll: textCollector value.			ws close].	result := UnixProcess cshOne: 'wput -u ' , name , ' ' , urlName.	Dialog warn: result</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="laLatTop">laLatTop	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^laLatTop isNil		ifTrue:			[laLatTop := String new asValue]		ifFalse:			[laLatTop]</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doBuildNet2">doBuildNet2	| view gc netAndDicoAndComposite pickModel |	"self halt."	self updatePickModel.	pickModel := self quickTileMap component model value pickModel.	pickModel filename: 'santander.net'.	view := self quickTileMap component.	gc := view graphicsContext.	"gp := self drawingParameters."	netAndDicoAndComposite := pickModel buildNetAndDisplayOn: gc" graphicParameters: gp".	self updateGeneratorsWith: netAndDicoAndComposite first.	pickModel lastGraph: netAndDicoAndComposite last.	pickModel pointDictionary: (netAndDicoAndComposite at: 2).</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="uiLocation">uiLocation	^uiLocation</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="config">config	^config isNil		ifTrue: 			[config := UIQuickMapConfig new.			config masterWindow: self.			config]		ifFalse: [config]</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doMoveBrest">doMoveBrest	"| tileSize so |"	"tileSize := 256."	"self halt."	"so := quickTileMap container scrollOffset."	"so inspect."	self setBrest.	self quickTileMap component invalidate.</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="gpredictReader">gpredictReader	^gpredictReader</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doConfig">doConfig	"config isNil		ifTrue: [config := self class openOn: self withSpec: #windowSpecConfig]		ifFalse: [config window raise]"	"self builder window openPopUpIn: (Rectangle origin: 200@200 corner: 300@300)"	"| conf |	conf := UIQuickMapConfig new.	conf masterWindow: self."	configWin isNil		ifTrue: [configWin := UIQuickMapConfig openOn: self config]		ifFalse: 			[configWin window map]</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="quickTileMap:">quickTileMap: anObject	quickTileMap := anObject</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="leDiviseur">leDiviseur	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leDiviseur isNil		ifTrue:			[leDiviseur := 2 asValue]		ifFalse:			[leDiviseur]</body></methods><methods><class-id>UIQuickMap</class-id> <category>changing</category><body package="QuickMap" selector="fetchSatPos">fetchSatPos	| meter gpr |	gpr := gpredictReader mobileInterface value.	"pixel := gpr pixel."	meter := gpr meter.	"c := Circle center: pixel radius: 10."	"c inspect."	"gaw := GraphicsAttributesWrapper on: c asFiller.	gaw attributes: ColorValue black.	quickTileMap component satellite: gaw."	quickTileMap component addPointMeter: meter.	newUpdate := true	"quickTileMap component pathInPixel add: pixel."	"quickTileMap component invalidateNow"</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doDeleteNet">doDeleteNet	"This stub method was generated by UIDefiner"	myModel value pickModel lastGraph: nil.	self quickTileMap invalidate</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doDisplayCover">doDisplayCover	| uit qtm cellPosArray pm dico |	uit := UITextPoints new.	uit doLoad.	cellPosArray := uit doAnalyzeCover.	qtm := myModel value.	pm := qtm lastPickCellModel.	pm isNil		ifFalse: 			[dico := pm positionCoverDictionary: cellPosArray.			qtm highLightCells: dico.			quickTileMap component invalidateNow. ].</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="lastPickCellModel:">lastPickCellModel: anObject	lastPickCellModel := anObject</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doSetSensorZone">doSetSensorZone	"This stub method was generated by UIDefiner"	"Add a zone filled with sensors"	| model c |	c := (self builder componentAt: #ActionButton8) component component. 	c isInTransition: false.	c := (self builder componentAt: #ActionButton7) component component. 	c isInTransition: true.	model := self quickTileMap component model value.	model clicZone: true.	"Cursor crossHair show."	^self</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doStopMove">doStopMove	forkMove isNil ifFalse: [forkMove terminate]</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="lastPickCellModel">lastPickCellModel	^lastPickCellModel</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="satPathDuration">satPathDuration	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^satPathDuration isNil		ifTrue:			[satPathDuration := 0 asValue]		ifFalse:			[satPathDuration]</body></methods><methods><class-id>UIQuickMap</class-id> <category>changing</category><body package="QuickMap" selector="changeMouse">changeMouse	| map geoStrngs |	map := self quickTileMap component.	geoStrngs := map model value  geoPositionVH value. 	geoStrngs first isNil ifFalse: [self mouseLon value: geoStrngs first].	geoStrngs last isNil ifFalse: [self mouseLat value: geoStrngs last]</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="mouseLat">mouseLat	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^mouseLat isNil		ifTrue:			[mouseLat := String new asValue]		ifFalse:			[mouseLat]</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doOpenPickcell">doOpenPickcell	"open a pick cell window"	| box uiPickCell pm origin tileView boxView pixmap | 	boxView := self builder componentAt: #ViewHolder1.	origin := self builder window displayBox origin.	box := boxView bounds translatedBy: origin.	pixmap := Pixmap extent: box extent.	quickTileMap displayOn: pixmap graphicsContext.	uiPickCell := UIPickCellNodes new.	pm := uiPickCell pickModel value.	pm filename: nil.	pm points: OrderedCollection new.	pm bounds: box.	tileView := self quickTileMap component.	pm mapOrigin: (Array with: self quickTileMap scrollOffset				with: tileView model value zoom).	uiPickCell pickModel value: pm.	uiPickCell laVue image: pixmap asImage. 	myModel value lastPickCellModel: pm.	"keep this model"	uiPickCell open</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="laLonBottom">laLonBottom	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^laLonBottom isNil		ifTrue:			[laLonBottom := String new asValue]		ifFalse:			[laLonBottom]</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="globalMercator:">globalMercator: anObject	globalMercator := anObject</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doAwakeLocation">doAwakeLocation	| locWindows win |	locWindows := UILocation allInstances.	locWindows isEmpty		ifTrue: 			[win := UILocation new.			win open.			self uiLocation: win].	self uiLocation: locWindows first</body></methods><methods><class-id>UIQuickMap</class-id> <category>changing</category><body package="QuickMap" selector="changeDiviseur">changeDiviseur	| qtm qtc div |	qtm := self quickTileMap component.	qtc := qtm controller.	div := self leDiviseur value .	div &gt;1 ifTrue:  			[ 			qtc model value diviseur: div].</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="quickTileMap">quickTileMap	^quickTileMap</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="pickModelRange">pickModelRange	^myModel value pickModelRange</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doBuildGraph">doBuildGraph	| quickTileModel pm sp z pip selected n tileViewScroller |	tileViewScroller := self quickTileMap component.	quickTileModel := tileViewScroller model value.	pm := quickTileModel pickModel.	sp := quickTileModel sensorPositions.	z := quickTileModel zoom.	sp := sp collect: [:np | np pixelWithZoom: z].	pm points: sp.	pip := tileViewScroller pathInPixel.	n := pip size.	selected := OrderedCollection new.	(1 to: n by: 100) do: 			[:i |			selected add: (pip at: i)	"select: [:pix | pix x \\ 5 = 0 or: [pix y \\ 5 = 0]]."].	pm steps: pip.	pm buildGraph: self quickTileMap graphicsContext.	self quickTileMap invalidate</body></methods><methods><class-id>UIQuickMap</class-id> <category>changing</category><body package="QuickMap" selector="changeProxy">changeProxy	| winTitle | 	self quickTileMap component makeActiveProxy: currentProxy value.	winTitle := 'Quick Map - ' , self quickTileMap component proxy class friendlyName.	self builder window label: winTitle.	self quickTileMap component invalidate</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="uiLocation:">uiLocation: anObject	uiLocation := anObject</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doOpenGpredictFileReader">doOpenGpredictFileReader	"This stub method was generated by UIDefiner"	gpredictTraceReader := GPredictTraceReader new.	gpredictTraceReader pathLonLat: quickTileMap component path.	gpredictTraceReader open</body></methods><methods><class-id>UIQuickMap</class-id> <category>fileIn/Out</category><body package="QuickMap" selector="parseSHXFileOrString:">parseSHXFileOrString: shxFilename	| obj |	obj := ShapefileReader readAllObjectsFromShapefile: shxFilename.	quickTileMap component overlay updateObjects: obj</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doTestTimestamp1">doTestTimestamp1	| path pathInMeter mercator |	path := SgpSdpInterface pathAAUCubeSatNextHours: 2 + (4/60).	mercator := GlobalMercator new.	pathInMeter := path collect: 					[:p |					| m |					m := mercator latLonToMeter: p y lon: p x.					m].	pathInMeter inspect.	quickTileMap component path: pathInMeter</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="sensorsNumber">sensorsNumber	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^myModel value sensorsNumber isNil		ifTrue:			[myModel value sensorsNumber: 0 asValue]		ifFalse:			[myModel value sensorsNumber]</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doOpenPickcellOld">doOpenPickcellOld	"This stub method was generated by UIDefiner"	| box uiPickCell pm image origin image32 pixel tileView boxView qtm pixmap |	self halt. 	qtm := quickTileMap   .	boxView := self builder componentAt: #ViewHolder1.	origin := self builder window displayBox origin.	box := boxView bounds translatedBy: origin. 	pixmap := Pixmap extent: box extent.	qtm displayOn: pixmap graphicsContext  .	image := Screen default completeContentsOfArea: box.	image := pixmap.	uiPickCell := UIPickCellNodes new.	pm := uiPickCell pickModel value.	pm filename: nil.	pm points: OrderedCollection new.	pm bounds: box.	tileView := self quickTileMap component.	pm mapOrigin: (Array with: self quickTileMap scrollOffset				with: tileView model value zoom).	uiPickCell pickModel value: pm.	image32 := Image				extent: image extent				depth: image depth				palette: image palette."	image pixelsDo: 			[:x :y |			pixel := image valueAtPoint: x @ y.			image32 valueAtPoint: x @ y put: pixel]."	"uiPickCell laVue image: image32."	uiPickCell laVue image: pixmap asImage.	"	self tileView displayOn: image asRetainedMedium graphicsContext."	uiPickCell open</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doOpenGpredict">doOpenGpredict	"This stub method was generated by UIDefiner"	gpredictReader := GpredictReader new.	gpredictReader open.	gpredictReader doStart.	"currentZoom := quickTileMap component mapZoom.	gpredictReader mobileInterface value zoom: currentZoom."	gpredictReader mobileInterface onChangeSend: #fetchSatPos to: self.	forkDelay := 			[[true] whileTrue: 					[(Delay forMilliseconds: 1000) wait.					self updateMap]]					fork</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="laLonTop">laLonTop	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^laLonTop isNil		ifTrue:			[laLonTop := String new asValue]		ifFalse:			[laLonTop]</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="googleModel:">googleModel: anObject	googleModel := anObject</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doMoveMap">doMoveMap	"This stub method was generated by UIDefiner"	| model c |	c := (self builder componentAt: #ActionButton8) component component. 	"c instVarNamed: 'isInTransition' put: true.	c redisplayForTransitionChange.	c instVarNamed: 'isInTransition' put: true.	c redisplayForTransitionChange."	c isInTransition: true.	c := (self builder componentAt: #ActionButton7) component component. 	c isInTransition: false.	model := self quickTileMap component model value.	model clicZone: false.	^self</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doSatPathDuration">doSatPathDuration	| map path pathInMeter mercator z |	"self satPathDuration value inspect."	path := SgpSdpInterface				pathAAUCubeSatNextHours: self satPathDuration value.	"path inspect."	map := quickTileMap component.	mercator := map globalMercator.	pathInMeter := path collect: 					[:p |					| m |					m := mercator latLonToMeter: p y lon: p x.					m].	map path: pathInMeter.	z := myModel value zoom.	map convertPathWithZoom: z.	"self doBuildGraph."	quickTileMap invalidate</body></methods><methods><class-id>UIQuickMap</class-id> <category>interface closing</category><body package="QuickMap" selector="requestForWindowClose">requestForWindowClose	"Save session"	| origin zoom |	origin := quickTileMap scrollOffset.	zoom := quickTileMap component mapZoom.	SavedSession := Array				with: origin				with: zoom				with: currentProxy value.	self disconnectAll.	config isNil ifFalse: [config closeAndUnschedule].	forkDelay isNil ifFalse: [forkDelay terminate].	^true</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="googleModel">googleModel	^googleModel</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="setFranceMeteo">setFranceMeteo	| x |"	tileSize := 256."	quickTileMap component mapZoom: 12.		x := -510976 @ -362496.		quickTileMap setOrigin: x."	((1996 * tileSize) @ (1416 * tileSize)) negated."</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doGetPath">doGetPath	| qtm s ws text sFirst filename rs |	qtm := self quickTileMap component model value.	s := qtm pickModel steps copy.	filename := 'CudaInterface/stepPoints.c' asFilename.	ws := filename writeStream.	"ws := WriteStream on: String new."	ws nextPutAll: '#define NBPOINTS '.	s size printOn: ws.	ws nextPut: Character cr.	ws nextPutAll: 'point mobilePath[NBPOINTS] = {'.	ws nextPut: Character cr.	sFirst := s first.	ws nextPutAll: '  {'.	sFirst x printOn: ws.	ws nextPutAll: ', '.	sFirst y printOn: ws.	ws nextPutAll: '}'.	ws nextPut: Character cr.	s removeFirst.	s do: 			[:p |			ws nextPutAll: ', {'.			p x printOn: ws.			ws nextPutAll: ', '.			p y printOn: ws.			ws nextPutAll: '}'.			ws nextPut: Character cr].	ws nextPutAll: '  } ;'.	ws nextPut: Character cr.	ws close.	rs := filename readStream.	text := rs contents.	rs close.	text asText inspect</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="gpredictReader:">gpredictReader: anObject	gpredictReader := anObject</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doGeoLocalize">doGeoLocalize	"This stub method was generated by UIDefiner"	| box pm tileView positionTopLeft geoLoc positionBottomRight positionBottomLeft positionTopRight map mercator qtmModel orMet bounds corMet |	self halt.	self doAwakeLocation.	map := quickTileMap component.	bounds := quickTileMap bounds.	quickTileMap offsetOrigin.	mercator := map globalMercator.	qtmModel := map model value.	gm := mercator.	orMet := gm pixelToMeterNew: bounds origin zoom: qtmModel zoom.	orMet := gm meterToLonLat: orMet.	corMet := gm pixelToMeterNew: bounds corner zoom: qtmModel zoom.	corMet := gm meterToLonLat: corMet.	self laLonTop value: corMet x printString.	self laLatTop value: corMet y printString.	pm := PickCellModel new.	pm computeLocationAtPoint: 0 @ 0.	pm filename: nil.	pm points: OrderedCollection new.	box := self quickTileMap bounds.	pm bounds: box.	tileView := self quickTileMap component.	pm mapOrigin: (Array with: self quickTileMap scrollOffset				with: tileView model value zoom).	positionTopLeft := 0 @ 0.	positionBottomRight := box extent.	positionBottomLeft := positionTopLeft x @ positionBottomRight y.	positionTopRight := positionBottomRight x @ positionBottomRight y.	geoLoc := pm computeLocationAtPoint: positionBottomLeft.	pm geoRef1: geoLoc.	geoLoc := pm computeLocationAtPoint: positionTopRight.	pm geoRef2: geoLoc.</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="currentProxy">currentProxy	^currentProxy</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doMove">doMove	| delta |	delta := 1 @ 1.	forkMove := 			[1000 timesRepeat: 					[self quickTileMap scrollBy: delta.					(Delay forMilliseconds: 1) wait]]					forkAt: Processor timingPriority</body></methods><methods><class-id>UIQuickMap</class-id> <category>changing</category><body package="QuickMap" selector="updateMap">updateMap		"gpr := gpredictReader mobileInterface value.	pixel := gpr pixel.	meter := gpr meter.	c := Circle center: pixel radius: 10."	"c inspect."	"gaw := GraphicsAttributesWrapper on: c asFiller.	gaw attributes: ColorValue black.	quickTileMap component satellite: gaw.	quickTileMap component path add: meter.		quickTileMap component pathInPixel add: pixel."	newUpdate ifTrue: 		[quickTileMap component invalidateNow.		newUpdate := false]</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="globalMercator">globalMercator	^globalMercator</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doLoadMeteoData">doLoadMeteoData	"This stub method was generated by UIDefiner"	" self parseCSVFile:	'postesSynop.csv' "		| aOrigin aMapOrigin zoom |	aOrigin := self quickTileMap container container bounds origin.	aMapOrigin := self quickTileMap scrollOffset.	zoom := self quickTileMap component zoom.			self quickTileMap component model value makePixelList: aMapOrigin origin: aOrigin zoom: zoom.</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doShowStationsonMap">doShowStationsonMap	"This stub method was generated by UIDefiner"	| results |	results := self retrieveStationData: 'wsn' password: 'wsn'  environment: 'opale:5432_pickcelldb0' strSql: 'Select stationid, quote_literal(stationname) as name, latitude, longitude, elevation From Station'.</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="setBrest">setBrest	| tileSize |	tileSize := 256.	quickTileMap component mapZoom: 12.	quickTileMap setOrigin: ((1996 * tileSize) @ (1416 * tileSize)) negated.</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="restoreSession">restoreSession	quickTileMap component mapZoom: (SavedSession at: 2).	quickTileMap setOrigin: (SavedSession at: 1) negated.	SavedSession size &gt; 2 ifTrue:[currentProxy value: (SavedSession at: 3)]</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doCopy">doCopy	| selection |	selection := self mouseLat value  , ' ' , self mouseLon value.	TextEditorController copySelection: selection</body></methods><methods><class-id>UIQuickMap</class-id> <category>interface closing</category><body package="QuickMap" selector="disconnectAll">disconnectAll	(quickTileMap component instVarNamed: 'dicoProxy') do: 			[:p |			p close.			p disconnect]</body></methods><methods><class-id>UIQuickMap</class-id> <category>interface closing</category><body package="QuickMap" selector="resetAll">resetAll	(quickTileMap component instVarNamed: 'dicoProxy') do: [:p | p reset]</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doBuildNet">doBuildNet	"This stub method was generated by UIDefiner"	"self halt."	| xyTile xTile yTile zoom colNodes no symList |	gm := UIGoogleMap new.	xyTile := quickTileMap scrollOffset // 256.	xTile := xyTile x.	yTile := xyTile y.	zoom := quickTileMap component model value zoom.	gm zoom retractInterestsFor: gm.	gm xTile value: xTile.	gm yTile value: yTile.	gm zoom value: zoom.	gm oldZoom: zoom.	gm zoom onChangeSend: #changeZoom to: gm.	colNodes := quickTileMap component model value sensorPositions collect: 					[:sp |					"sp model: gm googleModel."					(AlgoDis.NetworkNodeLocalized pos: sp)						range: 100;						sym: 'it works!';						yourself].	gm range value: quickTileMap component model value pickModelRange value.	symList := (colNodes collect: [:n | n sym]) asSet asOrderedCollection.	gm googleModel value		pickModelTmp: self quickTileMap component model value pickModel.	gm networkList list: symList.	gm networkList selectAll.	gm googleModel value colNodes: colNodes.	gm googleModel value computeDistance.	gm googleModel value sortDistanceByNode.	gm googleModel value selectReachedNodes.	no := NetworkOrganisation				withReachedNodes: gm googleModel value dicoReachedNodes.	"bn := "	no buildNetwork.	"bn inspect."	"self halt."	"self lesPointsGPSVH value: colGPSPos.	self GPSColToPixelCol."	gm open.	gm doUpdateTile</body></methods><methods><class-id>UIQuickMap</class-id> <category>accessing</category><body package="QuickMap" selector="currentProxy:">currentProxy: anObject	currentProxy := anObject</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="mouseLon">mouseLon	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^mouseLon isNil		ifTrue:			[mouseLon := String new asValue]		ifFalse:			[mouseLon]</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="laLatBottom">laLatBottom	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^laLatBottom isNil		ifTrue:			[laLatBottom := String new asValue]		ifFalse:			[laLatBottom]</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="saveSerie">saveSerie	"This stub method was generated by UIDefiner"	| quickTileModel textCollector name filename ws |	quickTileModel := self quickTileMap component.	quickTileModel := quickTileModel model value.	textCollector := quickTileModel textCollector.	name := 'points.text'.	filename := name asFilename.	ws := filename writeStream.	ws isWritable		ifTrue: 			[ws nextPutAll: textCollector value.			ws close]</body></methods><methods><class-id>UIQuickMap</class-id> <category>fileIn/Out</category><body package="QuickMap" selector="parseCSVFile:">parseCSVFile: csvFilename	| reader lines connection session sql data id name lat long ele |	reader := CsvReader onFileNamed: csvFilename.	[lines := OrderedCollection new.	[reader atEnd] whileFalse:	     [lines add: reader nextLine.]] 	ensure: [reader close].		connection := PostgresSocketConnection new.connection	username: 'wsn';	pass: 'wsn';	envi: 'opale:5432_pickcelldb0'.connection connect.session := connection getSession. "Drop table if exists"2 to: lines size do: [	:x | (lines at: x).			"Separate data fields"	data := (lines at: x) tokensBasedOn: $;.		id := data at: 1.		name := data at: 2.	lat := data at: 3.	long := data at: 4.	ele := data at: 5.		sql := 'Insert Into Station Values(''',id, ''', $$''',name,'''$$, ',lat,',',long,',',ele,')'.	"	Transcript show: sql; cr. "	"Insert Into Table"	session prepare: sql;		execute;		answer.].connection disconnect.</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="retrieveLighttrapData:password:environment:strSql:">retrieveLighttrapData: user password: pass environment: en strSql: sql		| connection session answer row colTraps |	connection := PostgresSocketConnection new.	connection		username: user;		pass: pass;		envi: en.	connection connect.	session := connection getSession. 	session prepare: sql;		execute.		colTraps := OrderedCollection new.	answer := session answer.	[answer atEnd] whileFalse:			[ 			  row := answer next.			  colTraps add: row]."	1 to: colTraps size do: 	[ :x | colTraps at: x.		row := colTraps at: x.				s := (row at: 2), ' ',(row at: 6) printString, ' ', (row at: 7) printString.				Transcript show: s; cr.	]."	connection disconnect.		      self quickTileMap component refreshLighttrapList: colTraps.   "    self quickTileMap component invalidateNow. "</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="retrieveStationData:password:environment:strSql:">retrieveStationData: user password: pass environment: en strSql: sql		| connection session colStation answer row s results |	connection := PostgresSocketConnection new.	connection		username: user;		pass: pass;		envi: en.	connection connect.	session := connection getSession. 	session prepare: sql;		execute.	      results := OrderedCollection new.	colStation := OrderedCollection new.	answer := session answer.	[answer atEnd] whileFalse:			[ 			  row := answer next.			  colStation add: row].	1 to: colStation size do: 	[ :x | colStation at: x.		row := colStation at: x.				s := (row at: 3) printString, ' ', (row at: 4) printString.		results add: s.		Transcript show: s; cr.	].	connection disconnect.			^results  "    self quickTileMap component refreshStationList: colStation.       self quickTileMap component invalidateNow. "</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="showtrap">showtrap	"This stub method was generated by UIDefiner"	| quickTileModel longitude latitude myZoom myOLH textCollector name filename ws myText |	quickTileModel := myModel value.	longitude := quickTileModel geoPositionVH value first asNumber.	latitude := quickTileModel geoPositionVH value last asNumber.	myZoom := quickTileModel zoom.	myOLH := OpenLayerHtml				lat: latitude				lon: longitude				zoom: myZoom				urlFileName: 'myosmfile.osm'.	textCollector := quickTileModel textCollector.	myText := textCollector value.	" pour OSM"	OpenLayerHtml testHtmlFileFor: myOLH withOsmText: myText</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="showtrapBao">showtrapBao	"This stub method was generated by UIDefiner"	| aOrigin aMapOrigin zoom str |		str := 'Select osm_id, name, lat, lon, way,  ST_YMin(ST_Transform(way,4326)) as lat1,  ST_XMin(ST_Transform(way,4326)) as lon1 from planet_osm_point p inner join planet_osm_nodes n on p.osm_id=n.id where man_made = ''light trap'''.	 		self retrieveLighttrapData: 'osm' password: 'fare&amp;bali'  environment: 'wsn.univ-brest.fr:8080_vietnambao2' strSql: str.		aOrigin := self quickTileMap container container bounds origin.	aMapOrigin := self quickTileMap scrollOffset.	zoom := self quickTileMap component zoom.			self quickTileMap component model value makePixelList: aMapOrigin origin: aOrigin zoom: zoom.</body></methods><methods><class-id>UIQuickMap</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	| origin zoom map scroller |	map := QuickTileMap new.	"globalMercator := GlobalMercator new."	currentProxy := ValueHolder new.	"#QuickTileProxyOSM asValue."	SavedSession isNil		ifTrue: 			["self setBrest."			| tileSize |			tileSize := 256.			origin := (1996 * tileSize) @ (1416 * tileSize).			zoom := 12.			currentProxy value: #QuickTileProxyOSM]		ifFalse: 			["self restoreSession"			origin := SavedSession at: 1.			zoom := SavedSession at: 2.			SavedSession size &gt; 2				ifTrue: [currentProxy value: (SavedSession at: 3)]				ifFalse: [currentProxy value: #QuickTileProxyOSM]].	map getController.	map mapZoom: zoom.	map model value zoom: zoom.	map makeActiveProxy: currentProxy value.	scroller := ScrollWrapper on: map at: origin negated.	quickTileMap := scroller.	"BorderedWrapper on:"	currentProxy onChangeSend: #changeProxy to: self.	newUpdate := false.	myModel := map model.	self leModeDesPoints onChangeSend: #changeModePoints to: self.	self leDiviseur onChangeSend: #changeDiviseur to: self.	myModel value geoPositionVH onChangeSend: #changeMouse to: self.	self pickModelRange value: myModel value pickModel portee</body></methods><methods><class-id>UIQuickMap</class-id> <category>changing</category><body package="QuickMap" selector="changeModePoints">changeModePoints	| qtm qtc |	qtm := self quickTileMap component.	qtc := qtm controller.	self leModeDesPoints value = #isPath		ifTrue: 			[qtc pathInProgress: true.			qtc lineInProgress: false.			qtc model value textCollector: nil].	self leModeDesPoints value = #isLine 		ifTrue: 			[qtc pathInProgress: false.			qtc lineInProgress: true.			qtc model value textCollector: nil.			qtc model value lineArray: (Array new: 2).			qtc model value diviseur: self leDiviseur value]</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="leModeDesPoints">leModeDesPoints	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^leModeDesPoints isNil		ifTrue:			[leModeDesPoints := #isPath asValue]		ifFalse:			[leModeDesPoints]</body></methods><methods><class-id>UIQuickMap</class-id> <category>interface opening</category><body package="QuickMap" selector="postOpenWith:">postOpenWith: aBuilder	"self doConfig"	| button component | 	self leModeDesPoints value: #isPath.	button := aBuilder componentAt: #ActionButton8.	button isNil		ifFalse: 			[component := button component component.			component  isInTransition: true].	button := aBuilder componentAt: #ActionButton7.	button isNil		ifFalse: 			[component := button component component.			component isInTransition: false].</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="doOpenShapefile">doOpenShapefile	| shxFilename |	shxFilename := Dialog				requestFileNameWithMessage: 'Browse Shapefile file'				default: '*.shx'				version: #mustBeOld				ifFail: [^nil]				for: nil. 	self parseSHXFileOrString: shxFilename.	self quickTileMap component invalidate</body></methods><methods><class-id>UIQuickMap</class-id> <category>actions</category><body package="QuickMap" selector="showSerie">showSerie	"This stub method was generated by UIDefiner"	| quickTileModel textCollector tp qtm | 	qtm := self quickTileMap component.	quickTileModel := qtm model value. 	textCollector := quickTileModel textCollector. 	tp := UITextPoints new.	self laSoucheNom value isEmpty ifTrue:[ tp guessedName: 'Shapes'] ifFalse: [	tp guessedName: self laSoucheNom value. ].	tp open.	tp leTexte value: textCollector value</body></methods><methods><class-id>UIQuickMap</class-id> <category>aspects</category><body package="QuickMap" selector="laSoucheNom">laSoucheNom	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^laSoucheNom isNil		ifTrue:			[laSoucheNom := String new asValue]		ifFalse:			[laSoucheNom]</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="makePixelAt:fromOrigin:origin:zoom:">makePixelAt: aPosition fromOrigin: aMapOrigin origin: aOrigin zoom: zoomView	| meter mer currentPoint relative position |	mer := self mercator.	meter := mer latLonToMeter: aPosition x lon: aPosition y.	currentPoint := mer meterToPixelNew: meter zoom: zoomView.	relative := currentPoint - aMapOrigin.	position := relative + aOrigin.	^position</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="stationPositions">stationPositions	^stationPositions</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="lightrapData:">lightrapData: anObject	lightrapData := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneRectangle:">clicZoneRectangle: anObject	clicZoneRectangle := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="textCollector">textCollector	 textCollector isNil		ifTrue: [self newTextCollector: TextCollector new].	^textCollector</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="stations:">stations: anObject	stations := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="lightrapPositions:">lightrapPositions: anObject	lightrapPositions := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="zoom:">zoom: anObject	zoom := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="lightrapData">lightrapData	^lightrapData</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="clicZone">clicZone	^clicZone</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="refreshLighttraps:">refreshLighttraps: trapList	lightrapData := trapList</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="sensorPositions:">sensorPositions: anObject	sensorPositions := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneAllRectangle">clicZoneAllRectangle	^clicZoneAllRectangle</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="diviseur:">diviseur: anObject	diviseur := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="refreshStations:">refreshStations: stationList	stations := stationList</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="makeLatLonArrayAt:fromOrigin:">makeLatLonArrayAt: aPixel fromOrigin: aMapOrigin	| lonlat latitude longitude meter currentPoint |		currentPoint := aPixel + aMapOrigin.	meter := self mercator pixelToMeterNew: currentPoint zoom: self zoom.	lonlat := self mercator meterToLonLat: meter.	latitude := lonlat y.	longitude := lonlat x.	^Array with: longitude with: latitude</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="clicZone:">clicZone: anObject	clicZone := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="addZone:">addZone: aRectangle	| originMeter cornerMeter rectangleMeter |	originMeter := mercator pixelToMeterNew: aRectangle origin zoom: zoom.	cornerMeter := mercator pixelToMeterNew: aRectangle corner zoom: zoom.	rectangleMeter := Rectangle origin: originMeter corner: cornerMeter.	clicZoneAllRectangleAbsolute add: rectangleMeter.	clicZoneAllRectangle add: aRectangle.	self fillWithSensors: aRectangle</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneInProgress:">clicZoneInProgress: anObject	clicZoneInProgress := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="sensorPositions">sensorPositions	^sensorPositions</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="lightrapPositions">lightrapPositions	^lightrapPositions</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneRectangle">clicZoneRectangle	^clicZoneRectangle</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="highLightCells:">highLightCells: anObject	highLightCells := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="pickModel">pickModel	^pickModel</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="sensorsNumber">sensorsNumber	^sensorsNumber</body></methods><methods><class-id>QuickTileModel</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	sensorPositions := OrderedCollection new.	mercator := GlobalMercator new.	 self textCollector. " enforce a avalue"	geoPositionVH := (Array new: 2) asValue.	pickModel := PickMobileModel new initialize.	pickModel points: OrderedCollection new.	pickModel bounds: (Rectangle origin: 0 @ 0 corner: 1024 @ 768).	pickModel portee: 100.	pickModel filename: './aMap'.	clicZone := false.	clicZoneInProgress := false.	clicZoneAllRectangle := OrderedCollection new.	clicZoneAllRectangleAbsolute := OrderedCollection new.	clicZoneRectangle := Rectangle origin: 0 @ 0 corner: 0 @ 0.	sensorsNumber := 0 asValue.	stationPositions := nil.	self pixelPerKm: (Dictionary				withKeysAndValues: #(0 0.0078125 1 0.015625 2 0.03125 3 0.0625 4 0.125 5 0.25 6 0.5 7 1 8 2 9 5 10 9 11 18 12 36 13 72 14 144 15 288 16 575 17 1150 18 2300 19 4600 20 9200 21 18400)).	self pickModelRange onChangeSend: #changePickModelRange to: self.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="diviseur">diviseur	^diviseur</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="highLightCells">highLightCells	^highLightCells</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="addPosition:">addPosition: aPoint	| meter np |	meter := mercator pixelToMeterNew: aPoint zoom: zoom.	np := NetworkPosition metre: meter mercator: mercator.	sensorPositions add: np.</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="pointsFromStartPos:toStopPos:division:">pointsFromStartPos: start toStopPos: stop division: n	| delta points pos |	delta := (stop - start) / n.	points := OrderedCollection new.	points add: start.	pos := start.	1 to: n - 1		do: 			[:index |			pos := pos + delta.			points add: pos].	points add: stop.	^points</body></methods><methods><class-id>QuickTileModel</class-id> <category>aspects</category><body package="QuickMap" selector="pickModelRange">pickModelRange	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^pickModelRange isNil		ifTrue:			[pickModelRange := 0 asValue]		ifFalse:			[pickModelRange]</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="textCollector:">textCollector: anObject	textCollector := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="lineArray:">lineArray: anObject	lineArray := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="addLonLatFromLineArrayDivision:fromMapOrigin:">addLonLatFromLineArrayDivision: n fromMapOrigin: mapOrigin	| start stop pointArray string | 	start := self lineArray first.	stop := self lineArray last.	self textCollector: nil.	pointArray := self pointsFromStartPos: start toStopPos: stop division: self diviseur.	pointArray do: 			[:intermediapePos |			string := self makeLatLonStringAt: intermediapePos fromOrigin: mapOrigin.			self addLonLat: string]</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="mercator">mercator	^mercator</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="pixelPerKm">pixelPerKm	^pixelPerKm</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="lastPickCellModel:">lastPickCellModel: anObject	lastPickCellModel := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="makePixelList:origin:zoom:">makePixelList: aMapOrigin origin: aOrigin zoom: zoomView	| latlong position row |	lightrapPositions isNil ifTrue: [lightrapPositions := OrderedCollection new.		]	ifFalse:[		lightrapPositions isNil whileFalse:[lightrapPositions removeFirst]		].		lightrapData isNil ifFalse:	[				1 to: lightrapData size do:		[:x| lightrapData at: x.			row := lightrapData at: x.			latlong := (row at: 6) @ (row at: 7).			position := self makePixelAt: latlong fromOrigin: aMapOrigin origin: aOrigin zoom: zoomView.						lightrapPositions add: position.						Transcript show: 'Point ', latlong x printString, '@',latlong y printString, ' ',position x printString, '@', position y printString; cr.			]		].</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="addLonLat:">addLonLat: string	| rs start ch ws |	rs := string readStream.	start := rs upTo: $ .	ch := rs next.	self textCollector isNil		ifTrue: [self newTextCollector: TextCollector new].	[rs atEnd or: [ch isSeparator not]] whileFalse: [ch := rs next].	rs atEnd		ifFalse: 			[ws := String new writeStream.			ws nextPutAll: start.			ws nextPut: $,.			ws nextPut: ch.			ws nextPutAll: rs upToEnd. 			(self textCollector)				nextPutAll: ws contents;				cr]</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="geoPositionVH">geoPositionVH	^geoPositionVH</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="newTextCollector:">newTextCollector: anObject 	textCollector := anObject.	self textCollector nextPutAll: 'latitude,longitude,elevation,name' ;cr</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="stations">stations	^stations</body></methods><methods><class-id>QuickTileModel</class-id> <category>changing</category><body package="QuickMap" selector="changePickModelRange">changePickModelRange	| rangeInPixel |	rangeInPixel := self pickModelRange value / 1000				* (self pixelPerKm at: zoom).	pickModel portee: rangeInPixel</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="pixelPerKm:">pixelPerKm: anObject	pixelPerKm := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="pickModel:">pickModel: anObject	pickModel := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="makeLatLonStringAt:fromOrigin:">makeLatLonStringAt: aPixel fromOrigin: aMapOrigin	| latitude longitude array |	array := self makeLatLonArrayOfStringAt: aPixel fromOrigin: aMapOrigin.	latitude := array last.	longitude := array first.	^ latitude , ' ', longitude</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="makeLatLonArrayOfStringAt:fromOrigin:">makeLatLonArrayOfStringAt: aPixel fromOrigin: aMapOrigin	| latitude longitude array |	array := self makeLatLonArrayAt: aPixel fromOrigin: aMapOrigin.	latitude := array last printString readStream upTo: $d.	longitude := array first printString readStream upTo: $d.	^Array with: longitude with: latitude</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="fillWithSensors:">fillWithSensors: aRectangleInPixel	| o ox oy c cx cy r rx ry dx dy n |	o := aRectangleInPixel origin.	ox := o x.	oy := o y.	c := aRectangleInPixel corner.	cx := c x.	cy := c y.	dx := cx - ox.	dy := cy - oy.	r := Random new.	n := sensorsNumber value.	"self halt."	n timesRepeat: 			[| sp sm s np |			rx := r next * dx + ox.			ry := r next * dy + oy.			sp := rx @ ry.			sm := mercator pixelToMeterNew: sp zoom: zoom.			np := NetworkPosition metre: sm mercator: mercator. 			"s := mercator meterToLatLon: sm."			"np := NetworkPosition lon: s y lat: s x."			sensorPositions add: np]</body></methods><methods><class-id>QuickTileModel</class-id> <category>computing</category><body package="QuickMap" selector="zoomChanged">zoomChanged	clicZoneAllRectangle := OrderedCollection new.	clicZoneAllRectangleAbsolute do: 			[:r |			| originPixel cornerPixel rectanglePixel |			originPixel := mercator meterToPixelNew: r origin zoom: zoom.			cornerPixel := mercator meterToPixelNew: r corner zoom: zoom.			rectanglePixel := Rectangle origin: originPixel corner: cornerPixel.			clicZoneAllRectangle add: rectanglePixel]</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="lastPickCellModel">lastPickCellModel	^lastPickCellModel</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="lineArray">lineArray	^lineArray</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneAllRectangle:">clicZoneAllRectangle: anObject	clicZoneAllRectangle := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneInProgress">clicZoneInProgress	^clicZoneInProgress</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="stationPositions:">stationPositions: anObject	stationPositions := anObject</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="zoom">zoom	^zoom</body></methods><methods><class-id>QuickTileModel</class-id> <category>accessing</category><body package="QuickMap" selector="sensorsNumber:">sensorsNumber: anObject	sensorsNumber := anObject</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneCorner:">clicZoneCorner: anObject	clicZoneCorner := anObject</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="pathInProgress:">pathInProgress: anObject	pathInProgress := anObject.	anObject		ifTrue: [self model value newTextCollector: TextCollector new]		ifFalse: [self model value textCollector: nil]</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneCorner">clicZoneCorner	^clicZoneCorner</body></methods><methods><class-id>QuickTileController</class-id> <category>event driven</category><body package="QuickMap" selector="selectionTracker">selectionTracker	^QuickTileTracker on: self</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneOrigin:">clicZoneOrigin: anObject	clicZoneOrigin := anObject</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneOrigin">clicZoneOrigin	^clicZoneOrigin</body></methods><methods><class-id>QuickTileController</class-id> <category>events</category><body package="QuickMap" selector="keyPressedEvent:">keyPressedEvent: anEvent	"[self selectEvent: anEvent. ^self] value."	"anEvent inspect."	anEvent inspect</body></methods><methods><class-id>QuickTileController</class-id> <category>private</category><body package="QuickMap" selector="reverseGeocode:">reverseGeocode: aPixel	| projection zoom m lonlat latitude longitude url hr r s b t jr result |	projection := self model value mercator.	zoom := self model value zoom.	m := projection pixelToMeterNew: aPixel zoom: zoom.	lonlat := projection meterToLonLat: m.	latitude := lonlat y printString readStream upTo: $d.	longitude := lonlat x printString readStream upTo: $d.	url := 'http://maps.googleapis.com/maps/api/geocode/json?latlng='				, latitude, ',', longitude				, '&amp;sensor=false'.	hr := Net.HttpRequest get: url.	[r := hr execute] on: Net.HttpException do: [:ex | r := ex parameter].	s := r value byteSource.	b := s contents.	t := b asByteString. "copy changeClassTo: ByteString." "ISO8859L1String."	jr := JSON.JsonReader readFrom: t readStream.	result := (jr at: 'results') first at: 'formatted_address'.	(result "copy changeClassTo: ISO8859L1String") inspect</body></methods><methods><class-id>QuickTileController</class-id> <category>events</category><body package="QuickMap" selector="exitEvent:">exitEvent: anEvent	isMoving := false.	Cursor normal show.</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneInProgress">clicZoneInProgress	^clicZoneInProgress</body></methods><methods><class-id>QuickTileController</class-id> <category>events</category><body package="QuickMap" selector="enterEvent:">enterEvent: anEvent	isMoving := false.	"self currentTool enterEvent: anEvent"	self model value clicZone 		ifTrue: [Cursor crossHair show] 		ifFalse: [Cursor hand show.]</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="lineInProgress">lineInProgress	^lineInProgress</body></methods><methods><class-id>QuickTileController</class-id> <category>private</category><body package="QuickMap" selector="mapOrigin">mapOrigin	^self view container scrollOffset</body></methods><methods><class-id>QuickTileController</class-id> <category>events</category><body package="QuickMap" selector="mouseMovedEvent:">mouseMovedEvent: anEvent	"[super mouseMovedEvent: anEvent. ^self] value."	| thispoint origine newZoom |	self sensor shiftDown ifTrue: [Cursor crossHair show].	newZoom := self view mapZoom. 	self model value zoom: newZoom.	thispoint := anEvent point. 		"compute the origin of map as displayed"	origine := self view container container bounds origin.	"set a string to inform clients of this position"	self mouseGeocode: thispoint fromOrigin: origine.	isMoving		ifTrue: 			[| p |			p := anEvent globalPoint.			delta := previousPoint - p.			self view container scrollBy: delta.			previousPoint := p.			previousClock := currentClock.			currentClock := Time microsecondClock].	self model value clicZoneInProgress		ifTrue: 			[| oldBR new maxPoint minPoint |			clicZoneCorner := self sensor cursorPoint.			oldBR := self model value clicZoneRectangle bottomRight copy.			new := Rectangle origin: clicZoneOrigin corner: clicZoneCorner.			"new := self model value clicZoneRectangle bottomRight: clicZoneCorner."			self model value clicZoneRectangle: new.			maxPoint := clicZoneCorner max: oldBR.			minPoint := clicZoneCorner min: oldBR.			self view				invalidateRectangle: (Rectangle origin: clicZoneOrigin x @ minPoint y						corner: maxPoint + 1)				repairNow: true.			self view				invalidateRectangle: (Rectangle origin: minPoint x @ clicZoneOrigin y						corner: (maxPoint x + 1) @ minPoint y)]</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="clicZoneInProgress:">clicZoneInProgress: anObject	clicZoneInProgress := anObject</body></methods><methods><class-id>QuickTileController</class-id> <category>events</category><body package="QuickMap" selector="redButtonPressedEvent:">redButtonPressedEvent: anEvent	"[self selectEvent: anEvent. ^self] value."	"anEvent inspect."	"clicZone"	| origine relativePosition position qtm string |	position := anEvent point.	origine := self view container container bounds origin.	relativePosition := position - origine.	qtm := self model value.	string := qtm makeLatLonStringAt: relativePosition				fromOrigin: self mapOrigin.	self pathInProgress ifTrue: [qtm addLonLat: string].	self lineInProgress ifTrue: [qtm lineArray at: 1 put: relativePosition].	self sensor ctrlDown		ifTrue: [TextEditorController copySelection: string]		ifFalse: 			[qtm clicZone				ifTrue: 					["set the controller to draw a rectangle on the map"					qtm clicZoneInProgress						ifFalse: 							["Start the drawing"							Cursor crossHair show.							qtm clicZoneInProgress: true.							clicZoneOrigin := self sensor cursorPoint]						ifTrue: 							["Finish the rectangle"							Cursor normal show.							qtm clicZoneInProgress: false.							clicZoneCorner := self sensor cursorPoint.							qtm addZone: (Rectangle origin: clicZoneOrigin corner: clicZoneCorner).							self view topComponent model doBuildGraph].					^self].			"other actions"			self sensor shiftDown				ifTrue: 					[| point tileModel |					shifted := true.					point := self sensor cursorPoint.					Cursor crossHair show.					tileModel := self model value.					"tileModel sensorPositions add: point."					tileModel addPosition: point.					tileModel pickModel points add: point.					self model value: tileModel					"Saisie "					"self reverseGeocode: point"]				ifFalse: 					[isMoving := true.					previousPoint := anEvent globalPoint.					"self sensor cursorPoint"					"Cursor hand show."					UIQuickMap closedHand show.					currentClock := Time microsecondClock.					delta := 0 @ 0.					forkAnim isNil ifFalse: [forkAnim terminate]]]</body></methods><methods><class-id>QuickTileController</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	isMoving := false.	previousClock := 0.	shifted := false.	clicZoneInProgress := false.	pathInProgress := false.	lineInProgress := false.	^self</body></methods><methods><class-id>QuickTileController</class-id> <category>private</category><body package="QuickMap" selector="mouseGeocode:fromOrigin:">mouseGeocode: position fromOrigin: origine	| strings qtm relativePosition |	relativePosition := position - origine.	qtm := self model value.	strings := qtm makeLatLonArrayOfStringAt: relativePosition				fromOrigin: self mapOrigin.	qtm geoPositionVH value: strings</body></methods><methods><class-id>QuickTileController</class-id> <category>private</category><body package="QuickMap" selector="makeLatLonStringAt:">makeLatLonStringAt:    aPixel	| mercator zoom lonlat latitude longitude qtm meter currentPoint |	qtm := self model value.	mercator := qtm mercator.	zoom := qtm zoom.	currentPoint := aPixel + self mapOrigin.	meter := mercator pixelToMeterNew: currentPoint zoom: zoom.	lonlat := mercator meterToLonLat: meter.	latitude := lonlat y printString readStream upTo: $d.	longitude := lonlat x printString readStream upTo: $d.	^ Array with: longitude with: latitude.</body></methods><methods><class-id>QuickTileController</class-id> <category>events</category><body package="QuickMap" selector="processKeyboardEvent:">processKeyboardEvent: aKeyboardEvent	aKeyboardEvent inspect</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="lineInProgress:">lineInProgress: anObject	lineInProgress := anObject</body></methods><methods><class-id>QuickTileController</class-id> <category>events</category><body package="QuickMap" selector="redButtonReleasedEvent:">redButtonReleasedEvent: anEvent	| d ppms qtm position origine relativePosition |	delta isNil ifTrue: [delta := 0].	self model value clicZone ifTrue: [^self].	position := anEvent point.	origine := self view container container bounds origin.	relativePosition := position - origine.	qtm := self model value.	self lineInProgress		ifTrue: 			[qtm lineArray at: 2 put: relativePosition.			qtm addLonLatFromLineArrayDivision: 2 fromMapOrigin: self mapOrigin].	shifted		ifFalse: 			[isMoving := false.			Cursor hand show.			"p := anEvent globalPoint."			"diff := previous - p."			"diff inspect."			d := Time microsecondClock - previousClock.	"currentClock"			ppms := delta / d * 10000.	"Nombre de pixels à déplacer à chaque itération"			"ppms copy inspect."			ppms abs &lt; (2 @ 2) ifTrue: [^self].			ppms x &gt; 0				ifTrue: [ppms x: (ppms x min: 1.0e2)]				ifFalse: [ppms x: (ppms x max: -1.0e2)].			ppms y &gt; 0				ifTrue: [ppms y: (ppms y min: 1.0e2)]				ifFalse: [ppms y: (ppms y max: -1.0e2)].			forkAnim := 					["Deux paramètres règlent l'animation de la carte."					" *** ATTENTION, DANGER : si i &lt; 1, la carte accélère ! *** "					| i |					i := 1.05.	"Coefficient de frottement initial : à ajuster suivant la courbe choisie"					[ppms abs &lt; (1 @ 1)	"ppms rounded = Point zero"] whileFalse: 							[(Delay forMilliseconds: 10) wait.							self view container scrollBy: ppms rounded.							"Plusieurs courbes de frottement : "							"Sans : suit le mouvement, ralentissement très doux"							"i := i + 1.000002."	"Arrêt brutal"							"i := i + i."	"Arrêt très brutal"							i := i * 1.002.	"Ralentissement doux, conseillé"							"i := i * i."	"Suit le mouvement, puis arrêt brutal"							ppms := ppms / i]]							forkAt: Processor activePriority - 1]		ifTrue: [shifted := false]</body></methods><methods><class-id>QuickTileController</class-id> <category>event driven</category><body package="QuickMap" selector="handlerForMouseEvent:">handlerForMouseEvent: aMouseEvent	^self</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="forkAnim:">forkAnim: anObject	forkAnim := anObject</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="forkAnim">forkAnim	^forkAnim</body></methods><methods><class-id>QuickTileController</class-id> <category>events</category><body package="QuickMap" selector="desiresFocus">desiresFocus	^true</body></methods><methods><class-id>QuickTileController</class-id> <category>accessing</category><body package="QuickMap" selector="pathInProgress">pathInProgress	^pathInProgress</body></methods><methods><class-id>QuickTileController</class-id> <category>events</category><body package="QuickMap" selector="mouseWheelEvent:">mouseWheelEvent: event	| clic offset clicWindow zoom newClic newZoom newOffset maxZoom | 	clic := self sensor cursorPoint copy.	offset := self view container scrollOffset copy.	maxZoom := self view proxy class maxZoom.	clicWindow := clic - offset.	zoom := self view mapZoom.	event up		ifTrue: 			["zoom in"			newClic := clic * 2.			newZoom := zoom + 1]		ifFalse: 			["zoom out"			newClic := (clic / 2) rounded.			newZoom := zoom - 1].	(newZoom &gt;= 0 and: [newZoom &lt;= maxZoom])		ifTrue: 			["Change zoom" "| gc |			gc := self view graphicsContext.			gc copyArea: (Rectangle origin: 0@0 corner: 256 @ 256) from: (gc copy scaleBy: 2) sourceOffset: 0@0 destinationOffset: 0@0 .			(Delay forSeconds: 1) wait."			"self halt."			newOffset := newClic - clicWindow.			self view container setOrigin: newOffset negated.			self model value zoom: newZoom.			self model value zoomChanged.			self view mapZoom: newZoom.			self view zoomChanged: newZoom.			"bis"			self view container setOrigin: newOffset negated.			self view invalidate]</body></methods><methods><class-id>QuickHttpRequest</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	"mapClients := SequenceableCollection new."	^self</body></methods><methods><class-id>QuickHttpRequest</class-id> <category>accessing</category><body package="QuickMap" selector="mapClients:">mapClients: anObject	mapClients := anObject</body></methods><methods><class-id>QuickHttpRequest</class-id> <category>low-level command interface</category><body package="QuickMap" selector="execute">execute	"mapClients isEmpty ifFalse:[c := mapClients removeFirst.] ifTrue:[c := self newClient.]."	| client resp |	mapClients isNil		ifTrue: [mapClients := self newClient]		ifFalse: 			[mapClients				readingOptions: self readingOptions;				writingOptions: self writingOptions].	client := mapClients.	client delaySeconds: 120.	resp := [client executeRequest: self] on: Error				do: 					[:exc |					exc class = Net.HttpStatusLineError						ifTrue: [client disconnect]						ifFalse: 							[exc class = Net.HttpObjectNotFound								ifTrue: ['Erreur 404']								ifFalse: 									[exc class = OsTransferFaultError										ifTrue: 											[exc originator close											"resp := client executeRequest: self"]										ifFalse: 											[exc class = OsError ifTrue: [client disconnect] ifFalse: ["exc inspect" nil ]]]].					client disconnect.					nil].	", Net.HttpStatusLineError"	resp isNil ifTrue: [resp := client executeRequest: self].	^resp</body></methods><methods><class-id>QuickHttpRequest</class-id> <category>parsing</category><body package="QuickMap" selector="parse:">parse: scanner	" *** This method was defined by Net.MessageElement as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>QuickHttpRequest</class-id> <category>accessing</category><body package="QuickMap" selector="mapClients">mapClients	^mapClients</body></methods><methods><class-id>QuickTileProxyOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="container:">container: anObject	container := anObject</body></methods><methods><class-id>QuickTileProxyOverlay</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	dicoZoom := Dictionary new: 22.	"compositePart := CompositePart new add: (Circle center: -510941 @ -362480 radius: 128) asStroker."	"shxFilename := '/home/pyves/VW/batiment/bati-WGS84.shx'.	objects := ShapefileReader readAllObjectsFromShapefile: shxFilename."	dicoComposite := Dictionary new: 22.	objects := OrderedCollection new.	^self</body></methods><methods><class-id>QuickTileProxyOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="dicoCompositeAtZoom:">dicoCompositeAtZoom: zoom	^dicoComposite at: zoom ifAbsentPut: [self computeCompositeForZoom: zoom]</body></methods><methods><class-id>QuickTileProxyOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="compositePart">compositePart	^compositePart</body></methods><methods><class-id>QuickTileProxyOverlay</class-id> <category>computing</category><body package="QuickMap" selector="computeCompositeForZoom:">computeCompositeForZoom: zoom	| cp |	cp := CompositePart new.	objects do: 			[:each |			| sw |			sw := StrokingWrapper on: (each convertWithZoom: zoom).			cp add: sw].	cp container: self container.	^cp</body></methods><methods><class-id>QuickTileProxyOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="dicoZoom">dicoZoom	^dicoZoom</body></methods><methods><class-id>QuickTileProxyOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="container">container	^container</body></methods><methods><class-id>QuickTileProxyOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="compositePart:">compositePart: anObject	compositePart := anObject</body></methods><methods><class-id>QuickTileProxyOverlay</class-id> <category>accessing</category><body package="QuickMap" selector="x:y:zoom:">x: xTile y: yTile zoom: zoom	| modulo x y dico |	modulo := 2 raisedTo: zoom.	x := xTile \\ modulo.	y := yTile \\ modulo.	dico := self dicoZoom at: zoom ifAbsentPut: [Dictionary new: 16].	^dico at: x @ y		ifAbsentPut: 			[(QuickTileOverlay x: x y: y zoom: zoom)				container: container;				prx: self;				yourself]</body></methods><methods><class-id>QuickTileProxyOverlay</class-id> <category>computing</category><body package="QuickMap" selector="updateObjects:">updateObjects: o	objects := o.	dicoComposite := Dictionary new: 22.	dicoZoom := Dictionary new: 22</body></methods><methods><class-id>QuickTileTracker</class-id> <category>private</category><body package="QuickMap" selector="cursorPointFor:">cursorPointFor: aMouseEvent	^aMouseEvent globalPoint</body></methods><methods><class-id>QuickTileTracker</class-id> <category>private</category><body package="QuickMap" selector="trackSelectionFor:">trackSelectionFor: aPoint	controller view container scrollBy: lastPoint - aPoint.	lastPoint := aPoint.	previousPoint := currentPoint.	currentPoint := aPoint.	previousClock := currentClock.	currentClock := Time microsecondClock	"aPoint inspect."</body></methods><methods><class-id>QuickTileTracker</class-id> <category>private</category><body package="QuickMap" selector="finishSelectionFor:">finishSelectionFor: aPoint	| d ppms my |	Cursor hand show.	"p := anEvent globalPoint."	"diff := previous - p."	"diff inspect."	d := Time microsecondClock - previousClock.	"currentClock"	ppms := "delta"(previousPoint - aPoint) / d * 10000.	"Nombre de pixels à déplacer à chaque itération"	"ppms copy inspect."	ppms abs &lt; (2 @ 2) ifTrue: [^self].	ppms x &gt; 0		ifTrue: [ppms x: (ppms x min: 1.0e2)]		ifFalse: [ppms x: (ppms x max: -1.0e2)].	ppms y &gt; 0		ifTrue: [ppms y: (ppms y min: 1.0e2)]		ifFalse: [ppms y: (ppms y max: -1.0e2)].	my := controller.	controller		forkAnim: (			["Deux paramètres règlent l'animation de la carte."			" *** ATTENTION, DANGER : si i &lt; 1, la carte accélère ! *** "			| i |			i := 1.05.	"Coefficient de frottement initial : à ajuster suivant la courbe choisie"			[ppms abs &lt; (1 @ 1)	"ppms rounded = Point zero"] whileFalse: 					[(Delay forMilliseconds: 10) wait.					my view container scrollBy: ppms rounded.					"Plusieurs courbes de frottement : "					"Sans : suit le mouvement, ralentissement très doux"					"i := i + 1.000002."	"Arrêt brutal"					"i := i + i."	"Arrêt très brutal"					i := i * 1.002.	"Ralentissement doux, conseillé"					"i := i * i."	"Suit le mouvement, puis arrêt brutal"					ppms := ppms / i]] 					forkAt: Processor activePriority - 1).	super finishSelectionFor: aPoint</body></methods><methods><class-id>QuickTileTracker</class-id> <category>private</category><body package="QuickMap" selector="setUpFor:">setUpFor: aMouseButtonEvent	super setUpFor: aMouseButtonEvent.	UIQuickMap closedHand show. 	lastPoint := self cursorPointFor: aMouseButtonEvent.	previousPoint := aMouseButtonEvent globalPoint.	currentPoint := previousPoint.	controller forkAnim isNil ifFalse: [controller forkAnim terminate].	currentClock := Time microsecondClock.	previousClock := currentClock</body></methods><methods><class-id>QuickTileTracker</class-id> <category>events</category><body package="QuickMap" selector="mouseMovedEvent0:">mouseMovedEvent0: aMouseMovedEvent 	"self halt."	[super mouseMovedEvent: aMouseMovedEvent. ^nil] value.	controller view isOpen 		ifTrue: [| p "c" |		aMouseMovedEvent inspect.			p := aMouseMovedEvent globalPoint.			delta := previousPoint - p.			controller view container scrollBy: delta.			"c := self view container.			(c instVarNamed: 'origin') value: (c translation - diff)."			previousPoint := p.			previousClock := currentClock.			currentClock := Time microsecondClock].	^nil</body></methods><methods><class-id>QuickLayer</class-id> <category>accessing</category><body package="QuickMap" selector="zoom:">zoom: anObject	zoom := anObject</body></methods><methods><class-id>QuickLayer</class-id> <category>accessing</category><body package="QuickMap" selector="zoom">zoom	^zoom</body></methods><methods><class-id>QuickLayer</class-id> <category>bounds accessing</category><body package="QuickMap" selector="preferredBounds">preferredBounds	" *** This method was defined by VisualComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>QuickLayer</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	zoom := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.PickCellModelFromUrl</class-id> <category>accessing</category><body package="PickCell" selector="knownUrl:">knownUrl: anObject	knownUrl := anObject</body></methods><methods><class-id>AlgoDis.PickCellModelFromUrl</class-id> <category>initialize-release</category><body package="PickCell" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	knownUrl := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AlgoDis.PickCellModelFromUrl</class-id> <category>accessing</category><body package="PickCell" selector="getKnownUrl">getKnownUrl	^knownUrl</body></methods><methods><class-id>QuickTileProxyHillShading</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'" 	^('http://c.tiles.wmflabs.org/hillshading/' , zoom printString		, '/' , x printString		, '/' , y printString		, '.png') asURI</body></methods><methods><class-id>QuickTileProxyHillShading</class-id> <category>networking</category><body package="QuickMap" selector="getPng:x:y:zoom:">getPng: anIndex x: x y: y zoom: zoom	| httpResponse imageStream url qhr idxc cli sem baseDirName fn fnis fnos reader image ws |	baseDirName := self pickCellDir.	fn := baseDirName , self class name , '-' , x printString , '-'				, y printString.	fnis := fn , '.png'.	fnos := fn , '.png'.	fnos asFilename exists		ifTrue: 			[reader := ImageReader fromFile: fnos.			reader readImage.			image := reader image.			^image]		ifFalse: 			[idxc := self semIndexClient.			cli := self clientAt: idxc.			sem := self semaphoreAt: idxc.			url := self						getUri: anIndex						x: x						y: y						zoom: zoom.			qhr := QuickHttpRequest get: url.			qhr fieldValueAt: 'User-Agent'				put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.			qhr mapClients: cli.			sem critical: [httpResponse := qhr execute].			imageStream := httpResponse value byteSource.			ws := (fnis asFilename withEncoding: #binary) writeStream.			imageStream reset.			ws setBinary: true.			ws nextPutAll: imageStream contents.			ws				flush;				close.			"UnixProcess cshOne: 'jpegtopnm ' , fnis , '| pnmtopng ' , '&gt; ' , fnos."			UnixProcess				cshOne: 'convert ' , fnis , ' -background gray   -flatten ' , fnos.			reader := ImageReader fromFile: fnos.			reader readImage.			image := reader image.			^image].	^imageStream</body></methods><methods><class-id>QuickTileProxyHillShading</class-id> <category>private</category><body package="QuickMap" selector="getUri1:x:y:zoom:">getUri1: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'""http://otile3.mqcdn.com/tiles/1.0.0/sat/$%7Bz%7D/$%7Bx%7D/$%7By%7D.png"	^('http://otile3.mqcdn.com/tiles/1.0.0/sat/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		asURI</body></methods><methods><class-id>QuickTileProxyHillShading</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyHillShading</class-id> <category>private</category><body package="QuickMap" selector="getUri2:x:y:zoom:">getUri2: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^('http://otile3.mqcdn.com/tiles/1.0.0/sat/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		asURI</body></methods><methods><class-id>QuickTileProxyGapiv3</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^('http://mt' , anInteger printString		, '.googleapis.com/vt?src=apiv3&amp;hl=en&amp;x=' , x printString		, '&amp;y=' , y printString		, '&amp;z=' , zoom printString)		asURI</body></methods><methods><class-id>QuickTileProxyGapiv3</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyGapiv2</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyGapiv2</class-id> <category>networking</category><body package="QuickMap" selector="getPng:x:y:zoom:">getPng: anIndex x: x y: y zoom: zoom	| httpResponse imageStream url qhr idxc cli sem |	idxc := self semIndexClient.	cli := self clientAt: idxc.	sem := self semaphoreAt: idxc.	url := self				getUri: anIndex				x: x				y: y				zoom: zoom.	qhr := QuickHttpRequest get: url.	qhr requestLine url path: ((OrderedCollection new)				add: 'vt';				add: 'lyrs=m@260000000&amp;hl=en&amp;src=apiv2&amp;x=' , x printString , '&amp;y='							, y printString , '&amp;z='							, zoom printString;				yourself).	qhr fieldValueAt: 'User-Agent'		put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	qhr mapClients: cli.	sem critical: [httpResponse := qhr execute].	imageStream := httpResponse value byteSource.	^imageStream</body></methods><methods><class-id>QuickTileProxyGapiv2</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	"| galileo |	galileo := 'Galileo' readStream next: (Random new next * 7) rounded."	^('http://mt' ", anInteger printString"		, '.google.com/vt/lyrs=m@260000000&amp;hl=en&amp;src=apiv2&amp;x=' , x printString		, '&amp;y=' , y printString		, '&amp;z=' , zoom printString		", '&amp;s=' , galileo")		asURI</body></methods><methods><class-id>QuickTileProxyGapiv2</class-id> <category>private</category><body package="QuickMap" selector="getUri1:x:y:zoom:">getUri1: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| galileo |	galileo := 'Galileo' readStream next: (Random new next * 7) rounded.	^('http://mt' , anInteger printString		, '.google.com/vt/lyrs=m@260000000&amp;hl=en&amp;src=apiv2&amp;x=' , x printString		, '&amp;y=' , y printString		, '&amp;z=' , zoom printString		, '&amp;s=' , galileo)		asURI</body></methods><methods><class-id>QuickTileProxyArcgisWorldHillshade</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyArcgisWorldHillshade</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	^('http://services.arcgisonline.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer/tile/'		, zoom printString , '/'		, y printString , '/'		, x printString) asURI</body></methods><methods><class-id>QuickTileProxyGkhm</class-id> <category>networking</category><body package="QuickMap" selector="getPng:x:y:zoom:">getPng: anIndex x: x y: y zoom: zoom	| httpResponse imageStream url qhr idxc cli sem |	idxc := self semIndexClient.	cli := self clientAt: idxc.	sem := self semaphoreAt: idxc.	url := self				getUri: anIndex				x: x				y: y				zoom: zoom.	qhr := QuickHttpRequest get: url.	qhr requestLine url path: (OrderedCollection new add: 'kh'; add:('v=192&amp;x=', x printString, '&amp;y=', y printString, '&amp;z=', zoom printString) ; yourself).	qhr fieldValueAt: 'User-Agent'		put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	qhr mapClients: cli.	sem critical: [httpResponse := qhr execute].	imageStream := httpResponse value byteSource.	^imageStream</body></methods><methods><class-id>QuickTileProxyGkhm</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyGkhm</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	^('http://khm1' ", anInteger printString"		, '.google.com/kh/v=192&amp;x=' , x printString		, '&amp;y=' , y printString		, '&amp;z=' , zoom printString)		asURI</body></methods><methods><class-id>QuickTileProxyOSM</class-id> <category>private</category><body package="QuickMap" selector="getUri1:x:y:zoom:">getUri1: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^('http://tile.openstreetmap.org/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		asURI</body></methods><methods><class-id>QuickTileProxyOSM</class-id> <category>private</category><body package="QuickMap" selector="getUri2:x:y:zoom:">getUri2: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^('http://tile.openstreetmap.fr/osmfr' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		asURI</body></methods><methods><class-id>QuickTileProxyOSM</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyOSM</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^('http://tile.openstreetmap.org/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		asURI</body></methods><methods><class-id>QuickTileProxyGapp</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| galileo |	galileo := 'Galileo' readStream next: (Random new next * 7) rounded.	^('http://mt' , anInteger printString		, '.google.com/vt/lyrs=m@259000000&amp;hl=en&amp;src=app&amp;x=' , x printString		, '&amp;y=' , y printString		, '&amp;z=' , zoom printString		, '&amp;s=' , galileo)		asURI</body></methods><methods><class-id>QuickTileProxyGapp</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyGapp</class-id> <category>networking</category><body package="QuickMap" selector="getPng:x:y:zoom:">getPng: anIndex x: x y: y zoom: zoom	| httpResponse imageStream url qhr idxc cli sem galileo |	idxc := self semIndexClient.	cli := self clientAt: idxc.	sem := self semaphoreAt: idxc.	url := self				getUri: anIndex				x: x				y: y				zoom: zoom.	qhr := QuickHttpRequest get: url.	galileo := 'Galileo' readStream next: (Random new next * 7) rounded.	qhr requestLine url path: ((OrderedCollection new)				add: 'vt';				add: 'lyrs=m@259000000&amp;hl=en&amp;src=app&amp;x=' 							, x printString , '&amp;y='							, y printString , '&amp;z='							, zoom printString							, '&amp;s=' , galileo;				yourself).	qhr fieldValueAt: 'User-Agent'		put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.	qhr mapClients: cli.	sem critical: [httpResponse := qhr execute].	imageStream := httpResponse value byteSource.	^imageStream</body></methods><methods><class-id>QuickTileProxyQuest1</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| url |	url := ('http://otile1.mqcdn.com/tiles/1.0.0/map/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png').	Transcript show: url; cr.	^ url	asURI</body></methods><methods><class-id>QuickTileProxyQuest1</class-id> <category>private</category><body package="QuickMap" selector="getUri2:x:y:zoom:">getUri2: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^('http://otile1.mqcdn.com/tiles/1.0.0/map/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		asURI</body></methods><methods><class-id>QuickTileProxyQuest1</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyQuest1</class-id> <category>networking</category><body package="QuickMap" selector="getPng:x:y:zoom:">getPng: anIndex x: x y: y zoom: zoom	| httpResponse imageStream url qhr idxc cli sem baseDirName fn fnis fnos reader image ws |	baseDirName := self pickCellDir.	fn := baseDirName , self class name , '-' , x printString , '-'				, y printString.	fnis := fn , '.jpeg'.	fnos := fn , '.png'.	fnos asFilename exists		ifTrue: 			[reader := ImageReader fromFile: fnos.			reader readImage.			image := reader image.			^image]		ifFalse: 			[idxc := self semIndexClient.			cli := self clientAt: idxc.			sem := self semaphoreAt: idxc.			url := self						getUri: anIndex						x: x						y: y						zoom: zoom.			qhr := QuickHttpRequest get: url.			qhr fieldValueAt: 'User-Agent'				put: 'Mozilla/5.0 (X11; U; Linux i686; fr; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.10 (maverick) Firefox/3.6.23'.			qhr mapClients: cli.			sem critical: [httpResponse := qhr execute].			imageStream := httpResponse value byteSource.			ws := (fnis asFilename withEncoding: #binary) writeStream.			imageStream reset.			ws setBinary: true.			ws nextPutAll: imageStream contents.			ws				flush;				close.			"UnixProcess cshOne: 'jpegtopnm ' , fnis , '| pnmtopng ' , '&gt; ' , fnos."			UnixProcess cshOne: 'convert ' , fnis , '  ' , fnos.			reader := ImageReader fromFile: fnos.			reader readImage.			image := reader image.			^image].	^imageStream</body></methods><methods><class-id>QuickTileProxyQuest1</class-id> <category>private</category><body package="QuickMap" selector="getUri1:x:y:zoom:">getUri1: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^('http://otile2.mqcdn.com/tiles/1.0.0/map/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		asURI</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyArcgisWorldImagery</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	^('http://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/tile/'		, zoom printString , '/'		, y printString , '/'		, x printString) asURI</body></methods><methods><class-id>QuickTileProxyThunderforest</class-id> <category>private</category><body package="QuickMap" selector="getUri1:x:y:zoom:">getUri1: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| url |	url := ('http://b.tile.thunderforest.com/outdoors/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		 . 	^url asURI</body></methods><methods><class-id>QuickTileProxyThunderforest</class-id> <category>private</category><body package="QuickMap" selector="getUri2:x:y:zoom:">getUri2: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| url |	url := ('http://c.tile.thunderforest.com/outdoors/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		 . 	^url asURI</body></methods><methods><class-id>QuickTileProxyThunderforest</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| url |	url := ('http://a.tile.thunderforest.com/outdoors/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		 . 		"Transcript show: url ; cr."	^url asURI</body></methods><methods><class-id>QuickTileProxyThunderforest</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyOCM</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyOCM</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	^('http://tile.thunderforest.com/cycle/' , zoom printString , '/'		, x printString , '/'		, y printString , '.png')		asURI</body></methods><methods><class-id>QuickTileProxyGreatBritain</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| string |	string :=super baseWsn, '/osm_tiles/' , zoom printString , '/'				, x printString , '/'				, y printString , '.png'.	Transcript		show: string;		cr.	^string asURI</body></methods><methods><class-id>QuickTileProxyGreatBritain</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyCentralAmerica</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyCentralAmerica</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| string |	string := super baseWsn, '/osm_centralamerica/' , zoom printString , '/'				, x printString , '/'				, y printString , '.png'.	Transcript		show: string;		cr.	^string asURI</body></methods><methods><class-id>QuickTileProxyMadagascar</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| string |	string :=super baseWsn, '/osm_madagascar/' , zoom printString , '/'				, x printString , '/'				, y printString , '.png'.	Transcript		show: string;		cr.	^string asURI</body></methods><methods><class-id>QuickTileProxyMadagascar</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyIndonesia</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| string |	string :=super baseWsn, '/osm_indonesia/' , zoom printString , '/'				, x printString , '/'				, y printString , '.png'.	Transcript		show: string;		cr.	^string asURI</body></methods><methods><class-id>QuickTileProxyIndonesia</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxySenegal</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxySenegal</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| string |	string :=super baseWsn, '/osm_senegal/' , zoom printString , '/'				, x printString , '/'				, y printString , '.png'.	Transcript		show: string;		cr.	^string asURI</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="path">path	^path</body></methods><methods><class-id>QuickTileMap</class-id> <category>changing</category><body package="QuickMap" selector="zoomChanged:">zoomChanged: newZoom	| gpr |	self convertPathWithZoom: newZoom.	self model value changePickModelRange.	self topComponent model doBuildGraph.	"gpr := self topComponent model gpredictReader.	gpr isNil ifFalse: [gpr mobileInterface value zoom: newZoom]"</body></methods><methods><class-id>QuickTileMap</class-id> <category>changing</category><body package="QuickMap" selector="updateModel">updateModel	self invalidateNow</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="pathInPixel">pathInPixel	^pathInPixel</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="path:">path: anObject	path := anObject</body></methods><methods><class-id>QuickTileMap</class-id> <category>displaying</category><body package="QuickMap" selector="displayPathOn:">displayPathOn: aGC	| p gaw sat |	p := Polyline vertices: pathInPixel asArray.	gaw := GraphicsAttributesWrapper on: p asStroker.	gaw attributes: ColorValue black.	gaw displayOn: aGC.	"Satellite icon"	pathInPixel isEmpty		ifFalse: 			[| lastPoint gawSat |			lastPoint := pathInPixel last.			sat := Circle center: lastPoint radius: 10.			gawSat := GraphicsAttributesWrapper on: sat asFiller.			gawSat attributes: ColorValue red.			gawSat displayOn: aGC at: 0 @ 0]</body></methods><methods><class-id>QuickTileMap</class-id> <category>bounds accessing</category><body package="QuickMap" selector="preferredExtent">preferredExtent	"TODO: This should probably be derived from something in VisualComponent to represent maximum bounds"	^(Rectangle origin: 0 @ 0		corner: globalMercator tileSize @ globalMercator tileSize) extent</body></methods><methods><class-id>QuickTileMap</class-id> <category>displaying</category><body package="QuickMap" selector="displayStationsOn:">displayStationsOn: aGC	| colStations pos cir gawCircle |	colStations := self model value stationPositions.		1 to: colStations size do: 	[ :element | colStations at: element.				pos := (colStations at: element) rounded.				Transcript show: pos x printString, '@', pos y printString; cr. 				cir := Circle center: pos radius: 20.		gawCircle := GraphicsAttributesWrapper on: cir asFiller.		gawCircle attributes: ColorValue red.		gawCircle displayOn: aGC.	].</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="dicoProxy">dicoProxy	^dicoProxy</body></methods><methods><class-id>QuickTileMap</class-id> <category>displaying</category><body package="QuickMap" selector="displayCell:on:">displayCell: color on: aGC	| qtm cells lastPoint sat gawSat cell name |	super displayOn: aGC.	zoom := self model value zoom.	qtm := self model value.	cells := qtm highLightCells.	cells isNil		ifFalse: 			[cells keysAndValuesDo: 					[:cellIndex :arrayWithCell |					cell := arrayWithCell at: 5.					name := arrayWithCell at: 6.					image := cell cellImage.					lastPoint := cell position.					sat := Circle center: lastPoint radius: 10.					gawSat := GraphicsAttributesWrapper on: sat asFiller.					gawSat attributes: ColorValue red.					gawSat displayOn: aGC at: 0 @ 0]]</body></methods><methods><class-id>QuickTileMap</class-id> <category>private</category><body package="QuickMap" selector="refreshLighttrapList:">refreshLighttrapList: traps	self model value refreshLighttraps: traps</body></methods><methods><class-id>QuickTileMap</class-id> <category>As yet unclassified</category><body package="QuickMap" selector="getController">getController	controller isNil		ifTrue: 			[self controller: QuickTileController new.			self controller view: self.			self controller model: model].	^controller</body></methods><methods><class-id>QuickTileMap</class-id> <category>displaying</category><body package="QuickMap" selector="displayPointsOn:">displayPointsOn: aGC	| colPoints | 	"Satellite path"		colPoints := self model value stations.			Transcript show: colPoints size printString.</body></methods><methods><class-id>QuickTileMap</class-id> <category>displaying</category><body package="QuickMap" selector="displayColorPathOn:">displayColorPathOn: aGC	colPathPolyline do: 			[:pathPolyline |			| gaws |			gaws := GraphicsAttributesWrapper on: pathPolyline asStroker.			gaws attributes: ColorValue black.			gaws displayOn: aGC]</body></methods><methods><class-id>QuickTileMap</class-id> <category>private</category><body package="QuickMap" selector="refreshStationList:">refreshStationList: stations	self model value refreshStations: stations</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="satellite">satellite	^satellite</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="satellite:">satellite: anObject	satellite := anObject</body></methods><methods><class-id>QuickTileMap</class-id> <category>displaying</category><body package="QuickMap" selector="displayOn:">displayOn: aGC	| comp | 	super displayOn: aGC.	"Satellite path"	pathInPixel isEmpty ifFalse: [self displayPathOn: aGC].	"New satellite path: col of Polylines"	colPathPolyline isEmpty ifFalse: [self displayColorPathOn: aGC].	zoom := self model value zoom.	comp := self model value pickModel lastGraph.	comp isNil ifFalse: [comp displayOn: aGC].	self model value clicZoneAllRectangle		do: [:r | r asStroker displayOn: aGC].	self model value clicZoneInProgress		ifTrue: 			[| r |			r := Rectangle origin: self controller clicZoneOrigin						corner: self controller clicZoneCorner.			r asStroker displayOn: aGC].	self 	displayCell: ColorValue blue on: aGC.	self displayStationsOn: aGC.</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="controller">controller	^controller</body></methods><methods><class-id>QuickTileMap</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	"tileSize"	dicoProxy := Dictionary new.	"self makeActiveProxy: #QuickTileProxyOSM."	super initialize.	path := OrderedCollection new.	pathInPixel := OrderedCollection new.	globalMercator := GlobalMercator new.	model := QuickTileModel new asValue.	model value zoom: mapZoom.	model onChangeSend: #updateModel to: self.	colPathPolyline := OrderedCollection new.		" *** Replace this comment with the appropriate initialization code *** "	"self mapZoom: 12."	"tileSize := 256."	"globalMercator := GlobalMercator new."	"self container origin value: (1996 * tileSize) negated @ (1416 * tileSize) negated."	^self</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="convertToPoints:longitude:zoom:">convertToPoints: lat longitude: long zoom: zoomView	"meters := "	| point m |		m := self globalMercator latLonToMeter: lat lon: long.	point := (self globalMercator meterToPixelNew: m zoom: zoomView) rounded.	^point</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="controller:">controller: anObject	controller := anObject</body></methods><methods><class-id>QuickTileMap</class-id> <category>private</category><body package="QuickMap" selector="makeActiveProxy:">makeActiveProxy: aByteSymbol	proxy := dicoProxy at: aByteSymbol				ifAbsentPut: 					[(Compiler evaluate: aByteSymbol asString , ' new') container: self]</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="globalMercator">globalMercator	^globalMercator</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="getOrigin">getOrigin	| o |	o := self container origin.	^o</body></methods><methods><class-id>QuickTileMap</class-id> <category>displaying</category><body package="QuickMap" selector="displayOn0:">displayOn0: aGC	super displayOn: aGC.	'Bonjour' asComposedText displayOn: aGC		at: self container scrollOffset + (100 @ 100)</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="pathInPixel:">pathInPixel: anObject	pathInPixel := anObject</body></methods><methods><class-id>QuickTileMap</class-id> <category>displaying</category><body package="QuickMap" selector="displayCellx:on:">displayCellx: color on: aGC	| qtm cells white bounds mid cache cacheGC mergedColor gaw ga img1 img2 pix1 pix2 pix3 cv3 rectangle |	super displayOn: aGC.	zoom := self model value zoom.	qtm := self model value.	cells := qtm highLightCells.	self halt.	cells isNil 		ifFalse: 			[white := ColorValue black.			cells keysAndValuesDo: 					[:cellIndex :cell |					image := cell cellImage.					bounds := image bounds.					mid := (bounds scaledBy: 0.5 @ 0.5) corner.					cache := Pixmap extent: bounds extent.					cacheGC := cache graphicsContext.					mergedColor := color blendWith: white weight: mid x.					rectangle := bounds asFiller.					gaw := GraphicsAttributesWrapper on: rectangle.					ga := GraphicsAttributes new paint: mergedColor.					gaw attributes: ga.					gaw displayOn: cacheGC.					img1 := cacheGC medium asImage.					img2 := aGC medium asImage.					0 to: img1 height - 1						do: 							[:yy |							0 to: img1 width - 1								do: 									[:xx |									pix1 := img1 valueAtPoint: xx @ yy.									pix2 := img2 valueAtPoint: (  (xx @ yy)).									pix3 := pix1 blendWith: pix2.									cv3 := img1 palette indexOfPaintNearest: pix3.									img1 valueAtPoint: xx @ yy put: (img1 palette at: cv3)]].					img1 displayOn: aGC at: cell position]]</body></methods><methods><class-id>QuickTileMap</class-id> <category>computing</category><body package="QuickMap" selector="convertPathWithZoom:">convertPathWithZoom: myZoom	| lastP colPath currentPath |	path isEmpty ifTrue: [^self].	pathInPixel := path				collect: [:point | (globalMercator meterToPixelNew: point zoom: myZoom) rounded].	lastP := pathInPixel first.	colPath := OrderedCollection new.	currentPath := OrderedCollection new.	pathInPixel do: 			[:p |			p x &gt; lastP x				ifTrue: 					[colPath add: currentPath.					currentPath := OrderedCollection new].			currentPath add: p.			lastP := p].	colPath add: currentPath.	colPathPolyline := colPath collect: [:p | Polyline vertices: p asArray]</body></methods><methods><class-id>QuickTileMap</class-id> <category>changing</category><body package="QuickMap" selector="addPointMeter:">addPointMeter: meter	| pixel |	path add: meter.	pixel := globalMercator meterToPixelNew: meter zoom: model value zoom.	pathInPixel add: pixel</body></methods><methods><class-id>QuickTileMap</class-id> <category>accessing</category><body package="QuickMap" selector="globalMercator:">globalMercator: anObject	globalMercator := anObject</body></methods><methods><class-id>QuickTileProxyFrance</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| string |	string :=super baseWsn, '/osm_france/' , zoom printString , '/'				, x printString , '/'				, y printString , '.png'.	Transcript		show: string;		cr.	^string asURI</body></methods><methods><class-id>QuickTileProxyFrance</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyVietnam</class-id> <category>initialize-release</category><body package="QuickMap" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>QuickTileProxyVietnam</class-id> <category>private</category><body package="QuickMap" selector="getUri:x:y:zoom:">getUri: anInteger x: x y: y zoom: zoom	" *** This method was defined by QuickTileProxy as a subclass responsibility.	Replace its body with a proper implementation. *** "	"self error: 'Subclass responsibility stub not reimplemented'"	| string |	string := super baseWsn, '/osm_vietnam/' , zoom printString , '/'				, x printString , '/'				, y printString , '.png'.	Transcript		show: string;		cr.	^string asURI</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="PickCell" selector="toolsPickCell">toolsPickCell	"Open Smalltalk.AlgoDis.UIPickCellNodes."	&lt;	menuItem: 'Pick Cell'	nameKey: nil	menu: #(#menuBar #tools)	position: 12.96999&gt;	Smalltalk.AlgoDis.UIPickCellNodes open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Mapsv0" selector="toolsMapsv0">toolsMapsv0	"Old  map display."	&lt;menuItem: 'Old UI Map'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.973&gt;	UIMapsv0 open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="MapAccess" selector="toolsMapAccess">toolsMapAccess	"Open UIMapAccess."	&lt;menuItem: 'Map Access'		nameKey: nil		menu: #(#menuBar #tools #Brest)		position: 12.975&gt;	UIMapAccess open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="MapAccess" selector="toolsMapAccessSubmenu">toolsMapAccessSubmenu	"Define a sub-menu for each of the tools."	&lt;submenu: 'Université de Brest'		nameKey: #Brest		menu: #(#menuBar #tools)		position: 12.976&gt;</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="QuickMap" selector="toolsQuickMapMove">toolsQuickMapMove	"Open UIQuickMap."	&lt;menuItem: 'Quick Map Move'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.96991&gt;	UIQuickMap openMove</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="QuickMap" selector="toolsQuickMap">toolsQuickMap	"Open UIQuickMap."	&lt;menuItem: 'Quick Map'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.9699&gt;	UIQuickMap open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="QuickMap" selector="toolsQuickMapReset">toolsQuickMapReset	"Open UIQuickMap."	&lt;menuItem: 'Quick Map reset'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.96996&gt;	UIQuickMap resetConfig</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="QuickMap" selector="toolsQuickMapShapefile">toolsQuickMapShapefile	"Open UIQuickMap."	&lt;menuItem: 'Quick Map Shapefile'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.96993&gt;	UIQuickMap openWithSpec: #windowSpecShapefile</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="QuickMap" selector="toolsQuickMapSatellite">toolsQuickMapSatellite	"Open UIQuickMap."	&lt;menuItem: 'Quick Map Satellite'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.96994&gt;	UIQuickMap openWithSpec: #windowSpecGpredict</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="QuickMap" selector="toolsQuickMapChoose">toolsQuickMapChoose	"Open UIQuickMap."	&lt;menuItem: 'Quick Map Choose'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.96992&gt;	UIQuickMap openChoose</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="QuickMap" selector="toolsQuickMapPickcell">toolsQuickMapPickcell	"Open UIQuickMap."	&lt;menuItem: 'Quick Map Pickcell'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.96996&gt;	UIQuickMap openWithSpec: #windowSpecPickcell</body></methods><component-property><name>PickCell</name> <type>package</type><property>packageName</property> <value>'PickCell'</value></component-property><component-property><name>PickCell</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('Mapsv0' '') #('DistributedModeling' '') #('Base VisualWorks' '') #('HTTP' '') #('ImageReaders' '') #('(none)' '') #('JSONReader' '') #('MIME' ''))</value></component-property><component-property><name>PickCell</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'Mapsv0' '') #(#any 'DistributedModeling' '') #(#any 'Base VisualWorks' '') #(#any 'HTTP' '') #(#any 'ImageReaders' '') #(#any '(none)' '') #(#any 'JSONReader' '') #(#any 'MIME' ''))</value></component-property><component-property><name>PickCell</name> <type>package</type><property>prerequisiteDescriptions</property> <value>#(#(#name 'Mapsv0' #componentType #package) #(#name 'DistributedModeling' #componentType #package) #(#name 'Base VisualWorks' #componentType #bundle) #(#name 'HTTP' #componentType #package) #(#name 'ImageReaders' #componentType #package) #(#name '(none)' #componentType #package) #(#name 'JSONReader' #componentType #package) #(#name 'MIME' #componentType #package))</value></component-property><pundle-loaded><name>PickCell</name><type>package</type><primaryKey>44</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><component-property><name>Mapsv0</name> <type>package</type><property>packageName</property> <value>'Mapsv0'</value></component-property><component-property><name>Mapsv0</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('HTTP' '') #('ImageReaders' '') #('MIME' '') #('DistributedModeling' ''))</value></component-property><component-property><name>Mapsv0</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'HTTP' '') #(#any 'ImageReaders' '') #(#any 'MIME' '') #(#any 'DistributedModeling' ''))</value></component-property><component-property><name>Mapsv0</name> <type>package</type><property>prerequisiteDescriptions</property> <value>#(#(#name 'HTTP' #componentType #package) #(#name 'ImageReaders' #componentType #package) #(#name 'MIME' #componentType #package) #(#name 'DistributedModeling' #componentType #package))</value></component-property><component-property><name>Mapsv0</name> <type>package</type><property>comment</property> <value>'UIGoogleMap displays map provided by Google and content, such as points and lines, provided by user. Package required: DistributedModeling version 1.28.1.2.5'</value></component-property><pundle-loaded><name>Mapsv0</name><type>package</type><primaryKey>22</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><component-property><name>MapAccess</name> <type>package</type><property>packageName</property> <value>'MapAccess'</value></component-property><component-property><name>MapAccess</name> <type>package</type><property>comment</property> <value>'Display maps from tile servers, like Google Map or OpenStreetMap.Georeference points on the map.Display objects from shapefiles. Library is located here: http://wsn.univ-brest.fr/MapAccess/library/libShapeFile.tar. Run ''make'' to compile it. BMO shapefile is located here: http://wsn.univ-brest.fr/MapAccess/bmo/. Copy the two files shp and shx in the same directory. '</value></component-property><component-property><name>MapAccess</name> <type>package</type><property>notice</property> <value>'WSN@LabSTICC'</value></component-property><component-property><name>MapAccess</name> <type>package</type><property>prerequisiteDescriptions</property> <value>#(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'HTTP' #componentType #package) #(#name 'ImageReaders' #componentType #package) #(#name 'MIME' #componentType #package) #(#name 'NetClientBase' #componentType #package) #(#name 'DLLCC' #componentType #package) #(#name 'URISupport' #componentType #package))</value></component-property><component-property><name>MapAccess</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'Base VisualWorks' '') #(#any 'HTTP' '') #(#any 'ImageReaders' '') #(#any 'MIME' '') #(#any 'NetClientBase' '') #(#any 'DLLCC' '') #(#any 'URISupport' ''))</value></component-property><component-property><name>MapAccess</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('Base VisualWorks' '') #('HTTP' '') #('ImageReaders' '') #('MIME' '') #('NetClientBase' '') #('DLLCC' '') #('URISupport' ''))</value></component-property><pundle-loaded><name>MapAccess</name><type>package</type><primaryKey>43</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><component-property><name>QuickMap</name> <type>package</type><property>postLoadBlock</property> <value>[:package |]</value></component-property><component-property><name>QuickMap</name> <type>package</type><property>packageName</property> <value>'QuickMap'</value></component-property><component-property><name>QuickMap</name> <type>package</type><property>preLoadBlock</property> <value>[:package | ]</value></component-property><component-property><name>QuickMap</name> <type>package</type><property>comment</property> <value>'A set of classes for displaying maps provided by tile server like Google Map or OpenStreetMap.'</value></component-property><component-property><name>QuickMap</name> <type>package</type><property>prerequisiteDescriptions</property> <value>#(#(#name 'HTTP' #componentType #package) #(#name 'ImageReaders' #componentType #package) #(#name 'MIME' #componentType #package) #(#name 'URISupport' #componentType #package) #(#name 'NetClientBase' #componentType #package) #(#name 'BOSS' #componentType #package) #(#name 'MapAccess' #componentType #package) #(#name 'Base VisualWorks' #componentType #bundle) #(#name 'JSONReader' #componentType #package) #(#name 'DistributedModeling' #componentType #package) #(#name 'PickCell' #componentType #package) #(#name 'MobileTrackInterface' #componentType #package) #(#name 'DistributedModeling-Mobile' #componentType #package) #(#name 'Mapsv0' #componentType #package) #(#name 'PostgreSQL3EXDI' #componentType #package))</value></component-property><component-property><name>QuickMap</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'HTTP' '') #(#any 'ImageReaders' '') #(#any 'MIME' '') #(#any 'URISupport' '') #(#any 'NetClientBase' '') #(#any 'BOSS' '') #(#any 'MapAccess' '') #(#any 'Base VisualWorks' '') #(#any 'JSONReader' '') #(#any 'DistributedModeling' '') #(#any 'PickCell' '') #(#any 'MobileTrackInterface' '') #(#any 'DistributedModeling-Mobile' '') #(#any 'Mapsv0' '') #(#any 'PostgreSQL3EXDI' ''))</value></component-property><component-property><name>QuickMap</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('HTTP' '') #('ImageReaders' '') #('MIME' '') #('URISupport' '') #('NetClientBase' '') #('BOSS' '') #('MapAccess' '') #('Base VisualWorks' '') #('JSONReader' '') #('DistributedModeling' '') #('PickCell' '') #('MobileTrackInterface' '') #('DistributedModeling-Mobile' '') #('Mapsv0' '') #('PostgreSQL3EXDI' ''))</value></component-property><pundle-loaded><name>QuickMap</name><type>package</type><primaryKey>41</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><component-property><name>PickCellBundle</name> <type>bundle</type><property>parcelName</property> <value>'PickCellBundle'</value></component-property><component-property><name>PickCellBundle</name> <type>bundle</type><property>prerequisiteParcels</property> <value>#(#('(none)' '') #('Base VisualWorks' '') #('BOSS' '') #('DistributedModeling' '') #('DistributedModeling-Mobile' '') #('DLLCC' '') #('HTTP' '') #('ImageReaders' '') #('JSONReader' '') #('MIME' '') #('MobileTrackInterface' '') #('NetClientBase' '') #('PostgreSQL3EXDI' '') #('URISupport' ''))</value></component-property><component-property><name>PickCellBundle</name> <type>bundle</type><property>developmentPrerequisites</property> <value>#(#(#any '(none)' '') #(#any 'Base VisualWorks' '') #(#any 'BOSS' '') #(#any 'DistributedModeling' '') #(#any 'DistributedModeling-Mobile' '') #(#any 'DLLCC' '') #(#any 'HTTP' '') #(#any 'ImageReaders' '') #(#any 'JSONReader' '') #(#any 'MIME' '') #(#any 'MobileTrackInterface' '') #(#any 'NetClientBase' '') #(#any 'PostgreSQL3EXDI' '') #(#any 'URISupport' ''))</value></component-property><component-property><name>PickCellBundle</name> <type>bundle</type><property>prerequisiteDescriptions</property> <value>#(#(#name '(none)' #componentType #package) #(#name 'Base VisualWorks' #componentType #bundle) #(#name 'BOSS' #componentType #package) #(#name 'DistributedModeling' #componentType #package) #(#name 'DistributedModeling-Mobile' #componentType #package) #(#name 'DLLCC' #componentType #package) #(#name 'HTTP' #componentType #package) #(#name 'ImageReaders' #componentType #package) #(#name 'JSONReader' #componentType #package) #(#name 'MIME' #componentType #package) #(#name 'MobileTrackInterface' #componentType #package) #(#name 'NetClientBase' #componentType #package) #(#name 'PostgreSQL3EXDI' #componentType #package) #(#name 'URISupport' #componentType #package))</value></component-property><pundle-loaded><name>PickCellBundle</name><type>bundle</type><primaryKey>22</primaryKey><databaseId>#netgen</databaseId></pundle-loaded><component-created><name>AT Parser Compiler</name> <type>package</type></component-created><parcel-loaded><name>AT Parser Compiler</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATParserCompiler.pcl'))</filename></parcel-loaded><component-created><name>AT Parser Example</name> <type>package</type></component-created><parcel-loaded><name>AT Parser Example</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATParserExample.pcl'))</filename></parcel-loaded><component-created><name>AT MetaNumerics</name> <type>package</type></component-created><parcel-loaded><name>AT MetaNumerics</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATMetaNumerics.pcl'))</filename></parcel-loaded><component-created><name>AT Menu Support</name> <type>package</type></component-created><parcel-loaded><name>AT Menu Support</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATMenuSupport.pcl'))</filename></parcel-loaded><component-created><name>AT Support</name> <type>package</type></component-created><parcel-loaded><name>AT Support</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATSupport.pcl'))</filename></parcel-loaded><component-created><name>AT Benchmarks</name> <type>package</type></component-created><parcel-loaded><name>AT Benchmarks</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATBenchmarks.pcl'))</filename></parcel-loaded><component-created><name>AT System Analysis</name> <type>package</type></component-created><parcel-loaded><name>AT System Analysis</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATSystemAnalysis.pcl'))</filename></parcel-loaded><component-created><name>AT Profiling Core</name> <type>package</type></component-created><parcel-loaded><name>AT Profiling Core</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATProfilingCore.pcl'))</filename></parcel-loaded><component-created><name>AT Profiling UI</name> <type>package</type></component-created><parcel-loaded><name>AT Profiling UI</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATProfilingUI.pcl'))</filename></parcel-loaded><component-created><name>AT Integer Extensions</name> <type>package</type></component-created><parcel-loaded><name>AT Integer Extensions</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'ATIntegerExtensions.pcl'))</filename></parcel-loaded><component-created><name>All Advanced Tools</name> <type>package</type></component-created><parcel-loaded><name>All Advanced Tools</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'advanced' 'AllAdvancedTools.pcl'))</filename></parcel-loaded><component-created><name>Regex11</name> <type>package</type></component-created><parcel-loaded><name>Regex11</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'Regex11.pcl'))</filename></parcel-loaded><component-created><name>DLLCC</name> <type>package</type></component-created><parcel-loaded><name>DLLCC</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'dllcc' 'DLLCC.pcl'))</filename></parcel-loaded><component-created><name>HotDraw Framework</name> <type>package</type></component-created><parcel-loaded><name>HotDraw Framework</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'HotDraw' 'HotDraw Framework.pcl'))</filename></parcel-loaded><component-created><name>HotDraw Animation Framework</name> <type>package</type></compone