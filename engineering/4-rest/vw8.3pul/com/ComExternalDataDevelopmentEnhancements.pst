<?xml version="1.0"?><st-source><!-- Name: Com- External Data Development EnhancementsNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: Extensions to the external data support facilities which provide facilities for use during development to make it easier to work with C types and data.DbIdentifier: bear73DbTrace: 500172DbUsername: alexDbVersion: 8.3 - 1DevelopmentPrerequisites: #(#(#any 'Com- External Data Enhancements' '') #(#any 'Com- Interface Adaptors' ''))DialectVersion: VisualWorks 7.9PackageName: Com- External Data Development EnhancementsParcel: #('ComExternalDataDevelopmentEnhancements')ParcelName: Com- External Data Development EnhancementsPrerequisiteDescriptions: #(#(#name 'Com- External Data Enhancements') #(#name 'Com- Interface Adaptors' #componentType #package))PrerequisiteParcels: #(#('Com- External Data Enhancements' '') #('Com- Interface Adaptors' ''))PrintStringCache: (8.3 - 1,alex)Version: 8.3 - 1Date: 1:50:04 PM April 12, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (apr17.1) of 7. April 2017 on 12. April 2017 at 13:50:04</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ExternalStructureInspector</name><environment>Tools</environment><super>Tools.CStructureInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-External Inspectors</category><attributes><package>Com- External Data Development Enhancements</package></attributes></class><comment><class-id>Tools.ExternalStructureInspector</class-id><body>An ExternalStructureInspector is an inspector which provides an improved user view on a CComposite or CCompositePointer datum in an ExternalStructure wrapper by augmenting the basic structure data instance variable view to add direct access to each member value and a byte-level view on the actual contents of the structure data.</body></comment><methods><class-id>Tools.ExternalStructureInspector</class-id> <category>private-acessing</category><body package="Com- External Data Development Enhancements">basicMemberNames	^#( 'structure' 'protocolMap' )</body><body package="Com- External Data Development Enhancements">getBytes	^object asByteArray</body><body package="Com- External Data Development Enhancements">getDatum	^object structure datum</body><body package="Com- External Data Development Enhancements">getProtocolMap	^object protocolMap</body><body package="Com- External Data Development Enhancements">getStructure	^object structure</body><body package="Com- External Data Development Enhancements">setBytes: aByteArray 	| nBytes |	aByteArray class == ByteArray 		ifFalse: [self error: #ErrMustBeByteArray &lt;&lt; #com &gt;&gt; 'must be a ByteArray'].	nBytes := self getBytes size.	aByteArray size = nBytes 		ifFalse: [self error: #ErrSizeMix &lt;&lt; #com &gt;&gt; 'size mismatch'].	object bytesAtOffset: 0 put: aByteArray</body></methods><methods><class-id>Tools.ExternalStructureInspector</class-id> <category>field list</category><body package="Com- External Data Development Enhancements">fieldValue	"Answer the value of the currently selected variable."	field = 'structure' ifTrue: [ ^self getStructure ].	field = 'protocolMap' ifTrue: [ ^self getProtocolMap ].	^super fieldValue</body></methods><methods><class-id>External.ExternalStructure class</class-id> <category>type description</category><body package="Com- External Data Development Enhancements">describeAccessingProtocol	" Display a report describing the accessing protocol for the structure accessed by instances of the receiver. "	self describeAccessingProtocolForType: self type using: self.</body><body package="Com- External Data Development Enhancements">describeAccessingProtocolFor: aStructureTypeName	" Display a report describing the accessing protocol for the structure named &lt;aStructureTypeName&gt; when it is wrapped by an instance of the receiver. "	self describeAccessingProtocolForType: ( self typeNamed: aStructureTypeName ) 		using: self.</body><body package="Com- External Data Development Enhancements">describeAccessingProtocolForType: aStructureType	" Display a report describing the accessing protocol for the structure &lt;aStructureType&gt; when it is wrapped by an instance of the receiver. "	self describeAccessingProtocolForType: aStructureType using: self.</body></methods><methods><class-id>External.ExternalStructure class</class-id> <category>private-type description</category><body package="Com- External Data Development Enhancements">describeAccessingProtocolForType: aStructureType using: aStructureClass	" Display a report describing the accessing protocol for the structure &lt;aStructureType&gt; when it is wrapped by an instance of &lt;aStructureClass&gt;. "	| memberInfo membersByOffset accessorInfo selectors adaptorInfo title log |	memberInfo := Dictionary new.	aStructureType baseType keysAndValuesDo: [ :aName :anAssoc |		memberInfo at: aName put: ( Array			with: anAssoc key  " offset "			with:  anAssoc value  " type " ) ].	membersByOffset := SortedCollection sortBlock: [ :arr1 :arr2 |		arr1 first &lt;= arr2 first ].	memberInfo keysAndValuesDo: [ :memberName :infoAssoc |		membersByOffset add: ( Array			with: ( infoAssoc at: 1 )  " offset in structure "			with: memberName			with: ( self getDescriptionOfType: ( infoAssoc at: 2 )  ) " type name "			) ].	accessorInfo := self getWrapperAccessorInfoFor: aStructureClass.	selectors := aStructureClass selectors.	adaptorInfo := self adaptorMapRegistry at: aStructureType name		ifAbsent: [ nil ].	title :=  ((#NamedAccessingProt &lt;&lt; #com &gt;&gt; '&lt;1s&gt; Accessing Protocol (&lt;2s&gt;)') expandMacrosWith: aStructureType name with: aStructureClass name).	log := ReadWriteStream on: String new.	log 		nextPutAll: title; cr;		tab; nextPutAll: ((#NamedStructure &lt;&lt; #com &gt;&gt; 'Structure: &lt;1s&gt;') expandMacrosWith: aStructureType name); cr;		tab; nextPutAll: ((#NamedWrapperClass &lt;&lt; #com &gt;&gt; 'Wrapper class: &lt;1s&gt;') expandMacrosWith: aStructureClass name); cr;		cr.	log nextPutAll: (#WrapperProtocolColon &lt;&lt; #com &gt;&gt;'Wrapper protocol:') asString; cr.	accessorInfo size = 0		ifTrue: [ log tab; nextPutAll:(#NoAccessorMethodsSsh &lt;&lt; #com &gt;&gt; '(no accessor wrapper methods)') asString; cr ]		ifFalse: [			accessorInfo keys asSortedCollection do: [ :aCategory |			log tab; nextPutAll: '-- ', aCategory, ' --'; cr.				( accessorInfo at: aCategory ) asSortedCollection do: [ :aSelector |					log tab; tab; nextPutAll: '#', aSelector; cr ].				].			].	log cr.	adaptorInfo notNil		ifTrue: [			log nextPutAll: (#AdaptorProtocolColon &lt;&lt; #com &gt;&gt; 'Adaptor protocol:') asString; cr.			log tab; nextPutAll:(#SelectorResenders &lt;&lt; #com &gt;&gt; '" &lt;selector&gt;-&gt; &lt;resent-as selector&gt; "') asString; cr.			adaptorInfo keys asSortedCollection do: [ :aSelector |				log tab; nextPutAll: aSelector printString, 					' -&gt; ', ( adaptorInfo at: aSelector ) first printString; cr ].			log cr ].	log 		nextPutAll: (#BasicMemberAccessColon &lt;&lt; #com &gt;&gt; 'Basic member access protocol:') asString; cr;		tab; nextPutAll: (#MemberOffsetNType &lt;&lt; #com &gt;&gt; '" &lt;memberName&gt; - &lt;offset&gt; - &lt;type&gt; "') asString; cr.	membersByOffset do: [ :arr |		log tab; 			nextPutAll: '#', ( arr at: 2 );			nextPutAll: ' - ', ( arr at: 1 ) printString;			nextPutAll: ' - ', ( arr at: 3 ).		( selectors includes: ( arr at: 2 ) asSymbol )			ifTrue: [ log nextPutAll: (#AccessedByMethodSsh &lt;&lt; #com &gt;&gt; ' (accessed by wrapper method)') asString ].		log cr ].	log cr.	TextWindow openOn: log contents		label: title.</body><body package="Com- External Data Development Enhancements">getDescriptionOfType: aCType	" Private - answer a description of &lt;aCType&gt;. "	| aType aTypeName pointerModifier |	aType := aCType.	pointerModifier := ''.	[ ( aTypeName := aType name ) isNil	and: [ aType isKindOf: CPointerType ] ]		whileTrue: [			pointerModifier := pointerModifier, ' *'.			aType := aType referentType ].	aTypeName isNil		ifTrue: [ aTypeName := aType printString ].	^aTypeName, pointerModifier</body><body package="Com- External Data Development Enhancements">getWrapperAccessorInfoFor: aClass	" Private - collect protocol description information about a structure wrapper class. "	| classOrganization  accessorInfo |	classOrganization := aClass organization.	accessorInfo := Dictionary new.	classOrganization categories do: [ :aCategory |		( self isInterestingAccessorCategory: aCategory )			ifTrue: [ 				accessorInfo at: aCategory 					put: ( classOrganization listAtCategoryNamed: aCategory ) ].		].	^accessorInfo</body><body package="Com- External Data Development Enhancements">isInterestingAccessorCategory: aCategory	" Private - answer whether &lt;aCategory&gt; is interesting in the accessor description report. "	| prefixesToIgnore categoriesToIgnore |	prefixesToIgnore := #(		'subclass'		'private' 		).	categoriesToIgnore := #( 		'accessing-datum'		'accessing-members'		'accessing-type information'		'finalizing'		'inspecting'		'printing'		'releasing' 		 ).	prefixesToIgnore do: [ :aCategoryPrefix |		( aCategory size &gt; aCategoryPrefix size		and: [ ( aCategory copyFrom: 1 to: aCategoryPrefix size ) sameAs: aCategoryPrefix ] )			ifTrue: [ ^false ] ].	^( categoriesToIgnore includes: aCategory asString ) not</body></methods><methods><class-id>External.ExternalStructure</class-id> <category>type description</category><body package="Com- External Data Development Enhancements">describeAccessingProtocol	" Display a report describing the accessing protocol for the structure accessing by instances of the receiver. "	^self class describeAccessingProtocolForType: self type using: self class</body></methods><methods><class-id>External.ExternalStructure</class-id> <category>inspecting</category><body package="Com- External Data Development Enhancements">inspectorClass	^ExternalStructureInspector</body></methods><methods><class-id>External.CDatum</class-id> <category>printing</category><body package="Com- External Data Development Enhancements">printBasicDescriptionOn: aStream	"Append a text representation of the receiver to &lt;aStream&gt;."	super printOn: aStream.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ExternalStructure</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>structure memberNames protocolMap </inst-vars><class-inst-vars>structureName </class-inst-vars><imports></imports><category>External-Data-Extensions</category><attributes><package>Com- External Data Enhancements</package></attributes></class><class><name>CDatum</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>theDatum type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Data</category><attributes><package>External-Data</package></attributes></class><class><name>CStructureInspector</name><environment>Tools</environment><super>Tools.Inspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Inspector</category><attributes><package>Tools-Inspector</package></attributes></class></st-source>